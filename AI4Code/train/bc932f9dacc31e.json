{"cell_type":{"f68f9f5e":"code","9e4c7df1":"code","df90d55e":"code","df502ae5":"code","75d7844a":"code","77850232":"code","b39e4c93":"code","791f81dc":"code","0dae2bee":"code","1b1aa273":"code","00e60c1e":"code","6fdf437a":"code","99bc137e":"code","99fe0046":"code","59d6edcf":"code","4616d9d5":"code","58aab5f3":"code","7b1c1464":"code","513a47d4":"code","a5dd5e2f":"code","de3b659d":"code","0cb639e1":"code","51284ea9":"code","c812fce9":"code","1f29c251":"code","680fb546":"code","277c56cc":"code","360474e4":"code","8a9f0c85":"code","c252f469":"code","ed2adf4f":"code","1e676777":"code","04ff7b75":"code","b146bc4a":"code","2f35a454":"code","b7fb5b4b":"code","b6b510a9":"code","638057b8":"code","20ded285":"code","c94119c2":"code","9c254ff2":"code","e461b3c1":"code","7dd8bb87":"code","127c8ae7":"code","cd819469":"code","29b0ecd3":"code","9739caeb":"code","db2a8723":"code","57bed87a":"code","20691760":"code","cb8e102d":"code","1f55fc32":"code","94bbb23a":"code","61edfe7c":"code","459d117d":"code","ecd8be7b":"code","7995aa9e":"code","18976005":"code","9974c988":"code","53637238":"code","ea77e140":"code","3eaf766a":"code","e163b327":"code","1af2cc03":"code","c35d97a0":"code","1e578480":"code","a47ce63e":"code","b607ac04":"code","7c40fea9":"code","548becd8":"code","53353aac":"code","63222423":"code","2f925b22":"code","8d9efe5c":"code","d3823d17":"code","d9f70372":"code","5d56b66b":"code","ad618c5f":"code","76a18388":"code","f379e5f7":"code","e1be8d89":"code","18362b87":"code","ce63912c":"code","e8cbf5d2":"code","5f421ab2":"code","54d9ceea":"code","3481e2e1":"code","c47f5766":"code","63632faf":"code","50241b4b":"code","520a628f":"code","8b2e1d4a":"code","91a646e6":"code","7917c0aa":"code","9bc1d77b":"code","0c49dd1e":"code","a22d3b2e":"code","8fe3a2b5":"code","5739d822":"code","eff0430a":"code","624c5d45":"code","e10aba86":"code","4ef3ae37":"code","eb04cc98":"code","d7ff597c":"code","ca58d80e":"code","abdc05d3":"code","41d9f8e9":"code","a744a1a5":"code","732f813c":"code","2e80508c":"code","d5c45e60":"code","e6bd4737":"code","b9a30ad6":"code","3b8c27f2":"markdown","e3b07fa3":"markdown"},"source":{"f68f9f5e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9e4c7df1":"import pandas as pd\ndf = pd.read_csv(\"..\/input\/AirlinesCluster.csv\")","df90d55e":"df.head()","df502ae5":"df.isnull().sum()","75d7844a":"df.info()","77850232":"for i in df.columns:\n    print(i)\n    sns.kdeplot(df[i])\n    plt.show()\n    sns.boxplot(df[i])\n    plt.show()","b39e4c93":"df.describe()","791f81dc":"df.head()","0dae2bee":"plt.figure(figsize=(12,8))\nsns.boxplot(data=df)","1b1aa273":"##Trying out if transformation removes outliers\n\nplt.figure(figsize=(12,8))\nsns.boxplot(data=np.sqrt(df))","00e60c1e":"np.sqrt(df).isnull().sum()","6fdf437a":"df1 = np.sqrt(df)","99bc137e":"df1.head()","99fe0046":"df.head()","59d6edcf":"##Let's use the original data first, and let's remove the outliers from Balance first:","4616d9d5":"q1 = df['Balance'].quantile(0.25)\nq3 = df['Balance'].quantile(0.75)\niqr = q3-q1\nul = q3 + (1.5*iqr)\nll = q1 - (1.5*iqr)\ndf1 = df[(df['Balance']>ll)&(df['Balance']<ul)]","58aab5f3":"df1.head()","7b1c1464":"plt.figure(figsize=(12,8))\nsns.boxplot(data=df1)","513a47d4":"df.shape","a5dd5e2f":"df1.shape","de3b659d":"##Now removing outliers from BonusMiles:","0cb639e1":"q1 = df['BonusMiles'].quantile(0.25)\nq3 = df['BonusMiles'].quantile(0.75)\niqr = q3-q1\nul = q3 + (1.5*iqr)\nll = q1 - (1.5*iqr)\ndf2 = df1[(df1['BonusMiles']>ll)&(df1['BonusMiles']<ul)]","51284ea9":"plt.figure(figsize=(12,8))\nsns.boxplot(data=df2)","c812fce9":"##Removing outliers from FlightMiles:\n","1f29c251":"q1 = df['FlightMiles'].quantile(0.25)\nq3 = df['FlightMiles'].quantile(0.75)\niqr = q3-q1\nul = q3 + (1.5*iqr)\nll = q1 - (1.5*iqr)\ndf3 = df2[(df2['FlightMiles']>ll)&(df2['FlightMiles']<ul)]","680fb546":"plt.figure(figsize=(12,8))\nsns.boxplot(data=df3)","277c56cc":"##Now removing outliers from QualMiles:\nq1 = df['QualMiles'].quantile(0.25)\nq3 = df['QualMiles'].quantile(0.75)\niqr = q3-q1\nul = q3 + (1.5*iqr)\nll = q1 - (1.5*iqr)\ndf4 = df3[(df3['QualMiles']>ll)&(df3['QualMiles']<ul)]","360474e4":"plt.figure(figsize=(12,8))\nsns.boxplot(data=df4)","8a9f0c85":"sns.boxplot(df3['QualMiles'])","c252f469":"##We notice that QualMiles contains most outliers, which can be influential while building a model, so we cannot remove them.\n#So, Considering Outliers for QualMiles: taking df3 as final","ed2adf4f":"df3.shape","1e676777":"df3.head()","04ff7b75":"##We need to normalize the data now: ","b146bc4a":"for i in df3.columns:\n    print(i)\n    sns.kdeplot(df[i])\n    plt.show()","2f35a454":"##As we can see above, we need to normalize data:\n\nfrom sklearn.preprocessing import StandardScaler\nstandard_scaler = StandardScaler()\ndf_norm = standard_scaler.fit_transform(df3)","b7fb5b4b":"from sklearn.cluster import KMeans\ncluster_range = range(1,20)\ncluster_errors = []\nfor num_clusters in cluster_range:\n    clusters = KMeans(num_clusters,n_init=10)\n    clusters.fit(df_norm)\n    labels = clusters.labels_\n    centroids = clusters.cluster_centers_\n    cluster_errors.append(clusters.inertia_)\nclusters_df = pd.DataFrame({\"num_clusters\":cluster_range,\"cluster_errors\":cluster_errors})\nclusters_df[0:20]","b6b510a9":"#Elbow plot\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.figure(figsize=(10,8))\nplt.plot(clusters_df['num_clusters'],clusters_df['cluster_errors'],marker='o')\nplt.xlabel('Num clusters')\nplt.ylabel('Cluster Errors')","638057b8":"##4 optimum clusters, as seen from elbow curve:","20ded285":"##Building unsupervised model:","c94119c2":"model1 = KMeans(n_clusters = 4, max_iter=50)\nmodel1.fit(df_norm)","9c254ff2":"#analysis of clusters formed\n\ndf3.index = pd.RangeIndex(len(df3.index))\ndf_km = pd.concat([df3,pd.Series(model1.labels_)],axis=1)\ndf_km.columns = ['Balance', 'QualMiles', 'BonusMiles', 'BonusTrans', 'FlightMiles',\n       'FlightTrans', 'DaysSinceEnroll','ClusterID']","e461b3c1":"df_km.isna().sum()","7dd8bb87":"df_km","127c8ae7":"df3.head()","cd819469":"km_cluster_Balance = pd.DataFrame(df_km.groupby('ClusterID')['Balance'].mean())\nkm_cluster_QualMiles = pd.DataFrame(df_km.groupby('ClusterID')['QualMiles'].mean())\nkm_cluster_BonusMiles = pd.DataFrame(df_km.groupby('ClusterID')['BonusMiles'].mean())\nkm_cluster_BonusTrans = pd.DataFrame(df_km.groupby('ClusterID')['BonusTrans'].mean())\nkm_cluster_FlightMiles = pd.DataFrame(df_km.groupby('ClusterID')['FlightMiles'].mean())\nkm_cluster_FlightTrans = pd.DataFrame(df_km.groupby('ClusterID')['FlightTrans'].mean())\nkm_cluster_DaysSinceEnroll = pd.DataFrame(df_km.groupby('ClusterID')['DaysSinceEnroll'].mean())\n\n\ndf = pd.concat([pd.Series([0,1,2,3]),km_cluster_Balance,\nkm_cluster_QualMiles,\nkm_cluster_BonusMiles,\nkm_cluster_BonusTrans,\nkm_cluster_FlightMiles,\nkm_cluster_FlightTrans,\nkm_cluster_DaysSinceEnroll],axis=1)\ndf.columns = ['ClusterID','Balance', 'QualMiles', 'BonusMiles', 'BonusTrans', 'FlightMiles',\n       'FlightTrans', 'DaysSinceEnroll']\ndf","29b0ecd3":"sns.barplot(data=df,x='ClusterID',y='Balance')","9739caeb":"#People in Cluster 1 require highest number of miles to be eligible for award travel","db2a8723":"sns.barplot(data=df,x='ClusterID',y='QualMiles')","57bed87a":"#Cluster 2 contains people who require most number of miles to qualify for top flight status ","20691760":"sns.barplot(data=df,x='ClusterID',y='BonusMiles')","cb8e102d":"#Cluster 1 people have the highest number of miles earned from non-flight bonus transactions in the past 12 months","1f55fc32":"sns.barplot(data=df,x='ClusterID',y='BonusTrans')","94bbb23a":"#Cluster 1 people have the highest number of non-flight bonus transactions in the past 12 months","61edfe7c":"sns.barplot(data=df,x='ClusterID',y='FlightMiles')","459d117d":"#Cluster 3 people have highest number of flight miles in the past 12 months, whereas we can see that flight miles are quite low\n#for cluster 1 people, hence they were made to earn more flight miles through non-flight bonus transactions, so that they fly,\n#and increase the business for the airline","ecd8be7b":"sns.barplot(data=df,x='ClusterID',y='FlightTrans')","7995aa9e":"sns.barplot(data=df,x='ClusterID',y='DaysSinceEnroll')","18976005":"##In Cluster1, people have enrolled in the flight program for a very long time, longer than others, which is why they are being\n#offered more flight miles through non-flight bonus transactions, so that they can increase the frequency of flying for customers\n#who have been enrolled for a long time. This hasn't had much effect on the people though. The flying miles for Cluster1 are \n#still quite less.","9974c988":"#Cluster0 has less flight miles, but the points they were awarded are lesser than the amount awarded to Cluster1, and that\n#could be before people in cluster0 enrolled after the people in cluster1.","53637238":"##Cluster 3 is not getting much fly miles through non-flight bonus transactions because they are already fliers with high miles\n##and more number of transactions than the rest.","ea77e140":"df.columns","3eaf766a":"\nfrom scipy.cluster.hierarchy import linkage, cut_tree, dendrogram","e163b327":"#Hierarchial Clustering:\nplt.figure(figsize=(15,10))\nmergings = linkage(df_norm, method='single',metric='euclidean')\ndendrogram(mergings)\nplt.show()","1af2cc03":"plt.figure(figsize=(15,10))\nmergings = linkage(df_norm, method='complete',metric='euclidean')\ndendrogram(mergings)\nplt.show()","c35d97a0":"plt.figure(figsize=(15,10))\nmergings = linkage(df_norm, method='average',metric='euclidean')\ndendrogram(mergings)\nplt.show()","1e578480":"##Agglomerative Clustering:","a47ce63e":"from sklearn.cluster import AgglomerativeClustering\n\nhis_clus = AgglomerativeClustering(n_clusters=4,affinity='euclidean',linkage='complete')\n\ncluster2 = his_clus.fit_predict(df3)\n\ndf_h = df3.copy(deep=True)\ndf_h['label'] = cluster2\ndf_h['label'].value_counts()","b607ac04":"from sklearn.cluster import AgglomerativeClustering\n\nhis_clus = AgglomerativeClustering(n_clusters=4,affinity='euclidean',linkage='single')\n\ncluster2 = his_clus.fit_predict(df3)\n\ndf_h = df3.copy(deep=True)\ndf_h['label'] = cluster2\ndf_h['label'].value_counts()","7c40fea9":"from sklearn.cluster import AgglomerativeClustering\n\nhis_clus = AgglomerativeClustering(n_clusters=4,affinity='euclidean',linkage='ward')\n\ncluster2 = his_clus.fit_predict(df3)\n\ndf_h = df3.copy(deep=True)\ndf_h['label'] = cluster2\ndf_h['label'].value_counts()","548becd8":"df_km['ClusterID'].value_counts()","53353aac":"##WE can compare what kmeans gave and what Agglomerative Clustering gave","63222423":"##NOW, Principal Component Analysis:","2f925b22":"X_std = StandardScaler().fit_transform(df3)","8d9efe5c":"cov_matrix = np.cov(X_std.T)","d3823d17":"cov_matrix","d9f70372":"#Step3: Eigen values and eigen vector","5d56b66b":"eig_vals, eig_vecs = np.linalg.eig(cov_matrix)\nprint(eig_vals)\nprint(eig_vecs)","ad618c5f":"eigen_pairs = [(np.abs(eig_vals[i]),eig_vecs[:,i]) for i in range(len(eig_vals))]","76a18388":"tot = sum(eig_vals)\nvar_exp = [(i\/tot)*100 for i in sorted (eig_vals,reverse=True)]\ncum_var_exp = np.cumsum(var_exp)\nprint(\"Cumulative Variance Explained\",cum_var_exp)","f379e5f7":"df.shape[1]","e1be8d89":"plt.figure(figsize=(12,8))\nplt.bar(range(7),var_exp,alpha=0.5,align='center',label='Individual Explained Variance')\nplt.step(range(7),cum_var_exp,where='mid',label='Cumulative Explained Variance')\nplt.ylabel('Explained Variance Ratio')\nplt.xlabel('Principal components')\nplt.legend(loc='best')\nplt.tight_layout()\nplt.show()","18362b87":"from sklearn.decomposition import PCA\n","ce63912c":"pca = PCA(n_components=2)\nprincipal_components = pca.fit_transform(df3)\nX1 = pd.DataFrame(data = principal_components, columns = ['PC1', 'PC2'])","e8cbf5d2":"X1.head()","5f421ab2":"per_var = np.round(pca.explained_variance_ratio_ * 100, decimals=1)\nlabels = ['PC' + str(x) for x in range(1, len(per_var) + 1)]\nplt.bar(x=range(1, len(per_var)+1), height=per_var, tick_label=labels)\nplt.ylabel('percentange of explained variance')\nplt.xlabel('principal component')\nplt.title('Scree Plot')\nplt.show()","54d9ceea":"df3.head()","3481e2e1":"plt.figure(figsize=(12,8))\nsns.heatmap(df3.corr(),annot=True)","c47f5766":"##Few of the features have high correlation, which shows that multi-collinearity will exist--one of the examples is \n#FlightMiles and FlightTrans","63632faf":"#So, we can consider the dataframe X1 for now, and then build a model using the PCs:","50241b4b":"from sklearn.cluster import KMeans\nKmean = KMeans(n_clusters=2)\nKmean.fit(X1)","520a628f":"KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,\n n_clusters=2, n_init=10, n_jobs=1, precompute_distances='auto',\n random_state=None, tol=0.0001, verbose=0)","8b2e1d4a":"Kmean.cluster_centers_","91a646e6":"import matplotlib.pyplot as plt\n%matplotlib inline\nplt.scatter(X1['PC1'], X1['PC2'], s =50, c='b')\nplt.scatter(6.69202776e+04, -2.56491151e+01, s=200, c='g', marker='s')\nplt.scatter(-2.00200830e+04, 7.67327084e+00, s=200, c='r', marker='s')\nplt.show()","7917c0aa":"Kmean.labels_","9bc1d77b":"X1['KMC'] = Kmean.fit_predict(X1[['PC1','PC2']])\nsns.scatterplot(x='PC1',y='PC2',hue='KMC',data=X1,palette='spring')\nplt.scatter(6.69202776e+04, -2.56491151e+01, s=200, marker='s')\nplt.scatter(-2.00200830e+04, 7.67327084e+00, s=200, marker='s')\nplt.show()","0c49dd1e":"##Let's try DBSCAN for the same:","a22d3b2e":"from sklearn.cluster import DBSCAN","8fe3a2b5":"db = DBSCAN(eps=0.2,min_samples=10)","5739d822":"db.fit(X1[['PC1','PC2']])","eff0430a":"X1['DBC'] = db.labels_","624c5d45":"sns.scatterplot(x='PC1',y='PC2',hue='DBC',data=X1,palette='spring')","e10aba86":"X1['DBC'].value_counts()","4ef3ae37":"##So, in this case, DBSCAN was unable to classify the data into clusters","eb04cc98":"##We have already checked the inertia(Elbow plot)--let's check the Silhouette Score","d7ff597c":"from sklearn.metrics import silhouette_samples,silhouette_score","ca58d80e":"kmeans=KMeans(n_clusters=2)","abdc05d3":"X=df3","41d9f8e9":"model = kmeans.fit(X=df3)","a744a1a5":"y=model.labels_","732f813c":"silhouette_score(X,y)","2e80508c":"score = []\nfor n_clusters in range(2,10):\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(X)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    score.append(silhouette_score(X, labels, metric='euclidean'))","d5c45e60":"plt.plot(score)","e6bd4737":"scoredata = pd.DataFrame(score,index=[2,3,4,5,6,7,8,9]).reset_index().rename(columns={0:'value'})","b9a30ad6":"# Set the size of the plot\n##Better way to plot\nplt.figure(figsize=(10,4))\nplt.subplot(1, 2, 1)\nsns.pointplot(data=scoredata,x='index',y='value')\nplt.grid(True)\nplt.ylabel(\"Silouette Score\")\nplt.xlabel(\"k\")\nplt.title(\"Silouette for K-means\")","3b8c27f2":"Market segmentation is a strategy that divides a broad target market of customers into smaller, more similar groups, and then designs a marketing strategy specifically for each group. Clustering is a common technique for market segmentation since it automatically finds similar groups given a data set.\n\nhere are seven different variables in the dataset, described below:\n\nBalance = number of miles eligible for award travel\nQualMiles = number of miles qualifying for TopFlight status\nBonusMiles = number of miles earned from non-flight bonus transactions in the past 12 months\nBonusTrans = number of non-flight bonus transactions in the past 12 months\nFlightMiles = number of flight miles in the past 12 months\nFlightTrans = number of flight transactions in the past 12 months\nDaysSinceEnroll = number of days since enrolled in the frequent flyer program","e3b07fa3":"Balance = number of miles eligible for award travel\nQualMiles = number of miles qualifying for TopFlight status\nBonusMiles = number of miles earned from non-flight bonus transactions in the past 12 months\nBonusTrans = number of non-flight bonus transactions in the past 12 months\nFlightMiles = number of flight miles in the past 12 months\nFlightTrans = number of flight transactions in the past 12 months\nDaysSinceEnroll = number of days since enrolled in the frequent flyer program"}}