{"cell_type":{"a2e3fe5c":"code","6623f161":"code","726c6f01":"code","61bfda6d":"code","37b6ea05":"code","944a896b":"code","6ae6aa3e":"code","60db4ddd":"code","a83bfa22":"code","1dc6fd8c":"code","3c842786":"code","27711f57":"code","b3e80166":"code","bd9154b2":"code","c1816c0f":"code","d16dc576":"code","2f8ae881":"code","a0b096c7":"code","bc26670c":"code","00f1c7cc":"code","14ce58c2":"code","be81b736":"code","3e4c97ac":"code","7cd74e34":"code","3b3a9906":"code","0ee25e0d":"code","3c31cb2f":"code","cc5ab09e":"markdown","c6bb0b2f":"markdown","d8131cf7":"markdown","8cc9e353":"markdown","300a925a":"markdown","f0c9f34b":"markdown","3eccb7fd":"markdown","692f10f2":"markdown"},"source":{"a2e3fe5c":"! pip install monk-kaggle","6623f161":"#Using pytorch backend \n\n# When installed using pip\nfrom monk.pytorch_prototype import prototype\n\n\n# When installed manually (Uncomment the following)\n#import os\n#import sys\n#sys.path.append(\"monk_v1\/\");\n#sys.path.append(\"monk_v1\/monk\/\");\n#from monk.pytorch_prototype import prototype","726c6f01":"# Download trained weights","61bfda6d":"! wget --load-cookies \/tmp\/cookies.txt \"https:\/\/docs.google.com\/uc?export=download&confirm=$(wget --save-cookies \/tmp\/cookies.txt --keep-session-cookies --no-check-certificate 'https:\/\/docs.google.com\/uc?export=download&id=1t88Owwp_mbBBbrlbzmDG5Q0ya8ONia6u' -O- | sed -rn 's\/.*confirm=([0-9A-Za-z_]+).*\/\\1\\n\/p')&id=1t88Owwp_mbBBbrlbzmDG5Q0ya8ONia6u\" -O cls_caltech256_trained.zip && rm -rf \/tmp\/cookies.txt","37b6ea05":"! unzip -qq cls_caltech256_trained.zip ","944a896b":"ls workspace\/Project-Caltech-256","6ae6aa3e":"# Load project in inference mode\n\ngtf = prototype(verbose=1);\ngtf.Prototype(\"Project-Caltech-256\", \"Pytorch-Shufflenet_0_5\", eval_infer=True);\n\n#Other trained models - uncomment \n#gtf.Prototype(\"Project-Caltech-256\", \"Pytorch-Shufflenet_1_0\", eval_infer=True);\n#gtf.Prototype(\"Project-Caltech-256\", \"Pytorch-Shufflenet_1_5\", eval_infer=True);","60db4ddd":"# Infer","a83bfa22":"img_name = \"workspace\/test\/test1.jpg\"\npredictions = gtf.Infer(img_name=img_name);\nfrom IPython.display import Image\nImage(filename=img_name) ","1dc6fd8c":"img_name = \"workspace\/test\/test2.jpg\"\npredictions = gtf.Infer(img_name=img_name);\nfrom IPython.display import Image\nImage(filename=img_name) ","3c842786":"img_name = \"workspace\/test\/test3.jpg\"\npredictions = gtf.Infer(img_name=img_name);\nfrom IPython.display import Image\nImage(filename=img_name) ","27711f57":"ls \/kaggle\/input\/caltech256\/256_ObjectCategories","b3e80166":"# Using mxnet-gluon backend \n#from monk.gluon_prototype import prototype\n\n# For pytorch backend\nfrom monk.pytorch_prototype import prototype\n\n# For Keras backend\n#from monk.keras_prototype import prototype","bd9154b2":"# Create Project and Experiment\n\ngtf = prototype(verbose=1);\ngtf.Prototype(\"Project-Caltech-256\", \"Compare-CNNs\");","c1816c0f":"# Create a default experiment\n\ngtf.Default(dataset_path=\"\/kaggle\/input\/caltech256\/256_ObjectCategories\",\n            model_name=\"resnet18\", \n            freeze_base_network=False,\n            num_epochs=10);","d16dc576":"# Analysis Project Name\nanalysis_name = \"analyse_models\";","2f8ae881":"gtf.List_Models();","a0b096c7":"# Models to analyse\n# First element in the list- Model Name\n# Second element in the list - Boolean value to freeze base network or not\n# Third element in the list - Boolean value to use pretrained model as the starting point or not\nmodels = [[\"resnet18\", False, True], [\"resnet152\", False, True], [\"densenet121\", True, False],\n          [\"shufflenet_v2_x0_5\", False, True], [\"mobilenet_v2\", False, True], [\"alexnet\", True, False],\n          [\"vgg16_bn\", True, False]\n         ];","bc26670c":"# Num epochs for each sub-experiment to run\nepochs=10","00f1c7cc":"# Percentage of original dataset to take in for experimentation\npercent_data=5","14ce58c2":"# \"keep_all\" - Keep all the sub experiments created\n# \"keep_non\" - Delete all sub experiments created\nanalysis = gtf.Analyse_Models(analysis_name, models, percent_data, \n                              num_epochs=epochs, state=\"keep_none\"); ","be81b736":"gtf.update_model_name(\"resnet152\");\ngtf.update_freeze_base_network(False);\ngtf.update_use_pretrained(True);\n\n# Very important to reload post updates\ngtf.Reload();","3e4c97ac":"#Start Training\ngtf.Train();\n\n#Read the training summary generated once you run the cell and training is completed","7cd74e34":"# Using mxnet-gluon backend \n#from monk.gluon_prototype import prototype\n\n# For pytorch backend\nfrom monk.pytorch_prototype import prototype\n\n# For Keras backend\n#from monk.keras_prototype import prototype","3b3a9906":"# Create Project and Experiment\n\ngtf = prototype(verbose=1);\ngtf.Prototype(\"Project-Caltech-256\", \"Compare-CNNs\", eval_infer=True);","0ee25e0d":"# Load dataset for validaion\ngtf.Dataset_Params(dataset_path=\"\/kaggle\/input\/caltech256\/256_ObjectCategories\");\ngtf.Dataset();","3c31cb2f":"# Run validation\naccuracy, class_based_accuracy = gtf.Evaluate();","cc5ab09e":"# Training custom classifier from scratch","c6bb0b2f":"# Validating on the same dataset","d8131cf7":"# Analyse different models","8cc9e353":"# Used trained classifier for demo","300a925a":"# Install Monk","f0c9f34b":"# Table of contents\n\n\n## Install Monk\n\n\n## Using pretrained model for classifying caltech-256 dataset images\n\n\n## Training a classifier from scratch by companring resnets, densenets, and mobilenets","3eccb7fd":"## Using pip (Recommended)\n\n  - colab (gpu) \n      - All bakcends: `pip install -U monk-colab`\n      \n\n  - kaggle (gpu) \n      - All backends: `pip install -U monk-kaggle`\n      \n\n  - cuda 10.2\t\n      - All backends: `pip install -U monk-cuda102`\n      - Gluon bakcned: `pip install -U monk-gluon-cuda102`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cuda102`\n      - Keras backend: `pip install -U monk-keras-cuda102`\n      \n\n  - cuda 10.1\t\n      - All backend: `pip install -U monk-cuda101`\n\t  - Gluon bakcned: `pip install -U monk-gluon-cuda101`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cuda101`\n\t  - Keras backend: `pip install -U monk-keras-cuda101`\n      \n\n  - cuda 10.0\t\n      - All backend: `pip install -U monk-cuda100`\n\t  - Gluon bakcned: `pip install -U monk-gluon-cuda100`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cuda100`\n\t  - Keras backend: `pip install -U monk-keras-cuda100`\n      \n\n  - cuda 9.2\t\n      - All backend: `pip install -U monk-cuda92`\n\t  - Gluon bakcned: `pip install -U monk-gluon-cuda92`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cuda92`\n\t  - Keras backend: `pip install -U monk-keras-cuda92`\n      \n\n  - cuda 9.0\t\n      - All backend: `pip install -U monk-cuda90`\n\t  - Gluon bakcned: `pip install -U monk-gluon-cuda90`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cuda90`\n\t  - Keras backend: `pip install -U monk-keras-cuda90`\n      \n\n  - cpu \t\t\n      - All backend: `pip install -U monk-cpu`\n\t  - Gluon bakcned: `pip install -U monk-gluon-cpu`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cpu`\n\t  - Keras backend: `pip install -U monk-keras-cpu`","692f10f2":"## Install Monk Manually (Not recommended)\n \n### Step 1: Clone the library\n - git clone https:\/\/github.com\/Tessellate-Imaging\/monk_v1.git\n \n \n \n \n### Step 2: Install requirements \n - Linux\n     - Cuda 9.0\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cu90.txt`\n     - Cuda 9.2\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cu92.txt`\n     - Cuda 10.0\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cu100.txt`\n     - Cuda 10.1\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cu101.txt`\n     - Cuda 10.2\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cu102.txt`\n     - CPU (Non gpu system)\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cpu.txt`\n \n \n  - Windows\n     - Cuda 9.0 (Experimental support)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cu90.txt`\n     - Cuda 9.2 (Experimental support)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cu92.txt`\n     - Cuda 10.0 (Experimental support)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cu100.txt`\n     - Cuda 10.1 (Experimental support)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cu101.txt`\n     - Cuda 10.2 (Experimental support)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cu102.txt`\n     - CPU (Non gpu system)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cpu.txt`\n         \n         \n  - Mac\n     - CPU (Non gpu system)\n         - `cd monk_v1\/installation\/Mac && pip install -r requirements_cpu.txt`\n         \n         \n  - Misc\n      - Colab (GPU)\n          - `cd monk_v1\/installation\/Misc && pip install -r requirements_colab.txt`\n      - Kaggle (GPU)\n          - `cd monk_v1\/installation\/Misc && pip install -r requirements_kaggle.txt`\n \n \n \n### Step 3: Add to system path (Required for every terminal or kernel run)\n - `import sys`\n - `sys.path.append(\"monk_v1\/\");`"}}