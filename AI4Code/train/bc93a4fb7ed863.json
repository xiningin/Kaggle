{"cell_type":{"50e60bdc":"code","34f9aa3b":"code","753faf98":"code","672e0577":"code","81e27c1a":"code","ab1a80e7":"code","716ef73d":"code","9907b8fd":"code","a1963404":"code","0d843d03":"code","05e2a22e":"code","032ef7d0":"code","a5cd84c3":"code","13f9e908":"code","cf3d4a60":"code","0a3cbead":"code","e042f463":"code","aa37d114":"code","1c3e052f":"code","2cbaf28f":"code","d14cc086":"code","6a643b2c":"markdown","6816a932":"markdown","1b2105e8":"markdown"},"source":{"50e60bdc":"!pip install -U efficientnet","34f9aa3b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nfrom skimage.io import MultiImage,imsave,imread\nfrom skimage.transform import resize,rescale\nfrom skimage.color import rgb2gray\nfrom keras.layers import Input,Cropping2D,GlobalAveragePooling2D,Concatenate,Dense,Conv2D\nfrom keras.models import Model,load_model\nimport keras.applications as kl\nfrom keras.backend import name_scope\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score\nfrom tqdm import tqdm\nimport tensorflow as tf\nfrom keras.utils import Sequence\nfrom keras.optimizers import Adam,Adamax\nfrom sklearn.utils import shuffle,class_weight\nfrom keras.utils import to_categorical\nimport efficientnet.keras as efn\n\nfrom albumentations import (\n    HorizontalFlip, IAAPerspective, ShiftScaleRotate, CLAHE, RandomRotate90,\n    Transpose, ShiftScaleRotate, Blur, OpticalDistortion, GridDistortion, HueSaturationValue,\n    IAAAdditiveGaussianNoise, GaussNoise, MotionBlur, MedianBlur, RandomBrightnessContrast, IAAPiecewiseAffine,\n    IAASharpen, IAAEmboss, Flip, OneOf, Compose\n)","753faf98":"main_path='..\/input\/prostate-cancer-grade-assessment\/'","672e0577":"image_dim=(224,224,3)\nBATCH_SIZE=16\nEPOCHS=30","81e27c1a":"train_df=pd.read_csv(os.path.join(main_path,'train.csv'))\ntest_df=pd.read_csv(os.path.join(main_path,'test.csv'))\ntrain_df.head(20)\n","ab1a80e7":"#Lets take a look at isup_grade(target feature)\ntrain_df['isup_grade'].value_counts()","716ef73d":"#train_df['isup_grade'] = train_df['isup_grade'].replace([1], 1)\n#train_df['isup_grade'] = train_df['isup_grade'].replace([0], 0)\n#train_df['isup_grade'] = train_df['isup_grade'].replace([2], 2)\n#train_df['isup_grade'] = train_df['isup_grade'].replace([3], 3)\n#train_df['isup_grade'] = train_df['isup_grade'].replace([4], 4)\n#train_df['isup_grade'] = train_df['isup_grade'].replace([5], 5)\n","9907b8fd":"#index_names = train_df[train_df ['isup_grade'] == 0 ].index \n#train_df.drop(index_names, inplace = True) \n#index_names = train_df[train_df ['isup_grade'] == 1 ].index \n#train_df.drop(index_names, inplace = True) \n##index_names = train_df[train_df ['isup_grade'] == 2 ].index \n#train_df.drop(index_names, inplace = True) \n\n\n  \n#train_df","a1963404":"#Plot some slides\n#rows,cols=3,3\n#fig=plt.figure(figsize=(10,10))\n#for i in range(1,rows*cols+1):\n    #img=MultiImage(os.path.join(main_path,'train_images',train_df.loc[i-1,'image_id']+'.tiff'))\n    #img = resize(img[-1], (512, 512))\n    #fig.add_subplot(rows,cols,i)\n    #plt.imshow(img)\n    #plt.title('isup_grade: '+str(train_df.loc[i-1,'isup_grade']))\n#plt.show()","0d843d03":"for id_ in tqdm(train_df['image_id']):\n    img=MultiImage(os.path.join(main_path,'train_images',id_+'.tiff'))\n    img = resize(img[-1], (512, 512))\n    imsave(id_+'.jpg',img)","05e2a22e":"colums=['image_id','isup_grade']\ntrain_df,val_df=train_test_split(train_df[colums],test_size=0.20)\nprint('Train shape: {}'.format(train_df.shape))\nprint('Validation shape: {}'.format(val_df.shape))","032ef7d0":"class Generator(Sequence):\n    def __init__(self,input_data,batch_size=BATCH_SIZE,dims=image_dim,is_shuffle=True,n_classes=6,is_train=True):\n        self.image_ids=input_data[0]\n        self.labels=input_data[1]\n        self.batch_size=batch_size\n        self.dims=image_dim\n        self.shuffle=is_shuffle\n        self.n_classes=n_classes\n        self.is_train=is_train\n        self.on_epoch_end()\n    \n    def __len__(self):\n        return int(np.floor(len(self.image_ids) \/ self.batch_size))\n    \n    def on_epoch_end(self):\n        self.indexes = np.arange(len(self.image_ids))\n        if self.shuffle == True:\n            np.random.shuffle(self.indexes)\n    \n    def __getitem__(self, index):\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n\n        image_ids_temp = [self.image_ids[k] for k in indexes]\n        labels_temp = [self.labels[k] for k in indexes]\n\n        # Generate data\n        X, y = self.__data_generation(image_ids_temp,labels_temp)\n\n        return X, y\n    \n    def augment_flips_color(self,p=.5):\n        return Compose([\n            Flip(),\n            RandomRotate90(),\n            Transpose(),\n            HorizontalFlip(),\n            ShiftScaleRotate(shift_limit=0.0625, scale_limit=0.50, rotate_limit=45, p=.75),\n            Blur(blur_limit=3),\n        ], p=p)\n    \n    def __data_generation(self, list_IDs_temp,lbls):\n        X = np.zeros((self.batch_size, *self.dims))\n        y = np.zeros((self.batch_size), dtype=int)\n\n        # Generate data\n        for i, ID in enumerate(list_IDs_temp):\n            # Store sample\n            img=MultiImage(os.path.join(main_path,'train_images',ID+'.tiff'))\n            img = resize(img[-1], (self.dims[0], self.dims[1]))\n            #Augmentation\n            if self.is_train:\n                aug = self.augment_flips_color(p=1)\n                img = aug(image=img)['image']\n                \n            X[i] = img\n\n            # Store class\n            y[i] = lbls[i]\n\n        return X, to_categorical(y, num_classes=self.n_classes)","a5cd84c3":"train_gen=Generator([train_df['image_id'].values, train_df['isup_grade'].values])\nval_gen=Generator([val_df['image_id'].values,val_df['isup_grade'].values],is_shuffle=False,is_train=False)","13f9e908":"from keras.callbacks import Callback\nclass QWKEvaluation(Callback):\n    def __init__(self, validation_data=(), batch_size=BATCH_SIZE, interval=1):\n        super(Callback, self).__init__()\n\n        self.interval = interval\n        self.batch_size = batch_size\n        self.valid_generator, self.y_val = validation_data\n        self.history = []\n\n    def on_epoch_end(self, epoch, logs={}):\n        if epoch % self.interval == 0:\n            y_pred = self.model.predict_generator(generator=self.valid_generator,\n                                                  steps=np.ceil(float(len(self.y_val)) \/ float(self.batch_size)),\n                                                  workers=1, use_multiprocessing=False,\n                                                  verbose=1)\n            def flatten(y):\n                return np.argmax(y, axis=1).reshape(-1)\n            \n            score = cohen_kappa_score(self.y_val,\n                                      flatten(y_pred),\n                                      labels=[0,1,2,3,4,5],\n                                      weights='quadratic')\n            print(\"\\n epoch: %d - QWK_score: %.6f \\n\" % (epoch+1, score))\n            self.history.append(score)\n            if score >= max(self.history):\n                print('saving checkpoint: ', score)\n                self.model.save('classifier.h5')","cf3d4a60":"class_weights = class_weight.compute_class_weight('balanced',\n                                                 np.unique(train_df['isup_grade']),\n                                                   train_df['isup_grade'])","0a3cbead":"qwk = QWKEvaluation(validation_data=(val_gen, np.asarray(val_df['isup_grade'][:val_gen.__len__()*BATCH_SIZE])),\n                    batch_size=BATCH_SIZE, interval=1)","e042f463":"#Model     \ninp=Input(shape=image_dim)\n\nbase_model=base_model=efn.EfficientNetB7(weights='imagenet',include_top=False,input_tensor=inp)\n\nfor layer in base_model.layers:\n    layer.trainable=True\n\nfeat=GlobalAveragePooling2D()(base_model.output)\nout=Dense(6,activation='softmax')(feat)\nmodel=Model(inp,out)\nmodel.compile(loss='binary_crossentropy',optimizer=Adam(0.0001),metrics=['accuracy'])","aa37d114":"history=model.fit_generator(train_gen,epochs=30,steps_per_epoch=100,validation_data=val_gen,\n                    validation_steps=100,\n                    class_weight=class_weights)","1c3e052f":"loss = history.history['loss']\nval_loss = history.history['val_loss']\nscore=qwk.history\nepochs=range(1,len(loss)+1)\nplt.plot(epochs,loss,'b',color='red',label='Training Loss')\nplt.plot(epochs,val_loss,'b',color='blue',label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.legend()\nplt.figure()\nplt.plot(epochs,score,'b',color='red',label='Validation Kappa')\nplt.legend()\nplt.figure()\nplt.show()","2cbaf28f":"del train_gen,val_gen,train_df,val_df","d14cc086":"test_dir='..\/input\/prostate-cancer-grade-assessment\/test_images'\nif os.path.exists(test_dir):\n    model=load_model('classifier.h5')\n    predicted=[]\n    for ID in test_df['image_Id']:\n        img=MultiImage(os.path.join(test_dir,ID+'.tiff'))\n        img = resize(img[-1], (image_dim[0], image_dim[1]))\n        preds=model.predict(np.expand_dims(img,0))\n        preds = np.argmax(preds,axis=0)\n        predicted.append(preds)\n        \n    submission=pd.DataFrame({'image_id':test_df['image_id'],'isup_grade':predicted})\n    submission.to_csv('submission.csv',index=False)","6a643b2c":"**Convert and save images**","6816a932":"**Test Prediction**","1b2105e8":"**Generator**"}}