{"cell_type":{"20ad3b1a":"code","cd3fbc54":"code","cd5f4bd7":"code","4fa54eb7":"code","68bf4b6c":"code","fa28066c":"code","b952e765":"code","23d147e8":"code","e1b7768a":"code","cc023ed0":"code","982d32d8":"code","7ad8fa4d":"code","2a49d6c9":"code","f7f8c663":"code","381922b3":"code","3d1ca32f":"code","9784d373":"code","80edaf6f":"code","6e610d18":"code","9b78db87":"code","3a1c3d1a":"code","5d0ce9ef":"code","fce97893":"code","694068ee":"code","2e6929a4":"code","4fc30b6e":"code","7515d00e":"code","e9cef534":"code","3a8d1aae":"code","5da3dca6":"code","794651b6":"code","9adf4470":"code","0ac521e4":"code","67932074":"code","8854f8e7":"code","a5e15dbf":"code","61ef7a77":"code","d98a778a":"code","6cdbf20e":"code","0be79014":"code","29789510":"code","9570d5be":"code","90930ccc":"code","379bb009":"code","a09db2fd":"code","c2c3acf6":"code","00580c6b":"markdown","42e8145e":"markdown","f40faa09":"markdown","406a44a2":"markdown","6979a858":"markdown","adb85f26":"markdown","7d6d7064":"markdown","9265744c":"markdown","1bc115fe":"markdown","9db46741":"markdown","fbccbf86":"markdown","9a7691ad":"markdown","63ab33f6":"markdown","7d577862":"markdown","05e3968b":"markdown","c00d65a0":"markdown","b64f7cf8":"markdown","0a3b9641":"markdown","c9f0b7b9":"markdown","b31f3e18":"markdown","25e8c3b5":"markdown","94103012":"markdown"},"source":{"20ad3b1a":"#import libraries\nimport numpy as np\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sb\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\n\n#supress warnings\nimport warnings\nwarnings.filterwarnings('ignore')","cd3fbc54":"# read the dataset\ndf=pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","cd5f4bd7":"df.info()","4fa54eb7":"df.head(10)","68bf4b6c":"df.describe()","fa28066c":"# we will sum up the missing values of each column and also find its percentage\n\nmissing = df.isnull().sum()\n\nmissing_per = (missing\/df.shape[0]) * 100\n\ndic = {'no. of missing values': missing, 'missing_percentage':missing_per}\n\ndesc = pd.DataFrame(dic)\ndesc","b952e765":"df=df.drop(['Evaporation','Sunshine','Cloud9am','Cloud3pm'], axis = 1)","23d147e8":"df['Date']=pd.to_datetime(df['Date'],format='%Y-%m-%d')","e1b7768a":"df['year']=df['Date'].dt.year\ndf['month']=df['Date'].dt.month\ndf['date']=df['Date'].dt.date\ndf=df.drop('Date',axis=1)","cc023ed0":"# seperating the numerical and categorical data \ndf_cat=df.select_dtypes('object').columns\ndf_num=df.select_dtypes('float64').columns","982d32d8":"df_cat","7ad8fa4d":"df_num","2a49d6c9":"for i in df_num:\n    df[i].fillna(df[i].mean(), inplace=True)","f7f8c663":"for i in df_cat:\n    df[i].fillna(df[i].mode()[0], inplace=True)","381922b3":"print(df.isnull().sum())","3d1ca32f":"#copying the dataset \ndf_copy=df.copy()","9784d373":"fig = px.pie(df_copy, values='Rainfall', names='Location')\nfig.update_traces(textposition='inside')\nfig.show()","80edaf6f":"base_color = sb.color_palette()[0]\nsb.boxplot(data = df, y = 'RainTomorrow', x = 'MaxTemp', color = base_color)","6e610d18":"base_color = sb.color_palette()[0]\nsb.boxplot(data = df, y = 'RainTomorrow', x = 'MinTemp', color = base_color)","9b78db87":"base_color = sb.color_palette()[0]\nsb.boxplot(data = df, y = 'RainTomorrow', x = 'Humidity9am', color = base_color)","3a1c3d1a":"base_color = sb.color_palette()[0]\nsb.boxplot(data = df, y = 'RainTomorrow', x = 'Humidity3pm', color = base_color)","5d0ce9ef":"plt.figure(figsize=(15,10))\nsb.heatmap(df[df_num].corr(), annot=True)","fce97893":"df.drop('Temp9am',axis=1,inplace=True)\ndf.drop('Temp3pm',axis=1,inplace=True)","694068ee":"df.describe()","2e6929a4":"plt.figure(figsize=(10,6))\ndf.boxplot(column=['Rainfall','WindGustSpeed','WindSpeed9am','WindSpeed3pm'])","4fc30b6e":"for i in ['Rainfall', 'WindGustSpeed', 'WindSpeed9am', 'WindSpeed3pm']:\n    IQR = df[i].quantile(0.75)-df[i].quantile(0.25)\n    lower_fence=df[i].quantile(0.25)-(IQR*1.5)\n    upper_fence=df[i].quantile(0.75)+(IQR*1.5)\n    print(\"{} has the upper fence : {:0.2f} & lower fence : {:0.2f}\".format(i,upper_fence,lower_fence))","7515d00e":"df_new=df.copy()","e9cef534":"df_new['Rainfall']=df_new['Rainfall'].apply(lambda x: np.where(x>1.500,-0.900,x))\ndf_new['WindGustSpeed']=df_new['WindGustSpeed'].apply(lambda x: np.where(x>68.500,8.500,x))\ndf_new['WindSpeed9am']=df_new['WindSpeed9am'].apply(lambda x: np.where(x>37.00,-11.000,x))\ndf_new['WindSpeed3pm']=df_new['WindSpeed3pm'].apply(lambda x: np.where(x>40.50,-3.500,x))","3a8d1aae":"plt.figure(figsize=(10,6))\ndf_new.boxplot(column=['Rainfall','WindGustSpeed','WindSpeed9am','WindSpeed3pm'])","5da3dca6":"df_new.head(10)","794651b6":"df_new.drop('date',inplace=True,axis=1)","9adf4470":"df_new","0ac521e4":"# we have to encode gender, marital status, work type, residence type, smoking status\n# Store the column names in one_hot_var list. 1-hot encoding of these features will be done\none_hot_var = ['Location','WindGustDir','WindDir9am','WindDir3pm','RainToday','RainTomorrow']\n\n# perform 1-hot encoding on each column present i n one_hot_var\nfor i in one_hot_var:\n    # perform 1-hot encoding for variable & store it in x_t dataframe\n    x_t = pd.get_dummies(df_new[i], prefix=i, prefix_sep='_', drop_first=True) # define new column name, separator and drop 1 of them.\n    \n    # join x_t to dataset\n    df_new = df_new.join(x_t)\n    \n    # drop original column from dataset as it is no longer needed\n    df_new.drop(i, axis = 1, inplace = True)","67932074":"y=df_new['RainTomorrow_Yes']\nX=df_new.drop(labels=['RainTomorrow_Yes'],axis=1)","8854f8e7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","a5e15dbf":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","61ef7a77":"X_train","d98a778a":"X_test","6cdbf20e":"y_train","0be79014":"y_test","29789510":"X_train.shape","9570d5be":"X_test.shape","90930ccc":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.ensemble import RandomForestClassifier","379bb009":"classifier = RandomForestClassifier(n_estimators = 100, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)","a09db2fd":" cm = confusion_matrix(y_test, y_pred)\nclasses = ['No rain', 'Raining']\ndf_cm = pd.DataFrame(cm, index=classes, columns=classes)\nhmap = sb.heatmap(df_cm, annot=True, fmt=\"d\")\nhmap.yaxis.set_ticklabels(hmap.yaxis.get_ticklabels(), rotation=0, ha='right')\nhmap.xaxis.set_ticklabels(hmap.xaxis.get_ticklabels(), rotation=30, ha='right')\nplt.ylabel('True label')\nplt.xlabel('Predicted label');\n\naccuracy_score(y_test, y_pred)","c2c3acf6":"# Import auc, roc_curve\nfrom sklearn.metrics import auc, roc_curve\n\n# Get false positive rate, true positive rate and threshold\nfpr, tpr, threshold = roc_curve(y_test, y_pred)\n\n# Compute Area under curve\narea = auc(fpr, tpr)\n\n# plot the roc curve\n# Initialize Figure\nplt.figure(figsize=(18,5))\n\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % area)\n\n# plot straight line\nplt.plot([0, 1], [0, 1],color='g', marker='_')\n\n# set plot title, xlabel, ylabel, legend\nplt.title('ROC Curve', fontsize=16)\nplt.ylabel('True Positive Rate', fontsize=14)\nplt.xlabel('False Positive Rate', fontsize=14)\nplt.legend(loc = 'lower right', fontsize = 12)\n\nplt.show()","00580c6b":"# Missing Values","42e8145e":"**Humidity at 9am in range of 70-90 can cause rain next day with around 80 maximizing the chances**","f40faa09":"**Humidity at 3pm in range of around 60-80 can cause rain next day**","406a44a2":"**Year and month can give us important information about the rain so we will separate the month and year from date**.","6979a858":"# Feature engineering","adb85f26":"**Our data is free of missing values now**","7d6d7064":"**not much impact of min temperature is on rain tomorrow**","9265744c":"**Creating a confusion matrix and printing accuracy score**","1bc115fe":"**Teamp9am(88%) and Temp3pm(97%) has high correlation with MaxTemp so we will drop them**","9db46741":"**To treat outliners we will find the lower fence and upper fence of each feature and then remove the extra**","fbccbf86":"# Data Exploration","9a7691ad":"**The above table shows that Rainfall, Evaporation, WindGustSpeed, WindSpeed9am, WindSpeed3pm has high outliers**","63ab33f6":"**We will fill the missing values of categorical features using mode**","7d577862":"**The confusion matrix, accuracy score and ROC suggest that the model performed well**","05e3968b":"**Scaling**","c00d65a0":"***Encoding***","b64f7cf8":"**We will fill the missing values of numerical feature using mean**","0a3b9641":"**We will remove all the features with missing value percentage above than 15.** ","c9f0b7b9":"**Spliting the training and testing data**","b31f3e18":"**not much impact of min temperature is on rain tomorrow**","25e8c3b5":"**Defining the Target Variable**","94103012":"**Here we can see that some features have a lot of outliners.**"}}