{"cell_type":{"5bd64c06":"code","a0f71503":"code","f415d91d":"code","bbac39a2":"code","2593ab0f":"code","cf609757":"code","5f991181":"code","27b090d5":"code","8943c26e":"code","db6831c5":"code","0872a7b7":"code","4d73c6f9":"code","8c0a56e8":"code","6c162b5b":"code","06124aa8":"code","0972279a":"code","9c580e55":"code","393e5c46":"code","f3027c34":"code","920eebab":"code","c8ae199a":"code","4a703ba8":"code","f743d000":"code","72a6fccc":"code","f6bacce6":"code","d3a66cdd":"code","63c7f455":"code","12c6fe73":"markdown"},"source":{"5bd64c06":"# Let's import our libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","a0f71503":"# Since we are going to mae lot of visualization, let's set some visualization parameters in order to have same plots size\nplt.rcParams['figure.figsize'] = [12,6]\nsns.set_style('darkgrid')","f415d91d":"house = pd.read_excel('..\/input\/Maison.xlsx') ## Reading the data","bbac39a2":"house.head(3)","2593ab0f":"# Since the columns are in french, in order to make them more readable, let's translate them into English\nhouse = house.rename(index = str, columns = {'PRIX':'price','SUPERFICIE': 'area','CHAMBRES': 'rooms', \n                         'SDB': 'bathroom', 'ETAGES': 'floors','ALLEE': 'driveway',\n                         'SALLEJEU':'game_room', 'CAVE': 'cellar', \n                         'GAZ': 'gas', 'AIR':'air', 'GARAGES': 'garage', 'SITUATION': 'situation'})","cf609757":"house.head()\n# yay, we have our columns name changed","5f991181":"# Let's now do some visualizations. That's m favourite part \n# Let's see ig we have a linear relation between price and area\nsns.scatterplot(house['area'], house['price'], house['gas'], palette = 'viridis')","27b090d5":"# We can see some linear trend but as we move along, the dispersion goes wide. We'll fix that later\n# Now let's build our model, we will build it both with scikit-learn and with statsmodel","8943c26e":"import warnings\nwarnings.filterwarnings('ignore')\nsns.distplot(house['price'])","db6831c5":"sns.distplot(house['area'])","0872a7b7":"# Import the libraries\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split","4d73c6f9":"# We now instatiate a Linear Regression object\nlm = LinearRegression()","8c0a56e8":"# let's do the split of the dataset\nhouse.columns\nX = house[['area', 'rooms', 'bathroom', 'floors', 'driveway', 'game_room',\n       'cellar', 'gas', 'air', 'garage', 'situation']]\ny = house['price']","6c162b5b":"# I copy this code directly from the function documentation\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.3, random_state=101)","06124aa8":"## Let's chec the head of some of these splits\nX_test.head()\n# We see that they are randomly selected","0972279a":"# Now let's build the model using sklearn\nlm.fit(X_test,y_test)","9c580e55":"# Now let's look at the coefficients\nprint(lm.coef_)\n# it would be nicer if we can put them together in a dataframe","393e5c46":"coef = pd.DataFrame(lm.coef_, X.columns, columns = ['Coefficients'])\ncoef","f3027c34":"# here we have the coefficients. We can interpret them as follow: \"A unit increase of the area (meter square) equals to\n# to an increase of the price of $ 3.54 \"\n# But if we want to to dig more into the statistics, then we should consider using statsmodels whichs gives us more results.","920eebab":"import statsmodels.api as sm","c8ae199a":"# Unlike sklearn that adds an intercept to our data for the best fit, statsmodel doesn't. We need to add it ourselves\n# Remember, we want to predict the price based off our features.\n# X represents our predictor variables, and y our predicted variable.\n# We need now to add manually the intercepts\nX_endog = sm.add_constant(X_test)","4a703ba8":"res = sm.OLS(y_test, X_endog)","f743d000":"res.fit().summary()","72a6fccc":"predictions = lm.predict(X_test)","f6bacce6":"# To check the quality of our model, let's plot it\nsns.scatterplot(y_test, predictions)","d3a66cdd":"# We want to know what is the distribution of the residuals. \nsns.distplot(y_test-predictions)","63c7f455":"# Evaluation metrics\n# Mean Absolute Error (MAE)\n# Mean Squared Error (MSE)\n# Root Mean Squared Error(RMSE)\nimport numpy as np\nfrom sklearn import metrics\n\nprint('MAE :', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE :', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE :', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","12c6fe73":"# Linear regression"}}