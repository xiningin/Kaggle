{"cell_type":{"36c91dec":"code","568e6caa":"code","84d788c0":"code","f4529a72":"code","ce98ad7a":"code","530adddf":"code","f7186fda":"code","5c6a550e":"code","204116cd":"code","15d1831f":"code","de94b3e7":"code","c9549983":"code","442c1db0":"code","bfbaa117":"code","64e7950d":"code","18651c50":"code","6573c47f":"code","194141d5":"code","f16dafe3":"code","403b469b":"code","047d7c95":"code","db8736b6":"code","a3a4c591":"code","4796aa1c":"code","29e2110f":"code","b6b2affd":"code","49eff336":"code","f26c1b09":"code","666a15f9":"code","c597231b":"code","24e1e064":"code","04260f39":"code","d31f4c37":"code","075bc94c":"code","9ece689d":"code","8c323e89":"code","bf0e8583":"code","50764822":"code","caf2948a":"code","4d764420":"code","0097e125":"code","5340afa9":"code","992144d2":"code","d88834db":"code","a142dcf7":"code","ad632837":"code","44152b1a":"code","b232290d":"code","2ecaa7f5":"code","1225ffcb":"code","b21adbb5":"code","46a4998c":"markdown","9d613c53":"markdown","4cbc589e":"markdown","77c014eb":"markdown","41163fb0":"markdown","543c8ac4":"markdown","02fe8c9a":"markdown","4b6ab072":"markdown","fc7a8390":"markdown","ad02f5a5":"markdown","111a558c":"markdown","60027833":"markdown","2d2f7a9c":"markdown","fede7e3b":"markdown","817ff447":"markdown","a94ac278":"markdown","daaf0a9c":"markdown","176931d2":"markdown"},"source":{"36c91dec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport numpy\nimport seaborn as sns\nimport random\n%matplotlib inline\nimport plotly.express as px\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","568e6caa":" df=pd.read_csv(\"\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv\") ","84d788c0":"df.head()  #shows the mathes dataset\n","f4529a72":"df['date']= pd.to_datetime(df['date'])\ndf['season'] = pd.DatetimeIndex(df['date']).year  #extract season (year) from the date and add another colmn in dataframe\ndf.head()","ce98ad7a":"df.isnull().sum() # find total  number of nulls in each column\n","530adddf":"df.info() ","f7186fda":"df.city.unique()  #get the unique values to remove the descripencies","5c6a550e":"df.city.replace({\"Bangalore\":\"Bengaluru\"}, inplace = True)","204116cd":"df.city.unique()","15d1831f":"df.city.replace({'Bengaluru':1,\n                 'Chandigarh':2,\n                  'Delhi':3,\n                 'Mumbai':4,\n                 'Kolkata':5,\n                 'Jaipur':6,\n                 'Hyderabad':7,\n                 'Chennai':8,\n                 'Cape Town':9,\n                 'Port Elizabeth':10,\n                 'Durban':11,\n                 'Centurion':12,\n                 'East London':13,\n                 'Johannesburg':14, \n                 'Kimberley':15,\n                'Bloemfontein':16,\n                 'Ahmedabad':17, \n                 'Cuttack':18,\n                 'Nagpur':19,\n                 'Dharamsala':20,\n                 'Kochi':21,\n                 'Indore':22,\n                 'Visakhapatnam':23,\n                 'Pune':24,\n                 'Raipur':25,\n                 'Ranchi':26,\n                 'Abu Dhabi':27,\n                 'Rajkot':28, 'Kanpur':29, 'Dubai':30, 'Sharjah':31},inplace=True)","de94b3e7":"df.head()","c9549983":"df.venue.unique()","442c1db0":"df.venue.replace({'Feroz Shah Kotla Ground':'Feroz Shah Kotla',\n                    'M Chinnaswamy Stadium':'M. Chinnaswamy Stadium',\n                    'MA Chidambaram Stadium, Chepauk':'M.A. Chidambaram Stadium',\n                     'M. A. Chidambaram Stadium':'M.A. Chidambaram Stadium',\n                     'Punjab Cricket Association IS Bindra Stadium, Mohali':'Punjab Cricket Association Stadium',\n                     'Punjab Cricket Association Stadium, Mohali':'Punjab Cricket Association Stadium',\n                     'IS Bindra Stadium':'Punjab Cricket Association Stadium',\n                    'Rajiv Gandhi International Stadium, Uppal':'Rajiv Gandhi International Stadium',\n                    'Rajiv Gandhi Intl. Cricket Stadium':'Rajiv Gandhi International Stadium'},inplace=True)","bfbaa117":"df.venue.unique()","64e7950d":"df.isnull()","18651c50":"null1=sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')#heatmap to show the missing values\nnull1.set_title(\"all null values\")  ","6573c47f":"sns.set_style('whitegrid')\nax=sns.countplot(x='winner',data=df)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")","194141d5":"sns.set_style('whitegrid')\nax=sns.countplot(x='winner',hue='toss_decision',data=df,palette='rainbow')\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")","f16dafe3":"def winner_on_toss(name_of_the_team):\n    match_winner = df[(df['toss_winner']==name_of_the_team) & (df['winner']==name_of_the_team)]\n    winner_counts = match_winner['toss_decision'].value_counts()\n    total_count=winner_counts['field']+winner_counts['bat']\n    winner_when_bat = winner_counts['bat']\/total_count*100\n    winner_when_feild = winner_counts['field']\/total_count*100\n    print(\"Total fielding count = \"+ str(winner_counts['field']))\n    print(\"total batting count = \" + str(winner_counts['bat']))\n    print(\"percentage win when batting was choosen = \" + str(winner_when_bat))\n    print(\"percentage win when fielding was choosen = \" + str(winner_when_feild))\n\n    data = [['Fielding',  winner_when_feild], ['Batting', winner_when_bat]]\n    data = pd.DataFrame (data,columns=['Decision','Win_%age'])\n    return(px.pie( data , values= 'Win_%age' , names='Decision', title='percentage win of '+ name_of_the_team  + ' on basis of  toss decision',color_discrete_sequence=px.colors.sequential.Rainbow))\n\n            \nname_of_the_team=\"Mumbai Indians\"  #can use \"iput\" for user input\nplot =  winner_on_toss(name_of_the_team)\nplot","403b469b":"def find_city(cols):\n    city=cols[0]\n    venue=cols[1]\n    \n    if pd.isnull(city):\n        if venue==\"M. Chinnaswamy Stadium\" or venue==\"M.Chinnaswamy Stadium\":\n           return 1\n        elif venue==\"Punjab Cricket Association Stadium\":\n           return 2\n        elif venue==\"Feroz Shah Kotla\":\n           return 3\n        elif venue=='Wankhede Stadium':\n           return 4\n        elif venue==\"Eden Gardens\":\n           return 5\n        elif venue==\"Sawai Mansingh Stadium\":\n           return 6\n        elif venue==\"Rajiv Gandhi International Stadium\":\n           return 7\n        elif venue==\"M.A. Chidambaram Stadium\":\n           return 8\n        elif venue==\"Dr DY Patil Sports Academy\":\n           return 4\n        elif venue==\"Newlands\":\n           return 9\n        elif venue==\"St George's Park\":\n           return 10\n        elif venue==\"Kingsmead\":\n           return 11\n        elif venue==\"SuperSport Park\":\n           return 12\n        elif venue==\"Buffalo Park\":\n           return 13\n        elif venue==\"New Wanderers Stadium\":\n           return 14\n        elif venue==\"De Beers Diamond Oval\":\n           return 15\n        elif venue==\"OUTsurance Oval\":\n           return 16\n        elif venue==\"Brabourne Stadium\":\n           return 4\n        elif venue==\"Sardar Patel Stadium, Motera\":\n           return 17\n        elif venue==\"Barabati Stadium\":\n           return 18\n        elif venue==\"Vidarbha Cricket Association Stadium, Jamtha\":\n           return 19\n        elif venue==\"Himachal Pradesh Cricket Association Stadium\":\n           return 20\n        elif venue==\"Nehru Stadium\":\n          return 21\n        elif venue==\"Holkar Cricket Stadium\":\n          return 22\n        elif venue==\"Dr. Y.S. Rajasekhara Reddy ACA-VDCA Cricket Stadium\":\n          return 23\n        elif venue==\"Subrata Roy Sahara Stadium\":\n          return 24\n        elif venue==\"Shaheed Veer Narayan Singh International Stadium\":\n          return 25\n        elif venue==\"JSCA International Stadium Complex\":\n          return 26\n        elif venue==\"Sheikh Zayed Stadium\":\n          return 27\n        elif venue==\"Sharjah Cricket Stadium\":\n          return 31\n        elif venue==\"Dubai International Cricket Stadium\":\n          return 30\n        elif venue==\"Maharashtra Cricket Association Stadium\":\n          return 24\n        elif venue==\"Saurashtra Cricket Association Stadium\":\n          return 28\n        elif venue==\"Green Park\":\n          return 29\n        \n    else :\n            return city\n        \n       \n        \n        \n        ","047d7c95":"df['city'] = df[['city','venue']].apply(find_city,axis=1)","db8736b6":"null1=sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nnull1.set_title(\"all null values\")","a3a4c591":"df.isnull().sum() #total null values in particular column","4796aa1c":"df.drop('method',axis=1,inplace=True)","29e2110f":"null1=sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nnull1.set_title(\"all null values\")","b6b2affd":"df = df[df['result_margin'].notna()]","49eff336":"null1=sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nnull1.set_title(\"all null values\")","f26c1b09":"def player_MOM_for_teams(player_name):\n    for value in df.groupby('player_of_match'):\n        if value[0] == player_name:\n            return value[1]['winner'].value_counts()\n\n\nplayer_name = \"MEK Hussey\" #can use \"iput\" for user input\ndf1 = player_MOM_for_teams(  player_name  ).to_frame().reset_index().rename(columns = {'index' : 'Team' , 'winner' : 'Count'})\ndf1","666a15f9":"df.head()","c597231b":"df.team1.unique()","24e1e064":"df.team1.replace({'Royal Challengers Bangalore':1,\n                 'Kings XI Punjab':2,\n                 'Delhi Daredevils':3,\n                 'Mumbai Indians':4,\n                 'Kolkata Knight Riders':5,\n                 'Rajasthan Royals':6,\n                 'Deccan Chargers':7,\n                 'Chennai Super Kings':8,\n                 'Kochi Tuskers Kerala':9,\n                 'Pune Warriors':10,\n                 'Sunrisers Hyderabad':11,\n                 'Gujarat Lions':12,\n                 'Rising Pune Supergiants':13,\n                 'Rising Pune Supergiant':13,\n                 'Delhi Capitals':14},inplace=True)","04260f39":"df.team2.replace({'Royal Challengers Bangalore':1,\n                 'Kings XI Punjab':2,\n                 'Delhi Daredevils':3,\n                 'Mumbai Indians':4,\n                 'Kolkata Knight Riders':5,\n                 'Rajasthan Royals':6,\n                 'Deccan Chargers':7,\n                 'Chennai Super Kings':8,\n                 'Kochi Tuskers Kerala':9,\n                 'Pune Warriors':10,\n                 'Sunrisers Hyderabad':11,\n                 'Gujarat Lions':12,\n                 'Rising Pune Supergiants':13,\n                 'Rising Pune Supergiant':13,\n                 'Delhi Capitals':14},inplace=True)","d31f4c37":"df.winner.replace({'Royal Challengers Bangalore':1,\n                 'Kings XI Punjab':2,\n                 'Delhi Daredevils':3,\n                 'Mumbai Indians':4,\n                 'Kolkata Knight Riders':5,\n                 'Rajasthan Royals':6,\n                 'Deccan Chargers':7,\n                 'Chennai Super Kings':8,\n                 'Kochi Tuskers Kerala':9,\n                 'Pune Warriors':10,\n                 'Sunrisers Hyderabad':11,\n                 'Gujarat Lions':12,\n                 'Rising Pune Supergiants':13,\n                 'Rising Pune Supergiant':13,\n                 'Delhi Capitals':14},inplace=True)","075bc94c":"df.toss_winner.replace({'Royal Challengers Bangalore':1,\n                 'Kings XI Punjab':2,\n                 'Delhi Daredevils':3,\n                 'Mumbai Indians':4,\n                 'Kolkata Knight Riders':5,\n                 'Rajasthan Royals':6,\n                 'Deccan Chargers':7,\n                 'Chennai Super Kings':8,\n                 'Kochi Tuskers Kerala':9,\n                 'Pune Warriors':10,\n                 'Sunrisers Hyderabad':11,\n                 'Gujarat Lions':12,\n                 'Rising Pune Supergiants':13,\n                 'Rising Pune Supergiant':13,\n                 'Delhi Capitals':14},inplace=True)","9ece689d":"df['date'] = pd.to_datetime(df['date'])\nlis = []\nfor value in df.groupby('season'):\n    lis.append( [value[0] , str(value[1].head(1).reset_index().date.dt.date[0]) , str(value[1].tail(1).reset_index().date.dt.date[0]) ] ) #gives start and end date of the season\n\ndate_info = pd.DataFrame( lis , columns = ['Season' , 'Start Date' , 'End Date'])\ndate_info","8c323e89":"df.drop(['id','date','player_of_match','result','eliminator','umpire1','umpire2','venue','toss_decision'],axis=1,inplace=True)","bf0e8583":"train=df\ntrain","50764822":"from sklearn.model_selection import train_test_split   #traing  and testing ","caf2948a":"X_train, X_test, y_train, y_test = train_test_split(train.drop('winner',axis=1), \n                                                    train['winner'], test_size=0.30, \n                                                    random_state=101)","4d764420":"from sklearn.linear_model import LogisticRegression\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","0097e125":"logmodel = LogisticRegression(max_iter=10000)\nlogmodel.fit(X_train,y_train)","5340afa9":"logmodel.score(X_train,y_train)","992144d2":"predictions = logmodel.predict(X_test)","d88834db":"from sklearn.metrics import confusion_matrix","a142dcf7":"accuracy=confusion_matrix(y_test,predictions)","ad632837":"accuracy","44152b1a":"\nfrom sklearn.metrics import accuracy_score","b232290d":"\naccuracy=accuracy_score(y_test,predictions)\naccuracy","2ecaa7f5":"\npredictions","1225ffcb":"from sklearn.metrics import classification_report\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b21adbb5":"print(classification_report(y_test,predictions))","46a4998c":"Reading the data from csv to the dataframe using pandas","9d613c53":"All yellow colored lines represent missing values and the columns are shown in x axis \nmissing values are present in column city,result_margin and menthod","4cbc589e":"Building a Logistic Regression model","77c014eb":"1. here we can understand that mumbai indians have highest number of wins","41163fb0":"Dropping unwanted columns","543c8ac4":"Data analysis and prediction using logistic Regression on IPL  dataset  (matches) ","02fe8c9a":"#   **Exploratory Data Analysis**\n\nwe can do some exploratory data analysis.\n\n*We can use seaborn to create a simple heatmap to see where we are missing data!*","4b6ab072":"Dropping the unwanted column","fc7a8390":"Show all the coulmns present in the dataset","ad02f5a5":"Removing the descripencies and properly structuring the datavalues","111a558c":"Data cleaning \n\nBelow function will fill the city in the database based on the venue and no null values will be here in city","60027833":"Let us do some analysis\n\nthe below countplot shows the number of wins of each team \nand based on the graph we can undertand which team has highest number of wins","2d2f7a9c":"Manually encoding the columns","fede7e3b":"Importing required libraries","817ff447":"\n![image.png](attachment:image.png)","a94ac278":"considering only values which are not null from result_margin","daaf0a9c":"The below countplot shows  wins based on the toss_decision","176931d2":"the below heatmap shows that the null values in city are filled now "}}