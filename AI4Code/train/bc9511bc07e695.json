{"cell_type":{"47673e5f":"code","f37e3cb3":"code","d0b8619a":"code","26dcb29f":"code","86c4e5a6":"code","dd73c47c":"code","6aa1d3c0":"code","9aa231dd":"code","e25acc8a":"code","c179cf7c":"code","9b73ab4d":"code","0a60b382":"code","6d7820fd":"code","aea47666":"code","e9c7d085":"code","50ec0f4d":"code","26dfc5f4":"code","f0a8d18b":"code","c38a908c":"code","3a0b77f3":"code","bad20784":"code","5d633339":"code","b570c181":"code","d30bd55e":"code","4d9ca433":"code","35218b16":"code","bd3d83c8":"code","63746a1c":"code","0b9475a1":"code","aae173a4":"code","d6a867e3":"code","b76602a9":"code","a0ca91f9":"code","70b4613b":"code","263624aa":"code","2a4d2aa8":"code","d4376b06":"code","91234529":"code","f0306444":"code","e6286a31":"code","56eae762":"code","3ceb9e0d":"code","9c414a17":"code","a63616af":"code","86fc5dbe":"code","b7f9185d":"markdown","617b64c4":"markdown","8ba5529c":"markdown","4472b468":"markdown","ec7b2fde":"markdown","86fc9e7b":"markdown","8055091f":"markdown","b0c3aa7b":"markdown","781705f6":"markdown","9bf04f39":"markdown","8c81fdf9":"markdown","9ed2105d":"markdown","4754e551":"markdown","b5ee4061":"markdown","0432aaf7":"markdown","fa1b5ac4":"markdown","7a6e7ff6":"markdown","5b6a1985":"markdown","9946aae2":"markdown","b17f4f5e":"markdown","75a2e427":"markdown","ef5f6cee":"markdown","69fc591c":"markdown","a146e98c":"markdown","df81e026":"markdown","154b56f5":"markdown","10349a5a":"markdown","62041694":"markdown","f5963e74":"markdown","1974c799":"markdown","e5122ce5":"markdown","92a06629":"markdown","7321f198":"markdown","3a0d1bf9":"markdown"},"source":{"47673e5f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","f37e3cb3":"df = pd.read_csv('..\/input\/montcoalert\/911.csv')","d0b8619a":"# Check how many columns the data have\ndf.columns","26dcb29f":"# Gather all the information about data 'df'\ndf.info()","86c4e5a6":"#Now check the top 5 rows of df\ndf.head()","dd73c47c":"# How many null values are prensent in each cloumn\ndf.isnull().sum()","6aa1d3c0":"print('Rows     :',df.shape[0])\nprint('Columns  :',df.shape[1])","9aa231dd":"df['zip'].value_counts().head(5)","e25acc8a":"df['twp'].value_counts().head(5)","c179cf7c":"df['title'].nunique()","9b73ab4d":"df['Reason']=df['title'].apply(lambda title : title.split(':')[0])\ndf['Reason']","0a60b382":"df['Reason'].value_counts().head(1)","6d7820fd":"sns.countplot(x='Reason', data=df, palette='coolwarm')","aea47666":"x=np.array(df[\"Reason\"].value_counts())\nplt.pie(x, labels=df['Reason'].unique(), autopct='%1.1f%%')\nplt.title('Reason wise calls')\nplt.show()","e9c7d085":"fig, axes = plt.subplots(figsize=(10, 5))\nsns.countplot(y='title', data=df, order=df['title'].value_counts().index, palette='prism')\nsns.despine(bottom=False, left=True)\naxes.set_ylim([9, 0])\naxes.set_title('Overall 911 Emregency Calls', size=15)\naxes.set(xlabel='Number of 911 Calls', ylabel='')\nplt.tight_layout()","50ec0f4d":"type(df['timeStamp'].iloc[0])","26dfc5f4":"df['timeStamp']=pd.to_datetime(df['timeStamp'])","f0a8d18b":"# Lets check the type now \ntype(df['timeStamp'].iloc[0])","c38a908c":"time = df['timeStamp'].iloc[0]\ntime","3a0b77f3":"# to grab the specific hour of the perticuler datetime attribue \ntime.hour","bad20784":"## to grab the specific month of the perticuler datetime attribue \ntime.month","5d633339":"## to grab the specific year of the perticuler datetime attribue \ntime.year","b570c181":"## to grab the specific day of week of the perticuler datetime attribue \ntime.dayofweek","d30bd55e":"df['Hour']=df['timeStamp'].apply(lambda time :  time.hour)\ndf['Month']=df['timeStamp'].apply(lambda time :  time.month)\ndf['Day of Week']=df['timeStamp'].apply(lambda time :  time.dayofweek)","4d9ca433":"# after creating Hour, Month, Day of week , Lets check the df how it looks\ndf.head(2)","35218b16":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\n","bd3d83c8":"df['Day of Week']=df['Day of Week'].map(dmap)","63746a1c":"# After changing day of week from integer to actual Name, Now check top 2 columns how it looks\ndf.head()","0b9475a1":"sns.countplot(x='Day of Week', data = df, hue = 'Reason')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","aae173a4":"sns.countplot(x='Month', data = df, hue = 'Reason')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","d6a867e3":"M = df.groupby('Month').count()\nM.head()","b76602a9":"M['addr'].plot()","a0ca91f9":"sns.lmplot(x='Month', y='addr', data= M.reset_index())","70b4613b":"df['Date'] = df['timeStamp'].apply( lambda time : time.date())\ndf['Date']","263624aa":"d = df.groupby('Date').count()\nd","2a4d2aa8":"d['addr'].plot()\nplt.tight_layout()","d4376b06":"d1= df[df['Reason'] == 'Traffic'].groupby('Date').count()\nplt.title(\"Traffic\")\nd1['addr'].plot()\nplt.tight_layout()","91234529":"d2= df[df['Reason'] == 'Fire'].groupby('Date').count()\nplt.title(\"Fire\")\nd2['addr'].plot()\nplt.tight_layout()","f0306444":"d2= df[df['Reason'] == 'Fire'].groupby('Date').count()\nplt.title(\"Fire\")\nd2['addr'].plot()\nplt.tight_layout()","e6286a31":"x = df.groupby( by= ['Day of Week' , 'Hour']).count()['Reason'].unstack()\nx","56eae762":"plt.figure(figsize=(18,6))\nsns.heatmap(x ,  cmap='plasma')","3ceb9e0d":"sns.clustermap(x, cmap= 'plasma')","9c414a17":"dm = df.groupby(by=['Day of Week' , 'Month']).count()['Reason'].unstack()\ndm","a63616af":"plt.figure(figsize=(18,6))\nsns.heatmap(data=dm, cmap='plasma')","86fc5dbe":"sns.clustermap(data = dm, cmap='plasma')\n","b7f9185d":"#### Now do the same for Month:","617b64c4":"#### 3.3 - What are the top 5 townships (twp) for 911 calls?","8ba5529c":"## 911 Emergency Calls data analysis and visualization\n\nFor this capstone project we will be analyzing some 911 call data from Kaggle.\n\n**This dataset contains following field**\n* **lat** : String variable, Latitude\n* **lng**: String variable, Longitude  \n* **desc**: String variable, Description of the Emergency Call  \n* **zip**: String variable, Zipcode  \n* **title**: String variable, Title  \n* **timeStamp**: String variable, YYYY-MM-DD HH:MM:SS  \n* **twp**: String variable, Township  \n* **addr**: String variable, Address \n* **e**: String variable, Dummy variable (always 1)","4472b468":"Now let us begin to focus on time information. What is the data type of the objects in the timeStamp column?","ec7b2fde":"#### Did you notice something strange about the Plot?\n\nYou should have noticed it was missing some Months, let's see if we can maybe fill in this information by plotting the information in another way, possibly a simple line plot that fills in the missing months, in order to do this, we'll need to do some work with pandas... **\n\nNow create a gropuby object called byMonth, where you group the DataFrame by the month column and use the count() method for aggregation. Use the head() method on this returned DataFrame.","86fc9e7b":"#### 3.1 - How many rows and columns does the dataset have?","8055091f":"## Thankyou \n### Your feedback is much appreciated\n### Please UPVOTE if you LIKE this notebook\n### Comment if you have any doubts or you found any errors in the notebook","b0c3aa7b":"## 3 - Basic Questions","781705f6":"**** Now let's move on to creating heatmaps with seaborn and our data. We'll first need to restructure the dataframe so that the columns become the Hours and the Index becomes the Day of the Week. There are lots of ways to do this, but I would recommend trying to combine groupby with an unstack method. Reference the solutions if you get stuck on this!**","9bf04f39":"## 5 - Data Analysis and Visualization","8c81fdf9":"You should have seen that these timestamps are still strings. Use pd.to_datetime to convert the column from strings to DateTime objects.\n","9ed2105d":"## 1 - Import the libraries (Numpy, Pandas, Matplotlib, Seaborn)","4754e551":"#### Create a new column called 'Date' that contains the date from the timeStamp column. You'll need to use apply along with the .date() method.","b5ee4061":"## 4 - Creating Features","0432aaf7":"You can now grab specific attributes from a Datetime object by calling them. For example:**\n\ntime = df['timeStamp'].iloc[0]\ntime.hour","fa1b5ac4":"Now use seaborn to create a countplot of the Day of Week column with the hue based off of the Reason column.","7a6e7ff6":"#### Now groupby this Date column with the count() aggregate and create a plot of counts of 911 calls.","5b6a1985":"Now create a simple plot off of the dataframe indicating the count of calls per month","9946aae2":" ### Now recreate this plot but create 3 separate plots with each plot representing a Reason for the 911 call*","b17f4f5e":"**Now create a clustermap using this DataFrame.** ","75a2e427":"## 6 - Heatmaps","ef5f6cee":"Pie Chart of 911 Calls By Reason","69fc591c":"#### ** Notice how the Day of Week is an integer 0-6. Use the .map() with this dictionary to map the actual string names to the day of the week:\n#### dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","a146e98c":"**Now repeat these same plots and operations, for a DataFrame that shows the Month as the column.**","df81e026":"You can use Jupyter's tab method to explore the various attributes you can call. Now that the timestamp column are actually DateTime objects, use .apply() to create 3 new columns called Hour, Month, and Day of Week. You will create these columns based off of the timeStamp column, reference the solutions if you get stuck on this step.","154b56f5":"The barcahrt shows the top 10 emergency calls from all the categories","10349a5a":"What is the most common Reason for a 911 call based off of this new column?","62041694":"Use seaborn to create a countplot of 911 calls by Reason.","f5963e74":"#### 3.4 - Take a look at the 'title' column, how many unique title codes are there?","1974c799":"Now see if you can use seaborn's lmplot() to create a linear fit on the number of calls per month. Keep in mind you may need to reset the index to a column.","e5122ce5":"## 2 - Explore the data ","92a06629":" Now create a HeatMap using this new DataFrame.","7321f198":"In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.**\n\n*For example, if the title column value is EMS: BACK PAINS\/INJURY , the Reason column value would be EMS.","3a0d1bf9":"#### 3.2 - What are the top 5 zipcodes for 911 calls?"}}