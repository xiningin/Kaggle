{"cell_type":{"d04e1957":"code","1a540eb5":"code","02cb3c05":"code","b1f5113e":"code","cb7c188b":"code","a6f99fd6":"code","e5581bc0":"code","203c8a34":"code","d24ed0d9":"code","f13a0247":"code","bf0c5ea8":"code","d0da2cff":"code","1a25a71a":"code","3e2c83c8":"code","9fe52cca":"code","e63e34ff":"code","4a1fc955":"code","6e270957":"code","c22a8afd":"code","89e380d9":"code","6dfaa28e":"code","58d00a76":"code","dfa6704a":"code","b8f06920":"markdown","a4d2bfe7":"markdown","3cf12454":"markdown","40b8d260":"markdown","bfe82bc5":"markdown","056a44df":"markdown","227b05c7":"markdown","a055c2ed":"markdown","eee5299e":"markdown","d5f51209":"markdown","32b81721":"markdown","af4d01bf":"markdown","fa4f9918":"markdown","5815d0cc":"markdown","4513a70a":"markdown","8087ac05":"markdown","74a43ef7":"markdown","f7ec53ea":"markdown","29e7d37f":"markdown","79c66635":"markdown","2eb17935":"markdown","238ba0f4":"markdown","f572eaf9":"markdown","79941ec4":"markdown","46734de8":"markdown","4d521c4e":"markdown","4b34536f":"markdown","d9fa427d":"markdown","e5920c7b":"markdown","a0d0e77b":"markdown","b4cd49f0":"markdown","233665b2":"markdown","f172a9dc":"markdown","f0756c23":"markdown","b360ca81":"markdown","104ec0c8":"markdown"},"source":{"d04e1957":"# Uncomment and run the appropriate command for your operating system, if required\n\n# Linux \/ Binder\n!pip install numpy torch==1.7.0+cpu torchvision==0.8.1+cpu torchaudio==0.7.0 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html\n\n# Windows\n# !pip install numpy torch==1.7.0+cpu torchvision==0.8.1+cpu torchaudio==0.7.0 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html\n\n# MacOS\n# !pip install numpy torch torchvision torchaudio","1a540eb5":"# Import torch and other required modules\nimport torch","02cb3c05":"# Example 1 - working\ntorch.ones(2,3)","b1f5113e":"# Example 2 - working\nsample = torch.ones(5, 3)\nprint(sample)\ntorch.ones((5, 4), out = sample, dtype = torch.float, layout = torch.strided, device = torch.device('cpu'), requires_grad = False)\nprint(sample)","cb7c188b":"# Example 3 - breaking (to illustrate when it breaks)\ntorch.ones((3,4), out = sample, dtype = torch.bool)\nprint(sample)","a6f99fd6":"!pip install jovian --upgrade --quiet","e5581bc0":"import jovian","203c8a34":"jovian.commit(project='01-tensor-operations')","d24ed0d9":"# Example 1 - working\nsample2 = torch.chunk(sample, 3)\nprint(sample2)","f13a0247":"# Example 2 - working\nsample3 = torch.tensor([[[1, 2, 3, 4],\n                         [1, 2, 3, 4]],\n                        \n                        [[1, 2, 3, 4],\n                         [1, 2, 3, 4]]])\nsample4 = torch.chunk(sample3, 2, dim = 2)\nprint('First chunk : \\n', sample4[0], '\\n Second chunk : \\n', sample4[1])","bf0c5ea8":"# Example 3 - breaking (to illustrate when it breaks)\nsample5 = torch.chunk(sample3, 2, dim = 3)\nprint(sample5)","d0da2cff":"jovian.commit(project='01-tensor-operations')","1a25a71a":"# Example 1 - working\nsample6 = torch.tensor([[1, 0, 5, 7, 0],\n                        [0, 2, 4, 0, 8]])\n\ntorch.nonzero(sample6)","3e2c83c8":"# Example 2 - working\nprint(torch.nonzero(sample6, as_tuple = True))","9fe52cca":"# Example 3 - breaking (to illustrate when it breaks)\nsample7 = torch.tensor([1, 0, 3, 0, 5, 4, 3, 0])\nprint(torch.nonzero(sample6, out = sample7, as_tuple = True))","e63e34ff":"jovian.commit(project='01-tensor-operations')","4a1fc955":"# Example 1 - working\nsample8 = torch.tensor([[1, 2, 4],\n                        [3, 5, 8]])\nprint(torch.t(sample8))","6e270957":"# Example 2 - working\nsample9 = torch.tensor([1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(torch.t(sample9))","c22a8afd":"# Example 3 - breaking (to illustrate when it breaks)\nsample10 = torch.tensor([[[2, 4, 6],\n                          [3, 5, 7]],\n                        \n                         [[7, 8, 9],\n                          [1, 5, 9]]])\nprint(torch.t(sample10))","89e380d9":"jovian.commit(project='01-tensor-operations')","6dfaa28e":"# Example 1 - working\ntorch.seed()","58d00a76":"# Example 2 - working\nfor i in range(5):\n    print('seed ', i+1, ': ', torch.seed())","dfa6704a":"# Example 3 - breaking (to illustrate when it breaks)\nsample11 = 13\ntorch.seed(sample11)","b8f06920":"##### Correction : The dim parameter's value can not exceed the amount of outermost dimensions  ","a4d2bfe7":"This function transposes the given tensor by switching dimension 0 and 1.","3cf12454":"This function might be helpful in finding non-zero values in a larger tensor, where it would be difficult to do them manually.","40b8d260":"This is a good function to create a tensor of any required size with 1 as it's initialized values.","bfe82bc5":"#### This is a breaking point example\n1 argument 'sample11' was used.","056a44df":"## Conclusion\n\nThis notebook covered 5 functions, namely torch.ones, torch.chunk, torch.nonzero, torch.t, torch.seed. \nEach function has 2 working examples and 1 breaking point example(example with an error).\n","227b05c7":"#### This is a breaking point example\nWe assigned the dim parameter the value of 3.","a055c2ed":"In this Example, \nWe first create a tensor (assigned to the variable named 'sample') with 5 rows and 3 columns.\nSince we use torch.ones function we have all of the falues as 1. (float : because default dtype in torch.ones is float).\n\nParameters:\n1. Size\n2. Output variable \n3. Data type\n4. Layout\n5. Device\n6. Autograd\n\n","eee5299e":"##### Correction : We can not use out parameter when we are using as_tuple parameter or vice versa.","d5f51209":"## Function 1 - torch.ones\n\nReturns a tensor filled with the scalar value 1, with the shape defined by the variable argument size.\n\ntorch.ones(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)","32b81721":"## Function 3 - torch.nonzero\n\nReturns a 2-D tensor where each row is the index for a nonzero value.\n\ntorch.nonzero(input, *, out=None, as_tuple=False)","af4d01bf":"First we create a tensor(sample3) of size (2, 2, 4), after that we break it into two chunks each with a size (2, 2, 2).\n\nParameters :\n1. Input \n2. Number of chunks\n3. Dimensions\n\n","fa4f9918":"##### Correction : The input tensor can not have more than 2 dimensions.","5815d0cc":"#### This is a breaking point example\nThe given tensor is a 3-Dimension tensor.","4513a70a":"This function helps to make chunks or small sub tensors of the parent tensor to easily manage them or do a separate analysis of them.","8087ac05":"In this example we created chunks of the original tensor(sample2).\n","74a43ef7":"This function returns a torch.Generator object.","f7ec53ea":"This example produces 5 random seeds or 4 different 64 bit numbers.\n\nParameters : None\n\n","29e7d37f":"The as_tuple parameter converts the returned value to a tuple.\n\nParameters : \n1. Input\n2. Output variable\n3. Print the output as tuple\n\n","79c66635":"###### Correction : To correct this code just keep the data type of output variable the same as, what it was initialized with.","2eb17935":"## Function 2 - torch.chunk\n\nSplits a tensor into a specific number of chunks.\n\ntorch.chunk(input, chunks, dim=0)","238ba0f4":"#### This is a breaking point example\nIn the dtype parameter we specified the data type as torch.bool, whereas the original variable(sample) had a data type of torch.float.","f572eaf9":"## Function 4 - torch.t\n\nExpects input to be <= 2-D tensor and transposes dimensions 0 and 1.\n\ntorch.t(input)","79941ec4":"## Questions for Review\n\nTry answering the following questions to test your understanding of the topics covered in this notebook:\n\n1. What is PyTorch?\n2. What is a Jupyter notebook?\n3. What is Google Colab?\n4. How do you install PyTorch?\n5. How do you import the `torch` module?\n6. What is a vector? Give an example.\n7. What is a matrix? Give an example.\n8. What is a tensor?\n9. How do you create a PyTorch tensor? Illustrate with examples.\n10. What is the difference between a tensor and a vector or a matrix?\n11. Is every tensor a matrix?\n12. Is every matrix a tensor?\n13. What does the `dtype` property of a tensor represent?\n14. Is it possible to create a tensor with elements of different data types?\n15. How do you inspect the number of dimensions of a tensor and the length along each dimension?\n16. Is it possible to create a tensor with the values `[[1, 2, 3], [4, 5]]`? Why or why not?\n17. How do you perform arithmetic operations on tensors? Illustrate with examples?\n18. What happens if you specify `requires_grad=True` while creating a tensor? Illustrate with an example.\n19. What is autograd in PyTorch? How is it useful?\n20. What happens when you invoke  the `backward` method of a tensor?\n21. How do you check the derivates of a result tensor w.r.t. the tensors used to compute its value?\n22. Give some examples of functions available in the `torch` module for creating tensors.\n23. Give some examples of functions available in the `torch` module for performing mathematical operations on tensors.\n24. Where can you find the list of tensor operations available in PyTorch?\n25. What is Numpy?\n26. How do you create a Numpy array?\n27. How do you create a PyTorch tensor using a Numpy array?\n28. How do you create a Numpy array using a PyTorch tensor?\n29. Why is interoperability between PyTorch and Numpy important?\n30. What is the purpose of a library like PyTorch if Numpy already provides data structures and utilities to with multi-dimensional numeric data?\n31. What is Jovian?\n32. How do you upload your notebooks to Jovian using `jovian.commit` ?","46734de8":"## Reference Links\nProvide links to your references and other interesting articles about tensors\n* Official documentation for tensor operations: https:\/\/pytorch.org\/docs\/stable\/torch.html\n* Wikipedia for Pytorch : https:\/\/en.wikipedia.org\/wiki\/PyTorch\n","4d521c4e":"If the input tensor is a 0-Dimension or 1-Dimension then the returned value is the same as the input tensor.\n\nParameters : \n1. Input\n\n","4b34536f":"# Let's learn together :)\n\nPyTorch is a free and open source machine learning library based on the Torch library for Python. It is developed by Facebook's AI Research lab (FAIR).\n\n##### Github  : https:\/\/github.com\/pytorch\/pytorch\n##### Website : https:\/\/pytorch.org\/\n\nThese are the functions I choose for this assignment, can you guess what each of them does, or is it a mystery for you too? :D\n- .ones\n- .chunk\n- .nonzero\n- .t\n- .seed\n\nBefore we begin, let's install and import PyTorch","d9fa427d":"## Answers\n\n1. PyTorch is an open source machine learning library based on the Torch library, used for applications such as computer vision and natural language processing, primarily developed by Facebook's AI Research lab.\n\n2. The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, data visualization, machine learning, and much more.\n\n3. Google Colaboratory is a free online cloud-based Jupyter notebook environment that allows us to train our machine learning and deep learning models on CPUs, GPUs, and TPUs.\n\n4. for linux :\n!pip install numpy torch==1.7.0+cpu torchvision==0.8.1+cpu torchaudio==0.7.0 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html\n\n5. import torch\n\n6. A vector is an object that has both a magnitude and a direction. Examples are force or velocity vector.\n\n7. Matrix is an arrangement of numbers into rows and columns. Example : [1., 2., 3., 4.]\n\n8. A tensor is a number, vector, matrix, or any n-dimensional array.\n\n9. To create a pytorch tensor use <variable name> = torch.tensor(<tensor data>). \n    Example: t3 = torch.tensor([[5, 6], [7, 8], [9, 10]])\n\n10. A vector is a grid of numbers with one row or column. A matrix is a 2-D grid of numbers. A tensor is a generalized form of both of these.","e5920c7b":"Let's save our work using Jovian before continuing.","a0d0e77b":"## Function 5 - torch.seed()\n\nSets the seed for generating random numbers to a non-deterministic random number. Returns a 64 bit number used to seed the RNG.\n\ntorch.seed()","b4cd49f0":"#### This is a breaking point example\nOut and as_tuple parameters are used simultaneously.","233665b2":"This function will be very helpful to do matrix arithmetic","f172a9dc":"This function could be used when one has to generate random numbers.","f0756c23":"As we see, above example produces a tensor of the given dimensions (in this case it is a 2D with 2 rows and 3 columns) and the values are all float 1.","b360ca81":"Above example shows the position for non-zero values in the given tensor(sample6).","104ec0c8":"##### Correction : torch.seed() does not take any arguments."}}