{"cell_type":{"7ab51492":"code","aa4cd5ef":"code","67eb4bad":"code","33a3aedd":"code","a882835a":"code","4ab3b4c5":"code","feaf7388":"code","f6fa65f2":"code","3643216b":"code","53c67ae3":"code","770ddac3":"code","10e2f4cd":"code","7148ddb1":"code","a8b5152f":"code","86907f6f":"code","b6d21318":"code","8ce7b013":"code","292324b6":"code","b15b3ffe":"code","87999305":"code","cb662af3":"code","ecebd52e":"code","75f7bcc2":"code","c689d8b6":"code","36689aec":"code","f7e666d4":"code","002676e6":"code","d49828b2":"code","9fd6628a":"code","1a7fa812":"code","b63f9e49":"code","dd3b2227":"code","f3c9217d":"code","1b66d5a4":"code","cab70102":"code","65cb5f14":"code","13db9919":"code","dc1a4799":"code","58047dad":"code","83f1eaea":"code","4e6987d5":"markdown","e4970061":"markdown","d9dcdf18":"markdown","02cc2589":"markdown","a273e4ba":"markdown","76cd37ba":"markdown","3633c655":"markdown","be906443":"markdown","3dde6e4d":"markdown","7d6ab0a4":"markdown","f6453170":"markdown","79392044":"markdown","2db48d63":"markdown","e8a193a6":"markdown","45e1e220":"markdown","51ecba7b":"markdown","57af5b05":"markdown","8ec8d813":"markdown","895c5e56":"markdown","b9ebb222":"markdown","9d826ecf":"markdown","46fcfe96":"markdown","fae3dbdf":"markdown","39d593b0":"markdown","78860366":"markdown","33b2b3db":"markdown","ff186db5":"markdown","643b5e33":"markdown","bf6cf98b":"markdown","8a89bbdc":"markdown","1757f78f":"markdown","a9d703e5":"markdown","247da924":"markdown","bac19349":"markdown","9e95c4b5":"markdown","0a5cc355":"markdown","96bf994c":"markdown","d910ec8d":"markdown"},"source":{"7ab51492":"DIR_PATH = '\/kaggle\/input\/coronavirusdataset\/'","aa4cd5ef":"# List of files used\nimport os\n\nfile_paths = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        file_paths.append(os.path.join(dirname, filename))\n        print(os.path.join(dirname, filename))","67eb4bad":"%config InlineBackend.figure_format = 'retina'\n%matplotlib inline\n\nimport os;\nimport numpy as np;\nimport pandas as pd;\nimport seaborn as sns;\nimport folium;\nimport matplotlib.pyplot as plt;\nimport matplotlib.ticker as ticker\n\nsns.set_style('darkgrid')","33a3aedd":"# Importing data: PopulationDistribution\npop_dist = pd.read_csv('\/kaggle\/input\/geolocation-population-distribution-of-south-kr\/PopulationDistribution.csv')\npop_dist = pop_dist.iloc[:, np.r_[0, 1, 3:12, 14:15, 27]]\npop_dist.columns = ['location', 'total', '0s', '10s', '20s', '30s', '40s', '50s',\n                   '60s', '70s', '80s', 'male_total', 'female_total']\npop_dist.head()","a882835a":"# Tag value on bars\ndef show_values_on_bars(axs, h_v=\"v\", space=0.4, modh=0, modv=0):\n    def _show_on_single_plot(ax):\n        if h_v == 'v':\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() \/ 2\n                _y = p.get_y() + p.get_height() + float(modv)\n                value = int(p.get_height())\n                ax.text(_x, _y, value, ha='center') \n        elif h_v == 'h':\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() + float(space)\n                _y = p.get_y() + p.get_height() - float(modh)\n                value = int(p.get_width())\n                ax.text(_x, _y, value, ha='left')\n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(ax)\n    else:\n        _show_on_single_plot(axs)","4ab3b4c5":"# Importing data: Gender\ngender = pd.read_csv(os.path.join(DIR_PATH, 'TimeGender.csv'))\ngender.head(2)","feaf7388":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(17, 7), gridspec_kw={'width_ratios': [1, 2]})\nsns.set_palette(['#66b3ff','#ff9999'])\n\n# Donut plot of confirmed cases by gender\nax1.title.set_text('Confirmed Cases ({0})'.format(gender.iloc[-1, 0]))\nax1.pie(gender.confirmed[-2:], labels=['male', 'female'], autopct='%.1f%%',\n        startangle=90, pctdistance=0.85)\nax1.add_artist(plt.Circle((0, 0), 0.7, fc='white'))\n\n# Change in time of confirmed cases\nax2.title.set_text('Confirmed Cases by Gender')\nsns.lineplot(data=gender, x='date', y='confirmed', hue='sex', ax=ax2)\nax2.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nplt.xticks(rotation=45, ha='right')\n\nplt.tight_layout()","f6fa65f2":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 5))\n\n# Growth rate of confirmed cases (Index - male: even, female: odd)\nax1.title.set_text('Growth Rate of Confirmed Cases by Gender')\ngender['growth_rate'] = gender.groupby('sex')[['confirmed']].pct_change()\nsns.lineplot(data=gender, x='date', y='growth_rate', hue='sex', ax=ax1)\nax1.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nplt.setp(ax1.xaxis.get_majorticklabels(), rotation=45, ha='right')\n\n# Decease rate of confirmed cases\nax2.title.set_text('Decease Rate of Confirmed Cases by Gender')\n# Limiting y axis range to reduce fluctuations in graph\nax2.set(ylim=(-0.05, 0.5))\ngender['decease_rate'] = gender.groupby('sex')[['deceased']].pct_change()\nsns.lineplot(data=gender, x='date', y='decease_rate', hue='sex', ax=ax2)\nax2.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nplt.xticks(rotation=45, ha='right')\n\nplt.show()","3643216b":"# Importing data: Age\nage = pd.read_csv(os.path.join(DIR_PATH, 'TimeAge.csv'))\nprint('Unique items: {0}'.format(len(age['age'].unique())))\nage.head(9)","53c67ae3":"sns.set_palette('deep')\npop_dist_age = pop_dist.iloc[0, 2:11].str.replace(',', '')\n\n# Population distribution by age\nplt.figure(figsize=(7, 7))\nplt.title('Age Distribution in South Korea')\nplt.pie(pop_dist_age, labels=pop_dist_age.index, \n        autopct='%.1f%%', startangle=90, pctdistance=0.85)\nplt.gcf().gca().add_artist(plt.Circle((0, 0), 0.7, fc='white'))\nplt.show()","770ddac3":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 5))\n\n# Confirmed cases by age\nax1.title.set_text('Confirmed Cases of COVID-19')\nsns.barplot(data=age[-9:], x='age', y='confirmed', ax=ax1)\n\n# Create new column of total people in that age group\npop_dist_age = pop_dist.iloc[0, 2:11].str.replace(',', '')\nage['age_total'] = np.tile(pop_dist_age, len(age) \/\/ len(pop_dist_age) + 1)[:len(age)]\n\n# Create proportion column\nage['prop_total'] = age['confirmed'] \/ age['age_total'].astype(float)\n\n# Proportion of confirmed cases by age to total people in age group\nax2.title.set_text('Confirmed Cases of COVID-19 (Out of total age group)')\nsns.barplot(data=age[-9:], x='age', y='prop_total', ax=ax2)\n\nplt.show()","10e2f4cd":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 5))\n\n# Confirmed cases by age\nax1.title.set_text('Confirmed Cases by Age')\nsns.lineplot(data=age, x='date', y='confirmed', hue='age', ax=ax1)\nax1.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nplt.setp(ax1.xaxis.get_majorticklabels(), rotation=45, ha='right')\n\n# Deceased cases by age\nax2.title.set_text('Deceased Cases of Confirmed Cases by Age')\nsns.lineplot(data=age, x='date', y='deceased', hue='age', ax=ax2)\nax2.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nplt.xticks(rotation=45, ha='right')\n\nplt.show()","7148ddb1":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 5))\n\n# Growth rate of confirmed cases\nax1.title.set_text('Growth Rate of Confirmed Cases by Age')\nage['growth_rate'] = age.groupby('age')[['confirmed']].pct_change()\nsns.lineplot(data=age, x='date', y='growth_rate', hue='age', ax=ax1)\nax1.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nplt.setp(ax1.xaxis.get_majorticklabels(), rotation=45, ha='right')\n\n# Decease rate of confirmed cases\nax2.title.set_text('Decease Rate of Confirmed Cases by Age')\nage['decease_rate'] = age.groupby('age')[['deceased']].pct_change()\nsns.lineplot(data=age, x='date', y='decease_rate', hue='age', ax=ax2)\nax2.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nplt.xticks(rotation=45, ha='right')\n\nplt.show()","a8b5152f":"# Importing data: Location\nlocation = pd.read_csv(os.path.join(DIR_PATH, 'TimeProvince.csv'))\nprov_num = len(location['province'].unique())\nprint(f'There are {prov_num} provinces in this dataset')\n\n# Latest data of confirmed cases by province\nloc_latest = location.iloc[-prov_num:]\nloc_latest = loc_latest.sort_values('confirmed', ascending=False).reset_index(\n                        drop=True).drop('time', axis=1)\nloc_latest","86907f6f":"# Latest number of confirmed & released & deceased people\nfig, ax1 = plt.subplots(figsize=(15, 7))\nax1.title.set_text('COVID-19 Patients by Province')\nsns.set_color_codes(\"pastel\")\nsns.barplot(data=loc_latest, x='confirmed', y='province',  label='confirmed',\n            color='b', ci=None, estimator=sum)\nsns.barplot(data=loc_latest, x='released', y='province', label='released',\n            color='r', ci=None, estimator=sum)\nsns.barplot(data=loc_latest, x='deceased', y='province', label='deceased',\n            color='g', ci=None, estimator=sum)\nax1.legend(loc='lower right', frameon=True)\nfig.show()","b6d21318":"# Confirmed cases in each province (accumulated)\nrows = int(prov_num \/ 2 + 1)\nfig, ax = plt.subplots(rows, 2, figsize=(20, 6 * rows))\nfig.subplots_adjust(hspace=.3)\n\nfor i, province in enumerate(loc_latest['province']):\n    r, c = int(i \/ 2), i % 2\n    sns.lineplot(data=location[location['province'] == province],\n                 x='date', y='confirmed', ax=ax[r, c])\n    ax[r, c].set_title(f'Confirmed Cases in {province}')\n    ax[r, c].xaxis.set_major_locator(ticker.MultipleLocator(base=6))\n    plt.setp(ax[r, c].xaxis.get_majorticklabels(), rotation=30, ha='right')\n\nfig.delaxes(ax[rows - 1][rows * 2 - prov_num])\nfig.show()","8ce7b013":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 6))\nlocation['growth_rate'] = location.groupby('province')[['confirmed']].pct_change()\n\n# Growth rate of confirmed cases in Daegu\nax1.set_title('Growth rate of confirmed cases (Daegu)')\nsns.lineplot(data=location[location['province'] == 'Daegu'], x='date', y='growth_rate', ax=ax1)\nax1.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nplt.setp(ax1.xaxis.get_majorticklabels(), rotation=30, ha='right')\n\n# Growth Rate of confirmed cases in Gyeonggi-do\nax2.set_title('Growth rate of confirmed cases (Gyeonggi-do)')\nsns.lineplot(data=location[location['province'] == 'Gyeonggi-do'], x='date', y='growth_rate', ax=ax2)\nax2.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nplt.setp(ax2.xaxis.get_majorticklabels(), rotation=30, ha='right')\n\nfig.show()","292324b6":"# Proportion out of total confirmed cases by province\nloc_latest['proportion'] = round(loc_latest['confirmed'] \/ sum(loc_latest['confirmed']) * 100, 2)\n\n# Combine provinces that consists less than 2% of total cases\nloc_latest.loc['17',:] = loc_latest.iloc[4:, :].sum()\nloc_latest.loc['17',['date', 'province']] = ['2020-03-30', 'Others']\n\nsns.set_palette('deep')\nloc_latest_w_etc = loc_latest.iloc[[0, 1, 2, 3, 17], [1, 5]]\n\n# COVID-19 distribution by province\nplt.figure(figsize=(7, 7))\nplt.title('COVID-19 Distribution by Province')\nplt.pie(loc_latest_w_etc['proportion'], labels=loc_latest_w_etc['province'], \n        autopct='%.1f%%', startangle=90, pctdistance=0.85)\nplt.gcf().gca().add_artist(plt.Circle((0, 0), 0.7, fc='white'))\nplt.show()","b15b3ffe":"# Importing data: Region\nregion = pd.read_csv(os.path.join(DIR_PATH, 'Region.csv'))\nregion = region.drop('nursing_home_count', axis=1)\n# region = region.drop(['latitude', 'longitude', 'nursing_home_count'], axis=1)\n# Drop column with same value and sort by academy_ratio\nregion_overview = region[region['province'] == region['city']].drop('city',\n                  axis=1).drop(243).sort_values('academy_ratio', \n                  ascending=False).reset_index(drop=True)\nregion_overview.head()","87999305":"# Add latitude and longtitude\nloc_latest = loc_latest.merge(\n    region_overview[['province', 'latitude','longitude']],\n    on = 'province')\nloc_latest['latitude'] = loc_latest['latitude'].astype(float)\nloc_latest['longitude'] = loc_latest['longitude'].astype(float)\nloc_latest.head()","cb662af3":"# COVID-19 infection distribution\nmap_southKR = folium.Map(location=[35.9, 128], tiles=\"cartodbpositron\",\n                         zoom_start=7, max_zoom=9, min_zoom=5)\nfolium.Choropleth(geo_data='\/kaggle\/input\/geolocation-population-distribution-of-south-kr\/province_geo.json', \n                  fill_color='#ffff66', line_opacity=0.5, fill_opacity=0.3).add_to(map_southKR)\n\nfor i in range(0, len(loc_latest)):\n    folium.Circle(location=[loc_latest.iloc[i]['latitude'], loc_latest.iloc[i]['longitude']],\n                  tooltip=\"<h5 style='text-align:center;font-weight: bold'>\" + \n                  loc_latest.iloc[i]['province'] + \"<\/h5><hr style='margin:10px;'>\" +\n                  \"<ul style='align-item:left;padding-left:20px;padding-right:20px'>\" +\n                  \"<li>Confirmed: \" + str(loc_latest.iloc[i]['confirmed']) + \"<\/li>\" +\n                  \"<li>Deaths: \" + str(loc_latest.iloc[i]['deceased']) + \"<\/li>\" +\n                  \"<li>Mortality Rate: \" + str(round(loc_latest.iloc[i]['deceased'] \/\n                                                     (loc_latest.iloc[i]['confirmed'] + .000001) * 100, 2)) + \n                  \"%<\/li><\/ul>\",\n                  radius=int((np.log(loc_latest.iloc[i]['confirmed'])))*5000,\n                  color='#ff3333',\n                  fill_color='#ff0000',\n                  fill=True).add_to(map_southKR)\n\nmap_southKR","ecebd52e":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 5))\n\n# Academy ratio of each province\nax1.title.set_text('Academy Ratio of Each Province')\nsns.barplot(data=region_overview, x='province', y='academy_ratio', ax=ax1)\nplt.setp(ax1.xaxis.get_majorticklabels(), rotation=45, ha='right')\n\nregion_overview = region_overview.sort_values('elderly_population_ratio', \n                                              ascending=False).reset_index(drop=True)\n\n# Elderly population ratio of each province\nax2.title.set_text('Elderly Population Ratio of Each Province')\nsns.barplot(data=region_overview, x='province', y='elderly_population_ratio', ax=ax2)\nplt.setp(ax2.xaxis.get_majorticklabels(), rotation=45, ha='right')\n\nplt.show()","75f7bcc2":"# DataFrame only with province and population value\npop_dist_prov = pop_dist.copy(deep=True)\npop_dist_prov['total'] = pop_dist_prov['total'].str.replace(',', '').astype(int)\npop_dist_prov = pop_dist_prov.sort_values('total', ascending=False).reset_index(\n    drop=True).drop(pop_dist_prov.columns[2:13], axis=1)\nby_i_case = pop_dist_prov.loc[[7, 6, 1, 2, 8, 3, 4, 5, 17, 11, 15], :]\nby_i_case['location'] = ['Daegu','Gyeongsangbuk-do','Gyeonggi-do','Seoul',\n                 'Chungcheongnam-do','Busan','Gyeongsangnam-do','Incheon',\n                 'Sejong','Chungcheongbuk-do','Ulsan']\n\n# Province population ordered by infection cases\nplt.figure(figsize=(10, 5))\nplt.title('Province Population (Order by infection cases)')\nsns.barplot(data=by_i_case, x='location', y='total')\nplt.xticks(rotation=30, ha='right')\nplt.show()","c689d8b6":"# Importing data: Time\ntime = pd.read_csv(os.path.join(DIR_PATH, 'Time.csv'))\ntime.head()","36689aec":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 5))\n\n# Number of tests conducted\nax1.title.set_text('Total COVID-19 Tests Conducted')\nsns.lineplot(data=time, x='date', y='test', label='total', ax=ax1)\nsns.lineplot(data=time, x='date', y='confirmed', color='red', label='positive', ax=ax1)\nsns.lineplot(data=time, x='date', y='negative', color='green', label='negative', ax=ax1)\n\nax1.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nax1.set(ylabel='count')\nplt.setp(ax1.xaxis.get_majorticklabels(), rotation=45, ha='right')\n\n# Positive & Released & Deceased cases\nax2.title.set_text('Patient Count')\nsns.lineplot(data=time, x='date', y='confirmed', label='positive', ax=ax2)\nsns.lineplot(data=time, x='date', y='released', label='released', ax=ax2)\nsns.lineplot(data=time, x='date', y='deceased', label='deceased', ax=ax2)\n\nax2.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nax2.set(ylabel='count')\nplt.setp(ax2.xaxis.get_majorticklabels(), rotation=45, ha='right')\n\n# Draw vertical line in patient count graph\nax2.axvline('2020-03-10', 0, 10000, color='red', linestyle='dotted')\n\nplt.show()","f7e666d4":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 5))\ntime['p_growth_rate'] = time['confirmed'].pct_change()\ntime['n_growth_rate'] = time['negative'].pct_change()\n\n# Growth rate of positive cases\nax1.set_title('Positive Case Growth Rate')\nsns.lineplot(data=time, x='date', y='p_growth_rate', ax=ax1)\nax1.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nplt.setp(ax1.xaxis.get_majorticklabels(), rotation=30, ha='right')\n\n# Growth rate of negative cases\nax2.set_title('Negative Case Growth Rate')\nsns.lineplot(data=time, x='date', y='n_growth_rate', ax=ax2)\nax2.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nplt.setp(ax2.xaxis.get_majorticklabels(), rotation=30, ha='right')\n\nfig.show()","002676e6":"# Proportion by total population\ntime_f = time.tail(1)\ntime_latestT = time_f.test.values[0]\ntime_latestP = time_f.confirmed.values[0]\ntime_latestN = time_f.negative.values[0]\npop_total = int(pop_dist.iat[0, 1].replace(',', ''))\n\nprint('Percentage of people tested out of total population: {0}%\\n'.format(round(time_latestT \/ pop_total * 100, 2)) + \n      'Percentage of positive cases out of people tested: {0}%\\n'.format(round(time_latestP \/ time_latestT * 100, 2)) + \n      'Percentage of negative cases out of people tested: {0}%'.format(round(time_latestN \/ time_latestT * 100, 2)))","d49828b2":"# Importing data: Search Trend\nsearchtrend = pd.read_csv(os.path.join(DIR_PATH, 'SearchTrend.csv'))\nsearchtrend.head()","9fd6628a":"searchTrend_2020 = searchtrend.iloc[1461:, :]\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 5))\n\n# Search proportion of keywords related to COVID-19\nax1.title.set_text('Keyword Search Trend')\nfor keyword in searchTrend_2020.iloc[:, 1:].columns:\n    sns.lineplot(data=searchTrend_2020, x='date', y=keyword, label=keyword, ax=ax1)\nax1.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nax1.set(ylabel='percentage')\nplt.setp(ax1.xaxis.get_majorticklabels(), rotation=30, ha='right')\n\n# Search proportion of keywords related to COVID-19 except coronavirus\nax2.title.set_text('Keyword Search Trend (excluding \"coronavirus\")')\nsns.lineplot(data=searchTrend_2020, x='date', y='cold', label='cold', ax=ax2)\nsns.lineplot(data=searchTrend_2020, x='date', y='flu', label='flu', ax=ax2)\nsns.lineplot(data=searchTrend_2020, x='date', y='pneumonia', label='pneumonia', ax=ax2)\nax2.xaxis.set_major_locator(ticker.MultipleLocator(base=6))\nax2.set(ylabel='percentage')\nplt.setp(ax2.xaxis.get_majorticklabels(), rotation=30, ha='right')\n\nfig.show()","1a7fa812":"# Importing data: Patient info\npatientinfo = pd.read_csv(os.path.join(DIR_PATH, 'PatientInfo.csv'))\np_total = len(patientinfo)\nprint('People mainly got infected by {0} ways'.format(len(patientinfo['infection_case'].unique())) + \n      ' and had {0} contacts per person in average.'.format(round(patientinfo['contact_number'].mean(), 2)))\nprint('There are {0} patient data in this set.'.format(p_total))\n\n# Convert to Int64 to remove decimals and leave NaN\npatientinfo['infected_by'] = patientinfo['infected_by'].astype('Int64')\n\n# Show transpose of a matrix for better visualization\npatientinfo.head().T","b63f9e49":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 10))\n\n# Where\/How confirmed patients got infected\nax1.title.set_text('Route of Infection')\nsns.countplot(data=patientinfo, y='infection_case', \n              order=patientinfo['infection_case'].value_counts().index, ax=ax1)\nshow_values_on_bars(ax1, 'h', 10, 0.25)\n\n# Infection order of a patient\nax2.title.set_text('Infection Order of a Patient (excluding NaN)')\nsns.countplot(data=patientinfo, x='infection_order',\n              order=patientinfo['infection_order'].value_counts().index, ax=ax2)\nshow_values_on_bars(ax2, 'v', modv=0.2)\n\nplt.show()","dd3b2227":"transmit_order = patientinfo['infected_by'].value_counts().iloc[:10].index\n\n# Top 10 patients who transmitted COVID-19 to others\nfig, ax1 = plt.subplots(figsize=(10, 5))\nplt.title('Top 10 patients who transmitted COVID-19')\nsns.countplot(data=patientinfo, x='infected_by', order=transmit_order, ax=ax1)\nplt.xticks(rotation=30, ha='right')\nfig.show()","f3c9217d":"# Information of top 10 COVID-19 carriers\ntransmit_order_df = patientinfo.loc[patientinfo['patient_id'].isin(transmit_order)]\ntransmit_order_df.T","1b66d5a4":"# Days took to release prior positive patients (Exclude NaN values)\npatientinfo_release = pd.DataFrame()\npatientinfo_release['c_date'] = pd.to_datetime(patientinfo['confirmed_date'], format='%Y-%m-%d')\npatientinfo_release['r_date'] = pd.to_datetime(patientinfo['released_date'], format='%Y-%m-%d')\npatientinfo_release['days_took'] = (patientinfo_release['r_date']\n                                    - patientinfo_release['c_date']).dt.days.astype('Int64')\npatientinfo_release = patientinfo_release.dropna()\n\nplt.figure(figsize=(10, 3))\nplt.title('Days took to get released')\nsns.boxplot(x=patientinfo_release['days_took'])\n# sns.swarmplot(x=patientinfo_release['days_took'], color='.25')\nplt.show()","cab70102":"p_nosymp = patientinfo['symptom_onset_date'].isna().sum()\n\n# Proportion of patients with\/without symptom\nplt.figure(figsize=(7, 7))\nplt.title('Patients with Symptom')\nplt.pie([p_total - p_nosymp, p_nosymp], labels=[f'Yes ({p_total - p_nosymp})', f'No ({p_nosymp})'], \n        autopct='%.1f%%', pctdistance=0.85)\nplt.gcf().gca().add_artist(plt.Circle((0, 0), 0.7, fc='white'))\nplt.show()","65cb5f14":"# Importing data: Patient route\npatientroute = pd.read_csv(os.path.join(DIR_PATH, 'PatientRoute.csv'))\npatientroute.head()","13db9919":"patientroute_top_log = pd.DataFrame(patientroute['patient_id'].value_counts().head(10))\nprint('There are {0} patients\\' route data.'.format(len(patientroute['patient_id'].unique())))\npatientroute_top_place = pd.DataFrame(patientroute['type'].value_counts().head(10))\npatientroute_top_place.reset_index(level=0, inplace=True)\npatientroute_top_place.columns = ['type', 'count']\npatientroute_top_place","dc1a4799":"fig, ax1 = plt.subplots(figsize=(10, 5))\n\nax1.title.set_text('Top 10 Places COVID-19 Patients Visited')\nsns.barplot(data=patientroute_top_place, x='type', y='count', ax=ax1)\nshow_values_on_bars(ax1, 'v', modv=20)\nplt.setp(ax1.xaxis.get_majorticklabels(), rotation=30, ha='right')\nplt.show()","58047dad":"# Route of top 10 patients who spread COVID-19\npatient_routes = []\n\nfor i in range(len(transmit_order)):\n    a = []\n    tmp_route = patientroute.loc[patientroute['patient_id'] == \n                                 transmit_order[i]].reset_index(drop=True)\n    for j in range(len(tmp_route)):\n        a.append(tuple([tmp_route.loc[j].latitude, tmp_route.loc[j].longitude]))\n    patient_routes.append(a)\n\nprint('Saved in \\'patient_routes\\'')","83f1eaea":"## Going to fix... please leave a comment if you know what's causing this problem\n\nroute_southKR = folium.Map(location=[36.5, 128], tiles=\"cartodbpositron\",\n                         zoom_start=8, min_zoom=5)\nfolium.Choropleth(geo_data='\/kaggle\/input\/geolocation-population-distribution-of-south-kr\/province_geo.json',\n                  fill_color='#ffff66', line_opacity=0.5, fill_opacity=0.3).add_to(route_southKR)\n\nfor i in range(len(patient_routes)):\n    for places in patient_routes[i]:\n        folium.Marker(places).add_to(route_southKR)\n    ran_c = list(np.random.choice(range(256), size=3))\n    folium.PolyLine(patient_routes[i], color='#%02x%02x%02x' % (ran_c[0], ran_c[1], ran_c[2])).add_to(route_southKR)\n\nroute_southKR","4e6987d5":"**Population Distribution Data** from [Ministry of the Interior and Safety](http:\/\/27.101.213.4\/)\n\nFile Name: *PopulationDistribution.csv* (as of March)\n\nUse this code to convert file with encoding **EUC-KR** to **UTF-8**.\n```\niconv -f euc-kr -t utf-8 old.csv > new.csv\n```","e4970061":"## **[By Search Trend]**","d9dcdf18":"### **Assumption**\nThere will be no correlation between gender and COVID-19 infection.","02cc2589":"### **Visualization**","a273e4ba":"### **Assumption**\n\nSeoul and metropolitan cities would have relatively high infection cases due to their floating population and high population density.","76cd37ba":"## **[By Gender]**","3633c655":"*Author*: Huey Kim [Github](https:\/\/github.com\/hwuiwon)<br>\n\n[See this notebook in Github](https:\/\/github.com\/hwuiwon\/covid-19-analysis-kr)\n\nWe will use [Data Science for COVID-19 dataset](https:\/\/www.kaggle.com\/kimjihoo\/coronavirusdataset) provided by DS4C at Kaggle.","be906443":"### **Assumption**\n\nAge group 10s and 20s will be most infected as they are more active and study in a crowded place such as academy or school.<br>As people age, they will be more susceptible of getting infected as their immune system weakens.","3dde6e4d":"### **List of Files**","7d6ab0a4":"#### **Region.csv**\n\nLocation and statistical data of the regions","f6453170":"*Encoding*: UTF-8\n\n*   **Case.csv** (Data of COVID-19 infection cases)\n*   **PatientInfo.csv** (Epidemiological data of COVID-19 patients) \u2714\ufe0f\n*   **PatientRoute.csv** (Route data of COVID-19 patients) \u2714\ufe0f\n*   **Region.csv** (Location and statistical data of the regions) \u2714\ufe0f\n*   **SearchTrend.csv** (Trend data of the keywords searched in NAVER which is one of the largest portals) \u2714\ufe0f\n*   **SeoulFloating.csv** (Data of floating population in Seoul, South Korea (from SK Telecom Big Data Hub))\n*   **Time.csv** (Time series data of COVID-19 status) \u2714\ufe0f\n*   **TimeAge.csv** (Time series data of COVID-19 status in terms of the age) \u2714\ufe0f\n*   **TimeGender.csv** (Time series data of COVID-19 status in terms of gender) \u2714\ufe0f\n*   **TimeProvince.csv** (Time series data of COVID-19 status in terms of the Province) \u2714\ufe0f\n*   **Weather.csv** (Data of the weather in the regions)","79392044":"#### **TimeProvince.csv**\n\nTime series data of COVID-19 status in terms of the Province","2db48d63":"### **Visualization**","e8a193a6":"### **Visualization**","45e1e220":"**Province Geolocation Data** from [GEOSERVICE](http:\/\/www.gisdeveloper.co.kr\/?p=2332)\n\nFile Name: *province_geo.json*","51ecba7b":"## **[By Patient]**","57af5b05":"### **Assumption**\n\nWorking on it","8ec8d813":"### **External Datasets**","895c5e56":"### **Setting Environment**","b9ebb222":"## **[By Location]**","9d826ecf":"**Column Description**\n\nName | Description\n:--- | :---\n***patient_id*** | the ID of the patient\n***global_num*** | the number given by KCDC\n***sex*** | the sex of the patient\n***birth_year*** | the birth year of the patient\n***age*** | the age of the patient\n***country*** | the country of the patient\n***province*** | the province of the patient\n***city*** | the city of the patient\n***disease*** | TRUE: underlying disease \/ FALSE: no disease\n***infection_case*** | the case of infection\n***infection_order*** | the order of infection\n***infected_by*** | the ID of who infected the patient\n***contact_number*** | the number of contacts with people\n***symptom_onset_date*** | the date of symptom onset\n***confirmed_date*** | the date of being confirmed\n***released_date*** | the date of being released\n***deceased_date*** | the date of being deceased\n***state*** | isolated \/ released \/ deceased","46fcfe96":"#### **PatientInfo.csv**\n\nEpidemiological data of COVID-19 patients","fae3dbdf":"## **[By Time]**","39d593b0":"### **Assumption**\n\nGraph of COVID-19 confirmed cases will follow SIR epidemic model.\n\n![SIR Model](https:\/\/drive.google.com\/uc?id=1rjMH9cdoP_V9Kt2OGCfQHP5NJoBxSPA9)\n\nwhere\n\n> **S(t)** are those susceptible but not yet infected with the disease<br>\n> **I(t)** is the number of infectious individuals<br>\n> **R(t)** are those individuals who have recovered from the disease and now have immunity to it.","78860366":"### **Methods for Better Visualization**","33b2b3db":"### **Visualization**","ff186db5":"### **Analysis & Conclusion**\n\n1. Total number of conducted tests and negative results are increasing linearly while the rate of positive results is slowly decreasing unlike its exponential growth in the first.\n2. Since 2020-03-10, rate of positive results is decreasing and rate of released patients is increasing rapidly.\n3. From spikes in the positive case growth rate, we can infer some event has happened just before, causing collective infection.\n\nA Graph of time vs infection cases follows the SIR epidemic model.","643b5e33":"#### **PatientRoute.csv**\n\nRoute data of COVID-19 patients","bf6cf98b":"### **Analysis & Conclusion**\n\n1. Less than 100 people were infected for the first month but infection case has grown exponentially for the following months.\n2. Top 3 provinces with high COVID-19 infection take up 90% of total cases.\n3. It seems COVID-19 has gone to a lull (Slope is decreasing) in provinces except Gyeonggi-do, Seoul, and Incheon.\n4. The infection growth rate in Gyeonggi-do shows several spikes, which means there were a sudden increase in infection cases that might have been caused by collective infection due to an event or work.\n5. Academy ratio and elderly population ratio of a province seem to have no correlation with infection cases in particular province.\n6. There tends to be more confirmed cases of COVID-19 in provinces with high popultaion except Daegu and Gyeongsangbuk-do.\n\nLocation seems to be a significant feature that influences infection rate.\n\nHowever, it seems location is not the major factor that determines the infection rate.\n<br>The reason why Daegu and Gyeongsangbuk-do have a high number of patients relative to their population are because infected **Sincheonji believers** had a huge prayer meeting, causing of exponential growth, and many of them traveled from Daegu to Gyeongsangbuk-do.","8a89bbdc":"## **[Introduction]**","1757f78f":"### **Analysis & Conclusion**\n\n1. Between Jan 8, 2020 and Jan 11, 2020, there were sudden spike of keyword search related to coronavirus.\n2. After Jan 11, 2020, people searched less for cold, flu, and pneumonia and percentage of coronavirus searched through NAVER (top online portal in KR) increased rapidly starting from Jan 9, 2020, maintaining its search frequency over 50% most of the time until March 4, 2020.\n3. We can assume people first became aware of corona virus at Jan 8, 2020 and people's awareness became high when the first COVID-19 patient was spotted in South Korea at Jan 20, 2020.\n4. We can see that search trend of coronavirus has once again spiked in Feb 18, 2020, as number of confirmed cases suddenly grew exponentially.\n5. However, corona virus is receiving less attention since new confirmed cases of COVID-19 have decreased significantly compared to previous days. (new cases < 30)\n\nPeople tend to search keywords related to COVID-19 when it was first brought to spotlight, when first death case happened, and when there was significant increase in growth rate of confirmed cases.","a9d703e5":"### **Visualization**","247da924":"### **Visualization**","bac19349":"### **Assumption**\n\nThe search keywords related to COVID-19 would have been searched the most when the growth rate of positive cases is at its maximum.","9e95c4b5":"## **[By Age]**","0a5cc355":"### **Analysis & Conclusion**\n\n1. Although 20s only take up 13.2% of all populations in South Korea, they are the most infected and has the highest infection rate among all other age groups.\n2. Older people are more prone to get COVID-19 and are more likely to get deceased.\n3. Trend of growth and decease rate seems similar.\n\nAge seems to be a significant feature that influences infection rate.\n\nHigh infection rate of age group 20s can might be explained by their social activeness as young people tend to move around places more than older people. As people get older, their immunity tends to drop, which might be the reason why there are more cases of infections as people age.","96bf994c":"### **Analysis & Conclusion**\n\n1. More females are infected than males.\n2. The growth rate of confirmed cases is similar regardless of genders.\n3. Both genders show a similar trend of decease rate.\n\nGender **isn't** a significant factor that influences the infection rate. (No correlation)<br>\nThe reason why more females were infected than men might be due to geological reasons or different lifestyles.","d910ec8d":"# **covid-19-in-South-Korea**"}}