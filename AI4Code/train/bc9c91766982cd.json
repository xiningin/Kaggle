{"cell_type":{"45ceb8c9":"code","67a3faaa":"code","8970b9a4":"code","a16f1fb0":"code","c8d0bdd6":"code","050dc02b":"code","af90054e":"code","9bf4d2de":"code","075d8d67":"code","3eba13b5":"code","72117861":"code","6885cce8":"code","b86dec7d":"code","ebad42bd":"code","ad743434":"code","3038f02f":"code","da322ba9":"code","8b5df0a2":"code","8ea736ee":"code","c9b35bc8":"code","c3cbf437":"code","10c49df7":"code","26df0748":"code","2e53b560":"code","b8caccf8":"code","9af8766e":"code","8b93e0b2":"code","d99c4790":"code","c5390efd":"code","c01c306d":"code","564c7625":"markdown","590c0165":"markdown","b2d18777":"markdown","afb712d1":"markdown","79875db1":"markdown","42a9bdd2":"markdown","597a3506":"markdown","2f4e4c21":"markdown","a659733c":"markdown","e2335bf7":"markdown","1d682b14":"markdown","37af35fe":"markdown","72f8915d":"markdown","7471a8d1":"markdown","6ef69bd8":"markdown","e9ceda93":"markdown","37f2af30":"markdown","9623114a":"markdown"},"source":{"45ceb8c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67a3faaa":"import os\nimport sys\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\n\nimport random\nimport math\n\nimport datatable as dtable\nfrom numba import njit\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nimport torch as t\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader\nfrom transformers import AdamW,get_linear_schedule_with_warmup\n\nfrom tqdm import tqdm_notebook as tqdm\nfrom tqdm import trange\n\nfrom  collections import OrderedDict\nimport optuna\nimport joblib\n\nimport scipy.stats\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score\n\nimport xgboost as xgb\n\nprint(t.device('cuda') if t.cuda.is_available() else t.device('cpu'))","8970b9a4":"class BottleNeck_Classifier(nn.Module):\n    \n    def __init__(self,trial):\n        super(BottleNeck_Classifier,self).__init__()\n        \n        num_encoder_layers = trial.suggest_int('num_encoder_layers',1,3)\n        num_classifier_layers = trial.suggest_int('num_classifier_layers',1,3)\n        \n        en_dict = {}#\n        en_dict['bn'] = nn.BatchNorm1d(INPUT_SIZE)\n        \n        en_hidden_size = []\n        en_dropout_rate = []\n        hidden_size_0 = INPUT_SIZE\n        en_hidden_size.append(hidden_size_0)\n        for i in range(num_encoder_layers):\n         \n            hidden_size_1 = trial.suggest_int('hidden_size_en_{}'.format(i),64,128)\n            dropout_1 = trial.suggest_float('dropout_en_{}'.format(i),0.2,0.5)  \n            \n            en_hidden_size.append(hidden_size_1)\n            en_dropout_rate.append(dropout_1)\n            \n            en_dict['linear_{}'.format(i)] = nn.Linear(hidden_size_0,hidden_size_1)\n            en_dict['drop_{}'.format(i)] = nn.Dropout(dropout_1)\n            en_dict['ac_{}'.format(i)] = nn.PReLU()\n            en_dict['nb_{}'.format(i)] = nn.BatchNorm1d(hidden_size_1)\n            \n            hidden_size_0 = hidden_size_1\n        \n        de_dict = {}  #\n\n        hidden_size_0 = en_hidden_size.pop()\n        for i in range(num_encoder_layers):\n            \n            hidden_size_1 = en_hidden_size.pop()\n            dropout_1 = en_dropout_rate.pop()\n            \n            de_dict['linear_{}'.format(i)] = nn.Linear(hidden_size_0,hidden_size_1)\n            if i != num_encoder_layers-1:\n                de_dict['drop_{}'.format(i)] = nn.Dropout(dropout_1)\n                de_dict['ac_{}'.format(i)] = nn.PReLU()\n                de_dict['nb_{}'.format(i)] = nn.BatchNorm1d(hidden_size_1)\n            \n            hidden_size_0 = hidden_size_1\n            \n        cf_dict = {}  #\n        \n        hidden_size_0 = INPUT_SIZE\n        for i in range(num_classifier_layers):\n            \n            hidden_size_1 = trial.suggest_int('hidden_size_cf_{}'.format(i),32,64)\n            dropout_1 = trial.suggest_float('dropout_cf_{}'.format(i),0.2,0.5)\n            \n            cf_dict['linear_{}'.format(i)] = nn.Linear(hidden_size_0,hidden_size_1)\n            cf_dict['drop_{}'.format(i)] = nn.Dropout(dropout_1)\n            cf_dict['ac_{}'.format(i)] = nn.PReLU()\n            cf_dict['nb_{}'.format(i)] = nn.BatchNorm1d(hidden_size_1)\n            \n            hidden_size_0 = hidden_size_1\n            \n        cf_dict['output'] = nn.Linear(hidden_size_0,OUTPUT_SIZE)\n        \n        en_dict = OrderedDict(en_dict.items())\n        de_dict = OrderedDict(de_dict.items())\n        cf_dict = OrderedDict(cf_dict.items())\n        \n        self.encoder = nn.Sequential(en_dict)\n        \n        self.decoder = nn.Sequential(de_dict)\n        \n        self.classifier = nn.Sequential(cf_dict)\n        \n    def forward(self,X,Y=None):\n        \n        encoded = self.encoder(X)\n        decoded = self.decoder(encoded)\n        class_res = self.classifier(decoded)\n        logits = F.softmax(class_res)\n        \n        if Y != None:\n            \n            loss_fct_1 = nn.MSELoss()\n            loss_1 = loss_fct_1(decoded,X)\n            \n            loss_fct_2 = nn.MultiLabelMarginLoss()   \n            loss_2 = loss_fct_2(logits,Y)\n            \n            loss = 0.25 * loss_1 + 10 * loss_2\n            \n            return loss \n        else: \n            return logits\n    ","a16f1fb0":"class Encoded_MLP(nn.Module):\n    \n    def __init__(self,trial):\n        super(Encoded_MLP,self).__init__()\n        \n        num_mlp_layers = trial.suggest_int('num_mlp_layers',1,3)\n        \n        en_study = joblib.load('.\/study_encoder_seed_{}.pkl'.format(SEED))\n        #en_study = joblib.load('..\/input\/mlp-encoded\/study_encoder_seed_{}.pkl'.format(SEED))\n        en_params = en_study.best_trial.params\n       \n        en_dict = {}\n        en_dict['bn'] = nn.BatchNorm1d(INPUT_SIZE)\n        \n        hidden_size_0 = INPUT_SIZE\n        for i in range(en_params['num_encoder_layers']):\n         \n            hidden_size_1 = en_params['hidden_size_en_{}'.format(i)]\n            dropout_1 = en_params['dropout_en_{}'.format(i)]  \n            \n            en_dict['linear_{}'.format(i)] = nn.Linear(hidden_size_0,hidden_size_1)\n            en_dict['drop_{}'.format(i)] = nn.Dropout(dropout_1)\n            en_dict['ac_{}'.format(i)] = nn.PReLU()\n            en_dict['nb_{}'.format(i)] = nn.BatchNorm1d(hidden_size_1)\n            \n            hidden_size_0 = hidden_size_1\n            \n        # --- #\n         \n        mlp_dict = {} \n        \n        hidden_size_0 = INPUT_SIZE + hidden_size_0\n        for i in range(num_mlp_layers):\n            \n            hidden_size_1 = trial.suggest_int('hidden_size_mlp_{}'.format(i),32,64)\n            dropout_1 = trial.suggest_float('dropout_mlp_{}'.format(i),0.2,0.5)\n            \n            mlp_dict['linear_{}'.format(i)] = nn.Linear(hidden_size_0,hidden_size_1)\n            mlp_dict['drop_{}'.format(i)] = nn.Dropout(dropout_1)\n            mlp_dict['ac_{}'.format(i)] = nn.PReLU()\n            mlp_dict['nb_{}'.format(i)] = nn.BatchNorm1d(hidden_size_1)\n            \n            hidden_size_0 = hidden_size_1\n            \n        mlp_dict['output'] = nn.Linear(hidden_size_0,OUTPUT_SIZE)\n        \n        \n        en_dict = OrderedDict(en_dict.items())\n        mlp_dict = OrderedDict(mlp_dict.items())\n        \n        self.encoder = nn.Sequential(en_dict)        \n        self.mlp = nn.Sequential(mlp_dict)\n        \n        checkpoint = t.load('.\/best_encoder_seed_{}.bin'.format(SEED))\n        #checkpoint = t.load('..\/input\/mlp-encoded\/best_encoder_fold_4.bin')\n        self.encoder.load_state_dict(checkpoint['state_dict']) \n\n    def forward(self,X,Y=None,encoder=None):\n        \n        x = self.encoder(X)\n        x = t.cat((X,x),1)\n        x = self.mlp(x)\n        logits = F.softmax(x)\n        \n        if Y != None:\n            loss_fct = nn.MultiLabelMarginLoss()\n            loss = loss_fct(logits,Y)\n            return logits,loss\n        \n        return logits","c8d0bdd6":"class Train_Val_Dataset:\n    def __init__(self, features, targets):\n        self.features = features\n        self.targets = targets\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'X' : t.tensor(self.features[idx, :], dtype=t.float),\n            'Y' : t.tensor(self.targets[idx, :], dtype=t.long)            \n        }\n        return dct\n    \nclass Test_Dataset:\n    def __init__(self, features):\n        self.features = features\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        \n        dct = {\n            'X' : t.tensor(self.features[idx, :], dtype=t.float)\n        }\n        return dct","050dc02b":"# gets the optimizer for the BottleNeck Classifier Model.\n\ndef Get_BC_Optimizer(model):   \n    \n    lr = LEARN_RATE\n    dft_rate = DFT_RATE\n\n    if DISCRIMINATE:\n        optimizer_grouped_parameters = []\n        params = []\n        \n        i = 0\n        \n        encoder_layer_num = math.ceil(len(list(model.encoder.named_parameters()))\/2)\n        decoder_layer_num = math.ceil(len(list(model.decoder.named_parameters()))\/2)\n        classifier_layer_num = math.ceil(len(list(model.classifier.named_parameters()))\/2)\n        \n        layer_num = encoder_layer_num + decoder_layer_num + classifier_layer_num\n        \n        no_decay = ['bias', 'nb']\n        \n        is_completed = True\n        for n,p in list(model.named_parameters()):\n            \n            if (not any(nd in n for nd in no_decay))  and is_completed == False:\n                is_completed =True \n                if i < layer_num:\n                    i = i + 1            \n                params.append(decay)\n                \n            if (not any(nd in n for nd in no_decay)) and is_completed == True:\n                decay = {\n                    'params': [p],\n                    'weight_decay': 0.01,\n                    'lr': lr\/(dft_rate**(layer_num-i))\n                }\n                is_completed = False\n            \n            if (any(nd in n for nd in no_decay)) and is_completed == False:\n                nodecay = {\n                    'params': [p],\n                    'weight_decay': 0.0,\n                    'lr': lr\/(dft_rate**(layer_num-i))\n                }\n                is_completed =True\n                if i < layer_num:\n                    i = i + 1         \n                params.append(decay)\n                params.append(nodecay)\n            \n        optimizer_grouped_parameters.extend(params)\n            \n    else:\n        param_optimizer = list(model.named_parameters())\n\n        optimizer_grouped_parameters = [\n            {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)],\n            'weight_decay': 0.01},\n            {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)], \n             'weight_decay': 0.0}\n          ]\n\n        \n    optimizer = AdamW(optimizer_grouped_parameters,lr=lr, eps=1e-8)\n    return optimizer","af90054e":"# a method designed to optimize parameters using Optuna for the BottleNeck Classifier Model.\n\ndef Objective_BC(trial):\n    \n    if LOCAL_RANK == -1 or NO_CUDA:\n        device = t.device(\"cuda\" if t.cuda.is_available() and not NO_CUDA else \"cpu\")\n        n_gpu = t.cuda.device_count()\n    else:\n        t.cuda.set_device(LOCAL_RANK)\n        device = t.device(\"cuda\",LOCAL_RANK)\n        n_gpu = 1\n        t.distributed.init_process_group(backend='nccl')\n      \n    model = BottleNeck_Classifier(trial) \n    \n    print('BC:')\n    for p in model.named_parameters():\n        print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n    \n    valid_loss_avg_batchs_best_list = []\n    \n    gkf = PurgedGroupTimeSeriesSplit(\n        n_splits=FOLDS,\n        max_train_group_size=MAX_TRAIN_GROUP_SIZE, \n        group_gap=GROUP_GAP,\n        max_test_group_size=MAX_TEST_GROUP_SIZE \n    )\n    splits = list(gkf.split(data_Y, groups=groups))     \n    \n    for fold,(train_ids,val_ids) in enumerate(splits): \n        \n        train_X, train_Y = data_X[train_ids], data_Y[train_ids] \n        val_X, val_Y = data_X[val_ids], data_Y[val_ids]\n          \n        dataset_T = Train_Val_Dataset(train_X, train_Y)\n        dataloader_T = DataLoader(dataset_T,batch_size=TRAIN_BATCH_SIZE,shuffle=False,drop_last=True)\n        \n        dataset_V = Train_Val_Dataset(val_X, val_Y)\n        dataloader_V = DataLoader(dataset_V,batch_size=EVAL_BATCH_SIZE,shuffle=False,drop_last=True)    \n        \n        optimizer = Get_BC_Optimizer(model)\n        num_train_optimization_steps = int(data_X.shape[0] \/ TRAIN_BATCH_SIZE \/ GRADIENT_ACCMULATION_STEPS\n                                          ) * NUM_TRAIN_EPOCHS   \n        scheduler = get_linear_schedule_with_warmup(optimizer, \n                                                num_warmup_steps = 0, \n                                                num_training_steps = num_train_optimization_steps\n                                                )             \n        model.to(device)\n               \n        valid_loss_avg_batchs_best = np.inf\n        \n        for epoch in trange(NUM_TRAIN_EPOCHS,desc='epoch'):\n            \n            model.train()\n\n            train_loss_avg_batchs = 0 \n\n            for batch in tqdm(dataloader_T,desc='Iteration'): \n\n                X , Y = batch['X'].to(device) , batch['Y'].to(device)\n\n                loss = model(X,Y)\n\n                train_loss_avg_batchs = train_loss_avg_batchs + loss.item()\n\n                loss.backward()\n\n                optimizer.step()\n                scheduler.step()\n\n                model.zero_grad()\n\n            train_loss_avg_batchs = train_loss_avg_batchs\/len(dataloader_T)             \n            print('BC -- epoch {} train_loss_avg_batchs: {}'.format(epoch,train_loss_avg_batchs))  \n                \n            model.eval()   \n            \n            val_loss_avg_batchs = 0\n\n            for batch in tqdm(dataloader_V,desc='Iteration'):\n\n                X , Y = batch['X'].to(device) , batch['Y'].to(device)\n\n                with t.no_grad():\n                    loss = model(X,Y)\n\n                val_loss_avg_batchs = val_loss_avg_batchs + loss.item()\n\n            val_loss_avg_batchs = val_loss_avg_batchs\/len(dataloader_V)    \n            print('BC -- epoch {} val_loss_avg_batchs: {}'.format(epoch,val_loss_avg_batchs))\n                \n            if valid_loss_avg_batchs_best > val_loss_avg_batchs:\n                try:\n                    os.remove('.\/best_encoder_fold_{}.bin'.format(fold))\n                except:\n                    pass\n                t.save({'state_dict': model.encoder.state_dict()},'.\/best_encoder_fold_{}.bin'.format(fold))      \n                valid_loss_avg_batchs_best = val_loss_avg_batchs\n                \n        print('BC -- valid_loss_avg_batchs_best_{} : {}'.format(fold,valid_loss_avg_batchs_best))\n        \n        valid_loss_avg_batchs_best_list.append(valid_loss_avg_batchs_best)\n            \n    return np.mean(valid_loss_avg_batchs_best_list)    ","9bf4d2de":"# gets the optimizer for the Encoded MLP Model.\n\ndef Get_Encoded_MLP_Optimizer(model):   \n    \n    lr = LEARN_RATE\n    dft_rate = DFT_RATE\n\n    if DISCRIMINATE:\n        optimizer_grouped_parameters = []\n        params = []\n        \n        i = 0\n        \n        encoder_layer_num = math.ceil(len(list(model.encoder.named_parameters()))\/2)\n        mlp_layer_num = math.ceil(len(list(model.mlp.named_parameters()))\/2)\n        \n        layer_num = encoder_layer_num + mlp_layer_num\n        \n        no_decay = ['bias', 'nb']\n        \n        is_completed = True\n        for n,p in list(model.named_parameters()):\n            \n            if (not any(nd in n for nd in no_decay))  and is_completed == False:\n                is_completed =True \n                if i < layer_num:\n                    i = i + 1            \n                params.append(decay)\n                \n            if (not any(nd in n for nd in no_decay)) and is_completed == True:\n                decay = {\n                    'params': [p],\n                    'weight_decay': 0.01,\n                    'lr': lr\/(dft_rate**(layer_num-i))\n                }\n                is_completed = False\n            \n            if (any(nd in n for nd in no_decay)) and is_completed == False:\n                nodecay = {\n                    'params': [p],\n                    'weight_decay': 0.0,\n                    'lr': lr\/(dft_rate**(layer_num-i))\n                }\n                is_completed =True\n                if i < layer_num:\n                    i = i + 1         \n                params.append(decay)\n                params.append(nodecay)\n            \n        optimizer_grouped_parameters.extend(params)\n            \n    else:\n        param_optimizer = list(model.named_parameters())\n\n        optimizer_grouped_parameters = [\n            {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)],\n            'weight_decay': 0.01},\n            {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)], \n             'weight_decay': 0.0}\n          ]\n\n        \n    optimizer = AdamW(optimizer_grouped_parameters,lr=lr, eps=1e-8)\n    return optimizer","075d8d67":"# a method designed to optimize parameters using Optuna for the Encoded MLP Model.\n\ndef Objective_Encoded_MLP(trial,is_oof=False):\n    \n    if is_oof:            \n        oof_encoded_mlp = np.zeros(Labels.shape[0])\n        \n    if LOCAL_RANK == -1 or NO_CUDA:\n        device = t.device(\"cuda\" if t.cuda.is_available() and not NO_CUDA else \"cpu\")\n        n_gpu = t.cuda.device_count()\n    else:\n        t.cuda.set_device(LOCAL_RANK)\n        device = t.device(\"cuda\",LOCAL_RANK)\n        n_gpu = 1\n        t.distributed.init_process_group(backend='nccl')\n      \n    model = Encoded_MLP(trial) \n    \n    print('Encoded_MLP:')\n    for p in model.named_parameters():\n        print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n    \n    valid_loss_avg_batchs_best_list = []\n    \n    gkf = PurgedGroupTimeSeriesSplit(\n        n_splits=FOLDS,\n        max_train_group_size=MAX_TRAIN_GROUP_SIZE, \n        group_gap=GROUP_GAP,\n        max_test_group_size=MAX_TEST_GROUP_SIZE \n    )\n    splits = list(gkf.split(data_Y, groups=groups))     \n    \n    for fold,(train_ids,val_ids) in enumerate(splits): \n        \n        train_X, train_Y = data_X[train_ids], data_Y[train_ids] \n        val_X, val_Y = data_X[val_ids], data_Y[val_ids]\n          \n        dataset_T = Train_Val_Dataset(train_X, train_Y)\n        dataloader_T = DataLoader(dataset_T,batch_size=TRAIN_BATCH_SIZE,shuffle=False,drop_last=True)\n        \n        dataset_V = Train_Val_Dataset(val_X, val_Y)\n        dataloader_V = DataLoader(dataset_V,batch_size=EVAL_BATCH_SIZE,shuffle=False,drop_last=True)    \n        \n        optimizer = Get_Encoded_MLP_Optimizer(model)\n        num_train_optimization_steps = int(train_X.shape[0] \/ TRAIN_BATCH_SIZE \/ GRADIENT_ACCMULATION_STEPS\n                                          ) * NUM_TRAIN_EPOCHS   \n        scheduler = get_linear_schedule_with_warmup(optimizer, \n                                                num_warmup_steps = 0, \n                                                num_training_steps = num_train_optimization_steps\n                                                )             \n        model.to(device)\n               \n        valid_loss_avg_batchs_best = np.inf\n        \n        param_list = []\n        if IS_GRADUAL_UNFREEZE:  \n            for param in model.parameters():\n                param.requires_grad = False\n                param_list.append(param)\n        \n        for epoch in trange(NUM_TRAIN_EPOCHS,desc='epoch'):\n            \n            model.train()\n\n            train_loss_avg_batchs = 0 \n\n            for step,batch in enumerate(tqdm(dataloader_T,desc='Iteration')): \n\n                if IS_GRADUAL_UNFREEZE and step % (len(dataloader_T)\/\/3) == 0:\n                    if \tlen(param_list) != 0:\n                        param = param_list.pop()\n                        param.requires_grad = True    \n\n                X , Y = batch['X'].to(device) , batch['Y'].to(device)\n\n                logits,loss = model(X,Y)\n\n                loss = loss \/ GRADIENT_ACCMULATION_STEPS\n                \n                train_loss_avg_batchs = train_loss_avg_batchs + loss.item()\n\n                loss.backward()\n\n                if (step + 1) % GRADIENT_ACCMULATION_STEPS == 0: \n                    optimizer.step()\n                    scheduler.step()\n                    model.zero_grad()\n\n            train_loss_avg_batchs = train_loss_avg_batchs\/len(dataloader_T)             \n            print('Encoded_MLP -- epoch {} train_loss_avg_batchs: {}'.format(epoch,train_loss_avg_batchs))  \n                \n            model.eval()   \n            \n            val_loss_avg_batchs = 0\n\n            for batch in tqdm(dataloader_V,desc='Iteration'):\n\n                X , Y = batch['X'].to(device) , batch['Y'].to(device)\n\n                with t.no_grad():\n                    logits,loss = model(X,Y)\n\n                val_loss_avg_batchs = val_loss_avg_batchs + loss.item()\n\n            val_loss_avg_batchs = val_loss_avg_batchs\/len(dataloader_V)    \n            print('Encoded_MLP -- epoch {} val_loss_avg_batchs: {}'.format(epoch,val_loss_avg_batchs))\n                \n                \n            if valid_loss_avg_batchs_best > val_loss_avg_batchs:\n                try:\n                    os.remove('.\/best_encoded_mlp_fold_{}.bin'.format(fold))\n                except:\n                    pass\n                t.save({'state_dict': model.state_dict()},'.\/best_encoded_mlp_fold_{}.bin'.format(fold))      \n                valid_loss_avg_batchs_best = val_loss_avg_batchs\n        \n        print('Encoded_MLP -- valid_loss_avg_batchs_best_{} : {}'.format(fold,valid_loss_avg_batchs_best))\n        \n        valid_loss_avg_batchs_best_list.append(valid_loss_avg_batchs_best)\n        \n        if is_oof:\n            \n            checkpoint = t.load('.\/best_encoded_mlp_fold_{}.bin'.format(fold))\n            model = Encoded_MLP(trial)         \n            model.load_state_dict(checkpoint['state_dict']) \n                   \n            oof_val_X = t.tensor(val_X, dtype=t.float)\n        \n            logits = model(oof_val_X).detach().numpy()\n            \n            oof_encoded_mlp[val_ids] = np.median(logits) \n            \n            \n    if is_oof:\n        return oof_encoded_mlp\n    \n    return np.mean(valid_loss_avg_batchs_best_list)    ","3eba13b5":"# a method designed to optimize parameters using Optuna for the XGBoost Model.\n\ndef Objective_XGBoost(trial):\n \n    params = {\n        'n_estimators': trial.suggest_int('n_estimators', 350, 1000),\n        'max_depth': trial.suggest_int('max_depth', 3, 10),\n        'learning_rate': trial.suggest_uniform('learning_rate', 0.01, 0.10),\n        'subsample': trial.suggest_uniform('subsample', 0.50, 0.90),\n        'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.50, 0.90),\n        'gamma': trial.suggest_int('gamma', 0, 20),\n        'tree_method': 'gpu_hist'  \n    }\n    \n    scaler = StandardScaler()\n    clf = xgb.XGBClassifier(**params)\n\n    pipe = Pipeline(steps=[('scaler', scaler),('xgb', clf)])\n\n    gkf = PurgedGroupTimeSeriesSplit(\n        n_splits=FOLDS,\n        max_train_group_size=MAX_TRAIN_GROUP_SIZE, \n        group_gap=GROUP_GAP,\n        max_test_group_size=MAX_TEST_GROUP_SIZE \n    )\n    splits = list(gkf.split(Labels, groups=groups))     \n    \n    aucs = []\n    for fold, (train_ids, val_ids) in enumerate(splits):\n        \n        train_X, train_Y = data_X[train_ids], Labels[train_ids] \n        val_X, val_Y = data_X[val_ids], Labels[val_ids]\n        \n        _ = pipe.fit(train_X, train_Y)\n        pred = pipe.predict(val_X)\n        aucs.append(roc_auc_score(val_Y, pred))\n    \n    mean_auc = np.mean(aucs)\n    \n    print('XGB -- The Mean AUC : {}'.format(mean_auc))\n    \n    return mean_auc","72117861":"# Memory saving function credit to https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\n\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.\n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    for col in df.columns:\n        col_type = df[col].dtype.name\n\n        if col_type not in ['object', 'category', 'datetime64[ns, UTC]']:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n\n    return df","6885cce8":"# Optimise speed of filling-nan function credit to https:\/\/www.kaggle.com\/gogo827jz\/optimise-speed-of-filling-nan-function\n\n@njit\ndef fillna_npwhere_njit(array, values):\n    if np.isnan(array.sum()):\n        array = np.where(np.isnan(array), values, array)\n    return array","b86dec7d":"# forward-filling function of credit to https:\/\/www.kaggle.com\/gogo827jz\/optimise-speed-of-filling-nan-function\n\ndef for_loop_ffill(df,method):\n    matrix = df.values\n    tmp = np.zeros(matrix.shape[1])\n    for i in range(matrix.shape[0]):\n        matrix[i] = method(matrix[i], tmp)\n        tmp = matrix[i]\n    return pd.DataFrame(matrix,columns = df.columns)","ebad42bd":"# Seed setting function credit to https:\/\/www.kaggle.com\/gogo827jz\/optimise-speed-of-filling-nan-function\n\ndef seed_everything(seed_value):\n    random.seed(seed_value)\n    np.random.seed(seed_value)\n    t.manual_seed(seed_value)\n    os.environ['PYTHONHASHSEED'] = str(seed_value)\n    \n    if t.cuda.is_available(): \n        t.cuda.manual_seed(seed_value)\n        t.cuda.manual_seed_all(seed_value)\n        t.backends.cudnn.deterministic = True\n        t.backends.cudnn.benchmark = False","ad743434":"# gussian noise function credit to https:\/\/discuss.pytorch.org\/t\/writing-a-simple-gaussian-noise-layer-in-pytorch\/469\n\ndef gaussian(ins, is_training, mean, stddev):\n    if is_training:\n        noise = Variable(ins.data.new(ins.size()).normal_(mean, stddev))\n        return ins + noise\n    return ins","3038f02f":"# cross validation method based on time series credit to https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\nclass PurgedGroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Allows for a gap in groups to avoid potentially leaking info from\n    train into test if the model has windowed or lag features.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_group_size : int, default=Inf\n        Maximum group size for a single training set.\n    group_gap : int, default=None\n        Gap between train and test\n    max_test_group_size : int, default=Inf\n        We discard this number of groups from the end of each train split\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_group_size=np.inf,\n                 max_test_group_size=np.inf,\n                 group_gap=None,\n                 verbose=False\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_group_size = max_train_group_size\n        self.group_gap = group_gap\n        self.max_test_group_size = max_test_group_size\n        self.verbose = verbose\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        group_gap = self.group_gap\n        max_test_group_size = self.max_test_group_size\n        max_train_group_size = self.max_train_group_size\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n\n        group_test_size = min(n_groups \/\/ n_folds, max_test_group_size)\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n\n            group_st = max(0, group_test_start - group_gap - max_train_group_size)\n            for train_group_idx in unique_groups[group_st:(group_test_start - group_gap)]:\n                train_array_tmp = group_dict[train_group_idx]\n                \n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n\n            train_end = train_array.size\n \n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n\n            test_array  = test_array[group_gap:]\n            \n            \n            if self.verbose > 0:\n                    pass\n                    \n            yield [int(i) for i in train_array], [int(i) for i in test_array]","da322ba9":"# a faster method of calculating utility score credit to https:\/\/www.kaggle.com\/gogo827jz\/jane-street-super-fast-utility-score-function\n\n@njit(fastmath = True)\ndef utility_score_numba(date, weight, resp, action):\n    Pi = np.bincount(date, weight * resp * action)\n    if np.sum(Pi ** 2) == 0:\n        return 0\n    t = np.sum(Pi) \/ np.sqrt(np.sum(Pi ** 2)) * np.sqrt(250 \/ len(Pi))\n    u = min(max(t, 0), 6) * np.sum(Pi)\n    return u","8b5df0a2":"# optimal threshold calculation method for classification model prediction credit to https:\/\/www.kaggle.com\/gogo827jz\/jane-street-super-fast-utility-score-function\n\n#@njit(fastmath = True)\ndef decision_threshold_optimisation(preds, date, weight, resp, low = 0, high = 1, bins = 100, eps = 1):\n    opt_threshold = low\n    gap = (high - low) \/ bins\n    action = np.where(preds >= opt_threshold, 1, 0)\n    opt_utility = utility_score_numba(date, weight, resp, action)\n    \n    for threshold in np.arange(low, high, gap):\n        action = np.where(preds >= threshold, 1, 0)\n        utility = utility_score_numba(date, weight, resp, action)\n        print('threshold:{} utility:{}'.format(threshold,utility))\n        if utility - opt_utility > eps:\n            opt_threshold = threshold\n            opt_utility = utility\n    return opt_threshold, opt_utility","8ea736ee":"opt_threshold,opt_utility","c9b35bc8":"# calculate JS score credit to https:\/\/blog.csdn.net\/blmoistawinde\/article\/details\/84329103\n\ndef JS_divergence(p,q):\n    M=(p+q)\/2\n    return 0.5*scipy.stats.entropy(p, M)+0.5*scipy.stats.entropy(q, M)","c3cbf437":"# method of setting model weights (only two models) credit to https:\/\/www.kaggle.com\/gogo827jz\/blending-nn-and-lgbm-rf\n\ndef weight_opt(oof_encoded_mlp, oof_xgb, y_true):\n    weight_encoded_mlp = np.inf\n    best_crps = np.inf\n\n    \n    for i in np.arange(0, 1.01, 0.01):\n\n        crps_blend = JS_divergence(i * oof_encoded_mlp + (1-i) * oof_xgb, y_true)\n\n        print('crps_blend: {}'.format(crps_blend))\n        \n        if crps_blend < best_crps:\n            best_crps = crps_blend\n            weight_encoded_mlp = round(i, 2)\n            \n    print('-'*36)\n    print('Best weight for Encoded_MLP: ', weight_encoded_mlp)\n    print('Best weight for XGBoost: ', round(1-weight_encoded_mlp, 2))\n    print('Best mean crps (Blend): ', round(best_crps, 6))\n    \n    return weight_encoded_mlp, round(1-weight_encoded_mlp, 2)","10c49df7":"# faster missing value filling method (for test submission) credit to https:\/\/www.kaggle.com\/gogo827jz\/jane-street-ffill-xgboost-purgedtimeseriescv\n\n@njit\ndef fast_fillna(array, values):\n    if np.isnan(array.sum()):\n        array = np.where(np.isnan(array), values, array)\n    return array","26df0748":"train_data = (\n    dtable.fread('..\/input\/jane-street-market-prediction\/train.csv')\n          .to_pandas()\n          .query('date > 85')\n          .query('weight > 0')\n          .pipe(for_loop_ffill,fillna_npwhere_njit)\n          .pipe(reduce_mem_usage)\n)","2e53b560":"feature_names = train_data.columns[train_data.columns.str.contains('feature')]\n\ngroups = train_data['date'].astype(np.int64).values\nweight = train_data['weight'].astype(np.float64).values\nresp = train_data['resp'].values\n\ndata_X = train_data[feature_names].values\ndata_Y = np.stack([(train_data[c]>0).astype('int') for c in ['resp_1','resp_2','resp_3','resp_4','resp']]).T\n\nLabels = ((train_data['weight'].values * train_data['resp'].values) > 0).astype('int')\n","b8caccf8":"del train_data","9af8766e":"INPUT_SIZE = data_X.shape[-1]\nOUTPUT_SIZE = data_Y.shape[-1]\n\nDROPOUT_RATE = 0.2\nHIDDEN_SIZE_1 = 64\nHIDDEN_SIZE_2 = 32\n\nLOCAL_RANK = -1\nNO_CUDA = False\nLEARN_RATE = 5e-5\nDFT_RATE = 1.2\nTRAIN_BATCH_SIZE = 1200\nEVAL_BATCH_SIZE = 1200\nNUM_TRAIN_EPOCHS = 1 #\n\nDISCRIMINATE = True\n\nIS_GRADUAL_UNFREEZE = True\n\nGRADIENT_ACCMULATION_STEPS = 3 #\nTRAIN_BATCH_SIZE = TRAIN_BATCH_SIZE \/\/ GRADIENT_ACCMULATION_STEPS\n\nFOLDS = 5\nGROUP_GAP = 31\nMAX_TRAIN_GROUP_SIZE = 150\nMAX_TEST_GROUP_SIZE = 60\n\nIS_TRAIN = False\n\nSEED = 123\n\nIS_OOF = True\n","8b93e0b2":"if IS_TRAIN:\n\n    seed_everything(SEED)\n\n    study=optuna.create_study(direction=\"minimize\")\n    study.optimize(Objective_BC,n_trials=1)\n\n    joblib.dump(study,'.\/study_encoder_seed_{}.pkl'.format(SEED))\n\n    trial = study.best_trial\n    print(\"  Value: \", trial.value)\n    print(\"  Params: \")\n    for key, value in trial.params.items():\n        print(\"    {}: {}\".format(key, value))\n\n    if LOCAL_RANK == -1 or NO_CUDA:\n        device = t.device(\"cuda\" if t.cuda.is_available() and not NO_CUDA else \"cpu\")\n        n_gpu = t.cuda.device_count()\n    else:\n        t.cuda.set_device(LOCAL_RANK)\n        device = t.device(\"cuda\",LOCAL_RANK)\n        n_gpu = 1\n        t.distributed.init_process_group(backend='nccl')\n\n    BCmodel = BottleNeck_Classifier(trial)  \n\n    dataset_T = Train_Val_Dataset(data_X, data_Y)\n    dataloader_T = DataLoader(dataset_T,batch_size=TRAIN_BATCH_SIZE,shuffle=False,drop_last=True)\n\n    optimizer = Get_BC_Optimizer(BCmodel)\n    num_train_optimization_steps = int(data_X.shape[0] \/ TRAIN_BATCH_SIZE\/ GRADIENT_ACCMULATION_STEPS\n                                      ) * NUM_TRAIN_EPOCHS   \n    scheduler = get_linear_schedule_with_warmup(optimizer, \n                                                num_warmup_steps = 0, \n                                                num_training_steps = num_train_optimization_steps\n                                                )     \n    BCmodel.to(device)\n\n    train_loss_avg_batchs_best = np.inf\n\n    encoder = None\n\n    for epoch in trange(NUM_TRAIN_EPOCHS,desc='epoch'):\n\n        BCmodel.train()\n\n        train_loss_avg_batchs = 0   \n\n        for batch in tqdm(dataloader_T,desc='Iteration'): \n\n            X , Y = batch['X'].to(device) , batch['Y'].to(device)\n\n            loss = BCmodel(X,Y)\n\n            train_loss_avg_batchs = train_loss_avg_batchs + loss.item()\n\n            loss.backward()\n\n            optimizer.step()\n            scheduler.step()\n\n            BCmodel.zero_grad()\n\n        train_loss_avg_batchs = train_loss_avg_batchs\/len(dataloader_T)     \n        print('T - BC -- epoch {} train_loss_avg_batchs: {}'.format(epoch,train_loss_avg_batchs))  \n\n        if train_loss_avg_batchs_best > train_loss_avg_batchs:\n            try:\n                os.remove('.\/best_encoder_seed_{}.bin'.format(SEED))\n            except:\n                pass\n\n            t.save({'state_dict': BCmodel.encoder.state_dict()},'.\/best_encoder_seed_{}.bin'.format(SEED))  \n            \n            train_loss_avg_batchs_best = train_loss_avg_batchs\n\n    print('T - BC -- train_loss_avg_batchs_best : {}'.format(train_loss_avg_batchs_best)) \n  ","d99c4790":"if IS_TRAIN:\n\n    seed_everything(SEED)\n\n    study=optuna.create_study(direction=\"minimize\")\n    study.optimize(Objective_Encoded_MLP,n_trials=1)\n\n    joblib.dump(study,'.\/study_encoded_mlp_seed_{}.pkl'.format(SEED))\n\n    trial = study.best_trial\n    print(\"  Value: \", trial.value)\n    print(\"  Params: \")\n    for key, value in trial.params.items():\n        print(\"    {}: {}\".format(key, value))\n\n\n    if LOCAL_RANK == -1 or NO_CUDA:\n        device = t.device(\"cuda\" if t.cuda.is_available() and not NO_CUDA else \"cpu\")\n        n_gpu = t.cuda.device_count()\n    else:\n        t.cuda.set_device(LOCAL_RANK)\n        device = t.device(\"cuda\",LOCAL_RANK)\n        n_gpu = 1\n        t.distributed.init_process_group(backend='nccl')\n\n    MLPmodel = Encoded_MLP(trial)  \n    \n    # --- #\n\n    oof_encoded_mlp = Objective_Encoded_MLP(trial,IS_OOF)  \n    np.save('oof_encoded_mlp_{}.npy'.format(SEED),oof_encoded_mlp)\n    \n    # --- #\n    \n    dataset_T = Train_Val_Dataset(data_X, data_Y)\n    dataloader_T = DataLoader(dataset_T,batch_size=TRAIN_BATCH_SIZE,shuffle=False,drop_last=True)\n\n    optimizer = Get_Encoded_MLP_Optimizer(MLPmodel)\n    num_train_optimization_steps = int(data_X.shape[0] \/ TRAIN_BATCH_SIZE\/ GRADIENT_ACCMULATION_STEPS\n                                      ) * NUM_TRAIN_EPOCHS   \n    scheduler = get_linear_schedule_with_warmup(optimizer, \n                                                num_warmup_steps = 0, \n                                                num_training_steps = num_train_optimization_steps\n                                                )     \n    MLPmodel.to(device)\n\n    param_list = []\n    if IS_GRADUAL_UNFREEZE:  \n        for param in MLPmodel.parameters():\n            param.requires_grad = False\n            param_list.append(param)\n            \n    train_loss_avg_batchs_best = np.inf\n    \n    for epoch in trange(NUM_TRAIN_EPOCHS,desc='epoch'):\n\n        MLPmodel.train()\n\n        train_loss_avg_batchs = 0 \n\n        for step,batch in enumerate(tqdm(dataloader_T,desc='Iteration')):\n                                    \n            if IS_GRADUAL_UNFREEZE and step % (len(dataloader_T)\/\/3) == 0:\n                if \tlen(param_list) != 0:\n                    param = param_list.pop()\n                    param.requires_grad = True  \n                                    \n            X , Y = batch['X'].to(device) , batch['Y'].to(device)\n\n            logits,loss = MLPmodel(X,Y)\n\n            loss = loss \/ GRADIENT_ACCMULATION_STEPS                        \n                                    \n            train_loss_avg_batchs = train_loss_avg_batchs + loss.item()\n\n            loss.backward()\n                                    \n            if (step + 1) % GRADIENT_ACCMULATION_STEPS == 0:                        \n                optimizer.step()\n                scheduler.step()\n                MLPmodel.zero_grad()\n\n        train_loss_avg_batchs = train_loss_avg_batchs\/len(dataloader_T)     \n        print('T - MLP -- epoch {} train_loss_avg_batchs: {}'.format(epoch,train_loss_avg_batchs))  \n\n        if train_loss_avg_batchs_best > train_loss_avg_batchs:\n            try:\n                os.remove('.\/best_encoded_mlp_seed_{}.bin'.format(SEED))\n            except:\n                pass\n\n            t.save({'state_dict': MLPmodel.state_dict()},'.\/best_encoded_mlp_seed_{}.bin'.format(SEED))  \n            train_loss_avg_batchs_best = train_loss_avg_batchs\n\n    print('T - MLP -- train_loss_avg_batchs_best : {}'.format(train_loss_avg_batchs_best))\n    ","c5390efd":"if IS_TRAIN:\n\n    study = optuna.create_study(direction=\"maximize\")\n    study.optimize(Objective_XGBoost, n_trials=1) # 60\n\n    trial = study.best_trial\n\n    print(\"  Params: \")\n    for key, value in trial.params.items():\n        print(\"    {}: {}\".format(key, value))\n    \n    best_params = trial.params\n    best_params['tree_method'] = 'gpu_hist' \n    \n    scaler = StandardScaler()\n    clf = xgb.XGBClassifier(**best_params)\n\n    pipe_xgb = Pipeline(steps=[('scaler', scaler),('xgb', clf)])\n    \n    # --- #\n    \n    oof_xgb = np.zeros(Labels.shape[0])\n    \n    gkf = PurgedGroupTimeSeriesSplit(\n        n_splits=FOLDS,\n        max_train_group_size=MAX_TRAIN_GROUP_SIZE, \n        group_gap=GROUP_GAP,\n        max_test_group_size=MAX_TEST_GROUP_SIZE \n    )\n    splits = list(gkf.split(Labels, groups=groups))     \n      \n    for fold,(train_ids,val_ids) in enumerate(splits): \n\n        train_X, train_Y = data_X[train_ids], Labels[train_ids] \n        val_X, val_Y = data_X[val_ids], Labels[val_ids]\n\n        pipe_xgb.fit(train_X, train_Y)\n\n        oof_xgb[val_ids] = pipe_xgb.predict_proba(val_X)[:,1]\n    \n    np.save('oof_xgb_{}.npy'.format(SEED),oof_xgb)\n    \n    # --- #\n    \n    pipe_xgb.fit(data_X,Labels)\n    \n    joblib.dump(pipe_xgb,\".\/xgboost_seed_{}.joblib.dat\".format(SEED))","c01c306d":"if not IS_TRAIN:\n    \n    seed_everything(SEED)\n       \n    study = joblib.load('.\/study_encoded_mlp_seed_{}.pkl'.format(SEED))\n    trial = study.best_trial\n\n    checkpoint = t.load('.\/best_encoded_mlp_seed_{}.bin'.format(SEED))\n    MLPmodel = Encoded_MLP(trial)          \n    MLPmodel.load_state_dict(checkpoint['state_dict']) \n\n    xgboost = joblib.load(\".\/xgboost_seed_{}.joblib.dat\".format(SEED))\n    \n    oof_encoded_mlp = np.load('oof_encoded_mlp_{}.npy'.format(SEED))\n    oof_xgb = np.load('oof_xgb_{}.npy'.format(SEED))\n    \n    weight_encoded_mlp, weight_xgb = weight_opt(oof_encoded_mlp,oof_xgb,Labels)\n    pred = weight_encoded_mlp * oof_encoded_mlp + weight_xgb * oof_xgb\n    opt_threshold,opt_utility = decision_threshold_optimisation(pred, groups, weight,Labels,pred.min(),pred.max(),1000, 1)\n    \n    print('Optimal Decision Threshold:', opt_threshold)\n    print('Optimal Utility Score:', opt_utility)\n    \n    import janestreet\n    janestreet.competition.make_env.__called__ = False\n    env = janestreet.make_env()\n    env_iter = env.iter_test()\n    \n    opt_th = opt_threshold\n    tmp = np.zeros(len(feature_names))\n    for (test_df, pred_df) in tqdm(env_iter):        \n        if test_df['weight'].item() > 0:\n            \n            x_tt = test_df.loc[:, feature_names].values\n            x_tt[0, :] = fast_fillna(x_tt[0, :], tmp)\n            tmp = x_tt[0, :]\n            \n            logits1 = MLPmodel(x_tt)\n            logits2 = xgboost.predict_proba(x_tt)\n            \n            pred = weight_encoded_mlp * logits1 + weight_xgb * logits2\n            pred_df.action = np.where(pred > opt_th, 1, 0).astype(int)\n            \n        else:\n            pred_df.action = 0\n            \n        env.predict(pred_df)\n    ","564c7625":"## Macro definition","590c0165":"In the last seven days, I have been reading some notebooks of this competition and gradually built up my own ideas for solving problems. In order to give full play to my creativity, I chose to translate the currently popular model code into Pytorch. For clarity, I will also add some explanations.\n\nIn these notebooks, some people inspired me a lot. Here are some of their notebooks:\n* https:\/\/www.kaggle.com\/snippsy\/bottleneck-encoder-mlp-keras-tuner\/log#Submission\n* https:\/\/www.kaggle.com\/gogo827jz\/jane-street-super-fast-utility-score-function\n* https:\/\/www.kaggle.com\/aimind\/bottleneck-encoder-mlp-keras-tuner-8601c5\n* https:\/\/www.kaggle.com\/marketneutral\/purged-time-series-cv-xgboost-optuna#Optuna-Hyperparam-Search-for-XGBoost\n","b2d18777":"# Execute","afb712d1":"## DataSet","79875db1":"# Function implementation","42a9bdd2":"## Training of BottleNeck Classifier Model","597a3506":"A data class, used to load data to the pre-set device (CPU\/GPU) for facilitating model training.","2f4e4c21":"## Data pre-processing","a659733c":"# Environment configuration","e2335bf7":"After the above encoder is trained, it needs to be spliced \u200b\u200bto a classifier to complete the classification task. Here we choose a multilayer perceptron, the model obtained after stitching is also one of our final models (there is also an XGBoost model).","1d682b14":"## Encoded MultiLayer Perceptron","37af35fe":"# Training of XGBoost Model","72f8915d":"# Training of Encoded MLP Model","7471a8d1":"# Class definition","6ef69bd8":"## BottleNeck Classifier","e9ceda93":"The modifications are:\n\n* combine slanted triangular learning rate, discriminative fine-tuning, accumulation of gradients, gradual freezing and other methods to prevent catastrophic forgetting (after loading the trained Encoder weight).\n* save running memory through type conversion.\n* use forward filling method to deal with missing, making it more in line with the characteristics of time series.\n* fusion of Encoded MLP model and XGBoost model.\n* calculate the optimal weights of the two models.\n* assign an optimal threshold to the predicted probability of the fused model for classification tasks.\n* the Optuna framework was used to optimize the hyperparameters of the model, such as the number of layers in the model and the number of neurons in the hidden layer.\n\n","37f2af30":"With the help of supervised learning, an encoder with more effective classification information is obtained. Its function is somewhat similar to the word embedding of natural language processing. At the same time, it also participates in the training of noise reduction autoencoders, so it can be regarded as Feature dimensionality reduction operation. For more details about the model, please see [this article](https:\/\/www.semanticscholar.org\/paper\/Deep-Bottleneck-Classifiers-in-Supervised-Dimension-Parviainen\/fb86483f7573f6430fe4597432b0cd3e34b16e43).","9623114a":"## Test to submit"}}