{"cell_type":{"4cb2fab6":"code","c3d0a5be":"code","8ba37249":"code","70489d33":"code","76ed8d29":"code","2cbd447a":"code","81d94f21":"code","c776321c":"code","e9c586a8":"markdown","be4f9fc1":"markdown"},"source":{"4cb2fab6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport datetime\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nREND = 'kaggle'","c3d0a5be":"def le_dados_caso(arquivo, estado):\n    df_br = pd.read_csv(arquivo)\n    estado = estado.upper()\n\n    # converte a coluna de data para um formato compreensivel\n    df_br['date'] = pd.to_datetime(df_br['date'])\n\n    # caso necessario, preenche as colunas de confirmados e mortos com 0 quando nao ha dados\n    #df_br.fillna({'confirmed':0, 'deaths':0, 'death_rate':0, 'confirmed_per_100k_inhabitants':0}, inplace=True)\n\n    # filtra pelo estado desejado\n    df_estadual = df_br.loc[(df_br.state==estado) & (df_br.place_type=='state')].sort_values(by='order_for_place')\n    \n    df_estadual.drop(columns=['city', 'place_type', 'is_last', 'order_for_place'], inplace=True)\n\n    # reseta os indices so pra ficar bonitinho\n    df_estadual.reset_index(drop=True, inplace=True)\n    \n    if df_estadual.isnull().values.any():\n        print('CUIDADO: o resultado pode conter NA ou NaN')\n    \n    return df_estadual","8ba37249":"def le_dados_obito(arquivo, estado):\n    df_br = pd.read_csv(arquivo)\n    estado = estado.upper()\n\n    # converte a coluna de data para um formato compreensivel\n    df_br['date'] = pd.to_datetime(df_br['date'])\n\n    # filtra pelo estado desejado\n    df_estadual = df_br.query(\"state==@estado\").sort_values(by='date')\n\n    # reseta os indices so pra ficar bonitinho\n    df_estadual.reset_index(drop=True, inplace=True)\n    \n    if df_estadual.isnull().values.any():\n        print('CUIDADO: o resultado pode conter NA ou NaN')\n\n    return df_estadual","70489d33":"arq_caso = '\/kaggle\/input\/covid19-brasilio\/caso.csv'\narq_obito = '\/kaggle\/input\/covid19-brasilio\/obito_cartorio.csv' \nestado = 'SP'\ndf_caso = le_dados_caso(arq_caso, estado)\ndf_obito = le_dados_obito(arq_obito, estado)\n\ndf_caso.tail()","76ed8d29":"df_obito.tail()","2cbd447a":"df_obito.columns","81d94f21":"date_ini = datetime.date(2020,1,1)\ndays_discard = 14\ndate_fin = df_caso['date'].max() - datetime.timedelta(days=days_discard)\n\nfig0 = make_subplots(rows=1, cols=3, subplot_titles=['insufici\u00eancia respirat\u00f3ria', 'pneumonia', 'Covid-19'])\n\nfig0.add_trace(\n    go.Scatter(x=df_obito['date'], y=df_obito['deaths_respiratory_failure_2019'],\n              mode=\"lines\", line=go.scatter.Line(color=\"blue\")),\n    row=1, col=1)\nfig0.add_trace(\n    go.Scatter(x=df_obito['date'], y=df_obito['deaths_respiratory_failure_2020'],\n              mode=\"lines\", line=go.scatter.Line(color=\"red\")),\n    row=1, col=1)\n\nfig0.add_trace(\n    go.Scatter(x=df_obito['date'], y=df_obito['deaths_pneumonia_2019'],\n              mode=\"lines\", line=go.scatter.Line(color=\"blue\")),\n    row=1, col=2)\nfig0.add_trace(\n    go.Scatter(x=df_obito['date'], y=df_obito['deaths_pneumonia_2020'],\n              mode=\"lines\", line=go.scatter.Line(color=\"red\")),\n    row=1, col=2)\n\nfig0.add_trace(\n    go.Scatter(x=df_obito['date'], y=df_obito['deaths_covid19'],\n              mode=\"lines\", line=go.scatter.Line(color=\"red\")),\n    row=1, col=3)\n\nfig0.update_xaxes(range=[date_ini, date_fin], row=1, col=1)\nfig0.update_xaxes(range=[date_ini, date_fin], row=1, col=2)\nfig0.update_xaxes(range=[date_ini, date_fin], row=1, col=3)\n\ntit0 = '\u00d3bitos registrados em cart\u00f3rio 2019 vs 2020 (at\u00e9 ' + str(days_discard) + ' dias atr\u00e1s) - Estado: ' + estado.upper()\nfig0.update_layout(title_text=tit0)\n\nfig0.show(renderer=REND)\n","c776321c":"fig1 = go.Figure()\n\nfig1.add_trace(go.Scatter(x=df_caso['date'], y=df_caso['deaths'], mode='markers', name='sec saude'))\nfig1.add_trace(go.Scatter(x=df_obito['date'], y=df_obito['deaths_covid19'], mode='markers', name='cartorio'))\n\nfig1.update_layout(xaxis_range=[datetime.date(2020,3,1), df_caso['date'].max()])\n\ntit1 = '\u00d3bitos segundo fonte (estado: ' + estado.upper() + ')'\nfig1.update_layout(title_text=tit1)\n\nfig1.show(renderer=REND)","e9c586a8":"## Este notebook tem exemplos de como importar e usar os datasets do projeto Brasil.IO relacionados \u00e0 pandemia do Covid-19 no Brasil.\n## Desculpem a bagun\u00e7a, mas ele est\u00e1 em processo de atualiza\u00e7\u00e3o constante para importar os dados de \u00f3bitos registrados em cart\u00f3rio.\n(\u00faltima atualiza\u00e7\u00e3o: 2020-06-12)","be4f9fc1":"Testes com o dataset de \u00f3bitos de cart\u00f3rios"}}