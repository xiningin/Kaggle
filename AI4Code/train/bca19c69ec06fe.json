{"cell_type":{"fd122347":"code","76533f6d":"code","246d52b2":"code","9b377918":"code","b555ecf5":"code","29b82971":"code","1bdabda5":"code","827c89fc":"code","1cba08e3":"code","f25113d1":"code","aa7dff28":"code","23e58da0":"code","7f802fcb":"code","31763687":"code","392cef6a":"code","86f4eb1a":"code","2a815b32":"code","46f98993":"code","2b238883":"code","a1d578c9":"code","e920f9ef":"code","0868b97f":"code","b29e48ca":"code","9e10f9fb":"code","f8fee020":"code","035cdbe7":"code","0b6af1f6":"code","0e40a85d":"code","c541ae69":"code","40960446":"code","dc5ba2ea":"code","d87e480b":"code","d577d660":"code","a0ea3997":"code","0de2524e":"code","9159d920":"code","5627cab9":"markdown","48df5fd5":"markdown","b3b7d3aa":"markdown","5a4fabfd":"markdown","c291d19b":"markdown","8835f2ee":"markdown"},"source":{"fd122347":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","76533f6d":"from stop_words import get_stop_words\ndef print_scores(y_valid, y_pred):\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0447\u0435\u0442\u044b\u0440\u0451\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u0434\u043b\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438.\n    \n    y_valid --- \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    y_pred --- \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    '''\n    print('MSE:', mean_squared_error(y_valid, y_pred))\n    print('MAE:', mean_absolute_error(y_valid, y_pred))\n    print('MedAE:', median_absolute_error(y_valid, y_pred))\n    print('R2:', r2_score(y_valid, y_pred))","246d52b2":"from sklearn.model_selection import cross_val_score, StratifiedKFold, GridSearchCV","9b377918":"import warnings\nwarnings.filterwarnings('ignore')\nimport os\nimport re\nimport numpy as np\nimport pandas as pd\nimport matplotlib\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.metrics import roc_auc_score, roc_curve, confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.datasets import fetch_20newsgroups, load_files\nfrom sklearn.model_selection import KFold\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.pipeline import Pipeline\n\n\nimport pandas as pd\nfrom scipy.sparse import csr_matrix\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","b555ecf5":"df=pd.read_csv(\"\/kaggle\/input\/vodafone-subset-1.csv\")\ndf.head()","29b82971":"df1=df.drop('target', axis = 1)\n#.select_dtypes(exclude=['object'])\ntarget=df[['target']]","1bdabda5":"df1= df[['SCORING', 'AVG_ARPU', 'ROUM', 'calls_count_in_weekdays', 'DATA_VOLUME_WEEKDAYS', 'car','uklon', 'gender','Oblast_post_HOME','Raion_post_HOME','City_post_HOME','banks_sms_count','telegram_count','linkedin_count','skype_count','sim_count','intagram_count','whatsapp_volume']]\ndf1.rename(columns={'SCORING': '\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0434\u043e\u0445\u043e\u0434\u0430', \n                     'AVG_ARPU': '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0443\u0441\u043b\u0443\u0433',\n                     'ROUM': '\u0424\u0430\u043a\u0442 \u043f\u043e\u0435\u0437\u0434\u043e\u043a \u0437\u0430\u0433\u0440\u0430\u043d\u0438\u0446\u0443',\n                     'car': '\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u043c\u0430\u0448\u0438\u043d\u044b',\n                     'calls_count_in_weekdays': '\u041a\u043e\u043b-\u0432\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0432 \u0431\u0443\u0434\u043d\u0438\u0435',\n                     'DATA_VOLUME_WEEKDAYS': '\u041a\u043e\u043b-\u0432\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u0444\u0438\u043a\u0430',\n                     'uklon':'\u0438\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0430\u043a\u0441\u0438 \u0423\u041a\u041b\u041e\u041d',\n                     'gender':'\u043f\u043e\u043b',\n                   'Oblast_post_HOME':'\u041e\u0431\u043b\u0430\u0441\u0442\u044c_\u0434\u043e\u043c',\n                   'Raion_post_HOME':'\u0420\u0430\u0439\u043e\u043d_\u0434\u043e\u043c',\n                    'City_post_HOME':'\u0413\u043e\u0440\u043e\u0434_\u0434\u043e\u043c',\n                    'banks_sms_count':'\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0432\u0441\u0435\u0445 \u0431\u0430\u043d\u043a\u043e\u0432',\n                    'telegram_count':'\u043a\u043e\u043b-\u0432\u043e \u0442\u0440\u0430\u0444\u0438\u043a\u0430 \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c',\n                    'linkedin_count':'\u043a\u043e\u043b-\u0432\u043e \u0442\u0440\u0430\u0444\u0438\u043a\u0430 \u041b\u0438\u043d\u043a\u0434\u043d',\n                    'skype_count':'\u043a\u043e\u043b-\u0432\u043e \u0442\u0440\u0430\u0444\u0438\u043a\u0430 \u0421\u043a\u0430\u0439\u043f',\n                    'sim_count':'\u043a\u043e\u043b-\u0432\u043e \u0441\u0438\u043c\u043e\u043a',\n                    'intagram_count':'\u043a\u043e\u043b-\u0432\u043e \u0442\u0440\u0430\u0444\u0438\u043a\u0430 \u0438\u043d\u0441\u0442\u0430\u0433\u0440\u0430\u043c',\n                    'whatsapp_volume':'\u043a\u043e\u043b-\u0432\u043e \u0442\u0440\u0430\u0444\u0438\u043a\u0430 \u0432\u043e\u0442\u0441\u0430\u043f'\n                    \n                   }, inplace=True)\ndf1","827c89fc":"label_encoder = LabelEncoder()\n\nobl = pd.Series(label_encoder.fit_transform(df1['\u041e\u0431\u043b\u0430\u0441\u0442\u044c_\u0434\u043e\u043c']))\nobl.value_counts().plot.barh()\nprint(dict(enumerate(label_encoder.classes_)))","1cba08e3":"label_encoder = LabelEncoder()\nrayon=pd.Series(label_encoder.fit_transform(df1['\u0420\u0430\u0439\u043e\u043d_\u0434\u043e\u043c']))\nrayon.value_counts().plot.barh()\nprint(dict(enumerate(label_encoder.classes_)))\n","f25113d1":"label_encoder = LabelEncoder()\ngor=pd.Series(label_encoder.fit_transform(df1['\u0413\u043e\u0440\u043e\u0434_\u0434\u043e\u043c']))\ngor","aa7dff28":"categorical_columns = df1.columns[df1.dtypes == 'object'].union(['\u0420\u0430\u0439\u043e\u043d_\u0434\u043e\u043c'])\nfor column in categorical_columns:\n    df[column] = label_encoder.fit_transform(df1[column])\ndf1.head()","23e58da0":"df1['\u041e\u0431\u043b\u0430\u0441\u0442\u044c_\u0434\u043e\u043c'] = obl\ndf1['\u0420\u0430\u0439\u043e\u043d_\u0434\u043e\u043c'] = rayon\ndf1['\u0413\u043e\u0440\u043e\u0434_\u0434\u043e\u043c'] = gor","7f802fcb":"df1['\u0438\u043d\u0434\u0435\u043a\u0441 \u0443\u0440\u043e\u0432\u043d\u044f \u0434\u043e\u0445\u043e\u0434\u0430'] = df1['\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0434\u043e\u0445\u043e\u0434\u0430'].map({'HIGH':6,\n                                               'HIGH_MEDIUM':5,\n                                               'MEDIUM':4,\n                                               'LOW':3,\n                                               'VERY LOW':2,\n                                               '0':1})","31763687":"df1=df1.drop('\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0434\u043e\u0445\u043e\u0434\u0430',axis=1)\ndf1.head()","392cef6a":"df2 = pd.get_dummies(df1, columns=['\u041e\u0431\u043b\u0430\u0441\u0442\u044c_\u0434\u043e\u043c', '\u0420\u0430\u0439\u043e\u043d_\u0434\u043e\u043c', \"\u0413\u043e\u0440\u043e\u0434_\u0434\u043e\u043c\",'\u0438\u043d\u0434\u0435\u043a\u0441 \u0443\u0440\u043e\u0432\u043d\u044f \u0434\u043e\u0445\u043e\u0434\u0430'])","86f4eb1a":"df2.shape\n","2a815b32":"X=df2.drop('\u0438\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0430\u043a\u0441\u0438 \u0423\u041a\u041b\u041e\u041d',axis=1)\ny=target","46f98993":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X,\n                                                      y,\n                                                      test_size=0.3,\n                                                      random_state=2020)","2b238883":"\nlog_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)\ny_pred = log_reg.predict(X_valid)\n\nprint(accuracy_score(y_valid, y_pred))","a1d578c9":"from sklearn.metrics import confusion_matrix, plot_confusion_matrix\nprint(confusion_matrix(y_valid, y_pred))","e920f9ef":"plot_confusion_matrix(log_reg, X_valid, y_valid,values_format='5g')\nplt.show()\n","0868b97f":"from sklearn.model_selection import GridSearchCV\n\nlog_params={'C': np.logspace(-3, 3, 10),'penalty': ['l2']} # \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (\u043a\u043b\u044e\u0447: \u043d\u0430\u0431\u043e\u0440 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439)\n\nlog_grid = GridSearchCV(log_reg, log_params, cv=5, scoring='f1_macro') # \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043f\u043e 5 \u0431\u043b\u043e\u043a\u0430\u043c\nlog_grid.fit(X_train, y_train)","b29e48ca":"y_pred = log_reg.predict(X_valid)","9e10f9fb":"accuracy_score(y_valid, y_pred)","f8fee020":"log_grid.best_params_","035cdbe7":"log_grid.best_score_","0b6af1f6":"print(log_grid.best_estimator_)","0e40a85d":"pd.DataFrame(log_grid.cv_results_).T","c541ae69":"results_df=pd.DataFrame(log_grid.cv_results_)\nplt.plot(results_df['param_C'], results_df['mean_test_score'])\n\n# \u041f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0441\u0438 \u0438 \u0433\u0440\u0430\u0444\u0438\u043a\nplt.xlabel('C')\nplt.ylabel('Test accuracy')\nplt.title('Validation curve')\nplt.show()","40960446":"target","dc5ba2ea":"from sklearn.metrics import confusion_matrix, plot_confusion_matrix\nprint(confusion_matrix(y_valid, y_pred))","d87e480b":"plot_confusion_matrix(log_reg, X_valid, y_valid, values_format='5g')\nplt.show()","d577d660":"from sklearn.metrics import precision_score, recall_score, f1_score\nprint('Precision:', precision_score(y_valid, y_pred,average='macro'))\nprint('Recall:', recall_score(y_valid, y_pred,average='macro'))\nprint('F1 score:', f1_score(y_valid, y_pred,average='macro'))","a0ea3997":"log_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)\ny_pred = log_reg.predict(X_valid)\nlog_reg = LogisticRegression(solver='liblinear', penalty='l1')\nC_values = {'C': np.logspace(-3, 3, 10)}\nlogreg_grid = GridSearchCV(log_reg, C_values, cv=5, scoring='f1_macro')\nlogreg_grid.fit(X_train, y_train)","0de2524e":"print(logreg_grid.best_params_)\nprint(logreg_grid.best_score_)","9159d920":"results_df=pd.DataFrame(logreg_grid.cv_results_)\nplt.plot(results_df['param_C'], results_df['mean_test_score'])\n\n# \u041f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0441\u0438 \u0438 \u0433\u0440\u0430\u0444\u0438\u043a\nplt.xlabel('C')\nplt.ylabel('Test accuracy')\nplt.title('Validation curve')\nplt.show()","5627cab9":"# \u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u043b\u043d\u043e\u0442\u0430 \u0438 F-\u043c\u0435\u0440\u0430# ","48df5fd5":"1. \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043f\u043e \u043f\u0430\u0440\u043c\u0435\u0442\u0440\u0443 \u0421 \u0438 penalty","b3b7d3aa":"# **\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u043f\u043e f1_score**","5a4fabfd":"# \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044f L1# ","c291d19b":"**\u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043b\u0443\u0447\u0448\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c**","8835f2ee":"# \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 confusion matrix\n"}}