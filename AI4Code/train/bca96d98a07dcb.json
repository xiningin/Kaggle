{"cell_type":{"ca00c884":"code","246556b7":"code","4ee2274c":"code","8b5dc409":"code","4d899794":"code","0b5c202b":"code","60216550":"code","9c8a7f93":"code","4df51a77":"code","6ae630cf":"code","73a8e923":"code","4cc2003f":"code","c96b9656":"code","6dac6f53":"code","73f07d7a":"code","d755c351":"code","ba486973":"code","08913529":"code","20012966":"code","0fe95c94":"markdown","940875b8":"markdown","9621f530":"markdown","7da1adab":"markdown","68d2ef5f":"markdown","e3ec43fd":"markdown","fad719ea":"markdown","c02d8b4b":"markdown","698d03bc":"markdown","c6254a60":"markdown","f18e502a":"markdown","b79c9bc4":"markdown","f9c62e37":"markdown","030486c7":"markdown","6fd5f0cf":"markdown","0ce594c7":"markdown","da7a3563":"markdown","57abb02b":"markdown"},"source":{"ca00c884":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dropout,Dense\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.layers import Flatten","246556b7":"data = pd.read_csv('..\/input\/reliance-data\/Reliance.csv')\ndata.head()","4ee2274c":"data.dropna(axis = 0, inplace = True)","8b5dc409":"del data['Adj Close']\ndata.shape","4d899794":"meta = data.copy()\nmeta['Date'] = pd.to_datetime(meta['Date'], format='%Y-%m-%d')\nmeta['Year'] = meta['Date'].dt.year\nmeta.head()","0b5c202b":"plt.figure(figsize=(16,8))\nplt.title('Close Price History')\nplt.scatter(x = meta['Year'], y = meta['Close'], color = 'green')\nplt.xlabel('Period', fontsize=18)\nplt.ylabel('Close Price INR', fontsize=18)\nplt.show()","60216550":"plt.figure(figsize=(16,8))\nplt.title('Close Price History')\nplt.plot(meta['Year'],meta['Close'])\nplt.xlabel('Period', fontsize=18)\nplt.ylabel('Close Price INR', fontsize=18)\nplt.show()","9c8a7f93":"plt.figure(figsize=(16,8))\nplt.title('Close Price History')\nplt.plot(meta['Close'], color = '#ba0459')\nplt.xlabel('Day Count', fontsize=18)\nplt.ylabel('Close Price INR', fontsize=18)\nplt.show()","4df51a77":"plt.figure(figsize=(16,8))\nplt.title('Volume Traded History')\nplt.scatter(x = meta['Year'], y = meta['Volume'], color = '#0dffa6')\nplt.xlabel('Year', fontsize=18)\nplt.ylabel('Volume Traded', fontsize=18)\nplt.show()","6ae630cf":"plt.figure(figsize=(16,8))\nplt.title('Volume Traded History')\nplt.plot(meta['Volume'], color = '#bd0019')\nplt.xlabel('Day Count', fontsize=18)\nplt.ylabel('Volume Traded', fontsize=18)\nplt.show()","73a8e923":"data.set_index('Date', inplace = True)\ndata.head()","4cc2003f":"scaler = MinMaxScaler()\nX = data[['Open', 'Low', 'High', 'Volume']].copy()\ny = data['Close'].copy()\n\nX[['Open', 'Low', 'High', 'Volume']] = scaler.fit_transform(X)\ny = scaler.fit_transform(y.values.reshape(-1, 1))","c96b9656":"def load_data(X, seq_len, train_size=0.8):\n    amount_of_features = X.shape[1]\n    X_mat = X.values\n    sequence_length = seq_len + 1\n    datanew = []\n    \n    for index in range(len(X_mat) - sequence_length):\n        datanew.append(X_mat[index: index + sequence_length])\n    \n    datanew = np.array(datanew)\n    train_split = int(round(train_size * datanew.shape[0]))\n    train_data = datanew[:train_split, :]\n    \n    X_train = train_data[:, :-1]\n    y_train = train_data[:, -1][:,-1]\n    \n    X_test = datanew[train_split:, :-1] \n    y_test = datanew[train_split:, -1][:,-1]\n\n    X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], amount_of_features))\n    X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], amount_of_features))  \n\n    return X_train, y_train, X_test, y_test","6dac6f53":"window = 22\nX['close'] = y\nX_train, y_train, X_test, y_test = load_data(X, window)\nprint(X_train.shape) \nprint(y_train.shape) \nprint(X_test.shape) \nprint(y_test.shape)","73f07d7a":"model = Sequential()\nmodel.add(LSTM(128, input_shape= (window, 5), return_sequences = True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(128, input_shape = (window, 5), return_sequences=False))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(32))\n\nmodel.add(Dense(1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\nmodel.fit(X_train, y_train, batch_size=1, validation_split = 0.1, epochs = 4)","d755c351":"trainPredict = model.predict(X_train)\ntestPredict = model.predict(X_test)\n\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform([y_train])\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform([y_test])\n\ntrainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\n\ntestScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))","ba486973":"plot_predicted = testPredict.copy()\nplot_predicted = plot_predicted.reshape(242, 1)\nplot_actual = testY.copy()\nplot_actual = plot_actual.reshape(242, 1)\n\nplot_predicted_train = trainPredict.copy()\nplot_predicted_train = plot_predicted_train.reshape(967, 1)\nplot_actual_train = trainY.copy()\nplot_actual_train = plot_actual_train.reshape(967, 1)","08913529":"plt.figure(figsize = (16,8))\nplt.plot(pd.DataFrame(plot_predicted_train), label='Train Predicted')\nplt.plot(pd.DataFrame(plot_actual_train), label='Train Actual')\nplt.legend(loc='best')\nplt.show()","20012966":"plt.figure(figsize = (16,8))\nplt.plot(pd.DataFrame(plot_predicted), label='Test Predicted')\nplt.plot(pd.DataFrame(plot_actual), label='Test Actual')\nplt.legend(loc='best')\nplt.show()","0fe95c94":"# Scatter plot of Volume Traded vs Year","940875b8":"# Initializing the above function with a lookback window of 22","9621f530":"# Function to split dataset into Train and Test dataset","7da1adab":"# Drop rows with any null values","68d2ef5f":"# Import libraries","e3ec43fd":"# Read data from csv file","fad719ea":"# Scatter plot of Close Price vs Year ","c02d8b4b":"# Reset index of original dataframe","698d03bc":"# Predictions on Test dataset","c6254a60":"# Scale and transform the target and features column using MinMaxScaler","f18e502a":"# Check *RMSE* of Train and Test dataset","b79c9bc4":"# Predictions on Train dataset","f9c62e37":"# Copy dataset into new dataframe for plots","030486c7":"# Distribution of Close Price on day basis","6fd5f0cf":"# Check shape of the data","0ce594c7":"# Line plot of Close Price vs Year","da7a3563":"# Building our LSTM model to make predictions","57abb02b":"# Distribution of Volume Traded on day basis"}}