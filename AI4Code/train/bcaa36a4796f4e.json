{"cell_type":{"f0028991":"code","071de5da":"code","5d3474ae":"code","351b93a0":"code","4953a0bd":"code","2b3d89e1":"code","52b60673":"code","c5ad5318":"code","de9e6db0":"code","c73a6e18":"code","f80ead0c":"code","d5c23609":"code","3d2310cd":"code","979a729d":"code","efcd8854":"code","539ed570":"code","4621cfa9":"markdown","22e7a8bc":"markdown","a1d9ad9b":"markdown","501ce146":"markdown"},"source":{"f0028991":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","071de5da":"import numpy as np\nimport pandas as pd\n\nfrom catboost import CatBoostRegressor, Pool\n\nfrom sklearn.metrics import mean_squared_error","5d3474ae":"data = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')","351b93a0":"print(data.shape)","4953a0bd":"data.head()","2b3d89e1":"data['date'] = pd.to_datetime(data['date'])","52b60673":"def weird_division(n, d):\n    return n \/ d if d else 0\n\ndata['CPM'] = data.apply(lambda x: weird_division(((x['total_revenue']*100)),\n                                              x['measurable_impressions'])*1000 , axis=1)","c5ad5318":"data.drop(['order_id', 'line_item_type_id',\n          'integration_type_id', 'revenue_share_percent',\n          'total_revenue', 'measurable_impressions'], axis=1, inplace=True)","de9e6db0":"test = data[data['CPM'] >= 0]\ntest = test[test['date'] >= pd.to_datetime('2019-06-22')]\ntest = test[test['CPM'] < test['CPM'].quantile(0.95)]","c73a6e18":"train = data[data['CPM'] >= 0]\ntrain = train[train['date'] < pd.to_datetime('2019-06-22')]\ntrain = train[train['CPM'] < train['CPM'].quantile(0.95)]","f80ead0c":"categorical_features = ['site_id', 'ad_type_id', 'geo_id', 'device_category_id', \n                'advertiser_id', 'os_id', 'monetization_channel_id', 'ad_unit_id']","d5c23609":"train_pool = Pool(train.drop(['date', 'CPM'], axis=1), \n                  train['CPM'], \n                  cat_features=categorical_features)\ntest_pool = Pool(test.drop(['date', 'CPM'], axis=1), \n                 cat_features=categorical_features) ","3d2310cd":"model = CatBoostRegressor(iterations=700, \n                          depth=5, \n                          learning_rate=0.5, \n                          loss_function='RMSE')","979a729d":"%%time\nmodel.fit(train_pool)","efcd8854":"preds = model.predict(test_pool)","539ed570":"print(mean_squared_error(test['CPM'], preds))","4621cfa9":"## Prepare data","22e7a8bc":"**MSE is lower than 4850**","a1d9ad9b":"## Results","501ce146":"## Train model"}}