{"cell_type":{"dcfe2cce":"code","c1110f16":"code","e15ddcf8":"code","3ce92489":"code","c52817f2":"code","685fd014":"code","4f6b4202":"code","bad77c54":"code","4b973ba6":"code","7dc9aaa3":"code","c484c48b":"code","e078c316":"code","dc516af8":"code","8b80610c":"code","7b8864da":"code","069daf55":"code","c83301da":"code","b426c90c":"code","4d30813b":"code","99e75915":"code","b74122bf":"code","cc82a2a2":"code","77d23185":"code","9b4462d3":"code","440426f9":"code","82300dcc":"code","0297cabc":"code","bdffcdbd":"code","f9c17c52":"code","fc1e1222":"code","17cf9d65":"code","d300e291":"code","9f0b3192":"code","e74a5aa3":"code","75e94790":"code","d4ad4d0f":"code","d0543c3d":"code","4091426c":"code","c70f0cc4":"code","d4207408":"code","c0467e19":"code","788fba37":"code","2305c151":"code","7839d59d":"code","ff8ecb5d":"code","31787812":"code","bcd0c025":"code","34e9c243":"code","f10543a4":"code","ca2b995e":"code","31405df4":"code","3be8f47d":"markdown","a140f172":"markdown","699a6f94":"markdown","088f506a":"markdown","ae6b681b":"markdown","443ccdd4":"markdown","a32e0706":"markdown","15876b47":"markdown","5fff4c07":"markdown","39b587cc":"markdown","19e86ec5":"markdown","73aff289":"markdown"},"source":{"dcfe2cce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\nfrom subprocess import check_output\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1110f16":"\ndata = pd.DataFrame(pd.read_excel(\"\/kaggle\/input\/servantz\/liver_radiomics.xlsx\"))\n","e15ddcf8":"data","3ce92489":"#del data[\"Kontrast(arteryal,kortikomed\u00fcller,ge\u00e7)\"]\n#del data[\"Ad-soyad\"]\n#del data[\"tc kimlik no\"]\n#del data['Cinsiyet']\n#del data['Kalsifikasyon (Yok:0, Var:1)']\n#del data['Hemoraji']\n#del data['Nekroz']\n#del data['Ya\u015f']\n#del data['Lokalizasyon']\n#del data['Boyut(en uzun aks cm)']\n#del data['Heterojenite']\n#del data['ayn\u0131 taraf s\u00fcrrenal invazyon']\n#del data['Pararenal invazyon']\n#del data['renal arter-ven invazyonu']\n#del data['lenf nodu']\n#del data['uzak metastaz']\ndel data['fuhrman grade']\n","c52817f2":"data.columns[data.isnull().any()]","685fd014":"data.isnull().sum()","4f6b4202":"data.dropna(inplace=True)","bad77c54":"data.rename(columns = {\"Patolojik subtip\":\"Patolojik_subtip\"}, inplace = True) ","4b973ba6":"#data.Patolojik_subtip.replace(to_replace=dict(clear_cell=1, papiller=0), inplace=True)","7dc9aaa3":"# pandas pivot with multiple variables\n\ndf = data.loc[:,['FOInterquartileRange', 'Skewness',\n       'Uniformity', 'Median', 'Energy', 'RobustMeanAbsoluteDeviation',\n       'MeanAbsoluteDeviation', 'TotalEnergy', 'Maximum', 'RootMeanSquared',\n       '90Percentile', 'Minimum', 'Entropy', 'Range', 'Variance',\n       '10Percentile', 'Kurtosis', 'Mean', 'GLCM JointAverage', 'SumAverage',\n       'JointEntropy', 'ClusterShade', 'MaximumProbability', 'Idmn',\n       'JointEnergy', 'Contrast', 'DifferenceEntropy', 'InverseVariance',\n       'DifferenceVariance', 'Idn', 'Idm', 'Correlation', 'Autocorrelation',\n       'SumEntropy', 'MCC', 'SumSquares', 'ClusterProminence', 'Imc2', 'Imc1',\n       'DifferenceAverage', 'Id', 'ClusterTendency',\n       'GRLM ShortRunLowGrayLevelEmphasis', 'GrayLevelVariance',\n       'LowGrayLevelRunEmphasis', 'GrayLevelNonUniformityNormalized',\n       'RunVariance', 'GrayLevelNonUniformity', 'LongRunEmphasis',\n       'ShortRunHighGrayLevelEmphasis', 'RunLengthNonUniformity',\n       'ShortRunEmphasis', 'LongRunHighGrayLevelEmphasis', 'RunPercentage',\n       'LongRunLowGrayLevelEmphasis', 'RunEntropy', 'HighGrayLevelRunEmphasis',\n       'RunLengthNonUniformityNormalized']]\ndf1 = data.Patolojik_subtip\nx = dict(zip(df1.unique(),\"rgb\"))\nrow_colors = df1.map(x)\ncg = sns.clustermap(df,row_colors=row_colors,figsize=(12, 12),metric=\"correlation\")\nplt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(),rotation = 0,size =8)\nplt.show()","c484c48b":"import matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom matplotlib.colors import ListedColormap, LinearSegmentedColormap\nimport matplotlib as mpl\nimport matplotlib.colors as colors\nimport matplotlib.cbook as cbook\nfrom matplotlib._cm import datad\nfrom matplotlib._cm_listed import cmaps as cmaps_listed\n","e078c316":"sns.clustermap(data,\n               metric=\"correlation\",\n               standard_scale=1,cmap=\"summer\")","dc516af8":"color_dict=dict(zip(np.unique(data.Patolojik_subtip),np.array(['g','skyblue'])))\ntarget_df = pd.DataFrame({\"Patolojik_subtip\":data.Patolojik_subtip})\nrow_colors = target_df.Patolojik_subtip.map(color_dict)\n\n                                            \n\n\nsns.clustermap(data,\n               metric=\"correlation\",\n               standard_scale=1,\n               row_colors=row_colors,cmap=\"summer\")\n","8b80610c":"species=data['Patolojik_subtip']\n","7b8864da":"lut = dict(zip(species.unique(), \"rbg\"))\nrow_colors = species.map(lut)\n\npatient_subtype = species\ng = sns.clustermap(data,z_score=1, row_colors=row_colors,figsize=(10, 10),cmap=\"plasma\")\n\n","069daf55":"sns.clustermap(data,z_score=1, cmap=\"plasma\",figsize=(10, 10))","c83301da":"#correlation map\nf,ax = plt.subplots(figsize=(14, 14))\nsns.heatmap(data.corr(), annot=False, linewidths=.5, fmt= '.1f',ax=ax,cmap=\"Blues\")","b426c90c":"y = data.Patolojik_subtip                          \nlist = ['Patolojik_subtip']\nx = data.drop(list,axis = 1 )\nx.head()","4d30813b":"\na=1\nb=0\nax = sns.countplot(y,label=\"Count\")       \na,b= y.value_counts()\nprint('Clear Cell: ',a)\nprint('NonClear Cell : ',b)","99e75915":"data","b74122bf":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score,confusion_matrix\nfrom sklearn.metrics import accuracy_score\n","cc82a2a2":"# split data train 80 % and test 20 %\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)","77d23185":"#x_train_2 = select_feature.transform(x_train)\n#x_test_2 = select_feature.transform(x_test)\n#random forest classifier with n_estimators=10 (default)\nclf_rf_2 = RandomForestClassifier()      \nclr_rf_2 = clf_rf_2.fit(x_train,y_train)\nac_2 = accuracy_score(y_test,clf_rf_2.predict(x_test))\nprint('Accuracy is: ',ac_2)\ncm_2 = confusion_matrix(y_test,clf_rf_2.predict(x_test))\nsns.heatmap(cm_2,annot=True,fmt=\"d\")","9b4462d3":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 2)\n#x,y = data1.loc[:,data1.columns != 'CovidORnot'], data1.loc[:,'CovidORnot']\nknn.fit(x,y)\nprediction = knn.predict(x)\nprint('Prediction: {}'.format(prediction))","440426f9":"# train test split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 1)\nknn = KNeighborsClassifier(n_neighbors = 2)\n#x,y = data1.loc[:,data1.columns != 'CovidORnot'], data1.loc[:,'CovidORnot']\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\n#print('Prediction: {}'.format(prediction))\nprint('With KNN (K=2) accuracy is: ',knn.score(x_test,y_test)) # accuracy","82300dcc":"import matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn import datasets, neighbors\nfrom mlxtend.plotting import plot_decision_regions","0297cabc":"# Model complexity\nneig = np.arange(1, 25)\ntrain_accuracy = []\ntest_accuracy = []\n# Loop over different values of k\nfor i, k in enumerate(neig):\n    # k from 1 to 25(exclude)\n    knn = KNeighborsClassifier(n_neighbors=k)\n    # Fit with knn\n    knn.fit(x_train,y_train)\n    #train accuracy\n    train_accuracy.append(knn.score(x_train, y_train))\n    # test accuracy\n    test_accuracy.append(knn.score(x_test, y_test))\n# Plot\nplt.figure(figsize=[13,8])\nplt.plot(neig, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neig, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.title('-value VS Accuracy')\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.xticks(neig)\nplt.savefig('graph.png')\nplt.show()\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))","bdffcdbd":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nsteps = [('scalar', StandardScaler()),\n         ('SVM', SVC())]\npipeline = Pipeline(steps)\nparameters = {'SVM__C':[1, 10, 100],\n              'SVM__gamma':[0.1, 0.01]}\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state = 1)\ncv = GridSearchCV(pipeline,param_grid=parameters,cv=3)\ncv.fit(x_train,y_train)\n\ny_pred = cv.predict(x_test)\n\nprint(\"Accuracy: {}\".format(cv.score(x_test, y_test)))\nprint(\"Tuned Model Parameters: {}\".format(cv.best_params_))","f9c17c52":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n","fc1e1222":"x=abs(x)","17cf9d65":"#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k=10)\nfit = bestfeatures.fit(x,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(x.columns)","d300e291":"#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features","9f0b3192":"data1=x.iloc[:,[4,7,50,47,52,36,32,14,49]]","e74a5aa3":"# split data train 80 % and test 20 %\nx_train1, x_test1, y_train1, y_test1 = train_test_split(data1, y, test_size=0.2, random_state=1)\n\n","75e94790":"#x_train_2 = select_feature.transform(x_train)\n#x_test_2 = select_feature.transform(x_test)\n#random forest classifier with n_estimators=10 (default)\nclf_rf_2 = RandomForestClassifier()      \nclr_rf_2 = clf_rf_2.fit(x_train1,y_train1)\nac_2 = accuracy_score(y_test,clf_rf_2.predict(x_test1))\nprint('Accuracy is: ',ac_2)\ncm_2 = confusion_matrix(y_test,clf_rf_2.predict(x_test1))\nsns.heatmap(cm_2,annot=True,fmt=\"d\")\n","d4ad4d0f":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 2)\n#x,y = data1.loc[:,data1.columns != 'CovidORnot'], data1.loc[:,'CovidORnot']\nknn.fit(data1,y)\nprediction = knn.predict(data1)\nprint('Prediction: {}'.format(prediction))","d0543c3d":"# train test split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(data1,y,test_size = 0.2,random_state = 1)\nknn = KNeighborsClassifier(n_neighbors = 2)\n#x,y = data1.loc[:,data1.columns != 'CovidORnot'], data1.loc[:,'CovidORnot']\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\n#print('Prediction: {}'.format(prediction))\nprint('With KNN (K=2) accuracy is: ',knn.score(x_test,y_test)) # accuracy\n\n\n\n","4091426c":"\n# Model complexity\nneig = np.arange(1, 25)\ntrain_accuracy = []\ntest_accuracy = []\n# Loop over different values of k\nfor i, k in enumerate(neig):\n    # k from 1 to 25(exclude)\n    knn = KNeighborsClassifier(n_neighbors=k)\n    # Fit with knn\n    knn.fit(x_train,y_train)\n    #train accuracy\n    train_accuracy.append(knn.score(x_train, y_train))\n    # test accuracy\n    test_accuracy.append(knn.score(x_test, y_test))\n# Plot\nplt.figure(figsize=[13,8])\nplt.plot(neig, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neig, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.title('-value VS Accuracy')\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.xticks(neig)\nplt.savefig('graph.png')\nplt.show()\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))\n","c70f0cc4":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nsteps = [('scalar', StandardScaler()),\n         ('SVM', SVC())]\npipeline = Pipeline(steps)\nparameters = {'SVM__C':[1, 10, 100],\n              'SVM__gamma':[0.1, 0.01]}\nx_train, x_test, y_train, y_test = train_test_split(data1,y,test_size=0.2,random_state = 1)\ncv = GridSearchCV(pipeline,param_grid=parameters,cv=3)\ncv.fit(x_train,y_train)\n\ny_pred = cv.predict(x_test)\n\nprint(\"Accuracy: {}\".format(cv.score(x_test, y_test)))\nprint(\"Tuned Model Parameters: {}\".format(cv.best_params_))","d4207408":"y1 = data.Patolojik_subtip                          \nlist = ['Patolojik_subtip']\nx1 = data.drop(list,axis = 1 )\nx1.head()","c0467e19":"# split data train 80 % and test 20 %\nx_train1, x_test1, y_train1, y_test1 = train_test_split(x1, y1, test_size=0.2, random_state=1)","788fba37":"from sklearn.feature_selection import RFECV\n\n# The \"accuracy\" scoring is proportional to the number of correct classifications\nclf_rf_4 = RandomForestClassifier() \nrfecv = RFECV(estimator=clf_rf_4, step=1, cv=5,scoring='accuracy')   #5-fold cross-validation\nrfecv = rfecv.fit(x_train1, y_train1)\n\nprint('Optimal number of features :', rfecv.n_features_)\nprint('Best features :', x_train1.columns[rfecv.support_])","2305c151":"data2=x.loc[:,['TotalEnergy', 'RunLengthNonUniformity', 'GrayLevelNonUniformity',\n       'ClusterProminence', 'Autocorrelation', 'Variance',\n       'ShortRunHighGrayLevelEmphasis'\n      ]]","7839d59d":"data2","ff8ecb5d":"x_train2, x_test2, y_train2, y_test2 = train_test_split(data2, y1, test_size=0.2, random_state=1)\nclf_rf_2 = RandomForestClassifier()      \nclr_rf_2 = clf_rf_2.fit(x_train2,y_train2)\nac_2 = accuracy_score(y_test2,clf_rf_2.predict(x_test2))\nprint('Accuracy is: ',ac_2)\ncm_2 = confusion_matrix(y_test2,clf_rf_2.predict(x_test2))\nsns.heatmap(cm_2,annot=True,fmt=\"d\")","31787812":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 2)\n#x,y = data1.loc[:,data1.columns != 'CovidORnot'], data1.loc[:,'CovidORnot']\nknn.fit(data2,y1)\nprediction = knn.predict(data2)\nprint('Prediction: {}'.format(prediction))","bcd0c025":"# train test split\nfrom sklearn.model_selection import train_test_split\nx_train3,x_test3,y_train3,y_test3 = train_test_split(data2,y1,test_size = 0.2,random_state = 1)\nknn = KNeighborsClassifier(n_neighbors = 2)\n#x,y = data1.loc[:,data1.columns != 'CovidORnot'], data1.loc[:,'CovidORnot']\nknn.fit(x_train3,y_train3)\nprediction = knn.predict(x_test3)\n#print('Prediction: {}'.format(prediction))\nprint('With KNN (K=2) accuracy is: ',knn.score(x_test3,y_test3)) # accuracy\n\n","34e9c243":"# Model complexity\nneig = np.arange(1, 25)\ntrain_accuracy = []\ntest_accuracy = []\n# Loop over different values of k\nfor i, k in enumerate(neig):\n    # k from 1 to 25(exclude)\n    knn = KNeighborsClassifier(n_neighbors=k)\n    # Fit with knn\n    knn.fit(x_train3,y_train3)\n    #train accuracy\n    train_accuracy.append(knn.score(x_train3, y_train3))\n    # test accuracy\n    test_accuracy.append(knn.score(x_test3, y_test3))\n# Plot\nplt.figure(figsize=[13,8])\nplt.plot(neig, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neig, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.title('-value VS Accuracy')\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.xticks(neig)\nplt.savefig('graph.png')\nplt.show()\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))\n\n\n","f10543a4":"\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nsteps = [('scalar', StandardScaler()),\n         ('SVM', SVC())]\npipeline = Pipeline(steps)\nparameters = {'SVM__C':[1, 10, 100],\n              'SVM__gamma':[0.1, 0.01]}\nx_train4, x_test4, y_train4, y_test4 = train_test_split(data2,y1,test_size=0.2,random_state = 1)\ncv = GridSearchCV(pipeline,param_grid=parameters,cv=3)\ncv.fit(x_train4,y_train4)\n\ny_pred = cv.predict(x_test4)\n\nprint(\"Accuracy: {}\".format(cv.score(x_test4, y_test4)))\nprint(\"Tuned Model Parameters: {}\".format(cv.best_params_))","ca2b995e":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)\nclf_rf = RandomForestClassifier(random_state=43)      \nclr_rf = clf_rf.fit(x_train,y_train)\nclf_rf_5 = RandomForestClassifier()      \nclr_rf_5 = clf_rf_5.fit(x_train,y_train)\nimportances = clr_rf_5.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in clf_rf.estimators_],\n             axis=0)\nindices = np.argsort(importances)[::-1]\n\n# Print the feature ranking\nprint(\"Feature ranking:\")\n\nfor f in range(x_train.shape[1]):\n    print(\"%d. feature %d (%f)\" % (f + 1, indices[f], importances[indices[f]]))\n\n# Plot the feature importances of the forest\n\nplt.figure(1, figsize=(14, 13))\nplt.title(\"Feature importances\")\nplt.bar(range(x_train.shape[1]), importances[indices],\n       color=\"g\", yerr=std[indices], align=\"center\")\nplt.xticks(range(x_train.shape[1]), x_train.columns[indices],rotation=90)\nplt.xlim([-1, x_train.shape[1]])\nplt.show()","31405df4":"# split data train 80 % and test 20 %\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)\n#normalization\n#x_train_N = (x_train-x_train.mean())\/(x_train.max()-x_train.min())\n#x_test_N = (x_test-x_test.mean())\/(x_test.max()-x_test.min())\n\nfrom sklearn.decomposition import PCA\npca = PCA()\npca.fit(x_train)\n\nplt.figure(1, figsize=(14, 13))\nplt.clf()\nplt.axes([.2, .2, .7, .7])\nplt.plot(pca.explained_variance_ratio_, linewidth=2)\nplt.axis('tight')\nplt.xlabel('n_components')\nplt.ylabel('explained_variance_ratio_')","3be8f47d":"# **PCA**","a140f172":"# # **SVM**","699a6f94":"# **Recursive feature elimination (RFE)**","088f506a":"# **KNN**","ae6b681b":"# **Random Forest**","443ccdd4":"# **SVM**","a32e0706":"# # Random Forest","15876b47":"\n# **Feature Selection Yap\u0131lmadan**","5fff4c07":"# **Univariate Selection**","39b587cc":"**Random Forest**","19e86ec5":"# # **KNN**","73aff289":"# **Tree based feature selection**"}}