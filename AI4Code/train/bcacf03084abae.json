{"cell_type":{"bfd2cd65":"code","3ca6f4aa":"code","c4d36d66":"code","5a6b1052":"code","4e7c0d0f":"code","bcce764d":"code","2e72e9c0":"markdown","b5583f8b":"markdown","9d0e14f9":"markdown","27ee023a":"markdown","b8b84b83":"markdown","e21e9ecf":"markdown","f718a61a":"markdown","b410f83e":"markdown"},"source":{"bfd2cd65":"# imports \nfrom fastai.tabular.all import *\nimport pandas as pd\nimport numpy as np\n\n# variables\nTARIN_PATH = \"..\/input\/tabular-playground-series-jan-2022\/train.csv\"\nTEST_PATH = \"..\/input\/tabular-playground-series-jan-2022\/test.csv\"\nSAMPLE_SUBMISSION_PATH =\"..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"row_id\"\nTARGET = \"num_sold\"\nDATE = \"date\"\n\nYEAR = \"year\"\nMONTH = \"month\"\nDAY = \"day\"\n\nDAYOFYEAR = \"dayofyear\"\nDAYOFMONTH = \"dayofMonth\"\nDAYOFWEEK = \"dayofweek\"\nWEEKDAY = \"weekday\"\n\nSEED = 2002\ndef seed_everything(seed=SEED):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    \nseed_everything()\n\nBS_NUM = 16 #how many samples per batch to load \nVALID_PCT = 0.20 # validation data size \nN_ITERTATIONS = 100\n\nMODEL_MONITOR = 'SMAPE'","3ca6f4aa":"# train preprocess\ntrain = pd.read_csv(TARIN_PATH,index_col=ID)\n\ntrain[DATE] = pd.to_datetime(train[DATE])\n\ntrain[YEAR] = train[DATE].dt.year\ntrain[MONTH] = train[DATE].dt.month\ntrain[DAY] = train[DATE].dt.day\n\ntrain[DAYOFYEAR] = train[DATE].dt.dayofyear\ntrain[DAYOFMONTH] = train[DATE].dt.days_in_month\ntrain[DAYOFWEEK] = train[DATE].dt.dayofweek\ntrain[WEEKDAY] = train[DATE].dt.weekday\n\n# test preprocess\ntest = pd.read_csv(TEST_PATH,index_col=ID)\ntest[DATE] = pd.to_datetime(test[DATE])\n\ntest[YEAR] = test[DATE].dt.year\ntest[MONTH] = test[DATE].dt.month\ntest[DAY] = test[DATE].dt.day\n\ntest[DAYOFYEAR] = test[DATE].dt.dayofyear\ntest[DAYOFMONTH] = test[DATE].dt.days_in_month\ntest[DAYOFWEEK] = test[DATE].dt.dayofweek\ntest[WEEKDAY] = test[DATE].dt.weekday\n\ntrain.head()","c4d36d66":"# 1.make tabular pandas \n# split (train data & validation data)\nsplits = EndSplitter(valid_pct=VALID_PCT)(range_of(train))\n\n# devide column\nnum_col, cat_col = cont_cat_split(train, dep_var=TARGET)\nprint(\"num_col=\",num_col)\nprint(\"cat_col=\",cat_col)\n\n# make tabular pandas \nto = TabularPandas(train,\n                   y_names=TARGET, \n                   y_block=RegressionBlock,\n                   cat_names=cat_col,\n                   cont_names=num_col,\n                   procs=[Categorify, FillMissing,Normalize],\n                   splits=splits)\nto.items[:5]","5a6b1052":"# 2.build model\ndls = to.dataloaders(bs=BS_NUM)\n\ndef SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)\n\naccumMetric = AccumMetric(SMAPE, to_np=True, invert_arg=True)\n\nlearn = tabular_learner(dls, metrics=accumMetric)","4e7c0d0f":"# 3.tune model\nlearn.fit_one_cycle(N_ITERTATIONS, cbs=[SaveModelCallback(monitor=MODEL_MONITOR, comp=np.less)])","bcce764d":"# predict\ndl = learn.dls.test_dl(test)\ny, _ = learn.get_preds(dl=dl)\n\n#submit\nsub = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsub[TARGET] = np.ceil(y)\nsub.to_csv(SUBMISSION_PATH,index=False)\nsub.head()","2e72e9c0":"### make tabular pandas","b5583f8b":"# 3.After building Model\n### predict & submit","9d0e14f9":"### tune model","27ee023a":"### imports & variabels","b8b84b83":"# 2.Build Model","e21e9ecf":"### load & preprocess","f718a61a":"### build model","b410f83e":"# 1.Before Build Model"}}