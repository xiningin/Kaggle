{"cell_type":{"78f2e6d8":"code","e1597257":"code","ebc1b32e":"code","3b1ad431":"code","1e99d22f":"code","2a1d4b10":"code","ed6583b6":"code","a517ddb9":"code","7210af37":"code","a1e7caf9":"code","fd61d38a":"code","46eb9187":"code","0045d9dd":"code","89a65ec2":"code","1c1bff01":"code","734c6ccb":"code","3ce7426a":"code","5e9a5082":"code","bf01c5bd":"code","71046dee":"code","b309740b":"code","4426e004":"code","d7a31177":"code","41bdbfab":"code","ebe3fdc2":"code","36c29287":"code","926c2767":"code","7d6e059c":"code","8f69a881":"code","8829adb7":"code","ca391252":"code","47f85b12":"code","41dc504a":"code","6198cdec":"code","e52736cd":"code","aa2eb91d":"code","4aa4a82e":"code","334a626f":"code","3e6bd004":"code","12f34445":"code","d9d96746":"code","14038f64":"code","8b25917b":"code","ae2dae4f":"code","78d46c8d":"code","faf255cc":"code","c65f98c2":"code","37a38b1b":"code","820d73eb":"code","c6056153":"code","e67b8167":"code","eed09a0a":"code","e08cd6cd":"code","d881def7":"code","5f8f2fb2":"code","c7c9d82a":"code","237fceae":"code","c7655ec6":"code","f3047d93":"code","5b20dd17":"code","c46b6eaa":"code","a54314b8":"code","7de1a9f4":"code","d45680f5":"markdown","e8d8a683":"markdown","a85e7df4":"markdown","96783a6c":"markdown","a7575df8":"markdown","279b7b1a":"markdown","d11c1f1b":"markdown","e76c4512":"markdown","9b58ccbd":"markdown","4b1c2353":"markdown","3e6d1e1b":"markdown","dca6ca5b":"markdown","74bcce22":"markdown","bd4774cf":"markdown","337e3077":"markdown","b7a23312":"markdown","ebd9d228":"markdown","b07a6880":"markdown","bea3a796":"markdown","ffd50ce9":"markdown","e49c1cea":"markdown","24e5f2ce":"markdown","a605a7da":"markdown","38ece509":"markdown","9788cdfa":"markdown","4abaebc4":"markdown","f3bf69c7":"markdown","1eb85401":"markdown","95210a7e":"markdown","9601ac42":"markdown","1215f4f0":"markdown","f1599774":"markdown","aab3463f":"markdown","edd6b855":"markdown","0d65918c":"markdown","9d01ca13":"markdown","deddf0bd":"markdown","b1ee6df2":"markdown","c70e6854":"markdown","ec6befa5":"markdown","9df6b3ea":"markdown","8a830fc5":"markdown","777c8d2b":"markdown","0a81066b":"markdown","26c71293":"markdown","2d37c8e0":"markdown","ca164071":"markdown","6cefba85":"markdown","e2f930a4":"markdown","2ed1fd09":"markdown","a112bf9c":"markdown","37b6c2eb":"markdown","ccdf4a4e":"markdown","1353e9e5":"markdown","ca2b5cea":"markdown","292a0cd1":"markdown","806b911c":"markdown","4048a968":"markdown","b2554fe7":"markdown","06a00060":"markdown"},"source":{"78f2e6d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1597257":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import classification_report","ebc1b32e":"df=pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","3b1ad431":"#to check shape\ndf.shape\n","1e99d22f":"#colums\nprint(df.columns.tolist())","2a1d4b10":"df.info()","ed6583b6":"\n\n#it contains total of 12 columns","a517ddb9":"df.bmi.isnull().value_counts()\n","7210af37":"df.bmi=df.bmi.fillna(-99)","a1e7caf9":"#here make a target variable so that we can use easily\ndf[\"target\"]=df.stroke\ndf=df.drop([\"stroke\"],axis=1) #removing stroke from here","fd61d38a":"df.target","46eb9187":"features=[\"age\",\"avg_glucose_level\",\"bmi\"] #selecting the parameters that we use","0045d9dd":"df[features].describe(percentiles=[0.1,0.2,0.3,0.4])","89a65ec2":"#plotting graph\n\nfor f in features:\n    df[f].plot(kind=\"hist\")\n    plt.title(f)\n    plt.show()","1c1bff01":"df.plot(kind='scatter',x='age',y='avg_glucose_level',color='red')\nplt.show()\n","734c6ccb":"df.plot(kind='scatter',x='bmi',y='avg_glucose_level',color='red')\nplt.show()\n","3ce7426a":"df.plot(kind='scatter',x='age',y='bmi',color='red')\nplt.show()\n","5e9a5082":"sns.pairplot(df[features])\n","bf01c5bd":"spearman=df[features].corr(method=\"spearman\")\nfig=plt.figure(figsize=(7,5))\nplt.show()","71046dee":"features_cat=['gender','hypertension','heart_disease','ever_married',\n                'work_type','Residence_type','smoking_status']","b309740b":"for f in features_cat:\n    df[f].value_counts().plot(kind='bar')\n    plt.title(f,size=20)\n    plt.grid()\n    sns.set_theme(style='darkgrid')\n    plt.show()","4426e004":"target_count=df.target.value_counts()\nprint(target_count)\nprint(\"Percentage of stroke[1]\",np.round(100*target_count[1]\/target_count.sum(),2),\"%\")","d7a31177":"target_count.plot(kind=\"bar\")\nplt.title(\"Stroke\")\nplt.grid()\nplt.show()","41bdbfab":"sns.catplot(y='target',x='gender',data=df,kind='bar')\nplt.title('Target vs Gender',size=20)\nplt.grid()\n","ebe3fdc2":"sns.catplot(y='target',x='hypertension',data=df,kind='bar')\nplt.title('Target vs Hypertension',size=20)\nplt.grid()\n","36c29287":"sns.catplot(y='target',x='heart_disease',data=df,kind='bar')\nplt.title('Target vs Heart disease',size=20)\nplt.grid()\n","926c2767":"sns.catplot(y='target',x='ever_married',data=df,kind='bar')\nplt.title('Target vs Marriage',size=20)\nplt.grid()\n","7d6e059c":"sns.catplot(x='target',y='work_type',data=df,kind='bar')\nplt.title('Target vs work type',size=20)\nplt.grid()\n","8f69a881":"sns.catplot(y='target',x='Residence_type',data=df,kind='bar')\nplt.title('Target vs Residence type',size=20)\nplt.grid()\n","8829adb7":"sns.catplot(x='target',y='smoking_status',data=df,kind='bar')\nplt.title('Target vs smoking status',size=20)\nplt.grid()\n","ca391252":"df[\"age_bin\"]=pd.qcut(df[\"age\"],q=10,precision=1)\ndf[\"avg_glucose_level_bin\"]=pd.qcut(df[\"avg_glucose_level\"],q=10,precision=1)\ndf[\"bmi_bin\"]=pd.cut(df[\"bmi\"], [-100,10,20,25,30,35,40,50,100])","47f85b12":"#for ever married check cross table\nctab = pd.crosstab(df.ever_married, df.target)\nctab","41dc504a":"#normalise each row\n(ctab.transpose()\/ctab.sum(axis=1)).transpose()","6198cdec":"#selecting predictors\npredictors=features+features_cat\nprint(\"No of Predictors\",len(predictors))\nprint(predictors)","e52736cd":"print(df.bmi.value_counts())\nsns.set_theme(style=\"darkgrid\")\nax=sns.countplot(data=df,x=\"bmi\",color='black')\nplt.show()","aa2eb91d":"print(df.hypertension.value_counts())\nsns.set_theme(style=\"darkgrid\")\nax=sns.countplot(data=df,x=\"hypertension\")\nplt.show()","4aa4a82e":"print(df.ever_married.value_counts())\nsns.set_theme(style=\"darkgrid\")\nax=sns.countplot(data=df,x=\"ever_married\")\nplt.show()","334a626f":"print(df.work_type.value_counts())\nsns.set_theme(style=\"darkgrid\")\nax=sns.countplot(data=df,x=\"work_type\")\nplt.show()","3e6bd004":"print(df.Residence_type.value_counts())\nsns.set_theme(style=\"darkgrid\")\nax=sns.countplot(data=df,x=\"Residence_type\")\nplt.show()","12f34445":"print(df.smoking_status.value_counts())\nsns.set_theme(style=\"darkgrid\")\nax=sns.countplot(data=df,x=\"smoking_status\")\nplt.show()","d9d96746":"fig=plt.figure(figsize=(8,8))\nsns.distplot(df.avg_glucose_level,label=\"Avg_glucose_level\")\nplt.legend()","14038f64":"fig=plt.figure(figsize=(8,8))\nsns.distplot(df.bmi,label=\"BMI\",color=\"green\")\nplt.legend()","8b25917b":"df.target","ae2dae4f":"plt.figure(figsize=(8,8))\nsns.distplot(df[df[\"target\"]==0][\"bmi\"],color=\"red\")\nsns.distplot(df[df[\"target\"]==1][\"bmi\"],color=\"green\")\nplt.title(\"No stroke vs stroke by BMI\",size=20)\nplt.xlim()\nplt.show()","78d46c8d":"plt.figure(figsize=(8,8))\nsns.distplot(df[df[\"target\"]==0][\"avg_glucose_level\"],color=\"red\")\nsns.distplot(df[df[\"target\"]==1][\"avg_glucose_level\"],color=\"green\")\nplt.title(\"No stroke vs stroke by Avg Glucose Level\",size=20)\nplt.xlim()\nplt.show()","faf255cc":"plt.figure(figsize=(8,8))\nsns.distplot(df[df[\"target\"]==0][\"age\"],color=\"red\")\nsns.distplot(df[df[\"target\"]==1][\"age\"],color=\"green\")\nplt.title(\"No stroke vs stroke by age\",size=20)\nplt.xlim()\nplt.show()","c65f98c2":"fig = plt.figure(figsize=(7,7))\ngraph = sns.scatterplot(data=df, x=\"age\", y=\"bmi\", hue='gender')\ngraph.axhline(y= 25, linewidth=4, color='r', linestyle= '--')\nplt.show()","37a38b1b":"fig = plt.figure(figsize=(7,7))\ngraph = sns.scatterplot(data=df, x=\"age\", y=\"avg_glucose_level\", hue='gender')\ngraph.axhline(y= 150, linewidth=4, color='r', linestyle= '--')\nplt.show()","820d73eb":"plt.figure(figsize=(13,13))\nsns.set_theme(style=\"darkgrid\")\nplt.subplot(2,3,1)\nsns.violinplot(x = 'gender', y = 'target', data = df)\nplt.subplot(2,3,2)\nsns.violinplot(x = 'hypertension', y = 'target', data = df)\nplt.subplot(2,3,3)\nsns.violinplot(x = 'heart_disease', y = 'target', data = df)\nplt.subplot(2,3,4)\nsns.violinplot(x = 'ever_married', y = 'target', data = df)\nplt.subplot(2,3,5)\nsns.violinplot(x = 'work_type', y = 'target', data = df)\nplt.xticks(fontsize=9, rotation=45)\nplt.subplot(2,3,6)\nsns.violinplot(x = 'Residence_type', y = 'target', data = df)\nplt.show()","c6056153":"fig=plt.figure(figsize=(10,10))\nsns.pairplot(df)\nplt.show()","e67b8167":"df['gender'].unique()","eed09a0a":"df['smoking_status'].unique()","e08cd6cd":"df['work_type'].unique()","d881def7":"ohe=OneHotEncoder()","5f8f2fb2":"df['gender']=pd.Categorical(df['gender'])\ndfdummiesgender=pd.get_dummies(df['gender'],prefix='gender_encoded')\ndfdummiesgender","c7c9d82a":"df['smoking_status']=pd.Categorical(df['smoking_status'])\ndfdummiessmoke=pd.get_dummies(df['smoking_status'],prefix='gender_encoded')\ndfdummiessmoke","237fceae":"df['work_type']=pd.Categorical(df['work_type'])\ndfdummieswork=pd.get_dummies(df['work_type'],prefix='gender_encoded')\ndfdummieswork","c7655ec6":"df.drop('gender',axis=1,inplace=True)\ndf.drop('smoking_status',axis=1,inplace=True)\ndf.drop('work_type',axis=1,inplace=True)","f3047d93":"df=pd.concat([df,dfdummiesgender],axis=1)\ndf=pd.concat([df,dfdummiessmoke],axis=1)\ndf=pd.concat([df,dfdummieswork],axis=1)\ndf","5b20dd17":"from sklearn.preprocessing import StandardScaler\nstd=StandardScaler()\ncolumns = ['avg_glucose_level','bmi','age']\nscaled = std.fit_transform(df[['avg_glucose_level','bmi','age']])\nscaled = pd.DataFrame(scaled,columns=columns)\ndf=df.drop(columns=columns,axis=1)","c46b6eaa":"df=df.merge(scaled, left_index=True, right_index=True, how = \"left\")\ndf","a54314b8":"y = df['target']\nx= df.drop(['target'],axis=1)","7de1a9f4":"x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=101,test_size=0.2)\nprint('train data-',len(x_train))\nprint('test data-',len(x_test))\nprint('Length of x-',len(x))","d45680f5":"``People with heart disease are more prone to stroke``","e8d8a683":"# Contents\n<ul>\n    <li>Import and first glance  <\/li>\n<li>Data Cleansing   <\/li>\n<li>Numerical Features  <\/ li>\n<li>Categorical Features  <\/li>\n<li>Target  <\/li>\n<li>Build Model <\/li>\n<li>Evaluate on Training Data <\/li>\n<li>Evaluate on Test Set <\/li>","a85e7df4":"**Avg Glucose Level**","96783a6c":"# Taking main features of the dataset","a7575df8":"``3353 people are married and 1757 are not married``","279b7b1a":"``It states that it has 201 null values``","d11c1f1b":"``Urban papulation are getting more stroke``","e76c4512":"# Distribution Plot","9b58ccbd":"``Self employed are more prone than any other work type people``","4b1c2353":"<img src='https:\/\/c.tenor.com\/K6xMm3nxBg4AAAAC\/marriage-marry.gif'>","3e6d1e1b":"# Cleaning of data","dca6ca5b":"# Data Preprocessing","74bcce22":"``\nnever smoked       1892\nUnknown            1544\nformerly smoked     885\nsmokes              789``","bd4774cf":"``Private          2925\nSelf-employed     819\nchildren          687\nGovt_job          657\nNever_worked       22``","337e3077":"<img src=\"https:\/\/media.tenor.com\/images\/b46906bbf29dd8a0bf85231ef71998e1\/tenor.gif\">","b7a23312":"<img src='https:\/\/www.verywellhealth.com\/thmb\/XjFwBrJx7bRalsHOyLK2b5aIOcg=\/500x350\/filters:no_upscale():max_bytes(150000):strip_icc()\/heart-health-5-5a78affa04d1cf00377bcdfb.gif'>","ebd9d228":"``There are a total of 10 predictors which are used to analyse stroke ``","b07a6880":"# Residence type","bea3a796":"``Filling out the null value``","ffd50ce9":"# Pair Plot","e49c1cea":"<ul>\n<li>From the above graph we can see that people with glucose greater than 150 are less<\/li>\n    <li>From the above graph we can see that people with BMI greater than 25 are fat<\/li>\n    <li>Shows that people with age  more than 50 suffer more heart stroke<\/li>\n    <li>Shows that people with age  more than 50 suffer more heart stroke<\/li>\n<li>People having more hypertenssion are more prone to stroke<\/li>\n    <li>Males are more prone to heart attack<\/li>","24e5f2ce":"<img src='https:\/\/media0.giphy.com\/media\/KVjEHrBiHWkqFB4MUq\/giphy.gif'>","a605a7da":"``People who are formerly smoking are getting the most strokes``","38ece509":"``Checking the shape of dataset``","9788cdfa":"# Reading the file","4abaebc4":"``Married people are more prone to heart attack``","f3bf69c7":"# Voilen Plot","1eb85401":"# Packages","95210a7e":"# Conclusions","9601ac42":"<img src='https:\/\/media3.giphy.com\/media\/xT5LMBk9CIQXji0wNy\/giphy.gif'>","1215f4f0":"``shows 4612 people have hypertension``","f1599774":"``Contains 5110 rows and 12 columns``","aab3463f":"``From the above graph we can see that people with BMI greater than 25 are fat``","edd6b855":"<img src='https:\/\/cdn.dribbble.com\/users\/3050354\/screenshots\/14646894\/media\/1f31948afd5401c44d4bae934f07641a.gif'>","0d65918c":"``From the above graph we can see that people with glucose greater than 150 are less``\n","9d01ca13":"``Males are more prone to heart attack``","deddf0bd":"``Shows that\nUrban    2596\nRural    2514``","b1ee6df2":"# No target vs target on BMI","c70e6854":"``People having more hypertenssion are more prone to stroke``","ec6befa5":"**Age VS Bmi**","9df6b3ea":"# Stroke vs numarical features","8a830fc5":"# Age vs Average glucose level","777c8d2b":"# Data Processing","0a81066b":"# Smoking status","26c71293":"# Stroke Preduction Model\n``Here in this model you will be analyse stroke prediction ``","2d37c8e0":"``Shows that people with age  more than 50 suffer more heart stroke``","ca164071":"``Shows that people having average glucose level 100 suffer heart stroke the most``","6cefba85":"# Marriage status","e2f930a4":"# Build Model\n","2ed1fd09":"# Hypertension","a112bf9c":"``It shows Percentage of stroke[1] 4.87 ``","37b6c2eb":"# Plotting the stroke","ccdf4a4e":"`` Shows that people with with bmi around 25 suffered more stroke``","1353e9e5":"<img src='data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBUUFBgVFRQZGRgYGxsZGhsaGhsgGxobGhsaGxobGxsbIC0kGx0pIBgbJTclKS4wNDQ0GiM5PzkyPi0yNDABCwsLEA8QHhISHjIrJCkyMjIyNTIyNjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMv\/AABEIALUBFwMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAAAQIDBAUHBgj\/xABJEAABAwIEAwUEBgYIAwkAAAABAgMRACEEEjFBBVFhEyJxgZEGMqHRB0JiscHwFCNScpLhJDNDU4KisvEVc4MWNFRjhJOjwtL\/xAAaAQEBAQEBAQEAAAAAAAAAAAAAAQIDBAUG\/8QAJREAAgEEAQUAAwEBAAAAAAAAAAERAgMhMUEEEhNRYQUycaEi\/9oADAMBAAIRAxEAPwCxg3gqwzGddLGNRMzPjVPE4dTSysJWptV1IBAI+0mdeoHjVbsiw5BzZJgGD3ZsJ3I62jStZLwOUZsuuWUq+EQP9q8kHpbJ8DjUuCEi2khWaQfKx8apcRwhQouJK7XWARBTHvgaZhHnTXz2CsyjCFnVGoVzIjQ28\/GpBjkxPaL8Monyk9OdMLDLl5QzB8USExIWNcx18Y3NU+LLUIcbcJkELCSRNokSDeLRvWbiUFpUhSshMicsJm+xAGu5tWg0lSkiE7XAyweoOfzrOTULaIsDxJZgWjkVJkx0tTcXhCpRcbEL3gCD9lV9TzIqLEKU2uQ2FJI74PenTvAHRQ9DWzwrHtcwAqMpmxHVIJgiipgVVSVcLi4jKkgpspBTBSbapIvrWi6tt1GRQKSSCICQUq2Um3TS9tqrcdw5GVxu6tJAKgU8li8kCSLVS4fxHOCEqTv7sgz1lNWY4MqmeSdriym1ltRWVDXu90idUkEc9DppVhfFUEK2zWNhCtbEb6z5emLi8KXACk5SkzpEGADtcc6dgl5lZFylSfeSoSQOYk6HmKKdyVpagXB8SdQoJ7Q5dEHvGDPuq1IMb1p4t50oguAA2vmSfjE0isEkptEkbSJGxmbK3B8KqMvFshtySD7rgJhW0HkofHWnbGSd04G4ZBSqSolVypESCBqtPM8x41eVhQ4JgFJ0M2IP51p7aErtmIE3hScySDYiTMdIrLfJw7hJgozXKhpM95NxGolOxnXfTXKMzwzTewS0IzISElMGTBFjcKUSYB00PluxPEs8BQWhSQMwIBi8yL3SeY5UjOOBHvoIO0qHpsdb0x3E9n3kict0\/YP7IJ0Hj+FJTHa1suYnIEFzMhYMZ06KPJSSo2WPjG1Uf+NdnELzcioAJI5HKB3tN4qsjj5cBBTc6yBIjwvr1qk8uQcoAOp67yL2IqbNRBpf9qFKJCm4sQFJnfUKBspJ5VRZ4m42R3zOhGaCfSB\/tUOCbLhgJ7997qHMdRyqZXDVKSEkHQxrHgqTY\/nwkeyzGULjsaHAcypN7kmPC2\/KoWwtdpUdkkpzCdgdIPiTVzDYZJytuQPEKmbd0xAI5Gr7nCO7KMk7Sowb+6RB\/lVVPBHVyZyeFuK0IJHgPQftdJq5geHSvvtwTHdmMw3g2Eibi9W28WlNlJUFR3gQCUlMbhIzAzY2tTH\/AHSc5Fxa6c0fumxEfhvUjgTyXEYVDWdxKVAiSUiMwHnObe+t\/SB\/iaV2CFAHmRY791OxrFx2LU4QoBWmUjOekGAo8+VV0BcSEm2uvxk6eNYdNT0bTpWyytYSsjMpKTzJOU75Qo+70rawXCEOIzZ5J3uBa4uJ6dKoYdhtw97u5Yg8uYIFganw\/aMOGJgmxIkAxreSR0+FSMmu7BttARkWUGQZAUmTGu6YPOocVw9TffbCjIHcIJBjSevWoX1pdGZJBVrIgp2tBJyzAuIH3VXb47kBbWkKAtlC\/I3Ig+FqvaySTKxSFJV9VRse\/Nwbygwoq6wTWO9jHEkJLijyJItOg0BHnM0ziGOzwpClJ1kEA6nZWosNPGqRClkHMVA2zC8W3BpoRJMTJsNDoIkGNhploqxhsOUpsoG\/gRHOTBF7UVZBvvfrEFJTBggKiCZsR+fGvP4Z8pcLa3DmSIClE3SNr2keFT4bHAgGBm3SY1Go1\/CjHututqV2ZQtB5hQBHO8nX83qyqlDRlJpymWSErBC1Z0q8YIA8fuqlhDkV2ThgXyKIOVQ\/ZJJsdqTAuJcbkkBQPeSmwHhrzqxiMIFIIyzbfPpzG02H5FSlcMtT5QruEBTGYXNoTMdDCtDpVLCrWySlSsqCqBlE5TysQIOxFTYfEQnKZKgIIMkkAwDEHlUuIwwWkhIgx\/EOUjTbwIFdIOclsFKhChaNpEHmO8YF6x1tobUSDCTJm5APgZuST51636N0JWt9DiEqyJbKStIJ7xWJuLGw0r34wjQ\/s0fwJ+VaotVNS2ZruJPCOPDEuJFlEJI8Znfp6VlYlC0LzpEg3VBAJA1IEXV03rvAbSNEp9BTrcvhW1Z+mXe+HH8M+FgQtapFgJv01M7nWo+I8NUQFpzApnKSDa\/uqt7pjyrsdOzVVaxsy7vw4vg8auIyHkoGLHfWBNWsSpK0yU8s0EAkjQ2PvCOvwrrhA5CmlpB1Qn+EVFaa0zTuJ7Rw1vGrCiFGFDQyRImJ1irL3FM6AhUKn6xEkWOmaa7McM3\/do\/hT8qQ4Rr+7R\/An5U8L9jyqNHA04jsypBEp0\/dJ08qtDEaSJG\/WOvlXcVYFo6tNnxQn5Uz\/hzP9y3\/Aj5VHZzsK7iIOFrQArOm\/2TBCh+zc3PKtjDNtLAUhvXkACk+E9NIrrZ4Wx\/cN\/wI+VCOFsCYYaE6w2i\/wAKvifseVejkuKwyACsApULqAmQdM6ZA9NxUyOKWGZsnTvJPdOtwFAR5+tdZ\/Qmv7tv+BPypo4eyNGW\/wCBPyp4ieQ5TiHG1Iz3BGhJAB+yo7dI5VGniQkEd4E3gzJHMzr11++usnAMkR2SI\/cT8qiPB8MTJw7JPPs0T6xR2myq4kcf4tikrhWVSSmxgmFD571WwjhcsBfURJBHO+9dqPB8P\/4dr\/20fKlRwnDgyMO0DzDaPlTxP2PKuEcdVgFGSn3h1F\/Pz0PKpW8blBGVKVAQU5gJ6idr12NOEbGjaB\/gT8qarh7J1ZbPi2n5Udp+x5V6OVO4coAdSubA5SLczMan0q9hcY2+nKohJ1gHQ7bW20+NdKTgmtmkcvcT8q5OR2bqnEAFKioER7pkwTFunnXGu32tM6UV9ygycTjFNulsr7oNsthI01F9aVbRc7xFxJ1ImI5EQahewynFntUQsyoe4MwB3jXzjwqfh2ISk9mu2bQ6aW5\/A1lfDfGSu62kQCDJncqBHUki4mhrEdmQQrumxnUg7jQTU3E24Wc0ZY7sXA6n871lrdcMpNtu8NNhBA9PGtpSjFTPYh1txGcQNj3Rz3n5UV5jh+NU2qLyBqmCNNwDSVMjBpY1DjDklKghdzfukiJPdv4mPStJObKIM2EQqZG4i3P41ccwyVpKVIAJkWO99P5VhYZ\/slFtThy\/VJUqR0M8qjXJul5gdiSULCsi72iDcbjQ85HnVpTspBQruxIuYPSxHj5U1aQoe+ohQ5g31Bki1UmXVNq7MqTlJzCRodSB0Oo86UslSJcQZUlaRJF94PNJN4FSdoVBKkpgHfcHcGUz91SBpcXvOkE6dJMctOlZxW405lNkqsoqUAM2gPnpFbZhI9x9HjYS9iCJuhskTN8y+nwr3Zrwn0eFXavBR\/s24\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\/VXkBmLQTGk1Aep9hmFIwDBX7ziVPK\/eeWpw\/6\/hW\/XmuN8bU08zgcI2leIcTm789my0m2dYTBOkBIiY1FpscB4u446\/hsQlAfw5RJQFBDjbicza0BUkbgiTBGtAbtFZnB+KfpCsRCQENPKZSr9soSnOfJalJ\/wANR4riahjGMMgJIU2465MyEIyoRlvYlxYuZskjeaoNegGisb2tx6mMG+4j38mRHPOshCI\/xLFAO9n+IrxOHW8qMq1vdnAj9UlakIJ5khOaftVyFpspgZzCrQDYHYmx\/wB4rs3DsAMPhEMjRpoInnlRBPiSCfOuQdkkpAk2j4\/LWuF16O1pbFYwuoJEafmwoQ3lVlUoDMTvaY2HUUqW3REdmofvxPllt60n6OrVxtGUxaTfqRH8tNK4pNnZtIdiShCNRewtP3ChlLQsVQfEhPkJ++hGEbHeQhAKbaDxB1kfnSoMY\/ooJAg6BNika6ctbVVQZqrke6rIJ0m15j\/MTRUK1pVy+MfH82pa1BJLmIZSkamDYiwO+0isxDSlqKUJhI1OsDWAAbmtE8PU4At1pQA0RIBUB+106CnOKvAhKfdCYJCRyFcljZ0bnRRCG02CUjxkk+ZqJRtoP8KST8NKtdoSQEKBVyygn0AI9TUzOBQmFOdmpcyMqJyjymd6q+kb9FMcOcWJJWgagyJJ2uDYX01qQoUgWUSOSir11rSWU63jX3SOtqoLxSVwhEEnWbQOZEGpll0es+jJ3M89pZtNhO6vQaV0U1z\/AOjtgIecheaW790AWWmNNda6Aa9dvFKPLcc1CGvLcKX+kcTxT2qMKhOFQZt2ijnf8wcqfKt\/imOSwy48v3W0KWeuVJMecR51jfR\/glN4FtS7uP5sQ4Yglbxz3HPKUjyrZgxfbLAfp3EcJg5PZtocxD8EiUKIQEyP2spT4LNavtS0gu8OYSAB+lBxKQIASwy4qABoBIp3sqO1fxmMIMLd7Buf7vDDJI6KXnNNxSg5xhhEf93wrrvgXVob9YSaAbgU\/pPFHnTdGCQlhvSO1dAW8sbhQTlR50vDMQHOLYspuGcOwyeWZSluR5Zqx+A8fDf6Th2W1OY1eLxCuzyqCU5lQlxxZGVLYQEXmTEAVH7PYxvhruMae7Z3ErdQ4kIaWpeIzNpJUjKMoGcr1ICdKAf9IXGFMYzB9mnO8EP9inm87kZbmdhmUY6V6XgvDW+H4RWZWZSUrefcOq3IK1rUT4GJ2ArzPs+w7jOKuYvEtJbOEQhpCAvOErWCu6hYqSlZBi0kRpW19ILqlYZGFbJDmMcRh0xqEEhTqo\/ZCAQf3qA869gnXOFcOwiFhDmJWheYicoSlzElWXeCEWrU9nOHIfWU45bj+LYIK2niOzQfqutNpAQtCtlkE7GDWl2YVxNttI7mEwiiOi31pbQB\/wBNlXrVzj\/AU4kJWhxTOIbktPI95E6pI+u2d0mxoDZorC4MjiIcjFOYVTaQbtpWHFnYkKISjmYmelbtUBXl2P6VxNbmqMCgtIPPEPAFwg\/ZbCUnqs1q+0fFP0XDOPZcykgBCbkqWshKEgDmpSR61F7K8KOFwyG1nM4qVuq\/bdcOZZJ3uY8AKgKXAwl7HYzEiCG8mDbO\/wCrHaO3\/fcA\/wAHpSZxYTxPHv8A1MNhW0LO2YBbsTvCfvrO9mePt4XBltXfxinnx+jJMuqcU4spzJ1SkiCVm0Vou8DWzwrFoUc+JebedeKZ7zjiCSlP2QAEgdOtAXPo7YUjh2HKjK3Ap1R3JdWpcnyUKyvZHiQxfFOIPAgpaS1h0H7IUvMQeRWgnzFM4Xx0PYLDYPArzPqw7SFrAJThU9mlK1rOmcQoJTMlUbVI021wnFoGRScK8w2z2gSVBDrSllJcyi2cOE5uY5TAHuaxPaDCLedwjYSSgPds4YOUBlClICjoJcKIG+U9a20mQDsaqs8SaW8thKwXG0pUtIB7gX7kmIkgTEzF6AnxP9Wv9xX3GuLJZaSIDaR1A6dE12bHiWnP+Wv\/AEmvn5r2afgEYhUaTEgHSD3rCuVxpbZ1tpucHoY7MZhmybxAV42E8vzamEZjJjLcXQAR5nWsMcDeAEYpd9stjPLv39KsJ4Li0gFOJsDeUqt47Vy7qfZ17X6LaiG1a902MC32SI89OdNdTnuQDpEQAOmvwqN\/heJKYLzaptJS4D5ZZnzqsnh2MScodQoQJJkx6gR\/KpKfJrtjgkyqQcqbpHgTGw12NFQPcHxAv2yY3nnPgaKkr2M+j0j+IQoGXDPjbroInxrPspWRJVmUDcCAkDdVibjw8acl++UJtodTAOwm03tUmGfCUkIRlk8jJ6m1\/wCdZiCy2XFISE5UISSNyoSeZymfgd6jGJVHuojSNx1tP5NVl31UodJi3jVY4VxyUpEI5xr\/ABReolOw2kaKcS4sKS2FWPeWAIAEyBJmdqc5mSP6tA0JJV3jECTPzqLDYJxIAUsxAEHl5DQRS4ltaUSJ8CoCemUmT5VZ4RI5Z6f6Plkvr7wUOzOk276OZP5Fe\/Nc6+jllwYha3MologAXNnEXJropr1WlFJ5rjmoRQBEESDqDS0UldTAopgbTmKsozEQVQMxAuBOsSTan0lAAA1jXXrSzSUUAJQBMACbmBqeZ50xbCFKStSElSJKFEAlGYQrKfqyLGKkooBoSJJgSQATFyBMCeQk+pp00UlALRSCigApHKiiigG5BOaBm0mBMeNOoooCFjDobBDaEIBMkJSEgnmYFzUwNFJQC0xDKUqUpKUhS4zkASqBAzHeBa9PpRUBX4gqGXDybWf8prkOHfS5ISEkAaEKEc5ERXXeKf1Dv\/Lc\/wBCq4vJmxAAN5OluYHob\/dXnvLKO1p4ZZQwLqCBINxmid4kixI3BvPmLbWMSqR2akpAiARbmFZiKptYftNFkKSPtGSPqmqThvrcHRUgzPObia4xJ2mDaU0j7aUjXcp5AkCSOpP8pF4lOXKkFA1MJAk8zz0FZbanVwEqgjQ222gz0pzbbqZJEn9mdCLz3hBHhp1qdsmu6CZxhKh3VSeqb9bz0opgw+IJzRadJQdudhSU7SdxbhkDux5lREn\/AH3kVVccBtpyKTaCBIM28Kf2mUS2mBuCTPmRImmlztO8ErBNwMyspgzOgqqWHCKSmHFnvKIA5QPAkXrQQhWUd8rEDYnyMDw60xZWDtcQIifUH8BQlB1yrk\/WiPiBO2wqNzgqUZFWggd4LTNhFh5ztblVEhLapcdUpXLILGBtAv1N60G8IskmVgnkuB\/mAB9PuqPEYYAd4jxckRPLKIqykSGz0v0dPIViF5Fkw0QZAH9oj7vxroRrnP0dtxilwoKHYkSDI99FpjppXRjXqtfqeW5sKSikrqYFoopKAUUUlFAOopKKAKKSloAooooAoopagEFLTVKABJMACSeQGtcz4r7aPuLPYr7NAPdhKSVDmoqBieQjzrlev021LPb0XQXerqaojG29HTopIrnfA\/bV1By4g9omDCgAFA7aQFA6VnY72sxTqiQ4W07JTAgeJEk9furg+ttxOT3U\/gupdbpcJLnh\/wAOrUV4f2O9p3XHQw8rMVA5FkAGQJKVRY2mD03mvcV6Ldym5TKPm9X0tfTXOyve8aaKnGFAYd4nTsnJ8MipriZCIMeWoBGt9p9YrtnGCBh3p07Nzw90zNcSxb4zf1oUg6E23MAzcxzM2rF15Ri0sMXDvpFs2UQZteeRvBjn+TbS2laCQoTsCYnnbb461nrZJlX6snkIv5i01GHF6BKJOhnKY6iRNcZTO0M1sMwtMKDikAWJzGUj9nQg\/D8avnDlcq7QrIg96xnkQY33rGwyFxJQhUaxoRyPWpkNrPeTnF498AgctL8vnVJkmfbUmdAd4Fx6RIP5toU9knLIcWg8swJ3mdDrRQQOSwCAFLvIMgZoi8yr3RahEQU3WLQRAB8hPX+VSqbCUygGZ95ZInQe6AZF9hUHaFMhRg8sog9JV7vj8Kx8Nr2KrtCSLRFoCJ85FtOlGGQR3klIBOoUDtMTEU0FBuFQRsF6TM\/V8rW+NC3EhJUYEaE9SbGdTpTRNlwKVIssyOsbEbG9VX7nL2ayeYIgeISAf9qzjjCQQEmNNx476VYw6XLQjJ1uPU6+tO3kOrg9R9HWGDeJX3SCWlSTBnvt+Y866Ka557AGcWslQJ7Jc3n67fOuh167b\/5PNc\/YSkpTSV0OYUUlLQBS0lFALRRRQCUUUtAFFEUUAUUUUBHiGQtCkHRSSn+IEfjXGMdglsuKacEKSYPI8lDmCL12ysP2n9n04pu0JdQO6o6H7Kvsnnt6g+TqrDuUyto+v+H\/ACC6a41Vp7+fTlIFOCae9h1trUhaSlSbFJ1HzHUVo8E4S5inAhAgD3lbIH4q5D8Jr5Coqqq7Usn7W5fooodxtdu5NX2F4Upb4eI7rc35qIgAeAJJ8uddHqvgMGhltLaBASIHM8yTuTzqxX3LFrx0wfgPyHVvqrzr40v4Z\/tCvLhX1Xs24ba+6dJrkasS2sEuIX3vsoVHI2TtA3rrvH5\/RXoIB7NcE6TB1rlTSXF\/URm5yNRe5gAjzms3to5WtMxMQtsGxzR\/5eU+XLwpgcbOsfwD70nWtzFNuxAaSFEgpII1GthNiKz0IeJ7zPdm8pgE8p0I8K4L4dv6VMMtBVGY+YOX4EEVsjswPfSBGy1D5wZ61JAQB+oCSdCkA35R+fhUbLbZBUtpQJ+HKJNjVbIkh7KEaHvde0JnrGk0Ui2mTYhccwYI8DOhopIj4RrKlXg21MwNh600MlYgODnz2vvQ7iEi2VJJ0IOUnr3TNPQ6lYtM7c\/X5VJRYZInBICffSZ0gwP95qq9kA7yEETzB9AKc6hS5Fra3P3THOhHCc8KUSAPD0AI+JpORGCTDrA+oCNRr86lW4pQygECdJ9Bc1Itns0iFAk20+QsY51AkA3zX2mPlWXUVUo9H9HzeXFKBF+yXtAHfb8+tdFIri4cXFlLSdiheU30zKQQVeB5dKf+uCY7V3NuVPOW\/wA0nxrvRdVKg412nU5OyEUkVxVC3Jg4p47x26xy0KlaVLLgMJceiPfXiHfuzgHyNdPOjHhZ2WKWK4mrFupB\/XuK27rixHqTalQpxYKjicRYE911wDwhKhRXkyOy0driky1xBh1y4U\/iAZNy+6bfuhX401rFPrISXXgJhRLzogcwM80d5SPE4O5RRFcQcS6I\/peJ8n3YV6qp6Csa4nFE\/wDPX6TmN6eakeGo7ZFEVxQtL+tisSn\/ANQ4QPHvXnyp3aBE5n8QoWiMQ5P+ujvUoKzUztIFEVxRtalyrtMQB9X+kuj1Gb8asJSuP6zFH\/qun\/7zUd+lFVls7HFEVxSXFme0fSmYs+9J8Zct5VJmWL9o9F79s4fipV6rvIKyzs4FOAri7RK5leIHI9s7c7yAvxtTXElv3nMUUq37R05TtYnQ9d6eZE8TOs8V4IziQO0TJTooGFDpI1HQ1ZwOAbZQENoypHjJ6km5PU1xsIKhmLmIynQl11JI6hKvjUC2gR3cS7mEf27pAvcXUBWVXR3d0ZOlXldKodThcTg7kRRFcCSDIl948\/1zn\/6tV5eGQQP1roJ0\/XOGfIn8xV89JjwM6\/7QmMK8SVABtUlPvC2o61y7EYS2bO4qLkZTJTsRcSR49KotIbEELdUTMEuLiYnztep1vIiQ44kpGgOYHp3hPoK4XK1VUdrdt0oehRUCkOLCOSm1961okqipMShSUhQeEgd5KhE2sbkSflWY5ikSMrio+1Ig6kRIjpVlvEL\/AL+BbKFCYkRuOXXes\/DcFlt5RIzOtqkaGMvQzNjfltRiQ4BmBbgA3SSTHKBrHWs51LyPdfTCuY9RN7ee1StocJKcqF7m0\/A3HpQFzD8SAGUJC+oO9yZt99FMU3BBLSMsROZQExpAjlPnRQFbDcPzTNh11vVplhN5Ch1EESOhFRP4q0c\/McxEn8KiOIWTCUXPuxE8t\/yKjl6CxsuLSIyrcBEjVMR4EaHzphd7Oci5EEDMo7cj\/Oqpwjk5ioSQZkiRve9PcWE2SJURGs89In76NYKmhQtaiDcSLmSPidqarDgSorAEWAEz5xHnSJcXGUhQJ1UUwPIxFDrgBACys2ttO+u3gKINky3IAS2k30WQDM85GlQgm+dxAvEZI6Wjfr1pqlkiVEgzoPnF6nYWkE50CSO5qZHM3tT+k\/gnZROWSRqo+6OkTEfyphI3UTO18sdKmdZUrSAN+U+ut6ceHpEZiJ1tv4CkyEoK6XiSLAD4R+7F6mxT7htKQNhI+4jX+dPSsAHLE6iwmZi2bX4VRcxKs0gyonYxJNribD4VZ4H0bhcOCbpJPQxr5VoNYNAke6dT7vpNNQspTKyNJkLJ8oTPp1qD9KSsd1JidDa\/SJ58qPAWSZ9JAI1FxYjfxPzqPCYVIv3VE2AsTpcTPXlVZc3MnKNjcA8oIg705DpNwsjNqAVQI03tRJpBw2WFyDaAd\/qxppmMDbSpWkIWO8E2MKJyzbqBVUwSAHlA+BFrdVD4VO6tKYSkA9TM9ZkCop2VpPBYXiosL7yFRI84HlUTPZrMKAVzm58BE+ovWW4+SuJ58rDfnHpV5TqUDKkDYeZ3MUU7I40X3X0fVFxY6C3hzrPbUhajrCDcArN+VgIqJb7mYJSQVK2\/GBp6VdZWpKcqQkRyv42Vv0vSOWV+kSLxyQEhAiJ3AIiKaxiUuEjMpQMhWbLJ8MomJ61nYkuFQQAu8zJOguTHKOVWwsZYSggCAMo\/DeasxkkTgicxWUlK9UxuLp2I0Pl41LhlAjNEAyQO8ZHhF\/jUZxCFEGFKKLEqTECJP1r\/AMqdicSEpIIgKERklJB\/dg\/dUa5KvRVxBIcGRNiDKTJTJiDlIidbAVfwrCQPtWkJAEeVifSqLKEze+YciI8BJ6UxrHhOhIIsQDefAzY1CwmaOIwo8Aq86QRfyNp560uVOXKB+8LAg7kmAb8xzpGcQhaYUrvazrG86Qb1UCW80yBzi2m2sefhRueQqY4LDrSUkd1MK13E+Gv307CNNqBSQORBmCfL+elNXiEgBCcyQetvLagOqvBBULHvRPUTajcrZIhkznBmwkgohJ1IOh53pmG4bsQQBsIJ8brzAQfjUKMU7nyn3hyE22tpVnEuLsoGbCcoEkbHqQfvqy4EZGLwwHdueWqT5n50UxrGuyVQoDSDAzdYH5tRTJIKy3CgSP5jzqNvFKVO3xNupooqoE7l4J1M6W0gaDx+FQ4rEFsAjUfGbfhSUVaTL0WeFEviJy+EnbqahfTEotE6xflrS0VKioa1g86sqlEwR93KrZwYClAmcpgWA57aUlFZnJeCPAKJXrsT8R86finSkpjefKwNvWlorb2ZWii6\/m258id9TF6mxGHKSgFUhU6CNPMzRRR7KtCFzMkwII0OtuVRrBQmQbHUQPv2ooqMqFxDvd00nz61FnNkyfX8KKK0ZFYICSq5NyTNzEWmOtTugERe\/UdOnWiis1PJadCHDBCZBJm976GIqBzFECfzHLSiirwVbG4bFqiLd6+gt4W160\/iWJKYJuSR4X6GaKKjQWiTApGXNlTmP1sqZjlpVbiOJU2ru6yRPhG2lFFHsLRqtOqbQIgiLgpF51NZjjoKgkJgC4vtExaLbUUUjJeCy08SqDpNtJA1iYmLVHjW0Zh3BmP1jfkdKKKi2aeiwy4FgSkCRtaoOKYBKIUCZ1+MUUVinZurRE2xmCkyRli43k8ttfhVYJyq1nedKKK3To51FtGJUYMmTuTNuV6kexSiU306Dw5UUUSyKngsLxq4soiPD5UUUUewtH\/\/2Q=='>","ca2b5cea":"# Scatter plot","292a0cd1":"# Logistic  Regression","806b911c":"<img src='https:\/\/i.pinimg.com\/originals\/31\/3f\/09\/313f0907a1eff4ffee6ccb427300c59a.gif'>","4048a968":"# Categorial features","b2554fe7":"<img src=\"https:\/\/i.gifer.com\/8OMe.gif\">","06a00060":"# BMI"}}