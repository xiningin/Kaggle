{"cell_type":{"20d19e51":"code","86d9aa9d":"code","65241bb8":"code","30e31bc1":"code","d0cf671d":"code","37a13908":"code","aa154018":"code","08954f64":"markdown","0e1abfef":"markdown","ba9e3ff6":"markdown","099e5c75":"markdown","02bcdb18":"markdown"},"source":{"20d19e51":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom IPython.display import Image, display\n%matplotlib notebook","86d9aa9d":"country = pd.read_csv('..\/input\/world-telecommunications-data\/Metadata_Country_API_IT.CEL.SETS.P2_DS2_en_csv_v2.csv')\npopulation = pd.read_csv('..\/input\/world-bank-data-1960-to-2016\/country_population.csv')\nfertility_rate = pd.read_csv('..\/input\/world-bank-data-1960-to-2016\/fertility_rate.csv')\nlife_expectancy = pd.read_csv('..\/input\/world-bank-data-1960-to-2016\/life_expectancy.csv')","65241bb8":"def preprocess_df(df, value_name):\n    \"\"\" remove missing values and put years in one column\n    \n    Parameters\n    ----------\n    df: dataframe\n        the data that needs to be preprocessed\n\n    value_name: string\n        the name of the column that will contain the year's data\n\n    Return\n    ------\n    preprocessed dataframe\n    \"\"\"\n    years = [str(y) for y in range(1960, 2017)]\n    \n    # remove useless columns\n    df.drop(['Country Name', 'Indicator Name', 'Indicator Code'], axis=1, inplace=True)\n\n    # remove countries with missing value\n    df.dropna(axis=0, inplace=True)\n\n    # melt the dataframe to have years in one columns\n    df = pd.melt(df,\n                 id_vars='Country Code',\n                 value_vars=years,\n                 var_name='Year',\n                 value_name=value_name)\n\n    return df\n\ncountry = country[['Country Code', 'Region']]\npopulation = preprocess_df(population, 'Population')\nfertility_rate = preprocess_df(fertility_rate, 'Fertility Rate')\nlife_expectancy = preprocess_df(life_expectancy, 'Life Expectancy')","30e31bc1":"# Merge the data into one dataframe\ndf = pd.merge(country, population, how='left', on='Country Code')\ndf = pd.merge(df, life_expectancy, how='left', on=['Country Code', 'Year'])\ndf = pd.merge(df, fertility_rate, how='left', on=['Country Code', 'Year'])\n\n# Remove remaining lines with missing values\n# They will appear if a country is in one dataset but not in another one\ndf.dropna(axis=0, inplace=True)","d0cf671d":"# get a list of the years. I will create one frame per year.\nyears = df['Year'].unique().tolist()\n\nfig, ax = plt.subplots(figsize=(8, 8))\nax.set_xlim(df['Fertility Rate'].min() - .3,\n            df['Fertility Rate'].max() + .3)\nax.set_ylim(df['Life Expectancy'].min() - 2,\n            df['Life Expectancy'].max() + 2)\n\n# set the regions' colors\ncolors = {\n    'Latin America & Caribbean': '#2CA02C',\n    'South Asia': '#8C564B',\n    'Sub-Saharan Africa': '#E377C2',\n    'Europe & Central Asia': '#FF7F0E',\n    'Middle East & North Africa': '#D62728',\n    'East Asia & Pacific': '#1F77B4',\n    'North America': '#9467BD'\n}\n\n# create one scatterplot per region\n# I need to do like this to have all the regions \n# showing up in the legend\nscats = []\ngroups = df.groupby('Region')\nfor name, grp in groups:\n    scat = ax.scatter([], [],\n                    marker='o',\n                    color=colors[name],\n                    label=name,\n                    edgecolor='silver',\n                    alpha=.6)\n    scats.append(scat)\n\n# add the year in the middle of the scatter plot\n# for now, the text is empty (''). Il will be filled \n# in each frame\nyear_label = ax.text(4.5, 50, '', va='center', ha='center', alpha=.1,\n                    size=32, fontdict={'weight': 'bold'})\n\n# decorate the visualization\nax.spines['bottom'].set_color('silver')\nax.spines['top'].set_color('silver')\nax.spines['right'].set_color('silver')\nax.spines['left'].set_color('silver')\nax.tick_params(\n    labelcolor='silver',\n    color='silver'\n)\nax.set_xlabel('Fertility Rate', color='silver')\nax.set_ylabel('Life Expectancy', color='silver')\nax.legend(loc=1, fontsize=7)\n\n# set the initial state\ndef init():\n    for scat in scats:\n        scat.set_offsets([])\n    return scats,\n\n# function that will update the figure with new data\ndef update(year):\n    # I need to update all scatterplots one by one\n    # and return a list of updated plots\n    for scat, (name, data) in zip(scats, groups):\n        # get the data for the current year\n        sample = data[data['Year'] == year]\n        # set the x and y values \n        scat.set_offsets(sample[['Fertility Rate', 'Life Expectancy']])\n        # update the size of the markers with the population\n        # of the current year\n        scat.set_sizes(np.sqrt(sample['Population'] \/ 10000) * 5)\n        year_label.set_text(year)\n    return scats,\n\n# generate the animation\nani = animation.FuncAnimation(fig, update, init_func=init,\n                            frames=years,\n                            interval=200,\n                            repeat=True)\n\nplt.show()","37a13908":"# save the animation as an animated gif file\nani.save('best_stat_anim.gif', dpi=80, writer='imagemagick')","aa154018":"display(Image(url='best_stat_anim.gif'))","08954f64":"## Build the animation ","0e1abfef":"In a TED talk titled *\"The best stats you've ever seen\"* he gave in 2006, Hans Rosling showed the audience how we can use statistics to debunk misconceptions about the world.  \nHis talk can be seen [here](https:\/\/www.ted.com\/talks\/hans_rosling_shows_the_best_stats_you_ve_ever_seen). It's only 20 minutes long and if you haven't seen it yet, you really should.  \nIn this post, I am going to use matplotlib to replicate the animation he shows at the beginning of his talk. It shows the evolution of the fertility rate and the life expectancy of countries over the years. Hans Rosling built this animation when, after testing his students on global health, he realized that they still thought that the world was divided in two: \n- the western world: low fertility rate and high life expectancy\n- the third world: high fertilit rate and low life expectancy\n\nThere will be some differences between the original visualization and the one I am going to build:\n- more data. The talk was made in 2006 with data from 1962 to 2003. I will use data from 1960 to 2016.\n- regions. The original visualization has five regions. I will keep the regions from the source data (i.e. seven regions).\n- colors. I can't ge the exact colors of the regions. I'll use my own color mapping.","ba9e3ff6":"Then some preprocessing is needed.   \nFor each dataset, I remove the countries that have missing values. Some of them have too many years with out data (all years in some cases).","099e5c75":"Now that the data has been cleaned up, I can merge all the datasets into one dataframe I will use to build the animation.","02bcdb18":"## Prepare the data\nFirst, I load the data in separate dataframes"}}