{"cell_type":{"2ef5c0b4":"code","96d07170":"code","ec9b0c4b":"code","2b20516d":"code","626bbf2c":"code","eb45fe16":"code","26526e13":"code","84291fea":"code","fe07700d":"code","faf5224a":"code","efc06a6f":"code","e1c5f224":"code","2ee219c2":"code","3308e650":"code","6e06a825":"code","47007cba":"code","6e9def45":"code","1fae1db8":"code","84f6d842":"code","450e9da2":"code","135fba80":"code","6cd10f86":"code","4eab0ae7":"code","f1b64c70":"code","cd358e06":"code","bcec7c14":"markdown","b24a766b":"markdown","57f07009":"markdown","3c18b41f":"markdown","a7a3aa9c":"markdown","fecbc60e":"markdown","3f950f88":"markdown","da4e8b82":"markdown","69ea70cd":"markdown"},"source":{"2ef5c0b4":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.python.keras.layers.kernelized import RandomFourierFeatures \nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2","96d07170":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","ec9b0c4b":"train.head(2)","2b20516d":"y_train = train.label\ntrain.drop(columns=[\"label\"], inplace=True)\ny_train","626bbf2c":"x_train = train.values \/255\nx_test = test.values \/255\nx_train = x_train.reshape(-1,28,28,1)\nx_test = x_test.reshape(-1,28,28,1)","eb45fe16":"for index in range(15):\n    image = x_train[index]\n    label = y_train[index]\n    plt.subplot(1, 15, index + 1)\n    plt.imshow(image.reshape(28,28), cmap=\"binary\")\n    plt.axis(\"off\")\n    plt.title(str(label))","26526e13":"x_train = x_train.reshape(-1, 784).astype('float32') \/ 255\nx_test = x_test.reshape(-1, 784).astype('float32') \/ 255\n\nx_train,x_valid = train_test_split(x_train, test_size=0.3)\ny_train,y_valid = train_test_split(y_train, test_size=0.3)\nyvalid =y_valid \ny_valid.shape,x_valid.shape","84291fea":"y_train = keras.utils.to_categorical(y_train)\ny_valid = keras.utils.to_categorical(y_valid)\ny_train.shape,y_valid.shape","fe07700d":"keras.backend.clear_session()\nmodel = keras.Sequential()\nmodel.add(keras.layers.Input(shape=(784,)))\nfrr = RandomFourierFeatures(output_dim=4096,scale=10.,kernel_initializer='gaussian')\nmodel.add(frr)\nmodel.add(keras.layers.Dense(256, activation=\"relu\"))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.Dense(units=10))","faf5224a":"model.compile(loss=keras.losses.hinge, optimizer=keras.optimizers.RMSprop(lr=1e-4), metrics=[keras.metrics.CategoricalAccuracy(name='acc')])\nmodel.summary()","efc06a6f":"fit = model.fit(x_train, y_train, epochs=5, validation_split=0.2)","e1c5f224":"\nrff_loss = fit.history[\"loss\"]\nrff_val_loss = fit.history[\"val_loss\"]\nplt.plot(np.arange(len(rff_loss)) + 0.5, rff_loss, \"b.-\", label=\"Training loss\")\nplt.plot(np.arange(len(rff_val_loss)) + 1, rff_val_loss, \"r.-\", label=\"Validation loss\")\nplt.gca().xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))\nplt.axis([1, 5, 0, .6])\nplt.legend(fontsize=14)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.grid(True)\nplt.show()","2ee219c2":"model.evaluate(x_valid, y_valid)","3308e650":"p_valid = model.predict_classes(x_valid)\nnp.mean(keras.losses.mean_squared_error(yvalid, p_valid))\n","6e06a825":"predictions = model.predict_classes(x_test)\npredictions[:10]","47007cba":"keras.backend.clear_session()\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","6e9def45":"y_train = train.label\ntrain.drop(columns=[\"label\"], inplace=True)\ny_train = keras.utils.to_categorical(y_train)","1fae1db8":"x_train = train.values\nx_test = test.values\nx_train = x_train.reshape(-1,28,28,1).astype(np.float64)\nx_test = x_test.reshape(-1,28,28,1).astype(np.float64)\nx_train = x_train.astype(np.float64)\nx_test = x_test.astype(np.float64)\nx_train[1].shape","84f6d842":"keras.backend.clear_session()\nkernel_size = 3\nfilters=64\nmodel = keras.models.Sequential()\n\n#model.add(keras.Input(shape=(28, 28,1)))\n\nmodel.add(keras.layers.Conv2D(filters=filters,input_shape=(28, 28,1), kernel_size=kernel_size, activation=\"relu\"))\nmodel.add(keras.layers.MaxPool2D(2))\n\nmodel.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, activation=\"relu\"))\nmodel.add(keras.layers.MaxPool2D(2))\n\nmodel.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, activation=\"relu\"))\n\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dropout(0.2))\n\nmodel.add(keras.layers.Dense(10, activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nmodel.summary()","450e9da2":"plateau_callback = keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy', patience=2, verbose=1, factor=.5, min_lr=.00001)\ncallbacks=[plateau_callback]\n\nfit = model.fit(x_train, y_train, epochs=50, validation_split=0.3,callbacks=[plateau_callback], batch_size=128)","135fba80":"loss = fit.history[\"loss\"]\nval_loss = fit.history[\"val_loss\"]\nplt.plot(np.arange(len(loss)) + 0.5, loss, \"b.-\", label=\"Training loss\")\nplt.plot(np.arange(len(val_loss)) + 1, val_loss, \"r.-\", label=\"Validation loss\")\nplt.gca().xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))\nplt.axis([1, 5, 0, .5])\nplt.legend(fontsize=14)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.grid(True)\nplt.show()\n\nacc = fit.history[\"accuracy\"]\nval_acc = fit.history[\"val_accuracy\"]\nplt.plot(np.arange(len(loss)) + 0.5, acc, \"b.-\", label=\"Training acc\")\nplt.plot(np.arange(len(val_loss)) + 1, val_acc, \"r.-\", label=\"Validation acc\")\nplt.gca().xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))\nplt.axis([1, 5, 1, .9])\nplt.legend(fontsize=14)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Acc\")\nplt.grid(True)\nplt.show()\n","6cd10f86":"predictions = model.predict_classes(x_test)\npredictions[:10]","4eab0ae7":"for index in range(10):\n    image = x_test[index]\n    label = predictions[index]\n    plt.subplot(1, 10, index + 1)\n    plt.imshow(image.reshape(28,28), cmap=\"binary\")\n    plt.axis(\"off\")\n    plt.title(str(label))","f1b64c70":"submission['Label'] = predictions\nsubmission.to_csv(\"submission_cnn.csv\" , index = False)\nsubmission.head()","cd358e06":"loss = fit.history[\"loss\"]\nplt.plot(np.arange(len(rff_loss)) + 1, rff_loss, \"r.-\", label=\"RFF loss\")\nplt.plot(np.arange(len(loss)) + 1, loss, \"g.-\", label=\"CNN loss\")\nplt.gca().xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))\nplt.axis([1, 5, 0, .6])\nplt.legend(fontsize=14)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.grid(True)\nplt.show()","bcec7c14":"*Resultado*","b24a766b":"# RFF vs CNN\n<hr\/>","57f07009":"# ![](https:\/\/www.emoticonsignificado.com.br\/img\/emojis\/brain_1f9e0.png) CNN.\n","3c18b41f":"**Labels em tipo  categ\u00f3rico  (one hot)**","a7a3aa9c":"**Previs\u00f5es ing\u00eanuas **","fecbc60e":"# [Random Fourier Features](https:\/\/gregorygundersen.com\/blog\/2019\/12\/23\/random-fourier-features\/)\n#### *(Recursos aleat\u00f3rios de Fourier)*\n\nO RFF \u00e9 uma t\u00e9cnica amplamente usada, para expandir os m\u00e9todos do kernel, deixando-os mais simples e eficaz.\n\n*O artigo de Rahimi e Recht, de 2007, \"Recursos Aleat\u00f3rios para M\u00e1quinas de Kernel em Grande Escala\", introduz uma estrutura para aproxima\u00e7\u00f5es aleat\u00f3rias e de baixa dimens\u00e3o das fun\u00e7\u00f5es do kernel. Discuto este artigo em detalhes, com foco em recursos aleat\u00f3rios de Fourier.* \n![](https:\/\/gregorygundersen.com\/image\/rff\/motivation.png)","3f950f88":"*View*...","da4e8b82":"![](https:\/\/www.emoticonsignificado.com.br\/img\/emojis\/crown_1f451.png)","69ea70cd":"# MNIST (Modified National Institute of Standards and Technology )\n\nNosso dataset\n![](https:\/\/www.researchgate.net\/profile\/Yuling_Jiao2\/publication\/330617733\/figure\/fig1\/AS:718798407602176@1548386303228\/Real-samples-and-generated-samples-obtained-by-VGrow-KL-on-MNIST.ppm)"}}