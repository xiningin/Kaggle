{"cell_type":{"d4b4b50c":"code","8a3f5abc":"code","757eb470":"code","ad8259cf":"code","ad201c86":"code","1fe29dd9":"code","cc72e561":"code","b6a62c75":"code","41d3c80e":"code","d5e44cb1":"code","921bb3ed":"code","61ed1dc3":"code","cdc4188b":"code","2e3459f1":"code","0ae51521":"code","d74b8121":"code","5ff5156f":"markdown","bbc7381a":"markdown","9791c2ee":"markdown","e449b1b4":"markdown","52da877c":"markdown","239b6fae":"markdown","f43f8e48":"markdown","5655fc7e":"markdown","eed5ac39":"markdown","6e094096":"markdown","0b8c810f":"markdown","e010bd30":"markdown"},"source":{"d4b4b50c":"import plotly as py\nfrom plotly import graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nfrom plotly import tools\n\nimport numpy as np\nimport pandas as pd","8a3f5abc":"init_notebook_mode(connected=True)","757eb470":"# Load the data\ndf = pd.read_csv('..\/input\/Pokemon.csv')\n\ndf.head()","ad8259cf":"#Let's normalize the data first (fill the empty value in 'Type 2' column)\ndf['Type 2'].fillna('', inplace=True)\n\n# Next, list all types of pokemon\ntypes = df['Type 1'].unique()\ntypes2 = np.insert(types, 18, '')\n\n# Now we can count all Pokemon based on their types (type 1 & type 2)\ntypes_count = []\nfor t in types:\n    criteria_1 = df['Type 1'] == t\n    criteria_2 = df['Type 2'] == t\n    \n    types_count.append(len(df[criteria_1 | criteria_2]))\n    \n# We do the same thing with Type 1 and Type 2 only\ntype1_count = []\nfor t in types:\n    criteria = df['Type 1'] == t\n    type1_count.append(len(df[criteria]))\n\ntype2_count = []\nfor t in types2:\n    criteria = df['Type 2'] == t\n    type2_count.append(len(df[criteria]))","ad201c86":"# Color list based on actual types color in game\ncolors = ['#78C850', '#F08030', '#6890F0', '#A8B820', '#A8A878', '#A040A0', '#F8D030', '#E0C068',\n         '#EE99AC', '#C03028', '#F85888', '#B8A038', '#705898', '#98D8D8', '#7038F8', '#705848', '#B8B8D0',\n         '#A890F0', '#353535']","1fe29dd9":"# Make a bar chart\ntrace_bar = go.Bar(x = types,\n                   y = types_count,                   \n                   marker=dict(color=colors)\n                  )\n\nlayout = go.Layout(title='<b>Total Number of Pokemon Based on Type<\/b>',\n                   height=650,\n                   margin=go.layout.Margin(                   \n                   pad=5)\n                  )\n\ndata = [trace_bar]\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cc72e561":"# Now lets we set for each generation\n\ntypes_count = []\ntypes_count_1 = []\ntypes_count_2 = []\ntypes_count_3 = []\ntypes_count_4 = []\ntypes_count_5 = []\ntypes_count_6 = []\n\nfor t in types:\n    criteria_1 = df['Type 1'] == t\n    criteria_2 = df['Type 2'] == t\n    criteria_all = criteria_1 | criteria_2\n    \n    types_count.append(len(df[criteria_all]))\n    types_count_1.append(len(df[criteria_all & (df['Generation'] == 1)]))\n    types_count_2.append(len(df[criteria_all & (df['Generation'] == 2)]))\n    types_count_3.append(len(df[criteria_all & (df['Generation'] == 3)]))\n    types_count_4.append(len(df[criteria_all & (df['Generation'] == 4)]))\n    types_count_5.append(len(df[criteria_all & (df['Generation'] == 5)]))\n    types_count_6.append(len(df[criteria_all & (df['Generation'] == 6)]))  ","b6a62c75":"trace_1 = go.Bar(x = types,\n                 y = types_count_1,\n                 marker=dict(color=colors))\n\ntrace_2 = go.Bar(x = types,\n                 y = types_count_2,\n                 marker=dict(color=colors))\n\ntrace_3 = go.Bar(x = types,\n                 y = types_count_3,\n                 marker=dict(color=colors))\n\ntrace_4 = go.Bar(x = types,\n                 y = types_count_4,\n                 marker=dict(color=colors))\n\ntrace_5 = go.Bar(x = types,\n                 y = types_count_5,\n                 marker=dict(color=colors))\n\ntrace_6 = go.Bar(x = types,\n                 y = types_count_6,\n                 marker=dict(color=colors))\n\n# data = [trace_1, trace_2, trace_3, trace_4, trace_5, trace_6]\n\n\nfig = tools.make_subplots(rows=3, cols=2, subplot_titles=('Generation 1', 'Generation 2',\n                                                          'Generation 3', 'Generation 4',\n                                                          'Generation 5', 'Generation 6'),\n                          horizontal_spacing = 0.1,\n                          vertical_spacing = 0.22,\n                          print_grid=False\n                         )\n\n\nfig.append_trace(trace_1, 1, 1)\nfig.append_trace(trace_2, 1, 2)\nfig.append_trace(trace_3, 2, 1)\nfig.append_trace(trace_4, 2, 2)\nfig.append_trace(trace_5, 3, 1)\nfig.append_trace(trace_6, 3, 2)\n\nfig['layout'].update(title='<b>Number of Pokemon for Each Generation<\/b>',\n                   height=670,\n                   margin=go.layout.Margin(pad=5),\n                   showlegend=False,\n                   \n                    )\n\niplot(fig)","41d3c80e":"# Make bar chart to compare between pokes who have 2 type and who don't\nlabels = ['Single Type', 'Double Type']\nnotype2 = [len(df[df['Type 2'] != '']), len(df[df['Type 2'] == '']) ]\n\ntrace = go.Pie(labels=labels,\n               values=notype2,\n               textfont=dict(size=19, color='#FFFFFF'),\n               marker=dict(\n                   colors=['#DB0415', '#2424FF'] \n               )\n              )\n\nlayout = go.Layout(title = '<b>Single Type vs Double Type<\/b>')\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","d5e44cb1":"z1 = np.array([])\nz2 = []\nz3 = np.array([])\nfor t2 in types2: \n    for t1 in types:\n        criteria1 = df['Type 1'] == t1\n        criteria2 = df['Type 2'] == t2\n        z2_val = len(df[criteria1 & criteria2])\n        z2.append(z2_val)\n    z1 = np.append(z1,[z2])\n    z2.clear()\n\n\nz3 = np.reshape(z1, (19, 18))\n\n# Make heatmap graph\ntrace = go.Heatmap(z=z3,\n                   x=types,\n                   y=types2,\n                   colorscale='Hot',\n                   reversescale=True\n                  )\n\nlayout = go.Layout(\n    title='<b>Type 1 - Type 2 Relation<\/b>',\n    xaxis = dict( title='<b>Type 1<\/b>'),\n    yaxis = dict(title='<b>Type 2<\/b>' ),\n    \n)\n\ndata=[trace]\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","921bb3ed":"# Now Let's Move to Stats Section\ndf_gen_1 = df[df['Generation'] == 1]\ndf_gen_2 = df[df['Generation'] == 2]\ndf_gen_3 = df[df['Generation'] == 3]\ndf_gen_4 = df[df['Generation'] == 4]\ndf_gen_5 = df[df['Generation'] == 5]\ndf_gen_6 = df[df['Generation'] == 6]\n\ntotal_list = [df_gen_1['Total'].mean(), df_gen_2['Total'].mean(), df_gen_3['Total'].mean(),\n           df_gen_4['Total'].mean(), df_gen_5['Total'].mean(), df_gen_6['Total'].mean()]\ntotal_list = [int(i) for i in total_list]\n# print(results)\n\ntrace = go.Scatter(x=df['Generation'].unique(),\n                   y=total_list,\n                   name='Mean of Total Stats'\n                  )\nlayout = go.Layout(title='<b>Average Total Status in Each Generation<\/b>',\n                  showlegend=True,\n                  yaxis=dict(\n                    range=[400, 480],\n                    dtick=10)\n                  )\n\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","61ed1dc3":"status_type = ['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']\n\nall_stats_1 = [df_gen_1['HP'].mean(), df_gen_1['Attack'].mean(), df_gen_1['Defense'].mean(),\n               df_gen_1['Sp. Atk'].mean(), df_gen_1['Sp. Def'].mean(), df_gen_1['Speed'].mean()]\n\nall_stats_2 = [df_gen_2['HP'].mean(), df_gen_2['Attack'].mean(), df_gen_2['Defense'].mean(),\n               df_gen_2['Sp. Atk'].mean(), df_gen_2['Sp. Def'].mean(), df_gen_2['Speed'].mean()]\n\nall_stats_3 = [df_gen_3['HP'].mean(), df_gen_3['Attack'].mean(), df_gen_3['Defense'].mean(),\n               df_gen_3['Sp. Atk'].mean(), df_gen_3['Sp. Def'].mean(), df_gen_3['Speed'].mean()]\n\nall_stats_4 = [df_gen_4['HP'].mean(), df_gen_4['Attack'].mean(), df_gen_4['Defense'].mean(),\n               df_gen_4['Sp. Atk'].mean(), df_gen_4['Sp. Def'].mean(), df_gen_4['Speed'].mean()]\n\nall_stats_5 = [df_gen_5['HP'].mean(), df_gen_5['Attack'].mean(), df_gen_5['Defense'].mean(),\n               df_gen_5['Sp. Atk'].mean(), df_gen_5['Sp. Def'].mean(), df_gen_5['Speed'].mean()]\n\nall_stats_6 = [df_gen_6['HP'].mean(), df_gen_6['Attack'].mean(), df_gen_6['Defense'].mean(),\n               df_gen_6['Sp. Atk'].mean(), df_gen_6['Sp. Def'].mean(), df_gen_6['Speed'].mean()]\n\n\nall_stats_1 = [int(i) for i in all_stats_1]\nall_stats_2 = [int(i) for i in all_stats_2]\nall_stats_3 = [int(i) for i in all_stats_3]\nall_stats_4 = [int(i) for i in all_stats_4]\nall_stats_5 = [int(i) for i in all_stats_5]\nall_stats_6 = [int(i) for i in all_stats_6]\n\ntrace1 = go.Scatter(x = status_type,\n                    y = all_stats_1,\n                    name = 'Generation 1')\n\ntrace2 = go.Scatter(x = status_type,\n                    y = all_stats_2,\n                    name = 'Generation 2')\n\ntrace3 = go.Scatter(x = status_type,\n                    y = all_stats_3,\n                    name = 'Generation 3')\n\ntrace4 = go.Scatter(x = status_type,\n                    y = all_stats_4,\n                    name = 'Generation 4')\n\ntrace5 = go.Scatter(x = status_type,\n                    y = all_stats_5,\n                    name = 'Generation 5')\n\ntrace6 = go.Scatter(x = status_type,\n                    y = all_stats_6,\n                    name = 'Generation 6')\n\ndata = [trace1,trace2, trace3, trace4, trace5, trace6]\n\nlayout = go.Layout(title='<b>Each Generation Stats Comparison<\/b>',\n                  showlegend=True,\n                  yaxis=dict(\n                    range=[60, 85],\n                    dtick=5)\n                  )\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n\n","cdc4188b":"# Status Comparison per each Type\n\ntotal_mean_values = []\nfor t in types:\n    criteria_1 = df['Type 1'] == t\n    criteria_2 = df['Type 2'] == t\n    criteria = criteria_1 | criteria_2\n    df_type = df[criteria]\n    total_mean = df_type['Total'].mean()\n    total_mean_values.append(total_mean)\n    \n# Horizontal\ntrace_bar = go.Bar(x = total_mean_values,\n                   y = types,\n                   orientation = 'h',\n                   marker=dict(color=colors)\n                  )\n\nlayout = go.Layout(\n                    title='<b>Average Total Power for Each Types<\/b>',\n                    margin=go.layout.Margin(                   \n                        pad=5),\n                    xaxis=dict(\n                            range=[350, 550],\n                            dtick=50)\n                  )\ndata = [trace_bar]\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","2e3459f1":"labels = ['Ordinary', 'Legendary']\nvalues = [len(df[df['Legendary'] == False]), len(df[df['Legendary'] == True])]\ncolors_pie = ['#4777BA', '#DC2634', '#FFC009', '#FBFF09']\n\ntrace = go.Pie(labels=labels, \n               values=values,\n               textfont=dict(size=16),\n               marker=dict(\n                   colors=colors_pie,\n#                    line=dict(color='#000000', width = 0.8)\n               )\n              )\n\n\nlayout = go.Layout(\n                    title='<b>How Many Legendaries Out There?<\/b>',\n                    margin=go.layout.Margin(                   \n                        pad=5)\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","0ae51521":"count_ordinary_list = []\nfor i in range(1,7):\n    criteria_1 = df['Legendary'] == False\n    criteria_2 = df['Generation'] == i\n    count_ordinary = df[criteria_1 & criteria_2]\n    count_ordinary = len(count_ordinary)\n    count_ordinary_list.append(count_ordinary)\n    \ncount_legendary_list = []\nfor i in range(1,7):\n    criteria_1 = df['Legendary'] == True\n    criteria_2 = df['Generation'] == i\n    count_legendary = df[criteria_1 & criteria_2]\n    count_legendary = len(count_legendary)\n    count_legendary_list.append(count_legendary)\n    \ntrace1 = go.Bar(x = df['Generation'].unique(),\n               y = count_ordinary_list,\n               name = 'Ordinary')\n\ntrace2 = go.Bar(x = df['Generation'].unique(),\n               y = count_legendary_list,\n               name = 'Legendary')\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n    title='<b>Number of Ordinaries vs Legendaries Pokemon in Each Gen<\/b>',\n    barmode='group',\n    xaxis=dict(\n        title='Generation',\n        titlefont=dict(\n            family='Arial, sans-serif',\n            size=19,\n            color='grey'\n        ),\n        tickfont=dict(\n            family='Arial, serif',\n            size=14,\n            color='black'\n        )\n    )\n    \n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","d74b8121":"df_ordinary = df[df['Legendary'] == False]\nordinary_stats = []\nfor i in range(5,11):\n    m = df_ordinary.iloc[:,i].mean()\n    ordinary_stats.append(round(m))\n\ndf_legendary = df[df['Legendary'] == True]\nlegendary_stats = []\nfor i in range(5,11):\n    m = df_legendary.iloc[:,i].mean()\n    legendary_stats.append(round(m))\n\ndata = [\n    go.Scatterpolar(\n      r = legendary_stats,\n      theta = status_type,\n      fill = 'toself',\n      name = 'Legendary'\n    ),\n    go.Scatterpolar(\n      r =ordinary_stats,\n      theta = status_type,\n      fill = 'toself',\n      name = 'Ordinary'\n    )\n]\n\nlayout = go.Layout(\n    title = '<b>Ordinary vs Legendary Stats Comparison<\/b>',\n    polar = dict(\n        radialaxis = dict(\n          visible = True,\n          range = [0, 150]\n        )\n      ),\n    showlegend = True\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5ff5156f":"It's shown that Generation IV Pokemons have higher points almost in every stats. The opposite from that Generation II has almost lower stats in every aspect, especially Sp. Attack and Speed.","bbc7381a":"# Data\n\nThe dataset has **800 rows** and **11 columns**. It includes 721 Pokemons from Generation I to Generation VI. Mega Pokemons also included and they share the same ID number as their former form, that's explain why the row is increased to 800.","9791c2ee":"It's interesting that most of the Pokemons are single typed. Let's see the combination on each type with a heatmap.","e449b1b4":"# Status","52da877c":"Whoa Generation IV has the highest total stats. Let's see each status comparison too!","239b6fae":"There are 18 Pokemon type exist. Although some types was created in the late versions the data is updated and follow the latest version (e.g Clefairy & Mr. Mime which change from Normal-Fairy type).","f43f8e48":"In Pokemon they are 6 status that every Pokemon has.\n- HP : Hit Points, determine how much damage a Pok\u00e9mon can receive before fainting.\n- Attack : Determines how much damage a Pok\u00e9mon deals when using a physical move.\n- Defense : Determines how much damage a Pok\u00e9mon receives when it is hit with a physical move.\n- Sp. Attack : Determines how much damage a Pok\u00e9mon deals when using a special move.\n- Sp. Defense : Determines how much damage a Pok\u00e9mon receives when it is hit with a special move.\n- Speed : Determines who will attack first in a battle.","5655fc7e":"# Pokemon Type","eed5ac39":"First I want to count the Pokemon based on their type. It's counted wether they are in Type 1 or in Type 2. For example, Charizard will also counted as Flying type since his Type 2 = Flying.\nP.S : I also make the type bar color same like their color in the game.","6e094096":"It's not a surprise if Legendary Pokemons are all strong. Now we can see the comparison of their overwhelming stats above.","0b8c810f":"# Legendaries","e010bd30":"As I expected, Dragon pokemons are the most powerful type in the Pokemon world since many legendaries also have this type following with Steel and Psyhic type."}}