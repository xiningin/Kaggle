{"cell_type":{"ad298579":"code","055e2b01":"code","d9819ab5":"code","254f1a71":"code","305bf0a0":"code","7fb96a91":"code","e630b0c1":"code","b0b598e5":"code","f369930b":"code","84936984":"code","47c3859c":"code","2b2c25f6":"code","e004a8d2":"code","0d62ef13":"code","c4ac6525":"code","0d98e5f2":"markdown","024bd9e3":"markdown","8a883a86":"markdown","b2ecb4df":"markdown","ce13be1b":"markdown","7c9d2d69":"markdown","94a82e0e":"markdown","ef677552":"markdown","42b2ce51":"markdown","39a1e50b":"markdown","ae081040":"markdown","83404386":"markdown","f0ba6560":"markdown","491e234a":"markdown","84d86042":"markdown","7845f254":"markdown","138623c8":"markdown","493d0d20":"markdown"},"source":{"ad298579":"import pandas as pd \nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates","055e2b01":"df = pd.DataFrame(dict(\n    name=\"Joe Sally Mo Joe Sally Mo Joe Sally Mo\".split(),\n    date= pd.to_datetime([\n        \"10\/27\/2020\", \"10\/27\/2020\", \"10\/27\/2020\", \n        \"10\/28\/2020\", \"10\/28\/2020\", \"10\/28\/2020\",\n        \"10\/29\/2020\", \"10\/29\/2020\", \"10\/29\/2020\",\n    ]),\n    value=[5, 7, 3, 4, 8, 4, 6, 9, 3],\n))\n\ndf","d9819ab5":"df.pivot(index='date', columns='name', values='value').plot()","254f1a71":"df[\"value\"] = [\"Arrest\",\"Arrest\",\"Arrest\",\"Hearing\",\"Hearing\",\"Hearing\",\"Trial\",\"Trial\",\"Trial\"]\ndf[\"date\"] = pd.to_datetime([\n        \"10\/27\/2020\", \"10\/28\/2020\", \"10\/29\/2020\", \n        \"10\/28\/2020\", \"10\/30\/2020\", \"10\/31\/2020\",\n        \"10\/29\/2020\", \"11\/01\/2020\", \"11\/03\/2020\",\n    ])\ndf","305bf0a0":"dfp = df.pivot(index='date', columns='name', values='value')\ndfp","7fb96a91":"person = \"Mo\"\nperson","e630b0c1":"mask = ~dfp[person].isna()\nmask","b0b598e5":"filtered_index = dfp.index[mask]\nfiltered_index","f369930b":"filtered_values = dfp[person][mask].values\nfiltered_values","84936984":"levels = np.array([1]*len(filtered_index))\nlevels","47c3859c":"vert = np.array(['top']*len(filtered_index))\nvert","2b2c25f6":"# Create figure and plot a stem plot with the date \n# Note: I changed the figsize arg to make the plot a tiny bit larger in the notebook.\nfig, ax = plt.subplots(figsize=(10, 4), constrained_layout=True)\n\n# Here I use f-strings to update the plot title to the name of the person\nax.set(title=f\"{person}'s Judical Timeline\")\n\n# Next we swap the dates varaible with our filtered_index variable\n# Also note that the levels varible is created diffrently from the \n# orginal example code.\nmarkerline, stemline, baseline = ax.stem(filtered_index, levels,\n                                         linefmt=\"C3-\", basefmt=\"k-\",\n                                         use_line_collection=True)\n\nplt.setp(markerline, mec=\"k\", mfc=\"w\", zorder=3)\n\n# Shift the markers to the baseline by replacing the y-data by zeros.\n# Here again we change dates to our filtered_index var\nmarkerline.set_ydata(np.zeros(len(filtered_index)))\n\n# annotate lines\n# Here we use our own `filtered_index`, `levels`, `filtered_values`, `vert` in \n# place of the sample's `dates`, `levels`, `names`, `vert` variables:\nfor d, l, r, va in zip(filtered_index, levels, filtered_values, vert):\n    ax.annotate(r, xy=(d, l), xytext=(-3, np.sign(l)*3),\n                textcoords=\"offset points\", va=va, ha=\"right\")\n    \n# format xaxis\n# I cut a line here and changed the format of the dates on the timeline\n# After that the rest of the code is unchaged from the orginal matplotlib example\nax.get_xaxis().set_major_formatter(mdates.DateFormatter(\"%b %d, %Y\"))\nplt.setp(ax.get_xticklabels(), rotation=30, ha=\"right\")\n\n# remove y axis and spines\nax.get_yaxis().set_visible(False)\nfor spine in [\"left\", \"top\", \"right\"]:\n    ax.spines[spine].set_visible(False)\n\nax.margins(y=0.1)\nplt.show()","e004a8d2":"def make_timeline_plot(pivot_frame, lookup_column, level_height=1, vert_orriant='top', fig_size=(10, 4), fig_title=\"Timeline\", dt_format=\"%b %d, %Y\"):\n    mask = ~pivot_frame[lookup_column].isna()\n    filtered_index = pivot_frame.index[mask]\n    filtered_values = pivot_frame[lookup_column][mask].values\n    levels = np.array([level_height]*len(filtered_index))\n    vert = np.array([vert_orriant]*len(filtered_index))\n    fig, ax = plt.subplots(figsize=fig_size, constrained_layout=True)\n    ax.set(title=fig_title)\n    markerline, stemline, baseline = ax.stem(filtered_index, levels,\n                                         linefmt=\"C3-\", basefmt=\"k-\",\n                                         use_line_collection=True)\n    plt.setp(markerline, mec=\"k\", mfc=\"w\", zorder=3)\n    markerline.set_ydata(np.zeros(len(filtered_index)))\n    for d, l, r, va in zip(filtered_index, levels, filtered_values, vert):\n        ax.annotate(r, xy=(d, l), xytext=(-3, np.sign(l)*3),\n                    textcoords=\"offset points\", va=va, ha=\"right\")\n    ax.get_xaxis().set_major_formatter(mdates.DateFormatter(dt_format))\n    plt.setp(ax.get_xticklabels(), rotation=30, ha=\"right\")\n    ax.get_yaxis().set_visible(False)\n    for spine in [\"left\", \"top\", \"right\"]:\n        ax.spines[spine].set_visible(False)\n    ax.margins(y=0.1)\n    plt.show()","0d62ef13":"person = \"Joe\"\nmake_timeline_plot(dfp, person, fig_title=f\"{person}'s Judical Timeline\")","c4ac6525":"person = \"Sally\"\nmake_timeline_plot(dfp, person, fig_title=f\"{person}'s Judical Timeline\", level_height=-1, vert_orriant='bottom', fig_size=(15, 5), dt_format=\"%b %d, %Y - %H:%M\")","0d98e5f2":"# Links:\n## Source Reddit Post: \n* https:\/\/www.reddit.com\/r\/learnpython\/comments\/kbyy3w\/trying_to_display_a_timeline_for_certain_cases\/\n\n## Related SO Post: \n* https:\/\/stackoverflow.com\/questions\/29233283\/plotting-multiple-lines-with-pandas-dataframe\n\n## Helpful Pandas Docs:\n* https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.pivot.html\n* https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.plot.html\n* https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.to_datetime.html\n","024bd9e3":"# Pivot the fixed DF\nJust like we did earlier we'll want to pivot our DataFrame. but this time lets assign it to a variable becouse we are going to pull data out of it multiple times.","8a883a86":"Same goes for sally, but this time we are providing additional arugments that change how the plot is displayed. ","b2ecb4df":"# Using the Mask to Filter the index\nNext we'll want to use that mask as the assceoor argument on the pivoted df's index which is all the dates that that person has data for.","ce13be1b":"# OP Followup\nTurns out I misunderstood OP's situtation and they left the following [comment](https:\/\/www.reddit.com\/r\/learnpython\/comments\/kbyy3w\/trying_to_display_a_timeline_for_certain_cases\/gfn4c6r?utm_source=share&utm_medium=web2x&context=3):\n> Wow, this is a really neat way to demonstrate, thanks for taking the time to make it! There's actually a key distinction that I now realized I failed to make: the values for each date are various strings, not number values. My apologies for not explaining properly - I'm still pretty new so I forgot there are important differences in descriptions. My (hopeful) end goal is to be able to choose\/enter a person from my dataset and display a personalized timeline as a visual aide that shows each event and the date it happened.\n>\n>This is a quick drawing of what I'm after using the example df from your notebook: https:\/\/imgur.com\/ohsIW97\n>\n>So I realize it's probably more difficult because I can't just use dates and number values as the two axes. Is there a way I can modify the chart like this?\n\nMy [response](https:\/\/www.reddit.com\/r\/learnpython\/comments\/kbyy3w\/trying_to_display_a_timeline_for_certain_cases\/gfq2kc4?utm_source=share&utm_medium=web2x&context=3):\n>>Oh interesting. I personally have not made a chart like that before so don't have any good solutions at the top of my head. A quick google search and this matplotlib example looks promising: https:\/\/matplotlib.org\/3.1.1\/gallery\/lines_bars_and_markers\/timeline.html\n>>\n>>I don't have time right now to try play around with it to make a code example that fits your use case, but hopefully you can figure something out...\n\nNow that I have found the time to play around with the code example here is how you can atapt it to work for your dataset:","7c9d2d69":"# A simple CLI to request person to look up\nA simple text based input loop that gets the name you want to display in the timeline and validates it for typos by checking that the user input is in df would look like this:\n\n```python\nwhile True:\n    person = input(\"Enter the name of the defendent (i.e. Joe, Sally or Mo):\")\n    if person in dfp.columns:\n        break\n    print(f\"{person} not in database. Try again.\")\n    \n```\nSince we are using a ipython notebook that code cant be handled by the kaggle publisher so for this note book's purposes we'll hard code `person = \"Mo\"` ","94a82e0e":"# Import Dependacies","ef677552":"# Create Sample DF\n\nThe below code creates a DataFrame based off of the description provided:\n> The data I'm working with: a dataframe with column1 for person name, column2 for specific dates, and column3 for values associated with those dates. Each person has multiple rows corresponding with different dates and values for those dates.","42b2ce51":"# Making our Vert array\nAll out lables can be on top so our vert array can just be `'top'` for each lable.","39a1e50b":"# Making our Levels array\nSince we are filtering down to just one person the levels of all our lables can just be `1` but we'll need a array of `1`s for each label ","ae081040":"# Make plot fron pivot DataFrame\nIf your goal is to:\n> Find a way to display a timeline for each individual person, which shows each date and its associated value\n\nThe easist way to do this is by using [pandas.DataFrame.pivot() method](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.pivot.html) on your df using the the column name of the column with dates as the argument for the `index` paramater, the column name of the column with your names as the arg `columns` param and the column name of the column with values as the arg for the `values` param. Then just call the [pandas.DataFrame.plot() method](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.plot.html) on the DataFrame object that gets returned from the pivot method call.","83404386":"# Dependancies\n## pandas\n* https:\/\/pandas.pydata.org\/pandas-docs\/stable\/getting_started\/install.html\n\n## matplotlib\n* https:\/\/matplotlib.org\/3.3.3\/users\/installing.html\n\n## numpy\n* https:\/\/numpy.org\/install\/","f0ba6560":"# Merging our varibles into the sample code:\nThe rest of the code I can't really split out into single line cells becouse it intilizes the plot at the first line and then makes it look right in the rest of the lines. The kaggle notebook just needs this all to happen in one cell for the chart to display correctly. \n\nWhen comparing aginst the below [sample code](https:\/\/matplotlib.org\/3.1.1\/gallery\/lines_bars_and_markers\/timeline.html):\n```python\n# Choose some nice levels\nlevels = np.tile([-5, 5, -3, 3, -1, 1],\n                 int(np.ceil(len(dates)\/6)))[:len(dates)]\n\n# Create figure and plot a stem plot with the date\nfig, ax = plt.subplots(figsize=(8.8, 4), constrained_layout=True)\nax.set(title=\"Matplotlib release dates\")\n\nmarkerline, stemline, baseline = ax.stem(dates, levels,\n                                         linefmt=\"C3-\", basefmt=\"k-\",\n                                         use_line_collection=True)\n\nplt.setp(markerline, mec=\"k\", mfc=\"w\", zorder=3)\n\n# Shift the markers to the baseline by replacing the y-data by zeros.\nmarkerline.set_ydata(np.zeros(len(dates)))\n\n# annotate lines\nvert = np.array(['top', 'bottom'])[(levels > 0).astype(int)]\nfor d, l, r, va in zip(dates, levels, names, vert):\n    ax.annotate(r, xy=(d, l), xytext=(-3, np.sign(l)*3),\n                textcoords=\"offset points\", va=va, ha=\"right\")\n\n# format xaxis with 4 month intervals\nax.get_xaxis().set_major_locator(mdates.MonthLocator(interval=4))\nax.get_xaxis().set_major_formatter(mdates.DateFormatter(\"%b %Y\"))\nplt.setp(ax.get_xticklabels(), rotation=30, ha=\"right\")\n\n# remove y axis and spines\nax.get_yaxis().set_visible(False)\nfor spine in [\"left\", \"top\", \"right\"]:\n    ax.spines[spine].set_visible(False)\n\nax.margins(y=0.1)\nplt.show()\n\n```\nwe can see that our final cell is largly unchaged from it except for maybe deleating an unnessicary line or two and placing our `person`, `filtered_index`, `levels`, `filtered_values` and `vert` variables at a few key places. See the below cells comments for notes on each change.","491e234a":"# Calling the function\nNow we can change our person varible to Joe and do a basic call of our fuction to get his plot:","84d86042":"# Packing this all into a function\nWhen building out an app or dashbord that is going to display this chart multiple times for varius people then it might be a good idea to bake this code into a function that can be paramartized.","7845f254":"# Using the Mask on the values\nNext we use the same mask to get an array of that persons values to plot","138623c8":"# Making a Filter Mask\nNext we'll need a mask since you'll notice that our `dfp`values have a bunch of `numpy.nan` objects for when a date exists for one person, but not the other.","493d0d20":"# Fix Sample DF\nThe below code modifys the sample DF to better fit OPs decription."}}