{"cell_type":{"3c43c29e":"code","eb64d420":"code","80476ec5":"code","af6200f9":"code","3077a005":"code","2058a29a":"code","c616b14b":"code","8e34282f":"code","a79eb627":"code","96219f36":"code","1842e620":"code","b67e5f15":"code","c51bc97a":"code","09961f7d":"code","7522cd5a":"code","fb3f0523":"code","d2132161":"markdown","05605613":"markdown","c02a1031":"markdown","d601f708":"markdown","77a5aa66":"markdown","92ef4ef5":"markdown","8e555624":"markdown","387b2d72":"markdown","4e301dae":"markdown","2657b1bd":"markdown","7658cbc9":"markdown","c65fb4e6":"markdown","ae084fcd":"markdown","b650175a":"markdown","9957d551":"markdown","7673cac3":"markdown","2f9c50fd":"markdown","519fa3ef":"markdown","4aac9bd3":"markdown","86a3689b":"markdown","4990118f":"markdown","fe38421b":"markdown","a73a3227":"markdown","edeb4812":"markdown","3a9b41d7":"markdown","4b467196":"markdown"},"source":{"3c43c29e":"import nltk                                  # Python library for NLP\nfrom nltk.corpus import twitter_samples      # sample Twitter dataset from NLTK\nimport matplotlib.pyplot as plt              # visualization library\nimport numpy as np                         # library for scientific computing and matrix operations\nfrom nltk.stem import PorterStemmer\nfrom nltk.corpus import stopwords\nimport re\nfrom nltk.tokenize import TweetTokenizer\nimport string","eb64d420":"def process_tweet(tweet):\n    \"\"\"Process tweet function.\n    Input:\n        tweet: a string containing a tweet\n    Output:\n        tweets_clean: a list of words containing the processed tweet\n\n    \"\"\"\n    stemmer = PorterStemmer()\n    stopwords_english = stopwords.words('english')\n    # remove stock market tickers like $GE\n    tweet = re.sub(r'\\$\\w*', '', tweet)\n    # remove old style retweet text \"RT\"\n    tweet = re.sub(r'^RT[\\s]+', '', tweet)\n    # remove hyperlinks\n    tweet = re.sub(r'https?:\\\/\\\/.*[\\r\\n]*', '', tweet)\n    # remove hashtags\n    # only removing the hash # sign from the word\n    tweet = re.sub(r'#', '', tweet)\n    # tokenize tweets\n    tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True,\n                               reduce_len=True)\n    tweet_tokens = tokenizer.tokenize(tweet)\n\n    tweets_clean = []\n    for word in tweet_tokens:\n        if (word not in stopwords_english and  # remove stopwords\n                word not in string.punctuation):  # remove punctuation\n            # tweets_clean.append(word)\n            stem_word = stemmer.stem(word)  # stemming word\n            tweets_clean.append(stem_word)\n\n    return tweets_clean","80476ec5":"def build_freqs(tweets, ys):\n    \"\"\"Build frequencies.\n    Input:\n        tweets: a list of tweets\n        ys: an m x 1 array with the sentiment label of each tweet\n            (either 0 or 1)\n    Output:\n        freqs: a dictionary mapping each (word, sentiment) pair to its\n        frequency\n    \"\"\"\n    # Convert np array to list since zip needs an iterable.\n    # The squeeze is necessary or the list ends up with one element.\n    # Also note that this is just a NOP if ys is already a list.\n    yslist = np.squeeze(ys).tolist()\n\n    # Start with an empty dictionary and populate it by looping over all tweets\n    # and over all processed words in each tweet.\n    freqs = {}\n    for y, tweet in zip(yslist, tweets):\n        for word in process_tweet(tweet):\n            pair = (word, y)\n            if pair in freqs:\n                freqs[pair] += 1\n            else:\n                freqs[pair] = 1\n\n    return freqs","af6200f9":"# download the stopwords for the process_tweet function\nnltk.download('stopwords')","3077a005":"# select the lists of positive and negative tweets\nall_positive_tweets = twitter_samples.strings('positive_tweets.json')\nall_negative_tweets = twitter_samples.strings('negative_tweets.json')\n\n# concatenate the lists, 1st part is the positive tweets followed by the negative\ntweets = all_positive_tweets + all_negative_tweets\n\n# let's see how many tweets we have\nprint(\"Number of tweets: \", len(tweets))","2058a29a":"# make a numpy array representing labels of the tweets\nlabels = np.append(np.ones((len(all_positive_tweets))), np.zeros((len(all_negative_tweets))))","c616b14b":"dictionary = {'key1': 1, 'key2': 2}","8e34282f":"# Add a new entry\ndictionary['key3'] = -5\n\n# Overwrite the value of key1\ndictionary['key1'] = 0\n\nprint(dictionary)","a79eb627":"# Square bracket lookup when the key exist\nprint(dictionary['key2'])","96219f36":"# The output of this line is intended to produce a KeyError\nprint(dictionary['key8'])","1842e620":"# This prints a value\nif 'key1' in dictionary:\n    print(\"item found: \", dictionary['key1'])\nelse:\n    print('key1 is not defined')\n\n# Same as what you get with get\nprint(\"item found: \", dictionary.get('key1', -1))","b67e5f15":"# This prints a message because the key is not found\nif 'key7' in dictionary:\n    print(dictionary['key7'])\nelse:\n    print('key does not exist!')\n\n# This prints -1 because the key is not found and we set the default to -1\nprint(dictionary.get('key7', -1))","c51bc97a":"# create frequency dictionary\nfreqs = build_freqs(tweets, labels)\n\n# check data type\nprint(f'type(freqs) = {type(freqs)}')\n\n# check length of the dictionary\nprint(f'len(freqs) = {len(freqs)}')","09961f7d":"print(freqs)","7522cd5a":"# select some words to appear in the report. we will assume that each word is unique (i.e. no duplicates)\nkeys = ['happi', 'merri', 'nice', 'good', 'bad', 'sad', 'mad', 'best', 'pretti',\n        '\u2764', ':)', ':(', '\ud83d\ude12', '\ud83d\ude2c', '\ud83d\ude04', '\ud83d\ude0d', '\u265b',\n        'song', 'idea', 'power', 'play', 'magnific']\n\n# list representing our table of word counts.\n# each element consist of a sublist with this pattern: [<word>, <positive_count>, <negative_count>]\ndata = []\n\n# loop through our selected words\nfor word in keys:\n    \n    # initialize positive and negative counts\n    pos = 0\n    neg = 0\n    \n    # retrieve number of positive counts\n    if (word, 1) in freqs:\n        pos = freqs[(word, 1)]\n        \n    # retrieve number of negative counts\n    if (word, 0) in freqs:\n        neg = freqs[(word, 0)]\n        \n    # append the word counts to the table\n    data.append([word, pos, neg])\n    \ndata","fb3f0523":"fig, ax = plt.subplots(figsize = (8, 8))\n\n# convert positive raw counts to logarithmic scale. we add 1 to avoid log(0)\nx = np.log([x[1] + 1 for x in data])  \n\n# do the same for the negative counts\ny = np.log([x[2] + 1 for x in data]) \n\n# Plot a dot for each pair of words\nax.scatter(x, y)  \n\n# assign axis labels\nplt.xlabel(\"Log Positive count\")\nplt.ylabel(\"Log Negative count\")\n\n# Add the word as the label at the same position as you added the points just before\nfor i in range(0, len(data)):\n    ax.annotate(data[i][0], (x[i], y[i]), fontsize=12)\n\nax.plot([0, 9], [0, 9], color = 'red') # Plot the red line that divides the 2 areas.\nplt.show()","d2132161":"\n* `process_tweet()`: Cleans the text, tokenizes it into separate words, removes stopwords, and converts words to stems.\n* `build_freqs()`: This counts how often a word in the 'corpus' (the entire set of tweets) was associated with a positive label `1` or a negative label `0`. It then builds the `freqs` dictionary, where each key is a `(word,label)` tuple, and the value is the count of its frequency within the corpus of tweets.","05605613":"This chart is straightforward to interpret. It shows that emoticons `:)` and `:(` are very important for sentiment analysis. Thus, we should not let preprocessing steps get rid of these symbols!\n\nFurthermore, what is the meaning of the crown symbol? It seems to be very negative!","c02a1031":"# Utility function to create word frequency","d601f708":"## Word frequency dictionary","77a5aa66":"## Load the NLTK sample dataset\n\n we will be using the [Twitter dataset from NLTK](http:\/\/www.nltk.org\/howto\/twitter.html#Using-a-Tweet-Corpus).","92ef4ef5":"### Accessing values and lookup keys\n\nPerforming dictionary lookups and retrieval are common tasks in NLP. There are two ways to do this: \n\n* Using square bracket notation: This form is allowed if the lookup key is in the dictionary. It produces an error otherwise.\n* Using the [get()](https:\/\/docs.python.org\/3\/library\/stdtypes.html#dict.get) method: This allows us to set a default value if the dictionary key does not exist. \n\nLet us see these in action:","8e555624":"Next, we will build a labels array that matches the sentiments of our tweets.  This data type works pretty much like a regular list but is optimized for computations and manipulation. The `labels` array will be composed of 10000 elements. The first 5000 will be filled with `1` labels denoting positive sentiments, and the next 5000 will be `0` labels denoting the opposite. We can do this easily with a series of operations provided by the `numpy` library:\n\n* `np.ones()` - create an array of 1's\n* `np.zeros()` - create an array of 0's\n* `np.append()` - concatenate arrays","387b2d72":"We can then use a scatter plot to inspect this table visually. Instead of plotting the raw counts, we will plot it in the logarithmic scale to take into account the wide discrepancies between the raw counts (e.g. `:)` has 3568 counts in the positive while only 2 in the negative). The red line marks the boundary between positive and negative areas. Words close to the red line can be classified as neutral. ","4e301dae":"# Future Work\nAll concepts from Basic To Advanced with research Papers is aimed to write here.","2657b1bd":"# Table Of Contents\n\n\nPreprocess Tweet function<br>\nBuild word frequency utility function<br>\nWord Counts<br>\nVisualization of words <br>\nWhat Next<br>\nRemark<br>\nReference","7658cbc9":"# What Next\n### That's all for this lab! We've seen how to build a word frequency dictionary and this will come in handy when extracting the features of a list of tweets. Next up, we will be reviewing Logistic Regression. Keep it up!","c65fb4e6":"## Table of word counts","ae084fcd":"Now print the frequency of each word depending on its class.","b650175a":"Create word frequency dictionary","9957d551":"# Building and Visualizing word frequencies\n\n\nIn this lab, we will focus on the `build_freqs()` helper function and visualizing a dataset fed into it. In our goal of tweet sentiment analysis, this function will build a dictionary where we can lookup how many times a word appears in the lists of positive or negative tweets. This will be very helpful when extracting the features of the dataset in the week's programming assignment. Let's see how this function is implemented under the hood in this notebook.","7673cac3":"## Dictionaries\n\nIn Python, a dictionary is a mutable and indexed collection. It stores items as key-value pairs and uses [hash tables](https:\/\/en.wikipedia.org\/wiki\/Hash_table) underneath to allow practically constant time lookups. In NLP, dictionaries are essential because it enables fast retrieval of items or containment checks even with thousands of entries in the collection.","2f9c50fd":"# Visualization","519fa3ef":"When using a square bracket lookup, it is common to use an if-else block to check for containment first (with the keyword `in`) before getting the item. On the other hand, you can use the `.get()` method if you want to set a default value when the key is not found. Let's compare these in the cells below:","4aac9bd3":"The former line defines a dictionary with two entries. Keys and values can be almost any type ([with a few restriction on keys](https:\/\/docs.python.org\/3\/tutorial\/datastructures.html#dictionaries)), and in this case, we used strings. We can also use floats, integers, tuples, etc.\n\n### Adding or editing entries\n\nNew entries can be inserted into dictionaries using square brackets. If the dictionary already contains the specified key, its value is overwritten.  ","86a3689b":"## Setup\n\nLet's import the required libraries for this lab: ","4990118f":"# This is Notebook-2 of NLP(Zero-To-Hero) series.\nI have started a series of NLP for beginners and for those who want to understand behind the scenes and Maths of NLP.\nCurrently I am doing Course of Natural Language Procesing on Coursera i.e. best course for understanding basics and to strong your foundation so I thought who is on this kaggle platform can also get knowledge about basics and maths of NLP. So I have started this.\nThere are more to come.","fe38421b":"Unfortunately, this does not help much to understand the data. It would be better to visualize this output to gain better insights.","a73a3227":"\n# Reference\nThis Noteboook is based on Coursera Course \u201cNatural Language Processing Specialization\u201d by Deeplearning.ai . Instructors of this specialization are Younes Bensouda Mourri , \u0141ukasz Kaiser and Eddy Shyu","edeb4812":"However, if the key is missing, the operation produce an error","3a9b41d7":"We will select a set of words that we would like to visualize. It is better to store this temporary information in a table that is very easy to use later.","4b467196":"### Definition\n\nA dictionary in Python is declared using curly brackets. Look at the next example:"}}