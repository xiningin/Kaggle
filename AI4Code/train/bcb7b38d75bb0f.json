{"cell_type":{"bd75ceca":"code","4d3a0df8":"code","0b448f25":"code","779fb267":"code","0a37d0ea":"code","151892e0":"code","21955012":"code","b01457df":"code","d9587b71":"code","a4f2bf54":"code","6b402b5c":"code","62634919":"code","fb3d8f32":"code","5cdd41ab":"code","e3f4eb75":"code","380a7eb8":"code","e0bd937b":"code","f2675d40":"code","38f8a31c":"code","a0f72421":"code","5862174c":"code","a563df9f":"code","075bf400":"code","f8d61a45":"code","8889337b":"code","de3fd3dc":"code","a1bb5e2b":"code","a9e86591":"code","54edf48a":"code","88a60397":"code","a1262408":"code","f8e772b1":"code","c7b0258f":"code","e227f8c3":"code","2f58f72a":"code","0e2b6208":"code","a9a8d6ea":"code","568d95d5":"code","fd67cc4d":"code","021ba66c":"code","f497ba76":"code","05e16834":"code","059251c2":"code","55cdd445":"markdown","71782af4":"markdown","5372cf1f":"markdown","a59d25fd":"markdown","14c32f6a":"markdown","ac4e7727":"markdown","2a8e0741":"markdown","3b4a6782":"markdown","8951357b":"markdown","772ae0a9":"markdown","57df207c":"markdown","0e309420":"markdown","c0a21ecc":"markdown","2114bd95":"markdown","5f7adf72":"markdown","59844e97":"markdown","80157e61":"markdown","4b789daa":"markdown","2427b242":"markdown"},"source":{"bd75ceca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d3a0df8":"train_df = pd.read_csv('..\/input\/zillow-prize-1\/\/train_2017.csv', parse_dates=[\"transactiondate\"])\nprop_df = pd.read_csv('..\/input\/zillow-prize-1\/properties_2017.csv',low_memory=False)","0b448f25":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\n# import warnings\n# warnings.filterwarnings(\"ignore\")\n\n\nplt.rcParams['figure.figsize'] = (8.5, 5)\nplt.rcParams[\"patch.force_edgecolor\"] = True\nsns.mpl.rc(\"figure\", figsize=(8.5,5))\npd.set_option('max_colwidth', 400)","779fb267":"train_df.head()","0a37d0ea":"train_df.shape","151892e0":"prop_df.head()","21955012":"prop_df.shape","b01457df":"#je fusionne les 2 jeux de donn\u00e9es en un seul\ndf= train_df.merge(prop_df, how='left', on='parcelid')","d9587b71":"df.shape","a4f2bf54":"plt.scatter(range(df.shape[0]), np.sort(df.logerror.values))\nplt.xlabel('index', fontsize=12)\nplt.ylabel('logerror', fontsize=12)\nplt.show()","6b402b5c":"# choose the max and min value \nlogerror_max = np.percentile(df.logerror.values, 99)\nlogerror_min = np.percentile(df.logerror.values, 1)\n\ndf = df[df['logerror']<logerror_max]\ndf = df[df['logerror']>logerror_min]\n\nsns.distplot(df.logerror.values, bins=50, kde=False)\nplt.xlabel('logerror', fontsize=12)\nplt.show()","62634919":"print(\"Nombre de lignes dupliqu\u00e9es\", df.duplicated().sum())","fb3d8f32":"print(\"Nombre de valeurs manquantes\", df.isna().sum().sum())","5cdd41ab":"# delete columns with missing values > 40%\ndf = df.loc[:, df.isna().sum() < 0.4*df.shape[0]]","e3f4eb75":"# keep only numeric variabls\ndf_quant = df.select_dtypes(include=['float64','int64'])","380a7eb8":"df_nan = df_quant.isna().sum().sort_values()","e0bd937b":"corr = df_quant.corr()\ncorr10 = corr['logerror'].abs().sort_values(ascending=False)\ncorr10.head(11)","f2675d40":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error \nfrom sklearn.tree import DecisionTreeRegressor\n\nimport xgboost as xgb","38f8a31c":"def get_metrics(data, target, model):\n    ''' \n    Get R2, RMSE and MAE for a model\n    data = X\n    target = y\n    '''\n    X_train, X_test, y_train, y_test = train_test_split(data, target, train_size=0.8, random_state=1)\n    model = model\n    model.fit(X_train, y_train)\n    ytrainpred = model.predict(X_train)\n    ytestpred = model.predict(X_test)\n    print(model)\n    print (\"Training set : R2 = {} RMSE = {}\\nTesting set : R2 = {} RMSE = {}\" \n      .format(round(r2_score(y_train, ytrainpred),3), round(mean_squared_error(y_train, ytrainpred, squared=False),3), round(r2_score(y_test, ytestpred),3), round(mean_squared_error(y_test, ytestpred, squared=False),3)))\n    print(\"Training Set : Mean Absolute Error = {}\".format(mean_absolute_error(ytrainpred, y_train)))\n    print(\"Testing Set : Mean Absolute Error = {}\".format(mean_absolute_error(ytestpred, y_test)))","a0f72421":"# definit target\ny = df.logerror\n\n# defniti explanation's variables\ndf_quant = df_quant.drop(columns = ['logerror'])\nX = df_quant","5862174c":"from sklearn.impute import SimpleImputer\n\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X = pd.DataFrame(my_imputer.fit_transform(X))\n\n# Imputation removed column names; put them back\nimputed_X.columns = X.columns\n\nX = imputed_X.copy()","a563df9f":"df_cat = df[['propertycountylandusecode','propertyzoningdesc']]","075bf400":"new_df_cat = pd.get_dummies(df_cat, prefix=['pcluc', 'pzd'])","f8d61a45":"new_df_cat.shape","8889337b":"new_df_cat.head()","de3fd3dc":"from sklearn import linear_model\nregr = linear_model.Ridge(alpha=100)\nget_metrics(new_df_cat, y, regr)","a1bb5e2b":"get_metrics(X, y, DecisionTreeRegressor(random_state=1))","a9e86591":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=1)\nmodel = RandomForestRegressor(random_state=1)\nmodel.fit(X_train, y_train)\nytrainpred = model.predict(X_train)\nytestpred = model.predict(X_test)\nprint(model)\nprint (\"Training set : R2 = {} RMSE = {}\\nTesting set : R2 = {} RMSE = {}\" .format(round(r2_score(y_train, ytrainpred),3), round(mean_squared_error(y_train, ytrainpred, squared=False),3), round(r2_score(y_test, ytestpred),3), round(mean_squared_error(y_test, ytestpred, squared=False),3)))\nprint(\"Training Set : Mean Absolute Error = {}\".format(mean_absolute_error(ytrainpred, y_train)))\nprint(\"Testing Set : Mean Absolute Error = {}\".format(mean_absolute_error(ytestpred, y_test)))","54edf48a":"a = model.feature_importances_\nnp.sort(a)  ","88a60397":"name = X.columns\ncorr = model.feature_importances_\ndf = pd.DataFrame({'name':name, 'corr':corr})\ndf.sort_values(by='corr', ascending = False)\n# df.plot('name', 'corr', kind='scatter')","a1262408":"\nxtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.15)\n\nxgbr = xgb.XGBRegressor(verbosity=0)\nprint(xgbr)\n\nxgbr.fit(xtrain, ytrain) \n\nscore = xgbr.score(xtrain, ytrain)   \n\nprint(\"Training score: \", score)  \n\n# - cross validataion \nscores = cross_val_score(xgbr, xtrain, ytrain, cv=5)\nprint(\"Mean cross-validation score: %.2f\" % scores.mean())\n\nkfold = KFold(n_splits=10, shuffle=True)\nkf_cv_scores = cross_val_score(xgbr, xtrain, ytrain, cv=kfold )\nprint(\"K-fold CV average score: %.2f\" % kf_cv_scores.mean()) \n\nypred = xgbr.predict(xtest)\nmse = mean_squared_error(ytest, ypred)\nprint(\"MSE: %.2f\" % mse)\nprint(\"RMSE: %.2f\" % (mse**(1\/2.0)))\n\n\nx_ax = range(len(ytest))\nplt.scatter(x_ax, ytest, s=5, color=\"blue\", label=\"original\")\nplt.plot(x_ax, ypred, lw=0.8, color=\"red\", label=\"predicted\")\nplt.legend()\nplt.show()","f8e772b1":"print(\"Training Set : Mean Absolute Error = {}\".format(mean_absolute_error(ytrainpred, y_train)))\nprint(\"Testing Set : Mean Absolute Error = {}\".format(mean_absolute_error(ytestpred, y_test)))","c7b0258f":"# read the sample_submisison file into a dataframe, for sake of clarity let's limit the number of rows to 5\ndf_samples = pd.read_csv('..\/input\/zillow-prize-1\/sample_submission.csv')","e227f8c3":"# let's unpivot the dataframe to produce the shape regression models usually expect\n# consisting of pairs `parcelid`, `transactiondate``\n\ndef reshape_for_model(df):\n    \"\"\"Unipivot the submission data and apply some renamings\"\"\"\n    df = pd.melt(df, ['ParcelId'])\n    df.drop('value', axis=1, inplace=True)\n    df.columns = ['parcelid', 'transactiondate']\n    df['transactiondate'] = df['transactiondate'].apply(\n        lambda date_str: \"%s-%s-01\" %(date_str[:4], date_str[-2:]))\n    return df","2f58f72a":"df_reshaped = reshape_for_model(df_samples)","0e2b6208":"X.columns\nnew_df = prop_df[['parcelid', 'bathroomcnt', 'bedroomcnt', 'buildingqualitytypeid',\n       'calculatedbathnbr', 'calculatedfinishedsquarefeet',\n       'finishedsquarefeet12', 'fips', 'fullbathcnt', 'heatingorsystemtypeid',\n       'latitude', 'longitude', 'lotsizesquarefeet', 'propertylandusetypeid',\n       'rawcensustractandblock', 'regionidcity', 'regionidcounty',\n       'regionidzip', 'roomcnt', 'unitcnt', 'yearbuilt',\n       'structuretaxvaluedollarcnt', 'taxvaluedollarcnt', 'assessmentyear',\n       'landtaxvaluedollarcnt', 'taxamount', 'censustractandblock']]\n\n\n# new_df = new_df.sample(n=10000)\n","a9a8d6ea":"\np_1 = xgbr.predict(new_df)\np_2 = xgbr.predict(new_df)\np_3 = xgbr.predict(new_df)\np_4 = xgbr.predict(new_df)\np_5 = xgbr.predict(new_df)\np_6 = xgbr.predict(new_df)\n","568d95d5":"pred = np.concatenate((p_1, p_2, p_3, p_4, p_5, p_6), axis=None)","fd67cc4d":"df_reshaped['prediction']  = pred","021ba66c":"###### to get the original shape of our submission sample file, we can now pivot the table again\n# and remove the column names\ndef reshape_for_submission(df):\n    \"\"\"Reformat the transactiondate and pivot the data\"\"\"\n    df['transactiondate'] = df['transactiondate'].apply(lambda td: \"%s%s\" %(td[:4],td[5:7]))\n    df = df.pivot(index='parcelid', columns='transactiondate', values='prediction')\n    df = df.reset_index()\n#     df = df.rename_axis(None,1)\n    df = df.rename(index=str, columns={\"parcelid\": \"ParcelId\"})\n    return df","f497ba76":"df_tosubmit = reshape_for_submission(df_reshaped)","05e16834":"df_tosubmit.head()","059251c2":"df_tosubmit.to_csv('final.csv',index = False)","55cdd445":"# SUBMISSION","71782af4":"# MACHINE LEARNING","5372cf1f":"## Duplicates","a59d25fd":"##  Logerror:\n\nObservation de la variable cible","14c32f6a":"ces variables categorielle n'ont pas assez de correlation avec logerror pour etre pertinentes","ac4e7727":"Aucune des variables ne presente de correlation forte, ici le model de regression lineaire n'a pas de sens.","2a8e0741":"\n### Correlation\n","3b4a6782":"## DecisionTreeRegression ","8951357b":"## XGBOOST","772ae0a9":"meme si nous avons vu plus haut qu'il n'existait pas de correlation lineaire antre notre target et une variable quantitative, je vais v\u00e9rifier la possible existence d'une telle correlation avec les variables categorielles.","57df207c":"## REGRESSION LINEAIRE","0e309420":"## Missing values","c0a21ecc":"# ANALYSE","2114bd95":"## Regression lineaire multiple avec regulation Ridge","5f7adf72":"## RANDOMFOREST","59844e97":"j'utilise ce model pour definir quelles sont les variables les plus utiles \u00e0 la prediction.","80157e61":"## Extreme values","4b789daa":"- propertycountylandusecode:  County land use code i.e. it's zoning at the county level\n\n- propertyzoningdesc:  Description of the allowed land uses (zoning) for that property","2427b242":"# CLEANING"}}