{"cell_type":{"9041e38a":"code","a837bce3":"code","0069ed60":"code","b231ec29":"code","67d68a87":"code","a0c58fd2":"code","3a704866":"code","f1bc9eab":"code","e75e0f9a":"code","85772e15":"code","a0a9194e":"code","3e6d0eb8":"code","f50f1e25":"code","72c91aab":"code","9bba7d0c":"code","eb96b978":"code","abddefc7":"code","be53962e":"code","148868da":"code","becb3d6b":"code","4b1dd280":"code","26f63849":"code","a72d28ea":"code","0f0ef2f9":"code","1a4cbf1c":"code","0eee32ab":"code","812294cb":"code","a8b77cc3":"code","de4878af":"code","9de7962d":"code","a269c63d":"code","6085cd3a":"code","ed4dd979":"code","edb9047d":"code","89923b0e":"code","40f1fad9":"code","04728f84":"code","7533e34e":"code","58d276db":"code","3ad13460":"code","ca31fc66":"code","5be0fa95":"code","be6c948f":"code","db7742ac":"code","af415576":"code","16e698b7":"code","5a251adf":"code","adc0619c":"code","a8a9df0a":"code","64bde77f":"code","d0079157":"code","806a5be0":"code","89e37a11":"code","ac8e34b4":"code","becca84f":"code","34869982":"code","1a1eebcc":"code","db9ddfba":"markdown","6bdf3de9":"markdown","de44112b":"markdown","550ec8d7":"markdown","8168e465":"markdown","a589ecb3":"markdown","f89f7c2d":"markdown","18c267f6":"markdown","cf63512c":"markdown","aa32a82b":"markdown","01161f6f":"markdown","1002f3fc":"markdown","99ad0c86":"markdown","1aae0d35":"markdown","fc71da8d":"markdown","c9b74bff":"markdown","23393135":"markdown","eb5e183c":"markdown","05c32d79":"markdown","931cdc77":"markdown","a94d361c":"markdown","386886d7":"markdown","7204466c":"markdown","4df423c7":"markdown","bed55651":"markdown","2f8234cb":"markdown"},"source":{"9041e38a":"import numpy as np\nimport pandas as pd\n\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nfrom datetime import date\nfrom iso3166 import countries","a837bce3":"WIDTH=800","0069ed60":"df = pd.read_csv('\/kaggle\/input\/nba2k20-player-dataset\/nba2k20-full.csv')\ndf.head()","b231ec29":"print('Top rating presented in dataset: ', df['rating'].max())\nprint('Low rating presented in dataset: ', df['rating'].min())","67d68a87":"def plot_value_count(dataframe, column, width, height, title):\n    ds = dataframe[column].value_counts().reset_index()\n    ds.columns = [column, 'count']\n    fig = px.bar(\n        ds, \n        x=column, \n        y=\"count\", \n        orientation='v', \n        title=title, \n        width=width,\n        height=height\n    )\n    fig.show()","a0c58fd2":"plot_value_count(df, 'rating', WIDTH, 600, 'Players and their rating')","3a704866":"plot_value_count(df, 'team', WIDTH, 600, 'Teams by number of players')","f1bc9eab":"df[df['team'].isna()]","e75e0f9a":"ds = df[df['team'].notnull()]\nds = ds['jersey'].value_counts().reset_index()\n\nds.columns = [\n    'jersey', \n    'count'\n]\n\nds['jersey'] = 'number ' + ds['jersey']\nds = ds.sort_values('count')\n\nfig = px.bar(\n    ds, \n    x='count', \n    y=\"jersey\", \n    orientation='h', \n    title=\"Player's jersey distribution\", \n    width=WIDTH,\n    height=1000\n)\n\nfig.show()","85772e15":"df[(df['jersey'] == '#0') & (df['team'].notnull())]","a0a9194e":"ds = df[(df['jersey'] == '#0') & (df['team'].notnull())]\nds = ds['team'].value_counts().reset_index()\n\nds.columns = [\n    'team', \n    'count'\n]\n\nds = ds.sort_values('count')\n\nfig = px.bar(\n    ds, \n    x='count', \n    y=\"team\", \n    orientation='h', \n    title=\"Number of jerseys #0 for every team\", \n    width=WIDTH,\n    height=600\n)\n\nfig.show()","3e6d0eb8":"df.loc[df['position'] == 'C-F', 'position'] = 'F-C'\ndf.loc[df['position'] == 'F-G', 'position'] = 'G-F'\n\nplot_value_count(df, 'position', WIDTH, 500, \"Players position distribution\")","f50f1e25":"plot_value_count(df, 'country', WIDTH, 600, \"Players country distribution\")","72c91aab":"ds = df['college'].value_counts().reset_index()\n\nds.columns = [\n    'college', \n    'count'\n]\n\nds = ds.sort_values('count').tail(30)\n\nfig = px.bar(\n    ds, \n    x='count',\n    y=\"college\", \n    orientation='h', \n    title=\"Top 30 colleges by number of players\", \n    width=WIDTH, \n    height=800\n)\n\nfig.show()","9bba7d0c":"plot_value_count(df, 'draft_year', WIDTH, 600, \"Players draft year distribution\")","eb96b978":"ds = df['draft_round'].value_counts().reset_index()\n\nds.columns = [\n    'draft_round', \n    'count'\n]\n\nds.loc[ds['draft_round']=='1', 'draft_round'] = '1-st'\nds.loc[ds['draft_round']=='2', 'draft_round'] = '2-nd'\n\nfig = px.pie(\n    ds, \n    names='draft_round', \n    values=\"count\", \n    title=\"Players draft round pie chart\", \n    width=WIDTH, \n    height=500\n)\n\nfig.show()","abddefc7":"ds = df[df['draft_peak']!='Undrafted']\nds = ds['draft_peak'].value_counts().reset_index()\n\nds.columns = [\n    'draft_peak', \n    'count'\n]\n\nfig = px.bar(\n    ds, \n    x='draft_peak', \n    y=\"count\", \n    orientation='v', \n    title=\"Players draft peak distribution\", \n    width=WIDTH\n)\n\nfig.show()","be53962e":"df['salary'] = df['salary'].str.replace('$', '')\ndf['salary'] = df['salary'].astype(np.float64)\n\nfig = px.histogram(\n    df, \n    \"salary\", \n    nbins=100, \n    title='Salary distribution', \n    width=WIDTH,\n    height=600\n)\n\nfig.show()","148868da":"weight = df['weight'].str.split('\/',expand=True)\n\nweight.columns = [\n    'weight_lbs', \n    'weight_kg'\n]\n\ndf = pd.concat([df, weight], axis=1)\ndf = df.drop(['weight'], axis=1)\ndf['weight_lbs'] = df['weight_lbs'].str.replace('lbs.', '')\ndf['weight_kg'] = df['weight_kg'].str.replace('kg.', '')\ndf['weight_lbs'] = df['weight_lbs'].astype(np.int32)\ndf['weight_kg'] = df['weight_kg'].astype(np.float64)\n\ndf","becb3d6b":"height = df['height'].str.split('\/',expand=True)\n\nheight.columns = [\n    'height_feet', \n    'height_m'\n]\n\ndf = pd.concat([df, height], axis=1)\ndf = df.drop(['height'], axis=1)\ndf['height_m'] = df['height_m'].astype(np.float64)\n\ndf","4b1dd280":"fig = px.histogram(\n    df, \n    \"weight_kg\", \n    nbins=50, \n    title='Weight distribution', \n    width=WIDTH\n)\n\nfig.show()","26f63849":"fig = px.histogram(\n    df, \n    \"height_m\", \n    nbins=20, \n    title='Height distribution', \n    width=WIDTH\n)\n\nfig.show()","a72d28ea":"def calculate_age(born): \n    today = date.today() \n    return today.year - born.year - ((today.month, today.day) < (born.month, born.day))","0f0ef2f9":"df['b_day'] = pd.to_datetime(df['b_day'])\ndf['age'] = df['b_day'].apply(lambda row : calculate_age(row))","1a4cbf1c":"df['b_year'] = df['b_day'].dt.year\ndf['b_month'] = df['b_day'].dt.month","0eee32ab":"ds = df['b_month'].value_counts().reset_index()\n\nds.columns = [\n    'month', \n    'count'\n]\n\nfig = px.bar(\n    ds, \n    x='month', \n    y=\"count\", \n    orientation='v', \n    title=\"Players month of birth\", \n    width=WIDTH,\n    height=600\n)\n\nfig.show()","812294cb":"fig = px.histogram(\n    df, \n    \"age\", \n    nbins=25, \n    title='Age distribution', \n    width=800\n)\n\nfig.show()","a8b77cc3":"df[df['draft_peak']=='1']","de4878af":"team = df.groupby('team')['rating'].mean().reset_index().sort_values('rating', ascending=True)\n\nfig = px.bar(\n    team, \n    x=\"rating\", \n    y=\"team\", \n    orientation='h',\n    title='Average rating of players for evety team',\n    width=800, \n    height=800\n)\n\nfig.show()","9de7962d":"position = df.groupby('position')['rating'].mean().reset_index().sort_values('rating', ascending=True)\n\nfig = px.bar(\n    position, \n    x=\"rating\",\n    y=\"position\", \n    orientation='h',\n    title='Average rating of players by position',\n    width=800, \n    height=400\n)\n\nfig.show()","a269c63d":"ds = df['country'].value_counts().reset_index()\n\nds.columns = [\n    'country', \n    'count'\n]\n\nds = ds[ds['count']>=5]\ncountries_list = ds['country'].unique()\n\nposition = df[df['country'].isin(countries_list)]\nposition = position.groupby('country')['rating'].mean().reset_index().sort_values('rating', ascending=True)\n\nfig = px.bar(\n    position, \n    x=\"rating\", \n    y=\"country\", \n    orientation='h',\n    title='Average rating of players by country (5+ players)',\n    width=800, \n    height=500\n)\n\nfig.show()","6085cd3a":"position = df.groupby('draft_year')['rating'].mean().reset_index().sort_values('rating', ascending=True)\nposition['draft_year'] = position['draft_year'].astype(str) + ' year'\nfig = px.bar(\n    position, \n    x=\"rating\", \n    y=\"draft_year\", \n    orientation='h',\n    title='Average rating of players by draft year',\n    width=800, \n    height=600\n)\n\nfig.show()","ed4dd979":"position = df.groupby('draft_peak')['rating'].mean().reset_index().sort_values('rating', ascending=True)\nposition['draft_peak'] = position['draft_peak'].astype(str) + ' peak'\n\nfig = px.bar(\n    position, \n    x=\"rating\", \n    y=\"draft_peak\", \n    orientation='h',\n    title='Average rating of players by draft peak',\n    width=800,\n    height=1200\n)\n\nfig.show()","edb9047d":"position = df.sort_values(['age', 'rating'], ascending=True).tail(20)\n\nfig = px.bar(\n    position, \n    x=\"rating\", \n    y=\"full_name\", \n    color='age', \n    orientation='h',\n    title='Top 20 old players',\n    width=800, \n    height=600\n)\n\nfig.show()","89923b0e":"position = df.sort_values(['age', 'rating'], ascending=False).tail(20)\n\nfig = px.bar(\n    position, \n    x=\"rating\", \n    y=\"full_name\",     \n    color='age', \n    orientation='h', \n    title='Top 20 young players',\n    width=800, \n    height=600\n)\n\nfig.show()","40f1fad9":"position = df.sort_values(['height_m', 'rating'], ascending=True).tail(20)\n\nfig = px.bar(\n    position, \n    x=\"rating\", \n    y=\"full_name\", \n    color='height_m', \n    orientation='h', \n    width=800, \n    height=600, \n    title='Top 20 high players'\n)\n\nfig.show()","04728f84":"position = df.sort_values(['height_m', 'rating'], ascending=False).tail(20)\n\nfig = px.bar(\n    position, \n    x=\"rating\", \n    y=\"full_name\", \n    color='height_m', \n    orientation='h', \n    width=800, \n    height=600, \n    title='Top 20 short players'\n)\n\nfig.show()","7533e34e":"country_dict = {}\nfor c in countries:\n    country_dict[c.name] = c.alpha3\n    \ndf['alpha3'] = df['country']\ndf = df.replace(\n    {\n        \"alpha3\": country_dict\n    }\n\n)\n\ndata = df.groupby(['alpha3', 'country'])['rating'].max().reset_index()\ndata.columns = [\n    'alpha3', \n    'nationality', \n    'max_rating'\n]\n\nfig = px.choropleth(\n    data, \n    locations=\"alpha3\",\n    hover_name='nationality',\n    color=\"max_rating\",\n    projection=\"natural earth\",\n    color_continuous_scale=px.colors.sequential.Plasma,\n    title='Max rating for every country',\n    width=800, \n    height=600\n)\n\nfig.show()","58d276db":"data = df.groupby(['alpha3', 'country'])['salary'].max().reset_index()\n\ndata.columns = [\n    'alpha3',\n    'nationality', \n    'max_salary'\n]\n\nfig = px.choropleth(\n    data, \n    locations=\"alpha3\",\n    hover_name='nationality',\n    color=\"max_salary\",\n    projection=\"natural earth\",\n    color_continuous_scale=px.colors.sequential.Plasma,\n    title='Max salary for players from every country',\n    width=800, \n    height=600\n)\n\nfig.show()","3ad13460":"data = df.groupby(['alpha3', 'country'])['height_m'].max().reset_index()\ndata.columns = [\n    'alpha3', \n    'nationality', \n    'height_m'\n]\n\nfig = px.choropleth(\n    data, \n    locations=\"alpha3\",\n    hover_name='nationality',\n    color='height_m',\n    projection=\"natural earth\",\n    color_continuous_scale=px.colors.sequential.Plasma,\n    title='Max height for players from every country',\n    width=800, \n    height=600\n)\n\nfig.show()","ca31fc66":"data = df.groupby(['alpha3', 'country'])['weight_kg'].max().reset_index()\n\ndata.columns = [\n    'alpha3', \n    'nationality', \n    'weight_kg'\n]\n\nfig = px.choropleth(\n    data, \n    locations=\"alpha3\",\n    hover_name='nationality',\n    color='weight_kg',\n    projection=\"natural earth\",\n    color_continuous_scale=px.colors.sequential.Plasma,\n    title='Max weight for players from every country',\n    width=800, \n    height=600\n)\n\nfig.show()","5be0fa95":"data = df['alpha3'].value_counts().reset_index()\n\ndata.columns=[\n    'alpha3', \n    'national_count'\n]\n\ndf = pd.merge(df, data, on='alpha3')\ndata = df[df['national_count']>=5]\ndf = df.drop(['national_count'], axis=1)\ndata = data.groupby(['alpha3', 'country'])['rating'].mean().reset_index()\ndata.columns = ['alpha3', 'nationality', 'mean_rating']\n\nfig = px.choropleth(\n    data, \n    locations=\"alpha3\",\n    hover_name='nationality',\n    color=\"mean_rating\",\n    projection=\"natural earth\",\n    color_continuous_scale=px.colors.sequential.Plasma,\n    title='Mean rating for sportsmen for every country (minimum 5 players)',\n    width=800, \n    height=600\n)\n\nfig.show()","be6c948f":"def draw_plotly_court(fig, fig_width=600, margins=10):\n    def ellipse_arc(x_center=0.0, y_center=0.0, a=10.5, b=10.5, start_angle=0.0, end_angle=2 * np.pi, N=200, closed=False):\n        t = np.linspace(start_angle, end_angle, N)\n        x = x_center + a * np.cos(t)\n        y = y_center + b * np.sin(t)\n        path = f'M {x[0]}, {y[0]}'\n        for k in range(1, len(t)):\n            path += f'L{x[k]}, {y[k]}'\n        if closed:\n            path += ' Z'\n        return path\n\n    fig_height = fig_width * (470 + 2 * margins) \/ (500 + 2 * margins)\n    fig.update_layout(width=fig_width, height=fig_height)\n\n    fig.update_xaxes(range=[-250 - margins, 250 + margins])\n    fig.update_yaxes(range=[-52.5 - margins, 417.5 + margins])\n\n    threept_break_y = 89.47765084\n    three_line_col = \"#000000\"\n    main_line_col = \"#000000\"\n\n    fig.update_layout(\n        margin=dict(l=20, r=20, t=20, b=20),\n        paper_bgcolor=\"white\",\n        plot_bgcolor=\"white\",\n        yaxis=dict(\n            scaleanchor=\"x\",\n            scaleratio=1,\n            showgrid=False,\n            zeroline=False,\n            showline=False,\n            ticks='',\n            showticklabels=False,\n            fixedrange=True,\n        ),\n        xaxis=dict(\n            showgrid=False,\n            zeroline=False,\n            showline=False,\n            ticks='',\n            showticklabels=False,\n            fixedrange=True,\n        ),\n        shapes=[\n            dict(\n                type=\"rect\", x0=-250, y0=-52.5, x1=250, y1=417.5,\n                line=dict(color=main_line_col, width=1),\n                fillcolor='#55AF55',\n                layer='below'\n            ),\n            dict(\n                type=\"rect\", x0=-80, y0=-52.5, x1=80, y1=137.5,\n                line=dict(color=main_line_col, width=1),\n                fillcolor='#333333',\n                layer='below'\n            ),\n            dict(\n                type=\"rect\", x0=-60, y0=-52.5, x1=60, y1=137.5,\n                line=dict(color=main_line_col, width=1),\n                fillcolor='#333333',\n                layer='below'\n            ),\n            dict(\n                type=\"circle\", x0=-60, y0=77.5, x1=60, y1=197.5, xref=\"x\", yref=\"y\",\n                line=dict(color=main_line_col, width=1),\n                fillcolor='#dddddd',\n                layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-60, y0=137.5, x1=60, y1=137.5,\n                line=dict(color=main_line_col, width=1),\n                layer='below'\n            ),\n\n            dict(\n                type=\"rect\", x0=-2, y0=-7.25, x1=2, y1=-12.5,\n                line=dict(color=\"#ec7607\", width=1),\n                fillcolor='#ec7607',\n            ),\n            dict(\n                type=\"circle\", x0=-7.5, y0=-7.5, x1=7.5, y1=7.5, xref=\"x\", yref=\"y\",\n                line=dict(color=\"#ec7607\", width=1),\n            ),\n            dict(\n                type=\"line\", x0=-30, y0=-12.5, x1=30, y1=-12.5,\n                line=dict(color=\"#ec7607\", width=1),\n            ),\n\n            dict(type=\"path\",\n                 path=ellipse_arc(a=40, b=40, start_angle=0, end_angle=np.pi),\n                 line=dict(color=main_line_col, width=1), layer='below'),\n            dict(type=\"path\",\n                 path=ellipse_arc(a=237.5, b=237.5, start_angle=0.386283101, end_angle=np.pi - 0.386283101),\n                 line=dict(color=main_line_col, width=1), layer='below'),\n            dict(\n                type=\"line\", x0=-220, y0=-52.5, x1=-220, y1=threept_break_y,\n                line=dict(color=three_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-220, y0=-52.5, x1=-220, y1=threept_break_y,\n                line=dict(color=three_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=220, y0=-52.5, x1=220, y1=threept_break_y,\n                line=dict(color=three_line_col, width=1), layer='below'\n            ),\n\n            dict(\n                type=\"line\", x0=-250, y0=227.5, x1=-220, y1=227.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=250, y0=227.5, x1=220, y1=227.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-90, y0=17.5, x1=-80, y1=17.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-90, y0=27.5, x1=-80, y1=27.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-90, y0=57.5, x1=-80, y1=57.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-90, y0=87.5, x1=-80, y1=87.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=90, y0=17.5, x1=80, y1=17.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=90, y0=27.5, x1=80, y1=27.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=90, y0=57.5, x1=80, y1=57.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=90, y0=87.5, x1=80, y1=87.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n\n            dict(type=\"path\",\n                 path=ellipse_arc(y_center=417.5, a=60, b=60, start_angle=-0, end_angle=-np.pi),\n                 line=dict(color=main_line_col, width=1), layer='below'),\n\n        ]\n    )\n    return True","db7742ac":"fig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=[\n            -110, 40, 0, -160, 160\n        ],\n        y=[\n            70, 45, 260, 200, 150\n        ],\n        mode='markers+text',\n        marker=dict(\n            size=[30, 30, 30, 30, 30]\n        ),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\nfig.show()","af415576":"player_x = [-110, 40, 0, -160, 160]\nplayer_y = [70, 45, 260, 200, 150]","16e698b7":"sorted_df = df.sort_values(['rating'], ascending=False)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\n\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(\n            size=[30 for i in range(5)]\n        ),\n        text=[\n            'PF', 'C', 'PG', 'SG', 'SF'\n        ]\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['rating'])\n)\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","5a251adf":"sorted_df = df.sort_values(['salary'], ascending=False)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\n\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(\n            size=[30 for i in range(5)]\n        ),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['rating'])\n)\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","adc0619c":"sorted_df = df.sort_values(['age'], ascending=False)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\n\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(\n            size=[30 for i in range(5)]\n        ),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['age'])\n)\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['age'])\n)\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['age'])\n)\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['age'])\n)\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['age'])\n)\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","a8a9df0a":"sorted_df = df.sort_values(['height_m'], ascending=False)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(size=[30 for i in range(5)]),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['height_m'])\n)\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['height_m'])\n)\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['height_m'])\n)\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['height_m'])\n)\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['height_m'])\n)\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","64bde77f":"sorted_df = df.sort_values(['height_m'], ascending=True)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(size=[30, 30, 30, 30, 30]),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['height_m'])\n)\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['height_m'])\n)\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['height_m'])\n)\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['height_m'])\n)\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['height_m'])\n)\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","d0079157":"sorted_df = df[df['team'].isnull()]\nsorted_df = sorted_df.sort_values(['rating'], ascending=False)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(size=[30, 30, 30, 30, 30]),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['rating'])\n)\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","806a5be0":"sorted_df = df[df['country']=='USA']\nsorted_df = sorted_df.sort_values(['rating'], ascending=False)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(size=[30, 30, 30, 30, 30]),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['rating'])\n)\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","89e37a11":"sorted_df = df[df['country']=='Canada']\nsorted_df = sorted_df.sort_values(['rating'], ascending=False)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(size=[30, 30, 30, 30, 30]),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['rating'])\n)\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","ac8e34b4":"sorted_df = df[df['country']!='USA']\nsorted_df = sorted_df.sort_values(['rating'], ascending=False)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(size=[30, 30, 30, 30, 30]),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['rating'])\n)\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","becca84f":"sorted_df = df[df['draft_peak']=='2']\nsorted_df = sorted_df.sort_values(['rating'], ascending=False)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(size=[30, 30, 30, 30, 30]),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['rating'])\n)\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","34869982":"sorted_df = df[df['draft_peak']=='3']\nsorted_df = sorted_df.sort_values(['rating'], ascending=False)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(size=[30, 30, 30, 30, 30]),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['rating'])\n)\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['rating'])\n)\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","1a1eebcc":"sorted_df = df[df['draft_peak']=='Undrafted']\nsorted_df = sorted_df.sort_values(['rating'], ascending=False)\npositions = ['F', 'G-F', 'G', 'F-C', 'C']\nbest_by_rating = list()\nfor pos in positions:\n    part = sorted_df[sorted_df['position']==pos]\n    best_by_rating.append(part.head(1))\n    \nbest_by_rating = pd.concat(best_by_rating)\n\n\nfig = go.Figure()\ndraw_plotly_court(fig)\nfig.add_trace(\n    go.Scatter(\n        x=player_x,\n        y=player_y,\n        mode='markers+text',\n        marker=dict(size=[30, 30, 30, 30, 30]),\n        text=['PF', 'C', 'PG', 'SG', 'SF']\n    )\n)\n\n\nfig.add_annotation(\n            x=-110,\n            y=95,\n            text=best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='F-C'].iloc[0]['rating'])\n)\n\nfig.add_annotation(\n            x=40,\n            y=70,\n            text=best_by_rating[best_by_rating['position']=='C'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='C'].iloc[0]['rating'])\n)\n\nfig.add_annotation(\n            x=0,\n            y=285,\n            text=best_by_rating[best_by_rating['position']=='G'].iloc[0]['full_name'] + ', ' + \n                str(best_by_rating[best_by_rating['position']=='G'].iloc[0]['rating'])\n)\n\nfig.add_annotation(\n            x=-160,\n            y=225,\n            text=best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='G-F'].iloc[0]['rating'])\n)\n\nfig.add_annotation(\n            x=160,\n            y=175,\n            text=best_by_rating[best_by_rating['position']=='F'].iloc[0]['full_name']+ ', ' + \n                str(best_by_rating[best_by_rating['position']=='F'].iloc[0]['rating'])\n)\n\nfig.update_annotations(\n    dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=False,\n            font=dict(\n                family=\"sans serif\",\n                size=16,\n                color=\"#FF0000\"\n            )\n    )\n)\n\nfig.update_layout(showlegend=False)\nfig.show()","db9ddfba":"Top USA team.","6bdf3de9":"Best players for every position by rating.","de44112b":"Lets check all players with draft peak #1","550ec8d7":"<a id=\"2\"><\/a>\n<h2 style='background:red; border:0; color:white'><center>2. Geo visualization<center><h2>","8168e465":"The oldest players for every position.","a589ecb3":"Top team of undrafted players.","f89f7c2d":"Let's do basketball field visualization for next analysis. I found out this one so we will use it https:\/\/towardsdatascience.com\/interactive-basketball-data-visualizations-with-plotly-8c6916aaa59e.","18c267f6":"<a id=\"3\"><\/a>\n<h2 style='background:red; border:0; color:white'><center>3. Basketball field visualization<center><h2>","cf63512c":"Best team for players without a team","aa32a82b":"Top non USA team.","01161f6f":"Now we will see maximum and minimum player's rating.","1002f3fc":"Let's see all players with #0 on jersey (not free agents).","99ad0c86":"And check teams with a lot of #0.","1aae0d35":"Let's check players distribution by the position. But first let's assume that C-F = F-C and F-G = G-F","fc71da8d":"The highest players for every position.","c9b74bff":"Players with highest salary for every position.","23393135":"Let's start from general overview of our dataset.","eb5e183c":"Top Canada team.","05c32d79":"<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:Red; border:0' role=\"tab\" aria-controls=\"home\"><center>Quick navigation<\/center><\/h3>\n\n* [1. Data overview](#1)\n* [2. Geo visualization](#2)\n* [3. Basketball field visualization](#3)","931cdc77":"<h1><center>NBA 2k20 data understanding, visualization and analysis<\/center><\/h1>\n\n<center><img width=\"800\" height=\"600\" src=\"https:\/\/cdn-wp.thesportsrush.com\/2020\/07\/NBA-2K20-locker-codes.jpg\"><\/center>","a94d361c":"<a id=\"1\"><\/a>\n<h2 style='background:red; border:0; color:white'><center>1. Data overview<center><h2>","386886d7":"Top team of 3rd peak players","7204466c":"Top team of 2nd peak players","4df423c7":"Let's see what is the favourite number on jersey?","bed55651":"The smallest players for every position.","2f8234cb":"Let's see how many free agents we have in current dataset."}}