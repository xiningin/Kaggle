{"cell_type":{"853600d9":"code","e504a749":"code","9c4e3056":"code","a64af898":"code","c605a6d4":"code","35879b2c":"code","b35ece01":"code","9cb2afef":"code","3ec164c6":"code","17a89937":"code","e0ce0db1":"code","17c998e5":"code","0db06b63":"code","48bac5cd":"code","6b1432b6":"code","c92c4a7e":"code","bf419532":"code","1fdd1d9b":"code","bb4471f6":"code","2e80f13c":"code","d1cb012d":"markdown","6dee244c":"markdown"},"source":{"853600d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e504a749":"data=pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","9c4e3056":"data","a64af898":"data.drop(columns=['CustomerID'],inplace=True)\ndata","c605a6d4":"nom_col=[0]\nordi_col=[]","35879b2c":"from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.compose import make_column_transformer\nfrom sklearn import set_config\ntrans = make_column_transformer((OneHotEncoder(sparse=False),nom_col),\n                                (OrdinalEncoder(),ordi_col),remainder='passthrough')\nset_config(display='diagram')","b35ece01":"from sklearn.cluster import KMeans\nkm= KMeans(n_clusters=2)\nkm","9cb2afef":"from sklearn.pipeline import make_pipeline\npipe= make_pipeline(trans,km)\npipe","3ec164c6":"data['Gender']=pd.get_dummies(data.Gender,drop_first=True)\nkm.fit(data)      #to convert strings to integers","17a89937":"pipe.fit(data)","e0ce0db1":"km.labels_","17c998e5":"km.cluster_centers_","0db06b63":"km.n_iter_","48bac5cd":"X=data","6b1432b6":"from sklearn.cluster import KMeans\nfrom sklearn import metrics\nfrom scipy.spatial.distance import cdist\nimport numpy as np\nimport matplotlib.pyplot as plt","c92c4a7e":"distortions = []\ninertias = []\nmapping1 = {}\nmapping2 = {}\nK = range(1, 10)\n \nfor k in K:\n    # Building and fitting the model\n    kmeanModel = KMeans(n_clusters=k).fit(X)\n    kmeanModel.fit(X)\n \n    distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_,\n                                        'euclidean'), axis=1)) \/ X.shape[0])\n    inertias.append(kmeanModel.inertia_)\n \n    mapping1[k] = sum(np.min(cdist(X, kmeanModel.cluster_centers_,\n                                   'euclidean'), axis=1)) \/ X.shape[0]\n    mapping2[k] = kmeanModel.inertia_","bf419532":"for key, val in mapping1.items():\n    print(f'{key} : {val}')","1fdd1d9b":"plt.plot(K, distortions, 'bx-')\nplt.xlabel('Values of K')\nplt.ylabel('Distortion')\nplt.title('The Elbow Method using Distortion')\nplt.show()","bb4471f6":"for key, val in mapping2.items():\n    print(f'{key} : {val}')","2e80f13c":"plt.plot(K, inertias, 'bx-')\nplt.xlabel('Values of K')\nplt.ylabel('Inertia')\nplt.title('The Elbow Method using Inertia')\nplt.show()","d1cb012d":"# inertia","6dee244c":"# distortion"}}