{"cell_type":{"eceb830b":"code","3edef581":"code","506f21ab":"code","aca13eee":"code","6943ff7d":"code","539238d5":"code","fd089ec7":"code","da009492":"code","180d4177":"code","0ab108e0":"code","4facb905":"code","a8eeee0b":"code","90099d8a":"code","d1f27b4f":"code","0298542c":"code","69dd895c":"code","9f2c8ebf":"code","4e529b48":"code","21f36dc4":"code","1107a696":"code","6c7da1b6":"code","833144bb":"code","b05647d8":"markdown","ebd830e2":"markdown","b45ebd6a":"markdown","290d036d":"markdown","5a2ffde1":"markdown","9ec11a62":"markdown","53eb565c":"markdown","938d4616":"markdown","593cd83e":"markdown","fd54803e":"markdown","4276947a":"markdown","85f22ebd":"markdown","694b64fa":"markdown","0645e3a9":"markdown"},"source":{"eceb830b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport torch\nimport torch.nn as nn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport transformers\nfrom transformers import AutoModel, BertTokenizerFast\n\n# specify GPU\ndevice = torch.device(\"cuda\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3edef581":"\ndf = pd.read_csv(\"\/kaggle\/input\/robert-frost-collection\/robert_frost_collection.csv\", low_memory=False)\nprint(df.shape)\ndf.head().style.set_properties(**{'background-color':'gold',\n                                     'color': 'purple'})","506f21ab":"df.isnull().sum()","aca13eee":"# categorical features with missing values\ncategorical_nan = [feature for feature in df.columns if df[feature].isna().sum()>0 and df[feature].dtypes=='O']\nprint(categorical_nan)","6943ff7d":"# replacing missing values in categorical features\nfor feature in categorical_nan:\n    df[feature] = df[feature].fillna('None')","539238d5":"df[categorical_nan].isna().sum()","fd089ec7":"# Handle numerical features with nan value\nnumerical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes!='O']\nnumerical_nan","da009492":"df[numerical_nan].isna().sum()","180d4177":"## Replacing the numerical Missing Values\n\nfor feature in numerical_nan:\n    ## We will replace by using median since there are outliers\n    median_value=df[feature].median()\n    \n    df[feature].fillna(median_value,inplace=True)\n    \ndf[numerical_nan].isnull().sum()","0ab108e0":"df = df.rename(columns={'Name':'name', 'Content': 'content', 'Collection':'collection', 'Year of Publication': 'year'})","4facb905":"# split train dataset into train, validation sets\ndf_content, valid_content, df_year, valid_year = train_test_split(df['content'], df['year'], \n                                                                    random_state=2018, \n                                                                    test_size=0.3)","a8eeee0b":"# import BERT-base pretrained model\nbert = AutoModel.from_pretrained('bert-base-uncased')\n\n# Load the BERT tokenizer\ntokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')","90099d8a":"#Third Row. Second column: content. \n\ndf.iloc[3,1]","d1f27b4f":"#sample data\ntext_list = [\"Before man came to blow it right The wind once blew itself untaught, And did its loudest day and night In any rough place where it caught. Man came to tell it what was wrong: It hadn\u2019t found the place to blow; It blew too hard the aim was song. And listen how it ought to go! He took a little in his mouth, And held it long enough for north To be converted into south, And then by measure blew it forth. By measure. It was word and note, The wind the wind had meant to be A little through the lips and throat. The aim was song the wind could see\"]\n\n\nprint(text_list)\n# encode text\nsent_id = tokenizer.batch_encode_plus(text_list, padding=True)\n\n# output\nprint(sent_id)","0298542c":"df.columns.tolist()","69dd895c":"df['content'].astype(str)#Trying to avoid str error float' object has no attribute 'split'","9f2c8ebf":"#https:\/\/github.com\/lingualytics\/py-lingualytics\/issues\/1 By argoniteXD \n\n# get length of all the messages in the train set\nseq_len = [len(str(i).split()) for i in df['content']]\n\npd.Series(seq_len).hist(bins = 30)","4e529b48":"# tokenize and encode sequences in the training set\ntokens_df = tokenizer.batch_encode_plus(\n    df_content.tolist(),\n    max_length = 2000,\n    pad_to_max_length=True,\n    truncation=True\n)\n\n# tokenize and encode sequences in the validation set\ntokens_val = tokenizer.batch_encode_plus(\n    valid_content.tolist(),\n    max_length = 2000,\n    pad_to_max_length=True,\n    truncation=True\n)","21f36dc4":"## convert lists to tensors\n\ndf_seq = torch.tensor(tokens_df['input_ids'])\ndf_mask = torch.tensor(tokens_df['attention_mask'])\ndf_y = torch.tensor(df_year.tolist())\n\nval_seq = torch.tensor(tokens_val['input_ids'])\nval_mask = torch.tensor(tokens_val['attention_mask'])\nval_y = torch.tensor(valid_year.tolist())","1107a696":"from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n\n#define a batch size\nbatch_size = 32\n\n# wrap tensors\ndf_data = TensorDataset(df_seq, df_mask, df_y)\n\n# sampler for sampling the data during training\ndf_sampler = RandomSampler(df_data)\n\n# dataLoader for train set\ndf_dataloader = DataLoader(df_data, sampler=df_sampler, batch_size=batch_size)\n\n# wrap tensors\nval_data = TensorDataset(val_seq, val_mask, val_y)\n\n# sampler for sampling the data during training\nval_sampler = SequentialSampler(val_data)\n\n# dataLoader for validation set\nval_dataloader = DataLoader(val_data, sampler = val_sampler, batch_size=batch_size)","6c7da1b6":"#sample data\ntext_gold = [\"Nature\u2019s first green is gold, Her hardest hue to hold. Her early leaf\u2019s a flower; But only so an hour. Then leaf subsides to leaf. So Eden sank to grief, So dawn goes down to day. Nothing gold can stay.\"]\n\n\nprint(text_gold)\n# encode text\nsent_gold = tokenizer.batch_encode_plus(text_gold, padding=True)\n\n# output\nprint(sent_gold)","833144bb":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('In 3 words, I can sum up everything I ve learned about life: it goes on.' )","b05647d8":"#Converting the integer sequences to tensors.","ebd830e2":"#At this point the author (Debanjan Sarkar) wrote: WIP and I don't know if he will keep coding or not. ","b45ebd6a":"#See how BERT Tokenizer works, We will try to encode a couple of sentences using the tokenizer.","290d036d":"#Code by Debanjan Sarkar  https:\/\/www.kaggle.com\/deb009\/commonlit-readability-prize-using-bert","5a2ffde1":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQ2HE-uDLvOoiRdNw810jMvODPrc24976bALg&usqp=CAU)slideshare.net","9ec11a62":"#Tokenize the Sentences","53eb565c":"#Below the original snippet was:\n\nseq_len = [len(i.split()) for i in train['excerpt']] \n\nWhich resulted in AttributeError: 'float' object has no attribute 'split'\n\nThen I introduced str().split  Instead of i.split\n\nhttps:\/\/github.com\/lingualytics\/py-lingualytics\/issues\/1 By argoniteXD ","938d4616":"#I was not sure if the rename worked since I was receiving errors with the column's names. ","593cd83e":"![](https:\/\/i.redd.it\/m721qo3ywsk31.jpg)reddit.com","fd54803e":"![](http:\/\/2.bp.blogspot.com\/-iPpPd6ErybU\/U1dKbD4LksI\/AAAAAAAAAF4\/8JKu956uzqE\/s1600\/gold.gif)outsiders2014.blogspot.com","4276947a":"<h1 style=\"background-color:#001f3f; font-family:'Brush Script MT',cursive;color:#FFD700;font-size:200%; text-align:center;border-radius: 50% 20% \/ 10% 40%\">Robert Frost<\/h1>\n\n\"Robert Lee Frost (March 26, 1874 \u2013 January 29, 1963) was an American poet. His work was initially published in England before it was published in the United States. Known for his realistic depictions of rural life and his command of American colloquial speech, Frost frequently wrote about settings from rural life in New England in the early 20th century, using them to examine complex social and philosophical themes.\"\n\n\"Frost was honored frequently during his lifetime and is the only poet to receive four Pulitzer Prizes for Poetry. He became one of America's rare \"public literary figures, almost an artistic institution.\" He was awarded the Congressional Gold Medal in 1960 for his poetic works. On July 22, 1961, Frost was named poet laureate of Vermont.\"\n\nhttps:\/\/en.wikipedia.org\/wiki\/Robert_Frost","85f22ebd":"![](https:\/\/www.biography.com\/.image\/c_fit%2Ccs_srgb%2Cfl_progressive%2Cq_auto:good%2Cw_620\/MTY2Nzk4OTY5ODAyODU5NjQx\/robertfrost_facts_desktop.jpg)biography.com","694b64fa":"#Import BERT Model and BERT Tokenizer","0645e3a9":"#We will set the padding length as 2000. See chart above. There is very few at 3000."}}