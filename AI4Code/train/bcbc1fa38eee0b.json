{"cell_type":{"25c0d9de":"code","c9e5d5dd":"code","a0a6f4d1":"code","d31fb310":"code","41b8012d":"code","d78a753a":"code","81780559":"code","db36baf6":"code","4e274095":"code","7b795387":"code","74f9f586":"code","6d3f28ed":"code","bb834c28":"code","f53162a2":"code","dac570fc":"code","fab961e3":"code","9c36149e":"code","61a7c985":"code","f9f96983":"code","0b1848cc":"code","f1f9023c":"code","d7e05fd5":"code","8db4d1ef":"code","43eefeea":"code","39236891":"code","16a9d3bf":"code","c121991a":"code","792d2c76":"code","dcc26769":"code","f053c42a":"code","182194c0":"code","b6b1dc67":"code","49cf97e8":"code","c0adf1ef":"code","2180365a":"code","2d80d74a":"code","9a1422a7":"code","2137a1e5":"code","02e5587c":"code","83c93ce9":"code","cd254375":"code","f391019c":"code","37690266":"code","85da3fa8":"code","affcae38":"code","0dec0326":"code","7bb444b6":"code","3ac81d8f":"code","c46ae5cc":"code","424e5e1e":"code","560ebb42":"code","2208e23b":"code","2979b64a":"markdown","3f82b86a":"markdown","9394dd28":"markdown","102c072b":"markdown","77a04383":"markdown","8b2aa4c4":"markdown","bd174133":"markdown","07c32a7b":"markdown","0bc7d123":"markdown"},"source":{"25c0d9de":"pip install google-colab","c9e5d5dd":"import cv2           \nimport numpy as np\nimport os\nimport zipfile\nfrom google.colab.patches import cv2_imshow\nimport tensorflow as tf\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","a0a6f4d1":"path = '..\/input\/neural-networks-homer-and-bart-classification\/homer_bart_1'","d31fb310":"directory = '..\/input\/neural-networks-homer-and-bart-classification\/homer_bart_1'\nfiles = [os.path.join(directory, f) for f in sorted(os.listdir(directory))]\nprint(files)","41b8012d":"type(files)","d78a753a":"width, height = 128, 128  ","81780559":"images = []\nclasses = []  ","db36baf6":"for path_image in files:\n  \n  try:                             \n    image = cv2.imread(path_image)\n    (H, W) = image.shape[:2]        \n  except:\n    continue\n\n  image = cv2.resize(image, (width, height))\n  image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)   \n  cv2_imshow(image)\n\n  image = image.ravel()\n\n  images.append(image)    \n  name_image = os.path.basename(os.path.normpath(path_image))  \n  #print(nome_imagem)\n  if name_image.startswith('b'):                             \n    classe = 0\n  else:\n    classe = 1\n\n  classes.append(classe)\n  print(classe)","4e274095":"images","7b795387":"print(classes)","74f9f586":"images[100], classes[100]","6d3f28ed":"images[200], classes[200]","bb834c28":"type(images), type(classes)","f53162a2":"X = np.asarray(images)   \ny = np.asarray(classes)","dac570fc":"type(X), type(y)","fab961e3":"X.shape","9c36149e":"y.shape","61a7c985":"sns.countplot(y);","f9f96983":"np.unique(y, return_counts=True)","0b1848cc":"X[0].max(), X[0].min()","f1f9023c":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)","d7e05fd5":"X[0].max(), X[0].min()   ","8db4d1ef":"X[1]","43eefeea":"X.shape","39236891":"from sklearn.model_selection import train_test_split","16a9d3bf":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)  \n","c121991a":"X_train.shape, y_train.shape","792d2c76":"X_test.shape, y_test.shape","dcc26769":"128 * 128","f053c42a":"(16384 + 2) \/ 2","182194c0":"# 16384 -> 8193 -> 8193\nnetwork1 = tf.keras.models.Sequential()\nnetwork1.add(tf.keras.layers.Dense(input_shape = (16384,), units = 8193, activation='relu')) \nnetwork1.add(tf.keras.layers.Dense(units = 8193, activation='relu'))\nnetwork1.add(tf.keras.layers.Dense(units = 1, activation='sigmoid'))","b6b1dc67":"network1.summary()","49cf97e8":"network1.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['accuracy'])","c0adf1ef":"historic = network1.fit(X_train, y_train, epochs = 50)","2180365a":"historic.history.keys()","2d80d74a":"plt.plot(historic.history['loss']);","9a1422a7":"plt.plot(historic.history['accuracy']);","2137a1e5":"X_test.shape","02e5587c":"forecasts = network1.predict(X_test)  \nforecasts","83c93ce9":"# 0 False Bart\n# 1 True Homer\nforecasts = (forecasts > 0.5)\nforecasts","cd254375":"y_test","f391019c":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, forecasts)","37690266":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, forecasts)\ncm","85da3fa8":"sns.heatmap(cm, annot=True);","affcae38":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, forecasts))","0dec0326":"X_test[0], y_test[0]   ","7bb444b6":"X_test[0].shape","3ac81d8f":"cv2_imshow(X_test[0].reshape(128,128))  ","c46ae5cc":"image_test = X_test[10]  \nimage_test = scaler.inverse_transform(image_test.reshape(1, -1))\nimage_test","424e5e1e":"cv2_imshow(image_test.reshape(128,128))","560ebb42":"network1.predict(image_test)[0][0]  ","2208e23b":"if network1.predict(image_test)[0][0] < 0.5:\n  print('Bart')\nelse:\n  print('Homer')","2979b64a":"## Data normalization","3f82b86a":"# **Context**\n\nThere are 270 images with the faces and bodies of Homer and Bart, the images are already with the names, making it easier for the treatment and training of the neural network.\n\nhttps:\/\/www.kaggle.com\/juniorbueno\/neural-networks-homer-and-bart-classification\n\n","9394dd28":"# **If you find this notebook useful, support with an upvote** \ud83d\udc4d\u00b6","102c072b":"## Training and testing bases","77a04383":"## Import from libraries","8b2aa4c4":"## Construction and training of the neural network","bd174133":"## Neural network evaluation","07c32a7b":"## Single image classification","0bc7d123":"## Extraction of pixels from images"}}