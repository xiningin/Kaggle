{"cell_type":{"226744d6":"code","e1ed1aa0":"code","4ab36979":"code","78df2e2a":"code","fd8d511e":"code","2fbd7d49":"code","7a2fd9b4":"code","486e9ccf":"code","8f4b48f7":"code","e2284769":"code","6520fd9c":"code","a72f6a31":"code","1c5f6723":"code","ccc40525":"code","9744cfd0":"code","c39dbcb3":"code","72c0dc52":"code","ce5f0585":"code","4deb0375":"markdown","594848dc":"markdown","fa8e6336":"markdown","03666e53":"markdown","148740bf":"markdown","3113e0bb":"markdown","f1390c68":"markdown","30f3943a":"markdown","2f4d8ba6":"markdown","58746846":"markdown","6c82934a":"markdown","78f6fa7f":"markdown","ce36c692":"markdown","25bd2707":"markdown","39ea45e2":"markdown","2938cfbb":"markdown","43ed7de0":"markdown"},"source":{"226744d6":"import tensorflow \ntensorflow.__version__","e1ed1aa0":"from tensorflow.keras.datasets import mnist\n\noriginal_data = mnist.load_data()","4ab36979":"original_data","78df2e2a":"(X_train,y_train),(X_test,y_test) = mnist.load_data()","fd8d511e":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.imshow(X_train[1036])\nprint(\"Label:{}\".format(y_train[1036]))","2fbd7d49":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","7a2fd9b4":"X_train = X_train.reshape(X_train.shape[0],28,28,1)\nX_test = X_test.reshape(X_test.shape[0],28,28,1)","486e9ccf":"#N1 \nX_train = X_train.astype('float32')\nX_test =  X_test.astype('float32')","8f4b48f7":"#N2 \nX_train \/= 255\nX_test \/= 255","e2284769":"print(X_train.shape)\nprint(\"Max value in X_train:\", X_train.max())\nprint(\"Min value in X_train:\", X_train.min())","6520fd9c":"from tensorflow.keras.utils import to_categorical\n\ny_train = to_categorical(y_train,num_classes=10)\ny_test = to_categorical(y_test,num_classes=10)","a72f6a31":"print(\"Shape of y_train:\", y_train.shape)\nprint(\"One value of y_train:\", y_train[2])","1c5f6723":"from tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Flatten, Dense , Activation\n","ccc40525":"sequential_model = Sequential()\n\nsequential_model.add(Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=(28, 28, 1)))\nsequential_model.add(Conv2D(filters=32,kernel_size=3,activation='relu'))\n\nsequential_model.add(Flatten())\n\nsequential_model.add(Dense(128,activation=\"relu\"))\nsequential_model.add(Dense(10,activation=\"softmax\"))","9744cfd0":"sequential_model.compile(loss=\"categorical_crossentropy\",metrics=[\"accuracy\"],optimizer=\"adam\")","c39dbcb3":"sequential_model.fit(x=X_train,y=y_train,batch_size=32,epochs=5,validation_split=0.3)","72c0dc52":"sequential_model.evaluate(X_test,y_test)","ce5f0585":"plt.imshow(X_test[16].reshape(28, 28), cmap='gray')\ny_pred = sequential_model.predict(X_test[16].reshape(1, 28, 28, 1))\nprint(\"Predicted label:\", y_pred.argmax())","4deb0375":"# Simple convoilution neural network(CNN) using MNIST(Modified National Institute of Standards and Technolog) dataset ","594848dc":"\n\n* Define a sequential model\n* add 2 convolutional layers\n    * no of filters: 32\n    * kernel size: 3x3\n    * activation: \"relu\"\n    * input shape: (28, 28, 1) for first layer\n* flatten the data\n    * add Flatten later\n    * flatten layers flatten 2D arrays to 1D array before building the fully connected layers\n* Add 2 dense layers\n    * number of neurons in first layer: 128\n    * number of neurons in last layer: number of classes\n    * activation function in first layer: relu\n    * activation function in last layer: softmax\n    * we may experiment with any number of neurons for the first Dense layer; however, the final Dense layer must have neurons equal to the number of output classes","fa8e6336":"# One-hot encode the class vector\n* Convert class vectors (integers) to binary class matrix\n* Convert y_train and y_test\n* Number of classes: 10 (Zero to Nine)\n* we are doing this to use categorical_crossentropy as loss","03666e53":"# Loss and Accuracy\n*  Finally test the model with test data set\n*  The Evaluate function will provide the Loss and Accuracy for us.","148740bf":"# Shape of the Data\n* Data Set contains 60k train and 10k test images and same size of labels\n* All images are size of 28 x 28","3113e0bb":"# Insight of Actual Data","f1390c68":"# Image visualization  ","30f3943a":"![convnet.jpeg](attachment:974cecb5-0abe-4f61-806a-ef57d66c9a29.jpeg)","2f4d8ba6":"# Compile the model\n\n* Hyper Parameters which need Attentation \n    *   LOSS\n    *   METRICS\n    *   OPTIMIZER","58746846":"# Loading MNIST dataset\n\n* The MNIST database contains images taken from American Census Bureau employees and American high school students. \n* The MNIST dataset is one of the most common datasets used for image classification. \n\n![The-MNIST-dataset-has-a-training-set-of-60-000-examples-and-a-test-set-of-10-000.png](attachment:c37b83f2-31f8-4c5a-ba6d-16dc1dff3098.png)","6c82934a":"# Data Normalization\n\n* N1 -First we will make sure that the values are float so that we can get decimal points after division\n* N2- we can achieve this by dividing the RGB codes with 255 where we are normaize between 0 to 1.\n    * We can normalize between -1 to 1 also \n* we must normalize our data as it is always required in neural network models\n* normalize X_train and X_test\n","78f6fa7f":"* X_train and y_train contains greyscale code \n* y_train and y_test contains labels from 0 to 9 \n","ce36c692":"# Fitting the model","25bd2707":"# Test the Model\n* The Predict function will predict\/find the output for a given input.","39ea45e2":"# Reshape train and test sets \n* Sequential model in tensorflow.keras expects data to be in the format (n_e, n_h, n_w, n_c)\n    * n_e= Number of Examples\n    * n_h = Height, n_w = Width\n    * n_c = Number of Channels\n* No need to reshape labels\n\n\n","2938cfbb":"# Build Sequential Model \n\n\n![Example-of-fully-connected-neural-network.png](attachment:4bf56797-4f7c-4b12-a355-830940d294ea.png)","43ed7de0":"# Simple Article for more about CNN : [https:\/\/cs231n.github.io\/convolutional-networks\/](http:\/\/)"}}