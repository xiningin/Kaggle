{"cell_type":{"1ed8a3a9":"code","8f898a1d":"code","c7c080c8":"code","4a25a825":"code","dc696aa9":"code","a690b7af":"code","9e6511a6":"code","f368a7dd":"code","910fea8f":"code","a3bdcebd":"code","11f0148e":"code","415e0141":"code","9af7b990":"code","64d2febd":"code","681264b8":"code","291acb84":"code","7a9e90d7":"code","dee021c5":"code","479c7662":"code","d98a9d61":"code","acb73fd6":"code","93d9aad7":"code","e5b438f7":"code","ee00e533":"code","12d78e23":"code","b6094123":"code","3387133f":"code","5171b30f":"code","968e874a":"code","1f1200ae":"code","c46f9027":"code","ee277849":"code","6f4de607":"code","875eb814":"code","815d61fd":"code","bb317c3c":"code","7c311f0c":"code","b6fc6686":"code","d3aa04dc":"markdown","c698a3a8":"markdown","bc11c09e":"markdown","7fb6bdd0":"markdown","5b64ca2d":"markdown","cc17ad67":"markdown","1fa76c5f":"markdown","478360a8":"markdown","0d4de733":"markdown","a14c4324":"markdown","1268d79a":"markdown","123b4663":"markdown","49577841":"markdown","1f8b81bb":"markdown","ea2161cb":"markdown","4941f375":"markdown","162e00a1":"markdown","d16f1c9f":"markdown","5598060c":"markdown","026dae52":"markdown"},"source":{"1ed8a3a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8f898a1d":"import matplotlib.pyplot as plt\nimport seaborn as sns","c7c080c8":"pd.set_option('display.max_columns',55)","4a25a825":"pd.set_option('display.max_rows',1500)","dc696aa9":"data = pd.read_csv('\/kaggle\/input\/pump-sensor-data\/sensor.csv')","a690b7af":"data.info()","9e6511a6":"del data['Unnamed: 0']","f368a7dd":"data.head(15)","910fea8f":"data.index = data['timestamp']","a3bdcebd":"data.index = pd.to_datetime(data.index)","11f0148e":"del data['timestamp']","415e0141":"data.describe()","9af7b990":"corr  = data.corr()","64d2febd":"fig, ax = plt.subplots(figsize=(8,8))  \nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n    \n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n)","681264b8":"data['machine_status'].unique()","291acb84":"data[(data['machine_status'] == 'BROKEN')]","7a9e90d7":"data[(data['machine_status'] == 'RECOVERING')]","dee021c5":"data[(data['machine_status'] == 'RECOVERING')].info()","479c7662":"columns = ['sensor_00','sensor_06','sensor_07','sensor_08','sensor_09','sensor_51']","d98a9d61":"for column in columns:\n    print('{0} Original'.format(column))\n    display(data[(data['machine_status'] == 'NORMAL')][column].describe())\n    print('{0} In Recovery'.format(column))\n    display(data[(data['machine_status'] == 'RECOVERING')][column].describe())","acb73fd6":"import matplotlib.dates as mdates\n","93d9aad7":"fig, ax = plt.subplots(figsize=(15,5))\nplt.xticks(rotation=70)\nax.plot(data.loc['2018-04-12 21:00:00':'2018-04-12 22:15:00', 'sensor_00'],marker='o', linestyle='-')\nplt.grid(True) \nax.set_ylabel('Reading Unit')\nax.set_title('First Broken: Sensor_00 Reading')\n# Set x-axis major ticks to weekly interval, on Mondays\nax.xaxis.set_major_locator(mdates.MinuteLocator())\n# Format x-tick labels as 3-letter month name and day number\nax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'));\n","e5b438f7":"fig, ax = plt.subplots(figsize=(15,5))\nplt.xticks(rotation=70)\nax.plot(data.loc['2018-04-12 21:00:00':'2018-04-12 22:15:00', 'sensor_06'],marker='o', linestyle='-')\nplt.grid(True) \nax.set_ylabel('Reading Unit')\nax.set_title('First Broken: Sensor_06 Reading')\n# Set x-axis major ticks to weekly interval, on Mondays\nax.xaxis.set_major_locator(mdates.MinuteLocator())\n# Format x-tick labels as 3-letter month name and day number\nax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'));\n","ee00e533":"fig, ax = plt.subplots(figsize=(15,5))\nplt.xticks(rotation=70)\nax.plot(data.loc['2018-04-12 21:00:00':'2018-04-12 22:15:00', 'sensor_07'],marker='o', linestyle='-')\nplt.grid(True) \nax.set_ylabel('Reading Unit')\nax.set_title('First Broken: Sensor_07 Reading')\n# Set x-axis major ticks to weekly interval, on Mondays\nax.xaxis.set_major_locator(mdates.MinuteLocator())\n# Format x-tick labels as 3-letter month name and day number\nax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'));\n","12d78e23":"fig, ax = plt.subplots(figsize=(15,5))\nplt.xticks(rotation=70)\nax.plot(data.loc['2018-04-12 21:00:00':'2018-04-12 22:15:00', 'sensor_08'],marker='o', linestyle='-')\nplt.grid(True) \nax.set_ylabel('Reading Unit')\nax.set_title('First Broken: Sensor_08 Reading')\n# Set x-axis major ticks to weekly interval, on Mondays\nax.xaxis.set_major_locator(mdates.MinuteLocator())\n# Format x-tick labels as 3-letter month name and day number\nax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'));","b6094123":"fig, ax = plt.subplots(figsize=(15,5))\nplt.xticks(rotation=70)\nax.plot(data.loc['2018-04-12 21:00:00':'2018-04-12 22:15:00', 'sensor_09'],marker='o', linestyle='-')\nplt.grid(True) \nax.set_ylabel('Reading Unit')\nax.set_title('First Broken: Sensor_09 Reading')\n# Set x-axis major ticks to weekly interval, on Mondays\nax.xaxis.set_major_locator(mdates.MinuteLocator())\n# Format x-tick labels as 3-letter month name and day number\nax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'));\n","3387133f":"fig, ax = plt.subplots(figsize=(15,5))\nplt.xticks(rotation=70)\nax.plot(data.loc['2018-04-12 21:00:00':'2018-04-12 22:15:00', 'sensor_51'],marker='o', linestyle='-')\nplt.grid(True) \nax.set_ylabel('Reading Unit')\nax.set_title('First Broken: Sensor_51 Reading')\n# Set x-axis major ticks to weekly interval, on Mondays\nax.xaxis.set_major_locator(mdates.MinuteLocator())\n# Format x-tick labels as 3-letter month name and day number\nax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'));\n","5171b30f":"#Getting the list of columns\ncols = list(data.columns)","968e874a":"#Removing sensor 15 as it is completely null\ncols.remove('sensor_15')","1f1200ae":"for i in cols:\n    fig, ax = plt.subplots(figsize=(18,5))\n    plt.xticks(rotation=90)\n    ax.plot(data.loc['2018-04-12 12:00:00':'2018-04-14 12:00:00', i],marker='o', linestyle='-')\n    plt.grid(True) \n    ax.set_ylabel('Reading Unit')\n    ax.set_title('First Broken: {0} Reading'.format(i))\n    # Set x-axis major ticks to weekly interval, on Mondays\n    ax.xaxis.set_major_locator(mdates.HourLocator())\n    # Format x-tick labels as 3-letter month name and day number\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'))","c46f9027":"for i in cols:\n    fig, ax = plt.subplots(figsize=(18,5))\n    plt.xticks(rotation=90)\n    ax.plot(data.loc['2018-04-17 12:00:00':'2018-04-19 12:00:00', i],marker='o', linestyle='-')\n    plt.grid(True) \n    ax.set_ylabel('Reading Unit')\n    ax.set_title('Second Broken: {0} Reading'.format(i))\n    # Set x-axis major ticks to weekly interval, on Mondays\n    ax.xaxis.set_major_locator(mdates.HourLocator())\n    # Format x-tick labels as 3-letter month name and day number\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'))","ee277849":"for i in cols:\n    fig, ax = plt.subplots(figsize=(18,5))\n    plt.xticks(rotation=90)\n    ax.plot(data.loc['2018-05-18 20:00:00':'2018-05-20 20:00:00', i],marker='o', linestyle='-')\n    plt.grid(True) \n    ax.set_ylabel('Reading Unit')\n    ax.set_title('Third Broken: {0} Reading'.format(i))\n    # Set x-axis major ticks to weekly interval, on Mondays\n    ax.xaxis.set_major_locator(mdates.HourLocator())\n    # Format x-tick labels as 3-letter month name and day number\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'))","6f4de607":"for i in cols:\n    fig, ax = plt.subplots(figsize=(18,5))\n    plt.xticks(rotation=90)\n    ax.plot(data.loc['2018-05-24 12:00:00':'2018-05-26 12:00:00', i],marker='o', linestyle='-')\n    plt.grid(True) \n    ax.set_ylabel('Reading Unit')\n    ax.set_title('Fourth Broken: {0} Reading'.format(i))\n    # Set x-axis major ticks to weekly interval, on Mondays\n    ax.xaxis.set_major_locator(mdates.HourLocator())\n    # Format x-tick labels as 3-letter month name and day number\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'))","875eb814":"for i in cols:\n    if i == 'sensor_51':\n        continue\n    fig, ax = plt.subplots(figsize=(18,5))\n    plt.xticks(rotation=90)\n    ax.plot(data.loc['2018-06-28 12:00:00':'2018-06-30 12:00:00', i],marker='o', linestyle='-')\n    plt.grid(True) \n    ax.set_ylabel('Reading Unit')\n    ax.set_title('Fifth Broken: {0} Reading'.format(i))\n    # Set x-axis major ticks to weekly interval, on Mondays\n    ax.xaxis.set_major_locator(mdates.HourLocator())\n    # Format x-tick labels as 3-letter month name and day number\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'))","815d61fd":"for i in cols:\n    fig, ax = plt.subplots(figsize=(18,5))\n    plt.xticks(rotation=90)\n    ax.plot(data.loc['2018-07-07 12:00:00':'2018-07-09 12:00:00', i],marker='o', linestyle='-')\n    plt.grid(True) \n    ax.set_ylabel('Reading Unit')\n    ax.set_title('Sixth Broken: {0} Reading'.format(i))\n    # Set x-axis major ticks to weekly interval, on Mondays\n    ax.xaxis.set_major_locator(mdates.HourLocator())\n    # Format x-tick labels as 3-letter month name and day number\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'))","bb317c3c":"for i in cols:\n    if i == 'sensor_50':\n        continue\n    fig, ax = plt.subplots(figsize=(18,5))\n    plt.xticks(rotation=90)\n    ax.plot(data.loc['2018-07-24 12:00:00':'2018-07-26 12:00:00', i],marker='o', linestyle='-')\n    plt.grid(True) \n    ax.set_ylabel('Reading Unit')\n    ax.set_title('Seventh Broken: {0} Reading'.format(i))\n    # Set x-axis major ticks to weekly interval, on Mondays\n    ax.xaxis.set_major_locator(mdates.HourLocator())\n    # Format x-tick labels as 3-letter month name and day number\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'))","7c311f0c":"fig, ax = plt.subplots(figsize=(18,5))\nplt.xticks(rotation=90)\nax.plot(data.loc['2018-04-17 12:00:00':'2018-04-20 12:00:00', 'machine_status'],marker='o', linestyle='-')\nplt.grid(True) \nax.set_ylabel('Reading Unit')\nax.set_title('Second Broken: machine_status Reading')\n# Set x-axis major ticks to weekly interval, on Mondays\nax.xaxis.set_major_locator(mdates.HourLocator())\n# Format x-tick labels as 3-letter month name and day number\nax.xaxis.set_major_formatter(mdates.DateFormatter('%HH:%MM'))","b6fc6686":"\nfig, ax = plt.subplots(figsize=(18,5))\nplt.xticks(rotation=90)\nax.plot(data.loc['2018-06-28 12:00:00':'2018-07-06 12:00:00', 'machine_status'],marker='o', linestyle='-')\nplt.grid(True) \nax.set_ylabel('Reading Unit')\nax.set_title('Fifth Broken: machine_status Reading')\n# Set x-axis major ticks to weekly interval, on Mondays\nax.xaxis.set_major_locator(mdates.DayLocator())\n# Format x-tick labels as 3-letter month name and day number\nax.xaxis.set_major_formatter(mdates.DateFormatter('%d'))","d3aa04dc":"> **Sixth Broken**: To get back to normal state, it took around 1 hour","c698a3a8":"Skipping sensor_51 as it is completely null for this broken state","bc11c09e":"> Plotting second and fifth broken event, once again with more window to see how much time it takes to recover","7fb6bdd0":"The sensors which have many null values in  'recovering' class show a sudden change when a failure occurs, which means that they may be sensors which are  heavily dependent on the system","5b64ca2d":"> **Third Broken:** To get back to normal state, it took around 22 hours","cc17ad67":"> **First Broken:** To get back to normal state, it took around 16 hours","1fa76c5f":"Based on correlation, there are three sets of clusters\nBasically what it means is some sensors of 0 to 14 have high correlations with each other\nSensors 14 to 36 have high correlation with each other\nand then Sensors 38 to 41 have correlations with each other\nbut there is not significant correlation between these clusters of Sensors","478360a8":"Skipping sensor_50 as it is completely null for this broken even","0d4de733":"**Second Broken**: To get back to normal state, it took around 52 hours","a14c4324":"There is a significant change in standard deviations and means of these sensors during the normal state and not normal state","1268d79a":"> **Seventh Broken**: To get back to normal state, it took around 1 hour","123b4663":"There are 3 unique label values, namely: NORMAL, BROKEN and RECOVERING","49577841":"> **Second Broken**: To get back to normal state, it took almost 6 days, this is the largest broken state in the dataset","1f8b81bb":"There are many null objects in many features, sensor_15 is completely null","ea2161cb":"When the machine is in recovering status, the following have more NaN values: **sensor00, sensor06, sensor07, sensor08, sensor09, sensor_51** has some NaN values but the number is lot less than than the other sensors","4941f375":"We can see that different sensors have different scales","162e00a1":"> **Second Broken:** Even after plotting for more than 24 hours, it has still not recovered","d16f1c9f":"> **Fourth Broken:** To get back to normal state, it took around 10 hours","5598060c":"> **Fifth Broken:** Even after plotting for more than 24 hours, it has still not recovered","026dae52":"When it is broken, the next minute onwards, the status is considered as recovering until it becomes normal again "}}