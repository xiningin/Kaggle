{"cell_type":{"374bc0a7":"code","3190ea53":"code","8af85177":"code","919edb50":"code","7ecc7d31":"code","c7c88309":"code","d21b3bb3":"code","0d796924":"code","2e261b34":"code","ecb76739":"code","eb642230":"code","89424aa4":"code","6315b925":"code","99dd9e98":"code","d379bdc3":"code","df3a3f58":"code","d4fb1853":"code","4adddf73":"code","0a95a342":"code","07f64bd0":"code","604d2e64":"code","c92cfb91":"code","56b53dd2":"code","12312c1c":"code","f65cac93":"code","444f04bb":"code","cf8063e0":"code","f2c42f12":"code","759254af":"code","30921b0a":"code","67d74f52":"code","dd98229e":"code","ed6dfdcf":"markdown","d1a31320":"markdown","d77ec9f5":"markdown"},"source":{"374bc0a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3190ea53":"from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","8af85177":"dataset1 = pd.read_csv('..\/input\/Sheet_1.csv',usecols=['response_id','class','response_text'],encoding='latin-1')\ndataset2 = pd.read_csv(\"..\/input\/Sheet_2.csv\",encoding='latin-1')","919edb50":"dataset1.head(5)","7ecc7d31":"dataset2.head(5)","c7c88309":"dataset1['class'].value_counts()\n","d21b3bb3":"from wordcloud import WordCloud, STOPWORDS\nfrom nltk.corpus import stopwords\nstop = set(stopwords.words('english'))\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndef cloud(text):\n    wordcloud = WordCloud(background_color=\"white\",stopwords=stop).generate(\" \".join([i for i in text.str.upper()]))\n    plt.figure(figsize=(12,8))\n    plt.imshow(wordcloud)\n    \n    plt.axis(\"off\")\n    plt.title(\"Chat Bot Response\")\ncloud(dataset1['response_text'])","0d796924":"from sklearn import preprocessing\nEncode = preprocessing.LabelEncoder()\n\nfrom sklearn import metrics\n#from sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier","2e261b34":"dataset1['Label'] = Encode.fit_transform(dataset1['class'])\n","ecb76739":"from sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nvector = CountVectorizer()\nx = dataset1.response_text\ny = dataset1.Label\nx_train,x_test,y_train,y_test = train_test_split(x,y,random_state=1)\nx_train_dtm = vector.fit_transform(x_train)\nx_test_dtm = vector.transform(x_test)\nrf = RandomForestClassifier(max_depth=10,max_features=10)\nrf.fit(x_train_dtm,y_train)\nrf_predict = rf.predict(x_test_dtm)\nmetrics.accuracy_score(y_test,rf_predict)","eb642230":"dataset2[\"class\"].value_counts()","89424aa4":"def wordcloud(dataframe):\n    stopwords = set(STOPWORDS)\n    wordcloud = WordCloud(background_color=\"white\",stopwords=stopwords).generate(\" \".join([i for i in dataframe.str.upper()]))\n    plt.figure(figsize=(12,8))\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.title(\"bag_composition\")\n\nwordcloud(dataset2['resume_text'])","6315b925":"dataset2['Label'] = Encode.fit_transform(dataset2['class'])\nx = dataset2.resume_text\ny = dataset2.Label\nx_train,x_test,y_train,y_test = train_test_split(x,y,random_state=1)\nx_train_dtm = vector.fit_transform(x_train)\nx_test_dtm = vector.transform(x_test)","99dd9e98":"rf = RandomForestClassifier(max_depth=10,max_features=10)\nrf.fit(x_train_dtm,y_train)\nrf_predict = rf.predict(x_test_dtm)\nmetrics.accuracy_score(y_test,rf_predict)","d379bdc3":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.utils import to_categorical\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","df3a3f58":"dataset = pd.read_csv('..\/input\/Sheet_1.csv')\nx_col = dataset.iloc[1:, 2] \ny_col = dataset.iloc[1:, 1] ","d4fb1853":"num_classes = len(list(set(y_col)))\ny_int_to_label = {idx:label for idx,label in enumerate(set(y_col))}\ny_label_to_int = {label:idx for idx,label in enumerate(set(y_col))}\ny_int = np.array([y_label_to_int[label] for label in y_col])\nprint(y_int)","4adddf73":"vectorizer = TfidfVectorizer()\nx_vect = vectorizer.fit_transform(x_col)\ny_vect = to_categorical(y_int)","0a95a342":"x_train, x_test, y_train, y_test = train_test_split(x_vect, y_vect, test_size=0.3)","07f64bd0":"model = Sequential()\nmodel.add(Dense(256, activation='tanh', input_dim=x_vect.shape[1]))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(128, activation='tanh'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(64, activation='tanh'))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()","604d2e64":"num_epochs=50\nhist = model.fit(x_train, y_train, batch_size=10, epochs=num_epochs, verbose=2, validation_split=0.25)","c92cfb91":"train_loss = hist.history['loss']\nval_loss   = hist.history['val_loss']\ntrain_acc  = hist.history['acc']\nval_acc    = hist.history['val_acc']\nxc         = range(num_epochs)\nplt.figure()\nplt.plot(xc, train_loss, color='red')\nplt.plot(xc, val_loss, color='green')\nplt.show()","56b53dd2":"score = model.evaluate(x_test, y_test)\nprint('Accuracy ', score[1])","12312c1c":"dataset = pd.read_csv('..\/input\/Sheet_2.csv', engine='python')\n","f65cac93":"x_col = dataset.iloc[1:, 2] \ny_col = dataset.iloc[1:, 1] ","444f04bb":"num_classes = len(list(set(y_col)))\ny_int_to_label = {idx:label for idx,label in enumerate(set(y_col))}\ny_label_to_int = {label:idx for idx,label in enumerate(set(y_col))}\ny_int = np.array([y_label_to_int[label] for label in y_col])\nprint(y_int)","cf8063e0":"vectorizer = TfidfVectorizer()\nx_vect = vectorizer.fit_transform(x_col)\ny_vect = to_categorical(y_int)","f2c42f12":"x_train, x_test, y_train, y_test = train_test_split(x_vect, y_vect, test_size=0.3)","759254af":"model = Sequential()\nmodel.add(Dense(256, activation='tanh', input_dim=x_vect.shape[1]))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(128, activation='tanh'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(64, activation='tanh'))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()","30921b0a":"num_epochs=50\nhist = model.fit(x_train, y_train, batch_size=10, epochs=num_epochs, verbose=2, validation_split=0.25)","67d74f52":"train_loss = hist.history['loss']\nval_loss   = hist.history['val_loss']\ntrain_acc  = hist.history['acc']\nval_acc    = hist.history['val_acc']\nxc         = range(num_epochs)\nplt.figure()\nplt.plot(xc, train_loss, color='red')\nplt.plot(xc, val_loss, color='green')\nplt.show()","dd98229e":"score = model.evaluate(x_test, y_test)\nprint('Accuracy ', score[1])","ed6dfdcf":"**Seniorio 3**","d1a31320":"**SCENERIO 1**","d77ec9f5":"**SENIORIO 2**"}}