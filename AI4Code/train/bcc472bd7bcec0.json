{"cell_type":{"f118b1d2":"code","fdfae3a1":"code","63e4e083":"code","7aac957a":"code","f1139014":"code","4f9a835b":"code","a1a536fe":"code","2745f931":"code","c5a86ab3":"code","59042bc2":"code","fb4a5874":"code","126e31fa":"code","3c37d044":"markdown","ea35a608":"markdown"},"source":{"f118b1d2":"# to handle datasets\nimport pandas as pd\nimport numpy as np\n\n# navigate folders\nfrom glob import glob\nimport os\n\n# for plotting\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# to open the images\nimport cv2\n\n# to display all the columns of the dataframe in the notebook\npd.pandas.set_option('display.max_columns', None)\n# data preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\n# evaluate model and separate train and test\nfrom sklearn.metrics import confusion_matrix\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\nfrom keras.optimizers import Adam\nfrom keras.metrics import categorical_crossentropy\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Model\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom keras.preprocessing import image\nfrom keras.utils import np_utils","fdfae3a1":"train=pd.read_csv('..\/input\/ranzcr-clip-catheter-line-classification\/train.csv')\ntest=pd.read_csv('..\/input\/ranzcr-clip-catheter-line-classification\/sample_submission.csv')\ntrain['images']='..\/input\/ranzcr-clip-catheter-line-classification\/train\/'+train['StudyInstanceUID']+'.jpg'\ntest['images']='..\/input\/ranzcr-clip-catheter-line-classification\/test\/'+test['StudyInstanceUID']+'.jpg'\n","63e4e083":"train","7aac957a":"y=train[['ETT - Abnormal', 'ETT - Borderline',\n       'ETT - Normal', 'NGT - Abnormal', 'NGT - Borderline',\n       'NGT - Incompletely Imaged', 'NGT - Normal', 'CVC - Abnormal',\n       'CVC - Borderline', 'CVC - Normal', 'Swan Ganz Catheter Present']]\ny=y.values","f1139014":"def im_resize(df, n):\n    #print(df[n])\n    im = cv2.imread(df[n])\n    im = cv2.resize(im, (IMAGE_SIZE, IMAGE_SIZE))\n    #plt.imshow(im)\n    #plt.show()\n\n    return im\ndef create_dataset(df, image_size):\n    # functions creates dataset as required for cnn\n    tmp = np.zeros((len(df), image_size, image_size,3), dtype='float32')\n\n    for n in range(0, len(df)):\n        im = im_resize(df, n)\n        tmp[n] = im\n  \n    print('Dataset Images shape: {} size: {:,}'.format(tmp.shape, tmp.size))\n    return tmp","4f9a835b":"IMAGE_SIZE = 150\n# X=create_dataset(train['images'],150)\n\nX = np.load('..\/input\/ranzcr-numpy-150\/X.npy',mmap_mode=\"r\")\n","a1a536fe":"# import gc\n# d = dict()\n# for o in gc.get_objects():\n#     name = type(o).__name__\n#     if name not in d:\n#         d[name] = 1\n#     else:\n#         d[name] += 1\n\n# items = d.items()\n# #items.sort(key=lambda x:x[1])\n# for key, value in items:\n#     print(key, value)\n","2745f931":"X.shape","c5a86ab3":"xt=create_dataset(test['images'],150 )\n# xt = np.load('..\/input\/ranzcr-numpy-150\/xt.npy',mmap_mode=\"r\")\n# xt.shape","59042bc2":"IMAGE_SIZE = 150\nkernel_size = (3,3)\npool_size= (2,2)\nfirst_filters = 32\nsecond_filters = 64\nthird_filters = 128\n\ndropout_conv = 0.3\ndropout_dense = 0.3\n\nmodel = Sequential()\nmodel.add(Conv2D(first_filters, kernel_size, activation = 'relu', \n                 input_shape = (IMAGE_SIZE, IMAGE_SIZE, 3)))\nmodel.add(Conv2D(first_filters, kernel_size, activation = 'relu'))\n#model.add(Conv2D(first_filters, kernel_size, activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = pool_size)) \nmodel.add(Dropout(dropout_conv))\n\nmodel.add(Conv2D(second_filters, kernel_size, activation ='relu'))\nmodel.add(Conv2D(second_filters, kernel_size, activation ='relu'))\n#model.add(Conv2D(second_filters, kernel_size, activation ='relu'))\nmodel.add(MaxPooling2D(pool_size = pool_size))\nmodel.add(Dropout(dropout_conv))\n\nmodel.add(Conv2D(third_filters, kernel_size, activation ='relu'))\nmodel.add(Conv2D(third_filters, kernel_size, activation ='relu'))\n#model.add(Conv2D(third_filters, kernel_size, activation ='relu'))\nmodel.add(MaxPooling2D(pool_size = pool_size))\nmodel.add(Dropout(dropout_conv))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(dropout_dense))\nmodel.add(Dense(11, activation = \"softmax\"))\n\nmodel.summary()\nmodel.compile(Adam(lr=0.0001), loss='binary_crossentropy', metrics=['accuracy'])\nhistory = model.fit(X, y,batch_size=32,epochs = 10,validation_split=0.1)\n","fb4a5874":"print(history.history.keys())\n# summarize history for accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n","126e31fa":"ynew = model.predict_proba(xt)\nlabels = test.columns[1:12]\ntest[labels]=ynew\ntest=test.drop('images',axis=1)\ntest.to_csv(\"submission.csv\",index=False)","3c37d044":"credits: dionysis kokkoris","ea35a608":"https:\/\/stackoverflow.com\/questions\/9244397\/memory-overflow-when-using-numpy-load-in-a-loop\/65893798#65893798"}}