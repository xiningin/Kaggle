{"cell_type":{"9009a044":"code","d378fe0b":"code","67c7e29b":"code","4837826d":"code","9f2efd66":"code","fe6545d5":"code","4f2fdff4":"code","cdd3997d":"code","71a1760e":"code","e68acbaa":"code","4a8c2294":"code","0007c2c2":"code","c3cc88e1":"code","2b8e8d2d":"code","5eee9ba7":"code","faf172af":"code","f19d6a44":"code","b498ae8e":"code","41fcb9c1":"code","df32d3b4":"code","3f88beb4":"code","e2302eba":"code","6b05e2a7":"code","3917c902":"code","0faa7bb3":"code","65ff51fe":"code","d1c25126":"code","e6a3de4d":"code","9ebbf440":"code","25b0110d":"code","4ee57c4a":"code","d25cbf6c":"code","0f986d0e":"code","83644ed4":"code","13affe40":"code","f1e7cf8d":"code","47e41e29":"markdown","95d408f1":"markdown","1a0e0ec4":"markdown","b7c43f8f":"markdown","b88da5c6":"markdown","db66f9e5":"markdown","58fe3101":"markdown","cf995c5d":"markdown","646742eb":"markdown","8626a164":"markdown","71d03af9":"markdown","2541cdf7":"markdown","05282050":"markdown","7a1fecb6":"markdown"},"source":{"9009a044":"## Import packages\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score,f1_score,classification_report","d378fe0b":"#Importing Dataset\ndata = pd.read_csv('..\/input\/diabetes-data-set\/diabetes.csv')\n","67c7e29b":"data.head()","4837826d":"data.tail()","9f2efd66":"data.describe()","fe6545d5":"data.isnull().sum()","4f2fdff4":"data.info()","cdd3997d":"data.shape","71a1760e":"duplicate = data.duplicated()\nprint(duplicate.sum())\ndata[duplicate]","e68acbaa":"data.Outcome.hist()","4a8c2294":"import plotly.graph_objects as go\n\nlabels = ['Non-Diabetes','Diabetes']\nfig = go.Figure(data=[go.Pie(labels=labels, values=data.Outcome.value_counts())])\nfig.show()","0007c2c2":"import plotly.graph_objects as go\n\nlabels = ['Non-Diabetes','Diabetes']\nfig = go.Figure([go.Bar(x=labels, y=data.Outcome.value_counts())])\nfig.show()","c3cc88e1":"data.Pregnancies.value_counts()","2b8e8d2d":"import plotly.graph_objects as go\n\nfig = go.Figure([go.Bar(x=data.Pregnancies.value_counts().index, y=data.Pregnancies.value_counts())])\nfig.update_layout(title_text='Pregnancies')\nfig.show()","5eee9ba7":"fig = go.Figure([go.Bar(x=data.Glucose .value_counts().index, y=data.Glucose .value_counts())])\nfig.update_layout(title_text='Overall Glucose  level')\nfig.show()","faf172af":"\nfig = go.Figure([go.Bar(x=data.BloodPressure.value_counts().index, y=data.BloodPressure.value_counts())])\nfig.update_layout(title_text='Overall BloodPressure  level')\nfig.show()","f19d6a44":"\nfig = go.Figure([go.Bar(x=data.Age.value_counts().index, y=data.Age.value_counts())])\nfig.update_layout(title_text='Age')\nfig.show()","b498ae8e":"\nfig = go.Figure([go.Bar(x=data.BMI.value_counts().index, y=data.BMI.value_counts(),marker_color='crimson')])\nfig.update_layout(title_text='BMI')\nfig.show()","41fcb9c1":"corr = data[data.columns].corr()\nsns.heatmap(corr, cmap=\"YlGnBu\", annot = True)\nplt.title('Heatmap for Correlation of Parameters')\nsns.set(rc={'figure.figsize':(30,30)})\nplt.show()","df32d3b4":"data.hist(figsize=(17,12))\nplt.show()","3f88beb4":"X=data.drop(['Outcome'],axis=1)\ny=data.Outcome","e2302eba":"X","6b05e2a7":"y","3917c902":"X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=42,test_size=0.2)","0faa7bb3":"X_train.shape","65ff51fe":"y_train.shape","d1c25126":"X_test.shape","e6a3de4d":"y_test.shape","9ebbf440":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n## Decision Tree bagger\nbagger1 = BaggingClassifier(n_estimators = 50, random_state = 0)\nbagger1.fit(X_train, y_train)\n\n## Naive Bayes bagger\nbagger2 = BaggingClassifier(base_estimator = GaussianNB(), random_state = 0)\nbagger2.fit(X_train, y_train)\n\n## Evaluate\nprint(np.mean(bagger1.predict(X_test) == y_test))\nprint(np.mean(bagger2.predict(X_test) == y_test))","25b0110d":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators = 100, random_state = 0)\nrf.fit(X_train, y_train)\nrf_prediction=rf.predict(X_test)\nprint('Accuracy',np.mean(rf.predict(X_test) == y_test)*100)","4ee57c4a":"c=confusion_matrix(y_test,rf_prediction)\na=accuracy_score(y_test,rf_prediction)\np=precision_score(y_test,rf_prediction)\nr=recall_score(y_test,rf_prediction)","d25cbf6c":"print('Confusion Matrix:\\n',c)","0f986d0e":"print('Accuracy:',a*100)\n","83644ed4":"print('Recall:',r*100)","13affe40":"print('Precision:',p*100)\n","f1e7cf8d":"fig, ax = plt.subplots(figsize=(7.5, 7.5))\nax.matshow(c, cmap=plt.cm.Blues, alpha=0.3)\nfor i in range(c.shape[0]):\n    for j in range(c.shape[1]):\n        ax.text(x=j, y=i,s=c[i, j], va='center', ha='center', size='xx-large')\nplt.xlabel('Predictions', fontsize=18)\nplt.ylabel('Actuals', fontsize=18)\nplt.title('Confusion Matrix', fontsize=18)\nplt.show()","47e41e29":"# Loading Dataset","95d408f1":"# Importing Library\n","1a0e0ec4":"# Bagging and RandomForest Diabetes classification\n","b7c43f8f":"# Spliting data into training and testing","b88da5c6":"# Visulization Dataset","db66f9e5":"# Applications of Bagging","58fe3101":"#Bagging is a  also known as bootstrap aggregation. it is a machine learning ensemble meta-algorithm designed to improve the stability and accuracy of machine learning algorithms used in statistical classification and regression. It also reduces variance and helps to avoid overfitting.","cf995c5d":"##Ease of implementation: Python libraries such as scikit-learn (also known as sklearn) make it easy to combine the predictions of base learners or estimators to improve model performance. ","646742eb":"##Reduction of variance: Bagging can reduce the variance within a learning algorithm. This is particularly helpful with high-dimensional data, where missing values can lead to higher variance, making it more prone to overfitting and preventing accurate generalization to new datasets.","8626a164":"# Model Building","71d03af9":"# Benefits of bagging","2541cdf7":"# Loading Libraries","05282050":"## HEALTH CARE\n## IT\n## FINANCE\n","7a1fecb6":"# Checking for Null Values or Missing Values\n"}}