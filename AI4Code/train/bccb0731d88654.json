{"cell_type":{"fe3e3481":"code","ed608381":"code","1ffad147":"code","eb3f9eb8":"code","6dbaafab":"code","4021bd83":"code","a3017212":"code","40c16290":"code","7b42229e":"code","03a7c853":"code","b8895924":"code","406da0a2":"code","05bbceab":"code","882f55c8":"code","691b53f4":"code","c3fbcc84":"code","b10eb556":"code","f9eed712":"code","49bf3d5c":"code","41fd47b2":"code","907fc9e1":"code","6d3920a9":"markdown","400ad489":"markdown","da83378a":"markdown","c5915160":"markdown","1dc36b36":"markdown","1350fd33":"markdown"},"source":{"fe3e3481":"import numpy as np\nimport pandas as pd\nfrom sklearn import linear_model\nfrom pandas import DataFrame\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","ed608381":"df = pd.read_excel('..\/input\/companydetails\/companysalary.xlsx')\ndf","1ffad147":"X = df[['Experience', 'Salary']]\ny = df['Year_joining']\n\nregr = linear_model.LinearRegression()\nregr.fit(X, y)","eb3f9eb8":"print(regr.coef_) ","6dbaafab":"Y_predict = regr.predict(X)\nY_predict","4021bd83":"plt.scatter(df['Experience'], df['Salary'], color='red')\nplt.title('Salary Vs Experience', fontsize=14)\nplt.xlabel('Experience', fontsize=14)\nplt.ylabel('Salary', fontsize=14)\nplt.grid(True)\nplt.show()","a3017212":"df.head()","40c16290":"X = df[['Experience','Salary']]\ny = df['Year_joining']\n\nX1 = sm.add_constant(X)\nest = sm.OLS(y, X1).fit()\n\nest.summary()","7b42229e":"df_sub = df[['Experience','Salary']]\ndf_sub.corr()","03a7c853":"corrmat = df_sub.corr()\nf, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(corrmat, vmax=1, square=True);\nplt.show()","b8895924":"fig_size = plt.rcParams[\"figure.figsize\"] \nfig_size[0]=16.0\nfig_size[1]=8.0\ndf_sub.hist(bins=100)\nplt.show()","406da0a2":"my_data = pd.read_excel('..\/input\/companydetails\/companysalary.xlsx')","05bbceab":"print(df.columns)","882f55c8":"print(df.head(5))","691b53f4":"pd.isna(df).any()","c3fbcc84":"x = df[['Experience','Salary']].values\ny = df['Year_joining'].values.reshape(-1,1)\nm = len(y)\nprint(m)","b10eb556":"#we need to normalize the features using mean normalization\nmy_data = (my_data - my_data.mean())\/my_data.std()\nmy_data.head()","f9eed712":"#setting the matrixes\nX = my_data.iloc[:,0:2]\nones = np.ones([X.shape[0],1])\nX = np.concatenate((ones,X),axis=1)\n\ny = my_data.iloc[:,2:3].values #.values converts it from pandas.core.frame.DataFrame to numpy.ndarray\ntheta = np.zeros([1,3])\n\n#set hyper parameters\nalpha = 0.01\niters = 1000","49bf3d5c":"#computecost\ndef computeCost(X,y,theta):\n    tobesummed = np.power(((X @ theta.T)-y),2)\n    return np.sum(tobesummed)\/(2 * len(X))","41fd47b2":"#gradient descent\ndef gradientDescent(X,y,theta,iters,alpha):\n    cost = np.zeros(iters)\n    for i in range(iters):\n        theta = theta - (alpha\/len(X)) * np.sum(X * (X @ theta.T - y), axis=0)\n        cost[i] = computeCost(X, y, theta)\n    \n    return theta,cost\n\n#running the gd and cost function\ng,cost = gradientDescent(X,y,theta,iters,alpha)\nprint(g)\n\nfinalCost = computeCost(X,y,g)\nprint(finalCost)","907fc9e1":"#plot the cost\nfig, ax = plt.subplots()  \nax.plot(np.arange(iters), cost, 'b')  \nax.set_xlabel('Experience')  \nax.set_ylabel('Year_joining')  \nax.set_title('Experience vs. Year_joining') ","6d3920a9":"# **using OLS**","400ad489":"#  **Matrix operation and Gradient Descent Algorithm**","da83378a":"assumption in the beginning of the data not being normally distributed still holds","c5915160":"use Ordinary Least Squares (OLS) from statsmodels library","1dc36b36":"create a correlation matrix of the variables, to see we've actually eliminated the variables with the highest correlations","1350fd33":"correlation matrix as a heatmap"}}