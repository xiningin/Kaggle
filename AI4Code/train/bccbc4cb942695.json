{"cell_type":{"d8617eb1":"code","8f056aa9":"code","ff4bfb4d":"code","b1b40aac":"code","f0ae11ca":"code","c15d1c00":"code","ca2baa89":"code","84393952":"code","f73d8a0b":"code","3f195073":"code","c6fac6ef":"code","0ba7e4b3":"code","822e3230":"code","9fc6df21":"code","bf479f22":"code","9cd716c6":"code","9ed4d68f":"code","14cb919b":"code","b342a0f3":"code","6d20982b":"code","42f5b76b":"code","79eeca9a":"code","6e3bee91":"markdown","cbaf0a2d":"markdown","134dd6c1":"markdown","6aa10668":"markdown","39d3e1e1":"markdown","13c01960":"markdown","507306a1":"markdown"},"source":{"d8617eb1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8f056aa9":"# visualization\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly\nimport json\n\n# racing chart\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\nfrom random import randint\nimport colorsys\nimport matplotlib.colors as mc\nimport re\n\n# Disable the warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n%matplotlib inline","ff4bfb4d":"# Import data\nworld_data = pd.read_csv('..\/input\/covid19-week4\/train.csv')\nby_counties = pd.read_csv('..\/input\/nytimes\/us-counties.csv', index_col = 0)\nby_states = pd.read_csv('..\/input\/nytimes\/us-states.csv')","b1b40aac":"world_data.head(3)","f0ae11ca":"# Rename the column 'Date'\nworld_data = world_data.rename(columns={'Date': 'Date_worldwide'})","c15d1c00":"# The graph will only show countries with confirmed cases\n# Each animated graph will be grouped by the date and the country\ndf_countrydate = world_data[world_data['ConfirmedCases']>0]\ndf_countrydate = df_countrydate.groupby(['Date_worldwide','Country_Region']).sum().reset_index()","ca2baa89":"# Create the Choropleth\n\nfig = px.choropleth(df_countrydate, \n                    locations = 'Country_Region', # Spatial coordinates\n                    locationmode = 'country names',\n                    color = 'ConfirmedCases', \n                    color_continuous_scale = 'tempo',\n                    hover_name = 'Country_Region',\n                    animation_frame = 'Date_worldwide',\n                   )\n\nfig.update_layout(\n    title_text = 'Reported Confirmed Cases Worldwide between 1\/22\/2010 and 04\/10\/2020',\n    title_x = 0.5,\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nfig.show()","84393952":"# Create the Choropleth\nfig = px.choropleth(df_countrydate, \n                    locations = 'Country_Region', \n                    locationmode = 'country names', # Spatial coordinates\n                    color = 'Fatalities', \n                    color_continuous_scale = 'reds',\n                    hover_name = 'Country_Region', \n                    animation_frame = 'Date_worldwide',\n                   )\n\nfig.update_layout(\n    title_text = 'Reported Fatalities Worldwide between 1\/22\/2010 and 04\/10\/2020',\n    title_x = 0.5,\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nfig.show()\n","f73d8a0b":"# change date format from string to datetime\nby_states['date'] =  pd.to_datetime(by_states['date'], format='%Y-%m-%d')","3f195073":"# The racing bar chart is built by a series of charts grouped by 'state' along the date\nby_states = by_states.groupby(['date', 'state']).sum().reset_index()\nby_states['date'] = by_states['date'].astype('str') # The racing chart will go with string\n\n# define a new dataframe for the racing chart\ndf = by_states[['date', 'state', 'cases', 'deaths']]\ndf.columns = ['date', 'state', 'value_confirmed', 'value_deaths']\nfnames_list = df['date'].unique().tolist()\n","c6fac6ef":"def random_color_generator(number_of_colors):\n    random.seed(30)\n    color = [\"#\"+''.join([random.choice('987654321ABCDEF') for j in range(6)])\n                 for i in range(number_of_colors)]\n    return color\n\nstate_list = df['state'].unique().tolist()\n\nnum_of_elements = 10","0ba7e4b3":"def transform_color(color, amount = 0.5):\n\n    try:\n        c = mc.cnames[color]\n    except:\n        c = color\n        c = colorsys.rgb_to_hls(*mc.to_rgb(c))\n    return colorsys.hls_to_rgb(c[0], 1 - amount * (1 - c[1]), c[2])\n\nrandom_hex_colors = []\nfor i in range(len(state_list)):\n    random_hex_colors.append('#' + '%06X' % randint(0, 0xFFFFFF))\n\nrgb_colors = [transform_color(i, 1) for i in random_hex_colors]\nrgb_colors_opacity = [rgb_colors[x] + (0.825,) for x in range(len(rgb_colors))]\nrgb_colors_dark = [transform_color(i, 1.12) for i in random_hex_colors]\n\nnormal_colors = dict(zip(state_list, rgb_colors_opacity))\ndark_colors = dict(zip(state_list, rgb_colors_dark))","822e3230":"# Let's check the different available style sheets on Matplotlib\nprint(plt.style.available)","9fc6df21":"plt.style.use('grayscale')\nfig, ax = plt.subplots(figsize = (36, 20))\n\ndef draw_barchart(current_date):\n    dff = df[df['date'].eq(current_date)].sort_values(by='value_confirmed', ascending=True).tail(num_of_elements)\n    ax.clear()\n    \n    ax.barh(dff['state'], dff['value_confirmed'], color=[normal_colors[p] for p in dff['state']],\n                edgecolor =([dark_colors[x] for x in dff['state']]), linewidth = '6')\n    dx = dff['value_confirmed'].max() \/ 200\n\n\n    for i, (value, name) in enumerate(zip(dff['value_confirmed'], dff['state'])):\n        ax.text(value + dx, \n                i + (num_of_elements \/ 50), '    ' + name,\n                size = 32,\n                ha = 'left',\n                va = 'center',\n                fontdict = {'fontname': 'Trebuchet MS'})\n\n        ax.text(value + dx,\n                i - (num_of_elements \/ 50), \n                f'    {value:,.0f}', \n                size = 32, \n                ha = 'left', \n                va = 'center')   \n    \n    \n    time_unit_displayed = re.sub(r'\\^(.*)', r'', str(current_date))\n    ax.text(1, \n            0.5, \n            time_unit_displayed,\n            transform = ax.transAxes, \n            color = '#777777',\n            size = 55,\n            ha = 'right', \n            weight = 'bold', \n            fontdict = {'fontname': 'Trebuchet MS'})\n\n    ax.text(-0.005, \n            1.05, \n            'cases', \n            transform = ax.transAxes, \n            size = 40, \n            color = '#666666')\n\n    ax.text(0.07, \n            1.1, \n            'Confirmed Cases in the United States from 2020-01-21 to 2020-04-13', \n            transform = ax.transAxes,\n            size = 50, \n            weight = 'bold', \n            color = 'royalblue',\n            ha = 'left')\n\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis = 'x', colors = '#666666', labelsize = 28)\n    ax.set_yticks([])\n    ax.set_axisbelow(True)\n    ax.margins(0, 0.01)\n    ax.grid(which = 'major', axis = 'x', linestyle = '-')\n    \n\n    plt.locator_params(axis = 'x', nbins = 4)\n    plt.box(False)\n    plt.subplots_adjust(left = 0.075, right = 0.75, top = 0.825, bottom = 0.05, wspace = 0.2, hspace = 0.2)\n    plt.box(False)    \n\ndraw_barchart('2020-04-13')","bf479f22":"fig, ax = plt.subplots(figsize = (36, 20))\nanimator = animation.FuncAnimation(fig, draw_barchart, frames=fnames_list)\nracing_chart = HTML(animator.to_jshtml())\n","9cd716c6":"racing_chart","9ed4d68f":"plt.style.use('dark_background')\nfig, ax = plt.subplots(figsize = (36, 20))\n\ndef draw_barchart(current_date):\n    dff = df[df['date'].eq(current_date)].sort_values(by='value_deaths', ascending=True).tail(num_of_elements)\n    ax.clear()\n    \n    ax.barh(dff['state'], dff['value_deaths'], color=[normal_colors[p] for p in dff['state']],\n                edgecolor =([dark_colors[x] for x in dff['state']]), linewidth = '6')\n    dx = dff['value_deaths'].max() \/ 200\n\n\n    for i, (value, name) in enumerate(zip(dff['value_deaths'], dff['state'])):\n        ax.text(value + dx, \n                i + (num_of_elements \/ 50), '    ' + name,\n                size = 32,\n                ha = 'left',\n                va = 'center',\n                fontdict = {'fontname': 'Trebuchet MS'})\n\n        ax.text(value + dx,\n                i - (num_of_elements \/ 50), \n                f'    {value:,.0f}', \n                size = 32, \n                ha = 'left', \n                va = 'center')   \n    \n    \n    time_unit_displayed = re.sub(r'\\^(.*)', r'', str(current_date))\n    ax.text(1, \n            0.5, \n            time_unit_displayed,\n            transform = ax.transAxes, \n            color = '#777777',\n            size = 55,\n            ha = 'right', \n            weight = 'bold', \n            fontdict = {'fontname': 'Trebuchet MS'})\n\n    ax.text(-0.005, \n            1.05, \n            'cases', \n            transform = ax.transAxes, \n            size = 40, \n            color = '#666666')\n\n    ax.text(0.2, \n            1.1, \n            'Fatalities in US from 2020-01-21 to 2020-04-13', \n            transform = ax.transAxes,\n            size = 50, \n            weight = 'bold',\n            color = 'firebrick',\n            ha = 'left')\n\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis = 'x', colors = '#666666', labelsize = 28)\n    ax.set_yticks([])\n    ax.set_axisbelow(True)\n    ax.margins(0, 0.01)\n    ax.grid(which = 'major', axis = 'x', linestyle = '-')\n    \n\n    plt.locator_params(axis = 'x', nbins = 4)\n    plt.box(False)\n    plt.subplots_adjust(left = 0.075, right = 0.75, top = 0.825, bottom = 0.05, wspace = 0.2, hspace = 0.2)\n    plt.box(False)    \ndraw_barchart('2020-04-13')","14cb919b":"fig, ax = plt.subplots(figsize = (36, 20))\nanimator = animation.FuncAnimation(fig, draw_barchart, frames=fnames_list)\nchart_race = HTML(animator.to_jshtml())","b342a0f3":"chart_race","6d20982b":"def pie(ax, values, **kwargs):\n    total = sum(values)\n    def formatter(pct):\n        return '{:0.0f}%'.format(pct*total\/100)\n        #return '${:0.0f}M\\n({:0.1f}%)'.format(pct*total\/100, pct)\n    wedges, _, labels = ax.pie(values, autopct=formatter, **kwargs)\n    return wedges\n\nplt.style.use('classic')\nfig, ax = plt.subplots(figsize=(10,10))\nfig.suptitle('Fatalities by Race\/ Ethnicity from Covid-19 in New York City', color='black', fontsize=22)\n\nax.axis('equal')\n\nwidth = 0.35\nkwargs = dict(colors=['#9999ff', '#ffff99', '#99ff99', '#ff9999', '#99ccff'], startangle=90)\n\noutside = pie(ax, [29, 22, 32, 14, 3], radius=1, pctdistance=1-width\/2, **kwargs)\ninside = pie(ax, [34, 28, 27, 7, 4], radius=1-width,\n             pctdistance=1 - (width\/2) \/ (1-width), **kwargs)\nplt.setp(inside + outside, width=width, edgecolor='white')\n\nax.legend(inside[:], ['Hispanic', 'Black', 'White', 'Asian','Other' ], prop={'size': 13}, frameon=False)\n\nkwargs = dict(size=15, va='center', fontweight='bold')\nax.text(0, 0, '% of Fatalities', ha='center', color='red',\n        bbox=dict(boxstyle='round', facecolor='silver', edgecolor='none'),\n        **kwargs)\nax.annotate('% of NYC Population', (0, 0), color='blue', xytext=(np.radians(-45), 1.1) ,\n            bbox=dict(boxstyle='round', facecolor='silver', edgecolor='none'),\n            textcoords='polar', ha='left', **kwargs)\n\nplt.show()","42f5b76b":"# the bar chart will use the time as index and the x-axis\nby_counties.index = pd.to_datetime(by_counties.index)\n\n# take of the unnecessary columns\nby_counties = by_counties.drop(columns=['fips', 'state'])\nby_counties = by_counties.loc[by_counties['county'] == 'New York City']","79eeca9a":"plt.rcParams['figure.figsize']=(20,10) # set the figure size # set the figure size\nplt.style.use('fivethirtyeight') # using the fivethirtyeight matplotlib theme\n\n# Divide the timeframe into three segments for different colors\nfirst = by_counties[(by_counties.index >= '2020-03-01') & (by_counties.index < '2020-03-15')]\nsecond = by_counties[(by_counties.index >= '2020-03-15') & (by_counties.index < '2020-03-31')]\nthird = by_counties[(by_counties.index >= '2020-04-01') & (by_counties.index < '2020-04-13')]\n\n# Build our plot\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()  # set up the 2nd axis\nax1.plot(by_counties.deaths) #plot the Revenue on axis #1\n\n# the next few lines plot the fiscal year data as bar plots and changes the color for each.\nax2.bar(first.index, first.cases,width=0.5, alpha=0.5, color='green')\nax2.bar(second.index, second.cases,width=0.5, alpha=0.5, color='blue')\nax2.bar(third.index, third.cases,width=0.5, alpha=0.5, color='orange')\n\nax2.grid(b=False) # turn off grid #2\n\nax1.set_title('Confirmed Cases and Fatalites in NYC from 2020-03-01 to 2020-04-13)', color='black')\nax1.set_ylabel('Fatalies')\nax2.set_ylabel('Confirmed Cases')\n\n# Set the x-axis labels to be more meaningful than just some random dates.\nlabels = ['2020-03-01','2020-03-15','2020-04-01'] \nax1.set_xticks(labels)\nax1.axes.set_xticklabels(labels)","6e3bee91":"<a id = '4'><\/a>\n## New York City - a demographical analysis of my hometown\n\nI heard the siren of ambulance at least twice per hour since few weeks  ago. At the apex day, I counted 6 sirens within an hour. We are running out of medical supplies and the hospitals were flooded with patients. Our healthcare system was collapsing. New York City in the epicenter of the epicenter.\n\n'What makes Asian community the low fatalities in New York City?'You may be asking. As an Asian, I have few assumptions. Asians have aknowledged the pandemic will hit to the States at its first outbreak in China. We started wearing masks way before CDC advised the public to do so. The next thought may not be pleasant: many Asian businesses close weeks before the non-Asian businesses did. Many New Yorkers stopped going to Asian stores during the pandemic. There are even reported violents against the Asian community across the U.S. Also, the majority of the second-generation Asian American work at tech or corporate jobs, which allow them to work fromhome. As many Asian do not commute to work due to job loss or remote work, the infections rate among Asian communties slow down. Unfortunately, it also means the low-paid 'essential workers' are potentially vulnerble COVID-19. I will make another analysis on wealth distribution and COVID-19 in New York City later.\n\nI hope this data will demostrate the non-Asian community the importance of wearing masks after the pandemic. The COVID-19 is a wake-up call to us that no country can spare from the globalization. Pandemic treat everyone equally. We all are responsible to the more acurate and updated data..\n\nSuggested reading:\n<br>https:\/\/www.nytimes.com\/aponline\/2020\/04\/08\/us\/ap-us-virus-outbreak-race.html\n<br>https:\/\/thehill.com\/changing-america\/respect\/equality\/490373-attacks-on-asian-americans-at-about-100-per-day-due-to","cbaf0a2d":"<a id = '2'><\/a>\n## Worldwide Spread\n\nThe first COVID-19 wave started in China. The second COVID-19 hit Europe. The third COVID-19 now comes to the U.S. The fourth? Could be Africa due to the high population density.\n\nTaiwan shows the successful example of combating the COVID-19. Taiwan also reports very low cases whilst it is one of the closest country of China. The reason? The Chinese Government stopped issuing visas for mainlanders to travel to Taiwan as a 'punishment' of the result of the Taiwan's presidential election.\n\nThe map does not show the dynamic of Hong Kong well because Hong Kong is a tiny city in China. It is surpsing that Hong Kong has very low confirmed cases comparing to mainland China. The reason? The Hong Kong anti-extradition protests. To pressure the protestors, the Chinese Government 'penalized' the Hong Kong's economy by banning all tourist groups to Hong Kong since the beginning of the protest. Many mainland Chinese avoid travelling to Hong Kong. \n\nMoreover, both Hong Kong and Taiwan has learned a painful and valuable lesson from SARS in 2003. Hong Kong has lost 299 during SARS. Therefore, both Hong Kongers and Taiwanese always keep some gloves and mask supplies at home for precaution. \n\nWhat else we find from the above worldwide map? Let's breakdown the Choropleth Graphs with the Coronavirus timeline from NBC news.\n\nJan. 23\nCOVID-19 have spread from China, with the epicenter of Wuhan.\n\nFeb. 9\nThe death toll in mainland China reached 811, surpassing the number of fatalities from the SARS outbreak in 2003.\n\nFeb. 4\nEgypt became the first country in Africa with the confirmed case.\n\nFeb. 14\nFrance reported the first fatality outside Asia coronavirus death was recorded outside Asia. \n\nFeb. 19\nIran reported the first fatalities of two patients.\n\nFeb. 24\nItaly became the epicenter in Europe.\n\nFeb. 26\nBrazil is the first in Latin America to confirm its first coronavirus case.\n\nMarch 16\nCanada's number of confirmed cases hit 339 with one death. \n\nMarch 20\nDeath tolls in Spain surpassed 1,000, as the total number of confirmed cases in the country inched near 20,000.\n\nMarch 26\nU.S. coronavirus cases surpassed China. The U.S. reported at least 82,474, with more than 1,100 deaths.\nChina reported 81,961 cases and more than 3,000 deaths.\n\nMarch 27\nItaly\u2019s deadliest day with 919 deaths with the accumulative of 9,134.\n\nApril 1\nSpain\u2019s deadliest day with 864 deaths.\n\nApril 11\nCoronavirus deaths in the United States passed the 20,000 mark.\n\n\nreference read:\nhttps:\/\/www.nbcnews.com\/health\/health-news\/coronavirus-timeline-tracking-critical-moments-covid-19-n1154341","134dd6c1":"<a id=\"1\"><\/a>\n## Sources of Data\n\n\nThe data is from Kaggle, New York Times, New York State of Health. Kaggle update the data on weekly basis. New York Times and New York State of Health have daily updates on the COVID-19. This EDA use the dataset as of 04\/13\/2020. You may find the data from the following links:\n\nhttps:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-4New\n\nhttps:\/\/github.com\/nytimes\/covid-19-data\n\nhttps:\/\/covid19tracker.health.ny.gov\/views\/NYS-COVID19-Tracker\/NYSDOHCOVID-19Tracker-Map?%3Aembed=yes&%3Atoolbar=no&%3Atabs=n","6aa10668":"# **Covid-19 EDA in the United States and New York** ","39d3e1e1":"<a id = '3'><\/a>\n\n## How was the COVID-19 explosion in the USA?\n\nThe bar chart race is inspired by YouHan Lee. I was thinking to do it on Tableau but found Lee has built this amazing kernel. I just added few minor personal touchups. \n\nBig shoutout:\n<br>https:\/\/www.kaggle.com\/youhanlee\/comfirmed-bar-chart-race-depending-on-country\n\nOne of my favourite settings of Matplotlib is the style sheets. It is an easy trick to personalize your graphs without any significants change of codes. :)\n\nplt.style.use()\n\nLet's take a look how the COVID-19 spreading across the State. This pandemic is sweeping America with horrifiying speed. Why the disease sweep across America so quickly? One of the major reasons is because Americans do not wear masks; rather, many of them detest other people wear masks in public. Also, America is a very big country with different life-styles. There are still many people in the U.S. do not believe in the pandemic and still doing social events. It makes America into such severe situation and New York City is the epicenter out of the epicenter.\n\nWhat else we find from the bar chart race? Here are the highlights from timeline from NBC news again.\n\nFeb. 26 California announced the first case in the U.S.\n\nFeb. 29 Washington State recorded the first coronavirus fatality in the U.S.\n\nMarch 16 San Francisco is the first city in the U.S. to imposed strict prohibitions on residents leaving their homes.\n\nMarch 21 New York State hit 10,000 confirmed cases.\n\nMarch 26 U.S. coronavirus cases surpassed China. The U.S. reported at least 82,474, with more than 1,100 deaths. China reported 81,961 cases and more than 3,000 deaths.\n\nApril 9 New York State\u2019s deadliest day with 799 deaths overnight with the total fatalities of 7,067.\n\nApril 11 The deaths in the U.S. passed the 20,000 mark, with over a half million confirmed cases nationwide. More than half of the deaths were concentrated in three states: New York, with 8,627; New Jersey with 2,183; and Michigan, with 1,392.\n\nReference read:\n<br>https:\/\/www.nbcnews.com\/health\/health-news\/coronavirus-timeline-tracking-critical-moments-covid-19-n1154341","13c01960":"Importing the Essential Libraries","507306a1":"From Wuhan to cruise ships to at least 110 counties within three months, coronavirus (COVID-19) is rapidly sweeping the world, causing million infections and deathtolls. Kaggle has launched several [COVID-19 challenges](http:\/\/https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-1) to call for better understanding of the disease. This EDA is to visualize the geospatially and demographical analysis of the pandemic across the States. The second part of this project focus on New York. I live in NYC and we have the highest fatalities outside China. Hope this project will help us to determine which factors impact the transmission behavior of COVID-19 in order to prevent the next pandemic.\n\nIn this kernel, we will walk through various uses of Matplotlib in this EDA for different types of data analysis. All the interaction effects and the visualization of this EDA is done by Plotly, it may take you awhile to load the kernel.\n\n## CONTENTS\n\n* [Sources of Data](#1)\n* [Worldwide spread](#2)\n* [How was the COVID-19 explosion in the USA?](#3)\n* [New York City - demographical analysis of my hometown](#4)\n"}}