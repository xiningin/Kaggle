{"cell_type":{"8cf33407":"code","ba376020":"code","b0296ab6":"code","4092d263":"code","d535c6d4":"code","2b178e01":"code","d662f986":"code","eba4d02a":"code","540357a2":"code","1375e84d":"code","a429b475":"code","baa99d3b":"code","f8c6205b":"code","ea1450ef":"code","b75ac578":"code","14797cac":"code","11aa029c":"code","e751fdd5":"code","2ca91c33":"code","46285778":"code","797f2775":"code","2531b1cf":"code","33a68bc4":"code","ba18bef1":"code","560b0fc2":"code","078035d8":"code","585178c6":"code","09e250c7":"code","052419f5":"code","14ad140b":"code","456123e0":"code","a0b13b3b":"code","1e846519":"code","4612f768":"markdown","a4833c4d":"markdown","00a02468":"markdown","ed467ab4":"markdown","9a1c01cf":"markdown","fb086590":"markdown","3d035e81":"markdown","6a634403":"markdown","726fa92f":"markdown","97125c11":"markdown","b5b3f4ce":"markdown","3d684b52":"markdown","27647309":"markdown","f6c03a21":"markdown","2e6f45f0":"markdown","632283e1":"markdown","67b08ab2":"markdown","d82f4694":"markdown","2e7ecf8f":"markdown","cd267ea3":"markdown","dbcd52b6":"markdown","48efb357":"markdown"},"source":{"8cf33407":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTEhIWFhUWFRcXFxcYFxcVFxcXFRcYGRcYFRcdHSggGBolGxUVITEhJSkrLi4uFx8zODMsNygtLisBCgoKDg0OGxAQGy0mICUtLS0tLS0tLS0tLS0tLS0tLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIALgBEgMBEQACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAEAQIDBQYABwj\/xABGEAACAQIEAwUEBgcHBAEFAAABAhEAAwQSITEFBkETIlFhcTKBkaEHQlKxwdEUI2KCkuHwFjNDcqLC0lNj4vGTFTREVIP\/xAAbAQABBQEBAAAAAAAAAAAAAAAAAQIDBAUGB\/\/EAEERAAEDAgQCCQEHAQYFBQAAAAEAAgMEEQUSITFBUQYTImFxgZGh0bEUFTJCweHwUhYjQ1OCojNyssLxByRikuL\/2gAMAwEAAhEDEQA\/APSMfyjhrhLZShO+UwPhtV+PEZmC17+KzJsKppDe1vBT8L5dsWDmRJb7Tan3eFMmrZZhZx0U1PQQQG7RrzKtqqK4ocThkuLldQwPQiaY5jXizhdSRSvjdmYbFVH9lcJM9n7pMfCaqfd9Pe+VaH3xV2tm9lcWLCoAqKFA6DSrbWhosAs6SR0hzONyn05MTLir1iq09FBUf8RgKe17m7FMthPqx7qZBhtPTm7GAFBlc7ipauJiQ0IQd61YnvBJ84ppeBuVaYZyOzeyJtBY7sR5U691Xdmv2k+hNUOJdAJciPOlDC7QBNcWgdpBYXG4YmLb258iKeaV7Bctt5KGOWAmzCL9yshUasLqEKuxfEsOhh3QHzIqF9REw2c4BXYqOpkF2NNkVhcTbcSjAjyqRr2v1aVBLDJGbPBCmpyiQ2Nx1u0JuMFHmaeyF0hs0XUckrIxdxsq\/D8zYV2yi6J89PvqY0ErBfKq7cQp3GwcrhGBEiqxFlbXM0amhBVHjOaMMjZS4J8gT91Vn1kLDYuVCTEqdhsXfqjuHcXtXh+rcHy\/lUscrJBdpurENTFMOwbo+akVhA8Q4rbs+0dfClAurEFLJMeyEBh+abLGCSPURS5CFafhczRe11d2roYSDpTVnOaQbFNxWKW2pZyAB409jC82Cje9rGlzjosrf58thoVGYeOg++tRuFPIuTZZD8ZjBs0Eq64LzFaxGimG6qdDVSoo5IfxbK7TV0VR+HfkrmaqK4vMeI81Yi4xIcovRV\/E7muXlxGZ50Nh3LuqfCaaJti255lO4bzZiLbDM3aL1Dbx5GnQ4jMw9o3CbU4PTyt7IynmF6LgMYt22txDIYT\/ACroopGyNDm7FcbPA6GQxv3CznN\/MTWT2Vr2yJLfZB2jzqjW1hi7DN\/osDFMRMH93H+LnyWJucRvEybrz\/mNY7qiUm+YrnDUzE3Lz6laXlfmh84tXjmDaKx3B6A+NaNFXOc7q5PIrYw7FH5xHKbg7FbXE3wiM7bKCT6CtpjS5waF0T3BjS47BeU8b5gu4hycxVOigwI8\/E11FNRxwt2uea5CqrpJ3b2HJAYbG3LZzI7KfI\/f41O+JjxZwuq0cr4zdhsvS+UuO\/pNshv7xNG8\/AiucrqXqH6bFdVh1Z9oZ2vxDf5UPOXGmsIEQw7zr4AbmsDEKowtyt3K6vB6BtQ8vfsF51duljLEk+JM1zrnFxuSuyawNFmiwVpwHj1yw47xKTqp108R4Vbpat8LhrpyVGuw6OpYdO1wK9OW+CmcbRPurqG9q1uK4ORpjJB4LyjmHjT4i4xJOQEhV6QOvrXVUlM2Fg014rjKyrdO8m+nAKpB8KtFU1v+ROOtcmzcMkCVJ3I8D6VhYlStZ\/eNXR4VWOk\/unm5G3grDnTirWbQVDDOYnwHU1zOIVBijs3crtMFo2zylz9mrzctJk6mucOq7UC2gRfC+JPYcOh9R0I8DUsE7oXZmqvU0sdQwseF6thMWHti4Nis\/KuqieJGhw4rz2oiMMjmHgvJ+YeJNfvMSdASFHQAGuvpYGxRgBcTVzumlJPkqyrCqrccgcYYsbDkkRKz8xWLidM0DrG+a3cJqST1TvJWXPnEGt2gimC5gny61yuIzGOOw4qxi87o4g1vFedTXPLl1PgsY1pw6GCPmPA1LDK6J2YKSKR0Tg9u4XrWDxmeyLg6rPyrqmOzNBXb07xK1rhxXnnE8UblxifE\/AGrLRYLtqaMRxgBCzT1OtbyZjyZtk7aj0qF4WDi0AFpBxQn0jYsjJbGxkn3f+61sJjGrlw2MyGzWc1hwa21z9kRgcW1t1dTqDP5imSMEjC0p8UhjeHt4L121jJUHxAPyrlHMsbLtGyXAK8lrg16kuoSr0L6PWP6O07doY+An5zXRYUT1JvzXH9IAPtAtyWV5uVhi7k9SCPSB\/Os2vuJ3XXl+KNIqnX\/AJoqaap3Wen2JzLG+YR6zpT475xbmPqnsBzC269S5gss2EuKPa7P8K7akcGzNJ5rtathdTuA3svI661cWuoQtf8ARuh7W4egUA+s6fjWRixGRoW3ggPWOPCyk+kSwe0tv9UqV98z\/XpXC4sw5mu4L1Ho9I0xuZxvdZCayF0SUUJF6vw\/Dn9GVDv2YHyrr6UFjG34WXnNeRJM8t2JK8kxdg23ZG3UkGu2Y8PaHDivPnsLHFp4KGacm2Wl5AslsTmGyqZPrt+NZ2JvAhtzK1MJYTPfkFoPpAwZa2twCch19D1riMUjLmBw4L0no\/O1sjozxWArBXXJyjwoSE23Xq\/BMOUwyI2+QA\/CurpWlkTQeAXnmIyCWoe4bXXlvHcE1m86sPrEjzBOldnTSiSMELgaqF0UpaUBNWFXWo5Awha+bn1VBE+Z6VmYnIBFl4lauExF02bgAtLzxw43bQZRJQzHiOtcfXwmSPTcLSxSnMsV27healq5+y5ayfZQswVRJJgCnMYXHKE5rC42G69c4VhslhLZ6KB8q6mJuVgC7Wlj6qNreSxHHcAbdw6d0mQfWrLXLsqKpEsYHEKsJqS6uXWq5MwZE3CInQelRSG+iwsWqGutGOCJ514Ub9sMmrJqB4+Iq7h9SIn2dsVyOJUpmju3cLzV5BgiCOh0rog4HZcwWkaFG8GwDX7gVQYnvHoBUVRO2JhJUtPTumeGjzXrVuwAAPAAVyxfcrsAywssDxPlfEWmMIXXoy66eY3FcnNh80Z0Fx3LvqbFqeZty6x5FM4fyziLrAdmUHVm0j3bmkioJpDtYd6WoxWmhbfNc8gvSOGYBbFtbabD5nqTXRwxNiYGN4LjKqodUSmR3FVfM3LwxIDKctxdj0I8DVeroxOLjQhYtfh4qRcaOCxN3ljFAx2RPmCI++sc0E4NrLn3YXVNNst\/RaDlrlJkcXb8SNVQawfEmtCjw8xuzyb8lqUGFGNwkl3GwWyIrVW8sRx7kosxfDkamSh01\/ZP4VtU2JgNyyeqwavCC5xdD6fCqcNyXiWMMFUdSTPwAqy\/E4QNLlU2YRUE2Ngt3wXhSYa3kXU7s3UmsSoqHTvzFdDS0zKdmVvmn8TwaXkKOJB+XmKpSxNlblctGmqX08gexYnF8l3Qf1bqw89DWM\/Cng9ghdRF0ghI7YIKseCcpC2we8wYjUKNp8\/GrNNhoY7M83VKuxzrGlkItfitZnrVXOLP8wcuW8T3gcj\/AGh19R1q9S1z4dNwqFXh7KjtbHms9b5Fee9dWPIa1eOLNto1ZwwZ99XCy1\/BuG28MmRB6k7k+dZU9Q+Z2Zy2KamZAzK1G3SGBB1BquQCLFWmuLTcbrK47k+2zE23KT03HurMkwxjjdpsugg6QSMbaRt0Rwnli1aYOxzsNp2HuqSDD44zmOpUFZjcszcjRYLQ9rWgsRV\/FuGWsQIuLr0PUe+p4ah8Ju0qvPTRzizws+vJNmZNxiPDT8qvHFZLbBUBg8d9ytLgMNbsoEtgACs6SV0jszitOKFkTcrBYIhroqNSKi4hy9h7hzFYJ6gxVWSjiebkKlLh8EhuR6KXhfBrFkyi6+J1NPipo4vwhPgooYTdo1Vr29Tq0ocSEcQwBFCkZI5hu0qtThmGDTCz7qd2lYdXzEWzK0S6AIG1NVQkk3KXtxQkVbjsNhmM3FSfOKlbUyM2cq8lPC83eAiMC1lBFoKB5RTXSufqTdPjjjYLMARn6SKYpUVjeLWrZhmk+A1NOtdWoaOWUXaNFBh+P2WMSV9Rp8aMpUkmHTMF7X8FZg01UUjGN6jmmZCwvkNgEoaSbBDnFjwNc5J0op2usxpI57KwKV3EqS3fBrRoMZpqs5WmzuRUb4XM1UlayiUV2+F9ayMQxiCjOU6u5D9VNHC5+qgON8RWRH0pBd2o9O4qY0vekOJB2rpKWsiqmZ4zf9FWewtNioMRjFQFmMAb1Ye8MGZ2yGMc92Vu6zGL5w1\/Vrp4n8qxZMXN\/wC7b6raiwgW7bte5OwfNwJi4MvmNvfUkGKhxtILd6ZPhOUXjN1ejGAiQa1wbrHLSDYql4\/zSmH09pzsPzpzQSrtJQun12CzX9vb0zCx4a\/fT+rWr90w23K0fAua0xGnsuNx+VMc0hZVVQug13CssVxJbal2MBRJoaC42Cz3ENBJXn\/FOfbzMeyhF6aSTWzFQRtHb1Kxpa6Vx7GgUfD+fL6EdoQ69eh91LJQxOHZ0RHWytPa1C3mA4wl5A6GQf61rGkYY3ZStiN4kbmaqbmXmzsO4mrn5etI0XWpRUXW9p2yyZ5sxRMhm\/hMVLkatf7HTAWt7rS8u81vdOS6jA+OUgGo3Ntssqso2R9ph08VeYzioRC28CYGpNDI3ONllPe1gJK894lxvGXmMC4q9AoI+JrbigijHMrClnlkO5A7k\/hmL4ghBVbjDwbUH47UkrIHjVLE6dhuCfNb7A4q46AtbKtGoMVjyREGw2WzHIHNudCq7j9nHXO5h1gdWLAH3VPTiJusigqTK7sx+qz9vkviJM51B8Tcb8qvGshAtb2VAUUt7391o8FgcZhbL3MS6OltSxy5maBqemtZ1Q+J+rBZaNMyVgs83WaxH0o4SDkNwnp3DVU3Vu3JY3H81WrrFnu3W8gsAegmqjqdzjclZ76EyG7nLQ8o3GukNhmuQNWzEKojoBrJ9KlipiDoUrKQQm4cVq24tiwSBhLhjSdNfOp9Rorw2RTMSZO5qddgAALBNNCVablXGFg1smcuo9PCo3BYeKQBrg8cVZ41tQPfXD9KKlxlbCNgL+Z+FWpW6XQtcorSUGnMe5jg5psQgi6JxfELdq32l1wi6anxPSvVsOfJV07HsF3Ebd6yJ3MiJzGwWavc4YPc4ge5XP3LXHy9GManlc90BuTzb8qyMRpWj8Y90Be51wZ2uk\/\/AM7n\/GrEfQvFuMYH+pvymHFaX+r2KGHO2GB0ZyP8h\/GtvCui2J0s2d2Wx37X7KCbFKZwtc+iqePc227yhU7QCZMqNf8AVW\/U4DVTty3ASUmM08Di4gn+eKp\/\/qtrJGV832oH3Zqrt6JyZLFzb89Vad0njzXDTbyUL8RQgQrSNzpr+VPHRE6f3g9E3+1DdbMPqrHB83tbQILeaNiXj\/bWlBgBjYGmS\/l+6zJ8ZEr8wZbz\/ZUnEMWL1xrjK0n9vQeQ7tW24OALZ\/ZWI+kksbA1rAhu79j\/AFN+EVIMKZxcfZI7pPVHYBT4TF9kwdEUMOsuf91KcJiO5Pt8KCXpDVyNyutbwRmO5gv3VKOVKncZY\/Gnx4ZAw3F\/VZ0ldI8ZTayre0\/ZT+EH76sfZWd\/qoOtPIJoc+C\/wL+VO+zR8vcpOsKKscSuqIW4yjwXuj5U00cB1LQnColaLA2XNjbhMm45\/eNKKaEbMHok+0zf1n1KUYl\/tt\/EaXqoxs0eijM8p3cfVSW7p8T8TS5WjgoHPceJRVmmkqq9X\/CLg8KpThXKN42WkwzVnPWwwqysmq7laajLZqElShEoaYVIFHxKyLlm4h+sjD4g0wp4XyI9ohivUHLHmDFInrUcK+j3G30NwqtldMvbHIW9BuPfS2SErWDHrw3D9nauLdvIgU5ZFvNmJOY6T7RpLOJs0ItxKon56ukk9pdGuyv3R5L5UfY6j+kJc7ea9TuIQSCII3qddc1wcLhNoSrS8qYQgNcI0Og\/E1G4rExSYEiMcN1b4y11HvrkekuHvkAqGC9hY+HA+Sp00gHZKDrilcXKJ0FSRRPleGMFyUhIAuUDz7h54deHVQjfB1n5E17D0ei+zuii5C3ssDE+3E4+H1XiRNduudCSkSrqEJKEJaELqEJKELgKEJaEiShKuoQuoQuoQuFIgp4oTU8Gm2TVNbNCY5GWajKruV5wdtaqThT0ZGYhabDGs16241ZWarOCtNRls1CVKFL24FMIUgKA4jx23aHfYDTbqfQb0yykC83XHYPDMz4awiuxJN1+\/ckmTln2RTmxEpVVY\/mR7hmST4nX4DarDYRxRdZHmK0x\/W+5h9xj5fCpQ7JsmEXVDmqbOU2y+w8bwu3d1ZdfEaGsoGyuQ1csWjTohrHL9lTMFvU6UZipn4jO4WvbwVoqgaCkVEm6WKEKF8OvUfhWTNgdFM7MWa91x9FKJ3t4pbdtRtVmlw6npf8AhMt38fVNdI525QXM9rPg8Qv\/AGXP8Kk\/hWrRnLOw94VWqF4XeBXz+a7Nc2kpEq6hCShC40IS0IXUIXUIXUJElCVLFCEhoQuoQuFIhPFCanCkSKa3SJjkXZNMKgcrjhZ71VpholpjZ60+Easx63YyrC3e6ASaqvIG6tsBOybicbkGpk\/ZGp+OwquXjgrLWHisnxLmi4TlH6sbaat\/F+UUmW6kFgs9euOxI3Ymdevvp4ACFR4vCMD3j8NqkB0Qm2UkhLaFmJgAA6k9B1NPvbdLdaXC8h371l+2ItAoYUjMZiQTr3dY3M+VROlASKmX6O9B+tJ9EaPd3dqX7Yf6QjIOa9K5j5tuO7JZYpbBiRozR1noPStekw5jWh0gufouXrsUke4siNmjjxKo8NxO+GBS88\/5z85MVckgiy9pot4KjFUT5xleb95+dF6Dytx57xNm+uW8onaMy+MeO1c\/VQRt7cRu36LpqKplf\/dzts72IVhzBxUYaybkSdlHix\/DrUVLTmeTL6qesqhTRF58vFeX47id682a5cY+UwB6Daunip44xZoXHzVUsxu9x\/RX3ImMIvNbZjDIcoJJEg9B6T8KoYnEMgcBsVpYPOetLHHcaLbkhg1s7ujD3RGvx++sTUEO5ELoyQRl5heAWMM1y4LaCWZsqiQsk6ASSAK7N72sBcdguZY0uIA3UycKuk3lywbCs1ySBlCsFI8zJiOtRmdgDTf8W3mpBE65HLdLjeEXbVq1edYS6CUMzt9rwJBkeVIyoY97mNOo3Svic1ocdiiMXwBrSzevWbb5M\/YlmNyIkAgKVViNgSN6jZVB57DSRe1+H1T3QFo7RAPLilu8BFtFa\/iEtO6Z0tlXdip9kvlUhJ6TSCqL3ERtJANidB6X3SmHK27zYnUBFYPlNrhtr2yDtcMcQpIIUZTBRjOkfa+VRvrg0OOU6Oy\/untpSSNdxdA3uCOlq89yVezcRHtkaxcDQ2adpX3zM1M2pa57Wt1DgSD4KIwkNcTuDYjxVny3y0mIsi4Tdk3xZItorBAVDdo8kQgnWoKqsdC\/KLbX1O\/cO9SwUwkZc33tp9VDb4LZt2rt++7si32sILUKzsoksS0hVgeBNONTI97Y4wASMxvw9N00QsDS5x0BtouwXDMObV7FMLps23VEt5lDszAe24EBR4ga0STSh7YRbMQSTwt3BDImZXSG9hw4qo4lbEhrdp7dthKhzmmNCVbKMwmrMRNrOcCRy+NVC+17gWCvMXwyy2DW5hrYuMqKb7do3a2nnvTa27PoCBVNk0gnLZTa57ItoR481YdG0xZmC\/PXUHw5I7E8Pw7HD3cPZtthhdtLcOZ+1XMQGW+paNSdCB\/OFssoD2yOIfY22t5KR0bCWuYBluL7381muYMILWKvWwIC3XCjwWTlHwir9NIXwtceICqzsyyOb3oIVOoE4UiRS26RMcirVNKgcj8NcI7wBgECeknbWq0jm7EojjfmDmhXo4itvRjmZZOUCcwUSQNRHhOtYU0zjq0aLp4IGt0cdUfwXGtfsrcmA4kKNAvlpv76pSE3V5o00S8SWIInbUefiKRqcVm+OYX63X8RtUzSmoPD2Ll7L2SFiN46eZOw99F7IVzg+RC7BsTckAnuJ4dJfp6Ae+k6y2yVXGIxvD+HwrPatMRGURnIH2jvHmajc8ndLZV7c+4JwynFIoIMBc07dWIpl0oCrRxnhn\/WH8RpLBLYoU13C88SClQr7lK47Yi1bzEpJkbgQCZH2T5is3EYIjE55GvNauFVEwnbGHHLy4bLS874MC0he5cKB\/AMVJGhMwSPfWVhpkEhEdr22PHzWxirYnRAyXtfccPHuWMHDmOttluD9kw3vQwfhNbP2wM0laW+49QsA0BfrA4P7tj6FMw11rVxWEqyn0I8flNTuyTMIBBBVZnWU8oJBBC9Uwx1DeY+ABA+ZPxrln7WXbM3uvC+LrkxN0AwVuuARoRlcxHwrroiHRNJ4gfRc7IMrz3ErQcX4xZvWMwcLexRspiRBhRZLTc06MezMD7NUIaeSOSxF2suW99+HlqrckzHsvfV1r+XH6KXHcwYW8MRYKlLRA7G5LMA9gBLRFvL3AyiD602OlmjySA3PEbaHU68bFOdPE\/MzYcD4bacFXcZxeFxbnEPcuWbrKO0t9n2gLqoWbbZhAMDQ7VPBHNA3qwARwN7ad+iilfHKc5NjytdNxvEsNihbbEG8l1La22NtUdbipsYLLkb4iljhmhLhHYtJvrcWv5G4SOljksX3BAtpx+ikwvMdtVwylXPZWsRaf2e8l6Qka9JE0x9G5xeQRqWkeI3Tm1AAaDwBB81AeZWbCPhrq52IthLv1gtt8wV\/tAd6PDMak+xhs4lYbDW44ajcfqm\/aSYywjlr4KPg\/G1tWXsvaZ1a4lwFbnZFWTzynf3Us9MXyB7TYgEbX3802OcMYWEX1vvZEYjmprj3u2so9q84c2pZcrKoVWRxqGgAE9aY2hDGtyOILRa\/wAjknGqLi7MLg8ELY46LbOLdhBZuKA9ly1xWy6hsxMhvMRFSOps4Bc45hsRYfwJonDSco0O4UXF+MG+tq2LaW7dkMEVSzHvkEyzEk6inQU\/Vuc69yd9uHgmyzZwG2sAls8cdLTWkt2lzIbbXAkXGQ7qWmNfGJodTNc8PcSbG9r6XQJyG5QByvxXXOPXTb7JRbRSULG3bVC5t6rnIGsHWkFKwPzG533JNr8kGd2XKLDwHJB8Qxj3rjXbhl3MsYAkxGw06VNHG2NoY3YKN73POZ26hFPTE4UiaisDhWuNlWJgnXTYTUU0rYm5nJ8cRldlCuMJwnWHOu8D84+6sapxMgXboO9aNPhYJ7Z15BaHAoiaZcumsdY3jxMfdWUKjrRmvda3UCLQCyXB8KW7oSATL2n6EbifWYPlUUkpYe7Yp7GB408QoOAXBbm10Eso8juBUjxfVMYbaKw4e\/6VbW4qsFJPtCDoSPw+dNewsdZOY8PFwixwW0xhyGOhyzA8pG8UgNktlaYbCqoCooAGwAgD3Cg3KNFmvpKwvEOwtjAZ8zORcFvLmy5TBzH2dfDxpqcF5MPo54q7FjhLhJ3ZntyfUl5oTgQrLB\/RbxI6NYRR53E\/CaRGZFj6KOI\/Ztf\/AC\/+NCMwXpHMvJ752uYcZgxkpMEE75Z3HlW\/R4k0NDJeHFc1XYS4uMkOt+Hws7b5fxRMCw8+YgfE6VoGtgAvmCzBQVJNshW65S5a\/RpuXCDdIjTZR4A9TWHXV3X9lv4fqugw7Dvs93v1cfZX+Mwq3Ua24lWEEfl51RjkdG4ObuFoyxNlYWOGhWA4jyTfRptRcXpqFYes6Vvw4pE4dvQ+y5mfBpmOvFqPQonhnLeLcgX8vZ9Q8O0fskaj41VqJ6X8Ud83Nun89FcpaWtPZmILeTu1\/PVaX9Eu2yMrZwBoG7vUaSOum5B61llxIW2GgLyPnHgV\/wDSr9xLeYFyxVCHZC3ehlGo3nat6krWCJjX6aW12NuR2WVPTEvcW668N\/RZftiDDCDWk2QEXVIxWT1ug1IHAphaQn0qalpUiSkSrqVC6kSJaELqEJKVCWkQuoQuoQnChNUlpCxhQSfAVFLKyJuZ5AHenxxPkdlYLlX\/AAjhjKTm3cZMo\/a6E+OnSuSxbHw4ZKYXsdz+g+V0NBhGS7p+I2H6n4Vzg4U94QEjTxWQNPMeFc+Jny9uV1z8rXDGsGVgsEffu91lQaA5k6wQZAnr1\/ompqaUMlDBsdk2VhczMeC5ZXWfZkQPBtiPKSdK1XAOFiqIOXUKuuFUZLlwAlWzAASSf2RT4wSLBNeQNSjbeIxeIPSxbPRe9cPq\/T3a+dPENt0wzD8q0PCeDJbzMB3nguerEeNNKUEq8tIBTCnpuKzZe6YIIO8A+RPhTCnLsv6yc26+zmO4O4H40iVCWrc23VrqtJ0IPskn2Tr0O1CEWMSg0zD40IT+JcTtWFzXXyjoNyfQdajmnjhF3lWKaklqHZYxf6KhHPViY7O5HjC\/dNUPvaG+xWt\/Z+e18zff4V\/w3iVq+ua04YdRsR6jpV+Kdkouw3WTUUstO7LILIwVKq6puI8x27ZKqC5G8aAe+smqxeGF2VvaPdstOnwuSUZnaD3Q2H5sUmHtlR4g5qrxY7GTZ7SPdTSYO4DsOurf9JDAMmqkb+oP5CtuORrxmadCst8LmXDt15N9JSlOIM6kqWS2wIJB9kLoR\/lrq8MIfShp4Ej3v+q5uuBZUEjuWebijNpeVbw\/7glvdcEP86ldQx3vHdp7vjZMbVv2dqO\/53UD4LDv7DtZPg\/fT3OozD3qfWoy2pj4B47tD6bKUPhfzb7j5UVzhOIXVV7Rds1s9oP9Oo94FDaxl7OOU8nafsldTG1xqOY1T8Rw7EW4Fy0ysVDBWhWg7SCZB8jrThXxHY3VSRojdZ+irLuJKmHUr6gilFW0qVsQcOybp6YsHrUwmBTTCQpVuipA8KMsKkzU66bZdNKiy6aEJaEi6lQupEKz4bwi5dAYIcpJAYg5SRvHVvQfEVi4rjMVD2Tq7kNT8evoVfosOkqdRtzO3z\/N1quE8Mt2wVuEgjWFXViR6wBtuSa4GoxN1ZNnmNhwG\/vsP5ousp6QU8eWMXPE7IK8wt6vcC+Gve7pkFRvO1SwNkqDaBhd4beZ2902V7IReVwHjv6bozC30vNmTUbMTpE9YOu0n3VcjwaojN6jTfQa381W+8YZL9TrbidLKW5xO1aAAi648PZ9x61pU+GvkGgLB7+ao1OJxxbkOPsmpduXz3wAsjTr3dVj41qNpWRbLLdVyT6HQe6t8HgUBzQJO7HUn31G7TZWGC+pVvZtjwqu4qyAj7ZqEqYIhDTCnhJjFU22zezBJ0mI1nT0phTkMzotxMznOEA1GjhzAM7EyvTaaRKktYdB2qqGmcxEiSTqCvl08NKEJlvBowDZW7wB1bXXXWKVJZYHmPHNexFxmOgYqo6BVMD8\/fXKVkxlmcT4Beg4fTtgp2tHEXPiVWzVVXVY8C4i1i8jqdJAYdCpOs\/fVilnMMocPPwVOupm1ELmHfh4r03jmIKWHZd4gHwzGJ+ddDiEpipnObv86LiaGISVDWu\/lljuCIrX7YYAgmCDqNjXJ4exr6ljXi4\/ZdLWuc2BxabFW3F8MgtOXt27bBv1eTdhPUelatdBGIXF7WtIPZtuVn0krzK0McXAjtX4Izl69+oXbqNf8\/5GtDCTmpW+f1VPEhac+SwX0r2ovWH+1YC\/ws3\/ACrtcHd\/dOHf9R+y5PFG2lB7lhprXWalBoSKfB4h7brctsVdSCCPEGffttTZI2yNLXi4TmSOYbtK0nEOOrirrXLiAEnadtIEe4VgOoXwiw1HMKjWGSSV0t9\/oob1gZSysIG6n+dQXKrMc69is9d4ajvBt5T4ju+u29SNeWhabal7G3Dr+KixHALg\/unBHg35j8qlbVEKRlfGf+IPRVGOxJs3DbYyREx5gH8assqyQr0UQlYHjYomzixFXWTCyhfCbqa3iAakEgKjdGQpg9SAqPKmteA661G+djNCdeW59E9kLnagac+CTMT5f1\/XjURfM\/YZR36n029\/JSZY2bm57tvX9lrcPzVf7BbC2EFtGlezDggGZXMSZkmZOu9Y1fhNLUHNLLrvqR77adwsrtNiUkWjGaeaFuXMU3s2rg8wjE\/GNPdFRxU2EwDtysPi5oHpf63Sy1tbJ+BpHkSfX4soLfBsSxnsLpJ3JRpPvIq8MZwqIWE8YHc5v6LPdS1chuWOJ8CrDDcCxY1Wy494U\/fVeXpJhAFnTNPqfoChuGVt7tYR7I7D8u4mZNuPVl\/Oqb+l2EDQS+jXfCT7jr3G+T1I+Ve4HhV1R3go9\/8AKs6bpdhn5S4\/6flaVPg9W0doD1VpZwrDeKzpOl1Fwa8+Q+VoMwuYbkfzyRaLFVXdLafhG72VluHP4kKZbsVWf0sb+WL\/AHfspBh54u9lIMV5VA7pU87RD1\/ZSChH9S5sWSCIEEQffUDuk9QdmN9\/lPFEzmVG92YlVMREifZMrv4Goj0krDwb6H5Tvscfel7cyTpJ0JgTAqF3SCtP5gPIJ32WPkkF9vL4D8qj+\/K\/\/M9m\/CX7PFyWI5r4W1i+xjuOxZD011K+oJrerqcxSk8DqF0uF1baiAC\/aAsR+qpaprTVlwDhrX7yoBoCC56BRvPrtVilgM0gaNuKpV9U2nhLzvw7yvVMbhhctsh2YR6eBrpp4RNG6M8VwcEpikDxwWGVGw95S6mVYH1A8DXHBr6OoBkGx9fBdWXMqoSGHceiHxl0O7uBGZiY8JNV55BJK54G5JU0TCxgaeAWk4HaZLIzgrLEj00O3uNdThLHsgAcLa6eCwcRex8vZN9NVRfSDwS5iex7IqCnaBsxI0LLl2B+ya1GdI6TDHOjlzEmxs0X573IWFVYfLUkOZbS+\/ksvZ5DvH2rtsemZvwFMf0+pR+CJ58SB8qBuAyn8Th7ou39HzdcQPdbJ\/3VUd\/6hAfhp\/8Af\/8AlS\/2fP8Ame37oq39H6dcQx9EA\/E1Wf8A+oUx\/DA3zcT+gTh0fZxefREpyFZ63bn+kfhVZ3T+vP4Y2Dycf+5O\/s\/D\/Ufb4RtjlCyogXLh8MxUx\/pqhP0yrpj2msHgCP8AuKik6N0zge04Hy+EJieV2t621D+QMH+E6T6VfoelEchtOS33HssWr6P1DPwHMPQqtbDJ7JRluSAAdNz1BrqYpxI3OxwLeYWIYXtd1TgQ8kAX71aNy+GQLc7O6n2biq0ek7e6qf2hxde1jzGi7iCjdBEBwAQHF+CreclraMBoAV2A0id6Y3EmMBYb25gqYUrjZ2l0LY4ZhlLJ+j2iyxIAVyJEjMNxpFUpmSy6wVTx3Fx+twp2sa3SSIeQS\/oaNutpE+zbtqpj9pyM3wy1mT\/b6fVznnvLiR5C9vW6sRx07vwgegV5w6xYtqAttFHko+\/rXPzzVEri5zySe8q02JgFgArS1i7fQqPgKpujkO91IGcgpDxK0N7qD95R+NNFPIdmn0UggkOzT6KJuN4briLX8a\/nTxRVB2Y70KkFHUHZjvQpjcw4Uf46e4z91SDDqo\/4Z9E4YfUn\/DKguc14Qf40+iufwqVuEVh\/J7j5UrcKqz+T3HyoW5ywn22P7jfjUgwOsP5R6hPGD1R4D1Chuc8YYbLcP7o\/E1K3o\/VHe3r+ykbglSdyPX9lA3Plnpaue\/KPxqUdHZ+Lm+\/wpRgU3Fw91C\/Pq9LB97gfhUrejb+Mg9FIMBdxePRQtz63SwP4yf8AbUo6NjjJ7fupBgDeL\/b91C\/Pd7patj1zH8akb0ci4vPsnjAouLj7KBud8T0Fsfun\/lUo6PU3Eu9R8KUYJT8SfUfCifnHFH6yj0UfjUowGkG4J808YNSjgfVDvzTiz\/jEeir+VSjBqMfk9z8qUYXSD8nuflM\/tJi\/+u3y\/Kn\/AHRR\/wCWPf5Tvu2l\/oC9wxOGS4pV1DKdwRIraexrxZwuF5hHK+J2Zhse5Uj8oYSZyEeWdgPvqn92U5P4fcrS+\/KsC2YegVzgcFbtLltoFHl18yetWo4mRizBZZ808kzs0huURUihUd+yjCHUEftAEfOmPjZILPAI70+N72G7CQe5BWbOFVu4LWb92fdUTKOBhu1gB8Faklq3N7RdbzRGLIymdoP3VYG6pi\/BZDnHj1vDFcwYlpgKB0jeSPtCuWxbDZKipztsBbit3DKWSojOW2nNZoc+J9Wyx9WA\/OqIwGQ7vHothmDPO7x6Jw59bphx\/GT\/ALakHRwHeT2\/dWhgI4ye37pr893elpB6lj+VSt6NxcXn0CeMCi4vPsoDzxifs2h+63\/KpR0dpuLneo+FIMDp+bvUfCjPOmK8UHon5mpB0fpBvf1T\/uWl5H1TBzji\/wDqj3In5VK3AqH+k+pSnBqS34fcpmM5gvXMpa4SRsYXSd40q5Bh1PC1zGNsHb6nW3mqzsConyNkfGCW3tqeItzRvC+YzbntWZwYjbTxPw+dWmsDRYKvXYK2YAQNDSN99VaYW2t3\/wC3xAbScrEqw9f66U4xMPBYssctKf76Ow58FRcQw+Ic5L1hgwbRwGfIRrIcbCOoYHUaCmiFrToFB1sUmmgTMc+JAAGRiTu6mY8oIk7dacI2t\/CSPomPpr6ix+qrxiLV0st+wUYaEnUZuuVhBI1XUzvtTTDxsD7JY5poTZriO47KoxGFshmWziULAqMpPUkiM3lGumkjxqF0B3C04MaLOzIPMIO8l62VzIe8JWNZHiIqPJyWhFi7TxRuEs3n9mzcP7jflSgO5K8zFofzOHqrfD8AxTbWH98D7zUga\/kpPvqjG8gR1rk7Gt\/gx6vb\/wCVPDHckx2PUA\/xPY\/CNt8gYw9LY9X\/ACBpwjcoHdJKIbZj5fKnt\/Rzijvcsj95z\/tp3VlRO6UUg2a70Hyik+jS59bEIPRWP4il6sqB3SqLhGfUKZPoz8cV8LX\/AJ0vV96id0r5Rf7v2RKfRrZ637h9Ao\/Ojqu9QHpVNwjHqURb+jjCje5eP7yj\/bS9WFE7pRVnZrR5H5RKcg4Ibq59XP4RS9WFA7pHXHYgeSIt8k4Ef4E+ruf91LkaonY\/Xu\/P7D4RKcrYMbYa37xP30ZG8lA7F64\/4pUn9nMJ\/wDrWf4F\/KlyN5Jn3pWf5rvUqu515iaxFq0YuMJZvsqdo8zB9K1sOohL237D3XMYpXuhtHHuePILzrEYgsczsWJ6kkn4muga0NFmhc0S55u43RvDOZcRY9i4Sv2G7y+6dvdVeaiil\/ENeYV6nrJoPwnTkdlqeB88tcfLdCDw1ifIVm1GFta27CVr02JmR2V4AT+KcXN5iJhRsv4nxrNfA6PddphXUPjzMNzx7lU371R2WwArHgnEnM2y0gQRO411j3U06ELLxCmYB1gGvFUvN3CLuK7MIAuVQSWJAGZRptJPcqvPGXHROw+tjpWOz8eSDwX0eXIl8Qi\/uk\/eRUbYDzV7+0sTNmE+YHyriz9Gy\/WxJPpbA+9jUgi70julbvyxf7v2Rdn6O8Mf\/wAi4fTIPwNO6qygPSqc7Mb7\/Klt8hYITN240RPfT6xgbL1IindSVA7pTVHYNHkflSpydw6frHQH+8brtt\/Wopfs55KE9Jqw\/mHoFLa5T4aSALRbNt37seyW3zeApTAW6kKP+0dc7aT\/AGj4UlrgPDRAFldSoE9odXEr7R6jWnGndy\/gUDukFY7\/ABT6AfoiE4VgMocYa3lJgHIDsJnXpoaOpN8vFRnGasi\/Wu9U5bGCUgrhLcgEiLSE6BTp1PtDaninPconYtUkWMjz5n5RTshELadZ+yAN5nQEidCdvCjqu8KoZSeBVPxLl5MQQTbdSPrACYIJICMCpMqusfDSmPjA4hPZKTwQmI4JctplCi8UUx2vcZjuFJMg7KJ9N6ZYKTMSvGOJYDtLjO9h7TOxuA5SEykyAug013G804Dgg3QV571u5ltvnIXIB7QhwCypOxnTTwNNcwHgla8gr1Pg3B7xth7ydk+WSuYKCxEyDsBrEdIqsYyDorIla4ahHW3v2hqZ0nwHU6Hbw1nWaA4jdIWtdsUfh+PFYzgiQD7jtrTg9RmNXWE4yrdaeHKMtVjbxoPWn3TLIlLoNKhPDUIS0IS0IXUJF1KhLQhJQhecc+2SuLYnZlQr6AZT8wa6XC3AwWHAlcnjDSKkk8QPhZVhLHyrSVAaBNK0JbpjLSJwKKwOLZTuaq1UIkjI4rXweufS1bSD2XaEK0e71NcyQvVxql4XxELeWdjI+U\/hTHNuq9YzNCVr8LbDaCYEDXyLA0x3euYkKsRhgy5W1Eg\/Agx6aUMcWm4UDgHCxU6cOTz+NP61yZ1YRNnBIpBC6gkz5mJ+4UhkcdCUoY0bJRg0AICiCII6ECdPTU\/GgyOJvdGRtrWXLhrY0yr8B4R9xI9KM7uaXqxyTkyaRl3MRG43j3Cm5ieKd1ZHD2XWVTKMoXLGkQRB8D1BoJJ1SFmU5SLWUlIhd5\/1\/WgoQlmhCcGoQuMEQRI+VCEHieGW3XIVGXSFgFRG0KdAPIRQluVg730UWc6ul1wyycw+s2aQWSRECB3SNpNBunZgtbjCtvCshsm6MpV0OmZTo7EAEwRJ0XrTSgC50VBwHgdi5dNy0t20y5hcDP2hYtGTMxLZgoUwCcw0kCktdKSRuoua8LfsNNvCduhVSGTNIYFp7RVDMRBXLlRhJMxFIWJzZDzQdrADshcINglVJW4chUkaB5gTmYaCNgKblT84KlQ4i3+0PhoANT89NdqLkIIBRuF4\/ByuCCNwenrTg5MLOSucLxdW604FMLSrG1iwetOTUQt0UITwaEJwoSJTSoSUIVfzJwZMRa7xysklX8PEHxBirVLVOgdcbHcKnWUbKlljvwK8mx9gpcM7HY9K6mJ4c0FctPGWOLSoGFSKAFRsKE4J+FslnVRuxAHxqGd4ZGXFWqRhfOwDmr\/F8v4gadyPHN\/Ka5IvC9VbikAbx9FJw3hCWpzNnduuwXUHu\/Deoy65VGpr3S7aD6rX8Fw8A+ZYz4y0z86Um6zHuuVYMpVWIUsQCQo3JA0A9aaiNoc8AmwJ35KpTCYs2grl+0S7bOZbmXtLTMpuA5SuoGcbbARrTdVrmWjbLmZbKWu0IvZwBy733Nv1T8fwa6Tf7NnhhZNqbrmCrTcGrGAQF9ZNBCbBXQgR9YBpmzWaOI7J0HBc\/BbxuZxchS9ktaY5lKoAGjTutAO2hmD0NFilFfAI8hbrZ1nDQgnUeI9xa4TP7L93KGVP1uIbMghuzvo6qAY3XOPLu0ZU7727WYgnssFjtmaQSfA291ycrEkFrgWHRgLQKAG3Za2GXXRiWVvCEA1oyodi4AIa29wR2jfdwdY9wsRz1vorrhWDNmzbtFs2RQuaIkDbTppTgsuqmE8zpQLXN7IuhQJqODIBBIMGDMGAYPgYIPvFCUtItcb7JaEiQuBuR4e89KEoaTsFGcXbH+Im8e0N94330OlCcIZD+U+iFt8csEqBdHfy5TrBzKzDXpojbxtG9JcKw6gqGgkt2vfusQP1CkHGbGZFF1CXIAhh1Ckdeue3H+dfGluE37FOGlxaRbuPeD6WN\/ArsVxXDjMrsCFJVu6zCQhdl2gkICT4DekJQyjnfYtG4uNRtewO\/E6Dmg24rZLAW2cnOE0BygszJMtEjOhXQ9RSXCnFDM1t32AtffXYHh3G+qzqIr3c4v3EzMjOpzuhF1lzWzJA7xYqJVomFiICJ8uHyMB0vvy4X1t4C6uuPcQtdlbD4c30JB+plVkKlM2YgSTqJgdwyQYBW6odW5pN90PwHhVm4puWGuLaYwtsnNbQqSHCAiVGaRAYr3RlgUlgU0kjdU\/Er+ItXytzBFkzFbdxSrBgxjRZLZiADBA2I6SUITw7vRl7h9vf+6Y+BjX\/ACnc0lkZlX38Pjkk2b1pxBgFSrT9UHUg9dfTSkOZWGGA2ztPqh7nFscsBjlJKD2VBBKsG+qwicjE67ERSZnBWoxRcRz593eOFwrzD3sQ++IUAx7IjxmNNN\/EzA2p\/aPFR9dSN2j9f\/OvtbvRiYG8xZjiIZkylgGkCUOkMIiH2+15UZTzSitgaA0R6A3tp3jkb8PRGDhRMFrzMcytrJGZWVgQCYA0YadH8qXL3pn25o0awDQjvsQRy8D4hW+ceNPus6yD5jci1A+sQPd1pTshu6x3E8Eq+0koflWtRVdxkJsVmVlKCcwFxxWax2CCk9mZXwO4rbjkuO0uenhDT2dkIuGdjAE+lOfK1guSmRwvkNmhazgnAzYRr7iWVSQPQVz1dW9acrdl0+HUAiIzblZDGc+X2MhLar4HMT8ZH3VS6sLrxhkYG5RXCebLdxstwZH6ayp9D0NROZZVJ6Mx6tNwvSeWWzKDMjQD3KJ0+rqDp+dOdssxwsVfXFiY36etMSC19VRW+IYvICLEtkEqRlhxbZmUa6guAoO3e60i1nU1GH2Mml9xrpmAB8hqR3IriFrEG4DbaEi0cug1F0G6D4zb+6jioKd9MIyJBr2tf9PZ\/wByZZOMJ7wtqO\/HUyVTJm8VDdpMQTC+dGqV4ogOySTp9Te3eRa19N+5KtjF5lJuKACJGmozrIJy75M+0a5fOjVBkow0gNN+fke\/nbe\/FR4vhl9rzXFv5RDKmnsq3ZErEeNpu9v3\/Kggp0VXTshEbo76gnvIza+jhptp3ot8FcPZfrmGQQ\/XtNiCYjXMo1jUFhGugq4njGfsDXbu+vD3seCCt8FuwQ2KcyrrIzArnA7yd\/RgZgmYBgRRZWnV8V7tiA1B4a24HTY91tdTdJiOBrq73ivWR3VU5UXMJJj+7U6nqfGkyojxB2jWsB9yRcm2gHMqfHcCt3Wd2LS4tjSNOzJMDTZpEjrlHhSkKGDEJIWNY21hf3+OHiUx+XbJBBLwzMx1Ey4h9YnX106RRlTxicwIIA0AGx4baXtp78bpU4Fh1II0OcEd6O8r3HEHfe6403BjaiwSHEKlwI7jw4WaPo0eeu6hsYfBAkBlBtZBJuMMuQOVAObUAXHB8iQaLBSPlriLkGzr\/lGt7X4cSB9Qo8C+AXVAqFIOuYFZbslAJPjaC5R9ldNqQWT5xiDtH3Oa+1tdMx\/6r37zqjbj4QrcusLbKCO0bKGBaABOneMMB7wKdoqrW1jXNjGYHgL20\/QafquscRwzLeYKAtoZnY29CCva5hpJ8fGRSaJz6apa5jSdXaAX78tu76WUOJ5lsorZUYsELKpXICQt1gsnaexuagEaTrIlMwUseGTPIzOAFwCb34tF\/LMP5dLc5htFuzNstcGTQZIm5l2M6RnTX9rSaW6QYZJlz5gG6668L93cfRRYfiJuTFt1V2RBq2YJdthleAMy6tlMEwQdopES0YYNXAkAk+LSQRe\/mOelt0PgMA9m62a7da2kyrq5VjIysLrGJEjRQB7WlCqmEloItrwBF\/TdQc3XMNeypft3coBIuqEjKwGYCZLbD2VLCARGhoNlFkc1GYPgot2C1vM+juiaGQZKohJ00gDXr02BZNzaqn4dxTtbhsm2Q4XMVBFwACJlSBcQ6jR1XfSaSyffRSnh9q4D2TlTm1aywMEHVcpkDUEEetJbkniSxuRfxQqcJxakZcWXAIMFcrfVnyb2W02758BTbO5q0KiC3\/DH8v8AzyVhwexdtqVd2I7NEAgiCgIJUzpIjQeE0ouE2oqWSkODbG5N+d+fgrnOaVUlNzEDlU9AdffpNWGNzEt7lC52XVQYXCLcMEjyB2PlUQvdSEqr4ngLAfKEynYgGRpTafEJXOc3UW5\/okfSRkXIBUmD4eoghflUr5Xv\/EUjYms0aEznDHCxgrzfWZcoHroPvoYLqemZmmaO9eCu5NTErp3EocqZphF1Hluvo3lJT2SNOhCwP4pP+qP3RSFcxILOIWjuLrUaYqzH3LwI7JQZS7oR9dRNuWnQEyKFcgZAQetPFvoTrpzCat6\/2Uhe\/ngEiDkP1isjUeGm0+VJrZOLKfrrX0tfuvyvy\/8ACgs3cZkE20DdmDqQSWC25BIMSSbo8BAOu1Gqleyiz6ONrn0ue7gMvedRopR+lTrkjtBp0NuTPe1MwV6bqehkGqj\/APaZdL3y\/wC7ThyvfjseY1ixmCxLXi6XVChWCDXQMLe6xqcyN3p0DbUG6fDPSthDHsJNxfyzcb8iNLbjdLjeF3LnZHtIZBrvvmRs4iO9CFdtnb0oskhq44s4y6O29CLG99Nb+ICKt4I9sLxgE2sjqBMnMCpzdY7w260tlA6cdT1IuRmuD5WOnfuqy9y4zBlbE3CGVlIJYjvLcXYtH10PraHjTbK6zE2sILYm6EHgNi08B3H\/AOymx3Ce1v5mulVNpRCtleVNwMR4KRdEkdQKUjVRQVnVQWDbnMdxca5SPPs+5Sf2atyCXuabjuhTBJAjLoBLaCPaNJlTvvWSxAaPe\/114b8gprvBbRtW7JkJay5QCBJXYtpBMiZ8acRdQtr5myvlG7r38\/04eCGvcBwgBD6DQEG4VAGVwF3EDK7D0jwpLBTsxGtJBbv\/AMt+IN9uYH8KS1bwRLjuyH7NpcgF2c3QFk6tnckEbFiBRYJXOrmhp12uLAbAZddNrCxvvbVSpi8GZUFHF0ZWIm4GCJmhzroEk6+dGijMNaLOIIy6jgRc2024p2K4hh7KC6qqc6iMq95kWCSTHsqGnXx86LhJFT1M7zESeydbnQE+e5tbRPtcSw4tu6AZLbZTlSNcxXu6CRmLfOi4TXUtSZGsedXC+p7r\/SygPNVgAnLcEb91dgHJPtf9q4I3JXQUmYKYYTOTa49T3d3\/AMgb7WOpSWuZ507FywzAxAGZTeAGp0k2CJO2ZfGluldhdtc4A079Dl5f8+3cVPj+LXMlprdlm7QKx7rHKM9vMpXLOYqzkTHsE0EqOCkjzvEjwMtxuNdDY3vtcDa+6ka9du2LpFs2rwVggIkyBIGoggsI0kHQz4HBM6uCKdgLszNL+F+4321TmtXXcoO0trlVg4KauRqus90abgyfTUUT2RiPNmBNzp3fv9EVgLNwCbhkwOkaeYDETvqIFCgeADYFB8O4RDXLl7Izu243CzIGY6xqdNhA9SlkhPJFXOGg7H46\/PelSXQtzBsNh+NJZLmVfcxDAkd3QnrSJyv8SoLFW1BWD75qVpINwoiLiyosfhblgEiWtgEyPaWPvqd8TagWByuKizuh1OoCpLfE7Mybw117x1981mQ4FWxSEucSP5\/NlKcSp3N3AVsvGEnLZJeQDCyQD116VoGnc38WiaJmu\/Dqs3z8t18G3dLMXWQuuVRqfuFKbAgDZX8LI6+7ivKDapy6QhXfLXLz4i4Aq+p6KPEmmkgJkkrIW53r27g+H7OE6KMq6QSq5CNeu7f0Kb+X+d65SV+d5dzV7cqJNVdxDFshQIJLOAQVYjLuxzD2dJidzAoJVqnha8OL+A5jfhod\/hQYTGXzbdntd8ZYWCupAzDzymdRvFFypZYIBK1rXaG+u\/ge6\/smYfE4mADaBPe7x063IJA6d23puc\/lSap0kVJe4fy0H+n5Ovd3rjfxRBItqvdUqCQST3cyk5oU+2Oo2Ou1GqTq6MEXcTqb+9iNNeHLiO9dxGxiWuobbKqLB3OrZbitnH1hLWyB+yfKlN0U8lK2JwkBLj9LtItyOhBPeO9NxmBv3LKg3ALgYloJUGUdQJXXullYafUFJbRLDUU8UxIb2SBbjbUHjzAI80t\/htx7qXM8ZQFOp2UvJEbZ8wkfsr4UWQyrjZE6PLvr62\/6baeJ5rrPCWWyLQulYeQVlYTNOSQQTppm36maLJH1jHTmXLe4trrrbfW\/p6JOHcHa26u15rhCMven662Q2pJI71ktH7ZpQEVFc2VhY1gaCQdO4utwHB1vIIbB8ukIouXXLCNiY0AGYTrngA5t6blU82JgvJjYLd487acO7ZS2OXLSur5nbKwZQ2UgQHCj2enaevdXXSnAKKTFJXsLLAXFja9+F+PG3hqVO3A7JdnKmWYOdfrAAT4wQNpikLQom4hO1gYDoBby\/nHdNHL+HyhchgMrDvv7SKiKTrrpbT4UWCd95VGYuzbgjYbEknhzJU9vhNlYy2wCpBBkyIBAgz4Mw9DRYKJ1bO693b+HcfqAntw2yVVDaQoswpUECZmAfGTPjNLZNFVMHl4eQTub8tvRTJhkGaEUZjLQoGY+LePvosozK82u46ba7eCkVQNgP61oTC4lOBpUi6aEJ00iEoalQpFahCdoaRCQ2vA0IQHE8YLSM7SQg2GpJ2AHiSSBSHRKBdAHFJ\/03\/gJpEtira4O8T6D5D86empyv0pUITE4ayx7yIT5qKcJXjYlJkB4Ia4qgHKAAPAQKjJLnap1gAqq6JqR\/BMZzVLfwWAzzfFjN1kLm94GtPjhleOwCpHYiYeyZLea1HBjh2XLh2t5R0SBHqBtTZIns\/GCFGKlsxuHZvO6tsoWSd4ge\/w9THwFNFzolJRVzpTUqjoQuoQkoQuoQkoQumkQkkUqE03V8R8aXKUlwmPfUGCf5evhuKUNJRmCb+lptmH50vVu5JMwTWxqCZMRPQ9Gy\/fpR1bijrGqVHBEjz+Rg\/MU0iyUG6fNIlXUIXUIXUIXUIXUIS0IS0IXUIThQhZ9uZ3zFRhLpy3WRj3yIVkUEFEYEkMWAmAEMsDpSJbKfCcbxLZJwZTNlJlmMBhbMHud1lzXJnT9VE94UJE\/iovHILITV++XBYKArEEAMJOcIPKZ6U03ShQOmLkw2HAnQG3cJA6AntBPrA9KWxS6K1XExeZDuQGXzECY8wQfj5U5GXs3RLW+o20pU1C3UJJ3\/r301OQuItEjU\/191K3dIdlh+cuLMiKlow1wkZh0RdCR5mdD61o0dOJZCXbBZ1dU9TFpuVkcPh66FrLBctJKSbo\/DMUYMhKsNQQYIpXNDhYjRRNkc12ZpsV6Zy1xU4lVZx3rYhugL9CP3SdPE1zlZTiBxA2O3gusoKs1LA47jQ+K0T7Cs9aSDvZswggCNj6\/+qe21tU03vom2w06uI6j8qU2tskF+aajQ0m4I8PgP6FKRcaBHHdNuXFgAXI7x1Hr7PzigA3vZISOaYrKDOdj11BjTT0\/90puRayQWBvdNc29TLdfnrt16UDPsg5VOmFQidddfA660zO4aJ2UJwwSfZ+JJ6z99HWOS5AnmyszG\/8AL8h8KTMUtgkGHWZyjWjMeaMoTuzHgPgKS5RZOpEq6hC6hC6KELgKEJYoQuy0IS5aEJctCF2WhCX30IXZh40IslN0DrSJbKEt\/XhQlTZoSL\/\/2Q==',width=400,height=400)","ba376020":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b0296ab6":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAMAAACahl6sAAAAkFBMVEWPARv\/\/\/+PAhyJAA6NABaRBR+OABngucDdsrqxTmCSByGxT1+LABKUDCXPkp3mx82cHTW3XW3pztSHAAr8+Pn26+6rQFSYFS3v29\/68\/T69faeJDqnNkvy4eTz5OavSVvkwce9anmCAADaqrPRlqDIgo\/Woqu4X2\/BcoCiLEG9aHedITjDd4TpzdKqPFHLiJRudfnRAAAOLElEQVR4nO1c6XriuBKVtWGMzGaMDZgtrGZ9\/7e7VSXjkAlJd0LfHmU+nf7RChZGx6pFkquKMQ8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw+P\/zA4Vxac\/9tDeQJcMWlEghBGMvUzuWjOTCKzS2+\/2Wz2vUumE8M40\/\/2uL4KzoQpT400uGG0OJVGsJ82K0qKYTiA8Q8qHtQOh8aof3toX4IS2apmMRgMai6rrvgpTLTWjIt5GuDwZ6tTs5gcJ0XztJohpSCdC\/5D9AR57Oj5L3qZAXtlJNouEzcX9OlB\/Aw90UwlxGPalEJycCCc3AmDv5o5Mtm5Ll0cxgujVuKCPMIMTZS1txolDi6JOEQmQ2TCqbOD0FoahBTZFEa7kvLdc+dKmi1cm2Wi6qtdVBe5D1eI7RnGuoAZeN9FKy0bcPW8pZ7hXv79Yf4K4MfDoPYZafehv9BaySytfUsQmr8+zs9QrQvl6nWEh0Q9EhowzWQJbnxXslpS\/vUxP4DWYGIRL1sYW46YhR9351qHM+oFrLcv9M1EMBfWYHq46xE6QZDHKgKAgnw8MK2xi4rzIOjYL+6G2gEiqL41cgWGCH37x+YIrwEk779K4sIJ6yXD1xHlEY2If06E\/lP5q640nLDD90Sm0SOr+wD8jkgARP7PY\/wtAJEgn1tcviDrl+o7ORFxwMkjkbMRBu2Pecjj4SA1fQHQcWlG+orhAQMa13fXFdf84XadDiY4d4rIWX2gG1xpISIjJFJ5MF1gpp0i0n9PBOdGgfxE822+nUeJ0Y+m5QcQYYqZRBdXa5zya4GnKO8XxI4TAaWQiZmczrRlt9v182kiE\/kPdXGYCO6gOChGtmsMLItgeqPTOGRCaNpPVfriMBFU7yRubtPq3CRvF8oKGP6Vbpsxcam6O0sEFYNd2tN63HMcN6n8jdm0fWHgcKy6OEmEFEOWp34lSeNwlxmSJCtrvXBccelvSlIXhiLmGhFoCNM91IrR2U\/oFKXqBSSFPO47tbosu0gSrjhGhGkRN1ejm2Kgtf3H+Tu\/s8fYZ7RqxUI6R0RH7dmrYqhHPgMXJcBFzde3nrN2LJ0jAstyVIFx2KtMrH6\/7sLTVFSXuBfi3I1hI+acjvBkj1u9\/VEKrVR1\/Mb\/CfpEKXDy3f0C+u8TxxaNoCNmQrbIVFvZzwGL+MSUm35pnJsRGBs3PP4KuCH\/7hwRLtbBLEWM4F\/6y9YsWAvuoB\/RDIjYw4TxeHxrwb\/6s2pnX38WrA130LNrJjPrRkIeZzP4fxAsojg+U+sMorSwJjeLuT2THGfSRSJoW9e4npodhJZtau1hmbXBVroxWpzQfaRtqcVuSu4G3wm5RwT0licnGGABks+TA7TmCX7WglYvwc\/m0FpiSxTQOr1wJxeN0FJAZBAUhkNrCa25UEyJHrR6AjymmENrmYCTMQW0TolykghHIhsY4IWI7KHVrInsEiTShNaeiFygtXGZyBUGOBS8mpsWEkl20MLXDFy0qnngYgitq+tE5jWRHhE5VAJl52ZDrbnjRET7JlAkZDtqLSuBUskrERSyduKmshORdS1QODcHau2tQIGOHKp5sETQrztKhIttLVDXm0CBkI3tPNDctGsh2zpMxNRESMisQG1qIjg37doAbI2zRJhZWVPLGAnZqSZyrYmsawOwwle6bhLh9GL3gEp8R+RaEzlV82CFzGkiYSVQDITsJlBtaLXFbW62tbsMcfRuEmG6URNZ1aZ2DcNf1yZ5JVlFpOEykUVlai2RK3nxdSVQnCyZJXKiKA\/mLBG2uK2hSMhQoKwls0TaJFC8mht6J+0kERjU2RKBTVajslCWCCq2nZuGvi0uO0jdQSLY5GcrUFrrigjnJGSo2JbIAo8cScjO3JJ3j4hmUU4CFSmuFiRQGGuDQhZqaNHcdDhXEbnLfsQcJcKEISIvGCbTQSIYM5MQkcRG3QARuCZekEhuhJtEtB4eMBar0cQ4GYyi6\/Qw3AZjTvIq6mYQTOGjXQvnKz0MndQRzuQi+BoWTh4+MHYfJvRbaLhKZDVIv4LxSjt6rhV96eg3jiP3ZuSMRH7nGP4ONkbLNSKcJ4e881XkS7DAjhFBb\/114GrMMSI6iY7dr+IYJa6JFot2Vazpl7A7xNopIn2dfUOwEF3pFJEzi6\/t7+Dq2Iyc8aXzN5AIx96znxWPvgMFC363iJhfP\/2P4BSRvNVsNb+HVu4QkcGvrdMnGPyniLgQif3Vbch7LJyYEV00SUFa3wN8t1U8iCT6+zzYExarghupVrpOvv82uAsZPR4eHh4eHh4e7sEutNys3vD7wNcCVOXISP44z\/CnwAhetg7LXhEJ8XNXsFyasp2O+42wMxqHc\/mmzAP\/oO0guInXQbAumTE628PGu7wr3MLl3fQ4PlPm2A9Gw8Rg0otMuudgVJcF0lpmN1LQjiOHqXCZ5cFgnlRpVBGWdbElaBDyOoulvcLNPi2Nw9KF53LX16ohEYaOzzJ7HKKjdBDfUiz1OTj++5vyN\/V97v5QWLApze6PcfA1O0WOMmWKumgCl93BuCvf3uULbufPlBjC95vyprb2BebtCpZsWN+XZcLQ0WBQYhgQS7bBFGekigQaERGKVtFUXw9L6+FVig9it0pJlGD2ahlsKQ\/b+9nadTBwFWVWVaEdxZmyc6CSVhXE\/wosphNcBdafOgTBVGNhLWaS5iAYZwm26cWvMFE5nBexEfCXLYV0uyYFllOBJwffNMJo6h2X83kZm6dkE57xuZ+nI0w\/4GZHbau2GiN8gzR+m\/uNxYNyxUQTUybHjTBsDJMhpoIG0F400aRJ2QrTTthIB+HFKNNbYN2kcHEwXIP1GMYS\/itXDfiwsY2YYb3GbBEuRqPVc+ZCHodY2AhvwvVkjkejpZV2HeUUgXEPjuFkg1LKy3IDLPfL5b4U5RI8zOB0OOwLeKgma4DF5lp2QZ\/mQk8OmBvT6ZUUztWmSFudNfH9cHuuzLETzAogP+kH4+IZJly+lPBsJ9K2C2gfrWiZ44BSpN70FjsbvmywZ25gCSbhW9k4GPEXWI5BF3yp03pBzpNBcAaVe8FEkvJF4pOCZxMalC2Mgtq9GLTvQUEZNEN4auaTojG\/hjyOKRWKmJSDuk15ExS8WAPEbW5DM5UZYhUhhkWalIYhjzKNJToobhnkEXuDrRhMjOL4KrQnIkYZDJUZVGY10zZeMKdYSR2ncI+nDrpld1zfwtCQiMhrTssdbHoLuBZORCrzK+23aPCYFjetPA\/JllJiUxk\/G4SO4eig9indBcS6YwM4kfaTWoJE4mpGcEhxRaT3ngijhKNPiMCcrrctaVf\/oHCg\/hzr1WHCLkhWf2ED\/zFxqYBLpthuh6ie8Hv9IHhKSSoid0O6EWk9mBHxixlhdG6PFSHAOYRIRJFm4BhBsmZlGsDCBmUqJXOMHgTEU2tjzn+eiP5IR6o8ndNnRGA3yWAfxuJu0Qko9QdDT+k7yTp8adjPTH9LSx\/MTsYiYtAbRKswzzjFD4iQvrx17KjsO5vF8wkRKeLhJuzkfazWSjlMMLdgkcBYTXcvS4qygTWN9bTYe36F3mfojWuGP08EJGL67l0s+RGUgA+JcJNdZ8HsOu9G+L4Os8o4rgfAqolhmpnJGL7GksMILZvmpttOg3wz7Ebq\/GeIyHdEMPYdl1NvO69sga3HRMD+mBLoLyVWMSYiJPVonFoiWTcExw8voD4h5fqYIcxDzyQCFnh9u4r7Njim39ZEypqItolfF3Nfak7Hs6CKIn88IxLLzi1fbCWIRUAJi5RLAt9i+S6JMLd\/k8Qp1QiVXZC+HvYmizCePLXcIiKV8QQ3UROBQU0Dm4B3A\/qWKr\/1jgh\/nREacq5objS\/GVRu4PnksgBfqLDZF3Pqjv4w6Nhfxkf0JBH0qdVuAv1yPTtaiSXK1t0+g6NFXVmhuNzNSO1SaaG5MrSgx\/tWRDSGB3U3DcEobSPoXjuU6oMbt7ao7zHuPmd+Mdq9qGak8Uqk+n1Kt2XW+aJrGx3tQy5QWSRdsYOgfQzq1RYHqckPDqxnoBjCfcemXJ6wae+KwndNYFVMubFE5Jk9CeofrRtUMh\/gs73djJsJmJvbwYlWBiwLujhNRAYBram4TXKHpSaWrUjWGBpARXOTVZWdbH1SMJ3htJOYTdOJfRornD+4H7ieBRKRz1gtzL0JQlzFJuV0idZc3C5xUYBxPCbwS+CgExViIV9buk1muNQ0DGt5SzXFNSzsmmyubpnA8ja5zvqYJU76plHdVlUu3\/kWBkErzFEXe4vtFKxE+Vy9Yx3DL24Ui5dpLwIneNX1MQ8XR5iuZQzrdcFhM5WDX7AVM8mOXiVsYaR13Vuuu3NOpSn7pY4ujTxbY4+INrsGdIdy\/sgVVfIKEoWkuiyedzoxPKW9Vh+O8jcAXgn3U3nauSRYCWEw7dU1rZUxzUaQNrbbcBrky6h+ZFx2QYHSfno1aMFhFKN+ukUxw4rf01l65ejFg+mJLBGsQFO7qqZ1Z+Uwql+ezmYnjfwG0+cqN3Pa8cH+DoY5HBZlmb3ub7A2fNY8tdub3UQn+rWgLJd6uDztjsBD4w0Op0Mp6SSh7O33zRjlsdkaljEaYg1TVNqbaq2Loro\/eHZZ7Pb7eQTiFbWalzJ+7gACHhMet4NbwuMEY+S98cCThuQF93\/6vuwnbvMS2hSSrN3a2t5L4KEIiD4dOmgs4GpMRYRpPGaoSHHbm04kbO9nQe8\/NNVks+pZD1ijqlcFe9+exlNVb16VZ711wBMgvKBth9uQGef301wfPzFb\/JEc6A9\/beHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eEW\/gdm7i8TWloasAAAAABJRU5ErkJggg==',width=400,height=400)","4092d263":"# Data processing, metrics and modeling\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom datetime import datetime\nfrom sklearn.metrics import precision_score, recall_score, confusion_matrix, accuracy_score, roc_auc_score, f1_score, roc_curve, auc,precision_recall_curve\nfrom sklearn import metrics\n# Lgbm\nimport lightgbm as lgb\nimport catboost\nfrom catboost import Pool\nimport xgboost as xgb\n\n# Suppr warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d535c6d4":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExQWFRUXFyAaGRcXGRcdIBsgHhodGhobHxogHyogGh4nHRkdITEhJSktLi4uGx8zOjMsNygtLisBCgoKDg0OGxAQGy0lICU1LS0tNS0tLS0tLS8tLTUtLS0tLS0tLS0vLS0uLS0tNS0vLS0tLS0tLS0tLS0tLS0tLf\/AABEIAL0BCwMBIgACEQEDEQH\/xAAbAAEAAwADAQAAAAAAAAAAAAAABAUGAgMHAf\/EAEkQAAIBAwIEBAMEBgYIBAcAAAECAwAEERIhBRMxQQYiUWEycYEUQpGhByNSU3KxFTNDkrLBFiRiosLS4fAlNILxFzVjZJOj0f\/EABkBAQEBAQEBAAAAAAAAAAAAAAABAgMEBf\/EAC0RAAICAQIFAgUEAwAAAAAAAAABAhEDITEEEkFRYSJxMoGRocET0eHxI2Kx\/9oADAMBAAIRAxEAPwD12lKVxOgpSlAKUpQFf4ivWhtppUGWRCRn19T7Dr9Krb\/iNzFy4mCnnOqLcIMBdR31Ic4fHwnJBOOnSry9thLG8bdHUqfkwIP86ztnxk\/ZYXfBCSLBcqQPK2RHq9sPpb5Me+MaRGc+IcRhtbqCNTu4KyqMs2DjRI53JIYEZO5DMe1d8nGGnkeC1YIYxmSd1JCZ6BUONRODudgB3qqHiZLa9ubeUhVdwyy4+EmNdn9QNhntjfbpMt5DJLPC80Un2iHCPCMaQuoEN5mAOJMjffDdMVaIdx8Ri3DR3ZUTIAV0AkTBshSi9Qcggr2PsaiW6JHFEX1W9zLE0jTHbzoFZw4Jww8xIU9FU4xgY+Wd5EbuS5usRZIjtjKQuUXOplU7jJOdR7MAO9WjW7MwErwz23xZcKHVl3U5HkcZHXAPz3oCkS3uJZbSS6lkTnBwYYneNVxGXT4WzqOCTk9cDoK7rrictny3Vnu7eY6UDEcxXI8q68eYHceYZGD8j1ca4hNcPby2sf6uKTXzZiI0cnygLqIYggkZA77Vyh4dPIzxmS3idblbhY1bmGPY68rhTux1dty3SqCzvW4gIWZTbB9JOgLIcbdnL4JHuuM1TcN4aEghvYJzHK6qXErkxzMequTupLZAI6HoK65pLifnWVujK+f189wwDEHbZVzhSBgadgPTOameH+HR8iSxa7hnUg+RMa4znJI8xJw2\/TY\/hU2Ba8TkaaRbfJjXl82cg4IXOFjDDpqIbJHZDjrmoHDJzbT3FrDBJKisroFK6Y9aAshZ2GkZ8wG53O1UM\/iIC45lyk0Q5S6k0FedJEzMmMgFU8+rB9AD73vDbuGUQr9qTXKxkljjI1SOwBCEjzKigacbZCgHbOVULLLhPFpXlaGeHkOF1oNYcOucEggdQcZHuKjT37SjWJWjhaTlxCIJrlIJDNqYEKgwx2GdKFs7gVQeJ7DFyZrm+W3yCqJGHZxHuMDG4yCcnBGSeuKnzzWLWcbxxi4SBlhRZNYALFVywIweoOdJ74pQsjWvHW+0zQQNcXCEqokGJOXgNzCpxjJOFBbyjGdxsezj0VtHDNzlijlKfqQWMk+rBwzPknJbT0JA33OdrHVd27EyrC1pghlgVlMY\/b09SAOuDnG4G1VUXCIPtitYRq7R+aRncmIagdIB3YydwQcD+VBf8Iv44rBJXl1qkY1vnUdWN19dWo6cHfoKiWPGJxKr3XLhhlRjHGT5k0AOWc46lScjO2BsN6zZeO84hDoDJrOq4hOdnhyfN2bOAM\/Ppmr7ilotzdiWUgWtoDlmOFeTOWGTtpXCg+4I9cShZNW8uJvOrpawscRl1DSSZ6HSxAQHsu7H2qNb8Zntkla+aPZtMIUYaUjuACdjlR023zXTDxWykmM7rM+D5JpInMS\/wYGE\/iIB96r+H8WikmMwliNzMzBGlPlgjDaUABxqkYEHAIySewOVA7oXIg+0uJYrsnWZZVZUznaJuywkeUZwASD1rYcOuxNFHKoIDoGAPUZGcVTzQC7ZraQSNDF\/WOwKGWT7qjAGVG7EjbOjG3WT4ct9AlVXd4hJiMu2rAVVDAH9kOGA+RqMqLelKVkopSlAKUpQClKUApSlAKE\/WlKAznC4WvE5twxAyR9mRmURkHGJCMM7+oOB7d6p\/FPD4IIiZFSFGbaK3J1zYOQGY4UKNmPlOD0Oet5xUo4keJCJ9YhR1YoWbA3Yr8SJkkhs\/A2BWRW32ne4tZLx4GZZJnnKrhd\/KvUbEHAz1rojLLjwvY27x\/abOJWmZtLCdyeUfvHOkk56+pz1G4qRwzid4Y3u52TkRq7COJd5NORnLZIXbI3ydu3WNZ8FY24eC0tlEqBsNNMXwwBALaQenbVjrUzw7E4ihUqVltwYpoT95GPxY6HorBhnOHWowUHH+BT3T288jKrXDqgjGTykKlxufiIUMTsNzUTx14aitWhkiT9U3lZcndhv16jUufwNbqyjjhWFZiAySPHBqJG2plQD1PLAAJ\/zqLexgRqsyu2i8LLhWYnzNMmAASRg6PyqqQozd\/xe5NzDGLWOGd1URFyz8tTkAqpOiMjBz5c4G9WvEvBWI4zbPi4WTU07s2WyDqORnvjYD19TX3xGUjvLO7lk0EkIImUZUENqdmDEDBcZ7V3yi50i0VDpaLV9oU+VnLh5AGHwqQWAzgml9gdWJLlXAYR8QtDp1rgBwdxkd0cdj0NVHC\/F95cSCGKGATN1cqwxjqWGdsfX5VcXfi8xcRNs8aaNSoHGdQ1qpGfUaj7flVdFwvReXkGSjzlDGy5BEbOZJipG4wFK\/PFPcEq5e+ikdLlPttrp1O3LRdIxuVG2SuD5dzjB2zU\/gXha0jlW7hZihXKAnIGofECfN8JIwemTXy7S4dHDale6PKjjySIYgDqdu3MK6iT66VztXel1r4fKbaM6VR44QNywUFFYD3wSB3x71AZ7wnerM3ELmRObkA8vAJKechQD7KBj2qRx3h0NvYMlszEXM0bRZOcElWXSeuMJ1OTvUTwT4euYHFzK4t4wPMr4yy+jAnCDODk7jHSrDjHi6xj0COMTmI5TSMIh9mIx0O2kH6VXvoToSuHx3lvNJz5w1nGoJeYLlvICdON\/iONyemNzUTwhMrRwxWwwvMaacj7o1Nyoyf2jhcj9lD61XyeJ7S9kRLi1mYk4UJI7Ae+hSuT7gZxVvceFLdCcWfMQ9OXM4b6o7KDj2b6U9ykGW7srK6luGkaaZ2Y6IgMIGOSCc41fM\/Su3ilkOIItzFMwiVgeTONEZ3GcMPXpq825IyKhcd8IRW0sE6\/+XMyCSNz8ILAZyeq+oP8ALpoeI8XWS3nATVGwMMCgZMzYIbSB1QHAyP2WPTFPYH3hEqxuqcu5t8nHJ064cnusgBCDPuo9qyfjK1t5Lnk20JWVTqmdQ2kDbJ0DOcatRZR+Pa18OyTQ2\/2e6MtrhsxTnGkb\/Ax3XGfutgEHGxAqw8R26lbaaV3WYPoR7Rcs5YEgLnoCFJwcjqMnO7ZjodFpZz3EQX+kBNo+OOPCah+y0g84JxjOPp3rTcLnRowI10BPIYyMFCAPIQNhgYxjYgggkEGq2K5mkQrBOOYo+G4gZWPzGVA3+8FIrn4TSUw86ZtUk+JDgABRpCquPYDf3rLKi6pSlZKKUpQClKUApSlAKUpQClKUBmU4pHarJFIpaYTO0UYHml5rsyFP75Qntg+oz2iybkm1ZhzrgO8rAZCBzhyB3xqCL64z2NTF4zbuwK6pSucOkMsgHY4dUI9tjVNeXImubqGMsJHswEyGQ6laQkDUAf7Rd\/n6VsyQ+HT3Bd+GTQR3CRoPMWKZQadBOxyd1xjByOu2arfFc01o8DIJ4yhOjXIsiYOCyBvjI2Hlc9OlXl7xuOLioXdtUAjcqCSraiy7DfoRn+IelSbfgMjKba6\/XW6sHil1eYaT8Dg7nIJGRnbO42xbBnf0jAzx2tzHlo5F0hfRmww29TuD\/CKu7+Z\/tdtZC5kixB5imklmGwGpgd8KT\/71Ni4xFI1pGyKEmQyRg\/dKMpiwOgyuSPcAVSf6Pfabq5nldxIkuEijIRgFwI21t0BABBHfO9AdFx4XiupjpupWlRgJEuB59Gdyuw2xnBAI37Zq3uOAxq\/PtrhrSJCwmVDhcp1IB8qkYOcgjpt6xp4LqeRIzLBHPE2tHyGmC4xhwg0AHO+4DY6VKmhitrNuexuDFMXlCYw8jNqCuOygupwdtgfalgj+I+LXC3SfZ4FuFSFZDmPUw1MwyGHmUkL2HrtV1wTii3kTSKpikXMZ1AakOAdj3G4PbpuKzXhfi7yvNcrFLNcSHToXCxIoxpBdts\/idzgbnN54f4xO91cW9wIw0aqyiPVjB6jJ3OzLvgd6jQRSX0XFIrcWoQSA5UzqzOxDMeoPmXrgtg4Hcdau+OcYj4bbxIq6zjQi5xnSBlifTp9TWY8JcRuY+IfZHld01OpDkt8IYqQTuOg6etXzQpPxZlkAYQW40owBGWOS2Dsdnx+HpVfkIhz8SN\/w3zhVkknWJQucauapBAJJ2Q5PyNWvFOBW72b2yYUQjII6o4XUGb3IO\/qG+VUHFOGQRBL61Y8uGYNJDvhTrCvhT8D9AVPbHQCun\/SGKWJ4UJEl3dkMDsVjcquc9N0wvX19KV2HuV3hO5uIPLDahppF5gkfOeVsPKuRqGd9jk7bHFW\/inxFaNAUbTcXIBUPyWTQT1Yat0I9ATuBVxeyk3EnNASCBkWORPK8LFFYPn922rQc5AwMjGSI\/iLgqS8RtCFHmDPLjusZUqT65J0\/LHpS9SFfw\/wqOXFFIheedSXkcFhAmBkLnbmHIA9CSei78UuYFtLSW4EsjIzwxclihZQxXVswPRQux3z71dfbri+aWKH\/AFeFGMckh3kY91VfubdzvuPlXZZR2USpKGJS2LQKzbiNtXnc4GxO2X6AY6ZNL7logzcYeUpZQ20kHOU5adeiYOtgmTqOM9T1IqtvPDcVtcqwBe1VA7AyMChLBDIpUjJBIY+2fQVL8S8XntruO5khUwqjJGyPkNr3BLY2OwOMeuCaSXLxfYtMUlxCbUpLpjZgwbTnbHXK5wexI70BaSSXaXgtknHLaMyK0kethpYKUyCurrnJ39c1oLO35capknSMZON\/fbaqG0vo5uI5DYMdthVYMpJd9TeVgD5Qq5+ftWkrLKhSlKyUUpSgFKUoBSlKAUpSgFDSlAUBsJLZWSJWltjk8pGKyRZ3PKbI1LnfTkEdielUdxPEyxzfaL\/GsiEmNWKthgwHk1OMAgjfoetbwVlOH3McVrbzvlmi5iJGoyzSaihCjqWwrD5Mx7VpMjIvApBZxtIsZukdiTcwYZzk5xIhOpSPYn1ODmuPh\/xFay3KRxrc6mLEPLM53Ck40ayCMZ+uK6uE+F5cm7S6KGXMmmBc51ZbT5jhsZxgrVm17brIklzA0bL0uZliQlvYK2pjg+mPlWnRDPeIryzurhgzTwTREoJAutPIxGdKnUBnfIxU+0tZLz9RdzxyRiPXFLCIyXAbDEuVJUjK5AA+LvvU7hPAEF39stbhXRyxkTZvj3YBgdvNg4I7V28T4POt2l1AkJ0k6lXKO6kAEMSdDkdQTjsKWKO2zsZbOMJbxwSp6luUxPYscMrk+u3yqj8N8PvY7mX7TAWhuSeb5kYAnJDYDHbcr8j7VbGwkuLe5tXieNNjCZNO2fMEOktsjjGR90gdq+cGsfsCrCObczSAtpUgKqrjOA7BUGWAz1JP4SwdsdpBZmJWYRwQozK0hHmkkJBI7syoGGw6SCs14a4ssvF5JFzpmDKM+gUEfLaPpWkuJrZ2Z7u2kjJTQWmTUiqMnZ1LLHuc6sjtvsK6OGeCYYp47iGV9KnUFOlgQQRswxtv70vuCR\/QJHExdAeQxHJ2+PATp7rv9DVbx3hl6nEPtdrHrBQBhqQA7aWUgsD0AOR7elazil8sEZkfIUdWCs2n3IXfT6msQ\/GbqeNZWlitYZQYsszEMwJGuMAB4yN+rAbA\/MrDL2Xw+tyC7LJbmUqZ4cowk0NkZxnGcfEpBI6jNVfGvBLyzyXBuEiywK+T4QoAXfUMEBRUa34QGu2W4vHlWCEa5A\/L0sz4WMvqJ6AnrnJFamDwxZrvyEc+smZD+Lk0uhVlLxfikcsRt5Z4stgSPbEyO4HQCMKdBJ65JAGfXapsY4Y3X9Xd2y4KxXczMNDdhoxywh9DsfbqPRoolUYUBR6KAP5VXcZ4oIiiaVYyaviLAYUAnOlHJ6jtRMUZvxLwWeWAzO0fNTA5sJYcyMnB1r6rnVsSOvTNdvBrNeHK6hucpnWOdiCojDINDBckEfrFyff\/AGamWs1pPKsTxxLLjWvKkBDaSMg6dLEjOdLrgjOM4OJvFLNg7yLHzo5UCSxAgE4zpddRAJwSCMjopHTdfQUZ684xKrSWmYrNISBzljd1wcMoUY0x7MDudu1cbOwmSUGWSe9SVdUckNw6Y0\/ENPMVTsRtq7H3xc8K4XOA9wW0zTktJDJgx4zhE2GVYIANQz3yDtUR7O6126RWkdvHHNzGZZVZcEMrgLgEAhj29KWDhxviEJiMZjuxMu8LtFIzq+PLpffO\/Xc5BNanh8rtFG0i6HKAsvo2Nx+NSa+VlsopSlQopSlAKUpQClKUApSlAKUpQCqFEtLWZ2aT9azMwQksU1nLBI1BKhjuTjf12qZ4ivWigdo\/6xsJH\/G5CL+BOfpWQvOZHyYJFms4fMZ5oSW5jY8rGUAtuc51b7\/UaSI2X0DWzS4huJYHkJPLAKBz1JEcqFdR6nSMnrVdc+HCb8NMzTo8Tcoy4IWQYOkgAKRjUwGN8Hbauri9\/ByYljvI3CzxEIpT94CSxJL7bnOR+Fam8vrV0KySwFD1DOmP51diGXv+H2\/LVERTFaoWmuEAViUU5jVxuXZt26gdOp25cN4HLHaqWeZppFyXa4kSOAEZyQHBYgb4wckY2FWl1xOCaJra3jNwrKUIi8sagjG8uNCj+HJ9qruMTx8t5rh0uzEQTbQuojjycAsuSz4OBlv7opqCu4ZxRlmm5L3l4Fj0RnLMhcjzOTnCgHGOvf2qysrm5ia3P2KflxQtG2GjZmzoOcavVM\/+o1aXt26TW0aOqRyExOiBcoxiLoVONvYEem1Uh4jdNbxNqlZOXKkjRaOaCkhQS6WGWXA6KRjJ36VQa3hnEo7hSUzsdLoylWU91ZTuKy\/hAMt5MkZ02rIZI485AzIUDAfdDaXbA7FatLG4X7crocpcWiuD+0UYaT89En5Vn\/Bsj28863GQseIBIcYQKWZQ3dVYNkMdu2albgsv0guRHkacqpOVm5ci52yF\/tEOMFepxt7VnB4Yhw+31IjxtMeYswcsdiDyAu+rC7Ae\/ual\/pIlTQFZrfJTKh0cydeqOpwv1GPeuPAObJwleUC0sbnRggMNMuo6SejaCQPniqth1M7ZW6lVWQyTrLFhIodtLxqRGkhwMsqk7b9DkHbPonhS6WS0hxpBVAjKv3WUAFSDuCMdDWUubO40rG5kt7MuZEZhqkjYZYcxlzoBcltW+BsSKu4LtYrtWcaefCgkIwVEmorGzMNvONQDd8AUlqEaasda30st8gDGKQBuZG6ZCxAoVQHG8jg6yytgbDfArVX10sUbSNnCjoOpPQAe5JAHzrG8ZGqwluGUCVphLy8k4ywtwh0kEgxqVODvvWYlZ2+ILrncPaVz+uyJYcdUBlCxaT7r37kmtmmcDPXG\/wA+9eeeNOCSJA0zyszMEDjUiRrp+BEjALNgscDO25Najwhx77XCWICuh0uB06ZDDO+CPzBqtaEW5eUpSsGhSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAp+Nea4sk7c13PzSJsfm2fpVDBxa5EzQGVlE05MEmFYiNJHWVcspGQEBGc7EVdeKNaci4jRpORISyL1KMhRiPUjIP0qv4VxXhhEeiRUMbMyiVnBUuCH3c751HbJGd62tjJ9seKxzGAy20Wm5L8s+Vmwm+XBQDfHY9x9I\/A7q2uJ4hFbwIDG7SI0Sa1ZSgXfHwkSZBxvj5iuXDo7SF4mN9E6wIyxKTHldfUkhvMcbdBXRw7iNjA0RWV7ieOMx5ijYl17KQBg6cADftQHZcXMrzPBOJojIk0UIULyWDA6SGG4fCg7k9\/hziuK2BkUy3ANshshBK0mlfPkHIGe2DucdsVJsra4di0Nv9nBdnD3Ls5UuSWKQA6UPmI6jqetXNrwJAwklZriUdHlwdP8CDyJ9Bn3pdAqLVo2DCG3lu9ZUtLMFRGKDShy4HQdCifjUfholuizi1tU5ZMOHeTK6M5VQq4UebtjPuMVs6zUvDXiuJn0zvDNh9ELhcPjDlhqVjnAIwcbnPaomWiBDxCRr22DwLEI3lg1I+pW\/Vg6QMAgDSPzHY1ecT4eskuqKQR3KIM7ZDIxICyJ95CVPuMbVH4bwvMkb8kwRQl2SNmDOzvsXbDMAACcDUSS3bFd0A\/8RlP\/ANtHn\/8AJJiqwZribzIDb8lY+YCqwyYeFzj+wk2MbdwjYHTGD1sP0ZPi2kiOQ8cx1KdiuQuMjtuD+Brj+kZFaMDVPqUalSOMshIzhmbHlI3+9kDsaz\/huS8mZruNxJLCFRoyADKhycFh8TbbE77DfbBu6M7M9RrO8E4bEyXcJXymZ4yuT5VAGgL6DB1Ljpq26Va8G4pHcxCWPOOjKeqsOqkdiKqOM3Rs7n7SVZoJUCTaRnQy\/BIR6aSVPyHsDldjTPhiuI40S6lSUGeFUKqQxAkDZcnYsdI2A9dzmq\/hEZuPs+WAijhjnlBHVi7vGM9AAcsfYD1qVf8AHbe5ktEhlDn7SrkDVkBUc75G2+Nq4cWhWGNbWPVPJJOrPGuM8sMDpPZECKqDOAd\/eqQn+MrYNDqKRnSD+tlOViBwCwTfW56Lt179jjf0XXem5ePtJH+anI\/ItWs8akFF1ImF35kzfqlJ2\/qxvNJtsukjf3xXn\/hN+XxCHc\/1hTzDSfMGTdfunfp2qr4SPc9lpSlczYpSlAKUpQClKUApSlAKUpQClKUApSlAKiXnC4JTmSGNz6sik\/jjNS6VQVaeG7Mbi2h+qKf5irGGFUGEVVHooAH4CudKWBSlKgFKUoBVLw4ob67KnLCOEOPQ\/rdv7uk\/WromqrhCxSu15ETiVQm4wCI2YBsdd\/fsBVIVvjYBl06L1vKf\/LZ0n2fsfw6VQfonm89wnqqN+BYf8Qq28fXMKAcx7nWV8qROyoeu7HBT59TjtWG8JJcNPy7aTlu6kM+2y7FvrsMY39xW0vSZe56JaypDxOWIMFE8Kyac\/wBoGKnA9Svm9+taC7lKI7hS5VSQo6tgZ0j3PSs7beB7QLiUNNI3WR3YMT7YP\/8AT7mpfhxGX7RbO7SLDIFRmOW0PGrhSe5GojPyrLo0irAF5bvK8rFlVni5eqNFZVIzH0eTTqCl22JOwHSr\/hypHaqYhheWGGFLZJXOSF8zkk59TVHPwK6iDCKeJgw0KZQytg+VFJGQQoJCqAq5OSCak+FS4ge0mGJYBoxqI1IQTGwYbhceXI3Gn6VWRGM8RX7Qyffac5POmZS6A9o4gSLcemfNj061X+CoC99AOuGLn\/0qWz+IFdniLhzGUmJA6gHPIhcRr3+PrIepLn\/oO39Hc2m+jH7auv8Aulv+Gt9DPU9epSlcToKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSsDdXEge34jqYiS4MenJwIWOlBjoMhC3zYegqpWRs31Kj3t\/FCAZZEjB6a2C5+WetSKFOM0oVSzHCqCSfQAZJ\/CqO04vPcIZbaOIxb6eY51SY9lBEee2rJ9QKvqxnBpIrW5vnk0oTKFSJANTDTqXRGN2LBh0HXPvVRGWN9xiWWWS0tlRZUQF3lbATUAfKoBLkAjfoDiuHgfXFG9nKAJIG2x0ZHyysD3GdQ\/Cs1wiyvP6USeWF4+YzMTjIClD5Sw22GBg75ArTeJ2KkXUBJktWAlRSfNGQGZCO+FIcZ6b96rXQnk6PFt82vlJeNE2neGKFpJG9wwOV2+XzrG\/o5bF8nujj\/AHSf8qvfGJInjlS4MNvdxhXkUEjyglcgb7qQNsfe7ZrNeB3038HpqYfijAfzrS+Ej3PU+JcNd5Ypo3VXjDKA6llIcDJwGBDbdc9Miu7hdhylbLa3dy7uRjUxwNh2AAAA7ACplK52bKbxQx0QAdTdQj\/9gb\/KuHiRWiKXkYJMORIo+\/EfjHzU+cfI+tfPE7+eyX1ulP4I\/wDmRV42Ohxvtg9\/b3qkMz4mTnRhwWmiZQwHMWKEDs0j5Dt66QfoOteeeGnEd\/BhlYCYLqXODk6cjODjfvWkv4pLOb7MRG1s5Lw82FptB7qijfUM9OmMHuazd0pjvEZtYPMR\/Oqo3xA5Ma7R9Nl7DFbjsZZ7VSvpr5XI2KUpQClKUApSlAKUpQClKUApSlAKUpQClKUB8dwOpAycb9yeg+dec3FxHbgWMzaVhu1kUnO8OGlG\/c58uPVhU79KtyyxwKpxmQtkdcoBpP01E\/hWf8fXCTNbTrn9ZBvnGfKx6j5k\/hXSKMtmlvrcT6eYAHlZZbhmxiCBfOkRY7KT5du5LHpWyEqltORqwGxkZwcgHHocHf2NeYQ3VsYrf7dIzBtxDF5UjXOOZIF8zMxGeud6ReLphcXM0MJk5ulY8hsKqZC+UDfIOcZG9HGxZ6jXV9mTXzNC68adeBqx1xq6436VneFcZujEmLWeZsZd35UO53IVWILAdAcDp1q0l4jNpGi0lLns7wqB82Dtt8gaxRbLOqPw7Mkkl46EMpnAyMEHTDGp9iMg1EaymuwyzXUaRg4eK1Ofcq8rZPTqMCpXC7rh9sgiinhUZzjmqSSdsk567CrQInE7GKGP7PKM2cpwrfuHJyoz2QnofunY5BGMFd8Ok4feRGQEqsiurDo6hgTj0ONiO2fka9hurdZEaN1DKwwwPcGsqkUaueG3WZEYarZ2yTpwfIWHR0wcN3GPkbFkaJ\/BvE8dxJLggRiRI4jg5dmDEnHYHG3sD9LPh\/EkmMgjyRG2gt90sBkhT3xtk9N+9eT+I+BS2MoKs2gnMcg2O3Y46MM\/XqO4HDhHie4gTlxEadDIoA6MzFuZju4JwO2MDFXkvYnN3PSOPpqu7Bf\/AKkjf3Y812+L7gxW4mH9lLG5+QcBv90mqfhM1\/cywzSW6RiHVu5dNetdJwuCR65xiuXjfiFyLWVTagIy6WkEisFBIGy4Dde+Nqlaotmm4jYRzpofOOoZThlONmVhuDg\/mR0NeR+K+AyWco1NrVslHPU4xkN\/tDI+f5D06z8Q2nLTNzADoGcyICNh1BNZH9JfFYJoolilSQhyToYNgacdR71Y3YlVHo2aVT8O8QQySclWDFYRIWUgj0ZdvvDYke9cV8RR8+GPI0XEQeJ\/U5+EjtkEY98j0rFMtl1SuEUqtnSwbSdJwQcEdQfQ+1c6hRSlKAUpSgFKUoBSlKAUpSgFGP8A2KUoDN295xCdeZHHDbofgWcSF2HYsBjRn5Z\/meUFtxGUlZ5YoEx1twS7fV8hR8t60VKtko84tvDV0xJurZrlhsrSXWkBfQBSTnOepxvVTH4SuefvaNy9ROgSqBjsObk9Nt+pr12la52TlMi9g9ogkhsLdsfEqOzyAezMmWPy\/Ouf+mMZH+sRXFqvVXZXAOO2QOvtjFauhGetSy0ebXfEbWYluXxJgfvKxIPyBYgD2qfwu6stPK5l\/pP9m\/P\/AA\/VjYe2a3eaZpzCjFcUtJGh+z2NoUhJBkLYi5g\/YAYh9wMFiBttR3sI41+2WS27dCDCXX6SIpDbepzW0oRTmFGdM13csGgc21uBs7xqXkPsjfCnucE\/KqVPCl20zSzTNI8bAxsXZVdSDkAodcJBx0GPnW8pSxRUpwhJbYQTxnHoZWkIOSQRIfNnfb0G3Tasx\/8ADYB8rcsADkeQah6eYMN\/fFb2lFJoUjOjwkpGJbq7k9jMQPwArOeMuEcgQosl19mYnm5ZpFUArjC9j1O+2wr0WlFJijA2vifh9pDotVaVj1BVgWPq7MPyAPsKy3Fhc3cnNFoy7YxFE4Hc5Jxud+vsK9mVAOgA+QrlVUqJR4lZWN7C+uOCdWwRnlOdmBBGNPoa77Xgt9Py4xFIBECFLgoFBOo+ZsZ332ya9lpV5xynnC8B4qpkIZC0pVmbWAQyEFWHTBwMHbcE5zW84Y8xT9eiI\/pGxYH33Ax8t\/nUulZbsqVClKVkopSlAKUpQClKUApSlAKE4pSgII4zb\/vk\/Gvj8btwCeahwOgOT9BVP4mH+s2\/zH+MVe36RlSjYXmeQbdyD0rxxzZZSnHT0+N7Xue+WHDGMJU\/V5WlP2O1bhdHMzhdOrJ7DGcn6VG\/pm3\/AHyfjUq3i0Iq9dKgZ+QxWc4oP\/EIfkv82rWfLPHGLVatL6\/Mxw+HHllJO9E39PkaO3uFddSMGHqK5u4AJJAA6k7AfWvtUHjQNyVxnTr834HGfbP54rpmyPFic96OWDEsuVQWibJ\/9OW\/71fz\/n0qVFdK0YkzhSurJ7DGd\/pUaynhnh0pjTpwU28u2MY\/zqTZwcuNEznSoGfXAqY5Tlraaa6f2XLHHHSmmns+30RHHGbf98n41xl45bgE81TjsDkn5CqfjA\/1+D5L\/iarziMMbrymIUyZVdt8gZ\/LGa4wzZZ86Vel17\/c7ywYYcjd+pXutF16HZcX8aY1uq6hkZOM1wg4nC7BVkVmPQA\/Wu25tg8ZjPQrp\/LGaofB0xHMhb4lOf8AJh9CB+NbnlnHLGDqpfjpuc8eHHPDKau4\/nrsXM3FIVYq0ihh1BPSvrcRiCBzIoRjgNnY\/wDeDULia8y4hi7LmV\/kNl\/OrfFdISnKUlpS02\/kxOGOMYunb1ev8df+EE8Zt\/3yfjUm5ukjGp2CgnGT6\/8AYrOeEB+tn+Y\/xNWorHDZZ5cfO6\/p13N8Vhx4cvIrdV17q+37kH+mLf8AfJ+Ir6nF4WZUVwzMcALv2zv6dKpPDij7Vcbd2\/x1dywo8q4OHiOogD9pSBn+f0rGHNkyQUtN6+j169jpmwYsU3HXa791p070jvuryOPBkYLnpmo\/9MW\/75P7wqdWW8GoCZ8gHdevzetZcs45YQVeq\/lSvuc8OHHLFOcr9Ndd7ddjS29yjjKMrD\/ZIP8AKuyspfxiO+iEIwW06lXpuTq2\/h3\/ADrV1vBmeTmTWsXXgzxGBY1GUXpJX5FKUrueYUpSgFKUoBSlKAUpSgFKV8c7H5UBmPFS5uLcHvgbfxjvVo\/BlDRshbKOGOp3bIwegJO9VV5BJM6SM6gp0whx1zvlqnNdXH7xB7iM\/wDPXy4KP6k5Sju01t0XufYnzrHCEJ1Sae\/X5FxDMrjKnIyR9QcH86znFP8A5hD8l\/m1WvDYTFbAA5IDHJHU5J3Gf86p57eR5VmLqGXGMIcbZPTV7104lynjhprab\/Jy4SMYZJ66VJL8dDTXEwRWduigk\/SuqSdDpRt+YpIBHUAAnP0NUt\/zpUKNIoU9dKEf8VSOK2xaW3VXKMquQwGegXt3FdZZ5atR007a26fXscY8NFUpS19W16UrXTuQeL8C5QM9uxXTuVz0HfB9PY\/9KuuCXpmhVyMHcH5g4z9etUzXk05NuWRQdiwQ5I77atqvYbcQw6E+6pxnffc5P1rlw0YrLKeNVGtV58I7cVKX6UYZXc70f+vl+5n+PRhr6FTnBCjYkH4m7jpVuvB1WSN1LeQnIZmbOVI2yTjeqm4tpJJVmLqGXGMIcbEkfe96mtc3BH9Yg9xGf+eueJR5pylHd2tv3OuXn5IRhNKlT36\/IuYZlcZU5GSM+4OD+YrNXn6i\/V+iy9fr5T+eGq74Nb8uFEznGd\/XLE\/51C8VWYkjU5wVbY49RuPyH4V34mM54VOvUql+6PNwsoQzvHfpdx+XRndwca3mn\/abQv8ACm2fqc\/hVqKjcPgEcSIOgUf9T+O9cOJTuoGgqCT94E\/yIrvD\/Hjt+793uefJ\/ly1H2XstF9ij8If1tx8x\/iatPWWsIJIC7K6kv11Ifc7Yb3q+4lM6qChUEnHmBPY9gRXn4NuGGpLVX92z1cdH9TPzRejr7JGc4NarJc3AbVsWPlZl+\/7Gru2tFt2lkLYRgvxFiRjI3J3OSRiqmytZI5HkWRdT5zlDjc5283rUm4WWXSryLp1gkKhGcHpnUa4YFyQ+D1W2tut+fJ6OIvJP4\/RST36V48GhFYvw3ZmTngSOhGMFWI3OrqB16fzrT8TndQugqCT94E\/yIqj4XbvAWKup1kZyh7Z6ebbqa68UlLNC1aV380ceEuOGdOm6r5PXoPC0yrI8UigTZPmO5b1GT+PuK1FUfiHhQcrKraHBxkDr3HcbjHWp\/CpnZTrIJBxkDHbuMnet8KpYm8Mlts+68+TnxfLlSzxe+67Px4JtKUr2ngFKUoBSlKA\/9k=',width=400,height=400)","2b178e01":"df = pd.read_csv('..\/input\/hackathon\/task_2-COVID-19-death_cases_per_country_after_fifth_death-till_26_June.csv')\ndf.head()","d662f986":"df.isna().sum()","eba4d02a":"# Lets first handle numerical features with nan value\nnumerical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes!='O']\nnumerical_nan","540357a2":"## Replacing the numerical Missing Values\n\nfor feature in numerical_nan:\n    ## We will replace by using median since there are outliers\n    median_value=df[feature].median()\n    \n    df[feature].fillna(median_value,inplace=True)\n    \ndf[numerical_nan].isnull().sum()","1375e84d":"# categorical features with missing values\ncategorical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes=='O']\nprint(categorical_nan)","a429b475":"# replacing missing values in categorical features\nfor feature in categorical_nan:\n    df[feature] = df[feature].fillna('None')","baa99d3b":"df[categorical_nan].isna().sum()","f8c6205b":"#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","ea1450ef":"import seaborn as sns\nsns.distplot(df['date_fifth_death'])","b75ac578":"print('skew',df['date_fifth_death'].skew())\nprint('kurtosis',df['date_fifth_death'].kurtosis())","14797cac":"import plotly.figure_factory as ff\nfig = make_subplots(rows=1, cols=5)\ndf_num = df[['deaths_per_million_10_days_after_fifth_death', 'deaths_per_million_30_days_after_fifth_death', 'deaths_per_million_55_days_after_fifth_death']]\n\nfig1 = ff.create_distplot([df_num['deaths_per_million_10_days_after_fifth_death']], ['deaths_per_million_10_days_after_fifth_death'])\nfig2 = ff.create_distplot([df_num['deaths_per_million_30_days_after_fifth_death']], ['deaths_per_million_30_days_after_fifth_death'])\nfig3 =  ff.create_distplot([df_num['deaths_per_million_55_days_after_fifth_death']], ['deaths_per_million_55_days_after_fifth_death'])\n\nfig.add_trace(go.Histogram(fig1['data'][0], marker_color='blue'), row=1, col=1)\nfig.add_trace(go.Histogram(fig2['data'][0],marker_color='red'), row=1, col=2)\nfig.add_trace(go.Histogram(fig3['data'][0], marker_color='green'), row=1, col=3)\n\nfig.show()","11aa029c":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nrcParams['figure.figsize'] = 20.7,5.27\ndf_aux = df[['country_name', 'alpha_3_code', 'date_fifth_death']]\nf, axes = plt.subplots(1, 5)\nk = 0\nfor column in df_aux.columns[:-1]:\n    g = sns.boxplot(x=column, y='date_fifth_death',\n                    data=df_aux, ax=axes[k])\n    g.set_xticklabels(labels=g.get_xticklabels(),rotation=90)\n    k +=1 \ng","e751fdd5":"ax = sns.heatmap(df.corr(), annot=True, fmt=\".4f\")","2ca91c33":"y = df['date_fifth_death']\ndf = df.drop(['date_fifth_death'], axis=1)","46285778":"def plot_predict(pred, true):\n    indexs = []\n    for i in range(len(pred)):\n        indexs.append(i)\n        \n\n    fig = go.Figure()\n\n    fig.add_trace(go.Line(\n        x=indexs,\n        y=pred,\n        name=\"Predict\"\n    ))\n\n    fig.add_trace(go.Line(\n        x=indexs,\n        y=true,\n        name=\"Test\"\n    ))\n\n    fig.show()","797f2775":"from sklearn.ensemble import StackingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import LinearSVR\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Lasso \nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nX_train, X_test, y_train, y_test = train_test_split(\n    df, y, random_state=42\n)","2531b1cf":"lasso_params = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100]}\nlasso = Lasso(random_state=42)\nclf_lasso = GridSearchCV(lasso, lasso_params, cv=5, scoring='neg_mean_squared_error', n_jobs= 4, verbose = 1)\nclf_lasso.fit(df, y)\nprint(clf_lasso.best_estimator_)\nprint(clf_lasso.best_score_)","33a68bc4":"param_random_tree = {\"max_depth\": [None],\n              \"max_features\": [10,15, 20, 30, 43],\n              \"min_samples_split\": [2, 3, 10,15],\n              \"min_samples_leaf\": [1, 3, 10,15],\n              \"n_estimators\" :[50,100,200,300,500]}\n\nrandom = RandomForestRegressor(random_state=42)\nclf = GridSearchCV(random, param_random_tree, cv=5,  scoring='neg_mean_squared_error',n_jobs= 4, verbose = 1)\nclf.fit(df, y)\nprint(clf.best_estimator_)\nprint(clf.best_score_)\n# (max_features=10, min_samples_leaf=15, n_estimators=500, random_state=42)","ba18bef1":"scores = {}\nrandom = RandomForestRegressor(max_features=10, min_samples_leaf=15, n_estimators=500, random_state=42)\nmodel = random.fit(X_train, y_train)\npred = model.predict(X_test)\nprint(np.sqrt(mean_squared_error(y_test, pred)))\nscore = 100* max(0, 1-mean_squared_error(y_test, pred))\nprint(score)\nscores['RF'] = score","560b0fc2":"import xgboost\nxgboost_params = {'max_features': [10,15, 20, 30],\n                  'n_estimators' :[25,50,100],\n                   'learning_rate': [0.0001, 0.001, 0.01, 0.1],\n                  'gamma':[0.5, 0.1, 1, 10],\n                  'max_depth':[5, 10, 15]}\n\nxgb = xgboost.XGBRegressor(random_state=42)\nclf_xgb = GridSearchCV(xgb, xgboost_params, cv=5,  scoring='neg_mean_squared_error',n_jobs= 4, verbose = 1)\nclf_xgb.fit(df, y)\nprint(clf_xgb.best_estimator_)\nprint(clf_xgb.best_score_)\n\"\"\"\nXGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=1, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.1, max_delta_step=0, max_depth=5, max_features=10,\n             min_child_weight=1, missing=nan, monotone_constraints='()',\n             n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=42,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)\n\"\"\"","078035d8":"xgb = xgboost.XGBRegressor(gamma=1, random_state=42, max_depth=5, max_features=10,learning_rate=0.1, n_estimators=100)\nmodel = xgb.fit(X_train, y_train)\npred = model.predict(X_test)\nprint(np.sqrt(mean_squared_error(y_test, pred)))\nscore = 100* max(0, 1-mean_squared_error(y_test, pred))\nprint(score)\nscores['XGB'] = score","585178c6":"import lightgbm as lgb\nlightgbm_params ={'learning_rate':[0.0001, 0.001, 0.003, 0.01, 0.1],\n                  'n_estimators':[10,20, 50, 100],\n                 'max_depth':[4, 6, 10, 15, 20, 50]}\ngbm = lgb.LGBMRegressor(random_state = 42)\nclf_gbm = GridSearchCV(gbm, lightgbm_params, cv=5,  scoring='neg_mean_squared_error',n_jobs= 4, verbose = 1)\nclf_gbm.fit(df, y)\nprint(clf_gbm.best_estimator_)\nprint(clf_gbm.best_score_)\n# (learning_rate=0.001, max_depth=6, n_estimators=50, random_state=42)","09e250c7":"gbm = lgb.LGBMRegressor(random_state = 42, learning_rate=0.001, max_depth=6, n_estimators=50)\nmodel = gbm.fit(df, y)\npred = model.predict(X_test)\nprint(np.sqrt(mean_squared_error(y_test, pred)))\nscore = 100* max(0, 1-mean_squared_error(y_test, pred))\nprint(score)\nscores['LGBM'] = score","052419f5":"from sklearn.ensemble import AdaBoostRegressor\nadam_boosting_params = {'learning_rate':[0.0001, 0.001, 0.003, 0.01, 0.1,1],\n                        'n_estimators':[10,20, 50, 100]}\nada = AdaBoostRegressor(random_state=42)\nclf_ada = GridSearchCV(ada, adam_boosting_params, cv=5,  scoring='neg_mean_squared_error',n_jobs= 4, verbose = 1)\nclf_ada.fit(df, y)\nprint(clf_ada.best_estimator_)\nprint(clf_ada.best_score_)\n# (learning_rate=0.0001, n_estimators=100, random_state=42)","14ad140b":"ada = AdaBoostRegressor(random_state=42, learning_rate=0.0001, n_estimators=100)\nmodel = ada.fit(X_train, y_train)\npred = model.predict(X_test)\nprint(np.sqrt(mean_squared_error(y_test, pred)))\nscore = 100* max(0, 1-mean_squared_error(y_test, pred))\nprint(score)\nscores['ADA'] = score","456123e0":"from sklearn.svm import LinearSVR\n\nsvr_params = {'C':[0.0001, 0.001,0.01, 0.1, 1 , 10, 100]}\nsvr = LinearSVR(random_state=42)\nclf_svr = GridSearchCV(svr, svr_params, cv=5, scoring='neg_mean_squared_error', n_jobs=4, verbose=1)\nclf_svr.fit(df, y)\nprint(clf_svr.best_estimator_)\nprint(clf_svr.best_score_)\n# (C=0.001, random_state=42)","a0b13b3b":"lvr = LinearSVR(C=0.001, random_state=42)\nmodel = svr.fit(X_train, y_train)\npred = model.predict(X_test)\nprint(np.sqrt(mean_squared_error(y_test, pred)))\nscore = 100* max(0, 1-mean_squared_error(y_test, pred))\nprint(score)\nscores['SVR'] = score","1e846519":"result = pd.DataFrame([])\nresult['model'] = list(scores.keys())\nresult['score'] = list(scores.values())\nresult = result.sort_values(['score'], ascending=False)\nresult.head(10)","4612f768":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke.","a4833c4d":"#XGBoost","00a02468":"LinearSVR","ed467ab4":"#Modelling","9a1c01cf":"#LightGBM","fb086590":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRbpWXi-FoEm78_3IkAA1b5dmSou5N5Trky9w&usqp=CAU)hbku.edu.qa","3d035e81":"AdaBoost","6a634403":"#Codes from Josu\u00e9 Nascimento  https:\/\/www.kaggle.com\/josutk\/eda-stacking-regularization\/notebook","726fa92f":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSt0miF0eFITqvdfiqvmdyyfDd5eSz76NN6jQ&usqp=CAU)dafontfreeio","97125c11":"The University of Ottawa is the largest bilingual university in the world, where it is possible for students to study in English, in French, or in both languages. Located in the capital of Canada, a G8 nation, They have ready access to the great institutions of their country.\n\nTheir breakthroughs in health, science, social sciences and the humanities attract global attention, reflecting our ranking among Canada\u2019s top 10 research universities and our ongoing drive to discover.\nhttps:\/\/www.linkedin.com\/school\/uottawa\/?originalSubdomain=br","b5b3f4ce":"Elsevier is a Dutch publishing and analytics company specializing in scientific, technical, and medical content. It is a part of the RELX Group, known until 2015 as Reed Elsevier. Its products include journals such as The Lancet and Cell, the ScienceDirect collection of electronic journals, the Trends and Current Opinion series of journals, the online citation database Scopus, and the ClinicalKey search engine for clinicians. Elsevier's products also include digital tools for data management, instruction, and assessment.https:\/\/en.wikipedia.org\/wiki\/Elsevier","3d684b52":"Red Hat, Inc. is an American multinational software company that provides open source software products to enterprises. Founded in 1993, Red Hat has its corporate headquarters in Raleigh, North Carolina, with other offices worldwide. It became a subsidiary of IBM on July 9, 2019. https:\/\/en.wikipedia.org\/wiki\/Red_Hat","27647309":"#Label Encoding.\n\nIt assigns each unique value to a different integer.","f6c03a21":"#Dealing with Numerical features(handling missing data)","2e6f45f0":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRfPr5Y_8Gum-mfWKwBMbMh3aNHZsiQXskZAw&usqp=CAU)kaggle.com  - BCG-Covid-19  AI Challenge","632283e1":"The Qatar Computing Research Institute (QCRI) in Doha, Qatar, is a nonprofit multidisciplinary computing research institute founded by the Qatar Foundation (QF) for Education, Science and Community Development in 2010. It is primarily funded by the Qatar Foundation, a private, non-profit organization that is supporting Qatar on its journey from carbon economy to knowledge economy.https:\/\/en.wikipedia.org\/wiki\/Qatar_Computing_Research_Institute","67b08ab2":"Scores=ZERO??? I have no idea how to fix that. I just ran the codes, with a tiny adaptation of my own.(That can explain everything)","d82f4694":"Estafet is an specialist integration and data insight consultancy, Estafet has been the agent of change in the digital transformation of many businesses. They connect people, platforms and processes so customers can make smarter decisions and develop better user engagement.http:\/\/estafet.com\/about-us\/","2e7ecf8f":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRj7n4ImpQMG0PsPotJZsZmOhSDh-3xitFpSQ&usqp=CAU)adtmag.com","cd267ea3":"#Outliers Detection.","dbcd52b6":"#Random Forest","48efb357":"noticias.uol.com.br"}}