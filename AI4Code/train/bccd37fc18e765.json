{"cell_type":{"cebed0cd":"code","4dffebf6":"code","240fca1c":"code","1d26b844":"code","fe4a7223":"code","6062b7b2":"code","bb122493":"code","3ab1d59c":"code","92b9c380":"code","dc0d3616":"code","ab3336fe":"code","2d1de746":"code","52337614":"code","52e464c9":"code","fd20d3d7":"code","3fd8bb2b":"code","d2d9a899":"code","6d059941":"code","bb007a11":"code","202adbf9":"code","eccab3c3":"code","cd15ff89":"code","20725b4c":"code","3b8b6b89":"code","b14b27f7":"code","81180b17":"code","0a7bd883":"code","6384d6c8":"markdown"},"source":{"cebed0cd":"# Input data files are available in the read-only \"..\/input\/\" directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4dffebf6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, MinMaxScaler\nfrom scipy import stats\nfrom cycler import cycler\nimport math\nimport matplotlib\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold, RepeatedKFold, GroupKFold, GridSearchCV, train_test_split, TimeSeriesSplit\nfrom sklearn.metrics import roc_curve, roc_auc_score\n\n#from sklearn import svm, tree, linear_model, neighbors, ensemble\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\nimport gc\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","240fca1c":"# Loading input data\ntrain_identity = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_identity.csv')\ntest_identity = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_identity.csv')\ntrain_transaction = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv')\ntest_transaction = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv')","1d26b844":"# Merge \ntrain_set = train_transaction.merge(train_identity,on=\"TransactionID\",how=\"left\")\ntest_set = test_transaction.merge(test_identity,on=\"TransactionID\",how=\"left\")","fe4a7223":"del train_transaction\ndel train_identity\ndel test_transaction\ndel test_identity\ngc.collect()","6062b7b2":"# Seaborn plot options\nsns.set(font_scale=1) ","bb122493":"### Response variable : isFraud\n\n# Class Distribution of Fraudulent vs Legitimate Transactions \n\nfig, ax = plt.subplots(1, 1, figsize=(6,4))\nplt.rcParams.update({'font.size': 10})\n\nbarplot_isfraud = (train_set\n .groupby(\"isFraud\")\n .isFraud\n .count()\n .to_frame(name= \"total\")\n .assign(percent = lambda x: np.round(100 * x \/ float(x.sum()),2))\n .reset_index()\n .assign(Color = ['#66c2a5','#fc8d62'])\n)\n\nax = plt.bar(barplot_isfraud['isFraud'],barplot_isfraud['percent'],width = 0.8,color=barplot_isfraud['Color'])\nplt.title('Distribution of Fraudulent vs Legitimate Transactions') \nfor isFraud,total,pct in zip(list(barplot_isfraud['isFraud']),\n                       list(barplot_isfraud['total']),\n                       list(barplot_isfraud['percent'])):\n    plt.annotate( str(total) + ' (' + str(pct) +'%'+ ')',\n                 xy= (isFraud,pct),\n                 xytext=(isFraud,pct+1),\n                 size = 8,horizontalalignment='center')#,verticalalignment='top')\n    \ndel barplot_isfraud \ngc.collect()","3ab1d59c":"##################################################################################################\n####### Quantitative Variables : TransactionAmt, dist1, dist2, TransactionDT, C1 ~ C14, D1 ~ D15 , \n####### Vxxx and id_01~id_11\n##################################################################################################\n\n# TransactionDT : timedelta from a given reference datetime (not an actual timestamp)\n# Visualizing days from origin and associated total transaction amount\n\ntransactiondt_plot_train =( train_set[['TransactionDT','isFraud','TransactionAmt']]\n.assign(Day = lambda df_: round(df_.TransactionDT\/86400,0).astype('int32'))\n.groupby(['isFraud','Day'])\n.sum('TransactionAmt').div(1000).round(2)\n.reset_index()\n)\ng = sns.FacetGrid(transactiondt_plot_train, col=\"isFraud\", sharey=False)\ng.map_dataframe(sns.scatterplot, x=\"Day\", y=\"TransactionAmt\")\ng.set_axis_labels(\"24-hour timedelta \\n Relative from Origin\", \"Total Transaction Amount\\n (in Thousands)\")\ng.fig.suptitle(\"Visualizing TransactionDT\", fontsize=15,va=\"bottom\")\n\n\ndel transactiondt_plot_train\ndel g \ngc.collect()","92b9c380":"### Transaction Amount : transaction payment amount in USD\n# Distribution of Transaction amount by fraudulent vs legitimate transactions\n\ng = sns.FacetGrid(train_set[['isFraud','TransactionAmt']], col=\"isFraud\", sharey=False)\ng.map(sns.kdeplot,\"TransactionAmt\")\ng.set_axis_labels(\"Density\", \"Total Transaction Amount\\n (in Thousands)\")\ng.fig.suptitle(\"Visualizing transaction amount using Density plot\", fontsize=15,va=\"bottom\")\n\n\ndef ecdf(x,**kwargs):\n    # Generate x and y values for ECDF: x, y\n    from statsmodels.distributions.empirical_distribution import ECDF\n    ecdf = ECDF(x)\n    # Plot the ECDF as dots\n    plt.plot(ecdf.x, ecdf.y)\n\n# Normalized ecdf of transaction amount of Fraudulent transactions vs Legitimate transactions\ng = sns.FacetGrid(train_set[['isFraud','TransactionAmt']], col=\"isFraud\", sharey=False)\ng.map(ecdf,\"TransactionAmt\")\ng.set_axis_labels(\"Cumulative Frequency\", \"Total Transaction Amount\\n (in Thousands)\")\ng.fig.suptitle(\"Visualizing transaction amount using normalized ecdf\", fontsize=15,va=\"bottom\")\n\ndel g\ngc.collect()","dc0d3616":"### dist1 and dist2 : Distance\n# Visualizing dist1 and dist2 values \ng = sns.FacetGrid(train_set[[\"isFraud\",\"dist1\",\"dist2\"]].melt(id_vars=\"isFraud\"),\n                  col=\"isFraud\", row=\"variable\",sharey=False)\ng.map(ecdf,\"value\")\ng.set_axis_labels(\"Cumulative Frequency\", \"Distance\")\ng.fig.suptitle(\"Visualizing distance using normalized ECDF\", fontsize=15,va=\"bottom\")\n\ndel g\ngc.collect()","ab3336fe":"### C1~C14 variables dataframe : counting, such as how many addresses are found to be associated with the payment card,etc.\n# Pairwise Correlation heatmap of C1~C14\nCx_plot_train = (train_set\n.filter(regex=(\"^C.*\"))\n)\n\ncorr_train = Cx_plot_train.corr(method=\"pearson\")\nfig, ax = plt.subplots(figsize=(7, 4))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(0, 250, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_train, cmap=cmap, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.title(\"Pairwise Correlation heatmap \\n(Cx variables: train set)\")\n\n## Correlation heatmap for test set\nCx_plot_test=(test_set\n.filter(regex=(\"^C.*\"))\n)\n\ncorr_test = Cx_plot_test.corr(method=\"pearson\")\nfig, ax = plt.subplots(figsize=(7, 4))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(0, 145, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_test, cmap=cmap, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.title(\"Pairwise Correlation heatmap \\n(Cx variables: test set)\")\n\ndel Cx_plot_test\ndel Cx_plot_train\ngc.collect()","2d1de746":"### D1 ~ D15 : timedelta, such as days between previous transaction, etc.\n# D1 ~ D15 variables dataframe\nDx_plot_train = (train_set\n.filter(regex=(\"^D.*\"))\n)\n\ncorr_train = Dx_plot_train.corr(method=\"pearson\")\nfig, ax = plt.subplots(figsize=(7, 4))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(0, 250, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_train, cmap=cmap, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.title(\"Pairwise Correlation heatmap \\n(Dx variables: train set)\")\n\n\n## Correlation heatmap for test set\nDx_plot_test=(test_set\n.filter(regex=(\"^D.*\"))\n)\n\ncorr_test = Dx_plot_test.corr(method=\"pearson\")\nfig, ax = plt.subplots(figsize=(7, 4))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(0, 145, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_test, cmap=cmap, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.title(\"Pairwise Correlation heatmap \\n(Dx variables: test set)\")\n\n\ndel Dx_plot_test\ndel Dx_plot_train\ngc.collect()","52337614":"### Vxxx: Vesta engineered rich features, including ranking, counting, and other entity relations.\n# Vxxx variables dataframe\nVxxx_plot_train = (train_set\n.filter(regex=(\"^V.*\"))\n.reset_index()\n)\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.impute import SimpleImputer\n\nVxxx_plot_train.fillna(-999,inplace=True)\npca = PCA(n_components=20)\npc = pca.fit_transform(Vxxx_plot_train)\nprint(pca.explained_variance_ratio_)\n\ndel Vxxx_plot_train\ngc.collect()","52e464c9":"PC_values = np.arange(pca.n_components_) + 1\nplt.plot(PC_values, pca.explained_variance_ratio_, 'ro-', linewidth=2)\nplt.title('Scree Plot')\nplt.xlabel('Principal Component')\nplt.ylabel('Proportion of Variance Explained')\nplt.show()","fd20d3d7":"### Vxxx: Vesta engineered rich features, including ranking, counting, and other entity relations.\n# Vxxx variables dataframe\nVxxx_plot_test = (test_set\n.filter(regex=(\"^V.*\"))\n.reset_index()\n)\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.impute import SimpleImputer\n\nVxxx_plot_test.fillna(-999,inplace=True)\npca = PCA(n_components=20)\npc = pca.fit_transform(Vxxx_plot_test)\nprint(pca.explained_variance_ratio_)\n\ndel Vxxx_plot_test\ngc.collect()","3fd8bb2b":"PC_values = np.arange(pca.n_components_) + 1\nplt.plot(PC_values, pca.explained_variance_ratio_, 'ro-', linewidth=2)\nplt.title('Scree Plot')\nplt.xlabel('Principal Component')\nplt.ylabel('Proportion of Variance Explained')\nplt.show()","d2d9a899":"### id_01 ~ id11\n# Variables with more than 99% of the values as NA\nidx_plot_train = (train_set\n.filter(regex=(r'(^id_0.*|id_10|id_11)'))\n)\n\n# Check for missing values\nidx_plot_train.isnull().mean()\n\ncorr_train = idx_plot_train[[\"id_01\",\"id_02\",\"id_03\",\"id_04\",\"id_05\",\"id_06\",\"id_09\",\"id_10\",\"id_11\"]].corr(method=\"pearson\")\nfig, ax = plt.subplots(figsize=(7, 4))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(0, 250, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_train, cmap=cmap, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.title(\"Pairwise Correlation heatmap \\n(idx variables: train set)\")\n\n","6d059941":"## Correlation heatmap for test set\ndef clean_columns(col):\n    return col.replace('-',\"_\")\n\nidx_plot_test=(test_set\n.filter(regex=(r'(^id-0.*|id-10|id-11)'))\n.rename(columns=clean_columns)\n)\n\nidx_plot_test.isnull().mean()\n\ncorr_test = idx_plot_test[[\"id_01\",\"id_02\",\"id_03\",\"id_04\",\"id_05\",\"id_06\",\"id_09\",\"id_10\",\"id_11\"]].corr(method=\"pearson\")\nfig, ax = plt.subplots(figsize=(7, 4))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(0, 145, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_test, cmap=cmap, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.title(\"Pairwise Correlation heatmap \\n(idx variables: test set)\")\n\n\n# del Dx_plot_test\n# del Dx_plot_train\n# gc.collect()","bb007a11":"#########################################################################################################################################################\n####### Categorical Features : ProductCD, card1 ~ card6, M1~M9, addr1 ~ addr2, P_emaildomain and R_emaildomain, Device Type, Device Info and id12 ~ id38\n#########################################################################################################################################################\n\n### ProductCD : product code, the product for each transaction  \n# Fraudulent transactions vs legitimate transactions grouped by ProductCD\nproductcd_plt = (train_set[[\"isFraud\",\"ProductCD\",\"TransactionAmt\"]]\n.groupby([\"ProductCD\",\"isFraud\"])\n.agg(['sum','count'])\n.reset_index()\n)\n\nproductcd_plt.columns = ['ProductCD','isFraud','TotalAmount','NumberofTransactions']\n\ndef gbarplot(x, y, color, **kwargs):\n    cmap = sns.color_palette(color)\n    sns.barplot(x, y,palette=cmap, **kwargs)\n    \ndef boxplots(x, y, color, **kwargs):\n    cmap = sns.color_palette(color)\n    sns.boxplot(x, y,palette=cmap, **kwargs)    \n        \n# Visualizing Number of transactions in each product category\ng = sns.FacetGrid(productcd_plt,col=\"isFraud\",sharey=False,hue=\"isFraud\")\ng.map(gbarplot,\"ProductCD\",\"NumberofTransactions\",color=\"Paired\")\ng.set_axis_labels(\"Product Code\", \"Number of Transactions\")\ng.fig.suptitle(\"Visualizing Product Code and Number of Transactions\", fontsize=12,va=\"bottom\")\n\n# Total Transaction amount of Fraudulent transactions vs legitimate transactions grouped by ProductCD\n# Visualizing total transaction amount in each product category\ng = sns.FacetGrid(productcd_plt,col=\"isFraud\",sharey=False,hue=\"isFraud\")\ng.map(gbarplot,\"ProductCD\",\"TotalAmount\",color=\"Paired\")\ng.set_axis_labels(\"Product Code\", \"Total Transaction Amount\\n\")\ng.fig.suptitle(\"Visualizing Product Code and Total Transaction Amount\", fontsize=12,va=\"bottom\")\n\n# Distribution of Transaction amount of Fraudulent transactions vs legitimate transactions grouped by ProductCD\ng = sns.catplot(data=train_set[['ProductCD','TransactionAmt','isFraud']],\n                x=\"ProductCD\", y=\"TransactionAmt\",\n                hue=\"isFraud\", kind=\"box\",dodge=True)\nplt.ylim(0, 1200)\n#g.set_axis_labels(\"Product Code\", \"Total Transaction Amount\\n\")\ng.fig.suptitle(\"Visualizing distribution of Transaction amount \\n by product code\", fontsize=12,va=\"bottom\")\n\ndel g\ngc.collect()","202adbf9":"\n### card1 - card6 : payment card information, such as card type, card category, issue bank, country, etc.\n# Visualizing  variables Card 1, Card2 and Card3 and Card5 and associated number of transactions\ncard_plt = (train_set[['card1','card2','card3','card5','isFraud','TransactionAmt']]\n.melt(id_vars=['isFraud','TransactionAmt']))\n\n# Distribution of Transaction amount of Fraudulent transactions vs legitimate transactions grouped by card details\ng = sns.catplot(data=card_plt,\n                x=\"isFraud\", y=\"value\",kind=\"box\",\n                col = \"variable\",hue=\"isFraud\",sharey=False,sharex=False)\n## Drop 2 Variables\ncard_drop_var = ['card1','card2']","eccab3c3":"\n# Visualizing variables card4 and card6 \n# Number of transactions for each Card type and network, grouped by transaction type(Fraudulent\/legitimate)\ncard46 = pd.DataFrame(train_set[['isFraud','card6','card4']].value_counts()).reset_index()\ncard46.columns = ['isFraud','card6','card4','numtxn']\n\ng = sns.FacetGrid(card46,col=\"card6\",row=\"isFraud\",sharey=False,hue=\"isFraud\",sharex=False)\ng.map(gbarplot,\"numtxn\",\"card4\",color=\"Paired\")\ng.set_axis_labels(\"\", \"Number of Transactions\")\ng.fig.suptitle(\"Visualizing Number of transactions associated with \\n Card type and Card Network\\n\", fontsize=12,va=\"bottom\")\n#g.set_xticklabels(rotation=30)\n\n# Total transaction amount for each Card type and network, grouped by transaction type(Fraudulent\/legitimate)\ncard46_amt = (train_set[['isFraud','card6','card4','TransactionAmt']]\n.groupby(['isFraud','card6','card4'])\n.agg(['sum'])\n.div(1000)\n.reset_index()\n)\n\ncard46_amt.columns = ['isFraud','card6','card4','TotalTransactionAmt']\n\n\ng = sns.FacetGrid(card46_amt,col=\"card6\",row=\"isFraud\",sharey=False,hue=\"isFraud\",sharex=False)\ng.map(gbarplot,\"TotalTransactionAmt\",\"card4\",color=\"Paired\")\ng.set_axis_labels(\"\", \"Total Transaction Amount \\n(in Thousands)\")\ng.fig.suptitle(\"Visualizing total transaction amount associated with \\n Card type and Card Network\\n\", fontsize=12,va=\"bottom\")","cd15ff89":"\n### M1 ~ M9 (logical) : match, such as names on card and address, etc.\n# Visualizing M1~ M9 values and associated number of transactions\nMx_plt = (train_set\n.filter(regex=(r'(^M[1-3|5-9]|isFraud)'))\n.value_counts()\n.reset_index()\n.rename(columns={0:'numtxn'})\n.melt(id_vars=['isFraud','numtxn']))\n\ng = sns.FacetGrid(Mx_plt,col=\"isFraud\",row=\"value\",sharey=False,hue=\"isFraud\",sharex=False)\ng.map(gbarplot,\"variable\",\"numtxn\",color=\"Paired\",ci=None)\ng.set_axis_labels(\"\", \"Number of Transactions\")\ng.fig.suptitle(\"Visualizing Number of transactions associated with \\n Match type\\n\", fontsize=12,va=\"bottom\")\n\n\n# Visualizing M1~M9 values and associated total transaction amount\nMx_plt_amt = (train_set\n.filter(regex=(r'(^M[1-3|5-9]|isFraud|TransactionAmt)'))\n.melt(id_vars=['isFraud','TransactionAmt'])\n.groupby(['isFraud','variable','value'])\n.agg(['sum'])\n.div(1000)\n.reset_index())\n\nMx_plt_amt.columns = ['isFraud','variable','value','totalAmt']\ng = sns.FacetGrid(Mx_plt_amt,col=\"isFraud\",row=\"value\",sharey=False,hue=\"isFraud\",sharex=False)\ng.map(gbarplot,\"variable\",\"totalAmt\",color=\"Paired\",ci=None)\ng.set_axis_labels(\"\", \"Total Transaction amount\")\ng.fig.suptitle(\"Visualizing total transaction amount associated with \\n Match type\\n\", fontsize=12,va=\"bottom\")\n\n","20725b4c":"\n### addr1 and addr2 : Address\n# Visualizing addr1 values and associated number of transactions\naddr1_plt = (train_set[['addr1','isFraud']]\n.value_counts()\n.reset_index()\n.rename(columns={0:'numtxn'}))\n\ng = sns.FacetGrid(addr1_plt,col=\"isFraud\",hue=\"isFraud\",sharex=False,sharey=False)\ng.map(sns.scatterplot,\"addr1\",\"numtxn\")\ng.set_axis_labels(\"addr1 values\", \"Number of Transactions\")\ng.fig.suptitle(\"Visualizing Number of transactions associated with \\n addr1 values\\n\", fontsize=12,va=\"bottom\")\n\n\n# Visualizing addr1 values and associated total transaction amount\naddr1_plt_amt = (train_set[['addr1','isFraud','TransactionAmt']]\n.groupby(['isFraud','addr1'])\n.agg(['sum'])\n.div(1000)\n.reset_index())\n\naddr1_plt_amt.columns = ['isFraud','addr1','totalAmt']\ng = sns.FacetGrid(addr1_plt_amt,col=\"isFraud\",sharey=False,hue=\"isFraud\",sharex=False)\ng.map(sns.scatterplot,\"addr1\",\"totalAmt\")\ng.set_axis_labels(\"addr1 values\", \"Total Transaction amount\")\ng.fig.suptitle(\"Visualizing total transaction amount associated with \\n addr1 values\\n\", fontsize=12,va=\"bottom\")\n\n# Visualizing addr2 values and associated number of transactions\naddr2_plt = (train_set[['addr2','isFraud']]\n.value_counts()\n.reset_index()\n.rename(columns={0:'numtxn'}))\n\ng = sns.FacetGrid(addr2_plt,col=\"isFraud\",hue=\"isFraud\",sharex=False,sharey=False)\ng.map(sns.scatterplot,\"addr2\",\"numtxn\")\ng.set_axis_labels(\"addr2 values\", \"Number of Transactions\")\ng.fig.suptitle(\"Visualizing Number of transactions associated with \\n addr2 values\\n\", fontsize=12,va=\"bottom\")\n\n\n# Visualizing addr2 values and associated total transaction amount\naddr2_plt_amt = (train_set[['addr2','isFraud','TransactionAmt']]\n.groupby(['isFraud','addr2'])\n.agg(['sum'])\n.div(1000)\n.reset_index())\n\naddr2_plt_amt.columns = ['isFraud','addr2','totalAmt']\ng = sns.FacetGrid(addr2_plt_amt,col=\"isFraud\",sharey=False,hue=\"isFraud\",sharex=False)\ng.map(sns.scatterplot,\"addr2\",\"totalAmt\")\ng.set_axis_labels(\"addr2 values\", \"Total Transaction amount\")\ng.fig.suptitle(\"Visualizing total transaction amount associated with \\n addr1 values\\n\", fontsize=12,va=\"bottom\")\n\n\n\n","3b8b6b89":"\n### P_emaildomain: purchaser email domain\n# Visualizing purchaser email domain of approximately 99% of the transactions.\nP_emaildomain_plt = (train_set[['isFraud','P_emaildomain']]\n.value_counts()\n.reset_index()\n.rename(columns={0:'numtxn'})\n.query('numtxn>1000')\n)\n\ng = sns.FacetGrid(P_emaildomain_plt,col=\"isFraud\",hue=\"isFraud\",sharex=False,sharey=False)\ng.map(sns.barplot,\"numtxn\",\"P_emaildomain\")\ng.set_axis_labels(\"Number of Transactions\",\"Purchaser email domain\")\ng.fig.suptitle(\"Visualizing Number of transactions associated with Purchaser email domain\", fontsize=12,va=\"bottom\")\n","b14b27f7":"\n### R_emaildomain : recipient email domain\n# Visualizing recipient email domain of approximately 99% of the transactions.\nR_emaildomain_plt = (train_set[['isFraud','R_emaildomain']]\n.value_counts()\n.reset_index()\n.rename(columns={0:'numtxn'})\n.query('numtxn>1000')\n)\n\ng = sns.FacetGrid(R_emaildomain_plt,col=\"isFraud\",hue=\"isFraud\",sharex=False,sharey=False)\ng.map(sns.barplot,\"numtxn\",\"R_emaildomain\")\ng.set_axis_labels(\"Number of Transactions\",\"Recepient email domain\")\ng.fig.suptitle(\"Visualizing Number of transactions associated with Recepient email domain\", fontsize=12,va=\"bottom\")\n","81180b17":"### Device Type : type of device used for transaction (mobile\/desktop\/Unknown)\nDeviceType_plt = (train_set[['isFraud','DeviceType']]\n.value_counts()\n.reset_index()\n.rename(columns={0:'numtxn'})\n.query('numtxn>1000')\n)\n\ng = sns.FacetGrid(DeviceType_plt,col=\"isFraud\",hue=\"isFraud\",sharex=False,sharey=False)\ng.map(sns.barplot,\"DeviceType\",\"numtxn\")\ng.set_axis_labels(\"Device Type\",\"Number of Transactions\")\ng.fig.suptitle(\"Visualizing Number of transactions associated with Device Type\", fontsize=12,va=\"bottom\")\n","0a7bd883":"\n### Device Info \n# Visualizing Device information of approximately 99% of dataset (Number of transactions > 100)\n\nDeviceInfo_plt = (train_set[['isFraud','DeviceInfo']]\n.value_counts()\n.reset_index()\n.rename(columns={0:'numtxn'})\n.query('numtxn>1000')\n)\n\ng = sns.FacetGrid(DeviceInfo_plt,col=\"isFraud\",hue=\"isFraud\",sharex=False,sharey=False)\ng.map(sns.barplot,\"numtxn\",\"DeviceInfo\")\ng.set_axis_labels(\"Number of Transactions\",\"Device Info\")\ng.fig.suptitle(\"Visualizing Number of transactions associated with Device Info\", fontsize=12,va=\"bottom\")\n","6384d6c8":"#### Transaction Table & Identity table\n\n    TransactionDT: timedelta from a given reference datetime (not an actual timestamp)  \n    TransactionAMT: transaction payment amount in USD  \n    ProductCD: product code, the product for each transaction  \n    card1 - card6: payment card information, such as card type, card category, issue bank, country, etc.  \n    addr: address  \n    dist: distance  \n    P_ and (R__) emaildomain: purchaser and recipient email domain  \n    C1-C14: counting, such as how many addresses are found to be associated with the payment card, etc. The actual meaning is masked.  \n    D1-D15: timedelta, such as days between previous transaction, etc.  \n    M1-M9: match, such as names on card and address, etc.  \n    Vxxx: Vesta engineered rich features, including ranking, counting, and other entity relations.  \n    \n    Categorical Features:\n    ProductCD\n    card1 - card6\n    addr1, addr2\n    P_emaildomain\n    R_emaildomain\n    M1 - M9\n\n\n    Variables in this table are identity information \u2013 network connection information (IP, ISP, Proxy, etc) and digital signature (UA\/browser\/os\/version, etc) associated with transactions.\n    \n    They're collected by Vesta\u2019s fraud protection system and digital security partners.\n    (The field names are masked and pairwise dictionary will not be provided for privacy protection and contract agreement)\n\n    Categorical Features:\n    DeviceType\n    DeviceInfo\n    id_12 - id_38\n    \nhttps:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/discussion\/101203\n\n"}}