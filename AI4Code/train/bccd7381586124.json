{"cell_type":{"eca624cb":"code","102cd6da":"code","7cdb3272":"code","ed741b51":"code","b2accc70":"code","739d944b":"code","4bff4ccc":"code","8312e378":"code","c9f36ef6":"code","6b8f4712":"code","2dafe494":"code","4f8fcf60":"code","9472d670":"code","22b9ca68":"code","5755b39b":"code","dcdf28e8":"code","b21e99dc":"code","a7de9a6d":"code","53ba15ca":"code","c091aaf2":"code","b78b2e0e":"code","1cc65d09":"code","8476dcdd":"code","02ecb716":"code","2ce20050":"code","835883e2":"code","b56b9c08":"code","efc83df1":"code","0af28325":"code","833f0be0":"code","190721e6":"markdown","f57ee98c":"markdown","ec579153":"markdown","519b77c9":"markdown","acdd5a57":"markdown","f58bc2de":"markdown","3bf0e0bf":"markdown","4cfcd15e":"markdown","40d4cdb2":"markdown","44c179c3":"markdown","3737194c":"markdown","13320be7":"markdown","fd050b34":"markdown","03e6e17f":"markdown","83d7ae08":"markdown","0d388eb3":"markdown","635bd9b2":"markdown","6ada956c":"markdown","bd110cb9":"markdown","c961bc90":"markdown","8e40961e":"markdown","c1833774":"markdown","dbca74b0":"markdown","44a86dba":"markdown","7ca305a1":"markdown","658129a8":"markdown","91441a1a":"markdown","af642b1f":"markdown","ca467d84":"markdown","c487e57c":"markdown","6a6f63f5":"markdown","d3b39d48":"markdown","b06bf5f8":"markdown","9a4b1412":"markdown","c40b5a20":"markdown","91229c35":"markdown","6907b369":"markdown","294b7c28":"markdown","72fe0126":"markdown","5966e02c":"markdown","7319c680":"markdown","523681d0":"markdown","e7507545":"markdown","248c82eb":"markdown","5284eb7d":"markdown","ebdc5fb4":"markdown","76bf28c3":"markdown","b076c8d2":"markdown","3a730851":"markdown","7e5f1a3d":"markdown","15f06f2f":"markdown","50ba30de":"markdown","274c6e2e":"markdown","1f145bed":"markdown","d7049a6c":"markdown","0b90988a":"markdown","03f4614c":"markdown","de47e49b":"markdown","509776e6":"markdown","8a79c637":"markdown","2b894888":"markdown"},"source":{"eca624cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport geopandas as gpd\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","102cd6da":"path = '..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv'\ndf = pd.read_csv(path)\ndf['Country\/Region'] = df['Country\/Region'].replace('US', 'United States of America')","7cdb3272":"world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld[['name', 'iso_a3']]","ed741b51":"world.index = world['name']\nworld = world.reindex(df['Country\/Region'])\nworld","b2accc70":"world['iso_a3'] = world['iso_a3'].fillna('NaN')\ndf['iso_a3'] = world['iso_a3'].reset_index(drop=True)\ndf[['iso_a3']]","739d944b":"date_cols = list(df.columns[[col[-2:]=='20' or col[-2:]=='21' for col in df]])\ncountries = np.array([[i]*len(date_cols) for i in df['iso_a3']]).flatten()\npd.Series(date_cols)","4bff4ccc":"pd.Series(countries)","8312e378":"dates = date_cols*len(df['Country\/Region'])\nvalues = np.array([list(i) for i in df[date_cols].iloc]).flatten()\ndata = pd.DataFrame({'country':countries, 'date':dates, 'confirmed':values})\ndata","c9f36ef6":"fig = px.choropleth(data, locations='country', color='confirmed', animation_frame='date')\nfig.show()","6b8f4712":"def world_map(suffix):\n    path = '..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_'+suffix+'.csv'\n    df = pd.read_csv(path)\n    df['Country\/Region'] = df['Country\/Region'].replace('US', 'United States of America')\n\n    world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n    world.index = world['name']\n    world = world.reindex(df['Country\/Region'])\n    world['iso_a3'] = world['iso_a3'].fillna('NaN')\n    df['iso_a3'] = world['iso_a3'].reset_index(drop=True)\n    \n    date_cols = list(df.columns[[col[-2:]=='20' or col[-2:]=='21' for col in df]])\n    countries = np.array([[i]*len(date_cols) for i in df['iso_a3']]).flatten()\n    dates = date_cols*len(df['Country\/Region'])\n    values = np.array([list(i) for i in df[date_cols].iloc]).flatten()\n    data = pd.DataFrame({'country':countries, 'date':dates, suffix:values})\n\n    fig = px.choropleth(data, locations='country', color=suffix, animation_frame='date')\n    fig.show()","2dafe494":"def linear(suffix):\n    path = '..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_'+suffix+'.csv'\n    df = pd.read_csv(path)\n    df['Country\/Region'] = df['Country\/Region'].replace('US', 'United States of America')\n    \n    date_cols = df.columns[[col[-2:]=='20' or col[-2:]=='21' for col in df]]\n    country_list = ['United States of America', 'Brazil', 'India', 'Italy', 'Germany']\n    cases = [df[df['Country\/Region']==country][date_cols] for country in country_list]\n    cases = [list(i.T[i.T.columns[0]]) for i in cases]\n\n    fig = go.Figure()\n    for i in cases:\n        fig.add_trace(go.Scatter(x=date_cols, y=i, name=country_list[cases.index(i)]))\n    fig.show()\n\ndef US_map(suffix):\n    df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_'+suffix+'_US.csv')\n    states = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2011_us_ag_exports.csv')[['code', 'state']]\n    count = Counter(df['Province_State'])\n    indices = [list(np.unique(df['Province_State'])).index(i) for i in np.setdiff1d(df['Province_State'], states['state'])]\n    values = pd.Series(count.values())[[i not in indices for i in range(len(count.values()))]]\n    states['values'] = values.reset_index(drop=True)\n\n    date_cols = list(df.columns[[col[-2:]=='20' or col[-2:]=='21' for col in df]])\n    state_count = np.array([[i]*len(date_cols) for i in states['code']]).flatten()\n    dates = date_cols*len(states['code'])\n    data = pd.DataFrame({'date':dates, 'state':state_count})\n\n    values = []\n    for i in df.groupby('Province_State'):\n        if i[0] in list(states['state']):\n            values.append([sum(list(i[1][j])) for j in i[1][date_cols]])\n        else:\n            continue\n    data['cases'] = np.array(values).flatten()\n    fig = px.choropleth(data, locations='state', color='cases', animation_frame='date', locationmode='USA-states', scope='usa')\n    fig.show()\n\ndef state_bar(suffix, state):\n    df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_'+suffix+'_US.csv')\n    date_cols = list(df.columns[[col[-2:]=='20' or col[-2:]=='21' for col in df]])\n    df['total'] = [sum(i) for i in df[date_cols].iloc]\n    state = df[df['Province_State']==state]\n    state = state.sort_values(by='total', ascending=False)[:100]\n    fig = px.bar(state, 'Admin2', 'total', color='total')\n    fig.show()\n\ndef state_linear(suffix):\n    path = '..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_'+suffix+'_US.csv'\n    df = pd.read_csv(path)\n\n    cases = []\n    date_cols = df.columns[[col[-2:]=='20' or col[-2:]=='21' for col in df]]\n    state_cases=[df[df['Province_State'] == i][date_cols] for i in np.unique(df['Province_State'])]\n    num = 0\n\n    fig = go.Figure()\n    for i in state_cases:\n        fig.add_trace(go.Scatter(x=date_cols, y=[sum(i[j]) for j in date_cols], name=np.unique(df['Province_State'])[num]))\n        num += 1\n    fig.show()\n\ndef region_linear(case, country_name):\n    df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n    df = df.fillna('NaN')\n    countries = [i[1].reset_index(drop=True) for i in df.groupby('Country\/Region')]\n    cases = [i.iloc[list(i.index)[-1]][case] for i in countries]\n    country = countries[[i[0] for i in df.groupby('Country\/Region')].index(country_name)]\n    cases = [list(i[1][case]) for i in country.groupby('Province\/State')]\n\n    date_cols = np.unique(country['ObservationDate'])\n    fig = go.Figure()\n    for region in cases:\n        fig.add_trace(go.Scatter(x=date_cols, y=region, name=np.unique(country['Province\/State'])[cases.index(region)]))\n    fig.update_layout(title=country_name)\n    fig.show()","4f8fcf60":"world_map('confirmed')","9472d670":"world_map('deaths')","22b9ca68":"world_map('recovered')","5755b39b":"linear('confirmed')","dcdf28e8":"linear('deaths')","b21e99dc":"linear('recovered')","a7de9a6d":"for country in ['Australia', 'India', 'Italy']:\n    region_linear('Confirmed', country)","53ba15ca":"for country in ['Australia', 'India', 'Italy']:\n    region_linear('Deaths', country)","c091aaf2":"for country in ['Australia', 'India', 'Italy']:\n    region_linear('Recovered', country)","b78b2e0e":"US_map('confirmed')","1cc65d09":"US_map('deaths')","8476dcdd":"state_linear('confirmed')","02ecb716":"state_linear('deaths')","2ce20050":"state_bar('confirmed', 'California')","835883e2":"state_bar('confirmed', 'Texas')","b56b9c08":"state_bar('confirmed', 'Florida')","efc83df1":"state_bar('deaths', 'California')","0af28325":"state_bar('deaths', 'Texas')","833f0be0":"state_bar('deaths', 'Florida')","190721e6":"* The statistics here models a lot of what we saw in the previous graph.","f57ee98c":"Here, we store df's date columns into \"date_cols\" by seeing if the column's name ends with 20 or 21 (the year). Afterwards, we create a one-dimensional array called \"countries\" which multiplies each iso_a3 value by the length of date_cols.","ec579153":"## Deaths","519b77c9":"### California","acdd5a57":"## Confirmed","f58bc2de":"### Texas","3bf0e0bf":"We set the index of world to be the \"name\", and then reindex the dataframe with our \"Country\/Region\" variable from df.","4cfcd15e":"* In California, the places with the most cases are LA, Riverside, San Bernardino, San Diego and Orange.\n* In Texas, the places with the most cases are Harris, Dallas, Bexar and Tarrant.\n* In Florida, the places with the most cases are Miami-Dade, Palm beach, Broward and Hillsborough.","40d4cdb2":"## Deaths","44c179c3":"## Recovered","3737194c":"* The death pattern for America, Brazil and India is similar to that of the confirmed cases.\n* Italy is a different story. They started having a hard time with coronavirus deaths all the way back in March 2020. This gave them a tough two months of rising in COVID instances.\n* During May, Italy got their act together and enjoyed five months of very little deaths.\n* However, this was followed by a sharp rise after October, climbing the death rates at a record rate.","13320be7":"* Both graphs tell us that the coronavirus began in Washington, made a vicious attack on New York, only to later set up base in California, Texas and Florida.","fd050b34":"### California","03e6e17f":"# State regions","83d7ae08":"## Confirmed","0d388eb3":"A **choropleth map** is a map that uses different shading or colours to represent different values in various locations. In this notebook, we will use it to examine the confirmed, lethal and recovered instances of COVID-19 around the world.","635bd9b2":"Next, we move onto just analysing the USA, while going back to choropleth maps.","6ada956c":"* We can see a correlation between the number of cases and recoveries: the more virus instances there are, the more they need to recover.\n* India and Italy's regions flattened the curve of recoveries in June 2020.","bd110cb9":"Afterwards, we now take a look at each region within a sample of countries (Australia, India and Italy) and compare them to how they fare with COVID cases.","c961bc90":"### If you want to learn more about plotly you can check out my Introduction to Plotly notebook: https:\/\/www.kaggle.com\/dabawse\/introduction-to-visualisations-with-plotly","8e40961e":"Furthermore, we can compare how the cases for each state have gone.","c1833774":"# Global time series","dbca74b0":"* The trend here in deaths shows a very similar pattern to the last display, however we also see a significant rise of deaths in Mexico.","44a86dba":"# World maps","7ca305a1":"* The pattern for these countries is that one region (maybe the most populous?) has a massive lead over all the other ones, while the rest are clustered in one specific area.\n* In Australia, the most major place with confirmed cases is Victoria by a significant margin, New South Wales following in second.\n* For India, Maharashta is hugely leading in cases, followed by Kerala.\n* In Italy, Lombardia is the first in confirmed instances, with Veneto in second.","658129a8":"To make it easier for ourselves in the future, we can sum all of this up in one procedure to allow us quick and simple access.","91441a1a":"### Thank you for reading my notebook. If you enjoyed it, please upvote and provide feedback.","af642b1f":"* In the beginning of April, America's cases started to significantly rise above the others. At the start of November is when we see it having an almost exponential ascent.\n* At the dawn of February 2021, the US begins to noticeably flatten the curve of cases.\n* As for India and Brazil, their cases seem to take a more remarkable rise in June. Though, as of the end of February 2021, they seem to have a roughly similar amount of cases.\n* Undoubtedly, the countries which are faring the best out of our sample are Italy and Germany. Although they had a rough start in the beginning and a dangerous turn of events in October, they seem to be flattening the curve well.","ca467d84":"## Deaths","c487e57c":"## Confirmed","6a6f63f5":"# Choropleth Maps and Time Series","d3b39d48":"* At the beginning Europe, Iran, Turkey and the US make the biggest strides in recovery.\n* This is followed by Brazil, India and Russia overtaking the lead in pioneering the healing.","b06bf5f8":"## Confirmed","9a4b1412":"* In March of 2020, the coronavirus made an effective spread to the European countries and Iran, most prominently Italy, Spain and Germany.\n* However, not long after, we see the virus spreading uncontrollably to the USA, which remains a hotbed of cases for the whole year.\n* Near the summer, COVID made notable contaminations to Brazil, India and Russia.","c40b5a20":"## Deaths","91229c35":"## Recovered","6907b369":"### Florida","294b7c28":"Subsequently, we fill the null values from the \"iso_a3\" feature in world and transfer it into df. This is very significant, as we now have the iso values for each country, which can then be used for our choropleth function.","72fe0126":"### Texas","5966e02c":"* New York was infected with COVID-19 in March 2020, though it got it under control in May, only to have it rise again in November.\n* California, Texas and Flora saw their numbers climb in June, which led to them being the states with the most cases.","7319c680":"Furthermore, we perform a similar procedure, except that we multiply the date_cols by the length of df's \"Country\/Region\" feature. Following that, we want to store the number of confirmed cases for each day, so we do this in the next line with a variable \"values\". Now we assemble it all together by combining our \"countries\", \"dates\" and \"values\" variables into one dataframe: \"data\".","523681d0":"Hello and welcome to my COVID analysis notebook, where today we will look at an introduction to choropleth map visualisation, as well as using other graphs to display our time series data.","e7507545":"Firstly, we use the file which tells us how many global confirmed cases there are. We then replace the 'US' sample with 'United States of America' so that it can match the future values that we will use.","248c82eb":"* As mentioned previously: Victoria, Maharashtra and Lombardia have an enormous lead in coronavirus cases above the others, because if we compare them to the rest then the others seem very insignificant.","5284eb7d":"We firstly analyse the confirmed cases of 5 countries which COVID-19 has had a major impact on: USA, Brazil, India, Italy and Germany.","ebdc5fb4":"Finally, we can display data using plotly express' choropleth function, giving us the ability to not only visualise the countries' cases but to also see how they all change over time, using an animation frame.","76bf28c3":"Finally, we will analyse which regions in California, Texas and Florida have the most confirmed instances and deaths.","b076c8d2":"# Cases per country region","3a730851":"## Recovered","7e5f1a3d":"* It seems that we have missing data for the USA's recovery, as the rates drop to 0 in our graph after a very promising 6 million records in mid-December.\n* Brazil started steadily making recoveries in June 2020, keeping a (mostly) consistent trend the whole year.\n* India made great strides in the middle of July, which led to an increadible increase in rehabilitations.\n* Italy and Germany began making their significant recoveries in November.","15f06f2f":"## Deaths","50ba30de":"## Confirmed","274c6e2e":"# State cases","1f145bed":"## Confirmed","d7049a6c":"## Deaths","0b90988a":"Then, we use geopandas' \"naturalearth_lowres\" file to acquire the data we need to chart the different countries, storing it in a variable \"world\". World contains two features that will be important to us:\n* name: the full names of the different countries\n* iso_a3: shorthand notation for the countries; necessary for us to input into our choropleth function","03f4614c":"These world maps are the same type of visualisation as the example we just did, except that we will also explore the deaths and recoveries in addition to the confirmed cases.","de47e49b":"# USA map","509776e6":"Now we will move on from choropleth maps and towards time series graphs around the world.","8a79c637":"**Time series** data is data that is listed in time order. Here, it is a sequence of dates that show the different coronavirus cases.","2b894888":"### Florida"}}