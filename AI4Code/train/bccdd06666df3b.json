{"cell_type":{"ac02dd85":"code","f5bf2e67":"code","464e3da3":"code","ca6fc6b0":"code","d11308d7":"code","e4b17a98":"code","3336a7c9":"code","0e040c22":"code","459e6ac7":"code","d926df86":"code","ab8e6ac0":"code","9df73de7":"code","6ecdef8e":"code","2c9a073e":"code","f619bd39":"code","6de960d0":"code","73fbbdf3":"markdown","11af7523":"markdown","9bc78a8a":"markdown","dc45cbdd":"markdown","c1716ef1":"markdown","a974aa1d":"markdown","0ade5e39":"markdown","0ef9072f":"markdown"},"source":{"ac02dd85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f5bf2e67":"import seaborn as sns\nimport matplotlib.pyplot as plt","464e3da3":"df = pd.read_csv(\"\/kaggle\/input\/video-game-reviews-ign-2020-2021\/reviews.csv\")","ca6fc6b0":"df.head()","d11308d7":"df.info()","e4b17a98":"df[\"publishers\"].value_counts()","3336a7c9":"arts_mean = df[df[\"publishers\"] == \"Electronic Arts\"][\"score\"].mean()\nenix_mean = df[df[\"publishers\"] == \"Square Enix\"][\"score\"].mean()\nnintendo_mean = df[df[\"publishers\"] == \"Nintendo\"][\"score\"].mean()\nubisoft_mean = df[df[\"publishers\"] == \"Ubisoft\"][\"score\"].mean()\nsony_mean = df[df[\"publishers\"] == \"Sony Interactive Entertainment\"][\"score\"].mean()\n\nprint(f\"Average scores of games published by Electronic Arts: {arts_mean}\")\nprint(f\"Average scores of games published by Square Enix: {enix_mean}\")\nprint(f\"Average scores of games published by Nintendo: {nintendo_mean}\")\nprint(f\"Average scores of games published by Ubisoft: {ubisoft_mean}\")\nprint(f\"Average scores of games published by Sony Interactive Entertainment: {sony_mean}\")","0e040c22":"score_means = [arts_mean, enix_mean, nintendo_mean, ubisoft_mean, sony_mean]\nlabels = [\"Electronic Arts\", \"Square Enix\", \"Nintendo\", \"Ubisoft\", \"Sony Interactive Entertainment\"]\n\nplt.figure(figsize=(12,8))\nplt.pie(score_means, labels = labels, autopct='%.2f%%')","459e6ac7":"df[\"developers\"].value_counts()","d926df86":"capcom_mean = df[df[\"developers\"] == \"Capcom\"][\"score\"].mean()\nbio_mean = df[df[\"developers\"] == \"BioWare\"][\"score\"].mean()\nea_mean = df[df[\"developers\"] == \"EA Canada\"][\"score\"].mean()\n\nprint(f\"Average scores of games developed by Capcom: {capcom_mean}\")\nprint(f\"Average scores of games developed by BioWare: {bio_mean}\")\nprint(f\"Average scores of games developed by EA Canada: {ea_mean}\")","ab8e6ac0":"dev_score_means = [capcom_mean, bio_mean, ea_mean]\nlabels = [\"Capcom\", \"BioWare\", \"EA Canada\"]\n\nplt.figure(figsize=(12,8))\nplt.pie(dev_score_means, labels = labels, autopct='%.2f%%')","9df73de7":"df[\"reviewed_by\"].value_counts().head(10)","6ecdef8e":"review_1 = df[df[\"reviewed_by\"] == \"Tristan Ogilvie\"][\"score\"].mean()\nreview_2 = df[df[\"reviewed_by\"] == \"Leana Hafer\"][\"score\"].mean()\nreview_3 = df[df[\"reviewed_by\"] == \"Luke Reilly\"][\"score\"].mean()\nreview_4 = df[df[\"reviewed_by\"] == \"Travis Northup\"][\"score\"].mean()\nreview_5 = df[df[\"reviewed_by\"] == \"Mitchell Saltzman\"][\"score\"].mean()\n\nprint(f\"Average scores of games reviewed by Tristan Ogilvie: {review_1}\")\nprint(f\"Average scores of games reviewed by Leana Hafer: {review_2}\")\nprint(f\"Average scores of games reviewed by Luke Reilly: {review_3}\")\nprint(f\"Average scores of games reviewed by Travis Northup: {review_4}\")\nprint(f\"Average scores of games reviewed by Mitchell Saltzman: {review_5}\")","2c9a073e":"df[\"release_date\"].unique()","f619bd39":"release_date_grouping = df.groupby(\"release_date\").mean()\nrelease_date_grouping[[\"score\"]]","6de960d0":"plt.figure(figsize=(12,8))\nrelease_date_grouping[\"score\"].plot(x=df.release_date)","73fbbdf3":"- In this small dataset, we will first look at the overall scores of developers and publishers.\n- Next, we'll look at the average ratings given by the reviewers.\n- Finally, we will draw a time series according to the release dates of the games and look at the score trend.","11af7523":"A similar process will be carried out in order to examine the scoring behavior of the reviewers.","9bc78a8a":"Pie chart for the publishers:","dc45cbdd":"- While there have been ups and downs, the scoring range seems to be stuck between 7-9.","c1716ef1":"- Finally, a time series will be created according to the release dates of the games.\n- The first release date we have is 2004-11-22 and the last release date is 2021-11-12.\n- This will give us the scoring behavior over the last 17 years.","a974aa1d":"Then the same will be done for the developer information. Since the numbers are small, only the first 3 developers information will be used.","0ade5e39":"Average of publishers by scores:","0ef9072f":"First, we look at the number of publishers in the dataset. Since the numbers are small, only the first 5 publisher information will be used."}}