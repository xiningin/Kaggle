{"cell_type":{"c1800157":"code","55dbe612":"code","4c2269e9":"code","b876bf38":"code","3c62f7e3":"code","b025e63a":"code","51b55114":"code","061dca68":"code","8ff7e449":"code","3a6fd00f":"code","1933b55f":"code","509949c3":"code","eaa41c26":"code","fc90d2e5":"code","8c9e820d":"code","9aaa8b89":"code","3938dad5":"code","afd4beab":"code","4cfbf6c1":"code","efc815f7":"code","2fc6c63f":"code","ec220b8f":"code","242bdda7":"code","075166c1":"code","8f968504":"code","ffc8261c":"code","fd3a9d10":"code","73f730a9":"code","4b720f60":"code","6a268351":"code","b99ef6bc":"code","27afa410":"code","b1efd885":"code","c8c78188":"code","3170253d":"code","7d995a59":"code","d6e75844":"code","c1df9b37":"code","97779d57":"code","1dad66c2":"code","80140681":"code","1569c8c3":"code","bd9888e1":"code","7ebcb496":"code","adc02c0a":"code","dacaadd0":"code","6e866af3":"code","f1b19b7b":"code","63491d22":"markdown","48d36ef9":"markdown","c43ceab9":"markdown","1433b225":"markdown","6fc052a0":"markdown","b171fdcb":"markdown","08e43ee4":"markdown","6ae17cba":"markdown","1c3dfaa5":"markdown","0186138d":"markdown","7e0d68fb":"markdown","aee2f7d7":"markdown","d644e4bc":"markdown","250c59e5":"markdown","e0b928ee":"markdown","fea4fbd7":"markdown"},"source":{"c1800157":"import pandas as pd\nimport seaborn as sns\nimport statistics as stats\ndf = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\ndf = df.drop(['Id'],axis = 1)","55dbe612":"df.info()","4c2269e9":"m,n = df.shape\nm,n","b876bf38":"df.describe()","3c62f7e3":"SepalLengthCm_mean = round(df['SepalLengthCm'].mean(),1)\nprint('Mean for SepalLengthCm:',SepalLengthCm_mean)\n\nSepalWidthCm_mean = round(df['SepalWidthCm'].mean(),1)\nprint('Mean for SepalWidthCm:',SepalWidthCm_mean)\n\nPetalLengthCm_mean = round(df['PetalLengthCm'].mean(),1)\nprint('Mean for PetalLengthCm:',PetalLengthCm_mean)\n\nPetalWidthCm_mean = round(df['PetalWidthCm'].mean(),1)\nprint('Mean for PetalWidthCm:',PetalWidthCm_mean)","b025e63a":"print('Mode for SepalLengthCm:',df['SepalLengthCm'].mode())\nprint('Mode for SepalWidthCm:',df['SepalWidthCm'].mode())\nprint('Mode for PetalLengthCm:',df['PetalLengthCm'].mode())\nprint('Mode for PetalWidthCm:',df['PetalWidthCm'].mode())","51b55114":"print('Median for SepalLengthCm:',df['SepalLengthCm'].median())\nprint('Median for SepalWidthCm:',df['SepalWidthCm'].median())\nprint('Median for PetalLengthCm:',df['PetalLengthCm'].median())\nprint('Median for PetalWidthCm:',df['PetalWidthCm'].median())","061dca68":"var1 = stats.variance(df['SepalLengthCm'])\nprint('Variance and Squared devaition for SepalLengthCm:',round(var1,2),round(var1**0.5,2))\n\nvar2 = stats.variance(df['SepalWidthCm'])\nprint('Variance and Squared devaition for SepalWidthCm:',round(var2,2),round((var2**0.5),2))\n      \nvar3 = stats.variance(df['SepalWidthCm'])\nprint('Variance and Squared devaition for PetalWidthCm:',round(var3,2),round((var3**0.5),2))\n    \nvar4 = stats.variance(df['SepalWidthCm'])\nprint('Variance and Squared devaition for PetalLengthCm:',round(var4,2),round((var4**0.5),2))","8ff7e449":"missing_values = ['?','-3.4','-2.19','-1']\nfault_df = pd.read_csv(\"..\/input\/irisfaultydatasets\/Iris-faulty-dataset.csv\",na_values = missing_values )\nfault_df.head(10)","3a6fd00f":"#Let's check if any missing values?\nprint(fault_df.isnull().values.any())","1933b55f":"# Total number of missing values\nprint(fault_df.isnull().sum().sum())","509949c3":"# Total missing values for each feature\nprint(fault_df.isnull().sum())","eaa41c26":"#Mean for SepalLengthCm: 5.8\n#Mean for SepalWidthCm: 3.1\n#Mean for PetalLengthCm: 3.8\n#Mean for PetalWidthCm: 1.2","fc90d2e5":"#Replacing missing values with Mean values of each attribute...\nfault_df['SepalLengthCm'].fillna(SepalLengthCm_mean,inplace = True)\nfault_df['SepalWidthCm'].fillna(SepalWidthCm_mean,inplace = True)\nfault_df['PetalLengthCm'].fillna(PetalLengthCm_mean,inplace = True)","8c9e820d":"fault_df.head(10)","9aaa8b89":"#If you want to round whole column...\nfault_df['SepalLengthCm'] = fault_df['SepalLengthCm'].round(1)\nfault_df.head(5)","3938dad5":"fault_df = fault_df.round({'SepalWidthCm': 1})","afd4beab":"fault_df.head(10)","4cfbf6c1":"fault_df.to_csv('solved_fault_df',index = False)","efc815f7":"#unique values for SepalLengthCm\nuqvalprob_SepalLengthCm = []\ndistinct_SepalLengthCm = df['SepalLengthCm'].unique()\nprint(f'Total distinct element in SepalLengthCm are {len(distinct_SepalLengthCm)} there max prob is:')\nfor elem in distinct_SepalLengthCm:\n    c = (df['SepalLengthCm']==elem).sum()\n    uqvalprob_SepalLengthCm.append(round((c\/m),2))\n    #print(f'P({elem}) = {round((c\/m),2)}')\nmaxuqvalprob_SepalLengthCm = max(uqvalprob_SepalLengthCm)\nprint(maxuqvalprob_SepalLengthCm)","2fc6c63f":"#unique values for SepalWidthCm\nuqvalprob_SepalWidthCm = []\ndistinct_SepalWidthCm = df['SepalWidthCm'].unique()\nprint(f'Total distinct element in SepalWidthCm are {len(distinct_SepalWidthCm)} there max prob is:')\nfor elem in distinct_SepalWidthCm:\n    c = (df['SepalWidthCm']==elem).sum() \n    uqvalprob_SepalWidthCm.append(round((c\/m),2))\n    #print(f'P({elem}) = {round((c\/m),2)}')\nmaxuqvalprob_SepalWidthCm = max(uqvalprob_SepalWidthCm)\nprint(maxuqvalprob_SepalWidthCm)","ec220b8f":"#unique values for PetalWidthCm\nuqvalprob_PetalWidthCm = []\ndistinct_PetalWidthCm = df['PetalWidthCm'].unique()\nprint(f'Total distinct element in PetalWidthCm are {len(distinct_PetalWidthCm)} there max prob is:')\nfor elem in distinct_PetalWidthCm:\n    c = (df['PetalWidthCm']==elem).sum()    \n    #print(f'P({elem}) = {round((c\/m),2)}')\n    uqvalprob_PetalWidthCm.append(round((c\/m),2))\nmaxuqvalprob_PetalLengthCm = max(uqvalprob_PetalWidthCm)\nprint(maxuqvalprob_PetalLengthCm)","242bdda7":"#unique values for PetalLengthCm\nuqvalprob_PetalLengthCm = []\ndistinct_PetalLengthCm = df['PetalLengthCm'].unique()\nprint(f'Total distinct element in PetalLengthCm are {len(distinct_PetalLengthCm)} there max prob is:')\nfor elem in distinct_PetalLengthCm:\n    c = (df['PetalLengthCm']==elem).sum() \n    uqvalprob_PetalWidthCm.append(round((c\/m),2))\n    #print(f'P({elem}) = {round((c\/m),2)}')\nmaxuqvalprob_PetalLengthCm = max(uqvalprob_PetalWidthCm)\nprint(maxuqvalprob_PetalLengthCm)","075166c1":"missing_values = ['?','-3.4','-2.19','-1']\nfault_df_m2 = pd.read_csv(\"..\/input\/irisfaultydatasets\/Iris-faulty-dataset.csv\",na_values = missing_values)\nfault_df_m2","8f968504":"#Replacing missing values with max value of distinct values probs...\nfault_df_m2['SepalLengthCm'].fillna(maxuqvalprob_SepalLengthCm,inplace = True)\nfault_df_m2['SepalWidthCm'].fillna(maxuqvalprob_SepalWidthCm,inplace = True)\nfault_df_m2['PetalLengthCm'].fillna(maxuqvalprob_PetalLengthCm,inplace = True)","ffc8261c":"fault_df_m2","fd3a9d10":"fault_df_m2.to_csv('solved_fault_df_m2',index = False)","73f730a9":"missing_values = ['?','-3.4','-2.19','-1']\nfault_df_m3 = pd.read_csv(\"..\/input\/irisfaultydatasets\/Iris-faulty-dataset.csv\",na_values = missing_values)\nfault_df_m3","4b720f60":"fault_df_m3['Species'].unique()","6a268351":"fault_df_m3['Species'].value_counts()","b99ef6bc":"sum_SepalLengthCm = (df['SepalLengthCm']).sum()\ns1_SepalLengthCm = (df['SepalLengthCm'][:50]).sum()\ns2_SepalLengthCm = (df['SepalLengthCm'][50:100]).sum()\ns3_SepalLengthCm = (df['SepalLengthCm'][100:]).sum()\n\nsum_SepalWidthCm = (df['SepalWidthCm']).sum()\ns1_SepalWidthCm = (df['SepalWidthCm'][:50]).sum()\ns2_SepalWidthCm = (df['SepalWidthCm'][50:100]).sum()\ns3_SepalWidthCm = (df['SepalWidthCm'][100:]).sum()\n\nsum_PetalLengthCm = (df['PetalLengthCm']).sum()\ns1_PetalLengthCm = (df['PetalLengthCm'][:50]).sum()\ns2_PetalLengthCm = (df['PetalLengthCm'][50:100]).sum()\ns3_PetalLengthCm = (df['PetalLengthCm'][100:]).sum()","27afa410":"#Replacing missing values with mean of Iris-setosa, Iris-versicolor, and Iris-virginica\nfault_df_m3['SepalLengthCm'].fillna(s1_SepalLengthCm\/50,inplace = True)\nfault_df_m3['SepalWidthCm'].fillna(s2_SepalWidthCm\/50,inplace = True)\nfault_df_m3['PetalLengthCm'].fillna(s3_PetalLengthCm\/50,inplace = True)","b1efd885":"fault_df_m3","c8c78188":"fault_df_m3.to_csv('solved_fault_df_m3',index = False)","3170253d":"outliers_df = pd.read_csv(\"..\/input\/iris-outliers-extremes\/Iris_outliers.csv\")\noutliers_df","7d995a59":"sns.boxplot(data = outliers_df,x = outliers_df[\"SepalLengthCm\"])","d6e75844":"Q1 = outliers_df['SepalLengthCm'].quantile(0.25)\nQ3 = outliers_df['SepalLengthCm'].quantile(0.75)\n\nIQR = Q3-Q1\n\nprint(f'Q1 = {Q1}')\nprint(f'Q3 = {Q3}')\nprint(f'IQR = {IQR}')\n\nLower_limit = Q1-(1.5*IQR)\nUpper_limit = Q3+(1.5*IQR)\n\nprint(f'Lower limit: {Lower_limit} Upper limit: {Upper_limit}')\n","c1df9b37":"#outliers_df[outliers_df['SepalLengthCm']<Upper_limit]\noutliers = []\nfor i in range(150):\n    if outliers_df['SepalLengthCm'][i]>8.5625:\n        outliers.append(outliers_df['SepalLengthCm'][i])\nprint(outliers)","97779d57":"for i in range(150):\n    if outliers_df['SepalLengthCm'][i]>Upper_limit:\n        outliers_df['SepalLengthCm'][i] = SepalLengthCm_mean\noutliers_df","1dad66c2":"sns.boxplot(data = outliers_df,x = outliers_df[\"SepalLengthCm\"])","80140681":"outliers_df.to_csv(\"removed_outliers_df\",index = False)","1569c8c3":"removed_outliers_df = pd.read_csv(\".\/removed_outliers_df\")\nremoved_outliers_df","bd9888e1":"max_SL = max(df['SepalLengthCm'])\nmin_SL = min(df['SepalLengthCm'])\nprint(f'Max of SepalLengthCm = {max_SL} Min of SepalLengthCm = {min_SL}')\n","7ebcb496":"#Normalizing only for SepalLengthCm for the Iris-dataset and suppose we would like to range form [0.0,1.0].\n#So, here new_max = 1.0 and new_min = 0.0\nnew_max = 1.0\nnew_min = 0.0\n\nfor i in range(150):\n    value = (((df['SepalLengthCm'][i]-min_SL)\/(max_SL-min_SL))*(new_max-new_min))+new_min\n    df['SepalLengthCm'][i] = round(value,3)\nprint(df['SepalLengthCm'])\ndf","adc02c0a":"# Normalizing for SepalWidthCm for the Iris-dataset using Z-score...\nSepalWidthCm_std = round(var2**0.5,2)\nprint(f'Mean of SepalWidthCm = {SepalWidthCm_mean} and Standard Deviation for SepalWidthCm = {SepalWidthCm_std}')","dacaadd0":"for i in range(150):\n    value = (df['SepalWidthCm'][i]-SepalWidthCm_mean)\/(SepalWidthCm_std)\n    df['SepalWidthCm'][i] = round(value,3)\nprint(df['SepalWidthCm'])\ndf","6e866af3":"max_abs_PetalLengthCm = max(df['PetalLengthCm'],key = abs)\nprint(max_abs_PetalLengthCm)","f1b19b7b":"# Max absolute value for PetalLengthCm is 6.9, where j = 1;\nj = 1\nfor i in range(150):\n    value = (df['PetalLengthCm'][i])\/(10**j)\n    df['PetalLengthCm'][i] = round(value,3)\nprint(df['PetalLengthCm'])\ndf","63491d22":"***We can see few have '?'and some have negative values and length can never be measured in negative***\n\n**Note: I have used '?' to show how to handle missing values, it's possible you might have 'NaN' for that use isnull().Give a read(link below).**\n[https:\/\/towardsdatascience.com\/data-cleaning-with-python-and-pandas-detecting-missing-values-3e9c6ebcf78b](http:\/\/)\n\n*Start with summarizing missing values*\n***and than we will replace these values with mean calculated above***","48d36ef9":"# 5.2) Z-Score Normalization\n![Z-SCORE.PNG](attachment:Z-SCORE.PNG)","c43ceab9":"*# Now we will Normalize the PetalLengthCm using Decimal Scaling*\n**[Find absolute value of list ](https:\/\/stackoverflow.com\/questions\/44864633\/pythonic-way-to-find-maximum-absolute-value-of-list)**","1433b225":"# Probability of each distinct values for each column...","6fc052a0":"# ***Using IQR Method to detect outliers***","b171fdcb":"***So we have total 3 missing values for 'SepalLengthCm' and 'SepalWidthCm', and 1 for 'PetalWidthCm'.***\n**So let's replace these with mean of each attributes**","08e43ee4":"# Module 2","6ae17cba":"# Module 4\n# Outliers and Extreme Values:\n\n***An outlier is a data point in a data set that is distant from all other observation.***\n\n***An Extreme value is just a minimum or a maximum, it need not be much different from of the data.***\n\n**Difference between Extreme value & Outlier**\n\n*An Extreme value is just a minimum or a maximum, it need not be much different from the data & a point that is far a way from the other points called as outlier.*","1c3dfaa5":"**ALL THE VALUES FOR THE SEPALENGTHCM ATTRIBUTE HAVE BEEN NORMALIZED IN RANGE OF [ 0.0, 1.0 ]**","0186138d":"# 5.3) Normalization by decimal scaling\n![decimalscaling.PNG](attachment:decimalscaling.PNG)","7e0d68fb":"# Module 3","aee2f7d7":"# Mean, Median, Mode, Standard Deviation, Variance","d644e4bc":"# How can we Identify an outlier?\n***1) Using Box plots***\n\n***2) Using Scatter plot***\n\n***3) Using Z score***\n\n#  There are Two Methods for Outlier Treatment\n\n***1) Interquartile Range(IQR) Method***\n\n***2) Z Score method***","250c59e5":"***if you just wanted to round each column to one digit. Click the link given and give a read...***[https:\/\/stackoverflow.com\/questions\/26133538\/round-a-single-column-in-pandas](http:\/\/)","e0b928ee":"# Module 5\n\n# 5.1) **Normalization by Min-Max** \n\n![Min-Max%20Normalization.PNG](attachment:Min-Max%20Normalization.PNG)\n","fea4fbd7":"# Handling missing values...\n***Another dataset iris- faulty-dataset is used to just show how to handle missing values***\n\n# Module 1"}}