{"cell_type":{"b3eb3152":"code","0b53a68f":"code","02d5a912":"code","3573c6fd":"code","68615e78":"code","d1d5ee0c":"code","cfff66ec":"code","1fce353d":"code","8f59c745":"code","8b78d5cb":"code","5a4ccd94":"code","29742a7b":"code","72559e81":"code","e9ded842":"code","40f33c3a":"code","a897541d":"code","c9f2f4e6":"code","d6258627":"code","a5f96142":"code","0df3f4bd":"code","1bde504a":"code","25a2308e":"code","ad572744":"code","1857c7ad":"code","459373d4":"code","52e356c3":"code","c9587300":"code","58b3d995":"code","b740a40e":"code","33ac802d":"code","17dc3dc2":"code","24a6ba35":"code","b82e0b4a":"code","c9f8f5db":"code","3fed2dd2":"code","8df23264":"code","68232977":"code","006311fb":"code","b0637b9b":"code","40f7c54e":"code","0c15801b":"code","362f72b1":"code","a6a653fc":"code","40c82030":"code","d393f783":"code","a34678b2":"code","03d268fe":"code","43f6c3b9":"code","f4671f80":"code","b4f218d5":"code","1df29b08":"code","d72071c6":"code","acc8f8ff":"code","84e2e6a0":"code","b9243b14":"code","33a51ae0":"code","c4d79b2d":"code","acca4c94":"code","f4d1ae27":"code","c8e2dac4":"code","eb07d37f":"code","3812d2a0":"code","baae8598":"code","73463496":"code","528c601d":"code","03c597ef":"code","5c699265":"code","99305113":"code","936f5a36":"code","a6a3e444":"code","bce203b9":"code","3bfa1949":"code","950f816e":"code","46ad222b":"code","d9d85b2a":"code","bf0bb576":"code","5c80f965":"code","3a6c3543":"code","3c78af3b":"code","23803beb":"code","5d8b2ef8":"code","6e67f05f":"code","7f34a141":"code","4ac9d554":"code","9853daaa":"code","c8845d19":"code","20b1bcf0":"code","f9789369":"code","41c75b63":"code","4a7c4540":"code","91e0d26b":"code","ff93eda8":"code","27bac8cf":"code","460e1c6d":"code","cf2a80c4":"code","7edb583c":"code","212aa6c0":"code","7d28c9c1":"code","7bbde53f":"code","119936b9":"code","b3e06f18":"code","1453d02e":"code","79a6b61e":"markdown","7a4c610c":"markdown","79966369":"markdown","5606e306":"markdown","fb6572fd":"markdown","4cd66141":"markdown","1841c551":"markdown","083fa32f":"markdown","d5a6a4f3":"markdown","fc12e498":"markdown","6004e567":"markdown","cd7e58ef":"markdown","95cec81b":"markdown","9885b69b":"markdown","1dca63e9":"markdown","5724c722":"markdown","0ae1c884":"markdown","c8e2a86c":"markdown","e60a2417":"markdown","db4f7d7a":"markdown","5dc6b527":"markdown","44ec486c":"markdown","26fa8b18":"markdown","bdd67ceb":"markdown","180a2c8c":"markdown","f7f70ed4":"markdown","68357184":"markdown","05a109a3":"markdown","318b7b90":"markdown","b15bc553":"markdown","9f31e068":"markdown","ffb1ee50":"markdown","0befcfc3":"markdown","25308322":"markdown","fc64b97b":"markdown","10be3a5d":"markdown","b789aa38":"markdown","e2848f66":"markdown","9d8f9480":"markdown","9ffae06c":"markdown","b3c6d0b6":"markdown","83950179":"markdown","7302cccf":"markdown","ccb355b7":"markdown","07bca185":"markdown","fd2f3301":"markdown","6bda83fd":"markdown","9c5d8c49":"markdown","a14d1f0e":"markdown","5e933873":"markdown","98a1446b":"markdown","28dc4777":"markdown","037f9353":"markdown","8d181312":"markdown","66edc72a":"markdown","d30a6bdd":"markdown","148b3940":"markdown","ce377773":"markdown","37ad5b0a":"markdown","543253d3":"markdown","83bf1ff7":"markdown","fed0b5ab":"markdown","25539e4d":"markdown","26849119":"markdown","e24988d1":"markdown","d817e437":"markdown","8ff35355":"markdown","4fa4ff58":"markdown","6cacdc26":"markdown","741643ec":"markdown","8a11dc55":"markdown","9ceef748":"markdown","c64f7cff":"markdown","f2c8d52e":"markdown","37f06c5a":"markdown","a94bee8d":"markdown","bb27fad4":"markdown","8a03f463":"markdown","166d0074":"markdown"},"source":{"b3eb3152":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))","0b53a68f":"IS_LOCAL = False\n\nif IS_LOCAL:\n    PATH=\"drive\/colab\/Kakr_2nd\/data\/\"\nelse:\n    PATH=\"..\/input\/\"","02d5a912":"train = pd.read_csv(PATH+\"train.csv\")\ntest = pd.read_csv(PATH+\"test.csv\")","3573c6fd":"print(\"The Dataset's shape for train is {}, for test is {}\".format(train.shape,test.shape))","68615e78":"train.head()","d1d5ee0c":"train.describe()","cfff66ec":"train.info()","1fce353d":"def draw_kdeplot(column):\n\n    plt.figure(figsize=[8,6])\n    \n    sns.kdeplot(train[column],bw=0.5,label='train')\n    sns.kdeplot(test[column],bw=0.5,label='test')\n    \n    plt.xlabel(column,fontsize=12)\n    plt.title(f\"Distribution of {column}\",fontsize=20)\n    plt.show()","8f59c745":"def make_count_df(df,column):\n    dummy = df.copy()\n    result_df = dummy[column].value_counts().sort_index().to_frame().reset_index().rename(columns={\"index\":column,column:\"counts\"})\n    return result_df","8b78d5cb":"def compare_categorical_ratio(count_train,count_test,column,adjust_x_annotate=5,fontsize=14):\n    fig, ax = plt.subplots(1,2,figsize=[12,6])\n    \n    ax1 = plt.subplot(1,2,1)\n    sns.barplot(x=column,y='counts',data=count_train,label='train')\n\n    for p in ax1.patches:\n        ax1.annotate('{:.2f}%'.format(p.get_height()\/count_train[\"counts\"].sum()) , (p.get_x()+p.get_width()\/adjust_x_annotate, p.get_height()),fontsize=fontsize)\n\n    ax2 = plt.subplot(1,2,2)\n    sns.barplot(x=column,y='counts',data=count_test,label='test')\n\n    for p in ax2.patches:\n        ax2.annotate('{:.2f}%'.format(p.get_height()\/count_test[\"counts\"].sum()) , (p.get_x()+p.get_width()\/adjust_x_annotate, p.get_height()),fontsize=fontsize)\n\n    plt.suptitle(f\"Comparing btw train and test about {column}\")\n    plt.show()","5a4ccd94":"train.date.head(10)","29742a7b":"train.date.apply(lambda x:str(x)[-7:]).value_counts()","72559e81":"print(\"Minimum value of Price is {}, Maximum value of Price is {}\".format(train.price.min(),train.price.max()))","e9ded842":"plt.figure(figsize=[8,4])\nsns.distplot(train.price,hist=False,label='train',color='blue')\nplt.xticks(rotation=60)\nplt.title(\"Distribution of Price value\")","40f33c3a":"train.bedrooms.value_counts().sort_index()","a897541d":"bedroom_train = make_count_df(train,\"bedrooms\")\nbedroom_test = make_count_df(test,\"bedrooms\")","c9f2f4e6":"plt.figure(figsize=[8,6])\n\n# ax = train.bedrooms.value_counts().sort_index().to_frame().plot(kind='bar',linewidth=2,figsize=[8,6])\n# for p in ax.patches:\n#     ax.annotate(p.get_height(), (p.get_x()-0.05, p.get_height()))\n\nsns.barplot(x='bedrooms',y='counts',data=bedroom_train,label='train',color='red')\nsns.barplot(x='bedrooms',y='counts',data=bedroom_test,label='test',color='blue')\nplt.legend()\nplt.ylabel(\"# of Bedrooms\",fontsize=12)\nplt.xlabel(\"Bedrooms\",fontsize=12)\n\nplt.title(\"Number of Bedrooms\",fontsize=20)","d6258627":"train.bathrooms.value_counts().head()","a5f96142":"plt.figure(figsize=[8,6])\n\nsns.kdeplot(train.bathrooms,bw=0.5,label='train')\nsns.kdeplot(test.bathrooms,bw=0.5,label='test')\n\nplt.xlabel(\"Bathrooms(# of Bathrooms \/ # of Bedrooms)\",fontsize=12)\nplt.title(\"Distribution of Bathrooms(# of Bathrooms \/ # of Bedrooms)\",fontsize=20)","0df3f4bd":"train.bathrooms.mul(train.bedrooms).head()","1bde504a":"print(\"The min number of real bathroom is {}, max number of real bathroom is {}\".format(train.bathrooms.mul(train.bedrooms).min(),train.bathrooms.mul(train.bedrooms).max()))","25a2308e":"fig,ax = plt.subplots(1,2,figsize=[12,6])\n\nax1 = plt.subplot(1,2,1)\nsns.kdeplot(train.sqft_living,bw=0.5,label=\"train\")\nsns.kdeplot(test.sqft_living,bw=0.5,label='test')\nax1.set_xlabel(\"sqft_living\",fontsize=12)\n\nax2 = plt.subplot(1,2,2)\nsns.kdeplot(train.sqft_lot,bw=0.5,label=\"train\")\nsns.kdeplot(test.sqft_lot,bw=0.5,label='test')\nax2.set_xlabel(\"sqft_lot\",fontsize=12)\n\nplt.suptitle(\"Distribution of sqft_living and sqft_lot\")","ad572744":"train.floors.value_counts()","1857c7ad":"draw_kdeplot(\"floors\")","459373d4":"waterfront_train = make_count_df(train,\"waterfront\")\nwaterfront_test = make_count_df(test,\"waterfront\")","52e356c3":"compare_categorical_ratio(waterfront_train,waterfront_test,\"waterfront\",3)","c9587300":"train.view.value_counts().sort_index()","58b3d995":"view_train= make_count_df(train,\"view\")\nview_test = make_count_df(test,\"view\")","b740a40e":"compare_categorical_ratio(view_train,view_test,\"view\",10)","33ac802d":"condition_train = make_count_df(train,\"condition\")\ncondition_test = make_count_df(test,\"condition\")","17dc3dc2":"compare_categorical_ratio(condition_train,condition_test,\"condition\",8)","24a6ba35":"grade_train = make_count_df(train,\"grade\") \ngrade_test = make_count_df(test,\"grade\")","b82e0b4a":"compare_categorical_ratio(grade_train,grade_test,\"grade\",adjust_x_annotate=20,fontsize=10)","c9f8f5db":"fig,ax = plt.subplots(1,2,figsize=[12,6])\n\nax1 = plt.subplot(1,2,1)\nsns.kdeplot(train.sqft_above,bw=0.5,label=\"train\")\nsns.kdeplot(test.sqft_above,bw=0.5,label='test')\nax1.set_xlabel(\"sqft_above\",fontsize=12)\n\nax2 = plt.subplot(1,2,2)\nsns.kdeplot(train.sqft_basement,bw=0.5,label=\"train\")\nsns.kdeplot(test.sqft_basement,bw=0.5,label='test')\nax2.set_xlabel(\"sqft_basement\",fontsize=12)\n\nplt.suptitle(\"Distribution of sqft_above and sqft_basement\")","3fed2dd2":"print(\"Ratio of 0 in sqft_basement of train_set {:.2f}% among {}\".format(sum(train.sqft_basement==0)\/len(train)*100,len(train)))\nprint(\"Ratio of 0 in sqft_basement of test_set {:.2f}% among {}\".format(sum(test.sqft_basement==0)\/len(test)*100,len(test)))","8df23264":"fig,ax = plt.subplots(1,2,figsize=[12,6])\n\nax1 = plt.subplot(1,2,1)\nsns.kdeplot(train.yr_built,bw=0.5,label=\"train\")\nsns.kdeplot(test.yr_built,bw=0.5,label='test')\nax1.set_xlabel(\"yr_built\",fontsize=12)\n\nax2 = plt.subplot(1,2,2)\nsns.kdeplot(train.yr_renovated,bw=0.5,label=\"train\")\nsns.kdeplot(test.yr_renovated,bw=0.5,label='test')\nax2.set_xlabel(\"yr_renovated\",fontsize=12)\n\nplt.suptitle(\"Distribution of yr_built and yr_renovated\")","68232977":"plt.figure(figsize=[6,6])\n\nsns.kdeplot(train.loc[train[\"yr_renovated\"]!= 0,\"yr_renovated\"],bw=0.5,label=\"train\")\nsns.kdeplot(test.loc[test[\"yr_renovated\"]!= 0,\"yr_renovated\"],bw=0.5,label=\"test\")\nplt.xlabel(\"yr_renovated\")\nplt.title(\"yr_renovated except for 0\")","006311fb":"print(\"Ratio of 0 in yr_renovated of train_set {:.2f}% among {}\".format(sum(train.yr_renovated==0)\/len(train)*100,len(train)))\nprint(\"Ratio of 0 in yr_renovated of test_set {:.2f}% among {}\".format(sum(test.yr_renovated==0)\/len(test)*100,len(test)))","b0637b9b":"train.zipcode.head()","40f7c54e":"str(train.zipcode[0])","0c15801b":"import re\n\nre1='(\\\\d{5})'\nrg = re.compile(re1)\n\ndummy_train = train.zipcode.apply(lambda x :rg.search(str(x)))\ndummy_test = test.zipcode.apply(lambda x :rg.search(str(x)))","362f72b1":"print(\"The number of unexpected form about zipcode of train_set {}\".format(sum(dummy_train == 0)))\nprint(\"The number of unexpected form about zipcode of test_set {}\".format(sum(dummy_test == 0)))","a6a653fc":"plt.scatter(x=train.long,y=train.lat,color='red',label='train',alpha=0.7)\nplt.scatter(x=test.long,y=test.lat,color='blue',label='test',alpha=0.7)\nplt.legend()\nplt.xlabel(\"longitude\",fontsize=14)\nplt.ylabel(\"latitude\",fontsize=14)\nplt.title(\"Distribution of lat and long about train and test set\")","40c82030":"sns.jointplot(x='long',y='lat',data=train,kind=\"hex\")\nplt.suptitle(\"Longitude and Latitude Distribution of train_set\")","d393f783":"sns.jointplot(x='long',y='lat',data=test,kind=\"hex\")\nplt.suptitle(\"Longitude and Latitude Distribution of test_set\")","a34678b2":"def decomposition_date(df):\n    dummy = df.copy()\n    \n    dummy[\"date\"] = pd.to_datetime(dummy[\"date\"])\n    \n    dummy[\"year\"] = dummy.date.apply(lambda x: str(x).split(\"-\")[0]).astype('int')\n    dummy[\"month\"] = dummy.date.apply(lambda x:str(x).split(\"-\")[1]).astype('int')\n    dummy[\"day\"] = dummy.date.apply(lambda x:str(x).split(\"-\")[-1]).apply(lambda x:x.split(\" \")[0]).astype('int')\n    \n    return dummy","03d268fe":"decom_train = decomposition_date(train)\ndecom_test = decomposition_date(test)","43f6c3b9":"decom_train.groupby('year')['price'].agg(['mean','median'])","f4671f80":"decom_train.groupby('year')['price'].agg(['mean','median']).plot(kind='bar',linewidth=2)\nplt.title(\"Mean and Median by Year\")\n\ndecom_train.groupby('month')['price'].agg(['mean','median']).plot(kind='bar',linewidth=1,figsize=[8,6])\nplt.title(\"Mean and Median by Month\")\n\ndecom_train.groupby('day')['price'].agg(['mean','median']).plot(kind='bar',linewidth=1,figsize=[20,6])\nplt.title(\"Mean and Median by Day\")","b4f218d5":"ax = decom_train.groupby('bedrooms')['price'].agg(['mean','median']).plot(kind='bar',linewidth=2,figsize=[10,6])\n\nfor i,p in enumerate(ax.patches):\n    if i < 11:\n        ax.annotate(decom_train.bedrooms.value_counts().sort_index()[i],(p.get_x()+p.get_width()*0.5, p.get_y()+p.get_height()*1.01),fontsize=15,rotation=45)\n\nplt.title(\"Mean, Median value by Bedrooms\",fontsize=20)\nplt.xlabel(\"Bedrooms\",fontsize=12)\nplt.ylabel(\"Price\",fontsize=12)","1df29b08":"plt.figure(figsize=[12,6])\nsns.barplot(x='bathrooms',y='price',data=decom_train)","d72071c6":"def float_with_price(xlabel,df):\n    fig,ax = plt.subplots(1,2,figsize=[14,6])\n\n    ax1 = plt.subplot(1,2,1)\n    sns.scatterplot(x=xlabel,y='price',data=df,ci=0.95)\n    ax1.set_title(f\"Scatterplot about {xlabel} with price\",fontsize=14)\n    ax2 = plt.subplot(1,2,2)\n    sns.regplot(x=xlabel,y='price',data=df,ci=0.95)\n    ax2.set_title(f\"Regplot about {xlabel} with price\",fontsize=14)\n    plt.xticks(rotation=60)\n    plt.suptitle(f\"Relationship about {xlabel} with price\",fontsize=20)","acc8f8ff":"float_with_price(\"sqft_living\",train)","84e2e6a0":"float_with_price(\"sqft_lot\",train)","b9243b14":"def ordinal_with_price(xlabel,df,rotation=0):\n    \n    fig,ax = plt.subplots(1,2,figsize=[14,6])\n\n    ax1 = plt.subplot(1,2,1)\n    sns.barplot(x=xlabel,y=\"price\",data=train)\n    ax1.set_xlabel(xlabel,fontsize=12)\n    ax1.set_ylabel(\"price\",fontsize=12)\n    ax1.set_title(f\"Barplot about {xlabel} with price\",fontsize=18)\n    \n    for i,p in enumerate(ax1.patches):\n\n        ax1.annotate(s=train[xlabel].value_counts().sort_index().values[i],xy= (p.get_x()+p.get_width()\/len(train[xlabel].value_counts()), p.get_height()*1.05),fontsize=15,rotation=rotation)\n        \n    ax2 = plt.subplot(1,2,2)\n    sns.boxplot(x=xlabel,y='price',data=train)\n    ax2.set_xlabel(xlabel,fontsize=12)\n    ax2.set_ylabel(\"price\",fontsize=12)\n    ax2.set_title(f\"Boxplot about {xlabel} with price\",fontsize=18)\n    \n    plt.suptitle(f\"Relationship about {xlabel} with price\",fontsize=20)","33a51ae0":"ordinal_with_price(\"floors\",train)","c4d79b2d":"ordinal_with_price(\"waterfront\",train)","acca4c94":"ordinal_with_price(\"view\",train)","f4d1ae27":"ordinal_with_price(\"condition\",train)","c8e2dac4":"ordinal_with_price(\"grade\",train,rotation=60)","eb07d37f":"float_with_price(\"sqft_above\",train)","3812d2a0":"float_with_price(\"sqft_basement\",train)","baae8598":"float_with_price(\"yr_built\",train)","73463496":"float_with_price(\"yr_renovated\",train)","528c601d":"float_with_price(\"sqft_living15\",train)","03c597ef":"float_with_price(\"sqft_lot15\",train)","5c699265":"skewed_cols = [\"bedrooms\",\"sqft_living\",\"sqft_lot\",\"sqft_above\",\"sqft_basement\",\"sqft_living15\",\"sqft_lot15\"]","99305113":"def to_logarithm(df,cols):\n    \n    result_df = df.copy()\n    \n    for col in cols:\n        result_df[col] = np.log1p(result_df[col])\n        \n    return result_df","936f5a36":"log_train = to_logarithm(train,skewed_cols)\nlog_test = to_logarithm(test,skewed_cols)","a6a3e444":"def making_additional_cols(df):\n    \n    result_df = df.copy()\n    \n    result_df['date'] = result_df['date'].apply(lambda e: e.split('T')[0])\n    result_df['yr_renovated'] = result_df['yr_renovated'].apply(lambda x: np.nan if x == 0 else x)\n    result_df['renovated'] = result_df['yr_renovated'].apply(lambda x: np.nan if x == 0 else x)\n    result_df['yr_renovated'] = result_df['yr_renovated'].fillna(result_df['yr_built'])\n    result_df['renovated'] = result_df['renovated'].fillna(0)\n    result_df['yr_renovated'] = result_df['yr_renovated'].astype('int')\n    \n    result_df.loc[result_df.renovated > 0,'renovated']= 1.0\n    \n    result_df['total_rooms'] = result_df['bedrooms'] + result_df['bathrooms']\n    result_df['sqft_ratio'] = result_df['sqft_living'] \/ result_df['sqft_lot']\n    result_df['sqft_total_size'] = result_df['sqft_above'] + result_df['sqft_basement']\n    result_df['sqft_ratio_1'] = result_df['sqft_living'] \/ result_df['sqft_total_size']\n    result_df['sqft_ratio15'] = result_df['sqft_living15'] \/ result_df['sqft_lot15']\n    \n    result_df[\"year\"] = pd.to_numeric(result_df.date.apply(lambda x:x[:4]))\n    result_df[\"month\"] = pd.to_numeric(result_df.date.apply(lambda x:x[4:6]))\n    result_df.drop(\"date\",axis=1,inplace=True)\n    \n    return result_df","bce203b9":"adj_log_train = making_additional_cols(log_train)\nadj_log_test = making_additional_cols(log_test)","3bfa1949":"adj_log_train.head()","950f816e":"adj_log_train.head()","46ad222b":"adj_log_train[\"price\"] = np.log1p(adj_log_train[\"price\"])","d9d85b2a":"X_adj_log_train = adj_log_train[adj_log_train.columns.values[2:]]\ny_adj_log_train = adj_log_train[\"price\"]\nX_adj_log_test = adj_log_test[adj_log_test.columns.values[1:]]","bf0bb576":"predictions_dict = dict()\nscores_dict = dict()","5c80f965":"import xgboost as xgb\nfrom sklearn.model_selection import StratifiedKFold,KFold\nfrom sklearn.metrics import mean_squared_error\n\n# price\ub97c \ub85c\uadf8\ud654 \ud558\uae30 \uc804\uc5d0 \uc0ac\uc6a9\ud588\ub358 xgboost\ud3c9\uac00 \ud568\uc218\ndef xgb_rmse(preds,dtrain):\n    \n    labels = dtrain.get_label()\n    \n    score = np.sqrt(mean_squared_error(labels,preds))\n  \n    return \"xgb_rmse\",score\n\n# \ub85c\uadf8\ud654\ub41c price\ub97c \uc0ac\uc6a9\ud558\ub294 xgboost\ud3c9\uac00 \ud568\uc218\ndef log_xgb_rmse(preds,dtrain):\n    \n    labels = dtrain.get_label()\n    \n    score = np.sqrt(mean_squared_error(np.expm1(labels),np.expm1(preds)))\n  \n    return \"xgb_rmse\",score\n\n# xgboost \uc2e4\ud589 \ud568\uc218\ndef model_xgb(X_train,y_train,X_test,nfolds=5,hyperparameters=None,logarithm=False):\n    \n    feature_names = X_train.columns.values\n    \n    valid_scores = np.zeros(len(X_train))\n    predictions = np.zeros(len(X_test))\n    \n    valid_scores_list = []\n    \n    importances = np.zeros(len(feature_names))\n    \n    feature_importance_df = pd.DataFrame()\n    feature_importance_df[\"features\"] = feature_names\n    \n    if hyperparameters:\n        params = hyperparameters\n      \n    else:\n        params = {\n            'base_score': 0.5,\n             'booster': 'gbtree',\n             'colsample_bylevel': 1,\n             'colsample_bytree': 1,\n             'gamma': 0,\n             'importance_type': 'gain',\n             'learning_rate': 0.1,\n             'max_delta_step': 0,\n             'max_depth': 3,\n             'min_child_weight': 1,\n             'missing': None,\n             'n_estimators': 100,\n             'n_jobs': 1,\n             'nthread': None,\n             'objective': 'reg:linear',\n             'random_state': 101,\n             'reg_alpha': 0,\n             'reg_lambda': 1,\n             'scale_pos_weight': 1,\n             'seed': None,\n             'silent': True,\n             'subsample': 1}\n    \n    xgbr = xgb.XGBRegressor(**params)\n    \n    if logarithm:\n        fold = KFold(n_splits=nfolds,shuffle=True,random_state=12)\n        e_metric = log_xgb_rmse\n    else:\n        fold = StratifiedKFold(n_splits=nfolds,shuffle=True,random_state=12)\n        e_metric = xgb_rmse\n    \n    print(params)\n    \n    for i,(train_indices,valid_indices) in enumerate(fold.split(X_train.values,y_train.values)):\n        \n        X = X_train.loc[train_indices]\n        y = y_train.loc[train_indices]\n        X_valid = X_train.loc[valid_indices]\n        y_valid = y_train.loc[valid_indices]\n        \n        print(\"{} fold processing\".format(i+1),\"#\"*20)\n        \n        xgbr.fit(X,y,eval_metric=log_xgb_rmse,verbose=500,early_stopping_rounds=250,eval_set=[(X,y),(X_valid,y_valid)])\n  \n        valid_scores_list.append(xgbr.get_booster().best_score)\n        \n        feature_importance_df[f\"{i+1}\"] = xgbr.feature_importances_\n        \n        if logarithm:\n            valid_score = np.expm1(xgbr.predict(X_valid))\n            prediction = np.expm1(xgbr.predict(X_test))\n        \n        else:\n            valid_score = xgbr.predict(X_valid)\n            prediction = xgbr.predict(X_test)\n        \n        valid_scores[valid_indices] += valid_score\n        predictions += prediction \/ nfolds\n    \n    valid_mean_score = np.mean(valid_scores_list)\n    \n    print(f\"mean_valid_score is {valid_mean_score} at {nfolds}\")\n    \n    feature_importance_df[\"mean\"] = feature_importance_df[feature_importance_df.columns.values[1:]].mean(axis=1)\n    feature_importance_df[\"std\"] = feature_importance_df[feature_importance_df.columns.values[1:]].mean(axis=1)\n    \n    fi_sorted = feature_importance_df.sort_values(\"mean\",ascending=False)\n    \n    plt.figure(figsize=[6,40])\n    sns.barplot(x=\"mean\",y=\"features\",data=fi_sorted,xerr=fi_sorted[\"std\"])\n    plt.title(\"Feature Importances of xgboost\",fontsize=12)\n    plt.show()\n        \n        \n    return valid_mean_score, predictions\n","3a6c3543":"tuned_params = {\n    'alpha': 0.23381888633529596,\n    'booster': 'gbtree',\n    'colsample_bytree': 0.5833187080443007,\n    'gamma': 0.11877149186475625,\n    'lambda': 0.7815712086648032,\n    'learning_rate': 0.060873580474025094,\n    'max_depth': 7,\n    'min_child_weight': 5,\n    'n_estimators': 3000, #1046\n    'objective': 'reg:linear',\n    'random_state': 101,\n    'subsample': 0.6307967933325185}","3c78af3b":"valid_score,predictions = model_xgb(X_train=X_adj_log_train,X_test=X_adj_log_test,y_train=y_adj_log_train,hyperparameters=tuned_params,logarithm=True)","23803beb":"target = \"xgb_uni_5\"\nscores_dict[target] = valid_score\npredictions_dict[target] = predictions","5d8b2ef8":"submission = pd.read_csv(PATH+\"sample_submission.csv\")\nsubmission[\"price\"] = predictions\nsubmission.to_csv(\"xgb_uni_layer_5.csv\",index=False)","6e67f05f":"valid_score, predictions = model_xgb(X_train=X_adj_log_train,X_test=X_adj_log_test,y_train=y_adj_log_train,hyperparameters=tuned_params,logarithm=True,nfolds=10)","7f34a141":"target = \"xgb_uni_10\"\nscores_dict[target] = valid_score\npredictions_dict[target] = predictions","4ac9d554":"submission = pd.read_csv(PATH+\"sample_submission.csv\")\nsubmission[\"price\"] = predictions\nsubmission.to_csv(\"xgb_uni_layer_10.csv\",index=False)","9853daaa":"import lightgbm as lgb\nfrom sklearn.model_selection import StratifiedKFold,KFold\nfrom sklearn.metrics import mean_squared_error\n\n# price\ub97c \ub85c\uadf8\ud654 \ud558\uae30 \uc804\uc5d0 \uc0ac\uc6a9\ud588\ub358 lighgbm\ud3c9\uac00 \ud568\uc218\ndef lgb_rmse(y,preds):\n    \n    score = np.sqrt(mean_squared_error(y,preds))\n  \n    return \"lgb_rmse\",score,False\n\n# price\ub97c \ub85c\uadf8\ud654 \ud55c \ud6c4\uc5d0 \uc0ac\uc6a9\ud558\ub294 lightgbm\ud3c9\uac00 \ud568\uc218\ndef log_lgb_rmse(y,preds):\n    \n    score = np.sqrt(mean_squared_error(np.expm1(y),np.expm1(preds)))\n  \n    return \"lgb_rmse\",score,False\n\n# lightgbm \uc2e4\ud589\ud568\uc218\ndef model_lgb(X_train,y_train,X_test,nfolds=5,hyperparameters=None,logarithm=False):\n    \n    feature_names = X_train.columns.values\n    \n    valid_scores = np.zeros(len(X_train))\n    predictions = np.zeros(len(X_test))\n    \n    valid_scores_list = []\n    \n    importances = np.zeros(len(feature_names))\n    \n    feature_importance_df = pd.DataFrame()\n    feature_importance_df[\"features\"] = feature_names\n    \n    if hyperparameters:\n        params = hyperparameters\n      \n    else:\n        params = {'boosting_type': 'gbdt',\n                 'class_weight': None,\n                 'colsample_bytree': 1.0,\n                 'importance_type': 'split',\n                 'learning_rate': 0.1,\n                 'max_depth': -1,\n                 'min_child_samples': 20,\n                 'min_child_weight': 0.001,\n                 'min_split_gain': 0.0,\n                 'n_estimators': 1000,\n                 'n_jobs': -1,\n                 'num_leaves': 31,\n                 'objective': \"rmse\",\n                 'random_state': 101,\n                 'reg_alpha': 0.0,\n                 'reg_lambda': 0.0,\n                 'silent': True,\n                 'subsample': 1.0,\n                 'subsample_for_bin': 200000,\n                 'subsample_freq': 0}\n    \n    lgbr = lgb.LGBMRegressor(**params)\n    \n    if logarithm:\n        fold = KFold(n_splits=nfolds,shuffle=True,random_state=12)\n        e_metric = log_lgb_rmse\n    else:\n        fold = StratifiedKFold(n_splits=nfolds,shuffle=True,random_state=12)\n        e_metric = lgb_rmse\n    \n    print(params)\n    \n    for i,(train_indices,valid_indices) in enumerate(fold.split(X_train.values,y_train.values)):\n        \n        X = X_train.values[train_indices]\n        y = y_train.values[train_indices]\n        X_valid = X_train.values[valid_indices]\n        y_valid = y_train.values[valid_indices]\n        \n        print(\"{} fold processing\".format(i+1),\"#\"*20)\n        \n        lgbr.fit(X,y,eval_set=[(X,y),(X_valid,y_valid)],eval_names=[\"train\",\"valid\"],eval_metric=e_metric,verbose=500,early_stopping_rounds=250)\n        \n        valid_scores_list.append(lgbr.best_score_[\"valid\"][\"lgb_rmse\"])\n\n        feature_importance_df[f\"{i+1}\"] = lgbr.feature_importances_\n        \n        if logarithm:\n            valid_score = np.expm1(lgbr.predict(X_valid))\n            prediction = np.expm1(lgbr.predict(X_test))\n        \n        else:\n            valid_score = lgbr.predict(X_valid)\n            prediction = lgbr.predict(X_test)\n        \n        valid_scores[valid_indices] += valid_score\n        predictions += prediction \/ nfolds\n        \n    valid_mean_score = np.mean(valid_scores_list)\n    \n    print(f\"mean_valid_score is {valid_mean_score} at {nfolds}\")\n    \n    feature_importance_df[\"mean\"] = feature_importance_df[feature_importance_df.columns.values[1:]].mean(axis=1)\n    feature_importance_df[\"std\"] = feature_importance_df[feature_importance_df.columns.values[1:]].mean(axis=1)\n    \n    fi_sorted = feature_importance_df.sort_values(\"mean\",ascending=False)\n    \n    plt.figure(figsize=[6,40])\n    sns.barplot(x=\"mean\",y=\"features\",data=fi_sorted,xerr=fi_sorted[\"std\"])\n    plt.title(\"Feature Importances of lightgbm\",fontsize=12)\n    plt.show()\n        \n    return valid_mean_score, predictions\n","c8845d19":"tuned_params = {\n    'boosting_type': 'gbrt',\n    'class_weight': None,\n    'colsample_bytree': 0.8424667117862588,\n    'learning_rate': 0.11657835160316778,\n    'max_depth': 21,\n    'min_child_samples': 30,\n    'min_child_weight': 2.7488547729054593,\n    'n_estimators': 2160, #1080\n    'num_leaves': 9,\n    'objective': 'regression',\n    'random_state': 101,\n    'reg_alpha': 0.6915673059398951,\n    'reg_lambda': 0.6362045095817355,\n    'subsample': 0.8931910384738333,\n    'subsample_for_bin': 100000,\n    'subsample_freq': 4}","20b1bcf0":"valid_score, predictions = model_lgb(X_train=X_adj_log_train,X_test=X_adj_log_test,y_train=y_adj_log_train,hyperparameters=tuned_params,logarithm=True)","f9789369":"target = \"lgb_uni_5\"\nscores_dict[target] = valid_score\npredictions_dict[target] = predictions","41c75b63":"submission = pd.read_csv(PATH+\"sample_submission.csv\")\nsubmission[\"price\"] = predictions\nsubmission.to_csv(\"lgb_uni_layer_5.csv\",index=False)","4a7c4540":"valid_score, predictions = model_lgb(X_train=X_adj_log_train,X_test=X_adj_log_test,y_train=y_adj_log_train,hyperparameters=tuned_params,logarithm=True,nfolds=10)","91e0d26b":"target = \"lgb_uni_10\"\nscores_dict[target] = valid_score\npredictions_dict[target] = predictions","ff93eda8":"submission = pd.read_csv(PATH+\"sample_submission.csv\")\nsubmission[\"price\"] = predictions\nsubmission.to_csv(\"lgb_uni_layer_10.csv\",index=False)","27bac8cf":"def multiple_model_lgb(X_train,y_train,X_test,nfolds=5,hyperparameters=None,logarithm=False,seeds=[101]):\n    \n    #\ud6c8\ub828\uc5d0\uc0ac\uc6a9\ud558\ub294 \uceec\ub7fc\ub4e4\n    feature_names = X_train.columns.values\n    \n    #seed\ubcc4\ub85c \ubaa8\ub378\uc758 feature_importance \uc800\uc7a5\uc744 \uc704\ud55c \ub515\uc154\ub108\ub9ac\n    lgb_fi_dict = dict()\n    #stack\ub41c \uc608\uce21\uac12\uc744 \uc800\uc7a5\ud558\uae30 \uc704\ud55c \ubcc0\uc218\n    stacked_predictions = np.zeros(len(X_test))\n    #stack\ub41c \ubaa8\ub378\ub4e4\uc758 \uc810\uc218\ub97c \ubaa8\uc544\ub450\uae30 \uc704\ud55c \ubc30\uc5f4\n    total_best_valid_scores = []\n    \n    #\uc2dc\ub4dc\ubcc4\ub85c \ubaa8\ub378\uc744 \uc0dd\uc131\ud558\uba70 \ubaa8\ub378\uc5d0 \ub300\ud55c feature_importance, \uc608\uce21\uac12 \uadf8\ub9ac\uace0 valid_score\ub97c \uc704\uc758 \ubcc0\uc218\ub4e4\uc5d0 \uae30\ub85d\ud568.  \n    for k,seed in enumerate(seeds):\n\n        valid_scores = np.zeros(len(X_train))\n        predictions = np.zeros(len(X_test))\n\n        best_valid_scores = []\n\n        importances = np.zeros(len(feature_names))\n\n        feature_importance_df = pd.DataFrame()\n        feature_importance_df[\"features\"] = feature_names\n\n        if hyperparameters:\n            params = hyperparameters\n\n        else:\n            params = {'boosting_type': 'gbdt',\n                     'class_weight': None,\n                     'colsample_bytree': 1.0,\n                     'importance_type': 'split',\n                     'learning_rate': 0.1,\n                     'max_depth': -1,\n                     'min_child_samples': 20,\n                     'min_child_weight': 0.001,\n                     'min_split_gain': 0.0,\n                     'n_estimators': 1000,\n                     'n_jobs': -1,\n                     'num_leaves': 31,\n                     'objective': \"rmse\",\n                     'random_state': 101,\n                     'reg_alpha': 0.0,\n                     'reg_lambda': 0.0,\n                     'silent': True,\n                     'subsample': 1.0,\n                     'subsample_for_bin': 200000,\n                     'subsample_freq': 0}\n\n        params[\"random_state\"] = seed\n        \n        lgbr = lgb.LGBMRegressor(**params)\n\n        if logarithm:\n            fold = KFold(n_splits=nfolds,shuffle=True,random_state=12)\n            e_metric = log_lgb_rmse\n        else:\n            fold = StratifiedKFold(n_splits=nfolds,shuffle=True,random_state=12)\n            e_metric = lgb_rmse\n\n        print(f\"Current seed is {seed} of {k+1} elements\",\"#\"*15)\n        print(params)\n\n        for i,(train_indices,valid_indices) in enumerate(fold.split(X_train.values,y_train.values)):\n\n            X = X_train.values[train_indices]\n            y = y_train.values[train_indices]\n            X_valid = X_train.values[valid_indices]\n            y_valid = y_train.values[valid_indices]\n\n            print(\"{} fold processing\".format(i+1),\"#\"*20)\n\n            lgbr.fit(X,y,eval_set=[(X,y),(X_valid,y_valid)],eval_names=[\"train\",\"valid\"],eval_metric=e_metric,verbose=500,early_stopping_rounds=250)\n\n            best_valid_scores.append(lgbr.best_score_[\"valid\"][\"lgb_rmse\"])\n\n            feature_importance_df[f\"{i+1}\"] = lgbr.feature_importances_\n\n            if logarithm:\n                valid_score = np.expm1(lgbr.predict(X_valid))\n                prediction = np.expm1(lgbr.predict(X_test))\n\n            else:\n                valid_score = lgbr.predict(X_valid)\n                prediction = lgbr.predict(X_test)\n\n            valid_scores[valid_indices] += valid_score\n            predictions += prediction \/ nfolds\n\n        valid_mean_score = np.mean(best_valid_scores)    \n        print(f\"mean_valid_score is {valid_mean_score} at {nfolds}\")\n        total_best_valid_scores.append(valid_mean_score)\n    \n        feature_importance_df[\"mean\"] = feature_importance_df[feature_importance_df.columns.values[1:]].mean(axis=1)\n        feature_importance_df[\"std\"] = feature_importance_df[feature_importance_df.columns.values[1:]].mean(axis=1)\n    \n        lgb_fi_dict[seed] = feature_importance_df\n        stacked_predictions += predictions \/ len(seeds)\n    \n    #stacking\ub41c \uacb0\uacfc \uac12\ub4e4\uc744 \uc800\uc7a5\ud558\uace0 plot\uc744 \uadf8\ub9ac\uac70\ub098 return\ud574\uc8fc\uae30 \uc704\ud55c \uacfc\uc815.\n    \n    stacked_importances = pd.DataFrame()\n    stacked_importances[\"features\"] = feature_names\n    stacked_importances[\"mean\"] = 0\n    stacked_importances[\"std\"] = 0\n    \n    for key,values in lgb_fi_dict.items():\n        stacked_importances[\"mean\"] += values[\"mean\"]\/len(seeds)\n        stacked_importances[\"std\"] += values[\"std\"]\/len(seeds)\n    \n    fi_sorted= stacked_importances.sort_values(by=\"mean\",ascending=False)\n    \n    stacked_valid_mean_score = np.mean(total_best_valid_scores)\n    \n    print(f\"Stacked valid_score of {seeds} is {stacked_valid_mean_score} at {nfolds}\")\n    \n    plt.figure(figsize=[6,40])\n    sns.barplot(x=\"mean\",y=\"features\",data=fi_sorted,xerr=fi_sorted[\"std\"])\n    plt.title(\"Feature Importances of lightgbm\",fontsize=12)\n    plt.show()\n        \n    return stacked_valid_mean_score,stacked_predictions\n","460e1c6d":"valid_score, predictions = multiple_model_lgb(X_train=X_adj_log_train,X_test=X_adj_log_test,y_train=y_adj_log_train,hyperparameters=tuned_params,logarithm=True,seeds=[101,200,27,1085,567])","cf2a80c4":"target = \"lgb_multiple_5\"\nscores_dict[target] = valid_score\npredictions_dict[target] = predictions","7edb583c":"submission = pd.read_csv(PATH+\"sample_submission.csv\")\nsubmission[\"price\"] = predictions\nsubmission.to_csv(\"lgb_multiple_layer_5.csv\",index=False)","212aa6c0":"valid_score, predictions = multiple_model_lgb(X_train=X_adj_log_train,X_test=X_adj_log_test,y_train=y_adj_log_train,nfolds=10,hyperparameters=tuned_params,logarithm=True,seeds=[101,200,27,1085,567])","7d28c9c1":"target = \"lgb_multiple_10\"\nscores_dict[target] = valid_score\npredictions_dict[target] = predictions","7bbde53f":"submission = pd.read_csv(PATH+\"sample_submission.csv\")\nsubmission[\"price\"] = predictions\nsubmission.to_csv(\"lgb_multiple_layer_10.csv\",index=False)","119936b9":"result_df = np.transpose(pd.DataFrame(scores_dict,index=range(1))).rename(columns={0:\"rmse_score\"}).sort_values(by=\"rmse_score\")\nresult_df = result_df.reset_index().rename(columns={\"index\":\"model\"})\nsns.barplot(x=\"rmse_score\",y=\"model\",data=result_df)","b3e06f18":"target1 = \"xgb_uni_10\"\ntarget2 = \"lgb_multiple_10\"\n\nensembled_predictions = predictions_dict[target1] * 0.5 + predictions_dict[target2] * 0.5\nensembled_score = scores_dict[target1] * 0.5 + scores_dict[target2] * 0.5\n\npredictions_dict[\"ensemble1\"] = ensembled_predictions\nscores_dict[\"ensemble1\"] = ensembled_score\n\nsubmission = pd.read_csv(PATH+\"sample_submission.csv\")\nsubmission[\"price\"] = ensembled_predictions\nsubmission.to_csv(\"xgb_lgb_ensemble.csv\",index=False)","1453d02e":"result_df = np.transpose(pd.DataFrame(scores_dict,index=range(1))).rename(columns={0:\"rmse_score\"}).sort_values(by=\"rmse_score\")\nresult_df = result_df.reset_index().rename(columns={\"index\":\"model\"})\nsns.barplot(x=\"rmse_score\",y=\"model\",data=result_df)","79a6b61e":"\ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc6b0\ub9ac\uc758 target\uac12\uc778 price\ub97c log1p\ub97c \ud1b5\ud574\uc11c \ub85c\uadf8\ud654\ud569\ub2c8\ub2e4. \uadf8\ub0e5 log\ub97c \ud558\uc9c0\uc54a\uace0 log1p\ub97c \ud558\ub294 \uc774\uc720\ub294 \ub9cc\uc57d\uc5d0 price\ud558\ub294 \uac12\uc774 0\uc774 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub294 log0\uc744 \ud558\uac8c\ub418\uba74 \uac12\uc774 \ub098\uc624\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc774\ub97c \uc704\ud574\uc11c target\uac12\uc5d0 1\uc744 \ub354\ud558\uace0 \ub85c\uadf8\ud654 \ud558\ub294 log1p\ub97c \uc0ac\uc6a9\ud588\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub97c \ubcf5\uc6d0\ud558\ub294\ub370 \uc788\uc5b4\uc11c \uadf8\ub0e5 np.exp\uac00 \uc544\ub2cc np.expm1\uc744 \ud65c\uc6a9\ud574\uc57c \ud55c\ub2e4\uace0 \ud55c\ub2e4.","7a4c610c":"\uac00\uaca9\uc758 \ubd84\ud3ec\ub97c \ubcf4\uba74 \uc88c\uce21\uc73c\ub85c \uce58\uc6b0\uce5c \ubd84\ud3ec\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf4\ud1b5 \uc774\ub807\uac8c \uce58\uc6b0\uce5c \uac12\uc5d0 \ub300\ud574\uc11c \ud3c9\uac00\uc9c0\ud45c\ub85c RMSLE\ub97c \uc0ac\uc6a9\ud558\ub294\ub370 \uc6b0\ub9ac\uc758 \ubb38\uc81c\uc5d0\uc11c\ub294 \ub2e8\uc9c0 RMSE\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.","79966369":"\uce58\uc6b0\uce5c \uceec\ub7fc\ub4e4\uc744 \ub85c\uadf8\ud654\ud569\ub2c8\ub2e4.","5606e306":"## <a id='51'>XGBRegressor<\/a>  \n","fb6572fd":"# Waterfront","4cd66141":"# sqft_lot","1841c551":"\uc800\ub294 \uc544\ud30c\ud2b8 \ub610\ud55c \ud3ec\ud568\ub420 \uac83 \uac19\uc558\uc9c0\ub9cc \uce35\uc218\uc758 \ub192\uc774\ub97c \ubcf4\ub2c8 \ub2e8\ub3c5\uc8fc\ud0dd\ub9cc \uc6b0\ub9ac\uc758 \ub370\uc774\ud130\uc14b\uc5d0 \ud3ec\ud568\ub41c \ub4ef\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc608\uc0c1\uacfc\ub2ec\ub9ac \uc18c\uc22b\uc810\uc774 0.5 \ub2e8\uc704\ub85c \uc788\ub294\ub370, \uc81c \uc0dd\uac01\uc5d0\ub294 \ub2e4\ub77d\ubc29 \uac19\uc740 \uac83\ub4e4\uc744 .5\uce35\uc73c\ub85c \uc0dd\uac01\ud588\uc9c0 \uc54a\uc744\uae4c \uc2f6\uc2b5\ub2c8\ub2e4.","083fa32f":"\uc6b0\ud3b8\ubc88\ud638\ub294 \ubb54\uac00 \uc22b\uc790\ub85c \uc774\ub8e8\uc5b4\uc9c0\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \uc6b0\ud3b8\ubc88\ud638\uac00 \uc5c6\uac70\ub098, \uc6b0\ud3b8\ubc88\ud638\uac00 \uc22b\uc790\uac00 \uc544\ub2cc \uc5b4\ub290 \ub2e4\ub978 \uac12\ub4e4\ub85c \uad6c\uc131\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc77c\ubc18\uc801\uc778 \uc6b0\ud3b8\ubc88\ud638\uc758 \ud615\ud0dc\uc778 \ub2e4\uc12f\uac1c\uc758 \uc22b\uc790\ub97c \ub530\ub974\uc9c0 \uc54a\ub294 \uc608\uc678\uc758 \uac83\ub4e4\uc744 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.","d5a6a4f3":"# floors","fc12e498":"# sqft_living15","6004e567":"\uc544\ub798\uc758 \ud568\uc218\ub294 \ucd94\uac00\uc801\uc778 \uceec\ub7fc\ub4e4\uc744 \ub9cc\ub4dc\ub294 \ud568\uc218\uc785\ub2c8\ub2e4. \ud574\ub2f9 \uceec\ub7fc\ub4e4\uc740 \uc704\uc5d0\uc11c \ucc38\uc870\ud55c \ucee4\ub110\ub4e4\uc5d0\uc11c \uac00\uc838\uc654\uc2b5\ub2c8\ub2e4. <br \/>\n\n## **\uc5ec\uae30\uc11c \uad49\uc7a5\ud55c \uad50\ud6c8 [\ub370\uc774\ud130\uc804\ucc98\ub9ac]**\n\n\ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \uc644\ubcbd\uac00\uc774\ub4dc\uc5d0\ub3c4 \uc788\uc5c8\uc9c0\ub9cc Garbage in, Garbage out\uc774\ub77c\uace0 \uc88b\uc9c0\ubabb \ud55c \uceec\ub7fc\ub4e4\uc744 \ud22c\uc785\ud574\uc11c \ud559\uc2b5\ud55c \ubaa8\ub378\uc740 \uc62c\ubc14\ub978 \uc608\uce21\uac12\uc744 \ub0bc \uc218\uac00 \uc5c6\ub2e4\ub294 \uac83\uc744 \uae68\ub2ec\uc558\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ucef4\ud53c\ud2f0\uc158\uc774\ub098 \ucd94\ud6c4\uc5d0 \ud560 \ub54c\uc5d0\ub294 \ud558\ub098\uc758 \uc88b\uc740 \uc131\ub2a5\uc744 \ub098\ud0c0\ub0b4\ub294 \ubaa8\ub378\ub85c \ud53c\ucc98\ub4e4\uc744 \ucd94\uac00\ud574\ubcf4\uba74\uc11c \uc810\uc218\uc758 \ub4f1\ub77d\uc744 \ube44\uad50\ud574\uac00\uba70 \uc801\uc808\ud55c \ud53c\ucc98\ub97c \ub3c4\ucd9c\ud558\uace0 \ud559\uc2b5\uc5d0 \ud22c\uc785\ud558\ub294 \uc989, \ub370\uc774\ud130 \uc804\ucc98\ub9ac\uc758 \uc911\uc694\uc131\uc774 \uc5c4\uccad\ub098\ub2e4\ub294 \uac83\uc744 \uae68\ub2ec\uc558\uc2b5\ub2c8\ub2e4. ","cd7e58ef":"\uc0c1\uc704 10\uac1c\uc758 \uac12\ub4e4\ub9cc \ud655\uc778\ud574 \ubd05\uc2dc\ub2e4. \uc6b0\ub9ac\uac00 \uc720\ucd94\ud55c\ub300\ub85c \ube44\uc2b7\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uad70\uc694. \uadf8\ub807\ub2e4\uba74 \ub144\/\uc6d4\/\uc77c \uc544\ub798\uc758 \uac12\ub4e4\uc5d0 \ub300\ud574 \uc790\uc138\ud788 \uc54c\uc544\ubd05\uc2dc\ub2e4.","95cec81b":"Price\uc758 \ucd5c\uc18c\uac12\uc740 7\ub9cc 8\ucc9c\ub2ec\ub7ec\uc774\uba70, \ucd5c\ub300 \uac12\uc740 \ucd5c\uc18c \uac12\ubcf4\ub2e4 100\ubc30 \ub192\uc740 770\ub9cc\ub2ec\ub7ec\uc785\ub2c8\ub2e4. ","9885b69b":"\uc544\ub798\uc758 \ucf54\ub4dc\ub294 fold\ubcc4\ub85c stacking\uc744 \ub2e4\ub974\uac8c \ud558\uba70 seeds\ub97c \uc90c\uc73c\ub85c\uc368 \uc5ec\ub7ec\uac1c\uc758 random_state\ub97c \ud65c\uc6a9\ud558\uc5ec \uc5bb\uc5b4\ub0b8 \ub2e4\ub978 \ubaa8\ub378\ub4e4\uc744 \ud55c\ubc88 \ub354 stacking\ud55c LightGBM\ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud568\uc218\uc785\ub2c8\ub2e4.","1dca63e9":"\uc544\ub798\uc5d0 \ud574\ub2f9\ud558\ub294 5\uac1c\uc758 seed\ub4e4\uc740 \ud544\uc790\uac00 \uc784\uc758\ub85c \uc9c0\uc815\ud558\uc600\uc73c\uba70 \uc6d0\ub798 \ud6c8\ub828\uc744 \uc9c4\ud589\ud588\ub358 101\uc2dc\ub4dc\ub97c \ud3ec\ud568\ud558\uc600\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 5\uac1c\uc758 \uc2dc\ub4dc\ub97c \ud65c\uc6a9\ud55c 5\ud3f4\ub4dc\ub85c \uad50\ucc28\uac80\uc99d\ud558\ub294 \ubaa8\ub378\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","5724c722":"\uc6b0\ub9ac\ub294 \ubc14\ub85c zipcode\ub97c \uc6b0\ub9ac\uc758 \ubd84\uc11d\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uac04\ub2e8\ud55c \uc815\uaddc\ud45c\ud604\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac80\ud1a0\ud574 \ubcf4\uc558\uc744 \ub54c \uc6b0\ub9ac\uac00 \uc815\ud574\ub454 5\uac1c\uc758 \uc5f0\uc18d\ub41c \uc6b0\ud3b8\ubc88\ud638\ub97c \ub530\ub974\uc9c0 \uc54a\ub294 \uac83\uc740 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc54c\uc544\ub0c8\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. ","0ae1c884":"# Floor\n\uc9d1\uc758 \uce35\uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774 \ud2b9\uc9d5\uc740 \ubaa8\ub450 \uc815\uc218\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\uba70 \ud55c\ubc88 \uce35\uc218\uc758 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","c8e2a86c":"# <a id='3'>Data Exploration<\/a>  \n## <a id='31'>\ub370\uc774\ud130 \ud655\uc778 \ubc0f \uc804\ucc98\ub9ac<\/a>  ","e60a2417":"\uc704\ub3c4\uc640 \uacbd\ub3c4\uc758 \ubd84\ud3ec\ub294 \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc774 \uc720\uc0ac\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub450 \ub370\uc774\ud130 \uc14b\uc744 \uac1c\ubcc4\uc801\uc73c\ub85c \ubcf4\uc558\uc744 \ub54c \uc5b4\ub290 \ud2b9\uc815 \uc601\uc5ed\uc5d0 \uc9d1\uc758 \uc218\uac00 \ub9ce\uc740 \uac83 \uac19\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","db4f7d7a":"# Bathrooms","5dc6b527":"\ud574\ub2f9 view\uac12\uc774 \ud074\uc218\ub85d \uc88b\uc740\uc9c0 \uc791\uc744 \uc218\ub85d \uc88b\uc740\uc9c0\uc5d0 \ub300\ud55c \uac83\uc740 \ub098\uc911\uc5d0 Price\uc640 \uac01 \ubcc0\uc218\ub4e4\uc744 \ube44\uad50\ud560 \ub54c \uc54c\uc544\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","44ec486c":"\uc81c\uac00 \uacf5\ubd80\ud558\uace0 \uc788\ub294 \ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \uc644\ubcbd\uac00\uc774\ub4dc\uc5d0 \ub530\ub974\uba74 \uc6b0\ub9ac\uac00 \uc608\uce21\ud574\uc57c\ud558\ub294 target\uac12\uc774\ub358 column\uc73c\ub85c \uc774\uc6a9\ud558\uac8c\ub420 feature\ub358 \ud55c \ucabd\uc73c\ub85c \uce58\uc6b0\uce5c \ubd84\ud3ec\ub97c \ubcf4\uc774\uace0 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub294 **\ub85c\uadf8\ud654\ub97c \uc774\uc6a9\ud558\uc5ec \uc608\uce21\ud558\uace0 \ud0c0\uac9f\uc758 \uacbd\uc6b0\uc5d0\ub294 \uc774\ub97c \ub2e4\uc2dc \uc9c0\uc218\ud654\ud558\uc5ec \ubcf5\uad6c\uc2dc\ud0a4\ub294 \uac83**\uc774 \uc88b\ub2e4\uace0 \uc5b8\uae09\ud558\uc600\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc6b0\ub9ac\ub294 \uc6b0\ub9ac\uc758 target\uac12\uc778 price\ub97c \ub85c\uadf8\ud654\ud558\uba70, \uc6b0\ub9ac\uac00 \uc0b4\ud3b4\ubcf8 \uceec\ub7fc\ub4e4 \uc911 \ubd84\ud3ec\uac00 \uce58\uc6b0\uce5c \ubd84\ud3ec\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub294 \ub85c\uadf8\ud654 \ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.\n\n> \ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \uc644\ubcbd \uac00\uc774\ub4dc <br \/>\n> http:\/\/www.yes24.com\/Product\/Goods\/69752484?Acode=101","26fa8b18":"\uce68\uc2e4\uc218\ub85c \ub098\ub204\uae30\ub97c \uc218\ud589\ud558\ub2e4 \ubcf4\ub2c8 \uc18c\uc218\uc810 \uac12\uc774 \uc0dd\uaca8\ubc84\ub838\uad70\uc694 \uadf8\ub807\ub2e4\uba74 kdeplot\uc744 \ud1b5\ud574\uc11c \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc758 \ubd84\ud3ec\uac00 \uc720\uc0ac\ud55c\uc9c0 \ud55c\ubc88 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.","bdd67ceb":"# lat and lon\n\uc704\uc758 \ub450 \uc9c0\ud45c\ub294 \uc704\ub3c4\uc640 \uacbd\ub3c4\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \ubb3c\ub860 \uc774\ubbf8 \uc81c \uc0dd\uac01\uc73c\ub85c\ub294 \uc6b0\ud3b8\ubc88\ud638\uc640 \uc704\ub3c4\uc640 \uacbd\ub3c4\ub294 \uad49\uc7a5\ud788 \ubc00\uc811\ud55c \uad00\ub828\uc774 \uc788\uc744 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ub429\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc704\ub3c4\uc640 \uacbd\ub3c4\ub97c \uc0b0\ud3ec\ub3c4\ub97c \uc774\uc6a9\ud574\uc11c \uac04\ub2e8\ud558\uac8c \uc704\uce58\ub97c \ucc0d\uc5b4\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","180a2c8c":"# <a id='5'>Modeling<\/a>\n\ubaa8\ub378\ub9c1\uc5d0 \uc788\uc5b4\uc11c \uc6b0\ub9ac\ub294 \uc81c\ubaa9\uc5d0\uc11c \uc54c \uc218 \uc788\ub4ef\uc774 xgboost \ubaa8\ub378\uacfc lightgbm\ubaa8\ub378\uc744 \uc559\uc0c1\ube14 \ud560 \uac83\uc785\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \ub450 \ubaa8\ub378\uc740 \uac01\uac01\uc758 \ubaa8\ub378\uc758 \uacb0\uacfc\ub97c \uc774\ub04c\uc5b4\ub0b8 feature_importance\ub97c \uc2dc\uac01\ud654\ud588\uc744 \ub54c \uc911\uc694\uc2dc\uc5ec\uaca8\uc9c0\ub294 \uceec\ub7fc\ub4e4\uc758 \ud2b9\uc9d5\uc774 \ub2e4\ub974\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc11c\ub85c \ub2e4\ub978 \ubaa8\ub378\uc744 \uc559\uc0c1\ube14\uc744 \ud1b5\ud574 \uc88b\uc740 \ubaa8\ub378\uc744 \uc774\ubc88 \ubaa8\ub378\ub9c1 \ub2e8\uacc4\uc5d0\uc11c \ub3c4\ucd9c\ud574\ubcfc \uac83\uc785\ub2c8\ub2e4.\n\n1. XGBoost\uc5d0\uc11c\ub294 fold\uc218\ub97c 5\uc640 10\uc73c\ub85c \uad6c\ubd84\ud558\uc5ec stacking\uc744 \ud560 \uac83\uc785\ub2c8\ub2e4.\n2. LightGBM\uc5d0\uc11c\ub294 XGBoost\uc5d0\uc11c\uc640 \ub3d9\uc77c\ud558\uac8c fold\ubcc4\ub85c stacking\ud558\uba70, \uac70\uae30\uc5d0 \ucd94\uac00\uc801\uc73c\ub85c seed\ub97c \ub2e4\ub974\uac8c \ud55c \ubaa8\ub378\ub4e4\uc744 \ub9cc\ub4e4\uc5b4 \ub0b4\uace0 \uadf8 \uacb0\uacfc\ub97c \ub2e4\uc911\uc73c\ub85c \uc313\uc544\uc11c \ub3c4\ucd9c\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nXGBoost\uc0c1\uc5d0\uc11c\ub294 \ub2e4\uc911\uc73c\ub85c \uc313\uc9c0 \uc54a\ub294 \uc774\uc720\ub294 \ub108\ubb34 \uc2dc\uac04\uc774 \uc624\ub798\uac78\ub9b4 \ubfd0\ub354\ub7ec, \uc88b\uc740 \uc131\ub2a5\uc744 \ub3c4\ucd9c\ud574\ub0b4\uc9c0 \ubabb\ud588\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uac01\uac01\uc758 \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \uadf8\ub9bc\uc73c\ub85c \uadf8\ub824\ubcf4\uace0 \uadf8\ub4e4\uc911\uc5d0 \uc88b\uc740 XGBoost\uc640 LighGBM\uc744 \uace8\ub77c\uc11c 0.5\uc529 \uc559\uc0c1\ube14 \ud574\ubcfc \uac83\uc785\ub2c8\ub2e4.\n\n\uadf8\ub9ac\uace0 \uc544\ub798\uc758 \ud568\uc218\ub97c \ub9cc\ub4dc\ub294\ub370 \uc788\uc5b4\uc11c \uc544\ub798\uc758 \uacf5\uc2dd\uc548\ub0b4\uc0ac\uc774\ud2b8\uc758 API\uc548\ub0b4\ubb38\uc11c\ub97c \ud65c\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\n> \ucc38\uace0 <br \/>\n> https:\/\/xgboost.readthedocs.io\/en\/latest\/python\/python_api.html <br \/>\n> https:\/\/lightgbm.readthedocs.io\/en\/latest\/Python-API.html <br \/>\n\n\ucd94\uac00\uc801\uc73c\ub85c Boosting \uc54c\uace0\ub9ac\uc998\uc758 \uc774\ud574\ub97c \ub3c4\uc640\uc900 \uc88b\uc740 \uc0ac\uc774\ud2b8\ub4e4\ub3c4 \uc544\ub798\uc5d0 \ub9c1\ud06c\ub0a8\uae41\ub2c8\ub2e4.\n> https:\/\/www.analyticsvidhya.com\/blog\/2016\/02\/complete-guide-parameter-tuning-gradient-boosting-gbm-python\/ <br \/>\n> https:\/\/www.analyticsvidhya.com\/blog\/2016\/03\/complete-guide-parameter-tuning-xgboost-with-codes-python\/ <br \/>\n","f7f70ed4":"Stacking\ud558\ub294 \ud3f4\ub4dc\uc218\ub97c 10\uac1c\ub85c \ud588\uc744 \ub54c lightgbm\uc758 \ud65c\uc6a9","68357184":"# sqft_lot15","05a109a3":"# yr_renovated","318b7b90":"Bathroom \uc9c0\ud45c\ub294 \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc774 \uc720\uc0ac\ud55c \ubd84\ud3ec\ub97c \ub530\ub974\uace0 \uc788\ub294 \uac83 \uac19\uad70\uc694.\n\n\uadf8\ub807\ub2e4\uba74 \uce68\uc2e4\uc218\ub97c \uacf1\ud574\uc11c \uc2e4\uc81c \ud654\uc7a5\uc2e4\uc758 \uc218\ub97c \ud55c \ubc88 \ud30c\uc545\ud574 \ubcfc\uae4c\uc694??","b15bc553":"Hyperopt\ub97c \ud65c\uc6a9\ud55c Baysian optimization\uc73c\ub85c \uc5bb\uc5b4\ub0b8 \ud29c\ub2dd\ub41c \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130.\n\n\ud558\uc9c0\ub9cc Hyperparameter \ud29c\ub2dd\uc740 \uac00\uc7a5 \ub9c8\uc9c0\ub9c9\uc5d0 \ucd5c\ud6c4\uc758 \uc131\ub2a5\uc744 \uc950\uc5b4\uc9dc\uae30 \uc704\ud574\uc11c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4. \uc544\ubb34\ub9ac \ud30c\ub77c\ubbf8\ud130\ud29c\ub2dd\uc744 \ub9ce\uc774 \ubc18\ubcf5\ud558\ub354\ub77c\ub3c4 \ub370\uc774\ud130 \uc804\ucc98\ub9ac\ub97c \ud1b5\ud574 \uc5bb\uc740 \ubaa8\ub378\uc5d0 \ud22c\uc785\ud560 \uac12\ub4e4\uc774 \uc88b\uc9c0 \ubabb\ud558\ub2e4\uba74, \uc62c\ubc14\ub974\uc9c0 \ubabb\ud55c \uacb0\uacfc\ub97c \ub3c4\ucd9c\ud560 \uac83\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4! \uaf2d \ubc14\ub78c\uc9c1\ud55c \ub370\uc774\ud130\ub97c \uc5bb\uc5b4\ub0b8 \ub4a4\uc5d0 \uc950\uc5b4\uc9dc\ub0b4\ub294 \ubaa9\uc801\uc73c\ub85c\ub9cc \uc0ac\uc6a9\ud558\uc2dc\uae38 \ubc14\ub78d\ub2c8\ub2e4. \ud29c\ub2dd\ubc29\ubc95\uc740 \ud574\ub2f9 \ucef4\ud53c\ud2f0\uc158\uc5d0 \ub2e4\ub978\ubd84\ub4e4\uc774 \ud574\ub193\uc73c\uc2e0 \uac78 \ubcf4\uc2dc\uae38 \ubc14\ub78d\ub2c8\ub2e4.","9f31e068":"sqft_above\uc640 sqft_basement\uc758 \ubd84\ud3ec\ub97c \ud55c \ubc88 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc6b0\ub9ac\uac00 \ubcf4\uc558\uc744 \ub54c, \uc9c0\ud558\uc2e4\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\uc740 \uc9d1\uc740 \uc804\uccb4 \ub370\uc774\ud130\uc14b\uc758 60\ud37c\uc13c\ud2b8\ub098 \ucc28\uc9c0\ud558\uace0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc6b0\ub9ac\ub294 \uc9c0\ud558\uc2e4\uc744 \uac00\uc9c0\uace0 \uc788\ub294\uc9c0 \uc544\ub2cc\uc9c0\ub97c \ubcf4\uc5ec\uc8fc\ub294 Binary\ud2b9\uc131\uc744 \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4.","ffb1ee50":"\uc18c\uc22b\uc810\uc744 \uc808\uc0ad\ud558\uc600\uc9c0\ub9cc \ube44\uc728\uc774 \uc720\uc0ac\ud558\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 3\uc774 \uc911\uac04\uc0c1\ud0dc\ub97c \uc758\ubbf8\ud558\ub294 \uac83\uac19\uc73c\ubbc0\ub85c \uc9d1\uc758 \uc0c1\ud0dc\uac00 \ubcf4\ud1b5\uc778 \uc9d1\uc774 \uac00\uc7a5 \ub9ce\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","0befcfc3":"# sqft_living, sqft_lot\nsqft_living\uc740 \uc9d1\uc758 \uc8fc\uac70\uacf5\uac04\uc758 \uba74\uc801\uc744 \uc758\ubbf8\ud558\uba70 lot\uc740 \uc8fc\uac70\uacf5\uac04\uc744 \ud3ec\ud568\ud55c \ucc28\uace0, \ub9c8\ub2f9 \ub4f1\uc758 \uacf5\uac04\uc774 \ud3ec\ud568\ub41c \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4. \ub2e4\ub978 \uc5ec\ud0c0 \uceec\ub7fc\ub4e4\uacfc \uac19\uc774 \ud574\ub2f9 \uceec\ub7fc\uc5d0 \ub300\ud574 \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc758 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcfc\uae4c\uc694?","25308322":"## Date\n\n\ub0a0\uc9dc\ub97c \ub098\ud0c0\ub0b4\ub294 Date \ub370\uc774\ud130\uc5d0 \ub300\ud574 \uc54c\uc544\ubd05\uc2dc\ub2e4. \uc721\uc548\uc73c\ub85c \ubd24\uc744 \ub54c T\uc774\ud558\uc758 \uc815\ubcf4\uac00 \ubaa8\ub450 \ub3d9\uc77c\ud574 \ubcf4\uc785\ub2c8\ub2e4. \ub144\ub3c4\/\uc6d4\/\uc77c \uc774\ud558\uc758 \ub0b4\uc6a9\uc774 \ubaa8\ub450 \ub3d9\uc77c\ud574 \ubcf4\uc785\ub2c8\ub2e4. \ud55c \ubc88 \ud655\uc778\ud574\ubcfc\uae4c\uc694?? ","fc64b97b":"## <a id='32'>\ud0c0\uac9f \ubcc0\uc218\uc640 \uac01 \ub370\uc774\ud130\uc640\uc758 \uad00\uacc4<\/a>  \n\n\uc774\uc81c \uc6b0\ub9ac\ub294 \ud0c0\uac9f \ubcc0\uc218\uc778 Price \uc640 \uac1c\ubcc4 \uceec\ub7fc\ub4e4\uc5d0 \ub300\ud574\uc11c \uc774\uc57c\uae30 \ud574 \ubcfc\uac83\uc785\ub2c8\ub2e4.\n\n\uc77c\ub2e8 \uc6b0\ub9ac\uac00 \uac00\uc9c4 date\uc5d0\uc11c T\uc774\ud558\uc758 \ub0b4\uc6a9\uc740 \uc2dc\ubd84\ucd08\ub97c \ub098\ud0c0\ub0b4\ub294 \uac83 \uac19\uc740\ub370 \ubaa8\ub450 \uac19\uc740 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\ubbc0\ub85c \uc6b0\ub9ac\uac00 \uc720\uc6a9\ud558\ub2e4\uace0 \ud310\ub2e8\ub418\ub294 \ub144,\uc6d4,\uc77c \ud615\ud0dc\ub85c \uac00\uacf5\ud558\uc5ec \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.","10be3a5d":"# <a id='4'>Feature Engineering<\/a>\n\uc6b0\ub9ac\ub294 \uc0c1\uad00\uad00\uacc4\ub97c \uc0b4\ud3b4\ubcf4\uc558\ub294\ub370, \uc6b0\ub9ac\uac00 \uac00\uc9c4 \uceec\ub7fc\ub4e4\uc744 \ub354 \uc870\ud569\ud574\uc11c \ubaa9\ud45c\uac12\uc744 \ub354 \uc798 \uc608\uce21\ud560 \uc218 \uc788\ub294 \uc9c0\ud45c\ub4e4\uc744 \ub9cc\ub4e4\uc5b4\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4. <br \/>\nFeature Engineering\uc5d0 \ub300\ud55c \ucc38\uace0 kernel\uc740 \uc544\ub798\uc758 \ub450 \uac1c\uc785\ub2c8\ub2e4.\n> House Price Prediction EDA (updated 2019.03.12) <br \/>\n> https:\/\/www.kaggle.com\/chocozzz\/house-price-prediction-eda-updated-2019-03-12 <br \/>\n> XGBoost, Lightgbm ( catboost \uc608\uc815 ) <br \/>\n> https:\/\/www.kaggle.com\/marchen911\/xgboost-lightgbm","b789aa38":"# Grade\ngrade\ub294 King county grade\ubc29\uc2dd\uc774 \ubb34\uc5c7\uc778\uc9c0\ub294 \ubaa8\ub974\uaca0\uc9c0\ub9cc \uc0c1\ud0dc\ub97c \ub098\ud0c0\ub0b4\ub294 \uac83\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774 \ub610\ud55c \uc660\uc9c0 \uc801\uc740 \ubc94\uc704\uc758 \uac12\ub4e4\uc744 \uac00\uc9c8 \uac83 \uac19\uc73c\uba70 \uc6b0\ub9ac\uac00 \uc0b4\ud3b4\ubcf4\uc558\ub358 Condition\uacfc \uc0c1\uad00\uad00\uacc4\uac00 \ud074\uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud55c\ubc88 \ub610 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.","e2848f66":"Waterfront\uac12\uc740 \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0b4\ub294 Binary \uac12\uc774\uba70, \uac12\uc758 \ud06c\uae30\ub294 \ub2e4\ub974\ub354\ub77c\ub3c4 \uadf8 \ube44\uc911\uc740 \uc720\uc0ac\ud558\ub2e4\ub294 \uac83\uc744 \uc54c\uc544\ub0c8\uc2b5\ub2c8\ub2e4.","9d8f9480":"\uc77c\ub2e8 \uc9d1\uc744 \uc9c0\uc740 \uac74\ucd95\ub144\ub3c4\ub294 \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc774 \uc720\uc0ac\ud55c \ubd84\ud3ec\ub97c \ub098\ud0c0\ub0c8\uace0, \uc218\ub9ac\ub144\ub3c4\ub294 \uc81c\uac00 \uc608\uce21\ud588\ub358 \uac83 \ucc98\ub7fc \uc218\ub9ac\ud558\uc9c0 \uc54a\uc740 \uc9d1\ub4e4\uc740 0\uc774\ub77c\ub294 \ub144\ub3c4\ub97c \uac00\uc9c0\uae30 \ub54c\ubb38\uc5d0 kdeplot\uc774 \ud2b9\uc774\ud55c \ubaa8\uc591\uc744 \uac00\uc9d1\ub2c8\ub2e4. yr_renovated\ub97c \uc218\ub9ac\ud558\uc9c0 \uc54a\uc740 \uc9d1\uc744 \uc81c\uc678\ud55c \ubd84\ud3ec\ub97c \ud55c \ubc88 \uc0b4\ud3b4\ubcf4\ub824\uace0\ud569\ub2c8\ub2e4.","9ffae06c":"# yr_bulit and yr_renovate\n\uc774 \ub458\uc740 \uc9d1\uc744 \uac74\ucd95\ud55c \ub144\ub3c4\uc640 \uc9d1\uc744 \uc218\ub9ac\ud55c \ub144\ub3c4\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc9c1\uad00\uc801\uc73c\ub85c \uc0dd\uac01\ud574\ubcf4\uba74 \uc9d1\uc774 \uc5c4\uccad\ub09c \ubb38\ud654\uc720\uc0b0\uc774 \uc544\ub2c8\ub77c\uba74 \uc624\ub798\ub41c \uc9d1\uc758 \uacbd\uc6b0\uc5d0\ub294 \uac00\uaca9\uc774 \ub0ae\uc744 \uac83\uac19\uace0 \uc9d1\uc744 \uc218\ub9ac\ud55c \ub144\ub3c4\uac00 \ud604\uc7ac\uc640 \uac00\uae4c\uc6b8 \uc218\ub85d \uac00\uaca9\uc740 \ub610 \ub192\uc544\uc9c8 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc9d1\uc744 \uc9d3\uc9c0 \uc54a\uc740 \uc9d1\uc740 \uc5c6\uaca0\uc9c0\ub9cc, \uc9d1\uc744 \uc218\ub9ac\ud558\uc9c0 \uc54a\uc740 \uc9d1\ub3c4 \uc788\uc744 \uac83 \uac19\uae30 \ub54c\ubb38\uc5d0 \uc9c0\ud558\uc2e4\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c \ucd94\uac00\uc801\uc73c\ub85c \ub17c\ub9ac\uc2dd\uac12\uc73c\ub85c\ub3c4 \ub098\ud0c0\ub0b4 \ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","b3c6d0b6":"# WaterFront\n\uc9d1 \uc55e\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc548 \ud750\ub974\ub294\uc9c0 \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.","83950179":"\uc544\ub798\uc758 \ucf54\ub4dc\ub294 fold\ubcc4\ub85c stacking\uc744 \ub2e4\ub974\uac8c \ud558\ub294 LightGBM\ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud568\uc218\uc785\ub2c8\ub2e4.","7302cccf":"# yr_built","ccb355b7":"# <a id='6'>2\ucc28 \ub300\ud68c\ub97c \ud1b5\ud574 \ub290\ub080\uc810<\/a>\n\n\uc774\ubc88 \ub300\ud68c\ub97c \ud1b5\ud574 \ub290\ub080\uc810\uc740 \ud06c\uac8c \ub450 \uac00\uc9c0\uc785\ub2c8\ub2e4.\n1. \ub370\uc774\ud130 \uc804\ucc98\ub9ac\ub294 \uad49\uc7a5\ud788 \uc911\uc694\ud55c \ud56d\ubaa9\uc774\ub2e4.\n2. \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc744 \ub108\ubb34 \ubbff\uc9c0\ub3c4 \ub9d0\uace0 \uac00\uc7a5 \ub9c8\uc9c0\ub9c9\uc5d0 \uc218\ud589\ud574\uc57c \ud560 \ud56d\ubaa9\uc774\ub2e4.\n\n\uc774\ubc88 \ub300\ud68c\ub97c \ud1b5\ud574 \uc81c\uac00 \ub370\uc774\ud130\ub97c \uc804\ucc98\ub9ac\ud558\ub294 \uac83\uc744 \uc880 \uc18c\ud640\ud788 \uc0dd\uac01\ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \ub290\uaf08\uc2b5\ub2c8\ub2e4. \uc804\ucc98\ub9ac \ubcf4\ub2e4\ub294 \uc131\ub2a5\uc744 \uc950\uc5b4\uc9dc\uae30\uc5d0 \uae09\uae09\ud55c stacking\uc774\ub098 hyperparameter\ub97c \ud29c\ub2dd\ud558\ub294 \uac83\uc744 \ubc30\uc6b0\uace0 \uc801\uc6a9\ud558\ub294\ub370 \uae09\uae09\ud588\uc5c8\ub358 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \"Garbage in, Garbage out\" \uc989, \ucd5c\uc801\uc758 \uc131\ub2a5\uc744 \ub0b4\uae30 \uc704\ud574\uc11c\ub294 \ubaa8\ub378\uc758 \ud559\uc2b5\uc744 \uc704\ud574 \ud22c\uc785\ub418\ub294 \ub370\uc774\ud130\ub97c \uc798 \uac78\ub7ec\ub0b4\uc9c0 \uc54a\uc73c\uba74 \ucd5c\uc801\uc758 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc5c6\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774\ubc88 \ucef4\ud53c\ud2f0\uc158\uc744 \ud1b5\ud574 \uc5b4\ub290 \uc77c\uc815\uc218\uc900\uc758 Public Score\uc5d0\uc11c \uc62c\ub9ac\uc9c0 \ubabb\ud588\ub358 \uc774\uc720\ub294 \uc774 \ub54c\ubb38\uc774\ub77c\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774\ubc88 \ucef4\ud53c\ud2f0\uc158\uc774\ub098 \ub2e4\ub978 \ucef4\ud53c\ud2f0\uc158\uc758 \ub2e4\ub978 \ubd84\ub4e4\uc758 \ucee4\ub110\uc744 \ubcfc \ub54c\uc5d0\ub294 \uc5b4\ub5a4 \uc0dd\uac01\uc73c\ub85c \ud53c\uccd0\ub4e4\uc744 \ubf51\uc544\ub0c8\ub294\uc9c0\ub97c \uac19\uc774 \uc0dd\uac01\ud558\uba70 \uc2a4\uc2a4\ub85c \uceec\ub7fc\ub4e4\uc744 \ub9cc\ub4e4\uc5b4\ub0b4\uace0 \uc815\uc81c\ud558\ub294 \ub2a5\ub825\uc744 \ud0a4\uc6cc\uc57c\uaca0\ub2e4\uace0 \uc0dd\uac01\ud588\uc2b5\ub2c8\ub2e4. \n\n\ub450 \ubc88\uc9f8\ub85c \ub370\uc774\ud130\ub97c \uc608\uce21\ud558\ub294\ub370 \uc0ac\uc6a9\ud588\ub358 XGBoost\ub098 LightGBM\uc758 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc5d0 \ub108\ubb34 \ub9ce\uc740 \uc2dc\uac04\uc744 \uc18c\ube44\ud588\uace0, \ub9c8\uc9c0\ub9c9\uc5d0 XGBoost\ub97c \uac19\uc774 \uc559\uc0c1\ube14\ud568\uc73c\ub85c\uc368 \uaca8\uc6b0 \uc131\uc801\uc744 \uc5bb\uc5b4\ub0b8 \uac83 \uac19\uc2b5\ub2c8\ub2e4. XGBoost\ub97c \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0\ub294 \uc8fc\uad6c\uc7a5\ucc3d Lightgbm\uc774 \uc633\uc744 \uac70\ub77c\uace0\ub9cc \uc0dd\uac01\ud588\uae30 \ub54c\ubb38\uc774\uc8e0. \ub530\ub77c\uc11c \ud558\ub098\uc758 \ubaa8\ub378\uc5d0\ub9cc \uc9d1\ucc29\ud558\uc9c0 \uc54a\ub294 \uc0ac\uace0\ub97c \uac00\uc838\uc57c\uaca0\ub2e4\uace0 \uc0dd\uac01\ud588\uc2b5\ub2c8\ub2e4. \ubb3c\ub860 \ub2e4\ub978 \ubaa8\ub378\uc744\uc744 \ubaa8\ub450 \uc2e4\ud589\ud558\uae30\uc5d0\ub294 \uc2dc\uac04\uc774 \ubd80\uc871\ud588\ub2e4\ub294 \ubcc0\uba85\uc774\uc9c0\ub9cc, \ub2e4\uc74c\uc5d0\ub294 \ud3b8\ud611\ub418\uc9c0 \uc54a\uc740 \ub2e4\uc591\ud55c \uac00\ub2a5\uc131\uc744 \uc5f4\uc5b4\ub454 \uc0dd\uac01\uc744 \uac00\uc9c0\ub294 \uac83\uc774 \uc911\uc694\ud558\ub2e4\uace0 \uc0dd\uac01\ud588\uc2b5\ub2c8\ub2e4.\n\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc9c0\ub09c 1\ucc28\ub300\ud68c\ub97c \ud3ec\ud568\ud558\uc5ec 2\ucc28\ub300\ud68c\uae4c\uc9c0 \ucc38\uac00\ud558\uba74\uc11c \ub300\ud68c\ub97c \uc900\ube44\ud574\uc8fc\uc2e0 \ubd84\ub4e4\uc5d0\uac8c \uac10\uc0ac\uc758 \ub9d0\uc500\ub4dc\ub9bd\ub2c8\ub2e4. \uc2e4\uc81c\ub85c \uc5f4\ub9ac\ub294 \ucef4\ud53c\ud2f0\uc158\uc5d0 \ucc38\uac00\ud558\uba74\uc11c \uacf5\ubd80\ud558\uace0 \uc788\uc9c0\ub9cc \uce90\uae00\ucf54\ub9ac\uc544\uc5d0\uc11c \uc900\ube44\ud574\uc8fc\uc2dc\ub294 \ucee4\ub110\uc740 \ub2e4\ub978 \ucef4\ud53c\ud2f0\uc158\uc5d0\uc11c \ubc30\uc6e0\ub358 \uac83\ub4e4\uc744 \ub354 \uc8fc\uccb4\uc801\uc73c\ub85c \ud65c\uc6a9\ud558\ub294 \uc2dc\uac04\uc774 \ub418\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c 3\ucc28\ub300\ud68c\ub3c4 \uc624\ub9e4\ubd88\ub9dd \uae30\ub2e4\ub9ac\uba74\uc11c \uafb8\uc900\ud788 \uacf5\ubd80\ud558\uace0 \uc788\uaca0\uc2b5\ub2c8\ub2e4. \n\n## KEEP GOING KAGGLE!!","07bca185":"# Bathrooms\n \uce68\uc2e4\uc758 \uac1c\uc218\ub2f9 \ud654\uc7a5\uc2e4 \uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4 (\ud654\uc7a5\uc2e4\uc218 \/ \uce68\uc2e4\uc218). \uc65c \uce68\uc2e4\uc758 \uac1c\uc218 \ub2f9 \ud654\uc7a5\uc2e4 \uc218\ub97c \ub098\ud0c0\ub0c8\ub294\uc9c0\ub294 \ubaa8\ub974\uaca0\uc9c0\ub9cc, \ud654\uc7a5\uc2e4\uc758 \uac1c\uc218\ub3c4 \uc9d1\uac12\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc744\uae4c\uc694?? \ubd80\uc7a3\uc9d1 \uce5c\uad6c\uc9d1\uc5d0 \uac00\uba74 \ud654\uc7a5\uc2e4\uc774 3\uac1c\ub098 \uc788\ub294 \uac83 \ucc98\ub7fc\uc694!! \uadf8\ub807\ub2e4\uba74 \uc774\ub97c \uc774\uc6a9\ud558\uba74 \uc21c\uc218\ud55c \ud654\uc7a5\uc2e4\uc758 \uc218\ub3c4 \ub3c4\ucd9c\ud560 \uc218 \uc788\uaca0\uc8e0?","fd2f3301":"Stacking\ud558\ub294 \ud3f4\ub4dc\uc218\ub97c 10\uac1c\ub85c \ud588\uc744 \ub54c xgboost\uc758 \ud65c\uc6a9","6bda83fd":"# Price\n\uac00\uaca9\uc740 \uc6b0\ub9ac\uac00 \uc608\uce21\ud558\uace0\uc790 \ud558\ub294 \ud0c0\uac9f \uac12\uc73c\ub85c\uc368 \ubaa8\ub378 \ud615\uc131\uc2dc \ub4e4\uc5b4\uac00\uac8c\ub420 label\uac12\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \uac00\uaca9\uc5d0 \ub300\ud574\uc11c\ub294 \ubd84\ud3ec\ub97c \uc54c\uc544\ubd05\uc2dc\ub2e4.","9c5d8c49":"\ub144\ub3c4\/\uc6d4\/\uc77c\uc744 \uad6c\ubd84\ud558\uc600\uc744 \ub54c,\n* \ub144\ub3c4\ubcc4\ub85c\ub294 2015\ub144\uc774 \ubbf8\uc138\ud55c \ucc28\uc774\ub85c \uac00\uaca9\uc774 \ub354 \ub192\uc558\uace0\n* \uc6d4 \ubcc4\ub85c\ub294 3,4,5\uc6d4\uc5d0 \uc9d1\uac12\uc774 \ube44\uc2fc\uc2dc\uae30\uc774\uba70\n* \uc77c \ubcc4\ub85c\ub294 1\uc77c\uacfc 13\uc77c\uc5d0 \uc660\uc9c0 \ubaa8\ub974\uaca0\uc9c0\ub9cc \uac00\uaca9\uc774 \ub192\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.","a14d1f0e":"view\uac12\uc740 \uc5ec\ub7ec \ucc99\ub3c4\ub4e4 \uc911 \uc21c\uc11c\ucc99\ub3c4\ub97c \uac00\uc9c0\ub294 \uceec\ub7fc\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. (\ucc99\ub3c4\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub9e8 \uc704 Reference\ub97c \ud65c\uc6a9\ud558\uc138\uc694.)\ub2e8\uc9c0 \uc774 \uac12\ub9cc\ubcf4\uace0\ub294 \uc6b0\ub9ac\uac00 \ub2e4\ub8e8\ub294 view\ub77c\ub294 \ubcc0\uc218\uac00 0\uc73c\ub85c \uac08\uc218\ub85d \uc88b\uc740\uc9c0 5\ub85c \uac08\uc218\ub85d \uc88b\uc740\uc9c0 \ud30c\uc545\ud574\uc57c\ub420 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc704\uc758 \ub2e8\uacc4\uc640 \ub3d9\uc77c\ud558\uac8c \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc774 \uac00\uc9c0\ub294 \uac01 \uac12\ub4e4\uc5d0 \ub300\ud55c \ube44\uc911\uc774 \uc720\uc0ac\ud55c\uc9c0 \uc0b4\ud3b4\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.","5e933873":"# Bedrooms","98a1446b":"\uc77c\ub2e8 \uce68\uc2e4\uc758 \uc218\ub294 8\uac1c\ub97c \uacbd\uacfc\ud558\uae30\uae4c\uc9c0\ub294 \uc99d\uac00\ud558\uc9c0\ub9cc 9\uac1c\ub098 10\uac1c\uc758 \uacbd\uc6b0\uc5d0\ub294 \uac11\uc790\uae30 \uac10\uc18c\ud55c\ub2e4 \uc774 \ub450 \uacbd\uc6b0\uc758 \ud45c\ubcf8\uc758 \uc218\uac00 \uc801\uae30 \ub54c\ubb38\uc774\ub2e4.","28dc4777":"\uce68\uc2e4\uc218\ub97c \uacf1\ud574\uc8fc\uba74 \ubaa8\ub450 \uc815\uc218\ud654 \ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc558\ub294\ub370 \uc544\ub2c8\uc600\uad70\uc694!! \uadf8\ub9ac\uace0 \ud654\uc7a5\uc2e4\uc758 \uc218\uac00 67.5\uac1c\ub098 \uc788\ub294 \uc9d1\uc774 \uc788\ub2e4\ub2c8... \uc544\ubb34\ub9ac \ub113\uc5b4\ub3c4 \ubd88\uac00\ub2a5\ud560 \uac83 \uac19\uae30 \ub54c\ubb38\uc5d0 \uc9c4\uc9dc \ud654\uc7a5\uc2e4 \uac1c\uc218\ub97c \ub3c4\ucd9c\ud558\uc9c0\ub294 \uc54a\ub3c4\ub85d \ud569\uc2dc\ub2e4.","037f9353":"\uc544\ub798\uc758 \ucf54\ub4dc\ub294 fold\ubcc4\ub85c stacking\uc744 \ub2e4\ub974\uac8c \ud558\ub294 XGBoost\ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud568\uc218\uc785\ub2c8\ub2e4. <br \/>\n(\uc0ac\uc2e4 \uc544\ub798\uc758 \ucf54\ub4dc\uc5d0\uc11c xgb_rmse\ub294 \ud0c0\uac9f\uac12\uc778 price\ub97c \ub85c\uadf8\ud654\ud558\uae30\ub85c \ud55c \uc774\ud6c4\uc5d0\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ud3c9\uac00\ud568\uc218\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 logarithm\uc744 False\ub85c \ud558\uace0 \ud0c0\uac9f\uac12\uc744 \ub85c\uadf8\ud654 \ud558\uc9c0\uc54a\uc740 \uac12\uc744 \ub118\uaca8\uc900\ub2e4\uba74 \uc0ac\uc6a9\ub420 \uac83\uc785\ub2c8\ub2e4.)","8d181312":"\uc8fc\uac70\uacf5\uac04\uacfc \ucd1d \uba74\uc801\uc740 \ubb54\uac00 \ub458 \uac04\uc758 \uc720\uc0ac\uc131\uc774 \uc788\uc744\uac70\ub77c\uace0 \uc9c1\uad00\uc801\uc73c\ub85c \uc0dd\uac01\uc774 \ub4ed\ub2c8\ub2e4\ub9cc \ub098\uc911\uc5d0 \uacc4\uc18d \uc0dd\uac01\ud574\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","66edc72a":"# <a id='1'>Reference<\/a>  \n\n> \ucc99\ub3c4\uc758 \uc885\ub958\uc640 \uc758\ubbf8 <br \/>\n> https:\/\/blog.naver.com\/moses3650\/221202517582 <br \/>\n> House Price Prediction EDA (updated 2019.03.12) <br \/>\n> https:\/\/www.kaggle.com\/chocozzz\/house-price-prediction-eda-updated-2019-03-12 <br \/>\n> XGBoost, Lightgbm ( catboost \uc608\uc815 ) <br \/>\n> https:\/\/www.kaggle.com\/marchen911\/xgboost-lightgbm","d30a6bdd":"# Grade","148b3940":"# <a id='0'> \ubaa9\ucc28 <\/a>\n\n- <a href='#1'>Reference<a>\n- <a href='#2'>\ud328\ud0a4\uc9c0 \ub4f1\ub85d \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30<a>\n- <a href='#3'>Data Exploration<a>\n    - <a href='#31'>\ub370\uc774\ud130 \ud655\uc778 \ubc0f \uc804\ucc98\ub9ac<a>\n    - <a href='#32'>\ud0c0\uac9f \ubcc0\uc218\uc640 \uac01 \ub370\uc774\ud130\uc758 \uad00\uacc4<a>\n- <a href='#4'>Feature Engineering<a>\n- <a href='#5'>Modeling<a>\n    - <a href='#51'>XGBRegressor<a>\n    - <a href='#52'>LGBMRegressor<a>\n- <a href='#6'>2\ucc28 \ub300\ud68c\ub97c \ud1b5\ud574 \ub290\ub080\uc810<a>\n    ","ce377773":"Stacking\ud558\ub294 \ud3f4\ub4dc\uc218\ub97c 5\uac1c\ub85c \ud588\uc744 \ub54c lightgbm\uc758 \ud65c\uc6a9","37ad5b0a":"\uc544\ub798\uc5d0 \ud574\ub2f9\ud558\ub294 5\uac1c\uc758 seed\ub4e4\uc740 \ud544\uc790\uac00 \uc784\uc758\ub85c \uc9c0\uc815\ud558\uc600\uc73c\uba70 \uc6d0\ub798 \ud6c8\ub828\uc744 \uc9c4\ud589\ud588\ub358 101\uc2dc\ub4dc\ub97c \ud3ec\ud568\ud558\uc600\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 5\uac1c\uc758 \uc2dc\ub4dc\ub97c \ud65c\uc6a9\ud55c 10\ud3f4\ub4dc\ub85c \uad50\ucc28\uac80\uc99d\ud558\ub294 \ubaa8\ub378\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","543253d3":"# \uceec\ub7fc\ubcc4 \uc758\ubbf8\n\n1. ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n2. date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n3. price : \uc9d1\uc758 \uac00\uaca9(Target variable)\n4. bedrooms : \uce68\uc2e4\uc758 \uc218\n5. bathrooms : \uce68\uc2e4 \uac1c\uc218 \ub2f9 \ud654\uc7a5\uc2e4\uc758 \uc218(\ud654\uc7a5\uc2e4\uc758 \uc218 \/ \uce68\uc2e4\uc758 \uc218 )\n6. sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n7. sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n8. floors : \uc9d1\uc758 \uce35 \uc218\n9. waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n10. view : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4\n11. condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\n12. grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09\n13. sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n14. sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n15. yr_built : \uc9c0\uc5b4\uc9c4 \ub144\ub3c4\n16. yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n17. zipcode : \uc6b0\ud3b8\ubc88\ud638\n18. lat : \uc704\ub3c4\n19. long : \uacbd\ub3c4\n20. sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n21. sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n","83bf1ff7":"\"T000000\"\uc774 \ubb34\uc2a8 \ub73b\uc778\uc9c0\ub294 \ubaa8\ub974\uaca0\uc9c0\ub9cc \uc544\ub9c8\ub3c4 \uc2dc\ubd84\ucd08\ubcc4\ub85c \ub450 \uc790\ub9ac\uc529 \ubc30\uc815\ub418\uc5b4 \uc788\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Date\ub97c 5\uac1c\ub9cc \ucd9c\ub825\ud574\ubcf4\uc558\uc744 \ub54c \uc21c\uc11c\ub300\ub85c \uc815\ub82c\ub418\uc5b4 \uc788\ub294 \uac83 \uac19\uc9c0\ub3c4 \uc54a\uc2b5\ub2c8\ub2e4. \uc77c\ub2e8\uc740 Date\ub97c \uc704\ud574 \ub098\uc911\uc5d0 \ubcc0\ud658\uc774 \ud544\uc694\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","fed0b5ab":"\uc559\uc0c1\ube14\uc744 \ud558\uac8c \ub418\ub294 \uc774\uc720\ub294 XGBoost\uc640 lightGBM\uc774 \uac19\uc740 \uacb0\uc815\ud2b8\ub9ac\uae30\ubc18\uc758 \ubd80\uc2a4\ud305 \ubaa8\ub378\uc774\ub77c\uace0 \ud558\ub354\ub77c\ub3c4 \ub458\uc758 \ud559\uc2b5\uc758 \uc9c0\ud5a5\uc810\uc774 \ub2e4\ub974\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.(\uc815\ud655\ud788\ub294 \uc880 \ub354 \uacf5\ubd80\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.)\uadf8\ub7ec\ub098 \uac04\ub2e8\ud558\uac8c \ub300\ub7b5\uc801\uc73c\ub85c\ubcf4\uba74 \uc6b0\ub9ac\uac00 \uc559\uc0c1\ube14\ub85c \uc0ac\uc6a9\ud558\uac8c \ub420 \ub450 \ubaa8\ub378\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n**1. xgb_uni_10** <br \/>\n**2. lgb_multiple_10**\n\n\ub450 \uac1c\uc758 \ubaa8\ub378\uc758 feature_importance\ub97c \uadf8\ub9b0\uac83\uc744 \uc0b4\ud3b4\ubcf4\uba74 \uc774 \ub458\uc758 \uacb0\uacfc\ub97c \ub098\ud0c0\ub0b4\ub294 \ub370 \uc788\uc5b4\uc11c \uceec\ub7fc\ub4e4\uc758 \uc911\uc694\ub3c4\uac00 \ub2e4\ub974\uac8c \ub098\ud0c0\ub0a9\ub2c8\ub2e4. \uc774\ub294 \ub450 \ubaa8\ub378\uc774 \ub2e4\ub978 \uad00\uc810\uc744 \uc9c0\ub2c8\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc8fc\uae30 \ub584\ubb38\uc5d0 \ub530\ub77c\uc11c \uc774 \ub450 \ubaa8\ub378\ub4e4 \uc911 \uc131\ub2a5\uc774 \uc88b\uc740 \ub450 \uac00\uc9c0\ub97c \uac00\uc9c0\uace0 0.5\uc529 \uc559\uc0c1\ube14\ud558\uc600\uc2b5\ub2c8\ub2e4.","25539e4d":"# <a id='2'>\ud328\ud0a4\uc9c0 \ub4f1\ub85d \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30<\/a>  ","26849119":"# zipcode\nzipcode\ub294 \uc6b0\ud3b8\ubc88\ud638\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc8fc\ubcc0\uc744 \ub458\ub7ec\ubcf4\uba74 \uac19\uc740 \ub3d9\ub124\uc5d0\uc11c\ub3c4 \ubd80\ucd0c\uacfc \ube48\ucd0c\uc774 \uc874\uc7ac\ud558\ub4ef\uc774 \uc6b0\ud3b8\ubc88\ud638\ub97c \uc774\uc6a9\ud558\uac8c \ub418\uba74 \uc774 \ub458\uc744 \uad6c\ubd84\ud560 \uc218 \uc788\uc5b4 \uc6b0\ub9ac\uac00 \uc9d1\uac12\uc744 \uc608\uce21\ud558\ub294\ub370 \ub3c4\uc6c0\uc774 \ub420 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 zipcode\uc758 \uac12\uc744 \uc0b4\ud3b4\ubcf4\uace0 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud560 \uac83\uc778\uc9c0 \uc0dd\uac01\ud574 \ubd05\uc2dc\ub2e4.","e24988d1":"# sqft_above","d817e437":"grade \uc218\uce58\ub3c4 \ud6c8\ub828\uc138\ud2b8\uc640 \ud14c\uc2a4\ud2b8\uc14b\uc774 \uc720\uc0ac\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ud6c8\ub828\uc138\ud2b8\uc5d0\ub294 1\uc774\ub77c\ub294 grade\uac00 \uc874\uc7ac\ud558\uc9c0\ub9cc \ud14c\uc2a4\ud2b8\uc14b\uc5d0\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \uc0c1\ud669\uc774 \uc774 \ubc18\ub300\uc600\uc73c\uba74 \ubb38\uc81c\uac00 \uc0dd\uacbc\uaca0\uc9c0\ub9cc, \uadf8\uac83\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c\uac00 \uc5c6\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. grade\uc5d0\uc11c\ub294 7,8\uc815\ub3c4\uc758 \uc218\uc900\uc744 \ubc1b\ub294 \uc9d1\uc774 \ubcf4\ud1b5 \uc815\ub3c4\uc758 \uc9d1 \uc218\uc900\uc774\ub77c\uace0 \ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","8ff35355":"## <a id='52'>LGBMRegressor<\/a>  ","4fa4ff58":"floors\uc758 \ubd84\ud3ec \ub610\ud55c \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc774 \uc720\uc0ac\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","6cacdc26":"# View","741643ec":"Stacking\ud558\ub294 \ud3f4\ub4dc\uc218\ub97c 5\uac1c\ub85c \ud588\uc744 \ub54c xgboost\uc758 \ud65c\uc6a9","8a11dc55":"# condition","9ceef748":"# View\n\ubdf0\ub294 \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544\ubcf4\uc774\ub294 \uc9c0\uc5d0 \ub300\ud55c \uc815\ub3c4\uc778\ub370, \ubb58 \uc5b4\ub5bb\uac8c \ub098\ud0c0\ub0c8\ub2e4\ub294\uc9c0 \ubaa8\ub974\uaca0\uc73c\ub2c8\uae4c \ud55c\ubc88 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","c64f7cff":"# Bedrooms\n\uc774 \uceec\ub7fc\uc740 \uc9d1\uc5d0\uc11c \uce68\uc2e4\uc758 \uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uce68\uc2e4\uc758 \uc218\ub294 \ubcf4\ud1b5 \uc815\uc218\ud615\uc73c\ub85c \ud45c\ud604\ub420 \uac83 \uac19\uace0 \uc18c\uc22b\uc810\uac12\uc774 \uae30\ub300\ub418\uc9c0 \uc54a\uace0 \ubc29\uc758 \uac1c\uc218 \ub610\ud55c \ud55c\uc815\uc801\uc77c \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \ucc99\ub3c4\ub4e4 \uc911\uc5d0\uc11c \uba85\ubaa9\ucc99\ub3c4\uc5d0 \ud574\ub2f9\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud55c \ubc88 \uc54c\uc544\ubcfc\uae4c\uc694? ","f2c8d52e":"# sqft_living","37f06c5a":"# Date","a94bee8d":"# sqft_above and sqft_basement\n\uc704\ub4e4\uc758 \uc9c0\ud45c\ub294 \uc9c0\ud558\ub97c \uc81c\uc678\ud55c \ud3c9\ub2f9\uba74\uc801\uacfc \uc9c0\ud558\uc2e4\uc758 \ud3c9\ub2f9\uba74\uc801\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774\ub294 \ub9ce\uc740 \uba74\uc801\ub4e4\uc774 \uc5f0\uc18d\ud558\uc5ec \ubd84\ud3ec\ud560 \uac83\uac19\uae30 \ub54c\ubb38\uc5d0 kdeplot\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubd84\ud3ec\ub97c \uc54c\uc544\ubcfc \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \uc9c0\ud558\uc2e4\uc774 \uc5c6\ub294 \uc9d1\uc774 \uc788\uc744 \uc218 \uc788\ub294\ub370 \uc774\ub4e4 \uc9d1\uc740 \uc5b4\ub5a4 \ud615\ud0dc\ub85c \ub370\uc774\ud130\uac00 \ud45c\ud604\ub420\uc9c0 \uc0b4\ud3b4\ubcf4\uace0 \uadf8 \uac12\uc744 \uae30\uc900\uc810\uc73c\ub85c \uc7a1\uc544 \uc9c0\ud558\uc2e4\uc774 \uc788\ub294\uc9d1\uacfc \uc5c6\ub294\uc9d1\uacfc \uac19\uc740 Binary\ud615\ud0dc\uc758 \ucd94\uac00\uc801\uc778 \uc18d\uc131\uc744 \ub3c4\ucd9c\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","bb27fad4":"# sqft_basement","8a03f463":"# Condition\n\uc774\ubc88 \uceec\ub7fc\uc740 \uc9d1\uc758 \uc0c1\ud0dc\ub97c \ub098\ud0c0\ub0b4\ub294 \uceec\ub7fc\uc785\ub2c8\ub2e4. \uc544\ub9c8\ub3c4 view\uc640 \uc720\uc0ac\ud558\uac8c \uc21c\uc11c\ucc99\ub3c4\uc77c \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ub192\uc740\ucabd\uc73c\ub85c \uac08 \uc218\ub85d \uc88b\uc740 \uc0c1\ud0dc\uc758 \uc9d1\uc784\uc774 \uc608\uc0c1\ub418\uc9c0\ub9cc \uc77c\ub2e8\uc740 \ud6c8\ub828\uc138\ud2b8\uc640 \ud14c\uc2a4\ud2b8\uc138\ud2b8\uc758 \ucee8\ub514\uc158 \uac12\ub4e4\uc5d0 \ub300\ud55c \ubd84\ud3ec\ub97c \uc54c\uc544\ubd05\uc2dc\ub2e4.","166d0074":"\uc218\ub9ac\ub41c \uc9d1\ub4e4\uc744 \ubcf8\ub2e4\uba74 \ucd5c\uc18c 1930\ub144\ub3c4\ubd80\ud130 \ud574\ub2f9 \uac12\uc774 \ubd80\uc5ec\uac00 \ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc6b0\ub9ac\uac00 sqft_basement\uc5d0 \uc2e4\ud589\ud588\ub358 \uac83\uacfc \uac19\uc774 \uc218\ub9ac\uc5ec\ubd80\ub97c \ub17c\ub9ac\ud615 \uac12\uc73c\ub85c \ub098\ud0c0\ub0b4\ub294 \uceec\ub7fc\uc744 \ub9cc\ub4e4\uc5b4 \uc90d\uc2dc\ub2e4."}}