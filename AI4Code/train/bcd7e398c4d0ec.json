{"cell_type":{"3bdecf8b":"code","c7439da9":"code","b24bae97":"code","002110ef":"code","a469d774":"code","c0c874e0":"code","cabccc97":"code","29aed3a1":"code","c40a42ed":"code","a3fa3904":"code","38334c5f":"code","e36dfcde":"code","6f073959":"code","026d9724":"code","393cb577":"code","db4dfdb2":"code","8a7ae4e2":"code","c775a233":"code","3ac467e3":"code","5574a125":"code","e7f13d3d":"code","d7d7af71":"code","d0993f33":"code","f04cbae5":"code","ccc05b01":"code","c659d987":"code","cca09974":"code","ca16c0fe":"code","b1bd90e7":"code","f2c8af0f":"code","63f19115":"code","1eee5949":"code","ce0908ed":"code","e5854c01":"code","067b4385":"code","d8bde704":"code","2ef8794c":"code","9ac269e1":"code","60007cf0":"code","5c47d820":"code","a7481566":"code","c4ea631c":"code","c97c8134":"code","57a31d82":"code","6223a6f6":"code","a22dc797":"code","78ac2e17":"markdown","153cee89":"markdown","d6f07735":"markdown","76695072":"markdown","d853c55d":"markdown","aae7fa26":"markdown","df2b097c":"markdown","21bf4b52":"markdown","1c033e40":"markdown","80200030":"markdown","679ff334":"markdown","864960cc":"markdown","af7c4949":"markdown","f2d47a28":"markdown","20574349":"markdown"},"source":{"3bdecf8b":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n%matplotlib inline","c7439da9":"train_df = pd.read_csv('..\/input\/train\/train.csv')\ntrain_df.head(3)","b24bae97":"train_df.describe()","002110ef":"import missingno as msno\nmsno.bar(train_df,figsize=(20,4))","a469d774":"plt.style.use('ggplot')\ntrain_df.AdoptionSpeed.value_counts().plot(kind='bar')","c0c874e0":"train_df.Type.value_counts().plot(kind='bar')","cabccc97":"breed_label = pd.read_csv('..\/input\/breed_labels.csv')\nbreed_label.head()","29aed3a1":"train_df.Breed1.value_counts().reset_index().join(breed_label.set_index('BreedID'),on='index').rename(columns={'index':'Breed1','Breed1':'Count'}).tail()","c40a42ed":"train_df.Breed2.value_counts().reset_index().join(breed_label.set_index('BreedID'),on='index').rename(columns={'index':'Breed2','Breed2':'Count'}).tail()","a3fa3904":"train_df.Breed2.loc[train_df.Breed1==train_df.Breed2] = 0","38334c5f":"train_df.Breed2.loc[train_df.Breed1==train_df.Breed2]","e36dfcde":"train_df['Mixed_Breed'] = train_df.apply(lambda x: 0 if x.Breed2==0 and x.Breed1!=307 else 1, axis=1)","6f073959":"train_df[train_df[\"Breed2\"]!=0].head(3)","026d9724":"train_df.Mixed_Breed.value_counts().plot(kind='bar')","393cb577":"color_label = pd.read_csv('..\/input\/color_labels.csv')\ncolor_label","db4dfdb2":"train_df.Color1.value_counts().reset_index().join(color_label.set_index('ColorID'),on='index').rename(columns={'index':'Color1','Color1':'Count'})","8a7ae4e2":"train_df.Color2.value_counts().reset_index().join(color_label.set_index('ColorID'),on='index').rename(columns={'index':'Color2','Color2':'Count'})","c775a233":"train_df.Color3.value_counts().reset_index().join(color_label.set_index('ColorID'),on='index').rename(columns={'index':'Color3','Color3':'Count'})","3ac467e3":"train_df['Num_Color'] = train_df.apply(lambda x:  3-sum([y==0 for y in [x.Color1, x.Color2, x.Color3]]), axis=1)","5574a125":"train_df.Num_Color.value_counts().plot(kind='bar')","e7f13d3d":"train_df.MaturitySize.value_counts().plot(kind='bar')","d7d7af71":"state_label = pd.read_csv('..\/input\/state_labels.csv')\nstate_label","d0993f33":"train_df.State.value_counts().reset_index().join(state_label.set_index('StateID'),on='index').rename(columns={'index':'State','State':'Count'})","f04cbae5":"train_df['Description'].fillna(\"\", inplace=True)\ntrain_df['Description_Length'] = train_df.Description.map(len)","ccc05b01":"plt.figure(figsize=(20,10))\nsns.boxplot(x='AdoptionSpeed', y='Description_Length', data=train_df, showfliers=False)","c659d987":"y = train_df['AdoptionSpeed']","cca09974":"train_df.info()","ca16c0fe":"x = train_df.drop([\"Name\",\"RescuerID\",\"Description\",\"PetID\", \"AdoptionSpeed\"], axis = 1)","b1bd90e7":"x.head(3)","f2c8af0f":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(x, y)\n\n#sns.set(style=\"darkgrid\")\nfig, ax = plt.subplots(figsize=(6,6))\ny_pos = np.arange(x.shape[1])\nplt.barh(y_pos, model.feature_importances_, align='center', alpha=0.4)\nplt.yticks(y_pos, x)\nplt.xlabel('features')\nplt.title('feature_importances')\nplt.show()","63f19115":"from sklearn.decomposition import PCA\npca = PCA(10)\nnewdata = pca.fit_transform(x)\nnewdata.shape","1eee5949":"pca.explained_variance_ratio_      # \u767e\u5206\u6bd4","ce0908ed":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nx_pca = pca.fit_transform(ss.fit_transform(x))","e5854c01":"x_pca.shape","067b4385":"y.shape","d8bde704":"y2 = y.values","2ef8794c":"from sklearn.ensemble import RandomForestClassifier\n \nrf = RandomForestClassifier(criterion='gini', \n                             n_estimators=100,\n                             min_samples_split=12, #20\n                             min_samples_leaf=1,\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1) \n\nrf.fit(x, y2) #filter SP data\nprint(\"Out Of Bag score is %.4f\" % rf.oob_score_)","9ac269e1":"# Import train_test_split\nfrom sklearn.model_selection import train_test_split\n\n# Split the data into training and testing sets with 20% test rate\nX_train, X_test, y_train, y_test = train_test_split(x, y2, test_size = 0.2, random_state = 0)","60007cf0":"# Training model\nfrom sklearn.ensemble import RandomForestClassifier\nRFC = RandomForestClassifier(random_state=101)\nRFC.fit(X_train,y_train)\n\n# Import 4 metrics from sklearn for testing\nfrom sklearn.metrics import accuracy_score\nprint (\"Accuracy on testing data of RandomForestClassifier: {:.4f}\".format(accuracy_score(y_test, RFC.predict(X_test))))","5c47d820":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, RFC.predict(X_test))","a7481566":"from sklearn.model_selection import GridSearchCV","c4ea631c":"parameters = {'n_estimators':[10, 50, 100, 200, 400],\n              'min_samples_split':[8,12,16,20],\n              'min_samples_leaf':[1,2,3,4,5]\n             }","c97c8134":"#grid = GridSearchCV(rf, parameters)\n#grid_fit = grid.fit(x, y2)","57a31d82":"# Get the estimator\n#best_rf = grid_fit.best_estimator_","6223a6f6":"# Make predictions using the unoptimized and model\n#predictions_rf = (rf.fit(X_train, y_train)).predict(X_test)\n#best_predictions_rf = best_rf.predict(X_test)\n\n#from sklearn.metrics import accuracy_score\n#print (\"Accuracy on testing data of RandomForestClassifier: {:.4f}\".format(accuracy_score(y_test, best_predictions_rf)))","a22dc797":"#from sklearn.metrics import confusion_matrix\n#confusion_matrix(y_test, best_predictions_rf)","78ac2e17":"## Type\nType of animal (1 = Dog, 2 = Cat)","153cee89":"# 1. Data Exploration","d6f07735":"## Label\nCategorical speed of adoption. Lower is faster. ","76695072":"# 4. Model Tuning\nMemory issue, we don't go GridSearch at here.","d853c55d":"If the data of Bread1 is equal Bread2, the pet is mix-bread. Maybe mix-bread is the significant feature in model training.","aae7fa26":"## Size","df2b097c":" # 2. Feature Extraction","21bf4b52":"The number of color maybe the significant feature for model training.","1c033e40":"## Color_Label","80200030":"## State_label","679ff334":"## Description Sentiment\nThe length of description maybe is the significant feature for model training. ","864960cc":"##  Missing data review\nThere are only Pet's name of mising data. But we don't need Pet's name for feature extraction.","af7c4949":"Reduce the dimension of feature by PCA.","f2d47a28":"## Bread\n* Breed1 - Primary breed of pet (Refer to BreedLabels dictionary)\n* Breed2 - Secondary breed of pet, if pet is of mixed breed (Refer to BreedLabels dictionary)","20574349":"# 3. Model Training"}}