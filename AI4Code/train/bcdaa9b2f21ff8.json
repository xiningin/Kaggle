{"cell_type":{"17219515":"code","98f16c97":"code","53f8248e":"code","add8fbb3":"code","cc814cec":"code","97c18182":"code","8b176954":"code","ed25d628":"code","cec9fd13":"code","cc333055":"code","0fe945d2":"code","a0e86a31":"code","0fecd956":"code","21cb9568":"code","ad12ab38":"code","0745c8e9":"code","1b193c18":"code","9539d7d7":"code","34f4b706":"code","802e4fa7":"code","91017b68":"code","b327f139":"code","a711d6b5":"code","783c3938":"code","ef729055":"code","a0008476":"code","08f9a261":"code","bd3313b2":"code","8daece60":"code","be6a6a70":"code","8608ce6a":"code","dccaea4b":"code","da0a3882":"code","56a8feb9":"code","a7fff180":"code","16fe906a":"code","515c8fd7":"code","47315d0a":"code","338bbd94":"code","17535e44":"code","7337a27c":"markdown","bcc9ae58":"markdown","7d461ee3":"markdown","af622bb4":"markdown","8f9449a5":"markdown","93edc424":"markdown","566ea139":"markdown","07a87d8c":"markdown","d1b88267":"markdown","5ef9be44":"markdown","03b754a6":"markdown","e0068b63":"markdown","bad4a4b7":"markdown","d5975de6":"markdown","b9df853f":"markdown","d498e9ab":"markdown","9e206494":"markdown","8bc415c2":"markdown"},"source":{"17219515":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98f16c97":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","53f8248e":"# To ignore warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","add8fbb3":"# Reading the csv file and putting it into 'df' object.\ndf = pd.read_csv('..\/input\/inputdata\/adult.csv')","cc814cec":"# Let's understand the type of values in each column of our dataframe 'df'.\ndf.info()","97c18182":"# Let's understand the data, how it look like.\ndf.head()","8b176954":"# rows with missing values represented as'?'.\ndf_1 = df[df.workclass == '?']\ndf_1","ed25d628":"df_1.info()","cec9fd13":"df = df[df['workclass'] != '?']\ndf.head()","cc333055":"# select all categorical variables\ndf_categorical = df.select_dtypes(include=['object'])\n\n# checking whether any other columns contain a \"?\"\ndf_categorical.apply(lambda x: x==\"?\", axis=0).sum()","0fe945d2":"# dropping the \"?\"s\ndf = df[df['occupation'] != '?']\ndf = df[df['native.country'] != '?']","a0e86a31":"df.info()","0fecd956":"from sklearn import preprocessing\n\n# encode categorical variables using Label Encoder\n\n# select all categorical variables\ndf_categorical = df.select_dtypes(include=['object'])\ndf_categorical.head()","21cb9568":"# apply Label encoder to df_categorical\n\nle = preprocessing.LabelEncoder()\ndf_categorical = df_categorical.apply(le.fit_transform)\ndf_categorical.head()","ad12ab38":"# concat df_categorical with original df\ndf = df.drop(df_categorical.columns, axis=1)\ndf = pd.concat([df, df_categorical], axis=1)\ndf.head()","0745c8e9":"df.info()","1b193c18":"# convert target variable income to categorical\ndf['income'] = df['income'].astype('category')","9539d7d7":"# Importing train-test-split \nfrom sklearn.model_selection import train_test_split","34f4b706":"# Putting feature variable to X\nX = df.drop('income',axis=1)\n\n# Putting response variable to y\ny = df['income']","802e4fa7":"# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.30, \n                                                    random_state = 99)\nX_train.head()","91017b68":"# Importing decision tree classifier from sklearn library\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Fitting the decision tree with default hyperparameters, apart from\n# max_depth which is 5 so that we can plot and read the tree.\ndt_default = DecisionTreeClassifier(max_depth=5)\ndt_default.fit(X_train, y_train)","b327f139":"# Let's check the evaluation metrics of our default model\n\n# Importing classification report and confusion matrix from sklearn metrics\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\n# Making predictions\ny_pred_default = dt_default.predict(X_test)\n\n# Printing classification report\nprint(classification_report(y_test, y_pred_default))","a711d6b5":"# Printing confusion matrix and accuracy\nprint(confusion_matrix(y_test,y_pred_default))\nprint(accuracy_score(y_test,y_pred_default))","783c3938":"# GridSearchCV to find optimal max_depth\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\n\n\n# specify number of folds for k-fold CV\nn_folds = 5\n\n# parameters to build the model on\nparameters = {'max_depth': range(1, 40)}\n\n# instantiate the model\ndtree = DecisionTreeClassifier(criterion = \"gini\", \n                               random_state = 100)\n\n# fit tree on training data\ntree = GridSearchCV(dtree, parameters, \n                    cv=n_folds, \n                   scoring=\"accuracy\",return_train_score=True)\ntree.fit(X_train, y_train)","ef729055":"# scores of GridSearch CV\nscores = tree.cv_results_\npd.DataFrame(scores).head()","a0008476":"# plotting accuracies with max_depth\nplt.figure()\nplt.plot(scores[\"param_max_depth\"], \n         scores[\"mean_train_score\"], \n         label=\"training accuracy\")\nplt.plot(scores[\"param_max_depth\"], \n         scores[\"mean_test_score\"], \n         label=\"test accuracy\")\nplt.xlabel(\"max_depth\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()\n","08f9a261":"# GridSearchCV to find optimal max_depth\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\n\n\n# specify number of folds for k-fold CV\nn_folds = 5\n\n# parameters to build the model on\nparameters = {'min_samples_leaf': range(5, 200, 20)}\n\n# instantiate the model\ndtree = DecisionTreeClassifier(criterion = \"gini\", \n                               random_state = 100)\n\n# fit tree on training data\ntree = GridSearchCV(dtree, parameters, \n                    cv=n_folds, \n                   scoring=\"accuracy\",return_train_score=True)\ntree.fit(X_train, y_train)","bd3313b2":"# scores of GridSearch CV\nscores = tree.cv_results_\npd.DataFrame(scores).head()","8daece60":"# plotting accuracies with min_samples_leaf\nplt.figure()\nplt.plot(scores[\"param_min_samples_leaf\"], \n         scores[\"mean_train_score\"], \n         label=\"training accuracy\")\nplt.plot(scores[\"param_min_samples_leaf\"], \n         scores[\"mean_test_score\"], \n         label=\"test accuracy\")\nplt.xlabel(\"min_samples_leaf\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()\n","be6a6a70":"# GridSearchCV to find optimal min_samples_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\n\n\n# specify number of folds for k-fold CV\nn_folds = 5\n\n# parameters to build the model on\nparameters = {'min_samples_split': range(5, 200, 20)}\n\n# instantiate the model\ndtree = DecisionTreeClassifier(criterion = \"gini\", \n                               random_state = 100)\n\n# fit tree on training data\ntree = GridSearchCV(dtree, parameters, \n                    cv=n_folds, \n                   scoring=\"accuracy\",return_train_score=True)\ntree.fit(X_train, y_train)","8608ce6a":"# scores of GridSearch CV\nscores = tree.cv_results_\npd.DataFrame(scores).head()","dccaea4b":"# plotting accuracies with min_samples_leaf\nplt.figure()\nplt.plot(scores[\"param_min_samples_split\"], \n         scores[\"mean_train_score\"], \n         label=\"training accuracy\")\nplt.plot(scores[\"param_min_samples_split\"], \n         scores[\"mean_test_score\"], \n         label=\"test accuracy\")\nplt.xlabel(\"min_samples_split\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()\n","da0a3882":"# Create the parameter grid \nparam_grid = {\n    'max_depth': range(5, 15, 5),\n    'min_samples_leaf': range(50, 150, 50),\n    'min_samples_split': range(50, 150, 50),\n    'criterion': [\"entropy\", \"gini\"]\n}\n\nn_folds = 5\n\n# Instantiate the grid search model\ndtree = DecisionTreeClassifier()\ngrid_search = GridSearchCV(estimator = dtree, param_grid = param_grid, \n                          cv = n_folds, verbose = 1)\n\n# Fit the grid search to the data\ngrid_search.fit(X_train,y_train)","56a8feb9":"# cv results\ncv_results = pd.DataFrame(grid_search.cv_results_)\ncv_results","a7fff180":"# printing the optimal accuracy score and hyperparameters\nprint(\"best accuracy\", grid_search.best_score_)\nprint(grid_search.best_estimator_)","16fe906a":"# model with optimal hyperparameters\nclf_gini = DecisionTreeClassifier(criterion = \"gini\", \n                                  random_state = 100,\n                                  max_depth=10, \n                                  min_samples_leaf=50,\n                                  min_samples_split=50)\nclf_gini.fit(X_train, y_train)","515c8fd7":"# accuracy score\nclf_gini.score(X_test,y_test)","47315d0a":"# tree with max_depth = 3\nclf_gini = DecisionTreeClassifier(criterion = \"gini\", \n                                  random_state = 100,\n                                  max_depth=3, \n                                  min_samples_leaf=50,\n                                  min_samples_split=50)\nclf_gini.fit(X_train, y_train)\n\n# score\nprint(clf_gini.score(X_test,y_test))","338bbd94":"# classification metrics\nfrom sklearn.metrics import classification_report,confusion_matrix\ny_pred = clf_gini.predict(X_test)\nprint(classification_report(y_test, y_pred))","17535e44":"# confusion matrix\nprint(confusion_matrix(y_test,y_pred))","7337a27c":"You can see that at low values of min_samples_leaf, the tree gets a bit overfitted. At values > 100, however, the model becomes more stable and the training and test accuracy start to converge.\n\n","bcc9ae58":"There are some missing values","7d461ee3":"There are a number of preprocessing steps we need to do before building the model. \n\nFirstly, note that we have both categorical and numeric features as predictors. In previous models such as linear and logistic regression, we had created **dummy variables** for categorical variables, since those models (being mathematical equations) can  process only numeric variables.\n\nAll that is not required in decision trees, since they can process categorical variables easily. However, we still need to **encode the categorical variables** into a standard format so that sklearn can understand them and build the tree. We'll do that using the ```LabelEncoder()``` class, which comes with ```sklearn.preprocessing```. \n","af622bb4":"### Tuning min_samples_leaf\n\nThe hyperparameter **min_samples_leaf** indicates the minimum number of samples required to be at a leaf.<br>\n\nSo if the values of min_samples_leaf is less, say 5, then the will be constructed even if a leaf has 5, 6 etc. observations (and is likely to overfit).<br>\n\nLet's see what will be the optimum value for min_samples_leaf.","8f9449a5":"The columns occupation and native.country contain some \"?\"s. Let's get rid of them.","93edc424":"### Tuning min_samples_split\n\nThe hyperparameter **min_samples_split** is the minimum no. of samples required to split an internal node. Its default value is 2, which means that even if a node is having 2 samples it can be furthur divided into leaf nodes.","566ea139":"Now let's visualize how train and test score changes with max_depth.","07a87d8c":"Understanding and Cleaning the Data","d1b88267":"Now all the categorical variables are suitably encoded. Let's build the model.","5ef9be44":"## Grid Search to Find Optimal Hyperparameters\n\nWe can now use GridSearchCV to find multiple optimal hyperparameters together. Note that this time, we'll also specify the criterion (gini\/entropy or IG).","03b754a6":"You can see that as we increase the value of max_depth, both training and test score increase till about max-depth = 10, after which the test score gradually reduces. Note that the scores are average accuracies across the 5-folds. \n\nThus, it is clear that the model is overfitting the training data if the max_depth is too high. Next, let's see how the model behaves with other hyperparameters.","e0068b63":"This shows that as you increase the min_samples_split, the tree overfits lesser since the model is less complex.\n","bad4a4b7":"### Hyperparameter Tuning\n\nThe default tree is quite complex, and we need to simplify it by tuning the hyperparameters. \n\nFirst, let's understand the parameters in a decision tree. You can read this in the documentation using ```help(DecisionTreeClassifier)```.\n\n\n- **criterion** (Gini\/IG or entropy): It defines the function to measure the quality of a split. Sklearn supports \u201cgini\u201d criteria for Gini Index & \u201centropy\u201d for Information Gain. By default, it takes the value \u201cgini\u201d.\n- **splitter**: It defines the strategy to choose the split at each node. Supports \u201cbest\u201d value to choose the best split & \u201crandom\u201d to choose the best random split. By default, it takes \u201cbest\u201d value.\n- **max_features**: It defines the no. of features to consider when looking for the best split. We can input integer, float, string & None value.\n    - If an integer is inputted then it considers that value as max features at each split.\n    - If float value is taken then it shows the percentage of features at each split.\n    - If \u201cauto\u201d or \u201csqrt\u201d is taken then max_features=sqrt(n_features).\n    - If \u201clog2\u201d is taken then max_features= log2(n_features).\n    - If None, then max_features=n_features. By default, it takes \u201cNone\u201d value.\n- **max_depth**: The max_depth parameter denotes maximum depth of the tree. It can take any integer value or None. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples. By default, it takes \u201cNone\u201d value.\n- **min_samples_split**: This tells above the minimum no. of samples reqd. to split an internal node. If an integer value is taken then consider min_samples_split as the minimum no. If float, then it shows percentage. By default, it takes \u201c2\u201d value.\n- **min_samples_leaf**: The minimum number of samples required to be at a leaf node. If an integer value is taken then consider - -min_samples_leaf as the minimum no. If float, then it shows percentage. By default, it takes \u201c1\u201d value.\n- **max_leaf_nodes**: It defines the maximum number of possible leaf nodes. If None then it takes an unlimited number of leaf nodes. By default, it takes \u201cNone\u201d value.\n- **min_impurity_split**: It defines the threshold for early stopping tree growth. A node will split if its impurity is above the threshold otherwise it is a leaf.<br>\n\n","d5975de6":"Let's first build a decision tree with default hyperparameters. Then we'll use cross-validation to tune them.","b9df853f":"There are 1836 rows with missing values, which is about 5% of the total data. We choose to simply drop these rows.","d498e9ab":"Running the model with best parameters obtained from grid search.","9e206494":"## Model Building and Evaluation","8bc415c2":"<hr>\n\n### Tuning max_depth\n\nLet's first try to find the optimum values for max_depth and understand how the value of max_depth affects the decision tree.\n\nHere, we are creating a dataframe with max_depth in range 1 to 80 and checking the accuracy score corresponding to each max_depth. \n\nTo reiterate, a grid search scheme consists of:\n\n    - an estimator (classifier such as SVC() or decision tree)\n    - a parameter space\n    - a method for searching or sampling candidates (optional) \n    - a cross-validation scheme, and\n    - a score function (accuracy, roc_auc etc.)"}}