{"cell_type":{"4acc1d59":"code","fe3e578a":"code","204d3f99":"code","bc742bcb":"code","1feb0a4b":"code","949cede2":"code","326178a7":"code","0e3f6636":"code","a54a1b7f":"code","87fa5ff0":"code","e66bcd3f":"code","1c7915fe":"code","2ecbc083":"code","c182daf0":"code","4bd6d2b5":"code","f9c424f6":"code","ac164cd4":"code","4de485a9":"code","e2f21e34":"code","9f7b78c0":"code","c5fa1f02":"code","6e2d2515":"code","af2d64ce":"code","e65bbd92":"code","bccdefbb":"code","a275132f":"code","ab60e444":"code","cf2815d3":"code","169e22b6":"code","75620bcc":"code","0469f1ad":"code","f5c9db2e":"code","bdcc610c":"code","54543ad2":"code","93927355":"code","ad4c530c":"markdown","accfc04b":"markdown","f85d6021":"markdown"},"source":{"4acc1d59":"# importing libraries.\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline","fe3e578a":"import pathlib\npath = '..\/input\/fashion-product-images-dataset\/fashion-dataset\/fashion-dataset\/'\ndataset_path = pathlib.Path(path)\nimages=os.listdir(dataset_path)\nimages","204d3f99":"DATASET_PATH = \"\/kaggle\/input\/fashion-product-images-dataset\/fashion-dataset\/fashion-dataset\/\"\nprint(os.listdir(DATASET_PATH))","bc742bcb":"# what is inside the main directory\nlist_directory = os.listdir(DATASET_PATH)\nprint(list_directory)\n\n# each time directory files gets reordered. That's why needed to find where images folder is.\nindex=0\nfor i in range (len(list_directory)):\n    if list_directory[i]==\"images\":\n        index=i\n        break\n\n# what is in the image directory\nimageIndex = os.listdir(DATASET_PATH+list_directory[index])\n# print(type(imageIndex))\nhead = 10\n\n# collecting some samples in list\nsampleImages = []\n\n# showing indices\nfor i in range (head):\n    sampleImages.append(imageIndex[i])\n    print(sampleImages[i])\n\n","1feb0a4b":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nplt.figure(figsize=(20,20))\nfor i in range(10, 20):\n    plt.subplot(6, 10, i-10+1)\n    cloth_img =  mpimg.imread(path + 'images\/100'+ str(i) +'.jpg')\n    plt.imshow(cloth_img)\n    plt.axis(\"off\")\nplt.subplots_adjust(wspace=-0.5, hspace=1)\nplt.show()","949cede2":"df = pd.read_csv(path + \"styles.csv\", nrows=6000, error_bad_lines=False)\ndf['image'] = df.apply(lambda x: str(x['id']) + \".jpg\", axis=1)\ndf = df.reset_index(drop=True)\nprint(df.shape)\ndf.head(5)","326178a7":"augmentedDataframe = pd.DataFrame({\n    'filename': df['image'],\n    'type': df['articleType']\n})\n\n# total number of entries in the dataframe\ntotal_row = len(augmentedDataframe)\nprint('total row count: ', total_row)\n\naugmentedDataframe.head(10)","0e3f6636":"unique_types = augmentedDataframe['type'].unique().tolist()\ntotal_class = len(unique_types)\nprint(total_class)\nprint(unique_types)\nprint(unique_types[0])\nprint(unique_types.index(unique_types[0]))\naugmentedDataframe['number_types'] = augmentedDataframe['type'].apply(lambda x: unique_types.index(x) if x in unique_types else 0)\naugmentedDataframe.head(10)","a54a1b7f":"augmentedDataframe['type'].value_counts()","87fa5ff0":"plt.figure(figsize=(20,5))\naugmentedDataframe['type'].value_counts().plot(kind='bar',x='type',y='filename')\nplt.show()","e66bcd3f":"def getData(start,stop):\n    x_data = []\n    y_data = []\n    #start = 0 #setting start parameter\n    #stop = int(0.001*total_row) #setting stop parameter \n    \n    for i in range(start, stop): \n        Image_path=DATASET_PATH+list_directory[index]+\"\/\"+augmentedDataframe.loc[i,'filename']\n#         print(augmentedDataframe.loc[i,'filename'])\n        image = cv2.imread(Image_path,cv2.IMREAD_GRAYSCALE)\n        try:\n            resized_img = cv2.resize(image, dsize=(28, 28))\n        except:\n            print(\"Rejected Image: \"+augmentedDataframe.loc[i,'filename'])\n            continue\n        x_data.append(resized_img) \n        y_values = augmentedDataframe.loc[i,'number_types'] # earlier it was type\n        y_data.append(y_values)\n                \n    return x_data, y_data","1c7915fe":"X=[]\nY=[]\n# for now start=0,stop=(0.001*total_row)\n# total_row=count of rows in augmented data frame\nstart = 0\nstop = int(0.001*total_row) # testing with 0.1% image of the dataset\nX,Y=getData(start,stop)\n\nprint(type(X))\nprint(X[0])\nplt.title(unique_types[Y[0]])\nplt.imshow(X[0])","2ecbc083":"X = np.array(X).reshape(-1, 28,28,1)\nY = np.array(Y)","c182daf0":"X = X\/255.0","4bd6d2b5":"Y = Y.reshape(len(X),)","f9c424f6":"print(type(X))\nprint(X.shape)\nprint(Y.shape)\nprint(X[0])\nprint(Y[0])","ac164cd4":"X=[]\nY=[]\nstart = 0\nstop = total_row\nX,Y=getData(start,stop)\n\n# conversion into numpy array\nX = np.array(X).reshape(-1, 28,28,1)\nY = np.array(Y)\n\n# normalizing\nX = X\/255\n\n# processing Y_train for dimension matching\nY = Y.reshape(len(X),)","4de485a9":"print('Image Data Shape: ',X.shape)\nprint('Label Data Shape: ',Y.shape)","e2f21e34":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state = 500)\nprint('Train Image Data Shape: ',X_train.shape)\nprint('Train Label Data Shape: ',Y_train.shape)\nprint('Test Image Data Shape: ',X_test.shape)\nprint('Test Label Data Shape: ',Y_test.shape)","9f7b78c0":"X_train, X_validate, Y_train, Y_validate = train_test_split(X_train, Y_train, test_size = 0.1, random_state = 500)\nprint('Train Image Data Shape: ',X_train.shape)\nprint('Train Label Data Shape: ',Y_train.shape)\nprint('Validation Image Data Shape: ',X_validate.shape)\nprint('Validation Label Data Shape: ',Y_validate.shape)","c5fa1f02":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam\nimport os\nimport tensorflow as tf\nimport datetime, os\nfrom tensorflow.keras.callbacks import TensorBoard","6e2d2515":"def build_model():\n    cnn_model = Sequential()\n    cnn_model.add(Conv2D(32, (3, 3), input_shape = (28,28,1), activation='relu'))\n    cnn_model.add(MaxPooling2D(pool_size = (2, 2)))\n    cnn_model.add(Dropout(0.25))\n\n    cnn_model.add(Conv2D(64, (3, 3), input_shape = (28,28,1), activation='relu'))\n    cnn_model.add(MaxPooling2D(pool_size = (2, 2)))\n    cnn_model.add(Dropout(0.25))\n\n    cnn_model.add(Conv2D(128, (3, 3), input_shape = (28,28,1), activation='relu'))\n    cnn_model.add(MaxPooling2D(pool_size = (2, 2)))\n    cnn_model.add(Dropout(0.25))\n\n    cnn_model.add(Flatten())\n    cnn_model.add(Dense(units = 512, activation = 'relu'))\n    cnn_model.add(Dropout(0.25))\n    cnn_model.add(Dense(units = total_class, activation = 'softmax'))\n    return cnn_model\n\n\nmodel=build_model()\nprint(model.summary())","af2d64ce":"def train_model(model):\n    model.compile(loss ='sparse_categorical_crossentropy', optimizer='adam' ,metrics =['accuracy'])\n    history = model.fit(X_train, Y_train, batch_size = 128, epochs = 500, verbose = 1, validation_data = (X_validate, Y_validate))\n#     model.fit(X_train, Y_train, epochs=50, batch_size=512, validation_split=0.2)\n\ntrain_model(model)","e65bbd92":"plt.figure(figsize=(12, 8))\n\nplt.subplot(2, 2, 1)\nplt.plot(model.history.history['loss'], label='Loss')\n# plt.plot(model.history.history['val_loss'], label='val_Loss')\nplt.legend()\nplt.grid()\nplt.title('Loss evolution')\n\nplt.subplot(2, 2, 2)\nplt.plot(model.history.history['accuracy'], label='accuracy')\n# plt.plot(model.history.history['val_accuracy'], label='val_accuracy')\nplt.legend()\nplt.grid()\nplt.title('Accuracy evolution')","bccdefbb":"model.save('visual_product_recommend.h5')","a275132f":"from keras import models\nmodel = models.load_model('visual_product_recommend.h5')","ab60e444":"#predicted_classes = model.predict_classes(X_test)\npredict_x=model.predict(X_test) \npredicted_classes=np.argmax(predict_x,axis=1)","cf2815d3":"\n#PC=PredictedClass #TC=TrueClass\nL = 5\nW = 5\nfig, axes = plt.subplots(L, W, figsize = (12,12))\naxes = axes.ravel()\n\nfor i in np.arange(0, L * W):  \n    axes[i].imshow(X_test[i].reshape(28,28))\n    axes[i].set_title(f\"PC = {unique_types[predicted_classes[i]]}\\n TC = {unique_types[Y_test[i]]}\") #predicted_classes[i]:0.1f #Y_test[i]:0.1f\n    axes[i].axis('off')\nplt.subplots_adjust(wspace=0.5)","169e22b6":"#augmentedDataframe.head(10)\ndef load_image(i):\n    Image_path=DATASET_PATH+list_directory[index]+\"\/\"+augmentedDataframe.loc[i,'filename']\n    Image_id=augmentedDataframe.loc[i,'filename'].split(\".\")\n    res=Image_id[0]\n    image = cv2.imread(Image_path,cv2.IMREAD_COLOR)\n    resized_img = cv2.resize(image, dsize=(224, 224))\n    return resized_img,res\nimg,img_id = load_image(200)\nimg=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nplt.title(img_id)\nplt.imshow(img)","75620bcc":"def make_prediction(img):\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) \n    resized_img = cv2.resize(img, dsize=(28, 28))\n    x_data = np.array(resized_img).reshape(-1, 28,28,1)\n    x_data=x_data\/255\n#     print(x_data)\n#     print(x_data.shape)\n    result=model.predict(x_data)\n#     print(type(result))\n#     print(np.argmax(result))\n    return x_data,unique_types[np.argmax(result)]\n\nnumpy_image,result=make_prediction(img)\nprint(result)","0469f1ad":"typeList=[]\nfor i, row in df.iterrows(): \n    if(row[\"articleType\"]==result):\n        #print(row[\"id\"],row[\"articleType\"])\n        if(img_id!=str(row[\"id\"])):\n            typeList.append(row['id'])\n            \n            \nprint(typeList)            ","f5c9db2e":"i=0\nX_similar=[]\nX_id_similar=[]\nX_numpy=[]\nfor imageId in typeList:\n#     print(imageId)\n    Image_path=DATASET_PATH+list_directory[index]+\"\/\"+str(imageId)+\".jpg\"\n    image = cv2.imread(Image_path,cv2.IMREAD_GRAYSCALE)\n    try:\n        resized_img = cv2.resize(image, dsize=(28,28))\n    except:\n        print(\"can't read file: \", str(imageId)+\".jpg\")\n    X_similar.append(resized_img)\n    X_id_similar.append(imageId)\n        \nX_numpy = np.array(X_similar).reshape(-1, 28,28,1)\nX_numpy = X_numpy\/255\n#print(X_numpy[0])\n\nplt.imshow(X_similar[0])\nplt.title(X_id_similar[0])","bdcc610c":"import math\ndef calculateDistance(i1, i2):\n    return math.sqrt(np.sum((i1-i2)**2))\n\nprint(calculateDistance(numpy_image,X_numpy[0]))","54543ad2":"distance_list=[]\nfor i in range (0, len(X_numpy)):\n    distance_list.append(calculateDistance(numpy_image,X_numpy[i]))\n\nsorted_distance_list=distance_list.copy()\n#print(distance_list)\nsorted_distance_list.sort()\n\nleast_ten_distance=sorted_distance_list[0:10]\nprint(least_ten_distance)\nindex_distance=[]\nfor i in range (0, len(least_ten_distance)-1):\n    if(least_ten_distance[i]!=least_ten_distance[i+1]):\n        index_distance.append(distance_list.index(least_ten_distance[i]))\n\nindex_distance=index_distance[0:5]\n\nprint(index_distance)","93927355":"# Image_path=DATASET_PATH+list_directory[index]+\"\/\"+str(img_id)+\".jpg\"\n# src = cv2.imread(Image_path)\n# image = cv2.cvtColor(src, cv2.COLOR_BGR2RGB) \nplt.imshow(img)\nplt.title(img_id)\n\nfig=plt.figure()\nfig.set_figheight(15)\nfig.set_figwidth(15)\naxis=[]\nfor i in range(0,len(index_distance)):\n    print(X_id_similar[i])\n    Image_path=DATASET_PATH+list_directory[index]+\"\/\"+str(X_id_similar[index_distance[i]])+\".jpg\"\n    src = cv2.imread(Image_path)\n    image = cv2.cvtColor(src, cv2.COLOR_BGR2RGB) \n    axis.append(fig.add_subplot(1,5, i+1))\n    subplot_title=str(X_id_similar[index_distance[i]])\n    axis[-1].set_title(subplot_title)  \n    plt.imshow(image)\n    \nfig.tight_layout()\nplt.show()    ","ad4c530c":"CNN","accfc04b":"Here all X=image_data, Y=label_data","f85d6021":"Recommendation"}}