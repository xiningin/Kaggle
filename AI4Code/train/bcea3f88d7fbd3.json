{"cell_type":{"9b05f2eb":"code","b3d727dc":"code","383e9f99":"code","b5342613":"code","e4cafef7":"code","8088f575":"code","56921f44":"code","e6397202":"code","891cdd02":"code","a0b87a68":"code","74d6d49e":"code","c0b8780a":"code","d1001a63":"code","7bd343d8":"code","86171341":"code","3795950b":"code","b861c11e":"code","0077bcc6":"code","cbbd1df2":"code","369a9aee":"code","ca3342a5":"code","e7359664":"code","bae82d27":"code","cb4fd141":"code","5956212e":"code","dc3dcf58":"code","ec046edf":"code","7ad63f98":"code","ef87f37e":"code","fe0d08b3":"code","925418eb":"code","4dc7a078":"code","866264e2":"code","3d20b84e":"code","8d76cecd":"code","a47ba97a":"code","95ef811a":"code","5c0fa463":"code","f78c70bb":"code","4e4b4daa":"code","d6049441":"code","978bec18":"code","fd4e461d":"code","e2072c25":"code","d7166c01":"code","c24ab061":"code","348e1cf0":"code","4d5008d9":"code","759f67b0":"code","5facd98a":"code","b1dc2ce9":"code","80deffcb":"code","9a4c1d2c":"code","f9377140":"code","85f365ee":"code","1581416b":"code","e1417796":"code","da59ce84":"code","41cf1076":"code","b5b54e77":"code","1d99fca9":"code","efe43c21":"code","8b956603":"code","cd2812f6":"code","638cea47":"code","f505eaa8":"code","4322a0f4":"code","87509875":"code","637c7dac":"code","82068f8b":"code","aa31cc12":"markdown","c409b585":"markdown","5ed485d4":"markdown","a5f64412":"markdown","bb531ef8":"markdown","283ede58":"markdown","fe495ff3":"markdown","718bf0d7":"markdown","db06def4":"markdown","84d1eed1":"markdown","58622976":"markdown","5414aadc":"markdown","80d99bd2":"markdown","603be0a2":"markdown","6c412f74":"markdown","08bf08a5":"markdown","6bb6ce63":"markdown","ed577444":"markdown","bb1e54b5":"markdown","a1d20dc6":"markdown","20003435":"markdown","97783558":"markdown","7d2bbfb2":"markdown","1d2c0f9b":"markdown","689089cf":"markdown","657811b6":"markdown","da25a3b5":"markdown","a69a0513":"markdown","7ef3462d":"markdown","0cd34e00":"markdown","501122c9":"markdown","8a80a63c":"markdown","f5016e43":"markdown","23c543dc":"markdown","b5d2543b":"markdown","8a3c8e17":"markdown","e7dc8802":"markdown","9f81ca06":"markdown","ea21c7a1":"markdown","96086e77":"markdown"},"source":{"9b05f2eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3d727dc":"## Importing the datasets\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","383e9f99":"#get the shape of the dataframe \ntrain.shape","b5342613":"#get the columns of the data frame\ntrain.columns","e4cafef7":"#get the data type of the columns using dtypes attribute\ntrain.dtypes","8088f575":"train.info()","56921f44":"train.describe()","e6397202":"print(f\"train is of type : {type(train)} \")\nprint(f\"shape attribute returns : {type(train.shape)} \")\nprint(f\"columns attribute returns : {type(train.columns)} \")\nprint(f\"dtypes attribute returns : {type(train.dtypes)} \")\n\n","891cdd02":"#head method by default gives the first\/top five rows of the dataframe\ntrain.head()  # index 0 to 4","a0b87a68":"#the number of rows returned from head method can be controlled by passing the argument n\ntrain.head(n=4)","74d6d49e":"train.head(3)","c0b8780a":"#tail method is similar to head but fetches rows from the bottom\n\ntrain.tail()","d1001a63":"train.tail(n=3)","7bd343d8":"train.tail(4)","86171341":"# sample() randomly selects the rows and displays and the default number of rows displayed is 1\n\ntrain.sample()","3795950b":"train.sample(n=4)","b861c11e":"train.sample(2)","0077bcc6":"# display first 10 rows\ntrain[0:10] # 0 inclusive and 10 exclusive","cbbd1df2":"# just display name column\ntrain['Name'].sample(5)","369a9aee":"# display multiple columns\ncols = ['Name','Sex','Age']\ntrain[cols].sample(5)","ca3342a5":"#loc for displaying a particular row\n\n#display 99th row\n\ntrain.loc[98]  #index starts from 0","e7359664":"#display 1st,25th,50th rows\n\ntrain.loc[[0,24,49]]","bae82d27":"#display from 15th row to 20th\n# In loc the start and end are inclusive\ntrain.loc[14:19]","cb4fd141":"#display from 15th row to 20th only Name\ntrain.loc[14:19]['Name']","5956212e":"#display from 15th row to 20th only Name, Age\ntrain.loc[14:19][['Name','Age']]","dc3dcf58":"#display from 15th row to 20th and all columns between name and embarked\ntrain.loc[14:19,'Name':'Embarked']","ec046edf":"# to understand the loc better let us replace the default index and make the name as index just for demonstration purpose\ntrain_temp = train.set_index('Name',inplace=False)","7ad63f98":"# can see that now the row index is Name and is no more the default index \ntrain_temp.head()","ef87f37e":"#loc using the new name index\ntrain_temp.loc['Braund, Mr. Owen Harris']","fe0d08b3":"# display rows using the range\ntrain_temp.loc['Braund, Mr. Owen Harris':'Allen, Mr. William Henry']","925418eb":"#displaying rows using loc range and filter columns as well\ntrain_temp.loc['Braund, Mr. Owen Harris':'Allen, Mr. William Henry', 'PassengerId':'Embarked']","4dc7a078":"# select 0 to 9 rows with all the columns\n\ntrain.iloc[0:10] # 0 is inclusive and 10 is exclusive","866264e2":"# select 0 to 9 rows with all the columns\n\ntrain.iloc[0:10,:]","3d20b84e":"# select 0 to 9 rows 3 to 5 columns\n\ntrain.iloc[0:10,3:6]  # 0 inclusive,10 exclusive, 3 inclusive, 6 exclusive","8d76cecd":"# select particular row\ntrain.iloc[10,:]","a47ba97a":"train_temp.loc['Allen, Mr. William Henry','Age']","95ef811a":"train_temp.loc[train_temp.Age==25]","5c0fa463":"train_temp.loc[(train_temp.Age==25) & (train_temp.Sex=='male')]","f78c70bb":"train.iloc[-100:, -8:]","4e4b4daa":"grouped_by_age = train.groupby('Sex')\ngrouped_by_age.sample(5)","d6049441":"train.groupby('Sex')['Age'].mean()","978bec18":"train[train.Survived==1].groupby('Sex').nunique()","fd4e461d":"print(train[(train.Survived==1) & (train.Age>=50)].shape[0])\nprint(len(train[(train.Survived==1) & (train.Age>=50)]))","e2072c25":"train.groupby('Sex')['Age'].value_counts()","d7166c01":"train.sort_values('Name').head(5)","c24ab061":"train.sort_values('Name').tail(5)","348e1cf0":"train.rename(columns={'Sex':'Gender','Fare':'Cost'}, inplace=False)  #inplace is False and hence this change is temporary","4d5008d9":"pd.crosstab(train['Sex'],train['Survived'])","759f67b0":"pd.crosstab(train['Survived'],train['Sex'])","5facd98a":"# get the mean age of the survived\ntrain[train.Survived ==1]['Age'].mean()","b1dc2ce9":"# get the mean age of all the male survived\ntrain[(train.Survived ==1) & (train.Sex=='male')]['Age'].mean()","80deffcb":"# get the mean age of all the fe-male survived\ntrain[(train.Survived ==1) & (train.Sex=='female')]['Age'].mean()","9a4c1d2c":"#get all the rows where embarked value = S\ntrain_temp = train.dropna()\ntrain_temp[train_temp.Embarked=='S']","f9377140":"train.loc[10:20:,'Name':'Embarked']","85f365ee":"train.iloc[10:21:,3:12]","1581416b":"train.groupby('Sex')['Fare'].sum()","e1417796":"train.groupby('Survived')['Fare'].sum()","da59ce84":"train['Sex'].value_counts()","41cf1076":"train.groupby('Embarked')['Fare'].mean()","b5b54e77":"train_survived = train[train['Survived']==1]\ntrain_survived['Sex'].value_counts()","1d99fca9":"def categorise_age(age):\n    if age <= 12 : \n        return 'child'\n    if age <= 20 : \n        return 'teen'\n    if age >50 :\n        return 'senior'\n    else :\n        return 'adult'\n\ntrain['age_group']=train.Age.apply(lambda x :  categorise_age(x))","efe43c21":"train.age_group.value_counts()","8b956603":"import matplotlib as plt\n%matplotlib inline\nimport seaborn as sns","cd2812f6":"sns.countplot(train.Sex)","638cea47":"sns.countplot(train.age_group)","f505eaa8":"sns.countplot(train.Survived)","4322a0f4":"sns.catplot(x='Sex',y='Survived',kind='bar',data=train)","87509875":"sns.catplot(x='age_group',y='Survived',kind='bar',data=train)","637c7dac":"corr_matrix = train.corr()\ncorr_matrix['Survived']","82068f8b":"sns.heatmap(corr_matrix)","aa31cc12":"dtypes attribute returns the data type of every feature present in the dataset\n\nobject meaning string, int meaning whole number and float meaning the number with decimals","c409b585":"Get the count of male and female passengers","5ed485d4":"# get the count plot based on the Sex","a5f64412":"get the count of females survived and males survived","bb531ef8":"# column range","283ede58":" use loc to fetch rows between 10 & 20 with the columns bwn Name & Embarked","fe495ff3":"get the count of survived group by sex","718bf0d7":"> Get all the rows where age is 25","db06def4":"Get the Mean fare paid group by Survived","84d1eed1":"# info() \nThis method can be used to get more information of the data","58622976":"# type function\n\nTo know the kind of python object which we are working on we can use the type function as shown below","5414aadc":"for each gender categorise as per the age and get the count","80d99bd2":"# Practice","603be0a2":"Get the age of the person whose name is \"Allen, Mr. William Henry\"","6c412f74":"# Learn Pandas Basics and Visualization using Seaborn","08bf08a5":"get the last 100 rows having the last 8 columns","6bb6ce63":"Get the total fare paid group by the sex","ed577444":"# Correlation with Heatmap","bb1e54b5":"for each gender get the total count of survived","a1d20dc6":"# loc\n\nloc is label based fitering method where we have to specify the names of the rows and columns for filtering. index are the row labels and the columns are the column labels\n","20003435":"# Sorting Data by Column Values","97783558":"The above columns attribute returns the list of all the column names of the data frame","7d2bbfb2":"Get the count of people survived whose age >=50","1d2c0f9b":"# describe()\nthis method is used to get the statistical details like mean, count, std deviation ,min,max,median and the percentile summaries","689089cf":"# Part 1\n\n__This part covers the following concepts of the Pandas__\n\n1.reading csv and creating the data frame\n\n2.shape, columns, dtypes attributes\n\n3.info, describe methods\n\n4.loc,iloc for selection\n\n5.sorting, crosstab, groupby \n\n6.filtering rows, columns\n\n7.rename columns\n\n8.sample practice\n\n9.creating new columns","657811b6":"Get the mean of the age for each gender","da25a3b5":"# Rename Columns\n\nRename column sex to gender and Fare to Cost","a69a0513":"# pandas DataFrame attributes - shape, columns, dtypes\n shape, columns and dtypes are attributes of the dataframe and they don't need the paranthesis ()\n in this step let us check these attributes","7ef3462d":"# Part 2 - Visualization with seaborn","0cd34e00":"# iloc\n\nin contrary to loc iloc uses the integer based locations for selection and also in loc both start and end labels are inlcusive where as in the iloc the start is inclusive where as the end it not inclusive","501122c9":"# row selection for a range\n> ","8a80a63c":"# Create new columns based on age called age_group\n\nage<12 call child\n\nage<20 call it teen\n\nage>=20 and age <=50 call it adult\n\nage>50 call it senior","f5016e43":"use iloc to fetch rows between 10 & 20 with the columns bwn Name & Embarked","23c543dc":"get the mean fare price grouped by Embarked","b5d2543b":"# groupby\n\nThis is used to seggregated the data in to groups based on some criteria","8a3c8e17":"# loc \nAs shown in the above cells the loc of the data frame operates on the labels be it rows(index) or columns(column names) ","e7dc8802":"# Real quick feel of data - head,tail,sample methods\n\nOnce the dataframe is loaded, to check if the data is properly loaded and get the initial sense of the data we can use the head,tail and sample methods as discussed below","9f81ca06":"Get all the rows where age is 25 and sex is male","ea21c7a1":"# Column selection\n\nIn the above methods we have seen that all the columns in the data frame is displayed during the retrieval. Also there are provisons to filter the columns and display only the columns of interest ","96086e77":"The above output of shape attribute returns a tuple with two values - the first one indicates the number of rows and the other indicates the numbero of columns\/feature\n\n891 - rows\n12 - columns"}}