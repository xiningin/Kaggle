{"cell_type":{"9d40604e":"code","dbb71811":"code","db37a844":"code","153f041c":"code","b50e6f79":"code","aacb1158":"code","fe524e5c":"code","754273ef":"code","f703bdb4":"code","37891ccc":"code","dc1589ca":"code","ce07a8e5":"code","59ade7c1":"code","2b0019f2":"code","1a9c8bac":"code","39b22432":"code","f9d793a8":"code","2a8f33ec":"code","73f67c5a":"code","e3970f7f":"code","674eb043":"code","7f638fa2":"code","16d5b75d":"code","46716297":"code","a07bff38":"markdown"},"source":{"9d40604e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dbb71811":"# Adding needed libraries and reading data\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import ensemble, tree, linear_model\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.utils import shuffle\n\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","db37a844":"test.head()","153f041c":"NAs = pd.concat([train.isnull().sum(), test.isnull().sum()], axis=1, keys=['Train', 'Test'])\nNAs[NAs.sum(axis=1) > 0]","b50e6f79":"def get_score(prediction, lables):    \n    print('R2: {}'.format(r2_score(prediction, lables)))\n    print('RMSE: {}'.format(np.sqrt(mean_squared_error(prediction, lables))))\n\n# Shows scores for train and validation sets    \ndef train_test(estimator, x_trn, x_tst, y_trn, y_tst):\n    prediction_train = estimator.predict(x_trn)\n    # Printing estimator\n    print(estimator)\n    # Printing train scores\n    get_score(prediction_train, y_trn)\n    prediction_test = estimator.predict(x_tst)\n    # Printing test scores\n    print(\"Test\")\n    get_score(prediction_test, y_tst)","aacb1158":"# Spliting to features and lables and deleting variable I don't need\ntrain_labels = train.pop('SalePrice')\n\nfeatures = pd.concat([train, test], keys=['train', 'test'])\n\n# I decided to get rid of features that have more than half of missing information or do not correlate to SalePrice\nfeatures.drop(['Utilities', 'RoofMatl', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'Heating', 'LowQualFinSF',\n               'BsmtFullBath', 'BsmtHalfBath', 'Functional', 'GarageYrBlt', 'GarageArea', 'GarageCond', 'WoodDeckSF',\n               'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC', 'Fence', 'MiscFeature', 'MiscVal'],\n              axis=1, inplace=True)","fe524e5c":"# MSSubClass as str\nfeatures['MSSubClass'] = features['MSSubClass'].astype(str)\n\n# MSZoning NA in pred. filling with most popular values\nfeatures['MSZoning'] = features['MSZoning'].fillna(features['MSZoning'].mode()[0])\n\n# LotFrontage  NA in all. I suppose NA means 0\nfeatures['LotFrontage'] = features['LotFrontage'].fillna(features['LotFrontage'].mean())\n\n# Alley  NA in all. NA means no access\nfeatures['Alley'] = features['Alley'].fillna('NOACCESS')\n\n# Converting OverallCond to str\nfeatures.OverallCond = features.OverallCond.astype(str)\n\n# MasVnrType NA in all. filling with most popular values\nfeatures['MasVnrType'] = features['MasVnrType'].fillna(features['MasVnrType'].mode()[0])\n\n# BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2\n# NA in all. NA means No basement\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    features[col] = features[col].fillna('NoBSMT')\n\n# TotalBsmtSF  NA in pred. I suppose NA means 0\nfeatures['TotalBsmtSF'] = features['TotalBsmtSF'].fillna(0)\n\n# Electrical NA in pred. filling with most popular values\nfeatures['Electrical'] = features['Electrical'].fillna(features['Electrical'].mode()[0])\n\n# KitchenAbvGr to categorical\nfeatures['KitchenAbvGr'] = features['KitchenAbvGr'].astype(str)\n\n# KitchenQual NA in pred. filling with most popular values\nfeatures['KitchenQual'] = features['KitchenQual'].fillna(features['KitchenQual'].mode()[0])\n\n# FireplaceQu  NA in all. NA means No Fireplace\nfeatures['FireplaceQu'] = features['FireplaceQu'].fillna('NoFP')\n\n# GarageType, GarageFinish, GarageQual  NA in all. NA means No Garage\nfor col in ('GarageType', 'GarageFinish', 'GarageQual'):\n    features[col] = features[col].fillna('NoGRG')\n\n# GarageCars  NA in pred. I suppose NA means 0\nfeatures['GarageCars'] = features['GarageCars'].fillna(0.0)\n\n# SaleType NA in pred. filling with most popular values\nfeatures['SaleType'] = features['SaleType'].fillna(features['SaleType'].mode()[0])\n\n# Year and Month to categorical\nfeatures['YrSold'] = features['YrSold'].astype(str)\nfeatures['MoSold'] = features['MoSold'].astype(str)\n\n# Adding total sqfootage feature and removing Basement, 1st and 2nd floor features\nfeatures['TotalSF'] = features['TotalBsmtSF'] + features['1stFlrSF'] + features['2ndFlrSF']\nfeatures.drop(['TotalBsmtSF', '1stFlrSF', '2ndFlrSF'], axis=1, inplace=True)","754273ef":"# Our SalesPrice is skewed right (check plot below). I'm logtransforming it. \nax = sns.distplot(train_labels)","f703bdb4":"## Log transformation of labels\ntrain_labels = np.log(train_labels)","37891ccc":"## Now it looks much better\nax = sns.distplot(train_labels)","dc1589ca":"## Standardizing numeric features\nnumeric_features = features.loc[:,['LotFrontage', 'LotArea', 'GrLivArea', 'TotalSF']]\nnumeric_features_standardized = (numeric_features - numeric_features.mean())\/numeric_features.std()","ce07a8e5":"ax = sns.pairplot(numeric_features_standardized)","59ade7c1":"# Getting Dummies from Condition1 and Condition2\nconditions = set([x for x in features['Condition1']] + [x for x in features['Condition2']])\ndummies = pd.DataFrame(data=np.zeros((len(features.index), len(conditions))),\n                       index=features.index, columns=conditions)\nfor i, cond in enumerate(zip(features['Condition1'], features['Condition2'])):\n    dummies.ix[i, cond] = 1\nfeatures = pd.concat([features, dummies.add_prefix('Condition_')], axis=1)\nfeatures.drop(['Condition1', 'Condition2'], axis=1, inplace=True)\n\n# Getting Dummies from Exterior1st and Exterior2nd\nexteriors = set([x for x in features['Exterior1st']] + [x for x in features['Exterior2nd']])\ndummies = pd.DataFrame(data=np.zeros((len(features.index), len(exteriors))),\n                       index=features.index, columns=exteriors)\nfor i, ext in enumerate(zip(features['Exterior1st'], features['Exterior2nd'])):\n    dummies.ix[i, ext] = 1\nfeatures = pd.concat([features, dummies.add_prefix('Exterior_')], axis=1)\nfeatures.drop(['Exterior1st', 'Exterior2nd', 'Exterior_nan'], axis=1, inplace=True)\n\n# Getting Dummies from all other categorical vars\nfor col in features.dtypes[features.dtypes == 'object'].index:\n    for_dummy = features.pop(col)\n    features = pd.concat([features, pd.get_dummies(for_dummy, prefix=col)], axis=1)","2b0019f2":"### Copying features\nfeatures_standardized = features.copy()\n\n### Replacing numeric features by standardized values\nfeatures_standardized.update(numeric_features_standardized)\n","1a9c8bac":"### Splitting features\ntrain_features = features.loc['train'].drop('Id', axis=1).select_dtypes(include=[np.number]).values\ntest_features = features.loc['test'].drop('Id', axis=1).select_dtypes(include=[np.number]).values\n\n### Splitting standardized features\ntrain_features_st = features_standardized.loc['train'].drop('Id', axis=1).select_dtypes(include=[np.number]).values\ntest_features_st = features_standardized.loc['test'].drop('Id', axis=1).select_dtypes(include=[np.number]).values","39b22432":"### Shuffling train sets\ntrain_features_st, train_features, train_labels = shuffle(train_features_st, train_features, train_labels, random_state = 5)","f9d793a8":"### Splitting\nx_train, x_test, y_train, y_test = train_test_split(train_features, train_labels, test_size=0.1, random_state=200)\nx_train_st, x_test_st, y_train_st, y_test_st = train_test_split(train_features_st, train_labels, test_size=0.1, random_state=200)","2a8f33ec":"ENSTest = linear_model.ElasticNetCV(alphas=[0.0001, 0.0005, 0.001, 0.01, 0.1, 1, 10], l1_ratio=[.01, .1, .5, .9, .99], max_iter=5000).fit(x_train_st, y_train_st)\ntrain_test(ENSTest, x_train_st, x_test_st, y_train_st, y_test_st)","73f67c5a":"# Average R2 score and standart deviation of 5-fold cross-validation\nscores = cross_val_score(ENSTest, train_features_st, train_labels, cv=5)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean(), scores.std() * 2))","e3970f7f":"GBest = ensemble.GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=3, max_features='sqrt',\n                                               min_samples_leaf=15, min_samples_split=10, loss='huber').fit(x_train, y_train)\ntrain_test(GBest, x_train, x_test, y_train, y_test)","674eb043":"# Average R2 score and standart deviation of 5-fold cross-validation\nscores = cross_val_score(GBest, train_features_st, train_labels, cv=5)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean(), scores.std() * 2))","7f638fa2":"# Retraining models\nGB_model = GBest.fit(train_features, train_labels)\nENST_model = ENSTest.fit(train_features_st, train_labels)","16d5b75d":"## Getting our SalePrice estimation\nFinal_labels = (np.exp(GB_model.predict(test_features)) + np.exp(ENST_model.predict(test_features_st))) \/ 2","46716297":"## Saving to CSV\npd.DataFrame({'Id': test.Id, 'SalePrice': Final_labels}).to_csv('2017-02-28.csv', index =False)    ","a07bff38":"# Beginner Level"}}