{"cell_type":{"b6fb7abf":"code","9a20f09f":"code","b2bfa6e4":"code","dfa83772":"code","c0784e27":"code","603bf367":"code","6968ea84":"code","5ec47c66":"code","7dd83dba":"code","8e9289ba":"code","a495a58a":"code","19e0963b":"code","46ab59e4":"code","1227a755":"code","fb21d454":"code","84c613a1":"code","f46999a2":"code","985863cd":"code","a230cf82":"markdown","0f9b437f":"markdown","2f0979cf":"markdown"},"source":{"b6fb7abf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a20f09f":"df = pd.read_csv('..\/input\/covid19-in-korea-dataset\/COVID_Korea_geo.csv', encoding='ISO-8859-2')\ndf.head()","b2bfa6e4":"# \uacb0\uce21\uce58 \ud655\uc778\ndf.isnull().sum()","dfa83772":"#\uba87\uac1c\uc758 \uad6d\uac00\uc5d0 \ud655\uc9c4\uc790\uac00 \uc788\ub294\uc9c0 \ud655\uc778\n# GUBUNCN : city name in Chinese\ncityname = df['gubunCn'].unique()","c0784e27":"cityname","603bf367":"##Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n# GUBUNEN : city name in English\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color = 'red',\n                      height =2000,\n                      width = 2000\n                     ).generate(str(df[\"gubunEn\"]))\nplt.rcParams['figure.figsize'] = (12,12)\nplt.axis(\"off\")\nplt.imshow(wordcloud)\nplt.title(\"Korean City Name\")\nplt.show()","6968ea84":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","5ec47c66":"plotPerColumnDistribution(df, 10, 5)","7dd83dba":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","8e9289ba":"df.dataframeName = 'COVID_Korea_geo.csv'","a495a58a":"plotCorrelationMatrix(df, 8)","19e0963b":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","46ab59e4":"plotScatterMatrix(df, 18, 10)","1227a755":"# \uac01 \uad6d\uac00\ubcc4\ub85c \uba87\uba85\uc758 \ucd1d \ud655\uc9c4\uc790\uac00 \uc788\ub294\uc9c0 \uacb0\uacfc \ud655\uc778\nconfirmed_case = {}\nfor con in cityname:\n    confirmed_case[con] =  [df[df['gubunCn'] == con ]['defCnt'].sum()]\nconfirmed_case = pd.DataFrame(confirmed_case).T\nconfirmed_case.reset_index(inplace = True)\nconfirmed_case.columns = ['cityname', 'Confirmed Cases']\nconfirmed_case.sort_values(by = 'Confirmed Cases',ascending=False, inplace=True )\nconfirmed_case.reset_index(drop = True, inplace = True)\nconfirmed_case","fb21d454":"#barplot\uc744 \uadf8\ub9ac\uae30\uc5d0 \ub108\ubb34 \ud070 \uac12\uc744 \uac00\uc9c4 \uc911\uad6d\uacfc \uad6d\uac00\uc5d0 \ub530\ub85c \uadc0\uc18d\ub418\uc9c0 \uc54a\uc740 \uae30\ud0c0\uc6b4\uc1a1\uc218\ub2e8\uc744 \ube7c\uace0 9\uac00\uc9c0\ub9cc \ubf51\uae30\ub85c \ud568\nconfirmed_case = confirmed_case.iloc[1:10, :]","84c613a1":"confirmed_case","f46999a2":"sns.barplot(data = confirmed_case, x = 'cityname', y = 'Confirmed Cases')\nplt.show()","985863cd":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke was Here' )","a230cf82":"#<font color=\"#EC7063\">Greetings from the Kaggle bot still recovering from Covid! <\/font>\n\n![](https:\/\/pbs.twimg.com\/profile_images\/1173131614689185792\/3NxG8ee5_400x400.png)twitter.com","0f9b437f":"#Codes by dlrlghd96 (Hacker) https:\/\/www.kaggle.com\/dlrlghd96\/kernel226c06f552","2f0979cf":"<font color=\"#EC7063\">\ucee4\ub110 \uc774\ub984 \ubcc0\uacbd\ubc29\ubc95\uc744 \ubab0\ub77c\uc11c \uadf8\ub0e5 \uae30\uc874 \ucee4\ub110\uc758 \uc774\ub984\uc744 \uc62c\ub824\ub1a8\uc2b5\ub2c8\ub2e4 \ubcc0\uacbd\ubc29\ubc95 \uc544\uc2dc\ub294 \ubd84\uc740 \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4<\/font>"}}