{"cell_type":{"28fdb37f":"code","b2321b6c":"code","206b4f08":"code","b131e7f7":"code","fd8f0a25":"code","115042ab":"code","63b1064e":"code","77d9ae18":"code","19bf5f52":"code","0750f354":"code","df6a6194":"code","b8c426f2":"code","330337b6":"code","71eb4cd4":"code","f73861ab":"code","75f89c1f":"code","77ef7ee3":"code","e973e44d":"code","a61abccc":"code","6a5e005e":"code","55385498":"code","4ed5947c":"code","69e7bf48":"code","1e345622":"code","4a317b25":"code","07106b5c":"code","2da84f92":"code","8c677ebe":"code","cc33bb03":"code","48ff8db4":"code","e47ce4fa":"code","0f3f6517":"code","be361aee":"code","b73e6bda":"code","ca65dfda":"code","20a22df7":"markdown","a029a5cb":"markdown","e44f8c4f":"markdown","558e2556":"markdown","88e625ad":"markdown","a1ad5092":"markdown","7aa6b0ca":"markdown","06c6ace9":"markdown","5b8af73b":"markdown"},"source":{"28fdb37f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nprint(os.listdir(\"..\/input\"))","b2321b6c":"df=pd.read_csv('..\/input\/CanaisAtend.csv', encoding='utf-8', sep=';')\ndf.sample(5)","206b4f08":"# Verificando os tipos das colunas\nprint('==== Colunas por Tipo ====') ,\nprint('                          '),\nprint(df.dtypes.value_counts()),\nprint('                          '),\nprint('==========================')\nprint('==  Colunas por Tipo[%]  ==')\nprint('                          ')\nprint(df.dtypes.value_counts(normalize=True).apply(\"{:.2%}\".format))\nprint('                          ')\nprint('==========================')\nprint('==========Shape===========')\nprint('                          ')\nprint(df.shape)\nprint('                          ')\nprint('==========================')\nprint('======== Colunas =========')\nprint('                          ')\nprint(df.columns)\nprint('                          ')\nprint('==========================')","b131e7f7":"df['entrevistados']=df['entrevistados'].astype(float)\ndf['Md_Ponderada']=df['Md_Ponderada'].str.replace(',','.').convert_objects(convert_numeric=True)\ndf['Nota_0']=df['Nota_0'].str.replace(',','.').convert_objects(convert_numeric=True)\/100\ndf['Nota_1']=df['Nota_1'].str.replace(',','.').convert_objects(convert_numeric=True)\/100\ndf['Nota_2']=df['Nota_2'].str.replace(',','.').convert_objects(convert_numeric=True)\/100\ndf['Nota_3']=df['Nota_3'].str.replace(',','.').convert_objects(convert_numeric=True)\/100\ndf['Nota_4']=df['Nota_4'].str.replace(',','.').convert_objects(convert_numeric=True)\/100\ndf['Nota_5']=df['Nota_5'].str.replace(',','.').convert_objects(convert_numeric=True)\/100\ndf['Nota_6']=df['Nota_6'].str.replace(',','.').convert_objects(convert_numeric=True)\/100\ndf['Nota_7']=df['Nota_7'].str.replace(',','.').convert_objects(convert_numeric=True)\/100\ndf['Nota_8']=df['Nota_8'].str.replace(',','.').convert_objects(convert_numeric=True)\/100\ndf['Nota_9']=df['Nota_9'].str.replace(',','.').convert_objects(convert_numeric=True)\/100\ndf['Nota_10']=df['Nota_10'].str.replace(',','.').convert_objects(convert_numeric=True)\/100 \ndf['NS_NR']=df['NS_NR'].str.replace(',','.').convert_objects(convert_numeric=True)\/100\ndf['nota']=df['Md_Ponderada']\ndf=df.drop(columns=['Md_Ponderada','Md_Indicadores'])\ndf.columns = map(str.lower,df.columns)","fd8f0a25":"# Verificando os tipos das colunas\nprint('Verificando os tipos das colunas ap\u00f3s transforma\u00e7\u00f5es')\nprint('                          ')\nprint('==== Colunas por Tipo ====')\nprint('                          ')\nprint(df.dtypes.value_counts())\nprint('                          ')\nprint('==========================')\nprint('==  Colunas por Tipo[%]  ==')\nprint('                          ')\nprint(df.dtypes.value_counts(normalize=True).apply(\"{:.2%}\".format))\nprint('                          ')\nprint('==========================')\nprint('==========Shape===========')\nprint('                          ')\nprint(df.shape)\nprint('                          ')\nprint('==========================')\nprint('======== Colunas =========')\nprint('                          ')\nprint(df.columns)\nprint('                          ')\nprint('==========================')","115042ab":"df.sample(3)","63b1064e":"df[(df[\"estado\"]=='Total') & (df['questao']=='A3A4A5')].sample(5)","77d9ae18":"unique_counts = pd.DataFrame.from_records([(col, df[col].nunique()) for col in df.columns],\n                          columns=['Column_Name', 'Num_Unique']).sort_values(by=['Num_Unique'])\n\nunique_counts.T","19bf5f52":"print(df['estado'].unique())","0750f354":"df[(df['ano']!=2018) & (df['estado']!='Total') & (df['questao']!='A3A4A5') & (df['operadora']!='TOTAL BRASIL')]","df6a6194":"# Criando dataframe temp para novas colunas\ntemp=df[(df['questao']!='A3A4A5') & (df['estado']!='Total') & (df['operadora']!='TOTAL BRASIL')]","b8c426f2":"# avaliando as colunas que ser\u00e3o convertidas em categorias\nunique_counts = pd.DataFrame.from_records([(col, temp[col].nunique()) for col in temp.columns],\n                          columns=['Column_Name', 'Num_Unique']).sort_values(by=['Num_Unique'])\n\nunique_counts","330337b6":"#Verificando dos dados das colunas\nprint('=======================')\nprint(temp['servico'].unique())\nprint('=======================')\nprint(temp['questao'].unique())\nprint('=======================')\nprint(temp['tema'].unique())\nprint('=======================')\nprint(temp['ano'].unique())\nprint('=======================')\nprint(temp['operadora'].unique())\nprint('=======================')\nprint(np.sort(temp['estado'].unique()))\nprint('=======================')","71eb4cd4":"# colunas escolhidas\ntemp['ct_questao'] = temp['questao'].astype('category').cat.codes\ntemp['ct_operadora']=temp['operadora'].astype('category').cat.codes\ntemp['ct_estado']=temp['estado'].astype('category').cat.codes","f73861ab":"#Avaliando o resultado\ntemp[['ct_questao','questao',\n     'ct_operadora','operadora',\n     'ct_estado','estado']]","75f89c1f":"# Verificando os tipos das colunas com as novas infroma\u00e7\u00f5es\nprint('==== Colunas por Tipo ====')\nprint('                          ')\nprint(temp.dtypes.value_counts())\nprint('                          ')\nprint('==========================')\nprint('==  Colunas por Tipo[%]  ==')\nprint('                          ')\nprint(temp.dtypes.value_counts(normalize=True).apply(\"{:.2%}\".format))\nprint('                          ')\nprint('==========================')\nprint('==========Shape===========')\nprint('                          ')\nprint(temp.shape)\nprint('                          ')\nprint('==========================')\nprint('======== Colunas =========')\nprint('                          ')\nprint(temp.columns)\nprint('                          ')\nprint('==========================')","77ef7ee3":"df2=temp[(temp['ano']!=2018) & \n         (temp['questao']!='A3A4A5') & \n         (temp['estado']!='Total') & \n         (temp['operadora']!='TOTAL BRASIL')]\n\ndf_2018=temp[(temp['ano']==2018) & \n             (temp['questao']!='A3A4A5') & \n             (temp['estado']!='Total') & \n             (temp['operadora']!='TOTAL BRASIL')]\n\nprint(df2['ano'].unique())\nprint(df_2018['ano'].unique())\n","e973e44d":"#Entrevistados por ano\ndf2.groupby(['questao','ano'])[['entrevistados']].sum().unstack()","a61abccc":"#Abrang\u00eancia da Operadora\ndf2.groupby(['operadora','ano'])['estado'].nunique().unstack().reset_index()","6a5e005e":"#Entrevistados por Estado, Questao e Ano\ndf2.groupby(['estado','questao','ano'])['entrevistados'].sum().unstack().reset_index()","55385498":"df2.dtypes","4ed5947c":"#Criando a m\u00e9trica que ser\u00e1 prevista\ndf_2018pred = df_2018.drop(columns=['nota'])","69e7bf48":"df3=df2.append(df_2018pred)","1e345622":"#Criando as bases de treino, valida\u00e7\u00e3o e teste\n\nfrom sklearn.model_selection import train_test_split as tts\n\ntrain, valid = tts(df2,random_state=42)\ntest = df3[df3['nota'].isnull()]\n\ntrain.shape, valid.shape, test.shape\n","4a317b25":"# Colunas que n\u00e3o ser\u00e3o usadas no modelo\nremoved_cols=['servico','operadora','estado','questao','tema']","07106b5c":"cols = []\nfor c in train.columns:\n    if c not in removed_cols:\n        cols.append(c)\n        \ncols","2da84f92":"# \nfeats = [c for c in train.columns if c not in removed_cols]","8c677ebe":"# Importando os MODELOS\nfrom sklearn.ensemble import RandomForestRegressor as rfr\nfrom sklearn.ensemble import ExtraTreesRegressor as etr\nfrom sklearn.ensemble import AdaBoostRegressor as abr\nfrom sklearn.ensemble import GradientBoostingRegressor as gbr\nfrom sklearn.tree import DecisionTreeRegressor as dtr\nfrom sklearn.linear_model import LinearRegression as lnr\nfrom sklearn.neighbors import KNeighborsRegressor as knr\nfrom sklearn import neighbors\nfrom math import sqrt\nfrom sklearn.svm import SVR as svr","cc33bb03":"# Dicion\u00e1rio de Modelos\nmodels = {'RandomForest': rfr(random_state=42),\n         'ExtraTrees': etr(random_state=42),\n         'GradientBoosting': gbr(random_state=42),\n         'DecisionTree': dtr(random_state=42),\n         'AdaBoost': abr(random_state=42),\n         'KNN 11': knr(n_neighbors=11),\n         'SVR': svr(),\n         'Linear Regression': lnr()}","48ff8db4":"# Importando m\u00e9trica\nfrom sklearn.metrics import mean_squared_error","e47ce4fa":"# Fun\u00e7\u00e3o para treinamento dos modelos\n\ndef run_model (model, train, valid, feats, y_name):\n    model.fit(train[feats], train[y_name])\n    preds = model.predict(valid[feats])\n    return mean_squared_error(valid[y_name], preds)**(1\/2)","0f3f6517":"#Executando os modelos\nscores = []\nfor name, model in models.items():\n    score = run_model(model, train.fillna(-1), valid.fillna(-1), feats, 'nota')\n    scores.append(score)\n    print(name, ':', score)","be361aee":"from sklearn.model_selection import GridSearchCV\n\n#Selecionando os K\nparams = {'n_neighbors':[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]}\n\nknn = neighbors.KNeighborsRegressor()\n\nmodel = GridSearchCV(knn, params, cv=5, n_jobs=-1)\nmodel.fit(train[feats], train[feats])\nmodel.best_params_\n","b73e6bda":"rmse_val = [] #to store rmse values for different k\nfor K in range(20):\n    K = K+1\n    model = neighbors.KNeighborsRegressor(n_neighbors = K)\n\n    model.fit(train[feats], train[feats])  #fit the model\n    pred=model.predict(valid[feats]) #make prediction on test set\n    error = sqrt(mean_squared_error(valid[feats],pred)) #calculate rmse\n    rmse_val.append(error) #store rmse values\n    print('RMSE value for k= ' , K , 'is:', error)","ca65dfda":"#plotting the rmse values against k values\ncurve = pd.DataFrame(rmse_val) #elbow curve \ncurve.plot()","20a22df7":"**Alunos:**\n\n*1831133118 - Eduardo Quental Sim\u00e3o*\n\n*1831133119 - Marcos Antonio Figueiredo Filho*","a029a5cb":"# Criando novas colunas categoricas","e44f8c4f":"# Avaliando o modelo KNeighborsRegressor","558e2556":"## Verificando quantos cluster's o modelo ecomenda","88e625ad":"# Treinando modelos","a1ad5092":"# Separando as bases para treino, teste e valida\u00e7\u00e3o","7aa6b0ca":"Fonte:\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2018\/08\/k-nearest-neighbor-introduction-regression-python\/\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2018\/03\/introduction-k-neighbours-algorithm-clustering\/","06c6ace9":"## Avaliando manualmente a melhor op\u00e7\u00e3o","5b8af73b":"# Tratando as colunas"}}