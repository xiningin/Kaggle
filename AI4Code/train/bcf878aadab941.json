{"cell_type":{"a25f16a9":"code","d6d0da38":"code","4b835ec7":"code","04feb251":"code","b7f83d96":"code","bb919dd2":"code","a6b33e7c":"code","51fa2819":"code","018638d4":"code","f83e5e62":"code","3311415a":"code","d2bf58b0":"code","e59aa565":"code","d9a284e5":"code","2571b6a0":"code","e46f43be":"code","e051f51e":"code","57cc5d4b":"code","50f18cc3":"code","a4d62dee":"code","b1429fef":"code","0a2990fc":"code","207ffbad":"code","65269944":"code","f95a2d81":"code","8e12c66c":"code","b7db5abb":"code","aa684d82":"code","f9a986b2":"code","f5cc310b":"code","a26b3a98":"code","f15a89a4":"code","323066b0":"code","97af58da":"code","6072b9d7":"code","764a38a8":"code","e2d5f7d1":"code","45be26b5":"code","9bd2aeb4":"code","0c25d81b":"code","de9e6d4a":"markdown","47cf09d0":"markdown","271bbd70":"markdown","63ad3b7d":"markdown","9fc918e6":"markdown","36c239d4":"markdown","208f8143":"markdown","366edb27":"markdown","9b5d61fd":"markdown","59ca5a26":"markdown","8ea94afe":"markdown"},"source":{"a25f16a9":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport sklearn.metrics as metrics\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.preprocessing import PolynomialFeatures\n%matplotlib inline\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.datasets import make_regression\nfrom xgboost.sklearn import XGBRegressor\nfrom numpy import asarray\nfrom numpy import mean\nfrom numpy import std\nfrom sklearn.datasets import make_classification\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom matplotlib import pyplot\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.linear_model import ElasticNet","d6d0da38":"def regressionMetrics(y, yhat):\n    res = {'MSE': metrics.mean_squared_error(y,yhat),\n           'RMSE': np.sqrt(metrics.mean_squared_error(y,yhat)),\n           'MAE': metrics.mean_absolute_error(y,yhat),\n           'MSLE': metrics.mean_squared_log_error(y,yhat),\n           'RMSLE': np.sqrt(metrics.mean_squared_log_error(y,yhat))\n          }\n    return res","4b835ec7":"## example = test the model\ny = [2,4,6,8,10]\ny_hat = [2,3,4,5,30]","04feb251":"regressionMetrics(y, y_hat)","b7f83d96":"df = pd.read_csv ('..\/input\/test-dev-train\/train_data.csv')\ndf.describe()","bb919dd2":"X = df.drop(['sum_visitors'],axis=1).values # independant features\ny = df['sum_visitors']                     # dependant variable","a6b33e7c":"models_list = pd.DataFrame()","51fa2819":"mod1 = LinearRegression()\nmod1.fit(X,y)\n\npred1 = mod1.predict(X)","018638d4":"regressionMetrics(y, pred1)","f83e5e62":"model_dict = {'model': \"LinearRegression\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred1)}, ignore_index=True)\nmodels_list","3311415a":"sns.scatterplot(y, pred1)","d2bf58b0":"mod2 = DecisionTreeRegressor(random_state=1)\nmod2.fit(X,y)","e59aa565":"pred2 = mod2.predict(X)\nmodel_dict = {'model': \"Decision Tree\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred2)}, ignore_index=True)\nmodels_list","d9a284e5":"sns.scatterplot(y, pred2)","2571b6a0":"mod3 = RandomForestRegressor(random_state=1)\nmod3.fit(X,y)","e46f43be":"pred3 = mod3.predict(X)\nmodel_dict = {'model': \"RandomForest\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred3)}, ignore_index=True)\nmodels_list","e051f51e":"sns.scatterplot(y, pred3)","57cc5d4b":"mod4 = AdaBoostRegressor(random_state=1)\nmod4.fit(X,y)","50f18cc3":"pred4 = mod4.predict(X)\nmodel_dict = {'model': \"ADABoost\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred4)}, ignore_index=True)\nmodels_list","a4d62dee":"sns.scatterplot(y, pred4)","b1429fef":"mod5 = GradientBoostingRegressor(random_state=1)\nmod5.fit(X,y)","0a2990fc":"pred5 = mod5.predict(X)\nmodel_dict = {'model': \"GBM\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred5)}, ignore_index=True)\nmodels_list","207ffbad":"sns.scatterplot(y, pred5)","65269944":"mod6 = SVR()\nmod6.fit(X,y)","f95a2d81":"pred6 = mod6.predict(X)\nmodel_dict = {'model': \"SVR\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred6)}, ignore_index=True)\nmodels_list","8e12c66c":"sns.scatterplot(y, pred6)","b7db5abb":"mod7 = RidgeClassifier()\nmod7.fit(X,y)","aa684d82":"pred7 = mod7.predict(X)\nmodel_dict = {'model': \"Ridge\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred7)}, ignore_index=True)\nmodels_list","f9a986b2":"sns.scatterplot(y, pred7)","f5cc310b":"mod8 = SGDClassifier()\nmod8.fit(X,y)","a26b3a98":"pred8 = mod8.predict(X)\nmodel_dict = {'model': \"SGD\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred8)}, ignore_index=True)\nmodels_list","f15a89a4":"sns.scatterplot(y, pred8)","323066b0":"mod9 = ElasticNet(alpha=1.0, l1_ratio=0.5)\nmod9.fit(X,y)","97af58da":"pred9 = mod9.predict(X)\nmodel_dict = {'model': \"Elastic-Net\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred9)}, ignore_index=True)\nmodels_list","6072b9d7":"sns.scatterplot(y, pred9)","764a38a8":"mod10 = linear_model.BayesianRidge()\nmod10.fit(X,y)","e2d5f7d1":"pred10 = mod10.predict(X)\nmodel_dict = {'model': \"BayesianRidge\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred10)}, ignore_index=True)\nmodels_list","45be26b5":"sns.scatterplot(y, pred10)","9bd2aeb4":"#Mean Absolute Error - we will follow this metric\nmodels_list.sort_values('MAE')","0c25d81b":"#Root Mean Squared Error \nmodels_list.sort_values('RMSE')","de9e6d4a":"### Adaptive Boosting (ADABoost)","47cf09d0":"## Model Selection","271bbd70":"### Decision Tree","63ad3b7d":"# BayesianRidge","9fc918e6":"# Elastic Net ","36c239d4":"# Ridge","208f8143":"### Linear Regression","366edb27":"### Random Forest","9b5d61fd":"### Support Vector Machine (SVM)","59ca5a26":"# Stochastic Gradient Descent Regression = SGD","8ea94afe":"### Gradient Boosting Machine (GBM)"}}