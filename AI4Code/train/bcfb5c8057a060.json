{"cell_type":{"ba9890ca":"code","0ac5193b":"code","57ca9ac6":"code","6d85cd5e":"code","34ecafa5":"code","2cf2670b":"code","f6011e2c":"code","9fed0aa3":"code","64a25c00":"markdown"},"source":{"ba9890ca":"!pip install 'kaggle-environments>=0.1.6'","0ac5193b":"%%writefile submission.py\n\nimport numpy as np\nimport pandas as pd\nimport random\n\nT = np.zeros((3, 3))\nP = np.zeros((3, 3))\n\n# a1 is the action of the opponent 1 step ago\n# a2 is the action of the opponent 2 steps ago\na1, a2 = None, None\n\ndef transition_agent(observation, configuration):\n    global T, P, a1, a2\n    if observation.step > 1:\n        a1 = observation.lastOpponentAction\n        T[a2, a1] += 1\n        P = np.divide(T, np.maximum(1, T.sum(axis=1)).reshape(-1, 1))\n        a2 = a1\n        if np.sum(P[a1, :]) == 1:\n            return int((np.random.choice(\n                [0, 1, 2],\n                p=P[a1, :]\n            ) + 1) % 3)\n        else:\n            return int(np.random.randint(3))\n    else:\n        if observation.step == 1:\n            a2 = observation.lastOpponentAction\n        return int(np.random.randint(3))","57ca9ac6":"%%writefile random.py\nimport numpy as np\ndef random_agent(observation, configuration):\n    return int(np.random.randint(3))","6d85cd5e":"from kaggle_environments import evaluate, make, utils\nenv = make(\"rps\", debug=True)\nenv.render()","34ecafa5":"env.reset()\n# Play as the first agent against default \"random\" agent.\nenv.run([\"submission.py\", \"statistical\"])\nenv.render(mode=\"ipython\", width=500, height=450)","2cf2670b":"env.reset()\n# Play as the first agent against default \"random\" agent.\nenv.run([\"submission.py\", \"reactionary\"])\nenv.render(mode=\"ipython\", width=500, height=450)","f6011e2c":"env.reset()\n# Play as the first agent against default \"random\" agent.\nenv.run([\"submission.py\", \"counter_reactionary\"])\nenv.render(mode=\"ipython\", width=500, height=450)","9fed0aa3":"env.reset()\n# Play as the first agent against default \"random\" agent.\nenv.run([\"submission.py\", \"random.py\"])\nenv.render(mode=\"ipython\", width=500, height=450)","64a25c00":"# Creating a Transition Matrix to predict opponent's next move\n\nWe will create a simple markov chain with 3 states and a 3x3 transition matrix. We initialize it with uniform probabilities but then learn\nthe transition matrix from the data to better predict the next move of the opponent.\n"}}