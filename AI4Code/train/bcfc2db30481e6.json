{"cell_type":{"303181aa":"code","6d8d4053":"code","96877dfa":"code","29554e1c":"code","981feb32":"code","06bb05de":"code","33093de6":"code","645f83bc":"code","8a583b1e":"code","452e7ce4":"code","317898f0":"code","04d58c49":"code","9066bbbc":"code","7978b180":"code","60880194":"code","690a1620":"code","6ade6c6d":"code","68f334c1":"code","4b92a676":"code","9e74324d":"code","e5f9fc1a":"code","748d1329":"code","3b7c5d3e":"code","49b09b3b":"code","eeeb2b9d":"code","e76af352":"code","5b2295cf":"code","bf5c7626":"code","506e1820":"markdown","3fa8685b":"markdown","de4bfe96":"markdown","cf9d3b99":"markdown","ba4b72e8":"markdown","6dbd10a7":"markdown","3d4953f4":"markdown","e2cacb37":"markdown","6a30e1cd":"markdown","49d7b829":"markdown"},"source":{"303181aa":"DEVICE = \"TPU\"\n\nCFG = dict(\n    net_count         =   7,\n    batch_size        =  32,\n    \n    read_size         = 512, \n    crop_size         = 512, \n    net_size          = 512,\n    \n    LR_START          =   0.000005,\n    LR_MAX            =   0.000020,\n    LR_MIN            =   0.000001,\n    LR_RAMPUP_EPOCHS  =   10,\n    LR_SUSTAIN_EPOCHS =   2,\n    LR_EXP_DECAY      =   0.7,\n    epochs            =  25,\n    \n    rot               = 180.0,\n    shr               =   2.0,\n    hzoom             =   8.0,\n    wzoom             =   8.0,\n    hshift            =   8.0,\n    wshift            =   8.0,\n\n    optimizer         = 'adam',\n    label_smooth_fac  =   0.05,\n    \n    tta_steps         =  25    \n)","6d8d4053":"!pip install -q efficientnet","96877dfa":"import os, random, re, math, time\nrandom.seed(a=42)\n\nimport numpy as np\nimport pandas as pd\n\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport efficientnet.tfkeras as efn\n\nimport PIL\n\nfrom kaggle_datasets import KaggleDatasets\n\nfrom tqdm import tqdm\nfrom tensorflow.keras.callbacks import ModelCheckpoint\n\nimport xgboost as xgb\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.utils import class_weight\n\nimport matplotlib.pyplot as plt","29554e1c":"BASEPATH = \"..\/input\/siim-isic-melanoma-classification\"\ndf_train = pd.read_csv(os.path.join(BASEPATH, 'train.csv'))\ndf_test  = pd.read_csv(os.path.join(BASEPATH, 'test.csv'))\ndf_sub   = pd.read_csv(os.path.join(BASEPATH, 'sample_submission.csv'))\n\nGCS_PATH    = KaggleDatasets().get_gcs_path('melanoma-512x512')\nGCS_PATH_2019    = KaggleDatasets().get_gcs_path('isic2019-512x512')\n\nfiles_train_2019 = np.array(tf.io.gfile.glob(GCS_PATH_2019 + '\/train*.tfrec'))\nfiles_train_2020 = np.array(tf.io.gfile.glob(GCS_PATH + '\/train*.tfrec'))\n\nfiles_train = np.sort(np.concatenate((files_train_2020, files_train_2019)))\nfiles_test  = np.sort(np.array(tf.io.gfile.glob(GCS_PATH + '\/test*.tfrec')))","981feb32":"#files_train = files_train_2020","06bb05de":"if DEVICE == \"TPU\":\n    print(\"connecting to TPU...\")\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        print('Running on TPU ', tpu.master())\n    except ValueError:\n        print(\"Could not connect to TPU\")\n        tpu = None\n\n    if tpu:\n        try:\n            print(\"initializing  TPU ...\")\n            tf.config.experimental_connect_to_cluster(tpu)\n            tf.tpu.experimental.initialize_tpu_system(tpu)\n            strategy = tf.distribute.experimental.TPUStrategy(tpu)\n            print(\"TPU initialized\")\n        except _:\n            print(\"failed to initialize TPU\")\n    else:\n        DEVICE = \"GPU\"\n\nif DEVICE != \"TPU\":\n    print(\"Using default strategy for CPU and single GPU\")\n    strategy = tf.distribute.get_strategy()\n\nif DEVICE == \"GPU\":\n    print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n    \n\nAUTO     = tf.data.experimental.AUTOTUNE\nREPLICAS = strategy.num_replicas_in_sync\nprint(f'REPLICAS: {REPLICAS}')","33093de6":"def get_mat(rotation, shear, height_zoom, width_zoom, height_shift, width_shift):\n    # returns 3x3 transformmatrix which transforms indicies\n        \n    # CONVERT DEGREES TO RADIANS\n    rotation = math.pi * rotation \/ 180.\n    shear    = math.pi * shear    \/ 180.\n\n    def get_3x3_mat(lst):\n        return tf.reshape(tf.concat([lst],axis=0), [3,3])\n    \n    # ROTATION MATRIX\n    c1   = tf.math.cos(rotation)\n    s1   = tf.math.sin(rotation)\n    one  = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n    \n    rotation_matrix = get_3x3_mat([c1,   s1,   zero, \n                                   -s1,  c1,   zero, \n                                   zero, zero, one])    \n    # SHEAR MATRIX\n    c2 = tf.math.cos(shear)\n    s2 = tf.math.sin(shear)    \n    \n    shear_matrix = get_3x3_mat([one,  s2,   zero, \n                                zero, c2,   zero, \n                                zero, zero, one])        \n    # ZOOM MATRIX\n    zoom_matrix = get_3x3_mat([one\/height_zoom, zero,           zero, \n                               zero,            one\/width_zoom, zero, \n                               zero,            zero,           one])    \n    # SHIFT MATRIX\n    shift_matrix = get_3x3_mat([one,  zero, height_shift, \n                                zero, one,  width_shift, \n                                zero, zero, one])\n    \n    return K.dot(K.dot(rotation_matrix, shear_matrix), \n                 K.dot(zoom_matrix,     shift_matrix))\n\n\ndef transform(image, cfg):    \n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly rotated, sheared, zoomed, and shifted\n    DIM = cfg[\"read_size\"]\n    XDIM = DIM%2 #fix for size 331\n    \n    rot = cfg['rot'] * tf.random.normal([1], dtype='float32')\n    shr = cfg['shr'] * tf.random.normal([1], dtype='float32') \n    h_zoom = 1.0 + tf.random.normal([1], dtype='float32') \/ cfg['hzoom']\n    w_zoom = 1.0 + tf.random.normal([1], dtype='float32') \/ cfg['wzoom']\n    h_shift = cfg['hshift'] * tf.random.normal([1], dtype='float32') \n    w_shift = cfg['wshift'] * tf.random.normal([1], dtype='float32') \n\n    # GET TRANSFORMATION MATRIX\n    m = get_mat(rot,shr,h_zoom,w_zoom,h_shift,w_shift) \n\n    # LIST DESTINATION PIXEL INDICES\n    x   = tf.repeat(tf.range(DIM\/\/2, -DIM\/\/2,-1), DIM)\n    y   = tf.tile(tf.range(-DIM\/\/2, DIM\/\/2), [DIM])\n    z   = tf.ones([DIM*DIM], dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(m, tf.cast(idx, dtype='float32'))\n    idx2 = K.cast(idx2, dtype='int32')\n    idx2 = K.clip(idx2, -DIM\/\/2+XDIM+1, DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES           \n    idx3 = tf.stack([DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]])\n    d    = tf.gather_nd(image, tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM, DIM,3])","645f83bc":"def read_labeled_tfrecord(example):\n    tfrec_format = {\n        'image'                        : tf.io.FixedLenFeature([], tf.string),\n        'image_name'                   : tf.io.FixedLenFeature([], tf.string),\n        'patient_id'                   : tf.io.FixedLenFeature([], tf.int64),\n        'sex'                          : tf.io.FixedLenFeature([], tf.int64),\n        'age_approx'                   : tf.io.FixedLenFeature([], tf.int64),\n        'anatom_site_general_challenge': tf.io.FixedLenFeature([], tf.int64),\n        'diagnosis'                    : tf.io.FixedLenFeature([], tf.int64),\n        'target'                       : tf.io.FixedLenFeature([], tf.int64)\n    }           \n    example = tf.io.parse_single_example(example, tfrec_format)\n    return (example['image'], (example['sex'], example['age_approx'], example['anatom_site_general_challenge']), example['target'])\n\ndef read_unlabeled_tfrecord(example, return_image_name):\n    tfrec_format = {\n        'image'                        : tf.io.FixedLenFeature([], tf.string),\n        'image_name'                   : tf.io.FixedLenFeature([], tf.string),\n        'patient_id'                   : tf.io.FixedLenFeature([], tf.int64),\n        'sex'                          : tf.io.FixedLenFeature([], tf.int64),\n        'age_approx'                   : tf.io.FixedLenFeature([], tf.int64),\n        'anatom_site_general_challenge': tf.io.FixedLenFeature([], tf.int64)\n    }\n    example = tf.io.parse_single_example(example, tfrec_format)\n    return (example['image'], (example['sex'], example['age_approx'], example['anatom_site_general_challenge']), (example['image_name'] if return_image_name else 0))\n\ndef prepare_data(data, cfg=None, augment=True):\n    img = data[0]\n    img = tf.image.decode_jpeg(img, channels=3)\n    img = tf.image.resize(img, [cfg['read_size'], cfg['read_size']])\n    img = tf.cast(img, tf.float32) \/ 255.0\n    \n    if augment:\n        img = transform(img, cfg)\n        img = tf.image.random_crop(img, [cfg['crop_size'], cfg['crop_size'], 3])\n        img = tf.image.random_flip_left_right(img)\n        img = tf.image.random_hue(img, 0.01)\n        img = tf.image.random_saturation(img, 0.7, 1.3)\n        img = tf.image.random_contrast(img, 0.8, 1.2)\n        img = tf.image.random_brightness(img, 0.1)\n\n    else:\n        img = tf.image.central_crop(img, cfg['crop_size'] \/ cfg['read_size'])\n                                   \n    img = tf.image.resize(img, [cfg['net_size'], cfg['net_size']])\n    img = tf.reshape(img, [cfg['net_size'], cfg['net_size'], 3])\n    \n    sex_oh = tf.one_hot(data[1][0], 2)\n    age_aprox = tf.dtypes.cast(tf.reshape(data[1][1], [1]), tf.float32)\n    anatom_site_general_challenge = tf.one_hot(data[1][2], 7)\n    dense = tf.concat([sex_oh, age_aprox, anatom_site_general_challenge], axis=0)\n    return (img, dense)\n\ndef count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) \n         for filename in filenames]\n    return np.sum(n)","8a583b1e":"def get_dataset(files, cfg, augment = False, shuffle = False, repeat = False, \n                labeled=True, return_image_names=True):\n    \n    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)\n    ds = ds.cache()\n    \n    if repeat:\n        ds = ds.repeat()\n    \n    if shuffle: \n        ds = ds.shuffle(1024*8)\n        opt = tf.data.Options()\n        opt.experimental_deterministic = False\n        ds = ds.with_options(opt)\n        \n    if labeled: \n        ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\n    else:\n        ds = ds.map(lambda example: read_unlabeled_tfrecord(example, return_image_names), \n                    num_parallel_calls=AUTO)      \n\n    ds = ds.map(lambda img, dense, imgname_or_label: (prepare_data((img, dense), augment=augment, cfg=cfg), \n                                               imgname_or_label), \n                num_parallel_calls=AUTO)\n    \n    ds = ds.batch(cfg['batch_size'] * REPLICAS)\n    ds = ds.prefetch(AUTO)\n    return ds","452e7ce4":"def show_dataset(thumb_size, cols, rows, ds):\n    mosaic = PIL.Image.new(mode='RGB', size=(thumb_size*cols + (cols-1), \n                                             thumb_size*rows + (rows-1)))\n   \n    for idx, data in enumerate(iter(ds)):\n        img, target_or_imgid = data[0][0], data[1]\n        #img, target_or_imgid = data\n        ix  = idx % cols\n        iy  = idx \/\/ cols\n        img = np.clip(img.numpy() * 255, 0, 255).astype(np.uint8)\n        img = PIL.Image.fromarray(img)\n        img = img.resize((thumb_size, thumb_size), resample=PIL.Image.BILINEAR)\n        mosaic.paste(img, (ix*thumb_size + ix, \n                           iy*thumb_size + iy))\n\n    display(mosaic)\n    \nds = get_dataset(files_train, CFG).unbatch().take(12*5)   \nshow_dataset(64, 12, 5, ds)","317898f0":"len(df_train.diagnosis.unique())","04d58c49":"ds = tf.data.TFRecordDataset(files_train, num_parallel_reads=AUTO)\nds = ds.take(1).cache().repeat()\nds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\n# ds = ds.map(lambda img, target: (prepare_image(img, cfg=CFG, augment=True), target), \n#             num_parallel_calls=AUTO)\nds = ds.map(lambda img, dense, target: (prepare_data((img, dense), cfg=CFG, augment=True), target), \n            num_parallel_calls=AUTO)\nds = ds.take(12*5)\nds = ds.prefetch(AUTO)\n\nshow_dataset(64, 12, 5, ds)","9066bbbc":"ds = get_dataset(files_test, CFG, augment=True, repeat=True, \n                         labeled=False, return_image_names=False).unbatch().take(12*5)   \nshow_dataset(64, 12, 5, ds)","7978b180":"def get_lr_callback(cfg):\n    lr_start   = cfg['LR_START']\n    lr_max     = cfg['LR_MAX'] * strategy.num_replicas_in_sync\n    lr_min     = cfg['LR_MIN']\n    lr_ramp_ep = cfg['LR_RAMPUP_EPOCHS']\n    lr_sus_ep  = cfg['LR_SUSTAIN_EPOCHS']\n    lr_decay   = cfg['LR_EXP_DECAY']\n   \n    def lrfn(epoch):\n        if epoch < lr_ramp_ep:\n            lr = (lr_max - lr_start) \/ lr_ramp_ep * epoch + lr_start\n            \n        elif epoch < lr_ramp_ep + lr_sus_ep:\n            lr = lr_max\n            \n        else:\n            lr = (lr_max - lr_min) * lr_decay**(epoch - lr_ramp_ep - lr_sus_ep) + lr_min\n            \n        return lr\n\n    lr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=False)\n    return lr_callback","60880194":"def get_model(cfg):\n    model_input = tf.keras.Input(shape=(cfg['net_size'], cfg['net_size'], 3), name='imgIn')\n    model_input_data = tf.keras.Input(shape=(10, ), name='dataIn')\n    \n    dense = tf.keras.layers.Dense(256, activation='relu')(model_input_data)\n    dense = tf.keras.layers.BatchNormalization()(dense)\n    dense = tf.keras.layers.Dropout(0.5)(dense)\n\n    dense = tf.keras.layers.Dense(64, activation='relu')(dense)\n    dense = tf.keras.layers.BatchNormalization()(dense)\n    dense = tf.keras.layers.Dropout(0.5)(dense)\n    \n    constructor = getattr(efn, f'EfficientNetB6')\n        \n    x = constructor(include_top=False, weights='imagenet', \n                    input_shape=(cfg['net_size'], cfg['net_size'], 3), \n                    pooling='avg')(model_input)\n\n    x = tf.keras.layers.Concatenate()([x, dense])\n\n    x = tf.keras.layers.Dense(256, activation='relu')(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Dropout(0.5)(x)\n\n    x = tf.keras.layers.Dense(1, activation='sigmoid')(x) \n    \n    model = tf.keras.Model([model_input, model_input_data], x, name='aNetwork')\n    model.summary()\n    return model","690a1620":"def compile_new_model(cfg, old_model=None):    \n    with strategy.scope():\n        if(old_model is None):\n            model = get_model(cfg)\n        else:\n            model = old_model\n        \n        model.compile(\n            optimizer = tf.keras.optimizers.Adam(learning_rate=0.1),\n            loss      = tf.keras.losses.BinaryCrossentropy(label_smoothing = cfg['label_smooth_fac']),\n            metrics   = [tf.keras.metrics.AUC(name='auc')])\n        \n    return model","6ade6c6d":"from sklearn.utils import class_weight\ntrain = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')\nclass_weights = class_weight.compute_class_weight('balanced',\n                                                 np.unique(train.target),\n                                                 train.target)\nclass_weights = dict(enumerate(class_weights))","68f334c1":"class_weights","4b92a676":"file_path=\"\/kaggle\/working\/effnet6_weights.best.hdf5\"\n\ncheckpoint = ModelCheckpoint(file_path, monitor='auc', verbose=1, save_best_only=True, mode='max')","9e74324d":"ds_train     = get_dataset(files_train, CFG, augment=True, shuffle=True, repeat=True)\n\nsteps_train  = count_data_items(files_train) \/ (CFG['batch_size'] * REPLICAS)","e5f9fc1a":"print(\"Buidling model...\")\nmodel = compile_new_model(CFG)","748d1329":"history      = model.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n                         callbacks        = [checkpoint, get_lr_callback(CFG)],\n                        class_weight=class_weights)","3b7c5d3e":"model = compile_new_model(CFG)\nmodel.load_weights(file_path)","49b09b3b":"CFG['batch_size'] = 128\n\ncnt_test   = count_data_items(files_test)\nsteps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\nds_testAug = get_dataset(files_test, CFG, augment=True, repeat=True, \n                         labeled=False, return_image_names=False)\n\nprobs = model.predict(ds_testAug, verbose=1, steps=steps)\nprobs = np.stack(probs)\nprobs = probs2 = probs[:cnt_test * CFG['tta_steps'],0]\nprobs = np.stack(np.split(probs, CFG['tta_steps'], axis=0), axis=1)\nprobs = np.mean(probs, axis=1)","eeeb2b9d":"ds = get_dataset(files_test, CFG, augment=False, repeat=False, \n                 labeled=False, return_image_names=True)\n\nimage_names = np.array([img_name.numpy().decode(\"utf-8\") \n                        for img, img_name in iter(ds.unbatch())])","e76af352":"submission = pd.DataFrame(dict(\n    image_name = image_names,\n    target     = probs[:]))\n\nsubmission = submission.sort_values('image_name') \nsubmission.to_csv('submission_model.csv', index=False)","5b2295cf":"plt.plot(history.history['auc'])\nplt.title('model auc')\nplt.ylabel('auc')\nplt.xlabel('epoch')\nplt.legend(['train'], loc='upper left')\nplt.savefig('auc.jpg')\nplt.show()","bf5c7626":"plt.plot(history.history['loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train'], loc='upper left')\nplt.savefig('loss.jpg')\nplt.show()","506e1820":"## Test of image augmentation","3fa8685b":"Load the model with the best score from the hdf5 file","de4bfe96":"# train on images","cf9d3b99":"## Images from the test data","ba4b72e8":"### sort predictions to have the same order as the submission\nThe submission ist sorted by image_name, but the dataset yielded a different order.\nTraverse the test dataset once again and capture the image_names. Then join this list of image_names with the predictions and sort by image_name.","6dbd10a7":"## Test the input pipeline\nBefore calling any neural net I always test the input pipeline.\nHere are images from the train data.","3d4953f4":"Based on: https:\/\/www.kaggle.com\/agentauers\/incredible-tpus-finetune-effnetb0-b6-at-once","e2cacb37":"### write a submission file for each submodel","6a30e1cd":"### predict the test set using augmented images","49d7b829":"## train the model"}}