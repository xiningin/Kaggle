{"cell_type":{"f3043180":"code","c5c653d4":"code","5c012d42":"code","bb6589a0":"code","7b7c8aba":"code","51ddc45e":"code","99d34a1c":"code","052bca69":"code","f7e7350e":"code","afb063a7":"code","d2fad827":"code","a5090a11":"code","313c8485":"code","bc262295":"code","79bc82ea":"code","beff5b11":"code","5738072e":"code","432e5c26":"code","f7d9d0a0":"code","5b70560b":"code","17e92d8c":"code","cd50942c":"code","9cbbd78e":"code","ecbfe0f1":"markdown","74f6de13":"markdown","7b1ecb18":"markdown","dead4842":"markdown","853bb7a8":"markdown","d1d4727d":"markdown","48593af5":"markdown","3b43b64a":"markdown"},"source":{"f3043180":"import gc\nimport time\nimport pandas as pd\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.losses import mean_squared_error, binary_crossentropy\nfrom keras.optimizers import SGD, Adam, RMSprop\nfrom keras.layers import Dense, Dropout, LSTM, Flatten\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.layers import LSTM, Embedding, Conv1D, MaxPooling1D\nfrom keras.preprocessing import sequence\nfrom keras.preprocessing.text import Tokenizer\nfrom sklearn.manifold import TSNE\n\n%matplotlib inline\n\n# sys.stdout.encoding 'UTF-8'","c5c653d4":"randomState = 44","5c012d42":"df_train = pd.read_csv('..\/input\/X_train.csv', encoding='cp949')\ndf_test  = pd.read_csv('..\/input\/X_test.csv',  encoding='cp949')\ndf_y     = pd.read_csv('..\/input\/y_train.csv')\ndf_all   = pd.concat([df_train, df_test])\n\ndf_all = pd.merge(df_all, df_y, left_on=['custid'], right_on=['custid'], how='left')\ndf_y   = df_y.gender\n# print('df_all.shape : {}'.format(df_all.shape))\ndf_all.fillna(2, inplace=True)\n# print(\"df_all.isnull()={}\".format(df_all.isnull().sum().sum))\n# df_all.tail(3)\n\ndel df_test\ndel df_train\ngc.collect()","bb6589a0":"# \uc694\uc77c \ubcc0\ud658 \ud568\uc218\ndef dayName(x):\n    dd = {'0':'\uc6d4','1':'\ud654','2':'\uc218','3':'\ubaa9','4':'\uae08','5':'\ud1a0','6':'\uc77c'}    \n    return dd.get(x)\n\n# \ud6c8\ub828 \ub370\uc774\ud130 \uc14b\uc5d0 sales_date\ub97c datetime \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud55c \ud6c4 \uc694\uc77c Feature \uc0dd\uc131\ndf_all['sales_dayweek'] = df_all['sales_date'].apply(lambda x: pd.to_datetime(str(x), format='%Y-%m-%d %H:%M:%S').dayofweek)\n\n# \ud6c8\ub828 \ub370\uc774\ud130 \uc14b\uc5d0 sales_date\ub97c datetime \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud55c \ud6c4 \uc694\uc77c\uba85 Feature \uc0dd\uc131\ndf_all['sales_dayname'] = df_all['sales_dayweek'].apply(lambda x: dayName(str(x)))\ndf_all.head(3)","7b7c8aba":"# \uc2dc\uac04\ub300 : \uc0c8\ubcbd[0-559], \uc544\uce68[600-1129], \uc810\uc2ec[1130-1429], \uc624\ud6c4[1230-1729], \uc800\ub141[1530-2129],\uc2ec\uc57c[2130-2359]\ndef timePeriod(x):\n    hh = ''\n    if x >= 100 and x <= 559:\n        hh = '\uc0c8\ubcbd'\n    elif x >= 0 and x <= 59:\n        hh = '\uc2ec\uc57c'\n    elif x >= 600 and x <= 1129:\n        hh = '\uc544\uce68'\n    elif x >= 1130 and x <= 1429:\n        hh = '\uc810\uc2ec'\n    elif x >= 1230 and x < 1729:\n        hh = '\uc624\ud6c4'\n    elif x >= 1530 and x <= 2159:\n        hh = '\uc800\ub141'\n    elif x >= 2200 and x <= 2359:\n        hh = '\uc2ec\uc57c'\n    else:\n        return '\uc800\ub141'\n    return hh\n\ndef monthSeason(x):\n    dd = {'01':'\uaca8\uc6b8','02':'\uaca8\uc6b8','03':'\uaca8\uc6b8','04':'\ubd04','05':'\ubd04',\n          '06':'\uc5ec\ub984', '07':'\uc5ec\ub984', '08':'\uc5ec\ub984', '09':'\uac00\uc744', \n          '10':'\uac00\uc744', '11':'\uac00\uc744', '12':'\uaca8\uc6b8'\n         }\n    return dd.get(x)\n\n# \ud558\ub8e8 \uc2dc\uac04\ub300 \uc815\ubcf4\ndf_all['sales_timeperiod'] = df_all['sales_time'].apply(lambda x: timePeriod(x))\n\n# sales_date\ub97c datetime \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud55c \ud6c4 \uacc4\uc808 Feature \uc0dd\uc131\ndf_all['sales_season'] = df_all['sales_date'].apply(lambda x: monthSeason(str(x[5:7])))\n\n# '2000-06-25 00:00:00'[0:4] -> \ub144\n# df_all['sales_year'] = pd.to_numeric(df_all['sales_date'].apply(lambda x: x[0:4]), errors='coerce').astype(np.int64)\n# '2000-06-25 00:00:00'[5:7] -> \uc6d4\ndf_all['sales_month'] = pd.to_numeric(df_all['sales_date'].apply(lambda x: x[5:7]), errors='coerce').astype(np.int64)\n# '2000-06-25 00:00:00'[8:10] -> \uc77c\ndf_all['sales_day'] = pd.to_numeric(df_all['sales_date'].apply(lambda x: x[8:10]), errors='coerce').astype(np.int64)\n\n# '\ubc18\ud488\uc5ec\ubd80 \ubc0f \ubc18\ud488\uae08\uc561\ndf_all['calcel_flag'] = pd.to_numeric(df_all['tot_amt'].apply(lambda x: 1 if x < 0 else 0), errors='coerce').astype(np.int64)\ndf_all['calcel_amt']  = pd.to_numeric(df_all['tot_amt'].apply(lambda x: x if x < 0 else 0), errors='coerce').astype(np.int64)\nprint(\"df_all.shape : {}\".format(df_all.shape))\n# df_all.query(\"calcel_flag == 1\")['calcel_amt'].head(5)","51ddc45e":"def fweek(k):\n    if k >= 0 and k < 3 :\n        return('\uc8fc\ucd08')\n    elif k >= 3 and k < 5 :\n        return('\uc8fc\uc911')   \n    else :\n        return('\uc8fc\ub9d0')  \n\n# \ud6c8\ub828 \ub370\uc774\ud130 \uc14b\uc5d0 sales_date\ub97c datetime \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud55c \ud6c4 \uc694\uc77c Feature \uc0dd\uc131\ndf_all['weeks'] = df_all['sales_dayweek'].apply(lambda x: fweek(x))","99d34a1c":"words = {\n     '\ud654\uc7a5\ud488':'\ud654\uc7a5\ud488', '\uba85\ud488\ud1a0\ud0c8':'\uba85\ud488', '\uce90\ub9ad\ud130\uc815\uc7a5':'\uce90\ub9ad\ud130\uc815\uc7a5', \n     '\ud2b8\ub798\ub514\uc154\ub110':'\ud2b8\ub798\ub514\uc154\ub110', '\ub85c\uc584\ubd80\ub760\ub044':'\ub85c\uc584\ubd80\ub760\ub044', '\uc544\ub3d9\ubcf5':'\uc544\ub3d9\ubcf5', \n     '\ub0b4\uc758\ub780\uc81c\ub9ac':'\ub780\uc81c\ub9ac', '\uc601\ud2b8\ub80c\ub514':'\uc601\ud2b8\ub79c\ub514','\uce90\ub9ad\ud130\uce90\uc96c\uc5bc':'\uce90\ub9ad\ud130\uce90\uc8fc\uc5bc', \n     '\uc5ec\uc131\uce90\uc8fc\uc5bc':'\uc5ec\uc131\uce90\uc8fc\uc5bc', '\uc5ec\uc131\uce90\uc96c\uc5bc':'\uc5ec\uc131\uce90\uc8fc\uc5bc', '\uac00\uc804':'\uac00\uc804', '\uc12c\uc720\uc7a1\ud654':'\uc12c\uc720\uc7a1\ud654', '\uc7a5\uc2e0\uad6c':'\uc7a5\uc2e0\uad6c', \n     '\ud2b8\ub79c\ub514 \ucf00\uc96c\uc5bc':'\ud2b8\ub79c\ub514\uce90\uc8fc\uc5bc', '\uc2dd\uae30':'\uc2dd\uae30', '\uace8\ud504':'\uace8\ud504', '\uc218\uc608':'\uce68\uad6c\/\uc218\uc608', \n     '\uc720\uc544\/\uc644\uad6c':'\uc720\uc544\/\uc644\uad6c', '\ud328\uc158\uc288\uc988':'\uc288\uc988', '\uc601\ud2b8\ub79c\ub514':'\uc601\ud2b8\ub79c\ub514', '\uc870\ub9ac\uc2dd\ud488':'\uc870\ub9ac\uc2dd\ud488',\n     '\uc9c4\uce90\uc8fc\uc5bc':'\uc9c4\uce90\uc8fc\uc5bc', '\uc2a4\ud3ec\uce20':'\uc2a4\ud3ec\uce20', '\uc544\ub3d9':'\uc544\ub3d9', '\ud2b8\ub798\ub514\uc154\ub110\uce90\uc96c\uc5bc':'\ud2b8\ub798\ub514\uc154\ub110\uce90\uc8fc\uc5bc',\n     '\uc2a4\ud3ec\uce20\uce90\uc96c\uc5bc':'\uc2a4\ud3ec\uce20\uce90\uc8fc\uc5bc', '\uac00\uc804\/\ubb38\ud654':'\uac00\uc804\/\ubb38\ud654', '\uc154\uce20':'\uc154\uce20', '\ub780\uc81c\ub9ac':'\ub780\uc81c\ub9ac',\n     '\uc601\uce90\ub9ad\ud130\uce90\uc96c\uc5bc':'\uc601\uce90\ub9ad\ud130\uce90\uc8fc\uc5bc', '\uc5d8\ub808\uac15\uc2a4\uce90\uc96c\uc5bc':'\uc5d8\ub808\uac15\uc2a4\uce90\uc8fc\uc5bc', '\ud2b8\ub808\ub514\uc154\ub110':'\ud2b8\ub798\ub514\uc154\ub110',\n     '\uc815\uc7a5':'\ub0a8\uc131\uc815\uc7a5', '\uc77c\ubc18\uc2dd\ud488':'\uc77c\ubc18\uc2dd\ud488', '\ucd95\uc0b0\ubb3c':'\ucd95\uc0b0\ubb3c', '\uc9c4\ucf00\uc8fc\uc5bc':'\uc9c4\uce90\uc8fc\uc5bc', '\ub18d\uc0b0\ubb3c':'\ub18d\uc0b0\ubb3c',\n     '\ubb38\ud654\uc6a9\ud488':'\ubb38\ud654', '\uc0dd\ud65c\uc6a9\ud488':'\uc0dd\ud65c\uc6a9\ud488', '\ubb38\ud654':'\ubb38\ud654','\ub2c8\ud2b8,\ub2e8\ud488,\ubaa8\ud53c':'\ub2c8\ud2b8\ubaa8\ud53c', '\uc18c\ud488':'\uc18c\ud488',\n     '\uc218\uc0b0\ubb3c':'\uc218\uc0b0\ubb3c', '\ubbf8\uc528\uce90\uc8fc\uc5bc':'\ubbf8\uc528\uce90\uc8fc\uc5bc', '\ud0c0\uc6b4\ub780\uc81c\ub9ac':'\ub780\uc81c\ub9ac', '\ud53c\ud601A':'\ud53c\ud601',\n     '\uc5ec\uc131\uad6c\ub450':'\uc5ec\uc131\uad6c\ub450', '\ub514\uc790\uc774\ub108\ubd80\ub760\ud06c':'\ub514\uc790\uc774\ub108\ubd80\ub760\ub044', '\ud578\ub4dc\ubc31':'\ud578\ub4dc\ubc31', '\uc9c4\uce90\uc96c\uc5bc':'\uc9c4\uce90\uc8fc\uc5bc',\n     '\uba85\ud488\uc2dc\uc98c':'\uba85\ud488', '\ub0a8\uc5ec\uad6c\ub450':'\uad6c\ub450', '\uc1fc\ud551\ubcf4\uc99d':'\uc1fc\ud551\ubcf4\uc99d', '\uc218\uc785\uba85\ud488':'\uba85\ud488', '\ub85c\uc584\ubd80\ud2f1':'\ub85c\uc584\ubd80\ub760\ub044',\n     '\ub514\uc790\uc774\ub108\ubd80\ud2f1':'\ub514\uc790\uc774\ub108\ubd80\ub760\ub044', '\ubbf8\uc528\uce90\ub9ad\ud130':'\ubbf8\uc528\uce90\ub9ad\ud130', '\uce90\uc96c\uc5bc':'\uce90\uc8fc\uc5bc', '\uce90\uc8fc\uc5bc':'\uce90\uc8fc\uc5bc', \n     '\uc601\uce90\uc8fc\uc5bc':'\uc601\uce90\uc8fc\uc5bc', '\uc12c\uc720':'\uc12c\uc720', '\uc5b4\ub35c\ud2b8\uce90\uc8fc\uc5bc':'\uc5b4\ub35c\ud2b8\uce90\uc8fc\uc5bc', '\uce68\uad6c\uc218\uc608':'\uce68\uad6c\/\uc218\uc608',\n     '\ub514\uc790\uc774\ub108\ubd80\ub760\ub044':'\ub514\uc790\uc774\ub108\ubd80\ub760\ub044', '\uc545\uc138\uc0ac\ub9ac':'\uc545\uc138\uc0ac\ub9ac', '\uce90\ub9ad\ud130\uce90\uc8fc\uc5bc':'\uce90\ub9ad\ud130\uce90\uc8fc\uc5bc', '\ud53c\ud601B':'\ud53c\ud601',\n     '\ub2c8\ud2b8\/\ub2e8\ud488':'\ub2c8\ud2b8', '\uce68\uad6c\/\uc218\uc608':'\uce68\uad6c\/\uc218\uc608', '\uac00\uad6c':'\uac00\uad6c', '\ub0a8\uc131\uc7a1\ud654':'\ub0a8\uc131\uc7a1\ud654',\n     '\ud328\uc158\uc2dc\uc98c':'\ud328\uc158\uc2dc\uc98c', '\uc218\uc785\uc758\ub958':'\uc218\uc785\uc758\ub958', '\uce68\uad6c,\uc218\uc608':'\uce68\uad6c\/\uc218\uc608', \n     '(\uc8fc)\ud604\uc2a4\ud3ec\uce20\uc544\uc324':'\uc544\ub3d9\uc2a4\ud3ec\uce20', '\uc6a9\uae30\ubcf4\uc99d':'\uc6a9\uae30\ubcf4\uc99d', '\uc544\ub974\ubaa8\ub2c8\uc544':'\uc544\ub974\ubaa8\ub2c8\uc544', \n     '\uc0ac\uc774\ubc84\uc1fc\ud551':'\uc0ac\uc774\ubc84\uc1fc\ud551', '\ud2b8\ub798\ub514\uc154\ub110\uce90\uc8fc\uc5bc':'\ud2b8\ub798\ub514\uc154\ub110\uce90\uc8fc\uc5bc', '\uc720\uc544\ub3d9\ubcf5':'\uc720\uc544\ub3d9\ubcf5', \n     '\ub2c8\ud2b8\ub2e8\ud488':'\ub2c8\ud2b8', '\uc601\uce90\uc8fc\uc5bc':'\uc601\uce90\uc8fc\uc5bc', '\uc5d8\ub808\uac15\uc2a4\uce90\uc8fc\uc5bc':'\uc5d8\ub808\uac15\uc2a4\uce90\uc8fc\uc5bc', '\uc870\ub9ac\uc695\uc2e4':'\uc870\ub9ac\uc695\uc2e4', \n     '\uc720\ub2c8\uce90\uc8fc\uc5bc':'\uc720\ub2c8\uce90\uc8fc\uc5bc', '\uc815\uc7a5\uc154\uce20':'\uc815\uc7a5\uc154\uce20', '\ubb38\ud654\uc644\uad6c':'\ubb38\ud654\uc644\uad6c', '\uc644\uad6c(\ubb38\ud654)':'\ubb38\ud654\uc644\uad6c',\n     '\ud0c0\uc6b4\ubaa8\ud53c':'\ud0c0\uc6b4\ubaa8\ud53c', '\uae30\ud0c0\ubc14\uc774\uc5b4':'\uae30\ud0c0\ubc14\uc774\uc5b4', '\ub3c4\uc790\uae30\ud06c\ub9ac\uc2a4\ud0c8':'\ub3c4\uc790\uae30\ud06c\ub9ac\uc2a4\ud0c8', \n     '\ud589\uc0ac\uc7a5(\uc7a1\ud654)':'\ud589\uc0ac(\uc7a1\ud654)', '\uc810\uc678':'\uc810\uc678', '\ud589\uc0ac\uc7a5(\uc544\ub3d9\uc2a4\ud3ec\uce20)':'\ud589\uc0ac(\uc544\ub3d9\uc2a4\ud3ec\uce20)', \n     '\ud589\uc0ac\uc7a5(\uc5ec\uc131\uce90\uc8fc\uc5bc)':'\ud589\uc0ac(\uc5ec\uc131\uce90\uc8fc\uc5bc)', '\ud589\uc0ac\uc7a5(\uc5ec\uc131\uce90\uc96c)':'\ud589\uc0ac(\uc5ec\uc131\uce90\uc8fc\uc5bc)', 'TV,VTR':'TV\/VTR',\n     '\ud589\uc0ac\uc7a5(\ub0a8\uc131)':'\ud589\uc0ac(\ub0a8\uc131\uce90\uc8fc\uc5bc)', '\ud589\uc0ac\uc7a5(\uc5ec\uc131\uc815\uc7a5)':'\ud589\uc0ac(\uc5ec\uc131\uc815\uc7a5)', '\uccad\uacfc\uace1\ubb3c':'\uccad\uacfc\uace1\ubb3c', \n     '\uc2a4\ud3ec\uce20\uc6a9\ud4f8':'\uc2a4\ud3ec\uce20', '\uc2a4\ud3ec\uce20\uc6a9\ud488':'\uc2a4\ud3ec\uce20', '\ud5e4\uc5b4\uc545\uc138\uc0ac\ub9ac':'\ud5e4\uc5b4\uc545\uc138\uc0ac\ub9ac', '\ud53c\ud601\uc18c\ud488\ud589\uc0ac':'\ud589\uc0ac(\ud53c\ud601)',\n     '\ud5e4\uc5b4\uc561\uc138\uc0ac\ub9ac':'\ud5e4\uc5b4\uc545\uc138\uc0ac\ub9ac','\ud5e4\uc5b4ACC':'\ud5e4\uc5b4\uc545\uc138\uc0ac\ub9ac','\ud0c0\uc6b4\ub2e8\ud488':'\ud0c0\uc6b4', '\ud0c0\uc6b4\uc6e8\uc5b4':'\ud0c0\uc6b4', '\ud0c0\uc6b4':'\ud0c0\uc6b4',\n     '\uad6d\ub0b4\ubd80\ub760\ub044':'\ubd80\ub760\ub044','\ubd80\ub760\ub044\ud589\uc0ac':'\ud589\uc0ac(\ubd80\ub760\ub044)','\ubd80\ub760\ub044':'\ubd80\ub760\ub044','\uc218\uc785\ubd80\ub760\ub044':'\uc218\uc785\ubd80\ub760\ub044',\n     '\uac00\uc815\uc7a1\ud654':'\uc7a1\ud654(\ubb38\ud654)', '\ud53c\ud601A\ud589\uc0ac':'\ud589\uc0ac(\ud53c\ud601)','\ud53c\ud601B\ud589\uc0ac':'\ud589\uc0ac(\ud53c\ud601)','\ud53c\ud601\uc18c\ud488':'\ud53c\ud601',\n     '\ud53c\ud601\ud1a0\ud0c8(B2)':'\ud53c\ud601','\uc218\uc785\ud53c\ud601':'\uc218\uc785\ud53c\ud601', 'TV.VTR':'TV\/VTR', 'TV\/VTR':'TV\/VTR','TVVTR':'TV\/VTR',\n     '\uace8\ud504(LC)':'\uace8\ud504', '\uace8\ud504\uc6e8\uc5b4':'\uace8\ud504', '\uace8\ud504(\uad6d\ub0b4)':'\uace8\ud504', '\uace8\ud504\ub2e8\ud488':'\uace8\ud504', '\uc784\ub300\uace8\ud504':'\uace8\ud504',\n     '\uace8\ud504(NB)':'\uace8\ud504', '\uace8\ud504(\uc218\uc785)':'\uc218\uc785\uace8\ud504', '\uace8\ud504(\uc6a9\ud488)':'\uace8\ud504', '\uace8\ud504(\ub2e8\ud488)':'\uace8\ud504', '\uace8\ud504\uc6a9\ud488':'\uace8\ud504',\n     '\uace8\ud504':'\uace8\ud504', '\uc36c\uadf8\ub77c\uc2a4':'\uc120\uae00\ub77c\uc2a4', '\uc120\uae00\ub77c\uc2a4':'\uc120\uae00\ub77c\uc2a4', '\ud53c\ud601\uc18c\ud488\ud589\uc0ac':'\ud589\uc0ac(\ud53c\ud601)',\n     '\ub2e8\ud488\/\ud589\uc0ac(\uce90\ub9ad\ud130)':'\ud589\uc0ac(\uce90\ub9ad\ud130)', '\ub2e8\ud488\/\ud589\uc0ac(\uce90\ub9ad\ud130)':'\ud589\uc0ac(\uce90\ub9ad\ud130)', '\uce90\uc8fc\uc5bc\ub2e8\ud488':'\uce90\uc8fc\uc5bc',\n     '\uce90\uc96c\uc5bc\ub2e8\ud488':'\uce90\uc8fc\uc5bc', '\uc544\ub3d9\ub2e8\ud488':'\uc544\ub3d9', '\ud2b8.\ub2e8\ud488':'\ud2b8\ub798\ub514\uc154\ub110', '\ub2e8\ud488(\ud2b8\ub798\ub514\uc154\ub110)':'\ud2b8\ub798\ub514\uc154\ub110',\n     '\ub2e8\ud488\/\ud589\uc0ac(\ud2b8\ub798\ub514\uc154':'\ud589\uc0ac(\ud2b8\ub798\ub514\uc154\ub110)', '\ub2e8\ud488\/\ud589\uc0ac2':'\ud589\uc0ac(\ub2e8\ud488)', '\ub2e8\ud488\/\ud589\uc0ac':'\ud589\uc0ac(\ub2e8\ud488)',\n     '\ub2e8\ud488\ud589\uc0ac':'\ud589\uc0ac(\ub2e8\ud488)','\ub2e8\ud488\/\ud589\uc0ac1':'\ud589\uc0ac(\ub2e8\ud488)', '\ud589\uc0ac\/\ub2e8\ud488':'\ud589\uc0ac(\ub2e8\ud488)', '\ub2e8\ud488':'\ub2e8\ud488',\n     '\ube0c\ub79c\ub4dc\uce68\uad6c':'\uce68\uad6c', 'N\/B\uce68\uad6c':'\uce68\uad6c(NB)', '\uc9c1\uc218\uc785\uce68\uad6c':'\uc218\uc785\uce68\uad6c', 'L\/B\uce68\uad6c':'\uce68\uad6c',\n     '\ub0c9\uc7a5\uace0.\uc138\ud0c1\uae30':'\ub0c9\uc7a5\uace0\/\uc138\ud0c1\uae30', '\ub0c9\uc7a5\uace0\/\uc138\ud0c1\uae30':'\ub0c9\uc7a5\uace0\/\uc138\ud0c1\uae30', '\uc138\ud0c1\uae30,\ub0c9\uc7a5\uace0':'\ub0c9\uc7a5\uace0\/\uc138\ud0c1\uae30',\n     '\uac00\uc804\ud2b9\uc815':'\uac00\uc804', '\ud2b9\uc815':'\uac00\uc804', 'TV\/VCR':'TV\/VTR', '\uc784\ub300\uc744\uac00\uc804':'\uac00\uc804', '\uc6d0\ubaa9(\uc8fc\ub2c8\uc5b4)':'\uc6d0\ubaa9\/\uc8fc\ub2c8\uc5b4',\n     '\uc624\ub514\uc624':'\uc624\ub514\uc624', '\uac00\uc804\/\ubb38\ud654':'\uac00\uc804', '\uc815\uc7a5':'\ub0a8\uc131\uc815\uc7a5', '\uc6d0\ubaa9\/\uc8fc\ub2c8\uc5b4':'\uc6d0\ubaa9\/\uc8fc\ub2c8\uc5b4', \n     '\uc804\ubb38\uac00\uad6c(\uac00\uad6c)':'\uc804\ubb38\uac00\uad6c', '\uc18c\ud615\uac00\uad6c(\uac00\uad6c)':'\uc18c\ud615\uac00\uad6c', '\uc218\uc785\/\uc885\ud569\uac00\uad6c':'\uc218\uc785\uac00\uad6c', '\uc885\ud569\/\uc218\uc785':'\uc218\uc785\uc885\ud569',\n     '\uc7a1\ud654':'\uc7a1\ud654(\ubb38\ud654)', '\uc77c\uc6a9\uc7a1\ud654':'\uc0dd\ud65c\uc6a9\ud488', '\uc7a1\ud654(\ubb38\ud654)':'\uc7a1\ud654(\ubb38\ud654)', '\ud328\uc158\uc7a1\ud654':'\ud328\uc158\uc7a1\ud654',\n     '\uc601\uc7a1\ud654':'\uc7a1\ud654(\ubb38\ud654)', '\uc544\ub3d9\uc7a1\ud654':'\uc544\ub3d9', '\uc218\uc785\uad6c\ub450':'\uc218\uc785\uad6c\ub450', '\uce90\uc96c\uc5bc\uad6c\ub450':'\uad6c\ub450', \n     '\uc784\ub300\uad6c\ub450':'\uad6c\ub450', '\ub4dc\ub808\uc2a4\uad6c\ub450':'\uc5ec\uc131\uad6c\ub450', '\ub0a8\uc131\uad6c\ub450':'\ub0a8\uc131\uad6c\ub450', '\ud589\uc0ac\uad6c\ub450(5F)':'\ud589\uc0ac(\uad6c\ub450)',\n     '\uad6c\ub450\uc218\uc120':'\uad6c\ub450\uc218\uc120','\uad6c\ub450\ud589\uc0ac':'\ud589\uc0ac(\uad6c\ub450)', '\uacfc\uc790\ub958':'\uacfc\uc790', '\uacfc\uc790':'\uacfc\uc790', '\ubb38\uad6c(\ubb38\ud654)':'\ubb38\uad6c\/\ud32c\uc2dc',\n     '\uc644\uad6c':'\uc720\uc544\/\uc644\uad6c', '\uc2dc\ucf54\ub108(\ubb38\ud654)':'\uc2dc\ucf54\ub108', '\ub808\ucf54\ub4dc(\ubb38\ud654)':'\ub808\ucf54\ub4dc', '\uc601\ucc3d(\ubb38\ud654)':'\uc601\ucc3d(\ubb38\ud654)',\n     '\uc720\uc544\ubc1c\uc721\uae30':'\uc720\uc544', '\uc720\uc544\uc6a9\ud488':'\uc720\uc544', '\uc720\uc544\ubcf5':'\uc720\uc544', '\uc720\uc544':'\uc720\uc544', '\uc544\ub3d9\ud2b9\uc120':'\uc544\ub3d9',\n     '\uc544\ub3d9':'\uc544\ub3d9', '\uc544\ub3d9\ud2b9\uc120':'\uc544\ub3d9', '\ubaa8\ud53c\/\ud53c\ud601':'\ubaa8\ud53c\/\ud53c\ud601', '\ubaa8\ud53c.\ud53c\ud601':'\ubaa8\ud53c\/\ud53c\ud601', '\ud53c\ud601':'\ud53c\ud601',\n     '\ubaa8\ud53c\ub2c8\ud2b8':'\ub2c8\ud2b8\ubaa8\ud53c', '\ubaa8\ud53c':'\ubaa8\ud53c', '\uc5d8\ub808\uac15\uc2a4':'\uc5d8\ub808\uac15\uc2a4\uce90\uc8fc\uc5bc', '\uc5d8\ub808\uac15\uc2a4\ubd80\ud2f1':'\uc5d8\ub808\uac15\uc2a4\ubd80\ub760\ub044',\n     '\ubbf8\uc2dc\ucf00\uc96c\uc5bc':'\ubbf8\uc528\uce90\uc8fc\uc5bc', '\uc6b0\uc0b0,\uc7a5\uac11':'\uc6b0\uc0b0\/\uc7a5\uac11', '\uc6b0\uc0b0\/\uc7a5\uac11':'\uc6b0\uc0b0\/\uc7a5\uac11', '\uc6b0\uc0b0\uc7a5\uac11':'\uc6b0\uc0b0\uc7a5\uac11', \n     '\ud32c\uc2dc\ucf54\ub108(\ubb38\ud654)':'\ubb38\uad6c\/\ud32c\uc2dc', '\ubb38\uad6c':'\ubb38\uad6c\/\ud32c\uc2dc', '\ubb38\uad6c\/\ud32c\uc2dc':'\ubb38\uad6c\/\ud32c\uc2dc', '\uc2a4\ud3ec\uce20\uc288\uc988':'\uc288\uc988',\n     '\uce90\ub9ad\ud130\uc288\uc988':'\uc288\uc988', '\uc288\uc988':'\uc288\uc988', '\ud589\uc0ac\uc288\uc988':'\ud589\uc0ac(\uc288\uc988)', '\uc784\ub300\uc288\uc988':'\uc288\uc988', '\uc218\uc785\uc288\uc988':'\uc288\uc988',\n     '\ud578\ub4dc\ubc31\ud589\uc0ac':'\ud589\uc0ac(\ud578\ub4dc\ubc31)', '\ud578\ub4dc\ubc31':'\ud578\ub4dc\ubc31','\ud589\uc0ac\ud578\ub4dc\ubc31':'\ud589\uc0ac(\ud578\ub4dc\ubc31)', '\ud578\ub4dc\ubc31\uc784\ub300':'\ud578\ub4dc\ubc31',\n     '\uc784\ub300\ud578\ub4dc\ubc31':'\ud578\ub4dc\ubc31', 'NB\ud578\ub4dc\ubc31':'\ud578\ub4dc\ubc31(NB)', '\uc815\uc7a5\ud589\uc0ac':'\ud589\uc0ac(\ub0a8\uc131\uc815\uc7a5)', '\ud328\uc2a4\ud2b8\ud478\ub4dc':'\ud328\uc2a4\ud2b8\ud478\ub4dc',\n     '\uc989\uc11d\uc870\ub9ac':'\uc778\uc2a4\ud134\ud2b8\uc2dd\ud488', '\uc2a4\ud3ec\uce20\uc6e8\uc5b4':'\uc2a4\ud3ec\uce20', '\uc2a4\ud3ec\uce20\ub2e8\ud488':'\uc2a4\ud3ec\uce20', '\uc2a4\ud3ec\uce20\uce90\uc8fc\uc5bc':'\uc2a4\ud3ec\uce20',\n     '\uad50\ubcf5\ud589\uc0ac':'\uad50\ubcf5', '\ub2c8\ud2b8\uc6e8\uc5b4':'\ub2c8\ud2b8', '\ub2c8\ud2b8\/\ubaa8\ud53c':'\ub2c8\ud2b8\ubaa8\ud53c', '\ub2c8\ud2b8\ubaa8\ud53c':'\ub2c8\ud2b8\ubaa8\ud53c', '\ub2c8\ud2b8':'\ub2c8\ud2b8', '\ub514\uc790\uc774\ub108\ub2c8\ud2b8':'\ub2c8\ud2b8',\n     '\uc218\uc608\ud589\uc0ac':'\uc218\uc608', '\uc218\uc608\uce68\uc7a5':'\uc218\uc608\uce68\uad6c', '\uc218\uc608\/\uc778\ud14c\ub9ac\uc5b4\uc18c\ud488':'\uc218\uc608', '\uc218\uc785\uc758\ub958\ud589\uc0ac':'\ud589\uc0ac(\uc218\uc785\uc758\ub958)',\n     '\ud558\uc774\uce90\uc96c\uc5bc':'\ud558\uc774\uce90\uc8fc\uc5bc', '\uc601\uce90\uc96c\uc5bc':'\uc601\uce90\uc8fc\uc5bc', '\uce90\ub9ac\uc5b4\uce90\uc96c\uc5bc':'\uce90\ub9ac\uc5b4\uce90\uc8fc\uc5bc', '\uc77c\ubc18ACC':'\uc77c\ubc18\uc545\uc138\uc0ac\ub9ac',\n     '\uc77c\ubc18\uc545\uc138\uc0ac\ub9ac':'\uc77c\ubc18\uc545\uc138\uc0ac\ub9ac', '\uc218\uc785\uc545\uc138\uc0ac\ub9ac':'\uc218\uc785\uc545\uc138\uc0ac\ub9ac', '\uc218\uc785ACC':'\uc218\uc785\uc545\uc138\uc0ac\ub9ac', '\uc218\uc785\uc561\uc138\uc11c\ub9ac':'\uc218\uc785\uc545\uc138\uc0ac\ub9ac',\n     '\ucd08\ub3c4\uc790\uae30':'\ub3c4\uc790\uae30', '\uc218\uc785\ub3c4\uc790\uae30':'\ub3c4\uc790\uae30', '\ub3c4\uc790\uae30\ud06c\ub9ac\uc2a4\ud0c8':'\ub3c4\uc790\uae30', '\uc6b0\uc0b0\uc7a5\uac11':'\uc6b0\uc0b0\/\uc7a5\uac11',\n     '\ud328\uc158ACC':'\ud328\uc158\uc545\uc138\uc0ac\ub9ac', '\ud328\uc158\uc545\uc138\uc0ac\ub9ac':'\ud328\uc158\uc545\uc138\uc0ac\ub9ac', '\ud32c\uc2dc':'\ubb38\uad6c\/\ud32c\uc2dc', '\ub808\ud3ec\uce20\ub2e8\ud488':'\ub808\ud3ec\uce20',\n     '\ud328\uc158\ub780\uc81c\ub9ac':'\ub780\uc81c\ub9ac', '\uc7a1\ud654\ud1a0\ud0c8':'\uc7a1\ud654(\ubb38\ud654)', '\uc778\uc2a4\ud134\ud2b8\uc2dd\ud488':'\uc778\uc2a4\ud134\ud2b8\uc2dd\ud488', '\uc778\uc2a4\ud0c4\ud2b8\uc2dd\ud488':'\uc778\uc2a4\ud134\ud2b8\uc2dd\ud488',\n     '\uce74\uc138\ud2b8,\uc804\ud654\uae30':'\uc804\ud654\uae30\/\uce74\uc138\ud2b8', '\uc120\uae00\ub798\uc2a4':'\uc120\uae00\ub77c\uc2a4', '\uc218\uc785\ud5a5\uc218':'\uc218\uc785\ud5a5\uc218', '\ud5a5\uc218':'\ud5a5\uc218',\n     '\ub77c\ub514\uc624.\uce74\uc138\ud2b8':'\ub77c\ub514\uc624\/\uce74\uc138\ud2b8', '\uce74\ud398\ud2b8':'\uce74\ud398\ud2b8\/\ub300\uc790\ub9ac', '\uce74\ud398\ud2b8\/\ub300\uc790\ub9ac':'\uce74\ud398\ud2b8\/\ub300\uc790\ub9ac',\n     '\uad6d\ub0b4\uc885\ud569\ud654\uc7a5\ud488':'\ud654\uc7a5\ud488', '\uad6d\uc0b0\ud654\uc7a5\ud488':'\ud654\uc7a5\ud488','\uad6d\ub0b4\ud654\uc7a5\ud488':'\ud654\uc7a5\ud488', '\uc77c\ubc18\uc2dd\ud488\uba85\ud488':'\uba85\ud488',\n     '\ub85c\uc584\uc218\uc785\ud589\uc0ac':'\uc218\uc785\ud589\uc0ac(\ub85c\uc584)', '\ub85c\uc584\ubd80\ud2f12F':'\ub85c\uc584\ubd80\ub760\ub044', '\ud2b9\uc120\ud589\uc0ac':'\ud589\uc0ac(\ud2b9\uc120)',\n     '\uc544\ub3d9,\uc2a4\ud3ec\uce20':'\uc544\ub3d9\uc2a4\ud3ec\uce20', '\uc218\uc785\uc885\ud569\ud654\uc7a5\ud488':'\uc218\uc785\ud654\uc7a5\ud488', '\uc601\ud2b8\ub79c\ub4dc':'\uc601\ud2b8\ub79c\ub4dc', '\uce90\ub9ad\ud130':'\uce90\ub9ad\ud130',\n     '\uc0c9\uc870\ud654\uc7a5\ud488':'\uc0c9\uc870\ud654\uc7a5\ud488', '\uc758\ub958\uae30\ud0c0':'\uae30\ud0c0\uc758\ub958', 'NB\uc81c\ud654':'\uad6c\ub450(NB)', '\ud6fc\ubbf8\ub2cc\ubd80\ud2f1':'\ud6fc\ubbf8\ub2cc\ubd80\ub760\ub044',\n     '\uc1fc\ud30c':'\uc18c\ud30c', '\ud589\uc0ac\uc18c\ud488':'\ud589\uc0ac(\uc18c\ud488)', '\uc900\ubcf4\uc11d':'\ubcf4\uc11d', '\uc900\ubcf4\uc11d':'\ubcf4\uc11d', '\uad6c\ub450\uc784\ub300':'\uad6c\ub450',\n     '\ub0b4\uc154\ub0a0':'\ub0b4\uc154\ub110', '\ud398\ub808  \uc9c0\uc6d0':'\ud398\ub808\uc9c0\uc6d0', '\ucf00\uc8fc\uc5bc,\uad6c\ub450,\uc544\ub3d9':'\uce90\uc8fc\uc5bc\/\uad6c\ub450\/\uc544\ub3d9', \n     '\uace8\ud504\/\uc720\ub2c8\uce90\uc96c\uc5bc':'\uace8\ud504', '\ud574\uc678SHOP':'\uc218\uc785(SHOP)','\uac00\uc815\uc6a9\ud488\ud30c\ud2b8':'\uac00\uc815\uc6a9\ud488', '\uc601\uc5b4\ub35c\ud2b8\uce90\uc96c\uc5bc':'\uc601\uc5b4\ub35c\ud2b8\uce90\uc8fc\uc5bc',\n     '\ub9c8\ub2f4SIZE':'\uc5ec\uc131\uc815\uc7a5', 'ERREVNO':'\uc544\ub974\ubaa8\ub2c8\uc544', '\uc7a1\ud654\ud30c\ud2b8':'\uc7a1\ud654',\n     '\uc5ec\uc131\uc758\ub958\ud30c\ud2b8':'\uc5ec\uc131\uc758\ub958', '\uacf5\uc0b0\ud488\ud30c\ud2b8':'\uacf5\uc0b0\ud488', '\uc0dd\uc2dd\ud488\ud30c\ud2b8':'\uc0dd\uc2dd\ud488' }\n\ndef updatePcNm(pc_nm, buyer_nm, goodcd):\n    ret = words.get(pc_nm)    \n    if pc_nm == '\ubbf8\ud655\uc778pc':\n        ret = words.get(buyer_nm)\n        \n    return ret\n\ndef updateBuyer(buyer_nm, pc_nm, goodcd):\n    ret = words.get(pc_nm)    \n    if ret == None:\n        ret = buyer_nm\n    \n    return ret\n\ndef updatePartNm(part):\n    ret = words.get(part)    \n    if ret == None:\n        ret = part\n    \n    return ret +'\ud30c\ud2b8'","052bca69":"def updateCornerNm(corner_nm, pc_nm, gg):\n    ret = words.get(corner_nm)    \n    if corner_nm == '\ubbf8\ud655\uc778\ucf54\ub108':\n        ret = pc_nm \n\n    if gg == 4557720930771:\n        ret = '\uce74\uba54\ub77c'\n    elif gg == 3532190052970:\n        ret = '\ubb38\ud654\uc644\uad6c'            \n    elif gg == 4556140930200:\n        ret = '\ubb38\uad6c\/\ud32c\uc2dc'\n    elif gg in (4553850935071,4502160934000):\n        ret = '\uc804\ud654\uae30\/\uce74\uc138\ud2b8' \n    elif gg in (4550920936000,4550410937001,4550410936001,4505020936080):\n        ret = '\ub0c9\uc7a5\uace0\/\uc138\ud0c1\uae30' \n    elif gg in (4550900939001,4550900939000,4550410939000,4550410934000):\n        ret = '\ub77c\ub514\uc624\/\uce74\uc138\ud2b8'\n    elif gg in (4504940939000,4504940939002,4504940939003,4522380939002):\n        ret = '\uc18c\ud615\uc804\uae30'\n    elif gg in (4503620935000,4532810930070):\n        ret = '\uac00\uc804'\n    elif gg in (4502160937000,4502160932000,4503040933001,4550410932001,4550410932000):\n        ret = 'TV\/VTR'\n    elif gg in (4502160938000,4502160933080,4505930930400):\n        ret = '\ub0c9\ub09c\ubc29'\n    elif gg in (4502160939001,4545420939000,4536970939070,4504940939004,4522380939000):\n        ret = '\ucde8\uc0ac\uc18c\ud615'\n    elif gg == 4501210930070:\n        ret = '\uac00\uc2a4\uae30\uae30'\n    elif gg == 4101080200170:\n        ret = '\ub0a8\uc131\uc7a1\ud654'\n    elif gg in (4300102017000,4300102019900,4300102019953,4314901019980,4314901019980,\n                4314901019981,4315010019900,4300102019930,4310990017000,4310990019900,\n                4310990019930,4310990019953,4300102019974,4300102019975,4301010019981,\n                4310990019980,4310990019981,4310990019970):\n        ret = '\uc5b4\ub35c\ud2b8'\n    elif gg in (4300102019972,4301014019981):\n        ret = '\uc154\uce20'\n    elif gg in (4300381019982,4300381019985,4300420019986,4311641019900,4315010019981,4320500019982,4315010019981,4321180019900):\n        ret = '\ud2b8\ub798\ub514\uc154\ub110'\n    elif gg in (6300141017000,6300141017000,6300141019900,6300141019930,6300141019953,\n                6300141019970,6300141019974,6300145017000,6300145019900,6300145019930,\n                6300145019953,6300145019970,4300102019985,4300380019985,4300381019900,\n                4314901019980,4314901019981,4315010019982,4301010019982,4310840019979,\n                4219041013076, 4230010013076):\n        ret = '\uce90\ub9ad\ud130\uce90\uc8fc\uc5bc'\n    elif gg in (4221400013074,4228720013074,4231090011000,4231090011020,4231090013074):\n        ret = '\uc601\uce90\uc8fc\uc5bc'\n    elif gg == 4301021019980:\n        ret = '\uac00\uc804'\n    elif gg in (4107351010000,4107351010010,4107351010020,4107351010030,\n                4107351010077,4107351010077,4109930010020,4109930010000,\n                4109930010030,4109930010040,4114071010000,4114071010020,\n                4114071010030,4114071010078,4114071013082,4118960010000,\n                4118960010020,4120500010077,4121440010000,6124260006900,\n                6124260012500,6139720010000,6139720010030,6139720010070 ):\n        ret = '\uba85\ud488'            \n    elif gg in (4554790931080,4502160934000,6554790031000,6554790031000,\n                4554790931080,4550920936000,4550410937001,4550410936001,\n                4505020936080,4550900939001,4550900939000,4550410939000,\n                4550410934000,4503620935000,4532810930070):    \n        ret = '\uac00\uc804'\n        \n    if ret == None:\n        ret = corner_nm \n        \n    return ret","f7e7350e":"# PC_NM \uce74\ud14c\uace0\ub9ac => \uba85\uce6d \ud45c\uc900\ud654 => PC_NM Feature \uc218\uc815\ndf_all['pc_nm'] = df_all.apply(lambda x: updatePcNm(x.pc_nm, x.buyer_nm, x.goodcd), axis=1)\nprint('pc_nm processing end! df_all.isnull():{}'.format(df_all.isnull().sum().sum()))\n# df_all['pc_nm'].unique()","afb063a7":"# BUYER_NM \uce74\ud14c\uace0\ub9ac => \uba85\uce6d \ud45c\uc900\ud654 => BUYER_NM Feature \uc218\uc815\ndf_all['buyer_nm'] = df_all.apply(lambda x: updateBuyer(x.buyer_nm, x.pc_nm, x.goodcd), axis=1)\nprint('buyer_nm processing end! df_all.isnull():{}'.format(df_all.isnull().sum().sum()))\n# df_all['buyer_nm'].unique()","d2fad827":"# corner_renm \uce74\ud14c\uace0\ub9ac => \uba85\uce6d \ud45c\uc900\ud654 => corner_nm Feature \uc218\uc815\ndf_all['corner_nm'] = df_all.apply(lambda x: updateCornerNm(x.corner_nm, x.pc_nm, x.goodcd), axis=1) \nprint('corner_nm processing end! df_all.isnull():{}'.format(df_all.isnull().sum().sum()))\n# print(df_all['corner_nm'].unique())  ","a5090a11":"# part_nm \uce74\ud14c\uace0\ub9ac => \uba85\uce6d \ud45c\uc900\ud654 => part_nm Feature \uc218\uc815\ndf_all['part_nm'] = df_all.apply(lambda x: updatePartNm(x.part_nm),axis=1) \nprint('part_nm processing end! df_all.isnull():{}'.format(df_all.isnull().sum().sum()))\n# print(df_all['part_nm'].unique())","313c8485":"###########################################\n# LSTM \ubd84\uc11d\uc6a9 DataFrame \uc0dd\uc131\ndef setCorpus(dfSubs, keyCol='custid', labelCol='gender', flag='All'):\n    contents = []\n    cids     = []\n    targets  = []\n    cnt      = 0\n    content  = ''\n    target   = 0.0\n    uuid     = ''\n    preuuid  = ''\n    \n    for inx in dfSubs.index:\n        amt = 0\n        uuid   = dfSubs.at[inx,keyCol]\n        target = dfSubs.at[inx,labelCol]\n\n        if flag == 'All' and preuuid != uuid:\n            content  = ''\n\n        #if cnt == 0:\n        #    content = content +\"\"+ uuid +\" \"\n            \n        val = dfSubs.at[inx,'sales_season'] \n        content = content +\"\"+ val +\" \"\n        val = dfSubs.at[inx,'weeks']     \n        content = content +\"\"+ val +\" \"\n        val = dfSubs.at[inx,'sales_date']   \n        content = content +\"\"+ val[0:10] +\" \"\n        val = dfSubs.at[inx,'sales_dayname']   \n        content = content +\"\"+ val +\" \"\n        val = dfSubs.at[inx,'sales_timeperiod'] \n        content = content +\"\"+ val +\" \"\n        # val = dfSubs.at[inx,'str_nm'] \n        # content = content +\"\"+ val +\" \" \n        # val = dfSubs.at[inx,'team_nm']\n        # content = content +\"\"+ val +\" \" \n        # val = dfSubs.at[inx,'buyer_nm']\n        # content = content +\"\"+ val +\" \" \n        val = dfSubs.at[inx,'part_nm'] \n        content = content +\"\"+ str(val) +\" \" \n        val = dfSubs.at[inx,'corner_nm'] \n        content = content +\"\"+ val +\" \"\n        # val = dfSubs.at[inx,'pc_nm'] \n        # content = content +\"\"+ val +\" \"\n        val = dfSubs.at[inx,'brd_nm']  \n        content = content +\"\"+ val +\" \"\n        # val = dfSubs.at[inx,'goodcd']   \n        # content = content +\"\"+ str(val) +\" | \"\n\n        val = dfSubs.at[inx,'import_flg']  \n        amt = dfSubs.at[inx,'tot_amt'] \n        if val > 0:          \n            content = content +\" \uc218\uc785 \"+ str(amt) +\" \"\n        else:\n            content = content +\" \uc77c\ubc18 \"+ str(amt) +\" \"\n\n        # amt = dfSubs.at[inx,'dis_amt']\n        # content = content +\" \ud560\uc778\uae08\uc561: \"+ str(amt) +\"\uc6d0, \"\n        # amt = dfSubs.at[inx,'net_amt'] \n        # content = content +\" \uc2e4\uad6c\ub9e4\uae08\uc561: \"+ str(amt) +\"\uc6d0 \"\n        # val = dfSubs.at[inx,'inst_mon']\n        # if val > 0:\n        #     amt = dfSubs.at[inx,'inst_fee']\n        #     content = content +\", \ud560\ubd80: \"+ str(val) +\"\uac1c\uc6d4, \ud560\ubd80\uae08\uc561:\"+ str(amt) +\"\uc6d0]\"\n        # else:\n        #     content = content +\"]\"\n        \n        content = content +\" \"\n\n        if flag == 'All':\n            cids.append(uuid)\n            targets.append(target)\n            contents.append(content)\n            \n        #print(\"uid:{}, cnt {} ====================\".format(uuid, cnt))\n        #print(\"uid:{}, gender {}, content:{}\".format(uuid, target, content))\n        #if cnt > 4:        \n        #    break\n        preuuid = uuid\n        cnt = cnt + 1\n\n    if flag == 'All':\n        df_ = pd.DataFrame.from_dict({keyCol: cids, 'content': contents, labelCol: targets})\n        return df_\n    else:\n        return {keyCol: uuid, 'content': content, labelCol: target}","bc262295":"###############################################\nids  = df_all.custid.unique()\ndics = []\nflag = 'One'\nDF_LSTM = None\n\nif flag == 'All': # Row\ubcc4 Content \uc0dd\uc131\uc73c\ub85c \uc131\ub2a5\uc774 \ub290\ub9bc.(1726430, 3)\n    DF_LSTM = setCorpus(df_all, keyCol='custid', labelCol='gender', flag=flag)\nelse:             # custid\ubcc4 Content \ud558\ub098 \uc0dd\uc131\ud568.(44999, 3)\n    for cid in ids:\n        dfUser = df_all.query(\"custid=={}\".format(cid));\n        dict1 = setCorpus(dfUser, keyCol='custid', labelCol='gender', flag=flag)\n        #print(\"dict1:::{}\".format(dict1))\n        dics.append(dict1)\n\n    DF_LSTM = pd.DataFrame(dics) \n\nprint(DF_LSTM.shape)","79bc82ea":"DF_LSTM['wordlist'] = DF_LSTM.content.str.split(' ')\nDF_LSTM.head()","beff5b11":"import random\n\ndflstm = DF_LSTM.copy()\nXpreds = dflstm.query('gender==2')\nXtrain = dflstm.query('gender!=2')\nytrain = Xtrain['gender']\n\nXpreds.drop(['gender'], axis=1, inplace=True)\nXtrain.drop(['gender'], axis=1, inplace=True)\n\nX_orgs_  = Xtrain.drop(['custid'],  axis=1)\nX_train, X_valid, y_train, y_valid = train_test_split(X_orgs_, ytrain, \n                                                    test_size=0.5, \n                                                    random_state=randomState)\ndel X_orgs_\nprint(X_train.shape, X_valid.shape)","5738072e":"tk = Tokenizer(num_words=X_train.shape[0])\ntk.fit_on_texts(dflstm.content)\n\nX_train_enc  = tk.texts_to_matrix(X_train.content, mode='count')\nX_valid_enc  = tk.texts_to_matrix(X_valid.content, mode='count')\nX_train_lstm = sequence.pad_sequences(X_train_enc, maxlen=100)\nX_valid_lstm = sequence.pad_sequences(X_valid_enc, maxlen=100)\n\nnrows     = X_train_lstm.shape[0]\nnfeatures = X_train_lstm.shape[1]\n\nprint(nrows, nfeatures, X_train_lstm.shape, X_valid_lstm.shape)","432e5c26":"saveBestweights = ModelCheckpoint('best.weights', monitor='val_loss', verbose=1, save_best_only=True)\nearlyStopping   = EarlyStopping(monitor='val_loss', min_delta=0, patience=10, verbose=1)\n\nmodel = Sequential()\nmodel.add(Embedding(nrows, nfeatures))\n# model.add(Dropout(0.5))\n# model.add(Conv1D(64, 5, padding='valid', activation='relu', strides=1))\n# model.add(MaxPooling1D(pool_size=4))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.summary()\n\nmodel.compile(optimizer=RMSprop(lr=0.001,\n                                rho=0.9,\n                                epsilon=None,\n                                decay=0.0),\n               loss=binary_crossentropy,\n               metrics=['acc'])","f7d9d0a0":"history = model.fit(X_train_lstm, y_train, batch_size=100, epochs=20,\n                   validation_data=(X_valid_lstm, y_valid), verbose=1,\n                   callbacks=[earlyStopping,saveBestweights])","5b70560b":"print(\"test Accuracy : %.4f\" % (model.evaluate(X_valid_lstm, y_valid)[1]))\ny_vloss = history.history['val_loss']\ny_tloss = history.history['loss']\n\nx_len = np.arange(len(y_tloss))\nplt.plot(x_len, y_vloss, marker='.', c='red',  label='Test_loss')\nplt.plot(x_len, y_tloss, marker='.', c='blue', label='Train_loss')\n\nplt.legend(loc='upper right')\nplt.grid()\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.show()","17e92d8c":"IDtest = Xpreds.custid.unique()\npred   = None\nsubmissions = None\n\nX_preds_enc  = tk.texts_to_matrix(Xpreds.content, mode='count')\nX_preds_lstm = sequence.pad_sequences(X_preds_enc, maxlen=100)\n\npred = model.predict(X_preds_lstm)\n\nsubmissions = pd.DataFrame({'custid':IDtest})\nsubmissions['gender'] = pd.DataFrame.from_records(pred)\nsubmissions['gender'] = submissions['gender'].apply(lambda x: np.round(x, 3))\nprint(\"predict data is completed.\") ","cd50942c":"fname  = 'submissions.csv'\nsubmissions.to_csv(fname, index=False)\nprint(\"'{}' is ready to submit.\" .format(fname)) ","9cbbd78e":"loadPred = pd.read_csv('submissions.csv')\nloadPred","ecbfe0f1":"### LSTM \ubaa8\ub378 \ud6c8\ub828 \ubc0f \uac80\uc99d \ub370\uc774\ud130 \uc14b\uc744 \ubcc0\ud658\ud55c \ud6c4 \ud6c8\ub828\uc744 \uc2dc\ud0a4\uace0, \uac80\uc99d\ud55c\ub2e4.","74f6de13":"## End","7b1ecb18":"## Make Submissions","dead4842":"### Build Models\n- LSTM \ubaa8\ub378 \uc608\uce21 \ubc0f \ud6c8\ub828\uc6a9 \ub370\uc774\ud130 \uc14b\uc73c\ub85c \ubd84\ub9ac\ud55c \ud6c4, \ub2e4\uc2dc \ud14c\uc2a4\ud2b8 \uc14b\uacfc \uac80\uc99d\uc14b\uc73c\ub85c \ubd84\ub9ac\ud55c\ub2e4.\n- \ud14c\uc2a4\ud2b8 \uc14b\uacfc \uac80\uc99d \uc138\uc740 5:5\ub85c \ubd84\ub9ac\ud574\uc57c \ud568.(Input \ub808\ubca8 \uc624\ub958 \ubc1c\uc0dd)","853bb7a8":"### Data Processing","d1d4727d":"#### LSTM \ubd84\uc11d\uc744 \uc704\ud574 Raw \ub370\uc774\ud130\ub85c Text Content\ub97c \uc0dd\uc131\ud558\uc5ec DataFrame\ub97c \ub2e4\uc2dc \ub9cc\ub4e0\ub2e4. ","48593af5":"## Use Keras Deep Learning Models with Scikit-Learn in Python\n* LSTM  : 6 Layer \uad6c\uc131( Embedding + Dropout + Conv1D + MaxPooling1D + LSTM + Dense)\n* Keras \uc624\ubc84\ud53c\ud305 \uc81c\uc5b4 : Early Stopping\n* Raw \ub370\uc774\ud130\ub97c \ud074\ub79c\uc9d5\ud568.\n* Computer Science\uad00\uc810\uc5d0\uc11c \uba38\uc2e0\ub7ec\ub2dd\uc744 \uc811\uadfc\ud574 \ubcf4\ub294\ub370 \uc758\uc758\ub97c \ub460.\n* \uba38\uc2e0\ub7ec\ub2dd \uad50\uc218\ub2d8\uaed8\uc11c \ub9d0\uc500\ud574 \uc8fc\uc2e0 \uc544\uc774\ub514\uc5b4\uc778 Text \ubd84\uc11d\uc744 \ud1b5\ud55c Classification\uc774 \uac00\ub2a5\ud558\ub2e4\ub294 \uac83\uc744 \ud655\uc778\ud574 \ubd04.","3b43b64a":"### Feature \ucc98\ub9ac : df_all.custid.nunique() = 49995"}}