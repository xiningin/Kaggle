{"cell_type":{"54773e34":"code","2dd3eae8":"code","7861a991":"code","fd544303":"code","ac3ea0bf":"code","1e97f715":"code","0328c84d":"code","f4b2a629":"code","5aead6f3":"code","86587cb0":"code","ce066332":"code","f6dda85e":"code","f934cbcf":"code","152193cb":"code","81b63120":"code","17ed7528":"code","6d72597a":"code","060ed5bb":"code","bf784e3b":"code","62b3944e":"code","7b994a7b":"markdown","e99d0854":"markdown","7b21fe56":"markdown"},"source":{"54773e34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error \nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2dd3eae8":"df = pd.read_csv('..\/input\/tictactoe-endgame-dataset-uci\/tic-tac-toe-endgame.csv')\ndf.head()","7861a991":"print(df.columns)\ndf.describe()","fd544303":"df.V1.hist(by=df.V10)\ndf.V2.hist(by=df.V10)\ndf.V3.hist(by=df.V10)\ndf.V4.hist(by=df.V10)","ac3ea0bf":"df.V10.hist()","1e97f715":"df.replace('x',0,inplace=True)\ndf.replace('o',1,inplace=True)\ndf.replace('b',2,inplace=True)\ndf.head()","0328c84d":"df.replace('negative',0,inplace=True)\ndf.replace('positive',1,inplace=True)\ndf.head()","f4b2a629":"X = df[['V1','V2','V3','V4','V5','V6','V7','V8','V9']]\ny = df['V10']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","5aead6f3":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import precision_score,roc_auc_score,roc_curve","86587cb0":"clf = DecisionTreeClassifier()\n\n# Train Decision Tree Classifer\nclf = clf.fit(X_train,y_train)\n\n#Predict the response for test dataset\ny_pred = clf.predict(X_test)","ce066332":"print(y_pred[:10])\nprint(y_test[:10])","f6dda85e":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred,average=\"macro\"))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred,average=\"macro\"))\nprint(\"F1-Score:\",metrics.f1_score(y_test, y_pred,average=\"macro\"))","f934cbcf":"count_misclassified = (y_pred!=y_test).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))","152193cb":"print(classification_report(y_test,y_pred))","81b63120":"from sklearn import tree\n\ndt = tree.DecisionTreeClassifier(random_state=1)\ndt.fit(X_train,y_train)\npredictions = dt.predict_proba(X_test)\nprint(roc_auc_score(y_test,predictions[:,1]))\nfpr,tpr,_ = roc_curve(y_test,predictions[:,1])\nplt.clf()\nplt.plot(fpr,tpr)\nplt.xlabel('FPR')\nplt.ylabel('TPR')\nplt.title('ROC curve')\nplt.show()\nprint(\"AUC = \",roc_auc_score(y_test,y_pred))","17ed7528":"!pip install graphviz\n!pip install pydotplus\n!pip install six\nfrom sklearn.tree import export_graphviz\n#from sklearn.externals.six import StringIO\nfrom sklearn import tree\nfrom IPython.display import Image\nimport pydotplus","6d72597a":"text_representation = tree.export_text(clf)\nprint(text_representation)","060ed5bb":"fn = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9']\nclass_name = ['Positive','Negative']\nfig = plt.figure(figsize=(250,200))\n_ = tree.plot_tree(clf, \n                   feature_names=fn,  \n                   class_names=class_name,\n                   filled=True)\nfig.savefig(\"dtree.png\")","bf784e3b":"import graphviz\n# DOT data\ndot_data = tree.export_graphviz(clf, out_file=None, \n                                feature_names=fn,  \n                                class_names=class_name,\n                                filled=True)\ngraph = graphviz.Source(dot_data, format=\"png\") \ngraph","62b3944e":"graph.render(\"DT_graphivz\")","7b994a7b":"## Hold out method","e99d0854":"## Model evaluation","7b21fe56":"## Visualization"}}