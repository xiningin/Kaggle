{"cell_type":{"2728c67f":"code","dcd53506":"code","ad5bc84f":"code","ee0d4ee4":"code","799f2d8c":"code","a5ace8f2":"code","32d8e613":"code","303a426e":"code","1125c70d":"code","58f226ff":"code","dc525b48":"code","68a8df81":"code","84d14d13":"code","bcf4083b":"code","3a71f339":"code","4e5b2394":"code","380dabb3":"code","3db81ddd":"code","9001685c":"code","be389d91":"code","fcbe2e50":"code","bc551bff":"markdown","1bc71567":"markdown","d73544d5":"markdown","dc0b7720":"markdown","a1f0ec52":"markdown","711433f5":"markdown","e8b27827":"markdown","2d314c9c":"markdown"},"source":{"2728c67f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dcd53506":"data=pd.read_csv('\/kaggle\/input\/ipldata\/matches.csv')","ad5bc84f":"data.info()","ee0d4ee4":"data.describe()","799f2d8c":"data.head()","a5ace8f2":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')","32d8e613":"plt.figure(figsize=(10,5))\ndata.city.value_counts().head(10).plot(kind='bar')\nplt.ylabel('counts')\nplt.title('Demanding cities')\n#top 10 cities","303a426e":"data.player_of_match.value_counts().head()","1125c70d":"plt.figure(figsize=(18,6))\nfor name,count in zip(data.player_of_match.value_counts().index[0:15],data.player_of_match.value_counts().head(15)):\n    plt.text(name,count\/2,str(name)+':'+str(count),rotation=90,color='white')\nplt.bar(data.player_of_match.value_counts().index[0:15],data.player_of_match.value_counts().head(15),width=.5)\nplt.title('top 15 man of the match winng players')\nplt.ylabel('no. of awards')","58f226ff":"win_score=data.groupby('season').win_by_runs.max()","dc525b48":"plt.figure(figsize=(15,5))\nplt.scatter(x=win_score.index.values,y=win_score.values)\nplt.plot(win_score.index.values,win_score.values)\nplt.xticks(win_score.index)\nfor ind,score in zip(win_score.index.values,win_score.values):\n    plt.text(ind,score,str(score))\nplt.xlabel('Season',fontsize=14)\nplt.ylabel('Runs',fontsize=14)\nplt.title('Biggest win by runs per season',fontsize=14)    ","68a8df81":"def win_count(team_nam):\n    df1=pd.DataFrame([])\n    tot=[]\n    for key,dta in data.groupby(['season']):\n        df=dta[(dta.team1==team_nam)|(dta.team2==team_nam)&(dta.winner==team_nam)]\n        df1[key]=df.shape[0:1]\n        tot.append(dta[(dta.team1==team_nam)|(dta.team2==team_nam)].shape[0])\n    \n    return df1 ,tot   ","84d14d13":"for team in data.team1.unique().tolist():\n    \n    df,total=win_count(team)\n    plt.figure(figsize=(12,5))\n    x=list(df.columns.values)\n    plt.plot(x,total)\n    plt.scatter(x,total)\n    plt.title(team)\n    plt.scatter(x,df.iloc[0].values)\n    plt.xlabel('SEASON')\n    plt.ylabel('WINNING count')\n    plt.plot(x,df.iloc[0].values)\n    \n    plt.xticks(x)","bcf4083b":"df=data[['season','team1','team2','toss_winner','winner']]","3a71f339":"df.head()","4e5b2394":"def one_vs_one_per_season(t_a,t_b):\n    df2=df[((df.team1==t_a) & (df.team2==t_b)) | ((df.team1==t_b) & (df.team2==t_a))]\n    ser=df2.groupby('season').winner.value_counts()\n    return pd.DataFrame(ser)","380dabb3":"one_vs_one_per_season('Mumbai Indians','Kolkata Knight Riders')","3db81ddd":"def one_vs_one_all_season(t_a,t_b):\n    df2=df[((df.team1==t_a) & (df.team2==t_b)) | ((df.team1==t_b) & (df.team2==t_a))]\n    plt.title('Match winning persentage over total matches')\n    plt.pie(df2.winner.value_counts().values,shadow=True,labels=[t_a,t_b],explode=(.1,0),autopct='%.1f%%',)\n    ","9001685c":"one_vs_one_all_season('Mumbai Indians','Kolkata Knight Riders')\n","be389d91":"def one_vs_one_toss_win(t_a,t_b):\n    df2=df[((df.team1==t_a) & (df.team2==t_b)) | ((df.team1==t_b) & (df.team2==t_a))]\n    plt.title('Toss winning persentage over total matches')\n    plt.pie(df2.toss_winner.value_counts().values,shadow=True,labels=[t_a,t_b],explode=(.1,0),autopct='%.1f%%',)\n    ","fcbe2e50":"one_vs_one_toss_win('Mumbai Indians','Kolkata Knight Riders')","bc551bff":"#### top 15 players","1bc71567":"# Now let's visualize per\/SEASON  winning performance of each team","d73544d5":"##    Taking overview of our data set","dc0b7720":"## Biggest win by runs in each season","a1f0ec52":"## Hey! New to EDA, Data science feild\n\n### Then this kernel is the best place to get started off.....<br>\nHit **Upvote** if you gained some insight about Data analysis!\n","711433f5":"## Lets make some functions to do more statistics operations on Battles","e8b27827":"## Most awarded MOM Players in IPL history","2d314c9c":"## Totall no. of matches happend in cities"}}