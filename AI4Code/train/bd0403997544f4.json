{"cell_type":{"a494bf68":"code","05935223":"code","7e7b0105":"code","dc8538b4":"code","e7d33a8d":"code","49c472aa":"code","bbfa3c5e":"code","3d765844":"code","54f43963":"code","5f317489":"code","39bcc9c2":"code","6fcccf66":"markdown"},"source":{"a494bf68":"!pip install -q -U git+https:\/\/github.com\/mljar\/mljar-supervised.git@dev","05935223":"import numpy as np\nimport pandas as pd\nfrom supervised.automl import AutoML # mljar-supervised","7e7b0105":"train = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")","dc8538b4":"train.head()","e7d33a8d":"x_cols = train.columns[1:-1].tolist()\ny_col = train.columns[-1]","49c472aa":"#Magic\n#Time literally is money here\nautoml = AutoML(\n    mode=\"Compete\",total_time_limit=3600*6\n)\nautoml.fit(train[x_cols], train[y_col])","bbfa3c5e":"automl.fit(train[x_cols], train[y_col])","3d765844":"preds = automl.predict(test)","54f43963":"sub = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\nsub[sub.columns[1:]] = preds","5f317489":"sub.to_csv(\"1_submission.csv\", index=False)","39bcc9c2":"automl.report()","6fcccf66":"# MLJAR AutoML \n\nMLJAR is an Automated Machine Learning framework. It is available as Python package with code at GitHub: https:\/\/github.com\/mljar\/mljar-supervised\n\nThe MLJAR AutoML can work in several modes:\n- Explain - ideal for initial data exploration\n- Perform - perfect for production-level ML systems\n- Compete - mode for ML competitions under restricted time budget. By the default, it performs advanced feature engineering like golden features search, kmeans features, feature selection. It does model stacking.\n- Optuna - uses Optuna to highly tune algorithms: Random Forest, Extra Trees, Xgboost, LightGBM, CatBoost, Neural Network. Each algorithm is tuned with `Optuna` hperparameters framework with selected time budget (controlled with `optuna_time_budget`). By the default feature engineering is not enabled (you need to manually swtich it on, in AutoML() parameter).\n\n\n## Explain\n\nThe example useage of `Explain` with `MLJAR`:\n\n```python\n\nautoml = AutoML(mode=\"Explain\")\nautoml.fit(X, y)\n```\n\nThe best choice to get initial information about your data. This mode will produce a lot of explanations for your data. All details can be viewed in the Notebook by calling the `automl.report()` method.\n\n\n## Compete\n\nThe example useage of `Compete` with `MLJAR`:\n\n```python\n\nautoml = AutoML(mode=\"Compete\",\n                total_time_limit=8*3600)\nautoml.fit(X, y)\n```\n\nThat's it. It will train: Random Forest, Extra Trees, Xgboost, LightGBM, CatBoost, Neural Network, Ensemble, and stack all the models. Feature engineering will be applied (if enough training time). \n\n\n## Optuna\n\nThe example useage of `Optuna` with `MLJAR`:\n\n```python\n\nautoml = AutoML(mode=\"Optuna\", \n                optuna_time_budget=1800, \n                optuna_init_params={}, \n                algorithms=[\"LightGBM\", \"Xgboost\", \"Extra Trees\"], \n                total_time_limit=24*3600)\nautoml.fit(X, y)\n```\n\nDescription of parameters:\n- `optuna_time_budget` - time budget for `Optuna` to tune each algorithm,\n- `optuna_init_params` - if you have precomputed parameters for `Optuna` they can be passed here, then for already optimized models `Optuna` will not be used.\n- `algorithms` - the algorithms that we will check,\n- `total_time_limit` - the total time limit for AutoML training.\n\n(In the `Optuna` mode, only first fold is used for model tuning.)\n\n---\n\nMLJAR GitHub: https:\/\/github.com\/mljar\/mljar-supervised\n\n<img src=\"https:\/\/raw.githubusercontent.com\/mljar\/visual-identity\/main\/media\/kaggle_banner_white.png\" style=\"width: 70%;\"\/>"}}