{"cell_type":{"3d9da952":"code","ade29eb6":"code","59252c43":"code","2e8cc797":"code","e9782f73":"code","f13a0919":"code","e5734e7b":"code","4267ce37":"code","c65ecdd6":"code","c647c19b":"code","6ca66ec1":"code","eaae5a0b":"code","3d8c8a6d":"code","f2b8bb51":"code","237cfcd8":"code","59504df9":"code","a7f6efb6":"code","cfd2b086":"code","a6840ecb":"code","a52d2a09":"code","6541679e":"code","63a4bc27":"code","2e54b12e":"code","2187371a":"code","3b21a1ca":"code","3d4b6039":"code","b611947b":"code","43955834":"code","4f14fe0b":"code","51af2886":"markdown","de448e26":"markdown","41aa8046":"markdown","dbf5999f":"markdown","02f86ede":"markdown","08a79f2e":"markdown","338646df":"markdown","c49f05ee":"markdown","53a97324":"markdown","aeb944a2":"markdown","7c8ec0ba":"markdown","79dfb77d":"markdown","7ecc1705":"markdown"},"source":{"3d9da952":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ade29eb6":"#Load packages\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import randint\nfrom sklearn.metrics import roc_curve, roc_auc_score, auc\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix,plot_confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split,cross_val_score,KFold\nfrom sklearn.metrics import classification_report,accuracy_score,precision_score,recall_score,f1_score\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder,StandardScaler,OrdinalEncoder,LabelBinarizer\nfrom sklearn.ensemble import RandomForestClassifier","59252c43":"df = pd.read_csv('..\/input\/depression-anxiety-stress-scales\/DASS_data_21.02.19\/data.csv', sep=r'\\t', engine='python')\ndf.head()","2e8cc797":"print(df.shape)\nprint(df.dtypes)","e9782f73":"# Extract the columns with just the answers to the first 42 questions\ndf2 = df.loc[:,::3]\ndf3 = df2.iloc[:,0:42]\ndf3.head()","f13a0919":"# Dataframe summary statistics\ndf3.describe()\n# Majority of the people (average value) confessesed that they were anxious\/upset to some extent.","e5734e7b":"# Making a correlation plot for df3\nplt.figure(figsize=(16, 16))\nsns.heatmap(df3.corr(), cmap='BuPu')","4267ce37":"# Now extracting the dataframe with personality identification questions\nprint(\"Index of TIPI1 column is: \" + str(df.columns.get_loc(\"TIPI1\")))\ndf4 = df.iloc[:,131:141]\ndf4.head()","c65ecdd6":"# Pie chart to visualize the Anxious\/Easily upset personality type\ndf4['TIPI4'].value_counts().plot(kind='pie', autopct='%1.0f%%')\n# So how can we predict their personality based on the questions they answered earlier?","c647c19b":"# Setting target and features for basic classfication model\ndf4[\"TIPI4\"] = df4[\"TIPI4\"].replace([5, 4, 3, 2, 1], 0)\ndf4[\"TIPI4\"] = df4[\"TIPI4\"].replace([7, 6], 1)\ntarget = df4[\"TIPI4\"] \nfeatures = df3","6ca66ec1":"bkgd_features = df.loc[:, [\"education\", \"urban\", \"gender\", \"engnat\", \"age\", \"religion\", \"orientation\",\"race\", \"voted\", \"married\", \"familysize\"]]\nbkgd_features.head()","eaae5a0b":"# Making a correlation plot for background features - don't see any multicollinearity!\nplt.figure(figsize=(8, 5))\nsns.heatmap(bkgd_features.corr(), cmap='BuPu')","3d8c8a6d":"bkgd_table = pd.concat([bkgd_features, target], axis=1)\nbkgd_table.head()","f2b8bb51":"mean_age_ofAnxiety = bkgd_table.groupby(bkgd_table[\"TIPI4\"] == 1)[\"age\"].mean()\nprint(\"Average age of people w\/ anxiety is \" + str(\"%.2f\" % mean_age_ofAnxiety.iloc[1]) + \" years\")","237cfcd8":"# Getting the correlation between the married feature and anxiety\n# printing out categories of education column - some participants entered 0?!\nprint(bkgd_table['married'].unique())\ndata1 = bkgd_table[bkgd_table[\"married\"] > 0]\nprint(data1['married'].unique())\ndf1_crosstab = pd.crosstab(data1[\"TIPI4\"], data1[\"married\"])\ndf1_crosstab.head()","59504df9":"df1_crosstab.loc[len(df1_crosstab.index)] = df1_crosstab.iloc[1, :]\/ (df1_crosstab.iloc[0, :] + df1_crosstab.iloc[1, :])\npd.options.display.float_format = \"{:,.2f}\".format\ndf1_new = df1_crosstab.rename(columns={1: 'Never Married',2: 'Currently Married', 3: 'Previously Married'}, index={0: 'No Anxiety', 1: 'Anxiety', 2: '%'})\ndf1_new.head()\n# It's interesting to see that 42% of both currently and previously married people have anxiety issues.\n# Not suprisingly, the # of single people w\/ anxiety is 12% higher than that of currently and previously married people.","a7f6efb6":"# printing out categories of sexual orientation- some participants entered 0?!\ndata2 = bkgd_table[bkgd_table[\"orientation\"] > 0]\ndf2_crosstab = pd.crosstab(data2[\"TIPI4\"], data2[\"orientation\"])\ndf2_crosstab.head()","cfd2b086":"df2_crosstab.loc[len(df2_crosstab.index)] = df2_crosstab.iloc[1, :]\/ (df2_crosstab.iloc[0, :] + df2_crosstab.iloc[1, :])\npd.options.display.float_format = \"{:,.2f}\".format\ndf2_new = df2_crosstab.rename(columns={1: 'He',2: 'Bi', 3: 'Ho', 4: 'A', 5:'Other' }, index={0: 'No Anxiety', 1: 'Anxiety', 2: '%'})\ndf2_new.head()\n# It was interesting to see that 56% of both the homosexual and asexual populations (individually) have anxiety issues. \n# This number is 7% lower for the heterosexual population and 5% higher for the bisexual population.","a6840ecb":"# printing out categories of race column - some participants entered 0?!\ndata3 = bkgd_table[bkgd_table[\"race\"] > 0]\ndf3_crosstab = pd.crosstab(data3[\"TIPI4\"], data3[\"race\"])\ndf3_crosstab.head()","a52d2a09":"df3_crosstab.loc[len(df3_crosstab.index)] = df3_crosstab.iloc[1, :]\/ (df3_crosstab.iloc[0, :] + df3_crosstab.iloc[1, :])\npd.options.display.float_format = \"{:,.2f}\".format\ndf3_new = df3_crosstab.rename(columns={10: 'Asian',20: 'Arab', 30: 'Black', 40: 'Indigenous Australian', 50:'Native American', 60:'White', 70:'Other' }, index={0: 'No Anxiety', 1: 'Anxiety', 2: '%'})\ndf3_new.head()\n# About 50% of most racial populations have anxiety issues. This is consistent with the initial pie chart visualization. \n# But interestingly, about 62% of the the Native American population suffer from anxiety issues.","6541679e":"# printing out categories of education column - some participants entered 0?!\nprint(bkgd_table['education'].unique())\ndata4 = bkgd_table[bkgd_table[\"education\"] > 0]\nprint(data4['education'].unique())","63a4bc27":"# getting correlation between education level and anxiety\nEd_level = ['Less than high school','High School','Uni degree','Grad degree']\ndf4_crosstab = pd.crosstab(data4[\"TIPI4\"], data4[\"education\"])\ndf4_crosstab.head()","2e54b12e":"df4_crosstab.loc[len(df4_crosstab.index)] = df4_crosstab.iloc[1, :]\/ (df4_crosstab.iloc[0, :] + df4_crosstab.iloc[1, :])\npd.options.display.float_format = \"{:,.2f}\".format\ndf4_new = df4_crosstab.rename(columns={1: 'Some HS',2: 'HS', 3: 'UG', 4: 'GRAD' }, index={0: 'No Anxiety', 1: 'Anxiety', 2: '%'})\ndf4_new.head()\n# It's not suprising to see that as the education level increases (from Some HS to GRAD degree) the \n# % participants w\/anxiety decreases.","2187371a":"data = pd.concat([df3, bkgd_features, target], axis=1)\n#Drop na observations\ndata_final=data.dropna(how='any')\ndata_final_2 = data_final.loc[~((data_final['education'] == 0) | (data_final['urban'] == 0)|(data_final['gender'] == 0)|(data_final['engnat'] == 0)|(data_final['age'] == 0)|(data_final['religion'] == 0)|(data_final['orientation'] == 0)|(data_final['race'] == 0)|(data_final['voted'] == 0)|(data_final['married'] == 0)|(data_final['familysize'] == 0))]\ndata_final_2.head()\n","3b21a1ca":"# Normalize the feature columns\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\nmin_max_scaler = preprocessing.MinMaxScaler()\nall_features_final = data_final_2.drop(\"TIPI4\", axis = 1)\ntarget_final = data_final_2[\"TIPI4\"]\nX_minmax = min_max_scaler.fit_transform(all_features_final)\nX_train, X_test, y_train, y_test = train_test_split(X_minmax, target_final, test_size=0.2, random_state=42)","3d4b6039":"#Define the model\nRFmod = RandomForestClassifier(random_state=1)\n\n#Choose some hyperparameter values \nRFparams={'n_estimators':randint(10,1000),'max_features':['sqrt',None],\n          'max_depth':randint(1,10),'min_samples_leaf':randint(1,10)}","b611947b":"#Run the random search\nclfRF = RandomizedSearchCV(RFmod,RFparams,#model and parameters\n                             cv=10,#number of cross validation folds\n                             scoring='roc_auc',#accuracy metric\n                             n_iter=1)#number of random parameter combinations\nclfRF.fit(X_train,y_train)","43955834":"#Look at the parameters for the best model\nclfRF.best_estimator_","4f14fe0b":"# Compute the training and testing set ROC curves\nclfpreds_train = clfRF.best_estimator_.predict_proba(X_train).T[1]\nfpr1, tpr1, thresh1 = roc_curve(y_train, clfpreds_train)\nroc_auc_train= roc_auc_score(y_train, clfpreds_train)\n\nclfpreds_test = clfRF.best_estimator_.predict_proba(X_test).T[1]\nfpr2, tpr2, thresh2 = roc_curve(y_test, clfpreds_test)\nroc_auc_test= roc_auc_score(y_test, clfpreds_test)\n\n# Plot the ROC curves\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.plot(fpr1, tpr1, label='Training set (AUC = %0.2f)' % roc_auc_train)\nplt.plot(fpr2, tpr2, label='Testing set (AUC = %0.2f)' % roc_auc_test)\nplt.xlim([-0.01, 1.0])\nplt.ylim([0.0, 1.01])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc='lower right');\nplt.show()","51af2886":"# Analyzing the age column ","de448e26":"**Merging the background info df and psych questions df**","41aa8046":"**Changing the multi-class target variable (TIPI4 - Personality type:Anxiety,Easily Upset) to binary (1:Anxiety, 0:No Anxiety)**","dbf5999f":"# Building a Random Forest model to predict anxiety w\/ background info and psych questions","02f86ede":"# Next try out a neural network model!","08a79f2e":"**Merging the background info df with the target variable**","338646df":"**Extracting the participants' background info and storing the responses in a separate dataframe.**","c49f05ee":"# Analyzing the race column ","53a97324":"**Extracting the psych questions and storing their answers into a separate dataframe.**","aeb944a2":"# Analyzing the education column ","7c8ec0ba":"***About 53% of the participants agree moderately\/strongly that they are anxious\/easily upset!***","79dfb77d":"**Extracting the personality questions and storing their answers into a separate dataframe.**","7ecc1705":"# Analyzing the orientation column "}}