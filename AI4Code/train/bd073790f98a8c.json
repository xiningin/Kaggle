{"cell_type":{"d6251eed":"code","fbb6fca8":"code","0e5e440d":"code","b788e8d1":"code","3357f57e":"code","81e3be15":"code","6ec32002":"code","50e5df53":"code","09bbfac5":"markdown"},"source":{"d6251eed":"import pandas as pd, numpy as np\nimport os","fbb6fca8":"paths = [\n    \"..\/input\/best-submissions\/submission_866.csv\",\n    \"..\/input\/best-submissions\/submission_869.csv\",\n    \"..\/input\/bestsubmission\/submission_879.csv\",\n    \"..\/input\/best-submission\/submission_876.csv\",\n]\n\nweights = np.array([0.038, 0.070, 0.745, 0.147])\n#weights = np.array([0.00, 0.35, 0.65])\nsum(weights)","0e5e440d":"df = pd.read_csv(paths[0]).sort_values(\"recording_id\").reset_index(drop=True)\ndf.head()","b788e8d1":"cols = [f\"s{i}\" for i in range(24)]","3357f57e":"scores = []\nfor path in paths:\n    df = pd.read_csv(path).sort_values(\"recording_id\").reset_index(drop=True)\n    score = np.empty((len(df), 24))\n    o = df[cols].values.argsort(1)\n    score[np.arange(len(df))[:, None], o] = np.arange(24)[None]\n    scores.append(score)\nscores = np.stack(scores)\nscores.shape","81e3be15":"sub_score = np.sum(scores*weights[:, None, None], 0)\nprint(sub_score.shape)\nsub_score","6ec32002":"sub = pd.DataFrame(sub_score, columns=cols)\nsub[\"recording_id\"] = df[\"recording_id\"]\nsub = sub[[\"recording_id\"] + cols]\nprint(sub.shape)\nsub.head()","50e5df53":"sub.to_csv(\"submission.csv\", index=False)","09bbfac5":"I have tried different weights on the orginal kernel as suggested by kneroma. Please find link below of his original notebook. Credit to this notebook goes entirely to him.\n\nhttps:\/\/www.kaggle.com\/kneroma\/rfcx-bagging\n\nIncluded submission file from notebooks below as well\n\n* https:\/\/www.kaggle.com\/aikhmelnytskyy\/resnet-wavenet-my-best-single-model-ensemble\n* https:\/\/www.kaggle.com\/hypnotu\/automl-inference-audio-detection-soliset\n\nKindly encourage and upvote the original ideas behind the original notebooks as well"}}