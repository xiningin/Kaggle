{"cell_type":{"bb5db6fb":"code","9bf8ff68":"code","82e217c2":"code","1adc3a90":"code","705fd4fc":"code","c57086e1":"code","7419af32":"code","aee42b30":"code","9be45695":"code","85e80e82":"code","6606e77f":"code","c6fc2081":"code","1253e729":"code","25075cb8":"code","1e58e115":"code","c6793f34":"code","0fcffca9":"code","28be176d":"code","731f4e26":"code","1512c590":"code","c92a30f4":"code","c1d06c4a":"code","d209e35b":"code","2022f5d8":"code","3a94b478":"code","10943b40":"code","4c4edbe0":"code","a626afa2":"code","dc3d354e":"code","84421bb9":"code","87ff79d7":"code","123b46ec":"code","4ce4069d":"code","09551e47":"code","d89274f2":"code","fdeec45d":"code","7c1a5794":"code","58ce1cb8":"code","f2f98e9a":"code","9a62b1fd":"code","7c6b2a93":"code","86b80d7a":"code","819907a8":"code","1aee784d":"code","61f5818a":"code","fd712dc1":"code","30e8c158":"markdown"},"source":{"bb5db6fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9bf8ff68":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud","82e217c2":"df = pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\")\ndf","1adc3a90":"#to remove unnamed:0\n\ndf.columns.str.match('Unnamed')\n","705fd4fc":"df1 = df.loc[:,~df.columns.str.match('Unnamed')]\ndf1","c57086e1":"df1.shape","7419af32":"df1.columns","aee42b30":"df1.info()","9be45695":"df1.isnull().sum()","85e80e82":"#using missingno for checking pattern of nan values and hoe nan distributed\n#missingno offers very nice way to visulazie the distribustion of nan values\nimport missingno as msno\nmsno.matrix(df1)","6606e77f":"#bar chart gives idea about how may missing values are there in each columns\nmsno.bar(df1)","c6fc2081":"#check for nan values\n#club and position column have object dtype\ndf1[df1['Club'].isnull()]\ndf1[df['Position'].isnull()]","1253e729":"#replace nan value of club and positon\ndf1['Club'].fillna('No Club',inplace=True)\ndf1['Position'].fillna('ST',inplace=True)","25075cb8":"#check if there is nan value left after fillna \ndf1[df1['Club'].isnull()]","1e58e115":"df1[df1['Position'].isnull()]","c6793f34":"#using mean values for the float dtype\nimpute_mean = df1.loc[:,['Crossing', 'Finishing', 'HeadingAccuracy',\n                        \n                                 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy',\n                        \n                                 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed',\n                        \n                                 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping',\n                        \n                                 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions',\n                        \n                                 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking',\n                        \n                                 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                        \n                                 'GKKicking', 'GKPositioning', 'GKReflexes']]","0fcffca9":"for i in impute_mean.columns:\n    df1[i].fillna(df1[i].mean(),inplace=True)","28be176d":"#checking after imputing \ndf1[df1['Crossing'].isnull()]","731f4e26":"#now checking for categorical values and imputed by mode \n#note that using mode() will return series(0,1 or more) but using mode()[0] will no return series\nimpute_mode  = df1.loc[:,['Body Type','International Reputation','Height',\n                         'Weight','Preferred Foot','Jersey Number']]\n\nfor i in impute_mode.columns:\n    df1[i].fillna(df1[i].mode()[0],inplace=True)","1512c590":"#now checking\ndf1[df1['Body Type'].isnull()]\n","c92a30f4":"#fillna for numerical or continuous numerical\nimpute_median = df1.loc[:,['Weak Foot','Skill Moves']]\nfor i in impute_median.columns:\n    df1[i].fillna(df1[i].median(),inplace=True)","c1d06c4a":"#checking\ndf1[df1['Weak Foot'].isnull()]","d209e35b":"df1.columns[df1.isna().any()]","2022f5d8":"impute_mode1 = df.loc[:,['Work Rate', 'Real Face', 'Joined', 'Loaned From',\n       'Contract Valid Until', 'LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW',\n       'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM',\n       'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB', 'Release Clause']]","3a94b478":"for i in impute_mode1.columns:\n    df1[i].fillna(df1[i].mode()[0], inplace=True)","10943b40":"df1.columns[df1.isna().any()]","4c4edbe0":"# correlation between different feature\nf,ax = plt.subplots(figsize = (25,15))\nax = sns.heatmap(df1.corr(),annot=True,linewidths=0.5,linecolor='red',fmt='.1f',ax=ax)\nplt.show()","a626afa2":"plt.subplots(figsize=(25,15))\nwordcloud = WordCloud(background_color = 'white',\n                     width = 1900,height=1000).generate(\" \".join(df1.Nationality))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","dc3d354e":"plt.style.use('fivethirtyeight')\nfig,ax = plt.subplots(figsize = (8,7))\ngraph = sns.countplot(ax=ax,x=df1['Preferred Foot'],data=df1,palette='bone')\ngraph.set_title('preferred Foot of the Player',fontsize=20)\ngraph.set_xticklabels(graph.get_xticklabels(),rotation=30)\nplt.show()","84421bb9":"#different positions acquired by the players\nplt.figure(figsize=(18,8))\nplt.style.use('fivethirtyeight')\nax = sns.countplot('Position',data=df1,palette='bone')\nax.set_xlabel(xlabel = 'Different positon in football',fontsize=16)\nax.set_ylabel(ylabel='Count of Players',fontsize=18)\nax.set_title(label = 'Comparison of Position and Players',fontsize=20)\nplt.show()","87ff79d7":"plt.figure(figsize=(13,9))\nax = sns.countplot(x='Height',data=df1,palette='dark')\nax.set_title(label = 'Count of player on basis of height',fontsize = 20)\nax.set_xlabel(xlabel='Height in foot per inch',fontsize=17)\nax.set_ylabel(ylabel='Count',fontsize=17)\nplt.show()","123b46ec":"#show diffrent work rate of player participating in fifa 2019\nplt.figure(figsize=(15,7))\nplt.style.use('fivethirtyeight')\nsns.countplot(x='Work Rate',data = df1,palette='hls')\nplt.title('diffrent work rates of the players participating in fifa 2019',fontsize=20)\nplt.xlabel('work rates associated with the players')\nplt.ylabel('count of players')\nplt.show()","4ce4069d":"#shows players age\nsns.set(style='dark',palette='colorblind',color_codes=True)\nx=df1.Age\nplt.figure(figsize=(15,8))\nplt.style.use('ggplot')\nax = sns.distplot(x,bins=58,kde=False,color='g')\nax.set_xlabel(xlabel='Player\\'s age',fontsize=17)\nax.set_ylabel(ylabel='number of players',fontsize=20)\nax.set_title(label='histogram of player age',fontsize=20)\nplt.show()","09551e47":"fig,ax = plt.subplots(figsize=(12,8))\nplt.style.use('fivethirtyeight')\ngraph = sns.countplot(ax=ax,x = df1['Skill Moves'],data=df1,hue='Preferred Foot',palette='PuBuGn_d')\ngraph.set_title('skill moves of players segregate by preferred foot',fontsize=24)\ngraph.set_xticklabels(graph.get_xticklabels(),rotation=30)\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2.,height+0.1,height,ha='center')","d89274f2":"top_country = df1['Nationality'].value_counts().head(15)\ntop_country","fdeec45d":"fig,ax = plt.subplots(figsize=(12,8))\nx = top_country.values\ny = top_country.index\nax.barh(y,x,align='center',color='dimgray')\nax.invert_yaxis()\nax.set_xlabel('number of players')\nax.set_ylabel('name of countries',rotation=0)\nax.set_title('top 10 countries with most number of player')\nplt.show()","7c1a5794":"df1_best_players = pd.DataFrame.copy(df1.sort_values(by='Overall',ascending=False).head(10))\nplt.figure(1,figsize=(12,6))\nsns.barplot(x='Name',y='Overall',data=df1_best_players,palette='Reds')\nplt.ylim(85,95)\nplt.show()","58ce1cb8":"### top 10 eldest players \ndf1.sort_values(by='Age',ascending=False)[['Name','Club','Nationality','Overall','Age']].head()","f2f98e9a":"### TOP 10 YOUNGEST PLAYERS\ndf1.sort_values(by='Age',ascending=True)[['Name','Club','Nationality','Overall','Age']].head()","9a62b1fd":"### best finisher\ndf1.sort_values(by='Finishing',ascending=False)[['Name','Club','Nationality','Age','Finishing']].head()","7c6b2a93":"### fastest players\ndf1.sort_values(by='SprintSpeed',ascending=False)[['Name','Club','Nationality','Overall','Age','SprintSpeed']].head()","86b80d7a":"###best dribbler\ndf1.sort_values(by='Dribbling',ascending=False)[['Name','Club','Nationality','Overall','Age','Dribbling']].head()","819907a8":"player = str(df1.loc[df1['Potential'].idxmax()][1])\nprint('Maximum Overall Perforamnce : '+str(df1.loc[df1['Overall'].idxmax()][1]))","1aee784d":"pr_cols=['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\ni=0\nwhile i < len(pr_cols):\n    print('Best {0} : {1}'.format(pr_cols[i],df1.loc[df1[pr_cols[i]].idxmax()][1]))\n    i += 1","61f5818a":"i=0\nbest=[]\nwhile i<len(pr_cols):\n    best.append(df1.loc[df1[pr_cols[i]].idxmax()][1])\n    i += 1","fd712dc1":"plt.subplots(figsize=(25,15))\nwordcloud =WordCloud(background_color='White',width=1920,height=900).generate(\" \".join(best))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","30e8c158":"#  Data Visualization"}}