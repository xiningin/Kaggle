{"cell_type":{"bf7e1745":"code","1d513f71":"code","bd6ff179":"code","a49bcd6f":"code","e126c957":"code","5885c0de":"code","e1ae2901":"code","6474d611":"code","e7f17559":"code","2f78bd4f":"code","9b1aeb7b":"code","7b2c3743":"code","051c88eb":"code","7f67f048":"code","85562a13":"code","675da146":"code","3fbdaede":"code","06f681e2":"code","54801899":"code","df51cd12":"code","23f4b8e0":"code","4a1617f1":"code","66fa5364":"code","4f99967d":"code","1451db9b":"code","8ec81eb2":"code","b51dd186":"code","8a3ae632":"code","ee3ab572":"code","f1627317":"code","051289c4":"code","2c5ee2e9":"code","e5b48b99":"markdown","a5ce96bf":"markdown","af4124f5":"markdown","c7653fbd":"markdown","7b9bae91":"markdown","11a6e618":"markdown","c0cc9e01":"markdown","faf7d436":"markdown","2deebe8c":"markdown","6e7626ab":"markdown","da1b6720":"markdown","69408a37":"markdown","cd2d49ec":"markdown","2ecb4c7d":"markdown","a70573ed":"markdown","44840f2b":"markdown","57acffcf":"markdown","409cab7c":"markdown","2041ef52":"markdown","8a43027f":"markdown","e0146f9c":"markdown","5bd2c90d":"markdown","7d4a93ca":"markdown","6e65e76b":"markdown","97dda64a":"markdown","3279b035":"markdown","ea7a5d09":"markdown","4bda3606":"markdown","ecbf08d2":"markdown","4fecad0d":"markdown","ac4343b2":"markdown","0db10418":"markdown","5028dfca":"markdown","92d86eee":"markdown","32656b17":"markdown"},"source":{"bf7e1745":"# Data libraries\nimport pandas as pd\nimport re\nimport pycountry\n\n# Visualisation libraries\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n%matplotlib inline\n\n# Load data\nmetadata_file = '..\/input\/CORD-19-research-challenge\/metadata.csv'\ndf = pd.read_csv(metadata_file,\n                 dtype={'Microsoft Academic Paper ID': str,\n                        'pubmed_id': str})\n\ndef doi_url(d):\n    if d.startswith('http'):\n        return d\n    elif d.startswith('doi.org'):\n        return f'http:\/\/{d}'\n    else:\n        return f'http:\/\/doi.org\/{d}'\n    \ndf.doi = df.doi.fillna('').apply(doi_url)\n\nprint(f'loaded DataFrame with {len(df)} records')","1d513f71":"# Helper function for filtering df on abstract + title substring\ndef abstract_title_filter(search_string):\n    return (df.abstract.str.lower().str.replace('-', ' ').str.contains(search_string, na=False) |\n            df.title.str.lower().str.replace('-', ' ').str.contains(search_string, na=False))\ndef full_text_filter(search_string):\n    return (df.abstract.str.lower().str.replace('-', ' ').str.contains(search_string, na=False) |\n            df.title.str.lower().str.replace('-', ' ').str.contains(search_string, na=False)|\n            df.full_text.str.lower().str.replace('-', ' ').str.contains(search_string, na=False))\n","bd6ff179":"# Helper function which counts synonyms and adds tag column to DF\ndef count_and_tag(df: pd.DataFrame,\n                  synonym_list: list,\n                  tag_suffix: str) -> (pd.DataFrame, pd.Series):\n    counts = {}\n    df[f'tag_{tag_suffix}'] = False\n    for s in synonym_list:\n        synonym_filter = abstract_title_filter(s)\n        counts[s] = sum(synonym_filter)\n        df.loc[synonym_filter, f'tag_{tag_suffix}'] = True\n    return df, pd.Series(counts)\n\n# Helper function which counts synonyms and adds tag column to DF\ndef count_and_tag_full_text(df: pd.DataFrame,\n                  synonym_list: list,\n                  tag_suffix: str) -> (pd.DataFrame, pd.Series):\n    counts = {}\n    df[f'tag_{tag_suffix}'] = False\n    for s in synonym_list:\n        synonym_filter = full_text_filter(s)\n        counts[s] = sum(synonym_filter)\n        df.loc[synonym_filter, f'tag_{tag_suffix}'] = True\n    return df, pd.Series(counts)","a49bcd6f":"# Helper function for Cleveland dot plot visualisation of count data\ndef dotplot(input_series, title, x_label='Count', y_label='Regex'):\n    subtitle = '<br><i>Hover over dots for exact values<\/i>'\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(\n    x=input_series.sort_values(),\n    y=input_series.sort_values().index.values,\n    marker=dict(color=\"crimson\", size=12),\n    mode=\"markers\",\n    name=\"Count\",\n    ))\n    fig.update_layout(title=f'{title}{subtitle}',\n                  xaxis_title=x_label,\n                  yaxis_title=y_label)\n    fig.show()\n","e126c957":"# Function for printing out key passage of abstract based on key terms\ndef print_key_phrases(df, key_terms, n=5, chars=300):\n    for ind, item in enumerate(df[:n].itertuples()):\n        print(f'{ind+1} of {len(df)}')\n        print(item.title)\n        print('[ ' + item.doi + ' ]')\n        try:\n            i = len(item.abstract)\n            for kt in key_terms:\n                kt = kt.replace(r'\\b', '')\n                term_loc = item.abstract.lower().find(kt)\n                if term_loc != -1:\n                    i = min(i, term_loc)\n            if i < len(item.abstract):\n                print('    \"' + item.abstract[i-30:i+chars-30] + '\"')\n            else:\n                print('    \"' + item.abstract[:chars] + '\"')\n        except:\n            print('NO ABSTRACT')\n        print('---')","5885c0de":"covid19_synonyms = ['covid',\n                    'coronavirus disease 19',\n                    'sars cov 2', # Note that search function replaces '-' with ' '\n                    '2019 ncov',\n                    '2019ncov',\n                    r'2019 n cov\\b',\n                    r'2019n cov\\b',\n                    'ncov 2019',\n                    r'\\bn cov 2019',\n                    'coronavirus 2019',\n                    'wuhan pneumonia',\n                    'wuhan virus',\n                    'wuhan coronavirus',\n                    r'coronavirus 2\\b']","e1ae2901":"df, covid19_counts = count_and_tag(df, covid19_synonyms, 'disease_covid19')","6474d611":"covid19_counts.sort_values(ascending=False)","e7f17559":"novel_corona_filter = (abstract_title_filter('novel corona') &\n                       df.publish_time.str.startswith('2020', na=False))\nprint(f'novel corona (published 2020): {sum(novel_corona_filter)}')\ndf.loc[novel_corona_filter, 'tag_disease_covid19'] = True","2f78bd4f":"df[df.tag_disease_covid19].publish_time.str.slice(0, 4).value_counts(dropna=False)","9b1aeb7b":"df.loc[df.tag_disease_covid19 & ~df.publish_time.str.startswith('2020', na=True),\n       'tag_disease_covid19'] = False","7b2c3743":"repr_synonyms = [\n    'math',\n    's.i.r', 'sir',\n    'seir','s.e.i.r',\n    'sis','s.i.s',\n    'sirs','s.i.r.s',\n    'seis', 's.e.i.s',\n    'seirs','s.e.i.rs',\n    'msir', 'm.s.i.r.',\n    'mseir', 'm.s.e.i.r',\n    'mseirs','m.s.e.i.r.s',\n    'seirv','s.e.i.r.v',\n    'nac', 'nac', \n    'nac seirv','nac s.e.i.r.v',\n    'sirv','s.i.r.v',\n    'siqr','s.i.q.r',\n    'sveis','s.v.e.i.s',\n    'seiqs','s.e.i.q.s',\n    'iar','i.a.r',\n    'network model',\n]","051c88eb":"df, repr_counts = count_and_tag(df,repr_synonyms, 'Math_models_used')\ndotplot(repr_counts, 'Math models by title \/ abstract metadata')","7f67f048":"repr_counts.sort_values(ascending=False)","85562a13":"n_math = (df.tag_disease_covid19 & df.tag_Math_models_used).sum()\nn_math","675da146":"msir_synonyms = [\n    'msir','m.s.i.r',\n]\ndf, msir_counts = count_and_tag(df,msir_synonyms, 'MSIR')\ndotplot(msir_counts, 'MSIR models by title \/ abstract metadata')\nmsir_counts.sort_values(ascending=False)\nn_msir = (df.tag_disease_covid19 & df.tag_MSIR).sum()\nn_msir\nn_msir_no_covid_filter = (df.tag_MSIR).sum()\nn_msir_no_covid_filter","3fbdaede":"sirv_synonyms = [\n    'sirv','s.i.r.v',\n]\ndf, sirv_counts = count_and_tag(df,sirv_synonyms, 'SIRV')\ndotplot(sirv_counts, 'SIRV models by title \/ abstract metadata')\nsirv_counts.sort_values(ascending=False)\nn_sirv = (df.tag_disease_covid19 & df.tag_SIRV).sum()\nn_sirv\nn_sirv_no_covid_filter = (df.tag_SIRV).sum()\nn_sirv_no_covid_filter","06f681e2":"seis_synonyms = [\n    'seis', 's.e.i.s',\n]\ndf, seis_counts = count_and_tag(df,seis_synonyms, 'SEIS')\ndotplot(seis_counts, 'SEIS models by title \/ abstract metadata')\nseis_counts.sort_values(ascending=False)\nn_seis = (df.tag_disease_covid19 & df.tag_SEIS).sum()\nn_seis\nn_seis_no_covid_filter = (df.tag_SEIS).sum()\nn_seis_no_covid_filter\n","54801899":"print(df[df.tag_disease_covid19 & df.tag_SEIS]['title'])","df51cd12":"sirs_synonyms = [\n    'sirs','s.i.r.s',\n]\ndf, sirs_counts = count_and_tag(df,sirs_synonyms, 'SIRS')\ndotplot(sirs_counts, 'SIRS models by title \/ abstract metadata')\nsirs_counts.sort_values(ascending=False)\nn_sirs = (df.tag_disease_covid19 & df.tag_SIRS).sum()\nn_sirs\nn_sirs_no_covid_filter = (df.tag_SIRS).sum()\nn_sirs_no_covid_filter \n","23f4b8e0":"print(df[df.tag_disease_covid19 & df.tag_SIRS]['title'])","4a1617f1":"seir_synonyms = [\n    'seir','s.e.i.r',\n]\ndf, seir_counts = count_and_tag(df,seir_synonyms, 'SEIR')\ndotplot(seir_counts, 'SEIR models by title \/ abstract metadata')\nseir_counts.sort_values(ascending=False)\nn_seir = (df.tag_disease_covid19 & df.tag_SEIR).sum()\nn_seir\n\nn_seir_no_covid_filter = (df.tag_SEIR).sum()\nn_seir_no_covid_filter","66fa5364":"print(df[df.tag_disease_covid19 & df.tag_SEIR]['title'])","4f99967d":"sir_synonyms = [\n    'sir','s.i.r',\n]\ndf, sir_counts = count_and_tag(df,sir_synonyms, 'SIR')\ndotplot(sir_counts, 'SIR models by title \/ abstract metadata')\nsir_counts.sort_values(ascending=False)\nn_sir = (df.tag_disease_covid19 & df.tag_SIR).sum()\nn_sir\n\nn_sir_no_covid_filter = (df.tag_SIR).sum()\nn_sir_no_covid_filter","1451db9b":"print(df[df.tag_disease_covid19 & df.tag_SIR]['title'])","8ec81eb2":"sis_synonyms = [\n    'sis','s.i.s',\n]\ndf, sis_counts = count_and_tag(df,sis_synonyms, 'SIS')\ndotplot(sis_counts, 'SIS models by title \/ abstract metadata')\nsis_counts.sort_values(ascending=False)\nn_sis = (df.tag_disease_covid19 & df.tag_SIS).sum()\nn_sis\nn_sis_no_covid_filter = (df.tag_SIS).sum()\nn_sis_no_covid_filter","b51dd186":"print(df[df.tag_disease_covid19 & df.tag_SIS]['title'])","8a3ae632":"from bokeh.io import output_file, show, output_notebook\nfrom bokeh.plotting import figure\noutput_notebook()\nmodels_name = ['SIR','SIS','SIRV','SEIS','SEIR','SIRS','MSIR']\ncounts = [n_sir,n_sis,n_sirv,n_seis,n_seir,n_sirs,n_msir]\np = figure(x_range=models_name, plot_height=250, title=\"Model Counts\")\np.xgrid.grid_line_color = None\np.y_range.start = 0\np.vbar(x=models_name, top=counts, width=0.9)\nshow(p)\n\ncounts\n","ee3ab572":"from bokeh.io import output_file, show, output_notebook\nfrom bokeh.plotting import figure\noutput_notebook()\nmodels_name = ['SIR','SIS','SIRV','SEIS','SEIR','SIRS','MSIR']\ncounts_no = [n_sir_no_covid_filter,n_sis_no_covid_filter,n_sirv_no_covid_filter,n_seis_no_covid_filter,n_seir_no_covid_filter,n_sirs_no_covid_filter,n_msir_no_covid_filter]\np = figure(x_range=models_name, plot_height=250, title=\"Model Counts without COVID19 filter\")\np.xgrid.grid_line_color = None\np.y_range.start = 0\np.vbar(x=models_name, top=counts_no, width=0.9)\nshow(p)\ncounts_no","f1627317":"df_SIR = df[df.tag_disease_covid19 & df.tag_SIR]\ndf_SIR.head()\ndf_SIR.shape","051289c4":"parameter_sir_synonyms = [\n    'beta','betta',\n    'gama','gamma'\n]\ndf, parameter_sir_counts = count_and_tag(df,parameter_sir_synonyms, 'parameter_sir')\ndotplot(parameter_sir_counts, 'parameter_sir by text metadata')\nparameter_sir_counts.sort_values(ascending=False)\nn = (df.tag_disease_covid19 & df.tag_SIR & df.tag_parameter_sir).sum()\nn","2c5ee2e9":"print_key_phrases(df[df.tag_disease_covid19 & df.tag_SIR & df.tag_parameter_sir], parameter_sir_synonyms, n=52, chars=500)","e5b48b99":"## Conclusions","a5ce96bf":"## Contents\n\n1. Introduction\n2. Goals\n3. Setup\n4. Choosing the models\n5. Getting the papers\n6. Extracting the parameters used.\n7. Bibliography","af4124f5":"### MSIR","c7653fbd":"### SIR\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/8\/8a\/SIR.PNG\/600px-SIR.PNG)","7b9bae91":"I would like to ackowledge Andy White and his excellent notebook [COVID-19 Thematic tagging with Regular Expressions](https:\/\/www.kaggle.com\/ajrwhite\/covid-19-thematic-tagging-with-regular-expressions#kln-97). This notebook is just an expansion of it and relies on his philosphy. \n\n**This notebook can help you to evaluate and discover new math models for the forecasting competition!**\n","11a6e618":"## Introduction","c0cc9e01":"## Extra bibliography","faf7d436":"Helpers functions","2deebe8c":"Let's check how many of them are related to covid19","6e7626ab":"## Goals: \n- Find the **common math models and variations** that are being used in order to predict or analize COVID19 (that way if you are making some model or improving one, you can fastly access to bibliography about the model you are using).\n- Get the **parameter information** regarding each model in order to set up any simulation quicly or contrast your model.\n- Check the issues that some of the classical approaches may have in order to prevent possible changes in predicted trends.\n","da1b6720":"Unfortunately, there is no match with SIRV model. It looks that \"no one\" (in our database) has used it.","69408a37":"Getting the data","cd2d49ec":"### If you want a good book about this topic: [Mathematical Models in Epidemiology](https:\/\/doi.org\/10.1007\/978-1-4939-9828-9)\n\n*(From Wikipedia, the free encyclopedia)*\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/b\/bd\/SIR-Modell.svg\/1280px-SIR-Modell.svg.png)\n### Definition\n**Mathematical models** can project how infectious diseases progress to show the likely outcome of an epidemic and help inform public health interventions. Models use basic assumptions and\/or collected statistics along with mathematics to **find parameters** for various infectious diseases and use those parameters to calculate the effects of different interventions, like mass vaccination programmes. **The modelling can help decide which intervention\/s to avoid and which to trial, or can predict future growth patterns, etc.**\n\n### Types of epidemic models\n\n- **Stochastic:** means being or having a random variable. A stochastic model is a tool for estimating probability distributions of potential outcomes by allowing for random variation in one or more inputs over time. Stochastic models depend on the chance variations in risk of exposure, disease and other illness dynamics.\n- **Deterministic:** When dealing with large populations, as in the case of covid, **deterministic or compartmental mathematical models are often used**. In a deterministic model, individuals in the population are assigned to different subgroups or compartments, each representing a specific stage of the epidemic. **Letters such as M, S, E, I, and R are often used to represent different stages**. The transition rates from one class to another are mathematically expressed as derivatives, hence the model is formulated using differential equations. While building such models, it must be assumed that the population size in a compartment is differentiable with respect to time and that the epidemic process is deterministic. In other words, the changes in population of a compartment can be calculated using only the history that was used to develop the model\n\n### Example: SIR model\n\n\n### Common models:\n- SIR [link](http:\/\/idmod.org\/docs\/general\/model-sir.html)\n- SEIR [link](https:\/\/sites.me.ucsb.edu\/~moehlis\/APC514\/tutorials\/tutorial_seasonal\/node4.html)\n- SEIRS [link](http:\/\/www.public.asu.edu\/~hnesse\/classes\/seirs.html)\n- SIS [link](https:\/\/sites.me.ucsb.edu\/~moehlis\/APC514\/tutorials\/tutorial_seasonal\/node2.html)\n- SIRS [link](http:\/\/idmod.org\/docs\/general\/model-sir.html)\n- SEIS [link](https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology)\n- MSIR [link](https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology)\n- MSEIR [link](https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology)\n- MSEIRS [link](https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology)\n- SEIRV [link](https:\/\/doi.org\/10.3934\/mbe.2020148)\n- SIRV [link](http:\/\/)\n- SIQR [link](http:\/\/)\n- SVEIS [link](http:\/\/)\n- SEIQS [link](http:\/\/)\n\n### Main focus:\n\nOur main focus is to discover how the epidemic is being modeled. As it is said we are going to use the most common letters in order to find acronyms in the research papers. \n\n### Work in progress\n- Use thw whole text\n- cleaning text a bit more in order to avoid mistakes.\n- Getting parameter information of the models used.\n- Getting information about math models that are based on network dynamics.\n- Getting information about any stochastic model used in bibliography.\n- Conclusions.","2ecb4c7d":"We first check all the abbreviatures and then we can go one by one","a70573ed":"### SEIS","44840f2b":"### SIS\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/1\/16\/SIS.PNG\/400px-SIS.PNG)","57acffcf":"### - It is interesting that, although SIR and SIS are separate models (one admits recoveries while the other does not) they are the main two used for this purpose.\nThe main reason may be that large variations can be made on them, both in the way of modeling and in the parameters, due to their simplicity of approach. However, these simplifications are also accompanied by possible errors when using these models in prediction.\n\n### - On the other hand, it is interesting to highlight the SEIR model, (whose phases are susceptible, exposed, sick and recovered) has been widely used for this particular epidemic.\n\n### - In any case, the use of models with recovered or cannot be identified with the generalized attitude of treating recoveries as individuals that cannot be infected. However, if this disease is prolonged in time, they could be infected again, so the use of the R (recovered) phases should be taken with caution.\n\n### - I know SEIRV model has been used quite nicely in Wuhan outbreak, furthermore MSEIRS model could be quite interesting to see as well, given that the immunity in the R class would be temporary, so that individuals would regain their susceptibility when the temporary immunity ended. ","409cab7c":"Leave a like if you like the notebook. \nHigh five for all the math-mates around here! :)","2041ef52":"# Epidemiology math models used in Research (work in progress!)","8a43027f":"## Setup","e0146f9c":"## So now that we know there are a lot of articles from these models, let's make a deeper analysis, model by model","5bd2c90d":"Adding the results to dataframe and plotting","7d4a93ca":"## Choosing the most common math models","6e65e76b":"It is remarkable to see that a interesting amount of articles related to SEIR models are from COVID19","97dda64a":"## Final plot","3279b035":"The most common math model acronyms are:\n- 's.i.r', 'sir',\n-    'seir','s.e.i.r',\n-    'sis','s.i.s',\n-    'sirs','s.i.r.s',\n-    'seis', 's.e.i.s',\n-    'seir','s.e.i.r',\n-  'msir', 'm.s.i.r.'\n-    'mseir', 'm.s.e.i.r',\n-   'seirv','s.e.i.r.v',\n-    'nac', 'nac', \n-    'nac seirv','nac s.e.i.r.v',\n-    'sirv','s.i.r.v',\n-    'siqr','s.i.q.r',\n-   'sveis','s.v.e.i.s',\n-    'seiqs','s.e.i.q.s',\n-    'iar','i.a.r',\n-    'network model',","ea7a5d09":"Unfortunately, there is no match with SIRV model. It looks that \"no one\" (in our database) has used it.","4bda3606":"printing the title","ecbf08d2":"### SIRS","4fecad0d":"### SIR","ac4343b2":"### SEIR\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/3d\/SEIR.PNG\/800px-SEIR.PNG)","0db10418":"#### As it is said, there are some papers that are not related to covid. Eventhough these papers could be interesting to analyze in the parameter section, we omit them for now.","5028dfca":"## Parameter extraction","92d86eee":"### SIRV","32656b17":"SIR model usually uses two parameters: beta and gamma. Let's try to find them."}}