{"cell_type":{"8e1494fa":"code","c4c0a207":"code","dff7bb78":"code","c0ecd920":"code","7bbe5081":"code","4654ac7d":"code","298ea6cf":"code","f522002e":"code","621b8cf3":"code","082a2eff":"markdown","208b429f":"markdown","c0434f74":"markdown","5751d937":"markdown","95040f76":"markdown","9973e014":"markdown"},"source":{"8e1494fa":"# import numpy as np \n# import pandas as pd \nimport os\nimport pathlib\n#import cv2\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nimport tensorflow_hub as hub\nimport warnings\nwarnings.filterwarnings('ignore')\nos.environ[\"KMP_WARNINGS\"] = \"FALSE\" ","c4c0a207":"# Set Parameters\nnum_classes = 73\nbatch_size = 64\nimg_height = 224\nimg_width = 224\n\n\n# Keras data loader\n# training, validation and test set\nTRAIN_PATH = pathlib.Path(\"..\/input\/sports-classification\/train\")\nVAL_PATH = pathlib.Path(\"..\/input\/sports-classification\/valid\")\nTEST_PATH = pathlib.Path(\"..\/input\/sports-classification\/test\")\n\ntrain_ds = tf.keras.utils.image_dataset_from_directory(\n    TRAIN_PATH,\n    image_size=(img_height, img_width),\n    batch_size=batch_size)\n\nval_ds = tf.keras.utils.image_dataset_from_directory(\n    VAL_PATH,\n    image_size=(img_height, img_width),\n    batch_size=batch_size)\n\ntest_ds = tf.keras.utils.image_dataset_from_directory(\n    TEST_PATH,\n    image_size=(img_height, img_width),\n    batch_size=batch_size)","dff7bb78":"# Show images from train \nclass_names = train_ds.class_names\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 10))\nfor images, labels in train_ds.take(1):\n  for i in range(9):\n    ax = plt.subplot(3, 3, i + 1)\n    plt.imshow(images[i].numpy().astype(\"uint8\"))\n    plt.title(class_names[labels[i]])\n    plt.axis(\"off\")","c0ecd920":"model1 = Sequential([\n    layers.Rescaling(1.\/255),\n    layers.Conv2D(64, (3,3), padding='same', activation='relu'),\n    layers.MaxPooling2D(),\n    layers.Conv2D(128, (3,3), padding='same', activation='relu'),\n    layers.MaxPooling2D(),\n    layers.Conv2D(256, (3,3), padding='same', activation='relu'),\n    layers.MaxPooling2D(),\n    layers.Conv2D(512, (3,3), padding='same', activation='relu'),\n    layers.MaxPooling2D(),\n    layers.Conv2D(512, (3,3), padding='same', activation='relu'),\n    layers.MaxPooling2D(),\n    layers.Flatten(),\n    layers.Dense(256, activation='relu'),\n    layers.Dense(256, activation='relu'),\n    layers.Dense(num_classes)\n])\n\n# setting hyperparameters\nmodel1.compile(optimizer='adam', # set the optimizer\n    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), # loss function\n    metrics=['accuracy']) #accuracy metric\nhistory = model1.fit(train_ds,epochs=10, validation_data=val_ds)\nprint(\"PERFOMANCE\",model1.evaluate(test_ds))\nmodel1.summary()","7bbe5081":"import matplotlib.pyplot as plt\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('Accuracy')\n#plt.ylim([min(plt.ylim()),1])\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.ylabel('Cross Entropy')\n#plt.ylim([0,1.0])\nplt.title('Training and Validation Loss')\nplt.xlabel('epoch')\nplt.show()","4654ac7d":"from tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.preprocessing import image","298ea6cf":"BATCH_SIZE = 64\nIMAGE_SIZE = (img_height, img_width)\n\n# Augmentation for training set\ntrain_data_generator = image.ImageDataGenerator(\n                                            horizontal_flip=True,\n#                                             zoom_range=0.15,\n#                                             width_shift_range=0.2,\n#                                             height_shift_range=0.2,\n#                                             shear_range=0.15,\n                                            preprocessing_function=preprocess_input\n                                            )\n# No Augmentation for valid and test\ntest_data_generator = image.ImageDataGenerator(preprocessing_function=preprocess_input)\n\n\ntrain_generator = train_data_generator.flow_from_directory(directory= TRAIN_PATH,\n                                                    target_size=IMAGE_SIZE,\n                                                    color_mode= 'rgb',\n                                                    class_mode= 'categorical',\n                                                    batch_size= BATCH_SIZE)\n\nval_generator = test_data_generator.flow_from_directory(directory= VAL_PATH,\n                                                    target_size=IMAGE_SIZE,\n                                                    color_mode= 'rgb',\n                                                    class_mode= 'categorical',\n                                                    batch_size= BATCH_SIZE)\n\ntest_generator = test_data_generator.flow_from_directory(directory= TEST_PATH,\n                                                    target_size=IMAGE_SIZE,\n                                                    color_mode= 'rgb',\n                                                    class_mode= 'categorical',\n                                                    batch_size= BATCH_SIZE)","f522002e":"# build the transfer model\n\nbase = MobileNetV2(weights='imagenet', include_top=False)\nbase.trainable = False\n\nmodel = Sequential([\n    base,\n    layers.GlobalAveragePooling2D(),\n    layers.Dense(256, activation='relu'),\n    layers.Dropout(0.1),\n    layers.Dense(256, activation='relu'),\n    layers.Dropout(0.1),\n    layers.Dense(num_classes)\n])\n\nmodel.compile(\n    optimizer=\"adam\",\n    loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n    metrics=['accuracy'])\n\nmodel.summary()\n\n#Train model\nhistory = model.fit(train_generator, validation_data=val_generator, epochs=5)\nprint(\"PERFOMANCE\",model.evaluate(test_generator))","621b8cf3":"# plot training history\nimport matplotlib.pyplot as plt\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('Accuracy')\n#plt.ylim([min(plt.ylim()),1])\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.ylabel('Cross Entropy')\n#plt.ylim([0,1.0])\nplt.title('Training and Validation Loss')\nplt.xlabel('epoch')\nplt.show()","082a2eff":"**Observation & Discussion**\n\nAll the models experimented with all do very well on training data but do not do well on test data. This could mean the model is overfitting and not able to generalize well.\n\n\n\n**solution**.   \n\nTransfer Learning \n\ngot this from a medimu post : we need to get scientific evidence that this is true.\n\nA model where there are approximately the same amount of data for each task might still benefit from transfer learning if there is a risk of overfitting, as it often occurs when the destination task is highly domain-specific\n\n","208b429f":"## TRANSFER LEARNING","c0434f74":"## Loading data","5751d937":"#### get a pretrained model","95040f76":"**Observation** \n\nThe Pretrained model helps the model generalise better","9973e014":"# PREPARE DATA"}}