{"cell_type":{"0ece130c":"code","149b34b2":"code","f703d667":"code","3de7aea0":"code","e4acd2fb":"code","3c6ec6e2":"code","7cf945de":"code","0a3b8d37":"code","85189d4d":"code","0cfeeea2":"code","707c797e":"code","f63ed7c6":"code","f8d6e8a8":"code","1844c2bd":"code","d0d0d880":"code","13cc4761":"code","2c656c50":"code","b8129c3a":"code","99b23e11":"code","b3fac836":"code","55120edd":"code","abee03c3":"code","00d50297":"code","9f31fcce":"code","2059a43a":"code","5953fc4b":"code","64592a8b":"code","10fbd60d":"code","47784306":"code","13861998":"markdown","6cbbf781":"markdown","9a116c3e":"markdown","c604cbe8":"markdown","6f73f414":"markdown","dcd30b58":"markdown","7ed6df93":"markdown","5355c9b5":"markdown","988cfb77":"markdown","ec987ff8":"markdown","bcb4a7a9":"markdown","4f72967d":"markdown","bcf9c567":"markdown","00b866f0":"markdown","87cf7ae0":"markdown","07e412f7":"markdown","3f1fcbdf":"markdown","a7b5c2d9":"markdown","a8a5d4e4":"markdown"},"source":{"0ece130c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for data visualization purposes\nimport seaborn as sns # for statistical data visualization\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","149b34b2":"import warnings\n\nwarnings.filterwarnings('ignore')\n","f703d667":"data = pd.read_csv(\"\/kaggle\/input\/large-random-tweets-from-pakistan\/Random \"\n                   \"Tweets from Pakistan- Cleaned- Anonymous.csv\",encoding_errors = 'ignore')\ndata.head(10)","3de7aea0":"import pdb\nfrom nltk.corpus import stopwords, twitter_samples\nimport numpy as np\nimport pandas as pd\nimport nltk\nimport string\nfrom nltk.tokenize import TweetTokenizer\nfrom os import getcwd","e4acd2fb":"nltk.download('stopwords')\n","3c6ec6e2":"# add folder, tmp2, from our local workspace containing pre-downloaded corpora files to nltk's data path\nnltk.download('stopwords')\n\nfilePath = f\"{getcwd()}\/..\/tmp2\/\"\nnltk.data.path.append(filePath)","7cf945de":"# get the sets of positive and negative tweets\nall_positive_tweets = twitter_samples.strings('positive_tweets.json')\nall_negative_tweets = twitter_samples.strings('negative_tweets.json')\n\n# split the data into two pieces, one for training and one for testing (validation set)\ntest_pos = all_positive_tweets[4000:]\ntrain_pos = all_positive_tweets[:4000]\ntest_neg = all_negative_tweets[4000:]\ntrain_neg = all_negative_tweets[:4000]\n\ntrain_x = train_pos + train_neg\ntest_x = test_pos + test_neg\n\n# avoid assumptions about the length of all_positive_tweets\ntrain_y = np.append(np.ones(len(train_pos)), np.zeros(len(train_neg)))\ntest_y = np.append(np.ones(len(test_pos)), np.zeros(len(test_neg)))","0a3b8d37":"data=data['full_text']","85189d4d":"data=data[:100]\ndata","0cfeeea2":"custom_tweet = \"Happy birthday to my brother n boss , May you ...\"\n\n# print cleaned tweet\nprint(process_tweet(custom_tweet))","707c797e":"# UNQ_C1 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef count_tweets(result, tweets, ys):\n    '''\n    Input:\n        result: a dictionary that will be used to map each pair to its frequency\n        tweets: a list of tweets\n        ys: a list corresponding to the sentiment of each tweet (either 0 or 1)\n    Output:\n        result: a dictionary mapping each pair to its frequency\n    '''\n\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    for y, tweet in zip(ys, tweets):\n        for word in process_tweet(tweet):\n            # define the key, which is the word and label tuple\n            pair = (word,y)\n\n            # if the key exists in the dictionary, increment the count\n            if pair in result:\n                result[pair] += 1\n\n            # else, if the key is new, add it to the dictionary and set the count to 1\n            else:\n                result[pair] = 1\n    ### END CODE HERE ###\n\n    return result","f63ed7c6":"# Testing your function\n\n\nresult = {}\ntweets = ['i am afia', 'i am happy', 'i am sad', 'i am tired', 'i am tired']\nys = [1, 0, 0, 0, 0]\ncount_tweets(result, tweets, ys)","f8d6e8a8":"result = {}\ntweets = data[0:100]\nys = [1, 0, 0, 0, 0]\ncount_tweets(result, tweets, ys)","1844c2bd":"# Build the freqs dictionary for later uses\n\nfreqs = count_tweets({}, train_x, train_y)","d0d0d880":"# UNQ_C2 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef train_naive_bayes(freqs, train_x, train_y):\n    '''\n    Input:\n        freqs: dictionary from (word, label) to how often the word appears\n        train_x: a list of tweets\n        train_y: a list of labels correponding to the tweets (0,1)\n    Output:\n        logprior: the log prior. (equation 3 above)\n        loglikelihood: the log likelihood of you Naive bayes equation. (equation 6 above)\n    '''\n    loglikelihood = {}\n    logprior = 0\n\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n\n    # calculate V, the number of unique words in the vocabulary\n    vocab = set([pair[0] for pair in freqs.keys()])\n    V = len(vocab)\n\n    # calculate N_pos and N_neg\n    N_pos = N_neg = 0\n    for pair in freqs.keys():\n        # if the label is positive (greater than zero)\n        if pair[1] > 0:\n\n            # Increment the number of positive words by the count for this (word, label) pair\n            N_pos += freqs[pair]\n\n        # else, the label is negative\n        else:\n\n            # increment the number of negative words by the count for this (word,label) pair\n            N_neg += freqs[pair]\n\n    # Calculate D, the number of documents\n    D = len(train_y)\n\n    # Calculate D_pos, the number of positive documents (*hint: use sum(<np_array>))\n    D_pos = (len(list(filter(lambda x: x > 0, train_y))))\n\n    # Calculate D_neg, the number of negative documents (*hint: compute using D and D_pos)\n    D_neg = (len(list(filter(lambda x: x <= 0, train_y))))\n\n    # Calculate logprior\n    logprior = np.log(D_pos) - np.log(D_neg)\n\n    # For each word in the vocabulary...\n    for word in vocab:\n        # get the positive and negative frequency of the word\n        freq_pos = lookup(freqs,word,1)\n        freq_neg = lookup(freqs,word,0)\n\n        # calculate the probability that each word is positive, and negative\n        p_w_pos = (freq_pos + 1) \/ (N_pos + V)\n        p_w_neg = (freq_neg + 1) \/ (N_neg + V)\n\n        # calculate the log likelihood of the word\n        loglikelihood[word] = np.log(p_w_pos\/p_w_neg)\n\n    ### END CODE HERE ###\n\n    return logprior, loglikelihood\n","13cc4761":"# UNQ_C3 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\nlogprior, loglikelihood = train_naive_bayes(freqs, train_x, train_y)\nprint(logprior)\nprint(len(loglikelihood))","2c656c50":"# UNQ_C4 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef naive_bayes_predict(tweet, logprior, loglikelihood):\n    '''\n    Input:\n        tweet: a string\n        logprior: a number\n        loglikelihood: a dictionary of words mapping to numbers\n    Output:\n        p: the sum of all the logliklihoods of each word in the tweet (if found in the dictionary) + logprior (a number)\n\n    '''\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # process the tweet to get a list of words\n    word_l = process_tweet(tweet)\n\n    # initialize probability to zero\n    p = 0\n\n    # add the logprior\n    p += logprior\n\n    for word in word_l:\n\n        # check if the word exists in the loglikelihood dictionary\n        if word in loglikelihood:\n            # add the log likelihood of that word to the probability\n            p += loglikelihood[word]\n\n    ### END CODE HERE ###\n\n    return p\n","b8129c3a":"# UNQ_C5 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\n# Experiment with your own tweet.\nmy_tweet = 'our pm is not good at all.'\np = naive_bayes_predict(my_tweet, logprior, loglikelihood)\nprint('The expected output is', p)","99b23e11":"# UNQ_C6 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef test_naive_bayes(test_x, test_y, logprior, loglikelihood):\n    \"\"\"\n    Input:\n        test_x: A list of tweets\n        test_y: the corresponding labels for the list of tweets\n        logprior: the logprior\n        loglikelihood: a dictionary with the loglikelihoods for each word\n    Output:\n        accuracy: (# of tweets classified correctly)\/(total # of tweets)\n    \"\"\"\n    accuracy = 0  # return this properly\n\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    y_hats = []\n    for tweet in test_x:\n        # if the prediction is > 0\n        if naive_bayes_predict(tweet, logprior, loglikelihood) > 0:\n            # the predicted class is 1\n            y_hat_i = 1\n        else:\n            # otherwise the predicted class is 0\n            y_hat_i = 0\n\n        # append the predicted class to the list y_hats\n        y_hats.append(y_hat_i)\n\n    # error is the average of the absolute values of the differences between y_hats and test_y\n    error = np.mean(np.absolute(y_hats-test_y))\n\n    # Accuracy is 1 minus the error\n    accuracy = 1-error\n\n    ### END CODE HERE ###\n\n    return accuracy\n","b3fac836":"print(\"Naive Bayes accuracy = %0.4f\" %\n      (test_naive_bayes(test_x, test_y, logprior, loglikelihood)))","55120edd":"# UNQ_C7 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\n# Run this cell to test your function\nfor tweet in ['I am happy', 'I am bad', 'this movie should have been great.', 'great', 'great great', 'great great great', 'great great great great']:\n    # print( '%s -> %f' % (tweet, naive_bayes_predict(tweet, logprior, loglikelihood)))\n    p = naive_bayes_predict(tweet, logprior, loglikelihood)\n#     print(f'{tweet} -> {p:.2f} ({p_category})')\n    print(f'{tweet} -> {p:.2f}')","abee03c3":"# Feel free to check the sentiment of your own tweet below\nmy_tweet = 'you are bad :('\nnaive_bayes_predict(my_tweet, logprior, loglikelihood)","00d50297":"# UNQ_C8 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef get_ratio(freqs, word):\n    '''\n    Input:\n        freqs: dictionary containing the words\n        word: string to lookup\n\n    Output: a dictionary with keys 'positive', 'negative', and 'ratio'.\n        Example: {'positive': 10, 'negative': 20, 'ratio': 0.5}\n    '''\n    pos_neg_ratio = {'positive': 0, 'negative': 0, 'ratio': 0.0}\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # use lookup() to find positive counts for the word (denoted by the integer 1)\n    pos_neg_ratio['positive'] = lookup(freqs,word,1)\n\n    # use lookup() to find negative counts for the word (denoted by integer 0)\n    pos_neg_ratio['negative'] = lookup(freqs,word,0)\n\n    # calculate the ratio of positive to negative counts for the word\n    pos_neg_ratio['ratio'] = (pos_neg_ratio['positive'] + 1)\/(pos_neg_ratio['negative'] + 1)\n    ### END CODE HERE ###\n    return pos_neg_ratio\n","9f31fcce":"get_ratio(freqs, 'happi')","2059a43a":"# UNQ_C9 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef get_words_by_threshold(freqs, label, threshold):\n    '''\n    Input:\n        freqs: dictionary of words\n        label: 1 for positive, 0 for negative\n        threshold: ratio that will be used as the cutoff for including a word in the returned dictionary\n    Output:\n        word_set: dictionary containing the word and information on its positive count, negative count, and ratio of positive to negative counts.\n        example of a key value pair:\n        {'happi':\n            {'positive': 10, 'negative': 20, 'ratio': 0.5}\n        }\n    '''\n    word_list = {}\n\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    for key in freqs.keys():\n        word, _ = key\n\n        # get the positive\/negative ratio for a word\n        pos_neg_ratio = get_ratio(freqs, word)\n\n        # if the label is 1 and the ratio is greater than or equal to the threshold...\n        if label == 1 and pos_neg_ratio['ratio'] >= threshold:\n\n            # Add the pos_neg_ratio to the dictionary\n            word_list[word] = pos_neg_ratio\n\n        # If the label is 0 and the pos_neg_ratio is less than or equal to the threshold...\n        elif label == 0 and pos_neg_ratio['ratio'] <= threshold:\n\n            # Add the pos_neg_ratio to the dictionary\n            word_list[word] = pos_neg_ratio\n\n        # otherwise, do not include this word in the list (do nothing)\n\n    ### END CODE HERE ###\n    return word_list\n","5953fc4b":"# Test your function: find negative words at or below a threshold\nget_words_by_threshold(freqs, label=0, threshold=0.05)","64592a8b":"# Test your function; find positive words at or above a threshold\nget_words_by_threshold(freqs, label=1, threshold=10)","10fbd60d":"# Some error analysis done for you\nprint('Truth Predicted Tweet')\nfor x, y in zip(test_x, test_y):\n    y_hat = naive_bayes_predict(x, logprior, loglikelihood)\n    if y != (np.sign(y_hat) > 0):\n        print('%d\\t%0.2f\\t%s' % (y, np.sign(y_hat) > 0, ' '.join(\n            process_tweet(x)).encode('ascii', 'ignore')))","47784306":"# Test with your own tweet - feel free to modify `my_tweet`\nmy_tweet = 'i am happy'\n\np = naive_bayes_predict(my_tweet, logprior, loglikelihood)\nprint(p)\nif p > 0:\n    print('Positive sentiment')\nelse: \n    print('Negative sentiment')","13861998":"# Threshold","6cbbf781":"# Count Function","9a116c3e":"# naive_bayes_prediction","c604cbe8":"# Naive Bayes accuracy","6f73f414":"# Testing Function-Negative words","dcd30b58":"# Import dataset","7ed6df93":"# Ratio Function","5355c9b5":"# Sets of positive and negative tweets","988cfb77":"# Import Libraries","ec987ff8":"# Testing Count Function","bcb4a7a9":"# Checking Tweet Sentiment","4f72967d":"# Error Analysis","bcf9c567":"# Custom Tweets","00b866f0":"# Download Stopwords","87cf7ae0":"# Checking with my own tweet","07e412f7":"# test_naive_bayes","3f1fcbdf":"# Testing Sentiment","a7b5c2d9":"# Testing Function-Positive  words","a8a5d4e4":"# Training Naive-Bayes Model"}}