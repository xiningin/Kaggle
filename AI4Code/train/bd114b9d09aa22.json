{"cell_type":{"9d293dce":"code","29b2fb62":"code","030749f9":"code","1290124e":"code","88fba709":"code","24bcfb0a":"code","e6f0bdbf":"code","1e5f51b8":"code","8e0a4205":"code","38b1734f":"code","5932dea4":"code","40c74f5d":"code","bccb57fd":"code","6ea79ff4":"code","cc40dde2":"code","d0a132d5":"code","e7f4da7d":"code","ac95a097":"code","8e030c9f":"code","3e7c9530":"code","c1df780b":"code","dd1be3e0":"code","8d752a1e":"code","25abebab":"code","7a7651f6":"code","0c1efdf8":"code","7f3bffa5":"code","d6636f27":"code","1948ab61":"code","2e91f982":"code","510f7b55":"code","cd8bd51c":"code","21b6b351":"code","c840bc08":"code","5f0159d3":"code","ad9cfd48":"code","9fdb308f":"code","80aba83c":"code","d7054d26":"code","422f7927":"code","ae927120":"code","13b02e5c":"code","e83ba3ac":"code","1adb1a30":"code","f23f4222":"code","c59fcf2e":"code","a69d983c":"code","5a3910f7":"code","1be54d99":"code","76782438":"code","924e81c6":"code","68272c15":"code","472de233":"code","9bb2c791":"code","d3d5e28a":"code","b27ec85d":"code","7b104321":"code","f09f00b8":"code","c02e6a6b":"markdown","be90ab26":"markdown","ac3e69ab":"markdown","53b87745":"markdown","c8962ba6":"markdown","8c61c643":"markdown","18cb9701":"markdown","3e74d499":"markdown","0750520a":"markdown","88111dfc":"markdown","63de35f4":"markdown","39f4c174":"markdown","62dc7efb":"markdown","03245013":"markdown","2d94ad7c":"markdown","6be00a7a":"markdown","3790c56f":"markdown","04c5921b":"markdown","5cf07b69":"markdown","ca71efbc":"markdown","3b3f9958":"markdown","bb8a8f54":"markdown","3ef80830":"markdown","371050b2":"markdown","0a6adbf1":"markdown","c462a088":"markdown","b22e08b2":"markdown","402e119b":"markdown","afcb4e6c":"markdown","10698660":"markdown","cdb35c82":"markdown","ff4f3157":"markdown","12ca9d8e":"markdown","266a543a":"markdown","537205bd":"markdown","cf7654dc":"markdown","f4d65204":"markdown","245e902d":"markdown"},"source":{"9d293dce":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport copy\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import metrics\nimport plotly\n# Importing packages for SMOTE\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import BorderlineSMOTE\nfrom imblearn.combine import SMOTEENN\nplotly.offline.init_notebook_mode (connected = True)","29b2fb62":"data=pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')","030749f9":"data.drop(columns=data.columns[-2:],inplace=True)","1290124e":"data.head()","88fba709":"data.info()","24bcfb0a":"data.isna().sum()","e6f0bdbf":"data.drop('CLIENTNUM',axis=1,inplace=True)","1e5f51b8":"# Making a copy of the data to not make changes in the original file\ndf=copy.deepcopy(data)","8e0a4205":"# Finding all the categorical columns from the data\ncategorical=df.select_dtypes(exclude=['int64','float64']).columns","38b1734f":"categorical","5932dea4":"for i in categorical:\n    df[i]=pd.factorize(df[i])[0]","40c74f5d":"x=list(df.corr().columns)\ny=list(df.corr().index)\nvalues=np.array(df.corr().values)\nfig = go.Figure(data=go.Heatmap(\n    z=values,\n    x=x,\n    y=y,\n                   \n    \n                   hoverongaps = False))\nfig.show()","bccb57fd":"X=df.drop('Attrition_Flag',axis=1).values\ny=df['Attrition_Flag'].values","6ea79ff4":"X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=20,shuffle=True)","cc40dde2":"rf=RandomForestClassifier()","d0a132d5":"rf.fit(X_train,y_train)","e7f4da7d":"print('the accuracy of the model is:',accuracy_score(y_test,rf.predict(X_test))*100,'%')","ac95a097":"cf=metrics.confusion_matrix(y_test,rf.predict(X_test), labels=[1,0])\nsns.heatmap(cf,annot=True)","8e030c9f":"print(metrics.classification_report(y_test,rf.predict(X_test), labels=[1,0]))\nprint('Accuracy_Score:',accuracy_score(y_test,rf.predict(X_test))*100,'%')\nprint('Recall:',metrics.recall_score(y_test,rf.predict(X_test))*100,'%')","3e7c9530":"xgb=XGBClassifier()","c1df780b":"xgb.fit(X_train,y_train)","dd1be3e0":"print('The accuracy score using the XGBClassifier is :',accuracy_score(y_test,xgb.predict(X_test))*100,'%')","8d752a1e":"cf=metrics.confusion_matrix(y_test,xgb.predict(X_test), labels=[1,0])\nsns.heatmap(cf,annot=True)","25abebab":"# Now let's have a look at the report\nprint(metrics.classification_report(y_test,xgb.predict(X_test), labels=[1,0]))\nprint('Accuracy_Score:',accuracy_score(y_test,xgb.predict(X_test))*100,'%')\nprint('Recall:',metrics.recall_score(y_test,xgb.predict(X_test))*100,'%')","7a7651f6":"lgbm=LGBMClassifier()","0c1efdf8":"lgbm.fit(X_train,y_train)","7f3bffa5":"print('The accuracy score of the LGBMClassifier is ',accuracy_score(y_test,lgbm.predict(X_test))*100,'%')","d6636f27":"cf=metrics.confusion_matrix(y_test,lgbm.predict(X_test), labels=[1,0])\nsns.heatmap(cf,annot=True)","1948ab61":"# Making the Report of the model\n# Now let's have a look at the report\nprint(metrics.classification_report(y_test,lgbm.predict(X_test), labels=[1,0]))\nprint('Accuracy_Score:',accuracy_score(y_test,lgbm.predict(X_test))*100,'%')\nprint('Recall:',metrics.recall_score(y_test,lgbm.predict(X_test))*100,'%')\n","2e91f982":"# Before\none_count=0\nzero_count=0\nfor i in y:\n    if i==1:\n        one_count+=1\n    else:\n        zero_count+=1\nprint('The number of 0 are:',zero_count)\nprint('The number of 1 are:',one_count)","510f7b55":"X_train2, X_test2, y_train2, y_test2 = train_test_split( X, y, test_size=0.2, random_state=20,shuffle=True)","cd8bd51c":"# Trying out oversampling\noversample = SMOTE()\nX_train2, y_train2 = oversample.fit_resample(X_train2, y_train2)","21b6b351":"# After\none_count=0\nzero_count=0\nfor i in y_train:\n    if i==1:\n        one_count+=1\n    else:\n        zero_count+=1\nprint('The number of 0 are:',zero_count)\nprint('The number of 1 are:',one_count)","c840bc08":"lgbm2=LGBMClassifier()","5f0159d3":"lgbm2.fit(X_train2,y_train2)","ad9cfd48":"print('The accuracy score of the model is :',accuracy_score(y_test2,lgbm2.predict(X_test2))*100,'%')","9fdb308f":"cf=metrics.confusion_matrix(y_test2,lgbm2.predict(X_test2), labels=[1,0])\nsns.heatmap(cf,annot=True)","80aba83c":"# Making the Report of the model\n# Now let's have a look at the report\nprint(metrics.classification_report(y_test2,lgbm2.predict(X_test2), labels=[1,0]))\nprint('Accuracy_Score:',accuracy_score(y_test2,lgbm2.predict(X_test2))*100,'%')\nprint('Recall:',metrics.recall_score(y_test2,lgbm2.predict(X_test2))*100,'%')\n","d7054d26":"X_train3, X_test3, y_train3, y_test3 = train_test_split( X, y, test_size=0.2, random_state=21)","422f7927":"lgbm3=LGBMClassifier()","ae927120":"# Before\none_count=0\nzero_count=0\nfor i in y_train3:\n    if i==1:\n        one_count+=1\n    else:\n        zero_count+=1\nprint('The number of 0 are:',zero_count)\nprint('The number of 1 are:',one_count)","13b02e5c":"sme = SMOTEENN(random_state=21)","e83ba3ac":"X_train3,y_train3=sme.fit_resample(X_train3,y_train3)","1adb1a30":"# After\none_count=0\nzero_count=0\nfor i in y_train3:\n    if i==1:\n        one_count+=1\n    else:\n        zero_count+=1\nprint('The number of 0 are:',zero_count)\nprint('The number of 1 are:',one_count)","f23f4222":"lgbm3.fit(X_train3,y_train3)","c59fcf2e":"print('the accuracy score using this is :',accuracy_score(y_test3,lgbm3.predict(X_test3))*100,'%')","a69d983c":"cf=metrics.confusion_matrix(y_test3,lgbm3.predict(X_test3), labels=[1,0])\nsns.heatmap(cf,annot=True)","5a3910f7":"# Making the Report of the model\n# Now let's have a look at the report\nprint(metrics.classification_report(y_test3,lgbm3.predict(X_test3), labels=[1,0]))\nprint('Accuracy_Score:',accuracy_score(y_test3,lgbm3.predict(X_test3))*100,'%')\nprint('Recall:',metrics.recall_score(y_test3,lgbm3.predict(X_test3))*100,'%')\n","1be54d99":"over = BorderlineSMOTE(sampling_strategy=0.3)\nunder = RandomUnderSampler(sampling_strategy=0.6)\nsteps = [('o', over), ('u', under)]","76782438":"X_train3, X_test3, y_train3, y_test3 = train_test_split( X, y, test_size=0.2, random_state=21)","924e81c6":"# Before\none_count=0\nzero_count=0\nfor i in y_train3:\n    if i==1:\n        one_count+=1\n    else:\n        zero_count+=1\nprint('The number of 0 are:',zero_count)\nprint('The number of 1 are:',one_count)","68272c15":"pipeline = Pipeline(steps=steps)\n# transform the dataset\nX_train3, y_train3 = pipeline.fit_resample(X_train3,y_train3)","472de233":"# After\none_count=0\nzero_count=0\nfor i in y_train3:\n    if i==1:\n        one_count+=1\n    else:\n        zero_count+=1\nprint('The number of 0 are:',zero_count)\nprint('The number of 1 are:',one_count)","9bb2c791":"lgbm3=LGBMClassifier()","d3d5e28a":"lgbm3.fit(X_train3,y_train3)","b27ec85d":"print('The accuracy score of this model is :',accuracy_score(y_test3,lgbm3.predict(X_test3))*100,'%')","7b104321":"cf=metrics.confusion_matrix(y_test3,lgbm3.predict(X_test3), labels=[1,0])\nsns.heatmap(cf,annot=True)","f09f00b8":"# Making the Report of the model\n# Now let's have a look at the report\nprint(metrics.classification_report(y_test3,lgbm3.predict(X_test3), labels=[1,0]))\nprint('Accuracy_Score:',accuracy_score(y_test3,lgbm3.predict(X_test3))*100,'%')\nprint('Recall:',metrics.recall_score(y_test3,lgbm3.predict(X_test3))*100,'%')","c02e6a6b":"# Hope you liked the file :) ","be90ab26":"# Let's make a pipeline using Borderline SMOTE and RandomUnderSampling\n","ac3e69ab":"# Trying out Random Forest Classifier","53b87745":"# Let's try SMOTEEN Now ","c8962ba6":"# So the best results were using Pipeline of Over and Undersampling giving better accuracy and recall results :)","8c61c643":"A manager at the bank is disturbed with more and more customers leaving their credit card services. So let's predict who is gonna get churned so they can proactively go to the customer to provide them better services and turn customers' decisions in the opposite direction","18cb9701":"# Train Test Split","3e74d499":"# Having  First look at the data","0750520a":"## Confusion Matrix","88111dfc":"# Trying out LGBMClassifier on the oversampled data","63de35f4":"## Making a confusion matrix","39f4c174":"# Since the number of churned customers are less we need to increase it by oversampling","62dc7efb":"# Confusion Matrix\n\n","03245013":"# Churning Customers\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxESEBUSERMWFRIVEBIQFRUVEhESGBUSFRgWFxYWGBcYHSggGRsmGxYWITEhJSkrLi4uFx8zODMtNyg5LisBCgoKDg0OGxAQGy4mICYuLS8wLy0uLS0tLy4tMi8wLS0tLS0vLS0tLy4tLS0tLS0tLS8tLy0vLS8tLS0tLS0tLf\/AABEIAJ8BPgMBEQACEQEDEQH\/xAAbAAEAAgMBAQAAAAAAAAAAAAAAAwUBBAYCB\/\/EAD8QAAIBAgMEBwYEBgEDBQAAAAECAAMRBBIhBQYxQRMzUXGBkbEiMmFzobJCcsHRFCNSguHwYlOSogcVJIPC\/8QAGwEBAAIDAQEAAAAAAAAAAAAAAAMEAgUGAQf\/xAA8EQACAQIBCAgGAQIFBQAAAAAAAQIDEQQFEiExQVFxsRMyNHKBkaHRIjNhweHwFEJSI4KSwvEGFSRTYv\/aAAwDAQACEQMRAD8AgqUVPED\/AH4zanztTktTIHwCngSPG4+sEqxElrNd8A3Ig\/SCRYiO0geg44g+vpBKqkXqZHeemYvAF4AvAF4AvAF4AvAF4AvAF4AvAF4AvAF4AvAF4AvAF4AvAF4AvAF4AvAF4AvAF4AvAF4AvAF4AvAF4AvAF4Bd7ode3yW+5JDW6pdwPzHw9j2ZKc+YgCAZgHh6SniAfCD1SktTNd8Ah4XHjf1glVeS1kD7ObkQfpBKsQtqNd8O44qfDX0npKqkHqZFBmIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAXm6HXt8lvuSRVuqXcD8x8PY9mSHPmIAgCAIAgCAIB5emp4gHvEHqk1qZA+AQ8LjuP7wSqvNGu+zjyYHv0gkWIW1ED4Vx+E+GvpBKqsHtIZ6SCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIBebode3yW+5JFW6pdwPzHw9j2ZIc+YgCAIAgCAIAgCAIAgCAYdAeIB7xeD1NrUa74FDyI7j+8EirzRA+zjybzFvSCVYhbUQPhHH4b92sEqqwe0gM9JBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBALzdDr2+S33JIq3VLuB+Y+HsezJDnzEAQBAEAQBAEAQBAEAQBAEAQBAMMoPEX79YCbWogfBIeVu4\/6IJVWmtpA+zuxvMfqIJFid6Nd8G45X7tf8wSqtB7SFhbjp36T0kTvqMQeiAIAgCAIBsDA1shfoqmQC5bo3ygdpa1hMc6Oq5J0NS18124Gx\/wCy4i7A0ypWl07B2RCKXDP7RGn+J50kTP8AjVNVtl\/A9JsgmiaxrUQgyixdmbMwZlUqimzEI3G3CeZ+m1merD\/BnuSsb2H3epmmHq4nJ7FCowWiz5VrmyEkso0PG3CYuq72S\/UTxwcc28pbtm8pMVRyVHQm+R2S455SRf6SVO6uUpxzZOO4iE9MUrm\/V2TVWmHcZQbkA8bAX4cvGax5Ww\/TqjF5zbtdar8fa5t45FxPQSrztFJXs9bS+nvY0JszUCAIAgCAXm6HXt8lvuSRVuqXcD8x8PY9mSHPmIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAYA8de+AnbUQPg0PK3dp\/iCRVpraQPs7+lvMfqIJVid6Nd8E45X7jBKq0GQMpHEEd4tPSRNPUYg9MqxBBBsQbgg2II4EGeBNp3R3e08PiHQEisjvg6LVK1WoSllw7rVp5HAyszBddTc3051IuKfibqpGpKO27Su3q1aV4mhQZGwdPDVa9NWqUnqCr0lJuiVGVqeGqZbvlJu9uRK2BykTN3U85L93kKs6Kpykrta9GjcntKzZv8P\/AA1WnVrhTUekygUqtQqaRcXOgXVXNva562kks7OTSK9Lo+jlGUtdtj2HjY+JoinWSqKzGqi0wtMJoFdKgOZjoboRbLwMVLqz0LiMO4uMotSbejQQ4HYteq1ghUc2cFQB48fCVMTlTDUI3ck3uWl\/jxJ8LkjFYidlBpb3oX58DrNl7FpUdVGeoB77DQH\/AIjl\/us5LHZWr4r4erHcvu9vL6HZYDI9DCfElnS3v7buf1Id6uqXuf0EhyZ2qn3kWcpdkq92XI4ifQz5iIAgCAIBebode3yW+5JFW6pdwPzHw9j2ZIc+YgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCACIBC+EQ\/ht3aekEiqzW0jpbKDOqhiLsBqAeJt8JFWqdHTlO2pN+SLeFn01aFKX9TSvxdi7wm6tJxnuxFyNWVfdJB4Keztmpw+KxuJpqpBQin3m\/sjqMRgcDhqjp1HOTXBLT6lhS3WoD8I8ekb\/wDQH0kvQ42XWr2X0gubuRqpgY9WhfjJ8jcpbEorwVR3U6fqQTMf+3uXXrVH\/msvJJGSx8Y9SjTX+W75m0uDQf1eDMv22niyThL3cbv6tv7mTytitSlbgl7Hh11y8tdLk9nHt4zk8fCNPEzjFWSZ1mAnKphoSk7toy3A90plwo96uqX8r+gl\/JnaqfeRRyl2Sr3ZcjiJ9DPmIgCAIAgF5uh17fJb7kkVbql3A\/MfD2PZkhz5iAIAgCAIAgCAIAgCAam1ccKFIva5uFUcLsb8T2WB8phOearlrB4Z4irmXstb4E2CXEmklWthzTp1EV6dTPTZXDi6+zmzqSLkXHLjMKdXPdizj8m\/xoqaldPz\/fIlkxrBAEAQBAEAQBAEAQBAEAQCfA9an519RK2M7PU7suTLmTu10u\/Hmjq9j9V\/fU+9pr8k9kh482dZljtkvDkjfpUyxAHEzYt2NdGLk7IsG2YLCza87jSR55O6CtoZX1EKkg8QbSRO5XaadmadT3\/A\/pOEyn2upx+x3eTey0+Abge4yiXij3q6pfyv6CX8mdqp95FHKXZKvdlyOIn0M+YiAIAgCAXm6HXt8lvuSRVuqXcD8x8PY9mSHPmIAgCAIBqbD2FiMbjKpNWpSoUhUUNTIJNREV1pinqWJDZuBva0pVaklJ6Tq8n4OjLDRzop3V3dFnj8GaNV6TEsUYpmIALAcGsOFxY2+MtQlnRTOcxdLoq0oLUm\/LYa8zK54augYKWUMeClgCe4cZ5dXsZqlNxzlF2320HuemAgEmHwdCrVpDEV6dCmlenWL1cmVjTbN0ftED2hca8r6GQYjqG2yKr4nwf2On3ux9HoqdHDvRq0bLlanUzlBSFlUhTlHvvrzBA\/DrFho6WzYZdrWhGnv0+X6zlJcOZEArcDicTicW+HwtNHNNGdg79GcqEKzZibAZmAFxK067jKxvcNkeNWipOTTav9Pp+3LSpTZWKuMrKSrC4NmGhFxx1lhO6uaWpB05uD2O3kR1icrWNjlNiRcA20JHOHqPKaTmr6ro091cNtDF2PRr0KojNUcdGWFQsqFNfbJZSNBbTlKsa7vpOkrZFpOMnTuns3cN\/qb0tnMiAaW6uGx2O6SpS6JaSNTGWr0i5hULgBGRTc3S1zpc2+Ap\/yHc6eWRaXR2V85bd74G7LhzAgCAIBPgetT86+olbGdnqd2XJlzJ3a6XfjzR1ex+q\/vqfe01+SeyQ8ebOsyx2yXhyRugzYmsPXSt\/UfMxZGWdLeeZ6YmrU9\/wP6Tg8p9rqcfsd5k3stPgG4HuMol4o96uqX8r+gl\/JnaqfeRRyl2Sr3ZcjiJ9DPmIgCAIAgF5uh17fJb7kkVbql3A\/MfD2PZkhz5iAIAgAmAk27I3d3v8A1AwlG+FGDOZ6oDVqdRQalQEBajXAItYW1NrTXVNMmzucBBwowptWdvyalRyxuxJPMk3M2CVjh5Scndu7MT0xKncnYKYzGYmpiLGjQSq9TNchnfOlMGxBsLM2hB\/li0107uTO5wyhCjG+hJLkXmNCCq4pG9PO2Qm98l\/ZvfXhL8b20nF1lBVJdH1b6OBS7ZxtRSlKjbpah4mxyqOJ1\/zopmFSTVox1suYHD05KVWt1I+r3fu9FBtfZ1VXQM5q1HzdugFuZPDj2AWkMqUnJLW2bvA4qnUjLMjmxVvHy\/Jc7ruMjopuEYa\/1Eg3I+Fxp8BfnJ6bVs1al6\/uw1mWIvPjJ7UzosPgatRXdELLTXM5H4V11PkfKZOSTszWU6FSpGUoK6Ws1ibC50A1JOlhMiJJt2R0m52N2ZRoVAuMovXrPUqNTqFVH8wUw9EDQsGFNRfXXUDkddU0ybO5wadPDRT1pfYosZiTVqNUYAM7FjYEC542EvxVlY4qtVdWbm9bNLF4unSXNUYKOXMn4AcTEpKK0mVHD1K0s2mr\/u1l7s\/eJRs7DLg1FNclRWIBFRHR3BW4aw0cnn1lxaVqUIyk2b7H4zEYelCnfS1pe3w9yols5s81ayoMzEKBzJsJ42lpZlCnKo82Ku\/odFsDefZdHCDC4HE1TXVHK58NXJY3qVMpJphQqs7FdRY246g61WzlfedzWnKGHk4vSot+S1lAxub\/AOJsjhW23cxPTwQBAJ8D1qfnX1ErYzs9Tuy5MuZO7XS78eaO43exSDDhWBP8yqeAI6xu0zV5Ki\/4sGvrzZ2mVakViZRf05I91ipY5RYcgZtVe2k00rX0HiemIgGrU9\/wP6Tg8p9rqcfsd5k3stPgG4HuMol4o96uqX8r+gl\/JnaqfeRRyl2Sr3ZcjiJ9DPmIgCAIAgF5uh17fJb7kkVbql3A\/MfD2PZkhz5iAIAgGhtckKDrkB9oDiez\/e20gr3stxuMj5rnJJfHb4f39Zyao1CqmcgN7LOBqUVj7SnsYryGtmtKkWrnT4mlUpRlD+pxejarpqz3Nr0Z2e7+3Kn8TTrJQVqCMSelNukGUgZBY2IJBB1GnKW25VFZaEcvClRwMlKo86a\/pWpcW\/8AkxtfalSpXcUqQLt\/MaxFNEDk2535Hh5zK7Xwx0kKpwqXxFaSim3oSve301eZW7q7QyLWwbgXNcV1YC\/t0w1N1JOpFiCOzK39Ugo6J2NrlRqphFJarp+a\/Jf47GYYqjUc9sop1MwJvXDFGCAC5FxpLEZOzct5p6+Hi5whRTvmpvTtavyNbEbCrYbF1TicvSkLkCvnC0D7p7QSQb6cVPbMKTUm5FjKEZUKcMPbRa7e9v2\/dRzW82PPSNSUAWVVdubAjNl+C66jnPK1bRmRVt72v6cPptNjkqglRU3tu\/tf0POwcHiGVjTqCmjGxawLEr2Dlx43EwpRk1odjHKOIw8JJVI50lqWzTv8tzOo2RTbDrUWnVqfzQoqlqjHOFva\/wD3HvvreTxpRWk09bKFapFwVox3LQjnEpVcVnNapkSkzBqajhl1PHTkdTfgZDZ1L5z1G0c6WCzI0YXlJKzf1\/dSsV2DvRVcQ1wxv0K8CeIap+UagdrfAGUnLOlmrZr9uP2OgUM2Gc9t0vHRfhzZ3Jm3PnpS4vZbGo5SmaxrKaa2BepTqMCFCj+gk201XulecbXf6jdYTEOqoUk81xa0LQpK+368dD4njdQ9BXahiUqC1dBUpKPbQDSoxvootl152FrzClJpNLWXcpUYynCVTRFXv6WS3vh42LvatZVFV6QIRVqOgY3NgCVDW7pYu1G7NDGEKldRjdRckvrZs5kYBq1I4nEVCQEd1QC1gt\/AXtyHjIMxyjnSZuXioUKqw1CCWlJvjbz8X4Ghg1NKg1fg7OKFE9hFmquO5cqf\/aZr5Szq0YLZ8T\/2rz0+B0GYuilKW34V\/u9NHidrs3epqlFsGiL0bqmJZ\/xK9wDT+i6\/AjnpsotSqJ\/Q5etCeHwcqUts7ati2+hmWDTCAIBPgetT86+olbGdnqd2XJlzJ3a6XfjzR1ex+q\/vqfe01+SeyQ8ebOsyx2yXhyRuzZGsEA3MLgMwzE2B4fvI5TsTwo5yuysxCZahHZcek4fKTviqnH7HbZPVsNTX0PD8D3GUS6U299ErTUHmjtp2Wm2weHnRxdJT2uL9TWY2rGphK2bsjJehws7w+bCAIAgCAXm6HXt8lvuSRVuqXcD8x8PY9mSHPmIAgCAaO28Y1KizqbPdVU2BsSRrY87XPhIq3UZtMjSnDGRnDWrv0a+5yOy1z4inm9q9UE31vrc3vxlWCvJHQY2clRnK+mz07bneS+cWRJgKoqNXKEUnSnTV+RdDULL3gMv+g2jXXfgXKif8SDtozpco\/k5r+Fc4us1I+3TbpFGlmLEXXxBaQZrz21sNx01NYSlCr1ZKz+ltvnYh2S5chUcB1Uvd3WncrqbFiAW1Jtx4xGcUiathZym3ZfjcWVDa9WpXV3bpXcpSLMczZL\/1fAXOv9Mki0noKGIoucJZ7ei8tN9dtGvy8TncfWz1XftdiO6+n0tK0ndtm7w9Po6UYbkvydXuwP8A4y\/FnP1I\/SWqPUObys\/\/ACXwXItZMa01aOxqt8XiVoirh1w4qVl6RUJIzXFuNsodjYdvEyniM5Zyi7X28\/Q6TJajXjTc1fo5PR9LXXql4I42tUqYmtc2Lv7IAsqqoGiqOCqALASvSpKKUIm4xGIterPZ6HSJhMYws1daYtb2EVz5sBrLyjUetnLyr4GLvGm5cXbl7F7vbt6pUpqVpqjrT6Kn0V0t\/wArk3GXiPj5zGS6OL+pLRqSxlaDaUVC2r0X79TQ2ZnNMPVJatUJqVHY3ZmPAsedhYfAACSUo2iiplKs6mIld6FoX7xJ8RhHrI1GmAalVTSQE2Bd\/ZW55C5E9qdVkWC7RT7y5mhvBgqmEwjUKoy1Up06bC4OrZb6jQ6GRNrojYU6cnlJqS2t+mj7FN\/E06uIw9KmD0FOmKQDC2ZmBaq5HazE+QmvwdKUZOVTXJ3fDUl4I3+U63+A+j0KK0cdd\/MtdhbKag1QsQbkBTfUqL6nsJuPKbKlTcW7nNZQx0cTGCjs18XYtpMawQBAJ8D1qfnX1ErYzs9Tuy5MuZO7XS78eaOr2P1X99T72mvyT2SHjzZ1mWO2S8OSN2bI1ggGQ57T5meWPbs1Kze3c\/HXynC5S7XU4\/Y7vJvZafAzSrKGBNiBqRcGVaE1TqRnJXSeotVYucHGLs2Ve\/DAoljf+W543te5A8AQJvp1IVMdQlB6Ph5mmnCUMFXUt0uR8\/nXnACAIAgCAXm6HXt8lvuSRVuqXcD8x8PY9mSHPmIAgCAc9vhV9mmnazP5Cw+4yviHoSN5kSHxTnwX75IpcGTQrU3qKwAs9ralSNCPP9JBH4ZJs2tZLEUZwptbvE7ihWV1DIQVOoIl5NNXRyNSnKnJxmrNHraG0HTDkEkpTDVFQnTNb\/frMZWjeRNQz60oUG\/hv5bzld3ccgaqazauMxJ4G2Yt468PKV6U1d5xu8pYapKNNUVoi9mzVb98zUalhjo3S4d7D2WHSqPR\/EzG0Pqiyp4paY5tRb18L+8SfCUBQY1+kp1FVSECtcmowsoK200JJ7p7FZnxXuRVqksTHoM2UW9d1ostLs9uxIrqtBynTN7r1GF+1tSTbsvfyMjads4vRqU1PoY60lo3LYdpsZFGHp5eBQNxvq2rfUmXaaWarHJ46UpYiedrvbwWr0NyZlUpt6cdUSkER3VahZamVmUMgHuNbiDfgeNjK+I1I3eRF8c3fYv309TnNj1lSujObKCbmxNrqQOHxIkFNpSTZt8bTlUoShDW\/c7tHBAIIIIuCDcEdoMvJ3OOlFxdmrMr9r8V7m\/SQVtaN3kl\/BLiiXYS1ar9FTRqhsWAUXKgcSfh+pA52nlOpm6GSY3AdN8dNfFz\/JvI5UggkMCCCNCCOBHYZY1mgTcXdaGil30xDvTDMWYtVDMxu3AEC58R5SCsrRSRuckydTESnN3dtuvZ7HM7MrrTrI7e6rXNhfSx5SvB2kmzdYqnKpRlCOto7ujVV1DKQyngRqJfTT0o42dOVOWbJWZ7npiIAgE+B61Pzr6iVsZ2ep3ZcmXMndrpd+PNHV7H6r++p97TX5J7JDx5s6zLHbJeHJG7NkawQBANWqTm0+J9JweU+11OP2O8yb2SnwPLHtHoRKRdKXevqx3P6CXsmdqp95FLKXZKvdlyOIn0M+YiAIAgCAXm6HXt8lvuSRVuqXcD8x8PY9mSHPmIAgGYByir\/F4wnjSS3cUXgP7mue4nslT5lT6HRt\/wcEl\/U+b9l62LvbvRdAxqjMB7o4HOeGU8v2vJ6ts3SanJ\/S9OlSdt+622\/wC6zR3TwrqjOx9l7FV7vx+PoO6YUItK5cyxXhOahFaY639vD92lptQA0Kt\/+lU+0ySfVZrsI2sRBr+5czjMFsyrVIyIbHXMwKrbtvz8LynGDlqOrxGLpYdXm9O7a\/3fqPpG1NgUkwuGbM1ZKlMgtVVb9Khs3Dh8NSdOJliHxXjLYaHFxVHNxGHbip+jWz8HL192KRYFWZRfVfe07FJ1HjeHQV9BnTyzVjG0km9+rz3+FjY29hQcKyqABTCsoHILx\/8AG8yqx+DQQZOrtYpSk+tdPx\/NjO7VS+GT\/iXX\/wAiR9CIou8DzKsM3Ey+tn6FnJTXnM7zVmqVkoJqRY2\/5twv3Lr\/AHGVazzpKKOgyVTjSoyrz\/Uvd8izq7CotTVLWKqAHFg1+ZPI69v0kroxasa+GU68ajmnob1PV4bvAqt10qnEdFRJenc3AU2biFKrrZibcOIv2SGk2paHoNrlGEJ0U5R\/xHayWl32r6pH0LF7t0aVMvjalqvRt0eHRvazHgahA0Gnb48plJ9I1m6iCjBYGlLpWs5rRHbfZf8AfE97lotJ6tcKLUcO7j5h9lb9t9RPasVZRW1kWT605TnXqO+bF+ZRseZ7yTJzTXbZzO9GJzslGmcxvmNiDdz7Ki\/n5iVq0rtRR0GSaPRQlWqaOO5aW\/3cWg2LRNJabLfKLZxo1zqSD38jpJeijm2ZrnlGsqzqRevZsts\/51lNTovhMSiK5KVGW+lgQWy2I7RpqP8AEhSdOaV9ZtZVKeOwspuPxRT8LK+j6PcdVLZzYgCAT4HrU\/OvqJWxnZ6ndlyZcyd2ul3480dXsfqv76n3tNfknskPHmzrMsdsl4ckbs2RrBaAYgXNap7\/AIH9JwmU+11OP2O8yb2WnwDcD3GUC8Ue9XVL+V\/QS\/kztVPvIo5S7JV7suRxE+hnzEQBAEAQC83Q69vkt9ySKt1S7gfmPh7HsyQ58xAEAqd4sYVQUk1qVfZAHHLwPnw8T2SGrKystbNnkzDqc3Vn1Y6fH8a\/LebWycAKNMKNWOrHtb9hwEzpwzVYrYzFPEVM7ZsX0\/dZV7bBetaoCKVOm9VRa\/SsouwAB1PK2hsG7ZFU0y06l6mywDjToZ1PTOTSf\/zfQr6PXVe247DANhFpU+lWq9Xo06QIyU6fSWGZVBUtlBuBfsmS6RrYirN4CMnbOl4rT6XN6ntjCL7uAU\/GpWep9CtodOb\/AKjKGNw0OrQXi7\/Y0NtbTbE1jVYAXCgKDcKALWH1PjM4QzFYqYvEyxNV1HoN7AVOlwNagdWosMVT\/L7tUdwBv4zCSzZp79BaoS6bCTpPXH4lw2lFJjWGHUEEHgQQe46GePSexk4tSWtFHupdRVpHilXXv90\/ZIaGi6Nxli0nTqrU1+fuW+MxK0qbVG4KL954AeJsPGSylmq5q6FGVaoqcdv7cpt3MGzM2Jqe8xbL4+836D4XkNGLbz2bXKmIjCKw1PUrX+y+7+pNvJjsqiihAepoSTYKhNiSeV+HcDPa07KyMMk4XpJ9LLVHVx\/GvyOn2ZiEwVHocGAH1FTEkDpKrfiKf9NOQAubAXN55Cjo+LyMsVlS830KtszttvpuRpu5JJJJJNySbkntJk9rGnlJyd2bOPpsdmOiMVavjKVNirEFaVG1RjodDdl0PbIJpynZbDc4OccPhnOavnN2T1PNXucw+7KN79Wo3eVPqDPegT1sxWWZx6sIrzNjAbCpUnDgszAG2YrYX0voBra\/nMo0oxdyviMp1q8HBpJPdf3LSSmvKHehbGhU\/pqW+qsPtMr1taZuckO8atPevdfcvzLBpTEHogE+B61Pzr6iVsZ2ep3ZcmXMndrpd+PNG4dr1EBppYAM+trnVieenPsnMYTHVKdCMIW0X46zqMtyaxkvDkjUq4+s3Go\/\/cQPIaT2WJrS1yfnbkanOZrsSeOvfrIW3LWeGMomOajw6rZfVU\/l\/tNXX+Y+J9DyX2OnwRuNwPcZCbAo96uqX8r+gl\/JnaqfeRRyl2Sr3ZcjiJ9DPmIgCAIAgF5uh17fJb7kkVbql3A\/MfD2PZkhz5iAZAmLdiSFKU9VvNGkuzQMSa1r3p2BJJysNDYE81PLhZu2RaM\/ONk1VeFVG6VnvWlfh\/bcb2QyTPRT\/iT3rzMNT7bHW\/jGcmYOjOG1ea9xaZNpEUYSloirmcpnmfHeS\/xqv9rGUzzPiP4tb+02cBjmw79KE6SysGp5sudGUqy3seR004gTCo1JaGW8FCVGqpTi7anwejSaVGrmLXpsgDEDMyMSOR9kn9J7FzZhWjhabtG7801xul6EukytIhzsP\/a\/MrKezXWvUqpUAFQglTTzcAOeYW1v5zBQcW3ctyxVKrSjSzG83Vpt9mQ7fwtSo1NcrGiGzVMlix4iwXibDsv73wmNR5zS2FjJ9N0oznb49Svq8\/3V9S2p07AACwsLC1rDkLcu6S58TWSwtdttrTxRBiNno7B7WcaE6e0h0Kt2i3iOUwlmt3uWqLrUoODi2tevU963fc2ifhM9L2lZypRdpU\/VmLjsi0t550lH+z1Zr\/wyip0illJ95Q3svbgWXmw4A8QNOGk8zHe9ySWLi6XRZujWtOrgTyQpIzYdswznuJ1Spv8ArXkzOUdsZz3GfQU\/\/YvI0dsbO6ankDAHMrA2va2h+hMwmnNWsWsHOnhqmfnp6Gtv7rJ6COB7bhz2hMg8rmSRvtKVfos7\/C1cW+aRJMiAQDINtRxnjSasz2MnFqUXZoMxPHWR9DTtm5qtwRnKtUlLOlJt723cwSBx0+khlgcPLXBeGjkZRr1djImxCD8Q87yCWSqD1XXj73Jo16270I2xtPtJ7gf1tIJZHX9M\/Nf8E8a1TbH1Or2Hi0ekuRgSq2ZeBHh4d05fKGEqYeq1NaHqex\/u7WfRcjYinUwsIxaulpW1FkWuD3SgbYpN6uqX8r+gl7JnaqfeRSyl2Sr3ZcjiJ9DPmIgCAIAgF5uh17fJb7kkVbql3A\/MfD2PZkhz5iAIAg8EAQeiAZvPLHuc94vFke58t7F4seOTesxPTwQBAMwBAuIBiAIAgCAZg8PLOBxIHeQIMkm9RE2KQfiHhr6QZKlN7CNsenxPcP3gzWHmRttEcl8zaDNYbeyNtoNyAHmYMlh47yNsbUPPyAgzVGC2EbVmPFj5mDNQitSI56ZCAIB7o1WRgykqw4EGxmE6cakXGaunsZnTqzpSU4OzW46fZe8wNlxGh4Coo+4ftp8JzGOyA1eeG\/0v7P38zrMn\/wDUSdoYn\/UvuvbyNvedw1FSpBBV7EG4IsOc1GT4ShjIRkrNSWhm9x84zwdSUXdOL1cDip9BPmYgCAIAgF5uh17fJb7kkVbql3A\/MfD2PZkhz5iAIAgCAIAgCAIAgCAIAgCDw8NWUcWHmIM1CT1IjbGUx+LyBMGSozewjbaC8gT5D9YM1h5EbbR7F8z\/AIgyWG3sjbHv8B4H9TBmsPAjbFufxHwsPSDNUoLYRNUJ4knvJM9MlFLUjzBkIAgCAIAgCAIAgCAIAgEi1mAyhjl7L6a8dJFKjTnJTlFNrU7aV4k0MTWhBwjJqL1q+hkclIRAEAQBALzdDr2+S33JIq3VLuB+Y+HsezJDnzEAQBAEAQATbjAI2xCD8Q8wYMlTk9hG2Op9pPcD+sGaoTI22ivJT9BBmsPLayJtonko8STBksOtrI2xz9oHcP3gzVCBG2Jc\/iPgbekGSpwWwjYk8Tfv1npmklqMQeiAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgF5uh17fJb7kkVbql3A\/MfD2MVKqrxNvAyQ0SpylqRC2OT4nuH7wZrDzI22h2KfEgQZrDPayNse\/IAeZgzWGjtZG2LqHnbuAgyVCC2EbVXPFj5mDNU4rYRkQZWFoAtAFoAtAFoAtAFoAtAFoAtAFoAtAFoAtAFoAtAFoAtAFoAtAFoAtAFoAtAFoAtAFoAtAFoAtAFoAtALzdAfz2+S33JIq3VLuB+Y+Hsf\/9k=)","2d94ad7c":"# Thank you :)","6be00a7a":"Borderline smote is a variant of SMOTE and is used to detect the borderline samples :)","3790c56f":"# Preprocessing The Dataset","04c5921b":"# OMG The Accuracy is 97.1% now . WOW!!","5cf07b69":"Class to perform over-sampling using SMOTE and cleaning using ENN.\n\nCombine over- and under-sampling using SMOTE and Edited Nearest Neighbours.","ca71efbc":"#### The accuracy of the model decreased but we can clearly see the increase in the recall from earlier :)","3b3f9958":"# Checking For Null Values","bb8a8f54":"# Let's have a look at heat map of df","3ef80830":"# Trying the model without oversampling","371050b2":"# Importing The Packages","0a6adbf1":"This will decrease the overfitting in the data :)","c462a088":"## Since the number of churned customers are too low it will effect the model.... Let's see","b22e08b2":"# Trying out LGBMClassifier now","402e119b":"## WoW this was better than the XGBClassifier but now we need to try something better to increase this score :|","afcb4e6c":"# Reading The data","10698660":"After oversampling we got both the 1 and 0 in the same amount let's try our model now :)","cdb35c82":"### Wow XGBClassifier is a lot better than the Random Forest Classifier :)","ff4f3157":"Well from this we can clearly see that the status of a customer either existing or attrited is closely related to the number of months he was inactive and the number of contacts he made in the past year . So one of the methods to indulge them would be keeping them active by providing some kind of offers which will attract them to use the card  more .\n\nWe also see a negative impact of change in transaction count on the attrition flag :{","12ca9d8e":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExMWFhUXFxcXFRcXFxgXFxcXFxcXFxUYFxUYHSggGBolHRUXITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGi0mHyUvLS0tLS0tLS0tLS8tLS0tLS0tLS0tLS0tLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAACAQMEBQYABwj\/xABCEAABAwIDBAcFBQYGAgMAAAABAAIDBBEFEiEGMUFREyJhcYGRoQdyscHwMkJSYtEUI4KSovEVM0NTwuGDshZjc\/\/EABoBAAIDAQEAAAAAAAAAAAAAAAECAAMEBQb\/xAAuEQACAgEEAQEGBQUAAAAAAAAAAQIRAwQSITFBUQUTIkJhcTKBkbHRFCNSofD\/2gAMAwEAAhEDEQA\/APQHOTYC4x35pCDz7\/7reZmF0d0nRLmhx3Jwb0bBSYPQ8lw3J9qbc1CyVXQDB9fqnWMQNYVIYxBsKQIauLbo3hK1LYROjuibTpyFvYpGRYtbq\/cx47fRZix73z0QpIeSEN5qxDE1LFbhok0uvjm+GXEv3+38Ay4nDnwRmssi6NJUSBupIHeQFFdjMbRvLvdF\/U2C1ZM0Ifikl+ZXCMp8JMmFi50appdpB92I\/wARt6C6hTbQzHcGt7hc+qyS9pYI9O\/sjTHR5X4o1AYm3vYz7Tmt7yB8Vi5cSmdvkdbsOUeQURwuVln7XXyx\/UvjoH8zNhPjlO37+bsaCfXcoE20zPuxuPeQPhdZ\/o0hjWaftLO+ml9l\/Nl0dHiXfJcnaZx\/02jxJRR7Qu4sb4EhUJjSAKr+t1H+Q\/8ATYfQ11Ji7XkNIyk7tdD2KblusO2QrX4fU54g69juPePq\/iuv7O1cstwn2c\/WYFjqUeh97dEOQFE92ijZ11DJuQ70IRtiHemHzaeKJxI+vkpTJuiOujSZFFdM7fuXCU9qbawe8iOujKodraroKWaW+rWOt7xFm+pCvOlK889rta4UzIRq6WQCw3kN13e9kUbcYtkVSaR55i37rDqSLjM+WpeONh+5i8LMefFNCK1HBGN88zpD7rLRM9TIUe3rwKswtN208cdO3\/xMAf8A1l6shTXrooOFPFHGeWYNu\/8Are7yWCKtmxvg9E2dpLNaANwC0sUYsqrChZuqtWuXSiqRilJWWrL2BCMhOxDRIRyCpsvobY0cd6IAX0Rhg5JLIWShdULmIgnFCDbWp0MSxsRPna3Q3J5AKrJljBXJ0FRb6AypGt1QSVZ+623fqo7nP4uPhp8Fiye0sUerZYtPN\/QtWZWi7iB3m3omZcTjbuu49g+Zsq4Ackluxef1Gonlm5M3Y8MYqiRJizz9hgHvEn0FlCmnndoXkdjbN+Gqfv2JNVR8Rakl4K11KeK4UysHApGsVsfqBtkD9m7EhogrTo12RWpFe9lQcPCD\/DVddGuEaG1MPvGUrsPTT6A8loOjXdGjsRPesy76Qpl1OVqpKcFQ30aXZQyyWZ5lOVe4CMuZp3GxHwPy8k7HRJ+KEtNwtOkn7vNGX\/clOo+PG0SXtvpbRAIgNydiddK9i9TZykuLI4aP0TxCbY26etoowrkYc1DlAUjIm3AIojQyXAcF5ftRO2bGadrv8umYZ5OQEYMzr8haNg8V6bU6C\/w\/ReH1FbduK1l9XltLEeBEj+tbt6KH+pJmdQ+42LmRQYGP2iuY+T70pmk5WaTLJ6ArUbARmaaaofve4nxccx\/9vRZnAOpBVzcohC33p3ZT\/Q169D9nlDlgZpq7Xz1VOFXIum6RsaaKzbceCkWTscWm5OCJdHcjnOLuy4CUBAxqPKsrNiDG9A4JTzQkXQQWwmJUgRAqAscY5BHJmc5pGosR2g3\/AEQl6SN1pWHg4Fp+I9Qs2rhuxsaEqkSOjSOplObGlyLz042zbFlf+zBR6+SOGN8shsxjS5xsTYDUmw1VvkVBtfVhsJga3pJqgOjjj94ZXPdya0G90ix2x1K2RdnsdgrM\/Qh\/Uyk5220dctINyNbK5\/Z1QezGlbHRmLLlljlkZPzMjXb+7LlstdkRyY0pNLojkQP2ZL+zKdkXZEm0m4g\/s6F1OrEMXZUUmhW7MdjOISRVtHELdFP0rX3AvnawOjseGqvxGqb2iUxFMyoaDmppoptOLQ7K\/wAMrifBStp8ZbS0r6m2awGRt7BxcQG6jhrfuBV6juSoDLDo1xjSYc97oo3SNDXuY1zmg3DXEAkX7FJDUNtC2RzEgdCpeVIQooksiiFEIk\/ZcAjtJZGijsklUkjrHt1+X6KLO1eiwT3wTMU+LQjRogc7kl1QlXiXwOMCCoOlkbHJuSQcFF2Rvgze1mJdDSTSfebG4jeNbWb6kLxPGP3WHUkPGZ8tS8cbX6GHwsx58V6N7Yqy1MyFmrpZGttxs3rf+2XzXm+37wKswtN200cVM3\/xMAf4586q1D5SLMK4sHoSKOniG+omfKfdZaFnr0hXsOzdFZrRyAXmsdLmr4od4poo4zb8TW3f\/XI7yXseCwWbdTAvI2T0JWWyea1OADl6JsC+71WgoqiSx3LROJhj0YkCWSJGQ+Ny6yaY+6IlJQ1hDv1RNQAI2FRksQhPshB63LUd43JuOK57FOYFzPaGp2R93Ht\/sW4Me6W59EgHilQUZ6tuVx5bvSyjYziradmYskkcTZjI2FznO4DQWHeVzYrckzTXNA4xicdPGZJDYaBoG97j9lrRxJWY2K6SWpqpqltqhpY0NP8Apxubna1vn9XKtMIweWWUVdaB0o\/yYQbspweR+9Jzd\/1bp29DiTH7m1MRYeXSRatv2ltgnSSHT8IGli6HEZG7m1MYkA\/+yLqvt\/CQVpLKh2pbldTVH+1MA4\/kl6jvXKr5I0BvpiWSIkiRoAiSyUFZys2piMNW6F13092uu2wD9Q0i\/wBoXB8lFGwpNlziVG2aKSJ32ZGOYe5wI+a83ilNUzDqJ4uY5Xidp5U2gB5ggrUbCYvPMyWKpIM0L7EgAXa4XYbDTn4WWIjqZf8AGal9LkDwXhsbxdshbbpGh1xke7K4g81bCNNr0HS7R6y9iBQ8Ax2OqYS0FkjdJYn6PjdxDhy7UzhmIOfU1UDrfunRlnuPYD6EHzSK\/JW4ssrLgEZCFEUQhIAlKUKEAm0se34\/QUaZuu9TJG3BHZ68FCc64uutoJ3Fr0M2XsaKQu7EDxvQ3OnJdJIzuQ80iyjveLp0MUWp0umiuQSbo8y2ombNjNMx2sdO0zydgjBldfstEweK87wQGpr2Ok+\/KZZO4EyyegctFU1t\/wDFqznlpY+R6V+V1u3o4T\/Ms\/s71Iqub8MPRN96dwZp\/AJFiyu5NmzGqijVez5hmnmqHb3vJ8yXf8vRew0TeqF577NqHJTtO7Nr56r0qkaLWWnGqiVTfIUkVx3JgDv81PsAoEjNf0TxK5quRwhNudYhDM8iyPogd5VtGXdzSH4XgqQ63NVreqdNyfa\/n9eKrlAthkXTJYPoiib9BBCCRvUunjtqd\/BY9RmWGDky+EXNpIdY2ycahRALzM5ynJyl2zoxioqkLSmz3N52cPgfkpN1BcbSMPPqnx3etlOVmCVxr0BNc2cqPbKE9AJWC74Htmb\/AAmzv6SfJXiGRgIII0IIPcdCrrFTp2V+JQippXhv+pHdveRmafOyrf8A5GW0lPI1meWYtjYy9ryah1zwALSpGyUlonQnfBI6PwBu0+R9Fk3DocTgpiOoKiSaPlaZm4dzgUUixLtehrNnscdO6WKWPop4XWewHM0tOrXsPFpCgYziM8tcyhgeIm9EZppcoe4NvlDWB2gJuNSOPZqm1Y\/Z6inrho0HoKjkY3nqk+67j2hNPeIMYL5CGsnpw2N5+zmY5t25uGgv4hSiJeUQfZXUFjKijcbup53Ae448P4mn+ZY7pTG6vadGz9Ll7XRTNdb+Uu81oMBpJRLLiUDXPBqJmvjG+SAkHMwHe4G58OxIzZySrop3Njc2VtVLJCHjKXMcGZm9bgbDsu1Pxdjqk2Xl+gxCCYaR1cLY3cuka0GM95GUean1uycf7x8PUmdK2cPcSQJGnzDTc3HamJ8Gmmw2CMty1ETY3MzEdV8fV1cL72381qY72GbfYX5X4qpsrcvQqMW2dineJQXRTtFmzRHK+3J3B7exwKiYPgE8VU+olqGyZ4wwgR5CS0jK42cRewtorXFcWipwwzOLQ94jacrnddwJAOUG246lRYtoI3VU1LlfmhjbI99hls4A2GtybOHDmhyBN0WzmppzUxg2KxVULZ4STG++UkFp0JBu06jUKYQh0K0R7Lk6WICEwpwUGRtiR238Dr81OUStb1geYI+vNbdFKslepTnXw2Qy\/wBFzRolO9cL6fJdoxJiN0VNtZXiCmml4sjcR3gHKPOyupHLzv2zV+SjEYOsr2tt2N659WjzRuk2Olbo80xb91hlLFxnlmqXX32baCLw6sh8U02G1FBGN9RO6Q+7GBEy\/wDE6TyR7fvAqWwtILaaGGnaQbgljAXnT87nq0bSXr6en4U8MTHcs+XPJ\/XIfJYUrZtPT9mKTKxgG4ALWRnnoqrBorBW4C3eDN5OedbeqbfECbpyS1xfzTT9\/wD2ogMakvySuGiIDtQyNKtRjfqN5Lp+GPs+u9MM0U+kaXfXqhle2NvoGPl\/UkUzFKSAJQvJavUPNO\/Hg7mHHsj9QkQQBGFlLBiuHVuN418lOa64BHEA+ajTNu0osMdeMD8JI\/T0KOB1ka9USX4bJC4oki1lRn4f3WIPbwqIg8dr49Db+E3VV7QsPeHU1ZExz3wStzNYMziwuB3AcCD\/ADK22vicI2VLBd9O8SWG8s3SDy+CuqWobIxsjDdrgHNPMHUIrjksuqZHxnDm1EEkLtz2kdx3tPgQD4Kr2eY6WAQVdOc0Qax3SNDmPIuAWk\/a0AN+1aErroCJ8UNxQtY0NY0NaNA1oAA7gNyO6qsW2jp6d4ZK8hxGY2a5wa29szy0HK2\/EqzbICA4EEEXBB0IO435KEpi3XLHbZB1XPFh7HWDmOmmdyaLiMfzfJZXGMRlmw2CkJcJxMaeQXNyY9GAnjfM3xaioWOoWbjb7D+mopWgEuYBIy2\/MzredgR4qjw+sBrqSq+7W0xifyErLEg+IDVo9iq\/p6GB5NzkyOJ3ks6pv32v4rIOw5zY6mkZfpaSYVVLpvYetlbzsD52RXoGPoXfs3GSGenP+hUSMHu30+BWvWK2Sr2OrpnM0bVQxzgcnN6kje8Oz+S2t0klyLPsSyEtR2SKJCMbypiujuwnlr5b\/S6lFKG30V+N7ZKRXJWqKUfX90jtO1G0WJbxBI8tELmDivQJ3yc5egMhFuxeU+2mpZ0LG21zjLzGhufLTxXqktgvHvbfKLwN5l7vINHzQn+Bl2P8R5Ze1rL0X2e0z3zPnkcXvdqSd5J3nvXn9JAXva0byV7TsXhJjj3b1mxK5GmT4N1h4s0KYD9fRUenFmp8ha2Z7CcLqM866hPAHjYefwTUt77yoiSHo2IZGXSgm6dYE1lFKqI7IbK0pYco7UMFPrc8Nykri+09Zu\/tR\/P+DVpNPT3v8hEqRKAuKdA5EEiIIECI0UfDnWe9vPUeGh+SkqDfLK08zY+KS9s4sZK00WhC5EhXQM4jhcWQxRNaA1oDQNwAAA7gEa5AJyzG0FdKyvoI2yFsUplEjRbrFrQWg3F+K06y+31I4wsqGfbppGzC34QeuO7cfAorsMexnZumbUyV8kguJJXU+v8AtsaGkDle48gsxXzvbQxxTFz20tWIqhjTlzxgksuToBvAubblp\/ZlUdJSvf8AinkcfENPzTtPGIsUmYRdtRA2TUaZmHKR5AnxTdMsvlmf9lkJ6erfk6hyiN2bOGNzOPRB9yHWGXUfhWyn2bpnztqTF+9aQ4OBIBcNzi0GxParSOMAWaABwAFh5BGErduxJSt2jNYFh0tJPLEGF1PK8yRuBb+6cR1muBINtABa\/DttPrcFD6mKpa8skjBa6wBEkZ+46+7XW6tSo89bG17I3SMa998jC4Bz7Ak5Wk3OgO5Bg3NlLW4G2OeCenjDS2RwlDRa7JRZzrdhAK0CZjqLyOZkeMoBzltmOvwa6+pHHRJRVDn5s0T47OLW5iw5wNzxkcbA8AbHsChG2PFJdEQhTpCNigJwIGhGFYkKVGItyy34OAPiND8kD1KxyK7A78JB8DofkobZARp5rs6aW7EvpwYMi2zZFqAF4h7ZakOqo2D7rC4\/xOt\/xXt1VY9\/1f4L579p5JxCS5BFmZbcBl3Htvc+IV2bjGHBzMDYHDTJNmto3Re44NT2G4WXn3s7wwxxNcRq7f3nt7rL1SgiAA5pcUajZbOduh4N5InaWRHfZKQNyZipDbrIMn1\/ZPW7u3+6Qk\/i+aKC0NMGm9TaaMk79OKha37Oaq8U2lkpJGl0RfAdHFv22n8TeDh+X151auU4424dlWCKlJJmuSqLhmIxVEYlheHsPEcDxBG9p7DqpS8o7vk66OXLlyUItkQCQBKoAIKBiI4qeFGrWaKrKriPB8k+J+ZoPMA+aQqLhMl47fhJHzHxUwroY57oplElTaESLkqIBFxaCCDrfSy5KoQj0NDHCzJExsbbk5Wiwud5sqPHerXULufTMPaC1tvitHdZ3Gxmr6Jv4RM8+TQPgiNHs0YXEpCuQFOTbomlwcWjMLgOsLgHfY7wnEhChDkl0qQhMkAVJZKFwTpCsWyUBJZEEwBuoizNc3mCFm6d2m46bxyWme8AXJAHM6LNyPHSPym4JuCO3UroaGbTaM2ohdManaf0Xke1ey5lremvoct221uNBrysvY3tUMYQwuLjqSt+VblRVp3tbZS4Dh+VrRbcFp422CSnpcg0T1lPFDvl2IQlDUj0ROmiAyBIQGInmlI+tEgHb8UURnOiTU9IHCxAI4qU0pVN3gq2LsweJYJPRyGooX5T95m9jxvs9vHv38iFpNlttYqoiJ46Go4xOOjuZjd97u3j1VjMVkNpdm2TDMxuRwNwRpqNxB4G6xaj2fHKrj2Ww1ex1M9GRALzTAts56QiGvDnxjRs4F3t5dI0fbH5hr3716RS1DJGNkjc17HC7XNN2kcwQuBlwyxOpI6EZKStDiVcuVQwoKaqBonAhkGiSXQV2Q8IfZ7m8xfy\/urUqjY\/LM08L289Pmr6yu0buFegMy+KwbJESFaioh4jWGGzy0mP75Au5n5rcW8+W9SoJmvAc1wc07iCCD4hESqifZ9ly6F8kDibnoiA1x5ujILT5IB4LdzgBc6AakncBxN1nMGBqKqSsseiawQ0\/wCZt7vkHYTuPEKYcEzi088kzeLDkYw+82NoLu4kjsVq1oAsAABoANwA4AcFA3QV0l0JKUKIUW64pFyZIAqWyanqGRjNI9rBzc4NHmVnsQ28o4rgPdKeUbbj+Z1h5Epugcs01ktl5hiXtLldpDE1g5uJe7y0A9VlsSx+pnv0sz3D8N7N\/lbYeiKYdjPX8T2qo4Lh8zS4fdZ13eIbe3jZZHFPaWTpTxAD8chufBjdPUrzguQscnVEUDcUmMyzOzSyFx4cAO5o0HktFTTi4t4rE4K7ctZT7hzXT07W0z5I1IvC+\/JGSbaKNSv0Tj1sXJkfDY808EV1Gidru17067kg1TDGVodugaNOKRoTsYSlq5EbF2oXN8fEJ1wTIcOdlEM0G0JHlKAgeTwUEdJEeQ3F\/RMvFzbyv2I5nm1vWyZExAv2rTBMw5JK6HarDI5m2e0a7tyyH7FVYbIZKU5oibvhdfI7mR+B35h433LbU8oI1Phron5Iw4WOoPNZM+COTiSNeDK4Ljoa2Z2pgrGnIS2Rv24naPb2j8TfzDxsdFeLzjHNlLkTQOLJGm7S02cD2EKTs\/t05jhBiAyP3NntZjv\/ANB9w9u73V5\/U6KWJ8dHTx5IzVo34XOCEOvqNRvCIrAywpsRbxV9TyZmNdzAKp8RbopWBS3it+EkfMfFTSusjj6j5VcEyeUiJCV0GZhEhSlVtZjlPH9uVt+QOY+TbpJSS7Yyi30ixuuWTrNuYm\/5cbndriGj5lUNbtpUP+yWxj8oufN11nlqsa+pojpMkvFHpLyALkgDmVU1m0lNHvlBPJnWPmNAvLqvEZJDd73O94k\/HcopeVTLVv5UaI6FfMzdYp7Q2RtLmRmw1u82\/pbe\/msPUe0Cvn16Xomm9mxNDbDh1zd1+4rOYrUmV+Rp6jTr+Z36BFBFYW3rZiUttzfL\/wBFM4Q3VFEyWpe85nuc53NxLj5nVNucjggcdwKnU+ESO4fFWxhJ9ID2pclW5E0LTUuyxcdVd0mygFrhaY6abKHngjAmmcdwTsGFSOOgK9LGz7WncLJ+DDmjgtmPRccsy5NWr4Rk8Kwp4te60kNG6w9f7q3jp2BOdGOC0wxqHBVLJuIFPFaw81NN7WQyWunctxorijuwYDruCcNr7kDRp9fFFfsSseKpBEpU2SAuzIFiOe5Mm3NOXUcyWTIEhxpSPJSLk5mfQ1mA8UO\/j4XXLlelwZHLmh6AaqQ09q5cqZ9miHQTXc1VY7gMdQ0gtF+a5cqZRT4ZfCTXRkqHEavCnZbGal\/2z9pg5xO4e6dO7evSMDxyCrj6SB4cNzhucw\/he3e0\/QXLlwtdp4Qdo6WKblG2O1rdFAwetbG94ebAi\/iP7rly4rm4TUkbMcd8XFg4ntjFH9ljnnwaPM6+izVbt3O77AZGOwZnebtPRcuQlqckvP6GvHpcSXRRVmMzS\/5kjndhJt\/LuUIylcuVLV8s0xilwgblEyInglXIMYm02DyO4KLtHT9CGwt1leL6fcZuzHkTuHjySLls0WJZMqUjDqM8oppFfh+zrtLiwWko9lgLXSrl6jHpodnFnnn0aGiwFgG5W0NAxvBcuWhRS6KXNtWE2AX4KQyNcuTMric+yivcLrlyeCK8rCaeO\/yTl1y5R9jQ6GJSLp+2i5ciyQ8jRPkiLrBcuUrkKfFggowVy5BjxGpXpskLlyiBZ\/\/Z)","266a543a":"# Let's Try XBGClassifier now ","537205bd":"## There are absolutely no Nan values in this dataset","cf7654dc":"## Making the confusion Matrix","f4d65204":"## Making Confusion Matrix","245e902d":"Converting all the categorical columns to numerical using Label Encoder"}}