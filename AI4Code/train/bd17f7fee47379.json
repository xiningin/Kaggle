{"cell_type":{"b0c28707":"code","eb4f91ec":"code","513b7c6d":"code","1cea5ddc":"code","b54ae28d":"code","d8937e11":"code","24339178":"code","4085810a":"code","968ab2e5":"code","9b667eb2":"code","57278054":"code","cb0de948":"code","19cf8f0e":"code","4a3a8331":"code","047f1e03":"code","223cfae8":"code","7d71e616":"code","89dec886":"code","0f634699":"code","405f3a4d":"markdown","db66d690":"markdown","e0972560":"markdown","867f105f":"markdown"},"source":{"b0c28707":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport optuna\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import LabelEncoder\nimport xgboost as xgb\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb4f91ec":"# Loading the data:\ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')\nsubmsn = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","513b7c6d":"train.head()","1cea5ddc":"print(f\"The shape of train data is {train.shape}\")\nprint(f\"The shape of test data is {test.shape}\")","b54ae28d":"train.info()","d8937e11":"train.isnull().sum()","24339178":"test.isnull().sum()","4085810a":"test['Age'].fillna((train['Age'].mean()), inplace=True)\ntrain['Age'].fillna((train['Age'].mean()), inplace=True)\ntest['Fare'].fillna((train['Fare'].mean()), inplace=True)\ntrain['Fare'].fillna((train['Fare'].mean()), inplace=True)","968ab2e5":"# Dropping some columns:\ntrain.drop(['Name','Ticket','Cabin'], axis=1, inplace=True)\ntest.drop(['Name','Ticket','Cabin'], axis=1, inplace=True)","9b667eb2":"# Applying Label Encoder:\nobj_cols = train.select_dtypes(include=['object']).columns.tolist()\nfor col in obj_cols:\n    le = LabelEncoder()\n    le.fit(train[col])\n    train[col] = le.transform(train[col])\n    test[col] = le.transform(test[col])","57278054":"# Defining the columns and target:\ncols = ['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\ntarget = train.Survived.values\n\n# Fitting the model\n#model = xgb.XGBClassifier()\n#model.fit(train[cols], target)","cb0de948":"# Getting the score for train data:\n#roc_auc_score(target, model.predict_proba(train[cols])[:,1])","19cf8f0e":"# Getting the predictions for test data:\n# submsn['Survived'] = model.predict(test[cols])\n# submsn.to_csv('submission.csv', index=False)","4a3a8331":"NUM_FOLDS = 5\nskf = StratifiedKFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)","047f1e03":"def objective(trial , data = train , target = target):\n    for f, (train_ind, val_ind) in enumerate(skf.split(data, target)):\n        train_df, val_df = data.iloc[train_ind][cols], data.iloc[val_ind][cols]\n        train_target, val_target = target[train_ind], target[val_ind]\n        \n        params = {\n            'eval_metric' : 'auc',\n            'booster' : 'gbtree',\n            'tree_method' : 'gpu_hist' , \n            'use_label_encoder' : False , \n            'lambda' : trial.suggest_loguniform('lambda' , 1e-5 , 1.0),\n            'alpha' : trial.suggest_loguniform('alpha' , 1e-5 , 1.0),\n            'colsample_bytree' : trial.suggest_uniform('colsample_bytree' , 0 , 1.0),\n            'subsample' : trial.suggest_uniform('subsample' , 0 , 1.0),\n            'learning_rate' : trial.suggest_uniform('learning_rate' , 0 , 0.02),\n            'n_estimators' : trial.suggest_int('n_estimators' , 1 , 9999),\n            'max_depth' : trial.suggest_int('max_depth' , 1 , 20),\n            'random_state' : trial.suggest_categorical('random_state' , [0,42,2021]),\n            'min_child_weight' : trial.suggest_int('min_child_weight' , 1 , 300),\n            'gamma' : trial.suggest_loguniform('gamma' , 1e-5 , 1.0)\n        }\n        model = xgb.XGBClassifier(**params)\n        model.fit(train_df , train_target , eval_set = [(val_df , val_target)] , early_stopping_rounds = 200 , \\\n                  verbose = False)\n        preds = model.predict(val_df[cols])\n        auc = roc_auc_score(val_target , preds )\n    return auc","223cfae8":"# Running the study:\nstudy = optuna.create_study(direction = 'maximize' , study_name = 'xgbclassifier')\nstudy.optimize(objective , n_trials = 10)\nprint('number of the finished trials:' , len(study.trials))\nprint('the parametors of best trial:' , study.best_trial.params)\nprint('best value:' , study.best_value)","7d71e616":"# Getting the best params:\nparams = study.best_trial.params\nparams['eval_metric'] = 'auc'\nparams['booster'] = 'gbtree'\nparams['tree_method'] = 'gpu_hist'","89dec886":"# Rerunning on the data using only the best params:\npreds = np.zeros(test.shape[0])\noof_predictions = np.zeros(len(train))\nskf = StratifiedKFold(n_splits = 10 , random_state = 0 , shuffle = True)\n\nfor trn_idx , val_idx in skf.split(train , target):\n    train_x = train.iloc[trn_idx][cols]\n    train_y = target[trn_idx]\n    val_x = train.iloc[val_idx][cols]\n    val_y = target[val_idx]\n    \n    model = xgb.XGBClassifier(**params)\n    model.fit(train_x , train_y , eval_set = [(val_x , val_y)] , early_stopping_rounds = 100 , \\\n             verbose = False)\n    preds += model.predict(test[cols])\/skf.n_splits\n    oof_predictions[val_idx] += model.predict(val_x[cols])","0f634699":"submsn['Survived'] = np.round(preds).astype(int)\nsubmsn.to_csv('submission.csv', index=False)","405f3a4d":"### Getting the missing values count:","db66d690":"### Substituting missing values:","e0972560":"### Using Optuna + XGB:","867f105f":"### Basic Exploration of Data:"}}