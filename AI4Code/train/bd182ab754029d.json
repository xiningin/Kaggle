{"cell_type":{"74f53349":"code","3f166168":"code","ad10a5f2":"code","8e15eb8c":"code","365261c9":"code","94d9795f":"code","39eef1d7":"code","2bbe1bab":"code","6c951f69":"code","e553171e":"code","f90f5faf":"code","e5e4a33f":"code","139d5d73":"code","d8d87e71":"code","6cb63723":"code","b9e99ac2":"code","d94b169b":"code","119fab3d":"code","ffbc286b":"code","6b76725d":"code","32902550":"code","d31ea156":"code","f9a2c258":"code","c0e19279":"code","8fe6c581":"code","99ee8879":"markdown","1cee10cb":"markdown","247f5628":"markdown","0f464f1d":"markdown","94be0463":"markdown","d64dab1f":"markdown","0ade93e2":"markdown","7e816333":"markdown","29e4e5d0":"markdown","c18850dd":"markdown","86d9d403":"markdown"},"source":{"74f53349":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import FeatureUnion\n\ntrain = pd.read_csv('..\/input\/nlp-getting-started\/train.csv', index_col='id')\ntrain = train.drop(columns=['keyword', 'location'])\n\n#split to train test for validation purposes\nX, y = train['text'], train['target'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n#precompute vectorized representations\nword_vectorizer = TfidfVectorizer(\n    analyzer='word',\n    stop_words='english',\n    ngram_range=(1, 3),\n    lowercase=True,\n    min_df=5,\n    max_features=30000)\n\nchar_vectorizer = TfidfVectorizer(\n    analyzer='char',\n    stop_words='english',\n    ngram_range=(3, 6),\n    lowercase=True,\n    min_df=5,\n    max_features=50000)\n\nvectorizer = FeatureUnion([('word_vectorizer', word_vectorizer),  ('char_vectorizer', char_vectorizer)])\nvectorizer.fit(X_train)\n\nX_train_vectors = vectorizer.transform(X_train).toarray()\nX_test_vectors = vectorizer.transform(X_test).toarray()\nprint(X_train_vectors.shape, X_test_vectors.shape)\n\nX_train_text = X_train.tolist()\nX_test_text = X_test.tolist()","3f166168":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras import backend as K\n\nmodel = Sequential([\n    Dense(256, activation='relu'),\n    Dense(1, activation='sigmoid')\n])","ad10a5f2":"model.compile(\n    loss='binary_crossentropy', \n    optimizer='adam', \n    metrics=['accuracy']\n)","8e15eb8c":"history = model.fit(\n    x=X_train_vectors, y=y_train, batch_size=1024, epochs=5, verbose=True, validation_data=(X_test_vectors, y_test), shuffle=True\n)\nK.clear_session()","365261c9":"import gc\ndel X_train_vectors, X_test_vectors\ngc.collect()","94d9795f":"from gensim.models import Word2Vec, KeyedVectors\n\n# Load pretrained model (since intermediate data is not included, the model cannot be refined with additional data)\nmodel = KeyedVectors.load_word2vec_format('..\/input\/word2vec-google\/GoogleNews-vectors-negative300.bin', binary=True)","39eef1d7":"model.similar_by_word('car', topn=5)","2bbe1bab":"model.similar_by_word('dog', topn=5)","6c951f69":"model.similar_by_word('disaster', topn=5)","e553171e":"model.similar_by_word('book', topn=5)","f90f5faf":"from keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\n\n## Tokenize the sentences\nmax_features=50000\nmaxlen=25\ntokenizer = Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(X_train.tolist())\nX_train = tokenizer.texts_to_sequences(X_train.tolist())\nX_test = tokenizer.texts_to_sequences(X_test.tolist())\n\n## Pad the sentences \nX_train = pad_sequences(X_train, maxlen=maxlen)\nX_test = pad_sequences(X_test, maxlen=maxlen)","e5e4a33f":"X_train","139d5d73":"import numpy as np\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, SimpleRNN, GlobalAveragePooling1D, GlobalMaxPooling1D, Dropout, Embedding\nfrom tensorflow.keras import backend as K\n\nvocab_dim = X_train.max() + 1\nembed_dim = int(np.sqrt(vocab_dim))\nprint(vocab_dim, embed_dim)\nmodel = Sequential([\n    Embedding(input_dim=vocab_dim, output_dim=embed_dim),\n    SimpleRNN(units=embed_dim, return_sequences=False),\n    Dense(1, activation='sigmoid')\n])\nmodel.compile(\n    loss='binary_crossentropy', \n    optimizer='adam', \n    metrics=['accuracy']\n)","d8d87e71":"history = model.fit(\n    x=X_train, y=y_train, batch_size=64, epochs=5, verbose=True, validation_data=(X_test, y_test), shuffle=True\n)\nK.clear_session()","6cb63723":"model = Sequential([\n    Embedding(input_dim=vocab_dim, output_dim=embed_dim),\n    SimpleRNN(units=embed_dim, return_sequences=True),\n    GlobalMaxPooling1D(),\n    Dense(1, activation='sigmoid')\n])\nmodel.compile(\n    loss='binary_crossentropy', \n    optimizer='adam', \n    metrics=['accuracy']\n)","b9e99ac2":"history = model.fit(\n    x=X_train, y=y_train, batch_size=64, epochs=5, verbose=True, validation_data=(X_test, y_test), shuffle=True\n)\nK.clear_session()","d94b169b":"from tensorflow.keras.layers import Bidirectional\n\nmodel = Sequential([\n    Embedding(input_dim=vocab_dim, output_dim=embed_dim),\n    Bidirectional(SimpleRNN(units=embed_dim, return_sequences=True)),\n    GlobalMaxPooling1D(),\n    Dense(1, activation='sigmoid')\n])\nmodel.compile(\n    loss='binary_crossentropy', \n    optimizer='adam', \n    metrics=['accuracy']\n)","119fab3d":"history = model.fit(\n    x=X_train, y=y_train, batch_size=64, epochs=5, verbose=True, validation_data=(X_test, y_test), shuffle=True\n)\nK.clear_session()","ffbc286b":"from tensorflow.keras.layers import LSTM\n\nmodel = Sequential([\n    Embedding(input_dim=vocab_dim, output_dim=embed_dim),\n    LSTM(units=embed_dim, return_sequences=False),\n    Dense(1, activation='sigmoid')\n])\nmodel.compile(\n    loss='binary_crossentropy', \n    optimizer='adam', \n    metrics=['accuracy']\n)","6b76725d":"history = model.fit(\n    x=X_train, y=y_train, batch_size=64, epochs=5, verbose=True, validation_data=(X_test, y_test), shuffle=True\n)\nK.clear_session()","32902550":"import collections\nimport re\nimport unicodedata\nimport six\nimport tensorflow as tf\n\n\ndef validate_case_matches_checkpoint(do_lower_case, init_checkpoint):\n    \"\"\"Checks whether the casing config is consistent with the checkpoint name.\"\"\"\n\n    # The casing has to be passed in by the user and there is no explicit check\n    # as to whether it matches the checkpoint. The casing information probably\n    # should have been stored in the bert_config.json file, but it's not, so\n    # we have to heuristically detect it to validate.\n\n    if not init_checkpoint:\n        return\n\n    m = re.match(\"^.*?([A-Za-z0-9_-]+)\/bert_model.ckpt\", init_checkpoint)\n    if m is None:\n        return\n\n    model_name = m.group(1)\n\n    lower_models = [\n        \"uncased_L-24_H-1024_A-16\", \"uncased_L-12_H-768_A-12\",\n        \"multilingual_L-12_H-768_A-12\", \"chinese_L-12_H-768_A-12\"\n    ]\n\n    cased_models = [\n        \"cased_L-12_H-768_A-12\", \"cased_L-24_H-1024_A-16\",\n        \"multi_cased_L-12_H-768_A-12\"\n    ]\n\n    is_bad_config = False\n    if model_name in lower_models and not do_lower_case:\n        is_bad_config = True\n        actual_flag = \"False\"\n        case_name = \"lowercased\"\n        opposite_flag = \"True\"\n\n    if model_name in cased_models and do_lower_case:\n        is_bad_config = True\n        actual_flag = \"True\"\n        case_name = \"cased\"\n        opposite_flag = \"False\"\n\n    if is_bad_config:\n        raise ValueError(\n            \"You passed in `--do_lower_case=%s` with `--init_checkpoint=%s`. \"\n            \"However, `%s` seems to be a %s model, so you \"\n            \"should pass in `--do_lower_case=%s` so that the fine-tuning matches \"\n            \"how the model was pre-training. If this error is wrong, please \"\n            \"just comment out this check.\" % (actual_flag, init_checkpoint,\n                                              model_name, case_name, opposite_flag))\n\n\ndef convert_to_unicode(text):\n    \"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"\n    if six.PY3:\n        if isinstance(text, str):\n            return text\n        elif isinstance(text, bytes):\n            return text.decode(\"utf-8\", \"ignore\")\n        else:\n            raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n    elif six.PY2:\n        if isinstance(text, str):\n            return text.decode(\"utf-8\", \"ignore\")\n        elif isinstance(text, unicode):\n            return text\n        else:\n            raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n    else:\n        raise ValueError(\"Not running on Python2 or Python 3?\")\n\n\ndef printable_text(text):\n    \"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"\n\n    # These functions want `str` for both Python2 and Python3, but in one case\n    # it's a Unicode string and in the other it's a byte string.\n    if six.PY3:\n        if isinstance(text, str):\n            return text\n        elif isinstance(text, bytes):\n            return text.decode(\"utf-8\", \"ignore\")\n        else:\n            raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n    elif six.PY2:\n        if isinstance(text, str):\n            return text\n        elif isinstance(text, unicode):\n            return text.encode(\"utf-8\")\n        else:\n            raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n    else:\n        raise ValueError(\"Not running on Python2 or Python 3?\")\n\n\ndef load_vocab(vocab_file):\n    \"\"\"Loads a vocabulary file into a dictionary.\"\"\"\n    vocab = collections.OrderedDict()\n    index = 0\n    with tf.io.gfile.GFile(vocab_file, \"r\") as reader:\n        while True:\n            token = convert_to_unicode(reader.readline())\n            if not token:\n                break\n            token = token.strip()\n            vocab[token] = index\n            index += 1\n    return vocab\n\n\ndef convert_by_vocab(vocab, items):\n    \"\"\"Converts a sequence of [tokens|ids] using the vocab.\"\"\"\n    output = []\n    for item in items:\n        output.append(vocab[item])\n    return output\n\n\ndef convert_tokens_to_ids(vocab, tokens):\n    return convert_by_vocab(vocab, tokens)\n\n\ndef convert_ids_to_tokens(inv_vocab, ids):\n    return convert_by_vocab(inv_vocab, ids)\n\n\ndef whitespace_tokenize(text):\n    \"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"\n    text = text.strip()\n    if not text:\n        return []\n    tokens = text.split()\n    return tokens\n\n\nclass FullTokenizer(object):\n    \"\"\"Runs end-to-end tokenziation.\"\"\"\n\n    def __init__(self, vocab_file, do_lower_case=True):\n        self.vocab = load_vocab(vocab_file)\n        self.inv_vocab = {v: k for k, v in self.vocab.items()}\n        self.basic_tokenizer = BasicTokenizer(do_lower_case=do_lower_case)\n        self.wordpiece_tokenizer = WordpieceTokenizer(vocab=self.vocab)\n\n    def tokenize(self, text):\n        split_tokens = []\n        for token in self.basic_tokenizer.tokenize(text):\n            for sub_token in self.wordpiece_tokenizer.tokenize(token):\n                split_tokens.append(sub_token)\n\n        return split_tokens\n\n    def convert_tokens_to_ids(self, tokens):\n        return convert_by_vocab(self.vocab, tokens)\n\n    def convert_ids_to_tokens(self, ids):\n        return convert_by_vocab(self.inv_vocab, ids)\n\n\nclass BasicTokenizer(object):\n    \"\"\"Runs basic tokenization (punctuation splitting, lower casing, etc.).\"\"\"\n\n    def __init__(self, do_lower_case=True):\n        \"\"\"Constructs a BasicTokenizer.\n        Args:\n          do_lower_case: Whether to lower case the input.\n        \"\"\"\n        self.do_lower_case = do_lower_case\n\n    def tokenize(self, text):\n        \"\"\"Tokenizes a piece of text.\"\"\"\n        text = convert_to_unicode(text)\n        text = self._clean_text(text)\n\n        # This was added on November 1st, 2018 for the multilingual and Chinese\n        # models. This is also applied to the English models now, but it doesn't\n        # matter since the English models were not trained on any Chinese data\n        # and generally don't have any Chinese data in them (there are Chinese\n        # characters in the vocabulary because Wikipedia does have some Chinese\n        # words in the English Wikipedia.).\n        text = self._tokenize_chinese_chars(text)\n\n        orig_tokens = whitespace_tokenize(text)\n        split_tokens = []\n        for token in orig_tokens:\n            if self.do_lower_case:\n                token = token.lower()\n                token = self._run_strip_accents(token)\n            split_tokens.extend(self._run_split_on_punc(token))\n\n        output_tokens = whitespace_tokenize(\" \".join(split_tokens))\n        return output_tokens\n\n    def _run_strip_accents(self, text):\n        \"\"\"Strips accents from a piece of text.\"\"\"\n        text = unicodedata.normalize(\"NFD\", text)\n        output = []\n        for char in text:\n            cat = unicodedata.category(char)\n            if cat == \"Mn\":\n                continue\n            output.append(char)\n        return \"\".join(output)\n\n    def _run_split_on_punc(self, text):\n        \"\"\"Splits punctuation on a piece of text.\"\"\"\n        chars = list(text)\n        i = 0\n        start_new_word = True\n        output = []\n        while i < len(chars):\n            char = chars[i]\n            if _is_punctuation(char):\n                output.append([char])\n                start_new_word = True\n            else:\n                if start_new_word:\n                    output.append([])\n                start_new_word = False\n                output[-1].append(char)\n            i += 1\n\n        return [\"\".join(x) for x in output]\n\n    def _tokenize_chinese_chars(self, text):\n        \"\"\"Adds whitespace around any CJK character.\"\"\"\n        output = []\n        for char in text:\n            cp = ord(char)\n            if self._is_chinese_char(cp):\n                output.append(\" \")\n                output.append(char)\n                output.append(\" \")\n            else:\n                output.append(char)\n        return \"\".join(output)\n\n    def _is_chinese_char(self, cp):\n        \"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"\n        # This defines a \"chinese character\" as anything in the CJK Unicode block:\n        #   https:\/\/en.wikipedia.org\/wiki\/CJK_Unified_Ideographs_(Unicode_block)\n        #\n        # Note that the CJK Unicode block is NOT all Japanese and Korean characters,\n        # despite its name. The modern Korean Hangul alphabet is a different block,\n        # as is Japanese Hiragana and Katakana. Those alphabets are used to write\n        # space-separated words, so they are not treated specially and handled\n        # like the all of the other languages.\n        if ((cp >= 0x4E00 and cp <= 0x9FFF) or  #\n                (cp >= 0x3400 and cp <= 0x4DBF) or  #\n                (cp >= 0x20000 and cp <= 0x2A6DF) or  #\n                (cp >= 0x2A700 and cp <= 0x2B73F) or  #\n                (cp >= 0x2B740 and cp <= 0x2B81F) or  #\n                (cp >= 0x2B820 and cp <= 0x2CEAF) or\n                (cp >= 0xF900 and cp <= 0xFAFF) or  #\n                (cp >= 0x2F800 and cp <= 0x2FA1F)):  #\n            return True\n\n        return False\n\n    def _clean_text(self, text):\n        \"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"\n        output = []\n        for char in text:\n            cp = ord(char)\n            if cp == 0 or cp == 0xfffd or _is_control(char):\n                continue\n            if _is_whitespace(char):\n                output.append(\" \")\n            else:\n                output.append(char)\n        return \"\".join(output)\n\n\nclass WordpieceTokenizer(object):\n    \"\"\"Runs WordPiece tokenziation.\"\"\"\n\n    def __init__(self, vocab, unk_token=\"[UNK]\", max_input_chars_per_word=200):\n        self.vocab = vocab\n        self.unk_token = unk_token\n        self.max_input_chars_per_word = max_input_chars_per_word\n\n    def tokenize(self, text):\n        \"\"\"Tokenizes a piece of text into its word pieces.\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n        For example:\n          input = \"unaffable\"\n          output = [\"un\", \"##aff\", \"##able\"]\n        Args:\n          text: A single token or whitespace separated tokens. This should have\n            already been passed through `BasicTokenizer.\n        Returns:\n          A list of wordpiece tokens.\n        \"\"\"\n\n        text = convert_to_unicode(text)\n\n        output_tokens = []\n        for token in whitespace_tokenize(text):\n            chars = list(token)\n            if len(chars) > self.max_input_chars_per_word:\n                output_tokens.append(self.unk_token)\n                continue\n\n            is_bad = False\n            start = 0\n            sub_tokens = []\n            while start < len(chars):\n                end = len(chars)\n                cur_substr = None\n                while start < end:\n                    substr = \"\".join(chars[start:end])\n                    if start > 0:\n                        substr = \"##\" + substr\n                    if substr in self.vocab:\n                        cur_substr = substr\n                        break\n                    end -= 1\n                if cur_substr is None:\n                    is_bad = True\n                    break\n                sub_tokens.append(cur_substr)\n                start = end\n\n            if is_bad:\n                output_tokens.append(self.unk_token)\n            else:\n                output_tokens.extend(sub_tokens)\n        return output_tokens\n\n\ndef _is_whitespace(char):\n    \"\"\"Checks whether `chars` is a whitespace character.\"\"\"\n    # \\t, \\n, and \\r are technically contorl characters but we treat them\n    # as whitespace since they are generally considered as such.\n    if char == \" \" or char == \"\\t\" or char == \"\\n\" or char == \"\\r\":\n        return True\n    cat = unicodedata.category(char)\n    if cat == \"Zs\":\n        return True\n    return False\n\n\ndef _is_control(char):\n    \"\"\"Checks whether `chars` is a control character.\"\"\"\n    # These are technically control characters but we count them as whitespace\n    # characters.\n    if char == \"\\t\" or char == \"\\n\" or char == \"\\r\":\n        return False\n    cat = unicodedata.category(char)\n    if cat in (\"Cc\", \"Cf\"):\n        return True\n    return False\n\n\ndef _is_punctuation(char):\n    \"\"\"Checks whether `chars` is a punctuation character.\"\"\"\n    cp = ord(char)\n    # We treat all non-letter\/number ASCII as punctuation.\n    # Characters such as \"^\", \"$\", and \"`\" are not in the Unicode\n    # Punctuation class but we treat them as punctuation anyways, for\n    # consistency.\n    if ((cp >= 33 and cp <= 47) or (cp >= 58 and cp <= 64) or\n            (cp >= 91 and cp <= 96) or (cp >= 123 and cp <= 126)):\n        return True\n    cat = unicodedata.category(char)\n    if cat.startswith(\"P\"):\n        return True\n    return False","d31ea156":"from tqdm.autonotebook import tqdm\n\ndef _get_masks(tokens, max_seq_length):\n    \"\"\"Mask for padding\"\"\"\n    if len(tokens)>max_seq_length:\n        raise IndexError(\"Token length more than max seq length!\")\n    return [1]*len(tokens) + [0] * (max_seq_length - len(tokens))\n\ndef _get_segments(tokens, max_seq_length):\n    \"\"\"Segments: 0 for the first sequence, 1 for the second\"\"\"\n    if len(tokens)>max_seq_length:\n        raise IndexError(\"Token length more than max seq length!\")\n    segments = []\n    first_sep = True\n    current_segment_id = 0\n    for token in tokens:\n        segments.append(current_segment_id)\n        if token == \"[SEP]\":\n            current_segment_id = 1\n    return segments + [0] * (max_seq_length - len(tokens))\n\ndef _get_ids(tokens, tokenizer, max_seq_length):\n    \"\"\"Token ids from Tokenizer vocab\"\"\"\n    token_ids = tokenizer.convert_tokens_to_ids(tokens)\n    input_ids = token_ids + [0] * (max_seq_length-len(token_ids))\n    return input_ids\n\ndef _convert_to_bert_inputs(text, tokenizer, max_sequence_length):\n    \"\"\"Converts tokenized input to ids, masks and segments for BERT\"\"\"\n    \n    tokenized_text = tokenizer.tokenize(text)[:max_sequence_length - 2]\n    stoken = [\"[CLS]\"] + tokenized_text + [\"[SEP]\"]\n\n    input_ids = _get_ids(stoken, tokenizer, max_sequence_length)\n    input_masks = _get_masks(stoken, max_sequence_length)\n    input_segments = _get_segments(stoken, max_sequence_length)\n\n    return [input_ids, input_masks, input_segments]\n\ndef compute_input_arays(texts, tokenizer, max_sequence_length):\n    input_ids, input_masks, input_segments = [], [], []\n    for instance in tqdm(texts):\n        ids, masks, segments = _convert_to_bert_inputs(instance, tokenizer, max_sequence_length)\n        input_ids.append(ids)\n        input_masks.append(masks)\n        input_segments.append(segments)\n        \n    return [np.asarray(input_ids, dtype=np.int32), \n            np.asarray(input_masks, dtype=np.int32), \n            np.asarray(input_segments, dtype=np.int32)]","f9a2c258":"MAX_SEQUENCE_LENGTH = 64\nBERT_PATH = '..\/input\/bertbasefromtfhub\/bert_en_uncased_L-12_H-768_A-12'\ntokenizer = FullTokenizer(BERT_PATH + '\/assets\/vocab.txt', True)\n\ntrain_inputs = compute_input_arays(X_train_text, tokenizer, MAX_SEQUENCE_LENGTH)\ntest_inputs = compute_input_arays(X_test_text, tokenizer, MAX_SEQUENCE_LENGTH)","c0e19279":"import tensorflow as tf\nimport tensorflow_hub as hub\nfrom sklearn.metrics import accuracy_score\n\nclass CustomCallback(tf.keras.callbacks.Callback):\n    \n    def __init__(self, valid_data, batch_size=16):\n\n        self.valid_inputs = valid_data[0]\n        self.valid_outputs = valid_data[1]\n        \n        self.batch_size = batch_size\n        \n    def on_train_begin(self, logs={}):\n        self.valid_predictions = []\n        self.test_predictions = []\n        \n    def on_epoch_end(self, epoch, logs={}):\n        self.valid_predictions.append(\n            self.model.predict(self.valid_inputs, batch_size=self.batch_size))\n        \n        rho_val = accuracy_score(\n            self.valid_outputs, (np.average(self.valid_predictions, axis=0) >= 0.5).flatten())\n        \n        print(\"\\nvalidation accuracy: %.4f\" % rho_val)\n    \n\ndef bert_model():\n    \n    input_word_ids = tf.keras.layers.Input(\n        (MAX_SEQUENCE_LENGTH,), dtype=tf.int32, name='input_word_ids')\n    input_masks = tf.keras.layers.Input(\n        (MAX_SEQUENCE_LENGTH,), dtype=tf.int32, name='input_masks')\n    input_segments = tf.keras.layers.Input(\n        (MAX_SEQUENCE_LENGTH,), dtype=tf.int32, name='input_segments')\n    \n    bert_layer = hub.KerasLayer(BERT_PATH, trainable=True)\n    \n    _, sequence_output = bert_layer([input_word_ids, input_masks, input_segments])\n    \n    x = tf.keras.layers.GlobalAveragePooling1D()(sequence_output)\n    x = tf.keras.layers.Dropout(0.2)(x)\n    out = tf.keras.layers.Dense(1, activation=\"sigmoid\", name=\"dense_output\")(x)\n\n    model = tf.keras.models.Model(\n        inputs=[input_word_ids, input_masks, input_segments], outputs=out)\n    \n    return model    \n        \ndef train_and_predict(model, train_data, valid_data, learning_rate, epochs, batch_size, loss_function):\n    custom_callback = CustomCallback(\n        valid_data=(valid_data[0], valid_data[1]), \n        batch_size=batch_size\n    )\n    optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n    model.compile(loss=loss_function, optimizer=optimizer, metrics=['accuracy'])\n    model.fit(train_data[0], train_data[1], epochs=epochs, verbose=True, shuffle=True, batch_size=batch_size, callbacks=[custom_callback])\n\n    return model","8fe6c581":"K.clear_session()\nmodel = bert_model()\nmodel = train_and_predict(\n    model, \n    train_data=(train_inputs, y_train), \n    valid_data=(test_inputs, y_test),\n    learning_rate=3e-5, epochs=2, batch_size=16,\n    loss_function='binary_crossentropy'\n)\nK.clear_session()","99ee8879":"# Introduction to DL with TF 2.0 \/ Keras\n\nThe easiest way of creating a model in Keras is by using the sequential API, which lets you stack one layer after the other. The problem with the sequential API is that it doesn\u2019t allow models to have multiple inputs or outputs, which are needed for some problems.\n\n## Creating a model with the sequential API\n\nLet's create a simple multilayer perceptron for binary classification.","1cee10cb":"# Transformer Encoders, BERT\n\n## Self Attention\n\nThe fundamental operation of any transformer architecture is the self-attention operation.","247f5628":"Now that we defined and compiled our model it\u2019s ready for training.","0f464f1d":"# Recurrent Neural Networks\n\n## Simple RNN\n\nRecurrent Neural Network remembers the past and it\u2019s decisions are influenced by what it has learnt from the past. Note: Basic feed forward networks \u201cremember\u201d things too, but they remember things they learnt during training. For example, an image classifier learns what a \u201c1\u201d looks like during training and then uses that knowledge to classify things in production.\n\nWhile RNNs learn similarly while training, in addition, they remember things learnt from prior input(s) while generating output(s). It\u2019s part of the network. RNNs can take one or more input vectors and produce one or more output vectors and the output(s) are influenced not just by weights applied on inputs like a regular NN, but also by a \u201chidden\u201d state vector representing the context based on prior input(s)\/output(s). So, the same input could produce a different output depending on previous inputs in the series.\n\n\n![](https:\/\/miro.medium.com\/max\/2544\/1*aIT6tmnk3qHpStkOX3gGcQ.png)<br>\n![](http:\/\/dprogrammer.org\/wp-content\/uploads\/2019\/04\/RNN_Core2-1200x767.png)<br>\n![](http:\/\/dprogrammer.org\/wp-content\/ql-cache\/quicklatex.com-5b03c40bc8c8e6b3585087d4093e3540_l3.png)<br>\n![](http:\/\/dprogrammer.org\/wp-content\/ql-cache\/quicklatex.com-d534204b8eb3728edc81a0ce7f46c1d7_l3.png)<br>","94be0463":"## Bidirectional RNN\n![](https:\/\/miro.medium.com\/max\/2780\/1*4boTkuSnOzkVfsvatgYthQ.png)","d64dab1f":"Before we can start training our model we need to configure the learning process. For this, we need to specify an optimizer, a loss function and optionally some metrics like accuracy.\n\nThe loss function is a measure on how good our model is at achieving the given objective.\n\nAn optimizer is used to minimize the loss(objective) function by updating the weights using the gradients.","0ade93e2":"# IASA Natural Language Processing Workshop (Part 2)\n\nThe purpose of this workshop is a general overview of various techniques and methods of text analytics, and in particular natural language processing from classical approaches to modern state of the art ones. After completing this course attentive students will have a solid general understanding of the NLP domain and will be able to implement various basic algorithms for text data processing. However, for a deeper understanding, a more detailed study of proposed materials will be necessary. \n\nThese particular materials were created by <a href=\"https:\/\/www.kaggle.com\/abazdyrev\">Anton Bazdyrev<\/a> and <a href=\"https:\/\/www.kaggle.com\/yakuben\">Oleksii Yakubenko<\/a> for IASA students and inspired by <a href=\"https:\/\/mlcourse.ai\/\">MLCOURSE.AI<\/a> and <a href=\"https:\/\/ods.ai\/\">ODS.AI<\/a> by <a href=\"https:\/\/www.kaggle.com\/kashnitsky\">\nYury Kashnitsky<\/a>.<br> <br>\n<a href=\"https:\/\/www.kaggle.com\/abazdyrev\/iasa-natural-language-processing-workshop-part-1\">Part 1 available here<\/a>","7e816333":"# Data Loading for Real or Not? NLP with Disaster Tweets","29e4e5d0":"# Deep Learning Approaches\n\nIn the part 1 we have made some experiments with classical ML approaches for classification problem. These approaches were quite great, but there are a lot of tasks in NLP like sequence labeling and sequence to sequence modeling for which DL models outperforms classical ML ones significantly. In fact, in all NLP tasks with DL approaches we achive State Of The Art results. Now, it's time to experiment with really powerful DL methods.","c18850dd":"# Introduction to Word Embeddings\n\nWord embedding is one of the most popular representation of document vocabulary. It is capable of capturing context of a word in a document, semantic and syntactic similarity, relation with other words, etc.\nWhat are word embeddings exactly? Loosely speaking, they are vector representations of a particular word. Having said this, what follows is how do we generate them? More importantly, how do they capture the context?\nWord2Vec is one of the most popular technique to learn word embeddings using shallow neural network. It was developed by Tomas Mikolov in 2013 at Google.<br>\nLet\u2019s tackle this part by part. <br>\n\n### Why do we need embeddings? \n\nConsider the following similar sentences: \n 1. Have a good day and Have a great day. \n 2. They hardly have different meaning. \n \nIf we construct an exhaustive vocabulary (let\u2019s call it V), it would have V = {Have, a, good, great, day}.\nNow, let us create a one-hot encoded vector for each of these words in V. Length of our one-hot encoded vector would be equal to the size of V (=5). We would have a vector of zeros except for the element at the index representing the corresponding word in the vocabulary. That particular element would be one. The encodings below would explain this better. Have = [1,0,0,0,0]; a=[0,1,0,0,0]; good=[0,0,1,0,0]; great=[0,0,0,1,0]; day=[0,0,0,0,1]. <br>\nIf we try to visualize these encodings, we can think of a 5 dimensional space, where each word occupies one of the dimensions and has nothing to do with the rest (no projection along the other dimensions). This means \u2018good\u2019 and \u2018great\u2019 are as different as \u2018day\u2019 and \u2018have\u2019, which is not true. <br>\n\nOur objective is to have words with similar context occupy close spatial positions. Mathematically, the cosine of the angle between such vectors should be close to 1, i.e. angle close to 0.<br>\nHere comes the idea of generating distributed representations. Intuitively, we introduce some dependence of one word on the other words. The words in context of this word would get a greater share of this dependence. In one hot encoding representations, all the words are independent of each other, as mentioned earlier.<br>\n![](https:\/\/devopedia.org\/images\/article\/220\/3225.1569667846.png)<br>\n\n## How does Word2Vec work?\n\nWord2Vec is a method to construct such an embedding. It can be obtained using two methods (both involving Neural Networks): Skip Gram and Common Bag Of Words (CBOW)\n\n### CBOW Model\n\nThis method takes the context of each word as the input and tries to predict the word corresponding to the context. Consider our example: Have a great day.\n\nLet the input to the Neural Network be the word, great. Notice that here we are trying to predict a target word (day) using a single context input word great. More specifically, we use the one hot encoding of the input word and measure the output error compared to one hot encoding of the target word (day). In the process of predicting the target word, we learn the vector representation of the target word.\n\nLet us look deeper into the actual architecture.<br>\n![](https:\/\/miro.medium.com\/max\/2800\/0*3DFDpaXoglalyB4c.png) <br>\n\nThe above model used a single context word to predict the target. We can use multiple context words to do the same.<br>\n![](https:\/\/miro.medium.com\/max\/1192\/0*CCsrTAjN80MqswXG)\n\n### Skip-Gram model:\n![](https:\/\/miro.medium.com\/max\/2800\/0*Ta3qx5CQsrJloyCA.png) <br>\n\nThis looks like multiple-context CBOW model just got flipped. To some extent that is true.\n\nWe input the target word into the network. The model outputs C probability distributions. What does this mean?\n\nFor each context position, we get C probability distributions of V probabilities, one for each word. \n\n\nIn both the cases, the network uses back-propagation to learn. Detailed math can be found <a href=\"https:\/\/arxiv.org\/pdf\/1411.2738.pdf\">here<\/a>","86d9d403":"## LSTM \n![](https:\/\/www.researchgate.net\/profile\/Savvas_Varsamopoulos\/publication\/329362532\/figure\/fig5\/AS:699592479870977@1543807253596\/Structure-of-the-LSTM-cell-and-equations-that-describe-the-gates-of-an-LSTM-cell.jpg)"}}