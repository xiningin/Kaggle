{"cell_type":{"9293463d":"code","03cc428f":"code","034c029c":"code","07a61aa0":"code","c41a74ed":"code","93e71678":"code","1e5dcd1b":"code","c3cfbfb3":"code","9fbd0d90":"code","896157af":"code","4f208d8d":"code","85283cf7":"code","55481a76":"code","9fc1d1cb":"code","fdfd7c1f":"code","9c67ff05":"code","63bff2df":"code","9ca04e19":"code","2c95e77d":"code","854c0627":"code","a989914e":"code","102bc70a":"code","544639bf":"code","cd35fe66":"code","b7936adb":"code","654be6e4":"code","be9c77ea":"code","ac2bc9e2":"code","3e39ccae":"code","2909337e":"code","8a26dfdc":"code","4ba47eec":"code","ff38db8c":"code","396732c0":"code","93a5af49":"code","256adc26":"code","ab32fe09":"code","cbd0fd50":"code","daf9df3a":"code","0ffd2ecb":"code","d71442fc":"code","64dbb457":"code","5bfa27ba":"code","8565f528":"code","c8093e41":"code","b75b054b":"code","d0313996":"code","39d2f5d0":"code","f6ba7e88":"code","6eee100e":"code","7a44e01c":"code","78de07cb":"code","892bb1cf":"code","608253a7":"code","738cf036":"code","7a1325a4":"code","61e6d48f":"code","b6aedbf7":"code","f5bbd47c":"code","7bd248af":"code","3f4d6560":"code","0400da16":"code","b8b2cd5a":"code","b833ec76":"code","c324efc6":"code","93ace76c":"code","4c52f4c5":"code","6e2c8a27":"code","1e92ec6e":"code","b4ab2159":"code","4bdb29ad":"code","7026b110":"code","23e5429b":"code","955ce2e0":"code","3b3e6436":"code","1082ec4b":"code","0d9f5d9a":"code","254f95ce":"code","81471542":"code","ee63788e":"code","e80c0c0b":"code","212d6437":"code","5fc68fdc":"code","9497ad00":"code","0a95d5a6":"code","0301f33d":"code","cb8fd4e8":"code","a63acb87":"code","48b40c7d":"code","87e9714d":"code","a41e55e3":"code","6ccbb285":"code","fa4b0407":"code","d65ecc06":"code","eb261be5":"code","08c03213":"code","fd5a98f6":"code","cbf595e1":"code","483b3139":"code","9da93b51":"code","4d8db49c":"code","fc810b99":"code","f6b9a08e":"code","6c0fa85b":"code","88473caa":"code","5ff42c2c":"code","670d4f77":"markdown","ea6683d1":"markdown","9b64d98d":"markdown","ec29ae16":"markdown","18d593fc":"markdown","2cf8977a":"markdown","8acb62d0":"markdown","306d8018":"markdown","f6e6fc11":"markdown","769e92c6":"markdown","b37f6cac":"markdown","33f88801":"markdown","f5c059a9":"markdown","5f7bdceb":"markdown","4d5121f6":"markdown","ad15615f":"markdown","85f490e7":"markdown","d4bd38d6":"markdown","eb2bfe91":"markdown","486396b1":"markdown","3bed318c":"markdown","83b8c835":"markdown","490b98ab":"markdown","176a19b9":"markdown","ae97a552":"markdown","2324d534":"markdown","8e9cbf59":"markdown","6aab5296":"markdown","09409aa1":"markdown","2acc46da":"markdown","2e1e1ef6":"markdown","c750699c":"markdown","5ef581cc":"markdown","a5ef6fd6":"markdown","b34a325e":"markdown","62ef0259":"markdown","dd5422bc":"markdown"},"source":{"9293463d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","03cc428f":"data = pd.read_csv(\"..\/input\/2017.csv\")","034c029c":"data.info()","07a61aa0":"data.head(25)","c41a74ed":"data.corr()","93e71678":"f, ax = plt.subplots(figsize = (25,25))\nsns.heatmap(data.corr(),annot = True, linewidth = .5, fmt = '.1f',ax=ax)\nplt.show()","1e5dcd1b":"data.head()","c3cfbfb3":"data.columns","9fbd0d90":"data['Economy..GDP.per.Capita.'].plot(kind= 'line',color = 'r', label='GDP Per Capita', linewidth = 1,alpha = 0.9,grid=True, linestyle = \":\" )\ndata[\"Health..Life.Expectancy.\"].plot(color = 'r',label = 'Life Expectancy',linewidth=1, alpha = 0.9,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Correlation Between GDP and HLE')\nplt.show()","896157af":"data.plot(kind = 'scatter', x='Economy..GDP.per.Capita.', y='Health..Life.Expectancy.', alpha=0.9, color='black')\nplt.xlabel('GDP')             \nplt.ylabel('HLE')\nplt.title('Attack Defense Scatter Plot')\nplt.show()","4f208d8d":"data.Freedom.plot(kind='hist',bins = 50, figsize = (20,20))\nplt.show()","85283cf7":"dictionary = {'cat' : 'tiger', 'reptile' : 'alligator'}\nprint(dictionary.keys())\nprint(dictionary.values())","55481a76":"dictionary['cat'] = 'lion'\nprint(dictionary)\ndictionary['reptile'] = 'comodo dragon'\nprint(dictionary)\ndel dictionary['cat']\nprint(dictionary)\nprint('reptile' in dictionary)\nprint('lion' in dictionary)\ndictionary.clear()\nprint(dictionary)","9fc1d1cb":"data = pd.read_csv(\"..\/input\/2017.csv\")","fdfd7c1f":"data.columns","9c67ff05":"series = data['Family']\nprint(type(series))\ndataFrame = data[['Family']]\nprint(type(dataFrame))","63bff2df":"print(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","9ca04e19":"Filter = data['Economy..GDP.per.Capita.'] > 1.48\ndata[Filter]","2c95e77d":"data[np.logical_and(data['Economy..GDP.per.Capita.']>1.48, data['Generosity']>0.45)]","854c0627":"data[(data['Economy..GDP.per.Capita.']>1.48) & (data['Generosity']>0.45)]","a989914e":"i = 0\nwhile i != 7:\n    \n    print('i is', i)\n    i+=1\nprint('i is equal to', i)    ","102bc70a":"lis = [1,2,3,4,5,6,7,8,9]\nfor i in lis:\n    print('i is' ,i)\nprint('')\n# enumaration\nfor index,value in enumerate(lis):\n    print(index, ':' , value)\nfor index,value in data[['Generosity']][0:1].iterrows():\n    print(index,':', value)","544639bf":"def tuble_ex():\n    \"\"\"return defined t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","cd35fe66":"x = 2 \ndef f():\n    x = 3\n    return x\nprint (x)\nprint (f())","b7936adb":"x = 5\ndef f():\n    y = 2*x\n    return y\nprint(f())","654be6e4":"import builtins\ndir (builtins)","be9c77ea":"def square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())   ","ac2bc9e2":"def f(*args):\n    for i in args:\n        print(i)\nf(2)    \nprint(\"\")\nf(8,7,1,0,65)\n\ndef f(**kwargs):\n    \"\"\"print key and value of the dictionary\"\"\"\n    for key,value in kwargs.items():\n        print(key,\" \", value)\nf( country = 'usa', capital = 'washington DC', population = 330000000)        ","3e39ccae":"kare = lambda x: x**2\nprint(kare(225))\nabc = lambda x,y,z : x+y+z\nprint(abc(56,48,12))","2909337e":"li = [1,2,3]\na = map(lambda x:x**2 , li)\nprint(list(a))","8a26dfdc":"name = 'nicola tesla'\nit = iter(name)\nprint(next(it))\nprint(*it)","4ba47eec":"list1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\ntype(z) # we have to change it to list so\nz_list = list(z)\nprint(z_list)","ff38db8c":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip)\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","396732c0":"num1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","93a5af49":"num1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","256adc26":"data.columns","ab32fe09":"d = sum(data[\"Economy..GDP.per.Capita.\"]) \/ len(data[\"Economy..GDP.per.Capita.\"])\ndata[\"GDP Level\"] = [\"high\" if i> d else \"low\" for i in data[\"Economy..GDP.per.Capita.\"]]\ndata.loc[:30,[\"Economy..GDP.per.Capita.\", \"GDP Level\"]]","cbd0fd50":"data = pd.read_csv('..\/input\/2017.csv')\ndata.head()","daf9df3a":"data.tail()","0ffd2ecb":"data.columns","d71442fc":"data.shape","64dbb457":"data.info()","5bfa27ba":"print(data['Freedom'].value_counts(dropna = False))","8565f528":"data.describe()","c8093e41":"data.boxplot(column = 'Generosity' , by = 'Economy..GDP.per.Capita.')","b75b054b":"data_new = data.head()    # I only take 5 rows into new data\ndata_new","d0313996":"melted = pd.melt(frame=data_new,id_vars = 'Country', value_vars= ['Freedom','Generosity'])\nmelted","39d2f5d0":"melted.pivot(index = 'Country' , columns = 'Freedom' , values = 'value')\nmalted.show()","f6ba7e88":"data1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","6eee100e":"data.dtypes","7a44e01c":"data['Country'] = data['Country'].astype('category')\ndata['Family'] = data['Family'].astype('object')","78de07cb":"data.dtypes","892bb1cf":"data.info()","608253a7":"data['Family'].value_counts(dropna = False)","738cf036":"data1 = data\ndata1['Generosity'].dropna(inplace = True)","7a1325a4":"assert 1==1","61e6d48f":"assert 1==2","b6aedbf7":"assert data['Family'].notnull().all()","f5bbd47c":"data['Family'].fillna('empty', inplace = True)","7bd248af":"assert data['Family'].notnull().all()","3f4d6560":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","0400da16":"country = [\"Spain\",\"France\"]\npopulation = [\"11\",\"12\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","b8b2cd5a":"df[\"capital\"] = [\"madrid\",\"paris\"]\ndf","b833ec76":"df[\"income\"] = 0 #Broadcasting entire column\ndf","c324efc6":"data1 = data.loc[:,[\"Trust..Government.Corruption.\",\"Freedom\",\"Economy..GDP.per.Capita.\"]]\ndata1.reindex()\ndata1.plot()","93ace76c":"data1.plot(subplots = True)\nplt.show()","4c52f4c5":"data1.plot(kind = \"scatter\",x=\"Trust..Government.Corruption.\",y = \"Economy..GDP.per.Capita.\")\nplt.show()","6e2c8a27":"data1.plot(kind = \"hist\",y = \"Economy..GDP.per.Capita.\",bins = 50,range= (0,100),normed = True)","1e92ec6e":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Freedom\",bins = 50,range= (0,250),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Freedom\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","b4ab2159":"data.describe()","4bdb29ad":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","7026b110":"import warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","23e5429b":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","955ce2e0":"data2.resample(\"A\").mean()","3b3e6436":"data2.resample(\"M\").mean()","1082ec4b":"data2.resample(\"M\").first().interpolate(\"linear\")","0d9f5d9a":"data2.resample(\"M\").mean().interpolate(\"linear\")","254f95ce":"data = pd.read_csv('..\/input\/2017.csv')\n\ndata.head()","81471542":"data = data.set_index('#')","ee63788e":"data['Freedom'][11]","e80c0c0b":"data.loc[1, ['Freedom']]","212d6437":"data[['Freedom','Generosity']]","5fc68fdc":"print(type(data[\"Freedom\"]))     # series\nprint(type(data[[\"Freedom\"]]))   # data frames","9497ad00":"data.loc[1:10,\"Family\":\"Generosity\"]","0a95d5a6":"data.loc[10:1:-1,\"Family\":\"Generosity\"] ","0301f33d":"data.loc[1:10 ,\"Family\":] ","cb8fd4e8":"boolean = data.Family > 1.43\ndata[boolean]","a63acb87":"first_filter = data.Family > 1.41\nsecond_filter = data.Generosity > 0.20\ndata[first_filter & second_filter]","48b40c7d":"data.Family[data.Generosity<0.2]","87e9714d":"def div(n):\n    return n\/2\ndata.Family.apply(div)","a41e55e3":"data.Generosity.apply(lambda n : n\/2)","6ccbb285":"data[\"total\"] = data.Family + data.Generosity\ndata.head()","fa4b0407":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","d65ecc06":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","eb261be5":"df.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","08c03213":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1","fd5a98f6":"df1.unstack(level=0)","cbf595e1":"df1.unstack(level=1)","483b3139":"df2 = df1.swaplevel(0,1)\ndf2","9da93b51":"df","4d8db49c":"pd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","fc810b99":"df","f6b9a08e":"df.groupby(\"treatment\").mean()","6c0fa85b":"df.groupby(\"treatment\").age.max() ","88473caa":"df.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","5ff42c2c":"df.info()","670d4f77":"**Line Plot**","ea6683d1":"**PIVOTING DATA**","9b64d98d":"**Pandas**","ec29ae16":"**DEFAULT and FLEXIBLE ARGUMENTS**","18d593fc":"**Anonymous Function**","2cf8977a":"**FILTERING DATA FRAMES**","8acb62d0":"**MISSING DATA and TESTING WITH ASSERT**","306d8018":"I'm waiting for your support. This is my second exercise. Thank you.","f6e6fc11":"**VISUAL EXPLORATORY DATA ANALYSIS**","769e92c6":"dictionary ","b37f6cac":"**Scatter Plot**","33f88801":"**ITERATORS**","f5c059a9":"**Matplot**","5f7bdceb":"**SLICING DATA FRAME**","4d5121f6":"**Tidy Data**","ad15615f":"**Scope**","85f490e7":"**CLEANING DATA** (here we go)","d4bd38d6":"*i can't solve the problem above*","eb2bfe91":"**PIVOTING DATA FRAMES**","486396b1":"**Nested Function**","3bed318c":"**MELTING DATA FRAMES**","83b8c835":"**CATEGORICALS AND GROUPBY**","490b98ab":"**USER DEFINED FUNCTION**","176a19b9":"**MANIPULATING DATA FRAMES WITH PANDAS**","ae97a552":"**STATISTICAL EXPLORATORY DATA ANALYSIS**","2324d534":"**DATA TYPES**","8e9cbf59":"**logic, control flow and filtering**","6aab5296":"**INDEX OBJECTS AND LABELED DATA**","09409aa1":"**Pandas Exercise**","2acc46da":"**STACKING and UNSTACKING DATAFRAME**","2e1e1ef6":"**RESAMPLING PANDAS TIME SERIES**","c750699c":"**Let's create a histogram**","5ef581cc":"**TRANSFORMING DATA**","a5ef6fd6":"**while loop**","b34a325e":"**Lambda Fucntion**","62ef0259":"**INDEXING PANDAS TIME SERIES**","dd5422bc":"**EXPLORATORY DATA ANALYSIS**"}}