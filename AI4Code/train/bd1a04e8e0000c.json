{"cell_type":{"a2203fda":"code","005ee6a0":"code","8b8d00d0":"code","f3f9f346":"code","1e87bcd1":"code","958b98a3":"code","9ee419ac":"code","18e97087":"code","6c565f84":"code","1c0688b2":"code","1dbb64e8":"code","c9574a0b":"code","6efb9657":"code","b37495cf":"code","44baf27f":"code","98b6c5ad":"code","994b6a52":"code","fcd41814":"code","7a58d817":"code","b2088fd6":"code","a6f52d8c":"code","0f7bd634":"code","7ce36657":"code","f731c2f6":"code","565529eb":"code","d986ba40":"code","efbaf3c1":"code","3edf5a96":"markdown","1b71abd7":"markdown","b47e22a5":"markdown","4e2188e2":"markdown","116b9560":"markdown","81d3d007":"markdown","5589bed5":"markdown","d2f4f294":"markdown","616afe67":"markdown"},"source":{"a2203fda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","005ee6a0":"data=pd.read_csv(\"\/kaggle\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv\")\ndata.head()","8b8d00d0":"data_meaningful=data[[\"Country\",\"Sex\",\"Age\",\"Category\",\"Survived\"]]\ndata_meaningful","f3f9f346":"from sklearn import preprocessing\nle_country = preprocessing.LabelEncoder()\ndata_meaningful[\"Country\"]=le_country.fit_transform(data_meaningful[\"Country\"])","1e87bcd1":"le_country = preprocessing.LabelEncoder()\ndata_meaningful[\"Sex\"]=le_country.fit_transform(data_meaningful[\"Sex\"])","958b98a3":"le_country = preprocessing.LabelEncoder()\ndata_meaningful[\"Category\"]=le_country.fit_transform(data_meaningful[\"Category\"])","9ee419ac":"data_meaningful.isnull().sum()","18e97087":"data_meaningful[\"Survived\"].value_counts()","6c565f84":"x=data_meaningful.iloc[:,0:4]\ny=data_meaningful.iloc[:,4:]","1c0688b2":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)","1dbb64e8":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)\nypred=rfc.predict(x_test)\nimport sklearn.metrics as metrik\nmetrik.confusion_matrix(y_pred=ypred,y_true=y_test)","c9574a0b":"print(metrik.classification_report(y_pred=ypred,y_true=y_test))","6efb9657":"from catboost import CatBoostClassifier\n\n\ncatb = CatBoostClassifier(iterations=1000,verbose=0)\ncatb.fit(x_train,y_train)\n\nypred=catb.predict(x_test)\nimport sklearn.metrics as metrik\nmetrik.confusion_matrix(y_pred=ypred,y_true=y_test)","b37495cf":"print(metrik.classification_report(y_pred=ypred,y_true=y_test))","44baf27f":"from sklearn.tree import DecisionTreeClassifier\ndtree=DecisionTreeClassifier()\ndtree.fit(x_train,y_train)\nypred=dtree.predict(x_test)\nimport sklearn.metrics as metrik\nmetrik.confusion_matrix(y_pred=ypred,y_true=y_test)","98b6c5ad":"from imblearn.over_sampling import BorderlineSMOTE\nbsm=BorderlineSMOTE()\nx_train_bsm,y_train_bsm=bsm.fit_resample(x_train,y_train)","994b6a52":"from catboost import CatBoostClassifier\n\n\ncatb = CatBoostClassifier(iterations=1000,verbose=0)\ncatb.fit(x_train_bsm,y_train_bsm)\n\nypred=catb.predict(x_test)\nimport sklearn.metrics as metrik\nmetrik.confusion_matrix(y_pred=ypred,y_true=y_test)","fcd41814":"print(metrik.classification_report(y_pred=ypred,y_true=y_test))","7a58d817":"from imblearn.over_sampling import KMeansSMOTE\nkme=KMeansSMOTE(cluster_balance_threshold=0.1)\nx_train_kme,y_train_kme=kme.fit_resample(x_train,y_train)\n\nfrom catboost import CatBoostClassifier\n\n\ncatb = CatBoostClassifier(iterations=1000,verbose=0)\ncatb.fit(x_train_kme,y_train_kme)\n\nypred=catb.predict(x_test)\nimport sklearn.metrics as metrik\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))\nprint(metrik.classification_report(y_pred=ypred,y_true=y_test))","b2088fd6":"from imblearn.over_sampling import SVMSMOTE\nsvms=SVMSMOTE()\nx_train_svms,y_train_svms=kme.fit_resample(x_train,y_train)\n\nfrom catboost import CatBoostClassifier\n\n\ncatb = CatBoostClassifier(iterations=1000,verbose=0)\ncatb.fit(x_train_svms,y_train_svms)\n\nypred=catb.predict(x_test)\nimport sklearn.metrics as metrik\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))\nprint(metrik.classification_report(y_pred=ypred,y_true=y_test))","a6f52d8c":"from imblearn.combine import SMOTEENN\ncombine=SMOTEENN()\n\nx_train_combine,y_train_combine=combine.fit_resample(x_train,y_train)\n\nfrom catboost import CatBoostClassifier\n\n\ncatb = CatBoostClassifier(iterations=1000,verbose=0)\ncatb.fit(x_train_combine,y_train_combine)\n\nypred=catb.predict(x_test)\nimport sklearn.metrics as metrik\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))\nprint(metrik.classification_report(y_pred=ypred,y_true=y_test))","0f7bd634":"from imblearn.combine import SMOTEENN\ncombine=SMOTEENN()\n\nx_train_combine,y_train_combine=combine.fit_resample(x_train,y_train)\n\n\n\nrfc= RandomForestClassifier()\nrfc.fit(x_train_combine,y_train_combine)\n\nypred=rfc.predict(x_test)\nimport sklearn.metrics as metrik\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))\nprint(metrik.classification_report(y_pred=ypred,y_true=y_test))","7ce36657":"from imblearn.pipeline import Pipeline\nmodel = Pipeline([\n        ('sampling', SMOTEENN()),\n        ('classification', RandomForestClassifier())\n    ])","f731c2f6":"model.fit(x_train,y_train)","565529eb":"model.predict(x_test)","d986ba40":"model.steps","efbaf3c1":"import pickle\nmodelpickle=pickle.dump(model,open(\"smoteenn_randomforest.pkl\", 'wb'))\n","3edf5a96":"Data is imbalanced. ","1b71abd7":"Okay we have to balanced dataset. ","b47e22a5":"First Tree Algorithms can't effected by imbalanced data. ","4e2188e2":"Okay It's works better than imbalanced one.","116b9560":"Okay SMOTEEENN is works best.","81d3d007":"## Thanks for Reading","5589bed5":"Borderline Smote is works better than KmeansSmote","d2f4f294":"### Okay Random Forest with SMOTEENN is work best.","616afe67":"Catboost can't work fine. Random Forest is works better. "}}