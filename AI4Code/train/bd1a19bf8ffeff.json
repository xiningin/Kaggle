{"cell_type":{"fcd2e5c5":"code","3a87b75c":"code","84c9f1d0":"code","5e9e9b0d":"code","656c14c6":"markdown","6d4a3680":"markdown","f0f4e23e":"markdown","09641e50":"markdown"},"source":{"fcd2e5c5":"# Install:\n# Kaggle environments.\n!git clone https:\/\/github.com\/Kaggle\/kaggle-environments.git\n!cd kaggle-environments && pip install .\n\n# GFootball environment.\n!apt-get update -y\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.6 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.6.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .","3a87b75c":"%%writefile submission.py\nfrom kaggle_environments.envs.football.helpers import *\nfrom math import sqrt\n\ndirections = [\n[Action.TopLeft, Action.Top, Action.TopRight],\n[Action.Left, Action.Idle, Action.Right],\n[Action.BottomLeft, Action.Bottom, Action.BottomRight]]\n\ndirsign = lambda x: 1 if abs(x) < 0.01 else (0 if x < 0 else 2)\n\nenemyGoal = [1, 0]  \n\n\ndef inside(pos, area):\n    return area[0][0] <= pos[0] <= area[0][1] and area[1][0] <= pos[1] <= area[1][1]\n\n\ndef get_distance(pos1,pos2):\n    return ((pos1[0]-pos2[0])**2+(pos1[1]-pos2[1])**2)**0.5\n\n\ndef player_direction(obs):\n    controlled_player_pos = obs['left_team'][obs['active']]\n    controlled_player_dir = obs['left_team_direction'][obs['active']]\n    x = controlled_player_pos[0]\n    y = controlled_player_pos[1]\n    dx = controlled_player_dir[0]\n    dy = controlled_player_dir[1]\n#      if x <= dx:\n#         return 0\n#     if x > dx:\n#         return 1\n    X_dir, Y_dir = dirsign(dx), dirsign(dy) # goes straight\n    return directions[Y_dir][X_dir]\n\n\ndef do_toward(obs, action, CUR_DIR, x, y, tx, ty, just_x=False):\n    try:\n        xdir = dirsign(tx - x)\n        ydir = dirsign(ty - y)\n        SEL_DIR = directions[ydir][xdir]\n        if just_x:\n            # for quick action\n            # todo: select closer dir by finding which ydir is currently\n            Accepted_dirs = [directions[tmp][xdir] for tmp in [0,1,2]]\n            if CUR_DIR not in Accepted_dirs:\n                return SEL_DIR\n        else:\n            if SEL_DIR != CUR_DIR:\n                return SEL_DIR\n    except:\n        pass\n    \n    if SEL_DIR not in obs['sticky_actions']:\n        return SEL_DIR\n    \n    return action\n\n\ndef run_pass(left_team,right_team,x,y):\n    # Go and Pass\n    teammateL=0\n    teammateR=0\n    for i in range(len(left_team)):\n        #is there a teamate close to left\n        if left_team[i][0] >= x:\n            if left_team[i][1] < y:\n                if abs(left_team[i][1] - x) <.05:\n                    teammateL=teammateL+1\n        \n        #is there a teamate to right\n        if left_team[i][0] >= x:\n            if left_team[i][1] > y:\n                if abs(left_team[i][1] - x) <.05:\n                    teammateR=teammateR+1\n    #pass only close to goal\n    if x >.75:\n        if teammateL > 0 or teammateR > 0:\n            return Action.ShortPass\n    return Action.Right\n    \n\n@human_readable_agent\ndef agent(obs):\n    \n    CUR_DIR = player_direction(obs)\n    left_team,right_team = obs['left_team'],obs['right_team']\n    # our selected player\n    controlled_player_pos = left_team[obs['active']]\n    # player position\n    x,y = controlled_player_pos[0],controlled_player_pos[1]\n    #vector where ball is going\n    ball_targetx=obs['ball'][0]+obs['ball_direction'][0]\n    ball_targety=obs['ball'][1]+obs['ball_direction'][1]\n    \n    \n    # special plays. new start\n    if obs[\"game_mode\"] == GameMode.Penalty:\n        return Action.Shot\n    if obs[\"game_mode\"] == GameMode.Corner:\n        if controlled_player_pos[0] > 0:\n            return Action.Shot\n    if obs[\"game_mode\"] == GameMode.FreeKick:\n        return Action.Shot\n    if obs[\"game_mode\"] == GameMode.GoalKick:\n        return Action.HighPass\n    \n    if obs[\"game_mode\"] in [GameMode.KickOff]:\n        # start of game \/ after goal\n        pass\n    \n    # SPRINT\n    if  Action.Sprint not in obs['sticky_actions']:\n        return Action.Sprint\n\n\n    # Does the player we control have the ball?\n    if obs['ball_owned_player'] == obs['active'] and obs['ball_owned_team'] == 0:\n        \n        if obs['right_team'][0][0] < 0.8:\n            return Action.Shot\n        \n        if inside(controlled_player_pos, [[0.6, 1], [-0.2, 0.2]]):\n            if x < obs['ball'][0]:\n                return Action.Shot\n        \n        if inside(controlled_player_pos, [[0.2, 1], [-0.25, 0.25]]):\n            if y>0:\n                return do_toward(obs, Action.Shot, CUR_DIR, x, y, 1.02, 0.03)\n            else:\n                return do_toward(obs, Action.Shot, CUR_DIR, x, y, 1.02, -0.03)\n        \n        # if close to goal and too wide for shot pass the ball\n        if x >.75:\n            if abs(y) >.3:\n                return Action.HighPass\n            elif abs(y) >.20:\n                return Action.LongPass\n        \n        if -0.2 < x < 0.2:\n            return do_toward(obs, Action.ShortPass, CUR_DIR, x, y, 1.02, 0.03, True)\n        \n        # defense\n        if x < -0.2:\n            return Action.HighPass\n            \n        # from sides\n        if abs(y) > 0.2:\n            if x > 0:\n                return Action.LongPass\n            else:\n                return Action.HighPass\n        \n        # which way should we run or pass\n        return run_pass(left_team,right_team,x,y)\n    else:\n        #euclidian distance to the ball so we head off movement until very close\n        e_dist=get_distance(obs['left_team'][obs['active']],obs['ball'])\n        \n        #if not close to ball move to where it is going\n        if e_dist >.005:\n            # Run where ball will be\n            xdir = dirsign(ball_targetx - x)\n            ydir = dirsign(ball_targety - y)\n            return directions[ydir][xdir]\n        else:\n            #if close to ball go to ball\n            return Action.Slide\n","84c9f1d0":"# A sample game: Our agent vs. do-nothing BOT\nfrom kaggle_environments import make\nenv = make(\"football\", configuration={\"save_video\": True, \"scenario_name\": \"11_vs_11_kaggle\", \"running_in_notebook\": True})\noutput = env.run([\"\/kaggle\/working\/submission.py\",\"do_nothing\"])[-1]\nprint('vs do nothing')\nprint('(THIS)Left player: reward = %s, status = %s, info = %s' % (output[0]['reward'], output[0]['status'], output[0]['info']))\nprint('(BOT)Right player: reward = %s, status = %s, info = %s' % (output[1]['reward'], output[1]['status'], output[1]['info']))\nenv.render(mode=\"human\", width=600, height=400)","5e9e9b0d":"!find . ! -name 'submission.py' -type d -exec rm -r -f {} +\n!ls","656c14c6":"# Don't Edit","6d4a3680":"# Don't Change","f0f4e23e":"# Edit here:","09641e50":"Some basic info:\n\n- 19 Actions : All actions start with Action. Examples: Action.Left, Action.Shot\n- 0,0 is the field center\n- Attack to right, always\n- We are the left team, always\n\n- Bottom left\/right corner of the field is located at [-1, 0.42] and [1, 0.42], respectively.\n- Top left\/right corner of the field is located at [-1, -0.42] and [1, -0.42], respectively.\n- Left\/right goal is located at -1 and 1 X coordinate, respectively. They span between -0.044 and 0.044 in Y coordinates.\n\n- X is for left (my goal) -1 ====>  0   =====> +1 right(other goal)\n- Y is for up(0.42)\/down(-0.42)\n\n\n![Actions](https:\/\/miro.medium.com\/max\/1050\/1*iRjKtZsw1bBWDpPqbMP74w.png)\n\nMore info:\n\nhttps:\/\/github.com\/google-research\/football\/blob\/master\/gfootball\/doc\/observation.md\n\n    "}}