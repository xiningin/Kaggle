{"cell_type":{"d4f080b9":"code","01a39d32":"code","962684d1":"code","62381bfc":"code","8dd2b115":"code","8a32229c":"code","d4c8f50d":"code","a7dab207":"code","bcc4a9b0":"code","066ae356":"code","492aadb7":"code","ab1478ff":"code","fef3e5c0":"code","eb968874":"code","e6dc40c2":"code","e2821b9a":"code","92898ac5":"code","21703921":"code","e12b478b":"code","50cb404b":"code","0e1503fc":"code","d89d924e":"code","12a56c35":"code","2f5d99e1":"code","1cde81c8":"code","9b36533a":"code","9155b779":"code","007560e0":"code","0531394a":"code","196ef7fa":"code","50bf327c":"markdown","20704893":"markdown","8fd34128":"markdown","6addae04":"markdown","b8458861":"markdown","7d5ce6fb":"markdown","c03f629b":"markdown","16e497fe":"markdown","35ff0e7d":"markdown","6d871265":"markdown","ccf4ca31":"markdown"},"source":{"d4f080b9":"import pandas as pd\nimport nltk\nfrom nltk.stem import PorterStemmer, WordNetLemmatizer\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nimport re\nimport category_encoders as ce\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport pickle","01a39d32":"df_train = pd.read_csv(\"..\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv\", encoding = \"ISO-8859-1\")\n","962684d1":"df_train.head()","62381bfc":"df_train[\"Sentiment\"].value_counts()","8dd2b115":"corpus = []\nstemmer = PorterStemmer() \nfor i in range(len(df_train)):\n    review = re.sub('[^a-zA-Z]',\" \",df_train[\"OriginalTweet\"][i])\n    review = review.lower()\n    review = review.split()\n    review = [stemmer.stem(word) for word in review if word.lower() not in set(stopwords.words('english'))]\n    review = ' '.join(review)\n    corpus.append(review)","8a32229c":"corpus[1:10]","d4c8f50d":"tfidf = TfidfVectorizer(max_features=5000)\nX = tfidf.fit_transform(corpus).toarray()","a7dab207":"def ordinal_encoding(df,col,mapping):\n    ordinal_encoder = ce.OrdinalEncoder(cols = [col],return_df = True,mapping = [{'col':col,'mapping':mapping}])\n    df_final = ordinal_encoder.fit_transform(df)\n    return df_final","bcc4a9b0":"plot = sns.countplot(x='Sentiment', data=df_train).set_xticklabels(labels=['Neutral', 'Positive', 'Extremely Negative', 'Negative','Extremely Positive'],rotation=20)","066ae356":"dict = {'Neutral':3, 'Positive':2, 'Extremely Negative':5, 'Negative':4,\n       'Extremely Positive':1}","492aadb7":"df_train_final = ordinal_encoding(df_train,\"Sentiment\",dict)","ab1478ff":"def minimize_categories(val):\n    if val == 1 or val == 2:\n        return 1\n    elif val == 3:\n        return 2\n    elif val == 4 or val == 5:\n        return 3","fef3e5c0":"df_train_final[\"Sentiment\"] = df_train_final[\"Sentiment\"].apply(minimize_categories)","eb968874":"sns.countplot(x='Sentiment', data=df_train_final)","e6dc40c2":"import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS\nimport numpy as npy\nfrom PIL import Image\nimport requests\nimport io\nresponse = requests.get(\"https:\/\/res.cloudinary.com\/maxie\/image\/upload\/v1617197755\/TEMP\/covid_ywd7ph.jpg\")\nimage_bytes = io.BytesIO(response. content)\ndataset = \" \".join(corpus)\ndef create_word_cloud(string):\n\n    maskArray = npy.array(Image.open(image_bytes))\n    cloud = WordCloud(background_color = \"black\", max_words = 150, mask = maskArray, stopwords = set(STOPWORDS),contour_width=1, contour_color='#333')\n    cloud.generate(string)\n#     cloud.to_file(\"wordCloud.png\")\n    return cloud\ndataset = dataset.lower()\nwordcloud=create_word_cloud(dataset)\nplt.figure(figsize=[20,10])\nplt.imshow(wordcloud) # image show\nplt.axis('off') # to off the axis of x and y\nplt.show()","e2821b9a":"Y = df_train_final[\"Sentiment\"]\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,random_state= 0,stratify =Y)","92898ac5":"multinb = MultinomialNB()\nmultinb.fit(X_train,Y_train)","21703921":"Y_pred_multinb = multinb.predict(X_test)","e12b478b":"log = LogisticRegression()\nlog.fit(X_train,Y_train)\nY_pred_log = log.predict(X_test)","50cb404b":"rf = RandomForestClassifier()\nrf.fit(X_train,Y_train)\nY_pred_rf = rf.predict(X_test)","0e1503fc":"accuracy_score(Y_pred_multinb,Y_test)","d89d924e":"print(classification_report(Y_pred_multinb,Y_test))","12a56c35":"accuracy_score(Y_pred_log,Y_test)","2f5d99e1":"print(classification_report(Y_pred_log,Y_test))","1cde81c8":"print(accuracy_score(Y_pred_rf,Y_test))","9b36533a":"confusion_matrix(Y_pred_rf,Y_test)","9155b779":"text = \"T 3590 -I have tested CoviD positive ..  shifted to Hospital  .. hospital informing  authorities .. family and staff undergone tests , results awaited ..All that have been in close proximity to me in the last 10 days are requested to please get themselves tested !\"\n","007560e0":"def preprocess_text(text):\n    corpus = []\n    stemmer = PorterStemmer()\n    review = re.sub('[^a-zA-Z]',\" \",text)\n    review = review.lower()\n    review = review.split()\n    review = [stemmer.stem(word) for word in review if word.lower() not in set(stopwords.words('english'))]\n    review = ' '.join(review)\n    corpus.append(review)\n    return corpus","0531394a":"corpus = preprocess_text(text)\nX = tfidf.transform(corpus).toarray()\nprediction = log.predict(X)[0]\nif prediction == 1:\n    print(\"Your Tweet is Negative!\")\nelif prediction == 2:\n    print(\"Your Tweet is Neutral!\")\nelif prediction == 3:\n    print(\"your Tweet is Positive!\")","196ef7fa":"pickle.dump(log,open(\"model_tweet.pkl\",\"wb\"))\npickle.dump(tfidf,open(\"tfidf_tweet.pkl\",\"wb\"))","50bf327c":"# Evaluation Metrics","20704893":"<center><img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRWDgteV-sNXVRkc0xwyodmJt18ImebZ1UcKA&amp;usqp=CAU\"><\/center>","8fd34128":"# Visualization","6addae04":"# Data Overview","b8458861":"# Prediction","7d5ce6fb":"# Importing Data","c03f629b":"<h1 style=\"color:rgb(0,0,150);font-weight:bold;font-size:2em;text-align:center\">\nCORONAVIRUS TWEETS CLASSIFIER\n<\/h1>\n<center>\n<img\nsrc=\"https:\/\/www.asata.co.za\/wp-content\/uploads\/2020\/03\/corona-4901878_640.jpg\"\nstyle=\"width: 100%\"\/>\n<\/center>\n<h3 style=\"font-weight: bold\">Context<\/h3>\n<p>Sentiment analysis studies the subjective information in an expression, that is, the opinions, appraisals, emotions, or attitudes towards a topic, person or entity. Expressions can be classified as positive, negative, or neutral. \n<\/p>\n<h3 style=\"font-weight: bold\">Content<\/h3>\n<p>The dataset contains information about<\/p>\n<ul type=\"square\">\n<li>UserName<\/li>\n<li>ScreenName<\/li>\n<li>Location<\/li>\n<li>TweetAt<\/li>\n<li>OriginalTweet<\/li>\n<li>Sentiment<\/li>\n<\/ul>\n\n<h3 style=\"font-weight: bold\">Contents:<\/h3>\n<ul type=\"square\" style=\"color:blue\">\n<li>Importing Packages<\/li>\n<li>Importing Data<\/li>\n<li>Analysing Data<\/li>\n<li>Data Overview<\/li>\n<li>Visualization<\/li>\n<li>Training Models<\/li>\n<li>Evaluation Metrics<\/li>\n<li>Dumping Model<\/li>\n<li>Prediction<\/li>\n<\/ul>","16e497fe":"# Analysing Data","35ff0e7d":"# Importing Packages","6d871265":"# Training Models","ccf4ca31":"# Dumping Model"}}