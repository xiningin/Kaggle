{"cell_type":{"e011ddb1":"code","6fa61b18":"code","ed8bf421":"code","4d8de647":"code","d9b382cc":"code","20094b5f":"code","a6b13e27":"code","a09c90fb":"code","4aae45d7":"code","8e3eae30":"code","7ac425ae":"code","170d0b63":"code","778ec9c6":"code","2775271b":"code","1a17c81c":"code","41351ab1":"code","0a81062a":"code","5236d057":"code","fdd91ba8":"code","4187a445":"code","c3a124d6":"code","c9ad1761":"code","08c761e0":"code","85a07dfb":"code","f86fb168":"code","cb3904a9":"code","e5f4c3e4":"code","8b9738b0":"code","7ffcac46":"code","eba10cd2":"code","f176c82a":"code","da1a2fbf":"code","8670ad62":"code","82d058ac":"code","f7e97073":"code","ec22ed86":"code","a922a6f2":"code","30940c00":"code","46635136":"code","ec8b2e98":"code","b70fbce2":"code","549d70b9":"code","d846d6f8":"code","1bd36e36":"code","1893dab8":"code","7a5c2a9d":"code","83d328ad":"code","bc7345e2":"code","7d99c27d":"code","273c72c5":"code","c9fa897d":"code","f8874d90":"code","50a7fa1e":"code","ee369705":"code","63524c08":"code","9c90f666":"code","86b2baf4":"markdown","e03a0167":"markdown","a3ec8ac5":"markdown","3da0fc12":"markdown","ab51241f":"markdown","bc04d172":"markdown","d6ff1afe":"markdown","e029b532":"markdown","f1e46d95":"markdown"},"source":{"e011ddb1":"# This Python 3 environment comes with analytics libraries installed\n# as defined by the kaggle\/python Docker \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6fa61b18":"#Readme text file describes the dataset\nreadme = open(\"..\/input\/smart-building-system\/KETI\/README.txt\", \"r\")\nprint(readme.read()) ","ed8bf421":"#data for a single room: 656\ndf656light=pd.read_csv('..\/input\/smart-building-system\/KETI\/656A\/light.csv')\ndf656temp=pd.read_csv('..\/input\/smart-building-system\/KETI\/656A\/temperature.csv')\ndf656co2=pd.read_csv('..\/input\/smart-building-system\/KETI\/656A\/co2.csv')\ndf656pir=pd.read_csv('..\/input\/smart-building-system\/KETI\/656A\/pir.csv')\ndf656hum=pd.read_csv('..\/input\/smart-building-system\/KETI\/656A\/humidity.csv')","4d8de647":"#change Unix Epoch Time to string (to use as label)\n#1377299095 UET is Friday, August 23, 2013 11:04:55 PM GMT\n\ndf656light['1377299095']=df656light['1377299095'].astype(str)\ndf656temp['1377299095']=df656temp['1377299095'].astype(str)\ndf656hum['1377299095']=df656hum['1377299095'].astype(str)","d9b382cc":"#merge light, temperature, and humidity dfs\ndf656lt = pd.merge(df656light, df656temp, on='1377299095')\ndf656lth = pd.merge(df656lt, df656hum, on='1377299095')","20094b5f":"#rename columns\ndf656lth.rename(columns = {\"1377299095\": \"Fri, Aug 23, 2013 11:04:55 PM GMT\",\n                          \" 177.00\": \"lights 177.00\", \" 24.37\": 'temp 24.37',\n                          \" 49.90\": \"humidity 49.90\"},  \n           inplace = True) \ndf656lth","a6b13e27":"#uneven from other dfs\n#first, convert UET to string (as labels)\n#then rename columns\ndf656co2['1377299095']=df656co2['1377299095'].astype(str)\ndf656co2.rename(columns = {\"1377299095\": \"Fri, Aug 23, 2013 11:04:55 PM GMT\",\n                          \" 578.00\": \"co2 578.00\"},  \n           inplace = True) \ndf656co2","a09c90fb":"#combine uneven dataframes and fill NaNs with 0\ndf656lthco2 = df656lth.combine_first(df656co2)\ndf656lthco2.fillna(0)","4aae45d7":"##this is the target data\n##passive infrared (PIR) sensor measures the occupancy in a room\n#uneven to other dfs\ndf656pir['1377299096']=df656pir['1377299096'].astype(str)","8e3eae30":"df656pir.describe()","7ac425ae":"df656pir.rename(columns = {\"1377299096\": \"Fri, Aug 23, 2013 11:04:55 PM GMT\",\n                          \" 27.00\": \"PIR 27.00\"},  \n           inplace = True) \ndf656pir","170d0b63":"#combine uneven dataframes and fill NaNs with 0\ndf656all = df656lthco2.combine_first(df656pir)\ndf656all=df656all.fillna(0)","778ec9c6":"#1377299096 is Friday, August 23, 2013 11:04:56 PM GMT\ndf656all.rename(columns = {\"1377299096\": \"Fri, Aug 23, 2013 11:04:56 PM GMT\",\n                          \" 27.00\": \"PIR 27.00\"},  \n           inplace = True) \ndf656all","2775271b":"df656all.describe()","1a17c81c":"df656all.corr()","41351ab1":"#Approximately 6% of the PIR data is non-zero, indicating an occupied status of the room. \n#The remaining 94% of the PIR data is zero, indicating an empty room.","0a81062a":"#Target column\n#create a new columns stating if the room is occupied based on PIR\ndf656all['Occupied_Room'] = np.where(df656all['PIR 27.00']!= 0, True, False)\ndf656all","5236d057":"df656all.describe(include='all')","fdd91ba8":"correlation=df656all.corr()","4187a445":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.heatmap(correlation, cmap=\"Reds\")","c3a124d6":"#machine learning classification model: Decision Tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import metrics","c9ad1761":"# Data Slicing : splitting the dataset into the training and testing dataset\n# using the sklearn module train_test_split\n# but, first, separate the target column: Occupied_Room\n# X includes 'testdf' attributes and Y contains the target variable \n\ntestdf=df656all[['Fri, Aug 23, 2013 11:04:55 PM GMT', 'co2 578.00',\n       'humidity 49.90', 'lights 177.00', 'temp 24.37']]\n\n#all values in those dfs\nX = testdf.values[:,:]\nY = df656all['Occupied_Room'].values","08c761e0":"# split the dataset for training and testing \n# random_state refers to random number generator, 0 or 1 are the most commonly used \n\nX_train, X_test, y_train, y_test = train_test_split( \n          X, Y, test_size = 0.3, random_state = 1)","85a07dfb":"# train a decision-tree algorithm to make predictions \n\nclassifier = DecisionTreeClassifier()\narbol=classifier.fit(X_train, y_train)\narbol","f86fb168":"#make predictions\ny_pred = classifier.predict(X_test)\ny_pred","cb3904a9":"#check for the accuracy of the algorithm (model)\nprint(confusion_matrix(y_test, y_pred))","e5f4c3e4":"conf_matrix = metrics.confusion_matrix(y_test, y_pred)\nsns.heatmap(conf_matrix, annot=True,cmap='Greens')","8b9738b0":"print(classification_report(y_test, y_pred))","7ffcac46":"accuracy=metrics.accuracy_score(y_test, y_pred)\naccuracy","eba10cd2":"from sklearn import tree\ntree.plot_tree(arbol)","f176c82a":"#ploting the figure only\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(arbol,                   \n                   filled=True)\n","da1a2fbf":"##re-run the algorithm with another room's data (Room 421)\ndf421light=pd.read_csv('..\/input\/smart-building-system\/KETI\/421\/light.csv')\ndf421temp=pd.read_csv('..\/input\/smart-building-system\/KETI\/421\/temperature.csv')\ndf421co2=pd.read_csv('..\/input\/smart-building-system\/KETI\/421\/co2.csv')\ndf421pir=pd.read_csv('..\/input\/smart-building-system\/KETI\/421\/pir.csv')\ndf421hum=pd.read_csv('..\/input\/smart-building-system\/KETI\/421\/humidity.csv')","8670ad62":"df421pir.describe()","82d058ac":"df421pir[' 0.00'].unique()","f7e97073":"#change Unix Epoch Time to string (to use as label)\n\ndf421light['1377299111']=df421light['1377299111'].astype(str)\ndf421temp['1377299111']=df421temp['1377299111'].astype(str)\ndf421hum['1377299111']=df421hum['1377299111'].astype(str)","ec22ed86":"#merge light and humidity dfs\ndf421lh = pd.merge(df421light, df421hum, on='1377299111')","a922a6f2":"#combine uneven dataframes and fill NaNs with 0\ndf421lht = df421temp.merge(df421lh)\ndf421lht=df421lht.fillna(0)","30940c00":"df421co2['1377299119']=df421co2['1377299119'].astype(str)\ndf421pir['1377299123']=df421pir['1377299123'].astype(str)","46635136":"#updated label of dfs to match\ndf421co2.rename(columns = {\"1377299119\": \"Fri Aug 23 2013 11:05 PM GMT\",\n                          \" 373.00\": \"CO2 373.00\"},  \n           inplace = True) \ndf421lht.rename(columns = {\"1377299111\": \"Fri Aug 23 2013 11:05 PM GMT\",\n                          \" 22.84\": \"temp 22.84\",\n                          \" 52.87\": \"hum 52.87\",\n                          \" 195.00\": \"light 195.00\"},  \n           inplace = True)","ec8b2e98":"df421lhtco2 = pd.merge(df421lht, df421co2, on='Fri Aug 23 2013 11:05 PM GMT')\ndf421lhtco2=df421lhtco2.fillna(0)\ndf421lhtco2","b70fbce2":"df421pir.rename(columns = {\" 0.00\": \"PIR 0.00\"},  \n           inplace = True) \ndf421pir","549d70b9":"df421all= df421lhtco2.combine_first(df421pir)\ndf421all=df421all.fillna(0)","d846d6f8":"df421all.describe(include='all')","1bd36e36":"correlation2=df421all.corr()\ncorrelation2","1893dab8":"sns.heatmap(correlation2, cmap=\"Blues\")","7a5c2a9d":"#Target column\n#create a new columns stating if the room is occupied based on PIR\ndf421all['Occupied_Room'] = np.where(df421all['PIR 0.00']!= 0, True, False)\ndf421all","83d328ad":"#split the data\ntestdf2=df421all[['1377299123', 'CO2 373.00', 'Fri Aug 23 2013 11:05 PM GMT', 'PIR 0.00',\n       'hum 52.87', 'light 195.00', 'temp 22.84']]\n\n#all values in the df\nX = testdf2.values[:,:]\nY = df421all['Occupied_Room'].values","bc7345e2":"X_train, X_test, y_train, y_test = train_test_split( \n          X, Y, test_size = 0.3, random_state = 1)","7d99c27d":"# train another decision-tree algorithm to make predictions \n\nclassifier2 = DecisionTreeClassifier()\narbol2=classifier2.fit(X_train, y_train)\narbol2","273c72c5":"#make predictions\ny_pred = classifier2.predict(X_test)\ny_pred","c9fa897d":"print(confusion_matrix(y_test, y_pred))","f8874d90":"conf_matrix = metrics.confusion_matrix(y_test, y_pred)\nsns.heatmap(conf_matrix, annot=True,cmap='magma')","50a7fa1e":"print(classification_report(y_test, y_pred))","ee369705":"accuracy2=metrics.accuracy_score(y_test, y_pred)\naccuracy2","63524c08":"tree.plot_tree(arbol2)","9c90f666":"#visualization of tree only\nfig = plt.figure(figsize=(14,12))\n_ = tree.plot_tree(arbol2,                   \n                   filled=True)","86b2baf4":"Problem question:\nCan the CO2 concentration, room air humidity, room temperature, and luminosity data be used to identify whether a room has occupants or not? \n\nThe passive infrared (PIR) sensor measures the occupancy in a room (target label). \n\nTask:   \n1-Data visualization (heat maps, plotted confusion matrix, and decision trees), 2-Data cleaning (handling NaNs, datatypes, and labels),   \n3-Preprocessing (handling classification data, adapt colum to boolean),   \n4-feature engineering (defined boolean based on target needs),    \n5-model building (prepare decision tree algorithm),   \n6-model training (spliting the data and running algorthm),   \n7-evaluation code (F1 scores, accuracy, precision, recall, and confusion matrix).    \n\nResult:   \nUsing the algorithm below, it seems that CO2 concentration, room air humidity, room temperature, and luminosity could help predict if a room is occupied or not.","e03a0167":"Text file content:   \n","a3ec8ac5":"1377299111 UET is Fri, Aug 23, 2013 11:05:11 PM GMT   \nfor co2 in room 421, the date stamp is 1377299119,   \nor Fri, Aug 23, 2013 11:05:19 PM GMT   \nfor PIR is Friday, 1377299123 or  Aug 23, 2013 11:05:23 PM GMT   \nThe difference is only seconds apart.\n","3da0fc12":"Choosing a room to explore the data and create a model:   ","ab51241f":"The data includes Unix Epoch Time instead of datetime. For simplicity, update the label with UET. I change time to a string label to join dfs easier, but does not affect results. Then, merge dfs. Each df is an indicator (lights, co2, humidity, temperature, and PIR).","bc04d172":"The co2 and pir datasets for **Room 656** are uneven with the dataframes for temperature, light, and humidity. To address this, I fill NaNs with zeros 0.","d6ff1afe":"Confusion matrix","e029b532":"The labels differ for room 421 than those of room 656A. The amount or rows also differ. Only two dfs have the same dimensions, room 656A had 3 even dfs. The date stamps differ among dfs for this room, as well.","f1e46d95":"Compare algorithm performace by running same model in a different room:"}}