{"cell_type":{"304e8753":"code","dde14894":"code","6563ef10":"code","4e322797":"code","64e21723":"code","e2df09fc":"code","29672ec7":"code","1d31fd60":"code","0ac0a61a":"code","f43e0902":"code","0ae0a71a":"code","09f25f0f":"code","730dade1":"code","0966aa4a":"code","6064dc7e":"markdown","b005952b":"markdown","3d9db48c":"markdown","9ef93f38":"markdown","9f7c2ddf":"markdown","200b8c8a":"markdown","644a51e3":"markdown","1c5f90fb":"markdown"},"source":{"304e8753":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dde14894":"df = pd.read_csv(\"\/kaggle\/input\/bank-churn-modelling\/Churn_Modelling.csv\")\ndf.head()","6563ef10":"print(f\"Datasets length: {len(df)}\")\nfor col in df.columns:\n    print(f\"Unique values for {col}: {len(set(df[col]))}\")","4e322797":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(df, title=\"Customer churn\")\nprofile.to_widgets()","64e21723":"import pandas as pd\nimport seaborn as sns#visualization\nimport plotly.offline as py#visualization\npy.init_notebook_mode(connected=True)#visualization\nimport plotly.graph_objs as go#visualization\nimport plotly.tools as tls#visualization\nimport plotly.figure_factory as ff#visualization\nimport matplotlib.pyplot as plt\n\nlab = [\"No\", \"Yes\"]\n#values\nval = df[\"Exited\"].value_counts().values.tolist()\n\ntrace = go.Pie(labels = lab ,\n               values = val ,\n               name=\"Churn\",\n               marker = dict(colors =  [ 'royalblue' ,'lime'],\n                             line = dict(color = \"white\",\n                                         width =  1.3)\n                            ),\n               rotation = 90,\n               hoverinfo = \"label+value+text\",\n               hole = .5\n              )\nlayout = go.Layout(dict(title = \"Customer attrition in data\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                       )\n                  )\n\ndata = [trace]\nfig = go.Figure(data = data,layout = layout)\npy.iplot(fig)\n","e2df09fc":"import matplotlib as mpl\nmpl.style.use('ggplot')\nchurn     = df[df[\"Exited\"] == 1]\nnot_churn = df[df[\"Exited\"] == 0]\n\ndef plot_pie(column) :\n    \n    trace1 = go.Pie(values  = churn[column].value_counts().values.tolist(),\n                    labels  = churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    domain  = dict(x = [0,.48]),\n                    name    = \"Churn\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    hole    = .6\n                   )\n    trace2 = go.Pie(values  = not_churn[column].value_counts().values.tolist(),\n                    labels  = not_churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    domain  = dict(x = [.52,1]),\n                    hole    = .6,\n                    name    = \"Non churn\" \n                   )\n\n\n    layout = go.Layout(dict(title = column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            annotations = [dict(text = \"Churn\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .15, y = .5),\n                                           dict(text = \"Non churn\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .88,y = .5\n                                               )\n                                          ]\n                           )\n                      )\n    data = [trace2,trace1]\n    fig  = go.Figure(data = data,layout = layout)\n    py.iplot(fig)\n\n\n#function  for histogram for customer attrition types\ndef histogram(column) :\n    trace1 = go.Histogram(x  = churn[column],\n                          histnorm= \"percent\",\n                          name = \"Churn\",\n                          marker = dict(line = dict(width = .5,\n                                                    color = \"black\"\n                                                    )\n                                        ),\n                         opacity = .9 \n                         ) \n    \n    trace2 = go.Histogram(x  = not_churn[column],\n                          histnorm = \"percent\",\n                          name = \"Non churn\",\n                          marker = dict(line = dict(width = .5,\n                                              color = \"black\"\n                                             )\n                                 ),\n                          opacity = .9\n                         )\n    \n    data = [trace2,trace1]\n    layout = go.Layout(dict(title =column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = column,\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = \"percent\",\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                           )\n                      )\n    fig  = go.Figure(data=data,layout=layout)\n    \n    py.iplot(fig)\n    \n#function  for scatter plot matrix  for numerical columns in data\ndef scatter_matrix(df)  :\n    \n    df  = df.sort_values(by = \"Exited\" ,ascending = False)\n    classes = df[\"Exited\"].unique().tolist()\n    classes\n    \n    class_code  = {classes[k] : k for k in range(2)}\n    class_code\n\n    color_vals = [class_code[cl] for cl in df[\"Exited\"]]\n    color_vals\n\n    pl_colorscale = \"Portland\"\n\n    pl_colorscale\n\n    text = [df.loc[k,\"Exited\"] for k in range(len(df))]\n    text\n\n    trace = go.Splom(dimensions = [dict(label  = \"Tenure\",\n                                       values = df[\"Tenure\"]),\n                                  dict(label  = 'Balance',\n                                       values = df['Balance']),\n                                  dict(label  = 'EstimatedSalary',\n                                       values = df['EstimatedSalary'])],\n                     text = text,\n                     marker = dict(color = color_vals,\n                                   colorscale = pl_colorscale,\n                                   size = 3,\n                                   showscale = False,\n                                   line = dict(width = .1,\n                                               color='rgb(230,230,230)'\n                                              )\n                                  )\n                    )\n    axis = dict(showline  = True,\n                zeroline  = False,\n                gridcolor = \"#fff\",\n                ticklen   = 4\n               )\n    \n    layout = go.Layout(dict(title  = \n                            \"Scatter plot matrix for Numerical columns for customer attrition\",\n                            autosize = False,\n                            height = 800,\n                            width  = 800,\n                            dragmode = \"select\",\n                            hovermode = \"closest\",\n                            plot_bgcolor  = 'rgba(240,240,240, 0.95)',\n                            xaxis1 = dict(axis),\n                            yaxis1 = dict(axis),\n                            xaxis2 = dict(axis),\n                            yaxis2 = dict(axis),\n                            xaxis3 = dict(axis),\n                            yaxis3 = dict(axis),\n                           )\n                      )\n    data   = [trace]\n    fig = go.Figure(data = data,layout = layout )\n    py.iplot(fig)\n\n    \ncat_cols = [\"Geography\", \"Gender\", \"NumOfProducts\",\"HasCrCard\", \"IsActiveMember\"]\nnum_cols = [\"Age\", \"Balance\", \"EstimatedSalary\",\"CreditScore\",\"Tenure\"]\n#for all categorical columns plot pie\nfor i in cat_cols :\n    plot_pie(i)\n\n#for all categorical columns plot histogram    \nfor i in num_cols :\n    histogram(i)\n\n#scatter plot matrix\nscatter_matrix(df)","29672ec7":"correlation = df.corr()\n#tick labels\nmatrix_cols = correlation.columns.tolist()\n#convert to array\ncorr_array  = np.array(correlation)\n\n#Plotting\ntrace = go.Heatmap(z = corr_array,\n                   x = matrix_cols,\n                   y = matrix_cols,\n                   colorscale = \"Viridis\",\n                   colorbar   = dict(title = \"Pearson Correlation coefficient\",\n                                     titleside = \"right\"\n                                    ) ,\n                  )\n\nlayout = go.Layout(dict(title = \"Correlation Matrix for variables\",\n                        autosize = False,\n                        height  = 720,\n                        width   = 800,\n                        margin  = dict(r = 0 ,l = 210,\n                                       t = 25,b = 210,\n                                      ),\n                        yaxis   = dict(tickfont = dict(size = 9)),\n                        xaxis   = dict(tickfont = dict(size = 9))\n                       )\n                  )\n\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig)","1d31fd60":"from sklearn import preprocessing\nencs = {}\ncols = [\"Geography\", \"Gender\"]\nfor c in cols:\n    encs[c] = preprocessing.LabelEncoder()\n    encs[c].fit(df[c])\n    df[c] = encs[c].transform(df[c])\n    \ndf.head()","0ac0a61a":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale, normalize\n\npca = PCA(n_components = 2)\nId_col = ['RowNumber', 'CustomerId', 'Surname']\ntarget_col = [\"Exited\"]\nX = df[[i for i in df.columns if i not in Id_col + target_col]]\nXscal = scale(X)\nXnorm = normalize(X)\nY = df[target_col + Id_col]\n\n\ndef plot(X,Y, title):\n\n    principal_components = pca.fit_transform(X)\n    pca_data = pd.DataFrame(principal_components,columns = [\"PC1\",\"PC2\"])\n    pca_data = pca_data.merge(Y,left_index=True,right_index=True,how=\"left\")\n    pca_data[\"Churn\"] = pca_data[\"Exited\"].replace({1:\"Churn\",0:\"Not Churn\"})\n\n    \n    def pca_scatter(target,color) :\n        tracer = go.Scatter(x = pca_data[pca_data[\"Churn\"] == target][\"PC1\"] ,\n                            y = pca_data[pca_data[\"Churn\"] == target][\"PC2\"],\n                            name = target,mode = \"markers\",\n                            marker = dict(color = color,\n                                          line = dict(width = .5),\n                                          symbol =  \"diamond-open\"),\n                            text = (\"Customer Id : \" + \n                                    pca_data[pca_data[\"Churn\"] == target]['Surname'])\n                           )\n        return tracer\n\n    layout = go.Layout(dict(title = title,\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                         title = \"principal component 1\",\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                         title = \"principal component 2\",\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                            height = 600\n                           )\n                      )\n    trace1 = pca_scatter(\"Churn\",'red')\n    trace2 = pca_scatter(\"Not Churn\",'royalblue')\n    data = [trace2,trace1]\n    fig = go.Figure(data=data,layout=layout)\n    py.iplot(fig)\n\nplot(X,Y, \"Visualizing data with Principal Component Analysis on raw data\")\nplot(Xnorm,Y, \"Visualizing data with Principal Component Analysis on normalized data\")\nplot(Xscal,Y, \"Visualizing data with Principal Component Analysis on scaled data\")","f43e0902":"X = df[['CreditScore', 'Geography','Gender', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard','IsActiveMember']]\ny = df[\"Exited\"]","0ae0a71a":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.20, random_state=42)","09f25f0f":"import xgboost as xgb\n\nD_train = xgb.DMatrix(X_train, label=Y_train)\nD_test = xgb.DMatrix(X_test, label=Y_test)\n\nparam = {\n    'eta': 0.3, \n    'max_depth': 5,  \n    'objective': 'multi:softprob',  \n    'num_class': 2\n} \n\nsteps = 60  # The number of training iterations\n\nmodel = xgb.train(param, D_train, steps)\n\n","730dade1":"import numpy as np\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score\n\npreds = model.predict(D_test)\nbest_preds = np.asarray([np.argmax(line) for line in preds])\n\nprint(\"Precision = {}\".format(precision_score(Y_test, best_preds, average='macro')))\nprint(\"Recall = {}\".format(recall_score(Y_test, best_preds, average='macro')))\nprint(\"Accuracy = {}\".format(accuracy_score(Y_test, best_preds)))","0966aa4a":"# Feature importance\nfrom xgboost import plot_importance\nplot_importance(model)","6064dc7e":"# Correlation Matrix","b005952b":"# Distribution analysis of Churn and Non-Churn customers\n","3d9db48c":"# Principal Component Analysis","9ef93f38":"# Feature importance","9f7c2ddf":"# Customer Attrition\nCustomer attrition, also known as customer churn, customer turnover, or customer defection, is the loss of clients or customers.\n\nTelephone service companies, Internet service providers, pay TV companies, insurance firms, and alarm monitoring services, often use customer attrition analysis and customer attrition rates as one of their key business metrics because the cost of retaining an existing customer is far less than acquiring a new one. Companies from these sectors often have customer service branches which attempt to win back defecting clients, because recovered long-term customers can be worth much more to a company than newly recruited clients.\n\nCompanies usually make a distinction between voluntary churn and involuntary churn. Voluntary churn occurs due to a decision by the customer to switch to another company or service provider, involuntary churn occurs due to circumstances such as a customer's relocation to a long-term care facility, death, or the relocation to a distant location. In most applications, involuntary reasons for churn are excluded from the analytical models. Analysts tend to concentrate on voluntary churn, because it typically occurs due to factors of the company-customer relationship which companies control, such as how billing interactions are handled or how after-sales help is provided.\n\npredictive analytics use churn prediction models that predict customer churn by assessing their propensity of risk to churn. Since these models generate a small prioritized list of potential defectors, they are effective at focusing customer retention marketing programs on the subset of the customer base who are most vulnerable to churn.","200b8c8a":"# Prepare the dataset","644a51e3":"> # Model training and evaluation","1c5f90fb":"> # Data"}}