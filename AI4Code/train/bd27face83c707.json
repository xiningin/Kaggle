{"cell_type":{"d33f6ebe":"code","01a92fcf":"code","ac139524":"code","38b534e2":"code","da533173":"code","538a82ba":"code","b3862c8f":"code","ea0a8459":"code","d04754da":"code","e436a33b":"code","fb650d64":"code","6f3de2ae":"code","f4e26341":"code","412f0cff":"code","79530f37":"code","9269db02":"code","9e500bb9":"code","23a2f295":"code","9fe5d25e":"code","ce4a7ffb":"code","2cae6ba5":"code","56dfdf4c":"code","940bcb67":"code","da7a2190":"code","f6503737":"code","5f17a2dc":"code","1d6e166d":"code","0ba7b0d4":"code","053ca316":"code","82000393":"code","246c4eab":"code","4a53b3ba":"code","13b39521":"code","efa681d6":"code","26c9473a":"code","a6a4a43a":"code","d8c50edb":"code","12a66e39":"code","0b5f558a":"code","667ae574":"code","0866d53b":"code","cc0c48cf":"code","addd40b8":"code","1838212b":"code","8f501ad3":"code","308fc69e":"code","dd09ca02":"code","5d04b823":"code","9da61469":"code","7135796e":"code","48807577":"code","6b83fb74":"code","511cf708":"code","c871c73e":"code","41202ddd":"code","314f7e66":"code","899984ed":"code","7664c55d":"code","5247e2ca":"code","37bfff21":"code","f26ff143":"code","e02f2a75":"code","40972d85":"code","e5d9f202":"code","8f0a191a":"code","afaa1ad0":"code","5d10404e":"code","eafd4ca0":"code","cb749ca4":"code","3da0f338":"code","27c9169f":"code","357ba813":"code","b15ac61c":"code","fab57a6f":"code","5dbd8746":"code","1e766777":"code","a41f91f9":"code","48e84ea7":"markdown","28a076bb":"markdown","177ce75f":"markdown","f411b7fd":"markdown","771c54d8":"markdown","0aebc724":"markdown","654eda89":"markdown","e77f209e":"markdown","0d51bcde":"markdown","d8361751":"markdown","6796fcbb":"markdown","37847147":"markdown","d0d6f49b":"markdown","4e686abb":"markdown","5d9daf04":"markdown","09c99994":"markdown","4e0486c9":"markdown","620fc8c7":"markdown","c2d67fb9":"markdown","e24ef647":"markdown","a17623bc":"markdown","4475e4c3":"markdown","5489aa3b":"markdown","b2517990":"markdown","df5a25a6":"markdown","a5d37ce4":"markdown","64602303":"markdown","a82e2d34":"markdown","cb47a6fe":"markdown","ef2208eb":"markdown","9d26f7e8":"markdown","558fae16":"markdown","81d7448a":"markdown","2380919a":"markdown","30bd4736":"markdown","6c0577c7":"markdown","0e7e8fda":"markdown","b1a24b9d":"markdown","e608577c":"markdown","0472ae42":"markdown","a83563a0":"markdown","74628c4b":"markdown","dca88105":"markdown","be59872b":"markdown","2aab9aab":"markdown","6d4c59a3":"markdown","0e413f9d":"markdown","76ba39de":"markdown","64b37e44":"markdown","5c43ddaa":"markdown","dc0ea3ff":"markdown","84c9f30e":"markdown","85bea8e9":"markdown","a9108ff1":"markdown","9b21a591":"markdown","64aa360a":"markdown","68941d47":"markdown","b24edda7":"markdown","21061fc8":"markdown","e140f84a":"markdown","550c3371":"markdown","46a51f17":"markdown","f4ce2d41":"markdown"},"source":{"d33f6ebe":"# Import packages\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nsns.set(style=\"white\", font_scale=1.2)\n","01a92fcf":"# Load dataframes\n\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","ac139524":"df_train.head()","38b534e2":"df_test.head()","da533173":"# Info to see rows, columns and missing values\n\ndf_train.info()","538a82ba":"df_test.info()","b3862c8f":"df_train.describe()","ea0a8459":"df_train.describe(include='O')","d04754da":"# Heatmap of missing values in train and test dataframes\n\nfig, axes = plt.subplots(1, 2, figsize=(12,4))\n# Train\nsns.heatmap(df_train.isnull(), cmap='viridis', cbar=False, yticklabels=False, ax=axes[0])\naxes[0].set_title('TRAIN DF')\n\n#Test\nsns.heatmap(df_test.isnull(), cmap='viridis', cbar=False, yticklabels=False, ax=axes[1])\naxes[1].set_title('TEST DF')","e436a33b":"# Function to check missing values in each dataframe\n\ndef check_missing_values(df, df_name=None):\n    print(f'{df_name} - Missing values:')\n    print('-'*30)\n    columns = df.columns\n\n    for column in columns:\n        count_missing_values = df[column].isnull().sum()\n        missing_values = (count_missing_values \/ len(df[column])) * 100\n    \n        if missing_values !=0:\n            print(f'{column} --> {count_missing_values} values | {missing_values:.2f}%')","fb650d64":"check_missing_values(df_train, 'TRAIN')","6f3de2ae":"check_missing_values(df_test, 'TEST')","f4e26341":"# Drop PasserngerId, Cabin and Ticket\n# Drop Name also (maybe latter I can fix this and try to use Name)\ndf_train.drop(['PassengerId', 'Cabin', 'Ticket'], axis=1, inplace=True)\n\nsubmission = pd.DataFrame()\nsubmission['PassengerId'] = df_test['PassengerId']\ndf_test.drop(['PassengerId', 'Cabin', 'Ticket'], axis=1, inplace=True)","412f0cff":"print('df_train shape:',df_train.shape)\nprint('df_test shape:',df_test.shape)","79530f37":"df_train.head()","9269db02":"df_train.hist(bins=15, figsize=(10, 7))\nplt.tight_layout()","9e500bb9":"fig, axes = plt.subplots(1, 4, figsize=(20,5))\n\nsns.distplot(df_train['Age'].dropna(), kde=False, bins=30, ax=axes[0])\naxes[0].set_title('Age Distribution overall')\n\nsns.distplot(df_train[df_train['Sex']=='male']['Age'].dropna(),\n             kde=False, color='blue', bins=30, ax=axes[1])\naxes[1].set_title('Age Distribution (Male)')\n\nsns.distplot(df_train[df_train['Sex']=='female']['Age'].dropna(),\n             kde=False, color='orange', bins=30, ax=axes[2])\naxes[2].set_title('Age Distribution (Female)')\n\nsns.kdeplot(df_train[df_train['Sex']=='male']['Age'].dropna(),\n            color='blue', ax=axes[3])\nsns.kdeplot(df_train[df_train['Sex']=='female']['Age'].dropna(),\n            color='orange', ax=axes[3])","23a2f295":"fig, axes = plt.subplots(1, 2, figsize=(12,5))\n\nsns.countplot(x='Sex', data=df_train, ax=axes[0])\naxes[0].set_title('Number of males and females')\n\nsns.countplot(x='Sex', hue='Survived', data=df_train, ax=axes[1], palette='Set3')\naxes[1].set_title('Survival by sex')\naxes[1].set_ylabel('')","9fe5d25e":"fig, axes = plt.subplots(1, 3, figsize=(16,5))\n\nsns.countplot(x='Pclass', data=df_train, ax=axes[0], palette='Set1')\naxes[0].set_title('Number of people in each Pclass')\n\nsns.countplot(x='Pclass', hue='Sex', data=df_train, ax=axes[1])\naxes[1].set_title('Sex by Pclass')\naxes[1].set_ylabel('')\n\nsns.countplot(x='Pclass', hue='Survived', data=df_train, ax=axes[2], palette='Set3')\naxes[2].set_title('Survival by Pclass')\naxes[2].set_ylabel('')\n\nplt.tight_layout()","ce4a7ffb":"fig, axes = plt.subplots(1, 3, figsize=(16,5))\n\nsns.countplot(x='Embarked', data=df_train, ax=axes[0], palette='Set1')\naxes[0].set_title('Number of people in each Embarkation')\n\nsns.countplot(x='Embarked', hue='Sex', data=df_train, ax=axes[1])\naxes[1].set_title('Sex by Embarcation')\naxes[1].set_ylabel('')\n\nsns.countplot(x='Embarked', hue='Survived', data=df_train, ax=axes[2], palette='Set3')\naxes[2].set_title('Survival by Embarcation')\naxes[2].set_ylabel('')\n\nplt.tight_layout()","2cae6ba5":"fig, axes = plt.subplots(1, 3, figsize=(14,5))\n\nsns.pointplot(x ='Sex', y=\"Survived\", data=df_train, ax=axes[0])\naxes[0].set_title('Survival by Sex')\n\nsns.pointplot(x ='Pclass', y=\"Survived\", data=df_train, ax=axes[1])\naxes[1].set_title('Survival by Pclass')\naxes[1].set_ylabel('')\n\nsns.pointplot(x ='Embarked', y=\"Survived\", data=df_train, ax=axes[2])\naxes[2].set_title('Survival by Embarkation')\naxes[2].set_ylabel('')\n\nfor ax in axes:\n    ax.set_yticks(np.arange(0, 1.1, 0.1))\n\nplt.tight_layout()","56dfdf4c":"sns.boxplot(x='Survived', y='Age', data=df_train, palette='Set3')\nplt.title('Survival by Age')","940bcb67":"sns.boxplot(x='Survived', y='Fare', data=df_train)\nplt.title('Survival by Fare')","da7a2190":"df_train.corr()['Survived']","f6503737":"plt.figure(figsize=(8,8))\n\nsns.heatmap(df_train.corr(), annot=True, cmap='magma', square=True,\n            linecolor=\"white\", linewidths=0.1)\nplt.title('Correlations between variables')","5f17a2dc":"check_missing_values(df_train, 'DF TRAIN')","1d6e166d":"check_missing_values(df_test, 'DF TEST')","0ba7b0d4":"df_train['Familysize'] = df_train['SibSp'] + df_train['Parch']\n\ndf_test['Familysize'] = df_test['SibSp'] + df_test['Parch']","053ca316":"# 1 if is alone, 0 if has family members\ndf_train['Alone'] = df_train['Familysize'].apply(lambda x: 1 if x == 0 else 0)\n\ndf_test['Alone'] = df_test['Familysize'].apply(lambda x: 1 if x == 0 else 0)","82000393":"df_train[df_train['Embarked'].isnull()]","246c4eab":"fig, axes = plt.subplots(2, 2, figsize=(16,8))\n\nsns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=df_train, ax=axes[0,0])\n\nsns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Sex\", data=df_train, ax=axes[0,1])\n\nsns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Survived\", data=df_train, ax=axes[1,0])\n\nsns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Alone\", data=df_train, ax=axes[1,1])\n\nplt.tight_layout()","4a53b3ba":"df_train['Embarked'] = df_train['Embarked'].fillna('C')","13b39521":"df_test[df_test['Fare'].isnull()]","efa681d6":"median_fare = df_test[(df_test['Pclass'] == 3) & (df_test['Embarked'] == 'S') & (df_test['Alone'] == 1)]['Fare'].median()\n\nmedian_fare","26c9473a":"df_test['Fare'] = df_test['Fare'].fillna(median_fare)","a6a4a43a":"plt.figure(figsize=(12, 7))\n\ntestPlot = sns.boxplot(x='Pclass', y='Age', hue='Sex', data=df_train)\n\nm1 = df_train.groupby(['Pclass', 'Sex'])['Age'].median().values\nmL1 = [str(np.round(s, 2)) for s in m1]\n\nind = 0\nfor tick in range(len(testPlot.get_xticklabels())):\n    testPlot.text(tick-.2, m1[ind+1]+1, mL1[ind+1],  horizontalalignment='center',  color='w', weight='semibold')\n    testPlot.text(tick+.2, m1[ind]+1, mL1[ind], horizontalalignment='center', color='w', weight='semibold')\n    ind += 2\n\n# Display median values from: https:\/\/stackoverflow.com\/questions\/45475962\/labeling-boxplot-with-median-values\/45476485","d8c50edb":"# Get median value for Age based on Pclass and Sex (Not having survive\/die in account, for now)\n\ndef get_age(cols):\n    age = cols[0]\n    pclass = cols[1]\n    sex = cols[2]\n    \n    if pd.isnull(age):\n\n        if pclass == 1:\n            if sex == 'male':\n                return 40\n            else:\n                return 35\n\n        elif pclass == 2:\n            if sex == 'male':\n                return 30\n            else:\n                return 28\n\n        else:\n            if sex == 'male':\n                return 25\n            else:\n                return 21.5\n            \n    else:\n        return age","12a66e39":"df_train['Age'] = df_train[['Age','Pclass', 'Sex']].apply(get_age, axis=1)\n\ndf_test['Age'] = df_test[['Age','Pclass', 'Sex']].apply(get_age, axis=1)","0b5f558a":"def get_title(name):\n    for string in name.split():\n        if '.' in string:\n            return string[:-1]","667ae574":"df_train['Title'] = df_train['Name'].apply(lambda x: get_title(x))\n\ndf_test['Title'] = df_test['Name'].apply(lambda x: get_title(x))","0866d53b":"df_train['Title'].value_counts()","cc0c48cf":"df_train.drop('Name', axis=1, inplace=True)\ndf_test.drop('Name', axis=1, inplace=True)","addd40b8":"for dataframe in [df_train, df_test]:\n    \n    dataframe['Title'] = dataframe['Title'].replace(['Lady', 'Capt', 'Col','Don', 'Dr', \n                                                 'Major', 'Rev', 'Sir', 'Dona', 'Countess', 'Jonkheer'], 'Other')\n\n    dataframe['Title'] = dataframe['Title'].replace('Mlle', 'Miss')\n    dataframe['Title'] = dataframe['Title'].replace('Ms', 'Miss')\n    dataframe['Title'] = dataframe['Title'].replace('Mme', 'Mrs')","1838212b":"sex = pd.get_dummies(df_train['Sex'], prefix='Sex', drop_first=True)\nembarked = pd.get_dummies(df_train['Embarked'], prefix='Embarked', drop_first=True)\npclass = pd.get_dummies(df_train['Pclass'], prefix='Pclass', drop_first=True)\ntitle = pd.get_dummies(df_train['Title'], prefix='Title', drop_first=True)\n\ndf_train.drop(['Sex', 'Embarked', 'Pclass', 'Title'], axis=1, inplace=True)\n\ndf_train = pd.concat([df_train, sex, embarked, pclass, title], axis=1)","8f501ad3":"print('df_train shape:',df_train.shape)\ndf_train.head()","308fc69e":"sex = pd.get_dummies(df_test['Sex'], prefix='Sex', drop_first=True)\nembarked = pd.get_dummies(df_test['Embarked'], prefix='Embarked',drop_first=True)\npclass = pd.get_dummies(df_test['Pclass'], prefix='Pclass',drop_first=True)\ntitle = pd.get_dummies(df_test['Title'], prefix='Title', drop_first=True)\n\ndf_test.drop(['Sex', 'Embarked', 'Pclass', 'Title'], axis=1, inplace=True)\n\ndf_test = pd.concat([df_test, sex, embarked, pclass, title], axis=1)","dd09ca02":"print('df_test shape:',df_test.shape)\ndf_train.head()","5d04b823":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ndf_train[['Age', 'Fare']] = scaler.fit_transform(df_train[['Age', 'Fare']])\n\ndf_test[['Age', 'Fare']] = scaler.transform(df_test[['Age', 'Fare']])","9da61469":"df_train.corr()['Survived'].sort_values()[:-1]","7135796e":"df_train.corr()['Survived'].sort_values()[:-1].plot.bar()","48807577":"from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, make_scorer","6b83fb74":"X = df_train.drop('Survived', axis=1)\ny = df_train['Survived']","511cf708":"X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=1)","c871c73e":"# Dictionary with each prediction\npredictions = {}","41202ddd":"from sklearn.linear_model import LogisticRegression","314f7e66":"logreg = LogisticRegression(random_state=121)\n\nlogreg.fit(X_train, y_train)\n\ny_pred = logreg.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Accuracy:', accuracy)","899984ed":"logreg = LogisticRegression(random_state=121)\n\nparam_grid = {\n    'penalty': ['l1', 'l2', 'elasticnet'],\n    'C': [0.01, 0.05, 0.1, 0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,16.5,17,18],\n    'solver': ['liblinear','saga']}","7664c55d":"model = GridSearchCV(logreg, param_grid=param_grid, scoring='accuracy', cv=10, n_jobs=-1)\n\nmodel.fit(X_train, y_train)\n\nprint('Best Params:', model.best_params_)","5247e2ca":"best_lr = LogisticRegression(C=0.9, penalty='l1', solver='liblinear')\nbest_lr.fit(X_train, y_train)\ny_pred = best_lr.predict(X_test)","37bfff21":"print(f'Accuracy: {accuracy_score(y_test, y_pred)*100:.2f}%')\nprint('-'*55)\nprint(classification_report(y_test, y_pred))\nprint('-'*55)\nprint(confusion_matrix(y_test, y_pred))","f26ff143":"from sklearn.neighbors import KNeighborsClassifier","e02f2a75":"error_rate = []\n\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    \n    pred_i = knn.predict(X_test)\n    \n    error_rate.append(np.mean(pred_i != y_test))","40972d85":"# Plot Error rate vs Number of neighbors\nplt.figure(figsize=(10,6))\nplt.plot(range(1,40), error_rate,\n         color='blue', ls='--',\n         marker='o', markerfacecolor='red', markersize=10)\nplt.xlabel('Neighbors')\nplt.ylabel('Error rate')\nplt.title('Error rate vs Number of neighbors')","e5d9f202":"knn = KNeighborsClassifier(n_neighbors=25)\nknn.fit(X_train, y_train)\n\ny_pred = knn.predict(X_test)","8f0a191a":"print(f'Accuracy: {accuracy_score(y_test, y_pred)*100:.2f}%')\nprint('-'*55)\nprint(classification_report(y_test, y_pred))\nprint('-'*55)\nprint(confusion_matrix(y_test, y_pred))","afaa1ad0":"from sklearn.ensemble import RandomForestClassifier","5d10404e":"rf = RandomForestClassifier(random_state=121)\n\nrf.fit(X_train, y_train)\n\ny_pred = rf.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy:', accuracy)","eafd4ca0":"#rf = RandomForestClassifier(random_state=121)\n#param_grid = {\n#    'criterion':['giny', 'entropy'],\n#    'n_estimators':[50, 100, 500, 750, 1000],\n#    'max_depth':[5, 8, 15, 25, 30],\n#    'min_samples_split':[2, 5, 10, 15, 100],\n#    'min_samples_leaf':[1, 5, 10]}","cb749ca4":"#model = GridSearchCV(rf, param_grid=param_grid, cv=5, n_jobs=-1)\n\n#model.fit(X_train, y_train)\n\n#print('Best Params:', model.best_params_)","3da0f338":"best_rf = RandomForestClassifier(random_state=121, criterion='entropy', max_depth=15, min_samples_leaf=5, min_samples_split=2, n_estimators=50)\n\nbest_rf.fit(X_train, y_train)\n\ny_pred = best_rf.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)","27c9169f":"print(f'Accuracy: {accuracy_score(y_test, y_pred)*100:.2f}%')\nprint('-'*55)\nprint(classification_report(y_test, y_pred))\nprint('-'*55)\nprint(confusion_matrix(y_test, y_pred))","357ba813":"from xgboost import XGBClassifier","b15ac61c":"xgb = XGBClassifier(random_state=121)\n\nxgb.fit(X_train, y_train)\n\ny_pred = xgb.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy:', accuracy)","fab57a6f":"classifiers = [('Logistic Regression', best_lr),\n               ('KNN', knn),\n               ('Random Forest', best_rf),\n               ('Xgboost', xgb)]\n\nfor name_clf, clf in classifiers:\n    y_pred = clf.predict(X_test)\n    acc = accuracy_score(y_test, y_pred)\n    print(f'{name_clf} accuracy: {round(acc, 3)}%')","5dbd8746":"from sklearn.ensemble import VotingClassifier","1e766777":"vc = VotingClassifier(estimators=classifiers)\n\nvc.fit(X_train, y_train)\n\ny_pred = vc.predict(X_test)\n\nacc_vc = accuracy_score(y_test, y_pred)\n\nprint(f'Ensembler Accuracy: {round(acc_vc, 3)}%')","a41f91f9":"vc.fit(X, y)\nprediction = vc.predict(df_test)\n\nsubmission['Survived'] = prediction\n\nsubmission.to_csv('Submission.csv', index=False)","48e84ea7":"- The distributions by sex are similar\n\n- There are extreme values (outliers?)","28a076bb":"#### Extract Title from Name","177ce75f":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Introduction\" data-toc-modified-id=\"Introduction-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Introduction<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Import-Libraries-and-Data\" data-toc-modified-id=\"Import-Libraries-and-Data-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>Import Libraries and Data<\/a><\/span><\/li><li><span><a href=\"#Check-dataframes\" data-toc-modified-id=\"Check-dataframes-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>Check dataframes<\/a><\/span><\/li><li><span><a href=\"#Checking-missing-values\" data-toc-modified-id=\"Checking-missing-values-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;<\/span>Checking missing values<\/a><\/span><\/li><li><span><a href=\"#Summary-of-Variables-and-what-to-do-with-each-one\" data-toc-modified-id=\"Summary-of-Variables-and-what-to-do-with-each-one-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;<\/span>Summary of Variables and what to do with each one<\/a><\/span><\/li><li><span><a href=\"#Drop-useless-variables\" data-toc-modified-id=\"Drop-useless-variables-1.5\"><span class=\"toc-item-num\">1.5&nbsp;&nbsp;<\/span>Drop useless variables<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Data-Visualization\" data-toc-modified-id=\"Data-Visualization-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Data Visualization<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#First-look-visualizations\" data-toc-modified-id=\"First-look-visualizations-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>First look visualizations<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Distrubution-of-each-variable\" data-toc-modified-id=\"Distrubution-of-each-variable-2.1.1\"><span class=\"toc-item-num\">2.1.1&nbsp;&nbsp;<\/span>Distrubution of each variable<\/a><\/span><\/li><li><span><a href=\"#Age-distribution\" data-toc-modified-id=\"Age-distribution-2.1.2\"><span class=\"toc-item-num\">2.1.2&nbsp;&nbsp;<\/span>Age distribution<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Categorical-Variables\" data-toc-modified-id=\"Categorical-Variables-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;<\/span>Categorical Variables<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Sex\" data-toc-modified-id=\"Sex-2.2.1\"><span class=\"toc-item-num\">2.2.1&nbsp;&nbsp;<\/span>Sex<\/a><\/span><\/li><li><span><a href=\"#Pclass\" data-toc-modified-id=\"Pclass-2.2.2\"><span class=\"toc-item-num\">2.2.2&nbsp;&nbsp;<\/span>Pclass<\/a><\/span><\/li><li><span><a href=\"#Embarked\" data-toc-modified-id=\"Embarked-2.2.3\"><span class=\"toc-item-num\">2.2.3&nbsp;&nbsp;<\/span>Embarked<\/a><\/span><\/li><li><span><a href=\"#Survival-rates\" data-toc-modified-id=\"Survival-rates-2.2.4\"><span class=\"toc-item-num\">2.2.4&nbsp;&nbsp;<\/span>Survival rates<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Numerical-variables\" data-toc-modified-id=\"Numerical-variables-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;<\/span>Numerical variables<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Age\" data-toc-modified-id=\"Age-2.3.1\"><span class=\"toc-item-num\">2.3.1&nbsp;&nbsp;<\/span>Age<\/a><\/span><\/li><li><span><a href=\"#Fare\" data-toc-modified-id=\"Fare-2.3.2\"><span class=\"toc-item-num\">2.3.2&nbsp;&nbsp;<\/span>Fare<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Correlations\" data-toc-modified-id=\"Correlations-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;<\/span>Correlations<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Data-manipulation\" data-toc-modified-id=\"Data-manipulation-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Data manipulation<\/a><\/span><ul class=\"toc-item\"><li><ul class=\"toc-item\"><li><span><a href=\"#Create-variable:-Familysize\" data-toc-modified-id=\"Create-variable:-Familysize-3.0.1\"><span class=\"toc-item-num\">3.0.1&nbsp;&nbsp;<\/span>Create variable: Familysize<\/a><\/span><\/li><li><span><a href=\"#Create-variable:-Alone\" data-toc-modified-id=\"Create-variable:-Alone-3.0.2\"><span class=\"toc-item-num\">3.0.2&nbsp;&nbsp;<\/span>Create variable: Alone<\/a><\/span><\/li><li><span><a href=\"#Fill-Embarked-values-(df_train)\" data-toc-modified-id=\"Fill-Embarked-values-(df_train)-3.0.3\"><span class=\"toc-item-num\">3.0.3&nbsp;&nbsp;<\/span>Fill Embarked values (df_train)<\/a><\/span><\/li><li><span><a href=\"#Fill-Fare-value-(df_test)\" data-toc-modified-id=\"Fill-Fare-value-(df_test)-3.0.4\"><span class=\"toc-item-num\">3.0.4&nbsp;&nbsp;<\/span>Fill Fare value (df_test)<\/a><\/span><\/li><li><span><a href=\"#Fill-Age-values\" data-toc-modified-id=\"Fill-Age-values-3.0.5\"><span class=\"toc-item-num\">3.0.5&nbsp;&nbsp;<\/span>Fill Age values<\/a><\/span><\/li><li><span><a href=\"#Extract-Title-from-Name\" data-toc-modified-id=\"Extract-Title-from-Name-3.0.6\"><span class=\"toc-item-num\">3.0.6&nbsp;&nbsp;<\/span>Extract Title from Name<\/a><\/span><\/li><li><span><a href=\"#Handle-Title\" data-toc-modified-id=\"Handle-Title-3.0.7\"><span class=\"toc-item-num\">3.0.7&nbsp;&nbsp;<\/span>Handle Title<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Encoding-variables-(Dummies)\" data-toc-modified-id=\"Encoding-variables-(Dummies)-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;<\/span>Encoding variables (Dummies)<\/a><\/span><\/li><li><span><a href=\"#Scaling-Age-and-Fare-variables\" data-toc-modified-id=\"Scaling-Age-and-Fare-variables-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;<\/span>Scaling Age and Fare variables<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Algorithms\" data-toc-modified-id=\"Algorithms-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Algorithms<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Logistic-Regression\" data-toc-modified-id=\"Logistic-Regression-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>Logistic Regression<\/a><\/span><\/li><li><span><a href=\"#KNN\" data-toc-modified-id=\"KNN-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>KNN<\/a><\/span><\/li><li><span><a href=\"#Random-Forest\" data-toc-modified-id=\"Random-Forest-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;<\/span>Random Forest<\/a><\/span><\/li><li><span><a href=\"#XGBOOST\" data-toc-modified-id=\"XGBOOST-4.4\"><span class=\"toc-item-num\">4.4&nbsp;&nbsp;<\/span>XGBOOST<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Results\" data-toc-modified-id=\"Results-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Results<\/a><\/span><\/li><li><span><a href=\"#Ensemble\" data-toc-modified-id=\"Ensemble-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Ensemble<\/a><\/span><\/li><li><span><a href=\"#Submision\" data-toc-modified-id=\"Submision-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;<\/span>Submision<\/a><\/span><\/li><li><span><a href=\"#To-do-list\" data-toc-modified-id=\"To-do-list-8\"><span class=\"toc-item-num\">8&nbsp;&nbsp;<\/span>To do list<\/a><\/span><\/li><\/ul><\/div>","f411b7fd":"# Titanic - Clasification Problem","771c54d8":"#### Fill Age values","0aebc724":"## Ensemble","654eda89":"#### Fare","e77f209e":"### Encoding variables (Dummies)","0d51bcde":"#### Age distribution","d8361751":"**Base line**","6796fcbb":"**Base Line**","37847147":"**TRAIN DF**","d0d6f49b":"**Choosing best K value**","4e686abb":"#### Handle Title","5d9daf04":"#### Pclass","09c99994":"## Data Visualization","4e0486c9":"#### Fill Embarked values (df_train)","620fc8c7":"I tried with 3, 5 and 25 neighbors and **25** was the best on the submission.","c2d67fb9":"## Introduction","e24ef647":"### KNN","a17623bc":"- Pclass and Fare are the most correlated, but not much.","4475e4c3":"### Drop useless variables","5489aa3b":"Best Params: {'criterion': 'entropy', 'max_depth': 15, 'min_samples_leaf': 5, 'min_samples_split': 2, 'n_estimators': 50}","b2517990":"#### Distrubution of each variable","df5a25a6":"- There are more males than females\n\n- Males tend to die, Females tend to survive","a5d37ce4":"## Results","64602303":"### First look visualizations","a82e2d34":"**Tuned parameters**","cb47a6fe":"#### Create variable: Alone","ef2208eb":"### Import Libraries and Data","9d26f7e8":"- Age and Fare on different scale","558fae16":"In a first view we see that:\n\n- Cabin contain too many values in the train and test dataframes, so we'll delete that variable.\n\n- There are many Age values missing, we'll deal with them later. Around 20% in each dataframe\n\n- 2 Embarked  missing in TRAIN DF\n\n- 1 Fare missing in TEST DF","81d7448a":"## Algorithms","2380919a":"### Categorical Variables","30bd4736":"**Tunned parameters**","6c0577c7":"- More people in third class\n- Higher ratio Survive:Die in third class\n- More men than women die indepentedly of the class","0e7e8fda":"### XGBOOST","b1a24b9d":"#### Age","e608577c":"- Create **Family size** (Family = SibSp + Parch) and **Alone** if doesn't have family members\n\n- Fill all the missing values of **Age** in both dataframes (with mean based on Sex and Pclass) -> Maybe use some algorithm to predict them, in a future project.\n\n- Fill 2 values of **Emarked** from df_train with the most common one or check in relation with other variables\n\n- Fill 1 value of **Fare** from df_test","0472ae42":"### Random Forest ","a83563a0":"### Checking missing values","74628c4b":"We can see that both missing values share the variables: Fare, Pclass, Sex, Survived, Alone.","dca88105":"### Correlations","be59872b":"**TEST DF**","2aab9aab":"### Check dataframes","6d4c59a3":"### Summary of Variables and what to do with each one\n\n* **PassengerId**: Unique identification of the passenger. -> _Delete_\n* **Survived**: Survival (0 = No, 1 = Yes). -> _Ready_\n* **Pclass**: Ticket class (1 = 1st, 2 = 2nd, 3 = 3rd). -> _Encode (categorical)_\n* **Name**: Name of the passenger. -> _Still don't know_\n* **Sex**: Sex. -> _Encode (categorical)_\n* **Age**: Age in years. -> _Fill missing values in an easy way and maybe group in intervals_\n* **SibSp**: # of siblings \/ spouses aboard the Titanic. -> _Ready_\n* **Parch**: # of parents \/ children aboard the Titanic. -> _Ready_\n* **Ticket**: Ticket number. -> _Delete?_\n* **Fare**: Passenger fare. -> _Maybe group in intervals_\n* **Cabin**: Cabin number. -> _Delete_\n* **Embarked**: Port of Embarkation. _Encode (categorical)_","0e413f9d":"Based on the median values of the plots seems likely to be 'C' > 'S', definitely is not Q. I'll go with C since Pclass, Sex and Survived point to that.","76ba39de":"Fit the ensembler with the full dataset, to make prediction in the test dataset","64b37e44":"#### Embarked","5c43ddaa":"**Tunned parameters**","dc0ea3ff":"#### Sex","84c9f30e":"## Submision","85bea8e9":"## To do list\n\n- Group age\/fare in intervals\n\n- Hyperparameters KNN and XGBOOST","a9108ff1":"### Numerical variables","9b21a591":"#### Create variable: Familysize","64aa360a":"#### Fill Fare value (df_test)","68941d47":"### Scaling Age and Fare variables","b24edda7":"### Logistic Regression","21061fc8":"Best Params: {'C': 0.9, 'penalty': 'l1', 'solver': 'liblinear'}","e140f84a":"#### Survival rates","550c3371":"## Data manipulation","46a51f17":"**Drop Name**","f4ce2d41":"**Base Line**"}}