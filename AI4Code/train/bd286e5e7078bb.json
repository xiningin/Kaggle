{"cell_type":{"f0df9558":"code","cf21266c":"code","35be94ad":"code","4ae69e58":"code","8d2c2b4c":"code","4e8d32d4":"code","66931b07":"code","494f411b":"code","62c4584c":"code","f69ec4c4":"code","ba216e48":"code","21279c18":"code","7e44e853":"code","5b8569bf":"code","d09f63c0":"code","e6e25764":"code","1b775d31":"code","37f202b1":"code","cf044025":"code","1cc35521":"code","e83dff7f":"code","331c494b":"code","21974610":"code","ebfc1c30":"markdown","8509b442":"markdown","d39ceb38":"markdown","bb0b392e":"markdown","1d25a02b":"markdown","ef552a5e":"markdown","6f5dfb4c":"markdown","0227bf05":"markdown","deaa1682":"markdown","d4ab6bb8":"markdown","2b8d5e7b":"markdown","406eaf72":"markdown"},"source":{"f0df9558":"#==============================================================================\n# Import libraries\n#==============================================================================\nimport numpy as np\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.ticker as mtick # For specifying the axes tick format \nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#machine learning libraries\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score\n","cf21266c":"df = pd.read_csv ('..\/input\/sample_submission.csv')","35be94ad":"\ndf.head()","4ae69e58":"actualsale=df['SalePrice']\nactualsale","8d2c2b4c":"train=pd.read_csv('..\/input\/train.csv')\n\n","4e8d32d4":"train.head()","66931b07":"train.isnull().sum()","494f411b":"train.describe()","62c4584c":"train.info()\ntrain.columns\n","f69ec4c4":"test=pd.read_csv('..\/input\/test.csv')\ntest\ntest.shape\ntest.head()\n\ntest_features=test[['OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd','YearBuilt','YearRemodAdd','GarageYrBlt','MasVnrArea','Fireplaces','EnclosedPorch','MSSubClass','OverallCond','YrSold','LowQualFinSF','MiscVal','BsmtHalfBath','BsmtFinSF2','Street','Neighborhood','ExterCond','Condition1','ExterQual']]\ntest_features.head()\n\n\nfrom sklearn.preprocessing import LabelEncoder\nX_labelencoder = LabelEncoder()\ntest_features.iloc[:, 21] = X_labelencoder.fit_transform(test_features.iloc[:, 21])\ntest_features.iloc[:,22] = X_labelencoder.fit_transform(test_features.iloc[:, 22])\ntest_features.iloc[:,23] = X_labelencoder.fit_transform(test_features.iloc[:, 23])\ntest_features.iloc[:, 24] = X_labelencoder.fit_transform(test_features.iloc[:, 24])\ntest_features.iloc[:, 25] = X_labelencoder.fit_transform(test_features.iloc[:, 25])\n\ntest_features.head()\n\n\n\nfrom sklearn.preprocessing import Imputer\n# First create an Imputer , Stratergy means what we want to write in place of missed value\nmissingValueImputer = Imputer (missing_values = 'NaN', strategy = 'mean', \n                               axis = 0)  #if missing values are represented by 9999 then write same here\n# Set which columns imputer should perform\nmissingValueImputer = missingValueImputer.fit (test_features.iloc[:,:])\n# update values of X with new values\ntest_features.iloc[:,:] = missingValueImputer.transform(test_features.iloc[:,:])\n\n\ntest_features.info()","ba216e48":"dv=train.iloc[:,80]\niv=train.iloc[:,:80]\n\nX=iv.drop([\"Utilities\", \"Condition2\", \"HouseStyle\", \"RoofStyle\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\", \"Heating\", \"Electrical\", \"GarageQual\", \"PoolQC\", \"MiscFeature\"], axis=1)\nX.head()\n","21279c18":"from sklearn.preprocessing import LabelEncoder\nX_labelencoder = LabelEncoder()\nX.iloc[:, 2] = X_labelencoder.fit_transform(X.iloc[:, 2])\nX.iloc[:, 5] = X_labelencoder.fit_transform(X.iloc[:, 5])\nX.iloc[:, 7] = X_labelencoder.fit_transform(X.iloc[:, 7])\nX.iloc[:, 8] = X_labelencoder.fit_transform(X.iloc[:, 8])\nX.iloc[:, 9] = X_labelencoder.fit_transform(X.iloc[:, 9])\nX.iloc[:, 10] = X_labelencoder.fit_transform(X.iloc[:, 10])\nX.iloc[:, 11] = X_labelencoder.fit_transform(X.iloc[:, 11])\nX.iloc[:, 12] = X_labelencoder.fit_transform(X.iloc[:, 12])\nX.iloc[:, 13] = X_labelencoder.fit_transform(X.iloc[:, 13])\nX.iloc[:, 66] = X_labelencoder.fit_transform(X.iloc[:, 66])\nX.iloc[:, 67] = X_labelencoder.fit_transform(X.iloc[:, 67])\nX.iloc[:, 20] = X_labelencoder.fit_transform(X.iloc[:, 20])\nX.iloc[:, 21] = X_labelencoder.fit_transform(X.iloc[:, 21])\nX.iloc[:, 22] = X_labelencoder.fit_transform(X.iloc[:, 22])\n                                            \nX[\"MSZoning\"]=X[\"MSZoning\"].fillna('RL')\nX[\"KitchenQual\"]=X[\"KitchenQual\"].fillna('TA')\nX[\"Functional\"]=X[\"Functional\"].fillna('Typ')\nX[\"SaleType\"]=X[\"SaleType\"].fillna('WD')\nX.head()\nX[\"Alley\"]=X[\"Alley\"].fillna('Grvl')\n\nX['Fence']=X['Fence'].fillna('MnPrv')\nX.iloc[:, 3] = X_labelencoder.fit_transform(X.iloc[:, 3])\nX.iloc[:, 6] = X_labelencoder.fit_transform(X.iloc[:, 6])\n\nX.iloc[:, 62] = X_labelencoder.fit_transform(X.iloc[:, 62])\nX.iloc[:, 66] = X_labelencoder.fit_transform(X.iloc[:, 66])\n \n\nX.head()","7e44e853":"\nx=X.drop (['FireplaceQu'],axis=1)\nx.columns","5b8569bf":"features=x[['OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd','YearBuilt','YearRemodAdd','GarageYrBlt','MasVnrArea','Fireplaces','EnclosedPorch','MSSubClass','OverallCond','YrSold','LowQualFinSF','MiscVal','BsmtHalfBath','BsmtFinSF2','Street','Neighborhood','ExterCond','Condition1','ExterQual']]","d09f63c0":"from sklearn.preprocessing import Imputer\n# First create an Imputer , Stratergy means what we want to write in place of missed value\nmissingValueImputer = Imputer (missing_values = 'NaN', strategy = 'mean', \n                              axis = 0)  #if missing values are represented by 9999 then write same here\n# Set which columns imputer should perform\nmissingValueImputer = missingValueImputer.fit (features.iloc[:,10:12])\n# update values of X with new values\nfeatures.iloc[:,10:12] = missingValueImputer.transform(features.iloc[:,10:12])\n","e6e25764":"#Splitting into test and train\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(features, dv, test_size=0.2)\nX_train.shape#(1168, 26)\nX_test.shape#(292, 26)\n#y_train.shape#(1168,)\n#y_test.shape#(292,)\n#features.info()","1b775d31":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n#predictions\npredictionprice=model.predict(test_features)","37f202b1":"from sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, predictions))))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(actualsale, predictionprice))))","cf044025":"#explain equation now y=mx+c\nm=model.coef_\nc=model.intercept_\nprint(m) #slope\nprint(c)  \n#y=m*X+c  #here i is x as defined above\n#print(y)\n","1cc35521":"#Visualising the results\nplt.figure(figsize=(8,5))\nsns.regplot(predictions,y_test,scatter_kws={'alpha':0.3,'color':'lime'},line_kws={'color':'red','alpha':0.5})\nplt.xlabel('Predictions')\nplt.ylabel('Overall')\nplt.title(\"Linear Prediction of House Pricing\")\nplt.show()","e83dff7f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(features, dv, test_size=0.2)\nX_train.shape#(1168, 26)\nfrom sklearn.ensemble import RandomForestRegressor\nmodelrandom = RandomForestRegressor(n_estimators=10, random_state=42, max_depth=3)\n\nmodelrandom.fit(X_train, y_train)\npred=modelrandom.predict(X_test)\n\n\npredsale=modelrandom.predict(test_features)\npredsale\n\n#from sklearn.metrics import r2_score, mean_squared_error\n#print('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(actualsale, predsale))))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, pred))))\n","331c494b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(features, dv, test_size=0.2)\nX_train.shape#(1168, 26)\nfrom sklearn.ensemble import RandomForestRegressor\nmodelrandom = RandomForestRegressor(n_estimators=10, random_state=42, max_depth=3)\n\nmodelrandom.fit(X_train, y_train)\npred=modelrandom.predict(X_test)\n\n\npredsale=modelrandom.predict(test_features)\npredsale\n\n#from sklearn.metrics import r2_score, mean_squared_error\n#print('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(actualsale, predsale))))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, pred))))\n","21974610":"estimators=modelrandom.estimators_[5]\n\nfeatures=['OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd','YearBuilt','YearRemodAdd','GarageYrBlt','MasVnrArea','Fireplaces','EnclosedPorch','MSSubClass','OverallCond','YrSold','LowQualFinSF','MiscVal','BsmtHalfBath','BsmtFinSF2','Street','Neighborhood','ExterCond','Condition1','ExterQual']\n\n#labels=['density', 'pH', 'alcohol', 'quality']\nfrom sklearn import tree\nfrom graphviz import Source\nfrom IPython.display import SVG\nfrom IPython.display import display\n\ngraph = Source(tree.export_graphviz(estimators, out_file=None\n   , feature_names=features\n   , filled = True))\ndisplay(SVG(graph.pipe(format='svg')))","ebfc1c30":"# checking the first 5 rows and columns\n","8509b442":"# decsribing the data\n","d39ceb38":"# drop the column['FireplaceQc']","bb0b392e":"#  Labelencoder is used to convert the string dta into integer","1d25a02b":"# Read the .csv file( data)","ef552a5e":"# taking out the information from the given data","6f5dfb4c":"# data analysis","0227bf05":"#Import libraries","deaa1682":"Linear Regression Algorithm","d4ab6bb8":"# checking if the data contains any NULL value\n","2b8d5e7b":"#Random Forest Regessor algorithm ","406eaf72":"# checking the first 5 rows and columns"}}