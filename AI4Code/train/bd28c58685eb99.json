{"cell_type":{"06845e9e":"code","59eec3d2":"code","c883136e":"code","09ed5b91":"code","474456f4":"code","26afded5":"code","14be1297":"code","13c40aa1":"code","9949eee9":"code","15d9dd01":"code","b3580d2c":"code","2e2a83e2":"code","6e33eb16":"code","71728248":"code","880c3385":"code","eba18efa":"code","1a471d83":"code","1d538101":"code","1960ad79":"code","8536179a":"code","a749a630":"code","c7e19483":"markdown","aa542d7f":"markdown","124ff08b":"markdown","0f455271":"markdown","6e6df4d0":"markdown","2a3d6637":"markdown"},"source":{"06845e9e":"import os\nimport json\nimport gc\nimport glob\nimport pickle\nimport sys\nimport time\nimport datetime\n\nimport numpy as np\nimport pandas as pd\nimport lightgbm as lgb\nimport math\n\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom tqdm import tqdm, notebook\n\npd.set_option('display.max_columns', 1000)","59eec3d2":"is_test_run = False\n\nif is_test_run:\n    op_learning_rate = 1\n    op_early_stopping_rounds = 1\n    op_lambda_l1 = 0\n    op_lambda_l2 = 0\n    max_num_leaves = 7\n    op_feature_fraction = 0.1\n    op_bagging_fraction = 0.1\n    op_bagging_freq = 10\n    op_min_child_samples = 100\n    some_ramdom_state = 42\n    skip_loss_game = False\nelse:\n    op_learning_rate = 0.1\n    op_early_stopping_rounds = 100\n    op_lambda_l1 = 0.002639923022855581\n    op_lambda_l2 = 4.299393968532123e-05\n    max_num_leaves = 31\n    op_feature_fraction = 0.98\n    op_bagging_fraction = 0.98\n    op_bagging_freq = 5\n    op_min_child_samples = 10\n    some_ramdom_state = 1638\n    skip_loss_game = True\n\nstrong_agent = 18239675\ndata_source_dict = {18239675:'gf-get-episodes-18239675-nov28',\n                    18127517:'gf-get-episodes-18127517-nov28'}\ndata_source = data_source_dict[strong_agent]\n    \nuse_multi_data = False\nif use_multi_data:\n    if strong_agent == 18127517:\n        strong_agent_2 = 18239675\n    else:\n        strong_agent_2 = 18127517\n    data_source_2 = data_source_dict[strong_agent_2]\nelse:\n    data_source_2 = ''    ","c883136e":"def convert_observation(observation):\n\n    def do_flatten(obj):\n        if type(obj) == list:\n            return np.array(obj).flatten()\n        return obj.flatten()\n    \n    def get_distance(pos1, pos2):\n        return ((pos1[0]-pos2[0])**2 + (pos1[1]-pos2[1])**2)**0.5\n\n    def get_distance_3D(pos1, pos2):\n        return ((pos1[0]-pos2[0])**2 + (pos1[1]-pos2[1])**2 + (pos1[2]-pos2[2])**2)**0.5    \n    \n    def get_heading(pos1, pos2):\n        return math.atan2(pos1[1]-pos2[1], pos1[0]-pos2[0])\/math.pi*180 % 360\n\n    def get_heading_3D(pos1, pos2):\n        try:\n            a = (pos1[2]-pos2[2])\/get_distance_3D(pos1, pos2)\n        except ZeroDivisionError:\n            a = 0\n        return math.acos(a)\/math.pi*180   \n    \n    def get_cos_theta(vec1, vec2):\n        inner_prod = (vec1[0]*vec2[0]) + (vec1[1]*vec2[1])\n        norm = get_distance(vec1, (0, 0))*get_distance(vec2, (0, 0))\n        return math.acos(inner_prod\/norm)\n    \n    final_obs = []\n    \n    for obs in observation:\n        #--------------------------#\n        # observations on position #\n        #--------------------------#\n        o_pos = []\n        for i, name in enumerate(['left_team', 'right_team']):\n            o_pos.extend(do_flatten(obs[name]))\n        # If there were less than 11vs11 players we backfill missing values\n        # with -1.\n            if len(o_pos) < (i + 1) * 22:\n                o_pos.extend([-1] * ((i + 1) * 22 - len(o_pos)))\n\n        o_dire = []\n        for i, name in enumerate(['left_team_direction',\n                                  'right_team_direction']):\n            o_dire.extend(do_flatten(obs[name]))\n        # If there were less than 11vs11 players we backfill missing values\n        # with -1.\n            if len(o_dire) < (i + 1) * 22:\n                o_dire.extend([-1] * ((i + 1) * 22 - len(o_dire)))\n                \n        o_pos_center = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_center.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]), (0,0)))\n            o_pos_center.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]), (0,0)))\n            \n        o_dire_pt = []\n        for i in range(len(o_dire)\/\/2):\n            o_dire_pt.append(get_distance((o_dire[i*2],o_dire[i*2 + 1]), (0,0)))\n            o_dire_pt.append(get_heading((o_dire[i*2],o_dire[i*2 + 1]), (0,0)))\n            \n        o_pos_l_goal = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_l_goal.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]), (-1,0)))\n            o_pos_l_goal.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]), (-1,0)))\n\n        o_pos_r_goal = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_r_goal.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]), (1,0)))\n            o_pos_r_goal.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]), (1,0)))            \n            \n        o_pos_activep = []\n        activep = obs['active']\n        for i in range(len(o_pos)\/\/2):\n            o_pos_activep.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[activep*2],o_pos[activep*2 + 1])))\n            o_pos_activep.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[activep*2],o_pos[activep*2 + 1])))  \n\n        o_pos_lp_near_activep = []\n        lp_near_activep = int(np.concatenate([np.array(o_pos_activep).\\\n                                          flatten().reshape(-1, 2)[:activep-1, 0],\\\n                                          np.array(o_pos_activep).\\\n                                          flatten().reshape(-1, 2)[activep:11, 0]]).min())\n        for i in range(len(o_pos)\/\/2):\n            o_pos_lp_near_activep.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[lp_near_activep*2],o_pos[lp_near_activep*2 + 1])))\n            o_pos_lp_near_activep.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[lp_near_activep*2],o_pos[lp_near_activep*2 + 1])))\n\n        o_pos_rp_near_activep = []\n        rp_near_activep = int(np.array(o_pos_activep).flatten().reshape(-1, 2)[11:, 0].min())\n        for i in range(len(o_pos)\/\/2):\n            o_pos_rp_near_activep.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[rp_near_activep*2],o_pos[rp_near_activep*2 + 1])))\n            o_pos_rp_near_activep.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[rp_near_activep*2],o_pos[rp_near_activep*2 + 1])))\n            \n            \n        o_pos_ball = []\n        ball_xy = (obs['ball'][0], obs['ball'][1])\n        for i in range(len(o_pos)\/\/2):\n            o_pos_ball.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]), ball_xy))\n            o_pos_ball.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]), ball_xy))\n        \n        o_pos_rp_near_ball = []\n        rp_near_ball = int(np.array(o_pos_ball).flatten().reshape(-1, 2)[11:, 0].min())\n        for i in range(len(o_pos)\/\/2):\n            o_pos_rp_near_ball.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[rp_near_ball*2],o_pos[rp_near_ball*2 + 1])))\n            o_pos_rp_near_ball.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[rp_near_ball*2],o_pos[rp_near_ball*2 + 1])))\n            \n        #--------------------------------------#\n        # observations on state of the players #\n        #--------------------------------------#\n\n        o_state = []\n        for i, name in enumerate(['left_team_tired_factor', 'left_team_yellow_card', 'left_team_roles',\n                                'right_team_tired_factor', 'right_team_yellow_card', 'right_team_roles']):\n            o_state.extend(do_flatten(obs[name]))\n            if len(o_state) < (i + 1) * 11:\n                o_state.extend([-1] * ((i + 1) * 11 - len(o_state)))\n\n        #---------------------------#\n        # observations on the ball  #\n        #---------------------------#\n        o_ball = []\n        # ball position\n        o_ball.extend(obs['ball'])\n        \n        o_ball_points = []\n#         ball_xyz = (obs['ball'][0], obs['ball'][1], obs['ball'][2])\n        ball_xyz = tuple(o_ball)\n        for i, point in enumerate([(0, 0, 0), (-1, 0, 0), (1, 0, 0),\n                                   (0, 0.42, 0), (0, -0.42, 0)]):\n            o_ball_points.append(get_distance_3D(ball_xyz, point))\n            o_ball_points.append(get_heading(ball_xyz, point))\n            o_ball_points.append(get_heading_3D(ball_xyz, point))\n            \n        # ball direction\n        o_ball_dire = []        \n        o_ball_dire.extend(obs['ball_direction'])\n        \n        o_ball_dire_pt = []\n        ball_dire_xyz = tuple(o_ball_dire)\n        o_ball_dire_pt.append(get_distance_3D(ball_dire_xyz, (0, 0, 0)))        \n        o_ball_dire_pt.append(get_heading(ball_dire_xyz, (0, 0, 0)))\n        o_ball_dire_pt.append(get_heading_3D(ball_dire_xyz, (0, 0, 0)))\n\n        # ball rotation -- It is not clear if the following calculation is physically valid.\n        o_ball_rota = []           \n        o_ball_rota.extend(obs['ball_rotation'])  \n        \n        o_ball_rota_pt = []\n        ball_pota_xyz = tuple(o_ball_rota)\n        o_ball_rota_pt.append(get_distance_3D(ball_pota_xyz, (0, 0, 0)))        \n        o_ball_rota_pt.append(get_heading(ball_pota_xyz, (0, 0, 0)))\n        o_ball_rota_pt.append(get_heading_3D(ball_pota_xyz, (0, 0, 0)))        \n        \n        o_ball_own = []\n        o_ball_own.append(obs['ball_owned_team'])\n\n        o_ball_angle_goal = []\n        l_ball_goal = get_cos_theta((1-obs['ball'][0], 0.044-obs['ball'][1]), \\\n                                    (1-obs['ball'][0], -0.044-obs['ball'][1]))\/math.pi\n        l_ball_goal_var = l_ball_goal\/get_distance((1,0), ball_xy)\n        r_ball_goal = get_cos_theta((-1-obs['ball'][0], 0.044-obs['ball'][1]),\\\n                                    (-1-obs['ball'][0], -0.044-obs['ball'][1]))\/math.pi\n        r_ball_goal_var = r_ball_goal\/get_distance((-1,0), ball_xy)\n\n        o_ball_angle_goal.append(l_ball_goal)\n        o_ball_angle_goal.append(l_ball_goal_var)\n        o_ball_angle_goal.append(r_ball_goal)\n        o_ball_angle_goal.append(r_ball_goal_var)\n                               \n        #-------------------------------#\n        # observations on active player #\n        #-------------------------------#          \n        o_activep = []\n        o_activep.append(obs['active'])      \n\n        for o_list in [o_pos, o_dire, o_pos_center, o_dire_pt, o_pos_l_goal, o_pos_r_goal, o_pos_ball]:\n            o_activep.append(o_list[activep*2])\n            o_activep.append(o_list[activep*2 + 1])\n            \n        o_activep.append(o_state[activep])\n        o_activep.append(o_state[activep + 11])\n        o_activep.append(o_state[activep + 22])\n\n        o_sticky = []\n        o_sticky.extend(do_flatten(obs['sticky_actions']))\n        \n        #---------------------------#\n        # observations on team      #\n        #---------------------------#  \n        o_team_grav = []\n        for i, name in enumerate(['left_team', 'right_team']):\n            temp_pos = do_flatten(obs[name])\n            grav_x = 0\n            grav_y = 0\n            for i in range(len(temp_pos)\/\/2):\n                grav_x += temp_pos[i*2]\n                grav_y += temp_pos[i*2 + 1]\n            grav_x \/= len(temp_pos)\/\/2\n            grav_y \/= len(temp_pos)\/\/2\n        \n            o_team_grav.append(grav_x)\n            o_team_grav.append(grav_y)    \n\n        o_team_grav.append((o_team_grav[0]+o_team_grav[2])\/2)\n        o_team_grav.append((o_team_grav[1]+o_team_grav[3])\/2)\n        \n        o_team_grav_pt = []\n        for i in range(len(o_team_grav)\/\/2):\n            o_team_grav_pt.append(get_distance((o_team_grav[i*2],o_team_grav[i*2 + 1]), (0,0)))\n            o_team_grav_pt.append(get_heading((o_team_grav[i*2],o_team_grav[i*2 + 1]), (0,0)))\n            \n        o_pos_grav_left = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_left.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav[0],o_team_grav[1])))\n            o_pos_grav_left.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav[0],o_team_grav[1])))  \n\n        o_pos_grav_right = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_right.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav[2],o_team_grav[3])))\n            o_pos_grav_right.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav[2],o_team_grav[3])))  \n        o_pos_grav_both = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_both.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav[4],o_team_grav[5])))\n            o_pos_grav_both.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav[4],o_team_grav[5])))  \n\n        #---------------------------------#\n        # observations on team without GK #\n        #---------------------------------#  \n        o_team_grav_woGK = []\n        for i, name in enumerate(['left_team', 'right_team']):\n            temp_pos = do_flatten(obs[name])\n            grav_x = 0\n            grav_y = 0\n            for i in range(1, len(temp_pos)\/\/2): # without GK\n                grav_x += temp_pos[i*2]\n                grav_y += temp_pos[i*2 + 1]\n            grav_x \/= len(temp_pos)\/\/2\n            grav_y \/= len(temp_pos)\/\/2\n            o_team_grav_woGK.append(grav_x)\n            o_team_grav_woGK.append(grav_y)    \n\n        o_team_grav_woGK.append((o_team_grav_woGK[0]+o_team_grav_woGK[2])\/2)\n        o_team_grav_woGK.append((o_team_grav_woGK[1]+o_team_grav_woGK[3])\/2)\n        \n        o_team_grav_woGK_pt = []\n        for i in range(len(o_team_grav_woGK)\/\/2):\n            o_team_grav_woGK_pt.append(get_distance((o_team_grav_woGK[i*2],o_team_grav_woGK[i*2 + 1]), (0,0)))\n            o_team_grav_woGK_pt.append(get_heading((o_team_grav_woGK[i*2],o_team_grav_woGK[i*2 + 1]), (0,0)))\n            \n        o_pos_grav_woGK_left = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_woGK_left.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav_woGK[0],o_team_grav_woGK[1])))\n            o_pos_grav_woGK_left.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav_woGK[0],o_team_grav_woGK[1])))  \n\n        o_pos_grav_woGK_right = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_woGK_right.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav_woGK[2],o_team_grav_woGK[3])))\n            o_pos_grav_woGK_right.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav_woGK[2],o_team_grav_woGK[3])))  \n        o_pos_grav_woGK_both = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_woGK_both.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav_woGK[4],o_team_grav_woGK[5])))\n            o_pos_grav_woGK_both.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav_woGK[4],o_team_grav_woGK[5]))) \n        \n        #-----------------------#\n        # observations on line  #\n        #-----------------------# \n        l_t_arr = np.array(obs['left_team']).flatten().reshape(-1, 2)\n        \n        o_pos_l_frontp = []\n        l_frontp = l_t_arr[:,0].argmax()\n        for i in range(len(o_pos)\/\/2):\n            o_pos_l_frontp.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[l_frontp*2],o_pos[l_frontp*2 + 1])))\n            o_pos_l_frontp.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[l_frontp*2],o_pos[l_frontp*2 + 1])))          \n        o_pos_l_backp = []\n        l_backp = l_t_arr[1:,0].argmin() + 1\n        for i in range(len(o_pos)\/\/2):\n            o_pos_l_backp.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[l_backp*2],o_pos[l_backp*2 + 1])))\n            o_pos_l_backp.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[l_backp*2],o_pos[l_backp*2 + 1])))    \n\n        r_t_arr = np.array(obs['right_team']).flatten().reshape(-1, 2)\n        \n        o_pos_r_frontp = []\n        r_frontp = r_t_arr[:,0].argmin()\n        for i in range(len(o_pos)\/\/2):\n            o_pos_r_frontp.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[22 + r_frontp*2],o_pos[22 + r_frontp*2 + 1])))\n            o_pos_r_frontp.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[22 + r_frontp*2],o_pos[22 + r_frontp*2 + 1])))          \n        o_pos_r_backp = []\n        r_backp = r_t_arr[1:,0].argmax() + 1\n        for i in range(len(o_pos)\/\/2):\n            o_pos_r_backp.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[22 + r_backp*2],o_pos[22 + r_backp*2 + 1])))\n            o_pos_r_backp.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[22 + r_backp*2],o_pos[22 + r_backp*2 + 1])))  \n  \n        o_lines = []\n        o_lines.append(o_pos[l_frontp*2])\n        o_lines.append(o_pos[l_backp*2])\n        o_lines.append(o_pos[22 + r_frontp*2])\n        o_lines.append(o_pos[22 + r_backp*2])\n        \n        is_l_offside_pos = o_pos[l_frontp*2] > o_pos[22 + r_backp*2]\n        o_lines.append(is_l_offside_pos)\n        o_lines.append(is_l_offside_pos * o_pos[22 + r_backp*2])\n        \n        is_r_offside_pos = o_pos[l_backp*2] > o_pos[22 + r_frontp*2]\n        o_lines.append(is_r_offside_pos)\n        o_lines.append(is_r_offside_pos * o_pos[l_backp*2])\n\n        o_width_x = []\n        o_width_x.append(o_pos[l_frontp*2] - o_pos[l_backp*2])\n        o_width_x.append(o_pos[l_frontp*2] - o_pos[22 + r_frontp*2])        \n        o_width_x.append(o_pos[22 + r_backp*2] - o_pos[22 + r_frontp*2])\n        o_width_x.append(o_pos[22 + r_backp*2] - o_pos[l_backp*2]) \n        \n        o_width_y = []\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] <= 0][:,1], -1).max())\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] <= 0][:,1], 1).min())\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] <= 0][:,1], -1).max()-\\\n                         np.append(l_t_arr[l_t_arr[:,0] <= 0][:,1], 1).min())\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] > 0][:,1], -1).max())\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] > 0][:,1], 1).min())\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] > 0][:,1], -1).max()-\\\n                         np.append(l_t_arr[l_t_arr[:,0] > 0][:,1], 1).min())\n        \n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] >= 0][:,1], -1).max())\n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] >= 0][:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] >= 0][:,1], -1).max()-\\\n                         np.append(r_t_arr[r_t_arr[:,0] >= 0][:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] < 0][:,1], -1).max())\n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] < 0][:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] < 0][:,1], -1).max()-\\\n                         np.append(r_t_arr[r_t_arr[:,0] < 0][:,1], 1).min()) \n\n        o_width_y.append(np.append(r_t_arr[:,1], -1).max())\n        o_width_y.append(np.append(r_t_arr[:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[:,1], -1).max()-\\\n                         np.append(r_t_arr[:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[:,1], -1).max())\n        o_width_y.append(np.append(r_t_arr[:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[:,1], -1).max()-\\\n                         np.append(r_t_arr[:,1], 1).min()) \n\n        #-------------------------------------------#\n        # observations on players reference of ball #\n        #-------------------------------------------#\n        o_ball_pnum = []\n        for i, name in enumerate(['left_team', 'right_team']):\n            temp_pos = do_flatten(obs[name])\n            front_ball = 0\n            back_ball = 0\n            top_ball = 0\n            bottom_ball = 0\n            for i in range(len(temp_pos)\/\/2):\n                if temp_pos[i*2] > obs['ball'][0]:\n                    front_ball += 1\n                else:\n                    back_ball += 1\n                if temp_pos[i*2 + 1] > obs['ball'][1]:\n                    top_ball += 1\n                else:\n                    bottom_ball += 1\n            o_ball_pnum.append(front_ball)\n            o_ball_pnum.append(back_ball)\n            o_ball_pnum.append(top_ball)\n            o_ball_pnum.append(bottom_ball)\n                        \n        o_ball_pnum.append(o_ball_pnum[0]+o_ball_pnum[4])\n        o_ball_pnum.append(o_ball_pnum[1]+o_ball_pnum[5])\n        o_ball_pnum.append(o_ball_pnum[2]+o_ball_pnum[6])\n        o_ball_pnum.append(o_ball_pnum[3]+o_ball_pnum[7])\n        \n        #-------------------------------------------#\n        # observations on around active_player\/ball #\n        #-------------------------------------------#\n        \n        o_pnum_around_activp = []\n        for dist in [1, 3, 5, 10, 15]:\n            pnum_dist_l = sum(np.array(o_pos_activep).flatten().reshape(-1, 2)[:11, 0] > 0.02 * dist)\n            pnum_dist_r = sum(np.array(o_pos_activep).flatten().reshape(-1, 2)[11:, 0] > 0.02 * dist)\n            pnum_dist_b = sum(np.array(o_pos_activep).flatten().reshape(-1, 2)[:, 0] > 0.02 * dist)        \n            o_pnum_around_activp.append(pnum_dist_l)\n            o_pnum_around_activp.append(pnum_dist_r)\n            o_pnum_around_activp.append(pnum_dist_b)\n\n\n        o_pnum_around_ball = []\n        for dist in [1, 3, 5, 10, 15]:\n            pnum_dist_l = sum(np.array(o_pos_ball).flatten().reshape(-1, 2)[:11, 0] > 0.02 * dist)\n            pnum_dist_r = sum(np.array(o_pos_ball).flatten().reshape(-1, 2)[11:, 0] > 0.02 * dist)\n            pnum_dist_b = sum(np.array(o_pos_ball).flatten().reshape(-1, 2)[:, 0] > 0.02 * dist)        \n            o_pnum_around_ball.append(pnum_dist_l)\n            o_pnum_around_ball.append(pnum_dist_r)\n            o_pnum_around_ball.append(pnum_dist_b)\n        \n        #---------------------------#\n        # observations on the other #\n        #---------------------------#        \n        o_other = []\n    \n        # o_other.extend(do_flatten(obs['score']))\n        o_other.append(obs['score'][0])\n        o_other.append(obs['score'][1])\n        o_other.append(obs['score'][0] - obs['score'][1])\n        \n        o_other.append(obs['steps_left']) \n        \n        o_other.append(obs['game_mode']) \n\n        #--------------------------#\n        # contat observations      #\n        #--------------------------#\n        final_obs.extend(o_pos)\n        final_obs.extend(o_dire)  \n        final_obs.extend(o_pos_center)    \n        final_obs.extend(o_dire_pt) \n        final_obs.extend(o_pos_l_goal) \n        final_obs.extend(o_pos_r_goal)         \n        final_obs.extend(o_pos_activep)  \n        final_obs.extend(o_pos_lp_near_activep) \n        final_obs.extend(o_pos_rp_near_activep) \n        final_obs.extend(o_pos_ball)\n        final_obs.extend(o_pos_rp_near_ball)  \n \n        final_obs.extend(o_state)   \n    \n        final_obs.extend(o_ball)     \n        final_obs.extend(o_ball_points)           \n        final_obs.extend(o_ball_dire)     \n        final_obs.extend(o_ball_dire_pt)    \n        final_obs.extend(o_ball_rota)     \n        final_obs.extend(o_ball_rota_pt)    \n        final_obs.extend(o_ball_own) \n        final_obs.extend(o_ball_angle_goal)                                        \n\n        final_obs.extend(o_activep)        \n        final_obs.extend(o_sticky) \n\n        final_obs.extend(o_team_grav)\n        final_obs.extend(o_team_grav_pt)\n        final_obs.extend(o_pos_grav_left)\n        final_obs.extend(o_pos_grav_right)\n        final_obs.extend(o_pos_grav_both)\n\n        final_obs.extend(o_team_grav_woGK)\n        final_obs.extend(o_team_grav_woGK_pt)\n        final_obs.extend(o_pos_grav_woGK_left)\n        final_obs.extend(o_pos_grav_woGK_right)\n        final_obs.extend(o_pos_grav_woGK_both)\n        \n        final_obs.extend(o_pos_l_frontp)\n        final_obs.extend(o_pos_l_backp)\n        final_obs.extend(o_pos_r_frontp)\n        final_obs.extend(o_pos_r_backp)\n        final_obs.extend(o_lines)\n        \n        final_obs.extend(o_width_x)\n        final_obs.extend(o_width_y)\n        \n        final_obs.extend(o_ball_pnum)\n        \n        final_obs.extend(o_pnum_around_activp)\n        final_obs.extend(o_pnum_around_ball)\n        \n        final_obs.extend(o_other)\n        \n        return np.array(final_obs, dtype=np.float32).flatten()","09ed5b91":"y=[]\nx=[]\nfilenames = [p for p in os.listdir('\/kaggle\/input\/'+data_source+'\/episodes_log\/') \\\n             if 'info' not in p and 'json' in p]\n\n# for test\nif is_test_run:\n    filenames = filenames[:3]\n\nfor f in notebook.tqdm(filenames):\n    filename = \"\/kaggle\/input\/\"+data_source+\"\/episodes_log\/\" + f\n    info_filename = \"\/kaggle\/input\/\"+data_source+\"\/episodes_log\/\" + f.replace('.json', '_info.json')\n    \n    try:\n        with open(filename) as json_file:\n            data = json.load(json_file)\n    except:\n        continue\n        \n    try:\n        with open(info_filename) as info_json_file:\n            info = json.load(info_json_file)\n    except:\n        continue\n        \n        \n    counter=0\n    \n    if info['agents'][0]['submissionId'] == strong_agent:\n        team = 0\n    else:\n        team = 1\n    \n    for i in range(0,len(data['steps'])-2,):\n        if skip_loss_game:\n            reward_threshold = 0\n        else:\n            reward_threshold = -3000\n            \n        if data['steps'][-1][team]['reward'] >= reward_threshold:\n            action=data['steps'][i+1][team]['action']\n            y.append(action[0])\n\n            obs=data['steps'][i][team]['observation']['players_raw'][0]\n            x.append(convert_observation([obs]))\n\nif use_multi_data:\n    filenames = [p for p in os.listdir('\/kaggle\/input\/'+data_source_2+'\/episodes_log\/') \\\n             if 'info' not in p and 'json' in p]\n\n    # for test\n    if is_test_run:\n        filenames = filenames[:1]\n    \n    for f in notebook.tqdm(filenames):\n        filename = \"\/kaggle\/input\/\"+data_source_2+\"\/episodes_log\/\" + f\n        info_filename = \"\/kaggle\/input\/\"+data_source_2+\"\/episodes_log\/\" + f.replace('.json', '_info.json')\n\n        try:\n            with open(filename) as json_file:\n                data = json.load(json_file)\n        except:\n            continue\n\n        try:\n            with open(info_filename) as info_json_file:\n                info = json.load(info_json_file)\n        except:\n            continue\n\n\n        counter=0\n\n        if info['agents'][0]['submissionId'] == strong_agent_2:\n            team = 0\n        else:\n            team = 1\n\n        for i in range(0,len(data['steps'])-2,):\n            if data['steps'][-1][team]['reward'] >= reward_threshold:\n                action=data['steps'][i+1][team]['action']\n                y.append(action[0])\n\n                obs=data['steps'][i][team]['observation']['players_raw'][0]\n                x.append(convert_observation([obs]))","474456f4":"df_header = []\n\nfor name in ['left_team', 'left_team_direction', 'right_team', 'right_team_direction']:\n    for i in list(range(11)):\n        for xy in ['x', 'y']:\n            df_header.append(name+'_'+xy+'_'+str(i))\n\nfor name in ['left_team', 'left_team_direction', 'right_team', 'right_team_direction']:\n    for i in list(range(11)):\n        for xy in ['r', 'theta']:\n            df_header.append(name+'_'+xy+'_'+str(i))\n            \nfor name in ['left_team_lg', 'right_team_lg', 'left_team_rg', 'right_team_rg',\n             'left_team_ap', 'right_team_ap', \\\n             'left_team_l_near_ap', 'right_team_l_near_ap',\\\n             'left_team_r_near_ap', 'right_team_r_near_ap',\\\n             'left_team_ball', 'right_team_ball',\\\n             'left_team_r_near_ball', 'right_team_r_near_ball',]:\n    for i in list(range(11)):\n        for xy in ['r', 'theta']:\n            df_header.append(name+'_'+xy+'_'+str(i))    \n            \nfor name in ['left_team_tired_factor', 'left_team_yellow_card', 'left_team_roles',\\\n             'right_team_tired_factor', 'right_team_yellow_card', 'right_team_roles']:\n    for i in list(range(11)):\n        df_header.append(name+'_'+str(i))            \n\n        \nfor name in ['ball']:\n    for xyzrpt in ['x', 'y', 'z']:\n         df_header.append(name+'_'+xyzrpt)\n            \nfor name in ['ball_cp', 'ball_lg', 'ball_rg', 'ball_ct', 'ball_cb']:\n    for rpt in ['r', 'phi', 'theta']:\n         df_header.append(name+'_'+rpt)\n            \nfor name in ['ball_direction', 'ball_rotation']:\n    for xyzrpt in ['x', 'y', 'z', 'r', 'phi', 'theta']:\n         df_header.append(name+'_'+xyzrpt)\n\ndf_header.append('ball_owned_team')\n\ndf_header.extend(['angle_l_ball_goal', 'var_l_ball_goal', \\\n                  'angle_r_ball_goal', 'var_r_ball_goal',]) \\\n\ndf_header.append('active')\n\nfor name in ['x', 'y',  'direction_x', 'direction_y',\n             'r', 'theta', 'direction_r', 'direction_theta',\n             'lg_r', 'lg_theta', 'rg_r', 'rg_theta',\n             'ball_r', 'ball_theta', \n             'tired_factor', 'yellow_card', 'roles']:\n    df_header.append('left_team_activep_'+name)    \n\nfor name in ['left', 'top_left', 'top', 'top_right',\n             'right', 'bottom_right', 'bottom', 'bottom_left',\n             'sprint', 'dribble']:\n    df_header.append('sticky_action_'+name) \n\nfor name in ['left_team_grav', 'right_team_grav', 'both_team_grav']:\n    for xy in ['x', 'y']:\n        df_header.append(name+'_'+xy)\n\nfor name in ['left_team_grav', 'right_team_grav', 'both_team_grav']:\n    for xy in ['r', 'theta']:\n        df_header.append(name+'_'+xy)        \n    \nfor name in ['left_team_l_grav', 'right_team_l_grav',\n             'left_team_r_grav', 'right_team_r_grav',\n             'left_team_b_grav', 'right_team_b_grav']:\n    for i in list(range(11)):\n        for xy in ['r', 'theta']:\n            df_header.append(name+'_'+xy+'_'+str(i))\n            \nfor name in ['left_team_grav_woGK', 'right_team_grav_woGK', 'both_team_grav_woGK']:\n    for xy in ['x', 'y']:\n        df_header.append(name+'_'+xy)\n\nfor name in ['left_team_grav_woGK', 'right_team_grav_woGK', 'both_team_grav_woGK']:\n    for xy in ['r', 'theta']:\n        df_header.append(name+'_'+xy)        \n    \nfor name in ['left_team_l_grav_woGK', 'right_team_l_grav_woGK',\n             'left_team_r_grav_woGK', 'right_team_r_grav_woGK',\n             'left_team_b_grav_woGK', 'right_team_b_grav_woGK']:\n    for i in list(range(11)):\n        for xy in ['r', 'theta']:\n            df_header.append(name+'_'+xy+'_'+str(i))\n            \nfor name in ['left_team_l_fp', 'left_team_r_fp', 'left_team_l_bg', 'right_team_l_bg',\n             'left_team_r_fp', 'right_team_r_fp','left_team_r_bg', 'right_team_r_bg']:\n    for i in list(range(11)):\n        for xy in ['r', 'theta']:\n            df_header.append(name+'_'+xy+'_'+str(i))    \n\ndf_header.extend(['left_team_fp_x', 'left_team_bp_x', \\\n                  'right_team_fp_x', 'right_team_bp_x', \\\n                  'is_left_offside', 'left_offside_line', \\\n                  'is_right_offside', 'right_offside_line'])\n\ndf_header.extend(['width_x_l_fp_l_bp', 'width_x_l_fp_r_fp', \\\n                  'width_x_r_bp_r_fp', 'width_x_r_bp_l_bp'])\n\ndf_header.extend(['width_y_l_lc_max_y', 'width_y_l_lc_min_y', 'width_y_l_lc', \\\n                  'width_y_l_rc_max_y', 'width_y_l_rc_min_y', 'width_y_l_rc', \\\n                  'width_y_r_lc_max_y', 'width_y_r_lc_min_y', 'width_y_r_lc', \\\n                  'width_y_r_rc_max_y', 'width_y_r_rc_min_y', 'width_y_r_rc', \\\n                  'width_y_r_bc_max_y', 'width_y_b_lc_min_y', 'width_y_b_lc', \\\n                  'width_y_r_bc_max_y', 'width_y_b_rc_min_y', 'width_y_b_rc', \\\n                 ])\n\ndf_header.extend(['l_pnum_frb', 'l_pnum_bcb', 'l_pnum_tpb', 'l_pnum_btb',\\\n                  'r_pnum_frb', 'r_pnum_bcb', 'r_pnum_tpb', 'r_pnum_btb',\\\n                  'b_pnum_frb', 'b_pnum_bcb', 'b_pnum_tpb', 'b_pnum_btb',])\n\ndf_header.extend(['l_pnum_around_1_ap', 'r_pnum_around_1_ap', 'b_pnum_around_1_ap',\\\n                  'l_pnum_around_3_ap', 'r_pnum_around_3_ap', 'b_pnum_around_3_ap',\\\n                  'l_pnum_around_5_ap', 'r_pnum_around_5_ap', 'b_pnum_around_5_ap',\\\n                  'l_pnum_around_10_ap', 'r_pnum_around_10_ap', 'b_pnum_around_10_ap',\\\n                  'l_pnum_around_15_ap', 'r_pnum_around_15_ap', 'b_pnum_around_15_ap',])\n\ndf_header.extend(['l_pnum_around_1_ball', 'r_pnum_around_1_ball', 'b_pnum_around_1_ball',\\\n                  'l_pnum_around_3_ball', 'r_pnum_around_3_ball', 'b_pnum_around_3_ball',\\\n                  'l_pnum_around_5_ball', 'r_pnum_around_5_ball', 'b_pnum_around_5_ball',\\\n                  'l_pnum_around_10_ball', 'r_pnum_around_10_ball', 'b_pnum_around_10_ball',\\\n                  'l_pnum_around_15_ball', 'r_pnum_around_15_ball', 'b_pnum_around_15_ball',])\n\ndf_header.extend(['left_score', 'right_score', 'lead_score',\\\n                  'steps_left', 'game_mode'])","26afded5":"len(df_header)","14be1297":"df_x = pd.DataFrame(x, columns=df_header, dtype=np.float32)","13c40aa1":"df_x.shape","9949eee9":"df_y = pd.Series(y, dtype=np.float32)","15d9dd01":"cat_list = ['ball_owned_team', 'active', 'game_mode',\n           'left_team_roles_0',\n           'left_team_roles_1',\n           'left_team_roles_2',\n           'left_team_roles_3',\n           'left_team_roles_4',\n           'left_team_roles_5',\n           'left_team_roles_6',\n           'left_team_roles_7',\n           'left_team_roles_8',\n           'left_team_roles_9',\n           'left_team_roles_10',\n           'right_team_roles_0',\n           'right_team_roles_1',\n           'right_team_roles_2',\n           'right_team_roles_3',\n           'right_team_roles_4',\n           'right_team_roles_5',\n           'right_team_roles_6',\n           'right_team_roles_7',\n           'right_team_roles_8',\n           'right_team_roles_9',\n           'right_team_roles_10',\n           'left_team_activep_roles'\n           ]","b3580d2c":"cat_list_num = []\nfor h in cat_list:\n    cat_list_num.append(df_header.index(h))    ","2e2a83e2":"gc.collect()","6e33eb16":"!mkdir -p \/kaggle_simulations\n!mkdir -p \/kaggle_simulations\/agent\n!mkdir -p \/kaggle_simulations\/agent\/saved_model","71728248":"df_xy = pd.concat([df_x, df_y], axis=1)\ndf_xy = df_xy.rename(columns={df_xy.columns[-1]: 'action'})","880c3385":"for ball_own in [-1, 0, 1]:\n    df_xy_bown = df_xy[df_xy['ball_owned_team'] == ball_own]\n    gc.collect()\n    \n    df_weight = df_xy_bown['action'].map(np.log1p(1\/df_xy_bown['action'].value_counts(normalize=True)\/19))\n    df_weight = df_weight * ((df_xy_bown['action'] != df_xy_bown['action'].shift(1)) * 0.5 + 1)\n    \n    \n    X_train,X_test,y_train,y_test,w_train, w_test = \\\n      train_test_split(df_xy_bown.drop(['action'], axis=1),df_xy_bown['action'],df_weight,\n                       test_size=0.2,\n                       random_state=some_ramdom_state,\n                       stratify=df_xy_bown['action'])\n    gc.collect()\n    lgb_train = lgb.Dataset(X_train,\n                        label=y_train, \n                        categorical_feature=cat_list_num,\n                        weight=w_train)\n    gc.collect()\n    lgb_eval = lgb.Dataset(X_test, \n                      label=y_test,\n                      categorical_feature=cat_list_num,\n#                       weight=X_test['weight'],\n                      reference=lgb_train)\n    gc.collect()\n    params = {}\n    params['objective'] = 'multiclass'\n    params['num_classes'] = 19\n    params['learning_rate'] = op_learning_rate\n    params['ramdom_state'] = some_ramdom_state + int(ball_own)\n    params['metric'] = 'multi_error'\n    params['lambda_l1'] = op_lambda_l1\n    params['lambda_l2'] = op_lambda_l2\n    params['num_leaves'] = max_num_leaves\n    params['feature_fraction'] = op_feature_fraction\n    params['bagging_fraction'] = op_bagging_fraction\n    params['bagging_freq'] = op_bagging_freq\n    params['min_data_in_leaf'] = op_min_child_samples\n    \n    lgbmod = lgb.train(params, lgb_train, num_boost_round=10000,\n               valid_sets=[lgb_eval], \n               early_stopping_rounds=op_early_stopping_rounds, \n               verbose_eval=100,)\n    gc.collect()\n    lgb.plot_importance(lgbmod, figsize=(12, 12), importance_type='gain', max_num_features=50)\n    \n    lgb.plot_importance(lgbmod, figsize=(12, 12), importance_type='split', max_num_features=50)\n    \n    if ball_own == -1:\n        model_id = 'no'\n    elif  ball_own == 0:\n        model_id = 'lt'\n    else:\n        model_id = 'rt'\n        \n    \n    filename = '\/kaggle_simulations\/agent\/saved_model\/lgbmod_'+model_id+'.pkl'\n    pickle.dump(lgbmod, open(filename, 'wb'))\n    \n    preds = lgbmod.predict(X_test)\n    best_preds = np.asarray([np.argmax(line) for line in preds])\n    accuracy = accuracy_score(y_test, best_preds)\n    gc.collect()     ","eba18efa":"%%writefile \/kaggle_simulations\/agent\/main.py\nfrom kaggle_environments.envs.football.helpers import *\nimport numpy as np\nimport pandas as pd\nimport lightgbm as lgb\nimport pickle\nimport math\nfrom sklearn.metrics import accuracy_score\nimport glob\n\n# load the model from disk\nfilename = '\/kaggle_simulations\/agent\/saved_model\/lgbmod_no.pkl'\nloaded_model_no = pickle.load(open(filename, 'rb'))\nfilename = '\/kaggle_simulations\/agent\/saved_model\/lgbmod_lt.pkl'\nloaded_model_lt = pickle.load(open(filename, 'rb'))\nfilename = '\/kaggle_simulations\/agent\/saved_model\/lgbmod_rt.pkl'\nloaded_model_rt = pickle.load(open(filename, 'rb'))\n\ndef convert_observation(observation):\n\n    def do_flatten(obj):\n        if type(obj) == list:\n            return np.array(obj).flatten()\n        return obj.flatten()\n    \n    def get_distance(pos1, pos2):\n        return ((pos1[0]-pos2[0])**2 + (pos1[1]-pos2[1])**2)**0.5\n\n    def get_distance_3D(pos1, pos2):\n        return ((pos1[0]-pos2[0])**2 + (pos1[1]-pos2[1])**2 + (pos1[2]-pos2[2])**2)**0.5    \n    \n    def get_heading(pos1, pos2):\n        return math.atan2(pos1[1]-pos2[1], pos1[0]-pos2[0])\/math.pi*180 % 360\n\n    def get_heading_3D(pos1, pos2):\n        try:\n            a = (pos1[2]-pos2[2])\/get_distance_3D(pos1, pos2)\n        except ZeroDivisionError:\n            a = 0\n        return math.acos(a)\/math.pi*180   \n    \n    def get_cos_theta(vec1, vec2):\n        inner_prod = (vec1[0]*vec2[0]) + (vec1[1]*vec2[1])\n        norm = get_distance(vec1, (0, 0))*get_distance(vec2, (0, 0))\n        return math.acos(inner_prod\/norm)\n    \n    final_obs = []\n    \n    for obs in observation:\n        #--------------------------#\n        # observations on position #\n        #--------------------------#\n        o_pos = []\n        for i, name in enumerate(['left_team', 'right_team']):\n            o_pos.extend(do_flatten(obs[name]))\n        # If there were less than 11vs11 players we backfill missing values\n        # with -1.\n            if len(o_pos) < (i + 1) * 22:\n                o_pos.extend([-1] * ((i + 1) * 22 - len(o_pos)))\n\n        o_dire = []\n        for i, name in enumerate(['left_team_direction',\n                                  'right_team_direction']):\n            o_dire.extend(do_flatten(obs[name]))\n        # If there were less than 11vs11 players we backfill missing values\n        # with -1.\n            if len(o_dire) < (i + 1) * 22:\n                o_dire.extend([-1] * ((i + 1) * 22 - len(o_dire)))\n                \n        o_pos_center = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_center.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]), (0,0)))\n            o_pos_center.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]), (0,0)))\n            \n        o_dire_pt = []\n        for i in range(len(o_dire)\/\/2):\n            o_dire_pt.append(get_distance((o_dire[i*2],o_dire[i*2 + 1]), (0,0)))\n            o_dire_pt.append(get_heading((o_dire[i*2],o_dire[i*2 + 1]), (0,0)))\n            \n        o_pos_l_goal = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_l_goal.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]), (-1,0)))\n            o_pos_l_goal.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]), (-1,0)))\n\n        o_pos_r_goal = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_r_goal.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]), (1,0)))\n            o_pos_r_goal.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]), (1,0)))            \n            \n        o_pos_activep = []\n        activep = obs['active']\n        for i in range(len(o_pos)\/\/2):\n            o_pos_activep.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[activep*2],o_pos[activep*2 + 1])))\n            o_pos_activep.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[activep*2],o_pos[activep*2 + 1])))  \n\n        o_pos_lp_near_activep = []\n        lp_near_activep = int(np.concatenate([np.array(o_pos_activep).\\\n                                          flatten().reshape(-1, 2)[:activep-1, 0],\\\n                                          np.array(o_pos_activep).\\\n                                          flatten().reshape(-1, 2)[activep:11, 0]]).min())\n        for i in range(len(o_pos)\/\/2):\n            o_pos_lp_near_activep.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[lp_near_activep*2],o_pos[lp_near_activep*2 + 1])))\n            o_pos_lp_near_activep.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[lp_near_activep*2],o_pos[lp_near_activep*2 + 1])))\n\n        o_pos_rp_near_activep = []\n        rp_near_activep = int(np.array(o_pos_activep).flatten().reshape(-1, 2)[11:, 0].min())\n        for i in range(len(o_pos)\/\/2):\n            o_pos_rp_near_activep.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[rp_near_activep*2],o_pos[rp_near_activep*2 + 1])))\n            o_pos_rp_near_activep.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[rp_near_activep*2],o_pos[rp_near_activep*2 + 1])))\n            \n            \n        o_pos_ball = []\n        ball_xy = (obs['ball'][0], obs['ball'][1])\n        for i in range(len(o_pos)\/\/2):\n            o_pos_ball.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]), ball_xy))\n            o_pos_ball.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]), ball_xy))\n        \n        o_pos_rp_near_ball = []\n        rp_near_ball = int(np.array(o_pos_ball).flatten().reshape(-1, 2)[11:, 0].min())\n        for i in range(len(o_pos)\/\/2):\n            o_pos_rp_near_ball.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[rp_near_ball*2],o_pos[rp_near_ball*2 + 1])))\n            o_pos_rp_near_ball.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[rp_near_ball*2],o_pos[rp_near_ball*2 + 1])))\n            \n        #--------------------------------------#\n        # observations on state of the players #\n        #--------------------------------------#\n\n        o_state = []\n        for i, name in enumerate(['left_team_tired_factor', 'left_team_yellow_card', 'left_team_roles',\n                                'right_team_tired_factor', 'right_team_yellow_card', 'right_team_roles']):\n            o_state.extend(do_flatten(obs[name]))\n            if len(o_state) < (i + 1) * 11:\n                o_state.extend([-1] * ((i + 1) * 11 - len(o_state)))\n\n        #---------------------------#\n        # observations on the ball  #\n        #---------------------------#\n        o_ball = []\n        # ball position\n        o_ball.extend(obs['ball'])\n        \n        o_ball_points = []\n#         ball_xyz = (obs['ball'][0], obs['ball'][1], obs['ball'][2])\n        ball_xyz = tuple(o_ball)\n        for i, point in enumerate([(0, 0, 0), (-1, 0, 0), (1, 0, 0),\n                                   (0, 0.42, 0), (0, -0.42, 0)]):\n            o_ball_points.append(get_distance_3D(ball_xyz, point))\n            o_ball_points.append(get_heading(ball_xyz, point))\n            o_ball_points.append(get_heading_3D(ball_xyz, point))\n            \n        # ball direction\n        o_ball_dire = []        \n        o_ball_dire.extend(obs['ball_direction'])\n        \n        o_ball_dire_pt = []\n        ball_dire_xyz = tuple(o_ball_dire)\n        o_ball_dire_pt.append(get_distance_3D(ball_dire_xyz, (0, 0, 0)))        \n        o_ball_dire_pt.append(get_heading(ball_dire_xyz, (0, 0, 0)))\n        o_ball_dire_pt.append(get_heading_3D(ball_dire_xyz, (0, 0, 0)))\n\n        # ball rotation -- It is not clear if the following calculation is physically valid.\n        o_ball_rota = []           \n        o_ball_rota.extend(obs['ball_rotation'])  \n        \n        o_ball_rota_pt = []\n        ball_pota_xyz = tuple(o_ball_rota)\n        o_ball_rota_pt.append(get_distance_3D(ball_pota_xyz, (0, 0, 0)))        \n        o_ball_rota_pt.append(get_heading(ball_pota_xyz, (0, 0, 0)))\n        o_ball_rota_pt.append(get_heading_3D(ball_pota_xyz, (0, 0, 0)))        \n        \n        o_ball_own = []\n        o_ball_own.append(obs['ball_owned_team'])\n\n        o_ball_angle_goal = []\n        l_ball_goal = get_cos_theta((1-obs['ball'][0], 0.044-obs['ball'][1]), \\\n                                    (1-obs['ball'][0], -0.044-obs['ball'][1]))\/math.pi\n        l_ball_goal_var = l_ball_goal\/get_distance((1,0), ball_xy)\n        r_ball_goal = get_cos_theta((-1-obs['ball'][0], 0.044-obs['ball'][1]),\\\n                                    (-1-obs['ball'][0], -0.044-obs['ball'][1]))\/math.pi\n        r_ball_goal_var = r_ball_goal\/get_distance((-1,0), ball_xy)\n\n        o_ball_angle_goal.append(l_ball_goal)\n        o_ball_angle_goal.append(l_ball_goal_var)\n        o_ball_angle_goal.append(r_ball_goal)\n        o_ball_angle_goal.append(r_ball_goal_var)\n                               \n        #-------------------------------#\n        # observations on active player #\n        #-------------------------------#          \n        o_activep = []\n        o_activep.append(obs['active'])      \n\n        for o_list in [o_pos, o_dire, o_pos_center, o_dire_pt, o_pos_l_goal, o_pos_r_goal, o_pos_ball]:\n            o_activep.append(o_list[activep*2])\n            o_activep.append(o_list[activep*2 + 1])\n            \n        o_activep.append(o_state[activep])\n        o_activep.append(o_state[activep + 11])\n        o_activep.append(o_state[activep + 22])\n\n        o_sticky = []\n        o_sticky.extend(do_flatten(obs['sticky_actions']))\n        \n        #---------------------------#\n        # observations on team      #\n        #---------------------------#  \n        o_team_grav = []\n        for i, name in enumerate(['left_team', 'right_team']):\n            temp_pos = do_flatten(obs[name])\n            grav_x = 0\n            grav_y = 0\n            for i in range(len(temp_pos)\/\/2):\n                grav_x += temp_pos[i*2]\n                grav_y += temp_pos[i*2 + 1]\n            grav_x \/= len(temp_pos)\/\/2\n            grav_y \/= len(temp_pos)\/\/2\n        \n            o_team_grav.append(grav_x)\n            o_team_grav.append(grav_y)    \n\n        o_team_grav.append((o_team_grav[0]+o_team_grav[2])\/2)\n        o_team_grav.append((o_team_grav[1]+o_team_grav[3])\/2)\n        \n        o_team_grav_pt = []\n        for i in range(len(o_team_grav)\/\/2):\n            o_team_grav_pt.append(get_distance((o_team_grav[i*2],o_team_grav[i*2 + 1]), (0,0)))\n            o_team_grav_pt.append(get_heading((o_team_grav[i*2],o_team_grav[i*2 + 1]), (0,0)))\n            \n        o_pos_grav_left = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_left.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav[0],o_team_grav[1])))\n            o_pos_grav_left.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav[0],o_team_grav[1])))  \n\n        o_pos_grav_right = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_right.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav[2],o_team_grav[3])))\n            o_pos_grav_right.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav[2],o_team_grav[3])))  \n        o_pos_grav_both = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_both.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav[4],o_team_grav[5])))\n            o_pos_grav_both.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav[4],o_team_grav[5])))  \n\n        #---------------------------------#\n        # observations on team without GK #\n        #---------------------------------#  \n        o_team_grav_woGK = []\n        for i, name in enumerate(['left_team', 'right_team']):\n            temp_pos = do_flatten(obs[name])\n            grav_x = 0\n            grav_y = 0\n            for i in range(1, len(temp_pos)\/\/2): # without GK\n                grav_x += temp_pos[i*2]\n                grav_y += temp_pos[i*2 + 1]\n            grav_x \/= len(temp_pos)\/\/2\n            grav_y \/= len(temp_pos)\/\/2\n            o_team_grav_woGK.append(grav_x)\n            o_team_grav_woGK.append(grav_y)    \n\n        o_team_grav_woGK.append((o_team_grav_woGK[0]+o_team_grav_woGK[2])\/2)\n        o_team_grav_woGK.append((o_team_grav_woGK[1]+o_team_grav_woGK[3])\/2)\n        \n        o_team_grav_woGK_pt = []\n        for i in range(len(o_team_grav_woGK)\/\/2):\n            o_team_grav_woGK_pt.append(get_distance((o_team_grav_woGK[i*2],o_team_grav_woGK[i*2 + 1]), (0,0)))\n            o_team_grav_woGK_pt.append(get_heading((o_team_grav_woGK[i*2],o_team_grav_woGK[i*2 + 1]), (0,0)))\n            \n        o_pos_grav_woGK_left = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_woGK_left.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav_woGK[0],o_team_grav_woGK[1])))\n            o_pos_grav_woGK_left.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav_woGK[0],o_team_grav_woGK[1])))  \n\n        o_pos_grav_woGK_right = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_woGK_right.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav_woGK[2],o_team_grav_woGK[3])))\n            o_pos_grav_woGK_right.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav_woGK[2],o_team_grav_woGK[3])))  \n        o_pos_grav_woGK_both = []\n        for i in range(len(o_pos)\/\/2):\n            o_pos_grav_woGK_both.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_team_grav_woGK[4],o_team_grav_woGK[5])))\n            o_pos_grav_woGK_both.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_team_grav_woGK[4],o_team_grav_woGK[5]))) \n        \n        #-----------------------#\n        # observations on line  #\n        #-----------------------# \n        l_t_arr = np.array(obs['left_team']).flatten().reshape(-1, 2)\n        \n        o_pos_l_frontp = []\n        l_frontp = l_t_arr[:,0].argmax()\n        for i in range(len(o_pos)\/\/2):\n            o_pos_l_frontp.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[l_frontp*2],o_pos[l_frontp*2 + 1])))\n            o_pos_l_frontp.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[l_frontp*2],o_pos[l_frontp*2 + 1])))          \n        o_pos_l_backp = []\n        l_backp = l_t_arr[1:,0].argmin() + 1\n        for i in range(len(o_pos)\/\/2):\n            o_pos_l_backp.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[l_backp*2],o_pos[l_backp*2 + 1])))\n            o_pos_l_backp.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[l_backp*2],o_pos[l_backp*2 + 1])))    \n\n        r_t_arr = np.array(obs['right_team']).flatten().reshape(-1, 2)\n        \n        o_pos_r_frontp = []\n        r_frontp = r_t_arr[:,0].argmin()\n        for i in range(len(o_pos)\/\/2):\n            o_pos_r_frontp.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[22 + r_frontp*2],o_pos[22 + r_frontp*2 + 1])))\n            o_pos_r_frontp.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[22 + r_frontp*2],o_pos[22 + r_frontp*2 + 1])))          \n        o_pos_r_backp = []\n        r_backp = r_t_arr[1:,0].argmax() + 1\n        for i in range(len(o_pos)\/\/2):\n            o_pos_r_backp.append(get_distance((o_pos[i*2],o_pos[i*2 + 1]),\n                                             (o_pos[22 + r_backp*2],o_pos[22 + r_backp*2 + 1])))\n            o_pos_r_backp.append(get_heading((o_pos[i*2],o_pos[i*2 + 1]),\n                                            (o_pos[22 + r_backp*2],o_pos[22 + r_backp*2 + 1])))  \n  \n        o_lines = []\n        o_lines.append(o_pos[l_frontp*2])\n        o_lines.append(o_pos[l_backp*2])\n        o_lines.append(o_pos[22 + r_frontp*2])\n        o_lines.append(o_pos[22 + r_backp*2])\n        \n        is_l_offside_pos = o_pos[l_frontp*2] > o_pos[22 + r_backp*2]\n        o_lines.append(is_l_offside_pos)\n        o_lines.append(is_l_offside_pos * o_pos[22 + r_backp*2])\n        \n        is_r_offside_pos = o_pos[l_backp*2] > o_pos[22 + r_frontp*2]\n        o_lines.append(is_r_offside_pos)\n        o_lines.append(is_r_offside_pos * o_pos[l_backp*2])\n\n        o_width_x = []\n        o_width_x.append(o_pos[l_frontp*2] - o_pos[l_backp*2])\n        o_width_x.append(o_pos[l_frontp*2] - o_pos[22 + r_frontp*2])        \n        o_width_x.append(o_pos[22 + r_backp*2] - o_pos[22 + r_frontp*2])\n        o_width_x.append(o_pos[22 + r_backp*2] - o_pos[l_backp*2]) \n        \n        o_width_y = []\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] <= 0][:,1], -1).max())\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] <= 0][:,1], 1).min())\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] <= 0][:,1], -1).max()-\\\n                         np.append(l_t_arr[l_t_arr[:,0] <= 0][:,1], 1).min())\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] > 0][:,1], -1).max())\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] > 0][:,1], 1).min())\n        o_width_y.append(np.append(l_t_arr[l_t_arr[:,0] > 0][:,1], -1).max()-\\\n                         np.append(l_t_arr[l_t_arr[:,0] > 0][:,1], 1).min())\n        \n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] >= 0][:,1], -1).max())\n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] >= 0][:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] >= 0][:,1], -1).max()-\\\n                         np.append(r_t_arr[r_t_arr[:,0] >= 0][:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] < 0][:,1], -1).max())\n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] < 0][:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[r_t_arr[:,0] < 0][:,1], -1).max()-\\\n                         np.append(r_t_arr[r_t_arr[:,0] < 0][:,1], 1).min()) \n\n        o_width_y.append(np.append(r_t_arr[:,1], -1).max())\n        o_width_y.append(np.append(r_t_arr[:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[:,1], -1).max()-\\\n                         np.append(r_t_arr[:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[:,1], -1).max())\n        o_width_y.append(np.append(r_t_arr[:,1], 1).min())\n        o_width_y.append(np.append(r_t_arr[:,1], -1).max()-\\\n                         np.append(r_t_arr[:,1], 1).min()) \n\n        #-------------------------------------------#\n        # observations on players reference of ball #\n        #-------------------------------------------#\n        o_ball_pnum = []\n        for i, name in enumerate(['left_team', 'right_team']):\n            temp_pos = do_flatten(obs[name])\n            front_ball = 0\n            back_ball = 0\n            top_ball = 0\n            bottom_ball = 0\n            for i in range(len(temp_pos)\/\/2):\n                if temp_pos[i*2] > obs['ball'][0]:\n                    front_ball += 1\n                else:\n                    back_ball += 1\n                if temp_pos[i*2 + 1] > obs['ball'][1]:\n                    top_ball += 1\n                else:\n                    bottom_ball += 1\n            o_ball_pnum.append(front_ball)\n            o_ball_pnum.append(back_ball)\n            o_ball_pnum.append(top_ball)\n            o_ball_pnum.append(bottom_ball)\n                        \n        o_ball_pnum.append(o_ball_pnum[0]+o_ball_pnum[4])\n        o_ball_pnum.append(o_ball_pnum[1]+o_ball_pnum[5])\n        o_ball_pnum.append(o_ball_pnum[2]+o_ball_pnum[6])\n        o_ball_pnum.append(o_ball_pnum[3]+o_ball_pnum[7])\n        \n        #-------------------------------------------#\n        # observations on around active_player\/ball #\n        #-------------------------------------------#\n        \n        o_pnum_around_activp = []\n        for dist in [1, 3, 5, 10, 15]:\n            pnum_dist_l = sum(np.array(o_pos_activep).flatten().reshape(-1, 2)[:11, 0] > 0.02 * dist)\n            pnum_dist_r = sum(np.array(o_pos_activep).flatten().reshape(-1, 2)[11:, 0] > 0.02 * dist)\n            pnum_dist_b = sum(np.array(o_pos_activep).flatten().reshape(-1, 2)[:, 0] > 0.02 * dist)        \n            o_pnum_around_activp.append(pnum_dist_l)\n            o_pnum_around_activp.append(pnum_dist_r)\n            o_pnum_around_activp.append(pnum_dist_b)\n\n\n        o_pnum_around_ball = []\n        for dist in [1, 3, 5, 10, 15]:\n            pnum_dist_l = sum(np.array(o_pos_ball).flatten().reshape(-1, 2)[:11, 0] > 0.02 * dist)\n            pnum_dist_r = sum(np.array(o_pos_ball).flatten().reshape(-1, 2)[11:, 0] > 0.02 * dist)\n            pnum_dist_b = sum(np.array(o_pos_ball).flatten().reshape(-1, 2)[:, 0] > 0.02 * dist)        \n            o_pnum_around_ball.append(pnum_dist_l)\n            o_pnum_around_ball.append(pnum_dist_r)\n            o_pnum_around_ball.append(pnum_dist_b)\n        \n        \n        \n        #---------------------------#\n        # observations on the other #\n        #---------------------------#        \n        o_other = []\n    \n        # o_other.extend(do_flatten(obs['score']))\n        o_other.append(obs['score'][0])\n        o_other.append(obs['score'][1])\n        o_other.append(obs['score'][0] - obs['score'][1])\n        \n        o_other.append(obs['steps_left']) \n        \n        o_other.append(obs['game_mode']) \n\n\n        \n        #--------------------------#\n        # contat observations      #\n        #--------------------------#\n        final_obs.extend(o_pos)\n        final_obs.extend(o_dire)  \n        final_obs.extend(o_pos_center)    \n        final_obs.extend(o_dire_pt) \n        final_obs.extend(o_pos_l_goal) \n        final_obs.extend(o_pos_r_goal)         \n        final_obs.extend(o_pos_activep)  \n        final_obs.extend(o_pos_lp_near_activep) \n        final_obs.extend(o_pos_rp_near_activep) \n        final_obs.extend(o_pos_ball)\n        final_obs.extend(o_pos_rp_near_ball)  \n \n        final_obs.extend(o_state)   \n    \n        final_obs.extend(o_ball)     \n        final_obs.extend(o_ball_points)           \n        final_obs.extend(o_ball_dire)     \n        final_obs.extend(o_ball_dire_pt)    \n        final_obs.extend(o_ball_rota)     \n        final_obs.extend(o_ball_rota_pt)    \n        final_obs.extend(o_ball_own) \n        final_obs.extend(o_ball_angle_goal)                                        \n\n        final_obs.extend(o_activep)        \n        final_obs.extend(o_sticky) \n\n        final_obs.extend(o_team_grav)\n        final_obs.extend(o_team_grav_pt)\n        final_obs.extend(o_pos_grav_left)\n        final_obs.extend(o_pos_grav_right)\n        final_obs.extend(o_pos_grav_both)\n\n        final_obs.extend(o_team_grav_woGK)\n        final_obs.extend(o_team_grav_woGK_pt)\n        final_obs.extend(o_pos_grav_woGK_left)\n        final_obs.extend(o_pos_grav_woGK_right)\n        final_obs.extend(o_pos_grav_woGK_both)\n        \n        final_obs.extend(o_pos_l_frontp)\n        final_obs.extend(o_pos_l_backp)\n        final_obs.extend(o_pos_r_frontp)\n        final_obs.extend(o_pos_r_backp)\n        final_obs.extend(o_lines)\n        \n        final_obs.extend(o_width_x)\n        final_obs.extend(o_width_y)\n        \n        final_obs.extend(o_ball_pnum)\n        \n        final_obs.extend(o_pnum_around_activp)\n        final_obs.extend(o_pnum_around_ball)\n        \n        final_obs.extend(o_other)\n            \n        return np.array(final_obs, dtype=np.float32).flatten()\n\n# @human_readable_agent\ndef agent(obs):\n    try:\n        obs1=obs['observation']['players_raw'][0]\n    except:\n        obs1=obs['players_raw'][0]\n        \n    conv_obs1=convert_observation([obs1])\n    \n    # predict\n    if obs1['ball_owned_team'] == 0:\n        action=np.argmax(loaded_model_lt.predict([conv_obs1]).flatten())\n    elif obs1['ball_owned_team'] == 1:\n        action=np.argmax(loaded_model_rt.predict([conv_obs1]).flatten())\n    else:\n        action=np.argmax(loaded_model_no.predict([conv_obs1]).flatten())\n    \n    return [int(action)]","1a471d83":"!cd \/kaggle_simulations\/agent && tar -czvf \/kaggle\/working\/submit.tar.gz main.py saved_model","1d538101":"!tar -zxvf .\/submit.tar.gz","1960ad79":"# Install:\n# Kaggle environments.\n!git clone https:\/\/github.com\/Kaggle\/kaggle-environments.git\n!cd kaggle-environments && pip install .\n\n# GFootball environment.\n!apt-get update -y\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.7 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.7.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .","8536179a":"from kaggle_environments import make\n\nenv = make(\"football\", configuration={\"save_video\": True, \"scenario_name\": \"11_vs_11_kaggle\", \"running_in_notebook\": True})\noutput = env.run([\"\/kaggle\/working\/main.py\",\n                  \"\/kaggle\/working\/main.py\"])\nprint('Left player: reward = %s, status = %s, info = %s' % (output[-1][0]['reward'],\n                                                            output[-1][0]['status'], output[-1][0]['info']))\nenv.render(mode='human',width=800, height=600)","a749a630":"!rm -rf .\/football\n!rm -rf .\/kaggle-environments","c7e19483":"# Make Agent","aa542d7f":"# Set Parameters\n**for test**  \nset `is_test_run`: True  \nset `use_multi_data`: False \n\n**for main calculation**  \nset `is_test_run`: False  \nset `use_multi_data`: True (if necessary)  \nset `skip_loss_game`: True (if necessary)  ","124ff08b":"# Check Agent Operation","0f455271":"# Functions for Feature Creation","6e6df4d0":"# Training LightGBM","2a3d6637":"# Team Ken+digimagi's solution\n\nThis notebook is not our final\/best model, but  it contains the main ideas of our team.\n\nSpecial thanks to WeKick.\n\nYou can see the episode of the agent that is almost same as this notebook here.\nhttps:\/\/www.kaggle.com\/c\/google-football\/submissions?dialog=episodes-submission-18348972"}}