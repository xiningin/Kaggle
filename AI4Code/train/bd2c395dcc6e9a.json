{"cell_type":{"8313f7d0":"code","ed627c30":"code","afa6c4cb":"code","278ab6f3":"code","cee6eac5":"code","18c78856":"code","cab2be2d":"code","b0c0af59":"code","30196d60":"code","89832759":"code","e623aada":"code","6d03bf8f":"code","ea937c7d":"code","c166e128":"code","09658860":"code","cd7d7e13":"code","5dfad0de":"code","da985cc7":"code","8a61fcef":"code","7742e238":"code","ccfe0bc6":"code","2435d6cc":"code","7e16f4ad":"code","d5180d64":"code","e86cd3d0":"code","17546860":"code","55c1ca78":"code","fc049a5f":"code","712110d0":"code","71db1245":"code","dc93d862":"code","c339ba03":"code","c6848de5":"code","24194b1d":"code","ca8e59e9":"code","60781a90":"code","be92bca5":"code","a611a3a1":"code","494e2cf9":"code","c63545d4":"code","573b9cdd":"code","eb409b45":"code","37f3a573":"code","2ff1849f":"code","d26513b3":"code","85eb1991":"code","f1f43c3c":"code","a962851e":"markdown","6a880fee":"markdown","819804a1":"markdown","5db8dcb0":"markdown","f8f53974":"markdown","30c8365c":"markdown","a409849a":"markdown","bdb514fe":"markdown","627c7ae0":"markdown","47166488":"markdown","1b37da52":"markdown","2525226d":"markdown","211bcb91":"markdown","adf200ac":"markdown","b6b91aab":"markdown","d954c8f1":"markdown","41269b44":"markdown","aa92339a":"markdown","1ce80c2a":"markdown","3f543a65":"markdown","fdd30d7b":"markdown","bf2ebbb8":"markdown","a9974fc7":"markdown","ef22cd60":"markdown","2bb45ecb":"markdown","822b4400":"markdown"},"source":{"8313f7d0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ed627c30":"matches = pd.read_csv(\"..\/input\/ipl-dataset\/matches.csv\")\ndeliveries = pd.read_csv(\"..\/input\/ipl-dataset\/deliveries.csv\")","afa6c4cb":"print(matches.shape)\nprint(deliveries.shape)","278ab6f3":"matches.head()","cee6eac5":"print(pd.isnull(matches).sum())","18c78856":"\nmatches.drop(\"umpire3\", axis = 1, inplace = True)\nmatches.drop(\"umpire1\", axis = 1, inplace = True)\nmatches.drop(\"umpire2\", axis = 1, inplace = True)\nmatches.sample(10)","cab2be2d":"print(matches[\"city\"].unique())\nprint(matches[\"winner\"].unique())\n","b0c0af59":"matches[\"city\"].fillna(\"Not Known\", inplace=True)\nmatches[\"winner\"].fillna(\"Not Known\", inplace=True)","30196d60":"print(matches[matches[\"winner\"] == \"Not Known\"][\"result\"])","89832759":"print(matches[matches[\"city\"] == \"Not Known\"][\"venue\"])","e623aada":"print(matches[matches[\"city\"] == \"Not Known\"][\"date\"])","6d03bf8f":"matches[\"city\"] = matches[\"city\"].replace([\"Not Known\"],\"Dubai\")","ea937c7d":"print(matches[\"city\"].unique())","c166e128":"matches[\"player_of_match\"].fillna(\"Not Known\", inplace=True)","09658860":"print(matches[matches[\"player_of_match\"] == \"Not Known\"][\"result\"])","cd7d7e13":"matches.drop(matches.index[matches[\"player_of_match\"]==\"Not Known\"], inplace = True)\nmatches.shape","5dfad0de":"sea_win = matches[[\"season\",\"winner\"]]\nsea_win = sea_win.drop_duplicates(subset = [\"season\"], keep = \"last\")\nsea_win.reset_index(drop = True).sort_values(\"season\")","da985cc7":"sea_win[\"winner\"].value_counts()","8a61fcef":"sns.countplot(data = sea_win, x = \"winner\")\nplt.xlabel(\"Franchise\", fontsize = 16)\nplt.ylabel(\"Number of tournaments won\", fontsize = 16)\nplt.title(\"Top Franchise\", fontsize = 25)\nplt.xticks(rotation = 35, fontsize = 10)\nplt.show()","7742e238":"plt.figure(figsize=(20,10))\nsns.countplot(\"winner\",data = matches, palette = \"flare\" )\nplt.title(\"Number of matches won\", fontsize = 25)\nplt.xlabel(\"Teams\",fontsize = 16)\nplt.ylabel(\"Number of wins\", fontsize = 16)\nplt.xticks(rotation = 50,  fontsize = 12)\nplt.show()","ccfe0bc6":"matches[\"win_by\"] = np.where(matches[\"win_by_wickets\"]>0,\"bowl first\",\"bat first\")\nwins = matches[\"win_by\"].value_counts()\nwins","2435d6cc":"label = np.array(wins.index)\nplt.pie(wins, labels = label,startangle = 90, autopct = \"%1.1f%%\")\nplt.title(\"Result of Matches\")\nplt.show()","7e16f4ad":"plt.figure(figsize=(20,10))\nsns.countplot(\"season\",data = matches, hue = \"win_by\" )\nplt.title(\"Number of wins by Batting and Bowling First\", fontsize =16)\nplt.xlabel(\"Seasons\",fontsize = 16)\nplt.ylabel(\"Number of Wins\", fontsize = 16)\nplt.xticks(fontsize = 16)\nplt.show()","d5180d64":"toss = matches[\"toss_decision\"].value_counts()\ntoss","e86cd3d0":"label = np.array(toss.index)\nplt.pie(toss, labels = label,startangle = 90, autopct = \"%1.1f%%\")\nplt.title(\"Result of Toss\")\nplt.show()","17546860":"plt.figure(figsize=(20,10))\nsns.countplot(\"season\",data = matches, hue = \"toss_decision\" )\nplt.xlabel(\"Seasons\",fontsize = 16)\nplt.ylabel(\"Toss Decision\", fontsize = 16)\nplt.xticks(fontsize = 16)\nplt.show()","55c1ca78":"Toss_win = matches[\"toss_winner\"] == matches[\"winner\"]\nTw = Toss_win.value_counts()\nTw","fc049a5f":"plt.pie(Tw, labels = [\"win with toss win\",\"win without toss win\"] ,startangle = 90, autopct = \"%1.1f%%\")\nplt.title(\"Toss-Result Relation\")\nplt.show()","712110d0":"MVP = matches[\"player_of_match\"].value_counts()\nTop = MVP[:10]\nTop","71db1245":"plt.figure(figsize = (16,8))\nTop.plot.bar()\nplt.ylabel(\"Number of MOMs\", fontsize = 16)\nplt.title(\"Most Valuable Players\", fontsize = 25)\nplt.xticks(rotation = 45, fontsize = 16)\nplt.show()","dc93d862":"deliveries.head()","c339ba03":"data = deliveries.merge(matches[[\"id\",\"season\",\"winner\"]],how = \"inner\", left_on = \"match_id\",right_on = \"id\")\ndata.head()","c6848de5":"data = data.replace([\"Rising Pune Supergiant\"],\"Rising Pune Supergiants\")","24194b1d":"boundary = data[[\"batting_team\",\"batsman_runs\",\"batsman\"]]\nbound4 = boundary[boundary[\"batsman_runs\"] == 4]\nBound4 = bound4.groupby(\"batting_team\")[\"batsman_runs\"].agg([(\"Fours\",\"count\")])\nbound6 = boundary[boundary[\"batsman_runs\"] == 6]\nBound6 = bound6.groupby(\"batting_team\")[\"batsman_runs\"].agg([(\"Sixes\",\"count\")])\nbatsman6 = bound6.groupby(\"batsman\")[\"batsman_runs\"].agg([(\"Sixes\",\"count\")])\nbatsman4 = bound4.groupby(\"batsman\")[\"batsman_runs\"].agg([(\"Fours\",\"count\")])\nBound = Bound4.merge(Bound6, how = \"inner\",right_on = \"batting_team\",left_on=\"batting_team\")\nBound","ca8e59e9":"Bound_total = Bound[\"Fours\"]+Bound[\"Sixes\"]\nBound_total","60781a90":"plt.figure(figsize = (16,8))\nBound_total.plot.bar()\nplt.xlabel(\"Teams\",fontsize = 16)\nplt.ylabel(\"Number of boundaries\", fontsize = 16)\nplt.title(\"Most Boundaries\", fontsize = 25)\nplt.xticks(rotation = 65, fontsize = 10)\nplt.show()","be92bca5":"batsman4sort = batsman4.sort_values(\"Fours\",ascending = False)\nbatsman4sort.head(10)","a611a3a1":"Top4 = batsman4sort[:10]\nplt.figure(figsize = (20,10))\nTop4.plot.bar()\nplt.xlabel(\"batsman\", fontsize = 16)\nplt.ylabel(\"Number of fours\", fontsize = 16)\nplt.title(\"Most Fours\", fontsize = 25)\nplt.xticks(rotation = 45, fontsize = 10)\nplt.show()","494e2cf9":"batsman6sort = batsman6.sort_values(\"Sixes\",ascending = False)\nbatsman6sort.head(10)","c63545d4":"Top6 = batsman6sort[:10]\nplt.figure(figsize = (20,10))\nTop6.plot.bar()\nplt.xlabel(\"batsman\", fontsize = 16)\nplt.ylabel(\"Number of sixes\", fontsize = 16)\nplt.title(\"Most Sixes\", fontsize = 25)\nplt.xticks(rotation = 45, fontsize = 10)\nplt.show()","573b9cdd":"batsman_score = boundary.groupby(\"batsman\")[\"batsman_runs\"].agg([(\"Runs\",\"sum\")])\nbatsman_score_sort = batsman_score.sort_values(\"Runs\",ascending = False)\nbatsman_score_sort.head(10)","eb409b45":"Top_scorer = batsman_score_sort[:10]\nplt.figure(figsize = (20,10))\nTop_scorer.plot.bar()\nplt.xlabel(\"batsman\", fontsize = 16)\nplt.ylabel(\"Number of runs\", fontsize = 16)\nplt.title(\"Top Batsmen\", fontsize = 25)\nplt.xticks(rotation = 45, fontsize = 10)\nplt.show()","37f3a573":"print(pd.isnull(deliveries).sum())","2ff1849f":"print(deliveries[\"dismissal_kind\"].unique())","d26513b3":"wickets = deliveries.dropna(subset=['dismissal_kind'])\nwickets = wickets[~wickets['dismissal_kind'].isin(['run out','retired hurt','obstructing the field'])]\nbowlers = wickets.groupby(\"bowler\")['dismissal_kind'].agg(['count']).reset_index()\nbowlers=bowlers.rename(columns={'count':'wickets'})\nbowlers","85eb1991":"bowlers_sort = bowlers.sort_values(\"wickets\",ascending = False)\nTop_bowlers = bowlers_sort[:10]\nTop_bowlers","f1f43c3c":"plt.figure(figsize = (20,10))\nsns.barplot(data = Top_bowlers,x = \"bowler\",y = \"wickets\")\nplt.xlabel(\"Bowlers\", fontsize = 25)\nplt.ylabel(\"Number of wickets\", fontsize = 25)\nplt.title(\"Top Bowlers\", fontsize = 25)\nplt.xticks(rotation = 45, fontsize = 16)\nplt.show()","a962851e":"> # Impact of Toss","6a880fee":"These are the same matches whose result was not known. Thus we can drop those 4 matches from dataset as our analysis is based upon MVP and dropping 4 entries will not affect accuracy.","819804a1":"# Toss plays significant role in outcome of result.","5db8dcb0":"> # Toss Decision","f8f53974":"# Chris Gayle and ABD are the most valuable players of the tournament.","30c8365c":"#  EDA on IPL-dataset","a409849a":"# Top Bowlers","bdb514fe":"> # Summary","627c7ae0":"> # Number of matches won by teams","47166488":"Now we will see this trend season by season.","1b37da52":"Thus, nan in \"winner\" does not mean that we don't have the data, but the match was washed out or not played due to some other reason and we don't have any clear winner of the match.","2525226d":"> # Boundary Analysis","211bcb91":"> # MVP","adf200ac":"# Suresh Raina and Virat Kohli are the leading run scorers in the tournament.","b6b91aab":"So many null values in player_dismissed and dismissal_kind doesn't mean that data is not available, but batsmen didn't got out on those deliveries.","d954c8f1":"# Bowling first has significant advantage over batting first in the tournament.","41269b44":"Retired Hurt, Obs field and runout doesn't count as bowler's wicket. Thus we will omit these values to calculate total wickets of bowlers.","aa92339a":"Author : Yash Trivedi\n\n\nTask   : EDA-Sports","1ce80c2a":"# Mumbai Indians is the best franchise in the tournament","3f543a65":"> # Win type analysis","fdd30d7b":"**Questions posed**\n\nAs a sports analyst, find out the most successful teams, players and factors\ncontributing win or loss of a team.\nSuggest teams or players a company should endorse for its products.","bf2ebbb8":"Chris Gayle is clearly the \"Universe BOSS\".","a9974fc7":"Mumbai Indians, Chennai Super Kings and Kolkota Knight Riders are the three most successful teams in the tournament considering num ber of titles and number of games won.\n\nWin the toss and bowl first has been the trend in recent times. (61.2% overall)\n\nTeam chasing the score has won 54% of matches.\n\nIf a team wins the toss then it has 52.3% chances of winning the game.\n\nChris Gayle and ABD are the MVPs of tournament having won Player of the Match 21 and 20 times respectively.\n\nShikhar Dhawan has struck most number of fours and Chris Gayle has hammered most sixes in the tournament.\n\nSuresh Raina and Virat Kohli tops the list of leading run scorers in the tournament.\n\nLasith Malinga is the leading wicket taker.\n\nCompanies should go for any one of MI, CSK or KKR to endorse thier products. \n\nCompanies should reach out to Chris Gayle, ABD, Virat Kohli, Suresh Raina, Lasith Malinga, Shikhar Dhawan, Rohit Sharma, David Warner and MS Dhoni for endorsement of their priducts.\n\n","ef22cd60":"Due, to general elections in India, seven matches were hosted by UAE in 2014. Thus we can replace the unknown data in city column with Dubai.","2bb45ecb":"# Lasith Malinga tops the list of leading wicket takers.","822b4400":"> # Seasonal Winners"}}