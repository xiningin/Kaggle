{"cell_type":{"6932a737":"code","fa6b696f":"code","36151738":"code","9f074c9d":"code","fdd64034":"code","956d1bb2":"code","d2f232f2":"code","ff69f1f2":"code","c7b9d049":"code","0b0adc6c":"code","5cc9b373":"code","2b7333b9":"code","da53599c":"code","e0e94df0":"code","df6db29a":"code","d3d189ca":"code","5d98c183":"code","026eeaf1":"code","2d22c87d":"code","35e2d65e":"code","631a31f7":"code","b4353cd8":"code","c950a9fc":"code","dc5f64b5":"code","4c75fb06":"code","6d8e4e9a":"code","40219db8":"code","c8ff7c23":"code","c2cf9a57":"code","f2bbc1a2":"code","485fb655":"code","aa99a5cf":"code","2ce6f18e":"markdown"},"source":{"6932a737":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa6b696f":"import warnings\nwarnings.filterwarnings('ignore')\n# to display max rows and columns\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","36151738":"df= pd.read_csv(\"\/kaggle\/input\/iris-flower-dataset\/IRIS.csv\") # read csv data\ndf.head()                                                    # header gives top 5 rows of data( no of rows is editable)","9f074c9d":"df.columns","fdd64034":"print(\"data types :\", df.dtypes)\n\nprint(\" \")\n\nprint(\"size       :\",df.size)\n\nprint(\" \")\n\nprint(\"shape      :\",df.shape)","956d1bb2":"df.info()","d2f232f2":"print(\"no of uniques  :\",df.nunique())\n\nprint(\" \")\n\nprint(\"unique no of species :\",df[\"species\"].unique())","ff69f1f2":"numerical_variables=df.describe() \n\nnumerical_variables","c7b9d049":"df.corr() # to find correlation ","0b0adc6c":"import seaborn as sns\n \nHM= sns.heatmap(df.corr(),annot=True) # plotting heatmap to show correlation among variables\nHM","5cc9b373":"df.isna().sum() # to find null values","2b7333b9":"sns.heatmap(df.isnull(),cbar=False) ","da53599c":"df[\"sepal_length\"].sort_values(ascending=False).head(11)","e0e94df0":"import matplotlib.pyplot as plt\n\ndf.plot(kind='hist',subplots= True,figsize=(8,10))\n\nplt.tight_layout()\n\nplt.show()","df6db29a":"plt.figure(figsize=(10,8))\n\nsns.countplot(df.species)","d3d189ca":"plt.figure(figsize=(10,8))\n\nsns.violinplot('species','sepal_length',data=df)","5d98c183":"plt.figure(figsize=(10,8))\n\nsns.violinplot('species','sepal_width',data=df)","026eeaf1":"plt.figure(figsize=(10,8))\n\nsns.violinplot('species','petal_length',data=df)","2d22c87d":"sns.pairplot(df,hue='species')\n\nplt.tight_layout()\n\nplt.show()","35e2d65e":"df.describe()","631a31f7":"num_var=df.select_dtypes(include=np.number)\nnum_var.head()","b4353cd8":"cat_var =df.select_dtypes(include=object)\ncat_var.head()","c950a9fc":"y=df[\"species\"].values\nX=df.iloc[ : , :-1]\n\nprint(\"x:\", X.shape)\n\nprint()\n\nprint(\"y:\", y.shape)","dc5f64b5":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.30,random_state=4)","4c75fb06":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","6d8e4e9a":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB().fit(X_train,y_train)","40219db8":"y_pred = gnb.predict(X_test)\ny_pred","c8ff7c23":"y_compare =np.vstack((y_test,y_pred)).T\ny_compare","c2cf9a57":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pred)\ncm","f2bbc1a2":"sns.heatmap(cm,annot=True,cbar=False)","485fb655":"from sklearn import metrics\nprint(\"Gaussian Naive Bayes model accuracy(in %):\", metrics.accuracy_score(y_test, y_pred)*100)","aa99a5cf":"from sklearn.metrics import classification_report\n# accuracy measures by classification_report()\nresult = classification_report(y_test,y_pred)\n\n# print the result\nprint(result)","2ce6f18e":"- Petal Length and Petal Width are highly Correlated        --   0.96\n- Petal Length and Sepal Length having strong Correlation   --   0.87\n- Sepal Length and Petal Width have also storng Correlation --   0.82"}}