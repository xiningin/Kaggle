{"cell_type":{"6de3d0b5":"code","4d83e7a3":"code","1e7fbdfc":"code","b5501ad7":"code","926a0e85":"code","a217efc6":"code","f6a20ee2":"code","4aa85485":"code","8ea797f7":"code","e1f82595":"code","22540ef8":"code","28582e04":"code","1f10af34":"code","bc457597":"code","213b8379":"code","70b255e5":"code","2becc381":"code","6074b023":"code","ba148eea":"code","b7f2bb96":"code","5275b62f":"code","aed44ba3":"code","7ad6b931":"code","fc7c6c53":"code","9f3744cf":"code","25bfec3c":"code","4f940449":"code","f7359899":"code","43d05818":"code","47c37337":"code","f5b99e03":"code","277ac54e":"code","0c16b900":"code","3148189f":"code","34bf259f":"code","f5f5d8da":"code","a628cdf1":"code","841947e8":"code","6635d951":"code","ebdd0286":"code","277a569d":"code","9906b906":"code","27207d3c":"markdown","f4265c8b":"markdown","b3c3e224":"markdown","558e1277":"markdown","11109602":"markdown","c91b43f1":"markdown","cbaefcc9":"markdown","5fdeb563":"markdown","25fa2440":"markdown","85dbcb6e":"markdown","f9ac7152":"markdown","19ef0e32":"markdown","7976818a":"markdown","828e655a":"markdown","b9f776fe":"markdown","7b3de34e":"markdown","9aedb888":"markdown","3368e8f6":"markdown","bb3cad8f":"markdown","d052dad0":"markdown","fdc0fe40":"markdown","86d18294":"markdown","c256c512":"markdown","be945893":"markdown","27dbe010":"markdown","d9243126":"markdown","82df7601":"markdown","dd331135":"markdown","99daebef":"markdown","6bca1874":"markdown","9487f997":"markdown","acd99cdb":"markdown","63454bba":"markdown","07abed01":"markdown","0da4d9b7":"markdown","f593bf27":"markdown"},"source":{"6de3d0b5":"# For data manipulation\nimport pandas as pd              \n\n# Garbage Collector to free up memory\nimport gc                         \ngc.enable()                       # Activate ","4d83e7a3":"orders = pd.read_csv('..\/input\/instacart-market-basket-analysis\/orders.csv')\norder_products_train = pd.read_csv('..\/input\/instacart-market-basket-analysis\/order_products__train.csv')\norder_products_prior = pd.read_csv('..\/input\/instacart-market-basket-analysis\/order_products__prior.csv')\nproducts = pd.read_csv('..\/input\/instacart-market-basket-analysis\/products.csv')\naisles = pd.read_csv('..\/input\/instacart-market-basket-analysis\/aisles.csv')\ndepartments = pd.read_csv('..\/input\/instacart-market-basket-analysis\/departments.csv')","1e7fbdfc":"'''\n#### Remove triple quotes to trim your dataset and experiment with your data\n### COMMANDS FOR CODING TESTING - Get 10% of users \norders = orders.loc[orders.user_id.isin(orders.user_id.drop_duplicates().sample(frac=0.1, random_state=25))] \n'''","b5501ad7":"orders.head()","926a0e85":"order_products_train.head()","a217efc6":"order_products_prior.head()","f6a20ee2":"products.head()","4aa85485":"aisles.head()","8ea797f7":"departments.head()","e1f82595":"# We convert character variables into category. \n# In Python, a categorical variable is called category and has a fixed number of different values\naisles['aisle'] = aisles['aisle'].astype('category')\ndepartments['department'] = departments['department'].astype('category')\norders['eval_set'] = orders['eval_set'].astype('category')\nproducts['product_name'] = products['product_name'].astype('category')","22540ef8":"#Merge the orders DF with order_products_prior by their order_id, keep only these rows with order_id that they are appear on both DFs\nop = orders.merge(order_products_prior, on='order_id', how='inner')\nop.head()","28582e04":"## First approach in one step:\n# Create distinct groups for each user, identify the highest order number in each group, save the new column to a DataFrame\nuser = op.groupby('user_id')['order_number'].max().to_frame('user_t_orders') #\nuser.head()\n\n## Second approach in two steps: \n#1. Save the result as DataFrame with Double brackets --> [[ ]] \n#user = op.groupby('user_id')[['order_number']].max()\n#2. Rename the label of the column\n#user.columns = ['user_t_orders']\n#user.head()","1f10af34":"# Reset the index of the DF so to bring user_id from index to column (pre-requisite for step 2.4)\nuser = user.reset_index()\nuser.head()","bc457597":"# Create distinct groups for each product, count the orders, save the result for each product to a new DataFrame  \nprd = op.groupby('product_id')['order_id'].count().to_frame('prd_t_purchases') #\nprd.head()","213b8379":"# Reset the index of the DF so to bring product_id rom index to column (pre-requisite for step 2.4)\nprd = prd.reset_index()\nprd.head()","70b255e5":"# Create distinct groups for each combination of user and product, count orders, save the result for each user X product to a new DataFrame \nuxp = op.groupby(['user_id', 'product_id'])['order_id'].count().to_frame('uxp_t_bought') #\nuxp.head()","2becc381":"# Reset the index of the DF so to bring user_id & product_id rom indices to columns (pre-requisite for step 2.4)\nuxp = uxp.reset_index()\nuxp.head()","6074b023":"#Merge uxp features with the user features\n#Store the results on a new DataFrame\ndata = uxp.merge(user, on='user_id', how='left')\ndata.head()","ba148eea":"#Merge uxp & user features (the new DataFrame) with prd features\ndata = data.merge(prd, on='product_id', how='left') #\ndata.head()","b7f2bb96":"del op, user, prd, uxp\ngc.collect()","5275b62f":"## First approach:\n# In two steps keep only the future orders from all customers: train & test \norders_future = orders[((orders.eval_set=='train') | (orders.eval_set=='test'))]\norders_future = orders_future[ ['user_id', 'eval_set', 'order_id'] ]\norders_future.head(10)\n\n## Second approach (if you want to test it you have to re-run the notebook):\n# In one step keep only the future orders from all customers: train & test \n#orders_future = orders.loc[((orders.eval_set=='train') | (orders.eval_set=='test')), ['user_id', 'eval_set', 'order_id'] ]\n#orders_future.head(10)\n\n## Third approach (if you want to test it you have to re-run the notebook):\n# In one step exclude all the prior orders so to deal with the future orders from all customers\n#orders_future = orders.loc[orders.eval_set!='prior', ['user_id', 'eval_set', 'order_id'] ]\n#orders_future.head(10)","aed44ba3":"# bring the info of the future orders to data DF\ndata = data.merge(orders_future, on='user_id', how='left')\ndata.head(10)","7ad6b931":"#Keep only the customers who we know what they bought in their future order\ndata_train = data[data.eval_set=='train'] #\ndata_train.head()","fc7c6c53":"#Get from order_products_train all the products that the train users bought bought in their future order\ndata_train = data_train.merge(order_products_train[['product_id','order_id', 'reordered']], on=['product_id','order_id'], how='left' )\ndata_train.head(15)","9f3744cf":"#Where the previous merge, left a NaN value on reordered column means that the customers they haven't bought the product. We change the value on them to 0.\ndata_train['reordered'] = data_train['reordered'].fillna(0)\ndata_train.head(15)","25bfec3c":"#We set user_id and product_id as the index of the DF\ndata_train = data_train.set_index(['user_id', 'product_id'])\ndata_train.head(15)","4f940449":"#We remove all non-predictor variables\ndata_train = data_train.drop(['eval_set', 'order_id'], axis=1)\ndata_train.head(15)","f7359899":"#Keep only the future orders from customers who are labelled as test\ndata_test = data[data.eval_set=='test'] #\ndata_test.head()","43d05818":"#We set user_id and product_id as the index of the DF\ndata_test = data_test.set_index(['user_id', 'product_id']) #\ndata_test.head()","47c37337":"#We remove all non-predictor variables\ndata_test = data_test.drop(['eval_set','order_id'], axis=1)\n#Check if the data_test DF, has the same number of columns as the data_train DF, excluding the response variable\ndata_test.head()","f5b99e03":"########################\n#IMPORT REQUIRED PACKAGES\n#######################\nfrom sklearn.linear_model import LogisticRegression\n#from sklearn.model_selection import train_test_split #validate algorithm\n#from sklearn.metrics import accuracy_score, classification_report, confusion_matrix  #validate algorithm\n\n#####################\n#CREATE X_train, y_train\n#####################\nX_train, y_train = data_train.drop('reordered', axis=1), data_train.reordered\n#X_train, X_val, y_train, y_val = train_test_split(data_train.drop('reordered', axis=1), data_train.reordered, test_size=0.8, random_state=42)\n  #validate algorithm\n\n#####################\n# INITIATE AND TRAIN MODEL\n#####################\nlog = LogisticRegression(random_state=42)\nmodel = log.fit(X_train, y_train)\n\n#####################\n# SCORE MODEL\n#####################\n#log.score(X_val, y_val) # validate algorithm\n\n#####################\n## DELETE TEMPORARY OBJECTS \n#####################\ndel [X_train, y_train]\n# del [X_val, y_val] # remove validate algorithm objects\ngc.collect()\n\n### TO REMOVE THE FUTURE WARNING THAT YOU SEE BELOW: Add the argument solver='lbfgs' to LogisticRegression( ) function","277ac54e":"# Predict values for test data with our model from chapter 5 - the results are saved as a Python array\ntest_pred = model.predict(data_test).astype(int)\ntest_pred[0:20] #display the first 20 predictions of the numpy array","0c16b900":"## OR set a custom threshold (in this problem, 0.21 yields the best prediction)\ntest_pred = (model.predict_proba(data_test)[:,1] >= 0.21).astype(int)\ntest_pred[0:20] #display the first 20 predictions of the numpy array","3148189f":"#Save the prediction in a new column in the data_test DF\ndata_test['prediction'] = test_pred\ndata_test.head()","34bf259f":"#Reset the index\nfinal = data_test.reset_index()\n#Keep only the required columns to create our submission file (Chapter 6)\nfinal = final[['product_id', 'user_id', 'prediction']]\n\ngc.collect()\nfinal.head()","f5f5d8da":"orders_test = orders.loc[orders.eval_set=='test',(\"user_id\", \"order_id\") ]\norders_test.head()","a628cdf1":"final = final.merge(orders_test, on='user_id', how='left')\nfinal.head()","841947e8":"#remove user_id column\nfinal = final.drop('user_id', axis=1)\n#convert product_id as integer\nfinal['product_id'] = final.product_id.astype(int)\n\n#Remove all unnecessary objects\ndel orders\ndel orders_test\ngc.collect()\n\nfinal.head()","6635d951":"d = dict()\nfor row in final.itertuples():\n    if row.prediction== 1:\n        try:\n            d[row.order_id] += ' ' + str(row.product_id)\n        except:\n            d[row.order_id] = str(row.product_id)\n\nfor order in final.order_id:\n    if order not in d:\n        d[order] = 'None'\n        \ngc.collect()\n\n#We now check how the dictionary were populated (open hidden output)\nd","ebdd0286":"#Convert the dictionary into a DataFrame\nsub = pd.DataFrame.from_dict(d, orient='index')\n\n#Reset index\nsub.reset_index(inplace=True)\n#Set column names\nsub.columns = ['order_id', 'products']\n\nsub.head()","277a569d":"#Check if sub file has 75000 predictions\nsub.shape[0]","9906b906":"sub.to_csv('sub.csv', index=False)","27207d3c":"We now use the .head( ) method in order to visualise the first 10 rows of these tables. Click the Output button below to see the tables.","f4265c8b":"# 6. Creation of Submission File\nTo submit our prediction to Instacart competition we have to get for each user_id (test users) their last order_id. The final submission file should have the test order numbers and the products that we predict that are going to be bought.\n\nTo create this file we retrieve from orders DataFrame all the test orders with their matching user_id:","b3c3e224":"## 2.2 Create product predictors\n \n### 2.2.1 Number of purchases for each product \ud83d\udcda\ud83d\udcdd\nWe calculate the total number of purchases for each product (from all customers). We create a **prd** DataFrame to store the results.","558e1277":"# Introduction\nThis kernel has been created by the [Information Systems Lab](http:\/\/islab.uom.gr) to introduce students of the [University of Macedonia](http:\/\/www.uom.gr\/index.php?tmima=2&categorymenu=2), Greece to Machine Learning & Data Science.\n\n## The Instacart competition\nInstacart is an American company that operates as a same-day grocery delivery service. Customers select groceries through a web application from various retailers and delivered by a personal shopper. Instacart's service is mainly provided through a smartphone app, available on iOS and Android platforms, apart from its website.\n\nIn 2017 Instacart organised a Kaggle competition and provided to the community a sample dataset of over 3 million grocery orders from more than 200,000 Instacart users. The orders include 32 million basket items and 50,000 unique products. The objective of the competition was participants to **predict which previously purchased products will be in a user\u2019s next order**.\n\n## Objective\nThe objective of this Kernel is to introduce students to predictive business analytics with Python through the Instacart case. \n\nBy the time you finish this example, you will be able to:\n* Describe the steps of creating a predictive analytics model\n* Use Python and Pandas package to manipulate data\n* Use Python and Pandas package to create, combine, and delete DataFrames\n* Use Logistic Regression to create a predictive model\n* Apply the predictive model in order to make a prediction\n* Create a submission file for the competition of Instacart\n\n## Problem definition\nThe data that Instacart opened up include orders of 200,000 Instacart users with each user having between 4 and 100 orders. Instacart indicates each order in the data as prior, train or test. Prior orders describe the **past behaviour** of a user while train and test orders regard the **future behaviour that we need to predict**. \n\nAs a result, we want to predict which previously purchased products (prior orders) will be in a user\u2019s next order (train and test orders). \n\nFor the train orders Instacart reveals the results (i.e., the ordered products) while for the test orders we do not have this piece of information. Moreover, the future order of each user can be either train or test meaning that each user will be either a train or a test user. \n\nThe setting of the Instacart problem is described in the figure below (orders with yellow color denotes future orders of a user). \n\n<img src=\"https:\/\/i.imgur.com\/S0Miw3m.png\" width=\"350\">\n\nEach user has purchased various products during their prior orders. Moreover, for each user we know the order_id of their future order. The goal is to predict which of these products will be in a user's future order. \n\nThis is a **classification problem** because we need to predict whether each pair of user and product is a reorder or not. This is indicated by the value of the reordered variable, i.e. reordered=1 or reordered=0 (see figure below). \n\n<img src=\"https:\/\/i.imgur.com\/SxK2gsR.png\" width=\"350\">\n\nAs a result we need to come up and calculate various **predictor variables (X)** that will describe the characteristics of a product and the behaviour of a user regarding one or multiple products. We will do so by analysing the prior orders of the dataset. We will then use the train users to create a predictive model and the test users to make our actual prediction. As a result we create a table as the following one and we train an algorithm based on predictor variables (X) and response variable (Y).\n\n<img src=\"https:\/\/i.imgur.com\/Yb1CKAF.png\" width=\"600\">\n\n## Method\nOur method includes the following steps:\n1. <b>Import and reshape data<\/b>: This step includes loading CSV files into pandas DataFrames, tranform character variables to categorical variables, and create a supportive table.\n2. <b>Create predictor variables<\/b>: This step includes identifying and calculating predictor variables (aka features) from the initial datasets provided by Instacart. \n3. <b>Create train and test DataFrames<\/b>: In this step we create two distinct pandas DataFrames that will be used in the creation and the use of the predictive model.\n4. <b>Create predictive model (fit)<\/b>: In this step we employ Logistic Regression to create the predictive model through the train dataset.\n5. <b>Apply predictive model (predict)<\/b>: This step includes applying the model to predict the 'reordered' variable for the test dataset.\n6. <b>Create submission file<\/b>: In this final step we create the submission file with our predictions for Instacart's competition.\n7. <b>Get F1 score<\/b>: In this step we submit the produced and file and get the F1 score describing the accuracy of our prediction model.","11109602":"This step results in the following DataFrames:\n* <b>orders<\/b>: This table includes all orders, namely prior, train, and test. It has single primary key (<b>order_id<\/b>).\n* <b>order_products_train<\/b>: This table includes training orders. It has a composite primary key (<b>order_id and product_id<\/b>) and indicates whether a product in an order is a reorder or not (through the reordered variable).\n* <b>order_products_prior <\/b>: This table includes prior orders. It has a composite primary key (<b>order_id and product_id<\/b>) and indicates whether a product in an order is a reorder or not (through the reordered variable).\n* <b>products<\/b>: This table includes all products. It has a single primary key (<b>product_id<\/b>)\n* <b>aisles<\/b>: This table includes all aisles. It has a single primary key (<b>aisle_id<\/b>)\n* <b>departments<\/b>: This table includes all departments. It has a single primary key (<b>department_id<\/b>)","c91b43f1":"# 3. Create train and test DataFrames\n## 3.1 Include information about the last order of each user\n\nThe **data** DataFrame that we have created on the previous chapter (2.4) should include two more columns which define the type of user (train or test) and the order_id of the future order.\nThis information can be found on the initial orders DataFrame which was provided by Instacart: \n\n<img style=\"float: left;\" src=\"https:\/\/i.imgur.com\/jbatzRY.jpg\" >\n\n\nTowards this end:\n1. We select the **orders** DataFrame to keep only the future orders (labeled as \"train\" & \"test). \n2. Keep only the columns of our desire ['eval_set', 'order_id'] <span style=\"color:red\">**AND** <\/span> 'user_id' as is the matching key with our **data** DataFrame\n2. Merge **data** DataFrame with the information for the future order of each customer using as matching key the 'user_id'","cbaefcc9":"The DataFrame can now be converted to .csv file. Pandas can export a DataFrame to a .csv file with the .to_csv( ) function.","5fdeb563":"## 2.4 Merge all features\nWe now merge the DataFrames with the three types of predictors that we have created (i.e., for the users, the products and the combinations of users and products).\n\nWe will start from the **uxp** DataFrame and we will add the user and prd DataFrames. We do so because we want our final DataFrame (which will be called **data**) to have the following structure: \n\n<img style=\"float: left;\" src=\"https:\/\/i.imgur.com\/mI5BbFE.jpg\" >\n\n\n\n\n","25fa2440":"If you want to reduce the execution time of this Kernel you can use the following piece of code by uncomment it. This will trim the orders DataFrame and will keep a 10% random sample of the users. You can use this for experimentation.","85dbcb6e":"## 3.3 Prepare the test DataFrame \ud83d\udcda\ud83d\udcdd\nThe test DataFrame must have the same structure as the train DataFrame, excluding the \"reordered\" column (as it is the label that we want to predict).\n<img style=\"float: left;\" src=\"https:\/\/i.imgur.com\/lLJ7wpA.jpg\" >\n\n To achieve this we:\n- Keep only the customers who are labelled as test\n- Set as index the column(s) that uniquely describe each row (in our case \"user_id\" & \"product_id\")\n- Remove the columns that are predictors (in our case:'eval_set', 'order_id')","f9ac7152":"For these customers we get from order_products_train the products that they have bought. The matching keys are here two: the \"product_id\" & \"order_id\". A left join keeps all the observations from data_train DataFrame\n\n<img src=\"https:\/\/i.imgur.com\/kndys9d.jpg\" width=\"400\">","19ef0e32":"Now we convert the dictionary to a DataFrame and prepare it to extact it into a .csv file","7976818a":"Now to fulfill step 3, we merge on **data** DataFrame the information for the last order of each customer. The matching key here is the user_id and we select a left join as we want to keep all the observations from **data** DataFrame.\n\n<img src=\"https:\/\/i.imgur.com\/m3pNVDW.jpg\" width=\"400\">","828e655a":"# 1. Import and Reshape Data \nFirst we load the necessary Python packages and then we import the CSV files that were provided by Instacart.\n\n## 1.1 Import the required packages\nThe garbage collector (package gc), attempts to reclaim garbage, or memory occupied by objects (e.g., DataFrames) that are no longer in use by Python ([ref1](https:\/\/www.techopedia.com\/definition\/1083\/garbage-collection-gc-general-programming), [ref2](https:\/\/en.wikipedia.org\/wiki\/Garbage_collection_(computer_science)). This package will eliminate our risk to exceed the 16GB threshold of available RAM that Kaggle offers.\n\nThe **\"as\"** reserved word is to define an alias to the package. The alias help us to call easier a package in our code.","b9f776fe":"## 1.2 Load data from the CSV files\nInstacart provides 6 CSV files, which we have to load into Python. Towards this end, we use the .read_csv() function, which is included in the Pandas package. Reading in data with the .read_csv( ) function returns a DataFrame.","7b3de34e":"In this step we initiate an empty dictionary. In this dictionary we will place as index the order_id and as values all the products that the order will have. If none product will be purchased, we have explicitly to place the string \"None\". All this syntax follows the requirements of the competition for the submission file.","9aedb888":"**The submission file should have 75.000 predictions to be submitted in the competition**","3368e8f6":"The table contains for all the customers **(user_id)**: <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \u27a1\ufe0e the orders **(order_id)** that they have placed accompanied with: <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \u27a1\ufe0e the products **(product_id)** that have been bought in each order","bb3cad8f":"On the last columm (reordered) you can find out our response (y). \nThere are combinations of User X Product which they were reordered (1) on last order where other were not (NaN value).\n\nNow we manipulate the data_train DataFrame, to bring it into a structure for Machine Learning (X1,X2,....,Xn, y):\n- Fill NaN values with value zero (regards reordered rows without value = 1)\n- Set as index the column(s) that describe uniquely each row (in our case \"user_id\" & \"product_id\")\n- Remove columns which are not predictors (in our case: 'eval_set','order_id')","d052dad0":"## 3.2 Prepare the train DataFrame \ud83d\udcda\ud83d\udcdd\nIn order to prepare the train Dataset, which will be used to create our prediction model, we need to include also the response (Y) and thus have the following structure:\n\n<img style=\"float: left;\" src=\"https:\/\/i.imgur.com\/PDu2vfR.jpg\" >\n\nTowards this end:\n1. We keep only the customers who are labelled as \"train\" from the competition\n2. For these customers we get from order_products_train the products that they have bought, in order to create the response variable (reordered:1 or 0)\n3. We make all the required manipulations on that dataset and we remove the columns that are not predictors\n\nSo now we filter the **data** DataFrame so to keep only the train users:","fdc0fe40":"To filter and select the columns of our desire on orders (the 2 first steps) there are numerous approaches:","86d18294":"Before you are ready to submit your prediction to the competion, **ensure that**:\n- **You have used all of the offered data and not the 10% that was defined as an optional step on section 1.2**\n\nTo submit your prediction and get the F1 score you have to:\n1. Commit this notebook and wait for the results \n2. Go to view mode (where you see your notebook but you can't edit it)\n3. Click on the data section from your left panel\n4. Find the sub.csv (on outputs), below the section with the data from Instacart\n5. Click on \"Submit to competition\" button\n\nRegarding step 1:\n>This step might take long. If it exceeds 20-30 minutes it would be wise to check your code again. Kaggle won't inform you during commit if the notebook has:\n- syntax errors\n- if it exceeds 16 GB RAM\n- if it takes an algorirthms too much to train or predict\n\n>Any new commit:\n- can't take more than 9 hours\n- doesn't stop if it exceeds the 16 GB RAM - you will just receive an error of unsuccesful commit after 9 hours","c256c512":"## 2.3 Create user-product predictors\n\n\n### 2.3.1 How many times a user bought a product \ud83d\udcda\ud83d\udcdd\nWe create different groups that contain all the rows for each combination of user and product. Then with the aggregation function .count( ) we get how many times each user bought a product. We save the results on new **uxp** DataFrame.","be945893":"# 4. Create predictive model (fit)\nThe Machine Learning model that we are going to create is based on the Logistic Regression Algorithm.\n\nFrom Scikit-learn package we import the LogisticRegression estimator.\n\nTo create the predictive model we:\n1. We create a DataFrame with all the predictors, named **X_train** and a Series with the response, named **y_train**\n2. We initiata a Logistic regression model with a specific random_state (so we can reproduce if we want to our model).\n3. Finally we train our model with the X_train and y_train data.","27dbe010":"We merge it with our predictions (from chapter 5) using a left join:\n<img src=\"https:\/\/i.imgur.com\/KJubu0v.jpg\" width=\"400\">","d9243126":"### 2.4.1 Merge data with prd DataFrame \ud83d\udcda\ud83d\udcdd\nIn this step we continue with our new DataFrame **data** and we perform a left join with prd DataFrame. The matching key here is the \"product_id\".\n<img src=\"https:\/\/i.imgur.com\/Iak6nIz.jpg\" width=\"400\">\n\nLeft join, ensures that the new DataFrame will have:\n- all the observations of the data (features of userXproducts and users) DataFrame \n- all the **matching** observations of prd DataFrame with data based on matching key **\"product_id\"**","82df7601":"## 1.3 Reshape data\nWe transform the data in order to facilitate their further analysis. First, we convert character variables into categories so we can use them in the creation of the model. In Python, a categorical variable is called category and has a fixed number of different values.","dd331135":"## 2.1 Create user predictors\n\n\n### 2.1.1 Number of orders per customer \ud83d\udcda\ud83d\udcdd\nWe calculate the total number of placed orders per customer. We create a **user** DataFrame to store the results.","99daebef":"## 1.4 Create a DataFrame with the orders and the products that have been purchased on prior orders (op)\nWe create a new DataFrame, named <b>op<\/b> which combines (merges) the DataFrames <b>orders<\/b> and <b>order_products_prior<\/b>. Bear in mind that <b>order_products_prior<\/b> DataFrame includes only prior orders, so the new DataFrame <b>op<\/b>  will contain only these observations as well. Towards this end, we use pandas' merge function with how='inner' argument, which returns records that have matching values in both DataFrames. <img src=\"https:\/\/i.imgur.com\/zEK7FpY.jpg\" width=\"400\">","6bca1874":"### 2.4.1 Merge uxp with user DataFrame\nHere we select to perform a left join of uxp with user DataFrame based on matching key \"user_id\"\n\n<img src=\"https:\/\/i.imgur.com\/WlI84Ud.jpg\" width=\"400\">\n\nLeft join, ensures that the new DataFrame will have:\n- all the observations of the uxp (combination of user and products) DataFrame \n- all the **matching** observations of user DataFrame with uxp based on matching key **\"user_id\"**\n\nThe new DataFrame as we have already mentioned, will be called **data**.","9487f997":"### 2.4.2 Delete previous DataFrames","acd99cdb":"# 2. Create Predictor Variables\nWe are now ready to identify and calculate predictor variables based on the provided data. We can create various types of predictors such as:\n* <b>User predictors<\/b> describing the behavior of a user e.g. total number of orders of a user.\n* <b>Product predictors<\/b> describing characteristics of a product e.g. total number of times a product has been purchased.\n* <b>User & product predictors<\/b> describing the behavior of a user towards a specific product e.g. total times a user ordered a specific product.","63454bba":"The information from the DataFrames that we have created to store our features (op, user, prd, uxp) is now stored on **data**. \n\nAs we won't use them anymore, we now delete them.","07abed01":"# 7. Get F1 Score","0da4d9b7":"# 5. Apply predictive model (predict)\nThe model that we have created is stored in the **model** object.\nAt this step we predict the values for the test data and we store them in a new column in the same DataFrame.","f593bf27":"And we move on with two final manipulations:\n- remove any undesired column (in our case user_id)\n- set product_id column as integer (mandatory action to proceed to the next step)"}}