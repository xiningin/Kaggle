{"cell_type":{"63a5474a":"code","762452c4":"code","ef496807":"code","78bd1039":"code","d2430af7":"code","f4c38b44":"code","b8c7dffa":"code","14f28486":"code","44cd9918":"code","e9b6533a":"code","e2265a15":"code","f7cb9440":"code","8dc81734":"code","1baf313e":"code","694a3841":"code","52edd0a0":"code","d5347f1a":"code","08e6cf7e":"code","c6b60823":"code","e6ef1062":"code","816898a7":"code","7259806a":"code","281e7401":"code","36eebd02":"code","233ef8b4":"code","1ade5b28":"code","cabb10c8":"code","7cf4a6db":"code","f3b6e2f2":"code","c4c09c0d":"code","b26f7f07":"code","c2207b5a":"code","31c247d3":"code","431451ad":"code","9e998cdf":"code","56cd00e1":"code","e54e80db":"code","8a1af3ea":"code","8de0f26a":"code","6ee0a825":"code","1f8de115":"code","27016e5b":"markdown","643f2b95":"markdown","16e50939":"markdown","e4ccc374":"markdown","70ec4a69":"markdown","099b9651":"markdown","d8b636db":"markdown","8ab6d6eb":"markdown","ae650c54":"markdown","5b8138a0":"markdown","ba612331":"markdown","05311139":"markdown","355ed9e7":"markdown"},"source":{"63a5474a":"import sys\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","762452c4":"import numpy as np\nimport random\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport copy\nimport seaborn as sns\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\nimport warnings\nwarnings.filterwarnings('ignore')","ef496807":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('..\/input\/lish-moa\/train_targets_nonscored.csv')\n\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\nsample_submission = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","78bd1039":"GENES = [col for col in train_features.columns if col.startswith('g-')]\nCELLS = [col for col in train_features.columns if col.startswith('c-')]","d2430af7":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    \nseed_everything(seed=42)","f4c38b44":"train_targets_scored.sum()[1:].sort_values()","b8c7dffa":"train_features['cp_type'].unique()","14f28486":"from sklearn.feature_selection import VarianceThreshold\n\n\nvar_thresh = VarianceThreshold(threshold=0.5)\ndata = train_features.append(test_features)\ndata_transformed = var_thresh.fit_transform(data.iloc[:, 4:])\n\ntrain_features_transformed = data_transformed[ : train_features.shape[0]]\ntest_features_transformed = data_transformed[-test_features.shape[0] : ]\n\n\ntrain_features = pd.DataFrame(train_features[['sig_id','cp_type','cp_time','cp_dose']].values.reshape(-1, 4),\\\n                              columns=['sig_id','cp_type','cp_time','cp_dose'])\n\ntrain_features = pd.concat([train_features, pd.DataFrame(train_features_transformed)], axis=1)\n\n\ntest_features = pd.DataFrame(test_features[['sig_id','cp_type','cp_time','cp_dose']].values.reshape(-1, 4),\\\n                             columns=['sig_id','cp_type','cp_time','cp_dose'])\n\ntest_features = pd.concat([test_features, pd.DataFrame(test_features_transformed)], axis=1)\n\ntrain_features\n","44cd9918":"train = train_features.merge(train_targets_scored, on='sig_id')\ntrain = train[train['cp_type']!='ctl_vehicle'].reset_index(drop=True)\ntest = test_features[test_features['cp_type']!='ctl_vehicle'].reset_index(drop=True)\n\ntarget = train[train_targets_scored.columns]","e9b6533a":"train = train.drop('cp_type', axis=1)\ntest = test.drop('cp_type', axis=1)","e2265a15":"train","f7cb9440":"# for col in GENES:\n#     train.loc[:, f'{col}_bin'] = pd.cut(train[col], bins=3, labels=False)\n#     test.loc[:, f'{col}_bin'] = pd.cut(test[col], bins=3, labels=False)\n","8dc81734":"# plt.figure(figsize=(16,16))\n# sns.set_style(\"whitegrid\")\n\n# gene_choice = np.random.choice(len(GENES), 16)\n# for i, col in enumerate(gene_choice):\n#     plt.subplot(4, 4, i+1)\n#     plt.hist(train_features.loc[:, GENES[col]],bins=100, color='orange')\n#     plt.title(GENES[col])","1baf313e":"\n# train_ = train.copy() [Didn't wanted to actually normalize, so created a copy and normalized that for further calculation]\n# for col in GENES:\n    \n# #     train_[col] = (train[col]-np.mean(train[col])) \/ (np.std(train[col]))\n    \n#     mean = train_[col].mean()\n#     std = train_[col].std()\n\n#     std_r = mean + 4*std\n#     std_l = mean - 4*std\n\n#     drop = train_[col][(train_[col]>std_r) | (train_[col]<std_l)].index.values\n\n# train = train.drop(drop).reset_index(drop=True)\n# # folds = folds.drop(drop).reset_index(drop=True)\n# target = target.drop(drop).reset_index(drop=True)\n","694a3841":"# n_comp = 50\n\n# data = pd.concat([pd.DataFrame(train[CELLS]), pd.DataFrame(test[CELLS])])\n# data2 = (PCA(n_components=n_comp, random_state=42).fit_transform(data[CELLS]))\n# train2 = data2[:train.shape[0]]; test2 = data2[train.shape[0]:]\n\n# train2 = pd.DataFrame(train2, columns=[f'c-{i}' for i in range(n_comp)])\n# test2 = pd.DataFrame(test2, columns=[f'c-{i}' for i in range(n_comp)])\n\n# drop_cols = [f'c-{i}' for i in range(n_comp,len(CELLS))]\n# train = train.drop(columns=drop_cols)\n# test = test.drop(columns=drop_cols)","52edd0a0":"target_cols = target.drop('sig_id', axis=1).columns.values.tolist()","d5347f1a":"folds = train.copy()\n\nmskf = MultilabelStratifiedKFold(n_splits=5)\n\nfor f, (t_idx, v_idx) in enumerate(mskf.split(X=train, y=target)):\n    folds.loc[v_idx, 'kfold'] = int(f)\n\nfolds['kfold'] = folds['kfold'].astype(int)\nfolds","08e6cf7e":"print(train.shape)\nprint(folds.shape)\nprint(test.shape)\nprint(target.shape)\nprint(sample_submission.shape)","c6b60823":"class MoADataset:\n    def __init__(self, features, targets):\n        self.features = features\n        self.targets = targets\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float),\n            'y' : torch.tensor(self.targets[idx, :], dtype=torch.float)            \n        }\n        return dct\n    \nclass TestDataset:\n    def __init__(self, features):\n        self.features = features\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float)\n        }\n        return dct\n    ","e6ef1062":"def train_fn(model, optimizer, scheduler, loss_fn, dataloader, device):\n    model.train()\n    final_loss = 0\n    \n    for data in dataloader:\n        optimizer.zero_grad()\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n#         print(inputs.shape)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        loss.backward()\n        optimizer.step()\n        scheduler.step()\n        \n        final_loss += loss.item()\n        \n    final_loss \/= len(dataloader)\n    \n    return final_loss\n\n\ndef valid_fn(model, loss_fn, dataloader, device):\n    model.eval()\n    final_loss = 0\n    valid_preds = []\n    \n    for data in dataloader:\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        \n        final_loss += loss.item()\n        valid_preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    final_loss \/= len(dataloader)\n    valid_preds = np.concatenate(valid_preds)\n    \n    return final_loss, valid_preds\n\ndef inference_fn(model, dataloader, device):\n    model.eval()\n    preds = []\n    \n    for data in dataloader:\n        inputs = data['x'].to(device)\n\n        with torch.no_grad():\n            outputs = model(inputs)\n        \n        preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    preds = np.concatenate(preds)\n    \n    return preds\n   \n    ","816898a7":"class Model(nn.Module):\n    def __init__(self, num_features, num_targets, hidden_size):\n        super(Model, self).__init__()\n        self.batch_norm1 = nn.BatchNorm1d(num_features)\n        self.dropout1 = nn.Dropout(0.2)\n        self.dense1 = nn.utils.weight_norm(nn.Linear(num_features, hidden_size))\n        \n        self.batch_norm2 = nn.BatchNorm1d(hidden_size)\n        self.dropout2 = nn.Dropout(0.5)\n        self.dense2 = nn.utils.weight_norm(nn.Linear(hidden_size, hidden_size))\n        \n        self.batch_norm3 = nn.BatchNorm1d(hidden_size)\n        self.dropout3 = nn.Dropout(0.5)\n        self.dense3 = nn.utils.weight_norm(nn.Linear(hidden_size, num_targets))\n    \n    def forward(self, x):\n        x = self.batch_norm1(x)\n        x = self.dropout1(x)\n        x = F.relu(self.dense1(x))\n        \n        x = self.batch_norm2(x)\n        x = self.dropout2(x)\n        x = F.relu(self.dense2(x))\n        \n        x = self.batch_norm3(x)\n        x = self.dropout3(x)\n        x = self.dense3(x)\n        \n        return x","7259806a":"def process_data(data):\n    \n    data = pd.get_dummies(data, columns=['cp_time','cp_dose'])\n#     data.loc[:, 'cp_time'] = data.loc[:, 'cp_time'].map({24: 0, 48: 1, 72: 2})\n#     data.loc[:, 'cp_dose'] = data.loc[:, 'cp_dose'].map({'D1': 0, 'D2': 1})\n\n# --------------------- Normalize ---------------------\n#     for col in GENES:\n#         data[col] = (data[col]-np.mean(data[col])) \/ (np.std(data[col]))\n    \n#     for col in CELLS:\n#         data[col] = (data[col]-np.mean(data[col])) \/ (np.std(data[col]))\n    \n#--------------------- Removing Skewness ---------------------\n#     for col in GENES + CELLS:\n#         if(abs(data[col].skew()) > 0.75):\n            \n#             if(data[col].skew() < 0): # neg-skewness\n#                 data[col] = data[col].max() - data[col] + 1\n#                 data[col] = np.sqrt(data[col])\n            \n#             else:\n#                 data[col] = np.sqrt(data[col])\n    \n    return data","281e7401":"feature_cols = [c for c in process_data(folds).columns if c not in target_cols]\nfeature_cols = [c for c in feature_cols if c not in ['kfold','sig_id']]\nlen(feature_cols)","36eebd02":"# HyperParameters\n\nDEVICE = ('cuda' if torch.cuda.is_available() else 'cpu')\nEPOCHS = 25\nBATCH_SIZE = 256\nLEARNING_RATE = 5e-5\nWEIGHT_DECAY = 1e-9\nNFOLDS = 5\nEARLY_STOPPING_STEPS = 10\nEARLY_STOP = False\nMAX_LR = 5e-3\nDIV_FACTOR = 1e3\n\nnum_features=len(feature_cols)\nnum_targets=len(target_cols)\nhidden_size=256\n","233ef8b4":"def initialize_from_past_model(model,past_model_file):\n\n   # pretrained_dict = torch.load('FOLD0_.pth')\n    pretrained_dict = torch.load(past_model_file)\n    model_dict = model.state_dict()\n\n    pretrained_dict['dense3.bias']=pretrained_dict['dense3.bias'][:206]\n\n    pretrained_dict['dense3.weight_g']=pretrained_dict['dense3.weight_g'][:206]\n\n    pretrained_dict['dense3.weight_v']=pretrained_dict['dense3.weight_v'][:206]\n\n    # 1. filter out unnecessary keys\n    pretrained_dict = {k: v for k, v in pretrained_dict.items() if k in model_dict}\n    # 2. overwrite entries in the existing state dict\n    model_dict.update(pretrained_dict) \n    # 3. load the new state dict\n    model.load_state_dict(pretrained_dict)\n    ","1ade5b28":"def run_training(fold, seed):\n    \n    seed_everything(seed)\n    \n    train = process_data(folds)\n    test_ = process_data(test)\n    \n    trn_idx = train[train['kfold'] != fold].index\n    val_idx = train[train['kfold'] == fold].index\n    \n    train_df = train[train['kfold'] != fold].reset_index(drop=True)\n    valid_df = train[train['kfold'] == fold].reset_index(drop=True)\n    \n    x_train, y_train  = train_df[feature_cols].values, train_df[target_cols].values\n    x_valid, y_valid =  valid_df[feature_cols].values, valid_df[target_cols].values\n    \n    train_dataset = MoADataset(x_train, y_train)\n    valid_dataset = MoADataset(x_valid, y_valid)\n    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n    validloader = torch.utils.data.DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n    )\n    \n    model.to(DEVICE)\n    \n    initialize_from_past_model(model,\"..\/input\/torch5foldpretrainedauxtarget\/FOLD{}_.pth\".format(fold))\n    \n    optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=WEIGHT_DECAY)\n    scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.1, div_factor=DIV_FACTOR, \n                                              max_lr=MAX_LR, epochs=EPOCHS, steps_per_epoch=len(trainloader))\n    \n    loss_fn = nn.BCEWithLogitsLoss()\n    \n    early_stopping_steps = EARLY_STOPPING_STEPS\n    early_step = 0\n    \n    oof = np.zeros((len(train), target.iloc[:, 1:].shape[1]))\n    best_loss = np.inf\n    \n    for epoch in range(EPOCHS):\n        \n        train_loss = train_fn(model, optimizer,scheduler, loss_fn, trainloader, DEVICE)\n        print(f\"FOLD: {fold}, EPOCH: {epoch}, train_loss: {train_loss}\")\n        valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n        print(f\"FOLD: {fold}, EPOCH: {epoch}, valid_loss: {valid_loss}\")\n        \n        if valid_loss < best_loss:\n            \n            best_loss = valid_loss\n            oof[val_idx] = valid_preds\n            #torch.save(model.state_dict(), f\"compounded_FOLD{fold}_.pth\")\n        \n        elif(EARLY_STOP == True):\n            \n            early_step += 1\n            if (early_step >= early_stopping_steps):\n                break\n            \n    \n    #--------------------- PREDICTION---------------------\n    x_test = test_[feature_cols].values\n    testdataset = TestDataset(x_test)\n    testloader = torch.utils.data.DataLoader(testdataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n#     model = Model(\n#         num_features=num_features,\n#         num_targets=num_targets,\n#         hidden_size=hidden_size,\n#     )\n    \n#     model.load_state_dict(torch.load(f\"compounded_FOLD{fold}_.pth\"))\n#     model.to(DEVICE)\n    \n    predictions = np.zeros((len(test_), target.iloc[:, 1:].shape[1]))\n    predictions = inference_fn(model, testloader, DEVICE)\n    \n    return oof, predictions\n","cabb10c8":"def run_k_fold(NFOLDS, seed):\n    oof = np.zeros((len(train), len(target_cols)))\n    predictions = np.zeros((len(test), len(target_cols)))\n    \n    for fold in range(NFOLDS):\n        oof_, pred_ = run_training(fold, seed)\n        \n        predictions += pred_ \/ NFOLDS\n        oof += oof_\n        \n    return oof, predictions","7cf4a6db":"# Averaging on multiple SEEDS\n\n#SEED = [0,12347,565657,123123,78591]\nSEED = [0]\noof = np.zeros((len(train), len(target_cols)))\npredictions = np.zeros((len(test), len(target_cols)))\n\nfor seed in SEED:\n    \n    oof_, predictions_ = run_k_fold(NFOLDS, seed)\n    oof += oof_ \/ len(SEED)\n    predictions += predictions_ \/ len(SEED)\n\ntrain[target_cols] = oof\ntest[target_cols] = predictions\n","f3b6e2f2":"# test['atp-sensitive_potassium_channel_antagonist'] = 0.0\n# test['erbb2_inhibitor'] = 0.0\n\n# train['atp-sensitive_potassium_channel_antagonist'] = 0.0\n# train['erbb2_inhibitor'] = 0.0","c4c09c0d":"train_targets_scored","b26f7f07":"len(target_cols)\n","c2207b5a":"valid_results = train_targets_scored.drop(columns=target_cols).merge(train[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\n\n\ny_true = train_targets_scored[target_cols].values\ny_pred = valid_results[target_cols].values\n\nscore = 0\nfor i in range(len(target_cols)):\n    score_ = log_loss(y_true[:, i], y_pred[:, i])\n    #score += score_ \/ target.shape[1]\n    score += score_ \/ len(target_cols)\n    \nprint(\"CV log_loss: \", score)\n    ","31c247d3":"valid_results","431451ad":"plt.hist(valid_results.melt(\"sig_id\")[\"value\"],log=True)","9e998cdf":"test","56cd00e1":"len(target_cols)","e54e80db":"sample_submission = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","8a1af3ea":"sub = sample_submission.drop(columns=target_cols).merge(test[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\nsub.to_csv('submission.csv', index=False)","8de0f26a":"# sample_submission[target_cols] = test[target_cols]\n# sample_submission.loc[test['cp_type']=='ctl_vehicle', target_cols] = 0\n# sample_submission.fillna(0,inplace=True)\n# sample_submission.to_csv('submission.csv', index=False)","6ee0a825":"sub.head()","1f8de115":"sub.shape","27016e5b":"# Preprocessing steps","643f2b95":"# Dataset Classes","16e50939":"# Distribution plots","e4ccc374":"# Single fold training","70ec4a69":"# Binning","099b9651":"# Model","d8b636db":"## Update:\n1. Added continues training from aux_targets trained network","8ab6d6eb":"# PCA","ae650c54":"# If you like it, Do Upvote :)","5b8138a0":"# CV folds","ba612331":"# feature Selection using Variance Encoding","05311139":"# [Naive] Outlier Removal","355ed9e7":"\nReferences :\n1. @abhishek and @artgor 's Parallel Programming video https:\/\/www.youtube.com\/watch?v=VRVit0-0AXE\n2. @yasufuminakama 's Amazying Notebook https:\/\/www.kaggle.com\/yasufuminakama\/moa-pytorch-nn-starter \n3. @namanj27     completely forked from here    https:\/\/www.kaggle.com\/namanj27\/new-baseline-pytorch-moa\n\n `If you consider forking, remember to turn the internet off`"}}