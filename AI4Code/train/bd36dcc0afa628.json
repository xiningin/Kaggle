{"cell_type":{"5c187b9b":"code","9e62085b":"code","946103e1":"code","68cbf31e":"code","eda4c2ff":"code","d48bcc9b":"code","6038087c":"code","a8df8827":"code","dff44bce":"code","53d3ecce":"code","c7d72cf6":"code","314aad10":"code","a8c51d45":"code","ffa1f718":"code","f55ca11d":"code","0d324208":"code","a87bf3f2":"code","be57590f":"code","fdc29374":"code","4675b673":"code","ea48f5d9":"code","f8b2bc74":"code","18fed0cf":"code","09059fef":"code","41087f31":"code","82af68c5":"code","f5406d57":"code","7bee54a6":"code","86af12d3":"code","14e4ff94":"code","e6939e96":"code","3a9b63b9":"code","2ef7b3f4":"code","9b3efc05":"code","bed2f008":"code","1de3da40":"code","4ee9880e":"code","5b255173":"code","1b7ecfc1":"code","6829d546":"code","41e47021":"code","31952db6":"code","c157fc62":"code","093d4c3e":"code","f6939e7e":"code","1906168a":"code","4626c216":"code","14ada700":"code","d1e48147":"code","9183f513":"code","4f3caeef":"code","a9751abf":"code","ad654f3e":"code","411d2130":"code","a527a76d":"code","f00a9c8e":"code","8c78bd2e":"code","952e8ca2":"code","0e394c49":"code","67cac556":"code","0164fcc4":"code","085824b4":"code","c17fe3b8":"markdown","e0f8a4d5":"markdown","96994731":"markdown","dd8610ea":"markdown","7f81f52b":"markdown","4f2ef496":"markdown","af640527":"markdown","dea98348":"markdown","7911d2ec":"markdown","7606f600":"markdown","c4f77903":"markdown","7427ae98":"markdown","d6a03df4":"markdown","1c18141d":"markdown","1a19d1ae":"markdown","592a3442":"markdown","2a9a403f":"markdown","f2485246":"markdown","1af8a3c9":"markdown","a00f07d3":"markdown","1179d930":"markdown","d366a987":"markdown","acb0a679":"markdown","56204392":"markdown","f44b97b4":"markdown","fbc52a99":"markdown","24015987":"markdown","d0c99034":"markdown","14494fad":"markdown","a40af34e":"markdown","620ef98c":"markdown","f27b5a1c":"markdown","107806f9":"markdown","38147be2":"markdown","c3bf519b":"markdown","7df44730":"markdown","d0cdf9a8":"markdown","21c0c536":"markdown","40bedd45":"markdown","5cce3a89":"markdown","2bf2ad3d":"markdown","e4c2cd7c":"markdown","fe863dbd":"markdown","55ca93e1":"markdown","bb4e3812":"markdown","882b162c":"markdown","74ee520f":"markdown","17aeb5c1":"markdown","b4b12996":"markdown","ba039ad5":"markdown","bad3fc4e":"markdown","ece1a593":"markdown"},"source":{"5c187b9b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt  # Matlab-style plotting\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\n\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\n\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\")) #check the files available in the directory","9e62085b":"#Now let's import and put the train and test datasets in  pandas dataframe\n\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint(\"setup completed\")","946103e1":"##display the first five rows of the train dataset.\ntrain.head(5)","68cbf31e":"##display the first five rows of the test dataset.\ntest.head(5)","eda4c2ff":"print(f\"The train and test data size before dropping Id feature is: {train.shape}, {test.shape}\")","d48bcc9b":"#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\ntrain.drop(\"Id\", axis = 1 , inplace = True)\ntest.drop(\"Id\", axis = 1 , inplace = True)\n\n#check again the data size after dropping the 'Id' variable\nprint(f\"The train and test data size before dropping Id feature is: {train.shape}, {test.shape}\")","6038087c":"fig, ax = plt.subplots(figsize=(8, 6))\nax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","a8df8827":"#Deleting outliers\ntrain = train.drop(train[(train['GrLivArea']>4500) & (train['SalePrice']<200000)].index)\n\n#Check the graphic again\nfig, ax = plt.subplots(figsize=(8, 6))\nax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","dff44bce":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","53d3ecce":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\n\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#Check the new distribution\nsns.distplot(train['SalePrice'], fit=norm)\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","c7d72cf6":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(f\"all_data size is : {all_data.shape}\")","314aad10":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(30)","a8c51d45":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","ffa1f718":"#Correlation map to see how features are correlated with SalePrice\n\ncorrmat = train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax = 0.9, square = True)","f55ca11d":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")\nall_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\nall_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\nall_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")\nall_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")","0d324208":"all_data.head()","a87bf3f2":"#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","be57590f":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')","fdc29374":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","4675b673":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","ea48f5d9":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","f8b2bc74":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)\n\n# MSZoning (The general zoning classification) : 'RL' is by far the most common value. So we can fill in missing values with 'RL'\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","18fed0cf":"all_data = all_data.drop(['Utilities'], axis=1)","09059fef":"all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","41087f31":"all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","82af68c5":"all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])","f5406d57":"all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","7bee54a6":"all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","86af12d3":"all_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")","14e4ff94":"#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","e6939e96":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","3a9b63b9":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))","2ef7b3f4":"# Adding total sqfootage feature \nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","9b3efc05":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","bed2f008":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)\n    \n#all_data[skewed_features] = np.log1p(all_data[skewed_features])","1de3da40":"all_data = pd.get_dummies(all_data)\nprint(all_data.shape)","4ee9880e":"train = all_data[:ntrain]\ntest = all_data[ntrain:]","5b255173":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","1b7ecfc1":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","6829d546":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","41e47021":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","31952db6":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","c157fc62":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","093d4c3e":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","f6939e7e":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","1906168a":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","4626c216":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","14ada700":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","d1e48147":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","9183f513":"score = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","4f3caeef":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","a9751abf":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # we define clones of the original models to fit the data in\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #Now we do the predictions for cloned models and average them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)","ad654f3e":"averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\n\nscore = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","411d2130":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","a527a76d":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","f00a9c8e":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","8c78bd2e":"stacked_averaged_models.fit(train.values, y_train)\nstacked_train_pred = stacked_averaged_models.predict(train.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\nprint(rmsle(y_train, stacked_train_pred))","952e8ca2":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","0e394c49":"model_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","67cac556":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.70 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))","0164fcc4":"ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15","085824b4":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nsub.to_csv('submission.csv',index=False)","c17fe3b8":"**Box Cox Transformation of (highly) skewed features**\n\n> A Box Cox transformation is a way to transform non-normal dependent variables into a normal shape. Normality is an important assumption for many statistical techniques; if your data isn't normal, applying a Box-Cox means that you are able to run a broader number of tests.\n\n\nWe use the scipy function boxcox1p which computes the Box-Cox transformation of  1+x .\n\nNote that setting  \u03bb=0  is equivalent to log1p used above for the target variable.\n\nSee [this page](http:\/\/onlinestatbook.com\/2\/transformations\/box-cox.html) for more details on Box Cox Transformation as well as [the scipy function's page](https:\/\/docs.scipy.org\/doc\/scipy-0.19.0\/reference\/generated\/scipy.special.boxcox1p.html)","e0f8a4d5":"* **SaleType :** Fill in again with most frequent which is \"WD\"","96994731":"The target variable is right skewed. As (linear) models love normally distributed data , we need to transform this variable and make it more normally distributed.\n\n\n**Log-transformation of the target variable**","dd8610ea":"Percent missing data by feature","7f81f52b":"**Kernel Ridge Regression :**","4f2ef496":"**XGBoost :**","af640527":"* **MSSubClass :** Na most likely means No building class. We can replace missing values with None","dea98348":"**Elastic Net Regression :**\n\nagain made robust to outliers","7911d2ec":"# If you find this notebook helpful please UPVOTE and do share your thoughts on what other ways could this result be improved","7606f600":"It remains no missing value.\n\n\n# More features engeneering\n\n\n**Transforming some numerical variables that are really categorical**","c4f77903":"# Stacking models\n\nSimplest Stacking approach : Averaging base models\n\n\nWe begin with this simple approach of averaging base models. We build a new class to extend scikit-learn with our model and also to laverage encapsulation and code reuse ([inheritance](https:\/\/en.wikipedia.org\/wiki\/Inheritance_(object-oriented_programming)))\n\n\nAveraged base models class","7427ae98":"# Modelling\n\n\n**Import librairies**","d6a03df4":"# Data Processing\n\n**Outliers**\n\n[Documentation](http:\/\/http:\/\/ww2.amstat.org\/publications\/jse\/v19n3\/Decock\/DataDocumentation.txt) for the Ames Housing Data indicates that there are outliers present in the training data\n\nLet's explore these outliers","1c18141d":"* **Exterior1st and Exterior2nd :** Again Both Exterior 1 & 2 have only one missing value. We will just substitute in the most common string","1a19d1ae":"# Missing Data","592a3442":"**Define a cross validation strategy**\n\nWe use the **cross_val_score** function of Sklearn. However this function has not a shuffle attribut, we add then one line of code, in order to shuffle the dataset prior to cross-validation","2a9a403f":"**Skewed features**","f2485246":"* **Functional :** data description says NA means typical","1af8a3c9":"**Gradient Boosting Regression :**\n\nWith huber loss that makes it robust to outliers","a00f07d3":"# If you found this notebook helpful or you just liked it , some upvotes would be very much appreciated - That will keep me motivated to update it on a regular basis :-)","1179d930":"import some necessary librairies","d366a987":"* **GarageYrBlt, GarageArea and GarageCars :** Replacing missing data with 0 (Since No garage = no cars in such garage.)","acb0a679":"**Stacking Averaged models Score**\n\n\n\nTo make the two approaches comparable (by using the same number of models) , we just average Enet KRR and Gboost, then we add lasso as meta-model.","56204392":"**LightGBM:**","f44b97b4":"* **Utilities :** For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\" and 2 NA . Since the house with 'NoSewa' is in the training set, **this feature won't help in predictive modelling.** We can then safely remove it.","fbc52a99":"# Imputing missing values\n\n\nWe impute them by proceeding sequentially through features with missing values\n\n\n* PoolQC : data description says NA means \"No Pool\". That make sense, given the huge ratio of missing value (+99%) and majority of houses have no Pool at all in general\n\n* MiscFeature : data description says NA means \"no misc feature\"\n\n* Alley : data description says NA means \"no alley access\"\n\n* Fence : data description says NA means \"no fence\"\n\n* FireplaceQu : data description says NA means \"no fireplace\"","24015987":"**Averaged base models score**\n\n\n\nWe just average four models here **ENet, GBoost, KRR and lasso**. Of course we could easily add more models in the mix.","d0c99034":"**Final Training and Prediction**\n\n\n\n\n**StackedRegressor:**","14494fad":"We get again a better score by adding a meta learner\n\n\n\n**Ensembling StackedRegressor, XGBoost and LightGBM**\n\n\nWe add XGBoost and LightGBM to the StackedRegressor defined previously.\n\n\nWe first define a rmsle evaluation function","a40af34e":"Is there any remaining missing value ?","620ef98c":"**LASSO Regression :**\n\nThis model may be very sensitive to outliers. So we need to made it more robust on them. For that we use the sklearn's Robustscaler() method on pipeline","f27b5a1c":"Getting the new train and test sets.","107806f9":"* LotFrontage : Since the area of each street connected to the house property most likely have a similar area to other houses in its neighborhood , we can fill in missing values by the median LotFrontage of the neighborhood.","38147be2":"* **BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 :** For all these categorical basement-related features, NaN means that there is no basement.","c3bf519b":"**Ensemble prediction:**","7df44730":"# Base models","d0cdf9a8":"**Submission**","21c0c536":"**Label Encoding some categorical variables that may contain information in their ordering set**","40bedd45":"Wow ! It seems even the simplest stacking approach really improve the score . This encourages us to go further and explore a less simple stacking approch.\n\n\n\n**Less simple Stacking : Adding a Meta-model**\n\n\n\nIn this approach, we add a meta-model on averaged base models and use the out-of-folds predictions of these base models to train our meta-model.\n\n\n**The procedure, for the training part, may be described as follows:**\n\n* Split the total training set into two disjoint sets (here train and .holdout )\n\n* Train several base models on the first part (train)\n\n* Test these base models on the second part (holdout)\n\n* Use the predictions from 3) (called out-of-folds predictions) as the inputs, and the correct responses (target variable) as the outputs to train a higher level learner called meta-model.\n\n\n\nThe first three steps are done iteratively . If we take for example a 5-fold stacking , we first split the training data into 5 folds. Then we will do 5 iterations. In each iteration, we train every base model on 4 folds and predict on the remaining fold (holdout fold).\n\n\n\nSo, we will be sure, after 5 iterations , that the entire data is used to get out-of-folds predictions that we will then use as new feature to train our meta-model in the step 4.\n\n\n\nFor the prediction part , We average the predictions of all base models on the test data and used them as meta-features on which, the final prediction is done with the meta-model.\n\n\n\nOn this gif, the base models are algorithms 0, 1, 2 and the meta-model is algorithm 3. The entire training dataset is A+B (target variable y known) that we can split into train part (A) and holdout part (B). And the test dataset is C.\n\nB1 (which is the prediction from the holdout part) is the new feature used to train the meta-model 3 and C1 (which is the prediction from the test dataset) is the meta-feature on which the final prediction is done.\n\n\n**Stacking averaged Models Class**","5cce3a89":"* **Electrical :** It has one NA value. Since this feature has mostly 'SBrkr', we can set that for the missing value.","2bf2ad3d":"* **KitchenQual:** Only one NA value, and same as Electrical, we set 'TA' (which is the most frequent) for the missing value in KitchenQual.","e4c2cd7c":"**GarageType, GarageFinish, GarageQual and GarageCond** : Replacing missing data with None","fe863dbd":"**Base models scores**\n\nLet's see how these base models perform on the data by evaluating the cross-validation rmsle error","55ca93e1":"**XGBoost:**","bb4e3812":"**Getting dummy categorical features**","882b162c":"We can see at the bottom right two with extremely large GrLivArea that are of a low price. These values are huge oultliers. Therefore, we can safely delete them.","74ee520f":"# Note :\n\nOutliers removal is note always safe. We decided to delete these two as they are very huge and really bad ( extremely large areas for very low prices).\n\nThere are probably others outliers in the training data. However, removing all them may affect badly our models if ever there were also outliers in the test data. That's why , instead of removing them all, we will just manage to make some of our models robust on them. You can refer to the modelling part of this notebook for that.\n\n# Target Variable\n\nSalePrice is the variable we need to predict. So let's do some analysis on this variable first.","17aeb5c1":"* **BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath :** missing values are likely zero for having no basement","b4b12996":"# Data Correlation","ba039ad5":"**Adding one more important feature**\n\n\nSince area related features are very important to determine house prices, we add one more feature which is the total area of basement, first and second floor areas of each house","bad3fc4e":"The skew seems now corrected and the data appears more normally distributed.\n\n\n# Features engineering# \n\nlet's first concatenate the train and test data in the same dataframe","ece1a593":"**LightGBM :**"}}