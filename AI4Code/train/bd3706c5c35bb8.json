{"cell_type":{"7e132078":"code","25cb3b2f":"code","572babe5":"code","c60d1384":"code","1ce2a8cd":"code","c7c2153c":"code","d0cd1ff0":"code","5918b173":"code","a16cd188":"code","33a58c18":"code","430d9d1e":"code","efd2dbf0":"code","d4c2d76c":"code","01fc7059":"code","827084fd":"code","bc0c6bfc":"code","41434cfa":"code","9866789e":"code","8f039477":"markdown","e5909069":"markdown","c099a978":"markdown","03dfa69d":"markdown","8f1a6854":"markdown","cf2e5eef":"markdown"},"source":{"7e132078":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom PIL import Image\nimport cv2\n# Any results you write to the current directory are saved as output.","25cb3b2f":"!pip install albumentations","572babe5":"red = np.array(Image.open(\"..\/input\/test\/00631ec8-bad9-11e8-b2b9-ac1f6b6435d0_red.png\").convert(\"L\"))\ngreen = np.array(Image.open(\"..\/input\/test\/00631ec8-bad9-11e8-b2b9-ac1f6b6435d0_green.png\").convert(\"L\"))\nblue = np.array(Image.open(\"..\/input\/test\/00631ec8-bad9-11e8-b2b9-ac1f6b6435d0_blue.png\").convert(\"L\"))\nyellow = np.array(Image.open(\"..\/input\/test\/00631ec8-bad9-11e8-b2b9-ac1f6b6435d0_yellow.png\").convert(\"L\"))","c60d1384":"demo_rgb=Image.fromarray(np.concatenate((np.expand_dims(red,axis=2),np.expand_dims(green,axis=2),np.expand_dims(blue,axis=2)),axis=2))\ndemo_y=Image.fromarray(np.concatenate((np.expand_dims(yellow,axis=2),np.expand_dims(yellow,axis=2),np.expand_dims(blue,axis=2)),axis=2))","1ce2a8cd":"demo_y","c7c2153c":"demo_rgb","d0cd1ff0":"from albumentations import (\n    HorizontalFlip, IAAPerspective, ShiftScaleRotate, CLAHE, RandomRotate90,\n    Transpose, ShiftScaleRotate, Blur, OpticalDistortion, GridDistortion, HueSaturationValue,\n    IAAAdditiveGaussianNoise, GaussNoise, MotionBlur, MedianBlur, IAAPiecewiseAffine,\n    IAASharpen, IAAEmboss, RandomContrast, RandomBrightness, Flip, OneOf, Compose, RandomGamma, ElasticTransform, ChannelShuffle,RGBShift, Rotate\n)","5918b173":"def augment(aug, image):\n    return aug(image=image)['image']\n\n# Here's how to deal with 4-channel inputs\n\ndef augment_4chan(aug, image):\n    image[:,:,0:3]=aug(image=image[:,:,0:3])['image']\n    image[:,:,3]=aug(image=image[:,:,1:4])['image'][:,:,2]\n    return image","a16cd188":"aug = HorizontalFlip(p=1)\nImage.fromarray(augment(aug,np.array(demo_rgb)))","33a58c18":"aug = Blur(p=1,blur_limit=3)\nImage.fromarray(augment(aug,np.array(demo_rgb)))","430d9d1e":"aug = ElasticTransform(p=1,border_mode=cv2.BORDER_REFLECT_101,alpha_affine=40)\nImage.fromarray(augment(aug,np.array(demo_rgb)))","efd2dbf0":"aug = RandomGamma(p=1)\nImage.fromarray(augment(aug,np.array(demo_rgb)))","d4c2d76c":"aug = RandomContrast(p=1)\nImage.fromarray(augment(aug,np.array(demo_rgb)))","01fc7059":"aug = RandomBrightness(p=1)\nImage.fromarray(augment(aug,np.array(demo_rgb)))","827084fd":"aug = ChannelShuffle(p=1)\nImage.fromarray(augment(aug,np.array(demo_rgb)))","bc0c6bfc":"aug = Rotate(p=1,limit=30)\nImage.fromarray(augment(aug,np.array(demo_rgb)))","41434cfa":"def strong_aug(p=1):\n    return Compose([\n        RandomRotate90(),\n        Flip(),\n        Transpose(),\n        OneOf([\n            IAAAdditiveGaussianNoise(),\n            GaussNoise(),\n        ], p=0.2),\n        OneOf([\n            MotionBlur(p=.2),\n            MedianBlur(blur_limit=3, p=.1),\n            Blur(blur_limit=3, p=.1),\n        ], p=0.2),\n        ShiftScaleRotate(shift_limit=0.0625, scale_limit=0.2, rotate_limit=45, p=.2),\n        OneOf([\n            OpticalDistortion(p=0.3),\n            GridDistortion(p=.1),\n            IAAPiecewiseAffine(p=0.3),\n        ], p=0.2),\n        OneOf([\n            CLAHE(clip_limit=2),\n            IAASharpen(),\n            IAAEmboss(),\n            RandomContrast(),\n            RandomBrightness(),\n        ], p=0.3),\n        #HueSaturationValue(p=0.3),\n    ], p=p)","9866789e":"aug = strong_aug(p=1)\nImage.fromarray(augment(aug,np.array(demo_rgb)))","8f039477":"Shoutout to [@Vladimir Iglovikov](https:\/\/www.kaggle.com\/iglovikov) for providing us this amazing image augmentation library! Heres how you can apply it to this competition.","e5909069":"### Composition of augmentations: https:\/\/github.com\/albu\/albumentations\/blob\/a5bbfedfc500e9cac1c3689b3720769e4fa727b3\/notebooks\/example.ipynb","c099a978":"### Load a demo image","03dfa69d":"*I'm not so sure about this one.....*","8f1a6854":"### Basic Transformations","cf2e5eef":"### Let's see how the 4-channel input looks like..."}}