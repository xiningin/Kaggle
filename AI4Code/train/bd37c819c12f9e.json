{"cell_type":{"451ecc38":"code","4c8c5ba6":"code","0896ecb5":"code","a45e819c":"code","269a20dc":"code","83d2532b":"code","6bbf9099":"code","4e95fca0":"code","55b69003":"code","bfe29e9a":"code","f5e7f4ac":"code","241544d9":"code","f253bdd3":"code","1847a391":"code","62e53215":"code","5a0a2179":"code","8c7fdbc8":"code","a9fb40c7":"code","0946f0bb":"code","676af860":"code","1e83230e":"code","2800dde1":"code","b8b0e26a":"code","34f34da0":"code","5960f9d5":"code","4fae3b2b":"code","350b4c3a":"code","ee43d14b":"code","4d618eed":"code","2e1bc049":"code","b48b559c":"code","30769488":"code","f257c9cd":"code","bcc8cf78":"code","e176dd78":"code","30f3f4d5":"code","a98353f1":"code","dac566d1":"code","6b550a62":"code","7b571f49":"code","d3e0c151":"code","5a0e108f":"code","830b975f":"code","94a7d68e":"code","9d7c4327":"code","b949ed7b":"code","babb8056":"code","23f41837":"code","464f6739":"code","d799f028":"code","c9feda43":"code","db19f2c9":"code","9765901a":"code","ce022251":"code","3e2c0e91":"code","18105b42":"code","10b16f3a":"code","755f8199":"code","f0032c4d":"code","752f4903":"code","cfb30ee4":"code","b4f8b549":"code","30cb1561":"code","ad529dd5":"code","2586038b":"code","00cbdddf":"code","c26bd83a":"code","510ba50e":"code","775b8780":"code","a1e3e4d4":"code","f00f5e60":"code","bb46329b":"code","3bcd4ce4":"code","04f25c27":"code","fc8a48df":"code","4463ef93":"code","5d9dbf8e":"code","c9278476":"code","77013e95":"code","7c4d2b64":"code","64ffaccd":"code","0f69a722":"code","95a1f398":"code","a9c0b05e":"code","89bbf3a7":"code","65b72a09":"markdown","a7856fcd":"markdown","d5841652":"markdown","d35b2a88":"markdown","1e23fda7":"markdown","8d080fce":"markdown","0ef182ad":"markdown","81d2e751":"markdown","40cebe22":"markdown","1cd3b96c":"markdown","f7dd574a":"markdown","02fa0f1d":"markdown","11ce4afd":"markdown","5092aa1a":"markdown","72ff70c6":"markdown","86dde1d9":"markdown","33ab5638":"markdown","26fddcf8":"markdown","18eb37e4":"markdown","1062b0fd":"markdown","7e361416":"markdown","cc9233fc":"markdown","a4859276":"markdown","178b8db0":"markdown","f7c01c8e":"markdown","f43eb2d0":"markdown","8cdc5a32":"markdown","e77966f7":"markdown","9e781b25":"markdown","bef33905":"markdown","973d12fb":"markdown","6d1a8037":"markdown","370a6cb8":"markdown","4f369667":"markdown","032103ab":"markdown","b4adaf98":"markdown","4164b56e":"markdown","a6ff0dd3":"markdown","9a3aa957":"markdown","198e16f6":"markdown","bbb29dc8":"markdown","1fe9b3f4":"markdown","3dcd1f03":"markdown","807bb4be":"markdown","e7920528":"markdown","8f5d9ff6":"markdown","a08f96d6":"markdown","e4e0a6a6":"markdown","9b0d5c99":"markdown","bbdd2926":"markdown","46783f46":"markdown","7a62219c":"markdown","af2e160d":"markdown","eb998de3":"markdown","6edb6f44":"markdown","2a0d6db2":"markdown","52676f0a":"markdown","87dbaf5c":"markdown","42ee062a":"markdown","144dbd8b":"markdown","04cf0bd2":"markdown","f99e8f8a":"markdown","b4ee103e":"markdown","115989fa":"markdown","a19bb5ea":"markdown","95657694":"markdown","9af67d44":"markdown","7acc6a5f":"markdown","43392438":"markdown","e8bdc689":"markdown","3b55bf99":"markdown","eeb34b95":"markdown","0acc1c28":"markdown","99f52a9d":"markdown","8868ddf9":"markdown","6b41dd7d":"markdown","886a7a80":"markdown","0d57e053":"markdown","26201f37":"markdown","2f5ea2d1":"markdown","42f5a915":"markdown","03f0f8f2":"markdown","cc13396a":"markdown","da42980d":"markdown","7ffd15d7":"markdown","41e23292":"markdown","6780a727":"markdown","1362c961":"markdown","2e6ab897":"markdown","8e859690":"markdown","f6844415":"markdown","d73642ec":"markdown","623a99c3":"markdown","e0095cac":"markdown","7fbb79b9":"markdown","94e0ea2d":"markdown"},"source":{"451ecc38":"import pandas as pd\nimport numpy as np\nimport chardet\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# reading data files\nimport os\nprint(os.listdir(\"..\/input\"))","4c8c5ba6":"df =  pd.read_csv('..\/input\/loan.csv',dtype='object')","0896ecb5":"#Look at the loans head\nprint(df.head())","a45e819c":"# inspect the structure\nprint(df.info(), \"\\n\")\nprint(df.shape)","269a20dc":"# Look if there are any missing values\ndf.isnull().sum()","83d2532b":"# summing up the missing values (column-wise) in master_frame which do not have 100% missing values\nCols_NotNull = round(100*(df.isnull().sum()\/len(df.index)), 2) != 100","6bbf9099":"# Columns having all missing values\ndf[Cols_NotNull.index[Cols_NotNull == False]].info()","4e95fca0":"# summing up the missing values (column-wise) in master_frame which do not have 100% missing values\nCols_NotNull = round(100*(df.isnull().sum()\/len(df.index)), 2) != 100","55b69003":"# Excluding those columns have 100% missing data \ndf = df[Cols_NotNull.index[Cols_NotNull == True]]","bfe29e9a":"df.shape","f5e7f4ac":"# summing up the missing values (column-wise) in dataframe\nround(100*(df.isnull().sum()\/len(df.index)), 2)","241544d9":"#Lets look at the data \ndf.head()","f253bdd3":"# Unique values in the columns\ndf.nunique()","1847a391":"# Columns having more than one value\ncols_unique = df.nunique() != 1\n# See the count of columns having more than a single value\ncols_unique.value_counts()","62e53215":"# Include only the cols having more than a single value\ndf = df[cols_unique.index[cols_unique == True]]","5a0a2179":"df.shape","8c7fdbc8":"#drop columns id, member_id, url, desc, zip_code\ndf = df.drop(['id','member_id','url','desc','zip_code'],axis=1)","a9fb40c7":"#drop column collection_recovery_fee \ndf = df.drop(['collection_recovery_fee'],axis=1)","0946f0bb":"#drop column total_pymnt_inv\ndf = df.drop(['total_pymnt_inv'],axis=1)","676af860":"#drop columns total_rec_prncp, total_rec_int, total_rec_late_fee, recoveries\ndf = df.drop(['total_rec_prncp', 'total_rec_int', 'total_rec_late_fee', 'recoveries'],axis=1)","1e83230e":"df.shape","2800dde1":"# sum it up to check how many rows have all missing values\ndf.isnull().all(axis=1).sum()","b8b0e26a":"# look at the df info for number of rows\ndf.info()","34f34da0":"#rows have more than 3 missing values\n# calculate the percentage\n100*(len(df[df.isnull().sum(axis=1) > 3].index) \/ len(df.index))","5960f9d5":"# retaining the rows having <= 3 NaNs\ndf = df[df.isnull().sum(axis=1) <= 3]\n\n# look at the summary again\nround(100*(df.isnull().sum()\/len(df.index)), 2)","4fae3b2b":"df.shape","350b4c3a":"# Lets see the missing values for last_pymnt_d\ndf[df['last_pymnt_d'].isnull()]['loan_status']","ee43d14b":"df.shape","4d618eed":"# fraction of rows lost\nlen(df.index)\/39717","2e1bc049":"# Take a look at the spread of the data to see the min and max values\npd.options.display.float_format = \"{:.2f}\".format\ndf['annual_inc'].describe()","b48b559c":"# Lets define the cutpoints by creating a list based on min and the max values\ncutpoints = [0, 20000, 40000, 60000, 80000, 100000, 120000, 6000000]\n# Define the lables\nbucket = ['0-20000', '20000-40000', '40000-60000', '60000-80000', '80000-100000', '100000-120000', 'Above 120000']\n# Using the cut function lets create the bins\ndf['annual_inc_bins'] = pd.cut(df['annual_inc'], bins=cutpoints, labels=bucket)","30769488":"# Take a look at the spread of the data to see the min and max values\ndf['loan_amnt'].describe()","f257c9cd":"# Lets define the cutpoints by creating a list based on min and the max values\ncutpoints = [0, 5000, 10000, 15000, 20000 , 35000]\n# Define the lables\nbucket = ['0-5000', '5000-10000', '10000-15000', '15000-20000', 'Above 20000']\n# Using the cut function lets create the bins\ndf['loan_amnt_bins'] = pd.cut(df['loan_amnt'], bins=cutpoints, labels=bucket)","bcc8cf78":"df['installment'].describe()","e176dd78":"# Lets define the cutpoints by creating a list based on min and the max values\ncutpoints = [0, 200, 400, 600, 800, 1306]\n# Define the lables\nbucket = ['0-200', '200-400', '400-600', '600-800', 'Above 800']\n# Using the cut function lets create the bins\ndf['installment_bins'] = pd.cut(df['installment'], bins=cutpoints, labels=bucket)","30f3f4d5":"df['issue_d_month'] = df['issue_d'].apply(lambda x: x.split('-')[0])","a98353f1":"df['mths_since_last_delinq'].describe()","dac566d1":"# Lets define the cutpoints by creating a list based on min and the max values\ncutpoints = [0, 20, 40, 60, 80, 100, 120]\n# Define the lables\nbucket = ['0-20', '20-40', '40-60', '60-80','80-100','Above 100']\n# Using the cut function lets create the bins\ndf['mths_since_last_delinq_bins'] = pd.cut(df['mths_since_last_delinq'], bins=cutpoints, labels=bucket)","6b550a62":"df['mths_since_last_record'].describe()","7b571f49":"# Lets define the cutpoints by creating a list based on min and the max values\ncutpoints = [0, 20, 40, 60, 80, 100, 129]\n# Define the lables\nbucket = ['0-20', '20-40', '40-60', '60-80','80-100','Above 100']\n# Using the cut function lets create the bins\ndf['mths_since_last_record_bins'] = pd.cut(df['mths_since_last_record'], bins=cutpoints, labels=bucket)","d3e0c151":"df['open_acc'].describe()","5a0e108f":"# Lets define the cutpoints by creating a list based on min and the max values\ncutpoints = [0, 10, 20, 30, 40, 50]\n# Define the lables\nbucket = ['0-10', '10-20', '20-30', '30-40','Above 40']\n# Using the cut function lets create the bins\ndf['open_acc_bins'] = pd.cut(df['open_acc'], bins=cutpoints, labels=bucket)","830b975f":"df['revol_bal'].describe()","94a7d68e":"# Lets define the cutpoints by creating a list based on min and the max values\ncutpoints = [0, 30000, 60000, 90000, 120000 , 150000]\n# Define the lables\nbucket = ['0-30000', '30000-60000', '60000-90000', '90000-120000', 'Above 120000']\n# Using the cut function lets create the bins\ndf['revol_bal_bins'] = pd.cut(df['revol_bal'], bins=cutpoints, labels=bucket)","9d7c4327":"df['revol_util'].describe()","b949ed7b":"df['revol_util']= df['revol_util'].apply(lambda x : str(x).rstrip('%'))\ndf['revol_util']= df['revol_util'].apply(lambda x : str(x).split('.')[0])\ndf['revol_util']= df['revol_util'].apply(lambda x : str(x).replace('nan','0'))\ndf['revol_util'] = df['revol_util'].astype('int')\n\n# Lets define the cutpoints by creating a list based on min and the max values\ncutpoints = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n# Define the lables\nbucket = ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60', '60-70', '70-80', '80-90', 'Above 90']\n# Using the cut function lets create the bins\ndf['revol_util_bins'] = pd.cut(df['revol_util'], bins=cutpoints, labels=bucket)","babb8056":"df['dti'].describe()","23f41837":"### Create bins for Dti\n# Lets define the cutpoints by creating a list based on min and the max values\ncutpoints = [0, 5, 10, 15, 20, 25, 30, 35]\n# Define the lables\nbucket = ['0-5', '5-10', '10-15', '15-20', '20-25', '25-30', 'Above 30']\n# Using the cut function lets create the bins\ndf['dti_bins'] = pd.cut(df['dti'], bins=cutpoints, labels=bucket)","464f6739":"# plot style used is ggplot used similar in R\nplt.style.use('ggplot')\nplt.figure(figsize= (5,4))\n# frequency plot\nsns.countplot(x=\"term\", data=df)\nplt.title(\"Loan Term Count\")\n#counts\ndf['term'].value_counts()\n# To save the fig to file\nplt.savefig('Plot1.png')","d799f028":"plt.figure(figsize= (5,4))\nplt.title(\"Loan Status Count\")\nsns.countplot(x=\"loan_status\", data=df)\n# to show value counts\ndf['loan_status'].value_counts()\n# To save the fig to file\nplt.savefig('Plot2.png')","c9feda43":"plt.figure(figsize= (10,7))\nsns.countplot(y=\"purpose\", data=df)\nplt.title(\"Loan Purpose Count\")\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\n# to show value counts\ndf['purpose'].value_counts()\n# To save the fig to file\nplt.savefig('Plot3.png')","db19f2c9":"plt.figure(figsize= (7,6))\nsns.countplot(y=\"emp_length\", data=df)\nplt.title(\"Emp Length Count\")\nplt.xticks(rotation=45)\ndf['emp_length'].value_counts()\n# To save the fig to file\nplt.savefig('Plot4.png')","9765901a":"plt.figure(figsize= (8,7))\nsns.countplot(x=\"annual_inc_bins\", data=df)\nplt.yticks(rotation=45)\nplt.title(\"Annual Income Bins Count\")\nplt.xticks(rotation=45)\n# To save the fig to file\nplt.savefig('Plot5.png')","ce022251":"plt.figure(figsize= (5,7))\nsns.countplot(x=\"loan_amnt_bins\", data=df)\nplt.xticks(rotation=45)\nplt.title('Loan Amount Count')\nplt.savefig('Plot6.png')\n(df['loan_amnt_bins'].value_counts()\/df['loan_amnt_bins'].count()).map(lambda x: '{:,.2%}'.format(x))","3e2c0e91":"sns.countplot(x=\"installment_bins\", data=df)\nplt.title(\"Installment Count\")\n(df['installment_bins'].value_counts()\/df['installment_bins'].count()).map(lambda x: '{:,.2%}'.format(x))","18105b42":"sns.countplot(x=\"issue_d_month\", data=df)\nplt.xticks(rotation=45)\nplt.title(\"Loan Issue Month Count\")\n(df['issue_d_month'].value_counts()\/df['issue_d_month'].count()).map(lambda x: '{:,.2%}'.format(x))","10b16f3a":"plt.figure(figsize= (11,5))\nplt.subplot(121)\ng = sns.distplot(df['loan_amnt'],bins=5,kde = False)\nplt.title(\"Loan Amnt distribution plot\")\n\nplt.subplot(122)\ng1 = sns.boxplot(y=df['loan_amnt'])\nplt.subplots_adjust(wspace=.2, hspace = 0.3 , top = 0.9)\nplt.title(\"Loan Amnt Boxplot\")","755f8199":"plt.figure(figsize= (18,6))\nplt.subplot(121)\ng = sns.distplot(df['installment'],bins=5,kde = False)\nplt.title(\"Installment distribution plot\")\n\nplt.subplot(122)\ng1 = sns.boxplot(y=df['installment'])\nplt.title(\"Installment Boxplot\")\n\nplt.subplots_adjust(wspace=.2, hspace = 0.3 , top = 0.9)","f0032c4d":"plt.figure(figsize= (11,5))\nplt.subplot(121)\ng = sns.distplot(df['annual_inc'],hist = False)\nplt.title(\"Annual Income kdeplot\")\nplt.xticks(rotation=45)\n\n\nplt.subplot(122)\ng1 = sns.boxplot(y=df['annual_inc'])\ng1 = plt.yscale('log')\nplt.title(\"Annual Income Boxplot\")\n\nplt.subplots_adjust(wspace=.2, hspace = 0.6 , top =0.9)","752f4903":"# check the data type of int_rate\ntype(df['int_rate'].iloc[0])","cfb30ee4":"#Interest Rate\n\n# Remove the % symbol\ndf['int_rate'] = df['int_rate'].str.extract('(\\d+)')\n\n# Change the data type to integer\ndf['int_rate'] = df['int_rate'].astype('int')\n\n# Look at the count of interest rate\nplt.figure(figsize= (10,6))\nsns.countplot(df['int_rate'])\nplt.title('Interest Rate Count')","b4f8b549":"sns.distplot(df['dti'], bins =10, kde = False)\nplt.title(\"dti: Distribution Plot\")","30cb1561":"# summary metric\ndf['dti'].describe()","ad529dd5":"plt.figure(figsize= (10,6))\nsns.countplot(y= 'purpose',hue='loan_status',  data = df)\nplt.title(\"Loan Status distribution by Purpose\")\n#plt.xticks(rotation=-90)","2586038b":"df[df['loan_status']=='Charged Off'].groupby('purpose')['loan_status'].count()","00cbdddf":"plt.figure(figsize= (12,12))\nsns.countplot(y=\"addr_state\",hue=(df['loan_status']),data=df)\nplt.title(\"Loan Status distribution by Addr State\")","c26bd83a":"df[df['loan_status']=='Charged Off'].groupby('addr_state')[['loan_status']].count().sort_values('loan_status',ascending=False).head(1)","510ba50e":"plt.figure(figsize= (8,8))\nsns.countplot(x=\"home_ownership\",hue='loan_status', data=df)\nplt.legend(bbox_to_anchor=(1.0, 1), loc=1, borderaxespad=0.,title='loan_status')\nplt.title(\"Loan Status distribution by Home Ownership\")","775b8780":"# Lets look at count of home ownership borrowers \ndf[df['loan_status']=='Charged Off'].groupby('home_ownership')[['loan_status']].count().sort_values('loan_status',ascending=False).head(1)","a1e3e4d4":"plt.figure(figsize= (12,6))\nsns.countplot(x=\"emp_length\",hue='loan_status', data=df)\nplt.title(\"Loan Status distribution by Emp Length\")","f00f5e60":"df[df['loan_status']=='Charged Off'].groupby('emp_length')[['loan_status']].count().sort_values('loan_status',ascending=False).head(1)","bb46329b":"# adjust figure size\nplt.figure(figsize=(15,12))\n\n# subplot 2: Annual Income\nplt.subplot(2, 2, 1)\nsns.countplot(x=\"annual_inc_bins\",hue='loan_status', data=df)\nplt.title(\"Number of Annual Inc. Bins by Loan Status\")\nplt.xticks(rotation=30)\n\n# subplot 3: Installment\nplt.subplot(2, 2, 2)\nsns.countplot(x=\"verification_status\",hue='loan_status', data=df)\nplt.title('Number of Ver. Status by loan Status')\nplt.xticks(rotation=30)\n\nplt.subplots_adjust(wspace=.5, hspace = 0.7 , top = 0.9)","3bcd4ce4":"df[df['loan_status']=='Charged Off'].groupby('annual_inc_bins')[['loan_status']].count().sort_values('loan_status',ascending=False).head(1)","04f25c27":"df[df['loan_status']=='Charged Off'].groupby('verification_status')[['loan_status']].count().sort_values('loan_status',ascending=False).head(1)","fc8a48df":"plt.figure(figsize= (12,8))\nsns.countplot(x=\"open_acc\",hue='loan_status', data=df)\nplt.legend(bbox_to_anchor=(1.0, 1), loc=1, borderaxespad=0.,title='loan_status')\nplt.title(\"Loan status distribution by Number of open accounts (credit lines)\")\n\ndf[df['loan_status']=='Charged Off'].groupby('open_acc')[['loan_status']].count().sort_values('loan_status',ascending=False).head(4)","4463ef93":"corr = df[['loan_amnt','total_pymnt','installment','int_rate','annual_inc','dti']].corr()\nplt.figure(figsize= (9,6))\nplt.title(\"Correlation Heat Map\")\ng = sns.heatmap(corr,annot=True)","5d9dbf8e":"# adjust figure size\nplt.figure(figsize=(15, 8))\n\n# subplot 1: Annual Income\nplt.subplot(2, 2, 1)\nsns.boxplot(x='annual_inc_bins', y='loan_amnt',hue='loan_status', data=df)\nplt.title(\"Annual Income groups vs Loan Amnt\")\nplt.xticks(rotation=30)\nplt.legend(bbox_to_anchor=(1.0, 1), loc=2, borderaxespad=0.1,title='loan_status')\n\n# subplot 2: Loan Amount\nplt.subplot(2, 2, 2)\nsns.boxplot(x='loan_amnt_bins', y='int_rate',hue='loan_status', data=df)\nplt.title(\"Loan Amount groups vs Interest rate\")\nplt.legend(bbox_to_anchor=(1.0, 1), loc=2, borderaxespad=0.1,title='loan_status')\n\n# subplot 3: Installment\nplt.subplot(2, 2, 3)\nsns.boxplot(x='installment_bins',y='loan_amnt',hue='loan_status' , data=df)\nplt.title(\"Installment groups vs Loan Amnt\")\n           \n# subplot 4: Interest Rate\nplt.subplot(2, 2, 4)\nax1 =sns.boxplot(x='installment_bins', y='int_rate',hue='loan_status', data=df)\nplt.title(\"Installment groups vs Interest rate\")\nplt.legend(bbox_to_anchor=(1.0, 1), loc=2, borderaxespad=0.1,title='loan_status')\n#plt.yscale('log')\n\nplt.subplots_adjust(wspace=.5, hspace = 0.7 , top = 0.9)","c9278476":"# adjust figure size\nplt.figure(figsize=(15, 10))\n\n# subplot 1: \nplt.subplot(3, 3, 1)\n# Calculate Charged off % by home_ownership for top 8\nChgOff_hom= (df[df['loan_status']=='Charged Off'].groupby(by=['home_ownership'])[['loan_status']].count()\/\\\ndf.groupby(by=['home_ownership'])[['loan_status']].count()).sort_values('loan_status',ascending=False)\nChgOff_hom=ChgOff_hom.reset_index()\nChgOff_hom.rename(columns={\"loan_status\": \"Charged off %\"},inplace=True)\n#plt.figure(figsize=(8,8))\ng=sns.pointplot(x='home_ownership',y='Charged off %',data=ChgOff_hom,color='c',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"home_ownership\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y))) \n\n# subplot 2: \nplt.subplot(3, 3, 2)\n# Calculate Charged off % by emp_length \nChgOff_emplength= (df[df['loan_status']=='Charged Off'].groupby(by=['emp_length'])[['loan_status']].count()\/\\\ndf.groupby(by=['emp_length'])[['loan_status']].count()) \nChgOff_emplength=ChgOff_emplength.reset_index()\nChgOff_emplength.rename(columns={\"loan_status\": \"Charged off %\"},inplace=True)\n#plt.figure(figsize=(5,5))\ng=sns.pointplot(x='emp_length',y='Charged off %',data=ChgOff_emplength,color='c',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=90)\ng.set_xlabel(\"emp_length\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y))) \n\n# subplot 3: \nplt.subplot(3, 3, 3)\n# Calculate Charged off % by addr_state for top 8\nChgOff_addr= (df[df['loan_status']=='Charged Off'].groupby(by=['addr_state'])[['loan_status']].count()\/\\\ndf.groupby(by=['addr_state'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(8) \nChgOff_addr=ChgOff_addr.reset_index()\nChgOff_addr=ChgOff_addr.reset_index()\nChgOff_addr.rename(columns={\"loan_status\": \"Charged off %\"},inplace=True)\n#plt.figure(figsize=(8,8))\ng=sns.pointplot(x='addr_state',y='Charged off %',data=ChgOff_addr,color='c',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=0)\ng.set_xlabel(\"addr_state\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n# subplot 4: \nplt.subplot(3, 3, 4)\n# Calculate Charged off % by Purpose for top 8\nChgOff_purpose= (df[df['loan_status']=='Charged Off'].groupby(by=['purpose'])[['loan_status']].count()\/\\\ndf.groupby(by=['purpose'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(8) \nChgOff_purpose=ChgOff_purpose.reset_index()\nChgOff_purpose=ChgOff_purpose.reset_index()\nChgOff_purpose.rename(columns={\"loan_status\": \"Charged off %\"},inplace=True)\ng=sns.pointplot(x='purpose',y='Charged off %',data=ChgOff_purpose,color='c',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=90)\ng.set_xlabel(\"purpose\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n\n# subplot 5: \nplt.subplot(3, 3, 5)\n# Calculate Charged off % by annual income bins \nChgOff_inc= (df[df['loan_status']=='Charged Off'].groupby(by=['annual_inc_bins'])[['loan_status']].count()\/\\\ndf.groupby(by=['annual_inc_bins'])[['loan_status']].count()).sort_values('loan_status',ascending=False)\nChgOff_inc=ChgOff_inc.reset_index()\nChgOff_inc.rename(columns={\"loan_status\": \"Charged off %\"},inplace=True)\ng=sns.pointplot(x='annual_inc_bins',y='Charged off %',data=ChgOff_inc,color='c',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"annual_inc_bins\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n\n# subplot 3:#plt.subplot(3, 3, 6)\n\nplt.subplots_adjust(wspace=.5, hspace = 0.8 , top = 1.0)","77013e95":"# adjust figure size\nplt.figure(figsize=(15, 10))\n\n# subplot 1: \nplt.subplot(3, 3, 1)\n# Calculate Charged off % by no of months since last record\nChgOff_mnthLastRcrd= (df[df['loan_status']=='Charged Off'].groupby(by=['mths_since_last_record_bins'])[['loan_status']].count()\/\\\ndf.groupby(by=['mths_since_last_record_bins'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(8)\nChgOff_mnthLastRcrd=ChgOff_mnthLastRcrd.reset_index()\nChgOff_mnthLastRcrd.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='mths_since_last_record_bins',y='Charged Off %',data=ChgOff_mnthLastRcrd,color='r',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"mths_since_last_record_bins\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y))) \n\n# subplot 2: \nplt.subplot(3, 3, 2)\n# Calculate Charged off % by no of open accounts\nChgOff_opnAcc= (df[df['loan_status']=='Charged Off'].groupby(by=['open_acc_bins'])[['loan_status']].count()\/\\\ndf.groupby(by=['open_acc_bins'])[['loan_status']].count()) \nChgOff_opnAcc=ChgOff_opnAcc.reset_index()\nChgOff_opnAcc.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='open_acc_bins',y='Charged Off %',data=ChgOff_opnAcc,color='r',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=90)\ng.set_xlabel(\"open_acc_bins\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y))) \n\n# subplot 3: \nplt.subplot(3, 3, 3)\n# Calculate Charged off % by public record bankruptcies\nChgOff_pblcBankrpt= (df[df['loan_status']=='Charged Off'].groupby(by=['pub_rec_bankruptcies'])[['loan_status']].count()\/\\\ndf.groupby(by=['pub_rec_bankruptcies'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(8) \nChgOff_pblcBankrpt=ChgOff_pblcBankrpt.reset_index()\nChgOff_pblcBankrpt.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='pub_rec_bankruptcies',y='Charged Off %',data=ChgOff_pblcBankrpt,color='r',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=0)\ng.set_xlabel(\"pub_rec_bankruptcies\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n# subplot 4: \nplt.subplot(3, 3, 4)\n# Calculate Charged off % by public record\nChgOff_dti= (df[df['loan_status']=='Charged Off'].groupby(by=['pub_rec'])[['loan_status']].count()\/\\\ndf.groupby(by=['pub_rec'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(8) \nChgOff_dti=ChgOff_dti.reset_index()\nChgOff_dti=ChgOff_dti.reset_index()\nChgOff_dti.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='pub_rec',y='Charged Off %',data=ChgOff_dti,color='r',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=90)\ng.set_xlabel(\"pub_rec\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n\n# subplot 5: \nplt.subplot(3, 3, 5)\n# Calculate Charged off % by revolving balance\nChgOff_revBalance= (df[df['loan_status']=='Charged Off'].groupby(by=['revol_bal_bins'])[['loan_status']].count()\/\\\ndf.groupby(by=['revol_bal_bins'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(19)\nChgOff_revBalance=ChgOff_revBalance.reset_index()\nChgOff_revBalance.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='revol_bal_bins',y='Charged Off %',data=ChgOff_revBalance,color='r',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"revol_bal_bins\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n\n# subplot 6:\nplt.subplot(3, 3, 6)\n# Calculate Charged off % by revolving utilization\nChgOff_revUtlz= (df[df['loan_status']=='Charged Off'].groupby(by=['revol_util_bins'])[['loan_status']].count()\/\\\ndf.groupby(by=['revol_util_bins'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(19)\nChgOff_revUtlz=ChgOff_revUtlz.reset_index()\nChgOff_revUtlz.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='revol_util_bins',y='Charged Off %',data=ChgOff_revUtlz,color='r',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"revol_util_bins\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\nplt.subplots_adjust(wspace=.5, hspace = 0.8 , top = 1.0)","7c4d2b64":"# adjust figure size\nplt.figure(figsize=(10, 10))\n\n# subplot 1: \nplt.subplot(2, 2, 1)\n# Calculate Charged off % by issued_month\nChgOff_issue= (df[df['loan_status']=='Charged Off'].groupby(by=['issue_d_month'])[['loan_status']].count()\/\\\ndf.groupby(by=['issue_d_month'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(8)\nChgOff_issue=ChgOff_issue.reset_index()\nChgOff_issue.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='issue_d_month',y='Charged Off %',data=ChgOff_issue,color='b',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"issue_d_month\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y))) \n\n# subplot 2: \nplt.subplot(2, 2, 2)\n# Calculate Charged off % by delinq within 2yrs\nChgOff_delinq_2yrs= (df[df['loan_status']=='Charged Off'].groupby(by=['delinq_2yrs'])[['loan_status']].count()\/\\\ndf.groupby(by=['delinq_2yrs'])[['loan_status']].count()) \nChgOff_delinq_2yrs=ChgOff_delinq_2yrs.reset_index()\nChgOff_delinq_2yrs.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='delinq_2yrs',y='Charged Off %',data=ChgOff_delinq_2yrs,color='b',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=90)\ng.set_xlabel(\"delinq_2yrs\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y))) \n\n# subplot 3: \nplt.subplot(2, 2, 3)\n# Calculate Charged off % by inq in last months\nChgOff_inq= (df[df['loan_status']=='Charged Off'].groupby(by=['inq_last_6mths'])[['loan_status']].count()\/\\\ndf.groupby(by=['inq_last_6mths'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(8) \nChgOff_inq=ChgOff_inq.reset_index()\nChgOff_inq.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='inq_last_6mths',y='Charged Off %',data=ChgOff_inq,color='b',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=90)\ng.set_xlabel(\"inq_last_6mths\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n\n# subplot 4: \nplt.subplot(2, 2, 4)\n# Calculate Charged off % by no of months since last delinq\nChgOff_month_last_delinq= (df[df['loan_status']=='Charged Off'].groupby(by=['mths_since_last_delinq_bins'])[['loan_status']].count()\/\\\ndf.groupby(by=['mths_since_last_delinq_bins'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(19)\nChgOff_month_last_delinq=ChgOff_month_last_delinq.reset_index()\nChgOff_month_last_delinq.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='mths_since_last_delinq_bins',y='Charged Off %',data=ChgOff_month_last_delinq,color='b',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"mths_since_last_delinq_bins\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n\nplt.subplots_adjust(wspace=.5, hspace = 0.8 , top = 1.0)","64ffaccd":"# adjust figure size\nplt.figure(figsize=(15, 10))\n\n# subplot 1: \nplt.subplot(3, 3, 1)\n# Calculate Charged off % by Verification Status\nChgOff_ver= (df[df['loan_status']=='Charged Off'].groupby(by=['verification_status'])[['loan_status']].count()\/\\\ndf.groupby(by=['verification_status'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(8)\nChgOff_ver=ChgOff_ver.reset_index()\nChgOff_ver.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='verification_status',y='Charged Off %',data=ChgOff_ver,color='g',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"verification_status\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y))) \n\n# subplot 2: \nplt.subplot(3, 3, 2)\n# Calculate Charged off % by term\nChgOff_term= (df[df['loan_status']=='Charged Off'].groupby(by=['term'])[['loan_status']].count()\/\\\ndf.groupby(by=['term'])[['loan_status']].count()) \nChgOff_term=ChgOff_term.reset_index()\nChgOff_term.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='term',y='Charged Off %',data=ChgOff_term,color='g',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=90)\ng.set_xlabel(\"term\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y))) \n\n# subplot 3: \nplt.subplot(3, 3, 3)\n# Calculate Charged off % by Grade\nChgOff_grade= (df[df['loan_status']=='Charged Off'].groupby(by=['grade'])[['loan_status']].count()\/\\\ndf.groupby(by=['grade'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(8) \nChgOff_grade=ChgOff_grade.reset_index()\nChgOff_grade=ChgOff_grade.reset_index()\nChgOff_grade.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='grade',y='Charged Off %',data=ChgOff_grade,color='g',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=0)\ng.set_xlabel(\"grade\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n# subplot 4: \nplt.subplot(3, 3, 4)\n# Calculate Charged off % by dti\nChgOff_dti= (df[df['loan_status']=='Charged Off'].groupby(by=['dti_bins'])[['loan_status']].count()\/\\\ndf.groupby(by=['dti_bins'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(8) \nChgOff_dti=ChgOff_dti.reset_index()\nChgOff_dti=ChgOff_dti.reset_index()\nChgOff_dti.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='dti_bins',y='Charged Off %',data=ChgOff_dti,color='g',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=90)\ng.set_xlabel(\"dti\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n\n# subplot 5: \nplt.subplot(3, 3, 5)\n# Calculate Charged off % by annual Interest Rate\nChgOff_int= (df[df['loan_status']=='Charged Off'].groupby(by=['int_rate'])[['loan_status']].count()\/\\\ndf.groupby(by=['int_rate'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(19)\nChgOff_int=ChgOff_int.reset_index()\nChgOff_int.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='int_rate',y='Charged Off %',data=ChgOff_int,color='g',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"interest_rate\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n\n# subplot 6:\nplt.subplot(3, 3, 6)\n# Calculate Charged off % by annual Loan Amount\nChgOff_amnt= (df[df['loan_status']=='Charged Off'].groupby(by=['loan_amnt_bins'])[['loan_status']].count()\/\\\ndf.groupby(by=['loan_amnt_bins'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(19)\nChgOff_amnt=ChgOff_amnt.reset_index()\nChgOff_amnt.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\ng=sns.pointplot(x='loan_amnt_bins',y='Charged Off %',data=ChgOff_amnt,color='g',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"loan_amnt_bins\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\nplt.subplots_adjust(wspace=.5, hspace = 0.8 , top = 1.0)","0f69a722":"df['month_inc']=df['annual_inc']\/12\ndf['InHandSalary'] = df['month_inc'] - (df['dti']*df['month_inc']\/100)","95a1f398":"# Lets define the cutpoints by creating a list based on min and the max values\ncutpoints = [0, 1000, 2000, 3000, 4000, 5000, 6000, 500000]\n# Define the lables\nbucket = ['0-1000', '1000-2000', '2000-3000', '3000-4000', '4000-5000','5000-6000','Above 6000']\n# Using the cut function lets create the bins\ndf['InHandmonth_inc_bins'] = pd.cut(df['InHandSalary'], bins=cutpoints, labels=bucket)","a9c0b05e":"# Calculate Charged off % by Monthly In Hand Income after paying all EMIs\nChgOff_hand= (df[df['loan_status']=='Charged Off'].groupby(by=['InHandmonth_inc_bins'])[['loan_status']].count()\/\\\ndf.groupby(by=['InHandmonth_inc_bins'])[['loan_status']].count()).sort_values('loan_status',ascending=False).head(8)\nChgOff_hand=ChgOff_hand.reset_index()\nChgOff_hand.rename(columns={\"loan_status\": \"Charged Off %\"},inplace=True)\n#plt.figure(figsize=(8,8))\ng=sns.pointplot(x='InHandmonth_inc_bins',y='Charged Off %',data=ChgOff_hand,color='g',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"InHandmonth_inc_bins\",fontsize=13)\ng.set_ylabel(\"ChargedOff %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y))) ","89bbf3a7":"# adjust figure size\nplt.figure(figsize=(15, 10))\n\n# subplot 1: \nplt.subplot(2, 2, 1)\n# Calculate Verification status rate by no of open accounts\nv_annInc= (df[df['verification_status']=='Not Verified'].groupby(by=['annual_inc_bins'])[['verification_status']].count()\/\\\ndf.groupby(by=['annual_inc_bins'])[['verification_status']].count()).sort_values('verification_status',ascending=False).head(8)\nv_annInc=v_annInc.reset_index()\nv_annInc.rename(columns={\"verification_status\": \"verification status %\"},inplace=True)\n#plt.figure(figsize=(8,8))\ng=sns.pointplot(x='annual_inc_bins',y='verification status %',data=v_annInc,color='g',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"annual_inc_bins\",fontsize=13)\ng.set_ylabel(\"Not_verified %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y))) \n\n# subplot 2: \nplt.subplot(2, 2, 2)\n# Calculate Verification status rate by home ownership\nv_hmOwn= (df[df['verification_status']=='Not Verified'].groupby(by=['home_ownership'])[['verification_status']].count()\/\\\ndf.groupby(by=['home_ownership'])[['verification_status']].count()) \nv_hmOwn=v_hmOwn.reset_index()\nv_hmOwn.rename(columns={\"verification_status\": \"verification status %\"},inplace=True)\n#plt.figure(figsize=(5,5))\ng=sns.pointplot(x='home_ownership',y='verification status %',data=v_hmOwn,color='g',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=90)\ng.set_xlabel(\"home_ownership\",fontsize=13)\ng.set_ylabel(\"Not_verified %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y))) \n\n# subplot 3: \nplt.subplot(2, 2, 3)\n# Calculate Verification status rate by state\nv_state= (df[df['verification_status']=='Not Verified'].groupby(by=['addr_state'])[['verification_status']].count()\/\\\ndf.groupby(by=['addr_state'])[['verification_status']].count()).sort_values('verification_status',ascending=False).head(8) \nv_state=v_state.reset_index()\nv_state.rename(columns={\"verification_status\": \"verification status %\"},inplace=True)\ng=sns.pointplot(x='addr_state',y='verification status %',data=v_state,color='g',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=90)\ng.set_xlabel(\"addr_state\",fontsize=13)\ng.set_ylabel(\"Not_verified %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n\n# subplot 4: \nplt.subplot(2, 2, 4)\n# Calculate Verification status rate by Monthly InHand Savings (Available Monthly Income after paying all EMIs)\nv_InHndIncm= (df[df['verification_status']=='Not Verified'].groupby(by=['InHandmonth_inc_bins'])[['verification_status']].count()\/\\\ndf.groupby(by=['InHandmonth_inc_bins'])[['verification_status']].count()).sort_values('verification_status',ascending=False).head(19)\nv_InHndIncm=v_InHndIncm.reset_index()\nv_InHndIncm.rename(columns={\"verification_status\": \"verification status %\"},inplace=True)\n#plt.figure(figsize=(8,8))\ng=sns.pointplot(x='InHandmonth_inc_bins',y='verification status %',data=v_InHndIncm,color='g',markers=['o'], \n               scale = 0.4)\nplt.xticks(rotation=30)\ng.set_xlabel(\"InHandmonth_inc_bins\",fontsize=13)\ng.set_ylabel(\"Not_verified %\",fontsize=13)\ng.tick_params(labelsize=12)\nfrom matplotlib.ticker import FuncFormatter\ng.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.0%}'.format(y)))\n\n\nplt.subplots_adjust(wspace=.5, hspace = 0.8 , top = 1.0)","65b72a09":"### Loan Term","a7856fcd":"### Create bins for open_account","d5841652":"### Create bins for revolving util percentage","d35b2a88":"### dti  is Ratio of dept payments to monthly income","1e23fda7":"<font color=blue>\nNon verification rate is high among following categories which also has very charge off rate:<br \/>\n\n1) \"Annual Income\" for low salary bins has more than \"50%\" non verified rate same low salary bins also has highest charge off rate i.e. approx. \"20%\"<br \/>\n\n2) Home ownership with value as \"None\" for low saraly bins has 100% non verified rate same option i.e. 'None' also has highest charge off rate i.e. approx 20%<br \/>\n\n3) Address state, e.g \"NE\" has 100% non verified rate same state \"NE\" also has highest charge off rate i.e. \"60%\"<br \/>\n\n4) Monthly InHand Savings(\"Monthly Income left after paying all EMIs\") has more than 50% non verified rate for values 0 to 3000 same values also has highest charge off rate i.e. 15 to 25%\n <br \/>  \n <b>To summarize, if we check the charge off% plot with the parameters 'Annual Income', 'Home ownership', 'Address state' and 'Monthly InHand Savings' (Monthly Income left after paying all EMIs) it is clear that the charge off% is higher for sections\/values\/ranges where non-verification rate is high<\/b>\n <\/font>","8d080fce":"<font color=blue> The Mean value for dti is almost equal to the Median value around 13. A closer look at the distribution plot shows its symmertic in nature.<\/font>\n","0ef182ad":"<font color=blue>Thus, about 4% rows have more than 3 missing values. Let's remove these rows and count the number of missing values remaining.<\/font>\n","81d2e751":"# Part 1: Data Collection and Inspection\nLet's start with getting the datafile loan.csv.","40cebe22":"# Part 6 :Bivariate Analysis on Loan Status. \n\n## We will now analyse distribution of loan status against other variables","1cd3b96c":"### Data Derived Metric: Charge Off %\n\n### Lets Derive the Charge Off % Metric as number of loan status as Charged Off to all the loan status for Categories like Grade, purpose, emp length term and verification.\n\n### Charge Off % = Number of Loan Status Charged Off by Category\/Number of Loan Status(all status) by category","f7dd574a":"<font color=blue>total_pymnt_inv and total_pymnt is the payments received in portion and total payment received respectively. So we can keep the total_pymnt column for our analysis further and remove the column total_pymnt_inv.<\/font>","02fa0f1d":"###  Loan Status distribution by Home Ownership","11ce4afd":"<font color=blue>This shows that borrower having Monthly InHand Savings in range \"0 to 1000\" available after deducting all EMIs from monthly salary has highest charge of rate 22%  <br \/>  <br \/><\/font>","5092aa1a":"### Create bins for revolving balance","72ff70c6":"# Part 7: Bivariate Analysis on Continuous Variables","86dde1d9":"### Loan Status distribution by Emp Length","33ab5638":"### Loan status distribution by Number of open accounts (credit lines)","26fddcf8":"<font color=blue><br \/> The Annual Income spread is around 41900 (i.e. IQR, interquartile difference).<br \/>Outliers are 6 * IQR.<\/font>","18eb37e4":"<font color=blue>Loan Amount and Installment have strong positive correlation.<br \/>Loan Amount and total_pymnt have strong positive correlation.<br \/> total_pymnt have positive correlation with installment<\/font>","1062b0fd":"<font color=blue>The highest count for Charged Off is for purpose debt_consolidation around 2660. <\/font>","7e361416":"<font color=blue>The status of the loan could be Fully paid, Charged Off or Current.\n\nAround, 5627 borrowers were Charged Off i.e. defaulters to pay back the loan.<\/font>","cc9233fc":"\n<font color=blue>Purpose is reason which the loan is borrowed.\n\nWe observe around 18641 number of brrowers are for debt consolidation i.e. to reduce the their own debt.<\/font>","a4859276":"<font color=blue>When last_pymnt_d is null which means the loan status was charged off(defaulted) and hence last payment date has missing values. We will not remove the missing values for last_pymnt_d else we will also loose the Charged Off values in loan_status.<\/font>","178b8db0":"<font color=blue>There are 54 columns with missing values<\/font>","f7c01c8e":"### Interest rate","f43eb2d0":"<font color=blue>Now lets look at the Quantitative Variables Loan Amount, Installment, Annual Income, Interest rate and dti.<\/font>","8cdc5a32":"\n<font color=blue>Lets look at the missing rows<\/font>","e77966f7":"### Purpose","9e781b25":"### Create bins for Annual Income","bef33905":"<font color=blue>The number of borrowers who defaulted is highest for 10+ years of experience around 1297.<\/font>","973d12fb":"# Part 2 : Data Cleaning","6d1a8037":"\n<font color=blue>Annual Income groups vs Loan Amnt: The variation in loan amount increases as Income groups increase for Charged Off.<br \/> Installment groups vs Loan Amnt: As installment increases we see the loan amount also increases, though the variation is high for installments Above 1000 where the Charged Off.                     \n<br \/><\/font>","370a6cb8":"# Part 3: Type Derived metrics\n\nWe shall create Type Driven Derived metrics for: <br\\>\nanalyzing the numerical values by Binning them into groups.<br\\>\nanalysing issue month from issue date.","4f369667":"### Create bins for Dti","032103ab":"<font color=blue><b>We have also seen in previous plots that Charge off rate is highest among verified borrower  <br \/>  Looking at above plot, Finance company should improve borrower verification process<\/b><br \/><\/font>","b4adaf98":"# Part 8: Multivariate Analysis on Continuous vs Categorical Variables","4164b56e":"### Lets calculate the Charge Off % for more Borrowers characteristics:\n#### Additional characteristics like:\n##### Month of Loan Issue\n##### Number of delinquencies in last 2 years\n##### Number of inquiries in last 6 months\n##### Number of months since last delinquency","a6ff0dd3":"<font color=blue>recoveries and collection_recovery_fee are post charge off gross recovery and collection fee respectively. Hence , we can keep recoveries as its gross amount and remove collection_recovery_fee column.<\/font>","9a3aa957":"<font color=blue><br \/>\nWe have analysed till now variables Term , Loan Status, Emp length, Home ownership, State Addr, Purpose, Annual Income, no of open account.<br \/>  Since Target variable is Loan Status to find if the borrower defaulted, we also looked at the these variables by Loan Status to understand the driving variables for loan defaulters.                        \n<br \/> \nThus, we can make an understanding that Variables <br \/>Emp length, <br \/>Home ownership, <br \/>State Addr, <br \/>Purpose, <br \/>Annual Income <br \/> No of open accounts<br \/>are the Borrowers' Chracteristics which are vital for the lender to consider for loan approval. <\/font>","198e16f6":"### Annual income","bbb29dc8":"<font color=blue>Term is the duration of the loan payments. There are 29096 borrowers with 36 months term.<\/font>","1fe9b3f4":"### Create bins for Monthly InHand Savings available for person after all EMIs deducted from monthly salary","3dcd1f03":"### Correlation of numeric columns","807bb4be":"### Installments","e7920528":"# Part 5: Univariate Analysis Quantitative variables","8f5d9ff6":"<font color=blue>Charged Off % for lenders parameters is as seen below:-<br \/> It is highest for Verification Status as 'Verified' around 16% <br \/>It is highest for term of '60 months' around 23%<br \/>It is highest for grade of 'G' around 30% and there is increase from A to G <br \/>It is highest for dti range of '20-25' around 16% and shows increase from range of '5-10' to '20-25' <br \/> It shows increasing trend for Interest rate with steep increase between 20 to 21% <br \/> It shows an increasing trend for Loan Amounts greater than 10,000 with sharp increase after 15000 <br \/><\/font>","a08f96d6":"<font color=blue>The number of borrowers with loan ammount range 5000-10000 are the highest around 32%.<\/font>","e4e0a6a6":"### Loan status distribution by Annual Income and Verification Status","9b0d5c99":"<font color=blue>Charged Off % for borrower's characteristics is as seen below:-<br \/> Month since last record is highest for range 0-20 around 32% <br \/>Open account is highest for range 30-40 around 28%<br \/>Public record bankruptcies is highest for value 2 around 27%  <br \/>Public record is highest for any value above 0 around 20-22%  <br \/> Revolving balance is highest for range 0-60000 around 13-16% <br \/> Revolving balance utilization shows continuous increment and highest for range above 90% at 20% <br \/><\/font>","bbdd2926":"### Loan Issue Month","46783f46":"<font color=blue>Verification_status indicates if Income was verified or not.<br \/> \n\n\n  The number of borrowers who defaulted is highest for annual income range 40000-60000 around 1648.<br \/> \n\n\nThe number of borrowers who Defaulted is highest for Not Verifed around 1992<\/font>","7a62219c":"<font color=blue>We have analysed the continuous variables Loan Amount, Installment, Annual Income and Interest rate.<br \/>  We also looked at the these variables by Loan Status to understand the defaulters by creating bins of the numerical variables.                        \n<br \/> \nThus, we can make an understanding that Variables <br \/>Loan Amount, <br \/>Installment, <br \/>Annual Income, <br \/>Interest rate <br \/>are the Lenders parameters which are vital for the lender to consider for loan approval.<br \/> The Lender also evaluates the loan approval by <br \/>dti, <br \/>Grade, <br \/>Term and <br \/>Verification Status. <\/font>","af2e160d":"### Data Derived Metric: Non Verification Rate\n### Lets calculate the Non Verification Rate across different parameters to check the charge off caused due to non-verification\n### Non Verification Rate = Number of Verification status Not Verified by Category\/Number of Verification status(all status) by category","eb998de3":"### Lets calculate the Charge Off % for more Borrowers characteristics:\n#### Additional characteristics like:\n##### months since last record\n##### no of open accounts\n##### public record bankruptcies\n##### public record\n##### revolving balance\n##### revolving utilization","6edb6f44":"<font color=blue>Finance company should improve borrower verfication process to minimize loss<br \/><\/font>","2a0d6db2":"<font color=blue>Most borrowers are from the State CA. The Charged Off count in the State CA is 1058.<\/font>\n","52676f0a":"### Loan Status distribution by Purpose","87dbaf5c":"<font color=blue>Most no of loan issued towards end of year with increasing number .<\/font>","42ee062a":"<font color=blue>Charged Off % for borrower's characteristics is as seen below:-<br \/> It is highest for Home ownership 'RENT'(ignoring OTHER) around 15% <br \/>It is highest for emp length of '10+ yrs' around 15%<br \/>It is highest for Addr state as 'NE' around 60% <br \/>It is highest for purpose of 'small_business' around 25.5% <br \/> It is highest for income range '0-20000' around 18.5%<br \/> <br \/><\/font>","144dbd8b":"### Create bins for Loan Amount","04cf0bd2":"### Loan Amount","f99e8f8a":"<font color=blue>The distribution plot shows us the skewness towards the right.<br \/> The Loan amount spread is around 9500 (i.e. IQR, interquartile difference).<br \/>Outliers are 3.5 * IQR<\/font>","b4ee103e":"<font color=blue>Thus, the loan company should look at the below Driver variables based on the Charge Off % <br \/>    <b>Home Ownership<\/b> for RENT <br \/><b>Emp Length<\/b> for 10+ yrs <br \/><b>Addr State<\/b> for NE  <br \/><b>Purpose<\/b> for small_business. <br \/> <b>Annual Income<\/b> for income range 0-20000 <br \/>   <br \/> <b>Verification Status<\/b> for Verified <br \/><b>Term<\/b> for loan in 60 months <br \/><b>Grade<\/b> escpecially G <br \/><b>dti range<\/b> from 5-10 till 20-25 <br \/> <b>Interest rate<\/b> greater than 20% <br \/> <b>Loan Amounts<\/b> greater than 10,000  <br \/><br \/> <b>Month since last record<\/b> in range 0-20 which has highest charge off around 32% <br \/><b>Open accounts<\/b> in range 30-40 which has highest charge off around 28%<br \/><b>Public record bankruptcies<\/b> for value 2 which has highest charge off around 27%  <br \/><b>Public record<\/b> for any value above 0 which has highest charge off around 20-22%  <br \/> <b>Revolving balance<\/b> in range 0-60000 which has highest charge off around 13-16% <br \/> <b>Revolving balance utilization<\/b> for range above 90% as it shows continuous increment for charge off and is highest at 20% <br \/><br \/> <b>Loan issued in month<\/b> of \"May & Dec\" seen with highest charge off rate: around 15-16% <br \/><b>No of delinquency in last 2 years<\/b> with value 7 seen with highest charge off rate i.e. 50%<br \/><b>No of inquiries in last 6 months<\/b> with value 6 & 7 seen with highest charge off rate around 24-28%  <br \/> <b>No of month since last delinquency<\/b> with range 80-100 seen with highest charge off rate around 21% i.e. Applicant may not pay loan after showing decent behavior for few months after failing to pay EMI <br \/>Borrower having <b>Monthly InHand Savings<\/b> range \"0 to 1000\" available after all EMIs deducted from monthly salary has highest charge of rate 22%  <br \/>  <\/font>","115989fa":"### Loan Amount","a19bb5ea":"<font color=blue>Thus, we have lost about 4% observations in cleaning the missing values.<\/font>","95657694":"\n<font color=blue>There are columns which have all missing values, lets get rid of these columns.<\/font>","9af67d44":"<font color=blue>The number of borrowers and number of defaulters rise for number of open accounts from 0 to 7 with highest number of defaulters at open accounts of 7 and it reduces from number of open accounts of 8 and onwards and we observe skewness to the right of the distribution.<\/font>","7acc6a5f":"### Create bins for number of months since the last public record","43392438":"### Create bins for Installment","e8bdc689":"### Extracting issue month from issue date","3b55bf99":"<font color=blue>Emp_length is experience of borrower in years. The number of borrowers with greater than 10+ years of experience are the highest around 8879.<\/font>","eeb34b95":"# Part 9 : Data and Business Driven Derived Metrics","0acc1c28":"<font color=blue>There are columns which have constant values, we will exclude such columns around 9.<\/font>","99f52a9d":"<font color=blue>Charged Off % for each variable is as seen below:-<br \/> It is highest for Loan issued in month of \"May & Dec\" with charge off rate: around 15-16% <br \/>It is highest for no of delinquency in last 2 years with value 7 seen with highest charge off rate i.e. 50%<br \/>No of inquiries with value 6 & 7 seen with highest charge off rate around 24-28%  <br \/> No of month since last delinquency with range 80-100 seen with highest charge off rate around 21% i.e. Applicant may not pay loan after showing decent behavior for few months after failing to pay EMI <br \/><\/font>","8868ddf9":"### Annual Income","6b41dd7d":"<font color=blue>The number of borrowers with annual income range 40000-60000 are the highest around 11500.<\/font>","886a7a80":"### Loan Status\n\n\n<br \/><font color=blue>Target variable is Loan Status as it has information about loan paid, current and Charged Off(default).<\/font>","0d57e053":"<font color=blue>More number of borrowers have home ownership as RENT and the count of borrowers with home ownership as RENT and who default is also highest around 2688. <\/font>","26201f37":"### Loan Status for loan_amnt, annual_inc, installment and int_rate","2f5ea2d1":"### Lets calculate the Charge Off % for Borrowers characteristics:\n#### Basic characteristics like:\n##### Home ownership type\n##### Length of employment\n##### Addr state\n##### Purpose of loan\n##### Annual Income","42f5a915":"### Installment","03f0f8f2":"<font color=blue>If we inspect the data closely columns: ID, member_id, url, desc are of not much use. Even Zip_code is having xx characters so we will remove all these columns<\/font>","cc13396a":"<font color=blue>The distribution plot shows us the skewness towards the right.<br \/> The Installment amount spread is around 263 (i.e. IQR, interquartile difference).<br \/>Outliers are 3.5 * IQR<\/font>","da42980d":"### Loan Status distribution by Addr State","7ffd15d7":"### Create bins for number of months since the borrower's last delinquency","41e23292":"<font color=blue>Most number of borrowers are charged 11% interest rate<\/font>","6780a727":"<font color=blue>We see the encoding is utf-8 using the chardet library so we will continue to use it for our analysis<\/font>","1362c961":"<font color=blue>Also total_pymnt is sum of total_rec_prncp, total_rec_int, total_rec_late_fee and recoveries. So we can remove the 4 columns and keep total_pymt<\/font>","2e6ab897":"### Emp Length","8e859690":"<font color=blue>The number of borrowers with Installment range 200-400 are the highest around 38%.<\/font>","f6844415":" # Part 4: Univariate analysis on Categorical variables","d73642ec":"We will analyse the categorical variables Loan Status , Term, Home Ownership, Emp Length, Purpose and Address State, Verification Status.","623a99c3":"### Business Derived Metric: Monthly InHand Savings\n### Lets calculate: Monthly InHand Savings available for person after all EMIs deducted from monthly salary\n### Monthly InHand Savings Available to applicant after deductions = dti * monthly Salary \/100\n\n","e0095cac":"# Summary","7fbb79b9":"<font color=blue>In the loan dataset we see there are 39717 observations and 111 variables.<\/font>","94e0ea2d":"### Lets calculate the Charge Off % for Lenders parameters\n#### Characteristics like:\n##### Verification Status\n##### Term of loan\n##### Grade\n##### dti\n##### Interest Rate\n##### Loan Amount"}}