{"cell_type":{"595a276b":"code","bdadf6de":"code","e97ad239":"code","23cbcaf7":"code","d1f3c58a":"code","a3492b78":"code","8b9e60f3":"code","28557aff":"code","5d86ef7e":"code","5d62287a":"code","49144a77":"code","098ae0b2":"code","171c5467":"code","eb20dbf2":"code","07039fa7":"code","1fbac38e":"code","b9a053a1":"code","fd2169bc":"code","eeb8cad2":"code","b9b421f8":"code","d5bb0573":"code","46dac954":"code","1aea903b":"code","2f8c0450":"code","d42bf337":"code","0ebb9a5d":"code","e4487cb1":"code","e52fa393":"code","9178b868":"code","213e3831":"code","5ed3165f":"code","55b1a7d1":"code","ec9c8bd2":"code","4b6e0778":"markdown","2ed15089":"markdown"},"source":{"595a276b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bdadf6de":"import matplotlib.pyplot as plt\nimport pandas_datareader.data as web\n# collect data for Amazon from 2017-04-22 to 2018-04-22\nstart = '2004-08-19'\nend = '2020-11-25'\ndf = web.DataReader(name='GOOG', data_source='yahoo', start=start, end=end)\n","e97ad239":"import pandas as pd\ndf = pd.DataFrame(df)\ndf = df.reset_index()","23cbcaf7":"df.head()","d1f3c58a":"df.tail()","a3492b78":"#Splitting Data into Training and Testing\n#Training Data Would Be From 19-08-2004 to 31-12-2018 \ndf_train = df[df['Date']<'2019-1-1'].copy()\ndf_train","8b9e60f3":"#test data\ndf_test = df[df['Date']>='2019-01-01'].copy()\ndf_test","28557aff":"df_train = df_train.drop(['Date','Adj Close'],axis=1)\ndf_train.head()","5d86ef7e":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndf_train = scaler.fit_transform(df_train)\ndf_train","5d62287a":"df_train.shape[0]","49144a77":"x_train=[]\ny_train=[]\nfor i in range(60,df_train.shape[0]):\n    x_train.append(df_train[i-60:i])\n    y_train.append(df_train[i,0])","098ae0b2":"x_train,y_train = np.array(x_train),np.array(y_train)","171c5467":"x_train.shape,y_train.shape","eb20dbf2":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense , LSTM , Dropout","07039fa7":"regressor = Sequential()\nregressor.add(LSTM(units=60,activation='relu',return_sequences=True,input_shape=(x_train.shape[1],5)))\nregressor.add(Dropout(0.2))\nregressor.add(LSTM(units=60,activation='relu',return_sequences=True))\nregressor.add(Dropout(0.2))\nregressor.add(LSTM(units=80,activation='relu',return_sequences=True))\nregressor.add(Dropout(0.2))\nregressor.add(LSTM(units=120,activation='relu'))\nregressor.add(Dropout(0.2))\nregressor.add(Dense(units=1))\n\n\n","1fbac38e":"regressor.summary()","b9a053a1":"regressor.compile(optimizer='adam',loss='mean_squared_error')","fd2169bc":"regressor.fit(x_train,y_train,epochs=10,batch_size=32)","eeb8cad2":"df_test.head()","b9b421f8":"df_test.tail(60)","d5bb0573":"past_60_days = df_test.tail(60)","46dac954":"df_60 = past_60_days.append(df_test,ignore_index=True)\ndf_60 = df_60.drop(['Date','Adj Close'],axis=1)\ndf_60.head()","1aea903b":"inputs = scaler.transform(df_60)","2f8c0450":"inputs","d42bf337":"x_test = []\ny_test = []\nfor i in range(60,inputs.shape[0]):\n    x_test.append(inputs[i-60:i])\n    y_test.append(inputs[i,0])","0ebb9a5d":"x_test,y_test=np.array(x_test),np.array(y_test)\nx_test.shape,y_test.shape","e4487cb1":"y_pred = regressor.predict(x_test)","e52fa393":"scaler.scale_","9178b868":"scale = 1\/8.17521128e-04","213e3831":"y_pred = y_pred*scale\ny_test = y_test*scale","5ed3165f":"y_pred","55b1a7d1":"# Visualising the results\nplt.figure(figsize=(14,5))\nplt.plot(y_test, color = 'red', label = 'Real Google Stock Price')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","ec9c8bd2":"from sklearn.metrics import r2_score\nr2_score(y_test,y_pred)","4b6e0778":"# PREPARE TEST DATA SET","2ed15089":"# BUILDING LSTM"}}