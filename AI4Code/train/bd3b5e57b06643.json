{"cell_type":{"227cfd41":"code","ac6293f5":"code","1f9be96d":"code","40b59f38":"code","658036c8":"code","eecea7f9":"code","1351d52b":"code","11c7f9aa":"code","c09861bb":"code","a62ee7f5":"code","ffbdfd01":"code","113b8bd2":"code","04724d67":"code","d1db867a":"code","602df09c":"code","8805281e":"code","3ca868ea":"code","bdc61312":"code","5ee7cb5d":"code","37745403":"code","d9293c16":"code","54377428":"code","40dc44f9":"code","42b38de6":"code","1f404fee":"code","0e8d6bbc":"code","6d610463":"code","77939b19":"code","1ae5ec28":"code","c1fc538d":"code","a99caf27":"code","712953ab":"code","6c8cd82e":"code","cc8073f2":"code","c93e6f04":"code","cf81a0d0":"code","d921fa46":"markdown","b08bd71a":"markdown","6be9d909":"markdown","63135ec0":"markdown","77357ec7":"markdown","5ef53bab":"markdown","d2225da5":"markdown"},"source":{"227cfd41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n# Any results you write to the current directory are saved as output.","ac6293f5":"import glob\ntrain_arr = []\nfor file in glob.glob(\"..\/input\/train\/train\/*\/*\"):\n    train_arr.append({\"name\": file, \"label\": file.split(\"\/\")[-2]})\ndf = pd.DataFrame(train_arr)","1f9be96d":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True)\nimport matplotlib.cm as cm\nimport re","40b59f38":"iplot([go.Bar(\nx=df[\"label\"].value_counts().keys(),\ny=df[\"label\"].value_counts())])","658036c8":"!pip install imagesize","eecea7f9":"import imagesize\ndf[\"width\"] = 0\ndf[\"height\"] = 0\ndf[\"aspect_ratio\"] = 0.0\nfor idx, row in df.iterrows():\n    width, height = imagesize.get(row[\"name\"])\n    df.at[idx, \"width\"] = width\n    df.at[idx, \"height\"] = height\n    df.at[idx, \"aspect_ratio\"] = float(height) \/ float(width)","1351d52b":"df.head()","11c7f9aa":"df[\"height\"].hist()","c09861bb":"df[\"width\"].hist()","a62ee7f5":"df[\"aspect_ratio\"].hist()","ffbdfd01":"from fastai.vision import *","113b8bd2":"work_dir = Path('\/kaggle\/working\/')\n","04724d67":"path = Path(\"..\/input\")\ntfms = get_transforms()\ndata = ImageDataBunch.from_folder(path\/\"train\",valid_pct=0.1, ds_tfms=tfms, size=224,bs=64,seed=42)","d1db867a":"data.add_test(ImageList.from_folder(path=path\/\"test\/test\"))","602df09c":"data.normalize(imagenet_stats)","8805281e":"print(data.valid_ds)\nprint(\"...\")\nprint(data.train_ds)\nprint(\"...\")\nprint(data.test_ds)","3ca868ea":"data.show_batch(rows=3, figsize=(5,5))","bdc61312":"# df.head()","5ee7cb5d":"# data = ImageDataBunch.from_df(\"\", df=df[[\"name\", \"label\"]], label_col=\"label\", folder=\"\", size=64)","37745403":"# data.show_batch(rows=3, figsize=(5,5))","d9293c16":"learn = cnn_learner(data, models.resnet34, metrics=[accuracy],model_dir=\"\/tmp\/model\/\")","54377428":"learn.fit_one_cycle(4)","40dc44f9":"learn.lr_find()\n","42b38de6":"learn.recorder.plot()","1f404fee":"learn.unfreeze()\nlearn.fit_one_cycle(4, max_lr=slice(1e-6,1e-2))","0e8d6bbc":"learn.save('stage-2')","6d610463":"interp = ClassificationInterpretation.from_learner(learn)","77939b19":"interp.plot_confusion_matrix(figsize=(25,25))","1ae5ec28":"interp.plot_top_losses(9, figsize=(25,25))","c1fc538d":"interp.most_confused()","a99caf27":"test_probs, _ = learn.get_preds(ds_type=DatasetType.Test)\n","712953ab":"test_preds = [data.classes[pred] for pred in np.argmax(test_probs.numpy(), axis=-1)]","6c8cd82e":"test_df = pd.read_csv(f\"..\/input\/sample_submission.csv\")","cc8073f2":"fnames = [f.name[:-4] for f in learn.data.test_ds.items]\ndf = pd.DataFrame({'id':fnames, 'predicted_class':test_preds}, columns=['id', 'predicted_class'])\ndf['id'] = df['id'].astype(str) + '.jpg'\ndf.to_csv('submission-f.csv', index=False)","c93e6f04":"test_df.predicted_class = test_preds\ntest_df.to_csv(work_dir\/\"submission.csv\", index=False)","cf81a0d0":"# import the modules we'll need\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"submission.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\n# create a random sample dataframe\n\n# create a link to download the dataframe\ncreate_download_link(df)\n\n# \u2193 \u2193 \u2193  Yay, download link! \u2193 \u2193 \u2193 \n","d921fa46":"<h3> \nApproach of data loading #2 ImageDataBunch.from_df<h3>","b08bd71a":"In this kernel, we will try to first create a pandas dataframe from the given dataset present as image files and then use it to feed into the training model.","6be9d909":"**Let's inspect the distribution of classes**","63135ec0":"<h3> Using fastai's ClassificationInterpretation to analyze the training results <\/h3>","77357ec7":"Since all the images are not of same aspect ratio, it will be important to decide how we crop\/scale the images while applying augmentations","5ef53bab":"Let's also see the width\/height and aspect ratio for the images.","d2225da5":"<h3> \nApproach of data loading #1 ImageDataBunch.from_folder<h3>"}}