{"cell_type":{"4185f429":"code","f9776cc2":"code","65d05280":"code","b7f362e6":"code","3eaf8a9e":"code","6504f3ef":"code","a995d413":"code","d5271754":"code","83304c00":"code","aefba082":"code","7f4415a7":"code","8b702311":"code","05e67d42":"code","77a30f0f":"code","ed3845f2":"code","d493d5e1":"code","edd9e936":"code","166a68e5":"code","2cd5aac1":"code","50c975da":"code","9b7dcd35":"code","b6ced505":"code","09deb9ae":"code","18855a20":"code","38331b5c":"code","d80dba02":"code","5705d6e3":"code","879c8b78":"code","7cb5023d":"code","9959d40a":"code","738679cd":"code","0e01c19c":"code","77f36d05":"code","ced537be":"code","7989555d":"code","a043a245":"code","9c5e137a":"code","7ddf697a":"code","074a409c":"code","b7b25920":"code","da30bb7b":"code","4971f21b":"code","043be90f":"code","7a567fd3":"code","a76b0d97":"code","ef63500a":"code","fb859307":"code","085159a5":"code","98cb76dc":"code","4a79c41f":"code","553d2817":"code","97e504b2":"code","475e95b6":"code","038e7733":"code","aaeed24a":"code","d1d4eb88":"code","f8a763f8":"code","55da4dec":"code","784caeb6":"code","1d32c506":"code","36153e3c":"code","272672fe":"code","748b4dc1":"code","3df8f6f3":"code","0255005c":"code","7f8650a5":"code","ae544635":"code","d8944d8b":"code","32bb31f5":"code","fc6291a2":"code","7fff15c9":"code","cdaa1f5f":"code","8f2356d8":"code","f7aed15a":"code","c63479d2":"code","722cd634":"code","4164c096":"code","a6cc4420":"code","abe32871":"code","0591c07e":"code","7f8b8f47":"code","bd186262":"code","d0f46764":"code","125e844f":"code","14a07fa6":"code","684d81ce":"markdown","606a385d":"markdown","582ddfe2":"markdown","6d82f7fe":"markdown","98402301":"markdown","ac3b3c57":"markdown","86a45f0a":"markdown","5cdeb03b":"markdown","527f06ab":"markdown","b55f4e4d":"markdown","683aa3ea":"markdown","a4c2cf90":"markdown","6081e184":"markdown","5438c71c":"markdown","57081d5a":"markdown","a24f90b1":"markdown","62fe0f15":"markdown","7362a7f4":"markdown","7b2b4e6d":"markdown","78c41e35":"markdown","6d269c20":"markdown","9fb4f718":"markdown","78f62baa":"markdown","4e7b0eb0":"markdown","6a3996a3":"markdown","17d550e6":"markdown","c56124af":"markdown","07da1221":"markdown","cd1b3b20":"markdown","27685dd8":"markdown","80ca24c8":"markdown","4c1c4c41":"markdown","19b9dbf7":"markdown","68091602":"markdown","ebdb1686":"markdown","e66e7b55":"markdown","0703ba4a":"markdown","610d9a8e":"markdown","119379b5":"markdown","570d415b":"markdown","22550907":"markdown","f6fcdc34":"markdown","139538b5":"markdown","8f9b3088":"markdown","d63a33ad":"markdown","7a5c6b9c":"markdown","b20b730b":"markdown","4fcc8d65":"markdown","6d8a6e0d":"markdown","88361b48":"markdown","37ec7626":"markdown","9f75757d":"markdown","4be62ac5":"markdown","4a1b2b78":"markdown","3d979d07":"markdown","a22a08cd":"markdown","216f3ac1":"markdown","fd673f09":"markdown","5adb4ecf":"markdown","445893ed":"markdown","374f57c9":"markdown","6851a451":"markdown","50cf7564":"markdown","5025ac4d":"markdown","7f2a1546":"markdown","a0879fa6":"markdown","f46187a6":"markdown","eabea037":"markdown","9cbca680":"markdown","2fbff96a":"markdown","3a4850e1":"markdown","f8978327":"markdown","879327bd":"markdown","32cb302e":"markdown","8e1d5b38":"markdown","a0532b00":"markdown","7ae8cbeb":"markdown","949461d4":"markdown","b00111bb":"markdown","97d4e868":"markdown","ed414f3c":"markdown","87618a59":"markdown","31ce9ae3":"markdown","f4eeed68":"markdown","1a575fb2":"markdown","e33462e6":"markdown","6c1a7ffb":"markdown","950f053d":"markdown","37e901f4":"markdown","a8ad2d19":"markdown","22464f5f":"markdown","567dc688":"markdown","9246ea96":"markdown"},"source":{"4185f429":"# import necessary libraries\n\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.feature_selection import chi2, SelectKBest\nfrom scipy.stats import chi2_contingency\nfrom itertools import product\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.ticker as ticker","f9776cc2":"raw_titanic_train = pd.read_csv(\"..\/input\/titanic\/train.csv\") #read the training data csv into a dataframe (titanic_train)\ntitanic_train = raw_titanic_train.copy()\ndisplay(titanic_train.head()) #read first 5 entries\ndisplay(titanic_train.tail()) #read last 5 entries\ndisplay(titanic_train.sample(5)) #read any 5 entries","65d05280":"raw_titanic_test = pd.read_csv(\"..\/input\/titanic\/test.csv\") #read the testing data csv into a dataframe (\"titanic_test\")\ntitanic_test = raw_titanic_test.copy()\ndisplay(titanic_test.head()) #read first 5 entries\ndisplay(titanic_test.tail()) #read last 5 entries\ndisplay(titanic_test.sample(5)) #read last 5 entries","b7f362e6":"print(\"titanic_train dataset has \" + str(titanic_train.shape[1]) + \" variables and \" + str(titanic_train.shape[0]) + \" rows\")\nprint(\"titanic_test dataset has \" + str(titanic_test.shape[1]) + \" variables and \" + str(titanic_test.shape[0]) + \" rows\\n\")\n\nprint(\"titanic_test has 1 variable lesser than titanic_train because it does not have \\\"Survived\\\".\")","3eaf8a9e":"# Remove \"PassengerId\" for titanic_train\ntitanic_train.drop(\"PassengerId\", axis=1, inplace=True)\n# The \"PassengerId\" columns of titanic_test is not removed because it will be needed when doing submission.\n\n# Remove \"Ticket\" for both titanic_train and titanic_test\ntitanic_train.drop(\"Ticket\", axis=1, inplace=True)\ntitanic_test.drop(\"Ticket\", axis=1, inplace=True)\n\n# Remove \"Name\" for both titanic_train and titanic_test\ntitanic_train.drop(\"Name\", axis=1, inplace=True)\ntitanic_test.drop(\"Name\", axis=1, inplace=True)\n\n# New datasets for both training and testing\nprint(\"New Training Dataset:\\n\", titanic_train.sample(10))\nprint(\"New Test Dataset:\\n\", titanic_test.sample(10))","6504f3ef":"print(\"titanic_train dataset has \" + str(titanic_train.shape[1]) + \" variables and \" + str(titanic_train.shape[0]) + \" rows\")\nprint(\"titanic_test dataset has \" + str(titanic_test.shape[1]) + \" variables and \" + str(titanic_test.shape[0]) + \" rows\\n\")","a995d413":"mv_count = []\nmv_percentage = []\n\nfor var in titanic_train.columns:\n    \n    mv_count.append(titanic_train[var].isnull().sum())\n    mv_percentage.append(((titanic_train[var].isnull().values.sum()\/len(titanic_train))*100).round(decimals = 2))\n\ndisplay(\"titanic_train\")\nmissing_value = pd.DataFrame()\nmissing_value[\"Variable\"] = titanic_train.columns\nmissing_value[\"Missing Value (Count)\"] = mv_count\nmissing_value[\"Missing Value (%)\"] = mv_percentage\n\ndisplay(missing_value)\n\ndel missing_value\n\nmv_count = []\nmv_percentage = []\n\nfor var in titanic_test.columns:\n    \n    mv_count.append(titanic_test[var].isnull().sum())\n    mv_percentage.append(((titanic_test[var].isnull().values.sum()\/len(titanic_test))*100).round(decimals = 2))\n\ndisplay(\"titanic_test\")\nmissing_value = pd.DataFrame()\nmissing_value[\"Variable\"] = titanic_test.columns\nmissing_value[\"Missing Value (Count)\"] = mv_count\nmissing_value[\"Missing Value (%)\"] = mv_percentage\n\ndisplay(missing_value)","d5271754":"# Remove variable \"Cabin\" from both titanic_train and titanic_test\n\ntitanic_train.drop(\"Cabin\", axis = 1, inplace = True)\ntitanic_test.drop(\"Cabin\", axis = 1, inplace = True)","83304c00":"for x in [titanic_train, titanic_test]: #loop through titanic_train and titanic_test\n    for y in x.columns:\n        if (x[y]).dtype == object:\n            x[y].fillna(list(x[y].mode())[0], inplace = True) # mode imputation for categorical data (dtype = object)\n        else:\n            x[y].fillna(x[y].mean(), inplace = True) # mean imputation for all the other data other than categorical data","aefba082":"print(\"titanic_train dataset has \" + str(titanic_train.shape[1]) + \" variables and \" + str(titanic_train.shape[0]) + \" rows\")\nprint(\"titanic_test dataset has \" + str(titanic_test.shape[1]) + \" variables and \" + str(titanic_test.shape[0]) + \" rows\\n\")","7f4415a7":"## DOUBLE CHECK\n\nmv_count = []\nmv_percentage = []\n\nfor var in titanic_train.columns:\n    \n    mv_count.append(titanic_train[var].isnull().sum())\n    mv_percentage.append(((titanic_train[var].isnull().values.sum()\/len(titanic_train))*100).round(decimals = 2))\n\ndisplay(\"titanic_train\")\nmissing_value = pd.DataFrame()\nmissing_value[\"Variable\"] = titanic_train.columns\nmissing_value[\"Missing Value (Count)\"] = mv_count\nmissing_value[\"Missing Value (%)\"] = mv_percentage\n\ndisplay(missing_value)\nprint(\"titanic_train dataset has \" + str(titanic_train.shape[1]) + \" variables and \" + str(titanic_train.shape[0]) + \" rows\")\n\ndel missing_value\n\nmv_count = []\nmv_percentage = []\n\nfor var in titanic_test.columns:\n    \n    mv_count.append(titanic_test[var].isnull().sum())\n    mv_percentage.append(((titanic_test[var].isnull().values.sum()\/len(titanic_test))*100).round(decimals = 2))\n\ndisplay(\"titanic_test\")\nmissing_value = pd.DataFrame()\nmissing_value[\"Variable\"] = titanic_test.columns\nmissing_value[\"Missing Value (Count)\"] = mv_count\nmissing_value[\"Missing Value (%)\"] = mv_percentage\n\ndisplay(missing_value)\nprint(\"titanic_test dataset has \" + str(titanic_test.shape[1]) + \" variables and \" + str(titanic_test.shape[0]) + \" rows\\n\")","8b702311":"print(\"-----titanic_train-----\")\ndisplay(titanic_train.info())\n\nprint(\"-----titanic_test-----\")\ndisplay(titanic_test.info())","05e67d42":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize = (20, 8))\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\n# titanic_train\n\nax1 = sns.countplot(x = \"Pclass\", data = titanic_train, ax = ax1)\n\ntotal = len(titanic_train)\n\nfor p in ax1.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x+0.1, y), ha='center', va='center')   \n    ax1.annotate(count, (x-0.1, y), ha='center', va='center')   \n    \n\n# titanic_test\n\nax2 = sns.countplot(x = \"Pclass\", data = titanic_test, ax = ax2)\n\ntotal = len(titanic_test)\n\nfor p in ax2.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x+0.1, y), ha='center', va='center')   \n    ax2.annotate(count, (x-0.1, y), ha='center', va='center')   ","77a30f0f":"pclass_table2 = pd.DataFrame()\npclass_table2[\"Pclass\"] = [1, 2, 3]\n\nsurvived = []\nnon_survived = []\ntotal = []\n\nfor x in [1, 2, 3]:\n    survived.append((titanic_train[\"Pclass\"][(titanic_train[\"Pclass\"] == x) & (titanic_train[\"Survived\"] == 1)]).count())\n    non_survived.append((titanic_train[\"Pclass\"][(titanic_train[\"Pclass\"] == x) & (titanic_train[\"Survived\"] == 0)]).count())\n    total.append(titanic_train[\"Pclass\"][titanic_train[\"Pclass\"] == x].count())\n\npclass_table2[\"Total\"] = total\npclass_table2[\"Survived\"] = survived\npclass_table2[\"Not Survived\"] = non_survived\npclass_table2[\"Percentage of Survived in the Pclass\"] = round(((pclass_table2[\"Survived\"]\/pclass_table2[\"Total\"])*100) ,2).astype(\"str\") + \"%\"\n\npclass_table2.style.hide_index()","ed3845f2":"pclass_table2[[\"Pclass\", \"Survived\", \"Not Survived\"]].set_index(\"Pclass\").plot(kind='bar', stacked=True, color=['Green', 'red'])","d493d5e1":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize = (20, 8))\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\n# titanic_train\n\nax1 = sns.countplot(x=\"Pclass\", hue=\"Sex\",\n            data=titanic_train, ax = ax1);\n\ntotal = len(titanic_train)\n\nfor p in ax1.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax1.annotate(count, (x-0.1, y), ha='center', va='center')\n\n\n# titanic_test\n\nax2 = sns.countplot(x=\"Pclass\", hue=\"Sex\",\n            data=titanic_test, ax = ax2);\n\ntotal = len(titanic_test)\n\nfor p in ax2.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax2.annotate(count, (x-0.1, y), ha='center', va='center')","edd9e936":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize = (20, 8))\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\nsns.boxplot(data=titanic_train, x=\"Pclass\", y=\"Age\", ax = ax1)\nsns.boxplot(data=titanic_test, x=\"Pclass\", y=\"Age\", ax = ax2)","166a68e5":"print(\"Average Age for each Pclass (titanic_train):\")\ndisplay(titanic_train.groupby(\"Pclass\").mean()[\"Age\"])\n\nprint(\"Average Age for each Pclass (titanic_test):\")\ndisplay(titanic_test.groupby(\"Pclass\").mean()[\"Age\"])","2cd5aac1":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize = (20, 8))\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\nax1 = sns.countplot(data = titanic_train, x = \"Pclass\", hue = \"SibSp\", ax = ax1)\nax2 = sns.countplot(data = titanic_test, x = \"Pclass\", hue = \"SibSp\", ax = ax2)\n\ntotal = len(titanic_train)\n\nfor p in ax1.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax1.annotate(count, (x-0.1, y), ha='center', va='center')\n    \ntotal = len(titanic_test)\n\nfor p in ax2.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax2.annotate(count, (x-0.1, y), ha='center', va='center')","50c975da":"display(titanic_train.groupby([\"Pclass\", \"SibSp\"]).describe()['Survived'].iloc[:, :1])\ndisplay(titanic_test.groupby([\"Pclass\", \"SibSp\"]).describe()['Age'].iloc[:, :1])","9b7dcd35":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize = (20, 8))\n\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\nax1 = sns.countplot(data = titanic_train, x = \"Pclass\", hue = \"Parch\", ax = ax1)\nax2 = sns.countplot(data = titanic_test, x = \"Pclass\", hue = \"Parch\", ax = ax2)\n\ntotal = len(titanic_train)\n\nfor p in ax1.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax1.annotate(count, (x-0.1, y), ha='center', va='center')\n    \ntotal = len(titanic_test)\n\nfor p in ax2.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax2.annotate(count, (x-0.1, y), ha='center', va='center')","b6ced505":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize = (20, 8))\n\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\nax1 = sns.boxplot(data = titanic_train, y = \"Fare\", x = \"Pclass\", ax = ax1)\nax2 = sns.boxplot(data = titanic_test, y = \"Fare\", x = \"Pclass\", ax = ax2)","09deb9ae":"print(\"titanic_train:\")\ndisplay(titanic_train.groupby(\"Pclass\")[\"Fare\"].describe())\n\nprint(\"titanic_test:\")\ndisplay(titanic_test.groupby(\"Pclass\")[\"Fare\"].describe())","18855a20":"fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize = (20, 8))\n\nax1.set_xticks(range(1,4))\nax1.set_xticklabels([1, 2, 3])\nax1.set_title('Fare (titanic_train)')\nax1 = sns.lineplot(x = titanic_train.groupby(\"Pclass\")[\"Fare\"].mean().index, y = titanic_train.groupby(\"Pclass\")[\"Fare\"].describe()['mean'], ax = ax1);\n\nax2.set_xticks(range(1,4))\nax2.set_xticklabels([1, 2, 3])\nax2.set_title('Fare (titanic_test)')\nax2 = sns.lineplot(x = titanic_test.groupby(\"Pclass\")[\"Fare\"].mean().index, y = titanic_test.groupby(\"Pclass\")[\"Fare\"].describe()['mean'], ax = ax2);","38331b5c":"print(\"titanic_train:\")\ndisplay(titanic_train[titanic_train[\"Fare\"] == 0])\n\nprint(\"titanic_test:\")\ndisplay(titanic_test[titanic_test[\"Fare\"] == 0])","d80dba02":"# Removing the cases with Fare == 0 in titanic_train\n# titanic_train.drop(titanic_train[titanic_train[\"Fare\"] == 0].index, inplace = True)\n\n# Removing the cases with Fare == 0 in titanic_test\n#titanic_test.drop(titanic_test[titanic_test[\"Fare\"] == 0].index, inplace = True)","5705d6e3":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize = (20, 8))\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\nax1 = sns.countplot(data = titanic_train, x = \"Pclass\", hue = \"Embarked\", hue_order = (\"S\", \"Q\", \"C\"), ax = ax1)\n\ntotal = len(titanic_train)\n    \nfor p in ax1.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax1.annotate(count, (x-0.1, y), ha='center', va='center')\n    \nax2 = sns.countplot(data = titanic_test, x = \"Pclass\", hue = \"Embarked\", hue_order = (\"S\", \"Q\", \"C\"), ax = ax2)\n\ntotal = len(titanic_test)\n    \nfor p in ax2.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax2.annotate(count, (x-0.1, y), ha='center', va='center')","879c8b78":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize = (20, 8))\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\nax1 = sns.countplot(data = titanic_train, x = \"Sex\", ax = ax1)\n\ntotal = len(titanic_train)\n    \nfor p in ax1.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x, y), ha='center', va='center')\n    \nax2 = sns.countplot(data = titanic_test, x = \"Sex\", ax = ax2)\n\ntotal = len(titanic_test)\n    \nfor p in ax2.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x, y), ha='center', va='center')","7cb5023d":"fig, ((ax1, ax2)) = plt.subplots(1, 2,figsize = (20, 8))\nax1.set_title('titanic_train (Survived = 0)')\nax2.set_title('titanic_train (Survived = 1)')\n\nax1 = sns.countplot(data = titanic_train[titanic_train[\"Survived\"] == 0], x = \"Sex\", order = (\"male\", \"female\"), ax = ax1)\n\ntotal = len(titanic_train[titanic_train[\"Survived\"] == 0])\n\nfor p in ax1.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.1f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax1.annotate(count, (x-0.1, y), ha='center', va='center')\n    \nax2 = sns.countplot(data = titanic_train[titanic_train[\"Survived\"] == 1], x = \"Sex\", order = (\"male\", \"female\"), ax = ax2)\n\ntotal = len(titanic_train[titanic_train[\"Survived\"] == 1])\n\nfor p in ax2.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.1f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax2.annotate(count, (x-0.1, y), ha='center', va='center')    ","9959d40a":"fig, ((ax1, ax2)) = plt.subplots(1, 2,figsize = (20, 8))\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\nsns.boxplot(data = titanic_train, x = \"Sex\", y = \"Age\", ax = ax1)\nsns.boxplot(data = titanic_test, x = \"Sex\", y = \"Age\", ax = ax2)","738679cd":"print(\"titanic_train:\")\ndisplay(titanic_train.groupby(\"Sex\").describe()[\"Age\"])\n\nprint(\"titanic_test:\")\ndisplay(titanic_test.groupby(\"Sex\").describe()[\"Age\"])","0e01c19c":"fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize = (20 ,8))\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\n# titanic_train\nsns.countplot(data = titanic_train, x = \"Sex\", hue = \"SibSp\", ax = ax1)\n\ntotal = len(titanic_train)\n    \nfor p in ax1.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.1f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax1.annotate(count, (x-0.1, y), ha='center', va='center')\n    \n# titanic_test\nsns.countplot(data = titanic_test, x = \"Sex\", hue = \"SibSp\", ax = ax2)\n\ntotal = len(titanic_test)\n    \nfor p in ax2.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.1f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax2.annotate(count, (x-0.1, y), ha='center', va='center')\n\nplt.legend(loc='upper right', title='Sex')","77f36d05":"fig, ((ax1, ax2)) = plt.subplots(1,2, figsize = (20, 8))\nax1.set_title(\"titanic_train\")\nax2.set_title(\"titanic_test\")\n\n# titanic_train \nsns.countplot(data = titanic_train, x = \"Sex\", hue = \"Parch\", ax = ax1)\n\ntotal = len(titanic_train)\n    \nfor p in ax1.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.0f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x + 0.1, y), ha='center', va='center')\n    ax1.annotate(count, (x - 0.1, y), ha='center', va='center')\n    \n# titanic_test\nsns.countplot(data = titanic_test, x = \"Sex\", hue = \"Parch\", ax = ax2)\n\ntotal = len(titanic_test)\n    \nfor p in ax2.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.0f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x + 0.1, y), ha='center', va='center')\n    ax2.annotate(count, (x - 0.1, y), ha='center', va='center')\n    \nplt.legend(loc='upper right', title='Parch')","ced537be":"fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize = (20, 8))\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\nax1 = sns.boxplot(data = titanic_train, x = \"Sex\", y = \"Fare\", ax = ax1)\nax2 = sns.boxplot(data = titanic_test, x = \"Sex\", y = \"Fare\", ax = ax2)","7989555d":"print('titanic_train:')\ndisplay(titanic_train.groupby(\"Sex\")[\"Fare\"].describe())\n\nprint('titanic_test:')\ndisplay(titanic_test.groupby(\"Sex\")[\"Fare\"].describe())","a043a245":"fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize = (20, 15))\nax1.set_title('titanic_train, Sex = male')\nax2.set_title('titanic_train, Sex = female')\nax3.set_title('titanic_test, Sex = male')\nax4.set_title('titanic_test, Sex = female')\n\n# titanic_train, Sex = male\nsns.countplot(data = titanic_train[titanic_train[\"Sex\"] == \"male\"], x = \"Embarked\", order = (\"S\", \"Q\", \"C\"), ax = ax1)\n\ntotal = len(titanic_train[titanic_train[\"Sex\"] == \"male\"])\n    \nfor p in ax1.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.0f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x + 0.1, y), ha='center', va='center')\n    ax1.annotate(count, (x - 0.1, y), ha='center', va='center')\n\n# titanic_train, Sex = female\nsns.countplot(data = titanic_train[titanic_train[\"Sex\"] == \"female\"], x = \"Embarked\", order = (\"S\", \"Q\", \"C\"), ax = ax2)\n\ntotal = len(titanic_train[titanic_train[\"Sex\"] == \"female\"])\n    \nfor p in ax2.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.0f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x + 0.1, y), ha='center', va='center')\n    ax2.annotate(count, (x - 0.1, y), ha='center', va='center')\n    \n# titanic_test, Sex = male\nsns.countplot(data = titanic_test[titanic_test[\"Sex\"] == \"male\"], x = \"Embarked\", order = (\"S\", \"Q\", \"C\"), ax = ax3)\n\ntotal = len(titanic_test[titanic_test[\"Sex\"] == \"male\"])\n    \nfor p in ax3.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.0f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax3.annotate(percentage, (x + 0.1, y), ha='center', va='center')\n    ax3.annotate(count, (x - 0.1, y), ha='center', va='center')\n\n# titanic_test, Sex = female\nsns.countplot(data = titanic_test[titanic_test[\"Sex\"] == \"female\"], x = \"Embarked\", order = (\"S\", \"Q\", \"C\"), ax = ax4)\n\ntotal = len(titanic_test[titanic_test[\"Sex\"] == \"female\"])\n    \nfor p in ax4.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.0f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax4.annotate(percentage, (x + 0.1, y), ha='center', va='center')\n    ax4.annotate(count, (x - 0.1, y), ha='center', va='center')","9c5e137a":"fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize = (20, 8))\nax1.set_title(\"titanic_train\")\nax2.set_title(\"titanic_test\")\n\nsns.boxplot(data = titanic_train, y = \"Age\", ax = ax1)\nsns.boxplot(data = titanic_test, y = \"Age\", ax = ax2)","7ddf697a":"print(\"titanic_train:\")\ndisplay(titanic_train[\"Age\"].describe())\n\nprint(\"titanic_test:\")\ndisplay(titanic_test[\"Age\"].describe())","074a409c":"fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize = (20, 15), sharex=True, sharey=True)\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\n# titanic_train\nsns.histplot(x = titanic_train[\"Age\"], bins = 8, ax = ax1, stat = 'percent')\n\ntotal = 100\n\nfor p in ax1.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.0f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x + 4.5, y), ha='center', va='center')\n    ax1.annotate(count, (x - 4.5, y), ha='center', va='center')\n    \n# titanic_test\nsns.histplot(x = titanic_test[\"Age\"], bins = 8, ax = ax2, stat = 'percent')\n\ntotal = 100\n\nfor p in ax2.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height():.0f}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x + 4.5, y), ha='center', va='center')\n    ax2.annotate(count, (x - 4.5, y), ha='center', va='center')","b7b25920":"#titanic_train[\"Age\"].value_counts(bins = 8)","da30bb7b":"ax = sns.histplot(data = titanic_train, x = \"Age\", bins = 8, hue = \"Survived\", palette = \"Set1\")\n\ntotal = len(titanic_train)\n    \nfor p in ax.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x, y), ha='center', va='center')","4971f21b":"age_survived0 = pd.DataFrame()\nage_bins = titanic_train[\"Age\"].value_counts(bins = 8).index.sort_values()\n\nage_survived0.index = age_bins\n\nage_survived0[\"Total\"] = titanic_train[\"Age\"].value_counts(bins = age_bins)\nage_survived0[\"Survived\"] = titanic_train[\"Age\"][titanic_train[\"Survived\"] == 1].value_counts(bins = age_bins)\nage_survived0[\"Not Survived\"] = titanic_train[\"Age\"][titanic_train[\"Survived\"] == 0].value_counts(bins = age_bins)\nage_survived0[\"% of Survived in the Age Group\"] = round(age_survived0[\"Survived\"]*100\/titanic_train[\"Age\"].value_counts(bins = age_bins), 2).astype(\"str\") + \"%\"\n\nage_survived0","043be90f":"sns.displot(data = titanic_train, x = \"Age\", hue = \"Survived\", bins = 8, stat = \"percent\", kde = True,aspect=2, palette = \"Set1\").fig.set_dpi(100)","7a567fd3":"fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize = (20, 8))\nax1.set_title(\"titanic_train\")\nax2.set_title(\"titanic_test\")\n\nsns.boxplot(data = titanic_train, y = \"Age\", x = \"SibSp\", ax = ax1)\nsns.boxplot(data = titanic_test, y = \"Age\", x = \"SibSp\", ax = ax2)","a76b0d97":"print('titatic_train:')\ndisplay(titanic_train.groupby(\"SibSp\").describe()[\"Age\"])\n\nprint('titatic_test:')\ndisplay(titanic_test.groupby(\"SibSp\").describe()[\"Age\"])","ef63500a":"fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize = (20, 8))\nax1.set_title(\"titanic_train\")\nax2.set_title(\"titanic_test\")\n\nsns.boxplot(data = titanic_train, y = \"Age\", x = \"Parch\", ax = ax1)\nsns.boxplot(data = titanic_test, y = \"Age\", x = \"Parch\", ax = ax2)","fb859307":"print('titatic_train:')\ndisplay(titanic_train.groupby(\"Parch\").describe()[\"Age\"])\n\nprint('titatic_test:')\ndisplay(titanic_test.groupby(\"Parch\").describe()[\"Age\"])","085159a5":"fig, ax = plt.subplots(figsize = (20, 8))\nsns.scatterplot(data = titanic_train, x = \"Age\", y = \"Fare\")","98cb76dc":"fig, ax = plt.subplots(figsize = (20, 8))\nage_bin = pd.cut(titanic_train[\"Age\"], bins = 8)\nsns.boxplot(x = age_bin, y = titanic_train[\"Fare\"])","4a79c41f":"df1 = pd.DataFrame()\ndf1['age_bin'] = age_bin\ndf1['fare'] = titanic_train['Fare']\n\ndf1.groupby('age_bin').describe()","553d2817":"fig, ax = plt.subplots(figsize = (20, 8))\nsns.boxplot(data = titanic_train, x = \"Embarked\", y = \"Age\", order = ('S', 'Q', 'C'))","97e504b2":"titanic_train.groupby(\"Embarked\").describe()[\"Age\"]","475e95b6":"sns.countplot(data = titanic_train, x = 'SibSp')","038e7733":"fig, ax1 = plt.subplots(1, 1, figsize = (20, 8))\n\nax = sns.countplot(data = titanic_train, x = 'SibSp', hue = 'Survived', ax = ax1)\n\nnoSibSp = 0\n\nfor p in ax.patches:\n    \n    if noSibSp > 6:\n        noSibSp = 0\n    elif noSibSp == 6:\n        noSibSp = 8\n        \n    total = len(titanic_train[titanic_train['SibSp'] == noSibSp])\n    \n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x, y), ha='center', va='center')\n    \n    noSibSp = noSibSp + 1\n    \nplt.legend(loc='upper right', title='Survived')","aaeed24a":"fig, ax = plt.subplots(figsize = (20, 8))\nsns.countplot(data = titanic_train, x = \"SibSp\", hue = 'Parch')\nplt.legend(loc='upper right', title='Parch')\n\nnoSibSp = 0\n\nfor p in ax.patches:\n    \n    if noSibSp > 6:\n        noSibSp = 0\n    elif noSibSp == 6:\n        noSibSp = 8\n        \n    total = len(titanic_train[titanic_train['SibSp'] == noSibSp])\n    \n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x, y), ha='center', va='center')\n    \n    noSibSp = noSibSp + 1\n    \n#fig, ax = plt.subplots(figsize = (20, 8))\nsns.catplot(data = titanic_train, x = \"SibSp\", col = 'Parch', kind = 'count', ax = ax)\nplt.legend(loc='upper right', title='Parch')","d1d4eb88":"titanic_train.groupby(['SibSp', 'Parch']).describe()","f8a763f8":"fig, ax = plt.subplots(figsize = (10, 10))\n\nsns.boxplot(data = titanic_train, x = \"SibSp\", y = 'Fare')","55da4dec":"sns.lineplot(x = titanic_train.groupby('SibSp').describe()['Fare'].index, y = titanic_train.groupby('SibSp').describe()['Fare']['50%'])","784caeb6":"sns.lineplot(x = titanic_train.groupby('SibSp').describe()['Fare'].index, y = titanic_train.groupby('SibSp').describe()['Fare']['mean'])","1d32c506":"fig, ax = plt.subplots(figsize = (20, 8))\n\nax = sns.countplot(data = titanic_train, x = 'Parch')\n\ntotal = len(titanic_train)\n\nfor p in ax.patches:  \n    \n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x, y), ha='center', va='center')\n    \nfig, ax = plt.subplots(figsize = (20, 8))\n\nax = sns.countplot(data = titanic_test, x = 'Parch')\n\ntotal = len(titanic_test)\n\nfor p in ax.patches:  \n    \n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x, y), ha='center', va='center')","36153e3c":"fig, ax = plt.subplots(figsize = (20, 8))\n\nax = sns.countplot(data = titanic_train, x = 'Parch', hue = 'Survived')\n\nnoParch = 0\n\nfor p in ax.patches:\n    \n    if noParch > 6:\n        noParch = 0\n            \n    total = len(titanic_train[titanic_train['Parch'] == noParch])\n    \n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x, y), ha='center', va='center')\n    \n    noParch = noParch + 1\n    \nplt.legend(loc='upper right', title='Sex')","272672fe":"fig, ax = plt.subplots(figsize = (10, 10))\n\nsns.boxplot(data = titanic_train, x = \"Parch\", y = 'Fare')","748b4dc1":"titanic_train.groupby('Parch').describe()['Fare']","3df8f6f3":"sns.lineplot(x = titanic_train.groupby('Parch').mean()['Fare'].index, y = titanic_train.groupby('Parch').describe()['Fare'][\"50%\"])","0255005c":"fig, ax = plt.subplots(figsize = (20, 8))\nsns.countplot(data = titanic_train, x = 'Parch', hue = 'Embarked')\nplt.legend(loc = 'upper right', title = 'Embarked')\n\nnoParch = 0\n\nfor p in ax.patches:\n    \n    if noParch > 6:\n        noParch = 0\n            \n    total = len(titanic_train[titanic_train['Parch'] == noParch])\n    \n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x, y), ha='center', va='center')\n    \n    noParch = noParch + 1","7f8650a5":"fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize = (20, 8))\n\nax1.set_title('titanic_train')\nsns.boxplot(data = titanic_train, y = 'Fare', ax = ax1)\n\nax2.set_title('titanic_test')\nsns.boxplot(data = titanic_test, y = 'Fare', ax = ax2)","ae544635":"titanic_train[\"Fare\"].describe()","d8944d8b":"fig, ax = plt.subplots(figsize = (20 , 8))\nsns.boxplot(data = titanic_train, y = \"Fare\", x = 'Survived')","32bb31f5":"titanic_train.groupby(['Survived']).describe()['Fare']","fc6291a2":"sns.displot(data = titanic_train, x = \"Fare\", hue = \"Survived\", bins = 8, stat = \"percent\", kde = True,aspect=2, palette = \"Set1\").fig.set_dpi(100)","7fff15c9":"fig, ax = plt.subplots(figsize = (20 , 8))\nsns.boxplot(data = titanic_train, y = \"Fare\", x = 'Embarked', order = ('S', 'Q', 'C'))\n\nfig, ax = plt.subplots(figsize = (20 , 8))\nsns.boxplot(data = titanic_test, y = \"Fare\", x = 'Embarked', order = ('S', 'Q', 'C'))","cdaa1f5f":"display(titanic_train.groupby(['Embarked']).describe()['Fare'])\ndisplay(titanic_test.groupby(['Embarked']).describe()['Fare'])","8f2356d8":"fig, ((ax1),(ax2)) = plt.subplots(2, 1, figsize = (20, 8))\n\nax1.set_title('titanic_train')\nsns.lineplot(x = titanic_train.groupby(['Embarked']).describe()['Fare'].index, y = titanic_train.groupby(['Embarked']).describe()['Fare']['mean'], ax = ax1)\n\nax2.set_title('titanic_test')\nsns.lineplot(x = titanic_test.groupby(['Embarked']).describe()['Fare'].index, y = titanic_test.groupby(['Embarked']).describe()['Fare']['mean'], ax = ax2)","f7aed15a":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize = (20, 8))\nax1.set_title('titanic_train')\nax2.set_title('titanic_test')\n\nax1 = sns.countplot(data = titanic_train, hue = \"Pclass\", x = \"Embarked\", hue_order = (1, 2, 3), ax = ax1)\n\nembark_array = ['S', 'C', 'Q']\n\nnoEmbarked = 0\n\nfor p in ax1.patches:\n    \n    if noEmbarked > 2:\n        noEmbarked = 0\n            \n    total = len(titanic_train[titanic_train['Embarked'] == embark_array[noEmbarked]])\n    \n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax1.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax1.annotate(count, (x-0.1, y), ha='center', va='center')\n    \n    noEmbarked = noEmbarked + 1\n        \nax2 = sns.countplot(data = titanic_test, hue = \"Pclass\", x = \"Embarked\", hue_order = (1, 2, 3), ax = ax2)\n\nembark_array = ['Q', 'S', 'C']\n\nnoEmbarked = 0\n\nfor p in ax2.patches:\n    \n    if noEmbarked > 2:\n        noEmbarked = 0\n            \n    total = len(titanic_test[titanic_test['Embarked'] == embark_array[noEmbarked]])\n    \n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax2.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax2.annotate(count, (x-0.1, y), ha='center', va='center')\n    \n    noEmbarked = noEmbarked + 1","c63479d2":"fig, ax = plt.subplots(figsize = (20, 8))\nax = sns.countplot(data = titanic_train, x = 'Embarked')\n\ntotal = len(titanic_train)\n\nfor p in ax.patches:\n       \n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax.annotate(count, (x-0.1, y), ha='center', va='center')\n    \nfig, ax = plt.subplots(figsize = (20, 8))\nax = sns.countplot(data = titanic_test, x = 'Embarked', order = ('S', 'C', 'Q'))\n\ntotal = len(titanic_test)\n\nfor p in ax.patches:\n       \n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax.annotate(count, (x-0.1, y), ha='center', va='center')","722cd634":"fig, ax = plt.subplots(figsize = (20, 8))\nax = sns.countplot(data = titanic_train, x = 'Embarked', hue = 'Survived')\n\nembark_array = ['S', 'C', 'Q']\n\nnoEmbarked = 0\n\nfor p in ax.patches:\n    \n    if noEmbarked > 2:\n        noEmbarked = 0\n            \n    total = len(titanic_train[titanic_train['Embarked'] == embark_array[noEmbarked]])\n    \n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    count = f'{p.get_height()}\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x+0.1, y), ha='center', va='center')\n    ax.annotate(count, (x-0.1, y), ha='center', va='center')\n    \n    noEmbarked = noEmbarked + 1","4164c096":"titanic_train.info()","a6cc4420":"for col in ['Sex', 'Embarked']:\n    \n    titanic_train[col] = titanic_train[col].astype('category')\n    display(titanic_train[col].cat.categories)\n    titanic_train[col] = titanic_train[col].cat.codes    \n    \n    titanic_test[col] = titanic_test[col].astype('category')\n    display(titanic_test[col].cat.categories)\n    titanic_test[col] = titanic_test[col].cat.codes    \n    \ndisplay(titanic_train.sample(10))","abe32871":"y_train = titanic_train[\"Survived\"]\nx_train = titanic_train.iloc[:,1:]\nx_test = titanic_test.iloc[:,1:]","0591c07e":"logisticRegr = LogisticRegression(max_iter=1000)","7f8b8f47":"logisticRegr.fit(x_train, y_train)","bd186262":"predictions = logisticRegr.predict(x_test)\n\ntest_survived = pd.DataFrame()\ntest_survived[\"PassengerId\"] = titanic_test['PassengerId']\ntest_survived[\"Survived\"] = predictions","d0f46764":"test_survived.to_csv(\"submission.csv\", index = False)","125e844f":"logisticRegr.intercept_","14a07fa6":"logisticRegr.coef_","684d81ce":"### Age vs. Parch","606a385d":"# Exploratory Data Analysis","582ddfe2":"- Age group 0.339 - 10.368 was the only age group that had more survivors than non-survivors.\n    - Indicating that the Age Group has higher survival rate compared to other Age Group.\n- Despite there were more survivors in other Age Group compared to the Age Group 0.339 - 10.368, the number of non-survivor in their own respective Age Group were higher than the survivor.\n- Generally, the ratio of survivor to non-survivor is declining from around age 10 to around age 25.","6d82f7fe":"- Similar to Pclass vs. SibSp, the higher the number of Parch, the lesser the passengers.\n    - Though in the case of Parch, significantly more passengers with 0 Parch than passengers with 0 SibSp.","98402301":"## Test Data","ac3b3c57":"# Logistic Regression","86a45f0a":"1. 2 variables i.e.\"Sex\" and \"Embarked\" are Categorical Variables (dtype = object).\n    - It is necessay to convert the values of the variables into numerical as some ML models do not accept category as their input.","5cdeb03b":"## Age","527f06ab":"- Both titanic_train and titanic_test have similar average Age.\n- titanic_train has more outliers than titanic_test.","b55f4e4d":"titanic_train, Survived = 0:\n- 85.2% of the non-survivors were male and the remaining 14.8% are female non-survivors\n\ntitanic_train, Survived = 1:\n- 32.1% of the survivors were male and the remaining 67.9% are female survivors.\n\n- It seems **female has better chance to survive in the disaster compared to male**.","683aa3ea":"# Data Dictionary\n    \nhttps:\/\/www.kaggle.com\/c\/titanic\/data\n\n|Variable|Definition|Key|Notes|\n|---|---|---|---|\n|survival|Survival|0 = No, 1 = Yes|\n|pclass|Ticket class|1 = 1st, 2 = 2nd, 3 = 3rd|A proxy for socio-economic status: 1st = Upper, 2nd = Middle, 3rd = Lower|\n|sex|Sex|\n|Age|Age in years||age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5|\n|sibsp|# of siblings \/ spouses aboard the Titanic||Sibling = brother, sister, stepbrother, stepsister; Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)|\n|parch|# of parents \/ children aboard the Titanic||Parent = mother, father; Child = daughter, son, stepdaughter, stepson; Some children travelled only with a nanny, therefore parch=0 for them.|\n|ticket|Ticket number|\n|fare|Passenger fare|\n|cabin|Cabin number|\n|embarked|Port of Embarkation|C = Cherbourg, Q = Queenstown, S = Southampton|","a4c2cf90":"#### Find out the cases where mininum fare = 0","6081e184":"## Parch","5438c71c":"### SibSp vs. Survived","57081d5a":"### Pclass vs. Sex","a24f90b1":"In both titanic_train and titanic_test:\n   - The average fare for passengers embarked from Queenstown is the lowest and highest for those embarked from Cherbourg.\n   - Referring to 6.1.7 Pclass vs. Embarked, the proportion of Pclass = 3 embarked from Queenstown is highest among all Pclass.\n       - The chart below also shows that 93.5% of passengers embarked from Queenstown were Pclass = 3 in titanic_train and 89.1% of passengers embarked from Queenstown were Pclass = 3 in titanic_test.       \n    - Referring to 6.1.7 Pclass vs. Embarked, the proportion of Pclass = 1 embarked from Cherbourg is highest among all Pclass.\n       - The chart below also shows that 50.6% of passengers embarked from Cherbourg were Pclass = 3 in titanic_train and 54.9% of passengers embarked from Cherbourg were Pclass = 1 in titanic_test.","62fe0f15":"## Sex","7362a7f4":"- All Pclass has the most passengers with 0 SibSp. It some cases, more than 50% are passengers with 0 SibSp.\n- Generally, the higher the SibSp is, the lesser the passengers.","7b2b4e6d":"### Sex vs. Parch","78c41e35":"In both titanic_train and titanic_test, around 64% were male passengers and around 36% were female passengers.","6d269c20":"## Training Data","9fb4f718":"### SibSp vs. Fare","78f62baa":"### Parch vs. Embarked","4e7b0eb0":"- In titanic_train,\n    - More than 50% of the passengers in every Pclass were embarked from Southampton.\n    - In every Pclass except Pclass = 3, the number of passengers embarked from Queentown was the least.\n\non the contrary,\n- In titanic_test,\n    - More than 50% of the passengers in Pclass = 2 and Pclass = 3 were embarked from Southampton instead of all Pclass.\n    - In Pclass = 1, more than 50% of the passengers were embarked from Cherbourg\n        - Nonetheless, similar to titanic_train, in Pclass = 1 and Pclass = 2, the number of passengers embarked from Queentown was the least.\n\nC = Cherbourg, Q = Queenstown, S = Southampton\t","6a3996a3":"### Parch vs. Survived","17d550e6":"- In titanic_train, <font color = blue>**the higher the Ticket Class, the higher the average age of the passengers was.**<\/font>\n    - The same goes to titanic_test.","c56124af":"### SibSp vs. Parch","07da1221":"Identify if there is any missing values in the datasets.","cd1b3b20":"### Sex vs. SibSp","27685dd8":"### Fare vs. Survived","80ca24c8":"### Sex vs. Survived","4c1c4c41":"- Among 891 passengers in the training dataset, \n    - 24.2% (216) passengers were Ticket Class 1\n    - 20.7% (184) passengers were Ticket Class 2\n    - 55.1% (491) passengers were Ticket Class 3\n    \n- Among 418 passengers in the training dataset, \n    - 25.6% (107) passengers were Ticket Class 1\n    - 22.2% (93) passengers were Ticket Class 2\n    - 52.2% (218) passengers were Ticket Class 3\n    \nThe distribution of Pclass in train data is similar to test data.","19b9dbf7":"- Similar to Age vs. Fare, Age seems does not related to Embarked. The boxplot of the Age of the passengers embarked from Southampton does not have much difference that those embarked from Cherbourg. \n- Although the boxplot for the passengers embarked from Queenstown is noticeably different from the others, it probably due to small number of passengers embarked from Queenstown i.e. only 77 out of 891 which is only 8.6% of the total number of passengers.\n\nC = Cherbourg, Q = Queenstown, S = Southampton\t","68091602":"### Fare vs. Embarked","ebdb1686":"Similar to SibSp vs. Survived, Parch = 1 has more survivors than non-survivor.","e66e7b55":"Around 60% or 537 of the 891 passengers with SibSp = 0 has Parch = 0 as well","0703ba4a":"## Assigning training set and testing set","610d9a8e":"- There is no major difference between titanic_train and titanic_test\n- <font color = blue> Male is more than Female in every Pclass. <\/font>\n- Pclass = 3 in both datasets has significantly more male passengers than female passengers compared to Pclass = 1 and Pclass = 2.","119379b5":"- The average price and maximum price for each Ticket Class are as expected i.e. **the higher the ticket class, the higher the price**.\n- However, it should be noted that, in the titanic_train, the **minimum price for all 3 Pclass is 0**.\n- Whereas, in the titanic_test, **the minimum price for Pclass = 1 is 0**.","570d415b":"1. PassengerId, Ticket, Name are the features that will be removed because\n    - PassengerId and Name are unique identifiers for each case and seemingly would not contribute any information when training the ML model.\n    - it seems there is no pattern or anything that the \"Ticket\" can contribute when training the ML model.\n\nThough, by looking closer at \"Name\", there are some useful information that could be of use. But we want to make thing simple so let's just ignore it for now.","22550907":"### Sex vs. Fare","f6fcdc34":"# Libraries","139538b5":"$\\ln(odds) = 5.0984 - 1.0488Pclass - 2.6313Sex - 0.0385Age - 0.3176SibSp - 0.0901Parch + 0.0021Fare - 0.2193Embarked $","8f9b3088":"Converting \"Sex\" and \"Embarked\" into Numerical Variables","d63a33ad":"# Missing Values","7a5c6b9c":"<b>\nIn \"Sex\", female = 0; male = 1 <br>\nIn \"Embarked\", C = 0; Q = 1; S = 2\n<\/b>","b20b730b":"# Remove features","4fcc8d65":"- For titanic_train,\n    - The average of Fare for both sexes are quite different from each other i.e. 44.48 for Female and 25.52 for male.\n    - The minimum Fare for Male and Female are 0.00 and 6.75 respectively\n    - Both sexes had the same maximum Fare i.e. 512.33\n    - The Fare for Female are more widespread than Male.\n        - Larger interquartile range (IQR)\n        - Larger range (longer whisker)\n    - There are more outliers in Male passenger Fare than Female passengers\n    \n- For titanic_test,\n    - Similar to titanic_train, the average of Fare for both sexes are quite different from each other i.e. 49.75 for Female and 27.56 for male.\n        - However, the mean fare for both sexes in titanic_test are higher than titanic_train.\n    - The minimum Fare for Male and Female are 0.00 and 6.95 respectively\n    - Contrary to titanic_train, both sexes did not have the same maximum Fare.\n        - Female had maximum Fare of 512.32 while Male had 262.38.\n    - Similar to titanic_train, the Fare for Female are more widespread than Male.\n        - Larger interquartile range (IQR)\n        - Larger range (longer whisker)\n    - Similar to titanic_train, there are more outliers in Male passenger Fare than Female passengers\n    \n- Overall, it seemed like Female passengers were more willing to pay for their fare than Male passengers.","6d8a6e0d":"### Pclass vs. Parch","88361b48":"## Fare","37ec7626":"## The Model","9f75757d":"- It clearly shows that the higher the fare, the passenger was more likely to be survived. \n- It is not unexpected because\n    - in Pclass vs. Fare, it shows that the higher the Pclass, the higher the Fare.\n    - in Pclass vs. Survived, it shows that the higher the Pclass, the more likely the passenger was survived.","4be62ac5":"- Some MLs reject categorical variables as its input. It is better to convert the categorical variables into numerical variables beforehand.","4a1b2b78":"### Parch vs. Fare","3d979d07":"# Feature Transformation","a22a08cd":"### Pclass vs. Embarked","216f3ac1":"### Sex vs. Embarked","fd673f09":"**Simple Interpretation:**\n1. The higher the Pclass, the smaller the probability to be survived.\n    - This is in line with our findings in 6.1.1 Pclass vs. Survived: the higher the Ticket Class, the higher the survival rate was.\n2. Male (Sex = 1) has smaller probability to be survived than Female (Sex = 0).\n    - Holding other variables constant, Male led, on average, to an decrease of 2.6313 $\\ln(odds)$ of being survived.\n    - This is in line with our findings in 6.2.1 Sex vs. Survived: Female has better chance to survive in the disaster compared to Male.\n3. The older the passenger, the smaller the probability to be survived.\n    - This is in line with our findings in 6.3.1 Age vs. Survived: the ratio of survivor to non-survivor is declining from around age 10 to around age 25.\n4.The higher the number of Sibling and Spouse or Parent and Children, the smaller the probability to be survived.\n5. The higher the Fare, the higher the probability to be survivied.\n    - This is in line with the findings in 6.6.1: The higher the Fare indicates the higher the Pclass which has higher probability to be survived.\n6. Embarking from Southampton would, on average, decrease the $\\ln(odds)$ of being survived by around 0.4386.\n    - Embarking from Queenstown would, on average, decrease the $\\ln(odds)$ of being survived by around 0.2193.\n    \nIn \"Embarked\", C = 0; Q = 1; S = 2\nC = Cherbourg, Q = Queenstown, S = Southampton\t","5adb4ecf":"- In the dataset, there are 2 categorical variables.\n    - Sex\n    - Embarked","445893ed":"- From both titanic_train and titanic_test, it seemed that Sex has no significant relationship with Embarked i.e. no matter what the Sex is, most passengers embarked from Southampton and least passengers embarked from Queenstown.\n    - though, it seems compared to male passengers, more female passengers embarked from Queenstown and Cherbourg and more male passengers embarked from Southampton.\n\nC = Cherbourg, Q = Queenstown, S = Southampton\t","374f57c9":"## Embarked vs. Survived","6851a451":"## Converting Categorical Variables into Numerical Variables","50cf7564":"In every category of SibSp, save for SibSp = 1, has more non-survivors than survivors. <br>","5025ac4d":"## Fitting \/ Training the model","7f2a1546":"Intercept","a0879fa6":"- Similar to Sex vs. SibSp\n- In both titanic_train and titanic_test, most passengers of both sexes were travelling without parents or children, with significantly more male passengers we\n    - 54.3% or 53.8% of all the passengers were male passengers travelling without parent or children for titanic_train or titanic_test respectively.\n    - 21.8% or 23.7%  of all the passengers were female passengers travelling without parent or children for titanic_train or titanic_test respectively..","f46187a6":"- In titanic_train, most passengers of both sexes were travelling without sibling or spouse, with male passenger are more likely to do so.\n    - 48.7% of all the passengers were male passengers travelling without sibling or spouse.\n    - 19.5% of all the passengers were male passengers travelling without sibling or spouse.\n- The pattern in titanic_test is similar to titanic train, most passengers were travelling without sibling or spouse.","eabea037":"It appears that there's no relationship between Age and Fare as it seems no matter how old the passenger was, they would go for the cheapest available ticket.","9cbca680":"### Age vs. Survived","2fbff96a":"- Passengers embarked from Cherbourg has higher probability of being survived i.e. the number of survived is higher than those were not survived.\n- 66.1% and 61.0%, which are more than half of the total passengers embarked from Southampton and Queenstown respectively are not survived.\n- Possible reasons for such outcome: \n    - 54.6% of the passengers embarked from Southampton are Pclass = 3\n        - 25.4% are Pclass = 2 and 20.0% are Pclass = 1\n    - 50.6% of the passengers embarked from Cherbourg are Pclass = 1\n        - 39.3% are Pclass = 3 and 10.1% are Pclass = 2\n    \nC = Cherbourg, Q = Queenstown, S = Southampton\t","3a4850e1":"## Predicting test.csv","f8978327":"### Pclass vs. Survived","879327bd":"<font size = 5; color = red>**The higher the Ticket Class, the higher the survival rate was.** <\/font>","32cb302e":"# Data","8e1d5b38":"- Further checking reveals that, in titanic_train, there are 15 cases are having Fare = 0.\n- Whereas in titanic_test, there are 2 such cases (Pclass = 1).\n\nSince 0 is not a missing value, we decided not to do anything about it.","a0532b00":"### Age vs. Embarked","7ae8cbeb":"### Sex vs. Age","949461d4":"## Tuning Hyperparameter\nAdjusting hyperparameter of <i> max_iter <\/i> from 100 to 1000","b00111bb":"## SibSp","97d4e868":"### Pclass vs. Age","ed414f3c":"It seems that no matter what Parch is, most embarked from Southampton and least embarked from Queenstown.\n\nC = Cherbourg, Q = Queenstown, S = Southampton\t","87618a59":"### Age vs SibSp","31ce9ae3":"## Logistic Regression model","f4eeed68":"### Pclass vs. Fare","1a575fb2":"The Logistic Regression model we use here is the model with mostly default settings.\n- the only changes is the max_iter is changed from 100 to 1000\n    - 100 could be too little for the cost function to converge.\n\nDefault hyperparameter of the model:\n\nclass sklearn.linear_model.LogisticRegression(penalty='l2', *, dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver='lbfgs', max_iter=100, multi_class='auto', verbose=0, warm_start=False, n_jobs=None, l1_ratio=None)\n\nFor more information: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html","e33462e6":"Coefficient","6c1a7ffb":"## Pclass","950f053d":"- All cases with a missing value will be imputed by the mean or mode of that variable for other cases.\n    - If there is any missing value in a variable and it is a categorical data, the mode of that variable will be used for the imputaion. (Mode Imputation)\n    - If there is any missing value in a variable and it is a continuous data, the mean of that variable will be used for the imputaion. (Mean Imputation)\n- Before that, variable \"Cabin\" will be removed because it has too much missing values i.e. 77.10% of all the cases have missing value in the \"Cabin\".","37e901f4":"### Pclass vs. SibSp","a8ad2d19":"- The distribution of Parch in both titanic_train and titanic_test are similar\n    - Overwhelmingly, 76.1% and 77.5% of the passengers were travelling without their parents or children in titanic_train and titanic_test respectively.\n    - Generally, the number of passenger is getting lesser while the Parch is getting higher.","22464f5f":"### Age vs. Fare","567dc688":"- In titanic_train,\n        - Both boxes do not seem too different from each other, except that there are some outliers in male passengers in term of Age.\n        - The mean ages are 28.21 and 30.51 for female and male respectively.\n        \n- In titanic_test,\n        - Both boxes do not seem too different from each other and from the titanic_train's boxes, except that the outliers in male passengers in term of Age is much lesser than those in the titanic_train.\n        - The mean ages are 30.27 for both female and male.","9246ea96":"## Embarked"}}