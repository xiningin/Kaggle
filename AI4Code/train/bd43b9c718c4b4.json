{"cell_type":{"3a1837f8":"code","79c92f02":"code","a4f80452":"code","783b17ae":"code","b149f3dd":"code","ffc885a6":"code","b6b2440c":"code","c32a2a2c":"code","9ac49430":"code","420a7be2":"code","e8fb137a":"code","a84c2c95":"code","98a06209":"code","9b80ea0e":"code","1ebc85f0":"code","376d5997":"code","78d826ec":"code","2e4dda3d":"code","0b8a09cc":"code","8e2a5b3c":"code","c32459d7":"code","6498ca78":"code","8665e3a4":"code","53e4ca00":"code","bcd8f91c":"code","591cba04":"code","d5ff2615":"code","a66e3093":"code","10ec4bd6":"code","2c16279d":"code","7e4643c8":"markdown","c58c3ddb":"markdown","9b86a320":"markdown"},"source":{"3a1837f8":"import numpy as np\nimport pandas as pd\nimport os\n\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras","79c92f02":"train_df = pd.read_json('\/kaggle\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntest_df = pd.read_json('\/kaggle\/input\/stanford-covid-vaccine\/test.json', lines=True)\nsample_df = pd.read_csv('\/kaggle\/input\/stanford-covid-vaccine\/sample_submission.csv')","a4f80452":"test_public_df = test_df[test_df['seq_length']==107]\ntest_private_df = test_df[test_df['seq_length']==130]\n\ndfs = [train_df, test_public_df, test_private_df]\noutput_lens = [68, 107, 130]","783b17ae":"input_cols = ['sequence', 'structure', 'predicted_loop_type']\noutput_cols = ['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']","b149f3dd":"#constants\nSLIDING_SIZE = 15","ffc885a6":"# 0,1,2 represents the empty part of the window that will be added \ntoken2int = { char:index for index, char in enumerate('012().ACGUBEHIMSX')}","b6b2440c":"# add leading and trailing zeros to the list \n# you want for each char to have a window above\n# as it is not possible for the first and last chars you add \"empty\" values\nfor df in dfs:\n    for col in input_cols:\n        if col == 'sequence':\n            char = '0'\n        if col == 'structure':\n            char = '1'\n        if col == 'predicted_loop_type':\n            char = '2'\n        print(col)\n        df.loc[:, col] = df.loc[:, col].apply(lambda sequence: char * SLIDING_SIZE + sequence + char * SLIDING_SIZE)\n","c32a2a2c":"#encode the data\nseqs = []\nfor df in dfs:\n    seq = df[input_cols].applymap(lambda sequence: [token2int[char] for char in sequence])\n    seqs.append(seq)\n    ","9ac49430":"def create_onehot(x):\n    one_hot = np.zeros((len(x), len(token2int)))\n    one_hot[np.arange(x.size), x] = 1\n    return one_hot\n","420a7be2":"pictures_list = []\n\nfor seq in seqs:\n    sequence = np.array(seq.values.tolist())\n    one_hot = np.apply_along_axis(create_onehot, 2, sequence)\n    pictures = np.sum(one_hot, axis=1)\n    pictures_list.append(pictures)","e8fb137a":"height = SLIDING_SIZE*2+1\n\nslides = []\n\nfor length in output_lens:\n    a = np.expand_dims(np.arange(height), axis=0)\n    b = np.expand_dims(np.arange(length), axis=0).T\n    slide = (a + b)\n    slides.append(slide)\n","a84c2c95":"X = pictures_list[0][:, slides[0]]\nX_test_public = pictures_list[1][:, slides[1]]\nX_test_private = pictures_list[2][:, slides[2]]","98a06209":"X = X.reshape(-1, X.shape[2], X.shape[3], 1)\nX_test_public = X_test_public.reshape(-1, X_test_public.shape[2], X_test_public.shape[3], 1)\nX_test_private = X_test_private.reshape(-1, X_test_private.shape[2], X_test_private.shape[3], 1)","9b80ea0e":"X.shape","1ebc85f0":"y = np.array(train_df[output_cols].values.tolist())","376d5997":"y = np.transpose(y, (0, 2, 1))","78d826ec":"y = y.reshape(-1, y.shape[2])","2e4dda3d":"#FINALLY IMPLEMENT CNN\n\ncnn_model = keras.models.Sequential([\n    keras.layers.Input(shape=(SLIDING_SIZE*2+1, 17, 1)),\n    keras.layers.Conv2D(32, kernel_size=(2,2), activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.AveragePooling2D(pool_size=(2,2)),\n    keras.layers.Conv2D(64, kernel_size=(4,2), activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.AveragePooling2D(pool_size=(2,2)),\n    keras.layers.Conv2D(128, kernel_size=(2,2), activation='relu'),\n    keras.layers.AveragePooling2D(pool_size=(2,2)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(100, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(50, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(5, activation='linear')\n])\n","0b8a09cc":"checkpoint_cb = keras.callbacks.ModelCheckpoint('01_cnn_model.h5', save_best_only=True)\nearly_stopping_cb = keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True)\n\noptimizer = keras.optimizers.Adam(\n    learning_rate=0.001\n)\ncnn_model.compile(optimizer=optimizer, loss='mse')","8e2a5b3c":"history = cnn_model.fit(X, y, validation_split=0.25, batch_size=128, epochs=100, callbacks=[checkpoint_cb, early_stopping_cb])","c32459d7":"cnn_model = keras.models.load_model('01_cnn_model.h5')","6498ca78":"cnn_model.evaluate(X, y)","8665e3a4":"model = cnn_model","53e4ca00":"pred_public = model.predict(X_test_public)\npred_private = model.predict(X_test_private)","bcd8f91c":"del X\ndel X_test_public\ndel X_test_private","591cba04":"pred_public = pred_public.reshape(-1, 107, 5)\npred_private = pred_private.reshape(-1, 130, 5)","d5ff2615":"pred_public.shape","a66e3093":"pred_dfs = []\nfor ids, preds in [(test_public_df['id'], pred_public), (test_private_df['id'], pred_private)]:\n    for i, id in enumerate(ids):\n        pred = preds[i]\n        \n        df = pd.DataFrame(pred, columns=output_cols)\n        df['id_seqpos'] = [f'{id}_{x}' for x in range(df.shape[0])]\n        pred_dfs.append(df)\n\npred_df = pd.concat(pred_dfs)","10ec4bd6":"pred_df","2c16279d":"submission = sample_df[['id_seqpos']].merge(pred_df, on=['id_seqpos'])\nsubmission.to_csv('submission.csv', index=False)","7e4643c8":"### PREPROCESSING FOR CNNs","c58c3ddb":"### Random Forest","9b86a320":"### Predict Model"}}