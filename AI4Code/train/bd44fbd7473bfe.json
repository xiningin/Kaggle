{"cell_type":{"dc607055":"code","f0d989f7":"code","d0ec8a2f":"code","30f85b95":"code","c58e4f2f":"code","4847ad21":"code","a195c83f":"code","c0d72186":"code","49239272":"code","85371411":"code","541fe1a1":"code","8d2d80a4":"code","15d0736a":"code","21ced23a":"code","855120ca":"code","7a140d11":"markdown","c09274f4":"markdown","d506a183":"markdown","999f7aee":"markdown","82d83434":"markdown","3377d1f4":"markdown","b1f41de4":"markdown","0d2461e2":"markdown","7482ca2c":"markdown","ccc72a8c":"markdown","cf7b0122":"markdown","9c1c5a1f":"markdown","78ffc5ba":"markdown","d4a6e576":"markdown"},"source":{"dc607055":"import numpy as np\nimport pandas as pd\nimport os\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nDATA_DIR = \"..\/input\/corn-or-maize-leaf-disease-dataset\/data\"\nCLASSES = os.listdir(DATA_DIR)\nNUM_CLASSES = len(CLASSES)\nIMAGE_SIZE = (224, 224)\nBATCH_SIZE = 16\nEPOCHS = 10\n\nprint(CLASSES)","f0d989f7":"from tensorflow.keras.preprocessing import image_dataset_from_directory\n\ntrain_ds = image_dataset_from_directory(\n    DATA_DIR,\n    validation_split=0.2,\n    subset=\"training\",\n    seed=456,\n    image_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    label_mode=\"categorical\",\n    class_names=CLASSES\n)\n\nval_ds = image_dataset_from_directory(\n    DATA_DIR,\n    validation_split=0.2,\n    subset=\"validation\",\n    seed=456,\n    image_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    label_mode=\"categorical\",\n    class_names=CLASSES\n)","d0ec8a2f":"import matplotlib.pyplot as plt\n\n#plt.figure(figsize=(20, 10))\nplt.figure()\nfor images, labels in train_ds.take(1):\n    for i in range(15):\n        ax = plt.subplot(3, 5, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(CLASSES[np.argmax(labels[i])])\n        plt.axis(\"off\")\nplt.show()","30f85b95":"\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.resnet import ResNet50, ResNet101, ResNet152\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, BatchNormalization\n\n\nresnet = ResNet50( weights=\"imagenet\", include_top=False)\nresnet.trainable = False\n\nx = resnet.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(512, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dense(256, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dropout(0.5)(x)\nresnet_predictions = Dense(len(CLASSES), activation='softmax')(x)\n\nresnet_model = Model(inputs=resnet.input, outputs=resnet_predictions)\n\nfor layer in resnet.layers:\n    layer.trainable = False\n\nresnet_model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=[\"accuracy\"])\n","c58e4f2f":"history = resnet_model.fit(train_ds, epochs=10, validation_data=val_ds)","4847ad21":"RN101_model = ResNet101( weights='imagenet', include_top=False)\nRN101_model.trainable = False\n\nx = RN101_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(512, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dense(256, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dropout(0.5)(x)\n\nRN101_predictions = Dense(len(CLASSES), activation='softmax')(x)\n\nmodel_RN101 = Model(inputs=RN101_model.input, outputs=RN101_predictions)\n\nfor layer in RN101_model.layers:\n    layer.trainable = False\n\nmodel_RN101.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=[\"accuracy\"],)\n","a195c83f":"RN101_history = model_RN101.fit(train_ds, epochs=10, validation_data=val_ds)","c0d72186":"from tensorflow.keras.applications import Xception\n\nXception_model = Xception(include_top=False, weights=\"imagenet\")\nXception_model.trainable = True\n\nx = Xception_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(256, activation=\"relu\")(x)\nx = BatchNormalization()(x)\nx = Dropout(0.25)(x)\n\nXception_predictions = Dense(len(CLASSES), activation=\"softmax\")(x)\nmodel_Xception = Model(inputs=Xception_model.input, outputs=Xception_predictions)\n\nfor layer in Xception_model.layers:\n    layer.trainable = False\n    \nmodel_Xception.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","49239272":"Xception_history = model_Xception.fit(train_ds, epochs=10, validation_data=val_ds)","85371411":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2, subplot_titles=(\"Accuracy over time\", \"Loss over time\"))\n\nmodels = [resnet, RN101_model, Xception_model]\nmodel_histories = [history, RN101_history, Xception_history]\nmodel_names = [\"ResNet\", \"ResNet101\", \"Xception\"]\n\nfor i in range(0, len(models)):\n    model = models[i]\n    xepochs = [x for x in range(len(model_histories[i].history['loss']))]\n    for metric in ['accuracy', 'val_accuracy']:\n        fig.add_trace(go.Scatter(x=xepochs, y=model_histories[i].history[metric], mode='lines+markers', name=model_names[i] + \" \" + metric), row=1, col=1)\n\n    for metric in ['loss', 'val_loss']:\n        fig.add_trace(go.Scatter(x=xepochs, y=model_histories[i].history[metric], mode='lines+markers', name=model_names[i] + \" \" + metric), row=1, col=2)\n\nfig.update_xaxes(title_text=\"Epoch\", row=1, col=1)\nfig.update_xaxes(title_text=\"Epoch\", row=1, col=2)\n\nfig.update_yaxes(title_text=\"Accuracy\", row=1, col=1)\nfig.update_yaxes(title_text=\"Loss\", row=1, col=2)\n\nfig.show()","541fe1a1":"from sklearn.metrics import confusion_matrix\nimport plotly.express as px\n\n\ndef plot_confusion_matrix(dataset, model):\n    y_val = []\n    y_val_pred = []\n\n    for images, targets in dataset:\n        for image, target in zip(images, targets):\n            img_array = image.numpy().astype(\"uint8\")\n            prediction = model.predict(np.array([img_array]))\n            y_val_pred.append(np.argmax(prediction))\n            y_val.append(np.argmax(target))\n    cm = confusion_matrix(y_val, y_val_pred)\n    fig = px.imshow(\n        cm,\n        labels=dict(x=\"Predicted\", y=\"Real\"),\n        x=CLASSES,\n        y=CLASSES\n    )\n    fig.update_xaxes(side=\"top\")\n    fig.show()","8d2d80a4":"plot_confusion_matrix(val_ds, resnet_model)","15d0736a":"plot_confusion_matrix(val_ds, model_RN101)","21ced23a":"plot_confusion_matrix(val_ds, model_Xception)","855120ca":"accuracies = []\nlosses = []\nfor i in range(0, len(model_histories)):\n    accuracies.append(np.mean(model_histories[i].history['accuracy']))\n    losses.append(np.mean(model_histories[i].history['loss']))\n    \nprint(accuracies)\nprint(losses)","7a140d11":"\n## Accuracy Report","c09274f4":"## History Plots","d506a183":"## Image Sample","999f7aee":"## Confusion Matrices","82d83434":"| Architecture    | Epochs  | Mean Accuracy  | Mean Loss  |\n|-----------------|---------|----------------|------------|\n| ResNet50        |  10     | 94.19%         | 17.73%     |\n| ResNet101       |  10     | 94.32%         | 16.61%     |\n| Xception        |  10     | 80.56%         | 50.84%     |","3377d1f4":"### ResNet50","b1f41de4":"### Xception","0d2461e2":"### ResNet101","7482ca2c":"### Xception","ccc72a8c":"### ResNet50","cf7b0122":"### ResNet101","9c1c5a1f":"## Transfer Learning Model","78ffc5ba":"# Corn or Maize Leaf Disease Dataset - Transfer Learning","d4a6e576":"## Dataset Load"}}