{"cell_type":{"a1bac75d":"code","eacc0330":"code","574013a0":"code","83265130":"code","20ff1d57":"code","557f6c65":"markdown","cf00d656":"markdown","88ab9159":"markdown","13dcb320":"markdown","5a05e2ce":"markdown"},"source":{"a1bac75d":"import pandas as pd\ndata = pd.read_csv(\"..\/input\/stock-market-data\/stock_market_data\/nasdaq\/csv\/AAPL.csv\")\ndata.tail()","eacc0330":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer()\ndata = data[['Low', 'Open', 'Volume', 'High', 'Close', 'Adjusted Close']]\nimputed_data = pd.DataFrame(imputer.fit_transform(data))\nimputed_data.columns = data.columns\ndata = imputed_data","574013a0":"from sklearn.model_selection import train_test_split\nX = data[['Low', 'Open', 'Volume', 'Close', 'Adjusted Close']]\ny = data.High\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y)","83265130":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\n\nmodel = XGBRegressor(n_estimators=1000, learning_rate=0.05)\nmodel.fit(X_train, y_train,\n              early_stopping_rounds=5, \n              eval_set=[(X_valid, y_valid)],\n              verbose=False)\n\npred = model.predict(X_valid)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(pred, y_valid)))","20ff1d57":"real = []\nfor item in y_valid.iteritems():\n    real.append(item[1])\ncompare = pd.DataFrame(data={\n    'Predictions':pred,\n    'Real':real\n})\n\ncompare","557f6c65":"### Clean the dataset","cf00d656":"### Begin to create the model and predict the outcome","88ab9159":"### Load the train and validation data","13dcb320":"### Compare the prediction with the validation data","5a05e2ce":"# Machine learning practice project\n### This code below is trying to predict the Apple stock using XGBoost"}}