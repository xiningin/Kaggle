{"cell_type":{"8a4c7e4e":"code","9a9957dc":"code","bb73a818":"code","873af697":"code","11f36e86":"code","44556fbc":"code","1a1ddf0f":"markdown"},"source":{"8a4c7e4e":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow.keras \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom tensorflow.keras.optimizers import SGD\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.svm import SVR\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \ntrainingData = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntestData   = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ntrainingData.drop('LotFrontage',axis = 1)\ntestData.drop('LotFrontage',axis = 1)\n\ntrainingData = pd.get_dummies(trainingData.iloc[:,:-1])\ntestData  = pd.get_dummies(testData).values\nX     = trainingData.iloc[:,:-1].values\nX     = np.nan_to_num(X)\ny     = trainingData.iloc[:,-1].values\noptimizer   = SGD(lr=0.04, momentum=0.7)\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(128))\nmodel.add(tf.keras.layers.Dense(64))\nmodel.add(tf.keras.layers.Dense(64))\nmodel.add(tf.keras.layers.Dense(1))\nmodel.compile(\n    optimizer=optimizer, \n    loss='mean_absolute_error', \n    metrics=['mean_absolute_error']\n)\nmodel.fit(X,y,batch_size = 32)","9a9957dc":"regModel = Ridge(alpha=0.5)\nregModel.fit(X, y)","bb73a818":"lassoModel = Lasso(alpha=0.7)\nlassoModel.fit(X, y)","873af697":"elasticModel = ElasticNet(alpha = 0.6)\nelasticModel.fit(X, y)","11f36e86":"linearModel  = LinearRegression()\nlinearModel.fit(X, y)","44556fbc":"sgd = SGDRegressor()\nsgd.fit(X, y)","1a1ddf0f":"svr  = SVR(C = 1.0,epsilon = 0.1,kernel = 'rbf')\nsvr.fit(X,y)"}}