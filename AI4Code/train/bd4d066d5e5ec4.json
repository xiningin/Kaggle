{"cell_type":{"c22e8cd0":"code","071dc7d3":"code","79a82034":"code","c2813d94":"code","1d317f14":"code","6aea4a7b":"code","cde2e76e":"code","ac1c8b2f":"code","b746c5f0":"code","2c9c6684":"code","6b709dce":"code","39cf575d":"code","1b353706":"code","531dd9ca":"code","5d091a61":"code","0cecd46a":"code","972a5fa9":"code","2678a6ba":"code","7e23af43":"code","8d8e2afd":"code","1157476f":"code","dbcc1c30":"code","fca4de59":"code","dcea5671":"code","9b6bd799":"code","ae32a232":"code","790a0bef":"code","38e5ab59":"code","a4ac5be6":"code","24637d77":"code","c560864d":"code","1f39f18c":"code","83c33dcb":"code","1f87a231":"code","3f93b7c5":"code","89cb00e8":"code","70868f4b":"code","7c7a6e79":"code","9a633b13":"code","f0fcade2":"code","64ef78e9":"code","fd1b4c2f":"code","b838ca23":"code","375c00ac":"code","e6adaf0b":"code","b7fcbb9b":"code","4d07285b":"code","f7f2491a":"code","d4aa28ae":"code","a795685d":"code","3762d5a6":"code","7b39a1e5":"code","fa285298":"code","0786beab":"code","fc3c1a58":"code","ee35b98d":"code","9c2a7dd3":"code","ed52d338":"markdown","c22cad3a":"markdown","3f20ecce":"markdown","f7723581":"markdown","c2279d92":"markdown","0226e312":"markdown","cecf7a83":"markdown","1e5b4280":"markdown","445d2832":"markdown","612b9f76":"markdown","7286677d":"markdown","791b93a3":"markdown","9ac43f85":"markdown","7db5557c":"markdown","4d489db5":"markdown","732cede8":"markdown","6828167d":"markdown","7b225c55":"markdown","f228357d":"markdown","6aa3d154":"markdown","196c601a":"markdown","18f6b440":"markdown","e54bbf53":"markdown","ec6733d3":"markdown","61b3dba0":"markdown","0ce19efa":"markdown","f53b5e96":"markdown","b467b875":"markdown","ff23be38":"markdown","20341ff8":"markdown","dbb4d69c":"markdown","b36054c4":"markdown","2e5d9eee":"markdown","80255dd4":"markdown","5fd37003":"markdown","879285df":"markdown","016fd0d1":"markdown","1436ad0b":"markdown","5bbe24bf":"markdown"},"source":{"c22e8cd0":"# Importing Libraries \nimport pandas as pd\nimport numpy as np\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nltk\nimport warnings \nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)","071dc7d3":"# Files available in our data sets\nimport os\nprint(os.listdir(\"..\/input\"))","79a82034":"# Loading Data\ntrain_df = pd.read_csv(\"..\/input\/train_tweets.csv\")\ntest_df = pd.read_csv(\"..\/input\/test_tweets.csv\")","c2813d94":"#Training Data Set\ntrain_df.head(10)","1d317f14":"#Testing Data Set\ntest_df.head()\nprint('Testing data set has no Label column')\nprint(test_df.head(10))","6aea4a7b":"# Training Data Set Information\nprint(\"Training Data Set Info - Total Rows | Total Columns | Total Null Values\")\nprint(train_df.info())","cde2e76e":"# Testing Data Set Information\nprint(\"Test Data Set Info - Total Rows | Total Columns | Total Null Values\")\nprint(test_df.info())","ac1c8b2f":"# Merging both the data sets as tweets in both the data set is unstructured\ncombine_df = train_df.append(test_df, ignore_index = True, sort = False)\ncombine_df.head()","b746c5f0":"# Combine (Merged) Data Set Information\nprint(\"Combine Data Set Info - Total Rows | Total Columns | Total Null Values\")\nprint(combine_df.info())","2c9c6684":"print(\"\"\"Step A : Converting html entities i.e. (&lt; &gt; &amp;)\n( \"&lt;\" is converted to \u201c<\u201d and \"&amp;\" is converted to \u201c&\u201d)\"\"\")","6b709dce":"# Importing HTMLParser\nfrom html.parser import HTMLParser\nhtml_parser = HTMLParser()","39cf575d":"# Created a new columns i.e. clean_tweet contains the same tweets but cleaned version\ncombine_df['clean_tweet'] = combine_df['tweet'].apply(lambda x: html_parser.unescape(x))\ncombine_df.head(10)","1b353706":"def remove_pattern(input_txt, pattern):\n    r = re.findall(pattern, input_txt)\n    for i in r:\n        input_txt = re.sub(i, '', input_txt)\n    return input_txt","531dd9ca":"# remove twitter handles (@user)\ncombine_df['clean_tweet'] = np.vectorize(remove_pattern)(combine_df['clean_tweet'], \"@[\\w]*\")\ncombine_df.head(10)","5d091a61":"combine_df['clean_tweet'] = combine_df['clean_tweet'].apply(lambda x: x.lower())\ncombine_df.head(10)","0cecd46a":"# Apostrophe Dictionary\napostrophe_dict = {\n\"ain't\": \"am not \/ are not\",\n\"aren't\": \"are not \/ am not\",\n\"can't\": \"cannot\",\n\"can't've\": \"cannot have\",\n\"'cause\": \"because\",\n\"could've\": \"could have\",\n\"couldn't\": \"could not\",\n\"couldn't've\": \"could not have\",\n\"didn't\": \"did not\",\n\"doesn't\": \"does not\",\n\"don't\": \"do not\",\n\"hadn't\": \"had not\",\n\"hadn't've\": \"had not have\",\n\"hasn't\": \"has not\",\n\"haven't\": \"have not\",\n\"he'd\": \"he had \/ he would\",\n\"he'd've\": \"he would have\",\n\"he'll\": \"he shall \/ he will\",\n\"he'll've\": \"he shall have \/ he will have\",\n\"he's\": \"he has \/ he is\",\n\"how'd\": \"how did\",\n\"how'd'y\": \"how do you\",\n\"how'll\": \"how will\",\n\"how's\": \"how has \/ how is\",\n\"i'd\": \"I had \/ I would\",\n\"i'd've\": \"I would have\",\n\"i'll\": \"I shall \/ I will\",\n\"i'll've\": \"I shall have \/ I will have\",\n\"i'm\": \"I am\",\n\"i've\": \"I have\",\n\"isn't\": \"is not\",\n\"it'd\": \"it had \/ it would\",\n\"it'd've\": \"it would have\",\n\"it'll\": \"it shall \/ it will\",\n\"it'll've\": \"it shall have \/ it will have\",\n\"it's\": \"it has \/ it is\",\n\"let's\": \"let us\",\n\"ma'am\": \"madam\",\n\"mayn't\": \"may not\",\n\"might've\": \"might have\",\n\"mightn't\": \"might not\",\n\"mightn't've\": \"might not have\",\n\"must've\": \"must have\",\n\"mustn't\": \"must not\",\n\"mustn't've\": \"must not have\",\n\"needn't\": \"need not\",\n\"needn't've\": \"need not have\",\n\"o'clock\": \"of the clock\",\n\"oughtn't\": \"ought not\",\n\"oughtn't've\": \"ought not have\",\n\"shan't\": \"shall not\",\n\"sha'n't\": \"shall not\",\n\"shan't've\": \"shall not have\",\n\"she'd\": \"she had \/ she would\",\n\"she'd've\": \"she would have\",\n\"she'll\": \"she shall \/ she will\",\n\"she'll've\": \"she shall have \/ she will have\",\n\"she's\": \"she has \/ she is\",\n\"should've\": \"should have\",\n\"shouldn't\": \"should not\",\n\"shouldn't've\": \"should not have\",\n\"so've\": \"so have\",\n\"so's\": \"so as \/ so is\",\n\"that'd\": \"that would \/ that had\",\n\"that'd've\": \"that would have\",\n\"that's\": \"that has \/ that is\",\n\"there'd\": \"there had \/ there would\",\n\"there'd've\": \"there would have\",\n\"there's\": \"there has \/ there is\",\n\"they'd\": \"they had \/ they would\",\n\"they'd've\": \"they would have\",\n\"they'll\": \"they shall \/ they will\",\n\"they'll've\": \"they shall have \/ they will have\",\n\"they're\": \"they are\",\n\"they've\": \"they have\",\n\"to've\": \"to have\",\n\"wasn't\": \"was not\",\n\"we'd\": \"we had \/ we would\",\n\"we'd've\": \"we would have\",\n\"we'll\": \"we will\",\n\"we'll've\": \"we will have\",\n\"we're\": \"we are\",\n\"we've\": \"we have\",\n\"weren't\": \"were not\",\n\"what'll\": \"what shall \/ what will\",\n\"what'll've\": \"what shall have \/ what will have\",\n\"what're\": \"what are\",\n\"what's\": \"what has \/ what is\",\n\"what've\": \"what have\",\n\"when's\": \"when has \/ when is\",\n\"when've\": \"when have\",\n\"where'd\": \"where did\",\n\"where's\": \"where has \/ where is\",\n\"where've\": \"where have\",\n\"who'll\": \"who shall \/ who will\",\n\"who'll've\": \"who shall have \/ who will have\",\n\"who's\": \"who has \/ who is\",\n\"who've\": \"who have\",\n\"why's\": \"why has \/ why is\",\n\"why've\": \"why have\",\n\"will've\": \"will have\",\n\"won't\": \"will not\",\n\"won't've\": \"will not have\",\n\"would've\": \"would have\",\n\"wouldn't\": \"would not\",\n\"wouldn't've\": \"would not have\",\n\"y'all\": \"you all\",\n\"y'all'd\": \"you all would\",\n\"y'all'd've\": \"you all would have\",\n\"y'all're\": \"you all are\",\n\"y'all've\": \"you all have\",\n\"you'd\": \"you had \/ you would\",\n\"you'd've\": \"you would have\",\n\"you'll\": \"you shall \/ you will\",\n\"you'll've\": \"you shall have \/ you will have\",\n\"you're\": \"you are\",\n\"you've\": \"you have\"\n}\napostrophe_dict","972a5fa9":"def lookup_dict(text, dictionary):\n    for word in text.split():\n        if word.lower() in dictionary:\n            if word.lower() in text.split():\n                text = text.replace(word, dictionary[word.lower()])\n    return text","2678a6ba":"combine_df['clean_tweet'] = combine_df['clean_tweet'].apply(lambda x: lookup_dict(x,apostrophe_dict))\ncombine_df.head(10)","7e23af43":"short_word_dict = {\n\"121\": \"one to one\",\n\"a\/s\/l\": \"age, sex, location\",\n\"adn\": \"any day now\",\n\"afaik\": \"as far as I know\",\n\"afk\": \"away from keyboard\",\n\"aight\": \"alright\",\n\"alol\": \"actually laughing out loud\",\n\"b4\": \"before\",\n\"b4n\": \"bye for now\",\n\"bak\": \"back at the keyboard\",\n\"bf\": \"boyfriend\",\n\"bff\": \"best friends forever\",\n\"bfn\": \"bye for now\",\n\"bg\": \"big grin\",\n\"bta\": \"but then again\",\n\"btw\": \"by the way\",\n\"cid\": \"crying in disgrace\",\n\"cnp\": \"continued in my next post\",\n\"cp\": \"chat post\",\n\"cu\": \"see you\",\n\"cul\": \"see you later\",\n\"cul8r\": \"see you later\",\n\"cya\": \"bye\",\n\"cyo\": \"see you online\",\n\"dbau\": \"doing business as usual\",\n\"fud\": \"fear, uncertainty, and doubt\",\n\"fwiw\": \"for what it's worth\",\n\"fyi\": \"for your information\",\n\"g\": \"grin\",\n\"g2g\": \"got to go\",\n\"ga\": \"go ahead\",\n\"gal\": \"get a life\",\n\"gf\": \"girlfriend\",\n\"gfn\": \"gone for now\",\n\"gmbo\": \"giggling my butt off\",\n\"gmta\": \"great minds think alike\",\n\"h8\": \"hate\",\n\"hagn\": \"have a good night\",\n\"hdop\": \"help delete online predators\",\n\"hhis\": \"hanging head in shame\",\n\"iac\": \"in any case\",\n\"ianal\": \"I am not a lawyer\",\n\"ic\": \"I see\",\n\"idk\": \"I don't know\",\n\"imao\": \"in my arrogant opinion\",\n\"imnsho\": \"in my not so humble opinion\",\n\"imo\": \"in my opinion\",\n\"iow\": \"in other words\",\n\"ipn\": \"I\u2019m posting naked\",\n\"irl\": \"in real life\",\n\"jk\": \"just kidding\",\n\"l8r\": \"later\",\n\"ld\": \"later, dude\",\n\"ldr\": \"long distance relationship\",\n\"llta\": \"lots and lots of thunderous applause\",\n\"lmao\": \"laugh my ass off\",\n\"lmirl\": \"let's meet in real life\",\n\"lol\": \"laugh out loud\",\n\"ltr\": \"longterm relationship\",\n\"lulab\": \"love you like a brother\",\n\"lulas\": \"love you like a sister\",\n\"luv\": \"love\",\n\"m\/f\": \"male or female\",\n\"m8\": \"mate\",\n\"milf\": \"mother I would like to fuck\",\n\"oll\": \"online love\",\n\"omg\": \"oh my god\",\n\"otoh\": \"on the other hand\",\n\"pir\": \"parent in room\",\n\"ppl\": \"people\",\n\"r\": \"are\",\n\"rofl\": \"roll on the floor laughing\",\n\"rpg\": \"role playing games\",\n\"ru\": \"are you\",\n\"shid\": \"slaps head in disgust\",\n\"somy\": \"sick of me yet\",\n\"sot\": \"short of time\",\n\"thanx\": \"thanks\",\n\"thx\": \"thanks\",\n\"ttyl\": \"talk to you later\",\n\"u\": \"you\",\n\"ur\": \"you are\",\n\"uw\": \"you\u2019re welcome\",\n\"wb\": \"welcome back\",\n\"wfm\": \"works for me\",\n\"wibni\": \"wouldn't it be nice if\",\n\"wtf\": \"what the fuck\",\n\"wtg\": \"way to go\",\n\"wtgp\": \"want to go private\",\n\"ym\": \"young man\",\n\"gr8\": \"great\"\n}","8d8e2afd":"combine_df['clean_tweet'] = combine_df['clean_tweet'].apply(lambda x: lookup_dict(x,short_word_dict))\ncombine_df.head(10)","1157476f":"emoticon_dict = {\n\":)\": \"happy\",\n\":\u2011)\": \"happy\",\n\":-]\": \"happy\",\n\":-3\": \"happy\",\n\":->\": \"happy\",\n\"8-)\": \"happy\",\n\":-}\": \"happy\",\n\":o)\": \"happy\",\n\":c)\": \"happy\",\n\":^)\": \"happy\",\n\"=]\": \"happy\",\n\"=)\": \"happy\",\n\"<3\": \"happy\",\n\":-(\": \"sad\",\n\":(\": \"sad\",\n\":c\": \"sad\",\n\":<\": \"sad\",\n\":[\": \"sad\",\n\">:[\": \"sad\",\n\":{\": \"sad\",\n\">:(\": \"sad\",\n\":-c\": \"sad\",\n\":-< \": \"sad\",\n\":-[\": \"sad\",\n\":-||\": \"sad\"\n}\nemoticon_dict","dbcc1c30":"combine_df['clean_tweet'] = combine_df['clean_tweet'].apply(lambda x: lookup_dict(x,emoticon_dict))\ncombine_df.head(10)","fca4de59":"combine_df['clean_tweet'] = combine_df['clean_tweet'].apply(lambda x: re.sub(r'[^\\w\\s]',' ',x))\ncombine_df.head(10)","dcea5671":"combine_df['clean_tweet'] = combine_df['clean_tweet'].apply(lambda x: re.sub(r'[^a-zA-Z0-9]',' ',x))\ncombine_df.head(10)","9b6bd799":"combine_df['clean_tweet'] = combine_df['clean_tweet'].apply(lambda x: re.sub(r'[^a-zA-Z]',' ',x))\ncombine_df.head(10)","ae32a232":"combine_df['clean_tweet'] = combine_df['clean_tweet'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>1]))\ncombine_df['clean_tweet'][0:5]","790a0bef":"from textblob import TextBlob","38e5ab59":"# Spelling correction is a cool feature which TextBlob offers, we can be accessed using the correct function as shown below.\nblob = TextBlob(\"Why are you stting on this bech??\") # Scentence with two errors\nprint(blob.correct()) # Correct function give us the best possible word simmilar to \"gret\"","a4ac5be6":"# we can see all the similar matches our first error along with the probability score.\nblob.words[3].spellcheck()","24637d77":"# Not cleaning the just showing the spelling check as its take lot of time to process all these tweets\n## Shown sample how its must done\ntext = combine_df['clean_tweet'][0:10].apply(lambda x: str(TextBlob(x).correct()))\ntext","c560864d":"# Importing stop words from NLTK coupus and word tokenizer\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize","1f39f18c":"# Creating token for the clean tweets\ncombine_df['tweet_token'] = combine_df['clean_tweet'].apply(lambda x: word_tokenize(x))\n\n## Fully formated tweets & there tokens\ncombine_df.head(10)","83c33dcb":"# Importing stop words from NLTK corpus for english language\nstop_words = set(stopwords.words('english'))\nstop_words","1f87a231":"# Created new columns of tokens - where stop words are being removed\ncombine_df['tweet_token_filtered'] = combine_df['tweet_token'].apply(lambda x: [word for word in x if not word in stop_words])\n\n## Tokens columns with stop words and without stop words\ncombine_df[['tweet_token', 'tweet_token_filtered']].head(10)","3f93b7c5":"# Importing library for stemming\nfrom nltk.stem import PorterStemmer\nstemming = PorterStemmer()","89cb00e8":"# Created one more columns tweet_stemmed it shows tweets' stemmed version\ncombine_df['tweet_stemmed'] = combine_df['tweet_token_filtered'].apply(lambda x: ' '.join([stemming.stem(i) for i in x]))\ncombine_df['tweet_stemmed'].head(10)","70868f4b":"# Importing library for lemmatizing\nfrom nltk.stem.wordnet import WordNetLemmatizer\nlemmatizing = WordNetLemmatizer()","7c7a6e79":"# Created one more columns tweet_lemmatized it shows tweets' lemmatized version\ncombine_df['tweet_lemmatized'] = combine_df['tweet_token_filtered'].apply(lambda x: ' '.join([lemmatizing.lemmatize(i) for i in x]))\ncombine_df['tweet_lemmatized'].head(10)","9a633b13":"# Our final dataframe - Fully formatted, Processed, Noise less, Cleaned, ready to analyse\n## for further analysis we consider 2 columns i.e. \"tweet_stemmed\" & \"tweet_lematized\"\n### We are using 2 columns to see which of them give us better score.\ncombine_df.head(10)","f0fcade2":"#visualizing all the words in column \"tweet_stemmed\" in our data using the wordcloud plot.\nall_words = ' '.join([text for text in combine_df['tweet_stemmed']])\nfrom wordcloud import WordCloud\nwordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_words)\n\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.title(\"Most Common words in column Tweet Stemmed\")\nplt.show()","64ef78e9":"#Visualizing all the words in column \"tweet_lemmatized\" in our data using the wordcloud plot.\nall_words = ' '.join([text for text in combine_df['tweet_lemmatized']])\nfrom wordcloud import WordCloud\nwordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_words)\n\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.title(\"Most Common words in column Tweet Lemmatized\")\nplt.show()","fd1b4c2f":"#Visualizing all the normal or non racist\/sexist words in column \"tweet_stemmed\" in our data using the wordcloud plot.\nnormal_words =' '.join([text for text in combine_df['tweet_stemmed'][combine_df['label'] == 0]])\n\nwordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(normal_words)\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.title(\"Most non racist\/sexist words in column Tweet Stemmed\")\nplt.show()","b838ca23":"#Visualizing all the normal or non racist\/sexist words in column \"tweet_lemmatized\" in our data using the wordcloud plot.\nnormal_words =' '.join([text for text in combine_df['tweet_lemmatized'][combine_df['label'] == 0]])\n\nwordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(normal_words)\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.title(\"Most non racist\/sexist words in column Tweet Lemmatized\")\nplt.show()","375c00ac":"#Visualizing all the negative or racist\/sexist words in column \"tweet_stemmed\" in our data using the wordcloud plot.\nnegative_words =' '.join([text for text in combine_df['tweet_stemmed'][combine_df['label'] == 1]])\n\nwordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(negative_words)\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.title(\"Most racist\/sexist words in column Tweet Stemmed\")\nplt.show()","e6adaf0b":"#Visualizing all the negative or racist\/sexist words in column \"tweet_lemmatized\" in our data using the wordcloud plot.\nnegative_words =' '.join([text for text in combine_df['tweet_lemmatized'][combine_df['label'] == 1]])\n\nwordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(negative_words)\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.title(\"Most racist\/sexist words in column Tweet Lemmatized\")\nplt.show()","b7fcbb9b":"# Importing library\nfrom sklearn.feature_extraction.text import CountVectorizer\nbow_vectorizer = CountVectorizer(max_df=0.90, min_df=2, max_features=1000, stop_words='english')\nbow_vectorizer","4d07285b":"# bag-of-words feature matrix - For columns \"combine_df['tweet_stemmed']\"\nbow_stem = bow_vectorizer.fit_transform(combine_df['tweet_stemmed'])\nbow_stem","f7f2491a":"# bag-of-words feature matrix - For column - combine_df['tweet_lemmatized']\nbow_lemm = bow_vectorizer.fit_transform(combine_df['tweet_lemmatized'])\nbow_lemm","d4aa28ae":"# Importing library\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_vectorizer = TfidfVectorizer(max_df=0.90, min_df=2, max_features=1000, stop_words='english')\ntfidf_vectorizer","a795685d":"# TF-IDF feature matrix - For columns \"combine_df['tweet_stemmed']\"\ntfidf_stem = tfidf_vectorizer.fit_transform(combine_df['tweet_stemmed'])\ntfidf_stem","3762d5a6":"# TF-IDF feature matrix - For columns \"combine_df['tweet_lemmatized']\"\ntfidf_lemm = tfidf_vectorizer.fit_transform(combine_df['tweet_lemmatized'])\ntfidf_lemm","7b39a1e5":"# Importing Libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score","fa285298":"# A.1 For columns \"combine_df['tweet_stemmed']\"\ntrain_bow = bow_stem[:31962,:]\ntest_bow = bow_stem[31962:,:]\n\n# splitting data into training and validation set\nxtrain_bow, xvalid_bow, ytrain, yvalid = train_test_split(train_bow, train_df['label'], random_state=42, test_size=0.3)\n\nlreg = LogisticRegression()\nlreg.fit(xtrain_bow, ytrain) # training the model\n\nprediction = lreg.predict_proba(xvalid_bow) # predicting on the validation set\nprediction_int = prediction[:,1] >= 0.3 # if prediction is greater than or equal to 0.3 than 1 else 0\nprediction_int = prediction_int.astype(np.int)\n\nA1 = f1_score(yvalid, prediction_int) # calculating f1 score\nprint(A1)","0786beab":"# A.2 For columns \"combine_df['tweet_lemmatized']\"\ntrain_bow = bow_lemm[:31962,:]\ntest_bow = bow_lemm[31962:,:]\n\n# splitting data into training and validation set\nxtrain_bow, xvalid_bow, ytrain, yvalid = train_test_split(train_bow, train_df['label'], random_state=42, test_size=0.3)\n\nlreg = LogisticRegression()\nlreg.fit(xtrain_bow, ytrain) # training the model\n\nprediction = lreg.predict_proba(xvalid_bow) # predicting on the validation set\nprediction_int = prediction[:,1] >= 0.3 # if prediction is greater than or equal to 0.3 than 1 else 0\nprediction_int = prediction_int.astype(np.int)\n\nA2 = f1_score(yvalid, prediction_int) # calculating f1 score\nprint(A2)","fc3c1a58":"# B.1 For columns \"combine_df['tweet_stemmed']\"\ntrain_tfidf = tfidf_stem[:31962,:]\ntest_tfidf = tfidf_stem[31962:,:]\n\nxtrain_tfidf = train_tfidf[ytrain.index]\nxvalid_tfidf = train_tfidf[yvalid.index]\n\nlreg.fit(xtrain_tfidf, ytrain)\n\nprediction = lreg.predict_proba(xvalid_tfidf)\nprediction_int = prediction[:,1] >= 0.3\nprediction_int = prediction_int.astype(np.int)\n\nB1 = f1_score(yvalid, prediction_int) # calculating f1 score\nprint(B1)","ee35b98d":"# B.2 For columns \"combine_df['tweet_lemmatized']\"\ntrain_tfidf = tfidf_lemm[:31962,:]\ntest_tfidf = tfidf_lemm[31962:,:]\n\nxtrain_tfidf = train_tfidf[ytrain.index]\nxvalid_tfidf = train_tfidf[yvalid.index]\n\nlreg.fit(xtrain_tfidf, ytrain)\n\nprediction = lreg.predict_proba(xvalid_tfidf)\nprediction_int = prediction[:,1] >= 0.3\nprediction_int = prediction_int.astype(np.int)\n\nB2 = f1_score(yvalid, prediction_int) # calculating f1 score\nprint(B2)","9c2a7dd3":"print(\"F1 - Score Chart\")\nprint(\"* F1-Score - Model using Bag-of-Words features\")\nprint(\"   F1-Score = \",A1,\" - For column tweets are stemmed\")\nprint(\"   F1-Score = \",A2,\" - For column tweets are Lemmatized\")\nprint(\"* F1-Score - Model using TF-IDF features\")\nprint(\"   F1-Score = \",B1,\" - For column tweets are stemmed\")\nprint(\"   F1-Score = \",B2,\" - For column tweets are Lemmatized\")\n","ed52d338":"### Step C : Changing all the tweets into lowercase ","c22cad3a":"### Step J : Removing words whom length is 1","3f20ecce":"### Step H : Replacing Special Characters with space","f7723581":"# Extracting Features from Cleaned Tweets","c2279d92":"## A.1 For columns \"combine_df['tweet_stemmed']\"","0226e312":"We can see above, ID & Tweet column has 49159 has values where as Label column has 31962 values.","cecf7a83":"## B.1 For columns \"combine_df['tweet_stemmed']\"","1e5b4280":"Training Data Set - has 3 columns ID, Label & Tweet. Tweet columns has tweets writen by users & Label columns contains binary values 1 & 0. Where 1 represent tweet is racist\/sexist and 0 represent tweet is not racist\/sexist","445d2832":"## B.2 For columns \"combine_df['tweet_lemmatized']\"","612b9f76":"## Now When Our Data Is Cleaned & Ready We Start Our Text Analysis\n### We will do our analysis on two columns i.e. \"tweet_stemmed\" & \"tweet_lematized\"","7286677d":"### Step K : Spelling Correction - With TextBlob Library\n* ### See how textblob works, short introduction","791b93a3":"### Step G : ReplacingPunctuations with space","9ac43f85":"### Applying TextBlob on our data set - Spelling correction","7db5557c":"## In above plots we can see most of the words are negative or racist\/sexist. With racist, hate and black being the most frequent ones.","4d489db5":"## B Building model using TF-IDF features","732cede8":"### Step D : Apostrophe Lookup","6828167d":"### C) Most common words in racist\/sexist tweets","7b225c55":"## B - TF-IDF Features","f228357d":"### Lemmatization - Lemmatization is the process of converting a word to its base form.","6aa3d154":"### Step F : Emoticon Lookup","196c601a":"## B.1 TF-IDF feature matrix - For columns \"combine_df['tweet_stemmed']\"","18f6b440":"### Step I : Replacing Numbers (integers) with space","e54bbf53":"## Data processing & cleaning\n* Step A : Converting html entities\n* Step B : Removing \"@user\" from all the tweets\n* Step C : Changing all the tweets into lowercase \n* Step D : Apostrophe Lookup\n* Step E : Short Word Lookup\n* Step F : Emoticon Lookup\n* Step H : Replacing Special Characters with space\n* Step I : Replacing Numbers (integers) with space\n* Step J : Removing words whom length is 1","ec6733d3":"# Logistic Regression Model Building: Twitter Sentiment Analysis","61b3dba0":"## A.1 Bag-Of-Words feature matrix - For columns \"combine_df['tweet_stemmed']\"","0ce19efa":"## A.2 Bag-Of-Words feature matrix - For column - combine_df['tweet_lemmatized']","f53b5e96":"### Step A : Converting html entities","b467b875":"## A.2 For columns \"combine_df['tweet_lemmatized']\"","ff23be38":"### Step E : Short Word Lookup","20341ff8":"We can see in above tweet column in both data sets Training & Testing tweets are unstructured, for better analysis we first need to structure the tweets, remove the unwanted words, replace the misspelled words with the correct ones, replace the abriviation with full words","dbb4d69c":"## We will create 2 new columns\n* One For Stemming\n* Second For Lemmatization\n\nThe difference between stemming and lemmatization is, lemmatization considers the context and converts the word to its meaningful base form, whereas stemming just removes the last few characters, often leading to incorrect meanings and spelling errors.","b36054c4":"### B) Most common words in non racist\/sexist tweets","2e5d9eee":"## B.2 TF-IDF feature matrix - For columns \"combine_df['tweet_lemmatized']\"","80255dd4":"## A - Bag-of-Words Features","5fd37003":"## A Building model using Bag-of-Words features","879285df":"## In above plots we can see most of the words are positive or neutral. With happy and love being the most frequent ones.","016fd0d1":"### Stemming - Stemming refers to the removal of suffices, like \u201cing\u201d, \u201cly\u201d, \u201cs\u201d, etc. by a simple rule-based approach.","1436ad0b":"### A - Will see the most commonly used words for both the columns i.e. \"tweet_stemmed\" & \"tweet_lematized\"","5bbe24bf":"### Step B : Removing \"@user\" from all the tweets"}}