{"cell_type":{"04efdc1c":"code","f6394b4d":"code","f8815b2b":"code","53436d1c":"code","f260d7c8":"code","756cbf0c":"code","240f1f6d":"code","97ef307a":"code","a62581c7":"code","16e2665b":"code","dfcaf400":"code","246ac276":"code","b15645df":"code","4fb7811b":"code","42cf11c0":"code","b4038d79":"code","c6d02e4e":"code","593abca8":"code","2391d486":"code","bfd3dac2":"code","68c7a565":"code","4fbb2ad4":"code","2a0c7e2c":"code","2c33ed79":"code","66e01624":"code","3910192d":"code","b2f61353":"code","16f26417":"code","277f0160":"code","bc8cb167":"code","fee117ff":"code","bddf10cb":"code","40262d86":"code","d467d616":"code","6e8d85d8":"code","3c92b386":"code","794de4d3":"code","d89ff1a6":"code","2cad64bd":"code","dd6a6310":"code","a2f6d8e6":"markdown","d623b025":"markdown","56309c1b":"markdown","f45400e5":"markdown","02c6745e":"markdown"},"source":{"04efdc1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","f6394b4d":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","f8815b2b":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","53436d1c":"train.info()","f260d7c8":"test.info()","756cbf0c":"all = pd.concat([train, test], sort = False)\nall.info()","240f1f6d":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","97ef307a":"all.info()","a62581c7":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","16e2665b":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","dfcaf400":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","246ac276":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","b15645df":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","4fb7811b":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","42cf11c0":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","b4038d79":"all.info()","c6d02e4e":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","593abca8":"all.info()","2391d486":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","bfd3dac2":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","68c7a565":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","4fbb2ad4":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","2a0c7e2c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","2c33ed79":"from sklearn.ensemble import RandomForestClassifier","66e01624":"RF_Model = RandomForestClassifier()","3910192d":"#from sklearn.model_selection import GridSearchCV","b2f61353":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","16f26417":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","277f0160":"#RF_grid_model = RF_grid.fit(X_train, y_train)","bc8cb167":"#RF_grid_model.best_estimator_","fee117ff":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","bddf10cb":"RF_Model.fit(X_train, y_train)","40262d86":"predictions = RF_Model.predict(X_test)\npredictions","d467d616":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","6e8d85d8":"all_test.head()","3c92b386":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","794de4d3":"t_pred = RF_Model.predict(TestForPred).astype(int)","d89ff1a6":"PassengerId = all_test['PassengerId']","2cad64bd":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","dd6a6310":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","a2f6d8e6":"****Final Predictions","d623b025":"****Extra Features:","56309c1b":"****Train\/Test Split","f45400e5":"****Check Accuracy","02c6745e":"### Build Random Forest"}}