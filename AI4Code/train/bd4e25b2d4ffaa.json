{"cell_type":{"697dcb52":"code","43062847":"code","4635b21f":"code","11d58734":"code","a9b5ad9f":"code","6d9b87be":"code","a1c529ba":"code","3c07e00e":"code","1638cc53":"code","82c73d86":"code","501daa2c":"code","6ff33901":"code","b7fcc86f":"code","e4cb7715":"code","a1cc65dd":"code","3b508c21":"code","b3798b58":"code","fb46af5d":"code","95299940":"code","e247d817":"code","b69f5856":"code","783b3b46":"code","e673c1f8":"code","01b9c0d2":"code","bb29bc24":"code","33848875":"code","5647ec50":"code","981cf111":"code","0a4adda6":"code","8d9534e5":"code","ae2ed15e":"code","7766220b":"code","a84690c4":"code","3667484f":"markdown","b0b98ea1":"markdown","f84fe4a7":"markdown","26f17898":"markdown","dfa5fd82":"markdown","2862e423":"markdown","d48e2561":"markdown","cbca3907":"markdown","7b71c41e":"markdown","80bc29ae":"markdown","f13cfb0f":"markdown","4e8ad3df":"markdown","4d4105fb":"markdown","83ccfcda":"markdown","894f3bd7":"markdown","babbac14":"markdown"},"source":{"697dcb52":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","43062847":"import types\nimport pandas as pd\nfrom botocore.client import Config\nimport ibm_boto3\n\ndef __iter__(self): return 0\n\n# @hidden_cell\n# The following code accesses a file in your IBM Cloud Object Storage. It includes your credentials.\n# You might want to remove those credentials before you share the notebook.\nclient_dbae081bcec045c8aa1cd81f32d9548f = ibm_boto3.client(service_name='s3',\n    ibm_api_key_id='PEkp7Oisc3R5t7fvCUy52f6Rl7PdwoDx5115w541mzqo',\n    ibm_auth_endpoint=\"https:\/\/iam.cloud.ibm.com\/oidc\/token\",\n    config=Config(signature_version='oauth'),\n    endpoint_url='https:\/\/s3.eu-geo.objectstorage.service.networklayer.com')\n\nbody = client_dbae081bcec045c8aa1cd81f32d9548f.get_object(Bucket='lifeexpectancyusingnodered-donotdelete-pr-wi6myoarr1xqhw',Key='life.csv')['Body']\n# add missing __iter__ method, so pandas accepts body as file-like object\nif not hasattr(body, \"__iter__\"): body.__iter__ = types.MethodType( __iter__, body )\n\nlife = pd.read_csv(body)\nlife.head()\n","4635b21f":"life.head()","11d58734":"life.info()","a9b5ad9f":"life.describe()","6d9b87be":"life.columns","a1c529ba":"sns.pairplot(life)","3c07e00e":"sns.distplot(life['life'])","1638cc53":"sns.heatmap(life.corr())","82c73d86":"X = life[['year', 'status','adultmortality', 'infantdeaths', 'alcohol','percentageexpenditure', 'hepatitisb', 'measles', 'bmi','underfivedeaths', 'polio', 'totalexpenditure', 'dip', 'hiv\/aids','gdp', 'population', 'thinness119', 'thinness59', 'incomecomp','schooling']]\ny = life['life']","501daa2c":"from sklearn.model_selection import train_test_split","6ff33901":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)","b7fcc86f":"from sklearn.linear_model import LinearRegression","e4cb7715":"lm = LinearRegression()","a1cc65dd":"lm.fit(X_train,y_train)","3b508c21":"# print the intercept\nprint(lm.intercept_)","b3798b58":"coeff_df = pd.DataFrame(lm.coef_,X.columns,columns=['Coefficient'])\ncoeff_df","fb46af5d":"predictions = lm.predict(X_test)","95299940":"plt.scatter(y_test,predictions)","e247d817":"sns.distplot((y_test-predictions),bins=50);","b69f5856":"from sklearn import metrics","783b3b46":"print('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","e673c1f8":"!pip install watson-machine-learning-client","01b9c0d2":"from watson_machine_learning_client import WatsonMachineLearningAPIClient","bb29bc24":"# @hidden_cell\nwml_credentials={\n  \"apikey\": \"7yNogqJaZU69v3KWNswJrRwNcVLjQyhteimSOn3sYZWM\",\n  \"instance_id\": \"db8e23cf-072b-48c3-9bd5-96f63e840751\",\n  \"url\": \"https:\/\/eu-gb.ml.cloud.ibm.com\"\n}","33848875":"client = WatsonMachineLearningAPIClient( wml_credentials )","5647ec50":"# @hidden_cell\nmodel_props = {client.repository.ModelMetaNames.AUTHOR_NAME: \"Kaustubh\", \n               client.repository.ModelMetaNames.AUTHOR_EMAIL: \"kaustubh19j@gmail.com\", \n               client.repository.ModelMetaNames.NAME: \"life\"}","981cf111":"model_artifact =client.repository.store_model(lm, meta_props=model_props)","0a4adda6":"published_model_uid = client.repository.get_model_uid(model_artifact)","8d9534e5":"published_model_uid","ae2ed15e":"deployment = client.deployments.create(published_model_uid, name=\"life\")","7766220b":"scoring_endpoint = client.deployments.get_scoring_url(deployment)","a84690c4":"scoring_endpoint","3667484f":"## This notebook is for your reference","b0b98ea1":"___\n\n","f84fe4a7":"### Change the following cell to match your credentials","26f17898":"### Write the following code as is","dfa5fd82":"## Train Test Split\n\nNow let's split the data into a training set and a testing set. We will train out model on the training set and then use the test set to evaluate the model.","2862e423":"## Creating and Training the Model","d48e2561":"# EDA\n\nLet's create some simple plots to check out the data!","cbca3907":"### In the following cell, change 'lm' to whatever your regression varialbe is. ","7b71c41e":"### Check out the Data","80bc29ae":"## Training a Linear Regression Model\n\nLet's now begin to train out regression model! We will need to first split up our data into an X array that contains the features to train on, and a y array with the target variable, in this case the Price column. We will toss out the Address column because it only has text info that the linear regression model can't use.\n\n### X and y arrays","f13cfb0f":"**Residual Histogram**","4e8ad3df":"## Predictions from our Model\n\nLet's grab predictions off our test set and see how well it did!","4d4105fb":"## Model Evaluation\n\nLet's evaluate the model by checking out it's coefficients and how we can interpret them.","83ccfcda":"## Regression Evaluation Metrics\n\n\nHere are three common evaluation metrics for regression problems:\n\n**Mean Absolute Error** (MAE) is the mean of the absolute value of the errors:\n\n$$\\frac 1n\\sum_{i=1}^n|y_i-\\hat{y}_i|$$\n\n**Mean Squared Error** (MSE) is the mean of the squared errors:\n\n$$\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2$$\n\n**Root Mean Squared Error** (RMSE) is the square root of the mean of the squared errors:\n\n$$\\sqrt{\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2}$$\n\nComparing these metrics:\n\n- **MAE** is the easiest to understand, because it's the average error.\n- **MSE** is more popular than MAE, because MSE \"punishes\" larger errors, which tends to be useful in the real world.\n- **RMSE** is even more popular than MSE, because RMSE is interpretable in the \"y\" units.\n\nAll of these are **loss functions**, because we want to minimize them.","894f3bd7":"### copy paste the following cells as - is","babbac14":"    from sklearn.datasets import load_boston\n    boston = load_boston()\n    print(boston.DESCR)\n    boston_df = boston.data"}}