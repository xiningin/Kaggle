{"cell_type":{"071df1ad":"code","531cbaa4":"code","e7b2f29f":"code","aa915cd0":"code","9bcdfcf7":"code","ba93f459":"code","f25209e1":"code","7899f9f9":"code","2984d702":"code","8974840e":"code","cae048b2":"code","fdd567b6":"code","b2e19833":"code","3dca944f":"markdown"},"source":{"071df1ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\nimport plotly.graph_objs as go\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","531cbaa4":"# The data installation\ntimesData = pd.read_csv('..\/input\/world-university-rankings\/timesData.csv')","e7b2f29f":"# The data info\ntimesData.info()","aa915cd0":"df = timesData.iloc[:100, :]\n\ntrace1 = go.Scatter(\n    x = df.world_rank,\n    y = df.citations,\n    mode = 'lines',\n    name = 'citations',\n    marker = dict(color = 'rgba(19, 100, 22, 0.8)'),\n    text = df.university_name\n)\n\ntrace2 = go.Scatter(\n    x = df.world_rank,\n    y = df.teaching,\n    mode = 'lines+markers',\n    name = 'teaching',\n    marker = dict(color = 'rgba(70, 50, 80, 0.8)'),\n    text = df.university_name\n)\ndata = [trace1, trace2]\nlayout = dict(title = 'Citation and Teaching vs World Ranks of top 100 Universities',\n             xaxis = dict(title = 'Rank', ticklen = 5, zeroline = False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n","9bcdfcf7":"df2014 = timesData[timesData.year == 2014].iloc[:100, :]\ndf2015 = timesData[timesData.year == 2015].iloc[:100, :]\ndf2016 = timesData[timesData.year == 2016].iloc[:100, :]\n\ntrace1 = go.Scatter(\n    x =df2014.world_rank,\n    y = df2014.citations,\n    mode = 'markers',\n    name = '2014',\n    marker = dict(color = 'rgba(240, 120, 240, 0.8)'),\n    text = df2014.university_name\n)\n\ntrace2 = go.Scatter(\n    x =df2015.world_rank,\n    y = df2015.citations,\n    name = '2015',\n    mode = 'markers',\n    marker = dict(color = 'rgba(100, 100, 100, 0.8)'),\n    text = df2015.university_name\n)\n\ntrace3 = go.Scatter(\n    x =df2016.world_rank,\n    y = df2016.citations,\n    name = '2016',\n    mode = 'markers',\n    marker = dict(color = 'rgba(50, 70, 50, 0.8)'),\n    text = df2016.university_name\n)\n\ndata = [trace1, trace2, trace3]\n\nlayout = dict(title = 'Citations vs Rank of top 100 Universities for 2014, 2015, 2016',\n             xaxis = dict(title= 'World Rank', ticklen = 5, zeroline = False),\n             yaxis = dict(title= 'Citations', ticklen = 5, zeroline = False))\n\nfig = dict(data = data, layout = layout)\niplot(fig)\n            ","ba93f459":"trace1 = go.Bar(\n    x = df2014.university_name,\n    y = df2014.citations,\n    name = 'Citations',\n    marker = dict(color= 'rgba(120, 88, 200, 0.8)', line = dict(color='rgba(0,0,0)', width = 1.5)),\n    text = df2014.country\n)\ntrace2 = go.Bar(\n    x = df2014.university_name,\n    y = df2014.teaching,\n    name = 'Teaching',\n    marker = dict(color= 'rgba(63, 27, 142, 0.8)', line = dict(color='rgba(0,0,0)', width = 1.5)),\n    text = df2014.country\n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(barmode = 'group', width=2000, height=300)\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n            ","f25209e1":"df2016 = timesData[timesData.year == 2016].iloc[:7, :]\npie1 = df2016.num_students\n\npie1_list = [float(each.replace(',', '.')) for each in df2016.num_students]\nlabels = df2016.university_name\n\nfig = {\n    \"data\": [\n        {\n            \"values\": pie1_list,\n            \"labels\": labels,\n            \"domain\": {\"x\": [0, .5]},\n            \"name\": \"Number of Students Rates\",\n            \"hoverinfo\": \"label+percent+name\",\n            \"hole\": .3,\n            \"type\": \"pie\"\n        },\n    ],\n    \"layout\": {\n        \"title\": \"Num of Student Rates\",\n        \"annotations\": [\n            {\"font\": {\"size\": 20},\n             \"showarrow\": False,\n             \"text\": \"Number of Students\",\n             \"x\": 0.2,\n             \"y\": 1\n            },\n        ]\n    }\n}\n\niplot(fig)\n","7899f9f9":"df2016_new = timesData[timesData.year == 2016].iloc[:25, :]\nnum_students_size = pie1_list\ninternational_color = df2016_new.international\n\ndata = [\n    {\n        \"y\": df2016_new.teaching,\n        \"x\": df2016_new.world_rank,\n        'mode': 'markers',\n        \"marker\": {\n            \"color\": [float(each) for each in international_color],\n            'size': num_students_size * 5,\n            'showscale': True,\n        },\n        \"text\": df2016_new.university_name\n    }\n]\n\n\nfig = go.Figure(data=data)\n\niplot(fig)\n            ","2984d702":"x2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\ntrace1 = go.Histogram(\n    x = x2011,\n    opacity = 0.75,\n    name = '2011',\n    marker = dict(color='rgba(200, 50, 96, 0.8)')\n)\n\ntrace2 = go.Histogram(\n    x = x2012,\n    opacity = 0.75,\n    name = '2012',\n    marker = dict(color='rgba(100, 88, 22, 0.7)')\n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(barmode='overlay',\n                  title= 'student-staff ratio for 2011, 2012',\n                  )\nfig = dict(data=data, layout=layout)\n\niplot(fig)","8974840e":"x2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize=(10,10))\nwordcloud = WordCloud(\n    background_color = 'white',\n    width= 512,\n    height= 384\n).generate(\" \".join(x2011))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph2.png')","cae048b2":"x2015 = timesData[timesData.year == 2015]\n\ntrace0 = go.Box(\n    y=x2015.total_score,\n    name='total score of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)'\n    )\n)\n\ntrace1 = go.Box(\n    y=x2015.research,\n    name='research of universities in 2015',\n    marker = dict(\n        color = 'rgb(50, 50, 28)'\n    )\n)\n\ndata = [trace0, trace1]\niplot(data)","fdd567b6":"import plotly.figure_factory as ff\n\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:, ['research', 'international', 'total_score']]\ndata2015['index'] = np.arange(1,len(data2015)+1)\n\nfig = ff.create_scatterplotmatrix(\n    data2015, diag='box', index='index', colormap='Portland', colormap_type='cat',\n                                 height=700,\n                                 width=700\n                                 )\niplot(fig)\n","b2e19833":"trace1 = go.Scatter3d(\n    x = dataframe.world_rank,\n    y = dataframe.research,\n    z = dataframe.citations,\n    mode = 'markers',\n    marker = dict(\n        size=10,\n        color=[float(each) for each in dataframe.citations],\n        colorscale='portland'\n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin = dict(\n        l = 0,\n        r = 0,\n        b = 0,\n        t = 0,\n    )\n)\n\nfig = go.Figure(data=data, layout = layout)\n\niplot(fig)","3dca944f":"# **Introduction**\n\nThis is a test kernel which visualize the word universities rankings dataset.\n"}}