{"cell_type":{"f7fba83e":"code","d4e93bdf":"code","ec491785":"code","f9f5a098":"code","07d32710":"code","68d807a7":"code","6386992e":"code","b2e942c0":"code","739b260a":"code","b7300e9f":"code","9e6e93f9":"code","d978da7f":"code","ff03ec8a":"code","9fb3a93f":"code","f874b665":"code","ab367439":"code","605f9643":"code","0b964159":"code","83a9dfc7":"code","e2ce0bbd":"code","1ea71605":"code","30e95a94":"code","39635621":"code","ec7c3c91":"code","eeed18ae":"code","b45f58e0":"code","27209982":"code","e46254bc":"code","baba5bc1":"code","eea3bfdb":"code","a99b034b":"markdown","90fed761":"markdown","b4e0c9e9":"markdown","fd62f5c3":"markdown","7120993a":"markdown","8ac68a55":"markdown","fcb15c0c":"markdown","6bd1b088":"markdown","210e0f65":"markdown","7a3bd4ad":"markdown","9ab006b8":"markdown","4da52c2a":"markdown","75309935":"markdown","a4bda659":"markdown","77155106":"markdown","ce0835cb":"markdown","959d5c29":"markdown"},"source":{"f7fba83e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline","d4e93bdf":"# ignore warning about \"Dtypes\"","ec491785":"# print out the number of rows and columns (dimensions)","f9f5a098":"# print the names of the columns","07d32710":"# select columns","68d807a7":"# print first 5 rows","6386992e":"# print last 5 rows","b2e942c0":"# print column information","739b260a":"# print summary statistics per column","b7300e9f":"# print first 2 rows","9e6e93f9":"id_columns = ['Make', 'Model', 'Class', 'Drive', 'Transmission',\n            'Transmission Descriptor', 'Engine Cylinders', 'Engine Displacement', 'Turbocharger',\n           'Supercharger', 'Fuel Type', 'Fuel Type 1',\n            'Combined MPG (FT1)']\n\n# print number of duplicates","d978da7f":"# print example of duplicates","ff03ec8a":"# print counts for Make","9fb3a93f":"# print counts for Class","f874b665":"# print counts for Drive, remember Drive had a few missing values","ab367439":"# print counts for Turbocharger","605f9643":"# print counts for Supercharger","0b964159":"# print counts for Fuel Type","83a9dfc7":"# print distribution for Engine Cylinders","e2ce0bbd":"# print distribution for Engine Displacement","1ea71605":"# print distribution for Combined MPG (FT1)","30e95a94":"# print number of non missing values for Drive","39635621":"# fill missing values for Turbocharger and Supercharger","ec7c3c91":"# print number of outliers for MPG","eeed18ae":"# create clean dataset","b45f58e0":"# print pair plot","27209982":"# print boxplot for Drive vs MPG","e46254bc":"# print boxplot for Turbocharger vs MPG","baba5bc1":"# print boxplot for Supercharger vs MPG","eea3bfdb":"# print boxplot for Engine Cylinders vs MPG","a99b034b":"There are various incarnations of the boxplot (violinplot, swarmplot) that may give you more information but in this case that would be overkill. ","90fed761":"\n### Boxplots\n\nWhen it comes to relationship between categorical values and numerical values, boxplots are the way to go. They display the distribution of the numerical values per category.","b4e0c9e9":"We will first read the data in and look at some basic information.","fd62f5c3":"There are too many columns to analyse right now so I'm going to focus on a few. Columns related to MPG all say the same thing so I'll pick one. Also the columns that come after the MPG columns don't look very relevant so we'll skip them as well.","7120993a":"### Missing Values\n\nDealing with missing values is necessary because ML algorithm don't know what to do with _NaN_ values. In most programming languages _NaN_ is a special value that is neither numeric nor character. So it requires manual intervention to make sure _NaN_ values are dealt with correctly.\n\nThere are a number of strategies we can apply here and they are dependent on what the source of the missing values is. There is various research available on this topic, referred to as missing value imputation, but we'll stick to some simple solutions.\n\n#### Errors\n\nWhen missing values are the result of errors, whether in the data gathering part or the data collection part (i.e. wrong query), I think it is best to ignore the records if possible.","8ac68a55":"## Relationship Analysis\n\nThe above is all to do with cleaning the data to make modeling easier. But before we move on to that stage we can still extract some more information from the dataset by looking at relationships between variables. The best way to do this is through visualisations.","fcb15c0c":"**All prior information about the data is an assumption until confirmed by the data**","6bd1b088":"Will come back to the missing values.","210e0f65":"We can drop a few more columns from the identifier columns which will probably result in more duplicates but we'll leave it at that.","7a3bd4ad":"The easiest way to get to know your data is to have a look at it in its raw form.","9ab006b8":"\n### Numerical values\n\nWe looked at summary statistics for the numerical values but we can go a little deeper by looking at the distribution of values.","4da52c2a":"Next we go one step deeper and look at all the data and summaries of the values.","75309935":"#### Laziness\n\nSometimes a missing values implies the information is either not known or not applicable. In these case we simply make it explicit by providing a fill value. There are other methods of \"filling\" the gaps, see the [pandas documentation](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.fillna.html) for more information.","a4bda659":"The purpose of this notebook is to work through an example of a data analysis. We will show how we perform some common preprocessing \/ analysis tasks to gather more information about the data. This will inform and prepare us for the modelling step.\n\nThe data we will be looking at is taken from https:\/\/www.kaggle.com\/epa\/fuel-economy. If it is not already in the *\/kaggle\/input\/fuel-economy* folder then you can add it as follows: Go to file --> Add or upload data. Look for \"fuel economy\" and click on _Add_ next to **Vehicle Fuel Economy Estimates, 1984-2017**.\n\nThe goal with this dataset is to see if we can predict the fuel economy of a car based on some of its characteristics.","77155106":"### Categorical Values\n\nWe summarise categorical values by looking at their counts.","ce0835cb":"### Duplicates\n\nDuplicated data can be caused by errors during data entry or during data collection. For example, your SQL query may have included a join which resulted in duplicates. If all records were duplicated then it's not a huge problem other than that you have too much data and training your model may take extra time. However if only some records are duplicated their effect on the model results will be enlarged.\n\nIn this example it's not straightforward that we're dealing with duplicates. Take the first rows:","959d5c29":"### Outliers\n\nOutliers can too be caused by errors (e.g. misreading in measurement equipment) or they might not be representative of the relationships we're considering. In either case it's a matter of detecting them and removing them.\n\nA simple way of detecting outliers is to consider the mean\/median and add one or two standard deviations. Anything above these values can be considered an outlier. "}}