{"cell_type":{"f74dc4fd":"code","ecb0f149":"code","104e268c":"code","8278c9d6":"code","4fad4762":"code","c0cc7ab7":"code","52cf5e27":"code","639966fb":"code","983677d2":"code","bc3e4a38":"code","7819a300":"code","fa0a4f56":"code","b490235c":"code","63dcf98a":"code","992d91c7":"code","9603c700":"code","202d92d0":"code","863035db":"code","7ab1fe81":"code","a33f672c":"code","abb001b1":"code","d4333efc":"code","0a1c8ef5":"code","fc5ba34f":"code","8b57cac2":"code","e1471d04":"code","5820b74c":"code","9608d83d":"code","6e122340":"code","73b195e9":"code","dbc3c07a":"code","b0f958f1":"code","109406d6":"code","1077db14":"code","651e903e":"code","5add74af":"code","a9a44896":"code","51b26dc8":"code","dce674c0":"code","544f06d7":"code","e8416471":"code","928c4b9f":"code","9686f3a6":"code","4737b8a2":"code","1da87406":"code","5d1a7e28":"code","5d356a1b":"code","4df87d3f":"code","31f41896":"code","c93edd44":"code","1ea3d466":"code","e58badd0":"code","da225b42":"code","137985f8":"code","2ac6f6de":"code","66a585aa":"code","87ae7972":"code","95a23b05":"markdown","192afae4":"markdown","2bae5b87":"markdown","b74d4b41":"markdown","bb934b6c":"markdown","479411cc":"markdown","3691c989":"markdown","09292d3c":"markdown","2bfcbcf4":"markdown","cb1ead34":"markdown","66fc4231":"markdown","88d6e871":"markdown","c07adb49":"markdown","817763e1":"markdown","c1a5379f":"markdown"},"source":{"f74dc4fd":"#Importing Libraries\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM,Dense\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt","ecb0f149":"import os\nos.listdir(\"..\/input\")","104e268c":"data = pd.read_csv('..\/input\/aapl-stock-price\/AAPL.csv')","8278c9d6":"data","4fad4762":"data.info()","c0cc7ab7":"data.describe()","52cf5e27":"data['Date'] = pd.to_datetime(data['Date'], dayfirst=True)","639966fb":"data['Avg_price'] = data[['High','Low']].mean(axis=1)\ndata.head()","983677d2":"data.drop(['Open','Close','High','Low','Volume','Adj Close'], axis=1, inplace=True)\ndata.head()","bc3e4a38":"data.set_index('Date', inplace=True)\ndata.head()","7819a300":"plt.figure(figsize=(20,12))\nplt.plot(data)\nplt.xlabel('Year', fontsize=15)\nplt.ylabel('Price', fontsize=15)","fa0a4f56":"data.loc['1990-01-02']","b490235c":"data.loc['2009-01-02']","63dcf98a":"data.loc['2010-01-04']","992d91c7":"data.loc['2011-01-03']","9603c700":"len(data.loc['1990-01-02':'2009-01-02'])","202d92d0":"data = data.iloc[4792:]\ndata","863035db":"plt.figure(figsize=(20,10))\nplt.plot(data)\nplt.xlabel('Year', fontsize=15)\nplt.ylabel('Price', fontsize=15)","7ab1fe81":"len(data)","a33f672c":"# Days in a year\nlen(data.loc['2009-01-05':'2010-01-05'])","abb001b1":"len(data.loc['2011-01-05':'2012-01-04'])","d4333efc":"data.index","0a1c8ef5":"len(data.loc['2021-05-30':'2021-11-30'])","fc5ba34f":"test_size = 128\ncutoff = len(data)- test_size","8b57cac2":"train = data.iloc[:cutoff]\ntest = data.iloc[cutoff:]","e1471d04":"len(train)","5820b74c":"len(test)","9608d83d":"scaler = MinMaxScaler()","6e122340":"# WE ONLY FIT TO TRAININ DATA, OTHERWISE WE ARE CHEATING ASSUMING INFO ABOUT TEST SET\nscaler.fit(train)","73b195e9":"scaled_train = scaler.transform(train)\nscaled_test = scaler.transform(test)","dbc3c07a":"from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nlength = 126 #(6 months days considering 252 average days in a year)\ngenerator = TimeseriesGenerator(scaled_train, scaled_train, length=length, batch_size=32)","b0f958f1":"from tensorflow.keras.layers import Dropout","109406d6":"model = Sequential()\nn_features = 1\n\nmodel.add(LSTM(100, input_shape=(length, n_features), return_sequences=True))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(50, return_sequences=True))\nmodel.add(Dropout(0.25))\nmodel.add(LSTM(25))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')","1077db14":"X,y = generator[0]","651e903e":"X.shape","5add74af":"y.shape","a9a44896":"model.summary()","51b26dc8":"validation_generator = TimeseriesGenerator(scaled_test,scaled_test, length=length, batch_size=32)","dce674c0":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss',patience=10)","544f06d7":"# fit model\nmodel.fit_generator(generator,epochs=40,\n                    validation_data=validation_generator,\n                    callbacks=[early_stop])","e8416471":"loss = pd.DataFrame(model.history.history)\nloss.plot()","928c4b9f":"test_predictions = []\n\nfirst_eval_batch = scaled_train[-length:]\ncurrent_batch = first_eval_batch.reshape((1, length, n_features))\n\nfor i in range(len(test)):\n    \n    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n    current_pred = model.predict(current_batch)[0]\n    \n    # store prediction\n    test_predictions.append(current_pred) \n    \n    # update batch to now include prediction and drop first value\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)","9686f3a6":"true_predictions = scaler.inverse_transform(test_predictions)\ntest['Predictions'] = true_predictions\ntest","4737b8a2":"plt.figure(figsize=(15,8))\nplt.plot(test)","1da87406":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(test['Avg_price'],test['Predictions']))","5d1a7e28":"from dateutil.parser import parse\nfrom dateutil.rrule import rrule, DAILY, MO, TU, WE, TH, FR\n\nresult = rrule(\n  DAILY,\n  byweekday=(MO,TU,WE,TH,FR),\n  dtstart=parse('2021-12-01'),\n  until=parse('2022-05-31')\n)\nprint(list(result))","5d356a1b":"list(result)","4df87d3f":"len(list(result))","31f41896":"list(result)[0].strftime('%Y-%m-%d')","c93edd44":"forecast_date = []\nfor i in list(result):\n  forecast_date.append(i.strftime('%Y-%m-%d'))\n\nforecast_date = pd.Series(forecast_date)\nforecast_date","1ea3d466":"forecast_date = pd.to_datetime(forecast_date, dayfirst=True)\nforecast_date","e58badd0":"forecast = []\n# Replace periods with whatever forecast length you want\nperiods = 130\n\nfirst_eval_batch = scaled_full_data[-length:]\ncurrent_batch = first_eval_batch.reshape((1, length, n_features))\n\nfor i in range(periods):\n    \n    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n    current_pred = model.predict(current_batch)[0]\n    \n    # store prediction\n    forecast.append(current_pred) \n    \n    # update batch to now include prediction and drop first value\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)","da225b42":"forecast = scaler.inverse_transform(forecast)\nforecast_df = pd.DataFrame(data=forecast,index=forecast_date,\n                           columns=['Forecast'])\nforecast_df","137985f8":"data.plot()\nforecast_df.plot()","2ac6f6de":"ax = data.plot()\nforecast_df.plot(ax=ax)\n","66a585aa":"ax = data.plot()\nforecast_df.plot(ax=ax)\nplt.xlim('2021-01-01','2022-05-31')","87ae7972":"model.save('AAPL_model.h5')","95a23b05":"Split the data into a train\/test where the test set is the last 6 months of data.\n","192afae4":"# Apple Stock Price Prediction using LSTM","2bae5b87":"## Prediction","b74d4b41":"## Scale Data","bb934b6c":"We are creating an LSTM model to forecast Apple stock prices for next 6 months (Dec 2021 - May 2022)","479411cc":"Create a TimeSeriesGenerator object based off the scaled_train data. length should be eual to the number that can capture the seasonality or patten or behaviour how prices increase or decrese in a cycle.","3691c989":"## Forecasting","09292d3c":"## Time Series Generator","2bfcbcf4":"## Splitting into train and test data","cb1ead34":"## Data","66fc4231":"Use a MinMaxScaler to scale the train and test sets into scaled versions.","88d6e871":"It can be seen that from 1990 to 2009, the stock value seems almost constant, it is better to take the data 2009 onwards and make a model with that data","c07adb49":"### Calculate RMSE","817763e1":"## Create the Model","c1a5379f":"About the data, it has been taken from Yahoo Finance website (https:\/\/finance.yahoo.com\/quote\/AAPL) and data contains values from 02-01-1990 to 30-11-2021"}}