{"cell_type":{"d5e1572b":"code","58fe45b1":"code","e9360de7":"code","ecc38fd8":"code","dd6de48c":"code","a295cb5a":"code","5e895039":"code","ee79aaed":"code","170c7293":"code","302f8f48":"code","36c24928":"code","e21bf8fe":"code","6a98870d":"code","0e835f84":"code","c5434724":"code","9377f51a":"code","5f1d8962":"code","bdc56042":"code","1be9302c":"code","faa531a1":"code","fc236ee3":"code","be8b58ff":"code","ebab3123":"code","a051e152":"code","cd6afa22":"code","2b022072":"code","dff8cbe5":"code","950d95c6":"code","327a33bb":"code","be15258e":"code","0efadffe":"code","410e34dc":"code","a6407603":"code","f560f53b":"code","9728c819":"code","1e978866":"code","a4686627":"code","aca31b5f":"code","9b6df238":"code","d198c738":"code","b1098826":"code","5f77210a":"code","550daa9b":"code","83e5c750":"code","e9289f7d":"code","68d530cd":"code","2cfe4117":"code","9bc62189":"code","b3a40468":"code","1d5ab457":"code","8c8b96fd":"code","0f6ffb8e":"code","0c747e4d":"code","facfda7c":"code","e5826603":"code","4712c36f":"code","55106918":"markdown","fabd7126":"markdown","bb103ea4":"markdown","cdd91cc5":"markdown","9d795362":"markdown","c830707b":"markdown","06f552f1":"markdown","c053a056":"markdown","9ee4d3d7":"markdown","b2f1f368":"markdown","fb4a0700":"markdown","f895fd0b":"markdown","535bca07":"markdown","a0f7ed13":"markdown","b84ba10c":"markdown","eb06f526":"markdown","8145836c":"markdown","c8dc8c41":"markdown","4ccf58a5":"markdown","6298a696":"markdown","fda5128e":"markdown","a31875de":"markdown","c3fd3642":"markdown","7bb3dd99":"markdown","ab9e19ee":"markdown","ea7bfa39":"markdown","cd383fe9":"markdown","4513032e":"markdown","7d585a55":"markdown","3016432a":"markdown","87fa6dda":"markdown","129b1fce":"markdown","ac5af02b":"markdown","637d410b":"markdown","29255d16":"markdown","e576cded":"markdown"},"source":{"d5e1572b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58fe45b1":"import matplotlib.pyplot as plt\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\nimport pandas_profiling\nimport pprint\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.linear_model import Lasso, Ridge, ElasticNet\nfrom sklearn.metrics import make_scorer, mean_squared_error, r2_score\nfrom sklearn.model_selection import cross_validate, KFold, train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler","e9360de7":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e ID \u3092\u9000\u907f\ntest_ids = test['Id']","ecc38fd8":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\ntrain.info()","dd6de48c":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ntest.info()","a295cb5a":"# null \u3092\u542b\u3080\u9805\u76ee\u3068\u4ef6\u6570\u306e\u8868\u793a\ndef display_null_info(target):\n    df = target.isnull().sum()[target.isnull().sum() > 0].sort_values(ascending=False)\n    print(df)","5e895039":"display_null_info(train)","ee79aaed":"display_null_info(test)","170c7293":"# \u5fc5\u8981\u306a\u3068\u304d\u3060\u3051\u5b9f\u884c\n# profile = train.profile_report()\n# profile.to_file('house_price.html')","302f8f48":"# \u8981\u7d04\u7d71\u8a08\u91cf\ntrain['SalePrice'].describe()","36c24928":"# \u30b9\u30bf\u30fc\u30b8\u30a7\u30b9\u306e\u516c\u5f0f\nsturges = math.ceil(1 + math.log2(len(train)))\nprint('\u968e\u7d1a\u6570\uff1a', sturges)","e21bf8fe":"# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u8868\u793a\nsns.displot(train['SalePrice'], bins=sturges, kde=True)","6a98870d":"# \u6b6a\u5ea6\nprint('\u6b6a\u5ea6\uff1a', train['SalePrice'].skew())","0e835f84":"# \u5bfe\u6570\u5909\u63db\u3057\u305f\u30b0\u30e9\u30d5\nsale_price_log1p_df = train.copy()\ntrain['SalePrice'] = np.log1p(sale_price_log1p_df['SalePrice'])\n\nsns.displot(train['SalePrice'], bins=sturges, kde=True)","c5434724":"# \u6b6a\u5ea6\nprint('\u5bfe\u6570\u5909\u63db\u5f8c\u306e\u6b6a\u5ea6\uff1a', train['SalePrice'].skew())","9377f51a":"def completing_null_value(df, column_name, value):\n    print(column_name)\n    print('\u88dc\u5b8c\u524d null \u4ef6\u6570:', df[column_name].isnull().sum(axis=0))\n    \n    if type(value) == str:\n        print('\u88dc\u5b8c\u524d\u306e\u5024\u306e\u7a2e\u985e:', df[column_name].unique())\n    \n    df[column_name].fillna(value, inplace=True)\n    \n    if type(value) == str:\n        print('\u88dc\u5b8c\u5f8c\u306e\u5024\u306e\u7a2e\u985e:', df[column_name].unique())\n    \n    print()","5f1d8962":"data = pd.concat([train, test], sort=False)\n\n# PoolQC(\u30d7\u30fc\u30eb\u306e\u54c1\u8cea)\n# \u6b20\u640d\u30c7\u30fc\u30bf\u304c\u591a\u3044\u304c\u30a2\u30e1\u30ea\u30ab\u3068\u3044\u3048\u3069\u305d\u308a\u3083\u30d7\u30fc\u30eb\u304c\u3042\u308b\u5bb6\u306f\u5c11\u306a\u3044\u3088\u306d\u3063\u3066\u611f\u3058\ncompleting_null_value(data, 'PoolQC', 'NA')\n\n# MiscFeature(\u305d\u306e\u4ed6\u306e\u6a5f\u80fd)\n# \u30a8\u30ec\u30d9\u30fc\u30bf\u3068\u304b\u30c6\u30cb\u30b9\u30b3\u30fc\u30c8\u3068\u304b\u7279\u6b8a\u306a\u8a2d\u5099\u7b49\u306e\u30c7\u30fc\u30bf\u306e\u3088\u3046\u306a\u306e\u3067\u30d7\u30fc\u30eb\u540c\u69d8\u3001\u305d\u3046\u3044\u3063\u305f\u8a2d\u5099\u306f\u5c11\u306a\u3044\u3060\u308d\u3046\u3068\u60f3\u50cf\u3067\u304d\u308b\ncompleting_null_value(data, 'MiscFeature', 'NA')\n\n# Alley(\u7269\u4ef6\u3078\u306e\u8def\u5730)\n# \u7802\u5229\u3084\u8217\u88c5\u3055\u308c\u3066\u3044\u308b\u8def\u5730\u4ee5\u5916\u306f null \u3068\u3044\u3046\u3053\u3068\u3060\u304c\u8def\u5730\u306b\u9762\u3057\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u3053\u3068\uff1f\ncompleting_null_value(data, 'Alley', 'NA')\n\n# Fence(\u30d5\u30a7\u30f3\u30b9\u306e\u54c1\u8cea)\ncompleting_null_value(data, 'Fence', 'NA')\n\n# FireplaceQu(\u6696\u7089\u306e\u54c1\u8cea)\u306e\u88dc\u5b8c\ncompleting_null_value(data, 'FireplaceQu', 'NA')\n\n# GarageCond(\u30ac\u30ec\u30fc\u30b8\u306e\u72b6\u614b)\ncompleting_null_value(data, 'GarageCond', 'NA')\n\n# GarageQual(\u30ac\u30ec\u30fc\u30b8\u306e\u54c1\u8cea)\ncompleting_null_value(data, 'GarageQual', 'NA')\n\n# GarageFinish(\u30ac\u30ec\u30fc\u30b8\u306e\u5185\u88c5\u4ed5\u4e0a\u3052\u306e\u7a2e\u985e)\ncompleting_null_value(data, 'GarageFinish', 'NA')\n\n# GarageType(\u30ac\u30ec\u30fc\u30b8\u306e\u5834\u6240)\ncompleting_null_value(data, 'GarageType', 'NA')\n\n# BsmtCond(\u5730\u4e0b\u5ba4\u306e\u72b6\u614b)\ncompleting_null_value(data, 'BsmtCond', 'NA')\n\n# BsmtExposure(\u5730\u4e0b\u5ba4\u304b\u3089\u306e\u51fa\u53e3\u3084\u5ead\u306e\u58c1\u306e\u8a55\u4fa1)\ncompleting_null_value(data, 'BsmtExposure', 'NA')\n\n# BsmtQual(\u5730\u4e0b\u5ba4\u306e\u9ad8\u3055\u306e\u8a55\u4fa1)\ncompleting_null_value(data, 'BsmtQual', 'NA')\n\n# BsmtFinType1(\u5730\u4e0b\u5ba4\u306e\u5b8c\u6210\u9762\u7a4d\u306e\u8a55\u4fa1)\ncompleting_null_value(data, 'BsmtFinType1', 'NA')\n\n# BsmtFinType2(\u5730\u4e0b\u5ba4\u306e\u5b8c\u6210\u9762\u7a4d\u306e\u8a55\u4fa1 \u8907\u6570\u7a2e\u985e\u3042\u308b\u5834\u5408)\ncompleting_null_value(data, 'BsmtFinType2', 'NA')\n\n# MasVnrType(\u7d44\u7a4d\u9020\u306e\u30d9\u30cb\u30e4\u58c1\u306e\u7a2e\u985e)\n# \u30b0\u30b0\u3063\u305f\u3051\u3069\u3088\u304f\u5206\u304b\u3089\u3093\u58c1\u3063\u3066\u611f\u3058\ncompleting_null_value(data, 'MasVnrType', 'NA')\n\n# MSZoning(\u58f2\u5374\u5148\u306e\u533a\u57df\u306e\u533a\u5206)\ncompleting_null_value(data, 'MSZoning', 'NA')\n\n# Functional(\u5bb6\u5ead\u3067\u306e\u6a5f\u80fd\u6027)\n# \u3088\u304f\u5206\u304b\u3089\u3093\u5909\u6570\ncompleting_null_value(data, 'Functional', 'NA')\n\n# Utilities(\u5229\u7528\u53ef\u80fd\u306a\u96fb\u6c17\u3001\u6c34\u9053\u3001\u30ac\u30b9\u3068\u304b\u306e\u516c\u5171\u30b5\u30fc\u30d3\u30b9\u306e\u7a2e\u985e)\ncompleting_null_value(data, 'Utilities', 'NA')\n\n# KitchenQual(\u30ad\u30c3\u30c1\u30f3\u306e\u54c1\u8cea)\ncompleting_null_value(data, 'KitchenQual', 'NA')\n\n# Exterior1st(\u5916\u58c1\u306e\u7a2e\u985e)\ncompleting_null_value(data, 'Exterior1st', 'NA')\n\n# Exterior2nd(\u5916\u58c1\u306e\u7a2e\u985e \u8907\u6570\u306e\u7d20\u6750\u304c\u3042\u308b\u5834\u5408)\ncompleting_null_value(data, 'Exterior2nd', 'NA')\n\n# SaleType(\u8ca9\u58f2\u65b9\u6cd5\u306e\u7a2e\u985e)\ncompleting_null_value(data, 'SaleType', 'NA')\n\n# Electrical(\u96fb\u6c17\u7cfb\u7d71\u306e\u7a2e\u985e)\ncompleting_null_value(data, 'Electrical', 'NA')","bdc56042":"# dtypes \u3092\u53c2\u7167\u3057\u3066\u4e00\u62ec\u3067\u56fa\u5b9a\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n# null_columns = data.isnull().sum()[data.isnull().sum()>0].index.tolist()\n\n# object_columns = data[null_columns].dtypes[data[null_columns].dtypes == 'object'].index.tolist()\n\n# for object_column in object_columns:\n#     data.loc[data[object_column].isnull(), object_column] = 'NA'","1be9302c":"# LotFrontage(\u6577\u5730\u306b\u63a5\u7d9a\u3059\u308b\u9053\u8def\u306e\u76f4\u7dda\u8ddd\u96e2)\u306e\u88dc\u5b8c\ncompleting_null_value(data, 'LotFrontage', 0)\n\n# GarageYrBlt(\u30ac\u30ec\u30fc\u30b8\u304c\u5efa\u3066\u3089\u308c\u305f\u5e74)\ncompleting_null_value(data, 'GarageYrBlt', 0)\n\n# MasVnrArea(\u7d44\u7a4d\u9020\u306e\u30d9\u30cb\u30e4\u58c1\u306e\u9762\u7a4d \u5e73\u65b9\u30d5\u30a3\u30fc\u30c8)\ncompleting_null_value(data, 'MasVnrArea', 0)\n\n# BsmtFullBath(\u5730\u4e0b\u306e\u30d5\u30eb\u30d0\u30b9\u30eb\u30fc\u30e0)\n# \u30d5\u30eb\u30d0\u30b9\u30eb\u30fc\u30e0\uff1a\u6d74\u69fd\u3001\u30b7\u30e3\u30ef\u30fc\u3001\u6d17\u9762\u53f0\u3001\u4fbf\u5668\u5168\u3066\u304c\u5099\u308f\u3063\u3066\u3044\u308b\ncompleting_null_value(data, 'BsmtFullBath', 0)\n\n# BsmtHalfBath(\u5730\u4e0b\u306e\u30cf\u30fc\u30d5\u30d0\u30b9\u30eb\u30fc\u30e0)\n# \u30cf\u30fc\u30d5\u30d0\u30b9\u30eb\u30fc\u30e0\uff1a\u6d17\u9762\u53f0\u3001\u4fbf\u5668\u304c\u5099\u308f\u3063\u3066\u3044\u308b(\u30b7\u30e3\u30ef\u30fc\u304c\u3042\u308b\u5834\u5408\u3082\u3042\u308b)\ncompleting_null_value(data, 'BsmtHalfBath', 0)\n\n# GarageCars(\u30ac\u30ec\u30fc\u30b8\u306e\u30b5\u30a4\u30ba \u8eca\u306e\u30ad\u30e3\u30d1)\ncompleting_null_value(data, 'GarageCars', 0)\n\n# GarageArea(\u30ac\u30ec\u30fc\u30b8\u306e\u9762\u7a4d \u5e73\u65b9\u30d5\u30a3\u30fc\u30c8)\ncompleting_null_value(data, 'GarageArea', 0)\n\n# TotalBsmtSF(\u5730\u4e0b\u5ba4\u9762\u7a4d\u306e\u7dcf\u9762\u7a4d)\ncompleting_null_value(data, 'TotalBsmtSF', 0)\n\n# BsmtFinSF1(\u5730\u4e0b\u5ba4\u30bf\u30a4\u30d7 1 \u306e\u5b8c\u6210\u9762\u7a4d \u5e73\u65b9\u30d5\u30a3\u30fc\u30c8)\ncompleting_null_value(data, 'BsmtFinSF1', 0)\n\n# BsmtFinSF2(\u5730\u4e0b\u5ba4\u30bf\u30a4\u30d7 2 \u306e\u5b8c\u6210\u9762\u7a4d \u5e73\u65b9\u30d5\u30a3\u30fc\u30c8)\ncompleting_null_value(data, 'BsmtFinSF2', 0)\n\n# BsmtUnfSF(\u5730\u4e0b\u5ba4\u306e\u672a\u5b8c\u6210\u9762\u7a4d \u5e73\u65b9\u30d5\u30a3\u30fc\u30c8)\ncompleting_null_value(data, 'BsmtUnfSF', 0)","faa531a1":"# \u7dcf\u9762\u7a4d = 1 \u968e\u9762\u7a4d + 2 \u968e\u9762\u7a4d + \u5730\u4e0b\u5ba4\u9762\u7a4d\ndata['TotalSF'] = data['1stFlrSF'] + data['2ndFlrSF'] + data['TotalBsmtSF']","fc236ee3":"# 1 \u90e8\u5c4b\u3042\u305f\u308a\u306e\u9762\u7a4d = \u7dcf\u9762\u7a4d \/ \u90e8\u5c4b\u6570(\u30d0\u30b9\u30eb\u30fc\u30e0\u306f\u542b\u307e\u306a\u3044)\ndata['AreaPerRoom'] = data['TotalSF'] \/ data['TotRmsAbvGrd']","be8b58ff":"# \u30d0\u30b9\u30eb\u30fc\u30e0(\u968e\u4e0a) \u5024\u7684\u306b\u90e8\u5c4b\u6570\u3068\u601d\u308f\u308c\u308b \u5909\u6570\u306e\u8aac\u660e\u306b\u3082\u30d5\u30a3\u30fc\u30c8\u7b49\u306e\u5358\u4f4d\u304c\u306a\u304b\u3063\u305f\u306e\u3067\ndata['Bathrooms'] = data['FullBath'] + (0.5 * data['HalfBath'])\n# \u30d0\u30b9\u30eb\u30fc\u30e0(\u5730\u4e0b\u5ba4)\ndata['BsmtlBathrooms'] = data['BsmtFullBath'] + (0.5 * data['BsmtHalfBath'])\n\n# \u30d0\u30b9\u30eb\u30fc\u30e0(\u5168\u3066)\ndata['TotalBathrooms'] = data['Bathrooms'] + data['BsmtlBathrooms']","ebab3123":"# \u30dd\u30fc\u30c1(\u7e01\u5074)\u306e\u7dcf\u9762\u7a4d = \u30aa\u30fc\u30d7\u30f3\u30dd\u30fc\u30c1\u306e\u9762\u7a4d \u5e73\u65b9\u30d5\u30a3\u30fc\u30c8 + \u30b9\u30ea\u30fc\u30b7\u30fc\u30ba\u30f3\u30dd\u30fc\u30c1\u306e\u9762\u7a4d \u5e73\u65b9\u30d5\u30a3\u30fc\u30c8 + \u56f2\u3044\u306e\u3042\u308b\u30dd\u30fc\u30c1\u306e\u9762\u7a4d \u5e73\u65b9\u30d5\u30a3\u30fc\u30c8 + \u30b9\u30af\u30ea\u30fc\u30f3\u30dd\u30fc\u30c1\u306e\u9762\u7a4d \u5e73\u65b9\u30d5\u30a3\u30fc\u30c8 + \u30a6\u30c3\u30c9\u30c7\u30c3\u30ad\u306e\u9762\u7a4d \u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\ndata['TotalPorchSF'] = data['OpenPorchSF'] + data['3SsnPorch'] + data['EnclosedPorch'] + data['ScreenPorch'] + data['WoodDeckSF']","a051e152":"# \u30ea\u30d5\u30a9\u30fc\u30e0\u3092\u52a0\u5473\u3057\u305f\u5e74\u6570 = \u7bc9\u5e74\u6570(YearBuilt) + \u6700\u65b0\u30ea\u30d5\u30a9\u30fc\u30e0\u5e74(YearRemodAdd)\ndata['YearBuiltPlusRemod'] = data['YearBuilt'] + data['YearRemodAdd']","cd6afa22":"# \u30d7\u30fc\u30eb\u306e\u6709\u7121\ndata['HasPool'] = data['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\n\n# 2 \u968e\u306e\u6709\u7121\ndata['Has2ndFlrSF'] = data['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\n\n# \u30ac\u30ec\u30fc\u30b8\u306e\u6709\u7121\ndata['HasGarage'] = data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\n\n# \u5730\u4e0b\u5ba4\u306e\u6709\u7121\ndata['HasBsmt'] = data['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n\n# \u6696\u7089\u306e\u6709\u7121\ndata['HasFireplace'] = data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n\n# \u30ea\u30d5\u30a9\u30fc\u30e0\u306e\u6709\u7121\ndata['Remodeled'] = data.apply(lambda x: 1 if x['YearBuilt'] != x['YearRemodAdd'] else 0, axis=1)","2b022072":"# \u6570\u5024\u3067\u306f\u306a\u304f\u533a\u5206\u5024\u3068\u3057\u3066\u6271\u3046\u3079\u304d\u7279\u5fb4\u91cf\u306e\u578b\u5909\u63db\nconvert_columns = ['MSSubClass', 'MoSold', 'YrSold']\n\nfor column in convert_columns:\n    data[column] = data[column].astype(str)","dff8cbe5":"# \u4f7f\u7528\u3057\u306a\u3044\u7279\u5fb4\u91cf\u3092\u524a\u9664\ndata.drop('Id', axis=1, inplace=True)\n\n# One-hot \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ndata = pd.get_dummies(data)","950d95c6":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5206\u5272\ntrain = data[data['SalePrice'].notnull()].copy()\ntest = data[data['SalePrice'].isnull()].copy()","327a33bb":"# \u8ca9\u58f2\u91d1\u984d\u3068\u6307\u5b9a\u3057\u305f\u7279\u5fb4\u91cf\u3067\u6563\u5e03\u56f3\u3092\u30d7\u30ed\u30c3\u30c8\ndef scatter_with_sale_price_and_specified_column(column_name):\n    plt.figure(figsize=(20, 10))\n    plt.scatter(train[column_name], train['SalePrice'])\n    plt.xlabel(column_name)\n    plt.ylabel('SalePrice')","be15258e":"scatter_with_sale_price_and_specified_column('TotalSF')","0efadffe":"# \u4e0a\u8a18\u306e\u30b0\u30e9\u30d5\u304b\u3089\u306f\u53f3\u4e0a\u304c\u308a\u306e\u50be\u5411\u304c\u898b\u3089\u308c\u308b\u304c\u3001\u660e\u3089\u304b\u306b\u5916\u308c\u5024\u3068\u306a\u3063\u3066\u3044\u308b 2 \u70b9\u304c\u3042\u308b\u305f\u3081\u9664\u304f\ntrain.drop(train[train['TotalSF'] > 7500].index, inplace=True)","410e34dc":"# \u5916\u308c\u5024\u3092\u9664\u3044\u3066\u518d\u5ea6\u30d7\u30ed\u30c3\u30c8\nscatter_with_sale_price_and_specified_column('TotalSF')","a6407603":"scatter_with_sale_price_and_specified_column('TotRmsAbvGrd')","f560f53b":"# \u90e8\u5c4b\u6570 14 \u306f 1 \u4ef6\u3057\u304b\u306a\u3044\u4e0a\u306b\u3001\u90e8\u5c4b\u6570\u306e\u5272\u306b\u5b89\u3044\u306e\u3067\u53d6\u308a\u9664\u304f\ntrain.drop(train[train['TotRmsAbvGrd'] == 14].index, inplace=True)","9728c819":"# \u5916\u308c\u5024\u3092\u9664\u3044\u3066\u518d\u5ea6\u30d7\u30ed\u30c3\u30c8\nscatter_with_sale_price_and_specified_column('TotRmsAbvGrd')","1e978866":"scatter_with_sale_price_and_specified_column('TotalBathrooms')","a4686627":"# \u30d0\u30b9\u30eb\u30fc\u30e0 5, 6 \u3082 1 \u4ef6\u305a\u3064\u306e\u4e0a\u3001\u5b89\u3044\u306e\u3067\u53d6\u308a\u9664\u304f\ntrain.drop(train[(train['TotalBathrooms'] >= 5)].index, inplace=True)","aca31b5f":"# \u5916\u308c\u5024\u3092\u9664\u3044\u3066\u518d\u5ea6\u30d7\u30ed\u30c3\u30c8\nscatter_with_sale_price_and_specified_column('TotalBathrooms')","9b6df238":"def boxplot_with_sale_price_and_specified_column(column_name):\n    plt.figure(figsize=(20, 10))\n    plt.xticks(rotation='90')\n    sns.boxplot(x=column_name, y='SalePrice', data=train)\n    plt.xlabel(column_name)\n    plt.ylabel('SalePrice')","d198c738":"# \u7bb1\u3072\u3052\u56f3\u3092\u30d7\u30ed\u30c3\u30c8\nboxplot_with_sale_price_and_specified_column('YearBuilt')","b1098826":"# 2000 \u5e74\u4ee5\u524d\u3067\u3084\u305f\u3089\u9ad8\u3044 3 \u4ef6\u3092\u53d6\u308a\u9664\u304f\n# 2010 \u5e74\u3042\u305f\u308a\u306b\u3082\u9ad8\u3044\u3082\u306e\u306f\u3042\u308b\u304c 2003 \u5e74\u30012005 \u5e74\u3042\u305f\u308a\u306b\u3082\u3044\u304f\u3064\u304b\u3042\u308b\u306e\u3067\u3053\u308c\u306f\u554f\u984c\u306a\u3055\u305d\u3046\ntrain.drop(train[(train['YearBuilt'] < 2000) & (train['SalePrice'] > 600000)].index, inplace=True)","5f77210a":"# \u5916\u308c\u5024\u3092\u9664\u3044\u3066\u518d\u5ea6\u30d7\u30ed\u30c3\u30c8\nboxplot_with_sale_price_and_specified_column('YearBuilt')","550daa9b":"scatter_with_sale_price_and_specified_column('AreaPerRoom')","83e5c750":"fig = plt.figure(figsize=(20, 10))\nax = fig.add_subplot(111, projection='3d')\n\nax.set_xlabel('TotRmsAbvGrd')\nax.set_ylabel('AreaPerRoom')\nax.set_zlabel('SalePrice')\n\nax.plot(train['TotRmsAbvGrd'], train['AreaPerRoom'], train['SalePrice'], marker=\"o\", linestyle='None')","e9289f7d":"scatter_with_sale_price_and_specified_column('TotalPorchSF')","68d530cd":"# \u30d0\u30b9\u30eb\u30fc\u30e0(\u968e\u4e0a)\u306e\u30d7\u30ed\u30c3\u30c8\nscatter_with_sale_price_and_specified_column('Bathrooms')","2cfe4117":"scatter_with_sale_price_and_specified_column('BsmtlBathrooms')","9bc62189":"# \u30d0\u30b9\u30eb\u30fc\u30e0\u306f\u968e\u4e0a\u3068\u5730\u4e0b\u5ba4\u533a\u5225\u3059\u308b\u5fc5\u8981\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u306f\u524a\u9664\u3059\u308b\ntrain.drop(['Bathrooms', 'BsmtlBathrooms'], axis=1, inplace=True)\ntest.drop(['Bathrooms', 'BsmtlBathrooms'], axis=1, inplace=True)","b3a40468":"# \u7279\u5fb4\u91cf\u306e\u4e00\u89a7\npd.set_option('display.max_rows', len(train.columns))\nprint(train.dtypes)","1d5ab457":"# \u76ee\u7684\u5909\u6570\u3092\u53d6\u308a\u51fa\u3059\ny = train['SalePrice']\n\n# \u8aac\u660e\u5909\u6570\u306b SalePrice \u306f\u3044\u3089\u306a\u3044\u304b\u3089\u524a\u9664\nX = train.drop('SalePrice', axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","8c8b96fd":"def scoring_prediction_result(y_true, y_pred, features_count):\n    # RMSE\n    rmse = np.sqrt(mean_squared_error(y_true, y_pred))\n    \n    # \u6c7a\u5b9a\u4fc2\u6570\n    r2 = r2_score(y_true, y_pred)\n    \n    # \u81ea\u7531\u5ea6\u8abf\u6574\u6e08\u307f\u6c7a\u5b9a\u4fc2\u6570\n    n = len(y_true)\n    r2_f = 1 - (n - 1) \/ (n - features_count - 1) * (1 - r2)\n    \n    print('RMSE\uff1a', rmse)\n    print('\u6c7a\u5b9a\u4fc2\u6570\uff1a', r2)\n    print('\u81ea\u7531\u5ea6\u8abf\u6574\u6e08\u307f\u6c7a\u5b9a\u4fc2\u6570\uff1a', r2_f)\n    print()","0f6ffb8e":"select = SelectKBest(k = 20)\n\n# Lasso \u56de\u5e30\n#lasso = Lasso(alpha=0.01)\n#pipeline = make_pipeline(StandardScaler(), lasso)\n\n# Ridge \u56de\u5e30\n#ridge = Ridge(alpha=0.01)\n#pipeline = make_pipeline(StandardScaler(), ridge)\n\n# Elastic Net\nelasstic = ElasticNet(alpha=0.01)\npipeline = make_pipeline(StandardScaler(), elasstic)\n\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u56de\u5e30\n#rfr = RandomForestRegressor(random_state=0, n_estimators=100, n_jobs=-1)\n#pipeline = make_pipeline(StandardScaler(), rfr)\n\npipeline.fit(X_train, y_train)\n\nfeatures_count = len(X_train.columns)\n\nprint('\u5b66\u7fd2\u30c7\u30fc\u30bf')\ny_pred = pipeline.predict(X_train)\nscoring_prediction_result(y_train, y_pred, features_count)\n\nprint('\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf')\ny_test_pred = pipeline.predict(X_test)\nscoring_prediction_result(y_test, y_test_pred, features_count)","0c747e4d":"# RMSE\ndef rmse_score(y_true, y_pred):\n    mse = mean_squared_error(y_true, y_pred)\n    return math.sqrt(mse)","facfda7c":"scoring = {'rmse': make_scorer(rmse_score),\n           'r2': 'r2'}\n\n# n_splits \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306f 5\nn_splits = 5\nkf = KFold(shuffle=True, n_splits=n_splits, random_state=0)\nscores = cross_validate(pipeline, X_test, y_test, cv=kf, scoring=scoring)\n\n#pprint.pprint(scores)\nprint('RMSE:', scores['test_rmse'])\nprint('\u6c7a\u5b9a\u4fc2\u6570\uff1a', scores['test_r2'])\n\nn = len(y_test)\nr2_f = 1 - (n - 1) \/ (n - features_count - 1) * (1 - scores['test_r2'])\nprint('\u81ea\u7531\u5ea6\u8abf\u6574\u6e08\u307f\u6c7a\u5b9a\u4fc2\u6570\uff1a', r2_f)","e5826603":"rfr = RandomForestRegressor(random_state=0, n_estimators=100, n_jobs=-1)\nrfr_pipeline = make_pipeline(select, StandardScaler(), rfr)\n\nrfr_pipeline.fit(X_train, y_train)\n\nplt.figure(figsize=(20, 10))\nplt.barh(\n    test.columns[np.argsort(rfr.feature_importances_)],\n    rfr.feature_importances_[np.argsort(rfr.feature_importances_)],\n    label='RandomForestRegressor'\n)\nplt.title('RandomForestRegressor features importance')","4712c36f":"# to_csv \u3067\u4e0a\u66f8\u304d\u3055\u308c\u308b\u306f\u305a\u3060\u3051\u3069\u306a\u3093\u304b Output \u306b\u8a8d\u8b58\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u4e00\u5fdc\u6d88\u3057\u3066\u304b\u3089\u4f5c\u3063\u3066\u307f\u308b\nif os.path.exists('submission.csv'):\n    os.remove('submission.csv')\n\ntest.drop('SalePrice', axis=1, inplace=True)\n\npredictions = pipeline.predict(test.values)\n# \u8ca9\u58f2\u91d1\u984d(SalePrice) \u306f\u5b66\u7fd2\u6642\u306b\u5bfe\u6570\u5909\u63db\u3057\u3066\u3044\u308b\u306e\u3067\u6307\u6570\u95a2\u6570\u3092\u304b\u3051\u308b\npredictions_exp = np.exp(predictions)\n\nsubmission = pd.DataFrame({'Id': test_ids, 'SalePrice': predictions_exp})\n\nsubmission.to_csv('submission.csv', index=False)","55106918":"\u53f3\u3078\u306e\u6b6a\u307f\u304c\u304b\u306a\u308a\u6539\u5584\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b","fabd7126":"# \u30ea\u30d5\u30a9\u30fc\u30e0\u3092\u52a0\u5473\u3057\u305f\u5e74\u6570(YearBuiltPlusRemod)\u306e\u8ffd\u52a0\n\u6700\u65b0\u30ea\u30d5\u30a9\u30fc\u30e0\u5e74(YearRemodAdd)\u306f\u30ea\u30d5\u30a9\u30fc\u30e0\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u7bc9\u5e74\u6570(YearBuilt)\u3068\u540c\u3058\u5024\u304c\u5165\u3063\u3066\u3044\u308b  \n\u305d\u306e\u305f\u3081\u3001\u5358\u7d14\u306b\u52a0\u7b97\u3057\u305f\u5024\u3067\u554f\u984c\u306a\u3044(\u540c\u3058\u7bc9\u5e74\u6570\u3067\u3082\u30ea\u30d5\u30a9\u30fc\u30e0\u3055\u308c\u3066\u3044\u308b\u65b9\u304c\u5927\u304d\u306a\u5024\u3068\u306a\u308b\u305f\u3081)","bb103ea4":"# \u30d0\u30b9\u30eb\u30fc\u30e0(Bathrooms, BsmtlBathrooms, TotalBathrooms)\u306e\u8ffd\u52a0\n\u30cf\u30fc\u30d5\u30d0\u30b9\u30eb\u30fc\u30e0\u306f\u5b8c\u5168\u306a\u30d0\u30b9\u30eb\u30fc\u30e0\u3067\u306f\u306a\u3044\u306e\u3067 0.5 \u3092\u304b\u3051\u308b","cdd91cc5":"# \u6b20\u640d\u5024\u306e\u88dc\u5b8c\nnull \u306f NA(\u30d7\u30fc\u30eb\u306a\u3057)\u3092\u8868\u3059\u305f\u3081\u3001\u6587\u5b57\u5217 NA \u3067\u88dc\u5b8c\u3059\u308b  \n","9d795362":"# \u4e0d\u8981\u306a\u7279\u5fb4\u91cf\u306e\u524a\u9664\u3068 One-hot \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","c830707b":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u81ea\u7531\u5ea6\u8abf\u6574\u6e08\u307f\u6c7a\u5b9a\u4fc2\u6570\u306e\u5024\u306f\u826f\u304f\u306a\u3044\u2026","06f552f1":"n \u306f len(y_test) \/ n_splits \u3067\u3044\u3044\u304b\u306a\uff1f\u3068\u601d\u3063\u305f\u3051\u3069\u5024\u304c 1 \u3092\u8d85\u3048\u305f\u306e\u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5168\u4ef6\u6570\u3068\u3057\u305f  \n\u4ea4\u5dee\u691c\u8a3c\u306e\u7d50\u679c\u3082\u81ea\u7531\u5ea6\u8abf\u6574\u6e08\u307f\u6c7a\u5b9a\u4fc2\u6570\u306f\u826f\u304f\u306a\u3044...","c053a056":"\u5b66\u7fd2\u30c7\u30fc\u30bf\u306f 1460 \u4ef6","9ee4d3d7":"# \u30d0\u30b9\u30eb\u30fc\u30e0(\u968e\u4e0a)(Bathrooms)\u306e\u30d7\u30ed\u30c3\u30c8\n\u30d0\u30b9\u30eb\u30fc\u30e0(\u968e\u4e0a)\u306b\u3064\u3044\u3066\u306f\u5024\u304c\u5927\u304d\u3044\u65b9\u304c\u4fa1\u683c\u3082\u9ad8\u304f\u306a\u308b\u3068\u8a00\u3048\u305d\u3046","b2f1f368":"# \u7279\u5fb4\u91cf\u306e\u578b\u5909\u63db","fb4a0700":"# \u90e8\u5c4b\u6570(TotRmsAbvGrd)\u3068 1 \u90e8\u5c4b\u3042\u305f\u308a\u306e\u9762\u7a4d(AreaPerRoom)\u3068\u8ca9\u58f2\u91d1\u984d(SalePrice)\n\u3088\u304f\u5206\u304b\u3089\u3093\u56f3\u306b\u306a\u3063\u305f","f895fd0b":"\u30b0\u30e9\u30d5\u306e\u5f62\u304c\u5909\u308f\u3063\u3066\u898b\u3048\u308b\u304c\u5916\u308c\u5024\u3092\u9664\u3044\u305f\u3053\u3068\u3067\u30b0\u30e9\u30d5\u5168\u4f53\u306e\u30b5\u30a4\u30ba\u304c\u5909\u308f\u3063\u305f\u305f\u3081\u3067\u305d\u308c\u4ee5\u5916\u306b\u5909\u5316\u306f\u306a\u3044","535bca07":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","a0f7ed13":"# \u7bc9\u5e74\u6570(YearBuilt)\u306e\u5916\u308c\u5024\u3092\u9664\u53bb","b84ba10c":"# 1 \u90e8\u5c4b\u3042\u305f\u308a\u306e\u9762\u7a4d(AreaPerRoom)\u3068\u8ca9\u58f2\u91d1\u984d(SalePrice)\u306e\u53ef\u8996\u5316\n\u3084\u306f\u308a\u57fa\u672c\u7684\u306b\u5e83\u3044\u65b9\u304c\u82e5\u5e72\u9ad8\u304f\u306a\u308a\u3084\u3059\u305d\u3046\u306a\u50be\u5411\u3060\u3068\u8a00\u3048\u305d\u3046","eb06f526":"\u30b0\u30e9\u30d5\u304b\u3089\u3082\u5206\u304b\u308b\u901a\u308a\u3001\u53f3\u306b\u6b6a\u3093\u3067\u3044\u308b(\u6b6a\u5ea6 > 0)","8145836c":"# \u4ea4\u5dee\u691c\u8a3c","c8dc8c41":"# \u30d0\u30b9\u30eb\u30fc\u30e0(\u5730\u4e0b\u5ba4)(BsmtlBathrooms)\u306e\u53ef\u8996\u5316\n\u30d0\u30b9\u30eb\u30fc\u30e0(\u5730\u4e0b\u5ba4)\u306b\u3064\u3044\u3066\u306f\u4fa1\u683c\u3068\u306f\u3042\u307e\u308a\u95a2\u4fc2\u304c\u306a\u3055\u305d\u3046  \n\u5730\u4e0b\u5ba4\u306b\u3042\u308b\u304b\u3089\u3068\u3044\u3063\u3066\u4fa1\u683c\u306b\u5f71\u97ff\u3059\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u5024\u304c\u5927\u304d\u3044\u3053\u3068\u81ea\u4f53\u304c\u5f71\u97ff\u3057\u3066\u3044\u305d\u3046","4ccf58a5":"\u5bfe\u6570\u5909\u63db\u3059\u308b\u3068\u6b63\u898f\u5206\u5e03\u307d\u304f\u306a\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u308b","6298a696":"\u968e\u7d1a\u6570\u306b\u8ff7\u3063\u305f\u306e\u3067\u30b9\u30bf\u30fc\u30b8\u30a7\u30b9\u306e\u516c\u5f0f\u3092\u4f7f\u3063\u3066\u307f\u308b","fda5128e":"# \u7e01\u5074\u7dcf\u9762\u7a4d(TotalPorchSF)\u3068\u8ca9\u58f2\u91d1\u984d(SalePrice)\u306e\u53ef\u8996\u5316","a31875de":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\n\u4ee5\u964d\u3067\u5916\u308c\u5024\u306e\u30c7\u30fc\u30bf\u306e\u9664\u53bb\u7b49\u3092\u884c\u3046\u305f\u3081\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u884c\u308f\u306a\u3044\u3088\u3046\u5206\u5272\u3059\u308b\u3002","c3fd3642":"# 1 \u90e8\u5c4b\u3042\u305f\u308a\u306e\u9762\u7a4d(AreaPerRoom)\u306e\u8ffd\u52a0","7bb3dd99":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","ab9e19ee":"# \u7dcf\u9762\u7a4d(TotalSF)\u306e\u5916\u308c\u5024\u3092\u9664\u53bb","ea7bfa39":"# \u7dcf\u9762\u7a4d(TotalSF)\u306e\u8ffd\u52a0","cd383fe9":"1. 1. # \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u56de\u5e30\u3067\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u53ef\u8996\u5316\nLotFrontage(\u6577\u5730\u306b\u63a5\u7d9a\u3059\u308b\u9053\u8def\u306e\u76f4\u7dda\u8ddd\u96e2)\u304c 1 \u756a\u91cd\u8981\u3068\u306a\u3063\u305f\u306e\u306f\u7591\u554f\u2026","4513032e":"# \u8a2d\u5099\u7b49\u306e\u6709\u7121\u3092\u793a\u3059\u7279\u5fb4\u91cf\u306e\u8ffd\u52a0","7d585a55":"# \u5168\u30d0\u30b9\u30eb\u30fc\u30e0(TotalBathrooms)\u306e\u5916\u308c\u5024\u3092\u9664\u53bb","3016432a":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f 1459 \u4ef6","87fa6dda":"\u3084\u306f\u308a\u30d0\u30b9\u30eb\u30fc\u30e0\u306e\u5024\u304c\u5927\u304d\u3044\u65b9\u304c\u4fa1\u683c\u3082\u9ad8\u304f\u306a\u308b\u3068\u8a00\u3048\u305d\u3046","129b1fce":"# \u90e8\u5c4b\u6570(TotRmsAbvGrd)\u306e\u5916\u308c\u5024\u3092\u9664\u53bb","ac5af02b":"# \u30e2\u30c7\u30eb\u69cb\u7bc9\u524d\u306e\u51e6\u7406","637d410b":"# \u7e01\u5074\u7dcf\u9762\u7a4d(TotalPorchSF)\u306e\u8ffd\u52a0","29255d16":"# \u76ee\u7684\u5909\u6570(\u8ca9\u58f2\u4fa1\u683c)\u306e\u78ba\u8a8d","e576cded":"# \u30e2\u30c7\u30eb\u69cb\u7bc9"}}