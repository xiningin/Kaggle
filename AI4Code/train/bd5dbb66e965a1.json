{"cell_type":{"f148bce1":"code","987bdcc8":"code","a3a39169":"code","5b3df98b":"code","a2516b59":"code","89b5755e":"code","9e63dcbe":"code","a00fd6cd":"code","d45a7bc5":"code","f6b5b420":"code","8b19800a":"code","998b21de":"code","f77c21ab":"code","373492d7":"code","014a79fb":"code","f7a4a02e":"code","bc510520":"code","166a6256":"code","c925290d":"code","4a77531f":"code","8147a816":"code","ca9c8f56":"code","b4aef402":"code","80267487":"code","031e5047":"code","ba4427cf":"code","bd04f13c":"code","737ee409":"code","e389fa11":"code","3539ac00":"code","6b721004":"code","72f947f3":"code","7107de2b":"code","de5947d0":"code","9ce0e500":"code","1d051e72":"code","4b9cb0ec":"code","d5a6ae58":"code","b6419510":"code","c80b5a92":"code","cca606c8":"code","84260f9f":"code","b97abb18":"code","2551e26c":"code","5bef8f93":"code","73bdae25":"code","d8a070eb":"markdown"},"source":{"f148bce1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","987bdcc8":"df = pd.read_csv(\"..\/input\/winequality\/winequality-red.csv\")\ndf","a3a39169":"\ndef splitter(x):\n    str(x)\n    templist = x.split(';')\n    return templist\ndf.columns[0]\ncollist = splitter(df.columns[0])\n","5b3df98b":"def stringcleaner(x):\n    if '\"' in x:\n        x = x[1:]\n        x = x[:-1]\n    return x\nstringcleaner('\"fixed acidity\"')","a2516b59":"newlist = list()\nfor i in collist:\n    newlist.append(stringcleaner(i))\n#print(newlist)\ncollist = np.array(newlist)\ncollist","89b5755e":"#df.describe()\n#df.transpose()\n#df","9e63dcbe":"#df = df.trspose()\nnewdf = pd.DataFrame(columns = collist)\n","a00fd6cd":"df['fixed acidity;\"volatile acidity\";\"citric acid\";\"residual sugar\";\"chlorides\";\"free sulfur dioxide\";\"total sulfur dioxide\";\"density\";\"pH\";\"sulphates\";\"alcohol\";\"quality\"'].apply(lambda x : splitter(x))\ntype(df['fixed acidity;\"volatile acidity\";\"citric acid\";\"residual sugar\";\"chlorides\";\"free sulfur dioxide\";\"total sulfur dioxide\";\"density\";\"pH\";\"sulphates\";\"alcohol\";\"quality\"'][0])\nprint(df['fixed acidity;\"volatile acidity\";\"citric acid\";\"residual sugar\";\"chlorides\";\"free sulfur dioxide\";\"total sulfur dioxide\";\"density\";\"pH\";\"sulphates\";\"alcohol\";\"quality\"'][0])","d45a7bc5":"#x = floatmaker(x[0])\n#len(df)\n#l = len(df)\nnewdf.append(x)\ndf\nnewdf","f6b5b420":"\nfor i in range(0, l):\n    numstrlist = list()\n    numstrlist = floatmaker(splitter(df['fixed acidity;\"volatile acidity\";\"citric acid\";\"residual sugar\";\"chlorides\";\"free sulfur dioxide\";\"total sulfur dioxide\";\"density\";\"pH\";\"sulphates\";\"alcohol\";\"quality\"'][i]))\n    newdf.append(numstrlist, ignore_index=False)","8b19800a":"def floatmaker(x):\n    flist = x.split(';')\n    rlist = list()\n    for i in flist:\n        rlist.append(float(i))\n    return pd.DataFrame(rlist)\na = floatmaker(df['fixed acidity;\"volatile acidity\";\"citric acid\";\"residual sugar\";\"chlorides\";\"free sulfur dioxide\";\"total sulfur dioxide\";\"density\";\"pH\";\"sulphates\";\"alcohol\";\"quality\"'][0])\nprint(type(a[0]), a[0])\n#newdf\n#col_name = np.arange(len(df.transpose()))\n#col_name","998b21de":"newdf = newdf.transpose()\n","f77c21ab":"a[0]","373492d7":"def mapper(newdf, df2):\n    #newdf\n    j = 0\n    for i in newdf.columns:\n        print(i, df2[0][j])\n        newdf[i] = df2[0][j]# assignment operator don't work\n        newdf[i]\n        \n        j+=1\n    print(newdf)\n    return newdf\nnewdf = mapper(newdf, a)\nnewdf","014a79fb":"df0 = newdf\n#df.columns = col_name","f7a4a02e":"#df = df.transpose()\ndf.describe()","bc510520":"#columnname = np.arange(len(df))\n#columnname\ndf","166a6256":"df = df.transpose()","c925290d":"len(df)\n","4a77531f":"df.transpose()","8147a816":"df.columns = columnname","ca9c8f56":"import pylab #what this library do is important\nimport scipy.stats as stats\nimport matplotlib\nimport matplotlib.pyplot as plt\nmatplotlib.style.use('ggplot')\n%matplotlib inline\n\n","b4aef402":"df[60].unique()","80267487":"# there are many outliers can encounter when developing the real world application of the \n#\ndf.corr# correlations between dependent variables == \n# when you learning the technology is important there can be many \n# small change","031e5047":"df","ba4427cf":"import matplotlib.pyplot as plot\nplot.pcolor(df.corr())\nplot.show()","bd04f13c":"import pandas as pd\ndfwine = pd.read_csv('..\/input\/winequality\/winequality-red.csv')","737ee409":"\n#fixed acidity the the pH level is low ,, ar \n'''\nwhich file that \nbulb as are no distict pattern -==\n\n'''\n\ndfwine","e389fa11":"import networkx as nx\nfrom networkx.algorithms import center\nimport matplotlib.pyplot as plt","3539ac00":"G = nx.Graph()\n#nodes = [1,2,3,4, 5]\nedges = [(1, 2), (2,3),(1, 3), (3, 4),(4, 1), (5, 2)]\nG.add_edges_from(edges)\nprint(center(G))\nG.number_of_edges()","6b721004":"pos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos, node_color='b',node_size=500, alpha=1)\nnode_name = {}\nnx.draw_networkx_edges(G, pos, width = 8, alpha = 0.5, edge_color='r')\nfor node in G.nodes():\n    node_name[node] = str(node)\nnx.draw_networkx_labels(G, pos, node_name, font_size = 16)\nplt.axis('off')\nplt.show()","72f947f3":"from networkx.algorithms.clique import find_cliques, cliques_containing_node","7107de2b":"numberofclique = 0\nfor clique in find_cliques(G):\n    print(clique)\n    numberofclique +=1\nprint(numberofclique)","de5947d0":"#Here's the grph to look at-\nimport networkx as nx\nG = nx.Graph()\nnodes = [\"Gur\",\"Qing\",\"Samantha\",\"Jorge\",\"Lakshmi\",\"Jack\",\"John\",\"Jill\"]\nedges = [(\"Gur\",\"Qing\",{\"source\":\"work\"}),\n         (\"Gur\",\"Jorge\", {\"source\":\"family\"}),\n        (\"Samantha\",\"Qing\", {\"source\":\"family\"}),\n        (\"Jack\",\"Qing\", {\"source\":\"work\"}),\n        (\"Jorge\",\"Lakshmi\", {\"source\":\"work\"}),\n        (\"Jorge\",\"Samantha\",{\"source\":\"family\"}),\n        (\"Samantha\",\"John\", {\"source\":\"family\"}),\n        (\"Lakshmi\",\"Jack\", {\"source\":\"family\"}),\n        (\"Jack\",\"Jill\", {\"source\":\"charity\"}),\n        (\"Jill\",\"John\",{\"source\":\"family\"})]\nG.add_nodes_from(nodes)\nG.add_edges_from(edges)\nrelationship = {}\nfor f_edge in edges:\n    relationship[f_edge[0:2]] = f_edge[2]\nprint(relationship)\n#for i in range(len(edges)):\n #   relationship.append(edges[i][2])\ndef get_connections(graph,node,relationship):\n    return 0\n    ###\n    ### YOUR CODE HERE\n    ###\nG.nodes()\nG.edges()","9ce0e500":"import matplotlib.pyplot as plt","1d051e72":"position = nx.spring_layout(G, )\nfig = plt.figure(1, figsize=(12, 12))\n# here are nodes\n#nx.draw_networkx_nodes(G, position, node_color=)\n#nx.draw_networkx_edges(G, position, edgelist=G.edges(),width = 15, alpha = 0.5, edge_color='b')\nnx.draw_networkx_nodes(G, position, node_size = 0, alpha = 0.8)\nnx.draw_networkx_edges(G, position, edgelist = edges, width = 15, alpha = 0.5, edge_color='b')\nnx.draw_networkx_edge_labels(G, position, relationship, font_size= 10)\nnode_name = {}\n\nfor node in G.nodes():\n    \n    node_name[node] = str(node)\n#nx.draw_networkx_edge_labels(G, position, relationship, font_size = 16)\nnx.draw_networkx_labels(G, position, node_name, font_size = 16)\nplt.axis('off')\nplt.show()","4b9cb0ec":"G.edges()","d5a6ae58":"\"\"\"\nModify the following get_connections function so that it takes a network, a person,\nand a relationship type as arguments and returns the list of nodes that are connected \nto the person by the relationship. \n\nExample of use:\nget_connections(G,'John','family') \nshould return a list of nodes\n\"\"\"\n\n#Here's the grph to look at-\nimport networkx as nx\nG = nx.Graph()\nnodes = [\"Gur\",\"Qing\",\"Samantha\",\"Jorge\",\"Lakshmi\",\"Jack\",\"John\",\"Jill\"]\nedges = [(\"Gur\",\"Qing\",{\"source\":\"work\"}),\n         (\"Gur\",\"Jorge\", {\"source\":\"family\"}),\n        (\"Samantha\",\"Qing\", {\"source\":\"family\"}),\n        (\"Jack\",\"Qing\", {\"source\":\"work\"}),\n        (\"Jorge\",\"Lakshmi\", {\"source\":\"work\"}),\n        (\"Jorge\",\"Samantha\",{\"source\":\"family\"}),\n        (\"Samantha\",\"John\", {\"source\":\"family\"}),\n        (\"Lakshmi\",\"Jack\", {\"source\":\"family\"}),\n        (\"Jack\",\"Jill\", {\"source\":\"charity\"}),\n        (\"Jill\",\"John\",{\"source\":\"family\"})]\nG.add_nodes_from(nodes)\nG.add_edges_from(edges)\nrelationship = {}\nfor f_edge in edges:\n    relationship[f_edge[0:2]] =f_edge[2]\nnode = {}\nfor i in nodes:\n    node[i] = str(i)\n\n\ndef get_connections(graph,node,relationship):\n    import matplotlib.pyplot as plt\n    position = nx.spring_layout(G, )\n    fig = plt.figure(1, figsize=(12, 12))\n    # here are nodes\n    #nx.draw_networkx_nodes(G, position, node_color=)\n    #nx.draw_networkx_edges(G, position, edgelist=G.edges(),width = 15, alpha = 0.5, edge_color='b')\n    nx.draw_networkx_nodes(G, position, node_size = 0, alpha = 0.8)\n    nx.draw_networkx_edges(G, position, edgelist = edges, width = 15, alpha = 0.5, edge_color='b')\n    nx.draw_networkx_edge_labels(G, position, relationship, font_size= 10)\n        #nx.draw_networkx_edge_labels(G, position, relationship, font_size = 16)\n    nx.draw_networkx_labels(G, position, node, font_size = 16)\n    plt.axis('off')\n    plt.show()\n    return \nget_connections(G, node, relationship) ","b6419510":"\"\"\"\nModify the following get_connections function so that it takes a network, a person,\nand a relationship type as arguments and returns the list of nodes that are connected \nto the person by the relationship. \n\nExample of use:\nget_connections(G,'John','family') \nshould return a list of nodes\n\"\"\"\nimport networkx as nx\nG = nx.Graph()\nnodes = [\"Gur\",\"Qing\",\"Samantha\",\"Jorge\",\"Lakshmi\",\"Jack\",\"John\",\"Jill\"]\nedges = [(\"Gur\",\"Qing\",{\"source\":\"work\"}),\n         (\"Gur\",\"Jorge\", {\"source\":\"family\"}),\n        (\"Samantha\",\"Qing\", {\"source\":\"family\"}),\n        (\"Jack\",\"Qing\", {\"source\":\"work\"}),\n        (\"Jorge\",\"Lakshmi\", {\"source\":\"work\"}),\n        (\"Jorge\",\"Samantha\",{\"source\":\"family\"}),\n        (\"Samantha\",\"John\", {\"source\":\"family\"}),\n        (\"Lakshmi\",\"Jack\", {\"source\":\"family\"}),\n        (\"Jack\",\"Jill\", {\"source\":\"charity\"}),\n        (\"Jill\",\"John\",{\"source\":\"family\"})]\nG.add_nodes_from(nodes)\nG.add_edges_from(edges)\n\ndef get_connections(graph,node,relationship):\n    rlist = list()\n    for i in graph.edges():\n        if i[2]['source'] != relationship:\n            g.remove_edge(i[0], i[1])\n    \n    newlist = list()\n    for c in nx.connected_components(g):\n        newlist.append(c)\n\n    for items in newlist:\n        if n1 in items:\n            for i in items:\n                rlist.append(i)\n            break   \n\n    return rlist","c80b5a92":"G.degree","cca606c8":"G.edges(nbunch=['John','Gur'], data = True)","84260f9f":"g = G\nedge1 = edges\nG.nodes()","b97abb18":"for i in edge1:\n    if i[2]['source'] == 'family':\n        print(i)\n    else:\n        g.remove_edge(i[0], i[1])\n","2551e26c":"g.edges()","5bef8f93":"#nx.connected_components()\nprint(nx.is_connected(g))\n","73bdae25":"n1 = 'John'\nnewlist = list()\nrlist = list()\nfor c in nx.connected_components(g):\n    newlist.append(c)\n\nfor items in newlist:\n    if n1 in items:\n        for i in items:\n            rlist.append(i)\n        break\nprint(rlist)","d8a070eb":"Below saved the new Dataframe into the working dataFrame"}}