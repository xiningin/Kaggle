{"cell_type":{"22d00a0a":"code","87d43d79":"code","e3ba0565":"code","46564ab8":"code","cb0f48eb":"code","d17ac968":"code","ca786a8a":"markdown","7a062064":"markdown","1fb69e41":"markdown"},"source":{"22d00a0a":"# !pip install nb_black\n# %load_ext nb_black\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\nfrom IPython.core.display import display, HTML\nfrom ipywidgets import widgets\n\npio.templates.default = \"plotly_white\"\n\n# import data\ndata_path = \"..\/input\/kaggle-survey-2019\/\"\nmultiple_choice_responses_19 = pd.read_csv(\n    data_path + \"multiple_choice_responses.csv\", engine=\"c\", low_memory=False\n)\nquestions_only_19 = pd.read_csv(data_path + \"questions_only.csv\", engine=\"c\")","87d43d79":"# TABLE OF CONTENTS\n\n# Iterate questions and add links\n# The questions table is transposed and the first row discarted\nquestionnaire = \"<h1>Table of contents<\/h1><br>\"\nfor index, value in questions_only_19.T[1:].iterrows():\n    questionnaire += f'<a href=\"#{index}\" style=\"text-decoration: none;\"><strong>{index}<\/strong>: {value[0]}<\/a><br>\\n'\n# Display the HTML content\ndisplay(HTML(questionnaire))","e3ba0565":"# HTML tag to be linked in TOC\ndisplay(HTML('<span id=\"Q3\"><\/span>'))\n\n# Table with countries and respondents, ordered descending.\n# It's necessary later to make the data proportional to the number of the respondents of the country.\ncountries = (\n    multiple_choice_responses_19[\"Q3\"][1:]\n    .value_counts()\n    .to_frame(name=\"count\")\n    .rename_axis(\"country\")\n    .reset_index()\n)\n\n# Map of respondents per country\nfig = px.choropleth(\n    countries,\n    locations=\"country\",\n    locationmode=\"country names\",\n    color=\"count\",\n    hover_name=\"country\",\n    color_continuous_scale=px.colors.carto.Bluyl,\n)\nfig.show()","46564ab8":"display(HTML(f'Five countries have more than the half of the respondents\\\n             ({countries[0:5].sum().values[1] \/ countries.sum().values[1]:.2%}):<br>\\\n             {countries[0:5].to_html()}'))","cb0f48eb":"def where(question):\n    \"\"\"\n    This function gets the data for the question, processes it and plot a Choropleth map\n    \n    :param question: Question to plot\n    :return: None\n    \"\"\"    \n    # Skip the Question 3 'In which country do you currently reside?'\n    if question == \"Q3\":\n        return\n\n    # HTML tag to be linked in TOC\n    display(HTML(f'<span id=\"{question}\"><\/span>'))\n    # Plot title\n    title = f\"<b>{question}<\/b>: {questions_only_19[question].values[0]}\"\n    \n    # NORMAL QUESTION\n    # ---------------    \n    # If the question is single choice, it is in the multiple_choice_responses columns\n    \n    if question in multiple_choice_responses_19.columns:\n        # Get the country and question #n columns of the multiple_choice_responses_19 table\n        # and skip the first row\n        m = multiple_choice_responses_19[[\"Q3\", question]][1:]\n        # Create a count column\n        m[\"count\"] = 1\n        # Do the magic\n        p = (\n            m.groupby([\"Q3\", question]) # Group the country - response combination\n            .agg(np.sum) # Get the sum\n            .reset_index() # Plot.ly needs normal columns\n            .rename(columns={\"Q3\": \"country\"}) # Rename country column\n        )\n\n    # MULTIPLE CHOICE QUESTION\n    # ------------------------\n    # If the question is multiple choice, the question is followed by _Part_\n    # Get all columns with _Part_\n\n    else:\n        m = multiple_choice_responses_19[1:].filter(\n            like=f\"{question}_Part_\", axis=\"columns\"\n        )\n        # Get the relation of the part number and the most frequent value\n        parts = {v + 1: k for v, k in enumerate(m.mode().values[0].tolist())}\n        # Add the country column \n        m[\"country\"] = multiple_choice_responses_19[\"Q3\"][1:]\n        # Group the table by country and do the counting\n        g = m.groupby([\"country\"]).agg(\"count\").reset_index()\n        # Convert a wide table to a long table using _Part_ columns\n        p = (\n            pd.wide_to_long(g, stubnames=f\"{question}_Part_\", i=\"country\", j=\"part\")\n            .reset_index()\n            .rename(columns={f\"{question}_Part_\": \"count\"})\n        )\n        # Create a new column with the part most frequent value instead of the part number\n        p[question] = p[\"part\"].map(parts)\n\n    # COMMON\n    # ------\n    # Instead of the value, get the percentage for each country\n    \n    p[\"percentage\"] = p.apply(\n        lambda x: x[\"count\"]\n        \/ countries[countries[\"country\"] == x[\"country\"]][\"count\"].values[0],\n        axis=\"columns\",\n    )\n\n    # Map of question #n per country\n    fig = px.choropleth(\n        p,\n        title=title,\n        locations=\"country\",\n        locationmode=\"country names\",\n        color=\"percentage\",\n        animation_frame=question,\n        color_continuous_scale=px.colors.carto.Bluyl,\n    )\n    # Set the percentage format and the height\n    fig.update_layout(\n        coloraxis=dict(colorbar=dict(tickformat=\",.0%\")), height=600,\n    )\n    fig.show()","d17ac968":"# Plot all questions\nfor i in questions_only_19.columns[1:].to_list():\n    where(i)","ca786a8a":"# Number of respondents\n\n","7a062064":"# Questions","1fb69e41":"# Introduction\n\nThe aim of this notebook is to view where in the world people is using a programming language, or how the yearly compensation is distributed.\n\nThe values are relative to the number of respondents of that country."}}