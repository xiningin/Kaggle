{"cell_type":{"d79c5b73":"code","7de75a45":"code","80168028":"code","7808c1c1":"code","c8576957":"code","31de43b5":"code","d9faf7e3":"code","d75d78ed":"code","b9e2dbfb":"code","b8c30684":"code","f49954cf":"code","9bea91ea":"code","5e3f4d6e":"code","3ec67d5f":"code","d118e068":"code","70665e7f":"code","88829aa5":"code","84255773":"code","12dff822":"code","338d2cb5":"code","6dc71668":"code","3d20060f":"code","4f38cfce":"code","51e1e0fe":"code","138ecd86":"code","296ccbfb":"code","0fd0c57c":"code","690a53d6":"code","4c5d1fe4":"code","fabf1180":"code","84d557f2":"code","3b3cd42f":"code","1a08cdbb":"code","39b7655d":"code","e4f31c45":"code","72c605b4":"markdown","08182f69":"markdown","5403d770":"markdown","5f12e8b8":"markdown","c3a6964c":"markdown","e98a158f":"markdown","82fce8e1":"markdown","892a03ed":"markdown","06001202":"markdown","09d94b75":"markdown","1d2f6064":"markdown","9917e15d":"markdown","6a5f30bb":"markdown","20f5cbab":"markdown","1e45ae95":"markdown","a60e38af":"markdown","d4f98fb7":"markdown","f1296fe4":"markdown","16c25ceb":"markdown","af3d5d38":"markdown","5b791073":"markdown","7b4e2650":"markdown","885e97c1":"markdown","8225f480":"markdown","9070ecfc":"markdown","57de9ea2":"markdown","581f8bcf":"markdown","30e2dcac":"markdown","ad23a985":"markdown","b07ae643":"markdown","768e8612":"markdown","bb007c4c":"markdown","868a83d5":"markdown","ea7519fd":"markdown","5703d0ec":"markdown","3a1b5500":"markdown","cf0dafce":"markdown","ce80cdc7":"markdown","b26e19c4":"markdown","38dfb804":"markdown","8d75f1f1":"markdown","a1f48ffd":"markdown","ea515b3c":"markdown"},"source":{"d79c5b73":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","7de75a45":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/andre-marcos-perez\/ebac-course-utils\/develop\/dataset\/credito.csv', na_values='na')\ndf.head(n=5)","80168028":"df.shape","7808c1c1":"df[df['default'] == 0].shape","c8576957":"df[df['default'] == 1].shape","31de43b5":"total, _ = df.shape\nqty_non, _ = df[df['default'] == 0].shape\nqty_def, _ = df[df['default'] == 1].shape","d9faf7e3":"print(f\"The non-defaulters percentage is {round(100 * qty_non \/ total, 2)}%\")\nprint(f\"The defeaulters percentage is {round(100 * qty_def \/ total, 2)}%\")","d75d78ed":"df.head(n=5)","b9e2dbfb":"df.dtypes","b8c30684":"df.drop('sexo', axis=1).select_dtypes('object').describe().transpose()","f49954cf":"df.drop('id', axis=1).select_dtypes('number').describe().transpose()","9bea91ea":"df.isna().any()","5e3f4d6e":"def stats_missing_data(df: pd.DataFrame):\n\n  stats_missing_data = []\n  for col in df.columns:\n    if df[col].isna().any():\n      qty, _ = df[df[col].isna()].shape\n      total, _ = df.shape\n      dict_missing_data = {col: {'quantity': qty, \"percentage\": round(100 * qty\/total, 2)}}\n      stats_missing_data.append(dict_missing_data)\n\n  for stat in stats_missing_data:\n    print(stat)","3ec67d5f":"stats_missing_data(df=df)","d118e068":"stats_missing_data(df=df[df['default'] == 0])","70665e7f":"stats_missing_data(df=df[df['default'] == 1])","88829aa5":"fn = lambda value: float(value.replace(\".\", \"\").replace(\",\", \".\"))\ndf['valor_transacoes_12m'] = df['valor_transacoes_12m'].apply(fn)\ndf['limite_credito'] = df['limite_credito'].apply(fn)","84255773":"df.dtypes","12dff822":"df.drop('id', axis=1).select_dtypes('number').describe().transpose()","338d2cb5":"df.dropna(inplace=True)\ndf.shape","6dc71668":"new_total, _ = df.shape\nnew_qty_non, _ = df[df['default'] == 0].shape\nnew_qty_def, _ = df[df['default'] == 1].shape","3d20060f":"print(f\"The non-defaulters percentage is {round(100 * qty_non \/ total, 2)}%\")\nprint(f\"The new non-defaulters percentage is {round(100 * new_qty_non \/ new_total, 2)}%\")\nprint(\"\")\nprint(f\"The defaulters percentage is {round(100 * qty_def \/ total, 2)}%\")\nprint(f\"The new defaulters percentage is {round(100 * new_qty_def \/ new_total, 2)}%\")","4f38cfce":"df_non = df[df['default'] == 0]","51e1e0fe":"df_def = df[df['default'] == 1]","138ecd86":"sns.set_style(\"darkgrid\")","296ccbfb":"column = 'escolaridade'\ntitles = [\"Customers' Education\", \"Non-Defaulters' Education\", \"Defaulters' Education\"]\n\naxis = 0\nmax_y = 0\nmax = df.select_dtypes('object').describe()[column]['freq'] * 1.1\n\npic, axes = plt.subplots(1,3, figsize=(20, 5), sharex=True)\n\nfor dataframe in [df, df_non, df_def]:\n\n  df_to_plot = dataframe[column].value_counts().to_frame()\n  df_to_plot.rename(columns={column: 'absolute_frequency'}, inplace=True)\n  df_to_plot[column] = df_to_plot.index\n  df_to_plot.sort_values(by=[column], inplace=True)\n  df_to_plot.sort_values(by=[column])\n\n  f = sns.barplot(x=df_to_plot[column], y=df_to_plot['absolute_frequency'], ax=axes[axis])\n  f.set(title=titles[axis], xlabel=column.capitalize(), ylabel='Absolute Frequency')\n  f.set_xticklabels(labels=f.get_xticklabels(), rotation=90)\n\n  _, max_y_f = f.get_ylim()\n  max_y = max_y_f if max_y_f > max_y else max_y\n  f.set(ylim=(0, max_y))\n\n  axis += 1\n\npic.show()","0fd0c57c":"column = 'salario_anual'\ntitles = [\"Customers' Annual Salary\", \"Non-Defaulters' Annual Salary\", \"Defaulters' Annual Salary\"]\n\naxis = 0\nmax_y = 0\nmax = df.select_dtypes('object').describe()[column]['freq'] * 1.1\n\npic, axes = plt.subplots(1,3, figsize=(20, 5), sharex=True)\n\nfor dataframe in [df, df_non, df_def]:\n\n  df_to_plot = dataframe[column].value_counts().to_frame()\n  df_to_plot.rename(columns={column: 'absolute_frequency'}, inplace=True)\n  df_to_plot[column] = df_to_plot.index\n  df_to_plot.sort_values(by=[column], inplace=True)\n  df_to_plot.sort_values(by=[column])\n\n  f = sns.barplot(x=df_to_plot[column], y=df_to_plot['absolute_frequency'], ax=axes[axis])\n  f.set(title=titles[axis], xlabel=column.capitalize(), ylabel='Absolute Frequency')\n  f.set_xticklabels(labels=f.get_xticklabels(), rotation=90)\n\n  _, max_y_f = f.get_ylim()\n  max_y = max_y_f if max_y_f > max_y else max_y\n  f.set(ylim=(0, max_y))\n\n  axis += 1\n\npic.show()","690a53d6":"column = 'tipo_cartao'\ntitles = [\"Customers' Card Type\", \"Non-Defaulters' Card Type\", \"Defaulters' Card Type\"]\n\naxis = 0\nmax_y = 0\nmax = df.select_dtypes('object').describe()[column]['freq'] * 1.1\n\npic, axes = plt.subplots(1,3, figsize=(20, 5), sharex=True)\n\nfor dataframe in [df, df_non, df_def]:\n\n  df_to_plot = dataframe[column].value_counts().to_frame()\n  df_to_plot.rename(columns={column: 'absolute_frequency'}, inplace=True)\n  df_to_plot[column] = df_to_plot.index\n  df_to_plot.sort_values(by=[column], inplace=True)\n  df_to_plot.sort_values(by=[column])\n\n  f = sns.barplot(x=df_to_plot[column], y=df_to_plot['absolute_frequency'], ax=axes[axis])\n  f.set(title=titles[axis], xlabel=column.capitalize(), ylabel='Absolute Frequency')\n  f.set_xticklabels(labels=f.get_xticklabels(), rotation=90)\n\n  _, max_y_f = f.get_ylim()\n  max_y = max_y_f if max_y_f > max_y else max_y\n  f.set(ylim=(0, max_y))\n\n  axis += 1\n\npic.show()","4c5d1fe4":"column = 'estado_civil'\ntitles = [\"Customers' Marital Status\", \"Non-Defaulters' Marital Status\", \"Defaulters' Marital Status\"]\n\naxis = 0\nmax_y = 0\nmax = df.select_dtypes('object').describe()[column]['freq'] * 1.1\n\npic, axes = plt.subplots(1,3, figsize=(20, 5), sharex=True)\n\nfor dataframe in [df, df_non, df_def]:\n\n  df_to_plot = dataframe[column].value_counts().to_frame()\n  df_to_plot.rename(columns={column: 'absolute_frequency'}, inplace=True)\n  df_to_plot[column] = df_to_plot.index\n  df_to_plot.sort_values(by=[column], inplace=True)\n  df_to_plot.sort_values(by=[column])\n\n  f = sns.barplot(x=df_to_plot[column], y=df_to_plot['absolute_frequency'], ax=axes[axis])\n  f.set(title=titles[axis], xlabel=column.capitalize(), ylabel='Absolute Frequency')\n  f.set_xticklabels(labels=f.get_xticklabels(), rotation=90)\n\n  _, max_y_f = f.get_ylim()\n  max_y = max_y_f if max_y_f > max_y else max_y\n  f.set(ylim=(0, max_y))\n\n  axis += 1\n\npic.show()","fabf1180":"column = 'qtd_transacoes_12m'\ntitles = [\"Quantity of transactions at the last year\", \"Non-defaulters' quantity of transactions at the last year\", \"Defaulters' quantity of transactions at the last year\"]\n\naxis = 0\nmax_y = 0\npic, axes = plt.subplots(1,3, figsize=(20, 5), sharex=True)\n\nfor dataframe in [df, df_non, df_def]:\n\n  f = sns.histplot(x=column, data=dataframe, stat='count', ax=axes[axis])\n  f.set(title=titles[axis], xlabel=column.capitalize(), ylabel='Absolute Frequency')\n\n  _, max_y_f = f.get_ylim()\n  max_y = max_y_f if max_y_f > max_y else max_y\n  f.set(ylim=(0, max_y))\n\n  axis += 1\n\npic.show()","84d557f2":"column = 'valor_transacoes_12m'\ntitles = [\"Value of transactions at the last year\", \"Non-defaulters' value of transactions at the last year\", \"Defaulters' value of transactions at the last year\"]\n\naxis = 0\nmax_y = 0\npic, axes = plt.subplots(1,3, figsize=(20, 5), sharex=True)\n\nfor dataframe in [df, df_non, df_def]:\n\n  f = sns.histplot(x=column, data=dataframe, stat='count', ax=axes[axis])\n  f.set(title=titles[axis], xlabel=column.capitalize(), ylabel='Absolute Frequency')\n\n  _, max_y_f = f.get_ylim()\n  max_y = max_y_f if max_y_f > max_y else max_y\n  f.set(ylim=(0, max_y))\n\n  axis += 1\n\npic.show()","3b3cd42f":"f = sns.relplot(x='valor_transacoes_12m', y='qtd_transacoes_12m', data=df, hue='default')\n_ = f.set(\n    title='Relationship between Value and Number of Transactions in the Last Year', \n    xlabel='Value of transactions at the last year', \n    ylabel='Quantity of transactions at the last year'\n  )","1a08cdbb":"column = 'idade'\ntitles = [\"Ages of costumers\", \"Ages of Non-defaulters'\", \"Ages of Defaulters'\"]\n\naxis = 0\nmax_y = 0\npic, axes = plt.subplots(1,3, figsize=(20, 5), sharex=True)\n\nfor dataframe in [df, df_non, df_def]:\n\n  f = sns.histplot(x=column, data=dataframe, stat='count', ax=axes[axis])\n  f.set(title=titles[axis], xlabel=column.capitalize(), ylabel='Absolute Frequency')\n\n  _, max_y_f = f.get_ylim()\n  max_y = max_y_f if max_y_f > max_y else max_y\n  f.set(ylim=(0, max_y))\n\n  axis += 1\n\npic.show()","39b7655d":"column = 'qtd_produtos'\ntitles = [\"Quantity of products\", \"Non-defaulters' quantity of products\", \"Defaulters' quantity of products\"]\n\naxis = 0\nmax_y = 0\npic, axes = plt.subplots(1,3, figsize=(20, 5), sharex=True)\n\nfor dataframe in [df, df_non, df_def]:\n\n  f = sns.histplot(x=column, data=dataframe, stat='count', ax=axes[axis])\n  f.set(title=titles[axis], xlabel=column.capitalize(), ylabel='Absolute Frequency')\n\n  _, max_y_f = f.get_ylim()\n  max_y = max_y_f if max_y_f > max_y else max_y\n  f.set(ylim=(0, max_y))\n\n  axis += 1\n\npic.show()","e4f31c45":"column = 'iteracoes_12m'\ntitles = [\"12m iterations\", \"Non-defaulters' 12m iterations\", \"Defaulters' 12m iterations\"]\n\naxis = 0\nmax_y = 0\npic, axes = plt.subplots(1,3, figsize=(20, 5), sharex=True)\n\nfor dataframe in [df, df_non, df_def]:\n\n  f = sns.histplot(x=column, data=dataframe, stat='count', ax=axes[axis])\n  f.set(title=titles[axis], xlabel=column.capitalize(), ylabel='Absolute Frequency')\n\n  _, max_y_f = f.get_ylim()\n  max_y = max_y_f if max_y_f > max_y else max_y\n  f.set(ylim=(0, max_y))\n\n  axis += 1\n\npic.show()","72c605b4":"### **2.2 Numerical Attributes**","08182f69":"Taking a second look at the variables of the data, we can check on the columns \"limite_credito\" and \"valor_transacoes_12m\" a little mistake to solve. It's being read as 'object', not 'float' due to the Brazilian way of punctuation in values which involves thousands.","5403d770":"Just checking again if \"limite_credito\" and \"valor_transacoes_12m\" will be on numerical attributes:","5f12e8b8":"* Interacting with the 'salario_anual' column:","c3a6964c":"* Interacting with the 'idade' column:","e98a158f":"Ok, now we have a significant difference in behavior between defaulters and non-defaulters.","82fce8e1":"Well, it's everything set. So let's start to create visualizations to interact the 'default' column, and its variables, with the other columns to conduct data-driven analysis on some reasons why customers turn defaulters:","892a03ed":"* Interacting with the 'valor_transacoes_12m' column:","06001202":"In this case, I'll analyze data I received about customers default owned by a Brazilian fintech. The column named \"default\" presents two values, which indicates defaulter(default = 1), non-defaulter(default = 0). For now, my job is trying to understand why the customer turns a defaulter based on the behavior of the other data (other columns) we have.\n","09d94b75":"Checking the size of the data and the bulk of defaulters we're analyzing:","1d2f6064":"Just validating the featureless impact:","9917e15d":"For that, I'll also import for this notebook the archive with the data for the analysis. Which is on this [link](https:\/\/raw.githubusercontent.com\/andre-marcos-perez\/ebac-course-utils\/develop\/dataset\/credito.csv). It's in CSV format, so let\u2019s see if it has great compatibility:","6a5f30bb":"Choosing which seaborn style to work:","20f5cbab":"### **4.2 Numerical Visualization**","1e45ae95":"## **Brazilian Fintech's Customer Default Analysis | by [Artur Barbosa](https:\/\/www.linkedin.com\/in\/arturpbarbosa\/)**","a60e38af":"Same behavior between defaulters and non-defaulters above.","d4f98fb7":"## **3\\. Data Cleaning and Conversion Stage**","f1296fe4":"As we could see in the categorical visualizations, no graphics show some particular expressive behavior of defaulters. But, looking into numerical visualizations, some data stands out when we are looking into the visualization which shows 'Relationship between Value and Number of Transactions in the Last Year\". It shows that defaulters have a large group that transacts around 80-20 times per year instead of non-defaulters having a pattern of 120-80 times per year. And when looking into the values per year, defaulters have the majority doing around 2500, and some expressive cases around 10000-7500. Instead, non-defaulters have vast data with values around 17500-12500.\n\nMoreover, we could also notice other two slight defaulters patterns. When looking into the 'Quantity of products', most defaulters used to contract around 3-1 products, and non-defaulters used to 3-6. Looking at the '12m iterations', most of the defaulters used to interact 3+ times. Instead of non-defaulters majority used to interact 2 times.\n\nFor those who have come this far, I would like to thank you very much, and if you have any comments, suggestions, etc., please get in touch by my [LinkedIn](https:\/\/www.linkedin.com\/in\/arturpbarbosa\/).","16c25ceb":"* Interacting with the 'escolaridade' column:\n\n\n","af3d5d38":"### **2.1 Categorical Attributes**","5b791073":"Both graphics above starts showing some specific behavior of defaulters. Let's see it in this way: 'valor_transacoes_12m'x'qtd_transacoes_12m'\/'default':","7b4e2650":"So, the code speaks for its selves; We have less than 20% of customers defaulting, which maybe can hamper the graphics comprehension","885e97c1":"Not even a slight difference in this case above. The proportion is the same for defaulters and non-defaulters.","8225f480":" The last task in this stage will be removing the lines with 'na' values. And make the analysis possible with no troubles or bugs because of missing data:","9070ecfc":"Well, apparently not... ","57de9ea2":"### **2.3 Looking at variables classes**","581f8bcf":"Not even a slight difference in this case above. The proportion is the same for defaulters and non-defaulters.","30e2dcac":"## **5\\. Analysis Digest**","ad23a985":"* Interacting with the 'qtd_transacoes_12m' column:","b07ae643":"Excluding ID because it's not relevant:","768e8612":"It's done:","bb007c4c":"* Interacting with the 'iteracoes_12m' column:","868a83d5":"Above, we can notice a slight difference between 'solteiro' proportion to 'casado' in 'non-defaulters' and 'defaulters' graphics.","ea7519fd":"* Interacting with the 'tipo_cartao' column:","5703d0ec":"## **1\\. Required libs for this task**","3a1b5500":"Above I just used the (.head) to justify the parameter I used for na values. If you check the link, you will see that this CSV file is missing some data, and the \u201cna\u201d strings represent the missing data. So I informed my notebook of these strings, and it converted for NaN values.\n\nAnd about the content language, which is Portuguese, don't worry; all my graphics and content will be written in English to be easier to read for the majority.","cf0dafce":"So, let's convert those two variables, which are 'objects', but I'll need them in 'float'. For that, I'll use a lambda function:","ce80cdc7":"## **2\\. Exploration stage**","b26e19c4":"Excluding sex because it's not relevant, and maybe not allowed by Brazilian law named LGPD:","38dfb804":"* Interacting with the 'qtd_produtos' column:","8d75f1f1":"Above I'm just confirming if it is just those three columns that are missing data. Below let's check if the missing data has something with default behavior:","a1f48ffd":"### **4.1. Categorical Visualization**","ea515b3c":"## **4\\. Data Visualization Stage**"}}