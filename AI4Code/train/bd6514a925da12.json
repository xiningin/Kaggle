{"cell_type":{"4a2aaa93":"code","09c333b9":"code","1e876775":"code","d2d9eb17":"code","aa5bbdf8":"code","5a33c4db":"code","85007322":"code","0c1ff6df":"code","955841e5":"code","27bf7129":"code","90297f94":"code","26f60ef7":"code","dd878f80":"code","c7a57850":"code","6114494f":"code","375de48c":"code","454f4e8b":"code","ddc06d69":"code","8640c784":"code","76d47019":"code","5f832b61":"code","e7e6ffcf":"code","e89c78da":"code","0ed60f55":"code","5efde2c1":"markdown","aa47863c":"markdown","5f77a85a":"markdown","804bbb58":"markdown","1ab65c3b":"markdown","5a55db7c":"markdown","1d86b3c9":"markdown","ffecd697":"markdown","908c7557":"markdown","d15c7bbd":"markdown","a6310881":"markdown","6ea15c1a":"markdown","98f4e9db":"markdown","d1ce1eee":"markdown","f8c862f3":"markdown","3a63dd08":"markdown","fb26d258":"markdown","ea39f094":"markdown","79643404":"markdown","8fac10f1":"markdown","63389987":"markdown","9c3ddef7":"markdown","a4505457":"markdown","a9402b94":"markdown","a8eb4bff":"markdown","8a5def71":"markdown","04a01ebf":"markdown","c28b5105":"markdown","f4fa0f28":"markdown","5fb15871":"markdown","1021d00a":"markdown","64aead5e":"markdown","89f58f4c":"markdown","3722be3f":"markdown","8ae244fd":"markdown","c68073aa":"markdown","554a49c2":"markdown","35c79113":"markdown","19718612":"markdown","012851bd":"markdown","51c0c265":"markdown","88e2964e":"markdown","2c8da1a8":"markdown","1394e711":"markdown","442662c4":"markdown","3366ba0d":"markdown","7bfc67e7":"markdown","7faa6cb0":"markdown","d31e1092":"markdown","f9d78b0a":"markdown"},"source":{"4a2aaa93":"!pip install --user torch==1.9.0 torchvision==0.10.0 torchaudio==0.9.0 torchtext==0.10.0","09c333b9":"from fastai.data.all import *\nfrom fastai.vision.all import *\n\nimport numpy as np\nimport pandas as pd\nimport os\n\nfrom functools import cmp_to_key\nfrom PIL import Image\nfrom scipy import stats\n\nprint(\"Import finished.\")","1e876775":"# paths\npath = '..\/input\/dog-breed-identification\/'\nlabels_csv_path = path + 'labels.csv'\nsample_submission_csv_path = path + 'sample_submission.csv'\nsubmission_csv_path =  '.\/submission.csv'\ntrain_path = path + 'train'\ntest_path = path + 'test'\n\nnumber_of_epochs = 10\n\nprint(f'Constants are set. Fine tuning takes {number_of_epochs} epochs.')","d2d9eb17":"labels_df = pd.read_csv(labels_csv_path)\nprint(f'The shape of the labels: {labels_df.shape}')","aa5bbdf8":"labels_df.head","5a33c4db":"print(len(os.listdir(train_path)))","85007322":"print(len(os.listdir(test_path)))","0c1ff6df":"unique_breeds = pd.unique(labels_df['breed'])\nprint(len(unique_breeds))","955841e5":"print(stats.describe(labels_df.value_counts('breed')))","27bf7129":"a_img_path = '..\/input\/dog-breed-identification\/train\/000bec180eb18c7604dcecc8fe0dba07.jpg'\nb_img_path = '..\/input\/dog-breed-identification\/train\/002a283a315af96eaea0e28e7163b21b.jpg'\n\na_img = Image.open(a_img_path)\nb_img = Image.open(b_img_path)\n\nprint(a_img.size)\nprint(b_img.size)","90297f94":"sample_df = pd.read_csv(sample_submission_csv_path)\nsample_df.shape","26f60ef7":"sample_df['id'].is_monotonic_increasing","dd878f80":"dls = ImageDataLoaders.from_csv(\n    path=path,\n    csv='labels.csv',\n    folder='train',\n    suff='.jpg',\n    item_tfms=Resize(256)\n)\n\nprint(\"ImageDataloaders initialized.\")","c7a57850":"learner = cnn_learner(dls, resnet34, metrics=error_rate)","6114494f":"print(learner.loss_func)","375de48c":"print(learner.model)","454f4e8b":"learner.fine_tune(number_of_epochs)","ddc06d69":"interp = ClassificationInterpretation.from_learner(learner)\ninterp.print_classification_report()","8640c784":"learner.show_training_loop()","76d47019":"interp.plot_top_losses(5, nrows=5)","5f832b61":"def get_id_from_image_path(image_path):\n    image_id, _ = os.path.splitext(os.path.basename(image_path))\n    return image_id\n        \n\ndef cmp_path(item1, item2):\n    id1 = get_id_from_image_path(item1)\n    id2 = get_id_from_image_path(item2)\n    \n    if id1 < id2:\n        return -1\n    if id1 > id2:\n        return 1\n    \n    return 0\n\n\nsorted_test_image_files = sorted(get_image_files(test_path), key=cmp_to_key(cmp_path))\nprint(\"Test images are sorted alphabetically.\")","e7e6ffcf":"test_dataloader = learner.dls.test_dl(sorted_test_image_files)\npreds, _ = learner.get_preds(dl=test_dataloader)\n\nprint(\"Predictions are ready.\")","e89c78da":"preds.shape","0ed60f55":"submission = pd.read_csv(sample_submission_csv_path)\n\nsorted_ids = list(map(lambda x: get_id_from_image_path(x) ,sorted_test_image_files))\nid_col = np.transpose([np.asarray(sorted_ids)])\n\nres = np.hstack((id_col, preds.detach().cpu().numpy()))\nres_df = pd.DataFrame(res, columns=submission.columns)\n\nres_df.to_csv(submission_csv_path, index=False)\n\nprint(f'Predictions are saved to {submission_csv_path}')","5efde2c1":"The constants mostly store paths such as path to the working folder (`path`), path to the csv storing the labels (`labels_csv_path`) and the path to the train folder (`train_path`) & test folder (`test_path`).\n\nThe number of epochs is also set here (`number_of_epochs`).","aa47863c":"We also have the chance to deep dive into the actual operations performed by `fine_tune` using the `show_training_loop` method on the learner. This call prints the callback functions called during training.","5f77a85a":"Next, I'm checking the number of breeds (the unique occurrences in the breed column):","804bbb58":"The `test_datalaoder` is created using the previously described `test_dl` method and then the prediction takes place.","1ab65c3b":"<a id=\"EDA\"><\/a>\n# EDA (Exploratory Data Analysis)\n[[back to top]](#toc)","5a55db7c":"The model itself is also accessable:","1d86b3c9":"In this notebook I'm implementing a convolutional neural network which is capable of classifing pictures of dogs by their breeds. The source of the data is the competition named [Dog Breed Identification](https:\/\/www.kaggle.com\/c\/dog-breed-identification\/overview\/description). The aim of this notebook is to setup a convolutional neural network in the simplest possible way using [fast.ai](https:\/\/fast.ai), hence there are no optimizations in the code. The aim is not to create a model which is capable of perdicting the breeds with state-of-the-art accuracy but to give a high level overview of how to easily setup a convolutional neural network and use it to make predictions.\n\nIn the [first chapter](#sic) the environment is set, the required libraries are imported and the constants are defined.\n\n[Next](#EDA), a basic exploration of the provided input is performed.\n\nThe model is created and trained in the [third section](#model). First, the data is loaded in the necessary format, then the model is initialized with weights from ResNet. Then the fine-tuning takes place based on the input images.\n\nThe [fourth chapter](#predictions) describes how to make predictions based on the test data and how to save the outcome in the expected format.","ffecd697":"<a id=\"toc\"><\/a>\n# Table of content\n\n* [Introduction](#introduction)\n* [Setup, imports, constants](#sic)\n    * [Setting up the environment](#sic.env)\n    * [Imports](#sic.imports)\n    * [Constants](#sic.consts)\n* [EDA (Exploratory Data Analysis)](#EDA)\n* [Model](#model)\n    * [Dataloaders](#model.dls)\n    * [CNN learner](#model.cnn)\n    * [Fine tuning the model](#model.finetune)\n* [Make predictions](#predictions)\n* [Conclusion](#conclusion)","908c7557":"Next, I would like to know if the images are the same size, so I pick two randomly and check...","d15c7bbd":"Dataframe's `value_counts` returns the number of images for each breed. The code snippet above returns some pieces of statistic. For example the breed with the smallest number of images has 66 images, the one with the largest has 126, the mean is 85, etc. This data can be important and might require further investigation depending on the model deployed.","a6310881":"The `head` prints the first & last five entries of the dataframe. The first column contains the unique ID, the other column stores the breed of the dog on the given picture. Next, I'm checking the number of pictures in the train folder...","6ea15c1a":"It's 120, just like it's written in the [data section](https:\/\/www.kaggle.com\/c\/dog-breed-identification\/data).","98f4e9db":"The code snippet in the next cell puts the end results together: stores the IDs of the input pictures in an array, transposes it (changes the dimensions from (1, n), to (n, 1), and then puts the output tensor next to the ID column (`np.hstack`). Finally the results are written into the `submission.csv`.","d1ce1eee":"<a id=\"sic.env\"><\/a>\n## Setting up the environment\n[[back to top]](#toc)","f8c862f3":"In this notebook a convolutional neural network was trained to predict dog breeds from pictures. The aim was to understand what is the simplest way to initialize and to train a cnn using fast.ai. The aim was not to achieve state-of-the-art results and apply advanced optimization technics.\n\nThe code itself is indeed concise:\n\n1. Create a dataloaders object:\n\n    `dls = ImageDataLoaders.from_csv(\n    path=path, csv='labels.csv', folder='train', suff='.jpg', item_tfms=Resize(256))`\n        \n        \n2. Initialize a convolutional neural network based on ResNet:\n\n    `learner = cnn_learner(dls, resnet34, metrics=error_rate)`\n\n3. Fine tune the model for couple of epochs:\n\n    `learner.fine_tune(number_of_epochs)`\n\n4. Make predictions for the test data:\n\n    `test_dataloader = learner.dls.test_dl(sorted_test_image_files)\n    preds, _ = learner.get_preds(dl=test_dataloader)`\n\n\nThis couple of lines of codes is still capable of achieving \\~0.64 score on the leaderboard (~80% of accuracy). The model is far from being state-of-the art but it is perfect to use as a baseline to which further improvements could be compared.\n\nFurther fine tuning of the model is out of the scope of this notebook. However, there are plenty of room for improvement. One way to go would be applying transformations on the input images (data augmentation). This could be implemented by passing the `batch_tfms` parameter to the `ImageDataLoaders`. It would also make sense to try transfer learning based on other pre-trained models as well. Another idea would be to use `fit_one_cycle` and experience with its parameters instead of just simply calling`fine_tune`.\n\nHowever, this code is a good start to get a baseline model which performs reasonably well.","3a63dd08":"<a id=\"introduction\"><\/a>\n# Introduction\n[[back to top]](#toc)","fb26d258":"The method named`cnn_learner` creates a convolutional neural network which reads the training and validation set from `dls`.\n\nThe model is based on ResNet-34. ResNet-34 is a pre-trained model, which is trained on the ImageNet dataset to be capable of distinguishing images (see more details [here](https:\/\/www.kaggle.com\/pytorch\/resnet34\/home)). The idea is that it might be more effective to further improve a model which is already capable of recognizing everyday objects, rather than training one from scratch (transfer learning).\n\nThe `metrics` parameter defines how the performance of the model should be evaluated. In this case it's `error_rate` (how many breeds it misses).\n\nThere are plenty of other parameters of `CNNLearner`, but they either have a default value or deducted based on other parameters. For example one could wonder what the loss function is...","ea39f094":"That's how many items needs to be predicted.","79643404":"The number of rows is 10357, so apparently there is an entry for each image in the test folder. The number of columns is 121, the first is the image ID and the rest stores the probabilities for each breed.","8fac10f1":"This notebook uses fast.ai 2.5.2 and for some reason it fails to work together with PyTorch 1.9.1. The problem is that certain operations throw the following error: `RuntimeError: solve: MAGMA library not found in compilation. Please rebuild with MAGMA.` As of october 2021 one work-around is to downgrade PyTorch from the latest (1.9.1) to 1.9.0. See [this discussion](https:\/\/www.kaggle.com\/product-feedback\/279990) for further details.\n\nThe following cell performs the downgrading of PyTorch and some related packages. Torchvision, torchaudio and torchtext needs to be downgraded to prevent having conflicting versions installed.","63389987":"<a id =\"conclusion\"><\/a>\n# Conclusion\n[[back to top]](#toc)","9c3ddef7":"<a id=\"model.cnn\"><\/a>\n## CNN learner\n[[back to top]](#toc)","a4505457":"<a id=\"sic\"><\/a>\n# Setup, imports, constants\n[[back to top]](#toc)","a9402b94":"It is possible to have a more detailed overview of the performance of the learner than what we get during training. Fast.ai provides a class named `ClassificationInterpration` which is able to show how accurately the model guesses a certain breed. (See Wikipedia for [F1-score](https:\/\/en.wikipedia.org\/wiki\/F-score#Definition), [precision, recall](https:\/\/en.wikipedia.org\/wiki\/Precision_and_recall) and [accuracy](https:\/\/en.wikipedia.org\/wiki\/Accuracy_and_precision))\n\nIt can happen that the model barely recognizes a certain type of breed. In that case it might worth looking at the input data because it might happen that that specific breed is underrepresented in our data and thus the model doesn't have the chance to learn to recognize it. In such cases the modification of the input data set might be necessary.","a8eb4bff":"It is even possible to plot the images with the worst losses. It is useful because that way it's possible to filter out invalid data. For example if the task is to identify the breed of a dog on a picture and there is no dog on the image, then that input is invalid.","8a5def71":"The data above shows how the model trains, i.e. how the loss changes on the training and validation set and how the error_rate improves. Note, that while the loss on the training set constantly declines epoch by epoch, the validation loss and the error_rate might get worse compared to a previous iteration.","04a01ebf":"Fast.ai introduces the concept of `DataLoaders` (plural). They are explained in their excellent tutorial [here](https:\/\/colab.research.google.com\/github\/fastai\/fastbook\/blob\/master\/02_production.ipynb#scrollTo=b4NxWFFV6CNq) (see the other chapters of their book [here](https:\/\/course.fast.ai\/start_colab#Opening-a-chapter-of-the-book)). The idea is that it makes sense to handle the training and validation `DataLoader` (singular) together. Apart from holding the training & validation dataloaders together fast.ai's `DataLoaders` also provide additional functionality and there are classes inherited from them.\n\nOne of the inherited classes is `ImageDataLoaders` which has a factory method named `from_csv` (see its documentation [here](https:\/\/docs.fast.ai\/vision.data.html#ImageDataLoaders.from_csv)). By default the `from_csv` method expects a csv file which has two columns: the first contains the IDs of the images and the second contains the labels. Luckily we have exactly this, but it is possible to set the behaviour of the method to handle a different setup as well (see documentation).\n\n`ImageDataLoaders#from_csv` expects a csv file whose name is provided in the `csv` parameter and its path is given in the `path` parameter (so the location of the csv file is `path`\\\\`csv`). The first column of the csv file contains the names of the images and `ImageDataLoaders` will search for the images in the directory provided in the `folder` parameter (note, that the `folder` is relative to `path`, just like the `csv`).\n\nThe csv file contains the ids, but not the filenames of the images. Luckily, the filenames are in the format of `ID.jpg`. That's when the `suff` parameter comes handy because it can add a suffix (most likely the file extension) to an ID of an image. So if the ID of an image is `IMAGE_ID`, `from_csv` reads that image from `path`\\\\`folder`\\\\`IMAGE_ID`\\.`suff`.\n\n\nThe `item_tfms` parameter defines the transformation which has to be performed on each image before feeding it into the model. In our case it is resizing the images, because our model will expect that each item has the same size and it turned out during the data analysis in the previous paragraphs that the dimensions of the input images might differ from each other.\n\nCalling `ImageDataLoaders#from_csv` with these parameters will read all the images from `path`\\\\`folder` with the IDs provided in the csv file and resize them to the same dimensions. It will also create and store the training and the validation set. The validation set is 20% of the total data by default and its members are selected randomly.","c28b5105":"...well, it's cross-entropy loss, which makes sense in the case of image classification problems.","f4fa0f28":"The number of images in the test folder is...","5fb15871":"Once the model is trained, the next step is to make actual predictions. Bulk predictions can be made by calling the `get_preds` method of the learner. The function `get_preds` expects a dataloader which stores the test data.\n\nA `Learner` always holds a `DataLoaders` object which by default has two dataloaders: one for training and one for validation. \n\nThe `DataLoaders` class has a method named `test_dl`. As the pydoc describes:\n\n> \"Create a test dataloader from `test_items` using validation transforms of `dls`\"\n\nWhat this means it that `test_dl` reads in the data provided in `test_items` and applies the transformations on the input images with which the original `DataLoaders` object was created. In our case it means that `test_items` are resized to 256\\*256 just like the training items were. Probably the easiset is to check the [related code](https:\/\/github.com\/fastai\/fastai\/blob\/f8b74ef5b320512a2bb4a6c3cb17a5e917b7d6a3\/fastai\/data\/core.py#L394) in fast.ai.","1021d00a":"Lastly, I'm curious to understand the content of `sample_submission.csv`.","64aead5e":"Pandas' `read_csv` reads everything from the given file (`labels.csv` in this case) and stores the content of the csv file in a so called dataframe. Then, we check the shape (number of rows & number of columns) of the dataframe.","89f58f4c":"<a id=\"model\"><\/a>\n# Model\n[[back to top]](#toc)","3722be3f":"This chapter is divided into three subchapters.\n\nThe first step of creating a model is to read the available data from the disk. Fast.ai provides [an API to handle data named datablock](https:\/\/docs.fast.ai\/tutorial.datablock). Using that API `DataLoaders` can be created which are able to read, store and make the data available to the model (Fast.ai's `DataLoaders` (plural) are not to be confused with PyTorch's `DataLoader` (singular), though the two are related). Loading the data is the subject of the [first subchapter](#model.dls).\n\nThe [second subchapter](#model.cnn) describes how to create a convolutional network and how to get an insight of the structure of the model.\n\nThe [third subchapter](#model.finetune) explains how to train the model easily and how to evaluate the results.","8ae244fd":"Do ids in `sample_submission.csv` are in alphabetical order?","c68073aa":"It seems to be reasonable to provide the model with the input files sorted alphabetically. This is what the next code snippet does.","554a49c2":"The aim of any exploratory data analysis is to have a better understanding of the data to which the model needs to be fit, e.g. understand the shape\/size\/amount\/distribution etc. of the input. Obviously, the analysis depends on the task at hand (what we want to get out of the model i.e.: image classification in this case) and on the model which we plan to deploy.\n\nThe very first step is to check the [data section](https:\/\/www.kaggle.com\/c\/dog-breed-identification\/data) of the competition.\n\nAfter that, I'm checking the content of the `labels.csv` using pandas.","35c79113":"Once the `DataLoaders` (`dls`) are ready it is fairly simple to initialize a convolutional neural network using fast.ai.","19718612":"... it turns out that the dimensions might differ. It is important, because certain models require the input images to be the same size, therefore it will be necessary to resize them.","012851bd":"Once the model is ready, fast.ai makes it fairly straightforward to train it. The most basic option is to call the [`fine_tune`](https:\/\/docs.fast.ai\/callback.schedule.html#Learner.fine_tune) method on the learner. The provided parameter determines the number of epochs (10 in this case).\n\n(Note, that `fine_tune` performs certain optimization unlike [`fit_one_cycle`](https:\/\/docs.fast.ai\/callback.schedule.html#Learner.fit_one_cycle). The easiest way to understand the difference between the two is to check the code itself.)","51c0c265":"Yes, they are. It means that if the sample submission file is to be reused, we have to make sure that when the predictions are made the test input is in alphabetical order too.","88e2964e":"<a id=\"predictions\"><\/a>\n# Make predictions\n[[back top top]](#toc)","2c8da1a8":"...which is (unsurprisingly) 10222 just like in the `label.csv` file.","1394e711":"The dimensions of the predictions are 10357 \\* 120. 10357 is the number of the input images and 120 is the number of breeds ([see the EDA section](#EDA)). This is exactly the expected format (see `sample_submission.csv`).","442662c4":"<a id=\"model.finetune\"><\/a>\n## Fine tuning the model\n[[back to top]](#toc)","3366ba0d":"This chapter consists of three sections. The [first](#sic.env) describes how to setup the environment, what libraries to install, etc. The [second](#sic.imports) explains what to import and why. The [last subchapter](#sic.consts) introduces the constants used throughout this notebook.","7bfc67e7":"<a id=\"model.dls\"><\/a>\n## Dataloaders\n[[back to top]](#toc)","7faa6cb0":"<a id=\"sic.consts\"><\/a>\n## Constants\n[[back to top]](#toc)","d31e1092":"One of the comfortable aspects of fast.ai is that it is made really easy to import the necessary packages, all we need to do is import everything from their data & vision packages as the first two lines of codes shows.\n\nImporting panda, os & stats etc. is necessary to have a better insights into our data. See the [EDA chapter](#EDA).","f9d78b0a":"<a id=\"sic.imports\"><\/a>\n## Imports\n[[back to top]](#toc)"}}