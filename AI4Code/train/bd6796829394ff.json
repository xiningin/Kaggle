{"cell_type":{"fb92fbd0":"code","6910d2b4":"code","4f7323a8":"code","f8ae6ed7":"code","e0854261":"code","5bbdba76":"code","2496be0b":"code","681180b9":"code","a3006b02":"code","1c525936":"code","303410da":"code","50c8b3c2":"code","2d93cf3c":"code","81660a9b":"code","fd88b337":"code","f1eacf2e":"code","6090cef6":"code","b062d6a9":"code","3b528cbd":"code","88b65907":"code","53d45c03":"code","8a516197":"code","dc3c682e":"code","283dbb4f":"code","d8f7f408":"code","93534d4b":"code","70dc2c99":"code","c3ef1e1c":"code","faae7151":"code","6302404f":"code","98a406d5":"code","51d5fffa":"code","836a37e8":"code","2632cadd":"code","947e22bd":"code","4fabd002":"code","7cb36e6b":"code","68052da7":"code","d22909f8":"code","a326a979":"code","d53453bb":"code","81aa7383":"code","d2ab73d0":"code","14d622d9":"code","d3255d76":"code","9cacb98f":"code","ab4aa779":"code","e56b7910":"code","bae9d7e0":"code","16469a4b":"code","a9650db7":"code","9953a4be":"code","2308abd8":"code","6e03d44b":"code","1f778bee":"markdown","67406daf":"markdown","8e831a8c":"markdown","ffac2fe0":"markdown","a3550746":"markdown","45982599":"markdown","05bbdc4d":"markdown","e41f091e":"markdown","b1022d39":"markdown","336a6360":"markdown","de6a1b93":"markdown","13f1cff4":"markdown","76fee8f2":"markdown","2a64cce0":"markdown","28a33378":"markdown","17f3e806":"markdown","1175fe49":"markdown","7f3b7a4e":"markdown","7f36c054":"markdown","7ca969b2":"markdown","b1901b60":"markdown","f7c517a8":"markdown","118963c0":"markdown","4f54380c":"markdown","da46348e":"markdown","3486c5dc":"markdown","0b77a11b":"markdown","820760b3":"markdown","a06a9a75":"markdown","6eebc39c":"markdown","d6a26c41":"markdown","29f0a5da":"markdown","2f5d52a9":"markdown"},"source":{"fb92fbd0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport seaborn as sns #Visualization\nimport matplotlib.pyplot as plt #Visualization\nimport random\nimport matplotlib.dates as mdates #dates\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nsns.set()\n\n#print(os.listdir(\"..\/input\"))","6910d2b4":"temperature_data = pd.read_csv('..\/input\/temperature_2017.csv', sep = ',');\nflow_data = pd.read_csv('..\/input\/flow.csv', sep = ',');\nhumidity_data = pd.read_csv('..\/input\/humidity.csv', sep = ',');\nweight_data = pd.read_csv('..\/input\/weight.csv', sep = ',');","4f7323a8":"temperature_data.info()\n#print(temperature_data.head())\nprint(temperature_data.tail())","f8ae6ed7":"temperature_data.temperature.describe()","e0854261":"temperature_time_arr = pd.to_datetime(temperature_data.timestamp)\nts_temperature = pd.Series(data=np.array(temperature_data.temperature), \n                           index=pd.DatetimeIndex(temperature_time_arr), dtype=\"float\")","5bbdba76":"ts_temperature_hour = ts_temperature.resample(\"H\").mean()","2496be0b":"#Is there any Nan?\nts_temperature_hour[ts_temperature_hour.isnull()]","681180b9":"#Manual correction for '2017-03-26 02:00:00', using the data of one hour before\nts_temperature_hour['2017-03-26 02:00:00'] = ts_temperature_hour['2017-03-26 01:00:00']\nts_temperature_hour[ts_temperature_hour.isnull()]","a3006b02":"ax = plt.figure(figsize=(5,2), dpi=150).add_subplot(111)\nts_temperature_hour.plot(ax=ax, title=\"Temperature per hour\", color=\"red\")","1c525936":"#temperature_data.tail()","303410da":"temperature_data_hourly = temperature_data[temperature_data['timestamp'].astype(str).str.match(\"[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):00:00\")]\n#temperature_data_hourly.tail()","50c8b3c2":"#Tagging by sensor\ntags_list = []\nprev_timestamp = temperature_data_hourly.iloc[0].timestamp\ntag_number = 1\n\nfor row in temperature_data_hourly.itertuples():\n    current = row.timestamp\n    if current < prev_timestamp:\n        tag_number+=1\n        \n    tags_list.append(tag_number)\n    prev_timestamp = current  \n\n#print(len(tags_list))","2d93cf3c":"#Add the sensor tag as a column\ntemperature_data_hourly['sensor'] = tags_list\n#temperature_data_hourly","81660a9b":"ax = plt.figure(figsize=(6,3), dpi=100).add_subplot(111)\ntemperature_data_hourly.pivot_table(index='timestamp',columns='sensor',values='temperature').plot(ax=ax, rot=45, linewidth=0.3)\nax.legend(loc='best',\n          fancybox=True, ncol=2, fontsize=8)","fd88b337":"temperature_data_hourly[temperature_data_hourly.temperature < -50].index;","f1eacf2e":"temperature_data_hourly= temperature_data_hourly.drop([163499]);","6090cef6":"#temperature_data_prueba.groupby('sensor').plot('timestamp', 'temperature')\nax = plt.figure(figsize=(6,3), dpi=100).add_subplot(111)\ntemperature_data_hourly.pivot_table(index='timestamp',columns='sensor',values='temperature').plot(ax=ax, rot=45, linewidth=0.3)\nax.legend(loc='lower center',\n          fancybox=True, ncol=6, fontsize=8)","b062d6a9":"flow_data.info()\n#flow_data.head()\nflow_data.describe()","3b528cbd":"flow_time_arr = pd.to_datetime(flow_data.timestamp)\nts_flow = pd.Series(data=np.array(flow_data.flow), \n                           index=pd.DatetimeIndex(flow_time_arr), dtype=\"float\")","88b65907":"#Same as before, resample hourly\nts_flow_hour = ts_flow.resample(\"H\").sum()","53d45c03":"#Is there any Nan?\nts_flow_hour[ts_flow_hour.isnull()]","8a516197":"ax = plt.figure(figsize=(6,3), dpi=200).add_subplot(111)\nts_flow_hour[ts_flow_hour < 0].plot(ax=ax, title=\"Flow per hour\", color=\"green\", label = \"Departures\")\nts_flow_hour[ts_flow_hour > 0].plot(ax=ax, color=\"orange\", label = \"Arrivals\")\nleg = ax.legend();","dc3c682e":"flow_departures = flow_data[flow_data.flow < 0]\nflow_arrivals = flow_data[flow_data.flow > 0]\nlist_of_series = [flow_departures, flow_arrivals]\n\nflow_departures['timestamp'] = pd.to_datetime(flow_departures['timestamp'])\nflow_departures.index = flow_departures['timestamp']\n\nflow_arrivals['timestamp'] = pd.to_datetime(flow_arrivals['timestamp'])\nflow_arrivals.index = flow_arrivals['timestamp']\n\nflow_arrivals = flow_arrivals.resample(\"M\").sum()\nflow_departures = flow_departures.resample(\"M\").sum()\nflow_departures['flow'] = flow_departures['flow'].abs()\n\n#print(flow_arrivals)\n#print(flow_departures)","283dbb4f":"width = 0.4\nax = plt.figure(figsize=(6,3), dpi=200).add_subplot(111)\nflow_departures.plot(ax=ax, kind=\"bar\",  color = \"green\", label = \"departures\", title = \"In\/Outs per month\", width=width, position=1)\nflow_arrivals.plot(ax=ax,kind=\"bar\", color = \"orange\", label = \"arrivals\", width=width, position=0)\nax.legend([\"departures\", \"arrivals\"])\nax.set_xticklabels(['Jan 17', 'Feb 17', 'Mar 17', 'Apr 17', 'May 17', 'Jun 17', 'Jul 17', 'Aug 17', 'Sep 17', 'Oct 17', 'Nov 17', 'Dec 17',\n                   'Jan 18', 'Feb 18', 'Mar 18', 'Apr 18', 'May 18', 'Jun 18', 'Jul 18', 'Aug 18', 'Sep 18', 'Oct 18', 'Nov 18', 'Dec 18',\n                   'Jan 19', 'Feb 19', 'Mar 19', 'Apr 19', 'May 19'], rotation=90);","d8f7f408":"print(flow_arrivals[flow_arrivals.index == '2017-10-31'] > flow_departures[flow_departures.index == '2017-10-31'])\nprint(flow_arrivals[flow_arrivals.index == '2017-11-30'] > flow_departures[flow_departures.index == '2017-11-30'])\n","93534d4b":"humidity_data.info()\nhumidity_data.head()\nhumidity_data.describe()","70dc2c99":"humidity_time_arr = pd.to_datetime(humidity_data.timestamp)\nts_humidity = pd.Series(data=np.array(humidity_data.humidity), \n                           index=pd.DatetimeIndex(humidity_time_arr), dtype=\"float\")","c3ef1e1c":"#Resample hourly\nts_humidity_hour = ts_humidity.resample(\"H\").mean()","faae7151":"#Is there any Nan?\nts_flow_hour[ts_flow_hour.isnull()]","6302404f":"ax = plt.figure(figsize=(5,2), dpi=200).add_subplot(111)\nts_humidity_hour.plot(ax=ax, title=\"Humidity per hour\", color=\"blue\")","98a406d5":"ts_humidity_hour[ts_humidity_hour < 0]\n","51d5fffa":"ts_humidity_hour['2017-05-06 12:00:00'] = ts_humidity_hour['2017-05-06 11:00:00']\nts_humidity_hour['2017-05-06 13:00:00'] = ts_humidity_hour['2017-05-06 15:00:00']\nts_humidity_hour['2019-04-09 11:00:00'] = ts_humidity_hour['2019-04-09 10:00:00']\nts_humidity_hour['2019-04-09 12:00:00'] = ts_humidity_hour['2019-04-09 10:00:00']\nts_humidity_hour['2019-04-09 13:00:00'] = ts_humidity_hour['2019-04-09 15:00:00']\nts_humidity_hour['2019-04-09 14:00:00'] = ts_humidity_hour['2019-04-09 15:00:00']","836a37e8":"ax = plt.figure(figsize=(5,2), dpi=200).add_subplot(111)\nts_humidity_hour.plot(ax=ax, title=\"Humidity per hour\", color=\"blue\")","2632cadd":"weight_data.info()\nweight_data.head()\nweight_data.describe()","947e22bd":"weight_time_arr = pd.to_datetime(weight_data.timestamp)\nts_weight = pd.Series(data=np.array(weight_data.weight), \n                           index=pd.DatetimeIndex(weight_time_arr), dtype=\"float\")","4fabd002":"#Resample hourly taking the mean\nts_weight_hour = ts_weight.resample(\"H\").mean()","7cb36e6b":"#Is there any Nan?\nts_weight_hour[ts_weight_hour.isnull()]","68052da7":"#Manual correction for '2017-03-26 02:00:00', using the data of one hour before\nts_weight_hour['2017-03-26 02:00:00'] = ts_weight_hour['2017-03-26 01:00:00']\nts_weight_hour[ts_flow_hour.isnull()]","d22909f8":"ax = plt.figure(figsize=(5,2), dpi=200).add_subplot(111)\nts_weight_hour.plot(ax=ax, title=\"Weight per hour\", color=\"black\")","a326a979":"ts_weight_hour[ts_weight_hour < 30]","d53453bb":"print(ts_weight_hour['2017-05-12 08:00:00'])\nprint(ts_weight_hour['2017-05-12 13:00:00'])\n\nprint(ts_weight_hour['2017-05-15 11:00:00'])\nprint(ts_weight_hour['2017-05-15 15:00:00'])\n\nprint(ts_weight_hour['2017-09-18 09:00:00'])\nprint(ts_weight_hour['2017-09-18 13:00:00'])\n","81aa7383":"ts_weight_hour['2017-05-12 09:00:00'] = ts_weight_hour['2017-05-12 08:00:00']\nts_weight_hour['2017-05-12 10:00:00'] = ts_weight_hour['2017-05-12 08:00:00']\nts_weight_hour['2017-05-12 12:00:00'] = ts_weight_hour['2017-05-12 13:00:00']\nts_weight_hour['2017-05-12 11:00:00'] = ts_weight_hour['2017-05-12 13:00:00']\nts_weight_hour['2017-05-15 12:00:00'] = ts_weight_hour['2017-05-15 11:00:00']\nts_weight_hour['2017-05-15 13:00:00'] = ts_weight_hour['2017-05-15 15:00:00']\nts_weight_hour['2017-05-15 14:00:00'] = ts_weight_hour['2017-05-15 15:00:00']\n\nts_weight_hour['2017-09-18 10:00:00'] = ts_weight_hour['2017-09-18 09:00:00']\nts_weight_hour['2017-09-18 11:00:00'] = ts_weight_hour['2017-09-18 13:00:00']\nts_weight_hour['2017-09-18 12:00:00'] = ts_weight_hour['2017-09-18 13:00:00']","d2ab73d0":"ax = plt.figure(figsize=(5,2), dpi=200).add_subplot(111)\nts_weight_hour.plot(ax=ax, title=\"Weight per hour\", color=\"black\")","14d622d9":"#Resample monthly\nts_weight_monthly = ts_weight.resample(\"M\").mean()\nts_humidity_monthly = ts_humidity.resample(\"M\").mean()\nts_temperature_monthly = ts_temperature.resample(\"M\").mean()\n","d3255d76":"w_h_t = pd.DataFrame({'weight' : ts_weight_monthly, 'humidity': ts_humidity_monthly, 'temperature': ts_temperature_monthly})\nw_h_t.plot(figsize=(10,6))","9cacb98f":"below_50 = ts_humidity_hour[ts_humidity_hour < 50]\nbrooding_humidity = ts_humidity_hour[(ts_humidity_hour > 50) & (ts_humidity_hour < 60)]\nax = plt.figure(figsize=(5,2), dpi=200).add_subplot(111)\nax.plot(ts_humidity_hour.index, ts_humidity_hour.values,color=\"blue\", alpha=0.3)\n#below_50.plot(ax=ax, color=\"yellow\")\nax.scatter(below_50.index, below_50.values, color=\"red\", s=1, alpha=1)\nax.scatter(brooding_humidity.index, brooding_humidity.values, color=\"yellow\", s=1, alpha=1)\nplt.xticks(rotation=90)\nax.tick_params(axis='both', which='major', labelsize=5)\nax.legend([\"humidity\", \"low humidity\", \"brood rearing\"],  prop={'size':5})\n","ab4aa779":"#brooding_humidity.index\nbrooding_temperature = ts_temperature_hour.filter(items=brooding_humidity.index)\nbrooding_temperature.head()","e56b7910":"ax = plt.figure(figsize=(5,2), dpi=150).add_subplot(111)\nts_temperature_hour.plot(ax=ax, title=\"Temperature per hour\", color=\"red\", alpha= 0.2)\nax.scatter(brooding_temperature.index, brooding_temperature.values, color=\"yellow\", s=1, alpha=1)\n#According to literature temperature should be around 30\u00baC and 35\u00baC, let's take a +-5\u00baC tolerance\nax.axhline(y=25, color='blue', linestyle='--', linewidth=0.5)\nax.axhline(y=40, color='blue', linestyle='--', linewidth=0.5)\nax.legend([\"temperature\", \"25\u00baC\", \"40\u00baC\", \"brooding temperature\"],  prop={'size':5})\n","bae9d7e0":"net_flow = ts_flow_hour.groupby(ts_flow_hour.index).sum()","16469a4b":"net_flow_spring = net_flow[(net_flow.index > '2017-03-20 00:00:00') & (net_flow.index < '2017-06-21 23:59:59')]\n#Lowest flow -> Indicates there was a significatly diference between arrivals and departures (more departures)\nmax_flow = net_flow_spring[net_flow_spring ==net_flow_spring.max()]\n#Highest flow -> More arrivals\nmin_flow = net_flow_spring[net_flow_spring ==net_flow_spring.min()]\nmax_min_flow = pd.concat([min_flow, max_flow])\nmax_min_flow","a9650db7":"#Resampling net flow weekly\nweekly_flow = ts_flow_hour.resample(\"W-MON\").sum()\nweekly_flow.head()","9953a4be":"#Find the biggest difference between two weeks\nflow_difference = weekly_flow.diff()\npositive_flow_weekly =  flow_difference[flow_difference == flow_difference.max()]\nnegative_flow_weekly =  flow_difference[flow_difference == flow_difference.min()]\n\nprint(positive_flow_weekly)\nprint(negative_flow_weekly)\n\n#The maximum diference corresponds to more departures the week corresponding \n#to '2017-06-05' this week can correspond to the queen leaving with most part of the population","2308abd8":"ax = plt.figure(figsize=(5,2), dpi=150).add_subplot(111)\nts_flow_hour.plot(ax=ax, title=\"Flow per hour\", linewidth=0.5)\nax.axvspan('2017-06-05', '2017-06-12', color=sns.xkcd_rgb['grey'], alpha=0.5)\nax.axvline('2017-06-05', color='k', linestyle='--', linewidth=0.3)\nax.axvline('2017-06-12', color='k', linestyle='--', linewidth=0.3)\n","6e03d44b":"from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes \nfrom mpl_toolkits.axes_grid1.inset_locator import mark_inset\n\nax = plt.figure(figsize=(5,2), dpi=150).add_subplot(111)\n#ts_weight_hour.plot(ax=ax, title=\"Weight per week\", linewidth=0.5)\nax.plot(ts_weight_hour.index, ts_weight_hour.values)\nax.axvspan('2017-06-05', '2017-06-12', color=sns.xkcd_rgb['grey'], alpha=0.5)\nax.axvline('2017-06-05', color='k', linestyle='--', linewidth=0.3)\nax.axvline('2017-06-12', color='k', linestyle='--', linewidth=0.3)\n\nax.tick_params(axis='both', which='major', labelsize=5)\n\n#I want to select the x-range for the zoomed region. I have figured it out suitable values\n# by trial and error. How can I pass more elegantly the dates as something like\nx1 = pd.Timestamp('2017-06-05')\nx2 = pd.Timestamp('2017-06-12')\ny1 = 62\ny2 = 70\n\naxins = zoomed_inset_axes(ax, 4, loc=2) # zoom = 2\naxins.plot(ts_weight_hour, color=\"orange\", linewidth=0.4)\naxins.set_xlim(x1, x2)\naxins.set_ylim(y1, y2)\nplt.yticks(visible=False)\nplt.xticks(visible=False)\nmark_inset(ax, axins, loc1=2, loc2=4, fc=\"none\", ec=\"0.3\")\nplt.draw()\nplt.show()","1f778bee":"# Exploratory Anlaysis\n\nThis Kernel explores the data from the bee hive data set from HOBOS.\n\nThere are 4 files to explore the different metrics: Temperature, weight, flow and humidity.","67406daf":"Curious, most of the time the departures are more than the arrivals. Makes sense, some bees may die while leaving the hive or can't return safely to it.\nBut, What happened in October and November? More arrivals than departures?","8e831a8c":"Can this be accurate? What happens with the weight of the hive on this specific week?","ffac2fe0":"Here we see that is seems that the data registration is not made in regular intervals","a3550746":"Create a time series with timestamp as the index and the weight of the beehive as the value.","45982599":"### Can you help with a deeper analysis of this data?","05bbdc4d":"# Size of the hive, main swarm and Queen B leaving?\n\nThe development of a bee colony follows an annual cycle of growth that begins in spring with a rapid expansion of the brood nest, as soon as pollen is available for feeding larvae. Some production of brood may begin as early as January, even in a cold winter, but breeding accelerates towards a peak in May (in the northern hemisphere), producing an abundance of harvesting bees synchronized to the main nectar flow in that region.\nSome regions of Europe have two nectar flows: one in late spring and another in late August. Other regions have only a single nectar flow. The skill of the beekeeper lies in predicting when the nectar flow will occur in his area and in trying to ensure that his colonies achieve a maximum population of harvesters at exactly the right time.\n","e41f091e":"Now, we can tag by sensor 1 to 13","b1022d39":"We can see that there is a high chance that health of the bees can decrease in the period between May and June.\n\n\"Increasing day length and pollen availability soon insures that birth rate exceeds death rate and the colony population grows rapidly in April, May and June. The adult population remains high but drops during July and August.\" https:\/\/articles.extension.org\/pages\/21747\/seasonality-of-brood-and-adult-populations-basic-bee-biology-for-beekeepers\n\nWhat is the connection with temperature ? \"the optimal temperature range for brood rearing is 30-35 \u00b0C.\" https:\/\/hal.archives-ouvertes.fr\/hal-00891337\/document\n\nLet's evaluate the temperature.","336a6360":"# Weight\n\nWeight is expressed in kg. This indicates that for this analysis the values are supposed to be positive.","de6a1b93":"There are some negative values. Check the values near that timestamps to check if it could be an error in the sensor.","13f1cff4":"Create time series with the time as the index and the temperature values as the data.","76fee8f2":"Finding the net bee population as Arrivals - Departures for each timestamp","2a64cce0":"There are some abrupt drops on the weight. Is it a down on the sensor or a defect, or is it correct?\nLet's take 30 Kg as a boundary to see how many values are less than that weight.","28a33378":"## Imports","17f3e806":"Create time series with the timestamp as the index and the humidity percentage as the value.","1175fe49":"# Humidity\nValues of humidity are expressed as a percentage. This means they are supposed to be in the interval [0,100].","7f3b7a4e":"## Import data","7f36c054":"# Flow\n\nValues of the flow can be either positive or negative. A positive value indicates there are more bees arriving to the hive and a negative value, that there are more bees leaving the hive.","7ca969b2":"Clearly with some hours of difference there is a different panorama, so we could be talking about a metric error. Manually change correct the values by replacing them for the previous or next one.","b1901b60":"# Brooding Period Identification\n\n\"Numerous studies have demonstrated that either high or low levels of humidity affect the health of the brood and adult bees, either directly, for example at levels below 50% relative humidity in the brood cells no eggs hatch  (Doull 1976)\nFor instance raising the humidity from 68% to 87% increases the percentage of brood mummification caused by the chalk brood by 8%.\"\n\n\"During the brood rearing period median levels of humidity in the nest of a healthy strong colony is between 50% and 60%.  It is rarely found to be below 40% and above 80%\"\n\nKnowing that let's identify if in 2017 was a probability of that.\n","f7c517a8":"Makes sense, we can see a drop on the hive's weight in that specific week.","118963c0":"How about in\/outs per month? ","4f54380c":"* Here we see that clearly around June-July we have the highest temperatures, but the lowest humidity.\n* At higher temperatures, the weight increases, so the bees produce more honey\n* Honey production -> Weight increase starts around April, just in spring, where flowers start to blossom","da46348e":"There are still some unexpected values less than 30 Kg, is it normal? Should be there another correction? ","3486c5dc":"There are 13 temperature sensors in total. But how do we separate them? \n\nData set order tells us that we have: sensor1 data followed by sensor 2, and so on. \nSo, we can tag each row with the corresponding tag, when we enconter that the date decreased (the data od the sensor is finished and it's starting with the following sensor data) we increase the tag.\n\nFirst, the data contains metrics every sometimes every 5 minutes, so I will work only hourly (this will not change so much), let's take only what I need...","0b77a11b":"Make regular time intervals. Taking the mean for creating an hourly value.\n","820760b3":"\"In the prime swarm, about 60% of the worker bees leave the original hive location with the old queen.\" https:\/\/en.wikipedia.org\/wiki\/Swarming_(honey_bee)","a06a9a75":"# Overview of Humidity, Temperature and Weight\n\nThis 3 factors seem really connected when you think about them. Also, they are very affected depending on the time of the year and season. \n\nTaking into account that the data comes from Germany and summer is in the middle of the year, while the coldest months are December and January, let's make a monthly overview on these 3 factor to see the correlation between them.","6eebc39c":"Notice that around May there is a value of humidity of less than 0. It could be caused by a sensor defect or error on the metric, so a manual correction is done by assigning values of time near the time it happened.","d6a26c41":"Create time series with timestamp as the index and the flow data as the value.","29f0a5da":"The values with the min and max net flow are with an hour difference, what does this mean?\nBy 3 pm, there are more departures and by 4 pm there are more arrivals.\nThis can be because it is the day corresponding to the main nectar flow and a great quantity of bees leave the hive to go look for nectar and within one hour most of them return.","2f5d52a9":"# Temperature\n\nLet's explore the temperature dataset. It is known that the values are expressed in C\u00ba"}}