{"cell_type":{"2f5cde24":"code","4db124d3":"code","9faa32d3":"code","2db69af3":"code","00baf09f":"code","293f31f5":"code","6c7d7cf0":"code","115a12f1":"code","87d91382":"code","7dc32a96":"code","8ae61470":"code","dd3012df":"code","ce5ca2fe":"code","0d4b0ab2":"code","e5cb2417":"code","57d207ee":"code","de627987":"code","0cf37fee":"code","bd65f577":"code","c618f5c8":"code","3b5a1959":"code","755bde24":"code","806fce94":"code","1ac1b714":"code","318d0505":"code","2363264e":"code","70b8c53f":"code","3e1b07c8":"code","ba064a14":"code","b668223d":"code","b25246f8":"code","726a863c":"code","5a3d7f74":"code","77bef766":"code","e52e65a9":"code","86344272":"code","473b947e":"code","6f4c19a6":"code","f528e437":"code","84752bb0":"code","1af051f4":"code","5a8ed928":"code","d66ad036":"code","1ab7f007":"code","805141e5":"code","76add04b":"code","32070e00":"code","8a52e2c5":"code","c2b97a80":"code","9a8f9a17":"code","660f61da":"code","5fcb3624":"code","0637dc12":"code","c2cb984b":"code","0bc8286e":"code","0c45d067":"markdown","3f85f3fb":"markdown","ac0380ca":"markdown","a3b5dec6":"markdown","86d83af3":"markdown","68551081":"markdown","2b120b1e":"markdown","e8ef8aae":"markdown","4ee48fd5":"markdown","02da8498":"markdown","f6e175cb":"markdown","4fe0dba1":"markdown","d067f57d":"markdown","c03cce3e":"markdown","7d1141ad":"markdown","23ae277a":"markdown","4e527d79":"markdown","8f8dc947":"markdown","aa08bc15":"markdown","7577a841":"markdown","06a511e5":"markdown","1bdf250f":"markdown","aa22003d":"markdown","7f0a8ff8":"markdown","ec7dc54d":"markdown","9d61138e":"markdown"},"source":{"2f5cde24":"# Importing necessary packages\nimport pandas as pd\nimport numpy as np\nimport sklearn \nfrom sklearn import linear_model\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import accuracy_score,f1_score\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import LinearSVC,SVC\nfrom sklearn.neighbors import KNeighborsClassifier","4db124d3":"#Importing the data\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        if(filename == 'detect_dataset.csv'):\n            detection_train = pd.read_csv(dirname + '\/' + filename).dropna(axis=1)\n        if(filename == 'classData.csv'):\n            class_train = pd.read_csv(dirname + '\/' + filename).dropna(axis=1)\n\nfeatures=['Ia','Ib','Ic','Va','Vb','Vc']\nclass_target = ['G','C','B','A']","9faa32d3":"#Defining the inputs and outputs\ndetection_data_X = detection_train[features]\nclass_data_X = class_train[features]\ndetection_data_Y = detection_train['Output (S)']\nclass_data_Y = class_train[class_target]\n\n#Defining accuracy and error vectors\ndetect_accuracy = list()\ndetect_error = list()\nclass_accuracy = list()\nclass_error = list()","2db69af3":"#Splitting the data \nclass_train_X,class_test_X,class_train_Y,class_test_Y= train_test_split(class_data_X,class_data_Y,test_size=0.33,random_state=1)\ndetection_train_X,detection_test_X,detection_train_Y,detection_test_Y = train_test_split(detection_data_X,detection_data_Y,test_size=0.33,random_state=1)","00baf09f":"#Defining different Models for different classification problems\ndetection_model = linear_model.Lasso(alpha = 2.0)\nclass_model = LinearRegression()","293f31f5":"#Fitting the data in different models\ndetection_model.fit(detection_train_X,detection_train_Y)\nclass_Y = np.array([class_train_Y['G']*1+class_train_Y['A']*2+class_train_Y['B']*3+class_train_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nclass_model.fit(class_train_X,class_Y)","6c7d7cf0":"#Predicting test values and printing out Mean Squared Error\ndetection_preds = detection_model.predict(detection_test_X)\nprint('The Error of our Detection Model is: ',mean_squared_error(detection_test_Y,detection_preds))\n\nclass_Y = np.array([class_test_Y['G']*1+class_test_Y['A']*2+class_test_Y['B']*3+class_test_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nclass_preds = class_model.predict(class_test_X)\nprint('The Error of our Classification Model is: ',mean_squared_error(class_Y,class_preds))\n\n#storing error values\ndetect_error.append(mean_squared_error(detection_test_Y,detection_preds))\nclass_error.append(mean_squared_error(class_Y,class_preds))","115a12f1":"# Printing out accuracy scores of our models\nprint('The accuracy score of our Detection Model is: ',(detection_model.score(detection_test_X,detection_test_Y)))\nprint('The accuracy score of our Classification Model is: ',(class_model.score(class_test_X,class_Y)))\n\n#Storing accuracy values\ndetect_accuracy.append((detection_model.score(detection_test_X,detection_test_Y)))\nclass_accuracy.append((class_model.score(class_test_X,class_Y)))","87d91382":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Detection Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(detection_test_X, detection_test_Y,'o')\naxs[1].plot(detection_test_X, detection_preds,'o')","7dc32a96":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Classification Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(class_test_X, class_Y,'o')\naxs[1].plot(class_test_X, class_preds,'o')","8ae61470":"#Defining different Models for different classification problems\ndetection_model = LogisticRegression()\nclass_model = LogisticRegression(max_iter=500)","dd3012df":"#Fitting the data in different models\ndetection_model.fit(detection_train_X,detection_train_Y)\nclass_Y = np.array([class_train_Y['G']*1+class_train_Y['A']\n                    *2+class_train_Y['B']*3+class_train_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nclass_model.fit(class_train_X,class_Y)","ce5ca2fe":"#Predicting test values and printing out Mean Squared Error\ndetection_preds = detection_model.predict(detection_test_X)\nprint('The Error of our Detection Model is: ',mean_squared_error(detection_test_Y,detection_preds))\n\nclass_Y = np.array([class_test_Y['G']*1+class_test_Y['A']*2+class_test_Y['B']*3+class_test_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nclass_preds = class_model.predict(class_test_X)\nprint('The Error of our Classification Model is: ',mean_squared_error(class_Y,class_preds))\n\n#storing error values\ndetect_error.append(mean_squared_error(detection_test_Y,detection_preds))\nclass_error.append(mean_squared_error(class_Y,class_preds))","0d4b0ab2":"# Printing out accuracy scores of our models\nprint('The accuracy score of our Detection Model is: ',(detection_model.score(detection_test_X,detection_test_Y)))\nprint('The accuracy score of our Classification Model is: ',(class_model.score(class_test_X,class_Y)))\n\n#Storing accuracy values\ndetect_accuracy.append((detection_model.score(detection_test_X,detection_test_Y)))\nclass_accuracy.append((class_model.score(class_test_X,class_Y)))","e5cb2417":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Detection Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(detection_test_X, detection_test_Y,'o')\naxs[1].plot(detection_test_X, detection_preds,'o')","57d207ee":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Classification Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(class_test_X, class_Y,'o')\naxs[1].plot(class_test_X, class_preds,'o')","de627987":"#selecion of suitable polynomial degree\nerrors = list()\nfor i in range(2,7):\n    class_model = PolynomialFeatures(i)\n    class_linear = LinearRegression()\n    class_linear.fit(class_model.fit_transform(class_train_X),class_train_Y)\n    class_preds = class_linear.predict(class_model.fit_transform(class_test_X))\n    errors.append(mean_squared_error(class_test_Y,class_preds))\n\nfig,ax = plt.subplots(1,1)\nfig.set_figwidth(10)\nfig.suptitle('Polnomial Regression Model comparison')\n\nax.set_xticks([0,1,2,3,4,5,6,7])\nax.set_xticklabels(['2','3','4','5','6','7','8','9'])\nax.plot(errors,'*')\nax.plot(errors)","0cf37fee":"#Defining different Models for different classification problems\ndetection_model = PolynomialFeatures(2)\nclass_model = PolynomialFeatures(4)\ndetect_linear = LinearRegression()\nclass_linear = LinearRegression()","bd65f577":"#Fitting the data in different models\ndetect_linear.fit(detection_model.fit_transform(detection_train_X),detection_train_Y)\nclass_Y = np.array([class_train_Y['G']*1+class_train_Y['A']\n                    *2+class_train_Y['B']*3+class_train_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nclass_linear.fit(class_model.fit_transform(class_train_X),class_Y)","c618f5c8":"#Predicting test values and printing out Mean Squared Error\ndetection_preds = detect_linear.predict(detection_model.fit_transform(detection_test_X))\nprint('The Error of our Detection Model is: ',mean_squared_error(detection_test_Y,detection_preds))\n\nclass_preds = class_linear.predict(class_model.fit_transform(class_test_X))\nclass_Y = np.array([class_test_Y['G']*1+class_test_Y['A']\n                    *2+class_test_Y['B']*3+class_test_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nprint('The Error of our Classification Model is: ',mean_squared_error(class_Y,class_preds))\n\n#storing error values\ndetect_error.append(mean_squared_error(detection_test_Y,detection_preds))\nclass_error.append(mean_squared_error(class_Y,class_preds))","3b5a1959":"# Printing out accuracy scores of our models\nprint('The accuracy score of our Detection Model is: ',(detect_linear.score(detection_model.fit_transform(detection_test_X),detection_test_Y)))\nprint('The accuracy score of our Classification Model is: ',(class_linear.score(class_model.fit_transform(class_test_X),class_Y)))\n\n#Storing accuracy values\ndetect_accuracy.append((detect_linear.score(detection_model.fit_transform(detection_test_X),detection_test_Y)))\nclass_accuracy.append((class_linear.score(class_model.fit_transform(class_test_X),class_Y)))","755bde24":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Detection Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(detection_test_X, detection_test_Y,'o')\naxs[1].plot(detection_test_X, detection_preds,'o')","806fce94":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Classification Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(class_test_X, class_Y,'o')\naxs[1].plot(class_test_X, class_preds,'o')","1ac1b714":"#Defining different Models for different classification problems\ndetection_model = MLPClassifier(solver='lbfgs', alpha=1e-5,\n                    hidden_layer_sizes=(5, 2), random_state=1,max_iter = 1000)\nclass_model = MLPClassifier(solver='lbfgs', alpha=1e-5,\n                    hidden_layer_sizes=(10, 6), random_state=1,max_iter = 2500)","318d0505":"#Fitting the data in different models\ndetection_model.fit(detection_train_X,detection_train_Y)\nclass_Y = np.array([class_train_Y['G']*1+class_train_Y['A']\n                    *2+class_train_Y['B']*3+class_train_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nclass_model.fit(class_train_X,class_Y)","2363264e":"#Predicting test values and printing out Mean Squared Error\ndetection_preds = detection_model.predict(detection_test_X)\nprint('The Error of our Detection Model is: ',mean_squared_error(detection_test_Y,detection_preds))\n\nclass_preds = class_model.predict(class_test_X)\nclass_Y = np.array([class_test_Y['G']*1+class_test_Y['A']\n                    *2+class_test_Y['B']*3+class_test_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nprint('The Error of our Classification Model is: ',mean_squared_error(class_Y,class_preds))\n\n#storing error values\ndetect_error.append(mean_squared_error(detection_test_Y,detection_preds))\nclass_error.append(mean_squared_error(class_Y,class_preds))","70b8c53f":"# Printing out accuracy scores of our models\nprint('The accuracy score of our Detection Model is: ',(detection_model.score(detection_test_X,detection_test_Y)))\nprint('The accuracy score of our Classification Model is: ',(class_model.score(class_test_X,class_Y)))\n\n#Storing accuracy values\ndetect_accuracy.append((detection_model.score(detection_test_X,detection_test_Y)))\nclass_accuracy.append((class_model.score(class_test_X,class_Y)))","3e1b07c8":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Detection Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(detection_test_X, detection_test_Y,'o')\naxs[1].plot(detection_test_X, detection_preds,'o')","ba064a14":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Classification Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(class_test_X, class_Y,'o')\naxs[1].plot(class_test_X, class_preds,'o')","b668223d":"#Defining different Models for different classification problems\ndetection_model = GaussianNB()\nclass_model = GaussianNB()","b25246f8":"#Fitting the data in different models\ndetection_model.fit(detection_train_X,detection_train_Y)\nclass_Y = np.array([class_train_Y['G']*1+class_train_Y['A']\n                    *2+class_train_Y['B']*3+class_train_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nclass_model.fit(class_train_X,class_Y)","726a863c":"#Predicting test values and printing out Mean Squared Error\ndetection_preds = detection_model.predict(detection_test_X)\nprint('The Error of our Detection Model is: ',mean_squared_error(detection_test_Y,detection_preds))\n\nclass_Y = np.array([class_test_Y['G']*1+class_test_Y['A']*2+class_test_Y['B']*3+class_test_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nclass_preds = class_model.predict(class_test_X)\nprint('The Error of our Classification Model is: ',mean_squared_error(class_Y,class_preds))\n\n#storing error values\ndetect_error.append(mean_squared_error(detection_test_Y,detection_preds))\nclass_error.append(mean_squared_error(class_Y,class_preds))","5a3d7f74":"# Printing out accuracy scores of our models\nprint('The accuracy score of our Detection Model is: ',(detection_model.score(detection_test_X,detection_test_Y)))\nprint('The accuracy score of our Classification Model is: ',(class_model.score(class_test_X,class_Y)))\n\n#Storing accuracy values\ndetect_accuracy.append((detection_model.score(detection_test_X,detection_test_Y)))\nclass_accuracy.append((class_model.score(class_test_X,class_Y)))","77bef766":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Detection Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(detection_test_X, detection_test_Y,'o')\naxs[1].plot(detection_test_X, detection_preds,'o')","e52e65a9":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Classification Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(class_test_X, class_Y,'o')\naxs[1].plot(class_test_X, class_preds,'o')","86344272":"#Defining different Models for different classification problems\ndetection_model = DecisionTreeClassifier()\nclass_model = DecisionTreeClassifier()","473b947e":"#Fitting the data in different models\ndetection_model.fit(detection_train_X,detection_train_Y)\nclass_Y = np.array([class_train_Y['G']*1+class_train_Y['A']\n                    *2+class_train_Y['B']*3+class_train_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nclass_model.fit(class_train_X,class_Y)","6f4c19a6":"#Predicting test values and printing out Mean Squared Error\ndetection_preds = detection_model.predict(detection_test_X)\nprint('The Error of our Detection Model is: ',mean_squared_error(detection_test_Y,detection_preds))\n\nclass_Y = np.array([class_test_Y['G']*1+class_test_Y['A']*2+class_test_Y['B']*3+class_test_Y['C']*5])\nclass_Y = class_Y.transpose().ravel()\nclass_preds = class_model.predict(class_test_X)\nprint('The Error of our Classification Model is: ',mean_squared_error(class_Y,class_preds))\n\n#storing error values\ndetect_error.append(mean_squared_error(detection_test_Y,detection_preds))\nclass_error.append(mean_squared_error(class_Y,class_preds))","f528e437":"# Printing out accuracy scores of our models\nprint('The accuracy score of our Detection Model is: ',(detection_model.score(detection_test_X,detection_test_Y)))\nprint('The accuracy score of our Classification Model is: ',(class_model.score(class_test_X,class_Y)))\n\n#Storing accuracy values\ndetect_accuracy.append((detection_model.score(detection_test_X,detection_test_Y)))\nclass_accuracy.append((class_model.score(class_test_X,class_Y)))","84752bb0":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Detection Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(detection_test_X, detection_test_Y,'o')\naxs[1].plot(detection_test_X, detection_preds,'o')","1af051f4":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Classification Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(class_test_X, class_Y,'o')\naxs[1].plot(class_test_X, class_preds,'o')","5a8ed928":"#Defining different Models for different classification problems\ndetection_model = SVC()\nclass_model = LinearSVC()","d66ad036":"#Fitting the data in different models\ndetection_model.fit(detection_train_X,detection_train_Y)\nclass_Y = np.array([class_train_Y['G']*1+class_train_Y['A']\n                    *2+class_train_Y['B']*3+class_train_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nclass_model.fit(class_train_X,class_Y)","1ab7f007":"#Predicting test values and printing out Mean Squared Error\ndetection_preds = detection_model.predict(detection_test_X)\nprint('The Error of our Detection Model is: ',mean_squared_error(detection_test_Y,detection_preds))\n\nclass_Y = np.array([class_test_Y['G']*1+class_test_Y['A']*2+class_test_Y['B']*3+class_test_Y['C']*5])\nclass_Y = class_Y.transpose().ravel()\nclass_preds = class_model.predict(class_test_X)\nprint('The Error of our Classification Model is: ',mean_squared_error(class_Y,class_preds))\n\n#storing error values\ndetect_error.append(mean_squared_error(detection_test_Y,detection_preds))\nclass_error.append(mean_squared_error(class_Y,class_preds))","805141e5":"# Printing out accuracy scores of our models\nprint('The accuracy score of our Detection Model is: ',(detection_model.score(detection_test_X,detection_test_Y)))\nprint('The accuracy score of our Classification Model is: ',(class_model.score(class_test_X,class_Y)))\n\n#Storing accuracy values\ndetect_accuracy.append((detection_model.score(detection_test_X,detection_test_Y)))\nclass_accuracy.append((class_model.score(class_test_X,class_Y)))","76add04b":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Detection Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(detection_test_X, detection_test_Y,'o')\naxs[1].plot(detection_test_X, detection_preds,'o')","32070e00":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Classification Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(class_test_X, class_Y,'o')\naxs[1].plot(class_test_X, class_preds,'o')","8a52e2c5":"#Defining different Models for different classification problems\ndetection_model = KNeighborsClassifier(n_neighbors=2)\nclass_model = KNeighborsClassifier(n_neighbors=6)","c2b97a80":"#Fitting the data in different models\ndetection_model.fit(detection_train_X,detection_train_Y)\nclass_Y = np.array([class_train_Y['G']*1+class_train_Y['A']\n                    *2+class_train_Y['B']*3+class_train_Y['C']*5])\nclass_Y= class_Y.transpose().ravel()\nclass_model.fit(class_train_X,class_Y)","9a8f9a17":"#Predicting test values and printing out Mean Squared Error\ndetection_preds = detection_model.predict(detection_test_X)\nprint('The Error of our Detection Model is: ',mean_squared_error(detection_test_Y,detection_preds))\n\nclass_Y = np.array([class_test_Y['G']*1+class_test_Y['A']*2+class_test_Y['B']*3+class_test_Y['C']*5])\nclass_Y = class_Y.transpose().ravel()\nclass_preds = class_model.predict(class_test_X)\nprint('The Error of our Classification Model is: ',mean_squared_error(class_Y,class_preds))\n\n#storing error values\ndetect_error.append(mean_squared_error(detection_test_Y,detection_preds))\nclass_error.append(mean_squared_error(class_Y,class_preds))","660f61da":"# Printing out accuracy scores of our models\nprint('The accuracy score of our Detection Model is: ',(detection_model.score(detection_test_X,detection_test_Y)))\nprint('The accuracy score of our Classification Model is: ',(class_model.score(class_test_X,class_Y)))\n\n#Storing accuracy values\ndetect_accuracy.append((detection_model.score(detection_test_X,detection_test_Y)))\nclass_accuracy.append((class_model.score(class_test_X,class_Y)))","5fcb3624":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Detection Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(detection_test_X, detection_test_Y,'o')\naxs[1].plot(detection_test_X, detection_preds,'o')","0637dc12":"fig, axs = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Classification Results')\naxs[0].set_title('Input')\naxs[1].set_title('Predicted')\naxs[0].plot(class_test_X, class_Y,'o')\naxs[1].plot(class_test_X, class_preds,'o')","c2cb984b":"fig,ax = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Detection Model comparison')\nx = [0,1,2,3,4,5,6,7]\n\nax[0].set_xticks(x)\nax[0].set_xticklabels(['Linear','Logistic','Polynomial','MLPC','Naive Bayes','D-tree','SVM','KNN'])\nax[0].set_title('Accuracy')\nax[0].plot(detect_accuracy,'*')\nax[0].plot(detect_accuracy)\nfor i in range(len(detect_accuracy)):\n    detect_accuracy[i] = round(detect_accuracy[i],4)\nfor i,j in zip(x,detect_accuracy):\n    ax[0].annotate(str(j),xy=(i,j))\n\nax[1].set_xticks(x)\nax[1].set_xticklabels(['Linear','Logistic','Polynomial','MLPC','Naive Bayes','D-tree','SVM','KNN'])\nax[1].set_title('Error')\nax[1].plot(detect_error,'*')\nax[1].plot(detect_error)\nfor i in range(len(detect_error)):\n    detect_error[i] = round(detect_error[i],4)\nfor i,j in zip(x,detect_error):\n    ax[1].annotate(str(j),xy=(i,j))","0bc8286e":"fig,ax = plt.subplots(1,2)\nfig.set_figwidth(16)\nfig.suptitle('Classification Model comparison')\nx = [0,1,2,3,4,5,6,7]\n\nax[0].set_xticks([0,1,2,3,4,5,6,7])\nax[0].set_xticklabels(['Linear','Logistic','Polynomial','MLPC','Naive Bayes','D-tree','SVM','KNN'])\nax[0].set_title('Accuracy')\nax[0].plot(class_accuracy,'*')\nax[0].plot(class_accuracy)\nfor i in range(len(class_accuracy)):\n    class_accuracy[i] = round(class_accuracy[i],4)\nfor i,j in zip(x,class_accuracy):\n    ax[0].annotate(str(j),xy=(i,j))\n\nax[1].set_xticks([0,1,2,3,4,5,6,7])\nax[1].set_xticklabels(['Linear','Logistic','Polynomial','MLPC','Naive Bayes','D-tree','SVM','KNN'])\nax[1].set_title('Error')\nax[1].plot(class_error,'*')\nax[1].plot(class_error)\nfor i in range(len(class_error)):\n    class_error[i] = round(class_error[i],4)\nfor i,j in zip(x,class_error):\n    ax[1].annotate(str(j),xy=(i,j))","0c45d067":"# Naive Bayes","3f85f3fb":"# Electrical Fault detection and Classification using ANN models","ac0380ca":"### Graphs","a3b5dec6":"### Graphs","86d83af3":"### Results","68551081":"### Graphs","2b120b1e":"### Graphs","e8ef8aae":"# Model selection","4ee48fd5":"# Decision Tree classifier","02da8498":"### Graphs","f6e175cb":"### Results","4fe0dba1":"### Results","d067f57d":"### Results","c03cce3e":"# Logistic regression","7d1141ad":"### Results","23ae277a":"### Results","4e527d79":"### Results","8f8dc947":"### Graphs","aa08bc15":"# SVM","7577a841":"# Polynomial regression","06a511e5":"### Graphs","1bdf250f":"### Graphs","aa22003d":"# Multi layer perceptron","7f0a8ff8":"### Results","ec7dc54d":"# KNN","9d61138e":"# Linear regression"}}