{"cell_type":{"ed4b4826":"code","e3cb8e62":"code","29d53eed":"code","555daf5c":"code","9a70e199":"code","3bf62c34":"code","5ad0991c":"code","3bcb1db2":"code","84a9bc36":"code","bea4008b":"code","5d6ecc98":"code","1417caf8":"code","e907a268":"code","811bc00d":"code","fb958d28":"code","c145ccfd":"code","dc061f3f":"code","c0b004af":"code","24aca240":"code","69fb1d86":"code","01a8c8e5":"code","82d0cbd0":"code","ed029673":"markdown"},"source":{"ed4b4826":"%%javascript\nIPython.OutputArea.prototype._should_scroll = function(lines) {\n    return false;\n}\n","e3cb8e62":"import datetime as dt\ndt_string = dt.datetime.now().strftime(\"%d\/%m\/%Y\")\nprint(f\"Kernel last updated: {dt_string}\")\nimport pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport datetime as dt\nimport folium\nfrom folium.plugins import HeatMap, HeatMapWithTime\n%matplotlib inline\nprint(os.listdir('\/kaggle\/input'))","29d53eed":"data_df = pd.read_csv(\"..\/input\/coronavirus-2019ncov\/covid-19-all.csv\")\nworld_population = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')","555daf5c":"print(f\"Rows: {data_df.shape[0]}, Columns: {data_df.shape[1]}\")","9a70e199":"data_df.head()","3bf62c34":"data_df.tail()","5ad0991c":"world_population.head()","3bcb1db2":"for column in data_df.columns:\n    print(f\"{column}:{data_df[column].dtype}\")","84a9bc36":"print(f\"Date - unique values: {data_df['Date'].nunique()} ({min(data_df['Date'])} - {max(data_df['Date'])})\")","bea4008b":"data_df['Date'] = pd.to_datetime(data_df['Date'])","5d6ecc98":"for column in data_df.columns:\n    print(f\"{column}:{data_df[column].dtype}\")","1417caf8":"print(f\"Date - unique values: {data_df['Date'].nunique()} ({min(data_df['Date'])} - {max(data_df['Date'])})\")","e907a268":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","811bc00d":"missing_data(data_df)","fb958d28":"all_countries = data_df['Country\/Region'].unique()\nprint(f\"Countries\/Regions:{all_countries}\")","c145ccfd":"data_all_wd = pd.DataFrame(data_df.groupby(['Country\/Region', 'Date'])['Confirmed',  'Recovered', 'Deaths'].sum()).reset_index()\ndata_all_wd.columns = ['Country', 'Date', 'Confirmed', 'Recovered', 'Deaths' ]\ndata_all_wd = data_all_wd.sort_values(by = ['Country','Date'], ascending=False)","dc061f3f":"def logistic(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1","c0b004af":"def double_logistic(x, L1, k1, x01, L2, k2, x02 ):\n    return logistic(x, L1, k1, x01) + logistic(x, L2, k2, x02)\n","24aca240":"def tripple_logistic(x, L1, k1, x01, L2, k2, x02, L3, k3, x03 ):\n    return logistic(x, L1, k1, x01) + logistic(x, L2, k2, x02) + logistic(x, L3, k3, x03)","69fb1d86":"import datetime\nimport scipy\ndef plot_logistic_fit_data(d_df, title, population):\n    d_df = d_df.sort_values(by=['Date'], ascending=True)\n    print(d_df.tail())\n    print()\n    d_df['x'] = np.arange(len(d_df)) + 1\n    d_df['y'] = d_df['Deaths']\n    d_df['z'] = d_df['Confirmed']\n\n    x = d_df['x']\n    y = d_df['y']\n\n    c2 = scipy.optimize.curve_fit(tripple_logistic,  x,  y,  )#p0=(100000, 0.2, 70, 100000, 0.2, 70) )\n    #y = logistic(x, L, k, x0)\n    popt, pcov = c2\n    print(\"Predicted L (the maximum number of confirmed deaths): \" + str(int(popt[0])))\n    print(\"Predicted k (growth rate): \" + str(float(popt[1])))\n    print(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")\n#     print(*popt)\n    x = range(1,d_df.shape[0] + int(popt[2]))\n    \n    y_fit = tripple_logistic(x, *popt)\n    size = 3 \n    f, ax = plt.subplots(1,1, figsize=(4*size,2*size))\n\n    g = sns.scatterplot(x=d_df['x'], y=(d_df['z'] \/ population), ax=ax, label='Confirmed Infections', color='blue')\n    plt.ylabel(f'Infections per million of population')\n\n    ax2 = ax.twinx()\n\n    g = sns.scatterplot(x=d_df['x'], y=(d_df['y'] \/ population), ax=ax2, label='Confirmed deaths (included for fit)', color='red')\n    g = sns.lineplot(x=x, y=(y_fit \/ population), ax=ax2, label='Predicted values', color='green')\n    plt.ylabel(f'deaths per million of population')\n    plt.xlabel('Days since first death')\n    plt.title(f'Confirmed deaths & predicted evolution (logistic curve) per million population: {title}')\n    plt.xticks(rotation=90)\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show()","01a8c8e5":"pop = world_population['Population (2020)'].sum()\npopulation = float(pop) \/ 1e6\nprint(f\"\")\nprint(f\"World Population {population} million\")\nprint(f\"\")\n\ndata_xx = data_all_wd\n\nd_df = data_xx.copy()\nd_df = d_df.resample('D', on='Date').sum()\n\ntry:\n    plot_logistic_fit_data(d_df, 'World', population)\nexcept Exception as e:\n    print(e)\n","82d0cbd0":"countries = ['US', 'Ireland', 'United Kingdom', 'France', 'Spain', 'Italy', 'Germany', 'Denmark',  'New Zealand', 'Turkey', 'Iceland', 'Norway', \n             'Sweden', 'Finland', 'Israel', 'Taiwan', 'South Korea', 'Japan', 'Russia', 'China', 'Iran', 'Portugal', 'Brazil', 'India'  ]\n\nlist.sort(countries)\npop_country_replacements = {'US': 'United States' }\n\nfor country in countries:\n    pop_country = country if country not in pop_country_replacements else pop_country_replacements[country]\n    pop = world_population[world_population['Country (or dependency)']==pop_country]['Population (2020)']\n    population = float(pop) \/ 1e6\n    print(f\"\")\n    print(f\"{country} Population {population} million\")\n    print(f\"\")\n          \n    data_xx = data_all_wd[data_all_wd['Country']==country]\n\n    d_df = data_xx.copy()\n    try:\n        plot_logistic_fit_data(d_df, country, population)\n    except Exception as e:\n        print(e)\n","ed029673":"# Tracking the mortality of 2019 Coronavirus"}}