{"cell_type":{"b17b2dca":"code","dd7e14c3":"code","6d6657a4":"code","78701402":"code","ef48ca3b":"code","78fd3fe0":"code","97afa2fe":"code","3f4cbecb":"code","dc2db658":"code","c1f2d312":"code","736f5474":"code","c7fb0fc7":"code","31ba0111":"code","d170395c":"code","8e3356c3":"code","71685173":"code","14d49ff3":"code","9f544855":"code","b0ed2e14":"code","dd8e891d":"code","473145ba":"code","50184455":"code","85c343e9":"code","8b530994":"code","d19d79c1":"code","71f68a9b":"code","76ee38c7":"code","3932d459":"code","09ff06b8":"code","0957f223":"code","48649daf":"code","34323944":"code","04e85eff":"code","753c4642":"code","76306c43":"code","6a6c3866":"code","4a0596f4":"code","f07c2cc6":"code","695e05b9":"code","82e4e501":"code","92e98552":"code","905065e8":"code","b02b9813":"code","ec96aa5c":"code","16126baf":"code","b2c771ff":"code","1b41c69b":"code","c236b448":"code","4c745555":"code","e9dc0bf2":"code","8e915f8c":"code","44dae8a6":"code","97934fde":"code","74c8fc31":"code","67981ab1":"code","08076323":"code","140a0ff0":"code","0ea487c0":"code","65908b5d":"code","9962bcf5":"code","b19a461f":"code","6733ff21":"code","29eed3a2":"code","9e474bbd":"code","6caea0e3":"code","98a90958":"code","389314a2":"code","f0879ce5":"code","02e60f20":"code","71f07002":"code","7f51380d":"code","8cfde365":"code","23c3c703":"code","c79f4796":"code","dfce3700":"code","fc89048a":"code","8e185db0":"code","a9c6130e":"code","01febf24":"code","55ec2081":"code","acee25d1":"code","c6ac77f2":"code","287017e3":"code","d2296bfb":"code","e8ad90fe":"code","b0932fb2":"code","3d05d965":"code","10ee8a4a":"code","9c32f89d":"code","d0085745":"code","7f6d9403":"code","53192e1e":"code","e315e86d":"code","fa9a34ed":"code","bc097052":"code","d3bb0966":"code","bec8901b":"code","f5d5db24":"code","9732af39":"code","0751772b":"code","d84e2daf":"code","ddce4752":"code","a8e76869":"code","a6d29523":"code","74a4725d":"code","7d30c3d1":"code","60ce51d0":"code","b6532c18":"code","2af9106a":"code","3c2af70b":"code","ba877b94":"code","00e53927":"code","3c40fe11":"code","d3a0a6cc":"code","9f824164":"code","3cdedc1f":"code","7ae74691":"code","12b7c2d5":"code","5f72d5e9":"code","690cd6c0":"code","00b3ebc5":"code","4487f289":"code","148e446d":"code","a4293635":"code","4a987a64":"code","5f12000d":"code","4f737055":"code","1a88f928":"code","7a1ca905":"code","bdc5f138":"code","89371753":"code","64d070c6":"code","a2e2ca2c":"code","dc9d1b63":"code","6595812c":"code","ba4ba286":"code","bc01e2a3":"code","68491a1c":"code","455e7e76":"code","dbab32f2":"code","de614f19":"code","0d02ff57":"code","2a1d5a92":"code","19265b86":"code","d5d85ffa":"code","19728952":"code","3eecc4ba":"code","fdb30f2f":"code","3a519744":"code","7723a4ab":"code","76992b3a":"code","9d57369c":"code","838b5da2":"code","3bf34613":"code","e000703f":"code","8f4cde8c":"code","c804add5":"code","549aa10f":"code","ae3d9c6c":"code","b6ef5988":"code","c5d3bcbc":"code","f37184f2":"code","7fee4c1e":"code","d3ea4f1b":"code","75228de0":"code","7f49262c":"code","25004a25":"code","10cf2ce6":"code","2218a340":"markdown","3a2ebdc7":"markdown","19f32db6":"markdown","84be31ca":"markdown","968988f1":"markdown","a4b41afe":"markdown","b9516dca":"markdown","7d3cf085":"markdown","9cf8dab3":"markdown","f21153fa":"markdown","1b162670":"markdown","53a11548":"markdown","ea6d6369":"markdown","537216b3":"markdown","9823c3bc":"markdown","17230e4a":"markdown","836ca7f0":"markdown","be137a29":"markdown","25a5c92a":"markdown","f2f536e5":"markdown","7aaf2755":"markdown","6e6c226c":"markdown","ab73cc94":"markdown","5050fdd6":"markdown","8d0e0c30":"markdown","0365fbc5":"markdown","8a7d6748":"markdown","24bb1de3":"markdown","a4754ce8":"markdown","548b4c18":"markdown","30782998":"markdown","77370a33":"markdown","c3154e86":"markdown","1fbf69f2":"markdown","3976b1d3":"markdown","6d1c98cb":"markdown","f3577953":"markdown","49de693e":"markdown","c623d8ac":"markdown","9f4770eb":"markdown","bdf8b6e2":"markdown","d0165b3b":"markdown","6ad8ccf9":"markdown","c3c2ab80":"markdown","47c24bcb":"markdown","b60c483b":"markdown","787f95cf":"markdown","69549ba2":"markdown","5bfe8da0":"markdown","6968ba04":"markdown","9268b709":"markdown","bd4ab0ec":"markdown","48a4ba8f":"markdown","0a9543a1":"markdown","e0e76d24":"markdown","2bd858ae":"markdown","19d19a38":"markdown","39511788":"markdown","e88c9659":"markdown","04e00b41":"markdown","36e35243":"markdown","70fe7bae":"markdown","8a0ab630":"markdown","0d4c0c6f":"markdown","c859a0ef":"markdown","405be211":"markdown","baaa0d07":"markdown","35c40813":"markdown","6427c813":"markdown"},"source":{"b17b2dca":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy","dd7e14c3":"data_raw = pd.read_csv(r'..\/input\/titanic\/train.csv')\ndata_raw.head(10)","6d6657a4":"column_list = data_raw.columns.tolist()\ncolumn_list[2] = \"Ticket Class\"\ncolumn_list[6] = \"Number of Siblings\/Spouses aboard\"\ncolumn_list[7] = \"Number of Parents\/Children aboard\"\ndata_raw.columns = column_list\ndata_raw.head()","78701402":"data_raw.drop(['PassengerId','Ticket'],axis = 1,inplace = True)\n","ef48ca3b":"results_raw = data_raw['Survived']","78fd3fe0":"from sklearn.model_selection import StratifiedShuffleSplit\nsplit = StratifiedShuffleSplit(n_splits = 1, test_size = 0.1, random_state = 42)\n\nfor train_index,test_index in split.split(data_raw,results_raw):\n    training_data_raw = data_raw.iloc[train_index,:]\n    testing_data_raw = data_raw.iloc[test_index,:]\n    \n    ","97afa2fe":"training_data_raw['Survived'].value_counts(normalize = True).to_frame()","3f4cbecb":"testing_data_raw['Survived'].value_counts(normalize = True).to_frame()","dc2db658":"def numberofnan(dataset):\n    \n    column_labels = dataset.columns.tolist()\n    num_missingvalues = list()\n    percentage_missingvalues = list()\n    for column in column_labels:\n        num_missingvalues.append(dataset[column].isna().sum())\n        percentage_missingvalues.append(100*(dataset[column].isna().sum())\/dataset[column].shape[0])\n    missing_value_percentage_df = pd.DataFrame({'Column Name':column_labels,'Number of Missing values':num_missingvalues,'% of missing values':percentage_missingvalues})\n    return missing_value_percentage_df","c1f2d312":"missing_data_df = numberofnan(training_data_raw)\ndisplay(missing_data_df.style.background_gradient(cmap = 'Reds',axis = 0))","736f5474":"missing_data_df = numberofnan(testing_data_raw)\ndisplay(missing_data_df.style.background_gradient(cmap = 'Reds',axis = 0))","c7fb0fc7":"training_data_raw.dropna(subset = ['Embarked'],inplace = True)\nmissing_data_df = numberofnan(training_data_raw)\ndisplay(missing_data_df.style.background_gradient(cmap = 'Reds',axis = 0))","31ba0111":"groupeddata = training_data_raw.groupby('Sex')\n\nkeylist = list()\n\nfor key,group in groupeddata:\n    keylist.append(key)","d170395c":"groupeddata.get_group(keylist[0]).head()","8e3356c3":"groupeddata.get_group(keylist[1]).head()","71685173":"#Average Female Age\nimport math\nmath.ceil(groupeddata.get_group(keylist[0])['Age'].mean())","14d49ff3":"math.ceil(groupeddata.get_group(keylist[1])['Age'].mean())","9f544855":"training_data_raw['Age'] = training_data_raw.groupby('Sex')['Age'].apply(lambda x:x.fillna(math.ceil(x.mean())))\ntraining_data_raw.head(50)","b0ed2e14":"missing_data_df = numberofnan(training_data_raw)\ndisplay(missing_data_df.style.background_gradient(cmap = 'Reds',axis = 0))","dd8e891d":"training_data_raw.drop(['Cabin'],axis = 1,inplace = True)\ntraining_data_raw.head()","473145ba":"missing_data_df = numberofnan(training_data_raw)\ndisplay(missing_data_df.style.background_gradient(cmap = 'Reds',axis = 0))","50184455":"from sklearn.base import BaseEstimator, TransformerMixin\n\nclass fillmissingvalues(BaseEstimator,TransformerMixin):\n    def __init__(self):\n        return None\n    def fit(self,dataset):\n        return self\n    def transform(self,dataset):\n        dataset['Age'] = dataset.groupby('Sex')['Age'].apply(lambda x:x.fillna(math.ceil(x.mean())))\n        dataset.drop(['Cabin'],axis = 1,inplace = True)\n        return dataset","85c343e9":"filldrop = fillmissingvalues()\ntesting_data_raw = filldrop.fit_transform(testing_data_raw)","8b530994":"missing_testing_data_df = numberofnan(testing_data_raw)\ndisplay(missing_testing_data_df.style.background_gradient(cmap = 'Reds',axis = 0))","d19d79c1":"clean_dataset = training_data_raw","71f68a9b":"survival_sex = pd.crosstab(clean_dataset['Sex'],clean_dataset['Survived'])\nsurvival_sex","76ee38c7":"sex = np.arange(len(survival_sex.index.values))\nwidth = 0.35\n\nax_sex = plt.figure(figsize = (8,6)).add_subplot(111)\nax_sex.bar(sex - width\/2,survival_sex[0],width,label = 'Did not survive')\nax_sex.bar(sex + width\/2,survival_sex[1],width,label = 'Survived')\n\nax_sex.set_title('Survival vs Gender: Figure 1')\nax_sex.set_xlabel('Gender')\nax_sex.set_ylabel('Total Count')\nax_sex.set_xticks(sex)\nax_sex.set_xticklabels(survival_sex.index.values.tolist())\nax_sex.legend()","3932d459":"sex_survived = sns.factorplot(x = 'Sex',y = 'Survived',data = clean_dataset, kind = 'bar')\nsex_survived.set_ylabels('Survival Probability')\nsex_survived.fig.suptitle('Survival Probabilty vs Gender: Figure 2')","09ff06b8":"contingency_table = survival_sex.transpose().to_numpy()\ncontingency_table","0957f223":"from scipy.stats import chi2_contingency\nchi2val,p,dof,expected = chi2_contingency(contingency_table)","48649daf":"p","34323944":"chi2val","04e85eff":"survival_ticket = pd.crosstab(clean_dataset['Ticket Class'],clean_dataset['Survived'])\nsurvival_ticket['% Died'] = 100*(survival_ticket[0]\/survival_ticket.sum(axis = 1))\nsurvival_ticket['% Survived'] = 100*(survival_ticket[1]\/survival_ticket.sum(axis = 1))\nsurvival_ticket","753c4642":"ax_ticketclass = plt.figure(figsize = (8,6)).add_subplot(111)\n\nticket_classes = np.arange(len(survival_ticket.index.values.tolist()))\nwidth = 0.35\n\nax_ticketclass.bar(ticket_classes - width\/2,survival_ticket['% Died'],width,label = '% Died')\nax_ticketclass.bar(ticket_classes + width\/2,survival_ticket['% Survived'],width,label = '% Survived')\nax_ticketclass.set_title('Effect of ticket class on chance of survival: Figure 3')\nax_ticketclass.set_xlabel('Ticket Class')\nax_ticketclass.set_ylabel('Percentage')\nax_ticketclass.set_xticks(ticket_classes)\nax_ticketclass.set_xticklabels(survival_ticket.index.values.tolist())\nax_ticketclass.legend()","76306c43":"ax_pclass_sns = sns.factorplot(x = 'Ticket Class',y = 'Survived',data = clean_dataset,kind = 'bar')\nax_pclass_sns.set_ylabels('Survival Probability')\nax_pclass_sns.fig.suptitle('Survival Probabilty vs Ticket Class: Figure 4')","6a6c3866":"list1 = ['Fare','Ticket Class']\nsns.heatmap(clean_dataset[list1].corr())","4a0596f4":"fare_grid = sns.boxplot(x = 'Survived',y = 'Fare',data = clean_dataset)\nfare_grid.set_title('Fare vs Survival: Figure 5')","f07c2cc6":"extended_analysis_one = clean_dataset.loc[(clean_dataset['Sex'] == 'male') & ((clean_dataset['Ticket Class'].astype(int) == 1) | (clean_dataset['Ticket Class'].astype(int) == 2) | (clean_dataset['Ticket Class'].astype(int) == 3))]","695e05b9":"extended_analysis_one_temp = pd.crosstab(extended_analysis_one['Ticket Class'],extended_analysis_one['Survived'])\nextended_analysis_one_temp['% Died'] = 100*(extended_analysis_one_temp[0]\/extended_analysis_one_temp.sum(axis = 1))\nextended_analysis_one_temp['% Survived'] = 100*(extended_analysis_one_temp[1]\/extended_analysis_one_temp.sum(axis = 1))\nextended_analysis_one_temp","82e4e501":"sns_male_extended = sns.factorplot(x = 'Ticket Class', y = 'Survived', data = extended_analysis_one, kind = 'bar')\nsns_male_extended.set_ylabels('Survival Probability')\nsns_male_extended.fig.suptitle('Survival Probabilty vs Ticket Class(Males): Figure 6')","92e98552":"survival_siblingsspouses = pd.crosstab(clean_dataset['Number of Siblings\/Spouses aboard'],clean_dataset['Survived'])\nsurvival_siblingsspouses","905065e8":"sns_siblings = sns.factorplot(x = 'Number of Siblings\/Spouses aboard', y = 'Survived', data = clean_dataset, kind = 'bar')\nsns_siblings.set_ylabels('Survival Probability')\nsns_siblings.fig.suptitle('Survival Probabilty vs Number of Siblings\/Spouse: Figure 7')","b02b9813":"survival_childrenparents = pd.crosstab(clean_dataset['Number of Parents\/Children aboard'],clean_dataset['Survived'])\nsurvival_childrenparents","ec96aa5c":"sns_chilpar = sns.factorplot(x = 'Number of Parents\/Children aboard', y = 'Survived', data = clean_dataset, kind = 'bar')\nsns_chilpar.set_ylabels('Survival Probability')\nsns_chilpar.fig.suptitle('Survival Probabilty vs Number of Parents\/Children aboard: Figure 8')","16126baf":"clean_dataset['Family Size'] = clean_dataset['Number of Siblings\/Spouses aboard'] + clean_dataset['Number of Parents\/Children aboard'] + 1","b2c771ff":"clean_dataset.head()","1b41c69b":"from sklearn.base import BaseEstimator,TransformerMixin\n\nclass createfamilysize(BaseEstimator,TransformerMixin):\n    def __init__(self):\n        return None\n    def fit(self,dataset):\n        return self\n    def transform(self,dataset):\n        dataset['Family Size'] = dataset['Number of Siblings\/Spouses aboard'] + dataset['Number of Parents\/Children aboard'] + 1\n        dataset.drop(['Number of Siblings\/Spouses aboard','Number of Parents\/Children aboard'],axis = 1,inplace = True)\n        return dataset\n","c236b448":"sns_familysize = sns.factorplot(x = 'Family Size', y = 'Survived', data = clean_dataset, kind = 'bar')\nsns_familysize.set_ylabels('Survival Probability')\nsns_familysize.fig.suptitle('Family Size vs Survival Probability:Figure 9')","4c745555":"clean_dataset = clean_dataset.drop(['Number of Siblings\/Spouses aboard','Number of Parents\/Children aboard'],axis = 1)\nclean_dataset\n","e9dc0bf2":"famsize = createfamilysize()\ntesting_data_raw = famsize.fit_transform(testing_data_raw)\ntesting_data_raw.head()","8e915f8c":"ax = plt.figure(figsize = (8,6)).add_subplot(111)\n\nsns.boxplot(x = 'Survived', y = 'Age',data = clean_dataset,ax = ax)\nax.set_title('Boxplot of Age vs Survival:Figure 10')","44dae8a6":"age_grid = sns.FacetGrid(clean_dataset,col = 'Survived')\nage_grid.map(sns.distplot,'Age',bins = 25)\nage_grid.fig.suptitle('Age Distribution:Figure 11')\nage_grid.fig.subplots_adjust(hspace=0.9, wspace=.15)\nplt.show()","97934fde":"\ndef splitagegroups(dataset):\n    dataset.loc[(dataset['Age']>=0) & (dataset['Age']<12), 'Age Group'] = 'Child'\n    dataset.loc[(dataset['Age']>=12) & (dataset['Age']<18), 'Age Group'] = 'Adolescence'\n    dataset.loc[(dataset['Age']>=18) & (dataset['Age']<50), 'Age Group'] = 'Adult'\n    dataset.loc[(dataset['Age']>=50) & (dataset['Age']<60), 'Age Group'] = 'Early Senior'\n    dataset.loc[(dataset['Age']>=60), 'Age Group'] = 'Senior'\n    return dataset","74c8fc31":"clean_dataset = splitagegroups(clean_dataset)\nclean_dataset.head()","67981ab1":"testing_data_raw = splitagegroups(testing_data_raw)\ntesting_data_raw.head()","08076323":"age_group_crosstab = pd.crosstab(clean_dataset['Age Group'],clean_dataset['Survived'])\nage_group_crosstab","140a0ff0":"sns_age_group = sns.factorplot(x = 'Age Group',y = 'Survived',data = clean_dataset, kind = 'bar')\nsns_age_group.set_ylabels('Survival Probability')\nsns_age_group.fig.suptitle('Age Group vs Survival:Figure 12')","0ea487c0":"sns_embarking_port = sns.factorplot(x = 'Embarked',y = 'Survived',data = clean_dataset, kind = 'bar')\nsns_embarking_port.set_ylabels('Survival Probability')\nsns_embarking_port.fig.suptitle('Embarking Port vs Survival:Figure 13')","65908b5d":"port_crosstab = pd.crosstab(clean_dataset['Embarked'],clean_dataset['Survived'])\nport_crosstab","9962bcf5":"df_embarking = clean_dataset.loc[clean_dataset['Embarked'] == 'C']\ndf_embarking.head(168)","b19a461f":"df_embarking['Ticket Class'].value_counts().to_frame()","6733ff21":"df_embarking['Family Size'].value_counts().to_frame()","29eed3a2":"ticket_class_portc = sns.factorplot(x = 'Ticket Class',y = 'Survived', data = df_embarking, kind = 'bar')\nticket_class_portc.set_ylabels('Survival Probability')\nticket_class_portc.fig.suptitle('Embarking Port C\/Ticket Class vs Survival:Figure 14')","9e474bbd":"#how many first class passengers from port C survived\npd.crosstab(df_embarking['Ticket Class'],df_embarking['Survived'])","6caea0e3":"df_embarking_c_firstclass = df_embarking.loc[df_embarking['Ticket Class'] == 1]\npd.crosstab(df_embarking_c_firstclass['Family Size'],df_embarking_c_firstclass['Survived'])","98a90958":"ticket_class_portc_firstclass = sns.factorplot(x = 'Family Size',y = 'Survived', data = df_embarking_c_firstclass, kind = 'bar')\nticket_class_portc_firstclass.set_ylabels('Survival Probability')\nticket_class_portc_firstclass.fig.suptitle('Embarking Port C\/First Class\/Family Size vs Survival:Figure 15')","389314a2":"clean_dataset['PortC_Advantage'] = np.zeros(clean_dataset.shape[0])\nclean_dataset.loc[(clean_dataset['Ticket Class'] == 1) & (clean_dataset['Family Size'] == 2), 'PortC_Advantage'] = 1","f0879ce5":"clean_dataset['PortC_Advantage'] = clean_dataset['PortC_Advantage'].astype(int)\nclean_dataset.head()","02e60f20":"from sklearn.base import BaseEstimator,TransformerMixin\n\nclass createportCadvantage(BaseEstimator,TransformerMixin):\n    def __init__(self):\n        return None\n    def fit(self,dataset):\n        return self\n    def transform(self,dataset):\n        dataset['PortC_Advantage'] = np.zeros(dataset.shape[0])\n        dataset.loc[(dataset['Ticket Class'] == 1) & (dataset['Family Size'] == 2), 'PortC_Advantage'] = 1\n        dataset['PortC_Advantage'] = dataset['PortC_Advantage'].astype(int)\n        return dataset","71f07002":"portCadvantage = createportCadvantage()\ntesting_data_raw = portCadvantage.fit_transform(testing_data_raw)\ntesting_data_raw.head()","7f51380d":"clean_dataset['Title'] = [name.split(',')[1].split('.')[0].strip() for name in clean_dataset['Name'].tolist()]\nclean_dataset.head()","8cfde365":"from sklearn.base import BaseEstimator,TransformerMixin\n\nclass createTitle(BaseEstimator,TransformerMixin):\n    def __init__(self):\n        return None\n    def fit(self,dataset):\n        return self\n    def transform(self,dataset):\n        dataset['Title'] = [name.split(',')[1].split('.')[0].strip() for name in dataset['Name'].tolist()]\n        return dataset","23c3c703":"title = createTitle()\ntesting_data_raw = title.fit_transform(testing_data_raw)\ntesting_data_raw.head()","c79f4796":"title_crosstab = pd.crosstab(clean_dataset['Title'],clean_dataset['Survived'])\ntitle_crosstab","dfce3700":"sns_title = sns.factorplot(x = 'Title', y = 'Survived',data = clean_dataset,kind = 'bar')\nsns_title.set_ylabels('Survival Probability')\nsns_title.set_xticklabels(rotation = 90)\nsns_title.fig.suptitle('Title vs Survival Probability:Figure 16')","fc89048a":"\nclean_dataset.loc[(clean_dataset['Title'] == 'the Countess')|(clean_dataset['Title'] == 'Mme')|(clean_dataset['Title'] == 'Mlle')\\\n                 |(clean_dataset['Title'] == 'Sir')|(clean_dataset['Title'] == 'Lady')]","8e185db0":"clean_dataset['Title Advantage'] = ['Inconclusive']*(clean_dataset.shape[0])\n\nclean_dataset.loc[(clean_dataset['Title'] == 'Rev') | (clean_dataset['Title'] == 'Mr'),'Title Advantage'] = 'Low'\nclean_dataset.loc[(clean_dataset['Title'] == 'Miss') | (clean_dataset['Title'] == 'Mrs'),'Title Advantage'] = 'High'\nclean_dataset.loc[(clean_dataset['Title'] == 'the Countess') | (clean_dataset['Title'] == 'Mme')|(clean_dataset['Title'] == 'Mlle')|(clean_dataset['Title'] == 'Sir')|(clean_dataset['Title'] == 'Lady'),'Title Advantage'] = 'High'","a9c6130e":"clean_dataset.head()","01febf24":"clean_dataset.drop(['Name','Title'],axis = 1,inplace = True)\nclean_dataset.head()","55ec2081":"from sklearn.base import BaseEstimator,TransformerMixin\n\nclass createTitleAdvantage(BaseEstimator,TransformerMixin):\n    def __init__(self):\n        return None\n    def fit(self,dataset):\n        return self\n    def transform(self,dataset):\n        dataset['Title Advantage'] = ['Inconclusive']*(dataset.shape[0])\n        dataset.loc[(dataset['Title'] == 'Rev') | (dataset['Title'] == 'Mr'),'Title Advantage'] = 'Low'\n        dataset.loc[(dataset['Title'] == 'Miss') | (dataset['Title'] == 'Mrs'),'Title Advantage'] = 'High'\n        dataset.loc[(dataset['Title'] == 'the Countess') | (dataset['Title'] == 'Mme')|(dataset['Title'] == 'Mlle')|(dataset['Title'] == 'Sir')|(dataset['Title'] == 'Lady'),'Title Advantage'] = 'High'\n        dataset.drop(['Name','Title'],axis = 1,inplace = True)\n        return dataset\n","acee25d1":"titleadvantage = createTitleAdvantage()\ntesting_data_raw = titleadvantage.fit_transform(testing_data_raw)\ntesting_data_raw.head()","c6ac77f2":"clean_dataset.drop(['Age Group'],axis = 1, inplace = True)\nclean_dataset.head()","287017e3":"testing_data_raw.drop(['Age Group'],axis = 1, inplace = True)\ntesting_data_raw.head()","d2296bfb":"num_attributes = ['Age','Fare','Family Size']\ncat_attributes = ['Ticket Class','Sex','Embarked','PortC_Advantage','Title Advantage']","e8ad90fe":"#Build a class to separate the numerical attributes and categorical attributes\n#returns dataframes\nfrom sklearn.base import BaseEstimator, TransformerMixin\nclass AttributeSelector(BaseEstimator,TransformerMixin):\n    def __init__(self,attributes):\n        \n        self.attributes = attributes\n    def fit(self,X,y = None):\n        return self\n    def transform(self,X):\n        return X[self.attributes]","b0932fb2":"class onehotencodedataframe(BaseEstimator,TransformerMixin):\n    def __init__(self,attributes):\n        self.attributes = attributes\n    def fit(self,X):\n        return self\n    def transform(self,X):\n        for attrib in self.attributes:\n            X = pd.get_dummies(X,columns = [attrib])\n        return X","3d05d965":"class scalerdataframe(BaseEstimator,TransformerMixin):\n    def __init__(self):\n        #,indexvalues,columnvalues\n        #self.index = indexvalues\n        #self.columnnames = columnvalues\n        return None\n    def fit(self,data):\n        return self\n    def transform(self,dataset):\n        scl = StandardScaler()\n        scaleddf = pd.DataFrame(scl.fit_transform(dataset.values),index = dataset.index,columns = dataset.columns)\n        return scaleddf","10ee8a4a":"from sklearn.pipeline import Pipeline\nnum_pipeline = Pipeline([\n    ('num_selector',AttributeSelector(num_attributes)),\n    ('scl_df',scalerdataframe()),\n])","9c32f89d":"cat_pipeline = Pipeline([\n    ('cat_selector',AttributeSelector(cat_attributes)),\n    ('onehotdf',onehotencodedataframe(cat_attributes)),\n])","d0085745":"from sklearn.preprocessing import StandardScaler","7f6d9403":"numerical_df = num_pipeline.fit_transform(clean_dataset)\ncategorical_df = cat_pipeline.fit_transform(clean_dataset)","53192e1e":"numerical_df.head()","e315e86d":"categorical_df.head()","fa9a34ed":"final_df_training = pd.concat([numerical_df,categorical_df],axis =1 )\nfinal_df_training.head()","bc097052":"y_labels_training = clean_dataset[['Survived']]\ny_labels_training.head()","d3bb0966":"numerical_df_testing = num_pipeline.fit_transform(testing_data_raw)\ncategorical_df_testing = cat_pipeline.fit_transform(testing_data_raw)","bec8901b":"numerical_df_testing.head()","f5d5db24":"categorical_df_testing.head()","9732af39":"final_df_testing = pd.concat([numerical_df_testing,categorical_df_testing],axis =1 )\nfinal_df_testing.head()","0751772b":"y_labels_testing = testing_data_raw[['Survived']]\ny_labels_testing.head()","d84e2daf":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score,recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score","ddce4752":"from sklearn.svm import SVC\nsvm_clf = SVC()","a8e76869":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import reciprocal, uniform\nparameters = {'kernel':['rbf','poly'],'gamma':reciprocal(0.001,0.1),'C':uniform(1,10)}","a6d29523":"from sklearn.model_selection import StratifiedKFold\nskf = StratifiedKFold(shuffle = False, n_splits = 3)\nrandom_search_svc = RandomizedSearchCV(svm_clf,parameters,n_iter = 10,verbose = 2,cv=skf)\nrandom_search_svc.fit(final_df_training,y_labels_training)","74a4725d":"random_search_svc.cv_results_","7d30c3d1":"random_search_svc.best_score_","60ce51d0":"random_search_svc.best_estimator_","b6532c18":"y_pred_svc = random_search_svc.best_estimator_.predict(final_df_training)","2af9106a":"confusion_matrix(y_labels_training,y_pred_svc)","3c2af70b":"print('Precision: ',precision_score(y_labels_training,y_pred_svc))\nprint('Recall: ',recall_score(y_labels_training,y_pred_svc))\nprint('F1_score: ',f1_score(y_labels_training,y_pred_svc))\nprint('Accuracy: ',accuracy_score(y_labels_training,y_pred_svc))","ba877b94":"y_pred_svc_testing = random_search_svc.best_estimator_.predict(final_df_testing)","00e53927":"confusion_matrix(y_labels_testing,y_pred_svc_testing)","3c40fe11":"print('Precision: ',precision_score(y_labels_testing,y_pred_svc_testing))\nprint('Recall: ',recall_score(y_labels_testing,y_pred_svc_testing))\nprint('F1_score: ',f1_score(y_labels_testing,y_pred_svc_testing))\nprint('Accuracy: ',accuracy_score(y_labels_testing,y_pred_svc_testing))","d3a0a6cc":"from sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression(penalty = 'l1',solver = 'liblinear')","9f824164":"parameters = {'C':uniform(0.01,10)}\nrandom_search_lr = RandomizedSearchCV(log_reg,parameters,n_iter = 10,verbose = 2,cv=skf)\nrandom_search_lr.fit(final_df_training,y_labels_training)","3cdedc1f":"random_search_lr.best_score_","7ae74691":"random_search_lr.best_estimator_","12b7c2d5":"random_search_lr.best_estimator_.coef_","5f72d5e9":"attributes = final_df_training.columns.tolist()\nattribcoef = list()\nfor attrib,coef in zip(attributes,random_search_lr.best_estimator_.coef_.tolist()[0]):\n    attribcoef.append((attrib,coef))\nsorted(attribcoef,key = lambda x:x[1],reverse = True)","690cd6c0":"y_pred_lr_testing = random_search_lr.best_estimator_.predict(final_df_testing)","00b3ebc5":"confusion_matrix(y_labels_testing,y_pred_lr_testing)","4487f289":"print('Precision: ',precision_score(y_labels_testing,y_pred_lr_testing))\nprint('Recall: ',recall_score(y_labels_testing,y_pred_lr_testing))\nprint('F1_score: ',f1_score(y_labels_testing,y_pred_lr_testing))\nprint('Accuracy: ',accuracy_score(y_labels_testing,y_pred_lr_testing))","148e446d":"from sklearn.tree import DecisionTreeClassifier","a4293635":"dtree = DecisionTreeClassifier()\nparameters = {'max_depth':[3,5,7,9,10,11,13,15],'min_samples_split':range(2,500,25)}","4a987a64":"random_search_dtree = RandomizedSearchCV(dtree,parameters,n_iter = 10,verbose = 2,cv=skf)\nrandom_search_dtree.fit(final_df_training,y_labels_training)","5f12000d":"random_search_dtree.best_estimator_","4f737055":"random_search_dtree.best_score_","1a88f928":"y_pred_dtree = random_search_dtree.best_estimator_.predict(final_df_training)\nconfusion_matrix(y_labels_training,y_pred_dtree)","7a1ca905":"print('Precision: ',precision_score(y_labels_training,y_pred_dtree))\nprint('Recall: ',recall_score(y_labels_training,y_pred_dtree))\nprint('F1_score: ',f1_score(y_labels_training,y_pred_dtree))\nprint('Accuracy: ',accuracy_score(y_labels_training,y_pred_dtree))","bdc5f138":"random_search_dtree.best_estimator_.feature_importances_\nattributes = final_df_training.columns.tolist()\nattribcoef = list()\nfor attrib,coef in zip(attributes,random_search_dtree.best_estimator_.feature_importances_.tolist()):\n    attribcoef.append((attrib,coef))\nsorted(attribcoef,key = lambda x:x[1],reverse = True)","89371753":"y_pred_dtree_testing = random_search_dtree.best_estimator_.predict(final_df_testing)\nprint('Precision: ',precision_score(y_labels_testing,y_pred_dtree_testing))\nprint('Recall: ',recall_score(y_labels_testing,y_pred_dtree_testing))\nprint('F1_score: ',f1_score(y_labels_testing,y_pred_dtree_testing))\nprint('Accuracy: ',accuracy_score(y_labels_testing,y_pred_dtree_testing))","64d070c6":"from sklearn.ensemble import RandomForestClassifier\nrand_forest = RandomForestClassifier()","a2e2ca2c":"parameters = {'n_estimators':[100,200,300,400,500],'max_depth':range(5,50,2),'bootstrap':[True,False],'max_features':range(2,20,20)}\nrandom_search_forest = RandomizedSearchCV(rand_forest,parameters,n_iter = 10,verbose = 2,cv=skf)\nrandom_search_forest.fit(final_df_training,y_labels_training)","dc9d1b63":"random_search_forest.best_estimator_","6595812c":"random_search_forest.best_score_","ba4ba286":"y_pred_forest = random_search_forest.best_estimator_.predict(final_df_training)","bc01e2a3":"print('Precision: ',precision_score(y_labels_training,y_pred_forest))\nprint('Recall: ',recall_score(y_labels_training,y_pred_forest))\nprint('F1_score: ',f1_score(y_labels_training,y_pred_forest))\nprint('Accuracy: ',accuracy_score(y_labels_training,y_pred_forest))","68491a1c":"y_pred_forest_testing = random_search_forest.best_estimator_.predict(final_df_testing)\nprint('Precision: ',precision_score(y_labels_testing,y_pred_forest_testing))\nprint('Recall: ',recall_score(y_labels_testing,y_pred_forest_testing))\nprint('F1_score: ',f1_score(y_labels_testing,y_pred_forest_testing))\nprint('Accuracy: ',accuracy_score(y_labels_testing,y_pred_forest_testing))","455e7e76":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()","dbab32f2":"parameters = {'n_neighbors':range(3,11,2),'weights':['uniform','distance'],'metric':[\"euclidean\",\"manhattan\"]}\nrandom_search_knn = RandomizedSearchCV(knn,parameters,n_iter = 10,verbose = 2,cv=skf)\nrandom_search_knn.fit(final_df_training,y_labels_training)","de614f19":"random_search_knn.best_estimator_","0d02ff57":"random_search_knn.best_score_","2a1d5a92":"y_pred_knn_testing = random_search_knn.best_estimator_.predict(final_df_testing)\nprint('Precision: ',precision_score(y_labels_testing,y_pred_knn_testing))\nprint('Recall: ',recall_score(y_labels_testing,y_pred_knn_testing))\nprint('F1_score: ',f1_score(y_labels_testing,y_pred_knn_testing))\nprint('Accuracy: ',accuracy_score(y_labels_testing,y_pred_knn_testing))","19265b86":"accuracy_scores = list()\naccuracy_scores.append(accuracy_score(y_labels_testing,y_pred_svc_testing))\naccuracy_scores.append(accuracy_score(y_labels_testing,y_pred_lr_testing))\naccuracy_scores.append(accuracy_score(y_labels_testing,y_pred_dtree_testing))\naccuracy_scores.append(accuracy_score(y_labels_testing,y_pred_forest_testing))\naccuracy_scores.append(accuracy_score(y_labels_testing,y_pred_knn_testing))","d5d85ffa":"results_df = pd.DataFrame({'Accuracy':accuracy_scores},index = ['SVC','Log Reg(Lasso)','DTree','Random Forest','KNN'])\nresults_df","19728952":"results_df.plot(kind = 'bar')","3eecc4ba":"submission_data_raw = pd.read_csv(r'..\/input\/titanic\/test.csv')\nsubmission_data_raw.head()","fdb30f2f":"submission_data_raw.drop(['PassengerId','Ticket'],axis = 1,inplace = True)\nsubmission_data_raw.head()","3a519744":"column_list = submission_data_raw.columns.tolist()\ncolumn_list[0] = \"Ticket Class\"\ncolumn_list[4] = \"Number of Siblings\/Spouses aboard\"\ncolumn_list[5] = \"Number of Parents\/Children aboard\"\nsubmission_data_raw.columns = column_list\nsubmission_data_raw.head()","7723a4ab":"missing_data_df = numberofnan(submission_data_raw)\ndisplay(missing_data_df.style.background_gradient(cmap = 'Reds',axis = 0))","76992b3a":"filldrop_submission = fillmissingvalues()\nsubmission_data_raw = filldrop_submission.fit_transform(submission_data_raw)","9d57369c":"submission_data_raw.head()","838b5da2":"missing_data_df = numberofnan(submission_data_raw)\ndisplay(missing_data_df.style.background_gradient(cmap = 'Reds',axis = 0))","3bf34613":"submission_data_raw['Fare'] = submission_data_raw['Fare'].fillna(submission_data_raw['Fare'].mean())","e000703f":"missing_data_df = numberofnan(submission_data_raw)\ndisplay(missing_data_df.style.background_gradient(cmap = 'Reds',axis = 0))","8f4cde8c":"submission_data_raw.isna().sum()","c804add5":"#Add Family Size Attribute\nfamsize_submission = createfamilysize()\ntesting_data_raw = famsize_submission.fit_transform(submission_data_raw)\nsubmission_data_raw.head()","549aa10f":"#Add Port C Advantage\nportCadvantage_submission = createportCadvantage()\nsubmission_data_raw = portCadvantage_submission.fit_transform(submission_data_raw)\nsubmission_data_raw.head()","ae3d9c6c":"#Create Title\ntitle_submission = createTitle()\nsubmission_data_raw = title_submission.fit_transform(submission_data_raw)\nsubmission_data_raw.head()","b6ef5988":"#Create Title Advantage\ntitleadvantage_submission = createTitleAdvantage()\nsubmission_data_raw = titleadvantage_submission.fit_transform(submission_data_raw)\nsubmission_data_raw.head()","c5d3bcbc":"num_attributes = ['Age','Fare','Family Size']\ncat_attributes = ['Ticket Class','Sex','Embarked','PortC_Advantage','Title Advantage']\nnumerical_df_submission = num_pipeline.fit_transform(submission_data_raw)\ncategorical_df_submission = cat_pipeline.fit_transform(submission_data_raw)","f37184f2":"numerical_df_submission.head()","7fee4c1e":"categorical_df_submission.head()","d3ea4f1b":"final_df_submission = pd.concat([numerical_df_submission,categorical_df_submission],axis =1 )\nfinal_df_submission.head()","75228de0":"submission_prediction = random_search_lr.best_estimator_.predict(final_df_submission)","7f49262c":"submission_prediction","25004a25":"submission_prediction_df = pd.DataFrame({'PassengerID':pd.read_csv(r'..\/input\/titanic\/test.csv')['PassengerId'],'Prediction':submission_prediction})","10cf2ce6":"submission_prediction_df.to_csv('Submission.csv')","2218a340":"<h1>From the models that were investigated above, the model which gave the highest accuracy for the test set is the Logistic Regression with Lasso Regularization model. Hence this model is used to predict the submission dataset<\/h1>","3a2ebdc7":"<h3> Grouped Male Passengers <\/h3>","19f32db6":"**Looking at the dataset itself, it seems that the family size of the individuals who embarked from port C have family sizes which are ideal for survival. Lets investigate this further**","84be31ca":"<h1>Predicting on the testing dataset final_df_testing<\/h1>","968988f1":"<h1>Predicting on the testing dataset final_df_testing<\/h1>","a4b41afe":"<h3>Intuitively there is a higher chance that fare and ticket class are correlated. Lets investigate that too<\/h3>","b9516dca":"**From the above analysis, it seems that majority of passengers from port C were of First Class. This clearly increases their chances of survival as we saw in Figure 4.**","7d3cf085":"<h3>What makes Embarkation Port C increase chances of survival?<\/h3>","9cf8dab3":"<h3>Missing Data in the training data set<\/h3>","f21153fa":"<h4>Discussion<\/h4> \n\nThe results above show that:\n- Males had a significant chance of not surviving the disaster. \n- More females survived the disaster than they passed away.\n\nFrom Figure 2 we see that a male had a very low probability of surviving the disaster","1b162670":"From the above analysis the following titles have very low chance of surviving:\n    \n    - Rev\n    - Mr\n\nThe following titles have high chance of surviving:\n    - Miss\n    - Mrs\n\nThere are a few Nobleman and Noblewomen too who have all survived. They had higher priority and were presumably of first class. Hence they too have high chace of surviving:\n \n     - the Countess\n     - Mme\n     - Mlle\n     - Sir\n     - Lady\n \nThe instances of the other categories were either:\n- Too low to give a definite judgement, hence their chance of survival is unknown. \n- Mixed between having survived or died to make a conclusive decision about the advantage the title brings\n \n**Hence we can create a new feature called \"Title Advantage\"**","53a11548":"Males in First Class also had higher death counts as compared to women, however a male in first class had almost 3 times of a higher chance of surviving as compared to a male in Second or Third Class","ea6d6369":"We obtain very good accuracy, however it is possible it is just overfitting the training data. ","537216b3":"<h3>Were all noblemen and noblewomen of first class<\/h3>","9823c3bc":"<h1>Effect of Family Size on chance of survival<\/h1>","17230e4a":"<h3> To avoid leakage of data from test set to training, we need to split the data into Train and Test sets before any missing values and feature engineering is done<\/h3>\n\nStratified Splitting will be used to ensure equal ratio of Survival and Death cases in both training and testing sets","836ca7f0":"For Logistic Regression with Lasso Regularization, we can carry out feature selection as shown above. \nThe most important features are:\n\n- Sex_female(Positive correlation)\n- Ticket Class_1(Positive correlation)\n- Title Advantage_Inconclusive(Positive correlation)\n- Title Advantage_High(Positive correlation)\n- Title Advantage_Low\n- PortC_Advantage_1(Positive correlation)\n- Embarked_C(Positive correlation)\n- Fare(Positive correlation)\n- Embarked_S(Negative correlation)\n- Age(Negative correlation)\n- Family Size(Negative correlation)\n- Ticket Class_3(Negative correlation)\n- Title Advantage_Low(Negative correlation)\n\n*A Positive correlation means a higher value of this feature or being in this category, meant your chance of survival increased.*\n\n*A Negative correlation means a higher valie of this feature or being in this category, meant your chance of survival decreased.*\n\nHigher the value of the coefficient, the larger the significance of that attribute in making the prediction.\n\n<h3>Notice that all these correlations align very well with the insights we got through our Exploratory Data Analysis<\/h3>","be137a29":"<h1>Investigating how having siblings\/spouses affected chances of survival<\/h1>","25a5c92a":"<h1> Investigating how age impacts the chance of survival <\/h1>\n\nWe shall use a box plot to visualize the average age of the ones who survived and died","f2f536e5":"**The testing dataset has been cleaned too**","7aaf2755":"Due to the very high number of missing values in the **Cabin** column and the lack of any correlation to conclusively fill the missing values, we shall drop this column","6e6c226c":"It seems that having a larger family results in decreased chance of survival. To make this factor more impactful on the prediction of survival, we can create a new attribute called **Family Size**\n\n**Family Size = Number of Siblings\/Spouses aboard + Number of Parents\/Children aboard + 1**(1 is for the passenger themselves)","ab73cc94":"**The Logistic Regression Model with the Lasso Regularization gives a better Precision,F1 Score and Accuracy compared to the Support Vector Classifier**","5050fdd6":"**The ratios are equal is both sets of data**","8d0e0c30":"<h1>Investigate the performance of Decision Trees <\/h1>","0365fbc5":"As observed above, there is a clear discrepancy in the gender of survivors, with only 97 males surviving, while 208 females survived.","8a7d6748":"<h1>Investigating how having children\/parents affected chances of survival<\/h1>","24bb1de3":"<h1>Investigate the performance of Random Forests <\/h1>","a4754ce8":"- From Figure 10 and Figure 11, we see that Children below 10 had a higher chance of surviving\n- Age group of 20-30 had lower chance of surviving as per Figure 11","548b4c18":"<h1>Investigate the performance of Support Vector Classifiers <\/h1>\n","30782998":"As **Pclass** and **SibSp** class are quite hard to interpret, we shall make these into more understandable column headings and replace them.","77370a33":"<h3> Missing Data in the testing data set <\/h3>","c3154e86":"<h4>To investigate the correlation between the gender and the survival rate, we can use the Chi Squared measurement<\/h4>","1fbf69f2":"<h3>Discussion<\/h3>\n\nAs shown by the above Table and Figure 7 show that **ideally you want only 1 sibling or spouse with you**. Having a higher number of siblings or a spouse than 1 decreases your chance of survival. \n\nHaving 0 siblings and spouse resulted in lower chance of survival because you had no one to help you survive the disaster. ","3976b1d3":"Creating a class to create the new **Family Size** dataset","6d1c98cb":"Earlier it was seen that more males died in the disaster. BUT did a first class ticket holder who was a male have a higher chance of surviving the disaster as compared to a male with a third class ticket?","f3577953":"<h1>Investigate the performance of Logistic Regression with Lasso Regularization <\/h1>","49de693e":"<h2>Investigating the effect Ticket Class had on the chance of surviving the disaster<\/h2>","c623d8ac":"<h5>Create class to make **Title Advantage** and drop **Name and Title**","9f4770eb":"The numerical attribute of **Age** is a more comprehensive feature to work with, hence **Age Group** will be dropped. ","bdf8b6e2":"<h2> Investigating the effect gender had on the chance of surviving the disaster <\/h2>","d0165b3b":"Intepreting the above heatmap is not straight forward as **Ticket Class** goes from First Class(1) to Third Class(3). Hence lower the ticket class in numerical terms, results in a higher price of the **Fare**. Hence it results in a strong negative correlation showing that Fare increases as Ticket Class goes from Third Class to First Class.\n\n**From the above analysis in Figures 3,4 and the heatmap we can say that paying a higher Fare for a ticket of a higher class had a higher chance of survival.**","6ad8ccf9":"From Figure 9 we see that having a **family of 2,3 or 4 members** increases your chances of surviving. Hence this will be the useful feature to use instead of the **Sibling\/Spouse** and **Parent\/Children** features.\n\n","c3c2ab80":"There is a significant amount of missing values in **Cabin** and **Age**. **Embarked** only lacks 2 values in the **training_data_raw** set which can be dropped off from the dataset.","47c24bcb":"<h4>Lets create a class which can be used in a pipeline to deal with the missing values of the Age and Cabin attributes so that later we can use it in the pipeline<\/h4>","b60c483b":"Investigate the performance of SVC based on different kernels, gamma values and C values. A larger gamma results in overfitting as it tends to reduce the influence a particular point has on other points decreases too, resulting in a less generalized model. \nA higher C value tends to decrease the size of the margin(street) between the classified classes, however increases training accuracy. A higher C value is likely to cause overfitting.","787f95cf":"<h1> Investigating how Port of Embarkation affected survival <\/h1>","69549ba2":"<h2>Data Preparation and Exploratory Data Analysis is completed<\/h2>\n\n2 data sets have been created in parallel for training and testing(**clean_dataset** and **testing_data_raw**). The insights obtained from the training dataset(**clean_dataset**) were made into classes and applied **INDEPENDENTLY** to the **testing_data** through the use of Classes. \n\nInsights we got:\n\n- Females have a higher chance of surviving the disaster\n- Family size of 2,3,4 greatly increase your chances of survival\n- If you embarked from Port C with a First Class Ticket, you had a better chance of surviving\n- Overall Port C Passengers had a higher chance of surviving\n- Higher the Ticket Fare, greater your chances of surviving\n- Certain Titles(Miss,Mrs,Mme,Mlle,the Countess, Sir, Lady) increased your chances of survival while certain titles(Mr,Rev) decreased your chances of survival. Other cases were marked inconclusive\n","5bfe8da0":"The above box plot in figure 5 shows that the Average Fare of an individual who survived is higher. Furthermore the 25th to 75th percentiles are much larger for the individuals who survived, with the 75th percentile and the Maximum (75th Percentile + 1.5* Interquartile Range) being much higher for the individuals that survived. \n\nThis stems from the correlation of Ticket Class and Fare, where a higher fare results in a better ticket class, and a better ticket class increases the chance of survival.","6968ba04":"<h1>Making Predictions on the Test Set<\/h1>","9268b709":"Port C contains a lot of passengers from First Class and also with a family size which increases chance of survival as proven earlier in Figures 4 and 9.\n\nIndividuals of **First Class** with a **family size of 2**, embarking from **Port C** have a very high chance of surviving the disaster. **Hence we can create a feature targetting** this group of individuals. While **family size of 1,3,5** do have more survivers in each group, they either have equally high deaths(**Family size:1,3**) OR too few instances(**Family size:5**)","bd4ab0ec":"<h3> Extended Analysis <\/h3>","48a4ba8f":"<h5>Class for creating PortC_Advantage<\/h5>","0a9543a1":"<h3>Class for creating Title<\/h3>\n\n","e0e76d24":"<h1>Predicting on the testing dataset final_df_testing<\/h1>","2bd858ae":"<h1> Investigating the affect of Title on chance of survival <\/h1>","19d19a38":"<h1>Building the Machine Learning Pipeline<\/h1>\n\n<h1> Models to be evaluated <\/h1>\n\n- Logistic Regression with Lasso regularization\n- SVM\n- Random Forest\n- Decision Tree\n\nNote that we have 2 independent datasets, **clean_dataset** and **testing_data_raw**, hence once a model is trained on the **clean_dataset**, we shall test it on the **testing_data_raw**.","39511788":"Now we shall find which columns are missing data. The following philosophy will be used to fill missing data:\n\n- The mean of a particular group will be used as a representative figure for a missing piece of data\n- If the column has too much missing information in it, it will be removed from the analysis as it provides no valuable insight\n- If data is missing in a column such as Age, the mean will be calculated based on groupby() function with respect to gender\n- If data is missing in Fare class, the mean will be calculated based on the Ticket class.\n\nFurthermore, data columns such as PassenderId and Ticket will not have any significant impact on the prediction. Hence they will be dropped. Neither is Port of Embarkation expected to have an impact, however this will be further investigated before being dropped. ","e88c9659":"<h3> Build a classes to seperate the numerical and categorical attributes <\/h3>","04e00b41":"**All Noblemen and Noblewomen survived and were having First Class tickets**","36e35243":"<h4>Discussion<\/h4>\nAn individual of the lower ticket class(3), had a lesser chance of surviving the disaster as compared to the an individual in the First Class. An individual in the second class however has an equal chance of both surviving and dying in the disaster. The First Class ticket holders have clearly been given priority in being saved. \n\n\n**Fare and Ticket Class can be used as features for prediction**","70fe7bae":"<h1>Predicting on the testing dataset final_df_testing<\/h1>","8a0ab630":"<h3> Investigating how Fare effected the chance of survival <\/h3>","0d4c0c6f":"<h1>Predicting on the testing dataset final_df_testing<\/h1>","c859a0ef":"We can create new age groups from the above observations:\n\n- 0 to 12 years (Child)\n- 13 to 18 years (Adolescence)\n- 19 - 30 years(Young Adult)\n- 30 - 60 years(Adult)\n- 60 + (Senior)","405be211":"**Name**,**Title** and **Title Advantage** are features interlinked with each other, hence **Name** and **Title** will be dropped from the dataset.","baaa0d07":"<h1> Titanic - Machine Learning for Disaster <\/h1> \n\nIn this project the intention is to make a predictive algorithm to predict whether an individual survived or not in the Titanic disaster. The following steps will be followed:\n\n- Cleaning of data\n- Drawing statistical insight from data \n- Understanding the important features \n- Applying different predictive algorithms to identify the best predictor\n\nPlease do leave your comments below for improvements that can be made :) . I would greatly appreciate it!","35c40813":"<h3> Grouped Female Passengers <\/h3>","6427c813":"Adults and Seniors had the lowest chance of surviving the disaster"}}