{"cell_type":{"fd02831d":"code","46988d89":"code","577e30b9":"code","8112bfac":"code","b558fba2":"code","1912803d":"code","da604850":"code","d0ae8d38":"code","f066572d":"code","202dbb25":"code","1c906360":"code","93950751":"code","2f6e902f":"code","45198853":"markdown","d55059f1":"markdown","d5909763":"markdown","4d80099f":"markdown","083b0e3f":"markdown","42ab587e":"markdown","f43f8a98":"markdown","5c217953":"markdown","0dd707cb":"markdown","de612aaa":"markdown","42c34d55":"markdown","2b5c7d03":"markdown"},"source":{"fd02831d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","46988d89":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom pandas import set_option\nimport squarify\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nplt.rcParams['patch.force_edgecolor'] = True\nplt.rcParams['patch.facecolor'] = 'b'","577e30b9":"# getting colors to be used in charts\n\n# rainbow colors\nrb = []\ncolors = plt.cm.rainbow(np.linspace(0,1,18))\nfor c in colors:\n    rb.append(c)\nrb = reversed(rb)\nrb = list(rb)\n\n# viridis colors\nvd = []\ncolors = plt.cm.GnBu(np.linspace(0,1,6))\nfor c in colors:\n    vd.append(c)\nvd = list(vd)","8112bfac":"import pandas as pd\npokemon = pd.read_csv(\"..\/input\/pokemon\/pokemon.csv\")","b558fba2":"pokemon.head(3)","1912803d":"# Adding \"total points\" feature as an estimate of overall strength\npokemon['total_points']=pokemon['hp']+pokemon['attack']+pokemon['defense']+pokemon['speed']+pokemon['sp_attack']+pokemon['sp_defense']","da604850":"fig, ax = plt.subplots(3,2, figsize=(18,18))\n\n########## ax[0,0] Number of pokemon by generation\nax[0,0].bar(np.arange(7)+1, pokemon.groupby('generation')['name'].count(), color='cadetblue')\nax[0,0].set_title('Number of Pokemon by generation')\nax[0,0].set_xlabel('generation')\nax[0,0].set_ylabel('number of pokemon')\n\n# Inserting text of total number of pokemon\nprops = dict(boxstyle='round', facecolor='gold', alpha=0.4)\nax[0,0].text(5.8,140, 'Total Pokemon:\\n         801',fontsize=14, bbox=props)\n\n########## ax[0,1] Pokemon by type\nsquare = pokemon['type1'].value_counts() # Preparing subset of data for chart\nsquarify.plot(sizes=square.values, label=square.index, alpha=0.5, color=rb, value=square.values, ax=ax[0,1])\n        # \"rb\" is a list of colors extracted from a standard cmap - codes at \"start of notebook\nax[0,1].axis('off')\nax[0,1].set_title('Number of Pokemon by Type 1')\n\n########## ax[1,0] Pokemon Type 2 distribution\nsns.barplot(x='type2', y='index', data = pokemon['type2'].value_counts().reset_index(), ax=ax[1,0])\nax[1,0].set_title('Number of pokemon by Type 2')\nax[1,0].set_ylabel('Pokemon Type1')\nax[1,0].set_xlabel('Number of Pokemon')\n\n########## ax[1,1] Percentage of pokemon with one type and two types\npokemon['type_count'] = ~pokemon['type2'].isnull() # Preparing subset of data for chart\npokemon['type_count'] = pokemon['type_count'].map({True:'two types',False:'one type'})\n\nx = pokemon['type_count'].value_counts()\nlabels = pokemon['type_count'].value_counts().index\n\nax[1,1].pie(x, shadow=False, labels=labels, autopct='%1.1f%%', startangle=180, \n            colors=['powderblue','lightcoral'],wedgeprops={'linewidth':4,'edgecolor':'white'},pctdistance=0.8)\n\nwhite_circle=plt.Circle( (0,0), 0.6, color='white') # adding white space to create donut chart\np=plt.gcf()\nax[1,1].add_artist(white_circle)\n\nax[1,1].axis('equal')\nax[1,1].text(-0.45,0, 'How many Pokemon\\nhas two types?', fontsize=12)\n\n########## ax[2,0] Distribution of Pokemon with 1 type and 2 types\ntype_heat = pokemon[['type1','type2']] # Preparing subset of data for chart\ntype_heat['n'] = 1\ntype_heat = type_heat.groupby(['type1','type2'], as_index=True)['n'].count().unstack()\nsns.heatmap(type_heat, annot=True, cmap=plt.cm.magma_r, ax=ax[2,0], cbar=False, linewidths=0.3)\nax[2,0].set_title('Pokemon type1 & type2 combination')\n\n########## ax[2,1] Total points: Pokemon with one type vs two types\nsns.boxplot(x='type_count', y='total_points', data=pokemon, showfliers=False, showmeans=True, palette='Blues',\n           ax=ax[2,1])\nax[2,1].set_title('Strength comparison: One type vs Two types')\n\nplt.tight_layout()\nplt.show()","d0ae8d38":"from IPython.display import display_html\n# creating function to display df side by side\n# reference https:\/\/stackoverflow.com\/questions\/38783027\/jupyter-notebook-display-two-pandas-tables-side-by-side\ndef display_side_by_side(*args):\n    html_str=''\n    for df in args:\n        html_str+=df.to_html()\n    display_html(html_str.replace('table','table style=\"display:inline\"'),raw=True)\n\ncap = pokemon.loc[pokemon['capture_rate']!='30 (Meteorite)255 (Core)'] # removing irregular capture_rate\ncap['capture_rate'] = cap['capture_rate'].map(lambda x: int(x)) # converting capture_rate to integer\n\ndf1 = cap[['name','capture_rate','hp']].sort_values(by=['capture_rate','hp'], ascending=[True,False]).head(10)\ndf2 = cap[['name','capture_rate','hp']].sort_values(by=['capture_rate','hp'], ascending=[False,True]).head(10)\n\ndf1.set_index('name', inplace=True)\ndf1.index.rename('10 most difficult to capture', inplace=True)\ndf2.set_index('name', inplace=True)\ndf2.index.rename('10 easiest to capture', inplace=True)\n\ndisplay_side_by_side(df1,df2)","f066572d":"fig, ax = plt.subplots(1,2, figsize=(18,6))\n\n########## ax[0] Steps to hatch egg\negg_s = pokemon.groupby('base_egg_steps')['name'].count() # Preparing subset of data for chart\nx = egg_s.index.map(lambda x: str(x))\ny = egg_s.values\n\nsns.barplot(x,y, order=x, palette='viridis',ax=ax[0])\nax[0].set_xlabel('Steps required to hatch base egg')\nax[0].set_ylabel('number of pokemon')\nax[0].set_title('Steps required to hatch base egg')\n\n########## ax[1] Experience required to grow\nexp_g = pokemon.groupby('experience_growth')['name'].count() # Preparing subset of data for chart\nlabels = ['600k', '800k', '1000k', '1060k', '1250k', '1640k']\n\nax[1].pie(exp_g.values, labels=labels, autopct='%1.1f%%',colors=vd, wedgeprops={'linewidth':4,'edgecolor':'white'},pctdistance=0.8, startangle=180)\n        # \"vd\" is a list of colors extracted from a standard cmap - codes at start of notebook\nmy_circle=plt.Circle( (0,0), 0.6, color='white') # adding white space to create donut chart\np=plt.gcf()\nax[1].add_artist(my_circle)\n\nax[1].text(-0.45,-0.05, 'Experience required\\nfor Pokemon growth', fontsize=12)\nax[1].axis('equal')\n\nplt.tight_layout()\nplt.show()","202dbb25":"fig, ax = plt.subplots(2,2, figsize=(18,12))\n\n######## ax[0,0] Legendary pokemon within different types\nlegendary = pokemon.groupby(['type1','is_legendary'])['name'].count().unstack() # creating subset data for chart\nlegendary = legendary.fillna(0)\n\nlegendary.columns = ['not_legend','legend']\nn = pokemon['type1'].nunique()\n\ntotals = [i+j for i,j in zip(legendary['not_legend'], legendary['legend'])] # counting total for each 'type1'\nlegend = [i \/ j * 100 for i,j in zip(legendary['legend'], totals)] # calculating % of legend in each 'type1'\nnot_legend = [i \/ j * 100 for i,j in zip(legendary['not_legend'], totals)] # calculating % of non-legend in 'type1'\n\nwidth = 0.85\nax[0,0].bar(np.arange(n), not_legend, color='lightcoral', edgecolor='white', width=width)\nax[0,0].bar(np.arange(n), legend, bottom=not_legend, color='gold', edgecolor='white', width=width)\nax[0,0].set_xticks(np.arange(n))\nax[0,0].set_xticklabels(np.sort(pokemon['type1'].unique()))\nax[0,0].set_title('% of legendary Pokemon within Type1')\n\n######## ax[0,1] hp distribution among type1\nsns.boxplot(x='hp', y='type1', data=pokemon, showfliers=False, showmeans=True, ax=ax[0,1])\nax[0,1].set_title('hp distribution of different Type1')\n\n######## ax[1,0] attack & defense of pokemon based on type1\natt_def = pokemon.groupby('type1')[['attack','defense','hp']].mean() # creating subset data for chart\n\nlabels_max = att_def.sort_values(by='attack', ascending=False).head(7) # find label for top 7 types for attack\nlabels_min = att_def.sort_values(by='attack', ascending=True).head(3) # find label for last 3 types for attack\nlabel_high = labels_max.index.tolist()\nlabel_low = labels_min.index.tolist()\n\nax[1,0].scatter(x=att_def['attack'], y=att_def['defense'],s=200,label=att_def.index, c=rb, alpha=0.7)\n\nfor label, x, y in zip(label_high, labels_max['attack'], labels_max['defense']):\n    ax[1,0].annotate(\n        label, xy=(x, y), xytext=(-20, -5), textcoords='offset points', ha='right', va='bottom',\n        bbox=dict(boxstyle='round,pad=0.5', fc='gold', alpha=0.5),\n        arrowprops=dict(arrowstyle = '->', connectionstyle='arc3,rad=0'))\nfor label, a, b in zip(label_low, labels_min['attack'], labels_min['defense']):\n    ax[1,0].annotate(\n        label, xy=(a, b), xytext=(14, 40), textcoords='offset points', ha='right', va='bottom',\n        bbox=dict(boxstyle='round,pad=0.5', fc='gold', alpha=0.5),\n        arrowprops=dict(arrowstyle = '->', connectionstyle='arc3,rad=0'))\nax[1,0].set_title('Pokemon attack & defense by Type 1')\n\n######## ax[1,1] Correlations between size, health and power\npower = pokemon[['height_m','weight_kg','hp','attack','defense','speed','sp_attack','sp_defense']]\nsns.heatmap(power.corr(), annot=True, cmap='GnBu', ax=ax[1,1], cbar=False)\nax[1,1].set_title('Correlations between size, health and power')\n\nplt.tight_layout()\nplt.show()","1c906360":"against = pokemon.iloc[:,1:19] # creating subset data for chart\nagainst = pd.concat([pokemon[['type1','type2']],against], axis=1)\nagainst['type2'].loc[against['type2'].isnull()]='None'\nagainst['type_combo'] = against['type1']+'-'+against['type2']\n\nfig, ax = plt.subplots(2,1,figsize=(18,18))\n\nsns.heatmap(against.groupby('type1').mean(), cmap='RdYlGn_r', annot=True, linewidths=0.3, fmt='.2g', ax=ax[0])\nax[0].set_title('Battle advantage among pokemon types')\n\nselection = against.groupby('type1').mean()\nsns.heatmap(selection.mask(selection<=1.5, np.nan),linewidths=0.3, cmap='RdYlGn_r', annot=True, fmt='.2g', linecolor='gainsboro', ax=ax[1])\nax[1].set_title('Which pokemon type to use in specific battles?')\n\nprint('Note: Figures indicates amount of damage taken against a particular type, with 1 being normal amount of damage')\nplt.tight_layout()\nplt.show()","93950751":"# manual selection based on chart above\nd = {'oponent pokemon':['bug','dark','dragon','electric','fairy','fighting','fire','flying','ghost','grass','ground','ice','normal','poison',\n                        'psychic','rock','steel','water'],\n     'selection1':['rock','fairy','ice','ground','steel','fairy','water','ice','ghost','fire','ice','rock','fighting','psychic','ghost','grass',\n                   'ground','grass'],\n     'selection2':['fire','fighting','fairy','fighting','poison','flying','rock','rock','dark','ice','water','steel','ice','ground','dark','water',\n                   'fire','electric'],\n     'selection3':['flying','bug','dragon','fire','ice','psychic','ground','fairy','ice','flying','grass','fire','electric','flying','bug','steel',\n                   'fighting','rock']}\n\nprint('Top 3 best pokemon selection against specific pokemon type')\npd.DataFrame(d)","2f6e902f":"pokemon.info()\n# Observation: 801 records and 41 features with mixture of object, float and int. Some missing data in...\n#...height, weight, type2 and percentage male","45198853":"**Pokemon - Exploratory Data Analysis**","d55059f1":"\n1.    There are a total of 801 pokemon across 7 generations. Generation 1, 3 and 5 have relatively higher number of Pokemon introduced\n2.   The most common pokemon types are \"water\", \"normal\", \"grass\" and \"bug\"\n3.  All pokemon has a primary type but only 52% of pokemon has a primary and secondary type (e.g. primary: bug, secondary: flying)\n4.  \"normal + flying\", \"grass + poison\", \"bug + flying\" and \"bug + poison\" are the most common type 1&2 combination\n5.  There is no significant strength differences between pokemon with only 1 type and pokemon with 2 types\n","d5909763":"**Back Up**","4d80099f":"Growing up with Pokemon, I find that this dataset is interesting to be explored. Also taking this opportunity to practice the usage of different visualizations. Any feedback is most welcome!","083b0e3f":"\n**Pokemon capture and growth observations:**\n\n  1.  Majority of eggs are hatched with 5,120 steps, followed by 3,840 steps\n  2.  67% of pokemon requires between 1-1.06 million experience points to grow\n  3.  Only a small percentage (1.7%) of pokemon requires more than 1.6 million experience point to grow\n\n","42ab587e":"**4. Pokemon Battle Advantage**","f43f8a98":"**2. Pokemon capture and growth**","5c217953":"**Pokemon overview observations:**","0dd707cb":"**3. Pokemon strengths analysis**","de612aaa":"\n**Pokemon strengths observation:**\n\n   1. dragon, flying, psychic and steel have relatively larger percentage of legendary pokemon\n   2. ghost, electric and bug pokemon tend to have lower hp whereas fairy and flying pokemon types tend to have higher hp\n   3. On average, dragon type has the highest attack and steel type has significantly higher defense\n   4. With reference to the combination of attack and defense:\n          a.  dragon, steel, rock and ground are among the strongest pokemon type\n          b.  fairy, psychic and flying are among the weakest pokemon type\n   5. There is no strong linear correlation between pokemon size (height & weight) to hp, attack and defense\n\n","42c34d55":"**1. Pokemon Overview**","2b5c7d03":"\n\nNote:\n\n    The lower the capture_rate indicates increasing difficulty in capturing pokemon (e.g. 3 = most difficult)\n    The higher the hp during time of capture, the more difficult it is for the pokemon to be captured\n\n"}}