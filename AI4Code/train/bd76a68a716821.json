{"cell_type":{"74e8b432":"code","854c5686":"code","f1b234a7":"code","333295fd":"code","42f7a216":"code","7560798a":"code","197037b3":"code","353dcb38":"code","31091083":"code","63d2a5d4":"code","f5d8b0e8":"code","92827552":"code","fddc5284":"code","b61d25d7":"code","4399666b":"code","2ffc78f1":"code","bab526bf":"code","9876b329":"code","25534325":"code","da6a3b39":"code","709927cf":"code","a9a8ae9a":"code","da14d1a0":"code","74d50ea1":"code","856bbb6e":"code","9162c591":"code","88b0d76f":"markdown","aca1419e":"markdown","1aed592a":"markdown","5a2760ef":"markdown","d89c092e":"markdown","dcedff4f":"markdown","11a15be9":"markdown","f82ee2cd":"markdown","be9d85d1":"markdown","25352c0d":"markdown","09b08727":"markdown","721ae5c0":"markdown","1c622284":"markdown","fc357f4c":"markdown","d95e760e":"markdown","eea69fe0":"markdown","13f0fa1d":"markdown","9cf1a431":"markdown","f276620c":"markdown","b67a069f":"markdown","87f57402":"markdown","a940fd1e":"markdown","99a45e8c":"markdown","7a31152c":"markdown","b0a5cef0":"markdown","7b7cb2a0":"markdown","a0bcb5ed":"markdown","570c1ad2":"markdown","e352de2d":"markdown","4fd3b7da":"markdown","f5819bc7":"markdown","35303f28":"markdown","9cf51095":"markdown","f9c2ca09":"markdown","f6e3fb93":"markdown","c032abb5":"markdown","1a7464ce":"markdown","6bcf8568":"markdown","e575126b":"markdown"},"source":{"74e8b432":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport matplotlib.cm as cm\nimport re\nsns.set_style(\"darkgrid\")\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\n\n","854c5686":"df = pd.read_csv('..\/input\/CompleteDataset.csv')\ndf.columns","f1b234a7":"df = df[['Name', 'Age', 'Nationality', 'Overall', 'Potential', 'Club', 'Value', 'Preferred Positions']]\ndf.head(10)","333295fd":"# get remaining potential\ndf['Remaining Potential'] = df['Potential'] - df['Overall']\n\n\n# get only one preferred position (first only)\ndf['Preferred Position'] = df['Preferred Positions'].str.split().str[0]\n\n# convert K to M\ndf['Unit'] = df['Value'].str[-1]\ndf['Value (M)'] = np.where(df['Unit'] == '0', 0, df['Value'].str[1:-1].replace(r'[a-zA-Z]',''))\ndf['Value (M)'] = df['Value (M)'].astype(float)\ndf['Value (M)'] = np.where(df['Unit'] == 'M', df['Value (M)'], df['Value (M)']\/1000)\ndf = df.drop('Unit', 1)\n\ndf.head(10)","42f7a216":" def plot_geo(by_column, measure, sort_column, chart_title, min_rating = 0):\n    df_g = df.copy()\n    df_g = df_g[df_g['Overall']>min_rating]\n    df_geo = df_g.groupby(['Nationality']).agg({by_column: measure})\n    df_geo = pd.DataFrame(data = df_geo)\n    df_geo = df_geo.rename(columns={by_column: 'Measurement'})\n    df_geo['text'] = ''\n\n    df_geo_player = df[['Nationality','Name', sort_column]].groupby(['Nationality']).head(3)\n    df_geo_player = df_geo_player.sort_values(['Nationality', sort_column], ascending=[True, False])\n    df_geo_player['Name_text'] = df_geo_player['Name'] + ' (' + df_geo_player[sort_column].map(str) + ')'\n\n    for index, row in df_geo.iterrows():\n        df_geo['text'].loc[index] = '<br>'.join(df_geo_player[df_geo_player['Nationality'] == index]['Name_text'].values)\n\n    df_geo.rename(index={'England': 'United Kingdom'}, inplace = True)\n\n    data = dict(type='choropleth',\n    locations = df_geo.index,\n    locationmode = 'country names', z = df_geo['Measurement'],\n    text = df_geo['text'], colorbar = {'title':'Scale'},\n    colorscale = [[0.0, 'rgb(242,240,247)'],[0.2, 'rgb(218,218,235)'],[0.4, 'rgb(188,189,220)'],\n                [0.6, 'rgb(158,154,200)'],[0.8, 'rgb(117,107,177)'],[1.0, 'rgb(84,39,143)']], \n    reversescale = False)\n\n    layout = dict(title = chart_title,\n    geo = dict(showframe = True, showcoastlines = False, projection={'type':'Mercator'}))\n\n    choromap = go.Figure(data = [data], layout = layout)\n    iplot(choromap, validate=False)\n\nplot_geo('Nationality', 'count', 'Overall', 'Total number of players per nationality')\nplot_geo('Overall', 'mean', 'Overall', 'Average rating per nationality')\nplot_geo('Overall', 'max','Overall',  'Maximum rating per nationality')\nplot_geo('Potential', 'max', 'Potential', 'Maximum potential per nationality')\nplot_geo('Age', 'mean', 'Age', 'Average age per nationality')\n","7560798a":"# 'ST', 'RW', 'LW', 'GK', 'CDM', 'CB', 'RM', 'CM', 'LM', 'LB', 'CAM','RB', 'CF', 'RWB', 'LWB'\n\ndef get_best_squad(position):\n    df_copy = df.copy()\n    store = []\n    for i in position:\n        store.append([i,df_copy.loc[[df_copy[df_copy['Preferred Position'] == i]['Overall'].idxmax()]]['Name'].to_string(index = False), df_copy[df_copy['Preferred Position'] == i]['Overall'].max()])\n        df_copy.drop(df_copy[df_copy['Preferred Position'] == i]['Overall'].idxmax(), inplace = True)\n    #return store\n    return pd.DataFrame(np.array(store).reshape(11,3), columns = ['Position', 'Player', 'Overall']).to_string(index = False)\n\n# 4-3-3\nsquad_433 = ['GK', 'LB', 'CB', 'CB', 'RB', 'LM', 'CDM', 'RM', 'LW', 'ST', 'RW']\nprint ('4-3-3')\nprint (get_best_squad(squad_433))\n","197037b3":"# 3-5-2\nsquad_352 = ['GK', 'LWB', 'CB', 'RWB', 'LM', 'CDM', 'CAM', 'CM', 'RM', 'LW', 'RW']\nprint ('3-5-2')\nprint (get_best_squad(squad_352))","353dcb38":"df_p = df.groupby(['Age'])['Potential'].mean()\ndf_o = df.groupby(['Age'])['Overall'].mean()\n\ndf_summary = pd.concat([df_p, df_o], axis=1)\n\nax = df_summary.plot()\nax.set_ylabel('Rating')\nax.set_title('Average Rating by Age')","31091083":"def get_best_squad(position, club = '*', measurement = 'Overall'):\n    df_copy = df.copy()\n    df_copy = df_copy[df_copy['Club'] == club]\n    store = []\n    for i in position:\n        store.append([df_copy.loc[[df_copy[df_copy['Preferred Position'].str.contains(i)][measurement].idxmax()]]['Preferred Position'].to_string(index = False),df_copy.loc[[df_copy[df_copy['Preferred Position'].str.contains(i)][measurement].idxmax()]]['Name'].to_string(index = False), df_copy[df_copy['Preferred Position'].str.contains(i)][measurement].max(), float(df_copy.loc[[df_copy[df_copy['Preferred Position'].str.contains(i)][measurement].idxmax()]]['Value (M)'].to_string(index = False))])\n        df_copy.drop(df_copy[df_copy['Preferred Position'].str.contains(i)][measurement].idxmax(), inplace = True)\n    #return store\n    return np.mean([x[2] for x in store]).round(1), pd.DataFrame(np.array(store).reshape(11,4), columns = ['Position', 'Player', measurement, 'Value (M)']).to_string(index = False), np.sum([x[3] for x in store]).round(1)\n\n# easier constraint\nsquad_433_adj = ['GK', 'B$', 'B$', 'B$', 'B$', 'M$', 'M$', 'M$', 'W$|T$', 'W$|T$', 'W$|T$']\n\n# Example Output for Chelsea\nrating_433_Chelsea_Overall, best_list_433_Chelsea_Overall, value_433_Chelsea_Overall = get_best_squad(squad_433_adj, 'Chelsea', 'Overall')\nrating_433_Chelsea_Potential, best_list_433_Chelsea_Potential, value_433_Chelsea_Potential  = get_best_squad(squad_433_adj, 'Chelsea', 'Potential')\n\nprint('-Overall-')\nprint('Average rating: {:.1f}'.format(rating_433_Chelsea_Overall))\nprint('Total Value (M): {:.1f}'.format(value_433_Chelsea_Overall))\nprint(best_list_433_Chelsea_Overall)\n\nprint('-Potential-')\nprint('Average rating: {:.1f}'.format(rating_433_Chelsea_Potential))\nprint('Total Value (M): {:.1f}'.format(value_433_Chelsea_Potential))\nprint(best_list_433_Chelsea_Potential)\n","63d2a5d4":"# very easy constraint since some club do not have strict squad\nsquad_352_adj = ['GK', 'B$', 'B$', 'B$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'W$|T$|M$', 'W$|T$|M$']\n\nBy_club = df.groupby(['Club'])['Overall'].mean()\n\ndef get_summary(squad):\n    OP = []\n    # only get top 100 clubs for shorter run-time\n    for i in By_club.sort_values(ascending = False).index[0:100]:\n        # for overall rating\n        O_temp_rating, _, _  = get_best_squad(squad, club = i, measurement = 'Overall')\n        # for potential rating & corresponding value\n        P_temp_rating, _, P_temp_value = get_best_squad(squad, club = i, measurement = 'Potential')\n        OP.append([i, O_temp_rating, P_temp_rating, P_temp_value])\n    return OP\n\nOP_df = pd.DataFrame(np.array(get_summary(squad_352_adj)).reshape(-1,4), columns = ['Club', 'Overall', 'Potential', 'Value of highest Potential squad'])\nOP_df.set_index('Club', inplace = True)\nOP_df = OP_df.astype(float)\n\n\nprint (OP_df.head(10))\n    ","f5d8b0e8":"fig, ax = plt.subplots()\nOP_df.plot(kind = 'scatter', x = 'Overall', y = 'Potential', c = 'Value of highest Potential squad', s = 50, figsize = (15,15), xlim = (70, 90), ylim = (70, 90), title = 'Current Rating vs Potential Rating by Club: 3-5-2', ax = ax)\n","92827552":"fig, ax = plt.subplots()\nOP_df.plot(kind = 'scatter', x = 'Overall', y = 'Potential', c = 'Value of highest Potential squad', s = 50, figsize = (15,15), xlim = (80, 90), ylim = (85, 90), title = 'Current Rating vs Potential Rating by Club: 3-5-2', ax = ax)\n\ndef label_point(x, y, val, ax):\n    a = pd.concat({'x': x, 'y': y, 'val': val}, axis=1)\n    for i, point in a.iterrows():\n        ax.text(point['x'], point['y'], str(point['val']))\n       \nOP_df['Club_label'] = OP_df.index\n\nOP_df_sub = OP_df[(OP_df['Potential']>=85) & (OP_df['Value of highest Potential squad']<=350)]\n\nlabel_point(OP_df_sub['Overall'], OP_df_sub['Potential'], OP_df_sub['Club_label'], ax)\n","fddc5284":"squad_352_adj = ['GK', 'B$', 'B$', 'B$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'W$|T$|M$', 'W$|T$|M$']\n\nrating_352_TH_Overall, best_list_352_TH_Overall, value_352_TH_Overall = get_best_squad(squad_352_adj, 'Tottenham Hotspur', 'Overall')\nrating_352_TH_Potential, best_list_352_TH_Potential, value_352_TH_Potential  = get_best_squad(squad_352_adj, 'Tottenham Hotspur', 'Potential')\n\nprint('-Overall-')\nprint('Average rating: {:.1f}'.format(rating_352_TH_Overall))\nprint('Total Value (M): {:.1f}'.format(value_352_TH_Overall))\nprint(best_list_352_TH_Overall)\n\nprint('-Potential-')\nprint('Average rating: {:.1f}'.format(rating_352_TH_Potential))\nprint('Total Value (M): {:.1f}'.format(value_352_TH_Potential))\nprint(best_list_352_TH_Potential)\n","b61d25d7":"def get_best_squad_n(position, nationality, measurement = 'Overall'):\n    df_copy = df.copy()\n    df_copy = df_copy[df_copy['Nationality'] == nationality]\n    store = []\n    for i in position:\n        store.append([df_copy.loc[[df_copy[df_copy['Preferred Position'].str.contains(i)][measurement].idxmax()]]['Preferred Position'].to_string(index = False),df_copy.loc[[df_copy[df_copy['Preferred Position'].str.contains(i)][measurement].idxmax()]]['Name'].to_string(index = False), df_copy[df_copy['Preferred Position'].str.contains(i)][measurement].max()])\n        df_copy.drop(df_copy[df_copy['Preferred Position'].str.contains(i)][measurement].idxmax(), inplace = True)\n    #return store\n    return np.mean([x[2] for x in store]).round(2), pd.DataFrame(np.array(store).reshape(11,3), columns = ['Position', 'Player', measurement]).to_string(index = False)\n\ndef get_summary_n(squad_list, squad_name, nationality_list):\n    OP_n = []\n\n    for i in nationality_list:\n        count = 0\n        for j in squad_list:\n            # for overall rating\n            O_temp_rating, _  = get_best_squad_n(position = j, nationality = i, measurement = 'Overall')\n            # for potential rating & corresponding value\n            P_temp_rating, _ = get_best_squad_n(position = j, nationality = i, measurement = 'Potential')\n            OP_n.append([i, squad_name[count], O_temp_rating.round(2), P_temp_rating.round(2)])    \n            count += 1\n    return OP_n\n\n","4399666b":"squad_352_strict = ['GK', 'LB|LWB', 'CB', 'RB|RWB', 'LM|W$', 'RM|W$', 'CM', 'CM|CAM|CDM', 'CM|CAM|CDM', 'W$|T$', 'W$|T$']\nsquad_442_strict = ['GK', 'LB|LWB', 'CB', 'CB', 'RB|RWB', 'LM|W$', 'RM|W$', 'CM', 'CM|CAM|CDM', 'W$|T$', 'W$|T$']\nsquad_433_strict = ['GK', 'LB|LWB', 'CB', 'CB', 'RB|RWB', 'CM|LM|W$', 'CM|RM|W$', 'CM|CAM|CDM', 'W$|T$', 'W$|T$', 'W$|T$']\nsquad_343_strict = ['GK', 'LB|LWB', 'CB', 'RB|RWB', 'LM|W$', 'RM|W$', 'CM|CAM|CDM', 'CM|CAM|CDM', 'W$|T$', 'W$|T$', 'W$|T$']\nsquad_532_strict = ['GK', 'LB|LWB', 'CB|LWB|RWB', 'CB|LWB|RWB', 'CB|LWB|RWB', 'RB|RWB', 'M$|W$', 'M$|W$', 'M$|W$', 'W$|T$', 'W$|T$']\n\n\nsquad_list = [squad_352_strict, squad_442_strict, squad_433_strict, squad_343_strict, squad_532_strict]\nsquad_name = ['3-5-2', '4-4-2', '4-3-3', '3-4-3', '5-3-2']","2ffc78f1":"rating_352_EN_Overall, best_list_352_EN_Overall = get_best_squad_n(squad_352_strict, 'England', 'Overall')\nrating_352_EN_Potential, best_list_352_EN_Potential = get_best_squad_n(squad_352_strict, 'England', 'Potential')\n\nprint('-Overall-')\nprint('Average rating: {:.1f}'.format(rating_352_EN_Overall))\nprint(best_list_352_EN_Overall)\n\nprint('-Potential-')\nprint('Average rating: {:.1f}'.format(rating_352_EN_Potential))\nprint(best_list_352_EN_Potential)","bab526bf":"OP_df_n = pd.DataFrame(np.array(get_summary_n(squad_list, squad_name, ['England'])).reshape(-1,4), columns = ['Nationality', 'Squad', 'Overall', 'Potential'])\nOP_df_n.set_index('Nationality', inplace = True)\nOP_df_n[['Overall', 'Potential']] = OP_df_n[['Overall', 'Potential']].astype(float)\n\nprint (OP_df_n)","9876b329":"fig, ax = plt.subplots()\n\n\nOP_df_n.plot(kind = 'barh', x = 'Squad', y = ['Overall', 'Potential'], edgecolor = 'black', color = ['white', 'lightgrey'], figsize = (15,10), title = 'Current and potential rating (Best 11) by squad (England)', ax = ax)\n\n\n#print (OP_df_n[OP_df_n['Overall'] == OP_df_n['Overall'].max()]['Squad'])\n\ndef get_text_y(look_for):\n    count = 0\n    for i in squad_name:\n        if i == look_for:\n            return count\n        else:\n            count += 1\n\nax.text(OP_df_n['Overall'].max()\/2, get_text_y(OP_df_n[OP_df_n['Overall'] == OP_df_n['Overall'].max()]['Squad'].tolist()[0])-0.2, 'Highest Current Rating: {}'.format(OP_df_n['Overall'].max()))\nax.text(OP_df_n['Potential'].max()\/2, get_text_y(OP_df_n[OP_df_n['Potential'] == OP_df_n['Potential'].max()]['Squad'].tolist()[0])+0.1, 'Highest Potential Rating: {}'.format(OP_df_n['Potential'].max()))\n\n","25534325":"Country_list = ['Spain','Germany','Brazil','Argentina','Italy']\n\nOP_df_n = pd.DataFrame(np.array(get_summary_n(squad_list, squad_name, Country_list)).reshape(-1,4), columns = ['Nationality', 'Squad', 'Overall', 'Potential'])\nOP_df_n.set_index('Nationality', inplace = True)\nOP_df_n[['Overall', 'Potential']] = OP_df_n[['Overall', 'Potential']].astype(float)\n\nfor i in Country_list:\n    OP_df_n_copy = OP_df_n.copy()\n    OP_df_n_copy = OP_df_n_copy[OP_df_n_copy.index == i]\n    fig, ax = plt.subplots()\n    OP_df_n_copy.plot(kind = 'barh', x = 'Squad', y = ['Overall', 'Potential'], edgecolor = 'black', color = ['white', 'lightgrey'], figsize = (15,10), title = 'Current and potential rating (Best 11) by squad ({})'.format(i), ax = ax)\n\n    ax.text(OP_df_n_copy['Overall'].max()\/2, get_text_y(OP_df_n_copy[OP_df_n_copy['Overall'] == OP_df_n_copy['Overall'].max()]['Squad'].tolist()[0])-0.2, 'Highest Current Rating: {}'.format(OP_df_n_copy['Overall'].max()))\n    ax.text(OP_df_n_copy['Potential'].max()\/2, get_text_y(OP_df_n_copy[OP_df_n_copy['Potential'] == OP_df_n_copy['Potential'].max()]['Squad'].tolist()[0])+0.1, 'Highest Potential Rating: {}'.format(OP_df_n_copy['Potential'].max()))","da6a3b39":"df_summary['Overall age trend factor'] = df_summary['Overall'] \/ df_summary['Overall'].iloc[0]\n\n# assume players retire at 40\ndf_summary_trend = df_summary['Overall age trend factor'].loc[16:40]\n\nexpand = pd.Series(0, index=range(41,100))\n\ndf_summary_trend = df_summary_trend.append(expand)\n\nprint(df_summary_trend.head())","709927cf":"def get_best_squad_n_n_yr_later(n, position, nationality):\n    df_copy = df.copy()\n    df_copy = df_copy[df_copy['Nationality'] == nationality]\n    df_copy['Overall_n_yr_later'] = round(df_copy['Age'].apply(lambda x: df_summary_trend.loc[x+n]\/df_summary_trend.loc[x])*df_copy['Overall'],1)\n    store = []\n    for i in position:\n        store.append([df_copy.loc[[df_copy[df_copy['Preferred Position'].str.contains(i)]['Overall_n_yr_later'].idxmax()]]['Preferred Position'].to_string(index = False),df_copy.loc[[df_copy[df_copy['Preferred Position'].str.contains(i)]['Overall_n_yr_later'].idxmax()]]['Name'].to_string(index = False), df_copy[df_copy['Preferred Position'].str.contains(i)]['Overall_n_yr_later'].max()])\n        df_copy.drop(df_copy[df_copy['Preferred Position'].str.contains(i)]['Overall_n_yr_later'].idxmax(), inplace = True)\n    #return store\n    return np.mean([x[2] for x in store]).round(2), pd.DataFrame(np.array(store).reshape(11,3), columns = ['Position', 'Player', 'Overall_n_yr_later']).to_string(index = False)\n\n# get next 3 years England's best squad for 3-5-2 based on estimate\nfor n in range(0,4):\n    print('{} years later'.format(n))\n    rating_352_EN_Overall_later, best_list_352_EN_Overall_later = get_best_squad_n_n_yr_later(n, squad_352_strict, 'England')\n    print('Average rating: {:.1f}'.format(rating_352_EN_Overall_later))\n    print(best_list_352_EN_Overall_later)\n    \n    ","a9a8ae9a":"# get next 3 years Spain's best squad for 3-5-2 based on estimate\nfor n in range(0,4):\n    print('{} years later'.format(n))\n    rating_352_SP_Overall_later, best_list_352_SP_Overall_later = get_best_squad_n_n_yr_later(n, squad_352_strict, 'Spain')\n    print('Average rating: {:.1f}'.format(rating_352_SP_Overall_later))\n    print(best_list_352_SP_Overall_later)","da14d1a0":"list_of_countries = ['England', 'Italy', 'Spain', 'Germany', 'Brazil']\nn_yr = 15\n\nrating_combine = pd.DataFrame(index = range(0, n_yr), columns = list_of_countries)\n\nfor c in list_of_countries:\n    for n in range(0,n_yr):\n        rating_352_Overall_later, _ = get_best_squad_n_n_yr_later(n, squad_352_strict, c)\n        rating_combine[c].iloc[n] = rating_352_Overall_later\n        \nax = rating_combine.plot(kind = 'line', figsize = (15,10), title = 'Country 3-5-2 best 11 rating by time')\nax.set_xlabel(\"n years later\")\nax.set_ylabel(\"team rating\")\n    ","74d50ea1":"X = df['Overall'].values.reshape(-1,1)\ny = df['Value (M)'].values.reshape(-1,1)\nregr = linear_model.LinearRegression().fit(X, y)\n\ny_pred = regr.predict(X)\nprint('Coefficients: ', regr.coef_)\nprint(\"Mean squared error: %.2f\"% mean_squared_error(y, y_pred))\nprint('Variance score: %.2f'% r2_score(y, y_pred))\n\ndef plot_chart(X, y, y_pred, x_l, x_h, y_l, y_h, c):\n    plt.figure(figsize = (15,10))\n    plt.scatter(X, y, color=c)\n    plt.plot(X, y_pred, color='blue', linewidth=3)\n\n    plt.title('Player value (M) vs rating')\n    plt.ylim(y_l,y_h)\n    plt.xlim(x_l,x_h)\n    plt.ylabel('Value (M)')\n    plt.xlabel('Player ratings')\n    \nplot_chart(X, y, y_pred, 40, 100, 0, 130, 'black')","856bbb6e":"df_2 = df[df['Value (M)'] != 0]\nX_2 = df_2['Overall'].values.reshape(-1,1)\ny_2 = df_2['Value (M)'].values.reshape(-1,1)\n\npoly = PolynomialFeatures(degree=2)\nX_2_p = poly.fit_transform(X_2)\nclf = linear_model.LinearRegression().fit(X_2_p, y_2)\ny_2_pred = clf.predict(X_2_p)\n\nprint('Coefficients: ', clf.coef_)\nprint(\"Mean squared error: %.2f\"% mean_squared_error(y_2, y_2_pred))\nprint('Variance score: %.2f'% r2_score(y_2, y_2_pred))\n\ncolor_dict = {'ST': 'red', 'CF': 'red', 'LW': 'red', 'RW': 'red',\n              'LM': 'blue', 'RM': 'blue', 'CM': 'blue', 'CAM': 'blue', 'CDM': 'blue',\n              'LB': 'green', 'RB': 'green', 'CB': 'green', 'LWB': 'green', 'RWB': 'green',\n              'GK': 'purple'}\n\nc = df_2['Preferred Position'].map(color_dict)\n\nplot_chart(X_2, y_2, y_2_pred, 40, 100, 0, 130, 'black')\n\n# by positions\nplot_chart(X_2, y_2, y_2_pred, 40, 100, 0, 130, c)\nplt.text(50, 120, 'Forward', color = 'red')\nplt.text(50, 115, 'Midfielder', color = 'blue')\nplt.text(50, 110, 'Defender', color = 'green')\nplt.text(50, 105, 'Goalkeeper', color = 'purple')","9162c591":"x_low = 85\ny_max = 60\nplot_chart(X_2, y_2, y_2_pred, x_low, 94, 0, y_max, c)\nplt.text(92, 20, 'Forward', color = 'red')\nplt.text(92, 17, 'Midfielder', color = 'blue')\nplt.text(92, 14, 'Defender', color = 'green')\nplt.text(92, 11, 'Goalkeeper', color = 'purple')\nax = plt.gca()\nfor index, row in df_2.iterrows():\n    if row['Overall'] > x_low and row['Value (M)'] < y_max:\n        ax.text(row['Overall'], row['Value (M)'], '{}, {}'.format(row['Name'],row['Age']))","88b0d76f":"Please note that the above analysis has a lot of assumption, including the FIFA 18 rating accuracy for each player etc. So just have fun, hopefully it is a fun read!\n\nNext I will look into applying machine learning models to the data to [predict player's preferred positions](https:\/\/www.kaggle.com\/laowingkin\/fifa-18-predict-positions-logistic-regression), stay tuned!","aca1419e":"For simplicity of analysis, I only pull in data I am interested in:","1aed592a":"So we have the best squad now, what's next? Well for a club investor, you might not want to just look at the current overall performance of the team, but also have a future-oriented mind - look at the potential of the team. \n\nAnother concern is the cost of acquiring the squad, it is nearly impossible to get the above squad because the best players come from different club!\n\nNow let's look at how age, potential rating and current overall rating correlated with each other:","5a2760ef":"Then we load the data in:","d89c092e":"Also let's make our squad choices more strict:","dcedff4f":"Next, let's look into how player's market value vary with their ratings, by performing regression:","11a15be9":"## Current and future best squad by country","f82ee2cd":"For Spain, we can see that moving from 4-4-2 to 3-4-3 in long run might benefit the team, more into an attack style. Different countries offer different observations!","be9d85d1":"Let's display them graphically:","25352c0d":"Geographical representation of all players distribution:","09b08727":"## Current rating, potential rating and corresponding team value by club","721ae5c0":"## Player rating vs Value - Regression","1c622284":"Supposed we have 350M to buy a club with existing squad and are interested in club with at least 85 potential ratings, then we should probably go for Tottenham Hotspur, and Aresenal is relatively a bad choice. Their best 11 squad is as follows:","fc357f4c":"Alright, now let's look at something simple, what's the best squad accordingly to FIFA 18 purely based on overall rating?","d95e760e":"A few interesting findings:\n* EU and South America are stronger in general\n* We can see that US has relatively greater potential than it's current rating\n* Pretty much all countries have similar average player age","eea69fe0":"Above shows you the best 11 squad for both current rating, potential rating and corresponding value (M) of top 10 clubs, in table format. How does it show graphically?","13f0fa1d":"Alright, now let's move onto studying different squad's impact on Nationality teams. First let's modifiy above get_summary and get_best_squad functions for Nationality:","9cf1a431":"A few observations:\n\n* Linear regression is not a good fit to the data (let's try polynomial models)\n* There are a lot of players with zero value that skewed the dataset (let's exclude those from our analysis)","f276620c":"So we can say that England has the best squard as 3-5-2 for both current squad and future squad based on team ratings. How about other countries? Let's see a few more:","b67a069f":"We can see that players have much more potential to grow at their younger age, and grow very slow after around age 28 (average view among all players).\n\nNow let's look at which team has highest potential and overall rating on best 11 squad. First we have to modify the above function a bit to make the implementation easier:","87f57402":"It drops after some top players are retired and no new player data available, as expected","a940fd1e":"From above, we can see that those significantly overpriced players (way above the blue curve) are mostly forward and midfielder players. Let's focus on high rating players and see who are underpriced:","99a45e8c":"One of the major drawback of above analysis is it ignores the time taken for players to grow to their max potential. Let's try to consider it as well.\n\nFirst we need to get the average rating trend of all players:","7a31152c":"We can see the player list changed slightly when time goes on. How about Spain?","b0a5cef0":"Now let's gather the ratings for all clubs available:","7b7cb2a0":"The next step is to manipulate the data for our needs:","a0bcb5ed":"Some interesting pattern found, is there any strong clubs with relatively low value? Let's drill down to top clubs with potential rating above 85:","570c1ad2":"Graphcial representation:","e352de2d":"## Players distribution geographically on various measures","4fd3b7da":"We could see that those 'underpriced' players are usually older, and this explains why their market value is relatively lower.","f5819bc7":"Now let's explore different squad possibility of England and how it affects the ratings:","35303f28":"Below is an example of best 11 squad line-up of England in 3-5-2, both current rating and potential rating:","9cf51095":"## Squad of best 11 players","f9c2ca09":"## Introducing time effect for future rating","f6e3fb93":"## Data manipulation","c032abb5":"## Age, Potential rating, current rating study of all players","1a7464ce":"Then we apply the trend factor to estimate the future rating more accurately:","6bcf8568":"*Last edit by David Lao - 2018\/07\/27*\n\n\n<br>\n<br>\n\n![](https:\/\/metrouk2.files.wordpress.com\/2017\/09\/fifa-18-ultimate-team-fut-live.jpg?w=748&h=395&crop=1)\n\n# FIFA Analytics - Find the Best Squad through Data Analysis\n\nGreeting from Hong Kong! This is an analysis regarding the game FIFA 18, focusing on finding the best squad. The dataset contains all FIFA 18 players **~ 18K players** and **70+** attributes.\n\n## Table of Content\n\n* Data manipulation\n* Players distribution geographically on various measures (*Edit on 2017\/10\/10*)\n* Squad of best 11 players\n* Age, Potential rating, current rating study of all players\n* Current rating, potential rating and corresponding team value by club\n* Current and future best squad by country (*Edit on 2017\/09\/30*)\n* Introducing time effect for future rating (*Edit on 2017\/10\/26*)\n* Player rating vs Value - Regression (*Edit on 2017\/10\/04*)\n\n\n\n<br>\nAppreciate if you can **Upvote** if this notebook is helpful to you in some ways!\n","e575126b":"First we have some library to load:"}}