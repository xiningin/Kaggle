{"cell_type":{"00ae5dce":"code","969bc019":"code","5e09ac46":"code","d396c6f5":"markdown","d4efb6ac":"markdown","401122a1":"markdown","093002be":"markdown"},"source":{"00ae5dce":"import numpy as np\nimport pandas as pd\nimport os\n\n#takes the week data and extracts two positions to get the distance, this is the core of this analysis\ndef getPerformanceForWeek(weekNr):\n    week = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/week' + str(weekNr) + '.csv')\n    week.fillna(0)\n    if not os.path.exists('.\/week_' + str(weekNr)):\n        os.makedirs('.\/week_' + str(weekNr))\n\n    week[\"new_secoud\"] = week.time.apply(lambda x: x.split(\"T\")[1].split(\".\")[0])\n    \n    #filter relevant positions\n    week_cbs = week[(week.position == \"CB\")] #(week.gameId == 2018090600) if you want to make it only for one game of week 1\n    week_wrs = week[(week.position == \"WR\")] #(week.gameId == 2018090600) if you want to make it only for one game of week 1\n\n    #group it for: play per player per week\n    week_wrs_plays = [x for _, x in week_wrs.groupby(['nflId', 'playId'])]\n    week_cbs_plays = [x for _, x in week_cbs.groupby(['nflId','playId'])]\n\n    i = 1 # for logging\n    for _refPlay in week_cbs_plays:\n        _refPlay = _refPlay.drop_duplicates(subset='new_secoud', keep=\"last\") # generates a secound based play-data-frame\n        _refPlayId = _refPlay['playId'].iloc[0]\n        shortestStartDistance = 9999; #holds the shortest start distance to the other position\n        selectedPlayCombination = None;\n        print(\"(Week \" + str(weekNr) + \") Working on \" + str(i) + \"\/\" + str(len(week_cbs_plays)))\n        i += 1 # for logging\n\n        for play in week_wrs_plays:\n            selectedPlay = play[(play.playId == _refPlayId)]\n            selectedPlay = selectedPlay.drop_duplicates(subset='new_secoud', keep=\"last\") # generates a secound based play-data-frame\n            if(not selectedPlay.empty) :\n                # Merge the players to calculate the distance on the secound based frame\n                _refPlayMerged = _refPlay.merge(selectedPlay, on=['playId', 'new_secoud'], how='inner', suffixes=('_1', '_2'));\n                if(_refPlayMerged.shape[0] < 3): # dont add if less than 3 data-points in the play\n                    continue;\n\n                #distance calculation with merged data\n                _refPlayMerged['distance'] = abs((_refPlayMerged['x_1'] - _refPlayMerged['x_2']) + (_refPlayMerged['y_1'] - _refPlayMerged['y_2']))\n                _refPlayMerged['avg_distance'] = _refPlayMerged['distance'].sum() \/ _refPlayMerged.shape[0]\n                startDistace = _refPlayMerged['distance'].iloc[0] # picks the distance at the first secound of the play\n                if(shortestStartDistance > startDistace): # this chooses the nearest opponent player (there can be more than one CB and WR)\n                    shortestStartDistance = startDistace;\n                    selectedPlayCombination = _refPlayMerged;\n                    _refPlayMerged.to_csv('.\/week_' + str(weekNr) + '\/merged_week_' + str(weekNr) + '_play_'+ str(i) +'.csv', index=False) # save merged play to CSV\n                \n            pass\n\n# now analyse the data and save it to a csv per week (a week takes ~1,5h to analyse)\ngetPerformanceForWeek(1)\ngetPerformanceForWeek(2)\n\"\"\" Only first 2 because kaggle only allows 9h notbook run time\ngetPerformanceForWeek(3)\ngetPerformanceForWeek(4)\ngetPerformanceForWeek(5)\ngetPerformanceForWeek(6)\ngetPerformanceForWeek(7)\ngetPerformanceForWeek(8)\ngetPerformanceForWeek(9)\ngetPerformanceForWeek(10)\ngetPerformanceForWeek(12)\ngetPerformanceForWeek(13)\ngetPerformanceForWeek(14)\ngetPerformanceForWeek(15)\ngetPerformanceForWeek(16)\ngetPerformanceForWeek(17)\"\"\"\n\n\n\n# Run this command to create a ZIP containing the created files which can be downloaded at once\n# !zip -r file.zip \/kaggle\/working","969bc019":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n# Loads the data of the play\ndef displayPlayDistancePlot(weekId, playIndex):\n    fileName = os.listdir(\"\/kaggle\/working\/week_\" + str(weekId))[playIndex]\n    play = pd.read_csv('\/kaggle\/working\/week_' + str(weekId) + '\/' + fileName)\n    plotMatchup(play['playId'].iloc[0], play)\n\n# Creates a plot for display\ndef plotMatchup(_refPlayId, _refPlayMerged):\n    fig = plt.figure(figsize=(8, 6))\n    ax1 = fig.add_subplot(111)\n    ax1.text(0.02, 65, \"Play \" + str(_refPlayId) + \" - \" + _refPlayMerged['displayName_1'].iloc[0] + \" vs \" + _refPlayMerged['displayName_2'].iloc[0])\n    ax1.text(0.02, 60, \"Avg. distance (rounded to two digits): \" + str(round(_refPlayMerged['avg_distance'].iloc[0], 2)) + \" yards\")\n    ax1.plot(_refPlayMerged['new_secoud'], _refPlayMerged['distance'])\n    ax1.set_xlabel(\"Play time in seconds\")\n    ax1.set_ylabel(\"Distance in yards\")\n    ax1.set_ylim(0,70)\n    fig.tight_layout()\n    plt.show()\n\ndisplayPlayDistancePlot(1, 1)\ndisplayPlayDistancePlot(1, 2)\ndisplayPlayDistancePlot(2, 5)\ndisplayPlayDistancePlot(2, 6)","5e09ac46":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n# Creates a list of avrage distances for a match (week)\ndef generateList(weekId):\n    fileNames = os.listdir(\"\/kaggle\/working\/week_\" + str(weekId)) #\"\/kaggle\/working\/week_\" + str(weekId)\n    playerPerformances = {} # format: {NflId: PlayData}\n    for fileName in fileNames:\n        play = pd.read_csv('\/kaggle\/working\/week_' + str(weekId) + '\/' + fileName) #'\/kaggle\/working\/week_' + str(weekId) + '\/' + fileName\n        \n        # add results to a player\n        if(not int(play['nflId_1'].iloc[0]) in playerPerformances):\n            playerPerformances[int(play['nflId_1'].iloc[0])] = []\n        playerPerformances[int(play['nflId_1'].iloc[0])].append(play);\n    printPlayerStats(getPerformanceStats(playerPerformances))\n\n# Converts the data to a different format to calculate overall avrages\ndef getPerformanceStats(playerPerformance):\n    newPlayerStats = {}\n    for key, value in playerPerformance.items():\n        if(not key in newPlayerStats):\n            newPlayerStats[key] = { \"name\": \"Nan\", \"avgDistances\": [] }\n\n        for performanceData in value:\n            newPlayerStats[key][\"name\"] = performanceData['displayName_1'].iloc[0];\n            newPlayerStats[key][\"avgDistances\"].append(performanceData['avg_distance'].iloc[0]);\n            pass\n    return newPlayerStats\n\ndef printPlayerStats(stats):\n    dataFrameData = {'id': [], 'name': [], 'avgDistance': [], 'max': [], 'min': [], 'entrys': []};\n    for key, value in stats.items():\n        avgDistance = round(sum(stats[key][\"avgDistances\"]) \/ len(stats[key][\"avgDistances\"]), 2)\n        dataFrameData['id'].append(key);\n        dataFrameData['name'].append(stats[key][\"name\"]);\n        dataFrameData['avgDistance'].append(avgDistance);\n        dataFrameData['max'].append(max(stats[key][\"avgDistances\"]));\n        dataFrameData['min'].append(min(stats[key][\"avgDistances\"]));\n        dataFrameData['entrys'].append(len(stats[key][\"avgDistances\"]));\n        # print(stats[key][\"name\"] + \": \" + str(avgDistance) + \" min: \" + str(min(stats[key][\"avgDistances\"])) + \" max: \" + str(max(stats[key][\"avgDistances\"])) + \" entrys: \" + str(len(stats[key][\"avgDistances\"])))\n    df = pd.DataFrame (dataFrameData, columns = ['id', 'name', 'avgDistance', 'max', 'min', 'entrys'])\n    sortedDf = df[(df.entrys > 3)].sort_values(by=['avgDistance'])\n    print(sortedDf)\n    _tmpDisplayDf = sortedDf[['name', 'avgDistance', 'entrys']];\n    # hide axes\n    fig, ax = plt.subplots()\n    fig.patch.set_visible(False)\n    ax.axis('off')\n    ax.axis('tight')\n\n    table = ax.table(cellText=_tmpDisplayDf.values, colLabels=['Name', 'Average', 'Entrys'], loc='center')\n    table.scale(2, 2)\n    fig.tight_layout()\n\n\ngenerateList(1)\ngenerateList(2)\n\"\"\"generateList(3)\ngenerateList(4)\ngenerateList(5)\ngenerateList(6)\ngenerateList(7)\ngenerateList(8)\ngenerateList(9)\ngenerateList(10)\ngenerateList(11)\ngenerateList(12)\ngenerateList(13)\ngenerateList(14)\ngenerateList(15)\ngenerateList(16)\ngenerateList(17)\"\"\"","d396c6f5":"### \ud83d\udca5 Problems\n- The prep-script will always pick the enemy player with the shortest initial distance at a play to define the opponent for distance messure. This could lead to a false identification and wrong data.\n- Execution takes ~ 1,5h for one week on the default Kaggle CPU, a execution on GPU may be faster but I have no idea how to do that.\n\n### \ud83d\udca1 Potential\n- The code performance could be improved or run on a faster CPU to create faster results, currently one week analysis takes ~1,5h\n- As this script is not hardcoded for only the CB and WR positions any two defensive and the corrosponding offensive positions could be plugged in to mesure a average distance between those two positions.\n- Currently only the avrage distance is extracted, potentialy the whole merged dataframe could be analysed in many different ways.\n- Adding the events in the plot display to show what happened\n\n### What do you think this data can be usefull for? What ways would you use the script? Write a comment.","d4efb6ac":"### \u2728 ***Analysis:*** Data Visualisation\nNow to the interesting stuff, the visual graphs and plots we all want so see.\nThe following code will take a given week and playIndex to create a plot of the distance between the CB and WR for that play. This could be done for every play.\nHere I choose some plays to display what the distance metric looks like.\n\nJust as example These are the following play matchups in order: Week 1 Play 1; Week 1 Play 2; Week 2 Play 5; Week 2 Play 6:","401122a1":"# **Player Coverage Analysis \ud83c\udfc8**\n\n## Overview\n- ***Introduction:*** How well does a defensive player cover his opponent?\n- ***Preparation:*** Mesure the distances (What this script does)\n- ***Conclusion:*** Calculate the average (Skip till here to see plots and results of this analysis)\n- ***Problems & Potential***\n- What do you think this data can be usefull for?\n\nHave fun and please leave feedback!\n\n### ***Introduction:*** How well does a defensive player cover his opponent?\n![Visual example of good cover](https:\/\/drive.google.com\/uc?export=view&id=1pYEFdvegoDZrfGmNP7b4idRwB_YB5N22)\n\nTo gain insights into this metric we can calculate the distance between two players. Because of long calculation times for even only one poition we will pick: cornerback and widereceiver in every full play (from snap till it is completely over). This demands some preparation and a lot of calculation time for the kaggle cloud \ud83d\udcca.\n\n#### Note: This could be done with every other pair of positions by simply chaing the letters in the script to the corresponding position.\n\n### ***Preparation:*** Mesure the distances (What this script does)\nIt takes the position of every cornerback and sorts out the position of a given widereceiver and mesures the distance for every secound of every play.\nUsing this data a list of average distances or \"coverage\" is created.\n\nOf course this is only one variable that could be used to mesure the efficiency of a cornerback, as there are many more metrics than just distance to widereceiver to take into account - for example the play situation the player is facing, where the ball is, a interception, etc.\n\n![How it works](https:\/\/drive.google.com\/uc?export=view&id=1wwhEZBTP-nUO8uIzCkDtOMkCgOre2DpZ)\n\n\n","093002be":"### \ud83e\udd13 ***Conclusion:*** Calculate the average\nNow we can get to the nerdy part. Calculating the average distance of a player for every play of a game (or week).\nThe following script takes a given week and calculates the average for every player. This could be done for every week.\nThe prepared data for each play can be analysed in many ways. This is one of the simplest ways.\nTo conclude this analysis we will print the smallest distance \"highscore\" tables of the first two weeks, one table per week:"}}