{"cell_type":{"3a8e73d4":"code","2dd5674f":"code","42a3ab7e":"code","253f5371":"code","260db041":"code","da590a62":"code","17ad7904":"code","4611bd4d":"code","b8a3941b":"code","e57e6c7b":"code","fbfa20cc":"code","633f19b7":"code","cb5f1fae":"code","e52905ad":"code","117ceafa":"code","0600f44e":"code","670b4944":"code","f5699fc0":"code","660ecac0":"code","dee1d86e":"code","d015796e":"code","4a95c8ca":"code","72d9a935":"code","b34b75af":"code","faa4a5ef":"code","8928bbd6":"code","f58b777a":"code","841aff17":"code","5947d5c2":"code","b6999ffe":"code","9cf00004":"code","0f85b3ac":"code","9af761e4":"code","aa4c7a6e":"code","5c3e83da":"code","539bea0c":"code","12d93c19":"code","b6af5d8a":"code","0be68856":"code","77e5f008":"code","2c10ca3c":"code","f503d547":"code","8a761497":"code","4e0a9a77":"code","50db7cfa":"code","579f32ef":"code","bfeb6d55":"code","e2d0b06f":"code","196cde72":"code","c3751e68":"code","5a3143a3":"code","1c775bc0":"code","5125c6b8":"code","688b2291":"code","a41436b4":"markdown","ea6ddcae":"markdown","f2c17e5a":"markdown","a885971b":"markdown","b750c7e9":"markdown","41b4dac2":"markdown","e70125e9":"markdown","a72f3390":"markdown","5234518b":"markdown","efddab7b":"markdown","a8d0ec2f":"markdown","f08df203":"markdown","cbc144be":"markdown","2f690bd5":"markdown","54381415":"markdown","f6a12852":"markdown","dd74953a":"markdown","f5e3d39f":"markdown","9a9949bc":"markdown","dcdc056d":"markdown","f162f086":"markdown","e98e3375":"markdown","99008872":"markdown","78003ab7":"markdown","70640eef":"markdown"},"source":{"3a8e73d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt #visualize\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns #visualize\n\nfrom collections import Counter\n\nimport warnings # don't show warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2dd5674f":"data_fifa = pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\")","42a3ab7e":"# The columns\ndata_fifa.columns","253f5371":"# take a look at our data_fifa\ndata_fifa.head()","260db041":"# statistical summary\ndata_fifa.describe()","da590a62":"data_fifa.info() # To get a quick overview of the dataset we use the info() function.\n","17ad7904":"# we write function to take a quick look at the categorical features\ndef bar_plot(variable):\n    \"\"\"\n    input : variable ex : \"Preferred Foot\"\n    output : bar plot & value count  \n    \"\"\"\n    # get feature\n    var = data_fifa[variable]\n    #count number of categorical variable (value\/sample)\n    varValue = var.value_counts()\n\n    #visualize\n    plt.figure(figsize=(12,4))\n    plt.bar(varValue.index, varValue,color = \"green\", edgecolor = \"black\", linewidth = 2)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","4611bd4d":"# PLAYER_BODY_TYPE_25 = Player25\n# to look good on the chart, change the PLAYER_BODY_TYPE_25\ndata_fifa[\"Body Type\"].replace([\"PLAYER_BODY_TYPE_25\"],\"Player25\",inplace=True)","b8a3941b":"# we send our categorical data to the function we created above.\ncategory1 = [\"Preferred Foot\", \"Weak Foot\", \"Skill Moves\", \n             \"Body Type\", \"Work Rate\", \"Real Face\", \"Position\"]\nfor c in category1:\n    bar_plot(c) # send to function","e57e6c7b":"# We take a quick look at the categorical data we haven't visualized\ncategory2 = [\"Name\", \"Nationality\", \"Club\", \"Joined\", \"Loaned From\"]\nfor c in category2:\n    print(\"{} \\n\".format(data_fifa[c].value_counts()))","fbfa20cc":"# We visualize our numerical data with histogram\ndef plot_hist(variable):\n    \"\"\"\n    input : variable ex : \"Age\"\n    output : Hist plot  \n    \"\"\"\n    plt.figure(figsize=(9,3))\n    plt.hist(data_fifa[variable])\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist \".format(variable))\n    plt.show()","633f19b7":"# Numerical Variable\n# we visualize our numerical data to examine\nnumericVar = [\"Age\", \"Overall\", \"Potential\", \"Jersey Number\", \"Balance\", \"ShotPower\"]\nfor n in numericVar:\n    plot_hist(n)","cb5f1fae":"# Age - Overall\n# groupby : performs grouping\n# group by age and average\n# Sort by overall\ndata_fifa[[\"Age\",\"Overall\"]].groupby([\"Age\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","e52905ad":"# Nationality - Overall\ndata_fifa[[\"Nationality\",\"Overall\"]].groupby([\"Nationality\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","117ceafa":"# Preferred Foot - Overall\ndata_fifa[[\"Preferred Foot\",\"Overall\"]].groupby([\"Preferred Foot\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","0600f44e":"# Weak Foot - Overall\ndata_fifa[[\"Weak Foot\",\"Overall\"]].groupby([\"Weak Foot\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","670b4944":"# Skill Moves - Overall\ndata_fifa[[\"Skill Moves\",\"Overall\"]].groupby([\"Skill Moves\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","f5699fc0":"# Body Type - Overall\ndata_fifa[[\"Body Type\",\"Overall\"]].groupby([\"Body Type\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","660ecac0":"# Position - Overall\ndata_fifa[[\"Position\",\"Overall\"]].groupby([\"Position\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","dee1d86e":"# Height - Overall\ndata_fifa[[\"Height\",\"Overall\"]].groupby([\"Height\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","d015796e":"# Weight - Overall\ndata_fifa[[\"Weight\",\"Overall\"]].groupby([\"Weight\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","4a95c8ca":"# Balance - Overall\ndata_fifa[[\"Balance\",\"Overall\"]].groupby([\"Balance\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","72d9a935":"# ShotPower - Overall\ndata_fifa[[\"ShotPower\",\"Overall\"]].groupby([\"ShotPower\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","b34b75af":"# Penalties - Overall\ndata_fifa[[\"Penalties\",\"Overall\"]].groupby([\"Penalties\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","faa4a5ef":"# Vision - Overall\ndata_fifa[[\"Vision\",\"Overall\"]].groupby([\"Vision\"], as_index = False).mean().sort_values(by = \"Overall\",ascending = False)","8928bbd6":"# we write our function to find the outlier\ndef detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3st quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces \n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    \"\"\"\n    ## Usually at least 2 outliers in a row we drop.\n    ## There is no outlier in my data.\n    ## but I selected it as 1 here to show you the outlier drop process.\n    ## so if there is more than 1 outlier in a row it will bring them to us.\n    ## You can see that there is no outlier by making the value 2 here.\n    \"\"\"\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 1) \n    \n    return multiple_outliers","f58b777a":"# We send our data to find outlier ones\ndata_fifa.loc[detect_outliers(data_fifa,[\"Age\", \"Potential\", \"Jersey Number\", \"Balance\", \"ShotPower\"])]","841aff17":"# We extract what we find as outlier from our data\ndata_fifa = data_fifa.drop(detect_outliers(data_fifa,[\"Age\", \"Potential\", \"Jersey Number\", \"Balance\", \"ShotPower\"]),axis = 0).reset_index(drop=True)","5947d5c2":"# fetches columns with missing data in our data\ndata_fifa.columns[data_fifa.isnull().any()]","b6999ffe":"\"\"\"\nwe will not write a machine learning code at the end.\nso I'll make one example just to illustrate the missing data fill\n\"\"\"\ndata_fifa[data_fifa[\"Body Type\"].isnull()]","9cf00004":"# looking overall for null body type : Around 62 or 63\ndata_fifa.boxplot(column =\"Overall\", by = \"Body Type\")\nplt.xticks(rotation = 90)\nplt.show()","0f85b3ac":"# We see that the football players in this overall are usually lean type.(65)\ndata_fifa[data_fifa[\"Body Type\"] == \"Lean\"].Overall.mean()","9af761e4":"# and we fill in our missing data with lean body type.\ndata_fifa[\"Body Type\"] = data_fifa[\"Body Type\"].fillna(\"Lean\") ","aa4c7a6e":"# no missing data anymore\ndata_fifa[data_fifa[\"Body Type\"].isnull()]","5c3e83da":"# problem : countries(10) with the most footballers\n# Counter is a counter tool.Which country has how many players\nnewData = Counter(data_fifa[\"Nationality\"])\n# top 10 countries with most\nmost_countries = newData.most_common(10)\n\"\"\"\n  example : 'Argentina': 937\n  x = Argentina\n  y = 937\n\"\"\"\nx,y = zip(*most_countries)\nx,y = list(x),list(y)\n\n# visualize\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y) # x = Nationality, y = Footballers\nplt.xlabel('Nationality', size = 20) # x-axis name\nplt.ylabel('Footballers', size = 20 ) # y-axis name\nplt.title('10 countries with the most footballers') # title\nplt.show()","539bea0c":"# problem : Top 20 players overall\n# We get the names and overals from the data\nOverall = data_fifa[\"Overall\"]\nfootballer_name = data_fifa[\"Name\"]\n\n# We create dataframe(Name,Overall)\ndata = pd.DataFrame({'Name': footballer_name,'Overall':Overall})\n\"\"\"\ndata = { example = (messi : 94) }\n\"\"\"\nx = data.Name.head(20)  # comes in order from large to small\ny = data.Overall.head(20)\n\n# visualize\nplt.figure(figsize=(15,10))\n\"\"\"\ncubehelix_palette = This produces a colormap with linearly-decreasing (or increasing) brightness.\n(sets according to the number of data)\n\"\"\"\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x))) # x = Name, y = Overall\nplt.xticks(rotation= 90)\nplt.xlabel('Name', size = 20) # x-axis name\nplt.ylabel('Overall', size = 20 ) # y-axis name\nplt.title('Fifa19, Top 20 players overall ') # title\nplt.show()\n\n\n\n","12d93c19":"# problem : Top 15 most valuable clubs in fifa19 ?\nvalue_thousand = [] # value in the thousands(K) Ex : 575K\nvalue_million = [] # value in the millions(M) Ex : 1M\nteam_value = [] # team values\n\nteams = list(data_fifa[\"Club\"].unique())\n\nfor i in teams:\n    total_thousand = 0.0 # sum of thousand value\n    total_million = 0.0 # sum of million value\n    x = data_fifa[data_fifa[\"Club\"] == i].Value # footballer value\n    x = [str(each.replace('\u20ac','')) for each in x] # takeout(\u20ac)\n    \n    # We separate a million and a thousand\n    for team in x:\n        if team.endswith('K'): #(K) thousand\n            value_thousand.append(team)\n        else:\n            value_million.append(team) #(M) million \n    \n    # we remove K and M to convert to float\n    value_thousand = [float(each.replace('K','')) for each in value_thousand]\n    value_million = [float(each.replace('M','')) for each in value_million]\n    \n    for thousand in value_thousand: # sum(K) thousand \n        total_thousand += thousand\n       \n    for million in value_million: # sum(M) million\n        total_million += million\n    \n    # we clean it for later processes\n    value_thousand.clear()\n    value_million.clear()\n    \n    total_thousand = total_thousand * 1000 # we add (000) for transaction\n    total_million = total_million * 1000000 # add (000.000)\n    \n    total_team = total_thousand + total_million # total team value\n    team_value.append(total_team)\n    \ndata = pd.DataFrame({'Club': teams,'Value':team_value})\nnew_index = (data['Value'].sort_values(ascending=False)).index.values # Sorting from large to small\nsorted_data = data.reindex(new_index) # sorted data\n\nmost_value_club_15 = sorted_data.head(15) \n\n# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=most_value_club_15[\"Value\"],y=most_value_club_15[\"Club\"],label='Club')\n\nax.legend(loc='lower right',frameon = True) \nax.set(xlabel='Club Value(million(M))', ylabel='Club',title = \"Top 15 Most Valuable Clubs in Fifa 19\")\nplt.show()","b6af5d8a":"# the football player vision affect the value of the player ?(for 30 players)\nvision = data_fifa[\"Vision\"]\n\"\"\"\nwe need numerical values to draw the chart\nobject to float :\nvalue = object(\u20ac275K) to float(275) \ntakeout(\u20ac,M,K)\n\"\"\"\nvalue = list(data_fifa[\"Value\"]) \nvalue = [float(each.replace('\u20ac','').replace('M','').replace('K','')) for each in value]    \nname = data_fifa[\"Name\"]\n\ndata = pd.DataFrame({'Vision': vision, 'Value' : value,'Name':name})\n\nx = data.Name.head(30)\nvalue_y = data.Value.head(30) # value_y = footballer value(30 players)\nvision_y = data.Vision.head(30) # vision_y = footballer vision (30 players)\n\n\n# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x=x,y=value_y,color='black',alpha=0.9) # alpha = transparency(0) or opacity(1)\nsns.pointplot(x=x,y=vision_y,color='red',alpha=0.9) # x = x-axis, y = y-axis\nplt.text(20,100,'- Footballer Value',color='black',fontsize = 25,style = 'italic') # write on the graphic\nplt.text(20,105,'- Footballer Vision',color='red',fontsize = 25,style = 'italic')\nplt.xticks(rotation= 90) # Position of text on the x-axis\nplt.xlabel('Footballer Name',fontsize = 25,color='green') # x-axis name\nplt.ylabel('Values',fontsize = 25,color='green') # y-axis name\nplt.title('Footballer Value VS Footballer Vision',fontsize = 30,color='green') # title\nplt.grid()\n","0be68856":"\"\"\"\nif it is 1, there is positive correlation and if it is, -1 there is negative correlation.\nIf it is zero, there is no correlation between variables\n(1) --> right proportion\n(-1) --> inverse proportion\n(0) --> no relationship\n\n-- > you can examine from the table below\n\"\"\"\ndata.corr() # shows the relationship between features","77e5f008":"# relationship between player acceleration and SprintSpeed\nsprintSpeed = data_fifa[\"SprintSpeed\"]\nacceleration = data_fifa[\"Acceleration\"]\n\"\"\"\ncreate DataFrame by combining\ncolums(Acceleration,SprintSpeed)\n\"\"\"\ndata_speed = pd.DataFrame({'Acceleration':acceleration,'SprintSpeed':sprintSpeed})\n\"\"\"\nkde = plots a kernel density estimate in the margins and converts the interior into a shaded countour plot\n\"\"\"\n# Visualize\ng = sns.jointplot(data_speed.Acceleration, data_speed.SprintSpeed, kind=\"kde\", size=7) # x-axsis = data.Acceleration, y-axis = data.SprintSpeed\nplt.savefig('graph.png')\nplt.show()\n\n\n    ","2c10ca3c":"# you can change parameters of joinplot\n# our data is the same as the previous data (data)\n# we change parameters of joinplot\n\"\"\"\nwe see from this graph.\nsprinting increases when acceleration increases.\nwe understand that it is directly proportional.\n\"\"\"\n# Visualize\ng = sns.jointplot(data_speed.Acceleration, data_speed.SprintSpeed,size=5, ratio=3, color=\"r\")","f503d547":"# distribution of skill moves\n\"\"\"\n1.0 = Min\n2.0 = 25%\n3.0 = 50%\n4.0 = 75%\n5.0 = Max\n\"\"\"\nskill_moves_labels = data_fifa[\"Skill Moves\"].value_counts().index #(1.0,2.0,3.0,4.0,5.0)\nskill_moves_values = data_fifa[\"Skill Moves\"].value_counts().values # values\ncolors = ['green','blue','red','yellow','black']\n\n# visualize\n# create a circle for the center of plot\nplt.figure(figsize = (8,8))\ncircle = plt.Circle((0,0),0.3,color = \"white\") # we create a hole in the middle \nplt.pie(skill_moves_values, labels = skill_moves_labels, colors = colors)\np = plt.gcf()\np.gca().add_artist(circle) # we add the hole to the chart\nplt.title(\"Degrees of Having Skill Moves\")\nplt.legend()\nplt.show()","8a761497":"# Which foot does the footballers in fifa 19 use?\npreferred_foot_labels = data_fifa[\"Preferred Foot\"].value_counts().index # (Right,Left) \npreferred_foot_values = data_fifa[\"Preferred Foot\"].value_counts().values # (Right Values, Left Values)\nexplode = (0, 0.1) # used to separate a slice of cake\n\n# Visualize\nplt.figure(figsize = (7,7))\nplt.pie(preferred_foot_values, labels=preferred_foot_labels,explode=explode, autopct='%1.2f%%')\nplt.title('Football Players Preferred Feet',color = 'darkred',fontsize = 15)\nplt.legend()\nplt.show()\n","4e0a9a77":"# distribution of key positions in football in fifa 19\n\"\"\"\nGK : Goolkeeper\nRB : Right Back\nLB : Left Back\nCB : Center Back\nCDM : Center Defensive Midfielder\nCM : Center Midfielder\nCAM : Center Attacking Midfielder\nLW : Left Wing\nRW : Right Wing\nST : Striker\n\"\"\"\nbasic_positions = [\"GK\",\"RB\",\"LB\",\"CB\",\"CDM\",\"CM\",\"CAM\",\"LW\",\"RW\",\"ST\"]\n\ndata = data_fifa[\"Position\"].value_counts() # how much from which position\n\n#creat DataFrame, You can see our data below(2152 from ST)\n# data.index = positions of football players\ndata = pd.DataFrame(data = data, index=data.index) \n\"\"\"\nWe drop the ones other than the main positions mentioned above from our data.\n\"\"\"\nfor i in data.index: # example = input : i = GK\n    for j in basic_positions: # j = GK \n        if i == j: # GK = GK\n            there_is_data = True # we have this data in our data\n            break\n        else:\n            there_is_data = False\n    if there_is_data == False : # We extract data that is not in our data\n        data.drop(i,inplace = True) \n        \ndata_index = data.index # position name\ndata_values = data.values # how many people are playing in that position\n\n# Visualize       \nplt.figure(figsize = (10,10))\nplt.pie(data_values, labels=data_index, autopct='%1.2f%%')\nplt.title('Distribution of Basic Positions in Fifa 19',color = 'darkred',fontsize = 15)\nplt.legend()\nplt.show()","50db7cfa":"data # basic_positions","579f32ef":"\"\"\"\nI used the ready data above to show you this graph.\ndata_speed(Acceleration, SprintSpeed)\ndata_lm = I chose 150 data to make it look clearer\n\nthe line inside the graph passes through the middle of the points.\n\nwhat the line shows us ?\nsprint increases when acceleration increases.\n\"\"\"\n# Visualize\ndata_lm = data_speed.head(150) # we are using the data we created above(50)\nsns.lmplot(x=\"Acceleration\", y=\"SprintSpeed\",data=data_lm)\nplt.show()","bfeb6d55":"overall = data_fifa[\"Overall\"] # overall of the football player\nvision = data_fifa[\"Vision\"] # vision of the football player\nage = data_fifa[\"Age\"] # age of the football player\n# create data (data colums(Overall,vision,Age))\ndata_violin = pd.DataFrame({'Overall':overall,'Vision':vision, 'Age':age})\n# Visualize\n\"\"\"\npal = sns.cubehelix_palette(3, rot=-1, dark=.2,start=0.9) # color rendering palette\n\n(3) = how many colors will be \nrot = Rotations around the hue wheel over the range of the palette.\ndark = Intensity of the darkest color in the palette.\nstart = The hue at the start of the helix.\n\nwhat plot tells us ?\nthe swollen part of the violin = where data density is\n\nexample : Overall \nwhere it is most swollen =  From 65 to 70\nresult = overall in fifa19 usually between 65 and 70\n\n\"\"\"\n# Visualize\nplt.figure(figsize=(6,6))\npal = sns.cubehelix_palette(3, rot=-1, dark=.2,start=0.9)\nsns.violinplot(data=data_violin, palette=pal,linewidth=1.8)\nplt.show()","e2d0b06f":"#correlation map\nage = data_fifa[\"Age\"] # age of the football player\n\"\"\"\npreferred foot contains categorical values.\nwe need to convert these categorical values to numerical values\nRight = 1\nLeft = 0\n\"\"\"\npreferred_foot = [1 if i == \"Right\" else 0 for i in data_fifa[\"Preferred Foot\"]]\nvision = data_fifa[\"Vision\"] # vision of the football player\noverall = data_fifa[\"Overall\"] # overall of the football player\n# create dataFrame\ndata = pd.DataFrame({\"Age\":age,'Preferred Foot':preferred_foot,'Vision':vision,'Overall':overall})\n\"\"\"\nwhat the chart below shows us ?\nexample : Age - Overall \nWe see the relationship between age-overall (0.5).\ndirectly proportional = (1)\ninversely proportional = (-1)\n\"\"\"\n# Visualize\n# data.corr() = gives us the relationships between properties\nf,ax = plt.subplots(figsize=(7, 7))\nsns.heatmap(data.corr(), annot=True, linewidths=0.9,linecolor=\"black\", fmt= '.1f',ax=ax)\nplt.show()","196cde72":"# How skill level of players using right foot and left foot affects overall\n\"\"\"\nwhat the chart below shows us ?\nThe dots at the top of the chart show outliers.\n\noutlier = An outlier is a data point in a data set that is distant from all other \nobservations. A data point that lies outside the overall distribution of the dataset.\n\nQ1 --> first quarter\nQ3 --> third quarter\n\nIQR --> Q3 - Q1 (interquartile distance)\n\nlower bound --> Q1 \u2013 1.5(IQR)\nupper limit --> Q3 + 1.5(IQR)\n\noutlier --> Values outside the lower and upper limits\n\n\"\"\"\n# Visualize\nplt.figure(figsize = (9,9))\nsns.boxplot(x=\"Preferred Foot\", y=\"Overall\", hue=\"Skill Moves\", linewidth=2.2, fliersize= 3.2 ,data=data_fifa, saturation=1, palette=\"YlOrRd\")\nplt.show()","c3751e68":"\nacceleration = data_fifa[\"Acceleration\"]  # Acceleration of the football player\nsprintSpeed = data_fifa[\"SprintSpeed\"] # SprintSpeed of the football player\n\n# create data\ndata = pd.DataFrame({'Acceleration':acceleration,'SprintSpeed':sprintSpeed})\n# Visualize\nsns.pairplot(data)\nplt.show()","5a3143a3":"# Distribution of Skill Moves grades\nplt.figure(figsize = (7,7))\nsns.countplot(data_fifa[\"Skill Moves\"])\nplt.title(\"Skill Moves\",color = 'blue',fontsize=20)\nplt.show()","1c775bc0":"# weak foot handling degree\nplt.figure(figsize = (7,7))\nsns.countplot(data_fifa[\"Weak Foot\"])\nplt.title(\"Weak Foot\",color = 'blue',fontsize=15)\nplt.show()","5125c6b8":"# distribution of footballers preferred feet\nplt.figure(figsize = (7,7))\nsns.countplot(data_fifa[\"Preferred Foot\"])\nplt.title(\"Preferred Foot\",color = 'blue',fontsize=15)\nplt.show()","688b2291":"# Distribution of positions within Fifa19\nplt.figure(figsize = (8,8))\nsns.countplot(data_fifa[\"Position\"])\nplt.title(\"Position\",color = 'blue',fontsize=15)\nplt.xticks(rotation = 90)\nplt.show()","a41436b4":"<a id ='4' ><\/a>\n<h1 style = \"background:lightblue;border:0\"> Categorical Variable <\/h1>","ea6ddcae":"<a id ='17' ><\/a>\n<h2 style = \"background:lightblue;border:0\">  Violin Plot <\/h2>\n\n<p style = \"font-size:15px;text-indent:15px;\">A violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution. <\/p>\n\n**Parameters:** The description of some main parameters are given below: <br>\n* **x, y :** inputs for plotting long-form data. <br>\n* **data :** dataset for plotting. <br>\n* **inner :** representation of the datapoints in the violin interior.**{\u201cbox\u201d, \u201cquartile\u201d, \u201cpoint\u201d, \u201cstick\u201d, None}** (optional) <br>\n* **linewidht :** width of the gray lines that frame the plot elements. <br>\n* **color :** color for all of the elements. <br>\n* **palette :** colors to use for the different levels of the hue variable. <br>","f2c17e5a":"<a id ='2' ><\/a>\n<h1 style = \"background:lightblue;border:0\">Variable Description<\/h1>\n\n1. **ID** : unique id number to each footballer\n2. **Name** : name of footballer\n3. **Age** : age of footballer\n4. **Photo** : photo of footballer\n5. **Nationality** : the nationality of the player\n6. **Overall** : in-game power\n7. **Potential** : the potential of the football player\n8. **Clup**: football player's club\n9. **Value** : value of the player\n10. **Wage** : wages paid by the player\n11. **Special** : special\n12. **Preferred Foot** : foot used by the footballer(left,Right)\n13. **International Reputation** : the international reputation of the football player\n14. **Weak Foot** : weak foot of the footballer\n15. **Skill Moves** : football player's skills moves\n16. **Work Rate** : football player's work rate\n17. **Body Type** : body type of the football player\n18. **Real Face** : real face of the player(false,true)\n19. **Position** : position played by the football player\n20. **Jersey Number** : jersey number of the football player\n21. **Joined** : Joined\n22. **Loaned From** : is the football player for loaned from\n23. **Contract Valid Until** : the expiry date of the player contract\n24. **Height** : footballer's height\n25. **Weight** : footballer's weight\n26. **Crossing** : long cross pass by the footballer\n27. **Finishing** : football player finishing\n28. **HeadingAccuracy** : HeadingAccuracy\n29. **ShortPassing** : ShortPassing\n30. **Dribbling** : player's dribbling speed\n31. **Curve** : spin on the ball\n32. **LongPassing** : football player's long pass\n33. **BallControl** : football player control the ball\n34. **Acceleration** : the speed of the football player\n35. **SprintSpeed** : the sprintSpeed of the player\n36. **Agility** : the agility of the football player\n37. **Reactions** : the reaction of the footballer\n38. **Balance** : football player's balance\n39. **ShotPower** : football player's shotpower\n40. **Jumping** : the footballer's jumping capacity\n41. **Stamina** : the footballer's stamina\n42. **Strength** : the strength of the football player\n43. **LongShots** : footballer's longest shot\n44. **Aggression** : football player's aggression\n45. **Positioning** : the position of the football player in the football field\n46. **Vision** : football player vision\n47. **Penalties** : footballer's penalties\n48. **Composure** : the calmness of the football player on the field\n49. **Marking** : marking\n50. **StandingTackle** : the fight of the football player\n51. **SlidingTackle** : slide intervention\n52. **GKDiving** : diving\n53. **GKHandling** : handling\n54. **GKKicking** : kicking\n55. **GKPositioning** : Positioning\n56. **GKReflexes** : reflexes\n57. **Release Clause** : the player's release clause\n\n    **Football Player Position** : LS, ST, RS, LW, LF, CF, RF, RW, LAM, \n    CAM, RAM, LM, LCM, CM, RCM, RM, LWB, LDM, CDM, RDM, RWB, LB, LCB, BC, RCB, RB. \n\n\n\n\n\n","a885971b":"<a id ='6' ><\/a>\n<h1 style = \"background:lightblue;border:0\"> Basic Data Analysis <\/h1>\n\n* Age - Overall\n* Nationality - Overall\n* Preferred Foot - Overall\n* Weak Foot - Overall\n* Skill Moves - Overall\n* Body Type - Overall\n* Position - Overall\n* Height - Overall\n* Weight - Overall\n* Balance - Overall\n* ShotPower - Overall\n* Penalties - Overall\n* Vision - Overall","b750c7e9":"\n<h1 style = \"background:lightblue;border:0\"> Introduction <\/h1>\n\n<p style = \"font-size: 16px;text-indent:15px;\">Fifa is one of the most played console games in the world. Fifa 19 is a series of this. Fifa 19 is a soccer game. I performed Exploratory Data Analysis using the Fifa 19 data set. Later, I made visualizations using seaborn libraries. In the visualization part, firstly I wanted to show the visualization after giving information about the plot. <\/p>\n\n<h2 style = \"background:lightblue;border:0\"> Content : <\/h2>\n\n1. [Load And Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization with seaborn](#11)\n    * [Bar Plot](#12)\n    * [Point Plot](#13)\n    * [Join Plot](#14)\n    * [Pie Plot](#15)\n    * [Lm Plot](#16)\n    * [Violin Plot](#17)\n    * [Heatmap Plot](#18)\n    * [Box Plot](#19)\n    * [Pair Plot](#20)\n    * [Count Plot](#21)\n\n\n\n","41b4dac2":"<a id ='1' ><\/a>\n<h1 style = \"background:lightblue;border:0\"> Load and Check Data <\/h1>","e70125e9":" <a id ='13' ><\/a>\n <h2 style = \"background:lightblue;border:0\"> Point Plot <\/h2>\n \n <p style = \"font-size:15px;text-indent:15px;\"> A point plot represents an estimate of central tendency for a numeric variable by the position of scatter plot points and provides some indication of the uncertainty around that estimate using error bars.<\/p> <br>\n \n**Parameters:** The description of some main parameters are given below: <br>\n*  **x, y :** inputs. <br>\n*  **hue :** column name for color encoding. <br>\n*  **markers :** markers to use for each of the \u2018hue\u2019 levels. <br>\n*  **linestyles :** line styles to use for each of the \u2018hue\u2019 levels.<br>\n*  **capsize:** width of the \u2018caps\u2019 on error bars.<br>\n*  **color:** color for all the elements. <br>","a72f3390":"<a id ='10' ><\/a>\n<h2 style = \"background:lightblue;border:0\"> Fill Missing Value <\/h2>\n\n<div style = \"color:darkred\"> Example : <\/div>\n\n* Body Type has 48 missing value\n","5234518b":"<a id ='18' ><\/a>\n<h2 style = \"background:lightblue;border:0\">  Heatmap Plot <\/h2>\n\n<p style = \"font-size:15px;text-indent:15px;\">Heatmaps are used to visualize data in a matrix fashion.We often use it to see relationships between properties.<\/p>\n\n**Parameters:** The description of some main parameters are given below: <br>\n* **data :** Data to be used for visualization (**data.corr()**)\n* **annot :** If True, write the data value in each cell.\n* **fmt :** String formatting code to use when adding annotations.\n* **linewidhts :** Width of the lines that will divide each cell.\n* **linecolor :** Color of the lines that will divide each cell.\n* **ax :** Axes in which to draw the plot, otherwise use the currently-active Axes.","efddab7b":"<a id ='16' ><\/a>\n<h2 style = \"background:lightblue;border:0\">  Lm Plot <\/h2>\n\n<p style = \"font-size:15px;text-indent:15px;\">Used to visualize the relationship with regression.Show the results of a linear regression within each dataset <\/p>\n\n**Parameters:** The description of some main parameters are given below: <br>\n* **x,y :** Input variables. <br>\n* **palette :** Colors to use for the different levels of the hue variable. <br>\n* **height :** Height (in inches) of each facet. <br>\n* **data :** Our data we use to visualize. <br>","a8d0ec2f":"<a id ='21' ><\/a>\n<h2 style = \"background:lightblue;border:0\">  Count Plot <\/h2>\n\n<p style = \"font-size:15px;text-indent:15px;\">Show the counts of observations in each categorical bin using bars.\nA count plot can be thought of as a histogram across a categorical, instead of \nquantitative, variable. <\/p>\n\n**Parameters:** The description of some main parameters are given below:\n\n* **x,y :** inputs. <br>\n* **data :** Dataset for plotting. <br>\n* **orient :** Orientation of the plot (vertical or horizontal). <br>\n* **color :** Color for all of the elements, or seed for a gradient palette. <br>\n* **saturation :** Proportion of the original saturation to draw colors at. <br>\n","f08df203":"#### If you like the kernel,please upvote !","cbc144be":"<a id ='3' ><\/a>\n<h1 style = \"background:lightblue;border:0\"> Univariate Variable Analysis <\/h1>\n\n* **<font color =\"darkred\">\n Categorical Variable : <br>\n <\/font>**\n     **example :** <br>\n     Name, Nationality, Club, Preferred Foot, Weak Foot, Skill Moves, Body Type, Work Rate, Real Face, Position, Joined, Loaned From, Contract Valid Until.\n* **<font color =\"darkred\">\n  Numerical Variable : <br>\n <\/font>**\n   **example :** <br>\n   ID, Age, Overall, Potential, Jersey Number, Balance, ShotPower.","2f690bd5":"<a id ='20' ><\/a>\n<h2 style = \"background:lightblue;border:0\">  Pair Plot <\/h2>\n\n<p style = \"font-size:15px;text-indent:15px;\">Plot pairwise relationships in a dataset.\n\nBy default, this function will create a grid of Axes such that each numeric variable in data will by shared across the y-axes across a single row and the x-axes across a single column. The diagonal plots are treated differently: a univariate distribution plot is drawn to show the marginal distribution of the data in each column.\u00e7izilir.<\/p>\n\n**Parameters:** The description of some main parameters are given below: <br>\n* **data :** data to be used for graph\n* **hue :** Variable in data to map plot aspects to different colors.\n* **kind :** Kind of plot to make. **{\u2018scatter\u2019, \u2018kde\u2019, \u2018hist\u2019, \u2018reg\u2019}**\n* **markers :** Either the marker to use for all scatterplot points or a list of markers with a length the same as the number of levels in the hue variable so that differently colored points will also have different scatterplot markers.\n* **dropna :** Drop missing values from the data before plotting.\n\n\n","54381415":"<a id ='9' ><\/a>\n<h2 style = \"background:lightblue;border:0\"> Find Missing Value <\/h2>","f6a12852":"* **float64(38)** : International Reputation, Weak Foot, Skill Moves, Jersey Number, Crossing, Finishing, HeadingAccuracy, ShortPassing, Volleys, Dribbling, Curve, FKAccuracy, LongPassing, BallControl, Acceleration, SprintSpeed, Agility, Reactions, Balance, ShotPower, Jumping, Stamina, Strength, LongShots, Aggression, Interceptions, Positioning, Vision, Penalties, Composure, Marking, StandingTackle, SlidingTackle, GKDiving, GKHandling, GKKicking, GKPositioning, GKReflexes. <br> <br>       \n* **int64(5)**: ID,Age, Overall, Potential, Special, <br> <br>  \n* **object(45)** : Name, Photo, Nationality, Flag, Club, Club Logo, Value, WagePreferred Foot, Work Rate, Body Type, Real Face, Position, Joined, Loaned From,Contract Valid Until, Height, Weight, LS, ST, RS, LW, LF, CF, RF, RW, LAM, CAM, RAM, LM, LCM , CM, RCM, RM, LWB, LDM, CDM, RDM, RWB, LB, LCB, CB, RCB, RB, Release Clause                   ","dd74953a":"<a id ='7' ><\/a>\n<h1 style = \"background:lightblue;border:0\"> Outlier Detection <\/h1>\n\n**<font color = \"darkred\">Outlier :<\/font>**  An outlier is a data point in a data set that is distant from all other \nobservations. A data point that lies outside the overall distribution of the dataset.\n\n**<font color = \"darkred\">\nQ1 --> <\/font>** First quarter. <br>\n**<font color = \"darkred\">\nQ3 --> <\/font>** Third quarter. <br> <br>\n**<font color = \"darkred\">\nIQR --> <\/font>** **<font color = \"darkblue\">Q3 - Q1<\/font>** **(interquartile distance)** <br> <br>\n**<font color = \"darkred\">\nlower bound --> <\/font>** **<font color = \"darkblue\">Q1 \u2013 1.5<\/font>(IQR)** <br>\n**<font color = \"darkred\">upper limit --><\/font>** \n**<font color = \"darkblue\">Q3 + 1.5<\/font>(IQR)**<br> <br>\n**<font color = \"darkred\">\noutlier --> <\/font>** **Values outside the lower and upper limits**","f5e3d39f":"<a id ='11' ><\/a>\n<h1 style = \"background:lightblue;border:0\"> Visualization with Seaborn <\/h1>\n\n<p style = \"font-size: 16px;text-indent:15px;\">We start to make our visualizations using the seabor library.<\/p>","9a9949bc":"<a id ='15' ><\/a>\n<h2 style = \"background:lightblue;border:0\">  Pie Plot (Matplotlip) <\/h2>\n \n<p style = \"font-size:15px;text-indent:15px;\"> It is a circular graphic which is divided into slices to illustrate numerical proportion. The point of a pie chart is to show the relationship of parts out of a whole.<\/p> <br> \n \n \n **Parameters:** The description of some main parameters are given below: <br>\n*  **x :** sizes of pie slices. <br>\n*  **labels :** label for each piece of cake. <br>\n*  **colors :** the color of each piece of cake.<br>\n*  **autopct :** used to show the percentage values in the chart. <br>\n \n ","dcdc056d":"<a id ='8' ><\/a>\n<h1 style = \"background:lightblue;border:0\"> Missing Value <\/h1>\n\n* Find Missing Value\n* Fill Missing Value","f162f086":"![Fifa 19](attachment:5c642c4eae784912c0711f97.jpg)","e98e3375":"<a id ='12' ><\/a>\n  <h2 style = \"background:lightblue;border:0\"> Bar Plot <\/h2>\n  \n <p style = \"font-size:15px;text-indent:15px;\"> A bar plot represents an estimate of central tendency for a numeric variable with the height of each rectangle and provides some indication of the uncertainty around that estimate using error bars.<\/p> <br> \n  \n**Parameters:** The description of some main parameters are given below: <br>\n*   **width:** The width of the bars. <br>\n*   **color:** The colors of the bars. <br>\n*   **edgecolor:** The colors of the bar edges.<br>\n*   **linewidth:** Width of the bar edge.<br>\n*   **tick_label:** The tick labels of the bars. <br>\n*   **xerr ve yerr:** puts a dot in the middle(x,y).<br>\n*   **ecolor:** The colors of xerr and yerr.<br>\n*   **capsize:** The length of the error bar caps in points.<br> \n*   **orientation:** Ensures horizontal and vertical.<br>\n*   **hatch:** Creates shapes of the bar face **('\/', '', '|', '-', '+', 'x', 'o', 'O', '.', '*').**<br>","99008872":"<a id ='19' ><\/a>\n<h2 style = \"background:lightblue;border:0\">  Box Plot <\/h2>\n\n<p style = \"font-size:15px;text-indent:15px;\">Draw a box plot to show distributions with respect to categories.A box plot (or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable.\n\nwe usually use it to detect outliers.<\/p>\n\n**Parameters:** The description of some main parameters are given below: <br>\n* **x, y :** inputs.\n* **data :** Dataset for plotting.\n* **hue :** We say what it will be classified according to\n* **color :** Color for all of the elements, or seed for a gradient palette.\n* **palette :** different colors to use for variables\n* **saturation :** Proportion of the original saturation to draw colors at. \n* **linewidht :** Width of the gray lines that frame the plot elements.\n* **fliersize :** Size of the markers used to indicate outlier observations.\n\n","78003ab7":"<a id ='14' ><\/a>\n<h2 style = \"background:lightblue;border:0\">  Join Plot<\/h2>\n\n<p style = \"font-size:15px;text-indent:15px;\">Shows the correlation between values.<\/p> <br>\n\n**Parameters:** The description of some main parameters are given below: <br>\n*  **x, y :** variable names in data(inputs). <br>\n*  **data :** dataframe containing x and y.<br>\n*  **kind :** drawing type. **{ \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }**<br>\n*  **color :** color used for drawing.<br>\n* **dropna :** remove missing data in x and y.<br>\n* **height :** size of the figure.<br>","70640eef":"<a id ='5' ><\/a>\n<h1 style = \"background:lightblue;border:0\"> Numerical Variable<\/h1>"}}