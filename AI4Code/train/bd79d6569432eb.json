{"cell_type":{"0026c525":"code","59e7ac25":"code","9185eef9":"code","b2579907":"code","b85b5952":"code","ac04fe66":"code","2928b3c5":"code","41340aec":"code","5df70141":"code","c698af1e":"code","1a36c2c1":"code","6ecdd01f":"code","8ee525ac":"code","f0d91317":"code","ce7ab668":"code","908b9950":"code","b5bdcc62":"code","18e0714f":"code","96ebd059":"code","b7e01f36":"code","d9873106":"code","79f87e9e":"code","fc19c97e":"code","fd2691a9":"code","43c93fee":"code","1999046a":"code","5cdf86ef":"code","df7c08eb":"code","677882cd":"markdown","ac4c13e8":"markdown","6ee6acc0":"markdown","a22e95a9":"markdown","0c27b152":"markdown","30ae9f77":"markdown","c7931b70":"markdown","25683a2c":"markdown","15af0164":"markdown","5dd01dd3":"markdown","c5dbd53b":"markdown","55c9581a":"markdown","3fb3a465":"markdown","02daf579":"markdown","78d6cc27":"markdown","eabb5e87":"markdown","31b96990":"markdown","39d2191f":"markdown","dcbd7ed3":"markdown","f7dc87d8":"markdown","0e40044a":"markdown","41c37c0f":"markdown","d5975cee":"markdown"},"source":{"0026c525":"!pip install pycaret","59e7ac25":"# Load libraries\nimport numpy as np\nimport pandas as pd\n\nfrom pycaret.datasets import get_data\nfrom pycaret.classification import *","9185eef9":"# Load data in dataframes\n\ntrain = pd.read_csv('..\/input\/widsdatathon2021\/TrainingWiDS2021.csv')\ntest  = pd.read_csv('..\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv')\ntrain.shape, test.shape","b2579907":"# check data\ntrain.head()","b85b5952":"wids_clf = setup(data=train, \n                    target='diabetes_mellitus', \n                    feature_selection = True,\n                    remove_multicollinearity = True,\n                     ignore_low_variance = True,\n                     fix_imbalance = True,\n                     high_cardinality_features = ['hospital_id', 'icu_id'],\n                    bin_numeric_features = ['age','bmi','height','weight'],\n                    ignore_features = ['Unnamed: 0', 'readmission_status', 'encounter_id'], \n                    silent=True)","ac04fe66":"# lets check what different models we have\nmodels()","2928b3c5":"\nbest_model = compare_models(fold =3, sort = 'AUC')","41340aec":"# Lets create a specific model\nmodel = create_model('lightgbm', fold = 3)","5df70141":"# Plotting auc curve\nplot_model(model, plot = 'auc')","c698af1e":"# Plotting precision recall curve\nplot_model(model, plot='pr')","1a36c2c1":"# Plotting confusion matrix\nplot_model(model, plot='confusion_matrix')","6ecdd01f":"# Plotting classification report\nplot_model(model, plot='class_report')","8ee525ac":"# Plotting feature importance\nplot_model(model, plot='feature')","f0d91317":"evaluate_model(model)","ce7ab668":"interpret_model(model)","908b9950":"# Save model\n\nsave_model(model, 'model_wids')","b5bdcc62":"# load model\n# load_model('model_wids')","18e0714f":"predict_model(model)\n","96ebd059":"preds = predict_model(model, data= test)\npreds.head()","b7e01f36":"# Submission\ntest['diabetes_mellitus'] = 1 - preds['Score']\ntest[[\"encounter_id\",\"diabetes_mellitus\"]].to_csv(\"submission_lgbm.csv\",index=False)","d9873106":"# We already have one model lightgbm (model), lets create two more models\nxgboost = create_model('xgboost', fold =3)","79f87e9e":"catboost = create_model('catboost', fold =3)","fc19c97e":"# Using blend function in pycaret\n# model for lightgbm model\nblended_model1 = blend_models(estimator_list = [model,catboost], method = 'soft', fold=3)","fd2691a9":"# Check plots for blended model\n# Plotting auc curve\nplot_model(blended_model1, plot = 'auc')","43c93fee":"blended_model2 = blend_models(estimator_list = [model,catboost, xgboost], method = 'soft', fold=3)","1999046a":"# Check plots for blended model\n# Plotting auc curve\nplot_model(blended_model2, plot = 'auc')","5cdf86ef":"preds_blend1 = predict_model(blended_model1, data= test)\n# Submission\ntest['diabetes_mellitus'] = 1 - preds_blend1['Score']\ntest[[\"encounter_id\",\"diabetes_mellitus\"]].to_csv(\"submission_blend1.csv\",index=False)","df7c08eb":"preds_blend2 = predict_model(blended_model2, data= test)\n# Submission\ntest['diabetes_mellitus'] = 1 - preds_blend2['Score']\ntest[[\"encounter_id\",\"diabetes_mellitus\"]].to_csv(\"submission_blend2.csv\",index=False)","677882cd":"### Thank you.","ac4c13e8":"*I will keep updating this notebook to include more useful techniques.*","6ee6acc0":"### Model Ensembling\n\n*Blending is popular method of ensemble technique. The idea for blending is very simple. Its like taking into account the opinion of multiple models and come out with a single solution. Similar to voting.*\n\n*In blending for classification problem, we take average of predicted probabilites by each model.*\n\n*Example: preds_final = (preds_by_model1 + preds_by_model2 + preds_by_model3)\/3*","a22e95a9":"*Lets predict from unseen test data from blended model for submission*","0c27b152":"#### What is PyCaret??\n#### PyCaret is an open source, low code ML library through which we can do end to end ML experiments through very few lines of code.","30ae9f77":"*Now lets prepare a second blend using 3 model, catboost, lightgbm and xgboost.*","c7931b70":"### Preprocessing of dataset","25683a2c":"### Installation, load libraries and read data","15af0164":"### Save and load Model\n\n*Trained and tuned model can be saved as pickle file and loaded later. It basically saves the transformation pipeline and model object.*","5dd01dd3":"### Model evaluation\n\n*Instead of plotting different curves for model, we can simply use function evaluate_model to plot different curves. It internally uses plot_model.*","c5dbd53b":"*Similary, we can plot different curves for model using plot_model function.*","55c9581a":"### Predicting on test data using blended models","3fb3a465":"### Create a specific ML model\n\n*Although catboost is performing very good, but its taking so much time. Lets take lightgbm.*\n\n*Version: 5 -> Trying catboost*","02daf579":"### Model Interpretation \n\n*This returns an Interpretation plot based on train and validation set. It basically gives us SHAP values.*\n\n[Refer here: More on SHAP](https:\/\/shap.readthedocs.io\/en\/latest\/)","78d6cc27":"*Lets first combine lgbm and catboost for our first blend.*","eabb5e87":"*Methods: Soft for predicted probabilites, Hard for labels (0,1)*","31b96990":"### Model plots\n\n*Here I'm going to plot auc curve for our model with train and validation sets.*","39d2191f":"![image.png](attachment:image.png)\n\n*Image Credit: Google Images*\n\n*Kindly refer to pycaret documentation [**PyCaret Documentation**](https:\/\/pycaret.readthedocs.io\/en\/latest\/)*\n*Also, check the pycaret official tutorials [**PyCaret Tutorials**](https:\/\/pycaret.readthedocs.io\/en\/latest\/tutorials.html)*","dcbd7ed3":"### If you found this notebook useful, Kindly upvote :)","f7dc87d8":"### Comparing ML Models\n\n*Using cross validation strategy, 3 folds, sorted by AUC score.*","0e40044a":"*Objective of this notebook is to model the data quickly and do various ML operations on data with different ML algorithms. It would be very useful in start of the competition to just look at how different models are performing with respect to each and with respect to different metrices, in order to plan a long term strategy for this competition.*\n\n*I have also tested ensemble strategy with blends of different models in this notebook.*\n\n*Before starting with this notebook, I would recommend to analyze the data and get some insights. Please refer to my notebook [Statistical Analysis: Univariate and Multivariate](https:\/\/www.kaggle.com\/reverie5\/statistical-analysis-univariate-multivariate) for the detailed analysis.*","41c37c0f":"*Start by installing PyCaret*","d5975cee":"### Model Predictions\n\n*Predicting on test dataset for submission purpose.*"}}