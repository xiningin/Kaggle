{"cell_type":{"010b1fad":"code","4aba9e1a":"code","fda4dcc6":"code","477208a9":"code","33268f45":"code","2b06e6f1":"code","b9113021":"code","f36dce82":"code","105bfca9":"code","c736b652":"code","7ceb85e8":"code","4f6bbf73":"code","c5473359":"code","9702fc84":"code","61448f16":"code","f915901d":"code","f3907fd0":"code","51a6d0e0":"code","34950332":"code","022fa214":"code","25d71ca3":"code","cc701bbf":"code","dcc9834f":"code","32d85d1d":"code","6d39ded2":"code","53becc70":"code","20fe5e3e":"code","57a9d573":"code","5bb6721a":"code","86ffd0ba":"code","d9183e04":"code","eb28e3d9":"code","f07e036f":"code","ab91ed61":"code","5db49fbe":"code","1926db3c":"code","3aadc1a2":"code","c5c3c9f2":"code","d18ef3d4":"code","4b5adde2":"code","c89d8fc5":"markdown","f751bc53":"markdown","e3a60ac3":"markdown","b44a76dd":"markdown","901900d1":"markdown","38633ad6":"markdown","0f38b6c7":"markdown","dd580f52":"markdown","e3c672a7":"markdown","d667b1f2":"markdown","8d51497f":"markdown","b0ad01a1":"markdown","d5c71507":"markdown","77a97c1b":"markdown","208326d5":"markdown","1e6a97de":"markdown"},"source":{"010b1fad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4aba9e1a":"data = pd.read_csv(\"\/kaggle\/input\/heart-failure-prediction\/heart.csv\")","fda4dcc6":"data.head()","477208a9":"data.shape","33268f45":"data = data.drop_duplicates(keep='first')\ndata.shape","2b06e6f1":"from sklearn.preprocessing import LabelEncoder\ndata.head(2)","b9113021":"li = ['Sex','ChestPainType','RestingECG','ExerciseAngina','ST_Slope']\nfor i in li:\n    data[i] = LabelEncoder().fit_transform(data[i])","f36dce82":"sns.heatmap(data.corr(),annot=True,fmt ='.2f',mask = np.triu(data.corr()))","105bfca9":"import warnings\nwarnings.filterwarnings('ignore')","c736b652":"plt.figure(figsize=(15,15))\nfor i in enumerate(data.columns):\n    plt.subplot(3,4,i[0]+1)\n    sns.scatterplot(data[i[1]],data['MaxHR'])\n    ","7ceb85e8":"for i in data.columns[:-1]:\n    print(i+'\\n')\n    print(data.groupby('HeartDisease')[i].describe())","4f6bbf73":"plt.figure(figsize=(15,15))\nfor i in enumerate(data.columns):\n    plt.subplot(3,4,i[0]+1)\n    sns.boxplot(data[i[1]])\n    ","c5473359":"def remove(data):\n  Q1 = np.percentile(data, 25, interpolation = 'midpoint')\n  \n# Third quartile (Q3)\n  Q3 = np.percentile(data, 75, interpolation = 'midpoint')\n  iqr = Q3 - Q1\n  percentile25 = data.quantile(0.25)\n  percentile75 = data.quantile(0.75)\n\n  upper_limit = percentile75 + 1.5 * iqr\n  lower_limit = percentile25 - 1.5 * iqr\n  data = np.where(\n    data > upper_limit,upper_limit,\n    np.where(\n        data < lower_limit,\n        lower_limit,\n        data\n    )\n  )\n  return data\n\n#feature[feature['discount_percent'] > upper_limit]\n#feature[feature['discount_percent'] < lower_limit]\n\n","9702fc84":"data.columns","61448f16":"li =['RestingBP','Cholesterol','MaxHR','Oldpeak']\nfor i in li:\n    data[i]=remove(data[i])","f915901d":"plt.figure(figsize=(15,15))\nfor i in enumerate(data.columns):\n    plt.subplot(3,4,i[0]+1)\n    sns.boxplot(data[i[1]])\n    ","f3907fd0":"plt.figure(figsize=(15,15))\nfor i in enumerate(data.columns):\n    plt.subplot(3,4,i[0]+1)\n    sns.distplot(data[i[1]])\n    ","51a6d0e0":"feature = data.drop('HeartDisease',axis=1)\nlabel = data['HeartDisease']","34950332":"from sklearn.model_selection import train_test_split\ntrainF,testF,trainL,testL = train_test_split(feature,label,random_state=42,test_size=.2)","022fa214":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(trainF,trainL)\npred = model.predict(testF)","25d71ca3":"from sklearn.metrics import classification_report\nprint(classification_report(pred,testL))","cc701bbf":"label.value_counts()","dcc9834f":"from sklearn.preprocessing import StandardScaler ","32d85d1d":"li = ['Age','RestingBP','Cholesterol','MaxHR','Oldpeak']\nfor i in li:\n    feature[i] = StandardScaler().fit_transform(feature[[i]])","6d39ded2":"plt.figure(figsize=(15,15))\nfor i in enumerate(data.columns):\n    plt.subplot(3,4,i[0]+1)\n    sns.distplot(data[i[1]])\n    ","53becc70":"for i in [2,3,4,5]:\n    x = data['Oldpeak']**(1\/i)\n    sns.distplot(x)\n    plt.show()\n    \ndata['Oldpeak'] = data['Oldpeak']**(1\/3)","20fe5e3e":"data['HeartDisease'].value_counts()","57a9d573":"from imblearn.combine  import SMOTEENN\nos = SMOTEENN(random_state = 42)\nfeature,label = os.fit_resample(feature,label)","5bb6721a":"from sklearn.model_selection import train_test_split\ntrainF,testF,trainL,testL = train_test_split(feature,label,random_state=42,test_size=.2)","86ffd0ba":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(trainF,trainL)\npred = model.predict(testF)\nfrom sklearn.metrics import classification_report\nprint(classification_report(pred,testL))","d9183e04":"from sklearn.model_selection import GridSearchCV\n\nparams = {\n    'n_estimators':[x**2 for x in range(3,10)],\n    'n_jobs':[-1,None],\n    \"random_state\":[42,None]    \n}\ncv = GridSearchCV(model,params,cv=5)\ncv.fit(trainF,trainL)","eb28e3d9":"print(cv.best_score_)","f07e036f":"import catboost as cb","ab91ed61":"traindata =cb.Pool(trainF,trainL) \ntestdata = cb.Pool(testF,testL)","5db49fbe":"model = cb.CatBoostClassifier(random_state=42,objective= 'CrossEntropy',)","1926db3c":"model.fit(trainF,trainL)","3aadc1a2":"pred = model.predict(testF)","c5c3c9f2":"from sklearn import metrics","d18ef3d4":"model.score(testF,testL)","4b5adde2":"print(metrics.classification_report(testL,model.predict(testF)))","c89d8fc5":" This is much improver version I must say..\n \n Randomforest gives us 98% F1 Score for who had heart disease,  \n where CAT provides 99%\n \n \n Random forest gives 96% recall for who had heat disease,\n on the other hand CAT is showing 100% *","f751bc53":"### Find Correlation among Data ","e3a60ac3":"# transform *** \"Oldpeak\" *** Column ","b44a76dd":"# Splitting Data","901900d1":"# searching Do data need any kind of transformation","38633ad6":"# looking for outliers","0f38b6c7":"# Remove Outliers","dd580f52":"# visualizationS","e3c672a7":"# We have seen Data is kind of imbalanced.\n# real data provides maximum number of patients had Heatdisease","d667b1f2":"# fresh data","8d51497f":"# choosing model ,train, test, evalute","b0ad01a1":"# Isn't that geat improvement after balance 1's and 0's data?","d5c71507":"# Analysis For searching any kind of clue","77a97c1b":"> # tring new Boosting Algorithm Which is **CATBOOSTCLASSIFIER**","208326d5":"### Label encoding for changing string value to Numeric","1e6a97de":"# CrossValidation"}}