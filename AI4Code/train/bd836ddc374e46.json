{"cell_type":{"fcec5870":"code","f1fd1c61":"code","5ebd2734":"code","484045b5":"code","b649ba41":"code","f6d3ce99":"code","7f298835":"code","8bf70d9a":"code","17bdfaf5":"code","79f35ced":"code","ec6e9577":"code","61d531f2":"code","49d3310b":"code","4576dc6e":"code","6c61661d":"code","f34a92a6":"code","2bf5b00d":"code","630c5d05":"code","960f9448":"code","1ac5fc73":"code","f871a2e9":"code","33e3d824":"code","7e13877a":"code","e8e08c94":"code","1b359db1":"code","7af23938":"code","58375d51":"code","3ce86795":"code","fe33264b":"code","42b7c412":"code","24660964":"code","9a748e1c":"code","b52f9e00":"markdown","841860e9":"markdown","a47c7265":"markdown","61328f3b":"markdown","56c2b92b":"markdown","802de1f8":"markdown","2a073c4e":"markdown","88666160":"markdown","26b85921":"markdown","58b11912":"markdown","a9469251":"markdown","8560dd13":"markdown"},"source":{"fcec5870":"#importing libararies\nimport pandas as pd\nimport numpy as np \nimport tensorflow as tf\n\nfrom tensorflow import feature_column\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split","f1fd1c61":"#create dataframe\n#load dataset\n\ndf=pd.read_csv(\"diabetic_data.csv\")\ndf.head()","5ebd2734":"df.shape","484045b5":"df.dtypes","b649ba41":"df.keys()","f6d3ce99":"df.info()","7f298835":"df.describe()","8bf70d9a":"df.select_dtypes(include=['object']).shape","17bdfaf5":"for column in df.columns:\n    if df[column].dtype == object:\n        print(column,df[column][df[column]== '?'].count())","79f35ced":"df.drop(['encounter_id', 'patient_nbr', 'weight','medical_specialty', 'payer_code','admission_source_id' ], axis=1, inplace= True)","ec6e9577":"df['gender'].value_counts()","61d531f2":"# Removing 3 rows with gender values 'Unknown\/Invalid\n\ndf = df[df.gender != 'Unknown\/Invalid']","49d3310b":"#Removing rows with missing information in all 3 diagnosis\n\ndf = df[(df.diag_1 != '?') | (df.diag_2 != '?') | (df.diag_3 != '?')]","4576dc6e":"df.drop(['chlorpropamide','acetohexamide', 'tolbutamide', 'rosiglitazone', 'miglitol', 'troglitazone', 'tolazamide', 'examide', 'citoglipton',\n       'glyburide-metformin', 'glipizide-metformin','glimepiride-pioglitazone', 'metformin-rosiglitazone','metformin-pioglitazone','diag_1','diag_2','diag_3'],axis=1, inplace= True)","6c61661d":"def fn(x):\n    if x =='NO' or x=='>30':\n        return 0\n    else :\n        return 1\ndf['readmit']= df['readmitted'].map(fn)\ndf.drop(['readmitted'], axis=1, inplace= True)","f34a92a6":"df.head()","2bf5b00d":"def fun(z):\n    if z =='None' or z=='Norm':\n        return 1\n    else :\n        return 0\ndf['A1C']= df['A1Cresult'].map(fun)\ndf.drop(['A1Cresult'], axis=1, inplace= True)","630c5d05":"#Dividing age groups in to three categories 'young','mid','old\ndef gt_ag(a):\n    if a =='[0-10)' or a=='[10-20)' or a=='[20-30)':\n        return 'young'\n    elif a =='[30-40)' or a=='[40-50)' or a=='[50-60)':\n        return 'mid'\n    else:\n        return'old'\ndf['Age']= df['age'].map(gt_ag)\ndf.drop(['age'], axis=1, inplace= True)","960f9448":"df['Age'].value_counts()","1ac5fc73":"train, test = train_test_split(df, test_size=0.2)\ntrain, val = train_test_split(train, test_size=0.2)\nprint(len(train), 'train examples')\nprint(len(val), 'validation examples')\nprint(len(test), 'test examples')","f871a2e9":"labels = df.pop('readmit')","33e3d824":"# A utility method to create a tf.data dataset from a Pandas Dataframe\ndef df_to_dataset(df, shuffle=True, batch_size=32):\n  df = df.copy()\n  labels = df.pop('readmit')\n  ds = tf.data.Dataset.from_tensor_slices((dict(df), labels))\n  if shuffle:\n    ds = ds.shuffle(buffer_size=len(df))\n  ds = ds.batch(batch_size)\n  return ds","7e13877a":"batch_size = 50 # A small batch sized is used for demonstration purposes\ntrain_ds = df_to_dataset(train, batch_size=batch_size)\nval_ds = df_to_dataset(val, shuffle=False, batch_size=batch_size)\ntest_ds = df_to_dataset(test, shuffle=False, batch_size=batch_size)","e8e08c94":"for feature_batch, label_batch in train_ds.take(1):\n  print('Every feature:', list(feature_batch.keys()))\n  print('A batch of ages:', feature_batch)\n  print('A batch of targets:', label_batch )","1b359db1":"# We will use this batch to demonstrate several types of feature columns\nexample_batch = next(iter(train_ds))[0]","7af23938":"# A utility method to create a feature column\n# and to transform a batch of data\ndef demo(feature_column):\n  feature_layer = layers.DenseFeatures(feature_column)\n  print(feature_layer(example_batch).numpy())","58375d51":"##\n\nfeature_columns = []\n\nnum_lab_procedures=feature_column.numeric_column(\"num_lab_procedures\")\n#demo(num_lab_procedures)\n\n# numeric cols\nfor header in ['num_lab_procedures', 'num_medications', 'number_inpatient', 'number_diagnoses', 'number_emergency','A1C']:\n  feature_columns.append(feature_column.numeric_column(header))\n\n#categorical cols\n\ninsulin = feature_column.categorical_column_with_vocabulary_list(\n      'insulin', ['No', 'Steady','Up','Down'])\n\ninsulin = feature_column.indicator_column(insulin)\nfeature_columns.append(insulin)\n\n\nmetformin = feature_column.categorical_column_with_vocabulary_list(\n      'metformin', ['No', 'Steady','Up','Down'])\n\nmetformin = feature_column.indicator_column(metformin)\nfeature_columns.append(metformin)\n\nage = feature_column.categorical_column_with_vocabulary_list(\n      'Age', ['old', 'mid','young'])\n\nage = feature_column.indicator_column(age)\nfeature_columns.append(age)\n\n\n\n","3ce86795":"feature_layer = tf.keras.layers.DenseFeatures(feature_columns)","fe33264b":"from sklearn.preprocessing import LabelEncoder\n# creating instance of labelencoder\nlabelencoder = LabelEncoder()\n# Assigning numerical values and storing in another column\ntrain['readmit'] = labelencoder.fit_transform(train['readmit'])\ntrain['readmit'].head()\ntest['readmit'] = labelencoder.fit_transform(test['readmit'])\ntest['readmit'].head()\nval['readmit'] = labelencoder.fit_transform(val['readmit'])\nval['readmit'].head()","42b7c412":"batch_size = 32\ntrain_ds = df_to_dataset(train, batch_size=batch_size)\nval_ds = df_to_dataset(val, shuffle=False, batch_size=batch_size)\ntest_ds = df_to_dataset(test, shuffle=False, batch_size=batch_size)","24660964":"model = tf.keras.Sequential([\n \n  feature_layer,\n  layers.Dense(128, activation='relu'),\n  layers.Dense(128, activation='relu'),\n  layers.Dense(1)\n])\n\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nmodel.fit(train_ds,\n          validation_data=val_ds,\n          epochs=10)","9a748e1c":"loss, accuracy = model.evaluate(test_ds)\nprint(\" Test Accuracy\", accuracy)\nloss, accuracy = model.evaluate(val_ds)\nprint(\" Validation Accuracy\", accuracy)","b52f9e00":"# Data analysis\nAnalyzing the data ","841860e9":"# Splitting dataset into for Evaluation","a47c7265":"Dropping columns 'encounter_id', 'patient_nbr' ,'payer_code' that are unnecessary for the model\nDropping columns 'weight','medical_specialty' whose values are '?' above 90% and 40% respectively","61328f3b":"# Converting the target using LabelEncoder","56c2b92b":"Dropping all columns related to medicines except insulin,metformin,glimepiride,repaglinide,pioglitazone,acarbose,glipizide, glyburide ,nateglinide (which is widely used diabetic medicine) as there is a column \"diabetesMed\" which tells if a patient is using diabetes medicine or not","802de1f8":"# Feature Engineering","2a073c4e":"Numeric columns have no NULL values\n\nMissing information is represented by '?' in few columns of dtype 'object'\n\nCounting number of rows with missing information i.e., '?' in each column","88666160":"# Splitting the Dataset into Train,Test and Validation","26b85921":"\n# Creating feature layer and adding features ","58b11912":"# Model","a9469251":"# Accuracy","8560dd13":"# Importing dataset and libraries"}}