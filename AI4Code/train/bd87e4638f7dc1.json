{"cell_type":{"47538033":"code","b47e4fee":"code","d0d27f6a":"code","d393eb50":"code","75815fa7":"code","09fafe8b":"code","019f2c81":"code","b7d3a212":"code","1f9649ff":"code","f3429d03":"code","0cf0b6af":"code","9135a740":"code","8a562139":"code","6870a94b":"code","4f801d63":"code","47ad389c":"code","6741eda4":"code","0ac40228":"code","3d409399":"markdown","cf5252f7":"markdown","b1f18247":"markdown","1886105f":"markdown","9aaa72b7":"markdown","b1f60de0":"markdown","e321cc3c":"markdown","15ec1bfd":"markdown","f2f051d3":"markdown","0f5b04f4":"markdown","1d17dee8":"markdown","c45d443d":"markdown","dcb10427":"markdown"},"source":{"47538033":"import pandas as pd\nimport numpy as np\nimport random as rnd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.utils import shuffle\n\nimport tensorflow as tf\nfrom tensorflow import keras","b47e4fee":"if_group_family = True   # if group family size feature or not\nif_group_age = False     # if group age feature or not\nif_group_fare = False    # if group fare feature or not\nif_norm_age = True       # if normalize age feature or not\nif_norm_fare = True      # if normalize fare feature or not","d0d27f6a":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ncombine = [train_df, test_df]","d393eb50":"train_df.info()\nprint('_'*40) # add a line\ntest_df.info()\n\n# Note \n# a) Age has a lot missing values\n# b) Passenger Id and Cabin num are useless features\n# c) Sex, Embarked features need to be converted to numerics\n# d) Name cannot be directly used but some info (title) can be extraced as a new feature","75815fa7":"train_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)\ncombine = [train_df, test_df]","09fafe8b":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","019f2c81":"for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)","b7d3a212":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n    'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\n\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\n# Drop Name and Passenger ID info\ntrain_df = train_df.drop(['Name', 'PassengerId'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)\ncombine = [train_df, test_df]","1f9649ff":"# Replace missing values\nguess_ages = np.zeros((2,3))\n\nfor dataset in combine:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & \\\n                               (dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            # age_mean = guess_df.mean()\n            # age_std = guess_df.std()\n            # age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std)\n\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\n# Group age\nif if_group_age:\n    \n   for dataset in combine:    \n       dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n       dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n       dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n       dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n       dataset.loc[ dataset['Age'] > 64, 'Age']\n       train_df.head()\n \n# Normalize age\nif if_norm_age:\n    age_all=train_df['Age']\n    age_mean=age_all.mean()\n    age_std=age_all.std()\n    for dataset in combine:  \n        dataset['Age'] = dataset['Age']\/age_mean","f3429d03":"if if_group_family:\n   for dataset in combine:\n       dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n   for dataset in combine:\n       dataset['IsAlone'] = 0\n       dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n   train_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()\n   #Drop Parch, SibSp, and FamilySize features\n   train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\n   test_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\n   combine = [train_df, test_df]","0cf0b6af":"freq_port = train_df.Embarked.dropna().mode()[0]\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","9135a740":"# Missing value = median\ntest_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\n\n# Group fare\nif if_group_fare:\n   for dataset in combine:\n       dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n       dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n       dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n       dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n       dataset['Fare'] = dataset['Fare'].astype(int)\n  \n# Normalize fare\nif if_norm_fare:\n    fare_all=train_df['Fare']\n    fare_mean=fare_all.mean()\n    fare_std=fare_all.std()\n    for dataset in combine:  \n        dataset['Fare'] = dataset['Fare']\/fare_mean ","8a562139":"Y_train = train_df[\"Survived\"]\n\nX_train = train_df.drop(\"Survived\",  axis=1)\nX_sub  = test_df.drop(\"PassengerId\", axis=1)","6870a94b":"def evaluate(y_true, y_pred):\n    #logloss = log_loss(y_true, y_pred)\n    score = accuracy_score(y_true, y_pred)\n    return round(score,2)\n\ndef models_CV_train(models, X, y, X_sub, n_folds=5):\n    \n    summary = {}\n\n    skf = list(StratifiedKFold(n_folds, random_state=0).split(X, y))\n    \n    # contain predicted labels after n_fold\n    stack_train = np.zeros((X.shape[0], len(models)))\n    stack_sub = np.zeros((X_sub.shape[0], len(models))) # corresponds to X_submission\n    \n    for i, model in enumerate(models):\n    \n        print('_'*40) # add a line\n        print('Model', i+1)\n        \n        metric_avg = 0\n        \n        stack_sub_model_i = np.zeros((X_sub.shape[0], len(skf)))\n        #print('shape of stack_test_model_i',np.shape(stack_test_model_i))\n        \n        for j, (train_idx, test_idx) in enumerate(skf):\n            \n            print('Fold', j)\n            \n            # i) split data \n            X_train = np.array(X)[train_idx]\n            y_train = y[train_idx]\n            X_test = np.array(X)[test_idx]\n            y_test = y[test_idx]\n\n            # ii) train model\n            model.fit(X_train, y_train)\n             \n            # iii) make prediction on test subset    \n            y_test_pred = model.predict(X_test) \n            stack_train[test_idx, i] = y_test_pred\n            \n            # iv) evaluate model based on test subset\n            metric = evaluate(y_test, y_test_pred)\n            metric_avg += metric\n            print('one-fold metric', metric)\n            \n            # v) predict labels for submission dataset\n            y_sub_pred = model.predict(X_sub) \n            stack_sub_model_i[:, j] = y_sub_pred\n        \n        metric_avg = metric_avg \/ n_folds\n        print('n-fold average metric:', round(metric_avg,2))\n        summary[i] = metric_avg\n        \n        stack_sub[:, i] = stack_sub_model_i.mean(axis=1) # corresponds to X_submission\n\n    return stack_train, stack_sub, summary","4f801d63":"models = []\n\n# Logistic Regression \nlogreg1 = LogisticRegression(penalty='l1', solver='liblinear', C=0.43, class_weight=None)\nlogreg2 = LogisticRegression(penalty='l2', solver='liblinear', C=0.01, class_weight=None, multi_class='ovr')\n    \n# KNN\nknn1 = KNeighborsClassifier(n_neighbors=3)\nknn2 = KNeighborsClassifier(n_neighbors=6)\nknn3 = KNeighborsClassifier(n_neighbors=18)           \nknn4 = KNeighborsClassifier(n_neighbors=54)\nknn5 = KNeighborsClassifier(n_neighbors=162)\n\n# Decision Tree\ndecision_tree = DecisionTreeClassifier()\n\n# Random Forest\nrf1 = RandomForestClassifier(n_estimators=100)\nrf2 = RandomForestClassifier(criterion='gini', n_estimators=250)\nrf3 = ExtraTreesClassifier(criterion='gini', n_estimators=500)\n\nmodels += [logreg1]\nmodels += [logreg2]\nmodels += [knn1]\nmodels += [knn2]\nmodels += [knn3]\nmodels += [knn4]\nmodels += [knn5]\nmodels += [decision_tree]\nmodels += [rf1]\nmodels += [rf2]\nmodels += [rf3]\n\nnum_models = len(models)\n\nn_folds = 5\nY_train_pred, Y_sub_pred, summary = models_CV_train(models, X_train, Y_train, X_sub, n_folds)","47ad389c":"model = keras.Sequential([\n    keras.layers.Dense(32, input_dim=num_models, activation='relu'),\n    #keras.layers.Dropout(0.2),\n    keras.layers.Dense(16, activation='relu'),\n    #keras.layers.Dropout(0.2),\n    keras.layers.Dense(1, activation='sigmoid') \n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()","6741eda4":"n_epoch = 100\n\nhistory=model.fit(Y_train_pred, np.array(Y_train), epochs=n_epoch, verbose=0)\n\n# Plot loss vs epochs\nloss = history.history['loss']\nepochs = range(len(loss))\nplt.plot(epochs, loss, label='log loss')\nplt.ylim([0.1, 1.0])\nplt.grid()\nplt.legend()\nplt.show()\n\nacc = history.history['accuracy']\nplt.plot(epochs, acc, label='accuracy')\nplt.ylim([0.5, 1.0])\nplt.grid()\nplt.legend()\nplt.show()","0ac40228":"predict = model.predict(Y_sub_pred)\npredict = np.squeeze(np.array(predict))\npredict = (predict > 0.5).astype(int)\n\nprint('Writing results into csv ...')\ntest_Id = test_df[\"PassengerId\"]\ntest_Survived = pd.Series(predict.astype(int), name=\"Survived\")\nresults = pd.concat([test_Id, test_Survived],axis=1)\nresults.to_csv(\"titanic_submission.csv\",index=False)\nprint('All Done!')","3d409399":"## Step 2 Construct and train a two-layer ensemble model","cf5252f7":"### 1.1 Drop unnecessary features - \"Cabin\" and \"Ticket\"","b1f18247":"### 1.2 Convert \"Sex\" to numerical values","1886105f":"## Step 1 Preprocessing and Feature Engineering\nThis part of code is mostly based on this notebook:\nhttps:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","9aaa72b7":"## Overview\n\n* Here I provide a two-layer ensemble solution that ensembles multiple machine learning algorithms.\n* In the first layer, we build multiple simple models and stack them together.\n* In the second layer, we create a shallow neural network that ensemble the first layer models.","b1f60de0":"### Layer 1 Build and train multiple models as the 1st layer","e321cc3c":"### 1.6 Deal with \"Embarked\"","15ec1bfd":"### 1.5 Create a new feature based on \"SibSp\" and \"Parch\" - \"IsAlone\"","f2f051d3":"## Step 3 Make predicitons on the submission dataset","0f5b04f4":"### Layer 2 Build a shallow neural network that ensembles all 1st layer models\n","1d17dee8":"### 1.7 Deal with \"Fare\"","c45d443d":"### 1.4 Deal with \"Age\", which has a lot of missing values","dcb10427":"### 1.3 Extract a new feature based on \"Name\" - \"Title\""}}