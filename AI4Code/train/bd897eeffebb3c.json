{"cell_type":{"d0b6d306":"code","101aee12":"code","8cc85a5f":"code","b40c95ee":"code","0fc6879a":"code","33fca28f":"code","fdeee049":"code","8de4cd06":"code","f3d7eb2e":"code","28283a26":"code","80ecc21c":"code","c3f70757":"code","8c60aa95":"code","ff1b9ef7":"code","3b4ac531":"code","8820e66c":"code","7c361df7":"code","f113262f":"code","e250ea19":"code","f8e2074b":"code","d1f80526":"code","40fa359f":"code","5b20b43b":"code","819e0371":"code","c6f8b3ca":"code","4b834bc6":"code","879816a6":"code","9c4d6a03":"code","3bed61f7":"code","1c4b4c95":"code","3862f641":"markdown","34f76d14":"markdown","5a1f339e":"markdown","47d03f07":"markdown","addc74af":"markdown","ed18beb0":"markdown","3968254c":"markdown","7831f141":"markdown","11b8ac6c":"markdown","027f7242":"markdown","05243a44":"markdown","570e1fd7":"markdown","ee2ef766":"markdown","7f812ddf":"markdown"},"source":{"d0b6d306":"#Import Basic Libraries\nimport numpy as np \nimport pandas as pd \n\n#Data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Scaling Data\nfrom sklearn.preprocessing import MinMaxScaler\n\n#Preprocessing\nfrom sklearn.model_selection import train_test_split, cross_val_score, KFold\n\n#Model\nfrom sklearn.linear_model import LinearRegression, ElasticNet,Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\n\nimport os\nprint(os.listdir(\"..\/input\"))","101aee12":"pokemon = pd.read_csv('..\/input\/pokemon.csv')\npokemon.head(5)","8cc85a5f":"#Here First Column name is #. \npokemon = pokemon.rename(columns = {'#':\"ID\"})\npokemon.head(5)","b40c95ee":"#Read Combat\ncombat = pd.read_csv('..\/input\/combats.csv')\ncombat.head(5)","0fc6879a":"#Get Shape of two dataframes\nprint('Pokemon shape is ' + str(pokemon.shape))\nprint('Combat shape is ' + str(combat.shape))","33fca28f":"#Get Info\nprint('Pokemon info :')\npokemon.info()\nprint('\\nCombat info :')\ncombat.info()","fdeee049":"#Get Missing value\npokemon.isnull().sum()\n","8de4cd06":"combat.isnull().sum()","f3d7eb2e":"#Total Number Match of each pockemon\nFirstCombat = combat.First_pokemon.value_counts().reset_index(name = 'FirstCombat')\nSecondCombat = combat.Second_pokemon.value_counts().reset_index(name = 'SecondCombat')\nTotalCombat = pd.merge(FirstCombat, SecondCombat, how = 'left', on = 'index')\nTotalCombat['TotalMatch'] = TotalCombat['FirstCombat']+TotalCombat['SecondCombat']\n\nTotalCombat.sort_values('index').head()","28283a26":"#Match winning details\nFirstWin = combat['First_pokemon'][combat['First_pokemon'] == combat['Winner']].value_counts().reset_index(name = 'FirstWin')\nSecondWin = combat['Second_pokemon'][combat['Second_pokemon'] == combat['Winner']].value_counts().reset_index(name = 'SecondWin')\nTotalWin = pd.merge(FirstWin, SecondWin, how  = 'left', on = 'index')\nTotalWin['TotalWin'] = TotalWin['FirstWin']+ TotalWin['SecondWin']\nTotalWin.head(5)","80ecc21c":"#Here we have 3 data frame. Let's combine all\nresult = pd.merge(pokemon, TotalCombat, how = 'left', left_on= 'ID', right_on = 'index')\nresult = pd.merge(result, TotalWin, how = 'left', on = 'index')\nresult = result.drop(['index'], axis = 1)\nresult.head(10)","c3f70757":"#Winning Percentage\npd.set_option('precision', 0)\nresult['WinningPercentage'] = (result.TotalWin \/ result.TotalMatch) * 100\nresult.head(5)","8c60aa95":"#Some Pokemon don't have Type2 char. So we can replace it with null char\nresult['Type 2'].fillna('Not Applicable', inplace = True)\nresult.head(10)","ff1b9ef7":"categ = ['Type 1','Type 2','Generation','Legendary']\nconti = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed']","3b4ac531":"#Univarient Analysis\nplt.figure(figsize= (7,40))\ni = 0\nfor cat in categ:\n    plt.subplot(8,2,i+1)\n    sns.countplot(x = cat, data = result);\n    plt.xticks(rotation = 90)\n    i+=1\nfor cont in conti:\n    plt.subplot(8,2,i+1)\n    sns.distplot(result[cont])\n    i+=1\nplt.show()","8820e66c":"#Now Visulaize how char related with WinningPercentage \nplt.figure(figsize = (8,30))\ni =0\nfor cat in categ:\n    plt.subplot(8,2,i+1)    \n    sns.barplot(x = cat, y = 'WinningPercentage', data = result);\n    plt.tight_layout()\n    plt.xticks(rotation = 90)\n    i+=1\n\nfor cont in conti:\n    plt.subplot(8,2,i+1)\n    sns.scatterplot(x = 'WinningPercentage', y = cont, data = result)\n    i+=1\nplt.show()\n\n","7c361df7":"result.info()","f113262f":"#drop na values in our dataframe\nresult = result.dropna()\nresult.info()","e250ea19":"result.loc[result['Type 2'] != 'Not Applicable', 'Char'] = 'Both_Char'\nresult.loc[result['Type 2'] == 'Not Applicable', 'Char'] = 'Only_One_Char'\nresult.head(5)","f8e2074b":"pd.set_option('display.float_format', '{:.2f}'.format)\nScaleing_result = result\n\nfrom sklearn.preprocessing import StandardScaler\n\ncol_name = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','Generation','FirstWin','SecondWin','TotalWin']\nscale = StandardScaler()\nScaleing_result[col_name] = scale.fit_transform(Scaleing_result[col_name])\nScaleing_result.head(5)","d1f80526":"#Let's drop ID, Name Column\nEncoding_result = Scaleing_result.drop(['ID','Name','FirstCombat','SecondCombat','TotalMatch'],axis =1)\nEncoding_result['Legendary'] = Encoding_result['Legendary'].astype(str)\nEncoding_result = pd.get_dummies(Encoding_result, drop_first = True)\nEncoding_result.head(5)","40fa359f":"#Correlation Matrix\nplt.figure(figsize = (5,5))\nsns.heatmap(Encoding_result.corr(), cmap = 'Greens')\nplt.show()","5b20b43b":"#Split Dependent and Target Variable\nWinningPercentage = Encoding_result['WinningPercentage']\nEncoding_result.drop(['WinningPercentage'], axis =1, inplace = True)","819e0371":"#Split Dataset\nx_train, x_test, y_train, y_test = train_test_split(Encoding_result,WinningPercentage, test_size = 0.2, random_state = 10)","c6f8b3ca":"#Let's Create Model\nmodels = []\nmodels.append(('LR',LinearRegression()))\nmodels.append(('EN', ElasticNet()))\nmodels.append(('Lasso', Lasso()))\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('GB', GradientBoostingRegressor()))\nmodels.append(('Ada', AdaBoostRegressor()))","4b834bc6":"model_results = []\nnames = []\nfor name, model in models:\n    kfold = KFold(n_splits = 10, random_state = 10)\n    cv_result = cross_val_score(model, x_train, y_train, cv = kfold, scoring = 'neg_mean_squared_error')\n    model_results.append(cv_result)\n    names.append(name)\n    msg = '%s %f (%f)' % (name, cv_result.mean(), cv_result.std())\n    print(msg)","879816a6":"#Visualize our result\nplt.figure(figsize = (5,5))\nsns.boxplot(x = names, y = model_results)","9c4d6a03":"GBM = GradientBoostingRegressor()\nGBM.fit(x_train, y_train)\npred = GBM.predict(x_test)","3bed61f7":"plt.figure(figsize = (7,7))\nsns.regplot(y_test, pred)\nplt.show()","1c4b4c95":"plt.figure(figsize = (18,3))\nsns.lineplot(x=y_test.index.values, y=y_test, color = 'purple')\nsns.lineplot(x=y_test.index.values, y=pred, color = 'orange')\nplt.show()","3862f641":"## Scaling Data","34f76d14":"## Missing Value Treatment","5a1f339e":"#### Let's Compare Result","47d03f07":"## Load Libraries","addc74af":"## One Hot Encoding","ed18beb0":"## Data Visualization","3968254c":"Above graph shows Gradient Boosting gives better result. Now we can predict Winning percentage of each pokemon.","7831f141":"## Feature Engineering","11b8ac6c":"# Understand Regression model step by step\n\n### Contents\n1. Load require Libraries.\n1. Load and understand datasets.\n1. Data Visualization\n 1. Univarient Analysis\n 1. Multivarient Analysis\n1. Missing Value Treatment\n1. Feature Engineering\n1. Scaling Data\n1. One Hot Engineering\n1. Model Creation\n","027f7242":"## Loan Dataset","05243a44":"### Bivarient Analysis","570e1fd7":"### Univarient Analysis","ee2ef766":"Our model shows predicted values is very close to actual target values in test set .","7f812ddf":"## Model Creation"}}