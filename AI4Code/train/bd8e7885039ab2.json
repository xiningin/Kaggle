{"cell_type":{"d95c2917":"code","e45c7523":"code","fd37f19b":"code","ac632d1c":"code","9e9914ad":"code","db7657e1":"code","6792fc04":"code","617fc3fd":"code","efeae7cd":"code","7c10ce6c":"code","1b5be93e":"code","f71d1435":"code","b751cfb6":"code","a684a574":"code","0e668676":"code","bb293eee":"code","27307358":"code","87de5963":"code","a98ce4be":"code","00215e1d":"code","7710532f":"code","20dee325":"code","473ff0e2":"code","61dc8440":"code","b27be14c":"code","530a2c14":"code","efdc480d":"code","9ccf19ee":"markdown","f2e443e6":"markdown","eb1c5c31":"markdown","4fdc7777":"markdown","b68c21e5":"markdown","6dccb3fe":"markdown","cb0b7b06":"markdown","d23a44f7":"markdown","1edd0e64":"markdown","558dead2":"markdown","41708ab7":"markdown","6666bce4":"markdown","b316404e":"markdown","b3ecf6a8":"markdown","61091227":"markdown","23fa38ac":"markdown","4b4c3889":"markdown","02b0c5d5":"markdown","d7c11036":"markdown","b5db2110":"markdown","72244a90":"markdown","072fce6d":"markdown","cad7ca0e":"markdown"},"source":{"d95c2917":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport PIL\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential","e45c7523":"import pathlib\ndataset_url = \"https:\/\/storage.googleapis.com\/download.tensorflow.org\/example_images\/flower_photos.tgz\"\ndata_dir = tf.keras.utils.get_file('flower_photos', origin=dataset_url, untar=True)\ndata_dir = pathlib.Path(data_dir)","fd37f19b":"image_count = len(list(data_dir.glob('*\/*.jpg')))\nprint(image_count)","ac632d1c":"roses = list(data_dir.glob('roses\/*'))\nPIL.Image.open(str(roses[21]))","9e9914ad":"roses = list(data_dir.glob('roses\/*'))\nPIL.Image.open(str(roses[201]))","db7657e1":"tulips = list(data_dir.glob('tulips\/*'))\nPIL.Image.open(str(tulips[500]))","6792fc04":"batch_size = 32\nimg_height = 180\nimg_width = 180","617fc3fd":"train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n  data_dir,\n  validation_split=0.2,\n  subset=\"training\",\n  seed=123,\n  image_size=(img_height, img_width),\n  batch_size=batch_size)","efeae7cd":"val_ds = tf.keras.preprocessing.image_dataset_from_directory(\n  data_dir,\n  validation_split=0.2,\n  subset=\"validation\",\n  seed=123,\n  image_size=(img_height, img_width),\n  batch_size=batch_size)","7c10ce6c":"class_names = train_ds.class_names\nclass_names","1b5be93e":"plt.figure(figsize=(10, 10))\nfor images, labels in train_ds.take(1):\n  for i in range(9):\n    ax = plt.subplot(3, 3, i + 1)\n    plt.imshow(images[i].numpy().astype(\"uint8\"))\n    plt.title(class_names[labels[i]])\n    plt.axis(\"off\")","f71d1435":"for image_batch, labels_batch in train_ds:\n  print(image_batch.shape)\n  print(labels_batch.shape)\n  break","b751cfb6":"AUTOTUNE = tf.data.AUTOTUNE\n\ntrain_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)\nval_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)","a684a574":"normalization_layer = layers.experimental.preprocessing.Rescaling(1.\/255)","0e668676":"normalized_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))\nimage_batch, labels_batch = next(iter(normalized_ds))\nfirst_image = image_batch[0]\n# Notice the pixels values are now in `[0,1]`.\nprint(np.min(first_image), np.max(first_image))","bb293eee":"num_classes = 5\n\nmodel = Sequential([\n  layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, 3)),\n  layers.Conv2D(16, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Conv2D(32, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Conv2D(64, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Flatten(),\n  layers.Dense(128, activation='relu'),\n  layers.Dense(num_classes)\n])","27307358":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","87de5963":"model.summary()","a98ce4be":"epochs=10\nhistory = model.fit(\n  train_ds,\n  validation_data=val_ds,\n  epochs=epochs\n)","00215e1d":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(epochs)\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","7710532f":"data_augmentation = keras.Sequential(\n  [\n    layers.experimental.preprocessing.RandomFlip(\"horizontal\", \n                                                 input_shape=(img_height, \n                                                              img_width,\n                                                              3)),\n    layers.experimental.preprocessing.RandomRotation(0.1),\n    layers.experimental.preprocessing.RandomZoom(0.1),\n  ]\n)","20dee325":"plt.figure(figsize=(10, 10))\nfor images, _ in train_ds.take(1):\n  for i in range(9):\n    augmented_images = data_augmentation(images)\n    ax = plt.subplot(3, 3, i + 1)\n    plt.imshow(augmented_images[0].numpy().astype(\"uint8\"))\n    plt.axis(\"off\")","473ff0e2":"model = Sequential([\n  data_augmentation,\n  layers.experimental.preprocessing.Rescaling(1.\/255),\n  layers.Conv2D(16, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Conv2D(32, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Conv2D(64, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Dropout(0.2),\n  layers.Flatten(),\n  layers.Dense(128, activation='relu'),\n  layers.Dense(num_classes)\n])","61dc8440":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\nmodel.summary()","b27be14c":"epochs = 10\nhistory = model.fit(\n  train_ds,\n  validation_data=val_ds,\n  epochs=epochs\n)","530a2c14":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(epochs)\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","efdc480d":"sunflower_url = \"https:\/\/storage.googleapis.com\/download.tensorflow.org\/example_images\/592px-Red_sunflower.jpg\"\nsunflower_path = tf.keras.utils.get_file('Red_sunflower', origin=sunflower_url)\n\nimg = keras.preprocessing.image.load_img(\n    sunflower_path, target_size=(img_height, img_width)\n)\nimg_array = keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0) # Create a batch\n\npredictions = model.predict(img_array)\nscore = tf.nn.softmax(predictions[0])\n\nprint(\n    \"This image most likely belongs to {} with a {:.2f} percent confidence.\"\n    .format(class_names[np.argmax(score)], 100 * np.max(score))\n)","9ccf19ee":"# 6-Train the model ","f2e443e6":"# 8-Data augmentation","eb1c5c31":"As you can see from the plots, training accuracy and validation accuracy are off by large margin and the model has achieved only around 60% accuracy on the validation set.\n\nLet's look at what went wrong and try to increase the overall performance of the mode","4fdc7777":"You will implement data augmentation using the layers from tf.keras.layers.experimental.preprocessing. These can be included inside your model like other layers, and run on the GPU.","b68c21e5":"# 1- Import libraries","6dccb3fe":"### Download and explore the dataset\nThis tutorial uses a dataset of about 3,700 photos of flowers. The dataset contains 5 sub-directories, one per class:\nAfter downloading, you should now have a copy of the dataset available. There are 3,670 total images:","cb0b7b06":"Let's use 80% of the images for training, and 20% for validation.","d23a44f7":"### PS : \n* The image_batch : is a tensor of the shape (32, 180, 180, 3). This is a batch of 32 images of shape 180x180x3 \n* The label_batch : is a tensor of the shape (32,), these are corresponding labels to the 32 images.","1edd0e64":"You will train a model using these datasets by passing them to model.fit in a moment","558dead2":"# 3- Visualize the data","41708ab7":"# 2- Create a dataset","6666bce4":"The model consists of three convolution blocks with a max pool layer in each of them. There's a fully connected layer with 128 units on top of it that is activated by a relu activation function. This model has not been tuned for high accuracy, the goal of this tutorial is to show a standard approach.","b316404e":"### show some roses:","b3ecf6a8":"# 4-Create the model","61091227":"### This tutorial shows how to classify images of flowers. It creates an image classifier using a keras.Sequential model, and loads data using preprocessing.image_dataset_from_directory. You will gain practical experience with the following concepts:\n\n### This tutorial follows a basic machine learning workflow:\n\n1. Examine and understand data\n2. Build an input pipeline\n3. Build the model\n4. Train the model\n5. Test the model\n6. Improve the model and repeat the process","23fa38ac":"# 7-Visualize training results","4b4c3889":"### Visualize training results","02b0c5d5":"# 3- Standardize the data","d7c11036":"Here are the first 9 images from the training dataset.","b5db2110":"# 10-Predict on new data","72244a90":"# 9-Dropout \nAnother technique to reduce overfitting is to introduce Dropout to the network, a form of regularization.\n\nWhen you apply Dropout to a layer it randomly drops out (by setting the activation to zero) a number of output units from the layer during the training process. Dropout takes a fractional number as its input value, in the form such as 0.1, 0.2, 0.4, etc. This means dropping out 10%, 20% or 40% of the output units randomly from the applied layer.","072fce6d":"Create plots of loss and accuracy on the training and validation sets.","cad7ca0e":"# 5-Compile the model"}}