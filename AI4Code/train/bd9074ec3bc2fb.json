{"cell_type":{"e3b24e7d":"code","ee19f3e2":"code","74109350":"code","aa0c6b68":"code","50ecd8ce":"code","41b6f55d":"code","ec51a820":"code","eb00b6e1":"code","ea76befc":"code","319021fb":"code","7f1df7e4":"code","67fa377f":"code","eef8e01d":"code","4c690d32":"code","98da13d2":"code","6ea035bc":"code","9b0e1e9a":"code","e9b58c4b":"code","7f42ef2d":"code","1226b3a0":"code","f843da2f":"code","08c35fee":"code","d1c2bc66":"code","d3aad938":"code","e6a2ab75":"markdown","b0e9eee2":"markdown","5553fabd":"markdown","08acea3f":"markdown","9b9b5ebe":"markdown"},"source":{"e3b24e7d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ee19f3e2":"import scipy\nfrom scipy.stats import spearmanr\n\nimport sklearn\n\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\n#importing the data\ndata = pd.read_csv('\/kaggle\/input\/nyctaxifares\/NYCTaxiFares.csv')\ndata.head()","74109350":"data.shape","aa0c6b68":"data.info()","50ecd8ce":"#checking for empty values for all features\ndata.isnull().sum()","41b6f55d":"data['pickup_datetime'] = pd.to_datetime(data['pickup_datetime'])\n\ndata['day_of_week'] = data['pickup_datetime'].dt.weekday\n\n#day of week starts from 0-6, 0-sunday to 6-saturday in python\ndata.head()","ec51a820":"#reassigning values of day from 0-6 to 1-7 as 0 value effects the computation\ndata['day_of_week'] = data['day_of_week'] + 1\n\n#retrieving hour,month and year from datatime and adding that data in new column\ndata['hour'] = data['pickup_datetime'].dt.hour\ndata['month'] = data['pickup_datetime'].dt.month\ndata['year'] = data['pickup_datetime'].dt.year\ndata.head()","eb00b6e1":"#exploring date column values\nprint(data['hour'].unique())\nprint(data['day_of_week'].unique())\nprint(data['month'].unique())\nprint(data['year'].unique())","ea76befc":"import geopy.distance\n\ndistance_kms = []\nfor index,row in data.iterrows():\n    coords_1 = (row['pickup_latitude'],row['pickup_longitude'])\n    coords_2 = (row['dropoff_latitude'],row['dropoff_longitude'])\n    dist = geopy.distance.distance(coords_1, coords_2).km\n    distance_kms.append(dist)\n\ndata['distance_kms'] = distance_kms\ndata.head()","319021fb":"data = data.drop(['pickup_datetime','month','year','pickup_latitude','pickup_longitude','dropoff_latitude','dropoff_longitude'],axis = 1)\ndata.head()","7f1df7e4":"#plotting heatmap with corelations to identify weakly corelated values\nplt.figure(figsize=(10,10))\nsb.heatmap(data.corr(),annot=True)","67fa377f":"data.groupby(\"day_of_week\")[\"fare_amount\"].mean().sort_values().plot()\n\nplt.xlabel(\"Week\")\nplt.ylabel(\"Fare Amount Average\")\nplt.show()","eef8e01d":"sb.barplot(data=data, x = \"fare_class\", y = \"fare_amount\")\nplt.title(\"Fare Amount vs Fare Class\", fontsize = 14)\nplt.show()","4c690d32":"#splitting data for training and testing\nfrom sklearn.model_selection import train_test_split\ny = data['fare_amount'].values\nX = data.drop(columns=['fare_amount'],axis=1).values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)","98da13d2":"#performing linear regression on the trained data\nfrom sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nmodel = lin_reg.fit(X_train,y_train)\ny_pred=model.predict(X_test)","6ea035bc":"#Checking R2 value for linear regression\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","9b0e1e9a":"#calucating the root mean sqaured error for linear regression\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test,y_pred)\nrootmeansq = np.sqrt(mse)\nprint(mse)\nprint(rootmeansq)","e9b58c4b":"#performing XG Boost regression on the trained data\nimport xgboost as xg\n\nxgb_r = xg.XGBRegressor(objective ='reg:linear',n_estimators = 10, seed = 123)\nxgb_r.fit(X_train, y_train)\ny_pred = xgb_r.predict(X_test)","7f42ef2d":"#Checking R2 value for xg boost regression\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","1226b3a0":"#calucating the root mean sqaured error for xg boost regression\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test,y_pred)\nrootmeansq = np.sqrt(mse)\nprint(mse)\nprint(rootmeansq)","f843da2f":"from sklearn.model_selection import GridSearchCV\nfrom catboost import CatBoostRegressor\n\nmodel_CBR = CatBoostRegressor()\n\nparameters = {'depth': [6,8,10],'learning_rate' : [0.01, 0.05, 0.1],'iterations': [30, 50, 60]}\n\n#using Grid Search Cross Validation for hyperparameter tuning and finding the best parameters\ngrid = GridSearchCV(estimator=model_CBR, param_grid = parameters, cv = 2, n_jobs=-1)\ngrid.fit(X_train, y_train)\n\nprint(\"\\n The best parameters across ALL searched params:\\n\", grid.best_params_)","08c35fee":"model_CBR = CatBoostRegressor(depth= 10, iterations= 60, learning_rate= 0.1)\nmodel_CBR.fit(X_train,y_train)\ny_pred = model_CBR.predict(X_test)","d1c2bc66":"#Checking R2 value for xg boost regression\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","d3aad938":"#calucating the root mean sqaured error for xg boost regression\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test,y_pred)\nrootmeansq = np.sqrt(mse)\nprint(mse)\nprint(rootmeansq)","e6a2ab75":"Install catboost regressor explicitly --!pip install catboost","b0e9eee2":"exploring features and shape of dataset","5553fabd":"Dropping month and year  as all observations are of one month and one year. And dropping datatime,pickup_latitude,pickup_longitude,dropoff_latitude and dropoff_longitude columns as we have already stored required data from it into seperate columns","08acea3f":"**Catboost regressor gave the best R2 score(0.8793) and minimum RMSE score(2.594) for the given dataset**","9b9b5ebe":"Calculating distance from pickup - latitude,longitude and dropoff - latitude,longitude for all the observations\n-> Geopy packge needs to be installed seperatly \n    !pip install geopy"}}