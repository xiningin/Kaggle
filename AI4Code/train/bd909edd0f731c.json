{"cell_type":{"cd2d04de":"code","6d371ed3":"code","8b8e43ee":"code","d0aba432":"code","0250d405":"code","d109eda9":"code","a668a780":"code","1df41310":"code","f77904d0":"code","915535ce":"code","8edcdb45":"code","05a59058":"code","06b9581f":"code","a2c1d846":"code","2447bc2b":"code","db2c8e03":"code","a625645b":"code","2b054050":"code","cf08288f":"code","b829ecc5":"code","f2a25635":"code","143b4097":"code","128b3d9d":"code","78b117e0":"code","47c477c0":"code","c22ed561":"code","70337906":"code","9e40214c":"code","b7445a24":"code","07fdc055":"code","7135df4c":"code","d76daaeb":"code","2a4f61d3":"code","414c0f9d":"code","bbfda3cb":"code","2c77122e":"code","d4341611":"code","9617a220":"code","942c9f1d":"code","cb7dfca4":"code","d024ae2f":"code","4ca4a193":"code","0a11676e":"code","b2f8b668":"code","1c427841":"code","e5098b34":"code","1f2ec3e7":"markdown","35711e01":"markdown","d3bfa06c":"markdown","353dc477":"markdown","b19082bd":"markdown","1b726e60":"markdown","9e7f1a20":"markdown","d52a1e5c":"markdown","b9036185":"markdown","0b650bea":"markdown","9ea33850":"markdown","6219641f":"markdown","65d189b6":"markdown","c56b808a":"markdown","8d23a0b6":"markdown","fdf956db":"markdown","87dc1015":"markdown","9ea9408f":"markdown","7e868475":"markdown","2b21c0d3":"markdown","46af7c42":"markdown","6d73e6ee":"markdown","15b8fe9d":"markdown"},"source":{"cd2d04de":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d371ed3":"aisles = pd.read_csv('..\/input\/instacart-market-basket-analysis\/aisles.csv')\ndepts = pd.read_csv('..\/input\/instacart-market-basket-analysis\/departments.csv')\norders_prior = pd.read_csv('..\/input\/instacart-market-basket-analysis\/order_products__prior.csv')\norders_train = pd.read_csv('..\/input\/instacart-market-basket-analysis\/order_products__train.csv')\norders = pd.read_csv('..\/input\/instacart-market-basket-analysis\/orders.csv')\nproducts = pd.read_csv('..\/input\/instacart-market-basket-analysis\/products.csv')","8b8e43ee":"aisles.tail(3)","d0aba432":"depts.tail(3)","0250d405":"orders_prior.tail(3)","d109eda9":"orders_train.tail(3)","a668a780":"orders.tail(3)","1df41310":"products.tail(3)","f77904d0":"ax = orders['order_dow'].value_counts(sort=False).plot(kind='bar', figsize=(10,5), fontsize=12)\nax.set_title('Order count distribution by day of week',fontsize=16)\nax.set_xlabel('Day of week', fontsize=14)\nax.set_ylabel('No. of orders', fontsize=14)","915535ce":"ax = orders['order_hour_of_day'].value_counts(sort=False).plot(kind='bar', figsize=(10,5), fontsize=12)\nax.set_title('Order count distribution by hour of day',fontsize=16)\nax.set_xlabel('Hour of day', fontsize=14)\nax.set_ylabel('No. of orders', fontsize=14)","8edcdb45":"ax = orders['days_since_prior_order'].value_counts(sort=False).plot(kind='bar', figsize=(10,5), fontsize=12)\nax.set_title('Last order distribution',fontsize=16)\nax.set_xlabel('Days since prior order', fontsize=14)\nax.set_ylabel('Frequency', fontsize=14)","05a59058":"orders['eval_set'].value_counts()","06b9581f":"eval_set_user_counts = orders.drop_duplicates(subset=['user_id', 'eval_set'])['eval_set'].value_counts()\neval_set_user_counts","a2c1d846":"# No. of users\nlen(orders['user_id'].unique())","2447bc2b":"eval_set_user_counts['train'] + eval_set_user_counts['test']","db2c8e03":"prior_orders = orders.loc[orders['eval_set'] == 'prior']\nprior_orders['order_number'].sort_values().unique()","a625645b":"train_set = orders.loc[orders['eval_set'] == 'train']\ntest_set = orders.loc[orders['eval_set'] == 'test']","2b054050":"train_set['order_number'].sort_values().unique()","cf08288f":"test_set['order_number'].sort_values().unique()","b829ecc5":"ax = orders['days_since_prior_order'].value_counts(sort=False).plot(kind='bar', figsize=(10,5), fontsize=12)\nax.set_title('Days since prior order distribution',fontsize=16)\nax.set_xlabel('Days since prior order', fontsize=14)\nax.set_ylabel('No. of orders', fontsize=14)","f2a25635":"products.shape","143b4097":"ax = orders_prior.groupby('order_id')['add_to_cart_order'].max().value_counts().head(30).plot(kind='bar', figsize=(16,8), fontsize=10)\nax.set_title('Products per order',fontsize=16)\nax.set_xlabel('No. of products', fontsize=14)\nax.set_ylabel('No. of orders with that many products', fontsize=14)","128b3d9d":"product_details = pd.merge(products, aisles, on=['aisle_id'], how='inner')\nproduct_details = pd.merge(product_details, depts, on=['department_id'], how='inner')\nproduct_details = product_details.drop(columns=['aisle_id', 'department_id'])\nproduct_details.tail()","78b117e0":"order_details = pd.merge(orders_prior, product_details, on=['product_id'], how='inner').drop(columns=['product_id'])\norder_details = pd.merge(order_details, orders, on=['order_id'], how='inner')\norder_details.tail()","47c477c0":"len(order_details['department'].unique())","c22ed561":"plt.figure(figsize=(20,15))\ntemp = order_details['department'].value_counts()\nlabels = (np.array(temp.index))\nsizes = (np.array((temp \/ temp.sum())*100))\nplt.pie(sizes, labels=labels, autopct='%1.1f%%')\nplt.title(\"All departments distribution\", fontsize=10)\nplt.show()\ntemp=None\nsizes=None","70337906":"import plotly.express as px\nfig = px.treemap(product_details.groupby(['department', 'aisle']).agg({'product_name':'count'}).reset_index(), path=['department', 'aisle'], values='product_name')\nfig.show()","9e40214c":"len(order_details['aisle'].unique())","b7445a24":"ax = order_details['aisle'].value_counts(sort=True).head(30).plot(kind='bar', figsize=(16,8), fontsize=10)\nax.set_title('30 most popular aisles',fontsize=16)\nax.set_xlabel('Aisle name', fontsize=14)\nax.set_ylabel('No. of orders from this aisle', fontsize=14)","07fdc055":"len(order_details['product_name'].unique())","7135df4c":"ax = order_details['product_name'].value_counts(sort=True).head(30).plot(kind='bar', figsize=(16,8), fontsize=10)\nax.set_title('30 most popular products',fontsize=16)\nax.set_xlabel('Product name', fontsize=14)\nax.set_ylabel('No. of times ordered', fontsize=14)","d76daaeb":"# prodcts ordered by user 1\norder_details.loc[order_details['user_id'] == 1]['product_name'].value_counts(sort=True)\n","2a4f61d3":"ax = order_details.loc[order_details['reordered'] == 1]['product_name'].value_counts(sort=True).head(30).plot(kind='bar', figsize=(16,8), fontsize=10)\nax.set_title('Most reordered products',fontsize=16)\nax.set_xlabel('Product', fontsize=14)\nax.set_ylabel('No. of times reordered', fontsize=14)","414c0f9d":"per = (orders_prior['reordered'].sum()\/orders_prior.shape[0]).round(3)\nf'The percentage of total reordered products in the prior orders set is {per*100} %'","bbfda3cb":"grouped = orders_prior.groupby('order_id')['reordered'].sum().reset_index()\nreorders = grouped.loc[grouped['reordered'] > 0]\nper = round((reorders.shape[0]\/grouped.shape[0]), 3)\nf'The percentage of orders in the prior orders set with reordered items is {per*100} %'","2c77122e":"len(order_details['user_id'].unique())","d4341611":"order_details['department'].unique().tolist()","9617a220":"fig = px.treemap(order_details.groupby(['department', 'aisle']).agg({'product_name':'count'}).reset_index(), path=['department', 'aisle'], values='product_name')\nfig.show()","942c9f1d":"personal_care_dept = order_details.loc[order_details['department'] == 'personal care']","cb7dfca4":"fig = px.treemap(personal_care_dept.groupby(['aisle']).agg({'product_name':'count'}).reset_index(), path=['aisle'], values='product_name')\nfig.show()","d024ae2f":"# Possible lower bound for female customers\nlen(personal_care_dept.loc[personal_care_dept['aisle'] == 'feminine care']['user_id'].unique())","4ca4a193":"# order_details.loc[order_details['department'] == 'babies']['product_name'].unique().tolist()","0a11676e":"len(order_details.loc[order_details['department'] == 'babies']['user_id'].unique())","b2f8b668":"# Older customers\nlen(personal_care_dept.loc[personal_care_dept['aisle'] == 'muscles joints pain relief']['user_id'].unique())","1c427841":"len(order_details.loc[order_details['department'] == 'pets']['user_id'].unique())","e5098b34":"len(personal_care_dept.loc[personal_care_dept['aisle'] == 'protein meal replacements']['user_id'].unique())","1f2ec3e7":"Treemaps of departments. The sizes indicate the sales.","35711e01":"Let's look at the reorder trends of products","d3bfa06c":"The products contained in an order are present in orders_prior and orders_train. My understanding after reading https:\/\/tech.instacart.com\/3-million-instacart-orders-open-sourced-d40d29ead6f2 is that since the goal is to predict the products in an order, the last order of a user is separated out from the previous orders. These previous orders are in orders_prior. orders_train is used as training data for the model. There are also some orders left out which can be used as a test set for predictions. This test test can be fetched from the main orders df since it contains the eval_set column.","353dc477":"Let's start by looking at each of the inputs: their contents and sizes.","b19082bd":"Orders is clearly the most important of the inputs and contains the most information to digest. It has 3421083 rows and 7 columns. Let's look at it in more detail.","1b726e60":"Let's try to validate some assumptions about customers using the given data. First let's look at departments. ","9e7f1a20":"# Hypothesis Generation\n\nLet's try to cluster our pool of customers with the data we have available. Note that these could very well be entirely off the mark.","d52a1e5c":"The goal here is to predict which previously purchased products will be in a user\u2019s next order.","b9036185":"We see that most of the customers order 7 and 30 days from their last order. A simple and possibly accurate way to interpret this distribution is to say that most people order groceries once a week or once a month in bulk.","0b650bea":"# Products\nNow let's look at products","9ea33850":"# Orders","6219641f":"Customers with pets","65d189b6":"Health conscious customers","c56b808a":"This is an expected distribution. Most of the orders are in the daytime while ordering at night is still possible since Instacart is an online service.","8d23a0b6":"From the above snippets, we see that of the total 206209 users, their last orders have been split into train and test eval_sets","fdf956db":"Male and female count.","87dc1015":"Age of customers","9ea9408f":"It's not mentioned explicitly, but I assumed 0 to mean Sunday, 1 Monday and so on. I expected the number of orders to be highest on weekends, but judging from the plot above, I'm confused if the orders are highest on Sunday and Monday (since it is online ordering) or if 0 refers to Saturday in this case. I have to check further on this.","7e868475":"# Reorder data\n\nThe information about previous reorders could be very useful for predicting the next order of a customer. So let's look at that more closely now.","2b21c0d3":"Treemap of departments and aisles in them. The sizes indicate number of products in each.","46af7c42":"# Overview","6d73e6ee":"No surprises here","15b8fe9d":"Customers with babies"}}