{"cell_type":{"42012f7a":"code","f5e6cb5c":"code","58c55a95":"code","c43b1be9":"code","987cebbe":"code","3601323d":"code","9ebec270":"code","5e2b564e":"code","247bcdcc":"code","82004de3":"code","ad0c28e6":"code","8ba9a923":"code","bf4af656":"code","f3aa6dc6":"code","baec272e":"code","76e17b32":"code","fc5cec46":"code","cca586ca":"code","98164f63":"code","f9245171":"code","4662828c":"code","b762e54d":"code","8b543141":"code","cc99b426":"code","59ae8932":"code","769b3d2b":"code","28b0ff0b":"code","f0c65db5":"code","988f6be4":"code","29749d74":"code","adbd5f12":"code","be58ddd6":"code","0cbfc2bc":"code","c8b2436d":"code","510bcc50":"code","226c2fe7":"code","d150d954":"code","c4ce9e20":"code","b99c05a0":"code","95a86ffc":"code","13484938":"code","3fc3ef63":"code","f7ae8c2d":"code","5216c7d2":"code","34a3ecb3":"code","187813c2":"code","3b16eb4c":"code","825c98a6":"code","b3dba2a9":"code","183fcbae":"code","caf1eb20":"code","b64147eb":"code","d95c80a7":"code","080c26fd":"code","c0cde2a0":"code","01b282ca":"code","e4ba9adb":"code","20db33e3":"code","ac251ebc":"code","9be376b9":"code","7bdcf5ff":"code","31a03a6e":"code","827446cd":"code","3eced205":"code","8ac0b3bf":"code","b105ddf0":"code","7270a28b":"code","951b0ad0":"code","e4c8bd4e":"code","4e32d65d":"code","00da100b":"code","2e614338":"code","007e89cf":"code","f8dd3251":"code","a41e1a08":"code","d1c21597":"code","7552f3d1":"code","3164cda0":"code","60310088":"code","b750e6cf":"code","400947f8":"code","71ffbbce":"code","75621ae4":"code","82bd9678":"code","1d5b125d":"code","5989831d":"code","8b52af9e":"code","a5e0d70f":"code","9a94e835":"code","d726cfb5":"code","c07159ee":"code","0ada6244":"code","64f621dd":"code","3d4e89e5":"code","c7c4ee2d":"code","c39665f9":"code","356002eb":"code","f9970372":"code","2cc69a7a":"code","c0607e56":"code","07b72f31":"code","9261efc0":"code","afd1b682":"code","e9bf43b4":"code","db132b2e":"code","d0324bf0":"code","be6dd788":"code","0d1c52c4":"code","0b4dd522":"code","fa23e407":"code","49677a18":"code","854e9fba":"code","5e78bd3f":"code","9b341c79":"code","aeccc9eb":"code","7908ac37":"code","3e4f0b94":"code","7c28d415":"code","019b1841":"code","66f8fd7e":"code","f7059eee":"code","cbcf0e68":"code","4ab387f0":"code","851e2b4c":"code","6afe9ad2":"markdown","86926178":"markdown","0ad40f5a":"markdown","a0894bb9":"markdown","5829640a":"markdown","12f53189":"markdown","a8f6e1e0":"markdown","9762e193":"markdown","730b4953":"markdown","3f4e9ab1":"markdown","30e520df":"markdown","703e7101":"markdown","8c44cf34":"markdown","8d64e386":"markdown","f8018593":"markdown","4d81bee1":"markdown","30f62642":"markdown","469b9a22":"markdown","36aede99":"markdown","15a3cb8c":"markdown","9ae3aca0":"markdown","e3095a0c":"markdown","ac286d17":"markdown","0b6b8a78":"markdown","9a00a50c":"markdown","789e4f51":"markdown","46f5b11a":"markdown","94872c5c":"markdown","700cc9ce":"markdown","71d249f0":"markdown","b1fef906":"markdown","7b7e4d69":"markdown","2d85ad66":"markdown","44e19dc7":"markdown","c576e79a":"markdown","ddcaf5fd":"markdown","1dce1063":"markdown","6bbd7f38":"markdown","1e0daf46":"markdown","0c4e77da":"markdown","a3204980":"markdown","ab8ab9ef":"markdown","8b92b519":"markdown","5fb3ee1f":"markdown","3a5a81f7":"markdown","2fd86f2b":"markdown","e61f7fa9":"markdown","e525f7a3":"markdown","189d621c":"markdown","d864b24d":"markdown","909c5a53":"markdown","0dfdc0c3":"markdown","acb4ef66":"markdown","ff976ce5":"markdown","8b0b030f":"markdown","ef76532b":"markdown","45bc355d":"markdown","fdf50f11":"markdown","affbf090":"markdown","43514607":"markdown","14ef958f":"markdown","ae5435fa":"markdown","419ad5ba":"markdown"},"source":{"42012f7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f5e6cb5c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings \nimport os\n\nwarnings.filterwarnings('ignore')\n\nSEED = 1234\nFIG_SIZE = (10, 7)","58c55a95":"DIR = '\/kaggle\/input\/kakr-4th-competition'","c43b1be9":"train = pd.read_csv(os.path.join(DIR, 'train.csv'))\ntest = pd.read_csv(os.path.join(DIR, 'test.csv'))","987cebbe":"print(train.shape, test.shape)","3601323d":"train.head()","9ebec270":"test.head()","5e2b564e":"train.isnull().sum()","247bcdcc":"test.isnull().sum()","82004de3":"train.info()","ad0c28e6":"test.info()","8ba9a923":"train['income'].value_counts()","bf4af656":"train['income'] = train['income'].apply(lambda x: 0 if x == '<=50K' else 1)","f3aa6dc6":"train['income'].value_counts()","baec272e":"all_data = pd.concat([train, test], sort=False)","76e17b32":"all_data['workclass'].value_counts()","fc5cec46":"all_data.groupby('workclass')['income'].mean().sort_values().plot(kind='bar', figsize=FIG_SIZE)","cca586ca":"workclass_other = ['Without-pay', 'Never-worked']\nall_data['workclass'] = all_data['workclass'].apply(lambda x: 'Other' if x in workclass_other else x)","98164f63":"all_data['workclass'].value_counts()","f9245171":"df1 = all_data.loc[all_data['income'] == 0, 'age']\ndf2 = all_data.loc[all_data['income'] == 1, 'age']\n\nplt.figure(figsize=FIG_SIZE)\nsns.distplot(df1, kde=True, rug=True, hist=False, color='blue')\nsns.distplot(df2, kde=True, rug=True, hist=False, color='red')","4662828c":"df1 = all_data.loc[all_data['income'] == 0, 'fnlwgt']\ndf2 = all_data.loc[all_data['income'] == 1, 'fnlwgt']\n\nplt.figure(figsize=FIG_SIZE)\nsns.distplot(df1, kde=True, rug=True, hist=False, color='blue')\nsns.distplot(df2, kde=True, rug=True, hist=False, color='red')","b762e54d":"g = sns.FacetGrid(all_data, col=\"income\", height=5)\ng.map(sns.distplot, 'fnlwgt')","8b543141":"all_data['fnlwgt_log'] = np.log(all_data['fnlwgt'])","cc99b426":"all_data['education'].value_counts()","59ae8932":"all_data['education_num'].value_counts()","769b3d2b":"all_data.loc[all_data['education'] == 'Preschool', 'income'].sum()","28b0ff0b":"all_data.groupby(['education'])['income'].agg(['mean', 'count']).sort_values('mean')","f0c65db5":"education_map = {\n    'Preschool': 'level_0', \n    '1st-4th': 'level_1', \n    '5th-6th': 'level_1', \n    '7th-8th': 'level_2', \n    '9th': 'level_2', \n    '10th': 'level_3', \n    '11th': 'level_3', \n    '12th': 'level_3', \n    'HS-grad': 'level_4', \n    'Some-college': 'level_5', \n    'Assoc-acdm': 'level_6', \n    'Assoc-voc': 'level_6', \n    'Bachelors': 'level_7', \n    'Masters': 'level_8', \n    'Prof-school': 'level_9', \n    'Doctorate': 'level_9',\n}","988f6be4":"all_data['education'] = all_data['education'].map(education_map)","29749d74":"all_data['education'].value_counts()","adbd5f12":"all_data.pivot_table(index='education', values=['income']).sort_values('income').plot(kind='bar', figsize=FIG_SIZE)","be58ddd6":"all_data = all_data.drop('education_num', 1)","0cbfc2bc":"all_data.columns","c8b2436d":"all_data['marital_status'].value_counts()","510bcc50":"all_data.pivot_table(index='marital_status', values='income', aggfunc=['mean', 'count'])#.sort_values('income')","226c2fe7":"all_data.loc[all_data['marital_status'] == 'Married-AF-spouse', 'marital_status'] = 'Married-civ-spouse'","d150d954":"all_data['occupation'].value_counts()","c4ce9e20":"all_data.groupby('occupation')['income'].mean().sort_values().plot(kind='bar', figsize=FIG_SIZE)","b99c05a0":"all_data.loc[train['occupation'].isin(['Armed-Forces', 'Priv-house-serv']), 'income'].value_counts()","95a86ffc":"all_data.loc[all_data['occupation'].isin(['Armed-Forces', 'Priv-house-serv']), 'occupation'] = 'Priv-house-serv'","13484938":"all_data['occupation'].value_counts()","3fc3ef63":"all_data['relationship'].value_counts()","f7ae8c2d":"all_data.groupby('relationship')['income'].mean().plot(kind='bar', figsize=FIG_SIZE)","5216c7d2":"all_data['race'].value_counts()","34a3ecb3":"all_data.groupby('race')['income'].mean().plot(kind='bar', figsize=FIG_SIZE)","187813c2":"all_data['sex'].value_counts()","3b16eb4c":"all_data.groupby('sex')['income'].mean().plot(kind='bar', figsize=FIG_SIZE)","825c98a6":"plt.figure(figsize=(12, 9))\nsns.distplot(all_data.loc[train['capital_gain'] > 0, 'capital_gain'])","b3dba2a9":"g = sns.FacetGrid(all_data.loc[all_data['capital_gain']> 0], col=\"income\", height=7, aspect=1.5)\ng.map(sns.distplot, 'capital_gain')","183fcbae":"fig, axes = plt.subplots(1, 2)\nfig.set_size_inches(20, 8)\n\ndf1 = train.loc[(train['income'] == 0) & (train['capital_gain'] > 0), 'capital_gain'].value_counts().sort_index()\ndf1.plot(kind='bar', ax=axes[0])\n\ndf1 = train.loc[(train['income'] == 1) & (train['capital_gain'] > 0), 'capital_gain'].value_counts().sort_index()\ndf1.plot(kind='bar', ax=axes[1])\n\nplt.tight_layout()\nplt.show()","caf1eb20":"fig, axes = plt.subplots(1, 2)\nfig.set_size_inches(20, 8)\n\ndf1 = train.loc[(train['income'] == 0) & (train['capital_loss'] > 0), 'capital_loss'].value_counts().sort_index()\ndf1.plot(kind='bar', ax=axes[0])\n\ndf1 = train.loc[(train['income'] == 1) & (train['capital_loss'] > 0), 'capital_loss'].value_counts().sort_index()\ndf1.plot(kind='bar', ax=axes[1])\n\nplt.tight_layout()\nplt.show()","b64147eb":"all_data['capital_net'] = all_data['capital_gain'] - all_data['capital_loss']\ntrain['capital_net'] = train['capital_gain'] - train['capital_loss']\ntest['capital_net'] = test['capital_gain'] - test['capital_loss']","d95c80a7":"plt.figure(figsize=(16, 9))\nplt.subplot(1, 2, 1)\nsns.distplot(train.loc[ (train['capital_net'] > 0) & (train['income'] == 1), 'capital_net'])\n\nplt.subplot(1, 2, 2)\nsns.distplot(train.loc[ (train['capital_net'] > 0) & (train['income'] == 0), 'capital_net'])","080c26fd":"fig, axes = plt.subplots(1, 2)\nfig.set_size_inches(20, 8)\n\ndf1 = all_data.loc[(all_data['income'] == 0) & (all_data['capital_net'] > 0), 'capital_net'].value_counts().sort_index()\ndf1.plot(kind='bar', ax=axes[0])\n\ndf2 = all_data.loc[(all_data['income'] == 1) & (all_data['capital_net'] > 0), 'capital_net'].value_counts().sort_index()\ndf2.plot(kind='bar', ax=axes[1])\n\nplt.tight_layout()\nplt.show()","c0cde2a0":"pos_key = all_data.loc[(all_data['income'] == 1) & (all_data['capital_net'] > 0), 'capital_net'].value_counts().sort_index().keys().tolist()\nall_key = all_data.loc[(all_data['income'] == 1) & (all_data['capital_net'] > 0), 'capital_net'].value_counts().sort_index().keys().tolist()\nall_key.extend(all_data.loc[(all_data['income'] == 0) & (all_data['capital_net'] > 0), 'capital_net'].value_counts().sort_index().keys().tolist())\nall_key[:5]","01b282ca":"df1 = all_data.loc[(all_data['income'] == 0) & (all_data['capital_net'].isin(pos_key)), 'capital_net'].value_counts().sort_index()\ndf1.plot(kind='bar')","e4ba9adb":"pos_key = all_data.loc[(all_data['income'] == 1) & (all_data['capital_net'] > 0), 'capital_net'].value_counts().sort_index().keys().tolist()\nneg_key = all_data.loc[(all_data['income'] == 0) & (all_data['capital_net'] > 0), 'capital_net'].value_counts().sort_index().keys().tolist()","20db33e3":"capital_net_pos_key = [key for key in pos_key if key not in neg_key]\ncapital_net_neg_key = [key for key in neg_key if key not in pos_key]","ac251ebc":"all_data['capital_net_pos_key'] = all_data['capital_net'].apply(lambda x: x in capital_net_pos_key)\nall_data['capital_net_neg_key'] = all_data['capital_net'].apply(lambda x: x in capital_net_neg_key)","9be376b9":"all_data['hours_per_week'].value_counts()","7bdcf5ff":"fig, axes = plt.subplots(1, 2)\nfig.set_size_inches(20, 8)\n\ndf1 = all_data.loc[(all_data['income'] == 0), 'hours_per_week'].value_counts().sort_index()\ndf1.plot(kind='bar', ax=axes[0])\n\ndf2 = all_data.loc[(all_data['income'] == 1), 'hours_per_week'].value_counts().sort_index()\ndf2.plot(kind='bar', ax=axes[1])\n\nplt.tight_layout()\nplt.show()","31a03a6e":"train['native_country'].value_counts().shape, test['native_country'].value_counts().shape","827446cd":"all_data['native_country'].value_counts()","3eced205":"all_data.groupby('native_country')['income'].mean().reset_index()","8ac0b3bf":"income_01 = ['Jamaica',\n 'Haiti',\n 'Puerto-Rico',\n 'Laos',\n 'Thailand',\n 'Ecuador',]\n\nincome_02 = ['Outlying-US(Guam-USVI-etc)',\n 'Honduras',\n 'Columbia',\n 'Dominican-Republic',\n 'Mexico',\n 'Guatemala',\n 'Portugal',\n 'Trinadad&Tobago',\n 'Nicaragua',\n 'Peru',\n 'Vietnam',\n 'El-Salvador',]\n\nincome_03 = ['Poland',\n 'Ireland',\n 'South',\n 'China',]\n\nincome_04 = [\n    'United-States',\n]\nincome_05 = [\n 'Greece',\n 'Scotland',\n 'Cuba',\n 'Hungary',\n 'Hong',\n 'Holand-Netherlands',\n]\nincome_06 = [\n 'Philippines',\n 'Canada',\n]\nincome_07 = [\n 'England',\n 'Germany',\n]\n\nincome_08 = [\n 'Italy',\n 'India',\n 'Japan',\n 'France',\n 'Yugoslavia',\n 'Cambodia',\n]\n\nincome_09 = [\n 'Taiwan',\n 'Iran',\n]\n\nincome_other=['?', ]","b105ddf0":"def convert_country(x):\n    if x in income_01:\n        return 'income_01'\n    elif x in income_02:\n        return 'income_02'\n    elif x in income_03:\n        return 'income_03'\n    elif x in income_04:\n        return 'income_04'\n    elif x in income_05:\n        return 'income_05'\n    elif x in income_06:\n        return 'income_06'\n    elif x in income_07:\n        return 'income_07'\n    elif x in income_08:\n        return 'income_08'\n    elif x in income_09:\n        return 'income_09'\n    else:\n        return 'income_other'","7270a28b":"all_data['country_bin'] = all_data['native_country'].apply(convert_country)","951b0ad0":"all_data['country_bin'].value_counts()","e4c8bd4e":"all_data.columns","4e32d65d":"features = [\n#     'id', \n    'age', \n    'workclass', \n#     'fnlwgt', \n    'fnlwgt_log', \n    'education', \n    'marital_status',\n    'occupation',\n    'relationship', \n    'race',\n    'sex',\n    'capital_gain',\n    'capital_loss', \n    'hours_per_week',\n    'native_country',\n#     'income',\n#     'capital_net', capital_gain\uacfc corr\uc774 \ucee4\uc11c \uc81c\uac70\n    'capital_net_pos_key',\n    'capital_net_neg_key',\n    'country_bin',\n]","00da100b":"label = [\n    'income'\n]","2e614338":"all_data.info()","007e89cf":"plt.figure(figsize=(12, 12))\nsns.heatmap(abs(all_data.corr()), annot=True)","f8dd3251":"all_data_dummies = pd.get_dummies(all_data[features + label])\nall_data_dummies.head()","a41e1a08":"train_features = all_data_dummies.drop('income', 1).iloc[:len(train)]\ntest_features = all_data_dummies.drop('income', 1).iloc[len(train):]","d1c21597":"train_label = train[label]","7552f3d1":"train_features.shape, test_features.shape","3164cda0":"from sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import precision_score, recall_score, classification_report, f1_score, confusion_matrix\nfrom sklearn.metrics import log_loss\nfrom tqdm import tqdm_notebook\nimport lightgbm as lgbm","60310088":"x_train, x_valid, y_train, y_valid = train_test_split(train_features, train_label, stratify=train_label, test_size=0.2, random_state=SEED)","b750e6cf":"NUM_BOOST_ROUND = 10000\nN_SPLITS = 5\n\nlgbm_param = {\n    'objective': 'binary',\n    'boosting_type':'gbdt',\n    'colsample_bytree':1.0,\n    'importance_type':'split',\n    'learning_rate':0.1,\n    'min_child_samples':20,\n    'min_child_weight':0.001,\n    'min_split_gain':0,\n    'n_estimators':10000,\n    'num_leaves':40,\n    'random_state':SEED,\n    'early_stopping_rounds': 200,\n    'reg_alpha':0.6,\n    'reg_lambda':0.5,\n    'subsample':1.0,\n    'subsample_for_bin':200000,\n    'subsample_freq':0, \n    'n_jobs':-1, \n}","400947f8":"dtrain = lgbm.Dataset(x_train, y_train)\ndvalid = lgbm.Dataset(x_valid, y_valid)","71ffbbce":"model = lgbm.train(lgbm_param, dtrain, NUM_BOOST_ROUND, \n                   valid_sets=(dtrain, dvalid), \n                   valid_names=('train', 'valid'), \n                   verbose_eval=100,\n                  )","75621ae4":"threshold = 0.5\nvalid_prediction = model.predict(x_valid)\nvalid_prediction[valid_prediction > threshold] = 1\nvalid_prediction[valid_prediction <= threshold] = 0\nprint(classification_report(y_valid, valid_prediction))","82bd9678":"f1_threshold = np.linspace(0.4, 0.6, 30)\nf1_scores = []\nmax_score = 0\nmax_threshold = 0\n\nfor t in f1_threshold:\n    valid_prediction = model.predict(x_valid)\n    valid_prediction[valid_prediction > t] = 1\n    valid_prediction[valid_prediction <= t] = 0\n    score_ = f1_score(y_valid, valid_prediction)\n    f1_scores.append(score_)\n    if score_ > max_score:\n        max_score = score_\n        max_threshold = t\n        \nplt.figure(figsize=(16, 6))\nplt.plot(f1_threshold, f1_scores)\nplt.axvline(x=max_threshold, linestyle=':', color='r')\nplt.xticks(f1_threshold, rotation=90)\nplt.show()","1d5b125d":"plt.figure(figsize=FIG_SIZE)\nsns.heatmap(confusion_matrix(y_valid, valid_prediction), annot=True, fmt='g')","5989831d":"pred = model.predict(test_features)","8b52af9e":"plt.figure(figsize=FIG_SIZE)\nsns.distplot(pred)","a5e0d70f":"# \uae30\ubcf8 0.5\uc73c\ub85c \uc124\uc815\nTHRESHOLD = 0.5\n\nprint(len(pred[pred >= THRESHOLD]) \/ len(pred[pred < THRESHOLD]))","9a94e835":"pred[pred >= THRESHOLD] = 1\npred[pred < THRESHOLD] = 0","d726cfb5":"income_pct = train['income'].value_counts()[1] \/ train['income'].value_counts()[0]\nincome_pct","c07159ee":"plt.figure(figsize=(10, 6))\nplt.subplot(121)\nsns.countplot(pred)\n\nplt.subplot(122)\nsns.countplot(train['income'])\nplt.show()","0ada6244":"!pip install pycaret","64f621dd":"from pycaret.classification import *","3d4e89e5":"features, label","c7c4ee2d":"all_data_caret = all_data[features + label]","c39665f9":"all_data_caret.head()","356002eb":"all_data_caret['age'] = all_data_caret['age'].astype('float')\n# all_data_caret['capital_net'] = all_data_caret['capital_net'].astype('float')\nall_data_caret['hours_per_week'] = all_data_caret['hours_per_week'].astype('float')\nall_data_caret['capital_gain'] = all_data_caret['capital_gain'].astype('float')\nall_data_caret['capital_loss'] = all_data_caret['capital_loss'].astype('float')","f9970372":"train_clean = all_data_caret[:len(train)]\ntest_clean = all_data_caret[len(train):]","2cc69a7a":"train_clean['income'] = train_clean['income'].astype('int')","c0607e56":"train_clean.head()","07b72f31":"setup(data = train_clean, target = 'income', session_id=SEED, silent=True)","9261efc0":"lgbm = create_model('lightgbm')\ntuned_lgbm = tune_model(lgbm, optimize='F1')","afd1b682":"calibrated_lgbm = calibrate_model(tuned_lgbm)","e9bf43b4":"interpret_model(tuned_lgbm, plot = 'reason', observation = 15)","db132b2e":"plot_model(tuned_lgbm)","d0324bf0":"plot_model(tuned_lgbm, 'threshold')","be6dd788":"plot_model(lgbm, 'confusion_matrix')","0d1c52c4":"plot_model(lgbm, 'calibration')","0b4dd522":"tuned_lgbm_pred = predict_model(tuned_lgbm, data = test_clean)","fa23e407":"tuned_lgbm_pred","49677a18":"campare_model = compare_models(sort = 'F1', n_select = 3)","854e9fba":"blended_model = blend_models(estimator_list = campare_model, fold = 5, method = 'soft')","5e78bd3f":"final_model = finalize_model(blended_model)","9b341c79":"ensemble_prediction = predict_model(final_model, data = test_clean)","aeccc9eb":"ensemble_pred = ensemble_prediction['Score']","7908ac37":"THRESHOLD = 0.5","3e4f0b94":"ensemble_pred[ensemble_pred >= THRESHOLD] = 1\nensemble_pred[ensemble_pred < THRESHOLD] = 0","7c28d415":"plt.figure(figsize=(10, 6))\nplt.subplot(121)\nsns.countplot(ensemble_pred)\n\nplt.subplot(122)\nsns.countplot(train['income'])\nplt.show()","019b1841":"submission = pd.read_csv(os.path.join(DIR, 'sample_submission.csv'))","66f8fd7e":"submission.head()","f7059eee":"submission['prediction'] = ensemble_pred\nsubmission['prediction'] = submission['prediction'].astype('int')\nsubmission['prediction'].value_counts()","cbcf0e68":"import datetime","4ab387f0":"timestring = datetime.datetime.now().strftime('%m-%d-%H-%M-%S')\nfilename = f'kakr-submission-{timestring}.csv'\nfilename","851e2b4c":"submission.to_csv(filename, index=False)","6afe9ad2":"## \uacb0\uce21\uce58","86926178":"## capital_net \uae30\uc900\uc73c\ub85c income == 1 or 0 \uc774 \ub098\uc624\ub294 key \uac12 \ucd94\ucd9c","0ad40f5a":"`capital_gain`\uacfc `capital_loss`\ub97c \uac19\uc774 \ubd10\uc57c\uaca0\ub2e4\ub294 \uc0dd\uac01\uc73c\ub85c \uc811\uadfc\ud569\ub2c8\ub2e4.\n\n(\uac00\uc124) - capital_gain\uc774 \ud06c\uba74 \uc18c\ub4dd \uc218\uc900\uc774 \ub192\uc9c0 \uc54a\uc744\uae4c?","a0894bb9":"## sex","5829640a":"## education \/ education_num","12f53189":"40\uc2dc\uac04 \uadfc\ub85c\uc790\ub4e4\uc774 \ub9ce\ub124\uc694~\n\n40\uc2dc\uac04 \uc774\uc0c1 \uadfc\ub85c\uc790\ub4e4\uc740 income == 1 \ucabd\uc774 \ub9ce\uc774 \ubcf4\uc785\ub2c8\ub2e4.","a8f6e1e0":"## Model (LightGBM)","9762e193":"`education`\uacfc `income`\uc758 \uad00\ub828\uc131\uc774 \uaf64 \ub192\uc544 \ubcf4\uc785\ub2c8\ub2e4. \n\n- \ub2e4\ub9cc, \ub2e8\uacc4\uac00 \ub108\ubb34 \ub9ce\uc73c\uba74 \ubaa8\ub378 \ud559\uc2b5\uc2dc \uacfc\uc801\ud569\uc774 \uc77c\uc5b4\ub0a0 \uc218 \uc788\uc73c\ubbc0\ub85c, \ub2e8\uacc4\ub97c \ubb36\uc5b4 \uc8fc\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","730b4953":"\uc0ac\uc6a9\uc744 \uc548\ud558\ub294 `education_num`\uc740 drop \ud569\ub2c8\ub2e4.","3f4e9ab1":"## Threshold \ubcc4 F1 Score \ud655\uc778","30e520df":"**Preschool \uc758 \ud3c9\uade0 income = 0**","703e7101":"`education` \uceec\ub7fc\uc740 `education_num` \uceec\ub7fc\uacfc value_counts()\uac00 \ub3d9\uc77c\ud558\uac8c \ucc0d\ud788\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ub530\ub77c\uc11c, \ub450 \uac1c\uc758 \uceec\ub7fc \uc911 \ud55c\uac1c\ub9cc \uc0ac\uc6a9 \ub098\uba38\uc9c0 \ud55c \uac1c\uc758 \uceec\ub7fc\uc740 \ubc84\ub9ac\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","8c44cf34":"`sex` \uceec\ub7fc\ub3c4 \ud2b9\uc774\uc0ac\ud56d \ud655\uc778 \ubabb\ud558\uc5ec \uadf8\ub0e5 \ubc29\uce58 go","8d64e386":"## age: \ub098\uc774","f8018593":"\ub098\ub77c\uac00 \uc880 \uace8\uce58 \ub369\uc5b4\ub9ac \uc600\uc2b5\ub2c8\ub2e4.\n\n\uc77c\ub2e8 value\uc758 variance\uac00 \ud06c\uace0, \ub370\uc774\ud130\uc758 \uac2f\uc218\uac00 \uba87 \uac1c \uc5c6\ub294 feature \ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ud569\uccd0 \uc8fc\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","4d81bee1":"type casting \uc744 \uc548\ud574\uc8fc\uba74 \uc798 \uc124\uc815\uc774 \uc548\ub418\ub354\ub77c..\u3160","30f62642":"- `Without-pay` \uceec\ub7fc\uacfc `Never-worked` \uceec\ub7fc\uc758 income\uc740 \ubaa8\ub450 0 \uc784\uc744 \ud655\uc778\ud55c\ub2e4.\n- `Without-pay` \uceec\ub7fc\uacfc `Never-worked` \uceec\ub7fc\uc744 `Ohter` \uceec\ub7fc\uc73c\ub85c \ud569\uce5c\ub2e4.","469b9a22":"## \uce90\ud558~\n\n\uac04\ub2e8\ud55c EDA \uadf8\ub9ac\uace0 LightGBM, PyCaret\uc744 \ud65c\uc6a9\ud55c Ensemble\uae4c\uc9c0 \uc9c4\ud589\ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n\n\ubd80\uc871\ud55c \uc810\uc774 \ub9ce\uc9c0\ub9cc, \ub3c4\uc6c0\uc774 \ub418\uc168\uc73c\uba74 \uc88b\uaca0\ub124\uc694~\n\n**UPVOTE\ub294 \uc0ac\ub791\uc785\ub2c8\ub2e4**\n\n- [\uba38\uc2e0\ub7ec\ub2dd \ud63c\uc790\ud574\ubcf4\uae30 GitHub](https:\/\/github.com\/teddylee777\/machine-learning)\n- [\ub370\uc774\ud130 \uc2f8\uc774\uc5b8\uc2a4 \ube14\ub85c\uadf8](https:\/\/teddylee777.github.io\/)\n- [\uc720\ud29c\ube0c](https:\/\/www.youtube.com\/channel\/UCt2wAAXgm87ACiQnDHQEW6Q)","36aede99":"\uc0ac\ub78c\uc758 \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58\ub77c\uace0\ub294 \ub098\uc640\uc788\ub294\ub514... \ubb54\ub9d0\uc778\uc9c0;; data\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub531\ud788 \uc5c6\uc5b4\uc11c \ubd84\ud3ec\ub3c4 \ud655\uc778 \ud574\ubd24\uc2b5\ub2c8\ub2e4.","15a3cb8c":"\uc704\uc5d0\uc11c \uc815\uc758\ud55c features & label \ud655\uc778","9ae3aca0":"* id\n* age : \ub098\uc774\n* workclass : \uace0\uc6a9 \ud615\ud0dc\n* fnlwgt : \uc0ac\ub78c \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58 (final weight\uc758 \uc57d\uc790)\n* education : \uad50\uc721 \uc218\uc900\n* education_num : \uad50\uc721 \uc218\uc900 \uc218\uce58\n* marital_status: \uacb0\ud63c \uc0c1\ud0dc\n* occupation : \uc5c5\uc885\n* relationship : \uac00\uc871 \uad00\uacc4\n* race : \uc778\uc885\n* sex : \uc131\ubcc4\n* capital_gain : \uc591\ub3c4 \uc18c\ub4dd\n* capital_loss : \uc591\ub3c4 \uc190\uc2e4\n* hours_per_week : \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n* native_country : \uad6d\uc801\n* income : \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)\n    * >50K : 1\n    * <=50K : 0","e3095a0c":"\ub098\uc911\uc5d0 \uc544\ub798 wiki\uc5d0\uc11c \uad6d\uac00\ubcc4 \uc18c\ub4dd \uc218\uc900 \ubcc4\ub85c \uadf8\ub8f9\uc744 \ub9cc\ub4e4\uc5b4\uc11c \ud569\uccd0\ub3c4 \ubcf4\ub824\uace0\uc694","ac286d17":"## capital_loss","0b6b8a78":"## Define Features","9a00a50c":"\ub098\uc774\ub294 numeric column \uc785\ub2c8\ub2e4. \n\nincome \ubcc4 \ub098\uc774\uc758 \ubd84\ud3ec\ub97c \ud655\uc778\ud574 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","789e4f51":"## PyCaret (Ensemble)\n","46f5b11a":"## capital_gain","94872c5c":"- Preschool \uc778 value\ub294 \ubaa8\ub450 0\uc784\uc744 \ud655\uc778\ud55c\ub2e4.","700cc9ce":"## PyCarot","71d249f0":"`capital_gain` & `capital_loss`\uc740 \ubaa8\ub450 Numerical \ucc98\ub7fc \ubcf4\uc774\uc9c0\ub9cc, categorical \ub85c \ub9cc\ub4e4\uc5b4\ub3c4 \uac12\uc758 variance\uac00 \ud06c\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\n\uadf8\ub798\uc11c value_counts()\ub85c income \ubcc4 \uac12 \ubd84\ud3ec\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n\n`income == 1` \uc778 \uadf8\ub8f9\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \ud2b9\uc815 key\uc640 `income == 0` \uc778 \uadf8\ub8f9\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \ud2b9\uc815 key\uac00 \uadf9\uba85\ud788 \uac08\ub9ac\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","b1fef906":"## occupation","7b7e4d69":"capital_gain - capital_loss \uc9c4\ud589\ud558\uc5ec Net\uc744 \uad6c\ud569\ub2c8\ub2e4.","2d85ad66":"\uba87 \uac1c \uacb9\uce58\ub294 \uac83\ub3c4 \uc788\uae34 \ud569\ub2c8\ub2e4.","44e19dc7":"## marital_status","c576e79a":"## race","ddcaf5fd":"## fnlwgt: \uc0ac\ub78c\uc758 \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58","1dce1063":"log \ub97c \ucde8\ud574 \uc90d\ub2c8\ub2e4. (feature\uc758 variance\uac00 \uc4f8\ub370\uc5c6\uc774 \ud06c\uace0, \uc815\uaddc \ubd84\ud3ec\ub85c \ub9cc\ub4e4\uc5b4\uc918\uc11c \ucd5c\uc801\ud654 \uc774\ub4dd\uc744 \ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.)","6bbd7f38":"income \uadf8\ub8f9\uc73c\ub85c \ub098\ub204\uc5b4 \ud655\uc778\ud574 \ubcf4\uba74, `fnlwgt` \uceec\ub7fc\uc758 \ubd84\ud3ec\uac00 \uac70\uc758 \ucc28\uc774\uac00 \uc5c6\uc744 \uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ub2e4\ub978 column \uacfc\uc758 \uc0c1\ud638 \uc791\uc6a9 \ub54c\ubb38\uc5d0 feature \uc81c\uac70\uc5d0\ub294 \uc880 \uc870\uc2ec \uc2a4\ub7fd\uc2b5\ub2c8\ub2e4\ub9cc, \ub098\uc911\uc5d0 \ubcc4 \ud2b9\uc774\uc131\uc774 \uc5c6\ub2e4\uba74 feature \uc81c\uac70\ub3c4 \uace0\ub824\ud574 \ubd10\uc57c\uaca0\uc2b5\ub2c8\ub2e4.","1e0daf46":"pred \uac12\uc758 \ubd84\ud3ec \ud655\uc778","0c4e77da":"## workclass","a3204980":"## all_data\ub85c train + test \uc138\ud2b8 \ud569\uce58\uae30 (\uc804\ucc98\ub9ac \ub3d9\uc2dc \uc9c4\ud589)","ab8ab9ef":"## capital net","8b92b519":"## hours_per_week","5fb3ee1f":"\uadf8\ub8f9 \ubcc4\ub85c \ubb36\uc5b4 \uc8fc\uc5c8\ub294\ub370, \ucd94\ud6c4\uc5d0 \ubb36\uc5b4 \uc8fc\ub294 \ub2e8\uacc4\uc5d0 \ubcc0\ud654\ub97c \uc918 \ubd10\ub3c4 \ub420 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\nlevel_1, level_2, level_3\ub294 \uac70\uc758 \ucc28\uc774\uac00 \uc5c6\uc5b4 \ubcf4\uc774\ub124\uc694.","3a5a81f7":"## relationship","2fd86f2b":"## Prediction","e61f7fa9":"- `occupation == 'Armed-Forces'`\ub294 \ubaa8\ub450 0 income \uc784\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.\n- \ub610\ud55c, `Armed-Forces` \uc5ed\uc2dc \ub370\uc774\ud130 \uac2f\uc218\uac00 \uc801\uc73c\ubbc0\ub85c, \uacfc\uc801\ud569 \ubc29\uc9c0\ub97c \uc704\ud558\uc5ec `Priv-house-serve`\uc640 \ud569\uccd0\uc90d\ub2c8\ub2e4.","e525f7a3":"## \uceec\ub7fc \ubcc4 info() \ud655\uc778","189d621c":"\uc7ac\ubc0c\ub294 \uc0ac\uc2e4\uc744 \ubc1c\uacac\ud588\uc8e0...\n\n`capital_gain` > 50000\uc774\uba74 \ubaa8\ub450 income \uc774 1 \uc785\ub2c8\ub2e4.","d864b24d":"## native_country","909c5a53":"`race` \ubcc4 `income` \ud655\uc778","0dfdc0c3":"confusion_matrix","acb4ef66":"`race` \uceec\ub7fc\ub3c4 \ud2b9\uc774\uc0ac\ud56d \ud655\uc778 \ubabb\ud558\uc5ec \uadf8\ub0e5 \ubc29\uce58 go","ff976ce5":"## Target \ubcc0\ud658 (Income)","8b0b030f":"## Make Submission","ef76532b":"`Married-AF-spouse` \uceec\ub7fc\uc758 \ub370\uc774\ud130 \uac2f\uc218\uac00 \uc801\uc2b5\ub2c8\ub2e4.\n\n\uc720\uc0ac \uadf8\ub8f9\uc778  `Married-civ-spouse`\uc73c\ub85c \ubcc0\ud615\ud574\uc8fc\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","45bc355d":"\uc6d0\ub798 \uac1c\ubcc4 \ucc98\ub9ac \ud574\uc8fc\ub294 \uac83\uc774 \uc815\uc2dd\uc785\ub2c8\ub2e4.\n\ntrain \/ test \uc758 \ubd84\ud3ec\ub97c \ub530\ub85c \ubd10\uc57c\ud558\ub294 \uc774\uc720\ub294 \uce90\uae00\uc5d0\uc11c \uac00\ub054 \ud568\uc815\uc73c\ub85c train \uc5d0 \uc5c6\ub294 \uac12 \ubd84\ud3ec\ub97c test\uc5d0 \uc2ec\uc5b4 \ub193\uae30\ub3c4 \ud558\uc8e0.\n\n\uc774\uc804\uc5d0 \uc774\ubbf8 \uac1c\ubcc4 \ucc98\ub9ac\ub85c \ubd84\ud3ec \ud655\uc778\uc744 \uc9c4\ud589\ud55c \uc0c1\ud0dc\uac00 \ud3b8\uc758\uc0c1 train + test \ud569\uce5c \ud6c4 \uc804\ucc98\ub9ac \uc9c4\ud589\ud569\ub2c8\ub2e4.","fdf50f11":"\uc4f8\ub9cc\ud55c feature\ub4e4\uc744 \uace8\ub77c\ubcf4\uc790.","affbf090":"\uacb9\uce58\uc9c0 \uc54a\ub294 \uac83\ub4e4\ub9cc \ucd94\ub824 \uc8fc\ub824\uace0\uc694","43514607":"\uacb0\uce21\uce58 \uc5c6\uc74c (\uae70\ub054!)","14ef958f":"`relationship` \uceec\ub7fc\uc740 \ubcc4\ub2e4\ub978 \ud2b9\uc774\uc0ac\ud56d\uc744 \ucc3e\uc9c0 \ubabb\ud558\uc5ec \uadf8\ub0e5 \ubc29\uce58 go","ae5435fa":"[List of countries by GNI (nominal) per capita (Wikipedia)](https:\/\/en.wikipedia.org\/wiki\/List_of_countries_by_GNI_(nominal)_per_capita#Low-income_group)","419ad5ba":"Threshold \ubcc4 F1_Score\uc758 \ubcc0\ud654 \ud655\uc778"}}