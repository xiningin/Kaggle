{"cell_type":{"253d932c":"code","aadb6573":"code","e39d98d6":"code","418ff232":"code","fa80bfd5":"code","731ff55a":"code","f4d7d586":"code","161fae2a":"code","40b8bbae":"code","6306e196":"code","309d0e3a":"code","bb99e997":"code","db969b48":"code","d751d3bf":"code","5779e9ad":"code","567b01df":"code","145ca5e5":"code","fd15a550":"code","f20c63bf":"code","62674aa9":"code","3a5cc077":"code","dd38ac08":"code","307037a4":"code","842f43ee":"code","381fe70b":"code","342e2a72":"markdown","11845992":"markdown","2f25b60f":"markdown","6ddce821":"markdown","74243e6b":"markdown","90dd1358":"markdown","f8f11102":"markdown","e0db0f96":"markdown","8aa69ac7":"markdown","c1dd17f7":"markdown","ede99ba8":"markdown","9e44a702":"markdown"},"source":{"253d932c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom plotly import tools\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","aadb6573":"df = pd.read_csv(\"..\/input\/winemag-data-130k-v2.csv\")","e39d98d6":"df.info()","418ff232":"df.head() # First 5 rows of our dataset","fa80bfd5":"# Let's delete \"Unnamed: 0\" column\ndf.drop([\"Unnamed: 0\"], axis=1, inplace=True)","731ff55a":"plt.figure(figsize=(16,7))\nsns.set(style=\"darkgrid\")\nsns.barplot(x=df.country.value_counts()[:10].index, y=df.country.value_counts()[:10].values)\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Number of Wine\")\nplt.show()","f4d7d586":"plt.figure(figsize=(16,7))\ng = sns.barplot(x=df.groupby(\"country\").mean().sort_values(by=\"points\",ascending=False).points.index[:10], y=df.groupby(\"country\").mean().sort_values(by=\"points\",ascending=False).points.values[:10], palette=\"gist_ncar\")\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Average Points\")\nplt.title(\"Average Points Top 10\")\nax=g\nfor p in ax.patches:\n    ax.annotate(\"%.2f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=11, color='gray', xytext=(0, 20),\n                 textcoords='offset points')\nplt.show()","161fae2a":"plt.figure(figsize=(16,7))\ng = sns.barplot(x=df.groupby(\"country\").mean().sort_values(by=\"price\",ascending=False).price.index[:10], y=df.groupby(\"country\").mean().sort_values(by=\"price\",ascending=False).price.values[:10], palette=\"Blues_r\")\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Average Price (US Dollar)\")\nplt.title(\"Average Price Top 10\")\nax=g\nfor p in ax.patches:\n    ax.annotate(\"%.2f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=11, color='gray', xytext=(0, 20),\n                 textcoords='offset points')\nplt.show()","40b8bbae":"df2 = df[np.isfinite(df[\"price\"])]\ndf2[\"points\/price\"] = df2.points \/ df2.price\ndf2.groupby(\"country\").mean().sort_values(by=\"points\/price\", ascending=False)\n\nplt.figure(figsize=(16,7))\ng = sns.barplot(x=df2.groupby(\"country\").mean().sort_values(by=\"points\/price\", ascending=False)[\"points\/price\"].index[:10], y=df2.groupby(\"country\").mean().sort_values(by=\"points\/price\", ascending=False)[\"points\/price\"].values[:10], palette=\"jet_r\")\nplt.xlabel(\"Countries\")\nplt.xticks(rotation= 45, ha=\"right\")\nplt.ylabel(\"Points \/ Price Ratio\")\nax=g\nfor p in ax.patches:\n    ax.annotate(\"%.2f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=11, color='gray', xytext=(0, 20),\n                 textcoords='offset points')\nplt.show()","6306e196":"plt.figure(figsize=(12,6))\nsns.boxplot(x=df.points)\nplt.title(\"Points Boxplot\")\nplt.show()","309d0e3a":"top20Points = df.sort_values(by=\"points\", ascending=False).head(20)\n\nfor i in range(20):\n    print(\"{} \/ {} \/ {} \/ $ {}\".format(top20Points.title.values[i], top20Points.country.values[i], top20Points.province.values[i], top20Points.price.values[i]))\n    print(\"-----------------------------------------------------------------------------------------------------------------------\")","bb99e997":"labels = top20Points.country.value_counts().index\nvalues = top20Points.country.value_counts().values\n\ntrace = go.Pie(labels=labels, values=values)\n\niplot([trace])","db969b48":"df.variety.value_counts()\n\nfig = {\n  \"data\": [\n    {\n      \"values\": df.variety.value_counts().values[:10],\n      \"labels\": df.variety.value_counts().index[:10],\n      \"name\": \"Variaty\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    },\n    ],\n  \"layout\": {\n        \"title\":\"Variaty\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Grapes\",\n                \"x\": 0.5,\n                \"y\": 0.5\n            },\n        ]\n    }\n}\n\niplot(fig)","d751d3bf":"meanPoints = df.points.mean()\ndf[\"Above_Average\"] = [1 if i > meanPoints else 0 for i in df.points]","5779e9ad":"# This process can takes long time. Because we have a lot of descriptions.\n\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nimport nltk as nlp\n\ndescriptionList = list()\nlemma = nlp.WordNetLemmatizer()\n\nfor description in df.description:\n    description = re.sub(\"[^a-zA-Z]\",\" \",description) # We use regular expression to delete non-alphabetic characters on data.\n    description = description.lower() # Since upper and lower characters are (e.g a - A) evaluated like they are different each other by computer we make turn whole characters into lowercase.\n    description = nltk.word_tokenize(description) # We tokenized the statement\n    description = [i for i in description if not i in set(stopwords.words(\"english\"))] # We will remove words like 'the', 'or', 'and', 'is' etc.\n    description = [lemma.lemmatize(i)for i in description] # e.g: loved => love\n    description = \" \".join(description) # Now we turn our words list into sentence again\n    descriptionList.append(description)","567b01df":"from sklearn.feature_extraction.text import CountVectorizer","145ca5e5":"# We try to use most common 1500 words to make a prediction.\n\nmax_features = 1500\ncount_vectorizer = CountVectorizer(max_features=max_features) # stop_words=\"english\" i istersek burada yazabilirdik, lowercase' de burada kullanabilirdik vs.\nsparce_matrix = count_vectorizer.fit_transform(descriptionList)","fd15a550":"sparce_matrix = sparce_matrix.toarray()","f20c63bf":"print(\"Most Frequent {} Words: {}\".format(max_features, count_vectorizer.get_feature_names()))","62674aa9":"x = sparce_matrix\ny = df.iloc[:,13].values","3a5cc077":"from sklearn.model_selection import train_test_split","dd38ac08":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 42)","307037a4":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train, y_train)","842f43ee":"# Prediction\ny_pred = nb.predict(x_test)","381fe70b":"print(\"Accuracy: {:.2f}%\".format(nb.score(y_pred.reshape(-1,1), y_test)*100))","342e2a72":"## <a id=2><\/a> Exploration and Visualization of Data","11845992":"**Number of Wine Tasted According To Countries** (Top 10)","2f25b60f":"<font color=\"blue\" size= 5 >Our model works with <font color=\"red\">**76.76%**<\/font> of accuracy.<\/font>\n<br>\n<br>\n<br>\n<font size=4>**Thanks for your time.<br>\nIf you like it please upvote and I will be glad to hear your feedbacks!**<\/font>","6ddce821":" **Best Wines According to Points** (Top 20)","74243e6b":"**Average Points** (Top 10)","90dd1358":"\n# <a id=3><\/a> Natural Language Process (NLP) \nNow we will try to predict if a wine's point is above average or not. We'll do that by using descriptions about wines and we'll use NLP algorithm.","f8f11102":"**The Type of Grapes Used to Make The Wine** (Top 10)\n<br>\n<img src=\"https:\/\/static.vinepair.com\/wp-content\/uploads\/2017\/09\/9-pinot-noir-internal.jpg\" width=400\/>\n<font size=0.5 color=\"red\">Pinot Noir<\/font>","e0db0f96":"Dataset contains; <br><br>\n\n**country**: The country that the wine is from <br>\n**description**: A few sentences from a sommelier describing the wine's taste, smell, look, feel, etc. <br>\n**designation**: The vineyard within the winery where the grapes that made the wine are from <br>\n**points**: The number of points WineEnthusiast rated the wine on a scale of 1-100 (though they say they only post reviews for wines that score >=80) <br>\n**price**: The cost for a bottle of the wine <br>\n**province**: The province or state that the wine is from <br>\n**region_1**: The wine growing area in a province or state (ie Napa) <br>\n**region_2**: Sometimes there are more specific regions specified within a wine growing area (ie Rutherford inside the Napa Valley), but this value can sometimes be blank <br>\n**taster_name**: Name of the person who tasted and reviewed the wine <br>\n**taster_twitter_handle**: Twitter handle for the person who tasted and reviewed the wine <br>\n**title**: The title of the wine review, which often contains the vintage if you're interested in extracting that feature <br>\n**variety**: The type of grapes used to make the wine (ie Pinot Noir) <br>\n**winery**: The winery that made the wine <br>","8aa69ac7":"<img src=\"https:\/\/i.ytimg.com\/vi\/pkVhgV705VA\/hqdefault.jpg\" width=400\/>\n<img src=\"https:\/\/thefinestbubble.com\/the-finest-bubble-products-champagne-buy-online-same-day-london-delivery-free-delivery-%A3200%2B-next-day-uk-delivery-bottle-75cl-corporate-gifts-champagne-gift\/thumbnails-new\/salon-le-mesnil-blanc-de-blanc-2006-.jpg\" width=350\/>","c1dd17f7":"## <a id=1><\/a>Import Libraries and Read Data","ede99ba8":"# HISTORY OF WINE\n<br>\nThe earliest archaeological evidence of wine grapes has been found at sites in Georgia (c.\u20096000 BC), Iran (c.\u20095000 BC), Greece (c.\u20094500 BC), and Sicily (c.\u20094000 BC) although there is earlier evidence of a wine made from fermented grapes among other fruits being consumed in China (c.\u20097000\u20135500 BC). The oldest evidence of wine production has been found in Armenia (c.\u20094100 BC).\n\nThe altered consciousness produced by wine has been considered religious since its origin. The ancient Greeks worshiped Dionysus or Bacchus and the Ancient Romans carried on his cult. Consumption of ritual wine was part of Jewish practice since Biblical times and, as part of the eucharist commemorating Jesus's Last Supper, became even more essential to the Christian Church. Although Islam nominally forbade the production or consumption of wine, during its Golden Age, alchemists such as Geber pioneered wine's distillation for medicinal and industrial purposes such as the production of perfume.\n\nWine production and consumption increased, burgeoning from the 15th century onwards as part of European expansion. Despite the devastating 1887 phylloxera louse infestation, modern science and technology adapted and industrial wine production and wine consumption now occur throughout the world.\n<font size=0.5>https:\/\/en.wikipedia.org\/wiki\/History_of_wine<\/font>\n<br>\n<img src=\"https:\/\/spectatorlife.imgix.net\/content\/uploads\/2018\/04\/iStock-615269202.jpg?auto=compress,enhance,format&crop=faces,entropy,edges&fit=crop&w=820&h=550\" width=500\/>\n<br>\n\nOur dataset contains features below. We will analyze the dataset and use Natural Language Process to make a prediction.\n\n<font size=4 color=\"red\">**CONTENT**<\/font><br>\n    1.[Import Libraries and Read Data](#1)<br>\n    2.[Explore and Visualize Data](#2)<br>\n    3.[Natural Language Process](#3)<br>","9e44a702":"**Points \/ Price Ratio** (Top 10)"}}