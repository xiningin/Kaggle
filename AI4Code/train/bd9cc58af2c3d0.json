{"cell_type":{"6b3251bd":"code","d486a9b0":"code","94ac7e8b":"code","89ab84a6":"code","bcc61740":"code","da26d821":"code","2d3f17ec":"code","d066f7c4":"code","a89a6f13":"code","6c4e8941":"code","a5a3790a":"markdown","f77dccd2":"markdown","f1b3a8d9":"markdown","5040eacb":"markdown","eb1fc664":"markdown","37a6d19f":"markdown"},"source":{"6b3251bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import confusion_matrix\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d486a9b0":"data= pd.read_csv('..\/input\/Iris.csv')","94ac7e8b":"X = data.drop([ 'Id','Species'], axis=1)\nY=data['Species']","89ab84a6":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nY= le.fit_transform(Y)","bcc61740":"\nfrom sklearn.model_selection  import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.33,random_state=0)","da26d821":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3, )\nknn.fit(x_train,y_train)\ny_pred = knn.predict(x_test)","2d3f17ec":"print(\"r2 value :\")\nprint(r2_score(Y, knn.predict(X)) )","d066f7c4":"cm = confusion_matrix(y_test,y_pred)\nprint(cm)\n\n","a89a6f13":"fig = plt.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(cm)\nplt.title('Confusion matrix of the knn ')\nfig.colorbar(cax)\n","6c4e8941":"k_value = list(range(1,50))\naccuracy= []\nfor k in k_value:\n    knn = KNeighborsClassifier(n_neighbors=k , metric='minkowski')\n    knn.fit(x_train, y_train)\n    y_pred = knn.predict(x_test)\n    accuracy.append(accuracy_score(y_test, y_pred))\n    \nplt.plot(k_value,accuracy )\nplt.xlabel('K VALUE ')\nplt.ylabel('ACCURACY')\nplt.title('GRAPH\u0130C FOR BETTER K VALUE')\n","a5a3790a":"\u0131 saw R2 accuracy , k=3","f77dccd2":" split my data to train and test","f1b3a8d9":"I used K neighbors Classifer for \u0130ris Data","5040eacb":"used Label Encoder to categorically data convert to numerical data","eb1fc664":"\u0131 split data to x and y","37a6d19f":"F\u0131rst Step: \u0130 will define necessary libraries"}}