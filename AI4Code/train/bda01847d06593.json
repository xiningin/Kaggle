{"cell_type":{"67cb484a":"code","9e4362b1":"code","e3c1dd59":"code","9c4d15e4":"code","5cad9ccc":"code","ef489e66":"code","b4d95f91":"code","b92aed26":"code","528f08ce":"code","ad5da03f":"code","520a1fcc":"code","83c2605e":"code","38b28c13":"code","fb48d8d6":"code","58b09926":"markdown","f33474de":"markdown","9c92aca7":"markdown","7453177b":"markdown","530b2741":"markdown","52794db6":"markdown","adb9ee4a":"markdown","a8f6db4c":"markdown","327c4033":"markdown","850b6ee2":"markdown","0499f4f9":"markdown"},"source":{"67cb484a":"import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt","9e4362b1":"src = cv2.imread('..\/input\/basicopencv\/ants.jpg',cv2.IMREAD_COLOR)\ngray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)\nret, dst = cv2.threshold(gray,100,255,cv2.THRESH_BINARY)","e3c1dd59":"plt.imshow(dst,cmap='gray')","9c4d15e4":"src = cv2.imread('..\/input\/basicopencv\/ants.jpg',cv2.IMREAD_COLOR)\ngray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)\nret, dst = cv2.threshold(gray,100,255,cv2.THRESH_BINARY)\ndst = cv2.bitwise_not(dst)","5cad9ccc":"contours, hierarchy = cv2.findContours(dst, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_NONE)","ef489e66":"for i in range(len(contours)):\n    cv2.drawContours(src, [contours[i]], 0,(0,0,255),2)\n    cv2.putText(src,str(i), tuple(contours[i][0][0]), cv2.FONT_HERSHEY_COMPLEX, 0.8, (0,255,0),1)","b4d95f91":"plt.imshow(src)","b92aed26":"src = cv2.imread('..\/input\/basicopencv\/convex.png', cv2.IMREAD_COLOR)\ngray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)","528f08ce":"plt.imshow(src)","ad5da03f":"sobel = cv2.Sobel(gray,cv2.CV_8U,1,0,3)\nplt.imshow(sobel)","520a1fcc":"laplacian = cv2.Laplacian(gray, cv2.CV_8U, ksize=3)\nplt.imshow(laplacian)","83c2605e":"canny = cv2.Canny(src, 100, 255)\nplt.imshow(canny)","38b28c13":"src = cv2.imread('..\/input\/basicopencv\/road.jpg')\ngray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)\nbinary = cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY,467,37)","fb48d8d6":"plt.imshow(binary, cmap='gray')","58b09926":"##### contours, hierarchy = cv2.findContours(binary_image, Search_method, Approx_method)\n\n##### Search_method\n##### - cv2.RETR_EXTERNAL: Detects only the outer contours, does not constitute a hierarchy.\n##### - cv2.RETR_LIST: Detects all contours and does not configure hierarchy.\n##### - cv2.RETR_CCOMP: Detects all contours, and the hierarchy consists of two stages.\n##### - cv2.RETR_TREE: Detects all contours and forms all hierarchies. (Tree Structure)\n\n##### Approx_method\n##### - cv2.CHAIN_APPROX_NONE : Returns all points of the contour points.\n##### - cv2.CHAIN_APPROX_SIMPLE: Simplify contours Compress horizontal, vertical, and diagonal elements and leave only endpoints.\n##### - cv2.CHAIN_APPROX_TC89_L1: Apply as an outline in Freeman chain code.\n##### - cv2.CHAIN_APPROX_TC89_KCOS: Apply as an outline in Freeman chain code.","f33474de":"## 4. Adaptive Binary","9c92aca7":"This notebook was created to refer to the basic functionality of opencv. I am planning to refer to this code when I proceed with the project.\n\n![image.png](attachment:b4aa5eae-d08c-4453-b394-7bcdedb0fd3c.png)","7453177b":"##### cv2.adaptiveThreshold (input image, maximum, adaptive binary flag, threshold format, block size, subtraction)\n##### Adaptive binary flag\n##### - cv2.ADAPTIVE_THRESH_MEAN_C : Apply average weights to all pixels in the blockSize region\n##### - cv2.ADAPTIVE_THRESH_GAUSSIAN_C: Apply Gaussian weights to all pixels in the blockSize region for distances from the center point.\n\n##### The result of the threshold set depends greatly on the size of the surrounding area, blockSize and constant C.\n##### The blockSize can only be odd so that the center point can exist, and the constant C usually uses positive values, but in some cases 0 or negative numbers are also available.\n##### Tip : The larger the blockSize, the longer the operation takes.","530b2741":"##### retval, dst = cv2.threshold(src, thresh, maxval, type)\n##### src : Source Image\n##### thresh : threshold in image\n##### maxval : if pixel > thresh : dst = maxval, else: dst = 0\n##### type\n##### - cv2.THRESH_BINARY : dst = (src > thresh) ? maxval : 0\n##### - cv2.THRESH_BINARY_INV : dst = (src > thresh) ? 0 : maxval\n##### - cv2.THRESH_TRUNC : dst = (src > thresh) ? thresh : src\n##### - cv2.THRESH_TOZERO : dst = (src > thresh) ? src : 0\n##### - cv2.THRESH_TOZERO_INV : dst = (src > thresh) ? 0 : src\n##### - cv2.THRESH_MASK : black image\n##### - cv2.THRESH_OTSU : Apply OTSU-algorithm \n##### - cv2.THRESH_TRIANGLE : Apply Triangle-algorithm ","52794db6":"Adaptive binarization algorithms are binary algorithms that are configured to allow thresholds to assign themselves different values depending on the input image.\nDepending on the image, there is an image that is difficult to binarize at any threshold.\nFor example, if the lighting changes or reflections are severe, the brightness distribution within the image may require local thresholds to be applied.\nIn this case, applying adaptive binarization algorithms can result in excellent results.","adb9ee4a":"##### dst = cv2.Canny(src, threshold1, threshold2, apertureSize,L2gradient)\n##### Set the threshold2, Sobel operator mask size, and L2 gradient.\n##### Returns the result image (dst).\n##### Set the minimum and maximum values of pixels as the lower and upper thresholds to proceed with the detection.\n##### If the pixel has a slope greater than the upper threshold, the pixel is considered an edge\n##### if it is lower than the lower threshold, it is not considered an edge.\n##### Sobel operator mask size utilizes Sobel operation, so set the size of the Sobel mask.\n##### L2 gradients will be accurately calculated with L2-norm for directional gradients, with less accuracy but less speed.\n##### Choose whether to calculate faster L1-norm.","a8f6db4c":"## 2. Contours","327c4033":"#### The main element that contours detects objects in white.\n#### Therefore, the background is black, and the object\n#### you are trying to detect is modified to have a white property.\n#### After binarization, reverse to convert the object you want to detect to have a white property.","850b6ee2":"## 1. Binary","0499f4f9":"## 3. Edge detection"}}