{"cell_type":{"b5c8d3a6":"code","9ff669a5":"code","e4738ca3":"code","9f04d173":"code","f2e135b2":"code","9d642803":"code","536f5a3b":"code","744e82c6":"code","2b754c04":"code","57e05bfd":"code","3ee90e8f":"code","e73ec095":"code","26bc3724":"markdown","0fd846b7":"markdown","a099c7f0":"markdown","79623a49":"markdown","bb0356ae":"markdown","c20f66a6":"markdown","863655d7":"markdown","78422cdf":"markdown"},"source":{"b5c8d3a6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nfrom tqdm.notebook import tqdm\nplt.style.use('bmh')\n\ntrain_labels = pd.read_csv('..\/input\/seti-breakthrough-listen\/train_labels.csv')\nss = pd.read_csv('..\/input\/seti-breakthrough-listen\/sample_submission.csv')\ntrain_labels['first_letter'] = train_labels['id'].str[0]","9ff669a5":"# 50k Training Samples\ntrain_labels.shape","e4738ca3":"train_labels['target'].value_counts() \\\n    .plot(kind='barh',\n          title='Class Imbalance!',\n          figsize=(15, 5))","9f04d173":"!ls -GFlash ..\/input\/seti-breakthrough-listen\/train\/0\/ | head","f2e135b2":"fig, axs = plt.subplots(5, 4, figsize=(15, 15))\naxs = axs.flatten()\n# Sample 20 random files\nrandom_data = []\nplt_idx = 0\nfor i, row in train_labels.sample(20).iterrows():\n    fl = row['first_letter']\n    myid = row['id']\n    dat = np.load(f'..\/input\/seti-breakthrough-listen\/train\/{fl}\/{myid}.npy')\n    random_data.append(dat)\n    axs[plt_idx].imshow(dat[:3,:,:].transpose(2, 1, 0).astype('float32'))\n    axs[plt_idx].set_title(myid)\n    plt_idx += 1\nplt.show()","9d642803":"neg_samples = train_labels.query('target == 0').sample(1000, random_state=529)['id'].values\npos_samples = train_labels.query('target == 1').sample(1000, random_state=529)['id'].values\ncombined_samples = np.concatenate([neg_samples, pos_samples])","536f5a3b":"def get_meta_features(data, myid, stats_dict):\n    stats_dict[myid] = {}\n    stats_dict[myid]['mean'] = np.mean(data)\n    stats_dict[myid]['max'] = np.max(data)\n    stats_dict[myid]['min'] = np.min(data)\n    for i in range(6):\n        stats_dict[myid][f'mean_{i}'] = np.mean(data[i,:,:])\n    return stats_dict\n\nstats_dict = {}\n\nfor myid in tqdm(combined_samples):\n    fl = myid[0]\n    data = np.load(f'..\/input\/seti-breakthrough-listen\/train\/{fl}\/{myid}.npy')\n    stats_dict = get_meta_features(data, myid, stats_dict)","744e82c6":"stats_df = pd.DataFrame(stats_dict).T\nstats_df = stats_df.reset_index().rename(columns={'index':'id'}).merge(train_labels, how='left')","2b754c04":"ax = stats_df.query('target == 0')['mean'] \\\n    .plot(kind='hist', bins=100, label='negative', alpha=0.5, figsize=(15, 5))\nstats_df.query('target == 1')['mean'] \\\n    .plot(kind='hist', bins=100, label='positive', ax=ax, alpha=0.5)\nplt.legend()\nax.set_title('Mean Value (postive vs. negative samples)')\nplt.show()\nax = stats_df.query('target == 0')['max'] \\\n    .plot(kind='hist', bins=100, label='negative', alpha=0.5, figsize=(15, 5))\nstats_df.query('target == 1')['max'] \\\n    .plot(kind='hist', bins=100, label='positive', ax=ax, alpha=0.5)\nax.set_title('Max Value (postive vs. negative samples)')\nplt.legend()\nplt.show()\nax = stats_df.query('target == 0')['min'] \\\n    .plot(kind='hist', bins=100, label='negative', alpha=0.5, figsize=(15, 5))\nstats_df.query('target == 1')['min'] \\\n    .plot(kind='hist', bins=100, label='positive', ax=ax, alpha=0.5)\nax.set_title('Min Value (postive vs. negative samples)')\nplt.legend()\nplt.show()","57e05bfd":"from sklearn.linear_model import ElasticNetCV\n\nFEATURES = ['mean', 'max', 'min', 'mean_0', 'mean_1', 'mean_2', 'mean_3',\n            'mean_4', 'mean_5']\nX_train =  stats_df[FEATURES].values\ny_train = stats_df['target'].values\n\nen = ElasticNetCV()\nen.fit(X_train, y_train)","3ee90e8f":"test_stats = {}\n\nfor myid in tqdm(ss.sample(1000)['id'].unique()):\n    fl = myid[0]\n    data = np.load(f'..\/input\/seti-breakthrough-listen\/test\/{fl}\/{myid}.npy')\n    test_stats = get_meta_features(data, myid, test_stats)","e73ec095":"test_stats_df = pd.DataFrame(test_stats).T\ntest_stats_df = test_stats_df.reset_index() \\\n    .rename(columns={'index':'id'}).merge(ss, how='left')\n\ntest_stats_df['target'] = en.predict(test_stats_df[FEATURES].values)\n\nss.drop('target', axis=1) \\\n    .merge(test_stats_df, how='left') \\\n    .fillna(0.5)[['id','target']] \\\n    .to_csv('submission.csv', index=False)","26bc3724":"# ET Phone Home\n\n\n\"In this competition, use your data science skills to help identify anomalous signals in scans of Breakthrough Listen targets.\"\nWut?\n\n![](https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Fd13ezvd6yrslxm.cloudfront.net%2Fwp%2Fwp-content%2Fimages%2Fet-extraterrestrial-johnalvin-regularprint-frontpage-700x301.jpg)","0fd846b7":"# Simple simple simple regression\n- Take the statistics from above and fit an elasticnet model.\n- Predict on subset of test set (for speed)","a099c7f0":"Predict and make submission","79623a49":"It looks like the average values in positive samples are slightly larger than negative samples on average.","bb0356ae":"# Lets gather some basic statistics about the data.\n- We will sample 1000 positive and 1000 negative samples\n- Calculate the mean, median, std for each sample.\n- See if anything obvious is different between the two labels.","c20f66a6":"# Plot some random training files.\nThey look spooky!","863655d7":"# Training data\n- Folders based on the id's first letter\n- npy files\n- Each file is ~820K\n- Numpy array's are in the shape (6, 273, 256)","78422cdf":"# "}}