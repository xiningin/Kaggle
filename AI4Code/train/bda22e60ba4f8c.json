{"cell_type":{"e0169c3e":"code","5f5ebbdd":"code","5aed90cd":"code","d99bf722":"code","22b52c4f":"code","4f7ba6b1":"code","fbc79627":"code","1f8fb668":"code","7478fed9":"code","392f7742":"code","b5368690":"code","a0cb5ff3":"code","94ae9694":"code","3d58ba1e":"code","872003f5":"code","64b2c648":"code","5ada925f":"code","27ae27ec":"code","9007d50d":"code","bd621b44":"code","5da838b8":"code","d06c9dcd":"code","33a50afe":"code","19b758c2":"code","681b9d98":"code","89f08f85":"code","4f85fdbe":"code","329217be":"code","0d02b6d4":"code","b587b7ff":"code","fcd2a061":"code","ec683c9d":"code","b7f66406":"code","1ba13dfe":"code","4f8fd485":"code","2c5b1441":"code","500ba243":"code","32863d6f":"markdown","476fbf9a":"markdown"},"source":{"e0169c3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f5ebbdd":"import datetime\nimport tqdm\nimport random\n\n# for charts and visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# for time series\nimport statsmodels\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\nimport statsmodels.formula.api as smf\nimport statsmodels.tsa.api as smt\nimport statsmodels.api as sm\nimport scipy.stats as scs\n\n# handle warnings\nimport warnings\nwarnings.filterwarnings('ignore')","5aed90cd":"sales=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\n\n# settings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nitem_cat=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nitem=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nsub=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv\")\nshops=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\ntest=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/test.csv\")","d99bf722":"sales.head()","22b52c4f":"sales.date = sales.date.apply(lambda x:datetime.datetime.strptime(x, '%d.%m.%Y'))\nsales.info()","4f7ba6b1":"monthly_sales = sales.groupby(['date', 'date_block_num', 'shop_id'])['date', \n                                                                     'item_price', \n                                                                     'item_cnt_day'].agg({'date': ['min', 'max'], \n                                                                                          'item_price': 'mean',\n                                                                                          'item_cnt_day': 'sum'\n                                                                                         })\nmonthly_sales.tail(10)","fbc79627":"item.head()","1f8fb668":"x = item.groupby(['item_category_id']).count()\nx = x.sort_values(by='item_id', ascending=False)\nx = x.iloc[0:10].reset_index()\n\nplt.figure(figsize=(10, 5))\nsns.barplot(x.item_category_id, x.item_id, alpha=0.8)\nplt.title('Items per category')\nplt.xlabel('# of items')\nplt.ylabel('item categories')\nplt.show()","7478fed9":"ts = sales.groupby(['date_block_num'])['item_cnt_day'].sum()\nts.astype('float')\nplt.figure(figsize=(10, 5))\nplt.title('Total Sales of the company')\nplt.xlabel('Time')\nplt.ylabel('Sales')\nplt.plot(ts);","392f7742":"plt.figure(figsize=(16,6))\nplt.plot(ts.rolling(window=12,center=False).mean(),label='Rolling Mean');\nplt.plot(ts.rolling(window=12,center=False).std(),label='Rolling std');\nplt.legend();","b5368690":"import statsmodels.api as sm","a0cb5ff3":"res = sm.tsa.seasonal_decompose(ts.values, freq=12, model='multiplicative')\nfig = res.plot()\nfig.show();","94ae9694":"res = sm.tsa.seasonal_decompose(ts.values, freq=12, model='additive')\nfig = res.plot()\nfig.show();","3d58ba1e":"def test_stationarity(timeseries):\n    print('Results of Dickey-fuller test:')\n    adf = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(adf[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key, value in adf[4].items():\n        dfoutput['Critical values (%s)' %key] = value\n    print(dfoutput)\n    \ntest_stationarity(ts)    ","872003f5":"from pandas import Series as series\n\ndef difference(dataset, interval=1):\n    diff = list()\n    for i in range(interval, len(dataset)):\n        value = dataset[i] - dataset[i - interval]\n        diff.append(value)\n        \n    return series(diff)    ","64b2c648":"def inverse_difference(last_orb, value):\n    return value + last_orb","5ada925f":"ts=sales.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum()\nts.astype('float')\nplt.figure(figsize=(16,16))\nplt.subplot(311)\nplt.title('Original')\nplt.xlabel('Time')\nplt.ylabel('Sales')\nplt.plot(ts)\nplt.subplot(312)\nplt.title('After De-trend')\nplt.xlabel('Time')\nplt.ylabel('Sales')\nnew_ts=difference(ts)\nplt.plot(new_ts)\nplt.plot()\n\nplt.subplot(313)\nplt.title('After De-seasonalization')\nplt.xlabel('Time')\nplt.ylabel('Sales')\nnew_ts=difference(ts,12)       # assuming the seasonality is 12 months long\nplt.plot(new_ts)\nplt.plot()","27ae27ec":"test_stationarity(new_ts)","9007d50d":"def tsplot(y, lags=None, figsize=(10, 8), style='bmh', title=''):\n    if not isinstance(y, pd.Series):\n        y = series(y)\n    \n    with plt.style.context(style):\n        fig = plt.figure(figsize=figsize)\n        layout = (3, 2)\n        ts_ax = plt.subplot2grid(layout, (0, 0), colspan=2)\n        acf_ax = plt.subplot2grid(layout, (1, 0))\n        pacf_ax = plt.subplot2grid(layout, (1, 1))\n        qq_ax = plt.subplot2grid(layout, (2, 0))\n        pp_ax = plt.subplot2grid(layout, (2, 1))\n        \n        y.plot(ax=ts_ax)\n        ts_ax.set_title(title)\n        smt.graphics.plot_acf(y, lags=lags, ax=acf_ax, alpha=0.5)\n        smt.graphics.plot_pacf(y, lags=lags, ax=pacf_ax, alpha=0.5)\n        sm.qqplot(y, line='s', ax=qq_ax)\n        qq_ax.set_title('QQ Plot')        \n        scs.probplot(y, sparams=(y.mean(), y.std()), plot=pp_ax)\n        \n        plt.tight_layout()\n        \n    return    ","bd621b44":"np.random.seed(1)\nn_samples = int(1000)\na = 0.6\nx = w = np.random.normal(size=n_samples)\n\nfor t in range(n_samples):\n    x[t] = a*x[t-1] + w[t]\nlimit=12    \n_ = tsplot(x, lags=limit,title=\"AR(1)process\")","5da838b8":"n = int(1000)\nalphas = np.array([.444, .333])\nbetas = np.array([0.])\n\n# Python requires us to specify the zero-lag value which is 1\n# Also note that the alphas for the AR model must be negated\n# We also set the betas for the MA equal to 0 for an AR(p) model\n# For more information see the examples at statsmodels.org\nar = np.r_[1, -alphas]\nma = np.r_[1, betas]\n\nar2 = smt.arma_generate_sample(ar=ar, ma=ma, nsample=n) \n_ = tsplot(ar2, lags=12,title=\"AR(2) process\")","d06c9dcd":"n = int(1000)\n# set the AR(p) alphas equal to 0\nalphas = np.array([0.])\nbetas = np.array([0.8])\n# add zero-lag and negate alphas\nar = np.r_[1, -alphas]\nma = np.r_[1, betas]\nma1 = smt.arma_generate_sample(ar=ar, ma=ma, nsample=n) \nlimit=12\n_ = tsplot(ma1, lags=limit,title=\"MA(1) process\")","33a50afe":"n = int(1000)\nalphas = np.array([0.])\nbetas = np.array([0.6, 0.4])\nar = np.r_[1, -alphas]\nma = np.r_[1, betas]\n\nma3 = smt.arma_generate_sample(ar=ar, ma=ma, nsample=n)\n_ = tsplot(ma3, lags=12,title=\"MA(2) process\")","19b758c2":"# Simulate an ARMA(2, 2) model with alphas=[0.5,-0.25] and betas=[0.5,-0.3]\nmax_lag = 12\n\nn = int(5000) # lots of samples to help estimates\nburn = int(n\/10) # number of samples to discard before fit\n\nalphas = np.array([0.8, -0.65])\nbetas = np.array([0.5, -0.7])\nar = np.r_[1, -alphas]\nma = np.r_[1, betas]\n\narma22 = smt.arma_generate_sample(ar=ar, ma=ma, nsample=n, burnin=burn)\n_ = tsplot(arma22, lags=max_lag,title=\"ARMA(2,2) process\")","681b9d98":"best_aic = np.inf \nbest_order = None\nbest_mdl = None\n\nrng = range(5)\nfor i in rng:\n    for j in rng:\n        try:\n            tmp_mdl = smt.ARMA(arma22, order=(i, j)).fit(method='mle', trend='nc')\n            tmp_aic = tmp_mdl.aic\n            if tmp_aic < best_aic:\n                best_aic = tmp_aic\n                best_order = (i, j)\n                best_mdl = tmp_mdl\n        except: continue\n\n\nprint('aic: {:6.5f} | order: {}'.format(best_aic, best_order))","89f08f85":"best_aic = np.inf \nbest_order = None\nbest_mdl = None\n\nrng = range(5)\nfor i in rng:\n    for j in rng:\n        try:\n            tmp_mdl = smt.ARMA(new_ts.values, order=(i, j)).fit(method='mle', trend='nc')\n            tmp_aic = tmp_mdl.aic\n            if tmp_aic < best_aic:\n                best_aic = tmp_aic\n                best_order = (i, j)\n                best_mdl = tmp_mdl\n        except: continue\n\n\nprint('aic: {:6.5f} | order: {}'.format(best_aic, best_order))","4f85fdbe":"ts = sales.groupby(['date_block_num'])['item_cnt_day'].sum()\nts.index = pd.date_range(start = '2013-01-01',end='2015-10-01', freq = 'MS')\nts=ts.reset_index()\nts.head()","329217be":"from fbprophet import Prophet","0d02b6d4":"ts.columns=['ds','y']\nmodel = Prophet( yearly_seasonality=True) #instantiate Prophet with only yearly seasonality as our data is monthly \nmodel.fit(ts) #fit the model with your dataframe","b587b7ff":"future = model.make_future_dataframe(periods = 5, freq = 'MS')  \n# now lets make the forecasts\nforecast = model.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","fcd2a061":"model.plot(forecast)","ec683c9d":"model.plot_components(forecast)","b7f66406":"monthly_shop_sales=sales.groupby([\"date_block_num\",\"shop_id\"])[\"item_cnt_day\"].sum()\n# get the shops to the columns\nmonthly_shop_sales=monthly_shop_sales.unstack(level=1)\nmonthly_shop_sales=monthly_shop_sales.fillna(0)\nmonthly_shop_sales.index=dates\nmonthly_shop_sales=monthly_shop_sales.reset_index()\nmonthly_shop_sales.head()","1ba13dfe":"start_time=time.time()\n\n# Calculating the base forecasts using prophet\n# From HTSprophet pachage -- https:\/\/github.com\/CollinRooney12\/htsprophet\/blob\/master\/htsprophet\/hts.py\nforecastsDict = {}\nfor node in range(len(monthly_shop_sales)):\n    # take the date-column and the col to be forecasted\n    nodeToForecast = pd.concat([monthly_shop_sales.iloc[:,0], monthly_shop_sales.iloc[:, node+1]], axis = 1)\n#     print(nodeToForecast.head())  # just to check\n# rename for prophet compatability\n    nodeToForecast = nodeToForecast.rename(columns = {nodeToForecast.columns[0] : 'ds'})\n    nodeToForecast = nodeToForecast.rename(columns = {nodeToForecast.columns[1] : 'y'})\n    growth = 'linear'\n    m = Prophet(growth, yearly_seasonality=True)\n    m.fit(nodeToForecast)\n    future = m.make_future_dataframe(periods = 1, freq = 'MS')\n    forecastsDict[node] = m.predict(future)","4f8fd485":"nCols = len(list(forecastsDict.keys()))+1\nfor key in range(0, nCols-1):\n    f1 = np.array(forecastsDict[key].yhat)\n    f2 = f1[:, np.newaxis]\n    if key==0:\n        predictions=f2.copy()\n       # print(predictions.shape)\n    else:\n        predictions = np.concatenate((predictions, f2), axis = 1)","2c5b1441":"predictions_unknown= predictions[-1]","500ba243":"predictions_unknown","32863d6f":"<h1><b>Check stationarity with ADF tests<\/b><\/h1>","476fbf9a":"**seasonality** can be seen in the above time series"}}