{"cell_type":{"4940bf12":"code","720ff997":"code","f879a8f2":"code","b84eb2fb":"code","47abea5f":"code","2c4a5eb7":"code","b11275e6":"code","b9c8f870":"code","f654b086":"code","2db9012d":"code","c3076a2b":"code","7ed800cf":"code","e63bf6a7":"code","eea8e61a":"code","379116a2":"code","869b6e64":"code","8c957b5c":"code","0d143524":"code","1c9950a2":"code","73b526d1":"code","c26b408a":"code","3b925fb3":"code","7187c3d4":"code","d594356b":"code","214b8789":"code","ef2cd997":"code","b86f3e0a":"code","36816209":"code","60eb2f9e":"code","4aa5acb6":"code","b2d4eca7":"code","0ae84c04":"code","306e20a3":"code","d4b23d87":"code","8bbb3591":"code","c49ae0d8":"code","ad3d0a86":"code","064a4392":"code","dab02058":"markdown","a5964165":"markdown","4e098dd4":"markdown","7f562a95":"markdown","c4581ff1":"markdown","395ba821":"markdown","00f0e9c5":"markdown","db2f69fe":"markdown","5586ee9d":"markdown","4dc72c64":"markdown","20c5738a":"markdown","c9816c7a":"markdown","c07c4573":"markdown","21d77bd9":"markdown"},"source":{"4940bf12":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport gc\nimport seaborn as sns\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import OneHotEncoder\nfrom datetime import datetime, timedelta\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc, classification_report, roc_auc_score\nfrom sklearn.preprocessing import LabelEncoder\nimport matplotlib.dates as mdates\nfrom matplotlib.collections import LineCollection\nfrom matplotlib.colors import ListedColormap, BoundaryNorm\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.impute import KNNImputer\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nimport matplotlib.pyplot as plt\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.over_sampling import RandomOverSampler\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import confusion_matrix,precision_recall_curve, \\\nroc_auc_score,roc_curve,recall_score,classification_report, f1_score\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom collections import Counter\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import LeaveOneOut\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom lightgbm import LGBMClassifier\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.decomposition import PCA\nimport imblearn\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.impute import KNNImputer","720ff997":"df = pd.read_csv(\"..\/input\/ai4digigov2021\/queue_dataset_train.csv\")\ndf.info()","f879a8f2":"df.isna().sum()","b84eb2fb":"df['customer_age_appl']","47abea5f":"df[\"customer_age_appl\"].fillna(df[\"customer_age_appl\"].mode().iloc[0], inplace=True) ","2c4a5eb7":"df.isna().sum()","b11275e6":"df['time_start_process']","b9c8f870":"df[\"time_start_process\"].fillna(df[\"time_start_process\"].mode().iloc[0], inplace=True) ","f654b086":"df.isna().sum()","2db9012d":"df.shape","c3076a2b":"Counter(df.service_canceled)","7ed800cf":"df.head()","e63bf6a7":"X = df.iloc[:, 1:-1]\ny = df.iloc[:, -1]","eea8e61a":"rus = RandomUnderSampler()\nX_rus, y_rus = rus.fit_resample(X,y)\nCounter(y_rus)","379116a2":"X_new = df[['branch_name', 'customer_age_appl', 'customer_gender', 'service_name', 'service_name_2', \n            'operator_count', 'previous_customer_count', 'time_start_process', 'date', 'customer_city',]]\nX_new.head()","869b6e64":"X_new['customer_age_appl'] = X_new['customer_age_appl'][X_new['customer_age_appl'] != '101-105' ]\nX_new['customer_age_appl'] = X_new['customer_age_appl'][X_new['customer_age_appl'] != '106-110' ]\nX_new['time_start_process'] = X_new['time_start_process'].apply(lambda ss: int(int(ss[:2])*60+int(ss[3:5])))\nX_new['date'] = pd.to_datetime(X_new['date']).dt.day_name()","8c957b5c":"X_new.head()","0d143524":"rus = RandomUnderSampler()\nX_rus, y_rus = rus.fit_resample(X_new,y)\nCounter(y_rus)","1c9950a2":"X_train, X_test, y_train, y_test = train_test_split(X_rus, y_rus, random_state=42)","73b526d1":"pipe5 = Pipeline(steps=[\n    ('preprocessing', ColumnTransformer(transformers=[\n        ('numeric', Pipeline(steps=[\n            ('scale', StandardScaler()),\n        ]), ['operator_count', 'previous_customer_count', 'time_start_process']),\n        ('categorical', Pipeline(steps=[\n            ('ohe', OneHotEncoder()),\n        ]), ['branch_name', 'customer_age_appl', 'service_name_2', 'service_name', 'customer_gender', 'date']),\n    ])),\n    ('classifier', CatBoostClassifier(silent=True))\n])\npipe5.fit(X_train, y_train)\ny_predicted=pipe5.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_predicted[:, 1]))\n\ny_predicted=pipe5.predict_proba(X_new)\nprint(roc_auc_score(y, y_predicted[:, 1]))","c26b408a":"pipe6 = Pipeline(steps=[\n    ('preprocessing', ColumnTransformer(transformers=[\n        ('numeric', Pipeline(steps=[\n            ('scale', StandardScaler()),\n        ]), ['operator_count', 'previous_customer_count', 'time_start_process']),\n        ('categorical', Pipeline(steps=[\n            ('ohe', OneHotEncoder()),\n        ]), ['branch_name', 'customer_age_appl', 'service_name_2', 'service_name', 'customer_gender', 'date', 'customer_city']),\n    ])),\n    ('classifier', CatBoostClassifier(silent=True))\n])\npipe6.fit(X_train, y_train)\ny_predicted=pipe6.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_predicted[:, 1]))\n\ny_predicted=pipe6.predict_proba(X_new)\nprint(roc_auc_score(y, y_predicted[:, 1]))","3b925fb3":"y_predicted=pipe3.predict_proba(X_new)\nprint(roc_auc_score(y, y_predicted[:, 1]))","7187c3d4":"print(X_train.shape)\nprint(X_new.shape)\nprint(test_X.shape)","d594356b":"rus = RandomUnderSampler(sampling_strategy=0.8)\nX_rus1, y_rus1 = rus.fit_resample(X_new,y)\nCounter(y_rus1)","214b8789":"X_train, X_test, y_train, y_test = train_test_split(X_rus1, y_rus1, random_state=42)","ef2cd997":"pipe61 = Pipeline(steps=[\n    ('preprocessing', ColumnTransformer(transformers=[\n        ('numeric', Pipeline(steps=[\n            ('scale', StandardScaler()),\n        ]), ['operator_count', 'previous_customer_count', 'time_start_process']),\n        ('categorical', Pipeline(steps=[\n            ('ohe', OneHotEncoder()),\n        ]), ['branch_name', 'customer_age_appl', 'service_name_2', 'service_name', 'customer_gender', 'date', 'customer_city']),\n    ])),\n    ('classifier', CatBoostClassifier(silent=True))\n])\npipe61.fit(X_train, y_train)\ny_predicted=pipe61.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_predicted[:, 1]))\n\ny_predicted=pipe61.predict_proba(X_new)\nprint(roc_auc_score(y, y_predicted[:, 1]))","b86f3e0a":"pipe62 = Pipeline(steps=[\n    ('preprocessing', ColumnTransformer(transformers=[\n        ('numeric', Pipeline(steps=[\n            ('scale', MinMaxScaler()),\n        ]), ['operator_count', 'previous_customer_count', 'time_start_process']),\n        ('categorical', Pipeline(steps=[\n            ('ohe', OneHotEncoder()),\n        ]), ['branch_name', 'customer_age_appl', 'service_name_2', 'service_name', 'customer_gender', 'date', 'customer_city']),\n    ])),\n    ('classifier', CatBoostClassifier(silent=True))\n])\npipe62.fit(X_train, y_train)\ny_predicted=pipe62.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_predicted[:, 1]))\n\ny_predicted=pipe62.predict_proba(X_new)\nprint(roc_auc_score(y, y_predicted[:, 1]))","36816209":"pipe63 = Pipeline(steps=[\n    ('preprocessing', ColumnTransformer(transformers=[\n        ('numeric', Pipeline(steps=[\n            ('scale', RobustScaler()),\n        ]), ['operator_count', 'previous_customer_count', 'time_start_process']),\n        ('categorical', Pipeline(steps=[\n            ('ohe', OneHotEncoder()),\n        ]), ['branch_name', 'customer_age_appl', 'service_name_2', 'service_name', 'customer_gender', 'date', 'customer_city']),\n    ])),\n    ('classifier', CatBoostClassifier(silent=True))\n])\npipe63.fit(X_train, y_train)\ny_predicted=pipe63.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_predicted[:, 1]))\n\ny_predicted=pipe63.predict_proba(X_new)\nprint(roc_auc_score(y, y_predicted[:, 1]))","60eb2f9e":"pipe71 = Pipeline(steps=[\n    ('preprocessing', ColumnTransformer(transformers=[\n        ('numeric', Pipeline(steps=[\n            ('scale', StandardScaler()),\n        ]), ['operator_count', 'previous_customer_count', 'time_start_process']),\n        ('categorical', Pipeline(steps=[\n            ('ohe', OneHotEncoder()),\n        ]), ['branch_name', 'customer_age_appl', 'service_name_2', 'service_name', \n             'customer_gender', 'date', 'customer_city']),\n    ])),\n    ('classifier',  CatBoostClassifier(silent=True))\n])\npipe71.fit(X_train, y_train)\ny_predicted=pipe71.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_predicted[:, 1]))\n\ny_predicted=pipe71.predict_proba(X_new)\nprint(roc_auc_score(y, y_predicted[:, 1]))","4aa5acb6":"q_df_test = pd.read_csv(\"..\/input\/ai4digigov2021\/queue_dataset_test.csv\")","b2d4eca7":"q_df_test.isna().sum()","0ae84c04":"q_df_test[\"customer_age_appl\"].fillna(q_df_test[\"customer_age_appl\"].mode().iloc[0], inplace=True) \nq_df_test[\"time_start_process\"].fillna(q_df_test[\"time_start_process\"].mode().iloc[0], inplace=True) \nq_df_test['time_start_process'] = q_df_test['time_start_process'].apply(lambda ss: int(int(ss[:2])*60+int(ss[3:5])))\nq_df_test['date'] = pd.to_datetime(q_df_test['date']).dt.day_name()","306e20a3":"test_X = q_df_test[['branch_name', 'customer_age_appl', 'customer_gender', 'service_name', 'service_name_2',  \n                    'operator_count', 'previous_customer_count', \n                    'time_start_process', 'date', 'customer_city']]\ntest_X.head()","d4b23d87":"# Write submission to csv\ny_pred_test = pipe71.predict_proba(test_X)\ny_scores_test = y_pred_test[:, 1]\n\nq_df_test['service_canceled'] = y_scores_test\nq_df_test[[\"id\", \"service_canceled\"]].to_csv(\"baseline_submission_71.csv\", index=False)","8bbb3591":"ss = '11:27:32'\nint(int(ss[:2])*60+int(ss[3:5]))","c49ae0d8":"X_new['time_start_process'] = X_new['time_start_process'].apply(lambda ss: int(int(ss[:2])*60+int(ss[3:5])))","ad3d0a86":"X_new['time_start_process']","064a4392":"X['date'] = pd.to_datetime(X['date']).dt.day_name()\nX['date'].unique()","dab02058":"## Draft","a5964165":"## People between age 100 110 are causing problem so removed them and they are not even in test data\n## Also converted date to weekdays\n## And Engineered time variable","4e098dd4":"# Lets load the data","7f562a95":"## Catboost as base model \n## We used One Hot encoding, Standart Scaler","c4581ff1":"# Imputing missing values","395ba821":"## Our Final model is the above","00f0e9c5":"## The columns we need","db2f69fe":"# Models","5586ee9d":"## Train test split","4dc72c64":"##  Try different Undersampling strategies","20c5738a":"## Under sample data","c9816c7a":"## Predict","c07c4573":"# Read and modify test data to our standarts","21d77bd9":"## No missing values left in train data"}}