{"cell_type":{"025cb737":"code","e2f940c2":"code","37d4bb1a":"code","c8b2abd3":"code","f8eaeda4":"code","d47ed350":"code","b7b1df24":"code","75bb83e0":"code","b9bcb088":"code","f0197f3a":"code","7ec32f61":"code","63f1152b":"code","a573b8d1":"code","822cf2e4":"code","48056705":"code","008f449f":"code","26a4b9a0":"code","8821dfd6":"code","74a7231b":"code","e0c464c8":"code","74741c4b":"code","3ed5e2ce":"code","00397092":"code","2124b6e1":"markdown","64d096b9":"markdown","437df484":"markdown","642bcbe5":"markdown","97aef0c4":"markdown","4c43b65b":"markdown","28d169ca":"markdown","61b3e12d":"markdown","bcd31ad4":"markdown","bd447514":"markdown","35a777e6":"markdown","3de0d0af":"markdown","f662bb73":"markdown","49e67580":"markdown","5e3bb121":"markdown","919ae216":"markdown","b0080608":"markdown","e186c591":"markdown","f13f677c":"markdown","ae8a968e":"markdown"},"source":{"025cb737":"#import necessary packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\n#Read Data\ntrain = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/test.csv\")\n#Having quick look at the data\ntrain.head()","e2f940c2":"null_list = train.isnull().sum()\nprint(null_list[null_list != 0] )","37d4bb1a":"null_list_test=test.isnull().sum()\nprint(null_list_test[null_list_test!=0])","c8b2abd3":"check_fireplace = train[['Fireplaces','FireplaceQu']]\ncheck_fireplace[check_fireplace['FireplaceQu'].isnull()].head()","f8eaeda4":"valid_na_list = ['Alley', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature']\ntrain[null_list[valid_na_list].index].dtypes","d47ed350":"test[null_list_test[valid_na_list].index].dtypes","b7b1df24":"#Checking the unique number of values in each\ntrain[null_list[valid_na_list].index].nunique()","75bb83e0":"#Let's replace NA by 0\ntrain[valid_na_list]=train[valid_na_list].fillna('0')\ntest[valid_na_list]=test[valid_na_list].fillna('0')\n#validating the null list again\nnull_list=train.isnull().sum()\nnull_list_test=test.isnull().sum()\nprint('-----NA in train set-----')\nprint(null_list[null_list != 0])\nprint()\nprint('-----NA in test set-----')\nprint(null_list_test[null_list_test!=0])","b9bcb088":"#Now check the dtype of left features\ntrain[null_list[null_list !=0].index].dtypes","f0197f3a":"mean_LF = round(train['LotFrontage'].mean(),2)\ntrain['LotFrontage'] = train['LotFrontage'].fillna(mean_LF)\n\nmean_GB = round(train['GarageYrBlt'].mean(),2)\ntrain['GarageYrBlt'] = train['GarageYrBlt'].fillna(mean_GB)\n\n#validating the null list again\nnull_list=train.isnull().sum()\nnull_list[null_list != 0]","7ec32f61":"train.dropna(0,inplace=True)\ntrain.shape","63f1152b":"#validating the null list again\nnull_list=train.dropna(0).isnull().sum()\nnull_list[null_list != 0]","a573b8d1":"train.duplicated().sum()","822cf2e4":"#List out all categorical features\ncat_feats = train.columns[train.dtypes== object]\ncat_feats","48056705":"train[cat_feats].nunique()","008f449f":"feat_for_label = ['LotShape','LandContour','Utilities','LandSlope','ExterQual','ExterCond','BsmtQual','BsmtCond','BsmtExposure',\n'BsmtFinType1','BsmtFinType2','HeatingQC','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual',\n'GarageCond','PoolQC','Fence']\n\nfeat_for_oneHot = ['MSZoning','Street','Alley','LotConfig','Condition1','Condition2','BldgType','HouseStyle','RoofStyle',\n'RoofMatl','MasVnrType','Foundation','Heating','CentralAir','Electrical','PavedDrive','MiscFeature','SaleType','SaleCondition']","26a4b9a0":"#Will perform Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\nencoded_train=train[train.columns[train.dtypes != object]]\n\nLE = LabelEncoder()\nfor feature in feat_for_label:\n    encoded_train[feature] = LE.fit_transform(train[feature])\n\nprint(encoded_train.shape)\nprint(encoded_train.head())","8821dfd6":"#Will perform One-Hot Encoding\nfrom sklearn.preprocessing import OneHotEncoder\n\nOH = OneHotEncoder(sparse=False,handle_unknown='ignore')\nOH_vals=pd.DataFrame(OH.fit_transform(train[feat_for_oneHot]),columns=OH.get_feature_names(feat_for_oneHot))\n\n#OH was changing index(adding rows) so needed to reset_index, but reset_index adds new column so added drop=True to avoid that\nencoded_train.reset_index(drop=True,inplace=True)\nencoded_train=pd.concat([encoded_train,OH_vals],axis=1)\nencoded_train.index = train.index\n\nprint(encoded_train.shape)\nprint(encoded_train.head())","74a7231b":"obj_list = ['Neighborhood','Exterior1st','Exterior2nd']\nfrom sklearn.feature_extraction import FeatureHasher\nfh = FeatureHasher(n_features=6, input_type='string')\nencoded_train.reset_index(drop=True,inplace=True)\nfor i in obj_list:\n    hashed_features = fh.fit_transform(train[i])\n    column = [i+'_1',i+'_2',i+'_3',i+'_4',i+'_5',i+'_6']\n    hashed_features = pd.DataFrame(hashed_features.toarray(),columns=column)\n    print(hashed_features.shape)\n    encoded_train=pd.concat([encoded_train, hashed_features], \n              axis=1)\nencoded_train.index=train.index\nencoded_train.shape","e0c464c8":"encoded_train.head()","74741c4b":"#is there any categorical column?\n(encoded_train.dtypes == object).sum()","3ed5e2ce":"#Drop the ID column \nencoded_train.drop(axis=1,columns='Id',inplace=True)\nencoded_train.describe()","00397092":"for i in range(encoded_train.shape[1]):\n    mean  = encoded_train.iloc[:,i].min()\n    max_min = encoded_train.iloc[:,i].max() - encoded_train.iloc[:,i].min()\n    temp = encoded_train.iloc[:,i]\n    encoded_train.iloc[:,i] = round((temp - mean) \/ max_min,3)\n\nencoded_train.describe()","2124b6e1":"<hr><\/hr>\n\n## Identify Missing values\n\nLet's start with identifying the missing values","64d096b9":"Let's perform the Hashing trick","437df484":"| Feature | Type | # of Unique Values | Encoding |\n|---------|:----:|:------------------:|----------|\n| MSZoning | nominal | 5 | One Hot |\n| Street | nominal | 2 | One Hot |\n| Alley | nominal | 3 | One Hot |\n| LotShape | ordinal | 4 | Label |\n| LandContour | ordinal | 4 | Label |\n| Utilities | ordinal | 2 | Label |\n| LotConfig | nominal | 5 | One Hot |\n| LandSlope | ordinal | 3 | Label |\n| Neighborhood | nominal | 25 | Will see later |\n| Condition1 | nominal | 9 | One Hot |\n| Condition2 | nominal | 8 | One Hot |\n| BldgType | nominal | 5 | One Hot |\n| HouseStyle | nominal | 8 | One Hot |\n| RoofStyle | nominal | 6 | One Hot |\n| RoofMatl | nominal | 8 | One Hot |\n| Exterior1st | nominal | 15 | Will see later |\n| Exterior2nd | nominal | 16 | Will see later |\n| MasVnrType | nominal | 4 | One Hot |\n| ExterQual | ordinal | 4 | Label |\n| ExterCond | ordinal | 5 | Label |\n| Foundation | nominal | 6 | One Hot |\n| BsmtQual | ordinal | 5 | Label |\n| BsmtCond | ordinal | 5 | Label |\n| BsmtExposure | ordinal | 5 | Label |\n| BsmtFinType1 | ordinal | 7 | Label |\n| BsmtFinType2 | ordinal | 7 | Label |\n| Heating | nominal | 6 | One Hot |\n| HeatingQC | ordinal | 5 | Label |\n| CentralAir | nominal | 2 | One Hot |\n| Electrical | nominal | 5 | One Hot |\n| KitchenQual | ordinal | 4 | Label |\n| Functional | ordinal | 7 | Label |\n| FireplaceQu | ordinal | 6 | Label |\n| GarageType | ordinal | 7 | Label |\n| GarageFinish | ordinal | 4 | Label |\n| GarageQual | ordinal | 6 | Label |\n| GarageCond | ordinal | 6 | Label |\n| PavedDrive | nominal | 3 | One Hot |\n| PoolQC | ordinal | 4 | Label |\n| Fence | ordinal | 5 | Label |\n| MiscFeature | nominal | 5 | One Hot |\n| SaleType | nominal | 9 | One Hot |\n| SaleCondition | nominal | 6 | One Hot |","642bcbe5":"### Replace null value with category\nas per the data description provided with data, there are <strong>features that have Na as valid data<\/strong>,\n    Alley,\n    BsmtQual,\n    BsmtCond,\n    BsmtExposure,\n    BsmtFinType1,\n    BsmtFinType2,\n    FireplaceQu,\n    GarageType,\n    GarageFinish,\n    GarageQual,\n    GarageCond,\n    PoolQC,\n    Fence,\n    MiscFeature\n    \nfor example, The NA in FireplaceQu means no Fireplace(can be verified with the Fireplaces Feature)","97aef0c4":"### To Be Continued...","4c43b65b":"Performing Mean Normalization,\n![meannormalization.png](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/5c591a0eeba163a12f69f937adbae5886d6273db)","28d169ca":"Now as checked the rows have decreased by 8","61b3e12d":"Now we need to replace Nan in all above mentioned features with appropriate values.\n\nFor that, we will have a look at their datatype first","bcd31ad4":"Now will try to identify the type of data (viz. nominal, ordinal, interval and ratio) and figure out which encoding to perform","bd447514":"Next we see that LotFrontage and GarageYrBlt has around 18% and 5% missing values resp.\nAs the number is low but not too low, we roll out the possibility to delete Rows\/Columns, and go ahead to replace null values with their respective means.\n\n### Replace Null with Mean","35a777e6":"we have 164 columns after OH\nnext there were 3 columns for hashing\n3 features * 6 hashed columns = 18 new columns\n164 old columns + 18 new columns = 182 total columns","3de0d0af":"encoded_train = numerical + Label encoded = 59 columns<br><\/br>\nencoded = encoded_train + sum(unique value in each OH feature) = 59 + 105 = 164 columns\n\nWhich means we are on right track!! Great!\n\nNext need to figure out what needs to be done with below columns\n\n| Feature | Type | unique values | Encoding |\n|---------|:----:|:-------------:|----------|\n| Neighborhood | nominal | 25 | Will see now |\n| Exterior1st | nominal | 15 | Will see now |\n| Exterior2nd | nominal | 16 | Will see now |","f662bb73":"Data Cleaning is an integral part of Pre-processing, as it helps to prepare the data for ML algorithms, and in some cases it also helps to create more sense of the data. But knowledge of data is equally important as it helps in making decisions like which data is important and which is not so that we can simplify our dataset.\n\nThe Data Cleaning Workflow that I will folow in this notebook is,\n\n<ul><li>Handle Missing Values<\/li>\n    <li>Scrub for Duplicate Values<\/li>\n    <li>Handle Categorical Data<\/li>\n    <li>Perform Feature Scaling<\/li><\/ul>\n    \nI will be using Housing Prices dataset: https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\n\n![housebanner.png](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/5407\/media\/housesbanner.png)\n\n","49e67580":"## Handle Missing Values\n\nThere are 6 ways of handling missing values(that i'am aware of)\n<ul><li>Delete rows<\/li>\n    <li>Delete Column<\/li>\n    <ul><li>Possible when more than 50% data of the column is missing<\/li><\/ul>\n    <li>Replace null values with Mean<\/li>\n    <li>Replace null value with category(in this case 0, indicating zero floors)<\/li>\n    <li>predict the missing value<\/li>\n    <li>use algorithm that can work with missing values<\/li><\/ul>","5e3bb121":"#### Great! We have handeled all the missing values\n\nSo, the next step in our Data Cleaning process is to scrub data for Duplicate values\n<hr><\/hr>\n\n## Scrub Data for Duplicates","919ae216":"These null values contribute < 0.5% to the dataset hence will delete the rows\n\n### Delete Rows with null value\n\nThe current shape of Train set is (1460, 81)","b0080608":"If you have any questions or advice, I will be happy to hear them.","e186c591":"Now let's check the number of unique values in each so that we can decide on the type of encoding to use","f13f677c":"There is no categorical column left. Nice!!\n\n## Feature Scaling\n\nNeed to convert all the features to approximately same range\n\n","ae8a968e":"#### Looks like duplicate rows do not exist. Great!!\n\nSo we move on to the next step.\n<hr><\/hr>\n\n## Handle Categorical Data\n\n\nThere are multiple ways to handle Categorical Data,\n<ul><li>Drop Categorical features\n        <ul><li>This is easiest way, but will work only if column do not contain meaningful data. So, I will leave this dropping part to feature selection stage<\/ul>\n    <\/li>\n    <li>One-Hot Encoding<\/li>\n    <li>Label Encoding<\/li>\n    <li>Count Encoding<\/li>\n    <li>Target Encoding<\/li>\n    <li>CatBoost Encoding<\/li><\/ul>"}}