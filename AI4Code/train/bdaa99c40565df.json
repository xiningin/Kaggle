{"cell_type":{"5468ee1b":"code","595fc793":"code","952915a7":"code","3f6feb2a":"code","35319dfd":"code","78133f53":"code","fa828097":"code","b0ee3e1b":"code","0530e931":"code","1bd2e0dc":"code","5f881fc0":"code","8a82a273":"code","92e11365":"code","1ad44774":"code","e8dc9c5c":"code","4430bf9f":"code","0520a6f5":"code","33e270d2":"code","d8957d12":"code","2a622185":"code","281381a0":"code","8229285b":"code","4d79a132":"code","91c04688":"code","8c7bf068":"code","113816c6":"code","1d2a2471":"code","08db703f":"code","7da06bfc":"code","7a2cafb3":"code","7ba290b3":"code","8e00bc6d":"code","bd6509bc":"code","33b8870c":"code","5be0e0a2":"code","367f8487":"code","93dec4d1":"code","faa33bc8":"code","c9afb8aa":"code","3e66a3a8":"code","4a794f84":"markdown","908d6d8b":"markdown","d728d27d":"markdown","203c41bd":"markdown","8fd521c5":"markdown","0e9a83b2":"markdown","674203a4":"markdown","efd47f93":"markdown"},"source":{"5468ee1b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.utils import resample\nfrom sklearn.utils import shuffle\nfrom sklearn.preprocessing import StandardScaler","595fc793":"df = pd.read_csv('..\/input\/water-potability\/water_potability.csv')","952915a7":"df.head()","3f6feb2a":"df.info()","35319dfd":"df.isnull().sum()","78133f53":"df.shape","fa828097":"df.Potability.value_counts()","b0ee3e1b":"df = df.dropna()","0530e931":"df.head()","1bd2e0dc":"df.shape","5f881fc0":"df.Potability.value_counts()","8a82a273":"df_notpotable  = df[df['Potability']==0]\ndf_potable = df[df['Potability']==1] ","92e11365":"df_notpotable.head()","1ad44774":"df_potable.head()","e8dc9c5c":"df_potable_resample = resample(df_potable, replace = True, n_samples = 1200, random_state = 0)","4430bf9f":"df_potable_resample.shape","0520a6f5":"df = pd.concat([df_notpotable, df_potable_resample])","33e270d2":"df.shape","d8957d12":"df.Potability.value_counts()","2a622185":"df = shuffle(df, random_state=0) ","281381a0":"df.hist(bins=10, figsize=(20,15), color = 'teal')","8229285b":"fig = plt.figure(figsize=(25,10))\n \np1 = fig.add_subplot(2,2,1)\np1.hist(df.ph[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.ph[df.Potability == 1], bins=20, alpha = .4)\nplt.title('pH')\nplt.xlabel('pH')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,2)\np1.hist(df.Hardness[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Hardness[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Hardness')\nplt.xlabel('Hardness')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,3)\np1.hist(df.Solids[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Solids[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Solids')\nplt.xlabel('Solids')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,4)\np1.hist(df.Chloramines[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Chloramines[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Chloramines')\nplt.xlabel('Chloramines')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n \nplt.subplots_adjust(wspace=.1, hspace=.3)\nplt.show()","4d79a132":"fig = plt.figure(figsize=(25,10))\n\np1 = fig.add_subplot(2,2,1)\np1.hist(df.Sulfate[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Sulfate[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Sulfate')\nplt.xlabel('Sulfate')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,2)\np1.hist(df.Conductivity[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Conductivity[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Conductivity')\nplt.xlabel('Conductivity')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,3)\np1.hist(df.Organic_carbon[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Organic_carbon[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Organic_carbon')\nplt.xlabel('Organic_carbon')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,4)\np1.hist(df.Trihalomethanes[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Trihalomethanes[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Trihalomethanes')\nplt.xlabel('Trihalomethanes')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\nplt.subplots_adjust(wspace=.1, hspace=.3)\nplt.show()","91c04688":"fig = plt.figure(figsize=(25,10))\n\np1 = fig.add_subplot(2,2,1)\np1.hist(df.Turbidity[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Turbidity[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Turbidity')\nplt.xlabel('Turbidity')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\nplt.subplots_adjust(wspace=.1, hspace=.3)\nplt.show()","8c7bf068":"from pandas.plotting import scatter_matrix\nx = scatter_matrix(df, alpha=1, figsize=(40, 20), diagonal='hist')","113816c6":"plt.figure(figsize = (15,9))\nsns.heatmap(df.corr(), annot = True)","1d2a2471":"df_corr = df.corr()\ndf_corr[\"Potability\"].sort_values(ascending=False)","08db703f":"x = df.drop(['Potability'], axis = 1)\ny = df['Potability']","7da06bfc":"st = StandardScaler()\nx_columns= x.columns\nx[x_columns] = st.fit_transform(x[x_columns])","7a2cafb3":"x.head()","7ba290b3":"x.describe()","8e00bc6d":"from sklearn.model_selection import train_test_split\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor\nfrom sklearn.ensemble  import HistGradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import accuracy_score","bd6509bc":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.1, random_state = 0)","33b8870c":"hgbc = HistGradientBoostingClassifier(random_state=0, max_leaf_nodes=None, min_samples_leaf=2, max_iter=1000)\nrf = RandomForestClassifier(min_samples_leaf = 2, n_estimators = 1000, random_state = 0)","5be0e0a2":"hgbc.fit(X_train, Y_train)\nrf.fit(X_train, Y_train)","367f8487":"hgbc_pred = hgbc.predict(X_test)\nrf_pred = rf.predict(X_test)","93dec4d1":"print('GradientBoosting : ' + str(accuracy_score(hgbc_pred, Y_test)))\nprint('RandomForest : ' + str(accuracy_score(rf_pred, Y_test)))","faa33bc8":"label = ['ph','Hardness','Solids','Chloramines','Sulfate','Conductivity','Organic_carbon','Trihalomethanes','Turbidity']","c9afb8aa":"feature = rf.feature_importances_   \n\nprint('Feature Importances:')\nfor i, feat in enumerate(label):\n    print('\\t{0:20s} : {1:>.6f}'.format(feat, feature[i]))","3e66a3a8":"# \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\uff08\u91cd\u8981\uff09\nplt.barh(label, feature)\nplt.title('feature importances')","4a794f84":"# Modelling","908d6d8b":"### Feature Description","d728d27d":"# Importing The Dataset","203c41bd":"* ph: pH of 1. water (0 to 14).\n\n* Hardness: Capacity of water to precipitate soap in mg\/L.\n\n* Solids: Total dissolved solids in ppm.\n\n* Chloramines: Amount of Chloramines in ppm.\n\n* Sulfate: Amount of Sulfates dissolved in mg\/L.\n\n* Conductivity: Electrical conductivity of water in \u03bcS\/cm.\n\n* Organic_carbon: Amount of organic carbon in ppm.\n\n* Trihalomethanes: Amount of Trihalomethanes in \u03bcg\/L.\n\n* Turbidity: Measure of light emiting property of water in NTU.\n\n* Potability: Indicates if water is safe for human consumption. Potable - 1 and Not potable - 0","8fd521c5":"### Importing ","0e9a83b2":"# EDA","674203a4":"### Finally the best Model : RandomForest with accuracy 85%","efd47f93":"# Feature Importance"}}