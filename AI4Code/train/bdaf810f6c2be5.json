{"cell_type":{"10dedc0b":"code","0f7052f6":"code","17e85290":"code","959b5cb4":"code","f404a22a":"code","87fe1a01":"code","68158b3e":"code","b3cbcc97":"code","29b6098f":"code","2249fe57":"code","926b05b8":"code","effe1db7":"code","0988c298":"code","62d1ffc4":"code","653a1f0e":"code","0d0f03f5":"code","d62c2bb8":"code","dc2bc620":"code","e330d3bd":"code","08cc8e7f":"code","a50c9a20":"code","5dfa9e5a":"code","88fbbdd9":"code","dbaac00c":"code","0b586fbc":"code","066dbf62":"code","9a116f2b":"code","ed560848":"code","2bfe690b":"code","850b4b31":"code","cb60eb53":"code","1130fa0f":"code","2a47c247":"code","15595f6a":"code","c7e0a3fb":"code","9ecb3b3c":"code","f205f58f":"code","5ddda67b":"code","133305cc":"code","9dd2ed86":"code","b2f4b866":"code","8385c5fa":"code","b5996684":"code","91ce7109":"code","4d60de27":"markdown","d0bbc1f1":"markdown","a1716492":"markdown","3d0391f1":"markdown","3d4ead09":"markdown","dbee94ab":"markdown","723c2c50":"markdown","09fef723":"markdown","26825e1c":"markdown","a5acfd3c":"markdown","335a63ee":"markdown","5b31122a":"markdown","94ca59ab":"markdown","dc8bd2dc":"markdown","4744bf46":"markdown","b6fc4183":"markdown","fec76f12":"markdown","44ef8444":"markdown","5269594f":"markdown","b5438043":"markdown","a4f86526":"markdown","11f55b1d":"markdown","aeb2c547":"markdown","f3e903d5":"markdown","3776c34c":"markdown","351fbb54":"markdown","62998e80":"markdown","090324fc":"markdown","13ec4868":"markdown","d1ff5dec":"markdown","16b7a3d1":"markdown","9a47aa31":"markdown"},"source":{"10dedc0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f7052f6":"\nfrom os import listdir\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n#plotly\n!pip install chart_studio\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\n\n\n#pydicom\nimport pydicom\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Settings for pretty nice plots\nplt.style.use('fivethirtyeight')\nplt.show()\n","17e85290":"# List files available\nprint(os.listdir(\"..\/input\/siim-isic-melanoma-classification\"))","959b5cb4":"# Defining data path\nIMAGE_PATH = \"..\/input\/siim-isic-melanoma-classification\/\"\n\ntrain_df = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')\ntest_df = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')\n\n\n#Training data\nprint('Training data shape: ', train_df.shape)\ntrain_df.head(5)","f404a22a":"#Test data\nprint('Test data shape: ', test_df.shape)\ntest_df.head(5)","87fe1a01":"train_df.groupby(['benign_malignant']).count()['sex'].to_frame()","68158b3e":"# Null values and Data types\nprint('Train Set')\nprint(train_df.info())\nprint('-------------')\nprint('Test Set')\nprint(test_df.info())","b3cbcc97":"# Total number of images in the dataset(train+test)\nprint(\"Total images in Train set: \",train_df['image_name'].count())\nprint(\"Total images in Test set: \",test_df['image_name'].count())","29b6098f":"print(f\"The total patient ids are {train_df['patient_id'].count()}, from those the unique ids are {train_df['patient_id'].value_counts().shape[0]} \")","2249fe57":"print(f\"The total patient ids are {test_df['patient_id'].count()}, from those the unique ids are {test_df['patient_id'].value_counts().shape[0]} \")","926b05b8":"columns = train_df.keys()\ncolumns = list(columns)\nprint(columns)","effe1db7":"train_df['target'].value_counts()","0988c298":"train_df['target'].value_counts(normalize=True).iplot(kind='bar',\n                                                      yTitle='Percentage', \n                                                      linecolor='black', \n                                                      opacity=0.7,\n                                                      color='red',\n                                                      theme='pearl',\n                                                      bargap=0.8,\n                                                      gridcolor='white',\n                                                     \n                                                      title='Distribution of the Target column in the training set')","62d1ffc4":"train_df['sex'].value_counts(normalize=True)","653a1f0e":"train_df['sex'].value_counts(normalize=True).iplot(kind='bar',\n                                                      yTitle='Percentage', \n                                                      linecolor='black', \n                                                      opacity=0.7,\n                                                      color='green',\n                                                      theme='pearl',\n                                                      bargap=0.8,\n                                                      gridcolor='white',\n                                                     \n                                                      title='Distribution of the Sex column in the training set')","0d0f03f5":"z=train_df.groupby(['target','sex'])['benign_malignant'].count().to_frame().reset_index()\nz.style.background_gradient(cmap='Reds')  ","d62c2bb8":"sns.catplot(x='target',y='benign_malignant', hue='sex',data=z,kind='bar')\nplt.ylabel('Count')\nplt.xlabel('benign:0 vs malignant:1')","dc2bc620":"train_df['anatom_site_general_challenge'].value_counts(normalize=True).sort_values()","e330d3bd":"train_df['anatom_site_general_challenge'].value_counts(normalize=True).sort_values().iplot(kind='barh',\n                                                      xTitle='Percentage', \n                                                      linecolor='black', \n                                                      opacity=0.7,\n                                                      color='#FB8072',\n                                                      theme='pearl',\n                                                      bargap=0.2,\n                                                      gridcolor='white',\n                                                      title='Distribution of the imaged site in the training set')","08cc8e7f":"z1=train_df.groupby(['sex','anatom_site_general_challenge'])['benign_malignant'].count().to_frame().reset_index()\nz1.style.background_gradient(cmap='Reds')","a50c9a20":"sns.catplot(x='anatom_site_general_challenge',y='benign_malignant', hue='sex',data=z1,kind='bar')\nplt.gcf().set_size_inches(10,8)\nplt.xlabel('location of imaged site')\nplt.xticks(rotation=45,fontsize='10', horizontalalignment='right')\nplt.ylabel('count of melanoma cases')\n","5dfa9e5a":"train_df['age_approx'].iplot(kind='hist',bins=30,color='orange',xTitle='Age distribution',yTitle='Count')","88fbbdd9":"# KDE plot of age that were diagnosed as benign\nsns.kdeplot(train_df.loc[train_df['target'] == 0, 'age_approx'], label = 'Benign',shade=True)\n\n# KDE plot of age that were diagnosed as malignant\nsns.kdeplot(train_df.loc[train_df['target'] == 1, 'age_approx'], label = 'Malignant',shade=True)\n\n# Labeling of plot\nplt.xlabel('Age (years)'); plt.ylabel('Density'); plt.title('Distribution of Ages');","dbaac00c":"# KDE plot of age that were diagnosed as benign\nsns.kdeplot(train_df.loc[train_df['sex'] == 'male', 'age_approx'], label = 'Male',shade=True)\n\n# KDE plot of age that were diagnosed as malignant\nsns.kdeplot(train_df.loc[train_df['sex'] == 'female', 'age_approx'], label = 'Female',shade=True)\n\n# Labeling of plot\nplt.xlabel('Age (years)'); plt.ylabel('Density'); plt.title('Distribution of Ages');\n","0b586fbc":"train_df['diagnosis'].value_counts()","066dbf62":"train_df['diagnosis'].value_counts(normalize=True).sort_values().iplot(kind='barh',\n                                                      xTitle='Percentage', \n                                                      linecolor='black', \n                                                      opacity=0.7,\n                                                      color='blue',\n                                                      theme='pearl',\n                                                      bargap=0.2,\n                                                      gridcolor='white',\n                                                      title='Distribution in the training set')","9a116f2b":"test_df['sex'].value_counts(normalize=True)","ed560848":"test_df['sex'].value_counts(normalize=True).iplot(kind='bar',\n                                                      yTitle='Percentage', \n                                                      linecolor='black', \n                                                      opacity=0.7,\n                                                      color='green',\n                                                      theme='pearl',\n                                                      bargap=0.8,\n                                                      gridcolor='white',\n                                                     \n                                                      title='Distribution of the Sex column in the test set')","2bfe690b":"test_df['anatom_site_general_challenge'].value_counts(normalize=True).sort_values()","850b4b31":"test_df['anatom_site_general_challenge'].value_counts(normalize=True).sort_values().iplot(kind='barh',\n                                                      xTitle='Percentage', \n                                                      linecolor='black', \n                                                      opacity=0.7,\n                                                      color='#FB8072',\n                                                      theme='pearl',\n                                                      bargap=0.2,\n                                                      gridcolor='white',\n                                                      title='Distribution of the imaged site in the test set')","cb60eb53":"test_df['age_approx'].iplot(kind='hist',bins=30,color='orange',xTitle='Age distribution',yTitle='Count')","1130fa0f":"# KDE plot of age that were diagnosed as benign\nsns.kdeplot(test_df.loc[test_df['sex'] == 'male', 'age_approx'], label = 'Male',shade=True)\n\n# KDE plot of age that were diagnosed as malignant\nsns.kdeplot(test_df.loc[test_df['sex'] == 'female', 'age_approx'], label = 'Female',shade=True)\n\n# Labeling of plot\nplt.xlabel('Age (years)'); plt.ylabel('Density'); plt.title('Distribution of Ages');\n","2a47c247":"# Extract patient id's for the training set\nids_train = train_df.patient_id.values\n# Extract patient id's for the validation set\nids_test = test_df.patient_id.values\n\n# Create a \"set\" datastructure of the training set id's to identify unique id's\nids_train_set = set(ids_train)\nprint(f'There are {len(ids_train_set)} unique Patient IDs in the training set')\n# Create a \"set\" datastructure of the validation set id's to identify unique id's\nids_test_set = set(ids_test)\nprint(f'There are {len(ids_test_set)} unique Patient IDs in the training set')\n\n# Identify patient overlap by looking at the intersection between the sets\npatient_overlap = list(ids_train_set.intersection(ids_test_set))\nn_overlap = len(patient_overlap)\nprint(f'There are {n_overlap} Patient IDs in both the training and test sets')\nprint('')\nprint(f'These patients are in both the training and test datasets:')\nprint(f'{patient_overlap}')","15595f6a":"images = train_df['image_name'].values\n\n# Extract 9 random images from it\nrandom_images = [np.random.choice(images+'.jpg') for i in range(9)]\n\n# Location of the image dir\nimg_dir = IMAGE_PATH+'\/jpeg\/train'\n\nprint('Display Random Images')\n\n# Adjust the size of your images\nplt.figure(figsize=(10,8))\n\n# Iterate and plot random images\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = plt.imread(os.path.join(img_dir, random_images[i]))\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \n# Adjust subplot parameters to give specified padding\nplt.tight_layout()   ","c7e0a3fb":"benign = train_df[train_df['benign_malignant']=='benign']\nmalignant = train_df[train_df['benign_malignant']=='malignant']","9ecb3b3c":"images = benign['image_name'].values\n\n# Extract 9 random images from it\nrandom_images = [np.random.choice(images+'.jpg') for i in range(9)]\n\n# Location of the image dir\nimg_dir = IMAGE_PATH+'\/jpeg\/train'\n\nprint('Display benign Images')\n\n# Adjust the size of your images\nplt.figure(figsize=(10,8))\n\n# Iterate and plot random images\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = plt.imread(os.path.join(img_dir, random_images[i]))\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \n# Adjust subplot parameters to give specified padding\nplt.tight_layout()   ","f205f58f":"images = malignant['image_name'].values\n\n# Extract 9 random images from it\nrandom_images = [np.random.choice(images+'.jpg') for i in range(9)]\n\n# Location of the image dir\nimg_dir = IMAGE_PATH+'\/jpeg\/train'\n\nprint('Display malignant Images')\n\n# Adjust the size of your images\nplt.figure(figsize=(10,8))\n\n# Iterate and plot random images\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = plt.imread(os.path.join(img_dir, random_images[i]))\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \n# Adjust subplot parameters to give specified padding\nplt.tight_layout()   ","5ddda67b":"f = plt.figure(figsize=(16,8))\nf.add_subplot(1,2, 1)\n\nsample_img = benign['image_name'][0]+'.jpg'\nraw_image = plt.imread(os.path.join(img_dir, sample_img))\nplt.imshow(raw_image, cmap='gray')\nplt.colorbar()\nplt.title('Benign Image')\nprint(f\"Image dimensions:  {raw_image.shape[0],raw_image.shape[1]}\")\nprint(f\"Maximum pixel value : {raw_image.max():.1f} ; Minimum pixel value:{raw_image.min():.1f}\")\nprint(f\"Mean value of the pixels : {raw_image.mean():.1f} ; Standard deviation : {raw_image.std():.1f}\")\n\nf.add_subplot(1,2, 2)\n\n#_ = plt.hist(raw_image.ravel(),bins = 256, color = 'orange',)\n_ = plt.hist(raw_image[:, :, 0].ravel(), bins = 256, color = 'red', alpha = 0.5)\n_ = plt.hist(raw_image[:, :, 1].ravel(), bins = 256, color = 'Green', alpha = 0.5)\n_ = plt.hist(raw_image[:, :, 2].ravel(), bins = 256, color = 'Blue', alpha = 0.5)\n_ = plt.xlabel('Intensity Value')\n_ = plt.ylabel('Count')\n_ = plt.legend(['Red_Channel', 'Green_Channel', 'Blue_Channel'])\nplt.show()","133305cc":"f = plt.figure(figsize=(16,8))\nf.add_subplot(1,2, 1)\n\nsample_img = malignant['image_name'][235]+'.jpg'\nraw_image = plt.imread(os.path.join(img_dir, sample_img))\nplt.imshow(raw_image, cmap='gray')\nplt.colorbar()\nplt.title('Malignant Image')\nprint(f\"Image dimensions:  {raw_image.shape[0],raw_image.shape[1]}\")\nprint(f\"Maximum pixel value : {raw_image.max():.1f} ; Minimum pixel value:{raw_image.min():.1f}\")\nprint(f\"Mean value of the pixels : {raw_image.mean():.1f} ; Standard deviation : {raw_image.std():.1f}\")\n\nf.add_subplot(1,2, 2)\n\n#_ = plt.hist(raw_image.ravel(),bins = 256, color = 'orange',)\n_ = plt.hist(raw_image[:, :, 0].ravel(), bins = 256, color = 'red', alpha = 0.5)\n_ = plt.hist(raw_image[:, :, 1].ravel(), bins = 256, color = 'Green', alpha = 0.5)\n_ = plt.hist(raw_image[:, :, 2].ravel(), bins = 256, color = 'Blue', alpha = 0.5)\n_ = plt.xlabel('Intensity Value')\n_ = plt.ylabel('Count')\n_ = plt.legend(['Red_Channel', 'Green_Channel', 'Blue_Channel'])\nplt.show()","9dd2ed86":"print (pydicom.__version__)","b2f4b866":"# https:\/\/www.kaggle.com\/schlerp\/getting-to-know-dicom-and-the-data\ndef show_dcm_info(dataset):\n    print(\"Filename.........:\", file_path)\n    print(\"Storage type.....:\", dataset.SOPClassUID)\n    print()\n\n    pat_name = dataset.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    print(\"Patient's name......:\", display_name)\n    print(\"Patient id..........:\", dataset.PatientID)\n    print(\"Patient's Age.......:\", dataset.PatientAge)\n    print(\"Patient's Sex.......:\", dataset.PatientSex)\n    print(\"Modality............:\", dataset.Modality)\n    print(\"Body Part Examined..:\", dataset.BodyPartExamined)\n   \n    \n    \n    if 'PixelData' in dataset:\n        rows = int(dataset.Rows)\n        cols = int(dataset.Columns)\n        print(\"Image size.......: {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(dataset.PixelData)))\n        if 'PixelSpacing' in dataset:\n            print(\"Pixel spacing....:\", dataset.PixelSpacing)","8385c5fa":"def plot_pixel_array(dataset, figsize=(5,5)):\n    plt.figure(figsize=figsize)\n    plt.grid(False)\n    plt.imshow(dataset.pixel_array)\n    plt.show()\n    \ni = 1\nnum_to_plot = 5\nfor file_name in os.listdir('..\/input\/siim-isic-melanoma-classification\/train\/'):\n        file_path = os.path.join('..\/input\/siim-isic-melanoma-classification\/train\/',file_name)\n        dataset = pydicom.dcmread(file_path)\n        show_dcm_info(dataset)\n        plot_pixel_array(dataset)\n    \n        if i >= num_to_plot:\n            break\n    \n        i += 1","b5996684":"# source: https:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification\/discussion\/154658\nfolder='train'\nPATH='..\/input\/siim-isic-melanoma-classification\/'\n\ndef extract_DICOM_attributes(folder):\n    images = list(os.listdir(os.path.join(PATH, folder)))\n    df = pd.DataFrame()\n    for image in images:\n        image_name = image.split(\".\")[0]\n        dicom_file_path = os.path.join(PATH,folder,image)\n        dicom_file_dataset = pydicom.read_file(dicom_file_path)\n        study_date = dicom_file_dataset.StudyDate\n        modality = dicom_file_dataset.Modality\n        age = dicom_file_dataset.PatientAge\n        sex = dicom_file_dataset.PatientSex\n        body_part_examined = dicom_file_dataset.BodyPartExamined\n        patient_orientation = dicom_file_dataset.PatientOrientation\n        photometric_interpretation = dicom_file_dataset.PhotometricInterpretation\n        rows = dicom_file_dataset.Rows\n        columns = dicom_file_dataset.Columns\n\n        df = df.append(pd.DataFrame({'image_name': image_name, \n                        'dcm_modality': modality,'dcm_study_date':study_date, 'dcm_age': age, 'dcm_sex': sex,\n                        'dcm_body_part_examined': body_part_examined,'dcm_patient_orientation': patient_orientation,\n                        'dcm_photometric_interpretation': photometric_interpretation,\n                        'dcm_rows': rows, 'dcm_columns': columns}, index=[0]))\n    return df","91ce7109":"extract_DICOM_attributes('train')","4d60de27":"## \u6027\u5225\u306b\u3088\u3089\u306a\u3044\u30a4\u30e1\u30fc\u30b8\u30b5\u30a4\u30c8\u306e\u4f4d\u7f6e","d0bbc1f1":"## \u6027\u5225 vs \u30bf\u30fc\u30b2\u30c3\u30c8","a1716492":"## \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u3001\u753b\u50cf\u5185\u3067\u69d8\u3005\u306a\u8272\u306e\u5024\u304c\u3069\u306e\u304f\u3089\u3044\u306e\u983b\u5ea6\u3067\u767a\u751f\u3057\u3066\u3044\u308b\u304b\u3001\u3064\u307e\u308a\u30d4\u30af\u30bb\u30eb\u306e\u5f37\u5ea6\u5024\u306e\u983b\u5ea6\u3092\u30b0\u30e9\u30d5\u30a3\u30ab\u30eb\u306b\u8868\u3057\u305f\u3082\u306e\u3067\u3059\u3002RGB\u8272\u7a7a\u9593\u3067\u306f\u3001\u30d4\u30af\u30bb\u30eb\u306e\u5024\u306f0\u304b\u3089255\u307e\u3067\u306e\u7bc4\u56f2\u3067\u30010\u306f\u9ed2\u3001255\u306f\u767d\u3092\u8868\u3057\u307e\u3059\u3002\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u5206\u6790\u3059\u308b\u3053\u3068\u3067\u3001\u753b\u50cf\u306e\u660e\u308b\u3055\u3001\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u3001\u5f37\u5ea6\u5206\u5e03\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u3001\u5404\u30ab\u30c6\u30b4\u30ea\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n### \u826f\u6027\u306e\u30ab\u30c6\u30b4\u30ea\u30fc","3d0391f1":"## Test \u60a3\u8005\u3055\u3093\u306e\u5e74\u9f62\u5206\u5e03","3d4ead09":"# 2. \u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f","dbee94ab":"## \u60a3\u8005\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7 \n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306e\u4e21\u65b9\u306b\u540c\u3058\u60a3\u8005\u306e\u75c5\u5909\u753b\u50cf\u304c\u73fe\u308c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","723c2c50":"## \u60aa\u6027\u75c5\u5909\u306e\u753b\u50cf\u306e\u53ef\u8996\u5316","09fef723":"## \u8a3a\u65ad\u7d50\u679c\u306e\u5206\u5e03","26825e1c":"## Train\u30e6\u30cb\u30fc\u30afID","a5acfd3c":"### \u60aa\u6027\u30ab\u30c6\u30b4\u30ea\u30fc","335a63ee":"## \u826f\u6027\u75c5\u5909\u306e\u753b\u50cf\u306e\u53ef\u8996\u5316","5b31122a":"## \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u5185\u306eDIOCOM\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\n\n[Gabriel Preda](https:\/\/www.kaggle.com\/gpreda) \u3055\u3093\u304c [discussion forum](https:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification\/discussion\/154658) \u3067\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5171\u6709\u3057\u3066\u304f\u308c\u307e\u3057\u305f\u3002","94ca59ab":"\u3044\u304f\u3064\u304b\u306e\u5217\u306b\u6b20\u3051\u3066\u3044\u308b\u5024\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u5f8c\u307b\u3069\u51e6\u7406\u3057\u307e\u3059\u3002","dc8bd2dc":"<div align='center'><font size=\"6\" color=\"#F39C12\">SIIM-ISIC Melanoma Classification -EDA <\/font><\/div>\n<hr>\n\n![](https:\/\/impactmelanoma.org\/wp-content\/uploads\/2018\/11\/Standard-Infographic_0.jpg)\nhttps:\/\/impactmelanoma.org\/wp-content\/uploads\/2018\/11\/Standard-Infographic_0.jpg\n\n\u30e1\u30e9\u30ce\u30fc\u30de\u306f\u3001\u808c\u306e\u8272\u3092\u6c7a\u3081\u308b\u8272\u7d20\uff08\u30e1\u30e9\u30cb\u30f3\uff09\u3092\u4f5c\u308b\u30e1\u30e9\u30ce\u30b5\u30a4\u30c8\u3068\u547c\u3070\u308c\u308b\u76ae\u819a\u7d30\u80de\u304b\u3089\u767a\u751f\u3059\u308b\u76ae\u819a\u304c\u3093\u3067\u3059\u3002\u30e1\u30e9\u30ce\u30fc\u30de\u306f\u3001\u6025\u901f\u306b\u5168\u8eab\u306b\u5e83\u304c\u308b\u305f\u3081\u3001\u76ae\u819a\u304c\u3093\u306e\u4e2d\u3067\u6700\u3082\u5371\u967a\u306a\u30bf\u30a4\u30d7\u3068\u8003\u3048\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u65e9\u671f\u306b\u767a\u898b\u3055\u308c\u308c\u3070\u3001\u4e00\u822c\u7684\u306b\u306f\u975e\u5e38\u306b\u6cbb\u7642\u304c\u53ef\u80fd\u3067\u3059\u3002\nhttps:\/\/www.verywellhealth.com\/what-is-melanoma-514215\n\n[Society for Imaging Informatics in Medicine (SIIM)](https:\/\/siim.org\/page\/about_siim)\u306f\u3001\u533b\u7528\u753b\u50cf\u60c5\u5831\u5b66\u306e\u73fe\u5728\u304a\u3088\u3073\u5c06\u6765\u306e\u5229\u7528\u306b\u95a2\u5fc3\u3092\u6301\u3064\u4eba\u3005\u306e\u305f\u3081\u306e\u4e3b\u8981\u306a\u533b\u7642\u5c02\u9580\u7d44\u7e54\u3067\u3059\u3002\u3053\u306e\u5b66\u4f1a\u306e\u4f7f\u547d\u306f\u3001\u5b66\u969b\u7684\u306a\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3067\u306e\u6559\u80b2\u3001\u7814\u7a76\u3001\u30a4\u30ce\u30d9\u30fc\u30b7\u30e7\u30f3\u3092\u901a\u3058\u3066\u3001\u4f01\u696d\u5168\u4f53\u3067\u533b\u7528\u753b\u50cf\u60c5\u5831\u5b66\u3092\u767a\u5c55\u3055\u305b\u308b\u3053\u3068\u306b\u3042\u308a\u307e\u3059\u3002[The International Skin Imaging Collaboration or ISIC](https:\/\/siim.org\/page\/about_siim) Melanoma Project\u306f\u3001\u30e1\u30e9\u30ce\u30fc\u30de\u306e\u6b7b\u4ea1\u7387\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u76ae\u819a\u306e\u30c7\u30b8\u30bf\u30eb\u753b\u50cf\u51e6\u7406\u306e\u5fdc\u7528\u3092\u4fc3\u9032\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u305f\u3001\u5b66\u754c\u3068\u7523\u696d\u754c\u306e\u30d1\u30fc\u30c8\u30ca\u30fc\u30b7\u30c3\u30d7\u3067\u3059\u3002\n\nISIC\u30e1\u30e9\u30ce\u30fc\u30de\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u5305\u62ec\u7684\u306a\u76ee\u6a19\u306f\u3001\u30e1\u30e9\u30ce\u30fc\u30de\u306e\u65e9\u671f\u767a\u898b\u306e\u7cbe\u5ea6\u3068\u52b9\u7387\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u3067\u3001\u30e1\u30e9\u30ce\u30fc\u30de\u306b\u95a2\u9023\u3057\u305f\u6b7b\u4ea1\u3084\u4e0d\u5fc5\u8981\u306a\u751f\u691c\u3092\u6e1b\u3089\u3059\u52aa\u529b\u3092\u652f\u63f4\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\n## \u76ee\u7684\n\n\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u76ee\u7684\u306f\u3001\u76ae\u819a\u75c5\u5909\u306e\u753b\u50cf\u304b\u3089\u30e1\u30e9\u30ce\u30fc\u30de\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u540c\u4e00\u60a3\u8005\u5185\u306e\u753b\u50cf\u3092\u7528\u3044\u3066\u3001\u3069\u308c\u304c\u30e1\u30e9\u30ce\u30fc\u30de\u3092\u8868\u3059\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u304b\u3092\u5224\u65ad\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3064\u307e\u308a\u3001\u753b\u50cf\u4e2d\u306e\u75c5\u5909\u304c\u60aa\u6027\u304b\u826f\u6027\u304b\u306e\u78ba\u7387\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n## \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001.DIOCOM\u5f62\u5f0f\u306e\u753b\u50cf\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n* DIOCOM\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n* JPEG\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306eJPEG\u5f62\u5f0f\n* tfrecords \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e TFRecord \u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n\n\u307e\u305f\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3001\u30c6\u30b9\u30c8\u3001\u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306a\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u304cCSV\u5f62\u5f0f\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n## \u8a55\u4fa1\u6307\u6a19\u306b\u3064\u3044\u3066\n\n\u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6211\u3005\u306e\u63d0\u51fa\u7269\u306f\u3001**area under the ROC curve**\u3092\u7528\u3044\u3066\u8a55\u4fa1\u3055\u308c\u307e\u3059\u3002ROC\u66f2\u7dda\uff08\u53d7\u4fe1\u6a5f\u52d5\u4f5c\u7279\u6027\u66f2\u7dda\uff09\u3068\u306f\u3001\u3059\u3079\u3066\u306e\u5206\u985e\u3057\u304d\u3044\u5024\u306b\u304a\u3051\u308b\u5206\u985e\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u793a\u3059\u30b0\u30e9\u30d5\u3067\u3059\u3002\u3053\u306e\u66f2\u7dda\u306f\u30012\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\n\n![](https:\/\/imgur.com\/yNeAG4M.png)\n\nROC\u66f2\u7dda\u306f\u3001\u7570\u306a\u308b\u5206\u985e\u3057\u304d\u3044\u5024\u3067\u306eTPR\u5bfeFPR\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u5206\u985e\u3057\u304d\u3044\u5024\u3092\u4e0b\u3052\u308b\u3068\u3001\u3088\u308a\u591a\u304f\u306e\u9805\u76ee\u304c\u967d\u6027\u3068\u3057\u3066\u5206\u985e\u3055\u308c\u3001\u305d\u306e\u7d50\u679c\u3001\u507d\u967d\u6027\u3068\u771f\u967d\u6027\u306e\u4e21\u65b9\u304c\u5897\u52a0\u3057\u307e\u3059\u3002\u6b21\u306e\u56f3\u306f\u3001\u5178\u578b\u7684\u306aROC\u66f2\u7dda\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\n![](https:\/\/imgur.com\/N3UOcBF.png)\n\nsource: https:\/\/developers.google.com\/machine-learning\/crash-course\/classification\/roc-and-auc","4744bf46":"## Test\u753b\u50cf\u64ae\u5f71\u90e8\u4f4d","b6fc4183":"## \u753b\u50cf\u6570","fec76f12":"\n# 1. \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n\n\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u30d5\u30a9\u30fc\u30af\u3059\u308b\u5834\u5408\u306b\u5099\u3048\u3066\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3092 `ON` \u30e2\u30fc\u30c9\u306b\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002","44ef8444":"## Test\u30e6\u30cb\u30fc\u30afID","5269594f":"# 5 DIOCOM\u30d5\u30a1\u30a4\u30eb\u306e\u524d\u51e6\u7406 \nDICOM\u306f\u3001\u533b\u7528\u753b\u50cf\u3092\u4fdd\u5b58\u30fb\u4f1d\u9001\u3059\u308b\u305f\u3081\u306b\u6700\u3082\u4e00\u822c\u7684\u306b\u4f7f\u7528\u3055\u308c\u3066\u304a\u308a\u3001\u30b9\u30ad\u30e3\u30ca\u30fc\u3001\u30b5\u30fc\u30d0\u30fc\u3001\u30ef\u30fc\u30af\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u3001\u30d7\u30ea\u30f3\u30bf\u30fc\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3001\u8907\u6570\u306e\u30e1\u30fc\u30ab\u30fc\u306e\u753b\u50cf\u30a2\u30fc\u30ab\u30a4\u30d6\u901a\u4fe1\u30b7\u30b9\u30c6\u30e0\uff08PACS\uff09\u306a\u3069\u306e\u533b\u7528\u753b\u50cf\u6a5f\u5668\u3092\u7d71\u5408\u3059\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nDICOM \u753b\u50cf\u306e\u62e1\u5f35\u5b50\u306f dcm \u3067\u3059\u3002DICOM\u30d5\u30a1\u30a4\u30eb\u306b\u306f\uff0c\u30d8\u30c3\u30c0\u3068\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e2\u3064\u306e\u90e8\u5206\u304c\u3042\u308b\u3002\u30d8\u30c3\u30c0\u306f\uff0c\u30ab\u30d7\u30bb\u30eb\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u542b\u3080\u3002\u3053\u308c\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u30d7\u30ea\u30a2\u30f3\u30d6\u30eb\u3001DICOM\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3001\u30d5\u30a1\u30a4\u30eb\u30e1\u30bf\u8981\u7d20\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u5e78\u3044\u306a\u3053\u3068\u306b\u3001Pydicom\u3068\u547c\u3070\u308c\u308bPython\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066DIOCOM\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002pydicom\u3092\u4f7f\u3046\u3068\u3001\u3053\u308c\u3089\u306e\u8907\u96d1\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u7c21\u5358\u306b\u81ea\u7136\u306a\u30d1\u30a4\u30bd\u30cb\u30c3\u30af\u69cb\u9020\u306b\u8aad\u307f\u8fbc\u3093\u3067\u7c21\u5358\u306b\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002pydicom\u306f\u3001\u3053\u308c\u3089\u306e\u8907\u96d1\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u7c21\u5358\u306b\u81ea\u7136\u306a\u30d4\u30bd\u69cb\u9020\u306b\u8aad\u307f\u8fbc\u3093\u3067\u3001\u7c21\u5358\u306b\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u5909\u66f4\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001DICOM\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u518d\u5ea6\u66f8\u304d\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u6570\u5e74\u524d\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3067\u767a\u8868\u3055\u308c\u305f\u3001DIOCOM\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u7d20\u6674\u3089\u3057\u3044\u5165\u9580\u66f8\u3068\u306a\u308b\u975e\u5e38\u306b\u7d20\u6674\u3089\u3057\u3044[kernel](https:\/\/www.kaggle.com\/schlerp\/getting-to-know-dicom-and-the-data)\u304c\u3042\u308a\u307e\u3059\u3002\n\u30ab\u30fc\u30cd\u30eb: https:\/\/www.kaggle.com\/schlerp\/getting-to-know-dicom-and-the-data\n","b5438043":"# 4. \u753b\u50cf\u306e\u53ef\u8996\u5316 . JPEG\n\n## \u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u53ef\u8996\u5316\u3059\u308b","a4f86526":"[Melanoma Classification : EDA starter](https:\/\/www.kaggle.com\/parulpandey\/melanoma-classification-eda-starter\/data)\u306e\u8aac\u660e\u3092\u65e5\u672c\u8a9e\u5316\u3057\u307e\u3057\u305f","11f55b1d":"## \u5e74\u9f62\u3092\u8996\u899a\u5316\u3059\u308bKDEs\n\u5bc6\u5ea6\u30d7\u30ed\u30c3\u30c8\u3067\u30c7\u30fc\u30bf\u3092\u8981\u7d04\u3057\u3001\u30c7\u30fc\u30bf\u306e\u8cea\u91cf\u304c\u3069\u3053\u306b\u3042\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002[\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u30d7\u30ed\u30c3\u30c8](https:\/\/chemicalstatistician.wordpress.com\/2013\/06\/09\/exploratory-data-analysis-kernel-density-estimation-in-r-on-ozone-pollution-data-in-new-york-and-ozonopolis\/)\u306f\u3001\u5358\u4e00\u306e\u5909\u6570\u306e\u5206\u5e03\u3092\u793a\u3057\u3001\u5e73\u6ed1\u5316\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08\u3053\u308c\u306f\u3001\u5404\u30c7\u30fc\u30bf\u70b9\u3067\u30ab\u30fc\u30cd\u30eb\uff08\u901a\u5e38\u306f\u30ac\u30a6\u30b9\u5206\u5e03\uff09\u3092\u8a08\u7b97\u3057\u3001\u3059\u3079\u3066\u306e\u500b\u3005\u306e\u30ab\u30fc\u30cd\u30eb\u3092\u5e73\u5747\u5316\u3057\u3066\u3001\u5358\u4e00\u306e\u5e73\u6ed1\u66f2\u7dda\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u4f5c\u6210\u3055\u308c\u307e\u3059\uff09\u3002\u3053\u306e\u30b0\u30e9\u30d5\u306b\u306f\u3001seaborn kdeplot\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n### \u5e74\u9f62\u306e\u5206\u5e03\uff08\u76ee\u6a19\u5024\u3068\u6bd4\u8f03\u3057\u3066","aeb2c547":"\u56fa\u6709\u306e\u60a3\u8005\u6570\u306f\u3001\u7dcf\u60a3\u8005\u6570\u3088\u308a\u3082\u5c11\u306a\u3044\u3002\u3053\u308c\u306f\u3001\u60a3\u8005\u304c\u8907\u6570\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002","f3e903d5":"# 3. \u30c7\u30fc\u30bf\u63a2\u67fb\n\n## \u6b20\u640d\u5024","3776c34c":"JPEG\u5f62\u5f0f\u306e\u753b\u50cf\u306f\u30b5\u30a4\u30ba\u304c\u7570\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002","351fbb54":"## \u30bf\u30fc\u30b2\u30c3\u30c8\u30ab\u30e9\u30e0\u63a2\u7d22","62998e80":"## Test\u7537\u5973\u5225\u5206\u5e03","090324fc":"## Test \u7537\u5973\u5225\u306e\u5e74\u9f62\u5206\u5e03","13ec4868":"## Training\u7537\u5973\u5225\u5206\u5e03\n","d1ff5dec":"## \u30a4\u30e1\u30fc\u30b8\u30b5\u30a4\u30c8\u306e\u5834\u6240","16b7a3d1":"### \u7537\u5973\u5225\u306e\u5e74\u9f62\u5206\u5e03","9a47aa31":"## \u60a3\u8005\u3055\u3093\u306e\u5e74\u9f62\u5206\u5e03"}}