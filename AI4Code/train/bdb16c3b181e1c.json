{"cell_type":{"23fb140b":"code","e7d6a565":"code","51d8d4f5":"code","f0cf7172":"code","89ac4ff3":"code","b703dba4":"code","a341b8e1":"code","c084edc6":"code","16b5eebc":"code","a8ea1fab":"code","3339a4a7":"code","1b16ccf1":"code","9b3ee546":"code","e9bd53bb":"code","5637538b":"code","af6bc22b":"code","220f20f3":"code","1d822236":"code","4df54b7a":"code","58da7b4d":"code","ec055a08":"code","baf1ea71":"code","60bc8fa6":"code","cfd455d9":"code","86eabd3b":"code","8f0a38d9":"code","d2c4eb87":"code","344bc79b":"code","ed2079c9":"code","0d7ecf5a":"markdown","27293511":"markdown","d2f02944":"markdown","d85b1fdb":"markdown","36919edb":"markdown","a41c4227":"markdown","4823fb07":"markdown","6f247eef":"markdown","017b9d14":"markdown","b055a672":"markdown","ede271c8":"markdown","f731b0d5":"markdown","28015754":"markdown","8a755dfd":"markdown","404b04cc":"markdown"},"source":{"23fb140b":"from argparse import Namespace\nfrom collections import Counter\nimport json\nimport os\nimport re\nimport string\nimport tqdm\n\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader","e7d6a565":"class Vocabulary(object):\n    \"\"\"Class to process text and extract vocabulary for mapping\"\"\"\n    \n    def __init__(self, token_to_idx=None, add_unk=True, unk_token=\"<UNK>\"):\n        \"\"\"\n        Args:\n            token_to_idx (dict): a pre-existing map of tokens to indices\n            add_unk (bool): a flag that indicates whether to add the UNK token\n            unk_token (str): the UNK token to add into the Vocabulary\n        \"\"\"\n\n        if token_to_idx is None:\n            token_to_idx = {}\n        self._token_to_idx = token_to_idx\n\n        self._idx_to_token = {idx: token \n                              for token, idx in self._token_to_idx.items()}\n        \n        self._add_unk = add_unk\n        self._unk_token = unk_token\n        \n        self.unk_index = -1\n        if add_unk:\n            self.unk_index = self.add_token(unk_token) \n        \n        \n    def to_serializable(self):\n        \"\"\" returns a dictionary that can be serialized \"\"\"\n        return {'token_to_idx': self._token_to_idx, \n                'add_unk': self._add_unk, \n                'unk_token': self._unk_token}\n\n    @classmethod\n    def from_serializable(cls, contents):\n        \"\"\" instantiates the Vocabulary from a serialized dictionary \"\"\"\n        return cls(**contents)\n\n    def add_token(self, token):\n        \"\"\"Update mapping dicts based on the token.\n\n        Args:\n            token (str): the item to add into the Vocabulary\n        Returns:\n            index (int): the integer corresponding to the token\n        \"\"\"\n        if token in self._token_to_idx:\n            index = self._token_to_idx[token]\n        else:\n            index = len(self._token_to_idx)\n            self._token_to_idx[token] = index\n            self._idx_to_token[index] = token\n        return index\n    \n    def add_many(self, tokens):\n        \"\"\"Add a list of tokens into the Vocabulary\n        \n        Args:\n            tokens (list): a list of string tokens\n        Returns:\n            indices (list): a list of indices corresponding to the tokens\n        \"\"\"\n        return [self.add_token(token) for token in tokens]\n\n    def lookup_token(self, token):\n        \"\"\"Retrieve the index associated with the token \n          or the UNK index if token isn't present.\n        \n        Args:\n            token (str): the token to look up \n        Returns:\n            index (int): the index corresponding to the token\n        Notes:\n            `unk_index` needs to be >=0 (having been added into the Vocabulary) \n              for the UNK functionality \n        \"\"\"\n        if self.unk_index >= 0:\n            return self._token_to_idx.get(token, self.unk_index)\n        else:\n            return self._token_to_idx[token]\n\n    def lookup_index(self, index):\n        \"\"\"Return the token associated with the index\n        \n        Args: \n            index (int): the index to look up\n        Returns:\n            token (str): the token corresponding to the index\n        Raises:\n            KeyError: if the index is not in the Vocabulary\n        \"\"\"\n        if index not in self._idx_to_token:\n            raise KeyError(\"the index (%d) is not in the Vocabulary\" % index)\n        return self._idx_to_token[index]\n\n    def __str__(self):\n        return \"<Vocabulary(size=%d)>\" % len(self)\n\n    def __len__(self):\n        return len(self._token_to_idx)","51d8d4f5":"class ReviewVectorizer(object):\n    \"\"\" The Vectorizer which coordinates the Vocabularies and puts them to use\"\"\"\n    def __init__(self, review_vocab, rating_vocab, max_review_length):\n        \"\"\"\n        Args:\n            review_vocab (Vocabulary): maps words to integers\n            rating_vocab (Vocabulary): maps class labels to integers\n        \"\"\"\n        self.review_vocab = review_vocab\n        self.rating_vocab = rating_vocab\n        self._max_review_length = max_review_length\n\n\n    def vectorize(self, review):\n        \"\"\"Create a collapsed one-hit vector for the review\n        \n        Args:\n            review (str): the review \n        Returns:\n            one_hot_matrix (np.ndarray): a matrix of one-hot vectors \n        \"\"\"\n        one_hot_matrix_size = (len(self.review_vocab), self._max_review_length)\n        one_hot_matrix = np.zeros(one_hot_matrix_size, dtype=np.float32)\n        \n        for position_index, token in enumerate(review.split(\" \")):\n            if token not in string.punctuation:\n                token_index = self.review_vocab.lookup_token(token)\n                one_hot_matrix[token_index][position_index] = 1\n            if position_index >= self._max_review_length - 1:\n                break\n        \n        return one_hot_matrix  \n    \n    @classmethod\n    def from_dataframe(cls, review_df, cutoff=25, max_review_length=128):\n        \"\"\"Instantiate the vectorizer from the dataset dataframe\n        \n        Args:\n            review_df (pandas.DataFrame): the review dataset\n            cutoff (int): the parameter for frequency-based filtering\n        Returns:\n            an instance of the ReviewVectorizer\n        \"\"\"\n        review_vocab = Vocabulary(add_unk=True)\n        rating_vocab = Vocabulary(add_unk=False)\n        \n        # Add ratings\n        for rating in sorted(set(review_df.rating)):\n            rating_vocab.add_token(rating)\n\n        # Add top words if count > provided count\n        word_counts = Counter()\n        for review in review_df.review:\n            for word in review.split(\" \"):\n                if word not in string.punctuation:\n                    word_counts[word] += 1\n               \n        for word, count in word_counts.items():\n            if count > cutoff:\n                review_vocab.add_token(word)\n\n        return cls(review_vocab, rating_vocab, max_review_length=max_review_length)\n\n    @classmethod\n    def from_serializable(cls, contents, max_review_length=128):\n        \"\"\"Instantiate a ReviewVectorizer from a serializable dictionary\n        \n        Args:\n            contents (dict): the serializable dictionary\n        Returns:\n            an instance of the ReviewVectorizer class\n        \"\"\"\n        review_vocab = Vocabulary.from_serializable(contents['review_vocab'])\n        rating_vocab =  Vocabulary.from_serializable(contents['rating_vocab'])\n\n        return cls(review_vocab=review_vocab, rating_vocab=rating_vocab, max_review_length=max_review_length)\n\n    def to_serializable(self):\n        \"\"\"Create the serializable dictionary for caching\n        \n        Returns:\n            contents (dict): the serializable dictionary\n        \"\"\"\n        return {'review_vocab': self.review_vocab.to_serializable(),\n                'rating_vocab': self.rating_vocab.to_serializable()}","f0cf7172":"class ReviewDataset(Dataset):\n    def __init__(self, review_df, final_test_df, vectorizer):\n        \"\"\"\n        Args:\n            review_df (pandas.DataFrame): the dataset\n            vectorizer (ReviewVectorizer): vectorizer instantiated from dataset\n        \"\"\"\n        self.review_df = review_df\n        self.final_test_df = final_test_df\n        self._vectorizer = vectorizer\n\n        self.train_df = self.review_df[self.review_df.split=='train']\n        self.train_size = len(self.train_df)\n\n        self.val_df = self.review_df[self.review_df.split=='val']\n        self.validation_size = len(self.val_df)\n\n        self.test_df = self.review_df[self.review_df.split=='test']\n        self.test_size = len(self.test_df)\n\n        self.final_test_size = len(self.final_test_df)\n\n        self._lookup_dict = {'train': (self.train_df, self.train_size),\n                             'val': (self.val_df, self.validation_size),\n                             'test': (self.test_df, self.test_size),\n                             'final_test': (self.final_test_df, self.final_test_size)}\n\n        self.set_split('train')\n\n    @classmethod\n    def load_dataset_and_make_vectorizer(cls, review_csv, final_test_csv, max_review_length):\n        \"\"\"Load dataset and make a new vectorizer from scratch\n        \n        Args:\n            review_csv (str): location of the dataset\n        Returns:\n            an instance of ReviewDataset\n        \"\"\"\n        review_df = pd.read_csv(review_csv)\n        final_test_df = pd.read_csv(final_test_csv)\n        train_review_df = review_df[review_df.split=='train']\n        return cls(review_df, final_test_df, ReviewVectorizer.from_dataframe(train_review_df, max_review_length=max_review_length))\n    \n    @classmethod\n    def load_dataset_and_load_vectorizer(cls, review_csv, final_test_csv, vectorizer_filepath, max_review_length):\n        \"\"\"Load dataset and the corresponding vectorizer. \n        Used in the case in the vectorizer has been cached for re-use\n        \n        Args:\n            review_csv (str): location of the dataset\n            vectorizer_filepath (str): location of the saved vectorizer\n        Returns:\n            an instance of ReviewDataset\n        \"\"\"\n        review_df = pd.read_csv(review_csv)\n        final_test_df = pd.read_csv(final_test_csv)\n        vectorizer = cls.load_vectorizer_only(vectorizer_filepath, max_review_length=max_review_length)\n        return cls(review_df, final_test_df, vectorizer)\n\n    @staticmethod\n    def load_vectorizer_only(vectorizer_filepath, max_review_length):\n        \"\"\"a static method for loading the vectorizer from file\n        \n        Args:\n            vectorizer_filepath (str): the location of the serialized vectorizer\n        Returns:\n            an instance of ReviewVectorizer\n        \"\"\"\n        with open(vectorizer_filepath) as fp:\n            return ReviewVectorizer.from_serializable(json.load(fp), max_review_length=max_review_length)\n\n    def save_vectorizer(self, vectorizer_filepath):\n        \"\"\"saves the vectorizer to disk using json\n        \n        Args:\n            vectorizer_filepath (str): the location to save the vectorizer\n        \"\"\"\n        with open(vectorizer_filepath, \"w\") as fp:\n            json.dump(self._vectorizer.to_serializable(), fp)\n\n    def get_vectorizer(self):\n        \"\"\" returns the vectorizer \"\"\"\n        return self._vectorizer\n\n    def set_split(self, split=\"train\"):\n        \"\"\" selects the splits in the dataset using a column in the dataframe \n        \n        Args:\n            split (str): one of \"train\", \"val\", or \"test\"\n        \"\"\"\n        self._target_split = split\n        self._target_df, self._target_size = self._lookup_dict[split]\n\n    def __len__(self):\n        return self._target_size\n\n    def __getitem__(self, index):\n        \"\"\"the primary entry point method for PyTorch datasets\n        \n        Args:\n            index (int): the index to the data point \n        Returns:\n            a dictionary holding the data point's features (x_data) and label (y_target)\n        \"\"\"\n        row = self._target_df.iloc[index]\n\n        review_vector = self._vectorizer.vectorize(row.review)\n\n        if self._target_split == 'final_test':\n            review_id = row.Id #self._target_df['Id']\n            return {'x_data': review_vector, 'x_id': review_id}\n\n        else:\n            rating_index = self._vectorizer.rating_vocab.lookup_token(row.rating)\n            return {'x_data': review_vector,\n                    'y_target': rating_index}\n\n    def get_num_batches(self, batch_size):\n        \"\"\"Given a batch size, return the number of batches in the dataset\n        \n        Args:\n            batch_size (int)\n        Returns:\n            number of batches in the dataset\n        \"\"\"\n        return len(self) \/\/ batch_size  \n    \ndef generate_batches(dataset, batch_size, shuffle=True,\n                     drop_last=True, device=\"cpu\"):\n    \"\"\"\n    A generator function which wraps the PyTorch DataLoader. It will \n      ensure each tensor is on the correct device location.\n    \"\"\"\n    dataloader = DataLoader(dataset=dataset, batch_size=batch_size,\n                            shuffle=shuffle, drop_last=drop_last)\n\n    for data_dict in dataloader:\n        out_data_dict = {}\n        for name, tensor in data_dict.items():\n            out_data_dict[name] = data_dict[name].to(device)\n        yield out_data_dict","89ac4ff3":"def make_train_state(args):\n    return {'stop_early': False,\n            'early_stopping_step': 0,\n            'early_stopping_best_val': 1e8,\n            'learning_rate': args.learning_rate,\n            'epoch_index': 0,\n            'train_loss': [],\n            'train_acc': [],\n            'val_loss': [],\n            'val_acc': [],\n            'test_loss': -1,\n            'test_acc': -1,\n            'model_filename': args.model_state_file}\n\ndef update_train_state(args, model, train_state):\n    \"\"\"Handle the training state updates.\n\n    Components:\n     - Early Stopping: Prevent overfitting.\n     - Model Checkpoint: Model is saved if the model is better\n\n    :param args: main arguments\n    :param model: model to train\n    :param train_state: a dictionary representing the training state values\n    :returns:\n        a new train_state\n    \"\"\"\n\n    # Save one model at least\n    if train_state['epoch_index'] == 0:\n        torch.save(model.state_dict(), train_state['model_filename'])\n        train_state['stop_early'] = False\n\n    # Save model if performance improved\n    elif train_state['epoch_index'] >= 1:\n        loss_tm1, loss_t = train_state['val_loss'][-2:]\n\n        # If loss worsened\n        if loss_t >= train_state['early_stopping_best_val']:\n            # Update step\n            train_state['early_stopping_step'] += 1\n        # Loss decreased\n        else:\n            # Save the best model\n            if loss_t < train_state['early_stopping_best_val']:\n                torch.save(model.state_dict(), train_state['model_filename'])\n\n            # Reset early stopping step\n            train_state['early_stopping_step'] = 0\n\n        # Stop early ?\n        train_state['stop_early'] = \\\n            train_state['early_stopping_step'] >= args.early_stopping_criteria\n\n    return train_state\n\ndef compute_accuracy(y_pred, y_target):\n    y_target = y_target.cpu()\n    y_pred_indices = (torch.sigmoid(y_pred)>0.5).cpu().long()#.max(dim=1)[1]\n    n_correct = torch.eq(y_pred_indices, y_target).sum().item()\n    return n_correct \/ len(y_pred_indices) * 100","b703dba4":"def set_seed_everywhere(seed, cuda):\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if cuda:\n        torch.cuda.manual_seed_all(seed)\n\ndef handle_dirs(dirpath):\n    if not os.path.exists(dirpath):\n        os.makedirs(dirpath)","a341b8e1":"# Setup information about how to name and locate data, hyperparams, etc.\nargs = Namespace(\n    # Input data file (from preprocessing step)\n    input_data_path='\/kaggle\/input\/cs39aa-yelp-reviews\/',\n    review_csv=\"train_val_test.csv\",\n    #review_csv=\"train_val_test_large.csv\",\n    final_test_csv=\"final_test.csv\",\n    # Output data and path information\n    #frequency_cutoff=25,\n    model_state_file='model.pth',\n    submission_file='submission.csv',\n    save_dir='\/kaggle\/working\/',\n    vectorizer_file='vectorizer.json',\n    # Training hyper parameters\n    max_review_length=100,\n    batch_size=512,\n    early_stopping_criteria=5,\n    learning_rate=0.01,\n    num_epochs=2,\n    seed=42,\n    # Runtime options\n    catch_keyboard_interrupt=True,\n    cuda=True,\n    expand_filepaths_to_save_dir=True,\n    reload_from_files=False,\n)\n\n# Expand out the paths and confirm they are correct\nif args.expand_filepaths_to_save_dir:\n    args.review_csv = os.path.join(args.input_data_path, args.review_csv)\n    args.final_test_csv = os.path.join(args.input_data_path, args.final_test_csv)\n    args.vectorizer_file = os.path.join(args.save_dir, args.vectorizer_file)\n    args.model_state_file = os.path.join(args.save_dir, args.model_state_file)\n    args.submission_file = os.path.join(args.save_dir, args.submission_file)\n    print(\"Expanded filepaths: \")\n    print(\"\\t{}\".format(args.review_csv))\n    print(\"\\t{}\".format(args.final_test_csv))\n    print(\"\\t{}\".format(args.vectorizer_file))\n    print(\"\\t{}\".format(args.model_state_file))\n    print(\"\\t{}\".format(args.submission_file))    \n\n# Check CUDA\nif not torch.cuda.is_available():\n    args.cuda = False\n\nprint(\"Using CUDA: {}\".format(args.cuda))\n\nargs.device = torch.device(\"cuda\" if args.cuda else \"cpu\")\n\n# Set seed for reproducibility\nset_seed_everywhere(args.seed, args.cuda)\n\n# handle dirs\nhandle_dirs(args.save_dir)","c084edc6":"if args.reload_from_files:\n    # training from a checkpoint\n    print(\"Loading dataset and vectorizer\")\n    dataset = ReviewDataset.load_dataset_and_load_vectorizer(args.review_csv,\n                                                             args.final_test_csv,\n                                                             args.vectorizer_file,\n                                                             args.max_review_length)\nelse:\n    print(\"Loading dataset and creating vectorizer\")\n    # create dataset and vectorizer\n    dataset = ReviewDataset.load_dataset_and_make_vectorizer(args.review_csv, args.final_test_csv, args.max_review_length)\n    dataset.save_vectorizer(args.vectorizer_file)    \nvectorizer = dataset.get_vectorizer()","16b5eebc":"#dataset.set_split('final_test')\ndataset[0]['x_data'].shape","a8ea1fab":"dataset.review_df['review'][4]","3339a4a7":"dataset[4]","1b16ccf1":"dataset.test_df['review'].iloc[4]","9b3ee546":"dataset.set_split('test')\ndataset._target_df['review'].iloc[4]","e9bd53bb":"dataset.test_df['review'].iloc[0]\n#for i in range(10):\n#    print(dataset._target_df['review'].iloc[i])","5637538b":"dataset[0]['x_data'].shape","af6bc22b":"#vectorizer.review_vocab._token_to_idx\nfor key, val in vectorizer.review_vocab._idx_to_token.items():\n  if key < 30:\n    print(key, \" -> \", val)","220f20f3":"#vectorizer.rating_vocab._idx_to_token\nvectorizer.rating_vocab._token_to_idx\n\nlen(vectorizer.rating_vocab)","1d822236":"class ReviewClassifier(nn.Module):\n    \"\"\" a simple perceptron based classifier \"\"\"\n    def __init__(self, input_num_channels):\n        \"\"\"\n        Args:\n            num_features (int): the size of the input feature vector\n        \"\"\"\n        super(ReviewClassifier, self).__init__()\n        self.cnn1 = nn.Conv1d(in_channels=input_num_channels, \n                      out_channels=64, kernel_size=5, stride=4)\n        self.cnn2 = nn.Conv1d(in_channels=64, out_channels=64,\n                      kernel_size=5, stride=4)\n        self.cnn3 = nn.Conv1d(in_channels=64, out_channels=64, \n                      kernel_size=5, stride=4)\n        self.fc = nn.Linear(64, 1)\n\n    def forward(self, x_in, apply_sigmoid=False):\n        int1 = F.dropout(F.relu(self.cnn1(x_in)))\n        int2 = F.dropout(F.relu(self.cnn2(int1)))\n        int3 = F.dropout(F.relu(self.cnn3(int2)))\n        y_out = self.fc(int3.squeeze(dim=2)).squeeze()\n        \n        if apply_sigmoid:\n            y_out = torch.sigmoid(y_out)\n        return y_out\n    \n# Note that although args.max_review_length is not a parameter in the model definition, \n# the choice of the maximum length to use still affects how the CNN is configured\nclassifier = ReviewClassifier(input_num_channels=len(vectorizer.review_vocab)).to(args.device)","4df54b7a":"# be sure to comment out all code in this cell when doing: 'Save Version' -> 'Save and Run All'\n!pip install torchsummary\nimport torchsummary\ntorchsummary.summary(classifier, dataset[0]['x_data'].shape)","58da7b4d":"import tqdm\n\nclassifier = classifier.to(args.device)\n\nloss_func = nn.BCEWithLogitsLoss()\noptimizer = optim.Adam(classifier.parameters(), lr=args.learning_rate)\nscheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer=optimizer,\n                                                 mode='min', factor=0.5,\n                                                 patience=1)\n\ntrain_state = make_train_state(args)\n\nepoch_bar = tqdm.notebook.tqdm(desc='training routine', \n                          total=args.num_epochs,\n                          position=0)\n\ndataset.set_split('train')\ntrain_bar = tqdm.notebook.tqdm(desc='split=train',\n                          total=dataset.get_num_batches(args.batch_size), \n                          position=1, \n                          leave=True)\ndataset.set_split('val')\nval_bar = tqdm.notebook.tqdm(desc='split=val',\n                        total=dataset.get_num_batches(args.batch_size), \n                        position=1, \n                        leave=True)\n\nlosses = {'train':[], 'val':[]}\n\ntry:\n    for epoch_index in range(args.num_epochs):\n        train_state['epoch_index'] = epoch_index\n\n        # Iterate over training dataset\n\n        # setup: batch generator, set loss and acc to 0, set train mode on\n        dataset.set_split('train')\n        batch_generator = generate_batches(dataset, \n                                           batch_size=args.batch_size, \n                                           device=args.device)\n        running_loss = 0.0\n        running_acc = 0.0\n        classifier.train()\n\n        for batch_index, batch_dict in enumerate(batch_generator):\n            # the training routine is these 5 steps:\n\n            # --------------------------------------\n            # step 1. zero the gradients\n            optimizer.zero_grad()\n\n            # step 2. compute the output\n            y_pred = classifier(x_in=batch_dict['x_data'].float())\n\n            # step 3. compute the loss\n            loss = loss_func(y_pred, batch_dict['y_target'].float())\n            loss_t = loss.item()\n            losses['train'].append(loss_t)\n            running_loss += (loss_t - running_loss) \/ (batch_index + 1)\n\n            # step 4. use loss to produce gradients\n            loss.backward()\n\n            # step 5. use optimizer to take gradient step\n            optimizer.step()\n            # -----------------------------------------\n            # compute the accuracy\n            acc_t = compute_accuracy(y_pred, batch_dict['y_target'])\n            running_acc += (acc_t - running_acc) \/ (batch_index + 1)\n\n            # update bar\n            train_bar.set_postfix(loss=running_loss, \n                                  acc=running_acc, \n                                  epoch=epoch_index)\n            train_bar.update()\n\n        train_state['train_loss'].append(running_loss)\n        train_state['train_acc'].append(running_acc)\n\n        # Iterate over val dataset\n\n        # setup: batch generator, set loss and acc to 0; set eval mode on\n        dataset.set_split('val')\n        batch_generator = generate_batches(dataset, \n                                           batch_size=args.batch_size, \n                                           device=args.device)\n        running_loss = 0.\n        running_acc = 0.\n        classifier.eval()\n\n        for batch_index, batch_dict in enumerate(batch_generator):\n\n            # compute the output\n            y_pred = classifier(x_in=batch_dict['x_data'].float())\n\n            # step 3. compute the loss\n            loss = loss_func(y_pred, batch_dict['y_target'].float())\n            loss_t = loss.item()\n            losses['val'].append(loss_t)\n            running_loss += (loss_t - running_loss) \/ (batch_index + 1)\n\n            # compute the accuracy\n            acc_t = compute_accuracy(y_pred, batch_dict['y_target'])\n            running_acc += (acc_t - running_acc) \/ (batch_index + 1)\n            \n            val_bar.set_postfix(loss=running_loss, \n                                acc=running_acc, \n                                epoch=epoch_index)\n            val_bar.update()\n\n        train_state['val_loss'].append(running_loss)\n        train_state['val_acc'].append(running_acc)\n\n        train_state = update_train_state(args=args, model=classifier,\n                                         train_state=train_state)\n\n        scheduler.step(train_state['val_loss'][-1])\n\n        train_bar.n = 0\n        val_bar.n = 0\n\n        if train_state['stop_early']:\n            print(\"Stopping early - validation is no longer significantly improving\")\n            break\n\n        train_bar.n = 0\n        val_bar.n = 0\n        epoch_bar.update()\nexcept KeyboardInterrupt:\n    print(\"Exiting loop\")","ec055a08":"import matplotlib\nimport matplotlib.pyplot as plt\n\nmatplotlib.rc('figure', figsize=(15,4))\n_, (ax1, ax2) = plt.subplots(1, 2)\nax1.plot(range(len(losses['train'])), losses['train'], c='b')\nax1.set_title(\"Training Loss by Epoch and Batch\")\nax2.plot(range(len(losses['val'])), losses['val'], c='g')\nax2.set_title(\"Validation Loss by Epoch and Batch\")","baf1ea71":"# compute the loss & accuracy on the test set using the best available model\n\nclassifier.load_state_dict(torch.load(train_state['model_filename']))\nclassifier = classifier.to(args.device)\n\ndataset.set_split('test')\nbatch_generator = generate_batches(dataset, \n                                   batch_size=args.batch_size, \n                                   device=args.device)\nrunning_loss = 0.\nrunning_acc = 0.\nclassifier.eval()\n\nfor batch_index, batch_dict in enumerate(batch_generator):\n    # compute the output\n    y_pred = classifier(x_in=batch_dict['x_data'].float())\n\n    # compute the loss\n    loss = loss_func(y_pred, batch_dict['y_target'].float())\n    loss_t = loss.item()\n    running_loss += (loss_t - running_loss) \/ (batch_index + 1)\n\n    # compute the accuracy\n    acc_t = compute_accuracy(y_pred, batch_dict['y_target'])\n    running_acc += (acc_t - running_acc) \/ (batch_index + 1)\n\ntrain_state['test_loss'] = running_loss\ntrain_state['test_acc'] = running_acc","60bc8fa6":"print(\"Test loss: {:.3f}\".format(train_state['test_loss']))\nprint(\"Test Accuracy: {:.2f}\".format(train_state['test_acc']))","cfd455d9":"def preprocess_text(text):\n    text = text.lower()\n    text = re.sub(r\"([.,!?])\", r\" \\1 \", text)\n    text = re.sub(r\"[^a-zA-Z.,!?]+\", r\" \", text)\n    return text","86eabd3b":"dataset.set_split('final_test')\ndataset._target_df.head()","8f0a38d9":"def generate_sub_batches(dataset, batch_size, device=\"cpu\"):\n    \"\"\"\n    A generator function which wraps the PyTorch DataLoader. It will \n      ensure each tensor is on the correct device location.\n    \"\"\"\n    dataloader = DataLoader(dataset=dataset, batch_size=batch_size, shuffle=False, drop_last=False)\n\n    for data_dict in dataloader:\n        out_data_dict = {}\n        for name, tensor in data_dict.items():\n            out_data_dict[name] = data_dict[name].to(device)\n        yield out_data_dict","d2c4eb87":"# compute the loss & accuracy on the test set using the best available model\n\nclassifier.load_state_dict(torch.load(train_state['model_filename']))\nclassifier = classifier.to(args.device)\n\nsub_batch_generator = generate_sub_batches(dataset, \n                                   batch_size=args.batch_size, \n                                   device=args.device)\nclassifier.eval()\n\nsubmission_ids = []\nsubmission_ratings = []\n\nfor batch_index, batch_dict in enumerate(sub_batch_generator):\n    # compute the output\n    y_pred_prob = classifier(x_in=batch_dict['x_data'].float())\n    y_pred = (torch.sigmoid(y_pred_prob)>0.5).cpu().long().tolist()\n    y_pred_label = [vectorizer.rating_vocab.lookup_index(ind) for ind in y_pred]    \n    submission_ids += batch_dict['x_id'].tolist()\n    submission_ratings += y_pred_label","344bc79b":"sub_df = pd.DataFrame({'Id': submission_ids, 'rating': submission_ratings})\nsub_df.head()","ed2079c9":"sub_df.to_csv(args.submission_file, index=False)","0d7ecf5a":"## Training Routine\n\n\n### Helper functions","27293511":"## Data Vectorization classes\n\n### The Vocabulary","d2f02944":"### The Dataset","d85b1fdb":"## Imports","36919edb":"### Generate test predictions","a41c4227":"### Initializations","4823fb07":"## The Model: ReviewClassifier","6f247eef":"### Settings and some prep work","017b9d14":"### The Vectorizer","b055a672":"#### General utilities","ede271c8":"### Training loop","f731b0d5":"### Interpretability","28015754":"### Create submissions and save","8a755dfd":"# CS 39AA - Notebook 4: Classifying Yelp Reviews w\/ a CNN\n\nThis notebook will take the work we've done so far with Notebook 3, where we used a standard multi-layer perceptron, and now try a more sophisticated model, a convolutional neural network. \n\nIn addition to changing the implementation of the model (i.e. the ReviewClassifier class), we the input data to the model must be modified (to use a one-hot matrix instead of the collapsted one-hot encoding we used before). This modification has already been done for you. \n\nYour task in this notebook is to select appropriate parameters for the **Conv1d** and **Linear** layers\/modules in the ReviewClassifier class. ","404b04cc":"### Inference"}}