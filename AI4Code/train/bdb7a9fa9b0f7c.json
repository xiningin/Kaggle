{"cell_type":{"09606cf6":"code","6b3e49ee":"code","b49c4ae7":"code","dc18dcfc":"code","4d0e0127":"code","39103c62":"code","16952fea":"code","c2b61dfc":"code","1d86525f":"code","6a93eb75":"code","cab4ccec":"code","37c4373b":"code","71da2d27":"code","92bfe41b":"code","0090fc1f":"code","9cb23e38":"code","3e13c820":"markdown","86682fdb":"markdown","a33055d0":"markdown","30194b56":"markdown","63e78d4c":"markdown"},"source":{"09606cf6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6b3e49ee":"import seaborn as sb\nimport matplotlib.pyplot as plt","b49c4ae7":"df = pd.read_csv('\/kaggle\/input\/ngc-628-7793-krumholz-2015\/opencluster.tsv', delimiter = ';')","dc18dcfc":"df = df.replace(r'^\\s*$', np.nan, regex=True)","4d0e0127":"#we dont need them\ndf = df.drop(['Lib','beta','gamma'], axis = 1)","39103c62":"df['Mode'] = df['Mode'].astype(int)","16952fea":"# mode\nplt.figure(figsize=(12, 7))\nsb.set_style(\"whitegrid\")\nsb.countplot(x = 'Mode', data = df)","c2b61dfc":"plt.figure(figsize=(12, 7))\nsb.distplot(df['logM-84'])\ndf['logM-84'].describe()","1d86525f":"plt.figure(figsize=(12, 7))\nsb.distplot(df['logT-84'])\ndf['logT-84'].describe()","6a93eb75":"for i in range (0,5):\n    classes = df.loc[(df[\"Mode\"]) == i]\n    print('Mode ',i)\n    print(classes['logM-84'].describe(), '\\n')","cab4ccec":"plt.figure(figsize=(12, 7))\nsb.boxplot(x='Mode',y='logM-84',data=df)","37c4373b":"plt.figure(figsize=(12, 7))\nsb.boxplot(x='Mode',y='logT-84',data=df)","71da2d27":"from sklearn.model_selection import train_test_split\n\ndataset = df\ndataset.drop(['Field','ID'],axis=1,inplace=True)\nX_train, X_test, y_train, y_test = train_test_split(df.drop('Mode',axis=1), \n                                                    df['Mode'], test_size=0.25, \n                                                    random_state=101)","92bfe41b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, log_loss","0090fc1f":"regressor = LogisticRegression()\nregressor.fit(X_train, y_train)\nlog_pred = regressor.predict(X_test)\n\nprint('accuracy score: ', accuracy_score(y_test, log_pred),'\\n')\nprint(classification_report(y_test, log_pred))\nprint(confusion_matrix(y_test, log_pred))\nprint(accuracy_score(y_test, log_pred))","9cb23e38":"from sklearn import linear_model\nfrom sklearn.linear_model import SGDClassifier\n\nsgd = linear_model.SGDClassifier(max_iter=5, tol=None)\nsgd.fit(X_train, y_train)\nsgd_pred = sgd.predict(X_test)\nprint('accuracy score: ', accuracy_score(y_test, sgd_pred),'\\n')\nprint(classification_report(y_test, sgd_pred))\nprint(confusion_matrix(y_test, sgd_pred))\nprint(accuracy_score(y_test, sgd_pred))","3e13c820":"Here we go, we will try to use Logistic regression and SGD for testing the Mode ","86682fdb":"> Turn blank into NaN","a33055d0":"We make a new dataset for train and test purpose\n\nWe split the dataset into train and test with ratio of 75:25, and predict the mode for each cluster","30194b56":"We take the 84th percentile of mass and temperature from each cluster to shown","63e78d4c":"## There is mode of condition of cluster from each data, we will predict them.\n\nVisual classification, mode of classifiers (2)  \n\nNote (2)  : Visual classification code as follows:\n\n0 =\tsource was not visually classified (too faint);\n\n1 =\tsymmetric, compact cluster;\n\n2 =\tconcentrated object with some degree of asymmetry or color gradient;\n\n3 =\tdiffuse or multiple peak system, possibly spurious alignment;\n\n4 =\tspurious detection (foreground\/background source, single bright star, artifact)."}}