{"cell_type":{"459902eb":"code","74b2d19a":"code","7ddf22b3":"code","8d81bcb3":"code","ad3f17c4":"code","d372976d":"code","66324926":"code","0e1d441b":"code","54e0985e":"code","0898a982":"code","4523f20c":"code","61106af2":"code","a8979e79":"code","26d101d1":"code","7afb00f8":"code","31898c80":"code","ad1c3ef6":"code","01e0b8ee":"code","b8319b53":"markdown","48613849":"markdown","be4079c1":"markdown","54c78844":"markdown","722a41e9":"markdown"},"source":{"459902eb":"!pip install fuzzy","74b2d19a":"import pandas as pd\nimport seaborn as sns\nimport plotnine\nsns.set_style('whitegrid')\n%pylab inline\n\ndf = pd.read_csv(\"..\/input\/us-baby-names\/NationalNames.csv\")\ndf[:5]","7ddf22b3":"import fuzzy\n\nnames = df[\"Name\"].unique()\n# names = [\"Cass\", \"Cassie\", \"Cassandra\"]\nfingerprint_algo = fuzzy.DMetaphone()\n\nlist_fingerprint = []\nfor n in names:\n    list_fingerprint.append(fingerprint_algo(n)[0])\n","8d81bcb3":"def get_subset(df, df_fp, names):\n    fingerprint_candidates = []\n    for name in names:\n        fingerprint_candidates.extend(df_fp[df_fp[\"name\"] == name][\"fingerprint\"].values.tolist())\n\n    name_candidates = df_fp.loc[df_fp[\"fingerprint\"].isin(fingerprint_candidates), \"name\"]\n\n    df_subset = df[(df[\"Name\"].isin(name_candidates)) & (df[\"Gender\"] == \"F\")]\n    return df_subset","ad3f17c4":"df_fp_names = pd.DataFrame([list_fingerprint, names]).T\ndf_fp_names.columns=[\"fingerprint\", \"name\"]\n\ndf_subset = get_subset(df, df_fp_names, [\"Cass\", \"Cassandra\"])","d372976d":"from plotnine import ggplot, geom_text, labs, aes, geom_line, scale_y_continuous, theme, element_blank, element_text\n\ntop_n = 5\n\ndef get_ts_global_values(df_subset, top_n, names_to_study=[]):\n    if len(names_to_study) == 0: \n         names_to_study = df_subset.groupby(\"Name\")[\"Count\"].sum().sort_values()[::-1][:top_n].index.tolist()\n    df_top_n_global = df_subset[df_subset[\"Name\"].isin(names_to_study)].copy()\n\n    # format year to be date time\n    df_top_n_global[\"Year\"] = pd.to_datetime(df_top_n_global[\"Year\"], format=\"%Y\")\n\n    # groupby by decades\n    df_top_n_global = df_top_n_global.groupby([\"Name\", pd.Grouper(key=\"Year\", freq=\"10YS\")])[\"Count\"].sum().reset_index()\n\n    # use 1900s only\n    df_top_n_global = df_top_n_global.query(\"`Year` > '1900-01-01'\")\n    return df_top_n_global","66324926":"df_top_n_global = get_ts_global_values(df_subset, top_n)","0e1d441b":"ggplot(df_top_n_global, aes(x = \"Year\", y = \"Count\", colour = \"Name\")) + \\\n    geom_text(aes(label = \"Name\"), show_legend = False) +\\\n    geom_line() +\\\n    labs(y = 'Number of babies', title = 'Cass: 1900\\'s and beyond') +\\\n        theme(panel_grid_minor_y=element_blank(),\n           panel_grid_major_y=element_blank())","54e0985e":"ggplot(df_top_n_global, aes(x = \"Year\", y = \"Count\", colour = \"Name\")) + \\\n    geom_text(aes(label = \"Name\"), show_legend = False) +\\\n    geom_line() +\\\n    labs(y = 'Number of babies', title = 'Cass: 1900\\'s and beyond') +\\\n    scale_y_continuous(trans='log10') +\\\n    theme(panel_grid_minor_y=element_blank(),\n           panel_grid_major_y=element_blank())","0898a982":"from scipy.stats import linregress\ndf_subset_1980 = df_subset[df_subset[\"Year\"] > 1980]\n\ndf_linregress = df_subset_1980.groupby([\"Name\"]).apply(lambda g: pd.Series(linregress(g[\"Year\"], g[\"Count\"])))\ndf_linregress.columns = [\"slope\", \"intercept\", \"rvalue\", \"pvalue\", \"stderr\"]\n\n# select names with more than a thousand count that has the highest slope\n# with an r value > 0.6, just to have a moderate correlation\ndf_linregress = df_linregress.join(df_subset_1980.groupby(\"Name\")[\"Count\"].sum())\\\n                                .dropna()\\\n                                .sort_values(by=\"slope\", ascending=False)\ndf_linregress = df_linregress[df_linregress[\"rvalue\"] >= 0.5]\ndf_linregress[:10]","4523f20c":"names_to_study = df_linregress[df_linregress[\"Count\"] > 1000].index.tolist()\n\n# add the base Cassandra and Cassie\nnames_to_study.extend([\"Cassandra\", \"Cassie\"])\nnames_to_study = set(names_to_study)\n\n# plot only 1970's onwards\ndf_top_n_global = get_ts_global_values(df_subset, top_n, names_to_study=names_to_study)\ndf_top_n_global = df_top_n_global[df_top_n_global[\"Year\"] > \"1960-01-01\"]","61106af2":"ggplot(df_top_n_global, aes(x = \"Year\", y = \"Count\", colour = \"Name\")) + \\\n    geom_text(aes(label = \"Name\"), show_legend = False) +\\\n    geom_line() +\\\n    labs(y = 'Number of babies', title = 'Cass and it\\'s newest most popular variants') +\\\n    scale_y_continuous(trans='log10') +\\\n    theme(panel_grid_minor_y=element_blank(),\n           panel_grid_major_y=element_blank(),\n          panel_grid_minor_x = element_blank(),\n          axis_text_x = element_text(angle = 30, hjust=1))","a8979e79":"top_n = 5\ndf_subset = get_subset(df, df_fp_names, [\"Zoe\"])\ndf_top_n_global = get_ts_global_values(df_subset, top_n)","26d101d1":"ggplot(df_top_n_global, aes(x = \"Year\", y = \"Count\", colour = \"Name\")) + \\\n    geom_text(aes(label = \"Name\"), show_legend = False) +\\\n    geom_line() +\\\n    labs(y = 'Number of babies', title = 'Zoe: 1900\\'s and beyond') +\\\n        theme(panel_grid_minor_y=element_blank(),\n           panel_grid_major_y=element_blank())","7afb00f8":"ggplot(df_top_n_global, aes(x = \"Year\", y = \"Count\", colour = \"Name\")) + \\\n    geom_text(aes(label = \"Name\"), show_legend = False) +\\\n    geom_line() +\\\n    labs(y = 'Number of babies', title = 'Zoe: 1900\\'s and beyond') +\\\n    scale_y_continuous(trans='log10') +\\\n    theme(panel_grid_minor_y=element_blank(),\n           panel_grid_major_y=element_blank())","31898c80":"from scipy.stats import linregress\ndf_subset_1980 = df_subset[df_subset[\"Year\"] > 1980]\n\ndf_linregress = df_subset_1980.groupby([\"Name\"]).apply(lambda g: pd.Series(linregress(g[\"Year\"], g[\"Count\"])))\ndf_linregress.columns = [\"slope\", \"intercept\", \"rvalue\", \"pvalue\", \"stderr\"]\n\n# select names with more than a thousand count that has the highest slope\n# with an r value > 0.6, just to have a moderate correlation\ndf_linregress = df_linregress.join(df_subset_1980.groupby(\"Name\")[\"Count\"].sum())\\\n                                .dropna()\\\n                                .sort_values(by=\"slope\", ascending=False)\ndf_linregress = df_linregress[df_linregress[\"rvalue\"] >= 0.5]\ndf_linregress[:10]","ad1c3ef6":"names_to_study = df_linregress[df_linregress[\"Count\"] > 1000].index.tolist()\n\n# add the base Zoe\nnames_to_study.extend([\"Zoe\"])\nnames_to_study = set(names_to_study)\n\n# plot only 1970's onwards\ndf_top_n_global = get_ts_global_values(df_subset, top_n, names_to_study=names_to_study)\ndf_top_n_global = df_top_n_global[df_top_n_global[\"Year\"] > \"1960-01-01\"]","01e0b8ee":"ggplot(df_top_n_global, aes(x = \"Year\", y = \"Count\", colour = \"Name\")) + \\\n    geom_text(aes(label = \"Name\"), show_legend = False) +\\\n    geom_line() +\\\n    labs(y = 'Number of babies', title = 'Zoe and it\\'s newest most popular variants') +\\\n    scale_y_continuous(trans='log10') +\\\n    theme(panel_grid_minor_y=element_blank(),\n           panel_grid_major_y=element_blank(),\n          panel_grid_minor_x = element_blank(),\n          axis_text_x = element_text(angle = 30, hjust=1))","b8319b53":"## Get the top 5 variants in terms of overall popularity and plot\nI discovered this nice library, plotnine that emulates R's ggplot. I want to use ggplot because I want to plot something unique as you will see below","48613849":"## Get the fastest growing ones since 1980\n- Get a simple linear least squares approach and find the maximum slopes.","be4079c1":"# Our baby's first name: Cassandra","54c78844":"# Our baby's second name: Zoe\nSame story!","722a41e9":"# Double Metaphone Sounds-like Algorithm\nDesigned by Lawrence Phillips in 1990, the original [metaphone algorithm](https:\/\/en.wikipedia.org\/wiki\/Metaphone) does its phonetic matching through complex rules for variations in vowel and consonant sounds. Since then, there has been two updates to the algorithm. Fortunately for us, there is a Python port from C\/C++ code, and it features the first update of the algorithm, the Double Metaphone.\n\nIn the following code, we first get the fingerprint (a.k.a. hash code) of all the names in the data. It looks something like:\n\n    Mark -> MRK\n    Marc -> MRK\n    Marck -> MRK\n    Marco -> MRK\n\n"}}