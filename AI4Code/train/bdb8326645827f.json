{"cell_type":{"b82c3228":"code","1c7aa369":"code","9a6c552c":"code","cbbfac51":"code","49eb6a3c":"code","5c75dd81":"code","8aec42c5":"code","9e256d38":"code","3fad4137":"code","c49af4d4":"code","64adf2c4":"code","c542ed17":"code","6173ab26":"code","1d46ef7d":"code","f58960fe":"code","06c1f086":"code","185cb32a":"code","4db53145":"code","ca37d9c1":"code","938e062c":"code","86c51771":"code","913fb437":"code","a4583bb7":"code","71ddb590":"markdown","977d9152":"markdown","0e6a0edb":"markdown","1ef67101":"markdown","d24a54c8":"markdown","ca6ff7e2":"markdown","cb815012":"markdown","d04eabfb":"markdown","76285f8e":"markdown","b65a3f15":"markdown","97e0d2a8":"markdown"},"source":{"b82c3228":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\nimport copy","1c7aa369":"data = pd.read_csv('..\/input\/fish-market\/Fish.csv')","9a6c552c":"data.rename(columns= {'Length1':'Body_height', 'Length2':'Total_Length', 'Length3':'Diagonal_Length'}, inplace=True)","cbbfac51":"data.head()","49eb6a3c":"data.describe()","5c75dd81":"sns.countplot(x='Species',data=data);","8aec42c5":"sns.heatmap(data.corr(), annot=True, cmap='BuGn');","9e256d38":"data = data.drop(columns=['Total_Length', 'Diagonal_Length'])","3fad4137":"sns.boxplot(x='Species',y='Weight',data=data,palette='rainbow');","c49af4d4":"names = data['Species'].unique()\ncolumns = data.columns[:]","64adf2c4":"columns = data.columns[1:]\n\ndata_outliers = []\nfor name in names:\n    dfw = data[data['Species']==name]\n    for col in columns:    \n        Q_min = dfw[\"Weight\"].quantile(0.01)\n        Q_max = dfw[\"Weight\"].quantile(0.99)\n        idx = (data['Species']==name) & ((data[\"Weight\"] < Q_min) | (data[\"Weight\"] > Q_max))\n        data_outliers.append(data[idx])\n\ndata_outliers = pd.concat(data_outliers)\ndata_cleared = data.drop(data_outliers.index.unique())\ndata_cleared","c542ed17":"data_cleared.describe()","6173ab26":"def display(y, ypred):\n    pd.options.display.max_rows = (len(y))\n    df = pd.DataFrame ({'Actual': y, 'Predicted': ypred})\n    return df","1d46ef7d":"x = data_cleared\ny = data_cleared['Weight']\nx = x.drop(columns=[\"Weight\"])\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","f58960fe":"model = LinearRegression(fit_intercept=True)\nmodel.fit(x.iloc[:,1:],y)\nmodel.score(x.iloc[:,1:], y)\nypredict = model.predict(x.iloc[:,1:])\nplt.scatter(y, ypredict);","06c1f086":"model.score(x.iloc[:,1:], y)","185cb32a":"g = sns.FacetGrid(data_cleared, col=\"Species\")\ng.map(plt.scatter, \"Body_height\", \"Weight\", alpha=0.7);","4db53145":"g = sns.FacetGrid(data_cleared, col=\"Species\")\ng.map(plt.scatter, \"Height\", \"Weight\", alpha=0.7);","ca37d9c1":"g = sns.FacetGrid(data_cleared, col=\"Species\")\ng.map(plt.scatter, \"Width\", \"Weight\", alpha=0.7);","938e062c":"data_volume = pd.DataFrame([])\ndata_volume['Species'] = data_cleared['Species']\ndata_volume['Weight'] = data_cleared['Weight']\ndata_volume['Volume'] = data_cleared['Body_height'] * data_cleared['Height'] * data_cleared['Width']\n\ndata_volume","86c51771":"g = sns.FacetGrid(data_volume, col=\"Species\")\ng.map(plt.scatter, \"Volume\", \"Weight\", alpha=0.7);","913fb437":"def Regression():\n    total_y_test = []\n    total_y_pred = []\n    model = {}\n\n    for name in names:\n\n        df = data_volume[data_volume['Species']==name]\n        x = df.iloc[:,2:]\n        y = df['Weight']\n        x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=2)\n\n        model[name] = LinearRegression()\n        model[name].fit(x_train, y_train)\n        y_pred = model[name].predict(x_test)\n        total_y_test.append(y_test)\n        total_y_pred.append(pd.Series(y_pred))\n        print(name, \": \", r2_score(y_test, y_pred))\n\n\n    total_y_test = pd.concat(total_y_test, ignore_index=True)\n    total_y_pred = pd.concat(total_y_pred, ignore_index=True)\n\n    print(\"---= TOTAL =---\")\n    print(\"R2: \", r2_score(total_y_test, total_y_pred))\n    return total_y_pred, total_y_test, model","a4583bb7":"total_y_pred, total_y_test, model = Regression()\nplt.scatter(total_y_pred, total_y_test)\ndisplay(total_y_test, total_y_pred)","71ddb590":"### Test on linear independence ###","977d9152":"So we got 97,37% accuracy.\nIt is good result.\n\n### Happy Coding ###","0e6a0edb":"On boxplot can watch outliers by weight","1ef67101":"As we can see, some 'Weight' are negative value that can not be.\nLet `s to watch on plots:\n\nOn many plots there are no linear independence. The weight depends on the three components together, i.e. the volume. Let's try to multiply the components.","d24a54c8":"### Common LinearRegression ###","ca6ff7e2":"![image.png](attachment:image.png)","cb815012":"### 3. Remove outliers ###","d04eabfb":"On this plots the linear independence is more explicit. Use this data for learning linear regression by every species of fish.","76285f8e":"### LinearRegression by every species ###","b65a3f15":"From the plot data we can see that parameters Body_height, Total_Length, Diagonal_Length depend each other. \nSelect for data only: Body_height.\nAnd stay independed parameters:\n* Body_height\n* Height\n* Width\n \n Target parameter: \n* Weight","97e0d2a8":"### 2. Analize data ###"}}