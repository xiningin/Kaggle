{"cell_type":{"fadd43fc":"code","5b2971a9":"code","0073133e":"code","295a4fed":"code","e49ee8fd":"code","9ed4aad3":"code","0d8fe305":"code","800b54a1":"code","50e7a889":"code","7fe10539":"code","0d01062a":"code","af0ec114":"code","7f1e98f3":"code","771ea51b":"code","9c369819":"code","7fd477f7":"code","5f772791":"code","23c94d5e":"code","8fdde9d5":"markdown","c03776af":"markdown","0b876763":"markdown","2c81fdec":"markdown","6e12a84f":"markdown","55348870":"markdown"},"source":{"fadd43fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b2971a9":"from sklearn import model_selection\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom xgboost import XGBRegressor","0073133e":"df = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/train.csv\")\ndf.head()","295a4fed":"df['target'].hist()","e49ee8fd":"df['kfold'] = -1\ndf.head()","9ed4aad3":"kfold = model_selection.KFold(n_splits = 5, shuffle = True)  #5 is more or less a good split value\n\nfor fold, ( train_indices, test_indices ) in enumerate(kfold.split(df)):\n    df.loc[test_indices,'kfold'] = fold\n\ndf.head()","0d8fe305":"df[df['kfold'] == 0 ]['target'].hist()\ndf[df['kfold'] == 1 ]['target'].hist()\ndf[df['kfold'] == 2 ]['target'].hist()\ndf[df['kfold'] == 3 ]['target'].hist()\ndf[df['kfold'] == 4 ]['target'].hist()","800b54a1":"sample_submission = pd.read_csv('\/kaggle\/input\/30-days-of-ml\/sample_submission.csv')\nsample_submission.head()","50e7a889":"df_test = pd.read_csv('\/kaggle\/input\/30-days-of-ml\/test.csv')\ndf_test.head()","7fe10539":"df.dtypes","0d01062a":"objects = [ col for col in df.columns if 'cat' in col ]\n\nencode = OrdinalEncoder()\ndf[objects] = encode.fit_transform(df[objects])\ndf.head()","af0ec114":"df_test[objects] = encode.transform(df_test[objects])\ndf_test.drop('id',axis = 1, inplace = True )\ndf_test.head()","7f1e98f3":"not_features = ['id','kfold','target']\nfinal_predictions = []\n\nfor fold in range(5):\n    \n    train_fold = df[df['kfold'] != fold ]\n    xtrain = train_fold.drop( not_features, axis = 1 )\n    ytrain = train_fold['target']\n    \n    valid_fold = df[df['kfold'] == fold ]\n    xval = valid_fold.drop( not_features, axis = 1 )\n    yval = valid_fold['target']\n    \n    model = RandomForestRegressor(n_jobs = -1 )\n    model.fit(xtrain,ytrain)\n    prediction = model.predict(xval)\n    final_predictions.append(model.predict(df_test))\n    error = mean_squared_error(prediction, yval, squared = False )\n    print( fold, error )","771ea51b":"not_features = ['id','kfold','target']\nfinal_predictions = []\n\nfor fold in range(5):\n    \n    train_fold = df[df['kfold'] != fold ]\n    xtrain = train_fold.drop( not_features, axis = 1 )\n    ytrain = train_fold['target']\n    \n    valid_fold = df[df['kfold'] == fold ]\n    xval = valid_fold.drop( not_features, axis = 1 )\n    yval = valid_fold['target']\n    \n    model = XGBRegressor(n_jobs = -1 )\n    model.fit(xtrain,ytrain)\n    prediction = model.predict(xval)\n    final_predictions.append(model.predict(df_test))\n    error = mean_squared_error(prediction, yval, squared = False )\n    print( fold, error )","9c369819":"final_predictions = np.column_stack(final_predictions)\nfinal_predictions.shape","7fd477f7":"result = final_predictions.mean( axis = 1 )\nresult[:5]","5f772791":"sample_submission['target'] = result\nsample_submission.to_csv('submission.csv', index = False )","23c94d5e":"sample_submission.head()","8fdde9d5":"Since we would be using different folds to evaluate the model, it is important to check that each of the folds have similar characteristics so that the model evaluation is done on almost characteristically similar validation set. In the above split we see they have more or less similar distribution. If this would have failed then we had to do <b> Stratified KFold cross validation <\/b>.","c03776af":"Go to https:\/\/machinelearningmastery.com\/k-fold-cross-validation\/ to know what is kfold cross validation","0b876763":"Random Forest Regression : https:\/\/builtin.com\/data-science\/random-forest-algorithm","2c81fdec":"XGBoost Regression: https:\/\/analyticsindiamag.com\/xgboost-internal-working-to-make-decision-trees-and-deduce-predictions\/","6e12a84f":"Go to https:\/\/machinelearningmastery.com\/one-hot-encoding-for-categorical-data\/ to know about ordinal and one-hot encoding","55348870":"<b> Random Forest Regression <\/b> is slightly better than <b> XGBoost Regression <\/b> but training time required for XGBoost Regression is much less than that of the former."}}