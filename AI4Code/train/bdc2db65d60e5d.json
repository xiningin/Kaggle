{"cell_type":{"2b170b75":"code","a5f07b1b":"code","7a509e9e":"code","fd3b2f35":"code","b7136d07":"code","4ca9aa49":"code","f0442564":"code","38d5db4e":"code","0a1d40f4":"code","2c95c63f":"code","5a30b6f7":"code","c62a3473":"code","e1fdc315":"code","1dc66ece":"code","3f901afb":"code","6c695e23":"code","ee4db98d":"code","8e5940f2":"code","3524cfab":"code","e5cc536c":"code","872e20a6":"code","66a4476f":"code","ff9ee5b9":"code","ed4c7142":"markdown","56f16011":"markdown","645e25d9":"markdown","96efb9f7":"markdown","ec9c7fba":"markdown","4a4c5bd5":"markdown","be578783":"markdown","682386d8":"markdown","1caf47ad":"markdown","041fb478":"markdown"},"source":{"2b170b75":"from __future__ import print_function\n\nfrom collections import defaultdict, deque\nimport datetime\nimport pickle\nimport time\nimport torch.distributed as dist\nimport errno\n\nimport collections\nimport os\nimport numpy as np\nimport torch\nimport torch.utils.data\nfrom PIL import Image, ImageFile\nimport pandas as pd\nfrom tqdm import tqdm\nfrom torchvision import transforms\nimport torchvision\nimport random\nfrom torchvision.models.detection import FasterRCNN\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\n\nimport cv2\nimport seaborn as sns\n#from matplotlib import pyplot as plt\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom xml.etree import ElementTree as et\n\nimport plotly.graph_objects as go\n\nimport albumentations as A\nfrom albumentations.pytorch.transforms import ToTensorV2\n\nImageFile.LOAD_TRUNCATED_IMAGES = True","a5f07b1b":"class SmoothedValue(object):\n    \"\"\"\n    Melacak serangkaian nilai dan memberikan akses ke nilai yang dihaluskan\n    \"\"\"\n\n    def __init__(self, window_size=20, fmt=None):\n        if fmt is None:\n            fmt = \"{median:.4f} ({global_avg:.4f})\"\n        self.deque = deque(maxlen=window_size)\n        self.total = 0.0\n        self.count = 0\n        self.fmt = fmt\n\n    def update(self, value, n=1):\n        self.deque.append(value)\n        self.count += n\n        self.total += value * n\n\n    def synchronize_between_processes(self):\n        if not is_dist_avail_and_initialized():\n            return\n        t = torch.tensor([self.count, self.total], dtype=torch.float64, device='cuda')\n        dist.barrier()\n        dist.all_reduce(t)\n        t = t.tolist()\n        self.count = int(t[0])\n        self.total = t[1]\n\n    @property\n    def median(self):\n        d = torch.tensor(list(self.deque))\n        return d.median().item()\n\n    @property\n    def avg(self):\n        d = torch.tensor(list(self.deque), dtype=torch.float32)\n        return d.mean().item()\n\n    @property\n    def global_avg(self):\n        return self.total \/ self.count\n\n    @property\n    def max(self):\n        return max(self.deque)\n\n    @property\n    def value(self):\n        return self.deque[-1]\n\n    def __str__(self):\n        return self.fmt.format(\n            median=self.median,\n            avg=self.avg,\n            global_avg=self.global_avg,\n            max=self.max,\n            value=self.value)\n\n\ndef all_gather(data):\n    \"\"\"\n    Untuk memperoleh daftar data yang dikumpulkan\n    \"\"\"\n    world_size = get_world_size()\n    if world_size == 1:\n        return [data]\n\n    buffer = pickle.dumps(data)\n    storage = torch.ByteStorage.from_buffer(buffer)\n    tensor = torch.ByteTensor(storage).to(\"cuda\")\n\n    local_size = torch.tensor([tensor.numel()], device=\"cuda\")\n    size_list = [torch.tensor([0], device=\"cuda\") for _ in range(world_size)]\n    dist.all_gather(size_list, local_size)\n    size_list = [int(size.item()) for size in size_list]\n    max_size = max(size_list)\n\n    tensor_list = []\n    for _ in size_list:\n        tensor_list.append(torch.empty((max_size,), dtype=torch.uint8, device=\"cuda\"))\n    if local_size != max_size:\n        padding = torch.empty(size=(max_size - local_size,), dtype=torch.uint8, device=\"cuda\")\n        tensor = torch.cat((tensor, padding), dim=0)\n    dist.all_gather(tensor_list, tensor)\n\n    data_list = []\n    for size, tensor in zip(size_list, tensor_list):\n        buffer = tensor.cpu().numpy().tobytes()[:size]\n        data_list.append(pickle.loads(buffer))\n\n    return data_list\n\n\ndef reduce_dict(input_dict, average=True):\n    \"\"\"\n    keterangan:\n        input_dict : pengurangan semua nilai\n        average    : menentukan penjumlahan atau rerata\n    \"\"\"\n    world_size = get_world_size()\n    if world_size < 2:\n        return input_dict\n    with torch.no_grad():\n        names = []\n        values = []\n        for k in sorted(input_dict.keys()):\n            names.append(k)\n            values.append(input_dict[k])\n        values = torch.stack(values, dim=0)\n        dist.all_reduce(values)\n        if average:\n            values \/= world_size\n        reduced_dict = {k: v for k, v in zip(names, values)}\n    return reduced_dict\n\n\nclass MetricLogger(object):\n    def __init__(self, delimiter=\"\\t\"):\n        self.meters = defaultdict(SmoothedValue)\n        self.delimiter = delimiter\n\n    def update(self, **kwargs):\n        for k, v in kwargs.items():\n            if isinstance(v, torch.Tensor):\n                v = v.item()\n            assert isinstance(v, (float, int))\n            self.meters[k].update(v)\n\n    def __getattr__(self, attr):\n        if attr in self.meters:\n            return self.meters[attr]\n        if attr in self.__dict__:\n            return self.__dict__[attr]\n        raise AttributeError(\"'{}' object has no attribute '{}'\".format(\n            type(self).__name__, attr))\n\n    def __str__(self):\n        loss_str = []\n        for name, meter in self.meters.items():\n            loss_str.append(\n                \"{}: {}\".format(name, str(meter))\n            )\n        return self.delimiter.join(loss_str)\n\n    def synchronize_between_processes(self):\n        for meter in self.meters.values():\n            meter.synchronize_between_processes()\n\n    def add_meter(self, name, meter):\n        self.meters[name] = meter\n\n    def log_every(self, iterable, print_freq, header=None):\n        i = 0\n        if not header:\n            header = ''\n        start_time = time.time()\n        end = time.time()\n        iter_time = SmoothedValue(fmt='{avg:.4f}')\n        data_time = SmoothedValue(fmt='{avg:.4f}')\n        space_fmt = ':' + str(len(str(len(iterable)))) + 'd'\n        log_msg = self.delimiter.join([\n            header,\n            '[{0' + space_fmt + '}\/{1}]',\n            'eta: {eta}',\n            '{meters}',\n            'time: {time}',\n            'data: {data}',\n            'max mem: {memory:.0f}'\n        ])\n        MB = 1024.0 * 1024.0\n        for obj in iterable:\n            data_time.update(time.time() - end)\n            yield obj\n            iter_time.update(time.time() - end)\n            if i % print_freq == 0 or i == len(iterable) - 1:\n                eta_seconds = iter_time.global_avg * (len(iterable) - i)\n                eta_string = str(datetime.timedelta(seconds=int(eta_seconds)))\n                print(log_msg.format(\n                    i, len(iterable), eta=eta_string,\n                    meters=str(self),\n                    time=str(iter_time), data=str(data_time),\n                    memory=torch.cuda.max_memory_allocated() \/ MB))\n            i += 1\n            end = time.time()\n        total_time = time.time() - start_time\n        total_time_str = str(datetime.timedelta(seconds=int(total_time)))\n        print('{} Total time: {} ({:.4f} s \/ it)'.format(\n            header, total_time_str, total_time \/ len(iterable)))\n\n\ndef collate_fn(batch):\n    return tuple(zip(*batch))\n\n\ndef warmup_lr_scheduler(optimizer, warmup_iters, warmup_factor):\n\n    def f(x):\n        if x >= warmup_iters:\n            return 1\n        alpha = float(x) \/ warmup_iters\n        return warmup_factor * (1 - alpha) + alpha\n\n    return torch.optim.lr_scheduler.LambdaLR(optimizer, f)\n\n\ndef mkdir(path):\n    try:\n        os.makedirs(path)\n    except OSError as e:\n        if e.errno != errno.EEXIST:\n            raise\n\n\ndef setup_for_distributed(is_master):\n    \"\"\"\n    This function disables printing when not in master process\n    \"\"\"\n    import builtins as __builtin__\n    builtin_print = __builtin__.print\n\n    def print(*args, **kwargs):\n        force = kwargs.pop('force', False)\n        if is_master or force:\n            builtin_print(*args, **kwargs)\n\n    __builtin__.print = print\n\n\ndef is_dist_avail_and_initialized():\n    if not dist.is_available():\n        return False\n    if not dist.is_initialized():\n        return False\n    return True\n\n\ndef get_world_size():\n    if not is_dist_avail_and_initialized():\n        return 1\n    return dist.get_world_size()\n\n\ndef get_rank():\n    if not is_dist_avail_and_initialized():\n        return 0\n    return dist.get_rank()\n\n\ndef is_main_process():\n    return get_rank() == 0\n\n\ndef save_on_master(*args, **kwargs):\n    if is_main_process():\n        torch.save(*args, **kwargs)\n\n\ndef init_distributed_mode(args):\n    if 'RANK' in os.environ and 'WORLD_SIZE' in os.environ:\n        args.rank = int(os.environ[\"RANK\"])\n        args.world_size = int(os.environ['WORLD_SIZE'])\n        args.gpu = int(os.environ['LOCAL_RANK'])\n    elif 'SLURM_PROCID' in os.environ:\n        args.rank = int(os.environ['SLURM_PROCID'])\n        args.gpu = args.rank % torch.cuda.device_count()\n    else:\n        print('Not using distributed mode')\n        args.distributed = False\n        return\n\n    args.distributed = True\n\n    torch.cuda.set_device(args.gpu)\n    args.dist_backend = 'nccl'\n    print('| distributed init (rank {}): {}'.format(\n        args.rank, args.dist_url), flush=True)\n    torch.distributed.init_process_group(backend=args.dist_backend, init_method=args.dist_url,\n                                         world_size=args.world_size, rank=args.rank)\n    torch.distributed.barrier()\n    setup_for_distributed(args.rank == 0)","7a509e9e":"# Mendefinisikan files directory\ntrain_anno_dir = '..\/input\/chestxray-nodule-detection\/ChestX-ray_nodule\/train\/anno\/'\ntrain_img_dir = '..\/input\/chestxray-nodule-detection\/ChestX-ray_nodule\/train\/jpg\/'\ntest_anno_dir = '..\/input\/chestxray-nodule-detection\/ChestX-ray_nodule\/test\/anno\/'\ntest_img_dir = '..\/input\/chestxray-nodule-detection\/ChestX-ray_nodule\/test\/jpg\/'","fd3b2f35":"#Dibuat class untuk mempermudah pengaturan dataset. Pembuatan class ini dengan menggunakan utility function dari torch\nclass ChestXRayDataset(torch.utils.data.Dataset):\n    \n    def __init__(self, train_img_dir, train_anno_dir, width, height, transforms=None):\n        self.train_img_dir = train_img_dir\n        self.train_anno_dir = train_anno_dir\n        self.width = width\n        self.height = height\n        self.transforms = transforms  # If transformation is required, when transforms is not None\n        \n        self.classes_ = [_, 'nodule']  # Defining classes, a blank class is given for the background\n        \n        self.images = [img for img in sorted(os.listdir(train_img_dir)) if img[-4:]=='.jpg']\n        \n    def __len__(self):\n        return len(self.images)\n    \n    def __getitem__(self, idx):\n        img_name = self.images[idx]\n        img_path = os.path.join(self.train_img_dir, img_name)\n        \n        # Membaca citra\n        img = cv2.imread(img_path)\n        \n        # Mendefinisikan width dan height citra\n        wt = img.shape[1]\n        ht = img.shape[0]\n        \n        # Mengubah citra menjadi RGB dan menormalisasi citra\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB).astype(np.float32)\n        img = cv2.resize(img, (self.width, self.height), cv2.INTER_AREA)\n        img \/= 255.0\n        \n        annot_name = img_name[:-4] + '.xml'\n        annot_path = os.path.join(self.train_anno_dir, annot_name)\n        \n        # Boxes untuk menyimpan data koordinat dari bboxes\n        boxes, labels = [], []\n        \n        tree = et.parse(annot_path)\n        root = tree.getroot()\n        \n        # Koordinat box di ekstrak dari XML files untuk ukuran citra tertentu\n        for member in root.findall('object'):\n            labels.append(self.classes_.index(member.find('name').text))\n            \n            xmin = float(member.find('bndbox').find('xmin').text)\n            xmax = float(member.find('bndbox').find('xmax').text)\n            ymin = float(member.find('bndbox').find('ymin').text)\n            ymax = float(member.find('bndbox').find('ymax').text)\n            \n            x_min = (xmin\/wt)*self.width\n            x_max = (xmax\/wt)*self.width\n            y_min = (ymin\/ht)*self.height\n            y_max = (ymax\/ht)*self.height\n            \n            boxes.append([x_min, y_min, x_max, y_max])\n            \n        # Konversi menjadi Tensors   \n        boxes = torch.as_tensor(boxes, dtype=torch.float32)\n        area = (boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1])  # Calculating area of the boxes\n        \n        iscrowd = torch.zeros((boxes.shape[0], ), dtype=torch.int64)\n        \n        labels = torch.as_tensor(labels, dtype=torch.int64)\n        \n        image_id = torch.tensor([idx])\n        \n        target = {'boxes': boxes, 'area': area, 'labels': labels, \n                'iscrowd': iscrowd, 'image_id':image_id}\n        \n        if self.transforms:\n            sample = self.transforms(image = img,\n                                    bboxes = target['boxes'],\n                                    labels = labels)\n            \n            img = sample['image']\n            target['boxes'] = torch.Tensor(sample['bboxes'])\n            \n        return img, target","b7136d07":"# Observasi dataset tanpa transformasi\ndataset = ChestXRayDataset(train_img_dir,train_anno_dir, 224, 224)\nprint('length of dataset = ', len(dataset), '\\n')","4ca9aa49":"img, target = dataset[78]\nprint(img.shape, '\\n',target)","f0442564":"def plot_img_bbox(img, target):\n    \n    # plot citra dan bbox\n    # Bbox didefinisikan dengan data : (x-min), (y-min), (width), dan (height)\n    fig, a = plt.subplots(1,1)\n    fig.set_size_inches(5,5)\n    a.imshow(img)\n    \n    for box in (target['boxes']):\n        x, y, width, height  = box[0], box[1], box[2]-box[0], box[3]-box[1]\n        rect = patches.Rectangle((x, y),\n                                 width, height,\n                                 linewidth = 2,\n                                 edgecolor = 'r',\n                                 facecolor = 'none')\n\n        # Menambahkan bounding box pada citra\n        a.add_patch(rect)\n    plt.show()","38d5db4e":"#Menampilkan citra beserta bbox nya\nimg, target = dataset[0]\nplot_img_bbox(img, target)","0a1d40f4":"#Mendefinisikan fungsi untuk mengkoncersi citra menjadi PyTorch tensor\ndef get_transform(train=True):\n    if train:\n        return A.Compose([\n            A.HorizontalFlip(0.5),\n            ToTensorV2(p=0.1),\n        ], bbox_params=A.BboxParams(format='pascal_voc', label_fields=['labels']))\n    else:\n        return A.Compose([\n            ToTensorV2(p=0.1),\n        ], bbox_params=A.BboxParams(format='pascal_voc', label_fields=['labels']))","2c95c63f":"# Menyimpan data training dan test yang sudah di transformasi\ndataset_train = ChestXRayDataset(train_img_dir,train_anno_dir, 480, 480, transforms=get_transform(train=True))\ndataset_test = ChestXRayDataset(test_img_dir,test_anno_dir, 480, 480, transforms=get_transform(train=False))\n\ntorch.manual_seed(1)\nindices = torch.randperm(len(dataset)).tolist()\n\ndataloader_train = torch.utils.data.DataLoader(dataset_train, batch_size=4, shuffle=True,\n                                              num_workers=8, collate_fn=lambda x: tuple(zip(*x)))\ndataloader_test = torch.utils.data.DataLoader(dataset_test, batch_size=4, shuffle=True,\n                                              num_workers=8, collate_fn=lambda x: tuple(zip(*x)))","5a30b6f7":"num_classes = 2\ndevice = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n\nmodel_ft = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)\nin_features = model_ft.roi_heads.box_predictor.cls_score.in_features\nmodel_ft.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)\nmodel_ft.to(device)\n\nfor param in model_ft.parameters():\n    param.requires_grad = True","c62a3473":"#Averager untuk kemudahan observasi perkembangan training model\nclass Averager:\n    def __init__(self):\n        self.current_total = 0.0\n        self.iterations = 0.0\n\n    def send(self, value):\n        self.current_total += value\n        self.iterations += 1\n\n    @property\n    def value(self):\n        if self.iterations == 0:\n            return 0\n        else:\n            return 1.0 * self.current_total \/ self.iterations\n\n    def reset(self):\n        self.current_total = 0.0\n        self.iterations = 0.0","e1fdc315":"#Mendefinisikan fungsi untuk training tiap epoch\nloss_hist = Averager()\nitr = 15\nlossHistoryiter = []\nlossHistoryepoch = []\n\ndef train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq):\n    loss_hist.reset()\n    model.train()\n    metric_logger = MetricLogger(delimiter=\"  \")\n    metric_logger.add_meter('lr', SmoothedValue(window_size=1, fmt='{value:.6f}'))\n    header = 'Epoch: [{}]'.format(epoch)\n\n    lr_scheduler = None\n    if epoch == 0:\n        warmup_factor = 1. \/ 1000\n        warmup_iters = min(1000, len(data_loader) - 1)\n\n        lr_scheduler = warmup_lr_scheduler(optimizer, warmup_iters, warmup_factor)\n\n    for images, targets in metric_logger.log_every(data_loader, print_freq, header):\n        images = list(image.to(device) for image in images)\n        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n\n        loss_dict = model(images, targets)\n\n        losses = sum(loss for loss in loss_dict.values())\n        loss_value = losses.item()\n        loss_hist.send(loss_value)\n        lossHistoryiter.append(loss_value)\n        \n        loss_dict_reduced = reduce_dict(loss_dict)\n        losses_reduced = sum(loss for loss in loss_dict_reduced.values())\n\n        optimizer.zero_grad()\n        losses.backward()\n        optimizer.step()\n\n        if lr_scheduler is not None:\n            lr_scheduler.step()\n        \n        metric_logger.update(loss=losses_reduced, **loss_dict_reduced)\n        metric_logger.update(lr=optimizer.param_groups[0][\"lr\"])\n    lossHistoryepoch.append(loss_hist.value)","1dc66ece":"#Parameter optimizer dan scheduler\nparams = [p for p in model_ft.parameters() if p.requires_grad]\noptimizer = torch.optim.SGD(params, lr=0.001, momentum=0.9, weight_decay=0.0005)\nlr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer,\n                                               step_size=5,\n                                               gamma=0.1)","3f901afb":"#Tahap training model dengan parameter yang ditentukan\nnum_epochs = 21\nfor epoch in range(num_epochs):\n    train_one_epoch(model_ft, optimizer, dataloader_train, device, epoch, print_freq=100)\n    lr_scheduler.step()","6c695e23":"x = [i for i in range(num_epochs)]\ny = lossHistoryepoch\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x,y=y,\n                    mode='lines',\n                    name='lines'))\n\nfig.update_layout(title='Loss vs Epochs',\n                   xaxis_title='Epochs',\n                   yaxis_title='Loss')\nfig.show()","ee4db98d":"#Pendefinisian NMS\ndef apply_nms(prediction, threshold):\n    keep = torchvision.ops.nms(prediction['boxes'], prediction['scores'], threshold)\n    \n    final_prediction = prediction\n    final_prediction['boxes'] = final_prediction['boxes'][keep]\n    final_prediction['scores'] = final_prediction['scores'][keep]\n    final_prediction['labels'] = final_prediction['labels'][keep]\n    \n    return final_prediction\n\n# Fungsi untuk mengubah torch tensor menjadi PIL Image\ndef tensorToPIL(img):\n    return transforms.ToPILImage()(img).convert('RGB')","8e5940f2":"# Mengambil satu citra dari data set\nimg, target = dataset_test[5]\n\n# Membuat model dalam evaluation mode\nmodel_ft.eval()\nwith torch.no_grad():\n    prediction = model_ft([img.to(device)])[0]\n    \n#Menampilkan ekspektasi dan hasil keluaran model\nprint('predicted #boxes: ', len(prediction['labels']))\nprint('real #boxes: ', len(target['labels']))\nprint('EXPECTED OUTPUT')\nplot_img_bbox(tensorToPIL(img), target)\nprint('MODEL OUTPUT')\nplot_img_bbox(tensorToPIL(img), prediction)","3524cfab":"# Mengambil satu citra dari data set\nimg, target = dataset_test[14]\n\n# Membuat model dalam evaluation mode\nmodel_ft.eval()\nwith torch.no_grad():\n    prediction = model_ft([img.to(device)])[0]\n    \n#Menampilkan ekspektasi dan hasil keluaran model\nprint('predicted #boxes: ', len(prediction['labels']))\nprint('real #boxes: ', len(target['labels']))\nprint('EXPECTED OUTPUT')\nplot_img_bbox(tensorToPIL(img), target)\nprint('MODEL OUTPUT')\nplot_img_bbox(tensorToPIL(img), prediction)","e5cc536c":"# Mengambil satu citra dari data set\nimg, target = dataset_test[38]\n\n# Membuat model dalam evaluation mode\nmodel_ft.eval()\nwith torch.no_grad():\n    prediction = model_ft([img.to(device)])[0]\n    \n#Menampilkan ekspektasi dan hasil keluaran model\nprint('predicted #boxes: ', len(prediction['labels']))\nprint('real #boxes: ', len(target['labels']))\nprint('EXPECTED OUTPUT')\nplot_img_bbox(tensorToPIL(img), target)\nprint('MODEL OUTPUT')\nplot_img_bbox(tensorToPIL(img), prediction)","872e20a6":"#Pada dataset sebelumnya terlihat ada prediksi bbox yang berlebihan dan saling bertumpukan\n#Diaplikasikan NMS untuk mengurangi error ini\nnms_preds = apply_nms(prediction, threshold=0.25)\nprint('NMS APPLIED MODEL OUTPUT')\nplot_img_bbox(tensorToPIL(img), nms_preds)","66a4476f":"#Evaluasi struktur dan parameter model\nfor param in model_ft.parameters():\n    param.requires_grad = False\n\nmodel_ft.eval()","ff9ee5b9":"#Menyimpan model\ntorch.save(model_ft.state_dict(), 'fasterrcnn_resnet50_fpn_labriyantoko.pth')","ed4c7142":"# Utility Function\nUtility function pada bagian ini merupakan modifikasi dari library tensor, torch, dan lainnya untuk disesuai dengan kasus yang dihadapi. Modifikasi ini diperlukan dikarenakan beberapa library tidak saling compatibel satu dengan yang lain.","56f16011":"# Pengujian\nPada tahap ini model diberikan citra dari directory test, kemudian diamati apakah output model sesuai dengan ekspektasi. Dimungkinkan terdapat prediksi bbox yang melebihi dari yang seharusnya, sehingga diaplikasikan NMS untuk menghilangkan predikisi bbox yang kurang tepat.","645e25d9":"Model yang akan ditraining menggunakan backbone resnet 50 dan dengan FPN untuk menggenerate feature map.","96efb9f7":"# Nodule Detection on Chest X-ray Images using Faster R-CNN\noleh Labriyantoko K. (18\/431063\/TK\/47656)","ec9c7fba":"# Evaluate and Save The Model","4a4c5bd5":"# Model Faster R-CNN","be578783":"# Dataset\nData untuk training dan test sudah dipisahkan di dua directory berbeda. Masing-masing memiliki folder untuk images (cirta) dalam bentuk jpg dan annotation file dalam bentuk xml.","682386d8":"# Training Model","1caf47ad":"# Import some libraries","041fb478":"# Augmentasi Data\nProses penambahan data untuk deteksi objek berbeda dengan klasifikasi objek karena kita perlu memastikan bahwa kotak pembatas akhir masih sejajar dengan objek setelah transformasi. "}}