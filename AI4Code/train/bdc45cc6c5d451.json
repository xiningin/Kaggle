{"cell_type":{"4242fff0":"code","9b1ae30e":"code","19c0d77f":"code","ff4c8cc4":"code","5ed06951":"code","b9f7b260":"code","97dd366f":"code","07558c9a":"code","55f84b35":"code","47351682":"code","727fe346":"code","cf1c5339":"code","0f6b7a99":"code","16e62d72":"code","a619db31":"code","b0791cda":"code","56b75ffc":"code","862d30c3":"code","61159d8f":"code","0f5daa78":"code","b80fd950":"code","e939638a":"code","795f2ba3":"code","b4a2bbce":"code","610e456d":"code","615b9ea3":"code","266cc4e8":"markdown"},"source":{"4242fff0":"\nimport numpy as np\nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9b1ae30e":"df_full=pd.read_csv('\/kaggle\/input\/zomato-bangalore-restaurants\/zomato.csv')","19c0d77f":"df=df_full.head(100)","ff4c8cc4":"df.head()","5ed06951":"df.shape","b9f7b260":"df.isnull().sum()","97dd366f":"df=df.drop(['url','phone','dish_liked'],axis=1)","07558c9a":"df.nunique()","55f84b35":"df.drop_duplicates(inplace=True)","47351682":"df.dropna(inplace=True)","727fe346":"d={'Yes':1,'No':0}\ndf['online_order']=df['online_order'].map(d)\ndf['book_table']=df['book_table'].map(d)","cf1c5339":"df=df.rename(columns={'approx_cost(for two people)':'cost','listed_in(type)':'type', 'listed_in(city)':'city'})","0f6b7a99":"df['rate']=df['rate'].replace('NEW','0')\ndf['rate']=df['rate'].replace('-','0')\ndf['rate']=df['rate'].str.replace('\/5','').astype(float)","16e62d72":"df['cost']=df['cost'].str.replace(',','').astype(int)","a619db31":"restaurants = list(df['name'].unique())\ndf['Mean Rating'] = 0\n\nfor i in range(len(restaurants)):\n    df['Mean Rating'][df['name'] == restaurants[i]] = df['rate'][df['name'] == restaurants[i]].mean()\n    \nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range = (1,5))\ndf[['Mean Rating']] = scaler.fit_transform(df[['Mean Rating']]).round(2)","b0791cda":"import nltk\nimport string\nimport re","56b75ffc":"df['reviews_list']=df['reviews_list'].astype(str)","862d30c3":"def text_lowercase(text):\n    return text.lower()\n\ndf['reviews_list']=text_lowercase(df['reviews_list'].str)","61159d8f":"def remove_punctuation(text):\n    translator = str.maketrans('', '', string.punctuation)\n    return text.translate(translator)\n  \n\ndf['reviews_list']=remove_punctuation(df['reviews_list'].str)","0f5daa78":"def remove_numbers(text):\n    result = re.sub(r'\\d+', '', text)\n    return result\n\ndf['reviews_list']=df['reviews_list'].apply(remove_numbers)","b80fd950":"df['reviews_list']=df['reviews_list'].str.replace('rated  ratedn','')","e939638a":"def remove_whitespace(text):\n    return  \" \".join(text.split())\n  \n\ndf['reviews_list']=df['reviews_list'].apply(remove_whitespace)","795f2ba3":"nltk.download('stopwords')\nnltk.download('punkt')","b4a2bbce":"from nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n  \ndef remove_stopwords(text):\n    stop_words = set(stopwords.words(\"english\"))\n    word_tokens = word_tokenize(text)\n    return  \" \".join([word for word in word_tokens if word not in stop_words])\n\n\ndf['reviews_list']=df['reviews_list'].apply(remove_stopwords)","610e456d":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(df['reviews_list'])\n#cosine_similarities = linear_kernel(X, X)\ncos_sim = cosine_similarity(X, X)","615b9ea3":"def recommend(name, cosine_similarities = cos_sim):\n\n    recommend_restaurant = []\n    idx = df[df == name].index[0]\n    score_series = pd.Series(cosine_similarities[idx]).sort_values(ascending=False)\n    top10_indexes = list(score_series.iloc[0:11].index)\n\n    for each in top10_indexes:\n        recommend_restaurant.append(list(df.index)[each])\n\n    df_new = pd.DataFrame(columns=['cuisines', 'Mean Rating', 'cost'])\n\n    for each in recommend_restaurant:\n        df_new = df_new.append(pd.DataFrame(df[['cuisines','Mean Rating', 'cost']][df.index == each].sample()))\n\n    df_new = df_new.drop_duplicates(subset=['cuisines','Mean Rating', 'cost'], keep=False)\n    df_new = df_new.sort_values(by='Mean Rating', ascending=False).head(10)\n    \n    print('Top %s Resturents like %s with similar reviews: ' % (str(len(df_new)), name))\n    \n    return df_new\nrecommend('Pai Vihar')","266cc4e8":"# I'm not using full Data as it taking to much time to ru the notebook, I have taken only 100 values."}}