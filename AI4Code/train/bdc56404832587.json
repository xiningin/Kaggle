{"cell_type":{"93766615":"code","1c302f30":"code","118635ef":"code","5bc32f56":"code","0781e6bc":"code","c4804cd6":"code","f9c094f0":"code","07f1f5e4":"code","67e2f5b3":"code","566f42c4":"code","a938e8de":"code","bbd71a67":"code","d278ebcd":"code","3918a6e6":"code","e5462158":"code","516ea7b9":"code","2c16aff2":"code","cdbc068c":"code","d663ebe2":"code","584031cb":"code","64988353":"code","12227567":"code","79e5f3cf":"code","2b46d708":"code","19176758":"code","975f3d29":"code","76f66dfe":"code","26da8766":"code","ead6e35a":"code","b657f42e":"code","555bfcf6":"code","3d5dfcfa":"code","1506165c":"code","4cdb2a94":"code","0777877a":"code","631dee00":"code","ced0f9ce":"code","f0d2426a":"code","981b3689":"code","c7c7a1c2":"code","d109fabd":"code","d357e297":"markdown","954e3166":"markdown","e8c3c568":"markdown","ec3a19ab":"markdown","500bfd86":"markdown","12d7b0b2":"markdown","f4144539":"markdown","04ce858d":"markdown","f1042cfe":"markdown","af017eff":"markdown","4c7b5ac8":"markdown"},"source":{"93766615":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1c302f30":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n\nsns.set()\n%matplotlib inline","118635ef":"import pandas as pd\ndf = pd.read_csv(\"..\/input\/car-sale-advertisements\/car_ad.csv\", sep=',',encoding='latin-1')\ndf.head()","5bc32f56":"df.isnull().sum()","0781e6bc":"style.use('bmh')\nsns.countplot(df.registration)","c4804cd6":"df.year.value_counts().head().plot(kind='bar')","f9c094f0":"df.drop(['body','engType','registration', 'model', 'drive'], axis=1, inplace=True)","07f1f5e4":"style.use('bmh')\n\nf = plt.figure(figsize=[15,20])\n\nbins = 30\n\nax = f.add_subplot(4,1,1)\nsns.distplot(df['price'], color='c', bins=bins)\nplt.xlabel('Price')\n\nax = f.add_subplot(4,1,2)\nsns.distplot(df['mileage'], color='olive', bins=bins)\nplt.xlabel('Mileage')\n\nax = f.add_subplot(4,1,3)\nsns.distplot(df['engV'], color='crimson', bins=bins)\nplt.xlabel('Engine Volume')\n\nax = f.add_subplot(4,1,4)\nsns.distplot(df['year'], color='salmon', bins=bins)\nplt.xlabel('Year')","67e2f5b3":"q = df['price'].quantile(0.99)\ndata_price = df[df['price'] < q]","566f42c4":"q = data_price['mileage'].quantile(0.99)\ndata_mil = data_price[data_price['mileage'] < q]","a938e8de":"data_eng = data_mil[data_mil['engV'] < 6.5]","bbd71a67":"q = data_eng['year'].quantile(0.01)\ndata = data_eng[data_eng['year'] > q]","d278ebcd":"style.use('bmh')\n\nf = plt.figure(figsize=[15,20])\n\nbins = 30\n\nax = f.add_subplot(4,1,1)\nsns.distplot(data['price'], color='c', bins=bins)\nplt.xlabel('Price')\n\nax = f.add_subplot(4,1,2)\nsns.distplot(data['mileage'], color='olive', bins=bins)\nplt.xlabel('Mileage')\n\nax = f.add_subplot(4,1,3)\nsns.distplot(data['engV'], color='crimson', bins=bins)\nplt.xlabel('Engine Volume')\n\nax = f.add_subplot(4,1,4)\nsns.distplot(data['year'], color='salmon', bins=bins)\nplt.xlabel('Year')","3918a6e6":"data.describe(include='all')","e5462158":"style.use('default')\nf, (ax1, ax2, ax3) = plt.subplots(1,3, sharey=True, figsize=[20,5])\n\nax1.scatter(data['mileage'], data['price'], color='salmon', alpha = 0.5)\nplt.title('Mileage vs Price')\n\nax2.scatter(data['engV'], data['price'], color='olive', alpha = 0.5)\nplt.title('engine Volume vs Price')\n\nax3.scatter(data['year'], data['price'], color='c', alpha = 0.5)\nplt.title('Year vs Price')","516ea7b9":"log_price = np.log(data['price'])","2c16aff2":"data['log_price'] = log_price","cdbc068c":"data = data.drop(['price'], axis=1)","d663ebe2":"f, (ax1, ax2, ax3) = plt.subplots(1,3, sharey=True, figsize=[20,5])\n\nax1.scatter(data['mileage'], data['log_price'], color='salmon', alpha = 0.5)\nplt.title('Mileage vs Log Price')\n\nax2.scatter(data['engV'], data['log_price'], color='olive', alpha = 0.5)\nplt.title('engine Volume vs Log Price')\n\nax3.scatter(data['year'], data['log_price'], color='cyan', alpha = 0.5)\nplt.title('Year vs Log Price')","584031cb":"# removing infinite values\ndata = data.replace([np.inf, -np.inf], np.nan).dropna(subset = ['log_price'], axis = 0)","64988353":"from statsmodels.stats.outliers_influence import variance_inflation_factor","12227567":"vif_table = pd.DataFrame()\nfeatures = data[['year', 'mileage', 'engV']]","79e5f3cf":"vif = [variance_inflation_factor(features.values, i) for i in range(features.shape[1])]","2b46d708":"vif_table['Feature'] = features.columns\nvif_table['VIF'] = vif","19176758":"vif_table","975f3d29":"VIF = pd.DataFrame(columns=['VIF','Standard'])\nVIF['VIF'] =[\n    'vif = 1',\n    '1 > vif > 7',\n    'vif < 7'\n]\nVIF['Standard'] = [\n    'No Multicollinearity',\n    'Perfectly Okay',\n    'Not Okay'\n]\nVIF","76f66dfe":"data = data.drop(['year'], axis=1)","26da8766":"data = pd.get_dummies(data, drop_first=True)","ead6e35a":"data.head()","b657f42e":"X = data.drop(['log_price'], axis=1)\ny = data['log_price']","555bfcf6":"from sklearn.model_selection import train_test_split","3d5dfcfa":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)","1506165c":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()","4cdb2a94":"lm.fit(X_train, y_train)","0777877a":"y_pred = lm.predict(X_test)","631dee00":"style.use('classic')\nplt.figure(figsize=(10,8))\nsns.regplot(np.exp(y_test), np.exp(y_pred), color='orange')\nplt.grid()\nplt.title('Actual vs Predicted')\nplt.xlabel('Actual Price')\nplt.ylabel('Predicted Price')","ced0f9ce":"# Residual\/Error\nplt.figure(figsize=[10,8])\nsns.distplot(y_test-y_pred, bins=50, color='turquoise')\nplt.grid()\nplt.xlabel(\"Residuals\", fontsize=15)","f0d2426a":"from sklearn import metrics","981b3689":"print('R-score: ', lm.score(X_train, y_train))\nprint('MAE: ', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE: ', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE: ', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","c7c7a1c2":"weights = pd.DataFrame(lm.coef_, X.columns,columns=['Weights'])\nweights","d109fabd":"testing_data=pd.DataFrame({'actual price': np.exp(y_test),\n                          'predicted price': np.exp(y_pred),\n                          'residuals': np.abs(np.exp(y_test)-np.exp(y_pred))})\n\ntesting_data.head()","d357e297":"# Linear Regression","954e3166":"## Log Transformation","e8c3c568":"Because year exceeds the standard collinearity, we will drop it","ec3a19ab":"## Filtering Outliers","500bfd86":"### Checking Multicollinearity","12d7b0b2":"# Evaluate Performance","f4144539":"After applying log function, some data point result to infinity or negative infinity. If we continue to process the data in training, numpy can't handle it.","04ce858d":"# Exploration","f1042cfe":"# OLS Assumption","af017eff":"### Creating Dummy Variable for Categorical Data","4c7b5ac8":"# Weight Interpretation\n<ul><b>I. Continuous Variable<\/b><\/ul>\n       <li>1. A positive weight shows that as Feature increases in value, so do the 'log_price' and 'Price' respectively.<\/li>\n       <li>2. A negative weight shows that as Feature increases in value, 'log_price' and 'Price' decreases respectively.<\/li>\n   <ul><\/ul>\n<ul><b>II. Dummy Variable <\/b><\/ul> \n       <li>1. A positive weight show that the respective category is expensive than benchmark.<\/li>"}}