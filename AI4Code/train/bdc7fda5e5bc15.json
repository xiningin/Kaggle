{"cell_type":{"0c226d34":"code","43570d6d":"code","05868bda":"code","515fb6c4":"code","fc8751f3":"code","b0f773f7":"code","ed9c732f":"code","f9a9691b":"code","a38fece3":"code","543e8ce3":"code","705cd258":"code","8e1f4e49":"code","1a990097":"code","faa55730":"code","184ffd44":"code","059efc5d":"code","0f6b7365":"code","e8bbd298":"code","ccab09c9":"code","f8a8b53b":"code","313bda41":"code","9418bba6":"markdown","6f77f48b":"markdown","8526bba6":"markdown","07c6e24b":"markdown","430176a6":"markdown","e8dc48b8":"markdown"},"source":{"0c226d34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","43570d6d":"import lzma\nimport os\nfrom scipy import stats, integrate\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport csv\nimport re\n\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score","05868bda":"!apt-get install p7zip\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/train.tsv.7z\n!unzip -o \/kaggle\/input\/mercari-price-suggestion-challenge\/test_stg2.tsv.zip\n!unzip -o \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission_stg2.tsv.zip","515fb6c4":"df_train = pd.read_csv('train.tsv', sep='\\t')\ndf_test = pd.read_csv('test_stg2.tsv', sep='\\t')\n\ndf_train.drop(df_train[df_train['price'] == 0].index, inplace=True)","fc8751f3":"print(\"Train shape:\", df_train.shape)\ndf_train.info()","b0f773f7":"df_train.head(5)","ed9c732f":"print(\"Test shape:\", df_test.shape)\ndf_test.info()","f9a9691b":"df_test.head(5)","a38fece3":"print(df_train['name'].value_counts())","543e8ce3":"print(df_train['item_condition_id'].value_counts())","705cd258":"print(df_train['category_name'].value_counts())\nprint(\"Category_name missing:\", df_train['category_name'].isnull().sum())","8e1f4e49":"print(df_train['brand_name'].value_counts())\nprint(\"Brand_name missing:\", df_train['brand_name'].isnull().sum())","1a990097":"df_train['price'].describe()\n","faa55730":"print(df_train['shipping'].value_counts())\n","184ffd44":"print(df_train['item_description'].value_counts())\nprint(\"item_description missing:\", df_train['item_description'].isnull().sum())","059efc5d":"def clean_df(df):\n    # X\u1eed l\u1ef9 nh\u1eefng d\u1eef li\u1ec7u b\u1ecb thi\u1ebfu\n    df['brand_name']=df['brand_name'].fillna('Unknown')\n    df['category_name']=df['category_name'].fillna('Unknown\/Unknown\/Unknown')\n    df['item_description']=df['item_description'].fillna('Unknown')\n    df['item_condition_id']=df['item_condition_id'].fillna(3)\n    \n     # C\u1eaft chu\u1ed7i trong tr\u01b0\u1eddng 'category_name' v\u00e0 th\u00eam c\u00e1c tr\u01b0\u1eddng 'category1', 'category2', 'category3','category12'\n    df[['category1', 'category2', 'category3']] = df['category_name'].str.split('\/', 2, expand=True)\n    df['category12'] = df['category1'].astype(str)+'_'+df['category2'].astype(str)\n\n    # Th\u00eam tr\u01b0\u1eddng d\u1eef li\u1ec7u l\u00e0 \u0111\u1ed9 d\u00e0i c\u1ee7a 'name' v\u00e0 \u0111\u1ed9 d\u00e0i c\u1ee7a 'item_description'\n    df['name_length'] = df['name'].str.len()\n    df['item_description_length'] = df['item_description'].str.len()\n\n    # T\u00ecm chu\u1ed7i 'brand new' v\u00e0 'tag' trong tr\u01b0\u1eddng 'item_description' v\u00e0 th\u00eam tr\u01b0\u1eddng 'word_brand_new', 'word_tag'\n    df['word_brand_new'] = df['item_description'].str.lower().str.contains('brand new')\n    df['word_brand_new'] = df['word_brand_new'].astype(int)\n    df['word_tag'] = df['item_description'].str.lower().str.contains('tag').astype(int)\n    df['word_tag'] = df['word_tag'].astype(int)\n\n    return df\n    \ndf_train = clean_df(df_train)\ndf_test = clean_df(df_test)","0f6b7365":"# Nh\u00f3m t\u00ean v\u00e0 gi\u00e1, sau \u0111\u00f3 tr\u00edch xu\u1ea5t c\u00e1c c\u1eb7p \u0111\u1ec3 truy xu\u1ea5t nhanh h\u01a1n\ndef create_price_d(grouped, operation_name, orig_colname):\n    price_d = {}\n    for index, row in grouped.iterrows():\n        price_d[row[orig_colname]] = row['price']\n    return {orig_colname + \"_\" + operation_name: price_d}\n\n\n# T\u1ea1o ra c\u00e1c b\u1ea3n tra c\u1ee9u d\u1ef1a tr\u00ean 'brand_name','category1','category12','category_name' v\u00e0 s\u1eed d\u1ee5ng n\u00f3 nh\u01b0 c\u00f4ng c\u1ee5 \u0111\u1ecbnh gi\u00e1\nprice_d = {}    \nfor col in ['category1', 'category12', 'category_name', 'brand_name']:\n    price_d.update(create_price_d(df_train.groupby(col, as_index=False).min(), 'min', col))\n    price_d.update(create_price_d(df_train.groupby(col, as_index=False).median(), 'median', col))\n    price_d.update(create_price_d(df_train.groupby(col, as_index=False).mean(), 'mean', col))\n    price_d.update(create_price_d(df_train.groupby(col, as_index=False).max(), 'max', col))","e8bbd298":"# Th\u00eam c\u00e1c t\u00f9y ch\u1ec9nh tr\u00ean v\u00e0 df_train v\u00e0 df_test\ndef price_df(df, pricedicts):\n    for col in ['brand_name', 'category1', 'category12', 'category_name']:\n        for oper in ['_min', '_median', '_mean', '_max']:\n            df[col + oper] = df[col].map(price_d[col + oper])\n            df[col + oper] = df[col + oper].fillna(price_d[col + oper].get('Unknown', 5))\n\nprice_df(df_train, price_df)\nprice_df(df_test, price_df)","ccab09c9":"# T\u1ea1o d\u1eef li\u1ec7u cho m\u00f4 h\u00ecnh\nxs = ['item_condition_id', 'shipping', 'name_length', 'item_description_length',\n      'brand_name_min', 'brand_name_max', 'brand_name_median', 'brand_name_mean', \n      'category1_min', 'category1_max', 'category1_median', 'category1_mean',\n      'category12_min', 'category12_max', 'category12_median', 'category12_mean',\n      'category_name_min', 'category_name_max', 'category_name_median', 'category_name_mean','word_brand_new', 'word_tag']\n\ndf_train_xs = df_train[xs]\ndf_train_y = df_train[['price']]\n\ndf_test_xs  = df_test[xs]","f8a8b53b":"# LinearRegssion\nreg = linear_model.LinearRegression()\n\n# Train m\u00f4 h\u00ecnh s\u1eed d\u1ee5ng t\u1eadp train\nreg.fit(df_train_xs, df_train_y)\n\n# T\u1ea1o ra d\u1ef1 \u0111o\u00e1n d\u1ef1a tr\u00ean t\u1eadp test\ndf_test['price'] = reg.predict(df_test_xs)\n\n# V\u1edbi nh\u1eefng d\u1ef1 \u0111o\u00e1n gi\u00e1 < 0, s\u1eeda ch\u00fang th\u00e0nh 0\ndf_test.loc[df_test.price < 0, 'price'] = 0\n\n# C\u00e1c h\u1ec7 s\u1ed1 c\u1ee7a m\u00f4 h\u00ecnh\nprint('Coefficients: \\n', reg.coef_)","313bda41":"submissiondf = df_test[['test_id', 'price']]\nsubmissiondf.to_csv('submission.csv', index=False)\n\nsubmissiondf.head(10)","9418bba6":"# Gi\u1ea3i n\u00e9n d\u1eef li\u00ea\u1ee5","6f77f48b":"# M\u00f4 h\u00ecnh","8526bba6":"# Khai b\u00e1o th\u01b0 vi\u1ec7n","07c6e24b":"# Preprocess","430176a6":"# Submit","e8dc48b8":"# Ph\u00e2n t\u00edch d\u1eef li\u1ec7u"}}