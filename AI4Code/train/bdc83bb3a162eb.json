{"cell_type":{"bcd4b81c":"code","545459e6":"code","11bacacb":"code","760a339b":"code","2d432d6e":"code","783b4dfc":"code","8d1f336d":"code","64d947fa":"code","45942f12":"code","33c222c1":"markdown","51b8ad1e":"markdown","99fd2a08":"markdown","e25f62eb":"markdown","dfe5ff0a":"markdown","01950d36":"markdown","f1ea1099":"markdown","77e25fc2":"markdown","7283ca53":"markdown","a1fe5429":"markdown"},"source":{"bcd4b81c":"# Load Datasets\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\niris = load_iris()\nX = iris.data\ny = iris.target\nfeature_names = iris.feature_names\ntarget_names = iris.target_names\n\nprint(\"Feature names:\", feature_names)\nprint(\"Target names:\", target_names)\nprint(\"\\nFirst 10 rows of X:\\n\", X[:10])","545459e6":"# Split into train and test dataset\n# 70% Train\n# 30% Test\n\nX_train, X_test, y_train, y_test = train_test_split(\n   X, y, test_size = 0.3, random_state = 1\n)\n\nprint(X_train.shape)\nprint(X_test.shape)\n\nprint(y_train.shape)\nprint(y_test.shape)","11bacacb":"# Import K-Neighbors Classifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics","760a339b":"classifier_knn = KNeighborsClassifier(n_neighbors = 3)\nclassifier_knn.fit(X_train, y_train)\ny_pred = classifier_knn.predict(X_test)\nprint(y_pred)\n\n# Finding accuracy by comparing actual response values(y_test)with predicted response value(y_pred)\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred))\n\n# Providing sample data and the model will make prediction out of that data\n# sample = [[4.9, 3., 1.4, 0.2], [4.7, 3.2, 1.3, 0.2]]\nsample = [[5, 5, 3, 2], [2, 4, 3, 5]]\npreds = classifier_knn.predict(sample)\npred_species = [iris.target_names[p] for p in preds] \nprint(\"Predictions:\", pred_species)","2d432d6e":"import joblib\njoblib.dump(classifier_knn, 'iris_classifier_knn.joblib')\n\nclassifier_knn_load = joblib.load('iris_classifier_knn.joblib')\nsample = [[5, 5, 3, 2], [2, 4, 3, 5]]\npreds = classifier_knn_load.predict(sample)\npred_species = [iris.target_names[p] for p in preds] \nprint(\"Predictions:\", pred_species)","783b4dfc":"import numpy as np\nfrom sklearn import preprocessing\ninput_data = np.array(\n   [\n      [2.1, -1.9, 5.5],\n      [-1.5, 2.4, 3.5],\n      [0.5, -7.9, 5.6],\n      [5.9, 2.3, -5.8]\n   ]\n)\ndata_normalized_l1 = preprocessing.normalize(input_data, norm='l1')\nprint(\"\\nL1 normalized data:\\n\", data_normalized_l1)","8d1f336d":"data_normalized_l2 = preprocessing.normalize(input_data, norm='l2')\nprint(\"\\nL2 normalized data:\\n\", data_normalized_l2)","64d947fa":"#Decision Tree Classifier\n\nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\nX=[[165,19],[175,32],[136,35],[174,65],[141,28],[176,15],[131,32],\\\n   [166,6],[128,32],[179,10],[136,34],[186,2],[126,25],[176,28],[112,38],\\\n   [169,9],[171,36],[116,25],[196,25], [196,38], [126,40], [197,20], [150,25],\\\n   [140,32],[136,35]]\nY=['Man','Woman','Woman','Man','Woman','Man','Woman','Man','Woman','Man','Woman',\\\n   'Man','Woman','Woman','Woman','Man','Woman','Woman','Man', 'Woman', 'Woman', 'Man', 'Man', 'Woman', 'Woman']\ndata_feature_names = ['height','length of hair']\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state = 1)\nDTclf = tree.DecisionTreeClassifier()\nDTclf = DTclf.fit(X,Y)\nprediction = DTclf.predict([[135,29]])\nprint(prediction)","45942f12":"#Menggunakan predict_proba untuk memprediksi probabilitas untuk setiap class\n\nprediction = DTclf.predict_proba([[135,29]])\nprint(prediction)","33c222c1":"# Beberapa contoh metode lainnya yang bisa digunakan dengan Sci-Kit Learn","51b8ad1e":"**Menginstall Sci-Kit Learn**\n\nJika menggunakan Command Prompt pip install -U scikit-learn\n\nJika menggunakan Anaconda Prompt conda install -c conda-forge scikit-learn","99fd2a08":"# **Split Dataset**\nDalam berikut ini, dataset bunga akan dibagi menjadi training dan test dataset","e25f62eb":"Tutorial for beginner:\nhttps:\/\/www.tutorialspoint.com\/scikit_learn\/scikit_learn_modelling_process.html","dfe5ff0a":"# **Scikit Learn**\nWebsite Link:\nhttps:\/\/scikit-learn.org\/stable\/index.html","01950d36":"Contoh salah satu metode pre-processing untuk normalisasi","f1ea1099":"# **Train Model**\nTerdapat beberapa algoritma yang biasa digunakan pada scikit-learn, yaitu: fitting, predicting accuracy, recall","77e25fc2":"# **Save & Loading Model**\n.dump berguna untuk menyimpan hasil training menjadi file model\n.load berguna mengload kembali model yang sudah dibuat sebelumnya dengan menggunakan .dump","7283ca53":"**Mengecek Versi Sci-Kit Learn**\n\nJika menggunakan Command Prompt **python -m pip show scikit-learn** -> Untuk melihat versi dan lokasi Sci-Kit Learn diinstall\n\nJika menggunakan Anaconda Prompt **conda list scikit-learn** -> Untuk melihat versi Sci-Kit Learn yang sudah diinstall","a1fe5429":"# **Dataset Loading**\nSebagai salah satu contoh demo untuk Scikit Learn, digunakan dataset klasifikasi bunga berdasarkan iris bunga. Pada dataset ini terdapat 4 fitur:\n![image.png](attachment:image.png)\n* Sepal Length (cm)\n* Sepal Width (cm)\n* Petal Length (cm)\n* Petal Width (cm)\n\nDengan 3 target klasifikasi bunga:\n* Setosa (0)\n* Versicolor (1)\n* Virginica (2)"}}