{"cell_type":{"dc49a01b":"code","60d2f2da":"code","d50dd099":"code","e033c936":"code","6e86ad41":"code","d362f462":"code","a716ca95":"code","243188c2":"code","ff50129b":"code","45eae7d0":"code","29e619c1":"code","4c67a724":"markdown","a67519f4":"markdown","924e9811":"markdown","73bd9272":"markdown","bb28b1c8":"markdown","43546938":"markdown","fc41009e":"markdown","772e3a93":"markdown","ef97612c":"markdown","b694507e":"markdown"},"source":{"dc49a01b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn import datasets, model_selection\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nimport sklearn\nfrom sklearn.metrics import accuracy_score, classification_report","60d2f2da":"train = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ntrain.head()","d50dd099":"train.describe()","e033c936":"train.info()","6e86ad41":"sns.countplot(x=\"Species\", data=train)","d362f462":"validation_split = 0.2\nlabels = sorted(list(train[\"Species\"].unique()))\ntrain_features, test_features = None, None\nfor item in labels:\n    data = train[train.Species == item]\n    train_subset, test_subset = train_test_split(data, test_size=validation_split)\n    if train_features is None or test_features is None:\n        train_features = train_subset\n        test_features = test_subset\n    else:\n        train_features = pd.concat([train_features, train_subset])\n        test_features = pd.concat([test_features, test_subset])\nprint(train_features.shape, test_features.shape)\ntrain_features = sklearn.utils.shuffle(train_features)\ntrain_targets = train_features.pop(\"Species\")\ntest_targets = test_features.pop(\"Species\")","a716ca95":"train_features.pop(\"Id\")\n_ = test_features.pop(\"Id\")","243188c2":"best_model = None\nbest_score = 0\nfor depth in range(2, 15):\n    model = DecisionTreeClassifier(max_depth=depth)\n    model.fit(train_features, train_targets)\n    score = accuracy_score(test_targets, model.predict(test_features))\n    if score > best_score:\n        best_score = score\n        best_model = model\nprint(\"Best Model:\", model, \" Score:\", best_score)","ff50129b":"y_pred = model.predict(test_features)\nprint(y_pred[:10])","45eae7d0":"test_accuracy = accuracy_score(test_targets, y_pred)\nprint(\"Test Accuracy: %.2f\"%(test_accuracy))","29e619c1":"cls_report = classification_report(y_pred, test_targets)\nprint(cls_report)","4c67a724":"<a id=\"2.\"><\/a>\n## 2. Import dataset","a67519f4":"\n#  Iris Decision Tree Classifier (100% accuracy)\n## Table of Contents\n* [1. Import packages](#1.)\n* [2. Import dataset](#2.)\n* [3. EDA & Preprocessing](#3.)\n* [3.1 Distribution of label](#3.1)\n* [3.2 Train Validation Split](#3.2)\n* [4. Model Development](#4.)\n* [5. Model Evaluation](#5.)\n* [5.1 Accuracy Score](#5.1)\n* [5.2 Classification Report](#5.2)\n\n<a id=\"1.\"><\/a>\n## 1. Import packages","924e9811":"Remove ID field cause it's not necessary.","73bd9272":"<a id=\"5.1\"><\/a>\n### 5.1 Accuracy Score","bb28b1c8":"<a id=\"3.1\"><\/a>\n### 3.1 Distribution of label","43546938":"<a id=\"3.2\"><\/a>\n### 3.2 Train Validation Split","fc41009e":"<a id=\"5.\"><\/a>\n## 5. Model Evaluation","772e3a93":"<a id=\"4.\"><\/a>\n## 4. Model Development","ef97612c":"<a id=\"3.\"><\/a>\n## 3. EDA & Preprocessing","b694507e":"<a id=\"5.2\"><\/a>\n### 5.2 Classification Report"}}