{"cell_type":{"f85d839e":"code","e20dc03f":"code","39df25ba":"code","54e63851":"code","5bb16199":"code","d27a0c8c":"code","cb61ab4b":"code","6b0b3429":"code","66251520":"code","bc4a6a84":"code","b763f0f0":"code","33b528a8":"code","ea26f912":"code","def57f91":"code","1416aace":"code","84c66f89":"code","3af27c66":"code","bda08da3":"code","ba343ac9":"code","55303c34":"code","f3658bc6":"code","3d5dc4cb":"code","1335d957":"code","09dddf69":"code","b73aba18":"code","9c98b631":"code","fd37cdce":"code","ade6e525":"markdown","407600fe":"markdown","bd54a5ba":"markdown","5422d7af":"markdown","cff59840":"markdown","5eb23928":"markdown","f54c5fbe":"markdown","96a2bddc":"markdown","de8055ab":"markdown","546b907b":"markdown","d165dea8":"markdown","b5c8c082":"markdown"},"source":{"f85d839e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n#i am using this style\n#(Bu stili kullan\u0131yorum)\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#Do not show warnings from Python\n#(Python'dan gelen(kaynakl\u0131) uyar\u0131lar\u0131 g\u00f6sterme)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e20dc03f":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ntest_PassengerId = test_df[\"PassengerId\"]\n#I converted my data into a data frame\n#(Verilerimi bir veri \u00e7er\u00e7evesine \u00e7evirdim)\n","39df25ba":"train_df.columns\n#I'm reviewing rows of data\n#(Veri sat\u0131rlar\u0131n\u0131 inceliyorum )","54e63851":"train_df.head()\n#I get the first five lines of data\n#(\u0130lk be\u015f sat\u0131r veriyi al\u0131yorum)","5bb16199":"train_df.describe()\n#I get statistical values about numerical rows\n#(Say\u0131sal sat\u0131rlar hakk\u0131nda istatistiksel de\u011ferler al\u0131yorum)","d27a0c8c":"train_df.info()","cb61ab4b":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature(\u00f6zellik al)\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)(kategorik de\u011fi\u015fken say\u0131s\u0131n\u0131 say)\n    varValue = var.value_counts()\n    \n    # visualize(g\u00f6rsele\u015ftirmek)\n    plt.figure(figsize = (9,3))\n    # I'm adjusting the size of the figure\n    # \u015eekilin boyutunu ayarl\u0131yorum\n    \n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","6b0b3429":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","66251520":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","bc4a6a84":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","b763f0f0":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","33b528a8":"# Plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","ea26f912":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","def57f91":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","1416aace":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","84c66f89":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","3af27c66":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","bda08da3":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","ba343ac9":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","55303c34":"train_df.columns[train_df.isnull().any()]","f3658bc6":"train_df.isnull().sum()","3d5dc4cb":"train_df[train_df[\"Embarked\"].isnull()]","1335d957":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","09dddf69":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","b73aba18":"train_df[train_df[\"Fare\"].isnull()]","9c98b631":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))\n","fd37cdce":"train_df[train_df[\"Fare\"].isnull()]","ade6e525":"* float64(2): Fare ve Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex\n\n","407600fe":"<a id = \"3\" ><\/a><br>\n# Univariate Variable Analysis (Tek De\u011fi\u015fkenli De\u011fi\u015fken Analizi)\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and passengerId","bd54a5ba":"<a id = \"2\" ><\/a><br>\n# Variable Description (De\u011fi\u015fken A\u00e7\u0131klama)\n1. PassengerId : unique id number to each passenger (her yolcu i\u00e7in benzersiz kimlik numaras\u0131)\n1. Survived : passenger survive(1) or died(0) (yolcu hayatta kal\u0131r (1) veya \u00f6ld\u00fc (0))\n1. Pclass : passenger class (yolcu s\u0131n\u0131f\u0131)\n1. Name : name(isim)\n1. Sex : gender of passenger(yolcunun cinsiyeti)\n1. Age : age of passenger(yolcunun ya\u015f\u0131)\n1. SibSp :  number of siblings\/spouses (karde\u015f \/ e\u015f say\u0131s\u0131)\n1. Parch : number of parents\/children(ebeveyn \/ \u00e7ocuk say\u0131s\u0131)\n1. Ticket :  ticket number(bilet numaras\u0131)\n1. Fare : amount of money spent on ticket (bilete harcanan para miktar\u0131)\n1. Cabin :  cabin category(kabin kategorisi)\n1. Embarked : port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)(yolcunun bindi\u011fi liman (C = Cherbourg, Q = Queenstown, S = Southampton))\n\n","5422d7af":"<a id = \"8\" ><\/a><br>\n# Missing Value, (eksik de\u011fer)\n   * Find Missing Value\n   * Fill Missing Value","cff59840":"<a id = \"4\" ><\/a><br>\n## Categorical Variable (Kategorik de\u011fi\u015fken)","5eb23928":"<a id = \"6\" ><\/a><br>\n# Basic Data Analysis,(Temel Veri Analizi)\n * Pclass - Survived\n * Sex - Survived\n * SibSp - Survived\n * Parch - Survived","f54c5fbe":"<a id = \"7\" ><\/a><br>\n# Outlier Detection,(Ayk\u0131r\u0131 De\u011fer Tespiti)","96a2bddc":"<a id = \"9\" ><\/a><br>\n## Find Missing Value(Eksik de\u011feri bulun)","de8055ab":"<a id = \"10\" ><\/a><br>\n## Fill Missing Value(Eksik de\u011feri doldur)\n","546b907b":"# Introduction\ngiri\u015f\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n-Titanik'in bat\u0131\u015f\u0131, tarihin en k\u00f6t\u00fc \u015f\u00f6hretli gemi enkazlar\u0131ndan biridir. 1912'de, yolculu\u011fu s\u0131ras\u0131nda Titanik bir buzda\u011f\u0131na \u00e7arparak batt\u0131 ve 2224 yolcu ve m\u00fcrettebattan 1502'sini \u00f6ld\u00fcrd\u00fc. \n\n<font color =\"blue\">\nContent:\n    \n1. [Load and Check Data,(Verileri y\u00fckleyin ve kontrol edin)](#1)\n\n1. [Variable Description, (De\u011fi\u015fken A\u00e7\u0131klama)](#2)\n    \n    * [Univariate Variable Analysis,(Tek De\u011fi\u015fkenli De\u011fi\u015fken Analizi)](#3)\n        \n        * [Categorical Variable,(Kategorik de\u011fi\u015fken)](#4)\n    \n        * [Numerical Variable,(Say\u0131sal De\u011fi\u015fken )](#5)\n1. [Basic Data Analysis,(Temel Veri Analizi)](#6)\n1. [Outlier Detection,(Ayk\u0131r\u0131 De\u011fer Tespiti)](#7)\n1. [Missing Value, (eksik de\u011fer)](#8)\n  * [Find Missing Value](#9)\n  * [Fill Missing Value](#10)\n    ","d165dea8":"<a id = \"1\" ><\/a><br>\n# Load and Check Data (Verileri y\u00fckleyin ve kontrol edin)","b5c8c082":"<a id = \"5\" ><\/a><br>\n## Numerical Variable (Say\u0131sal De\u011fi\u015fken)"}}