{"cell_type":{"3b9107bb":"code","fc371b1f":"code","6289e57e":"code","e1f3db6b":"code","9029ee1e":"code","5e4427f3":"code","ba7d4d1c":"code","76344b6f":"code","9a41c154":"code","8568d0d7":"code","f70fbb79":"code","6feda81e":"code","c3fa962b":"code","bae6c8fc":"code","4a63e753":"code","9dbe8d8f":"code","feb07325":"code","c7d22e28":"code","3d54f0ca":"code","65b6fa0b":"code","94637ccf":"code","a2c519ac":"code","39daa623":"code","efaddeaf":"code","c47b556f":"code","f2a27400":"code","f2db553a":"code","b500812a":"code","78309b2f":"code","66d9056b":"code","18afd6bc":"code","4dbbfa96":"code","66f48651":"code","b6747b4b":"code","2427db7f":"code","f41e97f8":"code","028b2d7c":"code","80096434":"code","23683a7c":"code","89f5a9a5":"code","de740f6e":"code","fffc7b86":"code","4102b44a":"code","903ef241":"code","914ded41":"code","143549ab":"markdown","e3a60894":"markdown","5b065325":"markdown","59653297":"markdown","0c67ac0c":"markdown","e8d55c02":"markdown","3345e258":"markdown","e7e630e7":"markdown","951659f7":"markdown","77f03ac6":"markdown","631e843e":"markdown","7580d776":"markdown","8968efc5":"markdown","df65828f":"markdown","8a2297cf":"markdown","d9e29dc4":"markdown"},"source":{"3b9107bb":"!pip install gdown","fc371b1f":"import gdown\n\ntrain_url = 'https:\/\/drive.google.com\/uc?id=1-4WfgSQLMIMxl-vrqDjZTMiwb1w3qiJq'\nval_url = 'https:\/\/drive.google.com\/uc?id=1w9CuqPi3DbvbCN9DFGwLPeyYsXJvbjzk'\n#the problem is that the whole file train+val is too big for kaggle!\n#as kaggle gives 4.9gb of stage and the dataset is 2.8 gb\n#since we are using zipped file first.\n#https:\/\/drive.google.com\/open?id=1-4WfgSQLMIMxl-vrqDjZTMiwb1w3qiJq --training\n#https:\/\/drive.google.com\/open?id=1w9CuqPi3DbvbCN9DFGwLPeyYsXJvbjzk --validation\noutput_train = 'dataset_train.zip'\noutput_val = 'dataset_val.zip'\ngdown.download(train_url, output_train, quiet=False)\n#os.remove(file_name)","6289e57e":"import os\ndef create_dir(dir):\n  if not os.path.exists(dir):\n    os.makedirs(dir)\n    print(\"Created Directory : \", dir)\n    return\ncreate_dir(\"\/kaggle\/working\/data_aug\/train\")\n!unzip -q \/kaggle\/working\/dataset_train.zip -d \/kaggle\/working\/data_aug\/train","e1f3db6b":"os.listdir(\"\/kaggle\/working\/\")","9029ee1e":"file_name=\"\/kaggle\/working\/dataset_train.zip\"\nos.remove(file_name)","5e4427f3":"os.listdir(\"\/kaggle\/working\/\")","ba7d4d1c":"gdown.download(val_url, output_val, quiet=False)","76344b6f":"os.listdir(\"\/kaggle\/working\/\")","9a41c154":"create_dir(\"\/kaggle\/working\/data_aug\/val\")\n!unzip -q \/kaggle\/working\/dataset_val.zip -d \/kaggle\/working\/data_aug\/val","8568d0d7":"os.listdir(\"\/kaggle\/working\/data_aug\")\nfile_name=\"\/kaggle\/working\/dataset_val.zip\"\nos.remove(file_name)","f70fbb79":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/working'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6feda81e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport os\nimport glob\nimport h5py\nimport shutil\nimport imgaug as aug\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mimg\nimport imgaug.augmenters as iaa\nfrom os import listdir, makedirs, getcwd, remove\nfrom os.path import isfile, join, abspath, exists, isdir, expanduser\nfrom PIL import Image\nfrom pathlib import Path\nfrom skimage.io import imread\nfrom skimage.transform import resize\nfrom keras.models import Sequential, Model\nfrom keras.applications.vgg16 import VGG16, preprocess_input\nfrom keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Input, Flatten, SeparableConv2D\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.merge import Concatenate\nfrom keras.models import Model\nfrom keras.optimizers import Adam, SGD, RMSprop\nfrom keras.callbacks import ModelCheckpoint, Callback, EarlyStopping\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix\nimport cv2\nfrom keras import backend as K\ncolor = sns.color_palette()\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c3fa962b":"import tensorflow as tf\n\n# Set the seed for hash based operations in python\nos.environ['PYTHONHASHSEED'] = '0'\n\n# Set the numpy seed\nnp.random.seed(111)\n\n# Disable multi-threading in tensorflow ops\nsession_conf = tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\n\n# Set the random seed in tensorflow at graph level\ntf.set_random_seed(111)\n\n# Define a tensorflow session with above session configs\nsess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\n\n# Set the session in keras\nK.set_session(sess)\n\n# Make the augmentation sequence deterministic\naug.seed(111)","bae6c8fc":"# Define path to the data directory\n#data_dir = Path('..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray')\ndata_dir=\"abc\"\n# Path to train directory (Fancy pathlib...no more os.path!!)\n#train_dir = data_dir \/ 'train'\ntrain_dir=\"\/kaggle\/working\/data_aug\/train\/content\/data\/content\/FINAL_AUG_DATA\/Train\/\"\n# Path to validation directory\n#val_dir = data_dir \/ 'val'\nval_dir =\"\/kaggle\/working\/data_aug\/val\/content\/data\/content\/FINAL_AUG_DATA\/Val\/\"\n# Path to test directory\n#test_dir = data_dir \/ 'test'\ntest_dir = \"\/kaggle\/working\/data_aug\/val\/content\/data\/content\/FINAL_AUG_DATA\/Val\/\"","4a63e753":"# Get the path to the normal and pneumonia sub-directories\nfrom os.path import join\nnormal_cases_dir =join(train_dir,'NORMAL')\ncovid_cases_dir=join(train_dir,'COVID-19')\npneumonia_cases_dir = join(train_dir,'Viral Pneumonia')\n\nprint(normal_cases_dir)\n# Get the list of all the images\n\"\"\"\nnormal_cases = normal_cases_dir.glob('*')\npneumonia_cases = pneumonia_cases_dir.glob('*')\ncovid_cases = covid_cases_dir.glob('*')\n\"\"\"\nnormal_cases = glob.glob(str(normal_cases_dir)+\"\/*\")\npneumonia_cases = glob.glob(str(pneumonia_cases_dir)+\"\/*\")\ncovid_cases = glob.glob(str(covid_cases_dir)+\"\/*\")\n\n# An empty list. We will insert the data into this list in (img_path, label) format\ntrain_data = []\n\n# Go through all the normal cases. The label for these cases will be 0\nfor img in normal_cases:\n    train_data.append((img,0))\n\n# Go through all the pneumonia cases. The label for these cases will be 1\nfor img in pneumonia_cases:\n    train_data.append((img, 1))\n    \n# Go through all the coronavirus cases. The label for these cases will be 2\nfor img in covid_cases:\n    train_data.append((img, 2))\n    \n\n# Get a pandas dataframe from the data we have in our list \ntrain_data = pd.DataFrame(train_data, columns=['image', 'label'],index=None)\n\n# Shuffle the data \ntrain_data = train_data.sample(frac=1.).reset_index(drop=True)\n\n# How the dataframe looks like?\ntrain_data.head()","9dbe8d8f":"train_data.shape","feb07325":"9000*0.8","c7d22e28":"# Get the counts for each class\ncases_count = train_data['label'].value_counts()\nprint(cases_count)\n\n# Plot the results \nplt.figure(figsize=(10,8))\nsns.barplot(x=cases_count.index, y= cases_count.values)\nplt.title('Number of cases', fontsize=14)\nplt.xlabel('Case type', fontsize=12)\nplt.ylabel('Count', fontsize=12)\nplt.xticks(range(len(cases_count.index)), ['Normal(0)', 'Pneumonia(1)','Covid(2)'])\nplt.show()","3d54f0ca":"# Get few samples for both the classes\npneumonia_samples = (train_data[train_data['label']==1]['image'].iloc[:5]).tolist()\nnormal_samples = (train_data[train_data['label']==0]['image'].iloc[:5]).tolist()\ncovid_samples = (train_data[train_data['label']==2]['image'].iloc[:5]).tolist()\n# Concat the data in a single list and del the above two list\nsamples = pneumonia_samples + normal_samples+covid_samples\ndel pneumonia_samples, normal_samples,covid_samples\n\n# Plot the data \nf, ax = plt.subplots(3,5, figsize=(30,15))\nfor i in range(15):\n    img = imread(samples[i])\n    ax[i\/\/5, i%5].imshow(img, cmap='gray')\n    if i<5:\n        ax[i\/\/5, i%5].set_title(\"Pneumonia\")\n    elif i<10:\n        ax[i\/\/5, i%5].set_title(\"Normal\")\n    else:\n        ax[i\/\/5, i%5].set_title(\"COVID-19\")\n    \n    ax[i\/\/5, i%5].axis('off')\n    ax[i\/\/5, i%5].set_aspect('auto')\nplt.show()","65b6fa0b":"# Get the path to the sub-directories\nnormal_cases_dir = join(val_dir,'NORMAL')\npneumonia_cases_dir =join(val_dir,'Viral Pneumonia')\ncovid_cases_dir=join(val_dir,'COVID-19')\n\n# Get the list of all the images\n#normal_cases = normal_cases_dir.glob('*.jpeg')\n#pneumonia_cases = pneumonia_cases_dir.glob('*.jpeg')\n\n\n\nnormal_cases = glob.glob(str(normal_cases_dir)+\"\/*\")\npneumonia_cases = glob.glob(str(pneumonia_cases_dir)+\"\/*\")\ncovid_cases = glob.glob(str(covid_cases_dir)+\"\/*\")\n\n\n\n\n# List that are going to contain validation images data and the corresponding labels\nvalid_data = []\nvalid_labels = []\n\n\n# Some images are in grayscale while majority of them contains 3 channels. So, if the image is grayscale, we will convert into a image with 3 channels.\n# We will normalize the pixel values and resizing all the images to 224x224 \n\n# Normal cases\nfor img in normal_cases:\n    img = cv2.imread(str(img))\n    try:\n        img = cv2.resize(img, (224,224),interpolation = cv2.INTER_AREA)\n    except:\n        raise ERR\n        continue\n    if img.shape[2] ==1:\n        img = np.dstack([img, img, img])\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    label = to_categorical(0, num_classes=3)\n    valid_data.append(img)\n    valid_labels.append(label)\n                      \n# Pneumonia cases        \nfor img in pneumonia_cases:\n    img = cv2.imread(str(img))\n    try:\n        img = cv2.resize(img, (224,224),interpolation = cv2.INTER_AREA)\n    except:\n        raise ERR\n        continue\n    if img.shape[2] ==1:\n        img = np.dstack([img, img, img])\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    label = to_categorical(1, num_classes=3)\n    valid_data.append(img)\n    valid_labels.append(label)\n    \n    \n# Coronavirus cases        \nfor img in covid_cases:\n    img = cv2.imread(str(img))\n    try:\n        img = cv2.resize(img, (224,224),interpolation = cv2.INTER_AREA)\n    except:\n        raise ERR\n        continue\n    if img.shape[2] ==1:\n        img = np.dstack([img, img, img])\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    label = to_categorical(2, num_classes=3)\n    valid_data.append(img)\n    valid_labels.append(label)\n# Convert the list into numpy arrays\nvalid_data = np.array(valid_data)\nvalid_labels = np.array(valid_labels)\n\nprint(\"Total number of validation examples: \", valid_data.shape)\nprint(\"Total number of labels:\", valid_labels.shape)","94637ccf":"9000*0.2","a2c519ac":"# Augmentation sequence \nseq = iaa.OneOf([\n    #iaa.Fliplr(), # horizontal flips\n    #iaa.Affine(rotate=20), # roatation\n    iaa.Multiply((1.2, 1.5))]) #random brightness","39daa623":"def data_gen(data, batch_size):\n    # Get total number of samples in the data\n    n = len(data)\n    steps = n\/\/batch_size\n    \n    # Define two numpy arrays for containing batch data and labels\n    batch_data = np.zeros((batch_size, 224, 224, 3), dtype=np.float32)\n    batch_labels = np.zeros((batch_size,3), dtype=np.float32)\n\n    # Get a numpy array of all the indices of the input data\n    indices = np.arange(n)\n    \n    # Initialize a counter\n    i =0\n    while True:\n        np.random.shuffle(indices)\n        # Get the next batch \n        count = 0\n        next_batch = indices[(i*batch_size):(i+1)*batch_size]\n        for j, idx in enumerate(next_batch):\n            img_name = data.iloc[idx]['image']\n            label = data.iloc[idx]['label']\n            \n            # one hot encoding\n            encoded_label = to_categorical(label, num_classes=3)\n            # read the image and resize\n            img = cv2.imread(str(img_name))\n            img = cv2.resize(img, (224,224))\n            \n            # check if it's grayscale\n            #if img.shape[2]==1:\n            #    img = np.dstack([img, img, img])\n            \n            # cv2 reads in BGR mode by default\n            orig_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n            # normalize the image pixels\n            orig_img = img.astype(np.float32)\/255.\n            \n            batch_data[count] = orig_img\n            batch_labels[count] = encoded_label\n            \n            # generating more samples of the undersampled class\n            if label==0 and count < batch_size-2:\n            #    aug_img1 = seq.augment_image(img)\n            #    aug_img2 = seq.augment_image(img)\n            #    aug_img1 = cv2.cvtColor(aug_img1, cv2.COLOR_BGR2RGB)\n            #    aug_img2 = cv2.cvtColor(aug_img2, cv2.COLOR_BGR2RGB)\n            #    aug_img1 = aug_img1.astype(np.float32)\/255.\n            #    aug_img2 = aug_img2.astype(np.float32)\/255.\n\n            #    batch_data[count+1] = aug_img1\n            #    batch_labels[count+1] = encoded_label\n            #    batch_data[count+2] = aug_img2\n            #    batch_labels[count+2] = encoded_label\n                count +=2\n            \n            else:\n                count+=1\n            \n            if count==batch_size-1:\n                break\n            \n        i+=1\n        yield batch_data, batch_labels\n            \n        if i>=steps:\n            i=0","efaddeaf":"def build_model2():\n    input_img = Input(shape=(224,224,3), name='ImageInput')\n    x = Conv2D(32, (3,3), activation='relu', padding='same', name='Conv0_1')(input_img)\n    x = Conv2D(32, (3,3), activation='relu', padding='same', name='Conv0_2')(x)\n    x = MaxPooling2D((2,2), name='pool0')(x)\n    \n    x = SeparableConv2D(64, (3,3), activation='relu', padding='same', name='Conv1_1')(x)\n    x = SeparableConv2D(64, (3,3), activation='relu', padding='same', name='Conv1_2')(x)\n    x = MaxPooling2D((2,2), name='pool1')(x)\n    \n    x = SeparableConv2D(128, (3,3), activation='relu', padding='same', name='Conv2_1')(x)\n    x = SeparableConv2D(128, (3,3), activation='relu', padding='same', name='Conv2_2')(x)\n    x = MaxPooling2D((2,2), name='pool2')(x)\n    \n    x = SeparableConv2D(256, (3,3), activation='relu', padding='same', name='Conv3_1')(x)\n    x = BatchNormalization(name='bn1')(x)\n    x = SeparableConv2D(256, (3,3), activation='relu', padding='same', name='Conv3_2')(x)\n    x = BatchNormalization(name='bn2')(x)\n    x = SeparableConv2D(256, (3,3), activation='relu', padding='same', name='Conv3_3')(x)\n    x = MaxPooling2D((2,2), name='pool3')(x)\n    \n    x = SeparableConv2D(512, (3,3), activation='relu', padding='same', name='Conv4_1')(x)\n    x = BatchNormalization(name='bn3')(x)\n    x = SeparableConv2D(512, (3,3), activation='relu', padding='same', name='Conv4_2')(x)\n    x = BatchNormalization(name='bn4')(x)\n    x = SeparableConv2D(512, (3,3), activation='relu', padding='same', name='Conv4_3')(x)\n    x = MaxPooling2D((2,2), name='pool4')(x)\n    \n    x = Flatten(name='flatten')(x)\n    x = Dense(1024, activation='relu', name='fc1')(x)\n    x = Dropout(0.7, name='dropout1')(x)\n    x = Dense(512, activation='relu', name='fc2')(x)\n    x = Dropout(0.5, name='dropout2')(x)\n    x = Dense(3, activation='softmax', name='fc3')(x)\n    \n    model = Model(inputs=input_img, outputs=x)\n    return model","c47b556f":"def build_model():\n    input_img = Input(shape=(224,224,3), name='ImageInput')\n    x = Conv2D(64, (3,3), activation='relu', padding='same', name='Conv1_1')(input_img)\n    x = Conv2D(64, (3,3), activation='relu', padding='same', name='Conv1_2')(x)\n    x = MaxPooling2D((2,2), name='pool1')(x)\n    \n    x = SeparableConv2D(128, (3,3), activation='relu', padding='same', name='Conv2_1')(x)\n    x = SeparableConv2D(128, (3,3), activation='relu', padding='same', name='Conv2_2')(x)\n    x = MaxPooling2D((2,2), name='pool2')(x)\n    \n    x = SeparableConv2D(256, (3,3), activation='relu', padding='same', name='Conv3_1')(x)\n    x = BatchNormalization(name='bn1')(x)\n    x = SeparableConv2D(256, (3,3), activation='relu', padding='same', name='Conv3_2')(x)\n    x = BatchNormalization(name='bn2')(x)\n    x = SeparableConv2D(256, (3,3), activation='relu', padding='same', name='Conv3_3')(x)\n    x = MaxPooling2D((2,2), name='pool3')(x)\n    \n    x = SeparableConv2D(512, (3,3), activation='relu', padding='same', name='Conv4_1')(x)\n    x = BatchNormalization(name='bn3')(x)\n    x = SeparableConv2D(512, (3,3), activation='relu', padding='same', name='Conv4_2')(x)\n    x = BatchNormalization(name='bn4')(x)\n    x = SeparableConv2D(512, (3,3), activation='relu', padding='same', name='Conv4_3')(x)\n    x = MaxPooling2D((2,2), name='pool4')(x)\n    \n    x = Flatten(name='flatten')(x)\n    x = Dense(1024, activation='relu', name='fc1')(x)\n    x = Dropout(0.7, name='dropout1')(x)\n    x = Dense(512, activation='relu', name='fc2')(x)\n    x = Dropout(0.5, name='dropout2')(x)\n    x = Dense(3, activation='softmax', name='fc3')(x)\n    \n    model = Model(inputs=input_img, outputs=x)\n    return model","f2a27400":"model =  build_model()\nmodel.summary()","f2db553a":"# Open the VGG16 weight file\nf = h5py.File('..\/input\/vgg16\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5', 'r')\n\n# Select the layers for which you want to set weight.\n\nw,b = f['block1_conv1']['block1_conv1_W_1:0'], f['block1_conv1']['block1_conv1_b_1:0']\nmodel.layers[1].set_weights = [w,b]\n\nw,b = f['block1_conv2']['block1_conv2_W_1:0'], f['block1_conv2']['block1_conv2_b_1:0']\nmodel.layers[2].set_weights = [w,b]\n\nw,b = f['block2_conv1']['block2_conv1_W_1:0'], f['block2_conv1']['block2_conv1_b_1:0']\nmodel.layers[4].set_weights = [w,b]\n\nw,b = f['block2_conv2']['block2_conv2_W_1:0'], f['block2_conv2']['block2_conv2_b_1:0']\nmodel.layers[5].set_weights = [w,b]\n\nf.close()\nmodel.summary()    ","b500812a":"# opt = RMSprop(lr=0.0001, decay=1e-6)\n#change the optimizer Adam to SGD with lr = .1\n#labels converted to categorical?\nopt = Adam(lr=0.0001, decay=1e-5)\n#from keras_adabound import AdaBound\n#loss=tf.keras.losses.CategoricalCrossentropy()\n\n#model.compile(optimizer=AdaBound(lr=1e-3, final_lr=0.1), loss=model_loss)\n#opt = Adam(lr=0.1, decay=1e-2)\nes = EarlyStopping(patience=5)\nchkpt = ModelCheckpoint(filepath='best_model_todate', save_best_only=True, save_weights_only=True)\n#model.compile(loss='binary_crossentropy', metrics=['accuracy'],optimizer=opt)\nmodel.compile(loss='categorical_crossentropy', metrics=['accuracy'],optimizer=opt)\n#metrics=['accuracy', 'categorical_accuracy', 'precision', 'recall']","78309b2f":"batch_size = 16\nnb_epochs = 25\n\n# Get a train data generator\ntrain_data_gen = data_gen(data=train_data, batch_size=batch_size)\n\n# Define the number of training steps\nnb_train_steps = train_data.shape[0]\/\/batch_size\n\nprint(\"Number of training and validation steps: {} and {}\".format(nb_train_steps, len(valid_data)))","66d9056b":"# # Fit the model\n#history = model.fit_generator(train_data_gen, epochs=nb_epochs, steps_per_epoch=nb_train_steps,\n                              # validation_data=(valid_data, valid_labels),callbacks=[es, chkpt])\n#class_weight={0:1.0, 1:0.4}","18afd6bc":"#model.save(\"mymodel.h5\")","4dbbfa96":"from IPython.display import FileLink\n#FileLink(r'best_model_todate')","66f48651":"# os.path.getsize(\"best_model_todate\")\/(1024*1024) #megabytes","b6747b4b":"os.listdir(\"\/kaggle\/working\")","2427db7f":"# Load the model weights\nmodel.load_weights(\"\/kaggle\/input\/beating-everything-with-depthwise-convolution\/mymodel.h5\")\nmodel.summary()","f41e97f8":"#https:\/\/drive.google.com\/open?id=1W7c0J6At63QzsvXeDrWdlhxW-INrGkFZ\n\nimport gdown\n\nurl = 'https:\/\/drive.google.com\/uc?id=1W7c0J6At63QzsvXeDrWdlhxW-INrGkFZ'\n\noutput = 'best_model.hdf5'\n\ngdown.download(url, output, quiet=False)","028b2d7c":"# Load the model weights\nmodel.load_weights(\"\/kaggle\/working\/best_model.hdf5\")\nmodel.summary()","80096434":"os.listdir(\"\/kaggle\/input\/\")","23683a7c":"# Preparing test data\n# Get the path to the sub-directories\nnormal_cases_dir = join(val_dir,'NORMAL')\npneumonia_cases_dir =join(val_dir,'Viral Pneumonia')\ncovid_cases_dir=join(val_dir,'COVID-19')\n\n# Get the list of all the images\n#normal_cases = normal_cases_dir.glob('*.jpeg')\n#pneumonia_cases = pneumonia_cases_dir.glob('*.jpeg')\n\n\n\nnormal_cases = glob.glob(str(normal_cases_dir)+\"\/*\")\npneumonia_cases = glob.glob(str(pneumonia_cases_dir)+\"\/*\")\ncovid_cases = glob.glob(str(covid_cases_dir)+\"\/*\")\n\n\n\n\"\"\"\n\nnormal_cases_dir = join(test_dir ,'NORMAL')\npneumonia_cases_dir = join(test_dir ,'Viral Pneumonia')\n\nnormal_cases = normal_cases_dir.glob('*.jpeg')\npneumonia_cases = pneumonia_cases_dir.glob('*.jpeg')\n\"\"\"\ntest_data = []\ntest_labels = []\n\nfor img in normal_cases:\n    img = cv2.imread(str(img))\n    img = cv2.resize(img, (224,224))\n    if img.shape[2] ==1:\n        img = np.dstack([img, img, img])\n    else:\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    label = to_categorical(0, num_classes=3)\n    test_data.append(img)\n    test_labels.append(label)\n                      \nfor img in pneumonia_cases:\n    img = cv2.imread(str(img))\n    img = cv2.resize(img, (224,224))\n    if img.shape[2] ==1:\n        img = np.dstack([img, img, img])\n    else:\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    label = to_categorical(1, num_classes=3)\n    test_data.append(img)\n    test_labels.append(label)\n    \nfor img in covid_cases:\n    img = cv2.imread(str(img))\n    img = cv2.resize(img, (224,224))\n    if img.shape[2] ==1:\n        img = np.dstack([img, img, img])\n    else:\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    label = to_categorical(2, num_classes=3)\n    test_data.append(img)\n    test_labels.append(label)\n    \n\ntest_data = np.array(test_data)\ntest_labels = np.array(test_labels)\n\nprint(\"Total number of test examples: \", test_data.shape)\nprint(\"Total number of labels:\", test_labels.shape)","89f5a9a5":"# Evaluation on test dataset\ntest_loss, test_score = model.evaluate(test_data, test_labels, batch_size=16)\nprint(\"Loss on test set: \", test_loss)\nprint(\"Accuracy on test set: \", test_score)","de740f6e":"# Get predictions\npreds = model.predict(test_data, batch_size=16)\npreds = np.argmax(preds, axis=-1)\n\n# Original labels\norig_test_labels = np.argmax(test_labels, axis=-1)\n\nprint(orig_test_labels.shape)\nprint(preds.shape)","fffc7b86":"# Get the confusion matrix\ncm  = confusion_matrix(orig_test_labels, preds)\nplt.figure()\nplot_confusion_matrix(cm,figsize=(12,8), hide_ticks=True, alpha=0.7,cmap=plt.cm.Blues)\nplt.xticks(range(3), ['Normal', 'Pneumonia','Covid'], fontsize=16)\nplt.yticks(range(3), ['Normal', 'Pneumonia','Covid'], fontsize=16)\nplt.show()","4102b44a":"cm.ravel()","903ef241":"# Calculate Precision and Recall\ntn, fp, fn, tp = cm.ravel()\n\nprecision = tp\/(tp+fp)\nrecall = tp\/(tp+fn)\n\nprint(\"Recall of the model is {:.2f}\".format(recall))\nprint(\"Precision of the model is {:.2f}\".format(precision))","914ded41":"#Grad cam! remaining","143549ab":"We will first go through the training dataset. We will do some analysis on that, look at some of the samples, check the number of samples for each class, etc.  Lets' do it.\n\nEach of the above directory contains two sub-directories:\n* `NORMAL`: These are the samples that describe the normal (no pneumonia) case.\n* `VIRAL PNEUMONIA`: This directory contains those samples that are the pneumonia cases.\n* `COVID-19`: This directory contains those samples that are the coronavirus cases.","e3a60894":"The dataset is divided into three sets: 1) train set    2) validation set    and 3) test set.  Let's grab the dataset   ","5b065325":"We will initialize the weights of first two convolutions with imagenet weights,","59653297":"## Augmentation\nData augmentation is a powerful technique which helps in almost every case for improving the robustness of a model. But augmentation can be much more helpful where the dataset is imbalanced. You can generate different samples of undersampled class in order to try to balance the overall distribution. \n\nI like [imgaug](https:\/\/imgaug.readthedocs.io\/en\/latest\/) a lot. It comes with a very clean api and you can do hell of augmentations with it. It's worth exploring!!\nIn the next code block, I will define a augmentation sequence. You will notice `Oneof` and it does exactly that. At each iteration, it will take one augmentation technique out of the three and will apply that on the samples ","0c67ac0c":"### How many samples for each class are there in the dataset?","e8d55c02":"![training](https:\/\/i.imgur.com\/vVZgEKV.png)","3345e258":"### Preparing validation data\nWe will be defining a generator for the training dataset later in the notebook but as the validation data is small, so I can read the images and can load the data without the need of a generator.  This is exactly what the code block given below is doing.","e7e630e7":"Nice!!! So, our model has a 98% recall. In such problems, a good recall value is expected. But if you notice, the precision is only 80%. This is one thing to notice. Precision and Recall follows a trade-off, and you need to find a point where your recall, as well as your precision, is more than good but both can't increase simultaneously. \n\nThat's it folks!! I hope you enjoyed this kernel. Happy Kaggling!!","951659f7":"Hello everyone!! Hope everything is fine and you are enjoying things on Kaggle as usual. The rage for competing on Kaggle should never end. \nMachine Learning and Deep Learning have a huge scope in healthcare but applying them in healthcare isn't that simple. The stake is very high. It's more than just a `classification` problem. But if applied very carefully, it can benefit the world in enormous ways. **And as a Machine learning engineer, it's our responsibility to help people as much as we can in all possible ways.**\n\nPneumonia is a very common disease. It can be either: 1) Bacterial pneumonia  2) Viral Pneumonia  3) Mycoplasma pneumonia   and 4) Fungal pneumonia.\nThis dataset consists pneumonia samples belonging to the first two classes.  The dataset consists of only very few samples and that too unbalanced. The aim of this kernel is to develop a robust deep learning model from scratch on this limited amount of data. We all know that deep learning models are data hungry but if you know how things work, you can build good models even with a limited amount of data. ","77f03ac6":"If you look carefully, then there are some cases where you won't be able to differentiate between a normal case and a pneumonia case with the naked eye. There is one case in the above plot, at least for me ,which is too much confusing. If we can build a robust classifier, it would be a great assist to the doctor too.","631e843e":"As you can see the data is highly imbalanced. We have almost with thrice pneumonia cases here as compared to the normal cases. This situation is very normal when it comes to medical data. The data will always be imbalanced. either there will be too many normal cases or there will be too many cases with the disease. \n\nLet's look at how a normal case is different from that of a pneumonia case. We will look at somes samples from our training data itself.","7580d776":"When a particular problem includes an imbalanced dataset, then accuracy isn't a good  metric to look for. For example, if your dataset contains 95 negatives and 5 positives, having a model with 95% accuracy doesn't make sense at all. The classifier might label every example as negative and still achieve 95% accuracy. Hence,  we need to look for alternative metrics. **Precision** and **Recall** are really good metrics for such kind of problems. \n\nWe will get the confusion matrix from our predictions and see what is the recall and precision of our model.","8968efc5":"### Training data generator \nHere I will define a very simple data generator. You can do more than this if you want but I think at this point, this is more than enough I need.","df65828f":"I have commented out the training step as of now as it will train the network again while rendering the notebook and I would have to wait for an hour or so which I don't want to. I have uploaded the weights of the best model I achieved so far. Feel free to use it for further fine-tuning of the network. We will load those weights and will run the inference on the test set using those weights only. But...but for your reference, I will attach the screenshot of the training steps here.","8a2297cf":"Reproducibility is a great concern when doing deep learning. There was a good discussion on `KaggleNoobs` slack regarding this. We will set a numer of things in order to make sure that the results are almost reproducible(if not fully). ","d9e29dc4":"## Model \n\nThis is the best part. If you look at other kernels on this dataset, everyone is busy doing transfer learning and fine-tuning. **You should transfer learn but wisely**.  We will be doing partial transfer learning and rest of the model will be trained from scratch. I will explain this in detail but before that, I would love to share one of the best practices when it comes to building deep learning models from scratch on limited data.\n\n1. Choose a simple architecture.\n2. Initialize the first few layers from a network that is pretrained on imagenet. This is because first few layers capture general details like color blobs, patches, edges, etc. Instead of randomly initialized weights for these layers, it would be much better if you fine tune them.\n3. Choose layers that introduce a lesser number of parameters. For example, `Depthwise SeparableConv` is a good replacement for `Conv` layer. It introduces lesser number of parameters as compared to normal convolution and as different filters are applied to each channel, it captures more information.  `Xception` a powerful network, is built on top of such layers only. You can read about `Xception` and `Depthwise Separable Convolutions` in [this](https:\/\/arxiv.org\/abs\/1610.02357) paper.\n4. Use batch norm with convolutions.  As the network becomes deeper, batch norm start to play an important role.\n5. Add dense layers with reasonable amount of neurons. Train with a higher learning rate and experiment with the number of neurons in the dense layers. Do it for the depth of your network too. \n6. Once you know a good depth, start training your network with a lower learning rate along with decay.  \n\nThis is all that I have done in the next code block.\n"}}