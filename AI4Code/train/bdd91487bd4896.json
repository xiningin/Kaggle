{"cell_type":{"41bbf08d":"code","e4f1eb86":"code","23259135":"code","67ed1c33":"code","46238809":"code","df342ea3":"code","06aee8d0":"code","69856d59":"code","8badfa07":"code","a1bc50ea":"code","d49d10d6":"code","d51565b6":"code","145e7d7e":"code","5f73881d":"code","46730b6f":"code","968b3c26":"code","7de412b2":"code","7d3b000f":"code","bf628d08":"code","d885841b":"code","a22bfb9d":"code","94a8b967":"code","145d0eb2":"code","2902320b":"code","bad33e4f":"code","f80e1868":"code","c22bdd0b":"code","8c6795d2":"code","321f946b":"code","bb420a86":"code","91090675":"code","98ff3d43":"code","c236e766":"code","3a2454ea":"code","7ea109c6":"code","e9a11327":"code","2e4b3cc6":"code","94417485":"code","03fdffe2":"code","f3b9cea1":"code","506f7a2d":"code","9375445b":"code","2ec91adb":"code","19c855c6":"code","e6b1ea41":"code","bcab26f0":"code","eeb15c14":"code","90e36a36":"code","8e6bc9a0":"code","964e173f":"code","d799bf32":"code","bc86c57a":"code","d00fdf47":"code","ce279a96":"markdown","d73c565d":"markdown","516577a1":"markdown","6d7d108a":"markdown","c0957639":"markdown","4c9771d8":"markdown","52f0b034":"markdown","333f6259":"markdown","f11b30ff":"markdown","328ec312":"markdown","7d22deee":"markdown","07a90494":"markdown","16b462fb":"markdown","952f00bf":"markdown","3f4ef4a9":"markdown","adb089b4":"markdown","67e88864":"markdown","c56cde24":"markdown","b4ce899d":"markdown","0d4ee99a":"markdown"},"source":{"41bbf08d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4f1eb86":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\n","23259135":"\ntrain_data.head()","67ed1c33":"train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()","46238809":"train_data[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()","df342ea3":"train_data[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean()","06aee8d0":"train_data[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean()","69856d59":"train_data[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean()","8badfa07":"import seaborn as sns\nsns.set()\nsns.barplot(x='Pclass', y='Survived', data=train_data)","a1bc50ea":"sns.barplot(x='Sex', y='Survived', data=train_data)","d49d10d6":"train_test_data=pd.concat([train_data, test_data], sort=True).reset_index(drop=True)","d51565b6":"train_test_data['Title'] = train_test_data.Name.str.extract('([A-Za-z]+)\\.')\npd.crosstab(train_test_data['Title'], train_test_data['Sex'])","145e7d7e":"train_test_data[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","5f73881d":"train_test_data['Title'] = train_test_data['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')","46730b6f":"train_test_data['Title'] = train_test_data['Title'].replace('Mlle', 'Miss')\ntrain_test_data['Title'] = train_test_data['Title'].replace('Ms', 'Miss')\ntrain_test_data['Title'] = train_test_data['Title'].replace('Mme', 'Mrs')","968b3c26":"train_test_data['Title'] = train_test_data['Title'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4}).astype(int)","7de412b2":"train_test_data.head()","7d3b000f":"train_test_data['Sex'] = train_test_data['Sex'].map({'female': 1, 'male': 0}).astype(int)","bf628d08":"train_test_data.head()","d885841b":"train_test_data.isnull().sum()","a22bfb9d":"train_test_data.Embarked.describe()","94a8b967":"train_test_data.Embarked.fillna('S', inplace = True)","145d0eb2":"train_test_data['Embarked'] = train_test_data['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})","2902320b":"train_test_data['Cabin'].value_counts()","bad33e4f":"train_test_data['Cabin_NA'] = train_test_data['Cabin'].isnull().astype('int')\ntrain_test_data['Cabin_NA']","f80e1868":"train_test_data.head()","c22bdd0b":"train_test_data.Age.fillna(train_test_data.Age.mean(), inplace = True)\ntrain_test_data.Age.astype(int)","8c6795d2":"train_test_data.Fare.fillna(train_test_data.Fare.mean(), inplace = True)\n\ntrain_test_data.isnull().sum()","321f946b":"train_test_data['AgeBand'] = pd.qcut(train_test_data['Age'], 7)\nprint (train_test_data[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean())","bb420a86":"train_test_data.loc[train_test_data['Age'] <= 18, 'Age_Band'] = 0\ntrain_test_data.loc[(train_test_data['Age'] > 18) & (train_test_data['Age'] <= 22), 'Age_Band'] = 1\ntrain_test_data.loc[(train_test_data['Age'] > 22) & (train_test_data['Age'] <= 25), 'Age_Band'] = 2\ntrain_test_data.loc[(train_test_data['Age'] > 25) & (train_test_data['Age'] <= 43), 'Age_Band'] = 3\ntrain_test_data.loc[train_test_data['Age'] > 43, 'Age_Band'] = 4","91090675":"train_test_data['Age_Band'] = train_test_data['Age_Band'].astype(int)","98ff3d43":"train_test_data.head()","c236e766":"train_test_data['FareBand'] = pd.qcut(train_test_data['Fare'], 8)\nprint (train_test_data[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean())","3a2454ea":"train_test_data.loc[train_test_data['Fare'] <= 9.844, 'Fare_Band'] = 0\ntrain_test_data.loc[(train_test_data['Fare'] > 9.844) & (train_test_data['Fare'] <= 69.55), 'Fare_Band'] = 1\ntrain_test_data.loc[train_test_data['Fare'] > 69.55, 'Fare_Band'] = 2\ntrain_test_data['Fare_Band'] = train_test_data['Fare_Band'].astype(int)","7ea109c6":"train_test_data.head()","e9a11327":"train_test_data['FamilySize'] = train_test_data['SibSp'] +  train_test_data['Parch'] + 1\ntrain_test_data['FamilySize'] = train_test_data['FamilySize'].astype(int)\nprint (train_test_data[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())","2e4b3cc6":"train_test_data.loc[train_test_data['FamilySize'] == 1, 'IsAlone'] = 1\ntrain_test_data.loc[train_test_data['FamilySize'] > 1, 'IsAlone'] = 0\ntrain_test_data['IsAlone'] = train_test_data['IsAlone'].astype(int)","94417485":"print (train_test_data[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean())","03fdffe2":"train_test_data.head()","f3b9cea1":"drop_cols = ['Age','Cabin', 'Fare', 'Name', 'Parch', 'SibSp', 'Ticket', 'AgeBand',\n             'FareBand', 'FamilySize']\n\ntrain_test_data.drop(columns=drop_cols, inplace=True)","506f7a2d":"train_test_data.head()","9375445b":"train_data = train_test_data[train_test_data['Survived'].notna()]\ntrain_data.head()","2ec91adb":"train_data['Survived'] = train_data['Survived'].astype(int)","19c855c6":"train_data.head()","e6b1ea41":"test_data = train_test_data.drop(train_test_data[train_test_data.Survived >= 0].index)","bcab26f0":"test_data.head()","eeb15c14":"y = train_data[\"Survived\"]\nfeatures = [\"Embarked\", \"Pclass\", \"Sex\", \"Title\", \"Age_Band\", \"Fare_Band\", \"IsAlone\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\n\n","90e36a36":"X.head()","8e6bc9a0":"from sklearn.model_selection import train_test_split as tts\n\ntrain_x, valid_x, train_y, valid_y = tts(X, y, test_size = 0.15, stratify = y, random_state = 45)","964e173f":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = RandomForestClassifier(n_estimators = 2, max_depth=5, random_state=1)\n\nmodel.fit(train_x, train_y)\npreds = model.predict(valid_x)","d799bf32":"acc_random_forest = round(model.score(X, train_data['Survived']) * 100, 2)\nprint (acc_random_forest)","bc86c57a":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\n\nprint(accuracy_score(preds, valid_y))\nprint(f1_score(preds, valid_y))","d00fdf47":"predictions = model.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","ce279a96":"# Creating different bands for Age","d73c565d":"# Separating out our training data and test data","516577a1":"** New Column Cabin_na for null values **\n","6d7d108a":"** Categorical columns to dummies**","c0957639":"# combining familysize","4c9771d8":"# Checking how much people survival is dependent on some factors","52f0b034":"# Using random forest Classifier MODEL","333f6259":"**Filling null values with their mean or most used**","f11b30ff":"# Concatinating train and test data ","328ec312":"**Separating test data**","7d22deee":"# Using Seaborn for visualization","07a90494":"** if family size = 0 => person is alone**","16b462fb":"# Creating different bands for fare","952f00bf":"# Looking into data","3f4ef4a9":"# Checking for null values","adb089b4":"# Loading data","67e88864":"# Submission","c56cde24":"# Dropping the un-necessary columns for good predictions","b4ce899d":"**Replacing titles with 'other' if not 'Miss' or 'Mrs' or 'Master**","0d4ee99a":"**Extracting different Titles in the sex**"}}