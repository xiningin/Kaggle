{"cell_type":{"067fc4fe":"code","0183318d":"code","a52fb71b":"code","1587828b":"code","0285cf19":"code","f03f020b":"code","c838a64c":"code","88d89a1d":"code","410b849f":"code","3846ee68":"code","5ba29aac":"code","b59dd6c9":"code","f9fc0e43":"code","deb93402":"code","663395bd":"code","6fc98718":"code","7a61e313":"code","7029b96a":"code","85f7530b":"code","6c1fd3fb":"code","793d2408":"code","2133f5c3":"code","7ba252c8":"code","a927dc09":"code","d8bd58fc":"code","0803f09b":"code","61ecf6bb":"code","3ed69a64":"code","92a539ab":"code","2db6b94d":"code","891854fc":"code","dc0dba73":"code","2f28ff05":"code","36aa5862":"code","60b1495e":"code","f3b2b1ff":"code","4ded1bcd":"code","c35ff66e":"code","ce18803b":"code","909d96c6":"code","ac1ee552":"code","241b61a1":"code","55587888":"code","9c1b6310":"code","41f83a6f":"code","d162c43f":"code","70adbb1c":"code","b0e8cf9a":"code","c272f420":"code","9fca2436":"code","7728c9c0":"code","939bde31":"code","c58b6a1e":"code","fd12f254":"code","d0524d6b":"code","096be19f":"code","5e1ba9d4":"code","4639e4db":"code","b3e276ec":"code","00dad8a7":"markdown","7bc6d167":"markdown","bf9f312a":"markdown","940aa3da":"markdown","639ecfcd":"markdown","b3d98853":"markdown","f786b64d":"markdown","1ccb2429":"markdown","31d18a61":"markdown","706b59ed":"markdown","0088211d":"markdown","495c716a":"markdown","4f2faef5":"markdown","0b3f6514":"markdown","391152de":"markdown","cf241010":"markdown","4283bfc5":"markdown","8c656f62":"markdown","85950b25":"markdown","097df3bd":"markdown","f5a992c6":"markdown","8c6c534c":"markdown","e1adceb0":"markdown","7e0b27e7":"markdown","1184dc0d":"markdown","c5cd6b1a":"markdown","8cab2e5d":"markdown","dd9e39fd":"markdown","b6566e96":"markdown","e7fa631c":"markdown"},"source":{"067fc4fe":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport scipy as sp\nimport warnings\nimport datetime\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n","0183318d":"data = pd.read_csv(\"\/kaggle\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv\")\n","a52fb71b":"data","1587828b":"data.head()","0285cf19":"data.describe()","f03f020b":"data.info()","c838a64c":"data.value_counts()","88d89a1d":"data.shape","410b849f":"data.dtypes\n","3846ee68":"data.columns","5ba29aac":"data.isnull().sum()\n","b59dd6c9":"data.isnull().any()\n","f9fc0e43":"data.hist(figsize=(20,14))\nplt.show()\n","deb93402":"data.corr()","663395bd":"plt.figure(figsize = (12,10))\n\nsns.heatmap(data.corr(), annot =True)\n\n","6fc98718":"data.columns","7a61e313":"plt.figure(figsize=(14,10))\nsns.set_style(style='whitegrid')\nplt.subplot(2,3,1)\nsns.boxplot(x='Unit price',data=data)\nplt.subplot(2,3,2)\nsns.boxplot(x='Quantity',data=data)\nplt.subplot(2,3,3)\nsns.boxplot(x='Total',data=data)\nplt.subplot(2,3,4)\nsns.boxplot(x='cogs',data=data)\nplt.subplot(2,3,5)\nsns.boxplot(x='Rating',data=data)\nplt.subplot(2,3,6)\nsns.boxplot(x='gross income',data=data)\n\n\n","7029b96a":"sns.pairplot(data=data)","85f7530b":"sns.regplot(x='Rating', y= 'gross income', data=data)","6c1fd3fb":"sns.scatterplot(x='Rating', y= 'cogs', data=data)","793d2408":"sns.jointplot(x='Rating', y= 'Total', data=data)","2133f5c3":"sns.catplot(x='Rating', y= 'cogs', data=data)","7ba252c8":"sns.lmplot(x='Rating', y= 'cogs', data=data)","a927dc09":"data.columns","d8bd58fc":"plt.style.use(\"default\")\n\nsns.kdeplot(x='Rating', y= 'Unit price', data=data)","0803f09b":"sns.lineplot(x='Rating', y= 'Unit price', data=data)","61ecf6bb":"plt.style.use(\"default\")\nplt.figure(figsize=(5,5))\nsns.barplot(x=\"Rating\", y=\"Unit price\", data=data[170:180])\nplt.title(\"Rating vs Unit Price\",fontsize=15)\nplt.xlabel(\"Rating\")\nplt.ylabel(\"Unit Price\")\nplt.show()\n","3ed69a64":"data.columns","92a539ab":"plt.style.use(\"default\")\nplt.figure(figsize=(5,5))\nsns.barplot(x=\"Rating\", y=\"Gender\", data=data[170:180])\nplt.title(\"Rating vs Gender\",fontsize=15)\nplt.xlabel(\"Rating\")\nplt.ylabel(\"Gender\")\nplt.show()","2db6b94d":"plt.style.use(\"default\")\nplt.figure(figsize=(5,5))\nsns.barplot(x=\"Rating\", y=\"Quantity\", data=data[170:180])\nplt.title(\"Rating vs Quantity\",fontsize=15)\nplt.xlabel(\"Rating\")\nplt.ylabel(\"Quantity\")\nplt.show()","891854fc":"#lets find the categorialfeatures\nlist_1=list(data.columns)\n","dc0dba73":"list_cate=[]\nfor i in list_1:\n    if data[i].dtype=='object':\n        list_cate.append(i)\n","2f28ff05":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\n","36aa5862":"for i in list_cate:\n    data[i]=le.fit_transform(data[i])\n","60b1495e":"data","f3b2b1ff":"y=data['Gender']\nx=data.drop('Gender',axis=1)\n","4ded1bcd":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=0.2)\n","c35ff66e":"print(len(x_train))\nprint(len(x_test))\nprint(len(y_train))\nprint(len(y_test))\n","ce18803b":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=7)\n\nknn.fit(x_train,y_train)\n","909d96c6":"y_pred=knn.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",knn.score(x_train,y_train)*100)\n","ac1ee552":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\n","241b61a1":"y_pred=svc.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",svc.score(x_train,y_train)*100)\n","55587888":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(x_train,y_train)\n","9c1b6310":"y_pred=gnb.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",gnb.score(x_train,y_train)*100)\n","41f83a6f":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier(max_depth=6, random_state=123,criterion='entropy')\n\ndtree.fit(x_train,y_train)\n","d162c43f":"y_pred=dtree.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",dtree.score(x_train,y_train)*100)\n","70adbb1c":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)\n","b0e8cf9a":"y_pred=rfc.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",rfc.score(x_train,y_train)*100)\n","c272f420":"from sklearn.ensemble import AdaBoostClassifier\nadb = AdaBoostClassifier(base_estimator = None)\nadb.fit(x_train,y_train)\n","9fca2436":"y_pred=adb.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",adb.score(x_train,y_train)*100)\n","7728c9c0":"from sklearn.ensemble import GradientBoostingClassifier\ngbc=GradientBoostingClassifier()\ngbc.fit(x_train,y_train)","939bde31":"y_pred=gbc.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",gbc.score(x_train,y_train)*100)","c58b6a1e":"data = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndata","fd12f254":"from xgboost import XGBClassifier\n\nxgb =XGBClassifier(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)\n\nxgb.fit(x_train, y_train)\n","d0524d6b":"y_pred=xgb.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",xgb.score(x_train,y_train)*100)\n","096be19f":"from sklearn.ensemble import ExtraTreesClassifier\netc = ExtraTreesClassifier(n_estimators=100, random_state=0)\netc.fit(x_train,y_train)\n","5e1ba9d4":"y_pred=etc.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",etc.score(x_train,y_train)*100)","4639e4db":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn import tree\nmodel = BaggingClassifier(tree.DecisionTreeClassifier(random_state=1))\nmodel.fit(x_train, y_train)\nmodel.score(x_test,y_test)\n\n","b3e276ec":"data = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndata\n","00dad8a7":"**2. SVC**\n\n**In machine learning, support-vector machines (SVMs, also support-vector networks) are supervised learning models with associated learning algorithms that analyze data for classification and regression analysis.**\n","7bc6d167":"**3. Naive Bayes**\n\n**It is a classification technique based on Bayes' Theorem with an assumption of independence among predictors. In simple terms, a Naive Bayes classifier assumes that the presence of a particular feature in a class is unrelated to the presence of any other feature.**","bf9f312a":"**Checking Null Value**","940aa3da":"**5.Random Forest Classifier**\n\n**A random forest classifier. A random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting.**\n\n","639ecfcd":"# LOADING THE DATASET","b3d98853":"# TRAINING AND TESTING DATA","f786b64d":"**SCATTER PLOT**\n\n**A scatter plot (aka scatter chart, scatter graph) uses dots to represent values for two different numeric variables. The position of each dot on the horizontal and vertical axis indicates values for an individual data point. Scatter plots are used to observe relationships between variables.**\n\n","1ccb2429":"**8. XGBClassifier**\n\n**XGBoost is a popular and efficient open-source implementation of the gradient boosted trees algorithm. Gradient boosting is a supervised learning algorithm, which attempts to accurately predict a target variable by combining the estimates of a set of simpler, weaker models.**","31d18a61":"**4. DECISION TREE CLASSIFIER**\n\n**Decision trees use multiple algorithms to decide to split a node into two or more sub-nodes. The creation of sub-nodes increases the homogeneity of resultant sub-nodes. ... The decision tree splits the nodes on all available variables and then selects the split which results in most homogeneous sub-nodes.**\n\n","706b59ed":"**BOXPLOT**\n\n**A boxplot is a standardized way of displaying the distribution of data based on a five number summary (\u201cminimum\u201d, first quartile (Q1), median, third quartile (Q3), and \u201cmaximum\u201d). ... It can also tell you if your data is symmetrical, how tightly your data is grouped, and if and how your data is skewed.**\n\n","0088211d":"**HISTOGRAM**\n\n**A histogram is basically used to represent data provided in a form of some groups.It is accurate method for the graphical representation of numerical data distribution.It is a type of bar plot where X-axis represents the bin ranges while Y-axis gives information about frequency.**","495c716a":"**LMPLOT**\n\n**The lineplot (lmplot) is one of the most basic plots. It shows a line on a 2 dimensional plane. You can plot it with seaborn or matlotlib depending on your preference. The examples below use seaborn to create the plots, but matplotlib to show.**\n","4f2faef5":"**9. ExtraTreesClassifier**\n\n**Extremely Randomized Trees Classifier(Extra Trees Classifier) is a type of ensemble learning technique which aggregates the results of multiple de-correlated decision trees collected in a \u201cforest\u201d to output it's classification result.**","0b3f6514":"**REGPLOT**\n\n**This method is used to plot data and a linear regression model fit. ... If strings, these should correspond with column names in \u201cdata\u201d. When pandas objects are used, axes will be labeled with the series name. data: This is dataframe where each column is a variable and each row is an observation.**","391152de":"**CATPLOT**\n\n**Catplot is a relatively new addition to Seaborn that simplifies plotting that involves categorical variables. In Seaborn version v0. 9.0 that came out in July 2018, changed the older factor plot to catplot to make it more consistent with terminology in pandas and in seaborn.**","cf241010":"**KDE PLOT (DENSITY PLOT)**\n\n**KDE Plot described as Kernel Density Estimate is used for visualizing the Probability Density of a continuous variable. It depicts the probability density at different values in a continuous variable. We can also plot a single graph for multiple samples which helps in more efficient data visualization.**\n\n","4283bfc5":"**LINEPLOT**\n\n**A Line plot can be defined as a graph that displays data as points or check marks above a number line, showing the frequency of each value.**\n\n","8c656f62":"**PAIRPLOT**\n\n**A pairplot plot a pairwise relationships in a dataset. The pairplot function creates a grid of Axes such that each variable in data will by shared in the y-axis across a single row and in the x-axis across a single column.**\n","85950b25":"**CONCLUSION :**\n    \n**ACCURACIES OF DIFFERENT MODELS ARE:**\n\n**KNeighbors Classifier= 64.75 %**\n\n**SVC= 55.50 %**\n\n**Naiye Bayes= 55.10 %**\n\n**Decision Tree Classifier= 64 %**\n\n**Random Forest Classifier= 100 %**\n\n**Ada Boost Classifier= 67 %**\n\n**Gradient Boosting Classifier= 89 %**\n\n**XGB Classifier= 64 %**\n\n**Extra Trees Classifier= 100 %**\n\n**Bagging Classifier = 51 %**\n\n\n**We got a good accuracy of about 100 % using Random Forest Classifier and Extra Trees Classifier which is quite well for the given dataset.**\n\n**The accuracy of other models can be increased further by HyperTuning.**\n\n\n\n\n\n\n\n\n\n","097df3bd":"**HEATMAP**\n\n**A heatmap is a graphical representation of data that uses a system of color-coding to represent different values. Heatmaps are used in various forms of analytics but are most commonly used to show user behaviour on specific webpages or webpage templates.**\n","f5a992c6":"# Supermarket Sales Prediction\n","8c6c534c":"**7. Gradient Boosting Classifier**\n\n**Gradient boosting classifiers are a group of machine learning algorithms that combine many weak learning models together to create a strong predictive model. Decision trees are usually used when doing gradient boosting.**\n\n","e1adceb0":"**6. AdaBoostClassifier**\n\n**An AdaBoost classifier is a meta-estimator that begins by fitting a classifier on the original dataset and then fits additional copies of the classifier on the same dataset but where the weights of incorrectly classified instances are adjusted such that subsequent classifiers focus more on difficult cases.**\n\n","7e0b27e7":"**JOINTPLOT**\n\n**Seaborn's jointplot displays a relationship between 2 variables (bivariate) as well as 1D profiles (univariate) in the margins. This plot is a convenience class that wraps JointGrid.**","1184dc0d":"# **Exploratory Data Analysis**","c5cd6b1a":"# MODELS\n\n**1. KNeighborsClassifier**\n\n**By default, the KNeighborsClassifier looks for the 5 nearest neighbors. We must explicitly tell the classifier to use Euclidean distance for determining the proximity between neighboring points.**\n\n","8cab2e5d":"**BARPLOT**\n\n**A barplot (or barchart) is one of the most common types of graphic. It shows the relationship between a numeric and a categoric variable. Each entity of the categoric variable is represented as a bar. The size of the bar represents its numeric value.**\n","dd9e39fd":"# IMPORTING THE LIBRARIES","b6566e96":"# **THANK YOU**","e7fa631c":"**10.Bagging Classifier**\n\n**A Bagging classifier is an ensemble meta-estimator that fits base classifiers each on random subsets of the original dataset and then aggregate their individual predictions (either by voting or by averaging) to form a final prediction. ... The base estimator to fit on random subsets of the dataset.**\n\n"}}