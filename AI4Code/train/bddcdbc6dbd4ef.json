{"cell_type":{"b4dbc225":"code","5b880e4b":"code","bf3f3cc4":"code","e3fa4c4a":"code","61dc60ac":"code","4a1b64e2":"code","bd4256e2":"code","ea4e8672":"code","ee10cf1d":"code","8aece06d":"code","492b0a4c":"code","e557e653":"code","859e3344":"code","7641836e":"code","34225579":"code","57c35ca5":"code","609a1ea7":"code","9cca0df1":"code","480800ea":"code","2aa32736":"code","bc7217b2":"code","6c4328dc":"code","6cb6f6c7":"code","2e898c0d":"code","290508f3":"code","9b1eacb7":"code","d69741ab":"code","e92134d4":"code","4407ebd2":"code","6fb0c374":"code","b5899cbb":"code","a16dab69":"code","7aa3bad8":"code","bc8a7fcc":"code","63ecb983":"code","86f76179":"code","3155d5d2":"code","9c45386c":"code","cfad5a87":"code","5497865e":"code","f24f80ed":"code","91ac5f37":"code","ed4550a9":"code","5ddf3d50":"code","619f4f6d":"code","9a5c980e":"code","e2cc2dbf":"code","ce079eab":"code","96f48f5a":"code","588f0c1c":"code","095de98a":"code","7557872d":"code","dea17548":"code","6ea466e1":"code","8678be6d":"code","3f346d0a":"code","ba96850c":"code","87e8106f":"code","2b110ac7":"code","375fc903":"code","6c3218f7":"code","f2bae48b":"code","8ce4c748":"code","ef265fda":"code","2d343a9f":"code","dff6fb37":"code","2b8be164":"code","5106dfee":"code","e9c9dc09":"code","595ac71e":"code","9c79b982":"code","5325e9d5":"code","849916b9":"markdown","397f850a":"markdown","74ee64d5":"markdown","0bde4eff":"markdown","3d09c353":"markdown","a23772f0":"markdown","974bcd1b":"markdown","1ecefe2e":"markdown","8efa0987":"markdown"},"source":{"b4dbc225":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport matplotlib\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)","5b880e4b":"#Reading CSV\ndf1 = pd.read_csv(\"..\/input\/bengaluru-house-price-data\/datasets_20710_26737_Bengaluru_House_Data.csv\")\ndf1","bf3f3cc4":"#checking dimensions of dataframe\ndf1.shape","e3fa4c4a":"#checking columns name\ndf1.columns","61dc60ac":"#checking unique values in area_type\ndf1['area_type'].unique()","4a1b64e2":"#checking values_count in area_type\ndf1['area_type'].value_counts()","bd4256e2":"#drop area_type society balcony availability because we are building a simple model so find those columns unecessary \ndf2 = df1.drop(['area_type','society','balcony','availability'],axis='columns')\ndf2.shape","ea4e8672":"#Checking for null values in dataset\ndf2.isnull().sum()","ee10cf1d":"df2.shape","8aece06d":"#Dropping null value tuples\ndf3 = df2.dropna()\n\ndf3.isnull().sum()","492b0a4c":"df3.shape","e557e653":"#tokenizing Size column and extracting the integer from it and storing it to bhk column\ndf3['bhk'] = df3['size'].apply(lambda x: int(x.split(' ')[0]))\ndf3.bhk.unique()","859e3344":"#Checking if float\ndef is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","7641836e":"#return all rows which are not float\ndf3[~df3['total_sqft'].apply(is_float)].head(10)","34225579":"# function used for tokenizing using - and taking average to scale it properly\ndef convert_sqft_to_num(x):\n    tokens = x.split('-')\n    if len(tokens) == 2:\n        return (float(tokens[0])+float(tokens[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None","57c35ca5":"#tokenizing using - and taking average to scale it properly\ndf4 = df3.copy()\ndf4.total_sqft = df4.total_sqft.apply(convert_sqft_to_num)\ndf4 = df4[df4.total_sqft.notnull()]\ndf4.head(10)","609a1ea7":"#checking that is aove applying successful\ndf4.loc[30]","9cca0df1":"#calculating price price_per_sqft price\/total_sqft \ndf5 = df4.copy()\ndf5['price_per_sqft'] = df5['price']*100000\/df5['total_sqft']\ndf5.head()","480800ea":"#calculating price price_per_sqft\ndf5_stats = df5['price_per_sqft'].describe()\ndf5_stats","2aa32736":"df5.to_csv(\"bhp.csv\",index=False)","bc7217b2":"df5['bhk'].value_counts() ","6c4328dc":"# matplotlib.rcParams.update({'font.size':15})\n#graph on approx price on basis of bhk\ndt=df5\ndf_filtered = dt[dt['bhk'] <=5]\ndf_filtered['bhk'].value_counts()\n# df_filtered\na1=df5[df5['bhk'] ==1]['price'].mean()\na2=df5[df5['bhk'] ==2]['price'].mean()\na3=df5[df5['bhk'] ==3]['price'].mean()\na4=df5[df5['bhk'] ==4]['price'].mean()\na5=df5[df5['bhk'] ==5]['price'].mean()\nlabels=['1_BHK','2_BHK','3_BHK','4_BHK','5_BHK']\nprice=[a1,a2,a3,a4,a5]\nplt.bar(labels,price,color='purple')\nplt.xlabel('BHK')\nplt.ylabel('Average Price (LAKHS)')\nplt.title('Approx Price on basis of BHK')\nplt.savefig(\"BHK Vs Price.png\")\nplt.show()\na4","6cb6f6c7":"# # df_filtered[df_filtered['location'].value_counts()>143]\n# df_fil=df_filtered.groupby('location').filter(lambda x : len(x)>143)\n# df_fil['location'].value_counts()","2e898c0d":"# df_filtered[df_filtered['location'].value_counts()>143]\n# Top 10 costly Area_Pricewise \nd00=df5.sort_values('price',ascending=False)\nd01=d00['location'].head(10)\nd02=d00['price'].head(10)\nplt.bar(d01,d02,color='purple')\nplt.xlabel('AREA')\nplt.ylabel('Price (LAKHS)')\nplt.title('Top 10 Costly Area_PriceWise')\nplt.grid(True)\nplt.savefig(\"Top 10 Costly Area_PriceWise.png\")\nplt.show()","290508f3":"# Demand of Bhk in particulare area\nlabels=['1_BHK','2_BHK','3_BHK','4_BHK','5_BHK']\nbhk_no=[640,5517,4818,1390,349]\nplt.pie(bhk_no,labels=labels,radius=1.1,autopct='%0.2f%%')\nplt.title('Demand of BHK')\nplt.savefig('Pie_Chart_BHK.jpg')\nplt.show()","9b1eacb7":"df5.location = df5.location.apply(lambda x: x.strip())\nlocation_stats = df5['location'].value_counts(ascending=False)\nlocation_stats","d69741ab":"location_stats.values.sum()","e92134d4":"len(location_stats[location_stats>10])","4407ebd2":"\nlen(location_stats)\n","6fb0c374":"len(location_stats[location_stats<=10])","b5899cbb":"location_stats_less_than_10 = location_stats[location_stats<=10]\nlocation_stats_less_than_10\n","a16dab69":"len(df5.location.unique())","7aa3bad8":"df5.location = df5.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)\nlen(df5.location.unique())","bc8a7fcc":"df5.head(10)","63ecb983":"df5[df5.total_sqft\/df5.bhk<300].head()","86f76179":"df5.shape","3155d5d2":"\ndf6 = df5[~(df5.total_sqft\/df5.bhk<300)]\ndf6.shape","9c45386c":"df6.price_per_sqft.describe()","cfad5a87":"def remove_pps_outliers(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out\ndf7 = remove_pps_outliers(df6)\ndf7.shape","5497865e":"\ndef plot_scatter_chart(df,location):\n    bhk2 = df[(df.location==location) & (df.bhk==2)]\n    bhk3 = df[(df.location==location) & (df.bhk==3)]\n    matplotlib.rcParams['figure.figsize'] = (15,10)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK', s=50)\n    plt.scatter(bhk3.total_sqft,bhk3.price,marker='+', color='green',label='3 BHK', s=50)\n    plt.xlabel(\"Total Square Feet Area\")\n    plt.ylabel(\"Price (Lakh Indian Rupees)\")\n    plt.title(location)\n    plt.legend()\n    \nplot_scatter_chart(df7,\"Rajaji Nagar\")","f24f80ed":"plot_scatter_chart(df7,\"Hebbal\")","91ac5f37":"# Removing PricePerSqft Outliar According to standard deviation\ndef remove_bhk_outliers(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            bhk_stats[bhk] = {\n                'mean': np.mean(bhk_df.price_per_sqft),\n                'std': np.std(bhk_df.price_per_sqft),\n                'count': bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n    return df.drop(exclude_indices,axis='index')\ndf8 = remove_bhk_outliers(df7)\n# df8 = df7.copy()\ndf8.shape","ed4550a9":"plot_scatter_chart(df8,\"Rajaji Nagar\")\n","5ddf3d50":"plot_scatter_chart(df8,\"Hebbal\")","619f4f6d":"import matplotlib\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)\nplt.hist(df8.price_per_sqft,rwidth=0.8)\nplt.xlabel(\"Price Per Square Feet\")\nplt.ylabel(\"Count\")\n","9a5c980e":"df8.bath.unique()\n","e2cc2dbf":"plt.hist(df8.bath,rwidth=0.8)\nplt.xlabel(\"Number of bathrooms\")\nplt.ylabel(\"Count\")","ce079eab":"df8[df8.bath>10]","96f48f5a":"df8[df8.bath>df8.bhk+2]","588f0c1c":"df9 = df8[df8.bath<df8.bhk+2]\ndf9.shape","095de98a":"df9.head(2)","7557872d":"\ndf10 = df9.drop(['size','price_per_sqft'],axis='columns')\ndf10.head(3)\n","dea17548":"#One_Hot_Encoding\ndummies = pd.get_dummies(df10.location)\ndummies.head(3)","6ea466e1":"df11 = pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')\ndf11.head()\ndf11.dtypes","8678be6d":"df12 = df11.drop('location',axis='columns')\ndf12.head(2)","3f346d0a":"df12.shape","ba96850c":"X = df12.drop(['price'],axis='columns')\nX.head(3)","87e8106f":"X.shape","2b110ac7":"y = df12.price\ny.head(3)\n","375fc903":"len(y)","6c3218f7":"# Splitting for training and testing(20% testing)\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)\n\n","f2bae48b":"from sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train,y_train)\nlr_clf.score(X_test,y_test)","8ce4c748":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)","ef265fda":"from sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train,y_train)\nlr_clf.score(X_test,y_test)","2d343a9f":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(LinearRegression(), X, y, cv=cv)","dff6fb37":"from sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\n\ndef find_best_model_using_gridsearchcv(X,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        },\n         'xgboost_regression' : {\n            'model': XGBRegressor(),\n            'params': {\n                \n            'max_depth': [4],\n            'n_estimators':[500],\n            'learning_rate': [0.4]\n            }\n        },\n        'random_forest' : {\n            'model': RandomForestRegressor(),\n            'params': {               \n            'max_depth': [9],\n            'n_estimators':[70],        \n            'random_state':[42]\n            }\n        },\n#         'Gradient_Boost' : {\n#             'model': GradientBoostingRegressor(),\n#             'params': {               \n#             'max_depth': [9],\n#             'n_estimators':[700],        \n#             'random_state':[42]\n#             }\n#         },\n           \n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\ndf=find_best_model_using_gridsearchcv(X,y)\ndf","2b8be164":"# df=find_best_model_using_gridsearchcv(X,y)\n# df\n#Accuracy Comparison graph\nplt.bar(df['model'],df['best_score'],color=\"orange\")\nplt.show()","5106dfee":"#function to predict\ndef predict_price(location,sqft,bath,bhk):    \n    loc_index = np.where(X.columns==location)[0][0]\n\n    x = np.zeros(len(X.columns))\n    x[0] = sqft\n    x[1] = bath\n    x[2] = bhk\n    if loc_index >= 0:\n        x[loc_index] = 1\n\n    return lr_clf.predict([x])[0]","e9c9dc09":"predict_price('1st Phase JP Nagar',1000, 2, 2)","595ac71e":"predict_price('1st Phase JP Nagar',1000, 3, 3)\n","9c79b982":"predict_price('Indira Nagar',1000, 2, 2)","5325e9d5":"predict_price('Indira Nagar',1000, 3, 3)","849916b9":"### Removing PricePerSqft Outliar According to standard deviation","397f850a":"### Renaming all Location which have less than 10 entries in datasets to others ","74ee64d5":"# Performing Cross validation","0bde4eff":"# Testing with some data","3d09c353":"### Removing Outliar of total_sqft in which bhk size is less than 300","a23772f0":"# Building regression model","974bcd1b":"## Importing Essential Libraries","1ecefe2e":"# Comparing Scores using gridsearch cv for 5 algo","8efa0987":"### Removing entries having more than 10 bathrooms"}}