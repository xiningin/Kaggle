{"cell_type":{"e2a07765":"code","80c77b23":"code","d371dfe4":"code","20303d08":"code","07500683":"code","ec57f2b9":"code","32417b42":"code","73232258":"code","3c7fd8ad":"code","e5047359":"code","f98f9aea":"code","c4493a6d":"code","174d457a":"code","352f9c18":"markdown","40468e88":"markdown","c6ef7970":"markdown"},"source":{"e2a07765":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80c77b23":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt","d371dfe4":"image = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nsharpening_aja = np.array([[-1,-1,-1],\n                              [-1,9,-1],\n                              [-1,-1,-1]])\n\nsharped_fix = cv2.filter2D(image, -1, sharpening_aja)","20303d08":"plt.figure(figsize=(5,5))\nplt.imshow(image)\nplt.title('Ori'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(5,5))\nplt.imshow(sharped_fix)\nplt.title('Sharpening'), plt.xticks([]), plt.yticks([])","07500683":"g = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\ng1 = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\ng = g.sum(axis=-1)","ec57f2b9":"def blur(g):\n    for x in range(1,g.shape[0]-1):\n        for y in range(1,g.shape[1]-1):\n            g[x,y] = (30*g[x,y] + g[x-1,y] + g[x+1,y] + g[x,y-1] + g[x,y+1])\/8.0\n    return g","32417b42":"%timeit blur(g)","73232258":"plt.figure(figsize=(5,5))\nplt.imshow(g1, cmap=\"gray\")\nplt.title('Ori'), plt.xticks([]), plt.yticks([])\nblur(g)\nblur(g)\nblur(g)\nplt.figure(figsize=(5,5))\nplt.imshow(g, cmap=\"gray\")\nplt.title('Blur'), plt.xticks([]), plt.yticks([])","3c7fd8ad":"img = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)","e5047359":"edge_Canny = cv2.Canny(img_gray,100,200)","f98f9aea":"sobel_x = cv2.Sobel(img_gray,cv2.CV_64F,1,0,ksize=5)\nsobel_y = cv2.Sobel(img_gray,cv2.CV_64F,0,1,ksize=5)","c4493a6d":"def filter2d(src, kernel):\n    m, n = kernel.shape\n\n    q = int((m-1)\/2)\n    r, s = src.shape[0], src.shape[1]\n\n    app = np.zeros((r, s))\n\n    for y in range(q, r - q):\n        for x in range(q, s - q):\n           \n            app[y][x] = np.sum(src[y-q:y+q+1, x-q:x+q+1]*kernel)\n\n    return app\n\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nkernel = np.array([[1, 1,  1],\n                   [1, -8, 1],\n                   [1, 1,  1]])\n\napp = filter2d(gray, kernel)","174d457a":"plt.subplot(2,2,1),plt.imshow(edge_Canny,cmap = 'gray')\nplt.title('ed Canny'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,2),plt.imshow(sobel_x,cmap = 'gray')\nplt.title('Sobel X'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,3),plt.imshow(sobel_y,cmap = 'gray')\nplt.title('Sobel Y'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,4),plt.imshow(app,cmap = 'gray')\nplt.title('Laplacian Filter'), plt.xticks([]), plt.yticks([])\n\nplt.show()","352f9c18":"**SHARPENING**\n.........................................","40468e88":"**BLURRING**\n..........................................","c6ef7970":"**edgedetection (canny), sobel(x,y), and laplacianfilter**\n.............................................................................."}}