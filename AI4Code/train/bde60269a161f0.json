{"cell_type":{"0bfbd04e":"code","97cdff88":"code","c426b2be":"code","6e4ae21f":"code","d54ad9ed":"code","4b1fc91a":"code","25088dc6":"code","34b9847d":"code","24d1e695":"code","a652b048":"code","95f61287":"code","1d9634e8":"code","e7ebdbbc":"code","5d1649a9":"code","e0fc22a9":"code","1f898b9f":"code","a5da91ee":"code","3c2a572c":"code","06314789":"code","418c663d":"code","928e086d":"code","45481cbb":"code","754b2a5c":"code","3842267c":"code","0a6e188d":"code","dd91b38e":"code","9bbf9a67":"code","9c1559f6":"code","884b5903":"code","fd610de9":"code","b30672f6":"code","ab430820":"code","ccb25522":"code","8ed5b4cb":"code","e5be0452":"code","6f95eed7":"code","3db0a33c":"code","02595704":"code","bbdd348f":"code","1fa2036c":"code","b172b6af":"code","e69911f3":"code","a7bb1698":"code","a78e6fe2":"code","c86593bb":"code","47969e7a":"code","3fcaf5a1":"code","a720bd1b":"code","f133d04e":"code","516ea18e":"code","21551290":"code","031ca1da":"code","e435984d":"code","162e32c8":"code","324fcd7c":"code","e91b1f94":"code","2c325dcf":"code","990b2540":"code","59c58c87":"code","525521f2":"code","964cfd68":"code","a7a7fdf1":"code","e386d550":"code","2926e5bc":"code","dd5e554a":"code","7e558122":"code","5ac33e69":"code","a3d6ca9d":"code","9298c8fc":"code","6c282904":"code","b73010db":"code","c06423b3":"code","180cf495":"code","9fffacb4":"code","8e4af38f":"code","a2012deb":"code","f8060f8f":"code","688fa7a5":"code","baf5c92e":"code","79fa5067":"code","2400d84b":"code","c0e2c7e8":"code","d28e9875":"markdown","113661db":"markdown","72c6a7cb":"markdown","3eff8ee5":"markdown","4d633f92":"markdown","358dfbd4":"markdown","f223998a":"markdown","9d39cd9e":"markdown","d0db559a":"markdown","bd23e1a9":"markdown","d8241e0e":"markdown","46599bbf":"markdown","349028a8":"markdown","bacf1287":"markdown","2b93c097":"markdown","7ee1f694":"markdown","d829a06c":"markdown","4462a945":"markdown","d02d3848":"markdown","ca409166":"markdown"},"source":{"0bfbd04e":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tqdm import tqdm\nimport gc\nimport random\nimport lightgbm as lgb\nimport re\nfrom sklearn.metrics import *\nfrom sklearn.model_selection import KFold\nimport warnings\nwarnings.filterwarnings(action='ignore')","97cdff88":"train_err  = pd.read_csv(\"..\/input\/dacon-lg\/train_err_data.csv\")\ntrain_quality  = pd.read_csv(\"..\/input\/dacon-lg\/train_quality_data.csv\")\ntrain_problem  = pd.read_csv('..\/input\/dacon-lg\/train_problem_data.csv')\n\ntest_err  = pd.read_csv('..\/input\/dacon-lg\/test_err_data.csv')\ntest_quality  = pd.read_csv('..\/input\/dacon-lg\/test_quality_data.csv')","c426b2be":"# train_err\nprint(\"-- Size -- \")\nprint(f\"train_err : {train_err.shape}\")\nprint(f\"test_err  : {test_err.shape}\")\n\n# train_quality\nprint(\"-- Size -- \")\nprint(f\"train_quality : {train_quality.shape}\")\nprint(f\"test_quality  : {test_quality.shape}\")","6e4ae21f":"train_err # 16554663 rows","d54ad9ed":"test_err # 16532648 rows","4b1fc91a":"train_quality","25088dc6":"train_problem","34b9847d":"train_err = train_err[:1000000]\ntrain_err.shape","24d1e695":"test_err = test_err[:1000000]\ntest_err.shape","a652b048":"# Train\/Test-set\uc758 \uace0\uc720\ud55c model_nm \uad6c\ud568.\ntrain_err_errtype_set = set(train_err['model_nm'])\ntest_err_errtype_set  = set(test_err['model_nm'])\n\n\n# Train\/Test-set \uace0\uc720\ud55c model_nm \uac1c\uc218\ub97c \uad6c\ud568.\nprint(f\"Train-set\uc5d0 \uc788\ub294 \uace0\uc720\ud55c model_nm \uac1c\uc218 : { len(train_err_errtype_set) }\")\nprint(f\"Test-set\uc5d0 \uc788\ub294 \uace0\uc720\ud55c model_nm \uac1c\uc218 : { len(test_err_errtype_set) }\")\n\n# Train\/Test-set \ubaa8\ub450\uc5d0 \ud3ec\ud568\ub418\uc5b4\uc788\ub294 model_nm \uad6c\ud568.\nprint('='* 80)\ncommon_errtype = train_err_errtype_set.intersection(test_err_errtype_set)\nprint(f\"Train\/Test-set\uc5d0 \uacf5\ud1b5\uc73c\ub85c \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 model_nm \uac1c\uc218 : {len(common_errtype)}\")\n\n# Train-set\uc5d0\ub9cc \uc788\ub294 model_nm \uad6c\ud568.\nprint('='* 80)\nonly_train_err_errtype = train_err_errtype_set.difference(test_err_errtype_set)\nprint(f\"Train-set\uc5d0\ub9cc \uc788\ub294 model_nm \ucd1d { len(only_train_err_errtype) }\uac1c \uc785\ub2c8\ub2e4.\")\nprint(f\"Train-set\uc5d0\ub9cc \uc788\ub294 model_nm : { sorted(only_train_err_errtype ) }\")\n\n# Test-set\uc5d0\ub9cc \uc788\ub294 model_nm \uad6c\ud568.\nprint('='* 80)\nonly_test_err_errtype = test_err_errtype_set.difference(train_err_errtype_set)\nprint(f\"Test-set\uc5d0\ub9cc \uc788\ub294 model_nm \ucd1d { len(only_test_err_errtype) }\uac1c \uc785\ub2c8\ub2e4.\")\nprint(f\"Test-set\uc5d0\ub9cc \uc788\ub294 model_nm : { sorted( only_test_err_errtype ) }\")","95f61287":"# Train\/Test-set\uc758 \uace0\uc720\ud55c fwver \uad6c\ud568.\ntrain_err_errtype_set = set(train_err['fwver'])\ntest_err_errtype_set  = set(test_err['fwver'])\n\n\n# Train\/Test-set \uace0\uc720\ud55c errtype\uc758 \uac1c\uc218\ub97c \uad6c\ud568.\nprint(f\"Train-set\uc5d0 \uc788\ub294 \uace0\uc720\ud55c fwver \uac1c\uc218 : { len(train_err_errtype_set) }\")\nprint(f\"Test-set\uc5d0 \uc788\ub294 \uace0\uc720\ud55c fwver \uac1c\uc218 : { len(test_err_errtype_set) }\")\n\n# Train\/Test-set \ubaa8\ub450\uc5d0 \ud3ec\ud568\ub418\uc5b4\uc788\ub294 errtype\ub97c \uad6c\ud568.\nprint('='* 80)\ncommon_errtype = train_err_errtype_set.intersection(test_err_errtype_set)\nprint(f\"Train\/Test-set\uc5d0 \uacf5\ud1b5\uc73c\ub85c \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 fwver \uac1c\uc218 : {len(common_errtype)}\")\n\n# Train-set\uc5d0\ub9cc \uc788\ub294 errtype\ub97c \uad6c\ud568.\nprint('='* 80)\nonly_train_err_errtype = train_err_errtype_set.difference(test_err_errtype_set)\nprint(f\"Train-set\uc5d0\ub9cc \uc788\ub294 fwver \ucd1d { len(only_train_err_errtype) }\uac1c \uc785\ub2c8\ub2e4.\")\nprint(f\"Train-set\uc5d0\ub9cc \uc788\ub294 fwver : { sorted(only_train_err_errtype ) }\")\n\n# Test-set\uc5d0\ub9cc \uc788\ub294 errtype\ub97c \uad6c\ud568.\nprint('='* 80)\nonly_test_err_errtype = test_err_errtype_set.difference(train_err_errtype_set)\nprint(f\"Test-set\uc5d0\ub9cc \uc788\ub294 fwver \ucd1d { len(only_test_err_errtype) }\uac1c \uc785\ub2c8\ub2e4.\")\nprint(f\"Test-set\uc5d0\ub9cc \uc788\ub294 fwver : { sorted( only_test_err_errtype ) }\")","1d9634e8":"# Train\/Test-set\uc758 \uace0\uc720\ud55c errtype \uad6c\ud568.\ntrain_err_errtype_set = set(train_err['errtype'])\ntest_err_errtype_set  = set(test_err['errtype'])\n\n\n# Train\/Test-set \uace0\uc720\ud55c errtype\uc758 \uac1c\uc218\ub97c \uad6c\ud568.\nprint(f\"Train-set\uc5d0 \uc788\ub294 \uace0\uc720\ud55c errtype\uc758 \uac1c\uc218 : { len(train_err_errtype_set) }\")\nprint(f\"Test-set\uc5d0 \uc788\ub294 \uace0\uc720\ud55c errtype\uc758 \uac1c\uc218 : { len(test_err_errtype_set) }\")\n\n# Train\/Test-set \ubaa8\ub450\uc5d0 \ud3ec\ud568\ub418\uc5b4\uc788\ub294 errtype\ub97c \uad6c\ud568.\nprint('='* 80)\ncommon_errtype = train_err_errtype_set.intersection(test_err_errtype_set)\nprint(f\"Train\/Test-set\uc5d0 \uacf5\ud1b5\uc73c\ub85c \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 errtype \uac1c\uc218 : {len(common_errtype)}\")\n\n# Train-set\uc5d0\ub9cc \uc788\ub294 errtype\ub97c \uad6c\ud568.\nprint('='* 80)\nonly_train_err_errtype = train_err_errtype_set.difference(test_err_errtype_set)\nprint(f\"Train-set\uc5d0\ub9cc \uc788\ub294 errtype\ub294 \ucd1d { len(only_train_err_errtype) }\uac1c \uc785\ub2c8\ub2e4.\")\nprint(f\"Train-set\uc5d0\ub9cc \uc788\ub294 errtype\ub294 : { sorted(only_train_err_errtype ) }\")\n\n# Test-set\uc5d0\ub9cc \uc788\ub294 errtype\ub97c \uad6c\ud568.\nprint('='* 80)\nonly_test_err_errtype = test_err_errtype_set.difference(train_err_errtype_set)\nprint(f\"Test-set\uc5d0\ub9cc \uc788\ub294 errtype\ub294 \ucd1d { len(only_test_err_errtype) }\uac1c \uc785\ub2c8\ub2e4.\")\nprint(f\"Test-set\uc5d0\ub9cc \uc788\ub294 errtype\ub294 : { sorted( only_test_err_errtype ) }\")","e7ebdbbc":"# Train\/Test-set\uc758 \uace0\uc720\ud55c errcode \uad6c\ud568.\ntrain_err_errtype_set = set(train_err['errcode'])\ntest_err_errtype_set  = set(test_err['errcode'])\n\n\n# Train\/Test-set \uace0\uc720\ud55c errcode \uac1c\uc218\ub97c \uad6c\ud568.\nprint(f\"Train-set\uc5d0 \uc788\ub294 \uace0\uc720\ud55c errcode \uac1c\uc218 : { len(train_err_errtype_set) }\")\nprint(f\"Test-set\uc5d0 \uc788\ub294 \uace0\uc720\ud55c errcode \uac1c\uc218 : { len(test_err_errtype_set) }\")\n\n# Train\/Test-set \ubaa8\ub450\uc5d0 \ud3ec\ud568\ub418\uc5b4\uc788\ub294 errcode \uad6c\ud568.\nprint('='* 80)\ncommon_errtype = train_err_errtype_set.intersection(test_err_errtype_set)\nprint(f\"Train\/Test-set\uc5d0 \uacf5\ud1b5\uc73c\ub85c \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 errcode \uac1c\uc218 : {len(common_errtype)}\")\n\n# Train-set\uc5d0\ub9cc \uc788\ub294 errcode \uad6c\ud568.\nprint('='* 80)\nonly_train_err_errtype = train_err_errtype_set.difference(test_err_errtype_set)\nprint(f\"Train-set\uc5d0\ub9cc \uc788\ub294 errcode \ucd1d { len(only_train_err_errtype) }\uac1c \uc785\ub2c8\ub2e4.\")\n#print(f\"Train-set\uc5d0\ub9cc \uc788\ub294 errcode : { sorted(only_train_err_errtype ) }\")\n\n# Test-set\uc5d0\ub9cc \uc788\ub294 errcode \uad6c\ud568.\nprint('='* 80)\nonly_test_err_errtype = test_err_errtype_set.difference(train_err_errtype_set)\nprint(f\"Test-set\uc5d0\ub9cc \uc788\ub294 errcode \ucd1d { len(only_test_err_errtype) }\uac1c \uc785\ub2c8\ub2e4.\")\n#print(f\"Test-set\uc5d0\ub9cc \uc788\ub294 errcode : { sorted( only_test_err_errtype ) }\")","5d1649a9":"train_problem","e0fc22a9":"train_problem.time.value_counts()","1f898b9f":"plt.figure(figsize=(8, 8))\nsns.distplot(train_problem.time)\nplt.show()","a5da91ee":"plt.figure(figsize=(24, 8))\nsns.countplot(train_problem.time)\nplt.show()","3c2a572c":"train_err","06314789":"train_quality","418c663d":"train_problem","928e086d":"train_quality[~train_quality.user_id.isin(train_err.user_id)]","45481cbb":"train_problem[~train_problem.user_id.isin(train_err.user_id)]","754b2a5c":"train_err.loc[train_err.user_id == 19224]","3842267c":"# \uc81c\uac70\ntrain_quality.drop(train_quality[~train_quality.user_id.isin(train_err.user_id)].index, inplace=True)","0a6e188d":"train_quality.info()","dd91b38e":"# \uc81c\uac70\ntrain_problem.drop(train_problem[~train_problem.user_id.isin(train_err.user_id)].index, inplace=True)","9bbf9a67":"train_problem.info()","9c1559f6":"# test data\uc5d0\ub3c4 \ub3d9\uc77c\ud55c \ucc98\ub9ac.\ntest_quality.drop(test_quality[~test_quality.user_id.isin(test_err.user_id)].index, inplace=True)","884b5903":"test_quality.info()","fd610de9":"train_err.info() # errcode\uc5d0 \ud558\ub098\uc758 \uacb0\uce21\uce58 \ud655\uc778.","b30672f6":"test_err.info()","ab430820":"test_err[test_err.isnull().any(axis=1)]","ccb25522":"# user_id, time, model_n, fwver\uac00 \uac19\uc73c\uba74 errtype\uc774 \uac19\uc9c0 \uc54a\uc744\uae4c?\ntest_err.loc[(test_err.user_id == 30820) &\\\n             (test_err.time == 20201115044317) &\\\n            (test_err.model_nm == \"model_2\") &\\\n            (test_err.fwver == \"04.33.1261\")]","8ed5b4cb":"test_err.loc[937967, \"errcode\"] = 40053\ntest_err.info()","e5be0452":"train_quality.info()","6f95eed7":"train_quality[train_quality.isnull().any(axis=1)]","3db0a33c":"# fill quality data\ncolumns = [\"quality_0\", \"quality_2\"]\n\nfor column in columns:\n    train_quality[column].fillna(train_quality[column].mode()[0], inplace=True)","02595704":"# fwver drop\ntrain_quality.dropna(inplace=True)","bbdd348f":"train_quality.info()","1fa2036c":"test_quality.info()","b172b6af":"test_quality[test_quality.isnull().any(axis=1)]","e69911f3":"# fill quality data\n\ncolumns = [\"quality_0\", \"quality_1\", \"quality_2\", \"quality_5\"]\nfor column in columns:\n    # Q. Why train_quality?\n    test_quality[column].fillna(train_quality[column].mode()[0], inplace=True)","a7bb1698":"# drop fwver\ntest_quality.dropna(inplace=True) # <- \uc2dc\uc2a4\ud15c\uc5d0\ub2e4\uac00 fwver\uc744 \ub2e4\uc2dc \uae30\ub85d\ud574\uc11c \ub2ec\ub77c\uace0 \ubc18\ud658\ud558\ub294 \uacfc\uc815.","a78e6fe2":"print(train_err.isnull().sum().sum(), end=\", \")\nprint(test_err.isnull().sum().sum(), end=\", \")\nprint(train_quality.isnull().sum().sum(), end=\", \")\nprint(test_quality.isnull().sum().sum())","c86593bb":"# \uc2dc\uac04 \uc815\ubcf4\ub85c \ubcc0\uacbd\n# \ud544\uc694\ud55c \ud568\uc218 \uc815\uc758\ndef make_datetime(x):\n    # string \ud0c0\uc785\uc758 Time column\uc744 datetime \ud0c0\uc785\uc73c\ub85c \ubcc0\uacbd\n    x     = str(x)\n    year  = int(x[:4])\n    month = int(x[4:6])\n    day   = int(x[6:8])\n    hour  = int(x[8:10])\n    return dt.datetime(year, month, day, hour)\n\ndef string2num(x):\n    # (,)( )\uacfc \uac19\uc740 \ubd88\ud544\uc694\ud55c \ub370\uc774\ud130 \uc815\uc81c\n    x = re.sub(r\"[^0-9]+\", '', str(x))\n    if x =='':\n        return 0\n    else:\n        return int(x)","47969e7a":"train_err.info()","3fcaf5a1":"train_quality.info()","a720bd1b":"# \uc2dc\uac04 \uc815\ubcf4 \uc0dd\uc131\ntrain_err[\"time\"] = train_err.time.apply(make_datetime)\ntrain_quality[\"time\"] = train_quality.time.apply(make_datetime)\n\n# \uc22b\uc790 \ucc98\ub9ac\ncolumns = [\"quality_5\", \"quality_7\", \"quality_8\", \"quality_9\", \"quality_10\"]\nfor column in columns:\n    train_quality[column] = train_quality[column].apply(string2num)","f133d04e":"train_quality","516ea18e":"test_quality.info()","21551290":"# \uc2dc\uac04 \uc815\ubcf4 \uc0dd\uc131\ntest_err[\"time\"] = test_err.time.apply(make_datetime)\ntest_quality[\"time\"] = test_quality.time.apply(make_datetime)\n\n# \uc22b\uc790 \ucc98\ub9ac\ncolumns = [\"quality_1\", \"quality_5\", \"quality_7\", \"quality_8\", \"quality_9\", \"quality_10\"]\nfor column in columns:\n    test_quality[column] = test_quality[column].apply(string2num)","031ca1da":"test_err.info()","e435984d":"test_quality.info()","162e32c8":"train_err.describe()","324fcd7c":"train_quality.describe()","e91b1f94":"test_err.describe()","2c325dcf":"test_quality.describe()","990b2540":"plt.figure(figsize=(8, 8))\nsns.heatmap(train_err.corr(), cmap=\"viridis\")\nplt.show()","59c58c87":"plt.figure(figsize=(8, 8))\nsns.heatmap(train_quality.corr(), cmap=\"viridis\")\nplt.show()","525521f2":"# user array \uc0dd\uc131\nusers = np.array([x for x in range(10000, 10966+1)])","964cfd68":"# label \uc0dd\uc131\ny = np.zeros(len(users))\ny[train_problem.user_id.unique()-10000] = 1\ny","a7a7fdf1":"# train_problem \ub370\uc774\ud130\ub97c train_err \ub370\uc774\ud130\uc640 \ud569\uce58\uae30 \uc704\ud55c \uc804\ucc98\ub9ac.\ntrain_problem.time = train_problem.time.apply(make_datetime)\ntrain_problem[\"label\"] = [1 for x in range(len(train_problem))]\ntrain_problem","e386d550":"train_problem.user_id.nunique()","2926e5bc":"train_temp = pd.merge(train_err, train_problem, on=[\"user_id\", \"time\"], how=\"left\")\ntrain_temp.loc[train_temp.label != 1, \"label\"] = 0\ntrain_temp","dd5e554a":"train_temp[train_temp.isnull().any(axis=1)]","7e558122":"train_temp.info()","5ac33e69":"print(\"Normal : %.4f%%\" % (1- y.mean()))\nprint(\"Report : %.4f%%\" % y.mean())","a3d6ca9d":"# user\ub4e4\uc774 \ud2b9\uc815 errtype\uc744 \uacaa\uc740 \uacbd\uc6b0 \uc815\ubcf4\ub97c \ud655\uc778\nprint(np.sort(train_err.errtype.unique()))","9298c8fc":"# \ud2b9\uc815 \ubaa8\ub378 \ub610\ub294 \ud2b9\uc815 \ud38c\uc6e8\uc5b4\ub97c \uc0ac\uc6a9\ud558\uba74\uc11c report\ub97c \ud588\ub358 \uc720\uc800\ub4e4\uc744 \ud45c\uc2dc\n\n# user_id\uc640 errtype\ub9cc\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130 \uc14b \uc0dd\uc131\n# \ubaa8\ub4e0 \uc77c\uc790\uc5d0 \ub300\ud574\uc11c errtype\ubcc4 \ubc1c\uc0dd \uac74\uc218\ub97c count\n# pandas\uc758 groupby\ub97c \ud65c\uc6a9\ud560 \uacbd\uc6b0 \ud070 \uc5f0\uc0b0 \uc790\uc6d0\uc774 \ud544\uc694.\n# numpy\ub85c placeholder\ub97c \ub9cc\ub4e4\uc5b4 \uad6c\ud604\ud568.\n\nid_error = train_err[['user_id','errtype']].values\nX = np.zeros((len(users), 42))\n\nfor person_idx, err in tqdm(id_error):\n    # person_idx - train_user_id_min \uc704\uce58\uc5d0 person_idx, errtype\uc5d0 \ud574\ub2f9\ud558\ub294 error\uac12\uc744 +1\n    X[person_idx - 10000, err - 1] += 1\nX.shape","6c282904":"## TO-DO\n#train_err.errtype.unique()]\npd.DataFrame(data=X, columns=[f\"Errtype_{col}\" for col in range(1, 43)])","b73010db":"# \ud559\uc2b5 \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uae30 \uc704\ud55c \ub370\uc774\ud130 \uc815\ud569.\n# \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ud560 column\uc744 \uc815\ud558\uace0, \ud559\uc2b5 \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\nprint(X.shape, y.shape)","c06423b3":"import lightgbm as lgb\n\n# Train\n#-------------------------------------------------------------------------------------\n# validation auc score\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574 \uc815\uc758\ndef f_pr_auc(probas_pred, y_true):\n    labels=y_true.get_label()\n    p, r, _ = precision_recall_curve(labels, probas_pred)\n    score=auc(r,p) \n    return \"pr_auc\", score, True\n#-------------------------------------------------------------------------------------\nmodels     = []\nrecalls    = []\nprecisions = []\nauc_scores   = []\nthreshold = 0.5\n# \ud30c\ub77c\ubbf8\ud130 \uc124\uc815\nparams =      {\n                'boosting_type' : 'gbdt',\n                'objective'     : 'binary',\n                'metric'        : 'auc',\n                'seed': 1015\n                }\n#-------------------------------------------------------------------------------------\n# 5 Kfold cross validation\nk_fold = KFold(n_splits=5, shuffle=True, random_state=42)\nfor train_idx, val_idx in k_fold.split(X):\n\n    # split train, validation set\n    X_train = X[train_idx]\n    y_train = y[train_idx]\n    X_val = X[val_idx]\n    y_val = y[val_idx]\n\n    d_train= lgb.Dataset(X_train, y_train)\n    d_val  = lgb.Dataset(X_val, y_val)\n    \n    #run traning\n    model = lgb.train(\n                        params,\n                        train_set       = d_train,\n                        num_boost_round = 1000,\n                        valid_sets      = d_val,\n                        feval           = f_pr_auc,\n                        verbose_eval    = 20, \n                        early_stopping_rounds = 3\n                       )\n    \n    # cal valid prediction\n    valid_prob = model.predict(X_val)\n    valid_pred = np.where(valid_prob > threshold, 1, 0)\n    \n    # cal scores\n    recall    = recall_score(    y_val, valid_pred)\n    precision = precision_score( y_val, valid_pred)\n    auc_score = roc_auc_score(   y_val, valid_prob)\n\n    # append scores\n    models.append(model)\n    recalls.append(recall)\n    precisions.append(precision)\n    auc_scores.append(auc_score)\n\n    print('==========================================================')","180cf495":"from sklearn.metrics import roc_curve, auc\n\n# Compute ROC curve and ROC area for each class\n#fpr = dict()\n#tpr = dict()\nroc_auc = dict()\n# for i in range(2):\n#     fpr[i], tpr[i], _ = roc_curve(y_val[i], valid_prob[i])\n#     roc_auc[i] = auc(fpr[i], tpr[i])\nfpr, tpr, _ = roc_curve(y_val, valid_prob)\nroc_auc = auc(fpr, tpr)\n\nplt.figure(figsize=(8, 8))\nlw = 2\n# plt.plot(fpr[2], tpr[2], color='darkorange',\n#          lw=lw, label='ROC curve (area = %0.2f)' % roc_auc[2])\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","9fffacb4":"test_users = [x for x in range(30000, 30895+1)]\nlen(test_users)","8e4af38f":"test_err","a2012deb":"test_quality","f8060f8f":"id_error = test_err[['user_id','errtype']].values\nX_test = np.zeros((len(test_users),42))\nfor person_idx, err in tqdm(id_error):\n    # person_idx - test_user_id_min \uc704\uce58\uc5d0 person_idx, errtype\uc5d0 \ud574\ub2f9\ud558\ub294 error\uac12\uc744 +1\n    X_test[person_idx - 30000,err - 1] += 1\nX_test = X_test.reshape(X_test.shape[0],-1)\nprint(X_test.shape)","688fa7a5":"# \uc608\uce21\npred_list = []\nfor model in models:\n    pred = model.predict(X_test)\n    pred_list.append(pred.reshape(-1,1))\n    \npred_ensemble = np.mean(pred_list, axis = 0)\n#pred_ensemble","baf5c92e":"submission = pd.read_csv(\"..\/input\/dacon-lg\/sample_submission.csv\")\nsubmission","79fa5067":"submission.drop(submission[~submission.user_id.isin(test_err.user_id)].index, inplace=True)\nsubmission","2400d84b":"submission.problem = pred_ensemble\nsubmission","c0e2c7e8":"submission.to_csv(\"test_submission.csv\", index=False)","d28e9875":"## 7. Feature Engineering\n\n- user\ubcc4 \ubd88\ub9cc \uc81c\uae30 \ud655\ub960\uc744 \uad6c\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0, user\ubcc4 \uc815\ubcf4\ub85c \ubcc0\ud658\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4.\n\n- \uadf8 \ub54c \uc0ac\uc6a9\ub420 \ud2b9\uc9d5\uc744 \ucc3e\uae30 \uc704\ud574, \ub370\uc774\ud130\uc758 \uac01 feature\uc640 \ubd88\ub9cc \uc81c\uae30 \uc0ac\uc774\uc758 \uad00\uacc4\ub97c \ud30c\uc545\ud569\ub2c8\ub2e4.\n\n- \uad00\uacc4\uac00 \uc788\ub2e4\uace0 \uc5ec\uaca8\uc9c0\ub294 \uc815\ubcf4\uac00 \uc788\ub2e4\uba74, feature\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.","113661db":"## 6. \uc0c1\uad00\uad00\uacc4 \ud30c\uc545\ud558\uae30","72c6a7cb":"## 5. \ud1b5\uacc4\ub7c9 \ud655\uc778\ud558\uae30","3eff8ee5":"#### Thank you all !","4d633f92":"- train_quality \uc815\ubcf4\uc640 train_err\uc5d0 \uc788\ub294 \ub2e4\ub978 column\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub824\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c\ud560\uae4c?\n\n- \uc608\ub97c \ub4e4\uc5b4, train_err\uc758 errcode\uc758 \uacbd\uc6b0\ub294 \uc704\uc640 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ubcc0\ud658\ud558\uc5ec (one-hot encoding) \uc0ac\uc6a9 \uac00\ub2a5\ud560\uae4c?\n\n- \uad00\uacc4\ub97c \ud30c\uc545\ud558\uc5ec, \ud30c\uc0dd\ubcc0\uc218\ub97c \uc0dd\uc131\ud574\uc57c \ud55c\ub2e4!","358dfbd4":"- \ub370\uc774\ud130\ub97c \ud569\uce60 \uc218 \uc788\ub294 \uae30\uc900\uc774 \ub418\ub294 column\uc740 user_id\uc640 time\uc785\ub2c8\ub2e4.\n- \ubaa8\ub4e0 \ud14c\uc774\ube14\uc774 \uac19\uc740 column\uc744 \uac00\uc9c0\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n\n- \uac00\uc9c0\uace0 \uc788\ub2e4\uba74 \ub204\ub77d\ub41c \ub370\uc774\ud130\ub294 \uc5c6\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.","f223998a":"#### Quality Data","9d39cd9e":"## 4. \uac04\ub2e8\ud55c \ud53c\ucc98 \uc804\ucc98\ub9ac","d0db559a":"## 3. \uacb0\uce21\uce58 \ud655\uc778 \ubc0f \ucc98\ub9ac\n\n- \ub370\uc774\ud130\uc5d0 \uacb0\uce21\uce58\uac00 \uc5bc\ub9c8\ub098 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n- \ud655\uc778\ud55c \uacb0\uce21\uce58\ub97c \ucc98\ub9ac\ud569\ub2c8\ub2e4.","bd23e1a9":"#### Error Data","d8241e0e":"#### target variable \ud655\uc778","46599bbf":"## 2. \ub370\uc774\ud130 \uc815\ud569\uc131 \ud3c9\uac00","349028a8":"## 8. \ubaa8\ub378 \ud559\uc2b5","bacf1287":"- \ubaa8\ub4e0 \ub370\uc774\ud130\ub4e4\uc774 \uac19\uc740 \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\ub294 column\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4.\n\n- \ud558\uc9c0\ub9cc, error \ub370\uc774\ud130\ub97c 30\ub9cc\uac1c\ub9cc \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud558\ub294 \ub370\uc774\ud130\ub4e4\uc774 \uc788\ub2e4.\n\n- \uc774 \ub370\uc774\ud130\ub4e4\uc744 \ud569\uce60 \ub54c\ub294 \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud558\uae30 \ub54c\ubb38\uc5d0 \ucc98\ub9ac\ud574\uc918\uc57c \ud55c\ub2e4.","2b93c097":"## 1. \ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30\n\n- \uac01 dataset\uc758 \ud06c\uae30\uc640 memory size\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.\n- \uc5b4\ub5a4 column\uc774 \uc788\uace0, \uc5b4\ub5a4 \uac12\ub4e4\uc774 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","7ee1f694":"- \uc6d0\ubcf8 \ub370\uc774\ud130\uc758 \uc0ac\uc774\uc988\ub294 1600\ub9cc\uac1c \uc774\uc0c1\uc774\uc9c0\ub9cc, \uc2e4\uc2b5\uc758 \ud3b8\uc758\uc131\uc744 \uc704\ud574 \ub370\uc774\ud130\ub97c \uc904\uc5ec\uc11c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n- \uc9c0\uae08\ubd80\ud130\ub294 100\ub9cc\uac1c\uc758 \ub370\uc774\ud130\ub9cc \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","d829a06c":"#### target distribution","4462a945":"Reference :\n\n- https:\/\/dacon.io\/competitions\/official\/235687\/overview\/description\n- https:\/\/dacon.io\/competitions\/official\/235687\/codeshare\/2108?page=1&dtype=recent\n- https:\/\/dacon.io\/competitions\/official\/235687\/codeshare\/2422?page=1&dtype=recent\n- https:\/\/dacon.io\/competitions\/official\/235687\/codeshare\/2299?page=1&dtype=recent","d02d3848":"#### test data\ub3c4 \ub3d9\uc77c\ud558\uac8c \ucc98\ub9ac","ca409166":"### column\ubcc4 \ub370\uc774\ud130 \ud655\uc778"}}