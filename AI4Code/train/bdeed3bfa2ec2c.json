{"cell_type":{"e26fd6c4":"code","ccceec41":"code","e7d96d02":"code","1f986368":"code","2dc550e9":"code","7b3b02cd":"code","79345e9e":"code","ad6e6ad5":"code","28c0cbf7":"code","040a8054":"code","e5fa5c6d":"code","f90babac":"code","22a72606":"code","9fb14ad1":"code","23b22687":"code","33404f9b":"code","7108f474":"code","6e38441a":"code","a7bc04b1":"code","8f19eab7":"code","b2d5cd8f":"code","b5776e74":"code","2f813b9b":"code","a342f1ca":"markdown","9b8f66cb":"markdown","f611e498":"markdown","c8ce1462":"markdown","87087a1b":"markdown","298819f8":"markdown","361d00a8":"markdown","0cf3fcff":"markdown","35dcad18":"markdown","b69a2780":"markdown","6cc5ad7e":"markdown","7779a34e":"markdown","ec40feea":"markdown","d8b7bdbc":"markdown","f4545962":"markdown","b0024507":"markdown","2ded8c11":"markdown","4b05d2a8":"markdown","e80d05a2":"markdown","df8cb39d":"markdown","fe01614a":"markdown","0a5b5c24":"markdown","d87aa682":"markdown","a8597d12":"markdown","ae278f8a":"markdown","a8d5e228":"markdown","24542911":"markdown","d87dbf57":"markdown","aee0ab41":"markdown","28371212":"markdown"},"source":{"e26fd6c4":"!pip install plotly","ccceec41":"!pip install chart-studio","e7d96d02":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\nimport chart_studio.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n\n# Load data that we will use.\ntimesData = pd.read_csv(\"..\/input\/world-university-rankings\/timesData.csv\")\ntimesData.head()","1f986368":"# prepare data frame\ndf = timesData.iloc[:10,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.citations,\n                    mode = \"lines\",\n                    name = \"citations\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.university_name)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines+markers\",\n                    name = \"teaching\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.university_name)\ndata = [trace1, trace2]\nlayout = dict(title = 'Citation and Teaching vs World Rank of Top 100 Universities',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","2dc550e9":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:10,:]\ndf2015 = timesData[timesData.year == 2015].iloc[:10,:]\ndf2016 = timesData[timesData.year == 2016].iloc[:10,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2014.world_rank,\n                    y = df2014.citations,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2014.university_name)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.citations,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2015.university_name)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2016.world_rank,\n                    y = df2016.citations,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2016.university_name)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Citation',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","7b3b02cd":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\ndf2014","79345e9e":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.citations,\n                name = \"citations\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.teaching,\n                name = \"teaching\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","ad6e6ad5":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\npie1 = df2016.num_students\npie1_list = [float(each.replace(',', '.')) for each in df2016.num_students]  # str(2,4) => str(2.4) = > float(2.4) = 2.4\nlabels = df2016.university_name\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1_list,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Students Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Universities Number of Students rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 25},\n              \"showarrow\": False,\n              \"text\": \"Number of Students\",\n                \"x\": 0.17,\n                \"y\": 5\n            },\n        ]\n    }\n}\niplot(fig)","28c0cbf7":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:20,:]\nnum_students_size  = [float(each.replace(',', '.')) for each in df2016.num_students]\ninternational_color = [float(each) for each in df2016.international]\ndata = [\n    {\n        'y': df2016.teaching,\n        'x': df2016.world_rank,\n        'mode': 'markers',\n        'marker': {\n            'color': international_color,\n            'size': num_students_size,\n            'showscale': True\n        },\n        \"text\" :  df2016.university_name    \n    }\n]\niplot(data)","040a8054":"# prepare data\nx2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\ntrace1 = go.Histogram(\n    x=x2011,\n    opacity=0.75,\n    name = \"2011\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' students-staff ratio in 2011 and 2012',\n                   xaxis=dict(title='students-staff ratio'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e5fa5c6d":"# data prepararion\nx2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","f90babac":"# data preparation\nx2015 = timesData[timesData.year == 2015]\n\ntrace0 = go.Box(\n    y=x2015.total_score,\n    name = 'total score of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=x2015.research,\n    name = 'research of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","22a72606":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:,[\"research\",\"international\", \"total_score\"]]\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","9fb14ad1":"# first line plot\ntrace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.teaching,\n    name = \"teaching\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"income\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Income and Teaching vs World Rank of Universities'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","23b22687":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    z=dataframe.citations,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","33404f9b":"trace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    name = \"research\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.citations,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"citations\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"income\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.total_score,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"total_score\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Research, citation, income and total score VS World Rank of Universities'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","7108f474":"import pandas as pd\ndf = pd.read_csv( \"https:\/\/raw.githubusercontent.com\/amankharwal\/Website-data\/master\/volcano_db.csv\", encoding=\"iso-8859-1\")\ndf.head()","6e38441a":"#Let\u2019s plot a histogram, which will show us the number of volcanoes in each country:\nimport numpy as np\nimport pandas as pd\ndf = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/amankharwal\/Website-data\/master\/volcano_db.csv\", encoding=\"iso-8859-1\")\nimport plotly.express as px\nfig = px.histogram(df, x=\"Country\")\nfig.show()","a7bc04b1":"#Let\u2019s visualize the data in descending order:\nfig = px.histogram(df, x=\"Country\").update_xaxes(categoryorder=\"total descending\")\nfig.show()","8f19eab7":"#Let\u2019s visualize an interactive pie chart to see the importance of each volcano:\nimport plotly.graph_objects as go\nlabels=df.Status.unique()\nvalues=df['Status'].value_counts()\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.show()","b2d5cd8f":"import plotly.graph_objects as go\nfig = go.Figure(data=go.Scattergeo(\n        lon = df['Longitude'],\n        lat = df['Latitude'],\n        mode = 'markers'\n        ))\nfig.update_layout(\n        title = 'Volcanos',\n        geo_scope='world',\n    )\nfig.show()","b5776e74":"#Let\u2019s plot the same features on an interactive globe:\nfig = go.Figure(data=go.Scattergeo(\n        lon = df['Longitude'],\n        lat = df['Latitude'],\n        mode = 'markers',\n        showlegend=False,\n        marker=dict(color=\"crimson\", size=4, opacity=0.8))\n        )\nfig.update_geos(\n    projection_type=\"orthographic\",\n    landcolor=\"white\",\n    oceancolor=\"MidnightBlue\",\n    showocean=True,\n    lakecolor=\"LightBlue\"\n)\nfig.show()\nprint(\"You can even rotate this globe using your cursor\")","2f813b9b":"#For this I will scrap different dataset which I can use to create an interactive visualization of a volcano:\ndf_v = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/amankharwal\/Website-data\/master\/volcano.csv\")\nfig = go.Figure(data=[go.Surface(z=df_v.values)])\nfig.update_layout(title='Volcano', autosize=False,\n                  width=500, height=500,\n                  margin=dict(l=65, r=50, b=65, t=90))\nfig.show()\nprint(\"You can rotate it at 360 degrees using your cursor\")","a342f1ca":"# Multiple Subplots","9b8f66cb":"# Histogram","f611e498":"<font color='red'>\nFirst Bar Charts Example: citations and teaching of top 3 universities in 2014 (style1)\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        * line = It is dictionary. line between bars\n            * color = line color around bars\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * barmode = bar mode of bars like grouped\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","c8ce1462":"<font color='red'>\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.\n<font color='black'>\n* go.Scatter3d: create 3d scatter plot\n* x,y,z: axis of plots\n* mode: market that is scatter\n* size: marker size\n* color: axis of colorscale\n* colorscale:  actually it is 4th dimension","87087a1b":"# Bubble Plot","298819f8":"# Pie Plot","361d00a8":"<font color='red'>\nScatter Example: Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n    * y axis = it is dictionary and same with x axis\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","0cf3fcff":"<font color='red'>\nPie Charts Example: Students rate of top 7 universities in 2016\n<font color='black'>\n* fig: create figures\n    * data: plot type\n        * values: values of plot\n        * labels: labels of plot\n        * name: name of plots\n        * hoverinfo: information in hover\n        * hole: hole width\n        * type: plot type like pie\n    * layout: layout of plot\n        * title: title of layout\n        * annotations: font, showarrow, text, x, y","35dcad18":"# 3D Scatter Plot","b69a2780":"# Word Cloud","6cc5ad7e":"### Line Charts Example: Citation and Teaching vs World Rank of Top 100 Universities\n\n<font color='red'>\nLine Charts Example: Citation and Teaching vs World Rank of Top 100 Universities\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","7779a34e":"<font color='red'>\nLets look at histogram of students-staff ratio in 2011 and 2012 years. \n    <font color='black'>\n* trace1 = first histogram\n    * x = x axis\n    * y = y axis\n    * opacity = opacity of histogram\n    * name = name of legend\n    * marker = color of histogram\n* trace2 = second histogram\n* layout = layout \n    * barmode = mode of histogram like overlay. Also you can change it with *stack*","ec40feea":"# Scatter Plot Matrix","d8b7bdbc":"# Bar Plot","f4545962":"## As you can see, by making visualization more interactive it helps in getting more ideas as you can manipulate on the plot using a cursor. It helps in getting more insights by writing less code. I hope you liked this kernel on Data Visualisation with Plotly. ","b0024507":"<font color='red'>\n* Box Plots\n    * Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n        * 25th percentile = quartile 1 (Q1) that is lower quartile\n        * 75th percentile = quartile 3 (Q3) that is higher quartile\n        * height of box = IQR = interquartile range = Q3-Q1\n        * Whiskers = 1.5 * IQR from the Q1 and Q3\n        * Outliers = being more than 1.5*IQR away from median commonly.\n        \n    <font color='black'>\n    * trace = box\n        * y = data we want to visualize with box plot \n        * marker = color","2ded8c11":"# Advance Level Data Visualization using Plotly\n#### Now, let\u2019s do something more advanced, by creating an interactive volcano using data visualization techniques.","4b05d2a8":"## Interactive Geographical Data Visualisation with Plotly\n#### You will find there are two features, longitude and latitude, which will allow you to visualize the geographical location of volcanoes","e80d05a2":"<font color='red'>\nInset Matrix = 2 plots are in one frame\n<font color='black'>","df8cb39d":"<font color='red'>\nBubble Charts Example: University world rank (first 20) vs teaching score with number of students(size) and international score (color) in 2016\n<font color='black'>\n* x = x axis\n* y = y axis\n* mode = markers(scatter)\n*  marker = marker properties\n    * color = third dimension of plot. Internaltional score\n    * size = fourth dimension of plot. Number of students\n* text: university names","fe01614a":"# Box Plot","0a5b5c24":"# Scatter Plot","d87aa682":"# \ud83d\udcca Data Visualization with Plotly \ud83d\udcc8\n## Data Visualisation plays a major role to study and analyse data to extract useful insights that can add value to our end task. Python being a universal language provides a lot of libraries for almost every task you have ever heard of. The most common libraries for data visualization in Python are Matplotlib and Plotly. Matplotlib provides a simple user experience for data visualization. But Plotly provides an interactive data visualization in Python.","a8597d12":"<font color='red'>\nScatter Matrix = it helps us to see covariance and relation between more than 2 features\n<font color='black'>\n* import figure factory as ff\n* create_scatterplotmatrix = creates scatter plot\n    * data2015 = prepared data. It includes research, international and total scores with index from 1 to 401\n    * colormap = color map of scatter plot\n    * colormap_type = color type of scatter plot\n    * height and weight","ae278f8a":"<font color='red'>\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.\n<font color='black'>\n","a8d5e228":"# Inset Plot","24542911":"# Line Plot","d87dbf57":"# Animation Plot","aee0ab41":"Not a pyplot but learning it is good for visualization. Lets look at which country is mentioned most in 2011.\n* WordCloud = word cloud library that I import at the beginning of kernel\n    * background_color = color of back ground\n    * generate = generates the country name list(x2011) a word cloud","28371212":"#### As you can see the dataset is based on the information of volcanoes. The first insights we might be interested in to look should be the number of volcanoes we have in each country. "}}