{"cell_type":{"037b4157":"code","213f935b":"code","4b58e41b":"code","51c8f396":"code","c96866e1":"code","9b249d9e":"code","969e9530":"code","dca76165":"code","7080775f":"code","3addaaf8":"code","284d312f":"code","91e12621":"code","26e70fce":"code","c8683361":"code","62502c6b":"code","c134526a":"code","62f36db4":"code","eb6d1e24":"code","4925add1":"code","3b778953":"code","6d7f000b":"code","8f9283a4":"code","659381aa":"code","3edeab30":"markdown","9f218898":"markdown","072fdae5":"markdown","f0b53fc5":"markdown","eb6d7afe":"markdown","31db20f3":"markdown","98226a6a":"markdown","8d1d2841":"markdown","ca721037":"markdown","c7012adb":"markdown","f45d98ba":"markdown","26c754ba":"markdown","67aa07a6":"markdown","a7056b39":"markdown","2b09fdc7":"markdown","34cccf8c":"markdown","738ba13d":"markdown","6c9c5e0a":"markdown","70539568":"markdown","668f4b44":"markdown","19d3b5a4":"markdown","9165e8ec":"markdown"},"source":{"037b4157":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport IPython.display as ipd\nimport librosa\nimport librosa.display\nimport os\nfrom tqdm import tqdm\nimport sklearn\nimport seaborn as sns\nimport plotly.express as px\n\n\nimport geopandas as gpd\nfrom shapely.geometry import Point, Polygon","213f935b":"filename = '..\/input\/birdclef-2021\/train_short_audio\/annhum\/XC151103.ogg'","4b58e41b":"plt.figure(figsize=(18, 5))\n\n# by default librosa.load returns a sample rate of 22050\n# librosa converts input to mono, hence always \ndata, sample_rate = librosa.load(filename)\nlibrosa.display.waveplot(data, sr=sample_rate)\nprint(\"Sample Rate: \", sample_rate)\nipd.Audio(filename)","51c8f396":"plt.figure(figsize=(18, 5))\nX = librosa.stft(data)\nXdb = librosa.amplitude_to_db(abs(X))\nlibrosa.display.specshow(Xdb, sr=sample_rate, x_axis='time', y_axis='hz')\nplt.colorbar()","c96866e1":"plt.figure(figsize=(18, 5))\nlibrosa.display.specshow(Xdb, sr=sample_rate, x_axis='time', y_axis='log')\nplt.colorbar()","9b249d9e":"spectral_centroids = librosa.feature.spectral_centroid(data, sr=sample_rate)[0]\nplt.figure(figsize=(25, 9))\nframes = range(len(spectral_centroids))\nt = librosa.frames_to_time(frames)\n\n# Normalising the spectral centroid for visualisation\ndef normalize(x, axis=0):\n    return sklearn.preprocessing.minmax_scale(x, axis=axis)\n\n#Plotting the Spectral Centroid along the waveform\nlibrosa.display.waveplot(data, sr=sample_rate, alpha=0.4)\nplt.plot(t, normalize(spectral_centroids), color='b')","969e9530":"plt.figure(figsize=(25, 9))\nspectral_rolloff = librosa.feature.spectral_rolloff(data+0.01, sr=sample_rate)[0]\nlibrosa.display.waveplot(data, sr=sample_rate, alpha=0.4)\nplt.plot(t, normalize(spectral_rolloff), color='r')","dca76165":"spectral_bandwidth_2 = librosa.feature.spectral_bandwidth(data+0.01, sr=sample_rate)[0]\nspectral_bandwidth_3 = librosa.feature.spectral_bandwidth(data+0.01, sr=sample_rate, p=3)[0]\nspectral_bandwidth_4 = librosa.feature.spectral_bandwidth(data+0.01, sr=sample_rate, p=4)[0]\nplt.figure(figsize=(25, 9))\nlibrosa.display.waveplot(data, sr=sample_rate, alpha=0.4)\nplt.plot(t, normalize(spectral_bandwidth_2), color='r')\nplt.plot(t, normalize(spectral_bandwidth_3), color='g')\nplt.plot(t, normalize(spectral_bandwidth_4), color='y')\nplt.legend(('p = 2', 'p = 3', 'p = 4'))  # p: order of spectral bandwidth","7080775f":"#Plot the signal:\nplt.figure(figsize=(25, 9))\n# librosa.display.waveplot(data, sr=sample_rate)\n# Zooming in\nn0 = 9000\nn1 = 9100\n\nplt.plot(data[n0:n1])\nplt.grid()","3addaaf8":"zero_crossings = librosa.zero_crossings(data[n0:n1], pad=False)\nprint(sum(zero_crossings)) #57","284d312f":"mfccs = librosa.feature.mfcc(data, sr=sample_rate)\n\n#Displaying  the MFCCs:\nplt.figure(figsize=(15, 7))\nlibrosa.display.specshow(mfccs, sr=sample_rate, x_axis='time')\nplt.colorbar()","91e12621":"hop_length=512\nchromagram = librosa.feature.chroma_stft(data, sr=sample_rate, hop_length=hop_length)\nplt.figure(figsize=(20, 8))\nlibrosa.display.specshow(chromagram, x_axis='time', y_axis='chroma', hop_length=hop_length, cmap='coolwarm')\nplt.colorbar()","26e70fce":"path = '..\/input\/birdclef-2021\/'\ntrain_metadata = pd.read_csv(path + 'train_metadata.csv',)\ntrain_csv = pd.read_csv(path + \"train_soundscape_labels.csv\")\ntest_csv = pd.read_csv(path + \"test.csv\")\nsample_sub= pd.read_csv(path + \"sample_submission.csv\")\n","c8683361":"train_metadata.head()","62502c6b":"print(\"There are total {} species\".format(train_metadata['primary_label'].nunique()))","c134526a":"def plotbar(series, pal):\n    plt.figure(figsize=(20, 9))\n    chart = sns.barplot(x=series.index, y=series.values, edgecolor=(0,0,0), linewidth=2, palette=(pal))\n    chart.set_xticklabels(chart.get_xticklabels(), rotation=45)","62f36db4":"species = train_metadata['primary_label'].value_counts()[:25]\nplotbar(species, \"Blues_r\") # series, palette","eb6d1e24":"sns.set(rc={'figure.figsize':(20,6)})\nsns.countplot(x='rating', data=train_metadata, edgecolor=(0,0,0), linewidth=2, palette=('cubehelix'))\n","4925add1":"authors = train_metadata['author'].value_counts()[:10]\nplotbar(authors, \"YlOrBr_r\") # series, palette","3b778953":"print(\"Common Name\")\ncommon = train_metadata['common_name'].value_counts()[:25]\nplotbar(authors, \"light:b_r\") # series, palette","6d7f000b":"print(\"Scientific Name\")\nscien = train_metadata['scientific_name'].value_counts()[:25]\nplotbar(scien, \"Greens_r\") # series, palette","8f9283a4":"# SHP file\nworld_map = gpd.read_file(\"..\/input\/world-countries-shp-file\/TM_WORLD_BORDERS-0.3.shp\")\ncrs={'init': 'epsg:4326'}\ngeometry = [Point(xy) for xy in zip(train_metadata[\"longitude\"], train_metadata['latitude'])]\n\ngeo_df = gpd.GeoDataFrame(train_metadata, crs=crs, geometry=geometry)\n\n# top 15 most species\nspecies_list = species.reset_index()['index'].values[:15]\n\nspecies_id = geo_df[\"primary_label\"].value_counts().reset_index()\nspecies_id.insert(0, 'ID', range(0, 0 + len(species_id)))\n\nspecies_id.columns = [\"ID\", \"primary_label\", \"count\"]\n\n# Add ID to geo_df\ngeo_df = pd.merge(geo_df, species_id, how=\"left\", on=\"primary_label\")\n\n\nfig, ax = plt.subplots(figsize=(25, 15))\nworld_map.plot(ax=ax, alpha=0.7)\n\npalette = iter(sns.hls_palette(len(species_list), h=.5))\nfor i in range(len(species_list)):\n    geo_df[geo_df[\"ID\"] == i].plot(ax=ax, \n                                   markersize=20, \n                                   color=next(palette), \n                                   marker=\"o\", \n                                   label = species_id['primary_label'].values[i])\n    \nax.legend()\n","659381aa":"# SHP file\nworld_map = gpd.read_file(\"..\/input\/world-countries-shp-file\/TM_WORLD_BORDERS-0.3.shp\")\ncrs={'init': 'epsg:4326'}\ngeometry = [Point(xy) for xy in zip(train_metadata[\"longitude\"], train_metadata['latitude'])]\n\ngeo_df = gpd.GeoDataFrame(train_metadata, crs=crs, geometry=geometry)\n\n# top 15 most species\nspecies_list = species.reset_index()['index'].values[:25]\n\nspecies_id = geo_df[\"primary_label\"].value_counts().reset_index()\nspecies_id.insert(0, 'ID', range(0, 0 + len(species_id)))\n\nspecies_id.columns = [\"ID\", \"primary_label\", \"count\"]\n\n# Add ID to geo_df\ngeo_df = pd.merge(geo_df, species_id, how=\"left\", on=\"primary_label\")\n\n\nfig, ax = plt.subplots(figsize=(25, 15))\nworld_map.boundary.plot(ax=ax, alpha=0.7)\n\npalette = iter(sns.hls_palette(len(species_list), h=.5))\nfor i in range(len(species_list)):\n    geo_df[geo_df[\"ID\"] == i].plot(ax=ax, \n                                   markersize=20, \n                                   color=next(palette), \n                                   \n                                   label = species_id['primary_label'].values[i])\n    \nax.legend()","3edeab30":"## Feature Extraction","9f218898":"## EDA for Audio ","072fdae5":"## To be continued .. .  .","f0b53fc5":"Recordings are very few from India (and other asian countries). Mostly recordings are from Europe and America","eb6d7afe":"## Plot on Map\n*References:* [Blog](https:\/\/towardsdatascience.com\/geopandas-101-plot-any-data-with-a-latitude-and-longitude-on-a-map-98e01944b972)","31db20f3":"## EDA for data","98226a6a":"## Spectrogram\nA spectrogram is a visual way of representing the signmal strength, or **\"loudness\"** of a signal over time at various frequencies present in a particular waveform.","8d1d2841":"Top 25 species\n","ca721037":"Top 25 training samples per species","c7012adb":"From above it is clear that there are only few files with low ratings","f45d98ba":"### 5. Mel-Frequency Cepstral Coefficients (MFCCs)\nThe Mel frequency cepstral coefficients (MFCCs) of a signal are a small set of features (usually about 10\u201320) which concisely describe the overall shape of a spectral envelope. ","26c754ba":"### 3. Spectral bandwidth\nThe spectral bandwidth is defined as the width of the band of light at one-half the peak maximum (or full width at half maximum [FWHM]) and is represented by the two vertical red lines and \u03bbSB on the wavelength axis.\n\n","67aa07a6":"### Visualizing Audio","a7056b39":"### 2. Spectral Rolloff\nIt is a measure of the shape of the signal. It represents the frequency at which high frequencies decline to 0.","2b09fdc7":"## Important imports","34cccf8c":"### 6. Chrome features\nA chroma feature or vector is typically a 12-element feature vector indicating how much energy of each pitch class, {C, C#, D, D#, E, \u2026, B}, is present in the signal. ","738ba13d":"Richard E. Webster is author having maximum file entries.","6c9c5e0a":"There are 57 zero crossing. Below if the code to verify it with librosa","70539568":"*References:* I've used [this](https:\/\/www.kdnuggets.com\/2020\/02\/audio-data-analysis-deep-learning-python-part-1.html) blog for EDA.","668f4b44":"### 1. Spectral Centroid\nThe spectral centroid indicates at which frequency the energy of a spectrum is centered upon or in other words It indicates where the \u201d center of mass\u201d for a sound is located. This is like a weighted mean:\n    ![image.png](attachment:image.png)\n    where S(k) is the spectral magnitude at frequency bin k, f(k) is the frequency at bin k.","19d3b5a4":"### 4. Zero-Crosing Rate\nA very simple way for measuring the smoothness of a signal is to calculate the number of zero-crossing within a segment of that signal. A voice signal oscillates slowly \u2014 for example, a 100 Hz signal will cross zero 100 per second \u2014 whereas an unvoiced fricative can have 3000 zero crossings per second.\n\n![image.png](attachment:image.png)","9165e8ec":"Converting frequency axis into log scale"}}