{"cell_type":{"c6967584":"code","ca800ebc":"code","c763c01d":"code","8f4c459d":"code","559b2241":"code","e12f5d0d":"code","a9474a54":"code","866c9597":"code","4a421bec":"code","e214094a":"code","5b5ba9ae":"code","e10c9948":"code","ca17a5f0":"code","0c98d658":"code","d83f30bb":"code","94c0a92a":"code","07a84fe3":"markdown"},"source":{"c6967584":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\nfrom tqdm import tqdm_notebook as tqdm\nimport scipy\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nfrom IPython.display import clear_output\n\n\nimport keras\nfrom keras.applications import VGG16, DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nfrom keras import layers\n\n\nprint(os.listdir('..\/input\/'))\n%matplotlib inline\n","ca800ebc":"train_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')\ntest_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/test.csv')\nprint(train_df.shape)\nprint(test_df.shape)\ntrain_df.head()","c763c01d":"def preprocess_image(image_path, desired_size=300):\n    im = cv2.imread(image_path)\n    im = cv2.cvtColor(im,cv2.COLOR_BGR2RGB)\n    im = cv2.resize(im, (desired_size, desired_size))\n    im = cv2.addWeighted(im, 4, cv2.blur(im, ksize=(10,10)), -4, 128)\n    return im","8f4c459d":"N = train_df.shape[0]\nx_train = np.empty((N, 300, 300, 3), dtype=np.uint8)\n\nfor i, image_id in enumerate(tqdm(train_df['id_code'])):\n    x_train[i, :, :, :] = preprocess_image(\n        f'..\/input\/aptos2019-blindness-detection\/train_images\/{image_id}.png'\n    )","559b2241":"N = test_df.shape[0]\nx_test = np.empty((N, 300, 300, 3), dtype=np.uint8)\n\nfor i, image_id in enumerate(tqdm(test_df['id_code'])):\n    x_test[i, :, :, :] = preprocess_image(\n        f'..\/input\/aptos2019-blindness-detection\/test_images\/{image_id}.png'\n    )","e12f5d0d":"y_train = pd.get_dummies(train_df['diagnosis']).values\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\n\nplt.imshow(x_train[0])","a9474a54":"y_train_multi = np.empty(y_train.shape, dtype=y_train.dtype)\ny_train_multi[:, 4] = y_train[:, 4]\n\nfor i in range(3, -1, -1):\n    y_train_multi[:, i] = np.logical_or(y_train[:, i], y_train_multi[:, i+1])\n\nprint(\"Original y_train:\", y_train.sum(axis=0))\nprint(\"Multilabel version:\", y_train_multi.sum(axis=0))","866c9597":"x_train, x_val, y_train, y_val = train_test_split(\n    x_train, y_train, \n    test_size=0.15, \n    random_state=2019\n)","4a421bec":"BATCH_SIZE = 32\n\ndef create_datagen():\n    return ImageDataGenerator(\n        zoom_range=0.10,  # set range for random zoom\n        # set mode for filling points outside the input boundaries\n        fill_mode='constant',\n        cval=0.,  # value used for fill_mode = \"constant\"\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=True,  # randomly flip images\n    )\n\n# Using original generator\ndata_generator = create_datagen().flow(x_train, y_train, batch_size=BATCH_SIZE)","e214094a":"class Metrics(Callback):\n    def on_train_begin(self, logs={}):\n        self.val_kappas = []\n\n    def on_epoch_end(self, epoch, logs={}):\n        X_val, y_val = self.validation_data[:2]\n        y_pred = self.model.predict(X_val)\n\n        _val_kappa = cohen_kappa_score(\n            y_val.argmax(axis=1), \n            y_pred.argmax(axis=1), \n            weights='quadratic'\n        )\n\n        self.val_kappas.append(_val_kappa)\n\n        print(f\"val_kappa: {_val_kappa:.4f}\")\n\n        return","5b5ba9ae":"vgg = VGG16(\n    weights='..\/input\/vgg16imagenetnotop\/vgg16-notop.h5',\n    include_top=False,\n    input_shape=(300, 300, 3)\n)","e10c9948":"def build_model():\n    model = Sequential()\n    model.add(vgg)\n    model.add(layers.GlobalAveragePooling2D())\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(5, activation='softmax'))\n    \n    model.compile(\n        loss='categorical_crossentropy',\n        optimizer=Adam(lr=0.00005),\n        metrics=['accuracy']\n    )\n    return model","ca17a5f0":"model = build_model()\nmodel.summary()","0c98d658":"class PlotLosses(keras.callbacks.Callback):\n    def on_train_begin(self, logs={}):\n        self.i = 0\n        self.x = []\n        self.losses = []\n        self.val_losses = []\n        \n        self.fig = plt.figure()\n        \n        self.logs = []\n\n    def on_epoch_end(self, epoch, logs={}):\n        \n        self.logs.append(logs)\n        self.x.append(self.i)\n        self.losses.append(logs.get('loss'))\n        self.val_losses.append(logs.get('val_loss'))\n        self.i += 1\n        \n        clear_output(wait=True)\n        plt.plot(self.x, self.losses, label=\"loss\")\n        plt.plot(self.x, self.val_losses, label=\"val_loss\")\n        plt.legend()\n        plt.show();\n        \nplot_losses = PlotLosses()","d83f30bb":"kappa_metrics = Metrics()\n\ncheckpoint = ModelCheckpoint(\n    'model.h5', \n    monitor='val_loss', \n    verbose=0, \n    save_best_only=True, \n    save_weights_only=False,\n    mode='auto'\n)\n\nhistory = model.fit_generator(\n    data_generator,\n    steps_per_epoch=x_train.shape[0] \/ BATCH_SIZE,\n    epochs=50,\n    validation_data=(x_val, y_val),\n    callbacks=[checkpoint, kappa_metrics, plot_losses]\n)","94c0a92a":"model.load_weights('model.h5')\ny_test = model.predict(x_test, verbose=2)\n\ntest_df['diagnosis'] = y_test.argmax(axis=1)\nprint(test_df.shape)\n\ntest_df.to_csv('submission.csv',index=False)\n","07a84fe3":"ALOT of copying from https:\/\/www.kaggle.com\/xhlulu\/aptos-2019-densenet-keras-starter\nImage preprocessing inspired by http:\/\/blog.kaggle.com\/2015\/09\/09\/diabetic-retinopathy-winners-interview-1st-place-ben-graham\/\n"}}