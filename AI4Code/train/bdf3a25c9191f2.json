{"cell_type":{"e8423e4b":"code","f091db47":"code","d775aad1":"code","5ff50abb":"code","2d5ecb14":"code","da1e7827":"code","3914c34e":"code","d991f81e":"code","419b21c1":"code","adc4e6bb":"code","3bcfa589":"code","3f747e1b":"code","cf1568b9":"code","9dfed453":"code","aa6e3d06":"code","c26beab5":"code","97edc374":"code","8051caeb":"code","f8a64f87":"code","9a3fd3cb":"markdown","3af90022":"markdown","2bf4bd29":"markdown","b358f047":"markdown","c04d95ad":"markdown"},"source":{"e8423e4b":"#import libraries\nimport pickle\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import csr_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold\nfrom scipy.sparse import hstack, vstack\n\nfrom __future__ import division, print_function\n# ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","f091db47":"#column names for sites and time features\nsite_columns = ['site' + str(i) for i in range(1,11)]\ntime_columns = ['time' + str(i) for i in range(1,11)]","d775aad1":"#load train, test data and site dict\ntrain_df = pd.read_csv('..\/input\/train_sessions.csv',\n                       index_col='session_id')\ntest_df = pd.read_csv('..\/input\/test_sessions.csv',\n                      index_col='session_id')\n\ntrain_test_df = pd.concat([train_df, test_df])\ntrain_test_df[site_columns] = train_test_df[site_columns].fillna(0)\n\nwith open('..\/input\/site_dic.pkl', 'rb') as f:\n    site_dict = pickle.load(f)","5ff50abb":"#function for count-encoding for sites, creating sparse matrix\ndef to_sparse_matrix(X, site_dict):\n    M = max(site_dict.values())\n    row_ind = []\n    col_ind = []\n    data = []\n    i, j = 0, 0\n    for line in X.values:\n        for e in line:\n            if e != 0:\n                data.append(1)\n                row_ind.append(i)\n                col_ind.append(e-1)\n        i += 1\n    return csr_matrix((data, (row_ind, col_ind)), shape=(i, M))","2d5ecb14":"#do encoding\ntrain_test_sparse = to_sparse_matrix(train_test_df[site_columns], site_dict)\ntrain_test_sparse.shape","da1e7827":"X_sparse_train = train_test_sparse[:train_df.shape[0]]\nX_sparse_test = train_test_sparse[train_df.shape[0]:]\ny_train = train_df.target","3914c34e":"#stratification for cross-validation\nskf = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\nlogit = LogisticRegression(n_jobs=-1, random_state=42)\n\nscore = cross_val_score(estimator=logit, X=X_sparse_train, y=y_train, cv=skf, scoring='roc_auc').mean()\nprint('ROC AUC score: ', round(score, 4))","d991f81e":"facebook_ids = []\nyoutube_ids = []\n\nfor key in list(site_dict.keys()):\n    if 'facebook' in key:\n        facebook_ids.append(site_dict[key])\n    if 'youtube' in key:\n        youtube_ids.append(site_dict[key])\nprint(youtube_ids)","419b21c1":"def is_site(x, l):\n    if x in l:\n      return 1 \n    return 0\n\ndef is_long_session(x):\n    if x < 3:\n        return 0\n    elif x < 5:\n        return 1\n    elif x < 10:\n        return 2\n    elif x < 30:\n        return 3\n    elif x < 40:\n        return 4\n    return 5","adc4e6bb":"X_add = train_test_df[['time1']]\nX_add['time1'] = train_test_df[['time1']].apply(pd.to_datetime)\nX_add['time10'] = train_test_df[['time10']].fillna('2014-02-20 10:02:45').apply(pd.to_datetime)\n\nX_add['start day'] = X_add['time1'].apply(pd.datetime.weekday)\nX_add['start hour'] = X_add['time1'].apply(pd.to_datetime).apply(lambda x: x.hour)\nX_add['start month'] = X_add['time1'].apply(lambda x: x.month)\n\nX_add['stop day'] = X_add['time10'].apply(pd.datetime.weekday)\nX_add['stop hour'] = X_add['time10'].apply(pd.to_datetime).apply(lambda x: x.hour)\nX_add['stop month'] = X_add['time10'].apply(lambda x: x.month)\n\nX_add['yb start'] = train_test_df['site1'].apply(lambda x: is_site(x, youtube_ids))\nX_add['fb start'] = train_test_df['site1'].apply(lambda x: is_site(x, facebook_ids))\n\nX_add['yb end'] = train_test_df['site10'].apply(lambda x: is_site(x, youtube_ids))\nX_add['fb end'] = train_test_df['site10'].apply(lambda x: is_site(x, facebook_ids))\n\nX_add['duration'] = (X_add['time10'] - X_add['time1']).astype(int).apply(lambda x: x\/10e8)\n\nX_add = X_add.drop(columns=['time1', 'time10'])\n\nX_add['duration'] = X_add['duration'].apply(is_long_session).astype(int)","3bcfa589":"#dummy encoding for additional features\nX_add = pd.get_dummies(X_add, columns=X_add.columns)","3f747e1b":"X_add.columns","cf1568b9":"#merge sets of features\nX_train = hstack([X_sparse_train, X_add[:train_df.shape[0]]])\nX_test = hstack([X_sparse_test, X_add[train_df.shape[0]:]])","9dfed453":"logit = LogisticRegression(n_jobs=-1, random_state=42)","aa6e3d06":"#cross-val score\nscore = cross_val_score(estimator=logit, X=X_train, y=y_train, cv=skf, scoring='roc_auc').mean()\nprint('ROC AUC score: ', round(score, 4))","c26beab5":"def write_to_submission_file(predicted_labels, out_file,\n                             target='target', index_label=\"session_id\"):\n    # turn predictions into data frame and save as csv file\n    predicted_df = pd.DataFrame(predicted_labels,\n                                index = np.arange(1, predicted_labels.shape[0] + 1),\n                                columns=[target])\n    predicted_df.to_csv(out_file, index_label=index_label)","97edc374":"logit.fit(X_train, y_train)\ny_pred = logit.predict_proba(X_test)","8051caeb":"y_pred[:, 1]","f8a64f87":"write_to_submission_file(y_pred[:, 1], 'submission.csv')","9a3fd3cb":"# Create additional time and site features:","3af90022":"# Cross-validation for site features and LogisticRegression:","2bf4bd29":"#start day - day of week when session starts\n#start hour - hour when session starts\n#start month - month when session starts\n\n#stop day - see above\n#stop hour - see above\n#stop month - see above\n\n#yb start - indicate if session starts with youtube\n#yb stop - indicate if session stops with youtube\n#fb start - indicate if session starts with facebook\n#fb stop - indicate if session stops with facebook\n\n#duration - how long does session last","b358f047":"# Additional features and Logit","c04d95ad":"# Cross-validation with site and additional features, Logistic Regression:"}}