{"cell_type":{"7bc63c94":"code","a9834fcd":"code","e8b7bcca":"code","dea46d72":"code","e3002530":"code","94d243ca":"code","39d02787":"code","6e8c52ff":"code","6f5eebcc":"code","24b08585":"code","5f733343":"code","c9f97461":"code","1827e0a4":"code","02746dfd":"code","ed92f4ec":"code","f06a77ba":"code","64beb59c":"code","696ba9de":"code","6d996718":"code","7b843763":"code","430546e4":"markdown","806d1fe8":"markdown","cb952ba3":"markdown","d6782afa":"markdown","40747a78":"markdown","e0c6d8ad":"markdown"},"source":{"7bc63c94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9834fcd":"from lightgbm import LGBMRegressor as lgb\n\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e8b7bcca":"sample_submission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv\")","dea46d72":"sample_submission","e3002530":"sample_submission.info()","94d243ca":"train","39d02787":"train.info()","6e8c52ff":"test","6f5eebcc":"test.info()","24b08585":"train['date_time_2'] = pd.to_datetime(train['date_time'])\ntrain['hour'] = train['date_time_2'].dt.hour\ntest['date_time_2'] = pd.to_datetime(test['date_time'])\ntest['hour'] = test['date_time_2'].dt.hour","5f733343":"sns.catplot(x=\"hour\", y=\"target_carbon_monoxide\", data=train, kind=\"violin\")\nplt.show()\nsns.catplot(x=\"hour\", y=\"target_benzene\", data=train, kind=\"violin\")\nplt.show()\nsns.catplot(x=\"hour\", y=\"target_nitrogen_oxides\", data=train, kind=\"violin\")\nplt.show()","c9f97461":"# Concat train and test\nall = pd.concat([train,test],ignore_index=True)\n\n# Scaling\ndeg_C = all['deg_C']\ndeg_C = np.array(deg_C)\nall['deg_C_2'] = preprocessing.minmax_scale(deg_C[:])\nrelative_humidity = all['relative_humidity']\nrelative_humidity = np.array(relative_humidity)\nall['relative_humidity_2'] = preprocessing.minmax_scale(relative_humidity[:])\nabsolute_humidity = all['absolute_humidity']\nabsolute_humidity = np.array(absolute_humidity)\nall['absolute_humidity_2'] = preprocessing.minmax_scale(absolute_humidity[:])\nsensor_1 = all['sensor_1']\nsensor_1 = np.array(sensor_1)\nall['sensor_1_2'] = preprocessing.minmax_scale(sensor_1[:])\nsensor_2 = all['sensor_2']\nsensor_2 = np.array(sensor_2)\nall['sensor_2_2'] = preprocessing.minmax_scale(sensor_2[:])\nsensor_3 = all['sensor_3']\nsensor_3 = np.array(sensor_3)\nall['sensor_3_2'] = preprocessing.minmax_scale(sensor_3[:])\nsensor_4 = all['sensor_4']\nsensor_4 = np.array(sensor_4)\nall['sensor_4_2'] = preprocessing.minmax_scale(sensor_4[:])\nsensor_5 = all['sensor_5']\nsensor_5 = np.array(sensor_5)\nall['sensor_5_2'] = preprocessing.minmax_scale(sensor_5[:])\n\n# Split all for train and test\ntrain_scale = all.iloc[train.index[0]:train.index[-1]+1].drop(columns=[\"deg_C\", \"relative_humidity\", \"absolute_humidity\", \"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\"])\ntest_scale = all.iloc[train.index[-1]+1:].drop(columns=[\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\", \"deg_C\", \"relative_humidity\", \"absolute_humidity\", \"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\"])\ntest_scale = pd.DataFrame.reset_index(test_scale).drop(columns=[\"index\"])","1827e0a4":"train_scale","02746dfd":"test_scale","ed92f4ec":"corr = train_scale.corr()\nplt.figure(figsize=(20,10))\nsns.heatmap(corr, vmin=-1, vmax=1, center=0, square=False, annot=True, cmap='coolwarm')\nplt.show()","f06a77ba":"columns = test_scale.columns.drop(['date_time', 'date_time_2'])\ncolumns","64beb59c":"X = train_scale[columns].values\nX_test = test_scale[columns].values\nvalue_1 = train_scale['target_carbon_monoxide'].values.reshape(-1,1)\nvalue_2 = train_scale['target_benzene'].values.reshape(-1,1)\nvalue_3 = train_scale['target_nitrogen_oxides'].values.reshape(-1,1)","696ba9de":"model_1 = lgb()\nmodel_1.fit(X, value_1)\nmodel_2 = lgb()\nmodel_2.fit(X, value_2)\nmodel_3 = lgb()\nmodel_3.fit(X, value_3)","6d996718":"sample_submission['target_carbon_monoxide'] = model_1.predict(X_test)\nsample_submission['target_benzene'] = model_2.predict(X_test)\nsample_submission['target_nitrogen_oxides'] = model_3.predict(X_test)\n\nsample_submission","7b843763":"sample_submission.to_csv('submission.csv', index=False)","430546e4":"# 2. EDA","806d1fe8":"# 1. Import data","cb952ba3":"# 3. Preprosessing","d6782afa":"# 4. Modeling","40747a78":"# 5. Prediction","e0c6d8ad":"# 6. Make submission file"}}