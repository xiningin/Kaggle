{"cell_type":{"511b6c83":"code","0f5183d6":"code","c69a568b":"code","f6a3b5c0":"code","4e19ca92":"code","48ea3258":"code","ef112b88":"code","dd14e8c4":"code","b1f93c4c":"code","47b0cb4a":"code","159f2b6e":"code","a11b8e52":"code","56dd673e":"code","d780b825":"code","fae36779":"code","7743fa21":"code","6978399f":"code","992be1c4":"code","fc691fad":"code","51a22390":"code","47c9cfa6":"code","949409b4":"code","73e0b44b":"code","a7a7c049":"markdown","cebc8791":"markdown","6d03e29e":"markdown"},"source":{"511b6c83":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.svm import SVC\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import RocCurveDisplay","0f5183d6":"df=pd.read_csv('\/kaggle\/input\/health-care-data-set-on-heart-attack-possibility\/heart.csv')\ndf.head()","c69a568b":"df2=df.copy()","f6a3b5c0":"df.info()","4e19ca92":"train_dict=pd.DataFrame(df.dtypes,columns=['Data types'])\ntrain_dict['null']=df.isnull().sum()\ntrain_dict['unique vals']=df.nunique()\ntrain_dict['count']=df.count()\ntrain_dict","48ea3258":"df.columns","ef112b88":"df.describe()","dd14e8c4":"df.hist(bins=50,figsize=((20,15)))","b1f93c4c":"fig = px.histogram(data_frame = df,\n             x = \"sex\",\n             color=\"target\", title=\"<b>age vs target<\/b>\",   \n)\nfig.show()","47b0cb4a":"fig = px.histogram(data_frame = df,\n             x = \"fbs\",\n             color=\"target\", title=\"<b>fbs vs target<\/b>\",   \n)\nfig.show()","159f2b6e":"fig = px.histogram(data_frame = df,\n             x = \"chol\",\n             color=\"target\", title=\"<b>chol vs target<\/b>\",   \n)\nfig.show()","a11b8e52":"fig = px.histogram(data_frame = df,\n             x = \"ca\",\n             color=\"target\", title=\"<b>ca vs target<\/b>\",   \n)\nfig.show()","56dd673e":"fig = px.histogram(data_frame = df,\n             x = \"age\",\n             color=\"sex\", title=\"<b>age vs sex<\/b>\",   \n)\nfig.show()","d780b825":"train_dict","fae36779":"df.shape","7743fa21":"corrMatrix = df.corr()\nsns.heatmap(corrMatrix, annot=True)\nplt.show()","6978399f":"df.head()","992be1c4":"y=df.target\ndf.drop('target',1,inplace=True)","fc691fad":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(df,y,test_size=0.3)","51a22390":"model = [DecisionTreeClassifier(),RandomForestClassifier(), ExtraTreesClassifier() , XGBClassifier(),GaussianNB(),KNeighborsClassifier()]","47c9cfa6":"trainAccuracy = list()\ntestAccuracy = list()\nkfold = KFold(n_splits=10, random_state=7, shuffle=True)\n\nfor mdl in model:\n    trainResult = cross_val_score(mdl, X_train, y_train, scoring='accuracy', cv=kfold)\n    trainAccuracy.append(trainResult.mean())\n    mdl.fit(X_train, y_train)\n    y_pred = mdl.predict(X_test)\n    testResult = metrics.accuracy_score(y_test, y_pred)\n    testAccuracy.append(testResult)","949409b4":"print('The comparision\\n')\nmodelScore = pd.DataFrame({'Model' : model, 'Train_Accuracy' : trainAccuracy, 'Test_Accuracy' : testAccuracy})\nmodelScore","73e0b44b":"print('ExtraTreeClassifier\\n')\nmodel = ExtraTreesClassifier(n_estimators=200,max_depth=150)\nmodel.fit(X_train, y_train)\n\npred = model.predict(X_test)\nprint(metrics.classification_report(y_test,pred))\nsns.heatmap(confusion_matrix(y_test,pred), annot=True, fmt='d')\nplt.show()\n","a7a7c049":"feature distribution","cebc8791":"Preprocessing","6d03e29e":"EDA"}}