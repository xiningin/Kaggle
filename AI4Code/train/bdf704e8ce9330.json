{"cell_type":{"531ec8bd":"code","b580f420":"code","9fea40cc":"code","cc2e73e3":"code","14d859c9":"code","ceb775bb":"code","9ded3ab3":"code","71c09a03":"code","a9e19a84":"code","e5448760":"code","6f70faf9":"code","291823c8":"code","fa507802":"code","a37d8d3d":"code","e35eab75":"code","fa57d975":"code","fe0027e7":"code","54440512":"code","b7ecbc93":"code","21e04268":"code","009567e8":"code","e780f0d8":"code","057d9144":"code","e17fcd27":"code","a489598f":"code","1118ae89":"markdown","05971204":"markdown","4dd8c6ee":"markdown","afa6499e":"markdown","e1f8b255":"markdown","e02aa9cc":"markdown","3b811a98":"markdown","b55cde57":"markdown","7119e039":"markdown","eedacaff":"markdown","591e1a95":"markdown","534c835c":"markdown","b3a60940":"markdown"},"source":{"531ec8bd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))","b580f420":"dtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }","9fea40cc":"#unhide cell above if you want to see the data types\nnumerics = ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumerical_columns = [c for c,v in dtypes.items() if v in numerics]\ncategorical_columns = [c for c,v in dtypes.items() if v not in numerics]","cc2e73e3":"retained_columns = numerical_columns + categorical_columns\ntrain = pd.read_csv('..\/input\/train.csv',usecols = retained_columns,dtype = dtypes)\n\n'''\nAlternatively you can read data in chunks of e.g. 1000 MB\n'''\n#chunksize = 100000\n#train = None\n#\n#for chunk in pd.read_csv(\"..\/input\/train.csv\", chunksize=chunksize, iterator=True):\n#    if train is None:\n#        train=chunk.copy()\n#    else:\n#        train.append(chunk)","14d859c9":"train.head()","ceb775bb":"train.shape","9ded3ab3":"train.describe()","71c09a03":"for column in train.select_dtypes(include=['float','int']):\n    if train[column].min() == 0 and train[column].max() == 1 :\n        print(column)","a9e19a84":"#categorical_cols=['PuaMode', 'Census_ProcessorClass', 'Census_InternalBatteryType','SmartScreen','Census_PrimaryDiskTypeName', 'Census_ChassisTypeName','Census_OSInstallTypeName','Census_OSSkuName', 'Census_OSEdition','Census_OSWUAutoUpdateOptionsName',\n#'Census_GenuineStateName','Census_ActivationChannel', 'Census_FlightRing',\n#'MachineIdentifier','Census_OSBranch', 'Census_OSArchitecture', 'EngineVersion',\n#'AppVersion', 'AvSigVersion', 'Platform', 'Processor', 'OsVer','OsPlatformSubRelease',\n#'OsBuildLab', 'SkuEdition','Census_MDC2FormFactor', 'ProductName', 'Census_PowerPlatformRoleName',\n#'Census_OSVersion']\n#\n#for column in train:\n#    if column in categorical_cols:\n#        train[column]=train[column].astype('category')","e5448760":"nans = []\npcts = []\nfor cols in train:\n    nans.append(train[cols].isnull().sum())\n    pcts.append(train[cols].isnull().sum()\/train.shape[0]*100)","6f70faf9":"missing_data = pd.DataFrame({\"Col\":train.columns,\"Missing values\": nans, \"Pct missing [%]\": pcts}).sort_values(\"Missing values\", ascending=False)\nmissing_data[missing_data[\"Missing values\"]!=0].reset_index(drop=True)","291823c8":"complete = (missing_data[\"Pct missing [%]\"]<=10).sum()\na = ((missing_data[\"Pct missing [%]\"]!=0) & (missing_data[\"Pct missing [%]\"]<=10)).sum()\nb = ((missing_data[\"Pct missing [%]\"]>10) & (missing_data[\"Pct missing [%]\"]<=50)).sum()\nc = (missing_data[\"Pct missing [%]\"]>50).sum()\nprint(\"There are:\\n{} columns without missing values\\n{} columns with less than 10% of missing values\\n {} columns withmissing values between 10% and 50%\\n {} columns with more than 50% of missing values\".format(complete,a,b,c))\n\nlabels =[\"No missing data\", \"Missing 0-10%\", \"Missing 10-50%\", \"Missing over 50% of data\"]\nfig1, ax1 = plt.subplots(figsize=(8,8))\nax1.pie([complete,a,b,c],autopct='%1.1f%%',labels=labels, textprops={'fontsize': 15})\nax1.axis('equal')\nplt.show()","fa507802":"detect_no = (train[\"HasDetections\"]==0).sum()\ndetect_yes = (train[\"HasDetections\"]==1).sum()\n\nprint(detect_no,detect_yes)","a37d8d3d":"labels = 'No detection', 'Detection',\nsizes = [detect_no, detect_yes]\n\nfig1, ax1 = plt.subplots(figsize=(8,8))\nax1.pie(sizes, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90, textprops={'fontsize': 15})\nax1.axis('equal')\n\nplt.show()","e35eab75":"def my_graphs1(col_name, rotation=45, threshold=0.01, explode =-1):\n    '''\n    This function creates two graphs: categories distribution (pie chart) and fraction of infected machines in each category (bar graph).\n    It accepts explode, rotationand thresholf arguments to increase the clarity of the pie chart as well.\n    '''\n    category = train[col_name].unique().tolist()\n    totals=[]\n    infected=[]\n    \n    for item in category:\n        a = (train[col_name]==item).sum()\n        totals.append(a)\n        infected.append((train[train[col_name]==item][\"HasDetections\"]==1).sum()\/a)\n        \n    #creating a summary dataframe\n    df = pd.DataFrame({\"Total\":totals,\"Infected\": infected}, index=category).sort_values(\"Total\", ascending=False) \n    fig, ax = plt.subplots(ncols=2, nrows=1,figsize=(20,8))\n    \n    #creating a pie chart with conditional explode option\n    threshold = train.shape[0]*threshold\n\n    if explode==-1:\n        ax[0].pie(df[df[\"Total\"]>threshold][\"Total\"], labels=df[df[\"Total\"]>threshold].index.values, autopct='%1.1f%%',shadow=False, startangle=rotation, textprops={'fontsize': 15})\n    else:\n        ax[0].pie(df[df[\"Total\"]>threshold][\"Total\"], labels=df[df[\"Total\"]>threshold].index.values, autopct='%1.1f%%',shadow=False, startangle=rotation, textprops={'fontsize': 15}, explode=explode)\n    ax[0].axis('equal')\n    ax[0].set_title(col_name)\n    \n    #created a sorted bar chart\n    df.sort_values(\"Infected\", ascending=False, inplace=True)\n    ax[1].set_xticklabels(category,rotation=45, horizontalalignment='right')\n    ax[1].set_title('Infected fractions')\n    ax[1] = sns.barplot(x=df.index, y=\"Infected\",data=df)\n    plt.show()","fa57d975":"my_graphs1(\"ProductName\",45)","fe0027e7":"my_graphs1(\"Platform\",45)","54440512":"my_graphs1(\"Census_MDC2FormFactor\",0)","b7ecbc93":"my_graphs1(\"EngineVersion\",45)","21e04268":"my_graphs1(\"OsSuite\",0)","009567e8":"my_graphs1(\"SkuEdition\",0)","e780f0d8":"my_graphs1('Processor',0)","057d9144":"my_graphs1('OsVer',0)","e17fcd27":"my_graphs1('SmartScreen',0)","a489598f":"fig, ax = plt.subplots(ncols=1, nrows=1,figsize=(20,8))\nax = sns.distplot(train[\"CountryIdentifier\"], kde=False, bins=250)\n\nprint(\"Number of country identifiers: \" + str(train[\"CountryIdentifier\"].nunique()))\nprint(\"The most frequent country identifier: \" + str(train[\"CountryIdentifier\"].mode()[0]))","1118ae89":"Our target column is named \"*HasDetections*\". it is worth looking how many detections we have in our database.","05971204":"It looks that our database is fairly balanced.\n\nLater we will want to divide our machines into few categories so let's look for example at the Product Name, Engine Versions, Platform, Census_MDC2FormFactor and OsSuite categories.\n","4dd8c6ee":"Lets look at the first few rows to inspect the resulting database visually.","afa6499e":"# **Microsoft Malware Prediction - EDA** <a id=\"0\"><\/a> <br>\n\n### Word of introduction\n\nA vulnerability assessment against malware (malicious software) is one of the most important topics in the cyber security domain. Everyone wants to feel safe, right? The problem of malware infection may touch everyone from individual private people, through companies, up to governmental agencies. The malware itself is infectious software (mostly Trojan horses and viruses, but not only) that tries to misuse or cause damage to a computer, server as well as to extract\/steal sensitive or private information. These data can be for example your bank account details, details of your credit cards, various passwords or any other confidential data (e.g. company\u2019s internal documents).\n\nIn order to counteract to these threats, software providers (like our host IBM) are introducing active and passive countermeasures. These are for example anti-viruses and anti-malware software (active). In the case of IBM, these products are for example Microsoft Security Essentials (MSE) or well-known Windows Defender. Despite these active countermeasures, malware can get into the system by using security defects in the software itself, e.g. in various versions\/builds of the operating system, internet browsers or their plugins. Therefore, operating systems and other software need to be updated from time to time in order to improve their performance and security.\n\nIn this competition, we are asked to assess the vulnerability of the machine (computer, server, etc.) based on its configuration.\n\nIf you want to learn more about the IBM's approach in fighting malware you may like to read [this article](https:\/\/securityintelligence.com\/deeplocker-how-ai-can-power-a-stealthy-new-breed-of-malware\/) or navigate to [IBM Research](http:\/\/www.research.ibm.com\/) page to learn more about general research topics in IBM.\n\n### Exploratory Data Analysis.\n\nThe first step is to read libraries we will use in our analysis. \n\nThe basic libraries set for data analysis:\n* [numpy](http:\/\/www.numpy.org\/) - the fundamental package for scientific computing\n* [pandas](https:\/\/pandas.pydata.org\/) - datastructures and data analysis tools library\n* [matplotlib](https:\/\/matplotlib.org\/) - data visualisation\n* [seaborn](https:\/\/seaborn.pydata.org\/) - data visualisation\n","e1f8b255":"Below a simple histogram of countries identifier. I'll dwell on this a bit more soon.","e02aa9cc":"From the first glance database looks fine:\n* There are all heading\n* No strange symbols in the rows\n\nLet's see what shape our database have.","3b811a98":"Let's see now platforms:\n1. Windows 10\n2. Windows 8\n3. Windows 7\n4. Windows 2016","b55cde57":"There are 100 000 machines (observations), each with 83 parameters (columns).\n\nTime to look at some basic statistics of the columns.","7119e039":"Let's investigate first Product Name column. Here we have to categories:\n1. win8defender (Defender in Windows 8)\n2. mse (Microsoft Security Essentials)\n\nIn such comparisons it is very important to look always at absolute and relative numbers together in order to correctly interpret the results.","eedacaff":"Census_MDC2FormFactor:\n1. 'Desktop'\n2. 'Notebook'\n3. 'Detachable' \n4. 'PCOther'\n5. 'AllInOne'\n6. 'Convertible'\n7. 'SmallTablet' \n8. 'LargeTablet' \n9.  'SmallServer'\n10. 'LargeServer'\n11. 'MediumServer'\n12. 'ServerOther'\n\nFor clarity I will filter pie chart values only for these contributing more than 1%\n","591e1a95":"From the above snapshot and columns names it is obvious that some of these parameters are binary (yes\/no or 1\/0).\nLet's list them.","534c835c":"Let's see how many missing values we have in each column. If we have a lot of missing values in a column we may consider dropping it from the analysis.","b3a60940":"Above graphs clearly shows that vast majority of machines have Windows 8 Defender installed. However, in terms of percentage of infected computers in each category both are similar - around 50%."}}