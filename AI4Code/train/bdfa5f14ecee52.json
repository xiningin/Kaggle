{"cell_type":{"ccc0bf23":"code","57f12e6c":"code","7935a682":"code","ea8a70a0":"code","19cb3294":"code","ff829067":"code","32f14e85":"code","22978f9b":"code","6635ffa7":"code","61c16f5b":"code","e1342761":"code","d7dcfe7f":"code","e7b029d1":"markdown","b600d782":"markdown","3081761f":"markdown","8943e306":"markdown"},"source":{"ccc0bf23":"import pandas as pd\nimport numpy as np\nfrom IPython.display import HTML, display\nimport tabulate\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline  ","57f12e6c":"#UTILS\n\ndef missing_data(df):\n    total = df.isnull().sum().sort_values(ascending=False)\n    percent = (df.isnull().sum())\/df.isnull().count().sort_values(ascending=False)\n    return pd.concat([total, percent], axis=1, keys=['Total','Percent'], sort=False).sort_values('Total', ascending=False)\n\ndef zeros_data(df):\n    #Processes zeros values\n    total = (df == 0).sum().sort_values(ascending=False)\n    percent = ((df == 0).sum())\/(df == 0).count().sort_values(ascending=False)\n    return pd.concat([total, percent], axis=1, keys=['Total','Percent'], sort=False).sort_values('Total', ascending=False)\n\ndef print_table(df):\n    display(HTML(tabulate.tabulate(df, tablefmt='html')))\n    \ndef predict_autoH2o(df_predict,  y_column, exclude_algos = [], max_runtime_secs=60*60, nfold=0, sort_metric='aucpr'):\n    \n    df_h2o = h2o.H2OFrame(df_predict)\n    df_h2o = df_h2o[1:,:]\n    train,test = df_h2o.split_frame(ratios=[.7], seed = 1)\n    \n    x = train.columns\n    y = y_column\n    x.remove(y)\n    \n    plt.title('Train')\n    train.as_data_frame()[y].value_counts().plot(kind='bar', legend = True)\n    plt.figure()\n    plt.title('Test')\n    test.as_data_frame()[y].value_counts().plot(kind='bar', legend = True)\n\n    aml, leaders = predict_autoH2oTrainTest(train, train,  y, x,exclude_algos = exclude_algos, max_runtime_secs=max_runtime_secs, nfold=nfold, sort_metric=sort_metric)\n    \n    return aml, leaders\n\ndef predict_autoH2oTrainTest(train, test,  y, x, exclude_algos = [], max_runtime_secs=60*60, nfold=0, sort_metric='aucpr'):\n    # For binary classification, response should be a factor\n    train[y] = train[y].asfactor()\n    test[y] = test[y].asfactor()\n\n    # Run AutoML for 20 base models (limited to 1 hour max runtime by default)\n    exclude_algos = exclude_algos\n\n    aml = H2OAutoML(max_runtime_secs=max_runtime_secs, seed=1, exclude_algos = exclude_algos, nfolds = nfold, sort_metric=sort_metric)\n    aml.train(x=x, y=y, training_frame=train, validation_frame=test)\n\n    # AutoML Leaderboard\n    lb = aml.leaderboard\n\n    # Optionally edd extra model information to the leaderboard\n    lb = get_leaderboard(aml, extra_columns='ALL')\n\n    # Print all rows (instead of default 10 rows)\n    return aml, lb.head(rows=lb.nrows)","7935a682":"df = pd.read_excel('..\/input\/covid19\/dataset.xlsx')","ea8a70a0":"df.columns","19cb3294":"thr = 0.8\n\nfig, ax = plt.subplots(figsize=(20, 5))\nplt.xlabel('Fields')\nplt.ylabel('% Missing values')\nmiss_df = missing_data(df)\nmiss_df = miss_df[miss_df['Percent'] != 0]\nmiss_df.drop('Total', axis=1).plot(kind='bar', ax=ax)\nprint('Fields with null {}'.format(miss_df.shape[0]))\nprint('Number of field in df {}'.format(df.shape[1]))\nax.axhline(y=thr, color='r', linestyle='--', lw=2)\n","ff829067":"miss_df_remove = miss_df[miss_df['Percent'] >= thr]","32f14e85":"column_id = 'Patient ID'\n\n#df_clean = df.drop(miss_df_remove.index, axis=1)\ndf_clean = df.drop(column_id, axis=1)\n\ndf_clean.columns","22978f9b":"label_fields = ['SARS-Cov-2 exam result','Patient addmited to regular ward (1=yes, 0=no)',\n       'Patient addmited to semi-intensive unit (1=yes, 0=no)',\n       'Patient addmited to intensive care unit (1=yes, 0=no)']\n\nfig, ax = plt.subplots(2,2,figsize=(10, 5))\n\nfor i,label_field in enumerate(label_fields):\n    df[label_field].value_counts().plot(kind='bar', ax=ax.flatten()[i], legend = True)\n\nfig.tight_layout(pad=2.0)","6635ffa7":"df[label_fields[0]].value_counts()","61c16f5b":"df_clean.select_dtypes('O')","e1342761":"df_clean = df_clean.astype('float', errors='ignore')\nfor column in df_clean.select_dtypes('O').columns:\n    \n    print('Field: {}'.format(column))\n    print('Values: {}'.format(set(df_clean[column])))\n    print('---')\n    ","d7dcfe7f":"df_clean = df_clean.replace('negative', 0).replace('positive', 1)\ndf_clean = df_clean.replace('detected',1).replace('not_detected',0)\ndf_clean = df_clean.replace('present',1).replace('absent',0)\ndf_clean = df_clean.replace('not_done',np.nan).replace('N\u00e3o Realizado',np.nan)\ndf_clean = df_clean.replace('normal',1)\ndf_clean = df_clean.replace('<1000',1000)\ndf_clean['Urine - pH'] = df_clean['Urine - pH'].astype('float')\ndf_clean['Urine - Leukocytes'] = df_clean['Urine - pH'].astype('float')","e7b029d1":"* # EDA - Imbalanced Classes Strategies - AutoML implementation","b600d782":"### Possible Assumption\nTo do this analysis, It's possible suppose that this nulls fields happened because they are tests did with already critical patients. With this assumption we can in future create a prediction model that can be used when the paciente arrive in the hospital","3081761f":"# H20 AutoML test ... junt in github :(","8943e306":"As EDA will show, the positive results to Covid-19 are a Imbalanced label. Just 10.9% patients tested was positive.\n\nIn this notebook i will:\n- Predict Covid-19\n- Test 3 strategies to solve the imbalannced class\n- Implement a AutoML to get a faster result\n\nNext Implementations:\n- Test Deep learning in AutoML\n- Implement the suggestions given from community\n\nAs i used an external tool you can see the results in my github: https:\/\/github.com\/Angelo-Baruffi\/Diagnosis-of-COVID-19\/blob\/master\/Analysis.ipynb"}}