{"cell_type":{"59219462":"code","89b116c2":"code","b2af42f4":"code","2d36baad":"code","5a29e90c":"code","81bd75b4":"code","56ea204f":"code","6b57c948":"code","82cbb59c":"code","2e4c926e":"markdown","eefc48de":"markdown","e6800b30":"markdown","61d06ace":"markdown","4db27267":"markdown","324e627b":"markdown","5b385d4b":"markdown","9aa42380":"markdown","93130d49":"markdown"},"source":{"59219462":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89b116c2":"dfori = pd.read_csv('\/kaggle\/input\/imdb-review-dataset\/imdb_master.csv')\ndf = dfori.copy()\ndf = df.drop(['Unnamed: 0', 'type', 'file'], axis = 1)\ndf","b2af42f4":"df['label'].value_counts()","2d36baad":"df = df[df['label'] != 'unsup'] # see only pos\/neg\ndf['label'].value_counts() # updated df","5a29e90c":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(stop_words = 'english')\n\ndtm = cv.fit_transform(df['review'])","81bd75b4":"x = dtm # this is the dtm\ny = df['label']","56ea204f":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 1)\n\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\n\n# Train\nrfc.fit(x_train, y_train)\n\n# Predict\ny_pred = rfc.predict(x_test)","6b57c948":"from sklearn.metrics import confusion_matrix, f1_score, accuracy_score, classification_report\nprint(confusion_matrix(y_test, y_pred))\nprint(\" \")\nprint(accuracy_score(y_test, y_pred))\nprint(\" \")\nprint(classification_report(y_test, y_pred))","82cbb59c":"# Importing the NLTK Library, Vader Lexicon, Sentiment Intensity Analyzer (SIA)\nimport nltk\nnltk.download('vader_lexicon')\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nsia = SentimentIntensityAnalyzer()\n\n# Create new column for the SIA Score\ndf['score'] = df['review'].apply(lambda x: sia.polarity_scores(x))\n\n# Create new column for the final SIA Compound Score\ndf['compound'] = df['score'].apply(lambda x: x['compound'])\n\n# Display the new df\ndf","2e4c926e":"## Justify X and Y variables\n\nBecause this is semi supervised, we have dependent and independent variables.","eefc48de":"* Now, compound score indicates whether a comment tends to be positive (>0) or negative(<0). \n* We can see from the above dataframe that in some rows, the compound score does not reflect the 'true' label.\n* However, SIA has been more than capable of at least guessing the last five columns.","e6800b30":"We just want to focus on the review and its original label. What are the labels?","61d06ace":"# Conclusion\n\nUsing Random Forest Classification, we can infer that the sentiment analysis using text classification results in about 85% accuracy.","4db27267":"For simplicity, let's just remove the unsup.","324e627b":"# Evaluation","5b385d4b":"# Train and Predict\nLet's try using Random Forest Classifier.","9aa42380":"# Sentiment Analysis using NLTK SIA Compound Score\n\nThe above method is for supervised learning. Now, we'll try the unsupervised learning by NLTK VADER method for Sentiment Intensity Analyzer.","93130d49":"# Preprocessing using CountVectorizer"}}