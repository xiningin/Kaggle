{"cell_type":{"b3dbe663":"code","e8889f6e":"code","8d1973c5":"code","722b58f1":"code","db1e5865":"code","7d48d61e":"code","223c031a":"code","d7a30247":"code","4764f17d":"code","847eb1cc":"code","6396b1d6":"code","44bfc7dd":"code","ec285dfa":"code","19f8bc62":"code","2ea7b35f":"code","1bb345f9":"code","c73dbe13":"code","10c572fe":"code","1b865b61":"code","497706da":"code","69439ecd":"code","370407e0":"code","24e4fbfb":"code","727a1623":"code","a19abec0":"code","3ae63b1c":"code","407f652b":"code","3cb5127e":"code","e388019a":"code","9db597d6":"code","2d6e52f2":"code","09f4975e":"code","ab0b7837":"code","3a91ce90":"code","359433fc":"code","84660e29":"code","43b44871":"code","07aa0972":"code","617a2276":"code","95be5407":"code","200f489e":"code","5a925af2":"code","e72a1a90":"code","7f2ed673":"code","34b7aa66":"code","6151acb0":"code","2d1f1670":"code","fcf1d522":"code","e89c7a56":"code","edabbeb6":"code","34812875":"code","d6eb496c":"code","d608d318":"code","0bafb7f4":"code","07ce0879":"code","9ffeea86":"code","7e435c98":"code","5b60cc76":"code","9fa5419e":"code","f34295e0":"code","3d3d504e":"code","d8e71222":"code","fbc159a4":"code","61b1f4a1":"code","c0be2b33":"code","3f63c84a":"code","02879d7e":"code","2901b3bd":"code","caf29d17":"code","97879501":"code","60fd11bf":"code","008e4d72":"code","0fc5afcc":"code","12d551c8":"code","cfe5fa22":"code","80dc93de":"code","2e111109":"code","bf281b62":"code","48e7bbcd":"markdown","69b240f2":"markdown","67e894fa":"markdown","19a3c591":"markdown","ba3a22a9":"markdown","cab34d4f":"markdown","514b0933":"markdown","b6044640":"markdown","93682c5d":"markdown","be424895":"markdown","6f8acc4a":"markdown","f40ec22b":"markdown","f45d4ed4":"markdown","efadfcf7":"markdown","c4aec4c8":"markdown","d9752099":"markdown","5c0ea1ce":"markdown"},"source":{"b3dbe663":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e8889f6e":"#Reading Train and Test dataset\ntrain = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\n\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")","8d1973c5":"print('**** Shape of training dataset **** ', train.shape)\nprint()\nprint('**** Shape of test dataste **** ',test.shape)\n","722b58f1":"print(\"***** First Ten rows of Training Dataset ****\")\nprint()\ntrain.head()\n","db1e5865":"print(\"***** First Ten rows of Test Dataset ****\")\nprint()\ntest.head()\n","7d48d61e":"print(\"***** Columns of the Dataset *****\")\nprint()\nprint(train.columns)","223c031a":"print(\"**** Datatypes present in Dataset *****\")\nprint()\ntrain.dtypes","d7a30247":"print(\"***** Null values is there or not in training dataset? *****\")\nprint()\nprint(train.isnull().sum())\n","4764f17d":"print(\"***** Null values is there or not in test dataset? *****\")\nprint()\nprint(test.isnull().sum())\n","847eb1cc":"print(\"***** Basic Description of Dataset *****\")\nprint()\ntrain.describe(include='all')","6396b1d6":"cols = ['country','store','product']\nfor i in cols:\n    print(\"Value counts of \"+i+\" are :\")\n    print()\n    print(train[i].value_counts())\n    print()\n    ","44bfc7dd":"train_df = train.drop(['row_id'],axis=1)\ntest_df = test.drop(['row_id'],axis=1)","ec285dfa":"#Extracting more features from 'date' columns\ntrain_df['date']= pd.to_datetime(train_df['date'])\ntrain_df['year'] = train_df['date'].dt.year\ntrain_df['month'] = train_df['date'].dt.month\ntrain_df['day'] = train_df['date'].dt.day\ntrain_df['weekday'] = train_df['date'].dt.weekday\ntrain_df['week_of_year'] = train_df['date'].dt.isocalendar().week\ntrain_df['day_of_year'] = train_df['date'].dt.dayofyear\ntrain_df['quarter'] = train_df['date'].dt.quarter\ntrain_df['is_weekend'] = train_df.date.dt.weekday>3\ntrain_df.head()","19f8bc62":"test_df['date']= pd.to_datetime(test_df['date'])\ntest_df['year'] = test_df['date'].dt.year\ntest_df['month'] = test_df['date'].dt.month\ntest_df['day'] = test_df['date'].dt.day\ntest_df['weekday'] = test_df['date'].dt.weekday\ntest_df['week_of_year'] = test_df['date'].dt.isocalendar().week\ntest_df['day_of_year'] = test_df['date'].dt.dayofyear\ntest_df['quarter'] = test_df['date'].dt.quarter\ntest_df['is_weekend'] = test_df.date.dt.weekday>4\ntest_df.head()","2ea7b35f":"#Holiday Feature Add\nimport holidays\n\ndays=[]\nfor ptr in holidays.Norway(years = [2015,2016,2017,2018,2019]).keys():\n    days.append(ptr)\n    \nfor ptr in holidays.Finland(years = [2015,2016,2017,2018,2019]).keys():\n    days.append(ptr)\n\nfor ptr in holidays.Sweden(years = [2015,2016,2017,2018,2019]).keys():\n    days.append(ptr)\n\n\ntrain_df['is_holiday']= train_df['date'].isin(days) \ntest_df['is_holiday'] = test_df['date'].isin(days)\n","1bb345f9":"#Adding GDP of given countries\n\n#Training Dataset\ntrain_df['GDP_USD)'] = 0\n\n#Test Dataset\ntest_df['GDP_USD)'] = 0\n\n#2015\ntrain_df.loc[(train_df.country==\"Norway\") & (train_df.year==2015) , 'GDP_USD'] = 38.58016\ntrain_df.loc[(train_df.country==\"Finland\") &  (train_df.year==2015) , 'GDP_USD'] = 23.44401\ntrain_df.loc[(train_df.country==\"Sweden\") & (train_df.year==2015) , 'GDP_USD'] = 50.51038\n\n#2016\ntrain_df.loc[(train_df.country==\"Norway\") & (train_df.year==2016) , 'GDP_USD'] = 36.88271\ntrain_df.loc[(train_df.country==\"Finland\") & (train_df.year==2016) , 'GDP_USD'] = 24.06079\ntrain_df.loc[(train_df.country==\"Sweden\") & (train_df.year==2016), 'GDP_USD'] = 51.56547\n\n#2017\ntrain_df.loc[(train_df.country==\"Norway\") & (train_df.year==2017) , 'GDP_USD'] = 38.8394\ntrain_df.loc[(train_df.country==\"Finland\") & (train_df.year==2017) , 'GDP_USD'] = 25.50165\ntrain_df.loc[(train_df.country==\"Sweden\") & (train_df.year==2017) , 'GDP_USD'] = 54.10187\n\n#2018\ntrain_df.loc[(train_df.country==\"Norway\") & (train_df.year==2018) , 'GDP_USD'] = 43.69997\ntrain_df.loc[(train_df.country==\"Finland\") & (train_df.year==2018) , 'GDP_USD'] = 27.58496\ntrain_df.loc[(train_df.country==\"Sweden\") & (train_df.year==2018) , 'GDP_USD'] = 55.54554\n\n\n\n#2019\ntest_df.loc[(test_df.country==\"Norway\") & (test_df.year==2019) , 'GDP_USD'] = 40.551\ntest_df.loc[(test_df.country==\"Finland\") & (test_df.year==2019) , 'GDP_USD'] = 26.89661\ntest_df.loc[(test_df.country==\"Sweden\") & (test_df.year==2019) , 'GDP_USD'] = 53.12833\n\n","c73dbe13":"test_df['is_holiday'].value_counts()","10c572fe":"train_df['is_holiday'].value_counts()","1b865b61":"train_df = train_df.drop(['date'],axis=1)\ntest_df = test_df.drop(['date'],axis=1)","497706da":"train_df","69439ecd":"country = pd.DataFrame()\ncountry = train_df.groupby('country').sum()\ncountry.head()","370407e0":"def with_hue(data,feature,ax):\n    \n    #Numnber of categories\n    num_of_cat=len([x for x in data[feature].unique() if x==x])\n    \n    bars=ax.patches\n    \n    for ind in range(num_of_cat):\n        ##     Get every hue bar\n        ##     ex. 8 X categories, 4 hues =>\n        ##    [0, 8, 16, 24] are hue bars for 1st X category\n        hueBars=bars[ind:][::num_of_cat] \n        # Get the total height (for percentages)\n        total=sum([x.get_height() for x in hueBars])\n        #Printing percentages on bar\n        for bar in hueBars:\n            percentage='{:.1f}%'.format(100 * bar.get_height()\/total)\n            ax.text(bar.get_x()+bar.get_width()\/2.0,\n                   bar.get_height(),\n                   percentage,\n                    ha=\"center\",va=\"bottom\",fontweight='bold',fontsize=10)\n    \n\n    \ndef without_hue(data,feature,ax):\n    \n    total=0\n    bars_plot=ax.patches\n    for bars in bars_plot:\n        total+=bars.get_height()\n    for bars in bars_plot:\n        percentage = '{:.1f}%'.format(100 * bars.get_height()\/total)\n        x = bars.get_x() + bars.get_width()\/2.0\n        y = bars.get_height()\n        ax.text(x, y+2,str(int(y))+\" , \"+percentage,ha='center',fontweight='bold',fontsize=12)\n","24e4fbfb":"sns.set_theme(style='white',context='notebook')\nfig=plt.figure(figsize=(16,8))\n\nax=plt.axes()\nax.set_facecolor(\"#F2EDD7FF\")\nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.grid(linestyle=\"--\",axis=\"y\",color='gray')\n\na=sns.barplot(x=country.index,y=country['num_sold'],palette='rocket_r')\n\nplt.xticks(fontweight='bold')\nplt.yticks(fontweight='bold')\nplt.xlabel(\"Country\",fontweight='bold')\nplt.ylabel(\"Number of products sold\",fontweight='bold')\n\nwithout_hue(country,'country',a)\nplt.show()\n\n","727a1623":"fig=plt.figure(figsize=(16,8))\n\nax=plt.axes()\nax.set_facecolor(\"#F2EDD7FF\")\nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.grid(linestyle=\"--\",axis=\"y\",color='gray')\n\na=sns.heatmap(train_df.corr(),annot=True,linewidth=2)\n\nplt.xticks(fontweight='bold')\nplt.yticks(fontweight='bold')\nplt.show()","a19abec0":"finland = train_df[train_df['country']==\"Finland\"]\nfinland.head()","3ae63b1c":"finland_store = finland.groupby('store').sum()\nfinland_store.head()","407f652b":"finland_prod = finland.groupby('product').sum()\nfinland_prod.head()","3cb5127e":"f,ax =plt.subplots(nrows=1, ncols=2 ,figsize=(16,8))\n\nf.patch.set_facecolor('#F2EDD7FF')\nfor i in range(0,2):\n    ax[i].set_facecolor('#F2EDD7FF')\n    ax[i].spines['top'].set_visible(False)\n    ax[i].spines['left'].set_visible(False)\n    ax[i].spines['right'].set_visible(False)\n    ax[i].grid(linestyle=\"--\",axis=\"y\",color='gray')\n    \n\na=sns.barplot(x=finland_store.index,y=finland_store['num_sold'],ax=ax[0],palette='rocket_r')\nb=sns.barplot(x=finland_prod.index,y=finland_prod['num_sold'],ax=ax[1],palette='rocket_r')\n\n'''plt.xticks(fontweight='bold')\nplt.yticks(fontweight='bold')\nplt.xlabel(\"Country\",fontweight='bold')\nplt.ylabel(\"Number of products sold\",fontweight='bold')'''\n\nax[0].text(0,1800000 , \"Kaggle store distribution in Finland\",fontweight='bold')\nax[1].text(0,1500000 , \"Kaggle product distribution in Finland\",fontweight='bold')\n\nwithout_hue(finland_store,'country',a)\nwithout_hue(finland_prod,'country',b)\n\nplt.show()\n","e388019a":"finland_year = finland.groupby('year').sum()\nfinland_year.head()","9db597d6":"f,ax =plt.subplots(nrows=1, ncols=2 ,figsize=(16,8))\n\nf.patch.set_facecolor('#F2EDD7FF')\nfor i in range(0,2):\n    ax[i].set_facecolor('#F2EDD7FF')\n    ax[i].spines['top'].set_visible(False)\n    ax[i].spines['left'].set_visible(False)\n    ax[i].spines['right'].set_visible(False)\n    ax[i].grid(linestyle=\"--\",axis=\"y\",color='gray')\n    \n\na=sns.barplot(x=finland_year.index,y=finland_year['num_sold'],ax=ax[0],palette='rocket_r')\nb=sns.lineplot(x=finland_year.index,y=finland_year['num_sold'],ax=ax[1],palette='rocket_r')\n\n'''plt.xticks(fontweight='bold')\nplt.yticks(fontweight='bold')\nplt.xlabel(\"Country\",fontweight='bold')\nplt.ylabel(\"Number of products sold\",fontweight='bold')'''\n\nwithout_hue(finland_store,'country',a)\n#without_hue(finland_prod,'country',b)\n\nplt.show()\n","2d6e52f2":"norway= train_df[train_df['country']==\"Norway\"]\nnorway_store = norway.groupby('store').sum()\nnorway_prod = norway.groupby('product').sum()\nnorway_year = norway.groupby('year').sum()\n","09f4975e":"f,ax =plt.subplots(nrows=1, ncols=2 ,figsize=(16,8))\n\nf.patch.set_facecolor('#F2EDD7FF')\nfor i in range(0,2):\n    ax[i].set_facecolor('#F2EDD7FF')\n    ax[i].spines['top'].set_visible(False)\n    ax[i].spines['left'].set_visible(False)\n    ax[i].spines['right'].set_visible(False)\n    ax[i].grid(linestyle=\"--\",axis=\"y\",color='gray')\n    \n\na=sns.barplot(x=norway_store.index,y=norway_store['num_sold'],ax=ax[0],palette='rocket_r')\nb=sns.barplot(x=norway_prod.index,y=norway_prod['num_sold'],ax=ax[1],palette='rocket_r')\n\n'''plt.xticks(fontweight='bold')\nplt.yticks(fontweight='bold')\nplt.xlabel(\"Country\",fontweight='bold')\nplt.ylabel(\"Number of products sold\",fontweight='bold')'''\n\nax[0].text(0,3000000 , \"Kaggle store distribution in Norway\",fontweight='bold')\nax[1].text(0,2600000 , \"Kaggle product distribution in Norway\",fontweight='bold')\n\nwithout_hue(norway_store,'country',a)\nwithout_hue(norway_prod,'country',b)\n\nplt.show()\n","ab0b7837":"f,ax =plt.subplots(nrows=1, ncols=2 ,figsize=(16,8))\n\nf.patch.set_facecolor('#F2EDD7FF')\nfor i in range(0,2):\n    ax[i].set_facecolor('#F2EDD7FF')\n    ax[i].spines['top'].set_visible(False)\n    ax[i].spines['left'].set_visible(False)\n    ax[i].spines['right'].set_visible(False)\n    ax[i].grid(linestyle=\"--\",axis=\"y\",color='gray')\n    \n\na=sns.barplot(x=norway_year.index,y=norway_year['num_sold'],ax=ax[0],palette='rocket_r')\nb=sns.lineplot(x=norway_year.index,y=norway_year['num_sold'],ax=ax[1],palette='rocket_r')\n\n'''plt.xticks(fontweight='bold')\nplt.yticks(fontweight='bold')\nplt.xlabel(\"Country\",fontweight='bold')\nplt.ylabel(\"Number of products sold\",fontweight='bold')'''\n\n\nwithout_hue(norway_store,'country',a)\n#without_hue(finland_prod,'country',b)\n\nplt.show()\n","3a91ce90":"sweden= train_df[train_df['country']==\"Sweden\"]\nsweden_store = sweden.groupby('store').sum()\nsweden_prod = sweden.groupby('product').sum()\nsweden_year = sweden.groupby('year').sum()\n","359433fc":"f,ax =plt.subplots(nrows=1, ncols=2 ,figsize=(16,8))\n\nf.patch.set_facecolor('#F2EDD7FF')\nfor i in range(0,2):\n    ax[i].set_facecolor('#F2EDD7FF')\n    ax[i].spines['top'].set_visible(False)\n    ax[i].spines['left'].set_visible(False)\n    ax[i].spines['right'].set_visible(False)\n    ax[i].grid(linestyle=\"--\",axis=\"y\",color='gray')\n    \n\na=sns.barplot(x=sweden_store.index,y=sweden_store['num_sold'],ax=ax[0],palette='rocket_r')\nb=sns.barplot(x=sweden_prod.index,y=sweden_prod['num_sold'],ax=ax[1],palette='rocket_r')\n\n'''plt.xticks(fontweight='bold')\nplt.yticks(fontweight='bold')\nplt.xlabel(\"Country\",fontweight='bold')\nplt.ylabel(\"Number of products sold\",fontweight='bold')'''\nax[0].text(0,2200000 , \"Kaggle store distribution in Norway\",fontweight='bold')\nax[1].text(0,1850000 , \"Kaggle product distribution in Norway\",fontweight='bold')\n\nwithout_hue(sweden_store,'country',a)\nwithout_hue(sweden_prod,'country',b)\n\nplt.show()\n","84660e29":"f,ax =plt.subplots(nrows=1, ncols=2 ,figsize=(16,8))\n\nf.patch.set_facecolor('#F2EDD7FF')\nfor i in range(0,2):\n    ax[i].set_facecolor('#F2EDD7FF')\n    ax[i].spines['top'].set_visible(False)\n    ax[i].spines['left'].set_visible(False)\n    ax[i].spines['right'].set_visible(False)\n    ax[i].grid(linestyle=\"--\",axis=\"y\",color='gray')\n    \n\na=sns.barplot(x=sweden_year.index,y=sweden_year['num_sold'],ax=ax[0],palette='rocket_r')\nb=sns.lineplot(x=sweden_year.index,y=sweden_year['num_sold'],ax=ax[1],palette='rocket_r')\n\n'''plt.xticks(fontweight='bold')\nplt.yticks(fontweight='bold')\nplt.xlabel(\"Country\",fontweight='bold')\nplt.ylabel(\"Number of products sold\",fontweight='bold')'''\n\nwithout_hue(sweden_store,'country',a)\n#without_hue(finland_prod,'country',b)\n\nplt.show()\n","43b44871":"Year = train_df.groupby('year').sum()\nYear.head()","07aa0972":"fig=plt.figure(figsize=(10,5))\n\nax=plt.axes()\nax.set_facecolor(\"#F2EDD7FF\")\nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\ncolors=['yellowgreen', 'gold', 'lightskyblue', 'lightcoral','lightpink','teal','green']\nplt.pie(Year['num_sold'],colors=colors,labels=Year.index,autopct='%1.2f%%',shadow=True)\nplt.title(\"Distribution of sales from 2015 to 2018\",fontweight='bold',fontsize=16)\nplt.axis('equal')\nplt.tight_layout()\nplt.show()\n","617a2276":"year2015 = train_df.loc[train_df.year==2015]\nyear2016 = train_df.loc[train_df.year==2016]\nyear2017 = train_df.loc[train_df.year==2017]\nyear2018 = train_df.loc[train_df.year==2018]\n","95be5407":"year2015_store= year2015.groupby('store').sum() \nyear2015_prod= year2015.groupby('product').sum()\n\nyear2016_store= year2016.groupby('store').sum()\nyear2016_prod= year2016.groupby('product').sum()\n\nyear2017_store= year2017.groupby('store').sum() \nyear2017_prod= year2017.groupby('product').sum()\n\nyear2018_store= year2018.groupby('store').sum() \nyear2018_prod= year2018.groupby('product').sum()\n","200f489e":"f,ax =plt.subplots(nrows=4, ncols=2 ,figsize=(16,20))\nf.tight_layout()\nf.patch.set_facecolor('#F2EDD7FF')\nfor i in range(0,4):\n    for j in range(0,2):\n        ax[i][j].set_facecolor('#F2EDD7FF')\n        ax[i][j].spines['top'].set_visible(False)\n        ax[i][j].spines['left'].set_visible(False)\n        ax[i][j].spines['right'].set_visible(False)\n        ax[i][j].grid(linestyle=\"--\",axis=\"y\",color='gray')\n\n\na=sns.barplot(x=year2015_store.index,y=year2015_store['num_sold'],ax=ax[0][0],palette='rocket_r')\nb=sns.barplot(x=year2015_prod.index,y=year2015_prod['num_sold'],ax=ax[0][1],palette='rocket_r')\n\nc=sns.barplot(x=year2016_store.index,y=year2016_store['num_sold'],ax=ax[1][0],palette='rocket_r')\nd=sns.barplot(x=year2016_prod.index,y=year2016_prod['num_sold'],ax=ax[1][1],palette='rocket_r')\n\ne=sns.barplot(x=year2017_store.index,y=year2017_store['num_sold'],ax=ax[2][0],palette='rocket_r')\nf=sns.barplot(x=year2017_prod.index,y=year2017_prod['num_sold'],ax=ax[2][1],palette='rocket_r')\n\ng=sns.barplot(x=year2018_store.index,y=year2018_store['num_sold'],ax=ax[3][0],palette='rocket_r')\nh=sns.barplot(x=year2018_prod.index,y=year2018_prod['num_sold'],ax=ax[3][1],palette='rocket_r')\n\n\n'''plt.xticks(fontweight='bold')\nplt.yticks(fontweight='bold')\nplt.xlabel(\"Country\",fontweight='bold')\nplt.ylabel(\"Number of products sold\",fontweight='bold')'''\n\nwithout_hue(year2015_store,'country',a)\nwithout_hue(year2015_prod,'country',b)\nwithout_hue(year2016_store,'country',c)\nwithout_hue(year2016_prod,'country',d)\nwithout_hue(year2017_store,'country',e)\nwithout_hue(year2017_prod,'country',f)\nwithout_hue(year2018_store,'country',g)\nwithout_hue(year2018_prod,'country',h)\n\nax[0][0].text(0,1700000 , \"Kaggle store distribution in 2015\",fontweight='bold')\nax[0][1].text(0.3,1400000 , \"Kaggle product distribution in 2015\",fontweight='bold')\nax[1][0].text(-0.4,1400000 , \"Kaggle store distribution in 2016\",fontweight='bold')\nax[1][1].text(0.5,1200000 , \"Kaggle product distribution in 2016\",fontweight='bold')\nax[2][0].text(-0.4,1400000 , \"Kaggle store distribution in 2017\",fontweight='bold')\nax[2][1].text(0.5,1200000 , \"Kaggle product distribution in 2017\",fontweight='bold')\nax[3][0].text(-0.4,1500000 , \"Kaggle store distribution in 2018\",fontweight='bold')\nax[3][1].text(0.5,1200000 , \"Kaggle product distribution in 2018\",fontweight='bold')\n\nplt.show()\n","5a925af2":"# month , weekday , quarter , week_of_year\n\n#MONTH\nyear2015_month_store = year2015.groupby(['month','store']).sum().reset_index()\nyear2015_month_prod = year2015.groupby(['month','product']).sum().reset_index()\n\n#WEEKDAY\nyear2015_wd_store = year2015.groupby(['weekday','store']).sum().reset_index()\nyear2015_wd_prod = year2015.groupby(['weekday','product']).sum().reset_index()\n\n#QUARTER\nyear2015_quar_store = year2015.groupby(['quarter','store']).sum().reset_index()\nyear2015_quar_prod = year2015.groupby(['quarter','product']).sum().reset_index()\n\n#WEEK OF YEAR\nyear2015_woy_store = year2015.groupby(['week_of_year','store']).sum().reset_index()\nyear2015_woy_prod = year2015.groupby(['week_of_year','product']).sum().reset_index()\n\n#DAY OF YEAR\nyear2015_doy_store = year2015.groupby(['day_of_year','store']).sum().reset_index()\nyear2015_doy_prod = year2015.groupby(['day_of_year','product']).sum().reset_index()\n\n","e72a1a90":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nf,ax =plt.subplots(nrows=5, ncols=2 ,figsize=(16,20))\nf.tight_layout()\nf.patch.set_facecolor('#F2EDD7FF')\nfor i in range(0,5):\n    for j in range(0,2):\n        ax[i][j].set_facecolor('#F2EDD7FF')\n        ax[i][j].spines['top'].set_visible(False)\n        ax[i][j].spines['left'].set_visible(False)\n        ax[i][j].spines['right'].set_visible(False)\n        ax[i][j].grid(linestyle=\"--\",axis=\"y\",color='gray')\n\n\nsns.lineplot(year2015_month_store['month'],year2015_month_store['num_sold'],hue=year2015_month_store['store'],ax=ax[0][0])\nsns.lineplot(year2015_month_prod['month'],year2015_month_prod['num_sold'],hue=year2015_month_prod['product'],ax=ax[0][1])\n\nsns.lineplot(year2015_wd_store['weekday'],year2015_wd_store['num_sold'],hue=year2015_wd_store['store'],ax=ax[1][0])\nsns.lineplot(year2015_wd_prod['weekday'],year2015_wd_prod['num_sold'],hue=year2015_wd_prod['product'],ax=ax[1][1])\n\nsns.lineplot(year2015_quar_store['quarter'],year2015_quar_store['num_sold'],hue=year2015_quar_store['store'],ax=ax[2][0])\nsns.lineplot(year2015_quar_prod['quarter'],year2015_quar_prod['num_sold'],hue=year2015_quar_prod['product'],ax=ax[2][1])\n\nsns.lineplot(year2015_woy_store['week_of_year'],year2015_woy_store['num_sold'],hue=year2015_woy_store['store'],ax=ax[3][0])\nsns.lineplot(year2015_woy_prod['week_of_year'],year2015_woy_prod['num_sold'],hue=year2015_woy_prod['product'],ax=ax[3][1])\n\nsns.lineplot(year2015_doy_store['day_of_year'],year2015_doy_store['num_sold'],hue=year2015_doy_store['store'],ax=ax[4][0])\nsns.lineplot(year2015_doy_prod['day_of_year'],year2015_doy_prod['num_sold'],hue=year2015_doy_prod['product'],ax=ax[4][1])\n\nplt.show()","7f2ed673":"# month , weekday , quarter , week_of_year\n\n#MONTH\nyear2016_month_store = year2016.groupby(['month','store']).sum().reset_index()\nyear2016_month_prod = year2016.groupby(['month','product']).sum().reset_index()\n\n#WEEKDAY\nyear2016_wd_store = year2016.groupby(['weekday','store']).sum().reset_index()\nyear2016_wd_prod = year2016.groupby(['weekday','product']).sum().reset_index()\n\n#QUARTER\nyear2016_quar_store = year2016.groupby(['quarter','store']).sum().reset_index()\nyear2016_quar_prod = year2016.groupby(['quarter','product']).sum().reset_index()\n\n#WEEK OF YEAR\nyear2016_woy_store = year2016.groupby(['week_of_year','store']).sum().reset_index()\nyear2016_woy_prod = year2016.groupby(['week_of_year','product']).sum().reset_index()\n\n#DAY OF YEAR\nyear2016_doy_store = year2016.groupby(['day_of_year','store']).sum().reset_index()\nyear2016_doy_prod = year2016.groupby(['day_of_year','product']).sum().reset_index()\n","34b7aa66":"#import warnings\nwarnings.filterwarnings(\"ignore\")\n\nf,ax =plt.subplots(nrows=5, ncols=2 ,figsize=(16,20))\nf.tight_layout()\nf.patch.set_facecolor('#F2EDD7FF')\nfor i in range(0,5):\n    for j in range(0,2):\n        ax[i][j].set_facecolor('#F2EDD7FF')\n        ax[i][j].spines['top'].set_visible(False)\n        ax[i][j].spines['left'].set_visible(False)\n        ax[i][j].spines['right'].set_visible(False)\n        ax[i][j].grid(linestyle=\"--\",axis=\"y\",color='gray')\n\n\nsns.lineplot(year2016_month_store['month'],year2016_month_store['num_sold'],hue=year2016_month_store['store'],ax=ax[0][0])\nsns.lineplot(year2016_month_prod['month'],year2016_month_prod['num_sold'],hue=year2016_month_prod['product'],ax=ax[0][1])\n\nsns.lineplot(year2016_wd_store['weekday'],year2016_wd_store['num_sold'],hue=year2016_wd_store['store'],ax=ax[1][0])\nsns.lineplot(year2016_wd_prod['weekday'],year2016_wd_prod['num_sold'],hue=year2016_wd_prod['product'],ax=ax[1][1])\n\nsns.lineplot(year2016_quar_store['quarter'],year2016_quar_store['num_sold'],hue=year2016_quar_store['store'],ax=ax[2][0])\nsns.lineplot(year2016_quar_prod['quarter'],year2016_quar_prod['num_sold'],hue=year2016_quar_prod['product'],ax=ax[2][1])\n\nsns.lineplot(year2016_woy_store['week_of_year'],year2016_woy_store['num_sold'],hue=year2016_woy_store['store'],ax=ax[3][0])\nsns.lineplot(year2016_woy_prod['week_of_year'],year2016_woy_prod['num_sold'],hue=year2016_woy_prod['product'],ax=ax[3][1])\n\nsns.lineplot(year2016_doy_store['day_of_year'],year2016_doy_store['num_sold'],hue=year2016_doy_store['store'],ax=ax[4][0])\nsns.lineplot(year2016_doy_prod['day_of_year'],year2016_doy_prod['num_sold'],hue=year2016_doy_prod['product'],ax=ax[4][1])\n\nplt.show()","6151acb0":"# month , weekday , quarter , week_of_year\n\n#MONTH\nyear2017_month_store = year2017.groupby(['month','store']).sum().reset_index()\nyear2017_month_prod = year2017.groupby(['month','product']).sum().reset_index()\n\n#WEEKDAY\nyear2017_wd_store = year2017.groupby(['weekday','store']).sum().reset_index()\nyear2017_wd_prod = year2017.groupby(['weekday','product']).sum().reset_index()\n\n#QUARTER\nyear2017_quar_store = year2017.groupby(['quarter','store']).sum().reset_index()\nyear2017_quar_prod = year2017.groupby(['quarter','product']).sum().reset_index()\n\n#WEEK OF YEAR\nyear2017_woy_store = year2017.groupby(['week_of_year','store']).sum().reset_index()\nyear2017_woy_prod = year2017.groupby(['week_of_year','product']).sum().reset_index()\n\n#DAY OF YEAR\nyear2017_doy_store = year2017.groupby(['day_of_year','store']).sum().reset_index()\nyear2017_doy_prod = year2017.groupby(['day_of_year','product']).sum().reset_index()\n","2d1f1670":"warnings.filterwarnings(\"ignore\")\n\nf,ax =plt.subplots(nrows=5, ncols=2 ,figsize=(16,20))\nf.tight_layout()\nf.patch.set_facecolor('#F2EDD7FF')\nfor i in range(0,5):\n    for j in range(0,2):\n        ax[i][j].set_facecolor('#F2EDD7FF')\n        ax[i][j].spines['top'].set_visible(False)\n        ax[i][j].spines['left'].set_visible(False)\n        ax[i][j].spines['right'].set_visible(False)\n        ax[i][j].grid(linestyle=\"--\",axis=\"y\",color='gray')\n\n\nsns.lineplot(year2017_month_store['month'],year2017_month_store['num_sold'],hue=year2017_month_store['store'],ax=ax[0][0])\nsns.lineplot(year2017_month_prod['month'],year2017_month_prod['num_sold'],hue=year2017_month_prod['product'],ax=ax[0][1])\n\nsns.lineplot(year2017_wd_store['weekday'],year2017_wd_store['num_sold'],hue=year2017_wd_store['store'],ax=ax[1][0])\nsns.lineplot(year2017_wd_prod['weekday'],year2017_wd_prod['num_sold'],hue=year2017_wd_prod['product'],ax=ax[1][1])\n\nsns.lineplot(year2017_quar_store['quarter'],year2017_quar_store['num_sold'],hue=year2017_quar_store['store'],ax=ax[2][0])\nsns.lineplot(year2017_quar_prod['quarter'],year2017_quar_prod['num_sold'],hue=year2017_quar_prod['product'],ax=ax[2][1])\n\nsns.lineplot(year2017_woy_store['week_of_year'],year2017_woy_store['num_sold'],hue=year2017_woy_store['store'],ax=ax[3][0])\nsns.lineplot(year2017_woy_prod['week_of_year'],year2017_woy_prod['num_sold'],hue=year2017_woy_prod['product'],ax=ax[3][1])\n\nsns.lineplot(year2017_doy_store['day_of_year'],year2017_doy_store['num_sold'],hue=year2017_doy_store['store'],ax=ax[4][0])\nsns.lineplot(year2017_doy_prod['day_of_year'],year2017_doy_prod['num_sold'],hue=year2017_doy_prod['product'],ax=ax[4][1])\n\nplt.show()","fcf1d522":"# month , weekday , quarter , week_of_year\n\n#MONTH\nyear2018_month_store = year2018.groupby(['month','store']).sum().reset_index()\nyear2018_month_prod = year2018.groupby(['month','product']).sum().reset_index()\n\n#WEEKDAY\nyear2018_wd_store = year2018.groupby(['weekday','store']).sum().reset_index()\nyear2018_wd_prod = year2018.groupby(['weekday','product']).sum().reset_index()\n\n#QUARTER\nyear2018_quar_store = year2018.groupby(['quarter','store']).sum().reset_index()\nyear2018_quar_prod = year2018.groupby(['quarter','product']).sum().reset_index()\n\n#WEEK OF YEAR\nyear2018_woy_store = year2018.groupby(['week_of_year','store']).sum().reset_index()\nyear2018_woy_prod = year2018.groupby(['week_of_year','product']).sum().reset_index()\n\n#DAY OF YEAR\nyear2018_doy_store = year2018.groupby(['day_of_year','store']).sum().reset_index()\nyear2018_doy_prod = year2018.groupby(['day_of_year','product']).sum().reset_index()\n","e89c7a56":"warnings.filterwarnings(\"ignore\")\n\nf,ax =plt.subplots(nrows=5, ncols=2 ,figsize=(16,20))\nf.tight_layout()\nf.patch.set_facecolor('#F2EDD7FF')\nfor i in range(0,5):\n    for j in range(0,2):\n        ax[i][j].set_facecolor('#F2EDD7FF')\n        ax[i][j].spines['top'].set_visible(False)\n        ax[i][j].spines['left'].set_visible(False)\n        ax[i][j].spines['right'].set_visible(False)\n        ax[i][j].grid(linestyle=\"--\",axis=\"y\",color='gray')\n\n\nsns.lineplot(year2018_month_store['month'],year2018_month_store['num_sold'],hue=year2018_month_store['store'],ax=ax[0][0])\nsns.lineplot(year2018_month_prod['month'],year2018_month_prod['num_sold'],hue=year2018_month_prod['product'],ax=ax[0][1])\n\nsns.lineplot(year2018_wd_store['weekday'],year2018_wd_store['num_sold'],hue=year2018_wd_store['store'],ax=ax[1][0])\nsns.lineplot(year2018_wd_prod['weekday'],year2018_wd_prod['num_sold'],hue=year2018_wd_prod['product'],ax=ax[1][1])\n\nsns.lineplot(year2018_quar_store['quarter'],year2018_quar_store['num_sold'],hue=year2018_quar_store['store'],ax=ax[2][0])\nsns.lineplot(year2018_quar_prod['quarter'],year2018_quar_prod['num_sold'],hue=year2018_quar_prod['product'],ax=ax[2][1])\n\nsns.lineplot(year2018_woy_store['week_of_year'],year2018_woy_store['num_sold'],hue=year2018_woy_store['store'],ax=ax[3][0])\nsns.lineplot(year2018_woy_prod['week_of_year'],year2018_woy_prod['num_sold'],hue=year2018_woy_prod['product'],ax=ax[3][1])\n\nsns.lineplot(year2018_doy_store['day_of_year'],year2018_doy_store['num_sold'],hue=year2018_doy_store['store'],ax=ax[4][0])\nsns.lineplot(year2018_doy_prod['day_of_year'],year2018_doy_prod['num_sold'],hue=year2018_doy_prod['product'],ax=ax[4][1])\n\nplt.show()","edabbeb6":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\nfrom sklearn.model_selection import train_test_split , cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\n","34812875":"le = LabelEncoder()\ncol_encode = ['country','store','product','is_weekend','is_holiday']\nfor i in col_encode:\n    train_df[i] = le.fit_transform(train_df[i])","d6eb496c":"train_df","d608d318":"train_df=train_df.drop(['year'],axis=1)\n#train_df=train_df.drop(['week_of_year'],axis=1)","0bafb7f4":"#train_df=train_df.drop(['day_of_year'],axis=1)","07ce0879":"y=train_df['num_sold']\nx= train_df.drop(['num_sold'],axis=1)","9ffeea86":"x['week_of_year']=x['week_of_year'].astype('int')\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)","7e435c98":"print(\"Shape of x_train is :\",x_train.shape)\nprint(\"Shape of x_test is :\",x_test.shape)\nprint(\"Shape of y_train is :\",y_train.shape)\nprint(\"Shape of y_test is :\",y_test.shape)","5b60cc76":"'''def SMAPE(y_true,y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    smape=0\n    if(len(y_true)==len(y_pred)):\n        smape = (100\/len(y_true)) * np.sum(2* np.abs(y_pred-y_true)\/(np.abs(y_true)+np.abs(y_pred)))\n    else:\n        return\n    return(smape)'''\n\ndef SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","9fa5419e":"dic_model = {\"RandomForest\":RandomForestRegressor(),\n             'GradientBoosting':GradientBoostingRegressor(),\n            'XGradientBoosting':xgb.XGBRegressor(),\n            'CatBoostRegressor':cb.CatBoostRegressor(),\n            'LightGBM': lgb.LGBMRegressor()}\n\nfor i in dic_model:\n    #Training\n    print(\"Training with \",i+\" Algorithm....\")\n    print()\n    model = dic_model[i].fit(x_train,y_train)\n    \n    #Predicting\n    print(\"Predicting with \",i+\" Model....\")\n    print()\n    prediction = model.predict(x_test)\n    \n    # Using SMAPE for predicting models\n    print(\"SMAPE of \",i+\" Model is \",SMAPE(y_test,prediction))\n    print(\"------------------------------------------------------------------\")\n    print()","f34295e0":"import optuna\ndef objective(trial,data=x,target=y):\n    \n    x_train, x_test, y_train , y_test = train_test_split(x, y, test_size=0.15,random_state=42)\n    #'tree_method':'gpu_hist',  # this parameter means using the GPU when training our model to speedup the training process\n     #'max_depth': trial.suggest_categorical('max_depth', [5,7,9,11,13,15,17,20]),\n           \n    param = {\n        'lambda': trial.suggest_loguniform('lambda', 1e-3, 10.0),\n        'alpha': trial.suggest_loguniform('alpha', 1e-3, 10.0),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.3,0.4,0.5,0.6,0.7,0.8,0.9, 1.0]),\n        'subsample': trial.suggest_categorical('subsample', [0.4,0.5,0.6,0.7,0.8,1.0]),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.008,0.009,0.01,0.012,0.014,0.016,0.018, 0.02]),\n        'n_estimators': trial.suggest_int('n_estimators', 50, 1000),\n        'max_depth': trial.suggest_int('max_depth', 2,20),\n        'random_state': trial.suggest_categorical('random_state', [24, 48,2020]),\n        'min_child_weight': trial.suggest_int('min_child_weight', 1, 300),\n    }\n    \n    model = xgb.XGBRegressor(**param)  \n    \n    model.fit(x_train,y_train,eval_set=[(x_test,y_test)],early_stopping_rounds=100,verbose=False)\n    \n    preds = model.predict(x_test)\n    \n    Smape = SMAPE(y_test,preds)\n    \n    return Smape","3d3d504e":"study_xgb= optuna.create_study(direction='minimize')\nstudy_xgb.optimize(objective, n_trials=50)","d8e71222":"trial_xgb= study_xgb.best_trial\nprint(trial_xgb.value)\nprint(trial_xgb.params)","fbc159a4":"model_xgb = xgb.XGBRegressor(**trial_xgb.params)\nmodel_xgb.fit(x,y)","61b1f4a1":"features = x_train.columns\nfeat_importance = model_xgb.feature_importances_\nprint(feat_importance)\n\nsns.barplot(y= features , x=feat_importance)","c0be2b33":"def objective_lgbm(trial):\n    x_train, x_test, y_train , y_test = train_test_split(x, y, test_size=0.15,random_state=42)\n    \n    n_estimators = trial.suggest_int('n_estimators', 50, 1000)\n    max_depth = int(trial.suggest_int('max_depth', 2, 50))\n    learning_rate=trial.suggest_loguniform('learning_rate',0.001,1)\n    colsample_bytree=trial.suggest_loguniform(\"colsample_bytree\",0.1, 1)\n    num_leaves=trial.suggest_int('num_leaves',10,300)\n    reg_alpha= trial.suggest_loguniform('reg_alpha',0.1,1)\n    reg_lambda= trial.suggest_loguniform('reg_lambda',0.1,1)\n    min_split_gain=trial.suggest_loguniform('min_split_gain',0.1,1)\n    subsample=trial.suggest_loguniform('subsample',0.1,1)    \n    clf = lgb.LGBMRegressor(n_estimators=n_estimators, max_depth=max_depth,\n                            learning_rate=learning_rate,colsample_bytree=colsample_bytree,\n                            num_leaves=num_leaves,reg_alpha=reg_alpha,reg_lambda=reg_lambda,\n                            min_split_gain=min_split_gain,subsample=subsample)\n    \n    clf.fit(x_train,y_train,eval_set=[(x_test,y_test)],early_stopping_rounds=100,verbose=False)\n    \n    preds = clf.predict(x_test)\n    \n    Smape = SMAPE(y_test,preds)\n    \n    return Smape","3f63c84a":"study_lgbm= optuna.create_study(direction='minimize')\nstudy_lgbm.optimize(objective_lgbm, n_trials=50)","02879d7e":"trial_lgbm= study_lgbm.best_trial\nprint(trial_lgbm.value)\nprint(trial_lgbm.params)","2901b3bd":"model_lgbm = lgb.LGBMRegressor(**trial_lgbm.params)\nmodel_lgbm.fit(x,y)","caf29d17":"features = x_train.columns\nfeat_importance = model_lgbm.feature_importances_\nprint(feat_importance)\n\nsns.barplot(y= features , x=feat_importance)","97879501":"#Preprocessing test dataset\nle = LabelEncoder()\ncol_encode = ['country','store','product','is_weekend','is_holiday']\nfor i in col_encode:\n    test_df[i] = le.fit_transform(test_df[i])","60fd11bf":"test_df['week_of_year']=test_df['week_of_year'].astype('int')\n#test_df=test_df.drop(['week_of_year'],axis=1)\ntest_df=test_df.drop(['year'],axis=1)","008e4d72":"#test_df=test_df.drop(['day_of_year'],axis=1)","0fc5afcc":"test_df.head()","12d551c8":"test.head()","cfe5fa22":"pred_f=model_xgb.predict(test_df)\n#pred_lgbm = model_lgbm.predict(test_df)\n","80dc93de":"dataframe=pd.DataFrame({\"row_id\":test['row_id'],'num_sold':pred_f})\n#dataframe=pd.DataFrame({\"row_id\":test['row_id'],'num_sold':pred_lgbm})\ndataframe","2e111109":"dataframe['num_sold']=np.ceil(dataframe['num_sold'])\ndataframe","bf281b62":"#dataframe.to_csv(\"Output_xgb_addedfeatures.csv\",index=False)\ndataframe.to_csv(\"Output_xgb_addedfeatures+Holiday+GDP+ceil.csv\",index=False)","48e7bbcd":"[Slide to Top](#0)\n<a id=2.1><\/a>\n### Country Wise Analysis \ud83d\udea9","69b240f2":"## TEST DATASET","67e894fa":"#### Sweden ","19a3c591":"#### Norway","ba3a22a9":"### YEAR 2018","cab34d4f":"### YEAR 2016","514b0933":"[Slide to Top](#0)\n<a id=2><\/a>\n## Exploratory Data Analysis \ud83d\udcca","b6044640":"## LGBM \ud83d\udc31\u200d\ud83c\udfcd","93682c5d":"### YEAR 2017","be424895":"[Slide to Top](#0)\n<a id=2.2><\/a>\n### Year by Year Analysis \ud83d\udd61 ","6f8acc4a":"[Slide to Top](#0)\n<a  id=1 Swipe to Top><\/a> \n## Basic Overview of Dataset \ud83d\udcfa","f40ec22b":"<a id=0><\/a>\n## Table of Contents \u23e9\n\n* [Basic Overview of Dataset \ud83d\udcfa](#1)\n\n* [Exploratory Data Analysis\ud83d\udcca ](#2) \n  * [Country Wise Analysis \ud83d\udea9](#2.1)\n  * [Year by Year Analysis \ud83d\udd61](#2.2)\n  \n\n* [Modelling and Preprocessing \u270c](#4)\n  ","f45d4ed4":"#### Finland","efadfcf7":"[Slide to Top](#0)\n<a id=4><\/a>\n### Modelling and Preprocessing\u270c","c4aec4c8":"### XGBOOST WITH OPTUNA \ud83d\ude80","d9752099":"* **Thanks  for scrolling down to this in the notebook , please do a upvote if you find this notebook useful \ud83d\ude34**\n\n* **If you have any valuable advice\/technique\/feedback to improve my peroformance , please comment below in comment section \u270c**\n","5c0ea1ce":"### YEAR 2015"}}