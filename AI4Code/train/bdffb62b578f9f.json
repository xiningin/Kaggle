{"cell_type":{"e0b43b26":"code","d186d228":"code","28507839":"code","fa610e50":"code","11f1f4ea":"code","ca724ca2":"code","58f7f5ba":"code","ad6a3201":"code","5bb93991":"code","dbfe3810":"code","8d6337c8":"code","e78bc376":"code","deb54b54":"code","6ecaf6f7":"code","05941f79":"code","e51db839":"code","2d1394cc":"code","02cd1890":"code","c876818d":"code","6677e9de":"code","2e42f5fb":"code","2b9593ce":"markdown","ce39e549":"markdown","66f58cd5":"markdown","25376a86":"markdown"},"source":{"e0b43b26":"! pip install openpyxl","d186d228":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nimport openpyxl\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('display.float_format', lambda x: '%.0f' % x)","28507839":"df = pd.read_excel('\/kaggle\/input\/online-retail\/online_retail.xlsx', sheet_name=\"Year 2010-2011\", engine='openpyxl')","fa610e50":"# Let's next step: Checking Null values:\ndf.isnull().sum()","11f1f4ea":"# Check df:\nprint(f\"Total number of observations:, {df.shape[0]}\")\ncat_cols = [col for col in df.columns if df[col].dtypes == \"O\"]\nprint(f\"Categorical Variables:,{len(cat_cols)}:{cat_cols}\")\nnum_cols = [col for col in df.columns if df[col].dtypes != \"O\"]\nprint(f\"Numerical Variables:,{len(num_cols)}:{num_cols}\")\nnum_but_num = [col for col in df.columns if df[col].nunique() < 4500 and df[col].dtypes != \"O\"]\nprint(f\"Numerical Variables:,{len(num_but_num)}:{num_but_num}\")\ndate_time = [col for col in df.columns if df[col].dtypes == \"datetime64[ns]\"]\nprint(f\"Datetime Variables:,{len(date_time)}:{date_time}\")","ca724ca2":"# Pre-Processing the dataset\ndf.isnull().sum()\n# Drop null:\ndf.dropna(inplace=True)\n# Check df:\ndf.shape\ndf.head()","58f7f5ba":"# Recency: How recently a customer has made a purchase (Today - Last Transaction Day)\n# Frequency: How often a customer makes a purchase\n# Monetary Value: How much money a customer spends on purchases","ad6a3201":"df[\"InvoiceDate\"].max()   \ndf[\"InvoiceDate\"].min()\nthisday=dt.datetime(2011, 12, 12)","5bb93991":"rfm_ = df.groupby('Customer ID').agg({'InvoiceDate': lambda date: (thisday-date.max()).days,\n                                     'Invoice': lambda num: len(num),\n                                     'Price': lambda Price: Price.sum()})\n\nrfm_.columns = ['Recency', 'Frequency', 'Monetary']\n\nrfm_ = rfm_[(rfm_[\"Monetary\"]) > 0 & (rfm_[\"Frequency\"] > 0)]\nrfm_.head()","dbfe3810":"# Scaling:\nrfm_[\"Recency_Score\"] = pd.qcut(rfm_['Recency'], 5, labels=[5, 4, 3, 2, 1])# 1 g\u00fcn \u00f6nce geldiyse 5 puan\nrfm_[\"Frequency_Score\"] = pd.qcut(rfm_['Frequency'], 5, labels=[1, 2, 3, 4, 5])\nrfm_[\"Monetary_Score\"] = pd.qcut(rfm_['Monetary'], 5, labels=[1, 2, 3, 4, 5])","8d6337c8":"# New column is created:\"RFMSCORE\"\nrfm_[\"RFMSCORE\"] = (rfm_['Recency_Score'].astype(str)+rfm_['Frequency_Score'].astype(str)+rfm_['Monetary_Score'].astype(str))","e78bc376":"rfm_.head()","deb54b54":"segment_map = { \n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At_Risk',\n    r'[1-2]5': 'Cant_Loose',\n    r'3[1-2]': 'About_to_Sleep',\n    r'33': 'Need_Attention',\n    r'[3-4][4-5]': 'Loyal_Customers',\n    r'41': 'Promising',\n    r'51': 'New_Customers',\n    r'[4-5][2-3]': 'Potential_Loyalists',\n    r'5[4-5]': 'Champions'}\n\nrfm_['Segment'] = rfm_['Recency_Score'].astype(str) + rfm_['Frequency_Score'].astype(str)\n\nrfm_['Segment'] = rfm_['Segment'].replace(segment_map, regex=True)","6ecaf6f7":"rfm_.reset_index(inplace=True)\nrfm_.head()","05941f79":"# Selected for RFM columns\ndf = rfm_[['Customer ID', 'Recency', 'Frequency', 'Monetary']]","e51db839":"# 0-1 Recency - Frequency - Monetary scaling:\nsc = MinMaxScaler((0, 1))\ndf[['Recency', 'Frequency', 'Monetary']] = sc.fit_transform(df[['Recency', 'Frequency', 'Monetary']])","2d1394cc":"df.head()","02cd1890":"# Determining Cluster, k=6\nfrom yellowbrick.cluster import KElbowVisualizer\nkmeans = KMeans()\nelbow = KElbowVisualizer(kmeans, k=(2, 20))\nelbow.fit(df[['Recency', 'Frequency', 'Monetary']])\nelbow.show()","c876818d":"# Kmeans fitting for model \n\nkmeans = KMeans(n_clusters=6).fit(df[['Recency', 'Frequency', 'Monetary']])\nkumeler = kmeans.labels_\n","6677e9de":"# \"kumeler\" is added as array to \"cluster no\":\nrfm_[\"cluster_no\"] = kumeler\n\n# Cluster No is starting with 1:\nrfm_[\"cluster_no\"] = rfm_[\"cluster_no\"] + 1\n\n# Let's checking:\nrfm_.head()\n\n# Grouping by Recency - Frequency - Monetary:\nrfm_.groupby(\"cluster_no\").agg(['count', 'mean']).reset_index()","2e42f5fb":"# Finally: RFM and Clustering via K means method\nrfm_.head()","2b9593ce":"**** K MEANS ****","ce39e549":"###############################################################\n#       Calculating RFM Metrics          #\n###############################################################\n","66f58cd5":"**Dataset Story :**\n* The Online Retail II data set, which includes the sales data of the UK-based online sales store, was used.\n* Sales data between 01\/12\/2009 - 09\/12\/2011 are included in the data set.\n* The product catalog of this company includes souvenirs.\n* There is also information that most of its customers are wholesalers.\n\n**Variables:**\n* InvoiceNo: Invoice Number -> If this code starts with C, it means that the operation has been canceled.\n* StockCode: Product Code -> Unique number for each product\n* Description: Product name\n* Quantity: Number of products -> how many of the products on the invoices were sold.\n* InvoiceDate\n* UnitePrice\n* CustomerID: Unique customer number\n* Country","25376a86":"###############################################################\n#       Importing \/ Pre-Processing         #\n###############################################################"}}