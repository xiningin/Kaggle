{"cell_type":{"c0c534cf":"code","17ce3358":"code","0d1a6de8":"code","808df8cf":"code","66e33064":"code","21860bb8":"code","6810b484":"code","a6d13ddd":"code","44746597":"code","c4fa8161":"code","b580197f":"code","bc2b2511":"code","c5c0e7f8":"code","267953f8":"code","3daac08b":"code","58f06ab8":"code","7ced960e":"code","c79efd3e":"code","9701228e":"code","9f86f476":"code","bf3c509a":"code","70fd4e42":"code","155b0580":"code","00928a42":"code","8d7c8c93":"code","15097df1":"code","0dc8dd99":"code","26a26098":"code","58038a4e":"code","007da554":"code","ccc45ac6":"code","d3848025":"code","e490fac4":"code","de3104b6":"code","dfe2c985":"code","81d403da":"code","0aeea6c9":"code","44d0da93":"code","4e4dd22a":"code","a1234a69":"markdown","5d23e1d6":"markdown","2e5a08a0":"markdown","d02ef085":"markdown","801fa7ee":"markdown","61eaa711":"markdown","68c35893":"markdown","f17791ec":"markdown","db74f8a3":"markdown","6c666dda":"markdown","b83acb9f":"markdown","2df75c55":"markdown","0902dca8":"markdown","d5139e8c":"markdown","2f56cd05":"markdown","022c9673":"markdown","ddc18264":"markdown","0ddd3c68":"markdown","206088c3":"markdown","70c3a085":"markdown","eb674953":"markdown","b65c6265":"markdown","e62b6cc9":"markdown","e9ddca38":"markdown","385901c4":"markdown","64cda1e8":"markdown","c371bc9f":"markdown"},"source":{"c0c534cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom datetime import datetime\nfrom scipy.stats import skew  # for some statistics\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nfrom sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom mlxtend.regressor import StackingCVRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n","17ce3358":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","0d1a6de8":"train.shape, test.shape","808df8cf":"train.head()","66e33064":"test.head()","21860bb8":"train.drop(['Id'], axis=1, inplace=True)\ntest.drop(['Id'], axis=1, inplace=True)","6810b484":"train['SalePrice'].hist(bins = 40)","a6d13ddd":"train = train[train.GrLivArea < 4500]\ntrain.reset_index(drop=True, inplace=True)\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\ny = train['SalePrice'].reset_index(drop=True)","44746597":"train['SalePrice'].hist(bins = 40)","c4fa8161":"train_features = train.drop(['SalePrice'], axis=1)\ntest_features = test\nfeatures = pd.concat([train_features, test_features]).reset_index(drop=True)","b580197f":"features.shape","bc2b2511":"\n# Since these column are actually a category , using a numerical number will lead the model to assume\n# that it is numerical , so we convert to string .\nfeatures['MSSubClass'] = features['MSSubClass'].apply(str)\nfeatures['YrSold'] = features['YrSold'].astype(str)\nfeatures['MoSold'] = features['MoSold'].astype(str)\n\n\n\n## Filling these columns With most suitable value for these columns \nfeatures['Functional'] = features['Functional'].fillna('Typ') \nfeatures['Electrical'] = features['Electrical'].fillna(\"SBrkr\") \nfeatures['KitchenQual'] = features['KitchenQual'].fillna(\"TA\") \nfeatures[\"PoolQC\"] = features[\"PoolQC\"].fillna(\"None\")\n\n\n\n## Filling these with MODE , i.e. , the most frequent value in these columns .\nfeatures['Exterior1st'] = features['Exterior1st'].fillna(features['Exterior1st'].mode()[0]) \nfeatures['Exterior2nd'] = features['Exterior2nd'].fillna(features['Exterior2nd'].mode()[0])\nfeatures['SaleType'] = features['SaleType'].fillna(features['SaleType'].mode()[0])\n","c5c0e7f8":"### Missing data in GarageYrBit most probably means missing Garage , so replace NaN with zero . \n\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    features[col] = features[col].fillna(0)\n\nfor col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    features[col] = features[col].fillna('None')\n\n    \n### Same with basement\n\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    features[col] = features[col].fillna('None')\n","267953f8":"features['MSZoning'] = features.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))","3daac08b":"objects = []\nfor i in features.columns:\n    if features[i].dtype == object:\n        objects.append(i)\nfeatures.update(features[objects].fillna('None'))\nprint(objects)\n","58f06ab8":"# We are still filling up missing values \nfeatures['LotFrontage'] = features.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n\nnumeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumerics = []\nfor i in features.columns:\n    if features[i].dtype in numeric_dtypes:\n        numerics.append(i)\nfeatures.update(features[numerics].fillna(0))\nnumerics[1:10]","7ced960e":"numeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumerics2 = []\nfor i in features.columns:\n    if features[i].dtype in numeric_dtypes:\n        numerics2.append(i)\nskew_features = features[numerics2].apply(lambda x: skew(x)).sort_values(ascending=False)\n\nhigh_skew = skew_features[skew_features > 0.5]\nskew_index = high_skew.index\n\nfor i in skew_index:\n    features[i] = boxcox1p(features[i], boxcox_normmax(features[i] + 1))","c79efd3e":"# Removing features that are not very useful . This can be understood only by doing proper EDA on data\n\nfeatures = features.drop(['Utilities', 'Street', 'PoolQC',], axis=1)\n\n\n# Adding new features . Make sure that you understand this. \n\nfeatures['YrBltAndRemod']=features['YearBuilt']+features['YearRemodAdd']\nfeatures['TotalSF']=features['TotalBsmtSF'] + features['1stFlrSF'] + features['2ndFlrSF']\n\nfeatures['Total_sqr_footage'] = (features['BsmtFinSF1'] + features['BsmtFinSF2'] +\n                                 features['1stFlrSF'] + features['2ndFlrSF'])\n\nfeatures['Total_Bathrooms'] = (features['FullBath'] + (0.5 * features['HalfBath']) +\n                               features['BsmtFullBath'] + (0.5 * features['BsmtHalfBath']))\n\nfeatures['Total_porch_sf'] = (features['OpenPorchSF'] + features['3SsnPorch'] +\n                              features['EnclosedPorch'] + features['ScreenPorch'] +\n                              features['WoodDeckSF'])\n","9701228e":"## For ex, if PoolArea = 0 , Then HasPool = 0 too\n\nfeatures['haspool'] = features['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['has2ndfloor'] = features['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['hasgarage'] = features['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['hasbsmt'] = features['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['hasfireplace'] = features['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","9f86f476":"features.shape","bf3c509a":"final_features = pd.get_dummies(features).reset_index(drop=True)\nfinal_features.shape","70fd4e42":"X = final_features.iloc[:len(y), :]\nX_sub = final_features.iloc[len(y):, :]\nX.shape, y.shape, X_sub.shape","155b0580":"outliers = [30, 88, 462, 631, 1322]\nX = X.drop(X.index[outliers])\ny = y.drop(y.index[outliers])\n\noverfit = []\nfor i in X.columns:\n    counts = X[i].value_counts()\n    zeros = counts.iloc[0]\n    if zeros \/ len(X) * 100 > 99.94:\n        overfit.append(i)\n\noverfit = list(overfit)\nX = X.drop(overfit, axis=1)\nX_sub = X_sub.drop(overfit, axis=1)\noverfit","00928a42":"X.shape, y.shape, X_sub.shape","8d7c8c93":"# defining error functions for handy use. \n\n\nkfolds = KFold(n_splits=10, shuffle=True, random_state=42)\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef cv_rmse(model, X=X):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=kfolds))\n    return (rmse)","15097df1":"alphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]\nalphas2 = [5e-05, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]\ne_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\ne_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]","0dc8dd99":"ridge = make_pipeline(RobustScaler(), RidgeCV(alphas=alphas_alt, cv=kfolds))\nlasso = make_pipeline(RobustScaler(), LassoCV(max_iter=1e7, alphas=alphas2, random_state=42, cv=kfolds))\nelasticnet = make_pipeline(RobustScaler(), ElasticNetCV(max_iter=1e7, alphas=e_alphas, cv=kfolds, l1_ratio=e_l1ratio))                                \nsvr = make_pipeline(RobustScaler(), SVR(C= 20, epsilon= 0.008, gamma=0.0003,))","26a26098":"gbr = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=4, max_features='sqrt', min_samples_leaf=15, min_samples_split=10, loss='huber', random_state =42)                             ","58038a4e":"lightgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=5000,\n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                       verbose=-1,\n                                       )","007da554":"xgboost = XGBRegressor(learning_rate=0.01,n_estimators=3460,\n                                     max_depth=3, min_child_weight=0,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1, seed=27,\n                                     reg_alpha=0.00006)","ccc45ac6":"stack_gen = StackingCVRegressor(regressors=(ridge, lasso, elasticnet, gbr, xgboost, lightgbm),\n                                meta_regressor=xgboost,\n                                use_features_in_secondary=True)","d3848025":"# Using various prediction models that we just created \n\n\nscore = cv_rmse(ridge , X)\nscore = cv_rmse(lasso , X)\nprint(\"LASSO: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(elasticnet)\nprint(\"elastic net: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(svr)\nprint(\"SVR: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(lightgbm)\nprint(\"lightgbm: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(gbr)\nprint(\"gbr: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(xgboost)\nprint(\"xgboost: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )","e490fac4":"print('START Fit')\n\nprint('stack_gen')\nstack_gen_model = stack_gen.fit(np.array(X), np.array(y))\n\nprint('elasticnet')\nelastic_model_full_data = elasticnet.fit(X, y)\n\nprint('Lasso')\nlasso_model_full_data = lasso.fit(X, y)\n\nprint('Ridge')\nridge_model_full_data = ridge.fit(X, y)\n\nprint('Svr')\nsvr_model_full_data = svr.fit(X, y)\n\nprint('GradientBoosting')\ngbr_model_full_data = gbr.fit(X, y)\n\nprint('xgboost')\nxgb_model_full_data = xgboost.fit(X, y)\n\nprint('lightgbm')\nlgb_model_full_data = lightgbm.fit(X, y)","de3104b6":"def blend_models_predict(X):\n    return ((0.1 * elastic_model_full_data.predict(X)) + \\\n            (0.05 * lasso_model_full_data.predict(X)) + \\\n            (0.1 * ridge_model_full_data.predict(X)) + \\\n            (0.1 * svr_model_full_data.predict(X)) + \\\n            (0.1 * gbr_model_full_data.predict(X)) + \\\n            (0.15 * xgb_model_full_data.predict(X)) + \\\n            (0.1 * lgb_model_full_data.predict(X)) + \\\n            (0.3 * stack_gen_model.predict(np.array(X))))","dfe2c985":"print('RMSLE score on train data:')\nprint(rmsle(y, blend_models_predict(X)))","81d403da":"print('Predict submission')\nsubmission = pd.read_csv(\"..\/input\/sample_submission.csv\")\nsubmission.iloc[:,1] = (np.expm1(blend_models_predict(X_sub)))","0aeea6c9":"'''print('Blend with Top Kernels submissions\\n')\nsub_1 = pd.read_csv('..\/input\/top-10-0-10943-stacking-mice-and-brutal-force\/House_Prices_submit.csv')\nsub_2 = pd.read_csv('..\/input\/hybrid-svm-benchmark-approach-0-11180-lb-top-2\/hybrid_solution.csv')\nsub_3 = pd.read_csv('..\/input\/lasso-model-for-regression-problem\/lasso_sol22_Median.csv')\nsubmission.iloc[:,1] = np.floor((0.25 * np.floor(np.expm1(blend_models_predict(X_sub)))) + \n                                (0.25 * sub_1.iloc[:,1]) + \n                                (0.25 * sub_2.iloc[:,1]) + \n                                (0.25 * sub_3.iloc[:,1]))'''\n","44d0da93":"q1 = submission['SalePrice'].quantile(0.0042)\nq2 = submission['SalePrice'].quantile(0.99)\n# Quantiles helping us get some extreme values for extremely low or high values \nsubmission['SalePrice'] = submission['SalePrice'].apply(lambda x: x if x > q1 else x*0.77)\nsubmission['SalePrice'] = submission['SalePrice'].apply(lambda x: x if x < q2 else x*1.1)\nsubmission.to_csv(\"submission.csv\", index=False)","4e4dd22a":"submission.head()","a1234a69":"### As you can see below , the data is now more balanced , suitable for training and prediction purposes","5d23e1d6":"## Get_dummies converts Categorical data to numerical , as models don't work with Text data .\n* each category gets its different columns , mostly binary . \n* Know more : https:\/\/riptutorial.com\/pandas\/example\/20990\/one-hot-encoding-with--get-dummies---","2e5a08a0":"## Here , we compare the various models that we just created..","d02ef085":"### Turns out we have dropped just one column (Compare the shape)","801fa7ee":"# Blending Models \/ 'Ensambling'\n* Notice that we are using a few percent from different models to get our final answer , all decimals add up to 1","61eaa711":"## The training data has 1460 rows and 81 columns , testing data has 80 columns \n","68c35893":"## Here , Again train and test are spilt back seperately , as now all data processing is done . \n* Y is taget and its length is used to split ","f17791ec":"### Now , we are merging train and test datasets , so that we can handle *** 'noise'*** and ***missing data*** in the dataset . ","db74f8a3":"## Step 1 : Import Statements\n\n","6c666dda":"* K-Folds cross-validator\n\n* Provides train\/test indices to split data in train\/test sets. Split dataset into k consecutive folds (without shuffling by default).\n\n* Each fold is then used once as a validation while the k - 1 remaining folds form the training set.","b83acb9f":"### Here , we are also blending(Read: Ensambling) with the data availiable from other 'top' public Kernels .\n* This helps our model generalize on unseen data pretty well","2df75c55":"## Stacking \nStacking is an ensemble learning technique to combine multiple regression models via a meta-regressor. The StackingCVRegressor extends the standard stacking algorithm (implemented as StackingRegressor) using out-of-fold predictions to prepare the input data for the level-2 regressor.\n\nIn the standard stacking procedure, the first-level regressors are fit to the same training set that is used prepare the inputs for the second-level regressor, which may lead to overfitting. The StackingCVRegressor, however, uses the concept of out-of-fold predictions: the dataset is split into k folds, and in k successive rounds, k-1 folds are used to fit the first level regressor. In each round, the first-level regressors are then applied to the remaining 1 subset that was not used for model fitting in each iteration. The resulting predictions are then stacked and provided -- as input data -- to the second-level regressor. After the training of the StackingCVRegressor, the first-level regressors are fit to the entire dataset for optimal predicitons.\n\n\nMore : http:\/\/rasbt.github.io\/mlxtend\/user_guide\/regressor\/StackingCVRegressor\/\nI encourage that you read more about stacking.\n\n![](http:\/\/rasbt.github.io\/mlxtend\/user_guide\/regressor\/StackingCVRegressor_files\/stacking_cv_regressor_overview.png)\n\n\n### In simple words , Stacking helps avoid fitting on the same data twice , and is effective in reducing overfitting.\n","0902dca8":"### We take log as logs are used to respond to skewness towards large values; i.e., cases in which one or a few points are much larger than the bulk of the data. ","d5139e8c":"## Step 2 : Data processing \n\n1. Remove Outliers \n2. Fill up NULL and missing data . Most models can't handle them.","2f56cd05":"# Submission","022c9673":"## Removing outliers . Read other Kernels to understand how they were found out.\n* A few were already stated by the dataset provider , others can be seen by plotting them in a graph","ddc18264":"### Storing ***SalePrice*** column seperately , as it is the 'Y' label \/ target that our model will learn to predict. Not to be stored in 'X' or features.","0ddd3c68":"GroupBy explained here : https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.groupby.html\n\n### This code will filll the missing values with the mode (The frequently category appearing) By each MSsubclass:\n","206088c3":"...... Leaving out the ID column , as it doesn't add any information for our model. ","70c3a085":"### SalePrice is not uniformly distributed and is skewed towards the left . Therefore , we use log1p to remove the skewness .","eb674953":"![](https:\/\/blog.minitab.com\/hubfs\/Imported_Blog_Media\/distribution_plot-1.jpg) \n### We are going to transform skewed columns\n![.](https:\/\/blog.minitab.com\/hubfs\/Imported_Blog_Media\/transformation.jpg)After transforming\n\nKnow more about  boxcox transform here : http:\/\/blog.minitab.com\/blog\/applying-statistics-in-quality-projects\/how-could-you-benefit-from-a-box-cox-transformation","b65c6265":"## Now we have 86 columns , having added around 7 more to our data ","e62b6cc9":"Understandably so , no. of columns is increased .","e9ddca38":"# Final Step :\n# Now , we are getting started with the process of modelling","385901c4":" ### Fill the remaining columns as **None**","64cda1e8":"## A quick look at the train and test sets \n","c371bc9f":"## For missing values in numerical cols , we fillNa with 0."}}