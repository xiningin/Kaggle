{"cell_type":{"58aa629d":"code","3e434238":"code","5e73b8d5":"code","d5e8bd86":"code","488d0961":"code","88e629a7":"code","0ed5832a":"code","1c634009":"code","f823edc3":"code","204f7030":"code","c510b5ec":"markdown","d6373d3b":"markdown","025935e0":"markdown","173c9c8c":"markdown","3f026ba9":"markdown","dc343a7b":"markdown"},"source":{"58aa629d":"import numpy as np \nimport pandas as pd \nimport random\nfrom sklearn.datasets import make_classification\nfrom sklearn import preprocessing\n!pip install random_name  # install random_name package. internet must be ON (in Settings on the right)\nimport random_name\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3e434238":"NUM_SUB_DATASETS = 512\nNUM_SAMPLES = 1024\nNUM_FEATURES = 255\nMAX_SEED = 2**32 - 1\n\ndef funny_names(X):\n    random.seed(253689)\n    kaggle_words = ['golden',\n                    'learn',\n                    'noise',\n                    'goose',\n                    'master',\n                    'novice',\n                    'expert',\n                    'grandmaster',\n                    'contributor',\n                    'kernel',\n                    'dataset',\n                    'fimbus',\n                    'fepid',\n                    'pembus',\n                    'sumble',\n                    'hint',\n                    'ordinal',\n                    'distraction',\n                    'important',\n                    'dummy',\n                    'sorted',\n                    'unsorted',\n                    'gaussian',\n                    'entropy',\n                    'discard'\n                   ]\n    return pd.DataFrame(X, columns=[random_name.generate_name() + '-' + random.choice(kaggle_words)  for x in range(0,len(X[0]))])\n\ndef create_dataset(random_seed):\n    random.seed(3 + random_seed) #setting a seed for the randint() call below\n    X,y = make_classification(n_samples=NUM_SAMPLES, \n                             n_features=NUM_FEATURES, \n                             n_informative=random.randint(33,47),\n                             n_redundant=0,\n                             n_repeated=0,\n                             n_classes=2,\n                             n_clusters_per_class=3,\n                             weights=None,\n                             flip_y=0.05,\n                             class_sep=1.0,\n                             hypercube=True,\n                             shift=0.0,\n                             scale=1.0,\n                             shuffle=True,\n                             random_state=random_seed)\n    df = funny_names(X)\n    df['wheezy-copper-turtle-magic'] = random_seed\n    df = df.sample(frac=1, axis=1, random_state=random_seed, replace=False) # Shuffle column order so magic variable isn't last\n    df['target'] = y\n    return df","5e73b8d5":"seed_list = random.sample(range(1,MAX_SEED), NUM_SUB_DATASETS)\ndf = pd.concat([create_dataset(s) for s in seed_list], axis=0, sort = False).reset_index(drop=True)\ndf = df.sample(frac=1, random_state=9726).reset_index(drop=True) # Shuffle rows\n\n# Label encode our 'magic' variable\nle = preprocessing.LabelEncoder()\nle.fit(df['wheezy-copper-turtle-magic'])\ndf['wheezy-copper-turtle-magic'] = le.transform(df['wheezy-copper-turtle-magic']) \n\ntrain = pd.read_csv('..\/input\/train.csv') # read in train.csv for comparison and columns ordering\n#test = pd.read_csv('..\/input\/test.csv')","d5e8bd86":"train.head()","488d0961":"df.head()","88e629a7":"train['muggy-smalt-axolotl-pembus'].sort_values()[0:10]  # a quick check of sorted values demonstrate that we did not get the exact values in train and df but the distributions look similar\n","0ed5832a":"df['muggy-smalt-axolotl-pembus'].sort_values()[0:10]","1c634009":"train['muggy-smalt-axolotl-pembus'].describe()","f823edc3":"df['muggy-smalt-axolotl-pembus'].describe()","204f7030":"col_names = train.columns\ndf = df.reindex(col_names[1:], axis=1)  # sort df to match the order of columns in train\n\nprint(\"df shape = {}, train shape = {}\".format(df.shape,train.shape))\n#print(df.shape, train.shape) # id column is missing in the generate set since William likely added it later during Train \/ Test \/ Private_Test split\ndf.head()  # last quick look after sorting columns\n\ndf.to_csv('all.csv', index=False)  # output the generated set to .csv","c510b5ec":"**Define helper functions, set seed and other variables**","d6373d3b":"**Disclamer: I am new to Python so there is a decent chance I've messed up. As you will see below the values do not match exactly the original train set values. I may be missing another seed value.\n\nThis script is a copy of the code released by William Cukierski who generated 'Instant Gratification' dataset. [William Cukierski's code](https:\/\/www.kaggle.com\/c\/instant-gratification\/discussion\/96519#latest-561446)","025935e0":"**Code that generates 'Instant Gratification Dataset'** *(or, more precisely, a dataset similar to the original)*","173c9c8c":"**Generate dataset**","3f026ba9":"**Import packages**","dc343a7b":"**Quick spot-check and output to .csv**"}}