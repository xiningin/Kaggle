{"cell_type":{"213f9f69":"code","c6b480f0":"code","4c5b6349":"code","35c2d0ee":"code","5b70e97d":"code","fd552279":"code","0947314d":"code","1e2c8e81":"code","4528b89d":"code","c58e9cb1":"code","0ac1c3fd":"code","10313332":"code","34cc82c0":"code","9bbaf3cb":"code","8dd72027":"code","1058c25f":"code","904b9243":"code","1118381e":"code","74c6aed6":"code","557ce86a":"code","37e1a6f9":"code","aa8552b6":"code","7a022666":"code","e11e12e6":"markdown","980ddb06":"markdown","4bc0b13f":"markdown","8f91fa32":"markdown","684396eb":"markdown","a170cece":"markdown","8fb32986":"markdown","3a31b0d7":"markdown","52bcbff5":"markdown","1b8c8114":"markdown","81e14046":"markdown","8b1790ec":"markdown","aa6b600f":"markdown","3f6e0d51":"markdown","753b8394":"markdown","76924547":"markdown","f2cdd6df":"markdown"},"source":{"213f9f69":"import sys,os\n\nimport pandas as pd, numpy as np, matplotlib.pyplot as plt\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c6b480f0":"train  = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv')\ntrain['ToLeft'] = train.PlayDirection.apply(lambda play_direction:play_direction=='left')\ntrain['IsBallCarrier'] = train[['NflId','NflIdRusher']].apply(lambda row:row.NflId==row.NflIdRusher, axis=1)\n\nteam_abbr_map = {\n    'ARI':'ARZ',\n    'BAL':'BLT',\n    'CLE':'CLV',\n    'HOU':'HST'\n}\ntrain.VisitorTeamAbbr = train.VisitorTeamAbbr.apply(lambda vta:team_abbr_map[vta] if vta in team_abbr_map.keys() else vta)\ntrain.HomeTeamAbbr = train.HomeTeamAbbr.apply(lambda vta:team_abbr_map[vta] if vta in team_abbr_map.keys() else vta)","4c5b6349":"sample_chart_v1 = train[train.ToLeft==True][['PlayId','ToLeft']].sample(3).merge(train, how='inner')\nsample_chart_v1 = sample_chart_v1.append(train[train.ToLeft==False][['PlayId','ToLeft']].sample(3).merge(train, how='inner'))\nsample_chart_v1","35c2d0ee":"plt.figure(figsize=(30, 15))\nplt.suptitle('Sample plays')\ni=1\nfor gp,chance in sample_chart_v1.groupby('PlayId'):\n    play_id = gp\n    rusher = chance[chance.NflId==chance.NflIdRusher]\n    home = chance[chance.Team=='home']\n    away = chance[chance.Team=='away']\n    #yard_line_left = offense.YardLine.iloc[0]+10 # yard_line \u52a010\u504f\u79fb\u91cf\uff0c\u8fd9\u4e2a10\u662f\u5de6\u4fa7\u7684\u8fbe\u9635\u533a\n    #yard_line_right = offense.YardLine.iloc[0]+2*(50-offense.YardLine.iloc[0])+10\n    #yard_line = yard_line_left if np.abs(yard_line_left-rusher.X.iloc[0])<=(yard_line_right-rusher.X.iloc[0]) else yard_line_right\n    \n    plt.subplot(3,2,i)\n    i+=1\n    plt.xlim(0,120)# 0~120\u5df2\u7ecf\u5305\u542b\u4e86\u8fbe\u9635\u533a\uff0c\u5b9e\u9645\u573a\u5185\u53ea\u6709100\u7801\uff0c\u7801\u7ebf\u4e5f\u662f0~100\u7684\u8303\u56f4\n    plt.ylim(-10,63)\n    plt.scatter(list(home.X),list(home.Y),marker='o',c='red',s=55,alpha=0.5,label='HOME')\n    plt.scatter(list(away.X),list(away.Y),marker='o',c='green',s=55,alpha=0.5,label='AWAY')\n    plt.scatter(list(rusher.X),list(rusher.Y),marker='o',c='black',s=30,label='RUSHER')\n    \n    for line in range(10,130,10):\n        plt.plot([line,line],[-100,100],c='black',linewidth=1,linestyle=':')\n    \n    #plt.plot([yard_line,yard_line],[-100,100],c='orange',linewidth=1.5)\n    plt.plot([10,10],[-100,100],c='green',linewidth=3) # down zone left\n    plt.plot([110,110],[-100,100],c='green',linewidth=3) # down zone right\n    \n    plt.title(play_id)\n    plt.legend()\n\nplt.show()","5b70e97d":"train_1 = train.copy()\ntrain_1['TeamOnOffense'] = train_1[['PossessionTeam','HomeTeamAbbr']].apply(lambda row:'home' if row.PossessionTeam==row.HomeTeamAbbr else 'away', axis=1)\ntrain_1['IsOnOffense'] = train_1[['TeamOnOffense','Team']].apply(lambda row:row.TeamOnOffense==row.Team , axis=1)\ntrain_1['YardsFromOwnGoal'] = train_1[['FieldPosition','PossessionTeam','YardLine']].apply(lambda row:row.YardLine if row.FieldPosition==row.PossessionTeam else 50+(50-row.YardLine), axis=1)\ntrain_1['YardsFromOwnGoal'] = train_1[['YardsFromOwnGoal','YardLine']].apply(lambda row:50 if row.YardLine==50 else row.YardsFromOwnGoal, axis=1)\ntrain_1['X_std'] = train_1[['ToLeft','X']].apply(lambda row:120-row.X-10 if row.ToLeft else row.X-10, axis=1)\ntrain_1['Y_std'] = train_1[['ToLeft','Y']].apply(lambda row:160\/3-row.Y if row.ToLeft else row.Y, axis=1)\ntrain_1[['Team','FieldPosition','PossessionTeam','TeamOnOffense','IsOnOffense','YardLine','YardsFromOwnGoal','X','X_std','Y','Y_std']].sample(10)","fd552279":"sample_chart_v2 = sample_chart_v1.merge(train_1, how='inner')\nsample_chart_v2","0947314d":"plt.figure(figsize=(30, 15))\nplt.suptitle(\"Sample plays, standardized, Offense moving left to right\")\nplt.xlabel(\"Distance from offensive team's own end zone\")\nplt.ylabel(\"Y coordinate\")\n\ni=1\nfor gp,chance in sample_chart_v2.groupby('PlayId'):\n    play_id = gp\n    rusher = chance[chance.NflId==chance.NflIdRusher].iloc[0]\n    offense = chance[chance.IsOnOffense]\n    defense = chance[~chance.IsOnOffense]\n    \n    plt.subplot(3,2,i)\n    i+=1\n    plt.xlim(0,120)\n    plt.ylim(-10,63)\n    \n    plt.scatter(offense.X_std,offense.Y_std,marker='o',c='red',s=55,alpha=0.5,label='OFFENSE')\n    plt.scatter(defense.X_std,defense.Y_std,marker='o',c='green',s=55,alpha=0.5,label='DEFENSE')\n    plt.scatter([rusher.X_std],[rusher.Y_std],marker='o',c='black',s=30,label='RUSHER')\n    \n    for line in range(10,130,10):\n        plt.plot([line,line],[-100,100],c='silver',linewidth=0.8,linestyle='-')\n    \n    plt.plot([rusher.YardsFromOwnGoal,rusher.YardsFromOwnGoal],[-100,100],c='black',linewidth=1.5,linestyle=':')\n    plt.plot([10,10],[-100,100],c='black',linewidth=2)\n    plt.plot([110,110],[-100,100],c='black',linewidth=2)\n    \n    plt.title(play_id)\n    plt.legend()\n\nplt.show()","1e2c8e81":"def voronoi_finite_polygons_2d(vor, radius=None):\n    \"\"\"\n    Reconstruct infinite voronoi regions in a 2D diagram to finite\n    regions.\n\n    Parameters\n    ----------\n    vor : Voronoi\n        Input diagram\n    radius : float, optional\n        Distance to 'points at infinity'.\n\n    Returns\n    -------\n    regions : list of tuples\n        Indices of vertices in each revised Voronoi regions.\n    vertices : list of tuples\n        Coordinates for revised Voronoi vertices. Same as coordinates\n        of input vertices, with 'points at infinity' appended to the\n        end.\n\n    \"\"\"\n\n    if vor.points.shape[1] != 2:\n        raise ValueError(\"Requires 2D input\")\n\n    new_regions = []\n    new_vertices = vor.vertices.tolist()\n\n    center = vor.points.mean(axis=0)\n    if radius is None:\n        radius = vor.points.ptp().max()\n\n    # Construct a map containing all ridges for a given point\n    all_ridges = {}\n    for (p1, p2), (v1, v2) in zip(vor.ridge_points, vor.ridge_vertices):\n        all_ridges.setdefault(p1, []).append((p2, v1, v2))\n        all_ridges.setdefault(p2, []).append((p1, v1, v2))\n\n    # Reconstruct infinite regions\n    for p1, region in enumerate(vor.point_region):\n        vertices = vor.regions[region]\n\n        if all(v >= 0 for v in vertices):\n            # finite region\n            new_regions.append(vertices)\n            continue\n\n        # reconstruct a non-finite region\n        ridges = all_ridges[p1]\n        new_region = [v for v in vertices if v >= 0]\n\n        for p2, v1, v2 in ridges:\n            if v2 < 0:\n                v1, v2 = v2, v1\n            if v1 >= 0:\n                # finite ridge: already in the region\n                continue\n\n            # Compute the missing endpoint of an infinite ridge\n\n            t = vor.points[p2] - vor.points[p1] # tangent\n            t \/= np.linalg.norm(t)\n            n = np.array([-t[1], t[0]])  # normal\n\n            midpoint = vor.points[[p1, p2]].mean(axis=0)\n            direction = np.sign(np.dot(midpoint - center, n)) * n\n            far_point = vor.vertices[v2] + direction * radius\n\n            new_region.append(len(new_vertices))\n            new_vertices.append(far_point.tolist())\n\n        # sort region counterclockwise\n        vs = np.asarray([new_vertices[v] for v in new_region])\n        c = vs.mean(axis=0)\n        angles = np.arctan2(vs[:,1] - c[1], vs[:,0] - c[0])\n        new_region = np.array(new_region)[np.argsort(angles)]\n\n        # finish\n        new_regions.append(new_region.tolist())\n\n    return new_regions, np.asarray(new_vertices)","4528b89d":"from scipy.spatial import Voronoi\n\nplt.figure(figsize=(12, 8))\nplt.suptitle(\"Sample plays, standardized, Offense moving left to right\")\nplt.xlabel(\"Distance from offensive team's own end zone\")\nplt.ylabel(\"Y coordinate\")\n\nsample_20171120000963 = train_1[train_1.PlayId==20171120000963].copy()\nfor gp,chance in sample_20171120000963.groupby('PlayId'):\n    play_id = gp\n    rusher = chance[chance.NflId==chance.NflIdRusher].iloc[0]\n    offense = chance[chance.IsOnOffense]\n    defense = chance[~chance.IsOnOffense]\n    \n    plt.subplot(1,1,1)\n    i+=1\n    \n    x_min, x_max = chance.X_std.min()-2, chance.X_std.max()+2\n    y_min, y_max = chance.Y_std.min()-2, chance.Y_std.max()+2\n    #plt.xlim(8,50) # \u7279\u5b9a\n    plt.xlim(x_min,x_max)\n    #plt.ylim(5,40) # \u7279\u5b9a\n    plt.ylim(y_min,y_max)\n    #plt.plot([x_min,x_min,x_max,x_max,x_min],[y_min,y_max,y_max,y_min,y_min],c='black',linewidth=1.5)\n    \n    vor = Voronoi(np.array([[row.X_std,row.Y_std] for index, row in chance.iterrows()]))\n    regions, vertices = voronoi_finite_polygons_2d(vor)\n    for region in regions:\n        polygon = vertices[region]\n        plt.plot(*zip(*polygon),c='black',alpha=0.8)\n    \n    plt.scatter(offense.X_std,offense.Y_std,marker='o',c='green',s=55,alpha=0.5,label='OFFENSE')\n    plt.scatter(defense.X_std,defense.Y_std,marker='o',c='red',s=55,alpha=0.5,label='DEFENSE')\n    plt.scatter([rusher.X_std],[rusher.Y_std],marker='o',c='black',s=30,label='RUSHER')\n    \n    for line in range(10,130,10):\n        plt.plot([line,line],[-100,100],c='silver',linewidth=0.8,linestyle='-')\n    \n    plt.plot([rusher.YardsFromOwnGoal,rusher.YardsFromOwnGoal],[-100,100],c='black',linewidth=1.5,linestyle=':')\n    plt.plot([10,10],[-100,100],c='black',linewidth=2)\n    plt.plot([110,110],[-100,100],c='black',linewidth=2)\n    \n    plt.title(play_id)\n    plt.legend()\n\nplt.show()","c58e9cb1":"# plt.figure(figsize=(12, 8))\n# plt.suptitle(\"Sample plays, standardized, Offense moving left to right\")\n# plt.xlabel(\"Distance from offensive team's own end zone\")\n# plt.ylabel(\"Y coordinate\")\n\nfor gp,chance in sample_20171120000963.groupby('PlayId'):\n    play_id = gp\n    rusher = chance[chance.NflId==chance.NflIdRusher].iloc[0]\n    offense = chance[chance.IsOnOffense]\n    defense = chance[~chance.IsOnOffense]\n    \n#     plt.subplot(1,1,1)\n    i+=1\n    x_min, x_max = chance.X_std.min()-2, chance.X_std.max()+2\n    y_min, y_max = chance.Y_std.min()-2, chance.Y_std.max()+2\n#     plt.xlim(x_min,x_max)\n#     plt.ylim(y_min,y_max)\n    \n    vor = Voronoi(np.array([[row.X_std,row.Y_std] for index, row in defense.append(rusher).iterrows()]))\n    from scipy.spatial import voronoi_plot_2d\n    fig = voronoi_plot_2d(vor,show_vertices=False,point_size=0.1,linewidth=2)\n    fig.set_size_inches(12,8)\n    #vor = Voronoi(np.array([[row.X_std,row.Y_std] for index, row in offense.iterrows()]))\n    #vor = Voronoi(np.array([[row.X_std,row.Y_std] for index, row in chance.iterrows()]))\n#     regions, vertices = voronoi_finite_polygons_2d(vor)\n#     for region in regions:\n#         polygon = vertices[region]\n#         plt.plot(*zip(*polygon),c='black',alpha=0.8)\n    \n    #plt.scatter(offense.X_std,offense.Y_std,marker='o',c='green',s=55,alpha=0.5,label='OFFENSE')\n    plt.scatter(defense.X_std,defense.Y_std,marker='o',c='red',s=55,alpha=0.5,label='DEFENSE')\n    plt.scatter([rusher.X_std],[rusher.Y_std],marker='o',c='black',s=30,label='RUSHER')\n    \n    for line in range(10,130,10):\n        plt.plot([line,line],[-100,100],c='silver',linewidth=0.8,linestyle='-')\n    \n    plt.plot([rusher.YardsFromOwnGoal,rusher.YardsFromOwnGoal],[-100,100],c='black',linewidth=1.5,linestyle=':')\n    plt.plot([10,10],[-100,100],c='black',linewidth=2)\n    plt.plot([110,110],[-100,100],c='black',linewidth=2)\n    \n#     plt.title(play_id)\n#     plt.legend()\n\nplt.show()","0ac1c3fd":"df_bc = train_1[train_1.IsBallCarrier][['DisplayName','PossessionTeam','PlayId','Dir','ToLeft','PlayDirection','IsOnOffense','X_std','Y_std','YardsFromOwnGoal','Down','Distance','Yards']].copy()","10313332":"import seaborn as sns\nplt.figure(figsize=(10, 5))\ng = sns.FacetGrid(df_bc, col=\"ToLeft\", height=4, aspect=.5)\ng = g.map(plt.hist, \"Dir\")\nplt.show()","34cc82c0":"df_bc['Dir_std_1'] = df_bc[['ToLeft','Dir']].apply(lambda row:row.Dir+360 if (row.ToLeft and row.Dir<90) else row.Dir, axis=1)\ndf_bc['Dir_std_1'] = df_bc[['ToLeft','Dir','Dir_std_1']].apply(lambda row:row.Dir-360 if ((not row.ToLeft) and row.Dir>270) else row.Dir_std_1, axis=1)","9bbaf3cb":"plt.figure(figsize=(10, 5))\ng = sns.FacetGrid(df_bc, col=\"ToLeft\", height=4, aspect=.5)\ng = g.map(plt.hist, \"Dir_std_1\")\nplt.show()","8dd72027":"df_bc['Dir_std_2'] = df_bc[['ToLeft','Dir_std_1']].apply(lambda row:row.Dir_std_1-180 if row.ToLeft else row.Dir_std_1, axis=1)","1058c25f":"plt.figure(figsize=(10, 5))\ng = sns.FacetGrid(df_bc, col=\"ToLeft\", height=4, aspect=.5)\ng = g.map(plt.hist, \"Dir_std_2\")\nplt.show()","904b9243":"df_bc[df_bc.PlayId==20170910001102][['PlayId','DisplayName','Dir','ToLeft','PlayDirection','X_std','Y_std','YardsFromOwnGoal','Dir_std_1','Dir_std_2','Yards']]","1118381e":"df_bc[df_bc.PlayId==20170910000081][['PlayId','DisplayName','Dir','ToLeft','PlayDirection','X_std','Y_std','YardsFromOwnGoal','Dir_std_1','Dir_std_2','Yards']]","74c6aed6":"train_2 = train_1.copy()\ntrain_2['Dir_std_1'] = train_2[['ToLeft','Dir']].apply(lambda row:row.Dir+360 if (row.ToLeft and row.Dir<90) else row.Dir, axis=1)\ntrain_2['Dir_std_1'] = train_2[['ToLeft','Dir','Dir_std_1']].apply(lambda row:row.Dir-360 if ((not row.ToLeft) and row.Dir>270) else row.Dir_std_1, axis=1)\ntrain_2['Dir_std_2'] = train_2[['ToLeft','Dir_std_1']].apply(lambda row:row.Dir_std_1-180 if row.ToLeft else row.Dir_std_1, axis=1)\ntrain_2['X_std_end'] = train_2[['Dir_std_2','X_std','S']].apply(lambda row:row.S*np.cos((90-row.Dir_std_2)*np.pi\/180.)+row.X_std, axis=1)\ntrain_2['Y_std_end'] = train_2[['Dir_std_2','Y_std','S']].apply(lambda row:row.S*np.sin((90-row.Dir_std_2)*np.pi\/180.)+row.Y_std, axis=1)\n\nsample_20170910001102 = train_2[train_2.PlayId==20170910001102].copy()\nsample_20170910001102","557ce86a":"plt.figure(figsize=(12, 8))\nplt.suptitle(\"Playid:20170910001102\")\nplt.xlabel(\"Distance from offensive team's own end zone\")\nplt.ylabel(\"Y coordinate\")\n\nfor gp,chance in sample_20170910001102.groupby('PlayId'):\n    play_id = gp\n    rusher = chance[chance.NflId==chance.NflIdRusher].iloc[0]\n    offense = chance[chance.IsOnOffense]\n    defense = chance[~chance.IsOnOffense]\n    \n    plt.subplot(1,1,1)\n    i+=1\n    \n    x_min, x_max = chance.X_std.min()-5, chance.X_std.max()+5\n    y_min, y_max = chance.Y_std.min()-5, chance.Y_std.max()+5\n    plt.xlim(x_min,x_max)\n    plt.ylim(y_min,y_max)\n    \n    plt.scatter(offense.X_std,offense.Y_std,marker='o',c='green',s=55,alpha=0.5,label='OFFENSE')\n    plt.scatter(defense.X_std,defense.Y_std,marker='o',c='red',s=55,alpha=0.5,label='DEFENSE')\n    plt.scatter([rusher.X_std],[rusher.Y_std],marker='o',c='black',s=30,label='RUSHER')\n    \n    for idx, row in chance.iterrows():\n        _color='black' if row.IsBallCarrier else('green' if row.IsOnOffense else 'red')\n        plt.arrow(row.X_std,row.Y_std,row.X_std_end-row.X_std,row.Y_std_end-row.Y_std,width=0.05,head_width=0.3,ec=_color,fc=_color)\n    \n    for line in range(10,130,10):\n        plt.plot([line,line],[-100,100],c='silver',linewidth=0.8,linestyle='-')\n    \n    plt.plot([rusher.YardsFromOwnGoal,rusher.YardsFromOwnGoal],[-100,100],c='black',linewidth=1.5,linestyle=':')\n    plt.plot([10,10],[-100,100],c='black',linewidth=2)\n    plt.plot([110,110],[-100,100],c='black',linewidth=2)\n    \n    plt.title(play_id)\n    plt.legend()\n\nplt.show()","37e1a6f9":"df_bc['IsSuccess'] = df_bc[['Down','Distance','Yards']].apply(lambda row: row.Yards>=(row.Distance\/2) if row.Down in [1,2] else row.Yards>=row.Distance, axis=1)","aa8552b6":"df_bc['AngleRound'] = df_bc.Dir_std_2.apply(lambda ds2:np.round(ds2\/15)*15)","7a022666":"plt.figure(figsize=(30, 70))\n# plt.suptitle(\"Team senor(FAKE)\")\n# plt.xlabel(\"Team\")\n# plt.ylabel(\"Success rate\")\nplt.subplots_adjust(wspace=0.5, hspace=0.5)\ni=1\nfor idx,row in df_bc[['PossessionTeam','AngleRound','IsSuccess']].groupby(['PossessionTeam']):\n    plt.subplot(9,4,i)\n    i+=1\n    row.groupby('AngleRound').IsSuccess.mean().plot.bar()\n    plt.title(row.PossessionTeam.iloc[0])\n    plt.legend()\nplt.show()","e11e12e6":"Next, building on Eliot's code, I'll make one sonar for each team, representing where each team tends to run (and how well they do when they run in each direction). ","980ddb06":"# NFL tracking: wrangling, Voronoi, and sonars\n\nPython for [NFL tracking: wrangling, Voronoi, and sonars](https:\/\/www.kaggle.com\/statsbymichaellopez\/nfl-tracking-wrangling-voronoi-and-sonars), and thanks for sharing","4bc0b13f":"In the above plot, the blue team is always on offense, and the red team is always on defense. The blue team is also always moving left to right. The dotted line corresponds to where the play started -- if `Yards == 0`, that means that the ball carrier was tackled on or about the dotted line. If `Yards > 0`, the ball carrier ended the play to the right of the dotted line, and if `Yards < 0`, the ball carrier ended the play to the left of the dotted line.\n\n## 2. Player space and Voronoi areas\n\nOne critical element of the contest will be deriving football-specific features that correspond to the amount of space that the ball carrier has. The more space around him (in particular, the more space in front of him as he moves from left to right), the easier it is for him to gain yards. \n\nAs one way to think about space, Voronoi diagrams partition each location on the field to the nearest player. It's a start as one thinks about where a running back could move.","8f91fa32":"## 3. Player direction\n\nNext, our goal is to make use of the `Direction` variable. The direction in which a player is moving is based on the change in his `X` and `Y` coordinates over time, and as shown in the [schema](https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/data), this is relative to the side in which his team is moving and the movement of each play. \n\nThere are two primary reason for standardizing `Direction`.\n\nFirst, if we want to use player direction on its own as a variable, **a statistical model is going to have a difficult time untangling the raw data feed.** For example, 135 degrees and 315 degrees could be the same direction, or they could be different, depending on the `Direction` variabile, which indicates where the entire offensive unit is facing. \n\nSecond, standardizing directions is needed if we are to replicate the soccer paper ([link](http:\/\/www.lukebornn.com\/papers\/fernandez_ssac_2018.pdf)) referenced above. For example, identifying the **fraction of space in front of the ball carrier that the offense owns (or that the ball carrier owns)** would assuredly be a variable that would lead to more accurate model projections. This is potentially easier to parse out when direction is standardized.\n\nI'm going to standardize `Dir` as follows:\n\n- 0 degrees: the offensive player is moving completely to his left  \n- 90 degrees: the offensive player is moving straight ahead, towards opponent end zone\n- 180 degrees: the offensive player is moving completely to his right\n- 270 degrees: the offensive player is moving backwards, towards his own team's end zone (this is generally bad)\n\nFirst, I filter to only include the ball carrier (`IsBallCarrier`, as defined above). I later standardize direction for all players, but I'm starting with the ball carrier because his movement is likely most relevant to predictions.  \n\nNext, I make a histogram, faceted by `PlayDirection` to highlight the funny behavior of ball carrier directions. ","684396eb":"The above distributions certainly look similar within each facet.\n\nAs examples, let's take a look at two plays. First, here's a 14-yard run from Mike Tolbert (`PlayId == 20170910001102`). In the data, we see:","a170cece":"If you review the Tolbert handoff above, each players' movement at handoff should look similar to what's depicted above. \n\n## 5. Running back sonars\n\nSoccer analyst Eliot McKinley has a series of plots ([Ex 1](https:\/\/twitter.com\/etmckinley\/status\/1046389278153068545), [Ex 2, with code](https:\/\/github.com\/etmckinley\/PassSonar)) that I'll shamelessly replicate with our ball carrier data. The idea of the sonar is to highlight the directions where ball carriers tend to move, while also providing some context regarding the success of those movements.\n\nAs a relatively basic definition of play success, I'll use `IsSuccess`, defined below, which corresponds to whether or not the ball carrier gained half of the required yardage (or more) needed for a first down (`Yards >= Distance\/2`) on any first or second down rush, and whether or not a first down was gained (`Yards >= Distance`) for any third or fourth down rush. ","8fb32986":"Taking the above code, we'll plot the standardized `X` and `Y` variables, similar to what we did above. We also created the `YardsFromOwnGoal` variable -- in football language, this is the line of scrimmage. More importantly, we've ensured the `YardsFromOwnGoal`, unlike `YardLine`, treats each side of the field differently. For example, if `YardLine == 25`, that could mean the possession team has 75 yards to go for a touchdown, or it could mean it has 25 yards to go for a touchdown. \n\nAnyways, here's a set of plots where each team is moving left to right. ","3a31b0d7":"It's really hard to tell which team is on offense! Even though the ball carrier is highlighted in black, the inconsistency from one play to the next is less than ideal. Sometimes the away team is on offense, other times the home team is on offense. And they're both potentially moving left or moving right. \n\nOur ultimate goal will be to ensure that the offensive team (`PossessionTeam`) is moving left to right, even if in the raw data, the offense is moving right to left. \n\nThe following set of code will get us there.","52bcbff5":"Certainly, the area around the ball carrier (and perhaps the area around his teammates (the players in blue) will be related to the Yards gained. \n\nWant a VIP hint? Consider a spatial diagram weights the area on the field by player speed. See [http:\/\/www.lukebornn.com\/papers\/fernandez_ssac_2018.pdf](http:\/\/www.lukebornn.com\/papers\/fernandez_ssac_2018.pdf) for one example in soccer, and last year's winning Big Data Bowl entry ([link](https:\/\/operations.nfl.com\/media\/3670\/big-data-bowl-sfu.pdf)). \n\nAlternatively, the Voronoi diagram below removes all the players but the ball carrier (below). This allows the focus to be on the running back, as his teammates shouldn't exactly be counting against him. ","1b8c8114":"Teams that tend to run the ball up the middle include Baltimore, Tennessee, Denver, and Dallas, while Seattle, Kansas City, and the LA Rams tend to ball carriers moving more towards the sideline. Cleveland tended to have more run plays with the ball carrier moving right, while Minnesota was more left-side heavy. ","81e14046":"On plays to the left, angles are clustered between 180 and 360, with a handful of angles around 0 to 15 degrees. This can be tricky --  5 degrees should be treated like 365 degrees, even though it doesn't show up that way on the chart. Similarly, among players moving to the right `PlayDirection == \"right\"`, there are a handful of player angles around 350 degrees with most players facing between 0 and 180 degrees. \n\nThe first step in my standardizations are to clean up the above histograms. There are assuredly ways to do this whole thing in one line of code, but I'm erring on the side of being cautious. ","8b1790ec":"In this play, Tolbert's teammate LeSean McCoy takes the ball and moves to his right.\n\n![](https:\/\/media.giphy.com\/media\/mBwPxbGLGNjpLSpenx\/giphy.gif)\n\nEven though the same team has the ball in the same game as the play above, the offense is now moving right to left (`PlayDirection == \"left\")`. \n\nNext, despite the fact that the play occured in nearly the same spot on the field as the Tolbert carry above, the standardized `X_std == 19.35`, indicating that McCoy received the ball 19 yards from his own goal. In this example, the maximum yards gained for McCoy would be (100-`YardsFromOwnGoal` = 75). \n\nFinally, for McCoy's `Dir == 327.14`. This could be confusing to think about -- but when standardized, `Dir_std_2 == 147.14`, which means he's moving to his right while also moving upfield. \n\nAltogether, hopefully this clarifies some of how the standardized coordinates, yardline, and player direction (`Dir`) work on a football field. \n\n## 4. Angle charts using player direction\n\nTo show how the standardization of `Dir` would work for all players on a given play, let's expand across the larger data set of all players on the Mike Tolbert running play above. Each player will be shown with an arrow that corresponds to how fast he was moving, and in which direction, at the time of handoff. *Note*: speed (`S`, in yards per second) and direction (`Dir_std_2`, my standardized direction) are used to create each vector. R uses radians instead of degrees (hence the multiplication by `pi\/180`), and I subtract each angle from 90 (`90-Dir_std_2)`) to ensure that the angles match the direction in which teams are moving on my figure. \n\nRoughly, the end of the arrow corresponds to where players are expected to end up a second after the handoff. \n","aa6b600f":"# Dealing with player tracking data\n\nOne initial but tricky issue when working with NFL player tracking data is that sometimes players are moving left to right down the field, and other times those same players are moving right to left. In this walk-through, I do the following:\n\n1. Standardize player tracking coordinates so that offensive units are moving in the same direction throughout the entirety of the game, while also sharing tweaks that should be made regarding team names.\n\n2. Create a sample Voronoi diagram using tracking coordinates. \n\n3. Standardize the direction variable for the ball carrier, and provide video to represent of that standardization manifests itself within a play.\n\n4. Create angle charts for player movement at a snapshot of time within a play. \n\n5. Create sonar maps for player direction.\n\n## 1. Standardizing coordinates\n\nOne recommended technique for working with this data is to standardize play directions, so that the offensive team is always moving in the same direction. This idea is particularly important for this year's Big Data Bowl event on Kaggle, where many participants will look to engineer football-specific features. \n\nTo start off, let's read in the data, creating a dummy variable for plays moving left to right (`ToLeft`), as well as an indicator for whether or not the player is the ball carrier (`IsBallCarrier`). \n\nNext, I add in a few tweaks to account for different factors between the `PossessionTeam`\/`FieldPosition` variables and the `HomeTeamAbbr`\/`VisitorTeamAbbr`.","3f6e0d51":"Let's see what six plays look like. Below, I take three plays in each direction","753b8394":"On screen, we see the following play\n\n![](https:\/\/media.giphy.com\/media\/ckZnw8Nm0bwbRm99fl\/giphy.gif)\n\nAt the moment of the handoff (when a ball carrier gets the ball), Tolbert is moving as much to the left as he is moving forward. In our code, a few aspects of the play line up:\n\n- `ToLeft == FALSE` and `PlayDirection == \"right\"`: the offense is moving right. Note that this is dependent on the angle of the camera at each home stadia, but here, it matches up\n- `X_std == 73.38` and `YardsFromOwnGoal == 78`. The offense started the play 78 yards from its own goalline, but Tolbert got the ball a few yards behind that mark. Were Tolbert to have been tackled right where he took the handoff, it would've been a loss of 4 or 5 yards (e.g., `Yards == -4`). Instead, he moved 14 yards past the line of scrimmage. In this example, the maximum yards gained for Tolbert would be (100-`YardsFromOwnGoal` = 22). \n- The standardized direction does not change from the original direction. 0 degrees would represent Tolbert moving directly to his left, 90 degrees would be Tolbert moving straight ahead, and 180 degrees would be Tolbert moving directly to his right. If Tolbert was at 270 degrees on this standardized variable, he'd be running the wrong way!\n\nHere's a second play.","76924547":"If this notebook help u a little bit, please upvote me, and let more kagger get this, thx, :)","f2cdd6df":"The plots above certainly look more symmetric.\n\nTo complete the standardization, I subtract each standardized direction (`Dir_std_1`) from 180 among plays where the offense was moving to the left. Thus, all angles in `Dir_std_2` will correspond to the offense moving right. "}}