{"cell_type":{"e19c6b3d":"code","db7f3a36":"code","80a1c62a":"code","3cd596b2":"code","23319ee3":"code","ba56ff5b":"code","95f5331a":"code","a044319e":"code","64cce397":"code","282eeb0c":"code","ab27f333":"markdown","f01d33f8":"markdown","71563df0":"markdown","eef0699e":"markdown","e24cbb7b":"markdown","a8255df8":"markdown","5f7761e7":"markdown"},"source":{"e19c6b3d":"!pip install -q git+https:\/\/github.com\/rosawojciech\/kaggle-gcs.git\nfrom kagglegcs import kaggle_gcs_client, gcs_info\ngcs_info()","db7f3a36":"from kaggle_secrets import UserSecretsClient\nkgc = kaggle_gcs_client(username = 'wrrosa', key = UserSecretsClient().get_secret(\"kaggleapikey\")) \n# optional argument \"command\", i.e. on my local machine command = \"\/home\/wrosa\/.local\/bin\/kaggle\"","80a1c62a":"%%time\nkgc.get_gcs_path('cdeotte\/melanoma-128x128')","3cd596b2":"%%time\nkgc.get_gcs_path('cdeotte\/melanoma-128x128')","23319ee3":"%%time\nkgc.get_gcs_path('cdeotte\/melanoma-256x256')","ba56ff5b":"%%time\nkgc = kaggle_gcs_client()\nkgc.cache_gcs_paths(['cdeotte\/melanoma-128x128','cdeotte\/melanoma-256x256','cdeotte\/melanoma-384x384','cdeotte\/melanoma-512x512'])","95f5331a":"%%time\nprint(kgc.get_gcs_path('cdeotte\/melanoma-128x128'))\nprint(kgc.get_gcs_path('cdeotte\/melanoma-256x256'))\nprint(kgc.get_gcs_path('cdeotte\/melanoma-384x384'))\nprint(kgc.get_gcs_path('cdeotte\/melanoma-512x512'))","a044319e":"from kagglegcs import gcs_available, get_gcs_path\ngcs_available()[:10]","64cce397":"melanoma_ds = gcs_available('melanoma-[0-9]+x*')\nmelanoma_ds","282eeb0c":"for fi in melanoma_ds:\n    print(fi+': '+get_gcs_path(fi))","ab27f333":"## Initialize kaggle_gcs_client\nBefore using kaggle_gcs_client please obtain kaggle API key for your account (discussion with organisers [here](https:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification\/discussion\/172233)). After this you can set up kaggle API manually, or pass arguments username and key:","f01d33f8":"## Cache\nNow, mechanism behind this magic, is to push notebook to Kaggle and retrieve results. Therefore, for saving time, it's a good practice to first list all of your needed datasets, and then run get_gcs_path():","71563df0":"# kaggle-gcs\nHello Kagglers! This notebook presents kaggle-gcs python utility package, for retrieving gcs bucket addresses. You can install from github:","eef0699e":"Another example:","e24cbb7b":"By running it for the second time, it will restore cached path:","a8255df8":"And simply run:","5f7761e7":"# Other functions (soon depreceated)\n"}}