{"cell_type":{"86069a62":"code","6c1ae16a":"code","d4b5a420":"code","50a72816":"code","3e1a3521":"code","db325b61":"code","229436fe":"code","5cdbaa0c":"code","5e11aef7":"code","ae93fc8e":"code","26d6b4b6":"code","5aa7b261":"code","f57ae4cd":"code","29870f65":"code","cbfeb513":"code","40e93d9a":"code","b3321c08":"code","eeff881e":"code","b04b6365":"code","794c8bad":"code","be92c307":"code","cf4686ac":"code","caac7f57":"code","64f0528d":"code","1ab78b34":"code","839c50f6":"code","4cfb5550":"code","bc639152":"code","6d27a5e6":"code","aa53aced":"code","ccf85f79":"code","87a6393d":"code","1499789f":"code","8cfb9b66":"code","b5dda026":"code","e7e746ca":"code","06c95e4b":"code","5672b318":"code","2c142773":"code","23da6f58":"code","94a73dcb":"code","91453c0f":"code","ab4b6972":"code","93d996a8":"code","08a9a5bc":"code","08dacd61":"markdown","b485c8fb":"markdown","44238550":"markdown","05cde4f4":"markdown","14e9d67e":"markdown","aa40f9de":"markdown","a04b745e":"markdown","ef9b76fc":"markdown","9bbce0e5":"markdown","ca09578e":"markdown","ee2e30ff":"markdown","4860028f":"markdown","fdca0431":"markdown","0ae69c7a":"markdown"},"source":{"86069a62":"data_types_dict = {\n    'row_id': 'int64',\n    'timestamp': 'int64',\n    'user_id': 'int32',\n    'content_id': 'int16',\n#     'content_type_id': 'int8',\n#     'task_container_id': 'int16',\n#     'user_answer': 'int8',\n    'answered_correctly': 'int8',\n    'prior_question_elapsed_time': 'float16',\n    'prior_question_had_explanation': 'boolean'\n}","6c1ae16a":"import pandas as pd\ntrain_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv', \n                       nrows=10**7,\n                       usecols = data_types_dict.keys(),\n                       dtype=data_types_dict, \n                       index_col = 0)","d4b5a420":"grouped_by_user_df = train_df.groupby('user_id')","50a72816":"grouped_by_user_df.agg({'timestamp': 'max'}).hist(bins = 100)","3e1a3521":"(train_df['answered_correctly']==-1).mean()","db325b61":"train_questions_only_df = train_df[train_df['answered_correctly']!=-1]\ntrain_questions_only_df['answered_correctly'].mean()","229436fe":"grouped_by_user_df = train_questions_only_df.groupby('user_id')","5cdbaa0c":"user_answers_df = grouped_by_user_df.agg({'answered_correctly': ['mean', 'count'] })\n\nuser_answers_df[('answered_correctly','mean')].hist(bins = 100)","5e11aef7":"user_answers_df[('answered_correctly','count')].hist(bins = 100)","ae93fc8e":"(user_answers_df[('answered_correctly','count')]< 50).mean()","26d6b4b6":"user_answers_df[user_answers_df[('answered_correctly','count')]< 50][('answered_correctly','mean')].mean()","5aa7b261":"user_answers_df[user_answers_df[('answered_correctly','count')]< 50][('answered_correctly','mean')].hist(bins = 100)","f57ae4cd":"user_answers_df[user_answers_df[('answered_correctly','count')] >= 50][('answered_correctly','mean')].hist(bins = 100)","29870f65":"user_answers_df[user_answers_df[('answered_correctly','count')] >= 50][('answered_correctly','mean')].mean()","cbfeb513":"user_answers_df[user_answers_df[('answered_correctly','count')] >= 500][('answered_correctly','mean')].hist(bins = 100)","40e93d9a":"import matplotlib.pyplot as plt\nplt.scatter(x = user_answers_df[('answered_correctly','count')], y=user_answers_df[ ('answered_correctly','mean')])","b3321c08":"grouped_by_content_df = train_questions_only_df.groupby('content_id')","eeff881e":"content_answers_df = grouped_by_user_df.agg({'answered_correctly': ['mean', 'count'] })","b04b6365":"content_answers_df[('answered_correctly','count')].hist(bins = 100)","794c8bad":"content_answers_df[('answered_correctly','mean')].hist(bins = 100)","be92c307":"content_answers_df[content_answers_df[('answered_correctly','count')]>50][('answered_correctly','mean')].hist(bins = 100)","cf4686ac":"train_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                       usecols = data_types_dict.keys(),\n                       dtype=data_types_dict, \n                       index_col = 0)","caac7f57":"features_part_df = train_df.iloc[:int(9 \/10 * len(train_df))]\ntrain_part_df = train_df.iloc[int(9 \/10 * len(train_df)):]","64f0528d":"train_questions_only_df = features_part_df[features_part_df['answered_correctly']!=-1]\ngrouped_by_user_df = train_questions_only_df.groupby('user_id')\nuser_answers_df = grouped_by_user_df.agg({'answered_correctly': ['mean', 'count']}).copy()\nuser_answers_df.columns = ['mean_user_accuracy', 'questions_answered']\n# user_features_dict = user_answers_df.to_dict('index')","1ab78b34":"features_part_df = train_df.iloc[:int(9 \/10 * len(train_df))]\ntrain_part_df = train_df.iloc[int(9 \/10 * len(train_df)):]","839c50f6":"train_questions_only_df = features_part_df[features_part_df['answered_correctly']!=-1]\ngrouped_by_user_df = train_questions_only_df.groupby('user_id')\nuser_answers_df = grouped_by_user_df.agg({'answered_correctly': ['mean', 'count']}).copy()\nuser_answers_df.columns = ['mean_user_accuracy', 'questions_answered']\n# user_features_dict = user_answers_df.to_dict('index')","4cfb5550":"grouped_by_content_df = train_questions_only_df.groupby('content_id')\ncontent_answers_df = grouped_by_content_df.agg({'answered_correctly': ['mean', 'count'] }).copy()\ncontent_answers_df.columns = ['mean_accuracy', 'question_asked']\n# user_features_dict = conten_answers_df.to_dict('index')","bc639152":"del train_df\ndel features_part_df\ndel grouped_by_user_df\ndel grouped_by_content_df","6d27a5e6":"import gc\ngc.collect()","aa53aced":"import numpy as np\nquestions = pd.read_csv('..\/input\/riiid-test-answer-prediction\/questions.csv', \n                        names=['content_id', 'q_bundle_id', 'q_correct_answer', 'q_part', 'q_tags'], header=0) \ndef ppp(x):\n    try:\n        if len(x) == 0:\n            return np.nan\n        else:\n            return int(x.split()[0])\n    except:\n        return np.nan\nquestions['q_tags'] = questions['q_tags'].fillna('').map(ppp)\nquestions.drop('q_bundle_id', axis=1, inplace=True)\nquestions.set_index('content_id')","ccf85f79":"features = ['timestamp','mean_user_accuracy', 'questions_answered','mean_accuracy', 'question_asked', 'prior_question_elapsed_time', 'prior_question_had_explanation',\n           'q_correct_answer', 'q_part', 'q_tags']\ntarget = 'answered_correctly'","87a6393d":"train_part_df = train_part_df[train_part_df[target] != -1]","1499789f":"train_part_df = train_part_df.merge(user_answers_df, how = 'left', on = 'user_id')\ntrain_part_df = train_part_df.merge(content_answers_df, how = 'left', on = 'content_id')\ntrain_part_df = train_part_df.merge(questions, how = 'left', on = 'content_id')","8cfb9b66":"train_part_df['prior_question_had_explanation'] = train_part_df['prior_question_had_explanation'].fillna(value = False).astype(bool)\ntrain_part_df.fillna(value = -1, inplace = True)","b5dda026":"train_part_df.columns","e7e746ca":"train_part_df = train_part_df[features + [target]]","06c95e4b":"train_part_df","5672b318":"from sklearn.metrics import roc_auc_score","2c142773":"from lightgbm import LGBMClassifier","23da6f58":"lgbm = LGBMClassifier(\n    boosting_type='gbdt', \n    num_leaves=31, \n    max_depth=- 1, \n    n_estimators=60, \n    min_child_samples=1000, \n    subsample=0.6, \n    subsample_freq=1, \n    n_jobs= 2\n)","94a73dcb":"lgbm.fit(train_part_df[features], train_part_df[target])","91453c0f":"roc_auc_score(train_part_df[target].values, lgbm.predict_proba(train_part_df[features])[:,1])","ab4b6972":"import riiideducation\n\nenv = riiideducation.make_env()","93d996a8":"iter_test = env.iter_test()","08a9a5bc":"for (test_df, sample_prediction_df) in iter_test:\n    test_df = test_df.merge(user_answers_df, how = 'left', on = 'user_id')\n    test_df = test_df.merge(content_answers_df, how = 'left', on = 'content_id')\n    test_df = test_df.merge(questions, how = 'left', on = 'content_id')\n    test_df['prior_question_had_explanation'] = test_df['prior_question_had_explanation'].fillna(value = False).astype(bool)\n    test_df.fillna(value = -1, inplace = True)\n\n    test_df['answered_correctly'] = lgbm.predict_proba(test_df[features])[:,1]\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","08dacd61":"54% of users answered less than 50 questions. Let's divide all users into novices and active users","b485c8fb":"Different questions have different popularity and complexity, and it can also be used in the baseline.","44238550":"**Answers by content**","05cde4f4":"Let's try to use discovered features and use them in model to predict the right answer probability.","14e9d67e":"### Training data is in the competition dataset as usual\nIt's larger than will fit in memory with default settings, so we'll specify more efficient datatypes and only load a subset of the data for now.","aa40f9de":"Answered correctly\u00b6","a04b745e":"On average users answer ~66% questions correctly. Let's look how it is different from user to user.","ef9b76fc":"**Answers by users**","9bbce0e5":"## In-depth Introduction\nFirst let's import the module and create an environment.","ca09578e":"Timestamp, the average score for the active user, and the number of questions answered can be useful for baseline.","ee2e30ff":"We can see that active users do much better than novices. But anyway average user score is lower than the overall % of correct answers. It means heavy users have even better scores. Let's look at them.","4860028f":"Look's noisy, let's clear it a little bit","fdca0431":"~2% of activities are lectures, we should exclude them for answers analysis.","0ae69c7a":"# Riiid! Answer Correctness Prediction\n**Concept taken from @Ilia Start Notebook**\n## Introduction\nIn this competition you will predict which questions each student is able to answer correctly. You will loop through a series of batches of questions. Once you make that prediction, you can move on to the next batch.\n\nThis competition is different from most Kaggle Competitions in that:\n* You can only submit from Kaggle Notebooks\n* You must use our custom **`riiideducation`** Python module.  The purpose of this module is to control the flow of information to ensure that you are not using future data to make predictions.  If you do not use this module properly, your code may fail.\n\n## In this Starter Notebook, we'll show how to use the **`riiideducation`** module to get the test features and make predictions.\n## TL;DR: End-to-End Usage Example\n```\nimport riiideducation\nenv = riiideducation.make_env()\n\n# Training data is in the competition dataset as usual\ntrain_df = pd.read_csv('\/kaggle\/input\/riiideducation\/train.csv', low_memory=False)\ntrain_my_model(train_df)\n\nfor (test_df, sample_prediction_df) in iter_test:\n    test_df['answered_correctly'] = 0.5\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])```\nNote that `train_my_model` and `make_my_predictions` are functions you need to write for the above example to work."}}