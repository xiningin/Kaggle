{"cell_type":{"f7cce3fa":"code","4d05de2d":"code","61f41fff":"code","e0f6f64d":"code","2e758637":"code","a240595d":"code","0e475199":"code","4856e334":"code","3ec284cc":"code","91b5e28b":"code","81aa60e9":"code","282378e0":"code","4a034656":"code","441259e8":"code","5f31464a":"code","7c16b4a5":"code","9bd3df46":"code","ecbb5655":"code","c21af5cd":"markdown","b5b086ec":"markdown","d5cfb6f7":"markdown","70dda09d":"markdown","4b9c7d01":"markdown","6ae0f499":"markdown","8158e1d3":"markdown","fb184ef5":"markdown"},"source":{"f7cce3fa":"import pandas as pd\nfrom pycaret.regression import *\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.pipeline import Pipeline, make_pipeline, make_union, FeatureUnion\nfrom sklearn.impute import SimpleImputer, KNNImputer\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler, OneHotEncoder\nfrom sklearn.linear_model import Ridge, LinearRegression, Lasso, ElasticNet\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn import set_config; set_config(display='diagram')\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor, VotingRegressor","4d05de2d":"def transform_data(X):\n    X.date = pd.to_datetime(X.date)\n    X['month'] = X.date.dt.month\n    X['hour'] = X.date.dt.hour\n    X['year'] = X.date.dt.year\n    X['day'] = X.date.dt.day\n    X['day_of_year'] = X['date'].dt.dayofyear\n    X['week_of_year'] = X['date'].dt.weekofyear\n    X['day_of_month'] = X['date'].dt.days_in_month\n    X['day_of_week'] = X['date'].dt.dayofweek\n    X['weekday'] = X['date'].dt.weekday\n    X = X.drop(['date'], axis = 1)\n    return X","61f41fff":"df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv', index_col = 'row_id')\nX_test = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv', index_col = 'row_id')","e0f6f64d":"X = df.drop(['num_sold'], axis = 1)\nX_train = transform_data(X)\nX_test = transform_data(X_test)\ny_train = df.num_sold","2e758637":"train = pd.concat([X_train, y_train], axis=1)","a240595d":"# Credit to https:\/\/www.kaggle.com\/c\/web-traffic-time-series-forecasting\/discussion\/36414\ndef SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","0e475199":"reg = setup(data = train,\n            train_size = 0.7,\n            target = 'num_sold',\n            data_split_shuffle = False,\n            remove_multicollinearity = True,\n            imputation_type= 'iterative',\n            normalize_method= 'maxabs',\n            fold_strategy='stratifiedkfold',\n            fold=10,\n            numeric_imputation='median',\n            create_clusters = True,\n            use_gpu = True,\n            silent = True,\n            n_jobs = -1)","4856e334":"add_metric('SMAPE', 'SMAPE', SMAPE, greater_is_better = False)","3ec284cc":"best_models = compare_models(sort = 'SMAPE', n_select = 4)","91b5e28b":"blend_model = blend_models(estimator_list = best_models[:3], optimize = 'SMAPE')","81aa60e9":"blend_model.get_params()","282378e0":"params_3 = {\n          'catboost__loss_function': ['RMSE', 'MAE', 'MAPE'],\n          'catboost__border_count': [254, 260, 270, 140],\n          'lightgbm__min_child_samples': [20, 30, 40, 50],\n          'lightgbm__num_leaves': [31, 71, 101, 131],\n          'lightgbm__boosting_type': ['gbdt', 'dart', 'goss'],\n          'lightgbm__n_estimators': [100, 115, 120, 130, 135],\n          'lightgbm__reg_alpha': [0.0, 0.001, 0.01, 0.1],\n          'lightgbm__reg_lambda': [0.0, 0.001, 0.01, 0.1],\n          'xgboost__n_estimators': [100, 115, 120, 130, 135],\n          'xgboost__reg_alpha': [0.0, 0.001, 0.01, 0.1],\n          'xgboost__learning_rate': [0.300000012, 0.1, 0.01, 0.001]\n          }\n\nblend_model_tuned = tune_model(blend_model, n_iter=50, optimize = 'SMAPE')","4a034656":"blend_model.get_params()","441259e8":"model_final = finalize_model(blend_model)","5f31464a":"predict_model(model_final)","7c16b4a5":"final_data = predict_model(model_final, data=X_test)\nfinal_data = final_data.reset_index()\nfinal_data = final_data.rename({'index':'row_id', 'Label':'num_sold'}, axis = 1)\nfinal_data['num_sold']","9bd3df46":"X_test.reset_index()['row_id']","ecbb5655":"final_df = pd.concat([X_test.reset_index()['row_id'], final_data['num_sold']], axis=1)\nfinal_df = final_df.set_index('row_id')\nfinal_df.to_csv('submission_4.csv')\n\nfinal_df","c21af5cd":"## Symmetric Mean Absolute Percentage Error (SMAPE)","b5b086ec":"## Choosing Best Model using Pycaret","d5cfb6f7":"## DateTime Features","70dda09d":"## Train and test data","4b9c7d01":"## Finalize Model","6ae0f499":"## Blend the top 3 best models","8158e1d3":"## Predictions","fb184ef5":"## Fine Tuning"}}