{"cell_type":{"d32a008e":"code","cbc09250":"code","7c9904aa":"code","d2e078a3":"code","366d37a2":"code","0a3990bc":"code","cb3ad74c":"code","7aaf6f42":"code","1559a14f":"code","e09ad5fb":"code","043bc58a":"code","2b90f218":"code","28746bf2":"code","5a7b11a1":"code","d93322f0":"code","e70ae2f7":"code","3a5251cb":"code","e0951350":"code","afc5cd15":"code","b47e4f0e":"code","67602c70":"code","7165469d":"code","72098872":"code","d4aae562":"code","d62bb29d":"code","049dcf48":"code","ac99bd5c":"code","30d223d7":"code","fe067c82":"code","5c5cdc28":"code","fdc02337":"code","d98cae70":"code","8937231c":"code","d7f48855":"code","8e648e0d":"code","743e0446":"code","6d036032":"code","27551a50":"code","562b351c":"code","4df0db3e":"code","9914ed11":"code","b7cb5eca":"code","4e6a3856":"code","166659a9":"code","e829f8c2":"code","c3c14374":"code","80dc7ac6":"code","6151cc41":"code","d2f5a76a":"markdown","a1af3f87":"markdown","f73c440a":"markdown","8a7ea79b":"markdown","d3cdeaf7":"markdown","1f10b22b":"markdown","0092bdec":"markdown","63cc1394":"markdown"},"source":{"d32a008e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport spacy\nimport en_core_web_sm\nfrom textblob import TextBlob","cbc09250":"!pip3 install unidecode\n!pip3 install contractions","7c9904aa":"import contractions\nimport unidecode","d2e078a3":"df = pd.read_csv('..\/input\/iba-ml1-final-project\/train.csv').drop('Id', axis=1)\ndf['Review'] = df['Review'].str.lower()\ndf['Review_Title'] = df['Review_Title'].str.lower()\ndf","366d37a2":"df.isna().sum()","0a3990bc":"df.describe()","cb3ad74c":"# age distribution\nplt.figure(figsize=(10, 8))\nsns.histplot(x=df['Age'])","7aaf6f42":"# effect of positive feedback counts on rating\nplt.figure(figsize=(10,8))\nplt.ylim(0, 50)\nsns.boxplot(data=df, x='Rating', y='Pos_Feedback_Cnt')","1559a14f":"plt.figure(figsize=(10,8))\nsns.boxplot(data=df, x='Division', y='Rating')","e09ad5fb":"plt.figure(figsize=(10,8))\nsns.boxplot(data=df, x='Department', y='Rating')","043bc58a":"plt.figure(figsize=(10,8))\nsns.boxplot(data=df, x='Recommended', y='Age')","2b90f218":"from wordcloud import WordCloud\nreview_title = '\\n'.join(df['Review_Title'].dropna())","28746bf2":"plt.figure(figsize=(12, 8))\nwc = WordCloud(background_color='white',\n               width=1280, height=720).generate(review_title)\nplt.imshow(wc, interpolation='bilinear')\nplt.show()","5a7b11a1":"review = '\\n'.join(df['Review'].dropna())\nplt.figure(figsize=(12, 8))\nwc = WordCloud(background_color='white',\n               width=1280, height=720).generate(review)\nplt.imshow(wc, interpolation='bilinear')\nplt.show()","d93322f0":"nlp = en_core_web_sm.load()\ndef preprocess_text(sent):\n    # fixing contractions\n    fixed_text = contractions.fix(sent)\n    # making unicode (cafe - caf\u00e9)\n    unicoded_text = unidecode.unidecode(fixed_text)\n    # spelling correction\n    corrected_text = str(TextBlob(unicoded_text).correct()) \n    # tokenization\n    tokens = nlp(corrected_text)\n    # removing numerical and punctual characters\n    text_without_num = [t for t in tokens if t.pos_ != 'NUM']\n    text_without_punc = [t for t in text_without_num if t.pos_ != 'PUNCT']\n    # removing stopwords\n    text_without_stop_words = [t for t in text_without_punc if not t.is_stop]\n    # lemmatization\n    lemmatized_text = [t.lemma_ for t in text_without_stop_words]\n    #removing special non-alphabetic characters in individual words\n    special = [re.sub(r\"[^a-zA-Z]\", \"\", t) for t in lemmatized_text]\n    final_text = \" \".join([s for s in special if ((s.isspace()==False) and len(s)>=2)])\n    return final_text","e70ae2f7":"df[(df['Review_Title'].notnull()) & (df['Review'].isna())]","3a5251cb":"# since only one sample has review title and missing review we can remove it\ndf.drop(index=6334, inplace=True)","e0951350":"df.isna().sum()","afc5cd15":"df_without_text = df[(df['Review_Title'].isna()) & (df['Review'].isna())].copy().drop(columns=['Review_Title', 'Review'], axis=1).dropna()\ndf_without_text","b47e4f0e":"df_without_text['Pos_Feedback_Cnt'].value_counts()","67602c70":"# since positive feedback count is constant it is needed to drop\ndf_without_text.drop('Pos_Feedback_Cnt', axis=1, inplace=True)","7165469d":"df_without_text.isna().sum()","72098872":"# saving for future use\n# df_without_text.to_csv('df_without_text.csv')","d4aae562":"test = pd.read_csv('..\/input\/iba-ml1-final-project\/test.csv').drop('Id', axis=1)\ntest['Review_Title'] = test['Review_Title'].str.lower()\ntest['Review'] = test['Review'].str.lower()\ntest","d62bb29d":"test.isna().sum()","049dcf48":"test_without_text = test[(test['Review_Title'].isna())& (test['Review'].isna())].copy().drop(columns=['Review_Title', 'Review', 'Pos_Feedback_Cnt'], axis=1)\nindex_without_text = test_without_text.index\ntest_without_text","ac99bd5c":"test_without_text.isna().sum()","30d223d7":"# saving for future use\n# test_without_text.to_csv('test_without_text.csv')","fe067c82":"df_without_review_title = df[(df['Review_Title'].isna() & (df['Review'].notnull()))].copy().drop('Review_Title', axis=1)\ndf_without_review_title","5c5cdc28":"df_without_review_title.isna().sum()","fdc02337":"# run this code to apply preprocessing\n#df_without_review_title['Review'] = df_without_review_title['Review'].apply(preprocess_text)","d98cae70":"# saving for future use\n# df_without_review_title.to_csv('df_without_review_title.csv')","8937231c":"test_without_review_title = test[(test['Review_Title'].isna() & (test['Review'].notnull()))].copy().drop('Review_Title', axis=1)\nindex_without_review_title = test_without_text.index\ntest_without_review_title","d7f48855":"test_without_review_title.isna().sum()","8e648e0d":"# run this code to apply preprocessing \n#test_without_review_title['Review'] = test_without_review_title['Review'].apply(preprocess_text)","743e0446":"# saving for future use\n# test_without_review_title.to_csv('test_without_review_title.csv')","6d036032":"df_with_text = df[(df['Review_Title'].notnull() & df['Review'].notnull())].copy()\ndf_with_text","27551a50":"df_with_text.isna().sum()","562b351c":"# combining text datas\ndf_with_text['text'] = df_with_text['Review_Title'] + ' ' + df_with_text['Review']\ndf_with_text","4df0db3e":"df_with_text.drop(labels=['Review_Title', 'Review'], axis=1, inplace=True)\ndf_with_text","9914ed11":"# run this code to apply preprocessing\n#df_with_text['text'] = df_with_text['text'].apply(preprocess_text)","b7cb5eca":"# saving for future use\n# df_with_text.to_csv('df_with_text.csv')","4e6a3856":"test_with_text = test[(test['Review_Title'].notnull() & test['Review'].notnull())].copy()\nindex_with_text = test_with_text.index\ntest_with_text","166659a9":"test_with_text.isna().sum()","e829f8c2":"test_with_text['text'] = test_with_text['Review_Title'] + ' ' + test_with_text['Review']\ntest_with_text","c3c14374":"test_with_text.drop(labels=['Review_Title', 'Review'], axis=1, inplace=True)","80dc7ac6":"# run this code to apply prepsocessing \n#test_with_text['text'] = test_with_text['text'].apply(preprocess_text)","6151cc41":"# saving for future use\n# test_with_text.to_csv('test_with_text.csv')","d2f5a76a":"Train Without text","a1af3f87":"Test without review title","f73c440a":"Test with text","8a7ea79b":"**Splitting dataset into 3 parts based on missing values: without text, with all review and review title exist, all missing review title, but review exist**","d3cdeaf7":"Visualizing most common words","1f10b22b":"Train Without Review Title","0092bdec":"Train With text","63cc1394":"Test Without Text"}}