{"cell_type":{"c58afd63":"code","1531416f":"code","1afae183":"code","b0428e34":"code","0cd15f90":"code","583eb926":"code","324dfeb3":"code","44595099":"code","66e23c58":"code","8d216cfe":"code","21a803ab":"code","667cfab0":"code","fc3c1be6":"code","e430cca5":"code","9fd6d3a6":"code","2dd92bfb":"code","d5ece69d":"code","f71212a8":"code","e046aab3":"code","cd81a2f9":"code","6444eb5e":"code","8b931bbf":"code","ac83fbdd":"code","e2aee48e":"code","c05ba550":"code","054f6975":"code","f641e810":"code","842ed485":"code","fbf35573":"code","5d7a4d63":"code","1c5c846f":"code","ab7772ff":"markdown","edf3c081":"markdown","08590bbe":"markdown","24abce91":"markdown","93f7ba46":"markdown","a1f573af":"markdown","c2e511eb":"markdown","976ca035":"markdown","744fae51":"markdown","8a947c5d":"markdown","de10f68b":"markdown","51b5ca5b":"markdown","896d6bef":"markdown","eadd87bc":"markdown","f8e16800":"markdown","5444b7b3":"markdown","3af9fe5c":"markdown","08cfe898":"markdown","309038e4":"markdown","0f243df6":"markdown","75fbf77a":"markdown","9bbdc524":"markdown","dbdfe799":"markdown","00c3be75":"markdown","ef240427":"markdown","72dcb2af":"markdown","6f7f596b":"markdown","806ce469":"markdown","f7b8d7c9":"markdown","6a9df2e0":"markdown","38892813":"markdown","5555d78e":"markdown","a032584b":"markdown","01fd5771":"markdown","35f42db9":"markdown","65562eed":"markdown","46568b39":"markdown","a48cd8b4":"markdown","3ab1602f":"markdown","e5c0e120":"markdown","b530441b":"markdown","95134852":"markdown","b01caee2":"markdown","33689d2e":"markdown","a0efd297":"markdown","e727d6c0":"markdown","88828896":"markdown","fc2dc9e8":"markdown","edc7da20":"markdown","a34f75cf":"markdown","ba669b33":"markdown","c595d0e1":"markdown","0ffffbf0":"markdown"},"source":{"c58afd63":"# Disable warnings in Anaconda\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","1531416f":"from matplotlib import rcParams\nrcParams['figure.figsize'] = 11, 8","1afae183":"def fill_nan(table):\n    for col in table.columns:\n        table[col] = table[col].fillna(table[col].median())\n    return table   ","b0428e34":"data = pd.read_csv('..\/input\/credit_scoring_sample.csv')\ndata.head()","0cd15f90":"data.dtypes","583eb926":"ax = data['SeriousDlqin2yrs'].hist(orientation='horizontal', color='red')\nax.set_xlabel(\"number_of_observations\")\nax.set_ylabel(\"unique_value\")\nax.set_title(\"Target distribution\")\n\nprint('Distribution of the target:')\ndata['SeriousDlqin2yrs'].value_counts()\/data.shape[0]","324dfeb3":"independent_columns_names = [x for x in data if x != 'SeriousDlqin2yrs']\nindependent_columns_names","44595099":"table = fill_nan(data)","66e23c58":"X = table[independent_columns_names]\ny = table['SeriousDlqin2yrs']","8d216cfe":"def get_bootstrap_samples(data, n_samples):\n    \"\"\"Generate samples using bootstrapping.\"\"\"\n    indices = np.random.randint(0, len(data), (n_samples, len(data)))\n    samples = data[indices]\n    return samples\n\ndef stat_intervals(stat, alpha):\n    \"\"\"Make an interval estimate.\"\"\"\n    boundaries = np.percentile(stat, [100 * alpha \/ 2., 100 * (1 - alpha \/ 2.)])\n    return boundaries\n\n# Save the ages of those who let a delay\nchurn = data[data['SeriousDlqin2yrs'] == 1]['age'].values\n\n# Set the random seed for reproducibility \nnp.random.seed(0)\n\n# Generate bootstrap samples and calculate the mean for each sample\nchurn_mean_scores = [np.mean(sample) for sample in get_bootstrap_samples(churn, 1000)]\n\n# Print the interval estimate for the sample means\nprint(\"Mean interval\", stat_intervals(churn_mean_scores, 0.1))","21a803ab":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold","667cfab0":"lr = LogisticRegression(random_state=5, class_weight='balanced')","fc3c1be6":"parameters = {'C': (0.0001, 0.001, 0.01, 0.1, 1, 10)}","e430cca5":"skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=5)","9fd6d3a6":"grid_search = GridSearchCV(lr, parameters, n_jobs=-1, scoring='roc_auc', cv=skf)\ngrid_search = grid_search.fit(X, y)\ngrid_search.best_estimator_","2dd92bfb":"grid_search.cv_results_['std_test_score'][1]","d5ece69d":"grid_search.best_score_","f71212a8":"from sklearn.preprocessing import StandardScaler\nlr = LogisticRegression(C=0.001, random_state=5, class_weight='balanced')\nscal = StandardScaler()\nlr.fit(scal.fit_transform(X), y)\n\npd.DataFrame({'feat': independent_columns_names,\n              'coef': lr.coef_.flatten().tolist()}).sort_values(by='coef', ascending=False)","e046aab3":"print((np.exp(lr.coef_[0]) \/ np.sum(np.exp(lr.coef_[0])))[2])","cd81a2f9":"lr = LogisticRegression(C=0.001, random_state=5, class_weight='balanced')\nlr.fit(X, y)\n\npd.DataFrame({'feat': independent_columns_names,\n              'coef': lr.coef_.flatten().tolist()}).sort_values(by='coef', ascending=False)","6444eb5e":"np.exp(lr.coef_[0][0]*20)","8b931bbf":"from sklearn.ensemble import RandomForestClassifier","ac83fbdd":"rf = RandomForestClassifier(n_estimators=100, n_jobs=-1, random_state=42, \n                            class_weight='balanced')","e2aee48e":"parameters = {'max_features': [1, 2, 4], 'min_samples_leaf': [3, 5, 7, 9], 'max_depth': [5,10,15]}","c05ba550":"%%time\nrf_grid_search = GridSearchCV(rf, parameters, n_jobs=-1, scoring='roc_auc', cv=skf, verbose=True)\nrf_grid_search = rf_grid_search.fit(X, y)\nprint(rf_grid_search.best_score_ - grid_search.best_score_)","054f6975":"independent_columns_names[np.argmin(rf_grid_search.best_estimator_.feature_importances_)]","f641e810":"pd.DataFrame({'feat': independent_columns_names,\n              'coef': rf_grid_search.best_estimator_.feature_importances_}).sort_values(by='coef', ascending=False)","842ed485":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn.model_selection import cross_val_score, RandomizedSearchCV\n\nparameters = {'max_features': [2, 3, 4], 'max_samples': [0.5, 0.7, 0.9], \n              'base_estimator__C': [0.0001, 0.001, 0.01, 1, 10, 100]}","fbf35573":"bg = BaggingClassifier(LogisticRegression(class_weight='balanced'),\n                       n_estimators=100, n_jobs=-1, random_state=42)\nr_grid_search = RandomizedSearchCV(bg, parameters, n_jobs=-1, \n                                   scoring='roc_auc', cv=skf, n_iter=20, random_state=1,\n                                   verbose=True)\nr_grid_search = r_grid_search.fit(X, y)","5d7a4d63":"r_grid_search.best_score_","1c5c846f":"r_grid_search.best_estimator_","ab7772ff":"## Bagging","edf3c081":"Rating of the feature importance:","08590bbe":"Now, we will create a LogisticRegression model and use class_weight='balanced' to make up for our unbalanced classes.","24abce91":"Separate the target variable and input features:","93f7ba46":"**Answer:** 2.\n\n**Solution:**","a1f573af":"Let's set up our environment:","c2e511eb":"# <center>Demo Assignment #5. Solution<\/center>\n## <center>Logistic Regression and Random Forest in the credit scoring problem<\/center>  ","976ca035":"In order to find the optimal value of `C`, let's apply stratified 5-fold validation and look at the *ROC AUC* against different values of the parameter `C`. Use the `StratifiedKFold` function for this: ","744fae51":"**Question 12.** Give an interpretation of the best parameters for bagging. Why are these values of `max_features` and `max_samples` the best?\n\n1. For bagging it's important to use as few features as possible;\n2. Bagging works better on small samples;\n3. Less correlation between single models;\n4. The higher the number of features, the lower the loss of information.","8a947c5d":"**Answer:** 2.\n\n**Solution:**","de10f68b":"**Question 7.** Let's see how we can interpret the impact of our features. For this, recalculate the logistic regression with absolute values, that is without scaling. Next, modify the customer's age by adding 20 years, keeping the other features unchanged. How many times will the chance that the customer will not repay their debt increase? You can find an example of the theoretical calculation [here](https:\/\/www.unm.edu\/~schrader\/biostat\/bio2\/Spr06\/lec11.pdf).\n\n1. -0.01\n2. 0.70\n3. 8.32\n4. 0.66","51b5ca5b":"**Answer:** 7.\n\n**Solution:**","896d6bef":"**Question 10.** What is the most significant advantage of using *Logistic Regression* versus *Random Forest* for this problem?\n\n1. Spent less time for model fitting;\n2. Fewer variables to iterate;\n3. Feature interpretability;\n4. Linear properties of the algorithm.","eadd87bc":"**Question 1.** There are 5 jurors in a courtroom. Each of them can correctly identify the guilt of the defendant with 70% probability, independent of one another. What is the probability that the jurors will jointly reach the correct verdict if the final decision is by majority vote?\n\n1. 70.00%\n2. 83.20%\n3. 83.70%\n4. 87.50%","f8e16800":"**Answer:** 2.\n\n**Solution:**","5444b7b3":"## Random Forest","3af9fe5c":"**Answer:** 1.\n\n**Solution:**","08cfe898":"**Answer:** 3.\n\n**Solution:**\n\nOn the one hand, the Random Forest model works better for our credit scoring problem. Its performance is 4% higher. The reason for such a result is a small number of features and the compositional property of random forests. \n\nOn the other hand, the main advantage of Logistic Regression is that we can interpret the feature impact on the model outcome.","309038e4":"**Question 9.** What feature has the weakest impact in Random Forest model?\n\n1. age\n2. NumberOfTime30-59DaysPastDueNotWorse\n3. DebtRatio\n4. NumberOfTimes90DaysLate\n5. NumberOfTime60-89DaysPastDueNotWorse\n6. MonthlyIncome\n7. NumberOfDependents","0f243df6":"In this assignment, you will build models and answer questions using data on credit scoring.\n\nPlease write your code in the cells with the \"Your code here\" placeholder. Then, answer the questions in the [form](https:\/\/goo.gl\/forms\/xaXU8C0gYuTGPuyG3).\n\nLet's start with a warm-up exercise.","75fbf77a":"Separate the input variable names by excluding the target:","9bbdc524":"## Bootstrapping","dbdfe799":"**Question 8.** How much higher the *ROC AUC* of the best random forest model than that of the best logistic regression on validation?\n\n1. 4%\n2. 3%\n3. 2%\n4. 1%","00c3be75":"One of the important metrics of model quality is the *Area Under the Curve (AUC)*. *ROC AUC* varies from 0 to 1. The closer ROC AUC to 1, the better the quality of the classification model.","ef240427":"## Logistic regression","72dcb2af":"We will search for the best parameters among the following values:","6f7f596b":"**Question 2.** Make an interval estimate of the average age for the customers who delayed the repayment with the confidence level equal 90%. Use the example from the article for reference. Also, use `np.random.seed(0)` as it was done in the article. What is the resulting interval estimate?\n\n1. 52.59 \u2013 52.86\n2. 45.71 \u2013 46.13\n3. 45.68 \u2013 46.17\n4. 52.56 \u2013 52.88","806ce469":"**Question 6.** Calculate how much `DebtRatio` affects the prediction using the [softmax function](https:\/\/en.wikipedia.org\/wiki\/Softmax_function). What is its value?\n\n1. 0.38\n2. -0.02\n3. 0.11\n4. 0.24","f7b8d7c9":"**Answer:** 3.\n\n**Solution:**\n\nThe advantage of *Random Forest* is that the trees in the composition are not highly correlated. Similarly, for bagging with logistic regression, the weaker correlation between single models, the higher the accuracy. Since in logistic regression there is almost no randomness, we have to change the set of features to minimize the correlation between our single models.","6a9df2e0":"Let's try to find the best regularization coefficient, which is the coefficient `C` for logistic regression. Then, we will have an optimal model that is not overfit and is a good predictor of the target variable.","38892813":"**Question 4.** Can we consider the best model stable? The model is *stable* if the standard deviation on validation is less than 0.5%. Save the *ROC AUC* value of the best model, it will be useful for the following tasks.\n\n1. Yes\n2. No","5555d78e":"**Answer:** 2.\n\n**Solution:**","a032584b":"It is $\\exp^{\\beta\\delta}$ times more likely that the customer won't repay the debt, where $\\delta$ is the feature value increment. That means that if we increased the age by 20 years, the odds that the customer won't repay would increase by 0.69 times.","01fd5771":"Let's write the function that will replace *NaN* values with the median for each column.","35f42db9":"**Answer:** 2.\n\n**Solution:**","65562eed":"Now, read the data:","46568b39":"**Answer:** 1.\n\n**Solution:**","a48cd8b4":"## Feature importance\n\n**Question 5.** *Feature importance* is defined by the absolute value of its corresponding coefficient. First you need to normalize all the feature values so that it will be correct to compare them. What is the most important feature for the best logistic regression model?\n\n1. age\n2. NumberOfTime30-59DaysPastDueNotWorse\n3. DebtRatio\n4. NumberOfTimes90DaysLate\n5. NumberOfTime60-89DaysPastDueNotWorse\n6. MonthlyIncome\n7. NumberOfDependents","3ab1602f":"Let's set up to use logistic regression:","e5c0e120":"**Question 11.** Fit a bagging classifier with `random_state=42`. For the base classifiers, use 100 logistic regressors and use `RandomizedSearchCV` instead of `GridSearchCV`. It will take a lot of time to iterate over all 54 variants, so set the maximum number of iterations for `RandomizedSearchCV` to 20. Don't forget to set the parameters `cv` and `random_state=1`. What is the best *ROC AUC* you achieve?\n\n1. 80.75%\n2. 80.12%\n3. 79.62%\n4. 76.50%","b530441b":"Initialize Random Forest with 100 trees and balance target classes:","95134852":"Great! Let's move on to machine learning.\n\n## Credit scoring problem setup\n\n#### Problem\n\nPredict whether the customer will repay their credit within 90 days. This is a binary classification problem; we will assign customers into good or bad categories based on our prediction.\n\n#### Data description\n\n| Feature | Variable Type | Value Type | Description |\n|:--------|:--------------|:-----------|:------------|\n| age | Input Feature | integer | Customer age |\n| DebtRatio | Input Feature | real | Total monthly loan payments (loan, alimony, etc.) \/ Total monthly income percentage |\n| NumberOfTime30-59DaysPastDueNotWorse | Input Feature | integer | The number of cases when client has overdue 30-59 days (not worse) on other loans during the last 2 years |\n| NumberOfTimes90DaysLate | Input Feature | integer | Number of cases when customer had 90+dpd overdue on other credits |\n| NumberOfTime60-89DaysPastDueNotWorse | Input Feature | integer | Number of cased when customer has 60-89dpd (not worse) during the last 2 years |\n| NumberOfDependents | Input Feature | integer | The number of customer dependents |\n| SeriousDlqin2yrs | Target Variable | binary: <br>0 or 1 | Customer hasn't paid the loan debt within 90 days |\n","b01caee2":"**Answer:** 3.\n\n**Solution:**\n\nWe will use the formula for $\\mu$ from the article. Since the majority of votes begin with $3$, then $m = 3, ~N = 5, ~p = 0.7$. Substitute these values into the formula to get:\n\n$$\\large \\mu = \\sum_{i=3}^{5}{5 \\choose i}0.7^i(1-0.7)^{5-i} = 83.70\\%$$","33689d2e":"Import modules and set up the parameters for bagging:","a0efd297":"**Question 3.** Perform a *Grid Search* with the scoring metric \"roc_auc\" for the parameter `C`. Which value of the parameter `C` is optimal? \n\n1. 0.0001\n2. 0.001\n3. 0.01\n4. 0.1\n5. 1\n6. 10","e727d6c0":"Look at the variable types:","88828896":"The *ROC AUC* value of the best model:","fc2dc9e8":"<center>\n<img src=\"https:\/\/habrastorage.org\/files\/fd4\/502\/43d\/fd450243dd604b81b9713213a247aa20.jpg\">\n## Open Machine Learning Course [mlcourse.ai](https:\/\/mlcourse.ai)\n<center>\n\nAuthor: Vitaly Radchenko (@vradchenko). This material is subject to the terms and conditions of the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license. Free use is permitted for any non-commercial purpose.","edc7da20":"Import the Random Forest classifier:","a34f75cf":"Check the class balance:","ba669b33":"**Answer:** 3.\n\n**Solution:**","c595d0e1":"Apply the function to replace *NaN* values:","0ffffbf0":"Also, we will use the stratified k-fold validation again. You should still have the `skf` variable."}}