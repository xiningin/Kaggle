{"cell_type":{"484bdf91":"code","83bebe12":"code","fef02b21":"code","99bf1b8a":"code","41358096":"code","bbebfaa4":"code","d3754b39":"code","d8ae3a5a":"code","09ba152d":"code","9704d4fa":"code","5d9c7e45":"code","77502136":"code","b9608d34":"code","77b0e15c":"code","16765680":"code","565f0f4c":"code","95031ea9":"code","fb9769e8":"code","4b7488a4":"code","7296a5db":"code","8ca274d3":"code","7d691c41":"code","44a29df4":"code","83fc3184":"code","2151e2f0":"code","9f53d88b":"code","2e87e6ef":"code","75489c10":"code","42cefb02":"code","5ac209d2":"code","9f35e7d5":"code","d656083a":"code","6d323825":"code","7b11023e":"code","60432db0":"code","5b651a22":"code","0f53d48c":"code","3e978f98":"code","28046eaa":"code","12497610":"code","e9802119":"code","27886e1b":"code","0a5e071b":"code","63d605ea":"code","ee77293f":"code","1066e660":"code","bb1d3e31":"code","47638211":"code","a161a16f":"code","44b5ccdb":"code","adb07e3f":"code","ad3e62c8":"code","53f9fb6e":"code","20b6d1b3":"code","469b492c":"code","7b583138":"code","88372571":"code","6bfc52e8":"code","f2cd1bc6":"code","82a7ad2c":"code","6aa7f5a2":"code","33d8b967":"code","f4dfd54f":"code","48652745":"code","7ea1224a":"code","97e231f7":"code","8b13ed95":"code","a5fd1d6c":"code","fe4b5da5":"code","9b8e068f":"code","ecc3939b":"code","a194634a":"code","a94484f7":"code","2e4436d4":"code","33972c58":"code","30c7b250":"code","826dad8f":"code","bf479d73":"code","aac14269":"code","d32c5e92":"code","f934a121":"code","d80e1a6c":"code","93b90aab":"code","a5ff36fb":"code","6684f6bf":"code","7291f101":"code","22bb2306":"code","18a0377d":"code","ccfdf6e9":"code","aa8789ba":"code","3b9bbe84":"code","40f99960":"code","2a0f5d34":"code","41b5ce2c":"code","b1749ddd":"code","47dd0511":"code","6112144c":"code","d9755bfb":"code","0bc1dbf2":"code","cee5aa4d":"code","ec282a77":"code","ec414f19":"code","e2d0100e":"code","88695136":"markdown","303858fe":"markdown","326eb21c":"markdown","b6122883":"markdown","742aba8f":"markdown","434ae5f4":"markdown","b2c421c5":"markdown","5aba911c":"markdown","952043eb":"markdown","33a00409":"markdown","6c6e678b":"markdown","c07f84c0":"markdown","8c61551a":"markdown","690fbd96":"markdown","22b8e547":"markdown","3f1c90e9":"markdown","8d602f6a":"markdown","4ed655ef":"markdown","c202b80f":"markdown","aee3c39f":"markdown","4d2c667d":"markdown","7557f45a":"markdown","e908011c":"markdown","afbe2e51":"markdown","b6ef9cab":"markdown","5ab3b8d2":"markdown","dedc81e7":"markdown","724a2047":"markdown","295dcab5":"markdown","6db547fe":"markdown","cdef13eb":"markdown","611bc3f2":"markdown","a938ea7d":"markdown","7cfbe106":"markdown","37c848c1":"markdown","0f7f9ce5":"markdown","7caeae31":"markdown","a77d1ed9":"markdown","4735c741":"markdown","7d4b71d5":"markdown","715b086b":"markdown","9a50f486":"markdown","f61e6800":"markdown","13c5ebfc":"markdown","9135e716":"markdown","141af9a2":"markdown","5649e1a1":"markdown","76256612":"markdown","6940277c":"markdown"},"source":{"484bdf91":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","83bebe12":"df = pd.read_csv('..\/input\/dataisbeautiful\/r_dataisbeautiful_posts.csv')\ndf.head()","fef02b21":"df.shape","99bf1b8a":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nfig, ax = plt.subplots(figsize=(14,10))\nsns.heatmap(df.isnull(), cbar=False, cmap=\"YlGnBu_r\")\nplt.show()","41358096":"df.columns","bbebfaa4":"# \u0443\u0434\u0430\u043b\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\n#df.drop(columns=['id', 'author_flair_text', 'removed_by', 'created_utc', 'full_link'], inplace=True)\ndf.drop(columns=['id', 'author_flair_text', 'removed_by', 'total_awards_received', 'awarders', 'created_utc', 'full_link'], inplace=True)\ndf.head()","d3754b39":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0435\u0449\u0435 \u0440\u0430\u0437\nfig, ax = plt.subplots(figsize=(14,10))\nsns.heatmap(df.isnull(), cbar=False, cmap=\"YlGnBu_r\")\nplt.show()","d8ae3a5a":"len(df)","09ba152d":"df.info()","9704d4fa":"df.dropna(inplace = True)\nlen(df)","5d9c7e45":"df.describe()","77502136":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\nfrom sklearn import preprocessing\n\n# \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 DataFrame, \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n# \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 DataFrame \u0438 \u0441\u0430\u043c\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0438.\ndef number_encode_features(init_df):\n    result = init_df.copy() # \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448\u0443 \u0438\u0441\u0445\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443\n    encoders = {}\n    for column in result.columns:\n        if result.dtypes[column] == np.object: # np.object -- \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u0442\u0438\u043f \/ \u0435\u0441\u043b\u0438 \u0442\u0438\u043f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 - \u0441\u0442\u0440\u043e\u043a\u0430, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0435\u0433\u043e \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n            encoders[column] = preprocessing.LabelEncoder() # \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 column \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\n            result[column] = encoders[column].fit_transform(result[column]) # \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u043a \u0441\u0442\u043e\u043b\u0431\u0446\u0443 \u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n    return result, encoders\n\n# \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043a\u0440\u043e\u043c\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \"title\"\nencoded_data, encoders = number_encode_features(df.drop(columns='title')) # \u0422\u0435\u043f\u0435\u0440\u044c encoded data \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0442. \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \nencoded_data.head()","b9608d34":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nnon_obj_cols = []\nfor column in encoded_data.columns:\n        if df.dtypes[column] != np.bool:\n            non_obj_cols.append(column)\n\n            \nfig = plt.figure(figsize=(16,8))\ncols = 3\n\nrows = np.ceil(float(encoded_data[non_obj_cols].shape[1]) \/ cols)\nfor i, column in enumerate(encoded_data[non_obj_cols].columns):\n    ax = fig.add_subplot(rows, cols, i + 1)\n    ax.set_title(column)\n    encoded_data[non_obj_cols][column].hist(axes=ax)\n    plt.xticks(rotation=\"vertical\")\nplt.subplots_adjust(hspace=0.7, wspace=0.2)","77b0e15c":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u043e\nplt.subplots(figsize=(12, 10))\nsns.heatmap(encoded_data.corr(), square = True, annot=True)\nplt.show()","16765680":"print(df.groupby(['over_18'])['over_18'].count())\nprint(f\"\u0414\u043e\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \\'over_18\\'==True : {round(len(df[df.over_18==True])\/len(df), 4)}\")\nlabels = (df['over_18'].unique())\ny_pos = np.arange(len(labels))\namount = df.groupby(['over_18'])['over_18'].count().tolist()\nplt.bar(y_pos, amount)[1].set_color('orange')\nplt.xticks(y_pos, labels)\n\nplt.show()","565f0f4c":"X = np.array(encoded_data.drop(['over_18'], axis=1))\nX","95031ea9":"y = np.array(encoded_data['over_18'].astype(int))\ny","fb9769e8":"# from sklearn.preprocessing import scale\n# X_scaled = scale(np.array(X, dtype='float'), with_std=True, with_mean=True)\n# X_scaled","4b7488a4":"# np.argwhere \u0432\u0435\u0440\u043d\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0442\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 y (\u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439), \u0433\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0\nnot_over_18_ids = np.argwhere(y == 0).flatten()\nprint('\u0412\u0441\u0435\u0433\u043e \u043d\u0435 18+', len(not_over_18_ids))\nnot_over_18_ids","7296a5db":"from sklearn.utils import shuffle\n\nnot_over_18_ids = shuffle(not_over_18_ids, random_state = 42)\n# \u043d\u0430\u0439\u0434\u0435\u043c \"\u043b\u0438\u0448\u043d\u0438\u0445\", \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043e\u0431\u0440\u0435\u0436\u0435\u043c \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 id \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e over_18 (\u0432\u043d\u0443\u0442\u0440\u0438 len)\nnot_over_18_ids = not_over_18_ids[len(np.argwhere(y == 1).flatten()):]\nprint(len(not_over_18_ids))\n# \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0438 \u0441\u0430\u043c\u0438 id, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c\nnot_over_18_ids","8ca274d3":"# 182948(\u0432\u0441\u0435\u0433\u043e \u043d\u0443\u043b\u0435\u0439) - 182005(\u043d\u0443\u043b\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0435\u0437\u043a\u0438 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0435\u0434\u0438\u043d\u0438\u0446) = 943(\u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043d\u0443\u043b\u0435\u0439, \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0440\u0430\u0432\u043d\u043e \u043a\u043e\u043b-\u0432\u0443 \u0435\u0434\u0438\u043d\u0438\u0446)\nlen(np.argwhere(y == 0).flatten()) - len(not_over_18_ids) == len(np.argwhere(y == 1).flatten())","7d691c41":"# \u0438\u0437 X \u0438 y \u0432\u044b\u043a\u0438\u043d\u0435\u043c \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u0435 \u043d\u0443\u043b\u0438 (\u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 182005)\n# np.delete \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0438 \u043f\u043e \u043a\u0430\u043a\u043e\u0439 \u043e\u0441\u0438 \u0432\u044b\u043a\u0438\u0434\u044b\u0432\u0430\u0442\u044c\nX = np.delete(X, not_over_18_ids, 0)\n#X_scaled = np.delete(X_scaled, not_over_18_ids, 0)\ny = np.delete(y, not_over_18_ids, 0)","44a29df4":"X.shape, y.shape","83fc3184":"pd.Series(y).value_counts()","2151e2f0":"# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0432\u0435\u0441\u044c \u043d\u0430\u0431\u043e\u0440 \u0434\u043b\u044f \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\nfrom sklearn.preprocessing import scale\nX_scaled = scale(np.array(X, dtype='float'), with_std=True, with_mean=True)\nX_scaled","9f53d88b":"#a = df.loc[df.index.difference(df.iloc[not_over_18_ids].index)]","2e87e6ef":"from sklearn.model_selection import train_test_split\n\n# \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043e\u0442\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u043d\u043e \u043d\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","75489c10":"mean = X_train.mean(axis=0)\nstd = X_train.std(axis=0)\nX_train = (X_train - mean)\/std\nX_test = (X_test - mean)\/std","42cefb02":"print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","5ac209d2":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression, SGDRegressor\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingRegressor\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9f35e7d5":"knn = KNeighborsClassifier()\ngrid = {'n_neighbors': np.array(np.linspace(30, 50, 20), dtype='int')}\ngs = GridSearchCV(knn, grid)\ngs.fit(X_scaled, y)\ngs.best_params_, gs.best_score_","d656083a":"knn = KNeighborsClassifier(n_neighbors = gs.best_params_['n_neighbors'], n_jobs=-1)\n\nknn.fit(X_train, y_train)\npreds = knn.predict(X_test)\nknn_res = metrics.classification_report(y_test, preds)\nprint(knn_res)","6d323825":"alg = SVC()\n\ngrid = {'C': np.array(np.linspace(0.1, 5, 10), dtype='float'),\n        'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],\n        }\n\ngs = GridSearchCV(alg, grid, verbose=2, n_jobs = -1)\ngs.fit(X_scaled, y)\ngs.best_params_, gs.best_score_","7b11023e":"svm = SVC(C=gs.best_params_['C'], kernel = gs.best_params_['kernel'])\n\nsvm.fit(X_train, y_train)\npreds = svm.predict(X_test)\nsvm_res = metrics.classification_report(y_test, preds)\nprint(svm_res)","60432db0":"alg = LogisticRegression()\n\ngrid = {'penalty': ['l1', 'l2'],\n        'C': np.array(np.logspace(-3, 2, num = 10), dtype='float'),\n        }\n\ngs = GridSearchCV(alg, grid, verbose=2, n_jobs = -1)\ngs.fit(X_scaled, y)\ngs.best_params_, gs.best_score_","5b651a22":"logreg = LogisticRegression(penalty=gs.best_params_['penalty'], C = gs.best_params_['C'])\n\nlogreg.fit(X_train, y_train)\npreds = logreg.predict(X_test)\nlogreg_res = metrics.classification_report(y_test, preds)\nprint(logreg_res)","0f53d48c":"sgd = SGDRegressor()\n\ngrid = {'penalty': ['l1', 'l2'],\n        'alpha': [1e-4, 1e-5, 1e-6, 1e-7]}\n\ngs = GridSearchCV(sgd, grid, verbose = 2, scoring = 'r2')\ngs.fit(X_scaled, y)\ngs.best_params_, gs.best_score_","3e978f98":"sgd = SGDRegressor(alpha = gs.best_params_['alpha'], penalty = gs.best_params_['penalty'])\nsgd.fit(X_train, y_train)\npreds = sgd.predict(X_test)\nsgd_res = metrics.r2_score(y_test, preds)\nprint('R2 sgd (sklearn): ', sgd_res)","28046eaa":"plt.hist(y_test - preds)","12497610":"gbr = GradientBoostingRegressor()\n\ngrid = {'max_depth': [3, 4, 5],\n        'min_samples_split': [2, 3, 4, 5]}\n\ngs = GridSearchCV(gbr, grid, verbose = 2)\ngs.fit(X_scaled, y)\ngs.best_params_, gs.best_score_","e9802119":"gbr = GradientBoostingRegressor(max_depth = gs.best_params_['max_depth'], min_samples_split = gs.best_params_['min_samples_split'])\ngbr.fit(X_train, y_train)\npreds = gbr.predict(X_test)\ngbr_res = metrics.r2_score(y_test, preds)\nprint('R2 gbr: ', gbr_res)","27886e1b":"plt.hist(y_test - preds)","0a5e071b":"plt.hist(y_test)\nplt.hist(preds)","63d605ea":"df = pd.read_csv('..\/input\/dataisbeautiful\/r_dataisbeautiful_posts.csv')\ndf.drop(columns=['id', 'author_flair_text', 'removed_by', 'total_awards_received', 'awarders', 'created_utc', 'full_link'], inplace=True)\ndf.dropna(inplace = True)\ndf.head()","ee77293f":"import string\n# \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443\ndef preprocess(doc):\n    # \u043a \u043d\u0438\u0436\u043d\u0435\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443\n    doc = doc.lower()\n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0443\u043d\u043a\u0442\u0443\u0430\u0446\u0438\u044e, \u043f\u0440\u043e\u0431\u0435\u043b\u044b, \u043f\u0440\u043e\u0447\u0435\u0435\n    for p in string.punctuation + string.whitespace:\n        doc = doc.replace(p, ' ')\n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043b\u0438\u0448\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u044b, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e\n    doc = doc.strip()\n    doc = ' '.join([w for w in doc.split(' ') if w != ''])\n    return doc","1066e660":"#  \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a \u044d\u0442\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c \u043d\u0430\u0448\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u043d\u0438\u0436\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430\nfor colname in df.select_dtypes(include= np.object).columns:\n    df[colname] = df[colname].map(preprocess)\ndf.head()","bb1d3e31":"encoded_data, encoders = number_encode_features(df.drop(columns='title')) # \u0422\u0435\u043f\u0435\u0440\u044c encoded data \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0442. \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \nencoded_data.head()","47638211":"y = np.array(encoded_data['over_18'].astype(int))\nX = np.array(encoded_data.drop(['over_18'], axis=1))\n\nfrom sklearn.preprocessing import scale\nX_scaled = scale(np.array(X, dtype='float'), with_std=True, with_mean=True)\nX","a161a16f":"# \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c tfidf \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\nvectorizer = TfidfVectorizer(max_features = 100)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043b\u0438 \u0435\u0433\u043e \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 tfidf \u043a\u0430\u043a \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u0432\u044b\u0448\u0435\nX_np = vectorizer.fit_transform(df['title'].values)\n# \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043b\u0438 \u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c\nprint(X_np.shape)","44b5ccdb":"import gc\ndel df, encoded_data\ngc.collect()","adb07e3f":"# \u0442.\u043a. \u0441\u0430\u043c \u0442\u0438\u043f \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u0437 scipy - \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 tfidf\nX_np = X_np.toarray()","ad3e62c8":"# \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430\n#print(vectorizer.get_feature_names()[13000:13010])","53f9fb6e":"# \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 TF-IDF \u043a X\nX = np.append(X, X_np, axis=1)","20b6d1b3":"X = np.delete(X, not_over_18_ids, 0)\ny = np.delete(y, not_over_18_ids, 0)","469b492c":"X.shape, y.shape","7b583138":"pd.Series(y).value_counts()","88372571":"X","6bfc52e8":"X_scaled = scale(np.array(X, dtype='float'), with_std=True, with_mean=True)\nX_scaled","f2cd1bc6":"X_scaled.shape","82a7ad2c":"# \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043e\u0442\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u043d\u043e \u043d\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","6aa7f5a2":"# X_train = X[:int(len(X)*0.8)]\n# y_train = y[:int(len(X)*0.8)]\n\n# X_test = X[int(len(X)*0.8):]\n# y_test = y[int(len(X)*0.8):]","33d8b967":"mean = X_train.mean(axis=0)\nstd = X_train.std(axis=0)\nX_train = (X_train - mean)\/std\nX_test = (X_test - mean)\/std","f4dfd54f":"print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","48652745":"knn = KNeighborsClassifier()\ngrid = {'n_neighbors': np.array(np.linspace(30, 50, 20), dtype='int')}\ngs = GridSearchCV(knn, grid)\ngs.fit(X_scaled, y)\ngs.best_params_, gs.best_score_","7ea1224a":"knn = KNeighborsClassifier(n_neighbors = gs.best_params_['n_neighbors'], n_jobs=-1)\n\nknn.fit(X_train, y_train)\npreds = knn.predict(X_test)\nknn_tfidf = metrics.classification_report(y_test, preds)\nprint(knn_tfidf)","97e231f7":"alg = SVC()\n\ngrid = {'C': np.array(np.linspace(0.1, 5, 10), dtype='float'),\n        'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],\n        }\n\ngs = GridSearchCV(alg, grid, verbose=2, n_jobs = -1)\ngs.fit(X_scaled, y)\ngs.best_params_, gs.best_score_","8b13ed95":"svm = SVC(C=gs.best_params_['C'], kernel = gs.best_params_['kernel'])\n\nsvm.fit(X_train, y_train)\npreds = svm.predict(X_test)\nsvm_tfidf = metrics.classification_report(y_test, preds)\nprint(svm_tfidf)","a5fd1d6c":"alg = LogisticRegression()\n\ngrid = {'penalty': ['l1', 'l2'],\n        'C': np.array(np.logspace(-3, 2, num = 10), dtype='float'),\n        }\n\ngs = GridSearchCV(alg, grid, verbose=2, n_jobs = -1)\ngs.fit(X_scaled, y)\ngs.best_params_, gs.best_score_","fe4b5da5":"logreg = LogisticRegression(penalty=gs.best_params_['penalty'], C = gs.best_params_['C'])\n\nlogreg.fit(X_train, y_train)\npreds = logreg.predict(X_test)\nlogreg_tfidf = metrics.classification_report(y_test, preds)\nprint(logreg_tfidf)","9b8e068f":"sgd = SGDRegressor()\n\ngrid = {'penalty': ['l1', 'l2'],\n        'alpha': [1e-4, 1e-5, 1e-6, 1e-7]}\n\ngs = GridSearchCV(sgd, grid, verbose = 2, scoring = 'r2')\ngs.fit(X_scaled, y)\ngs.best_params_, gs.best_score_","ecc3939b":"sgd = SGDRegressor(alpha = gs.best_params_['alpha'], penalty = gs.best_params_['penalty'])\nsgd.fit(X_train, y_train)\npreds = sgd.predict(X_test)\nsgd_tfidf = metrics.r2_score(y_test, preds)\nprint('R2 sgd (sklearn): ', sgd_tfidf)","a194634a":"plt.hist(y_test - preds)","a94484f7":"gbr = GradientBoostingRegressor()\n\ngrid = {'max_depth': [3, 4, 5],\n        'min_samples_split': [2, 3, 4, 5]}\n\ngs = GridSearchCV(gbr, grid, verbose = 2)\ngs.fit(X_scaled, y)\ngs.best_params_, gs.best_score_","2e4436d4":"gbr = GradientBoostingRegressor(max_depth = gs.best_params_['max_depth'], min_samples_split = gs.best_params_['min_samples_split'])\ngbr.fit(X_train, y_train)\npreds = gbr.predict(X_test)\ngbr_tfidf = metrics.r2_score(y_test, preds)\nprint('R2 gb: ', gbr_tfidf)","33972c58":"plt.hist(y_test - preds)","30c7b250":"plt.hist(y_test)\nplt.hist(preds)","826dad8f":"print('KNN\\n', knn_res, knn_tfidf)","bf479d73":"print('SVM\\n', svm_res, svm_tfidf)","aac14269":"print('LogReg\\n', logreg_res, logreg_tfidf)","d32c5e92":"print('SGD\\n', sgd_res, sgd_tfidf)","f934a121":"print('GBR\\n', gbr_res, gbr_tfidf)","d80e1a6c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.naive_bayes import ComplementNB, MultinomialNB, BernoulliNB\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import classification_report\n\nimport warnings\nwarnings.filterwarnings('ignore')","93b90aab":"df = pd.read_csv('..\/input\/dataisbeautiful\/r_dataisbeautiful_posts.csv')\ndf.drop(columns=['id', 'author_flair_text', 'removed_by', 'total_awards_received', 'awarders', 'created_utc', 'full_link'], inplace=True)\ndf.dropna(inplace = True)\ndf['over_18'] = df['over_18'].astype(int)\ndf.head()","a5ff36fb":"df_train, df_test = train_test_split(df, test_size=0.2, shuffle=True)","6684f6bf":"import nltk\nnltk.download(\"stopwords\")\n\nfrom nltk.corpus import stopwords\nstopWords = stopwords.words('english')\n\nfrom sklearn.feature_extraction.stop_words import ENGLISH_STOP_WORDS\n\n# ngram_range=(1, 2) - \u044d\u0442\u043e \u0441\u0430\u043c\u0438 \u0441\u043b\u043e\u0432\u0430 (unigrams) \u0438 \u043f\u0430\u0440\u044b \u0441\u043b\u043e\u0432(bigrams)\nvectorizer = TfidfVectorizer(stop_words=stopWords + list(ENGLISH_STOP_WORDS), ngram_range=(1, 2))\nvectorizer = vectorizer.fit(df['title'])\n\nX_train_vectors = vectorizer.transform(df_train['title'])\nX_test_vectors = vectorizer.transform(df_test['title'])","7291f101":"# \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b 65-\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 CSR-\u0444\u043e\u0440\u043c\u0430\u0442\u0435 \nnum = 65\nX_train_vectors[num].data","22bb2306":"# \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 title 65-\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\ndf_train['title'].iloc[65]","18a0377d":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u043b\u043e\u0432\u0430 \u0438 \u043f\u0430\u0440\u044b \u0441\u043b\u043e\u0432, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435 title 65-\u0439 \u0441\u0442\u0440\u043e\u043a\u0438, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u0438\u0445 \u043c\u0435\u0440\u044b TF-IDF:\nvectorizer.inverse_transform(X_train_vectors[num])[0][np.argsort(X_train_vectors[num].data)]","ccfdf6e9":"from sklearn.model_selection import GridSearchCV\n\nalg = ComplementNB()\n\ngrid = {'alpha': np.array(np.linspace(0, 6, 30), dtype='float'),}\n\ngs = GridSearchCV(alg, grid, verbose=2, n_jobs = -1, scoring = 'f1')\ngs.fit(X_train_vectors, df_train['over_18'])\ngs.best_params_, gs.best_score_","aa8789ba":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\ndef grid_plot(x, y, x_label, title, y_label='f1'):\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438 \u0440\u0430\u0437\u043c\u0435\u0440 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\n    plt.figure(figsize=(12, 6))\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u0441\u0435\u0442\u043a\u0443 \u043d\u0430 \u0444\u043e\u043d\n    plt.grid(True)\n    # \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043b\u0438 \u043f\u043e \u0445 - \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439, \u043f\u043e y - \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\n    plt.plot(x, y, 'go-')\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u043e\u0441\u0435\u0439 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n    plt.title(title)","3b9bbe84":"grid_plot(grid['alpha'], gs.cv_results_['mean_test_score'], 'alpha', 'ComplementNB')","40f99960":"clf = ComplementNB(alpha = gs.best_params_['alpha'])\n\nclf.fit(X_train_vectors, df_train['over_18'])\npredicts = clf.predict(X_test_vectors)\ncompnb_tfidf_ngr_stpwds = classification_report(df_test['over_18'], predicts)\nprint(compnb_tfidf_ngr_stpwds)","2a0f5d34":"df = pd.read_csv('..\/input\/dataisbeautiful\/r_dataisbeautiful_posts.csv')\ndf.drop(columns=['id', 'author_flair_text', 'removed_by', 'total_awards_received', 'awarders', 'created_utc', 'full_link'], inplace=True)\ndf.dropna(inplace = True)\ndf['over_18'] = df['over_18'].astype(int)\ndf.head()","41b5ce2c":"# np.argwhere \u0432\u0435\u0440\u043d\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0442\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 y (\u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439), \u0433\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0\nnot_over_18_ids = np.argwhere(np.array(df['over_18']) == 0).flatten()\nprint('\u0412\u0441\u0435\u0433\u043e \u043d\u0435 18+', len(not_over_18_ids))\nnot_over_18_ids","b1749ddd":"from sklearn.utils import shuffle\n\nnot_over_18_ids = shuffle(not_over_18_ids, random_state = 42)\n# \u043d\u0430\u0439\u0434\u0435\u043c \"\u043b\u0438\u0448\u043d\u0438\u0445\", \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043e\u0431\u0440\u0435\u0436\u0435\u043c \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 id \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e over_18 (\u0432\u043d\u0443\u0442\u0440\u0438 len)\nnot_over_18_ids = not_over_18_ids[len(np.argwhere(np.array(df['over_18']) == 1).flatten()):]\nprint(len(not_over_18_ids))\n# \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0438 \u0441\u0430\u043c\u0438 id, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c\nnot_over_18_ids","47dd0511":"# \u0438\u0437 X \u0438 y \u0432\u044b\u043a\u0438\u043d\u0435\u043c \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u0435 \u043d\u0443\u043b\u0438\ndf = df.loc[df.index.difference(df.iloc[not_over_18_ids].index)]","6112144c":"pd.Series(df['over_18']).value_counts()","d9755bfb":"df_train, df_test = train_test_split(df, test_size=0.2, shuffle=True)","0bc1dbf2":"vectorizer = vectorizer.fit(df['title'])\n\nX_train_vectors = vectorizer.transform(df_train['title'])\nX_test_vectors = vectorizer.transform(df_test['title'])","cee5aa4d":"from sklearn.model_selection import GridSearchCV\n\nalg = ComplementNB()\n\ngrid = {'alpha': np.array(np.linspace(0, 6, 30), dtype='float'),}\n\ngs = GridSearchCV(alg, grid, verbose=2, n_jobs = -1, scoring = 'f1')\ngs.fit(X_train_vectors, df_train['over_18'])\ngs.best_params_, gs.best_score_","ec282a77":"grid_plot(grid['alpha'], gs.cv_results_['mean_test_score'], 'alpha', 'ComplementNB')","ec414f19":"clf = ComplementNB(alpha = gs.best_params_['alpha'])\n\nclf.fit(X_train_vectors, df_train['over_18'])\npredicts = clf.predict(X_test_vectors)\ncompnb_tfidf_ngr_stpwds = classification_report(df_test['over_18'], predicts)\nprint(compnb_tfidf_ngr_stpwds)","e2d0100e":"print('LogReg\\n', logreg_tfidf)","88695136":"## SVM","303858fe":"### \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f train- \u0438 test-\u0447\u0430\u0441\u0442\u0435\u0439","326eb21c":"### \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435\u0440\u0430\u0437\u0431\u0438\u0442\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u043b\u044f CV","b6122883":"### \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 train\/test","742aba8f":"## \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b","434ae5f4":"### \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432","b2c421c5":"## KNN","5aba911c":"\u041f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c random state (\u0447\u0442\u043e\u0431 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0443 \u043d\u0430\u0441 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u043b\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438) \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u0432 \u043d\u0435\u043c \"\u043b\u0438\u0448\u043d\u0438\u0435\" id (delta). \n<br>delta = not_over_18 - over_18.","952043eb":"### \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f train\/test","33a00409":"Naive Bayes - \u043d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c. \u0411\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c <b>over_18<\/b> \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0435 <b>title<\/b> \u0431\u0435\u0437:\n<br>- LabelEncoding\n<br>- \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n<br>- \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 (\u0442.\u043a. \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c ComplementNB)","6c6e678b":"## \u0412\u044b\u0432\u043e\u0434","c07f84c0":"## GBR","8c61551a":"## \u0412\u044b\u0432\u043e\u0434","690fbd96":"## Naive Bayes + stop words + ngrams","22b8e547":"### \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c","3f1c90e9":"## GBR","8d602f6a":"Pipeline:\n<br>- \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n<br>- label encoding \u0431\u0435\u0437 Title\n<br>- \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n<br>- \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 X, y\n<br>- \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n<br>- \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0425 \u0434\u043b\u044f \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n<br>- \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 train-\/test-\u0447\u0430\u0441\u0442\u0438\n<br>- \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f train\/test \u043f\u043e mean \u0438 std \u043e\u0442 train\n<br>- \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 f1-score(\u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438) \u0438\u043b\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 r2-score(\u0435\u0441\u043b\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f)\n<br>- \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 ","4ed655ef":"### \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 title","c202b80f":"## KNN","aee3c39f":"#### \u041e\u0431\u0443\u0447\u0438\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043d\u0430 \u043e\u0442\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","4d2c667d":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e:\n<br>1) \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435-\u0441\u0442\u0440\u043e\u043a\u0443 TF-IDF-\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c\u044b\u0445 \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0435 <b>title<\/b> \u0441\u043b\u043e\u0432, \u0438\u0437 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043d\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 \u0434\u043b\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\n<br>2) c\u0430\u043c\u044b\u0439 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0438\u0437 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, \u0443 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <b>\u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438<\/b>","7557f45a":"### X, y","e908011c":"## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438","afbe2e51":"### X, y","b6ef9cab":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b \u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u044b","5ab3b8d2":"### \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","dedc81e7":"## SGD","724a2047":"### Label encoding \u0431\u0435\u0437 Title","295dcab5":"\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c \"\u043b\u0438\u0448\u043d\u0438\u0435\" id \u0438\u0437 X \u0438 y","6db547fe":"## Data+tfidf","cdef13eb":"## SGD","611bc3f2":"### TF-IDF","a938ea7d":"### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\/\u0441\u0442\u0440\u043e\u043a","7cfbe106":"<b>Complement Naive Bayes<\/b>, \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438, \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c <b>\u043b\u043e\u0433.\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f<\/b> (\u043b\u0443\u0447\u0448\u0438\u0439 \u043f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u0438\u0437 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432).","37c848c1":"### TF-IDF \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 title \u0438 \u0435\u0451 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043a \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u043d\u0430\u0431\u043e\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445","0f7f9ce5":"## \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b","7caeae31":"### \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u043d\u0430 train\/test","a77d1ed9":"### Label encoding \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c title","4735c741":"#### \u0412\u044b\u0432\u043e\u0434: \u0440\u0430\u0437\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0435 \u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 ComplementNB. \u041d\u0443\u0436\u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430.","7d4b71d5":"### \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430","715b086b":"\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c \"\u043b\u0438\u0448\u043d\u0438\u0435\" id \u0438\u0437 X \u0438 y","9a50f486":"### \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432","f61e6800":"## \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f","13c5ebfc":"\u041f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c random state (\u0447\u0442\u043e\u0431 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0443 \u043d\u0430\u0441 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u043b\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438) \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u0432 \u043d\u0435\u043c \"\u043b\u0438\u0448\u043d\u0438\u0435\" id (delta). \n<br>delta = not_over_18 - over_18.","9135e716":"### \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043f\u043e\u0438\u0441\u043a \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445","141af9a2":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","5649e1a1":"## SVM","76256612":"### \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435\u0440\u0430\u0437\u0431\u0438\u0442\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u043b\u044f CV","6940277c":"## \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f"}}