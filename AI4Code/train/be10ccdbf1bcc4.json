{"cell_type":{"80e87bf6":"code","71cab745":"code","204ab11f":"code","65cca017":"code","8c4da0e9":"code","8ff4a351":"code","821d03d5":"code","d687e960":"code","7302c87d":"code","1f72d17a":"code","a39a787e":"code","38b7dabe":"code","a6058eb8":"code","c0086bda":"code","921a7bf8":"code","dab12de7":"code","dcd6834f":"code","da270ff2":"code","64a8ad44":"code","13aa802c":"markdown","af8b6c1c":"markdown","20fd6432":"markdown"},"source":{"80e87bf6":"import pandas as pd\nimport tensorflow as tf\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom tqdm import tqdm\nfrom catboost import CatBoostClassifier\n\nfrom lightgbm import LGBMClassifier\n\nfrom sklearn.metrics import f1_score, recall_score, precision_score, accuracy_score\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt","71cab745":"train = pd.read_csv(\"..\/input\/superaiengineer-bbl-fraud-detection\/FRAUD_DATA.csv\")\ntest = pd.read_csv('..\/input\/superaiengineer-bbl-fraud-detection\/FRAUD_VALIDATING_DATA_TESTSET.csv')","204ab11f":"# dropping some columns that were shown by var importance to be unimportant\n# Drop_List = ['ZIPCODE_CUST', 'AGE_RANGE', 'BLACK_LIST_FLAGGED', 'ZIPCODE_MER', 'GENDER', 'TXN_CODE']\nDrop_List = []","65cca017":"train.drop(train[train.AGE == 'Unknown'].index, inplace=True)\ntrain.drop(columns=Drop_List, inplace=True)\n\ntest.drop(test[test.AGE == 'Unknown'].index, inplace=True)\ntest.drop(columns=Drop_List, inplace=True)","8c4da0e9":"train.dropna(inplace=True)\ntrain.GENDER.replace(['U','F','M','E'], [0,1,2,3], inplace=True)\ntrain.TXN_AMOUNT = train.TXN_AMOUNT.str.replace(r'[,]', '')\n\ntest.GENDER.replace(['U','F','M','E'], [0,1,2,3], inplace=True)\ntest.TXN_AMOUNT = test.TXN_AMOUNT.str.replace(r'[,]', '')","8ff4a351":"List_LabelEncoder = ['CUSTOMER_ID', \n                     'MERCHANT_ID', \n                     'PURCHASE_CATEGORY', \n                     'ZIPCODE_CUST', \n                     'ZIPCODE_MER', \n                     'GENDER', \n                     'BLACK_LIST_FLAGGED', \n                     'TXN_CODE']\nCat_Features = List_LabelEncoder\nfor i in List_LabelEncoder:\n    Encoder = LabelEncoder()\n    Encoder.fit(train[i].unique())\n    train[i] = Encoder.transform(train[i])\n    test[i] = Encoder.transform(test[i])","821d03d5":"train = train.astype({k:'float64' for k in train.columns})\ntrain = train.astype({k:'category' for k in List_LabelEncoder})\n\ntest = test.astype({k:'float64' for k in test.columns})\ntest = test.astype({k:'category' for k in List_LabelEncoder})","d687e960":"shuffled_dataset = train.sample(frac=1, random_state=42)\n\nfraud_dataset = shuffled_dataset.loc[shuffled_dataset[\"FRAUD\"] == 1]\nnon_fraud_dataset = shuffled_dataset.loc[shuffled_dataset[\"FRAUD\"] == 0].sample(n=int(len(fraud_dataset)*3), random_state=42)\n\nnormalized_dataset = pd.concat([fraud_dataset, non_fraud_dataset])\nnormalized_dataset = normalized_dataset.sample(frac=1, random_state=42)\ntrain = normalized_dataset.reset_index(drop=True)","7302c87d":"train = train.reindex(sorted(train.columns), axis=1)\ntest = test.reindex(sorted(test.columns), axis=1)","1f72d17a":"X_train, X_test, y_train, y_test = train_test_split(train.drop(columns=['FRAUD']), \n                                                    train.FRAUD, \n                                                    test_size=0.2, \n                                                    random_state=42, \n                                                    stratify=train.FRAUD)","a39a787e":"model = LGBMClassifier()\nmodel.fit(X_train, y_train, eval_set=(X_test, y_test), verbose=1)","38b7dabe":"# model.plot_metric()","a6058eb8":"feature_imp = pd.DataFrame(sorted(zip(model.feature_importances_,train.drop(columns=['FRAUD']).columns)), columns=['Value','Feature'])\n\nplt.figure(figsize=(10, 5))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\nplt.tight_layout()\nplt.show()","c0086bda":"y_pred = model.predict(X_test)\ny_pred_t = model.predict(X_train)\nprint('Train F1-Score :', f1_score(y_train, y_pred_t))\nprint('Train Recall-Score :', recall_score(y_train, y_pred_t))\nprint('Train Precision-Score :', precision_score(y_train, y_pred_t))\nprint('Train Accuracy-Score :', accuracy_score(y_train, y_pred_t))\nprint('')\nprint('Test F1-Score :', f1_score(y_test, y_pred))\nprint('Test Recall-Score :', recall_score(y_test, y_pred))\nprint('Test Precision-Score :', precision_score(y_test, y_pred))\nprint('Test Accuracy-Score :', accuracy_score(y_test, y_pred))","921a7bf8":"model_submission = LGBMClassifier()\nmodel_submission.fit(train.drop(columns=['FRAUD']), train.FRAUD, verbose=True)","dab12de7":"feature_imp = pd.DataFrame(sorted(zip(model_submission.feature_importances_,train.drop(columns=['FRAUD']).columns)), columns=['Value','Feature'])\n\nplt.figure(figsize=(10, 5))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\nplt.tight_layout()\nplt.show()","dcd6834f":"y_pred_s = model_submission.predict(X_test)\ny_pred_t_s = model_submission.predict(X_train)\nprint('Train F1-Score :', f1_score(y_train, y_pred_t_s))\nprint('Train Recall-Score :', recall_score(y_train, y_pred_t_s))\nprint('Train Precision-Score :', precision_score(y_train, y_pred_t_s))\nprint('Train Accuracy-Score :', accuracy_score(y_train, y_pred_t_s))\nprint('')\nprint('Test F1-Score :', f1_score(y_test, y_pred_s))\nprint('Test Recall-Score :', recall_score(y_test, y_pred_s))\nprint('Test Precision-Score :', precision_score(y_test, y_pred_s))\nprint('Test Accuracy-Score :', accuracy_score(y_test, y_pred_s))","da270ff2":"y_submission = model_submission.predict(test.drop(columns=['ID']))\nsubmission = pd.DataFrame({'ID': test.ID.astype(np.int64), 'FRAUD': y_submission.astype(np.int64)})\nsubmission.to_csv(\"submission.csv\", index = False)","64a8ad44":"np.unique(y_submission, return_counts=True)","13aa802c":"## Loading the dataset","af8b6c1c":"## Import neccessary libraries","20fd6432":"## Pre-processing the dataset"}}