{"cell_type":{"eb40e3aa":"code","23e5912c":"code","61ba34fe":"code","a35c7844":"code","77c6bedf":"code","9c466d91":"code","0254b038":"code","33a925af":"code","5869d3da":"code","d4154cca":"code","a8100e0e":"code","d9a0e3b1":"code","15d70b72":"code","8477f968":"code","3aa41bf6":"code","ea1be98c":"code","e5488a9d":"code","7b62287f":"code","1b3042be":"code","3fd87efb":"code","91548258":"code","9655d58d":"code","4b77a993":"code","072c8699":"code","95975ecf":"code","ba08f0d8":"code","6e2b6a2c":"markdown"},"source":{"eb40e3aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","23e5912c":"df=pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\") #load the data","61ba34fe":"pd.set_option('max_columns',None) #set option to explore all the columns\ndf.head() #explore the data","a35c7844":"df.columns  #exploring the columns\ndf=df[[\"Unnamed: 0\",\"ID\",\"Name\",\"Age\",\"Nationality\",\"Overall\",\"Club\",\"Value\",\"Wage\",\"Preferred Foot\",\"Weight\",\"Height\",\"Release Clause\"]] #picking only the columns interested in\ndf[\"Unnamed: 0\"]+=1  \n","77c6bedf":"df=df[0:1000] #choosing the top 1000 player \n","9c466d91":"import numpy as np\ndf.info() #checking the data \ndf.isna().sum().plot(kind=\"bar\") #plotting sum of missing data\n","0254b038":"df[\"Release Clause\"].fillna(method='ffill',inplace=True)#filling na in release clause with the ffil value\n\n","33a925af":"df=df.dropna()#dropping the rest na values\n","5869d3da":" df=df.rename(columns = {'Unnamed: 0':'Rank'}) #rename ","d4154cca":"g=sns.relplot(x=\"Rank\",y=\"Age\",data=df[:50],kind=\"line\") #checking if there is any Relationship between age and the rank of the players \ng.fig.suptitle(\"Relationship between age and the rank of the players\")","a8100e0e":"#removing strings from specific columns in order to convert it to int type\ndf['Value'] = df['Value'].replace('M', '', regex=True)\ndf['Value'] = df['Value'].replace('\u20ac', '', regex=True)\n\ndf.info()\n","d9a0e3b1":"df=df[~df['Value'].isin([\"600K\"])]#found one value in thousands , decided to delete it \nprint(sum(df[\"Value\"].str.contains(\"K\")))#checking if there is any other value in thousands\n","15d70b72":"df['Value']=df[\"Value\"].astype(float)#converting the tyoe\ng=sns.relplot(x=\"Rank\",y=\"Value\",data=df,hue=\"Preferred Foot\")#plotting Relationship between Rank and value \nq=sns.relplot(x=\"Rank\",y=\"Value\",data=df[:100])#plotting Relationship between Rank and value for the best 100 player\ng.fig.suptitle(\"Relationship between Rank and value\")\nq.fig.suptitle(\"Relationship between Rank and value for 100 best players\")\ng.set(ylabel=\"value in millions\")\nq.set(ylabel=\"value in millions\")","8477f968":"df[\"Height\"]=df[\"Height\"].replace(\"'\",\".\",regex=True).astype(float)#removing strings from specific columns in order to convert it to int type\n\ndf[\"Weight\"]=df[\"Weight\"].replace(\"lbs\",\".\",regex=True).astype(float)#removing strings from specific columns in order to convert it to int type\n\n\ndf.info()\n","3aa41bf6":"k=sns.relplot(x=\"Weight\",y=\"Height\",data=df,kind=\"line\",ci=None)\nk.set(xlabel=\"weight in pounds\",ylabel=\"height in foot\")\nk.fig.suptitle(\"weight in pounds vs height in foot\")\n#plotting weight vs height ","ea1be98c":"g=sns.relplot(x=\"Rank\",y=\"Weight\",data=df,kind=\"line\")#plotting rank vs weight (no relationship between being fat and good player :P)","e5488a9d":"df[\"Wage\"]=df[\"Wage\"].replace(\"[\u20ac,K]\",\"\",regex=True).astype(float)#removing strings from specific columns in order to convert it to int type\n\n","7b62287f":"df[\"Club\"].unique()\nmean_club=df[:50].groupby(\"Club\").mean().sort_values(\"Wage\",ascending=False)#preparing to plot club to mean wage they pay\nmean_club","1b3042be":"sns.set_style()\ns=sns.relplot(x=\"Club\",y=\"Wage\",data=mean_club,size=\"Wage\")\nplt.xticks(rotation=90)\ns.fig.suptitle(\"mean wage per club with top 50 players\")\ns.set(ylabel=\"mean wage in millions\")","3fd87efb":"df[\"Release Clause\"]=df[\"Release Clause\"].replace(\"[\u20ac,M]\",\"\",regex=True).astype(float)#removing strings from specific columns in order to convert it to int type\n\n","91548258":"x=sns.relplot(x=\"Rank\",y=\"Release Clause\",data=df)#as expected better player means higher Release Clause\nx.fig.suptitle(\"rank of player Release Clause in millions\")\nx.set(xlabel=\"rank of player\",ylabel=\"Release Clause in millions\")","9655d58d":"df.head()\ndf.groupby(\"Nationality\").size().sort_values()\n","4b77a993":"\nsns.countplot(x=\"Nationality\",data=df[:100],order=df['Nationality'][:100].value_counts().index)\nplt.xticks(rotation=90)#by country , how many they have in the best 100 players list","072c8699":"sns.countplot(x=\"Club\",data=df[:100],order=df['Club'][:100].value_counts().index)\nplt.xticks(rotation=90)#by club , how many they have in the best 100 players list","95975ecf":"df[\"Preferred Foot\"].value_counts().plot(kind=\"pie\",autopct=\"%.1f%%\")\n\n","ba08f0d8":"df[\"Preferred Foot\"][:10].value_counts().plot(kind=\"pie\",autopct=\"%.1f%%\")\nplt.title(\"feet\")","6e2b6a2c":"df.head()"}}