{"cell_type":{"d2e4deaf":"code","87bea965":"code","1eab1a2a":"code","c380a5c6":"code","737f6702":"code","2359eafb":"code","c5a794a8":"code","a613c4d2":"markdown","900eb1b1":"markdown","2b50a711":"markdown","34699fc6":"markdown","5ee1f9a5":"markdown","fdf31fdc":"markdown","dbb8d1d5":"markdown","e0cf2b6b":"markdown","75ae7539":"markdown","ce5f2edc":"markdown","5af6c690":"markdown"},"source":{"d2e4deaf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","87bea965":"import seaborn as sns\nimport matplotlib.pyplot as plt\n'''Data Cleaning'''\ndf = pd.read_csv('..\/input\/fifa-20-complete-player-dataset\/players_20.csv')\ndf=df.dropna(subset=['club','nationality','age','short_name'])\ndf=df[df['value_eur']>1][df['wage_eur']>1][df['potential']>1][df['overall']>1]\n\n'''Set the color palette'''\nsns.set_style(style='darkgrid')\nsns.set_context(context='poster',font_scale=0.5)\nsns.set_palette(sns.color_palette((\"muted\")))","1eab1a2a":"'''TOP n clubs or countries that have the best overall rating'''\ndef top_n_charts(field,n,data):\n    sub_df = data[['short_name',field,'overall','player_positions']]\n    # # Add a count index for the next move\n    sub_df['count']=1\n    ls=sub_df.groupby(field).sum()\n    ls=ls[ls['count']>10]\n    ls['overall_mean']=(ls['overall']\/ls['count'])\n    ls=ls.sort_values('overall_mean',ascending=False).reset_index()\n    print(ls[:n])\n    f,ax=plt.subplots(figsize=(20,7))\n    sns.barplot(x=field,y='overall_mean',data=ls[:n])\n    ax.set(ylim=(65,85))\n    plt.show()\ntop_n_charts('club',10,df)\ntop_n_charts('nationality',10,df)","c380a5c6":"'''Extract the player's best position and we assume that the first position is the best'''\ndf_player=df.copy()\n'''And classify and reduce them into 6 species'''\ndf_player['best_pos']=df_player['player_positions'].str.split(',').str[0]\ndf_player=df_player[df_player['best_pos']!='GK']\ndict_pos={'ST':'Fwd_Center',\n          'CF':'Fwd_Center',\n          'LW':'Fwd_Winger',\n          'RW':'Fwd_Winger',\n          'LM':'Mid_Side',\n          'RM':'Mid_Side',\n          'CM':'Mid_Center',\n          'CAM':'Mid_Center',\n          'CDM':'Mid_Center',\n          'CB':'Back_Center',\n          'LB':'Back_Side',\n          'RB':'Back_Side',\n          'LWB':'Back_Winger',\n          'RWB':'Back_Winger'}\ndf_player['best_pos']=df_player['best_pos'].map(dict_pos)\ns=['Back_Center','Back_Side','Back_Winger','Fwd_Center','Fwd_Winger','Mid_Center','Mid_Side']\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, recall_score, f1_score, classification_report,confusion_matrix\nfrom sklearn.neighbors import NearestNeighbors,KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB,BernoulliNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier\n\ncols=['pace','shooting','passing','dribbling','defending','physic']\nfor col in cols:\n    df_player['n_'+col] = df_player[col]\/df_player['overall']\nreq_col_basic=['n_'+col for col in cols]\nx=df_player[req_col_basic]\ny=df_player['best_pos']\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\n\ndef display_confusion_matrix(y,y_hat,label,axs):\n    res=confusion_matrix(y, y_hat)\n    row_sums=res.astype(float).sum(axis=1)\n    res=res\/row_sums[:,np.newaxis]\n    res=pd.DataFrame(res,columns=label,index=label)\n    sns.heatmap(res,cmap='Blues',annot=True,ax=axs)\n\nmodels=[]\nmodels.append((\"KNN\", KNeighborsClassifier(n_neighbors=10)))\nmodels.append((\"GaussianNB\", GaussianNB()))\nmodels.append((\"DecisionTreeGini\", DecisionTreeClassifier()))\nmodels.append((\"SVM Classifier\", SVC(C=10)))\nmodels.append((\"RandomForest\", RandomForestClassifier(n_estimators=11, max_features=None)))\nmodels.append((\"Adaboost\", AdaBoostClassifier(n_estimators=1000)))\nmodels.append((\"LogisticRegression\", LogisticRegression(C=1000, tol=1e-10, solver=\"sag\", max_iter=10000)))\nmodels.append((\"GBDT\", GradientBoostingClassifier(max_depth=6, n_estimators=100)))\nmodels.append((\"NeuralNetClassifier\", MLPClassifier(solver='lbfgs',alpha=1e-5,\\\n                                                    hidden_layer_sizes=(7,7,7),\\\n                                                    activation='relu',random_state=1)))\nfor i in range(int(len(models)\/3)):\n    fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 8))\n    for j in range(3):\n        clf_name,clf=models[i*3+j]\n        clf.fit(X_train,Y_train)\n        Y_pred=clf.predict(X_test)\n        display_confusion_matrix(Y_test,Y_pred,s,ax[j])\n        ax[j].set_title(clf_name)\n            \n#     '''The factors of being good at each position'''\n#     cols=['pace','shooting','passing','dribbling','defending','physic']\n#     for col in cols:\n#         df_player['n_'+col] = df_player[col]\/df_player['overall']\n#     req_col_basic=['n_'+col for col in cols]\n#     xy_combo=df_player[req_col_basic+['best_pos']]\n#     xy_combo=xy_combo.groupby('best_pos').mean()\n#     plt.figure()\n#     sns.heatmap(xy_combo,cmap='Blues',annot=True)\n    \nplt.show()","737f6702":"cols=['attacking_crossing','attacking_finishing','attacking_heading_accuracy','attacking_short_passing',\\\n      'attacking_volleys','skill_dribbling','skill_curve','skill_fk_accuracy','skill_long_passing',\\\n      'skill_ball_control','movement_acceleration','movement_sprint_speed','movement_agility',\\\n      'movement_reactions','movement_balance','power_shot_power','power_jumping','power_stamina',\\\n      'power_strength','power_long_shots','mentality_aggression','mentality_interceptions',\\\n      'mentality_positioning','mentality_vision','mentality_penalties','mentality_composure',\\\n      'defending_marking','defending_standing_tackle','defending_sliding_tackle']\nfor col in cols:\n    df_player['n_'+col] = df_player[col]\/df_player['overall']\nreq_col_basic=['n_'+col for col in cols]\nx=df_player[req_col_basic]\ny=df_player['best_pos']\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\n\nfor i in range(int(len(models)\/3)):\n    fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 8))\n    for j in range(3):\n        clf_name,clf=models[i*3+j]\n        clf.fit(X_train,Y_train)\n        Y_pred=clf.predict(X_test)\n        display_confusion_matrix(Y_test,Y_pred,s,ax[j])\n        ax[j].set_title(clf_name)","2359eafb":"'''The factors of being good at each position'''\ncols=['pace','shooting','passing','dribbling','defending','physic']\nfor col in cols:\n    df_player['n_'+col] = df_player[col]\/df_player['overall']\nreq_col_basic=['n_'+col for col in cols]\nxy_combo=df_player[req_col_basic+['best_pos']]\nxy_combo=xy_combo.groupby('best_pos').mean()\nplt.figure()\nsns.heatmap(xy_combo,cmap='Blues',annot=True)\nplt.show()","c5a794a8":"def values_potential_relations(df):\n    sub_df=df.copy()\n    sub_df=sub_df[['short_name','age','overall','potential']]\n    sub_df['difference']=sub_df['potential']-sub_df['overall']\n    sub_df[['value_eur','wage_eur']]=df[['value_eur','wage_eur']]\n    print(sub_df)\n    sns.heatmap(sub_df.corr(),vmax=1,vmin=-1,cmap=sns.color_palette('RdBu',n_colors=128),annot=True)\n    plt.show()\nvalues_potential_relations(df)","a613c4d2":"1. We classified almost all back wingers as back side. Actually, these two roles are quite similar while the back wingers are taking more attack tasks.\n2. A half of forward wingers are counted as mid-side. In fact, these two roles are usually switching with each other to change the formation during the game.\n3. Having more attributes obviously increase the accuracy.","900eb1b1":"According to the figure of club, FC Bayern M\u00fcnchen, Real Madrid, Juventus and FC Barcelona have the higher overall rating than others. And starting from the No.5 to No.6, the difference between them is quite small from which the overall rating is around 76. However, suprisingly, we don't see any tradionally strong coutires such as Germany and France in the countries' figure. The main reason would be that there are many low level leagues with low level national players are included, making the spectrum much wider and the average lower.","2b50a711":"Firstly, I obtain the data from the csv data file and also deal with the data cleaning section. At the same time, set up the style, context and color palette from the figure.","34699fc6":"**The main factors of being good at each position**","5ee1f9a5":"The following function is used to obtain the top clubs or countries which have the high overall rating.","fdf31fdc":"Summary:\n1. With the increasing of age, the players will be closer to their potential and they will meet highest position of their career.\n2. The greater overall rating will benifit their value and also wage.\n3. The potential acts very similar role with overall rating that cause an increasement in value and wage.\n4. Value and wage have a very strong and tied positive correlation that better players better value and wage!!!","dbb8d1d5":"The following function extract the player's best position(we assume that the first position is the best). And with the given 6 basic attributes, derive the player's best position with nine kinds of classifiers. Firstly, we convert all the attributes by the player's overall. Then, we can use trainning dataset to train the models and predict the further test dataset. Finally, we will use the confusion matrix to compare the real labels with the predicted labels.","e0cf2b6b":"**Overall Rating Analysis**","75ae7539":"Then, I will try more basic attributes and see if we can get preciser prediction.","ce5f2edc":"Summary:\n1. back_center: needs more pace and physic to prevent themselves from getting crushed by the strikers.\n2. Back_side: needs almost main basic attributes except the shooting skill, bacause, the back side dont need to shoot the ball in the most of time.\n3. Back Winger: are very siimilar with back side.\n4. Forward Center: Good dribbling, pace and shooting skill is a necessity. And a strong body will help them win the contact with the defender.\n5. Forward Winger: Very similar with the foward center, because they gonna attack from the two sides. And sometimes, they can support the forward center with passing the ball to them.\n6. Mid center: they should do well in all 6 attributes, because they are in the middle of the formation and gonna deal with attack, organize and defend at the same time.\n7. Mid Side: they are the connection between, back-side and forward-winger. So, they don't have too many defend tasks but they need good pace and passing skills.\n","5af6c690":"**Players Analysis**"}}