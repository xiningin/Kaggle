{"cell_type":{"cc0e32fd":"code","537003d1":"code","77cfe524":"code","d911a37e":"code","bc63d6bf":"code","09be6409":"code","a1a21d06":"code","f8f36b78":"code","205913b4":"code","66fd0806":"code","9388cc1b":"code","1061678c":"code","98e77b93":"code","158b9923":"markdown","f95a5226":"markdown","de01c9a1":"markdown","001f504b":"markdown","ba9f141e":"markdown","7db98d86":"markdown"},"source":{"cc0e32fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n  #      print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","537003d1":"!pip install dash jupyter_dash dash_core_components dash_table  dash_bootstrap_components dash_html_components ","77cfe524":"import plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport dash\nimport pandas as pd\nimport jupyter_dash as jd\nfrom jupyter_dash import JupyterDash\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport dash_bootstrap_components as dbc\nfrom dash.dependencies import Output, Input, State\nfrom dash.exceptions import PreventUpdate\nfrom dash_table import DataTable\npd.options.display.max_columns = None\nfrom plotly.subplots import make_subplots\nimport warnings\nwarnings.filterwarnings('ignore')\nfor p in [plotly, dash, jd, dcc, html, dbc, pd,]:\n    print(f'{p.__name__:-<30}v{p.__version__}')","d911a37e":"product = pd.read_csv('..\/input\/learn-platform-districtengagement\/district_engagement.csv',index_col=0,parse_dates=['time'])","bc63d6bf":"product.sample()","09be6409":"product_focus = pd.read_csv('..\/input\/learn-platform-districtengagement\/product_focus.csv')\nproduct_focus.head()\nid_name = product_focus[['LP_ID','Product_Name']]\nid_name.head()","a1a21d06":"product = pd.merge(left=product,right=id_name,left_on='lp_id',right_on='LP_ID',how='left')\nproduct.head()","f8f36b78":"product = product[product.lp_id.isin(id_name.LP_ID)]","205913b4":"district_modified = pd.read_csv('..\/input\/learn-platform-districtengagement\/district_modified.csv')\ndistrict_modified.head()","66fd0806":"product = product[product.district.isin(district_modified.district_id)]\nproduct = pd.merge(left=product,right=district_modified[['state','district_id']],left_on='district',\n                   right_on='district_id',how='left')\nproduct.head()","9388cc1b":"#Plotting treemap chart with one of the states\nutah_df = product[product.state == 'Utah']\nutah_df.head()\nutah_df.loc[:,'district'] = utah_df.district.apply(lambda x: str(x))\n# We can create bar chart for each school, pct_access and engagement index\n# We can create bar chart for each product\n# We can create stacked bar chart for each state, and each product\npx.treemap(utah_df, path =['district','Product_Name'],\n      values='engagement_index',color='district')","1061678c":"from plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom IPython.display import HTML, Image","98e77b93":"#Opening up the big guns, so the data can explored in realtime. \n#Inspired by \nimport numpy as np\nlearnpf=  JupyterDash(__name__, external_stylesheets=[dbc.themes.COSMO])\n\ndef make_empty_fig():\n    fig = go.Figure()\n    fig.layout.paper_bgcolor = '#E5ECF6'\n    fig.layout.plot_bgcolor = '#E5ECF6'\n    return fig\n\nlearnpf.layout = html.Div([\n    dbc.Col([\n        html.H1('Product Access & Engagement across USA'),\n        html.H2('Learn PF Dataset'),\n\n    ], style={'textAlign': 'center'}),\n    html.Br(),\n    dbc.Row([\n        dbc.Col(lg=1),\n        dbc.Col([\n            dcc.Dropdown(id='product_dropdown',\n                        value='Learning A-Z',\n                        options=[{'label': lpid, 'value': str(lpid)}\n                                for lpid in product.Product_Name.unique()]),\n            dcc.Graph(id='product_chart'),\n        ], lg=10)\n    ]),\n    html.Br(),\n    html.H2('State and school district access', style={'textAlign': 'center'}),\n    html.Br(),\n    dbc.Row([\n        dbc.Col(lg=1),\n        dbc.Col([\n            dbc.Label('State'),\n            dcc.Dropdown(id='state_dropdown',\n                         placeholder='Select a state',\n                         options=[{'label': state, 'value': state}\n                                  for state in np.sort(product.state.unique())]),\n            html.Br(),\n            dcc.Graph(id='State_barchart',\n                      figure=make_empty_fig())\n        ], md=12, lg=5),\n        dbc.Col([\n            dbc.Label('School'),\n            dcc.Dropdown(id='school_dropdown',\n                         placeholder='Select School Districts',\n                         options=[{'label': school, 'value': school}\n                                  for school in np.sort(product.district.unique())]),\n            html.Br(),\n            dcc.Graph(id='school_timeseries',\n                      figure=make_empty_fig())\n        ], md=12, lg=5),\n    ]),\n])\n@learnpf.callback(Output('product_chart', 'figure'),\n              Input('product_dropdown', 'value'))\n\ndef product_chart(lpid):\n    lpid_df = product[product.Product_Name == lpid]\n    lpid_df.sort_values(by='time',ascending=True,inplace=True)\n    lpfig = go.Figure()\n    lpfig.add_trace(go.Scatter(x=lpid_df.time,\n                              y=lpid_df.engagement_index,\n                              mode='lines',\n                              line_color='blue',\n                              name='engagement_index'))\n    lpfig.add_trace(go.Scatter(x=lpid_df.time,\n                              y=lpid_df.pct_access,\n                              mode='lines',\n                              line_color='green',\n                              name='Percentage_access'))\n    return lpfig\n\n    \n@learnpf.callback(Output('State_barchart', 'figure'),\n              Input('state_dropdown', 'value'))\n\ndef state_chart(state):\n    state_df=product[product.state == state]\n    state_df.loc[:,'district'] = state_df.district.apply(lambda x: str(x))\n    state_fig = px.treemap(state_df, path =[px.Constant(\"all\"),'district','Product_Name'],\n                           values='engagement_index',color='district')\n    return state_fig\n    \n@learnpf.callback(Output('school_timeseries', 'figure'),\n                  Input('school_dropdown', 'value'))\n    \ndef school_series(school):\n    school_df = product[product.district == school]\n    school_df.sort_values(by='time',ascending=True,inplace=True)\n    grp_school = school_df.groupby('time')['pct_access','engagement_index'].sum().reset_index()\n    school_fig = px.line(grp_school,x='time',y='engagement_index')\n    return school_fig\n    \nlearnpf.run_server(mode='inline',height=200)","158b9923":"### After merging the dataset with School District, State and Product, it is ready for visualisation ","f95a5226":"### District information from Learnplatform dataset","de01c9a1":"### Using a combined version of Learnplatform engagement dataset.","001f504b":"**Objective**\n\n1) Show the visualisation dashboard with Jupyterdash on Kaggle\n\n2) Use Dash interactivity and Plotly Express Treemap, Line plots to let the audience explore the data\n\n2) Try Jupyter Dash functionality with Kaggle Notebook. It works-\n\n3) Improve on the dashboard, so the design can be used for production purposes","ba9f141e":"### Firing up the Dash app, using the JupyterDash library. Still exploring ways to create the reports like R  ","7db98d86":"### Again Learn platform Product database"}}