{"cell_type":{"5e605311":"code","3b8c629b":"code","d4a40332":"code","0c4b7da2":"code","e4a9f14b":"code","d43f2160":"code","d662ddab":"code","5f987a6a":"code","faeeb5cd":"code","5e336708":"code","05d10c6b":"code","9ce5f990":"code","a0a1e72f":"code","697bf0a4":"code","f670e7bd":"code","0ebd153e":"code","4cf6667b":"code","115023a5":"code","f8103dfb":"code","23bceb47":"code","d63fb622":"code","acb59b4e":"code","3d707f9b":"code","2823f7e4":"code","a5b14247":"code","adfb1d6c":"code","42fbe1f3":"code","f1211eca":"code","81c66429":"code","e063f44c":"code","ac012b21":"code","ccbc85b6":"code","8685a667":"code","9068673e":"code","2ad1c7a6":"code","6cf72341":"code","ec4831f8":"code","b0befa36":"code","fdcf25f2":"code","25070777":"code","fdc3a1d0":"code","fdff9c0e":"code","6f3a16a2":"code","6bb0ec72":"code","f4e09bbb":"code","2bdd42a5":"code","0e63d938":"code","a8dfd5cb":"code","8d8a6adf":"code","d4252711":"code","ac45ce78":"code","731b0f1f":"code","8eaa53d4":"code","5fdab970":"code","342a0e05":"code","11da98f0":"code","aaf73936":"code","4091591d":"code","29d38f88":"markdown","2e0acfee":"markdown","afbf99d0":"markdown","d63c21a5":"markdown","b2bd1e04":"markdown","9ec185a0":"markdown","78cb7969":"markdown","cdc9b006":"markdown","f6b8c96a":"markdown","70c60009":"markdown","5e6116e1":"markdown","6e984f4d":"markdown","35cf71bf":"markdown","edaffdeb":"markdown","b08bf4f8":"markdown","24c2de55":"markdown","d884e157":"markdown","e0aa90aa":"markdown","668a3b39":"markdown","ffd04ccb":"markdown","f65f9ca6":"markdown","ef3b19b9":"markdown","a937ba6f":"markdown","1f57eff3":"markdown","a8ac5fa0":"markdown","412e4abd":"markdown","21f87bae":"markdown","2b3a007a":"markdown","073d89d1":"markdown","efd45717":"markdown","78791148":"markdown","e8f12c0e":"markdown","ad3ed6f8":"markdown","f522cc18":"markdown","b02e18dd":"markdown","ad408700":"markdown","74d63ea4":"markdown","2d7fb733":"markdown","0aed6061":"markdown","2073d1dc":"markdown","d43a1186":"markdown","32d14f0b":"markdown","74e49a00":"markdown","1efcbc1e":"markdown","eac04f9a":"markdown","5647b01c":"markdown","a6412c5b":"markdown","b88c7a20":"markdown","5fb11e9b":"markdown","c69de40d":"markdown","daa0b7e8":"markdown"},"source":{"5e605311":"import pandas as pd\nimport numpy as np\n\ndfOrdersItems = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv')\ndfOrders = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_orders_dataset.csv')\ndfProducts = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_products_dataset.csv')\ndfOrdersReviews = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_order_reviews_dataset.csv')\ndfSellers = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_sellers_dataset.csv')\ndfCustomers = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_customers_dataset.csv')\ndfGeolocation = pd.read_csv('..\/input\/olist-modified-data\/geolocation_v2.csv')\ndfTranslation = pd.read_csv('..\/input\/brazilian-ecommerce\/product_category_name_translation.csv')","3b8c629b":"dfProducts = dfProducts.merge(dfTranslation, on='product_category_name')\ndfProducts.drop('product_category_name', axis=1, inplace=True)\ndfProducts.rename(columns={\n    'product_category_name_english' : 'product_category'\n}, inplace=True)\ndfProducts = dfProducts[['product_id','product_category']]\ndfProducts.head()","d4a40332":"dfSellerx = pd.merge(dfSellers, dfGeolocation, left_on='seller_zip_code_prefix', right_on='geolocation_zip_code_prefix')\ndfSellerx.rename(columns={\n    'geolocation_lat' : 'seller_lat',\n    'geolocation_lng' : 'sellet_lng',\n}, inplace=True)\ndfSellerx = dfSellerx[['seller_id','seller_lat','sellet_lng']]\ndfSellerx.head()","0c4b7da2":"dfCustomerx = pd.merge(dfCustomers, dfGeolocation, left_on='customer_zip_code_prefix', right_on='geolocation_zip_code_prefix')\ndfCustomerx.rename(columns={\n    'geolocation_lat' : 'customer_lat',\n    'geolocation_lng' : 'customer_lng',\n}, inplace=True)\ndfCustomerx = dfCustomerx[['customer_id','customer_lat','customer_lng']]\ndfCustomerx.head()","e4a9f14b":"df = pd.merge(dfOrders, dfOrdersItems, on='order_id', how='right')\ndf = df.merge(dfProducts, on='product_id')\ndf = df.merge(dfOrdersReviews, on='order_id')\ndf = df.merge(dfSellerx, on='seller_id')\ndf = df.merge(dfCustomerx, on='customer_id')\ndf = df.rename(columns={'price':'product_price','order_item_id':'quantity'})\ndf = df.drop(['review_id', 'review_creation_date','review_answer_timestamp','review_comment_title','review_comment_message','customer_id','product_id',], axis=1)\ndf.columns","d43f2160":"df = df[df['order_status'] == 'delivered']\ndf.head()","d662ddab":"df = pd.read_csv('..\/input\/olist-modified-data\/final_project_v2.csv')\ndf.head()","5f987a6a":"from math import sin, cos, sqrt, atan2, radians\ndf['distance'] = df[['seller_lat','seller_lng','customer_lat','customer_lng']].apply(\n    lambda row : round(6373.0 * (2 * atan2(sqrt((sin((radians(row['customer_lat']) - radians(row['seller_lat']))\/2))**2 + cos(radians(row['seller_lat'])) * cos(radians(row['customer_lat'])) * (sin((radians(row['customer_lng']) - radians(row['seller_lng']))\/2))**2), sqrt(1-((sin((radians(row['customer_lat']) - radians(row['seller_lat']))\/2))**2 + cos(radians(row['seller_lat'])) * cos(radians(row['customer_lat'])) * (sin((radians(row['customer_lng']) - radians(row['seller_lng']))\/2))**2)))))\n    , axis=1\n)\ndf.head()","faeeb5cd":"df['freight_rate'] = df[['freight_value','quantity']].apply(\n    lambda row : round(row['freight_value'] \/ row['quantity'],2), axis=1\n)\ndf.head()","5e336708":"df = pd.read_csv('..\/input\/olist-modified-data\/final_project_v4.csv')\ndf.head()","05d10c6b":"for item in ['order_purchase_timestamp','order_approved_at','order_delivered_carrier_date','order_delivered_customer_date','order_estimated_delivery_date','shipping_limit_date']:\n    df[item] = pd.to_datetime(df[item])","9ce5f990":"df['approving_time'] = df[['order_purchase_timestamp','order_approved_at']].apply(\n    lambda row : str(row['order_approved_at'] - row['order_purchase_timestamp']).split(' ')[0], axis=1\n)\ndf['processing_time'] = df[['order_approved_at','order_delivered_carrier_date']].apply(\n    lambda row : str(row['order_delivered_carrier_date'] - row['order_approved_at']).split(' ')[0], axis=1\n)\ndf['delivery_time'] = df[['order_delivered_carrier_date','order_delivered_customer_date']].apply(\n    lambda row : str(row['order_delivered_customer_date'] - row['order_delivered_carrier_date']).split(' ')[0], axis=1\n)\ndf['courier_on_time'] = df[['order_delivered_customer_date','order_estimated_delivery_date']].apply(\n    lambda row : 1 if row['order_delivered_customer_date'] <= row['order_estimated_delivery_date'] else 0, axis=1\n)\ndf['seller_on_time'] = df[['order_delivered_carrier_date','shipping_limit_date']].apply(\n    lambda row : 1 if row['order_delivered_carrier_date'] <= row['shipping_limit_date'] else 0, axis=1\n)\ndf.head()","a0a1e72f":"df = df[df.approving_time != 'NaT']\ndf = df[df.processing_time != 'NaT']\ndf = df[df.delivery_time != 'NaT']","697bf0a4":"df['higher_product_price'] = df[['product_price','avg_price']].apply(\n    lambda row: 1 if row['product_price'] > row['avg_price'] else 0, axis = 1\n)\ndf['higher_freight_rate'] = df[['freight_rate','avg_freight']].apply(\n    lambda row: 1 if row['freight_rate'] > row['avg_freight'] else 0, axis = 1\n)\ndf['better_product'] = df[['product_rating','avg_rating']].apply(\n    lambda row: 1 if row['product_rating'] > row['avg_rating'] else 0, axis = 1\n)\ndf.head()","f670e7bd":"df = df[['product_rating','avg_rating','better_product','product_price','avg_price','higher_product_price','seller_rating','product_sold','distance','freight_rate','avg_freight','higher_freight_rate','approving_time','processing_time','delivery_time','courier_on_time','seller_on_time','review_score']]\ndf = df.rename(columns={\n    'avg_rating' : 'avg_product_category_rating',\n    'avg_price' : 'avg_product_category_price',\n    'avg_freight' : 'avg_freight_rate',\n    'product_sold' : 'product_sold_by_seller'\n})\ndf.head()","0ebd153e":"df['approving_time'] = pd.to_numeric(df['approving_time'])\ndf['processing_time'] = pd.to_numeric(df['processing_time'])\ndf['delivery_time'] = pd.to_numeric(df['delivery_time'])","4cf6667b":"df = pd.read_csv('..\/input\/olist-modified-data\/final_project_v5.csv')\ndf = df.rename(columns={\n    'better_product' : 'better_product_rating'\n})\ndf = df.drop(['avg_product_category_rating','avg_product_category_price','avg_freight_rate'], axis=1)","115023a5":"corr = df.corr()\ncorr['review_score']","f8103dfb":"df = df.drop(['higher_product_price','higher_freight_rate','freight_rate','product_price'], axis=1)\ncorr = df.corr()\ncorr['review_score']","23bceb47":"from sklearn.model_selection import train_test_split\nxTrain, xTest, yTrain, yTest = train_test_split(\n    df.drop('review_score', axis=1),\n    df['review_score'],\n    test_size = .1\n)","d63fb622":"from sklearn import tree \nmodel = tree.DecisionTreeClassifier()\nmodel.fit(xTrain,yTrain)\nprint('model score =',model.score(xTrain,yTrain))","acb59b4e":"from sklearn.metrics import accuracy_score\nprediction = model.predict(xTest)\nprint('accuracy =',accuracy_score(yTest, prediction)*100,'%')","3d707f9b":"from sklearn.metrics import mean_squared_error\npredictions = model.predict(xTrain)\nforest_mse = mean_squared_error(yTrain, predictions)\nforest_rmse = np.sqrt(forest_mse)\nprint('error = ',forest_rmse)","2823f7e4":"from sklearn.ensemble import RandomForestClassifier\nmodel2 = RandomForestClassifier(n_estimators=100)\nmodel2.fit(xTrain,yTrain)\nprint('model score =',model2.score(xTrain,yTrain))","a5b14247":"from sklearn.metrics import accuracy_score\nprediction = model2.predict(xTest)\nprint('accuracy =',accuracy_score(yTest, prediction)*100,'%')","adfb1d6c":"from sklearn.metrics import mean_squared_error\npredictions = model2.predict(xTrain)\nforest_mse = mean_squared_error(yTrain, predictions)\nforest_rmse = np.sqrt(forest_mse)\nprint('error = ',forest_rmse)","42fbe1f3":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfig = plt.figure(figsize = (18,15))\nfor i, item in enumerate (df.drop(['better_product_rating','courier_on_time','seller_on_time','review_score'], axis=1)):\n    plt.subplot(3,3,i+1)\n    sns.distplot(df[item])","f1211eca":"fig = plt.figure(figsize = (18,15))\nfor i, item in enumerate (df.drop(['better_product_rating','courier_on_time','seller_on_time','review_score'], axis=1)):\n    plt.subplot(3,3,i+1)\n    sns.boxplot(df[item])","81c66429":"df1 = df\nfor item in df1.describe().columns:\n    df1 = df1[df[item] < (df1.describe()[item].iloc[1] + (df1.describe()[item].iloc[2]*3))]\n    df1 = df1[df[item] > (df1.describe()[item].iloc[1] - (df1.describe()[item].iloc[2]*3))]","e063f44c":"df1.shape","ac012b21":"fig = plt.figure(figsize = (18,15))\nfor i, item in enumerate (df1.drop(['better_product_rating','courier_on_time','seller_on_time','review_score'], axis=1)):\n    plt.subplot(3,3,i+1)\n    sns.distplot(df1[item])","ccbc85b6":"fig = plt.figure(figsize = (18,15))\nfor i, item in enumerate (df1.drop(['better_product_rating','courier_on_time','seller_on_time','review_score'], axis=1)):\n    plt.subplot(3,3,i+1)\n    sns.boxplot(df1[item])","8685a667":"corr = df1.corr()\ncorr['review_score']","9068673e":"from sklearn.model_selection import train_test_split\nxTrain, xTest, yTrain, yTest = train_test_split(\n    df1.drop('review_score', axis=1),\n    df1['review_score'],\n    test_size = .1\n)","2ad1c7a6":"from sklearn.ensemble import RandomForestClassifier\nmodelR1 = RandomForestClassifier(n_estimators=100)\nmodelR1.fit(xTrain,yTrain)\nprint('model score =',modelR1.score(xTrain,yTrain))","6cf72341":"from sklearn.metrics import accuracy_score\nprediction = modelR1.predict(xTest)\nprint('accuracy =',accuracy_score(yTest, prediction)*100,'%')","ec4831f8":"from sklearn.metrics import mean_squared_error\npredictions = modelR1.predict(xTrain)\nforest_mse = mean_squared_error(yTrain, predictions)\nforest_rmse = np.sqrt(forest_mse)\nprint('error = ',forest_rmse)","b0befa36":"df2 = df\nfrom scipy import stats\nz = np.abs(stats.zscore(df2.drop(['better_product_rating','courier_on_time','seller_on_time','review_score'],axis=1)))\ndf2 = df2[(z<3).all(axis=1)]","fdcf25f2":"df2.shape","25070777":"fig = plt.figure(figsize = (18,15))\nfor i, item in enumerate (df2.drop(['better_product_rating','courier_on_time','seller_on_time','review_score'], axis=1)):\n    plt.subplot(3,3,i+1)\n    sns.distplot(df2[item])","fdc3a1d0":"fig = plt.figure(figsize = (18,15))\nfor i, item in enumerate (df2.drop(['better_product_rating','courier_on_time','seller_on_time','review_score'], axis=1)):\n    plt.subplot(3,3,i+1)\n    sns.boxplot(df2[item])","fdff9c0e":"from sklearn.model_selection import train_test_split\nxTrain, xTest, yTrain, yTest = train_test_split(\n    df2.drop('review_score', axis=1),\n    df2['review_score'],\n    test_size = .1\n)","6f3a16a2":"from sklearn.ensemble import RandomForestClassifier\nmodelR2 = RandomForestClassifier(n_estimators=100)\nmodelR2.fit(xTrain,yTrain)\nprint('model score =',modelR2.score(xTrain,yTrain))","6bb0ec72":"from sklearn.metrics import accuracy_score\nprediction = modelR2.predict(xTest)\nprint('accuracy =',accuracy_score(yTest, prediction)*100,'%')","f4e09bbb":"from sklearn.metrics import mean_squared_error\npredictions = modelR2.predict(xTrain)\nforest_mse = mean_squared_error(yTrain, predictions)\nforest_rmse = np.sqrt(forest_mse)\nprint('error = ',forest_rmse)","2bdd42a5":"xTrainPrediction = df.drop('review_score', axis=1).iloc[100:]\nyTrainPrediction = df['review_score'].iloc[100:]\nxTestPrediction = df.drop('review_score', axis=1).iloc[:100]\nyTestPrediction = df['review_score'].iloc[:100]\n\nxTrainProduct = df[['product_rating','better_product_rating']].iloc[100:]\nyTrainProduct = df['review_score'].iloc[100:]\nxTestProduct = df[['product_rating','better_product_rating']].iloc[:100]\nyTestProduct = df['review_score'].iloc[:100]\n\nxTrainSeller = df[['product_sold_by_seller','seller_rating','approving_time','processing_time','seller_on_time']].iloc[100:]\nyTrainSeller = df['review_score'].iloc[100:]\nxTestSeller = df[['product_sold_by_seller','seller_rating','approving_time','processing_time','seller_on_time']].iloc[:100]\nyTestSeller = df['review_score'].iloc[:100]\n\nxTrainCourier = df[['delivery_time','courier_on_time','distance']].iloc[100:]\nyTrainCourier = df['review_score'].iloc[100:]\nxTestCourier = df[['delivery_time','courier_on_time','distance']].iloc[:100]\nyTestCourier = df['review_score'].iloc[:100]","0e63d938":"from sklearn.ensemble import RandomForestClassifier\nmodelPrediction = RandomForestClassifier(n_estimators=100)\nmodelPrediction.fit(xTrainPrediction,yTrainPrediction)\nprint('model score =',modelPrediction.score(xTrainPrediction,yTrainPrediction))","a8dfd5cb":"from sklearn.ensemble import RandomForestClassifier\nmodelProduct = RandomForestClassifier(n_estimators=100)\nmodelProduct.fit(xTrainProduct,yTrainProduct)\nprint('model score =',modelProduct.score(xTrainProduct,yTrainProduct))","8d8a6adf":"from sklearn.metrics import accuracy_score\nprediction = modelProduct.predict(xTestProduct)\nprint('accuracy =',accuracy_score(yTestProduct, prediction)*100,'%')","d4252711":"from sklearn.metrics import mean_squared_error\npredictions = modelProduct.predict(xTrainProduct)\nforest_mse = mean_squared_error(yTrainProduct, predictions)\nforest_rmse = np.sqrt(forest_mse)\nprint('error = ',forest_rmse)","ac45ce78":"from sklearn.ensemble import RandomForestClassifier\nmodelSeller = RandomForestClassifier(n_estimators=100)\nmodelSeller.fit(xTrainSeller,yTrainSeller)\nprint('model score =',modelSeller.score(xTrainSeller,yTrainSeller))","731b0f1f":"from sklearn.metrics import accuracy_score\nprediction = modelSeller.predict(xTestSeller)\nprint('accuracy =',accuracy_score(yTestSeller, prediction)*100,'%')","8eaa53d4":"from sklearn.metrics import mean_squared_error\npredictions = modelSeller.predict(xTrainSeller)\nforest_mse = mean_squared_error(yTrainSeller, predictions)\nforest_rmse = np.sqrt(forest_mse)\nprint('error = ',forest_rmse)","5fdab970":"from sklearn.ensemble import RandomForestClassifier\nmodelCourier = RandomForestClassifier(n_estimators=100)\nmodelCourier.fit(xTrainCourier,yTrainCourier)\nprint('model score =',modelCourier.score(xTrainCourier,yTrainCourier))","342a0e05":"from sklearn.metrics import accuracy_score\nprediction = modelCourier.predict(xTestCourier)\nprint('accuracy =',accuracy_score(yTestCourier, prediction)*100,'%')","11da98f0":"from sklearn.metrics import mean_squared_error\npredictions = modelCourier.predict(xTrainCourier)\nforest_mse = mean_squared_error(yTrainCourier, predictions)\nforest_rmse = np.sqrt(forest_mse)\nprint('error = ',forest_rmse)","aaf73936":"for i in range (0,100,10):\n    print('index ',i)\n    print('actual data =', yTestPrediction.iloc[i])\n    print('rating prediction = ', modelPrediction.predict([xTestPrediction.iloc[i]]))\n    print('product performance = ', modelProduct.predict([xTestProduct.iloc[i]]))\n    print('seller performance = ', modelSeller.predict([xTestSeller.iloc[i]]))\n    print('courier performane = ', modelCourier.predict([xTestCourier.iloc[i]]))\n    print('----------------------------------------------------------------------------')","4091591d":"for i in range (0,100,10):\n    print('index ',i+5)\n    print('actual data =', yTestPrediction.iloc[i+5])\n    print('rating prediction = ', modelPrediction.predict([xTestPrediction.iloc[i+5]]))\n    print('product performance = ', modelProduct.predict([xTestProduct.iloc[i+5]]))\n    print('seller performance = ', modelSeller.predict([xTestSeller.iloc[i+5]]))\n    print('courier performane = ', modelCourier.predict([xTestCourier.iloc[i+5]]))\n    print('----------------------------------------------------------------------------')","29d38f88":"**SELLER RATING, PRODUCT RATING AND NUMBER OF PRODUCT SOLD BY SELLER**<br>\n> seller_ratingx = {}<br>\nproduct_ratingx = {}<br>\nproduct_soldx = {}<br>\n\n> for item in df['seller_id'].unique():<br>\n    seller_ratingx[item] = round(df[df['seller_id'] == item].describe().iloc[1][3],1)<br>\n    product_soldx[item] = int(df[df['seller_id'] == item].describe().iloc[0][0])<br>\n\n> for item in df['product_id'].unique():<br>\n    product_ratingx[item] = round(df[df['product_id'] == item].describe().iloc[1][3],1)<br>\n    product_soldx[item] = int(df[df['seller_id'] == item].describe().iloc[0][0])<br>\n\n> seller_rating = []<br>\nproduct_sold = []<br>\nfor item in df['seller_id']:<br>\n    seller_rating.append(seller_ratingx[item])<br>\n    product_sold.append(product_soldx[item])<br>\n\n> product_rating = []<br>\nfor item in df['product_id']:<br>\n    product_rating.append(product_ratingx[item])<br>\n\n> df['seller_rating'] = seller_rating<br>\ndf['product_sold'] = product_sold<br>\ndf['product_rating'] = product_rating<br>\n\n\n**AVERAGE PRICE & RATING FOR EACH PRODUCT CATEGORY**<br>\n>avg_pricex = {}<br>\navg_ratingx = {}<br>\nfor item in df['product_category'].unique():<br>\n    avg_pricex[item] = round(df[df['product_category'] == item].describe().iloc[1][1],1)<br>\n    avg_ratingx[item] = round(df[df['product_category'] == item].describe().iloc[1][8],1)<br>\n\n>avg_price = []<br>\navg_rating = []<br>\nfor item in df['product_category']:<br>\n    avg_price.append(avg_pricex[item])<br>\n    avg_rating.append(avg_ratingx[item])<br>\n    \n>df['avg_price'] = mean","2e0acfee":"## Customer Dataset","afbf99d0":"## Manual Splitting","d63c21a5":"# BEAUTYFYING SOME DATASET\n## Product Dataset","b2bd1e04":"## Beautifying DataFrame","9ec185a0":"## Random Forest Classifier","78cb7969":"we got wrong prediction in **index 15,55 and 75** <br>\nin **index 65 and 95** itindicate that the customer didn't really care with the courier performance as long as the product performas was good as I said before","cdc9b006":"## Freight Rate","f6b8c96a":"## Histogram After Cleaning 2.0","70c60009":"# MACHINE LEARNING MODEL (Prediction)\n## Cleaning Outliers Data","5e6116e1":"## Filtering","6e984f4d":"## Checking our data","35cf71bf":"## Product Performance","edaffdeb":"## Prediction","b08bf4f8":"# MACHINE LEARNING MODEL (Prediction)\n### Without Cleaning Outliers Data","24c2de55":"# LOAD ALL DATA","d884e157":"## Splitting After Cleaning 2.0","e0aa90aa":"# MACHINE LEARNING MODEL (Analysist)\nthe idea is if your customer didn't give you 5 rating it's mean that he\/she was not satisfied enough and might be one of the sellers, courier or the product itself that underperform. So we need to create another Machine Learning to analyze that","668a3b39":"## Random Forrest Classifier After Cleaning 1.0","ffd04ccb":"## Checking Correlation","f65f9ca6":"**SUMMARY**<br>\n** 1. RANDOM FOREST CLASSIFIER (Without Cleaning Outliers) **<br>\n  Model Score = 99.70<br>\n  Accuracy Score = 68.94%<br>\n  Error = 0.12236<br>\n** 2. RANDOM FOREST CLASSIFIER (Cleaning Outliers 1.0) **<br>\n  Model Score = 99.67<br>\n  Accuracy Score = 69.48%<br>\n  Error = 0.12376<br>\n  **Note** : there are NaN correlation between **seller_on_time** and **courier_on_time** with **review_score**<br>\n** 3. RANDOM FOREST CLASSIFIER (Cleaning Outliers 2.0 Using Z Score) **<br>\n  Model Score = 99.67<br>\n  Accuracy Score = 68.59%<br>\n  Error = 0.12825<br><br>\n  \n  Based on summary, I choose using data and model number 3 because the data is cleaner and the model score, accuracy and error was almost the same with the others","ef3b19b9":"## Random Forrest Classifier After Cleaning 2.0","a937ba6f":"pretty good isn't it?<br>\nlet's analyze base on those data<br>\nwe got wrong prediction in **index 10** while the other is fine<br>\nin **index 0, 40, 50** the customer didn't give you 5 rating because he\/she didn't satisfied with the product<br> \nin **index 20, 30, 70, 80, 90** the customer satisfied with all of the performance as our model predict that either product, seller and courier perfomance is good<br>\nin **index 60** the customer give us 5 rating even the courier performance was bad in can be indicated the customer didn't really care the courier performance as long as the product is good<br><br>\nlet's take a look from another data to make sure our model is good enough","1f57eff3":"## Seller Dataset","a8ac5fa0":"## Boxplot Before Cleaning","412e4abd":"since there are a lot of outliers data, so lets clean it!","21f87bae":"## Cleaning 2.0 Using Z Score","2b3a007a":"## Approving time, Processing time, Delivery time","073d89d1":"# Analyzing","efd45717":"## Courier Performance","78791148":"## Checking Correlation After Cleaning 1.0","e8f12c0e":"## Dropping Columns\nBecause the correlation of higher_product_price, higher_freight_rate, freight_rate and product_price are different with hypothesis","ad3ed6f8":"<img src=\"https:\/\/serving.photos.photobox.com\/7531498291ad2dfa83791c20e6f4bd5febc5409f88831ccc3812ed4ab7e4c4341d02916c.jpg\"\n     alt=\"Markdown Monster icon\" \n     style=\"float: left; margin-right: 10px;\" \/>","f522cc18":"# CREATING ANOTHER COLUMNS THAT NEEDED\n## Seller rating, product rating, number of product sold by seller and average price & rating for each product category\n###### I created the columns in vscode because it takes a very long time but the algorithm is down below","b02e18dd":"## Boxplot After Cleaning 2.0","ad408700":"after we clean the outliers lets check our data again!","74d63ea4":"## Decision Tree Classifier","2d7fb733":"# CREATING DUMMY FOR SOME COLUMNS\n## higher_product_price, better_product and higher_freight_rate","0aed6061":"# MERGING DATASET","2073d1dc":"## Seller Performance","d43a1186":"## Splitting","32d14f0b":"there are NaN correlation from **courier_on_time** and **seller_on_time**, but lets ignore it!","74e49a00":"## Cleaning 1.0\ndroping any row which have value < (mean - (3 x std)) or > (mean + (3 x std))","1efcbc1e":"## Boxplot After Cleaning 1.0","eac04f9a":"## Average Freight_Rate\n###### I created the columns in vscode because it takes a very long time but the algorithm is down below\n> avg_freightx = {}<br>\nfor item in df['distance'].unique():<br>\n    avg_freightx[item] = round(df[df['distance'] == item].describe().iloc[1][14],2)<br>\n\n> avg_freight = []<br>\nfor item in df['distance']:<br>\n    avg_freight.append(avg_freightx[item])<br>\n    \n> df['avg_freight'] = avg_freight<br>","5647b01c":"since RandomForestClassifier has a better accuracy lets focus on it!","a6412c5b":"## Distance","b88c7a20":"## Histogram After Cleaning 1.0","5fb11e9b":"## Histogram Before Cleaning","c69de40d":"## Splitting After Cleaning 1.0","daa0b7e8":"### **CUSTOMER SATISFACTION**\nI haven't read a lot of theory about customer satisfaction, but the picture down bellow explains how I thought about customer satisfaction work. First, satisfaction happens when what customer expected is the same or higher with what they got. Then I divided expectation and performance based on everyone who has a responsibility in the transaction those are seller, courier, and the product itself.\n\nExpectations and performance have a different correlation with customer satisfaction. higher expectation would make customer less satisfied while better performance will make them more satisfied.\n\nhere is the explanation and the hyphotesis of each variables: \n- **EXPECTATION**\n    * **product_price (-)** : the higher amount paid by customer, the higher their expextation\n    * **higher_product_price (-)** : this is dummy variable, 1 when the **product_price** is higher then the average **product_price** in the same category and 0 otherwise. of course customer will expect more when they paid more that the average\n    * **product_sold_by_seller (-)** : this variable explains seller's experience, and the customer will expect more with the experienced one\n    * **freight_rate (-)** : the higher amount paid by customer for delivering their things, the higher their expextation\n    * **higher_freight_rate (-)** : this is dummy variable, 1 when the **freight_rate** is higher then the average **freight_rate** for the same distance and 0 otherwise. of course customer will expect more when they paid more that the average\n- **PERFORMANCE**\n    * **product_rating (+)** : higher **product_rating** indicated higher product performance\n    * **better_product_rating (+)** : this is dummy variable, 1 when the **product_rating** is higher then the average **product_rating** in the same category and 0 otherwise.\n    * **seller_rating (+)** : higher **seller_rating** indicated higher seller performance\n    * **approving_time (-)** : is the different between **order_purchase_timestamp** and **order_approved_at**. higher number of approving time indicated lower seller performance\n    * **processing_time (-)** : is the different between **order_approved_at** and **order_delivered_carrier_date**. higher number of processing time indicated lower seller performance\n    * **seller_on_time (+)** : this is dummy variable, 1 when the seller deliver the product to courier **(order_delivered_carrier_date)** before **shipping_limit_date** and 0 otherwise\n    * **delivery_time (-)** : is the different between **order_delivered_carrier_date** and **order_delivered_customer_date**. higher number of delivery time indicated lower courier performance\n    * **courier_on_time (+)** : this is dummy variable, 1 when the courier deliver the product to customer **(order_delivered_customer_date)** before **order_estimated_delivery_date** and 0 otherwise\n    * **distance (-)** : the risk for delivering product is higher when the distance is higher"}}