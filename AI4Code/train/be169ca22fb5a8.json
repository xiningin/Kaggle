{"cell_type":{"87687068":"code","65907481":"code","77d307ce":"code","5699d5c6":"code","cc67f474":"code","936c2ef7":"code","8312c85f":"code","eced6204":"code","12f2b11a":"code","3a859afb":"markdown","ec09c0b8":"markdown","547f49bf":"markdown","b76b995b":"markdown","ee465dac":"markdown"},"source":{"87687068":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65907481":"def drawpuz(puz):\n    %matplotlib inline\n    import numpy as np\n    import matplotlib.pyplot as plt\n    fig = plt.figure(figsize=(6,6))    \n    ax = fig.add_subplot(1, 1, 1)\n    ax.axis('equal')\n    ax.set_xlim( 0, 2)\n    ax.set_ylim( 0, 2)\n    tmp = puz.copy()\n    for ii in range(3):\n        for jj in range(3):\n            if tmp[ii,jj]==0:\n                ax.text((jj+1)\/2, (3-ii)\/2,str(tmp[ii,jj]),fontsize = 30,color = 'red')\n            else:\n                ax.text((jj+1)\/2, (3-ii)\/2,str(tmp[ii,jj]),fontsize = 30,color = 'green') \n    return fig\n    ","77d307ce":"#0=L 1=R 2=U 3=D\ndef movable(puz):\n    if np.where(puz == 0) in [(0,0)]:\n        out=[0,2]\n    if np.where(puz == 0) in [(2,0)]:\n        out=[0,3]\n    if np.where(puz == 0) in [(0,2)]:\n        out=[1,2]\n    if np.where(puz == 0) in [(2,2)]:\n        out=[1,3]\n    if np.where(puz == 0) in [(0,1)]:\n        out=[0,1,2]\n    if np.where(puz == 0) in [(2,1)]:\n        out=[0,1,3]\n    if np.where(puz == 0) in [(1,0)]:\n        out=[0,2,3]\n    if np.where(puz == 0) in [(1,2)]:\n        out=[1,2,3]\n    if np.where(puz == 0) in [(1,1)]:\n        out=[0,1,2,3]\n    return out\n\ndef newpuz(puz,move):\n    puzz = puz.copy()\n    zeroloc=np.array([np.where(puzz==0)[0][0],np.where(puzz==0)[1][0]])\n    if move == 0:\n        tmp=puzz[tuple(zeroloc+np.array([0,0]))]\n        puzz[tuple(zeroloc+np.array([0,0]))]=\\\n        puzz[tuple(zeroloc+np.array([0,1]))]\n        puzz[tuple(zeroloc+np.array([0,1]))]=tmp\n        out = puzz\n    if move == 1:\n        tmp=puzz[tuple(zeroloc+np.array([0,0]))]\n        puzz[tuple(zeroloc+np.array([0,0]))]=\\\n        puzz[tuple(zeroloc+np.array([0,-1]))]\n        puzz[tuple(zeroloc+np.array([0,-1]))]=tmp\n        out = puzz\n    if move == 2:\n        tmp=puzz[tuple(zeroloc+np.array([0,0]))]\n        puzz[tuple(zeroloc+np.array([0,0]))]=\\\n        puzz[tuple(zeroloc+np.array([1,0]))]\n        puzz[tuple(zeroloc+np.array([1,0]))]=tmp\n        out = puzz\n    if move == 3:\n        tmp=puzz[tuple(zeroloc+np.array([0,0]))]\n        puzz[tuple(zeroloc+np.array([0,0]))]=\\\n        puzz[tuple(zeroloc+np.array([-1,0]))]\n        puzz[tuple(zeroloc+np.array([-1,0]))]=tmp\n        out = puzz        \n    return out\n\ndef dist(puz1,puz2):\n    out = 0\n    for ii in range(1,9):\n        loc1=np.array([np.where(puz1==ii)[0][0],np.where(puz1==ii)[1][0]])        \n        loc2=np.array([np.where(puz2==ii)[0][0],np.where(puz2==ii)[1][0]])\n        out = out+sum(np.abs(loc1-loc2))\n    return out\n    ","5699d5c6":"#This ini is not solvable.\nini = np.array([[0,1,2],[3,4,5],[6,7,8]])","cc67f474":"ini = np.array([[0,1,2],[3,4,5],[7,6,8]])\ngoal = np.array([[1,2,3],[8,0,4],[7,6,5]])","936c2ef7":"drawpuz(ini).canvas.draw()\n","8312c85f":"drawpuz(goal).canvas.draw()","eced6204":"puz = ini.copy()\nh = dist(puz,goal)\ng = dist(puz,ini)\ncost = h\nmoved = 4\npuzlist =[puz]\nwhile dist(puz,goal)>0:\n    move = movable(puz)\n    remove = [1, 0, 3, 2]\n    if moved <4:\n        move.remove(remove[moved])\n    costlist = []\n    movelist = []\n    puztmp = puz\n    for ii in move:        \n        costlist.append(dist(newpuz(puz,ii),goal))\n        movelist.append(ii)\n    costlist = np.array(costlist)\n    tmp = np.where(costlist==min(costlist))\n    import random\n    cost = costlist[tmp[0][random.randint(0,len(tmp[0])-1)]]\n    moved = movelist[tmp[0][random.randint(0,len(tmp[0])-1)]]\n    puz = newpuz(puz,moved)\n    puzlist.append(puz)\n            ","12f2b11a":"%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import animation, rc\nfrom IPython.display import HTML\n# First set up the figure, the axis, and the plot element we want to animate\nfig = plt.figure(figsize = (6,6))\nax = fig.add_subplot(1, 1, 1)\nax.axis('equal')\nax.set_xlim( 0, 2)\nax.set_ylim( 0, 2)\n\n# animation function. This is called sequentially\ndef animate(i):\n    tmp = puzlist[i]\n    ax.clear()\n    for ii in range(3):\n        for jj in range(3):\n            if tmp[ii,jj]==0:\n                ax.text((jj+1)\/2, (3-ii)\/2,str(tmp[ii,jj]),fontsize = 30,color = 'red')\n            else:\n                ax.text((jj+1)\/2, (3-ii)\/2,str(tmp[ii,jj]),fontsize = 30,color = 'green') \n    ax.set_xlim(0, 2)\n    ax.set_ylim(0, 2)\n    return fig,\n\n# call the animator. blit=True means only re-draw the parts that have changed.\nanim = animation.FuncAnimation(fig, animate,\n                               frames=len(puzlist),interval=500, blit=True, repeat=False)\n\n# equivalent to rcParams['animation.html'] = 'html5'\nrc('animation', html='jshtml')\nHTML(anim.to_jshtml())","3a859afb":"# Animate Puzzle","ec09c0b8":"# Setup Initial and Goal Puzzle","547f49bf":"# Functions for Solving Puzzle","b76b995b":"# function for Drawing Puzzle","ee465dac":"# Start Solving Puzzle"}}