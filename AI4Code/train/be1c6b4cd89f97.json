{"cell_type":{"07ea4508":"code","c4ba8946":"code","946b9d95":"code","53094a12":"code","e9691ed8":"code","b8a0a36d":"code","37f3be9a":"code","2f88d070":"code","e2b6a218":"markdown","17debd18":"markdown","7498d8f0":"markdown","d13486e2":"markdown","e2c087d7":"markdown","36bffdfb":"markdown","0c401869":"markdown","7dedc8ec":"markdown","6787c031":"markdown"},"source":{"07ea4508":"# Import the required libraries \nimport pandas as pd\nimport numpy as np\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim \nfrom torchvision.transforms import transforms\nfrom torch.utils.data import DataLoader\nfrom torch.utils.data import Dataset\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","c4ba8946":"#reading the data\ntest=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ntrain=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\n# get the image pixel values and labels\ntrain_labels = train.iloc[:, 0]\ntrain_images = train.iloc[:, 1:]\ntest_images = test.iloc[:, 0:]","946b9d95":"\ndef get_device():\n    if torch.cuda.is_available():\n        device = 'cuda:0'\n    else:\n        device = 'cpu'\n    return device\ndevice = get_device()","53094a12":"transform = transforms.Compose(\n    [transforms.ToPILImage(),\n     transforms.ToTensor(),\n     transforms.Normalize((0.5, ), (0.5, ))\n])","e9691ed8":"class MNISTDataset(Dataset):\n    def __init__(self, images, labels=None, transforms=None):\n        self.X = images\n        self.y = labels\n        self.transforms = transforms\n         \n    def __len__(self):\n        return (len(self.X))\n    \n    def __getitem__(self, i):\n        data = self.X.iloc[i, :]\n        data = np.asarray(data).astype(np.uint8).reshape(28, 28, 1)\n        \n        if self.transforms:\n            data = self.transforms(data)\n            \n        if self.y is not None:\n            return (data, self.y[i])\n        else:\n            return data\ntrain_data = MNISTDataset(train_images, train_labels, transform)\ntest_data = MNISTDataset(test_images, transform)\n# dataloaders\ntrainloader = DataLoader(train_data, batch_size=128, shuffle=True)\ntestloader = DataLoader(test_data, batch_size=128, shuffle=True)","b8a0a36d":"class Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(in_channels=1, out_channels=20, \n                               kernel_size=5, stride=1)\n        self.conv2 = nn.Conv2d(in_channels=20, out_channels=50, \n                               kernel_size=5, stride=1)\n        self.fc1 = nn.Linear(in_features=800, out_features=500)\n        self.fc2 = nn.Linear(in_features=500, out_features=10)\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.max_pool2d(x, 2, 2)\n        x = F.relu(self.conv2(x))\n        x = F.max_pool2d(x, 2, 2)\n        x = x.view(x.size(0), -1)\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\nnet = Net().to(device)\nprint(net)","37f3be9a":"#loss\ncriterion = nn.CrossEntropyLoss()\n# optimizer\noptimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)","2f88d070":"def train(net, trainloader):\n    for epoch in range(4): # no. of epochs\n        running_loss = 0\n        for data in trainloader:\n            # data pixels and labels to GPU if available\n            inputs, labels = data[0].to(device, non_blocking=True), data[1].to(device, non_blocking=True)\n            # set the parameter gradients to zero\n            optimizer.zero_grad()\n            outputs = net(inputs)\n            loss = criterion(outputs, labels)\n            # propagate the loss backward\n            loss.backward()\n            # update the gradients\n            optimizer.step()\n \n            running_loss += loss.item()\n        print('[Epoch %d] loss: %.3f' %\n                      (epoch + 1, running_loss\/len(trainloader)))\n \n    print('Done Training')\nx = torch.empty(0, 3)\ndef test(net, testloader):\n    correct = 0\n    total = 0\n    with torch.no_grad():\n        for data in testloader:\n            inputs = data[0].to(device, non_blocking=True)\n            outputs = net(inputs)\n            _, predicted = torch.max(outputs.data, 1)\n            predictions=torch.cat((x,predicted),0)\n#train(net, trainloader)\ntest(net, testloader)        \nsubmission = pd.concat(\n    [pd.Series(range(1,28001),name = \"ImageId\"),predictions],\n    axis = 1\n)\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","e2b6a218":"# Main Problem\nWe have a classification task. We are provided images of numerical digits (in the format of Csv File) and we have to predict the label of the image.","17debd18":"Usually when we are provided data , we need to transform the images into a prescribed format fors our ML algorithms to train on them. But here since we aren't given images but rather pixels in csv we will transform the same for our algorithm.","7498d8f0":"So Pytorch is basically an open ML Library , which can be used for tasks such as computer vision and natural language processing.","d13486e2":"The metric which is used to see how the network is working .","e2c087d7":"The below code loads and preprocess the data . It is a custom defined function.","36bffdfb":"We now train the neural network for our task.","0c401869":"# Introduction\n**\u201cProgress isn't made by early risers. It's made by lazy men trying to find easier ways to do something.\u201d**\n\u2015 Robert Heinlein.\n\nHi fellow Kagglers, I assume 1.) you are lazy and 2.) you don't know Pytorch.\nThe main aim of this Kernel is to introduce the concept of Pytorch . Now granted there are many great kernels already with regard to the topics. Being one of the most laziest person, I don't study Kaggle notebooks a lot. ","7dedc8ec":"P.s( I am facing a problem with the function of testloader).I think it seems the data of testloader is not correctly loaded.","6787c031":"Training the network on the train set and applying it to the train set . "}}