{"cell_type":{"bd81d0e3":"code","7d7cc796":"code","cc955987":"code","49be3da9":"code","e4c5fbb5":"code","00216a2e":"code","f530a003":"code","77e3a8ce":"code","26f19d1a":"code","5f625822":"code","50feaf04":"code","3fc4720d":"code","6a94bd90":"code","66a2f00a":"code","03f547cb":"code","15c66f34":"code","25c91100":"code","4642fb7e":"code","3d32d866":"code","61334438":"code","b53cf8d0":"code","64690235":"code","bf6f9b8d":"code","ca2883c2":"code","83f5fc75":"code","3506e7b2":"code","996a7771":"code","e4b7c255":"code","e232ba9c":"code","fb047bd8":"code","45dd5a96":"code","ee481cfd":"code","3b210dce":"code","c429d0b4":"code","89cd8506":"code","7188ff7b":"code","869eadef":"code","711b4fe6":"code","c54aaef9":"code","f7d9861e":"code","fc5f5869":"markdown","050c09a4":"markdown","d08f5d6e":"markdown","34de80aa":"markdown","47d18f05":"markdown","fdf140d6":"markdown","f122be5b":"markdown","643d8032":"markdown","55d83be3":"markdown","c9c93ed9":"markdown","4458c1ac":"markdown","8c82aaef":"markdown","3b58d8ad":"markdown","ddaaae47":"markdown","33f72718":"markdown"},"source":{"bd81d0e3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.dates import AutoDateFormatter, AutoDateLocator\nfrom matplotlib import dates as dt\nimport datetime\n\nplt.style.use('seaborn')","7d7cc796":"path_train = 'covid19-global-forecasting-week-4\/train.csv'\npath_test = 'covid19-global-forecasting-week-4\/test.csv'\npath_sbumit = 'covid19-global-forecasting-week-2\/submission.csv'\npath_india = '..\/input\/COVID_India_Updated_from_API.csv'\npath_test = '..\/input\/COVID_India_Updated_Test_data.csv'\n\ntrain_kaggle = '..\/input\/train.csv'\ntest_kaggle = '..\/input\/test.csv'\n#submit_kaggle = '\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv'\n\npath_graphs = ''","cc955987":"df_train_count = pd.read_csv(train_kaggle)\ndf_test_count = pd.read_csv(test_kaggle)\ndf_train_count.rename(columns = {'Country_Region': 'Country\/Region', 'Province_State':'Province\/State'}, inplace = True)\ndf_test_count.rename(columns = {'Country_Region': 'Country\/Region', 'Province_State':'Province\/State'}, inplace = True)","49be3da9":"def country_df(country, df):\n    \"\"\"Filters a Dataframe according to Country.\n    Args: \n    country: String. Name of country for which dataframe is to be filtered for.\n    df: Dataframe. The Dataframe that is to be filtered.\n    Returns: \n    df_cases: Dataframe. Filtered dataframe containing fields with confirmed Covid cases for the country.\n    df_fatal: Dataframe. Filtered dataframe containing fileds with Covid fatalities for the country.\n    \"\"\"\n    if country != 'World':\n        country_filt = (df['Country\/Region'] == country)\n        df_cases = df.loc[country_filt].groupby(['Date'])['ConfirmedCases'].sum()\n        df_fatal = df.loc[country_filt].groupby(['Date'])['Fatalities'].sum()\n    else:\n        df_cases = df.groupby(['Date'])['ConfirmedCases'].sum()\n        df_fatal = df.groupby(['Date'])['Fatalities'].sum()\n    \n    return df_cases, df_fatal","e4c5fbb5":"def prepare_train_data(df_cases, df_fatal):\n    \"\"\"Splits ConfirmedCases and Fatalities dataframe into training features and labels.\n    Args:\n    df_cases: Dataframe. Filtered dataframe containing fields with confirmed Covid cases for the country.\n    df_fatal: Dataframe. Filtered dataframe containing fileds with Covid fatalities for the country.\n    Returns:\n    x_train: np array. Array of integers denoting days since firstday of original df for model training features.\n    y_cases: List. List of Confirmed Cases as labels for model from first day of original df.\n    y_fatal: List. List of Fatalities as labels for model from first day of original df.\n    \"\"\"\n    x_train = np.arange(0, len(df_cases)).reshape(-1,1)\n    y_cases = df_cases.to_list()\n    y_fatal = df_fatal.to_list()\n   \n    \n    return x_train, y_cases, y_fatal\n","00216a2e":"def plot_actual_predicted(country,label,  y_cases, y_pred, show_lockdown = False):\n    \"\"\"Plots the Actual and Predicted ConfirmedCases\/Fatalities for a country.\n    Args:\n    country(string) country name.\n    y_cases, y_pred (array\/list) - Actual And Predicted Metrics.\n    label(string) - Which metric is being passed.\n    Returns:\n    \"\"\"\n        \n    xtick_locator = AutoDateLocator()\n    xtick_formatter = AutoDateFormatter(xtick_locator)\n    \n    # generating dates using pandas, can be used with date_plot.\n    train_times = pd.date_range(start = '2020-01-22', periods=len(y_cases))\n    test_times = pd.date_range(start = '2020-01-22', periods=len(y_pred))\n    dates = train_times.to_series().dt.date\n    dates_test = test_times.to_series().dt.date\n\n    # converting to Series, list \n    d_train = dates.tolist()\n    d_test  = dates_test.tolist()\n    \n    # getting date_format variable for matplotlib and lockdown date.\n    date_format = dt.DateFormatter('%b, %d')\n    \n    # converting lockdown date string to datetime.\n    lockdown_date_str = '2020-03-25'\n    lockdown_date = datetime.datetime.strptime(lockdown_date_str, '%Y-%m-%d')\n    \n    plt.style.use('seaborn')\n    fig, ax = plt.subplots()\n    fig.set_figheight(8)\n    fig.set_figwidth(17)\n    fig.autofmt_xdate()\n    ax.plot_date(d_train , y_cases, label = 'Actual Values', linestyle = 'solid', marker = None)\n    ax.plot_date(d_test , y_pred , label = 'Predicted Values', linestyle = 'solid', marker = None)\n    ax.set_title(f'{country} : {label} - Polynomial Regression (Degree = 6)')\n    ax.set_ylabel(f'No of {label}')\n    if show_lockdown:\n        ax.axvline(lockdown_date, color = 'r', label='Lockdown')\n    ax.xaxis.set_major_formatter(date_format)\n    ax.legend()\n    fig.savefig( path_graphs + f'{country}_conf_case.jpg')","f530a003":"#from india_API_data.Covid19_india_org_api import make_dataframe\n#from india_API_data.Covid19_india_org_api import get_test_dataframe","77e3a8ce":"def plot_daily(df, columns, save = False, log = False):\n    \"\"\" Helper Function to Plot Current Metrics from API data.\n    Args: \n    df (Dataframe) - Dataframe of API data create Using Make_dataframe.\n    columns (List of column names)\n    save(Bool) - Whether to save fig.\n    Returns:\n    \"\"\"\n    fig, ax = plt.subplots()\n    fig.set_figheight(10)\n    fig.set_figwidth(20)\n    plt.style.use('seaborn')\n    plt.title('Daily Trends: India (From API)')\n    plt.ylabel('No. Of Individuals')\n    plt.xlabel('Date')\n    fig.autofmt_xdate()\n    for item in columns:\n        plt.plot_date(x = df.index, y= df[item], label = item, linestyle = 'solid', marker = None)\n    plt.legend()\n    if save!= False:\n        fig.savefig(path_graphs + save + 'India_Cumulative_stats.png')\n    #plt.yscale('log')\n    plt.show()","26f19d1a":"# Plotting a simple logistic curve using numpy and matplotlib.\n# x = (-6,6), L =1, k = 1, x0 =0\nx = np.arange(-6,7)\npower = -1*x\ny = 1 \/ (1 + np.exp(power))\n\nplt.figure(figsize=(10,10))\nplt.title('Simple Logistic Curve')\nplt.grid(True)\nplt.plot(x, y)\nplt.show()","5f625822":"china_cases, china_fatal = country_df('China', df_train_count)\nchina_cases.plot(figsize = (10,10), title = 'China Confirmed Cases', grid = True)\nplt.show()","50feaf04":"china_cases[:44].plot(figsize = (10,10), title = 'China Confirmed Cases (Log Scale)', grid = True, logy=True)\nplt.show()","3fc4720d":"world_cases, world_fatal = country_df('World', df_train_count)\nworld_cases.plot(figsize = (10,10), title = 'Worldwide Confirmed Cases', grid = True)\nplt.show()","6a94bd90":"world_cases.plot(figsize = (10,10), title = 'Worldwide Confirmed Cases (Log)', grid = True, logy = True)\n#ax = plt.gca()\n#plt.plot([ax.get_xlim()[0],ax.get_xlim()[1]],[ax.get_ylim()[0],ax.get_ylim()[1]])\nplt.show()","66a2f00a":"#india_data = make_dataframe()\nindia_data = pd.read_csv(path_india, index_col = 0)\nplot_daily(india_data.iloc[40:], india_data.columns.tolist(), save='All_stats_')","03f547cb":"india_data.plot(y = 'DailyConfirmed', title  = 'India Cases (Log Scale)', logy = True, figsize = (18,9))\nplt.show()","15c66f34":"#india_test_df = get_test_dataframe()\nindia_test_df = pd.read_csv(path_test, index_col = 0)","25c91100":"india_test_df.plot(title = 'No. of Testing Samples Collected per day by ICMR', figsize = (16,8))\nplt.show()","4642fb7e":"# Combining with Statistics data\nindia_combined_data = india_test_df.join(india_data, how = 'right')","3d32d866":"plot_daily(india_combined_data, ['TotalConfirmed', 'Testing Samples'], save='Cofirmed_testing_samples_')","61334438":"def growth_factor(confirmed):\n    confirmed_nminus1 = confirmed.shift(1, axis = 0)\n    confirmed_nminus2 = confirmed.shift(2, axis = 0)\n    return ((confirmed - confirmed_nminus1)\/(confirmed_nminus1 - confirmed_nminus2))","b53cf8d0":"india_growth_factor = growth_factor(india_data.TotalConfirmed[41:])\nprint(f'Mean Growth Factor : {india_growth_factor.mean()}')","64690235":"india_growth_factor.plot(grid = True, title = 'India Growth Factor Since 2020-03-11 (Widespread Testing) ', figsize = (18,6), ylim = (0,5))\n\nplt.axhline(india_growth_factor.mean(), color = 'r', label='Mean Growth Factor')\nplt.legend()\nplt.savefig(path_graphs + 'India_Growth_Factor')\nplt.show()","bf6f9b8d":"plt.figure(figsize = (18,6))\nax = sns.regplot(x = np.arange(len(india_growth_factor.index.tolist())) , y =india_growth_factor.to_list())\nax.set_title('Linear reegression on Growth Factor')\nax.set_xlabel(' Days Since 2020-03-11')\nplt.savefig(path_graphs +'India_Growth_Factor_Pred')\nplt.show()\n#ax.set_ybound(upper = 10)\n# there is an outlier, causing problems (can just remove.)\n# This is just a visualisation library, won't give you the equation, use plain linear reg to get line and plot it.","ca2883c2":"growth_ratio_india = india_data.TotalConfirmed[41:]\/india_data.TotalConfirmed[41:].shift(1)\nprint(f' Mean growth Ratio of Cases In India : {growth_ratio_india.mean()}')\ngrowth_ratio_india.plot(grid = True, title = 'India Growth Ratio', figsize = (18,6))\nplt.axhline(growth_ratio_india.mean(), color = 'r', label='Mean Growth Ratio')\nplt.legend()\nplt.savefig(path_graphs + 'India_Growth_Ratio')\nplt.show()","83f5fc75":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split","3506e7b2":"# Imputing Missing values with mean of growth factor from 11-03 to present day.\n# df_test_count.rename(columns = {'Country_Region': 'Country\/Region', 'Province_State':'Province\/State'}, inplace = True)\n\nindia_growth_factor_1 = growth_factor(india_data.TotalConfirmed[:])\nindia_growth_factor_1.replace(np.nan, india_growth_factor.mean(), inplace=True)\nindia_growth_factor_1.replace(np.inf, india_growth_factor.mean(), inplace = True)\nindia_growth_factor_1 = india_growth_factor_1.to_frame()","996a7771":"india_growth_factor_1.rename(columns = {'TotalConfirmed' : 'GrowthFactor'} , inplace=True)","e4b7c255":"# Merging the two dataframes\nindia_data = pd.concat([india_data, india_growth_factor_1], axis = 1)","e232ba9c":"growth_ratio_india_1 = india_data.TotalConfirmed[:]\/india_data.TotalConfirmed[:].shift(1)","fb047bd8":"growth_ratio_india_1.replace(np.nan, 1, inplace = True)","45dd5a96":"growth_ratio_india_1 = growth_ratio_india_1.to_frame()\ngrowth_ratio_india_1.rename(columns = {'TotalConfirmed' : 'GrowthRatio'} , inplace=True)","ee481cfd":"# Merging the two dataframes\nindia_data = pd.concat([india_data, growth_ratio_india_1], axis = 1)","3b210dce":"# Days since First case\/data Availibity.\ndays_outb = np.arange(len(india_data))\n\nindia_data['Days'] = days_outb","c429d0b4":"x = india_data[['Days','GrowthFactor', 'GrowthRatio']]\ny = india_data['TotalConfirmed']","89cd8506":"# Not Shuffling time-Series Data.\nx_train, x_test, y_train, y_test = train_test_split(x, y , test_size = 0.1, shuffle = False)","7188ff7b":"Input = [('poly', PolynomialFeatures(degree= 4)), ('lin_reg', LinearRegression())]\n\npipe = Pipeline(Input)","869eadef":"pipe.fit(x_train, y_train)","711b4fe6":"pipe.score(x_test, y_test)","c54aaef9":"predictions = pipe.predict(x)","f7d9861e":"plot_actual_predicted('India', 'Confirmed Cases', y, predictions, show_lockdown= True)","fc5f5869":"## Logistic Curve or S- shaped Curve : Comparing Epidemic Behaviour\n<p>From the 3blue1brown video, epidemics are observed to follow a logistic curve. The no. of infected rises exponentially and reaches an inflection point before gradually decreasing. This can be somewhat seen in China's Confirmed Cases plot.<\/p>\n![Image of Sigmoid](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/9e26947596d387d045be3baeb72c11270a065665)\nHere x0 = the x value of the sigmoids midpoint. <br>\nL = the curve's maximum value. <br>\nk = the logistic growth rate or steepness of the curve.","050c09a4":"# Covid 19 : India Analysis and Forecasting","d08f5d6e":"## Note: \n<p> The author doesn't claim to have any domain knowledge and isn't an epidemiologist. The analysis in this notebook is just an attempt to learn new techniques and gather potential insights from the available data but shouldn't be taken seriously. <\/p>","34de80aa":"1. The Number of People getting infected is still growing, but tobetter visualise whether it is growing exponentially we can use the log scale.\n2. The data plotted on the log Scale shows that the growth seems to have slowed down compared to the orginal straight line representing exponential growth before a smaller second wave. This could be a temporary Dip Before another wave but is an encouraging sign that shows that the expoenetial growth of the virus might finally be slowing down.This also does not guarantee that the inflection point of the growth of the virus has been reached.","47d18f05":"#### Linear Regression for Growth Factor.\nThis points to downwards trend, however due to not enough early testing there are outliers with very high growth rate. The confidence interval shows that this isn't really a meaningful result. ","fdf140d6":"# 3. Modeling - Polynomial Regression\n<p>This won't model the eventual inflection and decline of the growth. Due to a scarcity of features, the results should be taken with a grain of salt and might just be predicting based on the days since the outbreak feature.<\/p> <p>The results have been left in as it may be possible to get an idea of the initial growth using this approach. \nFound the best validation set score using gridsearchCV and a polynomial of degree 4.\nRegularized methods like ridge regression don't seem to predict further than the last known confirmedcases value.<\/p>","f122be5b":"## India - Current Statistics\nLooking at the trend on the logarithmic scale, the exponential growth of the virus seems to be slowing down, this is an encouraging trend. We also need to look at the amount of testing done to get a better sense of whether this is representative or just duw to a lack of testing, data.","643d8032":"### Growth Factor Of Virus\n<p>\n    The growth factor on day N is the number of confirmed cases on day N minus confirmed cases on day N-1 divided by the number of confirmed cases on day N-1 minus confirmed cases on day N-2.\n     <br>Measure of whether the disease is growing or not. <\/p>\n1. A value of greater than 1 = growth. <br>\n2. Less than 1 = decline. <br>\n3. A growth factor of 1 is the inflection point and at this point the disease is not increasing.\n\n<p>\nIt can be seen that the growth of the virus <b>hasn't stabilised at the inflection point<\/b>.<br>\nThe Linear Regression on the Growth Factor seems to point to a downward trend in the Growth Factor but the margin of error is high.","55d83be3":"## This behaviour can be somewhat seen in the case of China","c9c93ed9":"### Growth Ratio of Virus\nThe growth ratio on day N is the number of confirmed cases on day N divided by the number of confirmed cases on day N-1.<\/p>\nPercentage Increase in total cumulative Cases from one day to the next.","4458c1ac":"## Worlwide Cases","8c82aaef":"### India Testing Statistics\nThe comparison of the graphs of the amount of Testing Done and the confirmed Cases each day can be a good indicator of whether enough testing is being done. If the curves are very similar it can indicate that not enough people are getting tested.<br>\nLooking at the comparison and observing the sharp increase in samples collected, we can say that testing is finally being done on a larger scale. (Testing Data from 03-13. Sharper increase in April).","3b58d8ad":"####  Using Growth Ratio as a feature","ddaaae47":"# Visualizations & Analysis\n","33f72718":"####  Using Growth Factor as a feature"}}