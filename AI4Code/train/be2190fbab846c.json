{"cell_type":{"3414e474":"code","f4617d99":"code","9182d0cb":"code","6f2c2148":"code","358f7adb":"code","e4e0b650":"code","b1668b70":"code","3bb08349":"code","e820ec00":"code","1b9260d2":"code","9f95eb50":"code","40e54291":"code","a76f58d4":"code","ae0e08a7":"code","0cf645d7":"code","97eab2ed":"code","e01f9ff9":"code","f19b9c14":"markdown"},"source":{"3414e474":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\n%matplotlib inline","f4617d99":"# Load the diabetes dataset\ndiabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)\n","9182d0cb":"# Use only one feature\ndiabetes_X = diabetes_X[:, np.newaxis, 2]\n","6f2c2148":"# Split the data into training\/testing sets\ndiabetes_X_train = diabetes_X[:-20]\ndiabetes_X_test = diabetes_X[-20:]\n","358f7adb":"# Split the targets into training\/testing sets\ndiabetes_y_train = diabetes_y[:-20]\ndiabetes_y_test = diabetes_y[-20:]\n","e4e0b650":"# Create linear regression object\nregr = linear_model.LinearRegression()\n","b1668b70":"# Train the model using the training sets\nregr.fit(diabetes_X_train, diabetes_y_train)\n","3bb08349":"# Make predictions using the testing set\ndiabetes_y_pred = regr.predict(diabetes_X_test)\n","e820ec00":"# The coefficients\nprint('Coefficients: \\n', regr.coef_)\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(diabetes_y_test, diabetes_y_pred))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(diabetes_y_test, diabetes_y_pred))","1b9260d2":"# Plot outputs\nplt.scatter(diabetes_X_test, diabetes_y_test,  color='black')\nplt.plot(diabetes_X_test, diabetes_y_pred, color='blue', linewidth=3)\n\nplt.xticks(())\nplt.yticks(())\n\nplt.show()","9f95eb50":"df=pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","40e54291":"X=df.drop(columns=['Outcome'])\nY=df['Outcome']\nX.shape,Y.shape","a76f58d4":"from sklearn.model_selection import train_test_split as tts\nx_train,x_test,y_train,y_test=tts(X,Y,test_size=0.3,random_state=42)\nx_train.shape,x_test.shape,y_train.shape,y_test.shape","ae0e08a7":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\ntst=lr.fit(X,Y)\nprd=lr.predict(X)","0cf645d7":"cf=lr.coef_\ncf","97eab2ed":"def equator(X,coef=cf):\n  y_hat=0;\n  print('EQUATION OF THE LINE IS:')\n  print('y=({}*{})+({}*{})+({}*{})+({}*{})+({}*{})+({}*{})+({}*{})+({}*{})'.format(coef[0],X[0],coef[1],X[1],coef[2],X[2],coef[3],X[3],coef[4],X[4],coef[5],X[5],coef[6],X[6],coef[7],X[7]))\n  for i in range(cf.shape[0]):\n    y_hat+=X[i]*coef[i]\n  if y_hat>0.5:\n    y_hat=1\n  else:\n    y_hat=0\n  \n  return y_hat\n","e01f9ff9":"x=X.iloc[0]\nrs=equator(x,cf)\nif(rs==1):\n  print('Patient is diabatic')\nelse:\n  print('Patient is not diabatic!!Congrats')","f19b9c14":"\n# Linear Regression Example\nThe example below uses only the first feature of the `diabetes` dataset,\nin order to illustrate the data points within the two-dimensional plot.\nThe straight line can be seen in the plot, showing how linear regression\nattempts to draw a straight line that will best minimize the\nresidual sum of squares between the observed responses in the dataset,\nand the responses predicted by the linear approximation.\n\nThe coefficients, residual sum of squares and the coefficient of\ndetermination are also calculated.\n"}}