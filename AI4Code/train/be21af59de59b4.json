{"cell_type":{"b7052ee4":"code","24163f4f":"code","49a12b49":"code","20a75b23":"code","5b53128b":"code","c8777a2e":"code","8db4c5de":"code","77822e7f":"code","68ff1e78":"code","964b8b38":"code","5762fcd7":"code","54a7654d":"code","20158f4a":"code","2658b720":"code","00dad447":"code","d46478b3":"code","53a38694":"code","4c9f77ed":"code","6804a6a4":"code","be9d46fa":"code","7252c363":"code","3e124a99":"code","1fff6f15":"code","bcb6ee51":"code","a4db2504":"code","ea278a48":"code","79990d75":"code","27cb6305":"code","0b4ebcf9":"code","6afe2e9b":"code","2ad1c142":"code","c5e3f7dc":"code","8bb23c15":"code","9b1aa4c3":"code","26faa44a":"code","e4bc3fa0":"code","a08b86d2":"code","e55f0ccf":"code","58da0131":"markdown","ad4748ef":"markdown","767548ca":"markdown","9001fe60":"markdown","8d24bc6c":"markdown","e510090a":"markdown","cd5e8bf4":"markdown","9eb1185f":"markdown","fbcc27db":"markdown","a38ed0a6":"markdown","6ef3a999":"markdown"},"source":{"b7052ee4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24163f4f":"import matplotlib.pyplot as plt","49a12b49":"edu = pd.read_csv('\/kaggle\/input\/handson3data\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","20a75b23":"edu.head()","5b53128b":"edu.tail()","c8777a2e":"edu.describe()","8db4c5de":"edu['Value']","77822e7f":"edu[10:14]","68ff1e78":"edu.iloc[90:94][['TIME','GEO']]","964b8b38":"edu[edu['Value'] > 6.5].tail()","5762fcd7":"edu['Value'] > 6.5","54a7654d":"edu[edu['Value'] > 6.5]","20158f4a":"edu[edu[\"Value\"].isnull()].head()","2658b720":"edu[edu[\"Value\"].isnull()].count()","00dad447":"edu.max(axis = 0)","d46478b3":"edu.min(axis = 0)","53a38694":"print ('Pandas max function:', edu['Value'].max())","4c9f77ed":"print ('Python max function:', max(edu['Value']))","6804a6a4":"s = edu[\"Value\"]\/100\ns.head()","be9d46fa":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","7252c363":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","3e124a99":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()\n","1fff6f15":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","bcb6ee51":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","a4db2504":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","ea278a48":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","79990d75":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","27cb6305":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","0b4ebcf9":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","6afe2e9b":"edu","2ad1c142":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","c5e3f7dc":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup","8bb23c15":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","9b1aa4c3":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","26faa44a":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","e4bc3fa0":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","a08b86d2":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","e55f0ccf":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","58da0131":"# Why ignore index true","ad4748ef":"### 2. **What happens if we give a number as argument to the method head()?**\n\nIt shows only the first 5 rows (if no number of rows is specified)","767548ca":"###We added a supplementary library for plotting results","9001fe60":"# Not very clear what is D?","8d24bc6c":"### 6. What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\nIt shows if whether a value is higher or lower than 6.5 and is shown as series data; if we use index **edu[edu['Value']>6.5** it will show only the values as a data frame\n","e510090a":"### What do you observe regarding the parameter ascending=False?\nIt relates the highest values of notes to lower ranks (1,2,3 etc)","cd5e8bf4":"1. ### Which is the size of the edu DataFrame (rows x columns)? 384 rows and 3 columns","9eb1185f":"### 4. Which measures does the result show? It seems that it shows some default values, can you guess which ones?\n\nMean, std deviation, min and max values, counts ","fbcc27db":"### 5. What does this index return? What does the first index represent? And the second one?\nFirst Index shows only columns in 90-94 position, and second index is to show only time and geo columns","a38ed0a6":"# What is the inplace doing??","6ef3a999":"### 3. What does the method tail()return?\nIt shows only the last 5 rows (if no argument is specified)\n"}}