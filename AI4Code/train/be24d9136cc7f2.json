{"cell_type":{"a649b4af":"code","e032e133":"code","c29f85b3":"code","2ba54b57":"code","14aa19ea":"code","fef8edd2":"code","6c01cb31":"code","f8c2fe09":"code","0d019dcc":"code","00e0db75":"code","1af17b8f":"code","d38b9267":"code","120961a1":"code","3d2bd0c8":"code","f985014a":"code","bb726f4a":"code","5f316090":"code","6745e86a":"code","3163b9be":"code","b2d5398d":"code","9784b48f":"code","a7e3e351":"code","58b6cc63":"code","09d19254":"code","b06c4a27":"code","52d7dd65":"code","cfcefd1c":"code","f678149f":"code","6b3df429":"code","dee60664":"code","7f44b1a8":"code","65660b08":"markdown","bcdec58e":"markdown","1db6bdb6":"markdown","ace1faa3":"markdown","12401a39":"markdown"},"source":{"a649b4af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e032e133":"# Lecture du dataset\ndf = pd.read_csv(\"..\/input\/bostonhoustingmlnd\/housing.csv\")","c29f85b3":"df.head(10).T","2ba54b57":"df.plot(kind=\"scatter\", x=\"LSTAT\", y=\"PTRATIO\", c=\"MEDV\", cmap=\"rainbow\", s=3, figsize=(12,12))","14aa19ea":"df.count()","fef8edd2":"tabcorr = df.corr()\ntabcorr","6c01cb31":"plt.figure(figsize=(12,12))\nsns.heatmap(abs(tabcorr), cmap=\"coolwarm\")","f8c2fe09":"sns.clustermap(abs(tabcorr), cmap=\"coolwarm\")","0d019dcc":"from scipy.cluster import hierarchy as hc\n\ncorr = 1 - df.corr()\ncorr_condensed = hc.distance.squareform(corr)\nlink = hc.linkage(corr_condensed, method='ward')\nplt.figure(figsize=(12,12))\nden = hc.dendrogram(link, labels=df.columns, orientation='left', leaf_font_size=10)","00e0db75":"correlations = tabcorr.MEDV\nprint(correlations)","1af17b8f":"correlations = correlations.drop(['MEDV'],axis=0)","d38b9267":"print(abs(correlations).sort_values(ascending=False))","120961a1":"df.columns","3d2bd0c8":"X = df.drop(['MEDV'], axis=1)\ny = df.MEDV\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","f985014a":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(X_train, y_train)            # apprentissage\ny_pred = lm.predict(X_test)         # pr\u00e9diction sur l'ensemble de test","bb726f4a":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_pred)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","5f316090":"sns.distplot(y_test-y_pred)","6745e86a":"print(np.sqrt(mean_squared_error(y_test, y_pred)))","3163b9be":"scoreR2 = r2_score(y_test, y_pred)\nprint(scoreR2)","b2d5398d":"lm.score(X_test,y_test)","9784b48f":"X = df.drop(['MEDV'], axis=1)\ny = df.MEDV\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","a7e3e351":"from sklearn import ensemble\nrf = ensemble.RandomForestRegressor()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)\nprint(rf.score(X_test,y_test))","58b6cc63":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_rf)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","09d19254":"sns.distplot(y_test-y_rf)","b06c4a27":"print(np.sqrt(mean_squared_error(y_test, y_rf)))","52d7dd65":"rf.score(X_test,y_test)","cfcefd1c":"import xgboost as XGB\nxgb  = XGB.XGBRegressor()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)","f678149f":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_xgb)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","6b3df429":"sns.distplot(y_test-y_xgb)","dee60664":"print(np.sqrt(mean_squared_error(y_test, y_xgb)))","7f44b1a8":"print(xgb.score(X_test,y_test))","65660b08":"## Xgboost","bcdec58e":"## Visualiser les corr\u00e9lations entre les colonnes","1db6bdb6":"## R\u00e9gression par for\u00eats al\u00e9atoires","ace1faa3":"# Machine Learning","12401a39":"## R\u00e9gression lin\u00e9aire multiple"}}