{"cell_type":{"9d6eb02d":"code","115c6d0d":"code","8e36f6c7":"code","ea504c78":"code","9e72b129":"code","f0f4f7fb":"code","8d5cb17d":"code","2c888e44":"code","e57abbf1":"code","02a9d0d0":"code","d50b4d55":"code","a1703b55":"code","c9b78c28":"code","2fefb0b0":"code","7d7f33ac":"code","506f1cf9":"code","45c20377":"code","a4042b4b":"code","ec5075b7":"code","43ccc5ff":"code","8fb717e2":"code","65da37c6":"code","9de00749":"code","b89d278d":"code","610b3c4e":"code","dbc1bae1":"code","c4f89da5":"code","775dbc78":"code","7e38a76d":"code","61dcdcee":"code","a7c0fd95":"code","6338c65b":"code","ad211d91":"code","52728e9d":"code","9f490eda":"code","bb415e88":"code","746b29a7":"markdown","110b3777":"markdown","20b8a192":"markdown","9b6529c4":"markdown"},"source":{"9d6eb02d":"from sklearn.datasets import load_boston\n\ndataset=load_boston()\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","115c6d0d":"boston=pd.DataFrame(dataset.data , columns=dataset.feature_names)\nboston.head()","8e36f6c7":"boston['MEDV']=dataset.target\nboston.head()","ea504c78":"boston.info()","9e72b129":"boston.nunique()","f0f4f7fb":"boston.describe()","8d5cb17d":"boston.isnull().sum()","2c888e44":"boston['MEDV'].plot()\n","e57abbf1":"from scipy.stats import skew\nboston['MEDV'].skew()","02a9d0d0":"(np.log1p(boston['MEDV'])).skew()","d50b4d55":"corr_matrix=boston.corr().round(2)","a1703b55":"plt.figure(figsize=(10,7))\nsns.heatmap(data=corr_matrix , annot=True)","c9b78c28":"plt.figure(figsize=(20,5))\n\nfeatures = ['LSTAT','RM']\ntarget= boston['MEDV']\nfor i,col in enumerate(features):\n    plt.subplot(1,len(features),i+1)\n    x=boston[col]\n    y=target\n    plt.scatter(x,y, marker='o')\n    plt.title(col)\n    plt.xlabel(col)\n    plt.ylabel('MEDV')\n    \n \n","2fefb0b0":"X=pd.DataFrame(np.c_[boston['LSTAT'],boston['RM']],columns=['LSTAT','RM'])\nY=boston['MEDV']","7d7f33ac":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=5)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","506f1cf9":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score\n\nlin_model=LinearRegression()\nlin_model.fit(X_train,Y_train)","45c20377":"y_test_predictv=lin_model.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(y_test_predictv,Y_test))\n\nr2=r2_score(y_test_predictv,Y_test)\n\nprint('the values predicted has')\nprint('RMSE = {}'.format(rmse))\nprint('r2 Score= {}'.format(r2))\n","a4042b4b":"# when all the columns are taken\nX=boston.drop(columns=['MEDV','RAD'])\n#X=pd.DataFrame(np.c_[boston['LSTAT'],boston['RM']],columns=['LSTAT','RM'])\nY=boston['MEDV']","ec5075b7":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=7)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","43ccc5ff":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\n\npipe = make_pipeline(StandardScaler(), LinearRegression())\npipe.fit(X_train,Y_train)\ny_test_predict=pipe.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(y_test_predict,Y_test))\n\nr2=r2_score(y_test_predict,Y_test)\n\nprint('the predicted values has')\nprint('RMSE={}'.format(rmse))\nprint('r2 score={}'.format(r2))","8fb717e2":"model_lin=LinearRegression()\nmodel_lin.fit(X_train,Y_train)\n","65da37c6":"y_test_predictv=model_lin.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(y_test_predictv,Y_test))\n\nr2=r2_score(y_test_predictv,Y_test)\n\nprint('the predicted values has')\nprint('RMSE={}'.format(rmse))\nprint('r2 score={}'.format(r2))\n             ","9de00749":"#LASSO\nfrom sklearn.linear_model import Lasso\n\nlasso_model=Lasso(alpha=0.01)\nlasso_model.fit(X_train,Y_train)","b89d278d":"L=lasso_model.predict(X_test)\n\nrmse=(np.sqrt(mean_squared_error(Y_test,L)))\n\nr2=r2_score(Y_test,L)\n\nprint('the lasso model has')\nprint('RMSE={}'.format(rmse))\nprint('r2 score={}'.format(r2))\n","610b3c4e":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\n\nl_estimator=Lasso()\nparameters={'alpha':[0.01,0.1,0.3,0.5,0.9,1,4,7,9,10],\n             'fit_intercept':[True,False]}\ngrid=GridSearchCV(estimator=l_estimator,param_grid=parameters,cv=2,n_jobs=-1)\ngrid.fit(X_train,Y_train)","dbc1bae1":"grid.best_params_","c4f89da5":"grid.best_score_","775dbc78":"lasso_model=Lasso(alpha=0.3)\n\nlasso_model.fit(X_train,Y_train)\n\nL=lasso_model.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(Y_test,L))\n\nr2=r2_score(Y_test,L)\n\nprint('rmse={}'.format(rmse))\nprint('r2 score={}'.format(r2))","7e38a76d":"from sklearn.linear_model import Ridge\n\nR_model=Ridge(alpha=0.1)\nR_model.fit(X_train,Y_train)\n\ny_test_predict=R_model.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(Y_test,y_test_predict))\nr2=r2_score(Y_test,y_test_predict)\n\nprint('RMSE={}'.format(rmse))\nprint('r2 score={}'.format(r2))","61dcdcee":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\n\nr_estimator=Ridge()\n\nparameters={'alpha':[0.01,0.1,0.3,0.5,0.8,10,11,12],\n           'fit_intercept':[True,False]}\ngrid=GridSearchCV(estimator=r_estimator,param_grid=parameters,cv=2,n_jobs=-1)\ngrid.fit(X_train,Y_train)","a7c0fd95":"grid.best_params_","6338c65b":"r_model=Ridge(alpha=12)\n\nr_model.fit(X_train,Y_train)\n\ny_test_predict=r_model.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(Y_test,y_test_predict))\n\nr2=r2_score(Y_test,y_test_predict)\n\nprint('RMSE={}'.format(rmse))\n\nprint('r2 score={}'.format(r2))","ad211d91":"from sklearn.linear_model import ElasticNet\n\ne_model=ElasticNet()\n\ne_model.fit(X_train,Y_train)\n\ny_test_predict=e_model.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(Y_test,y_test_predict))\n\nr2=r2_score(Y_test,y_test_predict)\n\nprint('RMSE={}'.format(rmse))\n\nprint('r2 score={}'.format(r2))","52728e9d":"e_estimator=ElasticNet()\n\nparameters={'alpha':[0.01,0.1,0.3,0.5,0.8,10,11,12],\n          'l1_ratio':[0.01,0.1,0.3,0.4,0.8,10,11],\n            'fit_intercept':[True,False]}\ngrid=GridSearchCV(estimator=e_estimator,param_grid=parameters,cv=2,n_jobs=-1)\ngrid.fit(X_train,Y_train)","9f490eda":"grid.best_params_","bb415e88":"from sklearn.linear_model import ElasticNet\n\ne_model=ElasticNet(alpha=0.1,l1_ratio=0.1)\n\ne_model.fit(X_train,Y_train)\n\ny_test_predict=e_model.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(Y_test,y_test_predict))\n\nr2=r2_score(Y_test,y_test_predict)\n\nprint('RMSE={}'.format(rmse))\n\nprint('r2 score={}'.format(r2))","746b29a7":"RIDGE","110b3777":"# using grid search","20b8a192":"ELASTC","9b6529c4":"#  let us explore various models"}}