{"cell_type":{"a72fadaf":"code","fcbb745f":"code","d38c3fc2":"code","710d4927":"code","1d38ccb1":"code","1376d6cb":"code","5ee1d408":"code","2da772d0":"code","e7a27a5a":"code","83d1304a":"code","71dee0f8":"code","18020ddf":"code","c8d191cf":"code","8442ae1b":"code","ce54cf2c":"code","8515a804":"code","57a813ce":"code","b848a50d":"code","486444f5":"code","94893505":"code","55410855":"code","23c0f526":"code","20b2bb28":"markdown","6ecb6bb6":"markdown"},"source":{"a72fadaf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fcbb745f":"# Importing packages\n\nimport numpy as np, pandas as pd, matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nimport seaborn as sns\n%matplotlib inline","d38c3fc2":"# Importing the dataset and changinng certain column names.\n\nCS_1 = pd.read_csv('..\/input\/CS_1.csv')\nCS_1 = CS_1.rename(index=str, columns={\"Industry Name\": \"Industry_Name\", \"Number of firms\": \"Number_of_firms\", \n                                \"EV\/EBIT (1-t)\": \"(EV\/EBIT)(1-t)\"})\n\n# Displaying the top records of the dataset\n\nCS_1.head()","710d4927":"# Checking for no. of null values in each column\n\nprint(CS_1.isna().sum())","1d38ccb1":"# Figuring out the categorical columns and numerical columns\n\nCS_1.info()","1376d6cb":"# Separating the Industry Name from the dataset and storing in y variable for labling\n\ny = CS_1.Industry_Name.copy()\ny.value_counts()","5ee1d408":"# Labling the Industry names using LabelEncoder\n\nlabelEncoder = LabelEncoder()\nlabelEncoder.fit(y)\ny = labelEncoder.transform(y)\ny","2da772d0":"# Separating the Numerical variables for initiating the clustering\n\nX = CS_1.iloc[:,1:6].copy()\nX.head()","e7a27a5a":"# Instantiating the k-means and fitting X\n\nkmeans = KMeans(n_clusters=3, max_iter=300, random_state=42)\nkmeans.fit(X)","83d1304a":"# Labels of the initial clustering\n\nlabels = kmeans.labels_\nlabels","71dee0f8":"# Check the stats of the data\n\nX.describe()","18020ddf":"# MinMax Scaling - giving equal weight to all the features\n\nscaler = MinMaxScaler()\nX['Number_of_firms'] = scaler.fit_transform(X['Number_of_firms'].values.reshape(-1,1))\nX['EV\/EBITDAR&D'] = scaler.fit_transform(X['EV\/EBITDAR&D'].values.reshape(-1,1))\nX['EV\/EBITDA'] = scaler.fit_transform(X['EV\/EBITDA'].values.reshape(-1,1))\nX['EV\/EBIT'] = scaler.fit_transform(X['EV\/EBIT'].values.reshape(-1,1))\nX['(EV\/EBIT)(1-t)'] = scaler.fit_transform(X['(EV\/EBIT)(1-t)'].values.reshape(-1,1))","c8d191cf":"# Check the stats of the data after scaling\n\nX.describe()","8442ae1b":"# Re-running clustering on scaled data\n\nkmeans = KMeans(n_clusters=3, max_iter=300, random_state=42)\nkmeans.fit(X)","ce54cf2c":"# Labels of the scaled clustering\n\nlabels = kmeans.labels_\nlabels","8515a804":"# Identifying the optimum number of clusters using the elbow method\n\nplt.plot([KMeans(n_clusters=k).fit(X).inertia_ for k in range(1,10)])","57a813ce":"# More verbose code\n\nsse = {}\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=100).fit(X)\n    X[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ #Inertia: Sum of distances of samples to their closest cluster center","b848a50d":"# Plotting SSE against Number of clusters\n\nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.ylabel(\"SSE\")\nplt.show","486444f5":"# SSE values\n\nsse","94893505":"# From seeing the change in graph and values of SSE against Number of clusters, there is no significant change after 4\n# Re-running clustering with n_clusters=4\n\nkmeans = KMeans(n_clusters=4, max_iter=300, random_state=42)\nkmeans.fit(X)","55410855":"# Labels after optimum clusters\n\nlabels = kmeans.labels_\nlabels","23c0f526":"# Grouping and displaying the 4 clustered industries\n\ninvbank_clust1 = pd.DataFrame(columns=['Industry Name','Cluster'])\ninvbank_clust1['Industry Name'] = CS_1.Industry_Name.values\ninvbank_clust1['Cluster'] = kmeans.fit(X).labels_\ninvbank_clust1.sort_values(by='Cluster', ascending=True)","20b2bb28":"***The industries can be clustered into 4 different clusters to assign Relationship Managers accordingly.***","6ecb6bb6":"An investment banking manager has the details of Earnings across different industries. He wants to look at the current details of performance and conclude which segments can be clustered together so that he can then assign Relationship Managers accordingly. The dataset has the Earnings and performance data across different industries.\n\n**Problem Statement**\n\nAn investment banking manager has the details of earnings across different industries.\nBased on performance, which segments do I cluster together to assign relationship managers? "}}