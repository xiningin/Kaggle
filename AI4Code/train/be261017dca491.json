{"cell_type":{"c43fa6cf":"code","fbd1e7e4":"code","d689adb1":"code","d756d661":"code","f9d0249c":"code","caef7ab4":"code","7bba95fd":"code","01820b10":"code","cd134237":"code","a1abd5ba":"code","d2df78d1":"code","e6e88b07":"code","7d6983f0":"code","ad95329c":"code","d30f8a61":"code","7ea64b1a":"code","a72a5cbe":"code","06a21bad":"code","39f5b6df":"code","41631094":"code","c1b1e698":"code","a0193ed9":"code","531c4988":"code","88f9b429":"code","766e278e":"code","3c6f659e":"code","b56ebede":"code","81f06d2d":"code","97a69b32":"code","4eace6f7":"code","c244bae3":"code","2590d8d4":"code","d463cfb2":"code","2342a59c":"code","b9401f49":"code","c536c176":"code","db16687a":"code","ebbfaab4":"code","8a617077":"code","b2cd20ac":"code","0ef3475b":"code","dba95dfa":"code","b5ac418f":"code","fd03da0c":"code","f06b5966":"code","cabd32b2":"code","421797cc":"code","794ee1de":"code","1bf5e614":"code","ce96232c":"code","59d34ca8":"code","2340b184":"code","a47289d7":"code","36243fb3":"code","e94029da":"code","1c6f4fd6":"code","f0ec4fff":"code","e8027da9":"code","fdf6883c":"code","1e7689ef":"code","e6f1898c":"code","c8d410ad":"code","ec3e05c5":"code","3fe8c21d":"code","7a8fb6e6":"code","bdeb5096":"code","91100c7e":"code","7d3fff00":"code","8ba62706":"code","5c82c62c":"code","9b78e1ea":"code","e0f40003":"code","d9d8a6a5":"code","34c94a70":"code","f11668c2":"code","5cb7b9b0":"code","cad39a6f":"code","a291dee9":"code","01d3de71":"code","bb7f31dd":"code","76e2cb0f":"code","a970706c":"code","fcd30d0e":"code","6e9bccf2":"code","cd561687":"code","ef18efef":"code","6ed24343":"code","5f134c93":"code","d1874edd":"code","c0eb812c":"code","a8933925":"code","93627141":"code","86beb3f0":"code","69b92eaa":"code","ccad0d91":"code","5fa16bed":"code","1ddc47f6":"code","6f98037a":"code","05cd2bc5":"code","2aca9a91":"code","71d1a178":"code","f3e67244":"code","5ce881da":"code","025d9dcc":"code","2f3a8f17":"code","6db782c3":"code","bd46a099":"code","44023dcc":"code","cd0c4caf":"code","99a0776a":"code","5e3c5b32":"code","a152954b":"code","7e519e62":"code","3866f892":"code","e2ccfa1c":"code","95a9d603":"code","651adb66":"code","5e8b02a3":"code","704ecb42":"code","8983f418":"code","c1058557":"code","7c0fe033":"code","56255be5":"code","3baa8f9b":"code","e3e2aa5f":"code","d9f62d04":"code","d1910f64":"code","36c14f83":"code","3026ebd1":"markdown","d853bf7e":"markdown","e0a0a5c8":"markdown","321eee80":"markdown","ebfc88bc":"markdown","72283eed":"markdown","ca51724a":"markdown","2704023d":"markdown","05ccf0cc":"markdown","cc089c9d":"markdown","f2e87e6f":"markdown","5ddea66b":"markdown","60d7b01c":"markdown","35e2443b":"markdown","2f0fd128":"markdown","6ca02fcd":"markdown","746ecaa6":"markdown","abd7b2da":"markdown","5c8c29d2":"markdown","c65658a0":"markdown","b7140e80":"markdown","ed00d3a7":"markdown","0835b980":"markdown","6e24f1fa":"markdown","d828269a":"markdown","3d37d24f":"markdown","49340222":"markdown","91d21380":"markdown"},"source":{"c43fa6cf":"pip install researchpy","fbd1e7e4":"#uploaded = files.upload()","d689adb1":"# importing all important libraries \n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\n\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport matplotlib.pyplot as plt\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n#from google.colab import files\n\nimport scipy.stats as stats\nimport random\n\nimport statsmodels.api as sm\nimport statsmodels.stats.multicomp\n\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport seaborn as sns","d756d661":"data=pd.read_csv('..\/input\/covid19-rorschach-test-dataset\/rap_dataset.tsv', sep='\\t')\ndata.head()","f9d0249c":"data.isnull().sum()","caef7ab4":"data.shape","7bba95fd":"data_prep = data.groupby('Protocol')['R'].count()\npd.DataFrame(data_prep)","01820b10":"proc_less_than_7 = data[data['R'] < 7]['Protocol'].unique()\nproc_less_than_7","cd134237":"# drop protocol with less than 7 responses\n\ndata_new = data[~data.Protocol.isin(proc_less_than_7)]\ndata_new","a1abd5ba":"#check\ndata_new[data_new['R'] < 7]","d2df78d1":"# Exclude 2019 protocols from Ukraine\ndata_new[['Country', 'TestDate']]\ndata_new[data_new['Country'] == 'Ukraine']","e6e88b07":"\nimport datetime as dt\ndata_updt_excl = data_new.loc[~(data_new['Country'] == 'Ukraine') & ~(pd.to_datetime(data_new['TestDate']).dt.year == 2019)]","7d6983f0":"data_updt_excl","ad95329c":"data_updt_excl[pd.to_datetime(data_updt_excl['TestDate']).dt.year == 2019]","d30f8a61":"data_updt_excl[data_updt_excl['Country'] == 'Ukraine']","7ea64b1a":"pd.to_datetime(data_new['TestDate'])","a72a5cbe":"data_new.head()","06a21bad":"# Handle missing values and drop values that cannot be scaled\ndata_new.isnull().sum()","39f5b6df":"## dropp unsignificant features & columns with alot missing data\ndata_new=data_new.drop(['FQText','LocationNumber','User',\"Client\",\"cardID\"],axis=1)","41631094":"data_new[\"Rejection\"].unique()","c1b1e698":"cat_col = ['PQLevel', 'Gender', 'Country', 'Location', 'DevelopmentalQuality', 'FormQuality','Determinants','Contents', 'Popular',  'Zcode', 'SpecialScores']","a0193ed9":"for i in data_new.select_dtypes(include='object').columns:\n    print(i,len(data_new[i].unique()))","531c4988":"# need to split these values \ndata_new.Contents","88f9b429":"dfcopy = data_new.copy()","766e278e":"# checking shape\ndfcopy.shape","3c6f659e":"# Now i'm going to split data where coded variables contains more than one code in SpecialScores\ndfcopy = dfcopy.drop('SpecialScores', axis=1).join(dfcopy['SpecialScores'].str.split(',', expand=True).stack().reset_index(level=1, drop=True).rename('SpecialScores'))\nfor i in dfcopy.select_dtypes(include='object').columns:\n    print(i,len(dfcopy[i].unique()))\n\ndfcopy.shape","b56ebede":"# Now i'm going to split data where coded variables contains more than one code in Determinants\n\ndfc =(dfcopy['Determinants'].str.split(',', expand=True).stack().reset_index(level=1, drop=True).rename('Determinants'))\ndfcopy = dfcopy.drop('Determinants', axis=1).join(dfc)","81f06d2d":"numdf = dfcopy.select_dtypes(include='number')\nnumdf.isnull().sum()","97a69b32":"mask2 = (pd.to_datetime(dfcopy['TestDate']) > '2020-03-01') & (pd.to_datetime(dfcopy['TestDate']) <= '2020-09-15')\n\npost_pandemic = dfcopy.loc[mask2]\npost_pandemic","4eace6f7":"# Spilt data into pre & post pandemic\n# pre_pandemic = Jan 1, 2017 - Feb 29, 2020\n# post_pandemic = Mar 1, 2020 - Sep 15, 2020\n\nmask = (pd.to_datetime(dfcopy['TestDate']) > '2017-01-01') & (pd.to_datetime(dfcopy['TestDate']) <= '2020-02-29')\n\npre_pandemic = dfcopy.loc[mask]\n","c244bae3":"pre_pandemic.info()","2590d8d4":"# split features into Categorical and Numerical from entire dataset\ncatogrical = [x for x in dfcopy.columns if dfcopy[x].dtype == \"object\"]\nnumeric = [x for x in dfcopy.columns if dfcopy[x].dtype == \"float64\" or dfcopy[x].dtype == \"int64\"]","d463cfb2":"# let's move into deep dive\ndfcopy[catogrical].describe()","2342a59c":"dfcopy[numeric].describe()","b9401f49":"pre_pandemic['Protocol'].nunique()","c536c176":"post_pandemic['Protocol'].nunique()","db16687a":"# split features into Categorical and Numerical from pre_pandemic dataset\npre_catogrical = [x for x in pre_pandemic.columns if pre_pandemic[x].dtype == \"object\"]\npre_numeric = [x for x in pre_pandemic.columns if pre_pandemic[x].dtype == \"float64\"]","ebbfaab4":"pre_pandemic[pre_catogrical].describe()","8a617077":"# split features into Categorical and Numerical from post_pandemic dataset\npost_catogrical = [x for x in post_pandemic.columns if post_pandemic[x].dtype == \"object\"]\npost_numeric = [x for x in post_pandemic.columns if post_pandemic[x].dtype == \"float64\"]","b2cd20ac":"post_pandemic[post_catogrical].describe()","0ef3475b":"post_pandemic[post_numeric].describe()","dba95dfa":"print('ZCode in pre_pandemic')\nprint(pre_pandemic['ZCode'].value_counts())","b5ac418f":"print('ZCode in post_pandemic')\nprint(post_pandemic['ZCode'].value_counts())","fd03da0c":"print('FormQuality in pre_pandemic')\nprint(pre_pandemic['FormQuality'].value_counts())","f06b5966":"print('FormQuality in post_pandemic')\nprint(post_pandemic['FormQuality'].value_counts())","cabd32b2":"plt.figure(figsize=(8,6))\nsns.countplot(x='FormQuality',hue='Gender',data=post_pandemic,palette='viridis')\nplt.title(\"Distribution of Gender  by FormQuality in Post_pandemic\")","421797cc":"plt.figure(figsize=(8,6))\nsns.countplot(x='FormQuality',hue='Gender',data=pre_pandemic,palette='viridis')\nplt.title(\"Distribution of Gender  by FormQuality in pre_pandemic\")","794ee1de":"print('DevelopmentalQuality in pre_pandemic')\nprint(pre_pandemic['DevelopmentalQuality'].value_counts())","1bf5e614":"print('DevelopmentalQuality in post_pandemic')\nprint(post_pandemic['DevelopmentalQuality'].value_counts())","ce96232c":"plt.figure(figsize=(8,6))\nsns.countplot(x='DevelopmentalQuality',hue='Gender',data=post_pandemic,palette='viridis')\nplt.title(\"Distribution of Gender  by DevelopmentalQuality\")","59d34ca8":"plt.figure(figsize=(8,6))\nsns.countplot(x='DevelopmentalQuality',hue='Gender',data=pre_pandemic,palette='viridis')\nplt.title(\"Distribution of Gender  by DevelopmentalQuality in pre_pandemic\")","2340b184":"print('Country in pre_pandemic')\nprint(pre_pandemic['Country'].value_counts())","a47289d7":"print('Country in post_pandemic')\nprint(post_pandemic['Country'].value_counts())","36243fb3":"print('Gender in pre_pandemic')\nprint(pre_pandemic['Gender'].value_counts())","e94029da":"# let's check Gender pre pandemic and post pandemic\n\nsns.countplot(pre_pandemic['Gender'],palette='viridis')\nplt.title(\"Gender in Pre_pandemic\")\n","1c6f4fd6":"# let's check Gender pre pandemic and post pandemic\n\nsns.countplot(post_pandemic['Gender'],palette='viridis')\nplt.title(\"Gender in Post_pandemic\")\n","f0ec4fff":"print('Gender in post_pandemic')\nprint(post_pandemic['PQLevel'].value_counts())","e8027da9":"# let's check PQlevel pre pandemic and post pandemic\n\nsns.countplot(pre_pandemic['PQLevel'],palette='viridis')\nplt.title(\"PQlevel in Pre_pandemic\")\n","fdf6883c":"print('PQLevel in pre_pandemic')\nprint(pre_pandemic['PQLevel'].value_counts())","1e7689ef":"plt.figure(figsize=(8,6))\nsns.countplot(x='PQLevel',hue='Gender',data=post_pandemic,palette='viridis')\nplt.title(\"Distribution of Gender  by PQLevel\")","e6f1898c":"#plt.figure(figsize=(8,6))\n#sns.countplot(x='Contents',hue='Gender',data=post_pandemic,palette='viridis')\n#plt.title(\"Distribution of Gender  by Contents in post_pandemic\")","c8d410ad":"print('PQLevel in post_pandemic')\nprint(post_pandemic['PQLevel'].value_counts())","ec3e05c5":"\nplt.figure(figsize=(8,6))\nsns.countplot(x='PQLevel',hue='Gender',data=pre_pandemic,palette='viridis')\nplt.title(\"Distribution of Gender  by PQLevel\")","3fe8c21d":"sns.countplot(post_pandemic['PQLevel'],palette='viridis')\nplt.title(\"PQlevel in Post_pandemic\")","7a8fb6e6":"# prepare data\npre_Age=pre_pandemic.Age\npost_Age=post_pandemic.Age\n\ntrace1 = go.Histogram(\n    x=pre_Age,\n    opacity=0.75,\n    name = \"Pre_Pandemic Age\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=post_Age,\n    opacity=0.75,\n    name ='Post_pandemic Age',\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(title=' Distribution of Age pre and post pandemic',\n                   xaxis=dict(title='Age'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","bdeb5096":"import seaborn as sns\nsns.kdeplot(post_pandemic[\"R\"],label=\"Post_pandemic R\")\nsns.kdeplot(pre_pandemic[\"R\"],label=\"Pore_pandemic.R\")\nplt.xlabel(\"R\", fontsize=14)\nplt.ylabel('count', fontsize=14)\n","91100c7e":"ax=sns.kdeplot(post_pandemic[\"Protocol\"],label=\"Post_pandemic Protocol\")\nsns.kdeplot(pre_pandemic[\"Protocol\"],label=\"Pore_pandemic Protocol\")\nplt.xlabel(\"Protocol\", fontsize=14)\nplt.ylabel('count', fontsize=14)","7d3fff00":"ax=sns.kdeplot(post_pandemic[\"ResponseOrder\"],label=\"ResponseOrder\")\nsns.kdeplot(pre_pandemic[\"ResponseOrder\"],label=\"ResponseOrder\")\nplt.xlabel(\"ResponseOrder\", fontsize=14)\nplt.ylabel('count', fontsize=14)","8ba62706":"ax=sns.kdeplot(post_pandemic[\"Pair\"],label=\"Pair\")\nsns.kdeplot(pre_pandemic[\"Pair\"],label=\"Pair\")\nplt.xlabel(\"Pair\", fontsize=14)\nplt.ylabel('count', fontsize=14)","5c82c62c":"ax=sns.distplot(post_pandemic[\"ZScore\"],label=\"PopularPopular\")\nsns.distplot(pre_pandemic[\"ZScore\"],label=\"Popular\")\nplt.xlabel(\"ZScore\", fontsize=14)\nplt.ylabel('count', fontsize=14)","9b78e1ea":"pre_pandemic.describe()","e0f40003":"post_pandemic.describe()","d9d8a6a5":"#np.cov(X, Y)[0][1]\npre_pandemic.cov()","34c94a70":"post_pandemic.cov()","f11668c2":"import statsmodels.api as sm\nfrom statsmodels.formula.api import ols","5cb7b9b0":"\nimport researchpy as rp\n","cad39a6f":"l=post_pandemic[\"Location\"].unique()\nfor i in l:\n    print(f\"for post Location=={i}\\n\",rp.summary_cont(post_pandemic[\"Location\"]==i),f\"\\n for pre Location=={i}\\n\",rp.summary_cont(pre_pandemic[\"Location\"]==i))\n","a291dee9":"l=post_pandemic[\"Determinants\"].unique()\nfor i in l:\n    print(f\"for postDeterminants=={i}\\n\",rp.summary_cont(post_pandemic[\"Determinants\"]==i),f\"\\n for pre Determinants=={i}\\n\",rp.summary_cont(pre_pandemic[\"Determinants\"]==i))\n","01d3de71":"l=post_pandemic[\"FormQuality\"].unique()\nfor i in l:\n    print(f\"for postFormQuality=={i}\\n\",rp.summary_cont(post_pandemic[\"FormQuality\"]==i),f\"\\n for pre FormQuality=={i}\\n\",rp.summary_cont(pre_pandemic[\"FormQuality\"]==i))\n","bb7f31dd":"l=post_pandemic[\"SpecialScores\"].unique()\nfor i in l:\n    print(f\"for postSpecialScores=={i}\\n\",rp.summary_cont(post_pandemic[\"SpecialScores\"]==i),f\"\\n for pre SpecialScores=={i}\\n\",rp.summary_cont(pre_pandemic[\"SpecialScores\"]==i))\n","76e2cb0f":"l=post_pandemic[\"ResponseOrder\"].unique()\nfor i in l:\n    print(f\"for post ResponseOrder=={i}\\n\",rp.summary_cont(post_pandemic[\"ResponseOrder\"]==i),f\"\\n for pre ResponseOrder=={i}\\n\",rp.summary_cont(pre_pandemic[\"ResponseOrder\"]==i))\n","a970706c":"\nl=post_pandemic[\"PQLevel\"].unique()\nfor i in l:\n    print(f\"for post PQLevel=={i}\\n\",rp.summary_cont(post_pandemic[\"PQLevel\"]==i),f\"\\n for pre PQLevel=={i}\\n\",rp.summary_cont(pre_pandemic[\"PQLevel\"]==i))\n","fcd30d0e":"l=post_pandemic[\"ZScore\"].unique()\nfor i in l:\n    print(f\"for post ZScore=={i}\\n\",rp.summary_cont(post_pandemic[\"ZScore\"]==i),f\"\\n for pre ZScore=={i}\\n\",rp.summary_cont(pre_pandemic[\"ZScore\"]==i))\n","6e9bccf2":"location_f_post=post_pandemic.groupby([\"Location\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nlocation_f_post","cd561687":"location_f_post=post_pandemic.groupby([\"Location\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nlocation_f_post=location_f_post.groupby(['Location']).frequency.mean().reset_index(name=\"Mean-Post-Sample-per-protocol\")\nlocation_f_post","ef18efef":"location_f_pre=pre_pandemic.groupby([\"Location\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nlocation_f_pre=location_f_pre.groupby(['Location']).frequency.mean().reset_index(name=\"Mean-Pre-Sample-per-protocol\")\nlocation_f_pre","6ed24343":"location_f_pre[\"Mean-Post-Sample-per-protocol\"]=location_f_post[\"Mean-Post-Sample-per-protocol\"]\nlocation=location_f_pre \nlocation","5f134c93":"sns.catplot(x=\"Location\", y=\"Mean-Pre-Sample-per-protocol\",\n            kind=\"point\", data=location)\nsns.catplot(x=\"Location\", y=\"Mean-Post-Sample-per-protocol\",\n            kind=\"point\", data=location)","d1874edd":"R_f_post=post_pandemic.groupby([\"R\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nR_f_post=R_f_post.groupby(['R']).frequency.mean().reset_index(name=\"Mean-Post-Sample-per-protocol\")\n\nR_f_pre=pre_pandemic.groupby([\"R\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nR_f_pre=R_f_pre.groupby(['R']).frequency.mean().reset_index(name=\"Mean-Pre-Sample-per-protocol\")\n","c0eb812c":"sns.kdeplot(R_f_pre[\"Mean-Pre-Sample-per-protocol\"],label=\"R_pre_pandemic\")\nsns.kdeplot(R_f_post[\"Mean-Post-Sample-per-protocol\"],label=\"R_post_pandemic\")\nplt.xlabel(\"r\", fontsize=14)\nplt.ylabel('average', fontsize=14)","a8933925":"sns.scatterplot(x=\"R\", y=\"Mean-Pre-Sample-per-protocol\", data=R_f_pre,label=\"R_pre_pandemic\")\nax=sns.scatterplot(x=\"R\", y=\"Mean-Post-Sample-per-protocol\", data=R_f_post,label=\"R_post_pandemic\")\n","93627141":"R_f_pre[\"Mean-Post-Sample-per-protocol\"]=R_f_post[\"Mean-Post-Sample-per-protocol\"]\nR=R_f_pre \nR","86beb3f0":"DQ_f_post=post_pandemic.groupby([\"DevelopmentalQuality\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nDQ_f_post=DQ_f_post.groupby(['DevelopmentalQuality']).frequency.mean().reset_index(name=\"Mean-Post-Sample-per-protocol\")\n\nDQ_f_pre=pre_pandemic.groupby([\"DevelopmentalQuality\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nDQ_f_pre=DQ_f_pre.groupby(['DevelopmentalQuality']).frequency.mean().reset_index(name=\"Mean-Pre-Sample-per-protocol\")\n","69b92eaa":"sns.scatterplot(x=\"DevelopmentalQuality\", y=\"Mean-Pre-Sample-per-protocol\", data=DQ_f_pre,label=\"DQ_pre_pandemic\")\nsns.scatterplot(x=\"DevelopmentalQuality\", y=\"Mean-Post-Sample-per-protocol\", data=DQ_f_post,label=\"DQ_post_pandemic\")\n","ccad0d91":"DQ_f_pre[\"Mean-Post-Sample-per-protocol\"]=DQ_f_post[\"Mean-Post-Sample-per-protocol\"]\nDQ=DQ_f_pre \nDQ","5fa16bed":"Determinants_f_post=post_pandemic.groupby([\"Determinants\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nDeterminants_f_post=Determinants_f_post.groupby(['Determinants']).frequency.mean().reset_index(name=\"Mean-Post-Sample-per-protocol\")\n\nDeterminants_f_pre=pre_pandemic.groupby([\"Determinants\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nDeterminants_f_pre=Determinants_f_pre.groupby(['Determinants']).frequency.mean().reset_index(name=\"Mean-Pre-Sample-per-protocol\")\n","1ddc47f6":"plt.xticks(rotation=90)\n\nsns.scatterplot(x=\"Determinants\", y=\"Mean-Pre-Sample-per-protocol\", data=Determinants_f_pre,label=\"Determinants_pre_pandemic\")\nsns.scatterplot(x=\"Determinants\", y=\"Mean-Post-Sample-per-protocol\", data=Determinants_f_post,label=\"Determinants_post_pandemic\")\n\n\n","6f98037a":"sns.kdeplot(Determinants_f_pre[\"Mean-Pre-Sample-per-protocol\"],label=\"Determinants_pre_pandemic\")\nax=sns.kdeplot(Determinants_f_post[\"Mean-Post-Sample-per-protocol\"],label=\"Determinants_post_pandemic\")\n\nplt.xlabel(\"r\", fontsize=14)\nplt.ylabel('average', fontsize=14)","05cd2bc5":"Determinants_f_pre[\"Mean-Post-Sample-per-protocol\"]=Determinants_f_post[\"Mean-Post-Sample-per-protocol\"]\nDeterminants=Determinants_f_pre \nDeterminants","2aca9a91":"ZScore_f_post=post_pandemic.groupby([\"ZScore\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nZScore_f_post=ZScore_f_post.groupby(['ZScore']).frequency.mean().reset_index(name=\"Mean-Post-Sample-per-protocol\")\n\nZScore_f_pre=pre_pandemic.groupby([\"ZScore\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nZScore_f_pre=ZScore_f_pre.groupby(['ZScore']).frequency.mean().reset_index(name=\"Mean-Pre-Sample-per-protocol\")\n","71d1a178":"sns.scatterplot(x=\"ZScore\", y=\"Mean-Pre-Sample-per-protocol\", data=ZScore_f_pre,label=\"ZScore\")\nsns.scatterplot(x=\"ZScore\", y=\"Mean-Post-Sample-per-protocol\", data=ZScore_f_post,label=\"ZScore\")\n","f3e67244":"sns.kdeplot(ZScore_f_pre[\"Mean-Pre-Sample-per-protocol\"],label=\"ZScore_pre_pandemic\")\nsns.kdeplot(ZScore_f_post[\"Mean-Post-Sample-per-protocol\"],label=\"ZScore_post_pandemic\")\n\nplt.xlabel(\"ZScore\", fontsize=14)\nplt.ylabel('average', fontsize=14)","5ce881da":"ZScore_f_pre[\"Mean-Post-Sample-per-protocol\"]=ZScore_f_post[\"Mean-Post-Sample-per-protocol\"]\nZScore=ZScore_f_pre\nZScore","025d9dcc":"SpecialScores_f_post=post_pandemic.groupby([\"SpecialScores\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nSpecialScores_f_post=SpecialScores_f_post.groupby(['SpecialScores']).frequency.mean().reset_index(name=\"Mean-Post-Sample-per-protocol\")\n\nSpecialScores_f_pre=pre_pandemic.groupby([\"SpecialScores\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nSpecialScores_f_pre=SpecialScores_f_pre.groupby(['SpecialScores']).frequency.mean().reset_index(name=\"Mean-Pre-Sample-per-protocol\")\n","2f3a8f17":"sns.scatterplot(x=\"SpecialScores\", y=\"Mean-Pre-Sample-per-protocol\", data=SpecialScores_f_pre,label=\"SpecialScores\")\nsns.scatterplot(x=\"SpecialScores\", y=\"Mean-Post-Sample-per-protocol\", data=SpecialScores_f_post,label=\"SpecialScores\")\n\nplt.xticks(rotation=90)","6db782c3":"sns.kdeplot(SpecialScores_f_pre[\"Mean-Pre-Sample-per-protocol\"],label=\"SpecialScores_post_pandemic\")\nsns.kdeplot(SpecialScores_f_post[\"Mean-Post-Sample-per-protocol\"],label=\"SpecialScores_post_pandemic\")\n\nplt.xlabel(\"SpecialScores\", fontsize=14)\nplt.ylabel('average', fontsize=14)","bd46a099":"SpecialScores_f_pre[\"Mean-Post-Sample-per-protocol\"]=SpecialScores_f_post[\"Mean-Post-Sample-per-protocol\"]\nSpecialScores=SpecialScores_f_pre \nSpecialScores","44023dcc":"F, p = stats.f_oneway(SpecialScores_f_pre[\"Mean-Post-Sample-per-protocol\"],SpecialScores_f_pre[\"Mean-Pre-Sample-per-protocol\"])\n# Seeing if the overall model is significant\nprint('F-Statistic=%.3f, p=%.3f' % (F, p))","cd0c4caf":"FormQuality_f_post=post_pandemic.groupby([\"FormQuality\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nFormQuality_f_post=FormQuality_f_post.groupby(['FormQuality']).frequency.mean().reset_index(name=\"Mean-Post-Sample-per-protocol\")\n\nFormQuality_f_pre=pre_pandemic.groupby([\"FormQuality\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nFormQuality_f_pre=FormQuality_f_pre.groupby(['FormQuality']).frequency.mean().reset_index(name=\"Mean-Pre-Sample-per-protocol\")\n","99a0776a":"sns.scatterplot(x=\"FormQuality\", y=\"Mean-Pre-Sample-per-protocol\", data=FormQuality_f_pre,label=\"FormQuality\")\nsns.scatterplot(x=\"FormQuality\", y=\"Mean-Post-Sample-per-protocol\", data=FormQuality_f_post,label=\"FormQuality\")\n\nplt.xticks(rotation=90)","5e3c5b32":"sns.kdeplot(FormQuality_f_pre[\"Mean-Pre-Sample-per-protocol\"],label=\"FormQuality_post_pandemic\")\nax=sns.kdeplot(FormQuality_f_post[\"Mean-Post-Sample-per-protocol\"],label=\"FormQuality_post_pandemic\")\n\nplt.xlabel(\"FormQuality\", fontsize=14)\nplt.ylabel('Frequency', fontsize=14)","a152954b":"FormQuality_f_pre[\"Mean-Post-Sample-per-protocol\"]=FormQuality_f_post[\"Mean-Post-Sample-per-protocol\"]\nFormQuality=FormQuality_f_pre \nFormQuality","7e519e62":"# Now i'm going to split data where coded variables contains more than one code in Contents\npre_pandemic = pre_pandemic.drop('Contents', axis=1).join(pre_pandemic['Contents'].str.split(',', expand=True).stack().reset_index(level=1, drop=True).rename('Contents'))\nfor i in pre_pandemic.select_dtypes(include='object').columns:\n    print(i,len(pre_pandemic[i].unique()))\n\npre_pandemic.shape","3866f892":"post_pandemic = post_pandemic.drop('Contents', axis=1).join(post_pandemic['Contents'].str.split(',', expand=True).stack().reset_index(level=1, drop=True).rename('Contents'))\nfor i in post_pandemic.select_dtypes(include='object').columns:\n    print(i,len(post_pandemic[i].unique()))\n\npost_pandemic.shape","e2ccfa1c":"post_pandemic['Contents'] = post_pandemic['Contents'].map(lambda x: x.replace(')',''))\npost_pandemic['Contents'] = post_pandemic['Contents'].map(lambda x: x.replace('(',''))\npre_pandemic['Contents'] = pre_pandemic['Contents'].map(lambda x: x.replace(')',''))\npre_pandemic['Contents'] = pre_pandemic['Contents'].map(lambda x: x.replace('(',''))","95a9d603":"Contents_f_post=post_pandemic.groupby([\"Contents\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nContents_f_post=Contents_f_post.groupby(['Contents']).frequency.mean().reset_index(name=\"Mean-Post-Sample-per-protocol\")\n\nContents_f_pre=pre_pandemic.groupby([\"Contents\",\"Protocol\"]).size().reset_index(name=\"frequency\")\nContents_f_pre=Contents_f_pre.groupby(['Contents']).frequency.mean().reset_index(name=\"Mean-Pre-Sample-per-protocol\")\n","651adb66":"plt.xticks(rotation=90)\nsns.scatterplot(x=\"Contents\", y=\"Mean-Pre-Sample-per-protocol\", data=Contents_f_pre,label=\"Contents\")\nsns.scatterplot(x=\"Contents\", y=\"Mean-Post-Sample-per-protocol\", data=Contents_f_post,label=\"Contents\")\n\n","5e8b02a3":"sns.kdeplot(Contents_f_pre[\"Mean-Pre-Sample-per-protocol\"],label=\"Contents_post_pandemic\")\nax=sns.kdeplot(Contents_f_post[\"Mean-Post-Sample-per-protocol\"],label=\"Contents_post_pandemic\")\n\nplt.xlabel(\"Contents\", fontsize=14)\nplt.ylabel('Frequency', fontsize=14)","704ecb42":"Contents_f_pre[\"Mean-Post-Sample-per-protocol\"]=Contents_f_post[\"Mean-Post-Sample-per-protocol\"]\nContents=Contents_f_pre \nContents","8983f418":"l=post_pandemic[\"Contents\"].unique()\nfor i in l:\n    print(f\"for post Contents=={i}\\n\",rp.summary_cont(post_pandemic[\"Contents\"]==i),f\"\\n for pre Contents=={i}\\n\",rp.summary_cont(pre_pandemic[\"Contents\"]==i))\n","c1058557":"for i in [location_f_pre,R_f_pre,DQ_f_pre,ZScore_f_pre,Determinants_f_pre,SpecialScores_f_pre,FormQuality_f_pre,Contents_f_pre]:\n  F, p = stats.f_oneway(i[\"Mean-Post-Sample-per-protocol\"],i[\"Mean-Pre-Sample-per-protocol\"])\n  # Seeing if the overall model is significant\n  print(f'for F-Statistic=%.3f, p=%.3f' % (F, p))","7c0fe033":"## As  we can see from abve analysis that CONTENT and R have a significant effect by pandemic","56255be5":"frames = [Contents, R]\nresult = pd.concat(frames)\nresult[\"content\\r\"]= result.apply(lambda x: x['R'] if pd.isnull(x['Contents']) else x['Contents'], axis=1)\nresult1=result[[\"content\\r\",\"Mean-Pre-Sample-per-protocol\",\"Mean-Post-Sample-per-protocol\"]]","3baa8f9b":"result1\n","e3e2aa5f":"from sklearn.linear_model import OrthogonalMatchingPursuit\nfrom sklearn.cluster import SpectralClustering\nfrom sklearn.datasets import fetch_olivetti_faces\nfrom sklearn.preprocessing import normalize\n","d9f62d04":"cat_col=['PQLevel',\n 'Gender',\n 'Country',\n 'Location',\n 'DevelopmentalQuality',\n 'FormQuality',\n 'Determinants',\n 'Contents',\n 'Popular',\n  'SpecialScores']","d1910f64":"#from sklearn.preprocessing import OneHotEncoder\n# creating instance of one-hot-encoder\n#data_encoded = pd.get_dummies( dfcopy, columns=cat_col)\n#data_encoded","36c14f83":"#dfcopy\nfrom sklearn.decomposition import PCA\n\n#pca = PCA(0.9)\n\n#pca.fit(dfcopy)\n\n#X = pca.transform(dfcopy)","3026ebd1":"# ANOVA (ANalysis Of VAriance)","d853bf7e":"Submission details \nFirst Phase:\n1. Preparing and presenting the split data samples to be used in the analysis.\n2. Perform between-subject statistical analysis (covariance & clustering) of all the sample variables, to detect changes between pre and post pandemic responses to the Rorschach test.\n3. Run cluster analysis on the significantly different variables.\n4. Present an ML initial model for further exploratory analysis of the dataset.","e0a0a5c8":"## Covariance Analysis","321eee80":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:orange; border:0' role=\"tab\" aria-controls=\"home\"><center>Data Reading and Analysis<\/center><a id=2><\/a><\/h3>","ebfc88bc":"### ZScore","72283eed":"## The F-statistic= 25.2 and the p-value= 0.00 which is indicating that there is an overall significant effect of corona on Content varibal.","ca51724a":"## looping through diff vars.","2704023d":"### ResponseOrder","05ccf0cc":">  as we can see post pandemic total male in PQLevel==c while less female in in PQLevel==c","cc089c9d":"The \u2018COVID-19 Rorschach test dataset\u2019 is a sample of protocols and responses, from 2017-01-01 to 2020-09-15. It includes some demographics related variables and the codes of the Comprehensive System (Exner, 2001). The dataset contains more than 500,000 coded responses to the test inkblots stimuli.\n\n\n### Objectives\n\n1. Preparing and presenting the split data samples to be used in the analysis.\n2. Perform between-subject statistical analysis (covariance & clustering) of all the sample variables, to detect changes between pre and post pandemic responses to the Rorschach test.\n3. Run cluster analysis on the significantly different variables.\n4. Present an ML initial model for further exploratory analysis of the dataset.","f2e87e6f":"# <center>COVID-19 Rorschach test dataset<\/center>\n   <center>Responses to the Rorschach test before and after COVID-19 <\/center>\n   \n   ![Rorschach](https:\/\/gitlab.com\/SKJNR\/covid-19-rorschach-test-dataset-analysis\/-\/raw\/master\/awe.png)\n   \n   \n<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:Blue; border:0' role=\"tab\" aria-controls=\"home\"><center>Quick navigation<\/center><\/h3>","5ddea66b":"### FormQuality","60d7b01c":"* [1. Introduction](#1)\n* [2. Data Reading and Analysis](#2)\n* [3. Data Processing and Cleansing](#3) \n* [4. Model Training](#5) <br>\n\n<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:orange; border:0' role=\"tab\" aria-controls=\"home\"><center>Introduction<\/center><a id=1><\/a><\/h3>\n    \nThe Rorschach inkblot test, a commonly used psychological test, is often utilized to assess personality and emotional functioning. The Rorschach Assistant Program (RAP) is a free online application for the Rorschach testers\u2019 community. The program has been used by professionals all over the world, for coding and analyzing the verbal responses to the ambiguous inkblots.\n    \n  ","35e2443b":"From above we can see summary for the entire categorical dataset.","2f0fd128":"### ZCode in Pre_Pandemic vs Post_pandemic","6ca02fcd":"### Location","746ecaa6":"### Observations :\n1. LocationNumber contains many missing or null values , we have to treat them \n2. FQText also contains Missing and Null values \n3. Zcode,Zscore and SpecialScores contains many null or missing values .\n > Overall compare to all other missing features FQtext contains many null or missing values .","abd7b2da":"### Data Preparation\n* Protocol with less thatn 7 responses should be excluded from the analysis\n* Exclude all 2019 protocol from Ukraine","5c8c29d2":"From here we can observe that LocationNumber , FQText .\n\nIt's better to drop those features , so first i am going to analyze data","c65658a0":"### SpecialScores","b7140e80":"### Data Description :\n\n1. User                    : User Id number\n2. PQlevel                 : Professional qualifications levels are based on the  \n3. Clinet                  : Client Id number\n4. Age                     : Client age in Years\n5. Gender                  : Client Gender\n6. Country                 : Client Country\n7. Protocol                : Protocol Id Number\n8. Test Date               : The Date the RAP3 protocol was created \n9. R                       : The total number of the responses associated with the protocol \n10. ResponseOrder          : The order of responses in the protocol\n11. CardId                 : Rorschach cardnumber 1 to 10 \n12. Location               : Indicated to which area of the blot the responses referred to \n13. LocationNumber         : The location Normative Number\n14. Developmental Quality  : The quality of processing that has been involved in the formation of the responses\n15. Determinants           : All the visual stimulli in the blot that shaped the reported objects in the response . \n16. Pair                   : Two identical objects are reported , based on the symmetry of the blot\n17. Form Quality           : Indicates how good is the fitness between the area of blot being used and the form requirements of the object specified in the response \n18. FQtext                 : The form quality associated Normative Text \n19. Contents               : Content Coding is consisting of abbrevations for the category to which the responded object Belongs\n20. Popular                : Responses that occur with a high frequency with a normative sample .\n21. ZCode                  : ZCode is coded in responses that involve organizational activity of relationships between distinct blot areas .\n22. ZScore                 : A Numerical value assigned to responses in which such Organizational activity occurs .\n23. Special Scores         : Indicate the presence of special features in the response \n24. Rejection              : The number of card rejections in the Protocol .","ed00d3a7":"![](https:\/\/gitlab.com\/SKJNR\/covid-19-rorschach-test-dataset-analysis\/-\/raw\/master\/awe34.png)","0835b980":"we can see significant change between The mean of R in pre_pandemic vs R in post_pandemic .","6e24f1fa":"### Determinants","d828269a":"> as we can sea identcal right squeed plot (pre&post) pandemic","3d37d24f":"\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:orange; border:0' role=\"tab\" aria-controls=\"home\"><center>Data Processing and Cleansing<\/center><a id=3><\/a><\/h3>","49340222":"### PQLevel","91d21380":"From above we can observe that ZW and ZA was hap"}}