{"cell_type":{"0cd82a78":"code","10b1b7f0":"code","78c8e78c":"code","c922018e":"code","59bee2c5":"code","19319aea":"code","09d820fa":"code","cc47b218":"code","73bc0e39":"code","c279de67":"code","4d4a2133":"code","5a688fc7":"code","c47321c4":"code","5f5c7385":"code","14c74285":"code","9a20730f":"code","bec84591":"code","f957f781":"code","fd44d5cb":"code","ee33f4db":"code","e84448d2":"markdown"},"source":{"0cd82a78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n       os.path.join(dirname, filename)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10b1b7f0":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport cv2","78c8e78c":"#let us plot some images from train path - normal\ntrain_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL\/'\nimages = os.listdir(train_path)\nfig = plt.figure(figsize=(10, 10))\nfor i in range(0,9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(plt.imread(train_path+images[i]), cmap='gray')\n    plt.xticks([])\n    plt.yticks([])\n    plt.title(images[i])\n    \n","c922018e":"#let us plot some images from train path - pneumonia\ntrain_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA\/'\nimages = os.listdir(train_path)\nfig = plt.figure(figsize=(10, 10))\nfor i in range(0,9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(plt.imread(train_path+images[i]), cmap='gray')\n    plt.xticks([])\n    plt.yticks([])\n    plt.title(images[i])","59bee2c5":"#check the shape of the images\nX_train=[]\n\ny_train=[]\n","19319aea":"X_test=[]\ny_test=[]","09d820fa":"train_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL\/'\nimages = os.listdir(train_path)\nfor image in images:\n    if \"jpeg\" in image:\n        img = cv2.imread(train_path+image)\n        image = cv2.resize(img,(64,64))\n        X_train.append(image)\n        y_train.append(0)\n    ","cc47b218":"train_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA\/'\nimages = os.listdir(train_path)\nfor image in images:\n    if \"jpeg\" in image:\n        img = cv2.imread(train_path+image)\n        image = cv2.resize(img,(64,64))\n        X_train.append(image)\n        y_train.append(1)\n    ","73bc0e39":"test_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/NORMAL\/'\nimages = os.listdir(test_path)\nfor image in images:\n    if \"jpeg\" in image:\n        img = cv2.imread(test_path+image)\n        image = cv2.resize(img,(64,64))\n        X_test.append(image)\n        y_test.append(0)\n    ","c279de67":"test_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/PNEUMONIA\/'\nimages = os.listdir(test_path)\nfor image in images:\n    if \"jpeg\" in image:\n        img = cv2.imread(test_path+image)\n        image = cv2.resize(img,(64,64))\n        X_test.append(image)\n        y_test.append(1)","4d4a2133":"import tensorflow as tf\nfrom tensorflow.keras.layers import Flatten, Conv2D, AveragePooling2D, Dense,BatchNormalization,MaxPooling2D,MaxPool2D\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.utils import to_categorical","5a688fc7":"X_train[0].shape","c47321c4":"import numpy as np\nX_train = np.asarray(X_train)\ny_train = np.asarray(y_train)\n\nX_test = np.asarray(X_test)\ny_test = np.asarray(y_test)\n","5f5c7385":"#y_train = to_categorical(y_train,num_classes=2)\n#y_test = to_categorical(y_test,num_classes=2)","14c74285":"  model = Sequential()\n  model.add(Conv2D(filters=6, kernel_size=(5,5), strides=(1,1), activation='relu', input_shape=(64,64,3)))\n  model.add(AveragePooling2D(pool_size=(2,2), strides=(2,2)))\n  model.add(BatchNormalization())\n  model.add(Conv2D(filters=3, kernel_size=(14,14), strides=(1,1), activation='relu'))\n  model.add(AveragePooling2D(pool_size=(5,5), strides=(1,1)))\n  model.add(BatchNormalization())\n  model.add(Conv2D(filters=4, kernel_size=(5,5), strides=(2,2), activation='relu'))\n  model.add(Flatten())\n  model.add(Dense(820, activation='relu'))\n  model.add(BatchNormalization())\n  model.add(Dense(54, activation='relu'))\n  model.add(BatchNormalization())\n  model.add(Dense(27, activation='relu'))\n  model.add(Dense(2, activation='softmax'))\n  model.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","9a20730f":"history = model.fit(X_train,y_train, epochs=50, validation_data=(X_test,y_test))","bec84591":"import pandas as pd\nhistory_df = pd.DataFrame(history.history)","f957f781":"history_df.boxplot()","fd44d5cb":"y_predictions = model.predict(X_test).argmax(1)","ee33f4db":"  index = int(input('Enter a index to test the prediction  '))\n  plt.imshow(X_test[index]);\n  plt.tight_layout()\n  actual=''\n  predicted=''\n  if(y_predictions[index]==0):\n    predicted='NORMAL'\n  else: \n    predicted = 'PNEUMONIA'\n    \n  if(y_test[index]==0):\n    actual='NORMAL'\n  else: \n    actual = 'PNEUMONIA'\n     \n    \n  plt.title(\"Predicted  ==> \"+predicted +\" \\nActual ==>\"+ actual )\n  plt.xticks([])\n  plt.yticks([])","e84448d2":"# Chest Xray Classification - NORMAL and PNEUMONIA Cases\n__This jupiter book uses the Convolutional Neural network and is trained with Normal and Pneumonia xray iamges. The built model should successfully classify normal xray image and pneumonia ones__"}}