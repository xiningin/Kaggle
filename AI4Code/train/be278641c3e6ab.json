{"cell_type":{"b27dd330":"code","59ec3247":"code","fe395340":"code","96905118":"code","c20b7452":"code","37d84b8f":"code","03b7fff7":"code","8e7fcdce":"code","00e81e63":"code","867b0b49":"code","ec2f5e5d":"code","b4065183":"code","7f25eae0":"code","2513c894":"code","31083c85":"code","12399e2c":"code","eeb638a9":"code","599ba041":"code","e8c1de11":"code","61fd2340":"code","8b6eef5c":"code","b5a741ae":"code","4ddb141f":"code","67b9e8bf":"code","10f3e588":"code","f77ef0bb":"code","753b72a5":"code","a684e69c":"code","45c5b4b0":"code","f78938e8":"code","2f61be27":"code","7eb5dc75":"code","4d2c4887":"code","6d2e9def":"code","71c905a4":"code","6837bb85":"code","276aad33":"code","52717a50":"code","703bad11":"code","7e51e097":"code","55c5584f":"code","d8685f59":"code","69d6eea2":"code","74022b09":"code","79b415b0":"code","db2bacd2":"code","5d3fcea0":"markdown","cde25e40":"markdown","8d3b0020":"markdown","11b98cdd":"markdown","40cd31f3":"markdown","0c80aa38":"markdown","da3b92bf":"markdown","dcbfe113":"markdown","4f37dc6f":"markdown","a111a722":"markdown","85b20b68":"markdown","4c8770a2":"markdown","6b1a7677":"markdown","41fff4c0":"markdown","d5485caa":"markdown","5b27e823":"markdown","dff2d8d4":"markdown","54adaa24":"markdown","52b23a47":"markdown","14b538e3":"markdown","64b623d6":"markdown","b35e10e3":"markdown","9ece4158":"markdown","e5b08bf4":"markdown","d80bad56":"markdown","e1c8eea5":"markdown","5b766d5f":"markdown","4483fae9":"markdown","d48c7f12":"markdown","bf065c42":"markdown","2d4db62c":"markdown","880680c3":"markdown","74f1a8dc":"markdown","408a0ad8":"markdown","057c0262":"markdown"},"source":{"b27dd330":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","59ec3247":"!wget -O loan_train.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_train.csv","fe395340":"df = pd.read_csv('loan_train.csv')\ndf.head()","96905118":"df.shape","c20b7452":"df['due_date'] = pd.to_datetime(df['due_date'])\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf.head()","37d84b8f":"df['loan_status'].value_counts()","03b7fff7":"import seaborn as sns\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","8e7fcdce":"bins = np.linspace(df.age.min(), df.age.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","00e81e63":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()\n","867b0b49":"df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ndf.head()","ec2f5e5d":"df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)","b4065183":"df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ndf.head()","7f25eae0":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)","2513c894":"df[['Principal','terms','age','Gender','education']].head()","31083c85":"Feature = df[['Principal','terms','age','Gender','weekend']]\nFeature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\nFeature.drop(['Master or Above'],\naxis = 1,inplace=True)\nFeature.head()\n","12399e2c":"X = Feature\nX[0:5]","eeb638a9":"y = df['loan_status'].values\ny[0:5]","599ba041":"def foo():\n    X= preprocessing.StandardScaler().fit(X).transform(X)\n    X[0:5]\n    return self.partial_fit(X,y)","e8c1de11":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report,confusion_matrix\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)","61fd2340":"error_rate = []\n\n# Will take some time\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i!=y_test))","8b6eef5c":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","b5a741ae":"    ##for k=9....acc to the above graph\n    \n    knn = KNeighborsClassifier(n_neighbors=9)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    print('CONFUSION_MATRIX :\\n')\n    print(confusion_matrix(pred_i,y_test))\n    print('\\n')\n    print('REPORT :\\n')\n    print(classification_report(pred_i,y_test))","4ddb141f":"print('ACCURACY :')\n\nmetrics.accuracy_score(pred_i,y_test)","67b9e8bf":"from sklearn.tree import DecisionTreeClassifier\ndc = DecisionTreeClassifier()\nclassification = dc.fit(X_train,y_train)\nprediction = dc.predict(X_test)\nprediction","10f3e588":"print('CONFUSION_MATRIX :\\n')\n\nprint(confusion_matrix(prediction,y_test))","f77ef0bb":"print('REPORT :\\n')\nprint(classification_report(prediction,y_test))","753b72a5":"print('ACCURACY :\\n')\nmetrics.accuracy_score(prediction,y_test)","a684e69c":"from sklearn import svm\nsvc = svm.SVC(kernel='rbf')\nsvc.fit(X_train,y_train)\ny_pred = svc.predict(X_test)\ny_pred","45c5b4b0":"print('CLASSIFICATION_REPORT :\\n')\nprint(metrics.classification_report(y_pred,y_test))","f78938e8":"print('CONFUSION MATRIX :\\n')\nprint(metrics.confusion_matrix(y_pred,y_test))\n","2f61be27":"print('ACCURACY :\\n')\nprint(metrics.accuracy_score(y_pred,y_test))","7eb5dc75":"from sklearn.linear_model import LogisticRegression","4d2c4887":"linear = LogisticRegression(fit_intercept=True)","6d2e9def":"linear.fit(X_train,y_train)","71c905a4":"y_pred = linear.predict(X_test)\ny_pred","6837bb85":"print('CLASSIFICATION_REPORT :\\n');\nprint(metrics.classification_report(y_pred,y_test))","276aad33":"print('CONFUSION_MATRIX :\\n');\nprint(metrics.confusion_matrix(y_pred,y_test))","52717a50":"print('ACCURACY_SCORE :\\n');\nprint(metrics.accuracy_score(y_pred,y_test))","703bad11":"from sklearn.metrics import jaccard_similarity_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss","7e51e097":"!wget -O loan_test.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_test.csv","55c5584f":"test_df= pd.read_csv('loan_test.csv')\ntest_df.head()","d8685f59":"#preprocessing :-\ntest_df = pd.read_csv('loan_test.csv')\n\n#Preprocessing\n\n# convert date time\ntest_df['due_date'] = pd.to_datetime(test_df['due_date'])\ntest_df['effective_date'] = pd.to_datetime(test_df['effective_date'])\ntest_df['dayofweek'] = test_df['effective_date'].dt.dayofweek\n# evaulate weekend field\ntest_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\n# convert male to 0 and female to 1\ntest_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\n# work out education level\ntest_feature = test_df[['Principal','terms','age','Gender','weekend']]\ntest_feature = pd.concat([test_feature,pd.get_dummies(test_df['education'])], axis=1)\ntest_feature.drop(['Master or Above'], axis = 1,inplace=True)\n\n# normalize the test data\ntest_X = preprocessing.StandardScaler().fit(test_feature).transform(test_feature)\ntest_X[0:5]\n# and target result\ntest_y = test_df['loan_status'].values\ntest_y[0:5]","69d6eea2":"# evaluate KNN\nknn_yhat = knn.predict(test_X)\njc1 = (jaccard_similarity_score(test_y, knn_yhat))\n# evaluate Decision Trees\ndt_yhat = dc.predict(test_X)\njc2 = (jaccard_similarity_score(test_y, dt_yhat))\n#evaluate SVM\nsvm_yhat = svc.predict(test_X)\njc3 = (jaccard_similarity_score(test_y, svm_yhat))\n# evaluate Logistic Regression\nlr_yhat = linear.predict(test_X)\njc4 = (jaccard_similarity_score(test_y, lr_yhat))\n\nlist_jc = [jc1, jc2, jc3, jc4]\nlist_jc","74022b09":"# evaluate KNN\nfs1 = (f1_score(test_y, knn_yhat,average='weighted'))\n# evaluate Desision Trees \nfs2 = (f1_score(test_y, dt_yhat, average='weighted'))\n# evaluate SVM\nfs3 = (f1_score(test_y, svm_yhat, average='weighted'))\n# evaluate Logistic Regression\nfs4 = (f1_score(test_y, lr_yhat, average='weighted'))\n\nlist_fs = [fs1, fs2, fs3, fs4]\nlist_fs","79b415b0":"##lr_prob = linear.predict_proba(test_X)\nLR_yhat_prob = linear.predict_proba(test_X)\n\nlist_ll = ['NA', 'NA', 'NA',(log_loss(test_y, LR_yhat_prob))]\nlist_ll","db2bacd2":"# fomulate the report format\ndf = pd.DataFrame( list_jc,index=['KNN','Decision Tree','SVM','Logistic Regression'])\ndf.columns = ['Jaccard']\ndf.insert(loc=1, column='F1-score', value=list_fs)\ndf.insert(loc=2, column='LogLoss', value=list_ll)\ndf.columns.name = 'Algorithm'\ndf","5d3fcea0":"# K Nearest Neighbor(KNN)\nNotice: You should find the best k to build the model with the best accuracy.  \n**warning:** You should not use the __loan_test.csv__ for finding the best k, however, you can split your train_loan.csv into train and test to find the best __k__.","cde25e40":"Data Standardization give data zero mean and unit variance (technically should be done after train test split )","8d3b0020":"# Logistic Regression","11b98cdd":"# Data visualization and pre-processing\n\n","40cd31f3":"#### Feature befor One Hot Encoding","0c80aa38":"Lets defind feature sets, X:","da3b92bf":"### About dataset","dcbfe113":"Lets plot some columns to underestand data better:","4f37dc6f":"Lets download the dataset","a111a722":"This dataset is about past loans. The __Loan_train.csv__ data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n\n| Field          | Description                                                                           |\n|----------------|---------------------------------------------------------------------------------------|\n| Loan_status    | Whether a loan is paid off on in collection                                           |\n| Principal      | Basic principal loan amount at the                                                    |\n| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n| Effective_date | When the loan got originated and took effects                                         |\n| Due_date       | Since it\u2019s one-time payoff schedule, each loan has one single due date                |\n| Age            | Age of applicant                                                                      |\n| Education      | Education of applicant                                                                |\n| Gender         | The gender of applicant                                                               |","85b20b68":"## Normalize Data ","4c8770a2":"# Support Vector Machine","6b1a7677":"# Model Evaluation using Test set","41fff4c0":"260 people have paid off the loan on time while 86 have gone into collection \n","d5485caa":"Lets convert male to 0 and female to 1:\n","5b27e823":"Now, it is your turn, use the training set to build an accurate model. Then use the test set to report the accuracy of the model\nYou should use the following algorithm:\n- K Nearest Neighbor(KNN)\n- Decision Tree\n- Support Vector Machine\n- Logistic Regression\n\n\n\n__ Notice:__ \n- You can go above and change the pre-processing, feature selection, feature-extraction, and so on, to make a better model.\n- You should use either scikit-learn, Scipy or Numpy libraries for developing the classification algorithms.\n- You should include the code of the algorithm in the following cells.","dff2d8d4":"First, download and load the test set:","54adaa24":"## Convert Categorical features to numerical values","52b23a47":"86 % of female pay there loans while only 73 % of males pay there loan\n","14b538e3":"# Decision Tree","64b623d6":"### Feature selection","b35e10e3":"Let\u2019s see how many of each class is in our data set ","9ece4158":"### Convert to date time object ","e5b08bf4":"What are our lables?","d80bad56":"### Load Data From CSV File  ","e1c8eea5":"### Load Test set for evaluation ","5b766d5f":"Lets look at gender:","4483fae9":"In this notebook we try to practice all the classification algorithms that we learned in this course.\n\nWe load a dataset using Pandas library, and apply the following algorithms, and find the best one for this specific dataset by accuracy evaluation methods.\n\nLets first load required libraries:","d48c7f12":"### Lets look at the day of the week people get the loan ","bf065c42":"#### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame ","2d4db62c":"We see that people who get the loan at the end of the week dont pay it off, so lets use Feature binarization to set a threshold values less then day 4 ","880680c3":"# Pre-processing:  Feature selection\/extraction","74f1a8dc":"# Classification ","408a0ad8":"# Report\nYou should be able to report the accuracy of the built model using different evaluation metrics:","057c0262":"## One Hot Encoding  \n#### How about education?"}}