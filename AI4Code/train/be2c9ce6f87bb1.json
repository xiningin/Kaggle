{"cell_type":{"42708c3a":"code","3334cff6":"code","7ebefa7b":"code","ab9d5f73":"code","cad6e881":"code","7be22eca":"code","25d66272":"code","3e62ed48":"code","a70cce77":"code","8cdbbc47":"code","a5511e3b":"code","31986c44":"code","70ae6734":"code","97dd95c3":"code","4cc000d5":"code","6614116e":"code","d4223237":"code","3dd8f4c7":"code","26a479c6":"code","2e3f93eb":"code","c4ecc618":"code","b072ad79":"code","e6a851f1":"code","c9f8f290":"code","4d061372":"code","b76152d7":"code","c92447bc":"code","4d7474a2":"code","9117ac3e":"code","0c61c4cf":"code","73b2a583":"code","d42b9214":"code","a9106202":"code","a6393ba9":"code","8253105c":"code","f8e0161a":"code","8624e995":"markdown","4f098161":"markdown","5b5f8c01":"markdown","bc3f192a":"markdown","83f3c4e2":"markdown"},"source":{"42708c3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3334cff6":"from math import sqrt\nimport matplotlib.pyplot as plt\n%matplotlib inline","7ebefa7b":"movies = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/movie.csv')","ab9d5f73":"ratings = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/rating.csv')","cad6e881":"movies.shape","7be22eca":"ratings.shape","25d66272":"movies.head()","3e62ed48":"#Using regular expressions to find a year stored between parentheses\n#We specify the parantheses so we don't conflict with movies that have years in their titles\nmovies['year'] = movies.title.str.extract('(\\(\\d\\d\\d\\d\\))',expand=False)\n#Removing the parentheses\nmovies['year'] = movies.year.str.extract('(\\d\\d\\d\\d)',expand=False)\n","a70cce77":"movies.head()","8cdbbc47":"#Removing the years from the 'title' column\nmovies['title'] = movies.title.str.replace('(\\(\\d\\d\\d\\d\\))', '')\n#Applying the strip function to get rid of any ending whitespace characters that may have appeared\nmovies['title'] = movies['title'].apply(lambda x: x.strip())\nmovies.head()","a5511e3b":"movies['genres'] = movies.genres.str.split('|')\nmovies.head()","31986c44":"moviesGenres = movies.copy()\nmoviesGenres.head()","70ae6734":"print(movies.iterrows())","97dd95c3":"#For every row in the dataframe, iterate through the list of genres and place a 1 into the corresponding column\nfor index, row in movies.iterrows():\n    for genre in row['genres']:\n        moviesGenres.at[index, genre] = 1","4cc000d5":"#Filling in the NaN values with 0 to show that a movie doesn't have that column's genre\nmoviesGenres = moviesGenres.fillna(0)\nmoviesGenres.head()","6614116e":"ratings.head()","d4223237":"ratings=ratings.drop('timestamp',1)\nratings.head()","3dd8f4c7":"userInput = [\n            {'title':'Breakfast Club, The', 'rating':4},\n            {'title':'Toy Story', 'rating':4.5},\n            {'title':'Jumanji', 'rating':2.5},\n            {'title':\"Pulp Fiction\", 'rating':5},\n            {'title':'Akira', 'rating':3.5}\n         ] \nuserMovie = pd.DataFrame(userInput)\nuserMovie","26a479c6":"#Filtering out the movies by title\ninputId = movies[movies['title'].isin(userMovie['title'].tolist())]","2e3f93eb":"#Then merging it so we can get the movieId. It's implicitly merging it by title.\nuserMovie = pd.merge(inputId, userMovie)","c4ecc618":"userMovie","b072ad79":"userMovie=userMovie.drop('genres',1)","e6a851f1":"userMovie=userMovie.drop('year',1)","c9f8f290":"userMovie","4d061372":"genre = moviesGenres[moviesGenres['movieId'].isin(userMovie['movieId'].tolist())]\ngenre","b76152d7":"genretable=genre.copy()","c92447bc":"genretable=genretable.reset_index(drop=True)","4d7474a2":"genretable=genretable.drop('title',1).drop('movieId',1).drop('genres',1).drop('year',1)","9117ac3e":"genretable","0c61c4cf":"userMovie['rating']","73b2a583":"#Dot produt to get weights\nuser = genretable.transpose().dot(userMovie['rating'])\n#The user profile\nuser","d42b9214":"recommendationtable = moviesGenres.set_index(moviesGenres['movieId'])\nrecommendationtable.head()","a9106202":"recommendationtable = recommendationtable.drop('movieId',1).drop('title',1).drop('genres',1).drop('year',1)\nrecommendationtable.head()","a6393ba9":"recommend = (recommendationtable*user).sum(axis=1)\/(user.sum())\nrecommend.head()","8253105c":"recommend=recommend.sort_values(ascending=False)\nrecommend.head()","f8e0161a":"movies.loc[movies['movieId'].isin(recommend.head(20).keys())]","8624e995":"Separating out the year of the release from the title and adding it to a separate column. ","4f098161":"**Creating a user profile now. We can add more movies as well to the input. In order to recommend, we have to combine the user input with the movies and ratings dataset.**","5b5f8c01":"Reading the movies data that has the movieid, title, genre and year as the columns. ","bc3f192a":"**Building a Movie Recommendation System**\nThis recommendation system is a content based recommendation system. Content based implies that it uses the past preferences or ratings of the user on movies already watched to suggest other movies. \nThe other type of recommendation system is collaborative filtering which is recommendations for a user based on the preferences of the neighbours or other users. \n\nIn the content based system, first we create a genre table for all the movies, that is, tags of all the genres the movies belong to. Followed by, creating a user profile - based on the movies watched and the ratings given, a weighted genre table is built to show which genre the user prefers the most. \nUsing the overall genre table and weighted user genre profile, a recommendation will be made. ","83f3c4e2":"Splitting the genres and creating a list. But even then, it can't be used for recommendation in the form of a list. A genre table has to be created, where each new genre mentioned forms a new column and in each row, that is, for each movie, if the movie belongs to a particular genre, the value is given as 1. "}}