{"cell_type":{"6ce4986d":"code","152b0fc0":"code","a0a021aa":"code","09185f2b":"code","dbb2be04":"code","0ad7d560":"code","a2977d81":"code","34e3d949":"code","e6b528f3":"code","082d93c8":"code","831651e1":"code","7dd125cc":"code","5e1df2e8":"code","17edb227":"code","994e4712":"code","48bbe83c":"code","9dbeced5":"code","e0c47e9d":"code","1303b4a1":"code","0bdda5dd":"code","8b8141a6":"code","0aaad1bc":"code","9c0eb806":"code","b492e3a7":"code","b21ad8bf":"code","27ee3bb6":"code","02f6c4b4":"code","a3353982":"code","db0e15b7":"code","c3a24bbb":"code","8ef2af14":"code","fe49aeb9":"code","73ece91d":"code","85598a2b":"code","6b147985":"code","d86de8e1":"code","7f904623":"code","6062b075":"code","5f69105d":"code","71d6401c":"code","b652eab0":"code","db4484d7":"code","72e76890":"code","59cdfb44":"code","f4931cf2":"code","862069b5":"code","df98dfcd":"code","b24ebc43":"code","1da716f2":"code","f6b12470":"code","4097bcd6":"code","10f25049":"code","970eb256":"code","4052d2c1":"code","ed2650bf":"code","5f7ab291":"code","fda767fc":"code","a53dd6b8":"code","5087409a":"code","0e564155":"code","d9ed7aee":"code","4c5df873":"code","b4cc3326":"code","0a5e7802":"code","0c79f6fd":"code","c2651497":"code","42047577":"code","e0714725":"code","00856b0d":"code","0436c9ef":"code","1172315f":"code","9f159734":"code","99e155e1":"code","919b43d7":"code","3a08a458":"code","7d46e444":"code","a2d43a0f":"code","17d924c1":"code","4cd8a97a":"code","e6194e9b":"code","56c6bcf5":"code","451adbd5":"code","80baaaf2":"code","1b22d6fd":"code","b18fcd72":"code","098d0268":"code","fa183af2":"code","d91f4a52":"markdown","6f6a6cbd":"markdown","f6471412":"markdown","89b26425":"markdown","d4fa9803":"markdown","fe8cffb7":"markdown","4b3ae8dd":"markdown","bb8ec373":"markdown","2bb19b99":"markdown","832a0d3b":"markdown","aa0462f1":"markdown","666bc8d8":"markdown","4c906b56":"markdown","1ec2432d":"markdown","8683e27d":"markdown","fec68382":"markdown","b953178e":"markdown","e0c8fb98":"markdown","30e80725":"markdown","c3ca5d51":"markdown","568bea0d":"markdown","bc204291":"markdown","2c3a9797":"markdown","b4f1a7e9":"markdown","7df9d296":"markdown","4e7089c2":"markdown","315471f1":"markdown","e56cd598":"markdown","cccb5115":"markdown","7260b165":"markdown","f5e9a95b":"markdown","08a14b7b":"markdown","a87d7e4a":"markdown","bd525b8c":"markdown","2b01c160":"markdown","97da4d23":"markdown","2655478d":"markdown","3996b9a8":"markdown","14127fc9":"markdown","de45d2fc":"markdown","90654776":"markdown","70de6d4c":"markdown","27b0ed3a":"markdown","34acba70":"markdown"},"source":{"6ce4986d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom collections import Counter\nimport warnings\n\nplt.style.use(\"seaborn-whitegrid\")\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","152b0fc0":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","a0a021aa":"test_PassengerId = test_df[\"PassengerId\"]","09185f2b":"train_df.columns","dbb2be04":"train_df.head()","0ad7d560":"train_df.describe()","a2977d81":"train_df.info()","34e3d949":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get var\n    var = train_df[variable]\n    # count number of categorical variable\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (12,5))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","e6b528f3":"cat1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in cat1:\n    bar_plot(c)","082d93c8":"cat2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in cat2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","831651e1":"def plot_hist(variable):\n    plt.figure(figsize = (12,5))\n    plt.hist(train_df[variable], bins = 100)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","7dd125cc":"numeric = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numeric:\n    plot_hist(n)","5e1df2e8":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","17edb227":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","994e4712":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","48bbe83c":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","9dbeced5":"# Embarked vs Survived\ntrain_df[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","e0c47e9d":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","1303b4a1":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","0bdda5dd":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","8b8141a6":"train_df.info()","0aaad1bc":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","9c0eb806":"train_df.head()","b492e3a7":"train_df.columns[train_df.isnull().any()]","b21ad8bf":"train_df.isnull().sum()","27ee3bb6":"train_df[train_df[\"Embarked\"].isnull()]","02f6c4b4":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","a3353982":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","db0e15b7":"train_df[train_df[\"Fare\"].isnull()]","c3a24bbb":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","8ef2af14":"train_df[train_df[\"Fare\"].isnull()]","fe49aeb9":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","73ece91d":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","85598a2b":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","6b147985":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","d86de8e1":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","7f904623":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","6062b075":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","5f69105d":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","71d6401c":"train_df[train_df[\"Age\"].isnull()]","b652eab0":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","db4484d7":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","72e76890":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","59cdfb44":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","f4931cf2":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","862069b5":"train_df[train_df[\"Age\"].isnull()]","df98dfcd":"train_df[\"Name\"].head(10)","b24ebc43":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","1da716f2":"plt.figure(figsize=(10,8))\nsns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","f6b12470":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","4097bcd6":"plt.figure(figsize=(10,8))\nsns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","10f25049":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","970eb256":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","4052d2c1":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","ed2650bf":"train_df.head()","5f7ab291":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","fda767fc":"train_df.head()","a53dd6b8":"plt.figure(figsize=(10,8))\ng = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","5087409a":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","0e564155":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","d9ed7aee":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","4c5df873":"#Small familes have more chance to survive than large families.","b4cc3326":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","0a5e7802":"train_df[\"Embarked\"].head()","0c79f6fd":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","c2651497":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","42047577":"train_df[\"Ticket\"].head(15)","e0714725":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","00856b0d":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","0436c9ef":"train_df[\"Ticket\"].head(15)","1172315f":"train_df.head()","9f159734":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","99e155e1":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","919b43d7":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","3a08a458":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","7d46e444":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)\ntrain_df.columns","a2d43a0f":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier","17d924c1":"train_df_len\ntest = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","4cd8a97a":"test.head()","e6194e9b":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.2, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","56c6bcf5":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","451adbd5":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier(), XGBClassifier(random_state = random_state)]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [0.5,1,3,8],\n                \"min_samples_split\":[2,3,5],\n                \"min_samples_leaf\":[1,3,5,10],\n                \"n_estimators\":[100,200,300],}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nxgb_param_grid = {\n        \"n_estimators\": [200, 500],\n        \"subsample\": [0.8, 1.0], \n        \"gamma\" : [0,1,5],\n        \"max_depth\": [3, 4, 6], \n        \"learning_rate\": [0.1,0.2,0.3]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid,\n                   xgb_param_grid]","80baaaf2":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","1b22d6fd":"plt.figure(figsize=(10,8))\ncv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\", \"XGBoost\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","b18fcd72":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3]),\n                                        (\"xgb\",best_estimators[5])],\n                               \n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","098d0268":"votingC","fa183af2":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","d91f4a52":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing values\n* Fare has only 1 missing value","6f6a6cbd":"<a id = \"7\"><\/a><br>\n# Outlier Detection","f6471412":"<a id = \"30\"><\/a><br>\n## Train - Test Split","89b26425":"<a id = \"14\"><\/a><br>\n## Parch -- Survived","d4fa9803":"Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","fe8cffb7":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","4b3ae8dd":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Embarked - Survived","bb8ec373":"<a id = \"13\"><\/a><br>\n## SibSp -- Survived","2bb19b99":"<a id = \"4\"><\/a><br>\n## Categorical Variable","832a0d3b":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","aa0462f1":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","666bc8d8":"<a id = \"26\"><\/a><br>\n## Pclass","4c906b56":"<a id = \"22\"><\/a><br>\n## Name -- Title","1ec2432d":"<a id = \"21\"><\/a><br>\n# Feature Engineering\n","8683e27d":"<a id = \"5\"><\/a><br>\n## Numerical Variable","fec68382":"<a id = \"24\"><\/a><br>\n## Embarked","b953178e":"<a id = \"9\"><\/a><br>\n## Find Missing Value","e0c8fb98":"<a id = \"20\"><\/a><br>\n## Fill Missing: Age Feature","30e80725":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin ","c3ca5d51":"* Female passengers have much better survival rate than males.\n* males have better survival rate in pclass 3 in C.\n* embarked and sex will be used in training.","568bea0d":"<a id = \"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","bc204291":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","2c3a9797":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.","b4f1a7e9":"<a id=\"2\"><\/a>\n# 2. Variable Description:\n\n1. PassengerId: unique id number to each passenger\n2. Survived: passenger survive(1) or died(0)\n3. Pclass: passenger class\n4. Name: name\n5. Sex: gender of passenger\n6. Age: age of passenger\n7. SibSp: number of siblings\/spouses\n8. Parch: number of parents\/children\n9. Ticket: ticket number\n10. Fare: amount of money spent on ticket\n11. Cabin: cabin category\n12. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","7df9d296":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and passengerId","4e7089c2":"* float64(2): Fare ve Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","315471f1":"1st class passengers are older than 2nd, and 2nd is older than 3rd class.","e56cd598":"* pclass is important feature for model training.","cccb5115":"<a id = \"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","7260b165":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small familes have more chance to survive.\n* there is a std in survival of passenger with parch = 3","f5e9a95b":"<a id = \"25\"><\/a><br>\n## Ticket","08a14b7b":"<a id = \"15\"><\/a><br>\n## Pclass -- Survived","a87d7e4a":"<a id = \"17\"><\/a><br>\n## Pclass -- Survived -- Age","bd525b8c":"<a id = \"29\"><\/a><br>\n# Modeling","2b01c160":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","97da4d23":"* Passsengers who pay higher fare have better survival. Fare can be used as categorical for training.","2655478d":"<a id=\"1\"><\/a>\n# 1. Load an check data:","3996b9a8":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression\n* XGBoost","14127fc9":"<a id = \"23\"><\/a><br>\n## Family Size","de45d2fc":"<a id = \"27\"><\/a><br>\n## Sex","90654776":"<a id = \"16\"><\/a><br>\n## Age -- Survived","70de6d4c":"# Introduction:\nRMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean in the early morning hours of 15 April 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking one of modern history's deadliest peacetime commercial marine disasters.\n\nContent:\n\n<font color = 'blue'>\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32) \n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","27b0ed3a":"<a id = \"11\"><\/a><br>\n# Visualization","34acba70":"<a id = \"12\"><\/a><br>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived"}}