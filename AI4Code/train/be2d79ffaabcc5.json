{"cell_type":{"36fe9bd7":"code","6f84846e":"code","dfe24b31":"code","908082b7":"code","1bb039ad":"code","b9e38f26":"code","ec34612b":"code","62fd8e81":"code","90617afb":"code","4a32c8e6":"code","8fb38247":"code","b5af3863":"code","c1c0d336":"code","d9ccedc7":"code","8e1d6247":"code","d982704d":"code","fbced556":"code","cda17a8e":"code","ab880315":"code","8d53432d":"code","ba28e021":"code","d65ecb05":"code","8fcfaebe":"code","535bdc84":"code","14dbdde5":"code","039859ed":"code","79ce2b2b":"code","37caed0f":"code","96716847":"code","3500b589":"code","f9075271":"code","c1cba93b":"code","7cf527bd":"code","d44685a9":"code","aa49a25f":"code","48a2ee6b":"code","67137cdc":"code","b4555ed9":"code","211f0ef8":"code","330c2ff3":"code","ed2906d3":"code","c4259bdf":"code","d3b8042e":"code","b8eb5d0a":"code","17f30f36":"code","909146d4":"code","4c4ea287":"code","efb08f7a":"code","6dc20135":"code","86f44bac":"code","24f8b909":"code","e1ebd67c":"code","ab0a3043":"code","304454c9":"code","ec0a5d7e":"code","c3e5fe09":"code","a56e42a8":"code","23960085":"code","ed5507cb":"code","9cff0921":"code","dfd78786":"code","18bdc666":"code","81d6ee54":"code","0046b41f":"code","ace97308":"code","9187a649":"code","4958d702":"code","5febe9d3":"code","97b060cd":"code","a8680b4f":"code","62d602de":"code","be301634":"code","e254bf47":"code","17759f3b":"code","5efba58c":"code","78b8c10d":"code","479f810b":"code","9682074f":"code","38fb7ee4":"code","44b18e05":"code","0599dd7c":"code","d47bc0eb":"code","bf5050e8":"code","48bdcb71":"code","9eb4bda2":"code","ebe2e26c":"code","10e91148":"code","fbda5b86":"code","6331a958":"code","ace17e6f":"code","5e841475":"code","72ee2198":"code","4e52cb42":"code","c061b04c":"code","78a8fc54":"code","70931b33":"code","094145ee":"code","17e39259":"code","0bd30920":"code","43ceba5c":"code","bc35aead":"code","2b395600":"code","5407aae9":"code","b9ca7cd3":"code","3c604f3f":"code","6a138da4":"code","d1793889":"code","658091ab":"code","04a0645e":"code","c1578036":"code","2c42fe40":"code","bdd05a41":"code","8f8941ab":"code","45d36ed3":"code","3b414941":"code","6b9104a3":"code","a5840638":"code","f435bb48":"code","c0d34d52":"code","ce10080d":"code","fd3fe8dd":"code","34cba8bc":"code","f3b42266":"code","f57fca55":"code","115da307":"code","2d54f89e":"code","d9b0eca4":"code","1353cdab":"code","134304c7":"code","f25faa18":"markdown","5b363bc3":"markdown","3996a688":"markdown","16a601ea":"markdown","adde695f":"markdown","17ffcc18":"markdown","4a57d526":"markdown","e25a261a":"markdown","3598acfe":"markdown","992d8028":"markdown","9fde14db":"markdown","05033d08":"markdown","b884f1a4":"markdown","78e52b55":"markdown","d219ecf1":"markdown","dd93b4fa":"markdown","dda80a6a":"markdown","3d89ef9d":"markdown","f02ba7ec":"markdown","a277616a":"markdown","b814ffe4":"markdown","8ddd9091":"markdown","dca6f569":"markdown","17612ca6":"markdown","67885a01":"markdown","8f4aceb5":"markdown","24e06ce8":"markdown","282abbe7":"markdown","9d01cbba":"markdown","e342b1dd":"markdown","0d261f67":"markdown","6e3e0db0":"markdown","02f11b09":"markdown","b724fc7e":"markdown","0aca73e1":"markdown","1dc044a7":"markdown","97ba5e03":"markdown","a12efa30":"markdown","f8adc68a":"markdown","a2852275":"markdown","1fa8d340":"markdown","753fc185":"markdown","a663753a":"markdown","42a60b5c":"markdown","4e06ed35":"markdown","d41999d1":"markdown","6da9bff1":"markdown","554ffbb5":"markdown","4d030dba":"markdown","60dc83a0":"markdown","44f89e87":"markdown","3244e112":"markdown","67b400ab":"markdown","4485f222":"markdown","1054f1bb":"markdown","51ef4253":"markdown","3950762f":"markdown","946fa297":"markdown","5158556d":"markdown","c605d4de":"markdown","86d2ff18":"markdown","25a37bcb":"markdown","f476dfbe":"markdown","2f7ce94b":"markdown","fa8705d7":"markdown","e08a1a43":"markdown","f0e2988b":"markdown","3885a1c6":"markdown","3878777d":"markdown","45fa8be6":"markdown","8e011d45":"markdown","0771da0e":"markdown","0ea6f6b8":"markdown","32b4a9c1":"markdown","3f6ad933":"markdown","d876b197":"markdown","9a0d5fba":"markdown"},"source":{"36fe9bd7":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom datetime import datetime\nfrom datetime import date\nfrom sklearn.ensemble import RandomForestClassifier","6f84846e":"df = pd.read_csv('..\/input\/housing-price\/train.csv')\ndf.head()","dfe24b31":"df.info()","908082b7":"df_test = pd.read_csv('..\/input\/housing-price\/test.csv')\ndf_test.head()","1bb039ad":"df_test.info()","b9e38f26":"lot_frontage_mean = df['LotFrontage'].mean()\ndf['LotFrontage'].fillna(lot_frontage_mean, inplace = True)\nprint('Replaced the missing values for the LotFrontage Column with it\\'s Mean: ' + str(lot_frontage_mean))","ec34612b":"test_lot_frontage_mean = df_test['LotFrontage'].mean()\ndf_test['LotFrontage'].fillna(test_lot_frontage_mean, inplace = True)\nprint('Replaced the missing values in the Test Set for the LotFrontage Column with it\\'s Mean: ' + str(test_lot_frontage_mean))","62fd8e81":"print(df['Alley'].unique())\nprint(df_test['Alley'].unique())\n\n# df.drop('Alley', axis = 1, inplace = True)\n# df_test.drop('Alley', axis = 1, inplace = True)\ndf['Alley'].fillna('None', inplace = True)\ndf_test['Alley'].fillna('None', inplace = True)","90617afb":"df['MasVnrArea'].fillna(0, inplace = True)\ndf_test['MasVnrArea'].fillna(0, inplace = True)\nprint('Replaced the missing values for the MasVnrArea Column with 0')","4a32c8e6":"df['MasVnrType'].fillna('None', inplace = True)\ndf_test['MasVnrType'].fillna('None', inplace = True)\n\nprint('Replaced the missing values for the MasVnrArea Column with None')\nprint(df['MasVnrType'].unique())\nprint(df_test['MasVnrType'].unique())","8fb38247":"print(df['FireplaceQu'].unique())\nprint(df_test['FireplaceQu'].unique())\n\n# df.drop('FireplaceQu', axis = 1, inplace = True)\n# df_test.drop('FireplaceQu', axis = 1, inplace = True)\n\ndf['FireplaceQu'].fillna('None', inplace = True)\ndf_test['FireplaceQu'].fillna('None', inplace = True)","b5af3863":"print(df['GarageType'].unique())\nprint(df['GarageFinish'].unique())\nprint(df['GarageQual'].unique())\nprint(df['GarageCond'].unique())\n\ndf['GarageType'].fillna('None', inplace = True)\ndf['GarageFinish'].fillna('None', inplace = True)\ndf['GarageQual'].fillna('None', inplace = True)\ndf['GarageCond'].fillna('None', inplace = True)","c1c0d336":"print(df_test['GarageType'].unique())\nprint(df_test['GarageFinish'].unique())\nprint(df_test['GarageQual'].unique())\nprint(df_test['GarageCond'].unique())\n\ndf_test['GarageType'].fillna('None', inplace = True)\ndf_test['GarageFinish'].fillna('None', inplace = True)\ndf_test['GarageQual'].fillna('None', inplace = True)\ndf_test['GarageCond'].fillna('None', inplace = True)","d9ccedc7":"print(df['BsmtQual'].unique())\nprint(df['BsmtCond'].unique())\nprint(df['BsmtExposure'].unique())\nprint(df['BsmtFinType1'].unique())\nprint(df['BsmtFinType2'].unique())\n\ndf['BsmtQual'].fillna('None', inplace = True)\ndf['BsmtCond'].fillna('None', inplace = True)\ndf['BsmtExposure'].fillna('None', inplace = True)\ndf['BsmtFinType1'].fillna('None', inplace = True)\ndf['BsmtFinType2'].fillna('None', inplace = True)","8e1d6247":"print(df_test['BsmtQual'].unique())\nprint(df_test['BsmtCond'].unique())\nprint(df_test['BsmtExposure'].unique())\nprint(df_test['BsmtFinType1'].unique())\nprint(df_test['BsmtFinType2'].unique())\n\ndf_test['BsmtQual'].fillna('None', inplace = True)\ndf_test['BsmtCond'].fillna('None', inplace = True)\ndf_test['BsmtExposure'].fillna('None', inplace = True)\ndf_test['BsmtFinType1'].fillna('None', inplace = True)\ndf_test['BsmtFinType2'].fillna('None', inplace = True)","d982704d":"# print(df['BsmtFinSF1'].unique())\n# print(df['BsmtFinSF2'].unique())\n# print(df['BsmtUnfSF'].unique())\n# print(df['TotalBsmtSF'].unique())\n# print(df['BsmtFullBath'].unique())\n# print(df['BsmtHalfBath'].unique())\n\ndf['BsmtFinSF1'].fillna(0, inplace = True)\ndf['BsmtFinSF2'].fillna(0, inplace = True)\ndf['BsmtUnfSF'].fillna(0, inplace = True)\ndf['TotalBsmtSF'].fillna(0, inplace = True)\ndf['BsmtFullBath'].fillna(0, inplace = True)\ndf['BsmtHalfBath'].fillna(0, inplace = True)","fbced556":"# print(df_test['BsmtFinSF1'].unique())\n# print(df_test['BsmtFinSF2'].unique())\n# print(df_test['BsmtUnfSF'].unique())\n# print(df_test['TotalBsmtSF'].unique())\n# print(df_test['BsmtFullBath'].unique())\n# print(df_test['BsmtHalfBath'].unique())\n\ndf_test['BsmtFinSF1'].fillna(0, inplace = True)\ndf_test['BsmtFinSF2'].fillna(0, inplace = True)\ndf_test['BsmtUnfSF'].fillna(0, inplace = True)\ndf_test['TotalBsmtSF'].fillna(0, inplace = True)\ndf_test['BsmtFullBath'].fillna(0, inplace = True)\ndf_test['BsmtHalfBath'].fillna(0, inplace = True)","cda17a8e":"print(df['GarageYrBlt'].unique())\nGarageYrBlt = df['GarageYrBlt'].dropna().median()\nprint('Replacing Missing Values for the Garage Year Built Column with it\\'s Median ' + str(GarageYrBlt))\n\ndf['GarageYrBlt'].fillna(GarageYrBlt, inplace = True)","ab880315":"print(df_test['GarageYrBlt'].unique())\nGarageYrBlt = df_test['GarageYrBlt'].dropna().median()\nprint('Replacing Missing Values for the Garage Year Built Column with it\\'s Median ' + str(GarageYrBlt))\n\ndf_test['GarageYrBlt'].fillna(GarageYrBlt, inplace = True)","8d53432d":"print(df['GarageArea'].unique())\nprint(df['GarageQual'].unique())\n\ndf['GarageArea'].fillna(0, inplace = True)\ndf['GarageQual'].fillna(0, inplace = True)","ba28e021":"print(df_test['GarageArea'].unique())\nprint(df_test['GarageQual'].unique())\n\ndf_test['GarageArea'].fillna(0, inplace = True)\ndf_test['GarageQual'].fillna(0, inplace = True)","d65ecb05":"print(df['MiscFeature'].unique())\nprint(df_test['MiscFeature'].unique())\n\n# df.drop('MiscFeature', axis = 1, inplace = True)\n# df_test.drop('MiscFeature', axis = 1, inplace = True)\n\ndf['MiscFeature'].fillna('None', inplace = True)\ndf_test['MiscFeature'].fillna('None', inplace = True)","8fcfaebe":"df.drop('Utilities', axis = 1, inplace = True)\ndf_test.drop('Utilities', axis = 1, inplace = True)","535bdc84":"print(df['Fence'].unique())\nprint(df_test['Fence'].unique())\n\n# df.drop('Fence', axis = 1, inplace = True)\n# df_test.drop('Fence', axis = 1, inplace = True)\n\ndf['Fence'].fillna('None', inplace = True)\ndf_test['Fence'].fillna('None', inplace = True)","14dbdde5":"print(df['PoolQC'].unique())\nprint(df_test['PoolQC'].unique())\n\n# df.drop('PoolQC', axis = 1, inplace = True)\n# df_test.drop('PoolQC', axis = 1, inplace = True)\n\ndf['PoolQC'].fillna('None', inplace = True)\ndf_test['PoolQC'].fillna('None', inplace = True)","039859ed":"df.dropna(inplace = True)\ndf.info()","79ce2b2b":"print(df_test['MSZoning'].unique())\nMSZoning = df.MSZoning.mode()\ndf_test['MSZoning'].fillna(MSZoning[0], inplace = True)","37caed0f":"print(df_test['Exterior1st'].unique())\nExterior1st = df.Exterior1st.mode()\ndf_test['Exterior1st'].fillna(Exterior1st[0], inplace = True)","96716847":"print(df_test['Exterior2nd'].unique())\nExterior2nd = df.Exterior2nd.mode()\ndf_test['Exterior2nd'].fillna(Exterior2nd[0], inplace = True)","3500b589":"print(df_test['KitchenQual'].unique())\nKitchenQual = df.KitchenQual.mode()\ndf_test['KitchenQual'].fillna(KitchenQual[0], inplace = True)","f9075271":"print(df_test['Functional'].unique())\nFunctional = df.Functional.mode()\ndf_test['Functional'].fillna(Functional[0], inplace = True)","c1cba93b":"print(df_test['SaleType'].unique())\nSaleType = df.SaleType.mode()\ndf_test['SaleType'].fillna(SaleType[0], inplace = True)","7cf527bd":"print(df_test['GarageCars'].unique())","d44685a9":"df_test['GarageCars'].fillna('None', inplace = True)\ndf_test[df_test['GarageCars'] == 'None'].GarageArea ","aa49a25f":"df_test['GarageCars'].replace(to_replace = ['None'], value = np.nan, inplace=True)\ndf_test['GarageCars'].fillna(0, inplace = True)\nprint(df_test['GarageCars'].unique())","48a2ee6b":"#df_test.dropna(inplace = True)\ndf_test.info()","67137cdc":"sns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(8,5)})\n\nsns.distplot(a = df['SalePrice'], bins = 50, color = 'gray', vertical = False\n            ).set_title('Sale Price')","b4555ed9":"corr = df.corr()","211f0ef8":"sns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(30,30)})\n\nsns.heatmap(corr, cmap=\"YlGnBu\")\n","330c2ff3":"sns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(8, 8)})\nsns.scatterplot(x = \"SalePrice\", y = \"LotArea\", data = df, color = \"gray\")","ed2906d3":"sns.set(rc={'figure.figsize':(13, 8)})\nax = sns.countplot(df['MSZoning'], color = 'gray')\nax.set(xlabel = \"Residential Low Density, Residential Medium Density, Commercial, Floating Village Residential, Residential High Density\")","c4259bdf":"sns.set(rc={'figure.figsize':(8, 8)})\nsns.scatterplot(x = \"SalePrice\", y = \"LotFrontage\", data = df, color = \"gray\")","d3b8042e":"sns.set(rc={'figure.figsize':(8, 8)})\nsns.countplot(df['Street'], color = 'gray')","b8eb5d0a":"sns.set(rc={'figure.figsize':(6, 6)})\nax = sns.countplot(df['LotShape'], color = 'gray')\nax.set(xlabel = \"Regular, Slightly irregular, Moderately Irregular, Irregular\")","17f30f36":"sns.set(rc={'figure.figsize':(8, 8)})\nsns.countplot(df['LandContour'], color = 'gray')","909146d4":"sns.set(rc={'figure.figsize':(8, 5)})\nsns.countplot(df['LotConfig'], color = 'gray')","4c4ea287":"sns.countplot(df['LandSlope'], color = 'gray')","efb08f7a":"sns.set(rc={'figure.figsize':(21, 5)})\nsns.countplot(df['Neighborhood'], color = 'gray')","6dc20135":"sns.set(rc={'figure.figsize':(8, 5)})\nsns.countplot(df['Condition1'], color = 'gray')","86f44bac":"sns.set(rc={'figure.figsize':(5, 5)})\nsns.countplot(df['BldgType'], color = 'gray')","24f8b909":"sns.set(rc={'figure.figsize':(8, 5)})\nsns.countplot(df['HouseStyle'], color = 'gray')","e1ebd67c":"sns.countplot(df['OverallQual'], color = 'gray')","ab0a3043":"sns.countplot(df['OverallCond'], color = 'gray')","304454c9":"sns.scatterplot(x = \"SalePrice\", y = \"YearBuilt\", data = df, color = \"gray\")","ec0a5d7e":"sns.scatterplot(x = \"SalePrice\", y = \"YearRemodAdd\", data = df, color = \"gray\")","c3e5fe09":"sns.countplot(df['RoofStyle'], color = 'gray')","a56e42a8":"sns.countplot(df['RoofMatl'], color = 'gray')","23960085":"sns.set(rc={'figure.figsize':(12, 5)})\nsns.countplot(df['Exterior1st'], color = 'gray')","ed5507cb":"sns.countplot(df['Exterior2nd'], color = 'gray')","9cff0921":"sns.set(rc={'figure.figsize':(8, 5)})\nsns.countplot(df['MasVnrType'], color = 'gray')","dfd78786":"sns.scatterplot(x = \"SalePrice\", y = \"MasVnrArea\", data = df, color = \"gray\")","18bdc666":"sns.countplot(df['ExterQual'], color = 'gray')","81d6ee54":"sns.countplot(df['ExterCond'], color = 'gray')","0046b41f":"sns.countplot(df['Foundation'], color = 'gray')","ace97308":"sns.countplot(df['BsmtQual'], color = 'gray')","9187a649":"sns.countplot(df['BsmtCond'], color = 'gray')","4958d702":"sns.countplot(df['BsmtExposure'], color = 'gray')","5febe9d3":"sns.countplot(df['BsmtFinType1'], color = 'gray')","97b060cd":"sns.scatterplot(x = \"SalePrice\", y = \"BsmtFinSF1\", data = df, color = \"gray\")","a8680b4f":"sns.countplot(df['BsmtFinType2'], color = 'gray')","62d602de":"sns.scatterplot(x = \"SalePrice\", y = \"BsmtUnfSF\", data = df, color = \"gray\")","be301634":"sns.scatterplot(x = \"SalePrice\", y = \"TotalBsmtSF\", data = df, color = \"gray\")","e254bf47":"sns.countplot(df['Heating'], color = 'gray')","17759f3b":"sns.countplot(df['HeatingQC'], color = 'gray')","5efba58c":"sns.countplot(df['CentralAir'], color = 'gray')","78b8c10d":"sns.countplot(df['Electrical'], color = 'gray')","479f810b":"sns.scatterplot(x = \"SalePrice\", y = \"1stFlrSF\", data = df, color = \"gray\")","9682074f":"sns.scatterplot(x = \"SalePrice\", y = \"2ndFlrSF\", data = df, color = \"gray\")","38fb7ee4":"sns.scatterplot(x = \"SalePrice\", y = \"LowQualFinSF\", data = df, color = \"gray\")","44b18e05":"sns.scatterplot(x = \"SalePrice\", y = \"GrLivArea\", data = df, color = \"gray\")","0599dd7c":"sns.countplot(df['BsmtFullBath'], color = 'gray')","d47bc0eb":"sns.countplot(df['BsmtHalfBath'], color = 'gray')","bf5050e8":"sns.countplot(df['FullBath'], color = 'gray')","48bdcb71":"sns.countplot(df['HalfBath'], color = 'gray')","9eb4bda2":"sns.countplot(df['KitchenQual'], color = 'gray')","ebe2e26c":"sns.countplot(df['TotRmsAbvGrd'], color = 'gray')","10e91148":"sns.countplot(df['Functional'], color = 'gray')","fbda5b86":"sns.countplot(df['Fireplaces'], color = 'gray')","6331a958":"sns.countplot(df['GarageType'], color = 'gray')","ace17e6f":"sns.scatterplot(x = \"SalePrice\", y = \"GarageYrBlt\", data = df, color = \"gray\")","5e841475":"sns.countplot(df['GarageFinish'], color = 'gray')","72ee2198":"sns.countplot(df['GarageCars'], color = 'gray')","4e52cb42":"sns.scatterplot(x = \"SalePrice\", y = \"GarageArea\", data = df, color = \"gray\")","c061b04c":"sns.countplot(df['GarageQual'], color = 'gray')","78a8fc54":"sns.countplot(df['GarageCond'], color = 'gray')","70931b33":"sns.countplot(df['PavedDrive'], color = 'gray')","094145ee":"sns.scatterplot(x = \"SalePrice\", y = \"WoodDeckSF\", data = df, color = \"gray\")","17e39259":"sns.scatterplot(x = \"SalePrice\", y = \"OpenPorchSF\", data = df, color = \"gray\")","0bd30920":"sns.scatterplot(x = \"SalePrice\", y = \"EnclosedPorch\", data = df, color = \"gray\")","43ceba5c":"sns.scatterplot(x = \"SalePrice\", y = \"3SsnPorch\", data = df, color = \"gray\")","bc35aead":"sns.scatterplot(x = \"SalePrice\", y = \"ScreenPorch\", data = df, color = \"gray\")","2b395600":"sns.scatterplot(x = \"SalePrice\", y = \"PoolArea\", data = df, color = \"gray\")","5407aae9":"sns.scatterplot(x = \"SalePrice\", y = \"MiscVal\", data = df, color = \"gray\")","b9ca7cd3":"sns.countplot(df['MoSold'], color = 'gray')","3c604f3f":"sns.countplot(df['YrSold'], color = 'gray')","6a138da4":"sns.countplot(df['SaleType'], color = 'gray')","d1793889":"sns.countplot(df['SaleCondition'], color = 'gray')","658091ab":"df.columns","04a0645e":"df['Remodel'] = df['YearBuilt'] != df['YearRemodAdd']\ndf['Remodel'] = df['Remodel'].astype(int)\ndf.head()","c1578036":"df_test['Remodel'] = df_test['YearBuilt'] != df_test['YearRemodAdd']\ndf_test['Remodel'] = df_test['Remodel'].astype(int)\ndf_test.head()","2c42fe40":"today = date.today()\ndef calculate_age(YearBuilt):\n    YearBuilt = str(YearBuilt)\n    built = datetime.strptime(YearBuilt, \"%Y\").date()\n    return today.year - built.year ","bdd05a41":"df['HouseAge'] = df['YearBuilt'].apply(calculate_age)\ndf.head() ","8f8941ab":"df_test['HouseAge'] = df_test['YearBuilt'].apply(calculate_age)\ndf_test.head()","45d36ed3":"df.drop('YearBuilt', axis = 1, inplace = True)\ndf.drop('YearRemodAdd', axis = 1, inplace = True)\n\ndf_test.drop('YearBuilt', axis = 1, inplace = True)\ndf_test.drop('YearRemodAdd', axis = 1, inplace = True)","3b414941":"df.head()","6b9104a3":"df.info()","a5840638":"x_train = df[[col for col in df.columns if col not in ['SalePrice', 'Id']]]\ny_train = df['SalePrice']","f435bb48":"x_train.head()","c0d34d52":"y_train.head()","ce10080d":"x_train = pd.get_dummies(x_train)\nx_train.info()","fd3fe8dd":"# Intializing the Model\nclf = RandomForestClassifier(max_depth=600, random_state=0)","34cba8bc":"# Train the Model\nclf.fit(x_train, y_train)","f3b42266":"x_test = df[[col for col in df_test.columns if col not in ['SalePrice', 'Id']]]\nx_test = pd.get_dummies(x_test)\nx_test.info()","f57fca55":"x_test.head()","115da307":"prices = clf.predict(x_test)","2d54f89e":"prices","d9b0eca4":"output = pd.DataFrame({'Id': df_test.Id, 'SalePrice': prices})\noutput.head()","1353cdab":"output.info()","134304c7":"output.to_csv('Final Submission_HousePrediction_RandomForest', index=False)","f25faa18":"### Column: LandSlope\n","5b363bc3":"### Column: MasVnrArea\n","3996a688":"### Column: Condition1\n","16a601ea":"### Column: MiscVal\n","adde695f":"### Column: BldgType\n","17ffcc18":"### Column: PavedDrive\n","4a57d526":"# Import Python Packages and Environment Setup","e25a261a":"### Column: GarageYrBlt\n","3598acfe":"### Column: CentralAir\n","992d8028":"### Column: WoodDeckSF\n","9fde14db":"### Column: RoofMatl\n","05033d08":"### Column: TotRmsAbvGrd\n","b884f1a4":"### Column: SaleCondition \n","78e52b55":"### Column: BsmtExposure\n","d219ecf1":"# Importing The DataSets","dd93b4fa":"### Column: YrSold\n","dda80a6a":"### Column: GarageArea\n","3d89ef9d":"# Feature Engineering","f02ba7ec":"### Column: GarageCond\n","a277616a":"### Column: KitchenQual\n","b814ffe4":"### Column: ExterCond\n\n","8ddd9091":"### Column: LotShape\n","dca6f569":"### Column: HeatingQC\n","17612ca6":"### Column: HouseStyle\n","67885a01":"### Column: EnclosedPorch\n","8f4aceb5":"### Column: Foundation\n","24e06ce8":"### Column: MasVnrType\n","282abbe7":"### Column: HalfBath\n","9d01cbba":"### Heatmap ","e342b1dd":"### Column: LandContour\n","0d261f67":"### Column: OverallCond\n","6e3e0db0":"### Column: GarageType\n","02f11b09":"# Data Visualizations","b724fc7e":"### Column: LowQualFinSF\n","0aca73e1":"### Column: GarageFinish\n","1dc044a7":"### Column: Exterior2nd\n","97ba5e03":"### Column: Neighborhood\n","a12efa30":"#Data Preprocessing ","f8adc68a":"### Column: MSZoning\n","a2852275":"# Model Testing","1fa8d340":"### Column: BsmtFinSF2\n","753fc185":"### Column: BsmtHalfBath\n","a663753a":"# Generating the Submission File","42a60b5c":"### Column: OpenPorchSF\n","4e06ed35":"### Column: Electrical\n","d41999d1":"### Column: YearBuilt\n","6da9bff1":"# Model Training","554ffbb5":"### Column: LotFrontage","4d030dba":"### Column: 1stFlrSF\n","60dc83a0":"### Column: 3SsnPorch\n","44f89e87":"### Column: Heating\n","3244e112":"### Column: 2ndFlrSF\n","67b400ab":"### Column: BsmtFinSF1\n","4485f222":"### Column: BsmtCond\n","1054f1bb":"### Column: YearRemodAdd\n","51ef4253":"### Column: MoSold\n","3950762f":"### Column: TotalBsmtSF\n","946fa297":"### Column: SaleType\n","5158556d":"### Column: Exterior1st","c605d4de":"### Column: OverallQual\n","86d2ff18":"### Column: GarageCars\n","25a37bcb":"### Column: FullBath\n","f476dfbe":"### Column: LotConfig\n","2f7ce94b":"### Column: ExterQual\n","fa8705d7":"### Column: BsmtFullBath\n","e08a1a43":"### Column: Street\n","f0e2988b":"### Column: Functional: \n","3885a1c6":"### Column: GrLivArea\n","3878777d":"### Column: PoolArea\n","45fa8be6":"### Column: RoofStyle\n","8e011d45":"### Column: BsmtFinType1\n","0771da0e":"### Column: Fireplaces\n","0ea6f6b8":"### Column: LotArea\n","32b4a9c1":"### Column: GarageQual\n","3f6ad933":"### Column: ScreenPorch\n","d876b197":"### Column: BsmtQual\n","9a0d5fba":"### Column: BsmtFinType2\n"}}