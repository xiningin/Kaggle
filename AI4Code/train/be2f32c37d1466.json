{"cell_type":{"d805940a":"code","ecec8b1e":"code","49d38fcd":"code","bba5741b":"code","3d668c30":"code","cc762cd8":"code","50c16f70":"code","109f6370":"code","db8f7c96":"code","8493c3da":"code","c397809b":"code","3d082402":"code","fc807eec":"code","692058f6":"code","add46c96":"code","f402360d":"code","c5e483c1":"code","dfc8ab91":"code","7fc2e787":"code","4a405214":"code","1a3fa31f":"code","047ed132":"code","bf16d37b":"code","fd2351b6":"code","69a6fc3f":"code","65df6cbb":"code","430db58b":"code","f842cee9":"code","e3644736":"code","994e4abb":"code","97f2c7be":"code","d4bdd41f":"code","3450643c":"code","2324ebdf":"code","ba107bc8":"code","e559b397":"code","4ceeae4b":"code","d5e48153":"code","41ec8ecf":"code","0ed06317":"code","078c78d8":"code","6a02ca03":"code","f93d5c36":"code","e923bc9c":"code","4a072be3":"code","4bbcea82":"code","051f4ab0":"code","13286463":"code","c7e7f928":"code","e892326a":"code","f3088abd":"code","fad72697":"markdown","82decf74":"markdown","d8bcf489":"markdown","cba10c15":"markdown","9dea2961":"markdown","dd77d14b":"markdown","0b497628":"markdown","37be3f22":"markdown","08449926":"markdown","87f23e6c":"markdown","df1ad341":"markdown"},"source":{"d805940a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ecec8b1e":"df = pd.read_csv(\"..\/input\/WA_Fn-UseC_-HR-Employee-Attrition.csv\")","49d38fcd":"df.head()","bba5741b":"df.shape","3d668c30":"#cleaning of data: that not requred\ndf.drop('EmployeeNumber', axis = 1, inplace = True)\ndf.drop('Over18', axis = 1, inplace = True)\ndf.drop('StandardHours', axis = 1, inplace = True)\ndf.drop('EmployeeCount', axis =1, inplace = True)","cc762cd8":"df.columns","50c16f70":"df.shape","109f6370":"df.head(2)","db8f7c96":"y = df['Attrition']\nX = df.drop('Attrition', axis = 1)","8493c3da":"y.unique()","c397809b":"y = pd.get_dummies(y, drop_first = True)","3d082402":"df.info()","fc807eec":"df.select_dtypes(['object'])","692058f6":"ind_BusinessTravel = pd.get_dummies(df['BusinessTravel'], prefix = 'BusinessTravel', drop_first = True)\nind_Department = pd.get_dummies(df['Department'], prefix = 'Department', drop_first = True)\nind_EducationField = pd.get_dummies(df['EducationField'], prefix = 'EducationField', drop_first = True)\nind_Gender = pd.get_dummies(df['Gender'], prefix = 'Gender', drop_first = True)\nind_JobRole = pd.get_dummies(df['JobRole'], prefix = 'JobRole', drop_first = True)\nind_MaritalStatus = pd.get_dummies(df['MaritalStatus'], prefix = 'MaritalStatus', drop_first = True)\nind_OverTime = pd.get_dummies(df['OverTime'], prefix = 'OverTime', drop_first = True)","add46c96":"ind_BusinessTravel.head()","f402360d":"df['BusinessTravel'].unique()","c5e483c1":"df.select_dtypes(['int64']).head(2)","dfc8ab91":"sns.heatmap(df.isnull())","7fc2e787":"df1 = pd.concat([ind_BusinessTravel, ind_Department, ind_EducationField, ind_Gender, \n                 ind_JobRole, ind_MaritalStatus, ind_OverTime, df.select_dtypes(['int64'])], axis=1)","4a405214":"df1.shape","1a3fa31f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df1,y, test_size = 0.3,random_state= 42  )","047ed132":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state = 42)","bf16d37b":"clf.fit(X_train, y_train)","fd2351b6":"from sklearn.model_selection import cross_val_score,cross_val_predict\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix","69a6fc3f":"def print_score(clf, X_train, y_train, X_test, y_test, train = True):\n    '''\n    print the accuracy score, classification report and confusion matrix of classifier\n    '''\n    if train:\n        '''\n        training performance\n        '''\n        print(\"Train Result:\\n\")\n        print(\"accuracy score: {0:.4f}\\n\".format(accuracy_score(y_train, clf.predict(X_train))))\n        print(\"Classification Report: \\n {}\\n\".format(classification_report(y_train, clf.predict(X_train))))\n        print(\"Confusion Matrix: \\n {}\\n\".format(confusion_matrix(y_train, clf.predict(X_train))))\n\n        res = cross_val_score(clf, X_train, y_train, cv=10, scoring='accuracy')\n        print(\"Average Accuracy: \\t {0:.4f}\".format(np.mean(res)))\n        print(\"Accuracy SD: \\t\\t {0:.4f}\".format(np.std(res)))\n        \n    elif train==False:\n        '''\n        test performance\n        '''\n        print(\"Test Result:\\n\")        \n        print(\"accuracy score: {0:.4f}\\n\".format(accuracy_score(y_test, clf.predict(X_test))))\n        print(\"Classification Report: \\n {}\\n\".format(classification_report(y_test, clf.predict(X_test))))\n        print(\"Confusion Matrix: \\n {}\\n\".format(confusion_matrix(y_test, clf.predict(X_test))))    \n        ","65df6cbb":"print_score(clf, X_train, y_train, X_test, y_test, train = True)","430db58b":"print_score(clf, X_train, y_train, X_test, y_test, train = False)","f842cee9":"from sklearn.ensemble import BaggingClassifier","e3644736":"bag_clf = BaggingClassifier(base_estimator = clf, n_estimators = 5000,\n                           bootstrap = True, n_jobs = -1, random_state = 42 )","994e4abb":"bag_clf.fit(X_train, y_train)","97f2c7be":"print_score (bag_clf, X_train, y_train, X_test, y_test, train = True )","d4bdd41f":"print_score(bag_clf, X_train, y_train, X_test, y_test, train = False)","3450643c":"from sklearn.ensemble import RandomForestClassifier","2324ebdf":"rf_clf = RandomForestClassifier()\nrf_clf.fit(X_train, y_train.values.ravel())","ba107bc8":"print_score(rf_clf, X_train, y_train.values.ravel(),X_test, y_test.values.ravel(), train = True),","e559b397":"print_score(rf_clf, X_train, y_train.values.ravel(),X_test, y_test.values.ravel(), train = False),","4ceeae4b":"from sklearn.ensemble import AdaBoostClassifier","d5e48153":"ada_clf = AdaBoostClassifier()\nada_clf.fit(X_train, y_train.values.ravel())","41ec8ecf":"print_score(ada_clf, X_train, y_train.values.ravel(), X_test, y_test.values.ravel(), train = True),","0ed06317":"print_score(ada_clf, X_train, y_train.values.ravel(), X_test, y_test.values.ravel(), train = False),","078c78d8":"ada_clf = AdaBoostClassifier(RandomForestClassifier())\nada_clf.fit(X_train, y_train.values.ravel())","6a02ca03":"print_score(ada_clf, X_train, y_train.values.ravel(), X_test, y_test.values.ravel(), train = True)","f93d5c36":"print_score(ada_clf, X_train, y_train.values.ravel(), X_test, y_test.values.ravel(), train = False)","e923bc9c":"from sklearn.ensemble import GradientBoostingClassifier","4a072be3":"gbc_clf = GradientBoostingClassifier()\ngbc_clf.fit(X_train, y_train.values.ravel())","4bbcea82":"print_score(gbc_clf, X_train, y_train.values.ravel(), X_test, y_test.values.ravel(), train = True )","051f4ab0":"print_score(gbc_clf, X_train, y_train.values.ravel(), X_test, y_test.values.ravel(), train = False )","13286463":"import xgboost as xgb","c7e7f928":"xgb_clf = xgb.XGBClassifier()\nxgb_clf.fit(X_train, y_train.values.ravel())","e892326a":"print_score(xgb_clf, X_train, y_train.values.ravel(), X_test, y_test.values.ravel(), train = True )","f3088abd":"print_score(xgb_clf, X_train, y_train.values.ravel(), X_test, y_test.values.ravel(), train = False )","fad72697":"# Decision Tree","82decf74":"# XG- BOOST","d8bcf489":"# Random Forest","cba10c15":"# Problem Statement","9dea2961":"Uncover the factors that lead to employee attrition and explore important questions such as \u2018show me a breakdown of distance from home by job role and attrition\u2019 or \u2018compare average monthly income by education and attrition\u2019. This is a fictional data set created by IBM data scientists","dd77d14b":"Education 1 'Below College' 2 'College' 3 'Bachelor' 4 'Master' 5 'Doctor'\n\nEnvironmentSatisfaction 1 'Low' 2 'Medium' 3 'High' 4 'Very High'\n\nJobInvolvement \n1 'Low' 2 'Medium' 3 'High' 4 'Very High'\n\nJobSatisfaction 1 'Low' 2 'Medium' 3 'High' 4 'Very High'\n\nPerformanceRating \n1 'Low' 2 'Good' 3 'Excellent' 4 'Outstanding'\n\nRelationshipSatisfaction \n1 'Low' 2 'Medium' 3 'High' 4 'Very High'\n\nWorkLifeBalance 1 'Bad' 2 'Good' 3 'Better' 4 'Best'\n\n","0b497628":"# Project HR","37be3f22":"# AdaBoost","08449926":"# Gradient Boosting Classifier","87f23e6c":"# Bagging","df1ad341":"# AdaBoost + RandomForest"}}