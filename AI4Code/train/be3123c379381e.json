{"cell_type":{"d3e9f266":"code","503c8687":"code","c7a575e0":"code","1bd7b632":"code","fd203959":"code","ab757617":"code","641aba3b":"code","67556e1d":"code","57abe05e":"code","1854d61f":"code","1c207523":"markdown","d8b51c66":"markdown","c0a7bf3c":"markdown"},"source":{"d3e9f266":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport pandas as pd\nimport numpy as np\n\nimport folium\nimport matplotlib.pyplot as plt\nimport seaborn as sns","503c8687":"pr_data=pd.read_csv(\"..\/input\/covid19-in-italy\/covid19_italy_province.csv\")\nre_data=pd.read_csv(\"..\/input\/covid19-in-italy\/covid19_italy_region.csv\")\n\nre_data.Date=pd.to_datetime(re_data.Date)","c7a575e0":"regions=pr_data.RegionName.unique()\nre_pos_case=[]\nre_lat=[]\nre_long=[]\nfor region in regions:\n    re_pos_case.append(re_data.NewPositiveCases[re_data.RegionName==region].sum())\n    re_lat.append(re_data.Latitude[re_data.RegionName==region].mean())\n    re_long.append(re_data.Longitude[re_data.RegionName==region].mean())\n    \ndf_reg_total=pd.DataFrame(regions,columns=[\"Region\"])\ndf_reg_total[\"Latitude\"]=re_lat\ndf_reg_total[\"Longitude\"]=re_long\ndf_reg_total[\"TotalPositiveCases\"]=re_pos_case\ndf_reg_total=df_reg_total.sort_values(by=['TotalPositiveCases'], ascending=False)\ndf_reg_total.reset_index(inplace=True)","1bd7b632":"plt.figure(figsize=(10,5))\nsns.set(style=\"whitegrid\")\n#plt.bar(df_reg_total.Region,df_reg_total.TotalPositiveCases)\nplt.xticks(rotation=90)\n\nsns.barplot(df_reg_total.Region,df_reg_total.TotalPositiveCases)\nplt.show()","fd203959":"plt.figure(figsize=(10,10))\nexplode=np.zeros(df_reg_total.shape[0])\nexplode=explode+0.05\nplt.pie(df_reg_total.TotalPositiveCases, labels=df_reg_total.Region, autopct='%1.1f%%', \n        startangle=0,wedgeprops = {'width':0.5}, explode=explode)\nplt.legend()\nplt.show()","ab757617":"#Region wise mapping\nlat=(df_reg_total.Latitude.max()+df_reg_total.Latitude.min())\/2\nlong=df_reg_total.Longitude.mean()\n\nita_map = folium.Map(location=[lat,long], zoom_start=6,tiles='CartoDB positron')\n\nfor i in range(df_reg_total.shape[0]):\n    folium.CircleMarker([df_reg_total.Latitude[i], df_reg_total.Longitude[i]], \n                        radius=5+30*df_reg_total.TotalPositiveCases[i]\/df_reg_total.TotalPositiveCases.max(),\n                        color=None,\n                        fill_color='red',fill_opacity=0.4,\n                        tooltip=f\"Region : {df_reg_total.Region[i]}<br>Confirmed Cases : {df_reg_total.TotalPositiveCases[i]}\"\n                       ).add_to(ita_map)\n\nita_map","641aba3b":"def stats_maker(region=\"All\"):\n    if region==\"All\":\n        df=re_data\n    else:\n        df=re_data[re_data.RegionName==region]\n        \n    Date=re_data.Date.unique()\n\n    CurrentPositiveCases=[]\n    NewPositiveCases=[]\n    Recovered=[]\n    Deaths=[]\n    TotalPositiveCases=[]\n    MortalityRate=[]\n\n    for date in Date:\n        CurrentPositiveCases.append(df.CurrentPositiveCases[df.Date==date].sum())\n        NewPositiveCases.append(df.NewPositiveCases[df.Date==date].sum())\n        Recovered.append(df.Recovered[df.Date==date].sum())\n        Deaths.append(df.Deaths[df.Date==date].sum())\n        TotalPositiveCases.append(df.TotalPositiveCases[df.Date==date].sum())\n        MortalityRate.append(df.Deaths[df.Date==date].sum()*100\/df.TotalPositiveCases[df.Date==date].sum())\n\n    dict={\"Date\":Date, \"CurrentPositiveCases\":CurrentPositiveCases, \"NewPositiveCases\":NewPositiveCases, \n          \"Recovered\":Recovered, \"Deaths\":Deaths,\"TotalPositiveCases\":TotalPositiveCases, \"MortalityRate\":MortalityRate}\n    ts_total=pd.DataFrame(dict)\n    return(ts_total)","67556e1d":"def stats_plotter(*regions):\n\n    plt.figure(figsize=(10,6))\n    for region in regions:\n        ts_total=stats_maker(region)\n        sns.lineplot(x='Date', y='TotalPositiveCases',data=ts_total, label=\"TotalPositiveCases \"+str(region))\n        sns.lineplot(x='Date', y='Deaths',data=ts_total, label=\"Deaths\"+str(region))\n        #sns.lineplot(x='Date', y='Recovered',data=ts_total, label=\"Recovered\"+str(region))\n        #sns.lineplot(x='Date', y='NewPositiveCases',data=ts_total, label=\"NewPositiveCases\"+str(region))\n        plt.xticks(rotation=90)\n        plt.legend()\n\n    plt.show()\n\n    plt.figure(figsize=(10,4))\n    \n    for region in regions:\n        ts_total=stats_maker(region)\n        sns.lineplot(x='Date', y='MortalityRate',data=ts_total, label=region)\n    plt.show()","57abe05e":"stats_plotter(\"All\")","1854d61f":"stats_plotter(\"Lombardia\",\"Veneto\")","1c207523":"## Region Time Series","d8b51c66":"## Region Wise Analysis","c0a7bf3c":"**Compare Between multiple regions**"}}