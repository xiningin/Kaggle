{"cell_type":{"241365c7":"code","87293dff":"code","adc58988":"code","9bf697b9":"code","e7706e9b":"code","c4bbe661":"code","5ee27098":"code","bb4a86be":"code","417beb53":"code","b53a25fe":"code","d1d3b613":"code","156593d8":"code","b846c3f7":"code","3b9611f7":"code","0b6bcc14":"code","8b598e87":"code","b7f34fa0":"code","b01fdcc4":"code","490b42c2":"code","3d168dcb":"code","e50e5306":"code","4d7f345a":"code","b6ece8a5":"code","e89d0f74":"code","fa548410":"code","9fc6a94a":"code","634e1d70":"code","ea638960":"code","63035d04":"code","91b4b381":"code","f8788b1a":"code","6f837826":"code","7be07e72":"code","3e731083":"code","0811bd4b":"code","49a0b598":"code","4fd7b34f":"code","515053d3":"markdown","ef5bc12a":"markdown","3744845f":"markdown","6aa359a4":"markdown","59a99531":"markdown","918aee17":"markdown","afad4792":"markdown","0cc62e41":"markdown"},"source":{"241365c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87293dff":"!git clone https:\/\/github.com\/kevinlwebb\/Treepedia_Public_SanDiego.git\n!pwd\n!ls Treepedia_Public_SanDiego\/\n!pip3 install -r Treepedia_Public_SanDiego\/requirements.txt","adc58988":"os.chdir(os.path.join(\"\/kaggle\", \"working\"))","9bf697b9":"!pip install earthengine-api --upgrade","e7706e9b":"import os, os.path\nimport urllib\nimport fiona\nimport ee\n\nee.Authenticate()\n\n\nee.Initialize()","c4bbe661":"image = ee.Image('LANDSAT\/LC08\/C01\/T1\/LC08_044034_20140318')\n\nbandNames = image.bandNames()\nprint('Band names: ', bandNames)","5ee27098":"import datetime\n\n# Convert ee.Date to client-side date\nee_date = ee.Date('2020-01-01')\npy_date = datetime.datetime.utcfromtimestamp(ee_date.getInfo()['value']\/1000.0)\nprint(py_date)\n\n# Convert client-side date to ee.Date\npy_date = datetime.datetime.utcnow()\nee_date = ee.Date(py_date)\nprint(ee_date)","bb4a86be":"# Load a Landsat image.\nimg = ee.Image('LANDSAT\/LT05\/C01\/T1_SR\/LT05_034033_20000913')\n\n# Print image object WITHOUT call to getInfo(); prints serialized request instructions.\nprint(img)\n\n# Print image object WITH call to getInfo(); prints image metadata.\nprint(img.getInfo())","417beb53":"# Print the elevation of Mount Everest.\ndem = ee.Image('USGS\/SRTMGL1_003')\nxy = ee.Geometry.Point([86.9250, 27.9881])\nelev = dem.sample(xy, 30).first().get('elevation').getInfo()\nprint('Mount Everest elevation (m):', elev)","b53a25fe":"# Import the Image function from the IPython.display module. \nfrom IPython.display import Image\n\n# Display a thumbnail of global elevation.\nImage(url = dem.updateMask(dem.gt(0))\n  .getThumbURL({'min': 0, 'max': 4000, 'dimensions': 512,\n                'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']}))","d1d3b613":"# Import the Folium library.\nimport folium\n\n# Define a method for displaying Earth Engine image tiles to folium map.\ndef add_ee_layer(self, ee_image_object, vis_params, name):\n  map_id_dict = ee.Image(ee_image_object).getMapId(vis_params)\n  folium.raster_layers.TileLayer(\n    tiles = map_id_dict['tile_fetcher'].url_format,\n    attr = 'Map Data &copy; <a href=\"https:\/\/earthengine.google.com\/\">Google Earth Engine<\/a>',\n    name = name,\n    overlay = True,\n    control = True\n  ).add_to(self)\n\n# Add EE drawing method to folium.\nfolium.Map.add_ee_layer = add_ee_layer\n\n# Set visualization parameters.\nvis_params = {\n  'min': 0,\n  'max': 4000,\n  'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']}\n\n# Create a folium map object.\nmy_map = folium.Map(location=[20, 0], zoom_start=3, height=500)\n\n# Add the elevation model to the map object.\nmy_map.add_ee_layer(dem.updateMask(dem.gt(0)), vis_params, 'DEM')\n\n# Add a layer control panel to the map.\nmy_map.add_child(folium.LayerControl())\n\n# Display the map.\ndisplay(my_map)","156593d8":"# Import the matplotlib.pyplot module.\nimport matplotlib.pyplot as plt\n\n# Fetch a Landsat image.\nimg = ee.Image('LANDSAT\/LT05\/C01\/T1_SR\/LT05_034033_20000913')\n\n# Select Red and NIR bands, scale them, and sample 500 points.\nsamp_fc = img.select(['B3','B4']).divide(10000).sample(scale=30, numPixels=500)\n\n# Arrange the sample as a list of lists.\nsamp_dict = samp_fc.reduceColumns(ee.Reducer.toList().repeat(2), ['B3', 'B4'])\nsamp_list = ee.List(samp_dict.get('list'))\n\n# Save server-side ee.List as a client-side Python list.\nsamp_data = samp_list.getInfo()\n\n# Display a scatter plot of Red-NIR sample pairs using matplotlib.\nplt.scatter(samp_data[0], samp_data[1], alpha=0.2)\nplt.xlabel('Red', fontsize=12)\nplt.ylabel('NIR', fontsize=12)\nplt.show()","b846c3f7":"# Get a download URL for an image.\nimage1 = ee.Image('srtm90_v4')\npath = image1.getDownloadUrl({\n    'scale': 30,\n    'crs': 'EPSG:4326',\n    'region': '[[-120, 35], [-119, 35], [-119, 34], [-120, 34]]'\n})\nprint(path)","3b9611f7":"# San Diego\nsd_map = folium.Map(location=[32.729849, -117.144378], zoom_start=12)\nsd_map","0b6bcc14":"landsat = ee.ImageCollection(\"LANDSAT\/LC08\/C01\/T1_SR\")","8b598e87":"# setting the Area of Interest (AOI)\nsd_aoi = ee.Geometry.Rectangle([-51.84448, -3.92180,\n                                   -52.23999, -4.38201])","b7f34fa0":"# Load a Landsat 5 image, select the bands of interest.\nimage = ee.Image('LANDSAT\/LT05\/C01\/T1_TOA\/LT05_044034_20081011').select(['B1', 'B2', 'B3', 'B4', 'B5', 'B7'])\n\n# Make an Array Image, with a 1-D Array per pixel.\narrayImage1D = image.toArray()\n\n# Make an Array Image with a 2-D Array per pixel, 6x1.\narrayImage2D = arrayImage1D.toArray(1)","b01fdcc4":"# Display GEE Features or Images using folium.\ndef Mapdisplay(center, dicc, Tiles=\"OpensTreetMap\",zoom_start=10):\n    '''\n    :param center: Center of the map (Latitude and Longitude).\n    :param dicc: Earth Engine Geometries or Tiles dictionary\n    :param Tiles: Mapbox Bright,Mapbox Control Room,Stamen Terrain,Stamen Toner,stamenwatercolor,cartodbpositron.\n    :zoom_start: Initial zoom level for the map.\n    :return: A folium.Map object.\n    '''\n    mapViz = folium.Map(location=center,tiles=Tiles, zoom_start=zoom_start)\n    for k,v in dicc.items():\n        if ee.image.Image in [type(x) for x in v.values()]:\n            folium.TileLayer(\n                tiles = v[\"tile_fetcher\"].url_format,\n                attr  = 'Google Earth Engine',\n                overlay =True,\n                name  = k\n              ).add_to(mapViz)\n        else:\n            folium.GeoJson(\n            data = v,\n            name = k\n              ).add_to(mapViz)\n    mapViz.add_child(folium.LayerControl())\n    return mapViz","490b42c2":"coefficients = ee.Array([\n  [0.3037, 0.2793, 0.4743, 0.5585, 0.5082, 0.1863],\n  [-0.2848, -0.2435, -0.5436, 0.7243, 0.0840, -0.1800],\n  [0.1509, 0.1973, 0.3279, 0.3406, -0.7112, -0.4572],\n  [-0.8242, 0.0849, 0.4392, -0.0580, 0.2012, -0.2768],\n  [-0.3280, 0.0549, 0.1075, 0.1855, -0.4357, 0.8085],\n  [0.1084, -0.9022, 0.4120, 0.0573, -0.0251, 0.0238]\n])\n\n# Load a Landsat 5 image, select the bands of interest.\nimage = ee.Image('LANDSAT\/LT05\/C01\/T1_TOA\/LT05_044034_20081011').select(['B1', 'B2', 'B3', 'B4', 'B5', 'B7'])\n\n# Make an Array Image, with a 1-D Array per pixel.\narrayImage1D = image.toArray()\n\n# Make an Array Image with a 2-D Array per pixel, 6x1.\narrayImage2D = arrayImage1D.toArray(1)\n\n# Do a matrix multiplication: 6x6 times 6x1.\n# Get rid of the extra dimensions.\ncomponentsImage = ee.Image(coefficients).matrixMultiply(arrayImage2D).arrayProject([0]).arrayFlatten([['brightness', 'greenness', 'wetness', 'fourth', 'fifth', 'sixth']])\n\n# Display the first three bands of the result and the input imagery.\nvizParams = {\n  'bands': ['brightness', 'greenness', 'wetness'],\n  'min': -0.1, 'max': [0.5, 0.1, 0.1]\n}\n\n# Display the input imagery with the greenness result.\ndicc = {\n    'image': image.getMapId({'bands': ['B4', 'B3', 'B2'], 'min': 0, 'max': 0.5}),\n    'components': componentsImage.getMapId(vizParams)\n}\n\ncoords = [37.562, -122.3]\nMapdisplay(coords, dicc, \"Stamen Terrain\", 10)","3d168dcb":"# Load an image.\n# https:\/\/developers.google.com\/earth-engine\/datasets\/catalog\/LANDSAT_LC08_C01_T1_TOA#description\nimage = ee.Image('LANDSAT\/LC08\/C01\/T1_TOA\/LC08_044034_20140318')\nmapid = image.getMapId({\n    'bands': ['B4', 'B3', 'B2'], \n    'min': 0, \n    'max': 0.3})\n\ncenter=[38., -122.5]\n\n# Display the map with folium!\nMapdisplay(center, {'Median Composite':mapid},zoom_start=10)","e50e5306":"# Load an image.\nimage = ee.Image('LANDSAT\/LC08\/C01\/T1_TOA\/LC08_044034_20140318')\n\n# Create an NDWI image, define visualization parameters and display.\nndwi = image.normalizedDifference(['B3', 'B5'])\n\n# Mask the non-watery parts of the image, where NDWI < 0.4.\nndwiMasked = ndwi.updateMask(ndwi.gte(0.4))\nndwiId = ndwiMasked.getMapId({'min': 0.5, 'max': 1, 'palette': ['00FFFF', '0000FF']})\n\n# Display the map with folium!\ncenter=[38., -122.5]\nMapdisplay(center,{'NDWI masked':ndwiId})","4d7f345a":"\n# Load an image.\n# [treecover2000, loss, gain, lossyear, first_b30, first_b40, first_b50,\n# first_b70, last_b30, last_b40, last_b50, last_b70, datamask]\nimage = ee.Image('UMD\/hansen\/global_forest_change_2013')\nmapid = image.getMapId({\n    'bands': [\"loss\"], \n    'min': 0, \n    'max': 0.3,\n    'palette': ['00FFFF', '0000FF']})\n\ncenter=[38., -122.5]\n\n# Display the map with folium!\nMapdisplay(center, {'Median Composite':mapid},zoom_start=10)","b6ece8a5":"\n# Load an image.\n# https:\/\/sites.google.com\/site\/earthengineapidocs\/tutorials\/global-forest-change-tutorial\/palettes-and-masking-with-an-introduction-to-javascript-methods-and-variables\n# [treecover2000, loss, gain, lossyear, first_b30, first_b40, first_b50,\n# first_b70, last_b30, last_b40, last_b50, last_b70, datamask]\nimage = ee.Image('UMD\/hansen\/global_forest_change_2013')\nmapid = image.getMapId({\n    'bands': [\"treecover2000\"], \n    'min': 0, \n    'max': 100,\n    'palette': '000000, 00FF00'})\n\ncenter=[38., -122.5]\n\n# Display the map with folium!\nMapdisplay(center, {'Median Composite':mapid},zoom_start=10)","e89d0f74":"# Load an image.\n# https:\/\/sites.google.com\/site\/earthengineapidocs\/tutorials\/global-forest-change-tutorial\/palettes-and-masking-with-an-introduction-to-javascript-methods-and-variables\n# [treecover2000, loss, gain, lossyear, first_b30, first_b40, first_b50,\n# first_b70, last_b30, last_b40, last_b50, last_b70, datamask]\nimage = ee.Image('UMD\/hansen\/global_forest_change_2013').mask(ee.Image('UMD\/hansen\/global_forest_change_2013').select(['treecover2000']))\nmapid = image.getMapId({\n    'bands': [\"treecover2000\"], \n    'min': 0, \n    'max': 100,\n    'palette': '000000, 00FF00'})\n\ncenter=[38., -122.5]\n\n# Display the map with folium!\nMapdisplay(center, {'Median Composite':mapid},zoom_start=10)","fa548410":"# Remove clouds\n\n# https:\/\/developers.google.com\/earth-engine\/datasets\/catalog\/LANDSAT_LC08_C01_T1_SR#bands\ndef maskL8sr(image):\n    # Bits 3 and 5 are cloud shadow and cloud, respectively.\n    cloudShadowBitMask = 1 << 3\n    cloudsBitMask = 1 << 5\n    # Get the pixel QA band.\n    qa = image.select('pixel_qa')\n    # Both flags should be set to zero, indicating clear conditions.\n    mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0) and qa.bitwiseAnd(cloudsBitMask).eq(0)\n    return image.updateMask(mask)\n\n\n# Load an image.\nimage = ee.ImageCollection('LANDSAT\/LC08\/C01\/T1_SR').filterDate('2016-01-01', '2016-12-31').map(maskL8sr)\nmapid = image.getMapId({\n    'bands': ['B4', 'B3', 'B2'], \n    'min': 0, \n    'max': 3000,\n    \"gamma\": 1.4})\n\ncenter=[38., -122.5]\n\n# Display the map with folium!\nMapdisplay(center, {'Median Composite':mapid},zoom_start=10)","9fc6a94a":"# Clouds included\n# Load an image.\nimage = ee.ImageCollection('LANDSAT\/LC08\/C01\/T1_SR').filterDate('2016-01-01', '2016-12-31')\nmapid = image.getMapId({\n    'bands': ['B4', 'B3', 'B2'], \n    'min': 0, \n    'max': 3000,\n    \"gamma\": 1.4})\n\ncenter=[38., -122.5]\n\n# Display the map with folium!\nMapdisplay(center, {'Median Composite':mapid},zoom_start=10)","634e1d70":"import numpy as np\nimport matplotlib.pyplot as plt","ea638960":"# Define an image.\nimg = ee.Image('LANDSAT\/LC08\/C01\/T1_SR\/LC08_038029_20180810').select(['B4', 'B5', 'B6'])\n\n# Define an area of interest.\naoi = ee.Geometry.Polygon(\n  [[[-110.8, 44.7],\n    [-110.8, 44.6],\n    [-110.6, 44.6],\n    [-110.6, 44.7]]], None, False)\n\n# Get 2-d pixel array for AOI - returns feature with 2-D pixel array as property per band.\nband_arrs = img.sampleRectangle(region=aoi)\n\n# Get individual band arrays.\nband_arr_b4 = band_arrs.get('B4')\nband_arr_b5 = band_arrs.get('B5')\nband_arr_b6 = band_arrs.get('B6')","63035d04":"# Transfer the arrays from server to client and cast as np array.\nnp_arr_b4 = np.array(band_arr_b4.getInfo())\nnp_arr_b5 = np.array(band_arr_b5.getInfo())\nnp_arr_b6 = np.array(band_arr_b6.getInfo())\nprint(np_arr_b4.shape)\nprint(np_arr_b5.shape)\nprint(np_arr_b6.shape)","91b4b381":"# Expand the dimensions of the images so they can be concatenated into 3-D.\nnp_arr_b4 = np.expand_dims(np_arr_b4, 2)\nnp_arr_b5 = np.expand_dims(np_arr_b5, 2)\nnp_arr_b6 = np.expand_dims(np_arr_b6, 2)\nprint(np_arr_b4.shape)\nprint(np_arr_b5.shape)\nprint(np_arr_b6.shape)","f8788b1a":"# Stack the individual bands to make a 3-D array.\nrgb_img = np.concatenate((np_arr_b6, np_arr_b5, np_arr_b4), 2)\nprint(rgb_img.shape)","6f837826":"# Scale the data to [0, 255] to show as an RGB image.\nrgb_img_test = (255*((rgb_img - 100)\/3500)).astype('uint8')\nplt.imshow(rgb_img_test)\nplt.show()","7be07e72":"!pip3 uninstall -y typing\n!pip3 install --upgrade earthpy","3e731083":"import os\nfrom glob import glob\nimport matplotlib.pyplot as plt\nimport earthpy as et\nimport earthpy.spatial as es\nimport earthpy.plot as ep","0811bd4b":"# Get data for example\ndata = et.data.get_data(\"vignette-landsat\")\n\n# Set working directory\nos.chdir(os.path.join(et.io.HOME, \"earth-analytics\"))\n\n# Stack the Landsat 8 bands\n# This creates a numpy array with each \"layer\" representing a single band\n# You can use the nodata= parameter to mask nodata values\nlandsat_path = glob(\n    os.path.join(\n        \"data\",\n        \"vignette-landsat\",\n        \"LC08_L1TP_034032_20160621_20170221_01_T1_sr_band*_crop.tif\",\n    )\n)\nlandsat_path.sort()\narray_stack, meta_data = es.stack(landsat_path, nodata=-9999)","49a0b598":"titles = [\"Ultra Blue\", \"Blue\", \"Green\", \"Red\", \"NIR\", \"SWIR 1\", \"SWIR 2\"]\n# sphinx_gallery_thumbnail_number = 1\nep.plot_bands(array_stack, title=titles)\nplt.show()","4fd7b34f":"ep.plot_bands(array_stack[4], cbar=True)\nplt.show()","515053d3":"# Converting Google Earth Image to Numpy array\n\n## Resources\n- [Question onf GIS SteckExchange](https:\/\/gis.stackexchange.com\/questions\/350771\/earth-engine-simplest-way-to-move-from-ee-image-to-array-for-use-in-sklearn\/351177#351177)\n- [Jupyter Notebook Example](https:\/\/gist.github.com\/jdbcode\/f4d56d72f7fc5beeaa3859999b1f5c3d)","ef5bc12a":"# Suggestions\n\nThere are size limits to `.sampleRectangle()`\n- Take a big area of interest, break it down, make multiple requests, and concatenate\n- Save the raster to Google Drive or GCP (no option to save locally), import from there, and read with rasterio\n  - https:\/\/gis.stackexchange.com\/questions\/352224\/issue-when-transforming-an-ee-image-into-numpy-array\n  - https:\/\/sgillies.net\/2018\/10\/05\/rasterio-in-colaboratory.html","3744845f":"# Example 2","6aa359a4":"# JavaScript Based Examples","59a99531":"# Exploring Google Earth\n\n## Resources\n- [GitHub Python Examples](https:\/\/github.com\/google\/earthengine-api\/tree\/master\/python\/examples)\n- [Google Earth Developer's Guide](https:\/\/developers.google.com\/earth-engine)\n- [GitHub EEwPython Guide](https:\/\/github.com\/csaybar\/EEwPython)\n- Global Forest Watch\n  - [Official Website](http:\/\/www.globalforestwatch.org\/)\n  - [UoM Summary](http:\/\/earthenginepartners.appspot.com\/science-2013-global-forest\/download_v1.7.html)\n  - [OurCodingClub JavaScript based Tutorial](https:\/\/ourcodingclub.github.io\/tutorials\/earth-engine\/#import)\n  - [Google Tutorial](https:\/\/developers.google.com\/earth-engine\/tutorial_forest_01)\n  - [Depricated Google Tutorial](https:\/\/sites.google.com\/site\/earthengineapidocs\/tutorials\/global-forest-change-tutorial\/palettes-and-masking-with-an-introduction-to-javascript-methods-and-variables)","918aee17":"# Using earthpy\n\n## Resources\n- [EarthDataScience Tutorial](https:\/\/www.earthdatascience.org\/courses\/scientists-guide-to-plotting-data-in-python\/plot-spatial-data\/customize-raster-plots\/interactive-maps\/)\n- [EarthPy Docs](https:\/\/earthpy.readthedocs.io\/en\/latest\/gallery_vignettes\/plot_bands_functionality.html#sphx-glr-gallery-vignettes-plot-bands-functionality-py)","afad4792":"# Hagi Guide (Medium)\nhttps:\/\/towardsdatascience.com\/a-quick-introduction-to-google-earth-engine-c6a608c5febe","0cc62e41":"# Set Up"}}