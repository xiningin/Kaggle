{"cell_type":{"4370a2ac":"code","a5522831":"code","8839e02e":"code","e36824ec":"code","669849ce":"code","75a4b123":"code","baf8c80f":"code","4c3e3a39":"code","1c248da9":"code","3b41d3ad":"code","5355cd22":"code","c43dca4a":"code","7bd8e22d":"code","363a338c":"code","b4233663":"code","7c4579fa":"code","0b0b10e2":"code","a05e9213":"markdown","ca0ba660":"markdown"},"source":{"4370a2ac":"import numpy as np \nimport pandas as pd \nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score\nfrom collections import Counter\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Activation, MaxPooling1D, Dropout, Flatten, Reshape, Dense, Conv1D\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport os\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a5522831":"#reading in the dataset as a Pandas dataframe variable\ndf = pd.read_csv('\/kaggle\/input\/final-opcodes\/all_data.csv')\ndf\n#this dataset has a lot of extra columns we do not need(File Name, Total Opcodes, mov, push, call...)","8839e02e":"#the families we are classifying\nprint(df.Family.unique())","e36824ec":"#here we are deleting the extra unecessary columns\ndf = df.loc[:, df.columns != 'Total Opcodes']\ndf = df.loc[:, df.columns != 'File Name']\n\n#this is our labels for training\nlabels = np.asarray(df[['Family']].copy())\n\n#encoding the labels to numbers\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nlabels = le.fit_transform(labels)\n\n#removing more unecessary columns\nfor i in range(31):\n    df = df.drop(df.columns[1], axis=1)\n    \n    \n#this is our training data\nopcode_sequence = (df.drop(df.columns[0], axis=1))\nopcode_sequence","669849ce":"#normalizing the data\nfrom sklearn import preprocessing\nnormalized_X = preprocessing.normalize(opcode_sequence)\nopcode_sequence = normalized_X\nopcode_sequence\n","75a4b123":"#the shape of the data right now\nprint(opcode_sequence.shape)\n","baf8c80f":"#the 1D CNN CONV1D input layer needs to take in a shape of a 3 by 1 array so we reshape it\nopcode_sequence = tf.reshape(opcode_sequence, (9725, 1000, 1))\nprint(opcode_sequence.shape)","4c3e3a39":"#plot the accuracy and the validation accuracy\ndef plot_acc(h):\n    plt.plot(h.history['accuracy'])\n    plt.plot(h.history['val_accuracy'])\n\n    plt.title('model accuracy')\n    plt.ylabel('accuracy and loss')\n    plt.xlabel('epoch')\n\n    plt.legend(['acc', 'val acc' ], loc='upper left')\n    plt.show()","1c248da9":"#plot the loss and validation loss\ndef plot_loss(h):\n    plt.plot(h.history['loss'])\n    plt.plot(h.history['val_loss'])\n    plt.title('model loss')\n    plt.ylabel('accuracy and loss')\n    plt.xlabel('epoch')\n\n    plt.legend(['loss', 'val loss' ], loc='upper left')\n    plt.show()","3b41d3ad":"\nmodel = Sequential()\n#the shape of the input is (9725, 1000, 1), where there are 9725 training samples and each training sample has 1k features\nmodel.add(Conv1D(filters= 16, kernel_size=8, activation ='relu',strides = 2, padding = 'valid', input_shape= (1000, 1))) #not sure about a good filter\/kernel size\nmodel.add(Conv1D(filters= 16, kernel_size=8, activation ='relu',strides = 2, padding = 'valid'))\nmodel.add(Dense(128*4)) #not sure what number to use\nmodel.add(Activation('relu'))\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\nmodel.add(Flatten())\nmodel.add(Dense(21)) #for 21 families\nmodel.add(Activation('softmax'))\nopt = keras.optimizers.Adam(learning_rate=0.001)\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","5355cd22":"model.summary()","c43dca4a":"#now to train the model:\nhistory = model.fit(opcode_sequence, labels, epochs = 30, validation_split = 0.1, batch_size = 64, shuffle = True)\n","7bd8e22d":"#plot the acc and loss graphs\nplot_acc(history)\nplot_loss(history)","363a338c":"def calc_conv1d_out(self, l_in, padding, dilation, kernel_size, stride):\n        return int(((l_in + 2 * padding - dilation * (kernel_size - 1) - 1) \/ stride) + 1)","b4233663":"#another model I am testing out\n\n\nmodel = Sequential()\n\nmodel.add(Conv1D(filters= 32, kernel_size=16, activation ='relu',strides = 2, padding = 'valid', input_shape= (1000, 1)))\n\nmodel.add(Conv1D(filters= 32, kernel_size=8, activation ='relu',strides = 2, padding = 'valid'))\n\noutput2 = calc_conv1d_out(1000, 32, 2, 1, 8, 2)\n\nmodel.add(Dense(output2))\nmodel.add(Dense(128*4))\n\n\nmodel.add(Dense(128))\nmodel.add(Flatten())\n\nmodel.add(Dense(21)) #for 21 families\nmodel.add(Activation('softmax'))\n\n#print(output2)\n\nopt = keras.optimizers.Adam(learning_rate=0.0001)\n\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()\n","7c4579fa":"history = model.fit(opcode_sequence, labels, epochs = 30, validation_split = 0.1, batch_size = 64, shuffle = True)","0b0b10e2":"plot_acc(history)\nplot_loss(history)","a05e9213":"We are now done preprocessing our dataset and ready to start training the models","ca0ba660":"Below are a few more models I am experimenting with"}}