{"cell_type":{"776a73e1":"code","1c029c39":"code","cf9d4063":"code","1c80c96c":"code","26379516":"code","c09a1109":"code","373e6589":"code","e46a286d":"code","4400ad19":"code","e7251232":"code","4a556114":"code","23a7f248":"code","8ef9257f":"code","aecb8520":"code","7564f6e9":"code","c3555198":"code","5000ee14":"code","f8c41269":"code","bcedb3bc":"code","40f2c9d0":"code","dbc48b47":"code","0fda082c":"code","b41ddd95":"code","f03a55fd":"code","3a236ae0":"code","42d1eabf":"code","c0ea1165":"code","fb494693":"code","5e51cad3":"code","8c43fd0d":"code","779e0e35":"code","c9130ff4":"code","2bfea9d6":"code","99802782":"code","8b7c9f1f":"code","03fb901c":"code","022d46d2":"code","61685569":"code","80eb4c49":"code","13320869":"code","2c0cf672":"code","a03de7c0":"code","be686bf3":"code","a7d35c28":"markdown","9dd51e66":"markdown"},"source":{"776a73e1":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","1c029c39":"# read the csv file \nadmission_df=pd.read_csv('..\/input\/graduate-admissions\/Admission_Predict.csv')","cf9d4063":"admission_df.head()","1c80c96c":"# Let's drop the serial no.\nadmission_df.drop('Serial No.',axis=1 , inplace=True)\nadmission_df","26379516":"admission_df\n","c09a1109":"# checking the null values\nadmission_df.isnull().sum()","373e6589":"# Check the dataframe information\nadmission_df.info()","e46a286d":"# Statistical summary of the dataframe\nadmission_df.describe()","4400ad19":"# Grouping by University ranking \ndf_university=admission_df.groupby(by='University Rating').mean()","e7251232":"df_university","4a556114":"admission_df.hist(bins=30 , figsize=(20,20))","23a7f248":"sns.pairplot(admission_df)","8ef9257f":"\ncorr_matrix =admission_df.corr()\nplt.figure(figsize=(12,12))\nsns.heatmap(corr_matrix , annot=True)\nplt.show()","aecb8520":"admission_df.columns","7564f6e9":"X = admission_df.drop(columns = ['Chance of Admit '])","c3555198":"y = admission_df['Chance of Admit ']","5000ee14":"X.shape","f8c41269":"y.shape","bcedb3bc":"y","40f2c9d0":"X = np.array(X)\ny = np.array(y)","dbc48b47":"y= y.reshape(-1,1)\ny.shape","0fda082c":"# scaling the data before training the model\nfrom sklearn.preprocessing import StandardScaler , MinMaxScaler\nscaler_x = StandardScaler()\nX = scaler_x.fit_transform(X)","b41ddd95":"\nscaler_y = StandardScaler()\ny = scaler_y.fit_transform(y)","f03a55fd":"# spliting the data in to test and train sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X , y, test_size= 0.15)","3a236ae0":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, accuracy_score","42d1eabf":"LinearRegression_model = LinearRegression()\nLinearRegression_model.fit(X_train, y_train)","c0ea1165":"accuracy_LinearRegression = LinearRegression_model.score(X_test, y_test)\naccuracy_LinearRegression","fb494693":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Dense, Activation, Dropout\nfrom tensorflow.keras.optimizers import Adam\n","5e51cad3":"ANN_model = keras.Sequential()\nANN_model.add(Dense(50, input_dim = 7))\nANN_model.add(Activation('relu'))\nANN_model.add(Dense(150))\nANN_model.add(Activation('relu'))\nANN_model.add(Dropout(0.5))\nANN_model.add(Dense(150))\nANN_model.add(Activation('relu'))\nANN_model.add(Dropout(0.5))\nANN_model.add(Dense(50))\nANN_model.add(Activation('linear'))\nANN_model.add(Dense(1))\nANN_model.compile(loss = 'mse', optimizer = 'adam')\nANN_model.summary()","8c43fd0d":"ANN_model.compile(optimizer='Adam', loss='mean_squared_error')","779e0e35":"epochs_hist = ANN_model.fit(X_train, y_train, epochs = 100, batch_size = 20, validation_split = 0.2)","c9130ff4":"result = ANN_model.evaluate(X_test, y_test)\naccuracy_ANN = 1 - result\nprint(\"Accuracy : {}\".format(accuracy_ANN))","2bfea9d6":"epochs_hist.history.keys()","99802782":"plt.plot(epochs_hist.history['loss'])\nplt.title('Model Loss Progress During Training')\nplt.xlabel('Epoch')\nplt.ylabel('Training Loss')\nplt.legend(['Training Loss'])","8b7c9f1f":"# Decision tree builds regression or classification models in the form of a tree structure. \n# Decision tree breaks down a dataset into smaller subsets while at the same time an associated decision tree is incrementally developed. \n# The final result is a tree with decision nodes and leaf nodes.\n# Great resource: https:\/\/www.saedsayad.com\/decision_tree_reg.htm\n\nfrom sklearn.tree import DecisionTreeRegressor\nDecisionTree_model = DecisionTreeRegressor()\nDecisionTree_model.fit(X_train, y_train)","03fb901c":"accuracy_DecisionTree = DecisionTree_model.score(X_test, y_test)\naccuracy_DecisionTree","022d46d2":"from sklearn.ensemble import RandomForestRegressor\nRandomForest_model = RandomForestRegressor(n_estimators=100, max_depth = 10)\nRandomForest_model.fit(X_train, y_train)","61685569":"accuracy_RandomForest = RandomForest_model.score(X_test, y_test)\naccuracy_RandomForest","80eb4c49":"y_predict = LinearRegression_model.predict(X_test)\nplt.plot(y_test, y_predict, '^', color = 'r')","13320869":"y_predict_orig = scaler_y.inverse_transform(y_predict)\ny_test_orig = scaler_y.inverse_transform(y_test)","2c0cf672":"plt.plot(y_test_orig, y_predict_orig, '^', color= 'r')","a03de7c0":"k = X_test.shape[1]\nn = len(X_test)\nn","be686bf3":"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nfrom math import sqrt\n\nRMSE = float(format(np.sqrt(mean_squared_error(y_test_orig, y_predict_orig)),'.3f'))\nMSE = mean_squared_error(y_test_orig, y_predict_orig)\nMAE = mean_absolute_error(y_test_orig, y_predict_orig)\nr2 = r2_score(y_test_orig, y_predict_orig)\nadj_r2 = 1-(1-r2)*(n-1)\/(n-k-1)\n\nprint('RMSE =',RMSE, '\\nMSE =',MSE, '\\nMAE =',MAE, '\\nR2 =', r2, '\\nAdjusted R2 =', adj_r2) \n","a7d35c28":"**** THIS WAS FROM AN COURSERA GUIDED PROJECT WHICH I HAD UNDERTAKEN ****","9dd51e66":"PROJECT LINK:https:\/\/www.coursera.org\/projects\/machine-learning-university-admission"}}