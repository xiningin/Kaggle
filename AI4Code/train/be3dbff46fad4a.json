{"cell_type":{"d5f016bb":"code","f6646cc8":"code","7bede0a2":"code","62ff0280":"code","daf7e43a":"code","545d96b0":"code","cca92f6f":"code","810ccae5":"code","a4295ec1":"code","e8a339e2":"code","9099f97f":"code","914b7926":"code","fa4377ca":"code","8934bd81":"code","9704b207":"code","8ec8cbea":"code","721ba3cb":"code","512530ad":"code","72c360ec":"code","38dde8c5":"code","69ccf8df":"code","558d3593":"code","0882564f":"code","cecb7de6":"code","1d520af3":"code","5452ae44":"code","90a8b43a":"code","5ad1843d":"code","816960fa":"code","cafb2286":"code","190e2ffb":"code","eca25329":"code","1b77d227":"code","c0b6a237":"code","cbc6163d":"code","ec69e1d7":"code","18e9286b":"code","c9530260":"code","ed113420":"code","556dc90e":"code","f25e7c81":"code","16c44d97":"code","ccf3e6db":"code","4cf35689":"code","3ba5ef7e":"code","186390c2":"code","0ef70f15":"code","d507a516":"code","d15a9736":"code","ca011d9c":"code","64f6e8c3":"code","f05b1a1b":"code","40844afd":"code","19748741":"code","d2812cce":"code","da508a29":"code","9fb4a111":"code","0427fd8d":"code","56070c95":"code","c2c3f8c8":"code","ffefe0fc":"code","80d8d9a5":"code","477be76f":"code","53b4ead7":"code","f06f88fc":"code","c01d75c5":"code","18226193":"code","38b863fe":"code","46200a9d":"code","e8fd2c79":"code","07b32f23":"code","ee2da20a":"code","474f602b":"code","505eae96":"code","83c30107":"code","410f1dff":"code","469b3781":"code","1aceaf96":"code","f6aac076":"code","f18b8508":"code","a3d99d85":"code","3cdf5954":"code","1cb9ef82":"markdown","a7bddaf6":"markdown","d5e9cc8c":"markdown","627e6131":"markdown","e8cf79d9":"markdown","8c5a47f3":"markdown","4cddcdef":"markdown","f3f8ad2e":"markdown","70b21d13":"markdown","70bd79fc":"markdown","40aa88d9":"markdown","2a63f83e":"markdown","ee9dda0c":"markdown","52ab42fa":"markdown","006da0ce":"markdown","486beca0":"markdown","bfa94f52":"markdown"},"source":{"d5f016bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6646cc8":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D","7bede0a2":"center_info = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/fulfilment_center_info.csv')\nmeal_info = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/meal_info.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/test.csv')\ntrain_data = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/train.csv')","62ff0280":"center_info","daf7e43a":"meal_info","545d96b0":"test_data","cca92f6f":"train_data","810ccae5":"merge1 = pd.merge(train_data, center_info, how='inner', on='center_id')","a4295ec1":"merge1","e8a339e2":"df = pd.merge(merge1, meal_info, how='inner', on='meal_id')","9099f97f":"df","914b7926":"df.describe()","fa4377ca":"df = df.sort_values(by=['week'])","8934bd81":"df","9704b207":"for i in df.columns:\n    print(i)\n    print('Unique Values: '+str(len(df.groupby([i]).count())))\n    print(df[i].value_counts())","8ec8cbea":"num_cols=['center_id',\n 'meal_id',\n 'checkout_price',\n 'base_price',\n 'emailer_for_promotion',\n 'homepage_featured',\n 'num_orders',\n 'city_code',\n 'region_code',\n 'op_area']","721ba3cb":"colors=['#b84949', '#ff6f00', '#ffbb00', '#9dff00', '#329906', '#439c55', '#67c79e', '#00a1db', '#002254', '#5313c2', '#c40fdb', '#e354aa']","512530ad":"ts_tot_orders = df.groupby(['week'])['num_orders'].sum()\nts_tot_orders = pd.DataFrame(ts_tot_orders)\nts_tot_orders","72c360ec":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nplot_data = [\n    go.Scatter(\n        x=ts_tot_orders.index,\n        y=ts_tot_orders['num_orders'],\n        name='Time Series for num_orders',\n        marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",http:\/\/localhost:8888\/notebooks\/Kaggle_for_timepass\/hackathon\/Sigma-thon-master\/Sigma-thon-master\/eda1.ipynb#\n    )\n]\nplot_layout = go.Layout(\n        title='Total orders per week',\n        yaxis_title='Total orders',\n        xaxis_title='Week',\n        plot_bgcolor='rgba(0,0,0,0)'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","38dde8c5":"center_id = df.groupby(['center_id'])['num_orders'].sum()\ncenter_id = pd.DataFrame(center_id)","69ccf8df":"center_id=center_id.reset_index()","558d3593":"import plotly.express as px\nfig = px.bar(center_id, x=\"center_id\", y=\"num_orders\", color='center_id')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\n\nfig.show()","0882564f":"meal_id = df.groupby(['meal_id'])['num_orders'].sum()\nmeal_id = pd.DataFrame(meal_id)","cecb7de6":"meal_id=meal_id.reset_index()","1d520af3":"import plotly.express as px\nfig = px.bar(meal_id, x=\"meal_id\", y=\"num_orders\")\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\n\nfig.show()","5452ae44":"cat_var = ['center_type',\n 'category',\n 'cuisine']","90a8b43a":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nfor i in cat_var:\n    grp=df.groupby([i])\n    grp=pd.DataFrame(grp)\n    lis=grp[0]\n    x=0\n    for j in lis:\n        print(i)\n        print(j)\n        data = df[df[i]==j]\n        data = pd.DataFrame(data)\n        tot_orders = data.groupby(['week'])['num_orders'].sum()\n        tot_orders = pd.DataFrame(tot_orders)\n        plot_data = [\n            go.Scatter(\n                x=tot_orders.index,\n                y=tot_orders['num_orders'],\n                name='Time Series for num_orders for '+str(j),\n                marker = dict(color = colors[x%12])\n                #x_axis=\"OTI\",\n                #y_axis=\"time\",\n            )\n        ]\n        plot_layout = go.Layout(\n                title='Total orders per week for '+str(j),\n                yaxis_title='Total orders',\n                xaxis_title='Week',\n                plot_bgcolor='rgba(0,0,0,0)'\n            )\n        fig = go.Figure(data=plot_data, layout=plot_layout)\n        x+=1\n        pyoff.iplot(fig)","5ad1843d":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nfor i in cat_var:\n    grp=df.groupby([i])\n    grp=pd.DataFrame(grp)\n    lis=grp[0]\n    x=0\n    plot_data=[]\n    for j in lis:\n        print(i)\n        print(j)\n        data = df[df[i]==j]\n        data = pd.DataFrame(data)\n        tot_orders = data.groupby(['week'])['num_orders'].sum()\n        tot_orders = pd.DataFrame(tot_orders)\n       \n        plot_data.append(go.Scatter(\n                x=tot_orders.index,\n                y=tot_orders['num_orders'],\n                name=str(j),\n                #marker = dict(color = colors[x%12])\n                #x_axis=\"OTI\",\n                #y_axis=\"time\",\n            ))\n        \n        x+=1\n    plot_layout = go.Layout(\n            title='Total orders per week for '+str(i),\n            yaxis_title='Total orders',\n            xaxis_title='Week',\n            plot_bgcolor='rgba(0,0,0,0)'\n        )\n    fig = go.Figure(data=plot_data, layout=plot_layout)\n    pyoff.iplot(fig)","816960fa":"corrmat = df.corr()\nfig = plt.figure(figsize = (12, 9))\n\nsns.heatmap(corrmat, vmax = .8, square = True, annot = True)\nplt.show()","cafb2286":"center_type = df.groupby(['center_type'])['num_orders'].sum()\ncenter_type = pd.DataFrame(center_type)","190e2ffb":"center_type","eca25329":"center_type=center_type.reset_index()","1b77d227":"import plotly.express as px\nfig = px.bar(center_type, x=\"center_type\", y=\"num_orders\", color='center_type')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\n\nfig.show()","c0b6a237":"category = df.groupby(['category'])['num_orders'].sum()\ncategory = pd.DataFrame(category)","cbc6163d":"category = category.reset_index()","ec69e1d7":"import plotly.express as px\nfig = px.bar(category, x=\"category\", y=\"num_orders\", color='category')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\nfig.show()","18e9286b":"cuisine = df.groupby(['cuisine'])['num_orders'].sum()\ncuisine = pd.DataFrame(cuisine)","c9530260":"cuisine = cuisine.reset_index()","ed113420":"import plotly.express as px\nfig = px.bar(cuisine, x=\"cuisine\", y=\"num_orders\", color='cuisine')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\nfig.show()","556dc90e":"cat_ct=df.groupby(['category', 'center_type'])['num_orders'].sum()","f25e7c81":"cat_ct = cat_ct.unstack().fillna(0)\ncat_ct","16c44d97":"# Visualize this data in bar plot\nax = (cat_ct).plot(\nkind='bar',\nfigsize=(10, 7),\ngrid=True\n)\nax.set_ylabel('Count')\nplt.show()","ccf3e6db":"cat_cu=df.groupby(['category', 'cuisine'])['num_orders'].sum()\ncat_cu = cat_cu.unstack().fillna(0)\ncat_cu","4cf35689":"# Visualize this data in bar plot\nax = (cat_cu).plot(\nkind='bar',\nfigsize=(10, 7),\ngrid=True\n)\nax.set_ylabel('Count')\nplt.show()","3ba5ef7e":"ct_cu=df.groupby(['center_type', 'cuisine'])['num_orders'].sum()\nct_cu = ct_cu.unstack().fillna(0)\nct_cu","186390c2":"# Visualize this data in bar plot\nax = (ct_cu).plot(\nkind='bar',\nfigsize=(10, 7),\ngrid=True\n)\nax.set_ylabel('Count')\nplt.show()","0ef70f15":"x = df['num_orders']\ny = df['checkout_price']\n\nplt.scatter(x, y)\nplt.show()","d507a516":"x = df['num_orders']\ny = df['base_price']\n\nplt.scatter(x, y)\nplt.show()","d15a9736":"x = df['num_orders']\ny = df['emailer_for_promotion']\n\nplt.scatter(x, y)\nplt.show()","ca011d9c":"x = df['num_orders']\ny = df['homepage_featured']\n\nplt.scatter(x, y)\nplt.show()","64f6e8c3":"df_=df.copy()","f05b1a1b":"for i in cat_var:\n    df_[i] = pd.factorize(df_[i])[0]","40844afd":"import seaborn as seabornInstance \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn import metrics\n%matplotlib inline","19748741":"X = df_.drop(['num_orders'], axis=1).values\ny = df_['num_orders'].values","d2812cce":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","da508a29":"lr = LinearRegression()  \nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint('Root Mean Squared Error for LinearRegression:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","9fb4a111":"#Trying to plot them all at once\nfrom matplotlib import pyplot\npyplot.figure(figsize=(17, 8))\npyplot.plot(y_test, label=\"actual\")\npyplot.plot(y_pred, color='red', label=\"predicted\")\npyplot.legend(loc='best')\n#pyplot.plot(predictions, color='red')\npyplot.show()","0427fd8d":"knn = KNeighborsRegressor()  \nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint('Root Mean Squared Error for knn:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","56070c95":"#Trying to plot them all at once\nfrom matplotlib import pyplot\npyplot.figure(figsize=(17, 8))\npyplot.plot(y_test, label=\"actual\")\npyplot.plot(y_pred, color='red', label=\"predicted\")\npyplot.legend(loc='best')\n#pyplot.plot(predictions, color='red')\npyplot.show()","c2c3f8c8":"dt = DecisionTreeRegressor()  \ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\nprint('Root Mean Squared Error for DecisionTree:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","ffefe0fc":"#Trying to plot them all at once\nfrom matplotlib import pyplot\npyplot.figure(figsize=(17, 8))\npyplot.plot(y_test, label=\"actual\")\npyplot.plot(y_pred, color='red', label=\"predicted\")\npyplot.legend(loc='best')\n#pyplot.plot(predictions, color='red')\npyplot.show()","80d8d9a5":"from sklearn.ensemble import RandomForestRegressor ","477be76f":"regressor = RandomForestRegressor(n_estimators = 100, random_state = 0) ","53b4ead7":"regressor.fit(X_train, y_train)","f06f88fc":"print('Root Mean Squared Error for rf:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","c01d75c5":"#Trying to plot them all at once\nfrom matplotlib import pyplot\npyplot.figure(figsize=(17, 8))\npyplot.plot(y_test, label=\"actual\")\npyplot.plot(y_pred, color='red', label=\"predicted\")\npyplot.legend(loc='best')\n#pyplot.plot(predictions, color='red')\npyplot.show()","18226193":"import xgboost as xgb","38b863fe":"from sklearn.metrics import auc, accuracy_score, confusion_matrix, mean_squared_error","46200a9d":"xgb_model = xgb.XGBRegressor(objective=\"reg:linear\", random_state=42)\n\nxgb_model.fit(X_train, y_train)\n\ny_pred = xgb_model.predict(X_test)\n\nmse=mean_squared_error(y_test, y_pred)\n\nprint(np.sqrt(mse))","e8fd2c79":"#Trying to plot them all at once\nfrom matplotlib import pyplot\npyplot.figure(figsize=(17, 8))\npyplot.plot(y_test, label=\"actual\")\npyplot.plot(y_pred, color='red', label=\"predicted\")\npyplot.legend(loc='best')\n#pyplot.plot(predictions, color='red')\npyplot.show()","07b32f23":"xgb.plot_importance(xgb_model)","ee2da20a":"training = df.loc[:, ['id', 'week', 'center_id', 'meal_id', 'checkout_price', 'base_price',\n       'emailer_for_promotion', 'homepage_featured', 'num_orders']] ","474f602b":"training","505eae96":"X_train = training.drop(['num_orders'], axis=1).values\ny_train = training['num_orders'].values","83c30107":"X_test = test_data.values","410f1dff":"xgb_model = xgb.XGBRegressor(objective=\"reg:linear\", random_state=42)\n\nxgb_model.fit(X_train, y_train)\n\ny_pred = xgb_model.predict(X_test)","469b3781":"ypred = pd.DataFrame(y_pred)","1aceaf96":"predictions = pd.merge(test_data, ypred, left_index=True, right_index=True, how='inner')","f6aac076":"predictions['num_orders'] = predictions[0]","f18b8508":"predictions = predictions.drop([0], axis=1)","a3d99d85":"ts_tot_pred = predictions.groupby(['week'])['num_orders'].sum()\nts_tot_pred = pd.DataFrame(ts_tot_pred)","3cdf5954":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nplot_data = [\n    go.Scatter(\n        x=ts_tot_orders.index,\n        y=ts_tot_orders['num_orders'],\n        name='Time Series for num_orders',\n        marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=ts_tot_pred.index,\n        y=ts_tot_pred['num_orders'],\n        name='Predicted',\n        marker = dict(color = 'Red')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    )\n    \n]\nplot_layout = go.Layout(\n        title='Total orders per week',\n        yaxis_title='Total orders',\n        xaxis_title='Week',\n        plot_bgcolor='rgba(0,0,0,0)'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","1cb9ef82":"Clearly xgb has shown the best performance, so we will consider this model to predict the future demands","a7bddaf6":"Checkout_price, base_price show negative correlation while emailer_promotion and homepage_feature show positive correlation with num_orders.","d5e9cc8c":"Converting Categorical data to numerical","627e6131":"Understanding the performence of the model by comparing actual and predicted values.","e8cf79d9":"Analysis of 'num_orders' with categorical data","8c5a47f3":"Our objective is to forcast the demand after day 145.","4cddcdef":"Result of Our model:","f3f8ad2e":"Overlapped graphs for comparision","70b21d13":"Implementing XGB on the required dataset.","70bd79fc":"EDA","40aa88d9":"Feature Importance","2a63f83e":"A bivariate plot between few numrical variables with num_orders.","ee9dda0c":"First we split out train and test data within our original dataset, train_data or df.","52ab42fa":"Predictive Modeling using Regression Methods ","006da0ce":"Importing Data","486beca0":"combining predicted data with test data to form a singe data frame for plotting time series wise.","bfa94f52":"Bivariate analysis of Categorical data"}}