{"cell_type":{"acc2a44b":"code","3f49a43f":"code","993a0978":"code","6875520a":"code","6db90092":"code","00d9ac0e":"code","c21869e9":"code","197ed43f":"code","823e1280":"code","1deb012b":"code","b6adb781":"code","4d42f962":"code","721174f0":"code","41b838b5":"code","6ca3d0b2":"code","4e9c5a5d":"code","029c09e5":"code","4cc994e1":"code","76a91e9e":"code","b3c7d8ac":"code","b36a8be1":"code","c875a78d":"code","73eadddd":"code","0dab017e":"code","f6c36445":"code","8f5540ab":"code","eb1c7916":"code","cde3256d":"code","66561cc2":"code","47c3be76":"code","d1325709":"code","f79781b9":"code","befd882d":"code","b9181363":"code","f21feb88":"code","60677d4c":"code","c30568e9":"code","716a6b85":"code","db55f35b":"code","8a31da40":"code","1a4d05e2":"code","1feab53c":"markdown","db711440":"markdown","fea8d94d":"markdown","7843d293":"markdown","05ab5b1d":"markdown","5cf942df":"markdown","4c189690":"markdown","318cae54":"markdown","6353bdf4":"markdown","ce2138aa":"markdown","5a9bfe19":"markdown","15d7e4ed":"markdown","bfb79221":"markdown","adec744a":"markdown","395bf8fd":"markdown","bf406961":"markdown","905a1b15":"markdown","beeac3f8":"markdown","1725e0fe":"markdown","d1739baf":"markdown","615c8120":"markdown","4284a533":"markdown","ef542fce":"markdown","c7987573":"markdown","ac11f2a9":"markdown","84b622a1":"markdown","21bfe8fa":"markdown","d6c1cee0":"markdown","9ca44da6":"markdown","48e4a26c":"markdown","796a071f":"markdown","6493150e":"markdown","930229f7":"markdown","938498b0":"markdown","50ca10e3":"markdown","bd4a4c69":"markdown","759fde3b":"markdown","91781b1a":"markdown","15cb8ad8":"markdown","5db0a4d0":"markdown","f482e452":"markdown"},"source":{"acc2a44b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","3f49a43f":"sns.set(color_codes=True)\npal = sns.color_palette(\"viridis\", 10)\nsns.set_palette('muted')","993a0978":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')","6875520a":"train.head(20)","6db90092":"train.info()","00d9ac0e":"train.isnull().sum()","c21869e9":"train['country'].value_counts()","197ed43f":"train['store'].value_counts()","823e1280":"train['product'].value_counts()","1deb012b":"#Before getting into EDA and vizualizations its better to handle the Date column.\ntrain['date'] = pd.to_datetime(train['date'], format = \"%Y-%m-%d\")\ntest['date'] = pd.to_datetime(test['date'], format = \"%Y-%m-%d\")\n\n\ntrain['year'] = train['date'].apply(lambda x: x.year)\ntrain['month'] = train['date'].apply(lambda x: x.month)\ntrain['day'] = train['date'].apply(lambda x: x.day)\n\ntest['year'] = test['date'].apply(lambda x: x.year)\ntest['month'] = test['date'].apply(lambda x: x.month)\ntest['day'] = test['date'].apply(lambda x: x.day)","b6adb781":"train","4d42f962":"series = train.groupby(['country']).num_sold.sum()\nprint(series.to_string())\nsns.barplot(x = series.index, y = series.values)\nplt.title('Sales per country')\nplt.xlabel('country')\nplt.ylabel('No. of Sales')\n","721174f0":"plt.pie(series.values, labels = series.index,  autopct='%0.1f%%')\nplt.title('Sales share per country')\n","41b838b5":"sns.kdeplot(x = train['num_sold'], hue = train['country'])\nplt.title('Desity plot')\nplt.show()","6ca3d0b2":"plt.figure(dpi = 100)\nsns.boxplot(x = train['country'], y = train['num_sold'])\nplt.title('Boxplot of sales per country')\nplt.show()","4e9c5a5d":"series = train.groupby('store').num_sold.sum()\nplt.pie(series.values, labels = series.index,  autopct='%0.2f%%')\nplt.title('Store Sales')\nplt.show()","029c09e5":"sns.kdeplot(train['num_sold'], hue = train['store'])\nplt.title('Density plot of Store sales')\nplt.show()","4cc994e1":"plt.figure(dpi = 100)\nsns.boxplot(y = train['num_sold'], x = train['store'])\nplt.title('Boxplot of sales per stores')\nplt.show()","76a91e9e":"train.groupby(['country','store']).num_sold.sum()","b3c7d8ac":"fig = plt.figure(figsize  = (12,10)) \ncountries = ['Finland', 'Norway', 'Sweden']\nfor i in range(3):\n    series = train[train['country'] == countries[i]].groupby('store').num_sold.sum()\n    ax = fig.add_subplot(2,2,i+1)\n    ax.pie(series.values, labels = series.index,  autopct='%0.2f%%')\n    ax.title.set_text(f'Store Sales Share in {countries[i]}')","b36a8be1":"series = train.groupby('product').num_sold.sum()\nplt.pie(series.values, labels = series.index,  autopct='%0.2f%%')\nplt.title('Sales Share of various Products')\nplt.show()","c875a78d":"plt.figure(dpi = 100)\nsns.boxplot(y = train['num_sold'], x = train['product'])\nplt.title('Boxplot of sales per Product')\nplt.show()","73eadddd":"fig = plt.figure(figsize  = (12,10)) \ncountries = ['Finland', 'Norway', 'Sweden']\nfor i in range(3):\n    series = train[train['country'] == countries[i]].groupby('product').num_sold.sum()\n    ax = fig.add_subplot(2,2,i+1)\n    ax.pie(series.values, labels = series.index,  autopct='%0.2f%%')\n    ax.title.set_text(f'Product Sales Share in {countries[i]}')","0dab017e":"fig = plt.figure(figsize  = (12,10)) \n\nrand =221\nseries = train[train['store'] == 'KaggleRama'].groupby('product').num_sold.sum()\nax1 = fig.add_subplot(221)\nax1.pie(series.values, labels = series.index,  autopct='%0.2f%%')\nax1.title.set_text(f'Product Sales Share in KaggleRama')\n\nseries = train[train['store'] == 'KaggleMart'].groupby('product').num_sold.sum()\nax2 = fig.add_subplot(222)\nax2.pie(series.values, labels = series.index,  autopct='%0.2f%%')\nax2.title.set_text(f'Product Sales Share in KaggleMart')\n","f6c36445":"fig = plt.figure(figsize  = (20,13)) \nyear = 2015\nfor i in range(4):\n    ax = fig.add_subplot(2,2,i+1)\n    ax.plot(train[train['year']==year]['date'], train[train['year']==year]['num_sold'])\n    ax.title.set_text(f'Sales Trend in {year}')\n    ax.set_ylabel('Sales')\n    ax.set_xlabel('Date')\n    year+=1","8f5540ab":"df = pd.DataFrame(train.groupby(['country','year','month']).num_sold.mean()).reset_index()\nfig = plt.figure(figsize  = (20,13)) \nyear = 2015\nfor i in range(4):\n    ax = fig.add_subplot(2,2,i+1)\n    ax.plot(df[(df['year']==year) & (df['country']=='Norway')]['month'], df[(df['year']==year) & (df['country']=='Norway')]['num_sold'], label = 'Norway')\n    ax.plot(df[(df['year']==year) & (df['country']=='Sweden')]['month'], df[(df['year']==year) & (df['country']=='Sweden')]['num_sold'], label = 'Sweden')\n    ax.plot(df[(df['year']==year) & (df['country']=='Finland')]['month'], df[(df['year']==year) & (df['country']=='Finland')]['num_sold'], label = 'Finland')\n    ax.title.set_text(f'Avg Monthly Sales Trend in {year}')\n    ax.set_ylabel('Average Sales')\n    ax.set_xlabel('Month')\n    ax.legend()\n    year+=1","eb1c7916":"df = pd.DataFrame(train.groupby(['product','year','month']).num_sold.mean()).reset_index()\nfig = plt.figure(figsize  = (20,13)) \nyear = 2015\nfor i in range(4):\n    ax = fig.add_subplot(2,2,i+1)\n    ax.plot(df[(df['year']==year) & (df['product']=='Kaggle Hat')]['month'], df[(df['year']==year) & (df['product']=='Kaggle Hat')]['num_sold'], label = 'Kaggle Hat')\n    ax.plot(df[(df['year']==year) & (df['product']=='Kaggle Mug')]['month'], df[(df['year']==year) & (df['product']=='Kaggle Mug')]['num_sold'], label = 'Kaggle Mug')\n    ax.plot(df[(df['year']==year) & (df['product']=='Kaggle Sticker')]['month'], df[(df['year']==year) & (df['product']=='Kaggle Sticker')]['num_sold'], label = 'Kaggle Sticker')\n    ax.title.set_text(f'Avg Monthly Sales by Product {year}')\n    ax.set_ylabel('Average Sales')\n    ax.set_xlabel('Month')\n    ax.legend()\n    year+=1","cde3256d":"df = pd.DataFrame(train.groupby(['product','country','month']).num_sold.mean()).reset_index()\nfig = plt.figure(figsize  = (20,13)) \ncountries = ['Finland', 'Norway', 'Sweden']\nfor i in range(3):\n    ax = fig.add_subplot(2,2,i+1)\n    ax.plot(df[(df['country']==countries[i]) & (df['product']=='Kaggle Hat')]['month'], df[(df['country']==countries[i]) & (df['product']=='Kaggle Hat')]['num_sold'], label = 'Kaggle Hat')\n    ax.plot(df[(df['country']==countries[i]) & (df['product']=='Kaggle Mug')]['month'], df[(df['country']==countries[i]) & (df['product']=='Kaggle Mug')]['num_sold'], label = 'Kaggle Mug')\n    ax.plot(df[(df['country']==countries[i]) & (df['product']=='Kaggle Sticker')]['month'], df[(df['country']==countries[i]) & (df['product']=='Kaggle Sticker')]['num_sold'], label = 'Kaggle Sticker')\n    ax.title.set_text(f'Avg Monthly Sales by Product in {countries[i]}')\n    ax.set_ylabel('Average Sales')\n    ax.set_xlabel('Month')\n    ax.legend()","66561cc2":"df = pd.DataFrame(train.groupby(['year','month','day']).num_sold.mean()).reset_index()\nfig = plt.figure(figsize=(25, 40))\nmonth = 1\nmonths = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\nfor i in range(12):\n    ax = fig.add_subplot(6,2,i+1)\n    for y in range(2015,2019):\n        ax.plot(df[(df['year'] == y) & (df['month'] == month)]['day'], df[(df['year'] == y) & (df['month'] == month)]['num_sold'], label = str(y))\n    ax.title.set_text(f'Sales trends in {months[i]}')\n    ax.set_ylabel('Average Sales')\n    ax.set_xlabel('Days of Month')\n    ax.legend()\n    month+=1","47c3be76":"#adding a column weekday which contains integers, 0 means Monday and 6 means Sunday\ntrain['weekday'] = train['date'].apply(lambda x: x.weekday())\ntest['weekday'] = test['date'].apply(lambda x: x.weekday())","d1325709":"fig = plt.figure(figsize=(16,13))\nseries = train.groupby('weekday').num_sold.mean()\nax1 = fig.add_subplot(121)\nax1.bar(x = series.index, height = series.values)\nax1.title.set_text(f'Sales trends in Weak Overall')\nax1.set_ylabel('Average Sales')\nax1.set_xlabel('Days of Weak')\n    \nseries = train.groupby('weekday').num_sold.mean()\ndays_of_weak = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\nax2 = fig.add_subplot(122)\nax2.pie(series.values, labels = [days_of_weak[i] for i in series.index], autopct = '%0.1f%%')\nax2.title.set_text(f'Sales Share per Days of Weak')","f79781b9":"fig = plt.figure(figsize=(16,13))\nseries = train[train['product']=='Kaggle Hat'].groupby('weekday').num_sold.mean()\nax1 = fig.add_subplot(221)\nax1.bar(x = series.index, height = series.values)\nax1.title.set_text(f'Sales trends in Weak for Hat')\nax1.set_ylabel('Average Sales')\nax1.set_xlabel('Days of Weak')\n    \nseries = train[train['product']=='Kaggle Mug'].groupby('weekday').num_sold.mean()\nax2 = fig.add_subplot(222)\nax2.bar(x = series.index, height = series.values)\nax2.title.set_text(f'Sales trends in weak for Mug')\nax2.set_ylabel('Average Sales')\nax2.set_xlabel('Days of Weak')\n    \nseries = train[train['product']=='Kaggle Sticker'].groupby('weekday').num_sold.mean()\nax3 = fig.add_subplot(223)\nax3.bar(x = series.index, height = series.values)\nax3.title.set_text(f'Sales trends in weak for Sticker')\nax3.set_ylabel('Average Sales')\nax3.set_xlabel('Days of Weak')","befd882d":"fig = plt.figure(figsize=(16,13))\nseries = train[train['country']=='Norway'].groupby('weekday').num_sold.mean()\nax1 = fig.add_subplot(221)\nax1.bar(x = series.index, height = series.values)\nax1.title.set_text(f'Sales trends in Weak in Norway')\nax1.set_ylabel('Average Sales')\nax1.set_xlabel('Days of Weak')\n    \nseries = train[train['country']=='Sweden'].groupby('weekday').num_sold.mean()\nax2 = fig.add_subplot(222)\nax2.bar(x = series.index, height = series.values)\nax2.title.set_text(f'Sales trends in weak in Sweden')\nax2.set_ylabel('Average Sales')\nax2.set_xlabel('Days of Weak')\n    \nseries = train[train['country']=='Finland'].groupby('weekday').num_sold.mean()\nax3 = fig.add_subplot(223)\nax3.bar(x = series.index, height = series.values)\nax3.title.set_text(f'Sales trends in weak in Finland')\nax3.set_ylabel('Average Sales')\nax3.set_xlabel('Days of Weak')","b9181363":"fig = plt.figure(figsize=(16,13))\nseries = train[train['store']=='KaggleRama'].groupby('weekday').num_sold.mean()\nax1 = fig.add_subplot(221)\nax1.bar(x = series.index, height = series.values)\nax1.title.set_text(f'Sales trends in Weak for KaggleRama')\nax1.set_ylabel('Average Sales')\nax1.set_xlabel('Days of Weak')\n    \nseries = train[train['store']=='KaggleMart'].groupby('weekday').num_sold.mean()\nax2 = fig.add_subplot(222)\nax2.bar(x = series.index, height = series.values)\nax2.title.set_text(f'Sales trends in weak for KaggleMart')\nax2.set_ylabel('Average Sales')\nax2.set_xlabel('Days of Weak')\n    ","f21feb88":"train_df = train.drop(['row_id','date','year'],axis = 1)\ntest_df = test.drop(['row_id','date','year'],axis = 1)\ncountry_dict = {\n    'Finland':1,\n    'Sweden' :2,\n    'Norway' :3\n}\nstore_dict = {\n    'KaggleMart':1,\n    'KaggleRama':2\n}\nproduct_dict = {\n    'Kaggle Sticker':1,\n    'Kaggle Mug':2,\n    'Kaggle Hat':3\n}\n\ncountry_list = []\nstore_list = []\nproduct_list = []\nfor i in train_df.index:\n    country_list.append(country_dict[train_df['country'][i]])\n    store_list.append(store_dict[train_df['store'][i]])\n    product_list.append(product_dict[train_df['product'][i]])\n\ntrain_df['country'] = country_list\ntrain_df['store'] = store_list\ntrain_df['product'] = product_list\n\n\ncountry_list = []\nstore_list = []\nproduct_list = []\nfor i in test_df.index:\n    country_list.append(country_dict[test_df['country'][i]])\n    store_list.append(store_dict[test_df['store'][i]])\n    product_list.append(product_dict[test_df['product'][i]])\n\ntest_df['country'] = country_list\ntest_df['store'] = store_list\ntest_df['product'] = product_list\n  \n\ntrain_df.head()","60677d4c":"train_cols = [col for col in train_df.columns if col!='num_sold']\nX = train_df[train_cols]\ny = train_df['num_sold']","c30568e9":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, train_size = 0.8, random_state = 42)","716a6b85":"from xgboost import XGBRegressor","db55f35b":"def smape(true, preds):\n    return 1\/len(true) * np.sum(2 * np.abs(preds-true) \/ (np.abs(true) + np.abs(preds))*100)","8a31da40":"xgb = XGBRegressor(eval_metric = 'mape', random_state = 42)\nxgb.fit(x_train, y_train)\npreds = xgb.predict(x_test)\n\nscore = smape(y_test, preds)\nprint(score)\npred_df = pd.DataFrame({'True value': y_test, 'Predicted value':preds})\npred_df.head(40)","1a4d05e2":"# Baseline submission getting ready\npreds = xgb.predict(test_df)\nsubmission_df = pd.DataFrame({'row_id':test['row_id'],'num_sold':preds})\nsubmission_df.to_csv('submit_baseline.csv', index = False)","1feab53c":"* There is a similar trend but different peaks, that means the weakdays are affecting trends.\n* There is a great chance that during **weekends** the sales go up and vice versa","db711440":"* Similar trend for all products Constant on **Monday** to **Thursday**\n* Little Growth on **Friday**\n* Peak on **Saturday-Sunday**","fea8d94d":"## Exploratory Data Analysis","7843d293":"## 1. Preparing Data for training","05ab5b1d":"## 5. What is the seasonaity Trend ?","5cf942df":"### 4.3 Product Sales per Store","4c189690":"## Date preprocessing","318cae54":"## 2. Training baseline XGBoost regressor","6353bdf4":"* Sales distribution is slightly **right skewed** in all 3 countries\n* Like number of sales Norway has the highest median here too","ce2138aa":"### 5.3 Seasonal trend in Products\n","5a9bfe19":"### Almost similar trends in all countries as Overall trend","15d7e4ed":"### The data is equally distributed for every country, product and store per date.","bfb79221":"### 7.4 Weakly trends in Different Stores","adec744a":"### Model tuning\/selection is loading.....\n### Don't forget to upvote \ud83d\ude0a","395bf8fd":"## 7. Adding new Feature (Day of the weak)","bf406961":"### 3.1 Exploring overall Store Sales","905a1b15":"### Norway clearly has the best sales and Finland has the worst.","beeac3f8":"### 4.2 Product Sales per Country","1725e0fe":"### 4.1 Overall Product sales","d1739baf":"### 7.2 Weekly trends of Various Products","615c8120":"### 5.2 Let's explore Average Sales Per Month trend","4284a533":"### 3.2 Which is the Best Selling Store in each country?","ef542fce":"* Clearly we can see that there's a significant difference in average sales at 5,6 i.e **Saturday** and **Sunday**","c7987573":"### 7.1 Exploring weakly trends","ac11f2a9":"* No Difference at all other than no. of sales, the trend is same. Store doesn't impacts the weakly trend.","84b622a1":"* Sales follow **same trends** every year in all countries.\n* Sweden And Finland trends are mores similar than that of Norway.\n* Global peaks come at the end of year **December**, new year and in **April**","21bfe8fa":"## Model Training","d6c1cee0":"## 6. Monthly Trends in Sales?","9ca44da6":"* Same weakly trend in every Country, Country doesn't impact on weakend sales.","48e4a26c":"## 2. Let's Check the sales distribution","796a071f":"* All years have similar trends in products. Just varying 1 month forward or backward sometime.\n* **Hats** Peak in **April** and **December** and has minmum sales in **September-October**.\n* **Mugs** Peak in **December** and the sales dips in **July-August**.\n* **Stickers** follow almost **same sales through out** the Year irrespective of country, store etc.","6493150e":"### 6.1 Over all trend of every month","930229f7":"* No null values.\n* Only **2 numerical columns**.\n* row_id is just an unique id refering to each row.\n* date column spans from **1st jan 2015** to **31st Dec 2018**. \n* There are **2 stores** namely ***KaggleMart*** and ***KaggleRama***.\n* There are **3 products** in order every 3 rows i.e. ***Mug, Hat, Sticker***.\n* There are 3 countries namely ***Norway, Sweden, Finland***\n* ***num_sold*** is our dependent variable","938498b0":"## 1. Which countries buys most ?","50ca10e3":"### 7.3 Weakly trends in Countries","bd4a4c69":"* Kaggle Hat is the most popular and Sticker is least.","759fde3b":"## 3. Which Store has the most sales?","91781b1a":"* ***Hat*** is the **most dominant** product irrespective of store or region. Dominating More than half of sales\n* ***Countrywise*** Product Sales Ratio is **similar** to Global Sales ratio.\n* ***Storewise*** Product Sales Ratio is **similar** to Global Sales ratio.","15cb8ad8":"* Can't really interpret clearly, but we can see sales shoot up in mid **April-May** and in Holidays season of **December**.\n* We can see some local peaks that can be **weekend sales**","5db0a4d0":"## 4. Exploring Product Sales","f482e452":"### 5.1 Yearly Sales Trend"}}