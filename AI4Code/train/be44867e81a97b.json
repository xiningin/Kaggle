{"cell_type":{"6123327c":"code","4377ee1f":"code","4e8ba068":"code","63e579b7":"code","97b1bae2":"code","d55bcc19":"code","ff7dbbac":"code","e1bdf66f":"code","a8cbd938":"code","5552481b":"code","d303afb8":"code","8fda9a8a":"code","68230d8f":"code","e9075ebc":"markdown"},"source":{"6123327c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4377ee1f":"#import libraries separate from the one kaggle already gave\nfrom dateutil.relativedelta import relativedelta\nimport datetime as dt","4e8ba068":"#g is games, p is for plays, and plyrs is for player data\ng = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/games.csv')\np = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv')\nplyrs = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/players.csv')","63e579b7":"#compile weekly game data into a single data frame\nfile_name = '\/kaggle\/input\/nfl-big-data-bowl-2021\/week{}.csv'\ngame_list = []\nfor i in range(1,18):\n    game_list.append(pd.read_csv(file_name.format(i)))\n\ndf = pd.concat(game_list)\ndf.head()","97b1bae2":"#convert relevant datetime variables\ndf['time'] = pd.to_datetime(df.time, format='%Y-%m-%dT%H:%M:%S.%f%z')\nplyrs['birthDate'] = pd.to_datetime(plyrs['birthDate'],format= '%Y-%m-%d',infer_datetime_format=True)\ng['gameDate'] = pd.to_datetime(g.gameDate, format = '%Y-%m-%d',infer_datetime_format=True)\ng['gameTimeEastern'] = pd.to_datetime(g.gameDate, format = '%H:%M:%S',infer_datetime_format=True)","d55bcc19":"#create a current date variable to calculate age for players\nplyrs['current_date'] = dt.date.today()\nplyrs['current_date'] = pd.to_datetime(plyrs.current_date,format= '%Y-%m-%d')\nplyrs.head()","ff7dbbac":"#create age variable in years\nplyrs['age'] = plyrs.current_date - plyrs.birthDate\nplyrs['age'] = plyrs.age \/ np.timedelta64(1,'Y')\nplyrs.head()","e1bdf66f":"p.head()","a8cbd938":"p.isnull().sum()","5552481b":"g.isnull().sum()","d303afb8":"plyrs.isnull().sum()","8fda9a8a":"df.isnull().sum()","68230d8f":"df.head()","e9075ebc":"Hypothesis: A good defense is capable of controlling the offense and the flow of game. Therefore, if a defense can keep the opposing team from converting first downs and slowing them down in an efficient manner for the offense to recover from their play and that will lead to more scoring drives for the defensive team's offense. The target variable will be a denile in first downs. Once we get a baseline model we can build out further metrics and enrich the data set.\n\nTarget Variable:\n* First Down Conversion\/Touchdown: {Y:1,N:0}\n\nPlan of action:\n- Initial data investigation\n    - Asher will create a mask to view the players' geospatial location throughout the game\n    - Define variables and see what is categorical (ordinal\/nominal) or numerical\n- Data Cleansing\n    - Convert relevant variables\n    - Format them to be consumable in model\n- Feature Engineering\n    - Impute null angle and direction values by taking starting x,y and ending x,y and distance to infer those values\n        - could be done for speed an acceleration as well\n    - "}}