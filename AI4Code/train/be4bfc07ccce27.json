{"cell_type":{"bb2c4f79":"code","71835a02":"code","8feb84ed":"code","a5701e87":"code","da696222":"code","797af849":"code","4dffb7c5":"code","8aecf7e0":"code","a6412312":"code","ae01a5b5":"code","fc479620":"code","03beba00":"code","0738852e":"code","94030f48":"code","49df2a23":"code","79cca826":"code","08fff688":"markdown","215285a0":"markdown","5f6ddbbf":"markdown","f14d4a70":"markdown","0d1f724e":"markdown","fe8da941":"markdown"},"source":{"bb2c4f79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","71835a02":"train = pd.read_csv(\"..\/input\/alta-2019-challenge\/train.csv\")","8feb84ed":"train.head()","a5701e87":"len(train)","da696222":"from collections import Counter\ncounter = Counter()\nfor i, row in train.iterrows():\n    if type(row['Prediction']) != str:\n        print('WARNING:', row)\n        continue\n    counter.update(row['Prediction'].split())\nprint(counter.most_common(50))","797af849":"import nltk\ndef baseline_pronouns(text):\n    tokens = nltk.word_tokenize(text)\n    pos = nltk.pos_tag(tokens)\n    result = [w.lower() for w, t in pos if t in ['PRP', 'PRP$']]\n    if len(result) == 0:\n        result =['OUTSIDE']\n    return \" \".join(set(result))","4dffb7c5":"baseline_pronouns(\"You think it's bad now, as I recall with \")","8aecf7e0":"def dice(predicted, target):\n    # This implementation of DICE should be equivalent to Kaggle's Mean F score (but I haven't tested it)\n    p = set(predicted.split())\n    t = set(target.split())\n    return len(p & t)\/(len(p) + len(t))","a6412312":"from sklearn.model_selection import KFold\nkf = KFold(n_splits=10)\nfolds_evaluation = []\nfor i_train, i_test in kf.split(train):\n    evaluation = []\n    for i in i_test:\n        row = train.iloc[i]\n        prediction = baseline_pronouns(row['Comment'])\n        if type(row['Prediction']) != str:\n            print(\"WARNING:\", row)\n            continue\n        evaluation.append(dice(prediction, row['Prediction']))\n    print(\"Evaluation results:\", np.mean(evaluation))\n    folds_evaluation.append(np.mean(evaluation))\nprint(\"Cross-validation result:\", np.mean(folds_evaluation))","ae01a5b5":"from sklearn.model_selection import KFold\nkf = KFold(n_splits=10)\nfolds_evaluation = []\nfor i_train, i_test in kf.split(train):\n    evaluation = []\n    for i in i_test:\n        row = train.iloc[i]\n        prediction = 'OUTSIDE'\n        if type(row['Prediction']) != str:\n            print(\"WARNING:\", row)\n            continue\n        evaluation.append(dice(prediction, row['Prediction']))\n    print(\"Evaluation results:\", np.mean(evaluation))\n    folds_evaluation.append(np.mean(evaluation))\nprint(\"Cross-validation result:\", np.mean(folds_evaluation))","fc479620":"test_baseline_pronouns = pd.read_csv(\"..\/input\/alta-2019-challenge\/test_noannotations.csv\")\ntest_baseline_pronouns.head()","03beba00":"test_baseline_pronouns['Prediction'] = test_baseline_pronouns['Comment'].apply(baseline_pronouns)\ntest_baseline_pronouns.head()","0738852e":"test_baseline_pronouns[['ID', 'Prediction']].to_csv('test_baseline_pronouns.csv', index=False)","94030f48":"test_baseline_outside = pd.read_csv(\"..\/input\/alta-2019-challenge\/test_noannotations.csv\")\ntest_baseline_outside['Prediction'] = 'OUTSIDE'\ntest_baseline_outside.head()","49df2a23":"test_baseline_outside[['ID', 'Prediction']].to_csv('test_baseline_outside.csv', index=False)","79cca826":"ls","08fff688":"Let's compare with a system that always returns 'OUTSIDE'","215285a0":"Based on this, let's write a baseline that does this:\n1. Return all personal and possessive pronouns\n2. If there are no pronouns, return OUTSIDE","5f6ddbbf":"Let's now evaluate using the training data. We will perform cross-validation with 10 folds.","f14d4a70":"Let's output the most common target words","0d1f724e":"* [Download test_baseline_pronouns.csv](test_baseline_pronouns.csv)\n* [Download test_baseline_outside.csv](test_baseline_outside.csv)","fe8da941":"Let's now generate runs of these two baselines"}}