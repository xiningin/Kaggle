{"cell_type":{"dd6fec41":"code","0fdf3ca0":"code","7e347ae6":"code","47463be8":"code","68e1efbc":"code","ad13f855":"code","d6ce3a53":"code","871632b9":"code","06528314":"code","96b7cbd4":"code","5c15fcf9":"code","a0c4d4cd":"code","96fd2575":"code","a20a87c0":"code","476c0c54":"code","d5c9bcaf":"code","e964e9e8":"code","4d30eb6f":"code","cdad8787":"code","975fe045":"code","b128e543":"code","7bb2cde2":"code","7321d96b":"code","ab81ca25":"code","4c4cd89e":"code","dfa77471":"code","d19dbca3":"code","b66c1296":"code","a90426cc":"code","dd427dc1":"code","f135b6c7":"code","a21f4fa6":"code","7f845efc":"code","1ea87e92":"code","e7a7d1ba":"code","df15690a":"code","35bbf646":"code","19da1197":"code","9b10e30d":"code","009be809":"code","89b3a72c":"code","9bd88b1a":"code","fb3882c6":"code","6fa92647":"code","4090c8cb":"code","ff49708f":"code","7ba318f2":"code","3e466123":"code","2ea4639c":"code","f17153a0":"code","d81aeaec":"markdown","06eaf266":"markdown","47e33950":"markdown","8791f3ec":"markdown","3a30a403":"markdown","9b3891d9":"markdown","fcf0c720":"markdown","4ecdcffa":"markdown","63ff1c83":"markdown","1da0c344":"markdown","95058930":"markdown","d07ea573":"markdown","c4bfb3cd":"markdown","9534aa6e":"markdown","a52a6073":"markdown","7d4e319f":"markdown","fd9c6374":"markdown","82edb2f4":"markdown","a308a6d8":"markdown","831eca34":"markdown","9254aa0e":"markdown","c6a48758":"markdown","4d6ce004":"markdown","39dadbe7":"markdown","17e7958a":"markdown","46eb03c5":"markdown","ff994740":"markdown","15279407":"markdown","224be7f8":"markdown","5dc656a1":"markdown","df07f1ad":"markdown","23e70781":"markdown","fe0a25ba":"markdown","75da6217":"markdown","30f1b97b":"markdown","8e607f10":"markdown","e079b6c5":"markdown","eef56611":"markdown","85819a75":"markdown","b63dfc0c":"markdown","47cd9d66":"markdown","e7d4a19b":"markdown","d87b7137":"markdown","b3e042bf":"markdown","d9bcb9e9":"markdown","4a5f7db5":"markdown","5400e0ff":"markdown","8b747fda":"markdown","33eba664":"markdown"},"source":{"dd6fec41":"from IPython.display import HTML\nHTML('<center><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/3HJtmx5f1Fc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/center>')","0fdf3ca0":"import os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns","7e347ae6":"with open('..\/input\/hashcode-drone-delivery\/busy_day.in') as file:\n    line_list = file.read().splitlines()","47463be8":"len(line_list)","68e1efbc":"line_list[:4]","ad13f855":"first_section = line_list[0].split()\nfirst_section","d6ce3a53":"second_section = line_list[1].split()\nsecond_section","871632b9":"third_section = line_list[2].split()\nlen(third_section)","06528314":"third_section[:10]","96b7cbd4":"fourth_section = line_list[3].split()\nfourth_section","5c15fcf9":"fifth_section = line_list[4].split()\nfifth_section","a0c4d4cd":"sixth_section = line_list[5].split()\nlen(sixth_section)","96fd2575":"seventh_section = line_list[6].split()\nseventh_section","a20a87c0":"eightth_section = line_list[7].split()\nlen(eightth_section)","476c0c54":"order_section = line_list[24].split()\norder_section","d5c9bcaf":"first_order_delivered = line_list[25].split()\nfirst_order_delivered","e964e9e8":"first_order_items = line_list[26].split()\nfirst_order_items","4d30eb6f":"len(line_list)","cdad8787":"# Products\nweights = line_list[2].split()\nproducts_df = pd.DataFrame({'weight': weights})\n\nwh_count = int(line_list[3])\nwh_endline = (wh_count*2)+4\n\nwh_invs = line_list[5:wh_endline+1:2]\nfor i, wh_inv in enumerate(wh_invs):\n    products_df[f'wh{i}_inv'] = wh_inv.split()\n\nproducts_df = products_df.astype(int)\n\n# Warehouses\nwh_locs = line_list[4:wh_endline:2]\nwh_rows = [wl.split()[0] for wl in wh_locs]\nwh_cols = [wl.split()[1] for wl in wh_locs]\n\nwarehouse_df = pd.DataFrame({'wh_row': wh_rows, 'wh_col': wh_cols}).astype(np.uint16)\n\n# Orders\norder_locs = line_list[wh_endline+1::3]\no_rows = [ol.split()[0] for ol in order_locs]\no_cols = [ol.split()[1] for ol in order_locs]\n\norders_df = pd.DataFrame({'row': o_rows, 'col': o_cols})\n\norders_df[orders_df.duplicated(keep=False)].sort_values('row')\n\norders_df['product_count'] = line_list[wh_endline+2::3]\n\norder_array = np.zeros((len(orders_df), len(products_df)), dtype=np.uint16)\norders = line_list[wh_endline+3::3]\nfor i,ord in enumerate(orders):\n    products = [int(prod) for prod in ord.split()]\n    order_array[i, products] = 1\n\ndf = pd.DataFrame(data=order_array, columns=['p_'+ str(i) for i in range(400)], \n                    index=orders_df.index)\n\norders_df = orders_df.astype(np.uint16).join(df)","975fe045":"products_df.head()","b128e543":"warehouse_df.head()","7bb2cde2":"orders_df.head()","7321d96b":"len(orders_df)","ab81ca25":"chart_opts = {'width': 500,\n              'xlabel': \"Total Demand\",\n              'ylabel': \"Count of Products\"}\n\nimport holoviews as hv\nfrom holoviews import dim, opts\nhv.extension('bokeh')\n\ncounts = orders_df.product_count \\\n                  .value_counts() \\\n                  .sort_index() \\\n                  .reset_index()\nhv.Bars(counts).opts(**chart_opts)","4c4cd89e":"supply = products_df.drop(columns='weight').sum(axis=1)\nsupply\n\ndemand = orders_df.loc[:, orders_df.columns.str.contains(\"p_\")].sum()\ndemand\n\nsurplus = supply.to_numpy() - demand.to_numpy()\nprint(np.amin(surplus))\n\n\nfreqs, edges = np.histogram(surplus, 20)\nhv.Histogram((edges, freqs)).opts(width=600, xlabel=\"surplus\")","dfa77471":"chart_opts = {'width': 500,\n              'xlabel': \"Warehouse\",\n              'ylabel': \"Total Inventory\",\n              'yticks': list(range(0,1801,200))}\n\n\ntotal_prods = products_df.loc[:, products_df.columns.str.contains(\"wh\")].sum()\nhv.Bars(total_prods.value_counts().index).opts(**chart_opts)","d19dbca3":"hv.Distribution(products_df.weight).opts(width=500)","b66c1296":"chart_opts = dict(width=600, height=400, alpha=0.7)\n\ncustomers = hv.Points(orders_df, kdims = ['col', 'row']).opts(**chart_opts)\nwarehouses = hv.Points(warehouse_df, kdims = ['wh_col', 'wh_row']).opts(size=8, **chart_opts)\ncustomers * warehouses","a90426cc":"from scipy.spatial import distance_matrix\nfrom ortools.graph import pywrapgraph\nfrom ortools.constraint_solver import routing_enums_pb2\nfrom ortools.constraint_solver import pywrapcp","dd427dc1":"def list_lines(file_name):\n    \"\"\"Returns a list of integer lists.\"\"\"\n    with open(file_name) as file:\n        lines = file.read().splitlines()\n    line_list = [[int(n) for  n in ll.split()] for ll in lines]\n    return line_list\n\ndef list_lines(file_name):\n    \"\"\"Returns a list of integer lists.\"\"\"\n    with open(file_name) as file:\n        lines = file.read().splitlines()\n    line_list = [[int(n) for  n in ll.split()] for ll in lines]\n    return line_list\n\n\ndef set_params(line_list):\n    top_line = line_list[0]\n    params = {'DRONE_COUNT': top_line[2],\n              'WT_CAP': top_line[4],\n              'END_TIME': top_line[3],\n              }\n    return params\n\n\ndef find_wh_lines(line_list):\n    \"\"\"Provides the dividing line between warehouse and\n    order sections in the line list.\"\"\"\n    wh_count = line_list[3][0]\n    wh_endline = (wh_count*2)+4\n    return wh_endline\n\n\ndef get_weights(line_list):\n    weights = np.array(line_list[2])\n    return weights.astype(np.int16)\n\n\ndef get_inventories(line_list):\n    \"\"\"Returns a 2-d array of P products by W warehouses.\"\"\"\n    wh_endline = find_wh_lines(line_list)\n    invs = line_list[5:wh_endline+1:2]\n    supply = np.array(invs).transpose()\n    return supply.astype(np.int16)\n\n\ndef get_orders(line_list):\n    \"\"\"Returns a 2-d array of P products by C orders.\"\"\"\n    wh_endline = find_wh_lines(line_list)\n    demand = np.zeros((line_list[1][0], line_list[wh_endline][0]),\n                            dtype=np.int16)\n    orders = line_list[wh_endline+3::3]\n    for i,ord in enumerate(orders):\n        for prod in ord:\n            demand[prod, i] += 1\n    return demand.astype(np.int16)\n\n\ndef get_locs(line_list):\n    wh_endline = find_wh_lines(line_list)\n    wh_locs = np.array(line_list[4:wh_endline:2])\n    cust_locs = np.array(line_list[wh_endline+1::3])\n    return wh_locs.astype(np.int16), cust_locs.astype(np.int16)","f135b6c7":"import holoviews as hv\nhv.extension('bokeh')\n\nfiles = ['..\/input\/hashcode-drone-delivery\/busy_day.in']\nline_list = list_lines(files[0])\n\nparams = set_params(line_list)\nsupply = get_inventories(line_list)\ndemand = get_orders(line_list)\nwh_locs, cust_locs = get_locs(line_list)\nweights = get_weights(line_list)","a21f4fa6":"print(params)\n\nfreqs, edges = np.histogram(weights, 20)\nwt_prod = hv.Histogram((edges, freqs)).options(xlabel=\"product weights\"\n                                               ,width=250)\n\norder_weights = (weights.reshape(weights.size, -1)* demand) \\\n                    .sum(axis=0)\nfreqs, edges = np.histogram(order_weights, 20)\nwt_orders = hv.Histogram((edges, freqs)).options(xlabel=\"order weights\",\n                                                 width=400)\n\nsurplus = hv.Curve(supply.sum(axis=1) - demand.sum(axis=1)).options(width=500,\n                                            xlabel='product', ylabel='surplus')\n\ncustomers = hv.Points(np.fliplr(cust_locs)).options(width=600, height=400)\nwarehouses = hv.Points(np.fliplr(wh_locs)).options(size=8, alpha=0.5)\n\ndisplay(hv.Layout(wt_prod+wt_orders).options(shared_axes=False), surplus, \n            customers*warehouses)","7f845efc":"import pandas_profiling as pdp","1ea87e92":"profile_products_df = pdp.ProfileReport(products_df)","e7a7d1ba":"profile_products_df","df15690a":"profile_warehouse_df = pdp.ProfileReport(warehouse_df)","35bbf646":"profile_warehouse_df","19da1197":"profile_orders_df = pdp.ProfileReport(orders_df)","9b10e30d":"profile_orders_df","009be809":"first_line = '10'\nfirst_line","89b3a72c":"second_line = ['0 L 1 2 3']\nsecond_line","9bd88b1a":"third_line = ['0 D 0 0 1']\nthird_line","fb3882c6":"fourth_line = ['1 L 1 2 1']\nfourth_line","6fa92647":"fifth_line = ['1 D 2 2 1']\nfifth_line","4090c8cb":"submission = ''","ff49708f":"submission += ''.join(first_line)\nsubmission += '\\n'\nsubmission += ' '.join(second_line)\nsubmission += '\\n'\nsubmission += ' '.join(third_line)\nsubmission += '\\n'\nsubmission += ' '.join(fourth_line)\nsubmission += '\\n'\nsubmission += ' '.join(fifth_line)\nsubmission += '\\n'","7ba318f2":"submission","3e466123":"sub_file = open(\"submission.csv\", \"w\")\nsub_file.write(submission)\nsub_file.close()","2ea4639c":"sub = pd.read_csv('submission.csv')\nsub.head()","f17153a0":"submission = '2\\n'\nsubmission += '0 L 6 163 1\\n'\nsubmission += '0 D 1 163 1\\n'\n\nsub_file = open(\"submission.csv\", \"w\")\nsub_file.write(submission)\nsub_file.close()\n\nsub = pd.read_csv('submission.csv')\nsub.head()","d81aeaec":"# 5. <a id='5'>Visualization<\/a> ","06eaf266":"Drone `1`: fly to customer 2 and `deliver` on product 2.","47e33950":"<img src='data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxAQDQ0PDxAPDw0ODg8PDg4NDw8NDQ8NFREWFhURFRUYHSggGBolGxUVITEhJSk3MC4uFx8zOD8sOCgtMSsBCgoKDg0OFxAQGisdHx0tKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rLS0rLS0tLS0tKy0tKystLS0tK\/\/AABEIAKgBKwMBIgACEQEDEQH\/xAAbAAACAwEBAQAAAAAAAAAAAAACAwEEBQAGB\/\/EADsQAAIBAwIDBgIIBQQDAQAAAAECAAMEERIhBTFBBhMiUWFxMoEUI0JScpGhsRUlYoLBM1Oi0UNj8DX\/xAAZAQEBAQEBAQAAAAAAAAAAAAABAAIDBAX\/xAAfEQEBAQADAQADAQEAAAAAAAAAARECEiExA0FRQjL\/2gAMAwEAAhEDEQA\/AJCyQsaEhBJ79fLwoLCCxoSEFlpwoLCCxumTohqwrTJCxuiEElpwnTJ0xwSSEhpwnRJCx2iLWqvr+UtWICQgkNGU7Dn7GOCTNpwjRJCSxokhIacJCQgkcEhhIacJCQgkcEhhIacICQgkeEhBIacICQgkeEhinDTiuEhBJYFOEKcNPVXCQgkeKcIU4acICSdEfok6IacJCwgsaEhBIacKCwtEaEhBIa1hISGFjAsIJDTIVpk6Y4LJ0w1rHhQkILGhIQSe3XhwrTCCxoSEEhpwkLCCQLpmTxDGnrtykUa7NsACfaSNCSSux88HaPVPP9IYSGnGaneeR+Yh5q\/cB\/SaISKvK6UaT1ahCoilmJIGw6b9Ydl1JplzjNJvkyH9yJ5ThPHmr3jUu600yzadHiqbZOCDt0M9Nwu\/euHqVKL2lsu9OvdstBKm\/QNv6g7jExOx3CaH8VuFp3JqGgXKlu6WnV1eEBXHxbMTyHKc+X5PmO\/H8Xl2PQo6qP8ATqj3TeCb1fuv+Q\/7no69mV2IwfWUqlEdQD7jM1OWud42M2lcBiBpO564lsJGLQUHIAB9IwJK1SEhIQSOCwgszpwoJCCRyqIwJDWsVwkMJHBIQSGrCQkMJHBIQSGtYSEhBI4JCCQ04SEkinHhJOiGnCO7k6I\/TJ0S04r6JOmP0SdENWEhZISO0SdMNawoLCCxgWFohpwrTO0x2mTplpx4cJIrUiUYLsSNjLYSSKc9XZ4+rHSyrf7mP7mMetpW\/wB7\/gG\/eaYpwgkew6PM9qTVpWF0\/f4YU9iEVDgsAcHpsTvPLdh+J3rU6yW6C7CFGfvbhUdNWrABcHOdPnt859KrWKOGDDUGBDA7gg9IrhnBqFsumggpKW1FV5E4xk\/kJi+3XSeTMYH8Q4mPi4dU\/surNv8AMMcVux8XD73+x7Z\/2eer0SQktoyfx4mp26SkzUjaXBuQQBSrvRpKCTg5ZXY59Jm3Hani15hbeySggYFW7gMytyDCpVAXIydwpnqqXZ+gl9Vr0xruaoqO\/eAOtMsykFdvCfCw8zqPlMXtNd8UpVjTo25ak2NFanTasW8AJzjZMEkb+U48uV16eHHjIVb9mrqvTf8AiV33herRqCmxa4CaFcEDOlVJ1jkMeHrO4J2ZdKlfWQE3FJtmDnOxIDeHAGd\/OYF5Z8RJR7qpUphmwqmoNWrmMLTIA5H7U9DwbiS0KYp1Xq3FTGo1Tp1YPLA5AD3nO2ukx9Ytq2qhSDYbCKpyPtKAD7StVtaZ5ak\/5r+u\/wCswuH8QL2TvT1FqNRTjGGxyO2cfaXl5TJue31ChU7qvkMDhsDJTbPiA3HOU52K8ON+tute0FYL9IoMWZkULVQszq2llAznUDsR0jRVXrkfIz5Tc9lqd5c1K1jXpPUrVKlVKVTId3LFmw2o43YY8IGcctzNjsJ2dqXFOq941+g8HdN9JuaGc6tWBkZHw7ztOeuHL8ePoIrJ94D32\/eZXaLj9raLTNWpu5IRaYNRiBjJ25DcRT9jaQHhu+Kr+C\/rf5zPLdsux12Vt2t6l1ehWdXS7rCq9PVpIZMgbeEg7\/d9THROMe64fc0aqJUFWnpdQyjWobBHUdPaaC1qY5MuPQ5lbs5YNRsbWlVCmrTpKH07qG543ml9GT7q\/kIaupH0hPP8gZYVZy2qZzpH6x4WFpwoJDCxgWEFhpwsLCCRmmSFhpwsJJ0xmmSFhqwvTJ0xumTplpwnTJ0xumFplpwnTO0R2J2mCwrTJAjNMkLAlhZOiM0ydMi8eEhBI4JDCTt2cOpASEEjxThBJdl1ICSdEfonaJdl1J0SdEeEiOI1NFGo3XGB7nlDspx2qVlTLd5UH\/kc7+ar4R+x\/OWu7qeY+csW1vopon3VAPvjf9YzaUvhs2vOdp7Z\/olZ1WkaqIWpghsM\/RSMEHPtznz7g\/GXa8ShUsQr1KgpsjaqLhiQNkbH6+k+t3duKmjJwqsGIxnVjkPSUD2bszefTTQU3W2KmW2Ycm0506th4sZ2mLJXXjLIscOs2RXpqi01qIyLqwfrCpwWVemcdczxHEuxV1dVle47tSBgmitNQR6n4j8wZ7u7qurIVOwOojbfG80nxqPlnI9jvKYbOTz9lwKjbW6inTQVKALrVC\/WagckauZG2N5t0qahRoAVMZUKAqgHfYD3jcA7Rdiv1Sg80LUz\/acD9MR1jPPRhYYWEBCAlowIWEFhgQgIacAFhAQwJIWWnAgQgsICEFhqwIWSFhgSQJIOmTph4nYgQ6ZOIWJOIoOJ2IWJOmCBpnaYzE7EiDE7EZidpkgYk6YYWFpkXlQsMLDAhAS7DABYQWMCyQJaMBpnaYwCTiWrCwsr3VIPgMMhSGAyRuNxmXgsq1h4j\/8AdIy6ZCzOkzppp06dJkle8s+80HJGk526w1LryJI8m8a\/ruPzlxV2EApOdjSq9cEEMCvqvjX8uYncEBBrJqDqStRWVtQ3yGHmOQjalDMPhVhTpFtChS2SxHMnMhfi8FhBYWIQEtc8CBCCyQIQEtOBAhASQJIEtWOAhCcBJAkscBCxOEkSTsTsQgJOJIOJIEnEnEUjEkCTidJIxOxCnSSMScToQEkgCFidOinmgIYEkCEBOOuuIAhASQIQEtGBAkgQsQgJasDiUa\/xN7zRxM+v8be5m+F9FhcmdOnUOnSGYDmQPeLa4UevsIWyLF5OQ9pOJWpXqYAOR7jb9JZRgeRB9jmY2UuxG243+UDEdajxH2\/yJX4jsQsQsScTGrA4kgQpIlqwIEnEKcJasRiEBJkiWrEYk4nQhHRiBJxJkx1YiTJnS0InSZ0dTgJMidLUkTpE6WpOZOYEnMdGMEQhKVhfrVG0u5nnenBCEIAYQgZDBiSIgXK6tORq8ox6gAJlqwzO8zrtXDMQjMCSQVwRj5bwjfjPKPW9XGScRnK8RkrIa5blgD94s1WPMn9ptPXpMBq0sDyyAYlrKi58OVP9JyPyMu+nqyJ00m4Qc7OuPUEGNp8JX7Tk\/hAX\/uWxYyJK5ztnPTHOb9OwpD7IP4st+8soANgAB5AACHZYxrdbjorEf+zA\/featpTcbuFBxjwkn\/EXWv0RwhO5lhaoPWV51dTZl8T4ylBgp5maWqeL7UnNcQntVj2VrW1oreYj5mcGP1Ce0v5h2XUycWA5wAZgce4i6NoHIy7Lq9Ejg7jeHmYHZy5ZgQek3My7CweYWYvMnMewwwGTF5nao9hhmZOZlcVuzTAx1lqxr60Bl3XXxbzOzA1SdU12ZweZ2Ymo+IQaXZYOdBzOzHssFmRmDqkZl2WPnfZNtzmaPaS9anSyhwczz\/CLgruvnNPidYGkWcZwM4mf9Ov+WPZ8Zra1yxxnee0+nqKWpiBtPD9nrlK7P4MBTiaPGziicHE1yglv7Bw+8JunfJI3x5TWS4qMT4jjM8twg\/EZ6HhTZJzM8vpl8Ea7fSBTztjMdd5KkZ6ygD\/Mcf0zaFMENnzmcWsgUzsNR29Zc4fUZag3JzM65fDkCFa3BVtXlA69qr7Sdc8KnaCqauPs5mhb8YfUdR2jeOKXXqalXAJ8p56t2oVWK4yQcQbriwamwB5jE8zcURzB35x4yftW49BeVu9rU3HKP4feH6WVJ8OOUw7S8IUE8xyjKN6O9DcjLA969QAZJ2njeP1VesCpyI+74zldPmJjFvnLjDa93wgjuU9pN9e92yD7xnk+HcSfVjJwOkvXd73jKfuznY1r1PeDTk7bTyHHapaoT5co284ixUDO0xb6ufOU8Vek7OVsZzNDivFu6GQMzznBLrKnflHcYqhqfPrHA9Tw6772mG85ZeoAMmeO4PxEommXrm9LrnOISJvm5GnVDSuNGqeYpXJA3MvC8ymmIxHFLoVMY6Sxb3Xd0QRMxlzGM\/gCwWNV+JYQHG5j6d6O71GYZbwgSyKw7vTFYuV73VTbGxEpUOMMMAxdRsKZm53mbrUkeroXwbHrLDVAOZmHYtsDHXVXURGcvGevrV7wEZEz3vyCdoulV0iKI3laZxeLqUu7tyQQCeWI27cm0JPPRPN1b+p8BBxN2oxNmRvnTOnGizxk9hjvV\/EZvcXtjUCgcs7zD7F0ypqagRljznrLlStPMefL+M8JrKpWQpqZpcGHODxD\/SXzIhcDPOc+O41y+qqf\/pn8M36XJveYVJP5kx\/pm9THhb3m2WBdY1n3gMPCTjpGXH+o0hamxA3PlM1qMKmraiQORh17wjbBlmoW1YAwfKI0nXg\/F5TXLnPonGzxPDqT1iVXIHrGVrVqbeMy5w3iKUiQwwYridfvj5KN47RijVq7gCPoLkFvKUjUUnAOMdY3vyinHizMW43I06NLVzjcKo5ZmEnEKmeW0tHiDbZGJ0l2ObVpBdJYbY5x9tXVlORPOVr1wDp5SqnE6oxgH1hjWvQVXBYgc5TunBB8xKlXiWCPCcnmYdJSzat9J5+Uxy4njyWeD1tJI85o13GNztKYKg+FYi+YvjTnHWWVb4vIRzB2lindEeHfBlS0twoznfHIyf4gAQCvLriODWmp5S2zEBcSilXVuMekl1qc22HTEzdb8adN9t8RDv4tztMutWIHxfnK38THWA8a73Izz5SReTKa5DDljPKPoqem8sOrJus7ZgFt+cWxwdwIIYc5VNizuMric1c5mTTqknCiX0oMcTPrRrXo6mM+mDzmXXtzrxyijQPnLFqlUuECBhSB+UrVeLtjC0xjEqUOKILWnTb4+uYAqqy7H5y7db6pl+NXhdz4CzIAc9I254jUZdIXb1lLhGytk5lxqnpN\/wDX6c\/eKEuKjLhxgDlNLgY3Myw2Zr8G6zTKpQb+ZOP6Zv0vhb3mBbj+Y1Pwz0FIeFoxV5y7H1jQ7TZs4h3FP6wn1h012JHPEzWp9ZF\/eBKhYc\/KYT3dY1+8xgT0lehRILORr9POZ9qgU5dcr09oceWNcuOsytxXJbIAPQxNpdtUfSzYEucS4YKrZprjrtKZ4eAMZ0sJ0ljFl1btqNNdWpuvnDN3SQYDZmDcWzg9SPOShyQNO+ecLdE8aR4oqsdufKdRvWqNgqQDyM1LTh6d3kqCSOflDWggHMBh5Q403+qvcP0i0yjDUMj2lt7t6bDAystPSNSiXJUHy8o7V4BrYsuQo3li1DBNJ0jEx61064AJ+UZ3hwC+QTKQWtWvU0KDt6mVDxJd8AZlC\/qkhV3I9Ia8GeqoZCVwNwZcvxcvp4\/knw1KlZm1bBekitfFfAQGJ6iIqVO5Qo5z0mfa3WKnmM9Yeix6W216NQ5estLxRmXSRv0MzapYpkNt5CJoV2BG2ZUxo3FQsN5TZACCeXlLy8RAIDKPWLuq9NmGBuZmxomsxbTpyAI+lVdesF1KjflHWih8ajgQxO79mPih94AQOnWOr8NBOUfPpKte3KbtuBzhWo07WsmcDnL9Srhc5nnrCqhY4M0jnbBzNzj4zeWV3fM4OBK4rY2I3EtoGwQMCUntHydxMWVqWV84ubrXVJ6dMS9aMSDjlOnTr+XjMcvxX16PgR+rbVyzL5qJgnB2kzoT41z+l98NJIGwl\/hV5ywOZxInRYaFC2UXLv8Aa0y\/bNlTInShrKuGUVDyzKLVCA+86dDl8PH6zU4dUbxrlhnJEO9YgLjwkcwZ06Z6+Stb7ixZcSSmuTpz5GU+M10qL3igZHMrInTU+Jj0LinqGrOD0g3JUHw7b7SZ06zi5cquWXE2UaWGVju8TJbnnoZ06Z5SNS6sU6lOowycACQTTYlVb9Z06P6X7VmoDlkHedxCkukZY5A5Tp0xPGmXSdtQCkkZnpKnFBTpIinxtscTp01tZkxRuLdGVi4Oo7iY9SxYsNE6dMb63Z40bayr096nwS9eIgph6Z8XUTp0pReOMB+J5qHPOWKRqOQy9J06VrPH1aZqxGDkwhVdUPPaTOhPW74Zw\/iTZxmXDd6gyk8xznTpZ6tuK6cNZF7zV4ZKXz8l3nTprazYtpf1ANxD\/ig68506HOaeFx\/\/2Q==' width='640'>\n<h1><center>Hash Code Archive: Drone Delivery - EDA<\/center><h1>\n    \n# 1. <a id='1'>Introduction \ud83c\udccf <\/a>","8791f3ec":"`400`: length of product types weights","3a30a403":"we can check `10` + `10` sections for warehouses. Later, we will look whole list.","9b3891d9":"https:\/\/www.kaggle.com\/shams1\/data-extraction-and-eda","fcf0c720":"The Internet has profoundly changed the way we buy things, but the online shopping of today is likely not the end of that change; the expectations for purchase delivery has gone from a week, to two days, to one day, to same day. What about in just a few hours? With drones, this may be possible, and they\u2019ll bring a whole new fleet of problems to solve with data science.\n\nDrones are\u00ad autonomous, electric vehicles often used to deliver online purchases. Current experiments use flying drones, so they\u2019re never stuck in traffic. As drone technology improves every year, there remains a major issue: how would we manage and coordinate all those drones?","4ecdcffa":"### Simulation","63ff1c83":"## 3.2. Read Each Sections","1da0c344":"In `hashcode_delivery_instructions.pdf`, we know what each section in the file is.","95058930":"Second warehouse is loacated at `234, 599`.","d07ea573":"Later, I'll add this.","c4bfb3cd":"Or you can just add commands to sub.","9534aa6e":"There are `400` different product types.","a52a6073":"https:\/\/www.kaggle.com\/jpmiller\/application-of-google-or-tools","7d4e319f":"## 7.1. File format for Submission","fd9c6374":"There are `1250` orders.","82edb2f4":"# 6. <a id='6'>Pandas Profiling<\/a> ","a308a6d8":"First warehouse is loacated at `113, 179`.","831eca34":"### Warehouse","9254aa0e":"## 3.1. File Format","c6a48758":"### 1.1 Task\n\n- Given a fleet of drones, a list of customer orders and availability of the individual products in warehouses, schedule the drone operations so that the orders are completed as soon as possible.\n","4d6ce004":"`400`: rows - number of rows in the area of the simulation (min:1, max:10000)\n\n`600`: columns - number of rows in the area of the simulation (min:1, max:10000)\n\n`30`: drons - number of drones available (min: 1, max: 1000)\n\n`112993`: turns - this is the simulation of drone delivery, it proceeds in `112993` turns. (min: 1, max: 1000000)\n\n`200` : max payload - maximum load of a drone (min: 1, max: 10000)","39dadbe7":"# 4. <a id='4'>Get Dataframe for each section<\/a> ","17e7958a":"### Order","46eb03c5":"### Product","ff994740":"`10` commands in total.","15279407":"Simillar to sections for warehouses, we can check `1250` + `1250`. ","224be7f8":"Drone `0`: `load` one product 0 at warehouse 0.","5dc656a1":"## 7.2. Making Submission file","df07f1ad":"* https:\/\/www.kaggle.com\/jpmiller\/data-extraction-and-eda","23e70781":"First warehouse stores `400` items. It can contains `0`, so we need to check this list.","fe0a25ba":"we can read `busy_day.in` and see below text format.","75da6217":"# 6. <a id='6'>Data Exploration in Details<\/a> ","30f1b97b":"# 3. <a id='3'>Basic EDA<\/a> ","8e607f10":"## If this kernel is useful, <font color='orange'>please upvote<\/font>!\n- See you next time!","e079b6c5":"First section means `parameters of the simulation`.","eef56611":"Drone `0`: fly to customer 0 and `deliver` on product 0.","85819a75":"For validation, it meets the following criteria.\n\n- No order receives more product items of any type than the number of product items of this type that is specified in the order.\n- All commands for any given drone take at most `T` turns in total, where `T` is the number of turns of the simulation.","b63dfc0c":"I'll just use case in pdf for explanation of submission format.","47cd9d66":"First order to be delivered to `340, 371`.","e7d4a19b":"# 7. <a id='7'>Submission Example<\/a> ","d87b7137":"In this competition, you are given a hypothetical fleet of drones, a list of customer orders, and availability of the individual products in warehouses. Can you schedule the drone operations so that the orders are completed as soon as possible?\n\nWhen flying delivery drones become the norm, scheduling is one of the many problems to be solved. Get a head start\u2014and improve your data science skills at the same time.","b3e042bf":"# 2. <a id='2'>Importing the necessary libraries\ud83d\udcd7<\/a> ","d9bcb9e9":"Drone `1`: fly to warehouse 1 and `load` on product 2.","4a5f7db5":"`1`: parameters of the simulation\n\n`2`: weights of the products available for orders\n\n`3`: warehouses and availability of individual product types\n\n`4`: customer orders","5400e0ff":"`First line` : the number of drone commands(min: 0, max: D x T) - `Q`\n- D: the number of drones\n- T: the duration of the simulation","8b747fda":"There are `10` warehouses.","33eba664":"First order contains `8` items."}}