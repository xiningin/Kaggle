{"cell_type":{"b9c1261f":"code","c137c3f2":"code","26d7abb4":"code","2ee16c80":"code","5de85395":"code","1e140250":"code","d1150690":"code","e87a4ea4":"code","c48235a3":"code","f3d9f46e":"code","ea6640da":"code","df4370f1":"code","3b0b043f":"code","59715c9d":"code","6679c02f":"code","12bb22a1":"code","26b64fa6":"code","579d2b43":"code","57a2c487":"code","d60e9a66":"code","2a5bbbe2":"code","720f53de":"code","09eb45e1":"code","a0352719":"code","d3a14da2":"code","191b6452":"code","3467406d":"code","bd630eaf":"code","816e025e":"code","5c69a7e1":"code","f448b9e2":"code","79c1a8a5":"code","53f133a8":"code","7568687c":"code","d0af1242":"code","8731e475":"code","a21f09ca":"code","d0fc0f82":"code","86cfde97":"code","4ce4b5e3":"code","8b2d87b5":"code","73656985":"code","700020b5":"code","57ff1f04":"code","135c32ae":"code","d4fb84d6":"code","f3a0da5c":"code","ffab1a88":"code","0f53b770":"code","fa36d46d":"code","400147d5":"code","1672722d":"code","c9586b8d":"code","62fe54f0":"code","506f1fc4":"code","fc2c2dbb":"code","26880d22":"code","4e4f269a":"code","11a9b40d":"code","9c1bab2b":"code","d5601172":"code","8da664d0":"code","697adb81":"code","b8dcf799":"code","5b84d2ec":"code","dda2a564":"code","8726dd41":"code","0c4031da":"code","1c868d5f":"code","e35ad657":"code","594097c8":"code","647128f1":"code","3ec04efb":"code","e33d81aa":"code","f3a516fc":"code","00309c81":"code","33267d02":"code","45c55d77":"code","55cf94c2":"code","57e8c08e":"code","db01b0bd":"code","19382f1f":"code","9bda4011":"code","3617a8bf":"code","5ec76af4":"code","d07d0ee2":"code","4b331e8e":"code","c605f728":"code","ab950cb9":"code","34b48666":"code","39f5b518":"code","1f442448":"code","298ba466":"code","de91934f":"code","801c6df8":"code","c5392d19":"code","f7770d02":"code","677cea34":"code","3f7c7116":"code","c5052707":"code","53bec54f":"code","b5ecd703":"code","ff171efa":"code","932d62cb":"code","92a43661":"code","5f4dac6f":"code","939b098c":"code","84cc6705":"code","a2c74b62":"code","8b49f53a":"code","3c9887ac":"code","d8f0ba84":"code","e6fbc2bb":"code","32c11d0c":"code","ade139a8":"code","c89e6357":"code","871e24c0":"code","8e0572b2":"code","18a61db9":"code","cb595357":"code","6e68f5fa":"code","9af9ae3d":"code","d3ddabdf":"code","8184298d":"code","ffd755f6":"code","2e5ccedc":"code","6c7b365b":"code","34b9b59b":"code","543f5bdb":"code","4b96a1e5":"code","2b2ca2cf":"code","b24563f5":"code","ce97bd50":"code","0236dc8a":"code","75175f5e":"code","969ef17d":"code","1a0eee0b":"code","63f5c239":"code","4f9501f3":"code","7f8235aa":"code","a8217545":"code","1fbcc3cb":"code","8914ece9":"code","13c64dad":"code","b378d396":"code","998b595a":"code","87893496":"code","07b9490e":"code","8ba72c3e":"code","e8fe1e09":"code","979b2d47":"code","d93b925e":"code","6e6e3895":"code","3d7de444":"code","4f8f5708":"code","70042d54":"markdown","0f5eeb78":"markdown","9935ec47":"markdown","861106fd":"markdown","45acd60a":"markdown","330c23f2":"markdown","ea573ae4":"markdown","f9e1d882":"markdown","de5f396d":"markdown","e58d15da":"markdown","7826a33a":"markdown","f3e902e5":"markdown","7db49560":"markdown","4615a486":"markdown","eb7b2f3f":"markdown","053205cb":"markdown","acf22a72":"markdown","56b08846":"markdown","0c1c6a4e":"markdown","054d0447":"markdown","3409a4e9":"markdown","b7308b6c":"markdown","f6ec315c":"markdown","f2331f12":"markdown","fb34e4e9":"markdown","36c4992f":"markdown","3deac00c":"markdown","27a04f71":"markdown"},"source":{"b9c1261f":"import matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np","c137c3f2":"plt.plot([2, 4, 6, 8],\n        [4, 8, 12, 16])","26d7abb4":"plt.plot([2, 4, 6, 8],\n        [4, 8, 12, 16], color='red')","2ee16c80":"plt.plot([2, 4, 6, 8],\n        [4, 8, 12, 16])\nplt.xlabel('x', fontsize=15, color='green')   # naming x-axis\nplt.ylabel('2*x', fontsize=15, color='green') # naming y-axis","5de85395":"plt.plot([4, 8, 12, 16]) # means this is y-axis and x-axis its assume as index","1e140250":"x = np.linspace(start = 0, stop = 10, num = 50) # Give value in ascending order","d1150690":"plt.plot(x, np.sin(x))   # (x, y)\nplt.xlabel('x', fontsize=15, color='green')\nplt.ylabel('Sin(x)', fontsize=15, color='green')","e87a4ea4":"plt.tick_params(axis='y',\n               color='red',\n               labelcolor='blue',\n               labelsize='xx-large')","c48235a3":"plt.tick_params(axis='x',\n               bottom=False,\n               labelbottom=False)","f3d9f46e":"plt.plot(x, np.sin(x), label='sin curve')\nplt.xlabel('x', fontsize=15, color='green')\nplt.ylabel('sin(x)', fontsize=15, color='green')\nplt.legend()   # for label\nplt.title('Playing with Plots')  # for title","ea6640da":"plt.plot(x, np.sin(x), label='sin curve')\nplt.xlabel('x', fontsize=15, color='green')\nplt.ylabel('sin(x)', fontsize=15, color='green')\nplt.legend()   # for label\nplt.title('Playing with Plots')  # for title\nplt.xlim(1, 5)  # limit x-axis our paramter","df4370f1":"plt.plot(x, np.sin(x), label='sin curve')\nplt.xlabel('x', fontsize=15, color='green')\nplt.ylabel('sin(x)', fontsize=15, color='green')\nplt.legend()   # for label\nplt.title('Playing with Plots')  # for title\nplt.xlim(1, 5)  # limit x-axis our paramter\nplt.ylim(-1, 0.5)  # limit y-axis our paramter","3b0b043f":"x = np.linspace(start = 0, stop = 10, num = 50)","59715c9d":"plt.plot(x, np.sin(x))","6679c02f":"plt.plot(x, np.sin(x), label='sine curve')\nplt.plot(x, np.cos(x), label='cosine curve')\nplt.legend()\nplt.title('Playing with Plots')","12bb22a1":"plt.plot(x, np.sin(x), label='sine curve', color='green')\nplt.plot(x, np.cos(x), label='cosine curve', color='m')\nplt.legend()\nplt.title('Playing with Plots')","26b64fa6":"random_array = np.random.randn(20)","579d2b43":"plt.plot(random_array,\n        color='green')\nplt.show()","57a2c487":"plt.plot(random_array,\n        color='green',\n        linestyle=':')  # dot style graph\nplt.show()","d60e9a66":"plt.plot(random_array,\n        color='green',\n        linestyle='--') # line style\nplt.show()","2a5bbbe2":"plt.plot(random_array,\n        color='green',\n        linestyle=':')\nplt.show()","720f53de":"plt.plot(random_array,\n        color='green',\n        linestyle='--',\n        linewidth=3)  # line size\nplt.show()","09eb45e1":"plt.plot(random_array,\n        color='green',\n        marker ='d') # diamond shape default size is 6\nplt.show()","a0352719":"plt.plot(random_array,\n        color='green',\n        marker ='d', # diamond shape \n        markersize=10) # changing size of diamond shape\nplt.show()","d3a14da2":"plt.plot(random_array,\n        color='green',\n        marker ='d', # diamond shape \n        markersize=10, # changing size of diamond shape\n        linestyle='None') # Remove the line show only diamond shape\nplt.show()","191b6452":"plt.scatter(range(0, 20),  # Scatter plot\n           random_array,\n           color='green',\n           marker='d')\nplt.show()","3467406d":"fig = plt.figure()\nax = fig.add_axes([0, 0, 1, 1])\nplt.show()","bd630eaf":"type(ax)","816e025e":"# This for comparison between two graphs\nfig = plt.figure()\nax1 = fig.add_axes([0, 0.6, 1, 0.4])\nax2 = fig.add_axes([0, 0, 0.8, 0.4])\nplt.show()","5c69a7e1":"x = np.linspace(start = 0, stop = 10, num = 50)","f448b9e2":"fig = plt.figure()\n\nax1 = fig.add_axes([0, 0.6, 1, 0.4])\nax2 = fig.add_axes([0, 0, 0.8, 0.4])\n\nax1.plot(x, np.sin(x))\nax2.plot(x, np.cos(x))\n\nplt.show()","79c1a8a5":"fig = plt.figure()\n\nax1 = fig.add_axes([0, 0.6, 1, 0.4])\nax2 = fig.add_axes([0, 0, 0.8, 0.4])\n\nax1.plot(x, np.sin(x))\nax1.set_xlabel('x', fontsize=15, color='r')\nax1.set_ylabel('sin(x)', fontsize=15, color='r')\n\nax2.plot(x, np.cos(x))\nax2.set_xlabel('x', fontsize=15, color='r')\nax2.set_ylabel('cos(x)', fontsize=15, color='r')\n\nplt.show()","53f133a8":"# Figure inside another figure\nfig = plt.figure()\nax1 = fig.add_axes([0, 0, 1, 1])\nax2 = fig.add_axes([0.5, 0.5, 0.4, 0.4])\nplt.show()","7568687c":"# Figure inside another figure\nfig = plt.figure(figsize=(8,8))  # change size of the fig\nax1 = fig.add_axes([0, 0, 1, 1])\nax2 = fig.add_axes([0.5, 0.5, 0.4, 0.4])\nplt.show()","d0af1242":"fig = plt.figure(figsize=(8,8))\nax1 = fig.add_subplot(221) # create 2*2 figure and 1 represent no of the figure\nplt.show()","8731e475":"type(ax1)","a21f09ca":"isinstance(ax1, matplotlib.axes._axes.Axes)","d0fc0f82":"fig = plt.figure(figsize=(8,8))\n\nax1 = fig.add_subplot(221) # create 2*2 figure and 1 represent no of the figure\nax1.plot([1, 2, 3, 4],\n        [2, 4, 6, 8])\n\nax2 = fig.add_subplot(222) # create 2*2 figure and 2 represent no of the figure\nax2.plot(x, np.sin(x))","86cfde97":"fig = plt.figure(figsize=(8,8))\n\nax1 = fig.add_subplot(221) # create 2*2 figure and 1 represent no of the figure\nax1.plot([1, 2, 3, 4],\n        [2, 4, 6, 8])\n\nax2 = fig.add_subplot(222) # create 2*2 figure and 2 represent no of the figure\nax2.plot(x, np.sin(x))\n\nax3 = fig.add_subplot(223) # create 2*2 figure and 3 represent no of the figure\nax3.plot(x, np.cos(x))","4ce4b5e3":"fig = plt.figure(figsize=(8,8))\n\nax1 = fig.add_subplot(221) # create 2*2 figure and 1 represent no of the figure\nax1.plot([1, 2, 3, 4],\n        [2, 4, 6, 8])\n\nax2 = fig.add_subplot(222) # create 2*2 figure and 2 represent no of the figure\nax2.plot(x, np.sin(x))\n\nax3 = fig.add_subplot(224) # create 2*2 figure and 4 represent no of the figure\nax3.plot(x, np.cos(x))\n\n","8b2d87b5":"ax1 = plt.subplot2grid((2, 3), (0, 0))\nax1.plot(x, np.sin(x))\nax1.set_label('sine curve')\n\nax2 = plt.subplot2grid((2, 3), (0, 1))\nax2.plot(x, np.cos(x))\nax2.set_label('cosine curve')\n\nax3 = plt.subplot2grid((2, 3), (0, 2), rowspan=2)\nax3.plot([1, 2, 3, 4],\n        [2, 4, 5, 8])\nax3.set_label('straight line')\nax3.yaxis.tick_right()\n\nax4 = plt.subplot2grid((2, 3), (1, 0), colspan=2)\nax4.plot(x, np.exp2(x))\nax4.set_label('exponential curve')","73656985":"# A simple way to get a figure with one set of axes\nfig, ax = plt.subplots()","700020b5":"type(fig)","57ff1f04":"type(ax)","135c32ae":"fig, ax = plt.subplots()\nax.plot([1, 2, 3, 4],\n       [2, 4, 6, 8])","d4fb84d6":"fig, ax = plt.subplots()\nax.plot([1, 2, 3, 4],\n       [2, 4, 6, 8])\nax.text(1, 4, 'Do not distribute',\n       fontsize=30,\n       color='red',\n       ha='left',   # horizontal alignment\n       va='bottom', # vertical alignment\n       alpha=0.5)","f3a0da5c":"fig, ax = plt.subplots()\nax.plot([1, 2, 3, 4],\n       [2, 4, 6, 8])\nax.text(1, 4, 'Do not distribute',\n       fontsize=30,\n       color='red',\n       ha='right',   # horizontal alignment\n       va='top', # vertical alignment\n       alpha=0.5)","ffab1a88":"fig = plt.figure(figsize=(8, 8))\n\nax1 = fig.add_subplot(221)\nax1.plot([1, 2, 3, 4],\n       [2, 4, 6, 8])\nax1.set_label('straight line')\nax1.text(1, 4, 'Do not distribute',\n       fontsize=20,\n       color='red',\n       ha='left',   # horizontal alignment\n       va='bottom', # vertical alignment\n       alpha=0.5)","0f53b770":"fig = plt.figure(figsize=(8, 8))\n\nax1 = fig.add_subplot(221)\nax1.plot([1, 2, 3, 4],\n       [2, 4, 6, 8])\nax1.set_label('straight line')\nax1.text(1, 4, 'Do not distribute',\n       fontsize=20,\n       color='red',\n       ha='left',   # horizontal alignment\n       va='bottom', # vertical alignment\n       alpha=0.5)\n\nax2 = fig.add_subplot(222)\nax2.plot(x, np.sin(x))\n\nax3 = fig.add_subplot(223)\nax3.plot(x, np.cos(x))","fa36d46d":"\nfrom subprocess import check_output\nimport pandas as pd\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\nstock_data = pd.read_csv('..\/input\/matplotlib\/stocks.csv')\nstock_data.head()","400147d5":"stock_data['Date'] = pd.to_datetime(stock_data['Date'])\nstock_data.head()","1672722d":"fig = plt.figure(figsize=(10, 6))\n\nax1 = fig.add_axes([0, 0, 1, 1])\nax2 = fig.add_axes([0.05, 0.65, 0.5, 0.3])","c9586b8d":"fig = plt.figure(figsize=(10, 6))\n\nax1 = fig.add_axes([0, 0, 1, 1])\nax2 = fig.add_axes([0.05, 0.65, 0.5, 0.3])\n\nax1.plot(stock_data['Date'],\n        stock_data['AAPL'],\n        color='green')\nax1.set_title('AAPL vs IBM (inset)')","62fe54f0":"fig = plt.figure(figsize=(10, 6))\n\nax1 = fig.add_axes([0, 0, 1, 1])\nax2 = fig.add_axes([0.05, 0.65, 0.5, 0.3])\n\nax1.plot(stock_data['Date'],\n        stock_data['AAPL'],\n        color='green')\nax1.set_title('AAPL vs IBM (inset)')\n\nax2.plot(stock_data['Date'],\n        stock_data['IBM'],\n        color='blue')","506f1fc4":"fig = plt.figure(figsize=(10, 6))\nfig.suptitle('Stock price comparison 2007-2017', fontsize=20)\n\nax1 = fig.add_subplot(221)\nax1.set_title('MSFT')\nax1.plot(stock_data['Date'],\n        stock_data['MSFT'],\n        color='green')\n\nax2 = fig.add_subplot(222)\nax2.set_title('GOOG')\nax2.plot(stock_data['Date'],\n        stock_data['GOOG'],\n        color='purple')\n\nax3 = fig.add_subplot(223)\nax3.set_title('SBUX')\nax3.plot(stock_data['Date'],\n        stock_data['SBUX'],\n        color='magenta')\n\nax3 = fig.add_subplot(224)\nax3.set_title('CVX')\nax3.plot(stock_data['Date'],\n        stock_data['CVX'],\n        color='orange')","fc2c2dbb":"import matplotlib.patches as patches\nfig, ax = plt.subplots()\nprint(fig)\nprint(ax)\nax.add_patch(     # A patch in matplotlib represents 2D objects\n    patches.Rectangle(\n        (0.1, 0.1),  # (left edge, bottom edge) of rectangle\n        0.5,         # width of the rectangle\n        0.5,         # height of the rectagle\n        fill=False   # not fill with the color\n    )\n)\nplt.show()","26880d22":"fig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\n\nax.add_patch(     # A patch in matplotlib represents 2D objects\n    patches.Rectangle(\n        (0.1, 0.1),  # (left edge, bottom edge) of rectangle\n        0.5,         # width of the rectangle\n        0.5,         # height of the rectagle\n        fill=False   # not fill with the color\n    )\n)\nplt.show()","4e4f269a":"fig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\n\nax.add_patch(     # A patch in matplotlib represents 2D objects\n    patches.Rectangle(\n        (0.1, 0.1),  # (left edge, bottom edge) of rectangle\n        0.5,         # width of the rectangle\n        0.5,         # height of the rectagle\n        facecolor='yellow',\n        edgecolor='green'\n    )\n)\nplt.show()","11a9b40d":"fig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\n\nfor p in [\n    patches.Rectangle((0.1, 0.1), 0.3, 0.6,\n    hatch='.'\n    ),\n    patches.Rectangle((0.5, 0.1), 0.3, 0.6,\n    hatch='\\\\',\n    fill=False\n    )\n]:\n    ax.add_patch(p)\nplt.show()","9c1bab2b":"fig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\n\nfor p in [\n    patches.Rectangle((0.1, 0.1), 0.2, 0.6, alpha=None,\n    ),\n    patches.Rectangle((0.4, 0.1), 0.2, 0.6, alpha=1.0,\n    ),\n    patches.Rectangle((0.7, 0.1), 0.2, 0.6, alpha=0.6,\n    ),\n    patches.Rectangle((1.0, 0.1), 0.2, 0.6, alpha=0.1,\n    )\n]:\n    ax.add_patch(p)\nplt.show()","d5601172":"fig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\n\nfor p in [\n    patches.Rectangle((0.1, 0.1), 0.2, 0.6, alpha=None,\n    ),\n    patches.Rectangle((0.4, 0.1), 0.2, 0.6, alpha=1.0,\n    ),\n    patches.Rectangle((0.7, 0.1), 0.2, 0.6, alpha=0.6,\n    ),\n    patches.Rectangle((1.0, 0.1), 0.2, 0.6, alpha=0.1,\n    )\n]:\n    ax.add_patch(p)\n\nax.set_xlim(0, 1.5)\nplt.show()","8da664d0":"fig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\n\nfor p in [\n    patches.Rectangle((0.1, 0.1), 0.2, 0.6, facecolor=None # Default color blue\n    ),\n    patches.Rectangle((0.4, 0.1), 0.2, 0.6, facecolor='none' # Not fill color\n    ),\n    patches.Rectangle((0.7, 0.1), 0.2, 0.6, facecolor='red'  # fill red color\n    ),\n    patches.Rectangle((1.0, 0.1), 0.2, 0.6, facecolor='#00ffff' # fill blue\n    )\n]:\n    ax.add_patch(p)\n\nax.set_xlim(0, 1.5)\nplt.show()","697adb81":"fig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\n\nfor p in [\n    patches.Rectangle((0.1, 0.1), 0.2, 0.6, fill=False, edgecolor=None\n    ),\n    patches.Rectangle((0.4, 0.1), 0.2, 0.6, fill=False, edgecolor='none'\n    ),\n    patches.Rectangle((0.7, 0.1), 0.2, 0.6, fill=False, edgecolor='red'\n    ),\n    patches.Rectangle((1.0, 0.1), 0.2, 0.6, fill=False, edgecolor='#00ffff'\n    )\n]:\n    ax.add_patch(p)\n\nax.set_xlim(0, 1.5)\nplt.show()","b8dcf799":"fig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\n\nfor p in [\n    patches.Rectangle((0.1, 0.1), 0.2, 0.6, fill=False, linestyle='solid'  # Default\n    ),\n    patches.Rectangle((0.4, 0.1), 0.2, 0.6, fill=False, linestyle='dashed'\n    ),\n    patches.Rectangle((0.7, 0.1), 0.2, 0.6, fill=False, linestyle='dashdot'\n    ),\n    patches.Rectangle((1.0, 0.1), 0.2, 0.6, fill=False, linestyle='dotted'\n    )\n]:\n    ax.add_patch(p)\n\nax.set_xlim(0, 1.5)\nplt.show()","5b84d2ec":"fig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\n\nfor p in [\n    patches.Circle((0.1, 0.4), 0.1,\n    hatch='\/'\n    ),\n    patches.Circle((0.5, 0.4), 0.1,\n    hatch='*',\n    facecolor='red'\n    ),\n    patches.Circle((0.9, 0.4), 0.1,\n    hatch='\\\\',\n    facecolor='green'\n    ),\n    patches.Circle((0.5, 0.7), 0.1,\n    hatch='\/\/',\n    fill=False\n    )\n]:\n    ax.add_patch(p)\nplt.show()","dda2a564":"fig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\n\npolygon = patches.Polygon([[0.1, 0.1],\n                           [0.2, 0.8],\n                           [0.5, 0.7],\n                           [0.8, 0.1],\n                           [0.4, 0.3]],\n                          fill=False)\n\nax.add_patch(polygon)\nplt.show()","8726dd41":"fig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\n\npolygon = patches.Polygon([[0.1, 0.1],\n                           [0.2, 0.8],\n                           [0.5, 0.7],\n                           [0.8, 0.1],\n                           [0.4, 0.3]],\n                          closed=False,\n                          fill=False)\n\nax.add_patch(polygon)\nplt.show()","0c4031da":"# Arrow is polygon with seven sides\nfig, ax = plt.subplots()\nax.set_aspect(aspect='equal')\npolygon = patches.Arrow(0.1, 0.2, # centre of the bace of the arrow\n                       0.7, 0.7)\nax.add_patch(polygon)\nplt.show()","1c868d5f":"from matplotlib.path import Path\nfig, ax = plt.subplots()\np = patches.PathPatch(Path([(0.1, 0.1), (0.8, 0.8), (0.8, 0.1), (0.4, 0.2)],\n                              [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO]),\n                     fill=None)\nax.add_patch(p)\nplt.show()","e35ad657":"from matplotlib.path import Path\nfig, ax = plt.subplots()\np = patches.PathPatch(Path([(0.1, 0.1), (0.8, 0.8), (0.8, 0.1), (0.4, 0.2)],\n                              [Path.MOVETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]),\n                     fill=None)\nax.add_patch(p)\nplt.show()","594097c8":"from matplotlib.path import Path\nfig, ax = plt.subplots()\np = patches.PathPatch(Path([(0.1, 0.1), (0.8, 0.8), (0.8, 0.1), (0.4, 0.2)],\n                              [Path.MOVETO, Path.LINETO, Path.CURVE3, Path.CURVE3]),\n                     fill=None)\nax.add_patch(p)\nplt.show()","647128f1":"from matplotlib.path import Path\nfig, ax = plt.subplots()\np = patches.PathPatch(Path([(0.1, 0.1), (0.8, 0.8), (0.8, 0.1), (0.4, 0.2)],\n                              [Path.MOVETO, Path.LINETO, Path.CURVE3, Path.MOVETO]),\n                     fill=None)\nax.add_patch(p)\nplt.show()","3ec04efb":"fig, ax = plt.subplots()\nax.plot([1, 2, 3],\n       [2, 4, 6])\n\nax.annotate('min value',\n           xy=(1, 2),                   # points to datapoint\n           xytext=(1.5, 2.0),           # where to write the text\n           arrowprops=dict(color='g'))  # Arrow color\nplt.show()","e33d81aa":"fig, ax = plt.subplots()\nax.plot([1, 2, 3],\n       [2, 4, 6])\n\nax.annotate('min value',\n           xy=(1, 2),                   # points to datapoint\n           xytext=(1, 3),               # where to write the text\n           arrowprops=dict(color='g'))  # Arrow color\nplt.show()","f3a516fc":"fig, ax = plt.subplots()\nax.plot([1, 2, 3],\n       [2, 4, 6])\n\nax.annotate('min value',\n           xy=(1, 2),                   # points to datapoint\n           xytext=(1, 3),               # where to write the text\n           arrowprops=dict(facecolor='y', edgecolor='green', alpha=0.3))\nplt.show()","00309c81":"fig, ax = plt.subplots()\nax.plot([1, 2, 3],\n       [2, 4, 6])\n\nax.annotate('Significant point',\n           xy=(2, 4),                   \n           xytext=(2.0, 2.5),               \n           arrowprops=dict(color='green')\n           )\nax.plot([2], [4], 'ro')\nplt.show()","33267d02":"fig, ax = plt.subplots()\nax.plot([1, 2, 3],\n       [2, 4, 6])\n\nax.annotate('Significant point',\n           xy=(2, 4),                   \n           xytext=(2.0, 2.5),               \n           arrowprops=dict(color='green', shrink=0.1)\n           )\nax.plot([2], [4], 'ro')\nplt.show()","45c55d77":"import numpy as np\n\nx1 = -1 + np.random.randn(100)\ny1 = -1 + np.random.randn(100)\n\nx2 = 1 + np.random.randn(100)\ny2 = 1 + np.random.randn(100)","55cf94c2":"fig, ax = plt.subplots()\nax.scatter(x1, y1, color='r')\nax.scatter(x1, y2, color='g')\nplt.show()","57e8c08e":"fig, ax = plt.subplots()\nax.scatter(x1, y1, color='r')\nax.scatter(x1, y2, color='g')\n\nbbox_props = dict(boxstyle='square', facecolor='w', alpha=0.5)\nax.text(-2, -2, 'Sample A', ha='center', va='center', size=20, bbox=bbox_props)\nax.text(0, 2, 'Sample B', ha='center', va='center', size=20, bbox=bbox_props)","db01b0bd":"fig, ax = plt.subplots()\nax.scatter(x1, y1, color='r')\nax.scatter(x1, y2, color='g')\n\nbbox_props = dict(boxstyle='square', facecolor='w', alpha=0.5)\nax.text(-2, -2, 'Sample A', ha='center', va='center', size=20, bbox=bbox_props)\nax.text(0, 2, 'Sample B', ha='center', va='center', size=20, bbox=bbox_props)\n\narrow_bbox_props= dict(boxstyle='rarrow',\n                      facecolor='#EBF5FB',\n                      edgecolor='b',\n                      linewidth=2,\n                      alpha=0.7)\nax.text(0, 0,\n       'Direction',\n       ha='center',\n       va='center',\n       rotation=45,\n       size=15,\n       bbox=arrow_bbox_props)","19382f1f":"y = np.random.uniform(low=0.0, high=1000, size=(1000,))\ny.sort()\nx = np.arange(len(y))","9bda4011":"plt.plot(x, y)\nplt.grid(True)\nplt.show()","3617a8bf":"plt.plot(x, y)\nplt.grid(True)\nplt.yscale('log')\nplt.show()","5ec76af4":"plt.plot(x, y)\nplt.grid(True)\nplt.yscale('log', basey=2) # base log2\nplt.show()","d07d0ee2":"plt.plot(x, y)\nplt.grid(True)\nplt.yscale('log', basey=2) # base log2 on y-axis\nplt.xscale('log', basex=2) # base log2 on x-axis\nplt.show()","4b331e8e":"austin_weather = pd.read_csv('..\/input\/matplotlib\/austin_weather1.csv')\naustin_weather.head()","c605f728":"austin_weather = austin_weather[['Date', 'TempAvgF', 'WindAvgMPH']].head(30)\naustin_weather","ab950cb9":"fig, ax_tempF = plt.subplots()\n\nfig.set_figwidth(12)\nfig.set_figheight(6)\n\nax_tempF.set_xlabel('Date')\n\nax_tempF.tick_params(axis='x', bottom=False, labelbottom=False) # disable scale in x-axis","34b48666":"fig, ax_tempF = plt.subplots()\n\nfig.set_figwidth(12)\nfig.set_figheight(6)\n\nax_tempF.set_xlabel('Date')\n\nax_tempF.tick_params(axis='x', bottom=False, labelbottom=False)\nax_tempF.set_ylabel('Temp (F)', color='red', size='x-large')\n\nax_tempF.tick_params(axis='y', labelcolor='red', labelsize='large')","39f5b518":"fig, ax_tempF = plt.subplots()\n\nfig.set_figwidth(12)\nfig.set_figheight(6)\n\nax_tempF.set_xlabel('Date')\n\nax_tempF.tick_params(axis='x', bottom=False, labelbottom=False)\nax_tempF.set_ylabel('Temp (F)', color='red', size='x-large')\n\nax_tempF.tick_params(axis='y', labelcolor='red', labelsize='large')\n\nax_tempF.plot(austin_weather['Date'],\n                            austin_weather['TempAvgF'],\n             color='red')","1f442448":"fig, ax_tempF = plt.subplots()\n\nfig.set_figwidth(12)\nfig.set_figheight(6)\n\nax_tempF.set_xlabel('Date')\n\nax_tempF.tick_params(axis='x', bottom=False, labelbottom=False)\nax_tempF.set_ylabel('Temp (F)', color='red', size='x-large')\n\nax_tempF.tick_params(axis='y', labelcolor='red', labelsize='large')\n\nax_tempF.plot(austin_weather['Date'],\n                            austin_weather['TempAvgF'],\n             color='red')\nax_wind = ax_tempF.twinx() # The function creates another Y axis using the same X axis","298ba466":"fig, ax_tempF = plt.subplots()\n\nfig.set_figwidth(12)\nfig.set_figheight(6)\n\nax_tempF.set_xlabel('Date')\n\nax_tempF.tick_params(axis='x', bottom=False, labelbottom=False)\nax_tempF.set_ylabel('Temp (F)', color='red', size='x-large')\n\nax_tempF.tick_params(axis='y', labelcolor='red', labelsize='large')\n\nax_tempF.plot(austin_weather['Date'],\n                            austin_weather['TempAvgF'],\n             color='red')\nax_wind = ax_tempF.twinx() # The function creates another Y axis using the same X axis\n\nax_wind.set_ylabel('Avg wind Speed (MPH)',\n                  color='blue',\n                  size='x-large')\nax_wind.tick_params(axis='y',\n                  labelcolor='blue',\n                  labelsize='large')","de91934f":"fig, ax_tempF = plt.subplots()\n\nfig.set_figwidth(12)\nfig.set_figheight(6)\n\nax_tempF.set_xlabel('Date')\n\nax_tempF.tick_params(axis='x', bottom=False, labelbottom=False)\nax_tempF.set_ylabel('Temp (F)', color='red', size='x-large')\n\nax_tempF.tick_params(axis='y', labelcolor='red', labelsize='large')\n\nax_tempF.plot(austin_weather['Date'],\n                            austin_weather['TempAvgF'],\n             color='red')\nax_wind = ax_tempF.twinx() # The function creates another Y axis using the same X axis\n\nax_wind.set_ylabel('Avg wind Speed (MPH)',\n                  color='blue',\n                  size='x-large')\nax_wind.tick_params(axis='y',\n                  labelcolor='blue',\n                  labelsize='large')\n\nax_wind.plot(austin_weather['Date'],\n            austin_weather['WindAvgMPH'],\n            color='blue')","801c6df8":"def fahrenheit2celsius(f):\n    return (f - 32) * 5 \/ 9","c5392d19":"fig, ax_tempF = plt.subplots()\n\nfig.set_figwidth(12)\nfig.set_figheight(6)\n\nax_tempF.set_xlabel('Date')\n\nax_tempF.tick_params(axis='x', bottom=False, labelbottom=False)\nax_tempF.set_ylabel('Temp (F)', color='red', size='x-large')\n\nax_tempF.tick_params(axis='y', labelcolor='red', labelsize='large')\n\nax_tempF.plot(austin_weather['Date'],\n                            austin_weather['TempAvgF'],\n             color='red')\nax_tempC = ax_tempF.twinx() # The function creates another Y axis using the same X axis\n\nymin, ymax = ax_tempF.get_ylim()\n\nax_tempC.set_ylim(fahrenheit2celsius(ymin),\n                  fahrenheit2celsius(ymax))\n\nax_tempC.tick_params(axis='y',\n                    labelcolor='blue',\n                    labelsize='large')","f7770d02":"x = np.random.randint(low=0, high=20, size=20)\nx.sort()\nx","677cea34":"plt.boxplot(x)\nplt.show()","3f7c7116":"x = np.append(x, 22)\nplt.boxplot(x)\nplt.show()","c5052707":"x = np.append(x, 37)\nx = np.append(x, 40)\nplt.boxplot(x)\nplt.show()","53bec54f":"plt.boxplot(x, vert=False) # print in vertical\nplt.show()","b5ecd703":"plt.boxplot(x, vert=False, notch=True)\nplt.show()","ff171efa":"plt.boxplot(x, vert=False, notch=True, showfliers=False)\nplt.show()","932d62cb":"# The default boxplot is a line2D object which only allows formatting of the edges.\n# By setting patch_artist-True, we turn it into a 2D patch\nbp = plt.boxplot(x, patch_artist=True)\nbp","92a43661":"bp = plt.boxplot(x, patch_artist=True)\nbp['boxes'][0].set(facecolor='lightyellow', edgecolor='maroon', hatch='.')","5f4dac6f":"bp = plt.boxplot(x, patch_artist=True)\nbp['boxes'][0].set(facecolor='lightyellow', \n                   edgecolor='maroon', hatch='.')\nbp['whiskers'][0].set(color='red',\n                     linewidth=2)\nbp['whiskers'][1].set(color='blue')","939b098c":"bp = plt.boxplot(x, patch_artist=True)\nbp['boxes'][0].set(facecolor='lightyellow', \n                   edgecolor='maroon', hatch='\/')\nbp['fliers'][0].set(marker='D', \n                   markerfacecolor='blue')","84cc6705":"bp = plt.boxplot(x, patch_artist=True)\nbp['boxes'][0].set(facecolor='lightyellow', \n                   edgecolor='maroon')\nbp['medians'][0].set(linestyle='--',\n                    linewidth=3)","a2c74b62":"print(check_output([\"ls\", \"..\/input\/score-of-exams\/\"]).decode(\"utf8\"))\nexam_data = pd.read_csv('..\/input\/score-of-exams\/exams.csv')","8b49f53a":"exam_data.head()","3c9887ac":"exam_scores = exam_data[['math score', 'reading score', 'writing score']]\nexam_scores.head()","d8f0ba84":"exam_scores.describe()","e6fbc2bb":"exam_scores = np.array(exam_scores) # convet the dataframe to array","32c11d0c":"bp = plt.boxplot(exam_scores)\nplt.show()","ade139a8":"bp = plt.boxplot(exam_scores, patch_artist=True)\nplt.show()","c89e6357":"colors = ['blue', 'grey', 'lawngreen']","871e24c0":"bp = plt.boxplot(exam_scores, patch_artist=True)\n\nfor i in range(len(bp['boxes'])):\n    bp['boxes'][i].set(facecolor=colors[i])\n    bp['caps'][2*i+1].set(color=colors[i])\n\nplt.show()","8e0572b2":"bp = plt.boxplot(exam_scores, patch_artist=True)\n\nfor i in range(len(bp['boxes'])):\n    bp['boxes'][i].set(facecolor=colors[i])\n    bp['caps'][2*i+1].set(color=colors[i])\n\nplt.xticks([1, 2, 3], ['Math', 'Reading', 'Writing']) \nplt.show()","18a61db9":"vp = plt.violinplot(exam_scores)\nplt.show()","cb595357":"vp = plt.violinplot(exam_scores, showmedians=True)\nplt.xticks([1, 2, 3], ['Math', 'Reading', 'Writing'])\nplt.show()","6e68f5fa":"vp = plt.violinplot(exam_scores, showmedians=True, vert=False)\nplt.yticks([1, 2, 3], ['Math', 'Reading', 'Writing'])\nplt.show()","9af9ae3d":"vp","d3ddabdf":"vp = plt.violinplot(exam_scores, showmedians=True, vert=False)\nplt.yticks([1, 2, 3], ['Math', 'Reading', 'Writing'])\n\nfor i in range(len(vp['bodies'])):\n    vp['bodies'][i].set(facecolor=colors[i])\n\nplt.show()","8184298d":"vp = plt.violinplot(exam_scores, showmedians=True, vert=False)\nplt.yticks([1, 2, 3], ['Math', 'Reading', 'Writing'])\n\nfor i in range(len(vp['bodies'])):\n    vp['bodies'][i].set(facecolor=colors[i])\n\nvp['cmaxes'].set(color='maroon')\nvp['cmins'].set(color='black')\nvp['cbars'].set(linestyle=':')\nvp['cmedians'].set(linewidth=6)\n    \nplt.show()","ffd755f6":"vp = plt.violinplot(exam_scores, showmedians=True, vert=False)\nplt.yticks([1, 2, 3], ['Math', 'Reading', 'Writing'])\n\nfor i in range(len(vp['bodies'])):\n    vp['bodies'][i].set(facecolor=colors[i])\n\nplt.legend(handles = [vp['bodies'][0], vp['bodies'][1]],\n           labels = ['Math', 'Reading'],\n           loc = 'upper left')","2e5ccedc":"np_data = pd.read_csv('..\/input\/matplotlib\/national_parks.csv')\nnp_data.head()","6c7b365b":"np_data.describe()","34b9b59b":"plt.hist(np_data['GrandCanyon'],\n        facecolor='cyan',\n        edgecolor='blue',\n        bins=10)\nplt.show()","543f5bdb":"n, bins, patches = plt.hist(np_data['GrandCanyon'],\n                            facecolor='cyan',\n                            edgecolor='blue',\n                            bins=10)\nprint('n: ', n)  # frequency of the data point\nprint('bins: ', bins)  # the middel value of the bin\nprint('patches: ', patches)","4b96a1e5":"n, bins, patches = plt.hist(np_data['GrandCanyon'],\n                            facecolor='cyan',\n                            edgecolor='blue',\n                            bins=10,\n                            density=True)\nprint('n: ', n)  # frequency of the data point\nprint('bins: ', bins)  # the middel value of the bin\nprint('patches: ', patches)","2b2ca2cf":"n, bins, patches = plt.hist(np_data['GrandCanyon'],\n                            facecolor='cyan',\n                            edgecolor='blue',\n                            bins=10,\n                           cumulative=True)\nplt.show()","b24563f5":"data = pd.read_csv('..\/input\/matplotlib\/sector_weighting.csv')\ndata","ce97bd50":"plt.pie(data['Percentage'],\n       labels=data['Sector'])\nplt.show()","0236dc8a":"plt.pie(data['Percentage'],\n       labels=data['Sector'])\nplt.axis('equal')  # perfect circle\nplt.show()","75175f5e":"colors = ['deeppink', 'aqua', 'magenta', 'silver', 'lime']","969ef17d":"plt.pie(data['Percentage'],\n       labels=data['Sector'],\n       colors=colors,  # color for each sector\n       autopct='%.2f') # represents the format for the displyaed values\nplt.axis('equal')\nplt.show()","1a0eee0b":"plt.pie(data['Percentage'],\n       labels=data['Sector'],\n       colors=colors,  # color for each sector\n       autopct='%.2f', # represents the format for the displyaed values\n       startangle=90,  # start angle\n       counterclock=False)\nplt.axis('equal')\nplt.show()","63f5c239":"explode = (0, 0.1, 0, 0.3, 0)","4f9501f3":"plt.pie(data['Percentage'],\n       labels=data['Sector'],\n       colors=colors,  # color for each sector\n       autopct='%.2f', # represents the format for the displyaed values\n       explode=explode)\nplt.axis('equal')\nplt.show()","7f8235aa":"wedges, texts, autotexts = plt.pie(data['Percentage'],\n       labels=data['Sector'],\n       colors=colors,  # color for each sector\n       autopct='%.2f') # represents the format for the displyaed values\nplt.axis('equal')\n\nprint('Wedges: ', wedges)\nprint('Texts: ', texts)\nprint('Autotexts: ', autotexts)","a8217545":"wedges, texts, autotexts = plt.pie(data['Percentage'],\n                                   labels=data['Sector'],\n                                   colors=colors,  # color for each sector\n                                   autopct='%.2f', # represents the format for the displyaed values\n                                   explode=explode)\n\nplt.axis('equal')\n\nwedges[1].set(edgecolor='blue', linewidth=2)\ntexts[1].set(family='cursive', size=20)\nautotexts[1].set(weight='bold', size=15)","1fbcc3cb":"grand_canyon_data = pd.read_csv('..\/input\/grand-visits\/grand_canyon_visits.csv')\ngrand_canyon_data.head()","8914ece9":"grand_canyon_data['NumVisits'].describe()","13c64dad":"grand_canyon_data['NumVisits'] = grand_canyon_data['NumVisits'] \/ 1000 # oveflow the correlation\ngrand_canyon_data['NumVisits'].describe()","b378d396":"plt.figure(figsize=(16, 8))\nplt.acorr(grand_canyon_data['NumVisits'],\n         maxlags=20) # range of x-axis (-20, 20)\nplt.show()","998b595a":"plt.figure(figsize=(16, 8))\nlags, c, vlines, hline = plt.acorr(grand_canyon_data['NumVisits'],\n         maxlags=20) # range of x-axis (-20, 20)\nplt.show()\nprint('lags: ', lags, '\\n')\nprint('c: ', c, '\\n')             # correlation values\nprint('vlines: ', vlines, '\\n')\nprint('hline: ', hline, '\\n')","87893496":"np_data = pd.read_csv('..\/input\/matplotlib\/national_parks.csv')\nnp_data.head()","07b9490e":"x = np_data['Year']","8ba72c3e":"y = np.vstack([np_data['Badlands'],\n             np_data['GrandCanyon'],\n             np_data['BryceCanyon']])\ny","e8fe1e09":"labels = ['Badlands',\n         'GrandCanyon',\n         'BryceCanyon']","979b2d47":"plt.stackplot(x, y,\n              labels=labels)\nplt.legend(loc='upper left')\nplt.show()","d93b925e":"colors = ['sandybrown',\n         'tomato',\n         'skyblue']","6e6e3895":"plt.stackplot(x, y,\n              labels=labels,\n             colors=colors,\n             edgecolor='grey')\nplt.legend(loc='upper left')\nplt.show()","3d7de444":"np_data[['Badlands',\n        'GrandCanyon',\n        'BryceCanyon']] = np_data[['Badlands',\n                                   'GrandCanyon',\n                                   'BryceCanyon']].diff()\nnp_data.head()","4f8f5708":"# Stem plots are a good way to analyze fluctuating data\nplt.figure(figsize=(10, 6))\n\nplt.stem(np_data['Year'],\n        np_data['Badlands'])\nplt.title('Change in Number of Visitors')\nplt.show()","70042d54":"# Building Basic, Intermediate and Advanced Plots\n## Plotting Shapes","0f5eeb78":"* Outliers are represented by circles outside the box called fliers","9935ec47":"## Basic Plots","861106fd":"* subplot2grid(shape, loc, rowspan=1, colspan=1)\n* **loc** : sequence of 2 ints.Location to place axis within grid. First entry is row number, second entry is column number.\n* **rowspan** : int. Number of rows for the axis to span to the right.\n* **colspan** : int. Number of columns for the axis to span downwards.","45acd60a":"## Lines and Markers","330c23f2":"* **Object level APIs** Includes granular low-level APIs to control each object in a plot.\n* **matplotlib pyplot** is a higher level API that controls the \"state-machine\".\n* **Pylab** is a convenience module imports portions of Matplotlib and NumPy to give users a Matlab -like access to functions.","ea573ae4":"* The box represents values between the 25th and 75th percentiles\n* The central line is the median value of the data.\n* The caps represent the range of values(excluding outliers) in the data\n* The vertical line represent the whiskers are the bars which connect the box with the caps.","f9e1d882":"## Matplotlib\n* Python ploting library\n* Easy to create plots\n* Embeddable GUI for application development\n* can be used across platfroms","de5f396d":"* The graph displays the density of the data set over this range of values","e58d15da":"<img src=\"https:\/\/matplotlib.org\/_static\/logo2.png\">","7826a33a":"## Twin Axis","f3e902e5":"# Introducing Matplotlib and pyplot","7db49560":"## Watermarks","4615a486":"* **At 1st position** 0 represent extreme left of the figure and 1 represent extreme right of the figure.\n* **At 2nd position** 0 represents bottom of the figure and 1 represents top of the figure.\n* **At 3rd position** width of the figure.\n* **At 4th position** height of the figure.","eb7b2f3f":"# Overview\n## Introducing Matplotlib and pyplot\n* Anatomy of a figure\n* Plots, title, labels, lines, markers, watermarks\n\n## Basic, intermediate and advance plots\n* Shapes and curves\n* Text and annotations\n* Different units on the same axis\n* Scaled axis\n\n## Visualizing data\n* Boxplots and violin plots\n* Histrograms and pie charts\n* Stem charts\n* Autocorrelations\n* Stackplots\n\n<img src=\"https:\/\/i.ibb.co\/WPdDgKp\/Screenshot-2018-12-23-at-11-14-53-PM.png\">","053205cb":"## Bezier Curve\n<img src=\"https:\/\/i.ibb.co\/Mh073tb\/Screenshot-2018-12-25-at-2-41-07-PM.png\">","acf22a72":"* **Figure** overall window or page, within which all operations are performed\n* **Axes** Area within a figure where actual graphs are plotted\n* Axes has an X-axis and a Y-axis\n* Contains tick, tick locations, labels\n\n<img src=\"https:\/\/i.ibb.co\/NCHQ1R6\/Screenshot-2018-12-24-at-10-27-59-AM.png\">\n\n* A figure can have more than one axes.\n\n## Anatomy of a figure\n<img src=\"https:\/\/i.ibb.co\/dB54X8N\/Screenshot-2018-12-24-at-10-31-27-AM.png\">","56b08846":"## Visualizing Stock Data","0c1c6a4e":"## Autocorrelation\n* **Correlation:-** Measure of the relationship between two items or variables.\n* **Autocorrelation:-** Measures the relationship between a variable's current value and past value. \n<img src=\"https:\/\/i.ibb.co\/ZhtwjYD\/Screenshot-2018-12-26-at-3-49-14-PM.png\">\n<img src=\"https:\/\/i.ibb.co\/wzDWv0Q\/Screenshot-2018-12-26-at-3-49-04-PM.png\">","054d0447":"## Figures and Axes","3409a4e9":"* Matplotlib is a Python 2D plotting library which produces **publication quality** figures in a variety of **hardcopy formats** and interactive environments **across platforms**.\n\n<img src=\"https:\/\/i.ibb.co\/5nVJ85R\/Screenshot-2018-12-24-at-9-59-07-AM.png\">\n<img src=\"https:\/\/i.ibb.co\/XjsCn8v\/Screenshot-2018-12-24-at-10-02-29-AM.png\">","b7308b6c":"## Violin plots","f6ec315c":"## Scales","f2331f12":"<img src=\"https:\/\/i.ibb.co\/k8jQJxZ\/Screenshot-2018-12-24-at-10-21-07-AM.png\">","fb34e4e9":"## Annotations","36c4992f":"## Stacked Plots","3deac00c":"## Histograms","27a04f71":"# Visualizing Data\n## Box plot"}}