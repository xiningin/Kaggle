{"cell_type":{"5837992f":"code","797344c5":"code","8ec48537":"code","aa917d54":"code","4091660b":"code","ea19e5dd":"code","a30ba9a2":"code","d7a1fe45":"code","abc0ca9a":"code","4f8291a1":"code","e1d39e8a":"code","b20ef3c9":"code","4865fbb9":"code","4a234a2f":"code","746d5f9b":"code","6b00240c":"code","915daebe":"code","b319c782":"code","20318800":"code","f1b8b8ef":"code","a034c5be":"code","9f11acbb":"code","2d90da11":"code","3771e202":"code","c0fbefa4":"code","09be1a14":"code","4975e572":"code","7bcc8578":"code","e865b91a":"code","4e379c3f":"code","beee704c":"code","cb62c105":"code","1dbede97":"code","5704d60f":"code","45fa71cf":"code","ba3649aa":"code","ac28ad6c":"code","f7d64c1d":"code","c957ba9a":"code","57f7ef21":"code","494456a9":"code","540987c0":"code","d6c6d9fb":"code","01571472":"markdown","aaef9a42":"markdown","17838bdd":"markdown","0c19fbd5":"markdown","8c76c1df":"markdown","f19a7f11":"markdown"},"source":{"5837992f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","797344c5":"insurance_df=pd.read_csv(\"..\/input\/insurance.csv\")","8ec48537":"insurance_df.shape","aa917d54":"insurance_df.isna().sum()","4091660b":"insurance_df.index","ea19e5dd":"insurance_df.head(10)","a30ba9a2":"import matplotlib.pyplot as plt\n\n%matplotlib inline\nimport seaborn as sns","d7a1fe45":"insurance_df.describe()","abc0ca9a":"insur_corr=insurance_df.corr()\ninsur_corr","4f8291a1":"insur_cov=insurance_df.cov()\ninsur_cov","e1d39e8a":"sns.heatmap(insur_corr,vmin=-1,vmax=1,center=0,annot=True)","b20ef3c9":"#sns.pairplot(data=insurance_df,hue='children')","4865fbb9":"plt.figure(figsize=(14, 7))\nsns.scatterplot(x=insurance_df['age'], y=insurance_df['expenses'],hue=insurance_df['children'],size=insurance_df['bmi'])","4a234a2f":"plt.figure(figsize=(14, 7))\nsns.scatterplot(x=insurance_df['bmi'], y=insurance_df['expenses'],hue=insurance_df['children'],size=insurance_df['age'])","746d5f9b":"sns.pairplot(data=insurance_df,hue='region')","6b00240c":"plt.figure(figsize=(14, 7))\nsns.scatterplot(x=insurance_df['age'], y=insurance_df['expenses'],hue=insurance_df['region'],size=insurance_df['bmi'])","915daebe":"plt.figure(figsize=(14, 7))\nsns.scatterplot(x=insurance_df['bmi'], y=insurance_df['expenses'],hue=insurance_df['region'],size=insurance_df['age'])","b319c782":"sns.pairplot(data=insurance_df,hue='smoker')","20318800":"plt.figure(figsize=(14, 7))\nsns.scatterplot(x=insurance_df['age'], y=insurance_df['expenses'],hue=insurance_df['smoker'],size=insurance_df['bmi'])","f1b8b8ef":"plt.figure(figsize=(14, 7))\nsns.scatterplot(x=insurance_df['bmi'], y=insurance_df['expenses'],hue=insurance_df['smoker'],size=insurance_df['age'])","a034c5be":"sns.pairplot(data=insurance_df,hue='sex')","9f11acbb":"plt.figure(figsize=(14, 7))\nsns.scatterplot(x=insurance_df['age'], y=insurance_df['expenses'],hue=insurance_df['sex'],size=insurance_df['bmi'])","2d90da11":"plt.figure(figsize=(14, 7))\nsns.scatterplot(x=insurance_df['bmi'], y=insurance_df['expenses'],hue=insurance_df['sex'],size=insurance_df['age'])","3771e202":"# Importing necessary package for creating model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error,r2_score\n","c0fbefa4":"cat_col=['smoker','region','sex']\nnum_col=[i for i in insurance_df.columns if i not in cat_col]\nnum_col","09be1a14":"# one-hot encoding\none_hot=pd.get_dummies(insurance_df[cat_col])\ninsur_procsd_df=pd.concat([insurance_df[num_col],one_hot],axis=1)\ninsur_procsd_df.head(10)","4975e572":"#label encoding\ninsr_procsd_df_label=insurance_df\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\nfor i in cat_col:\n    insr_procsd_df_label[i] = label_encoder.fit_transform(insr_procsd_df_label[i])\ninsr_procsd_df_label.head(10)","7bcc8578":"#using one hot encoding\nX=insur_procsd_df.drop(columns='expenses')\ny=insurance_df[['expenses']]","e865b91a":"train_X, test_X, train_y, test_y = train_test_split(X,y,test_size=0.3,random_state=1234)","4e379c3f":"model = LinearRegression()\n\nmodel.fit(train_X,train_y)","beee704c":"# Print Model intercept and co-efficent\nprint(\"Model intercept\",model.intercept_,\"Model co-efficent\",model.coef_)","cb62c105":"cdf = pd.DataFrame(data=model.coef_.T, index=X.columns, columns=[\"Coefficients\"])\ncdf","1dbede97":"# Print various metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error,r2_score\n\nprint(\"Predicting the train data\")\ntrain_predict = model.predict(train_X)\nprint(\"Predicting the test data\")\ntest_predict = model.predict(test_X)\nprint(\"MAE\")\nprint(\"Train : \",mean_absolute_error(train_y,train_predict))\nprint(\"Test  : \",mean_absolute_error(test_y,test_predict))\nprint(\"====================================\")\nprint(\"MSE\")\nprint(\"Train : \",mean_squared_error(train_y,train_predict))\nprint(\"Test  : \",mean_squared_error(test_y,test_predict))\nprint(\"====================================\")\nimport numpy as np\nprint(\"RMSE\")\nprint(\"Train : \",np.sqrt(mean_squared_error(train_y,train_predict)))\nprint(\"Test  : \",np.sqrt(mean_squared_error(test_y,test_predict)))\nprint(\"====================================\")\nprint(\"R^2\")\nprint(\"Train : \",r2_score(train_y,train_predict))\nprint(\"Test  : \",r2_score(test_y,test_predict))\nprint(\"MAPE\")\nprint(\"Train : \",np.mean(np.abs((train_y - train_predict) \/ train_y)) * 100)\nprint(\"Test  : \",np.mean(np.abs((test_y - test_predict) \/ test_y)) * 100)\n","5704d60f":"#Plot actual vs predicted value\nplt.figure(figsize=(10,7))\nplt.title(\"Actual vs. predicted expenses\",fontsize=25)\nplt.xlabel(\"Actual expenses\",fontsize=18)\nplt.ylabel(\"Predicted expenses\", fontsize=18)\nplt.scatter(x=test_y,y=test_predict)","45fa71cf":"#using label encoding\nX=insur_procsd_df.drop(columns='expenses')\ny=insr_procsd_df_label[['expenses']]","ba3649aa":"# split data into train and test\ntrain_X, test_X, train_y, test_y = train_test_split(X,y,test_size=0.3,random_state=1234)","ac28ad6c":"# Create Linear regression model with train and test data\nmodel = LinearRegression()\n\nmodel.fit(train_X,train_y)","f7d64c1d":"# Print Model intercept and co-efficent\nprint(\"Model intercept\",model.intercept_,\"Model co-efficent\",model.coef_)","c957ba9a":"cdf = pd.DataFrame(data=model.coef_.T, index=X.columns, columns=[\"Coefficients\"])\ncdf","57f7ef21":"# Print various metrics\n\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error,r2_score\n\nprint(\"Predicting the train data\")\ntrain_predict = model.predict(train_X)\nprint(\"Predicting the test data\")\ntest_predict = model.predict(test_X)\nprint(\"MAE\")\nprint(\"Train : \",mean_absolute_error(train_y,train_predict))\nprint(\"Test  : \",mean_absolute_error(test_y,test_predict))\nprint(\"====================================\")\nprint(\"MSE\")\nprint(\"Train : \",mean_squared_error(train_y,train_predict))\nprint(\"Test  : \",mean_squared_error(test_y,test_predict))\nprint(\"====================================\")\nimport numpy as np\nprint(\"RMSE\")\nprint(\"Train : \",np.sqrt(mean_squared_error(train_y,train_predict)))\nprint(\"Test  : \",np.sqrt(mean_squared_error(test_y,test_predict)))\nprint(\"====================================\")\nprint(\"R^2\")\nprint(\"Train : \",r2_score(train_y,train_predict))\nprint(\"Test  : \",r2_score(test_y,test_predict))\nprint(\"MAPE\")\nprint(\"Train : \",np.mean(np.abs((train_y - train_predict) \/ train_y)) * 100)\nprint(\"Test  : \",np.mean(np.abs((test_y - test_predict) \/ test_y)) * 100)","494456a9":"#Plot actual vs predicted value\nplt.figure(figsize=(10,7))\nplt.title(\"Actual vs. predicted expenses\",fontsize=25)\nplt.xlabel(\"Actual expenses\",fontsize=18)\nplt.ylabel(\"Predicted expenses\", fontsize=18)\nplt.scatter(x=test_y,y=test_predict)","540987c0":"print(\"MAPE\")\nprint(\"Train : \",np.mean(np.abs((train_y - train_predict) \/ train_y)) * 100)\nprint(\"Test  : \",np.mean(np.abs((test_y - test_predict) \/ test_y)) * 100)","d6c6d9fb":"#for K in range(25):\n    #K_value = K+1\n    #neigh = KNeighborsRegressor(n_neighbors = K_value, weights='uniform', algorithm='auto')\n    #neigh.fit(X_train, y_train) \n    #y_pred = neigh.predict(X_test)\n    #print(\"MAPE\")\n    #print(\"Train : \",np.mean(np.abs((train_y - train_predict) \/ train_y)) * 100)\n    #print(\"Test  : \",np.mean(np.abs((test_y - test_predict) \/ test_y)) * 100)","01571472":"**With respect to categorical variable \"smoker\" from above visualizations , it clearly says smoker have high expenses comparted to non-smoker**","aaef9a42":"**With respect to categorical variable \"sex\" from above visualizations , we see slight relationship between gender and expense.female member tends to have high expense than male member particularly when you see lower part of graph between age and expense**","17838bdd":"**With respect to categorical variable \"region\" from above visualizations , we  see slight dependency between region and expenses.south east people have more expenses followed by southwest,northwest and northeast**","0c19fbd5":"**With respect to categorical variable \"children\" from above visualization , we  see slight relation between children and expenses particularly in lower part of age vs expense graph**","8c76c1df":"**Above correlation and covariance value inform that there exist strong relationship between expenses and {age(0.3) ,bmi(0.2)} for numerical variables**","f19a7f11":"****I dont see much difference between using label encoding and one-hot encoding. Also my predicted expenses value not following linear pattern with actual expenses****"}}