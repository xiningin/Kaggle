{"cell_type":{"2d61750f":"code","8384db5f":"code","0292aecc":"markdown","07c46db6":"markdown"},"source":{"2d61750f":"import numpy as np\nfrom keras.datasets import mnist\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers.recurrent import SimpleRNN\nfrom keras.optimizers import Adam","8384db5f":"# Data length\ninput_size = 28\n\n# Sequence length\ntime_steps = 28\n\n# hidden layers\ncell_size = 50\n\n# Load data\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\n\nx_train = x_train\/255.0\nx_test = x_test\/255.0\n\ny_train = np_utils.to_categorical(y_train, num_classes=10)\ny_test = np_utils.to_categorical(y_test, num_classes=10)\n\nmodel = Sequential()\n\n# recurrent neural network\nmodel.add(SimpleRNN(\n    units = cell_size,\n    input_shape = (time_steps, input_size),\n))\n\nmodel.add(Dense(10,activation='softmax'))\n\n# define optimizer\nadam = Adam(lr =1e-4 )\n\n# compile the model\nmodel.compile(optimizer=adam,loss='categorical_crossentropy',metrics=['accuracy'])\n\n# fit model\nmodel.fit(x_train, y_train, batch_size=32, epochs=10)\n\n# evaluate model\nloss, accuracy = model.evaluate(x_test, y_test)\nprint('Test loss :', loss)\nprint('Accuracy:', accuracy)","0292aecc":"- In image recognition filed, the effect of RNN model is not ideal, far less than convolution neural network","07c46db6":"- example:\n- (60000,28,28)\u2192\uff08the number of samples, time_steps, input_size\uff09"}}