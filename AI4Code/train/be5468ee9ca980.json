{"cell_type":{"a3ccbd2a":"code","24ef44b6":"code","385b58aa":"code","7ff7a40b":"code","41ae982f":"code","53693e9f":"code","15be94b4":"code","24385af5":"code","d87907d7":"code","aeaec47b":"code","1d0a5a46":"markdown","8e6129a0":"markdown","ca5eb32d":"markdown","2d8c753e":"markdown","4065b270":"markdown","caff8040":"markdown","d87caa82":"markdown","82c1c49d":"markdown","1a2ac88f":"markdown","b09894be":"markdown","c4898a3e":"markdown","6bfb21e6":"markdown","7a3d9ebb":"markdown"},"source":{"a3ccbd2a":"# Install:\n# Kaggle environments.\n!git clone https:\/\/github.com\/Kaggle\/kaggle-environments.git\n!cd kaggle-environments && pip install .\n\n# GFootball environment.\n!apt-get update -y\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.6 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.6.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .\n","24ef44b6":"%%writefile submission.py\n# start executing cells from here to rewrite submission.py\n\nfrom kaggle_environments.envs.football.helpers import *\nimport math\nimport random\n\ndef find_patterns(obs, player_x, player_y):\n    \"\"\" find list of appropriate patterns in groups of memory patterns \"\"\"\n    for get_group in groups_of_memory_patterns:\n        group = get_group(obs, player_x, player_y)\n        if group[\"environment_fits\"](obs, player_x, player_y):\n            return group[\"get_memory_patterns\"](obs, player_x, player_y)\n\ndef get_action_of_agent(obs, player_x, player_y):\n    \"\"\" get action of appropriate pattern in agent's memory \"\"\"\n    memory_patterns = find_patterns(obs, player_x, player_y)\n    # find appropriate pattern in list of memory patterns\n    for get_pattern in memory_patterns:\n        pattern = get_pattern(obs, player_x, player_y)\n        if pattern[\"environment_fits\"](obs, player_x, player_y):\n            return pattern[\"get_action\"](obs, player_x, player_y)\n        \ndef get_average_distance_to_opponents(obs, player_x, player_y):\n    \"\"\" get average distance to closest opponents \"\"\"\n    distances_sum = 0\n    distances_amount = 0\n    for i in range(1, len(obs[\"right_team\"])):\n        # if opponent is ahead of player\n        if obs[\"right_team\"][i][0] > (player_x - 0.02):\n            distance_to_opponent = get_distance(player_x, player_y, obs[\"right_team\"][i][0], obs[\"right_team\"][i][1])\n            if distance_to_opponent < 0.03:\n                distances_sum += distance_to_opponent\n                distances_amount += 1\n    # if there is no opponents close around\n    if distances_amount == 0:\n        return 2, distances_amount\n    return distances_sum \/ distances_amount, distances_amount\n\ndef get_distance(x1, y1, x2, y2):\n    \"\"\" get two-dimensional Euclidean distance, considering y size of the field \"\"\"\n    return math.sqrt((x1 - x2) ** 2 + (y1 * 2.38 - y2 * 2.38) ** 2)\n    ","385b58aa":"%%writefile -a submission.py\n# \"%%writefile -a submission.py\" will append the code below to submission.py,\n# it WILL NOT rewrite submission.py\n\ndef bad_angle_short_pass(obs, player_x, player_y):\n    \"\"\" perform a short pass, if player is at bad angle to opponent's goal \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # player is at bad angle to opponent's goal\n        if ((abs(player_y) > 0.15 and player_x > 0.85) or\n                (player_x > 0.7 and player_y > 0.07 and obs[\"left_team_direction\"][obs[\"active\"]][1] > 0) or\n                (player_x > 0.7 and player_y < -0.07 and obs[\"left_team_direction\"][obs[\"active\"]][1] < 0)):\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        if player_y > 0:\n            if Action.Top not in obs[\"sticky_actions\"]:\n                return Action.Top\n        else:\n            if Action.Bottom not in obs[\"sticky_actions\"]:\n                return Action.Bottom\n        if Action.Sprint in obs[\"sticky_actions\"]:\n            return Action.ReleaseSprint\n        return Action.ShortPass\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef close_to_goalkeeper_shot(obs, player_x, player_y):\n    \"\"\" shot if close to the goalkeeper \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        goalkeeper_x = obs[\"right_team\"][0][0] + obs[\"right_team_direction\"][0][0] * 13\n        goalkeeper_y = obs[\"right_team\"][0][1] + obs[\"right_team_direction\"][0][1] * 13\n        # player located close to the goalkeeper\n        if get_distance(player_x, player_y, goalkeeper_x, goalkeeper_y) < 0.3:\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        if player_y <= -0.03 or (player_y > 0 and player_y < 0.03):\n            if Action.BottomRight not in obs[\"sticky_actions\"]:\n                return Action.BottomRight\n        else:\n            if Action.TopRight not in obs[\"sticky_actions\"]:\n                return Action.TopRight\n        if Action.Sprint in obs[\"sticky_actions\"]:\n            return Action.ReleaseSprint\n        return Action.Shot\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef close_to_opponent_short_pass(obs, player_x, player_y):\n    \"\"\" perform a short pass, if close to opponent's player and close to teammate \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        for i in range(1, len(obs[\"right_team\"])):\n            distance_to_opponent = get_distance(player_x, player_y, obs[\"right_team\"][i][0], obs[\"right_team\"][i][1])\n            if distance_to_opponent < 0.03:\n                for j in range(1, len(obs[\"left_team\"])):\n                    distance_to_teammate = get_distance(player_x, player_y, obs[\"left_team\"][j][0], obs[\"left_team\"][j][1])\n                    if distance_to_teammate < 0.2:\n                        teammate_distance_to_goal = get_distance(obs[\"left_team\"][j][0], obs[\"left_team\"][j][1], 1, 0)\n                        player_distance_to_goal = get_distance(player_x, player_y, 1, 0)\n                        if teammate_distance_to_goal < player_distance_to_goal:\n                            return True\n                break\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        if Action.Sprint in obs[\"sticky_actions\"]:\n            return Action.ReleaseSprint\n        return Action.ShortPass\n\n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef far_from_goal_shot(obs, player_x, player_y):\n    \"\"\" perform a shot, if far from opponent's goal \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # player is far from opponent's goal or it's the goalkeeper\n        if player_x < -0.6 or obs[\"ball_owned_player\"] == 0:\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        if Action.Sprint in obs[\"sticky_actions\"]:\n            return Action.ReleaseSprint\n        return Action.Shot\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef far_from_goal_high_pass(obs, player_x, player_y):\n    \"\"\" perform a high pass, if far from opponent's goal \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # player is far from opponent's goal or it's the goalkeeper\n        if player_x < -0.3 or obs[\"ball_owned_player\"] == 0:\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        if Action.Right not in obs[\"sticky_actions\"]:\n            return Action.Right\n        if Action.Sprint in obs[\"sticky_actions\"]:\n            return Action.ReleaseSprint\n        return Action.HighPass\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef go_through_opponents(obs, player_x, player_y):\n    \"\"\" avoid closest opponents by going around them \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # right direction is safest\n        biggest_distance, final_opponents_amount = get_average_distance_to_opponents(obs, player_x + 0.01, player_y)\n        obs[\"memory_patterns\"][\"go_around_opponent\"] = Action.Right\n        # if top right direction is safest\n        top_right, opponents_amount = get_average_distance_to_opponents(obs, player_x + 0.01, player_y - 0.01)\n        if (top_right > biggest_distance and player_y > -0.15) or (top_right == 2 and player_y > 0.07):\n            biggest_distance = top_right\n            final_opponents_amount = opponents_amount\n            obs[\"memory_patterns\"][\"go_around_opponent\"] = Action.TopRight\n        # if bottom right direction is safest\n        bottom_right, opponents_amount = get_average_distance_to_opponents(obs, player_x + 0.01, player_y + 0.01)\n        if (bottom_right > biggest_distance and player_y < 0.15) or (bottom_right == 2 and player_y < -0.07):\n            biggest_distance = bottom_right\n            final_opponents_amount = opponents_amount\n            obs[\"memory_patterns\"][\"go_around_opponent\"] = Action.BottomRight\n        # is player surrounded?\n        if final_opponents_amount >= 3:\n            obs[\"memory_patterns\"][\"go_around_opponent_surrounded\"] = True\n        else:\n            obs[\"memory_patterns\"][\"go_around_opponent_surrounded\"] = False\n        return True\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        # if player is surrounded\n        if obs[\"memory_patterns\"][\"go_around_opponent_surrounded\"]:\n            return Action.HighPass\n        if Action.Sprint not in obs[\"sticky_actions\"]:\n            return Action.Sprint\n        return obs[\"memory_patterns\"][\"go_around_opponent\"]\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n","7ff7a40b":"%%writefile -a submission.py\n# \"%%writefile -a submission.py\" will append the code below to submission.py,\n# it WILL NOT rewrite submission.py\n\ndef khorne_slide(obs, berzerker_x, berzerker_y):\n    \"\"\" BLOOD FOR THE BLOOD GOD!!! SKULLS FOR THE SKULL THRONE!!! \"\"\"\n    def environment_fits(obs, berzerker_x, berzerker_y):\n        \"\"\" environment fits constraints \"\"\"\n        # if prey has the ball\n        if obs[\"ball_owned_team\"] == 1:\n            prey_x = obs[\"right_team\"][obs[\"ball_owned_player\"]][0]\n            prey_y = obs[\"right_team\"][obs[\"ball_owned_player\"]][1]\n            # by x position, amount of berzerker's team players between prey and goal of berzerker's team\n            players_amount = 0\n            for i in range(1, len(obs[\"left_team\"])):\n                if obs[\"left_team\"][i][0] < prey_x:\n                    players_amount += 1\n            prey_x_direction = obs[\"right_team_direction\"][obs[\"ball_owned_player\"]][0]\n            future_prey_x = prey_x + obs[\"right_team_direction\"][obs[\"ball_owned_player\"]][0]\n            future_prey_y = prey_y + obs[\"right_team_direction\"][obs[\"ball_owned_player\"]][1]\n            future_berzerker_x = berzerker_x + obs[\"left_team_direction\"][obs[\"active\"]][0]\n            future_berzerker_y = berzerker_y + obs[\"left_team_direction\"][obs[\"active\"]][1]\n            distance_to_prey = get_distance(berzerker_x, berzerker_y, prey_x, prey_y)\n            future_distance_to_prey = get_distance(future_berzerker_x, future_berzerker_y, future_prey_x, future_prey_y)\n            # if berzerker is not close to his own penalty zone\n            # and prey is beyond x position of too many players of berzerker's team\n            # and berzerker is close enough to prey\n            # and berzerker is running in direction of prey\n            if ((berzerker_x > -0.65 or abs(berzerker_y) > 0.3) and\n                    players_amount <= 7 and\n                    future_distance_to_prey < 0.015 and\n                    distance_to_prey > future_distance_to_prey):\n                return True\n        return False\n        \n    def get_action(obs, berzerker_x, berzerker_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        return Action.Slide\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef run_to_ball_bottom(obs, player_x, player_y):\n    \"\"\" run to the ball if it is to the bottom from player's position \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # ball is to the bottom from player's position\n        if (obs[\"ball\"][1] > player_y and\n                abs(obs[\"ball\"][0] - player_x) < 0.01):\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        return Action.Bottom\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef run_to_ball_bottom_left(obs, player_x, player_y):\n    \"\"\" run to the ball if it is to the bottom left from player's position \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # ball is to the bottom left from player's position\n        if (obs[\"ball\"][0] < player_x and\n                obs[\"ball\"][1] > player_y):\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        return Action.BottomLeft\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef run_to_ball_bottom_right(obs, player_x, player_y):\n    \"\"\" run to the ball if it is to the bottom right from player's position \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # ball is to the bottom right from player's position\n        if (obs[\"ball\"][0] > player_x and\n                obs[\"ball\"][1] > player_y):\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        return Action.BottomRight\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef run_to_ball_left(obs, player_x, player_y):\n    \"\"\" run to the ball if it is to the left from player's position \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # ball is to the left from player's position\n        if (obs[\"ball\"][0] < player_x and\n                abs(obs[\"ball\"][1] - player_y) < 0.01):\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        return Action.Left\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef run_to_ball_right(obs, player_x, player_y):\n    \"\"\" run to the ball if it is to the right from player's position \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # ball is to the right from player's position\n        if (obs[\"ball\"][0] > player_x and\n                abs(obs[\"ball\"][1] - player_y) < 0.01):\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        return Action.Right\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef run_to_ball_top(obs, player_x, player_y):\n    \"\"\" run to the ball if it is to the top from player's position \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # ball is to the top from player's position\n        if (obs[\"ball\"][1] < player_y and\n                abs(obs[\"ball\"][0] - player_x) < 0.01):\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        return Action.Top\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef run_to_ball_top_left(obs, player_x, player_y):\n    \"\"\" run to the ball if it is to the top left from player's position \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # ball is to the top left from player's position\n        if (obs[\"ball\"][0] < player_x and\n                obs[\"ball\"][1] < player_y):\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        return Action.TopLeft\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef run_to_ball_top_right(obs, player_x, player_y):\n    \"\"\" run to the ball if it is to the top right from player's position \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # ball is to the top right from player's position\n        if (obs[\"ball\"][0] > player_x and\n                obs[\"ball\"][1] < player_y):\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        return Action.TopRight\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n","41ae982f":"%%writefile -a submission.py\n# \"%%writefile -a submission.py\" will append the code below to submission.py,\n# it WILL NOT rewrite submission.py\n\ndef idle(obs, player_x, player_y):\n    \"\"\" do nothing, release all sticky actions \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        return True\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        return Action.Idle\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n        \ndef start_sprinting(obs, player_x, player_y):\n    \"\"\" make sure player is sprinting \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        if Action.Sprint not in obs[\"sticky_actions\"]:\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        return Action.Sprint\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n","53693e9f":"%%writefile -a submission.py\n# \"%%writefile -a submission.py\" will append the code below to submission.py,\n# it WILL NOT rewrite submission.py\n\ndef corner(obs, player_x, player_y):\n    \"\"\" perform a shot in corner game mode \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # it is corner game mode\n        if obs['game_mode'] == GameMode.Corner:\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        if player_y > 0:\n            if Action.TopRight not in obs[\"sticky_actions\"]:\n                return Action.TopRight\n        else:\n            if Action.BottomRight not in obs[\"sticky_actions\"]:\n                return Action.BottomRight\n        return Action.Shot\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef free_kick(obs, player_x, player_y):\n    \"\"\" perform a high pass or a shot in free kick game mode \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # it is free kick game mode\n        if obs['game_mode'] == GameMode.FreeKick:\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        # shot if player close to goal\n        if player_x > 0.5:\n            if player_y > 0:\n                if Action.TopRight not in obs[\"sticky_actions\"]:\n                    return Action.TopRight\n            else:\n                if Action.BottomRight not in obs[\"sticky_actions\"]:\n                    return Action.BottomRight\n            return Action.Shot\n        # high pass if player far from goal\n        else:\n            if Action.Right not in obs[\"sticky_actions\"]:\n                return Action.Right\n            return Action.HighPass\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef goal_kick(obs, player_x, player_y):\n    \"\"\" perform a short pass in goal kick game mode \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # it is goal kick game mode\n        if obs['game_mode'] == GameMode.GoalKick:\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        if (random.random() < 0.5 and\n                Action.TopRight not in obs[\"sticky_actions\"] and\n                Action.BottomRight not in obs[\"sticky_actions\"]):\n            return Action.TopRight\n        else:\n            if Action.BottomRight not in obs[\"sticky_actions\"]:\n                return Action.BottomRight\n        return Action.ShortPass\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef kick_off(obs, player_x, player_y):\n    \"\"\" perform a short pass in kick off game mode \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # it is kick off game mode\n        if obs['game_mode'] == GameMode.KickOff:\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        if player_y > 0:\n            if Action.Top not in obs[\"sticky_actions\"]:\n                return Action.Top\n        else:\n            if Action.Bottom not in obs[\"sticky_actions\"]:\n                return Action.Bottom\n        return Action.ShortPass\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef penalty(obs, player_x, player_y):\n    \"\"\" perform a shot in penalty game mode \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # it is penalty game mode\n        if obs['game_mode'] == GameMode.Penalty:\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        if (random.random() < 0.5 and\n                Action.TopRight not in obs[\"sticky_actions\"] and\n                Action.BottomRight not in obs[\"sticky_actions\"]):\n            return Action.TopRight\n        else:\n            if Action.BottomRight not in obs[\"sticky_actions\"]:\n                return Action.BottomRight\n        return Action.Shot\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n\ndef throw_in(obs, player_x, player_y):\n    \"\"\" perform a short pass in throw in game mode \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # it is throw in game mode\n        if obs['game_mode'] == GameMode.ThrowIn:\n            return True\n        return False\n        \n    def get_action(obs, player_x, player_y):\n        \"\"\" get action of this memory pattern \"\"\"\n        if Action.Right not in obs[\"sticky_actions\"]:\n            return Action.Right\n        return Action.ShortPass\n    \n    return {\"environment_fits\": environment_fits, \"get_action\": get_action}\n","15be94b4":"%%writefile -a submission.py\n# \"%%writefile -a submission.py\" will append the code below to submission.py,\n# it WILL NOT rewrite submission.py\n\ndef defence_memory_patterns(obs, player_x, player_y):\n    \"\"\" group of memory patterns for environments in which opponent's team has the ball \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # player don't have the ball\n        if obs[\"ball_owned_team\"] != 0:\n            return True\n        return False\n        \n    def get_memory_patterns(obs, player_x, player_y):\n        \"\"\" get list of memory patterns \"\"\"\n        # shift ball position\n        obs[\"ball\"][0] += obs[\"ball_direction\"][0] * 7\n        obs[\"ball\"][1] += obs[\"ball_direction\"][1] * 3\n        # if opponent has the ball and is far from y axis center\n        if abs(obs[\"ball\"][1]) > 0.07 and obs[\"ball_owned_team\"] == 1:\n            obs[\"ball\"][0] -= 0.01\n            if obs[\"ball\"][1] > 0:\n                obs[\"ball\"][1] -= 0.01\n            else:\n                obs[\"ball\"][1] += 0.01\n            \n        memory_patterns = [\n            start_sprinting,\n            khorne_slide,\n            run_to_ball_right,\n            run_to_ball_left,\n            run_to_ball_bottom,\n            run_to_ball_top,\n            run_to_ball_top_right,\n            run_to_ball_top_left,\n            run_to_ball_bottom_right,\n            run_to_ball_bottom_left,\n            idle\n        ]\n        return memory_patterns\n        \n    return {\"environment_fits\": environment_fits, \"get_memory_patterns\": get_memory_patterns}\n\ndef goalkeeper_memory_patterns(obs, player_x, player_y):\n    \"\"\" group of memory patterns for goalkeeper \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # player is a goalkeeper have the ball\n        if (obs[\"ball_owned_player\"] == obs[\"active\"] and\n                obs[\"ball_owned_team\"] == 0 and\n                obs[\"ball_owned_player\"] == 0):\n            return True\n        return False\n        \n    def get_memory_patterns(obs, player_x, player_y):\n        \"\"\" get list of memory patterns \"\"\"\n        memory_patterns = [\n            far_from_goal_shot,\n            idle\n        ]\n        return memory_patterns\n        \n    return {\"environment_fits\": environment_fits, \"get_memory_patterns\": get_memory_patterns}\n\ndef offence_memory_patterns(obs, player_x, player_y):\n    \"\"\" group of memory patterns for environments in which player's team has the ball \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # player have the ball\n        if obs[\"ball_owned_player\"] == obs[\"active\"] and obs[\"ball_owned_team\"] == 0:\n            return True\n        return False\n        \n    def get_memory_patterns(obs, player_x, player_y):\n        \"\"\" get list of memory patterns \"\"\"\n        memory_patterns = [\n            far_from_goal_shot,\n            far_from_goal_high_pass,\n            bad_angle_short_pass,\n            close_to_goalkeeper_shot,\n            close_to_opponent_short_pass,\n            go_through_opponents,\n            idle\n        ]\n        return memory_patterns\n        \n    return {\"environment_fits\": environment_fits, \"get_memory_patterns\": get_memory_patterns}\n\ndef other_memory_patterns(obs, player_x, player_y):\n    \"\"\" group of memory patterns for all other environments \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        return True\n        \n    def get_memory_patterns(obs, player_x, player_y):\n        \"\"\" get list of memory patterns \"\"\"\n        memory_patterns = [\n            idle\n        ]\n        return memory_patterns\n        \n    return {\"environment_fits\": environment_fits, \"get_memory_patterns\": get_memory_patterns}\n\ndef special_game_modes_memory_patterns(obs, player_x, player_y):\n    \"\"\" group of memory patterns for special game mode environments \"\"\"\n    def environment_fits(obs, player_x, player_y):\n        \"\"\" environment fits constraints \"\"\"\n        # if game mode is not normal\n        if obs['game_mode'] != GameMode.Normal:\n            return True\n        return False\n        \n    def get_memory_patterns(obs, player_x, player_y):\n        \"\"\" get list of memory patterns \"\"\"\n        memory_patterns = [\n            corner,\n            free_kick,\n            goal_kick,\n            kick_off,\n            penalty,\n            throw_in,\n            idle\n        ]\n        return memory_patterns\n        \n    return {\"environment_fits\": environment_fits, \"get_memory_patterns\": get_memory_patterns}\n","24385af5":"%%writefile -a submission.py\n# \"%%writefile -a submission.py\" will append the code below to submission.py,\n# it WILL NOT rewrite submission.py\n\n# list of groups of memory patterns\ngroups_of_memory_patterns = [\n    special_game_modes_memory_patterns,\n    goalkeeper_memory_patterns,\n    offence_memory_patterns,\n    defence_memory_patterns,\n    other_memory_patterns\n]\n","d87907d7":"%%writefile -a submission.py\n# \"%%writefile -a submission.py\" will append the code below to submission.py,\n# it WILL NOT rewrite submission.py\n\n# @human_readable_agent wrapper modifies raw observations \n# provided by the environment:\n# https:\/\/github.com\/google-research\/football\/blob\/master\/gfootball\/doc\/observation.md#raw-observations\n# into a form easier to work with by humans.\n# Following modifications are applied:\n# - Action, PlayerRole and GameMode enums are introduced.\n# - 'sticky_actions' are turned into a set of active actions (Action enum)\n#    see usage example below.\n# - 'game_mode' is turned into GameMode enum.\n# - 'designated' field is removed, as it always equals to 'active'\n#    when a single player is controlled on the team.\n# - 'left_team_roles'\/'right_team_roles' are turned into PlayerRole enums.\n# - Action enum is to be returned by the agent function.\n@human_readable_agent\ndef agent(obs):\n    \"\"\" Ole ole ole ole \"\"\"\n    # dictionary for Memory Patterns data\n    obs[\"memory_patterns\"] = {}\n    # We always control left team (observations and actions\n    # are mirrored appropriately by the environment).\n    controlled_player_pos = obs[\"left_team\"][obs[\"active\"]]\n    # get action of appropriate pattern in agent's memory\n    action = get_action_of_agent(obs, controlled_player_pos[0], controlled_player_pos[1])\n    # return action\n    return action\n","aeaec47b":"# Set up the Environment.\nfrom kaggle_environments import make\nenv = make(\"football\", debug=True, configuration={\"save_video\": True, \"scenario_name\": \"11_vs_11_kaggle\", \"running_in_notebook\": True})\n\n# this agent playing against default agent\n# output = env.run([\"\/kaggle\/working\/submission.py\", \"do_nothing\"])[-1]\n\n# this agent playing against itself\n# output = env.run([\"\/kaggle\/working\/submission.py\", \"\/kaggle\/working\/submission.py\"])[-1]\n\n# this agent playing against my best submitted agent so far\noutput = env.run([\"\/kaggle\/working\/submission.py\", \"..\/input\/gfootball-with-memory-patterns-best-bots\/GFootball with Memory Patterns v43.py\"])[-1]\n\nprint('Left player: reward = %s, status = %s, info = %s' % (output[0][\"reward\"], output[0][\"status\"], output[0][\"info\"]))\nprint('Right player: reward = %s, status = %s, info = %s' % (output[1][\"reward\"], output[1][\"status\"], output[1][\"info\"]))\nenv.render(mode=\"human\", width=800, height=600)\n","1d0a5a46":"# Defence Memory Patterns\nI suggest keeping them in alphabetical order","8e6129a0":"# *The \"goal\" ;) of this notebook is to popularize, to the extent of my modest abilities, usage of functional programming and readable, scalable architectures.*","ca5eb32d":"# Functions and Imports\nI suggest keeping them in alphabetical order","2d8c753e":"# Install Required Tools","4065b270":"# Explanation of The Architecture\n* In <code><b>agent<\/b><\/code> function data of the current environment is modified and <code><b>get_action_of_agent<\/b><\/code> function is called to get the action that will be returned.\n* In <code><b>get_action_of_agent<\/b><\/code> function list of memory patterns is provided by <code><b>find_patterns<\/b><\/code> function, then action of the first memory pattern in that list, whose constraints are met by current environment, is returned.\n* All Groups of Memory Patterns and all Memory Patterns are just functions that are taking the same arguments: <code><b>obs, player_x, player_y<\/b><\/code> and return a dictionary with at least two functions.\n* First function in that dictionary for both Groups of Memory Patterns and Memory Patterns is <code><b>environment_fits<\/b><\/code>, it returns True or False, in case constraints described in this function are met by current environment or not. If this function returns True, than the Group of Memory Patterns or Memory Pattern it belongs to is selected for future processing. If this function returns False, than search for appropriate Group of Memory Patterns or Memory Pattern continues.\n* Second function is called only when this Group of Memory Patterns or Memory Pattern was selected for future processing. In any Group of Memory Patterns the second function is <code><b>get_memory_patterns<\/b><\/code> that return list of memory patterns. In any Memory Pattern the second function is <code><b>get_action<\/b><\/code> that return action of the memory pattern it belongs to.\n* In all Groups of Memory Patterns and all Memory Patterns functions <code><b>environment_fits<\/b><\/code>, <code><b>get_memory_patterns<\/b><\/code> and <code><b>get_action<\/b><\/code> take <code><b>obs, player_x, player_y<\/b><\/code> as arguments.","caff8040":"# Groups of Memory Patterns\nI suggest keeping them in alphabetical order","d87caa82":"# Play Game","82c1c49d":"# Submit to Competition\n1. \"Save & Run All\" (commit) this Notebook\n1. Go to the notebook viewer\n1. Go to \"Data\" section and find submission.py file.\n1. Click \"Submit to Competition\"\n1. Go to [My Submissions](https:\/\/www.kaggle.com\/c\/football\/submissions) to view your score and episodes being played.","1a2ac88f":"# Agent\nDetailed description of the GFootball observations is available [here](https:\/\/github.com\/google-research\/football\/blob\/master\/gfootball\/doc\/observation.md).","b09894be":"# Offence Memory Patterns\nI suggest keeping them in alphabetical order","c4898a3e":"# Global Variables\nI suggest keeping them in alphabetical order","6bfb21e6":"# Memory Patterns of Special Game Modes\nI suggest keeping them in alphabetical order","7a3d9ebb":"# Memory Patterns Suitable for any Environment\nI suggest keeping them in alphabetical order"}}