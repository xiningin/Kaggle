{"cell_type":{"3466608c":"code","9f5c10c7":"code","d7d50cd8":"code","ce368bbd":"code","8c0d9bc4":"code","33b0bea6":"code","546ab8d6":"code","2527a845":"code","94e74b15":"code","48a4118a":"code","949e711c":"code","77837af0":"code","cd1c3393":"code","69f23366":"code","7432bbec":"code","e00d6325":"code","123a2a5f":"code","53c50554":"code","36c16c65":"code","5167de6c":"code","954583fb":"code","f20a1155":"code","9ee8929e":"code","7e88deee":"code","2ea059de":"code","da7cf181":"code","e4d42bf5":"code","e169a152":"code","43e7504e":"code","eb226b12":"code","86084649":"code","e6ce2348":"code","0823b374":"code","55da6834":"code","c8e60986":"code","495c4472":"code","2a15b288":"code","ef078aa8":"code","5c17e76b":"code","69c62623":"code","7896adf3":"code","d220770a":"code","1ae8ef09":"code","4836f8f7":"code","6d272493":"code","97a147ae":"code","e5d6d936":"code","e28c3b60":"code","cf40b214":"markdown","605fa6f6":"markdown","dcb4c038":"markdown","63e45e2f":"markdown","87b1e2d0":"markdown","91cc3351":"markdown","ceefb977":"markdown","d7fa3b6d":"markdown","479976f6":"markdown","d4faf16e":"markdown","0851079c":"markdown","1a291fce":"markdown","988e3165":"markdown","e66134f4":"markdown","75e91d3d":"markdown","dcf922b6":"markdown","67bbf17a":"markdown","c0799f10":"markdown"},"source":{"3466608c":"#\u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\n\nimport numpy as np # linear algebra\nimport pandas as pd# data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures, OrdinalEncoder\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score, roc_auc_score, roc_curve\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import plot_confusion_matrix, plot_roc_curve, plot_precision_recall_curve\n\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f5c10c7":"import warnings\nwarnings.filterwarnings(\"ignore\")","d7d50cd8":"train = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/train.csv')\ntest= pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/test.csv')","ce368bbd":"test.info()","8c0d9bc4":"#  \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ntrain['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ntest['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ntest['default'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\ndata = test.append(train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","33b0bea6":"data","546ab8d6":"data.info()","2527a845":"data.isnull().sum()","94e74b15":"data['education'].value_counts().plot.barh()","48a4118a":"data = data.fillna('SCH')","949e711c":"data.isnull().sum()","77837af0":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438, \u043a\u0430\u043a\u0438\u0435 - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0438 \u043a\u0430\u043a\u0438\u0435 - \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435\ndata.nunique()","cd1c3393":"# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nnum_cols = [\"age\", \"decline_app_cnt\", \"score_bki\",\n            \"bki_request_cnt\", \"income\"]\n\n# \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nbin_cols = [\"sex\", \"car\", \"car_type\", \"good_work\", \"foreign_passport\"]\n\n# \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols = [\"education\", \"region_rating\", \"home_address\", \"work_address\", \"sna\", \"first_time\"]","69f23366":"data.app_date = pd.to_datetime(data.app_date)\ndata['app_day'] = data.app_date.dt.day\ndata['app_month'] = data.app_date.dt.month\ndata[\"app_weekday\"] = data[\"app_date\"].dt.weekday\n","7432bbec":"data.drop([\"app_date\"], axis=1, inplace=True)","e00d6325":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\nnum_cols.extend([\"app_day\", \"app_month\", \"app_weekday\"])","123a2a5f":"for col in num_cols:\n    plt.figure()\n    plt.title(f\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 {col}\")\n    sns.distplot(data[col], kde=False)","53c50554":"# \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442  \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0432\u043f\u0440\u0430\u0432\u043e, \u043c\u044b \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c, \u0434\u043b\u044f \u0442\u043e\u0433\u043e,\n# \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435\nsfeat = [\"age\", \"decline_app_cnt\", \"bki_request_cnt\", \"income\"]\ndata[sfeat] = np.log(data[sfeat] + 1)\nfor col in sfeat:\n    plt.figure()\n    plt.title(f\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 {col}\")\n    sns.distplot(data[col], kde=False)","36c16c65":"for i in num_cols:\n    plt.figure()\n    sns.boxplot(data[i][data[i] > 0].dropna())\n    plt.title(i)\n    plt.show()","5167de6c":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439\nplt.figure(figsize=(8, 5))\nsns.heatmap(data[num_cols].corr().abs(), vmin=0, vmax=1,\n            annot=True, fmt=\".2f\", cmap=\"YlGnBu\")","954583fb":"#\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0430\u0448\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\nimp_num = pd.Series(f_classif(data[num_cols], data['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","f20a1155":"bin_cols = [col for col in bin_cols if col not in [\"car\"]]\ndata.drop([\"car\"], axis=1, inplace=True)","9ee8929e":"#\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nlabel_encoder = LabelEncoder()\n\nmapped_education = pd.Series(label_encoder.fit_transform(data['education']))\nprint(dict(enumerate(label_encoder.classes_)))","7e88deee":"data['education'] = mapped_education","2ea059de":"#\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nlabel_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    data[column] = label_encoder.fit_transform(data[column])\n    \n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndata.head()","da7cf181":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044e\npoly = PolynomialFeatures(2, include_bias=False)\npoly_data = poly.fit_transform(data[num_cols])[:, len(num_cols):]\npoly_cols = poly.get_feature_names()[len(num_cols):]\npoly_df = pd.DataFrame(poly_data, columns=poly_cols)\ndata = data.join(poly_df,  how='left')","e4d42bf5":"#\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndata[num_cols] = pd.DataFrame(StandardScaler().fit_transform(data[num_cols]), columns = data[num_cols].columns)","e169a152":"data.info()","43e7504e":"data = pd.get_dummies(\n    data, columns=['home_address', 'work_address', 'sna', 'first_time'], dummy_na=False)","eb226b12":"train = data.query('sample == 1').drop(['sample'], axis=1)\ntest = data.query('sample == 0').drop(['sample'], axis=1)","86084649":"#id_test = test.client_id\n#Y = train['default'].values\n#data_train=train.drop([\"client_id\", \"default\"], axis=1, inplace=True)\n#data_test=test.drop([\"client_id\", \"default\"], axis=1, inplace=True)\n#X = train.values\n#test = test.values","e6ce2348":"X = train.drop(['client_id','default'], axis=1).values\nY = train['default'].values\n\n# \u0414\u0435\u043b\u044e \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438,  \n# \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=42)","0823b374":"\ntest.shape, train.shape, X_train.shape, X_test.shape","55da6834":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0442\u0438\u043f\u044b \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n#penalty = ['l1', 'l2']\n\n# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n#C = np.logspace(0, 4, 10)\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n#hyperparameters = dict(C=C, penalty=penalty)\n\n#model = LogisticRegression(solver='lbfgs', max_iter=1000)\n#model.fit(X_train, y_train)\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c 5-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n#clf = GridSearchCV(model, hyperparameters, cv=5, verbose=0)\n\n#best_model = clf.fit(X_train, y_train)\n\n# View best hyperparameters\n#print('\u041b\u0443\u0447\u0448\u0435\u0435 Penalty:', best_model.best_estimator_.get_params()['penalty'])\n#print('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])","c8e60986":"logreg = LogisticRegression(solver='lbfgs', max_iter=1000)\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)","495c4472":"probs = logreg.predict_proba(X_test)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","2a15b288":"def show_confusion_matrix(lastmodel):\n  \n    class_names = ['NonDefault', 'Default']\n    titles_options = [(\"Confusion matrix\", None)]\n    for title, normalize in titles_options:\n        disp = plot_confusion_matrix(lastmodel, X_test, y_test, \n                                     display_labels=class_names, \n                                     cmap=plt.cm.Blues, \n                                     normalize=normalize)\n        disp.ax_.set_title(title)\n\n        print(title)\n        print(disp.confusion_matrix)\n\n    plt.show()","ef078aa8":"show_confusion_matrix(logreg)","5c17e76b":"def count_metrics(y_test, y_pred, y_probs):    \n    metrics = {}\n    metrics['accuracy'] = accuracy_score(y_test, y_pred)\n    metrics['f1'] = f1_score(y_test, y_pred)\n    metrics['roc_auc'] = roc_auc_score(y_test, y_probs)  \n    metrics['confusion'] = confusion_matrix(y_test, y_pred)\n    return metrics \n\ndef show_roc_auc(y_test, y_probs):\n    fpr, tpr, threshold = roc_curve(y_test, y_probs)\n    roc_auc = roc_auc_score(y_test, y_probs)\n    plt.figure()\n    plt.plot([0, 1], label='Baseline', linestyle='--')\n    plt.plot(fpr, tpr, label = 'Regression')\n    plt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.legend(loc = 'lower right')\n    plt.show()","69c62623":"#\u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\nclasses = train.default.value_counts(ascending=True)\nminor = train[train.default == classes.index[0]]\nother = train[train.default.isin(classes.index[1:])][:classes.iloc[0]]\ndata_train_balanced = pd.concat([other, minor])\n\nX = data_train_balanced.drop(['client_id','default'], axis=1).values\nY = data_train_balanced['default'].values\n\n# \u0414\u0435\u043b\u044e \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=42)\n\n#\u0441\u0430\u043c\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\nmodel_balanced = LogisticRegression(solver = 'liblinear')\nmodel_balanced.fit(X_train, y_train)\ny_pred = model_balanced.predict(X_test)\ny_probs = model_balanced.predict_proba(X_test)[:,1]\n\n#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u044e \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nmetrics_balanced = count_metrics(y_test, y_pred, y_probs)\n\n\nshow_roc_auc(y_test, y_probs)\n","7896adf3":"show_confusion_matrix(model_balanced)","d220770a":"# \u0417\u0430\u0434\u0430\u044e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\nC = np.logspace(0, 4, 10)\n\npenalty = ['l1','l2']\nhyperparameters = dict(C=C, penalty=penalty)\n\nmodel = LogisticRegression(solver = 'liblinear')\nmodel.fit(X_train, y_train)\n\nclf = GridSearchCV(model, hyperparameters, cv=5, verbose=0)\n\nbest_model = clf.fit(X_train, y_train)\n\nprint('\u041b\u0443\u0447\u0448\u0438\u0439 penalty:', best_model.best_estimator_.get_params()['penalty'])\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])","1ae8ef09":"#\u043e\u0431\u0443\u0447\u0430\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\nmodel_finish = LogisticRegression(penalty='l1', C=1.0, max_iter=1000, solver = 'liblinear')\nmodel_finish.fit(X_train, y_train)\n\ny_pred = model_finish.predict(X_test)\ny_probs = model_finish.predict_proba(X_test)[:,1]\n\n#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u044e \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nmetrics_finish = count_metrics(y_test, y_pred, y_probs)\n\nshow_roc_auc(y_test, y_probs)\n","4836f8f7":"show_confusion_matrix(model_finish)","6d272493":"num_cols_std = StandardScaler().fit_transform(test[num_cols].values)\nX_test = np.hstack([test.drop(num_cols + ['client_id','default'], axis=1), num_cols_std])\ny_probs = model_finish.predict_proba(X_test)[:,1]\ntest['default'] = y_probs","97a147ae":"submission = test[['client_id','default']]\nsubmission.to_csv('submission.csv', index=False)\nsubmission.sample(10)","e5d6d936":"#\u0440\u0430\u0441\u0447\u0435\u0442 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n#num_cols_std = StandardScaler().fit_transform(test[num_cols].values)\n#X_test = np.hstack([test.drop(num_cols + ['client_id','default'], axis=1), num_cols_std])\n#y_probs = model_finish.predict_proba(X_test)[:,1]\n#test['default'] = y_probs","e28c3b60":"#\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\n#submission = test[['client_id','default']]\n#submission.to_csv('submission.csv', index=False)\n#submission","cf40b214":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u0445\u0443\u0436\u0435","605fa6f6":"# **\u0417\u0430\u0434\u0430\u0447\u0430**\n\n\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u043a\u043e\u0440\u0438\u043d\u0433 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0430\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430.","dcb4c038":"**\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**","63e45e2f":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\nclient_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\neducation - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nsex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\nage - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\ncar - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\ncar_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\ndecline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\ngood_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\nbki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\nhome_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\nwork_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\nincome - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\nforeign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\nsna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\nfirst_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\nscore_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\nregion_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\napp_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\ndefault - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","87b1e2d0":"# **\u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432**","91cc3351":"\u0418\u0437\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u0434\u0430\u0442\u043e\u0439","ceefb977":"\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a education ","d7fa3b6d":"# **\u041c\u043e\u0434\u0435\u043b\u044c \u0441 underfitting**","479976f6":"\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 default \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435","d4faf16e":"\u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 12 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0432\u0438\u0434\u0435 \u0447\u0438\u0441\u0435\u043b \u0438 6 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a.","0851079c":"**\u0412\u0418\u0417\u0423\u0410\u041b\u0418\u0417\u0410\u0426\u0418\u042f**","1a291fce":"\u0412\u042b\u0412\u041e\u0414. \u041d\u0415\u0421\u041c\u041e\u0422\u0420\u042f \u041d\u0410 \u0425\u041e\u0420\u041e\u0428\u0418\u0419 \u041f\u041e\u041a\u0410\u0417\u0410\u0422\u0415\u041b\u042c ROC_AUC, \u041c\u041e\u0414\u0415\u041b\u042c \u041d\u0415\u0423\u0414\u041e\u0412\u041b\u0415\u0422\u0412\u041e\u0420\u0418\u0422\u0415\u041b\u042c\u041d\u0410.","988e3165":"\u041d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 app_day \u0438 app_month, decline_app_cnt \u0438 score_bki","e66134f4":"**\u0420\u0415\u0413\u0423\u041b\u042f\u0420\u0418\u0417\u0410\u0426\u0418\u042f**","75e91d3d":"\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u043c \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0432\u043f\u0440\u0430\u0432\u043e. \u041d\u0443\u0436\u043d\u043e \u0438\u0445 \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c","dcf922b6":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0447\u0430\u0449\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f SCH","67bbf17a":"# ****\u041d\u0430\u0438\u0432\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c****","c0799f10":"\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435"}}