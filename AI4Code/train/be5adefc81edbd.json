{"cell_type":{"96d0038a":"code","8d6506c9":"code","8859c6b7":"code","5bf77088":"code","196bac57":"code","35db1ba7":"code","bf7ff5a4":"code","5286ef0e":"code","188b0b20":"code","cd737fcc":"code","f23a4d06":"code","7aebcec0":"code","b12478ae":"code","7392bcfd":"code","464fb081":"markdown","ea4b989f":"markdown","e99f8981":"markdown","4a58015a":"markdown","33e2617e":"markdown","ebfbdd4c":"markdown","8125c73f":"markdown","310a9b2c":"markdown","d336aeed":"markdown","2419de05":"markdown","ffaba70e":"markdown","2921cdec":"markdown"},"source":{"96d0038a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pprint\nsns.set()\n\nimport os\nprint(os.listdir(\"..\/input\"))","8d6506c9":"# Load the dataset\ndata = pd.read_csv('..\/input\/creditcard.csv')\n\ndata.head()","8859c6b7":"# identify the features and the target in the data set\nfeatures = data.columns[:-1]\nprint('The features are as follows: {}'.format(features))\ntarget = data.columns[-1]\nprint('The target is: ' + target)","5bf77088":"# Create an X variable containing the features and a y variable containing only the target variable\nX = data[features]\ny = data[target]","196bac57":"# Plot histograms of each parameter \nX.hist(figsize = (20, 20))\nplt.show()","35db1ba7":"# Count frequency of target class types\ncount_target = pd.value_counts(y, sort = True).sort_index()\ncount_target.plot(kind = 'bar')\nplt.xticks(rotation=0)\nplt.title(\"Fraud class histogram\")\nplt.xlabel(\"Class\")\nplt.ylabel(\"Frequency\")\nplt.show()","bf7ff5a4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\n# Scale `Amount` and `Time` column values and assign to new columns\nX['normAmount'] = scaler.fit_transform(X['Amount'].values.reshape(-1, 1)) \nX['normTime'] = scaler.fit_transform(X['Time'].values.reshape(-1, 1))\n\n# Drop pre-scaled `Time` and `Amount` values from the feature dataset\nX = X.drop(['Time','Amount'],axis=1)\n\n# Plot histograms of each parameter \nX.hist(figsize = (20, 20))\nplt.show()","5286ef0e":"# Split the data set using 'train_test_split' function\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,precision_recall_curve,auc,roc_auc_score,roc_curve,recall_score,classification_report \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)\n\n# Instantiate the model\nfrom sklearn.linear_model import LogisticRegression\nlg_model = LogisticRegression(solver = 'liblinear')\n\n# Train the model using 'fit' method\nlg_model.fit(X_train, y_train)\n\n# Test the model using 'predict' method\ny_pred = lg_model.predict(X_test)\n\n# Print the classification report \nprint(classification_report(y_test, y_pred))\n\ncm = confusion_matrix(y_test,y_pred)\n\n# print confusion matrix\nax= plt.subplot()\nsns.heatmap(cm, annot=True, fmt = 'd', ax = ax); #annot=True to annotate cells\n\n# labels, title and ticks\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \nax.set_title('Logistic regression: Confusion Matrix'); \nax.xaxis.set_ticklabels(['Non-fradulent', 'Fradulent']); ax.yaxis.set_ticklabels(['Non-fradulent', 'Fradulent']);\n\nlg_model_accuracy = lg_model.score(X_test, y_test)\nprint(\"Model accuracy: \", lg_model_accuracy)","188b0b20":"y_pred_prob = lg_model.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.plot(fpr, tpr, label='Logistic Regression')\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title('Logistic Regression ROC Curve')\nplt.show()\n\nprint('The ROC AUC score is: {}'.format(roc_auc_score(y_test, y_pred_prob)))","cd737fcc":"#Area Under the Precision-Recall Curve (AUPRC)\nprecision, recall, thresholds = precision_recall_curve(y_test, y_pred_prob)\n# Plot comparison to no-skill model\nplt.plot([0, 1], [0.5, 0.5], linestyle='--', label='Unskilled model')\n# plot the roc curve for the model\nplt.plot(recall, precision, marker='.')\nplt.xlabel(\"Recall\")\nplt.ylabel(\"Precision\")\nplt.title('Logistic Regression Precision-Recall Curve')\n# show the plot\nplt.show()","f23a4d06":"from sklearn.model_selection import cross_val_score\n\n# Number of data points in the minority class\nnumber_records_fraud = len(y[y.values == 1])\nfraud_indices = np.array(y[y.values == 1].index)\n\n# Picking the indices of the normal classes\nnormal_indices = y[y.values == 0].index\n\n# Out of the indices we picked, randomly select an x number (== number_records_fraud)\nrandom_normal_indices = np.random.choice(normal_indices, number_records_fraud, replace = False)\nrandom_normal_indices = np.array(random_normal_indices)\n\n# Appending the 2 indices\nunder_sample_indices = np.concatenate([fraud_indices,random_normal_indices])\n\n# Under sample dataset\nunder_sample_data = data.iloc[under_sample_indices,:]\n\n#X_undersample = under_sample_data.ix[:, under_sample_data.columns != 'Class']\n#y_undersample = under_sample_data.ix[:, under_sample_data.columns == 'Class']\n\n\n# Under sample dataset\nX_undersample = X.iloc[under_sample_indices,:]\ny_undersample = y.iloc[under_sample_indices]\n\n# Showing ratio\nprint(\"Percentage of normal transactions: \", len(under_sample_data[under_sample_data.Class == 0])\/len(under_sample_data))\nprint(\"Percentage of fraud transactions: \", len(under_sample_data[under_sample_data.Class == 1])\/len(under_sample_data))\nprint(\"Total number of transactions in resampled data: \", len(under_sample_data))\n\n# Undersampled dataset\nX_train_undersample, X_test_undersample, y_train_undersample, y_test_undersample = train_test_split(X_undersample\n                                                                                                   ,y_undersample\n                                                                                                   ,test_size = 0.3\n                                                                                                   ,random_state = 1)\nprint(\"\")\nprint(\"Number transactions training dataset: \", len(X_train_undersample))\nprint(\"Number transactions test dataset: \", len(X_test_undersample))\nprint(\"Total number of transactions: \", len(X_train_undersample)+len(X_test_undersample))","7aebcec0":"# Instantiate the model\nfrom sklearn.linear_model import LogisticRegression\nlg_model = LogisticRegression(solver = 'liblinear')\n\n# Train the model using 'fit' method\nlg_model.fit(X_train_undersample, y_train_undersample)\n\n# Test the model using 'predict' method\ny_pred_undersample = lg_model.predict(X_test_undersample)\n\n# Print the classification report \nprint(classification_report(y_test_undersample, y_pred_undersample))\n\ncm_undersample = confusion_matrix(y_test_undersample,y_pred_undersample)\n\n# print confusion matrix\nax= plt.subplot()\nsns.heatmap(cm_undersample, annot=True, fmt = 'd', ax = ax); #annot=True to annotate cells\n\n# labels, title and ticks\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \nax.set_title('Logistic regression: Confusion Matrix'); \nax.xaxis.set_ticklabels(['Non-fradulent', 'Fradulent']); ax.yaxis.set_ticklabels(['Non-fradulent', 'Fradulent']);\n\nlg_model_accuracy_undersample = lg_model.score(X_test_undersample, y_test_undersample)\nprint(\"Model accuracy: \", lg_model_accuracy_undersample)\n\n\n#cv_scores = cross_val_score(lg_model, X, y, cv=5, scoring='roc_auc')\n#print(\"The scores of 5-fold cross-validation are: {}\".format(cv_scores))\n#print(\"The mean cross-validation score is: {}\".format(np.mean(cv_scores)))","b12478ae":"y_pred_prob_undersample = lg_model.predict_proba(X_test_undersample)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test_undersample, y_pred_prob_undersample)\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.plot(fpr, tpr, label='Logistic Regression')\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title('Logistic Regression ROC Curve')\nplt.show()\n\nprint('The ROC AUC score is: {}'.format(roc_auc_score(y_test_undersample, y_pred_prob_undersample)))","7392bcfd":"#Area Under the Precision-Recall Curve (AUPRC)\nprecision, recall, thresholds = precision_recall_curve(y_test_undersample, y_pred_prob_undersample)\n# Plot comparison to no-skill model\nplt.plot([0, 1], [0.5, 0.5], linestyle='--', label='Unskilled model')\n# plot the roc curve for the model\nplt.plot(recall, precision, marker='.')\nplt.xlabel(\"Recall\")\nplt.ylabel(\"Precision\")\nplt.title('Logistic Regression Precision-Recall Curve')\n# show the plot\nplt.show()","464fb081":"## Supervised machine learning model - Logistic regression\n\nThe first model we'll consider will be a Logistic Regression model. We split the dataset into training and test set and train our model. We then predict the target on the test set and produce a classification report, an accuracy score, and confusion matrix.","ea4b989f":"The AUPRC (Area Under the Precision-Recall Curve) shows the trade-off between precision and recall: As recall increases, precision plumets to a point that above 0.5 of recall precision is no better than an unskilled model, depicted by the 0.5 line. ","e99f8981":"## Resampling and tuning the classifier's parameters\n\nIn order to address the skewed sample, I've adopted [oparga3's](https:\/\/www.kaggle.com\/joparga3) [code for under-sampling](https:\/\/www.kaggle.com\/joparga3\/in-depth-skewed-data-classif-93-recall-acc-now). The idea behind undersampling in this case is creating a 50\/50 ratio for class 1 (fadulent) and class 0 (non-fadulent), but randomly selecting a number of observations from the majority class (class 0 in this case) that equals that of the number of observations from the minority class (class 1).","4a58015a":"## Looking ahead\n\nNext I'd like to look at SVM and Decision Tree models, but for now I'm quite happy with the the logistic regression model here.","33e2617e":"## Data preparation\n\nNext we prepare the features for the machine learning algorithm. The machine learning algorithm requires standard normally distributed data. In the histograms above we saw that the anomymized features were all scaled (via PCA transformation) but not the `Time` and `Amount` ones. We then scale these two features.","ebfbdd4c":"Our goal is to have the highest success rate possible in detecting fradulent trasactions. This means is that we want to have 100% success rate for TPs (true positives) and the lowest error rate for FNs (false negatives), the latter so we don't miss any fradulent transactions. This means that the most important score in the confusion matrix above is the recall rate (TP\/(TP+FN)). The recall score is quite shabby, but this is not surprising given that the training set is skewed toward non-fradulent transactions.\n\nThe ROC curve below shows that our model is quite good for detecting true positives and minimizing false positives, but it doesn't say anything about the false negatives, i.e., those fadulent transactions that fly under the radar. We'll move on to the precision-recall scores to get a better idea of how the model fares with respect to false negatives.","8125c73f":"Once we've created the feature variable (X) and the target variable (y), we next view the histograms of each of the features below. We see that the unlabeled feature values have been transformed --- they're the result of a PCA transformation. `Amount` isn't and neither is `Time` (between transaction), the latter displaying a bimodal distribution (with two modes: one mode around 50K seconds, or 13.89 hours and the other around 150k seconds, or 41.67 hours).","310a9b2c":"## Logistic regression on undersampled data\n\nBelow the logistic model is run on the undersampled yet balanced in terms of the representation of the two classes. Precision for the detection of fradulent transaction is now 0.93 and recall is 0.94, much better results than with the much larger but highly unbalanced set before. Obviously, we want an even better model, one that catches those extra 6% fradulent transaction.","d336aeed":"Next let's look at the distribution of class types. It looks like the daraset we have is drastically biased toward non-fradulent transactions (284,315) in comparison with fradulent transactions (492).","2419de05":"# Credit card fraud detection\n\nThe goal of this project is to implement a machine learning algorithm to detect credit card fraud based on a dataset that contains credit card transactions made by european cardholders. This dataset includes transactions that occurred in the course of two days in September 2013, with 492 fradulent transactions out of a total of 284,315 transactions. The dataset is thus highly unbalanced with the positive class (frauds) accounting for just 0.17% of all transactions. This will be addressed later in the discussion of the best model and sampling trategy. The dataset has 30 input features, 28 of which anonymized, and 1 target variable.","ffaba70e":"## Data description\n\nThe loaded dataset below includes 30 input features with only two of which, `Time` and `Amount`, being labeled. This doesn't allow us to do EDA on most of the features.","2921cdec":"The model's precision-recall curve is what we're looking for: No huge trade off between precision and recall but rather a similarly high rates for both precision and recall."}}