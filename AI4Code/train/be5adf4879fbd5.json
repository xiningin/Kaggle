{"cell_type":{"020daf52":"code","a3515ef8":"code","e7c66119":"code","212fb921":"code","92fac54c":"code","73fb60fe":"code","7bb6cf9f":"code","41382a25":"code","1729a820":"code","ea680be4":"code","33089348":"code","e97a5fa8":"code","b5fd4aa6":"code","e850bb06":"code","0fba7dd0":"code","7cf060a4":"code","40ac070c":"code","42d52fbf":"code","0d1549e1":"code","83f5e283":"code","5771bc41":"code","d3818e0c":"code","ebb10a34":"code","06967b55":"code","a366469d":"code","936b0a71":"code","6cd6cff8":"code","9d02ae20":"code","bad667e0":"code","68f4b760":"code","c9683801":"code","0cc0f984":"code","1ffc5aae":"code","f9c04d0b":"code","85e2e93a":"code","50566b3d":"code","bd78e094":"code","60aa7a97":"code","e5dacfd1":"code","26a022ac":"code","e8c63225":"code","6a7b34a6":"markdown","fd4d498e":"markdown","89ed1747":"markdown","5f90d322":"markdown","62c0ac60":"markdown","d73fce39":"markdown","0b12b883":"markdown"},"source":{"020daf52":"# Data manipulation\nimport numpy as np\nimport pandas as pd\n\n# Data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Display propertice\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)\n\n# Date\nimport datetime\n\n# Maps\nimport geopandas as gpd\nimport pycountry\n\nfrom math import pi\n\n# Display in Jupyter\nfrom IPython.display import display, HTML","a3515ef8":"# Load dataset\ndf_fifa19 = pd.read_csv('..\/input\/data.csv')","e7c66119":"# Show the first five rows\ndf_fifa19.head()","212fb921":"# Show the info about dataset\ndf_fifa19.info()","92fac54c":"# Show some statistics about dataset\ndf_fifa19.describe()","73fb60fe":"# Shape of dataset (it has 17790 row and 87 columns)\ndf_fifa19.shape","7bb6cf9f":"# Number of unique elements in dataset\ndf_fifa19.nunique()","41382a25":"# I check where there are NaN values\ndf_fifa19.isnull().any()","1729a820":"# What columns are in dataset?\ndf_fifa19.columns","ea680be4":"# I choose interesting to me columns. Later I will use them for analysis.\nchosen_columns = [\n    'Name',\n    'Age',\n    'Nationality',\n    'Overall',\n    'Potential',\n    'Special',\n    'Acceleration',\n    'Aggression',\n    'Agility',\n    'Balance',\n    'BallControl',\n    'Body Type',\n    'Composure',\n    'Crossing',\n    'Curve',\n    'Club',\n    'Dribbling',\n    'FKAccuracy',\n    'Finishing',\n    'GKDiving',\n    'GKHandling',\n    'GKKicking',\n    'GKPositioning',\n    'GKReflexes',\n    'HeadingAccuracy',\n    'Interceptions',\n    'International Reputation',\n    'Jersey Number',\n    'Jumping',\n    'Joined',\n    'LongPassing',\n    'LongShots',\n    'Marking',\n    'Penalties',\n    'Position',\n    'Positioning',\n    'Preferred Foot',\n    'Reactions',\n    'ShortPassing',\n    'ShotPower',\n    'Skill Moves',\n    'SlidingTackle',\n    'SprintSpeed',\n    'Stamina',\n    'StandingTackle',\n    'Strength',\n    'Value',\n    'Vision',\n    'Volleys',\n    'Wage',\n    'Weak Foot',\n    'Work Rate'\n]","33089348":"# I create DataFrame with chosen columns\ndf = pd.DataFrame(df_fifa19, columns = chosen_columns)","e97a5fa8":"# The five random rows\ndf.sample(5)","b5fd4aa6":"# Correlation heatmap\nplt.rcParams['figure.figsize']=(25,16)\nhm=sns.heatmap(df[['Age', 'Overall', 'Potential', 'Value', 'Wage',\n                'Acceleration', 'Aggression', 'Agility', 'Balance', 'BallControl', \n                'Body Type','Composure', 'Crossing','Dribbling', 'FKAccuracy', 'Finishing', \n                'HeadingAccuracy', 'Interceptions','International Reputation',\n                'Joined', 'Jumping', 'LongPassing', 'LongShots',\n                'Marking', 'Penalties', 'Position', 'Positioning',\n                'ShortPassing', 'ShotPower', 'Skill Moves', 'SlidingTackle',\n                'SprintSpeed', 'Stamina', 'StandingTackle', 'Strength', 'Vision',\n                'Volleys']].corr(), annot = True, linewidths=.5, cmap='Blues')\nhm.set_title(label='Heatmap of dataset', fontsize=20)\nhm;","e850bb06":"# Scater plot shows correlation between Acceleration and other chosen features\ndef make_scatter(df):\n    feats = ('Agility', 'Balance', 'Dribbling', 'SprintSpeed')\n    \n    for index, feat in enumerate(feats):\n        plt.subplot(len(feats)\/4+1, 4, index+1)\n        ax = sns.regplot(x = 'Acceleration', y = feat, data = df)\n\nplt.figure(figsize = (20, 20))\nplt.subplots_adjust(hspace = 0.4)\n\nmake_scatter(df)","0fba7dd0":"# Histogram: number of players's age\nsns.set(style =\"dark\", palette=\"colorblind\", color_codes=True)\nx = df.Age\nplt.figure(figsize=(12,8))\nax = sns.distplot(x, bins = 58, kde = False, color='g')\nax.set_xlabel(xlabel=\"Player\\'s age\", fontsize=16)\nax.set_ylabel(ylabel='Number of players', fontsize=16)\nax.set_title(label='Histogram of players age', fontsize=20)\nplt.show()","7cf060a4":"# The five eldest players\neldest = df.sort_values('Age', ascending = False)[['Name', 'Nationality', 'Age']].head(3)\neldest.set_index('Name', inplace=True)\nprint(eldest)","40ac070c":"# The five youngest players\neldest = df.sort_values('Age', ascending = True)[['Name', 'Nationality', 'Age']].head(22)\neldest.set_index('Name', inplace=True)\nprint(eldest)","42d52fbf":"# Compare six clubs in relation to age\nsome_clubs = ('Juventus', 'Real Madrid', 'Paris Saint-Germain', 'FC Barcelona', 'Legia Warszawa', 'Manchester United')\ndf_club = df.loc[df['Club'].isin(some_clubs) & df['Age']]\n\nfig, ax = plt.subplots()\nfig.set_size_inches(20, 10)\nax = sns.violinplot(x=\"Club\", y=\"Age\", data=df_club);\nax.set_title(label='Distribution of age in some clubs', fontsize=20);","0d1549e1":"# The longest membership in the club\nnow = datetime.datetime.now()\ndf['Join_year'] = df.Joined.dropna().map(lambda x: x.split(',')[1].split(' ')[1])\ndf['Years_of_member'] = (df.Join_year.dropna().map(lambda x: now.year - int(x))).astype('int').dropna()\nmembership = df[['Name', 'Club', 'Years_of_member']].sort_values(by = 'Years_of_member', ascending = False).dropna().head()\nmembership.set_index('Name', inplace=True)\nmembership","83f5e283":"# The oldest team\ndf.groupby(['Club'])['Age'].sum().sort_values(ascending = False).head(5)","5771bc41":"# The youngest team\ndf.groupby(['Club'])['Age'].sum().sort_values(ascending = True).head(5)","d3818e0c":"# The clubs and their players overalls\nsome_clubs = ('Juventus', 'Real Madrid', 'Paris Saint-Germain', 'FC Barcelona', 'Legia Warszawa', 'Manchester United')\ndf_club = df.loc[df['Club'].isin(some_clubs) & df['Age'] & df['Overall'] ]\n\nax = sns.barplot(x=df_club['Club'], y=df_club['Overall'], palette=\"rocket\");\nax.set_title(label='Distribution overall in several clubs', fontsize=20);","ebb10a34":"# All of position\nax = sns.countplot(x = 'Position', data = df, palette = 'hls');\nax.set_title(label='Count of players on the position', fontsize=20);","06967b55":"# The best player per position\ndisplay(HTML(df.iloc[df.groupby(df['Position'])['Overall'].idxmax()][['Name', 'Position']].to_html(index=False)))","a366469d":"player_features = (\n    'Acceleration', 'Aggression', 'Agility', \n    'Balance', 'BallControl', 'Composure', \n    'Crossing', 'Dribbling', 'FKAccuracy', \n    'Finishing', 'GKDiving', 'GKHandling', \n    'GKKicking', 'GKPositioning', 'GKReflexes', \n    'HeadingAccuracy', 'Interceptions', 'Jumping', \n    'LongPassing', 'LongShots', 'Marking', 'Penalties'\n)\n\n# Top three features per position\nfor i, val in df.groupby(df['Position'])[player_features].mean().iterrows():\n    print('Position {}: {}, {}, {}'.format(i, *tuple(val.nlargest(3).index)))","936b0a71":"idx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in df.groupby(df['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(9, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n\n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1 ","6cd6cff8":"# Top 5 left-footed players\ndf[df['Preferred Foot'] == 'Left'][['Name','Overall']].head()","9d02ae20":"# Top 5 right-footed players\ndf[df['Preferred Foot'] == 'Right'][['Name','Overall']].head()","bad667e0":"# Better is left-footed or rigth-footed players?\nsns.lmplot(x = 'BallControl', y = 'Dribbling', data = df,\n          scatter_kws = {'alpha':0.1},\n          col = 'Preferred Foot');","68f4b760":"# The clubs, where have players mainly from one country\nclubs_coherency = pd.Series()\nfor club, players in df.groupby(['Club'])['Nationality'].count().items():\n    coherency = df[df['Club'] == club].groupby(['Nationality'])['Club'].count().max() \/ players * 100\n    clubs_coherency[club] = coherency\n\nclubs_coherency.sort_values(ascending = False).head(23)","c9683801":"# The clubs with largest number of different countries\ndf.groupby(['Club'])['Nationality'].nunique().sort_values(ascending = False).head()","0cc0f984":"# The clubs with the smallest number of foreigners players\ndf.groupby(['Club'])['Nationality'].nunique().sort_values().head()","1ffc5aae":"# Relation dribbling and crossing with respected finishing of players\nplt.figure(figsize=(14,7))\ncmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\n\nax = sns.scatterplot(x='Crossing', y='Dribbling',\n                     hue='Finishing',\n                     palette=cmap, sizes=(1, 1),\n                     data=df)\nax.set_title(label='Relation dribbling and crossing with respected finishing of players', fontsize=20);","f9c04d0b":"# Relation stamina and age with respected sprint speed of players\ncmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\n\nax = sns.scatterplot(x='Age', y='Stamina',\n                     hue='SprintSpeed',\n                     palette=cmap, sizes=(1, 1),\n                     data=df)\nax.set_title(label='Relation stamina and age with respected sprint speed of players', fontsize=20);","85e2e93a":"# Crossing vs. dribbling\nsns.jointplot(x=df['Dribbling'], y=df['Crossing'], kind=\"hex\", color=\"#4CB391\");","50566b3d":"# The value has some non numeric mark so I extract rigth value\ndef value_to_int(df_value):\n    try:\n        value = float(df_value[1:-1])\n        suffix = df_value[-1:]\n\n        if suffix == 'M':\n            value = value * 1000000\n        elif suffix == 'K':\n            value = value * 1000\n    except ValueError:\n        value = 0\n    return value\n\ndf['Value_float'] = df['Value'].apply(value_to_int)","bd78e094":"# Top five the most expensive clubs\ndf.groupby(['Club'])['Value_float'].sum().sort_values(ascending = False).head(5)","60aa7a97":"# Top five the less expensive clubs\ndf.groupby(['Club'])['Value_float'].sum().sort_values().head(5)","e5dacfd1":"# Top five teams with the best players\ndf.groupby(['Club'])['Overall'].max().sort_values(ascending = False).head()","26a022ac":"# Value vs. Overall\nvalue = df.Value_float\nax = sns.regplot(x = value \/ 10000000, y = 'Overall', fit_reg = False, data = df);\nax.set_title(label='Value vs. Overall', fontsize=20);","e8c63225":"# Relation potential and age with respected value of players\ncmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\n\nsns.relplot(x=\"Age\", y=\"Potential\", hue=value\/100000, \n            sizes=(40, 400), alpha=.5,\n            height=6, data=df);","6a7b34a6":"### Analysis!","fd4d498e":"We have 11.8 MB dataset. It include three kind of typ features: float, int and object. We also see that in dataset occurs NaN value.","89ed1747":"### Info about data","5f90d322":"We see some interesting correlations. I assume that \"interesting\" is greater than 0.7. \n\nFor example: \n- correlation between Acceleration and other","62c0ac60":"\n# FIFA 19 complete player dataset\n\nTarget: A handful of statistics about the FIFA 19.\n\nSource: https:\/\/www.kaggle.com\/karangadiya\/fifa19\n\nAs I mentioned in my bio, I was a football player, but I have been injured, so I had to forget about my football career. Now work on ML connected with sport's dataset gave me a lot of fun :-)","d73fce39":"We have some unnecessary columns. I will delete it below.","0b12b883":"We see that the largest number of players are 21 or 26 yaers old.\n\nOn the plot above we see that is positive correlation between two variable."}}