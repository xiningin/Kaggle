{"cell_type":{"4e8a69c2":"code","6b868d97":"code","f9493791":"code","031a483c":"code","68869f69":"code","cb7b47c8":"code","8d2fd484":"code","27887979":"code","06a99da2":"code","4d7dcca3":"code","5447e4b7":"code","2c5b031c":"code","329c9b4c":"code","160f26a1":"code","25d3943e":"code","0d435830":"code","8bb93945":"code","7ac48e8e":"code","112a9944":"code","61d46c3d":"code","e2685d23":"code","a6b6783f":"code","f3dacd19":"code","eadb4c94":"code","0a42c438":"code","d1b19bb4":"code","cc6c762c":"code","0a88521d":"code","394e9d92":"code","6b13b350":"code","889f3a60":"code","feb0a24b":"code","63fddb53":"code","d830f3ca":"code","cd6d2318":"code","2c8bdd63":"code","94b38d7a":"code","a606c4cc":"code","a7d41c08":"code","93daa154":"code","5a4b69b6":"code","1707d510":"code","a0a56a03":"code","71255be2":"code","d9e9a6f1":"code","de8fdd3c":"markdown","62a6bc35":"markdown","72372bda":"markdown","1c8e2c30":"markdown","cc150b3a":"markdown","08c01590":"markdown","5451520e":"markdown","fb9e37e8":"markdown"},"source":{"4e8a69c2":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6b868d97":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","f9493791":"df.head()","031a483c":"df.isnull().sum()","68869f69":"df.describe().transpose()","cb7b47c8":"import matplotlib.pyplot as plt \nimport seaborn as sns \n\nl = df.columns","8d2fd484":"l","27887979":"df['sex'].value_counts().plot(kind='bar')","06a99da2":"plt.scatter(df['chol'],df['trestbps'])","4d7dcca3":"sns.heatmap(df.corr())","5447e4b7":"plt.scatter(df['thal'],df['oldpeak'])","2c5b031c":"sns.scatterplot(df['thalach'], df['slope'], hue=df['target'])","329c9b4c":"X = df[l[:-1]]\n\ny = df[l[-1]]","160f26a1":"from sklearn.preprocessing import MinMaxScaler","25d3943e":"scaler = MinMaxScaler()\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,random_state=42,test_size=0.33)\n\nscaled_train = scaler.fit_transform(X_train)\n\nscaled_test = scaler.transform(X_test)","0d435830":"from sklearn.metrics import classification_report, confusion_matrix","8bb93945":"from sklearn.linear_model import LogisticRegression\n\nlr_model = LogisticRegression()\n\nlr_model.fit(scaled_train,y_train)\n\npreds = lr_model.predict(scaled_test)","7ac48e8e":"print(confusion_matrix(y_test,preds))","112a9944":"print(classification_report(y_test,preds))","61d46c3d":"from sklearn.decomposition import PCA","e2685d23":"pca = PCA(3)\n\nreduced_train = pca.fit_transform(scaled_train)\n\nreduced_test = pca.transform(scaled_test)","a6b6783f":"reduced_train.shape","f3dacd19":"plt.scatter(reduced_train[:,0],reduced_train[:,1])","eadb4c94":"plt.scatter(reduced_train[:,1],reduced_train[:,2])","0a42c438":"plt.scatter(reduced_train[:,0],reduced_train[:,2])","d1b19bb4":"lr_model = LogisticRegression()\n\nlr_model.fit(reduced_train,y_train)\n\npreds = lr_model.predict(reduced_test)","cc6c762c":"print(confusion_matrix(y_test,preds))","0a88521d":"print(classification_report(y_test,preds))","394e9d92":"from sklearn.metrics import accuracy_score\niv = []\nav = []\nfor i in range(1,13):\n    pca = PCA(i)\n\n    reduced_train = pca.fit_transform(scaled_train)\n\n    reduced_test = pca.transform(scaled_test)\n    \n    lr_model = LogisticRegression()\n\n    lr_model.fit(reduced_train,y_train)\n\n    preds = lr_model.predict(reduced_test)\n    \n    iv.append(i)\n    av.append(accuracy_score(y_test,preds))","6b13b350":"plt.plot(iv,av)","889f3a60":"from sklearn.svm import SVC","feb0a24b":"iv = []\nav = []\nfor i in range(1,13):\n    pca = PCA(i)\n\n    reduced_train = pca.fit_transform(scaled_train)\n\n    reduced_test = pca.transform(scaled_test)\n    \n    svc = SVC()\n\n    svc.fit(reduced_train,y_train)\n\n    preds = svc.predict(reduced_test)\n    \n    iv.append(i)\n    av.append(accuracy_score(y_test,preds))","63fddb53":"plt.plot(iv,av)","d830f3ca":"pca = PCA(4)\n\nreduced_train = pca.fit_transform(scaled_train)\n\nreduced_test = pca.transform(scaled_test)\n    \nsvc = SVC()\n\nsvc.fit(reduced_train,y_train)\n\npreds = svc.predict(reduced_test)","cd6d2318":"print(classification_report(y_test,preds))","2c8bdd63":"svc = SVC()\n\nsvc.fit(scaled_train,y_train)\n\npreds = svc.predict(scaled_test)","94b38d7a":"print(classification_report(y_test,preds))","a606c4cc":"from sklearn.preprocessing import PolynomialFeatures\n\n\npoly = PolynomialFeatures(2)\n\nx_poly_train = poly.fit_transform(scaled_train)\n\nx_poly_test = poly.transform(scaled_test)","a7d41c08":"svc = SVC()\n\nsvc.fit(x_poly_train,y_train)\n\npreds = svc.predict(x_poly_test)","93daa154":"print(classification_report(y_test,preds))","5a4b69b6":"iv = []\nav = []\nfor i in range(1,106):\n    pca = PCA(i)\n\n    reduced_train = pca.fit_transform(x_poly_train)\n\n    reduced_test = pca.transform(x_poly_test)\n    \n    svc = SVC()\n\n    svc.fit(reduced_train,y_train)\n\n    preds = svc.predict(reduced_test)\n    \n    iv.append(i)\n    av.append(accuracy_score(y_test,preds))","1707d510":"plt.plot(iv,av)","a0a56a03":"iv = np.array(iv)\nav = np.array(av)\n\niv[av.argmax()]","71255be2":"pca = PCA(8)\n\nreduced_train = pca.fit_transform(x_poly_train)\n\nreduced_test = pca.transform(x_poly_test)\n    \nsvc = SVC()\n\nsvc.fit(reduced_train,y_train)\n\npreds = svc.predict(reduced_test)","d9e9a6f1":"print(classification_report(y_test,preds))","de8fdd3c":"**using logistic regression with PCA:**","62a6bc35":"**using SVMs without PCA:**","72372bda":"**using SVMs with PCA:**","1c8e2c30":"**using PCA to reduced dimensionality of the data-set:**","cc150b3a":"# exploratory data-analysis:","08c01590":"# getting started:","5451520e":"# modelling the data using classifiers :","fb9e37e8":"**using logistic regression :**"}}