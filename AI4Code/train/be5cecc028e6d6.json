{"cell_type":{"421ecfff":"code","883acb6a":"code","d8933651":"code","a1062350":"code","a6458cd7":"code","13ccee56":"code","fa9c515c":"code","77c381c0":"code","bf2a1a3f":"code","4e6ed74f":"code","1ec374d7":"code","a39cec4d":"code","95a9dbce":"code","6229bbe7":"code","7b484c75":"code","e7f5e6cf":"code","93c69f18":"code","df1af7dc":"code","bc00864b":"markdown","96e1c226":"markdown","8035b55a":"markdown","9f3ea1cd":"markdown","86f7515b":"markdown","e822b71f":"markdown","1ce2b4ee":"markdown","27356d89":"markdown","2de6935a":"markdown","e5dd7ab8":"markdown","3b3a2756":"markdown","28ec17a5":"markdown","d18d1f2d":"markdown","f46cb7f8":"markdown","67f0f182":"markdown","7459633d":"markdown"},"source":{"421ecfff":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os","883acb6a":"# Loading data directly from CatBoost\nfrom catboost.datasets import amazon\ntrain, test = amazon()\ntarget = \"ACTION\"\ncol4train = [x for x in train.columns if x not in [target, \"ROLE_TITLE\"]]\ny = train[target].values","d8933651":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import ExtraTreesClassifier\n\n#our small helper function, returns ExtraTrees instance\ndef get_model():\n    params = {\n        \"n_estimators\":300, \n        \"n_jobs\": 3,\n        \"random_state\":5436,\n    }\n    return ExtraTreesClassifier(**params)","a1062350":"from sklearn.base import BaseEstimator, TransformerMixin\nclass TargetEncoding(BaseEstimator, TransformerMixin):\n    def __init__(self, columns_names ):\n        self.columns_names = columns_names\n        self.learned_values = {}\n        self.dataset_mean = np.nan\n    \n    def fit(self, X, y, **fit_params):\n        X_ = X.copy()\n        self.learned_values = {}\n        X_[\"__target__\"] = y\n        for c in [x for x in X_.columns if x in self.columns_names]:\n            self.learned_values[c] = (X_[[c,\"__target__\"]]\n                                      .groupby(c)[\"__target__\"].mean()\n                                      .reset_index())\n        self.dataset_mean = np.mean(y)\n        return self\n    \n    def transform(self, X, **fit_params):\n        transformed_X = X[self.columns_names].copy()\n        for c in transformed_X.columns:\n            transformed_X[c] = (transformed_X[[c]]\n                                .merge(self.learned_values[c], on = c, how = 'left')\n                               )[\"__target__\"]\n        transformed_X = transformed_X.fillna(self.dataset_mean)\n        return transformed_X\n    \n    def fit_transform(self, X, y, **fit_params):\n        self.fit(X,y)\n        return self.transform(X)","a6458cd7":"skf = StratifiedKFold(n_splits=5, random_state = 5451, shuffle = True)\nte = TargetEncoding(columns_names=col4train)\nX_tr = te.fit_transform(train, y).values\n\nscores = []\ntr_scores = []\nfor train_index, test_index in skf.split(train, y):\n    train_df, valid_df = X_tr[train_index], X_tr[test_index]\n    train_y, valid_y = y[train_index], y[test_index]\n\n    model = get_model()\n    model.fit(train_df,train_y)\n\n    predictions = model.predict_proba(valid_df)[:,1]\n    scores.append(roc_auc_score(valid_y, predictions))\n\n    train_preds = model.predict_proba(train_df)[:,1]\n    tr_scores.append(roc_auc_score(train_y, train_preds))\n\nprint(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n    np.mean(tr_scores), np.mean(scores), np.std(scores)\n))","13ccee56":"scores = []\ntr_scores = []\nfor train_index, test_index in skf.split(train, y):\n    train_df = train.loc[train_index,col4train].reset_index(drop = True)\n    valid_df = train.loc[test_index,col4train].reset_index(drop = True)\n    train_y, valid_y = y[train_index], y[test_index]\n    \n    te = TargetEncoding(columns_names=col4train)\n    X_tr = te.fit_transform(train_df, train_y).values\n    X_val = te.transform(valid_df).values\n\n    model = get_model()\n    model.fit(X_tr,train_y)\n\n    predictions = model.predict_proba(X_val)[:,1]\n    scores.append(roc_auc_score(valid_y, predictions))\n\n    train_preds = model.predict_proba(X_tr)[:,1]\n    tr_scores.append(roc_auc_score(train_y, train_preds))\n\nprint(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n    np.mean(tr_scores), np.mean(scores), np.std(scores)\n))","fa9c515c":"class TargetEncodingSmoothing(BaseEstimator, TransformerMixin):\n    def __init__(self, columns_names,k, f ):\n        self.columns_names = columns_names\n        self.learned_values = {}\n        self.dataset_mean = np.nan\n        self.k = k #\n        self.f = f #\n    def smoothing_func(self, N): #\n        return 1 \/ (1 + np.exp(-(N-self.k)\/self.f))\n    def fit(self, X, y, **fit_params):\n        X_ = X.copy()\n        self.learned_values = {}\n        self.dataset_mean = np.mean(y)\n        X_[\"__target__\"] = y\n        for c in [x for x in X_.columns if x in self.columns_names]:\n            stats = (X_[[c,\"__target__\"]]\n                     .groupby(c)[\"__target__\"].\n                     agg(['mean', 'size'])) \n            stats[\"alpha\"] = self.smoothing_func(stats[\"size\"])\n            stats[\"__target__\"] = (stats[\"alpha\"]*stats[\"mean\"] \n                                   + (1-stats[\"alpha\"])*self.dataset_mean)\n            stats = (stats\n                     .drop([x for x in stats.columns if x not in [\"__target__\",c]], axis = 1)\n                     .reset_index())\n            self.learned_values[c] = stats\n        self.dataset_mean = np.mean(y)\n        return self\n    def transform(self, X, **fit_params):\n        transformed_X = X[self.columns_names].copy()\n        for c in transformed_X.columns:\n            transformed_X[c] = (transformed_X[[c]]\n                                .merge(self.learned_values[c], on = c, how = 'left')\n                               )[\"__target__\"]\n        transformed_X = transformed_X.fillna(self.dataset_mean)\n        return transformed_X\n    def fit_transform(self, X, y, **fit_params):\n        self.fit(X,y)\n        return self.transform(X)","77c381c0":"%matplotlib inline\nx = np.linspace(0,100,100)\nplot = pd.DataFrame()\nte = TargetEncodingSmoothing([], 1,1)\nplot[\"k=1|f=1\"] = te.smoothing_func(x)\nte = TargetEncodingSmoothing([], 33,5)\nplot[\"k=33|f=5\"] = te.smoothing_func(x)\nte = TargetEncodingSmoothing([], 66,15)\nplot[\"k=66|f=15\"] = te.smoothing_func(x)\nplot.plot(figsize = (15,8))","bf2a1a3f":"scores = []\ntr_scores = []\nfor train_index, test_index in skf.split(train, y):\n    train_df = train.loc[train_index,col4train].reset_index(drop = True)\n    valid_df = train.loc[test_index,col4train].reset_index(drop = True)\n    train_y, valid_y = y[train_index], y[test_index]\n    te = TargetEncodingSmoothing(\n        columns_names= col4train,\n        k = 3, f = 1.5\n    )\n    X_tr = te.fit_transform(train_df, train_y).values\n    X_val = te.transform(valid_df).values\n\n    model = get_model()\n    model.fit(X_tr,train_y)\n\n    predictions = model.predict_proba(X_val)[:,1]\n    scores.append(roc_auc_score(valid_y, predictions))\n\n    train_preds = model.predict_proba(X_tr)[:,1]\n    tr_scores.append(roc_auc_score(train_y, train_preds))\n\nprint(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n    np.mean(tr_scores), np.mean(scores), np.std(scores)\n))","4e6ed74f":"def get_CV_target_encoding(data, y, encoder, cv = 5):\n    skfTE = StratifiedKFold(n_splits=cv, random_state = 545167, shuffle = True)\n    result = []\n    for train_indexTE, test_indexTE in skfTE.split(data, y):\n        encoder.fit(data.iloc[train_indexTE,:].reset_index(drop = True), y[train_indexTE])\n        tmp =  encoder.transform(data.iloc[test_indexTE,:].reset_index(drop = True))\n        tmp[\"index\"] = test_indexTE\n        result.append(tmp)\n    result = pd.concat(result, ignore_index = True)\n    result = result.sort_values('index').reset_index(drop = True).drop('index', axis = 1)\n    return result","1ec374d7":"scores = []\ntr_scores = []\nfor train_index, test_index in skf.split(train, y):\n    train_df = train.loc[train_index,col4train].reset_index(drop = True)\n    valid_df = train.loc[test_index,col4train].reset_index(drop = True)\n    train_y, valid_y = y[train_index], y[test_index]\n    te = TargetEncodingSmoothing(\n        columns_names= col4train,\n        k = 3, f = 1.5\n    )\n    \n    X_tr = get_CV_target_encoding(train_df, train_y, te, cv = 5)\n\n    te.fit(train_df, train_y)\n    X_val = te.transform(valid_df).values\n\n    model = get_model()\n    model.fit(X_tr,train_y)\n\n    predictions = model.predict_proba(X_val)[:,1]\n    scores.append(roc_auc_score(valid_y, predictions))\n\n    train_preds = model.predict_proba(X_tr)[:,1]\n    tr_scores.append(roc_auc_score(train_y, train_preds))\n\nprint(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n    np.mean(tr_scores), np.mean(scores), np.std(scores)\n))","a39cec4d":"class TargetEncodingExpandingMean(BaseEstimator, TransformerMixin):\n    def __init__(self, columns_names):\n        self.columns_names = columns_names\n        self.learned_values = {}\n        self.dataset_mean = np.nan\n    def fit(self, X, y, **fit_params):\n        X_ = X.copy()\n        self.learned_values = {}\n        self.dataset_mean = np.mean(y)\n        X_[\"__target__\"] = y\n        for c in [x for x in X_.columns if x in self.columns_names]:\n            stats = (X_[[c,\"__target__\"]]\n                     .groupby(c)[\"__target__\"]\n                     .agg(['mean', 'size'])) #\n            stats[\"__target__\"] = stats[\"mean\"]\n            stats = (stats\n                     .drop([x for x in stats.columns if x not in [\"__target__\",c]], axis = 1)\n                     .reset_index())\n            self.learned_values[c] = stats\n        return self\n    def transform(self, X, **fit_params):\n        transformed_X = X[self.columns_names].copy()\n        for c in transformed_X.columns:\n            transformed_X[c] = (transformed_X[[c]]\n                                .merge(self.learned_values[c], on = c, how = 'left')\n                               )[\"__target__\"]\n        transformed_X = transformed_X.fillna(self.dataset_mean)\n        return transformed_X\n    \n    def fit_transform(self, X, y, **fit_params):\n        self.fit(X,y)\n    \n        #Expanding mean transform\n        X_ = X[self.columns_names].copy().reset_index(drop = True)\n        X_[\"__target__\"] = y\n        X_[\"index\"] = X_.index\n        X_transformed = pd.DataFrame()\n        for c in self.columns_names:\n            X_shuffled = X_[[c,\"__target__\", \"index\"]].copy()\n            X_shuffled = X_shuffled.sample(n = len(X_shuffled),replace=False)\n            X_shuffled[\"cnt\"] = 1\n            X_shuffled[\"cumsum\"] = (X_shuffled\n                                    .groupby(c,sort=False)['__target__']\n                                    .apply(lambda x : x.shift().cumsum()))\n            X_shuffled[\"cumcnt\"] = (X_shuffled\n                                    .groupby(c,sort=False)['cnt']\n                                    .apply(lambda x : x.shift().cumsum()))\n            X_shuffled[\"encoded\"] = X_shuffled[\"cumsum\"] \/ X_shuffled[\"cumcnt\"]\n            X_shuffled[\"encoded\"] = X_shuffled[\"encoded\"].fillna(self.dataset_mean)\n            X_transformed[c] = X_shuffled.sort_values(\"index\")[\"encoded\"].values\n        return X_transformed","95a9dbce":"scores = []\ntr_scores = []\nfor train_index, test_index in skf.split(train, y):\n    train_df = train.loc[train_index,col4train].reset_index(drop = True)\n    valid_df = train.loc[test_index,col4train].reset_index(drop = True)\n    train_y, valid_y = y[train_index], y[test_index]\n    te = TargetEncodingExpandingMean(columns_names=col4train)\n\n    X_tr = te.fit_transform(train_df, train_y)\n    X_val = te.transform(valid_df).values\n\n    model = get_model()\n    model.fit(X_tr,train_y)\n\n    predictions = model.predict_proba(X_val)[:,1]\n    scores.append(roc_auc_score(valid_y, predictions))\n\n    train_preds = model.predict_proba(X_tr)[:,1]\n    tr_scores.append(roc_auc_score(train_y, train_preds))\n\nprint(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n    np.mean(tr_scores), np.mean(scores), np.std(scores)\n))","6229bbe7":"train[col4train] = train[col4train].values.astype(str)\ntest[col4train] = test[col4train].values.astype(str)\n\nfrom itertools import combinations\nnew_col4train = col4train\nfor c1,c2 in combinations(col4train, 2):\n    name = \"{}_{}\".format(c1,c2)\n    new_col4train.append(name)\n    train[name] = train[c1] + \"_\" + train[c2]\n    test[name] = test[c1] + \"_\" + test[c2]","7b484c75":"print(train[new_col4train].shape, test[new_col4train].shape)\ntrain[new_col4train].head(5)","e7f5e6cf":"train[new_col4train].apply(lambda x: len(x.unique()))","93c69f18":"scores = []\ntr_scores = []\nfor train_index, test_index in skf.split(train, y):\n    train_df = train.loc[train_index,new_col4train].reset_index(drop = True)\n    valid_df = train.loc[test_index,new_col4train].reset_index(drop = True)\n    train_y, valid_y = y[train_index], y[test_index]\n    te = TargetEncodingExpandingMean(columns_names=new_col4train)\n\n    X_tr = te.fit_transform(train_df, train_y)\n    X_val = te.transform(valid_df)\n    \n    te2 = TargetEncodingSmoothing(\n        columns_names= new_col4train,\n        k = 3, f = 1.5,\n    )\n    \n    X_tr2 = get_CV_target_encoding(train_df, train_y, te2, cv = 5)\n    te2.fit(train_df, train_y)\n    X_val2 = te2.transform(valid_df)\n    \n    X_tr = pd.concat([X_tr, X_tr2], axis = 1)\n    X_val = pd.concat([X_val, X_val2], axis = 1)\n\n    model = get_model()\n    model.fit(X_tr,train_y)\n\n    predictions = model.predict_proba(X_val)[:,1]\n    scores.append(roc_auc_score(valid_y, predictions))\n\n    train_preds = model.predict_proba(X_tr)[:,1]\n    tr_scores.append(roc_auc_score(train_y, train_preds))\n\nprint(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n    np.mean(tr_scores), np.mean(scores), np.std(scores)\n))","df1af7dc":"te = TargetEncodingExpandingMean(columns_names=new_col4train)\n\nX_tr = te.fit_transform(train[new_col4train], y)\nX_val = te.transform(test[new_col4train])\n\nte2 = TargetEncodingSmoothing(\n    columns_names= new_col4train,\n    k = 3, f = 1.5,\n)\n\nX_tr2 = get_CV_target_encoding(train[new_col4train], y, te2, cv = 5)\nte2.fit(train[new_col4train], y)\nX_val2 = te2.transform(test[new_col4train])\n\nX = pd.concat([X_tr, X_tr2], axis = 1)\nX_te = pd.concat([X_val, X_val2], axis = 1)\n\nmodel = get_model()\nmodel.fit(X,y)\npredictions = model.predict_proba(X_te)[:,1]\n\nsubmit = pd.DataFrame()\nsubmit[\"Id\"] = test[\"id\"]\nsubmit[\"ACTION\"] = predictions\n\nsubmit.to_csv(\"submission.csv\", index = False)","bc00864b":"AUC score is 0.8795. Let's check it on leaderboard.","96e1c226":"## Supervised categorical encodings\n\nBy \u201csupervised\u201d here I mean we are going to use the information about target we are trying to predict in order to build our categorical embeddings.\n","8035b55a":"Good score, but still worse compare to unsupervised features.","9f3ea1cd":"## Simple Target Encoding\n\nThe simplest way is just encode each unique value by target mean. For unseen values we going to use dataset target mean.\n\n**Advantages**\n* Straight-forward, easy to implement\n* Easy to understand\n* Powerful, task-specific encoding\n\n**Disadvantages**\n* Introduces leakage (too much info about target is in data now, so no generalization)","86f7515b":"Wow, AUC of 0.97?! If you think this is too good to be true - you're right. That is an example of target leakage, because of our transformation too much information about target leaked into data.\n\nSo rule number 1. If you building features using target - always do that *inside* CV loop.\n\nThat's the proper way of doing that.","e822b71f":"Let's try it in action on our `TargetEncodingSmoothing`.","1ce2b4ee":"Let's transform our data and run CV to get AUC score.","27356d89":"Results are getting better, but not enough. Smoothing is a very helpful technique for medium\/big data. Here we have small one. And we need to add something else.\n\n## Adding noise. CV inside CV.\n\nI call this adding noise because we try to make our embedding noisy, so powerful model like LightGBM won't memorize it instead of generalization.\n\nOne of the way to add noise is this. Let's think of our target encoding as a \"0-level model\", which predicts target. In that case we would like to have a \"predictions\" on unseen data, right? And how to do that? By cross-validation of course.\n\nSo we split our train dataset into n folds, and we use n-1 folds to create target mean embedding and use it for the last n-th fold.\n\n\nHere is the function which does that:","2de6935a":"And a lot of them are high-cardinality categorical features. Luckily for us we now know how to handle them.\nLet's use both `TargetEncodingExpandingMean` and `TargetEncodingSmoothing` with CV to create embeddings.","e5dd7ab8":"And you can see that AUC score is quite bad. How to improve that?","3b3a2756":"## Adding noise. Expanding mean.\n\nNext idea how to add noise is called expanding mean and you will now understand why.\n\nImagine algorithm rolling trough data and for each new row it uses all previously seen rows to calculate this new row mean. For the very first row there is no previously seen rows available so it's mean will be dataset mean. For the second row you can use first (and only first) row, because you already saw it.\n\nThis approach especially suited for streaming (that is if you have infinite stream of data coming to you).\n\n**Advantages**\n* Powerful, task-specific encoding\n\n**Disadvantages**\n* Can introduce too much noise :)\n\nHere is the class which implements it:","28ec17a5":"Now instead of 8 features we have 36.","d18d1f2d":"Helper functions","f46cb7f8":"## Target Encoding Smoothing\nWe could try to make target encoding more robust to leakage by addressing main problem - low-frequency values. If in your feature there are unique values which occurs just couple of times - they are one of the main source of leak.\n\nWhat if instead of encoding by mean we will take weighted sum of 2 means: **dataset mean** and **level mean**, where level mean is the mean of particular unique value in your feature. \n\nWeighted sum:\n\n\\\\(f(n)*mean(level) + (1-f(n))*mean(dataset)\\\\)\n\nWeighting function:\n\n\\\\(f(x) = \\frac{1}{1+exp(\\frac{-(x-k)}{f})}\\\\)\n\nwhere,\n\n\\\\(k\\\\) - inflection point, that's the point where \\\\(f(x)\\\\) is equal 0.5 \n\n\\\\(f\\\\) - steepness, a value which controls how step is our function.\n\nIn that case with carefully tuned \\\\(k\\\\) and \\\\(f\\\\) we could force all encodings of unfrequent values to be very close to dataset mean, while mean of frequent values will be closer to their actual value.\n\n**Advantages**\n* Fairly easy to implement\n* Easy to understand\n* Powerful, task-specific encoding\n\n**Disadvantages**\n* Introduces 2 additional parameters PER feature, which is could be hard to tune.\n","67f0f182":"But why don't we add some new features? How? Let's use feature pairs to create a new set of categorical features. Just take pair of existing features and concat them together:","7459633d":"From .78 to .85. It really works :)"}}