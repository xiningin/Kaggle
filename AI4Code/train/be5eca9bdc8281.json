{"cell_type":{"e67bf88f":"code","1d27d758":"code","9617a1e7":"code","bc508e93":"code","a3e2fc8d":"code","f45abf0e":"code","95b189db":"code","754aa562":"code","dadad1f6":"code","453b60a7":"code","3383fe6c":"code","57f422dd":"code","5552338b":"code","b380458b":"code","1ddf2ff3":"code","37615eab":"code","80eb8f52":"code","e4934ca9":"code","c565f888":"code","21b33698":"code","29328740":"code","e0c6116c":"code","45ddf09b":"code","8c9d9fee":"code","2af7738a":"code","9dc8f8fd":"code","0d5deef8":"code","f30903e9":"code","03ca4b5c":"code","a34379d7":"code","2625ef32":"markdown","7fade64a":"markdown","881ebaf6":"markdown","fd2e3850":"markdown","5334f5b7":"markdown","82645561":"markdown","69e5b73a":"markdown"},"source":{"e67bf88f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# Any results you write to the current directory are saved as output.","1d27d758":"input_path = \"..\/input\/titanic\/\"\ndf_train = pd.read_csv(input_path+'train.csv')\ndf_test = pd.read_csv(input_path+'test.csv')","9617a1e7":"df_train","bc508e93":"df_train.describe()","a3e2fc8d":"df_train.head()","f45abf0e":"df_train.tail()","95b189db":"df_train.info()","754aa562":"df_train.isna().sum()","dadad1f6":"df_test.isna().sum()","453b60a7":"df_test.describe()","3383fe6c":"# on affiche la moyenne de l'age\nmoyenne_age = np.sum(df_train['Age'])\/len(df_train.loc[df_train['Age']>0])\nmoyenne_age\n","57f422dd":"#on remplace les ages par la moyenne\ndf_train['Age'] = df_train['Age'].fillna(moyenne_age)\ndf_test['Age'] = df_test['Age'].fillna(moyenne_age)\ndf_train","5552338b":"# on attribue \u00e0 homme et femme un boolean\nembarked_mapping = {\"female\": 1, \"male\": 0}\ndf_train['Sex'] = df_train['Sex'].map(embarked_mapping)\ndf_test['Sex'] = df_test['Sex'].map(embarked_mapping)\n\ndf_train.head()","b380458b":"# on affiche la moyenne du Fare\nmoyenne_fare = np.sum(df_train['Fare'])\/len(df_train.loc[df_train['Fare']>0])\nmoyenne_fare\n\n","1ddf2ff3":"# on remplace le fare par la moyenne\ndf_train['Fare'] = df_train['Fare'].fillna(moyenne_fare)\ndf_test['Fare'] = df_test['Fare'].fillna(moyenne_fare)\ndf_train","37615eab":"# nombre de personnes dans la famille\ndf_train['famille'] = df_train['SibSp'] + df_train['Parch']\ndf_test['famille'] = df_test['SibSp'] + df_test['Parch']\ndf_train[['Survived', 'famille']]","80eb8f52":"sns.barplot(x='famille', y=\"Survived\", data=df_train)","e4934ca9":"sns.boxplot(x='Survived', y=\"Fare\", data=df_train.loc[df_train['Fare'] <500]);","c565f888":"sns.barplot(x='Pclass', y=\"Survived\", data=df_train)","21b33698":"sns.catplot(x=\"Sex\", y=\"Survived\", kind=\"bar\", data=df_train);","29328740":"# ajout de colonnes\nmodele = ['Age', 'Sex', 'Pclass', 'Fare', 'SibSp', 'Parch']\n\nX_train = df_train.loc[:, modele]\n\ny_train = df_train['Survived']\n\nX_test = df_test.loc[:, modele]","e0c6116c":"X_train.info()","45ddf09b":"X_test.info()","8c9d9fee":"X_train.isna().sum()","2af7738a":"X_test.isna().sum()","9dc8f8fd":"from sklearn.model_selection import train_test_split\ndef train_model(model, X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y)\n    model.fit(X_train, y_train)\n    train_acc = accuracy_score(y_train, model.predict(X_train))\n    test_acc = accuracy_score(y_test, model.predict(X_test))\n    return {\n        'train accuracy': train_acc,\n        'test accuracy': test_acc\n    }\nprint(train_model(rf, X_train, y_train))\n\n","0d5deef8":"rf.fit(X_train, y_train)","f30903e9":"train_acc = accuracy_score(y_train, rf.predict(X_train))\nprint(train_acc)","03ca4b5c":"rf.predict(X_test)","a34379d7":"submission = pd.DataFrame({'PassengerId' : df_test['PassengerId'],\n                           'Survived' : rf.predict(X_test)})\nsubmission.to_csv('submission.csv', index=False)","2625ef32":"hypoth\u00e8ses valid\u00e9es, on passe \u00e0 la mod\u00e9lisation","7fade64a":"LEs femmes survivent + que les hommes... Comme pr\u00e9vu, rien \u00e0 ajouter ! ;)","881ebaf6":"On a imput\u00e9 les valeurs manquantes","fd2e3850":"La qualit\u00e9 du dataset a \u00e9t\u00e9 v\u00e9rifi\u00e9e","5334f5b7":"Une fois de plus, ceux de premi\u00e8re classe survivent + que ceux de deuxieme classe, et + que ceux de trois\u00e8me","82645561":"Only the strong survive ! D\u00e9montration \u00e9l\u00e9mentaire du d\u00e9terminisme social bas\u00e9 sur la classe de l'individu : les riches (prox du billet \u00e9lev\u00e9) ont + surv\u00e9cu","69e5b73a":"je n'ai pas de vraie conclusion \u00e0 en tirer, c'est disparate. \u00e0 part que au dela de 7 enfants tu meurs (ou qu'il n'y en avait pas?)\n3 enfants c'est toujours bien"}}