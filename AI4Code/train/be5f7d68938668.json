{"cell_type":{"3f81a28e":"code","056dc9f8":"code","82579083":"code","831031f5":"code","a63470f3":"code","9ed1a9ba":"code","37ee6c28":"code","08e51d5b":"code","8abb5d66":"code","f1c75346":"code","c3fda5c4":"code","e32dfa28":"code","9e820235":"code","419d525e":"markdown","2fc66df4":"markdown","d55a5836":"markdown","d2d62e7a":"markdown","1518f500":"markdown","7292c2fc":"markdown","ba75e820":"markdown","216e2165":"markdown","0f48035e":"markdown","86af19cf":"markdown"},"source":{"3f81a28e":"import cufflinks as cf\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import KFold\n\n\ncf.go_offline()\n\n#DATA_DIR = 'data'\nDATA_DIR = '..\/input\/optiver-realized-volatility-prediction'\nOUTPUT_DIR = '.'\n\ndf_train = pd.read_csv(f'{DATA_DIR}\/train.csv')\ndf_test = pd.read_csv(f'{DATA_DIR}\/test.csv')\n\ndf_train.head()","056dc9f8":"def single_prediction(df):\n    \"\"\"Compute the best single value prediction using the formula detailed at the start of the notebook\n    \n    Parameters\n    ----------\n    df: pandas.DataFrame\n        DataFrame with column for \"target\"\n        \n    Returns\n    -------\n    float\n    \"\"\"\n    inverse_target = 1 \/ df['target']\n    single_prediction = inverse_target.sum() \/ np.square(inverse_target).sum()\n    return single_prediction\n\n\ndef stock_id_prediction(df):\n    \"\"\"Compute the best value to use for each stock\n    \n    Parameters\n    ----------\n    df: pandas.DataFrame\n        DataFrame with column for \"target\"\n        \n    Returns\n    -------\n    pandas.Series\n        Series with index of stock_id and prediction values to use.\n    \"\"\"\n    return df_train.groupby('stock_id')[['target']].apply(single_prediction)\n\n\ndef score(results_df, predict=None):\n    \"\"\"Compute the score (RMSPE) of a given prediction\n    \n    Parameters\n    ----------\n    results_df: pandas.DataFrame\n        DataFrame with columns for target, and optionally prediction\n    \n    predict: float, optional\n        Single value to use for prediction\n        \n    Returns\n    -------\n    float:\n        RMSPE of prediction\n    \"\"\"\n    if 'prediction' not in results_df:\n        results_df['prediction'] = predict\n    results_df['sq_pc_error'] = results_df.eval('(target - prediction) \/ target').apply(np.square)\n    return np.sqrt(results_df['sq_pc_error'].sum() \/ results_df['sq_pc_error'].shape[0])","82579083":"single_prediction(df_train)","831031f5":"prediction_df = df_train.copy()\nprediction_df['prediction'] = single_prediction(df_train)\nscore(prediction_df)","a63470f3":"prediction_df = df_train.copy()\nprediction_df['prediction'] = prediction_df['target'].mean()\nscore(prediction_df)","9ed1a9ba":"kf = KFold(\n    n_splits=5, \n    shuffle=False\n)\nresults = []\n\n\nfor fold, (train_index, validate_index) in enumerate(kf.split(df_train)):\n    X = df_train.loc[train_index]\n    X_val = df_train.loc[validate_index]\n    \n    predict = single_prediction(X)\n    results.append({\n        'score': score(X, predict),\n        'oof_score': score(X_val, predict)\n    })\n\n    \npd.DataFrame(results)","37ee6c28":"stock_id_prediction(df_train)","08e51d5b":"prediction_df = df_train.copy()\nstock_id_prediction_map = stock_id_prediction(prediction_df)\nprediction_df['prediction'] = prediction_df['stock_id'].map(stock_id_prediction_map)\nscore(prediction_df)","8abb5d66":"kf = KFold(\n    n_splits=5, \n    shuffle=False\n)\nresults = []\n\n\nfor fold, (train_index, validate_index) in enumerate(kf.split(df_train)):\n    X = df_train.loc[train_index]\n    X_val = df_train.loc[validate_index]\n    \n    stock_id_prediction_map = stock_id_prediction(X)\n    train_df = X.copy()\n    train_df['prediction'] = train_df['stock_id'].map(stock_id_prediction_map)\n    \n    validate_df = X.copy()\n    validate_df['prediction'] = validate_df['stock_id'].map(stock_id_prediction_map)\n    \n    results.append({\n        'score': score(train_df),\n        'oof_score': score(validate_df),\n        'oof_results': validate_df\n    })\n\n    \npd.DataFrame(results)[['score', 'oof_score']]","f1c75346":"error_df = (\n    pd.concat([row['oof_results'] for row in results])\n    .groupby('stock_id')['sq_pc_error']\n    .agg(['sum', 'count'])\n    .rename(columns={'sum': 'sum_of_SPE', 'count': 'count_of_SPE'})\n    .eval('sum_of_SPE \/ count_of_SPE')\n    .apply(np.sqrt))\n\nerror_df.sort_values()","c3fda5c4":"error_df.iplot(kind='hist')","e32dfa28":"stock_id_prediction_map = stock_id_prediction(df_train)\nstock_id_prediction_map","9e820235":"df_test['target'] = df_test['stock_id'].map(stock_id_prediction_map)\noutput_df = df_test[['row_id', 'target']]\noutput_df.to_csv('submission.csv', index=False)\noutput_df","419d525e":"# Optimal single value for prediction\n\n\n### What is the best single value to use as a prediction?\n\n__tldr; its not the mean__\n\n\n\n\nThe best single value to use as a prediction will be the one that minimises the error function:\n\n$$ e = \\sqrt{\\frac{1}{n} \\sum_i{(\\frac{t_i - p}{t_i}})^2} $$\n\nDifferentiate with respect to $p$, the minmum error will be at a point where the derivative is zero.\n\n$$ \\frac{\\partial e}{\\partial p} = \\frac{\\partial }{\\partial p}\\sqrt{\\frac{1}{n} \\sum_i{(\\frac{t_i - p}{t_i}})^2} = 0 $$\n\nAlthough its easier to rearrage first,\n\n$$ ne^2 = \\sum_i{(\\frac{t_i - p}{t_i}})^2$$\n\n$$ ne^2 = \\sum_i{ 1 - 2 t_i^{-1}p + t_i^{-2}p^2}$$\n\n$$ \\frac{\\partial }{\\partial p} ne^2 = 2ne \\frac{\\partial e}{\\partial p} = 0 $$\n\n$$ \\sum_i{ - 2 t_i^{-1} + 2t_i^{-2}p} = 0 $$\n\n\nThe optimal value is:\n---\n$$ p = \\frac{\\sum_i{ t_i^{-1}}}{\\sum_i{ t_i^{-2}}}$$\n\n### Or in python:\n```\nprediction = sum(1 \/ target) \/ sum (1 \/ (target **2))\n```","2fc66df4":"## Create Submission File","d55a5836":"#### Using the mean of the target is significantly worse","d2d62e7a":"## CV of single value prediction\n\nI do not include a shuffle on the KFold CV such that the validation set is mostly on unseen time_ids","1518f500":"# Single Value Prediction","7292c2fc":"## Implementation","ba75e820":"### Imports, constants and loading data","216e2165":"#### Error break down by stock","0f48035e":"## CV of single value prediction per stock","86af19cf":"# Single Value Prediction Per Stock"}}