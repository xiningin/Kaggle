{"cell_type":{"1623e797":"code","eda0aaa0":"code","fe212990":"code","b8c42fdd":"code","00cf9206":"code","b5deb7ac":"code","e682eb15":"code","271fad9f":"code","e4e2ac21":"code","168cfd22":"code","d463e6bc":"code","c168c524":"code","0b5027e9":"code","da7a23b5":"markdown","56040a2f":"markdown","e24f8ffe":"markdown","ff4afb50":"markdown","f28f379d":"markdown","ce4f25a6":"markdown","1d434791":"markdown","b9664b18":"markdown","3f5d265a":"markdown","00a43ac1":"markdown","b0982cfa":"markdown","26089268":"markdown","1d6c4e6a":"markdown","55a0238d":"markdown","51efd838":"markdown","6088e305":"markdown","dac6e650":"markdown"},"source":{"1623e797":"import gensim\nimport copy\nimport os\nimport sys\nimport glob\n\n!ls \/kaggle\/input\/CORD-19-research-challenge\/\nroot_path = '\/kaggle\/input\/CORD-19-research-challenge\/'\n\nFILE=open('..\/input\/drugdata\/fda.csv','r')\nexist={}\nfor line in FILE:\n    line=line.strip()\n    line=line.lower()\n    exist[line]=1\nFILE.close()\n\nall_drugs=exist.keys()\n\nall_files=glob.glob(f'{root_path}\/comm_use_subset\/**\/*.json', recursive=True)\nprint(len(all_files))\n\nNEW=open(('result.comm'),'w')\ni=0\nfor the_drug in all_drugs:\n    os.system(\"find \/kaggle\/input\/CORD-19-research-challenge\/comm_use_subset\/*  -type f | xargs grep -i '\"+the_drug+\"' >aaa.txt\")\n#    print(\"find ..\/..\/data\/comm_use_subset\/*  -type f | xargs grep -i '\"+the_drug+\"' >aaa.txt\")\n    FILE=open('aaa.txt','r')\n    for line in FILE:\n        NEW.write(the_drug)\n        NEW.write('\\t')\n        table=line.split('json')\n        NEW.write(table[0])\n        NEW.write('json')\n        NEW.write('\\t')\n        NEW.write(line)\n    FILE.close()\n    i=i+1\n    if (i%10==0):\n        print ('finished ', i)\n        break\n#    print ('finished '+the_drug)\n\n\nall_files=glob.glob(f'{root_path}\/noncomm_use_subset\/**\/*.json', recursive=True)\nprint(len(all_files))\nNEW=open(('result.noncomm'),'w')\nfor the_drug in all_drugs:\n    os.system(\"find \/kaggle\/input\/CORD-19-research-challenge\/noncomm_use_subset\/*  -type f | xargs grep -i '\"+the_drug+\"' >aaa.txt\")\n#    print(\"find ..\/..\/data\/comm_use_subset\/*  -type f | xargs grep -i '\"+the_drug+\"' >aaa.txt\")\n    FILE=open('aaa.txt','r')\n    for line in FILE:\n        NEW.write(the_drug)\n        NEW.write('\\t')\n        table=line.split('json')\n        NEW.write(table[0])\n        NEW.write('json')\n        NEW.write('\\t')\n        NEW.write(line)\n    FILE.close()\n    i=i+1\n    if (i%10==0):\n        print ('finished ', i)\n        break\n#    print ('finished '+the_drug)\n\n\n\nall_files=glob.glob(f'{root_path}\/custom_license\/**\/*.json', recursive=True)\nprint(len(all_files))\nNEW=open(('result.pmc'),'w')\nfor the_drug in all_drugs:\n    os.system(\"find \/kaggle\/input\/CORD-19-research-challenge\/custom_license\/*  -type f | xargs grep -i '\"+the_drug+\"' >aaa.txt\")\n#    print(\"find ..\/..\/data\/comm_use_subset\/*  -type f | xargs grep -i '\"+the_drug+\"' >aaa.txt\")\n    FILE=open('aaa.txt','r')\n    for line in FILE:\n        NEW.write(the_drug)\n        NEW.write('\\t')\n        table=line.split('json')\n        NEW.write(table[0])\n        NEW.write('json')\n        NEW.write('\\t')\n        NEW.write(line)\n    FILE.close()\n    i=i+1\n    if (i%10==0):\n        print ('finished ', i)\n        break\n#    print ('finished '+the_drug)\n\n\n\nall_files=glob.glob(f'{root_path}\/biorxiv_medrxiv\/**\/*.json', recursive=True)\nprint(len(all_files))\nNEW=open(('result'),'w')\nfor the_drug in all_drugs:\n    os.system(\"find \/kaggle\/input\/CORD-19-research-challenge\/biorxiv_medrxiv\/*  -type f | xargs grep -i '\"+the_drug+\"' >aaa.txt\")\n#    print(\"find ..\/..\/data\/comm_use_subset\/*  -type f | xargs grep -i '\"+the_drug+\"' >aaa.txt\")\n    FILE=open('aaa.txt','r')\n    for line in FILE:\n        NEW.write(the_drug)\n        NEW.write('\\t')\n        table=line.split('json')\n        NEW.write(table[0])\n        NEW.write('json')\n        NEW.write('\\t')\n        NEW.write(line)\n    FILE.close()\n    i=i+1\n    if (i%10==0):\n        print ('finished ', i)\n        break\n#    print ('finished '+the_drug)\n\n\n","eda0aaa0":"!cat ..\/input\/drugdata\/result.* |cut -f 1-2|sort|uniq|cut -f 1|sort|uniq -c|sort -g >sorted_alresult\n!cat ..\/input\/drugdata\/result.* |grep -i -E -- 'COVID|coronavirus|SARS'|cut -f 1-2|sort|uniq|cut -f 1|sort|uniq -c|sort -g >sorted_alresult.coronavirus\n!cat ..\/input\/drugdata\/result.* |grep -i -E -- 'COVID-19|COVID19|sars-cov-2'|cut -f 1-2|sort|uniq|cut -f 1|sort|uniq -c|sort -g >sorted_alresult.covid19\n!tail -30 sorted_alresult\n!tail -30 sorted_alresult.coronavirus\n!tail -30 sorted_alresult.covid19\n!find ..\/input\/CORD-19-research-challenge\/*  -type f | xargs grep -i antibody |grep -E -- 'COVID-19|COVID19|sars-cov-2' >antibody_paragraphs.txt","fe212990":"\nimport numpy as np\n\nexist={}\nLIST=open('..\/input\/drugdata\/sorted_alresult.coronavirus','r')\nfor line in LIST:\n    line=line.replace('\\s\\s+','\\t')\n    line=line.strip()\n    table=line.split(' ')\n    \n    if (float(table[0])>4):\n        exist[table[1]]=0\n    \n    \nREF=open('..\/input\/drugdata\/combine_drug_name_id.csv','r')\nDATA=open('..\/input\/drugdata\/combined_fp2_data.csv','r')\n\ndrug=[]\nall_drug={}\nfor ref in REF:\n    #if ('pos' in ref):\n        ref=ref.strip()\n        rrr=ref.split(',')\n        data=DATA.readline()\n        if (rrr[1].lower() in exist):\n            drug.append(rrr[1])\n    \n            \n            data=data.strip()\n            data=data.split(',')\n            kkk=0\n            for i in data:\n                data[kkk]=float(i)\n                kkk+1\n            all_drug[rrr[1]]=np.asarray(data).astype(np.float)\n    \nREF.close()\nDATA.close()\n\nconnections1=[]\nconnections2=[]\nfor drug1 in drug:\n    for drug2 in drug:\n        if (drug1<drug2):\n            cor=np.corrcoef(all_drug[drug1],all_drug[drug2])\n            if (cor[0,1]>0.40):\n                connections1.append(drug1)\n                connections2.append(drug2)\n                \nimport sys\nimport plotly.graph_objects as go\nimport networkx as nx\n\nnode_list=list(all_drug.keys())\nG = nx.Graph()\nfor i in node_list:\n    G.add_node(i)\n\ni=0\nfor drug1 in connections1:\n    drug2=connections2[i]\n    G.add_edges_from([(drug1,drug2)])\n    i=i+1\n\n\n\npos = nx.spring_layout(G, k=0.5, iterations=50)\nfor n, p in pos.items():\n    G.nodes[n]['pos'] = p\n    \nedge_trace = go.Scatter(\n    x=[],\n    y=[],\n    line=dict(width=1,color='#888'),\n    hoverinfo='none',\n    mode='lines')\n\n\nfor edge in G.edges():\n    x0, y0 = G.nodes[edge[0]]['pos']\n    x1, y1 = G.nodes[edge[1]]['pos']\n    edge_trace['x'] += tuple([x0, x1, None])\n    edge_trace['y'] += tuple([y0, y1, None])\n    \nnode_trace = go.Scatter(\n    x=[],\n    y=[],\n    text=[],\n    mode='markers',\n    hoverinfo='text',\n    marker=dict(\n        showscale=True,\n        colorscale='RdBu',\n        reversescale=True,\n        color=[],\n        size=15,\n        colorbar=dict(\n            thickness=5,\n       #     title='Node Connections',\n            xanchor='left',\n            titleside='right'\n        ),\n        line=dict(width=0)))\n\nfor node in G.nodes():\n    x, y = G.nodes[node]['pos']\n    node_trace['x'] += tuple([x])\n    node_trace['y'] += tuple([y])\n\nfor node, adjacencies in enumerate(G.adjacency()):\n    node_trace['marker']['color']+=tuple([len(adjacencies[1])])\n   # node_info = adjacencies[0] +' # of connections: '+str(len(adjacencies[1]))\n    node_info = adjacencies[0]\n    node_trace['text']+=tuple([node_info])\n\nfig = go.Figure(data=[edge_trace, node_trace],\n             layout=go.Layout(\n                title='Similarity of chemical structures among the drugs that are related to coronavirus in literature',\n                titlefont=dict(size=12),\n                showlegend=False,\n                hovermode='closest',\n                margin=dict(b=50,l=100,r=100,t=50),\n                annotations=[ dict(\n                   # text=\"No. of connections\",\n                    text=\"\",\n                    showarrow=False,\n                    xref=\"paper\", yref=\"paper\") ],\n                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)))\nfig.show()\n","b8c42fdd":"\nimport numpy as np\n\nexist={}\nLIST=open('..\/input\/drugdata\/sorted_alresult.covid19','r')\nfor line in LIST:\n    line=line.replace('\\s\\s+','\\t')\n    line=line.strip()\n    table=line.split(' ')\n    if (float(table[0])>0):\n        exist[table[1]]=0\n    \n    \nREF=open('..\/input\/drugdata\/combine_drug_name_id.csv','r')\nDATA=open('..\/input\/drugdata\/combined_fp2_data.csv','r')\n\ndrug=[]\nall_drug={}\nfor ref in REF:\n    #if ('pos' in ref):\n        ref=ref.strip()\n        rrr=ref.split(',')\n        data=DATA.readline()\n        if (rrr[1].lower() in exist):\n            drug.append(rrr[1])\n    \n            \n            data=data.strip()\n            data=data.split(',')\n            kkk=0\n            for i in data:\n                data[kkk]=float(i)\n                kkk+1\n            all_drug[rrr[1]]=np.asarray(data).astype(np.float)\n    \nREF.close()\nDATA.close()\n\nconnections1=[]\nconnections2=[]\nfor drug1 in drug:\n    for drug2 in drug:\n        if (drug1<drug2):\n            cor=np.corrcoef(all_drug[drug1],all_drug[drug2])\n            if (cor[0,1]>0.35):\n                connections1.append(drug1)\n                connections2.append(drug2)\n                \nimport sys\nimport plotly.graph_objects as go\nimport networkx as nx\n\nnode_list=list(all_drug.keys())\nG = nx.Graph()\nfor i in node_list:\n    G.add_node(i)\n\ni=0\nfor drug1 in connections1:\n    drug2=connections2[i]\n    G.add_edges_from([(drug1,drug2)])\n    i=i+1\n\n\n\npos = nx.spring_layout(G, k=0.5, iterations=50)\nfor n, p in pos.items():\n    G.nodes[n]['pos'] = p\n    \nedge_trace = go.Scatter(\n    x=[],\n    y=[],\n    line=dict(width=1,color='#888'),\n    hoverinfo='none',\n    mode='lines')\n\n\nfor edge in G.edges():\n    x0, y0 = G.nodes[edge[0]]['pos']\n    x1, y1 = G.nodes[edge[1]]['pos']\n    edge_trace['x'] += tuple([x0, x1, None])\n    edge_trace['y'] += tuple([y0, y1, None])\n    \nnode_trace = go.Scatter(\n    x=[],\n    y=[],\n    text=[],\n    mode='markers',\n    hoverinfo='text',\n    marker=dict(\n        showscale=True,\n        colorscale='RdBu',\n        reversescale=True,\n        color=[],\n        size=15,\n        colorbar=dict(\n            thickness=5,\n       #     title='Node Connections',\n            xanchor='left',\n            titleside='right'\n        ),\n        line=dict(width=0)))\n\nfor node in G.nodes():\n    x, y = G.nodes[node]['pos']\n    node_trace['x'] += tuple([x])\n    node_trace['y'] += tuple([y])\n\nfor node, adjacencies in enumerate(G.adjacency()):\n    node_trace['marker']['color']+=tuple([len(adjacencies[1])])\n   # node_info = adjacencies[0] +' # of connections: '+str(len(adjacencies[1]))\n    node_info = adjacencies[0]\n    node_trace['text']+=tuple([node_info])\n\nfig = go.Figure(data=[edge_trace, node_trace],\n             layout=go.Layout(\n                title='Similarity of chemical structures among the drugs that are related to COVID-19 in literature',\n                titlefont=dict(size=12),\n                showlegend=False,\n                hovermode='closest',\n                margin=dict(b=50,l=100,r=100,t=50),\n                annotations=[ dict(\n                   # text=\"No. of connections\",\n                    text=\"\",\n                    showarrow=False,\n                    xref=\"paper\", yref=\"paper\") ],\n                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)))\nfig.show()\n","00cf9206":"import sys\nimport plotly.graph_objects as go\nimport networkx as nx\n\nnode_list=list(['Chloroquine phosphate','Spike (S) antibody','IL-6 antibody','Remdesivir','Favipiravir','Fluorouracil','Ribavirin','Acyclovir','Ritonavir','Lopinavir','Kaletra','Darunavir','Arbidol','Hydroxychloroquine','Oseltamivir'])\nG = nx.Graph()\nfor i in node_list:\n    G.add_node(i)\n\nG.add_edges_from([('Spike (S) antibody','IL-6 antibody')])\nG.add_edges_from([('Remdesivir','Favipiravir')])\nG.add_edges_from([('Remdesivir','Fluorouracil')])\nG.add_edges_from([('Remdesivir','Ribavirin')])\nG.add_edges_from([('Remdesivir','Acyclovir')])\nG.add_edges_from([('Fluorouracil','Favipiravir')])\nG.add_edges_from([('Ribavirin','Favipiravir')])\nG.add_edges_from([('Acyclovir','Favipiravir')])\nG.add_edges_from([('Fluorouracil','Ribavirin')])\nG.add_edges_from([('Fluorouracil','Acyclovir')])\nG.add_edges_from([('Ribavirin','Acyclovir')])\n\nG.add_edges_from([('Ritonavir','Lopinavir')])\nG.add_edges_from([('Ritonavir','Kaletra')])\nG.add_edges_from([('Ritonavir','Darunavir')])\nG.add_edges_from([('Lopinavir','Kaletra')])\nG.add_edges_from([('Lopinavir','Darunavir')])\nG.add_edges_from([('Kaletra','Darunavir')])\n\nG.add_edges_from([('Arbidol','Hydroxychloroquine')])\nG.add_edges_from([('Chloroquine phosphate','Hydroxychloroquine')])\nG.add_edges_from([('Chloroquine phosphate','Arbidol')])\n\npos = nx.spring_layout(G, k=0.5, iterations=50)\nfor n, p in pos.items():\n    G.nodes[n]['pos'] = p\n    \nedge_trace = go.Scatter(\n    x=[],\n    y=[],\n    line=dict(width=1,color='#888'),\n    hoverinfo='none',\n    mode='lines')\n\n\nfor edge in G.edges():\n    x0, y0 = G.nodes[edge[0]]['pos']\n    x1, y1 = G.nodes[edge[1]]['pos']\n    edge_trace['x'] += tuple([x0, x1, None])\n    edge_trace['y'] += tuple([y0, y1, None])\n    \nnode_trace = go.Scatter(\n    x=[],\n    y=[],\n    text=[],\n    mode='markers',\n    hoverinfo='text',\n    marker=dict(\n        showscale=True,\n        colorscale='RdBu',\n        reversescale=True,\n        color=[],\n        size=15,\n        colorbar=dict(\n            thickness=5,\n       #     title='Node Connections',\n            xanchor='left',\n            titleside='right'\n        ),\n        line=dict(width=0)))\n\nfor node in G.nodes():\n    x, y = G.nodes[node]['pos']\n    node_trace['x'] += tuple([x])\n    node_trace['y'] += tuple([y])\n\nfor node, adjacencies in enumerate(G.adjacency()):\n    node_trace['marker']['color']+=tuple([len(adjacencies[1])])\n   # node_info = adjacencies[0] +' # of connections: '+str(len(adjacencies[1]))\n    node_info = adjacencies[0]\n    node_trace['text']+=tuple([node_info])\n\nfig = go.Figure(data=[edge_trace, node_trace],\n             layout=go.Layout(\n                title='Groups of drugs in clinical trials by working mechanisms',\n                titlefont=dict(size=12),\n                showlegend=False,\n                hovermode='closest',\n                margin=dict(b=100,l=100,r=100,t=100),\n                annotations=[ dict(\n                   # text=\"No. of connections\",\n                    text=\"\",\n                    showarrow=False,\n                    xref=\"paper\", yref=\"paper\") ],\n                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)))\nfig.show()","b5deb7ac":"#!\/usr\/bin\/env python\n# coding: utf-8\nimport sys\n!conda install --yes --prefix {sys.prefix} -c rdkit rdkit\n!pip install pubchempy\n!conda install --yes --prefix {sys.prefix} -c openbabel openbabel\nimport numpy as np\nfrom rdkit import DataStructs\nfrom rdkit.Chem.Fingerprints import FingerprintMols\nfrom rdkit import Chem\nfrom pubchempy import *\nfrom rdkit.Chem import MACCSkeys, AllChem\nimport csv\nimport openbabel\nimport pybel\nimport random\nimport time\n\n### map fingerprinting to features; the appended label is later removed in the training code\n\ndef fp_to_feature_v1(fp, data_set, label):\n    tmp = fp.ToBitString()\n    the_feature = list(map(int, tmp))\n    if label == 1:\n        the_feature.append(1)\n    else:\n        the_feature.append(0)\n    data_set.append(the_feature)\n    return data_set\n\ndef fp_to_feature_v2(fp, data_set, label):\n    the_feature = [0 for i in range(1024)]\n    for n in fp.bits:\n        the_feature[n] = 1\n    if label == 1:\n        the_feature.append(1)\n    else:\n        the_feature.append(0)\n    data_set.append(the_feature)\n    return data_set\n\ndef fp_prepare(fp, max_bit, fps):\n    if len(fp.bits) > 0 and max(fp.bits) > max_bit:\n        max_bit = max(fp.bits)\n    fps.append(fp.bits)\n    return max_bit, fps\n\ndef fp_to_feature_v3(max_bit, fps, num_valid_pos, data_set):\n    m = 1\n    for bits in fps:\n        the_feature = [0 for i in range(max_bit + 1)]\n        for n in bits:\n            the_feature[n] = 1\n        if m <= num_valid_pos:\n            the_feature.append(1)\n        else:\n            the_feature.append(0)\n        data_set.append(the_feature)\n        m += 1\n    return data_set\n\ndef get_all_data(smile, maccs_data, morgan_data, fp2_data, fp3_max_bit, fp3s, fp4_max_bit, fp4s, label, num):\n    ms = Chem.MolFromSmiles(smile)\n    mol = pybel.readstring(\"smi\", smile)\n    if ms and mol:\n        fp = MACCSkeys.GenMACCSKeys(ms)\n        maccs_data = fp_to_feature_v1(fp, maccs_data, label)\n        fp = AllChem.GetMorganFingerprintAsBitVect(ms,2,nBits=1024)\n        morgan_data = fp_to_feature_v1(fp, morgan_data, label)\n        fp2 = mol.calcfp('FP2')\n        fp2_data = fp_to_feature_v2(fp2, fp2_data, label)\n        fp3 = mol.calcfp('FP3')\n        fp3_max_bit, fp3s = fp_prepare(fp3, fp3_max_bit, fp3s)\n        fp4 = mol.calcfp('FP4')\n        fp4_max_bit, fp4s = fp_prepare(fp4, fp4_max_bit, fp4s)\n        num += 1\n    return maccs_data, morgan_data, fp2_data, fp3_max_bit, fp3s, fp4_max_bit, fp4s, num\n\n\nmaccs_data = []\nmorgan_data = []\nfp2_data = []\nfp3_data = []\nfp3_max_bit = 0\nfp3s = []\nfp4_data = []\nfp4_max_bit = 0\nfp4s = []\n\n## the random time sleep is inserted because continuous search from pubchem will result in blocking of our IP \n## I was told by pubchem that there are better methods to download, but we never had a chance to explore\nnum_pos = 0\nnum_valid_pos = 0\nwith open(\"..\/input\/drugdata\/bioarchive.list.csv\") as f:\n    a = 0\n    for line in f:\n        line=line.strip()\n        if a % 100 == 0:\n            print(a \/\/ 100)\n        time.sleep(random.randint(0, 5))\n        m = get_compounds(line, 'name')\n        if len(m) > 0:\n            smile = m[0].isomeric_smiles\n            maccs_data, morgan_data, fp2_data, fp3_max_bit, fp3s, fp4_max_bit, fp4s, num_valid_pos = get_all_data(smile, maccs_data, morgan_data, fp2_data, fp3_max_bit, fp3s, fp4_max_bit, fp4s, 1, num_valid_pos)\n            #num_valid_pos += 1\n        num_pos += 1\n        a += 1\n\nfp3_data = fp_to_feature_v3(fp3_max_bit, fp3s, num_valid_pos, fp3_data)\nfp4_data = fp_to_feature_v3(fp4_max_bit, fp4s, num_valid_pos, fp4_data)\n\n### generate individual feature files in the format of features, followed by the last element to be labels\nwith open(\"maccs_data.csv\",\"w\") as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(maccs_data)\n\nwith open(\"morgan_data.csv\",\"w\") as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(morgan_data)\n\nwith open(\"fp2_data.csv\",\"w\") as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(fp2_data)\n\nwith open(\"fp3_data.csv\",\"w\") as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(fp3_data)\n\nwith open(\"fp4_data.csv\",\"w\") as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(fp4_data)","e682eb15":"#!\/usr\/bin\/env python\n# coding: utf-8\nimport numpy as np\nfrom rdkit import DataStructs\nfrom rdkit.Chem.Fingerprints import FingerprintMols\nfrom rdkit import Chem\nfrom pubchempy import *\nfrom rdkit.Chem import rdmolops\nimport pybel\nimport csv\nimport time\nimport random\n\ndata = []\ndrug_name_id = []\n\nnum_pos = 0\nnum_valid_pos = 0\nwith open(\"..\/input\/drugdata\/bioarchive.list.csv\") as f:\n    a = 0\n    for line in f:\n        line=line.strip()\n        if a % 100 == 0:\n            print(a \/\/ 100)\n        m = get_compounds(line, 'name')\n        if len(m) > 0:\n            smile = m[0].isomeric_smiles\n            #labels.append(1)\n            ms = Chem.MolFromSmiles(smile)\n            mol = pybel.readstring(\"smi\", smile)\n            if ms and mol:\n                fp = rdmolops.RDKFingerprint(ms)\n                tmp = fp.ToBitString()\n                the_feature = list(map(int, tmp))\n                the_feature.append(1)\n                data.append(the_feature)\n                drug_name_id.append(['pos_name', line[30:-1]])\n                num_valid_pos += 1\n        num_pos += 1\n        a += 1\n\n\n\ncsvfile.close()\nwith open(\"top_data.csv\",\"w\") as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(data)\n\nwith open(\"drug_name_id.csv\",\"w\") as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(drug_name_id)","271fad9f":"\nimport numpy as np\n\nREF=open('..\/input\/drugdata\/combine_drug_name_id.csv','r')\nDATA=open('..\/input\/drugdata\/combined_fp2_data.csv','r')\n\ndrug=[]\nall_drug={}\nfor ref in REF:\n    data=DATA.readline()\n    if ('pos' in ref):\n        ref=ref.strip()\n        rrr=ref.split(',')\n        drug.append(rrr[1])\n\n        \n        data=data.strip()\n        data=data.split(',')\n        kkk=0\n        for i in data:\n            data[kkk]=float(i)\n            kkk+1\n        all_drug[rrr[1]]=np.asarray(data).astype(np.float)\n\nREF.close()\nDATA.close()\n\nconnections1=[]\nconnections2=[]\nfor drug1 in drug:\n    for drug2 in drug:\n        if (drug1<drug2):\n            cor=np.corrcoef(all_drug[drug1],all_drug[drug2])\n            if (cor[0,1]>0.35):\n                connections1.append(drug1)\n                connections2.append(drug2)\n                \nimport sys\nimport plotly.graph_objects as go\nimport networkx as nx\n\nnode_list=list(all_drug.keys())\nG = nx.Graph()\nfor i in node_list:\n    G.add_node(i)\n\ni=0\nfor drug1 in connections1:\n    drug2=connections2[i]\n    G.add_edges_from([(drug1,drug2)])\n    i=i+1\n\n\n\npos = nx.spring_layout(G, k=0.5, iterations=50)\nfor n, p in pos.items():\n    G.nodes[n]['pos'] = p\n    \nedge_trace = go.Scatter(\n    x=[],\n    y=[],\n    line=dict(width=1,color='#888'),\n    hoverinfo='none',\n    mode='lines')\n\n\nfor edge in G.edges():\n    x0, y0 = G.nodes[edge[0]]['pos']\n    x1, y1 = G.nodes[edge[1]]['pos']\n    edge_trace['x'] += tuple([x0, x1, None])\n    edge_trace['y'] += tuple([y0, y1, None])\n    \nnode_trace = go.Scatter(\n    x=[],\n    y=[],\n    text=[],\n    mode='markers',\n    hoverinfo='text',\n    marker=dict(\n        showscale=True,\n        colorscale='RdBu',\n        reversescale=True,\n        color=[],\n        size=15,\n        colorbar=dict(\n            thickness=5,\n       #     title='Node Connections',\n            xanchor='left',\n            titleside='right'\n        ),\n        line=dict(width=0)))\n\nfor node in G.nodes():\n    x, y = G.nodes[node]['pos']\n    node_trace['x'] += tuple([x])\n    node_trace['y'] += tuple([y])\n\nfor node, adjacencies in enumerate(G.adjacency()):\n    node_trace['marker']['color']+=tuple([len(adjacencies[1])])\n   # node_info = adjacencies[0] +' # of connections: '+str(len(adjacencies[1]))\n    node_info = adjacencies[0]\n    node_trace['text']+=tuple([node_info])\n\nfig = go.Figure(data=[edge_trace, node_trace],\n             layout=go.Layout(\n                title='Similarity of chemical structures among the drugs that were proposed by in vitro virus protein binding',\n                titlefont=dict(size=12),\n                showlegend=False,\n                hovermode='closest',\n                margin=dict(b=50,l=100,r=100,t=50),\n                annotations=[ dict(\n                   # text=\"No. of connections\",\n                    text=\"\",\n                    showarrow=False,\n                    xref=\"paper\", yref=\"paper\") ],\n                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)))\nfig.show()\n","e4e2ac21":"#!\/usr\/bin\/env python\n# coding: utf-8\n\n\nimport numpy as np\nimport csv\nfrom sklearn.metrics import roc_curve, auc, precision_recall_curve\nfrom sklearn.model_selection import KFold\nfrom scipy import interp\nimport matplotlib.pyplot as plt\nimport lightgbm as lgb\nimport pickle\n\nimport os\nos.system('rm -rf pred')\nos.system('mkdir pred')\n\n\n\ndef readcsv(filename):\n    csvfile = open(filename, encoding='utf-8')\n    reader = csv.reader(csvfile)\n    X = []\n    Y = []\n    num_all = 0\n    num_positive = 0\n    for item in reader:\n        X.append(list(map(int, item[:-1])))\n        Y.append(int(item[-1]))\n        if Y[-1] == 1:\n            num_positive += 1\n        num_all += 1\n    X = np.array(X)\n    Y = np.array(Y)\n    return X, Y, num_all, num_positive\n\ndef train_cv(train, test, X, Y):\n    X_train, X_test = X[train], X[test]\n    Y_train, Y_test = Y[train], Y[test]\n    train_data = lgb.Dataset(X_train, label=Y_train)\n    bst = lgb.train(param, train_data, num_round)\n    prediction = bst.predict(X_test)\n    return prediction, Y_test\n\nX1, Y1, num_all, num_positive = readcsv(\"..\/input\/drugdata\/combined_top_data.csv\")\nX2, Y2, num_all, num_positive = readcsv(\"..\/input\/drugdata\/combined_maccs_data.csv\")\nX3, Y3, num_all, num_positive = readcsv(\"..\/input\/drugdata\/combined_morgan_data.csv\")\nX4, Y4, num_all, num_positive = readcsv(\"..\/input\/drugdata\/combined_fp2_data.csv\")\nX5, Y5, num_all, num_positive = readcsv(\"..\/input\/drugdata\/combined_fp3_data.csv\")\nX6, Y6, num_all, num_positive = readcsv(\"..\/input\/drugdata\/combined_fp4_data.csv\")\nX = np.hstack((X1, X2, X3, X4, X5, X6))\nY = Y1\n\nprint(len(X))\nprint(len(X[0]))\n\nthe_round=0\nwhile (the_round<20):\n    num_fold = 5\n    kf = KFold(n_splits=num_fold, random_state=None, shuffle=True)\n    param = {'num_leaves': 31, 'objective': 'binary'}\n    param['metric'] = 'auc'\n    num_round = 10\n\n    AUC = []\n    AUPRC = []\n    AUC_score = []\n    predictions = []\n    test_sets = []\n    num = 0\n    for train, test in kf.split(X):\n        #prediction1, Y_test1 = train_cv(train, test, X1, Y1)\n        #prediction2, Y_test2 = train_cv(train, test, X2, Y2)\n        X_train, X_test = X[train], X[test]\n        Y_train, Y_test = Y[train], Y[test]\n        train_data = lgb.Dataset(X_train, label=Y_train)\n        bst = lgb.train(param, train_data, num_round)\n        num += 1\n        pickle.dump(bst, open('pred\/all_lightgbm_model-'+str(num)+'.'+str(the_round)+'.sav', 'wb'))\n        with open(\"pred\/all_lightgbm_Xtest-\"+str(num)+'.'+str(the_round)+\".csv\",\"w\") as csvfile:\n            writer = csv.writer(csvfile)\n            writer.writerows(X_test)\n        with open(\"pred\/all_lightgbm_testid-\"+str(num)+'.'+str(the_round)+\".csv\",\"w\") as csvfile:\n            writer = csv.writer(csvfile)\n            writer.writerows([test])\n        prediction = bst.predict(X_test)\n        np.savetxt(('pred\/predictions.txt.'+str(num)+'.'+str(the_round)),prediction)\n        predictions.append(prediction)\n        test_sets.append(Y_test)\n    the_round=the_round+1","168cfd22":"import glob\n\nall_dir=glob.glob(\"\/kaggle\/working\/pred\/all_lightgbm_testid-*\")\nref={}\ncount={}\nfor the_dir in all_dir:\n    FILE=open(the_dir,'r')\n    line=FILE.readline()\n    line=line.strip()\n\n    lll=line.split(',')\n    FILE.close()\n    pred=the_dir\n    pred=pred.replace('all_lightgbm_testid-','predictions.txt.')\n    pred=pred.replace('.csv','')\n    PRED=open(pred,'r')\n    i=0\n\n    for line in PRED:\n        line=line.strip()\n        if int(lll[i]) in ref:\n            ref[int(lll[i])]=ref[int(lll[i])]+float(line)\n            count[int(lll[i])]=count[int(lll[i])]+1\n        else:\n            ref[int(lll[i])]=float(line)\n            count[int(lll[i])]=1\n        i=i+1\n\n\n\nREF=open(\"..\/input\/drugdata\/combine_drug_name_id.csv\",'r')\nNEW=open('assembled_prediction.dat','w')\ni=0;\nfor line in REF:\n    line=line.strip()\n    t=line.split(',')\n    t[1]=t[1].replace(' ','_')\n    NEW.write(t[0])\n    NEW.write('\\t')\n    NEW.write(t[1])\n    try:\n        val=ref[int(i)]\/count[int(i)];\n        NEW.write('\\t')\n        NEW.write(str(val))\n        NEW.write('\\t')\n        NEW.write(count[i])\n        \n    except:\n        pass\n    NEW.write('\\n')\n    i=i+1\nREF.close()\nNEW.close()\n\n","d463e6bc":"!ls \/kaggle\/input\/CORD-19-research-challenge\/\nroot_path = '\/kaggle\/input\/CORD-19-research-challenge\/'\n\n!find ..\/input\/CORD-19-research-challenge\/*  -type f | xargs grep -i vaccine |grep -E -- 'COVID-19|COVID19|sars-cov-2' >vaccine_paragraphs\n","c168c524":"import numpy as np\n\n\nall_epi={}\nFILE=open('..\/input\/drugdata\/all_epitope','r')\nfor line in FILE:\n    line=line.strip()\n    all_epi[line]=1\n\nthe_map={}\nfor epi1 in all_epi.keys():\n    for epi2 in all_epi.keys():\n## now we calculate the maximal similarity score:\n        if (len(epi1)<len(epi2)):\n            if (epi1 in epi2):\n                print (epi1,' is a subsequence' ,epi2)\n                if (epi1 in the_map):\n                    the_map[epi1]=the_map[epi1]+'\\t'+epi2\n                else:\n                    the_map[epi1]=epi2\n                if (epi2 in the_map):\n                    the_map[epi2]=the_map[epi2]+'\\t'+epi1\n                else:\n                    the_map[epi2]=epi1\n            cut=1\n            while (cut<5):\n                epi1_cut=epi1[cut:]\n                if (len(epi1_cut)>5):\n                    if (epi1_cut==epi2[0:len(epi1_cut)]):\n                        print (epi1,' is almost subsequence by ' ,cut,' to ',epi2)\n                        if (epi1 in the_map):\n                            the_map[epi1]=the_map[epi1]+'\\t'+epi2\n                        else:\n                            the_map[epi1]=epi2\n                        if (epi2 in the_map):\n                            the_map[epi2]=the_map[epi2]+'\\t'+epi1\n                        else:\n                            the_map[epi2]=epi1\n\n                epi1_cut=epi1[:-cut]\n                if (len(epi1_cut)>5):\n                    if (epi1_cut == epi2[(len(epi2)-len(epi1_cut)):]):\n                        print (epi1,' is almost subsequence by ' ,cut,' to ',epi2)\n                        if (epi1 in the_map):\n                            the_map[epi1]=the_map[epi1]+'\\t'+epi2\n                        else:\n                            the_map[epi1]=epi2\n                        if (epi2 in the_map):\n                            the_map[epi2]=the_map[epi2]+'\\t'+epi1\n                        else:\n                            the_map[epi2]=epi1\n\n                cut=cut+1\n\ngroup={}\nfor epi in all_epi.keys():\n    if (epi in the_map):\n        the_group=the_map[epi].split('\\t')\n        uniq_group={}\n        for ggg in the_group:\n            uniq_group[ggg]=1\n        uniq_group[epi]=1\n        the_member=[]\n        for k in sorted(uniq_group, key=len, reverse=False):\n            the_member.append(k)\n        string=the_member.pop(0)\n        k=1\n        for mmm in the_member:\n            string=string+'|'\n            string=string+mmm\n            k=k+1\n        while(k<9):\n            string=string+'|'\n            k=k+1\n\n        group[string]=1\n    else:\n\n        string=epi\n        k=1\n        while(k<9):\n            string=string+'|'\n            k=k+1\n        group[string]=1\n\ng_i=1\nfor uniq_group in sorted(group.keys()):\n    string='|'+str(g_i)+'|'+uniq_group+'|'\n    print(string)\n    g_i=g_i+1\n","0b5027e9":"import numpy as np\n\n\nall_epi={}\nFILE=open('..\/input\/drugdata\/all_epitope','r')\nfor line in FILE:\n    line=line.strip()\n    all_epi[line]=1\n\nthe_connection={}\nfor epi1 in all_epi.keys():\n    for epi2 in all_epi.keys():\n## now we calculate the maximal similarity score:\n        if (len(epi1)<len(epi2)):\n            if (epi1 in epi2):\n                string=epi1+'_'+epi2\n                the_connection[string]=1\n                string=epi2+'_'+epi1\n                the_connection[string]=1\n            cut=1\n            while (cut<5):\n                epi1_cut=epi1[cut:]\n                if (len(epi1_cut)>5):\n                    if (epi1_cut==epi2[0:len(epi1_cut)]):\n                        string=epi1+'_'+epi2\n                        the_connection[string]=1\n                        string=epi2+'_'+epi1\n                        the_connection[string]=1\n\n                epi1_cut=epi1[:-cut]\n                if (len(epi1_cut)>5):\n                    if (epi1_cut == epi2[(len(epi2)-len(epi1_cut)):]):\n                        string=epi1+'_'+epi2\n                        the_connection[string]=1\n                        string=epi2+'_'+epi1\n                        the_connection[string]=1\n\n                cut=cut+1\n\nvisited={}\ngroup=1\nfor epi in all_epi.keys():\n    if (epi in visited):\n        pass\n    else:\n        ch=0\n        for epi_ref in visited.keys():\n            string=epi_ref+'_'+epi\n            if (string in the_connection):\n                value=visited[epi_ref]\n                ch=1\n        if (ch==1):\n            visited[epi]=value\n        if (ch==0):\n            visited[epi]=group\n            group=group+1\n\n\nggg=1\nwhile (ggg<group):\n    member=[]\n    for epi in all_epi.keys():\n        if (visited[epi]==ggg):\n            member.append(epi)\n    print('Group '+str(ggg),member)\n    ggg=ggg+1","da7a23b5":"\n[Go Top](#top)\n\n\n<div id='PartDuniq'><\/div>\n\n##### D.2.4 Compiling the unique protein regions where epitopes have been identified from various publications by BFS\n\nNow let us find out the unique virus protein regions where epitopes have been identified from various publications by partial sub-sequence overlap. The difference between this section and D.2.3 is the following: When epitode A and B overlap, and B and C overlap, but A and C do not overlap substantially, in the previous section, they are considered as separate groups as we were trying to find out non-overlapping peptides, while in this section, they are considered to be in the same group as they are in the same protein regions.\n\nThese are the unique groups of protein regions where epitopes have so far been identified:\n\n\nGroup 1 'ILLNKHID', 'ILLNKHIDA', 'LLNKHIDAYKTFPPTEPK'\n\nGroup 2 'AFFGMSRIGMEVTPSGTW', 'MEVTPSGTWL', 'GMSRIGMEV', 'FFGMSRIGMEVTPSGTW'\n\nGroup 3 'ALNTPKDHI'\n\nGroup 4 'IRQGTDYKHWPQIAQFA', 'QGTDYKHW', 'QELIRQGTDYKH', 'LIRQGTDYKHWP'\n\nGroup 5 'KHWPQIAQFAPSASAFF', 'AQFAPSASAFFGMSR', 'AQFAPSASAFFGMSRIGM', 'QFAPSASAFFGMSRIGM'\n\nGroup 6 'LALLLLDRL'\n\nGroup 7 'LLLDRLNQL'\n\nGroup 8 'LQLPQGTTL'\n\nGroup 9 'RRPQGLPNNTASWFT', 'GLPNNTASWFTALTQHGK', 'MSDNGPQNQRNAPRITFGGPSDSTGSNQNGERSGARSKQRRPQGLPNNTAS'\n\nGroup 10 'YKTFPPTEPKKDKKKK', 'KHIDAYKTFPPTEPKKDKKK', 'KTFPPTEPKKDKKKK', 'LNKHIDAYKTFPPTEPK', 'TFPPTEPK', 'KTFPPTEPKKDKKKKADETQALPQRQKKQQ'\n\nGroup 11 'GAALQIPFAMQMAYRF', 'GAALQIPFAMQMAYRFN', 'AMQMAYRF', 'PFAMQMAYRFNGIGVTQ'\n\nGroup 12 'MAYRFNGIGVTQNVLY', 'MAYRFNGIGVTQNVLYE'\n\nGroup 13 'QLIRAAEIRASANLAATK', 'QLIRAAEIRASANLAAT'\n\nGroup 14 'FIAGLIAIV'\n\nGroup 15 'ALNTLVKQL', 'QALNTLVKQLSSNFGAI', 'DVVNQNAQALNTLVKQL'\n\nGroup 16 'LITGRLQSL', 'EAEVQIDRLITGRLQSL', 'RLITGRLQSLQTYVTQQ'\n\nGroup 17 'NLNESLIDL'\n\nGroup 18 'RLNEVAKNL', 'EIDRLNEVAKNLNESLIDLQELGKYEQY', 'EVAKNLNESLIDLQELG'\n\nGroup 19 'VLNDILSRL', 'AISSVLNDILSRLDKVE', 'SVLNDILSR'\n\nGroup 20 'VVFLHVTYV'\n\nGroup 21 'GAGICASY'\n\nGroup 22 'GSFCTQLN'\n\nGroup 23 'ILSRLDKVEAEVQIDRL'\n\nGroup 24 'KGIYQTSN'\n\nGroup 25 'KNHTSPDVDLGDISGIN'\n\nGroup 26 'AATKMSECVLGQSKRVD'\n\nGroup 27 'QQFGRD'\n\nGroup 28 'RASANLAATKMSECVLG'\n\nGroup 29 'SLQTYVTQQLIRAAEIR'\n\nGroup 30 'DLGDISGINASVVNIQK'\n\nGroup 31 'GTTLPK', 'LPQGTTLPKG', 'QLPQGTTLPKGFYAE', 'QLPQGTTLPKGFYAEGSR', 'QLPQGTTLPKGFYAEGSRGGSQ'\n\nGroup 32 'YNVTQAFGRRGPEQTQGNF', 'ATKAYNVTQAFGRRG', 'KAYNVTQAFGRRGPE'\n\nGroup 33 'LLPAAD'\n\nGroup 34 'LPQRQKKQ'\n\nGroup 35 'PKGFYAEGSRGGSQASSR', 'SQASSRSS', 'SRGGSQASSRSSSRSR','GTTLPKGFYAEGSRGGSQASSRSSSRSRNSSRNSTPGSSRGTSPARMAGNGGD'\n\nGroup 36 'AGLPYGANK', 'TGPEAGLPYGANK'\n\nGroup 37 'AADLDDFSK'\n\nGroup 38 'QLESKMSGK', 'RLNQLESKMSGK', 'LNQLESKMSGKG', 'LDRLNQLESKMS', 'SKMSGKGQQQQGQTVTKKSAAEASKKPRQKRTATKAYN'\n\nGroup 39 'GVLTESNKK'\n\nGroup 40 'RLFRKSNLK'\n\nGroup 41 'QIAPGQTGK', 'VRQIAPGQTGKIAD'\n\nGroup 42 'TSNFRVQPTESI'\n\nGroup 43 'SNFRVQPTESIV'\n\nGroup 44 'LLIVNNATNVVI'\n\nGroup 45 'RIRGGDGKMKDL'\n\nGroup 46 'LTPGDSSSGWTAG'\n\nGroup 47 'YQAGSTPCNGV'\n\nGroup 48 'QTQTNSPRRARSV'\n\nGroup 49 'VYQVNNLEEIC'\n\nGroup 50 'SMATYYLFDESGEFK'\n\nGroup 51 'MATYYLFDESGEFKL'\n\nGroup 52 'ATYYLFDESGEFKLA'\n\nGroup 53 'DSATLVSDIDITFLK'\n\nGroup 54 'SNPTTFHLDGEVITF'\n\nGroup 55 'NPTTFHLDGEVITFD'\n\nGroup 56 'PTTFHLDGEVITFDN'\n\nGroup 57 'DGEVITFDNLKTLLS'\n\nGroup 58 'EVRTIKVFTTVDNIN'\n\nGroup 59 'VRTIKVFTTVDNINL'\n\nGroup 60 'RTIKVFTTVDNINLH'\n\nGroup 61 'HEGKTFYVLPNDDTL'\n\nGroup 62 'EGKTFYVLPNDDTLR'\n\nGroup 63 'GKTFYVLPNDDTLRV'\n\nGroup 64 'KTFYVLPNDDTLRVE'\n\nGroup 65 'DLMAAYVDNSSLTIK'\n\nGroup 66 'LMAAYVDNSSLTIKK'\n\nGroup 67 'MAAYVDNSSLTIKKP'\n\nGroup 68 'AAYVDNSSLTIKKPN'\n\nGroup 69 'YREGYLNSTNVTIAT'\n\nGroup 70 'REGYLNSTNVTIATY'\n\nGroup 71 'IINLVQMAPISAMVR'\n\nGroup 72 'VAAIFYLITPVHVMS'\n\nGroup 73 'AAIFYLITPVHVMSK'\n\nGroup 74 'PDTRYVLMDGSIIQF'\n\nGroup 75 'DTRYVLMDGSIIQFP'\n\nGroup 76 'TRYVLMDGSIIQFPN'\n\nGroup 77 'RLTKYTMADLVYALR'\n\nGroup 78 'TMADLVYALRHFDEG'\n\nGroup 79 'TKRNVIPTITQMNLK'\n\nGroup 80 'YEAMYTPHTVLQAVG'\n\nGroup 81 'YDHVISTSHKLVLSV'\n\nGroup 82 'SQSIIAYTMSLGAEN'\n\nGroup 83 'SNNSIAIPTNFTISV'\n\nGroup 84 'AIPTNFTISVTTEIL'\n\nGroup 85 'IPTNFTISVTTEILP'\n\nGroup 86 'PTNFTISVTTEILPV'\n\nGroup 87 'TNFTISVTTEILPVS'\n\nGroup 88 'VKPSFYVYSRVKNLN'\n\nGroup 89 'KPSFYVYSRVKNLNS'\n\nGroup 90 'PSFYVYSRVKNLNSS'\n\nGroup 91 'YTGAIKLDDKDPNFK'\n\n\n\nCode for compiling the unique virus protein regions where epitopes have been identified from various publications by BFS:\n\n\n\n[Go Top](#top)\n\n\n","56040a2f":"Groups of drugs in clinical trials by working mechanisms","e24f8ffe":"<div id='PartDlim'><\/div>\n\n#### D.3 Limitations\n\nThere are numerous existing software for epitope prediction, including whether the epitope is on the surface, their docking score and MHC classes. However, studies using homology should be taken carefully, as the overall sequence similarity (based on our other studies) between COVID-19 and SARS-COV (the 2003 version ~82), Ebola (~40%) and Human Coronavirus (65-70% depending on the exact strain) is very limited. It should be taken critically that an exactly conserved epitope (~10 amino acids) indicates same effectiveness across these species. \n\n\n\n","ff4afb50":"\n\n<div id=\"top\"><\/div>\n\n# Subtyping COVID-19 Therapeutic Research Findings\n\n\n#### Yuanfang Guan\n\n#### Michigan Medicine, University of Michigan, Ann Arbor\n\n\n## Summary\n\nThe goal of this exercise is to study this literature provided by the Kaggle COVID-19 challenge organizing team, and to subtype the COVID-19 therapeutic research findings. Specifically, we carried out the following four parts of analyses:\n\n**[Part A. Drugs that have been used in clinical trials for COVID-19](#PartA).** We identified and characterized the [drugs on clinical trials](#PartAdrug) by integrating the FDA drug database and PubChem repository. We hand-curated and summarized the [reported effectiveness](#PartAeff) for each drug. We presented the mutual similarity of [chemical structures](#PartAchem) across the drugs used in clinical trials. \n\nWe [categorized](#PartAcat) the drugs based on their molecular mechanisms, which can facilitate the discovery of related drugs of similar mechanisms and the creation of an effective cocktail treatment: \n\n **[Category 1](#PartAcat1).** RNA mutagens \n \n **[Category 2](#PartAcat2).** Protease inhibitors  \n \n **[Category 3](#PartAcat3).** Virus-entry blockers \n\n **[Category 4](#PartAcat4).** Virus-release blockers\n \n **[Category 5](#PartAcat5).** Monoclonal antibodies\n \n\n**[Part B. Drugs that have been proposed by computational works](#PartB).** We identified the computational publications for COVID-19 drugs, categorized their approaches into the following categories and listed their previous applications in other disease domains, and potential limitations. \n \n**[Category 1](#PartBcat1).** Gene-gene network-based algorithms. \n\n**[Category 2](#PartBcat2).** Expression-based algorithms\n \n**[Category 3](#PartBcat3).** Docking simulation or protein structure-based for \n                     \n   [Category 3.a](#PartBcat3.a). Small molecules \n                    \n   [Category 3.b](#PartBcat3.b). Monoclonal antibodies\n \n\n**[Part C. Drugs that have been proposed by in vitro experiments of COVID-19 invading human cells](#PartC).** We characterized the [chemical structures](#PartCchem) and analyzed the chemical similarity for this group.\n\nFor this list, other than literature mining, we carried out a [machine learning experiment](#PartCexp) to prioritize previously unexplored FDA-approved drugs (in order to circumvent ADMET evaluation) for repurposing. After hand-removing the contaminations, we identified the following top candidates for repurposing: OLUMIANT(Baricitinib) used to treat rheumatoid arthritis, BRIMONIDINE, used to treat glaucoma, EDURANT(rilpivirine) used to treat Human Immunodeficiency Virus-1 (HIV-1), MARPLAN used to treat depression, Corlanor (ivabradine) used to reduce the spontaneous pacemaker activity of the cardiac sinus node. We listed the potential [contaminations\/biases](#PartClim) in this and relevant protein binding-associated approaches.\n\n**[Part D. Epitope study for vaccines](#PartD)** We categorized vaccine studies by their approaches and discussed the background and [limitations](#PartDlim) in relationship to evolution:\n\n**[Approach 1](#PartDcat1).** Homology-based with SARS-COV (the 2003 version of SARS), other coronavirus or Ebola.\n\n**[Approach 2](#PartDcat2).** Immunoinformatics including docking\/molecular dynamics\/protein structures\/antigeniticity predictions.\n\nWe hand-curated a list of [147 epitopes](#PartDepi) from these publications and their supplementary materials, grouped them by the source virus proteins, human T-cell\/B-cell targets and MHC class. We merged all published epitopes into [124 consolidated groups](#PartDconsolidate) by partial sub-sequence search and [91 unique virus protein sequence regions](#PartDuniq) by BFS search algorithms. We hope the above lists will serve as the 'wisdom-of-the-crowd' reference for vaccine development.\n\n**Summary points and future recommended research topics for Phase 2. **\n    \n **Conclusion 1.** There is not a single drug for which consistent positive response has been reported. \n \n **Conclusion 2.** There are overlaps between the drugs in clinical trials, proposed by computational analysis and proposed by in vitro experiments. However, some of the overlaps, especially those with computational analysis may come from a circularity in the methods.\n \n **Conclusion 3.** Drug candidates proposed by computation and in vitro screening could be biased towards cancer-related targeted therapy and substantially contaminated by existing literature or sometimes anecdotes. This bias\/contamination may affect a significant number of computation-based drug-repurposing studies including our own work, and certainly not limited to COVID-19.\n \n **Future direction 1.** Disagreement in the reported drug response can root from differences in dosage, baseline biometrics and population groups. With more clinical trial results coming in, the next step is to carry out meta-analysis to stratify these variables.\n \n **Future direction 2.** Analyzing vaccine findings at this stage is premature as there is no clinical effectiveness study yet. It will be meaningful to make genome variation and vaccines (or maybe antibodies as well) into the same topic, therefore allowing connecting the genome variations to what fraction of the virus strains that a vaccine could cover. \n \n **Future direction 3.** We suggest a topic on news (e.g., google news) retrieval for therapeutic development, as many (if not most) treatment responses may not first appear in manuscripts. \n\nFinally, we would like to take this opportunity to make one comment: Literature tends to be biased towards reporting positive results\uff0cknown biology (e.g., cancer and immuno- drugs), and anecdotes, and we should take the results of this exercise and other documents critically. \n<div id=\"PartA\"><\/div>\n\n\n\n\n[Go Top](#top)\n\n\n\n## Part A Subtyping drugs currently in clinical trial\n##### A.1 Methods: \nWe first counted how many times each FDA drug occured in the documents provided by Kaggle:","f28f379d":"[Go Top](#top)\n\n\n<div id=\"PartB\"><\/div>\n\n## Part B Subtyping computational approaches that are used to propose drug candidates\n\nWe then subtyped computational methods developed to repurposing drugs for COVID-19.\n\n##### B.1 Methods\n\nDuring reading the literature curated in Part A, we came across computational studies that focus on predicting drugs suitable for repurposing for COVID-19. These works tend to propose many drugs. \n\n\n##### B.2 Results\n\n<div id='PartBcat1'><\/div>\n\n##### B.2.1 Gene-gene network-based approaches\n\n**Example**: https:\/\/www.nature.com\/articles\/s41421-020-0153-3 repurposed drugs by network approaches based on homology analysis to other viruses. The authors proposed 16 potential drugs: Irbesartan, Torernifene, Camphor, Equilin, Mesalazine, Mercaptopurine, Paroxetine, Sirolimus, Carvedilol, Colchicine, Dactinomycin, Melatonin, Quinacrine, Eplerenone, Emodin, Oxymetholone. \n\n**Background**: Network-based drug response has been intensively used in the cancer area and was shown to excel in several benchmarks. \n\n<div id='PartBcat2'><\/div>\n\n##### B.2.2 Expression-based approaches\n\n**Example**: https:\/\/arxiv.org\/abs\/2003.14333 repurposed drugs for treating lung injury in COVID-19 by 'could best reverse abnormal gene expression caused by (SARS)-CoV-2-induced inhibition of ACE2 in lung cells,' an effective drug treatment is one that reverts the aberrant gene expression back\nto the normal levels'. The authors proposed the following drugs': geldanamycin, panobinostat, trichostatin A, narciclasine, COL-3 and CGP-60474.\n\n\n<div id='PartBcat3'><\/div>\n\n##### B.2.3 Docking or structural-based approaches\n\n<div id='PartBcat3.a'><\/div>\n\n**B.2.3.1 Small molecule prediction**\n\n**Example 1**: https:\/\/www.biorxiv.org\/content\/10.1101\/2020.03.03.972133v1.full 'a novel advanced deep Q-learning network with the fragment-based drug design (ADQN-FBDD) for generating potential lead compounds targeting SARS-CoV-2 3CLpro' Prioritized 48 candidates by docking (supplement Table S1).\n\n**Example 2**: https:\/\/www.sciencedirect.com\/science\/article\/pii\/S2211383520302999  studied the proteins encoded by SARS-CoV-2 genes, compared them with proteins from other coronaviruses, predicted their structures, and built 19 structures that could be done by homology modeling, Library of ZINC drug database, natural products, 78 anti-viral drugs were screened against these targets plus human ACE2. Prioritized the hundreds of drugs, ranked by docking scores: e.g., Ribavirin, alganciclovir, \u03b2-Thymidine, Platycodin D, Chrysin,Neohesperidin, Lymecycline, Chlorhexidine, Alfuzosin, Betulonal, Valganciclovir, Chlorhexidine, Betulonal, Gnidicin.\n\n\n\n<div id='PartBcat3.b'><\/div>\n\n**B.2.3.2 Monoclonal antibody prediction**\n\n**Example 1: docking-based proposal of antibodies** https:\/\/www.biorxiv.org\/content\/10.1101\/2020.02.22.951178v1.full.pdf The neutralizing antibodies are proposed by computationally docking to the S protein of COVID-19 by docking simulation.\n\n**Example 2: ACE2 pathway-based proposal of antibodies** https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC7079879\/ Potential therapeutic approaches include a SARS-CoV-2 spike protein-based vaccine; a transmembrane protease serine 2 (TMPRSS2) inhibitor to block the priming of the spike protein; blocking the surface ACE2 receptor by using anti-ACE2 antibody or peptides; and a soluble form of ACE2 which should slow viral entry into cells through competitively binding with SARS-CoV-2 and hence decrease viral spread as well as protecting the lung from injury through its unique enzymatic function. MasR-mitochondrial assembly receptor, AT1R-Ang II type 1 receptor.\n\n**Background**: Docking has been used intensively in drug discovery in areas such as cancers. \n\n##### B.3 Limitations\n\n* Computationally proposed drugs tend to be a lot in a single piece of article, sometimes, hundreds of drugs in a single study.\n* Most of the works adopted methods from other pharmacogenomics field that were previously developed for cancers. \n* We are not aware these approaches have generated hypotheses that are used in real-world clinical trials even in popular fields, e.g. cancer, Alzheimer's. Thus, use them with cautions.\n\n\n\n<div id=\"PartC\"><\/div>\n\n[Go Top](#top)\n\n\n## Part C. Drugs proposed by in vitro experiments\n\n#### C.1 Methods\n\n###### C.1.1 Data curation\n\nOther than the drugs used in clinical trials and computational methods, we found an interesting study that carried out genome-wide in vitro binding screening of the virus proteins and human proteins, and proposed 37 drugs that directly target these proteins in the supplementary table 6 of Gordon et al (https:\/\/www.biorxiv.org\/content\/10.1101\/2020.03.22.002386v1.supplementary-material?versioned=true). These drugs are currently being screened by the authors: Loratadine, Daunorubicin, Midostaurin, Ponatinib, Silmitasertib, Valproic Acid, Haloperidol, Metformin, Migalastat, S-verapamil, Indomethacin, Ruxolitinib, Mycophenolic acid, Entacapone, Ribavirin, E-52862, Merimepodib, RVX-208, XL413, AC-55541, Apicidin, AZ3451, AZ8838, Bafilomycin A1, CCT365623, GB110, H-89, JQ1, PB28, PD-144418, RS-PPCC, TMCB, UCPH-101, ZINC1775962367, ZINC4326719, ZINC4511851, ZINC95559591.\n\n<div id='PartCexp'><\/div>\n###### C.1.2 Construction of training set\n\nWe carried out a machine learning exercise, with the hypothesis that the drugs that will be potentially effective should overlap globally in function of these drug targets. We could extract the chemical structure of 34 of the 37 drugs proposed by the authors, which are used as positive examples. The second positive set is the combination of the first positive set and four other drugs that are currently under clinical trial and whose chemical structure can be extracted: remdesivir, hydroxychloroquine, favipiravir and Vitamin C, and thus 38 in total.\n\nThe negative training set, which is also the candidate set, is constructed using the FDA approved list, which was downloaded in Oct 2019 from https:\/\/www.accessdata.fda.gov\/scripts\/cder\/daf\/index.cfm. This list has a total of 7305 drugs, 5596 of which we could obtain the fingerprinting structure.","ce4f25a6":"[Go Top](#top)\n\n\n#### C.2 Results\n\n###### C.2.1 Top candidates in FDA approved drugs\n\nAmong the FDA approved drugs, we identified some top candidates that do not exist in the training gold standard. We hand-searched in literature for each of the top candidates with a probability >0.05 (55 in total). Most of them come from contaminations, i.e., overlapping with an example in the training set even though the drug appears with a different name. \n\nCleaned-up list:\n\n| Drug name | Original usage | Potential issues in the candidate|\n| --- | --- | --- |\n| OLUMIANT(Baricitinib) | Janus kinase (JAK) inhibitor ||\n| MEKTOVI | Targeted therapy to treat BRAF V600E or V600K cancers | May come from bias in cancer targeted therapy\/screening|\n| BRIMONIDINE | Treating glaucoma ||\n| CAPRELSA | kinase inhibitor, medullary thyroid cancer (MTC) | May come from bias in cancer targeted therapy\/screening|\n| EDURANT(rilpivirine)| Treating Human Immunodeficiency Virus-1 (HIV-1) ||\n| MARPLAN | Treating depression | Some schizophrenia drugs are used in the protein interaction training set, and might result in an implicit contamination here|\n| Corlanor (ivabradine) | reduces the spontaneous pacemaker activity of the cardiac sinus node||\n| LORBRENA | kinase inhibitor, ALK mutant cancer| May come from bias in cancer targeted therapy\/screening|\n| BRAFTOVI | kinase inhibitor, Metastatic Melanoma| May come from bias in cancer targeted therapy\/screening|\n| TAVALISSE | kinase inhibitor indicated for the treatment of thrombocytopenia| May come from bias in cancer targeted therapy\/screening|\n\n<div id='PartClim'><\/div>\n\n#### C.3 Limitations and biases in the finding\n\nDrugs proposed by in vitro or computational protein targets\/gene-gene network approaches are definitely biased towards targeted therapies in cancers, because these drugs were intensively screened in cell line experiments. This is true for both the above list and probably the original list proposed through the binding experiments, and certainly other studies.\n\nSecond, low scores only mean the drugs are not similar to others that are being investigated in the study, rather than they are not useful. Remdesivir had a high score of 0.09 (we are not sure if this is an implicit contamination from the training set), the others had low scores, including Vitamin C, hydroxychloroquine and favipiravir.\n\n\n[Go Top](#top)\n\n\n<div id='PartD'><\/div>\n## Part D. Epitope study for vaccines\n\n#### D.1 Methods\n\nWe identied all paragraphs that contain the word vaccine and COVID-19\/SARS-COV-2. Then, we looked through each of the abstract. If deemed relevant, we go to the original paper and record down their methods and proposed epitopes\n\n\n","1d434791":"[Go Top](#top)\n\n\n###### C.1.3 Nested CV to prioritize drug candidates \nFor each round, we randomly selected 80% of the example as training, and 20% as testing. The prediction scores for the test set are recorded in each round. We repeated this process for 20 times ensuring all examples occurred in the test set (100 experiments in total). Then the average of each example was taken as the final prediction score.","b9664b18":"[Go Top](#top)\n\nNext we pulled all rounds of predictions together. ","3f5d265a":"[Go Top](#top)\n\n\n###### Code for extracting chemical features 2","00a43ac1":"Next, we counted the number of publications each drug appeared.","b0982cfa":"[Go Top](#top)\n\n<div id=\"PartAcat\">\n<\/div>\n<div id=\"PartAeff\">\n<\/div>\n\n\n###### A.2.4 Literature summary\n\nAfter hand-removing the irrelevant ones, the drugs can be roughly categorized by their effective mechanisms into:\n\n| Group and Mechanism | Popular Drugs in Trials |\n| --- | --- |\n| RNA mutagens that stop the copying of the virus | Remdesivir, Favipiravir, Fluorouracil, Ribavirin, Acyclovir  |\n| Protease inhibitors that block the multiplication of the virus | Ritonavir, Lopinavir, Kaletra, Darunavir |\n| Stopping the entry of the virus into the host cell | Arbidol, Hydroxychloroquine, Chloroquine phosphate |\n| Stopping the release of the virus from the host cell | Oseltamivir |\n| Monoclonal antibodies targeting a virus protein\/epitope | IL-6 monoclonal antibody, Spike (S) protein antibody |\n\n\n<div id=\"PartAcat1\"><\/div>\n**A.2.4.1 RNA mutagens**\n\nViruses need to copy themselves in order to invade the host and transmit (like cancer cells), thus it makes sense that mutagens that block the copying can be used as drugs. \n\n   **Remdesivir**: It was studied in many publications related to coronavirus. It was suggested to be highly effective in the control of 2019-nCoV infection in vitro, while their cytotoxicity remains in control (0562f70516579d557cd1486000bb7aac5ccec2a1.json, 95cc4248c19a3cc9a54ebcfa09fc7c80518dac5d.json). It was also reported to significantly reduce lung viral load in mice and with successful clinical cases (0562f70516579d557cd1486000bb7aac5ccec2a1.json, 49ac69f362c27acbc6de0c5cbb640267e7a1e797.json). In clinical settings, it has been used as compassionate treatment. Other papers, e.g.,  3e9ae5329eecab16d7c39f1f6dc778cf4a53ee0d.json, suggest the effect is still to be verified.\n\n   **Favipiravir**: It was suggested to be a good candidate (58be092086c74c58e9067121a6ba4836468e7ec3.json). It has been used in trials to treat SARS-CoV-2 infections, while the scores of favipiravir docking with the targets in some virtual screenings are relatively low (based on a computation study 95cc4248c19a3cc9a54ebcfa09fc7c80518dac5d.json)\n\n   **Fluorouracil**: The RNA mutagen 5-fluorouracil (5-FU) treatment will also increase the U:C and A:G transitions. \n\n   **Ribavirin**: It was suggested to be useful for MERS (e5f19b6daf956e815c779228cc0cad1293d65bbb.json). It has been reported to reduce death rate in COVID-19 patients: f294f0df7468a8ac9e27776cc15fa20297a9f040.json. \n\n   **Acyclovir**: No statistical difference in treatment effect (baabfb35a321ea12028160e0d2c1552a2fda2dd5.json)\n\n[Go Top](#top)\n\n<div id=\"PartAcat2\"><\/div>\n**A.2.4.2 Protease inhibitors **\n\n   **Ritonavir**: It was suggested to inhibit proteases and thus block multiplication of the virus. It was reported to deliver a substantial clinical benefit for COVID-19 patients (0562f70516579d557cd1486000bb7aac5ccec2a1.json, and its effectiveness is suggested by *computational* docking studies (9e94f9379fd74fcacc4f3a57e03cbe9035efee8e.json), while others clinical studies showed no effect at all or 'failed' treatment (24e17488d399c436305c819953beae2961214771.json, 8349823092836fe397a59e38615d1491423dbe70.json,8349823092836fe397a59e38615d1491423dbe70.json, ). Previously, it was shown to be beneficial for treating SARS and MERS (3afd5fba7dc182ddfa769c0d766134b525581005.json ).\n\n   **Lopinavir**: Lopinavir is a protease inhibitor. It was reported with substantial benefit for treating COVID-10 patients (0562f70516579d557cd1486000bb7aac5ccec2a1.json). Most studies consider Lopinavir as a potential candidate. \n\n   **Kaletra**: It is the combination of Ritonavir and Lopinavar.\n\n   **Darunavir**: The drug was suggested to be potentially beneficial by *computational* docking experiments (9e94f9379fd74fcacc4f3a57e03cbe9035efee8e.json), and in vitro studies (95cc4248c19a3cc9a54ebcfa09fc7c80518dac5d.json). \n\n[Go Top](#top)\n\n<div id=\"PartAcat3\"><\/div>\n**A.2.4.3 By stopping the entry of the virus into the host cell**\n\n   **Arbidol**: It inhibits membrane fusion between virus particles and plasma membranes, but it shows no statistical difference in treating COVID-19 patients (baabfb35a321ea12028160e0d2c1552a2fda2dd5.json) \n   \n   **Hydroxychloroquine, Chloroquine phosphate**: Some studies also suggest that hydroxycholoroquine is working by blocking the entry of the virus, though the exact mechanism is unknown (https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC7102587\/). Chloroquine effectively inhibited SARS-CoV-2 in vitro (58be092086c74c58e9067121a6ba4836468e7ec3.json). Chloroquine phosphate was reported to have apparent efficacy and acceptable safety against COVID-19 in a multicenter clinical trials (462cbb326ccd8587cae7a3538c8c6712d9013698.json, b70d27459fd8143edf76721da40cdbca399c9fb1.json).Chloroquine has been recently written into official recommendation for empirical therapy of COVID-19 for its adequate safety data in human (0562f70516579d557cd1486000bb7aac5ccec2a1.json)\n\n<div id=\"PartAcat4\"><\/div>\n**A.2.4.4 By stopping the release of the virus from the host cell**\n\n   **Oseltamivir**: Tamiflu, inhibitors of the neuraminidase enzyme, no statistical difference in treating COVID-19 (baabfb35a321ea12028160e0d2c1552a2fda2dd5.json) \n\nThe other drugs in the list are irrelevant in this context of effectiveness. Some are related to test of toxicity\n\n<div id=\"PartAcat5\"><\/div>\n**A.2.4.5 By generating monoclonal antibodies targeting certain proteins of the virus**\n\n   **IL-6 monoclonal antibody**: the IL-6 monoclonal antibody-directed COVID-19 therapy has been used in clinical trial in China (No.ChiCTR2000029765) (7852aafdfb9e59e6af78a47af796325434f8922a.json, c8d206a4f9af0709b6e9ee90c4d854d482cb0784.json), and IL-6 level was suggested to serve as an indicator of poor prognosis, and was suggest to be used for these patients (c8437a45bfb84fb206fe03fd18d28858bae32651.json).\n  \n   **Spike (S) protein antibody**: It was suggested that monoclonal antibody against the S protein may 231 efficiently block the virus from entering the host (c8437a45bfb84fb206fe03fd18d28858bae32651.json). \n   \nNote: some other drugs, though used to treat COVID-19, are not relevant to the discussion. For example, broad-spectrum antibiotics or fever reducers are often used in the control arm. \n\n[Go Top](#top)\n\n##### A.3. Limitations\n\nThe above analysis has the following limitations: \n\n  1. We used a rather earlier version of the literature set (because the searching step took quite a long time), and some popular drugs, e.g. hydroxychloroquine are only discussed but without clear clinical conclusion yet. \n\n  2. Literature could be substantially biased towards positive results and by computational methods (discussed below).","26089268":"[Go Top](#top)\n\n\n<div id='PartDcat1'><\/div>\n#### D.2 Results\n\n##### D.2.1 Subtyping major approaches in vaccine research\n\n###### D.2.1.1 Homology-based approach\n\n**Example 1.** 181b7b57851e6f58a601b68e613d10c10616f774.json. used conserved sequence with SARS-COV (2003 version of SARS), which already have experimentally validated antigenic sequences.\n\n**Example 2.** a2a6e262098539eb875a26800d9f6d3d0d5d1875.json. tested an epitope of Ebola in mouse, and suggested that this epitope is conserved in COVID-19.\n\n**Example 3** 74b00f19c3af87d1081644f02490ba250f57b7ca.json used conserved sequences between COVID-19 and human Coronavirus (HCov-HKU1) to identify epitope.\n\n<div id='PartDcat2'><\/div>\n###### D.2.1.1 Immunoinformatics\n\nDocking\/molecular dynamics\/protein structures and immunoinformatics such as antigenticity\n\n**Example 1** 73c8af41cfdbf52c0dfba37727e3b94cb56b495e.json used antigenicity Prediction, Docking simulation structural prediction\n\n**Example 2** b38ed62b303eaa444d188deb2ab0b23bbdb79211.json used structure prediction.\n\nNote: Many studies use a combination of the above approaches. \n\n<div id='PartDepi'><\/div>\n##### D.2.2 Compiled list of epitopes across the above publications\n|Epitope|Protein|T\/B cell|MHC class|\n| --- | --- | --- | --- |\n|ILLNKHID|N|T cell|I|\n|AFFGMSRIGMEVTPSGTW|N|T cell|NA|\n|MEVTPSGTWL|N|T cell|I|\n|GMSRIGMEV|N|T cell|I|\n|ILLNKHIDA|N|T cell|I|\n|ALNTPKDHI|N|T cell|I|\n|IRQGTDYKHWPQIAQFA|N|T cell|NA|\n|KHWPQIAQFAPSASAFF|N|T cell|NA|\n|LALLLLDRL|N|T cell|I|\n|LLLDRLNQL|N|T cell|I|\n|LLNKHIDAYKTFPPTEPK|N|T cell|NA|\n|LQLPQGTTL|N|T cell|I|\n|AQFAPSASAFFGMSR|N|T cell|II|\n|AQFAPSASAFFGMSRIGM|N|T cell|NA|\n|RRPQGLPNNTASWFT|N|T cell|I|\n|YKTFPPTEPKKDKKKK|N|T cell|NA|\n|GAALQIPFAMQMAYRF|S|T cell|II|\n|MAYRFNGIGVTQNVLY|S|T cell|II|\n|QLIRAAEIRASANLAATK|S|T cell|II|\n|FIAGLIAIV|S|T cell|I|\n|ALNTLVKQL|S|T cell|I|\n|LITGRLQSL|S|T cell|I|\n|NLNESLIDL|S|T cell|I|\n|QALNTLVKQLSSNFGAI|S|T cell|II|\n|RLNEVAKNL|S|T cell|I|\n|VLNDILSRL|S|T cell|I|\n|VVFLHVTYV|S|T cell|I|\n|DVVNQNAQALNTLVKQL|S|B cell||\n|EAEVQIDRLITGRLQSL|S|B cell|\n|EIDRLNEVAKNLNESLIDLQELGKYEQY|S|B cell|\n|EVAKNLNESLIDLQELG|S|B cell|\n|GAALQIPFAMQMAYRFN|S|B cell|\n|GAGICASY|S|B cell|\n|AISSVLNDILSRLDKVE|S|B cell|\n|GSFCTQLN|S|B cell|\n|ILSRLDKVEAEVQIDRL|S|B cell|\n|KGIYQTSN|S|B cell|\n|AMQMAYRF|S|B cell|\n|KNHTSPDVDLGDISGIN|S|B cell|\n|MAYRFNGIGVTQNVLYE|S|B cell|\n|AATKMSECVLGQSKRVD|S|B cell|\n|PFAMQMAYRFNGIGVTQ|S|B cell|\n|QALNTLVKQLSSNFGAI|S|B cell|\n|QLIRAAEIRASANLAAT|S|B cell|\n|QQFGRD|S|B cell|\n|RASANLAATKMSECVLG|S|B cell|\n|RLITGRLQSLQTYVTQQ|S|B cell|\n|EIDRLNEVAKNLNESLIDLQELGKYEQY|S|B cell|\n|SLQTYVTQQLIRAAEIR|S|B cell|\n|DLGDISGINASVVNIQK|S|B cell|\n|FFGMSRIGMEVTPSGTW|N|B cell|\n|GLPNNTASWFTALTQHGK|N|B cell|\n|GTTLPK|N|B cell|\n|IRQGTDYKHWPQIAQFA|N|B cell|\n|KHIDAYKTFPPTEPKKDKKK|N|B cell|\n|KHWPQIAQFAPSASAFF|N|B cell|\n|YNVTQAFGRRGPEQTQGNF|N|B cell|\n|KTFPPTEPKKDKKKK|N|B cell|\n|LLPAAD|N|B cell|\n|LNKHIDAYKTFPPTEPK|N|B cell|\n|LPQGTTLPKG|N|B cell|\n|LPQRQKKQ|N|B cell|\n|PKGFYAEGSRGGSQASSR|N|B cell|\n|QFAPSASAFFGMSRIGM|N|B cell|\n|QGTDYKHW|N|B cell|\n|QLPQGTTLPKGFYAE|N|B cell|\n|QLPQGTTLPKGFYAEGSR|N|B cell|\n|QLPQGTTLPKGFYAEGSRGGSQ|N|B cell|\n|TFPPTEPK|N|B cell|\n|RRPQGLPNNTASWFT|N|B cell|\n|SQASSRSS|N|B cell|\n|SRGGSQASSRSSSRSR|N|B cell|\n|AGLPYGANK|N|T cell|\n|AADLDDFSK|N|T cell|\n|QLESKMSGK|N|T cell|\n|QELIRQGTDYKH|N|T cell|\n|LIRQGTDYKHWP|N|T cell|\n|RLNQLESKMSGK|N|T cell|\n|LNQLESKMSGKG|N|T cell|\n|LDRLNQLESKMS|N|T cell|\n|SVLNDILSR|S|T cell|\n|GVLTESNKK|S|T cell|\n|RLFRKSNLK|S|T cell|\n|QIAPGQTGK|S|T cell|\n|TSNFRVQPTESI|S|T cell|\n|SNFRVQPTESIV|S|T cell|\n|LLIVNNATNVVI|S|T cell|\n|MSDNGPQNQRNAPRITFGGPSDSTGSNQNGERSGARSKQRRPQGLPNNTAS|N|B cell|\n|RIRGGDGKMKDL|N|B cell|\n|TGPEAGLPYGANK|N|B cell|\n|GTTLPKGFYAEGSRGGSQASSRSSSRSRNSSRNSTPGSSRGTSPARMAGNGGD|N|B cell|\n|SKMSGKGQQQQGQTVTKKSAAEASKKPRQKRTATKAYN|N|B cell|\n|KTFPPTEPKKDKKKKADETQALPQRQKKQQ|N|B cell|\n|LTPGDSSSGWTAG|S|B cell|\n|VRQIAPGQTGKIAD|S|B cell|\n|YQAGSTPCNGV|S|B cell|\n|QTQTNSPRRARSV|S|B cell|\n|VYQVNNLEEIC|\n|SMATYYLFDESGEFK|orf1ab|\n|MATYYLFDESGEFKL|orf1ab|\n|ATYYLFDESGEFKLA|orf1ab|\n|DSATLVSDIDITFLK|orf1ab|\n|SNPTTFHLDGEVITF|orf1ab|\n|NPTTFHLDGEVITFD|orf1ab|\n|PTTFHLDGEVITFDN|orf1ab|\n|DGEVITFDNLKTLLS|orf1ab|\n|EVRTIKVFTTVDNIN|orf1ab|\n|VRTIKVFTTVDNINL|orf1ab|\n|RTIKVFTTVDNINLH|orf1ab|\n|HEGKTFYVLPNDDTL|orf1ab|\n|EGKTFYVLPNDDTLR|orf1ab|\n|GKTFYVLPNDDTLRV|orf1ab|\n|KTFYVLPNDDTLRVE|orf1ab|\n|DLMAAYVDNSSLTIK|orf1ab|\n|LMAAYVDNSSLTIKK|orf1ab|\n|MAAYVDNSSLTIKKP|orf1ab|\n|AAYVDNSSLTIKKPN|orf1ab|\n|YREGYLNSTNVTIAT|orf1ab|\n|REGYLNSTNVTIATY|orf1ab|\n|IINLVQMAPISAMVR|orf1ab|\n|VAAIFYLITPVHVMS|orf1ab|\n|AAIFYLITPVHVMSK|orf1ab|\n|PDTRYVLMDGSIIQF|orf1ab|\n|DTRYVLMDGSIIQFP|orf1ab|\n|TRYVLMDGSIIQFPN|orf1ab|\n|RLTKYTMADLVYALR|orf1ab|\n|TMADLVYALRHFDEG|orf1ab|\n|TKRNVIPTITQMNLK|orf1ab|\n|YEAMYTPHTVLQAVG|orf1ab|\n|YDHVISTSHKLVLSV|orf1ab|\n|SQSIIAYTMSLGAEN|S|\n|SNNSIAIPTNFTISV|S|\n|AIPTNFTISVTTEIL|S|\n|IPTNFTISVTTEILP|S|\n|PTNFTISVTTEILPV|S|\n|TNFTISVTTEILPVS|S|\n|VKPSFYVYSRVKNLN|E|\n|KPSFYVYSRVKNLNS|E|\n|PSFYVYSRVKNLNSS|E|\n|ATKAYNVTQAFGRRG|N|\n|KAYNVTQAFGRRGPE|N|\n|YTGAIKLDDKDPNFK|N|\n\n\n[Go Top](#top)","1d6c4e6a":"\n[Go Top](#top)\n\n\n## Acknowledgement\n\nI thank Kaggle organizing team for trouble shooting, my research assistant Jiantao Guo for sharing the feature extraction code and my husband Wei Dong for useful comments. \n\nThis work is supported by NIH\/NIGMS R35-GM133346 'Machine Learning for Drug Response Prediction'. \n","55a0238d":"<div id='PartDconsolidate'><\/div>\n\n##### D.2.3 Compiling list of consolidated epitope groups by partial subsequence overlap\nNow we consolidate the epitopes from various publications by partial sub-sequence overlap. The rationale is to identify the cases where one epitope is a subsequence of another, or if one overlaps to the other by more than 5 consequtive amino acides, and only the outside flanking ragion is not overlapping. In these cases, two epitodes would be considered in the same group.\n\nThese are the consolidated epitope groups that have so far been published:\n\n\n|Group|Epitope 1|Epitope 2|Epitope 3|Epitope 4|Epitope 5|Epitope 6|Epitope 7|Epitope 8|Epitope 9|\n|---|---|---|---|---|---|---|---|---|---|\n|1|AADLDDFSK|||||||||\n|2|AAIFYLITPVHVMSK|||||||||\n|3|AATKMSECVLGQSKRVD|||||||||\n|4|AAYVDNSSLTIKKPN|||||||||\n|5|AGLPYGANK|TGPEAGLPYGANK||||||||\n|6|AIPTNFTISVTTEIL|||||||||\n|7|ALNTLVKQL|DVVNQNAQALNTLVKQL||||||||\n|8|ALNTLVKQL|QALNTLVKQLSSNFGAI|DVVNQNAQALNTLVKQL|||||||\n|9|ALNTLVKQL|QALNTLVKQLSSNFGAI||||||||\n|10|ALNTPKDHI|||||||||\n|11|AMQMAYRF|GAALQIPFAMQMAYRF|GAALQIPFAMQMAYRFN|PFAMQMAYRFNGIGVTQ||||||\n|12|AMQMAYRF|GAALQIPFAMQMAYRF|GAALQIPFAMQMAYRFN|||||||\n|13|AMQMAYRF|MAYRFNGIGVTQNVLY|PFAMQMAYRFNGIGVTQ|||||||\n|14|AQFAPSASAFFGMSR|KHWPQIAQFAPSASAFF|QFAPSASAFFGMSRIGM|AQFAPSASAFFGMSRIGM||||||\n|15|AQFAPSASAFFGMSR|KHWPQIAQFAPSASAFF||||||||\n|16|ATKAYNVTQAFGRRG|KAYNVTQAFGRRGPE|YNVTQAFGRRGPEQTQGNF|||||||\n|17|ATKAYNVTQAFGRRG|YNVTQAFGRRGPEQTQGNF||||||||\n|18|ATYYLFDESGEFKLA|||||||||\n|19|DGEVITFDNLKTLLS|||||||||\n|20|DLGDISGINASVVNIQK|||||||||\n|21|DLMAAYVDNSSLTIK|||||||||\n|22|DSATLVSDIDITFLK|||||||||\n|23|DTRYVLMDGSIIQFP|||||||||\n|24|EGKTFYVLPNDDTLR|||||||||\n|25|EVRTIKVFTTVDNIN|||||||||\n|26|FIAGLIAIV|||||||||\n|27|GAGICASY|||||||||\n|28|GKTFYVLPNDDTLRV|||||||||\n|29|GMSRIGMEV|AQFAPSASAFFGMSR|QFAPSASAFFGMSRIGM|AQFAPSASAFFGMSRIGM||||||\n|30|GMSRIGMEV|FFGMSRIGMEVTPSGTW|QFAPSASAFFGMSRIGM|AFFGMSRIGMEVTPSGTW|AQFAPSASAFFGMSRIGM|||||\n|31|GMSRIGMEV|MEVTPSGTWL|FFGMSRIGMEVTPSGTW|AFFGMSRIGMEVTPSGTW||||||\n|32|GSFCTQLN|||||||||\n|33|GTTLPK|LPQGTTLPKG|QLPQGTTLPKGFYAE|QLPQGTTLPKGFYAEGSR|QLPQGTTLPKGFYAEGSRGGSQ|GTTLPKGFYAEGSRGGSQASSRSSSRSRNSSRNSTPGSSRGTSPARMAGNGGD||||\n|34|GTTLPK|LQLPQGTTL|LPQGTTLPKG|QLPQGTTLPKGFYAE|PKGFYAEGSRGGSQASSR|QLPQGTTLPKGFYAEGSR|QLPQGTTLPKGFYAEGSRGGSQ|GTTLPKGFYAEGSRGGSQASSRSSSRSRNSSRNSTPGSSRGTSPARMAGNGGD||\n|35|GTTLPK|LQLPQGTTL|LPQGTTLPKG|QLPQGTTLPKGFYAE|QLPQGTTLPKGFYAEGSR|QLPQGTTLPKGFYAEGSRGGSQ|GTTLPKGFYAEGSRGGSQASSRSSSRSRNSSRNSTPGSSRGTSPARMAGNGGD|||\n|36|GTTLPK|SQASSRSS|LPQGTTLPKG|QLPQGTTLPKGFYAE|SRGGSQASSRSSSRSR|PKGFYAEGSRGGSQASSR|QLPQGTTLPKGFYAEGSR|QLPQGTTLPKGFYAEGSRGGSQ|GTTLPKGFYAEGSRGGSQASSRSSSRSRNSSRNSTPGSSRGTSPARMAGNGGD|\n|37|GVLTESNKK|||||||||\n|38|HEGKTFYVLPNDDTL|||||||||\n|39|IINLVQMAPISAMVR|||||||||\n|40|ILLNKHID|ILLNKHIDA|LNKHIDAYKTFPPTEPK|LLNKHIDAYKTFPPTEPK||||||\n|41|ILLNKHID|TFPPTEPK|ILLNKHIDA|LNKHIDAYKTFPPTEPK|LLNKHIDAYKTFPPTEPK|KHIDAYKTFPPTEPKKDKKK||||\n|42|ILSRLDKVEAEVQIDRL|||||||||\n|43|IPTNFTISVTTEILP|||||||||\n|44|KAYNVTQAFGRRGPE|YNVTQAFGRRGPEQTQGNF||||||||\n|45|KGIYQTSN|||||||||\n|46|KNHTSPDVDLGDISGIN|||||||||\n|47|KPSFYVYSRVKNLNS|||||||||\n|48|KTFYVLPNDDTLRVE|||||||||\n|49|LALLLLDRL|||||||||\n|50|LITGRLQSL|EAEVQIDRLITGRLQSL|RLITGRLQSLQTYVTQQ|||||||\n|51|LITGRLQSL|EAEVQIDRLITGRLQSL||||||||\n|52|LITGRLQSL|RLITGRLQSLQTYVTQQ||||||||\n|53|LLIVNNATNVVI|||||||||\n|54|LLLDRLNQL|LDRLNQLESKMS||||||||\n|55|LLLDRLNQL|QLESKMSGK|LDRLNQLESKMS|||||||\n|56|LLPAAD|||||||||\n|57|LMAAYVDNSSLTIKK|||||||||\n|58|LPQRQKKQ|KTFPPTEPKKDKKKKADETQALPQRQKKQQ||||||||\n|59|LPQRQKKQ|TFPPTEPK|KTFPPTEPKKDKKKK|YKTFPPTEPKKDKKKK|KTFPPTEPKKDKKKKADETQALPQRQKKQQ|||||\n|60|LQLPQGTTL|LPQGTTLPKG|QLPQGTTLPKGFYAE|QLPQGTTLPKGFYAEGSR|QLPQGTTLPKGFYAEGSRGGSQ|||||\n|61|LTPGDSSSGWTAG|||||||||\n|62|MAAYVDNSSLTIKKP|||||||||\n|63|MATYYLFDESGEFKL|||||||||\n|64|MAYRFNGIGVTQNVLY|MAYRFNGIGVTQNVLYE|PFAMQMAYRFNGIGVTQ|||||||\n|65|MAYRFNGIGVTQNVLY|MAYRFNGIGVTQNVLYE||||||||\n|66|MEVTPSGTWL|FFGMSRIGMEVTPSGTW|AFFGMSRIGMEVTPSGTW|||||||\n|67|NLNESLIDL|EVAKNLNESLIDLQELG|EIDRLNEVAKNLNESLIDLQELGKYEQY|||||||\n|68|NLNESLIDL|RLNEVAKNL|EVAKNLNESLIDLQELG|EIDRLNEVAKNLNESLIDLQELGKYEQY||||||\n|69|NPTTFHLDGEVITFD|||||||||\n|70|PDTRYVLMDGSIIQF|||||||||\n|71|PSFYVYSRVKNLNSS|||||||||\n|72|PTNFTISVTTEILPV|||||||||\n|73|PTTFHLDGEVITFDN|||||||||\n|74|QGTDYKHW|LIRQGTDYKHWP|IRQGTDYKHWPQIAQFA|||||||\n|75|QGTDYKHW|QELIRQGTDYKH|IRQGTDYKHWPQIAQFA|||||||\n|76|QGTDYKHW|QELIRQGTDYKH|LIRQGTDYKHWP|IRQGTDYKHWPQIAQFA||||||\n|77|QIAPGQTGK|VRQIAPGQTGKIAD||||||||\n|78|QLESKMSGK|LNQLESKMSGKG||||||||\n|79|QLESKMSGK|RLNQLESKMSGK|LNQLESKMSGKG|LDRLNQLESKMS|SKMSGKGQQQQGQTVTKKSAAEASKKPRQKRTATKAYN|||||\n|80|QLESKMSGK|RLNQLESKMSGK||||||||\n|81|QLESKMSGK|SKMSGKGQQQQGQTVTKKSAAEASKKPRQKRTATKAYN||||||||\n|82|QLIRAAEIRASANLAAT|QLIRAAEIRASANLAATK||||||||\n|83|QQFGRD|||||||||\n|84|QTQTNSPRRARSV|||||||||\n|85|RASANLAATKMSECVLG|||||||||\n|86|REGYLNSTNVTIATY|||||||||\n|87|RIRGGDGKMKDL|||||||||\n|88|RLFRKSNLK|||||||||\n|89|RLNEVAKNL|EVAKNLNESLIDLQELG|EIDRLNEVAKNLNESLIDLQELGKYEQY|||||||\n|90|RLTKYTMADLVYALR|||||||||\n|91|RRPQGLPNNTASWFT|GLPNNTASWFTALTQHGK|MSDNGPQNQRNAPRITFGGPSDSTGSNQNGERSGARSKQRRPQGLPNNTAS|||||||\n|92|RRPQGLPNNTASWFT|GLPNNTASWFTALTQHGK||||||||\n|93|RRPQGLPNNTASWFT|MSDNGPQNQRNAPRITFGGPSDSTGSNQNGERSGARSKQRRPQGLPNNTAS||||||||\n|94|RTIKVFTTVDNINLH|||||||||\n|95|SLQTYVTQQLIRAAEIR|||||||||\n|96|SMATYYLFDESGEFK|||||||||\n|97|SNFRVQPTESIV|||||||||\n|98|SNNSIAIPTNFTISV|||||||||\n|99|SNPTTFHLDGEVITF|||||||||\n|100|SQASSRSS|PKGFYAEGSRGGSQASSR|QLPQGTTLPKGFYAEGSRGGSQ|GTTLPKGFYAEGSRGGSQASSRSSSRSRNSSRNSTPGSSRGTSPARMAGNGGD||||||\n|101|SQASSRSS|SRGGSQASSRSSSRSR|GTTLPKGFYAEGSRGGSQASSRSSSRSRNSSRNSTPGSSRGTSPARMAGNGGD|||||||\n|102|SQASSRSS|SRGGSQASSRSSSRSR|PKGFYAEGSRGGSQASSR|GTTLPKGFYAEGSRGGSQASSRSSSRSRNSSRNSTPGSSRGTSPARMAGNGGD||||||\n|103|SQSIIAYTMSLGAEN|||||||||\n|104|SVLNDILSR|AISSVLNDILSRLDKVE||||||||\n|105|TFPPTEPK|KTFPPTEPKKDKKKK|YKTFPPTEPKKDKKKK|KHIDAYKTFPPTEPKKDKKK|KTFPPTEPKKDKKKKADETQALPQRQKKQQ|||||\n|106|TFPPTEPK|KTFPPTEPKKDKKKK|YKTFPPTEPKKDKKKK|LNKHIDAYKTFPPTEPK|LLNKHIDAYKTFPPTEPK|KHIDAYKTFPPTEPKKDKKK|KTFPPTEPKKDKKKKADETQALPQRQKKQQ|||\n|107|TFPPTEPK|KTFPPTEPKKDKKKK|YKTFPPTEPKKDKKKK|LNKHIDAYKTFPPTEPK|LLNKHIDAYKTFPPTEPK|KHIDAYKTFPPTEPKKDKKK||||\n|108|TKRNVIPTITQMNLK|||||||||\n|109|TMADLVYALRHFDEG|||||||||\n|110|TNFTISVTTEILPVS|||||||||\n|111|TRYVLMDGSIIQFPN|||||||||\n|112|TSNFRVQPTESI|||||||||\n|113|VAAIFYLITPVHVMS|||||||||\n|114|VKPSFYVYSRVKNLN|||||||||\n|115|VLNDILSRL|AISSVLNDILSRLDKVE||||||||\n|116|VLNDILSRL|SVLNDILSR|AISSVLNDILSRLDKVE|||||||\n|117|VRTIKVFTTVDNINL|||||||||\n|118|VVFLHVTYV|||||||||\n|119|VYQVNNLEEIC|||||||||\n|120|YDHVISTSHKLVLSV|||||||||\n|121|YEAMYTPHTVLQAVG|||||||||\n|122|YQAGSTPCNGV|||||||||\n|123|YREGYLNSTNVTIAT|||||||||\n|124|YTGAIKLDDKDPNFK|||||||||\n\n\n\nCode for compiling list of consolidated epitope groups by partial subsequence overlap.\n\n\n\n[Go Top](#top)","51efd838":"[Go Top](#top)\n\n\n<div id=\"PartAdrug\"><\/div>\n\n##### A.2 Results\n\n###### A.2.1 The number of publications each drug appeared, top ones, >=100 times, are (full list in sorted_alresult):\n*     103 hydrocortisone\n*     106 ritonavir\n*     111 prednisolone\n*     113 dv\n*     118 ciprofloxacin\n*     119 cyclosporine\n*     127 acyclovir\n*     134 azithromycin\n*     141 amoxicillin\n*     155 doxycycline\n*     159 dexamethasone\n*     166 triad\n*     177 chloramphenicol\n*     177 kanamycin\n*     238 isoflurane\n*     248 gentamicin\n*     370 bal\n*     383 adenosine\n*     436 insulin\n*     480 ribavirin\n*    1767 penicillin\n\n[Go Top](#top)\n\n\n###### A.2.2 the drugs that have been related to coronavirus in literature, and the top ones, >10 times, are (full list in sorted_alresult.coronavirus):\n*      10 times: amoxicillin\n*      10 times: fluorouracil\n*      10 times: kanamycin\n*      12 times: azithromycin\n*      12 times: hydrocortisone\n*      13 times: doxycycline\n*      13 times: levofloxacin\n*      14 dexamethasone\n*      14 isoflurane\n*      15 dv\n*      15 kaletra\n*      15 prednisolone\n*      15 tamiflu\n*      16 cyclosporine\n*      16 gentamicin\n*      18 tao\n*      19 acyclovir\n*      24 triad\n*      25 insulin\n*      35 remdesivir\n*      41 adenosine\n*      60 ritonavir\n*      66 bal\n*      86 penicillin\n*     150 ribavirin\n    \n [Go Top](#top)\n \n###### A.2.3 The drugs specifically related to COVID-19 in literature (sorted_alresult.covid19)\n*       1 acetaminophen\n*       1 acyclovir\n*       1 amoxicillin\n*       1 antitussive\n*       1 azithromycin\n*       1 bal\n*       1 ceftriaxone\n*       1 chloramphenicol\n*       1 digoxin\n*       1 doxycycline\n*       1 fluorouracil\n*       1 ganciclovir\n*       1 ibuprofen\n*       1 iclusig\n*       1 insulin\n*       1 levofloxacin\n*       1 penicillin\n*       1 sulfasalazine\n*       1 tigecycline\n*       2 adenosine\n*       2 triad\n*       3 darunavir\n*       4 tao\n*       7 kaletra\n*      12 ribavirin\n*      17 remdesivir\n*      22 ritonavir\n\n[Go Top](#top)\n\n\n<div id='PartAchem'><\/div>\n\n Now we analyze the chemical similarities of these drugs.\n\n\n","6088e305":"\n<div id=\"top\"><\/div>\n","dac6e650":"<div id=\"PartCchem\"><\/div>\n\nVisualize the proposed drug similarities:"}}