{"cell_type":{"35dddc2f":"code","0ccf6c3a":"code","13d64b2d":"code","efc710bb":"code","c6d3fda0":"code","3af97eb9":"code","8c6b299e":"code","3223f648":"code","1b9cfc05":"code","f9533774":"code","15f99b19":"code","bf64b5b2":"code","9ee25422":"code","2f963b3b":"code","132663c8":"code","1944f8a2":"code","2ff57814":"code","620998c3":"code","1ee7cf36":"code","a173175c":"code","d08bb067":"code","820c27b2":"code","50d8c614":"code","a1b6c2bc":"code","3c127e2e":"code","8ff67cf8":"code","1d5fea89":"code","ac015a48":"code","cc88e8c5":"code","5f75adc4":"markdown","8b49ee5e":"markdown","322d316a":"markdown","1a875593":"markdown","8500b847":"markdown","459bb679":"markdown","58d85f13":"markdown","3500e1e5":"markdown","06a5749a":"markdown","015dc3de":"markdown","69a8dc7c":"markdown","b0444abc":"markdown","bd2db427":"markdown","11c69243":"markdown","8c840146":"markdown","d5d6a512":"markdown","a007ae55":"markdown","375f074c":"markdown","c00d4807":"markdown","9973d4bd":"markdown","31eaca85":"markdown","f1d4317e":"markdown","c4cb2060":"markdown","2c995308":"markdown","a171cfe2":"markdown","7a2a14ee":"markdown","0256d7ec":"markdown","7c4af0b4":"markdown","f5800170":"markdown"},"source":{"35dddc2f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))","0ccf6c3a":"playstore_df = pd.read_csv(\"..\/input\/googleplaystore.csv\")\nplaystore_df.head()","13d64b2d":"playstore_df.shape","efc710bb":"playstore_df.info()","c6d3fda0":"playstore_df = playstore_df.drop_duplicates(['App'], keep='first')","3af97eb9":"playstore_df.isnull().sum()","8c6b299e":"playstore_df.dropna(how='any', inplace=True)  # Dropping Missing Values","3223f648":"# Converting to int\nplaystore_df['Reviews'] = playstore_df['Reviews'].apply(lambda x: int(x) if str(x).isnumeric() == True else x )\nplaystore_df['Reviews'] = playstore_df['Reviews'].astype(int)","1b9cfc05":"#Size - Removing 'M' and mutltiplying by 10^3\nplaystore_df['Size'] = playstore_df['Size'].apply(lambda x: str(x).replace('Varies with device','NaN') if 'Varies with device' in x else x)\nplaystore_df['Size'] = playstore_df['Size'].apply(lambda x: float(str(x).rstrip('M'))*(10**3) if 'M' in str(x) else x)\nplaystore_df['Size'] = playstore_df['Size'].apply(lambda x: float(str(x).rstrip('k')) if 'k' in str(x) else x)\nplaystore_df = playstore_df[~(playstore_df['Size'] == 'NaN')]\nplaystore_df['Size'] = playstore_df['Size'].astype(int)","f9533774":" playstore_df['Installs'].unique()","15f99b19":"# Removing '+' and ','\nplaystore_df['Installs'] = playstore_df['Installs'].str.rstrip('+').str.replace(',','')\nplaystore_df['Installs'] = playstore_df['Installs'].astype(int) #Converting to int","bf64b5b2":"playstore_df['Price'].unique()","9ee25422":"# Removing '$'\nplaystore_df['Price'] =  playstore_df['Price'].apply(lambda x : float(str(x).lstrip('$')) if '$' in str(x) else x)\nplaystore_df['Price'] = playstore_df['Price'].astype(float) #converting to float","2f963b3b":"playstore_df.head()","132663c8":"playstore_df['Category'].nunique()","1944f8a2":"cat_df = playstore_df['Category'].value_counts().head(10).to_frame().reset_index()\ndata = cat_df.Category\nrecipe = cat_df['index']\n\nfig, ax = plt.subplots(figsize=(10, 12), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts = ax.pie(data, wedgeprops=dict(width=0.5), startangle=-40)\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(xycoords='data', textcoords='data', arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(recipe[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),horizontalalignment=horizontalalignment, **kw)\n\nplt.show()","2ff57814":"playstore_df['Category'].value_counts().head(6).index.tolist()\n\nFree = playstore_df[playstore_df.Type == 'Free']['Category'].value_counts().to_frame()\nPaid = playstore_df[playstore_df.Type == 'Paid']['Category'].value_counts().to_frame()\n\nTotal = Free.join(Paid, lsuffix='_Free', rsuffix='_Paid')\nTotal = Total.head(6)\nTotal.reset_index()","620998c3":"N = 6\nind = np.arange(N)\nw = 0.45\nplt.figure(figsize=(14,8))\np1 = plt.bar(ind, Total.Category_Free.values, width=w, color='#DB5C5C')\np2 = plt.bar(ind, Total.Category_Paid.values, bottom=Total.Category_Free.values, width=w, color='#39A86B')\n\nplt.xticks(ind, Total.index, rotation=35)\nplt.legend((p1[0], p2[0]),('Free', 'Paid'))\nplt.show()","1ee7cf36":"ratings = playstore_df['Rating']\n\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(10,12))\n\nplt.subplot(2,1,1)\nplt.hist(ratings, bins=None)\nplt.title('Rating Distribution', fontsize=22, color='#191970')\nplt.xlabel('Ratings', fontsize=14, color='#191970')\n\nplt.subplot(2,1,2)\nsns.set(style=\"whitegrid\")\nsns.stripplot(data=ratings, jitter=True, orient='h')","a173175c":"df_catinst = playstore_df[['Category', 'App']].groupby(['Category']).\\\n                          count().sort_values('App', ascending=0).head(6).reset_index()\n\nplt.figure(figsize=(12,8))\nsns.set_style(\"darkgrid\")\nax=sns.barplot(x=df_catinst.Category, \n               y=df_catinst.App, \n               data=df_catinst, \n               palette='YlGnBu_r')\n\nfor p in ax.patches:\n    ax.text(p.get_x()+0.3, p.get_height()+48, p.get_height(), \\\n            fontsize=11, color='black', rotation=15)\n\nax.set_xlabel('Categories',fontsize=16, fontweight='bold', color='#191970')\nax.set_ylabel('Number of Apps', fontsize=16, fontweight='bold', color='#191970')\n","d08bb067":"df_categeories = playstore_df.groupby('Category').filter(lambda x: len(x) >= 120)\n\nplt.figure(figsize=(15,10))\nsns.boxplot(y=df_categeories.Rating, x=df_categeories.Category,data=playstore_df);\n\nplt.xticks(rotation=50)\nax.set_xlabel('Categories',fontsize=16, fontweight='bold', color='#191970', )\nax.set_ylabel('Ratings', fontsize=16, fontweight='bold', color='#191970')\n","820c27b2":"df2 = playstore_df[['Rating', 'Reviews']].reset_index()\n\nsns.lmplot(y='Reviews', x='Rating',data=df2,fit_reg=False, size=8)","50d8c614":"temp_df = playstore_df.groupby(['Category'])\\\n                  .agg({'Installs':'sum'})\\\n                  .sort_values(by='Installs',ascending=False).reset_index()\n\nplt.figure(figsize=(15,20))\nsns.set_style(\"darkgrid\")\n\nsns.barplot(x=temp_df['Installs'], \n            y=temp_df['Category'], \n            linewidth=2, \n            edgecolor=\"k\"*len(temp_df), \n            palette=\"Blues_r\" )\nplt.yticks(rotation=10)\n\nplt.xlabel('Installs', fontsize=15, color='#191970')\nplt.ylabel('Categories', fontsize=15, color='#191970')\n","a1b6c2bc":"categories = ['FAMILY', 'GAME', 'TOOLS']\n    \ndf_temp_cat = playstore_df.loc[playstore_df.Category.isin(categories)]\n\nplt.figure(figsize=(16,10))\nsns.violinplot(x='Category', y='Rating', data=df_temp_cat,hue='Type',\\\n                   palette='Paired',split=True, scale='count',\\\n               kde=False,linewidth=1)","3c127e2e":"df_temp5 = playstore_df.loc[playstore_df['Type'] == 'Paid'][['Price', 'Size']].reset_index()\n\nsns.lmplot(x='Price', y='Size', data=df_temp5, fit_reg=False ,size=10)","8ff67cf8":"df_temp = playstore_df[(playstore_df.Installs >= 1000000)\n           & (playstore_df.Rating >= 3.5)\n           & (playstore_df.Reviews >=10000)][['App','Category','Rating','Size','Type','Installs']].sort_values('Installs', ascending=0)","1d5fea89":"df_freeapp = df_temp[(df_temp.Type == 'Free')][['App']].head(10)\ndf_freeapp","ac015a48":"df_paidapp = df_temp[(df_temp.Type == 'Paid')][['App']].head(10)\ndf_paidapp","cc88e8c5":"a=df_temp[(df_temp.Category == 'GAME')&(df_temp.Type == 'Free')][['App']].head(10)\nb=df_temp[(df_temp.Category == 'GAME')&(df_temp.Type == 'Paid')][['App']].head(10)\n\nfrom IPython.display import display\nprint(\"Top 10 Games(Free)\")\ndisplay(a)\nprint(\"Top 10 Games(Paid)\")\ndisplay(b)","5f75adc4":"### Distribution of Ratings","8b49ee5e":">## **Which categories have the highest number of installs?**","322d316a":"* Convert values of Object type to int type\n* Remove  'M' from  Size of the App  and convert to KB\n* Remove '+' and ',' from number of Installs and convert it to int type\n* Remove '$' from Price and convert it to float type","1a875593":"## Insights\n*  'Game' has the highest number of installs. One interesting fact is that  'Game' has the 2nd highest presence on Playstore. It suggests that majority of users prefer games over other apps.","8500b847":"## Importing required libraries","459bb679":"![](http:\/\/pmcvariety.files.wordpress.com\/2018\/03\/google-play.png?w=1000&h=563&crop=1)","58d85f13":"## **Loading Dataset**","3500e1e5":"># **Data Cleaning**","06a5749a":">## **Does price depend on the size of the app?**","015dc3de":"* **Family**, **Game**  and **Tools** have the highest presence on Playstore","69a8dc7c":">## **How are apps distributed rating-wise?**","b0444abc":"## Best Performing Apps (Paid)","bd2db427":"## Distribution of Apps Category-Wise","11c69243":"># **Free and Paid Apps**","8c840146":"># **Best Performing Apps**\n\n Let's select some of the best performing apps. For the selection, we need to set some criteria. \n \n* Number of Installs should be equal to or greater than 1,000,000\n* Average Rating of an app should be equal to or greater than 3.5\n* Minimum number of Reviews should be 10,000","d5d6a512":">## How are free and paid apps distributed category-wise?","a007ae55":"## Insights\n\n* The answer is  **No**.","375f074c":"## 1. Removing Duplicate Values","c00d4807":"## Best Performing Apps (Free)","9973d4bd":" The dataset contains 10841 rows and 13 columns","31eaca85":"## Insights\n* As the number of reviews increases, the average ratings of the apps get affected. \n* Higher the number of reviews, more likely the apps will have an average rating above 4.0. \n* There are exceptions too. The graph shows that some apps, which have recieved low number of reviews, have an average rating 5.0. ","f1d4317e":"> # **Top 6 Categories in Playstore**","c4cb2060":"## Top 10 Games ","2c995308":"## 2. Handling Missing Values","a171cfe2":"## Insights\n\n* The graphs clearly show that most of the apps have an average rating between 4.0 and 4.5.\n* Very few apps have an averating rating below 2.5","7a2a14ee":">## **Relationship bewteen the number of reviews and ratings of the apps**","0256d7ec":">## **Categories**","7c4af0b4":"## Insights\n* Most of the categories have performed moderately well.\n* **Health and Fitness**,having average rating 4.5, has the best quality apps. Next best performing categories are **Books and References** and **Personalization**.","f5800170":" >## **Which are the best performing categories?**"}}