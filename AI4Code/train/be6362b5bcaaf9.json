{"cell_type":{"fe4666b7":"code","b3434b01":"code","a3f224dd":"code","086b9350":"code","8f7aef20":"code","a98ab333":"code","5166ba86":"code","82d15b2c":"code","3b5504fe":"code","0e0b6808":"code","edb31eb2":"code","b6dc0710":"code","237a9f39":"markdown","fa123d76":"markdown","696d9be5":"markdown","83589e66":"markdown","bc989edd":"markdown","aa236491":"markdown","83b300d2":"markdown","c48fd49b":"markdown","10c70c09":"markdown","8319a2e4":"markdown","bf39173b":"markdown"},"source":{"fe4666b7":"import numpy as np\nimport pandas as pd\nimport re\nimport os\nimport numpy as np\nfrom datetime import datetime\nfrom collections  import Counter\nfrom nltk import word_tokenize\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport calendar\nfrom wordcloud import WordCloud ,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom gensim.models import word2vec\nimport gensim\nimport matplotlib.colors as mcolors\nplt.style.use('ggplot')","b3434b01":"csvfiles=[]\nadditional=os.listdir(\"..\/input\/cityofla\/CityofLA\/Additional data\/\")\nfor file in additional:\n    if file.endswith('.csv'):\n        print(file)\n        csvfiles.append(\"..\/input\/cityofla\/CityofLA\/Additional data\/\"+file)\n\nsample_job=pd.read_csv(csvfiles[0])\nkaggle_data=pd.read_csv(csvfiles[1])\njob_title=pd.read_csv(csvfiles[2])","a3f224dd":"def to_dataframe(num,df):\n\n    opendate=re.compile(r'(Open [D,d]ate:)(\\s+)(\\d\\d-\\d\\d-\\d\\d)')\n    salary=re.compile(r'\\$(\\d+,\\d+)((\\s(to|and)\\s)(\\$\\d+,\\d+))?')\n    requirements=re.compile(r'(REQUIREMENTS?\/\\s?MINIMUM QUALIFICATIONS?)(.*)(PROCESS NOTE)')\n    \n    for no in range(0,num):\n        with open(\"..\/input\/cityofla\/CityofLA\/Job Bulletins\/\"+bulletins[no],encoding=\"ISO-8859-1\") as f:\n                try:\n                    file=f.read().replace('\\t','')\n                    data=file.replace('\\n','')\n                    headings=[heading for heading in file.split('\\n') if heading.isupper()]     \n                    sal=re.search(salary,data)\n                    try:\n                        req=re.search(requirements,data).group(2)\n                    except Exception as e:\n                        req=re.search('(.*)NOTES?',re.findall(r'(REQUIREMENTS?)(.*)(NOTES?)',\n                                                              data)[0][1][:1200]).group(1)\n                    \n                    \n                    df=df.append({'File Name':bulletins[no],'Position':headings[0].lower(),'salary_start':sal.group(1),\"requirements\":req},ignore_index=True)\n                    \n                except Exception as e:\n                    print('umatched')  \n    return df\nbulletins=os.listdir(\"..\/input\/cityofla\/CityofLA\/Job Bulletins\/\")\ndf=pd.DataFrame(columns=['File Name','Position','salary_start'])\ndf=to_dataframe(len(bulletins),df)","086b9350":"df.head()","8f7aef20":"plt.figure(figsize=(10,5))\ntext=' '.join(job for job in df['Position'])\ntext=word_tokenize(text)\njobs=Counter(text)\njobs_class=[job for job in jobs.most_common(20) if len(job[0])>3]\na,b=map(list, zip(*jobs_class))\nsns.barplot(b,a,palette='deep')                                           \nplt.title('Words that frequently appear in job offers')\nplt.xlabel(\"number of occurrences\")\nplt.ylabel('job offers')","a98ab333":"df['salary_start']=[int(sal.split(',')[0]+sal.split(',')[1] ) for sal in df['salary_start']]   ","5166ba86":"worst = df[['Position','salary_start']].sort_values(by='salary_start',ascending=True)[:5]\nbest = df[['Position','salary_start']].sort_values(by='salary_start',ascending=False)[:5]\nworst_best = pd.concat([best,worst]).sort_values(by='salary_start',ascending=False)\nplt.figure(figsize=(8,5))\nsns.barplot(y=worst_best['Position'], x=worst_best['salary_start'], palette='deep')\nplt.title('Top 5 and Bottom 5 job Types of Annual Salary')\nplt.xlabel('Annual Salary')\nplt.ylabel('job offers')","82d15b2c":"average_salary = df[(df['salary_start'] >79900) & (df['salary_start'] < 81100)].sort_values(by='salary_start',ascending=False)\nsns.barplot(x=average_salary['salary_start'],y=average_salary['Position'],palette='deep')\nplt.title(\"tAverage annual salary jobs (80,000$) in the city of Los Angeles?\",loc='right')\nplt.xlabel('Annual salary')\nplt.ylabel('job offers')","3b5504fe":"a = pd.cut(df['salary_start'],bins=[-1,49999,99999,149999,300000],labels=['<50,000$','>=50,000$, \\\n<100,000$','>=100,000$, <150,000$','>150,000$']).value_counts()\nplt.figure(figsize=(5,5))\nplt.rcParams['font.size'] = 14.0\nplt.pie(a,counterclock=False, startangle=90,\\\n        wedgeprops={'linewidth': 2, 'edgecolor':\"white\"},autopct=\"%1.1f%%\",pctdistance=0.7)\nplt.legend(a.index,fancybox=True,loc='upper left',bbox_to_anchor=(0.5,0.35))\nplt.title(\"Classification of Annual Salary in job bulletins\")","0e0b6808":"def build_corpus(df):\n\n    lem=WordNetLemmatizer()\n    corpus= []\n    for x in df:\n\n        words=word_tokenize(x)\n        corpus.append([lem.lemmatize(w.lower()) for w in words if len(w)>3])\n    return corpus\n\na = df['Position'] + \" \" + df['requirements']\ncorpus=build_corpus(a)\nmodel = word2vec.Word2Vec(corpus)","edb31eb2":"from sklearn import preprocessing\n\nvector = model.wv[\"experience\"]\nword = model.most_similar( [ vector ], [], 20)\nrank = [data[1] for data in word]\nname = [data[0] for data in word]\ncomp = name + rank","b6dc0710":"def show_wordcloud(data, title = None):\n    \n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=set(STOPWORDS),\n        max_words=250,\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(12, 12))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\nshow_wordcloud(comp,'REQUIREMENTS')","237a9f39":"# Top 5 and Bottom 5 job Types of Annual Salary in Job Bulletins in the City of Los Angeles","fa123d76":"Confirming new dataframe.","696d9be5":"# Objective\nI will try to visualize the data of job bulletins in Los Angeles.\n\nThanks to the Shahules786's [Kernel](https:\/\/www.kaggle.com\/shahules\/discovering-opportunities-at-la) and I refer to the preprocessing in this kernel.","83589e66":"# Convert all the files in Job Bulletins directory to DataFrame","bc989edd":"# Classification of Annual Salary in job bulletins","aa236491":"More to come. Stay tuned!","83b300d2":"# Getting all the csv files","c48fd49b":"# What are the words that have relation to \"Experience\"?","10c70c09":"# What are the words that frequently appear in job offers?","8319a2e4":"# Importing Libraries","bf39173b":"# What are the average annual salary jobs in the city of Los Angeles?"}}