{"cell_type":{"c9f970da":"code","ac70cbad":"code","58efc711":"code","2c281d05":"code","0f290948":"code","eefcbc33":"code","6c4c4854":"code","ab524dea":"code","189aa34d":"code","51c69e58":"code","7b6c8278":"code","6a621150":"code","f4de314d":"code","08741b35":"code","ca1bc860":"code","11835cf4":"code","62e1dbfa":"code","3b7f093c":"code","f7d37184":"code","c74f9654":"code","6c318bd6":"code","c86fae59":"code","ff3d6dfb":"code","b8448b5c":"code","731b1081":"code","ddde68aa":"code","81a0f801":"code","dfa44c90":"code","d866ee77":"code","bf6f2448":"code","72c1541b":"code","1229117e":"code","af40a6f0":"code","0fe60784":"code","249e4313":"code","60c2326a":"code","d7bdd299":"code","957a0efd":"code","b0115900":"code","82d1df0d":"code","6158ba37":"code","4d640ac6":"code","132df785":"code","d1abdc59":"code","cd9d042a":"code","40c3587f":"code","d5c2f09f":"code","435a2e21":"code","489d9843":"code","b1e9b60c":"code","ff852692":"code","df0469f9":"code","7ac9b412":"code","592a214a":"code","e647a4a5":"code","dfcf693c":"code","8a768185":"code","ae04a7c9":"code","2fb307a0":"code","8b3b1b16":"code","187cf1f2":"code","7fc113e9":"code","c25ff74d":"code","cd7b9451":"code","124170b8":"code","ce288dd8":"code","f2655261":"code","95806e77":"code","66da2123":"code","6cfa7a09":"code","4d502623":"code","443e7afa":"code","f62c0e89":"code","ea700549":"code","7ca71a26":"code","3f565bdc":"code","6f0ad8bd":"code","cc7571a9":"markdown","07558da3":"markdown","c41eb3bc":"markdown","305ddf0f":"markdown","06cb37c9":"markdown","acdfa0b3":"markdown","b84f827d":"markdown","64065187":"markdown","07500ae6":"markdown","1761b6b6":"markdown","d0127e26":"markdown","e5fde8c0":"markdown","13ce85fa":"markdown","64293022":"markdown","96a52b43":"markdown","a80ebfd5":"markdown","89bdc61e":"markdown","30448185":"markdown","fdc78472":"markdown"},"source":{"c9f970da":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ac70cbad":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set();","58efc711":"df= pd.read_csv('..\/input\/bank-marketing-dataset\/bank.csv')","2c281d05":"df.head(10)","0f290948":"df.info()","eefcbc33":"df.describe().T","6c4c4854":"def outliers_indices(feature):\n    mid = df[feature].mean()\n    sigma = df[feature].std()\n    return df[(df[feature] < mid - 3*sigma) | (df[feature] > mid + 3*sigma)].index","ab524dea":"wrong_dur=outliers_indices('duration')\nwrong_bal=outliers_indices('balance')\nout=set(wrong_bal|wrong_dur)\nlen(out)","189aa34d":"df.info()","51c69e58":"df.drop(out, inplace=True)","7b6c8278":"df.head()","6a621150":"# ddf= df.copy()","f4de314d":"df['deposit']=df['deposit'].map({'no': 0,'yes': 1})","08741b35":"#\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0432 \u043c\u0438\u043d\u0443\u0442\u044b\ndf['duration']=df['duration']\/60","ca1bc860":"df['default']=df['default'].map({'no':0,'yes':1})\ndf['housing']=df['housing'].map({'no':0,'yes':1})\ndf['loan']=df['loan'].map({'no':0,'yes':1})\ndf.info()","11835cf4":"# dummy df\nddf = pd.get_dummies(df, columns=['job', 'education', 'marital', 'contact', 'poutcome', 'month'])\n\nddf.info()","62e1dbfa":"ddf.head().T","3b7f093c":"from sklearn.model_selection import train_test_split\nX=ddf.drop('deposit',axis=1)\ny=ddf['deposit']\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)","f7d37184":"from sklearn.tree import DecisionTreeClassifier\n\ntree = DecisionTreeClassifier(random_state=2019)\ntree.fit(X_train, y_train)","c74f9654":"tree.score(X_valid, y_valid)","6c318bd6":"from sklearn.metrics import accuracy_score\n\ny_pred = tree.predict(X_valid)\naccuracy_score(y_valid, y_pred)","c86fae59":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\ntree = DecisionTreeClassifier()\ntree_params_max_depth = {'max_depth': np.arange(2, 15)}\ntree_grid = GridSearchCV(tree, tree_params_max_depth, cv=kf, scoring='accuracy')\ntree_grid.fit(X_train, y_train)","ff3d6dfb":"tree_grid_cv_results_max_depth=tree_grid.cv_results_\ntree_grid.best_estimator_","b8448b5c":"tree_grid.best_score_","731b1081":"best_tree = DecisionTreeClassifier(max_depth=9)\ny_pred =best_tree.fit(X_train, y_train).predict(X_valid)\naccuracy_score(y_valid, y_pred)\n# best_tree.score(X_valid, y_valid)","ddde68aa":"tree = DecisionTreeClassifier(max_depth=9)\ntree_params_min_samples_split = {'min_samples_split': np.arange(2, 150)}\ntree_grid = GridSearchCV(tree, tree_params_min_samples_split, cv=kf, scoring='accuracy')\ntree_grid.fit(X_train, y_train)","81a0f801":"tree_grid_cv_results_min_samples_split=tree_grid.cv_results_\ntree_grid.best_estimator_","dfa44c90":"tree_grid.best_score_","d866ee77":"best_tree = DecisionTreeClassifier(max_depth=9,min_samples_split=96)\ny_pred =best_tree.fit(X_train, y_train).predict(X_valid)\naccuracy_score(y_valid, y_pred)","bf6f2448":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\ntree = DecisionTreeClassifier(min_samples_split=96,max_depth=9)\ntree_params_min_samples_leaf = {'min_samples_leaf': np.arange(1, 50)}\ntree_grid = GridSearchCV(tree, tree_params_min_samples_leaf, cv=kf, scoring='accuracy')\ntree_grid.fit(X_train, y_train)","72c1541b":"tree_grid_cv_results_min_samples_leaf=tree_grid.cv_results_\ntree_grid.best_estimator_","1229117e":"tree_grid.best_score_","af40a6f0":"best_tree = DecisionTreeClassifier(max_depth=9, min_samples_split=96, min_samples_leaf=5)\ny_pred =best_tree.fit(X_train, y_train).predict(X_valid)\naccuracy_score(y_valid, y_pred)","0fe60784":"kf = KFold(n_splits=5, shuffle=True, random_state=42)\ntree = DecisionTreeClassifier(min_samples_split=96,max_depth=9, min_samples_leaf=5)\ntree_params_max_features = {'max_features': np.arange(1, X.shape[1])}\ntree_grid = GridSearchCV(tree, tree_params_max_features, cv=kf, scoring='accuracy') \ntree_grid.fit(X_train, y_train)","249e4313":"tree_grid_cv_results_max_features=tree_grid.cv_results_\ntree_grid.best_estimator_","60c2326a":"tree_grid.best_score_","d7bdd299":"best_tree = DecisionTreeClassifier(min_samples_split=96,max_depth=9, min_samples_leaf=5, max_features=43)\ny_pred =best_tree.fit(X_train, y_train).predict(X_valid)\naccuracy_score(y_valid, y_pred)","957a0efd":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(nrows=1, ncols=4, sharey=True,figsize=(20, 5))\n\nax[0].plot(tree_params_max_depth['max_depth'], tree_grid_cv_results_max_depth['mean_test_score'])\nax[0].set_xlabel('max_depth')\nax[0].set_ylabel('Mean accuracy on test set')\n\nax[1].plot(tree_params_min_samples_split['min_samples_split'], tree_grid_cv_results_min_samples_split['mean_test_score'])\nax[1].set_xlabel('min_samples_split')\nax[1].set_ylabel('Mean accuracy on test set')\n\nax[2].plot(tree_params_min_samples_leaf['min_samples_leaf'], tree_grid_cv_results_min_samples_leaf['mean_test_score'])\nax[2].set_xlabel('min_samples_leaf')\nax[2].set_ylabel('Mean accuracy on test set')\n\nax[3].plot(tree_params_max_features['max_features'], tree_grid_cv_results_max_features['mean_test_score'])\nax[3].set_xlabel('max_features')\nax[3].set_ylabel('Mean accuracy on test set')\n","b0115900":"kf = KFold(n_splits=5, shuffle=True, random_state=42)\ntree = DecisionTreeClassifier(min_samples_split=96,max_depth=9, min_samples_leaf=5, max_features=43)\ntree_params_max_depth = {'max_depth': np.arange(2, 15)}\ntree_grid = GridSearchCV(tree, tree_params_max_depth, cv=kf, scoring='accuracy')\ntree_grid.fit(X_train, y_train)","82d1df0d":"tree_grid.best_estimator_","6158ba37":"tree_grid.best_score_","4d640ac6":"pd.DataFrame(tree_grid.cv_results_).T","132df785":"best_tree = DecisionTreeClassifier(min_samples_split=96,max_depth=10, min_samples_leaf=5, max_features=43)\ny_pred =best_tree.fit(X_train, y_train).predict(X_valid)\naccuracy_score(y_valid, y_pred)","d1abdc59":"from sklearn.tree import export_graphviz\n\nexport_graphviz(best_tree, out_file='best_tree.dot', feature_names=X.columns)\nprint(open('best_tree.dot').read())","cd9d042a":"import matplotlib.pyplot as plt\n\nfeatures = {'f'+str(i+1):name for (i, name) in zip(range(len(ddf.columns)), ddf.columns)}\n\n# \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\nimportances = best_tree.feature_importances_\n\nindices = np.argsort(importances)[::-1]\n# Plot the feature importancies of the tree\nnum_to_plot = 10\nfeature_indices = [ind+1 for ind in indices[:num_to_plot]]\n\n# Print the feature ranking\nprint(\"Feature ranking:\")\n\nfor f in range(num_to_plot):\n    print(f+1, features[\"f\"+str(feature_indices[f])], importances[indices[f]])\n\nplt.figure(figsize=(15,5))\nplt.title(\"Feature importances\")\nbars = plt.bar(range(num_to_plot), \n               importances[indices[:num_to_plot]],\n               color=([str(i\/float(num_to_plot+1)) for i in range(num_to_plot)]),\n               align=\"center\")\nticks = plt.xticks(range(num_to_plot), \n                   feature_indices)\nplt.xlim([-1, num_to_plot])\nplt.legend(bars, [u''.join(features[\"f\"+str(i)]) for i in feature_indices]);","40c3587f":"from sklearn. preprocessing import LabelEncoder\n\nddf=df.copy()\nle = LabelEncoder()\nle.fit(df.job)\nddf['job']=le.transform(df.job)\n\nle = LabelEncoder()\nle.fit(df.education)\nddf['education']=le.transform(df.education)\n\nle = LabelEncoder()\nle.fit(df.marital)\nddf['marital']=le.transform(df.marital)\n\nle = LabelEncoder()\nle.fit(df.contact)\nddf['contact']=le.transform(df.contact)\n\nle = LabelEncoder()\nle.fit(df.poutcome)\nddf['poutcome']=le.transform(df.poutcome)\n\nle = LabelEncoder()\nle.fit(df.month)\nddf['month']=le.transform(df.month)\n\nddf.info()","d5c2f09f":"ddf.head()","435a2e21":"from sklearn.model_selection import train_test_split\nX=ddf.drop('deposit',axis=1)\ny=ddf['deposit']\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)","489d9843":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_valid)\n\naccuracy_score(y_valid, y_pred)","b1e9b60c":"# GridSearchCV\nkf = KFold(n_splits=5, shuffle=True, random_state=42)","ff852692":"rf = RandomForestClassifier()\nrf_params_n_estimators = {'n_estimators': np.arange(25, 450, 50)}\n# rf_params_n_estimators\nrf_grid = GridSearchCV(rf, rf_params_n_estimators, cv=kf, scoring='accuracy')\nrf_grid.fit(X_train, y_train)","df0469f9":"rf_grid_cv_results_n_estimators=rf_grid.cv_results_\nrf_grid.best_estimator_","7ac9b412":"rf_grid.best_score_","592a214a":"pd.DataFrame(rf_grid.cv_results_).T","e647a4a5":"best_rf = RandomForestClassifier(n_estimators=125)\ny_pred =best_rf.fit(X_train, y_train).predict(X_valid)\naccuracy_score(y_valid, y_pred)\n# best_rf.score(X_valid, y_valid)","dfcf693c":"rf = RandomForestClassifier(n_estimators=125)\nrf_params_max_depth = {'max_depth': np.arange(2, 15)}\nrf_grid = GridSearchCV(rf, rf_params_max_depth, cv=kf, scoring='accuracy')\nrf_grid.fit(X_train, y_train)","8a768185":"rf_grid_cv_results_max_depth=rf_grid.cv_results_\nrf_grid.best_estimator_","ae04a7c9":"rf_grid.best_score_","2fb307a0":"pd.DataFrame(rf_grid.cv_results_).T","8b3b1b16":"best_rf = RandomForestClassifier(n_estimators=125, max_depth=14)\ny_pred =best_rf.fit(X_train, y_train).predict(X_valid)\naccuracy_score(y_valid, y_pred)\n# best_rf.score(X_valid, y_valid)","187cf1f2":"rf = RandomForestClassifier(n_estimators=125,max_depth=14)\nrf_params_min_samples_split = {'min_samples_split': np.arange(2, 20)}\nrf_grid = GridSearchCV(rf, rf_params_min_samples_split, cv=kf, scoring='accuracy')\nrf_grid.fit(X_train, y_train)","7fc113e9":"rf_grid_cv_results_min_samples_split=rf_grid.cv_results_\nrf_grid.best_estimator_","c25ff74d":"rf_grid.best_score_","cd7b9451":"pd.DataFrame(rf_grid.cv_results_).T","124170b8":"best_rf = RandomForestClassifier(n_estimators=125, max_depth=14,min_samples_split=12)\ny_pred =best_rf.fit(X_train, y_train).predict(X_valid)\naccuracy_score(y_valid, y_pred)\n# best_rf.score(X_valid, y_valid)","ce288dd8":"rf = RandomForestClassifier(n_estimators=125,max_depth=14,min_samples_split=12)\nrf_params_min_samples_leaf = {'min_samples_leaf': np.arange(1, 50)}\nrf_grid = GridSearchCV(rf, rf_params_min_samples_leaf, cv=kf, scoring='accuracy')\nrf_grid.fit(X_train, y_train)","f2655261":"rf_grid_cv_results_min_samples_leaf=rf_grid.cv_results_\nrf_grid.best_estimator_","95806e77":"rf_grid.best_score_","66da2123":"pd.DataFrame(rf_grid.cv_results_).T","6cfa7a09":"best_rf = RandomForestClassifier(n_estimators=125, max_depth=14,min_samples_split=12,min_samples_leaf=4)\ny_pred =best_rf.fit(X_train, y_train).predict(X_valid)\naccuracy_score(y_valid, y_pred)\n# best_rf.score(X_valid, y_valid)","4d502623":"rf = RandomForestClassifier(n_estimators=125, max_depth=14,min_samples_split=12,min_samples_leaf=4)\nrf_params_max_features = {'max_features': np.arange(2, X.shape[1])}\nrf_grid = GridSearchCV(rf, rf_params_max_features, cv=kf, scoring='accuracy')\nrf_grid.fit(X_train, y_train)","443e7afa":"rf_grid_cv_results_max_features=rf_grid.cv_results_\nrf_grid.best_estimator_","f62c0e89":"rf_grid.best_score_","ea700549":"pd.DataFrame(rf_grid.cv_results_).T","7ca71a26":"best_rf = RandomForestClassifier(n_estimators=125, max_depth=14,min_samples_split=5,min_samples_leaf=4,max_features=14)\ny_pred =best_rf.fit(X_train, y_train).predict(X_valid)\naccuracy_score(y_valid, y_pred)\n# best_rf.score(X_valid, y_valid)","3f565bdc":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(nrows=1, ncols=5, sharey=True,figsize=(25, 5))\n\nax[0].plot(rf_params_max_depth['max_depth'], rf_grid_cv_results_max_depth['mean_test_score'])\nax[0].set_xlabel('max_depth')\nax[0].set_ylabel('Mean accuracy on test set')\n\nax[1].plot(rf_params_min_samples_split['min_samples_split'], rf_grid_cv_results_min_samples_split['mean_test_score'])\nax[1].set_xlabel('min_samples_split')\nax[1].set_ylabel('Mean accuracy on test set')\n\nax[2].plot(rf_params_min_samples_leaf['min_samples_leaf'], rf_grid_cv_results_min_samples_leaf['mean_test_score'])\nax[2].set_xlabel('min_samples_leaf')\nax[2].set_ylabel('Mean accuracy on test set')\n\nax[3].plot(rf_params_max_features['max_features'], rf_grid_cv_results_max_features['mean_test_score'])\nax[3].set_xlabel('max_features')\nax[3].set_ylabel('Mean accuracy on test set')\n\nax[4].plot(rf_params_n_estimators['n_estimators'], rf_grid_cv_results_n_estimators['mean_test_score'])\nax[4].set_xlabel('n_estimators')\nax[4].set_ylabel('Mean accuracy on test set')","6f0ad8bd":"import matplotlib.pyplot as plt\n\nfeatures = {'f'+str(i+1):name for (i, name) in zip(range(len(ddf.columns)), ddf.columns)}\n\n# \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\nimportances = best_rf.feature_importances_\n\nindices = np.argsort(importances)[::-1]\n# Plot the feature importancies of the forest\nnum_to_plot = 10\nfeature_indices = [ind+1 for ind in indices[:num_to_plot]]\n\n# Print the feature ranking\nprint(\"Feature ranking:\")\n\nfor f in range(num_to_plot):\n    print(f+1, features[\"f\"+str(feature_indices[f])], importances[indices[f]])\n\nplt.figure(figsize=(15,5))\nplt.title(\"Feature importances\")\nbars = plt.bar(range(num_to_plot), \n               importances[indices[:num_to_plot]],\n               color=([str(i\/float(num_to_plot+1)) for i in range(num_to_plot)]),\n               align=\"center\")\nticks = plt.xticks(range(num_to_plot), \n                   feature_indices)\nplt.xlim([-1, num_to_plot])\nplt.legend(bars, [u''.join(features[\"f\"+str(i)]) for i in feature_indices]);","cc7571a9":"\u041a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f","07558da3":"**\u041f\u043e\u043b\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435**: \nhttps:\/\/www.researchgate.net\/figure\/Bank-marketing-data-set-descriptions_tbl1_283761844\n\u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\npoutcome: \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433\u043e\u0432\u043e\u0439 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u0438 (\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439: \u00ab\u043d\u0435\u0443\u0434\u0430\u0447\u0430\u00bb, \u00ab\u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439\u00bb, \u00ab\u0443\u0441\u043f\u0435\u0445\u00bb)\nprevious: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432, \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0434\u043e \u044d\u0442\u043e\u0439 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u0438 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (\u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435)\ncampaign: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432, \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u044d\u0442\u043e\u0439 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u0438 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (\u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043d\u0442\u0430\u043a\u0442)\n\n\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f: \nduration: \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043b\u0441\u044f \u043d\u0430 \u0441\u0440\u043e\u0447\u043d\u044b\u0439 \u0432\u043a\u043b\u0430\u0434? (\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439: \u00abyes\u00bb, \u00abno\u00bb)\n\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438: \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0432\u0437\u044f\u0442\u044c \u0441\u0440\u043e\u0447\u043d\u044b\u0439 \u0434\u0435\u043f\u043e\u0437\u0438\u0442","c41eb3bc":"**n_estimators**","305ddf0f":"**min_samples_split**","06cb37c9":"**min_samples_leaf**","acdfa0b3":"\u041b\u0443\u0447\u0448\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c:","b84f827d":"**max_features**","64065187":"[\u041c\u0435\u0442\u043e\u0434 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439](https:\/\/www.kaggle.com\/kyrylveremiov\/knn-bank-marketing-dataset) \u0432 \u043b\u0443\u0447\u0448\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u0430\u0432\u0430\u043b 70% \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438. \u0414\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0441 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432- \u0443\u0436\u0435 82%. \u0422\u043e \u0435\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u044f\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 (\u0427\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u043a\u0442\u0432\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 data frame). \u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430 \u0434\u0430\u043b\u0430 \u043b\u0443\u0447\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b (\u043d\u0430 2%). \u0418 \u0434\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 \u0432\u044b\u044f\u0432\u0438\u0432\u0438\u043b\u0438, \u0447\u0442\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a duration- \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430.\n\n\u0418\u0442\u043e\u0433: \u0418\u0437 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441\u0430\u043c\u044b\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043b\u0435\u0441 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0441 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438: \nn_estimators=125, max_depth=14,min_samples_split=5,min_samples_leaf=4,max_features=14","07500ae6":"\u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0448\u0430\u044e\u0449\u0438\u0445 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0432 \u043b\u0435\u0441\u0443 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u043a \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u043e\u0434\u043d\u0430\u043a\u043e \u044d\u0442\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0442\u0441\u044f \u0432\u0441\u0451 \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435 (\u0430\u0441\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0430\u0435\u0442\u0441\u044f ~85%), \u0430 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u0435\u0442. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043d\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.","1761b6b6":"**max_depth**","d0127e26":"**min_samples_split**","e5fde8c0":"\u0413\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430","13ce85fa":"\u0412 \u0438\u0442\u043e\u0433\u0435 \u043b\u0443\u0447\u0448\u0435\u0439 \u043e\u043a\u0430\u0437\u0430\u043b\u0430\u0441\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438: min_samples_split=85,max_depth=9, min_samples_leaf=14, max_features=33. \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e 82%. \u0421\u0430\u043c\u044b\u043c \u0432\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0438\u0437 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f max_depth- \u0435\u0433\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0440\u0438\u0432\u0435\u043b\u0430 \u043a \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0441\u0440\u0430\u0437\u0443 \u043d\u0430 5%. \u0421\u0430\u043c\u044b\u0439 \u0432\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: duration, \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430.","64293022":"\u0421\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c n_estimators.","96a52b43":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0432\u043d\u0430\u0447\u0430\u043b\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445","a80ebfd5":"\u0421\u0434\u0435\u043b\u0430\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e https:\/\/dreampuf.github.io\/GraphvizOnline\/ \n\n[\u041a\u0430\u0440\u0442\u0438\u043d\u043a\u0430](https:\/\/drive.google.com\/file\/d\/1GYizXOC9K3MscGKf2PW6EzoqI3kRx1Na\/view?usp=sharing) \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430, Kaggle \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c. ","89bdc61e":"**max_features**","30448185":"**max_depth**","fdc78472":"min_samples_leaf"}}