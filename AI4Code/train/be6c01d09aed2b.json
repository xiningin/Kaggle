{"cell_type":{"7a7679ed":"code","f4cd3535":"code","56fb891e":"code","187dd815":"code","aa799523":"code","0665dff9":"code","ed31ced5":"code","f35b2bf8":"code","f5116fbb":"code","eb77ec3b":"code","76b3d6d1":"code","e2486347":"code","b97ec5fa":"code","2dc64961":"code","bf69897e":"code","abff5a90":"code","338e0c3d":"code","144c9a6e":"code","6fadfa9d":"code","a2ef8fc1":"code","40aa5991":"code","457f6641":"code","89390adf":"code","5fe2d951":"code","5e1fef8e":"code","217f9285":"code","378cf4d9":"code","3e165dde":"code","25ecdf3f":"code","18fb57b4":"code","d920fb60":"code","d896ea47":"code","e709d39e":"code","ddcf86fa":"code","92edef4b":"code","5716d655":"code","de73e671":"markdown","f3dea4ac":"markdown","2f3c78e6":"markdown","1c8d3b54":"markdown","b8d789c3":"markdown","59fa9a03":"markdown","53505de2":"markdown","eade51c6":"markdown","4236921f":"markdown","21cb2a15":"markdown","5a063ba8":"markdown","a9ef31b6":"markdown","919af29f":"markdown","7a2b349e":"markdown","cbfd3f19":"markdown"},"source":{"7a7679ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4cd3535":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport regex as re\n%matplotlib inline\nimport missingno # library used to visualize missing values\nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nfrom wordcloud import WordCloud\n","56fb891e":"df = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndf","187dd815":"df.shape","aa799523":"df.dtypes","0665dff9":"\ndf.isnull().sum()","ed31ced5":"colors = ['Blue','Blue','Blue','Red','Red','Red','yellow','yellow','yellow','yellow','Blue','Blue',]\nmissingno.bar(df, figsize = (10,10), fontsize= 16, color = colors, sort = 'descending')\n#plt.title(\"Missing Values Visualizations\")\nplt.show()","f35b2bf8":"# Clearly most of the missing values arise from the director, cast and country","f5116fbb":"#Filling all missing columns\ndf['director'] = df['director'].fillna('NoAvailableData') # filling the column with No available data\ndf['country'] = df['country'].fillna(df['country'].mode()[0])\ndf['cast'] = df['cast'].fillna('NoAvailableDate')\ndf['date_added'] = df['date_added'].fillna(df['date_added'].mode()[0])\ndf['rating'] = df['rating'].fillna(df['rating'].mode()[0])\ndf.isna().sum()","eb77ec3b":"df","76b3d6d1":"#Checking for duplicate Values\ndf.duplicated().sum()\n","e2486347":"## No Duplicated Columns","b97ec5fa":"# creating a new column for year and month\ndf[\"year\"]=pd.DatetimeIndex(df[\"date_added\"]).year\ndf[\"month\"]=pd.DatetimeIndex(df[\"date_added\"]).month\ndf['year'].dtype\n","2dc64961":"#Replacing the ratings with categorical values\n# first create a dictionary for these categories\nratings_ages= {\n    'TV-PG': 'Child',\n    'TV-MA': 'Adult',\n    'TV-Y7-FV': 'Child',\n    'TV-Y7': 'Child',\n    'TV-14': 'Adolesent',\n    'R': 'Adolecent',\n    'TV-Y': 'Infant',\n    'NR': 'Adult',\n    'PG-13': 'Teen',\n    'TV-G': 'Infant',\n    'PG': 'Child',\n    'G': 'Infant',\n    'UR': 'Adult',\n    'NC-17': 'Adult'}\ndf[\"rating_ages\"] = df['rating'].replace(ratings_ages)\ndf['rating_ages']","bf69897e":"#Another way to do this but here you need to convert the column to numeric\n#df['year'] = df['date_added'].apply(lambda x : x[-4:])\n#df['year'].dtype\n#df['year'] = pd.to_numeric(df['year'])","abff5a90":"## How is the content distributed\n\nx = df['type'].value_counts().reset_index()\npx.pie(x, values='type', names='index')","338e0c3d":"df","144c9a6e":"countryContent = df.groupby(['type'])['country'].value_counts().head(10)\ncountryContent = countryContent.to_frame(name = 'Country Content')\ncountryContent","6fadfa9d":"# Country Content popularities\n# A map showing content density\ncountryfig = df.country.value_counts().reset_index()\ncountryfig\ncountryDiagram = px.choropleth( countryContent, locationmode = 'country names', locations = countryContent['index'], labels = ['country'])\ncountryDiagram.show()","a2ef8fc1":"countryContent.plot(figsize = (10,10),kind = 'bar', xlabel = 'country', ylabel = 'type', title = 'Countries with the highest number of movies and shows' )","40aa5991":"countryTab = pd.crosstab(df['country'],['type']).sort_values(by = 'type', ascending = True)[-10:].reset_index()\ncountryTab\n","457f6641":"countries=pd.crosstab(df[\"country\"],[\"type\"]).sort_values(by=\"type\",ascending=True)[-10:].reset_index()\nplt.figure(figsize=(12,6))\nax=sns.barplot(x=countries[\"country\"],y=countries[\"type\"] )\nplt.title(\"COUNTRIES WITH HIGHEST NUMBER OF MOVIES AND SHOWS\",fontsize=20)\n\n#i = 0\n#for patch in ax.patches:\n#    ax.text(patch.get_width(), i+patch.get_height()\/8, '{:1.0f}'.format(patch.get_width()))\n#    i+=1\nfor i in ax.patches:\n    ax.text(i.get_x(), i.get_height(),str(int((i.get_height()))),rotation=45, fontsize=15, color='black')\n","89390adf":"movie=df[df[\"type\"]==\"Movie\"]\nmovies=movie[\"country\"].value_counts().reset_index()[0:10]\nmovies = movies.sort_values(by= 'country', ascending = False)\nplt.figure(figsize=(12,6))\nplt.title(\"TOP TEN COUNTRIES WITH HIGHEST NUMBER OF MOVIES\",fontsize=25)\nax=sns.barplot(x=\"index\",y=\"country\", data = movies)\nfor i in ax.patches:\n    ax.text(i.get_x(), i.get_height(), str(int(i.get_height())), rotation= 0, fontsize=15 , color = 'brown')","5fe2d951":"#just looking at the movies dataframe here\nmovies","5e1fef8e":"tv = df[df['type']=='TV Show']\ntelevision = tv['country'].value_counts().head(10).reset_index()\ntelevision\nplt.figure(figsize=(15,10))\nav = sns.barplot(x=television['index'], y=television['country'])\n\nfor i in av.patches:\n    av.text(i.get_x(),i.get_height(),str(int(i.get_height())), rotation=0, color = 'Blue', fontsize = 20)\n","217f9285":"contentYear = df['year'].count()\nplt.figure(figsize=(12,12))\nsns.countplot(df['year'])\nplt.title('Content Added over Time')\nplt.show()","378cf4d9":"## netflix has steadily been adding content over the last 10 year\nnineteen = df['year'][df['year']== 2019].count().sum()\ntwenty = df['year'][df['year']== 2020].count().sum()\ncontent_percent = (((twenty\/nineteen)*100) -100)\nround(content_percent)","3e165dde":"# movies added over the years\nmovieContent = df[df['type'] == 'Movie']\nplt.figure(figsize = (12,12))\na = sns.countplot(movieContent['year'])\nplt.title('Movies added over the years')\nplt.show()","25ecdf3f":"# Tv Shows added over the years\ntvContent = df[df['type'] == 'TV Show']\nplt.figure(figsize = (12,12))\na = sns.countplot(tvContent['year'])\nplt.title('TV Shows added over the years')\nplt.show()","18fb57b4":"col1 = df[df['rating_ages']=='74 min' ]\ncol2 = df[df['rating_ages']=='84 min' ]\ncol3 = df[df['rating_ages']=='66 min' ]\ndf.drop([5541,5794,5813], inplace=True)\ndf.shape\n\n","d920fb60":"px.pie(df, names = 'rating_ages', values = df.index)","d896ea47":"#movie.drop([5541,5794,5813], inplace=True)\npx.pie(movie,names=\"rating_ages\", values=movie.index, title=\"Type of content present in movies\")\n\n","e709d39e":"px.pie(tv,names=\"rating_ages\", values=tv.index, title=\"Type of content present in movies\")","ddcf86fa":"# Content Added Over the Years\nnew = df[['type', 'year']].value_counts().reset_index()\nnew.columns = ['type', 'year', 'number']\n#plt.figure()\npx.line(data_frame = new, x = 'year', y ='number', color = 'type', line_group = 'type', range_x = [2005, 2025])\n#plt.title('Type of Content Added', fontsize = 20)\n#plt.show()\n","92edef4b":"oldContent = df.sort_values(by = 'release_year' ,ascending = False)\noldContent = df[['title', 'release_year']].sort_values(by = 'release_year' ,ascending = True)\noldContent = oldContent[:10]","5716d655":"#px.bar(data_frame = oldContent, x = 'title', y = 'release_year', range_y = [1930, 1950])","de73e671":"## Solve for countries with the highest numbers of movies alone","f3dea4ac":"### Top ten Countries with the highest number of TV shows","2f3c78e6":"## Which countries have the highest number of movies and tv shows","1c8d3b54":"#### From this we can see that content addition fell by roughly six percent","b8d789c3":"## Missing Values","59fa9a03":"## Content added over the years","53505de2":"## Movie Content?","eade51c6":"## Analysis","4236921f":"## Calulating the change in content addition during Covid-19 pandemic","21cb2a15":"## Oldest to Newest Content","5a063ba8":"## TV Content","a9ef31b6":"#### Clearly there are more movies that films distributed on these platforms","919af29f":"#### During the covid pandemic, more TV shows than movies were added. This could possibly be attributed to the need for longer content to binge during the pandemic","7a2b349e":"* ### Genre","cbfd3f19":"## Handling missing data"}}