{"cell_type":{"870f8f57":"code","314111ec":"code","fc3d767e":"code","3a36e0ca":"code","c090b96e":"code","98d0830b":"code","4fe49107":"code","796def31":"code","c1e8cf4c":"code","b018ddc9":"code","6434889e":"markdown"},"source":{"870f8f57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom sklearn import tree, ensemble, metrics, linear_model, preprocessing, model_selection, feature_selection\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import cluster, preprocessing, linear_model, tree, model_selection, feature_selection\nfrom sklearn import base, ensemble, decomposition, metrics, pipeline, datasets, impute\nfrom skopt import gp_minimize, space, gbrt_minimize, dummy_minimize, forest_minimize\nfrom functools import partial\nimport os\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\nfrom sklearn import ensemble, preprocessing, tree, model_selection, feature_selection, pipeline, metrics, svm\nfrom imblearn import under_sampling, over_sampling, combine\nfrom imblearn import pipeline as imb_pipeline\nfrom imblearn import ensemble as imb_ensemble\nfrom sklearn.model_selection import StratifiedKFold\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","314111ec":"# Create class which performs Label Encoding - if required\nclass categorical_encoder:\n    def __init__(self, columns, kind = 'label', fill = True):\n        self.kind = kind\n        self.columns = columns\n        self.fill = fill\n        \n    def fit(self, X):\n        self.dict = {}\n        self.fill_value = {}\n        \n        for col in self.columns:\n            label = preprocessing.LabelEncoder().fit(X[col])\n            self.dict[col] = label\n            \n            # To fill\n            if self.fill:\n                self.fill_value[col] = X[col].mode()[0]\n                X[col] = X[col].fillna(self.fill_value[col])\n                \n        print('Label Encoding Done for {} columns'.format(len(self.columns)))\n        return self\n    def transform(self, X):\n        for col in self.columns:\n            if self.fill:\n                X[col] = X[col].fillna(self.fill_value[col])\n                \n            X.loc[:, col] = self.dict[col].transform(X[col])\n        print('Transformation Done')\n        return X\n\ndef missing(df):\n    print(df.isna().sum().sort_values(ascending = False)*100\/df.shape[0])","fc3d767e":"train = pd.read_csv(r'\/kaggle\/input\/janatahack-healthcare-analytics-part-2\/train.csv')\ntest = pd.read_csv(r'\/kaggle\/input\/janatahack-healthcare-analytics-part-2\/test.csv')","3a36e0ca":"train.head(2)","c090b96e":"cat_text = ['Hospital_type_code', 'Hospital_region_code', 'Department', 'Ward_Type', 'Ward_Facility_Code',\n           'Type of Admission', 'Severity of Illness', 'Age']\n\n# Ideas - Age is ordinal - encode it as such","98d0830b":"# Indicators\ntrain['which'] = 1\ntest['which'] = 0\n\n# Merge\ndata = pd.concat([train, test], axis = 0, ignore_index = True)\n\n# Operations\ndata = data.fillna(data.median())\nencoder = categorical_encoder(columns = cat_text, fill = False).fit(data)\ndata = encoder.transform(data)\n\n# Split Back\ntrain = data.loc[data['which'] == 1, :].drop('which', axis = 1)\ntest = data.loc[data['which'] == 0, :].drop('which', axis = 1)","4fe49107":"train.columns","796def31":"X_cols = ['case_id', 'Hospital_code', 'Hospital_type_code', 'City_Code_Hospital',\n       'Hospital_region_code', 'Available Extra Rooms in Hospital',\n       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',\n       'patientid', 'City_Code_Patient', 'Type of Admission',\n       'Severity of Illness', 'Visitors with Patient', 'Age',\n       'Admission_Deposit']\nX_cols = ['Hospital_code', 'Hospital_type_code', 'City_Code_Hospital',\n       'Hospital_region_code', 'Available Extra Rooms in Hospital',\n       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',\n       'patientid', 'City_Code_Patient', 'Type of Admission',\n       'Severity of Illness', 'Visitors with Patient', 'Age',\n       'Admission_Deposit']\n\n\n\nX_train = train[X_cols]\ny_train = train['Stay']\n\nX_test = test.drop('Stay', axis = 1)[X_cols]","c1e8cf4c":"#model = ensemble.RandomForestClassifier(n_estimators = 550, max_depth = 15, n_jobs = -1, max_features = .7)\nmodel = lgb.LGBMClassifier(n_estimators = 1000, max_depth = 6, learning_rate = .1)\nmodel.fit(X_train, y_train)","b018ddc9":"sub = pd.DataFrame()\nsub['case_id'] = test['case_id']\nsub['Stay'] = model.predict(X_test)\nsub.to_csv('SSUB.csv', index = None)","6434889e":" ### To Add in future versions: Hyperparameter Tuning, Ensembling, Stacking, Resampling"}}