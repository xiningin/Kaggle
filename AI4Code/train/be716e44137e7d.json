{"cell_type":{"7be4465e":"code","f2b855b5":"code","49f52dba":"code","3fce92fd":"code","c8d23bce":"code","3c877c03":"code","e3c5adeb":"code","7f0b2116":"code","b6d107b2":"code","bbf9e9be":"code","3610017c":"code","76f9c9f8":"code","207e843d":"code","ac607246":"code","406e2c38":"code","ea43dd20":"code","bbbc9ba9":"code","1fbfa582":"code","83c0708d":"code","71aa59c6":"code","1b3b463c":"code","72abb9c2":"code","d1fa4d5f":"code","862d1748":"code","c6c1b3ac":"code","cba2b973":"code","c009f4ca":"markdown","b956af4b":"markdown","cdb85d0b":"markdown","08e9b910":"markdown","5a6ba5e7":"markdown","a802d6e8":"markdown","7a4d1215":"markdown","39f3a799":"markdown","61b533b2":"markdown","9594bc1a":"markdown","eece5294":"markdown","4c2f0f8c":"markdown","bb41de84":"markdown","95d51387":"markdown","8f1d11ed":"markdown","df31a633":"markdown","cd225888":"markdown","228ac570":"markdown","3d5b6e8f":"markdown","e3948a29":"markdown"},"source":{"7be4465e":"## Import all modues\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","f2b855b5":"## load data\norders = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_orders_dataset.csv\")\n\nitems = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv\")\n\ncustomers = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_customers_dataset.csv\")\n\nsellers = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_sellers_dataset.csv\")\n\ngeo = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_geolocation_dataset.csv\")\n\nproducts = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_products_dataset.csv\")\n","49f52dba":"### Get the seller zip code of each order\nmiddle = items[['order_id', 'seller_id']]\nmiddle_2 = middle.merge(sellers[['seller_id', 'seller_zip_code_prefix']], on = \"seller_id\", how = \"outer\")\norders = orders.merge(middle_2, on = \"order_id\", how = \"left\")\n\n### Get customer zip code of each order\norders = orders.merge(customers[['customer_id', 'customer_zip_code_prefix']],\n             on = 'customer_id', how = \"left\")\n\n\n## Clean geo df\ngeo = geo[~geo['geolocation_zip_code_prefix'].duplicated()]\n\n## add seller coordinates to the orders\norders = orders.merge(geo, \n             left_on = \"seller_zip_code_prefix\", \n             right_on = \"geolocation_zip_code_prefix\", \n             how = \"left\")\n\n## add customer coordinates to the orders\norders = orders.merge(geo, \n             left_on = \"customer_zip_code_prefix\", \n             right_on = \"geolocation_zip_code_prefix\", \n             how = \"left\",\n             suffixes = (\"_seller\", \"_customer\"))","3fce92fd":"## Clean orders\n## 1--Filter out orders with multipul sellers\n# Because each order only has one delivery date\n\ndf = orders.groupby(by=\"order_id\").nunique()\n\nmono_orders = pd.Series(df[df['seller_id'] == 1].index)\n\nfiltered_orders = orders.merge(mono_orders, how = 'inner')\n\n\n## 2--drop rows with missing values\n#filtered_orders.isna().sum()\nfiltered_orders = filtered_orders.drop(columns = [\"order_approved_at\"])\n\nfiltered_orders = filtered_orders.dropna()","c8d23bce":"## define a function to get distance from coordinates\nfrom math import radians, sin, cos, asin, sqrt\ndef haversine_distance(lon1, lat1, lon2, lat2):\n    \"\"\"\n    Compute distance between two pairs of (lat, lng)\n    \"\"\"\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat \/ 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon \/ 2) ** 2\n    return 2 * 6371 * asin(sqrt(a))\n\n## add distance column to dateset\nfiltered_orders['distance'] = filtered_orders.apply(\n    lambda row: haversine_distance(\n        row[\"geolocation_lng_seller\"],\n        row[\"geolocation_lat_seller\"],\n        row[\"geolocation_lng_customer\"],\n        row[\"geolocation_lat_customer\"],\n    ),\n    axis=1,\n)","3c877c03":"df_tmp = items[['order_id', 'product_id']].merge(products[['product_id', 'product_length_cm', 'product_height_cm', 'product_width_cm', 'product_weight_g']],\n                                        on = \"product_id\",\n                                        how = \"outer\")\n\ndf_tmp.loc[:, \"product_size_cm3\"] = df_tmp['product_length_cm'] * df_tmp['product_width_cm'] * df_tmp['product_height_cm']\n\norders_size_weight = df_tmp.groupby(\"order_id\", as_index = False).sum()[['order_id','product_size_cm3', 'product_weight_g']]\n\nfiltered_orders = filtered_orders.merge(orders_size_weight,\n                    on = 'order_id',\n                    how = 'left')","e3c5adeb":"## Convert time columns\ntime_columns = ['order_purchase_timestamp',\n                 'order_delivered_customer_date',\n                 'order_estimated_delivery_date']\n\nfor column in time_columns:\n    filtered_orders.loc[:, column] = pd.to_datetime(filtered_orders[column])\n\nfiltered_orders.loc[:,\"wait_time\"] = (filtered_orders['order_delivered_customer_date'] - filtered_orders['order_purchase_timestamp']).dt.days","7f0b2116":"filtered_orders.T","b6d107b2":"data = filtered_orders[['order_id', 'order_purchase_timestamp',\n                'order_delivered_customer_date', \n                 'geolocation_state_customer', 'geolocation_state_seller',\n                 'distance',\n                 'product_size_cm3', 'product_weight_g',\n                 'wait_time',\n                 'order_estimated_delivery_date']]\ndata.loc[:, \"count\"] = 1","bbf9e9be":"data.isnull().sum()","3610017c":"### Distribution of wait-time\n\nplt.figure(figsize = (10, 5))\n\nkwargs = dict(histtype = 'stepfilled', alpha = 0.5, bins = 100)\n\nplt.hist(data['wait_time'], label='wait time', **kwargs)\n\nplt.title(\"Distribution of waiting days\")\nplt.xlabel(\"days\")\nplt.xlim((0, 50))\nplt.legend()\n\nplt.show()","76f9c9f8":"daily_delivery = pd.DataFrame(data.set_index('order_delivered_customer_date').resample('D').sum()['count'])\n\ndaily_purchase = pd.DataFrame(data.set_index('order_purchase_timestamp').resample('D').sum()['count'])\n\ndaily_delivery.loc[:, \"dow\"] = daily_delivery.index.dayofweek\n\ndaily_purchase.loc[:, \"dow\"] = daily_purchase.index.dayofweek","207e843d":"import plotly.express as px\n\nfig = px.scatter(daily_purchase, \n                 x=daily_purchase.index, \n                 y=\"count\",\n                 size = \"count\",\n                 color = \"dow\"\n                )\nfig.show()","ac607246":"# Using plotly.express\nimport plotly.express as px\n\nfig = px.scatter(daily_delivery, \n                 x=daily_delivery.index, \n                 y=\"count\",\n                 size = \"count\",\n                 color = \"dow\"\n                )\nfig.show()","406e2c38":"daily_purchase.loc[:,\"mean_wait_time\"] = data.set_index('order_purchase_timestamp').resample(\"D\").mean()['wait_time']\n\nfig = px.scatter(daily_purchase, \n                 x=daily_purchase.index, \n                 y=\"mean_wait_time\",\n                 size = \"count\",\n                 color = \"dow\"\n                )\nfig.show()","ea43dd20":"data.loc[:,\"purchase_dow\"] = data.order_purchase_timestamp.dt.dayofweek\n\ndata.loc[:, \"year\"] = data.order_purchase_timestamp.dt.year\n\ndata.loc[:, \"purchase_month\"] = data.order_purchase_timestamp.dt.month","bbbc9ba9":"## Save data to pickle\n\ndata.to_pickle(\"delivery_data\")\n\n# pd.read_pickle(\"delivery_data\")","1fbfa582":"# make sur your install folium first\nimport folium\nfrom folium.plugins import HeatMap\nfrom folium.plugins import HeatMapWithTime","83c0708d":"center_location = [-22.9020, -43.1882]\nm = folium.Map(location=center_location, control_scale=True, zoom_start=11)","71aa59c6":"%matplotlib notebook\nfiltered_orders.loc[:, \"count\"] =1\nheatmap_data = filtered_orders.head(10000)[['geolocation_lat_seller', 'geolocation_lng_seller', 'count']].groupby(['geolocation_lat_seller', 'geolocation_lng_seller']).sum().reset_index().values.tolist()\ngradient = {0.1: 'blue', 0.2: 'lime', 0.3: 'orange', 0.4: 'red', 0.5: 'purple', 0.6: 'black'}\nHeatMap(data=heatmap_data, radius=5, gradient=gradient, max_zoom=13).add_to(m)\nm","1b3b463c":"def directed_error(y,y_pred):\n    '''The difference between estimated delivery time\n    and actual delivery time. Positive number (delivered before estimation time) is prefered.'''\n    return np.mean(y_pred - y)\n\ny_base = (data['order_estimated_delivery_date'] - data['order_purchase_timestamp']).dt.days\n\nbasic_score = directed_error(data['wait_time'], y_base)\nbasic_score","72abb9c2":"X = data[['distance', 'geolocation_state_customer', 'geolocation_state_seller',\n         'product_size_cm3', 'product_weight_g', 'purchase_dow',\n         'year', 'purchase_month']]\ny = data['wait_time']\n\nX.head()","d1fa4d5f":"from sklearn.preprocessing import MinMaxScaler\n\n# OneHot encoding\nencode_features = ['geolocation_state_customer',\n                   'geolocation_state_seller',\n                   'year', 'purchase_month',\n                   'purchase_dow']\n\nX = pd.get_dummies(X, columns = encode_features)\n\n# scale numerical features\nnumerical_features = ['distance','product_size_cm3', 'product_weight_g']\nscaler = MinMaxScaler()\nX.loc[:, numerical_features] = scaler.fit_transform(X[numerical_features])","862d1748":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_predict\n\n# Instanciate model\nlin_model = LinearRegression()\n\n# Make cross-validated predictions \ny_pred_lin = cross_val_predict(lin_model, X, y, cv=10)","c6c1b3ac":"print(directed_error(y, y_pred_lin))","cba2b973":"from sklearn.neighbors import KNeighborsRegressor\n\n# Instanciate model\nknn_model = KNeighborsRegressor(n_neighbors=3)\n\n# Make cross-validated predictions \ny_pred_knn = cross_val_predict(knn_model, X, y, cv=10)\n\ndirected_error(y, y_pred_knn)","c009f4ca":"## Baseline Score","b956af4b":"### Preprocessing","cdb85d0b":"### LinearRegression","08e9b910":"* In order to compute distance between the customer and the seller, we need their zip code (associated latitude & longitude)","5a6ba5e7":"### Explore Temporal Factors","a802d6e8":"### Prepare Training data","7a4d1215":"### Geospatial Data","39f3a799":"### Get Delivery Distance\n","61b533b2":"### Distribution of the target\n","9594bc1a":"### Get package size","eece5294":"# Delivery Date Prediction","4c2f0f8c":"### Get wait time ","bb41de84":"## Get Data","95d51387":"### Clean data","8f1d11ed":"## EDA and Feature Engineering","df31a633":"## Model Selection","cd225888":">Engineer a scoring metric that preserves the magnitude of the target and the direction of the errors made.","228ac570":"* Listed Necessary Column\/Features:\n     - Delivery Date (orders)\n     - Estimated delivery date (orders)\n     - Purchase Date (orders)\n     - seller state (sellers)\n     - customer state (customers)\n     - product_size (products)\n     - product_weight (products)\n     - Distance of Delivery (derived)","3d5b6e8f":"### Feature Engineering: Temporal features","e3948a29":"### KNN Rgressor"}}