{"cell_type":{"81fda7f5":"code","31952a08":"code","ea75ec13":"code","725e33a9":"code","aa5802b9":"code","203cd2d2":"code","bfa749e4":"code","0e362b9d":"code","d76388de":"code","e0ceb26d":"code","a2f25bfe":"code","4e544b7a":"code","5431ca93":"code","fcac7362":"markdown","dca6e1f9":"markdown","a8e3bae6":"markdown","d8054772":"markdown","265cf696":"markdown","7db03a89":"markdown","4fb45428":"markdown","c8a71337":"markdown"},"source":{"81fda7f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31952a08":"import matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping","ea75ec13":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","725e33a9":"train.head()","aa5802b9":"X = np.array(train.drop('label', axis=1))\ny = np.array(train['label'])","203cd2d2":"X = X.reshape(len(X), 28, 28, 1)\ntest = np.array(test).reshape(len(test), 28, 28, 1)","bfa749e4":"X,test = X\/255.0,test\/255.0","0e362b9d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\ninput_shape = X_train[0].shape","d76388de":"model = Sequential()\nmodel.add(Conv2D(16, (3, 3), padding='SAME', activation = 'relu', input_shape=input_shape)) \nmodel.add(MaxPooling2D((2,2)))\nmodel.add(Flatten())\n\nmodel.add(Dense(64, activation = 'relu'))\nmodel.add(Dense(32, activation = 'relu'))\nmodel.add(Dense(10, activation = 'softmax'))","e0ceb26d":"def get_early_stopping():\n    early_stopping = EarlyStopping(monitor='loss', patience=4)\n    return early_stopping\n\nearly_stopping = get_early_stopping()","a2f25bfe":"model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","4e544b7a":"history = model.fit(X_train, y_train, epochs=100, batch_size=256, validation_data=(X_test, y_test), callbacks=[early_stopping])","5431ca93":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('accuracy vs. epochs')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Training', 'Validation'], loc='upper right')\nplt.show() ","fcac7362":"\u6b63\u898f\u5316","dca6e1f9":"\u5b66\u7fd2","a8e3bae6":"\u53ce\u675f\u5224\u5b9a\u95a2\u6570\u306e\u5b9f\u88c5","d8054772":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272","265cf696":"\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb","7db03a89":"\u8a55\u4fa1","4fb45428":"\u524d\u51e6\u7406","c8a71337":"\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9"}}