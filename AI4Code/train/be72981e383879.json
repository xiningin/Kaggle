{"cell_type":{"9e40821c":"code","c55e98ba":"code","cfe9f587":"code","6fd94da9":"code","a6a42283":"code","fdf503f5":"code","cd35cd05":"code","7d4b3933":"code","e7395440":"code","d284ee8b":"code","67316387":"code","c106bdbf":"code","ca8ee555":"code","2fbbe035":"code","e9611acb":"code","967b9982":"code","889cbe4a":"code","7d6de276":"code","56076ac6":"code","cd7ff159":"code","f32897c1":"code","7943ed2a":"code","8397c7a1":"code","5d14f3fd":"code","79096fd9":"code","45722024":"code","143c80c3":"code","daac96f7":"code","bf3564f5":"code","a05c5d4a":"code","970fe67c":"code","4895ce45":"code","6cf091a3":"code","6c6aa373":"code","a78335b6":"code","363a3de4":"code","96e75a27":"code","4177e9dc":"code","e5dece9c":"code","48d88cfa":"code","65048695":"code","5865caa3":"code","083fc270":"markdown","070d3973":"markdown","8bc9edfc":"markdown","da09d752":"markdown","2a335d38":"markdown","c555eded":"markdown","f1b5e67d":"markdown","e55501ea":"markdown","d0192b5d":"markdown","5fc2cece":"markdown","9b7e0524":"markdown","26d7187d":"markdown","ef69a834":"markdown","fc1152a0":"markdown","f4c7d469":"markdown","e8b2f2be":"markdown","b10092a0":"markdown","f72fd6be":"markdown","ed6135ed":"markdown","0ba01f19":"markdown","bc964ee5":"markdown","93fd57bd":"markdown","892933e7":"markdown","ffaf92e8":"markdown","94a36b3f":"markdown","a48dcc76":"markdown","2a160301":"markdown","658acfda":"markdown","2a8555de":"markdown","86c93e67":"markdown","0fef1ef2":"markdown","c995d41d":"markdown","fa287874":"markdown","1c883ba9":"markdown","8a3f7b0a":"markdown","14db2143":"markdown","269f5ed0":"markdown","17ce3a74":"markdown","3ed5f6ea":"markdown","6a8a50db":"markdown","4bf77938":"markdown","f15f1079":"markdown","0b4ba1ab":"markdown","21ee51f0":"markdown"},"source":{"9e40821c":"#data analysis libraries \nimport numpy as np\nimport pandas as pd\n\n#visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","c55e98ba":"#import train and test CSV files\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\n#take a look at the training data\ntrain.describe(include=\"all\")","cfe9f587":"#get a list of the features within the dataset\ntrain.columns","6fd94da9":"#see a sample of the dataset to get an idea of the variables\ntrain.sample(5)","a6a42283":"#see a summary of the training dataset\ntrain.describe(include = \"all\")","fdf503f5":"#check for any other unusable values\npd.isnull(train).sum()","cd35cd05":"#check for missing values on %\npd.isnull(train).sum()*100\/train.shape[0]","7d4b3933":"#draw a bar plot of survival by sex\nsns.barplot(x=\"Sex\", y=\"Survived\", data=train)\n\n#print percentages of females vs. males that survive\nprint(\"Percentage of females who survived:\", train.Survived [train.Sex == 'female'].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of males who survived:\", train.Survived [train.Sex == 'male'].value_counts(normalize = True)[1]*100)","e7395440":"#draw a bar plot of survival by Pclass\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=train)\n\n#print percentage of people by Pclass that survived\nprint(\"Percentage of Pclass = 1 who survived:\", train.Survived [train.Pclass == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of Pclass = 2 who survived:\", train.Survived [train.Pclass == 2].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of Pclass = 3 who survived:\", train.Survived [train.Pclass == 3].value_counts(normalize = True)[1]*100)","d284ee8b":"#draw a bar plot for SibSp vs. survival\nsns.barplot(x=\"SibSp\", y=\"Survived\", data=train)\n\n#I won't be printing individual percent values for all of these.\nprint(\"Percentage of SibSp = 0 who survived:\", train.Survived [train.SibSp == 0].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of SibSp = 1 who survived:\", train.Survived [train.SibSp == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of SibSp = 2 who survived:\", train.Survived [train.SibSp == 2].value_counts(normalize = True)[1]*100)","67316387":"#draw a bar plot for Parch vs. survival\nsns.barplot(x=\"Parch\", y=\"Survived\", data=train)\nplt.show()","c106bdbf":"#sort the ages into logical categories\ntrain[\"Age\"] = train[\"Age\"].fillna(-0.5)\ntest[\"Age\"] = test[\"Age\"].fillna(-0.5)\nbins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]\nlabels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)\n\n#draw a bar plot of Age vs. survival\nsns.barplot(x=\"AgeGroup\", y=\"Survived\", data=train)\nplt.show()","ca8ee555":"train[\"CabinBool\"] = (train[\"Cabin\"].notnull().astype('int'))\ntest[\"CabinBool\"] = (test[\"Cabin\"].notnull().astype('int'))\n\n#calculate percentages of CabinBool vs. survived\nprint(\"Percentage of CabinBool = 1 who survived:\", train[\"Survived\"][train[\"CabinBool\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of CabinBool = 0 who survived:\", train[\"Survived\"][train[\"CabinBool\"] == 0].value_counts(normalize = True)[1]*100)\n#draw a bar plot of CabinBool vs. survival\nsns.barplot(x=\"CabinBool\", y=\"Survived\", data=train)\nplt.show()","2fbbe035":"test.describe(include=\"all\")","e9611acb":"#we'll start off by dropping the Cabin feature since not a lot more useful information can be extracted from it.\ntrain = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)","967b9982":"#we can also drop the Ticket feature since it's unlikely to yield any useful information\ntrain = train.drop(['Ticket'], axis = 1)\ntest = test.drop(['Ticket'], axis = 1)","889cbe4a":"#now we need to fill in the missing values in the Embarked feature\nprint(\"Number of people embarking in Southampton (S):\")\nsouthampton = train[train[\"Embarked\"] == \"S\"].shape[0]\nprint(southampton)\n\nprint(\"Number of people embarking in Cherbourg (C):\")\ncherbourg = train[train[\"Embarked\"] == \"C\"].shape[0]\nprint(cherbourg)\n\nprint(\"Number of people embarking in Queenstown (Q):\")\nqueenstown = train[train[\"Embarked\"] == \"Q\"].shape[0]\nprint(queenstown)","7d6de276":"#replacing the missing values in the Embarked feature with S\ntrain = train.fillna({\"Embarked\": \"S\"})","56076ac6":"#create a combined group of both datasets\ncombine = [train, test]\n\n#extract a title for each Name in the train and test datasets\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train['Title'], train['Sex'])","cd7ff159":"#replace various titles with more common names\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Capt', 'Col',\n    'Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\n    \n    dataset['Title'] = dataset['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\ntrain[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","f32897c1":"#map each of the title groups to a numerical value\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Royal\": 5, \"Rare\": 6}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain.head()","7943ed2a":"# fill missing age with mode age group for each title\nmr_age = train[train[\"Title\"] == 1][\"AgeGroup\"].mode() #Young Adult\nmiss_age = train[train[\"Title\"] == 2][\"AgeGroup\"].mode() #Student\nmrs_age = train[train[\"Title\"] == 3][\"AgeGroup\"].mode() #Adult\nmaster_age = train[train[\"Title\"] == 4][\"AgeGroup\"].mode() #Baby\nroyal_age = train[train[\"Title\"] == 5][\"AgeGroup\"].mode() #Adult\nrare_age = train[train[\"Title\"] == 6][\"AgeGroup\"].mode() #Adult\n\nage_title_mapping = {1: \"Young Adult\", 2: \"Student\", 3: \"Adult\", 4: \"Baby\", 5: \"Adult\", 6: \"Adult\"}\n\n#I tried to get this code to work with using .map(), but couldn't.\n#I've put down a less elegant, temporary solution for now.\n#train = train.fillna({\"Age\": train[\"Title\"].map(age_title_mapping)})\n#test = test.fillna({\"Age\": test[\"Title\"].map(age_title_mapping)})\n\nfor x in range(len(train[\"AgeGroup\"])):\n    if train[\"AgeGroup\"][x] == \"Unknown\":\n        train[\"AgeGroup\"][x] = age_title_mapping[train[\"Title\"][x]]\n        \nfor x in range(len(test[\"AgeGroup\"])):\n    if test[\"AgeGroup\"][x] == \"Unknown\":\n        test[\"AgeGroup\"][x] = age_title_mapping[test[\"Title\"][x]]","8397c7a1":"#map each Age value to a numerical value\nage_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Student': 4, 'Young Adult': 5, 'Adult': 6, 'Senior': 7}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)\n\ntrain.head()\n\n#dropping the Age feature for now, might change\ntrain = train.drop(['Age'], axis = 1)\ntest = test.drop(['Age'], axis = 1)","5d14f3fd":"#drop the name feature since it contains no more useful information.\ntrain = train.drop(['Name'], axis = 1)\ntest = test.drop(['Name'], axis = 1)","79096fd9":"#map each Sex value to a numerical value\nsex_mapping = {\"male\": 0, \"female\": 1}\ntrain['Sex'] = train['Sex'].map(sex_mapping)\ntest['Sex'] = test['Sex'].map(sex_mapping)\n\ntrain.head()","45722024":"#map each Embarked value to a numerical value\nembarked_mapping = {\"S\": 1, \"C\": 2, \"Q\": 3}\ntrain['Embarked'] = train['Embarked'].map(embarked_mapping)\ntest['Embarked'] = test['Embarked'].map(embarked_mapping)\n\ntrain.head()","143c80c3":"#fill in missing Fare value in test set based on mean fare for that Pclass \nfor x in range(len(test[\"Fare\"])):\n    if pd.isnull(test[\"Fare\"][x]):\n        pclass = test[\"Pclass\"][x] #Pclass = 3\n        test[\"Fare\"][x] = round(train[train[\"Pclass\"] == pclass][\"Fare\"].mean(), 4)\n        \n#map Fare values into groups of numerical values\ntrain['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1, 2, 3, 4])\ntest['FareBand'] = pd.qcut(test['Fare'], 4, labels = [1, 2, 3, 4])\n\n#drop Fare values\ntrain = train.drop(['Fare'], axis = 1)\ntest = test.drop(['Fare'], axis = 1)","daac96f7":"#check train data\ntrain.head()","bf3564f5":"#check test data\ntest.head()","a05c5d4a":"from sklearn.model_selection import train_test_split\n\npredictors = train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = train[\"Survived\"]\nx_train, x_val, y_train, y_val = train_test_split(predictors, target, test_size = 0.22, random_state = 0)","970fe67c":"# Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\n\ngaussian = GaussianNB()\ngaussian.fit(x_train, y_train)\ny_pred = gaussian.predict(x_val)\nacc_gaussian = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_gaussian)","4895ce45":"# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_val)\nacc_logreg = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_logreg)","6cf091a3":"# Support Vector Machines\nfrom sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(x_val)\nacc_svc = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_svc)","6c6aa373":"# Linear SVC\nfrom sklearn.svm import LinearSVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(x_train, y_train)\ny_pred = linear_svc.predict(x_val)\nacc_linear_svc = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_linear_svc)","a78335b6":"# Perceptron\nfrom sklearn.linear_model import Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(x_train, y_train)\ny_pred = perceptron.predict(x_val)\nacc_perceptron = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_perceptron)","363a3de4":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\n\ndecisiontree = DecisionTreeClassifier()\ndecisiontree.fit(x_train, y_train)\ny_pred = decisiontree.predict(x_val)\nacc_decisiontree = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_decisiontree)","96e75a27":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_val)\nacc_randomforest = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_randomforest)","4177e9dc":"# KNN or k-Nearest Neighbors\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_val)\nacc_knn = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_knn)","e5dece9c":"# Stochastic Gradient Descent\nfrom sklearn.linear_model import SGDClassifier\n\nsgd = SGDClassifier()\nsgd.fit(x_train, y_train)\ny_pred = sgd.predict(x_val)\nacc_sgd = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_sgd)","48d88cfa":"# Gradient Boosting Classifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_val)\nacc_gbk = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_gbk)","65048695":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', 'Linear SVC', \n              'Decision Tree', 'Stochastic Gradient Descent', 'Gradient Boosting Classifier'],\n    'Score': [acc_svc, acc_knn, acc_logreg, \n              acc_randomforest, acc_gaussian, acc_perceptron,acc_linear_svc, acc_decisiontree,\n              acc_sgd, acc_gbk]})\nmodels.sort_values(by='Score', ascending=False)","5865caa3":"#set ids as PassengerId and predict survival \nids = test['PassengerId']\npredictions = gbk.predict(test.drop('PassengerId', axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","083fc270":"Next we'll fill in the missing values in the Age feature. Since a higher percentage of values are missing, it would be illogical to fill all of them with the same value (as we did with Embarked). Instead, let's try to find a way to predict the missing ages. ","070d3973":"### Sex Feature","8bc9edfc":"### Looking at the Test Data\nLet's see how our test data looks!","da09d752":"People with less than four parents or children aboard are more likely to survive than those with four or more. Again, people traveling alone are less likely to survive than those with 1-3 parents or children.","2a335d38":"# Titanic Survival Predictions (Beginner) # by salah sammari\nI am a newbie to data science and machine learning, and will be attempting to work my way through the Titanic: Machine Learning from Disaster dataset. Please consider upvoting if this is useful to you! :)\n\n### Contents:\n1. Import Necessary Libraries\n2. Read In and Explore the Data\n3. Data Analysis\n4. Data Visualization\n5. Cleaning Data\n6. Choosing the Best Model\n7. Creating Submission File\n\nAny and all feedback is welcome! ","c555eded":"It's clear that the majority of people embarked in Southampton (S). Let's go ahead and fill in the missing values with S.","f1b5e67d":"As predicted, people with higher socioeconomic class had a higher rate of survival. (62.9% vs. 47.3% vs. 24.2%)","e55501ea":"## 6) Choosing the Best Model","d0192b5d":"### Embarked Feature","5fc2cece":"### Age Feature","9b7e0524":"I decided to use the Gradient Boosting Classifier model for the testing data.","26d7187d":"### Cabin Feature\nI think the idea here is that people with recorded cabin numbers are of higher socioeconomic class, and thus more likely to survive. Thanks for the tips","ef69a834":"### Pclass Feature","fc1152a0":"### Parch Feature","f4c7d469":"## 5) Cleaning Data\nTime to clean our data to account for missing values and unnecessary information!","e8b2f2be":"### Fare Feature\nIt's time separate the fare values into some logical groups as well as filling in the single missing value in the test dataset.","b10092a0":"### Sex Feature","f72fd6be":"## 3) Data Analysis\nWe're going to consider the features in the dataset and how complete they are. ","ed6135ed":"### Age Feature","0ba01f19":"### Name Feature\nWe can drop the name feature now that we've extracted the titles.","bc964ee5":"If you've come this far, congratulations and thank you for reading! \n\n*If you use any part of this notebook in a published kernel, credit (you can simply link back here) would be greatly appreciated. :)*","93fd57bd":"Now that we've filled in the missing values at least *somewhat* accurately (I will work on a better way for predicting missing age values), it's time to map each age group to a numerical value.","892933e7":"### Some Predictions:\n* Sex: Females are more likely to survive.\n* SibSp\/Parch: People traveling alone are more likely to survive.\n* Age: Young children are more likely to survive.\n* Pclass: People of higher socioeconomic class are more likely to survive.","ffaf92e8":"### SibSp Feature","94a36b3f":"Let's compare the accuracies of each model!","a48dcc76":"## 2) Read in and Explore the Data \nIt's time to read in our training and testing data using `pd.read_csv`, and take a first look at the training data using the `describe()` function.","2a160301":"Babies are more likely to survive than any other age group. ","658acfda":"As predicted, females have a much higher chance of survival than males. The Sex feature is essential in our predictions.","2a8555de":"* **Numerical Features:** Age (Continuous), Fare (Continuous), SibSp (Discrete), Parch (Discrete)\n* **Categorical Features:** Survived, Sex, Embarked, Pclass\n* **Alphanumeric Features:** Ticket, Cabin\n\n#### What are the data types for each feature?\n* Survived: int\n* Pclass: int\n* Name: string\n* Sex: string\n* Age: float\n* SibSp: int\n* Parch: int\n* Ticket: string\n* Fare: float\n* Cabin: string\n* Embarked: string\n\nNow that we have an idea of what kinds of features we're working with, we can see how much information we have about each of them.\n","86c93e67":"### Testing Different Models\nI will be testing the following models with my training data (got the list from [here](http:\/\/https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions)):\n* Gaussian Naive Bayes\n* Logistic Regression\n* Support Vector Machines\n* Perceptron\n* Decision Tree Classifier\n* Random Forest Classifier\n* KNN or k-Nearest Neighbors\n* Stochastic Gradient Descent\n* Gradient Boosting Classifier\n\nFor each model, we set the model, fit it with 80% of our training data, predict for 20% of the training data and check the accuracy.","0fef1ef2":"#### Some Observations:\n* There are a total of 891 passengers in our training set.\n* The Age feature is missing approximately 19.8% of its values. I'm guessing that the Age feature is pretty important to survival, so we should probably attempt to fill these gaps. \n* The Cabin feature is missing approximately 77.1% of its values. Since so much of the feature is missing, it would be hard to fill in the missing values. We'll probably drop these values from our dataset.\n* The Embarked feature is missing 0.22% of its values, which should be relatively harmless.","c995d41d":"### Embarked Feature","fa287874":"* We have a total of 418 passengers.\n* 1 value from the Fare feature is missing.\n* Around 20.5% of the Age feature is missing, we will need to fill that in.","1c883ba9":"### Ticket Feature","8a3f7b0a":"### Cabin Feature","14db2143":"## 4) Data Visualization\nIt's time to visualize our data so we can see whether our predictions were accurate! ","269f5ed0":"People with a recorded Cabin number are, in fact, more likely to survive. (66.6% vs 29.9%)","17ce3a74":"## Sources:\n* [Titanic Data Science Solutions](https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions)\n* [Scikit-Learn ML from Start to Finish](https:\/\/www.kaggle.com\/jeffd23\/scikit-learn-ml-from-start-to-finish?scriptVersionId=320209)\n\nAny and all feedback is welcome! ","3ed5f6ea":"## 7) Creating Submission File\nIt's time to create a submission.csv file to upload to the Kaggle competition!","6a8a50db":"The code I used above is from [here](https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions). Next, we'll try to predict the missing Age values from the most common age for their Title.","4bf77938":"We can see that except for the abovementioned missing values, no NaN values exist.","f15f1079":"### Splitting the Training Data\nWe will use part of our training data (22% in this case) to test the accuracy of our different models.","0b4ba1ab":"## 1) Import Necessary Libraries\nFirst off, we need to import several Python libraries such as numpy, pandas, matplotlib and seaborn.","21ee51f0":"In general, it's clear that people with more siblings or spouses aboard were less likely to survive. However, contrary to expectations, people with no siblings or spouses were less to likely to survive than those with one or two. (34.5% vs 53.4% vs. 46.4%)"}}