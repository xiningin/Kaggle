{"cell_type":{"4a6e035d":"code","709cad39":"code","2443d4d4":"code","bf736992":"code","80e024cc":"code","83d03db4":"code","3134c9b0":"code","ab4a04bf":"code","f41388f0":"code","6fe3a62b":"code","fd53040a":"code","dbb7bea2":"code","62ec0583":"code","51dc7f40":"code","742af21e":"code","cc2d7966":"code","3f35921e":"code","84dcdbf5":"code","c07149e1":"code","c4693602":"code","0aaec8dc":"code","3b5eae20":"code","c684f5cf":"code","0077d3a6":"code","6e8db508":"code","1fe23423":"code","9685e8ca":"code","f6f7122d":"code","01e762a5":"code","fabfc1c5":"code","dd461711":"code","3cf94da6":"code","306d72b5":"code","1ea05258":"code","d4e84b0f":"code","562f9128":"markdown","5b1c6720":"markdown","9ff96ef5":"markdown","8a9676fd":"markdown","8472e348":"markdown","8391122f":"markdown","9ed19ba6":"markdown","76cf6c9f":"markdown","afcd6f7d":"markdown","d09db477":"markdown","0d20c25a":"markdown","95fcaa68":"markdown","d7c40ba0":"markdown","9fab0bdc":"markdown","389b0a77":"markdown","d8fb271e":"markdown","e6598106":"markdown","8a1148f2":"markdown"},"source":{"4a6e035d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","709cad39":"import os\nimport pandas as pd\nimport numpy as np\nimport math\nimport datetime as dt\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, explained_variance_score, r2_score \nfrom sklearn.metrics import mean_poisson_deviance, mean_gamma_deviance, accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.layers import LSTM, GRU\n\nfrom itertools import cycle\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")","2443d4d4":"data = pd.read_csv('\/kaggle\/input\/google-stock-history\/google.csv')\ndata.head()","bf736992":"print(\"Total number of days: \",data.shape[0])\nprint(\"Total number of fields: \",data.shape[1])","80e024cc":"print(\"Null values:\", data.isnull().values.sum())\nprint(\"NA values:\", data.isna().values.any())","83d03db4":"# convert date field from string to Date format \ndata['Date'] = pd.to_datetime(data.Date)\ndata.head()","3134c9b0":"print(\"Starting date: \",data.iloc[0][0])\nprint(\"Ending date: \", data.iloc[-1][0])\nprint(\"Duration: \", data.iloc[-1][0]- data.iloc[0][0])","ab4a04bf":"monthvise= data.groupby(data['Date'].dt.strftime('%B'))[['Open','Close']].mean()\nnew_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', \n             'September', 'October', 'November', 'December']\nmonthvise = monthvise.reindex(new_order, axis=0)\nmonthvise","f41388f0":"fig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['Open'],\n    name='Stock Open Price',\n    marker_color='crimson'\n))\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['Close'],\n    name='Stock Close Price',\n    marker_color='lightsalmon'\n))\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45, \n                  title='Monthwise comparision between Stock open and close price')\nfig.show()","6fe3a62b":"data.groupby(data['Date'].dt.strftime('%B'))['Low'].min()\nmonthvise_high = data.groupby(data['Date'].dt.strftime('%B'))['High'].max()\nmonthvise_high = monthvise_high.reindex(new_order, axis=0)\n\nmonthvise_low = data.groupby(data['Date'].dt.strftime('%B'))['Low'].min()\nmonthvise_low = monthvise_low.reindex(new_order, axis=0)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=monthvise_high.index,\n    y=monthvise_high,\n    name='Stock high Price',\n    marker_color='rgb(0, 153, 204)'\n))\nfig.add_trace(go.Bar(\n    x=monthvise_low.index,\n    y=monthvise_low,\n    name='Stock low Price',\n    marker_color='rgb(255, 128, 0)'\n))\n\nfig.update_layout(barmode='group', \n                  title=' Monthwise High and Low stock price')\nfig.show()","fd53040a":"names = cycle(['Stock Open Price','Stock Close Price','Stock High Price','Stock Low Price'])\n\nfig = px.line(data, x=data.Date, y=[data['Open'], data['Close'], data['High'], data['Low']],\n             labels={'date': 'Date','value':'Stock value'})\nfig.update_layout(title_text='Stock analysis chart', font_size=15, font_color='black',legend_title_text='Stock Parameters')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.show()","dbb7bea2":"closedf = data[['Date','Close']]\nprint(\"Shape of close dataframe:\", closedf.shape)","62ec0583":"fig = px.line(closedf, x=closedf.Date, y=closedf.Close,labels={'date':'Date','close':'Close Stock'})\nfig.update_traces(marker_line_width=2, opacity=0.8)\nfig.update_layout(title_text='Stock close price chart', plot_bgcolor='white', font_size=15, font_color='black')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","51dc7f40":"closedf = closedf[closedf['Date'] > '2020-10-01']\nclose_stock = closedf.copy()\nprint(\"Total data for prediction: \",closedf.shape[0])","742af21e":"fig = px.line(closedf, x=closedf.Date, y=closedf.Close,labels={'date':'Date','close':'Close Stock'})\nfig.update_traces(marker_line_width=2, opacity=0.8, marker_line_color='orange')\nfig.update_layout(title_text='Considered period to predict Stock close price', plot_bgcolor='white', font_size=15, font_color='black')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","cc2d7966":"del closedf['Date']\nscaler=MinMaxScaler(feature_range=(0,1))\nclosedf=scaler.fit_transform(np.array(closedf).reshape(-1,1))\nprint(closedf.shape)","3f35921e":"training_size=int(len(closedf)*0.60)\ntest_size=len(closedf)-training_size\ntrain_data,test_data=closedf[0:training_size,:],closedf[training_size:len(closedf),:1]\nprint(\"train_data: \", train_data.shape)\nprint(\"test_data: \", test_data.shape)","84dcdbf5":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n        dataX.append(a)\n        dataY.append(dataset[i + time_step, 0])\n    return np.array(dataX), np.array(dataY)","c07149e1":"time_step = 15\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)\n\nprint(\"X_train: \", X_train.shape)\nprint(\"y_train: \", y_train.shape)\nprint(\"X_test: \", X_test.shape)\nprint(\"y_test\", y_test.shape)","c4693602":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)\n\nprint(\"X_train: \", X_train.shape)\nprint(\"X_test: \", X_test.shape)","0aaec8dc":"tf.keras.backend.clear_session()\nmodel=Sequential()\nmodel.add(GRU(32,return_sequences=True,input_shape=(time_step,1)))\nmodel.add(GRU(32,return_sequences=True))\nmodel.add(GRU(32))\nmodel.add(Dropout(0.20))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')","3b5eae20":"model.summary()","c684f5cf":"history = model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=100,batch_size=32,verbose=1)","0077d3a6":"import matplotlib.pyplot as plt\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(loss))\n\nplt.plot(epochs, loss, 'r', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend(loc=0)\nplt.figure()\n\n\nplt.show()","6e8db508":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)\ntrain_predict.shape, test_predict.shape","1fe23423":"# Transform back to original form\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\noriginal_ytrain = scaler.inverse_transform(y_train.reshape(-1,1)) \noriginal_ytest = scaler.inverse_transform(y_test.reshape(-1,1)) ","9685e8ca":"# Evaluation metrices RMSE and MAE\nprint(\"Train data RMSE: \", math.sqrt(mean_squared_error(original_ytrain,train_predict)))\nprint(\"Train data MSE: \", mean_squared_error(original_ytrain,train_predict))\nprint(\"Train data MAE: \", mean_absolute_error(original_ytrain,train_predict))\nprint(\"-------------------------------------------------------------------------------------\")\nprint(\"Test data RMSE: \", math.sqrt(mean_squared_error(original_ytest,test_predict)))\nprint(\"Test data MSE: \", mean_squared_error(original_ytest,test_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytest,test_predict))","f6f7122d":"print(\"Train data explained variance regression score:\", explained_variance_score(original_ytrain, train_predict))\nprint(\"Test data explained variance regression score:\", explained_variance_score(original_ytest, test_predict))","01e762a5":"print(\"Train data R2 score:\", r2_score(original_ytrain, train_predict))\nprint(\"Test data R2 score:\", r2_score(original_ytest, test_predict))","fabfc1c5":"print(\"Train data MGD: \", mean_gamma_deviance(original_ytrain, train_predict))\nprint(\"Test data MGD: \", mean_gamma_deviance(original_ytest, test_predict))\nprint(\"----------------------------------------------------------------------\")\nprint(\"Train data MPD: \", mean_poisson_deviance(original_ytrain, train_predict))\nprint(\"Test data MPD: \", mean_poisson_deviance(original_ytest, test_predict))","dd461711":"# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(closedf)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(closedf)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(closedf)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\n\nplotdf = pd.DataFrame({'date': close_stock['Date'],\n                       'original_close': close_stock['Close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = px.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Stock price','date': 'Date'})\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black', legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","3cf94da6":"x_input=test_data[len(test_data)-time_step:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\nfrom numpy import array\n\nlst_output=[]\nn_steps=time_step\ni=0\npred_days = 30\nwhile(i<pred_days):\n    \n    if(len(temp_input)>time_step):\n        \n        x_input=np.array(temp_input[1:])\n        #print(\"{} day input {}\".format(i,x_input))\n        x_input = x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        \n        yhat = model.predict(x_input, verbose=0)\n        #print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n       \n        lst_output.extend(yhat.tolist())\n        i=i+1\n        \n    else:\n        \n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        temp_input.extend(yhat[0].tolist())\n        \n        lst_output.extend(yhat.tolist())\n        i=i+1\n               \nprint(\"Output of predicted next days: \", len(lst_output))","306d72b5":"last_days=np.arange(1,time_step+1)\nday_pred=np.arange(time_step+1,time_step+pred_days+1)\nprint(last_days)\nprint(day_pred)","1ea05258":"temp_mat = np.empty((len(last_days)+pred_days+1,1))\ntemp_mat[:] = np.nan\ntemp_mat = temp_mat.reshape(1,-1).tolist()[0]\n\nlast_original_days_value = temp_mat\nnext_predicted_days_value = temp_mat\n\nlast_original_days_value[0:time_step+1] = scaler.inverse_transform(closedf[len(closedf)-time_step:]).reshape(1,-1).tolist()[0]\nnext_predicted_days_value[time_step+1:] = scaler.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n\nnew_pred_plot = pd.DataFrame({\n    'last_original_days_value':last_original_days_value,\n    'next_predicted_days_value':next_predicted_days_value\n})\n\nnames = cycle(['Last 15 days close price','Predicted next 30 days close price'])\n\nfig = px.line(new_pred_plot,x=new_pred_plot.index, y=[new_pred_plot['last_original_days_value'],\n                                                      new_pred_plot['next_predicted_days_value']],\n              labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Compare last 15 days vs next 30 days',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\n\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","d4e84b0f":"lstmdf=closedf.tolist()\nlstmdf.extend((np.array(lst_output).reshape(-1,1)).tolist())\nlstmdf=scaler.inverse_transform(lstmdf).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Close price'])\n\nfig = px.line(lstmdf,labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Plotting whole closing stock price with prediction',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Stock')\n\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","562f9128":"Normalising close price","5b1c6720":"Time series is a sequence or series of data points in which the time component is involved throughout the occurrence and Analyzing this time series data with certain tools and techniques is called time series analysis.\n\nIn this notebook, You will be going to learn following:\n\nEDA Techniques\nPlotting basic charts using Plotly\nEasily learn about Time series analysis using GRU neural network\nPrediction next 30 days","9ff96ef5":"# Predicting next 30 days","8a9676fd":"Plotting last 15 days of dataset and next predicted 30 days","8472e348":"Evaluation metrices RMSE, MSE and MAE\nRoot Mean Square Error (RMSE), Mean Square Error (MSE) and Mean absolute Error (MAE) are a standard way to measure the error of a model in predicting quantitative data.","8391122f":"**Explained variance regression score**\n\nThe explained variance score explains the dispersion of errors of a given dataset, and the formula is written as follows: Here, and Var(y) is the variance of prediction errors and actual values respectively. Scores close to 1.0 are highly desired, indicating better squares of standard deviations of errors.","9ed19ba6":"Plotting entire Closing Stock Price with next 30 days period of prediction","76cf6c9f":"# Model Evaluation","afcd6f7d":"R2 score for regression\nR-squared (R2) is a statistical measure that represents the proportion of the variance for a dependent variable that's explained by an independent variable or variables in a regression model.\n\n1 = Best\n0 or < 0 = worse","d09db477":"# Import Libraries","0d20c25a":"Here, We are going to predict close price for next 30 days\n\nPrepare Stock Close price","95fcaa68":"# Model Building (GRU)\nGRUs (Gated Recurrent Units) are very similar to Long Short Term Memory(LSTM). Just like LSTM, GRU uses gates to control the flow of information. They are relatively new as compared to LSTM. This is the reason they offer some improvement over LSTM and have simpler architecture.","d7c40ba0":"Plotting loss chart","9fab0bdc":"# EDA - Exploratory Data Analysis","389b0a77":"Trend comparision between stock open price, close price, high price, low price","d8fb271e":"# Comparision of original stock close price and predicted close price","e6598106":"Consider only last 1 year data for prediction","8a1148f2":"Transform Close price base on Time-series-analysis forecasting requirement"}}