{"cell_type":{"d41fc23d":"code","c88d7633":"code","3bdcbbef":"code","247b0597":"code","37bf9f93":"code","fd5faf97":"code","57eb953c":"code","f85c7e1d":"code","8eee0a2f":"code","936d049b":"markdown","d12fde06":"markdown","a84387ce":"markdown","6130a59e":"markdown","cdcf66a1":"markdown","efe5d965":"markdown","ba8658bc":"markdown","af0d454f":"markdown"},"source":{"d41fc23d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nimport random\nfrom PIL import Image, ImageOps\nimport matplotlib.pyplot as plt","c88d7633":"print(f\"Number of location in the folder 'metadata': {len(os.listdir('\/kaggle\/input\/indoor-location-navigation\/metadata\/'))}\")","3bdcbbef":"def select_random_location():\n    '''Returns a random location from the folder \n    kaggle\/input\/indoor-location-navigation\/metadata'.\n    '''\n    directory = '\/kaggle\/input\/indoor-location-navigation\/metadata'\n    random_location = random.choice(os.listdir(directory))\n    return random_location\n\ndef select_random_floor(location):\n    '''Selecting a random floor corresponding to a given location.\n    \n    Args:\n        location: a site from the folder 'kaggle\/input\/indoor-location-navigation\/metadata'\n    Returns:\n        random_floor: one of the floors\n    '''\n    \n    directory = '\/kaggle\/input\/indoor-location-navigation\/metadata'\n    # creating a list of all floors found in the corresponding folder\n    location_floors = []\n    for floor in os.listdir(f'{directory}\/{location}'):\n        location_floors.append(floor)\n    \n    # selecting a random floor from the list of floors\n    random_floor = random.choice(location_floors)\n    return random_floor  ","247b0597":"def display_random_floor():\n    '''Outputs the visualization of the random floor from the folder\n    'kaggle\/input\/indoor-location-navigation\/metadata'.\n    '''\n    \n    directory = '\/kaggle\/input\/indoor-location-navigation\/metadata'\n    location = select_random_location()\n    floor = select_random_floor(location)\n    \n    # plotting a figure using matplotlib and PIL libraries\n    plt.figure(figsize=(16, 8))\n    file_path = f'{directory}\/{location}\/{floor}\/floor_image.png'\n    image = Image.open(file_path)\n    plt.imshow(image)\n    plt.title(f'Location: {location},\\n Floor: {floor}',fontsize = 18)\n    plt.axis(\"off\")","37bf9f93":"display_random_floor()","fd5faf97":"def display_floors(location):\n    '''Outputs the visualization of the .png images available\n    in the folder 'kaggle\/input\/indoor-location-navigation\/metadata'.\n    \n    Args:\n        location: string that describes the location (or building),\n              for a random location, use location = 'random'.\n    Returns:\n        figure with all available floors associated with the location.\n    '''\n    \n    directory = '\/kaggle\/input\/indoor-location-navigation\/metadata'\n    if location=='random':\n        location = random.choice(os.listdir(directory))\n\n    location_floors = []\n    for floor in os.listdir(f'{directory}\/{location}'):\n        location_floors.append(floor)\n\n    total_floors = len(location_floors)\n\n    # Create the custom number of rows & columns\n    ncols= np.int(np.ceil(total_floors\/3))\n    nrows = np.int(np.ceil(total_floors \/ ncols)) \n\n    plt.figure(figsize=(10*ncols, 5*nrows))\n    plt.suptitle(f\"Location: '{location}'\", fontsize=18)\n\n\n    for i, floor in enumerate(location_floors):\n        plt.subplot(nrows, ncols, i+1)\n\n\n        file_path = f'{directory}\/{location}\/{floor}\/floor_image.png'\n        image = Image.open(file_path)\n        image = ImageOps.expand(image, border=3, fill='gray')\n\n        plt.imshow(image)\n        plt.title(floor)\n        plt.axis(\"off\")","57eb953c":"display_floors('random')","f85c7e1d":"display_floors('5cd56bade2acfd2d33b61a61')","8eee0a2f":"directory = '\/kaggle\/input\/indoor-location-navigation\/'\ntrain_files = sum([len(files) for _, _, files in os.walk(f\"{directory}\/train\")])\ntest_files = sum([len(files) for _, _, files in os.walk(f\"{directory}\/test\")])\n\nprint(f\"Number of files in the training dataset: {train_files}.\")\nprint(f\"Number of files in the test dataset: {test_files}.\")","936d049b":"...or a floor plan of a given location.","d12fde06":"Now, we can plot all floor plans of a randomly selected building.","a84387ce":"# Visualization of floor plans\nFirst, we need to understand the input data. The folder \"indoor-location-navigation\" contains 3 subdirectories, \"metadata\", \"test\", and \"train\", respectively.\nThe following schematic shows the data structure in the \"metadata\" folder, as it is given in the \"Data Description\" tab.\n![Capture_xyz10_4.PNG](attachment:c6a8c90e-e601-4f91-89aa-1d28f798d7a1.PNG)\nWe are going to use the images in the .png format to display the locations. The other two files associated with each floor are in .json format. The floor_info.json describes the size of the location (height and width), while the geojson_map.json is a file for geospatial visualization (it is possible to reproduce a raster image in .png format using the *geopandas* library applied to this .json file).","6130a59e":"# Train and test data\nNow, let's delve into the actual training and testing datasets. The training dataset consists of .txt files with various sensor data (timestamps, accelerometer, gyroscope, magnetometers, etc.) together with waypoint coordinates (labeled by a surveyor). We can easily count the number of trace records in both directories.","cdcf66a1":"As one can easily check, the amount of locations in the folder \"train\" is also 204.","efe5d965":"Now, let's plot a plan of a randomly chosen floor.","ba8658bc":"#                              Basic Exploratory Data Analysis\n![](http:\/\/static.dist10.cn\/Fh7Zz-ipJRPZRM9bE1p7Dsu7YLpJ\/section3_bg.png?imageView2\/5\/w\/1440\/h\/600)\nThe image is taken from the official webpage of the competition (https:\/\/location20.xyz10.com\/)","af0d454f":"It might be useful to create some helper functions to generate a random location, and for a given location - a random floor."}}