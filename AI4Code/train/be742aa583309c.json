{"cell_type":{"18ed087b":"code","fe55e451":"code","42e781a2":"code","27a808a1":"code","22e7eebb":"code","a9a9b8db":"code","9511c352":"code","6f3356c0":"code","f2d9fe9d":"code","478e22a8":"code","b66f3500":"code","c7ab49fe":"code","16715465":"code","778ab109":"code","9eb7be29":"code","a7b8fc86":"code","b9ce6366":"code","9e98222f":"code","4804d157":"code","db0297f9":"code","7eac2fab":"code","a7d071e0":"code","8dd8f269":"code","519102b7":"code","08f5aa50":"code","15c1b0eb":"code","43ef8b8d":"code","6cfe2f95":"code","18b85197":"code","48dc6559":"code","b7e317c3":"code","db470fb2":"code","e3124802":"code","509e2e2c":"code","596dfe7f":"code","22574f39":"code","6538758d":"code","a1e55d70":"code","736744e1":"code","95b5b929":"code","5fa6c463":"code","854a165c":"code","1cca1e4d":"code","d3afd1da":"code","fa5a9f1c":"code","2f8b572b":"code","fadae021":"code","9688eba2":"code","1e05f6bb":"code","d4796811":"code","c0e8bfb2":"markdown","97d003fe":"markdown","a820de22":"markdown","0b00edef":"markdown","28798df5":"markdown","c55501fa":"markdown","179cd55a":"markdown","8bbc0604":"markdown","66a048d4":"markdown","c0e208bd":"markdown","0dbff216":"markdown","8ec78df1":"markdown","3d84a1d9":"markdown","2076e3c6":"markdown","564fba7c":"markdown","a0b1ec3c":"markdown","a9101b6c":"markdown","1d61f760":"markdown","0aa21dfb":"markdown","c6e02849":"markdown","2c4396ad":"markdown","a1871726":"markdown","487e47ff":"markdown"},"source":{"18ed087b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\"))\n","fe55e451":"data = pd.read_csv('..\/input\/athlete_events.csv')","42e781a2":"data.info()","27a808a1":"data.describe()","22e7eebb":"data.head()","a9a9b8db":"data.corr()","9511c352":"data.tail()","6f3356c0":"data.columns","f2d9fe9d":"#it brings the year columns from data. kind = it will be line plot, color = line's color\n#alpha = line's opacity, label = the name of the line, grid = style of the surface(backgorund)\n#linewidth = border of the line\ndata.Weight.plot(kind='line', color='red', alpha=0.5,linewidth=1, label='Weight', grid=True)\ndata.Age.plot(color='blue', alpha=0.7,linewidth=1, label='Age', grid=True)\nplt.legend(loc='upper right')\nplt.xlabel('x axis')  # the name of the label on the bottom\nplt.ylabel('y axis')  # the name of the label on the right side\nplt.title(\"Comparison\")  # the name of the plot\nplt.show() # it shows the plot","478e22a8":"#data Scatter\n#x = age , y = weight\ndata.plot(kind='scatter', x = 'Age', y = 'Weight', alpha=0.5, color='red')\nplt.xlabel('Age')\nplt.ylabel('Weight')\nplt.show()","b66f3500":"#Histogram\ndata.Age.plot(kind='hist', bins=50, figsize=(11,8))\nplt.show()","c7ab49fe":"data = pd.read_csv('..\/input\/athlete_events.csv')","16715465":"series = data['Year']  # This is a series definition\nprint(type(series))\ndataFramework = data[['Year']] # This is a Data Framework definition\nprint(type(dataFramework))","778ab109":"youngAge = data['Age'] < 12 # it brings the list of data which is younger than 12 \ndata[youngAge]","9eb7be29":"#this brings the list of data which is younger than 12 and sex is Male\ndata[(data['Age'] < 12) & (data['Sex'] == 'M')]","a7b8fc86":"for index, value in data[['Age']][0:1].iterrows():\n    print(index, \" : \", value)\n#it brings the age of the first data in the DataFrame","b9ce6366":"def func():\n    nums = [1,2,3]\n    return nums\na,b,c = func() # a = nums[0], b = nums[1], c = nums[2]\nprint(a,b,c)","9e98222f":"def merge(name, surname='unnamed'): # surname is already defined, if is doesn't get parameter for surname, surname use defined parameters\n    return name + \" \" + surname\n\nprint(merge('Murat'))\nprint(merge('Murat','Celiktepe'))","4804d157":"def list_args(*args): #it gets parameters that whatever user wants and add them in a list\n    for i in args: print(i)\nlist_args(1,2)\nlist_args(1,2,3,4)","db0297f9":"def dic_args(**kwargs): #like *args , **kwargs gets parameters whatever user wants but add them in a dictionary\n    for index, value in kwargs.items():\n        print(index + \" \" + value)\ndic_args(name = 'Murat', surname = 'Celiktepe')","7eac2fab":"square = lambda x: x**2 # x is a parameter and return value is x**2\nprint(square(4))","a7d071e0":"nums = [1,2,3]\nsquare = map(lambda x:x**2, nums) # every value in nums list is called in lambda function\nprint(list(square))","8dd8f269":"nums = [1,2,3]\nnums2 = [i * 2 for i in nums]\nprint(nums2)","519102b7":"#Example width list comprehension\n\nnums = [10, 20, 30]\nnums2 = [i * 4 if i == 20 else i \/ 2 if i < 11 else i - 10 for i in nums]\nprint(nums2)","08f5aa50":"#Another example width List Comprehension\n\naverage = sum(data.Year) \/ len(data.Year)\n\ndata['data_Status'] = [\"high\" if i > average else \"low\" for i in data.Year]\ndata.loc[:10,['data_Status','Year']]","15c1b0eb":"data.info()","43ef8b8d":"data.describe()","6cfe2f95":"print(data['Medal'].value_counts(dropna=False))\n# (dropna=False) is brings the number of nan values","18b85197":"data.boxplot(column='Weight', by='Sex')","48dc6559":"melt_data = data.head()\nmelt_data","b7e317c3":"melted_data = pd.melt(frame = melt_data, id_vars = 'Name', value_vars = ['Height', 'Weight'])\nmelted_data","db470fb2":"data1 = data.head()\ndata2 = data.tail()\nconc_data = pd.concat([data1, data2], axis = 0, ignore_index = True) # (ignore_index = True) is ignores ID of the values\nconc_data","e3124802":"data.dtypes","509e2e2c":"data.Year = data.Year.astype('float')\ndata.head()","596dfe7f":"data['Medal'].dropna(inplace = True)  \n#inplace = means that we do not assign it to new variable. Changes automatically assigned to data\nassert data['Medal'].notnull().all()","22574f39":"print(data.Medal.value_counts(dropna=False))\n#as we can see, there is no nan values data now because of that we did above","6538758d":"#assert data.Height.notnull().all()\n# this code give us an error because, there are nan values","a1e55d70":"data.Height.fillna('empty', inplace = True)","736744e1":"assert data.Height.notnull().all()\n# it did not give error because;\n# 'Empty' is written inside of every nan values data ","95b5b929":"names = [\"John\", \"Rick\"]\nages = [\"25\", \"56\"]\ncolumn_label = [\"Name\", \"Age\"]\nlist_column = [names, ages]\nlist1 = list(zip(column_label, list_column))\ndata_dic = dict(list1)\ndf = pd.DataFrame(data_dic)\ndf","5fa6c463":"#add new columns\ndf[\"Team\"] = [\"Madrid\", \"Barcelona\"]\ndf","854a165c":"data1 = data.loc[:,[\"Age\",\"Height\",\"Weight\"]]\ndata1.plot()","1cca1e4d":"data1.plot(subplots = True)\nplt.show()","d3afd1da":"data1.plot(kind=\"hist\", y = \"Age\", bins = 100, range = (0,60), normed = True)\nplt.show()","fa5a9f1c":"data1.plot(kind=\"hist\", y = \"Age\", bins = 100, range = (0,60), normed = True, cumulative=True)\nplt.show()","2f8b572b":"data.head()","fadae021":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nnew_Data = data.head()\ndate_list = [\"2000-01-10\",\"2000-02-10\",\"2000-03-10\",\"2019-03-15\",\"2019-03-16\"]\ndatatime = pd.to_datetime(date_list)\nnew_Data[\"date\"] = datatime\n\nnew_Data = new_Data.set_index(\"date\")\nnew_Data","9688eba2":"print(new_Data.loc[\"2019-03-16\"])","1e05f6bb":"new_Data.resample('A').mean()","d4796811":"new_Data.resample('A').first().interpolate('linear')","c0e8bfb2":"**DATA ANALYSIS**","97d003fe":"**Functions**\n\n**USER DEF\u0130NED FUNCTIONS**","a820de22":"**RESAMPL\u0130NG TIME SERIES**\n* A = year\n* M = month","0b00edef":"* **Count: **  the number of entries\n* **Mean: ** the average of entries\n* **std: ** standart deviation\n* **min: ** minimum entry\n* **25% : ** the first quantile (lower quantile)\n* **50% : ** the second quantile (median)\n* **75% : ** the third quantile (upper quantile)\n* **max: ** max entry","28798df5":"**BOX PLOTS**","c55501fa":"**LAMBDA FUNCT\u0130ON**","179cd55a":"**DEF\u0130N\u0130NG DATA FOR CLEAN\u0130NG**","8bbc0604":"* 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n* The number that is in the middle of the sequence is the median. In this sequence it is 8.\n* The first quantile is in the between median and lowest number. In this sequence, it is 4.\n* The third quantile is in the between median and highest number. In this sequence, it is 12.\n","66a048d4":"**ANONYMOUS FUNCT\u0130ON**","c0e208bd":"**Pandas Framework**","0dbff216":"**The Definition of the Table**","8ec78df1":"**CONTROL M\u0130SS\u0130NG DATA**","3d84a1d9":"**DEFAULT AND FLEX\u0130BLE FUNCTIONS**","2076e3c6":"**CONVERT\u0130NG DATA TYPE**","564fba7c":"**TIDY DATA**","a0b1ec3c":"The difference between series and Data Framework;","a9101b6c":"**What is the quantile?**","1d61f760":"**Matplotlib Framework**","0aa21dfb":"**CONCATENATING DATA**","c6e02849":"**V\u0130SUAL DATA ANALYS\u0130S**","2c4396ad":"**MORE DETA\u0130L ABOUT PANDAS**","a1871726":"* **Instead of that, we can automatically write \"empty\" inside of nan values data**\n* For example;","487e47ff":"**LIST COMPREHENS\u0130ON**"}}