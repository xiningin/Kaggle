{"cell_type":{"2918f643":"code","6a164eb3":"code","3d3d3a0a":"code","b957a530":"code","b595e95d":"code","7e032843":"code","fe4c8421":"code","6a460d06":"code","54a2ee38":"code","c48985af":"code","b14400f0":"code","b4c9c530":"code","63f07c6c":"code","035cb6a0":"code","5ba4e69a":"code","4232cfa8":"code","7fabda2a":"code","0332e228":"code","b9f12b92":"code","1aa8a8f0":"code","a381b9f2":"code","a41b0390":"code","fe6adcce":"code","7feaf7d4":"code","5a47b643":"code","f17154a3":"code","9d908da2":"code","d017a19e":"code","429aae34":"code","31a802a1":"code","f1558f85":"code","e7b262c4":"code","2a1b5296":"code","ee0947c7":"code","eefcc73d":"code","26f40684":"code","7a97f72e":"code","db63f12b":"code","05fbb561":"code","cd5b9bb6":"code","5ae0c44f":"code","d6d8b14e":"code","c925181f":"code","b1fd031b":"code","fbb17399":"code","fca50cae":"code","b0c9269b":"code","9589448a":"code","885bdf3c":"code","8ecc3f73":"code","f4006b96":"code","9476ef3c":"code","e7c59a07":"code","097f129a":"code","4cb39cf6":"code","ae1648a0":"code","1d061fb9":"code","8da4379d":"code","cd723133":"code","aa518b16":"code","4a3bea6b":"code","06ee1040":"code","be241d29":"code","3fc52188":"code","eca1e6ce":"code","3ca6b04b":"code","745cc923":"code","1ff19b98":"code","796ab76e":"code","2fb6a4e0":"code","52d8caf9":"code","3876b892":"code","356c7ce0":"code","41a8b737":"code","97eab011":"code","539d76bb":"code","b48005b2":"code","b766bbec":"code","bc1ef043":"code","4b81b373":"code","e64d1698":"code","38ee85b4":"code","ec67eee7":"code","7210d055":"code","e7d06624":"code","335f8073":"code","03b480c9":"code","a457e0fd":"code","cd97d264":"code","dba320d4":"code","46045d8c":"code","7c8476d5":"code","2580aaaf":"code","84b9cfb8":"code","10a72f89":"code","d5f85c5c":"code","07aa7e8b":"code","e78cd9e2":"code","3615ad93":"code","fa0cbfd5":"code","244cd4b2":"code","c43cbb77":"code","0c114de6":"markdown","eaff05ca":"markdown","ee74f28d":"markdown","a3f4d9a2":"markdown","52a9cb8b":"markdown","d4968572":"markdown","90a90b20":"markdown","535945be":"markdown","96879f55":"markdown","1a4cd14d":"markdown","8d79fb77":"markdown","77f4f39e":"markdown","973ffcf6":"markdown","067d217c":"markdown","9ae0580b":"markdown","892f732a":"markdown","f636f105":"markdown","55fadd23":"markdown","f62a27d8":"markdown","bca85116":"markdown","176dc729":"markdown","0bcf251c":"markdown","63e48975":"markdown","8610ba38":"markdown","a9acca9a":"markdown","b9ab103e":"markdown","ab2ee474":"markdown","b978c690":"markdown","becc5c2d":"markdown","04c82193":"markdown","73124dc9":"markdown","49ebf1d1":"markdown","bfe7ad1e":"markdown","3c6c2ee8":"markdown","29f01bea":"markdown","586ed240":"markdown","6db0415e":"markdown","0b7f5236":"markdown","83a931a4":"markdown","4ee8e325":"markdown","f3efdba1":"markdown","6e8b0871":"markdown","010834ca":"markdown","2fd69a91":"markdown","07b1d292":"markdown","77ebea97":"markdown","30e8f4c7":"markdown","73165a12":"markdown","fd763337":"markdown","be081d55":"markdown","fb0c3f6c":"markdown","da970382":"markdown","156f4c3c":"markdown","9342aced":"markdown","01542f86":"markdown","278188a9":"markdown"},"source":{"2918f643":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a164eb3":"import sys\nfrom sklearn.model_selection import KFold\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor\nfrom bs4 import BeautifulSoup    \nimport requests ","3d3d3a0a":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_regression, mutual_info_regression\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, PolynomialFeatures\n\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom pandas import Series\n\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\nfrom sklearn.base import clone\nimport datetime\nfrom datetime import datetime, timedelta\nimport math\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor, AdaBoostRegressor\nfrom pprint import pprint","b957a530":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","b595e95d":"RANDOM_SEED = 42","7e032843":"def mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","fe4c8421":"DIR_TEST   = '..\/input\/sf-dst-car-price-prediction\/'\ntest = pd.read_csv(DIR_TEST+'test.csv')\nsample_submission = pd.read_csv(DIR_TEST+'sample_submission.csv')","6a460d06":"test.sample(3)","54a2ee38":"test.info()","c48985af":"#for col in test.columns:\n#    if col != 'complectation_dict':\n#        print(f'name of column: {col}','\\n', test[col].value_counts()[:10], '\\n')","b14400f0":"brands = test.brand.value_counts()\nbrand_dict = {brands.index[i]: brands[i] for i in range(len(brands))}\nbrand_dict","b4c9c530":"'''auto_list_long =[] # \u0437\u0434\u0435\u0441\u044c \u0441\u043e\u0431\u0435\u0440\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043f\u0438\u0441\u043a\u043e\u0432(\u044d\u043b-\u0442 - \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f)\nfor brand in ['MERCEDES']:  # \u043c\u0430\u0440\u043a\u0430 \u0430\u0432\u0442\u043e\n    \n    for i in range(1, 1200):     # \u043a\u043e\u043b-\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0441 \u0430\u0432\u0442\u043e.\u0440\u0443   \n        response = requests.get(f'https:\/\/auto.ru\/moskva\/cars\/{brand}\/used\/?output_type=list&page={i}')\n        if response.status_code != 200:\n            raise BaseException(\"response code\" + str(response.status_code))\n        response.encoding = 'utf-8'\n        soup = BeautifulSoup(response.text, 'html.parser')\n        page = soup.find_all('div', class_='ListingItem-module__container')  \n        for k in range(len(page)):     # \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u0430 \u043f\u043e \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\u043c \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\n            auto_html = page[k].find_all('meta')\n            auto_list = []\n            for i in range(len(auto_html)):   # \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\n                auto_list.append((str(auto_html[i])[15:]).split('\"', 1)[0])\n                \n            # \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043b\u0438\u0448\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430    \n            pos_out = {4,11,12,14,15,19}\n            auto_list_short = []\n            for n in range(len(auto_list)):   # \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438\u0437 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\n                if n not in pos_out:\n                    auto_list_short.append(auto_list[n].replace('\\xa0', ' ')) \n        \n            # \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u043e\u0431\u0435\u0433(\u043e\u043d \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445)    \n            all_km = page[k].find('div', class_='ListingItem-module__kmAge')\n            xx = str(all_km)[39:].split('<', 1)[0].replace('\\xa0', ' ')\n            auto_list_short.append(str(xx))    # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u043e\u0431\u0435\u0433\n            auto_list_long.append(auto_list_short)    # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0440-\u0440\u043e\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043f\u0438\u0441\u043a\u043e\u0432\n'''","63f07c6c":"DIR_TRAIN   = '..\/input\/car-price-train\/'\ntrain = pd.read_csv(DIR_TRAIN+'my_csv_export.csv')","035cb6a0":"train.shape","5ba4e69a":"train.sample(3)","4232cfa8":"train.info()","7fabda2a":"# \u041c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 int64 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0438 \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\nnum_f = ['modelDate', 'productionDate', 'numberOfDoors','mileage', 'price']\ntrain['mileage'] = train['mileage'].apply(lambda x: int(x.replace(' ', '').replace('\u043a\u043c', '')))\ntrain.dropna(subset=num_f, inplace=True)\n\nfor col in num_f:\n    train[col] = train[col].astype('int64')","0332e228":"# train \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043d\u0430 6700 \u0441\u0442\u0440\u043e\u043a, \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c - \u0438\u0437-\u0437\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 'price'\ntrain.shape","b9f12b92":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432 train \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'vendor', \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0435\u0441\u0442\u044c \u0432 test\neur = ['BMW', 'VOLKSWAGEN', 'MERCEDES', 'AUDI', 'SKODA', 'VOLVO']\ntrain['vendor'] = train['brand'].apply(lambda x: 'EUROPEAN' if x in eur else 'JAPANESE')","1aa8a8f0":"#  \u041f\u0440\u0438\u0437\u043d\u0430\u043a 'name'\ndisplay(test.name.sample(3), train.name.sample(3)) ","a381b9f2":"#  \u041f\u0440\u0438\u0437\u043d\u0430\u043a 'model_name'\ndisplay(test.model_name.value_counts()[:3], train.model_name.value_counts()[:3]) ","a41b0390":"# \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0432\u0438\u0434 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ntrain['model_name_long'] =  train['model_name'].copy()\ntest['model_name_long'] =  test['model_name'].copy()","fe6adcce":"# \u0412\u044b\u0440\u0435\u0437\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 train \u0438 \u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u043d\u0430 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \ntrain['model_name'] = train['model_name'].apply(lambda x: (x.split(' ')[1]).upper())","7feaf7d4":"# \u0423\u043a\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\ntrain['model_name'] = train['model_name'].apply(lambda x: x.split('-')[0])\ntest['model_name'] = test['model_name'].apply(lambda x: x.split('_')[0])","5a47b643":"# \u0423\u043a\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0441\u044f \u0441 \u0446\u0438\u0444\u0440\u044b( \u044d\u0442\u043e \u043d\u0430\u0434\u043e \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0434\u043b\u044f 'BMW') \nnum_list = ['0','1','2','3','4','5','6','7','8','9']\ntrain['model_name'] = train['model_name'].apply(lambda x: x[0] if x[0] in num_list else x)\ntest['model_name'] = test['model_name'].apply(lambda x: x[0] if x[0] in num_list else x)","f17154a3":"display(np.sort(test[test.brand == 'MERCEDES'].model_name.unique()),\n        np.sort(train[train.brand == 'MERCEDES'].model_name.unique()))","9d908da2":"columns = ['bodyType', 'brand', 'color', 'fuelType', 'modelDate', 'model_name', 'numberOfDoors',\n           'productionDate', 'vehicleConfiguration', 'vehicleTransmission', 'engineDisplacement',\n           'enginePower', 'mileage', 'vendor']\ncars_train = train[columns]\ncars_test = test[columns]","d017a19e":"cars_train['sample'] = 1\ncars_test['sample'] = 0\ncars = cars_train.append(cars_test, ignore_index=True, sort=False)\n\n# \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\ny = train['price']","429aae34":"cars.sample(3)","31a802a1":"cars.info()","f1558f85":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435\nprint(cars['enginePower'].nunique(), cars['engineDisplacement'].nunique())","e7b262c4":"# \u0418\u0437\u0431\u0430\u0432\u043b\u044f\u0435\u043c\u0441\u044f \u043e\u0442 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 'engineDisplacement'(\u0438\u0445 \u0432\u0441\u0435\u0433\u043e 101), \u0437\u0430\u043c\u0435\u043d\u044f\u044f \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\ncars['engineDisplacement'] = cars['engineDisplacement'].apply(lambda x: '2.5 LTR' if x == ' LTR' else x)","2a1b5296":"cars['enginePower'] = cars['enginePower'].apply(lambda x: int(x.split(' ')[0].replace('.', '')))\ncars['engineDisplacement'] = cars['engineDisplacement'].apply(\n                                                    lambda x: int(x.split(' ')[0].replace('.', '')))","ee0947c7":"# \u0421\u043f\u0438\u0441\u043a\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 cars\nnum_f = ['modelDate', 'productionDate', 'mileage', 'enginePower', 'engineDisplacement']\ncat_f = ['bodyType', 'brand', 'color', 'fuelType', 'model_name', 'numberOfDoors', 'vehicleConfiguration',\n         'vehicleTransmission', 'vendor']","eefcc73d":"for i in num_f:\n    plt.figure()\n    sns.distplot(cars[i])\n    plt.title(i)\n    plt.show()","26f40684":"def outliers_iqr(x):\n    ''' found outliers '''\n    quartile_1, quartile_3 = np.percentile(x, [25, 75])\n    iqr = quartile_3 - quartile_1\n    lower_bound = quartile_1 - (iqr * 1.5)\n    upper_bound = quartile_3 + (iqr * 1.5)    \n    return np.where((x > upper_bound) | (x < lower_bound))[0]","7a97f72e":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u043c\u0435\u0436\u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0437\u043c\u0430\u0445\u0443\nfor i in num_f:\n    print(i, len(outliers_iqr(cars[i])))","db63f12b":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ncorrelation = cars[num_f].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","05fbb561":"for col in cat_f:\n    print(col, cars[col].nunique(), '\\n', cars[col].value_counts()[:3], '\\n')","cd5b9bb6":"cars['luxury'] = cars['brand'].apply(lambda x: 1 if x in ['BMW','MERCEDES','LEXUS','INFINITI'] else 0)\ncat_f.append('luxury')","5ae0c44f":"cars['allroad'] = cars['vehicleConfiguration'].apply(lambda x: 1 if x.split('_')[0] == 'ALLROAD' else 0)\ncat_f.append('allroad')","d6d8b14e":"# \u0412\u0435\u0440\u043d\u0435\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a name, \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u0435\u0433\u043e \u0438\u0437 \u0442\u0440\u0435\u0445 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \n#cars['name'] = cars['vehicleTransmission'] +' '+ str(cars['engineDisplacement']) +' ' + str(cars['allroad'])\n#cat_f.append('name')","c925181f":"cars['model_age'] = cars['productionDate'] - cars['modelDate']\ncars['model_age'] = cars['model_age'].apply(lambda x: 0 if x < 0 else x)\ncars['km_pro_year'] = (cars['mileage']\/(2021 - cars['productionDate'])).astype('int64')\nnum_f.append('model_age')\nnum_f.append('km_pro_year')","b1fd031b":"plt.figure()\nsns.distplot(cars['model_age'][cars['model_age'] < 10])\nplt.title('model_age')\nplt.show()","fbb17399":"plt.figure()\nsns.distplot(cars['km_pro_year'][cars['km_pro_year'] < 35000])\nplt.title('km_pro_year')\nplt.show()","fca50cae":"# \u0421\u043d\u043e\u0432\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c heatmap. \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0441\u0438\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439\ncorrelation = cars[num_f].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","b0c9269b":"# \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u043e f_regression (\u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c):\nimp_num = Series(f_regression(cars[cars['sample'] == 1][num_f], y)[0], index = num_f)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","9589448a":"pf = PolynomialFeatures(3)\npoly_features = pf.fit_transform(cars[[ 'productionDate', 'enginePower']])\npoly = pd.DataFrame(poly_features).drop([0,1,2,3,4,6,8], axis = 1)\npoly.columns = ['date_power5', 'date_power7', 'date_power9']\n\nfor col in list(poly.columns):\n    col_max = poly[col].max()    \n    poly[col] = poly[col].apply(lambda x: int(round(x\/col_max*100000, 0)))\n    \ncars = pd.concat([cars, poly], axis=1)\nnum_f = num_f + list(poly.columns)","885bdf3c":"'''# \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0432\u0441\u0435 \u043d\u0435\u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438\npf = PolynomialFeatures(3)\npoly_features = pf.fit_transform(cars[[ 'productionDate', 'enginePower']])\npoly = pd.DataFrame(poly_features).drop([0,1,2], axis = 1)\npoly.columns = ['dp3', 'dp4', 'dp5', 'dp6', 'dp7', 'dp8', 'dp9']\n\nfor col in list(poly.columns):\n    col_max = poly[col].max()    \n    poly[col] = poly[col].apply(lambda x: int(round(x\/col_max*100000, 0)))\n    \ncars = pd.concat([cars, poly], axis=1)\nnum_f = num_f + list(poly.columns)'''","8ecc3f73":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nimp_num = Series(f_regression(cars[cars['sample'] == 1][num_f], y)[0], index = num_f)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","f4006b96":"correlation = cars[num_f].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","9476ef3c":"# \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n#num_f_ln = []\n#for col in num_f:\n#    cars['ln_' + col] = np.log(cars[col] + 1)\n#    num_f_ln.append('ln_' + col)\n#num_f = num_f + num_f_ln","e7c59a07":"#for col in num_f:\n#    cars[col] = cars[col]\/(cars[col].max())","097f129a":"cars.info()","4cb39cf6":"# \u041a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nfor col in cat_f:\n    cars[col] = cars[col].astype('category').cat.codes","ae1648a0":"X_train_test = cars.copy()\nX_train_test.head(3)","1d061fb9":"# \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e train \u0438 test\ntrain = X_train_test.query('sample == 1').drop(['sample'], axis=1)\ntest = X_train_test.query('sample == 0').drop(['sample'], axis=1)","8da4379d":"# \u0414\u0435\u043b\u0438\u043c train \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\nX_train, X_test, y_train, y_test = train_test_split(train, y, test_size=0.2, shuffle=True, random_state=42)","cd723133":"tmp_train = X_train.copy()\ntmp_train['price'] = y_train","aa518b16":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c median \u043f\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c enginePower \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0440\u0430\u0437\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442\npredict = X_test['enginePower'].map(tmp_train.groupby('enginePower')['price'].median())\n\n#\u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0438\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict.values))*100:0.2f}%\")","4a3bea6b":"stopper = 1\/0","06ee1040":"# !\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0440\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 20%!\ny_train = y_train.apply(lambda x: math.log(x))\ny_test = y_test.apply(lambda x: math.log(x))\nX = train.values\ny = y.apply(lambda x: math.log(x)).values\nX_pred = test.values","be241d29":"ITERATIONS = 20000\nLR         = 0.15\nmodel = CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = LR,\n                          depth = 8,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['RMSE']\n                         )\nmodel.fit(X_train, y_train,\n#         cat_features=cat_f,\n         eval_set=(X_test, y_test),\n         verbose_eval=500,\n         use_best_model=True,\n         plot=True\n         )","3fc52188":"predict = model.predict(X_test)\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict))*100:0.4f}%\")","eca1e6ce":"#predict_submission = model.predict(test)\n#sample_submission['price'] = predict_submission\n#sample_submission.to_csv('submission.csv', index=False)\n#sample_submission.head(3)","3ca6b04b":"def cat_model(y_train, X_train, X_test, y_test):\n    model = CatBoostRegressor(iterations = 20000,\n                              learning_rate = 0.15,\n                              eval_metric='MAPE',\n                              custom_metric=['RMSE','MAPE'],\n                              random_seed = RANDOM_SEED,)\n    model.fit(X_train, y_train,\n              #cat_features=cat_features_ids,\n              eval_set=(X_test, y_test),\n              verbose=False,\n              use_best_model=True,\n              plot=False)\n    \n    return(model)","745cc923":"N_FOLDS = 5\nsubmissions = pd.DataFrame(0,columns=[\"sub_1\"], index=sample_submission.index) # \u043a\u0443\u0434\u0430 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u044b\nscore_ls = []\nsplits = list(KFold(n_splits=N_FOLDS, shuffle=True, random_state=RANDOM_SEED).split(X,y))\n\nfor idx, (train_idx, test_idx) in tqdm(enumerate(splits), total=N_FOLDS,):\n    # use the indexes to extract the folds in the train and validation data\n    Xf_train, yf_train, Xf_test, yf_test = X[train_idx], y[train_idx], X[test_idx], y[test_idx]\n    # model for this fold\n    model = cat_model(yf_train, Xf_train, Xf_test, yf_test)\n    # score model on test\n    test_predict = model.predict(Xf_test)\n    test_score = mape(yf_test, test_predict)\n    score_ls.append(test_score)\n    print(f\"{idx+1} Fold Test MAPE: {mape(yf_test, test_predict)*100:0.4f}%\")\n    # submissions\n    submissions[f'sub_{idx+1}'] = model.predict(X_pred)\n    model.save_model(f'catboost_fold_{idx+1}.model')\n    \nprint(f'Mean Score: {np.mean(score_ls)*100:0.4f}%')\nprint(f'Std Score: {np.std(score_ls)*100:0.4f}%')\nprint(f'Max Score: {np.max(score_ls)*100:0.4f}%')\nprint(f'Min Score: {np.min(score_ls)*100:0.4f}%')","1ff19b98":"submissions['blend'] = (submissions.sum(axis=1))\/len(submissions.columns)\nsample_submission['price'] = np.round(submissions['blend'].apply(lambda x: math.exp(x)).values, 0)\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","796ab76e":"corr_f = ['modelDate', 'date_power5', 'date_power7']\nfor col in corr_f:\n    tmp_train = train.drop([col], axis=1).copy()\n    X_train1, X_test1, y_train1, y_test1 = train_test_split(tmp_train, y,\n                                                        test_size=0.2, shuffle=True, random_state=42)\n    model = cat_model(y_train1, X_train1, X_test1, y_test1)\n    test_predict = model.predict(X_test1)\n    print(f\"{col} Test MAPE: {mape(y_test1, test_predict)*100:0.3f}%\")","2fb6a4e0":"# A: \u043f\u0430\u0440-\u0440\u044b \u043b\u0435\u0441\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\nrf = RandomForestRegressor(random_state=42)\n\nrf.fit(X_train, y_train)\ntest_predict = rf.predict(X_test)\nprint(f\"Test MAPE: {mape(y_test, test_predict)*100:0.3f}%\")","52d8caf9":"n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}","3876b892":"# \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0430\u0440-\u0440\u044b \u043b\u0435\u0441\u0430 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0438\u0437-\u0437\u0430 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \n'''rf = RandomForestRegressor()\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, \n                               n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\nrf_random.fit(X_train, y_train)\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0442 \u043a\u0430\u043a \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435:\nrf_random.best_params_'''","356c7ce0":"# B: \u043f\u0430\u0440-\u0440\u044b \u043b\u0435\u0441\u0430 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435\nrf = RandomForestRegressor(\n n_estimators=300, \n min_samples_split=2,\n min_samples_leaf=1,\n max_features=10,\n max_depth=77,\n bootstrap=True, \n random_state=42)\n\nrf.fit(X_train, y_train)\ntest_predict = rf.predict(X_test)\nprint(f\"Test MAPE: {mape(y_test, test_predict)*100:0.4f}%\")","41a8b737":"# \u041b\u0435\u0441 \u0441 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439\ndef rf_model(y_train, X_train, X_test, y_test):\n    model = RandomForestRegressor(\n                 n_estimators=1000,\n                 min_samples_split=2,\n                 min_samples_leaf=1,\n                 max_features=7,\n                 max_depth=77,\n                 bootstrap=True, \n                 random_state=42)\n    model.fit(X_train, y_train)\n    return(model)\nN_FOLDS = 5\nsubmissions = pd.DataFrame(0,columns=[\"sub_1\"], index=sample_submission.index) # \u043a\u0443\u0434\u0430 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u044b\nscore_ls = []\nsplits = list(KFold(n_splits=N_FOLDS, shuffle=True, random_state=RANDOM_SEED).split(X,y))\n\nfor idx, (train_idx, test_idx) in tqdm(enumerate(splits), total=N_FOLDS,):\n    # use the indexes to extract the folds in the train and validation data\n    Xf_train, yf_train, Xf_test, yf_test = X[train_idx], y[train_idx], X[test_idx], y[test_idx]\n    # model for this fold\n    model = rf_model(yf_train, Xf_train, Xf_test, yf_test)\n    # score model on test\n    test_predict = model.predict(Xf_test)\n    test_score = mape(yf_test, test_predict)\n    score_ls.append(test_score)\n    print(f\"{idx+1} Fold Test MAPE: {mape(yf_test, test_predict)*100:0.4f}%\")\n    # submissions\n    submissions[f'sub_{idx+1}'] = model.predict(X_pred)\n#    model.save_model(f'catboost_fold_{idx+1}.model')\n    \nprint(f'Mean Score: {np.mean(score_ls)*100:0.4f}%')\nprint(f'Std Score: {np.std(score_ls)*100:0.4f}%')\nprint(f'Max Score: {np.max(score_ls)*100:0.4f}%')\nprint(f'Min Score: {np.min(score_ls)*100:0.4f}%')","97eab011":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430\ntree = DecisionTreeRegressor(max_features=int(X_train.shape[1]\/3), max_depth=77)\ntree.fit(X_train, y_train)\ntest_predict = tree.predict(X_test)\nprint(f\"DecisionTreeRegressor Test MAPE: {mape(y_test, test_predict)*100:0.3f}%\")","539d76bb":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0435\u0440\u043d\u0435\u043c \u0434\u0435\u0440\u0435\u0432\u044c\u044f \u0432 BaggingRegressor\nbagging_trees = BaggingRegressor(tree)\nbagging_trees.fit(X_train, y_train)\ntest_predict = bagging_trees.predict(X_test)\nprint(f\"BaggingRegressor(DecisionTrees) Test MAPE: {mape(y_test, test_predict)*100:0.3f}%\")","b48005b2":"# \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0441\u0440\u0430\u0437\u0443 \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0445 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430\nnum_train = train.drop(cat_f, axis=1)\nscaler = StandardScaler()\nnum_train = pd.DataFrame(data=scaler.fit_transform(num_train), columns=num_train.columns)\nXn_train, Xn_test, yn_train, yn_test = train_test_split(num_train, y,\n                                                    test_size=0.2, shuffle=True, random_state=42)","b766bbec":"#gb = GradientBoostingRegressor(max_depth=7,n_estimators=1500,learning_rate=0.1,random_state=42)#\n#gb.fit(Xn_train, yn_train)\n#test_predict = gb.predict(Xn_test)\n#print(f\"GradientBoostingRegressor Test MAPE: {mape(yn_test, test_predict)*100:0.3f}%\")","bc1ef043":"#gb = GradientBoostingRegressor(max_depth=7,n_estimators=1500,learning_rate=0.1,random_state=42)\n#gb.fit(X_train, y_train)\n#test_predict = gb.predict(X_test)\n#print(f\"GradientBoostingRegressor Test MAPE: {mape(y_test, test_predict)*100:0.3f}%\")","4b81b373":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=42)","e64d1698":"cv = KFold(n_splits=5, shuffle=True, random_state=42)\n\ndef compute_metric(regr, X_train=X_train, y_train=y_train, X_test=X_test, y_test=y_test):\n    regr.fit(X_train, y_train)\n    y_test_pred = regr.predict(X_test)\n    return np.round(mape(y_test, y_test_pred)*100, 4)","38ee85b4":"def compute_meta_feature2(regr, X_train, X_test, y_train, cv, X_pred):    \n    \n    X_meta_train = np.zeros_like(y_train, dtype=np.float32)    \n\n    splits = cv.split(X_train)\n    for train_fold_index, predict_fold_index in splits:\n        X_fold_train, X_fold_predict = X_train[train_fold_index], X_train[predict_fold_index]\n        y_fold_train = y_train[train_fold_index]\n        \n        folded_regr = clone(regr)\n        folded_regr.fit(X_fold_train, y_fold_train)\n        \n        X_meta_train[predict_fold_index] = folded_regr.predict(X_fold_predict)\n    \n    meta_regr = clone(regr)\n    meta_regr.fit(X_train, y_train)\n    \n    X_meta_test = meta_regr.predict(X_test)\n    X_meta_pred = meta_regr.predict(X_pred)\n    \n    return X_meta_train, X_meta_test, X_meta_pred","ec67eee7":"def generate_meta_features2(regr_s, X_train, X_test, y_train, cv, X_pred):\n   \n    features = [compute_meta_feature2(regr, X_train, X_test, y_train, cv, X_pred) for regr in tqdm(regr_s)]    \n    stacked_features_train = np.vstack([features_train for features_train, features_test, features_pred in features]).T\n    stacked_features_test = np.vstack([features_test for features_train, features_test, features_pred in features]).T\n    stacked_features_pred = np.vstack([features_pred for features_train, features_test, features_pred in features]).T\n    return stacked_features_train, stacked_features_test, stacked_features_pred","7210d055":"stacked_features_train, stacked_features_test, stacked_features_pred = generate_meta_features2([\n    RandomForestRegressor(n_estimators=300, min_samples_split=2, min_samples_leaf=1, \n                          max_features=7,max_depth=77, bootstrap=True, random_state=42),\n    AdaBoostRegressor(random_state=42),\n    ExtraTreesRegressor(random_state=42),\n    RandomForestRegressor(random_state=42)], X_train, X_test, y_train, cv, X_pred)\n\nregr = RandomForestRegressor(\n n_estimators=300,\n min_samples_split=2,\n min_samples_leaf=1,\n max_features=7,\n max_depth=77,\n bootstrap=True, \n random_state=42)\n\nprint(f'Stacking MAPE = {compute_metric(regr, X_train=stacked_features_train, y_train=y_train, X_test=stacked_features_test, y_test=y_test)}%')","e7d06624":"tree = DecisionTreeRegressor(max_features=int(X_train.shape[1]\/3), max_depth=77, random_state=42)","335f8073":"# \u0423\u0441\u0438\u043b\u0438\u043c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u044b \u0432 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0435\nstacked_features_train, stacked_features_test, stacked_features_pred = generate_meta_features2([\n    RandomForestRegressor(n_estimators=1000, min_samples_split=2, min_samples_leaf=1, \n                          max_features=10,max_depth=77, bootstrap=True, random_state=42),\n    CatBoostRegressor(iterations = 10000,\n                          learning_rate = 0.25,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE']\n                         ),\n#    BaggingRegressor(tree),\n    RandomForestRegressor(n_estimators=300, min_samples_split=2, min_samples_leaf=1, \n                          max_features=10,max_depth=77, bootstrap=True, random_state=42)], X_train, X_test, y_train, cv, X_pred)\n\nregr = CatBoostRegressor(iterations = 10000,\n                          learning_rate = 0.25,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE']\n                         )\n#print(f'Stacking MAPE = {compute_metric(regr, X_train=stacked_features_train, y_train=y_train, X_test=stacked_features_test, y_test=y_test)}%')","03b480c9":"print(f'Stacking MAPE = {compute_metric(regr, X_train=stacked_features_train, y_train=y_train, X_test=stacked_features_test, y_test=y_test)}%')","a457e0fd":"#predict_submission = regr.predict(stacked_features_pred)\n#sample_submission['price'] = np.round(predict_submission.apply(lambda x: math.exp(x)).values, 0)\n#sample_submission.to_csv('submission.csv', index=False)\n#sample_submission.head(3)","cd97d264":"#predict_submission = regr.predict(stacked_features_pred)#\n#sample_submission['price'] = predict_submission\n#sample_submission.to_csv('submission.csv', index=False)\n#sample_submission.head(3)","dba320d4":"import lightgbm as lgb\nfrom lightgbm import LGBMRegressor","46045d8c":"X_train, X_valid, y_train, y_valid = train_test_split(\n    X, y, test_size=0.2, shuffle=True, random_state=42)\nfeature_names = train.columns.tolist()\n\n# LightGBM dataset formatting \nlgtrain = lgb.Dataset(X_train, y_train, categorical_feature = cat_f, feature_name=feature_names)\nlgvalid = lgb.Dataset(X_valid, y_valid, categorical_feature = cat_f, feature_name=feature_names)","7c8476d5":"'''params = {\n    'objective' : 'regression',\n    'metric' : 'mape',\n    'num_leaves' : 255,\n    'max_depth': 16,\n    'learning_rate' : 0.01,\n    'feature_fraction' : 0.6,\n    'verbosity' : -1\n}\n# Cross-Val\nmodel_cv = lgb.cv(params, lgtrain_X, num_boost_round=20000, metrics='mape', \n                  stratified=False, verbose_eval=500, nfold=5)'''","2580aaaf":"params = {\n    'objective' : 'regression',\n    'metric' : 'mape',\n    'num_leaves' : 2000,\n    'max_depth': 35,\n    'learning_rate' : 0.007,\n    'feature_fraction' : 0.6,\n    'verbosity' : -1\n}\nlgb_regr = lgb.train(\n    params,\n    lgtrain,\n    num_boost_round=20000,\n    valid_sets=[lgtrain, lgvalid],\n    valid_names=['train', 'valid'],\n    early_stopping_rounds=500,\n    verbose_eval=1000\n)\n\n#print(f\"LightGBM Test MAPE: {mape(y_valid, lgb_clf.predict(X_valid))*100:0.4f}%\")","84b9cfb8":"# LightGBM \u0441 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439\nfeature_names = train.columns.tolist()\nparams = {\n    'objective' : 'regression',\n    'metric' : 'mape',\n    'num_leaves' : 2000,\n    'max_depth': 12,\n    'learning_rate' : 0.01,\n    'feature_fraction' : 0.6,\n    'verbosity' : -1\n}\n\ndef LightGBM_model(y_train, X_train, X_test, y_test):\n    # LightGBM dataset formatting \n    lgtrain = lgb.Dataset(X_train, y_train, \n                          categorical_feature = cat_f, feature_name=feature_names)\n    lgvalid = lgb.Dataset(X_test, y_test, \n                          categorical_feature = cat_f, feature_name=feature_names)\n\n    model = lgb.train(\n    params,\n    lgtrain,\n    num_boost_round=20000,\n    valid_sets=[lgtrain, lgvalid],\n    valid_names=['train', 'valid'],\n    early_stopping_rounds=500,\n    verbose_eval=2000)\n    \n#    model.fit(X_train, y_train)\n    return(model)\n\n\nN_FOLDS = 5\nsubmissions = pd.DataFrame(0,columns=[\"sub_1\"], index=sample_submission.index) # \u043a\u0443\u0434\u0430 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u044b\nscore_ls = []\nsplits = list(KFold(n_splits=N_FOLDS, shuffle=True, random_state=RANDOM_SEED).split(X,y))\n\nfor idx, (train_idx, test_idx) in tqdm(enumerate(splits), total=N_FOLDS,):\n    # use the indexes to extract the folds in the train and validation data\n    Xf_train, yf_train, Xf_test, yf_test = X[train_idx], y[train_idx], X[test_idx], y[test_idx]\n    # model for this fold\n    model = LightGBM_model(yf_train, Xf_train, Xf_test, yf_test)\n    # score model on test\n#    test_predict = model.predict(Xf_test)\n#    test_score = mape(yf_test, test_predict)\n#    score_ls.append(test_score)\n#    print(f\"{idx+1} Fold Test MAPE: {mape(yf_test, test_predict)*100:0.4f}%\")\n    # submissions\n    submissions[f'sub_{idx+1}'] = model.predict(X_pred, num_iteration=model.best_iteration)\n#    model.save_model(f'catboost_fold_{idx+1}.model')\n    \n#print(f'Mean Score: {np.mean(score_ls)*100:0.6f}%')\n#print(f'Std Score: {np.std(score_ls)*100:0.6f}%')\n#print(f'Max Score: {np.max(score_ls)*100:0.6f}%')\n#print(f'Min Score: {np.min(score_ls)*100:0.6f}%')","10a72f89":"submissions['blend'] = (submissions.sum(axis=1))\/len(submissions.columns)\nsample_submission['price'] = np.round(submissions['blend'].apply(lambda x: math.exp(x)).values, 0)\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","d5f85c5c":"import lightgbm as lgb\nfrom lightgbm import LGBMRegressor","07aa7e8b":"LGBMR = LGBMRegressor(objective='regression', max_depth=12, num_leaves=1000,\n                      learning_rate=0.02, n_estimators=22000, metric='mape',                      \n                      feature_fraction=0.6,\n#                      min_data_in_leaf=50, reg_lambda=0.25\n                     )    ","e78cd9e2":"LGBMR.fit(X_train, y_train)\ny_pred = LGBMR.predict(X_test)\nprint(f\"LightGBM Test MAPE: {mape(y_test, y_pred)*100:0.6f}%\")","3615ad93":"predict_submission = LGBMR.predict(X_pred)\nsample_submission['price'] = np.round((Series(predict_submission)).apply(lambda x: math.exp(x)).values, 0)\n#sample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","fa0cbfd5":"# LGBMR \u0441 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439\ndef LGBMR_model(y_train, X_train, X_test, y_test):\n    \n    model = LGBMRegressor(objective='regression', max_depth=12, num_leaves=2000,\n                      learning_rate=0.025, n_estimators=28000, feature_fraction=0.6)    \n    model.fit(X_train, y_train)\n    return(model)\n\nN_FOLDS = 5\nsubmissions = pd.DataFrame(0,columns=[\"sub_1\"], index=sample_submission.index) # \u043a\u0443\u0434\u0430 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u044b\nscore_ls = []\nsplits = list(KFold(n_splits=N_FOLDS, shuffle=True, random_state=RANDOM_SEED).split(X,y))\n\nfor idx, (train_idx, test_idx) in tqdm(enumerate(splits), total=N_FOLDS,):\n    # use the indexes to extract the folds in the train and validation data\n    Xf_train, yf_train, Xf_test, yf_test = X[train_idx], y[train_idx], X[test_idx], y[test_idx]\n    # model for this fold\n    model = LGBMR_model(yf_train, Xf_train, Xf_test, yf_test)\n    # score model on test\n    test_predict = model.predict(Xf_test)\n    test_score = mape(yf_test, test_predict)\n    score_ls.append(test_score)\n    print(f\"{idx+1} Fold Test MAPE: {mape(yf_test, test_predict)*100:0.4f}%\")\n    # submissions\n    submissions[f'sub_{idx+1}'] = model.predict(X_pred)\n#    model.save_model(f'catboost_fold_{idx+1}.model')\n    \nprint(f'Mean Score: {np.mean(score_ls)*100:0.6f}%')\nprint(f'Std Score: {np.std(score_ls)*100:0.6f}%')\nprint(f'Max Score: {np.max(score_ls)*100:0.6f}%')\nprint(f'Min Score: {np.min(score_ls)*100:0.6f}%')","244cd4b2":"submissions['blend'] = (submissions.sum(axis=1))\/len(submissions.columns)\nsample_submission['price'] = np.round(submissions['blend'].apply(lambda x: math.exp(x)).values, 0)\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","c43cbb77":"#sample_submission['price'] = np.round((Series(predict_submission)).apply(lambda x: math.exp(x)).values, 0)\n#sample_submission.to_csv('submission.csv', index=False)\n#sample_submission.head(3)","0c114de6":"# Model 4. Bagging.","eaff05ca":"\u0412\u0438\u0434\u0438\u043c 32 \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \u0438\u0437 \u043d\u0438\u0445 \u0442\u043e\u043b\u044c\u043a\u043e 6 - \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435.  \n\u0422.\u0435. \u0443 \u043d\u0430\u0441 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442.  \n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c, \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 train \u0438\u0437 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043d\u0430\u043f\u0430\u0440\u0441\u0438\u043c.","ee74f28d":"Mean MAPE: 2.019%","a3f4d9a2":"\u0418\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445, \u043a\u0430\u043a \u0438 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0432\u044b\u0448\u0435, \u0441\u0434\u0435\u043b\u0430\u0435\u043c:  \n    'model_age' - \u043d\u043e\u0432\u0438\u0437\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430  \n    'km_pro_year' - c\u0442\u0435\u043f\u0435\u043d\u044c \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0438(\u043f\u0440\u043e\u0431\u0435\u0433\/\u0433\u043e\u0434)","52a9cb8b":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0431\u043b\u0438\u0437\u043a\u0438 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c, \u0441\u043f\u0440\u0430\u0432\u0430 \u0438\u043b\u0438 \u0441\u043b\u0435\u0432\u0430 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0434\u043b\u0438\u043d\u043d\u044b\u0435 \u0445\u0432\u043e\u0441\u0442\u044b.  \n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b","d4968572":"# Model 3. Random Forest.","90a90b20":"\u041c\u044b \u0432\u0438\u0434\u0438\u043c 14 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432('sample' \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u043c), \u0438\u0437 \u043d\u0438\u0445 3 - \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 11 - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445.  \n\u0421\u0440\u0430\u0437\u0443 \u0437\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0434\u0432\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 - 'enginePower' \u0438 'engineDisplacement' \u043f\u043e \u0441\u0443\u0442\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0432\u043e\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430\u0445. \u041f\u043e\u043d\u044f\u0442\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0442\u043e, \u0447\u0442\u043e \u0446\u0435\u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0440\u0430\u0441\u0442\u0435\u0442 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u043e\u0441\u0442\u0430 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u0435\u0433\u043e \u043e\u0431\u044a\u0435\u043c\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0436\u0435 \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438.","535945be":"\u041f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0431\u043e\u0440\u0430 \u0438\u0437 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432 \u043d\u0430 5\u0442\u0438 \u0444\u043e\u043b\u0434\u0430\u0445 \u043a\u0430\u0436\u0434\u044b\u0439 \u0432 \u043c\u0435\u0442\u0430-\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440 ","96879f55":"\u0411\u0435\u0437 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0445\u0443\u0436\u0435(1.905%, 1.853%, 1.865%), \u0447\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u044b\u0439(1.840%). \u041d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0445.","1a4cd14d":"# \u0427\u0430\u0441\u0442\u044c 1. \u041f\u0430\u0440\u0441\u0438\u043d\u0433","8d79fb77":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0438\u0445 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u043e\u0442\u0441\u0435\u043a\u0430\u044f \u0434\u043b\u044f \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0441\u0442\u0438 \u0445\u0432\u043e\u0441\u0442\u044b \u0441\u043f\u0440\u0430\u0432\u0430","77f4f39e":"! RandomForestRegressor \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u043e\u043a\u0430\u0437\u0430\u043b MAPE = 1.756% -  \u043f\u043e\u043a\u0430 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442  \n  \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e RandomizedSearchCV","973ffcf6":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432 train \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0439, \u043d\u043e \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438,  \n\u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0435\u0433\u043e","067d217c":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b\u0441\u044f \u043d\u0435 \u0438\u0437 Kaggle.  \n\u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u0431\u0440\u0435\u043d\u0434\u0443 \u043e\u043d \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u043b\u0441\u044f \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c.  \n\u0417\u0430\u0442\u0435\u043c 12 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u043e\u0432 \u0431\u044b\u043b\u0438 \u0441\u043a\u043b\u0435\u0435\u043d\u044b \u0432 \u043e\u0434\u0438\u043d - \u0438\u0441\u043a\u043e\u043c\u044b\u0439 train.  \n\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0435\u0433\u043e \u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0438\u0437 test ","9ae0580b":"# \u0427\u0430\u0441\u0442\u044c 4. Feature Engineering","892f732a":"# Model 1. \"\u041d\u0430\u0438\u0432\u043d\u0430\u044f\"  \n\u042d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0446\u0435\u043d\u0443 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f (enginePower). \nC \u043d\u0435\u0439 \u0431\u0443\u0434\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.","f636f105":"\u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044f test \u0438 train, \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 'name' \u0438 'model_name' \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0432\u0441\u0435 \u043e\u043a","55fadd23":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442","f62a27d8":"\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b  ","bca85116":"# LightGBM","176dc729":"# \u0418\u0442\u043e\u0433\u0438.  \n\n\u0421 \u0430\u0432\u0442\u043e.\u0440\u0443 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e 280 \u0442\u044b\u0441 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439  \n\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430  \n\u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u044b \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043e\u0446\u0435\u043d\u043a\u0430 \u0438\u0445 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u0438  \n\u0421\u043e\u0437\u0434\u0430\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u043d \u043d\u0430\u0431\u043e\u0440 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\u043c\u0438  \n\u041f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e 5 \u0442\u0438\u043f\u043e\u0432 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0441 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u0430\u043c\u0438 \u0438 1 '\u043d\u0430\u0438\u0432\u043d\u044b\u0439' \u0434\u043b\u044f \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0441\u0442\u0438  \n\u041b\u0443\u0447\u0448\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 MAPE \u043f\u043e\u043a\u0430\u0437\u0430\u043b RandomForestRegressor  \n\u041b\u0443\u0447\u0448\u0438\u0439 submission \u0432\u044b\u0434\u0430\u043b LightGBMRegressor \u0441 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439","0bcf251c":"\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430","63e48975":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0432\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f:  \n'allroad' - \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0440\u0430\u0436\u0430\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0430  \n'luxury' - \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0440\u0430\u0436\u0430\u0442\u044c \u043f\u0440\u0435\u043c\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u0440\u0435\u043d\u0434\u0430","8610ba38":"\u0418\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 CatBoost \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439  learning_rate=0.25 \u043f\u0440\u0438 \u043a\u043e\u043b-\u0432\u0435 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 10000.  \nbagging_temperature \u0438 random_strength \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u043b\u0438.  \n\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432(\u043d\u0435\u043e\u0446\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445) \u0432 \u043f\u0430\u0440-\u0440 cat_features \u0442\u043e\u0436\u0435 \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 ","a9acca9a":"# \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441\u0430\u0439\u0442\u0430 \u0430\u0432\u0442\u043e.\u0440\u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:  \n \u0431\u0435\u0440\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440 \u043f\u043e \u041c\u043e\u0441\u043a\u0432\u0435 \u043b\u0435\u0433\u043a\u043e\u0432\u044b\u0435 \u0441 \u043f\u0440\u043e\u0431\u0435\u0433\u043e\u043c  \n \u0431\u0435\u0440\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440 \u043f\u043e \u043c\u0430\u0440\u043a\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f brand_dict, \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u0430\u0440\u043a\u0438 \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0435\u043c  \n \u0442.\u043a. \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0441\u0430\u0439\u0442\u0430 \u0430\u0432\u0442\u043e.\u0440\u0443 38 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f, \u0442\u043e \u043f\u0430\u0440\u0441\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e brand_dict.keys10\/38 \u0441\u0442\u0440\u0430\u043d\u0438\u0446,   \u0442.\u0435. \u0432 10 \u0440\u0430\u0437 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439, \u0447\u0435\u043c \u0432 test \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438(\u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0434\u0435\u0442\u0441\u044f \u0441\u0442\u043e\u043b\u044c\u043a\u043e)  \n \u043d\u0435 \u0437\u0430\u0445\u043e\u0434\u0438\u043c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439, \u0442.\u043a. \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e \u043e \u0441\u043f\u0435\u0446\u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0438\u0438 \u0438 \u0442\u0434,   \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u043c\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 ","b9ab103e":"# 5. Label Encoding","ab2ee474":"\u0417\u0444\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 'model_name' \u0438  'vehicleConfiguration' \u0438\u043c\u0435\u044e\u0442 \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439(438 \u0438 650)   \n\u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 7 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0441\u043f\u0435\u043a\u0442\u0440\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.  \n\u0417\u0430\u0439\u043c\u0435\u043c\u0441\u044f \u043f\u043e\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \u0430\u043d\u0430\u043b\u0438\u0437 \u0441\u0442\u0430\u0440\u044b\u0445 \u0438 \u043d\u043e\u0432\u044b\u0445 \u0432\u043c\u0435\u0441\u0442\u0435. ","b978c690":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 'productionDate' \u0438 'enginePower' \u0438 \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0445","becc5c2d":"# Model 5. GradientBoosting.","04c82193":"\u041f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043d\u043e  \n\u043e\u043d\u0438 \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b \u0441\u043e \u0441\u0432\u043e\u0438\u043c\u0438 \u043f\u0440\u0435\u0434\u0448\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430\u043c\u0438.\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043d\u0438\u043c\u0438 \u0438 \u0431\u0435\u0437 \u043d\u0438\u0445","73124dc9":"# \u0427\u0430\u0441\u0442\u044c 3. EDA.","49ebf1d1":"\u041f\u043e \u043c\u0435\u0436\u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0437\u043c\u0430\u0445\u0443 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e. \u0418\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u0432\u0432\u0435\u0441\u0442\u0438 \u044d\u043c\u043f\u0438\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0441\u0435\u0447\u044c \u0434\u0430\u043b\u0435\u043a\u0438\u0435 \u0445\u0432\u043e\u0441\u0442\u044b \u0432 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0434\u043d\u0430\u043a\u043e \u044d\u0442\u043e \u0443\u0445\u0443\u0434\u0448\u0438\u043b\u043e \u043e\u0446\u0435\u043d\u043a\u0443 \u0438 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c.","bfe7ad1e":"\u0414\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043a \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0443 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c brand_dict, \u0433\u0434\u0435 \u043a\u043b\u044e\u0447\u0438 - \u043c\u0430\u0440\u043a\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - \u0438\u0445 \u043a\u043e\u043b-\u0432\u0430 \u0432 test:","3c6c2ee8":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'name' - \u044d\u0442\u043e \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:  \n'name' = 'engineDisplacement' + 'vehicleTransmission' + bool(Allroad) \u0438\u0437 'vehicleConfiguration'  \n\u041f\u043e\u043d\u044f\u0442\u043d\u043e, \u0447\u0442\u043e \u044d\u0442\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438 \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0442\u0443\u0442 \u043d\u0435 \u0438\u0433\u0440\u0430\u0435\u0442 \u0440\u043e\u043b\u0438, \u043d\u043e \u0443\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0434\u043e\u043b\u0433\u043e, \u0438 \u044d\u0442\u043e \u044f\u0432\u043d\u043e \u043d\u0435 \u0441\u0430\u043c\u044b\u0439 \u0432\u0430\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0442.\u043a. \u0435\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043d\u0435 \u0442\u0435\u0440\u044f\u044e\u0442\u0441\u044f.  \n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0435\u0433\u043e \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442.  \n'Allroad' \u043a\u0430\u043a \u043e\u0441\u043e\u0431\u043e \u0446\u0435\u043d\u043d\u0443\u044e \u043e\u043f\u0446\u0438\u044e \u043f\u043e\u0437\u0436\u0435 \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043c \u0432 \u043d\u043e\u0432\u044b\u0439 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","29f01bea":"# Model 6. Stacking.","586ed240":"MAPE = 1.840%","6db0415e":"\u0418\u0442\u043e\u0433\u0438  \n \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 EDA \u0438 Feature Engineering \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b:  \n  2 \u043d\u043e\u0432\u044b\u0445 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430  \n  5 \u043d\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445, 3 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 - \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435  \n  2 \u043d\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445, \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445  \n  \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u043b\u0438\u0441\u044c  \n  \u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 10 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 11 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432  \n  \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u044b \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438  \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0432 \u0445\u043e\u0434\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439","0b7f5236":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0434\u0430\u0441\u0442 \u0441\u0442\u0435\u043a\u0438\u043d\u0433 \u0441 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u0444\u043e\u043b\u0434\u044b.  \n\u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430  \n","83a931a4":"\u0421\u0442\u0435\u043a\u0438\u043d\u0433 \u0434\u0430\u0435\u0442 MAPE = 1.654%.  \n\u041f\u0440\u0438 submission \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0430 \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0438\u0437\u043e\u043a \u043a \u043b\u0443\u0447\u0448\u0435\u043c\u0443(CatBoost+CV): 12.49071","4ee8e325":"# 3.2 \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","f3efdba1":"\u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:  \n  +0.97 \u043c\u0435\u0436\u0434\u0443 \u0433\u043e\u0434\u043e\u043c \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0438 \u0433\u043e\u0434\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u0438, \u0432\u0438\u0434\u0438\u043c\u043e, \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u043e\u0434\u0438\u043d \u0438\u0437 \u044d\u0442\u0438\u0445  \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443\u0431\u0440\u0430\u0442\u044c \u0438\u043b\u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 \u0438\u0445 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c  \n  +0.84 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u043e\u0431\u044a\u0435\u043c\u043e\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f  \n  -0.79 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0431\u0435\u0433\u043e\u043c \u0438 \u0433\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430, \u0437\u0434\u0435\u0441\u044c \u0442\u043e\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432\u0440\u043e\u0434\u0435 \u043f\u0440\u043e\u0431\u0435\u0433\/\u0432\u043e\u0437\u0440\u0430\u0441\u0442","6e8b0871":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0441 5 \u0444\u043e\u043b\u0434\u0430\u043c\u0438","010834ca":"# LGBMRegressor","2fd69a91":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u0445\u043e\u0440\u043e\u0448\u0435\u0435. \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 train  \u0438 test \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.","07b1d292":" \u0421\u0442\u0430\u0432\u0438\u043c \u043c\u0435\u0442\u043a\u0438 'sample'= 1 or 0 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u0435\u043d\u0438\u044f train \u0438 test \u0438 \u0441\u043a\u043b\u0435\u0438\u0432\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b.  \n \u041d\u0430\u0437\u043e\u0432\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 cars, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432(EDA)","77ebea97":"# \u0427\u0430\u0441\u0442\u044c 2. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.","30e8f4c7":"# Submission","73165a12":"# 3.1 \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","fd763337":"\u0412\u0438\u0434\u0438\u043c 14 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043b\u044e\u0441 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f 'price'  \n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 test \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b","be081d55":"Bagging \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u0430 \u0438 \u0434\u0430\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u043d\u0435\u043f\u043b\u043e\u0445\u043e\u0439 MAPE = 1.757%","fb0c3f6c":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u0442\u0430\u043a\u0436\u0435 \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.  \nGradientBoosting \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 MAPE = 1.865% \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0438 2.354% \u0431\u0435\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445.  \n\u041d\u0430 \u043f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440-\u0440\u043e\u0432 \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442. \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432.","da970382":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0442\u0435\u043f\u0435\u0440\u044c, \u043a\u0430\u043a \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438, \u043f\u043e\u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 MAPE.","156f4c3c":"# CatBoost + CV","9342aced":"CatBoost \u0441 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 \u0434\u0430\u043b \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0438 submission: 12.05451","01542f86":"# Model 2. CatBoost","278188a9":"MAPE = 1.647 - \u0435\u0449\u0435 \u043b\u0443\u0447\u0448\u0435  \nRandomForest \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442 \u0443  CatBoost \u043f\u043e MAPE, \u043d\u043e \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0438 submission"}}