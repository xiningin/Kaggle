{"cell_type":{"80bcb58f":"code","7f9c9532":"code","ed61441b":"code","9b21a520":"code","f8133df5":"code","c7f24331":"code","cdac3f2d":"code","12320856":"code","49e59113":"code","ecb2d2a1":"code","d14d12c5":"code","bbe56ef5":"code","e111b523":"code","33bb2276":"code","799663a7":"code","6c403b8c":"code","a0b93bd6":"code","048b789d":"code","a0569f26":"code","e1c3dc53":"code","fd466b7b":"code","bd3e5dac":"code","961c2d5f":"code","d572ffa0":"code","8b479cbb":"code","8d7de5d3":"code","ef94cc65":"code","f0183432":"code","945ea6b3":"markdown","7644016e":"markdown","a92367d8":"markdown","2becb908":"markdown","e2292a2c":"markdown","dea458dc":"markdown","cec66263":"markdown","a22abff2":"markdown","b4ed01e7":"markdown","73925895":"markdown","016c1cd0":"markdown","a6203654":"markdown"},"source":{"80bcb58f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f9c9532":"train_path = '\/kaggle\/input\/digit-recognizer\/train.csv'\ntest_path = '\/kaggle\/input\/digit-recognizer\/test.csv'","ed61441b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import svm\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier","9b21a520":"dataset = pd.read_csv(train_path)\nX = dataset.drop([\"label\"], axis= 1).values\nY = dataset[[\"label\"]].values","f8133df5":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20)","c7f24331":"X_test_visualize = X_train.reshape(33600, 28, 28)\nplt.figure(figsize=[15,10])\nfor i in range(10):\n  plt.subplot(2, 5, i+1)\n  plt.imshow(X_test_visualize[i])","cdac3f2d":"model = svm.SVC()\nmodel.fit(X_train, Y_train)","12320856":"Y_predicted = model.predict(X_test)\nprint(accuracy_score(Y_test, Y_predicted))","49e59113":"sns.heatmap(confusion_matrix(Y_test, Y_predicted), annot=True, cmap=\"Reds\")","ecb2d2a1":"dt_classifier = tree.DecisionTreeClassifier()\ndt_classifier.fit(X_train, Y_train)","d14d12c5":"dt_predicted = dt_classifier.predict(X_test)\nprint(accuracy_score(Y_test,dt_predicted))","bbe56ef5":"sns.heatmap(confusion_matrix(Y_test, dt_predicted), annot=True, cmap=\"Reds\")","e111b523":"kn_classifier = KNeighborsClassifier(n_neighbors=5)\nkn_classifier.fit(X_train, Y_train)","33bb2276":"knn_predicted = kn_classifier.predict(X_test)\nprint(accuracy_score(Y_test, knn_predicted))","799663a7":"sns.heatmap(confusion_matrix(Y_test, knn_predicted), annot=True, cmap=\"Reds\")","6c403b8c":"#Been Commented Out To Save Some Time\n# validates = []\n\n# for i in range(1, 50):\n#   knn = KNeighborsClassifier(n_neighbors=i)\n#   scores = cross_val_score(knn, X_train, Y_train, cv=10, scoring=\"accuracy\")\n#   validates.append(scores.mean())","a0b93bd6":"gnb_classifier = GaussianNB()\ngnb_classifier.fit(X_train, Y_train)","048b789d":"gnb_predicted = gnb_classifier.predict(X_test)\nprint(accuracy_score(Y_test, gnb_predicted))","a0569f26":"sns.heatmap(confusion_matrix(Y_test, gnb_predicted), annot=True, cmap=\"Reds\")","e1c3dc53":"rf_classifier = RandomForestClassifier(n_estimators=100, max_depth=10, min_samples_leaf=1)\nrf_classifier.fit(X_train, Y_train)","fd466b7b":"rf_predicted = rf_classifier.predict(X_test)\nprint(accuracy_score(Y_test, rf_predicted))","bd3e5dac":"sns.heatmap(confusion_matrix(Y_test, rf_predicted), annot=True, cmap=\"Reds\")","961c2d5f":"# param_grids = {\n#     \"max_depth\" : [1, 5, 10, 15],\n#     \"n_estimators\" : [10, 100, 500, 1000],\n#     \"min_samples_leaf\" : [1,2,3,4,5,10,15,20,30,40,50]\n# }\n# grid_search = GridSearchCV(estimator=RandomForestClassifier(n_jobs= -1, max_features=\"sqrt\"), param_grid= param_grids, cv = 10 )\n\n# grid_search.fit(X_train, Y_train)","d572ffa0":"final_model = svm.SVC()\nfinal_model.fit(X, Y)","8b479cbb":"test_set = pd.read_csv(test_path)\nfinal_prediction = final_model.predict(test_set)","8d7de5d3":"submission_path = '\/kaggle\/input\/digit-recognizer\/sample_submission.csv'\nsubmission = pd.read_csv(submission_path)","ef94cc65":"submission['Label'] = final_prediction","f0183432":"submission.to_csv(\"submission.csv\", index= False)","945ea6b3":"So Gonna Use SVM for Final Submission ","7644016e":"Importing Dataset and Extracting Features and Labels","a92367d8":"Splitting Up Dataset For Training and Testing","2becb908":"Gaussian Classifier","e2292a2c":"HyperParameter Tuning For Random Forrest","dea458dc":"Training The Support Vector Machine","cec66263":"Random Forrest CLassifier","a22abff2":"Importing Libraries to be used throughout the notebook","b4ed01e7":"To Get The Best N_neighbors","73925895":"Reshaping the data to make it ready for visualization","016c1cd0":"Decision Trees Turn","a6203654":"Give A Chance To KNN"}}