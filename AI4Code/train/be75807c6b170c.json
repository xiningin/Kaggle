{"cell_type":{"4b2e64f8":"code","751aa367":"code","900ebaf9":"code","2afe094e":"code","8d8984b8":"code","5152a76c":"code","ec012eb3":"code","357cb96f":"code","8e77b7db":"code","30d2ecad":"code","37529e6a":"code","b446a400":"code","ff4148c6":"code","8cf205d9":"code","1122be05":"code","b72ba60b":"code","cbfb21b7":"code","bd404a39":"code","fd8c8ab5":"code","eac714ae":"code","56192f9f":"code","08f565c9":"code","7d069c88":"code","d73d15d8":"code","e101934e":"code","cbc272cd":"code","3ae8389f":"code","46e98e2d":"code","f6a320dc":"code","d8a478c0":"code","123da2cd":"code","5fa52f71":"code","0f1edd0b":"code","6e505a79":"code","995cf5ea":"code","a9876638":"code","f8dccbb4":"code","a82635ca":"code","83ba2634":"code","ddf3d15c":"code","fe73c9c3":"code","f95f5721":"code","95ba97ea":"code","b0bcf7a0":"markdown","dead9256":"markdown","37223a74":"markdown","bc67c5a3":"markdown","9aa5706e":"markdown","6acfebb9":"markdown","c6ff8b07":"markdown","17f7ec6e":"markdown","ba242863":"markdown","385a6d40":"markdown","9252a532":"markdown","1029380d":"markdown","f1b8acae":"markdown","6fcdb6da":"markdown","4ccacf42":"markdown","a22caaf1":"markdown","fc012dbb":"markdown","28cb33c2":"markdown"},"source":{"4b2e64f8":"!pip install git+https:\/\/github.com\/fastai\/fastcore > \/dev\/null\n!pip install git+https:\/\/github.com\/fastai\/fastai2 > \/dev\/null\n!pip install iterative-stratification > \/dev\/null","751aa367":"!pip install efficientnet-pytorch","900ebaf9":"%load_ext autoreload\n%autoreload 2\n\nimport os\nimport pandas as pd\nimport sys\nfrom collections import Counter\nfrom pathlib import Path\n\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\nfrom tqdm.notebook import tqdm\nfrom torchvision.models import densenet121\nfrom sklearn.metrics import roc_auc_score\nfrom torch.utils.data.sampler import WeightedRandomSampler\n\nfrom fastai2.basics import *\nfrom fastai2.callback.all import *\nfrom fastai2.vision.all import *\n\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True","2afe094e":"from efficientnet_pytorch import EfficientNet","8d8984b8":"#from fastai2.vision.all import *","5152a76c":"DATA_PATH = Path('..\/input\/plant-pathology-2020-fgvc7')\nIMG_PATH = DATA_PATH \/ 'images'\nLABEL_COLS = ['healthy', 'multiple_diseases', 'rust', 'scab']\n\nIMG_SIZE = 512\nSEED = 420\nN_FOLDS = 5\nBS = 8#16\nN_FOLDS = 5\n\nARCH = densenet121","ec012eb3":"seed_everything(SEED)","357cb96f":"train_df = pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/train.csv')\ntest_df = pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/test.csv')","8e77b7db":"train_df.head()","30d2ecad":"(len(train_df), len(test_df))","37529e6a":"_, axes = plt.subplots(ncols=4, nrows=1, constrained_layout=True, figsize=(10, 3))\nfor ax, column in zip(axes, LABEL_COLS):\n    train_df[column].value_counts().plot.bar(title=column, ax=ax)\nplt.show()","b446a400":"train_df.iloc[:,1:-1].sum(axis=1).value_counts()","ff4148c6":"train_df[['healthy', 'multiple_diseases', 'rust', 'scab']].sum(axis=1).unique()","8cf205d9":"test_df.head()","1122be05":"# hs, ws = [], []\n# for _, row in tqdm(train_df.iterrows(), total=len(train_df)):\n#     img = Image.open(IMG_PATH\/(row.image_id+'.jpg'))\n#     h, w = img.size\n#     hs.append(h)\n#     ws.append(w)","b72ba60b":"#set(hs), set(ws)","cbfb21b7":"# _, axes = plt.subplots(ncols=2, nrows=1, constrained_layout=True, figsize=(10, 3))\n# for ax, column, vals in zip(axes, ['heights', 'widths'], [hs, ws]):\n#     ax.hist(vals, bins=100)\n#     ax.set_title(f'{column} hist')\n\n# plt.show()","bd404a39":"# Counter(hs), Counter(ws)","fd8c8ab5":"# red_values = []; green_values = []; blue_values = []; all_channels = []\n# for _, row in tqdm(train_df.iterrows(), total=len(train_df)):\n#     img = np.array(Image.open(IMG_PATH\/(row.image_id+'.jpg')))\n#     red_values.append(np.mean(img[:, :, 0]))\n#     green_values.append(np.mean(img[:, :, 1]))\n#     blue_values.append(np.mean(img[:, :, 2]))\n#     all_channels.append(np.mean(img))","eac714ae":"# _, axes = plt.subplots(ncols=4, nrows=1, constrained_layout=True, figsize=(16, 3), sharey=True)\n# for ax, column, vals, c in zip(\n#     axes,\n#     ['red', 'green', 'blue', 'all colours'],\n#     [red_values, green_values, blue_values, all_channels],\n#     'rgbk'\n# ):\n#     ax.hist(vals, bins=100, color=c)\n#     ax.set_title(f'{column} hist')\n\n# plt.show()","56192f9f":"train_df['fold'] = -1\n\nstrat_kfold = MultilabelStratifiedKFold(n_splits=N_FOLDS, random_state=SEED, shuffle=True)\nfor i, (_, test_index) in enumerate(strat_kfold.split(train_df.image_id.values, train_df.iloc[:,1:].values)):\n    train_df.iloc[test_index, -1] = i\n    \ntrain_df['fold'] = train_df['fold'].astype('int')","08f565c9":"train_df.fold.value_counts().plot.bar()","7d069c88":"train_df.to_csv('train_with_strat_folds.csv', index=False)","d73d15d8":"def get_label(row):\n    for k, v in row[LABEL_COLS].items():\n        if v == 1:\n            return k","e101934e":"train_df['label'] = train_df.apply(get_label, axis=1)","cbc272cd":"def get_data(fold):\n    train_df_no_val = train_df.query(f'fold != {fold}')\n    train_df_just_val = train_df.query(f'fold == {fold}')\n\n    train_df_bal = pd.concat(\n        [train_df_no_val.query('label != \"multiple_diseases\"'), train_df_just_val] +\n        [train_df_no_val.query('label == \"multiple_diseases\"')] * 4 # back to 4 as this was hs\n    ).sample(frac=1.0, random_state=SEED).reset_index(drop=True)\n\n    datablock = DataBlock(\n        blocks=(ImageBlock, CategoryBlock(vocab=LABEL_COLS)),\n        getters=[\n            ColReader('image_id', pref=IMG_PATH, suff='.jpg'),\n            ColReader('label')\n        ],\n        splitter=IndexSplitter(train_df_bal.loc[train_df_bal.fold==fold].index),\n        item_tfms=Resize(IMG_SIZE),\n        batch_tfms=aug_transforms(size=IMG_SIZE, max_rotate=30., min_scale=0.75, flip_vert=True, do_flip=True)\n    )\n    return datablock.dataloaders(source=train_df_bal, bs=BS)","3ae8389f":"def get_data_larger(fold):\n    train_df_no_val = train_df.query(f'fold != {fold}')\n    train_df_just_val = train_df.query(f'fold == {fold}')\n\n    train_df_bal = pd.concat(\n        [train_df_no_val.query('label != \"multiple_diseases\"'), train_df_just_val] +\n        [train_df_no_val.query('label == \"multiple_diseases\"')] * 4 # back to 4 as this was hs\n    ).sample(frac=1.0, random_state=SEED).reset_index(drop=True)\n\n    datablock = DataBlock(\n        blocks=(ImageBlock, CategoryBlock(vocab=LABEL_COLS)),\n        getters=[\n            ColReader('image_id', pref=IMG_PATH, suff='.jpg'),\n            ColReader('label')\n        ],\n        splitter=IndexSplitter(train_df_bal.loc[train_df_bal.fold==fold].index),\n        item_tfms=Resize(IMG_SIZE*2),\n        batch_tfms=aug_transforms(size=IMG_SIZE*2, max_rotate=30., min_scale=0.75, flip_vert=True, do_flip=True)\n    )\n    return datablock.dataloaders(source=train_df_bal, bs=BS\/2)","46e98e2d":"dls = get_data(fold=0)","f6a320dc":"dls.c","d8a478c0":"#dls.show_batch()","123da2cd":"def comp_metric(preds, targs, labels=range(len(LABEL_COLS))):\n    # One-hot encode targets\n    targs = np.eye(4)[targs]\n    return np.mean([roc_auc_score(targs[:,i], preds[:,i]) for i in labels])\n\ndef healthy_roc_auc(*args):\n    return comp_metric(*args, labels=[0])\n\ndef multiple_diseases_roc_auc(*args):\n    return comp_metric(*args, labels=[1])\n\ndef rust_roc_auc(*args):\n    return comp_metric(*args, labels=[2])\n\ndef scab_roc_auc(*args):\n    return comp_metric(*args, labels=[3])","5fa52f71":"def get_learner(fold_num, lr=1e-3):\n    opt_func = partial(Adam, lr=lr, wd=0.01, eps=1e-8)\n\n    data = get_data(fold_num)\n    \n    model = EfficientNet.from_pretrained(\"efficientnet-b7\", advprop=True)\n    #model = EfficientNet.from_name(\"efficientnet-b7\")\n    #model = EfficientNet.from_pretrained(\"efficientnet-b8\", advprop=True) # weights run to NaN\n    #model = EfficientNet.from_name('efficientnet-b4') \n    #model._fc = nn.Linear(1280, data.c)# the last layer... # works for b0,b1\n    #model._fc = nn.Linear(1536, data.c)# the last layer... B3\n    #model._fc = nn.Linear(1792, data.c)# the last layer... B4\n    #model._fc = nn.Linear(2048, data.c)# the last layer... B5\n    #model._fc = nn.Linear(2304, data.c)# the last layer... B6\n    model._fc = nn.Linear(2560, data.c)# the last layer... B7\n    #model._fc = nn.Linear(2816, data.c)# the last layer... B8\n\n    learn = Learner(\n        dls, model, opt_func=opt_func,\n        loss_func=LabelSmoothingCrossEntropy(),\n        #callback_fns = [partial(OverSamplingCallback)],  \n        metrics=[\n            AccumMetric(healthy_roc_auc, flatten=False),\n            AccumMetric(multiple_diseases_roc_auc, flatten=False),\n            AccumMetric(rust_roc_auc, flatten=False),\n            AccumMetric(scab_roc_auc, flatten=False),\n            AccumMetric(comp_metric, flatten=False)]\n        ).to_fp16()\n    return learn","0f1edd0b":"get_learner(fold_num=0).lr_find()","6e505a79":"def print_metrics(val_preds, val_labels):\n    comp_metric_fold = comp_metric(val_preds, val_labels)\n    print(f'Comp metric: {comp_metric_fold}')\n    \n    healthy_roc_auc_metric = healthy_roc_auc(val_preds, val_labels)\n    print(f'Healthy metric: {healthy_roc_auc_metric}')\n    \n    multiple_diseases_roc_auc_metric = multiple_diseases_roc_auc(val_preds, val_labels)\n    print(f'Multi disease: {multiple_diseases_roc_auc_metric}')\n    \n    rust_roc_auc_metric = rust_roc_auc(val_preds, val_labels)\n    print(f'Rust metric: {rust_roc_auc_metric}')\n    \n    scab_roc_auc_metric = scab_roc_auc(val_preds, val_labels)\n    print(f'Scab metric: {scab_roc_auc_metric}')","995cf5ea":"all_val_preds = []\nall_val_labels = []\nall_test_preds = []\n\nfor i in range(N_FOLDS):\n    print(f'Fold {i} results')\n\n    learn = get_learner(fold_num=i)\n\n    #learn.fit_one_cycle(5)\n    learn.fit_one_cycle(1)\n    learn.unfreeze()\n\n    #learn.fit_one_cycle(6, slice(1e-5, 1e-4))\n    learn.fit_one_cycle(1, slice(1e-5, 1e-4))\n    \n    learn.recorder.plot_loss()\n    \n    learn.save(f'model_fold_{i}')\n    \n    learn.freeze()\n    \n    learn.data = get_data_larger(i)\n    \n    lr_min,_ = learn.lr_find()\n    \n    #learn.fit_one_cycle(5, slice(lr_min))\n    learn.fit_one_cycle(1, slice(lr_min))\n    \n    val_preds, val_labels = learn.get_preds()\n    \n    print_metrics(val_preds, val_labels)\n    \n    all_val_preds.append(val_preds)\n    all_val_labels.append(val_labels)\n    \n    test_dl = dls.test_dl(test_df)\n    test_preds, _ = learn.get_preds(dl=test_dl)\n    all_test_preds.append(test_preds)\n    \nplt.show()","a9876638":"print_metrics(np.concatenate(all_val_preds), np.concatenate(all_val_labels))","f8dccbb4":"interp = ClassificationInterpretation.from_learner(learn)","a82635ca":"interp.plot_top_losses(9, figsize=(15, 10))","83ba2634":"interp.plot_confusion_matrix(normalize=True, figsize=(6, 6))","ddf3d15c":"test_df_output = pd.concat([test_df, pd.DataFrame(np.mean(np.stack(all_test_preds), axis=0), columns=LABEL_COLS)], axis=1)","fe73c9c3":"test_df_output.head()","f95f5721":"test_df_output.to_csv('submission.csv', index=False)","95ba97ea":"!head -n 5 submission.csv","b0bcf7a0":"### Label distribution","dead9256":"### Img size distribution","37223a74":"## Data (inc oversampling)","bc67c5a3":"## Create folds","9aa5706e":"### Colour distribution","6acfebb9":"Let's see how many times the labels appear together.","c6ff8b07":"I'll use iterative stratification to create balanced folds.","17f7ec6e":"## Params","ba242863":"## Test predictions","385a6d40":"# Plant Pathology 2020 with fastai2\n\nThe goal of this notebook is to showcase some of the features in the soon to be released [fastai2](https:\/\/github.com\/fastai\/fastai2) library and to provide a starter example for classifying categories of foliar diseases in apple trees.\n\ninspired by [lex's notebook here](https:\/\/www.kaggle.com\/lextoumbourou\/plant-pathology-2020-eda-training-fastai2)  \n\nI added efficientnet models to this, takes longer but lands you close to some of the TPU based notebooks on the LB  ","9252a532":"Vast majority of images are big: 2048x1819.","1029380d":"Right now, I'm x2 the number of multiple diseases labels as that appears to be the majorly unrepresented class.","f1b8acae":"I'm not sure how to load one-hot encoded labels into fastai2, so going to convert to a string label.","6fcdb6da":"## EDA","4ccacf42":"## Training","a22caaf1":"Looks like never. So this appears to be multiclass but not multilabel classification.","fc012dbb":"## Interpret","28cb33c2":"### Dataset size"}}