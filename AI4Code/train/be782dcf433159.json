{"cell_type":{"70011314":"code","f15a6702":"code","61b9cf5d":"code","57bafcbb":"code","9f222fd6":"code","eacde2c6":"code","77e4f7b1":"code","0a4e1118":"code","918db589":"code","43698232":"code","8159c7a9":"code","28f05de9":"code","3080787d":"code","802ccfb5":"code","2eeff5ce":"code","c75a8ba7":"code","7de79564":"code","01666592":"code","4b8bc9d7":"markdown","e2dfd656":"markdown","d3f43696":"markdown","8304117b":"markdown","b6d0ae9e":"markdown","8db13339":"markdown","e11867b2":"markdown","21a2c25f":"markdown","e38b3ec1":"markdown","af6fd26e":"markdown","1917a44a":"markdown","0ccff383":"markdown","52b6b9da":"markdown","5d49e7f4":"markdown","1e9e3615":"markdown","41388a65":"markdown","dde299ae":"markdown","c8e436ae":"markdown","a57c3a51":"markdown","e6f2fde8":"markdown","c20635e1":"markdown"},"source":{"70011314":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.layers import Input, Dense, BatchNormalization, Add, GaussianNoise, Dropout\nfrom keras.models import Model\nfrom sklearn.metrics import roc_auc_score\nfrom keras.layers import Wrapper\nfrom keras.callbacks import ReduceLROnPlateau\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nimport matplotlib.pyplot as plt\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f15a6702":"precisiones_globales=[]\nepochs = 15\ndef graf_model(train_history):\n    f = plt.figure(figsize=(15,10))\n    ax = f.add_subplot(121)\n    ax2 = f.add_subplot(122)\n    # summarize history for accuracy\n    ax.plot(train_history.history['binary_accuracy'])\n    ax.plot(train_history.history['val_binary_accuracy'])\n    ax.set_title('model accuracy')\n    ax.set_ylabel('accuracy')\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'test'], loc='upper left')\n    # summarize history for loss\n    ax2.plot(train_history.history['loss'])\n    ax2.plot(train_history.history['val_loss'])\n    ax2.set_title('model loss')\n    ax2.set_ylabel('loss')\n    ax2.set_xlabel('epoch')\n    ax2.legend(['train', 'test'], loc='upper left')\n    plt.show()\ndef precision(model, registrar=False):\n    y_pred = model.predict(train_dfX)\n    train_auc = roc_auc_score(train_dfY, y_pred)\n    y_pred = model.predict(val_dfX)\n    val_auc = roc_auc_score(val_dfY, y_pred)\n    print('Train AUC: ', train_auc)\n    print('Vali AUC: ', val_auc)\n    if registrar:\n        precisiones_globales.append([train_auc,val_auc])\n","61b9cf5d":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"Train shape : \",train_df.shape)\nprint(\"Test shape : \",test_df.shape)","57bafcbb":"train_dfX = train_df.drop(['ID_code', 'target'], axis=1)\ntrain_dfY = train_df['target']\nsubmission = test_df[['ID_code']].copy()\ntest_df = test_df.drop(['ID_code'], axis=1)\n","9f222fd6":"sc = StandardScaler()\ntrain_dfX = sc.fit_transform(train_dfX)\ntest_df = sc.transform(test_df)","eacde2c6":"train_dfX,val_dfX,train_dfY, val_dfY = train_test_split(train_dfX,train_dfY , test_size=0.1, stratify=train_dfY)\nprint(\"Entrnamiento: \",train_dfX.shape)\nprint(\"Validacion : \",val_dfX.shape)","77e4f7b1":"def func_model():   \n    inp = Input(shape=(200,))\n    x=Dense(1028, activation=\"relu\", kernel_initializer='random_uniform', bias_initializer='zeros')(inp)\n    x=Dense(1028, activation=\"relu\", kernel_initializer='random_uniform', bias_initializer='zeros')(x) \n    x=Dense(1, activation=\"sigmoid\", kernel_initializer='random_uniform', bias_initializer='zeros')(x)\n    model = Model(inputs=inp, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer='SGD', metrics=['binary_accuracy'])\n    return model\nmodel = func_model()\nprint(model.summary())","0a4e1118":"train_history = model.fit(train_dfX, train_dfY, batch_size=512, epochs=epochs, validation_data=(val_dfX, val_dfY))\n","918db589":"graf_model(train_history)","43698232":"precision(model, True)","8159c7a9":"def func_model(arquitectura): \n    first =True\n    inp = Input(shape=(200,))\n    for capa in arquitectura:        \n        if first:\n            x=Dense(capa, activation=\"relu\", kernel_initializer='random_uniform', bias_initializer='zeros')(inp)            \n            first = False\n        else:\n            x=Dense(capa, activation=\"relu\", kernel_initializer='random_uniform', bias_initializer='zeros')(x)  \n    x=Dense(1, activation=\"sigmoid\", kernel_initializer='random_uniform', bias_initializer='zeros')(x)  \n    model = Model(inputs=inp, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer='SGD', metrics=['binary_accuracy'])\n    return model","28f05de9":"arquitectura1 = [1045,2408,3120,4548]\nmodel1 = func_model(arquitectura1)\n#Para revisar la estructura del modelo, quitar el comentario de la instruccion siguiente:\nprint(model1.summary())\ntrain_history_tam1 = model1.fit(train_dfX, train_dfY, batch_size=512, epochs=epochs, validation_data=(val_dfX, val_dfY), verbose=0)\ngraf_model(train_history_tam1)\nprecision(model1)","3080787d":"arquitectura2 = [2255, 3155, 4005, 4028]\nmodel2 = func_model(arquitectura2)\nprint(model2.summary())\ntrain_history_tam2 = model2.fit(train_dfX, train_dfY, batch_size=512, epochs=epochs, validation_data=(val_dfX, val_dfY))\ngraf_model(train_history_tam2)\nprecision(model2)","802ccfb5":"arquitecturaFinal = arquitectura1\nmodelF = func_model(arquitecturaFinal)\nprint(modelF.summary())\ntrain_history_tamF = modelF.fit(train_dfX, train_dfY, batch_size=512, epochs=epochs, validation_data=(val_dfX, val_dfY))\ngraf_model(train_history_tamF)\nprecision(modelF, True)\nassert(len(precisiones_globales)==2)","2eeff5ce":"def func_model_reg():   \n    inp = Input(shape=(200,))\n    x=Dropout(0)(inp)\n    x=Dense(1028, activation=\"relu\", kernel_initializer='random_uniform', bias_initializer='zeros', kernel_regularizer=regularizers.l2(0.01))(x)\n    x=Dropout(0)(x)\n    x=Dense(1028, activation=\"relu\", kernel_initializer='random_uniform', bias_initializer='zeros', kernel_regularizer=None)(x)\n    x=Dropout(0)(x)\n    x=Dense(1028, activation=\"relu\", kernel_initializer='random_uniform', bias_initializer='zeros', kernel_regularizer=None)(x)\n    x=Dropout(0)(x)  \n    x=Dense(1, activation=\"sigmoid\", kernel_initializer='random_uniform', bias_initializer='zeros')(x) \n    model = Model(inputs=inp, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer='SGD', metrics=['binary_accuracy'])\n    return model","c75a8ba7":"model3 = func_model_reg()\n#Para revisar la estructura del modelo, quitar el comentario de la instruccion siguiente:\nprint(model1.summary())\ntrain_history_tam1 = model1.fit(train_dfX, train_dfY, batch_size=512, epochs=epochs, validation_data=(val_dfX, val_dfY), verbose=0)\ngraf_model(train_history_tam1)\nprecision(model3)","7de79564":"modelRF = func_model_reg()\nprint(modelRF.summary())\ntrain_history_regF = modelRF.fit(train_dfX, train_dfY, batch_size=512, epochs=epochs, validation_data=(val_dfX, val_dfY))\ngraf_model(train_history_regF)\nprecision(modelRF, True)\nassert(len(precisiones_globales)==3)","01666592":"y_test = modelRF.predict(test_df)\nsubmission['target'] = y_test\nsubmission.to_csv('submission.csv', index=False)","4b8bc9d7":"# Experimento 2","e2dfd656":"# 6. Precision del modelo.\n\nEn esta competencia la metrica utilizada para medir la precision de nuestro modelo es el AUC (referencia rapida: https:\/\/es.wikipedia.org\/wiki\/Curva_ROC). Por lo que vamos a estar bastante enfocados en mejorarla. \n\nLa funcion precision() nos va a permitir, dado como parametro uno de nuestros modelos, imprimir el valor de AUC tanto del conjunto de entrenamiento como del de validacion. ","d3f43696":"# Experimento\n\nPrueba modificando la funcion de arriba para ver que resultados da sobre la precision.","8304117b":"# **Deep Neural Network con Keras**\n\nEn este ejercicio se procede a realizar una Deep Neural Network con el Framework Keras, utilizando Tensorflow como Backend. ","b6d0ae9e":"# Resultado Final\n\nElije una arquitectura de red que te permita tener el valor de AUC mas alto que puedas lograr\n\n **Ejecuta esta celda 1 sola vez con la arquitectura final elegida en los experimentos anteriores**","8db13339":"# 0. Funciones auxiliares.","e11867b2":"# Resultado Final\n\nElije una arquitectura de red que te permita tener el valor de AUC mas alto que puedas lograr\n\n **Ejecuta esta celda 1 sola vez con la arquitectura final elegida en los experimentos anteriores**","21a2c25f":"# 4. Creacion del modelo.\n","e38b3ec1":"Vamos a definir una funcion que cree un modelo de red neuronal. Esta red va a tener 2 capaz ocultas con 1028 neuronas cada una. Se va a utilizar el optimizador SGD y la funcion de costo BinaryCrossEntropy. Los valores W del modelo se iniciaran de manera aleatoria y uniforme, los valores de b se iniciaran en cero.\n\nA tener en cuenta:\n\nCual es el learning Rate de este modelo?\n","af6fd26e":"# 7. Tama\u00f1o de la Red. (Evaluado)\n\nEn este apartado vamos a estar revisando como el tama\u00f1o de la red afecta el desempe\u00f1o de la misma. Vamos a experimentar utilizando distinta cantidad de capaz ocultas y de neuronas por capa.\n\nLa variable arquitectura es una lista de Python que sirve como parametro de la funcion model(arquitectura) para definir una red neuronal con una cantidad len(arquitectura) de capaz ocultas, donde cada capa oculta l tiene una cantidad de neuronas arquitectura[l-1].\n\nPor ejemplo, de configurar la variable arquitectura  de forma [5,10,20] tendremos una red neuronal con 3 capaz ocultas, con 5, 10 y 20 capaz respectivamente. ","1917a44a":"# Experimento 1\n\nJuega con distintos tama\u00f1os de red para ver como esto afecta el desempe\u00f1o del modelo (Vas a poder ver el impacto en las graficas de perdida, binary_accuracy y valor de AUC)\n\nVas a poder comparar valores utilizando el Experimento 1 y 2 al mismo tiempo.","0ccff383":"# Salida de datos.\n\nCon esta celda se exportaran los datos.\n\n","52b6b9da":"# 1. Importando los datos:\nSe procede a leer tanto el train.csv que es el conjunto de entrenamiento como el test.csv que es el conjunto de validacion. Mas adelante se construira en base a train.csv el conjunto de dev","5d49e7f4":"# Modelo Final.\n\nJuega con el modelo y genera el mejor valor de AUC que puedas lograr. ","1e9e3615":"Vamos a ver una grafica de como se comporta nuestro modelo tanto en la perdida como en la precision (binary_accuracy).","41388a65":"# 7. Regularizacion de la Red. (Evaluado)\n\nEn el siguiente ejercicio vamos a experimentar con la regularizacion de nuestra red. La idea es que basado en la arquitectura \"optima\" que consiguieron en el apartado anterior empecemos a mejorar nuestro modelo. \n\nVamos a experimentar con distintos valores para el P del DropOut y aplicando o no regularizacion L2 en las distintas capas. Para agregar regularizacion L2 a una capa se debe colocar regularizers.l2(0.01) como parametro en kernel_regularizer.","dde299ae":"# 5. Entrenamiento del modelo.\n\nSe entrenara el modelo con un batch_size de 512. Utilizando nuestras variables de validacion para seguir de cerca el accuracy tanto en entrenamiento como en validacion. Esto lo haremos por 20 epochs.","c8e436ae":"Aqui podemos ver como nuestra variable de entramiento train_dfX tiene 16200 observaciones y 200 caracteristicas. Es decir, la forma en la que ingresaremos datos a nuestro modelo sera (200, )","a57c3a51":"Se crea las variables X y Y con las que se van a entrenar al modelo.\nTambien se elimina el ID_Code ya que no aporta valor al entrenamiento del modelo. ","e6f2fde8":"# 3. Separando Entrenamiento de Validacion\nSe divide X para tener un conjunto de entrenamiento y otro de validacion y pruebas. El 90% de las observaciones quedan en el conjunto de entrenamiento.","c20635e1":"# 2. Normalizando los valores de X\nSe transforma X de manera que quede normalizado todos su valores."}}