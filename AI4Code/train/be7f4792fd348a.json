{"cell_type":{"e6e12dc3":"code","8e037541":"code","d1c8f562":"code","4749d399":"code","50e4ac53":"code","d04548e5":"code","78bf04e2":"code","74650b60":"code","2ff1fcef":"code","7785672c":"code","4fbd19de":"code","11f89788":"code","cbbcbe25":"code","94b41b38":"code","73ad458e":"markdown"},"source":{"e6e12dc3":"import pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn import metrics\n%matplotlib inline \nfrom sklearn.utils import shuffle\nimport matplotlib.pyplot as plt\nfrom numpy import array\nfrom numpy import argmax\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_selection import chi2\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nimport seaborn as sns","8e037541":"names=['URL','First_Visit','Last_Visit','Click_Count','Frecency']\nnn=['URL','First_Visit','Last_Visit','Click_Count','Frecency']\ndf=pd.read_csv('..\/input\/TrainingHistory.csv',names=names, na_filter=False)\ndt=pd.read_csv('..\/input\/TestingHistory.csv',names=nn, na_filter=False)\ndf.head(100)","d1c8f562":"sns.set(font_scale=1.5)\ng=sns.pairplot(data=df,x_vars=['First_Visit','Last_Visit','Click_Count'],y_vars='Frecency', kind='reg',size=5)","4749d399":"y=np.array(df[names[4]]) #train\nyt=np.array(dt[nn[4]]) #test","50e4ac53":"X=np.array(df[['First_Visit','Last_Visit','Click_Count']]) #train\nXt=np.array(dt[['First_Visit','Last_Visit','Click_Count']]) #test","d04548e5":"clf=LinearRegression().fit(X,y) #training by linear regression\nmse = mean_squared_error(yt, clf.predict(Xt)) #mean square error\nprint(\"MSE: %.4f\" % mse)\nrmse=np.sqrt(mse)\nprint(\"RMSE: %.4f\" % rmse) #root mean square error","78bf04e2":"y_pred=clf.predict(Xt) #prediction\nprint(y_pred)","74650b60":"import matplotlib.patches as mpatches\nXp=dt['Click_Count']\nplt.scatter(Xp, yt)\nplt.plot(Xp, y_pred, color='red', label='Predicted Relationship')\nx_actual = Xp\ny_actual = yt\nplt.plot(x_actual, y_actual, color='green', label='Actual Relationship')\nplt.xlabel('Features')\nplt.ylabel('Frecency')\nplt.legend()\nplt.rcParams[\"figure.figsize\"] = [6,5]\nplt.show()","2ff1fcef":"print(clf.score(Xt,yt))","7785672c":"Xf=np.array(dt[['URL','First_Visit','Last_Visit','Click_Count']])","4fbd19de":"yf=clf.predict(Xt) #prediction\nyf=yf.reshape(2305,1)\nXd=np.append(Xf,yf,axis=1) #appending prediction to test dataset\nprint(Xd[:,1])","11f89788":"print(yf[0:10]) #prediction","cbbcbe25":"submission = pd.DataFrame(Xd) #creating dataframe and csv file\nsubmission.to_csv('result.csv', index=False)","94b41b38":"submission = pd.read_csv('result.csv')\nsubmission.head() #all columns with prediction","73ad458e":"Here, We will predict the frecency value from browser history and suggest the favourite links to the user. According to frecency value we can give prediction to user. Here is the demo: [Prediction System](http:\/\/myresearch.epizy.com\/) . You can read this [paper](https:\/\/arxiv.org\/abs\/1902.08496 ) to understand the link prediction part. Category wise recommendation will be shown on next kernel of this dataset. For website or URL classification you can take help from this [Kernel](https:\/\/www.kaggle.com\/shawon10\/url-classification-by-naive-bayes) . You can also read our another [paper](https:\/\/lnkd.in\/g3gNg3P) for Website\/URL classification.\n\n![](https:\/\/media.giphy.com\/media\/7zAIkF2ZsdjTJi7htC\/giphy.gif)"}}