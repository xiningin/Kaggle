{"cell_type":{"cb7e61ba":"code","84e29267":"code","06aa85af":"code","83320b6c":"code","0dd464b3":"code","bd9117ab":"code","a7b5bfd4":"code","fce328b1":"code","0436b281":"code","05449b6a":"code","bff74b45":"code","c314d372":"code","b84a267b":"code","368dc5f0":"code","0b544223":"code","91fb4476":"code","e1c94554":"code","72d3bca8":"markdown","f6bd0b1c":"markdown","a428619b":"markdown","983af230":"markdown","b8a0465f":"markdown","044c7059":"markdown","f1ae609d":"markdown","3e0a6d04":"markdown","fb87ec04":"markdown","dbd181a7":"markdown","ede3cf81":"markdown","6b340f96":"markdown","98aa0b21":"markdown","23ee26d4":"markdown","cf1d8b3c":"markdown"},"source":{"cb7e61ba":"# Familiar imports\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom math import ceil # round numbers up\n%matplotlib inline\n# For ordinal encoding categorical variables, splitting data\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\n\n# For training random forest model\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=Warning)","84e29267":"# Load the training data\ntrain = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\", index_col=0)\ntest = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\", index_col=0)\n\n# Preview the data\ntrain.head()","06aa85af":"bins = np.arange(0, 12, 0.1)\nsns.displot(train.target, height = 5, aspect = 2, bins = bins);","83320b6c":"plt.figure(figsize= (20, 15))\n# Mask to hide upper-right part of plot as it is a duplicate\nmask = np.transpose(np.tril(np.ones(train.corr().shape)))\nsns.heatmap(train.corr(), annot = True, center = 0, cmap = 'RdBu', mask = mask);","0dd464b3":"num_cols = [col for col in train.columns if 'cont' in col] \nnum_cols","bd9117ab":"def plot(data, cols, features_type, nrows, ncols, bins='auto', target=None, figsize=None,\n         hspace=None, wspace=None, color = None):\n    '''plot all features vs target or the distribution of features'''\n    if figsize != None:\n        plt.figure(figsize = figsize)\n    for col, plot_num in zip(cols, list(range(1, len(cols)))):\n        plt.subplot(nrows, ncols, plot_num)\n        if hspace != None or wspace != None:\n            plt.subplots_adjust(hspace = hspace, wspace = wspace)\n            \n        if features_type == 'numerical':\n            if target != None:\n                plt.scatter(data[col], data[target])\n                plt.title(col)\n            else:\n                sns.histplot(data[col], bins=bins)\n                \n        if features_type == 'categorical':\n            if target != None:\n                sns.violinplot(data=data, y=col, x=target, color=color, inner='quartile');\n            else:\n                countplot_ratio(x = col, data = data, color = color)","a7b5bfd4":"n_cols = 4\nn_rows = ceil(len(num_cols)\/n_cols)\nbins = np.arange(0, 1.3, 0.02)\nplot(data=train, cols=num_cols, features_type='numerical', nrows=n_rows, ncols=n_cols, hspace=0.3, wspace=0.5, bins=bins,\n    figsize = (15, 15))","fce328b1":"n_cols = 4\nn_rows = ceil(len(num_cols)\/n_cols)\nplot(data=train, target='target', cols=num_cols, features_type='numerical', nrows=n_rows, ncols=n_cols, hspace=0.3,\n    figsize = (15, 15))","0436b281":"# List of categorical columns\nobject_cols = [col for col in train.columns if 'cat' in col]\nobject_cols","05449b6a":"# function to plot the distribution of categorical variable \n# since the countplot function show the counts of observations in each categorical bin using bars.\ndef countplot_ratio(x = None, data = None, hue = None, ax = None, color = None):\n    # plot the variable\n    ax = sns.countplot(x, data = data, hue = hue, ax = ax, color = color)\n    # names of x labels\n    ax.set_xticklabels(ax.get_xticklabels())\n    # plot title\n    ax.set_title(x + \" Distribution\")\n    # total number of data which used to get the proportion\n    total = float(len(data))\n    # for loop to iterate on the patches\n    for patch in ax.patches:\n        # get the height of the patch which represents the number of observations.\n        height = patch.get_height()\n        # Put text on each patch with the proportion of the observations\n        ax.text(patch.get_x()+patch.get_width()\/2,height+4,'{:.2f}%'.format((height\/total)*100),weight = 'bold',\n                fontsize = 12,ha = 'center')","bff74b45":"n_cols = 2\nn_rows = ceil(len(object_cols)\/n_cols)\nbase_color = sns.color_palette(n_colors=2)[1]\nplot(data=train, cols=object_cols, features_type='categorical', nrows=n_rows, ncols=n_cols,\n     hspace=0.5, figsize = (15, 20), color=base_color)","c314d372":"n_cols = 3\nn_rows = ceil(len(object_cols)\/n_cols)\nplot(data=train, target='target', cols=object_cols, features_type='categorical',\n     nrows=n_rows, ncols=n_cols, hspace=0.5, figsize = (15, 20), color=base_color)","b84a267b":"# Separate target from features\ny = train['target']\nfeatures = train.drop(['target'], axis=1)\n\n# Preview features\nfeatures.head()","368dc5f0":"# ordinal-encode categorical columns\nX = features.copy()\nX_test = test.copy()\nordinal_encoder = OrdinalEncoder()\nX[object_cols] = ordinal_encoder.fit_transform(features[object_cols])\nX_test[object_cols] = ordinal_encoder.transform(test[object_cols])\n\n# Preview the ordinal-encoded features\nX.head()","0b544223":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=0)","91fb4476":"# Define the model \nmodel = XGBRegressor(n_estimators=1000, learning_rate=0.03, random_state=1, n_jobs=2)\n\n# Train the model \nmodel.fit(X_train, y_train, early_stopping_rounds = 20, eval_set=[(X_valid, y_valid)], verbose=False)\npreds_valid = model.predict(X_valid)\nprint(mean_squared_error(y_valid, preds_valid, squared=False))","e1c94554":"# Use the model to generate predictions\npredictions = model.predict(X_test)\n\n# Save the predictions to a CSV file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'target': predictions})\noutput.to_csv('submission.csv', index=False)","72d3bca8":"# Step 3: Prepare the data\n\nNext, we'll need to handle the categorical columns (`cat0`, `cat1`, ... `cat9`).  ","f6bd0b1c":"let's see the distribution of continuous variable vs target","a428619b":"We can see that target is weakly correlated with all features","983af230":"Distributions of categorical features","b8a0465f":"Next, we break off a validation set from the training data.","044c7059":"# Step 2: Load the data\n\nNext, we'll load the training and test data.  ","f1ae609d":"Distributions of numerical features","3e0a6d04":"let's see the correlation ","fb87ec04":"let's see the distribution of categorical variable vs target","dbd181a7":"# Step 4: Train a model\n\nNow that the data is prepared, the next step is to train a model.  ","ede3cf81":"let's see the distribution of the target variable","6b340f96":"# Step 1: Import helpful libraries","98aa0b21":"### EDA","23ee26d4":"In the code cell above, we set `squared=False` to get the root mean squared error (RMSE) on the validation data.\n\n# Step 5: Submit to the competition\n\nWe'll begin by using the trained model to generate predictions, which we'll save to a CSV file.","cf1d8b3c":"The next code cell separates the target (which we assign to `y`) from the training features (which we assign to `features`)."}}