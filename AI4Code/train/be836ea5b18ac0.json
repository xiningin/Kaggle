{"cell_type":{"1bf6072d":"code","a474d5ed":"code","a8896b01":"code","2b2ff144":"code","007dd65e":"code","4b011b79":"code","ee47561d":"code","63389699":"code","268b2896":"code","92fde796":"code","e758636b":"code","47875ce7":"code","e90b1f65":"code","0ac32631":"code","28aec1a0":"code","bbbe35ac":"code","cb11ca32":"code","df174bb0":"code","277fd141":"code","273d7fbf":"code","7b88fc2d":"code","93ff4245":"code","28bc1fa0":"code","188aa6cc":"code","017b12b8":"code","e1dffb09":"code","9cb5b589":"code","9d74059a":"code","610a95d2":"code","d23d20d0":"code","2ab77e93":"code","704382b7":"markdown","46fd9b77":"markdown","df6b45b5":"markdown","c4995641":"markdown","66d3a5e3":"markdown","f719ae0d":"markdown","e5f0bd8d":"markdown","4d81ad12":"markdown","99c62c43":"markdown","7e316c66":"markdown","3601c99c":"markdown","10b546ab":"markdown","dd8521bc":"markdown","35bacabe":"markdown","03a7b0d1":"markdown","07b548ff":"markdown","2b0a82e2":"markdown","94747470":"markdown","9e410c1b":"markdown","ab6bcd98":"markdown","ac393def":"markdown","d6eb6067":"markdown","b21a8999":"markdown","02dbdf0b":"markdown","2d5cab70":"markdown","55d5f68c":"markdown","8a219928":"markdown","9233b103":"markdown","55e96d44":"markdown","fb37049b":"markdown","69ae254d":"markdown","f2025cb0":"markdown","de296593":"markdown","4f3738fa":"markdown","ee3c6da3":"markdown","e21d58e7":"markdown","040d2c29":"markdown","90151718":"markdown","4e7693f0":"markdown","e4fe14f6":"markdown","b96392ab":"markdown","1e95a9f4":"markdown","90a5f175":"markdown","ff187591":"markdown","884a07c6":"markdown","38dd0b78":"markdown","0354000a":"markdown","7f988ab7":"markdown","56969f77":"markdown","e37143b7":"markdown","2ed486ff":"markdown","7d0e4506":"markdown","85a1f89c":"markdown","c51b83ed":"markdown","cb4c0c1f":"markdown","46133394":"markdown","c2a544d3":"markdown","b778338b":"markdown","9b6d0881":"markdown","fe32057f":"markdown","90fb995c":"markdown","7be8df92":"markdown","011d7504":"markdown","2b959b81":"markdown","82796ac5":"markdown","b07fb052":"markdown","3a7a2875":"markdown"},"source":{"1bf6072d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a474d5ed":"df = pd.read_csv('..\/input\/stack-overflow-developer-survey-2020\/developer_survey_2020\/survey_results_public.csv')\ndef prettify(ax):\n  ax.grid(False)\n  ax.set_frame_on(False)\n  ax.tick_params(top=False, bottom=False, left=False, right=False, labelbottom=False)","a8896b01":"plt.style.use('ggplot')\n\ndft = df.groupby(['Country']).count().sort_values('Respondent', ascending=False).head(15)\ncntrs = list(dft.index)\ncntrs[0], cntrs[2], cntrs[-3] = \"USA\", \"UK\", \"Russia\"\ncntrs = list(reversed(cntrs))\n\nfig1, ax1 = plt.subplots(figsize=(9,6))\nax1.barh(cntrs, list(reversed(dft['Respondent'])))\nax1.set_xticks(np.arange(0,13001,1000))\nax1.grid(axis='y')\n# ax1.set_title('\\nTop 15 Countries of Respondents',fontdict={'fontsize':20})\nfig1.tight_layout()\n\nplt.style.use('default')","2b2ff144":"plt.style.use('bmh')\n\ndft = df.groupby(['Ethnicity']).count().sort_values('Respondent', ascending=False)\nraces = [str(x) for x in dft.index[0:10]]\npies = [dft.Respondent[dft.index==races[x]][0] for x in range(10)]\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.pie(\n    pies,\n    labels=races,\n    autopct='%.1f%%',\n    explode=[0.01, 0.02, 0.03, 0.04, 0.04, 0.04, 0.05, 0.08, 0.1, 0.25],\n    startangle=-150, pctdistance=0.7, labeldistance=1.05\n)\n# ax.set_title('\\nTop 10 Ethnicities of Programmers',fontdict={'fontsize':20})\nfig.tight_layout()\n# fig.savefig('1.png', dpi=200, bbox_inches='tight')\nplt.show()\nplt.style.use('default')","007dd65e":"plt.style.use('seaborn')\n\ndft = df.groupby(['Gender']).Respondent.count()\n\nfig, ax = plt.subplots()\npies = []\ntemp = 0\nfor i in dft.index:\n    if i=='Man':\n        pies.append(dft[i])\n    elif i=='Woman':\n        pies.append(dft[i])\n    else:\n        temp+=dft[i]\npies.append(temp)\nlabels = ['Man', 'Woman', 'Non-conforming']\n_ = ax.pie(pies, labels=labels, autopct=\"%.1f%%\" ,explode=[0.03,0.01,0.1], startangle=180)\n# ax.set_title('Gender Of Programmers', fontdict={'fontsize':20}, horizontalalignment='right')\n# fig.savefig('3.png',dpi=200, bbox_inches='tight')","4b011b79":"# plt.style.use('dark_background')\nplt.style.use('seaborn')\n\n\nfig, ax = plt.subplots()\n\n#Trans or not\nax.pie(\n    [\n        df.Respondent[df.Trans=='Yes'].count(),\n        df.Respondent[df.Trans=='No'].count(),\n        df.Respondent[df.Trans.isna()].count()\n    ],\n    autopct='%.2f%%',\n    labels=['Transgender', 'Not A Transgender', 'Didn\\'t tell'],\n    explode=[0.05, 0.01, 0.01]\n)\n# ax.set_title('Is Respondent Transgender Or Not?',fontdict={'fontsize':20}, horizontalalignment='right')\n\n#Gender\n\nplt.style.use('default')","ee47561d":"plt.style.use('classic')\n\n#Sexuality\ndft = df.groupby(['Sexuality']).Respondent.count()\n\nfig, ax = plt.subplots()\npies = []\ntemp = 0\nfor i in dft.index:\n    if i=='Straight \/ Heterosexual':\n        pies.append(dft[i])\n    elif i=='Gay or Lesbian':\n        pies.append(dft[i])\n    elif i=='Bisexual':\n        pies.append(dft[i])\n    else:\n        temp+=dft[i]\npies.append(temp)\nlabels = ['Bisexual', 'Gay', 'Straight', 'Others']\nax.pie(pies, labels=labels, autopct=\"%.1f%%\", startangle=150, labeldistance=1.05)\n# ax.set_title('Sexual Orientation Of Programmers', fontdict={'fontsize':20}, horizontalalignment='right')\n\n# fig.savefig('3.png',dpi=200, bbox_inches='tight')\n\nplt.style.use('default')","63389699":"plt.style.use('fast')\n\ndft = df.groupby(['EdLevel']).count()\nEdLvl = [\n    x[:x.find('(')-1] if x.find('(')!=-1\n    else \"No Formal Education\" if x.find('formal')!=-1\n    else \"College Dropout\" if x.find('without earning')!=-1\n    else x\n    for x in dft.index \n]\npies = [dft.Respondent[dft.index==x][0] for x in dft.index]\n\nfig, ax = plt.subplots()\nax.pie(pies, labels=EdLvl, startangle=-120, autopct=\"%.1f%%\", pctdistance=0.75,\n      explode=[0,0,0.05,0,0,0.05,0,0,0], labeldistance=1.03)\n# ax.set_title('Education Levels',fontdict={'fontsize':30})\n\nplt.savefig('4.png', dpi=200, bbox_inches='tight')\nplt.style.use('default')","268b2896":"plt.style.use('ggplot')\n\ndft = df.drop(df[df.Age>90].index, axis=0).drop(df[df.Age<10].index, axis=0)\n\nfig, ax = plt.subplots(figsize=(8,4))\nax = sns.violinplot(dft.Age, inner='quartile')\n_ = ax.set_xticks(np.arange(0,101,10))\n# ax.set_title('Age Of Programmers')\nax.grid(axis='y')\n\nplt.style.use('default')","92fde796":"plt.style.use('seaborn')\n\nfig,ax = plt.subplots()\ndft = df.groupby(['EdLevel']).mean()\nax.barh(EdLvl, dft.Age)\n# ax.set_title('Mean Ages Of Various Education Levels',fontdict={'fontsize':30})\nax.set_xlabel('Age')\nax.grid(axis='y')\n\nplt.style.use('default')","e758636b":"plt.style.use('bmh')\n\ndft = df.groupby(['Employment']).count()#.sort_values(by='Respondent',ascending=False)\n\nfig, ax = plt.subplots( tight_layout=True, figsize=(10,16))\nax.pie(dft.Respondent, labels=dft.index, startangle=-130,\n       explode=[0.01, 0.03, 0.02, 0.06, 0.02, 0.06, 0.02],\n       autopct=\"%.1f%%\", pctdistance=0.7, labeldistance=1.05)\n# ax.set_title('Employment Status',fontdict={'fontsize':20}, horizontalalignment='center')\n\nfig.savefig('5.png')\nplt.show()\n\nplt.style.use('default')","47875ce7":"plt.style.use('ggplot')\n\nfig, ax = plt.subplots()\n\ndft = df.groupby(['Employment']).mean()\nax.barh(dft.index, dft.Age)\n# ax.set_title('Mean Age Of Various Employments',fontdict={'fontsize':20}, horizontalalignment='right')\nax.set_xlabel('Age')\nax.grid(axis='x')\nplt.style.use('default')","e90b1f65":"plt.style.use('dark_background')\n\ndf.Age1stCode.replace('Younger than 5 years', '4', inplace=True)\ndf.Age1stCode.replace('Older than 85', '86', inplace=True)\ndf.Age1stCode.fillna(np.nan)\ndf.Age1stCode = df.Age1stCode.astype('float')\n\nbins = [4,8,10,11,12,13,14,15,16,17,18,19,20,22,25,30,50,86]\nnames = [x for x in bins[1:]]\nnames[-1] = 21\ndf['fc'] = pd.cut(df.Age1stCode.dropna(), bins=bins, labels=names, right=False)\nlabels=['50 years or older ', '30 to 49 years old ', '25 to 29 years old ',\n                         '22 to 24 years old ','20 to 21 years old ','19 years old ','18 years old ',\n                          '17 years old ','16 years old ','15 years old ','14 years old ','13 years old ',\n                         '12 years old ', '11 years old ', '10 years old ', '8 to 10 years old ', \n                          'less than 8 years old ']\n\ndft = df.groupby(['fc']).Respondent.count()\nnums = [dft[x] for x,_ in enumerate(dft.index)]\nticks = []\nfor x,_ in enumerate(nums):\n    ticks.append(x)\n\nvals = [round(100*x\/sum(nums),2) for x in reversed(nums)]\n\n\nfig, ax = plt.subplots(figsize=(10,12))\nax.barh(ticks, [x for x in reversed(nums)], edgecolor='b', tick_label=labels)\nax.grid(True)\nax.set_yticks(ticks) \n\nfor (x, v), y in zip(enumerate(vals), reversed(nums) ) :\n    ax.annotate(\"{}%\".format(v), (y+50,x-0.2), fontsize=15)\n\nfig.tight_layout()\nprettify(ax)\n# ax.set_title('\\n\\nWritten Their First Code' ,fontdict={'fontsize':30}, horizontalalignment='right')\nfig.savefig('0.png', dpi=200, bbox_inches='tight')\nplt.style.use('default')\n","0ac32631":"plt.style.use('seaborn')\n\nfig, ax = plt.subplots(figsize=(12,6))\nsns.violinplot(df.Age1stCode, inner='quartile')\nax.set_xticks(np.arange(0,90,5))\n\nplt.style.use('default')","28aec1a0":"plt.style.use('ggplot')\ndft = df.groupby(['Country']).Age1stCode.mean()\ncntr =['Pakistan','India','Turkey','France','Germany','Canada','United States','United Kingdom']\nm_age = [dft[x] for x in cntr]\n\nfig, ax = plt.subplots()\nax.barh(cntr, m_age)\nax.set_xticks(np.arange(0,19,2))\n# ax.set_title('Average Age Of Writing 1st Code Categorized by Country\\n' ,fontdict={'fontsize':15}, horizontalalignment='center')\nax.grid(axis='y')\n\nplt.style.use('default')","bbbe35ac":"plt.style.use('ggplot')\n# plt.style.use('dark_background')\n\ndf.YearsCode.replace('Less than 1 year', '0.5', inplace=True)\ndf.YearsCode.replace('More than 50 years', '52', inplace=True)\ndf.YearsCode = df.YearsCode.astype('float')\ndft = df.groupby(['Country']).YearsCode.mean()\ncntr =['Pakistan','India','Turkey','France','Germany','Canada','United States','United Kingdom']\nage = [dft[x] for x in cntr]\n\nfig, ax = plt.subplots(nrows=2, figsize=(10,8),sharex=True)\nfig.subplots_adjust(hspace=0)\nax[0].barh(cntr, age, color='g', edgecolor='w')\nax[0].grid(axis='y')\n# ax[0].set_title('\\nAverage Years of Coding Experience and Professional Coding Experience\\n' ,fontdict={'fontsize':20}, horizontalalignment='center')\n# ax[0].set_xticks()\n\ndf.YearsCodePro.replace('Less than 1 year', '0.5', inplace=True)\ndf.YearsCodePro.replace('More than 50 years', '52', inplace=True)\ndf.YearsCodePro = df.YearsCodePro.astype('float')\ndft = df.groupby(['Country']).YearsCodePro.mean()\ncntr =['Pakistan','India','Turkey','France','Germany','Canada','United Kingdom','United States']\nage = [dft[x] for x in cntr]\n\nax[1].barh(cntr, age, color='red', edgecolor='w')\nax[1].set_xlabel('Years')\nax[1].grid(axis='y')\nplt.style.use('default')","cb11ca32":"plt.style.use('default')\ndft = df.groupby(['OpSys']).Respondent.count()\ntypes = [x for x in dft.index]\npcnts = [round(100*dft[x]\/sum(nums),1) for x in dft.index]\n\nfig, ax = plt.subplots()\nax.barh(types, pcnts)\n\nfor y, p in enumerate(pcnts):\n  ax.annotate(\"%.1f%%\"%p, (p+0.5, y))\nprettify(ax)\n# ax.set_title('Primary Operating System For Work')\n\nplt.style.use('default')","df174bb0":"plt.style.use('seaborn-dark')\n\n# current lw users\nlw = {}\nfor x in df.LanguageWorkedWith.dropna():\n    for d in x.split(';'):\n        if d not in lw:\n            lw[d] = 1   # create new instance\n        else:\n            lw[d] += 1  # increments that instance           \nlw = {k:v for k,v in sorted(lw.items(), key=lambda x:x[1])}\npos = np.arange(0,len(lw.keys()), 1)\nlabels = [x for x in lw.keys()]\ntot = df.LanguageWorkedWith.count()\npcnts = [round(100*x\/tot, 2) for x in lw.values()]\n\nfig, ax = plt.subplots(figsize=(10,10))\nfig.subplots_adjust(hspace=0.01)\n\nax.barh(labels, lw.values(), color='y', edgecolor='k')\nax.set_xticks(np.arange(0, max(lw.values())+600, 100))\nax.xaxis.set_ticklabels([])\nfor (y, p), x  in zip(enumerate(pcnts), lw.values()):\n    ax.annotate(\"%.2f%%\"%p, (x+100 ,y-0.125))\nax.xaxis.set_ticks_position('none')\n# ax[0].set_title('Languages Worked With' ,fontdict={'fontsize':25}, horizontalalignment='center')\nax.grid(False)\nax.set_frame_on(False)\nprettify(ax)\n# fig.tight_layout()\n\n\n# # ld that users desire\n# ld = {}\n# for x in df.LanguageDesireNextYear.dropna():\n#     for d in x.split(';'):\n#         if d not in ld:\n#             ld[d] = 1   # create new instance\n#         else:\n#             ld[d] += 1  # increments that instance           \n# ld = {k:v for k,v in sorted(ld.items(), key=lambda x:x[1])}\n# pos = np.arange(0,len(ld.keys()), 1)\n# labels = [x for x in ld.keys()]\n# tot = df.LanguageDesireNextYear.count()\n# pcnts = [round(100*x\/tot,2) for x in ld.values()]\n\n# ax[1].barh(labels, ld.values(), edgecolor='k')\n# ax[1].set_xticks(np.arange(0, max(ld.values())+600, 100))\n# ax[1].xaxis.set_ticklabels([])\n# for (y, p), x  in zip(enumerate(pcnts), ld.values()):\n#     ax[1].annotate(\"%.2f%%\"%p, (x+80 ,y-0.125))\n# ax[1].xaxis.set_ticks_position('none')\n# ax[1].grid(False)\n# # fig.tight_layout()\n# ax[1].set_title('Languages Desired(wants to work with)' ,fontdict={'fontsize':25}, horizontalalignment='center')\n# ax[1].set_frame_on(False)\n\n# plt.style.use('default')","277fd141":"fig , ax = plt.subplots(figsize=(10,10))\n# ld that users desire\nld = {}\nfor x in df.LanguageDesireNextYear.dropna():\n    for d in x.split(';'):\n        if d not in ld:\n            ld[d] = 1   # create new instance\n        else:\n            ld[d] += 1  # increments that instance           \nld = {k:v for k,v in sorted(ld.items(), key=lambda x:x[1])}\npos = np.arange(0,len(ld.keys()), 1)\nlabels = [x for x in ld.keys()]\ntot = df.LanguageDesireNextYear.count()\npcnts = [round(100*x\/tot,2) for x in ld.values()]\n\nax.barh(labels, ld.values(), edgecolor='k')\nax.set_xticks(np.arange(0, max(ld.values())+600, 100))\nax.xaxis.set_ticklabels([])\nfor (y, p), x  in zip(enumerate(pcnts), ld.values()):\n    ax.annotate(\"%.2f%%\"%p, (x+80 ,y-0.125))\nax.xaxis.set_ticks_position('none')\nax.grid(False)\n# fig.tight_layout()\n# ax.set_title('Languages Desired(wants to work with)' ,fontdict={'fontsize':25}, horizontalalignment='center')\nax.set_frame_on(False)\nprettify(ax)\nplt.style.use('default')","273d7fbf":"plt.style.use('seaborn-dark')\n\n# current DB users\ndb = {}\nfor x in df.DatabaseWorkedWith.dropna():\n    for d in x.split(';'):\n        if d not in db:\n            db[d] = 1   # create new instance\n        else:\n            db[d] += 1  # increments that instance           \ndb = {k:v for k,v in sorted(db.items(), key=lambda x:x[1])}\npos = np.arange(0,len(db.keys()), 1)\nlabels = [x for x in db.keys()]\ntot = df.DatabaseWorkedWith.count()\npcnts = [round(100*x\/tot,2) for x in db.values()]\n\nfig, ax = plt.subplots(figsize=(10,8))\nfig.subplots_adjust(hspace=0.01)\n\nax.barh(labels, db.values(), color='y', edgecolor='k')\nax.set_xticks(np.arange(0, max(db.values())+600, 100))\nax.xaxis.set_ticklabels([])\nfor (y, p), x  in zip(enumerate(pcnts), db.values()):\n    ax.annotate(\"%.2f%%\"%p, (x+100 ,y-0.125))\nax.xaxis.set_ticks_position('none')\n# ax.set_title('Databases Worked With' ,fontdict={'fontsize':20}, horizontalalignment='center')\nax.grid(False)\nprettify(ax)\n# fig.tight_layout()\n\n\n# # db that users desire\n# dbd = {}\n# for x in df.DatabaseDesireNextYear.dropna():\n#     for d in x.split(';'):\n#         if d not in dbd:\n#             dbd[d] = 1   # create new instance\n#         else:\n#             dbd[d] += 1  # increments that instance           \n# dbd = {k:v for k,v in sorted(dbd.items(), key=lambda x:x[1])}\n# pos = np.arange(0,len(dbd.keys()), 1)\n# labels = [x for x in dbd.keys()]\n# tot = df.DatabaseDesireNextYear.count()\n# pcnts = [round(100*x\/tot,2) for x in dbd.values()]\n\n# ax[1].barh(labels, dbd.values(), edgecolor='k')\n# ax[1].set_xticks(np.arange(0, max(dbd.values())+600, 100))\n# ax[1].xaxis.set_ticklabels([])\n# for (y, p), x  in zip(enumerate(pcnts), dbd.values()):\n#     ax[1].annotate(\"%.2f%%\"%p, (x+80 ,y-0.125))\n# ax[1].xaxis.set_ticks_position('none')\n# ax[1].grid(False)\n# ax[1].set_title('Databases Desired(wants to work with)' ,fontdict={'fontsize':20}, horizontalalignment='center')\n\n# fig.tight_layout()\n\n","7b88fc2d":"# db that users desire\nfig , ax = plt.subplots(figsize=(10,8))\n\ndbd = {}\nfor x in df.DatabaseDesireNextYear.dropna():\n    for d in x.split(';'):\n        if d not in dbd:\n            dbd[d] = 1   # create new instance\n        else:\n            dbd[d] += 1  # increments that instance           \ndbd = {k:v for k,v in sorted(dbd.items(), key=lambda x:x[1])}\npos = np.arange(0,len(dbd.keys()), 1)\nlabels = [x for x in dbd.keys()]\ntot = df.DatabaseDesireNextYear.count()\npcnts = [round(100*x\/tot,1) for x in dbd.values()]\n\nax.barh(labels, dbd.values(), edgecolor='k')\nax.set_xticks(np.arange(0, max(dbd.values())+600, 100))\nax.xaxis.set_ticklabels([])\nfor (y, p), x  in zip(enumerate(pcnts), dbd.values()):\n    ax.annotate(\"%.1f%%\"%p, (x+80 ,y-0.125))\nax.xaxis.set_ticks_position('none')\nax.grid(False)\nprettify(ax)\n# ax.set_title('Databases Desired(wants to work with)' ,fontdict={'fontsize':20}, horizontalalignment='center')\n\nplt.style.use('default')","93ff4245":"plt.style.use('ggplot')\ndev = {}\nfor x in df.DevType.dropna():\n    for d in x.split(';'):\n        if d!='nan':\n            if d not in dev:\n                dev[d] = 1   # create new instance\n            else:\n                dev[d] += 1  # increments that instance  \n            \ndev = {k:v for k,v in sorted(dev.items(), key=lambda x:x[1])}\npos = np.arange(0,len(dev.keys()), 1)\nlabels = [x for x in dev.keys()]\ntot = df.DevType.count()\npcnts = [round(100*x\/tot, 1) for x in dev.values()]\n\nfig, ax = plt.subplots(figsize=(10,8))\nax.barh(labels, dev.values(), edgecolor='k')\nax.set_xticks(np.arange(0, max(dev.values())+900, 100))\nax.xaxis.set_ticklabels([])\nfor (y, p), x  in zip(enumerate(pcnts), dev.values()):\n    ax.annotate(\"%.1f%%\"%p, (x+50 ,y-0.25))\nax.xaxis.set_ticks_position('none')\nax.grid(False)\n# ax.set_title('Developer\\'s Type Of Work' ,fontdict={'fontsize':25}, horizontalalignment='right')\n# fig.tight_layout()\nprettify(ax)\nplt.style.use('default')","28bc1fa0":"plt.style.use('default')\ndev_age, dev_num = {}, {}\ndf.DevType = df.DevType.astype('str')\nfor i in range(0,len(df)):\n  age = df.loc[i].Age\n  devt = df.loc[i].DevType\n  if (not np.isnan(age)) and devt!='nan':\n    for d in devt.split(';'):\n      if d not in dev_age:\n        dev_age[d] = 0\n        dev_num[d] = 1\n      else:\n        dev_age[d] += age\n        dev_num[d] += 1\nfor k in dev_age.keys():\n  dev_age[k] = dev_age[k]\/dev_num[k]\n\ndev_age = {k:v for k,v in sorted(dev_age.items(), key=lambda x:x[1])}\nbar = [float(x) for x in dev_age.values()]\ndev = [str(x) for x in dev_age.keys()]\n\nfig, ax = plt.subplots(figsize=(10,10))\n\nax.barh(dev, bar, edgecolor='k')\nax.grid(axis='x')\n# ax.set_title('Mean Age by Developer Type',fontdict={'fontsize':20}, horizontalalignment='right')\nplt.style.use('default')","188aa6cc":"plt.style.use('ggplot')\n\ndf.YearsCodePro.replace('Less than 1 year', '0.6', inplace=True)\ndf.YearsCodePro.replace('More than 50 years', '55', inplace=True)\n\nfor d in dev_num:\n  dev_num[d] = 0\ndev_yc = dev_num.copy()\ndf.YearsCodePro = df.YearsCodePro.astype('float')\n\nfor i in range(len(df.YearsCodePro)):\n  yc = df.loc[i].YearsCodePro\n  devt = df.loc[i].DevType\n  if devt!='nan' and (not np.isnan(yc)):\n    for d in devt.split(';'):\n        dev_yc[d] += yc\n        dev_num[d] += 1\nfor k in dev_yc.keys():\n  dev_yc[k] = dev_yc[k] \/ dev_num[k]\n\ndev_yc = {k:v for k,v in sorted(dev_yc.items(), key=lambda x:x[1])}\nyc = [float(x) for x in dev_yc.values()]\ndev = [x for x in dev_yc.keys()]\n\nfig, ax = plt.subplots(figsize=(10, 9))\nax.barh(dev, yc, edgecolor='b' )\nax.grid(axis='y')\n# ax.set_title('Years of Professional Coding BY Developer Type',fontdict={'fontsize':20}, horizontalalignment='right')\nplt.style.use('default')","017b12b8":"plt.style.use('ggplot')\n\ndft = df[['LanguageWorkedWith', 'DevType']].dropna()\ndft.LanguageWorkedWith.loc[0]\ndl = {}\n\ni = 0\nfor dev, lang in zip(dft.DevType, dft.LanguageWorkedWith):\n  i+=1\n  for d in dev.split(';'):\n    if d not in dl and d!='nan':\n      dl[d] = dict()\n    if d!='nan':\n      for l in lang.split(';'):\n        if l not in dl[d]:\n          dl[d][l] = 0\n        else:\n          dl[d][l] += 1\nfor d in dl.keys():\n  temp = dl[d]\n  temp = {k:v for k,v in sorted(temp.items(), key=lambda x:x[1])}\n  temp = {k:round(100*v\/sum(temp.values()),1) for k,v in temp.items()}\n  dl[d] = temp\n\n\ntitle = [n for n in dl.keys()]\nnm1, nm2, nm3, n1, n2, n3 = [], [], [], [], [], []\nfor t in title:\n    nm = [x for x in dl[t].values()]\n    nam = [x for x in dl[t].keys()]\n    nm1.append(nam[-1])\n    nm2.append(nam[-2])\n    nm3.append(nam[-3])\n    n1.append(nm[-1])\n    n2.append(nm[-2])\n    n3.append(nm[-3])\nn = np.arange(len(title))\n\nfig, ax = plt.subplots(figsize=(10,19))\nax.barh(n, n1, height=0.25, align='edge')\nax.barh(n-0.2, n2, height=0.25, align='edge')\nax.barh(n-0.4, n3, height=0.25, align='edge')\nax.set_yticks(np.arange(len(title)))\nax.set_yticklabels([x for x in title])\nfor (y,_),x1, x2, x3, a1, a2, a3 in zip(enumerate(title), n1, n2, n3, nm1, nm2, nm3):\n  ax.annotate(a1, (x1+0.1, y+0.05), fontsize=8.5)\n  ax.annotate(a2, (x2+0.1, y-0.2), fontsize=8.5)\n  ax.annotate(a3, (x3+0.1, y-0.4), fontsize=8.5)\nax.set_title('\\nTop 3 Languages Worked With BY Developer Type')\nprettify(ax)\n\nplt.style.use('default')","e1dffb09":"plt.style.use('ggplot')\n\nfig, ax = plt.subplots(figsize=(8,6))\nsns.violinplot(df[df.WorkWeekHrs<100].WorkWeekHrs, inner='quartile',)\nax.set_xticks(np.arange(0,101,10))\n# ax.set_title('Distribution of Hours Worked Weekly')\nax.grid(axis='x')\n\nplt.style.use('default')","9cb5b589":"plt.style.use('seaborn')\n\ndft = df.groupby(['Country']).WorkWeekHrs.mean()\ncntr =['Pakistan','India','Turkey','France','Germany','Canada', 'China','United States','United Kingdom']\nage = [dft[x] for x in cntr]\n\nfig, ax = plt.subplots()\nax.barh(cntr, age)\nax.set_xlabel('Years')\nax.grid(axis='y')\n# ax.set_title('Average Weekly Work Hours' ,fontdict={'fontsize':20}, horizontalalignment='center')\nfig.tight_layout()\n\nplt.style.use('default')","9d74059a":"plt.style.use('ggplot')\n\ndft = df.JobFactors.astype('str')\njf = {}\nfor x in dft.unique():\n  for d in x.split(';'):\n    if d not in jf and d!='nan':\n      jf[d] = 0\n\nfor x in df.JobFactors.dropna():\n  for d in x.split(';'):\n    jf[d] += 1\n\ntot = df.JobFactors.notna().sum()\njf = {k:v for k,v in sorted(jf.items(), key=lambda x:x[1])}\njfnum = [round(100*jf[k]\/tot,1) for k in jf.keys()]\njfname = [k for k in jf.keys()]\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.barh(jfname, jfnum, edgecolor='k')\n# ax.set_title('Most Important Job Factors While Looking For A Job',fontdict={'fontsize':20}, horizontalalignment='right')\nax.xaxis.set_ticklabels([])\nax.grid(False)\nfor y, p in enumerate(jfnum):\n  ax.annotate(\"%.1f%%\"%p, (p+0.2 , y), fontsize=12)\nprettify(ax)\nplt.style.use('default')","610a95d2":"plt.style.use('ggplot')\n\ndft = df.groupby(['NEWOvertime']).Respondent.count()\nnames = list(map(lambda x: x, dft.index))\nnums = list(map(lambda x: dft[x], range(len(dft.index))))\npcnts = [round(100*x\/sum(nums),1) for x in nums]\n\nfig, ax = plt.subplots()\nax.barh(names, pcnts, edgecolor='k')\nfor y, p in enumerate(pcnts):\n  ax.annotate(\"{}%\".format(p), (p+0.5, y))\nprettify(ax)\n# ax.set_title('Overtime Routine')\nplt.style.use('default')","d23d20d0":"plt.style.use('ggplot')\n\nuns = {}\nfor d in df.NEWStuck.dropna():\n  for x in d.split(';'):\n    if x not in uns:\n      uns[x] = 1\n    else:\n      uns[x] += 1\nuns = {k:v for k,v in sorted(uns.items(), key=lambda x:x[1])}\n\nnames = [x[:x.find('(')-1]if x=='Visit another developer community (please name):' else x for x in uns.keys()]\npcnts = [round(100*x\/df.NEWStuck.dropna().count(),1) for x in uns.values()]\n\nfig, ax = plt.subplots()\nax.barh(names, pcnts)\nfor y, p in enumerate(pcnts):\n  ax.annotate(\"%.1f%%\"%p, (p+0.5, y-0.1))\nprettify(ax)\n# ax.set_title('What do you do when you get stuck?')\nplt.style.use('default')","2ab77e93":"plt.style.use('ggplot')\n\ndft = df.groupby(['NEWEdImpt']).Respondent.count()\npies = [dft[x] for x in dft.index]\nlabels = [dft.index[x] for x in range(dft.shape[0])]\n\nfig, ax = plt.subplots()\nax.pie(pies, labels=labels)\n# ax.set_title('Importance of Formal Education for career\\n')\nplt.style.use('default')","704382b7":"I would like to hear your suggestions about how to improve my skills. Please tell if this kernel has any defeciency.<br><br>\nP.S. If you want me to make a custom graph, especially one not present on offical Stack Overflow site, comment that and I would try make that.","46fd9b77":"Most of the weekly work hours range from mid 30s to mid 40s.\n<br><br>\n*This graph is the filtered version which is still not filtered effectively to be honest. Apparently some people work over 300 hours\/week where one week has 168 hours in total.*","df6b45b5":"1. Countries like Germany and UK teach their kids to write code early\n2. Whereas countries like India and Pakistan teach their kids to write codes relatively late.","c4995641":"### Mean Age Of Various Employments","66d3a5e3":"Senior Executives\/VPs and Managers make the top position. Makes sense as lots of experience require to reach at these stages.","f719ae0d":"### Importance of Formal Education for career","e5f0bd8d":"### Mean Age by Developer Type","4d81ad12":"### Sexual Orientation","99c62c43":"### Languages Desired (wants to work with)","7e316c66":"White people dominate this field by a huge margin!","3601c99c":"### Average Age Of Writing 1st Code Categorized by Country","10b546ab":"Hi! I know it has been a while since Stack Overflow released their 2020 survey results. But still I chose to analyze it because 1) to acquire good plotting skills.  2) Dataset is relate to us Programmers :D\n<br> <br>\nThis Kernel doesn't cover every nook and cranny of the dataset but still it provides a good detailed analysis of this SO survey dataset. I wanted to do a lot more detailed analysis but it got boring and monotonous so I decided to post whatever I had made.\n<br> <br>\nFor in-depth analysis please visit the [Official SO site](http:\/\/https:\/\/insights.stackoverflow.com\/survey\/2020).","dd8521bc":"Most of the people are Windows users followed by MacOS users.","35bacabe":"This holds true as: <br>\n1. Students have lower mean age\n2. Retired gentlemen have higher mean age","03a7b0d1":"### What do you do when you get stuck?","07b548ff":"### DataBases Worked With","2b0a82e2":"Most of the people are Cisgendered, some being Transgendered and others who didnt tell.","94747470":"# Age and Education","9e410c1b":"### Distribution of Hours Worked Weekly","ab6bcd98":"### Average Weekly Work Hour","ac393def":"# Regions and Ethnicities","d6eb6067":"# Technology","b21a8999":"Over 50% of the Respondents prefer Technology they will work with while looking for a job.<br>\nWhile only about 6% of Respondents prefer Diversity Of Orginazation they will be working with.","02dbdf0b":"### Top 15 Countries by Respondents' Count","2d5cab70":"### Education Levels","55d5f68c":"# Coding Experiences","8a219928":"1. Shows average of coding experience is higher than professional coding exp. Makes sense as people learn some years before getting a job.\n2. People in countries like US and UK have higher average coding and professional coding exp\n3. Meanwhile countries like India and Pakistan have relatively lower average coding and professional coding exp :\/","9233b103":"### Written Their First Code","55e96d44":"This one shows several things:\n1. Most of the Respondents have worked with Javascript. HTML\/CSS at 2nd position makes sense as people can't use JS without HTML.\n2. SQL stands at 3rd position of Languages worked with\n<br><br>\n3. Python makes the top position of Languages people want to work with.\n4. JS and HTML stands at 2nd and 3rd position resp. in this tier.\n<br> <br>\n5. Only a few people has worked with or wants to work with languages like Julia, Perl and Haskell\n<br><br>\n*(note: Respondents selected multiple languages, thus the sum exceeds 100. 67% Javascript means 67% OF RESPONDENTS have worked with JS.)*","fb37049b":"Most of the Respondents were men. Women were few and non-conforming people even fewer. <br>\nIt shows how dominent men are in this field.","69ae254d":"1. Most of the Respondents hold a Bachelor's degree.<br>\n2. At 2nd position are holders of Master's degree.<br>\n3. College dropouts make the the third position. Woah! Those are lot of college dropouts alright!","f2025cb0":"This is a very sweet plot which is a mixture of density plot and boxplot.<br>\nProgrammers' age mostly ranges from 14 - 90 with most of the people being of age early 20s - mid 30s <br><br>\n(Filtered some trolls Whose age was less than 10 and some were over even 200 years :D)","de296593":"### Gender","4f3738fa":"### DataBases Desired (wants to work with)","ee3c6da3":"# Employment","e21d58e7":"Languages Worked With","040d2c29":"### Age","90151718":"1. Most of the people wrote code AT THE AGE OF 15\n2. 4% wrote their first code at age of less than 8 years. Woah!","4e7693f0":"### Most Important Job Factors While Looking For A Job","e4fe14f6":"### Mean Ages Of Various Education Levels","b96392ab":"# Job Related","1e95a9f4":"# Gender And Sexuality","90a5f175":"Most of the people who took this survey belong to America and India.","ff187591":"Senior Execs\/VPs and managers are at top positions which is feasible as more coding experience is required to reach these stages.","884a07c6":"1. Most of the people work as developers with backend and full-stack devs at top.\n2. Senior Executives are low in numbers. Makes sense as generally only a few people are sen executives.\n<br><br>\n*(note: Respondent selected multiple types of DEV type. A person can be Data Scientist, Engineer, Data Analyst and Designer at same time.)*","38dd0b78":"# Aptitutudes and Trends","0354000a":"Shows most of the people started coding at the age of 12 to 18 years. (I am in them too;) )","7f988ab7":"*Please do tell me how to improve my matplotlib and analysis skills. Thanks!*","56969f77":"People who say formal education is important exceeds the people who say it's not.","e37143b7":"### Overtime Routine","2ed486ff":"People in Turkey, China and USA work more number of week hours as compared to others.","7d0e4506":"1. Most of the people are employed full-time\n2. Students make up 12% of Respondents\n3. ~4% unfortunate people are looking for job (I hope they find it soon)","85a1f89c":"### Primary Operating System For Work","c51b83ed":"### Transgender Or Not?","cb4c0c1f":"1. 90% who took this survey said they visit Stack Overflow when they get stuck on some issue. This is true for my case too alright.\n2. Apparently 10% of Respondents panic when they face an issue. Wow.","46133394":"1. SQL stands at top position of DBs people have worked with\n2. Most desired DBs are PostgreSQL and MongoDB","c2a544d3":"Most of the people are straight. Gays, bisexuals and others are few in numbers.","b778338b":"### Average Years of Coding Experience and Professional Coding Experience","9b6d0881":"### Employment Status","fe32057f":"This holds true as: <br>\n1. Primary school's Repondents have less mean age\n2. Doctoral and Master degree holders have higher mean ages","90fb995c":"### Top 10 Ethnicities","7be8df92":"People usually work overtime.","011d7504":"### Developer's Type of Work","2b959b81":"# Work","82796ac5":"### Years of Professional Coding BY Developer Type","b07fb052":"This comprehensive graph tells a lot of things:\n1. Python is used by a huge number of Data Scientists as its bar is very long.\n2. Most of the Marketing and Sales Professional guys use html\/css which is usually the case.\n3. Game and Graphic Devs use JS, HTML and C# the most.\n4. Data Anlysts mostly use SQL.\n\n*(note: The length of bars represent the quantiy of users. Longer bars represent more users and shorter bars less users.)*","3a7a2875":"### Violin Plot for Age of 1st Code"}}