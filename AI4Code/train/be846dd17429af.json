{"cell_type":{"c8a15867":"code","60f3e606":"code","a4cec9e7":"code","3e073012":"code","3a7a25a4":"code","5759b251":"code","a990fec9":"code","6b90754a":"code","56204f58":"code","50649dd7":"code","c403a151":"code","ee67b55d":"code","8788d25a":"code","f9f1f6aa":"code","dc7b5df6":"code","3dffeeb5":"code","4f05e29e":"code","2f15c9b5":"code","d7d3d5e4":"code","42beed90":"code","e69e7efc":"code","ae7c7db0":"code","9926a582":"code","4dcbe87e":"code","64e43fed":"code","830d6fce":"code","054e2b7c":"code","c9ccf2d3":"code","05384121":"code","78fe66be":"code","4f25cf22":"code","5672929f":"code","90ba5cbc":"code","3cc1415e":"code","0c03dc78":"code","ca2fa47c":"markdown","c5941456":"markdown","27368c77":"markdown","ade39999":"markdown","6ed6a4a2":"markdown","cc61ec53":"markdown","0dcf833e":"markdown","db4c234f":"markdown","3cd5e3dd":"markdown","7e75abe0":"markdown","a73a63f4":"markdown","6265fb87":"markdown","10fc2913":"markdown","5ac90e81":"markdown","57fb9836":"markdown","19173ddb":"markdown","890c3c71":"markdown"},"source":{"c8a15867":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","60f3e606":"# Load data that we will use.\npokemon = pd.read_csv('..\/input\/Pokemon.csv')\npokemon","a4cec9e7":"# information about pokemons\npokemon.info()","3e073012":"# shape gives number of rows and columns in a tuple\npokemon.shape","3a7a25a4":"pokemon.columns","5759b251":"pokemon.rename(columns={\"Sp. Atk\":\"sp_atk\",\"Sp. Def\":\"sp_def\"}, inplace=True)","a990fec9":"pokemon.columns = [each.replace(\" \",\"_\") if(len(each.split())>1) else each for each in pokemon.columns]\npokemon.columns","6b90754a":"pokemon.columns = [each.lower() for each in pokemon.columns]\npokemon.columns","56204f58":"#pokemon.drop('#', axis = 1, inplace = True)","50649dd7":"pokemon.sort_values('total',ascending=False,inplace=True)\npokemon.index = [i for i in range(0,800)]\npokemon.head()","c403a151":"pokemon['pk_number'] = [i+1 for i in pokemon.index]\n#pokemon['pk_number'] = np.arange(1,len(pokemon)+1)","ee67b55d":"# Display positive and negative correlation between columns\npokemon.corr()","8788d25a":"#sorts all correlations with ascending sort.\npokemon.corr().unstack().sort_values().drop_duplicates()","f9f1f6aa":"#correlation map\nplt.subplots(figsize=(10,10))\nsns.heatmap(pokemon.corr(), annot=True, linewidth=\".5\", cmap=\"YlGnBu\", fmt=\".2f\")\nplt.show()\n#figsize - image size\n#data.corr() - Display positive and negative correlation between columns\n#annot=True -shows correlation rates\n#linewidths - determines the thickness of the lines in between\n#cmap - determines the color tones we will use\n#fmt - determines precision(Number of digits after 0)\n#if the correlation between the two columns is close to 1 or 1, the correlation between the two columns has a positive ratio.\n#if the correlation between the two columns is close to -1 or -1, the correlation between the two columns has a negative ratio.\n#If it is close to 0 or 0 there is no relationship between them.","dc7b5df6":"pokemon.describe()","3dffeeb5":"pokemon.head()","4f05e29e":"pokemon.tail()","2f15c9b5":"pokemon.sample(5)","d7d3d5e4":"pokemon.dtypes","42beed90":"# prepare data frame\npk = pokemon.iloc[:100,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = pk.pk_number,\n                    y = pk.sp_atk,\n                    mode = \"lines\",\n                    name = \"sp_atk\",\n                    marker = dict(color = 'rgba(160, 112, 2, 0.8)'),\n                    text= pk.name)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = pk.pk_number,\n                    y = pk.sp_def,\n                    mode = \"lines+markers\",\n                    name = \"sp_def\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= pk.name)\ndata = [trace1, trace2]\nlayout = dict(title = 'Speacial Attack and Speacial Defense of Top 100 Pokemons',\n              xaxis= dict(title= 'Pokemon Number',ticklen= 10,zeroline= True)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","e69e7efc":"# prepare data frames\npk1 = pokemon[pokemon.generation == 1].iloc[:100,:]\npk1['pk_number'] = [i for i in range(1,101)]\n\npk2 = pokemon[pokemon.generation == 2].iloc[:100,:]\npk2['pk_number'] = [i for i in range(1,101)]\n\npk3 = pokemon[pokemon.generation == 3].iloc[:100,:]\npk3['pk_number'] = [i for i in range(1,101)]\n\npk4 = pokemon[pokemon.generation == 4].iloc[:100,:]\npk4['pk_number'] = [i for i in range(1,101)]\n\npk5 = pokemon[pokemon.generation == 5].iloc[:100,:]\npk5['pk_number'] = [i for i in range(1,101)]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = pk1.pk_number,\n                    y = pk1.total,\n                    mode = \"markers\",\n                    name = \"generation 1\",\n                    marker = dict(color = 'rgba(83, 37, 85, 1)'),\n                    text= pk1.name)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = pk2.pk_number,\n                    y = pk2.total,\n                    mode = \"markers\",\n                    name = \"generation 2\",\n                    marker = dict(color = 'rgba(168, 0, 0, 1)'),\n                    text= pk2.name)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = pk3.pk_number,\n                    y = pk3.total,\n                    mode = \"markers\",\n                    name = \"generation 3\",\n                    marker = dict(color = 'rgba(35, 117, 0, 1)'),\n                    text= pk3.name)\n# creating trace4\ntrace4 =go.Scatter(\n                    x = pk4.pk_number,\n                    y = pk4.total,\n                    mode = \"markers\",\n                    name = \"generation 4\",\n                    marker = dict(color = 'rgba(5, 84, 133, 1)'),\n                    text= pk4.name)\n# creating trace5\ntrace5 =go.Scatter(\n                    x = pk5.pk_number,\n                    y = pk5.total,\n                    mode = \"markers\",\n                    name = \"generation 5\",\n                    marker = dict(color = 'rgba(7, 181, 187, 1)'),\n                    text= pk5.name)\ndata = [trace1, trace2, trace3, trace4, trace5]\nlayout = dict(title = 'Total Power vs Generation of top 100 Pokemons with gen1,gen2,gen3,gen4 and gen5',\n              xaxis= dict(title= 'Pokemon Number',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Total_Power',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","ae7c7db0":"# prepare data frames\npk = pokemon[pokemon.generation==1].iloc[:3,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# create trace1 \ntrace1 = go.Bar(\n                x = pk.name,\n                y = pk.hp,\n                name = \"hp\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace2 \ntrace2 = go.Bar(\n                x = pk.name,\n                y = pk.attack,\n                name = \"attack\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace3 \ntrace3 = go.Bar(\n                x = pk.name,\n                y = pk.defense,\n                name = \"defense\",\n                marker = dict(color = 'rgba(1, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace4 \ntrace4 = go.Bar(\n                x = pk.name,\n                y = pk.speed,\n                name = \"speed\",\n                marker = dict(color = 'rgba(1, 128, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","9926a582":"# prepare data frames\npk = pokemon[pokemon.generation==1].iloc[:3,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\nx = pk.name\n\ntrace1 = {\n  'x': x,\n  'y': pk.hp,\n  'name': 'hp',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': pk.attack,\n  'name': 'attack',\n  'type': 'bar'\n};\ntrace3 = {\n  'x': x,\n  'y': pk.defense,\n  'name': 'defense',\n  'type': 'bar'\n};\ntrace4 = {\n  'x': x,\n  'y': pk.speed,\n  'name': 'speed',\n  'type': 'bar'\n};\ndata = [trace1, trace2, trace3, trace4];\nlayout = {\n  'xaxis': {'title': 'Top 3 Pokemons'},\n  'barmode': 'relative',\n  'title': 'Hp, Attack, Defense and Speed of top 3 Pokemons(Generation=1)'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","4dcbe87e":"# prepare data frames\npk = pokemon.iloc[:3,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# create trace1 \ntrace1 = go.Bar(\n                x = pk.name,\n                y = pk.hp,\n                name = \"hp\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace2 \ntrace2 = go.Bar(\n                x = pk.name,\n                y = pk.attack,\n                name = \"attack\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace3 \ntrace3 = go.Bar(\n                x = pk.name,\n                y = pk.defense,\n                name = \"defense\",\n                marker = dict(color = 'rgba(1, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace4 \ntrace4 = go.Bar(\n                x = pk.name,\n                y = pk.speed,\n                name = \"speed\",\n                marker = dict(color = 'rgba(1, 128, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace5\ntrace5 = go.Bar(\n                x = pk.name,\n                y = pk.sp_atk,\n                name = \"Special Attack\",\n                marker = dict(color = 'rgba(1, 128, 8, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace6\ntrace6 = go.Bar(\n                x = pk.name,\n                y = pk.sp_def,\n                name = \"Special Defense\",\n                marker = dict(color = 'rgba(128, 3, 255, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace7 \ntrace7 = go.Bar(\n                x = pk.name,\n                y = pk.total,\n                name = \"Total Power\",\n                marker = dict(color = 'rgba(100, 255, 50, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\ndata = [trace1, trace2, trace3, trace4, trace5, trace6, trace7]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","64e43fed":"# prepare data frames\npk = pokemon.iloc[:3,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# create trace1 \ntrace1 = go.Bar(\n                x = pk.name,\n                y = pk.hp,\n                name = \"hp\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace2 \ntrace2 = go.Bar(\n                x = pk.name,\n                y = pk.attack,\n                name = \"attack\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace3 \ntrace3 = go.Bar(\n                x = pk.name,\n                y = pk.defense,\n                name = \"defense\",\n                marker = dict(color = 'rgba(1, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace4 \ntrace4 = go.Bar(\n                x = pk.name,\n                y = pk.speed,\n                name = \"speed\",\n                marker = dict(color = 'rgba(1, 128, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace5\ntrace5 = go.Bar(\n                x = pk.name,\n                y = pk.sp_atk,\n                name = \"Special Attack\",\n                marker = dict(color = 'rgba(1, 128, 8, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace6\ntrace6 = go.Bar(\n                x = pk.name,\n                y = pk.sp_def,\n                name = \"Special Defense\",\n                marker = dict(color = 'rgba(128, 3, 255, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\n# create trace7 \ntrace7 = go.Bar(\n                x = pk.name,\n                y = pk.total,\n                name = \"Total Power\",\n                marker = dict(color = 'rgba(100, 255, 50, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = pk.type_1)\ndata = [trace1, trace2, trace3, trace4, trace5, trace6, trace7]\nlayout = go.Layout(barmode = \"relative\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","830d6fce":"# data preparation\npk = pokemon.total[:10]\nlabels = pokemon.name\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pk,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Total Power of Pokemon\",\n      \"hoverinfo\":\"label+percent+name\",#name => title\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Total Power of top 10 Pokemons\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20}, #text size\n              \"showarrow\": True,\n              \"text\": \"Number of Pokemons\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","054e2b7c":"# data preparation\npk = pokemon.iloc[:20,:]\npk_size  = pk.hp\/3 # grafi\u011fe g\u00f6re ortalama boyu k\u00fc\u00e7\u00fclt\u00fcyoruz\npk_color = pk.speed\ndata = [\n    {\n        'y': pk.sp_atk,\n        'x': pk.pk_number,\n        'mode': 'markers',\n        'marker': {\n            'color': pk_color,\n            'size': pk_size,\n            'showscale': True\n        },\n        \"text\" :  pk.name    \n    }\n]\niplot(data)","c9ccf2d3":"# prepare data\npk1 = pokemon.total[pokemon.generation == 1]\npk2 = pokemon.total[pokemon.generation == 2]\n\ntrace1 = go.Histogram(\n    x=pk1,\n    opacity=0.75,\n    name = \"Pokemon Total Power(Generation=1)\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=pk2,\n    opacity=0.75,\n    name = \"Pokemon Total Power(Generation=2)\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title='Pokemon Total Power Generation=1 and Generation=2',\n                   xaxis=dict(title='Pokemon Total Power'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","05384121":"# data preparation\npk_type = pokemon.type_1\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(pk_type))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","78fe66be":"# data preparation\npk = pokemon.iloc[:,:]\n\ntrace1 = go.Box(\n    y=pk.sp_atk,\n    name = 'Speacial Attack of Pokemons',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace2 = go.Box(\n    y=pk.sp_def,\n    name = 'Speacial Defense of Pokemons',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace1, trace2]\niplot(data)","4f25cf22":"# data preparation\npk = pokemon.iloc[:,:]\n\ntrace1 = go.Box(\n    x=pk.legendary,\n    y=pk.sp_atk,\n    name = 'Speacial Attack of Pokemons',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace2 = go.Box(\n    x=pk.legendary,\n    y=pk.sp_def,\n    name = 'Speacial Defense of Pokemons',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    yaxis=dict(\n        title='normalized moisture',\n        zeroline=False\n    ),\n    boxmode='group'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5672929f":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\npk = pokemon.iloc[:400,:]\npk_new = pk.loc[:,[\"total\",\"sp_atk\", \"sp_def\"]]\npk_new[\"index\"] = np.arange(1,len(pk_new)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(pk_new, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","90ba5cbc":"# data preparation\npk = pokemon.iloc[:100,:]\n\n# first line plot\ntrace1 = go.Scatter(\n    x=pk.pk_number,\n    y=pk.sp_atk,\n    name = \"Speacial Attack\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=pk.pk_number,\n    y=pk.sp_def,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Speacial Defense\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Speacial Attack and Speacial Defense'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","3cc1415e":"# data preparation\npk = pokemon.iloc[:100,:]\n\n# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=pk.pk_number,\n    y=pk.sp_atk,\n    z=pk.hp,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","0c03dc78":"# data preparation\npk = pokemon.iloc[:100,:]\n\ntrace1 = go.Scatter(\n    x=pk.pk_number,\n    y=pk.attack,\n    name = \"research\"\n)\ntrace2 = go.Scatter(\n    x=pk.pk_number,\n    y=pk.defense,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"citations\"\n)\ntrace3 = go.Scatter(\n    x=pk.pk_number,\n    y=pk.speed,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"income\"\n)\ntrace4 = go.Scatter(\n    x=pk.pk_number,\n    y=pk.total,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"total_score\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Attack, Defense, Speed and Total Power of Pokemons'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ca2fa47c":"![](https:\/\/i.pinimg.com\/originals\/cf\/f2\/be\/cff2bef49cb7f9a0af7c845c0f2be3c2.jpg)","c5941456":"<a id=\"9\"><\/a> <br>\n# Box Plots\n<font color='red'>\n* Box Plots\n    * Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n        * 25th percentile = quartile 1 (Q1) that is lower quartile\n        * 75th percentile = quartile 3 (Q3) that is higher quartile\n        * height of box = IQR = interquartile range = Q3-Q1\n        * Whiskers = 1.5 * IQR from the Q1 and Q3\n        * Outliers = being more than 1.5*IQR away from median commonly.\n        \n    <font color='black'>\n    * trace = box\n        * y = data we want to visualize with box plot \n        * marker = color","27368c77":"<a id=\"8\"><\/a> <br>\n# Word Cloud\nNot a pyplot but learning it is good for visualization. Lets look at which Pokemon type_2 is mentioned most.\n* WordCloud = word cloud library that I import at the beginning of kernel\n    * background_color = color of back ground\n    * generate = generates the country name list(x2011) a word cloud","ade39999":"<a id=\"3\"><\/a> <br>\n# Scatter\n<font color='red'>\nScatter Example: Total Power vs Generation of top 100 Pokemons with gen1,gen2,gen3,gen4 and gen5\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n    * y axis = it is dictionary and same with x axis\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","6ed6a4a2":"<a id=\"2\"><\/a> <br>\n# Line Charts\n<font color='red'>\nLine Charts Example: Speacial Attack and Speacial Defense of Top 100 Pokemons\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","cc61ec53":"<font color='red'>\nSecond Bar Charts Example: Hp, Attack, Defense and Speed of top 3 Pokemons(Generation=1)(style2)\n<br> Actually, if you change only the barmode from *group* to *relative* in previous example, you achieve what we did here. However, for diversity I use different syntaxes. \n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * name = name of the plots\n    * type = type of plot like bar plot\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * xaxis = label of x axis\n    * barmode = bar mode of bars like grouped( previous example) or relative\n    * title = title of layout\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","0dcf833e":"<a id=\"13\"><\/a> <br>\n# Multiple Subplots\n<font color='red'>\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.\n<font color='black'>\n\n","db4c234f":"<a id=\"11\"><\/a> <br>\n# Inset Plots\n<font color='red'>\nInset Matrix = 2 plots are in one frame\n<font color='black'>","3cd5e3dd":"<a id=\"4\"><\/a> <br>\n# Bar Charts\n<font color='red'>\nFirst Bar Charts Example:Hp, Attack, Defense and Speed of top 3 Pokemons(Generation=1)\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        * line = It is dictionary. line between bars\n            * color = line color around bars\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * barmode = bar mode of bars like grouped\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","7e75abe0":"# INTRODUCTION\n* In this kernel, we will learn how to use plotly library.\n    * Plotly library: Plotly's Python graphing library makes interactive, publication-quality graphs online. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts.\n\n<br>Content:\n* [Loading Data and Explanation of Features](#1)\n* [Line Charts](#2)\n* [Scatter Charts](#3)\n* [Bar Charts](#4)\n* [Pie Charts](#5)\n* [Bubble Charts](#6)\n* [Histogram](#7)\n* [Word Cloud](#8)\n* [Box Plot](#9)\n* [Scatter Plot Matrix](#10)\n* [Inset Plots](#11)\n* [3D Scatter Plot with Colorscaling](#12)\n* [Multiple Subplots](#13)\n\n","a73a63f4":"<a id=\"6\"><\/a> <br>\n# Bubble Charts\n<font color='red'>\nBubble Charts Example: Number of Pokemons (first 20) vs Speacial Attack with hp(size) and speed (color)\n<font color='black'>\n* x = x axis\n* y = y axis\n* mode = markers(scatter)\n*  marker = marker properties\n    * color = third dimension of plot. Internaltional score\n    * size = fourth dimension of plot. Number of students\n* text: university names","6265fb87":"<a id=\"5\"><\/a> <br>\n# Pie Charts\n<font color='red'>\nPie Charts Example: Total Power of top 10 Pokemons\n<font color='black'>\n* fig: create figures\n    * data: plot type\n        * values: values of plot\n        * labels: labels of plot\n        * name: name of plots\n        * hoverinfo: information in hover\n        * hole: hole width\n        * type: plot type like pie\n    * layout: layout of plot\n        * title: title of layout\n        * annotations: font, showarrow, text, x, y","10fc2913":"<a id=\"10\"><\/a> <br>\n# Scatter Matrix Plots\n<font color='red'>\nScatter Matrix = it helps us to see covariance and relation between more than 2 features\n<font color='black'>\n* import figure factory as ff\n* create_scatterplotmatrix = creates scatter plot\n    * pk = prepared data. It includes total, sp_atk and tsp_def with index from 1 to 400\n    * colormap = color map of scatter plot\n    * colormap_type = color type of scatter plot\n    * height and weight","5ac90e81":"<a id=\"12\"><\/a> <br>\n# 3D Scatter Plot with Colorscaling\n<font color='red'>\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.\n<font color='black'>\n* go.Scatter3d: create 3d scatter plot\n* x,y,z: axis of plots\n* mode: market that is scatter\n* size: marker size\n* color: axis of colorscale\n* colorscale:  actually it is 4th dimension","57fb9836":"<a id=\"7\"><\/a> <br>\n# Histogram\n<font color='red'>\nHistogram Example: Pokemon Total Power Generation=1 and Generation=2\n    <font color='black'>\n* trace1 = first histogram\n    * x = x axis\n    * y = y axis\n    * opacity = opacity of histogram\n    * name = name of legend\n    * marker = color of histogram\n* trace2 = second histogram\n* layout = layout \n    * barmode = mode of histogram like overlay. Also you can change it with *stack*","19173ddb":"<a id=\"1\"><\/a> <br>\n# Loading Data and Explanation of Features\n<font color='red'>\n Pokemon.csv includes 13 features that are:\n    <font color='black'>\n* #: PokeDex index number\n* Name: Name of the Pokemon\n* Type 1: Type of pokemon\n* Type 2: Other Type of Pokemon\n* Total: Sum of Attack, Sp. Atk, Defense, Sp. Def, Speed and HP\n* HP: Hit Points\n* Attack: Attack Strength\n* Defense: Defensive Strength\n* Sp. Atk: Special Attack Strength\n* Sp. Def: Special Defensive Strength\n* Speed: Speed\n* Generation: Number of generation\n* Legendary: True if Legendary Pokemon False if not (more revision on mythical vs legendary needed)","890c3c71":"# Conclusion\n* If you like it, thank you for you upvotes.\n* If you have any question, I will happy to hear it"}}