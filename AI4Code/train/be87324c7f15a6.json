{"cell_type":{"20d5c287":"code","699cccec":"code","fd0070ac":"code","4f688e81":"code","e8af675c":"code","404e6540":"code","d25e2370":"code","acf02abb":"code","edf31852":"code","a5e16ccb":"code","9ebecbb2":"code","29b90996":"code","1cc03c7f":"code","f2d170b5":"code","b82637e9":"code","5132b2b7":"code","c4d73c33":"code","c060a97e":"code","0d176237":"code","6929e1a3":"code","6ec70817":"code","07a79c79":"code","3af47d2d":"code","5c5ac620":"code","e408e698":"code","d64adf44":"code","e57cddf6":"code","b5cffa79":"code","3eb4cc13":"code","c745f7aa":"code","60f105ae":"code","f2b1d56c":"code","d8e2c898":"code","a30299f7":"code","7454c33f":"code","201b1a2e":"code","1fa6d664":"markdown"},"source":{"20d5c287":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","699cccec":"!head \/kaggle\/input\/digit-recognizer\/sample_submission.csv","fd0070ac":"!head \/kaggle\/input\/digit-recognizer\/test.csv","4f688e81":"! wc -l ..\/input\/digit-recognizer\/test.csv","e8af675c":"! wc -l ..\/input\/digit-recognizer\/train.csv","404e6540":"!wc -l ..\/input\/digit-recognizer\/sample_submission.csv","d25e2370":"# read train \ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\nprint(train.shape)\ntrain.head()","acf02abb":"# read test \ntest= pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint(test.shape)\ntest.head()","edf31852":"# put labels into y_train variable\nY_train = train[\"label\"]\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) ","a5e16ccb":"train[\"label\"].value_counts(normalize=True)*100","9ebecbb2":"import seaborn as sns\nfrom matplotlib import pyplot as plt","29b90996":"# visualize number of digits classes\nplt.figure(figsize=(15,7))\ng = sns.countplot(Y_train, palette=\"icefire\")\nplt.title(\"Number of digit classes\")\nY_train.value_counts()","1cc03c7f":"# plot some samples\nimg = X_train.iloc[0].to_numpy()\nimg=img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[0,0])\nplt.show()","f2d170b5":"# plot some samples\nimg = X_train.iloc[10].to_numpy()\nimg=img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[10,0])\nplt.show()","b82637e9":"# plot some samples\nimg = X_train.iloc[100].to_numpy()\nimg=img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[100,0])\nplt.show()","5132b2b7":"#Normalization\n#Images 28*28","c4d73c33":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","c060a97e":"# Reshape\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","0d176237":"# Label Encoding \nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nY_train = to_categorical(Y_train, num_classes = 10)","6929e1a3":"# Split the train and the validation set for the fitting\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_val shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_val shape\",Y_val.shape)","6ec70817":"# \nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#Layer-1\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n#Layer-2\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","07a79c79":"model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])","3af47d2d":"model.summary()","5c5ac620":"epochs = 10  # for better result increase the epochs\nbatch_size = 250","e408e698":"# Fit the model\nhistory=model.fit(\n    X_train, \n    Y_train, \n    epochs=10, \n    batch_size=250, validation_data = (X_val,Y_val))","d64adf44":"y_pred=model.predict(test)","e57cddf6":"y_pred.shape","b5cffa79":"y_pred[0]","3eb4cc13":"Y_pred_classes = np.argmax(y_pred,axis = 1) ","c745f7aa":"sample=pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")","60f105ae":"sample.columns","f2b1d56c":"submission_final_v1=pd.DataFrame(Y_pred_classes,columns=['Label'])","d8e2c898":"submission_final_v1['ImageId']=np.arange(1,28001)","a30299f7":"submission_final_v1.to_csv(\".\/submission_cnn_model.csv\",index=False)","7454c33f":"submission_final_v1","201b1a2e":"# Schedule a LR\n# Using other optimisers\n# Use data augmentation\n# Using pretrained models(finetuning)","1fa6d664":"# Loading our datasets"}}