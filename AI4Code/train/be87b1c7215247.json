{"cell_type":{"8fec1938":"code","5c6f7f7d":"code","5c120a6f":"code","946cc799":"code","b8c31cb3":"code","1bca0ae7":"code","e8df3199":"code","524dfce5":"code","81aa59d4":"code","c24a168e":"code","bb8d7307":"code","40436760":"code","035e86a1":"code","c76dbd00":"code","40fbbedd":"code","4c9ef57d":"code","6859021d":"code","a6caacf3":"code","ef4181ec":"code","96074365":"code","262d964a":"code","2eb5fcac":"code","0d6bae63":"code","1dd4750e":"code","7aa71aca":"code","50469f83":"code","14ab3d24":"code","594445a3":"code","07f08d05":"code","8586f0de":"code","eeb357b8":"code","660a4d61":"code","b704944e":"code","9e5b23e1":"code","7e2494e0":"code","03328197":"code","f0b66921":"code","7b719cb5":"code","38f487e7":"code","aaea3114":"code","252fb5d7":"code","f6138367":"code","a27623ca":"code","30ce668b":"code","c4ae320a":"code","fc6533b4":"code","e6f67893":"code","345919e3":"code","cdffbb37":"code","62b0eaab":"code","fc68da8f":"code","a9ab69ca":"code","ecc8d08d":"code","1d8e7c73":"code","f23d8919":"code","ffd04d06":"code","b77fde46":"code","401ba0d5":"code","cdc905b5":"code","b3486872":"code","2a614486":"code","eb9c5250":"code","142e15f2":"code","3afc3a31":"code","23e93a99":"code","26e0d09b":"code","5cb211d1":"code","1a7f4a83":"code","c3cd8a1e":"code","f9ea1d2b":"code","ee3f9ed0":"code","395f16dc":"code","94a67251":"code","984e3934":"code","231fba69":"code","ee5507a6":"code","b5b4eb1b":"code","5dbeb673":"code","0ce6c0b8":"code","551b3546":"code","b37f66b7":"code","308c95ed":"code","a92a2af4":"code","9fe0a6f1":"code","42ca9682":"code","9394124b":"markdown","7cbdd0b8":"markdown","5eb6d91e":"markdown","86574015":"markdown"},"source":{"8fec1938":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport datetime as dt","5c6f7f7d":"flight_data = pd.read_excel('..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')","5c120a6f":"pd.set_option('display.max_columns',None)","946cc799":"flight_data.iloc[6474]","b8c31cb3":"flight_data.drop(6474,axis=0,inplace=True)","1bca0ae7":"flight_data","e8df3199":"flight_data.isnull().sum()","524dfce5":"flight_data.dropna(inplace=True)","81aa59d4":"flight_data.isnull().sum()","c24a168e":"flight_data.info()","bb8d7307":"pd.to_datetime(flight_data['Date_of_Journey'],format=\"%d\/%m\/%Y\").dt.weekday","40436760":"pd.to_datetime(flight_data['Date_of_Journey']).dt.day","035e86a1":"flight_data['Journey_Day'] = pd.to_datetime(flight_data['Date_of_Journey'],format=\"%d\/%m\/%Y\").dt.day\nflight_data['Journey_Month'] = pd.to_datetime(flight_data['Date_of_Journey'],format=\"%d\/%m\/%Y\").dt.month\nflight_data['Journey_Weekday'] = pd.to_datetime(flight_data['Date_of_Journey'],format=\"%d\/%m\/%Y\").dt.weekday\n","c76dbd00":"flight_data.drop('Date_of_Journey',axis=1,inplace=True)","40fbbedd":"flight_data","4c9ef57d":"sns.catplot(x= 'Journey_Weekday',y = 'Price',data=flight_data,kind='bar',aspect=2 ,height=6,hue='Total_Stops')\nplt.style.use(\"ggplot\")","6859021d":"flight_data['Route'].str.split('\u2192',expand=True).head(40)","a6caacf3":"flight_data['Route'].str.split('\u2192',expand=True).tail(40)","ef4181ec":"flight_data['Route1']=flight_data['Route'].str.split('\u2192').str[0]\nflight_data['Route2']=flight_data['Route'].str.split('\u2192').str[1]\nflight_data['Route3']=flight_data['Route'].str.split('\u2192').str[2]\nflight_data['Route4']=flight_data['Route'].str.split('\u2192').str[3]\nflight_data['Route5']=flight_data['Route'].str.split('\u2192').str[4]","96074365":"flight_data","262d964a":"for i in ['Route3', 'Route4', 'Route5']:\n    flight_data[i].fillna('0',inplace=True)","2eb5fcac":"from sklearn.preprocessing import LabelEncoder","0d6bae63":"encoder = LabelEncoder()","1dd4750e":"for i in ['Route1', 'Route2', 'Route3', 'Route4', 'Route5']:\n    flight_data[i]=encoder.fit_transform(flight_data[i])","7aa71aca":"flight_data","50469f83":"flight_data.isnull().sum()","14ab3d24":"flight_data['Dep_Hour'] = pd.to_datetime(flight_data['Dep_Time']).dt.hour\nflight_data['Dep_Min'] = pd.to_datetime(flight_data['Dep_Time']).dt.minute","594445a3":"flight_data","07f08d05":"flight_data['Arrival_Hour'] = pd.to_datetime(flight_data['Arrival_Time']).dt.hour\nflight_data['Arrival_Min'] = pd.to_datetime(flight_data['Arrival_Time']).dt.minute","8586f0de":"flight_data","eeb357b8":"flight_data.drop(['Dep_Time','Arrival_Time','Route'],axis=1,inplace=True)","660a4d61":"flight_data","b704944e":"duration = flight_data['Duration'].str.strip().str.split(' ',expand=True)","9e5b23e1":"duration.fillna(0,inplace=True)","7e2494e0":"duration.columns = ['Duration_Hour','Duration_Min']","03328197":"duration['Duration_Hour']= duration['Duration_Hour'].str.replace('h','').str.strip()\nduration['Duration_Min']= duration['Duration_Min'].str.replace('m','').str.strip()","f0b66921":"duration.fillna(0,inplace=True)","7b719cb5":"duration['Duration_Hour']= duration['Duration_Hour'].astype(str).astype(int)\nduration['Duration_Min']= duration['Duration_Min'].astype(str).astype(int)","38f487e7":"flight_data = pd.concat([flight_data,duration],axis=1)","aaea3114":"flight_data","252fb5d7":"flight_data.drop('Duration',axis=1,inplace=True)","f6138367":"flight_data","a27623ca":"flight_data.isnull().sum()","30ce668b":"flight_data['Total_Stops'].value_counts().index","c4ae320a":"key = ('1 stop', 'non-stop', '2 stops', '3 stops', '4 stops')\nvalue = (1,0,2,3,4)\nkey_v = dict(zip(key,value))","fc6533b4":"flight_data['Total_Stops'] = flight_data['Total_Stops'].map(key_v)","e6f67893":"flight_data","345919e3":"flight_data['Additional_Info'].value_counts()","cdffbb37":"flight_data.groupby('Additional_Info')['Price'].mean().plot.bar()\n","62b0eaab":"flight_data.groupby(['Additional_Info','Total_Stops'])['Price'].mean().sort_values()","fc68da8f":"flight_data['Additional_Info'] = np.where(flight_data['Additional_Info']=='No info','No Info',flight_data['Additional_Info'])","a9ab69ca":"flight_data","ecc8d08d":"flight_data.info()","1d8e7c73":"def one_hot(data,columns):\n    final_data = data\n    i=0\n    for feat in columns:\n        dummies = pd.get_dummies(data[feat],drop_first=True,prefix=feat)\n        data.drop([feat],axis=1,inplace=True)\n        \n        if i==0:\n            final_data = dummies.copy()\n        else:\n            final_data = pd.concat([final_data,dummies],axis=1)\n        i+=1\n        \n    final_data = pd.concat([data,final_data],axis=1)\n    \n    return final_data\n            ","f23d8919":"categorical_cols = [feat for feat in flight_data.columns if flight_data[feat].dtype=='O']","ffd04d06":"categorical_cols","b77fde46":"flight_data_train = one_hot(flight_data,categorical_cols)","401ba0d5":"flight_data_train","cdc905b5":"X = flight_data_train.drop('Price',axis=1)","b3486872":"X","2a614486":"y = flight_data_train['Price']","eb9c5250":"y","142e15f2":"from sklearn.ensemble import ExtraTreesRegressor","3afc3a31":"select = ExtraTreesRegressor()\nselect.fit(X,y)","23e93a99":"\n\n#plot graph of feature importances for better visualization\nplt.style.use(\"ggplot\")\nplt.figure(figsize = (15,8))\nfeat_importances = pd.Series(select.feature_importances_, index=X.columns)\nfeat_importances.nlargest(35).plot(kind='bar')\nplt.show()\n\n","26e0d09b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)","5cb211d1":"from sklearn.ensemble import RandomForestRegressor\nreg_rf = RandomForestRegressor()\nreg_rf.fit(X_train, y_train)\n\n","1a7f4a83":"\n\ny_pred = reg_rf.predict(X_test)\n\n","c3cd8a1e":"reg_rf.score(X_train, y_train)","f9ea1d2b":"reg_rf.score(X_test, y_test)","ee3f9ed0":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,8))\nsns.distplot(y_test-y_pred)\nplt.show()\n\n","395f16dc":"plt.figure(figsize=(12,8))\nplt.style.use(\"ggplot\")\nplt.scatter(y_test, y_pred, alpha = 0.5)\nplt.xlabel(\"y_test\")\nplt.ylabel(\"y_pred\")\nplt.show()\n\n","94a67251":"from sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n\n","984e3934":"metrics.r2_score(y_test, y_pred)","231fba69":"from sklearn.model_selection import RandomizedSearchCV","ee5507a6":"#Randomized Search CV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1500, num = 15)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 3, 5, 7, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2,3, 5,8, 10]","b5b4eb1b":"# Create the random grid\n\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}","5dbeb673":"rf_random = RandomizedSearchCV(estimator = reg_rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 50, cv = 5,\n                               verbose=2, random_state=42, n_jobs = 3)","0ce6c0b8":"\n\nrf_random.fit(X_train,y_train)\n\n","551b3546":"rf_random.best_params_","b37f66b7":"prediction = rf_random.predict(X_test)","308c95ed":"plt.figure(figsize = (8,8))\nsns.distplot(y_test-prediction)\nplt.show()","a92a2af4":"\nplt.style.use(\"ggplot\")\nplt.figure(figsize = (10,8))\nplt.scatter(y_test, prediction, alpha = 0.5)\nplt.xlabel(\"y_test\")\nplt.ylabel(\"y_pred\")\nplt.show()\n\n","9fe0a6f1":"print('MAE :', metrics.mean_absolute_error(y_test, prediction))\nprint('MSE :', metrics.mean_squared_error(y_test, prediction))\nprint('RMSE :', np.sqrt(metrics.mean_squared_error(y_test, prediction)))","42ca9682":"metrics.r2_score(y_test, prediction)","9394124b":"# Categorical data","7cbdd0b8":"# RandomizedSearchCV","5eb6d91e":"# # Importing dataset\n\n1.    Since data is in form of excel file we have to use pandas read_excel to load the data\n2.    After loading it is important to check the complete information of data as it can indication many of the hidden infomation such as null values in a column or a row\n3.    Check whether any null values are there or not. if it is present then following can be done,\n4.    Imputing data using Imputation method in sklearn\n5.    Filling NaN values with mean, median and mode using fillna() method\n6.    Describe data --> which can give statistical analysis\n\n","86574015":"# Spliting Dataset"}}