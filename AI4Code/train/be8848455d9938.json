{"cell_type":{"8eff83bf":"code","1e40585d":"code","40754337":"code","74506d3b":"code","5ac19c62":"code","27ddeaeb":"code","8b196097":"code","f679fff5":"code","89ce34c3":"code","410aece5":"code","5b2d0913":"code","b17f3381":"code","610e77ba":"code","5822d446":"code","a5c8568e":"code","c98bbafd":"code","4829ffae":"code","eb58b1b6":"code","09359d42":"code","ce7cca9b":"code","6254257b":"code","f4691627":"code","e6e2aaf2":"code","cda6af2a":"code","c1dec8d2":"code","18e4e08b":"code","442634a9":"markdown","006065a5":"markdown","12164653":"markdown","94c9e886":"markdown","6af02bec":"markdown","c2d999dd":"markdown"},"source":{"8eff83bf":"import os\nimport cv2\nimport math\nimport json\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt","1e40585d":"train_df = pd.read_csv('..\/input\/petfinder-adoption-prediction\/train\/train.csv')\ntest_df = pd.read_csv('..\/input\/petfinder-adoption-prediction\/test\/test.csv')","40754337":"print(train_df.shape)\nprint(test_df.shape)\ntrain_df.head()","74506d3b":"# get target variable\nname_target_dict = train_df.set_index('PetID')['AdoptionSpeed'].to_dict()\ntrain_image_names = os.listdir('..\/input\/petfinder-adoption-prediction\/train_images')\ntest_image_names = os.listdir('..\/input\/petfinder-adoption-prediction\/test_images')","5ac19c62":"# name_target_dict","27ddeaeb":"# display random saple of the photos\ndef display_samples(columns=4, rows=4):\n    fig=plt.figure(figsize=(5*columns, 3*rows))\n\n    for i in range(columns*rows):\n        image_path = train_image_names[i]\n        image_id = name_target_dict[image_path.split('-')[0]]\n        img = cv2.imread(f'..\/input\/petfinder-adoption-prediction\/train_images\/{image_path}')\n        fig.add_subplot(rows, columns, i+1)\n        plt.title(image_id)\n        plt.imshow(img)\n\ndisplay_samples()","8b196097":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n# create empty dataframe to be used by the generator \ngenerator_dict = {'filename': [], 'class': []}\n\nfor name in train_image_names:\n    # get the label of the main image without the numbering part\n    short_name = name.split('-')[0]\n    label = name_target_dict[short_name]\n    \n    generator_dict['filename'].append(name)\n    generator_dict['class'].append(label)\n\ngenerator_df = pd.DataFrame(generator_dict)\ngenerator_df['class'] = generator_df['class'].astype(str)  \n\ngenerator_df.head()","f679fff5":"datagen = ImageDataGenerator(\n    rotation_range=15,  # randomly rotate images in the range (degrees, 0 to 180)\n    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n    shear_range=0.1,  # set range for random shear\n    zoom_range=0.1,  # set range for random zoom\n    horizontal_flip=True,  # randomly flip images\n    rescale=1\/255., # set rescaling factor\n    validation_split=0.1    # fraction of images reserved for validation\n)","89ce34c3":"def create_generator(subset):\n    return datagen.flow_from_dataframe(\n        generator_df, \n        '..\/input\/petfinder-adoption-prediction\/train_images', \n        x_col='filename',\n        y_col='class', \n        target_size=(100, 100), \n        color_mode='rgb',\n        class_mode='categorical', \n        batch_size=128, \n        shuffle=True, \n        seed=42,\n        subset=subset\n    )\n\ntrain_generator = create_generator('training')\nval_generator = create_generator('validation')","410aece5":"import keras\nfrom keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.applications import DenseNet121\n\nmodel = DenseNet121(\n    weights=None, \n    include_top=True, \n    classes=5,\n    input_shape=(100, 100, 3)\n)\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\nmodel.summary()","5b2d0913":"checkpoint = ModelCheckpoint(\n    'model.h5', \n    monitor='val_acc', \n    verbose=0, \n    save_best_only=True, \n    save_weights_only=False,\n    mode='auto'\n)","b17f3381":"history = model.fit(\n    train_generator,\n    steps_per_epoch=75000 \/ 128, \n    epochs=10,\n    callbacks=[checkpoint],\n    validation_data=val_generator,\n    use_multiprocessing=True,\n    workers=2, \n    verbose=1\n)","610e77ba":"# model.load_weights('model.h5')\n\nval_scores = model.evaluate_generator(\n    generator=val_generator,\n    steps=len(val_generator),\n    use_multiprocessing=True,\n    verbose=1,\n    workers=2\n)\n\nprint('\\nValidation loss:', val_scores[0])\nprint('Validation accuracy:', val_scores[1])","5822d446":"sample_submission_df = pd.read_csv('..\/input\/petfinder-adoption-prediction\/test\/sample_submission.csv')\nprint(sample_submission_df.shape)\nsample_submission_df.head()","a5c8568e":"# create submission Dictionary like the above one\nsubmission_dict = {'PetID': [], 'filename': []}\n\nfor name in test_image_names:\n    pet_id = name.split('-')[0]\n    submission_dict['PetID'].append(pet_id)\n    submission_dict['filename'].append(name)\n    \nsubmission_df = pd.DataFrame(submission_dict)\nsubmission_df.head()","c98bbafd":"# generator for predection\ntest_generator = ImageDataGenerator(rescale=1\/255.).flow_from_dataframe(\n    submission_df,\n    '..\/input\/petfinder-adoption-prediction\/test_images',\n    target_size=(100, 100),\n    color_mode='rgb',\n    batch_size=256,\n    shuffle=False,\n    class_mode=None # no labels are returned. better for validation and testing\n)","4829ffae":"test_predictions = model.predict_generator(\n    test_generator,\n    workers=2, \n    use_multiprocessing=True, \n    verbose=1\n)","eb58b1b6":"submission_df = submission_df.join(pd.DataFrame(test_predictions))\nsubmission_df.drop(columns=['filename'], inplace=True)\nprint(submission_df.shape)\nsubmission_df.head()","09359d42":"#Take the average of the classes probabilities for each pet \n# (since we have multiple pictures of each pet).\n\nsubmission_df = submission_df.groupby('PetID', as_index=False).mean()\nprint(submission_df.shape)\nsubmission_df.head()","ce7cca9b":"# Select the class with highest probability to be added to the dataframe, \n# drop the class probabilities.\n\nsubmission_df['AdoptionSpeed'] = submission_df.iloc[:,1:6].values.argmax(axis=1)\nsubmission_df.drop(columns=[0,1,2,3,4], inplace=True)\nprint(submission_df.shape)\nsubmission_df.head()","6254257b":"submission_df = sample_submission_df.drop('AdoptionSpeed', axis = 1).merge(submission_df, on = 'PetID', how = 'left')","f4691627":"submission_df.isna().sum()","e6e2aaf2":"submission_df = submission_df.fillna(4.0)","cda6af2a":"submission_df.isna().sum()","c1dec8d2":"submission_df['AdoptionSpeed'] = submission_df['AdoptionSpeed'].astype(int)","18e4e08b":"submission_df.to_csv('submission.csv',index=False)","442634a9":"### Evaluation","006065a5":"### Submission","12164653":"##### Create dategen object","94c9e886":"##### DataGenerator from dataframe","6af02bec":"### Model","c2d999dd":"Each image has its label over it.  \n"}}