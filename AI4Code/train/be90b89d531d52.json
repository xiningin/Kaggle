{"cell_type":{"7ad2c9ff":"code","09cd7a23":"code","e0380e50":"code","12b6dd33":"code","c3cf9c27":"code","13f3dbc1":"code","c91aeb6f":"code","7164cc22":"code","b2244cb2":"code","aa37b996":"code","8c80d0d2":"code","f5184914":"code","d71ae00b":"code","1173c0b3":"code","28441ee6":"code","44574f79":"code","21d9b13a":"code","fa624e42":"code","a4d4a5fa":"code","1316188e":"code","54b795ca":"code","09af5394":"code","cc7d1a05":"code","4eaa7a2c":"code","d91a3442":"code","4e6d62b0":"code","8865e73b":"code","a0013fcc":"markdown","28be1f25":"markdown","820259a9":"markdown","31faf00a":"markdown","5a7d1c9b":"markdown","1cdfcc35":"markdown","08e9a292":"markdown","fb43f7f7":"markdown","5992d444":"markdown","4be17bba":"markdown","45607989":"markdown","b326c100":"markdown"},"source":{"7ad2c9ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom scipy import stats\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","09cd7a23":"data = pd.read_csv(r'\/kaggle\/input\/top50spotify2019\/top50.csv',encoding='ISO-8859-1')\ndata.head()","e0380e50":"print(\"Number of datapoints in the data : \",data.shape[0])\nprint(\"Number of features in the data : \",data.shape[1])\nprint(\"Features :\",data.columns.values)","12b6dd33":"data.info()","c3cf9c27":"data.describe()","13f3dbc1":"data.dtypes","c91aeb6f":"print(\"Number of duplicate values : \",data.duplicated().sum())","7164cc22":"plt.figure(figsize=(20,20))\nsns.pairplot(data)\nplt.show()","b2244cb2":"plt.figure(figsize=(10,8))\nsns.countplot('Genre',data=data)\nplt.xticks(rotation=90)\nplt.title(\"Number of songs by genres\")\nplt.show()","aa37b996":"plt.figure(figsize=(15,8))\nsns.countplot('Artist.Name',data=data)\nplt.xticks(rotation=90)\nplt.title(\"Number of songs by each atrist\")\nplt.show()","8c80d0d2":"energy_genre = (data.groupby(\"Genre\",as_index=False)['Energy'].mean().sort_values(\"Energy\")).reset_index(drop=True)\nprint(energy_genre)\n\nplt.figure(figsize=(10,8))\nplt.plot(energy_genre['Genre'],energy_genre['Energy'],color='green')\nplt.grid()\nplt.xlabel('Genre')\nplt.ylabel('Energy')\nplt.xticks(rotation=90)\nplt.show()\n\nenergy_artistwise = (data.groupby(\"Artist.Name\",as_index=False)['Energy'].mean().sort_values(\"Energy\")).reset_index(drop=True)\nprint(energy_artistwise)\n\nplt.figure(figsize=(10,8))\nplt.plot(energy_artistwise['Artist.Name'],energy_artistwise['Energy'],color='green')\nplt.grid()\nplt.xlabel('Artist Names')\nplt.ylabel('Energy')\nplt.xticks(rotation=90)\nplt.show()","f5184914":"loudness_genre = (data.groupby(\"Genre\",as_index=False)['Loudness..dB..'].mean().sort_values(\"Loudness..dB..\")).reset_index(drop=True)\nprint(loudness_genre)\n\nplt.figure(figsize=(10,8))\nplt.plot(loudness_genre['Genre'],loudness_genre['Loudness..dB..'],color='green')\nplt.grid()\nplt.xlabel('Genre')\nplt.ylabel('Loudness')\nplt.xticks(rotation=90)\nplt.show()\n\nloudness_artistwise = (data.groupby(\"Artist.Name\",as_index=False)['Loudness..dB..'].mean().sort_values('Loudness..dB..')).reset_index(drop=True)\nprint(loudness_artistwise)\n\nplt.figure(figsize=(10,8))\nplt.plot(loudness_artistwise['Artist.Name'],loudness_artistwise['Loudness..dB..'],color='green')\nplt.grid()\nplt.xlabel('Artist Names')\nplt.ylabel('Loudness')\nplt.xticks(rotation=90)\nplt.show()","d71ae00b":"#with the original data\nfig,ax = plt.subplots(4,2,figsize=(20,20))\nsns.distplot(data['Beats.Per.Minute'],color='red',ax=ax[0][0],bins=10)\nsns.distplot(data['Energy'],ax=ax[0][1],color='violet',bins=10)\nsns.distplot(data['Loudness..dB..'],ax=ax[1][0],color='yellow',bins=10)\nsns.distplot(data['Liveness'],ax=ax[1][1],color='blue',bins=10)\nsns.distplot(data['Acousticness..'],ax=ax[2][0],color='green',bins=10)\nsns.distplot(data['Length.'],ax=ax[2][1],color='black',bins=10)\nsns.distplot(data['Popularity'],ax=ax[3][0],color='purple',bins=10)\nsns.distplot(data['Speechiness.'],ax=ax[3][1],color='orange',bins=10)\nplt.show()","1173c0b3":"skew = data.skew()\nskew","28441ee6":"#skewed data\n#using box-cox transformation from scipy-stats\nbpm = np.asarray(data['Beats.Per.Minute'].values)\nbpm_transformed = stats.boxcox(bpm)[0]\nenergy = np.asarray(data['Energy'].values)\nenergy_transformed = stats.boxcox(energy)[0]\nliveness = np.asarray(data['Liveness'].values)\nliveness_transformed = stats.boxcox(liveness)[0]\nAcousticness = np.asarray(data['Acousticness..'].values)\nAcousticness_transformed = stats.boxcox(Acousticness)[0]\nLength = np.asarray(data['Length.'].values)\nLength_transformed = stats.boxcox(Length)[0]\nPopularity = np.asarray(data['Popularity'].values)\nPopularity_transformed = stats.boxcox(Popularity)[0]","44574f79":"Popularity_transformed ","21d9b13a":"fig,ax = plt.subplots(2,2,figsize=(20,20))\nsns.distplot(bpm_transformed,color='red',ax=ax[0][0],bins=10)\nsns.distplot(energy_transformed,ax=ax[0][1],color='violet',bins=10)\nsns.distplot(liveness_transformed,ax=ax[1][0],color='yellow',bins=10)\nsns.distplot(Acousticness_transformed,ax=ax[1][1],color='blue',bins=10)\nplt.show()","fa624e42":"data = data.drop(\"Unnamed: 0\",axis=1)  #removing the unwanted column","a4d4a5fa":"data.head()","1316188e":"plt.figure(figsize=(20,20))\nsns.heatmap(data.corr(),fmt=\".3f\",annot=True,cmap='YlOrBr')\nplt.show()","54b795ca":"plt.subplots(figsize=(15,8))\nsns.boxplot(x='Artist.Name',y='Popularity',data=data)\nplt.title(\"Artist name with respect to Popularity of the song\")\nplt.xticks(rotation=90)\nplt.show()\n\nplt.subplots(figsize=(15,8))\nsns.boxplot(x='Artist.Name',y='Loudness..dB..',data=data)\nplt.title(\"Artist name with respect to Loudness of the song\")\nplt.xticks(rotation=90)\nplt.show()\n\nplt.subplots(figsize=(15,8))\nsns.boxplot(x='Artist.Name',y='Energy',data=data)\nplt.title(\"Artist name with respect to Energy of the song\")\nplt.xticks(rotation=90)\nplt.show()\n\nplt.subplots(figsize=(15,8))\nsns.boxplot(x='Artist.Name',y='Liveness',data=data)\nplt.title(\"Artist name with respect to Liveness of the song\")\nplt.xticks(rotation=90)\nplt.show()\n\nplt.subplots(figsize=(15,8))\nsns.boxplot(x='Artist.Name',y='Length.',data=data)\nplt.title(\"Artist name with respect to Length of the song\")\nplt.xticks(rotation=90)\nplt.show()","09af5394":"plt.subplots(figsize=(15,8))\nsns.boxplot(x='Genre',y='Popularity',data=data)\nplt.title(\"Genre with respect to Popularity of the song\")\nplt.xticks(rotation=90)\nplt.show()\n\nplt.subplots(figsize=(15,8))\nsns.boxplot(x='Genre',y='Loudness..dB..',data=data)\nplt.title(\"Genre with respect to Loudness of the song\")\nplt.xticks(rotation=90)\nplt.show()\n\nplt.subplots(figsize=(15,8))\nsns.boxplot(x='Genre',y='Energy',data=data)\nplt.title(\"Genre with respect to Energy of the song\")\nplt.xticks(rotation=90)\nplt.show()\n\n\nplt.subplots(figsize=(15,8))\nsns.boxplot(x='Genre',y='Liveness',data=data)\nplt.title(\"Genre with respect to Liveness of the song\")\nplt.xticks(rotation=90)\nplt.show()\n\nplt.subplots(figsize=(15,8))\nsns.boxplot(x='Genre',y='Length.',data=data)\nplt.title(\"Genre with respect to Length of the song\")\nplt.xticks(rotation=90)\nplt.show()","cc7d1a05":"fig = px.histogram(data,x='Danceability',y='Popularity')\nfig.show()","4eaa7a2c":"fig = px.histogram(data,x='Speechiness.',y='Popularity')\nfig.show()","d91a3442":"genres = np.unique(data['Genre'])\ngenres","4e6d62b0":"fig = px.pie(data,names='Artist.Name',values='Popularity', title='Artists with the percentage of songs in the data with popularity of songs of each artist')\nfig.show()","8865e73b":"fig = px.pie(data,values ='Popularity',names='Genre', title='Genre with Popularity',template='seaborn')\nfig.update_traces(rotation=90,pull=0.02,textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","a0013fcc":"# **<h1 style=\"color:orange\">Loading the dataset :**","28be1f25":"**<p style=\"color:teal\">No NULL Values found**","820259a9":"**<p style=\"color:teal\">The maximum number of songs in this data is by Ed sheeran.**","31faf00a":"**The max number of songs in the data is of genre dance-pop followed by pop and latin**","5a7d1c9b":"# **<h1 style=\"color:orange\">Boxplots :**","1cdfcc35":"**<p style=\"color:orange\">Hey folks, If you like my effort here please do <span style=\"color:red;font-size:20px\">UPVOTE<\/span> as it inspires me to write more kernels. Thanks for viewing. :)<\/p>**","08e9a292":"# **<h1 style=\"color:orange\">Visualisation :**","fb43f7f7":"**<p style=\"color:teal\">No Duplicate Values found in the data**","5992d444":"# **<h1 style=\"color:orange\">Duplicate Values :**","4be17bba":"**<p style=\"color:teal\">Similar analysis can be done with other features such as Speechiness , Liveness etc...**","45607989":"# **<h1 style=\"color:orange\">Pie Charts :**","b326c100":"**<p style=\"color:teal\">In case you find this notebook useful please do upvote.Thanks for viewing :)**"}}