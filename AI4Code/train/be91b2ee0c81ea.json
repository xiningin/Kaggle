{"cell_type":{"afa7e221":"code","5c7c934d":"code","ad203aee":"code","c6b9c75d":"code","6b9902f6":"markdown"},"source":{"afa7e221":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c7c934d":"BUCKET_SIZE = int(input(\"Enter the maximum bucket size: \"))","ad203aee":"def leaky_bucket(output_rate, packet_size):\n    if packet_size <= output_rate:\n        print(\"Bucket Output is Successful\\nLast {}bytes was sent\".format(packet_size))\n    elif packet_size <= BUCKET_SIZE:\n        print(\"Bucket Output is Successful\")\n        print(\"Last {}bytes was sent\".format(output_rate))\n        rem_size = packet_size - output_rate\n        while rem_size > 0:\n            if rem_size >= output_rate:\n                print(\"Last {}bytes was sent\".format(output_rate))\n            else:\n                print(\"Last {}bytes was sent\".format(rem_size))\n            rem_size -= output_rate\n    else:\n        print(\"Oops, bucket OVERFLOW!!\")","c6b9c75d":"output_rate = int(input(\"Enter bucket output rate: \"))\npackets = int(input(\"Enter the number of packets: \"))\nfor packet in range(packets):\n    print()\n    packet_size = int(input(\"Packet {} Size: \".format(packet)))\n    leaky_bucket(output_rate, packet_size)","6b9902f6":"# **Congestion Control Using Leaky Bucket Algorithm**"}}