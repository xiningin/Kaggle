{"cell_type":{"0e39e5f5":"code","517cf058":"code","b52b352a":"code","df207a73":"code","3772bd89":"code","e6217d93":"code","b8a6ba09":"code","6f03e80d":"code","5f36c54c":"code","ed11dd62":"code","f43233cc":"code","9b23be7f":"code","2fb74fbd":"code","1fa236b4":"code","9b9ade18":"code","f5e395e2":"code","4c06bf25":"code","e5cd0a8f":"code","8deb4be6":"code","f3ad0eb9":"code","fa3b6b95":"code","01c43438":"code","d15ebd91":"code","7ad29e4a":"code","1ef80dd1":"code","acd703ed":"code","bb695d4f":"code","df11ad8d":"code","2c82dbe5":"code","5274ad70":"code","a54aa1c5":"code","977777af":"code","f5b4d498":"code","c5003256":"code","17adf5bb":"code","739b9d9f":"code","489ae4ac":"code","a91d9aca":"code","d6e2eb6c":"code","ca3f6bf0":"code","28d89383":"code","117ab456":"code","3930ba11":"code","a407bca0":"code","1d143d13":"code","5f8dfa85":"code","2e77cf16":"code","b27608c0":"code","ab1959ec":"code","305c2355":"code","d0455c19":"code","39750113":"code","2126a8b9":"markdown"},"source":{"0e39e5f5":"!pip install pywaffle\n!pip install pycomp","517cf058":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport shap\n\nfrom pywaffle import Waffle\nfrom pycomp.viz.insights import *\nfrom cuml.metrics import roc_auc_score, accuracy_score\nfrom cuml.preprocessing.model_selection import train_test_split\nimport xgboost\nimport pickle\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b52b352a":"import sys\n!cp ..\/input\/rapids\/rapids.0.17.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","df207a73":"!pip install cudf","3772bd89":"!pip install dask","e6217d93":"import cudf\nimport cuml\n\nfrom cuml.preprocessing.TargetEncoder import TargetEncoder\nfrom dask.distributed import Client, wait\n#from dask_cuda import LocalCUDACluster\n\n#cluster = LocalCUDACluster()\n#client = Client(cluster)\n#client","b8a6ba09":"from numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import metrics","6f03e80d":"def custom_pallete(custom_colors):\n    customPalette = sns.set_palette(sns.color_palette(custom_colors))\n    sns.palplot(sns.color_palette(custom_colors),size=0.8)\n    plt.tick_params(axis='both', labelsize=0, length = 0)","5f36c54c":"train_df = pd.read_csv(\"\/kaggle\/input\/widsdatathon2021\/TrainingWiDS2021.csv\")\nprint(train_df.shape)","ed11dd62":"test_df=pd.read_csv(\"\/kaggle\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv\")\nprint(test_df.shape)","f43233cc":"data_dictionary = pd.read_csv(\"..\/input\/widsdatathon2021\/DataDictionaryWiDS2021.csv\")","9b23be7f":"data_dictionary.head()","2fb74fbd":"train_df.head()","1fa236b4":"train_df=train_df.drop(columns=['Unnamed: 0'])","9b9ade18":"train_df.head()","f5e395e2":"test_df=test_df.drop(columns=['Unnamed: 0'])","4c06bf25":"test_df.head()","e5cd0a8f":"train_df.describe().T","8deb4be6":"missing_count=train_df.isna().sum()","f3ad0eb9":"missing_df=(pd.concat([missing_count.rename('Missing Count'), missing_count.div(len(train_df)).rename('Missing ratio')],axis=1).loc[missing_count.ne(0)])\nmissing_df","fa3b6b95":"dt_i=[]\ndt_fl=[]\ndt_o=[]\nfor col in train_df.columns:\n    x=train_df[col].dtype\n    if x=='int64':\n        dt_i.append(col)\n    elif x=='float64':\n        dt_fl.append(col)\n    else:\n        dt_o.append(col)","01c43438":"gender = train_df[\"gender\"].value_counts()\nfig = plt.figure(\n    FigureClass=Waffle, \n    rows=5,\n    columns=10,\n    values=gender,\n    colors =[\"#983D3D\",\"#DDD444\"],\n    title={'label': 'Gender Distribution', 'loc': 'center','color': '#983D3D','size':20},\n    labels=[\"{}({})\".format(a, b) for a, b in zip(gender.index, gender) ],\n    legend={'loc': 'upper left', 'bbox_to_anchor': (1,1)},\n    font_size=35, \n    icons = ['male','female'],\n    icon_legend=True,\n    figsize=(10, 8)\n)","d15ebd91":"fig, ax  = plt.subplots(figsize=(16, 8))\nfig.suptitle('Ethnicity Distribution', size = 20)\nexplode =(0.05, 0.05, 0.05, 0.05, 0.3, 0.5)\nlabels = [\"Caucasian\",\"African American\",\"Other\/Unknown\",\"Hispanic\",\"Asian\",\"Native American\"]\nsizes = train_df[\"ethnicity\"].value_counts()\nax.pie(sizes, explode=explode, startangle=60, labels=labels,autopct='%1.0f%%', pctdistance=0.9)\nax.add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","7ad29e4a":"plt.figure(figsize=(16,8))\nplt.title('Hospital Admit Source', size = 20)\nsns.countplot(y ='hospital_admit_source', data = train_df);","1ef80dd1":"plt.figure(figsize = (16,8))\nplt.title('ICU Admit Source', size = 20)\nsns.countplot(y ='icu_admit_source', data = train_df);","acd703ed":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(16,8))\nfig.suptitle('ICU Type and stay Type distribution',size=20)\naxs=[ax1,ax2]\n\nlabels = ['Med-Surg ICU', 'CCU-CTICU', 'MICU','Neuro ICU', 'Cardiac ICU', 'SICU','CSICU','CTICU']\nsizes = train_df['icu_type'].value_counts()\nax1.pie(sizes,startangle=60, labels=labels,autopct='%1.0f%%', pctdistance=0.6)\nax1.add_artist(plt.Circle((0,0),0.4,fc='white'))\n\nexplode = (0.05, 0.05, 0.3)\nlabels = ['admit','transfer', 'readmit']\nsizes = train_df['icu_stay_type'].value_counts()\nax2.pie(sizes, explode=explode,startangle=60, labels=labels,autopct='%1.1f%%', pctdistance=0.9)\nax2.add_artist(plt.Circle((0,0),0.4,fc='white'))","bb695d4f":"def hist(x,title):\n    plt.figure(figsize = (10,8))\n    ax = sns.distplot(x, \n                 kde=False);\n    values = np.array([rec.get_height() for rec in ax.patches])\n    norm = plt.Normalize(values.min(), values.max())\n    colors = plt.cm.jet(norm(values))\n    for rec, col in zip(ax.patches, colors):\n        rec.set_color(col)\n    plt.title(title, size = 20)","df11ad8d":"hist(train_df['age'],'Distribution of Age')","2c82dbe5":"hist(train_df['height'],'Distribution of Height')","5274ad70":"hist(train_df['weight'],'Distribution of Weight')","a54aa1c5":"fig,ax=plt.subplots(1,1,figsize=(20,10))\nax=sns.distplot(train_df['bmi'],kde=False);\nvalues=np.array([rec.get_height() for rec in ax.patches])\nnorm=plt.Normalize(values.min(),values.max())\ncolors=plt.cm.jet(norm(values))\nfor rec, col in zip(ax.patches,colors):\n    rec.set_color(col)\nspan_color=['blue','green','orange','red']\nspan_range=[[0,18],[19,25],[26,30],[31,70]]\n\nfor idx, span_title in enumerate(['Underweight', 'Normal', 'Overweight', 'Obese']):\n    ax.annotate(span_title,\n                    xy=(sum(span_range[idx])\/2 ,1000),\n                    xytext=(0,470), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=10, fontweight='bold',\n                    bbox=dict(boxstyle='sawtooth', pad=0.4, color=span_color[idx], alpha=0.6))\n    ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=span_color[idx], alpha=0.1)\nplt.title(\"Distribution of BMI\", size = 20)\nplt.show()","977777af":"plot = sns.catplot(\"diabetes_mellitus\", col=\"elective_surgery\",data=train_df,kind=\"count\", height=6,aspect=.7);\nplot.fig.suptitle(\"Elective surgery and Diabetes Mellitus\", size = 20, y=1.05);","f5b4d498":"plot=sns.catplot(\"diabetes_mellitus\", col=\"readmission_status\",data=train_df,kind='count',height=6,aspect=0.7)\nplot.fig.suptitle(\"Readmission Status and Diabetes Mellitus\", size = 20,y=1.05);","c5003256":"plot = sns.catplot(\"diabetes_mellitus\", col=\"apache_post_operative\", data=train_df,kind=\"count\", height=6,aspect=.7);\nplot.fig.suptitle(\"APACHE post operative and Diabetes Mellitus\", size = 20,y=1.05);","17adf5bb":"plot_pct_countplot(df=train_df, col='arf_apache', hue='diabetes_mellitus', palette=\"Pastel2\",\n                   title='arf_apache and diabetes mellitus')","739b9d9f":"plot_countplot(df=train_df, col='intubated_apache', hue='diabetes_mellitus', palette=\"Pastel1\",\n                   title='intubated_apache and diabetes mellitus')","489ae4ac":"d_map = {1: 'Diabetic', 0: 'Not Diabetic'}\nplot_double_donut_chart(df=train_df, col1='ventilated_apache', col2='diabetes_mellitus', label_names_col1=d_map, \n                        colors1=['pink', 'hotpink'], colors2=['lightskyblue','dodgerblue'],\n                        title=\"ventilated_apache and diabetes mellitus\")\n","a91d9aca":"plot_donut_chart(df=train_df, col='diabetes_mellitus', label_names=d_map,title='Target Value Distribution')","d6e2eb6c":"def plot_pie(col,cin) :\n    diabetes_yes = train_df[(train_df['diabetes_mellitus'] != 0)]\n    diabetes_no = train_df[(train_df['diabetes_mellitus'] == 0)]\n    \n    trace1 = go.Pie(values  = diabetes_yes[col].value_counts().values.tolist(),\n                    labels  = diabetes_yes[col].value_counts().keys().tolist(),\n                    textfont=dict(size=13), opacity = 0.7,\n                    hole = 0.7, \n                    hoverinfo = \"label+percent+name\",\n                    domain  = dict(x = [.0,.48]),\n                    name    = \"Diabetic\",\n                    marker  = dict(line = dict(width = 1.5)))\n    trace2 = go.Pie(values  = diabetes_no[col].value_counts().values.tolist(),\n                    labels  = diabetes_no[col].value_counts().keys().tolist(),\n                    textfont=dict(size=13), opacity = 0.7,\n                    hole = 0.7,\n                    hoverinfo = \"label+percent+name\",\n                    marker  = dict(line = dict(width = 1.5)),\n                    domain  = dict(x = [.52,1]),\n                    name    = \"Not Diabetic\" )\n\n    layout = go.Layout(dict(title = col + \" and diabetes mellitus\",title_x=0.5),\n                       annotations = [ dict(text = \"Diabetic\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .22, y = -0.1),\n                                                dict(text = \"Not Diabetic\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .8,y = -.1)])\n\n    fig  = go.Figure(data = [trace1,trace2],layout = layout)\n    \n    fig.update_layout(legend=dict(\n    yanchor=\"top\",\n    y=0.99,\n    xanchor=\"left\",\n    x=0.01))\n    \n    fig.show()","ca3f6bf0":"s = dt_i[9:-1] \ncin = 2\nfor i in s: \n    plot_pie(i,cin)\n    cin+=1","28d89383":"dt_fl.append(\"diabetes_mellitus\")\ntrain_df[np.intersect1d(train_df.columns, dt_fl)].corr().style.background_gradient(cmap='Blues')","117ab456":"train_df = cudf.DataFrame.from_pandas(train_df)\ntest_df = cudf.DataFrame.from_pandas(test_df)","3930ba11":"train_df[dt_o].isna().sum()","a407bca0":"train_df[dt_o] = train_df[dt_o].fillna(\"\")\ntrain_df[dt_o].isna().sum()","1d143d13":"test_df[dt_o].isna().sum()","5f8dfa85":"test_df[dt_o] = test_df[dt_o].fillna(\"\")\ntest_df[dt_o].isna().sum()","2e77cf16":"%%time\nSMOOTH = 0.001\nSPLIT = 'interleaved'\nFOLDS = 5\n\nencoder = TargetEncoder(n_folds=FOLDS, smooth=SMOOTH, split_method=SPLIT)","b27608c0":"ID_col = ['encounter_id','hospital_id','icu_id']\ntrain_df = train_df.drop(columns=ID_col)\ntest_df = test_df.drop(columns=ID_col)","ab1959ec":"from sklearn.model_selection import StratifiedShuffleSplit\nX = train_df.drop([\"diabetes_mellitus\"],axis=1)\ny = train_df[\"diabetes_mellitus\"]\nstratSplit = StratifiedShuffleSplit(y, n_iter=1, test_size=0.5, random_state=42)\nfor train_idx, test_idx in stratSplit:\n    X_train=X[train_idx]\n    y_train=y[train_idx]","305c2355":"X = train_df.drop([\"diabetes_mellitus\"],axis=1)\ny = train_df[\"diabetes_mellitus\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, \n                                                    shuffle=False, stratify=y)\nfor col in dt_o:\n    X_train[col] = encoder.fit_transform(X_train[col],y_train)\n    X_test[col] = encoder.transform(X_test[col])\n    test_df[col] = encoder.transform(test_df[col])","d0455c19":"params = {'tree_method': 'gpu_hist', 'max_depth': 7, 'booster':'gbtree','objective' : 'binary:logistic','predictor':'gpu_predictor'}","39750113":"%%time\ntrain_matrix = xgboost.DMatrix(data = X_train, label = y_train)\nmodel = xgboost.train(params, dtrain = train_matrix)\npredicts = model.predict(xgboost.DMatrix(X_test))\nroc = roc_auc_score(y_test, predicts)\nroc","2126a8b9":"APACHE (acute physiology and chronic health evaluation) severity-of-illness classification system is a measure for describing groups of intensive care unit (ICU) patients and evaluating their care.\n\n1 represents post operative\n0 represents non operative"}}