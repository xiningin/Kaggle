{"cell_type":{"6228af09":"code","26a88f0a":"code","bce20e68":"code","866635b9":"code","1e42e5e4":"code","e923d530":"code","d82349d4":"code","e7e18b81":"code","71fd7e77":"code","85aa5af5":"code","9375a572":"code","e43cdf2a":"code","3de52dc6":"code","61839daa":"code","e982f4a4":"code","899e8ddb":"code","aaea05ce":"code","b3a6bf6f":"code","e6e63102":"code","d9c6a249":"code","f7e58571":"code","a94b0998":"code","5b87d122":"code","82eb9971":"code","63a26000":"code","ec83c171":"code","5bd3742d":"code","2dbc941f":"code","cd1f2ecc":"code","780a9ad7":"code","a265fa25":"code","d71274a8":"code","293bb9a5":"code","e1f55dab":"code","a9c5b457":"code","60814902":"code","be9f66ad":"code","9d237358":"code","83215ae2":"code","228458b9":"code","420bd36b":"code","8ae03960":"code","4778cf71":"code","28b620c3":"code","f9676726":"code","35a2c568":"code","8a5bf6bb":"code","45ce2184":"code","9d8fc83a":"code","da767278":"code","f2fcb529":"code","cd288c2c":"code","e451cd0e":"code","3ba32870":"code","5df92724":"code","2fb761ef":"code","3660529d":"code","136107ff":"code","4575f392":"code","a66ffc23":"code","46900f93":"code","345c0794":"code","d76d5a14":"code","a846577e":"code","d4bde9c2":"code","21d24b83":"code","0e6316df":"code","d7da885e":"code","df6bd675":"code","a4f86a28":"code","12b1f0dd":"code","aabc6247":"code","4ee19078":"code","de938077":"code","66179d93":"code","b057c595":"code","543482a7":"code","8de997b6":"code","2856451c":"code","ec90ffc0":"code","eee725f8":"code","40da3d64":"code","d2668ee2":"code","60efe588":"code","51345f04":"code","f7b90c2b":"code","f338dc6b":"code","f85fb0fa":"code","e65f94e3":"code","06cfb39e":"code","df30b6d2":"code","d71f1574":"code","f6c7f904":"code","89ab194e":"code","7b70bc50":"code","c06b3093":"code","561ab549":"code","b82fad2a":"code","53aaf37f":"code","10a460b5":"code","8f4e61f0":"code","8fe1ebe7":"code","0fe7df52":"code","efcc8693":"code","09f0b8fc":"code","350b4348":"code","b1649321":"code","d6cd41ac":"code","112a8b4d":"code","fbff9d18":"code","2646e960":"code","350b085e":"code","cc4fd025":"code","fdc91bb0":"code","4a9db511":"code","44669a95":"code","e255c083":"code","dcc6216e":"markdown","645ce8e8":"markdown","a2c382fa":"markdown","31e3081b":"markdown","1dcd3c3a":"markdown","804d6f16":"markdown","a0385bb0":"markdown","a049f789":"markdown","48697ede":"markdown","7c0ae7b3":"markdown","11cf2e31":"markdown","03aefb24":"markdown","d3512ef7":"markdown"},"source":{"6228af09":"#TASKS\n# 1. Load the data from csv\n","26a88f0a":"import pandas as pd\ndf1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndf2 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\n","bce20e68":"df1","866635b9":"df2","1e42e5e4":"df1.head()","e923d530":"df2.head()","d82349d4":"df1['DATE_TIME'] = pd.to_datetime(df1['DATE_TIME'],format = '%d-%m-%Y %H:%M')   #datetime \ndf1['DATE'] = pd.to_datetime(df1['DATE_TIME'],format = '%d-%m-%Y %H:%M').dt.date   #split\ndf1['DATE'] = pd.to_datetime(df1['DATE'] )      #datetime series\ndf1.info()","e7e18b81":"df2['DATE_TIME'] = pd.to_datetime(df2['DATE_TIME'],format = '%Y-%m-%d %H:%M')   #datetime \ndf2['DATE'] = pd.to_datetime(df2['DATE_TIME'],format = '%Y-%m-%d %H:%M').dt.date   #split\ndf2['DATE'] = pd.to_datetime(df2['DATE'] )      #datetime series\ndf2.info()","71fd7e77":"df1.columns","85aa5af5":"df2.columns","9375a572":"df1.nunique()","e43cdf2a":"df2.nunique()","3de52dc6":"df1.describe()","61839daa":"df2.describe()","e982f4a4":"dy_mean = df1['DAILY_YIELD'].mean()\nprint(f'The mean value of Daily Yield is {dy_mean}')","899e8ddb":"df2['IRRADIATION'].sum()","aaea05ce":"df2.groupby('DATE')[\"IRRADIATION\"].sum()","b3a6bf6f":"df2['AMBIENT_TEMPERATURE'].max()","e6e63102":"df2['MODULE_TEMPERATURE'].max()","d9c6a249":"df1['SOURCE_KEY'].nunique()","f7e58571":"df1['DC_POWER'].max()","a94b0998":"df1['DC_POWER'].min()","5b87d122":"df1['AC_POWER'].max()","82eb9971":"df1['AC_POWER'].min()","63a26000":"a = df1.groupby('DATE')[\"DC_POWER\"].min()\nprint(a)","ec83c171":"b = df1.groupby('DATE')[\"DC_POWER\"].max()\nprint(b)","5bd3742d":"c = df1.groupby('DATE')[\"AC_POWER\"].max()\nprint(c)","2dbc941f":"d = df1.groupby('DATE')[\"AC_POWER\"].min()\nprint(d)","cd1f2ecc":"df1[df1['DC_POWER'] == df1['DC_POWER'].max()]['SOURCE_KEY']","780a9ad7":"s= df1.groupby('SOURCE_KEY').sum()\ns['AC_POWER'].sort_values()","a265fa25":"q= df1.groupby('SOURCE_KEY').sum()\nq['DC_POWER'].sort_values()","d71274a8":"#Yes\n22*4*24","293bb9a5":"df1","e1f55dab":"df1['DATE'].value_counts()","a9c5b457":"import pandas as pd\n\ndf2 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\ndf2","60814902":"df2.info()","be9f66ad":"df2['DATE_TIME'] = pd.to_datetime(df2['DATE_TIME'],format = '%Y-%m-%d %H:%M')   #datetime \ndf2['DATE_TIME']","9d237358":"import matplotlib.pyplot as plt ","83215ae2":"#module temp daily basis\nplt.figure(figsize=(20,10))\nplt.plot(df2['DATE_TIME'],df2['MODULE_TEMPERATURE'],label ='Module Temperature')\nplt.legend()\nplt.xlabel('DATE TIME')\nplt.ylabel('MODULE TEMPERATURE')\nplt.xticks(rotation = 90)\nplt.grid()\nplt.margins(0.05)\nplt.title(\"Module VS Date_time\")\nplt.show()\n","228458b9":"#ambient temp daily basis\nplt.figure(figsize=(20,10))\nplt.plot(df2['DATE_TIME'],df2['AMBIENT_TEMPERATURE'],label ='Ambient Temperature')\nplt.legend()\nplt.xlabel('DATE TIME')\nplt.ylabel('AMBIENT TEMPERATURE')\nplt.xticks(rotation = 90)\nplt.grid()\nplt.margins(0.05)\nplt.title(\"Ambient VS Date_time\")\nplt.show()","420bd36b":"#Difference in Temp \nplt.figure(figsize=(20,10))\nplt.plot(df2['DATE_TIME'],df2['MODULE_TEMPERATURE']-df2['AMBIENT_TEMPERATURE'], label ='Difference' , c ='r')\nplt.legend()\nplt.xlabel('DATE TIME')\nplt.ylabel('MODULE - AMBIENT ')\nplt.xticks(rotation = 90)\nplt.grid()\nplt.margins(0.05)\nplt.title(\"Module - Ambient VS Date_time\")\nplt.show()","8ae03960":"#RED for ambient   # Blue for module   # black for Difference \nplt.figure(figsize=(20,10))\nplt.plot(df2['DATE_TIME'],df2['AMBIENT_TEMPERATURE'], label ='AMBIENT' , c ='r')\nplt.plot(df2['DATE_TIME'],df2['MODULE_TEMPERATURE'], label ='MODULE' )\nplt.plot(df2['DATE_TIME'],df2['MODULE_TEMPERATURE']-df2['AMBIENT_TEMPERATURE'], label ='Difference' , c ='k')\nplt.legend()\nplt.grid()\nplt.show()","4778cf71":"#RED for ambient   # Blue for module   # black for Difference \nplt.figure(figsize=(20,10))\nplt.plot(df2['DATE_TIME'],df2['AMBIENT_TEMPERATURE'].rolling(window=20).mean(), label ='AMBIENT' , c ='r')\nplt.plot(df2['DATE_TIME'],df2['MODULE_TEMPERATURE'].rolling(window=20).mean(), label ='MODULE' )\nplt.plot(df2['DATE_TIME'],(df2['MODULE_TEMPERATURE']-df2['AMBIENT_TEMPERATURE']).rolling(window=20).mean(), label ='Difference' , c ='k')\nplt.legend()\nplt.grid()\nplt.show()","28b620c3":"\nimport numpy as np\na = np.random.randint(1,500,250)\nb = np.random.randint(500,1000,250)\nplt.plot(a,b, marker ='o' ,linestyle ='')\nplt.show()","f9676726":"plt.figure(figsize=(18,9))\nplt.plot(df2['AMBIENT_TEMPERATURE'],df2['MODULE_TEMPERATURE'],marker = 'o' ,linestyle = '', alpha = 0.5, ms=10)","35a2c568":"df2.info()","8a5bf6bb":"df2['DATE'] = pd.to_datetime(df2['DATE_TIME'],format = '%Y-%m-%d %H:%M').dt.date\ndf2['DATE'] = pd.to_datetime(df2['DATE'])","45ce2184":"dates =df2['DATE'].unique()\ndates","9d8fc83a":"dates[0]","da767278":"df2.info()","f2fcb529":"#plot irradiation > 0 \ndata = df2[df2['DATE']==dates[0]][df2['IRRADIATION']>0]\ndata","cd288c2c":"data = df2[df2['DATE']==dates[0]][df2['IRRADIATION']>0]\nplt.plot(data['AMBIENT_TEMPERATURE'],data['MODULE_TEMPERATURE'], marker = 'o', linestyle ='', alpha = 0.5, label = pd.to_datetime(date,format = '%Y-%m-%d').date())\n\nplt.legend()\nplt.show()","e451cd0e":"plt.figure(figsize=(19,9))\nfor date in dates:\n    data = df2[df2['DATE']==date][df2['IRRADIATION']>0]\n    plt.plot(data['AMBIENT_TEMPERATURE'],data['MODULE_TEMPERATURE'], marker = 'o', linestyle ='', alpha = 0.5, ms= 6,label = pd.to_datetime(date,format = '%Y-%m-%d').date())\n\nplt.legend()\nplt.show()","3ba32870":"df2.columns","5df92724":"df2","2fb761ef":"#listing the inverters\ninv_lst = df1['SOURCE_KEY'].unique()\ninv_lst","3660529d":"#using groupby, max total yield for each inverter","136107ff":"TOTAL = df1.groupby('SOURCE_KEY')['TOTAL_YIELD'].max()\nTOTAL","4575f392":"#plot bar graph inverters vs total yield\nplt.figure(figsize=(20,10))\nplt.bar(inv_lst,TOTAL)\nplt.xticks(rotation=90)\nplt.show()\n#annotate or text ","a66ffc23":"df1.info()","46900f93":"df2.info()","345c0794":"#2 Dataframes\n#Left  df1 : 68778 rows, 8 columns\n#Right  df2 : 3182 rows, 7 columns\n#output r_left : 68778 rows \u00d7 15 columns 14(15-1)\n#LEFT MERGE ","d76d5a14":"r_left = pd.merge(df1,df2, on ='DATE_TIME', how='left')\nr_left","a846577e":"r_left.info()","d4bde9c2":"#check the amount null values in merged dataframe\nr_left.isnull().sum()\n","21d24b83":"#ambient temp\nr_left['AMBIENT_TEMPERATURE'].isnull().value_counts()\nr_left['MODULE_TEMPERATURE'].isnull().value_counts()\nr_left['AC_POWER'].isnull().value_counts()","0e6316df":"null_data1 = r_left[r_left.isnull().any(axis=1)]\nnull_data1","d7da885e":"plt.figure(figsize=(20,10))\nplt.plot(r_left['IRRADIATION'],r_left['DC_POWER'], marker='o',linestyle='',alpha =0.5,label='DC POWER')\nplt.legend()\nplt.show()","df6bd675":"plt.figure(figsize=(20,10))\nplt.plot(r_left['MODULE_TEMPERATURE'],r_left['DC_POWER'], marker='o',linestyle='',alpha =0.5,label='DC POWER')\nplt.legend()\nplt.show()","a4f86a28":"dates = r_left['DATE_x'].unique()\ndates","12b1f0dd":"r_left[r_left['DATE_x']==dates[0]][r_left['IRRADIATION' ]>0.1]","aabc6247":"r_left.info()","4ee19078":"data = r_left[r_left['DATE_x']==dates[0]][r_left['IRRADIATION' ]>0.1]\nplt.plot(data['MODULE_TEMPERATURE'],data['DC_POWER'], marker='o',linestyle='',label = pd.to_datetime(dates[0],format = '%Y-%m-%d').date())\nplt.legend()\nplt.show()","de938077":"plt.figure(figsize=(20,10))\nfor date in dates:\n    data = r_left[r_left['DATE_x']==date][r_left['IRRADIATION']>0.1]\n    plt.plot(data['MODULE_TEMPERATURE'],data['DC_POWER'],marker='o',linestyle='',label = pd.to_datetime(date,format='%Y-%m-%d').date())\nplt.legend()\nplt.xlabel('Module Temperature')\nplt.ylabel('DC Power')\nplt.title('MODULE TEMPERATURE VS DC POWER')\nplt.show()","66179d93":"data_summary = df1.groupby(['SOURCE_KEY','DATE']).agg(READINGS = ('TOTAL_YIELD','count'),  \n                                                      INV = ('SOURCE_KEY',max), \n                                                      DATE = ('DATE',max))\ndata_summary","b057c595":"r_left.info()\n","543482a7":"#Linear Regression","8de997b6":"r_left.info()\n","2856451c":"#Linear Regression\n# x - inpput    independent variable [irradiation]     12th column  \n# y - output     dependent variable [dc power]    3rd column","ec90ffc0":"#Fill irradiation column with 0 for all null values (NaN and NaT)\nr_left['IRRADIATION'] = r_left['IRRADIATION'].fillna(0)\nr_left.info()","eee725f8":"#x = r_left.iloc[:,[12]].values      #taking all the values of irradiation column\nx = r_left.iloc[:,12:13].values\nx.ndim","40da3d64":"y = r_left.iloc[:,3].values      #taking all the values of DC_POWER column\ny","d2668ee2":"import matplotlib.pyplot as plt\nplt.scatter(x,y,s=1)","60efe588":"from sklearn.model_selection import train_test_split\nx_train , x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state=0)","51345f04":"x_train.shape","f7b90c2b":"x_test.shape","f338dc6b":"55022+13756","f85fb0fa":"y_train.shape","e65f94e3":"y_test.shape","06cfb39e":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()","df30b6d2":"model.fit(x_train,y_train)","d71f1574":"y_pred = model.predict(x_test)      #y_pred is from the ML model of Regression\ny_pred  ","f6c7f904":"y_test      #y_test is from the output which was given initially (actual)","89ab194e":"#Visualization  of TRAINING DATA\nplt.scatter(x_train,y_train,s=1)\nplt.scatter(x_train,model.predict(x_train),s=1)\nplt.show()","7b70bc50":"#testing data\nplt.scatter(x_test,y_test,s=1)\nplt.scatter(x_test,model.predict(x_test),s=1)\nplt.show()","c06b3093":"plt.scatter(y_pred,y_test,s=1)    #final outcome (actual vs predicted)","561ab549":"model.predict([[0.8]])","b82fad2a":"!pip install flask-ngrok","53aaf37f":"from flask_ngrok import run_with_ngrok\nfrom flask import Flask\napp=Flask(__name__)\nrun_with_ngrok(app)\n\n@app.route('\/')\ndef home():\n    return 'Hi! This is my first Linear Regression ML Model deployment'\n\n@app.route(\"\/<float:x>\")\ndef ml(x):\n    return str(model.predict([[x]]))\napp.run()    ","10a460b5":"df3 = pd.DataFrame({'Actual':y_test, 'Predicted': y_pred,'Difference in %': ((y_pred-y_test)\/(y_test)*100)})\ndf3","8f4e61f0":"df3.plot()","8fe1ebe7":"#METHOD 1 using sklearn library \nfrom sklearn.metrics import r2_score,mean_squared_error\nprint(mean_squared_error(y_pred,y_test))","0fe7df52":"#METHOD 2 using numpy (manually finding the value)\nimport numpy as np \nMSE = np.square(np.subtract(y_pred,y_test)).mean()\nMSE","efcc8693":"r2_score(y_pred,y_test)    ","09f0b8fc":"#Forecasting ","350b4348":"day_summary = df2.groupby('DATE').agg(TOTAL_IRRADIANCE=('IRRADIATION',sum),DATE=('DATE',max))\nday_summary","b1649321":"# datetime DATE ds   TOTAL_IRRADIANCE  y\nday_summary = day_summary.rename(columns={'DATE':'ds', 'TOTAL_IRRADIANCE':'y'})\nday_summary.info()","d6cd41ac":"#importting fbprophet\n#to avoid to overfitting or underfitting of the model we use changepoint_proir_scale\nimport fbprophet\nop = fbprophet.Prophet(changepoint_prior_scale=0.25)\nop.fit(day_summary)","112a8b4d":"#make a future possible prediction[DATAFRAME] for 1month(period) fred D-days\nforecast = op.make_future_dataframe(periods = 30, freq ='D')\nforecast = op.predict(forecast)","fbff9d18":"op.plot(forecast, xlabel ='Date', ylabel = 'IRRADIATION')\nplt.title(\"Irradiation Prediction\")","2646e960":"#new dataframe for hours\ndf_new = df2[['DATE_TIME','IRRADIATION']]\ndf_new","350b085e":"df_new = df_new.rename(columns = {'DATE_TIME':'ds','IRRADIATION':'y'})\ndf_new.info()","cc4fd025":"import fbprophet\nop = fbprophet.Prophet(changepoint_prior_scale=0.25)\nop.fit(df_new)","fdc91bb0":"forecast = op.make_future_dataframe(periods=300, freq = 'H')\nforecast = op.predict(forecast)","4a9db511":"op.plot(forecast, xlabel='Date',ylabel='Irradiation',figsize=(20,10))\nplt.title('Irradiation Prediction');","44669a95":"op.plot_components(forecast);","e255c083":"forecast","dcc6216e":"# Rank the inverters based on the DC\/AC power they produce\n","645ce8e8":"**How many inverters are there for each plant?\n**","a2c382fa":"# Visualization ","31e3081b":"# DAY 7\n","1dcd3c3a":"**What is the maximum\/minimum amount of DC\/AC Power generated in a time interval\/day?\n**","804d6f16":"**DAY 6**","a0385bb0":"**Explore each dataset - columns, counts, basic stats**","a049f789":"# **What is the mean value of daily yield?**","48697ede":"# Is there any missing data?","7c0ae7b3":"# **Which inverter (source_key) has produced maximum DC\/AC power?\n**","11cf2e31":"**What is the total irradiation per day?\n# **","03aefb24":"# DAY 9","d3512ef7":" **What is the max ambient and module temperature?\n**"}}