{"cell_type":{"0f264e99":"code","8855570d":"code","300be28a":"code","a0540f5b":"code","7fdfd551":"code","5fd7a9d5":"code","cd970e26":"code","4c5356ac":"code","91fe5d6d":"code","07d0d38f":"markdown","5e338f67":"markdown","a94bca44":"markdown"},"source":{"0f264e99":"# import zipfile\n# import glob\n\n# zip_file = glob.glob('..\/input\/dogs-vs-cats\/*.zip')  \n# # print(zip_file)\n\n# def extract_zip(file):\n#     with zipfile.ZipFile(file,\"r\") as zip_ref:\n#         zip_ref.extractall(\"temp\")\n        \n# for files in zip_file:\n#     extract_zip(files)","8855570d":"!pip install efficientnet_pytorch","300be28a":"import os\nimport re\nimport numpy as np\nfrom torch.utils.data import Dataset\nfrom PIL import Image\nimport torch\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\nimport torch.nn.functional as F\nfrom torch import nn, optim\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\nfrom efficientnet_pytorch import EfficientNet\n\nimport sklearn\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss","a0540f5b":"class CatDog(Dataset):\n    def __init__(self, root, transform=None):\n        self.images = os.listdir(root)\n        self.images.sort(key=lambda x: int(re.findall(r\"\\d+\", x)[0]))\n        self.root = root\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.images)\n\n    def __getitem__(self, index):\n        file = self.images[index]\n        img = np.array(Image.open(os.path.join(self.root, file)))\n\n        if self.transform is not None:\n            img = self.transform(image=img)[\"image\"]\n\n        if \"dog\" in file:\n            label = 1\n        elif \"cat\" in file:\n            label = 0\n        else:\n            label = -1\n\n        return img, label","7fdfd551":"DEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nNUM_WORKERS = 4\nBATCH_SIZE = 5\nPIN_MEMORY = True\nLOAD_MODEL = True\nSAVE_MODEL = True\nCHECKPOINT_FILE = \"b7.pth.tar\"\nWEIGHT_DECAY = 1e-4\nLEARNING_RATE = 1e-4\nNUM_EPOCHS = 1\n\n# Augumentation\nbasic_transform = A.Compose(\n    [\n        A.Resize(height=448, width=448),\n        A.Normalize(\n            mean=[0.485, 0.456, 0.406],\n            std=[0.229, 0.224, 0.225],\n            max_pixel_value=255.0,\n        ),\n        ToTensorV2(),\n    ]\n)","5fd7a9d5":"def save_feature_vectors(model, loader, output_size=(1, 1), file=\"trainb7\"):\n    model.eval()\n    images, labels = [], []\n\n    for idx, (x, y) in enumerate(tqdm(loader)):\n        x = x.to(DEVICE)\n\n        with torch.no_grad():\n            features = model.extract_features(x)\n            features = F.adaptive_avg_pool2d(features, output_size=output_size)\n        images.append(features.reshape(x.shape[0], -1).detach().cpu().numpy())\n        labels.append(y.numpy())\n\n    np.save(f\"X_{file}.npy\", np.concatenate(images, axis=0))\n    np.save(f\"y_{file}.npy\", np.concatenate(labels, axis=0))\n    model.train()","cd970e26":"model = EfficientNet.from_pretrained(\"efficientnet-b7\")\nmodel._fc = nn.Linear(2560, 1)\ntrain_dataset = CatDog(root=\"..\/input\/cats-and-dogs-embedded-data\/train\/train\", transform = basic_transform)\ntest_dataset = CatDog(root=\"..\/input\/cats-and-dogs-embedded-data\/test\/test\", transform = basic_transform)\n\ntrain_loader = DataLoader(\n        train_dataset,\n        shuffle=True,\n        batch_size = BATCH_SIZE,\n        num_workers = NUM_WORKERS,\n        pin_memory=True,\n        )\ntest_loader = DataLoader(\n    test_dataset,\n    shuffle=False,\n    batch_size= BATCH_SIZE,\n    num_workers= NUM_WORKERS,\n    )\n\nmodel = model.to(DEVICE)\n\nsave_feature_vectors(model, train_loader, output_size=(1, 1), file=\"train_b7\")\nsave_feature_vectors(model, test_loader, output_size=(1, 1), file=\"test_b7\")","4c5356ac":"X = np.load(f'..\/input\/data-features\/X_train_b7.npy')\ny = np.load(f'..\/input\/data-features\/y_train_b7.npy')\n\n# Split data and train classifier\nprint(f\"Training data shape: {X.shape}, labels shape: {y.shape}\")\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.001, random_state=1337)\nclf = LogisticRegression(max_iter=2000)\nclf.fit(X_train, y_train)","91fe5d6d":"# Validation\nval_preds= clf.predict_proba(X_val)[:,1]\nprint(f\"On validation set:\")\nprint(f\"Accuracy: {clf.score(X_val, y_val)}\")\nprint(f\"LOG LOSS: {log_loss(y_val, val_preds)} \")\nprint(\"%--------------------------------------------------%\")\n\n# Predict\nprint(\"Getting predictions for test set\")\nX_test = np.load(f'..\/input\/data-features\/X_test_b7.npy')\nX_test_preds = clf.predict_proba(X_test)[:,1]\ndf = pd.DataFrame({'id': np.arange(1, 12501), 'label': np.clip(X_test_preds, 0.005, 0.995)})\ndf.to_csv(f\"mysubmission.csv\", index=False)\nprint(\"Done getting predictions!\")","07d0d38f":"Sau khi \u0111\u00e3 c\u00f3 vector c\u00e1c feature th\u00ec \u0111\u01b0a v\u00e0o clasifier. C\u00f3 th\u1ec3 th\u1eed v\u1edbi Logistic Regression, SVC, Tree-based(i.e. Random Forest)","5e338f67":"\u0110\u00e2y l\u00e0 m\u1ed9t k\u0129 thu\u1eadt c\u01a1 b\u1ea3n kh\u00e1c trong Transfer Learning l\u00e0 **Feature Extraction**. M\u00ecnh s\u1ebd extract c\u00e1c feature t\u1eeb c\u00e1c pretrain model(\u1edf \u0111\u00e2y l\u00e0 EfficientNetB7), sau \u0111\u00f3 cho c\u00e1c feature qua m\u1ed9t classifier b\u1ea5t k\u00ec. \nC\u00e1ch n\u00e0y ch\u1eafc ch\u1eafn s\u1ebd nhanh h\u01a1n Fine Tuning v\u00ec ph\u1ea3i kh\u00f4ng ph\u1ea3i train th\u00eam m\u1ea1ng CNN. Tuy nhi\u00ean trong nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p k\u1ebft qu\u1ea3 s\u1ebd kh\u00f4ng b\u1eb1ng \u0111\u01b0\u1ee3c Fine Tuning.\nM\u1ecdi ng\u01b0\u1eddi c\u1ed1 g\u1eafng hi\u1ec3u \u00fd t\u01b0\u1edfng c\u1ee7a k\u0129 thu\u1eadt n\u00e0y \u0111\u1ec3 ph\u00e2n bi\u1ec7t v\u1edbi Fine Tuing.","a94bca44":"# Config "}}