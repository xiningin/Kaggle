{"cell_type":{"009947b9":"code","bf003f09":"code","31a41662":"code","abb690e9":"code","6995735b":"code","d184dc6d":"code","77d448f7":"code","dadfb0e7":"code","346ea29b":"code","17b80b20":"code","d2e81487":"code","5610aca7":"code","8335feb9":"code","9f57c151":"code","593af95d":"code","6e7cdcbd":"code","f3189c8c":"code","95626e85":"code","6a731c78":"code","dfa8b63e":"code","d9d46228":"code","fb9242d9":"code","4bfee915":"code","7643c67e":"code","98fe2930":"code","72c96915":"code","60d3b531":"code","89708aab":"code","83153ae3":"code","9a0a8f85":"code","4320243a":"code","21d56a5b":"code","9c47e1b9":"code","ba372150":"code","8b108ed6":"code","28f70b7d":"markdown","17c312cf":"markdown","d7c98f38":"markdown","8600293b":"markdown","5383e7a0":"markdown","1e4a666b":"markdown","675a6a81":"markdown","e11eb696":"markdown"},"source":{"009947b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf003f09":"# importing libraries\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport statsmodels.api as sm # For OLS(Ordinary Least Square)\n%matplotlib inline\npd.pandas.set_option('display.max_columns',None)\nimport warnings\nwarnings.simplefilter(\"ignore\") \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.metrics import r2_score","31a41662":"# reading the kaggle dataset\ndata=pd.read_csv(\"\/kaggle\/input\/car-price-prediction\/CarPrice_Assignment.csv\")\ndata.head()","abb690e9":"# drop uncecesary features\ndata.drop(['car_ID','symboling','CarName'],axis=1,inplace=True)","6995735b":"# find missing values\ndata.info()","d184dc6d":"#Exploring Numerical Features\nnumerical_feature = [feature for feature in data.columns if data[feature].dtypes!=\"O\"]\nnumerical_feature","77d448f7":"# Extracting Discrete Numerical Features from Numerical Features(threshould=25)\ndiscrete_feature = [feature for feature in numerical_feature if len(data[feature].unique())<=25]\ndiscrete_feature ","dadfb0e7":"# Checking dependency of \"price\" on \"peakrpm\" Discrete Numerical Feature\nfor feature in discrete_feature:\n    sns.barplot(data[feature],data['price'],errwidth=0)\n    plt.xticks(rotation=90)\n    plt.show()","346ea29b":"# Extracting Continuous Numerical Features from Numerical Features\ncontinuous_feature = [feature for feature in numerical_feature if feature not in ['peakrpm','car_ID','price']]\ncontinuous_feature","17b80b20":"# Checking distribution of Continuous Feature\nfor feature in continuous_feature:\n    sns.distplot(data[feature])\n    plt.show()","d2e81487":"# Performing logarithmic Transformation on 'enginesize'\ndf=data.copy()\ndf['enginesize']=np.log(df['enginesize'])\ndf['price']=np.log(df['price'])\nsns.distplot(df['enginesize'])\nplt.show()","5610aca7":"# Scatter Plot\nfor feature in continuous_feature:\n    sns.scatterplot(df[feature],df['price'])\n    plt.show()","8335feb9":"# Checking for Outliers\nfor feature in continuous_feature:\n    sns.boxplot(df[feature])\n    plt.show()","9f57c151":"# Exploring Categorical Features\ncategorical_feature = [feature for feature in df.columns if data[feature].dtypes==\"O\"]\ncategorical_feature","593af95d":"# Plotting barplot to Visualize Relation between Categorical variable and Output variable\nfor feature in categorical_feature:\n    data.groupby(feature)['price'].median().plot.bar()\n    plt.xticks(rotation=90)\n    plt.xlabel(feature)\n    plt.ylabel('price')\n    plt.title(feature)\n    plt.show()","6e7cdcbd":"# Distribution of Output Variable\nsns.distplot(data['price'],color='g')","f3189c8c":"# Checking for Multi-Collinearity\ncorr=data.corr()\ncorr.style.background_gradient(cmap=\"inferno\")","95626e85":"plt.figure(figsize=(15,15))\nsns.heatmap(data.corr(),annot=True,cmap='inferno',mask=np.triu(data.corr(),k=1))","6a731c78":"#Seperating Independent and Dependent Numerical features\nX=data[numerical_feature]\nX.drop(['price'],axis=1,inplace=True)\nY=data[['price']]","dfa8b63e":"X=sm.add_constant(X)\nmodel=sm.OLS(Y,X).fit()","d9d46228":"model.summary()","fb9242d9":"# Dropping 'highwaympg' \ndata.drop(['highwaympg'],axis=1,inplace=True)","4bfee915":"Outliers=[ 'wheelbase', 'carlength' , 'carwidth' , 'enginesize' , 'stroke' , 'compressionratio' , 'horsepower' , 'citympg']","7643c67e":"data[Outliers].describe()","98fe2930":"data.head()","72c96915":"# Separating Independent and Dependent variables\nX=data.drop(['price'],axis=1)\ny=data['price']","60d3b531":"# Applying Logarithmic Transformation of 'enginesize'\ndf=X.copy()\ndf['enginesize'] = np.log(df['enginesize'])","89708aab":"# Handling Rare Categorical Variables\nfor feature in categorical_feature:\n    temp=data.groupby(feature)['price'].count()\/len(df)\n    temp_df=temp[temp>0.01].index\n    df[feature]=np.where(df[feature].isin(temp_df),df[feature],'Rare_var')","83153ae3":"# Handling Categorical Variables(ENCODING)\nlabel = LabelEncoder()\nfor feature in categorical_feature:\n    df[feature] = label.fit_transform(df[feature])\ndf = pd.get_dummies(df, columns=['fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', \n                                 'enginelocation', 'enginetype', 'cylindernumber', 'fuelsystem'],drop_first=True)","9a0a8f85":"# Feature Scaling\nscaler=MinMaxScaler()\nscaler.fit(df)\ndataset=pd.DataFrame(scaler.transform(df),columns=df.columns)\ndataset.head()","4320243a":"X=dataset.copy()","21d56a5b":"# Applying Train Test Split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","9c47e1b9":"LR=LinearRegression()\nLR.fit(X_train,y_train)","ba372150":"LR.fit(X_train, y_train)\ny_predLR = LR.predict(X_test)","8b108ed6":"r2_score(y_test, y_predLR)","28f70b7d":"# **MODEL BUILDING**","17c312cf":"**OBSERVATION : [ 'wheelbase', 'carlength' , 'carwidth' , 'enginesize' , 'stroke' , 'compressionratio' , 'horsepower' , 'citympg' ,'highwaympg'] are ahving outliers**","d7c98f38":"**OBSERVATION :we see enginesize is right skewed**","8600293b":"**OBSERVATION : we see no NULL values**","5383e7a0":"**OBSERVATION :  after studying Correlation Matrix and OLS we observed that 'highwaympg' and 'citympg' have strong correlation i.e. 0.97, so we can consider dropping one of these feature. As 'highwaympg' has high P-Value than 'citympg' we can drop 'highwaympg' feature in Feature Engineering**","1e4a666b":"# **EXPLORATORY DATA ANALYSIS**","675a6a81":"**OBSERVATION : Feature such as [ 'curbweight' , 'enginesize' , 'horsepower' ] has strong correlation with 'price'**","e11eb696":"# **FEATURE ENGINEERING\/DATA PREPROCESSING**"}}