{"cell_type":{"d088cd61":"code","175dcffe":"code","dc5e22b6":"code","7b695fc5":"code","8c4f7ae9":"code","5d2794f5":"code","f5c8e014":"markdown","2ecc706d":"markdown","b2deffcc":"markdown","552262e7":"markdown","245486d9":"markdown"},"source":{"d088cd61":"import pandas as pd\nimport numpy as np\n!pip install iminuit","175dcffe":"import sncosmo\nimport pandas as pd\nimport time\nfrom astropy.table import Table\nfrom astropy import wcs, units as u\nfrom sncosmo.bandpasses import read_bandpass\nfrom contextlib import contextmanager\n%matplotlib inline\n\n@contextmanager\ndef timer(name):\n    s = time.time()\n    yield\n    \n    print('[{}] {}'.format(time.time() - s, name))\n\nwith timer('load data'):\n    lc = pd.read_csv('..\/input\/training_set.csv', nrows=10000)\n    meta = pd.read_csv('..\/input\/training_set_metadata.csv')\n    meta.set_index('object_id', inplace=True)\n\n# only use data with signal-to-noise ratio (flux \/ flux_err) greater than this value\nminsnr = 3","dc5e22b6":"# template to use\nmodel_type = 'salt2-extended'\nmodel = sncosmo.Model(source=model_type)\n","7b695fc5":"\npassbands = ['lsstu','lsstg','lsstr','lssti','lsstz','lssty']\nwith timer('prep'):\n    lc['band'] = lc['passband'].apply(lambda x: passbands[x])\n    lc['zpsys'] = 'ab'\n    lc['zp'] = 25.0\n    ","8c4f7ae9":"object_id = 1598\n\ndata = Table.from_pandas(lc[lc.object_id == object_id])\n\nphotoz = meta.loc[object_id, 'hostgal_photoz']\nphotoz_err = meta.loc[object_id, 'hostgal_photoz_err']\n\n# run the fit\nwith timer('fit_lc'):\n    result, fitted_model = sncosmo.fit_lc(\n        data, model,\n        model.param_names,\n        # sometimes constant bound ('z':(0,1.4)) gives better result, so trying both seems better\n        bounds={'z':(max(1e-8,photoz-photoz_err), photoz+photoz_err)},\n        minsnr=minsnr)  # bounds on parameters\n\nsncosmo.plot_lc(data, model=fitted_model, errors=result.errors, xfigsize=10)\n\n\nprint('chisq:{}'.format(result.chisq))\nprint('hostgal_photoz: {}, hostgal_specz: {}, estimated z by the model: {}'.format(meta.loc[object_id,'hostgal_photoz'],\n                                                                                   meta.loc[object_id,'hostgal_specz'],\n                                                                                   result.parameters[0]))","5d2794f5":"df = pd.DataFrame(columns=['chisq'] + model.param_names)\ndf.index.name = 'object_id'\ndf.loc[object_id] = [result.chisq] + list(result.parameters)\ndf","f5c8e014":"This notebook shows basic process of salt-2 template feature described [here](https:\/\/www.kaggle.com\/c\/PLAsTiCC-2018\/discussion\/75222). See also [official docs](https:\/\/sncosmo.readthedocs.io\/en\/v1.6.x\/examples\/plot_lc_fit.html) if you want to know in detail.","2ecc706d":"## Specify a type of template\nAt first, you need to specify a source template (which type of light-curve you want to fit). There are a lot of available source templates (you can see a full list in [source](https:\/\/github.com\/sncosmo\/sncosmo\/blob\/master\/sncosmo\/builtins.py)). In this notebook, I choose salt2-extended template.","b2deffcc":"## Preprocessing\nYou also need to specify passband to tell sncosmo about observation wavelength. sncosmo already has passband for lsst, so it's process looks quite simple :)","552262e7":"## FItting the light curve\nOk, let's start fitting process. ","245486d9":"You can use estimated parameters and chi-sq value as feature. Be careful that it takes a long time (1sec\/object) and don't forget to catch exception when you try it yourself. I also attached all template features on my discussion ([link](https:\/\/www.kaggle.com\/c\/PLAsTiCC-2018\/discussion\/75222)), so just download and use it if you don't want to wait. Enjoy."}}