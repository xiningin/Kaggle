{"cell_type":{"b18d7321":"code","5ac69c89":"code","a220204b":"code","b7dac404":"code","2288a3e1":"code","540e2b56":"code","3a8d8290":"code","2164aaf6":"code","77776009":"code","d4eeec3e":"code","ff7032d8":"code","ab48dac3":"code","111dea1b":"code","ed9a7ec6":"code","e92a00c2":"code","06d607cb":"code","6f8d2f75":"code","0cfcdc79":"code","3ee6b221":"code","b17ecac0":"code","b4fdb24a":"code","254f3fa6":"code","03e9b9d0":"code","f012d3d3":"code","c91ee32e":"code","a5b42c1b":"code","62c1be3b":"code","f2acbe21":"code","1a3f9146":"code","1d24e728":"code","0cf82094":"code","633a4f52":"code","4986b234":"code","b83fe3d7":"code","449fbd64":"code","3ffdc7a3":"code","34ae8ce9":"code","8882a263":"code","b431e5dd":"code","0b967f67":"code","d37e1e8d":"code","2c8fbcdd":"code","4681cadd":"code","c5510293":"code","9e61ae1d":"code","a554bb9f":"code","b8776a9f":"code","6c69dc1d":"code","52527aed":"code","145015f6":"code","79e2c8b3":"code","d69a093c":"code","f6c03655":"code","19cc9314":"code","4d0486ff":"code","8f5dc0c4":"code","ffe2dc02":"code","902efdd8":"code","d16956fe":"code","70347284":"code","5b05f2c9":"code","443cb1d8":"code","691bec7c":"code","819f5c35":"markdown","86c33f99":"markdown","8607a7a1":"markdown","49640480":"markdown","eb24779b":"markdown","9ac74021":"markdown","5b57dd7b":"markdown","d53b6535":"markdown","612dc338":"markdown","5455f5ec":"markdown","e14da521":"markdown","4c1ecdf4":"markdown","34ee9044":"markdown","1d047a9d":"markdown","183069b7":"markdown","99c05c27":"markdown","b06e19f5":"markdown","9d336b84":"markdown","2b012ad3":"markdown","9e0d7d42":"markdown","ef7f2fa7":"markdown","812a20ee":"markdown","6e24f123":"markdown","6eaa5a50":"markdown","ecdb7dfe":"markdown","a1f225d1":"markdown","43788ee3":"markdown","a27cbb88":"markdown","9891f195":"markdown","e107b9f1":"markdown","bd838f31":"markdown","d9794fdc":"markdown","f2227afc":"markdown","3a6f0e35":"markdown","9e1176bd":"markdown","b729c0e7":"markdown"},"source":{"b18d7321":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ac69c89":"pd.options.display.max_columns=300\npd.options.display.max_rows=100","a220204b":"train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv.gz')\ntrain.head()","b7dac404":"test = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\ntest.head()","2288a3e1":"alldata = pd.concat([train,test], sort= False)\nalldata.head()","540e2b56":"alldata.dtypes","3a8d8290":"len(alldata.columns)","2164aaf6":"alldata.corr()['SalePrice'].sort_values(ascending=False).head(50)","77776009":"alldata['YearRemodAdd'].unique()","d4eeec3e":"alldata.corr()['SalePrice'].sort_values().head(50)","ff7032d8":"alldata.columns[alldata.dtypes==object]","ab48dac3":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nfor i in alldata.columns[alldata.dtypes == object] : \n    alldata[i] = le.fit_transform(list(alldata[i]))","111dea1b":"alldata.head()","ed9a7ec6":"alldata.head()","e92a00c2":"train.columns[train.dtypes!=object] ","06d607cb":"train[train.columns[train.dtypes!=object]].head()","6f8d2f75":"alldata['above_basement_area'] = alldata['GrLivArea'] + alldata['TotalBsmtSF'] # \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8\ub85c \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\ub294\ub2e4. 15929.26170","0cfcdc79":"alldata['total_and_garage'] = alldata['GarageArea'] + alldata['above_basement_area'] # 15303.90315","3ee6b221":"#alldata = alldata.drop(['above_basement_area'],axis=1) # 15564.43625","b17ecac0":"alldata[:][['YearBuilt','YearRemodAdd','MoSold','YrSold']].head()","b4fdb24a":"# alldata['interval_remod_built'] = alldata['YearRemodAdd'] - alldata['YearBuilt'] # 15399.22275","254f3fa6":"# alldata['interval_sold_built'] = alldata['YrSold'] - alldata['YearBuilt'] # 15446.76499","03e9b9d0":"# both : 15410.28201\n# Got worse.","f012d3d3":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(15,10))\nsns.scatterplot(alldata['GrLivArea'],alldata['SalePrice'])","c91ee32e":"plt.figure(figsize=(15,10))\nsns.scatterplot(train['GrLivArea'],train['SalePrice'],hue=train['GarageQual'])","a5b42c1b":"train.loc[(train['GarageQual']=='Ex')]","62c1be3b":"test.loc[(test['GarageQual']=='Ex')]","f2acbe21":"plt.figure(figsize=(15,10))\nsns.scatterplot(alldata['above_basement_area'],alldata['SalePrice'])","1a3f9146":"# total_and_garage\nplt.figure(figsize=(15,10))\nsns.scatterplot(alldata['total_and_garage'],alldata['SalePrice'])","1d24e728":"alldata['Neighborhood'].unique()","0cf82094":"plt.figure(figsize=(20,12))\nsns.boxplot(train['Neighborhood'],train['SalePrice'])","633a4f52":"train['Neighborhood'].value_counts() # 1500\uac1c\uc758 \ub370\uc774\ud130, 25\uac1c\uc758 \uce74\ud14c\uace0\ub9ac\uc778 \uc810\uc744 \uace0\ub824\ud558\uba74 \uac01 \ubcc0\uc218\ubcc4\ub85c \ucda9\ubd84\ud788 \ub4e4\uc5b4\uac00 \uc788\ub2e4\uace0 \ud310\ub2e8. ","4986b234":"train.shape","b83fe3d7":"plt.figure(figsize=(20,12))\nsns.stripplot(train['Neighborhood'],train['SalePrice'])","449fbd64":"plt.figure(figsize=(20,12))\nsns.swarmplot(train['Neighborhood'],train['SalePrice']) ","3ffdc7a3":"plt.figure(figsize=(15,10))\nsns.scatterplot(train['GrLivArea'],train['SalePrice'])","34ae8ce9":"alldata2 = alldata.drop(['Id','SalePrice'],axis=1)","8882a263":"alldata2.isnull().any().sum()","b431e5dd":"alldata2 = alldata2.fillna(-1)","0b967f67":"train2 = alldata2[:len(train)]\ntest2 = alldata2[len(train):]","d37e1e8d":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(random_state=0,n_jobs=-1)\nrf.fit(train2,train['SalePrice']) \nresult = rf.predict(test2)","2c8fbcdd":"importance = pd.Series(rf.feature_importances_, index = train2.columns).sort_values(ascending=False)","4681cadd":"importance.sort_values(ascending=False)","c5510293":"sub = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/sample_submission.csv')\nsub.head()","9e61ae1d":"sub['SalePrice'] = result\nsub.head() # check whether the result had correctly plugged in","a554bb9f":"sub.to_csv('submission_tree.csv',index=False)","b8776a9f":"alldata_r = pd.concat([train,test], sort= False)\nalldata_r.head()","6c69dc1d":"alldata_r = alldata_r.fillna(-1)","52527aed":"alldata_r = alldata_r.drop(['Id','SalePrice'],axis=1)","145015f6":"alldata_r2 = pd.get_dummies(alldata_r)\nalldata_r2.shape","79e2c8b3":"alldata_r2.head()","d69a093c":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\n\nalldata_r3 = ss.fit_transform(alldata_r2)\nalldata_r3","f6c03655":"alldata_r3[0] #length is same as number of columns","19cc9314":"train_r2 = alldata_r3[:len(train)]\ntest_r2 = alldata_r3[len(train):]","4d0486ff":"from sklearn.linear_model import Ridge\nrid = Ridge(alpha=150)\nrid.fit(train_r2,train['SalePrice'])","8f5dc0c4":"result2 = rid.predict(test_r2)","ffe2dc02":"sub2 = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/sample_submission.csv')\nsub2.head()","902efdd8":"sub2['SalePrice'] = result2\nsub2.head() # check whether the result had correctly plugged in","d16956fe":"sub2.to_csv('submission_linear.csv',index=False)","70347284":"display(sub.head(), sub2.head())","5b05f2c9":"sub3 = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/sample_submission.csv')","443cb1d8":"sub3['SalePrice'] = sub['SalePrice'] * 0.6 + sub2['SalePrice'] * 0.4","691bec7c":"sub3.to_csv('ensemble.csv',index=False)","819f5c35":"# Prediction with RandomForestRegressor","86c33f99":"* Check with boxplot when we want to see the relationship between categoircal and continuous variable.\n* There seems to be a difference in SalePrice between each variables, but we need to check the value counts additionally. ","8607a7a1":"### Neighborhood","49640480":"# Prediction with Linear Model - Ridge\n\n\n* To use linear model, we need additional data preprocessing.\n* Data preprocessing - One Hot Encoding & Scaling","eb24779b":"* Label Encoding using LabelEncoder","9ac74021":"* Basic(No parameter tuning) : 17185.43728\n* alpha = 10 :16658.55091\n* alpha = 150 : 16046.71089","5b57dd7b":"### Correlation\n* Check correlation with SalePrice.","d53b6535":"* swarmplot : It is easier to interpret than stripplot.","612dc338":"* right-bottom : two out liars?","5455f5ec":"# Ensemble","e14da521":"* Excellent Garage quality has low SalePrice.","4c1ecdf4":"* Drop Id and SalePrice column\n* Id column is index column","34ee9044":"### Prediction with Ridge Model\n\n* L2 regularization","1d047a9d":"### One Hot Encoding","183069b7":"* Replace NA with -1.","99c05c27":"* There is no exellent garage quality(Ex) in test set. So we can delete this value to prevent from over fitting.","b06e19f5":"* Check type of the columns ","9d336b84":"* To be continued","2b012ad3":"## Importance","9e0d7d42":"# Preprocess Data","ef7f2fa7":"### GrLivArea","812a20ee":"### above_basement_area","6e24f123":"### year\n\n* YearBuilt: Original construction date\n* YearRemodAdd: Remodel date\n* MoSold: Month Sold\n* YrSold: Year Sold","6eaa5a50":"### total_and_garage","ecdb7dfe":"* Be careful with Over fitting.\n\n\n* I made C column where A + B = C \uc0c8\ub85c\uc6b4 \ud53c\ucc98\ub97c \ub9cc\ub4e4\uba74 \uacfc\uc801\ud569 \ubb38\uc81c \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc744 \uac83. \n* Also made E column where C + D = E (Be careful) - Interaction twice. \uacfc\uc801\ud569 \uc8fc\uc758. \n* Deleting C column('above_basement_area') and  just saving E column(total_and_garage), but the score got worse.","a1f225d1":"# Load Data\n* Load train and test data","43788ee3":"### Scaling","a27cbb88":"# Data Visualization","9891f195":"## Feature Engineering","e107b9f1":"* There are 11 NAs. Fill in with -1","bd838f31":"* Sort out numeric columns","d9794fdc":"* GrLivArea, GarageArea, TotalBsmtSF, 1stFlrSF, YearBuilt,YearRemodAdd : Numerical columns\n* Consider using linear model(Ridge, lasso)","f2227afc":"### Area\n* LotArea : Lot size in square feet\n* MasVnrArea: Masonry veneer area in square feet\n* BsmtFinSF1: Type 1 finished square feet\n* BsmtFinSF2: Type 2 finished square feet\n* BsmtUnfSF: Unfinished square feet of basement area\n* TotalBsmtSF: Total square feet of basement area\n* 1stFlrSF: First Floor square feet\n* 2ndFlrSF: Second floor square feet\n* LowQualFinSF: Low quality finished square feet (all floors)\n* GrLivArea: Above grade (ground) living area square feet\n* GarageArea: Size of garage in square feet\n* WoodDeckSF: Wood deck area in square feet\n* OpenPorchSF: Open porch area in square feet\n* EnclosedPorch: Enclosed porch area in square feet\n* 3SsnPorch: Three season porch area in square feet\n* ScreenPorch: Screen porch area in square feet\n* PoolArea: Pool area in square feet\n","3a6f0e35":"* stripplot : It is easy to understand the overall appearance when there is not much data in data set.","9e1176bd":"* Split into train and test data set. ","b729c0e7":"* tree : 15303.90315\n* linear : 16046.71089\n\n* ensemble(9:1) : 14687.59965\n* ensemble(7:3) : 13901.92513\n* ensemble(6:4) : 13745.08144"}}