{"cell_type":{"026340fa":"code","7148a453":"code","f282d928":"code","e6de28a3":"code","8f14fde3":"code","66014ae8":"code","a4a3b18b":"code","0854fc23":"code","c98dae0f":"code","454a1909":"code","388fa4d8":"code","051e0748":"code","afcfd4eb":"code","cc87d0e3":"code","074ca011":"code","3f096e6b":"code","7c75cfb6":"code","bcfd4799":"markdown","bcf14789":"markdown","43b8ad33":"markdown","2bcb600f":"markdown"},"source":{"026340fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7148a453":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cufflinks as cf\nimport sklearn\nfrom sklearn import svm,preprocessing\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\nimport os","f282d928":"import pandas as pd\ndata_more = pd.read_csv(\"..\/input\/diamond-price-prediction\/data-more.csv\")\ndf= pd.read_csv(\"..\/input\/diamond-price-prediction\/diamonds.csv\",index_col=0)","e6de28a3":"df.head()","8f14fde3":"df.columns","66014ae8":"df.info()","a4a3b18b":"df.describe()","0854fc23":"sns.FacetGrid(df,hue='cut',height=6).map(sns.distplot,'price').add_legend()\nplt.plot()","c98dae0f":"cut_dict={'Fair':1,'Good':2,'Very Good':3,'Premium':4,'Ideal':5}\nclarity_dict={'I1':1,'SI2':2,'SI1':3,'VS2':4,'VS1':5,'VVS2':6,'VVS1':7,'IF':8}\ncolor_dict={'D':7,'E':6,'F':5,'G':4,'H':3,'I':2,'J':1}","454a1909":"df['cut']=df['cut'].map(cut_dict)\ndf['clarity']=df['clarity'].map(clarity_dict)\ndf['color']=df['color'].map(color_dict)","388fa4d8":"df.head()","051e0748":"df.isnull().any()","afcfd4eb":"df.isnull().sum()","cc87d0e3":"df=sklearn.utils.shuffle(df,random_state=42)\nX=df.drop(['price'],axis=1).values\nX=preprocessing.scale(X)\ny=df['price'].values\ny=preprocessing.scale(y)","074ca011":"test_size=200\nX_train=X[:-test_size]\ny_train=y[:-test_size]\nX_test=X[-test_size:]\ny_test=y[-test_size:]","3f096e6b":"from sklearn.neighbors import KNeighborsRegressor\nscore=[]\nfor k in range(1,20):\n    clf=KNeighborsRegressor(n_neighbors=k,weights='distance',p=1)\n    clf.fit(X_train,y_train)\n    score.append(clf.score(X_test,y_test))","7c75cfb6":"trace0=go.Scatter(\ny=score,\nx=np.arange(1,len(score)+1),\nmode='lines+markers',\nmarker=dict(\n    color='rgb(150,10,10)'\n    )\n)\nlayout=go.Layout(\n     title='',\n     xaxis=dict(title='K value',\n                tickmode='linear'\n               ),\n    yaxis=dict(\n        title='Score'\n    ))\nfig=go.Figure(data=[trace0],layout=layout)\niplot(fig,filename='basic-line')\n\n","bcfd4799":"### Data Modeling","bcf14789":"##### 2.1 Categorical data to numerical Data","43b8ad33":"#### Preprocessing Data","2bcb600f":"#### 2.2 Dropping additional index attribute"}}