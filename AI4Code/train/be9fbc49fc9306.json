{"cell_type":{"f62664c2":"code","2d97e8ac":"code","1cc401db":"code","0e6d4f9f":"code","edfbd7c7":"code","b0d20978":"code","ed435930":"code","eb437c37":"code","2eb51a1d":"code","9c7a5ec2":"code","1217d286":"code","98411f64":"code","8379c12b":"code","aca1cb77":"code","4d0cda09":"code","aa52a791":"code","8ce95bd6":"code","c2c50ffd":"code","15ebff14":"code","3c3ba819":"code","1f3c8211":"code","2d7b659e":"code","0345b94f":"code","315ae802":"code","8ccb5699":"code","e59b69d9":"code","8f0390ee":"code","ea00d529":"code","16ed9da6":"code","f24bdc41":"code","d008dba3":"code","250d50cb":"code","490cc412":"code","4cace713":"code","15e36d11":"code","c206288d":"code","cea0af6a":"code","a28ca4ea":"code","260334b9":"code","62304ab7":"code","70245847":"code","805d5c9b":"code","62bb0d0c":"code","f34cb555":"markdown","98e21b08":"markdown","2145186c":"markdown","8118297e":"markdown","6d1b3ba2":"markdown","043b0ae5":"markdown","d0e7ca7a":"markdown","d6120cf4":"markdown","081d7a4b":"markdown","7fb8cc3c":"markdown","b714054f":"markdown","f032c170":"markdown","5d982d5a":"markdown","b7ffb4f5":"markdown","774e8322":"markdown","13a27de5":"markdown","a78803a9":"markdown","210409d8":"markdown","cf51d331":"markdown","09f8efa0":"markdown","1d6c52d9":"markdown","d2e877ac":"markdown","afd09e24":"markdown","0124cbf6":"markdown","372e152d":"markdown","83bc9a66":"markdown","006ff58a":"markdown","4ee2c058":"markdown","55a8185a":"markdown","35a62c32":"markdown","ac692d49":"markdown","4e60ae1b":"markdown","e54aa1b3":"markdown","a11927b8":"markdown","b114751f":"markdown","f972c22b":"markdown","9f488e3e":"markdown","b212cfd2":"markdown","805ddd0e":"markdown","c5e40c21":"markdown","d45660e3":"markdown","88ea7ef1":"markdown","bd268ba5":"markdown","d8087b45":"markdown","f48e1dec":"markdown","b7b4eaf6":"markdown","14997434":"markdown","746504b9":"markdown","2e6f33fb":"markdown","34a6d973":"markdown"},"source":{"f62664c2":"#Basic libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px","2d97e8ac":"import os\nos.listdir(\"..\/input\/olympic-games\")","1cc401db":"\nathletes = pd.read_csv('..\/input\/olympic-games\/athletes.csv')\ncountries = pd.read_csv('..\/input\/olympic-games\/countries.csv')\nevents = pd.read_csv('..\/input\/olympic-games\/events.csv',encoding='ISO-8859-1')","0e6d4f9f":"athletes.head()","edfbd7c7":"athletes = athletes.drop('id',axis=1)","b0d20978":"athletes.shape","ed435930":"athletes.isna().sum()","eb437c37":"athletes[athletes.dob.isna()]","2eb51a1d":"athletes['dob'] = athletes['dob'].fillna(\"12\/25\/87\")","9c7a5ec2":"#height\nathletes['height'] = athletes.groupby([\"sport\",\"sex\"])[\"height\"].transform(\n    lambda x: x.fillna(x.median()))","1217d286":"#weight\nathletes['weight'] = athletes.groupby([\"sport\",\"sex\"])[\"weight\"].transform(\n    lambda x: x.fillna(x.median()))","98411f64":"#weight boxing\nathletes['weight'] = athletes.groupby([\"sex\"])[\"weight\"].transform(\n    lambda x: x.fillna(x.median()))","8379c12b":"athletes.dtypes","aca1cb77":"#creation birth year, month and day variables\n\n#year\nathletes['birth_year'] = athletes['dob'].str.strip().str[-2:].astype(float)\nathletes['birth_year'] = athletes['birth_year'].apply(lambda x: (x + 2000) if (x < 16) else (x + 1900))\n\n#month\nathletes['birth_month'] = athletes['dob'].str.strip().str[:2]\nathletes['birth_month'] = athletes['birth_month'].str.replace(\"\/\", \"\").astype(float)\n\n#day\nathletes['birth_day'] = athletes['dob'].str.strip().str[-5:-3]\nathletes['birth_day'] = athletes['birth_day'].str.replace(\"\/\", \"\").astype(float)","4d0cda09":"#calculating age\nathletes['age'] = 2016 - athletes['birth_year']\nathletes.loc[athletes['birth_month'] > 8, 'age'] = 2015 - athletes['birth_year']\nathletes.loc[(athletes['birth_month'] == 8) & (athletes['birth_day'] > 15), 'age'] = 2015 - athletes['birth_year'] ","aa52a791":"athletes = athletes.drop('dob', axis=1)\nathletes = athletes.drop('birth_year', axis=1)\nathletes = athletes.drop('birth_month', axis=1)\nathletes = athletes.drop('birth_day', axis=1)","8ce95bd6":"athletes['total_medals'] = athletes['gold'] + athletes['silver'] + athletes['bronze']","c2c50ffd":"countries.head()","15ebff14":"countries.isna().sum()","3c3ba819":"countries[countries.population.isna() | countries.gdp_per_capita.isna()]","1f3c8211":"#### Filling Nans population thanks to internet info\ncountries.loc[countries['code'] == 'COK','population'] = float(17459)\ncountries.loc[countries['code'] == 'ERI','population'] = float(3214000) #number from 2011\ncountries.loc[countries['code'] == 'PLE','population'] = float(4367000)\ncountries.loc[countries['code'] == 'TPE','population'] = float(23618200)\n\n#Filling NaNs gdp thansks to internet info\ncountries.loc[countries['code'] == 'ASA','gdp_per_capita'] = float(11696)\ncountries.loc[countries['code'] == 'AND','gdp_per_capita'] = float(37224)\ncountries.loc[countries['code'] == 'ARU','gdp_per_capita'] = float(25239)\ncountries.loc[countries['code'] == 'BER','gdp_per_capita'] = float(106886)\ncountries.loc[countries['code'] == 'IVB','gdp_per_capita'] = float(43818)\ncountries.loc[countries['code'] == 'CAY','gdp_per_capita'] = float(78296)\ncountries.loc[countries['code'] == 'COK','gdp_per_capita'] = float(17682)\ncountries.loc[countries['code'] == 'CUB','gdp_per_capita'] = float(8060)\ncountries.loc[countries['code'] == 'ERI','gdp_per_capita'] = float(447)\ncountries.loc[countries['code'] == 'GUM','gdp_per_capita'] = float(35562)\ncountries.loc[countries['code'] == 'IRI','gdp_per_capita'] = float(5265)\ncountries.loc[countries['code'] == 'PRK','gdp_per_capita'] = float(663)\ncountries.loc[countries['code'] == 'LBA','gdp_per_capita'] = float(4035)\ncountries.loc[countries['code'] == 'LIE','gdp_per_capita'] = float(165028)\ncountries.loc[countries['code'] == 'MTN','gdp_per_capita'] = float(1123)\ncountries.loc[countries['code'] == 'PLE','gdp_per_capita'] = float(3074)\ncountries.loc[countries['code'] == 'PNG','gdp_per_capita'] = float(2509)\ncountries.loc[countries['code'] == 'PUR','gdp_per_capita'] = float(30628)\ncountries.loc[countries['code'] == 'SMR','gdp_per_capita'] = float(46692)\ncountries.loc[countries['code'] == 'SYR','gdp_per_capita'] = float(709)\ncountries.loc[countries['code'] == 'TPE','gdp_per_capita'] = float(23071)\ncountries.loc[countries['code'] == 'VEN','gdp_per_capita'] = float(9092)\ncountries.loc[countries['code'] == 'ISV','gdp_per_capita'] = float(35931)","2d7b659e":"#number of gold medal\nnb_gold_per_countries = athletes.groupby('nationality')['gold'].agg('sum').rename_axis('code').to_frame('gold')\ncountries = pd.merge(countries,nb_gold_per_countries,on=\"code\")\n\n#number of silver medals\nnb_silver_per_countries = athletes.groupby('nationality')['silver'].agg('sum').rename_axis('code').to_frame('silver')\ncountries = pd.merge(countries,nb_silver_per_countries,on=\"code\")\n\n#number of bronze medals\nnb_bronze_per_countries = athletes.groupby('nationality')['bronze'].agg('sum').rename_axis('code').to_frame('bronze')\ncountries = pd.merge(countries,nb_bronze_per_countries,on=\"code\")\n\n#total medals \nnb_medals_per_countries = athletes.groupby('nationality')['total_medals'].agg('sum').rename_axis('code').to_frame('total_medals')\ncountries = pd.merge(countries,nb_medals_per_countries,on=\"code\")\n\n#number of female athletes\nnb_female_athletes_per_countries = athletes[athletes['sex'] == 'female']['nationality'].value_counts().rename_axis('code').to_frame('nb_female_athletes')\ncountries = pd.merge(countries,nb_female_athletes_per_countries,on=\"code\")\n\n#number of male athletes\nnb_male_athletes_per_countries = athletes[athletes['sex'] == 'male']['nationality'].value_counts().rename_axis('code').to_frame('nb_male_athletes')\ncountries = pd.merge(countries,nb_male_athletes_per_countries,on=\"code\")\n\n#number of athletes\nnb_athletes_per_countries = athletes['nationality'].value_counts().rename_axis('code').to_frame('nb_athletes')\ncountries = pd.merge(countries,nb_athletes_per_countries,on=\"code\")","0345b94f":"countries.head()","315ae802":"events.head()","8ccb5699":"events = events.drop('id',axis=1)","e59b69d9":"#number competitions\nsports = events['sport'].value_counts().rename_axis('sport').to_frame('nb_competitions')\n\n#number of female athletes\nnb_female_athletes_per_sports = athletes[athletes['sex'] == 'female']['sport'].value_counts().rename_axis('sport').to_frame('nb_female_athletes')\nsports = pd.merge(sports,nb_female_athletes_per_sports,on=\"sport\")\n\n#number of male athletes\nnb_male_athletes_per_sports = athletes[athletes['sex'] == 'male']['sport'].value_counts().rename_axis('sport').to_frame('nb_male_athletes')\nsports = pd.merge(sports,nb_male_athletes_per_sports,on=\"sport\")\n\n#number nb athletes\nnb_athletes_per_sports = athletes['sport'].value_counts().rename_axis('sport').to_frame('nb_athletes')\nsports = pd.merge(sports,nb_athletes_per_sports,on=\"sport\")\n\n#gold medals \nnb_gold_per_sports = athletes.groupby('sport')['gold'].agg('sum').rename_axis('sport').to_frame('gold')\nsports = pd.merge(sports,nb_gold_per_sports,on=\"sport\")\n\n#silver medals \nnb_silver_per_sports = athletes.groupby('sport')['silver'].agg('sum').rename_axis('sport').to_frame('silver')\nsports = pd.merge(sports,nb_silver_per_sports,on=\"sport\")\n\n#bronze medals \nnb_bronze_per_sports = athletes.groupby('sport')['bronze'].agg('sum').rename_axis('sport').to_frame('bronze')\nsports = pd.merge(sports,nb_bronze_per_sports,on=\"sport\")\n\n#total medals \nnb_medals_per_sports = athletes.groupby('sport')['total_medals'].agg('sum').rename_axis('sport').to_frame('total_medals')\nsports = pd.merge(sports,nb_medals_per_sports,on=\"sport\")","8f0390ee":"sports.head()","ea00d529":"athletes[athletes['sex'] == 'female'].describe()","16ed9da6":"athletes[athletes['sex'] == 'male'].describe()","f24bdc41":"fig = px.box(athletes, x=\"sport\", y=\"age\",color_discrete_sequence=['darkcyan'])\nfig.show()","d008dba3":"fig = px.box(athletes, x=\"sex\", y=\"age\",color='sex',color_discrete_sequence=['darkcyan','lightcoral'])\nfig.show()","250d50cb":"color_discrete_map = {'female': 'lightcoral', 'male': 'darkcyan'}\nfor sport in sports.index:\n    fig = px.scatter(athletes[athletes['sport'] == sport], x=\"weight\", y=\"height\", color=\"sex\",title=\"Heidh and weight per sex for {}\".format(sport),color_discrete_map=color_discrete_map)\n    fig.show()","490cc412":"import plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\nfig = go.Figure()\n\n# Make traces for graph\nfig.add_trace(go.Bar(x=sports.index, y=sports.nb_female_athletes, xaxis='x2', yaxis='y2',\n                marker=dict(color='lightcoral'),\n                name='female'))\nfig.add_trace(go.Bar(x=sports.index, y=sports.nb_male_athletes, xaxis='x2', yaxis='y2',\n                marker=dict(color='darkcyan'),\n                name='male'))\n\nfig.update_layout(\n    title_text='Sex distribution per sports', # title of plot\n)\n# Plot!\nfig.show()","4cace713":"fig = px.histogram(athletes, x='age',y=\"total_medals\", color_discrete_sequence=[\"darkcyan\"],title='Medals distribution per age').update_xaxes(categoryorder=\"total descending\")\nfig.show()","15e36d11":"fig = px.histogram(sports, x=sports.index,y=\"total_medals\", color_discrete_sequence=[\"darkcyan\"],title='total medals per sports').update_xaxes(categoryorder=\"total descending\")\nfig.show()","c206288d":"#Construction of a specific dataframe for this plot\nmedals_types = ['bronze','silver','gold']\nmedals = pd.DataFrame()\n\nfor medal in medals_types :\n        \n    df = pd.DataFrame(columns=['country','code','medal'])\n    df[['country','code']] = countries[['country','code']]\n    df['medal'] = str(medal)\n    nb_medals_per_countries = athletes.groupby('nationality')[medal].agg('sum').rename_axis('code').to_frame('count')\n    df = pd.merge(df,nb_medals_per_countries,on=\"code\")\n    medals = pd.concat([medals,df],ignore_index=True)\n    \n#Bart chart construction\nfig = px.bar(medals[medals['count'] >0], x=\"country\", y=\"count\", color=\"medal\",color_discrete_sequence=['darkorange', 'silver', 'gold'], title=\"Number of Olympic medals per countries\",\n            width=2000,height=700).update_xaxes(categoryorder=\"total descending\")\nfig.show()","cea0af6a":"medals_types = ['bronze','silver','gold']\nmedals = pd.DataFrame()\n\nfor sport in sports.index : \n    \n    for medal in medals_types :\n        \n        df = pd.DataFrame(columns=['country','code','sport','medal'])\n        df[['country','code']] = countries[['country','code']]\n        df['sport'] = str(sport)\n        df['medal'] = str(medal)\n        nb_medals_per_sports_countries = athletes[athletes['sport'] == sport].groupby('nationality')[medal].agg('sum').rename_axis('code').to_frame('count')\n        df = pd.merge(df,nb_medals_per_sports_countries,on=\"code\")\n        medals = pd.concat([medals,df],ignore_index=True)\n\n#Bart chart construction\nfor sport in sports.index : \n    fig = px.bar(medals[(medals['count'] >0) & (medals['sport'] == sport)], x=\"country\", y=\"count\", color=\"medal\",color_discrete_sequence=['darkorange', 'silver', 'gold'], title=\"Medals distribution for {}\".format(sport)).update_xaxes(categoryorder=\"total descending\")\n    fig.show()","a28ca4ea":"top10_female = athletes[athletes['sex'] == 'female'].sort_values(by=['total_medals','gold','silver','bronze'],ascending=False)\ntop10_female = top10_female.reset_index()\ntop10_female.index +=1\ntop10_female = top10_female[['name','nationality','sport','sex','age','height','weight','gold','silver','bronze','total_medals']]","260334b9":"top10_female.head(10)","62304ab7":"top10_male = athletes[athletes['sex'] == 'male'].sort_values(by=['total_medals','gold','silver','bronze'],ascending=False)\ntop10_male = top10_male.reset_index()\ntop10_male.index +=1\ntop10_male = top10_male[['name','nationality','sport','sex','age','height','weight','gold','silver','bronze','total_medals']]","70245847":"top10_male.head(10)","805d5c9b":"fig = px.scatter(countries, x=\"gdp_per_capita\", y=\"nb_athletes\",\n      size=\"total_medals\", color=\"total_medals\",color_continuous_scale='Cividis',\n                 hover_name=\"country\", size_max=60,range_x=[-3000,100000],title='Total medals compared to total athletes and gdp_per_capita')\nfig.show()","62bb0d0c":"#Construction of a specific dataframe for this plot\nsports_gdp = pd.DataFrame()\n\nfor sport in sports.index :\n        \n    df = pd.DataFrame(columns=['country','code','sport'])\n    df[['country','code']] = countries[['country','code']]\n    df0 = countries[['code','gdp_per_capita']]\n    df = pd.merge(df,df0,on=\"code\")\n    df['sport'] = str(sport)\n    nb_athletes_per_countries = athletes[athletes['sport'] == sport]['nationality'].value_counts().rename_axis('code').to_frame('nb_athletes')\n    df = pd.merge(df,nb_athletes_per_countries,on=\"code\")\n    nb_medals_per_countries = athletes[athletes['sport'] == sport].groupby('nationality')['total_medals'].agg('sum').rename_axis('code').to_frame('total_medals')\n    df = pd.merge(df,nb_medals_per_countries,on=\"code\")\n    sports_gdp = pd.concat([sports_gdp,df],ignore_index=True)\n    \n#plot\nfor sport in sports.index:\n    fig = px.scatter(sports_gdp[sports_gdp['sport'] == sport], x=\"gdp_per_capita\", y=\"nb_athletes\",\n      size=\"total_medals\", color=\"total_medals\",color_continuous_scale='Cividis',\n                 hover_name=\"country\", size_max=60,range_x=[-3000,100000],title='Total medals compared to total athletes and gdp_per_capita for {}'.format(sport))\n    fig.show()","f34cb555":"# 1. Cleanning datasets","98e21b08":"**Attention:** here, the number of medals corresponds to the number of medals distributed to athletes and not to the number of medals won by a country in a competition. It is therefore normal for team sports\/relay competitions to have a large number of medals because all athletes on a winning team will have their own medal. ","2145186c":"Obviously Michael Phelps is at the top of the standings It is the recordman of the number of gold medals won at the Olympic Games (23 gold medals all games combined)!","8118297e":"#### Checking types","6d1b3ba2":"### Women athletes description","043b0ae5":"### Sex distribution per sports","d0e7ca7a":"Through this notebook, I tried to realize relevant visualizations from Rio 2016 Olympic Games dataset. The visualizations are realized with the help of the bookstore Plotly ([see documentation](https:\/\/plotly.com\/python\/#basic-charts)).\n\nDon't hesitate to give me your feedback! I welcome any ideas for improvement.","d6120cf4":"# 2. Data exploration and visualizations","081d7a4b":"![image.png](attachment:image.png)","7fb8cc3c":"### Medals distribution according to age","b714054f":"### Medals distribution per Sports","f032c170":"It is interesting to see that the number of female athletes is lower than the number of male athletes in all categories. Gymnastics is an exception. ","5d982d5a":"### TOP 10 Male Athletes","b7ffb4f5":"### Data importations","774e8322":"#### Delete 'dob' variable","13a27de5":"### Medals distribution per countries","a78803a9":"## 1.4 Creating Sports dataset","210409d8":"### Total medals compared to total athletes and gdp_per_capita","cf51d331":"### Age boxplot per sports","09f8efa0":"#### Create age variable (at the date of the Olympics : august 16, 2016)","1d6c52d9":"This visualization is very interesting! We can realize that some countries have their specialties, like China in table tennis or Jamaica in athletics! ","d2e877ac":"Not surprisingly, the United States is far ahead from other countries. \nFrance ranks 6th, which is really not good! I think that this score is mainly due to our main disciplines: judo, equestrian and swimming.\nLet's check it out!","afd09e24":"#### Create 'total_medals' variable","0124cbf6":"According to Wikipedia, Pavel Sozykin was born the 12\/25\/87. Let's fill this !","372e152d":"## 2.2 Medals distribution","83bc9a66":"## 1.2 Countries dataset","006ff58a":"### TOP 10 Female Athletes","4ee2c058":"### Libraries importations","55a8185a":"We still have NaN values for boxers. We are going to give them the median value of all sports by sex. This is not the best solution. We will have to take this into account for the rest of the analysis.","35a62c32":"Nothing surprising! The more athletes a country has, the more medals it gets. \n\nOn the other hand, a high GDP per capita does not seem to be very necessary to have a large number of medals. It probably depends on sports. Unfortunately, some sports are less accessible financially, which prevents poorer countries from imposing themselves. Let's check this!","ac692d49":"### Creating values","4e60ae1b":"#### Filling 'dob' variable","e54aa1b3":"### Fill NaNs","a11927b8":"As we suspected, there are many sports that are more favorable to rich countries (sailing, equestrian etc.), while some sports, like wrestling and weightlifting, seem to let poor countries dominate.","b114751f":"#### Adding the number of medals and athletes per countries","f972c22b":"### Number of medals per sports","9f488e3e":"#### Thanks to internet, we can fill all these NaNs","b212cfd2":"#### Checking NaNs","805ddd0e":"## 2.3 Results compared to gdp_per_capita","c5e40c21":"### Men athletes description","d45660e3":"## 1.3 Events dataset","88ea7ef1":"## 2.1 Athletes characteristics","bd268ba5":"### Height and weight per sex","d8087b45":"#### Filling weight and height with median by sports and sexe","f48e1dec":"### Age boxplot per sex","b7b4eaf6":"Some sports have more medals to offer. This can be explained by : \n* A variety of disciplines (e.g. paul vault, sprint, throwing etc. for athletics)\n* Relay\/team competitions, which therefore offers a medal to each member (but on the medal table, a team win counts as one).","14997434":"The median age of the athletes is roughly equivalent between men (26) and women (25).","746504b9":"This distribution around athletes between 20 and 30 years old is not surprising after viewing our age boxplots. On the other hand, it is interesting to see that senior athletes, although few in number, also win medals!","2e6f33fb":"## 1.1 Athletes dataset","34a6d973":"We can notice that some disciplines, such as equestrian or shooting, allow high level athletes to have a long career. On the other hand, careers in other disciplines such as gymnastics or weightlifting stop at a very young age."}}