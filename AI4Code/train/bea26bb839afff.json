{"cell_type":{"1dcab233":"code","4eb64363":"code","0f600ded":"code","843593c8":"code","c5bb8219":"code","1e52e95f":"code","7a7d99c9":"code","2aa1ea49":"markdown","9f4b7e18":"markdown","6b860e7b":"markdown","7317fc0f":"markdown"},"source":{"1dcab233":"import numpy as np \nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\n\nimport torch\nimport torch.nn as nn\nimport torch.utils.data as Dataset","4eb64363":"SEED = 2021\ndef seedTorch(seed=SEED):\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    \nseedTorch()","0f600ded":"ROOT_PATH = \"..\/input\/recursion-cellular-image-classification\"\nTRAIN_PATH  = \"..\/input\/recursion-cellular-image-classification\/train.csv\"\nTEST_PATH = \"..\/input\/recursion-cellular-image-classification\/test.csv\"\nTRAIN_IMAGE_PATH = \"..\/input\/recursion-cellular-image-classification\/train\"\nTEST_IMAGE_PATH = \"..\/input\/recursion-cellular-image-classification\/test\"\n\nTEST_SIZE = 0.25\n\ndevice = 'cuda'\nBATCH_SIZE = 32\nCHANNELS = [1,2,3,4,5,6]","843593c8":"train_val = pd.read_csv(TRAIN_PATH)\ntrain, val = train_test_split(train_val, test_size = TEST_SIZE, random_state=SEED)\ntest = pd.read_csv(TEST_PATH)","c5bb8219":"class ImagesDS(Dataset.Dataset):\n    def __init__(self, df, img_dir, mode='train'):\n        self.records = df.to_records(index=False)\n        self.channels = CHANNELS\n        self.site = 1\n        self.mode = mode\n        self.img_dir = img_dir\n        self.len = df.shape[0]\n        \n    @staticmethod\n    def _load_img_as_tensor(file_name):\n        with Image.open(file_name) as img:\n            return T.ToTensor()(img)\n\n    def _get_img_path(self, index, channel):\n        experiment, well, plate = self.records[index].experiment, self.records[index].well, self.records[index].plate\n        return '\/'.join([self.img_dir,self.mode,experiment,f'Plate{plate}',f'{well}_s{self.site}_w{channel}.png'])\n        \n    def __getitem__(self, index):\n        paths = [self._get_img_path(index, ch) for ch in self.channels]\n        img = torch.cat([self._load_img_as_tensor(img_path) for img_path in paths])\n        if self.mode == 'train':\n            return img, int(self.records[index].sirna)\n        else:\n            return img, self.records[index].id_code\n\n    def __len__(self):\n        return self.len","1e52e95f":"train_ds = ImagesDS(train, ROOT_PATH, mode='train')\nval_ds = ImagesDS(val, ROOT_PATH, mode='train')\ntest_ds = ImagesDS(test, ROOT_PATH, mode='test')","7a7d99c9":"train_loader = Dataset.DataLoader(train_ds, batch_size=BATCH_SIZE, shuffle=True)\nval_loader = Dataset.DataLoader(val_ds, batch_size=BATCH_SIZE, shuffle=True)\ntest_loader = Dataset.DataLoader(test_ds, batch_size=BATCH_SIZE, shuffle=False)","2aa1ea49":"DataLoader(dataset, batch_size=1, shuffle=False, sampler=None,\\\n           batch_sampler=None, num_workers=0, collate_fn=None,\\\n           pin_memory=False, drop_last=False, timeout=0,\\\n           worker_init_fn=None, *, prefetch_factor=2,\\\n           persistent_workers=False)","9f4b7e18":"sample image path : ..\/input\/recursion-cellular-image-classification\/test\/HEPG2-08\/Plate1\/B02_s1_w1.png","6b860e7b":"# make loader","7317fc0f":"# make image dataset"}}