{"cell_type":{"cd376c39":"code","baf7b239":"code","4d0c60cb":"code","dc843465":"code","ff514bee":"code","5602f780":"code","793304dd":"code","00e2531f":"code","85326ef0":"code","2ecc097a":"code","dc7ae9d5":"code","9c5f3d6d":"code","e33b81ec":"code","7d8d3d67":"code","09f34d84":"code","e0f44e4b":"code","c539b165":"code","6d65d649":"code","1206be9e":"code","256ef50d":"code","28b5e23d":"code","ef572850":"code","edad9dd8":"code","033eb7a4":"code","bafcc4a7":"code","5026cbc9":"code","fc2730f3":"code","ca6caae6":"code","b46b0919":"code","9d9e8ddc":"code","f4f43e36":"code","87f903b8":"code","0d6943db":"code","0955ac2f":"code","3a28554c":"code","32556b43":"code","c5767305":"code","e8c85694":"code","a09b2c8f":"code","5b29a58a":"code","5b8aa615":"code","99859148":"code","94aa613f":"code","791751c9":"code","a11a988f":"code","7282e9e2":"code","561ebd5c":"markdown","2dc9aad1":"markdown","05549eeb":"markdown","5a94bacb":"markdown","6497ba48":"markdown","2fd57196":"markdown","94b49840":"markdown","495053f9":"markdown","9ec7eebb":"markdown","10a06102":"markdown","290adc08":"markdown"},"source":{"cd376c39":"# pandas \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4. pd\ub97c \uc57d\uce6d\uc73c\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","baf7b239":"# s\ub294 1, 3, 5, np.nan, 6, 8\uc744 \uc6d0\uc18c\ub85c \uac00\uc9c0\ub294 pandas.Series\ns = pd.Series([1, 3, 5, np.nan, 6, 8])\ns","4d0c60cb":"# 20210101\ubd80\ud130 6\uc77c\uac04\uc758 \ub0a0\uc9dc \ubc94\uc704\ub97c \uc0dd\uc131\ud558\ub294 pandas.date_range\ndates = pd.date_range('20210101', periods=6)\ndates","dc843465":"# 6x4 \ud589\ub82c\uc5d0 -1\uc5d0\uc11c 1 \uc0ac\uc774\uc758 \ub79c\ub364\ud55c \uc22b\uc790\ub97c \uac00\uc9c0\ub294 \uc6d0\uc18c\ub97c \uac00\uc9c0\uace0, index\uc5f4\uc740 dates, \ub098\uba38\uc9c0 coulmns\uc740 \uc21c\uc11c\ub300\ub85c A, B, C, D\ub85c \ud558\ub294 DataFrame \uc0dd\uc131\ndf = pd.DataFrame(data=np.random.randn(6, 4), index=dates,\n                  columns=['A', 'B', 'C', 'D'])\ndf","ff514bee":"# dataframe\uc758 \ub9e8 \uc704 \ub2e4\uc12f\uc904\uc744 \ubcf4\uc5ec\uc8fc\ub294 head()\ndf.head()","5602f780":"# 3\uc904\ndf.head(3)","793304dd":"# dataframe index\ndf.index","00e2531f":"# dataframe columns\ndf.columns","85326ef0":"# dataframe values\ndf.values","2ecc097a":"# dataframe\uc5d0 \ub300\ud55c \uc804\uccb4\uc801\uc778 \uc694\uc57d\uc815\ubcf4\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. index, columns, null\/not-null\/dtype\/memory usage\uac00 \ud45c\uc2dc\ub429\ub2c8\ub2e4.\ndf.info()","dc7ae9d5":"# dataframe\uc5d0 \ub300\ud55c \uc804\uccb4\uc801\uc778 \ud1b5\uacc4\uc815\ubcf4\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\ndf.describe()","9c5f3d6d":"# column B\ub97c \uae30\uc900\uc73c\ub85c \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c\ndf.sort_values(by=\"B\", ascending=False)\n#df.sort_index()","e33b81ec":"# pandas dataframe\uc740 column \uc774\ub984\uc744 \uc774\uc6a9\ud558\uc5ec \uae30\ubcf8\uc801\uc778 Indexing\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.\n# column A\ub97c indexing\ndf[\"A\"]\ndf[[\"A\", \"C\"]] # \uc5ec\ub7ec column\uc744 indexing\ud560 \ub54c\ub294 list\ub85c \uc368\uc57c\ud568!","7d8d3d67":"# \ud2b9\uc815\ub0a0\uc9dc\ub97c \ud1b5\ud55c Indexing\ndf.loc['20210101'] # locator","09f34d84":"# \ud2b9\uc815 \uc704\uce58\ub97c \ud1b5\ud55c indexing\ndf.iloc[1] # index locator == list(numpy array) indexing","e0f44e4b":"# dataframe\uc5d0\uc11c slicing\uc744 \uc774\uc6a9\ud558\uba74 row \ub2e8\uc704\ub85c \uc798\ub824\ub098\uc635\ub2c8\ub2e4.\n# \uc55e\uc5d0\uc11c 3\uc904\uc744 slicing \ud569\ub2c8\ub2e4.\ndf[:3]","c539b165":"# df\uc5d0\uc11c index value\ub97c \uae30\uc900\uc73c\ub85c indexing\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4. (\uc5ec\uc804\ud788 row \ub2e8\uc704)\n# 20210102\ubd80\ud130 20210104\uae4c\uc9c0 \uc798\ub77c\ubd05\ub2c8\ub2e4. # index\uc758 \uac12\uc744 \uc0ac\uc6a9\ud558\uac8c\ub418\uba74 Index\ub97c \uc774\uc6a9\ud55c slicing\ndf['20210101':'20210103']","6d65d649":"df.loc['2021-1-2']","1206be9e":"# df.loc\ub294 \ud2b9\uc815\uac12\uc744 \uae30\uc900\uc73c\ub85c indexing\ud569\ub2c8\ub2e4. (key - value)\n# 2021-01-01\uac12\uc744 \uac00\uc9c0\ub294 row\ub97c \uac00\uc838\uc635\ub2c8\ub2e4.\ndf.loc['20210101'][\"B\"]\ndf.loc['20210101', \"B\"] # .loc[row\uc870\uac74, col\uc870\uac74]","256ef50d":"# df.loc\uc5d0 2\ucc28\uc6d0 indexing\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4. [:, [\"A\", \"B\"]]\uc758 \uc758\ubbf8\ub294 \ubaa8\ub4e0 row\uc5d0 \ub300\ud574\uc11c columns\ub294 A, B\ub9cc \uac00\uc838\uc624\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4.\ndf.loc[:, [\"A\", \"B\"]]\ndf.loc['20210101', \"A\":\"C\"]","28b5e23d":"# \uc774\ubc88\uc5d4 slicing\uc744 \ud1b5\ud574 \ud2b9\uc815 row\uc911\uc5d0\uc11c columns\ub294 A, B\ndf.loc['20210102':'20210104', [\"A\", \"B\"]]\ndf.loc[['20210101', '20210103'], [\"A\", \"D\"]]","ef572850":"# \ud2b9\uc815 row\ub97c index\uac12\uc744 \ud1b5\ud55c indexing\ndf.loc['20210101']\n#df.iloc[0]\n\ndf.loc[df.index[0]]","edad9dd8":"# 2\ucc28\uc6d0 \ub9ac\uc2a4\ud2b8 indexing\uacfc \uac19\uc740 \uc6d0\ub9ac\uac00 \ub418\uc5c8\uc2b5\ub2c8\ub2e4.\ndf.loc['20210104', \"B\"]\ndf[\"B\"]['20210104']","033eb7a4":"# df.iloc\ub294 \uc815\uc218\ub97c \uc774\uc6a9\ud55c indexing\uacfc \uac19\uc2b5\ub2c8\ub2e4.(row \uae30\uc900) 3\uc740 4\ubc88\uc9f8\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4.\ndf.iloc[2, 3]","bafcc4a7":"# iloc\ub85c 2\ucc28\uc6d0 indexing\uc744 \ud558\uac8c\ub418\uba74, row \uae30\uc900\uc73c\ub85c index 3,4\ub97c \uac00\uc838\uc624\uace0 column \uae30\uc900\uc73c\ub85c 0, 1\uc744 \uac00\uc838\uc635\ub2c8\ub2e4.\ndf.iloc[[3, 4], [0, 1]]\ndf.iloc[3:5, 0:2]","5026cbc9":"# slicing\uc774 \uc544\ub2cc \uc9c1\uc811 \ub9ac\uc2a4\ud2b8 \ud615\ud0dc\ub85c \uae30\uc7ac\ud558\ub294 indexing\n","fc2730f3":"# Q. 2\ucc28\uc6d0 indexing\uc5d0 \ub4a4\uc5d0\uac00 : \uba74 \uc5b4\ub5a4 \uc758\ubbf8\uc77c\uae4c\uc694?\n# \ub450\ubc88\uc9f8 column \uac00\uc838\uc624\uae30\ndf.iloc[:, 1]\ndf.loc[:, df.columns[1]]\ndf[df.columns[1]]","ca6caae6":"# numpy array\uc758 2\ucc28\uc6d0 indexing\uacfc \uac19\ub2e4.","b46b0919":"df","9d9e8ddc":"# pandas\ub294 fancy indexing\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. (\uc0ac\uc2e4 numpy\uc5d0\uc11c \uc9c0\uc6d0\ud558\uae30 \ub54c\ubb38\uc5d0 pandas\ub3c4 \uc9c0\uc6d0\ud569\ub2c8\ub2e4.)\n# fancy indexing\uc774\ub780 \uc870\uac74\ubb38\uc744 \ud1b5\ud574 indexing\uc744 \ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc73c\ub85c True\uc640 False\ub97c \uc6d0\uc18c\ub85c \ud558\ub294 \ub9ac\uc2a4\ud2b8\ub97c \ud1b5\ud574 masking\ud558\ub294 \uc6d0\ub9ac\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4.\n# Q. column A\uc5d0 \uc788\ub294 \uc6d0\uc18c\ub4e4\uc911\uc5d0 0\ubcf4\ub2e4 \ud070 \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4.\n\n# 1. column A \uac00\uc838\uc624\uae30\ndf.loc[:, \"A\"]\n\n# 2. column A\uc5d0 \uc788\ub294 \uc6d0\uc18c\ub4e4\uc911\uc5d0 0\ubcf4\ub2e4 \ud070\ndf.loc[:, \"A\"] > 0\n\n# 3. column A\uc5d0 \uc788\ub294 \uc6d0\uc18c\ub4e4\uc911\uc5d0\uc11c 0\ubcf4\ub2e4 \ud070 \ub370\uc774\ud130\ndf.loc[df.loc[:, \"A\"] > 0, \"A\"]","f4f43e36":"# fancy indexing\n# Q. df\uc758 column B\uc5d0 \uc788\ub294 \uc6d0\uc18c\ub4e4 \uc911\uc5d0\uc11c 1\ubcf4\ub2e4 \ud070 \uc6d0\uc18c\ub4e4\uc744 1\ub85c \ubc14\uafd4\uc8fc\uc138\uc694.\n# A.\ndf.loc[df.loc[:, \"B\"] > 1, \"B\"] = 1\ndf","87f903b8":"df[df < 0] = 0 # df\uc5d0 \uc788\ub294 \uc74c\uc218\uac12\ub4e4\uc744 \ubaa8\ub450 0\uc73c\ub85c \ubc14\uafbc\ub2e4.\ndf","0d6943db":"#df[df > 0]\ndf[df > 0]","0955ac2f":"# dataframe \ud558\ub098\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \uc815\ub9d0 \ub9d0\uadf8\ub300\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4.\ndf2 = df.copy()\ndf2","3a28554c":"# dataframe\uc740 dictionary\uc640 \ube44\uc2b7\ud55c \ubc29\uc2dd\uc73c\ub85c assignment\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4.\n# df\uc5d0 ['one', 'one','two','three','four','three'] \ub9ac\uc2a4\ud2b8\ub97c column\uc758 value\ub85c \ud558\ub294 column E\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4.\ndf2[\"E\"] = ['one', 'one', 'two', 'three', 'four', 'three']\ndf2","32556b43":"# df.isin\uc740 \ud574\ub2f9 value\ub4e4\uc774 \ub4e4\uc5b4\uc788\ub294 row\uc5d0 \ub300\ud574\uc120 True\ub97c \uac00\uc9c0\ub294 Series\ub97c \ub9ac\ud134\ud55c\ub2e4.\ndf2['E'].isin(['two','four'])","c5767305":"# df2\uc5d0\uc11c column E\uc5d0 two \ub610\ub294 four\ub77c\ub294 \uac12\uc744 \uac00\uc9c4 \ub370\uc774\ud130\ub97c \ucd9c\ub825\ud574\uc8fc\uc138\uc694.\ndf2[df2['E'].isin(['two','four'])]","e8c85694":"# data \ud3f4\ub354\uc5d0 \uc788\ub294 iris.csv\ub97c \ubd88\ub7ec\uc624\uc790.\niris = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\niris","a09b2c8f":"# Species column\uc744 \uc22b\uc790\ub85c \ubc14\uafd4\ubcf4\uc790.\n#iris.Species.unique()\n# Iris-setosa --> 0\n# Iris-versicolor --> 1\n# Iris-virginica --> 2\n\n# 1. species column \ucc3e\uae30\niris.Species\n\n# 2. Species column\uc5d0\uc11c Iris-setosa \ucc3e\uae30\niris.Species == \"Iris-setosa\"\n\n# 3. Iris-setosa\ub97c 0\uc73c\ub85c \uce58\ud658\niris.loc[iris.Species == \"Iris-setosa\", \"Species\"] = 0\n\n# Q. \ub098\uba38\uc9c0 2\uac1c\ub3c4 \ud574\ubcf4\uc138\uc694!\niris.loc[iris.Species == \"Iris-versicolor\", \"Species\"] = 1\niris.loc[iris.Species == \"Iris-virginica\", \"Species\"] = 2\niris","5b29a58a":"iris.sort_values(by=\"Species\")","5b8aa615":"# \ubc14\uafbc Dataframe\uc744 Iris_edited.csv \ub85c \uc800\uc7a5\ud558\uc790.\niris.to_csv(\"iris_edited.csv\", index=False)","99859148":"# \ub2e4\ub978 \ud30c\uc77c\ub3c4 \ubd88\ub7ec\uc624\uc790.\nsurvey = pd.read_csv(\"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\")\nsurvey","94aa613f":"# \ubc15\uc0ac \ud559\uc704 \uc18c\uc9c0\uc790\ub4e4\ub9cc \uace8\ub77c\ubcf4\uc790.\n#survey.Q4.unique()\nsurvey.loc[survey.Q4 == \"Doctoral degree\"]","791751c9":"# \ubc15\uc0ac \ud559\uc704 \uc18c\uc9c0\uc790\ub4e4\uc5d0 \ub300\ud55c \uc815\ubcf4\ub9cc kaggle_survey_2020_phd.csv\ub85c \ub2e4\uc2dc \uc800\uc7a5\ud558\uc790.\n","a11a988f":"# regular expression\nsurvey[survey.Q3.str.contains(\"Korea|India|Japan\")]","7282e9e2":"# (OPTIONAL) \ubc15\uc0ac \ud559\uc704 \uc18c\uc9c0\uc790\uc774\uba74\uc11c, \ub300\ud55c\ubbfc\uad6d \uad6d\uc801\uc744 \uac00\uc9c4 \uc0ac\ub78c\ub4e4\uc744 \ubf51\uc544\ubcf4\uc790.\n# 1. \ub300\ud55c\ubbfc\uad6d \uc0ac\ub78c \ucc3e\uc790\nskorea = survey.loc[survey.Q3 == \"South Korea\"]\n#survey.Q3.str.contains(\"Korea\") # Q3 column\uc5d0 \"Korea\" \ub77c\ub294 \ub2e8\uc5b4\uac00 \ud3ec\ud568\ub41c row\ub4e4\uc744 True\ub85c \ub3cc\ub824\uc8fc\ub294 \ud568\uc218.\n#survey[survey.Q3.str.contains(\"Korea\")]\n\n# 2. \ub300\ud55c\ubbfc\uad6d \uc0ac\ub78c \uc911\uc5d0 \ubc15\uc0ac \ud559\uc704 \uc18c\uc9c0\uc790\ub97c \ucc3e\uc790\nskorea.loc[skorea.Q4 == \"Doctoral degree\"]\n\n\n# (OPTIONAL) 3. \ub300\ud55c\ubbfc\uad6d \uc0ac\ub78c \uc911\uc5d0 \ubc15\uc0ac \ud559\uc704 \uc18c\uc9c0\uc790\ub97c \ud55c\ubc88\uc5d0 \ucc3e\ub294 \ubc95.\nsurvey.loc[(survey.Q3 == \"South Korea\") & (survey.Q4 == \"Doctoral degree\")]","561ebd5c":"## 5.4. DataFrame Indexing\n\n> Indexing : \ub370\uc774\ud130\uc5d0\uc11c \uc5b4\ub5a4 \ud2b9\uc815 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uc6d0\uc18c\ub97c \ucc3e\ub294 \ubc29\ubc95.\n\n> \uc804\uccb4 DataFrame\uc5d0\uc11c \uc870\uac74\uc5d0 \ub9cc\uc871\ud558\ub294 \ub370\uc774\ud130\ub97c \uc27d\uac8c \ucc3e\uc544\uc11c \uc870\uc791\ud560 \ub54c \uc720\uc6a9\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","2dc9aad1":"- pandas\ub294 <b>\"python data analysis\"<\/b>\uc758 \uc57d\uc790\uc785\ub2c8\ub2e4.\n> pandas\ub294 \uc815\ud615 \ub370\uc774\ud130 \ucc98\ub9ac\uc5d0 \ud2b9\ud654\ub418\uc5b4 \uc788\ub2e4.\n\n- pandas \uc5ed\uc2dc \ub2e4\uc591\ud55c \uba38\uc2e0\ub7ec\ub2dd \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc5d0 \uc758\uc874\uc131\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n> scikit-learn, scipy, statsmodel, tensorflow, pytorch, ...\n\n\n- \uac04\ub2e8\ud558\uac8c \uc0dd\uac01\ud558\uba74, **python\uc5d0\uc11c excel\uc758 \uae30\ub2a5\uc744 \uc0ac\uc6a9**\ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4.\n> pandas = python + excel \/\/ pandas & excel \/\/ pandas VS MS Excel\n\n- \ud558\uc9c0\ub9cc, pandas\ub294 numpy array\ub97c \ubca0\uc774\uc2a4\ub85c \uc9c0\uc6d0\ud558\uba70 \ud30c\uc774\uc36c\uacfc \ud568\uaed8 \uac15\ub825\ud55c \uc2dc\ub108\uc9c0\ub97c \ub0b4\uae30 \ub54c\ubb38\uc5d0, \uc5d1\uc140 \uadf8 \uc774\uc0c1\uc758 \ud37c\ud3ec\uba3c\uc2a4\ub97c \ub0c5\ub2c8\ub2e4.\n> pandas\uac00 Excel\uc5d0 \ube44\ud574 \uace0\uc131\ub2a5 \ub370\uc774\ud130\ucc98\ub9ac\uc5d0 \uc801\ud569\ud558\ub2e4.","05549eeb":"- Pandas \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uae30\ubcf8\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \ub2e4\ub8e8\ub294 \ub2e8\uc704\ub294 DataFrame\uc785\ub2c8\ub2e4. \ud754\ud788 \uc54c\uace0\uc788\ub294 spreadsheet\uc640 \uac19\uc740 \uac1c\ub150\uc785\ub2c8\ub2e4.\n\n\n- \uc774\ub7ec\ud55c \ud615\ud0dc\uc758 \ub370\uc774\ud130\ub294 Structured Data \ub610\ub294 Panel Data \ub610\ub294 Tabular Data\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4.\n\n\n- pandas\ub97c \uacf5\ubd80\ud55c\ub2e4\ub294 \uac83\uc740 \uacb0\uad6d dataframe\uc758 \uc0ac\uc6a9\ubc95\uc744 \uc775\ud788\uace0 \ud65c\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b4\ub2e4\ub294 \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\n- pandas\ub97c \uc798 \ud65c\uc6a9\ud558\uba74 \ub300\ubd80\ubd84\uc758 structured data\ub97c \uc790\uc720\uc790\uc7ac\ub85c \ub2e4\ub8f0 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4.","5a94bacb":"- pandas\ub294 date_range\ub77c\ub294 \ud568\uc218\ub97c \ud1b5\ud574, \ub0a0\uc9dc\uc815\ubcf4\ub97c \uc27d\uac8c \uc0dd\uc131\ud574\uc8fc\ub294 \uac1d\uccb4\ub3c4 \uc81c\uacf5\ud569\ub2c8\ub2e4.","6497ba48":"## 5.1 Pandas\ub780?","2fd57196":"## 5.2. Pandas\uc758 \uae30\ubcf8 \uc790\ub8cc\uad6c\uc870(Series, DataFrame)","94b49840":"- DataFrame\uc740 2\ucc28\uc6d0 \ud14c\uc774\ube14\uc774\uace0, \ud14c\uc774\ube14\uc758 \ud55c \uc904(\ud589\/\uc5f4)\uc744 Series\ub77c\uace0 \ud569\ub2c8\ub2e4.\n\n\n- Series\uc758 \ubaa8\uc784\uc774 \uace7, DataFrame\uc774 \ub429\ub2c8\ub2e4.","495053f9":"## 5.5. \uc678\ubd80 \ub370\uc774\ud130 \uc77d\uace0 \uc4f0\uae30","9ec7eebb":"![pandas_files](..\/images\/pandas\/pandas_files.png)","10a06102":"## 5.3. Dataframe \uae30\ucd08 method","290adc08":"![numpy_data_type](..\/images\/pandas\/dataframe.png)"}}