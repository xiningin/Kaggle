{"cell_type":{"68a89b4b":"code","f9390a22":"code","b9ba0675":"code","e2417017":"code","a957d2d7":"code","5b846044":"code","daadbe89":"code","3229433c":"code","fd382639":"code","9f03b9bd":"code","5ee01532":"code","f2590589":"code","c06c0a46":"code","f189a19a":"code","18e3c441":"code","2ebfc5be":"code","87e3c64c":"code","4da038c0":"code","d937d7cc":"code","275b9126":"code","b54176b9":"code","ee40fc3a":"code","edf126b0":"code","752ac7e2":"code","d8c9ff7a":"code","fbcbb18c":"code","f8978f13":"code","d3cd6a3e":"code","2ed88e06":"code","b783fa3f":"markdown"},"source":{"68a89b4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9390a22":"import kaggle_environments","b9ba0675":"env = kaggle_environments.make(\"connectx\", debug=True)\nenv.render()","e2417017":"def my_agent(observation, configuration):\n    from random import choice\n    return choice([c for c in range(configuration.columns) if observation.board[c] == 0])","a957d2d7":"env.reset()\n# Play as the first agent against default \"random\" agent.\nenv.run([None, \"random\"])\nenv.render(mode=\"ipython\", width=500, height=450)","5b846044":"ROW = 7\nCOLUMN = 6","daadbe89":"from random import randint","3229433c":"example_field = list([randint(0,2) for i in range(4*4)])","fd382639":"print(example_field)","9f03b9bd":"def get_columns(list_field, r_l, c_l):\n    columns = []\n    for i in range(r_l):\n        new_column = []\n        for k in range(i, r_l*c_l, r_l):\n            new_column.append(list_field[k])\n        columns.append(new_column)\n    return columns    ","5ee01532":"def get_all_vertical(game_field, length):\n    all_columns = []\n    for column in game_field:\n        for i in range(length, len(column)+1):\n            all_columns.append(column[i-length:i])\n    return all_columns","f2590589":"def test_correct(window, agents_disc):\n    return all(map(lambda x: x == agents_disc,window))","c06c0a46":"def correct_vertical(game_field, agents_disc, length):\n    all_verts = get_all_vertical(game_field, length)\n    return list(map(lambda vert: test_correct(vert, agents_disc), all_verts)).count(True)","f189a19a":"def get_rows_from_columns(game_field):\n    column_length = len(game_field[0])\n    rows = []\n    for i in range(column_length):\n        row = [game_field[k][i] for k in range(len(game_field))]\n        rows.append(row)\n    return rows","18e3c441":"\"\"\"def get_all_horizontal(game_field, length):\n    rows = get_rows_from_columns(game_field)\n    return get_all_vertical(rows, length)\n\"\"\"","2ebfc5be":"def correct_horizontal(game_field, agents_disc, length):\n    rows = get_rows_from_columns(game_field)\n    return correct_vertical(rows, agents_disc, length)","87e3c64c":"def put_disc_in(game_field, disc, column):\n    new_game_field = game_field[:]\n    new_game_field[column]\n    last_zero = -1\n    for i in range(len(new_game_field[column])):\n        if new_game_field[column][i] != 0:\n            last_zero = i\n    new_game_field[column][last_zero] = disc\n    return new_game_field","4da038c0":"from random import choice\nimport random","d937d7cc":"def get_score(game_field, disc, enemy_disk, inarow):\n    score = 0\n    if inarow > 0:\n        score += 1_000_000_000 * (correct_vertical(game_field, disc, inarow) + correct_horizontal(game_field, disc, inarow))\n    if inarow - 1 > 0:\n        # score -= 1_000 * (correct_vertical(game_field, enemy_disk, inarow - 1) + correct_horizontal(game_field, enemy_disk, inarow - 1))\n        score += 100 * (correct_vertical(game_field, disc, inarow - 1) + correct_horizontal(game_field, disc, inarow - 1))\n    return score","275b9126":"test = {\"tobi\": 10, \"laura\": 5}\nmax(list(test.items()), key=lambda x: x[1])\n#list(test.items())","b54176b9":"def make_move(game_field, options, disc, inarow):\n    enemy_disc = [1, 2]\n    enemy_disc.remove(disc)\n    enemy_disc = enemy_disc[0]\n    score_options = {option: 0 for option in options}\n    for opt in options:\n        new_game_field = put_disc_in(game_field,disc, opt)\n        score = get_score(new_game_field, disc, enemy_disc, inarow)\n        score_options[opt] = score\n    return max(list(score_options.items()), key=lambda x: x[1])[0]","ee40fc3a":"def get_all_possible_columns(game_field):\n    possible = []\n    for counter, column in enumerate(game_field):\n        if column[0] == 0:\n            possible.append(counter)\n    return possible","edf126b0":"def my_second_agent(observation, configuration):\n    row_length = configuration.columns\n    column_length = configuration.rows\n    game_field = get_columns(observation.board, row_length, column_length)\n    options = get_all_possible_columns(game_field)\n    disc = observation.mark\n    return make_move(game_field, options, disc, configuration.inarow)\n    ","752ac7e2":"cc = [[0,1,0,0], [1, 0, 0, 1], [0, 2, 1, 2], [2, 1, 0, 1]]","d8c9ff7a":"get_rows_from_columns(cc)","fbcbb18c":"env.reset()\n# Play as the first agent against default \"random\" agent.\nenv.run([my_second_agent, \"random\"])\nenv.render(mode=\"ipython\", width=500, height=450)","f8978f13":"from kaggle_environments import evaluate","d3cd6a3e":"def get_win_percentages(agent1, agent2, n_rounds=100):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))","2ed88e06":"get_win_percentages(my_second_agent, \"random\", 100)","b783fa3f":"1. created an agent better than random !! yeah!!**"}}