{"cell_type":{"2e93b4f0":"code","8480c680":"code","e68b736c":"code","36643e86":"code","ace036ba":"code","c19572de":"code","4f2d705f":"code","cfc06515":"code","e9231800":"code","c3e5a7dc":"code","cf9588a2":"code","2fe899d6":"code","fd454238":"code","1d960180":"code","3542a663":"code","d58db26e":"code","9b1c7187":"code","80a02174":"code","19692249":"code","d7040019":"code","fc0d825a":"code","ea2fa004":"code","970ab4c7":"code","a24518e9":"code","b29d9d45":"code","cf07d643":"code","d0de7fa0":"code","fca6a783":"code","6e3744e2":"code","3519b0aa":"code","7e76be72":"code","1f310e17":"code","c6a24e94":"code","c6d0bdab":"code","ef690673":"code","474899b5":"code","68310b39":"code","c68b80d8":"code","bdd1312d":"code","88944db5":"code","10be69cc":"markdown","3b7a876d":"markdown","6c8f9217":"markdown","b6b20585":"markdown","42b114af":"markdown","891e34eb":"markdown","e76a7feb":"markdown","080d9c35":"markdown","25501028":"markdown","889d49e2":"markdown","f4b176a6":"markdown","da5120e0":"markdown","7bd2541c":"markdown","0a4a90b1":"markdown","03c5d8ac":"markdown","98bec0a6":"markdown","3cfd209a":"markdown","236e31bc":"markdown","913f2b3b":"markdown","6d39abb2":"markdown","69ff2a4c":"markdown","8ae6c430":"markdown","b9af223e":"markdown","16bf75f7":"markdown","5d6a3475":"markdown","a403136e":"markdown","245fe0b9":"markdown","ff65eb4e":"markdown","322f7c0f":"markdown","a23a6e99":"markdown","3f57cb73":"markdown","12b2bac3":"markdown","090cdb9a":"markdown","d007fc68":"markdown","f57b8986":"markdown","d1a72ea4":"markdown","657bf8fc":"markdown","99fa329f":"markdown","6340d83b":"markdown","34cf0daa":"markdown","bfa6c867":"markdown","3bbe5bfe":"markdown","1dbfc908":"markdown","54a6dd25":"markdown","4b37c70d":"markdown","760808aa":"markdown","d30424d1":"markdown","949961c7":"markdown","82fc6876":"markdown","364de000":"markdown","16b11120":"markdown"},"source":{"2e93b4f0":"import os\nimport tensorflow as tf\nimport cProfile","8480c680":"tf.executing_eagerly()","e68b736c":"x = [[2.]]\nm = tf.matmul(x, x)\nprint(\"hello, {}\".format(m))","36643e86":"a = tf.constant([[1, 2],\n                [3, 4]])\nprint(a)","ace036ba":"b = tf.add(a, 1)\nprint(b)","c19572de":"print(a * b)","4f2d705f":"import numpy as np\n\nc = np.multiply(a, b)\nprint(c)","cfc06515":"print(a.numpy())","e9231800":"def fizzbuzz(max_num):\n    counter = tf.constant(0)\n    max_num = tf.convert_to_tensor(max_num)\n    for num in range(1, max_num.numpy()+1):\n        num = tf.constant(num)\n        if int(num % 3) == 0 and int(num % 5) == 0:\n            print('FizzBuzz')\n        elif int(num % 3) == 0:\n            print('Fizz')\n        elif int(num % 5) == 0:\n            print('Buzz')\n        else:\n            print(num.numpy())\n        counter += 1\n\nfizzbuzz(15)","c3e5a7dc":"w = tf.Variable([[1.0]])\nwith tf.GradientTape() as tape:\n    loss = w * w\n\ngrad = tape.gradient(loss, w)\nprint(grad)","cf9588a2":"# mnist \ub370\uc774\ud130\ub97c \uac00\uc838\uc624\uace0 \ud615\uc2dd\uc5d0 \ub9de\ucda5\ub2c8\ub2e4\n(mnist_images, mnist_labels), _ = tf.keras.datasets.mnist.load_data()\n\ndataset = tf.data.Dataset.from_tensor_slices(\n    (tf.cast(mnist_images[..., tf.newaxis] \/ 255, tf.float32),\n    tf.cast(mnist_labels, tf.int64)))\ndataset = dataset.shuffle(1000).batch(32)","2fe899d6":"# \ubaa8\ub378\uc744 \ub9cc\ub4ed\ub2c8\ub2e4\nmnist_model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(16, [3, 3], activation='relu',\n                          input_shape=(None, None, 1)),\n    tf.keras.layers.Conv2D(16, [3, 3], activation='relu'),\n    tf.keras.layers.GlobalAveragePooling2D(),\n    tf.keras.layers.Dense(10)\n])","fd454238":"for images, labels in dataset.take(1):\n    print(\"Logits: \", mnist_model(images[0:1]).numpy())","1d960180":"optimizer = tf.keras.optimizers.Adam()\nloss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n\nloss_history = []","3542a663":"def train_step(images, labels):\n    with tf.GradientTape() as tape:\n        logits = mnist_model(images, training=True)\n        \n        # \ucd9c\ub825\uc758 \ubaa8\uc591\uc744 \ud655\uc778\ud558\uae30 \uc704\ud574 assert\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4.\n        tf.debugging.assert_equal(logits.shape, (32, 10))\n        \n        loss_value = loss_object(labels, logits)\n    \n    loss_history.append(loss_value.numpy().mean())\n    grads = tape.gradient(loss_value, mnist_model.trainable_variables)\n    optimizer.apply_gradients(zip(grads, mnist_model.trainable_variables))","d58db26e":"def train(epochs):\n    for epoch in range(epochs):\n        for (batch, (images, labels)) in enumerate(dataset):\n            train_step(images, labels)\n        print('Epoch {} finished'.format(epoch))","9b1c7187":"train(epochs = 3)","80a02174":"import matplotlib.pyplot as plt\n\nplt.plot(loss_history)\nplt.xlabel('Batch #')\nplt.ylabel('Loss [entropy]')","19692249":"class Linear(tf.keras.Model):\n    def __init__(self):\n        super(Linear, self).__init__()\n        self.W = tf.Variable(5., name='weight')\n        self.B = tf.Variable(10., name='bias')\n    def call(self, inputs):\n        return inputs * self.W + self.B","d7040019":"# 3 * x + 2 \uc8fc\ubcc0\uc758 \uc7a5\ub09c\uac10 \ub370\uc774\ud130 \uc138\ud2b8\nNUM_EXAMPLES = 2000\ntraining_inputs = tf.random.normal([NUM_EXAMPLES])\nnoise = tf.random.normal([NUM_EXAMPLES])\ntraining_outputs = training_inputs * 3 + 2 + noise\n\n# \ucd5c\uc801\ud654\ub418\ub294 \uc190\uc2e4 \ud568\uc218\ndef loss(model, inputs, targets):\n    error = model(inputs) - targets\n    return tf.reduce_mean(tf.square(error))\n\ndef grad(model, inputs, targets):\n    with tf.GradientTape() as tape:\n        loss_value = loss(model, inputs, targets)\n    return tape.gradient(loss_value, [model.W, model.B])","fc0d825a":"model = Linear()\noptimizer = tf.keras.optimizers.SGD(learning_rate=0.01)\n\nprint(\"Initial loss: {:.3F}\".format(loss(model, training_inputs, training_outputs)))\n\nsteps = 300\nfor i in range(steps):\n    grads = grad(model, training_inputs, training_outputs)\n    optimizer.apply_gradients(zip(grads, [model.W, model.B]))\n    if i % 20 == 0:\n        print(\"Loss at step {:03d}: {:.3f}\".format(i, loss(model, training_inputs, training_outputs)))","ea2fa004":"print(\"Final loss: {:.3f}\".format(loss(model, training_inputs, training_outputs)))","970ab4c7":"print(\"W = {}, B = {}\".format(model.W.numpy(), model.B.numpy()))","a24518e9":"model.save_weights('weights')\nstatus = model.load_weights('weights')","b29d9d45":"x = tf.Variable(10.)\ncheckpoint = tf.train.Checkpoint(x=x)","cf07d643":"x.assign(2.) # \ubcc0\uc218\uc5d0 \uc0c8\ub85c\uc6b4 \uac12\uc744 \ub123\uace0 \uc800\uc7a5\ud569\ub2c8\ub2e4.\ncheckpoint_path = '.\/ckpt\/'\ncheckpoint.save('.\/ckpt\/')","d0de7fa0":"x.assign(11.) # \uc800\uc7a5 \uc774\ud6c4\uc5d0 \ubcc0\uc218\ub97c \ubc14\uafc9\ub2c8\ub2e4.\n\n# \uccb4\ud06c\ud3ec\uc778\ud2b8\ub85c\ubd80\ud130 \uac12\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4.\ncheckpoint.restore(tf.train.latest_checkpoint(checkpoint_path))\n\nprint(x) # => 2.0","fca6a783":"model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(16, [3, 3], activation='relu'),\n    tf.keras.layers.GlobalAveragePooling2D(),\n    tf.keras.layers.Dense(10)\n])\noptimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\ncheckpoint_dir = 'path\/to\/model_dir'\nif not os.path.exists(checkpoint_dir):\n    os.makedirs(checkpoint_dir)\ncheckpoint_prefix = os.path.join(checkpoint_dir, \"ckpt\")\nroot = tf.train.Checkpoint(optimizer=optimizer,\n                          model=model)\n\nroot.save(checkpoint_prefix)\nroot.restore(tf.train.latest_checkpoint(checkpoint_dir))","6e3744e2":"m = tf.keras.metrics.Mean(\"loss\")\nm(0)\nm(5)\nm.result() # => 2.5\nm([8, 9])\nm.result() # => 5.5","3519b0aa":"logdir = \".\/tb\/\"\nwriter = tf.summary.create_file_writer(logdir)\n\nsteps = 1000\nwith writer.as_default(): # \ud639\uc740 \ubc18\ubcf5\ubb38 \uc774\uc804\uc5d0 writer.set_as_default()\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4.\n    for i in range(steps):\n        step = i + 1\n        # \uc2e4\uc81c \ud559\uc2b5 \ud568\uc218\ub85c \uc190\uc2e4\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n        loss = 1 - 0.001 * step\n        if step % 100 == 0:\n            tf.summary.scalar('loss', loss, step=step)","7e76be72":"!ls tb\/","1f310e17":"def line_search_step(fn, init_x, rate=1.0):\n    with tf.GradientTape() as tape:\n        # \ubcc0\uc218\ub4e4\uc740 \uc790\ub3d9\uc73c\ub85c \ucd94\uc801\ub429\ub2c8\ub2e4.\n        # \ud558\uc9c0\ub9cc \ud150\uc11c\ub85c\ubd80\ud130 \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 'watch'\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.\n        tape.watch(init_x)\n        value = fn(init_x)\n    grad = tape.gradient(value, init_x)\n    grad_norm = tf.reduce_sum(grad * grad)\n    init_value = value\n    while value > init_value - rate * grad_norm:\n        x = init_x - rate * grad\n        value = fn(x)\n        rate \/= 2.0\n    return x, value","c6a24e94":"@tf.custom_gradient\ndef clip_gradient_by_norm(x, norm):\n    y = tf.identity(x)\n    def grad_fn(dresult):\n        return [tf.clip_by_norm(dresult, norm), None]\n    return y, grad_fn","c6d0bdab":"def log1pexp(x):\n    return tf.math.log(1 + tf.exp(x))\n\ndef grad_log1pexp(x):\n    with tf.GradientTape() as tape:\n        tape.watch(x)\n        value = log1pexp(x)\n    return tape.gradient(value, x)","ef690673":"# x = 0\uc5d0\uc11c \uae30\uc6b8\uae30 \uacc4\uc0b0\uc774 \uc798 \uc791\ub3d9\ub429\ub2c8\ub2e4.\ngrad_log1pexp(tf.constant(0.)).numpy()","474899b5":"# \ud558\uc9c0\ub9cc x = 100\uc5d0\uc11c\ub294 \uc218\uce58\uc801\uc778 \ube44\uc548\uc815\uc131 \ub54c\ubb38\uc5d0 \uc2e4\ud328\ud569\ub2c8\ub2e4.\ngrad_log1pexp(tf.constant(100.)).numpy()","68310b39":"@tf.custom_gradient\ndef log1pexp(x):\n    e = tf.exp(x)\n    def grad(dy):\n        return dy * (1 - 1 \/ (1 + e))\n    return tf.math.log(1 + e), grad\n\ndef grad_log1pexp(x):\n    with tf.GradientTape() as tape:\n        tape.watch(x)\n        value = log1pexp(x)\n    return tape.gradient(value, x)","c68b80d8":"# \uc774\uc804\uacfc \ub3d9\uc77c\ud558\uac8c, x = 0\uc5d0\uc11c \uae30\uc6b8\uae30 \uacc4\uc0b0\uc740 \uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4.\ngrad_log1pexp(tf.constant(0.)).numpy()","bdd1312d":"# \uadf8\ub9ac\uace0 x = 100\uc5d0\uc11c\ub3c4 \uae30\uc6b8\uae30 \uacc4\uc0b0\uc774 \uc791\ub3d9\ud569\ub2c8\ub2e4.\ngrad_log1pexp(tf.constant(100.)).numpy()","88944db5":"import time\n\ndef measure(x, steps):\n    # TensorFlow\ub294 \ucc98\uc74c \uc0ac\uc6a9\ub420 \ub54c GPU\ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. (\uc2dc\uac04 \uce21\uc815\uc5d0\uc11c \uc81c\uc678\ub429\ub2c8\ub2e4)\n    tf.matmul(x, x)\n    start = time.time()\n    for i in range(steps):\n        x = tf.matmul(x, x)\n    # tf.malmul\uc740 \ud589\ub82c\uacf1\uc774 \uc644\ub8cc\ub418\uae30 \uc804\uc5d0 \ubc18\ud658\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    # (\uc608\ub97c \ub4e4\uc5b4, CUDA \uc2a4\ud2b8\ub9bc\uc5d0 \uacc4\uc0b0\uc774 \ub300\uae30\uc5f4\uc5d0 \uc62c\ub77c\uac04 \ub3d9\uc548 \ubc18\ud658\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4).\n    # \uc544\ub798\uc758 x.numpy() \ud638\ucd9c\uc740 \ubaa8\ub4e0 \ub300\uae30\uc5f4\uc5d0 \uc62c\ub77c\uac00 \uc788\ub294 \uacc4\uc0b0\ub4e4\uc774 \uc644\ub8cc\ub41c \uac83\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4.\n    # (\uadf8\ub9ac\uace0 \ud638\uc2a4\ud2b8 \uba54\ubaa8\ub9ac\uc5d0 \uacb0\uacfc\ub97c \ubcf5\uc0ac\ud560 \uac83\uc774\uba70,\n    # \uadf8\ub807\uae30\uc5d0 \ud589\ub82c\uacf1 \uc5f0\uc0b0 \uc2dc\uac04\uc5d0 \ub354\ud574 \uc57d\uac04\uc758 \uc2dc\uac04\uc744 \ub354 \ud3ec\ud568\ud569\ub2c8\ub2e4).\n    _ = x.numpy()\n    end = time.time()\n    return end - start\n\nshape = (1000, 1000)\nsteps = 200\nprint(\"Time to multiply a {} matrix by itself {} times:\".format(shape, steps))\n\n# CPU\uc5d0\uc11c \uc2e4\ud589\ud569\ub2c8\ub2e4:\nwith tf.device(\"\/cpu:0\"):\n    print(\"CPU: {} secs\".format(measure(tf.random.normal(shape), steps)))\n\n# \uac00\ub2a5\ud558\ub2e4\uba74, GPU\uc5d0\uc11c \uc2e4\ud589\ud569\ub2c8\ub2e4:\nif tf.config.experimental.list_physical_devices(\"GPU\"):\n    with tf.device(\"\/gpu:0\"):\n        print(\"GPU: {} secs\".format(measure(tf.random.normal(shape), steps)))\nelse:\n    print(\"GPU: not found\")","10be69cc":"\uc989\uc2dc \uc2e4\ud589\uc758 \uc8fc\uc694 \uc774\uc810\uc740 \ubaa8\ub378\uc774 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \ud638\uc2a4\ud2b8 \uc5b8\uc5b4\uc758 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 [fizzbuzz](https:\/\/en.wikipedia.org\/wiki\/Fizz_buzz)\ub97c \uc27d\uac8c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","3b7a876d":"# \uc989\uc2dc \uc2e4\ud589","6c8f9217":"\uc774\uc81c TensorFlow \uacc4\uc0b0\uc744 \uc2e4\ud589\ud560 \uc218 \uc788\uace0, \uadf8 \uacb0\uacfc\ub4e4\uc774 \uc989\uac01\uc801\uc73c\ub85c \ubc18\ud658\ub420 \uac83\uc785\ub2c8\ub2e4:","b6b20585":"GPU \uc704\uc5d0\uc11c \ud559\uc2b5\ub418\ub294 [ResNet50](https:\/\/github.com\/tensorflow\/tensorflow\/tree\/master\/tensorflow\/python\/eager\/benchmarks\/resnet50)\uacfc \uac19\uc740 \uacc4\uc0b0\uc774 \ubb34\uac70\uc6b4 \ubaa8\ub378\ub4e4\uc5d0\uc11c\ub294, \uc989\uc2dc \uc2e4\ud589\uc758 \uc131\ub2a5\uc740 [tf.function](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/function) \uc2e4\ud589\uacfc \ube44\uc2b7\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ucc28\uc774\ub294 \uc801\uc740 \uacc4\uc0b0\uc744 \uac00\uc9c4 \ubaa8\ub378\ub4e4\uc5d0\uc11c\ub294 \uc810\uc810 \ucee4\uc9c0\uace0, \uc791\uc740 \uc5f0\uc0b0\uc774 \ub9ce\uc740 \ubaa8\ub378\uc5d0\uc11c \ud56b\ucf54\ub4dc \uacbd\ub85c\ub97c \ucd5c\uc801\ud654\ud558\ub294 \ub370\uc5d0 \ub9ce\uc740 \ud560 \uc77c\uc774 \uc788\uc2b5\ub2c8\ub2e4.","42b114af":"\uc989\uc2dc \uc2e4\ud589\uc744 \ud558\ub294 \ub3d9\uc548\uc5d0\ub294 \uacc4\uc0b0\uc774 \uc790\ub3d9\uc73c\ub85c GPU\uc5d0\uc11c \ub5a8\uc5b4\uc9c0\uac8c \ub429\ub2c8\ub2e4. \ub9cc\uc57d \uacc4\uc0b0\uc774 \uc5b4\ub290 \uacf3\uc5d0\uc11c \uc2e4\ud589\ub420\uc9c0\uc5d0 \ub300\ud574 \uc81c\uc5b4\ud558\uace0 \uc2f6\ub2e4\uba74, tf.device('\/gpu:0') \ube14\ub85d(\ud639\uc740 CPU\ub85c)\uc73c\ub85c \ub458\ub7ec\uc313\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","891e34eb":"\uac01\uac01\uc758 \ud638\ucd9c\ub9c8\ub2e4 \ub2e4\ub978 \uc5f0\uc0b0\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, \ubaa8\ub4e0 \uc815\ubc29\ud5a5 \uc5f0\uc0b0\uc740 \"\ud14c\uc774\ud504\"\uc5d0 \uae30\ub85d\ub429\ub2c8\ub2e4. \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574, \ud14c\uc774\ud504\ub97c \ub4a4\ub85c \uc7ac\uc0dd\ud55c \ub4a4\uc5d0 \ubc84\ub824\uc9d1\ub2c8\ub2e4. \ud2b9\uc815\ud55c [tf.GradientTape](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape)\uc740 \ud558\ub098\uc758 \uae30\uc6b8\uae30\ub9cc \uacc4\uc0b0\ud560 \uc218 \uc788\uc73c\uba70, \uadf8 \ub4a4\uc758 \ud638\ucd9c\uc740 \ub7f0\ud0c0\uc784 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4.","e76a7feb":"[tf.train.Checkpoint](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/train\/Checkpoint)\ub97c \uc0ac\uc6a9\ud574\uc11c \uc774 \uacfc\uc815\uc5d0 \uc804\uccb4\uc801\uc778 \uc81c\uc5b4\ub97c \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","080d9c35":"\ubaa8\ub378\uc744 \uc800\uc7a5\ud558\uace0 \ubd88\ub7ec\uc624\uae30 \uc704\ud574\uc11c, [tf.train.Checkpoint](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/train\/Checkpoint)\ub294 \uac1d\uccb4\uc758 \ub0b4\ubd80 \uc0c1\ud0dc\ub97c \uc228\uaca8\uc9c4 \ubcc0\uc218\uc758 \uc694\uccad \uc5c6\uc774 \uc800\uc7a5\ud569\ub2c8\ub2e4. \ubaa8\ub378, \ucd5c\uc801\ud654\uae30, \uc804\uc5ed\uc801\uc778 \ub2e8\uacc4\uc758 \uc0c1\ud0dc\ub97c \uae30\ub85d\ud558\uae30 \uc704\ud574\uc11c\ub294, [tf.train.Checkpoint](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/train\/Checkpoint)\uc5d0 \ub118\uaca8\uc8fc\uba74 \ub429\ub2c8\ub2e4:","25501028":"### \ub3d9\uc801 \ubaa8\ub378","889d49e2":"\ub2e4\uc74c\uc73c\ub85c:\n1. \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\n2. \ubaa8\ub378\uc758 \ub9e4\uac1c \ubcc0\uc218\uc5d0 \ub530\ub978 \uc190\uc2e4 \ud568\uc218\uc758 \uae30\uc6b8\uae30.\n3. \uae30\uc6b8\uae30\uc5d0 \uae30\ubc18\ud55c \ubcc0\uc218 \uac31\uc2e0 \uc804\ub7b5.","f4b176a6":"**\ucc38\uace0**: \ubcc0\uc218\ub4e4\uc740 python \uac1d\uccb4\uc5d0 \ub300\ud55c \ub9c8\uc9c0\ub9c9 \ucc38\uc870\uac00 \uc0ad\uc81c\ub420 \ub54c\uae4c\uc9c0 \uc720\uc9c0\ub418\uba70, \uadf8 \uc774\ud6c4\uc5d0 \uc0ad\uc81c\ub429\ub2c8\ub2e4.","da5120e0":"\uac1c\uc778\ud654\ud55c \uae30\uc6b8\uae30\ub294 \uae30\uc6b8\uae30\ub97c \uc624\ubc84\ub77c\uc774\ub529\ud560 \uc218 \uc788\ub294 \uc26c\uc6b4 \ubc29\ubc95\uc785\ub2c8\ub2e4. \uc815\ubc29\ud5a5 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c, \uc785\ub825, \ucd9c\ub825, \uc911\uac04 \uacb0\uacfc\uc5d0 \ub530\ub978 \uae30\uc6b8\uae30\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc5ec\uae30 \uc5ed\uc804\ud30c\uc5d0\uc11c \uae30\uc6b8\uae30\uc758 \ub188\uc744 \ubb36\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4:","7bd2541c":"\uc989\uc2dc \uc2e4\ud589\uc774 \uac1c\ubc1c\uacfc \ub514\ubc84\uae45\uc744 \ub354 \uc0c1\ud638\uc791\uc6a9\uc744 \ud560 \uc218 \uc788\uac8c \ub9cc\ub4e4\uc5b4 \uc8fc\uc5c8\ub2e4\uba74, TnesorFlow 1.X \ubc29\uc2dd\uc758 \uadf8\ub798\ud504 \uc2e4\ud589\uc740 \ubd84\uc0b0 \ud559\uc2b5, \uc131\ub2a5 \ucd5c\uc801\ud654, \uc81c\ud488 \ubc30\ud3ec\uc5d0 \uc7a5\uc810\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uac04\uadf9\uc744 \uba54\uc6b0\uae30 \uc704\ud574, TensorFLow 2.0\uc740 [tf.function](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/function) API\ub97c \ud1b5\ud574 function\uc744 \uc18c\uac1c\ud588\uc2b5\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc6d0\ud558\uc2dc\uba74, [tf.function](https:\/\/www.tensorflow.org\/guide\/function) \uac00\uc774\ub4dc\ub97c \ubcf4\uc138\uc694.","0a4a90b1":"\uc989\uc2dc \uc2e4\ud589\uc740 [NumPy](http:\/\/www.numpy.org\/)\uc640 \uc798 \uc791\ub3d9\ud569\ub2c8\ub2e4. NumPy \uc5f0\uc0b0\uc740 [tf.Tensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor) \uc778\uc218\ub97c \ud5c8\uc6a9\ud569\ub2c8\ub2e4. TensorFlow [tf.math](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/math) \uc5f0\uc0b0\uc740 Python \uac1d\uccb4\uc640 NumPy \ubc30\uc5f4\uc744 [tf.Tensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor) \uac1d\uccb4\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. tf.Tensor.numpy \uba54\uc18c\ub4dc\ub294 \uac1d\uccb4\uc758 \uac12\uc744 NumPy ndarray\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.","03c5d8ac":"\uc989\uc2dc \uc2e4\ud589\uc740 \uc5f0\uad6c\uc640 \uc2e4\ud5d8\uc744 \uc704\ud55c \uc720\uc5f0\ud55c \uae30\uacc4 \ud559\uc2b5 \ud50c\ub7ab\ud3fc\uc774\uba70, \ub2e4\uc74c\uc758 \uc7a5\uc810\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4:\n* \uc9c1\uad00\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4 - \uc790\uc5f0\uc2a4\ub7fd\uac8c \ucf54\ub4dc\ub97c \uad6c\uc870\ud654\ud558\uba70 Python \ub370\uc774\ud130 \uad6c\uc870\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc791\uc740 \ubaa8\ub378\uacfc \uc791\uc740 \ub370\uc774\ud130\uc5d0\uc11c \ube60\ub974\uac8c \ubc18\ubcf5\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uc26c\uc6cc\uc9c4 \ub514\ubc84\uae45 - \uc2e4\ud589\ub418\uace0 \uc788\ub294 \ubaa8\ub378\ub97c \uad00\ucc30\ud558\uae30 \uc704\ud574\uc11c \uacc4\uc0b0\uc744 \uc9c1\uc811\uc801\uc73c\ub85c \ud638\ucd9c\ud560 \uc218 \uc788\uace0 \ubcc0\ud654\ub97c \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989\uac01\uc801\uc778 \uc624\ub958 \ubcf4\uace0\ub97c \uc704\ud574\uc11c \ud45c\uc900 Python \ub514\ubc84\uae45 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n* \uc790\uc5f0\uc2a4\ub7ec\uc6b4 \uc81c\uc5b4 \ud750\ub984 - \uadf8\ub798\ud504 \uc81c\uc5b4 \ud750\ub984 \ub300\uc2e0 Python \uc81c\uc5b4 \ud750\ub984\uc744 \uc0ac\uc6a9\ud558\uba74\uc11c \ub3d9\uc801\uc778 \ubaa8\ub378\uc758 \uc124\uba85\uc744 \uac04\ub2e8\ud558\uac8c \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc989\uc2dc \uc2e4\ud589\uc740 \ub300\ubd80\ubd84\uc758 TensorFlow \uacc4\uc0b0\uacfc GPU \uac00\uc18d\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4.","98bec0a6":"### \uac1d\uccb4\uc9c0\ud5a5 \ud3c9\uac00\uc9c0\ud45c","3cfd209a":"\ubcc0\uc218\ub4e4\uc758 \ubb36\uc74c\uc740 \uadf8 \uc704\uc5d0\uc11c \uc791\ub3d9\ud558\ub294 \uba54\uc18c\ub4dc\ub4e4\uacfc \ud568\uaed8 \uce35\uc774\ub098 \ubaa8\ub378 \uc548\uc5d0 \ub123\uc5b4\uc9d1\ub2c8\ub2e4. \ub354 \uc790\uc138\ud55c \uc0ac\ud56d\uc740 [\ub9de\ucda4 Keras \uce35\uacfc \ubaa8\ub378](https:\/\/www.tensorflow.org\/guide\/keras\/custom_layers_and_models)\uc5d0\uc11c \ubcf4\uc138\uc694. \uce35\uacfc \ubaa8\ub378\uc758 \uc8fc\ub41c \ucc28\uc774\uc810\uc740 \ubaa8\ub378\uc740 [Model.fit](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Model#fit), [Model.evaluate](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Model#evaluate), [Model.save](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Model#save)\uc640 \uac19\uc740 \uba54\uc18c\ub4dc\ub4e4\uc744 \ucd94\uac00\ud55c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.","236e31bc":"\uc544\ub798\uc758 \uc608\uc81c\ub294 \ud45c\uc900 MNIST \uc190\uae00\uc528 \uc22b\uc790\ub97c \ubd84\ub958\ud558\ub294 \ub2e4\uc911 \uce35 \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc989\uc2dc \uc2e4\ud589 \ud658\uacbd\uc5d0\uc11c \ud559\uc2b5 \uac00\ub2a5\ud55c \uadf8\ub798\ud504\ub97c \ub9cc\ub4e4\uae30 \uc704\ud55c \ucd5c\uc801\ud654\uc640 \uce35 API\ub97c \uc124\uba85\ud569\ub2c8\ub2e4.","913f2b3b":"## \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uae30","6d39abb2":"\ud559\uc2b5 \uc5c6\uc774, \uc989\uc2dc \uc2e4\ud589\uc744 \ud1b5\ud574 \ubaa8\ub378\uc744 \ud638\ucd9c\ud558\uace0 \uacb0\uacfc\ub97c \uad00\ucc30\ud569\ub2c8\ub2e4:","69ff2a4c":"\uac1c\uc778\ud654\ud55c \uae30\uc6b8\uae30\ub294 \uc5f0\uc0b0\uc758 \uc5f0\uc18d\uc5d0\uc11c \uc218\uce58\uc801\uc73c\ub85c \uc548\uc815\uc801\uc778 \uae30\uc6b8\uae30\ub97c \uc81c\uacf5\ud558\uae30 \uc704\ud574 \uc8fc\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4:","8ae6c430":"[TensorBoard](https:\/\/tensorflow.org\/tensorboard)\ub294 \ubaa8\ub378 \ud559\uc2b5 \uacfc\uc815\uc744 \uc774\ud574\ud558\uace0 \ub514\ubc84\uae45\ud558\uace0 \ucd5c\uc801\ud654\ud558\uae30 \uc704\ud55c \uc2dc\uac01\ud654 \ub3c4\uad6c\uc785\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud558\ub294 \ub3d9\uc548 \uc801\ud78c \uc694\uc57d \uc774\ubca4\ud2b8\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","b9af223e":"[tf.keras.metrics](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/metrics)\ub294 \uac1d\uccb4\ub85c\uc11c \uc800\uc7a5\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ud638\ucd9c\uac00\ub2a5\ud55c \ubcc0\uc218\uc5d0 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c \ub118\uaca8\uc8fc\uc5b4 \ud3c9\uac00\uc9c0\ud45c\ub97c \uac31\uc2e0\ud560 \uc218 \uc788\uace0, tf.keras.metrics.result \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 \uacb0\uacfc\ub97c \ubc1b\uc544\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4:","16bf75f7":"[tf.summary](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/summary)\ub97c \uc0ac\uc6a9\ud574 \uc989\uc2dc \uc2e4\ud589\uc5d0\uc11c \ubcc0\uc218\uc758 \uc694\uc57d\uc744 \uae30\ub85d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, 100\ubc88\uc758 \ud559\uc2b5 \ub2e8\uacc4 \ub9c8\ub2e4 \uc190\uc2e4\uc758 \uc694\uc57d\uc744 \uae30\ub85d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","5d6a3475":"TensorFlow\uc758 \uc989\uc2dc \uc2e4\ud589 \uae30\ub2a5\uc740 \uadf8\ub798\ud504 \uc0dd\uc131 \uc5c6\uc774, \uacc4\uc0b0\uc744 \uc989\uac01\uc801\uc73c\ub85c \uc218\ud589\ud560 \uc218 \uc788\ub294 \ud544\uc218\uc801\uc778 \ud504\ub85c\uadf8\ub798\ubc0d \ud658\uacbd\uc785\ub2c8\ub2e4: \uacc4\uc0b0\uc740 \uacc4\uc0b0\uc744 \uc704\ud55c \uadf8\ub798\ud504\ub97c \ub9cc\ub4e4\uc5b4 \ub098\uc911\uc5d0 \uc2e4\ud589\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uad6c\uccb4\uc801\uc778 \uac12\uc744 \ubc18\ud658\ud558\ub294 \uac83\uc744 \ub9d0\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 TensorFlow\ub97c \uc2dc\uc791\ud558\uace0 \ubaa8\ub378\uc744 \ub514\ubc84\uae45\ud558\uae30 \uc27d\uac8c \ub9cc\ub4e4\uace0, \uc911\ubcf5\ub418\ub294 \uac83\ub3c4 \uc904\uc5ec\uc90d\ub2c8\ub2e4. \uc774 \uac00\uc774\ub4dc\ub97c \ub530\ub77c\uac00\uae30 \uc704\ud574\uc11c, \uc544\ub798\uc758 \uc608\uc81c\ub4e4\uc744 python \uc778\ud130\ud504\ub9ac\ud130\uc5d0\uc11c \uc2e4\ud589\ud574\ubcf4\uc138\uc694.","a403136e":"\uc608\ub97c \ub4e4\uc5b4, \uc704\uc758 \uc790\ub3d9 \ubbf8\ubd84 \uc608\uc81c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ub2e4\uc2dc \uc4f0\uc5ec\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","245fe0b9":"\uc989\uac01\uc801\uc73c\ub85c \ud559\uc2b5\uc744 \ud558\uac70\ub098 \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c [tf.GradientTape](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape)\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf5\uc7a1\ud55c \ud559\uc2b5 \ubc18\ubcf5\uc774 \uc788\uc744 \ub54c \ud2b9\ud788 \uc720\uc6a9\ud569\ub2c8\ub2e4.","ff65eb4e":"## \uc989\uc2dc \ud559\uc2b5","322f7c0f":"### \uc694\uc57d\uacfc TensorBoard","a23a6e99":"\uc774 \ucf54\ub4dc\ub294 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \ud150\uc11c \uac12\uc5d0 \uad00\ub828\ub41c \uc870\uac74\ubb38\uc774 \uc788\uace0, \uadf8 \uac12\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4.","3f57cb73":"[\uc790\ub3d9 \ubbf8\ubd84](https:\/\/en.wikipedia.org\/wiki\/Automatic_differentiation)\uc740 \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574 [\uc5ed\uc804\ud30c](https:\/\/en.wikipedia.org\/wiki\/Backpropagation)\uc640 \uac19\uc740 \uae30\uacc4 \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998\uc744 \uad6c\ud604\ud558\ub294\ub370\uc5d0 \uc720\uc6a9\ud569\ub2c8\ub2e4. \uc989\uc2dc \uc2e4\ud589\uc744 \ud558\ub294 \ub3d9\uc548\uc5d0\ub294, \ucd94\ud6c4\uc5d0 \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud55c \uc5f0\uc0b0\ub4e4\uc744 \ucd94\uc801\ud558\uae30 \uc704\ud574 [tf.GradientTape](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape)\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","12b2bac3":"### \uac1c\uc778\ud654\ud55c \uae30\uc6b8\uae30","090cdb9a":"### \ubaa8\ub378 \ud559\uc2b5\uc2dc\ud0a4\uae30","d007fc68":"### \uac1d\uccb4 \uae30\ubc18 \uc800\uc7a5","f57b8986":"## \uc131\ub2a5","d1a72ea4":"Keras \ubaa8\ub378\uc740 \uc774\ubbf8 \ub9cc\ub4e4\uc5b4\uc838 \uc788\ub294 \ud559\uc2b5 \ubc29\ubc95\uc774 \uc788\uc9c0\ub9cc(fit \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9), \ub54c\ub85c\ub294 \uc0c1\ud669\uc5d0 \ub9de\uac8c \ub9cc\ub4dc\ub294 \uac83\ub3c4 \ud544\uc694\ud569\ub2c8\ub2e4. \uc989\uac01\uc801\uc778 \ud559\uc2b5\uc744 \uad6c\ud604\ud55c \uc608\uc2dc\uc785\ub2c8\ub2e4:","657bf8fc":"\uc5ec\uae30, log1pexp \ud568\uc218\ub294 \uac1c\uc778\ud654\ub41c \uae30\uc6b8\uae30\ub97c \uc0ac\uc6a9\ud574 \ubd84\uc11d\uc801\uc73c\ub85c \uac04\ub2e8\ud558\uac8c \ub098\ud0c0\ub0b4\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc5d0 \uc788\ub294 \uad6c\ud604\uc740 \uc815\ubc29\ud5a5 \uc804\ud30c \ub3d9\uc548\uc5d0 \uacc4\uc0b0\ub418\ub294 [tf.exp(x)](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/math\/exp)\uc758 \uac12\uc744 \uc7ac\uc0ac\uc6a9\ud569\ub2c8\ub2e4 - \ubd88\ud544\uc694\ud55c \uacc4\uc0b0\uc744 \uc81c\uac70\ud574\uc11c \ub354 \ud6a8\uc728\uc801\uc73c\ub85c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","99fa329f":"## \ub3d9\uc801 \uc81c\uc5b4 \ud750\ub984","6340d83b":"[tf.Variable](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Variable) \uac1d\uccb4\ub294 \uc790\ub3d9 \ubbf8\ubd84\uc744 \uc27d\uac8c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud559\uc2b5 \uc911\uc5d0 \uc811\uadfc\ub418\ub294 \ubcc0\uacbd \uac00\ub2a5\ud55c [tf.Tensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\uac19\uc740 \uac12\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4.","34cf0daa":"### \uae30\uc6b8\uae30 \uacc4\uc0b0","bfa6c867":"[tf.GradientTape](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape)\uc740 \ub3d9\uc801 \ubaa8\ub378\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. [\uc5ed\ucd94\uc801 \uc120\ud615 \ud0d0\uc0c9](https:\/\/wikipedia.org\/wiki\/Backtracking_line_search) \uc54c\uace0\ub9ac\uc998\uc744 \uad6c\ud604\ud55c \uc774 \uc608\uc81c\ub294 \uc77c\ubc18\uc801\uc778 NumPy \ucf54\ub4dc\ucc98\ub7fc \ubcf4\uc774\uc9c0\ub9cc, \ubcf5\uc7a1\ud55c \uc81c\uc5b4 \ud750\ub984\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \uae30\uc6b8\uae30\uac00 \uc788\uace0 \ubbf8\ubd84 \uac00\ub2a5\ud569\ub2c8\ub2e4:","3bbe5bfe":"### \uae30\uc900\uc810","1dbfc908":"\uc989\uc2dc \uc2e4\ud589\uc744 \ud65c\uc131\ud654\ud558\ub294 \uac83\uc740 TensorFlow \uacc4\uc0b0\uc774 \uc5b4\ub5bb\uac8c \ud589\ub3d9\ud560 \uc9c0\ub97c \ubc14\uafc9\ub2c8\ub2e4 - \uc9c0\uae08\uc740 \uac12\uc744 \uc989\uc2dc \uacc4\uc0b0\ud558\uace0 Python\uc5d0 \ub118\uaca8\uc90d\ub2c8\ub2e4. [tf.Tensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor) \uac1d\uccb4\ub294 \uacc4\uc0b0 \uadf8\ub798\ud504\uc758 \uc0c1\uc9d5\uc801\uc73c\ub85c \ud45c\ud604\ub41c \ub178\ub4dc\ub4e4\uc744 \uac00\ub9ac\ud0a4\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uad6c\uccb4\uc801\uc778 \uac12\uc744 \uac00\ub9ac\ud0a4\uac8c \ub429\ub2c8\ub2e4. \uc138\uc158\uc5d0\uc11c \ud6c4\uc5d0 \ube4c\ub4dc\ud558\uace0 \uc2e4\ud589\ud558\uae30 \uc704\ud55c \uacc4\uc0b0 \uadf8\ub798\ud504\uac00 \uc5c6\uae30 \ub54c\ubb38\uc5d0, print()\ub098 \ub514\ubc84\uac70\ub97c \uc0ac\uc6a9\ud574\uc11c \uacb0\uacfc\ub97c \uad00\ucc30\ud558\uae30 \uc27d\uc2b5\ub2c8\ub2e4. \ud150\uc11c \uac12\uc744 \ud3c9\uac00, \ucd9c\ub825, \ud655\uc778\ud558\ub294 \uac83\uc774 \uae30\uc6b8\uae30 \uacc4\uc0b0\uc744 \uc704\ud55c \ud750\ub984\uc744 \uae68\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","54a6dd25":"## \uc124\uc815 \ubc0f \uae30\ubcf8 \uc0ac\uc6a9\ubc95","4b37c70d":"## \uc790\ub3d9 \ubbf8\ubd84\uc5d0 \ub300\ud55c \uc2ec\ud654 \uc8fc\uc81c","760808aa":"[tf.keras.Model](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Model)\uc740 \uccb4\ud06c\ud3ec\uc778\ud2b8\ub97c \uc0dd\uc131\ud558\uae30 \uc27d\ub3c4\ub85d \ud3b8\ub9ac\ud55c save_weights \uba54\uc18c\ub4dc\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4:","d30424d1":"**\ucc38\uace0**: \ub9ce\uc740 \ud559\uc2b5 \ubc18\ubcf5 \uad6c\uac04\uc5d0\uc11c\ub294, \ubcc0\uc218\ub4e4\uc774 [tf.train.Checkpoint.restore](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/train\/Checkpoint#restore)\uc774 \ud638\ucd9c\ub41c \uc774\ud6c4\uc5d0 \uc0dd\uc131\ub429\ub2c8\ub2e4. \uc774\ub7f0 \ubcc0\uc218\ub4e4\uc740 \uc0dd\uc131\ub418\ub294 \ub300\ub85c \ubd88\ub7ec\uc640\uc9c0\uba70, \uccb4\ud06c\ud3ec\uc778\ud2b8\uac00 \uc644\ubcbd\ud558\uac8c \ubd88\ub7ec\uc640\uc84c\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574 \ud655\uc778 \uad6c\ubb38\uc744 \ub123\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc790\uc138\ud55c \uc0ac\ud56d\uc740 [\ud559\uc2b5 \uccb4\ud06c\ud3ec\uc778\ud2b8 \uac00\uc774\ub4dc](https:\/\/www.tensorflow.org\/guide\/checkpoint)\ub97c \ucc38\uace0\ud558\uc138\uc694.","949961c7":"### \ubcc0\uc218\uc640 \ucd5c\uc801\ud654","82fc6876":"\uc774 \uc808\uc740 [\ud559\uc2b5 \uccb4\ud06c\ud3ec\uc778\ud2b8 \uac00\uc774\ub4dc](https:\/\/www.tensorflow.org\/guide\/checkpoint)\uc758 \uac04\ub7b5\ud55c \ubc84\uc804\uc785\ub2c8\ub2e4.","364de000":"TensorFlow 2.0\uc5d0\uc11c\ub294 \uc989\uc2dc \uc2e4\ud589\uc774 \uae30\ubcf8\uc73c\ub85c \ud65c\uc131\ud654\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","16b11120":"**\ucc38\uace0**: [tf.debugging](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/debugging)\uc5d0 \uc788\ub294 assert \ud568\uc218\ub97c \uc0ac\uc6a9\ud574 \uc870\uac74\uc774 \ub9de\ub294\uc9c0 \ud655\uc778\ud558\uc138\uc694. \uc989\uc2dc \uc2e4\ud589\uacfc \uadf8\ub798\ud504 \uc2e4\ud589 \ubaa8\ub450\uc5d0\uc11c \uc791\ub3d9\ud569\ub2c8\ub2e4."}}