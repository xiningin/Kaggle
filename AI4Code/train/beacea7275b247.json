{"cell_type":{"1ca253e9":"code","d30bb08c":"code","b1064993":"code","aabbf827":"code","09e9380d":"code","1df8b260":"code","31cac4e0":"code","a0f43bfb":"code","bc6f8f7d":"code","ebea1404":"code","231adde3":"code","e6712c16":"code","60c8c8b2":"code","7d826eec":"code","b3b05123":"code","042ea669":"code","92bb9cfe":"code","66ef4826":"code","36e5d5a1":"code","a65ca72c":"code","943d7d3f":"code","e2f6a106":"code","d5821bd7":"code","e8c1cff2":"code","14c02143":"code","da256100":"code","920339ac":"code","11622900":"code","995c084c":"code","87852ff4":"code","96b30106":"code","13e85f20":"code","5f08272c":"code","10d92481":"code","3241d0f5":"code","582dbc61":"code","9db421dc":"code","55cfd64e":"code","f7a60335":"markdown","38456013":"markdown","50fa59e4":"markdown","8a67286c":"markdown","4da49a1e":"markdown","bab2b040":"markdown","e5200e04":"markdown","df7b5c1a":"markdown","8b6c3402":"markdown","85d91851":"markdown","3670f861":"markdown","15dad87a":"markdown","20032516":"markdown","b2658847":"markdown","aaf8d6be":"markdown","28b66468":"markdown","1589bc14":"markdown","0fcf9b8b":"markdown","bd54cbd9":"markdown","dd46c7f2":"markdown","df01e3cd":"markdown","36584501":"markdown","ce85363d":"markdown","fc22b565":"markdown","8ac6b815":"markdown","8f62c947":"markdown","ad293671":"markdown","5ee4010b":"markdown","59335cfa":"markdown","198da543":"markdown","37723ac1":"markdown"},"source":{"1ca253e9":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","d30bb08c":"df = pd.read_csv('..\/input\/Loan payments data.csv')\ndf.head()","b1064993":"df.shape","aabbf827":"df['due_date'] = pd.to_datetime(df['due_date'])\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf.head()","09e9380d":"df['loan_status'].value_counts()","1df8b260":"# notice: installing seaborn might takes a few minutes\n!conda install -c anaconda seaborn -y","31cac4e0":"import seaborn as sns\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","a0f43bfb":"bins=np.linspace(df.age.min(), df.age.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","bc6f8f7d":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins=np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()\n","ebea1404":"df['weekend']= df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ndf.head()","231adde3":"df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)","e6712c16":"df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ndf.head()","60c8c8b2":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)","7d826eec":"df[['Principal','terms','age','Gender','education']].head()","b3b05123":"Feature = df[['Principal','terms','age','Gender']]\nFeature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\nFeature.head()\n","042ea669":"X = Feature\nX[0:5]","92bb9cfe":"y = df['loan_status'].values\ny[0:5]","66ef4826":"X = preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","36e5d5a1":"# We split the X into train and test to find the best k\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","a65ca72c":"# Modeling\nfrom sklearn.neighbors import KNeighborsClassifier\nk = 3\n#Train Model and Predict  \nkNN_model = KNeighborsClassifier(n_neighbors=k).fit(X_train,y_train)\nkNN_model","943d7d3f":"# just for sanity chaeck\nyhat = kNN_model.predict(X_test)\nyhat[0:5]","e2f6a106":"# Best k\nKs=15\nmean_acc=np.zeros((Ks-1))\nstd_acc=np.zeros((Ks-1))\nConfustionMx=[];\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    kNN_model = KNeighborsClassifier(n_neighbors=n).fit(X_train,y_train)\n    yhat = kNN_model.predict(X_test)\n    \n    \n    mean_acc[n-1]=np.mean(yhat==y_test);\n    \n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\nmean_acc","d5821bd7":"# Building the model again, using k=7\nfrom sklearn.neighbors import KNeighborsClassifier\nk = 7\n#Train Model and Predict  \nkNN_model = KNeighborsClassifier(n_neighbors=k).fit(X_train,y_train)\nkNN_model","e8c1cff2":"from sklearn.tree import DecisionTreeClassifier\nDT_model = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 4)\nDT_model.fit(X_train,y_train)\nDT_model","14c02143":"yhat = DT_model.predict(X_test)\nyhat","da256100":"from sklearn import svm\nSVM_model = svm.SVC()\nSVM_model.fit(X_train, y_train) ","920339ac":"yhat = SVM_model.predict(X_test)\nyhat","11622900":"from sklearn.linear_model import LogisticRegression\nLR_model = LogisticRegression(C=0.01).fit(X_train,y_train)\nLR_model","995c084c":"yhat = LR_model.predict(X_test)\nyhat","87852ff4":"from sklearn.metrics import jaccard_similarity_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss","96b30106":"!wget -O loan_test.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_test.csv","13e85f20":"test_df = pd.read_csv('loan_test.csv')\ntest_df.head()","5f08272c":"## Preprocessing\ntest_df['due_date'] = pd.to_datetime(test_df['due_date'])\ntest_df['effective_date'] = pd.to_datetime(test_df['effective_date'])\ntest_df['dayofweek'] = test_df['effective_date'].dt.dayofweek\ntest_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ntest_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ntest_Feature = test_df[['Principal','terms','age','Gender','weekend']]\ntest_Feature = pd.concat([test_Feature,pd.get_dummies(test_df['education'])], axis=1)\ntest_Feature.drop(['Master or Above'], axis = 1,inplace=True)\ntest_X = preprocessing.StandardScaler().fit(test_Feature).transform(test_Feature)\ntest_X[0:5]","10d92481":"test_y = test_df['loan_status'].values\ntest_y[0:5]","3241d0f5":"knn_yhat = kNN_model.predict(test_X)\nprint(\"KNN Jaccard index: %.2f\" % jaccard_similarity_score(test_y, knn_yhat))\nprint(\"KNN F1-score: %.2f\" % f1_score(test_y, knn_yhat, average='weighted') )","582dbc61":"DT_yhat = DT_model.predict(test_X)\nprint(\"DT Jaccard index: %.2f\" % jaccard_similarity_score(test_y, DT_yhat))\nprint(\"DT F1-score: %.2f\" % f1_score(test_y, DT_yhat, average='weighted') )","9db421dc":"SVM_yhat = SVM_model.predict(test_X)\nprint(\"SVM Jaccard index: %.2f\" % jaccard_similarity_score(test_y, SVM_yhat))\nprint(\"SVM F1-score: %.2f\" % f1_score(test_y, SVM_yhat, average='weighted') )","55cfd64e":"LR_yhat = LR_model.predict(test_X)\nLR_yhat_prob = LR_model.predict_proba(test_X)\nprint(\"LR Jaccard index: %.2f\" % jaccard_similarity_score(test_y, LR_yhat))\nprint(\"LR F1-score: %.2f\" % f1_score(test_y, LR_yhat, average='weighted') )\nprint(\"LR LogLoss: %.2f\" % log_loss(test_y, LR_yhat_prob))","f7a60335":"## One Hot Encoding  \n#### How about education?","38456013":"What are our lables?","50fa59e4":"We see that people who get the loan at the end of the week dont pay it off, so lets use Feature binarization to set a threshold values less then day 4 ","8a67286c":"### Lets look at the day of the week people get the loan ","4da49a1e":"### Convert to date time object ","bab2b040":"Data Standardization give data zero mean and unit variance (technically should be done after train test split )","e5200e04":"# Logistic Regression","df7b5c1a":"# Report\nYou should be able to report the accuracy of the built model using different evaluation metrics:","8b6c3402":"## Normalize Data ","85d91851":"Lets convert male to 0 and female to 1:\n","3670f861":"### Feature selection","15dad87a":"# Classification ","20032516":"#### Feature befor One Hot Encoding","b2658847":"Lets defind feature sets, X:","aaf8d6be":"300 people have paid off the loan on time while 100 have gone into collection \n","28b66468":"First, download and load the test set:","1589bc14":"Lets plot some columns to underestand data better:","0fcf9b8b":"# Support Vector Machine","bd54cbd9":"| Algorithm          | Jaccard | F1-score | LogLoss |\n|--------------------|---------|----------|---------|\n| KNN                | 0.67    | 0.63     | NA      |\n| Decision Tree      | 0.72    | 0.74     | NA      |\n| SVM                | 0.80    | 0.76     | NA      |\n| LogisticRegression | 0.74    | 0.66     | 0.57    |","dd46c7f2":"Lets look at gender:","df01e3cd":"## Convert Categorical features to numerical values","36584501":"This dataset is about past loans. The __Loan_train.csv__ data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n\n| Field          | Description                                                                           |\n|----------------|---------------------------------------------------------------------------------------|\n| Loan_status    | Whether a loan is paid off on in collection                                           |\n| Principal      | Basic principal loan amount at the                                                    |\n| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n| Effective_date | When the loan got originated and took effects                                         |\n| Due_date       | Since it\u2019s one-time payoff schedule, each loan has one single due date                |\n| Age            | Age of applicant                                                                      |\n| Education      | Education of applicant                                                                |\n| Gender         | The gender of applicant                                                               |","ce85363d":"# Data visualization and pre-processing\n\n","fc22b565":"### Load Data From CSV File  ","8ac6b815":"#### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame ","8f62c947":"# Decision Tree","ad293671":"### Load Test set for evaluation ","5ee4010b":"68 % of female pay there loans while only 58 % of males pay there loan\n","59335cfa":"# Model Evaluation using Test set","198da543":"# Pre-processing:  Feature selection\/extraction","37723ac1":"### About dataset"}}