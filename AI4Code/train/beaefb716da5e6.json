{"cell_type":{"d6514a83":"code","10c2f4f7":"code","d4004c17":"code","c96d5522":"code","945a8e5e":"code","2e2f89e0":"code","19fc8f59":"code","8f45d8b6":"code","d7cf513b":"code","011fc5cc":"code","8adc8294":"code","3f3137eb":"code","26cfb28d":"code","8f0cacfe":"code","2eaed05d":"code","06e467c4":"code","7bc5e397":"code","e01a6cc0":"code","a4c50150":"code","9a822fdd":"code","8463b063":"code","e467cba1":"code","81c922fe":"code","6c8170f1":"code","cfec724a":"code","7df2dcd1":"code","83fe0d06":"code","5653d298":"code","d9a9c13a":"code","4a38497c":"code","d2a9b670":"code","8b64aab8":"code","3b152fe4":"code","830f37ca":"code","f4a36e69":"code","388a8365":"markdown","9bc6f2cf":"markdown","f0b3adac":"markdown","adeaf2de":"markdown","7e53abfa":"markdown","5856b09d":"markdown","89d23ebb":"markdown","fd1c5297":"markdown","4f37f58a":"markdown","2e0093b4":"markdown","1f35bc38":"markdown","66a9e94c":"markdown","4e6cfc0d":"markdown","a704f9bc":"markdown","750b43e5":"markdown","38fbac37":"markdown","693a97eb":"markdown","4e0e9cac":"markdown","68f597b1":"markdown","a4804ca1":"markdown","c469fbc0":"markdown","86e2ae31":"markdown","7cf96428":"markdown","2904fc19":"markdown","62f25c9f":"markdown","1e74840b":"markdown","f7941acb":"markdown","3e2d8945":"markdown","7e50aa6c":"markdown","53163a8e":"markdown","b141931c":"markdown","380a5181":"markdown","69ed5a1e":"markdown","e293bb1d":"markdown","746e388e":"markdown","a76aefca":"markdown","82b29f56":"markdown","8be9120c":"markdown","21878e23":"markdown","1dc2cf81":"markdown","3633f874":"markdown","87ccd066":"markdown","537be79c":"markdown","f887cd35":"markdown","47c25a03":"markdown"},"source":{"d6514a83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # Plotting\nimport seaborn as sns # statistical data visualization\nimport plotly.express as px\nimport plotly.graph_objects as go # interactive plots\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10c2f4f7":"train_df = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv')\ntrain_df.head()","d4004c17":"print('Number of data points: ' + str(len(train_df)))\nprint('----------------------')\n\nfor col in train_df.columns:\n    print('{} : {} unique values, {} missing.'.format(col, \n                                                          str(len(train_df[col].unique())), \n                                                          str(train_df[col].isna().sum())))","c96d5522":"unique_patient_df = train_df.drop(['Weeks', 'FVC', 'Percent'], axis=1).drop_duplicates().reset_index(drop=True)\nunique_patient_df['# visits'] = [train_df['Patient'].value_counts().loc[pid] for pid in unique_patient_df['Patient']]\n\nprint('Number of data points: ' + str(len(unique_patient_df)))\nprint('----------------------')\n\nfor col in unique_patient_df.columns:\n    print('{} : {} unique values, {} missing.'.format(col, \n                                                          str(len(unique_patient_df[col].unique())), \n                                                          str(unique_patient_df[col].isna().sum())))\nunique_patient_df.head()","945a8e5e":"plt.figure(figsize=(10,5))\nsns.countplot(x='Age', data=unique_patient_df)","2e2f89e0":"plt.figure(figsize=(5,3))\nsns.countplot(x='Sex', data=unique_patient_df)","19fc8f59":"plt.figure(figsize=(10, 3))\nsns.countplot(x='SmokingStatus', data=unique_patient_df)","8f45d8b6":"plt.figure(figsize=(20, 5))\nax = sns.countplot(x='Weeks', data=train_df)\nax.set_xticklabels(ax.get_xticklabels(), rotation='vertical')\n\nplt.figure(figsize=(5, 5))\nsns.countplot(x='# visits', data=unique_patient_df)","d7cf513b":"plt.figure(figsize=(10, 5))\nsns.distplot(train_df['FVC'], rug=True)","011fc5cc":"plt.figure(figsize=(10, 5))\nsns.distplot(train_df['Percent'], rug=True)","8adc8294":"train_df['Expected FVC'] = train_df['FVC'] * (100\/train_df['Percent'])\n\nplt.figure(figsize=(10, 5))\nsns.distplot(train_df['Expected FVC'], rug=True)","3f3137eb":"train_df['FVC Difference'] = train_df['Expected FVC'] - train_df['FVC']\n\nplt.figure(figsize=(10, 5))\nsns.distplot(train_df['FVC Difference'], rug=True)","26cfb28d":"pd.crosstab(train_df.Sex, train_df.SmokingStatus, margins=True, normalize=True)","8f0cacfe":"plt.figure(figsize=(10,10))\nsns.heatmap(train_df.apply(lambda x : pd.factorize(x)[0] if x.dtype=='object' else x).corr(method='pearson'),\n            annot=True)","2eaed05d":"fig = px.line(train_df, 'Weeks', 'FVC', color='Patient',\n             title='Pulmonary Condition Progression by Patient',\n             labels={'Week':'Week #',\n                     'FVC' : 'Actual\\Expected FVC'})\nfig.update_traces(mode='lines+markers')\n\nfor i in fig.data:\n    new_element = go.Scattergl(i)\n    new_element['mode'] = 'markers'\n    new_element['name'] = i['name'] + '_EX'\n    new_element['y'] = train_df.loc[train_df['Patient'] == new_element['legendgroup']]['Expected FVC']\n    fig.add_trace(new_element)\n\n\nfig.show()","06e467c4":"fig = px.line(train_df, 'Weeks', 'FVC', line_group='Patient', color='Sex',\n             title='Pulmonary Condition Progression by Sex')\nfig.update_traces(mode='lines+markers')","7bc5e397":"fig = px.line(train_df, 'Weeks', 'FVC', line_group='Patient', color='SmokingStatus',\n             title='Pulmonary Condition Progression by Sex')\nfig.update_traces(mode='lines+markers')","e01a6cc0":"import pydicom\nfrom glob import glob\nimport scipy.ndimage\nfrom skimage import morphology\nfrom skimage import measure\nfrom skimage.filters import threshold_otsu, median\nfrom scipy.ndimage import binary_fill_holes\nfrom skimage.segmentation import clear_border\nfrom scipy.stats import describe","a4c50150":"patient_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430\/'\nscans = glob(patient_dir + '\/*.dcm')\n\nscans[:5]","9a822fdd":"def load_scan(path):\n    scans = os.listdir(path)\n    slices = []\n    \n    for scan in scans:\n        with pydicom.dcmread(path + '\/' + scan) as s:\n            slices.append(s)\n    \n    slices.sort(key = lambda x: int(x.InstanceNumber))\n    try:\n        slice_thickness = np.abs(slices[0].ImagePositionPatient[2] - slices[1].ImagePositionPatient[2])\n    except:\n        try:\n            slice_thickness = np.abs(slices[0].SliceLocation - slices[1].SliceLocation)\n        except:\n            slice_thickness = slices[0].SliceThickness\n    \n    for s in slices:\n        s.SliceThickness = slice_thickness\n        \n    return slices\n\ndef get_pixels_hu(scans):\n    image = np.stack([s.pixel_array for s in scans])\n    # Convert to int16 (from sometimes int16), \n    # should be possible as values should always be low enough (<32k)\n    image = image.astype(np.int16)\n\n    # Set outside-of-scan pixels to 1\n    # The intercept is usually -1024, so air is approximately 0\n    image[image <= -1000] = 0\n    \n    # Convert to Hounsfield units (HU)\n    intercept = scans[0].RescaleIntercept\n    slope = scans[0].RescaleSlope\n    \n    if slope != 1:\n        image = slope * image.astype(np.float64)\n        image = image.astype(np.int16)\n        \n    image += np.int16(intercept)\n    \n    return np.array(image, dtype=np.int16)","8463b063":"patient = load_scan(patient_dir)\nimgs = get_pixels_hu(patient)\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 10))\n\nax[0].set_title('Original Image')\nax[0].imshow(patient[15].pixel_array, cmap='gray')\nax[0].axis('off')\n\nax[1].set_title('HU Image')\nax[1].imshow(imgs[15], cmap='gray')\nax[1].axis('off')","e467cba1":"plt.hist(imgs.flatten(), bins=50, color='c')\nplt.xlabel(\"Hounsfield Units (HU)\")\nplt.ylabel(\"Frequency\")\nplt.show()","81c922fe":"def sample_stack(stack, rows=2, cols=3, start_with=0, show_every=5):\n    fig,ax = plt.subplots(rows,cols,figsize=[10,10])\n    for i in range(rows*cols):\n        ind = start_with + i*show_every\n        ax[i \/\/ (rows+1), int(i % cols)].set_title('slice %d' % ind)\n        ax[i \/\/ (rows+1), int(i % cols)].imshow(stack[ind],cmap='gray')\n        ax[i \/\/ (rows+1), int(i % cols)].axis('off')\n    plt.tight_layout()\n    plt.show()\n\nsample_stack(imgs)","6c8170f1":"def lung_segment(img, display=False):\n    thresh = threshold_otsu(img)\n    binary = img <= thresh\n\n    lungs = median(clear_border(binary))\n    lungs = morphology.binary_closing(lungs, selem=morphology.disk(7))\n    lungs = binary_fill_holes(lungs)\n\n    final = lungs*img\n    final[final == 0] = np.min(img)\n    \n    if display:\n        fig, ax = plt.subplots(1, 4, figsize=(15, 15))\n\n        ax[0].set_title('HU Image')\n        ax[0].imshow(img, cmap='gray')\n        ax[0].axis('off')\n\n        ax[1].set_title('Thresholded Image')\n        ax[1].imshow(binary, cmap='gray')\n        ax[1].axis('off')\n\n        ax[2].set_title('Lungs Mask')\n        ax[2].imshow(lungs, cmap='gray')\n        ax[2].axis('off')\n\n        ax[3].set_title('Final Image')\n        ax[3].imshow(final, cmap='gray')\n        ax[3].axis('off')\n    \n    return final, lungs\n\ndef lung_segment_stack(imgs):\n    \n    masks = np.empty_like(imgs)\n    segments = np.empty_like(imgs)\n    \n    for i, img in enumerate(imgs):\n        seg, mask = lung_segment(img)\n        segments[i,:,:] = seg\n        masks[i,:,:] = mask\n        \n    return segments, masks","cfec724a":"lung_segment(imgs[15], display=True)","7df2dcd1":"segmented, masks = lung_segment_stack(imgs)\nsample_stack(segmented)","83fe0d06":"def lung_volume(patient, masks):\n    slice_thickness = patient[0].SliceThickness\n    pixel_spacing = patient[0].PixelSpacing\n    \n    return np.round(np.sum(masks) * slice_thickness * pixel_spacing[0] * pixel_spacing[1], 3)","5653d298":"lung_vol = lung_volume(patient, masks)\nprint('Lung Volume is: ' + str(lung_vol) + ' mm^3 (' + str(lung_vol\/1e6) + ' liters)')","d9a9c13a":"def hist_analysis(segmented, display=False):\n    values = segmented.flatten()\n    values = values[values >= -1000]\n    \n    if display:\n        plt.hist(values, bins=50)\n    \n    summary_statistics = describe(values)\n    \n    return summary_statistics","4a38497c":"h_stat = hist_analysis(segmented, display=True)\n\nprint('Mean is: ' + str(h_stat.mean))\nprint('Variance is: ' + str(h_stat.variance))\nprint('Skewness is: ' + str(h_stat.skewness))\nprint('Kurtosis is: ' + str(h_stat.kurtosis))","d2a9b670":"def chest_measurements(patient, masks):\n    middle_slice = masks[len(masks)\/\/2]\n    pixel_spacing = patient[0].PixelSpacing\n    \n    lung_area = np.round(np.sum(middle_slice.flatten()) * pixel_spacing[0] * pixel_spacing[1], 3)\n    \n    conv_h = morphology.convex_hull_image(middle_slice)\n    props = measure.regionprops(measure.label(conv_h))\n    \n    chest_diameter = np.round(props[0].major_axis_length, 3)\n    chest_circ = np.round(props[0].perimeter, 3)\n    \n    return lung_area, chest_diameter, chest_circ","8b64aab8":"ch_measure = chest_measurements(patient, masks)\nprint('Lung Area is: ' + str(ch_measure[0]) + ' mm^2')\nprint('Chest Diameter estimate is: ' + str(ch_measure[1]) + ' mm')\nprint('Chest Circumference estimate is: ' + str(ch_measure[2]) + ' mm')","3b152fe4":"#augmented_df = train_df.drop(train_df.loc[train_df['Patient'].isin(['ID00011637202177653955184', #\n#                                                                    'ID00052637202186188008618'])]\n#                             .index).reset_index(drop=True)","830f37ca":"#augmented_df['LungVolume'] = None\n#augmented_df['Mean'] = None\n#augmented_df['Variance'] = None\n#augmented_df['Skewness'] = None\n#augmented_df['Kurtosis'] = None\n#augmented_df['LungArea'] = None\n#augmented_df['ChestDiameter'] = None\n#augmented_df['ChestCircumference'] = None\n\n#for pid in augmented_df['Patient'].unique():\n#    patient_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/' + pid\n#    patient = load_scan(patient_dir)\n#    scans = get_pixels_hu(patient)\n    \n#    segmented, masks = lung_segment_stack(scans)\n    \n#    augmented_df.loc[augmented_df['Patient'] == pid, 'LungVolume'] = lung_volume(patient, masks)\n    \n#    hist_stats = hist_analysis(segmented)\n#    augmented_df.loc[augmented_df['Patient'] == pid, 'Mean'] = np.round(hist_stats.mean, 3)\n#    augmented_df.loc[augmented_df['Patient'] == pid, 'Variance'] = np.round(hist_stats.variance, 3)\n#    augmented_df.loc[augmented_df['Patient'] == pid, 'Skewness'] = np.round(hist_stats.skewness, 3)\n#    augmented_df.loc[augmented_df['Patient'] == pid, 'Kurtosis'] = np.round(hist_stats.kurtosis, 3)\n    \n#    chest_stat = chest_measurements(patient, masks)\n#    augmented_df.loc[augmented_df['Patient'] == pid, 'LungArea'] = chest_stat[0]\n#    augmented_df.loc[augmented_df['Patient'] == pid, 'ChestDiameter'] = chest_stat[1]\n#    augmented_df.loc[augmented_df['Patient'] == pid, 'ChestCircumference'] = chest_stat[2]","f4a36e69":"#plt.figure(figsize=(13,13))\n#sns.heatmap(augmented_df.apply(lambda x : pd.factorize(x)[0] if x.dtype=='object' else x).corr(method='pearson'),\n#            annot=True)","388a8365":"Let's start by checking the composition of our dataset, by Sex and Smoking Status.\nThe majority (60%) is composed by males (has we have seen before) ex-smokers (the most represented category.)","9bc6f2cf":"The following two variables represents the actual FVC values represented in the dataset by the \"Percent\" variable and their difference.\nInterestingly, there are a couple patients where Percent is over 100%, meaning the measured FVC is higher than what it's supposed to be.","f0b3adac":"**FVC**","adeaf2de":"# 3 - CT Scan Features ","7e53abfa":"**FVC Difference**","5856b09d":"Let's have a look at the distribution of pixels in the images converted to Hounsfield Units.","89d23ebb":"# 1.1 Discrete features","fd1c5297":"**Age**","4f37f58a":"The start of this analysis will look at each variable by itself, to see its distribution and the range it occupies.","2e0093b4":"**Histogram Analysis**","1f35bc38":"There is a clear unbalance in the patients sex; assuming this imbalance is also present in the test set and isn't a result of random sampling (Do males have a higher probability of getting sick ?), it could be important to check the correlation with the FVC Progression values.","66a9e94c":"**Lung Volume\/Total Lung Capacity Estimation**","4e6cfc0d":"Let's define some helper functions to load, sort and process the images.","a704f9bc":"**FVC Progression by SmokingStatus**","750b43e5":"**Lung Area\/Diameter\/Circumference**","38fbac37":"Now let's compute these features for each patient and check the new correlation matrix.\n\n**The kernel crashes with an out-of-memory error here because the size of the scans size and a probable memory leak in DICOM scans loading; the engineered features may be useful, but impossible to compute on a kernel for all data points.\nIf someone knows how to solve this please write it in the comments.**","693a97eb":"# 1 - Single Variable Analysis","4e0e9cac":"I'll remove the patients with codes **ID00011637202177653955184** and **ID00052637202186188008618**, because they cause errors when trying to read the DICOM files.","68f597b1":"**FVC Progression by Sex**","a4804ca1":"Checking with the HU table shows: \n* There is a lot of air, the peak around -1000\n* At around -500 there are some pixels classified as Lung;\n* The smaller gaussian-shaped peak at 0 indicates soft tissues;\n* The distribution tail from 700 onward shows the presence of bones.","c469fbc0":"# Dataframe uniqueness\/quality check","86e2ae31":"In this section I'll explore the DICOM files representing the CT Lung Scans for the patients, how to load and process them, and how to extract some additional features.\n\nFor an even more informative explanation, you can visit the Radiology Data Quest blog (https:\/\/www.raddq.com\/dicom-processing-segmentation-visualization-in-python\/), from where I learned the tools used in the rest of this notebook and which I thank for their public explanation.\n\nIt's also necessary to thank Kaggle user Dr.S\u00e0ndor K\u00f3nya (@sandorkonya) for his wonderful Domain Expert Insights, which can be found here (Part 1: https:\/\/www.kaggle.com\/c\/osic-pulmonary-fibrosis-progression\/discussion\/165727, Part 2: https:\/\/www.kaggle.com\/c\/osic-pulmonary-fibrosis-progression\/discussion\/166123).","7cf96428":"This dataset will contain a single entry for each patient, leaving only their personal information, to have a clearer and more accurate representation of the distribution of these categorical variables.\nIt will also include how many times a patient appears in the dataset, to observe how many visits each one has done.","2904fc19":"The following interactive charts show the Pulmonary Capacity decline  by Patient, Sex, and Smoking Status.\nIn each of them clicking on the legend will show only the corresponding plot, double-clicking will hide\/show all the lines.","62f25c9f":"Let's check the scans for the first patient.","1e74840b":"Here we'll check the possible relationship between variables.","f7941acb":"**Sex**","3e2d8945":"# 1.2 Continuous features","7e50aa6c":"**Clinical Data contingency table**","53163a8e":"**Percent**","b141931c":"The age variable doesn't seem to be particularly informative, it follows a Normal\/Gaussian distribution.","380a5181":"According to Wikipedia the average lung capacity for an adult is about 6 litres of air (6 millions mm^3); for this particular patient we got almost 4 liters, which is probably expected due to his pulmonary condition and the imperfect segmentation.","69ed5a1e":"# 2 - Feature Interaction Analysis","e293bb1d":"From the \"Weeks\" attribute one can see: \n* The necessary values for the prediction stage, from week -12 to 133\n* The visits become increasingly rare the more time passes from the CT scan\n* The majority of patients has been subjected to an average of 9 medical visits.","746e388e":"Both \"FVC\" and \"Percent\" seem to roughly follow a Gaussian distribution with a light skew to the left.","a76aefca":"**Weeks (# of visits per patient)**","82b29f56":"Again, there is some imbalance between the different \"Smoking Status\" categories, it may be worthwhile to check the presence of any correlation with the target variable.","8be9120c":"Partitioning the patients by Sex seems to show that female patients occupy a smaller range of FVC values, as does partitioning by SmokingStatus for people currently smoking, but we have to remember that those are the two most under-represented categories in the dataset, so these may just be faulty assumptions.","21878e23":"Now let's try to segment the lungs from the scan.","1dc2cf81":"**Actual\/Expected FVC Progression by Patient**","3633f874":"The aim of this notebook is to be a comprehensive starting point for anyone interested and\/or participating the OSIC Pulmonary Fibrosis Progression competition.\nIt will focus on analyzing the OSIC training set provided for the competition, including:\n* Tabular clinical data\n* CT Lung Scans and Features extracted from the scans\n\n(As this is the first time I'm posting an EDA here, any advice\/suggestions regarding the analysis itself, the charts used or the coding, is welcome).","87ccd066":"**Smoking Status**","537be79c":"Let's start by checking how many data points there are, and if anything is missing.","f887cd35":"There doesn't seem to be any particular correlation between the categorical variables.\nThe continous variables exhibit a clear positive correlation, between \"FVC\" and \"Percent\", while the new engineered feature FVC Difference has an almost perfect negative correlation with Percent.","47c25a03":"**Expected FVC**"}}