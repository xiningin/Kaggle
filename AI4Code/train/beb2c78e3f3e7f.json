{"cell_type":{"f4e18493":"code","4dcbdb74":"code","f166cc48":"code","2e223d55":"code","8bb1d2be":"code","ea7d6bb2":"code","fee66a83":"code","87f18df4":"code","ad0b8bb5":"code","76e6453d":"markdown","f736fefc":"markdown","e5b2eb57":"markdown","341d48cb":"markdown","388c7c60":"markdown","7fea0dd1":"markdown","7b9adf19":"markdown"},"source":{"f4e18493":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4dcbdb74":"import numpy as np\nimport torch\nimport torch.optim as optim\nimport pandas as pd\nimport torch.nn.functional as F\nfrom sklearn.preprocessing import MinMaxScaler  # \ub370\uc774\ud130 \uc815\uaddc\ud654\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\nfrom torch.utils.data import  TensorDataset, DataLoader\nimport matplotlib.pyplot as plt","f166cc48":"device = torch.device('cuda') # \ub514\ubc14\uc774\uc2a4 GPU \uc124\uc815\ntorch.manual_seed(777)\nrandom.seed(777)\ntorch.cuda.manual_seed_all(777)\n\nlearning_rate = 0.0001\ntraining_epochs = 20000\nbatch_size = 100\ndrop_prob = 0.3","2e223d55":"xy_train = pd.read_csv('train_wave.csv', header = None, skiprows=1, usecols=range(2, 13))\nx_data = xy_train.loc[:1705, 1:11]\ny_data = xy_train.loc[:1705, [12]]\nx_data = np.array(x_data)\ny_data = np.array(y_data)\n\nscaler = MinMaxScaler()\nx_data = scaler.fit_transform(x_data)\n\nx_train = torch.FloatTensor(x_data).to(device)\ny_train = torch.FloatTensor(y_data).to(device) ","8bb1d2be":"train_dataset = TensorDataset(x_train, y_train)\ndata_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n                                           batch_size = batch_size, \n                                           shuffle = True, \n                                           drop_last = True)","ea7d6bb2":"linear1 = torch.nn.Linear(10, 1,bias=True)\ntorch.nn.init.xavier_normal_(linear1.weight)\n\nmodel = torch.nn.Sequential(linear1).to(device)","fee66a83":"optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)\n\nlosses = []\n\ntotal_batch = len(data_loader)\nmodel.train()\n\nfor epoch in range(training_epochs + 1):\n  avg_cost = 0\n\n  for X, Y in data_loader:\n    X = X.to(device)\n    Y = Y.to(device)\n\n    optimizer.zero_grad()\n    hypothesis = model(X)\n    cost = torch.mean((hypothesis - Y) ** 2)\n    cost.backward()\n    optimizer.step()\n\n    avg_cost += cost \/ total_batch\n  \n  if epoch % 10 == 0:  \n    print('Epoch:', '%d' % (epoch + 1), 'Cost =', '{:.9f}'.format(avg_cost))\n  losses.append(cost.item())\nprint('Learning finished')","87f18df4":"xy_test = pd.read_csv('test_wave.csv', header = None, skiprows=1, usecols = range(2, 12))\nx_data = xy_test.loc[:, 1:11]\nx_data = np.array(x_data)\nx_data = scaler.transform(x_data)\nx_test = torch.FloatTensor(x_data).to(device)\n\nwith torch.no_grad():\n    model.eval()  # \uc8fc\uc758\uc0ac\ud56d (dropout=False)\n    \n    predict = model(x_test)","ad0b8bb5":"submit = pd.read_csv('submit_sample.csv')\nsubmit['Expected'] = submit['Expected'].astype(float)\nfor i in range(len(predict)):\n  submit['Expected'][i] = predict[i]\nsubmit.to_csv('submit.csv', mode = 'w', index = False, header = True)","76e6453d":"# \uc81c\ucd9c \ud30c\uc77c \ub9cc\ub4e4\uae30","f736fefc":"# \ubaa8\ub378 \uc124\uc815","e5b2eb57":"# \ub370\uc774\ud130 \ub85c\ub4dc","341d48cb":"# \uc218\uce58 \uc124\uc815","388c7c60":"# \ud14c\uc2a4\ud2b8","7fea0dd1":"# Import","7b9adf19":"# \ub370\uc774\ud130 \ud559\uc2b5"}}