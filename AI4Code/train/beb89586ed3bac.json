{"cell_type":{"b0f3999d":"code","53bfae62":"code","980e95af":"code","c039bda1":"code","0f7d5cfd":"code","1a6fab50":"code","11e9eab7":"code","ee6e26c2":"code","e009c9f1":"code","0fdb439e":"code","f6e75264":"code","18e715a0":"code","f2178ba9":"code","e9b1cd6d":"code","32795ddd":"code","b3150ed7":"code","1b77f7f5":"code","146ded1a":"code","9318d7a0":"code","c4500479":"code","d07f49e8":"code","3edaf228":"code","4d236390":"code","50801a08":"code","333dbf10":"code","5730d6d9":"code","1b4d673f":"code","297e77a9":"code","2f5bf630":"code","9ccc732a":"code","096e68b8":"code","3c2a3e7d":"code","7689c32b":"code","d0e326e0":"markdown","4e18ea20":"markdown","5d03ca6a":"markdown","4b98f5d0":"markdown","fc9db717":"markdown","d0b0e92b":"markdown","f0dafc97":"markdown","b3b43d0c":"markdown"},"source":{"b0f3999d":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nimport numpy as np\nimport torchvision\nfrom torchvision import datasets, models, transforms\nimport matplotlib.pyplot as plt\nfrom torch.utils.data import Dataset, DataLoader\nimport time\nimport os\nimport copy\nimport cv2\nimport pydicom\nfrom itertools import product\nimport pandas as pd","53bfae62":"basePath = \"\/kaggle\/input\"\nrootFolder = f\"{basePath}\/rsna-miccai-brain-tumor-radiogenomic-classification\"\ntrainFolder = rootFolder + \"\/train\"\ntestFolder = rootFolder + \"\/test\"\ntrainLabels = rootFolder + \"\/train_labels.csv\"\ntypes=[\"FLAIR\", \"T1w\", \"T1wCE\", \"T2w\"]\nmodel_base_path = f\"{basePath}\/2dvgg19pretrained\/miccai-0-1065\"\noutputFolder = f\"\/kaggle\/working\/\"","980e95af":"train_df = pd.read_csv(trainLabels, dtype=str)\ntrain_df.head(5)","c039bda1":"train_df.to_csv('\/kaggle\/working\/test.csv', index = False)","0f7d5cfd":"def getChildNames(path):\n        return os.listdir(path)","1a6fab50":"def getPathDataset(dsType, ):\n    \n    \n    pathDS = []\n    totalcases = 0\n    BratsIds = []\n    labels = []\n    if dsType == \"train\":\n        totalCases = train_df.shape[0]\n        BratsIds = train_df.BraTS21ID.values\n        labels = train_df.MGMT_value.values\n    elif dsType == \"test\":\n        BratsIds = [name for name in getChildNames(f\"{rootFolder}\/{dsType}\")]\n        totalCases = len(BratsIds)\n        labels = [-1] * totalCases\n\n    for index in range(totalCases):\n        caseId = BratsIds[index]\n        label = labels[index]\n        for _type in types:\n        #pathDS[caseId][_type] = []\n            tmpFolderPath = f\"{rootFolder}\/{dsType}\/{caseId}\/{_type}\/\"\n            allFiles = getChildNames(tmpFolderPath)\n            allFiles = sorted(\n                  allFiles, \n                  key=lambda x: int(x[:-4].split(\"-\")[-1]),\n              )\n            allFiles = [(tmpFolderPath + name, caseId, label, _type) for name in allFiles]\n            pathDS += allFiles\n\n    pathDS = pd.DataFrame(pathDS, columns = [\"FilePath\",\"CaseId\",\"MGMT_Value\",\"Modality\"])\n    return pathDS","11e9eab7":"def load_dicom(path):\n    dicom = pydicom.read_file(path)\n    data = dicom.pixel_array\n    \n    data = data - np.min(data)\n    if np.max(data) != 0:\n        data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    return data","ee6e26c2":"trainPathDS = getPathDataset(\"train\")","e009c9f1":"testPathDS = getPathDataset(\"test\")","0fdb439e":"testPathDS.head()","f6e75264":"trainPathDS.to_csv(f\"{outputFolder}\/trainPathDS.csv\")","18e715a0":"%%time\nslice_info_3d = []\n\ntotalCases = train_df.shape[0]\nBratsIds = train_df.BraTS21ID.values\nlabels = train_df.MGMT_value.values\n\n\nfor index in range(totalCases):\n    caseId = BratsIds[index]\n    label = labels[index]\n    for _type in types:\n    #pathDS[caseId][_type] = []\n        tmpFolderPath = f\"{rootFolder}\/train\/{caseId}\/{_type}\/\"\n        allFiles = getChildNames(tmpFolderPath)\n        \n        totalSlices = len(allFiles)\n        H,W = load_dicom(f\"{tmpFolderPath}\/{allFiles[0]}\").shape\n        \n        slice_info_3d.append((caseId, label, _type, f\"{H}x{W}\", totalSlices, f\"{H}x{W}x{totalSlices}\"))\n        \nslice_info_3d_df = pd.DataFrame(slice_info_3d, columns = [\"BraTS21ID\", \"MGMT_Value\",\"Modality\",\"2D Shape\",\"totalSlices\", \"FileShape\"])","f2178ba9":"slice_info_3d_df.totalSlices.value_counts()","e9b1cd6d":"slice_info_3d_df.totalSlices.value_counts().sort_index()","32795ddd":"slice_info_3d_df.to_csv(\"slice_info_3d.csv\",index = False)","b3150ed7":"slice_info_3d_df","1b77f7f5":"tmp = trainPathDS.groupby(\"CaseId\")[\"Modality\"].agg([\"nunique\"]).reset_index()\ntmp.columns = [\"CaseId\", \"TotalMods\"]\ntmp[tmp.TotalMods < 4]","146ded1a":"tmp = testPathDS.groupby(\"CaseId\")[\"Modality\"].agg([\"nunique\"]).reset_index()\ntmp.columns = [\"CaseId\", \"TotalMods\"]\ntmp[tmp.TotalMods < 4]","9318d7a0":"slice_info_3d_df[slice_info_3d_df.Modality == 'T1w'][\"totalSlices\"].value_counts()","c4500479":"import seaborn as sns\ntmp = slice_info_3d_df[\"FileShape\"].value_counts().reset_index().sort_values(by = \"FileShape\", ascending = False)\ntmp= tmp.iloc[0:30]\n\n#plt.figure(figsize = ())\nsns.catplot(data = tmp, y = \"index\", x = \"FileShape\", kind=\"bar\", aspect = 2, height = 15)","d07f49e8":"slice_info_3d_df","3edaf228":"import seaborn as sns\ntmp = slice_info_3d_df[\"2D Shape\"].value_counts().reset_index().sort_values(by = \"2D Shape\", ascending = False)\ntmp= tmp.iloc[0:30]\n\n#plt.figure(figsize = ())\nsns.catplot(data = tmp, y = \"index\", x = \"2D Shape\", kind=\"bar\", aspect = 2, height = 15)","4d236390":"import SimpleITK as sitk","50801a08":"%%time\n\nreader = sitk.ImageSeriesReader()\nreader.LoadPrivateTagsOn()\n\nfor _type in types:\n    filenamesDICOM = reader.GetGDCMSeriesFileNames(f'{rootFolder}\/train\/00000\/{_type}')\n    reader.SetFileNames(filenamesDICOM)\n    t1_sitk = reader.Execute()\n    sitk.WriteImage(t1_sitk,f'00000_{_type}.nii')","333dbf10":"from nilearn import plotting\n\nfor _type in types:\n    plotting.plot_stat_map(f'{outputFolder}\/00000_{_type}.nii', bg_img=None)","5730d6d9":"from nilearn.image import resample_to_img, reorder_img\nimport nibabel as nib\n\nfor _type in types:\n    tmp = nib.load(f'{outputFolder}\/00000_{_type}.nii')\n    print(tmp.shape)\n    tmp = reorder_img(tmp, resample=\"linear\")\n    print(tmp.shape)\n    #plotting.plot_stat_map(tmp, bg_img=None)","1b4d673f":"types","297e77a9":"from nilearn.image import resample_to_img, reorder_img\nimport nibabel as nib\n\nbase_image = nib.load(f'{outputFolder}\/00000_T1w.nii')\nimage = nib.load(f'{outputFolder}\/00000_FLAIR.nii')\n\nnew_img = resample_to_img(image, base_image, \"linear\")\nprint(new_img.shape)\n\nnew_img = reorder_img(new_img, resample=\"linear\")\nprint(new_img.shape)","2f5bf630":"'''import nibabel as nib\nimport dicom_numpy\nimport os\nimport numpy as np\n\npathtodicom = f'{rootFolder}\/train\/00000\/FLAIR'\n# get list of dicom images from directory that make up the 3D image\ndicomlist = [pathtodicom + f for f in os.listdir(pathtodicom)]\n\n# load dicom volume\nvol, affine_LPS = dicom_numpy.combine_slices(dicomlist)\n\n# convert the LPS affine to RAS\naffine_RAS = np.diagflat([-1,-1,1,1]).dot(affine_LPS)\n\n# create nibabel nifti object\nniiimg = nib.Nifti1Image(vol, affine_RAS)\nprint(niiimg.shape)\n\nniiimg = reorder_img(niiimg, resample=\"linear\")\nprint(niiimg.shape)\n#nib.save(niiimg, '\/path\/to\/save')\n'''","9ccc732a":"!pip install dicom2nifti","096e68b8":"import dicom2nifti\n\ndicom_directory = f'{rootFolder}\/train\/00000\/FLAIR'\noutput_folder = f'{outputFolder}'\ndicom2nifti.convert_directory(dicom_directory, output_folder, compression=True, reorient=False)\n\n'''\nimport nibabel as nib\nnii = nib.load(output_folder)\nprint(nii.shape)\n\nfrom nilearn.image import reorder_img\n\nnii = reorder_img(nii, resample=\"linear\")\nprint(nii.shape)\n'''","3c2a3e7d":"reader = sitk.ImageSeriesReader()\nreader.LoadPrivateTagsOn()\n\n_type = 'FLAIR'\nallFiles = sorted(\n                  getChildNames(f'{rootFolder}\/train\/00000\/{_type}'), \n                  key=lambda x: int(x[:-4].split(\"-\")[-1]),\n              )\n\n#filenamesDICOM = reader.GetGDCMSeriesFileNames(f'{rootFolder}\/train\/00000\/{_type}')\nfilenamesDICOM = [f'{rootFolder}\/train\/00000\/{_type}\/{name}' for name in allFiles]\nreader.SetFileNames(filenamesDICOM)\nt1_sitk = reader.Execute()\nsitk.WriteImage(t1_sitk,f'00000_{_type}_ms.nii')\n\n\nfrom nilearn import plotting\nplotting.plot_stat_map(f'{outputFolder}\/00000_FLAIR_ms.nii', bg_img=None)","7689c32b":"reader = sitk.ImageSeriesReader()\nreader.LoadPrivateTagsOn()\n\n_type = 'FLAIR'\n\nfilenamesDICOM = reader.GetGDCMSeriesFileNames(f'{rootFolder}\/train\/00000\/{_type}')\nreader.SetFileNames(filenamesDICOM)\nt1_sitk = reader.Execute()\nsitk.WriteImage(t1_sitk,f'00000_{_type}_as.nii')\n\n\nfrom nilearn import plotting\nplotting.plot_stat_map(f'{outputFolder}\/00000_FLAIR_as.nii', bg_img=None)","d0e326e0":"#### Check if patient information is present for all modalities","4e18ea20":"### Use dicom2nifti\n- Convert directory method removes the flexibility of providing destination file name","5d03ca6a":"### Different orientation for same CaseId but different modality","4b98f5d0":"### Manual sorting","fc9db717":"### Automatic sorting","d0b0e92b":"### Use dicom_nifty (but its not working at combine Slices\n- Wanted to check if dicom images can be converted to nifti without saving the images","f0dafc97":"### resample_to_img\n- As the second modality is in RAS orientation, lets see if using second modality as base image Can I convert first image to second image\n- And then check whether it is in RAS or not","b3b43d0c":"### 3D slice Count"}}