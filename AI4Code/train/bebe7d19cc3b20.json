{"cell_type":{"50e2d96a":"code","c0122997":"code","1ad8ab5f":"code","04a67ba0":"code","8f5f3407":"code","f60d6f4f":"code","5b2039fd":"code","4b666e07":"code","8276014e":"code","f6fe30e9":"code","3ba40b59":"code","818689ae":"code","1c0a4621":"code","b95470bd":"code","914ff4a5":"code","5062b932":"code","e0d16e52":"code","8e533530":"markdown","483fdb4c":"markdown","5796a3e8":"markdown","504971cd":"markdown","55cc8359":"markdown","d19e9023":"markdown","eecf3c93":"markdown","1f2945ce":"markdown","aa6d38d4":"markdown","673979b4":"markdown","491c8602":"markdown","61265c09":"markdown","3644635e":"markdown","de0c2a82":"markdown","8cc89dc1":"markdown","575d8667":"markdown","7047ff96":"markdown","994e685d":"markdown","c8bdfd9d":"markdown","a5777dc9":"markdown","83b8cf2b":"markdown"},"source":{"50e2d96a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling as pp # for EDA using the Pandas Profiler\nimport matplotlib.pylab as plt # for plotting \nimport seaborn as sns\nfrom scipy.stats import zscore # for scaling the attributes of dataset\nfrom sklearn.cluster import KMeans # Importing K-Means from the SKLearn\nimport warnings\n\n%matplotlib inline\n\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0122997":"tech_supp_df = pd.read_csv('..\/input\/technical-customer-support-data\/technical_support_data.csv')","1ad8ab5f":"tech_supp_df","04a67ba0":"tech_supp_df.info()","8f5f3407":"tech_supp_df.describe()","f60d6f4f":"pp.ProfileReport(tech_supp_df, title=\"Pandas Profiling Report : Technical Support Dataset\")","5b2039fd":"# Just removing the problems from the given data to understand the attributes of them\ntechSuppAttr = tech_supp_df.iloc[:,1:]\n\n# Scaling out the data\ntechSuppScaled = techSuppAttr.apply(zscore)","4b666e07":"from scipy.spatial.distance import cdist # Compute distance between each pair of the two collections of input\nclusters = range(1,10)\nmeanDistortions=[]\n\nfor k in clusters:\n    model = KMeans(n_clusters=k)\n    \n    model.fit(techSuppScaled)\n    prediction=model.predict(techSuppScaled)\n    \n    meanDistortions.append(sum(np.min(cdist(techSuppScaled,model.cluster_centers_,'euclidean'),axis=1))\/ techSuppScaled.shape[0])","8276014e":"# pairplot of attributes\nsns.pairplot(techSuppScaled,diag_kind='kde')","f6fe30e9":"from scipy.spatial.distance import cdist # compute distance between each pair of the two collections of inputs\n\nclusters=range(1,10)\nmeanDistortions=[]\n\nfor k in clusters:\n    model = KMeans(n_clusters=k)\n    \n    model.fit(techSuppScaled)\n    prediction = model.predict(techSuppScaled)\n    \n    meanDistortions.append(sum(np.min(cdist(techSuppScaled, model.cluster_centers_,'euclidean'), axis=1))\/ techSuppScaled.shape[0])","3ba40b59":"meanDistortions","818689ae":"plt.plot(clusters,meanDistortions, 'bx-')\nplt.xlabel('k-value')\nplt.ylabel('Mean Distortion')\nplt.title('Selecting k with the Elbow Method')","1c0a4621":"final_model = KMeans(3)\nfinal_model.fit(techSuppScaled)\nprediction = final_model.predict(techSuppScaled)","b95470bd":"# Append the prediction\ntech_supp_df['Clusters'] = prediction\ntech_supp_df.head()","914ff4a5":"tech_supp_df[tech_supp_df['Clusters'] == 1]","5062b932":"final_model = KMeans(5)\nfinal_model.fit(techSuppScaled)\nprediction = final_model.predict(techSuppScaled)\n\n# Append the prediction\ntech_supp_df['Clusters'] = prediction\ntech_supp_df.head()","e0d16e52":"tech_supp_df[tech_supp_df['Clusters'] == 1]","8e533530":"Here we have taken the dataset of the Technical Support. In this dataset we are having records of different technical issues addressed by customers. Also it has collection of associated attribute values in different columns. ","483fdb4c":"From the above pair plot we can understand that no correlation exists among the provided attributes. Also it is important to verify for Multi-collinearity.","5796a3e8":"# **1. Loading Dataset**","504971cd":"Getting insight of the dataset","55cc8359":"Here we have taken technical customer support dataset having atleast one entry for each type pf support issue addressed by customer.\n\nGiven dataset contains following columns\n\n* **PROBLEM_TYPE** : Showing the description of issue of any category of any device\/service\n* **no_of_cases** : Count of the specific type of complain received\n* **Avg_pending_calls** : Avereage remaining calls of the complain to resolve 'Avg_resol_time',\n* **recurrence_freq** : How many time the same issue is raised\n* **Replace_percent** : To solve the issue\/complain how many times the replacement is done\n* **In_warranty_percent** : How many times the issue raised by customer falls under warrenty period\n* **Post_warranty_percent** : How many times the issue raised by customer after warrenty period\n* **Cluster** : Output attribute(To be insert afterwards to categorize the complains from the provided dataset and attributes)","d19e9023":"Let's append the predection to the given dataset so we can understand the categories of the similar problems falling in the same cluster.","eecf3c93":"# **2. EDA and Data-Preprocessing**","1f2945ce":"**4.1 Let's check model with K = 3**","aa6d38d4":"# K-Means Clustering with EDA using Pandas Profiling","673979b4":"Looking at the complains of the cluster 0. If they belong to similar problems. We can check them by changing value from 0 to 2 one after the other.","491c8602":"Here from the above plot we identified two values of K which causing the Elbow effect giving us the values of K=3 and 5. Let's check here for K=3 first.","61265c09":"Let's check the Elbow in the Plot with different variances.","3644635e":"# **4. Determination of Optimal K Value using Elbow Method**","de0c2a82":"From the plot above we can observe that the line continues to get dropping sharply as we increase the k value. The bend in the curve is not coming out clearly as we have many bends. But after k=3 the drop is becoming less steep. So this can be the choice here. Even ignoring such small change in steepness, we can consider the value 5 to be more nearer and having less variance. So we can work around this two values and finlize the **k**","8cc89dc1":"# **3. Group Data into similar clusters**","575d8667":"Now we'll use **K-Means clustering** to group data based on their attribute. First, we need to determine the optimal number of Groups.\nWe can use verious methods to determine value of K. Here we are going to use the [Elbow method](https:\/\/www.scikit-yb.org\/en\/latest\/api\/cluster\/elbow.html). Although you can use the [Silhouette Algorithm](https:\/\/scikit-learn.org\/stable\/auto_examples\/cluster\/plot_kmeans_silhouette_analysis.html) as well to do so.","7047ff96":"**4.2 Let's check model with K = 5**","994e685d":"# **Now let's generate the dataset profile using the [Pandas Profiling](https:\/\/github.com\/pandas-profiling\/pandas-profiling)**","c8bdfd9d":"Now let's try to separate the complains\/issues from its details","a5777dc9":"Let's check the MeanDistortion of each K value to select for final model","83b8cf2b":"Understanding the statistical parameters of the given dataset"}}