{"cell_type":{"a0fa3a9d":"code","8ab1b74d":"code","6e3cdc86":"code","262d7ff3":"code","8a6b1261":"code","18e53dc7":"code","12de7eec":"code","98db5c4e":"code","35780418":"code","b67fb7c6":"markdown","a311f17d":"markdown","ff189674":"markdown","5a879b0f":"markdown","af077e48":"markdown","814df760":"markdown","1bad5a7b":"markdown","713bb275":"markdown"},"source":{"a0fa3a9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ab1b74d":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data  = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngender_subData = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\nprint(\"Training Data\")\nprint(train_data.head(2))\nprint(\"Testing Data\")\nprint(test_data.head(2))\nprint(\"Gender submissionData\")\nprint(gender_subData.head(2))","6e3cdc86":"print(train_data.isnull().sum()) ","262d7ff3":"#Dropping age values for now\ntrain_data.dropna(subset = ['Age'],inplace = True)","8a6b1261":"le = LabelEncoder()\ntrain_data['Sex'] = le.fit_transform(train_data['Sex'])\ntrain_data['Cabin'] = le.fit_transform(train_data['Cabin'].astype(str))\n","18e53dc7":"sns.heatmap(train_data.loc[:,['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Cabin']].corr(), cmap=\"YlGnBu\")","12de7eec":"X,y = train_data.loc[:, ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch']], train_data.loc[:,'Survived']\nX_train, X_test, y_train, y_test = train_test_split(X, y)\nsvc = SVC()\nclf = GridSearchCV(svc, {\n    'kernel':('linear', 'rbf', 'poly'),\n    'C': [0.1,1,10,100]})","98db5c4e":"clf.fit(X_train,y_train)","35780418":"result_df = pd.DataFrame(clf.cv_results_)\nprint(result_df)\nprint(clf.best_score_)\nprint(clf.best_params_)","b67fb7c6":"# Let's take a look at our data","a311f17d":"First we must encode non-numeric features into numeric values using LabelEncoder","ff189674":"*Notice that Cabin and Pclass hre significantly correlated.*\n\nSince a lot of Cabin data is missing we'll use Pclass instead of Cabin","5a879b0f":"Seems like Age and Cabin data need some processing:\n* Some of the age values can be filled using the title before names\n* Cabin and passenger class might be inter-related ","af077e48":"*SVC with rbf kernel at c = 100 gave the best score of 0.81 for now.*","814df760":"# Let us check for nan values first","1bad5a7b":"*Seems like the testing data can be used in combination with Gender submission data*","713bb275":"# Let us check for correlations between different features"}}