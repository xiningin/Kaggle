{"cell_type":{"10cc8266":"code","a365b53b":"code","17224397":"code","3bfb5b46":"code","92f29598":"code","98d50061":"code","af54cff1":"code","955aee49":"code","c4cdf4eb":"code","c0010fcb":"code","8124de10":"code","b862d096":"code","5c8fda62":"code","39152b69":"code","5ad1cced":"code","90a98eb0":"markdown","c6ddb064":"markdown","98326cd0":"markdown","1171dc49":"markdown","66ffd96a":"markdown"},"source":{"10cc8266":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport seaborn as sns\n# Any results you write to the current directory are saved as output.\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# We dont Probably need the Gridlines. Do we? If yes comment this line\nsns.set(style=\"ticks\")\n\nflatui = [\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\"]\nflatui = sns.color_palette(flatui)","a365b53b":"# https:\/\/towardsdatascience.com\/the-search-for-categorical-correlation-a1cf7f1888c9\nimport scipy.stats as ss\nfrom collections import Counter\nimport math \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom scipy import stats\nimport numpy as np\n\ndef convert(data, to):\n    converted = None\n    if to == 'array':\n        if isinstance(data, np.ndarray):\n            converted = data\n        elif isinstance(data, pd.Series):\n            converted = data.values\n        elif isinstance(data, list):\n            converted = np.array(data)\n        elif isinstance(data, pd.DataFrame):\n            converted = data.as_matrix()\n    elif to == 'list':\n        if isinstance(data, list):\n            converted = data\n        elif isinstance(data, pd.Series):\n            converted = data.values.tolist()\n        elif isinstance(data, np.ndarray):\n            converted = data.tolist()\n    elif to == 'dataframe':\n        if isinstance(data, pd.DataFrame):\n            converted = data\n        elif isinstance(data, np.ndarray):\n            converted = pd.DataFrame(data)\n    else:\n        raise ValueError(\"Unknown data conversion: {}\".format(to))\n    if converted is None:\n        raise TypeError('cannot handle data conversion of type: {} to {}'.format(type(data),to))\n    else:\n        return converted\n    \ndef conditional_entropy(x, y):\n    \"\"\"\n    Calculates the conditional entropy of x given y: S(x|y)\n    Wikipedia: https:\/\/en.wikipedia.org\/wiki\/Conditional_entropy\n    :param x: list \/ NumPy ndarray \/ Pandas Series\n        A sequence of measurements\n    :param y: list \/ NumPy ndarray \/ Pandas Series\n        A sequence of measurements\n    :return: float\n    \"\"\"\n    # entropy of x given y\n    y_counter = Counter(y)\n    xy_counter = Counter(list(zip(x,y)))\n    total_occurrences = sum(y_counter.values())\n    entropy = 0.0\n    for xy in xy_counter.keys():\n        p_xy = xy_counter[xy] \/ total_occurrences\n        p_y = y_counter[xy[1]] \/ total_occurrences\n        entropy += p_xy * math.log(p_y\/p_xy)\n    return entropy\n\ndef cramers_v(x, y):\n    confusion_matrix = pd.crosstab(x,y)\n    chi2 = ss.chi2_contingency(confusion_matrix)[0]\n    n = confusion_matrix.sum().sum()\n    phi2 = chi2\/n\n    r,k = confusion_matrix.shape\n    phi2corr = max(0, phi2-((k-1)*(r-1))\/(n-1))\n    rcorr = r-((r-1)**2)\/(n-1)\n    kcorr = k-((k-1)**2)\/(n-1)\n    return np.sqrt(phi2corr\/min((kcorr-1),(rcorr-1)))\n\ndef theils_u(x, y):\n    s_xy = conditional_entropy(x,y)\n    x_counter = Counter(x)\n    total_occurrences = sum(x_counter.values())\n    p_x = list(map(lambda n: n\/total_occurrences, x_counter.values()))\n    s_x = ss.entropy(p_x)\n    if s_x == 0:\n        return 1\n    else:\n        return (s_x - s_xy) \/ s_x\n\ndef correlation_ratio(categories, measurements):\n    fcat, _ = pd.factorize(categories)\n    cat_num = np.max(fcat)+1\n    y_avg_array = np.zeros(cat_num)\n    n_array = np.zeros(cat_num)\n    for i in range(0,cat_num):\n        cat_measures = measurements[np.argwhere(fcat == i).flatten()]\n        n_array[i] = len(cat_measures)\n        y_avg_array[i] = np.average(cat_measures)\n    y_total_avg = np.sum(np.multiply(y_avg_array,n_array))\/np.sum(n_array)\n    numerator = np.sum(np.multiply(n_array,np.power(np.subtract(y_avg_array,y_total_avg),2)))\n    denominator = np.sum(np.power(np.subtract(measurements,y_total_avg),2))\n    if numerator == 0:\n        eta = 0.0\n    else:\n        eta = numerator\/denominator\n    return eta\n\ndef associations(dataset, nominal_columns=None, mark_columns=False, theil_u=False, plot=True,\n                          return_results = False, **kwargs):\n    \"\"\"\n    Calculate the correlation\/strength-of-association of features in data-set with both categorical (eda_tools) and\n    continuous features using:\n     - Pearson's R for continuous-continuous cases\n     - Correlation Ratio for categorical-continuous cases\n     - Cramer's V or Theil's U for categorical-categorical cases\n    :param dataset: NumPy ndarray \/ Pandas DataFrame\n        The data-set for which the features' correlation is computed\n    :param nominal_columns: string \/ list \/ NumPy ndarray\n        Names of columns of the data-set which hold categorical values. Can also be the string 'all' to state that all\n        columns are categorical, or None (default) to state none are categorical\n    :param mark_columns: Boolean (default: False)\n        if True, output's columns' names will have a suffix of '(nom)' or '(con)' based on there type (eda_tools or\n        continuous), as provided by nominal_columns\n    :param theil_u: Boolean (default: False)\n        In the case of categorical-categorical feaures, use Theil's U instead of Cramer's V\n    :param plot: Boolean (default: True)\n        If True, plot a heat-map of the correlation matrix\n    :param return_results: Boolean (default: False)\n        If True, the function will return a Pandas DataFrame of the computed associations\n    :param kwargs:\n        Arguments to be passed to used function and methods\n    :return: Pandas DataFrame\n        A DataFrame of the correlation\/strength-of-association between all features\n    \"\"\"\n\n    dataset = convert(dataset, 'dataframe')\n    columns = dataset.columns\n    if nominal_columns is None:\n        nominal_columns = list()\n    elif nominal_columns == 'all':\n        nominal_columns = columns\n    corr = pd.DataFrame(index=columns, columns=columns)\n    for i in range(0,len(columns)):\n        for j in range(i,len(columns)):\n            if i == j:\n                corr[columns[i]][columns[j]] = 1.0\n            else:\n                if columns[i] in nominal_columns:\n                    if columns[j] in nominal_columns:\n                        if theil_u:\n                            corr[columns[j]][columns[i]] = theils_u(dataset[columns[i]],dataset[columns[j]])\n                            corr[columns[i]][columns[j]] = theils_u(dataset[columns[j]],dataset[columns[i]])\n                        else:\n                            cell = cramers_v(dataset[columns[i]],dataset[columns[j]])\n                            corr[columns[i]][columns[j]] = cell\n                            corr[columns[j]][columns[i]] = cell\n                    else:\n                        cell = correlation_ratio(dataset[columns[i]], dataset[columns[j]])\n                        corr[columns[i]][columns[j]] = cell\n                        corr[columns[j]][columns[i]] = cell\n                else:\n                    if columns[j] in nominal_columns:\n                        cell = correlation_ratio(dataset[columns[j]], dataset[columns[i]])\n                        corr[columns[i]][columns[j]] = cell\n                        corr[columns[j]][columns[i]] = cell\n                    else:\n                        cell, _ = ss.pearsonr(dataset[columns[i]], dataset[columns[j]])\n                        corr[columns[i]][columns[j]] = cell\n                        corr[columns[j]][columns[i]] = cell\n    corr.fillna(value=np.nan, inplace=True)\n    if mark_columns:\n        marked_columns = ['{} (nom)'.format(col) if col in nominal_columns else '{} (con)'.format(col) for col in columns]\n        corr.columns = marked_columns\n        corr.index = marked_columns\n    if plot:\n        plt.figure(figsize=(20,20))#kwargs.get('figsize',None))\n        sns.heatmap(corr, annot=kwargs.get('annot',True), fmt=kwargs.get('fmt','.2f'), cmap='coolwarm')\n        plt.show()\n    if return_results:\n        return corr","17224397":"df = pd.read_csv('..\/input\/indian-liver-patient-records\/indian_liver_patient.csv')\ndf.head(6)","3bfb5b46":"# Check the info for the DataFrame to check what kind of Data types are available\ndf.info()","92f29598":"#Drop any NA rows and check if any null value exists\ndf=df.dropna()\ndf.isnull().any()","98d50061":"# Gender is categorical data so getting rid of it by forming dummy values\ndummy = pd.get_dummies(df['Gender'])\ndummy","af54cff1":"df = pd.concat([df,dummy], axis=1)\ndf.head()","955aee49":"df = df.drop(['Gender'],axis=1)\n#df.replace([np.inf, -np.inf], np.nan)\ndf_norm = (df - df.mean()) \/ (df.max() - df.min())\ndf_norm.head(3)","c4cdf4eb":"corr = df_norm.corr()\n\ng = sns.heatmap(corr,  vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True, fmt='.2f', cmap='coolwarm')\n\nsns.despine()\ng.figure.set_size_inches(14,10)\n    \nplt.show()","c0010fcb":"results = associations(df,return_results=True)\n","8124de10":"sns.set(style=\"ticks\")\n\n# As my dataset did not have much Catagorical data I had to subside with 20 samples.\n\n\ndf_plot = df_norm.sample(30).groupby(['Direct_Bilirubin', 'Age']).size().reset_index().pivot(columns='Direct_Bilirubin', index='Age', values=0).reset_index()\n\ng = df_plot.set_index('Age').T.plot(kind='bar', stacked=True, \n            color=sns.color_palette())\nsns.despine()\ng.figure.set_size_inches(14,8)\n    \nplt.show()","b862d096":"g = sns.pairplot(df_norm[['Direct_Bilirubin','Alkaline_Phosphotase','Alamine_Aminotransferase','Aspartate_Aminotransferase']])","5c8fda62":"g = sns.pairplot(df_norm[['Direct_Bilirubin','Alkaline_Phosphotase','Alamine_Aminotransferase','Aspartate_Aminotransferase','Dataset']], hue='Dataset')","39152b69":"# Plot beeswarm with x as O3\n\ng = sns.swarmplot(y = \"Direct_Bilirubin\",\n              x = 'Dataset', \n              data = df_norm,\n              # Decrease the size of the points to avoid crowding \n              size = 7)\n\n# remove the top and right line in graph\nsns.despine()\ng.figure.set_size_inches(14,10)\n# Give a descriptive title\n\nplt.show()","5ad1cced":"g = sns.boxplot(y = \"Direct_Bilirubin\",\n              x = 'Dataset', \n              data = df_norm, whis=np.inf)\n\ng = sns.swarmplot(y = \"Direct_Bilirubin\",\n              x = 'Dataset', \n              data = df_norm,\n              # Decrease the size of the points to avoid crowding \n              size = 7,color = 'black')\n\n# remove the top and right line in graph\nsns.despine()\n\n\ng.figure.set_size_inches(12,8)\n\nplt.show()","90a98eb0":"# Reading Data\n\nHere we read the data from the liver patients and then see the first few columns.","c6ddb064":"pre-processing data to get rid of any null values","98326cd0":"# Simple Correlation Plot","1171dc49":"# Swarm Plots","66ffd96a":"# Pair Plot"}}