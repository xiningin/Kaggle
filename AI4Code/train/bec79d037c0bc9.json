{"cell_type":{"5946e077":"code","c788a436":"code","88c7b44c":"code","0601245d":"code","5f11afce":"code","b1c9431b":"code","93f711ff":"code","71b5d604":"code","9e8ca17b":"code","2081226b":"code","589d9481":"code","3cd5ab85":"code","2871b48d":"code","5bce345a":"code","92e47751":"code","7477c7c0":"code","92ac3d49":"code","ae7b7885":"code","48614966":"code","e8c49cd4":"code","9d2c44b7":"code","db849155":"code","9207b01a":"code","ee0a93e5":"code","5fe75d51":"code","d70cc375":"code","13f30da0":"code","4810da53":"code","59062219":"code","ad599fc4":"code","6459ee77":"markdown"},"source":{"5946e077":"#\u00d6znitelik Bilgileri\n# kimlik: benzersiz tan\u0131mlay\u0131c\u0131\n# cinsiyet: \"Erkek\", \"Kad\u0131n\" veya \"Di\u011fer\"\n# ya\u015f: hastan\u0131n ya\u015f\u0131\n# hipertansiyon: Hastada hipertansiyon yoksa 0, hipertansiyon varsa 1\n# heart_disease: Hastada herhangi bir kalp hastal\u0131\u011f\u0131 yoksa 0, kalp hastal\u0131\u011f\u0131 varsa 1\n# ever_married: \"Hay\u0131r\" veya \"Evet\"\n# work_type: \"\u00e7ocuklar\", \"Govt_jov\", \"Never_worked\", \"\u00d6zel\" veya \"Serbest Meslek Sahibi\"\n# Residence_type: \"K\u0131rsal\" veya \"Kentsel\"\n# avg_glucose_level: kandaki ortalama glikoz seviyesi\n# bmi: v\u00fccut kitle indeksi\n# smoking_status: \"\u00f6nceden i\u00e7ilmi\u015f\", \"hi\u00e7 i\u00e7memi\u015f\", \"sigara i\u00e7iyor\" veya \"Bilinmiyor\" *\n# inme: Hasta inme ge\u00e7irdiyse 1 veya yoksa 0\n# Not: Smoking_status'taki \"Unknown\", bilgilerin bu hasta i\u00e7in mevcut olmad\u0131\u011f\u0131 anlam\u0131na gelir","c788a436":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nimport seaborn as sns\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nimport missingno as msno\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import *\nfrom sklearn.metrics import accuracy_score, confusion_matrix,precision_score\nfrom sklearn import metrics\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88c7b44c":"df = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","0601245d":"pd.pandas.set_option('display.max_columns', None)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\npd.set_option('display.width', 170)\nwarnings.filterwarnings('ignore')","5f11afce":"##############################################################\n# 1. Data Preperation\n##############################################################","b1c9431b":"df.head()","93f711ff":"df.shape","71b5d604":"df.columns","9e8ca17b":"df.info()","2081226b":"df.nunique() #herbir de\u011fi\u015fken i\u00e7in e\u015fsiz de\u011fer say\u0131lar\u0131m\u0131z","589d9481":"df.isnull().any().sum()  #Eksik de\u011fer var m\u0131 hi\u00e7?","3cd5ab85":"df.isnull().sum()","2871b48d":"df.describe().T","5bce345a":"\ndef grab_col_names(dataframe, cat_th=10, car_th=20):\n\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n\n    return cat_cols, cat_but_car, num_cols, num_but_cat\n\n#veri seti g\u00f6zlemler hakk\u0131nda inceleme yap\u0131ld\u0131\ncat_cols, cat_but_car, num_cols, num_but_cat = grab_col_names(df)","92e47751":"def data_understand(df):\n    print(\"DF SHAPE:\", df.shape)\n    print(\"------------------------------------------------------------------------\")\n    print(\"OUTCOME 1 DF RATIO:\", len(df[df[\"stroke\"] == 1]) \/ len(df))\n    print(\"OUTCOME 0 DF RATIO:\", len(df[df[\"stroke\"] == 0]) \/ len(df))\n    print(\"------------------------------------TYPES------------------------------------\")\n    print(df.dtypes)\n    print(\"------------------------------------HEAD------------------------------------\")\n    print(df.head())\n    print(\"-------------------------------------TA\u0130L-----------------------------------\")\n    print(df.tail())\n    print(\"------------------------------------DESCR\u0130BE------------------------------------\")\n    print(df.describe().T)\n    print(\"-------------------------------------QUANT\u0130LE-----------------------------------\")\n    print(df.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n    print(\"-----------------------------------CORR-------------------------------------\")\n    # Is\u0131 haritas\u0131nda, daha parlak renkler daha fazla korelasyonu g\u00f6sterir.\n\n    corr = df.corr()\n    print(corr)\n    print(\"--------------------------------------HEATMAP----------------------------------\")\n    sns.heatmap(corr,\n                xticklabels=corr.columns,\n                yticklabels=corr.columns)\n    plt.show()\n\n\ndata_understand(df)","7477c7c0":"#Veri setindeki eksik de\u011ferleri sorgulamak i\u00e7in\ndef df_questioning_null(df):\n\n    print(f\"Veri k\u00fcmesinde hi\u00e7 bo\u015f de\u011fer var m\u0131?: {df.isnull().values.any()}\")\n    if df.isnull().values.any():\n        null_values = df.isnull().sum()\n        print(f\"Hangi s\u00fctunlarda eksik de\u011ferler var?:\\n{null_values[null_values > 0]}\")\n\ndf_questioning_null(df)","92ac3d49":"\n#Ayk\u0131r\u0131 de\u011ferleri yakalamak i\u00e7in\ndef outlier_thresholds(dataframe, col_name):\n    quartile1 = dataframe[col_name].quantile(0.25)\n    quartile3 = dataframe[col_name].quantile(0.75)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n","ae7b7885":"def check_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True #return \u00fcn i\u015flenebilir bir nesne olmas\u0131 laz\u0131m\n    else:\n        return False\n","48614966":"check_outlier(df, \"age\")  #False","e8c49cd4":"check_outlier(df,\"avg_glucose_level\")  #True","9d2c44b7":"df_numerical=df[['age','avg_glucose_level','bmi']]\ndf_categorical=df[['gender', 'hypertension', 'heart_disease', 'ever_married','work_type', 'Residence_type',\n                       'smoking_status', 'stroke']]","db849155":"fig=plt.figure(figsize=(20,15),dpi=100)\nsns.pairplot(data=df,hue='stroke',size=2,palette='OrRd')\nplt.show()\n","9207b01a":"\n# # Marrital Durumunu, \u0130kametgah\u0131n\u0131 ve Cinsiyetini 0'lara ve 1'lere d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\ndf['gender']=df['gender'].apply(lambda x : 1 if x=='Male' else 0)\ndf[\"Residence_type\"] = df[\"Residence_type\"].apply(lambda x: 1 if x==\"Urban\" else 0)\ndf[\"ever_married\"] = df[\"ever_married\"].apply(lambda x: 1 if x==\"Yes\" else 0)\n# # Sigara t\u00fcr\u00fc bilinmeyen g\u00f6zlemlerin kald\u0131r\u0131ld\u0131\ndf=df[df['smoking_status']!='Unknown']\nbmi_indexes = df[df[\"bmi\"].isna()].index\ndf.drop(bmi_indexes, errors=\"ignore\", inplace=True)\n\ndf.head()","ee0a93e5":"def replace_with_thresholds(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if low_limit > 0: #zaten - \u00e7\u0131kan bir limit bask\u0131lanamaz\n        dataframe.loc[(dataframe[col_name] < low_limit), col_name] = low_limit\n        dataframe.loc[(dataframe[col_name] > up_limit), col_name] = up_limit\n    else:\n        dataframe.loc[(dataframe[col_name] > up_limit), col_name] = up_limit\n\nfor col in num_cols:\n    replace_with_thresholds(df, col)\n\ndf = pd.get_dummies(df, drop_first=True)","5fe75d51":"#Accuracy Skoru bulmak i\u00e7in\ndef model_comparison_accuracy_score(model_name, model_object, data, target_col):\n    np.random.seed(0)\n    y = data[[target_col]]\n    X = data.drop(target_col, axis=1)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)\n    model = model_object()\n    model.fit(X_train, y_train.values.ravel())\n    y_pred = model.predict(X_test)\n    print(f\"-{model_name}-\".center(50, \"#\"))\n    print(confusion_matrix(y_pred, y_test))\n    return accuracy_score(y_pred, y_test)","d70cc375":"#Sensitivity Skoru bulmak i\u00e7in\n\ndef model_comparison_sensitivity_score(model_name, model_object, data, target_col):\n    np.random.seed(0)\n    y = data[[target_col]]\n    X = data.drop(target_col, axis=1)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)\n    model = model_object()\n    model.fit(X_train, y_train.values.ravel())\n    y_pred = model.predict(X_test)\n    cm1 = confusion_matrix(y_pred, y_test)\n    sensitivity1 = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    return sensitivity1","13f30da0":"#Specificity Skoru bulmak i\u00e7in\ndef model_comparison_specificity_score(model_name, model_object, data, target_col):\n    np.random.seed(0)\n    y = data[[target_col]]\n    X = data.drop(target_col, axis=1)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)\n    model = model_object()\n    model.fit(X_train, y_train.values.ravel())\n    y_pred = model.predict(X_test)\n    cm1 = confusion_matrix(y_pred, y_test)\n    specificity1 = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    return specificity1\n","4810da53":"model_dict = {\"Karar A\u011fa\u00e7lar\u0131\": DecisionTreeClassifier,\n              \"En Yak\u0131n Kom\u015fu\": KNeighborsClassifier,\n              \"Bayes S\u0131n\u0131fland\u0131rma\": GaussianNB,\n              \"Yapay Sinir A\u011flar\u0131\": MLPClassifier,\n              \"Destek Vekt\u00f6r Makineleri\": SVC}","59062219":"score_dict = {}\nfor name, model in model_dict.items():\n    score = model_comparison_accuracy_score(name, model, df, \"stroke\")\n    score_dict[name] = round(score, 4)\n\nscore_dict_2 = {}\nfor name, model in model_dict.items():\n    score = model_comparison_sensitivity_score(name, model, df, \"stroke\")\n    score_dict_2[name] = round(score, 4)\n\n\nscore_dict_3= {}\nfor name, model in model_dict.items():\n    score = model_comparison_specificity_score(name, model, df, \"stroke\")\n    score_dict_3[name] = round(score, 4)","ad599fc4":"print(\" ACCURACY SCORES \".center(50, \"#\"))\nprint(score_dict)\n\nprint(\" SENSITIVITY SCORES \".center(50, \"#\"))\nprint(score_dict_2)\n\nprint(\" SPESIFYCIY SCORES \".center(50, \"#\"))\nprint(score_dict_3)\n","6459ee77":"<center>\n<h1 style=\"background-color:orange; color:white\" >Stroke Prediction EDA-ML<\/h1>\n\n<center><img\nsrc=\"https:\/\/www.mmcoakridge.com\/wp-content\/uploads\/sites\/14\/2020\/07\/Brain-Attack-Stroke-iStock-1168179084.jpg\" style=\"width:90%;height:40%;\">\n<\/center>\n    \n<br>    \n    \n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action active\" style=\"background-color:orange; color:white\" data-\n    toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Content<\/h3>  \n<ul>\n        <li>EDA<\/li>\n        <li>Modelling<\/li>\n    <\/ul>\n  "}}