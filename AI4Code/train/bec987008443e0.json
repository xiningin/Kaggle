{"cell_type":{"30ef42a1":"code","33c4551b":"code","d4c47403":"code","dca2be66":"code","886cf584":"code","1fc6d27d":"code","2df20a86":"code","39dbc0d0":"code","cc023259":"code","e0927d00":"code","6f712082":"code","e921df0c":"code","09a38935":"code","4b0e0bfe":"code","741d4818":"code","b348cefd":"code","920f3129":"code","26928163":"code","c29edb27":"code","6b2d2e3e":"code","60bbc629":"code","70b41874":"code","eaf00279":"code","b5fe3b1e":"code","ef092608":"code","e7c479d4":"code","b88f80d6":"code","e4dd1ca6":"code","bb6b2214":"code","92fdbb62":"code","ffa4e38f":"code","95242f82":"code","76762955":"code","45f1f380":"code","5599e477":"code","eab205a3":"code","4aab82b7":"code","9e84f77f":"code","683e76e6":"code","0e0cec10":"code","5ad22bd7":"code","8e23e7f4":"code","d903995b":"markdown","f8467b16":"markdown","6fc51c0b":"markdown","f6cad3ad":"markdown","1427a166":"markdown","c2c78f45":"markdown","7fc11be7":"markdown","1a06cb7e":"markdown","e4d5469c":"markdown","4963412c":"markdown","63fdd8ec":"markdown","1dea7aec":"markdown","a2774a3d":"markdown","c5c74b1d":"markdown","98a933d4":"markdown","5d544474":"markdown","f1bd5210":"markdown"},"source":{"30ef42a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","33c4551b":"data = pd.read_csv('..\/input\/2015.csv')","d4c47403":"data.info()","dca2be66":"data.head(100)","886cf584":"data.corr()","1fc6d27d":"#correlation map \nf,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(data.corr(), annot = True , linewidth =.5 , fmt='.1f',ax=ax)\nplt.show()","2df20a86":"data.columns","39dbc0d0":"# we have space at every columns so we have to fix them with these code , \ndata.columns = data.columns.str.replace(' ', '_')","cc023259":"#lets check\ndata.columns\n# perfect !","e0927d00":"# lineplot columns of Happiness_Score\n#  color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Happiness_Score.plot(kind = 'line' , color = 'g' , label = 'Happiness_Score' , linewidth = 1 , alpha = 0.5 , grid = True ,\nlinestyle= ':')\nplt.legend(loc='upper right')\nplt.xlabel ('x axis')\nplt.ylabel ('y axis')\nplt.title ('line plot')\nplt.show()","6f712082":"# lineplot , columns of Family\n#  color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Family.plot(  color = 'r' , label = 'Family' , linewidth = 1 , alpha = 0.5 , grid = True ,\nlinestyle= ':')\nplt.legend(loc='best')\nplt.xlabel ('x axis')\nplt.ylabel ('y axis')\nplt.title ('line plot')\nplt.show()","e921df0c":"# lineplot Both of them\n#  color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Happiness_Score.plot(kind = 'line' , color = 'g' , label = 'Happiness_Score' , linewidth = 1 , alpha = 0.5 , grid = True ,\nlinestyle= ':')\ndata.Family.plot(color = 'r',label = 'Family' ,linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc= 'best')\nplt.xlabel ('x axis')\nplt.ylabel ('y axis')\nplt.title ('line plot')\nplt.show()","09a38935":"#scatter plot \n# x = Happiness_Score , y = Family \ndata.plot(kind = 'scatter' , x='Happiness_Score' , y='Family', alpha=0.5 , color='red')\nplt.xlabel('Hapiness_Score')\nplt.ylabel('Family')\nplt.title('Happiness Score - Family')\nplt.show()","4b0e0bfe":"# histogram\n# bins = number of bar in figure\ndata.Happiness_Score.plot(kind='hist' , bins= 50 ,figsize =(10,10))\nplt.show()\n","741d4818":"# clf() = cleans it up again you can start a fresh\ndata.Happiness_Score.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","b348cefd":"# Dictionary , Keys , Values , \ndictionary = {'England' : 'Everton' , 'Italy' : 'Inter'}\nprint(dictionary.keys())\nprint(dictionary.values())","920f3129":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['England'] = 'Chelsea'  # change value of existing entry\nprint(dictionary)\ndictionary['France'] = 'monaco'  # add new key and value existing entry\nprint(dictionary)\n#del dictionary['England'] # remove keys or values with del \nprint(dictionary)  # check result\nprint('France' in dictionary)  # check inclue or not \n#dictionary.clear() # remove all entries in dictionary\nprint(dictionary) # result \n\n# we have to take del and clear into comment whiteout Run \n\n","26928163":"data = pd.read_csv('..\/input\/2015.csv')","c29edb27":"data.columns","6b2d2e3e":"# we have space at every columns so we have to fix them with this code , \ndata.columns = data.columns.str.replace(' ', '_')","60bbc629":"series = data['Happiness_Score']      # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['Happiness_Score']]    # data[['Defense']] = data frame\nprint(type(data_frame))","70b41874":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)  # symbolic logic\nprint(True or False)   # symbolic logic","eaf00279":"# 1 - Filtering Pandas data frame\nx = data['Happiness_Score']>7.5    #There are just 4 country over 7.5 Score .\ndata[x]","b5fe3b1e":"# 2 - Filtering pandas with logical_and\n# There are only 2 Country who 's Happiness_Score more than 7.5 and Family value more than 1.35 .\n# n 1.35\ndata[np.logical_and(data['Happiness_Score']>7.5 , data['Family']>1.35 )]","ef092608":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['Happiness_Score']>7.5) & (data['Family']>1.35)]","e7c479d4":"i = 0 \nwhile i != 5 :\n    print('i is : ' , i )\n    i +=1\nprint(i , ' is equal to 5') # self reminder = pls do not put space while writing print func , it does not work good\n","b88f80d6":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary.\ndictionary = {'England':'Everton','france':'Monaco'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['Happiness_Score']][0:2].iterrows():      \n    print(index,\" : \",value)","e4dd1ca6":"# example of what we learn above\ndef tuble_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","bb6b2214":"# guess print what\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope\n#searching and typing both ","92fdbb62":"# if we remove local scope ?\nx = 5 \ndef f():\n    y = 2*x     # there is no local scope \n    return(y)\nprint(f())           # def using global scope bkz there is no local scope","ffa4e38f":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","95242f82":"def square():\n    \"\"\" return square of value \"\"\"\n    def add ():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x+y\n        return(z)\n    return add()**2\nprint(square())","76762955":"#default arg.\ndef f(a,b = 1 , c=2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))\n#if we want we can add variables in default args but if we dont , default arg fill it by itself","45f1f380":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i) \nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n\n    for key,value in kwargs.items():\n        print(key , \"\" , value)\nf(country = \"spain\" , capital = \"Turkey\" , population = 2321312)","5599e477":"#lambda function\nsquare = lambda x : x**2           # where x is name of argument\nprint(square(4))        \ntot = lambda a,b,c : a+b+c      # where x,y,z are names of arguments\nprint(tot(1,2,3))","eab205a3":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","4aab82b7":"name = \"messi\"\nit = iter(name)\nprint(next(it))\nprint(*it)\n","9e84f77f":"#zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","683e76e6":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","0e0cec10":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","5ad22bd7":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","8e23e7f4":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.Family)\/len(data.Family)\ndata[\"Happiness_Score\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"Happiness_Score\",\"Family\"]] # we will learn loc more detailed later","d903995b":"<a id=\"16\"><\/a> <br>\n# 3.CLEANING DATA","f8467b16":"**D\u0130CT\u0130ONARY**","6fc51c0b":"**WH\u0130LE and FOR LOOPS**","f6cad3ad":"[i + 1 for i in num1 ]: list of comprehension\n<br> i +1: list comprehension syntax\n<br> for i in num1: for loop syntax\n<br> i: iterator\n<br> num1: iterable object","1427a166":"<a id=\"11\"><\/a> <br>\n### DEFAULT and FLEXIBLE ARGUMENTS\n* Default argument example:\n<br> def f(a, b=1):\n        \"\"\" b = 1 is default argument\"\"\"\n* Flexible argument example:\n<br> def f(*args):\n       \"\"\" *args can be one or more\"\"\"\n<br>def f(** kwargs)\n       \"\"\" **kwargs is a dictionary\"\"\"\n       \n<br><br> lets write some code to practice  ","c2c78f45":"<a id=\"15\"><\/a> <br>\n### LIST COMPREHENS\u0130ON\n**One of the most important topic of this kernel**\n<br>We use list comprehension for data analysis often. \n<br> list comprehension: collapse for loops for building lists into a single line\n<br>Ex: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is  unnecessarily long. We can make it one line code that is list comprehension.","7fc11be7":"So far , we've learnt \n* User defined function \n* Scope\n* Nested function\n* Default and flexible arguments\n* Lambda function\n*  Anonymous function\n*  Iterators\n* List comprehension","1a06cb7e":"What we need to know about functions:\n* docstrings: documentation for functions. Example:\n<br>for f():\n    <br>\"\"\"This is docstring for documentation of function f\"\"\"\n* tuble: sequence of immutable python objects. \n<br>cant modify values\n<br>tuble uses paranthesis like tuble = (1,2,3)\n<br>unpack tuble into several variables like a,b,c = tuble\n<br>variables can change basicly like ( b,c,a) or (c,a,b)\n    ","e4d5469c":"**PANDAS**","4963412c":"<a id=\"12\"><\/a> <br>\n### LAMBDA FUNCTION\nFaster way of writing function","63fdd8ec":"<a id=\"13\"><\/a> <br>\n### ANONYMOUS FUNCT\u0130ON\nLike lambda function but it can take more than one arguments.\n* map(func,seq) : applies a function to all the items in a list","1dea7aec":"<a id=\"10\"><\/a> <br>\n### NESTED FUNCTION\n* function inside function.\n* There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","a2774a3d":"<a id=\"14\"><\/a> <br>\n### ITERATORS\n* iterable is an object that can return an iterator\n* iterable: an object with an associated iter() method\n<br> example: list, strings and dictionaries\n* iterator: produces next value with next() method\n","c5c74b1d":"<a id=\"7\"><\/a> <br>\n# 2. PYTHON DATA SCIENCE TOOLBOX","98a933d4":"<a id=\"1\"><\/a> <br>\n# 1. INTRODUCTION TO PYTHON","5d544474":"<a id=\"9\"><\/a> <br>\n### SCOPE\nWhat we need to know about scope:\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len\n<br><br>Lets make some basic examples","f1bd5210":"**USER DEF\u0130NED FUNCT\u0130ON**"}}