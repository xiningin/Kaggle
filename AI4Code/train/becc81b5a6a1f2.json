{"cell_type":{"4c8dcedb":"code","79dd9ec1":"code","866de553":"code","0ba6f18b":"code","1495cecd":"code","8c48940c":"code","1f8a2457":"code","69b8d03e":"code","a95b99dd":"code","91582637":"code","db7cbb03":"code","e63cd08e":"code","a9d03803":"code","6c7782ef":"code","dff944e1":"markdown","73593c92":"markdown","e5c7b84d":"markdown","d47d9eb8":"markdown","dfc7bb9e":"markdown","f446bc16":"markdown","29c65d2e":"markdown","bd1c4c70":"markdown"},"source":{"4c8dcedb":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC","79dd9ec1":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","866de553":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)","0ba6f18b":"train.head()","1495cecd":"train.columns","8c48940c":"def getColumnsExceptOneColumn(df,col):\n    return train.loc[:, train.columns != col].columns.tolist()","1f8a2457":"target_col = \"Survived\"\ny = train[target_col]\n\nfeatures = getColumnsExceptOneColumn(train,target_col)\n\n\nX = train[features]\nX_test = test[features]","69b8d03e":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in X.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)","a95b99dd":"str_list","91582637":"num_list","db7cbb03":"!pip install lightgbm","e63cd08e":"from lightgbm import LGBMClassifier\nligthgbm = LGBMClassifier( random_state=2021)","a9d03803":"numeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"est\", ligthgbm)])\nclf.fit(X, y)\n\npredictions = clf.predict(X_test)","6c7782ef":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = predictions\nsubmission.to_csv('submission.csv', index=False)","dff944e1":"# Load Data","73593c92":"# Create LGBMClassifier default Model ","e5c7b84d":"# Devide Column ","d47d9eb8":"# Auto Pipeline","dfc7bb9e":"# Delete Columns","f446bc16":"# install lightgbm","29c65d2e":"# Submission","bd1c4c70":"# Set Train data and target \/ Set Test data"}}