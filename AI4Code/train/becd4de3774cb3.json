{"cell_type":{"2457225f":"code","59994065":"code","7100d40c":"code","c2c15502":"code","5d9db41a":"code","54e7dc29":"code","92f9d59b":"code","18c86c9a":"code","03fae394":"code","a475e2d8":"code","fba3d531":"code","c9260929":"code","f64d6d53":"code","e28ca427":"code","a34446b6":"code","76b5284e":"code","16e391a4":"markdown","ae5f03bc":"markdown","39e12a81":"markdown","0d8b6e60":"markdown","78cb47e7":"markdown","799ac7ce":"markdown","ebaf2add":"markdown","15ab01e6":"markdown","5092429f":"markdown","888b8c5f":"markdown","9a67f819":"markdown","ce8add99":"markdown","5492d934":"markdown","a53c6b34":"markdown","986c9db0":"markdown","fab92f33":"markdown","3e51ce96":"markdown","a3f6a65e":"markdown","4f76aa56":"markdown","566e3e31":"markdown"},"source":{"2457225f":"import fastai\nimport shutil\n\nimport numpy as np\nimport pandas as pd\n\nfrom matplotlib import pyplot as plt\nfrom IPython.core.interactiveshell import InteractiveShell\nfrom fastai.vision.all import *\nfrom fastai.vision.core import *\n\nInteractiveShell.ast_node_interactivity = \"all\"\n\ntrain = False","59994065":"model_loc = Path('\/root\/.cache\/torch\/hub\/checkpoints\/')\nif not model_loc.exists():\n    model_loc.mkdir(exist_ok=True, parents=True)\nmodel_loc.ls()","7100d40c":"\nPath(\"..\/input\/cassava-leaf-disease-classification\/\").exists() == Path(\"\/root\/.cache\/torch\/hub\/checkpoints\/\").exists()\nshutil.copy(f\"{Path(os.getcwd()).parent}\/input\/cassava-modelresnet34fine-tune10pkl\/resnet34-333f7ec4.pth\", \"\/root\/.cache\/torch\/hub\/checkpoints\/resnet34-333f7ec4.pth\")\nshutil.copy(f\"{Path(os.getcwd()).parent}\/input\/cassava-modelresnet34fine-tune10pkl\/resnet50-19c8e357.pth\", \"\/root\/.cache\/torch\/hub\/checkpoints\/resnet50-19c8e357.pth\")","c2c15502":"fastai.__version__","5d9db41a":"path = Path('..\/input\/cassava-leaf-disease-classification')\nos.listdir(path)","54e7dc29":"labels = pd.read_csv(path \/ 'train.csv')\nlabels[\"image_id\"] = labels[\"image_id\"].apply(\n    lambda x: f'train_images\/{x}')\nlabels.head()","92f9d59b":"dls = ImageDataLoaders.from_df(\n    labels, \n    path='..\/input\/cassava-leaf-disease-classification\/',\n    bs=64,\n    fn_col=0, \n    label_col=1, \n    seed=42,\n    valid_pct=0.2,\n    item_tfms=RandomResizedCrop(512, min_scale=0.75, ratio=(1.,1.)),\n    batch_tfms=aug_transforms(),\n    num_workers=0)\n\ndls.valid_ds.items[:3]","18c86c9a":"learn = cnn_learner(dls, resnet50, metrics=[error_rate, accuracy]).to_native_fp16()","03fae394":"if train:\n    learn.fine_tune(10, cbs=[MixUp(0.5)])","a475e2d8":"model_name = \"resnet50-fine_tune-10_resize-512\"\n\nif train:\n    learn.export(Path(f\"{Path(os.getcwd()).parent}\/output\/cassava-leaf-disease-classification\/{model_name}.pkl\"))\nelse:\n    # The learner should be loaded on gpu to enable test time augumentation. Thanks to @muellerzr for the tip\n    learn = load_learner(Path(f\"{Path(os.getcwd()).parent}\/input\/cassava-modelresnet34fine-tune10pkl\/{model_name}.pkl\"), cpu=False)\n    \nlearn = learn.to_native_fp32()\nlearn","fba3d531":"if train:\n    interp = ClassificationInterpretation.from_learner(learn)\n    interp.plot_confusion_matrix()","c9260929":"if train:\n    from fastai.vision.widgets import *\n    cleaner = ImageClassifierCleaner(learn)\n    cleaner","f64d6d53":"test_labels = pd.read_csv(path \/ 'sample_submission.csv')\ntest_labels[\"image_id\"] = test_labels[\"image_id\"].apply(\n    lambda x: f'test_images\/{x}')\n\ntest_labels.head()","e28ca427":"test_predictions = []\n\nfor i, r in test_labels.iterrows():\n    test_predictions.append(int(learn.predict(f'..\/input\/cassava-leaf-disease-classification\/{r.image_id}')[0]))\n    \ntest_predictions[0]","a34446b6":"# test_dl = dls.test_dl(test_labels, with_labels=True)\n# test_dl.show_batch()\n# test_dl.items\n\n# preds = learn.get_preds(dl=test_dl)\n# # preds = learn.tta(dl=test_dl, n=8, beta=0) # I learnt this trick from fastai forums\n# test_predictions = preds[1]\n# test_predictions[0]","76b5284e":"submission = pd.read_csv(path \/ 'sample_submission.csv')\nsubmission['label'] = test_predictions\nsubmission.head()\nsubmission.to_csv('submission.csv',index=False)","16e391a4":"## using ImageDataloader","ae5f03bc":"# step 5 - plot confusion matrix","39e12a81":"`cnn_learner` is converted to `fp32` so that there won't be issues during validation. I am entirely new to `fp16` training. This concept is not mentioned in lesson 1 or 2","0d8b6e60":"# Strategy","78cb47e7":"# step 4 - save model","799ac7ce":"# step 2 - create learner","ebaf2add":"Based on the first two lessons, the steps to create a `CNN` classification learner are\n1. create dataloader using either \n    - `ImageDataLoaders` or\n    - `DataBlock`\n2. feed the dataloader to create a learner using `cnn_learner`\n3. fine-tune the learner\n3. use `ClassificationInterpretation` to plot confusion matrix and top losses to understand performance of each label\n4. use `ImageClassifierCleaner` to clean images (This step may not be relevant to this challenge)","15ab01e6":"# submission\n\nTest dataloader is creating using the instructions mentioned [here]( https:\/\/forums.fast.ai\/t\/a-brief-guide-to-test-sets-in-v2-you-can-do-labelled-now-too\/57054)","5092429f":"### existing architectures","888b8c5f":"I used `ImageDataLoaders` to create dataloaders but datablocks or datasets api offers lot of flexibility in creating dataloaders","9a67f819":"# step 3 - fine tune the learner","ce8add99":"`fp16` conversion can help reduce the gpu memory requirement and may slightly reduce the accuracy. But it offers an option to change the architecture from resnet34(until version 6) to resnet50 along with decent batch size. If you get any memory errors reduce the batch size (`bs`) or change the architecture \n\n`mixup` helps in regularizing the model as it is forced to learn not just a single label from an image but a combination of labels\n\nThese concepts (`mixup` and `fp16`) are not discussed in lesson 1 or 2. I haven't used these concepts until version 6 of this notebook. So if you want barebones fastai implementation, have a look at version 6 or earlier version of this notebook","5492d934":"## add data sources","a53c6b34":"I wrote this notebook after I completed watching lesson 1 & 2, and reading about datablock and dataset API in the links mentioned below\n1. https:\/\/asvcode.github.io\/Blogs\/fastai\/augmentation\/image-augmentation\/2020\/03\/26\/Fastai2-Image-Augmentation.html\n2. https:\/\/towardsdatascience.com\/advanced-dataloaders-with-fastai2-ecea62a7d97e\n3. https:\/\/towardsdatascience.com\/working-with-3d-data-fastai2-5e2baa09037e\n\nSo this notebook is geared towards beginners of fastai API","986c9db0":"## Cleaner","fab92f33":"# step 1 - create dataloader","3e51ce96":"# step 0","a3f6a65e":"# Intended audience for this notebook","4f76aa56":"`Mixup` is added here instead of as option to `cnn_learner`. This is to restrict use of `Mixup` to learner training  ","566e3e31":"Add `~\/.torch` location to copy existing architectures to run the model"}}