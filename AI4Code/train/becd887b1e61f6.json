{"cell_type":{"13e4c08a":"code","2820fe72":"code","0dd39bdb":"code","6909d311":"code","5a8f3268":"code","43e4aeec":"code","1e6a6ec2":"code","163b09d3":"code","cafd000f":"code","ea9cf67d":"code","4ff9be7c":"code","da0acf4a":"code","40f57887":"code","2a7b6631":"code","191f31a0":"code","3f5aee35":"code","dec0d0b4":"code","d499ea45":"code","1a202338":"code","fbecc1d1":"code","1cfe8488":"code","5b34f102":"code","5fee8669":"code","3e24f21c":"code","8472d626":"code","4dd25d59":"code","6e84302e":"code","880e6ff5":"code","ca0a8b8a":"code","7f37bd41":"code","c0566da5":"code","c04253ab":"code","9fb0d117":"code","86cdd522":"code","847e2019":"code","484c5b18":"code","599481c6":"code","e817603c":"code","496ce9d3":"code","bc5b7837":"code","45beda96":"code","9343ac0a":"code","8275f88f":"code","0c48dace":"code","9a912610":"code","f46d8efe":"code","d0ca8a13":"code","2c879aa8":"code","55f532a7":"code","4921fc67":"code","0b2d5abd":"code","29f7cd7e":"code","4bebd5c9":"code","60bc2d46":"code","2fff4c1b":"code","01026530":"code","1e60400c":"code","8c6a4c2b":"code","175ae3dc":"code","0ffb727e":"code","a8402db4":"code","0f18d80f":"code","062b8369":"markdown","606aaf62":"markdown","56926cca":"markdown","93cea5d5":"markdown","9ff1d5b6":"markdown","7d9b3814":"markdown","45bf0384":"markdown","c1cd1c76":"markdown","80be93ea":"markdown","9ad24498":"markdown","4a5b1172":"markdown","46ad37bd":"markdown","16fa486d":"markdown","345492df":"markdown","22ab187f":"markdown","7609fc51":"markdown"},"source":{"13e4c08a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom scipy.stats import norm","2820fe72":"df= pd.read_csv('..\/input\/advertising-dataset\/advertising.csv')","0dd39bdb":"df.head()","6909d311":"df.info()","5a8f3268":"df.describe()","43e4aeec":"df[df.isna()].count()","1e6a6ec2":"def outlier(col): \n    l= len(df)\n    q1= df[col].quantile(0.25)\n    q3=df[col].quantile(0.75)\n    IQR= q3-q1\n    lower= q1-(IQR*1.5)\n    upper= q3+(IQR*1.5)\n    n= len(df.loc[np.where((df[col] > upper) | (df[col] < lower))])\n    perc= (n\/l)*100\n    print(f'{col}= {perc}')\n    print(n)","163b09d3":"for i in df.columns:\n  outlier(i)\n","cafd000f":"sns.pairplot(df)","ea9cf67d":"sns.heatmap(df.corr(), annot= True,linecolor='white',linewidths=.5)","4ff9be7c":"sns.distplot(df['Sales'],fit=norm)","da0acf4a":"x= df[['Newspaper','Radio','TV']]\ny= df['Sales']","40f57887":"from sklearn.model_selection import train_test_split \nx_train,x_test,y_train,y_test= train_test_split(x,y,test_size= 0.2,random_state= 101)","2a7b6631":"y_train","191f31a0":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression(fit_intercept= True)\nregressor.fit(x_train,y_train)","3f5aee35":"coeff_def= pd.DataFrame(regressor.coef_, x.columns, columns=['Coefficient'])\ncoeff_def","dec0d0b4":"regressor.intercept_","d499ea45":"y_pred= regressor.predict(x_train)\ny_pred","1a202338":"train_preddf= pd.DataFrame({'Actual': y_train, 'Predicted': y_pred,'Residuals':(y_train-y_pred)})","fbecc1d1":"train_preddf","1cfe8488":"residuals= y_train - y_pred","5b34f102":"sns.scatterplot(x= y_pred, y= residuals)\nplt.xlabel('Fitted')\nplt.ylabel('Residuals')","5fee8669":"sns.distplot(residuals,fit=norm)\nplt.xlabel('Residuals')","3e24f21c":"from scipy import stats\nstats.probplot(residuals, plot=plt)\nplt.show()","8472d626":"import statsmodels.api as sm","4dd25d59":"x_endog= sm.add_constant(x_train)\nx_endog1= sm.add_constant(x_test)","6e84302e":"res= sm.OLS(y_train,x_endog)\nres.fit()","880e6ff5":"res.fit().summary()","ca0a8b8a":"y_pred1 = regressor.predict(x_test)\n\nfrom sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred1))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred1))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred1)))","7f37bd41":"y_pred2 = res.fit().predict(x_endog)\n\nfrom sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_train, y_pred2))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_train, y_pred2))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_train, y_pred2)))","c0566da5":"TestResiduals=y_test - y_pred1\nstats.probplot(TestResiduals, plot=plt)\nplt.show()","c04253ab":"#generating interaction terms","9fb0d117":"from sklearn.preprocessing import PolynomialFeatures \nfrom statsmodels.regression import linear_model","86cdd522":"x_interaction = PolynomialFeatures(2,interaction_only= True,include_bias= False).fit_transform(x)","847e2019":"x.columns","484c5b18":"interaction_df= pd.DataFrame(x_interaction, columns= ['Newspaper', 'Radio', 'TV','Newspaper:Radio','Newspaper:TV','Radio:TV'] )","599481c6":"interaction_model = linear_model.OLS(y,interaction_df).fit()","e817603c":"interaction_model.pvalues[interaction_model.pvalues<0.05]","496ce9d3":"x_interactiontrain,x_interactiontest= train_test_split(interaction_df,test_size= 0.2,random_state= 101)","bc5b7837":"regressor.fit(x_interactiontrain,y_train)","45beda96":"coeff_def_interaction= pd.DataFrame(regressor.coef_, interaction_df.columns, columns=['Coefficient'])\ncoeff_def_interaction","9343ac0a":"y_pred_interaction= regressor.predict(x_interactiontrain)\ny_pred_interaction","8275f88f":"train_preddf_interaction= pd.DataFrame({'Actual': y_train, 'Predicted': y_pred_interaction,'Residuals':(y_train-y_pred_interaction)})\ntrain_preddf_interaction","0c48dace":"residuals_interaction= y_train-y_pred_interaction","9a912610":"sns.scatterplot(x= y_pred, y= residuals_interaction)\nplt.xlabel('Fitted')\nplt.ylabel('Residuals')","f46d8efe":"sns.distplot(residuals_interaction,fit=norm)\nplt.xlabel('Residuals')","d0ca8a13":"stats.probplot(residuals_interaction, plot=plt)\nplt.show()","2c879aa8":"x_interaction_endog= sm.add_constant(x_interactiontrain)\nx_interaction_endog1= sm.add_constant(x_interactiontest)","55f532a7":"res_interaction= sm.OLS(y_train,x_interaction_endog)\nres_interaction.fit().summary()","4921fc67":"y_pred2_interaction = regressor.predict(x_interactiontrain)\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_train, y_pred2_interaction))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_train, y_pred2_interaction))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_train, y_pred2_interaction)))","0b2d5abd":"stats.probplot(y_train-y_pred2_interaction, plot=plt)\nplt.show()","29f7cd7e":"y_pred1_interaction = regressor.predict(x_interactiontest)\n\nfrom sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred1_interaction))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred1_interaction))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred1_interaction)))","4bebd5c9":"stats.probplot(y_test-y_pred1_interaction, plot=plt)\nplt.show()","60bc2d46":"interaction_df1= interaction_df.drop(columns='Newspaper:Radio')","2fff4c1b":"interaction_model1 = linear_model.OLS(y,interaction_df1).fit()","01026530":"x_interactiontrain1,x_interactiontest1= train_test_split(interaction_df1,test_size= 0.2,random_state= 101)","1e60400c":"x_interaction_endog_wo= sm.add_constant(x_interactiontrain1)\nx_interaction_endog1_wo= sm.add_constant(x_interactiontest1)\nres_interaction1= sm.OLS(y_train,x_interaction_endog_wo)\nres_interaction1.fit().summary()","8c6a4c2b":"regressor.fit(x_interactiontrain1,y_train)","175ae3dc":"y_pred2_interaction1 = regressor.predict(x_interactiontrain1)\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_train, y_pred2_interaction1))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_train, y_pred2_interaction1))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_train, y_pred2_interaction1)))","0ffb727e":"stats.probplot(y_train-y_pred2_interaction1, plot=plt)\nplt.show()","a8402db4":"y_pred1_interaction1 = regressor.predict(x_interactiontest1)\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred1_interaction1))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred1_interaction1))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred1_interaction1)))","0f18d80f":"stats.probplot(y_test-y_pred1_interaction1, plot=plt)\nplt.show()","062b8369":"## Train the training sets into the linear regression model","606aaf62":"sign reversal not noticed thus, multicolinerarity not evident as of now","56926cca":"## Generating predicted values on x_train","93cea5d5":"## **Statistical Interaction Effect**","9ff1d5b6":"**Missing Values Count**\n","7d9b3814":"Introducing constant i.e. Beta0 or Intercept for the ols regression analysis","45bf0384":"## **Outlier Percentage**","c1cd1c76":"Calculating Residual value and plotting it against fitted :","80be93ea":"Note:\n\nThe Independent varibles are exhibiting colinearity (further check will be done with the help of pearson's correlation) with respect to the dependent variable thus qualifying this for regression model\n","9ad24498":"The Newspaper:Radio as per the above OLS regression result is insignificant at alpha=10%. Will see the performance of the model with and without it and decide its inclusion or exclusion.","4a5b1172":"Dividing the dataset into independent and dependent variables","46ad37bd":"setting beta0 :\n","16fa486d":"Creating test and train for dependent and independent variables ","345492df":"Without Newpaper:Radio","22ab187f":"With Newspaper:Radio","7609fc51":"x is the regressor and Beta is the coeff"}}