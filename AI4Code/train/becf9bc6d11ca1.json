{"cell_type":{"caaa099a":"code","98fb412f":"code","1d57e2c3":"code","640d4616":"code","f5d98201":"code","a2d3fddf":"code","08bb0060":"code","07dd4b1a":"code","e58662a8":"code","c592dcfd":"code","18d18340":"code","cab791aa":"code","aeeb786b":"code","dd86c7f0":"code","eaa3704e":"code","915cee2d":"code","0debffc9":"code","c662fcc6":"code","82260106":"code","8bc0a00d":"code","2a435734":"code","a4618997":"code","1531ae3a":"code","5fdb1910":"markdown","f940de84":"markdown","ef4866dc":"markdown","3c6ff7ee":"markdown","4ae495af":"markdown","4c7cca28":"markdown","80697522":"markdown","7920a6be":"markdown","1fd9c28d":"markdown","a888d9ef":"markdown","0548a01c":"markdown","13927ab5":"markdown","7c63a52d":"markdown","7d01f1a0":"markdown","d3b274d2":"markdown","6c5e09d5":"markdown","85c5f1c1":"markdown","58ae373a":"markdown","1ce9d39b":"markdown","48567c7f":"markdown","b78ea666":"markdown","19521680":"markdown","58aadd59":"markdown"},"source":{"caaa099a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport folium\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS\n\n# Read excel\ndf= pd.read_excel('..\/input\/immigration-to-canada-ibm-dataset\/Canada.xlsx',\n                        sheet_name=\"Canada by Citizenship\",\n                        skiprows=range(20),\n                        skipfooter=2)","98fb412f":"df.info()","1d57e2c3":"df.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)\ndf.rename(columns={'OdName':'Country', 'AreaName':'Continent', 'RegName':'Region'}, inplace=True)","640d4616":"df['Total'] = df.sum(axis=1)\n\n#Years that we will be using in this notebook\nyears=list(range(1980,2014))\n\n#Set the country name as index.\ndf.set_index('Country', inplace=True)\n\ndf.head()","f5d98201":"df_tot = pd.DataFrame(df[years].sum())\n\n#reset index\ndf_tot.reset_index(inplace=True)\n\n#rename columns\ndf_tot.columns = ['year', 'total']\n\ndf_tot.head()","a2d3fddf":"# generate scatter plot\nax = df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')\n\n# add title and label to axes\nplt.title('Total immigration to Canada from 1980 - 2013',size=18)\nplt.xlabel('Year', size=12)\nplt.ylabel('Number of Immigrants', size=12)\n\n# plot line of best fit\nx = df_tot['year']\nfit = np.polyfit(x, df_tot['total'], deg=1)\nplt.plot(x, fit[0] * x + fit[1], color='red')\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))\n\nplt.show()","08bb0060":"df_france = df.loc[['France'],years].transpose()\ndf_france.head()","07dd4b1a":"df_france.plot(kind='bar', figsize=(15, 8), color='#03b6fc')\n\nplt.xlabel('Year', size=12)\nplt.ylabel('Number of immigrants', size=12)\nplt.title('French immigrants to Canada from 1980 to 2013', size=18)\n\n# Annotate arrow\nplt.annotate('',                   # s: str. will leave it blank for no text\n             xy=(32, 6500),        # head of the arrow\n             xytext=(0, 2400),     # base of the arrow\n             xycoords='data',      # coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', lw=2)\n            )\n\nplt.show()","e58662a8":"df.sort_values('Total', ascending=False, inplace=True)\ndf_top5 = df[years].head(5).transpose()\ndf_top5.head(10)","c592dcfd":"df_top5.plot(kind='area', \n             alpha=0.25, # 0-1, default value a= 0.5\n             figsize=(20, 10),\n            )\n\nplt.title('Immigration Trend of Top 5 Countries', size=18)\nplt.ylabel('Number of Immigrants', size=12)\nplt.xlabel('Years', size=12)\n\nplt.show()","18d18340":"# Extract data from India and China (Top2)\ndf_CI = df.loc[['India','China'], years].transpose()\ndf_CI.reset_index(inplace=True)\ndf_CI.rename(columns={'index':'Year'},inplace=True)\ndf_CI.head()","cab791aa":"#Normalization of the data\nnorm_china = (df_CI['China'] - df_CI['China'].min()) \/ (df_CI['China'].max() - df_CI['China'].min())\nnorm_india = (df_CI['India'] - df_CI['India'].min()) \/ (df_CI['India'].max() - df_CI['India'].min())","aeeb786b":"# China\nax0 = df_CI.plot(kind='scatter',\n                    x='Year',\n                    y='China',\n                    figsize=(14, 8),\n                    alpha=0.5,                  # transparency\n                    color='orange',\n                    s=norm_china * 2000 + 10,  # pass in weights \n                    xlim=(1975, 2015)\n                   )\n\n# India\nax1 = df_CI.plot(kind='scatter',\n                    x='Year',\n                    y='India',\n                    alpha=0.5,\n                    color=\"purple\",\n                    s=norm_india * 2000 + 10,\n                    ax = ax0\n                   )\n\nax0.set_ylabel('Number of Immigrants', fontsize=12)\nax0.set_title('Immigration from China and India from 1980 - 2013', fontsize=18)\nax0.legend(['China', 'India'], loc='upper left', fontsize=12)","dd86c7f0":"df_top10 = df.loc[:,years].head(10)\ndf_top10.head(5)","eaa3704e":"years_80s = list(range(1980, 1990)) \nyears_90s = list(range(1990, 2000)) \nyears_00s = list(range(2000, 2010)) \n\n# slice the original dataframe df_can to create a series for each decade\ndf_80s = df_top10.loc[:, years_80s].sum(axis=1) \ndf_90s = df_top10.loc[:, years_90s].sum(axis=1) \ndf_00s = df_top10.loc[:, years_00s].sum(axis=1)\n\n# merge the three series into a new data frame\nnew_df = pd.DataFrame({'1980s': df_80s, '1990s': df_90s, '2000s':df_00s}) \n# display dataframe\nnew_df.head()","915cee2d":"new_df.describe()","0debffc9":"color_list=['#c8d5a0','#922e74','#b877af','#e2b5de','#d0c9ca','#7B4B94','#7D82B8','#B7E3CC','#C4FFB2','#D6F7A3']\n\nnew_df.transpose().plot(kind='barh', figsize=(15, 10), color=color_list)\n\nplt.xlabel('Year', size=12)\nplt.ylabel('Number of immigrants', size=12)\nplt.title('Immigration from top 15 countries for decades 80s, 90s and 2000s', size=18)","c662fcc6":"fig = plt.figure(1, figsize=(12,8))\n\nbox = plt.boxplot(new_df.transpose(), patch_artist=True)\n\n# fill with colors\ncolors = ['#c8d5a0','#922e74','#b877af']\n\nfor patch, color in zip(box['boxes'], colors):\n    patch.set_facecolor(color)     \n          \nplt.title('Immigration from top 15 countries for decades 80s, 90s and 2000s', size=18)\nplt.ylabel('Number of Immigrants', size=12)\nplt.xlabel('Decades', size=12)\nplt.xticks([1, 2, 3], ['1980s','1990s','2000s'])\nplt.show()","82260106":"world_geo = '..\/input\/world-countries\/world-countries.json'","8bc0a00d":"# reset the index to select the countries as column\ndf.reset_index(inplace=True)\n\nworld_map = folium.Map(location=[0,0],zoom_start=2)\n\n# generate choropleth map using the total immigration of each country to Canada from 1980 to 2013\nworld_map.choropleth(\n    geo_data=world_geo,\n    data=df,\n    columns=['Country', 'Total'],\n    key_on='feature.properties.name',\n    fill_color='YlOrRd',\n    fill_opacity=0.7, \n    line_opacity=0.2,\n    legend_name='Immigration to Canada'\n)\n\n# display map\nworld_map","2a435734":"mapleLeaf_mask = np.array(Image.open('..\/input\/resource\/maple_leaf.jpeg'))\nfig = plt.figure()\nfig.set_figwidth(7) # set width\nfig.set_figheight(9) # set height\n\nplt.imshow(mapleLeaf_mask, cmap=plt.cm.gray, interpolation='bilinear')\nplt.axis('off')\nplt.show()","a4618997":"total_immigration = df['Total'].sum()\n\ndf.set_index('Country', inplace=True)\n\nmax_words = 1000\nword_string = ''\nfor country in df.index.values:\n    # check if country's name is a single-word name\n    if len(country.split(' ')) == 1:\n        repeat_num_times = int(df.loc[country, 'Total']\/float(total_immigration)*max_words)\n        word_string = word_string + ((country + ' ') * repeat_num_times)","1531ae3a":"# instantiate a word cloud object\ncanada_wc = WordCloud(background_color='white', mask=mapleLeaf_mask)\n\n# generate the word cloud\ncanada_wc.generate(word_string)\n\n# display the word cloud\nfig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\nplt.imshow(canada_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","5fdb1910":"## Word Cloud - Maple Leaf <a id='ml_word_cloud'><\/a>","f940de84":"## Exploratory Data Analysis <a id=\"exploratory_da\"><\/a>","ef4866dc":"### Total Immigration in Canada<a id='total_immigration'><\/a>","3c6ff7ee":"As we can see, there are no \"null\" values in the dataset.","4ae495af":"### Immigration trend of Top 2 : China & India<a id='immigration_ci'><\/a>","4c7cca28":"We add a 'Total' column in order to sum up the total immigrants by country over the entire period 1980 - 2013 :","80697522":"## Data Wrangling<a id=\"data_wrangling\"><\/a>\n### Identify missing values<a id='missing_v'><\/a>","7920a6be":"### Immigration trend of Top 10 countries by decades<a id='immigration_decades'><\/a>","1fd9c28d":"We can do some geospatial analysis using folium library. We first need to download geo_json file :","a888d9ef":"We create a list of all years in decades : 80's, 90's, and 00's","0548a01c":"We can now plot the WordCloud inside the mapple leaf mask :","13927ab5":"### Immigration to Canada from France <a id='immigration_france'><\/a>\n\n<p>As an example, we will plot the immigration from France to Canada during 1980-2013<\/p> ","7c63a52d":"<p>The idea of this last section is to generate a word cloud showing the top immigration countries and shape this word cloud according to a maple leaf mask. <br>\nTo do so, we use `word_cloud` package.<\/p> \n<p> We first have to generate our mask :<\/p>","7d01f1a0":"<p>We now have to generate a sample text data from our immigration dataset.<\/p>\n<p>For simplicity, we can use countries with single-word names, and duplicate each country's name based on how much they contribute to the total immigration :<\/p>","d3b274d2":"We create dataframe with the sum of immigration over all the countries :\n","6c5e09d5":"### Drop unnecessary data<a id='drop_data'><\/a>\n<p>We can now clean the dataset : we remove some unnecessary columns and rename some others.<\/p>","85c5f1c1":"We can now generate the scatter plot :","58ae373a":"#### Bubble plot\n<p>A bubble chart is a type of chart that displays three dimensions of data. Each entity with its triplet (v1, v2, v3) of associated data is plotted as a disk that expresses two of the vi values through the disk's xy location and the third through its size (https:\/\/en.wikipedia.org\/wiki\/Bubble_chart).<\/p>\n<p>The weight of the bubble is determined by the third variable 'v3'. <br>\nIn our case, we normalize the data pertaining to China and India using the formula : <\/p>\n $$ X' = \\frac{X-X_{min}}{X_{max}-X_{min}} $$","1ce9d39b":"<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n\n1. [Data Wrangling](#data_wrangling)\n    1. [Identify missing values](#missing_v)\n    2. [Drop unnecessary data](#drop_data)\n2. [Exploratory Data Analysis](#exploratory_da)\n    1. [Total Immigration Canada](#total_immigration)\n    2. [Immigration to Canada from France](#immigration_france)\n    3. [Immigration trend of Top 5 countries](#immigration_top5)\n    4. [Immigration trend of Top 2 : China & India](#immigration_ci)\n    5. [Immigration trend of Top 10 countries by decades](#immigration_decades)\n3. [Geospatial Analysis - Choropleth Map](#geospatial_analysis)\n4. [Word Cloud - Maple Leaf](#ml_word_cloud)\n<hr>","48567c7f":"Get the top 10 countries","b78ea666":"### Immigration trend of Top 5 countries<a id='immigration_top5'><\/a>","19521680":"<h1 align=center>Immigration to Canada from 1980 to 2013<\/h1>","58aadd59":"## Geospatial Analysis - Choropleth Map<a id='geospatial_analysis'><\/a>"}}