{"cell_type":{"1b2d322d":"code","cf4ef079":"code","7b077e0b":"code","7002e986":"code","e0953908":"code","3c087fda":"code","f235defa":"code","a339ca99":"code","aeebfa47":"code","26b7ce15":"code","11592caa":"code","34f3d432":"code","36ac99d5":"code","0e52ea7a":"code","9cb5f624":"code","2b7f806c":"code","dbe0c4f7":"code","25d5a52a":"code","23abd442":"code","5b79f319":"code","f67b9727":"code","7bc51fa2":"markdown","ae0dfd4f":"markdown","14c14245":"markdown","1be391ea":"markdown","0f98727f":"markdown","c54296f2":"markdown","09691800":"markdown","41c13ed0":"markdown","97f7d29d":"markdown","9209672c":"markdown","741887e5":"markdown","7c484b0d":"markdown","2a546987":"markdown","28e85f51":"markdown","df85a5cd":"markdown","099c3de3":"markdown","998f2951":"markdown","32bc0e63":"markdown"},"source":{"1b2d322d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import probplot\nfrom itertools import combinations\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Lasso, ElasticNet, LinearRegression\nimport sys\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom warnings import filterwarnings\n\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 100)\nfilterwarnings('ignore')\n\ntrain_set=pd.read_csv(r'..\/input\/train.csv')\ntest_set=pd.read_csv(r'..\/input\/test.csv')\n\ntrain_test = pd.concat([train_set,test_set],axis=0).reset_index(drop=True)\ntrain_test = train_test.drop('Id',axis=1)","cf4ef079":"missing = (train_test.isnull().sum()[train_test.isnull().sum()>0] \/ len(train_test)).sort_values(ascending=False)\nplt.figure(figsize=(15,10))\nsns.barplot(x=missing[missing>0].index, y=missing[missing>0].values)\nplt.xticks(rotation=90)\nplt.grid(b=True, color='lightgrey')","7b077e0b":"EasyVariables = ['MiscFeature', 'MasVnrType', 'GarageType']\n\nfor var in EasyVariables:\n    train_test[var] = train_test[var].fillna('DNE')","7002e986":"train_test = train_test.replace({'GarageQual':{'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1,np.NaN:0},\n                                 'GarageCond':{'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1,np.NaN:0},\n                                 'GarageFinish':{'Fin':3,'RFn':2,'Unf':1,np.NaN:0},\n                                 'BsmtQual':{'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1},\n                                 'BsmtCond':{'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1},\n                                 'BsmtExposure':{'Gd':4,'Av':3, 'Mn':2,'No':1,},\n                                 'BsmtFinType1':{'GLQ':6,'ALQ':5,'BLQ':4,'Rec':3,'LwQ':2,'Unf':1},\n                                 'BsmtFinType2':{'GLQ':6,'ALQ':5,'BLQ':4, 'Rec':3,'LwQ':2, 'Unf':1},\n                                 'KitchenQual':{'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1},\n                                 'PoolQC':{'Ex':4,'Gd':3,'TA':2,'Fa':1,np.NaN:0},\n                                 'Street':{'Pave':1,'Grvl':0},\n                                 'Alley':{np.NaN:0,'Grvl':1,'Pave':2},\n                                 'Fence':{'GdPrv':4,'MnPrv':3,'GdWo':2,'MnWw':1,np.NaN:0},\n                                 'Utilities':{'AllPub':4,'NoSewr':3,'NoSeWa':2,'ELO':1},\n                                 'ExterQual':{'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1},\n                                 'ExterCond':{'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1},\n                                 'HeatingQC':{'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1},\n                                 'CentralAir':{'Y':1,'N':0},\n                                 'PavedDrive':{'Y':3,'N':2,'P':1},\n                                 'FireplaceQu':{'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1}})\n\n\n\n\n","e0953908":"FillWith0 = ['BsmtFinType2', 'BsmtCond', 'BsmtQual', 'BsmtExposure', 'BsmtFinType1','BsmtFinSF1','BsmtFinSF2','TotalBsmtSF',\n             'BsmtUnfSF','BsmtHalfBath','BsmtFullBath', 'FireplaceQu','GarageYrBlt','MasVnrArea']\n\nfor var in FillWith0:\n    train_test[var] = train_test[var].fillna(0)\n","3c087fda":"train_test.Utilities = train_test.Utilities.fillna(4)\ntrain_test.Functional = train_test.Functional.fillna('Typ')\ntrain_test.SaleType = train_test.SaleType.fillna('WD')\ntrain_test.KitchenQual = train_test.KitchenQual.fillna(3)\ntrain_test.Electrical = train_test.Electrical.fillna('SBrkr')\ntrain_test.MSZoning = train_test.MSZoning.fillna('RL')\n\ntrain_test[['Exterior1st','Exterior2nd']] = train_test[['Exterior1st','Exterior2nd']].fillna('VinylSd')\n","f235defa":"train_test = train_test.replace({'MSSubClass':{\n        20:'1-STORY 1946 & NEWER ALL STYLES',\n        30:'1-STORY 1945 & OLDER',\n        40:'1-STORY W\/FINISHED ATTIC ALL AGES',\n        45:'1-1\/2 STORY - UNFINISHED ALL AGES',\n        50:'1-1\/2 STORY FINISHED ALL AGES',\n        60:'2-STORY 1946 & NEWER',\n        70:'2-STORY 1945 & OLDER',\n        75:'2-1\/2 STORY ALL AGES',\n        80:'SPLIT OR MULTI-LEVEL',\n        85:'SPLIT FOYER',\n        90:'DUPLEX - ALL STYLES AND AGES',\n       120:'1-STORY PUD (Planned Unit Development) - 1946 & NEWER',\n       150:'1-1\/2 STORY PUD - ALL AGES',\n       160:'2-STORY PUD - 1946 & NEWER',\n       180:'PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER',\n       190:'2 FAMILY CONVERSION - ALL STYLES AND AGES'}})\n","a339ca99":"# POOL AREA > 0 \ntrain_test.loc[[2420,2503,2599],'PoolQC'] = 3\n\n# GARAGE AREA > 0\ntrain_test.loc[2576,'GarageYrBlt'] = 1923\ntrain_test.loc[2126,'GarageYrBlt'] = 1910\ntrain_test.loc[[2576,2126],'GarageFinish'] = 1\ntrain_test.loc[[2576,2126],'GarageQual'] = 3\ntrain_test.loc[[2576,2126],'GarageCond'] = 3\ntrain_test.loc[2576, 'GarageCars'] = 1\ntrain_test.loc[2576, 'GarageArea'] = 288\n\n\n# Whole garage data > 0\ntrain_test.loc[2592,'GarageYrBlt'] = 2007\n\n# Basement data > 0\ntrain_test.loc[[2040, 2524, 2185, 2040],'BsmtCond'] = 3\ntrain_test.loc[[2348,1487,948],'BsmtExposure'] = 3\ntrain_test.loc[[2217, 2218],'BsmtQual'] = 3\ntrain_test.loc[2284,'BsmtFinSF1'] = 638\ntrain_test.loc[2284,'BsmtFinSF2'] = 0\n\n# Training set so we're dropping (BasementFinType2=0)\ntrain_test = train_test.drop(332, axis=0)\n# train_test['BsmtFinType2'].loc[332] = 1\n\n# Also training set (MiscValue=0, but it does have MistFeature)\ntrain_test = train_test.drop([1200, 873],axis=0)","aeebfa47":"fig, axarr = plt.subplots(2,2,figsize=(15,15))\nsns.scatterplot(x='OverallQual',y='SalePrice',data=train_set,ax=axarr[0][0]).grid(b=True, color='lightgrey')\nsns.scatterplot(x='GarageArea',y='SalePrice',data=train_set,ax=axarr[0][1]).grid(b=True, color='lightgrey')\nsns.scatterplot(x='YearRemodAdd',y='SalePrice',data=train_set,ax=axarr[1][0]).grid(b=True, color='lightgrey')\nsns.scatterplot(x='TotRmsAbvGrd',y='SalePrice',data=train_set,ax=axarr[1][1]).grid(b=True, color='lightgrey')\n","26b7ce15":"index = train_test[(train_test.OverallQual==10) & (train_test.SalePrice<200000)].index\ntrain_test = train_test.drop(index,axis=0)\n\nindex = train_test[(train_test.GarageArea>1200) & (train_test.SalePrice<300000)].index\ntrain_test = train_test.drop(index, axis=0)\n\nindex = train_test[(train_test.YearRemodAdd<1970) & (train_test.SalePrice>300000)].index\ntrain_test = train_test.drop(index,axis=0)\n\nindex = train_test[(train_test['TotRmsAbvGrd']==14)].index\ntrain_test = train_test.drop(index,axis=0)","11592caa":"train_test1 = train_test.copy()\ntrain_test1 = pd.get_dummies(train_test1)\n\n\ntrainX = train_test1[train_test1.LotFrontage.isnull()==False].drop(['SalePrice','LotFrontage'],axis=1)\ntestX = train_test[train_test.LotFrontage.isnull()==True].drop(['SalePrice','LotFrontage'],axis=1)\ntrainY = train_test1.LotFrontage[train_test1.LotFrontage.isnull()==False]\n\ntrainx, testx, trainy, testy = train_test_split(trainX, np.log(trainY), test_size=0.3, random_state=0)\nmodel = Lasso(alpha=0.0009)\nmodel.fit(trainx,trainy)\nPredictions = model.predict(testx)\nMSE = np.sqrt(mean_squared_error(np.exp(testy),np.exp(Predictions)))\nprint('LotFrontage MSE:',MSE,'\\nMSE \/ LotFrontage mean ratio:', MSE\/(np.exp(testy.mean())))","34f3d432":"trainX = train_test1[train_test1.LotFrontage.isnull()==False].drop(['SalePrice','LotFrontage'],axis=1)\ntestX = train_test1[train_test1.LotFrontage.isnull()==True].drop(['SalePrice','LotFrontage'],axis=1)\ntrainY = train_test1.LotFrontage[train_test1.LotFrontage.isnull()==False]\n\n\nmodel = Lasso(alpha=0.0009)\nmodel.fit(trainx,trainy)\nPredictions = model.predict(testX)\ntrain_test.loc[train_test.LotFrontage.isnull()==True, 'LotFrontage'] = Predictions","36ac99d5":"fig, axarr = plt.subplots(1,2,figsize=(17,7))\nsns.distplot(train_set['1stFlrSF'],ax=axarr[0])\nprobplot(train_set.SalePrice, plot=plt)","0e52ea7a":"train_test['t'] = train_test.YrSold.map({2006:1, 2007:2, 2008:3, 2009:4, 2010:5})\ntrain_test.t = train_test.MoSold * train_test.t\ntrain_test = train_test.replace({'MoSold':{1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:\n                                           'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}})\n\ntrain_test['GarageQualityOverall'] = train_test.GarageQual + train_test.GarageCond\ntrain_test['HasPool'] = train_test.PoolQC.map(lambda x: 1 if x>0 else 0)\ntrain_test['HasGarage'] = train_test.GarageFinish.map(lambda x: 1 if x>0 else 0)\ntrain_test['HasFireplace'] = train_test.Fireplaces.map(lambda x: 1 if x>0 else 0)\ntrain_test['HasBasement'] = train_test.TotalBsmtSF.map(lambda x: 1 if x>0 else 0)\ntrain_test['AllStoriesFinished'] = train_test.HouseStyle.map(lambda x: 0 if (x=='1.5Unf' or x=='2.5Unf') else 1)\ntrain_test['CanHold2Cars'] = train_test.GarageCars.map(lambda x: 1 if x>=2 else 0)\ntrain_test['AfterCrisis'] = train_test.YrSold.map(lambda x: 1 if x>=2008 else 0) \n\n\nclosed = train_test['EnclosedPorch'] + train_test['3SsnPorch'] + train_test['ScreenPorch'] \nopened = train_test['WoodDeckSF'] + train_test['OpenPorchSF']\ntrain_test['PorchArea'] = closed + opened\ntrain_test['HasPorch'] = train_test['PorchArea'].map(lambda x: 1 if x>0 else 0)\ntrain_test['PorchClosed'] = closed.map(lambda x: 1 if x > 0 else 0)\n\nIsFresh = train_test[(train_test.YearRemodAdd == train_test.YrSold)].index\ntrain_test['IsFresh'] = train_test.index.map(lambda x: 1 if x in IsFresh else 0)\n\ntrain_test['BsmtFinType'] = train_test.BsmtFinType2 + train_test.BsmtFinType1\ntrain_test['BsmtUnfinPercent'] = train_test.BsmtUnfSF \/ train_test.TotalBsmtSF\ntrain_test.loc[train_test['BsmtUnfinPercent'].isnull(),'BsmtUnfinPercent'] = 0\ntrain_test['TotalHouseSF'] = train_test.TotalBsmtSF + train_test.GrLivArea\n\ntrain_test['AmtOfStories'] = 0\ntrain_test.loc[train_test.HouseStyle=='1Story','AmtOfStories'] = 1\ntrain_test.loc[(train_test.HouseStyle=='1.5Fin') | (train_test.HouseStyle=='1.5Unf'), 'AmtOfStories'] = 1.5\ntrain_test.loc[(train_test.HouseStyle=='2.5Fin') | (train_test.HouseStyle=='2.5Unf'), 'AmtOfStories'] = 2.5\ntrain_test.loc[(train_test.HouseStyle=='2Story'), 'AmtOfStories'] = 2\n\ntrain_test['OverallQuality'] = train_test.OverallQual + train_test.OverallCond\ntrain_test['BasementQuality'] = train_test.BsmtCond + train_test.BsmtExposure\ntrain_test['Bathrooms'] = train_test.BsmtFullBath + train_test.BsmtHalfBath\/2 + train_test.FullBath + train_test.HalfBath\/2\ntrain_test['ExteriorQuality'] = train_test.ExterQual + train_test.ExterCond\ntrain_test['Fireplaces_times_FireplaceQu'] = train_test.Fireplaces * train_test.FireplaceQu\ntrain_test['BsmtFinSF'] = train_test.BsmtFinSF1 + train_test.BsmtFinSF2\ntrain_test['YearBltandYearRemodAdd'] = train_test.YearBuilt + train_test.YearRemodAdd\n\ntrain_test['GarageTypeGrades'] = train_test.GarageType.replace({'2Types':6,'Attchd':5,'Basment':4,'BuiltIn':3,'CarPort':2,'Detchd':1,'No_garage':0})\n\nSeason = ['Mar', 'Apr', 'May', 'Jun']\ntrain_test['SeasonForBuing'] = train_test.MoSold.map(lambda x: 1 if x in Season else 0)\n\n\ntrain_test = train_test.drop('Utilities',axis=1)","9cb5f624":"NeighborhoodsBinned = train_test[:1459][['Neighborhood','SalePrice']].groupby('Neighborhood').mean().sort_values(by='SalePrice')\n\nplt.figure(figsize=(15,10))\nsns.barplot(x=NeighborhoodsBinned.index, y=NeighborhoodsBinned.SalePrice)\nplt.xticks(rotation=90)","2b7f806c":"train_test['RichNeighborhood'] = np.NaN\nones = NeighborhoodsBinned[0:3].index\ntwos = NeighborhoodsBinned[3:12].index\nthrees = NeighborhoodsBinned[12:19].index\nfours = NeighborhoodsBinned[19:22].index\nfives = NeighborhoodsBinned[22:].index\n\ni=0\nfor variable in [ones, twos, threes, fours, fives]:\n    i += 1\n    for neighborhood in variable:\n        train_test.loc[train_test.Neighborhood==neighborhood,'RichNeighborhood'] = i\n        \ntrain_test = train_test.drop('Neighborhood',axis=1)","dbe0c4f7":"train_test.Exterior1st = train_test.Exterior1st.map(lambda x: 'Other' if (x!='CemntBd' and x!='VinylSd') else x)\ntrain_test.Exterior2nd = train_test.Exterior2nd.map(lambda x: 'Other' if (x!='CemntBd' and x!='VinylSd') else x)\ntrain_test.Functional = train_test.Functional.map(lambda x: 'Other' if x!='Typ' else x)\ntrain_test.GarageYrBlt = train_test.GarageYrBlt.map(lambda x: 'DNE' if x==0 else 'Classic' if x<=1935 else 'Modern' if x>=1995 else 'Mid-age')\ntrain_test.SaleType = train_test.SaleType.map(lambda x: 'Other' if x!='WD' else x)\ntrain_test.SaleCondition = train_test.SaleCondition.map(lambda x: 'Other' if (x!='Normal' and x!='Partial') else x)\ntrain_test.Condition1 = train_test.Condition1.map(lambda x: x if x in ['Norm', 'Feedr', 'Artery'] else 'Other')\ntrain_test.RoofMatl = train_test.RoofMatl.map(lambda x: 'Other' if x!='CompShg' else x)\n\ntrain_test = train_test.replace({'BldgType':{'Duplex':'Other', 'Twnhs':'Other', '2fmCon':'Other'},\n                                'Electrical':{'FuseF':'Other','FuseP':'Other','Mix':'Other'},\n                                 'Foundation':{'Slab':'Other','Stone':'Other','Wood':'Other'},\n                                 'Heating':{'Grav':'Other','Wall':'Other','OthW':'Other','Floor':'Other'},\n                                 'HouseStyle':{'2.5Unf':'Other','1.5Unf':'Other','2.5Fin':'Other'},\n                                 'MSSubClass':{'1-1\/2 STORY PUD - ALL AGES':'Other','1-STORY W\/FINISHED ATTIC ALL AGES':'Other'\\\n                                 ,'PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER':'Other','1-1\/2 STORY - UNFINISHED ALL AGES':'Other'\\\n                                 ,'2-1\/2 STORY ALL AGES':'Other'},\n                                 'MSZoning':{'RH':'Other','C (all)':'Other'},\n                                 'MiscFeature':{'Gar2':'Other','TenC':'Other'}})","25d5a52a":"for var in ['1stFlrSF','BsmtFinSF2','MasVnrArea', 'BsmtFinSF', 'TotalBsmtSF', 'TotalHouseSF']:\n    train_test['LOG{}'.format(var)] = np.log(1+train_test[var]) \n\ntrain_test['LOGYearBltandYearRemodAdd'] = train_test['YearBltandYearRemodAdd']**2\n\n\ntrain_test = train_test.drop(['1stFlrSF','BsmtFinSF','TotalBsmtSF'],axis=1)","23abd442":"train_test.SalePrice = np.log(train_test.SalePrice)\n\ntrain_test = train_test.drop(['GarageQual','GarageCond','EnclosedPorch','3SsnPorch','OpenPorchSF','BsmtFinType2','BsmtFinType1','BsmtUnfSF','GrLivArea',\n                               'BsmtCond','BsmtExposure','BsmtFullBath','BsmtHalfBath','FullBath','ExterCond'],axis=1)","5b79f319":"y = (train_test.SalePrice[train_test.SalePrice.isnull()==False])\ntrain_test = pd.get_dummies(train_test)\nX = train_test[train_test.SalePrice.isnull()==False].drop('SalePrice',axis=1)\ntestX = train_test[train_test.SalePrice.isnull()==True].drop('SalePrice',axis=1)\n\nmodel = Lasso(alpha = 0.0008)\nmodel.fit(X,y)\npredictions = model.predict(testX)\n\nmodel = ElasticNet(alpha = 0.0008)\nmodel.fit(X,y)\npredictions2 = model.predict(testX)\n\nmodel = XGBRegressor(n_estimators=4500)\nmodel.fit(X,y)\npredictions3 = model.predict(testX)\n\npredictions = (predictions + predictions2 + predictions2 + predictions3)\/4\n\nFinal = pd.DataFrame({'Id':range(1461,2920),'SalePrice': np.exp(predictions)}).set_index('Id')\nFinal.to_csv(r'Blended.csv')","f67b9727":"trainX, testX, trainY, testY = train_test_split(X, y, test_size=0.3, random_state=1)\nmodel = Lasso(alpha = 0.0008)\nmodel.fit(X,y)\npredictions = model.predict(testX)\n\nmodel = ElasticNet(alpha = 0.0008)\nmodel.fit(X,y)\npredictions2 = model.predict(testX)\n\nmodel = XGBRegressor(n_estimators=4500)\nmodel.fit(X,y)\npredictions3 = model.predict(testX)\n\npredictions = (predictions + predictions2 + predictions2 + predictions3)\/4\n\nplt.figure(figsize=(10,10))\nResults = pd.DataFrame({'Actual':np.exp(testY),'Predicted':np.exp(predictions)})\nsns.regplot(x='Predicted', y='Actual', data=Results).grid(b=True,color='lightgrey')","7bc51fa2":"## Lot Frontage missing values\n\nIn order to replace missing values in *LotFrontage*, I decided to use Lasso model where Frontage is response variable and train set contains all other variables besides *SalePrice*.","ae0dfd4f":"Now I am going to add some logarithms and squares into the dataset to reduce its skewness. Amount of skewed variable is much greater than you can see below, but transformation of those specific variables resulted for me in better score, while other transformations affected negatively model. Also, I decided to drop few variables which appeared to negatively influence final score when transformation happend.","14c14245":"## Dealing with missing values \/ variables scale correction \n\nBefore doing any shenanigans we need to deal with issues which already exist on provided dataset. Some of the values in the dataset are missing because of nature of variable, but some of them may also be missing for other reasons - there things are getting a bit trickier and our role is to determine which value will fit the best. Another problem with the current state of the dataset is form of ordinal and nominal variables - some ordinal variables are encoded like nominal, but also some of the nominal variables are presented as ordinal. At this stage of data preparation, we are going to deal with all of those issues.","1be391ea":"## Creating model\nI decided to blend together results of three separate models - Lasso, ElasticNet and XGBoost while giving ElasticNet doubled weight on overall results. Before creating model I decided to delete some variables which have negative influence on overall score. There was no specific to detect them - only trial and error.\n\nKeep in mind, that in theory it is necessary to standardize all features before creating Lasso model, but I received better results while keeping variables as they are.","0f98727f":"Some houses are missing information about their specification. Here, we are going to replace *Null* values with the most common values in each variable.","c54296f2":"As you may see on the chart above, we have 4 variables in which missing values ratio is higher than 80%. Fortunately, we do not have to throw them out, because it is connected with the nature of this dataset. According to the instructions provided in competition files, some variables receive Null value when specific feature does not occur. So let's first take care of those variables.","09691800":"## Feature engineering\nAt this stage, we will try to create some additional variables which may improve our model and reduce skewnesses.\n\nAs you may see on plots below, *SalePrice* is skewed into right, which means, that most of the values are smaller than mean value. Most of machine learning models are able to perform much better while response variable is closer to normal distribution, so we will keep that in mind and transform it just before creating final model.","41c13ed0":"In this section we want to represent all ordinal variables in proper format. After this operation, we're also going to imput 0 in all places, where specific amenity does not appear.","97f7d29d":"In next step I am going to merge categories which do not have too much observations. Obviously this is very subjective and someone while having variable with three categories which have respectively 1000, 50 and 20 observations may want to merge two smallest categories, but someone else may want to leave it as it is.","9209672c":"When detecting outliers I did not delete those observations which fall far away from the rest of the observations, but follows the trend. \n\nAt this stage we are deleting only 8 outliers. I also tried to experiment with deleting other observations, but from those which I checked, deleting those eight observations worked best for me.","741887e5":"## Introduction\n\nIn this kernel I try to elaborate about all the things which lead me to achieving this score. I try to cover every step to make sure that no one leaves this kernel without understanding my reasoning. At the end, I am going to summarize the whole thing by explaining what could have been done better as well as suggest some additional ideas which could be implemented to successfully improve current score.","7c484b0d":"## Final thoughts\nThere are a couple of things which may or may not improve the model from current state:\n\n1. Conducting more sophisticated outlier detection - from what I know, some other kernel creators are using Z-Score for univariate outliers detection and residuals. From what I have seen so far, deleting just few outliers may drastically improve results\n2. As I said before, connecting categories is very subjective - it is probably possible to improve the score by changing the way categories are connected\n3. Feature selection may be done better (for example by using Random Forest)\n4. I did not spend too much time with hyperparameters, so boosting them may also help\n5. As we may see on chart below, observation with actual value higher than 300000 seems to have worse prediction results than the rest of them. Some kind of improving prediction results of those observations (eg. dividing into two separate models) may be helpful","2a546987":"Last variable which has missing values is LotFrontage, but we will deal with it after deleting with outliers.","28e85f51":"Now, I will try to explain what idea stands behind creating each variable. Obviously, the fact that we are adding variable into the dataset does not mean that we will receive better results. Some of them may have positive influence on a model while others do the opposite. It is our role to determine whether specific feature helps or not. While preparing the dataset I decided to implement following features:\n\n* *t* - tells when the transaction was done\n* *GarageQualityOverall* - it is not specified what is the difference between quality and condition, so I decided to merge those two variables together to receive an overall score for garage. The same logic applies to *OverallQuality*, *BasementQuality* and *ExteriorQuality*\n* *AllStoriesFinished* - if a story is not finished, it should have negative influence on house's value\n* *CanHold2Cars* - if we will assume that typical family in Ames have two cars, then value 2 can be threshold when reached can significantly increase property value\n* *AfterCrysis* - properties sold and after 2007 should have smaller price than those sold before 2008\n* *IsFresh* - newly refurbished houses probably have higher prices than the others\n* *Fireplaces_times_FireplaceQu* - multiplying these two variables result in overall score for all fireplaces\n* *YearBltandYearRemodAdd* - the higher sum of *YearBlt* and *YearRemodAdd* is, the higher value of property should be\n* *SeasonForBuing* - according to some external sources, the best months to buy property are March, April, May, June\n* *RichNeighborhood* - I decided to subjectively bin Neighborhoods, because their individual influence of the property being in each neighborhood seemed to be too low to change SalePrice significantly. Scale of measurement is ordinal from 1 to 5 where by 1 we denote poorest neighborhoods and by 5 the richest ones\n\nThe rest of the variables seems to be self explanatory","df85a5cd":"## Outlier detection\n\nIn this section we will try to eliminate every house which may affect negatively results of modeling. Also, we will try to detect some contradictions between variables (eg. GarageArea equal to zero when every other variable shows that house has a garage). While dealing with outliers we will focus on bivariate visual detection and we focus only on couple of the most important of them. \n\nWhen preparing this kernel, I tried to create linear models in order to detect outliers both visually and by deleting them via Z-Score on residuals, but both methods failed for me.\n\nFirstly, we will try to detect contradictions in the dataset. Unfortunately, almost all of them appears in test data, so instead of deleting an observation, we need to guess whether specific thing is in a house or not.","099c3de3":"As you may see on the chart above, mean values of *SalePrice* in each neighborhood are kinda grouping together. First three have similar value to each other, next 9 of them also have similar means and so on. After each interval of similar means there is a big jump in mean values. Those jumps will determine the limits of each interval. ","998f2951":"As I mentioned earlier, we have the variable which is represented in format known from ordinal variables, but it appears to be nominal, so in this place we are going to replace all number values with nominal values accordingly.","32bc0e63":"As you may see above, LotFrontage predictions deviate from real values by 14 units which is around 21% of its mean value. This value seems to be good enough, especially, that probably this feature is not very significant in prediction model."}}