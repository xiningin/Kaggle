{"cell_type":{"7a2e7a55":"code","000aa3bd":"code","b062c0d8":"code","c371a760":"code","87f093b9":"code","36daf5b8":"code","2e2c206b":"code","d5a46182":"code","f5d6c5f0":"code","eb7e0908":"code","082c1bbc":"code","2102df0f":"code","b8c04af9":"code","dc6bf0d6":"code","b7b301d9":"code","7b9696c7":"code","f5b65c2a":"code","6489dfc9":"code","a3b382c8":"code","2a9092d3":"markdown","330cc5c0":"markdown","d37a95a7":"markdown","770ad7d8":"markdown","c03d4cd4":"markdown","2658b944":"markdown"},"source":{"7a2e7a55":"import numpy as np\nimport pandas as pd\nimport xgboost as xgb\n\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD","000aa3bd":"INPUT_PATH = \"\/kaggle\/input\/google-quest-challenge\/\"","b062c0d8":"train = pd.read_csv(INPUT_PATH + \"train.csv\")\ntest = pd.read_csv(INPUT_PATH + \"test.csv\")\nsample_submission = pd.read_csv(INPUT_PATH + \"sample_submission.csv\")","c371a760":"print(\"{} observations, {} columns\".format(train.shape[0], train.shape[1]))\ntrain.head()","87f093b9":"print(\"{} observations, {} columns\".format(test.shape[0], test.shape[1]))\ntest.head()","36daf5b8":"print(\"{} observations, {} columns\".format(sample_submission.shape[0], sample_submission.shape[1]))\nsample_submission.head()","2e2c206b":"columns = train.columns\ncolumns","d5a46182":"target_features = ['question_asker_intent_understanding',\n       'question_body_critical', 'question_conversational',\n       'question_expect_short_answer', 'question_fact_seeking',\n       'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible', 'answer_relevance',\n       'answer_satisfaction', 'answer_type_instructions',\n       'answer_type_procedure', 'answer_type_reason_explanation',\n       'answer_well_written']","f5d6c5f0":"training_features = ['question_title', 'question_body', 'answer']","eb7e0908":"import re, string\nre_tok = re.compile(f'([{string.punctuation}\u201c\u201d\u00a8\u00ab\u00bb\u00ae\u00b4\u00b7\u00ba\u00bd\u00be\u00bf\u00a1\u00a7\u00a3\u20a4\u2018\u2019])')\ndef tokenize(s): return re_tok.sub(r' \\1 ', s).split()","082c1bbc":"vec = TfidfVectorizer(ngram_range=(1,2), tokenizer=tokenize,\n               min_df=3, max_df=0.9, strip_accents='unicode', use_idf=1,\n               smooth_idf=1, sublinear_tf=1 )\n\ntsvd = TruncatedSVD(n_components = 50)\n\ntrain_question_title_doc = vec.fit_transform(train['question_title'].values)\ntest_question_title_doc = vec.transform(test['question_title'].values)\n\ntrain_question_title_doc = tsvd.fit_transform(train_question_title_doc)\ntest_question_title_doc = tsvd.transform(test_question_title_doc)","2102df0f":"vec_qbody = TfidfVectorizer(ngram_range=(1,2), tokenizer=tokenize,\n               min_df=3, max_df=0.9, strip_accents='unicode', use_idf=1,\n               smooth_idf=1, sublinear_tf=1 )\n\ntsvd = TruncatedSVD(n_components = 50)\n\ntrain_question_body_doc = vec_qbody.fit_transform(train['question_body'].values)\ntest_question_body_doc = vec_qbody.transform(test['question_body'].values)\n\ntrain_question_body_doc = tsvd.fit_transform(train_question_body_doc)\ntest_question_body_doc = tsvd.transform(test_question_body_doc)","b8c04af9":"vec_answer = TfidfVectorizer(ngram_range=(1,2), tokenizer=tokenize,\n               min_df=3, max_df=0.9, strip_accents='unicode', use_idf=1,\n               smooth_idf=1, sublinear_tf=1 )\n\ntsvd = TruncatedSVD(n_components = 50)\n\ntrain_answer_doc = vec_answer.fit_transform(train['answer'].values)\ntest_answer_doc = vec_answer.transform(test['answer'].values)\n\ntrain_answer_doc = tsvd.fit_transform(train_answer_doc)\ntest_answer_doc = tsvd.transform(test_answer_doc)","dc6bf0d6":"X_train = np.concatenate([train_question_title_doc, train_question_body_doc, train_answer_doc], axis=1)\nX_test = np.concatenate([test_question_title_doc, test_question_body_doc, test_answer_doc], axis=1)","b7b301d9":"printt(X_train.shape)\nprintt(X_test.shape)","7b9696c7":"def train_xbg_model(target_feature):\n    xgb_model = xgb.XGBRegressor(learning_rate = 0.1, n_estimators=1000,\n                           max_depth=5, min_child_weight=1,\n                           gamma=0, subsample=0.8,\n                           colsample_bytree=0.8, objective= \"binary:logistic\",  \n                           nthread=-1, scale_pos_weight=1, random_state=2019, seed=2019)\n    xgb_model.fit(X_train, train[target_feature])\n    y_pred = xgb_model.predict(X_test)\n    return y_pred","f5b65c2a":"for feature in target_features:\n    print(\"------------------------------\")\n    print(f\"Traning for {feature}\")\n    sample_submission[feature] = train_xbg_model(feature)","6489dfc9":"sample_submission.head()","a3b382c8":"sample_submission.to_csv('submission.csv', index=False)","2a9092d3":"## Text Pre-processing and Vectorizing","330cc5c0":"## Importing Data","d37a95a7":"Objective of this kernel is to present a base line modelling using XGBoost. \nFor the sake of simplicity, I am only considering the Question related text and answer of modelling and ignoring all other features","770ad7d8":"## Modelling","c03d4cd4":"Source:\n[https:\/\/www.kaggle.com\/enzoamp\/nb-svm-strong-linear-baseline-w-category-dummies](https:\/\/www.kaggle.com\/enzoamp\/nb-svm-strong-linear-baseline-w-category-dummies)","2658b944":"For initial modelling, I am considering 'question_title', 'question_body', 'answer' as training features which need to be vectorized"}}