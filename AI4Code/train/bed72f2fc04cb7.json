{"cell_type":{"71ec435f":"code","43abb20e":"code","b5473e98":"code","2d472549":"code","8ca700ee":"code","b711040d":"code","0bf6658b":"code","49cac0fb":"code","e1610536":"code","13f91488":"code","e76007cf":"code","89bcec3d":"code","762dee7e":"code","ae05ce0f":"code","9c047567":"code","ee163cac":"code","d41ad940":"code","72729a3b":"code","21cceb6e":"code","0f903e71":"markdown","a4e6860e":"markdown"},"source":{"71ec435f":"FOLD = 4\nSAMPLES_LIMIT = -1 # change to -1 to pred on full fold\n# share the fold oof in comments to save GPU for everyone ( if u doing for abhishek shared weights )","43abb20e":"import gc\ngc.enable()\n\nimport sys\nsys.path.append(\"..\/input\/tez-lib\/\")\n\nimport os\n\nimport numpy as np\nimport pandas as pd\nimport tez\nimport torch\nimport torch.nn as nn\nfrom joblib import Parallel, delayed\nfrom transformers import AutoConfig, AutoModel, AutoTokenizer","b5473e98":"target_id_map = {\n    \"B-Lead\": 0,\n    \"I-Lead\": 1,\n    \"B-Position\": 2,\n    \"I-Position\": 3,\n    \"B-Evidence\": 4,\n    \"I-Evidence\": 5,\n    \"B-Claim\": 6,\n    \"I-Claim\": 7,\n    \"B-Concluding Statement\": 8,\n    \"I-Concluding Statement\": 9,\n    \"B-Counterclaim\": 10,\n    \"I-Counterclaim\": 11,\n    \"B-Rebuttal\": 12,\n    \"I-Rebuttal\": 13,\n    \"O\": 14,\n    \"PAD\": -100,\n}\n\n\nid_target_map = {v: k for k, v in target_id_map.items()}\n\nclass args1:\n    input_path = \"..\/input\/feedback-prize-2021\/\"\n    model = \"..\/input\/longformerlarge4096\/longformer-large-4096\/\"\n    tez_model= \"..\/input\/fblongformerlarge1536\/\"\n    output = \".\"\n    batch_size = 8\n    max_len = 4096\n    \nclass args2:\n    input_path = \"..\/input\/feedback-prize-2021\/\"\n    model = \"..\/input\/longformerlarge4096\/longformer-large-4096\/\"\n    tez_model= \"..\/input\/tez-fb-large\/\"\n    output = \".\"\n    batch_size = 8\n    max_len = 4096","2d472549":"class FeedbackDataset:\n    def __init__(self, samples, max_len, tokenizer):\n        self.samples = samples\n        self.max_len = max_len\n        self.tokenizer = tokenizer\n        self.length = len(samples)\n\n    def __len__(self):\n        return self.length\n\n    def __getitem__(self, idx):\n        input_ids = self.samples[idx][\"input_ids\"]\n        # print(input_ids)\n        # print(input_labels)\n\n        # add start token id to the input_ids\n        input_ids = [self.tokenizer.cls_token_id] + input_ids\n\n        if len(input_ids) > self.max_len - 1:\n            input_ids = input_ids[: self.max_len - 1]\n\n        # add end token id to the input_ids\n        input_ids = input_ids + [self.tokenizer.sep_token_id]\n        attention_mask = [1] * len(input_ids)\n\n        # padding_length = self.max_len - len(input_ids)\n        # if padding_length > 0:\n        #     if self.tokenizer.padding_side == \"right\":\n        #         input_ids = input_ids + [self.tokenizer.pad_token_id] * padding_length\n        #         attention_mask = attention_mask + [0] * padding_length\n        #     else:\n        #         input_ids = [self.tokenizer.pad_token_id] * padding_length + input_ids\n        #         attention_mask = [0] * padding_length + attention_mask\n\n        # return {\n        #     \"ids\": torch.tensor(input_ids, dtype=torch.long),\n        #     \"mask\": torch.tensor(attention_mask, dtype=torch.long),\n        # }\n\n        return {\n            \"ids\": input_ids,\n            \"mask\": attention_mask,\n        }","8ca700ee":"class Collate:\n    def __init__(self, tokenizer):\n        self.tokenizer = tokenizer\n\n    def __call__(self, batch):\n        output = dict()\n        output[\"ids\"] = [sample[\"ids\"] for sample in batch]\n        output[\"mask\"] = [sample[\"mask\"] for sample in batch]\n\n        # calculate max token length of this batch\n        batch_max = max([len(ids) for ids in output[\"ids\"]])\n\n        # add padding\n        if self.tokenizer.padding_side == \"right\":\n            output[\"ids\"] = [s + (batch_max - len(s)) * [self.tokenizer.pad_token_id] for s in output[\"ids\"]]\n            output[\"mask\"] = [s + (batch_max - len(s)) * [0] for s in output[\"mask\"]]\n        else:\n            output[\"ids\"] = [(batch_max - len(s)) * [self.tokenizer.pad_token_id] + s for s in output[\"ids\"]]\n            output[\"mask\"] = [(batch_max - len(s)) * [0] + s for s in output[\"mask\"]]\n\n        # convert to tensors\n        output[\"ids\"] = torch.tensor(output[\"ids\"], dtype=torch.long)\n        output[\"mask\"] = torch.tensor(output[\"mask\"], dtype=torch.long)\n\n        return output","b711040d":"class FeedbackModel(tez.Model):\n    def __init__(self, model_name, num_labels):\n        super().__init__()\n        self.model_name = model_name\n        self.num_labels = num_labels\n        config = AutoConfig.from_pretrained(model_name)\n\n        hidden_dropout_prob: float = 0.1\n        layer_norm_eps: float = 1e-7\n        config.update(\n            {\n                \"output_hidden_states\": True,\n                \"hidden_dropout_prob\": hidden_dropout_prob,\n                \"layer_norm_eps\": layer_norm_eps,\n                \"add_pooling_layer\": False,\n            }\n        )\n        self.transformer = AutoModel.from_config(config)\n        self.output = nn.Linear(config.hidden_size, self.num_labels)\n\n    def forward(self, ids, mask):\n        transformer_out = self.transformer(ids, mask)\n        sequence_output = transformer_out.last_hidden_state\n        logits = self.output(sequence_output)\n        logits = torch.softmax(logits, dim=-1)\n        return logits, 0, {}","0bf6658b":"def _prepare_test_data_helper(args, tokenizer, ids):\n    test_samples = []\n    for idx in ids:\n        filename = os.path.join(args.input_path, \"train\", idx + \".txt\")\n        with open(filename, \"r\") as f:\n            text = f.read()\n\n        encoded_text = tokenizer.encode_plus(\n            text,\n            add_special_tokens=False,\n            return_offsets_mapping=True,\n        )\n        input_ids = encoded_text[\"input_ids\"]\n        offset_mapping = encoded_text[\"offset_mapping\"]\n\n        sample = {\n            \"id\": idx,\n            \"input_ids\": input_ids,\n            \"text\": text,\n            \"offset_mapping\": offset_mapping,\n        }\n\n        test_samples.append(sample)\n    return test_samples\n\n\ndef prepare_test_data(df, tokenizer, args):\n    test_samples = []\n    ids = df[\"id\"].unique()\n    ids_splits = np.array_split(ids, 4)\n\n    results = Parallel(n_jobs=4, backend=\"multiprocessing\")(\n        delayed(_prepare_test_data_helper)(args, tokenizer, idx) for idx in ids_splits\n    )\n    for result in results:\n        test_samples.extend(result)\n\n    return test_samples","49cac0fb":"df = pd.read_csv(os.path.join(\"..\/input\/creating-folds-properly-hopefully-p\/\", \"train_folds.csv\"))\ndf = df[df['kfold'] == FOLD].reset_index()\ndf_ids = df[\"id\"].unique()","e1610536":"df.to_csv(f'df_fold_{FOLD}.csv', index=False)","13f91488":"tokenizer = AutoTokenizer.from_pretrained(args1.model)\ntest_samples = prepare_test_data(df, tokenizer, args1)","e76007cf":"test_samples = test_samples[0:SAMPLES_LIMIT]\n'Fold Samples', len(test_samples)","89bcec3d":"collate = Collate(tokenizer=tokenizer)\n\nraw_preds = []\nraw_preds_both = []\nfor fold_ in range(10):\n    if (fold_ not in (FOLD, FOLD+5)):\n        continue\n    print(f\"Predicting on model fold {fold_}\")\n    current_idx = 0\n    test_dataset = FeedbackDataset(test_samples, args1.max_len, tokenizer)\n    \n    if fold_ < 5:\n        model = FeedbackModel(model_name=args1.model, num_labels=len(target_id_map) - 1)\n        model.load(os.path.join(args1.tez_model, f\"model_{fold_}.bin\"), weights_only=True)\n        preds_iter = model.predict(test_dataset, batch_size=args1.batch_size, n_jobs=-1, collate_fn=collate)\n    else:\n        model = FeedbackModel(model_name=args2.model, num_labels=len(target_id_map) - 1)\n        model.load(os.path.join(args2.tez_model, f\"model_{fold_-5}.bin\"), weights_only=True)\n        preds_iter = model.predict(test_dataset, batch_size=args2.batch_size, n_jobs=-1, collate_fn=collate)\n        \n    current_idx = 0\n    for preds in preds_iter:\n        preds = preds.astype(np.float16)\n        if fold_ < 5:\n            raw_preds.append(preds\/2)\n            raw_preds_both.append({f'fold_{fold_}': preds})\n        else:\n            raw_preds[current_idx] += preds\/2\n            raw_preds_both[current_idx][f'fold_{fold_}'] = preds\n            current_idx += 1\n            \n    torch.cuda.empty_cache()\n    gc.collect()","762dee7e":"raw_preds_both = pd.DataFrame(raw_preds_both)\nraw_preds_both.to_csv(f\"raw_preds_{FOLD}.csv\", index=False)\nraw_preds_both","ae05ce0f":"final_preds = []\nfinal_scores = []\n\nfor rp in raw_preds:\n    pred_class = np.argmax(rp, axis=2)\n    pred_scrs = np.max(rp, axis=2)\n    for pred, pred_scr in zip(pred_class, pred_scrs):\n        pred = pred.tolist()\n        pred_scr = pred_scr.tolist()\n        final_preds.append(pred)\n        final_scores.append(pred_scr)\n\nfor j in range(len(test_samples)):\n    tt = [id_target_map[p] for p in final_preds[j][1:]]\n    tt_score = final_scores[j][1:]\n    test_samples[j][\"preds\"] = tt\n    test_samples[j][\"pred_scores\"] = tt_score","9c047567":"def jn(pst, start, end):\n    return \" \".join([str(x) for x in pst[start:end]])\n\n\ndef link_evidence(oof):\n    thresh = 1\n    idu = oof['id'].unique()\n    idc = idu[1]\n    eoof = oof[oof['class'] == \"Evidence\"]\n    neoof = oof[oof['class'] != \"Evidence\"]\n    for thresh2 in range(26,27, 1):\n        retval = []\n        for idv in idu:\n            for c in  ['Lead', 'Position', 'Evidence', 'Claim', 'Concluding Statement',\n                   'Counterclaim', 'Rebuttal']:\n                q = eoof[(eoof['id'] == idv) & (eoof['class'] == c)]\n                if len(q) == 0:\n                    continue\n                pst = []\n                for i,r in q.iterrows():\n                    pst = pst +[-1] + [int(x) for x in r['predictionstring'].split()]\n                start = 1\n                end = 1\n                for i in range(2,len(pst)):\n                    cur = pst[i]\n                    end = i\n                    #if pst[start] == 205:\n                    #   print(cur, pst[start], cur - pst[start])\n                    if (cur == -1 and c != 'Evidence') or ((cur == -1) and ((pst[i+1] > pst[end-1] + thresh) or (pst[i+1] - pst[start] > thresh2))):\n                        retval.append((idv, c, jn(pst, start, end)))\n                        start = i + 1\n                v = (idv, c, jn(pst, start, end+1))\n                #print(v)\n                retval.append(v)\n        roof = pd.DataFrame(retval, columns = ['id', 'class', 'predictionstring']) \n        roof = roof.merge(neoof, how='outer')\n        return roof\n    ","ee163cac":"proba_thresh = {\n    \"Lead\": 0.7,\n    \"Position\": 0.55,\n    \"Evidence\": 0.65,\n    \"Claim\": 0.55,\n    \"Concluding Statement\": 0.7,\n    \"Counterclaim\": 0.5,\n    \"Rebuttal\": 0.55,\n}\n\nmin_thresh = {\n    \"Lead\": 9,\n    \"Position\": 5,\n    \"Evidence\": 14,\n    \"Claim\": 3,\n    \"Concluding Statement\": 11,\n    \"Counterclaim\": 6,\n    \"Rebuttal\": 4,\n}\n\noof = []\nanalysis = []\nfor sample_idx, sample in enumerate(test_samples):\n    preds = sample[\"preds\"]\n    offset_mapping = sample[\"offset_mapping\"]\n    sample_id = sample[\"id\"]\n    sample_text = sample[\"text\"]\n    sample_input_ids = sample[\"input_ids\"]\n    sample_pred_scores = sample[\"pred_scores\"]\n    sample_preds = []\n\n    if len(preds) < len(offset_mapping):\n        preds = preds + [\"O\"] * (len(offset_mapping) - len(preds))\n        sample_pred_scores = sample_pred_scores + [0] * (len(offset_mapping) - len(sample_pred_scores))\n    \n    idx = 0\n    phrase_preds = []\n    while idx < len(offset_mapping):\n        start, _ = offset_mapping[idx]\n        if preds[idx] != \"O\":\n            label = preds[idx][2:]\n        else:\n            label = \"O\"\n        phrase_scores = []\n        phrase_scores.append(sample_pred_scores[idx])\n        idx += 1\n        while idx < len(offset_mapping):\n            if label == \"O\":\n                matching_label = \"O\"\n            else:\n                matching_label = f\"I-{label}\"\n            if preds[idx] == matching_label:\n                _, end = offset_mapping[idx]\n                phrase_scores.append(sample_pred_scores[idx])\n                idx += 1\n            else:\n                break\n        if \"end\" in locals():\n            phrase = sample_text[start:end]\n            phrase_preds.append((phrase, start, end, label, phrase_scores))\n\n    temp_df = []\n    for phrase_idx, (phrase, start, end, label, phrase_scores) in enumerate(phrase_preds):\n        analysis.append({'id':phrase_idx, 'phrase':phrase, 'start':start, 'end':end, 'label':label, 'phrase_scores':phrase_scores})\n        word_start = len(sample_text[:start].split())\n        word_end = word_start + len(sample_text[start:end].split())\n        word_end = min(word_end, len(sample_text.split()))\n        ps = \" \".join([str(x) for x in range(word_start, word_end)])\n        if label != \"O\":\n            if sum(phrase_scores) \/ len(phrase_scores) >= proba_thresh[label]:\n                if len(ps.split()) >= min_thresh[label]:\n                    temp_df.append((sample_id, label, ps))\n    \n    temp_df = pd.DataFrame(temp_df, columns=[\"id\", \"class\", \"predictionstring\"])\n    oof.append(temp_df)\n\noof = pd.concat(oof).reset_index(drop=True)\noof.to_csv(f\"oof_{FOLD}_before_link_evidence.csv\", index=False)\noof = link_evidence(oof)\noof","d41ad940":"oof.to_csv(f\"oof_{FOLD}.csv\", index=False)\nanalysis = pd.DataFrame(analysis)\nanalysis.to_csv(f\"analysis_{FOLD}.csv\", index=False)","72729a3b":"analysis.head()","21cceb6e":"oof","0f903e71":"Credits to @abhishek https:\/\/www.kaggle.com\/abhishek\/creating-folds-properly-hopefully-p, Just minor changes to get OOF for the this kernel","a4e6860e":"Don't forgot to check **link_evidence** magic :)"}}