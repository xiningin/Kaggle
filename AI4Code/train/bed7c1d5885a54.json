{"cell_type":{"de72ec62":"code","8a09e60a":"code","a8f81c7b":"code","45a33e3f":"code","36ee1cbf":"code","93d06c71":"code","7a085001":"code","35c5a152":"code","f2d33b67":"code","b2282489":"code","db8aa4f9":"code","22182d0f":"code","19912c29":"code","ab4c2b25":"code","74b7f268":"code","a2c733ef":"code","782b0d3c":"code","699ccb1a":"code","873c1477":"code","9412beae":"code","44f20ded":"code","4dd0116e":"code","9a0595e8":"code","156982cf":"code","5f0fdc21":"code","e7b5ddcc":"code","4999e6cb":"code","305bcd8a":"code","2d5d92a0":"markdown","b5a0bc10":"markdown","c5e5ded7":"markdown","cdfb3ca1":"markdown","1ecc5567":"markdown","16f61075":"markdown","b8df59e5":"markdown","c609ec8a":"markdown","29ed3bdb":"markdown","56a8b4ad":"markdown","bffffbff":"markdown","a23435e6":"markdown","7c2999ad":"markdown","2e33a8c4":"markdown","a0b4a893":"markdown","b68c89a7":"markdown","f2938da7":"markdown"},"source":{"de72ec62":"import os\nimport warnings\n\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom matplotlib.ticker import FuncFormatter\nfrom matplotlib import cycler\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler, FunctionTransformer\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import roc_auc_score\nfrom lightgbm import LGBMClassifier\nimport xgboost as xgb\n\n# Save the default settings if you want to roll back the style you made\nIPython_default = plt.rcParams.copy()\n%matplotlib inline","8a09e60a":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        file = os.path.join(dirname, filename)\ndata = pd.read_csv(file)","a8f81c7b":"print(data.shape)\ndata.head()","45a33e3f":"data.any().isnull()","36ee1cbf":"data.dtypes","93d06c71":"def show_objects(df):\n    cols = df.select_dtypes(include=['object']).columns\n    for col in cols:\n        print(\"Unique values for {}\".format(col))\n        print(data.loc[:, col].unique())\n    \nshow_objects(data)","7a085001":"# Tune style\nmonokai_black = '#232323'\n\ncolors = cycler('color',\n                ['#CCCC00','#3399FF','#59f4ff','#884dff', '#4dff62', \n                 '#6f992f', '#ffa230','#ff3030','#545454','#000000']\n               )\nplt.rc('axes', axisbelow=True, grid=True, titlesize=15,\n       prop_cycle=colors, titlecolor='white', labelcolor='white')\nplt.rc('figure', figsize=(16,6), facecolor='#232323')\nplt.rc('xtick', direction='out', color='white')\nplt.rc('ytick', direction='out', color='white')\nplt.rc('legend', facecolor='#232323', edgecolor='white')\nplt.rc('lines', linewidth=2.5)\nplt.rc('patch', force_edgecolor=True, facecolor='#232323',\n       edgecolor='black', lw=1.5)\nplt.rc('text', color='white')","35c5a152":"! pip install forex-python\nfrom forex_python.converter import CurrencyRates\ndef convert_to_dollars(amount):\n    c = CurrencyRates()\n    return round(c.convert('INR', 'USD', amount), 2)","f2d33b67":"def currency(x, pos):\n    # Two arguments - value and position of mark\n    return '$ {:1.0f}K'.format(convert_to_dollars(x)*1e-3)","b2282489":"def depend_for_income(name_col):\n    fig, ax = plt.subplots()\n    ax.bar(data[name_col], data[\"AnnualIncome\"])\n    formatter = FuncFormatter(currency)\n    ax.yaxis.set_major_formatter(formatter)\n    ax.set(xlabel=name_col, ylabel='Annual Income')\n    plt.show()","db8aa4f9":"depend_for_income(\"Age\")","22182d0f":"depend_for_income(\"Employment Type\")","19912c29":"depend_for_income(\"GraduateOrNot\")","ab4c2b25":"fig, (ax1,ax2) = plt.subplots(1,2)\ngover_sector = data[data[\"Employment Type\"] == \"Government Sector\"]\nprivate_sector = data[data[\"Employment Type\"] != \"Government Sector\"]\nax1.hist(private_sector[\"GraduateOrNot\"])\nax1.set(title='The number of people who received education in PS')\nax2.hist(gover_sector[\"GraduateOrNot\"])\nax2.set(title='The number of people who received education in GS')\nplt.show()","74b7f268":"def encoder(row):\n    obj_cols = data.select_dtypes(include=['object']).columns\n    if row.dtypes == \"object\":\n        return LabelEncoder().fit_transform(row)\n    return row","a2c733ef":"corr = data.apply(encoder).corr()\ng = sns.heatmap(corr,annot=True)\ng.figure.set_size_inches(10,10)","782b0d3c":"# Delete excess column\ndata = data.drop(data.columns[0], axis=1)","699ccb1a":"def pipeline_models(models: list=None) -> dict:   \n    if not models:\n        models = [RandomForestClassifier, LogisticRegression, GaussianProcessClassifier, \n                  AdaBoostClassifier, GradientBoostingClassifier, KNeighborsClassifier,\n                  GaussianNB, xgb.XGBClassifier, LGBMClassifier]\n    else:\n        models = models\n        \n    for model in models:\n        yield model\n        \ndef preprocess(data):\n    cat_cols = data.select_dtypes(include=['object']).columns\n    # Drop target column\n    num_cols = data.select_dtypes(include=['number']).columns[:-1]\n    preprocessor = make_column_transformer((StandardScaler(), num_cols),\n                                           (OneHotEncoder(), cat_cols))\n    return preprocessor\ndef fit_pipe(model, X_train, X_test, y_train, y_test, preprocessor, **params):\n        pipe = Pipeline([\n        (\"preproc\", preprocessor),\n        (\"model\", model(**params))\n        ])\n        with warnings.catch_warnings():  # Disable warnings\n            warnings.simplefilter(\"ignore\")\n            pipe.fit(X_train, y_train)\n            pred = pipe.predict_proba(X_test)[:,1]\n        return roc_auc_score(y_test, pred), pipe","873c1477":"X = data.drop(\"TravelInsurance\", axis=1)\ny = data[\"TravelInsurance\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=46)","9412beae":"results = {}\nfor model in pipeline_models():\n    acc, _ = fit_pipe(model, X_train, X_test, y_train, y_test, preprocess(data))\n    results[type(model()).__name__] = acc","44f20ded":"import operator\nsorted_tuples = sorted(results.items(), key=operator.itemgetter(1), reverse=True)\nsorted_dict = {k: v for k, v in sorted_tuples}\nfor i, (k, v) in enumerate(sorted_dict.items()):\n    print(\"{}. {} Accuracy -  {}\\n\".format(i+1, k, round(v, 5)))","4dd0116e":"help(GradientBoostingClassifier)","9a0595e8":"n_rate_est = []\nfor i in range(50):\n    n_rate_est.append(fit_pipe(GradientBoostingClassifier, X_train, X_test, y_train, y_test,\n                                      preprocess(data),\n                                      **{\"n_estimators\": i+100})[0]) # ignore model params","156982cf":"fig, ax = plt.subplots()\nax.plot(n_rate_est)\nformatter = FuncFormatter(lambda x,p: int(x+100))\nax.xaxis.set_major_formatter(formatter)\nax.set(xlabel=\"N Estimators\", ylabel='Accuracy')\nplt.show()","5f0fdc21":"dict(sorted([(pos+100, v) for pos, v in enumerate(n_rate_est)], key=lambda x: x[1], reverse=True))","e7b5ddcc":"# After a quick grid search has been performed\nbest_result, model = fit_pipe(GradientBoostingClassifier, X_train, X_test, y_train, y_test, \n                              preprocess(data), \n                                    **{\"max_features\":'sqrt',\n                                       \"subsample\": .6,\n                                       \"min_weight_fraction_leaf\": .08,\n                                       \"min_impurity_decrease\": .06,\n                                       })","4999e6cb":"best_result","305bcd8a":"model.named_steps['model'].feature_importances_","2d5d92a0":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Travel-insurance-prediction\" data-toc-modified-id=\"Travel-insurance-prediction-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Travel insurance prediction<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Overview\" data-toc-modified-id=\"Overview-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>Overview<\/a><\/span><\/li><li><span><a href=\"#Visualization\" data-toc-modified-id=\"Visualization-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>Visualization<\/a><\/span><\/li><li><span><a href=\"#Pre-processing\" data-toc-modified-id=\"Pre-processing-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;<\/span>Pre-processing<\/a><\/span><\/li><li><span><a href=\"#Fitting-a-models\" data-toc-modified-id=\"Fitting-a-models-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;<\/span>Fitting a models<\/a><\/span><\/li><\/ul><\/li><\/ul><\/div>","b5a0bc10":"From less to more. First, let's look at the linear dependencies","c5e5ded7":"## Visualization","cdfb3ca1":"In the console \n\n    pip install forex-python\n    \nor..","1ecc5567":"There is no highly correlating features","16f61075":"## Pre-processing","b8df59e5":"But before that, adjust your style","c609ec8a":"Great, object columns have 2 values","29ed3bdb":"## Fitting a models","56a8b4ad":"People about 27 years old have the smallest earnings. The richest people 30 and 35 have the smallest maximum earnings. People aged 28 and 32 mostly have the maximum earnings relative to the entire sample.","bffffbff":"And we will create a couple of functions for better readability of graphs","a23435e6":"## Overview","7c2999ad":"We see that the vast majority of people who have not received a college education do not cross the average earnings threshold of the sample.  \nYou can also notice that graduates pass the maximum salary threshold, unlike non-graduates. And taking into account the fact of past visualization, it can be understood that people with education in this sample become self-employed with success","2e33a8c4":"But these data tell us little. You should look at the effectiveness of hyperparameters in conjunction with others, and not separately. But on the other hand, we should not choose the best hyperparameters for the sample, because we will train it to predict almost indentical data well","a0b4a893":"As expected, self-employed people are crossing the threshold of earnings of officially employed people. In addition, one-fourth of the self-employed have earnings like the richest officially employed people","b68c89a7":"# Travel insurance prediction   \nMotivation: Predict Whether A Given Customer Would Like To Buy The Insurance Package, Once The Corona Lockdown Ends And Travelling Resumes.  \nYour Work Could Probably Help Save Thousands Of Rupees Of A Family.  \n\nKaggle link - https:\/\/www.kaggle.com\/tejashvi14\/travel-insurance-prediction-data","f2938da7":"4 qualitative signs, we will transform them in the future"}}