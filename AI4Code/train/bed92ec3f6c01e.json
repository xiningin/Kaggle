{"cell_type":{"a67ac301":"code","a6a3503b":"code","50608719":"code","408a637f":"code","9dc0ae20":"code","0e923a63":"code","3e79ca0d":"code","0f6b0231":"code","68f96b45":"code","d2cf431f":"code","300b55f5":"code","676f75bc":"code","9cbbb6e9":"code","a79bbd18":"code","ad9b1cc5":"code","5cd516f2":"code","bd2e8b46":"code","20c2be19":"code","cbc21bd5":"code","38dbe9d8":"code","92b75d4e":"code","4c241e4f":"code","a1804958":"code","680fef60":"code","d4848591":"code","f19e6bb7":"code","3c3118aa":"code","757d9f8d":"code","54cef7db":"code","c64f8174":"code","eb7d3b1d":"code","06d9e701":"code","2c7912a5":"code","13ff4524":"code","642b8706":"code","d9ffe2e5":"code","818449c4":"code","50147b56":"code","35c78304":"code","87857d30":"code","857de355":"code","eb140b1b":"code","849cd54a":"code","851875d2":"code","d881bda0":"code","56fa5783":"code","12d9211d":"code","626caca6":"code","bdf95aa0":"code","88ca2e79":"code","3165cb04":"code","e69fa311":"code","18d77ffb":"code","2fb483f7":"code","c2de056f":"code","7b21598a":"code","5cb698bc":"code","2670fce9":"code","1dff0fb3":"code","caa6a638":"code","6e11e8d5":"code","341b4a19":"markdown","977f949f":"markdown","2fdd6808":"markdown","94de8c1d":"markdown","636bd625":"markdown","7bd81529":"markdown","ba96b6d2":"markdown","c4713bae":"markdown","4d777f66":"markdown","194a5d80":"markdown","a19e82f2":"markdown","f787edb2":"markdown","25d67703":"markdown","beaa8db7":"markdown","8b0b78ac":"markdown","c8f58dd2":"markdown"},"source":{"a67ac301":"import pandas as pd\nimport numpy as np","a6a3503b":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\nvalidation_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_df.head()","50608719":"bins = pd.IntervalIndex.from_tuples([(0, 16), (17, 32), (33, 48), (49, 150)])\nexploration_df = train_df\nexploration_df['Age_bin'] = pd.cut(train_df['Age'], bins)\nl = exploration_df.shape[0]\nexploration_df = exploration_df.groupby(['Age_bin', 'Survived']).count().reset_index()\nexploration_df['PassengerId'] = round(100 * (exploration_df['PassengerId']\/l), 2)\nexploration_df = exploration_df[['Age_bin', 'Survived', 'PassengerId']]\nexploration_df[exploration_df['Survived'] == 1]","408a637f":"import matplotlib.pyplot as plt\nimport seaborn as sns","9dc0ae20":"exploration_df = train_df\nexploration_df['Age_bin'] = pd.cut(train_df['Age'], bins)\nsns.countplot('Age_bin', hue='Survived', data=exploration_df)\nplt.show()","0e923a63":"round(100* pd.crosstab(train_df['Survived'], train_df['Sex'])\/train_df.shape[0], 2)","3e79ca0d":"train_df.info()","0f6b0231":"train_df.drop(columns=['Cabin'], inplace=True)\nvalidation_df.drop(columns=['Cabin'], inplace=True)\ntrain_df.head()","68f96b45":"def impute_embarked(sym):\n    if sym != sym:\n        return 'S'\n    return sym\ntrain_df['Embarked'] = train_df['Embarked'].apply(lambda x: impute_embarked(x))\nvalidation_df['Embarked'] = validation_df['Embarked'].apply(lambda x: impute_embarked(x))\ntrain_df.info()","d2cf431f":"train_df.head()","300b55f5":"# train_df.Age.mode()","676f75bc":"# mode_age = train_df.Age.mode()[0]\n\n# def impute_age(age):\n#     if np.isnan(age):\n#         return mode_age\n#     return age\n\n# train_df['Age'] = train_df['Age'].apply(lambda x: impute_age(x))\n# train_df.info()","9cbbb6e9":"from IPython.core.display import display, HTML\nHTML('''<script> <\/script> <form action=\"javascript:IPython.notebook.execute_cells_above()\"><input type=\"submit\" id=\"toggleButton\" value=\"Run all above Cells\"><\/form>''')","a79bbd18":"train_df['Sex'] = train_df['Sex'].map({'male':0, 'female':1})\nvalidation_df['Sex'] = validation_df['Sex'].map({'male':0, 'female':1})","ad9b1cc5":"train_df.rename(columns={'Sex':'Sex_Male'}, inplace=True)\nvalidation_df.rename(columns={'Sex':'Sex_Male'}, inplace=True)\ntrain_df.head()","5cd516f2":"embarked = pd.get_dummies(train_df['Embarked'], drop_first=True, prefix='Embarked')\ntrain_df = pd.concat([train_df, embarked], axis=1)\ntrain_df.drop(columns=['Embarked'], inplace=True)\n\nembarked = pd.get_dummies(validation_df['Embarked'], drop_first=True, prefix='Embarked')\nvalidation_df = pd.concat([validation_df, embarked], axis=1)\nvalidation_df.drop(columns=['Embarked'], inplace=True)\n\ntrain_df.head()","bd2e8b46":"train_df.drop(columns=['Name', 'Ticket', 'PassengerId', 'Age_bin'], inplace=True)\nvalidation_df.drop(columns=['Name', 'Ticket', 'PassengerId'], inplace=True)\n\ntrain_df.head()","20c2be19":"Pclass = pd.get_dummies(train_df['Pclass'], drop_first=True, prefix='Pclass')\ntrain_df = pd.concat([train_df, Pclass], axis=1)\ntrain_df.drop(columns=['Pclass'], inplace=True)\n\nPclass = pd.get_dummies(validation_df['Pclass'], drop_first=True, prefix='Pclass')\nvalidation_df = pd.concat([validation_df, Pclass], axis=1)\nvalidation_df.drop(columns=['Pclass'], inplace=True)\n\ntrain_df.head()","cbc21bd5":"#! pip install fancyimpute","38dbe9d8":"# Iterative Imputer\n# Impute Age\nfrom fancyimpute import IterativeImputer\n\ndf_cols = train_df.columns\ntrain_df = pd.DataFrame(IterativeImputer().fit_transform(train_df), columns=df_cols)\n\ndf_cols = validation_df.columns\nvalidation_df = pd.DataFrame(IterativeImputer().fit_transform(validation_df), columns=df_cols)","92b75d4e":"train_df.head()","4c241e4f":"train_df.isnull().sum()","a1804958":"from IPython.core.display import display, HTML\nHTML('''<script> <\/script> <form action=\"javascript:IPython.notebook.execute_cells_above()\"><input type=\"submit\" id=\"toggleButton\" value=\"Run all above Cells\"><\/form>''')","680fef60":"# since iterative imputer converts dtypes to float\ncols = train_df.columns\ncols = cols.drop(['Age', 'Fare'])\nfor i in cols:\n    train_df[i] = pd.to_numeric(train_df[i])\n    train_df[i] = train_df[i].astype(int)\n    \ncols = validation_df.columns\ncols = cols.drop(['Age', 'Fare'])\nfor i in cols:\n    validation_df[i] = pd.to_numeric(validation_df[i])\n    validation_df[i] = validation_df[i].astype(int)\n    \ntrain_df.info()","d4848591":"train_df.head()","f19e6bb7":"sns.boxplot(train_df['Age'], orient='v')\nplt.show()","3c3118aa":"# Lets remove negative age\ntrain_df[train_df['Age'] < 0]","757d9f8d":"train_df.drop(train_df[train_df['Age'] < 0].index, inplace=True)","54cef7db":"sns.boxplot(train_df['Age'], orient='v')\nplt.show()","c64f8174":"plt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nsns.distplot(train_df[train_df['Survived'] == 1]['Age'])\nplt.title('Survived')\nplt.subplot(1, 2, 2)\nsns.distplot(train_df[train_df['Survived'] == 0]['Age'])\nplt.title('Not Survived')\nplt.show()","eb7d3b1d":"plt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nax = sns.barplot(x='Sex_Male', y='Survived', data=train_df[train_df['Survived'] == 1].groupby('Sex_Male').count().reset_index()[['Sex_Male', 'Survived']], orient='v')\nax.set(ylabel='Count', ylim=(0, 600))\nplt.title('Survived')\nplt.subplot(1, 2, 2)\nax = sns.barplot(x='Sex_Male', y='Survived', data=train_df[train_df['Survived'] == 0].groupby('Sex_Male').count().reset_index()[['Sex_Male', 'Survived']], orient='v')\nax.set(ylabel='Count', ylim=(0, 600))\nplt.title('Not Survived')\nplt.show()","06d9e701":"ax = sns.barplot(x='Survived', y='Fare', data=train_df.groupby('Survived').mean().reset_index())\nax.set(ylabel='Mean Fare')\nplt.show()","2c7912a5":"plt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nax = sns.boxplot(train_df[train_df['Survived'] == 1]['Fare'], orient='v')\nax.set(ylim=(0, 300))\nplt.title('Survived')\nplt.subplot(1, 2, 2)\nax = sns.boxplot(train_df[train_df['Survived'] == 0]['Fare'], orient='v')\nax.set(ylim=(0, 300))\nplt.title('Not Survived')\nplt.show()","13ff4524":"data = exploration_df.groupby(['Survived', 'Embarked']).count().reset_index()\n\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nax = sns.barplot(x = 'Embarked', y = 'PassengerId', data=data[data['Survived']==1], orient='v')\nax.set(ylabel='Count', ylim=(0, 500))\nplt.title('Survived')\nplt.subplot(1, 2, 2)\nax = sns.barplot(x = 'Embarked', y = 'PassengerId', data=data[data['Survived']==0], orient='v')\nax.set(ylabel='Count', ylim=(0, 500))\nplt.title('Not Survived')\nplt.show()","642b8706":"data = exploration_df.groupby(['Survived', 'Pclass']).count().reset_index()\n\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nax = sns.barplot(x = 'Pclass', y = 'PassengerId', data=data[data['Survived']==1], orient='v')\nax.set(ylabel='Count', ylim=(0, 500))\nplt.title('Survived')\nplt.subplot(1, 2, 2)\nax = sns.barplot(x = 'Pclass', y = 'PassengerId', data=data[data['Survived']==0], orient='v')\nax.set(ylabel='Count', ylim=(0, 500))\nplt.title('Not Survived')\nplt.show()","d9ffe2e5":"data = exploration_df.groupby(['Survived', 'SibSp']).count().reset_index()\n\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nax = sns.barplot(x = 'SibSp', y = 'PassengerId', data=data[data['Survived']==1], orient='v')\nax.set(ylabel='Count', ylim=(0, 500))\nplt.title('Survived')\nplt.subplot(1, 2, 2)\nax = sns.barplot(x = 'SibSp', y = 'PassengerId', data=data[data['Survived']==0], orient='v')\nax.set(ylabel='Count', ylim=(0, 500))\nplt.title('Not Survived')\nplt.show()","818449c4":"data = exploration_df.groupby(['Survived', 'Parch']).count().reset_index()\n\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nax = sns.barplot(x = 'Parch', y = 'PassengerId', data=data[data['Survived']==1], orient='v')\nax.set(ylabel='Count', ylim=(0, 500))\nplt.title('Survived')\nplt.subplot(1, 2, 2)\nax = sns.barplot(x = 'Parch', y = 'PassengerId', data=data[data['Survived']==0], orient='v')\nax.set(ylabel='Count', ylim=(0, 500))\nplt.title('Not Survived')\nplt.show()","50147b56":"# Outlier\nsns.boxplot(train_df['Fare'])\nplt.show()","35c78304":"train_df.drop(train_df[train_df['Fare'] > 300].index, inplace=True)\nsns.boxplot(train_df['Fare'])\nplt.show()","87857d30":"from IPython.core.display import display, HTML\nHTML('''<script> <\/script> <form action=\"javascript:IPython.notebook.execute_cells_above()\"><input type=\"submit\" id=\"toggleButton\" value=\"Run all above Cells\"><\/form>''')","857de355":"x_columns = train_df.columns.drop('Survived')\nX_train = train_df[x_columns]\ny_train = train_df['Survived']\n\nprint(X_train.shape)\nprint(y_train.shape)","eb140b1b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, train_size=0.7, random_state=1)\n\nprint(X_train.shape)\nprint(y_train.shape)","849cd54a":"# Scaling\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","851875d2":"X_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nX_validation = scaler.transform(validation_df)","d881bda0":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","56fa5783":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","12d9211d":"y_pred = logreg.predict(X_test)\n\nfrom sklearn import metrics\n\nprint('Accuracy:', metrics.accuracy_score(y_test, y_pred))\nprint('Sensitivity\/Recall:', metrics.recall_score(y_test, y_pred))","626caca6":"#! pip show scikit-learn","bdf95aa0":"# l1 - lasso, l2 - ridge\nlogreg = LogisticRegression(penalty='l1', solver='liblinear', C=0.1)\nlogreg.fit(X_train, y_train)\n\ny_pred = logreg.predict(X_test)\n\nprint('Accuracy:', metrics.accuracy_score(y_test, y_pred))\nprint('Sensitivity\/Recall:', metrics.recall_score(y_test, y_pred))","88ca2e79":"# class imbalance\ntrain_df.Survived.value_counts()","3165cb04":"logreg = LogisticRegression(penalty='l1', solver='liblinear', C=0.1, class_weight='balanced')\nlogreg.fit(X_train, y_train)\n\ny_pred = logreg.predict(X_test)\n\nprint('Accuracy:', metrics.accuracy_score(y_test, y_pred))\nprint('Sensitivity\/Recall:', metrics.recall_score(y_test, y_pred))","e69fa311":"# Grid search for tuning hyperparam - C\nfrom sklearn.model_selection import GridSearchCV\nparam = {'C': [0.0001, 0.001, 0.005, 0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.9, 1],\n         'penalty': ['l1', 'l2']}\n\nlogreg = LogisticRegression(class_weight='balanced', solver='liblinear')\nmodel = GridSearchCV(estimator=logreg,\n                     cv=5,\n                     param_grid=param,\n                     scoring=\"recall\")\nmodel.fit(X_train, y_train)","18d77ffb":"model.best_score_","2fb483f7":"model.best_params_","c2de056f":"logreg = LogisticRegression(penalty='l1', solver='liblinear', C=0.2, class_weight='balanced')\nlogreg.fit(X_train, y_train)\n\ny_pred = logreg.predict(X_test)\n\nprint('Accuracy:', metrics.accuracy_score(y_test, y_pred))\nprint('Sensitivity\/Recall:', metrics.recall_score(y_test, y_pred))","7b21598a":"# ElasticNet - Combines Ridge and Lasso\n# Lasso used when - so many features and want to remove some\n# Ridge used when - important features and want to reduce coeff power\nlogreg = LogisticRegression(penalty='elasticnet', solver='saga', C=0.1, class_weight='balanced', l1_ratio=0.9)\nlogreg.fit(X_train, y_train)\n\ny_pred = logreg.predict(X_test)\n\nprint('Accuracy:', metrics.accuracy_score(y_test, y_pred))\nprint('Sensitivity\/Recall:', metrics.recall_score(y_test, y_pred))","5cb698bc":"from IPython.core.display import display, HTML\nHTML('''<script> <\/script> <form action=\"javascript:IPython.notebook.execute_cells_above()\"><input type=\"submit\" id=\"toggleButton\" value=\"Run all above Cells\"><\/form>''')","2670fce9":"y_valid = logreg.predict(X_validation)","1dff0fb3":"validation_df = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission = pd.DataFrame()\nsubmission = validation_df[['PassengerId']]\nsubmission.head()","caa6a638":"submission['Survived'] = y_valid\nsubmission.head()","6e11e8d5":"submission.to_csv('submission.csv',index=False)","341b4a19":"> Clearly first class passengers have better survival rate","977f949f":"> People embarked from Southampton and Queenstown have less survival rate","2fdd6808":"Cabin has only 204 out of 891 entries non-null, lets drop it","94de8c1d":"### Data Understanding","636bd625":"### Submission","7bd81529":"> From the above two plots, single passengers have less survival rate and ones with more than 5 connections also have less survival rate.","ba96b6d2":"> Low age and high age survivors are more","c4713bae":"Impute embarked with most occuring symbol - S","4d777f66":"After itertive imputer, one of the outlier is less than zero!","194a5d80":"Handle categorical variables for the model.","a19e82f2":"#### Regularization","f787edb2":"### Data preparation","25d67703":"### Data Cleanup","beaa8db7":"### Data Exploration","8b0b78ac":"> Clearly lower fare casualities are more","c8f58dd2":"### Model"}}