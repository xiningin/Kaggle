{"cell_type":{"fef33564":"code","bb742468":"code","cc5d8015":"code","2542f0e2":"code","57a46d0a":"code","e2bfa392":"code","39749758":"code","3eae51da":"code","2440087f":"code","b835fb63":"code","33a10900":"code","9aef1d50":"code","4e470bc5":"code","ceea9ab8":"code","bf7871be":"code","d6e81b1b":"code","75c7232d":"code","54b291ac":"code","640f76d5":"code","25897923":"code","937f3fb5":"code","ea71bd08":"code","00aba90d":"code","b3b5c249":"code","193ff999":"code","a6c87147":"code","77ac9be2":"code","e1b4a8d9":"code","34958e39":"code","4a3bc163":"code","529ab0e5":"code","3b8bc769":"code","bcdbc388":"code","caa6833c":"code","351d02f8":"code","687f7f15":"code","740a3a81":"markdown","a3eb0552":"markdown","802961f6":"markdown","f8703730":"markdown","af306713":"markdown","0ffdd037":"markdown","4a68dc49":"markdown","675516f6":"markdown","47c7396e":"markdown","062530ee":"markdown","d88f7920":"markdown","9c62ba82":"markdown","36071cb1":"markdown","cbc175ee":"markdown","b8726066":"markdown","a8d31d18":"markdown","311a7155":"markdown","9377477a":"markdown","01dd04e3":"markdown","7b377f3b":"markdown","1d0d5631":"markdown","42aa0484":"markdown","e78f2e6b":"markdown","507f4421":"markdown","92c497fd":"markdown","3514a4b1":"markdown","664f7b70":"markdown","d54f87be":"markdown","2ceb6935":"markdown","e4760bfc":"markdown","09476e8a":"markdown","78092e01":"markdown","ef583d6f":"markdown","25ab1eb9":"markdown","8e772c41":"markdown","b72c61e0":"markdown","72e47b28":"markdown","53fc47ea":"markdown","1d99c6ee":"markdown","e2e41e4e":"markdown","be7c0a8b":"markdown","8ecff72f":"markdown","e2fde64d":"markdown","d771b591":"markdown","27751974":"markdown","60db1fc9":"markdown","d20deef3":"markdown","6688f44a":"markdown","3d45360c":"markdown","54e6f995":"markdown","c15272fa":"markdown","3f12a80c":"markdown","84ea2797":"markdown","dc317336":"markdown","cf0882d7":"markdown","08c172e5":"markdown","b4e38c12":"markdown","737d09fa":"markdown"},"source":{"fef33564":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bb742468":"def square_sum1(n):\n    \"\"\"\n    Takes an input n and return sum of the squares of numbers from 0 to n\n    \n    \"\"\"\n    sum_ = 0\n    for x in range(0,n+1):\n        sum_ = sum_ + x**2\n    \n    return sum_","cc5d8015":"square_sum1(3)","2542f0e2":"def square_sum2(n):\n    result = n*(n+1)*(2*n+1)\/6\n    return result","57a46d0a":"square_sum2(3)","e2bfa392":"%timeit square_sum1(3)","39749758":"%timeit square_sum2(3)","3eae51da":"def find_first_index(list1):\n    print(list1[0])\n    \nprint(\"First index of [1,2,3] is :\")\nfind_first_index([1,2,3])\n\nprint(\"First index of [2,3,4,5,6,7,8,9,10] is :\")\nfind_first_index([2,3,4,5,6,7,8,9,10])","2440087f":"def values_of_list(list1):\n    for each in list1:\n        print(each)\n\nlist1 = [1,2]\nlist2 = [3,4,5,6,7]\n\nprint(\"Values of list1\") \nvalues_of_list(list1)\n\nprint(\"Values of list2\")\nvalues_of_list(list2)","b835fb63":"def cubic_big_o(list1):\n    for item1 in list1:\n        for item2 in list1:\n            for item3 in list1:\n                print(item1, item2, item3)\n                \ncubic_big_o([1,2,3])\n        ","33a10900":"def linear_big_o(list1):\n    for each in list1:\n        print(each)\n        \nlinear_big_o([1,2]) # Scale of this algorithm is O(n)","9aef1d50":"def linear_big_o_1(list1):\n    for each in list1:\n        print(each)\n    for each in list1:\n        print(each)\n        \nlinear_big_o_1([1,2]) # Scale of this algorithm is O(2n)","4e470bc5":"def example(list1):\n    print(list1[0])\n\nexample([1,2])  # scale is O(1)","ceea9ab8":"def example(list1):\n    print(list1[0])\n    for each in list1:\n        print(each)\n\nexample([1,2])  # scale is O(1+n), here is 1 is insignificant constant","bf7871be":"n = 2\nfor x in range(n):\n    for y in range(n):\n        print(\"example1\")","d6e81b1b":"n = 2 \nfor x in range(n):\n    print(\"example2\")","75c7232d":"n = 2 \nfor x in range(n):\n    print(\"1\")\nfor x in range(n):\n    print(\"2\")\nfor x in range(n):\n    print(\"3\")","54b291ac":"list1 = [[1,2,3],[4,5,6]]\n\nimport copy\nlist2 = copy.deepcopy(list1)\nprint(\"list2:\",list2)\n\nlist1[0][2] = 100\nprint(\"list1:\", list1)\nprint(\"list2 after list1 changed:\", list2)\n","640f76d5":"import copy\nfamily = {\"father\":\"john\", \"mother\":\"linda\", \"pets\":[\"cat\"]}\nnew_family = copy.copy(family)\n\nprint(\"new_family =\", new_family)\n\n# adding new item in family\nfamily[\"child\"]=\"maria\" \nprint(\"new_family after adding new item Child in family =\", new_family)\n\n# adding new item in list of pets\nfamily[\"pets\"].append(\"dog\")\n\nprint(\"new_family after adding item of pets in family\", new_family)","25897923":"import copy\nold_list = [[1,2,3,4]]\nnew_list = copy.copy(old_list)\nold_list[0][1]=100\n\nprint(\"old_list:\", old_list)\nprint(\"new_list:\", new_list)\n","937f3fb5":"list1=[1,2,3]\nlist1[1]=1000\nprint(list1)\ntup =(1,2,3)\n# tup[1]=100 # it can not be changed. ","ea71bd08":"# If we want to learn what copy() function does?\n\nhelp(copy.copy)","00aba90d":"copy.copy.__doc__","b3b5c249":"# If we want to learn what are the attributes and methods of copy() function?\ndir(copy.copy)","193ff999":"list1 = [1,2,3,4,5,6]\nprint(\"first item of list1:\", list1[0])\nprint(\"last item of list1:\", list1[-1])\nprint(\"2nd item starting from end:\", list1[-2])","a6c87147":"def print_items(*args):\n    for each in args:\n        print(each)\n\nprint_items(1,2,3,4,5)","77ac9be2":"def print_items(**kwargs):\n    for each in kwargs:\n        print(each,\"-->\", kwargs[each])\n        \nprint_items(a=1, b=2, c=3)","e1b4a8d9":"def print_items(**kwargs):\n    for keys, values in kwargs.items():\n        print(keys,\"-->\", values)\n        \nprint_items(a=1, b=2, c=3)","34958e39":"list1 = [0,1,2,3,4,5,6,7,8,9,10,11,12]\n\nfrom random import shuffle\nshuffle(list1)  # making random\nprint(\"shuffled:\", list1)\nlist1.sort()    # turning back to first situation\nprint(\"back to initial:\", list1)","4a3bc163":"a = \"HelloWorld\"\njoined = \".\".join(a)\nprint(\"joined\",joined)\nsplitted = joined.split(\".\")\nprint(\"splitted\",splitted)\nprint(\"\".join(splitted))","529ab0e5":"string = \"    trial    \"\nprint(string.lstrip())  # deleting leading whitespace\nprint(string.rstrip())  # deleting trailing whitespace\nprint(string.strip())   # deleting both whitespaces","3b8bc769":"a = \"world\"\nprint(a.upper())\nprint(a.upper().lower())","bcdbc388":"def trial():\n    \"Complete the definition later\"\n    pass","caa6833c":"for each in range(10):\n    print(each)\n    if each == 5:\n        break","351d02f8":"for each in range(10):\n    if each % 2 == 0:\n        continue   # skips rest of the code from here\n    print(each, \"is odd number\")\n        ","687f7f15":"for each in range(10):\n    if each == 2:\n        continue    # when each = 2, skips rest of the code, moves on to next iteration, does not print \"a\"\n        print(\"a\")\n    print(each)       ","740a3a81":"* Break:\n* It is used in order to finalize or get out from a loop (for loop, while loop etc).**","a3eb0552":"## Examples:","802961f6":"* For above example() function:\n* Scale of first one is O(1)\n* Scale of second one is O(1+n), if n is infinite then n+1 is infinite; therefore 1 is insignificant constant.\n* In this case, scale of both example() function is O(n)","f8703730":"<a id=\"2\"><\/a>\n## 2.Algorithm and Code complexity","af306713":"<a id=\"3\"><\/a>\n## 3.Big-O Notation","0ffdd037":"## **Please upvote if you like my kernel!**","4a68dc49":"* Index starts from 0 in normal situation.\n* For example, In a list, we can reach the items by indexing zeroth, first, second, third etc element.\n* Negative index is used to reach the items starting from the end of list not from the begining.","675516f6":"<a id=\"8\"><\/a>\n## 5.3. Cubic Big-O \/ O(n^3)","47c7396e":"<a id=\"20\"><\/a>\n## 7.10. Pass, Break and Continue","062530ee":"![image.png](attachment:image.png)","d88f7920":"* Big-O defines a functions complexiy or bigerness.\n* Big-O analysis is also named as asympotic analysis.\n* Some of Big-O function as below:\n* As type of input changes from costant(can be any number) through Exponential, Big-O complexity increases and calculation time increases.\n* So, being in green area in Big-O complexity chart in coding, results most time effective and less time consuming softwares. ","9c62ba82":"* Strings may have spaces beginning of text and end of text.\n* \"      text\" ---> if it has space beginning named leading whitespace\n* \"text      \" ---> if it has space end named trailing whitespace","36071cb1":"<a id=\"14\"><\/a>\n## 7.4. What is negative index?","cbc175ee":"First algorithm: Create using for loop","b8726066":"<a id=\"16\"><\/a>\n## 7.6. How do you make a list random?","a8d31d18":"<a id=\"17\"><\/a>\n## 7.7. How to use join() and split() ?","311a7155":"<a id=\"18\"><\/a>\n## 7.8. Leading and Trailing Whitespace","9377477a":"<a id=\"7\"><\/a>\n## 5.2. Linear Big-O \/ O(n)","01dd04e3":"* SHALLOW COPY\n* If we change the item that we copy, created item also being changed.\n* Let say i have a dictioanary named \"family\".\n* I created the dictionary named \"new_family\" by copying \"family\".\n* Then i updated \"family\" by adding new key \"child\" and value \"maria\".\n* I checked new_family, expecting to have \"child\":\"maria\", but i could not although we copy it shallow.\n* So, how this is a shallow copy?\n* If there is some object in dictionary like list or user defined objects instead of primitive datatype, then shallow works.\n* For example: I updated the \"pets\" by adding new item into its list in \"family\", then \"new_family\" also changed. ","7b377f3b":"* For above, Big-O performance is O(3n)\n* 3 is insignificant constant, and performance is O(n).","1d0d5631":"* Continue:\n* In a loop, skip the current iteration but continue the next iteration.\n* The continue statement is used to skip the rest of the code inside a loop for the current iteration only. Loop does not terminate but continues on with the next iteration.","42aa0484":"<a id=\"6\"><\/a>\n## 5.1. Constant Big-O \/ O(1)","e78f2e6b":"* In this type, time complexity is not dependent on input size.\n* Increasing or decreasing input size does not change output time complexity.\n* In below example, Big-O is contant for two lists because algorithm makes one operation for each.","507f4421":"* It explains that copy.copy() is used for shallow copy and advising us to see __doc__ for more info.\n* Let us see doc string:","92c497fd":"Second algorithm : Create using formula","3514a4b1":"# Big-O Notation, Code Complexity and Some Python Basics","664f7b70":"* For above example1: Big-O performance (performance = time complexity) is O(n^2)","d54f87be":"<a id=\"19\"><\/a>\n## 7.9. How to convert text to lowercase and uppercase?","2ceb6935":"* For above example2: Big-O performance is O(n).","e4760bfc":"<a id=\"15\"><\/a>\n## 7.5. What is *args and *kwargs?","09476e8a":"* DEEP COPY\n* If we change the item that we deep copy, created item does not change. \n* Let's say i have a list1\n* I created list2 by deep copying list1.\n* In this case, if something changes in list1; list2 is not being effected.\n* Deep copy example:","78092e01":"* List is changable, can be add ro remove items.\n* Tuple can not be changed.\n* In an algorithm, if you want the items that you created can not be changed by anyone, than you can use tuple.","ef583d6f":"<a id=\"11\"><\/a>\n## 7.1. What is the difference between deep copy and shallow copy?","25ab1eb9":"* kwargs used for dictionaries:","8e772c41":"* Lets code two different algorithms for this purpose:","b72c61e0":"* So i have created 2 different algorithms, each gives same results\n* Which algoritm should i use then?\n* I can compare the calculation time of each algorithm and pick the faster one.","72e47b28":"<a id=\"9\"><\/a>\n## 6. Calculating Scale of Big-O","53fc47ea":"* As we can see, the calculation time of second algorithm is shorter than the first one.\n* We can quikly say than second one shoul be prefered.\n* However, calculation time may not be qood to get a decision because it is also dependent on hardware of PC.\n* So, in general, Big O notation is being used on comparison of algorithms","1d99c6ee":"<a id=\"1\"><\/a>\n## 1.Loading Libraries","e2e41e4e":"For further reading please refer:\n\nhttps:\/\/www.integralist.co.uk\/posts\/calculating-bigo\/\n\nhttps:\/\/www.integralist.co.uk\/posts\/algorithmic-complexity-in-python\/","be7c0a8b":"![image.png](attachment:image.png)","8ecff72f":"* help() : Shows the explenation of desired function as string\n* dir() : Shows all the features \/ methods of desired function","e2fde64d":"<a id=\"5\"><\/a>\n## 5.Big-O Examples","d771b591":"![image.png](attachment:image.png)","27751974":"![image.png](attachment:image.png)","60db1fc9":"## Table of Contents\n* [1. Loading Libraries](#1) <br>\n* [2. Algorithm and Code Complexity](#2) <br>\n* [3. Big-O Notattion](#3) <br>\n* [4. Big-O \/ Omega \/ Teta](#4) <br>\n* [5. Big-O Examples](#5) <br>\n    * [5.1. Constant Big-O](#6) <br>\n    * [5.2. Linear Big-O](#7) <br>\n    * [5.3. Cubic Big-O](#8) <br>\n* [6. Calculating scale of Big-O](#9) <br>\n* [7. Some Python Basics](#10) <br>\n    * [7.1. What is the difference between deep copy and shallow copy?](#11) <br>\n    * [7.2. What is the difference between list and tuple?](#12) <br>\n    * [7.3. What is the difference between help() and dir() functions](#13) <br>\n    * [7.4. What is negative index?](#14) <br>\n    * [7.5. What is *args and **kwargs?](#15) <br>\n    * [7.6. How to make a list random?](#16) <br>\n    * [7.7. How to use join() and split()](#17) <br>\n    * [7.8. Leading and Trailing Whitespace](#18) <br>\n    * [7.9. How to convert text lowercase and uppercase?](#19) <br>\n    * [7.10. Pass, Break and Continiue](#20) <br>   \n","d20deef3":"* Algorithm : It is kind of a formula aiming to solve a problem.\n* Code complexity : Is a software metric being used to understand the complexity of algorithm\n* If the problem is to sort the numbers in a series, then the solution formula can be named as sorting algorithm.\n* There are several sorting algo --> Buble sort and selection sort algorithms\n* Question is : Which algorithm should i use for a sorting problem?\n* Lets make an example for better understanding:\n* I have a formula that calculates the sum of squares of numbers from 1 to n :","6688f44a":"<a id=\"12\"><\/a>\n## 7.2. What is the difference between list and tuple?","3d45360c":"<a id=\"4\"><\/a>\n## 4.Big-O \/ Omega \/ Teta","54e6f995":"* Pass:\n* Let say we define a function and want to complete the definition later.\n* In this case we should close the function with \"pass\".","c15272fa":"* For above example: \n* Scale of the algorithm is O(2n).\n* For n times of input, gives n times of output 2 times. \n* For infinite times of output (n=infinite), gives infinite times of output, because 2*infine = infinite\n* In this exampe 2 is insignificant constant and it can be neglegable.\n* Thus , for both first and second example, scale is O(n).","3f12a80c":"* Big-O : Testing the code complexity in the worst case scenario\n* Omega : Testing the code complexity in the best case scenario\n* Tetam : Testing the code complexity in the mid case scenario\n* Example : Let's say we have a list containing 2,3,4 numbers in random order.\n* Our aim is to find the Big-O rate of the algoritm that searches and find \"2\" and gives me the index of it.\n* There are three possibility of order for the list: \"4,3,2\" or \"3,2,4\" or \"2,3,4\".\n* So, algoritm will find 2 quickly in 3rd possibility; in a mid time in 2nd possibility; latest in 1st possibility.\n* Then, we can say that Big-O rate of this algoritm is 2 seconds, becasue it is 2 seconds according to the worst case scenario. \n","84ea2797":"* Flexible arguments:\n* While creating a function, if we don't know how many or which arguments we use, we can use *args.","dc317336":"* In this type, If input size is n, then operation time will be n^3. \n* In below example: cubic_big_o algorithm calls 27 times print function with an input of 3 size list.\n* So time complexity of this algorithm is cubic.","cf0882d7":"* In this type, time complexity increases linearly with input size.\n* In below example: if list size is 2, then values_of_list function will call print function 2 times.\n* If list size is 5, then values_of_list function will call print function 5 times.\n* So we can say that, Big-O of values_of_list algorithm is Linear. \n","08c172e5":"* For above example: \n* Scale of the algorithm is O(n)\n* For n size of input, gives n times of output.\n* For infinite size of input, algorithm gives infinite output.","b4e38c12":"<a id=\"13\"><\/a>\n## 7.3. What is the difference between help() and dir() functions?","737d09fa":"<a id=\"10\"><\/a>\n## 7. Some Python Basics"}}