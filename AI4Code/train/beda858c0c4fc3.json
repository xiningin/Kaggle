{"cell_type":{"6311fae5":"code","bbf2b629":"code","16e771de":"code","418c386f":"code","e2d39004":"code","37e34dfe":"code","44844838":"code","5b92bcec":"code","b4b3c131":"code","f16e08ee":"code","c0b84e92":"code","67acc80e":"code","9cd895f6":"code","d35c7764":"code","33347f79":"code","a9f6125d":"code","323f4e76":"code","59c6688e":"code","e407663b":"code","01cb72c5":"code","a4095f9c":"code","621f4621":"code","fc1b0ca6":"code","7decf80a":"code","d0a5b04f":"code","f8bc96fe":"code","05e57b15":"code","71146576":"code","04801f12":"code","16c8bc1b":"code","677e40cb":"code","bea4fcfa":"code","ed2f3fc7":"code","79acd730":"code","344bd4bf":"code","17af18e2":"code","7ec0ddef":"code","a0cd706b":"markdown","f0fbfb56":"markdown","334f3eed":"markdown","dc7283cc":"markdown","e37af372":"markdown","9de58ffe":"markdown","5d27adda":"markdown","e6914ad3":"markdown","8e8adb52":"markdown","24fe83bc":"markdown","4c2b2b3d":"markdown","009f4978":"markdown"},"source":{"6311fae5":"import pandas as pd\nimport numpy as np\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBRegressor\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score\nimport matplotlib.pyplot as plt\n%matplotlib inline","bbf2b629":"train_path = '..\/input\/learn-together\/train.csv'\ntest_path = '..\/input\/learn-together\/test.csv'\ntrain_df = pd.read_csv(train_path, index_col='Id')\ntest_df = pd.read_csv(test_path, index_col='Id')\ntrain_df.head()","16e771de":"test_df.head()","418c386f":"train_df.dtypes","e2d39004":"# Print columns name\ntrain_df.columns","37e34dfe":"X = train_df.drop('Cover_Type', axis = 1)\ny = train_df['Cover_Type']","44844838":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state = 0)","5b92bcec":"rfc = RandomForestClassifier(n_estimators=100)\n\nrfc.fit(X_train, y_train)\n\nrfc_pred = rfc.predict(X_test)","b4b3c131":"print(classification_report(y_test,rfc_pred))","f16e08ee":"print(mean_absolute_error(rfc_pred, y_test))","c0b84e92":"no_estimators = [20,30,40,50,60,80,100,120,140,160,180,200,210,240,260,280,300,350,400, 420]","67acc80e":"def getmae(X,y,K,v):\n    rf = RandomForestClassifier(n_estimators=i)\n    rf.fit(X, y)\n    rf_pred = rf.predict(K)\n    mae = mean_absolute_error(rf_pred, v)\n    print('With no of estimators =' + str(i) + ',' + ' mae =' + str(mae))\n    \n    \n    \n    ","9cd895f6":"for i in no_estimators:\n    getmae(X_train, y_train, X_test, y_test)","d35c7764":"# It appears using 350 estimators offers a slightly better mean absolute error, but not highly significant.\n\nrfc = RandomForestClassifier(n_estimators=100)\n\nrfc.fit(X, y)\n","33347f79":"from sklearn.svm import SVC","a9f6125d":"svm_model = SVC()","323f4e76":"svm_model.fit(X_train, y_train)","59c6688e":"svm_pred = svm_model.predict(X_test)","e407663b":"print(mean_absolute_error(svm_pred, y_test))","01cb72c5":"param_grid = {'C': [0.1,1, 10, 100, 1000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']} ","a4095f9c":"from sklearn.model_selection import GridSearchCV","621f4621":"grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=3)","fc1b0ca6":"grid.fit(X_train, y_train)","7decf80a":"grid.best_params_","d0a5b04f":"grid.best_estimator_","f8bc96fe":"grid_predictions = grid.predict(X_test)","05e57b15":"print(mean_absolute_error(grid_predictions, y_test))","71146576":"svm_model2 = SVC()","04801f12":"svm_model2.fit(X, y)","16c8bc1b":"param_grid2 = {'C': [0.1,1, 10, 100, 1000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']} ","677e40cb":"grid2 = GridSearchCV(SVC(),param_grid2,refit=True,verbose=3)","bea4fcfa":"grid2.fit(X, y)","ed2f3fc7":"grid2.best_params_","79acd730":"grid2.best_estimator_","344bd4bf":"preds2 = grid2.predict(test_df)","17af18e2":"# Get predictions\npreds = rfc.predict(test_df)\n","7ec0ddef":"test_ids = test_df.index\n\noutput = pd.DataFrame({'Id': test_ids,\n                       'Cover_Type': preds2})\noutput.to_csv('submission.csv', index=False)\n\noutput.head()\n","a0cd706b":"*Since the error value is very close to that obtained with a Random Forest model, we can check if there would be an improvement with the entire data set*","f0fbfb56":"**With Grid Search**","334f3eed":"# Output","dc7283cc":"*First, I need to define my X and y variables*","e37af372":"## Importing libraries","9de58ffe":"1. ## Get the list of variables and data types","5d27adda":"**Getting predictions based on the best parameters for SVM**","e6914ad3":"## Ramdom Forest Classifier","8e8adb52":"## Load data","24fe83bc":"**Using Support Vector Machines (SVM)**","4c2b2b3d":"### Objective:\nThe goal is to predict an integer classification for the forest cover type.","009f4978":"# Roosevelt National Forest Classification\nClassifying forest types based on information about the area"}}