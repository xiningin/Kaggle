{"cell_type":{"4bf1b51f":"code","00b0b7e0":"code","6542bd70":"code","f5493df8":"code","8fc3ee97":"code","b5771781":"code","81a10516":"code","8990f335":"code","9800176b":"code","989d2a85":"code","58f27275":"code","c790937b":"code","c07f692f":"code","f346dfcd":"code","dd6ef62d":"code","4f276659":"code","be0eef26":"code","f8948291":"code","d1555352":"markdown","e67c3f93":"markdown","b9c431f8":"markdown","23beb91f":"markdown","c41607d5":"markdown"},"source":{"4bf1b51f":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom tensorflow.keras import metrics\nfrom keras.utils import to_categorical\nfrom sklearn.metrics import accuracy_score \nfrom tensorflow.keras.utils import plot_model\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom keras.layers import Dense, Conv2D, Flatten, MaxPooling2D, AveragePooling2D, Dropout, BatchNormalization, Activation\n\nplt.style.use('ggplot')","00b0b7e0":"os.listdir('\/kaggle\/input\/digit-recognizer')","6542bd70":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\n\nplt.figure(figsize = (12,8))\nsns.countplot(x=\"label\", data=train)","f5493df8":"features = train.drop(\"label\", axis=1)\nlabel = train[\"label\"]\n\nfeatures = np.array(features, dtype=\"float32\")\nlabel = np.array(label)\ntest = np.array(test, dtype=\"float32\")","8fc3ee97":"X_train, X_val, y_train, y_val = train_test_split(features, label, test_size = 0.05, random_state = 0)","b5771781":"X_train = X_train.reshape(X_train.shape[0],28,28,1)\nX_val = X_val.reshape(X_val.shape[0],28,28,1)\ntest = test.reshape(test.shape[0],28,28,1)\ny_train = to_categorical(y_train)\ny_val = to_categorical(y_val)","81a10516":"print(\"Shape of X_train: \", X_train.shape)\nprint(\"Shape of Y_train: \", y_train.shape)\nprint(\"Shape of X_val: \", X_val.shape)\nprint(\"Shape of Y_val: \", y_val.shape)\nprint(\"Shape of Test Set: \", test.shape)","8990f335":"plt.imshow(X_train[0], cmap='cividis')","9800176b":"chanDim = 3\nmodel=Sequential()\n\nmodel.add(Conv2D(32, (3, 3), padding=\"same\",input_shape=(28,28,1)))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(Conv2D(32, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(10))\nmodel.add(Activation(\"softmax\"))\n\n\nmetrics = ['accuracy',metrics.Precision(name='precision'),metrics.Recall(name='recall')] \nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=metrics)","989d2a85":"model.summary()","58f27275":"plot_model(model,dpi=300)","c790937b":"HR2 = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=20)","c07f692f":"N = 20\n\nplt.figure()\nplt.plot(np.arange(0, N), HR2.history[\"loss\"], label=\"Training Loss\")\nplt.plot(np.arange(0, N), HR2.history[\"val_loss\"], label=\"Validation Loss\")\nplt.title(\"Training Loss and Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend(loc=\"upper right\")","f346dfcd":"plt.figure()\nplt.plot(np.arange(0, N), HR2.history[\"accuracy\"], label=\"Training Accuracy\")\nplt.plot(np.arange(0, N), HR2.history[\"val_accuracy\"], label=\"Validation Accuracy\")\nplt.title(\"Training Accuracy and Validation Accuracy\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Accuracy\")\nplt.legend(loc=\"lower right\")","dd6ef62d":"plt.figure()\nplt.plot(np.arange(0, N), HR2.history[\"precision\"], label=\"Training Precision\")\nplt.plot(np.arange(0, N), HR2.history[\"val_precision\"], label=\"Validation Precision\")\nplt.title(\"Training Precision and Validation Precision\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Precision\")\nplt.legend(loc=\"lower right\")","4f276659":"plt.figure()\nplt.plot(np.arange(0, N), HR2.history[\"recall\"], label=\"Training Recall\")\nplt.plot(np.arange(0, N), HR2.history[\"val_recall\"], label=\"Validation Recall\")\nplt.title(\"Training Recall and Validation Recall\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Recall\")\nplt.legend(loc=\"lower right\")","be0eef26":"predIdxsVal = model.predict(X_val)\npredIdxsVal = np.argmax(predIdxsVal, axis=1)\n\nAccuracy = (accuracy_score(y_val.argmax(axis=1),predIdxsVal)*100)\nprint('VALIDATION ACCURACY in Percentage:', round(Accuracy,2),'%')\n\nprint(\"\")\nprint(\"===============================================================================================================\")\nprint(\"\")\n\nprint(classification_report(y_val.argmax(axis=1), predIdxsVal))","f8948291":"predIdxs = model.predict(test)\npredIdxs = np.argmax(predIdxs, axis=1)\n\nsubmission = pd.DataFrame(data=np.array(predIdxs), columns=['Label'])\nsubmission.index = np.arange(1, len(submission)+1)\nsubmission[\"ImageId\"] = submission.index\nsubmission = submission[[\"ImageId\", \"Label\"]]\n\nsubmission.to_csv(\"submission.csv\", index=False)","d1555352":"## ***Training of Model*** ","e67c3f93":"## ***Model Construction***","b9c431f8":"## ***Data Loading and Preprocessing***","23beb91f":"## ***Performance Analysis***","c41607d5":"## ***Prediction on Test Set and Submission CSV File Generation***"}}