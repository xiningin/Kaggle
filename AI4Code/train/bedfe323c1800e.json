{"cell_type":{"11c67eef":"code","2a0604c8":"code","eca80a32":"code","0dbbc9fc":"code","f37e1d0c":"code","29e4e2a1":"code","d1e6eb7b":"code","60b9402a":"code","168d2287":"code","5317373e":"code","11ca42d9":"code","6aa29d63":"code","6ae89bd3":"code","c9e49947":"code","76f08951":"code","4e1f981c":"code","f75dedd6":"code","f0e6d9c7":"code","18126512":"code","10d3ac48":"code","bba41f89":"code","453f0d98":"code","a4f2d003":"code","1b6462b2":"code","1576634a":"code","e7556dbd":"code","fbbca4c1":"code","ac9cf86b":"code","fa655473":"code","f1d10f3a":"code","7f0a2fc0":"code","d7075baa":"code","92a7a649":"code","2837d003":"code","2e839bfb":"code","01220b1f":"code","8eca7470":"markdown","e8d483fc":"markdown","ef87fdd4":"markdown","cb0d57f6":"markdown","5c788a4e":"markdown","0b528e9a":"markdown","49ffce06":"markdown","0a0ac619":"markdown","ed73f428":"markdown","3c1e4f76":"markdown","f0ad33d7":"markdown","e725d4d6":"markdown","70345a55":"markdown","e93e2359":"markdown","486c59cf":"markdown","98a34cf8":"markdown","c3ec0d81":"markdown","697e3cfb":"markdown","d1f5c564":"markdown","630e102d":"markdown","3995adb2":"markdown","a05c88b7":"markdown","ed0d3fc9":"markdown","f7128c3f":"markdown","329f478b":"markdown","08c8ebc4":"markdown","43465980":"markdown","3b31571b":"markdown","be81812c":"markdown","628acbd9":"markdown","51a5fb13":"markdown","c9a3cb47":"markdown","e83c704b":"markdown","62a75127":"markdown","2f13204e":"markdown","45ddd771":"markdown","67727ede":"markdown","261a8a6d":"markdown","bcb217e4":"markdown","bb41256c":"markdown","e53f806b":"markdown","e77c2116":"markdown","711cb460":"markdown","58b583a3":"markdown","ba94297c":"markdown","a93b66ac":"markdown","fab54d16":"markdown","e606d320":"markdown","8b6c77cc":"markdown","2eec2757":"markdown","052b784b":"markdown","7e062f35":"markdown","0b6c9b97":"markdown","6cb8ab20":"markdown","54784e57":"markdown","9b44bf93":"markdown","760d435f":"markdown","c2cae037":"markdown","b41830a1":"markdown","cf4969a0":"markdown","7caa176c":"markdown","dc8acf14":"markdown","acf3feb3":"markdown","888162b3":"markdown","f74472b4":"markdown","f1f2d33c":"markdown","ce77a7ba":"markdown","7fce0862":"markdown","352c4b55":"markdown","4397b2bb":"markdown","5772e97e":"markdown","beda2ba3":"markdown","15a3480a":"markdown","78cf4f28":"markdown","67b59362":"markdown","d526d8e4":"markdown","e280e048":"markdown","ba06157a":"markdown","dd7f5a8f":"markdown","280515f8":"markdown","835247fb":"markdown","78ad4342":"markdown","1fbec9d3":"markdown","3516a959":"markdown","4295e6b1":"markdown","f50a1d45":"markdown","f5da6721":"markdown","4b1650ca":"markdown","8ea54163":"markdown","7f0b51ee":"markdown","02c50800":"markdown","0dff3cae":"markdown","aa170025":"markdown","8e804cbe":"markdown","6f89d072":"markdown","dbb0fe76":"markdown","c9880f42":"markdown","81ac5812":"markdown","e809fd01":"markdown","be6a8f45":"markdown"},"source":{"11c67eef":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","2a0604c8":"inputs = keras.Input(shape=(784,))","eca80a32":"# \uc124\uba85 \ub9cc\uc744 \uc704\ud568\uc785\ub2c8\ub2e4.\nimg_inputs = keras.Input(shape=(32, 32, 3))","0dbbc9fc":"inputs.shape","f37e1d0c":"inputs.dtype","29e4e2a1":"dense = layers.Dense(64, activation=\"relu\")\nx = dense(inputs)","d1e6eb7b":"x = layers.Dense(64, activation=\"relu\")(x)\noutputs = layers.Dense(10)(x)","60b9402a":"model = keras.Model(inputs=inputs, outputs=outputs, name=\"mnist_model\")","168d2287":"model.summary()","5317373e":"keras.utils.plot_model(model, \"my_first_model.png\")","11ca42d9":"keras.utils.plot_model(model, \"my_first_model_with_shape_info.png\", show_shapes=True)","6aa29d63":"(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n\nx_train = x_train.reshape(60000, 784).astype(\"float32\") \/ 255\nx_test = x_test.reshape(10000, 784).astype(\"float32\") \/ 255\n\nmodel.compile(\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    optimizer=keras.optimizers.RMSprop(),\n    metrics=[\"accuracy\"],\n)\n\nhistory = model.fit(x_train, y_train, batch_size=64, epochs=2, validation_split=0.2)\n\ntest_scores = model.evaluate(x_test, y_test, verbose=2)\nprint(\"Test loss:\", test_scores[0])\nprint(\"Test accuracy:\", test_scores[1])","6ae89bd3":"model.save(\"path_to_my_model\")\ndel model\n# \uc21c\uc218\ud558\uac8c \ud30c\uc77c\ub85c\ubd80\ud130 \uc815\ud655\ud788 \uac19\uc740 \ubaa8\ub378\uc744 \uc7ac\uc0dd\uc131\ud569\ub2c8\ub2e4:\nmoodel = keras.models.load_model(\"path_to_my_model\")","c9e49947":"encoder_input = keras.Input(shape=(28, 28, 1), name=\"img\")\nx = layers.Conv2D(16, 3, activation=\"relu\")(encoder_input)\nx = layers.Conv2D(32, 3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(3)(x)\nx = layers.Conv2D(32, 3, activation=\"relu\")(x)\nx = layers.Conv2D(16, 3, activation=\"relu\")(x)\nencoder_output = layers.GlobalMaxPooling2D()(x)\n\nencoder = keras.Model(encoder_input, encoder_output, name=\"encoder\")\nencoder.summary()\n\nx = layers.Reshape((4, 4, 1))(encoder_output)\nx = layers.Conv2DTranspose(16, 3, activation=\"relu\")(x)\nx = layers.Conv2DTranspose(32, 3, activation=\"relu\")(x)\nx = layers.UpSampling2D(3)(x)\nx = layers.Conv2DTranspose(16, 3, activation=\"relu\")(x)\ndecoder_output = layers.Conv2DTranspose(1, 3, activation=\"relu\")(x)\n\nautoencoder = keras.Model(encoder_input, decoder_output, name=\"autoencoder\")\nautoencoder.summary()","76f08951":"encoder_input = keras.Input(shape=(28, 28, 1), name=\"original_img\")\nx = layers.Conv2D(16, 3, activation=\"relu\")(encoder_input)\nx = layers.Conv2D(32, 3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(3)(x)\nx = layers.Conv2D(32, 3, activation=\"relu\")(x)\nx = layers.Conv2D(16, 3, activation=\"relu\")(x)\nencoder_output = layers.GlobalMaxPooling2D()(x)\n\nencoder = keras.Model(encoder_input, encoder_output, name=\"encoder\")\nencoder.summary()\n\ndecoder_input = keras.Input(shape=(16,), name=\"encoded_img\")\nx = layers.Reshape((4, 4, 1))(decoder_input)\nx = layers.Conv2DTranspose(16, 3, activation=\"relu\")(x)\nx = layers.Conv2DTranspose(32, 3, activation=\"relu\")(x)\nx = layers.UpSampling2D(3)(x)\nx = layers.Conv2DTranspose(16, 3, activation=\"relu\")(x)\ndecoder_output = layers.Conv2DTranspose(1, 3, activation=\"relu\")(x)\n\ndecoder = keras.Model(decoder_input, decoder_output, name=\"decoder\")\ndecoder.summary()\n\nautoencoder_input = keras.Input(shape=(28, 28, 1), name=\"img\")\nencoded_img = encoder(autoencoder_input)\ndecoded_img = decoder(encoded_img)\nautoencoder = keras.Model(autoencoder_input, decoded_img, name=\"autoencoder\")\nautoencoder.summary()","4e1f981c":"def get_model():\n    inputs = keras.Input(shape=(128,))\n    outputs = layers.Dense(1)(inputs)\n    return keras.Model(inputs, outputs)\n\n\nmodel1 = get_model()\nmodel2 = get_model()\nmodel3 = get_model()\n\ninputs = keras.Input(shape=(128,))\ny1 = model1(inputs)\ny2 = model2(inputs)\ny3 = model3(inputs)\noutputs = layers.average([y1, y2, y3])\nensemble_model = keras.Model(inputs=inputs, outputs=outputs)","f75dedd6":"num_tags = 12 # \uace0\uc720\uc758 \ubb38\uc81c \ud0dc\uadf8\uc758 \uac1c\uc218\nnum_words = 10000 # \ud14d\uc2a4\ud2b8 \ub370\uc774\ud130 \uc804\ucc98\ub9ac \uc2dc\uc5d0 \uc5bb\uc5b4\uc9c4 \uc0ac\uc804\uc758 \ud06c\uae30\nnum_departments = 4 # \uc608\uce21\uc744 \uc704\ud55c \ubd80\uc11c\uc758 \uac1c\uc218\n\ntitle_input = keras.Input(\n    shape=(None,), name=\"title\"\n) # \uac00\ubcc0 \uae38\uc774 \uc815\uc218 \uc218\uc5f4\nbody_input = keras.Input(shape=(None,), name=\"body\") # \uac00\ubcc0 \uae38\uc774 \uc815\uc218 \uc218\uc5f4\ntags_input = keras.Input(\n    shape=(num_tags,), name=\"tags\"\n) # `num_tags` \ud06c\uae30\uc758 \uc774\uc9c4 \ubca1\ud130\n\n# \uc81c\ubaa9 \uc548\uc758 \uac01 \ub2e8\uc5b4\ub4e4\uc744 64\ucc28\uc6d0 \ubca1\ud130\ub85c \uc784\ubca0\ub529\ud569\ub2c8\ub2e4\ntitle_features = layers.Embedding(num_words, 64)(title_input)\n# \ubcf8\ubb38 \uc548\uc758 \uac01 \ub2e8\uc5b4\ub4e4\uc744 64\ucc28\uc6d0 \ubca1\ud130\ub85c \uc784\ubca0\ub529\ud569\ub2c8\ub2e4\nbody_features = layers.Embedding(num_words, 64)(body_input)\n\n# \uc81c\ubaa9 \uc548\uc758 \uc784\ubca0\ub529\ub41c \ub2e8\uc5b4\ub4e4\uc758 \ubc30\uc5f4\uc744 \ub2e8\uc77c 128\ucc28\uc6d0 \ubca1\ud130\ub85c \ucd95\uc18c\uc2dc\ud0b5\ub2c8\ub2e4\ntitle_features = layers.LSTM(128)(title_features)\n# \ubcf8\ubb38 \uc548\uc758 \uc784\ubca0\ub529\ub41c \ub2e8\uc5b4\ub4e4\uc758 \ubc30\uc5f4\uc744 \ub2e8\uc77c 32\ucc28\uc6d0 \ubca1\ud130\ub85c \ucd95\uc18c\uc2dc\ud0b5\ub2c8\ub2e4\nbody_features = layers.LSTM(32)(body_features)\n\n# \uc5f0\uacb0\uc744 \ud1b5\ud574 \ubaa8\ub4e0 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ud2b9\uc131\ub4e4\uc744 \ud558\ub098\uc758 \ud070 \ubca1\ud130\ub85c \ud569\uce69\ub2c8\ub2e4\nx = layers.concatenate([title_features, body_features, tags_input])\n\n# \ud2b9\uc131\ub4e4\uc758 \uac00\uc7a5 \uc704\uc5d0 \uc6b0\uc120\uc21c\uc704 \uc608\uce21\uc744 \uc704\ud55c \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\ub97c \ubd99\uc785\ub2c8\ub2e4\npriority_pred = layers.Dense(1, name=\"priority\")(x)\n# \ud2b9\uc131\ub4e4\uc758 \uac00\uc7a5 \uc704\uc5d0 \ubd80\uc11c \ubd84\ub958\uae30\ub97c \ubd99\uc785\ub2c8\ub2e4\ndepartment_pred = layers.Dense(num_departments, name=\"department\")(x)\n\n# \uc6b0\uc120\uc21c\uc704\uc640 \ubd80\uc11c\ub97c \ubaa8\ub450 \uc608\uce21\ud558\ub294 \uc885\ub2e8 \uac04 \ubaa8\ub378\uc758 \uac1d\uccb4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4\nmodel = keras.Model(\n    inputs=[title_input, body_input, tags_input],\n    outputs=[priority_pred, department_pred],\n)","f0e6d9c7":"keras.utils.plot_model(model, \"multi_input_and_output_model.png\", show_shapes=True)","18126512":"model.compile(\n    optimizer=keras.optimizers.RMSprop(1e-3),\n    loss=[\n        keras.losses.BinaryCrossentropy(from_logits=True),\n        keras.losses.CategoricalCrossentropy(from_logits=True),\n    ],\n    loss_weights=[1.0, 0.2],\n)","10d3ac48":"model.compile(\n    optimizer=keras.optimizers.RMSprop(1e-3),\n    loss={\n        \"priority\": keras.losses.BinaryCrossentropy(from_logits=True),\n        \"department\": keras.losses.CategoricalCrossentropy(from_logits=True),\n    },\n    loss_weights=[1.0, 0.2],\n)","bba41f89":"# \ubaa8\uc870 \uc785\ub825 \ub370\uc774\ud130\ntitle_data = np.random.randint(num_words, size=(1280, 10))\nbody_data = np.random.randint(num_words, size=(1280, 100))\ntags_data = np.random.randint(2, size=(1280, num_tags)).astype(\"float32\")\n\n# \ubaa8\uc870 \ubaa9\ud45c \ub370\uc774\ud130\npriority_targets = np.random.random(size=(1280, 1))\ndept_targets = np.random.randint(2, size=(1280, num_departments))\n\nmodel.fit(\n    {\"title\": title_data, \"body\": body_data, \"tags\": tags_data},\n    {\"priority\": priority_targets, \"department\": dept_targets},\n    epochs=2,\n    batch_size=32,\n)","453f0d98":"inputs = keras.Input(shape=(32, 32, 3), name=\"img\")\nx = layers.Conv2D(32, 3, activation=\"relu\")(inputs)\nx = layers.Conv2D(64, 3, activation=\"relu\")(x)\nblock_1_output = layers.MaxPooling2D(3)(x)\n\nx = layers.Conv2D(64, 3, activation=\"relu\", padding=\"same\")(block_1_output)\nx = layers.Conv2D(64, 3, activation=\"relu\", padding=\"same\")(x)\nblock_2_output = layers.add([x, block_1_output])\n\nx = layers.Conv2D(64, 3, activation=\"relu\", padding=\"same\")(block_2_output)\nx = layers.Conv2D(64, 3, activation=\"relu\", padding=\"same\")(x)\nblock_3_output = layers.add([x, block_2_output])\n\nx = layers.Conv2D(64, 3, activation=\"relu\")(block_3_output)\nx = layers.GlobalAveragePooling2D()(x)\nx = layers.Dense(256, activation=\"relu\")(x)\nx = layers.Dropout(0.5)(x)\noutputs = layers.Dense(10)(x)\n\nmodel = keras.Model(inputs, outputs, name=\"toy_resnet\")\nmodel.summary()","a4f2d003":"keras.utils.plot_model(model, \"mini_resnet.png\", show_shapes=True)","1b6462b2":"(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()\n\nx_train = x_train.astype(\"float32\") \/ 255.0\nx_test = x_test.astype(\"float32\") \/ 255.0\ny_train = keras.utils.to_categorical(y_train, 10)\ny_test = keras.utils.to_categorical(y_test, 10)\n\nmodel.compile(\n    optimizer=keras.optimizers.RMSprop(1e-3),\n    loss=keras.losses.CategoricalCrossentropy(from_logits=True),\n    metrics=[\"acc\"],\n)\n# Colab\uc5d0\uc11c\uc758 \uc2e4\ud589 \uc2dc\uac04\uc744 \uc81c\ud55c\ud558\uae30 \uc704\ud574 \ub370\uc774\ud130\ub97c \uccab 1000\uac1c\uc758 \ud45c\ubcf8\uc73c\ub85c \uc81c\ud55c\ud588\uc2b5\ub2c8\ub2e4.\n# \uc218\ub834\ud560 \ub54c\uae4c\uc9c0 \uc804\uccb4 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \ub300\ud574\uc11c \ud559\uc2b5\uc2dc\ucf1c \ubcf4\uc138\uc694!\nmodel.fit(x_train[:1000], y_train[:1000], batch_size=64, epochs=1, validation_split=0.2)","1576634a":"# 1000\uac00\uc9c0 \uace0\uc720\uc758 \ub2e8\uc5b4\uc5d0 \ub300\ud574 128\ucc28\uc6d0 \ubca1\ud130\ub4e4\ub85c \ub300\uc751\uc2dc\ud0a4\ub294 \uc784\ubca0\ub529\nshared_embedding = layers.Embedding(1000, 128)\n\n# \uac00\ubcc0 \uae38\uc774 \uc815\uc218 \uc218\uc5f4\ntext_input_a = keras.Input(shape=(None,), dtype=\"int32\")\n\n# \uac00\ubcc0 \uae38\uc774 \uc815\uc218 \uc218\uc5f4\ntext_input_b = keras.Input(shape=(None,), dtype=\"int32\")\n\n# \uc785\ub825 \ubaa8\ub450\ub97c \uc778\ucf54\ub529\ud558\uae30 \uc704\ud574 \uac19\uc740 \uce35\uc744 \uc7ac\uc0ac\uc6a9\ud569\ub2c8\ub2e4\nencoded_input_a = shared_embedding(text_input_a)\nencoded_input_b = shared_embedding(text_input_b)","e7556dbd":"vgg19 = tf.keras.applications.VGG19()","fbbca4c1":"features_list = [layer.output for layer in vgg19.layers]","ac9cf86b":"feat_extraction_model = keras.Model(inputs=vgg19.input, outputs=features_list)\n\nimg = np.random.random((1, 224, 224, 3)).astype(\"float32\")\nextracted_features = feat_extraction_model(img)","fa655473":"class CustomDense(layers.Layer):\n    def __init__(self, units=32):\n        super(CustomDense, self).__init__()\n        self.units = units\n    \n    def build(self, input_shape):\n        self.w = self.add_weight(\n            shape=(input_shape[-1], self.units),\n            initializer=\"random_normal\",\n            trainable=True,\n        )\n        self.b = self.add_weight(\n            shape=(self.units,), initializer=\"random_normal\", trainable=True\n        )\n    \n    def call(self, inputs):\n        return tf.matmul(inputs, self.w) + self.b\n\n\ninputs = keras.Input((4,))\noutputs = CustomDense(10)(inputs)\n\nmodel = keras.Model(inputs, outputs)","f1d10f3a":"class CustomDense(layers.Layer):\n    def __init__(self, units=32):\n        super(CustomDense, self).__init__()\n        self.units = units\n    \n    def build(self, input_shape):\n        self.w = self.add_weight(\n            shape=(input_shape[-1], self.units),\n            initializer=\"random_normal\",\n            trainable=True,\n        )\n        self.b = self.add_weight(\n            shape=(self.units,), initializer=\"random_normal\", trainable=True\n        )\n    \n    def call(self, inputs):\n        return tf.matmul(inputs, self.w) + self.b\n    \n    def get_config(self):\n        return {\"units\": self.units}\n\ninputs = keras.Input((4,))\noutputs = CustomDense(10)(inputs)\n\nmodel = keras.Model(inputs, outputs)\nconfig = model.get_config()\n\nnew_model = keras.Model.from_config(config, custom_objects={\"CustomDense\": CustomDense})","7f0a2fc0":"def from_config(cls, config):\n    return cls(**config)","d7075baa":"inputs = keras.Input(shape=(32,))\nx = layers.Dense(64, activation='relu')(inputs)\noutputs = layers.Dense(10)(x)\nmlp = keras.Model(inputs, outputs)","92a7a649":"class MLP(keras.Model):\n    \n    def __init__(self, **kwargs):\n        super(MLP, self).__init__(**kwargs)\n        self.dense_1 = layers.Dense(64, activation='relu')\n        self.dense_2 = layers.Dense(10)\n    \n    def call(self, inputs):\n        x = self.dense_1(inputs)\n        return self.dense_2(x)\n\n# \ubaa8\ub378\uc758 \uac1d\uccb4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\nmlp = MLP()\n# \ubaa8\ub378\uc758 \uc0c1\ud0dc\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574 \ud544\uc694\ud569\ub2c8\ub2e4.\n# \ubaa8\ub378\uc740 \uc801\uc5b4\ub3c4 \ud55c\ubc88 \ud638\ucd9c\ub418\uae30 \uc804\uae4c\uc9c0 \uc0c1\ud0dc\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n_ = mlp(tf.zeros((1, 32)))","2837d003":"features_list = [layer.output for layer in vgg19.layers]\nfeat_extraction_model = keras.Model(inputs=vgg19.input, outputs=features_list)","2e839bfb":"units = 32\ntimesteps = 10\ninput_dim = 5\n\n# Functional \ubaa8\ub378\uc744 \uc815\uc758\ud569\ub2c8\ub2e4\ninputs = keras.Input((None, units))\nx = layers.GlobalAveragePooling1D()(inputs)\noutputs = layers.Dense(1)(x)\nmodel = keras.Model(inputs, outputs)\n\n\nclass CustomRNN(layers.Layer):\n    def __init__(self):\n        super(CustomRNN, self).__init__()\n        self.units = units\n        self.projection_1 = layers.Dense(units=units, activation=\"tanh\")\n        self.projection_2 = layers.Dense(units=units, activation=\"tanh\")\n        # \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c Functional \ubaa8\ub378\n        self.classifier = model\n    \n    def call(self, inputs):\n        outputs = []\n        state = tf.zeros(shape=(inputs.shape[0], self.units))\n        for t in range(inputs.shape[1]):\n            x = inputs[:, t, :]\n            h = self.projection_1(x)\n            y = h + self.projection_2(state)\n            state = y\n            outputs.append(y)\n        features = tf.stack(outputs, axis=1)\n        print(features.shape)\n        return self.classifier(features)\n\n\nrnn_model = CustomRNN()\n_ = rnn_model(tf.zeros((1, timesteps, input_dim)))","01220b1f":"units = 32\ntimesteps = 10\ninput_dim = 5\nbatch_size = 16\n\n\nclass CustomRNN(layers.Layer):\n    def __init__(self):\n        super(CustomRNN, self).__init__()\n        self.units = units\n        self.projection_1 = layers.Dense(units=units, activation=\"tanh\")\n        self.projection_2 = layers.Dense(units=units, activation=\"tanh\")\n        self.classifier = layers.Dense(1)\n    \n    def call(self, inputs):\n        outputs = []\n        state = tf.zeros(shape=(inputs.shape[0], self.units))\n        for t in range(inputs.shape[1]):\n            x = inputs[:, t, :]\n            h = self.projection_1(x)\n            y = h + self.projection_2(state)\n            state = y\n            outputs.append(y)\n        features = tf.stack(outputs, axis=1)\n        return self.classifier(features)\n\n\n# (`state` \uc601 \ud150\uc11c\ub97c \uc0dd\uc131\ud560 \ub54c)\n# `CustomRNN`\uc758 \ub0b4\ubd80 \uacc4\uc0b0\uc774 \uc815\uc801\uc778 \ubb36\uc74c \ud06c\uae30\ub97c \ud544\uc694\ub85c \ud558\uae30 \ub54c\ubb38\uc5d0,\n# `batch_shape` \uc778\uc790\ub85c \uc785\ub825\uc5d0 \ub300\ud574 \uc815\uc801\uc778 \ubb36\uc74c \ud06c\uae30\ub97c \ud2b9\uc815\ud55c\ub2e4\ub294 \uac83\uc744 \uc8fc\ubaa9\ud558\uc138\uc694.\ninputs = keras.Input(batch_shape=(batch_size, timesteps, input_dim))\nx = layers.Conv1D(32, 3)(inputs)\noutputs = CustomRNN()(x)\n\nmodel = keras.Model(inputs, outputs)\n\nrnn_model = CustomRNN()\n_ = rnn_model(tf.zeros((1, 10, 5)))","8eca7470":"\uc774\uc81c \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4:","e8d483fc":"## \uacf5\uc720 \uce35","ef87fdd4":"## functional API\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0","cb0d57f6":"functional API\uc640 \ubaa8\ub378 \uc0c1\uc18d \uc0ac\uc774\uc758 \ucc28\uc774\uc810\uc744 \uae4a\uac8c \uc0b4\ud3b4\ubcf4\uace0 \uc2f6\ub2e4\uba74, [TensorFlow 2.0\uc5d0\uc11c \uc0c1\uc9d5\uc801\uc774\uace0 \uae34\uc694\ud55c API\ub4e4\uc740 \ubb34\uc5c7\uc778\uac00?](https:\/\/blog.tensorflow.org\/2019\/01\/what-are-symbolic-and-imperative-apis.html)\ub97c \uc77d\uc5b4\ubcf4\uc138\uc694.","5c788a4e":"\uc774 `inputs` \uac1d\uccb4 \uc704\uc5d0\uc11c \uce35\uc744 \ud638\ucd9c\ud568\uc73c\ub85c\uc368 \uce35\ub4e4\uc758 \uadf8\ub798\ud504 \uc548\uc5d0 \uc0c8\ub85c\uc6b4 \ub178\ub4dc\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","0b528e9a":"## \uac1c\uc778\ud654 \uce35\uc744 \uc0ac\uc6a9\ud574 API \ud655\uc7a5","49ffce06":"\uc774\uac83\uc740 \uc138 \uac1c\uc758 \uce35\ub4e4\uc774 \uc788\ub294 \uae30\ubcf8\uc801\uc778 \uadf8\ub798\ud504\uc785\ub2c8\ub2e4. functional API\ub97c \uc0ac\uc6a9\ud574 \uc774 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c\ub294, \uc785\ub825 \ub178\ub4dc\ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc5d0\uc11c \uc2dc\uc791\ud558\uc138\uc694:","0a0ac619":"\uce35\ub4e4\uc758 \uadf8\ub798\ud504\uc5d0 \uba87\uac00\uc9c0 \uce35\ub4e4\uc744 \ub354\ud574\ubd05\uc2dc\ub2e4:","ed73f428":"\uc544\ub798\uc758 \ud2b9\uc131\ub4e4\uc740 (\uc774\uac83 \ub610\ud55c \uc790\ub8cc \uad6c\uc870\uc778) Sequential \ubaa8\ub378\ub4e4\uc5d0 \ub300\ud574\uc11c\ub3c4 \ucc38\uc774\uc9c0\ub9cc, (\uc790\ub8cc\uad6c\uc870\uac00 \uc544\ub2cc Python \ubc14\uc774\ud2b8\ucf54\ub4dc\uc778) \uc0c1\uc18d\ub41c \ubaa8\ub378\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 \ucc38\uc774 \uc544\ub2d9\ub2c8\ub2e4.","3c1e4f76":"\ubaa8\ub378 \uc694\uc57d\uc774 \uc5b4\ub5bb\uac8c \uc0dd\uacbc\ub294\uc9c0 \ud655\uc778\ud574\ubd05\uc2dc\ub2e4:","f0ad33d7":"\uc774 \uc2dc\uc810\uc5d0\uc11c, \uce35\ub4e4\uc758 \uadf8\ub798\ud504 \uc548\uc758 \uc785\ub825\ub4e4\uacfc \ucd9c\ub825\ub4e4\uc744 \ud2b9\uc815\ud568\uc73c\ub85c\uc368 `Model`\uc744 \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","e725d4d6":"\uc5b4\ub5a4 \ubaa8\ub378\uc774\ub358\uc9c0 \uce35\uc778 \uac83\ucc98\ub7fc `Input` \uc774\ub098 \ub2e4\ub978 \uce35\uc758 \ucd9c\ub825 \uc704\uc5d0\uc11c \ud638\ucd9c\ud558\uba70 \ub2e4\ub8f0 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub378\uc744 \ud638\ucd9c\ud568\uc73c\ub85c\uc368, \ubaa8\ub378\uc758 \uad6c\uc870\ub9cc\uc744 \uc7ac\uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \uac00\uc911\uce58\ub4e4 \ub610\ud55c \uc7ac\uc0ac\uc6a9\ud569\ub2c8\ub2e4.","70345a55":"\"\uce35 \ud638\ucd9c\" \ud589\ub3d9\uc740 \"inputs\"\uc73c\ub85c\ubd80\ud130 \uc0dd\uc131\ud55c \uc774 \uce35\uc73c\ub85c \ud654\uc0b4\ud45c\ub97c \uadf8\ub9ac\ub294 \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc785\ub825\uc744 `dense` \uce35\uc73c\ub85c \"\ub118\uae30\ub294\" \uac83\uc774\uace0, \ucd9c\ub825\uc73c\ub85c `x`\ub97c \ubc1b\uc2b5\ub2c8\ub2e4.","e93e2359":"functional \ubaa8\ub378\uc740 \ucf54\ub4dc \uc870\uac01\ubcf4\ub2e4 \uc790\ub8cc \uad6c\uc870\uc774\ubbc0\ub85c, \uc548\uc804\ud558\uac8c \uc9c1\ub82c\ud654\ub420 \uc218 \uc788\uace0 \uc6d0\ubcf8 \ucf54\ub4dc\uc5d0 \ub300\ud55c \uc5b4\ub5a0\ud55c \uc811\uadfc \uc5c6\uc774\ub3c4 \uc815\ud655\ud788 \uac19\uc740 \ubaa8\ub378\uc744 \uc7ac\uc0dd\uc131\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ub2e8\uc77c \ud30c\uc77c\ub85c \uc800\uc7a5\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. [\uc9c1\ub82c\ud654 & \uc800\uc7a5 \uac00\uc774\ub4dc](https:\/\/www.tensorflow.org\/guide\/keras\/save_and_serialize\/)\ub97c \ubcf4\uc138\uc694.","486c59cf":"## \uc18c\uac1c","98a34cf8":"\uc9c0\uae08 \ub2e4\ub8e8\uace0 \uc788\ub294 \uce35\ub4e4\uc758 \uadf8\ub798\ud504\ub294 \uc815\uc801\uc778 \uc790\ub8cc \uad6c\uc870\uc774\uae30 \ub54c\ubb38\uc5d0, \uc811\uadfc\uac00\ub2a5\ud558\uace0 \uc810\uac80\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\uac83\uc740 functional \ubaa8\ub378\uc744 \uc774\ubbf8\uc9c0\ub85c \uadf8\ub824\ubcfc \uc218 \uc788\ub294 \uc774\uc720\uc785\ub2c8\ub2e4.","c3ec0d81":"\ucd9c\ub825 \uce35\ub4e4\uc740 \ub2e4\ub978 \uc774\ub984\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \ub2e4\uc74c\uacfc \uac19\uc774 \uc190\uc2e4\uc744 \ud2b9\uc815\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4:","697e3cfb":"#### \ub35c \uc7a5\ud669\ud568","d1f5c564":"#### \uc5f0\uacb0 \uadf8\ub798\ud504\ub97c \uc815\uc758\ud558\ub294 \ub3d9\uc548 \ubaa8\ub378 \uac80\uc99d","630e102d":"# Functional API","3995adb2":"### functional API\uc758 \uc7a5\uc810:","a05c88b7":"\ud558\uc9c0\ub9cc \ud544\uc694\ud55c \uac83\uc744 \ucc3e\uc9c0 \ubabb\ud588\ub2e4\uba74, \uc2a4\uc2a4\ub85c \uce35\uc744 \uc0dd\uc131\ud568\uc73c\ub85c\uc368 API\ub97c \ud655\uc7a5\ud558\uae30 \uc27d\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \uce35\ub4e4\uc740 `Layer` \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\uace0 \ub2e4\uc74c\uc744 \uad6c\ud604\ud569\ub2c8\ub2e4:\n* `call` \uba54\uc18c\ub4dc, \uce35\uc5d0 \uc758\ud574 \uc218\ud589\ub418\ub294 \uacc4\uc0b0\uc744 \ud2b9\uc815\ud569\ub2c8\ub2e4.\n* `build` \uba54\uc18c\ub4dc, \uce35\uc758 \uac00\uc911\uce58\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4(\uc774\uac83\uc740 `__init__`\uc5d0\uc11c\ub3c4 \uac00\uc911\uce58\ub4e4\uc744 \uc0dd\uc131\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, \uadf8\uc800 \uc2a4\ud0c0\uc77c \uad00\ub840\uc785\ub2c8\ub2e4).","ed0d3fc9":"\uc120\ud0dd\uc801\uc73c\ub85c, \uc124\uc815\uac12 \uc0ac\uc804\uc774 \uc8fc\uc5b4\uc9c4 \uce35 \uac1d\uccb4\ub97c \uc7ac\uc0dd\uc131\ud560 \ub54c \uc0ac\uc6a9\ub420 `from_config(cls, config)` \ud074\ub798\uc2a4 \uba54\uc18c\ub4dc\ub97c \uad6c\ud604\ud558\uc138\uc694. `from_config`\uc758 \uae30\ubcf8 \uad6c\ud604\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:","f7128c3f":"\ube44\uad50\ud574\ubcf4\uc138\uc694:","329f478b":"\uc0c1\uc18d\ub41c \ubc84\uc804\uacfc:","08c8ebc4":"## API \uc2a4\ud0c0\uc77c \uc9dc \ub9de\ucd94\uae30","43465980":"\ubaa8\ub378\uc744 \uc800\uc7a5\ud558\uace0 \uc9c1\ub82c\ud654\ud558\ub294 \uac83\uc740 functional API\ub97c \uc0ac\uc6a9\ud574 \ub9cc\ub4e4\uc5b4\uc9c4 \ubaa8\ub378\ub4e4\uc5d0 \ub300\ud574 `Seqeuntial` \ubaa8\ub378\uc5d0 \ub300\ud55c \uac83\uacfc \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4. functional \ubaa8\ub378\uc744 \uc800\uc7a5\ud558\ub294 \ud45c\uc900\uc801\uc778 \ubc29\ubc95\uc740 \ub2e8\uc77c \ud30c\uc77c\ub85c\uc368 \uc804\uccb4 \ubaa8\ub378\uc744 \uc800\uc7a5\ud558\uae30 \uc704\ud574 `model.save()`\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ub098\uc911\uc5d0 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5c8\ub358 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub354\ub77c\ub3c4 \uc774 \ud30c\uc77c\ub85c\ubd80\ud130 \uac19\uc740 \ubaa8\ub378\uc744 \uc7ac\uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","3b31571b":"## \uac19\uc740 \uce35\ub4e4\uc758 \uadf8\ub798\ud504\ub97c \uc0ac\uc6a9\ud574 \uc5ec\ub7ec \ubaa8\ub378\ub4e4\uc744 \uc815\uc758","be81812c":"\uc5ec\uae30 functional \ubaa8\ub378\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uae30\ubc18\uc73c\ub85c\ubd80\ud130 \uc801\uc740 \uac1c\uc778\ud654 RNN\uc758 \ube60\ub978 \uc608\uc81c\uc785\ub2c8\ub2e4:","628acbd9":"\uadf8\ub7ec\ub098, \ubaa8\ub378 \uc0c1\uc18d\uc740 \uce35\ub4e4\uc758 \ubc29\ud5a5\uc131 \ube44\uc21c\ud658 \uadf8\ub798\ud504\ub85c \uc27d\uac8c \ud45c\ud604\ub420 \uc218 \uc5c6\ub294 \ubaa8\ub378\uc744 \ub9cc\ub4e4 \ub54c\uc5d0 \uc544\uc8fc \ud6cc\ub96d\ud55c \uc720\uc5f0\uc131\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, functional API\ub85c\ub294 Tree-RNN\uc744 \uad6c\ud604\ud560 \uc218 \uc5c6\uc744 \uac83\uc774\uba70 `Model`\uc5d0\uc11c \uc9c1\uc811\uc801\uc73c\ub85c \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uc5b4\uc57c \ud560 \uac83\uc785\ub2c8\ub2e4.","51a5fb13":"\"\uce35\ub4e4\uc758 \uadf8\ub798\ud504\"\ub294 \ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \uc704\ud55c \uc9c1\uad00\uc801\uc778 \ud45c\uc0c1\uc774\uba70, functional API\ub294 \uc774\uac83\uc744 \uac00\uae5d\uac8c \ubc18\uc601\ud558\ub294 \ubaa8\ub378\uc744 \uc0dd\uc131\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.","c9a3cb47":"\ubaa8\ub378\uc744 \uadf8\ub824\ubd05\ub2c8\ub2e4:","e83c704b":"## \uc800\uc7a5\uacfc \uc9c1\ub82c\ud654","62a75127":"\ubcfc \uc218 \uc788\ub4ef\uc774, \ubaa8\ub378\uc740 \uc911\ucca9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4: (\ubaa8\ub378\uc740 \uce35\uacfc \uac19\uae30 \ub54c\ubb38\uc5d0) \ubaa8\ub378\uc740 \uc791\uc740 \ubaa8\ub378\ub4e4\uc744 \ud3ec\ud568\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub378 \uc911\ucca9\uc758 \ud754\ud55c \uc0ac\uc6a9 \uc608\uc2dc\ub294 _\uc559\uc0c1\ube14\ub9c1_ \uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc5ec\uae30 \ubaa8\ub378\uc758 \uc9d1\ud569\uc744 \uadf8\ub4e4\uc758 \uc608\uce21\uc744 \ud3c9\uade0\ub0b4\ub294 \ud558\ub098\uc758 \ubaa8\ub378\ub85c \uc5b4\ub5bb\uac8c \ud569\uce58\ub294 \uc9c0\uc785\ub2c8\ub2e4:","2f13204e":"functional API\uc5d0\uc11c\ub294, \uc785\ub825 \ud2b9\uc815(\ubaa8\uc591\uacfc dtype)\uc740 \uc0ac\uc804\uc5d0 (`Input`\uc744 \uc0ac\uc6a9\ud574) \uc0dd\uc131\ub429\ub2c8\ub2e4. \uce35\uc744 \ud638\ucd9c\ud560 \ub54c\ub9c8\ub2e4, \uce35\uc740 \ub118\uaca8\uc9c4 \uc0ac\uc591\uc774 \uac00\uc815\uacfc \ub9de\ub294\uc9c0 \ud655\uc778\ud558\uace0, \uc544\ub2c8\ub77c\uba74 \ub3c4\uc6c0\uc774 \ub418\ub294 \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \uc62c\ub9b4 \uac83\uc785\ub2c8\ub2e4.","45ddd771":"functional API\uc5d0\uc11c\ub294, \ubaa8\ub378\ub4e4\uc740 \uce35\ub4e4\uc758 \uadf8\ub798\ud504 \uc548\uc758 \uc785\ub825\ub4e4\uacfc \ucd9c\ub825\ub4e4\uc744 \ud2b9\uc815\ud568\uc73c\ub85c\uc11c \uc0dd\uc131\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 \ud558\ub098\uc758 \uce35\ub4e4\uc758 \uadf8\ub798\ud504\uac00 \uc5ec\ub7ec \uac1c\uc758 \ubaa8\ub378\ub4e4\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4.","67727ede":"Keras _functional API_ \ub294 [`tf.keras.Sequential`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Sequential) API\ubcf4\ub2e4 \ub354 \uc720\uc5f0\ud55c \ubaa8\ub378\uc744 \uc0dd\uc131\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. functional API\ub294 \ube44\uc120\ud615 \uc704\uc0c1 \ubc30\uce58, \uacf5\uc720 \uce35, \uadf8\ub9ac\uace0 \ub2e4\uc911 \uc785\ub825\uc774\ub098 \ucd9c\ub825\uae4c\uc9c0 \uc788\ub294 \ubaa8\ub378\uc744 \ub2e4\ub8f0 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","261a8a6d":"\uc0c1\uc18d\ub41c \ubaa8\ub378\uc744 \uc9c1\ub82c\ud654\ud558\uae30 \uc704\ud574\uc11c\ub294, \ubaa8\ub378 \uc218\uc900\uc5d0\uc11c \uad6c\ud604\uc790\uac00 `get_config()`\uc640 `from_config()`\ub97c \ud2b9\uc815\ud558\ub294 \uac83\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.","bcb217e4":"## \ud559\uc2b5, \ud3c9\uac00, \uadf8\ub9ac\uace0 \ucd94\ub860","bb41256c":"\uc608\ub97c \ub4e4\uc5b4, \ub9cc\uc57d `(32, 32, 3)` \ubaa8\uc591\uc758 \uc774\ubbf8\uc9c0 \uc785\ub825\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uc544\ub798\uc640 \uac19\uc774 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4:","e53f806b":"\uc774 \ubaa8\ub378\uc744 \ucef4\ud30c\uc77c\ud558\uba74\uc11c, \uac01 \ucd9c\ub825\uc5d0 \ub2e4\ub978 \uc190\uc2e4\ub4e4\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc804\uccb4 \ud559\uc2b5 \uc190\uc2e4\uc5d0 \ub300\ud55c \uae30\uc5ec\ub97c \uc870\uc808\ud558\uae30 \uc704\ud574 \uac01 \uc190\uc2e4\uc5d0 \ub2e4\ub978 \uac00\uc911\uce58\ub97c \uc8fc\ub294 \uac83\ub9c8\uc800\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4.","e77c2116":"## \uc124\uc815","711cb460":"\uc774\uac83\uc744 \ub3d9\uc791\uc73c\ub85c \ubcf4\uae30 \uc704\ud574, \uc5ec\uae30 \uc778\ucf54\ub529 \ubaa8\ub378, \ub514\ucf54\ub529 \ubaa8\ub378\uc744 \uc0dd\uc131\ud558\uace0, \uc624\ud1a0 \uc778\ucf54\ub354 \ubaa8\ub378\uc744 \uc5bb\uae30 \uc704\ud574 \ub450 \ud638\ucd9c\uc744 \uc5f0\uacb0\ud558\ub294 \uc624\ud1a0 \uc778\ucf54\ub354 \uc608\uc81c \uc704\uc758 \ub2e4\ub978 \uac83\uc774 \uc788\uc2b5\ub2c8\ub2e4:","58b583a3":"\uc774 \uadf8\ub9bc\uacfc \ucf54\ub4dc\ub294 \uac70\uc758 \ub3d9\uc77c\ud569\ub2c8\ub2e4. \ucf54\ub4dc \ubc84\uc804\uc5d0\uc11c\ub294, \uc5f0\uacb0 \ud654\uc0b4\ud45c\uac00 \ud638\ucd9c \uc5f0\uc0b0\uc73c\ub85c \ub300\uccb4\ub418\uc5c8\uc2b5\ub2c8\ub2e4.","ba94297c":"functional API\ub97c \uc0ac\uc6a9\ud558\uae30 \uc88b\uc740 \ub610 \ub2e4\ub978 \uacbd\uc6b0\ub294 _\uacf5\uc720 \uce35_ \uc744 \uc0ac\uc6a9\ud558\ub294 \ubaa8\ub378\uc785\ub2c8\ub2e4. \uacf5\uc720 \uce35\uc740 \uac19\uc740 \ubaa8\ub378 \uc548\uc5d0\uc11c \uc5ec\ub7ec\ubc88 \uc7ac\uc0ac\uc6a9\ub418\ub294 \uce35 \uac1d\uccb4\uc785\ub2c8\ub2e4 - \uc774\uac83\ub4e4\uc740 \uce35\ub4e4\uc758 \uadf8\ub798\ud504 \uc548\uc5d0\uc11c\uc758 \uc5ec\ub7ec \uacbd\ub85c\uc5d0 \ub300\uc751\ud558\ub294 \ud2b9\uc131\ub4e4\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4.","a93b66ac":"\uc5ec\uae30, \ub514\ucf54\ub529 \uad6c\uc870\ub294 \uc778\ucf54\ub529 \uad6c\uc870\uc640 \uc5c4\uaca9\ud788 \ub300\uce6d\uc801\uc774\uba70, \uadf8\ub798\uc11c \ucd9c\ub825 \ubaa8\uc591\uc740 \uc785\ub825 \ubaa8\uc591 `(28, 28, 1)`\uacfc \uac19\uc2b5\ub2c8\ub2e4.","fab54d16":"\ub370\uc774\ud130\uc758 \ubaa8\uc591\uc740 784 \ucc28\uc6d0 \ubca1\ud130\ub85c \uc124\uc815\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ubb36\uc74c \ud06c\uae30\ub294 \uac01 \ud45c\ubcf8\uc758 \ubaa8\uc591\ub9cc \ud2b9\uc815\ub418\uae30 \ub54c\ubb38\uc5d0 \ud56d\uc0c1 \uc0dd\ub7b5\ub429\ub2c8\ub2e4.","e606d320":"\uc5ec\uae30, MNIST \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\uace0, \ubca1\ud130\ub85c \ubaa8\uc591\uc744 \ubc14\uafb8\uace0, (\uac80\uc99d \ubd84\ud560 \uc704\uc5d0\uc11c \uc131\ub2a5\uc744 \ucd94\uc801\ud558\uba70) \ub370\uc774\ud130 \uc704\uc5d0\uc11c \ubaa8\ub378\uc744 \ub9de\ucd94\uace0, \uadf8\ub9ac\uace0 \ud3c9\uac00 \ub370\uc774\ud130 \uc704\uc5d0\uc11c \ubaa8\ub378\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4:","8b6c77cc":"\uc544\ub798\uc758 \uc608\uc81c\uc5d0\uc11c\ub294, \ub450\uac1c\uc758 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574 \uac19\uc740 \uce35\ub4e4\uc758 \ub354\ubbf8\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4: \uc774\ubbf8\uc9c0 \uc785\ub825\uc744 16 \ucc28\uc6d0 \ubca1\ud130\ub85c \ubc14\uafb8\ub294 `encoder` \ubaa8\ub378\uacfc, \ud559\uc2b5\uc744 \uc704\ud55c \uc885\ub2e8 \uac04 `autoencoder` \ubaa8\ub378.","2eec2757":"`Conv2D` \uce35\uc758 \uc5ed\uc740 `Conv2DTranspose` \uce35\uc774\uace0, `MaxPooling2D` \uce35\uc758 \uc5ed\uc740 `UpSampling2D` \uce35\uc785\ub2c8\ub2e4.","052b784b":"Keras functional API\ub97c \uc0c8\ub85c\uc6b4 \ubaa8\ub378\uc774\ub098 `Model` \ud074\ub798\uc2a4\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud574\uc57c \ud560\uae4c\uc694? \uc77c\ubc18\uc801\uc73c\ub85c, functional API\ub294 \ub354 \ub192\uc740 \uc218\uc900\uc758, \ub354 \uc27d\uace0 \ub354 \uc548\uc804\ud558\uba70, \uc0c1\uc18d\ubc1b\ub294 \ubaa8\ub378\ub4e4\uc774 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc740 \uc218\ub9ce\uc740 \ud2b9\uc131\ub4e4\uc744 \uac00\uc9d1\ub2c8\ub2e4.","7e062f35":"\uc8fc\ub41c \ubc1c\uc0c1\uc740 \ub525\ub7ec\ub2dd \ubaa8\ub378\uc774 \uc8fc\ub85c \uce35\ub4e4\uc758 \ubc29\ud5a5\uc131 \ube44\uc21c\ud658 \uadf8\ub798\ud504(DAG)\ub77c\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c functional API\ub294 _\uce35\ub4e4\uc758 \uadf8\ub798\ud504_ \ub97c \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.","0b6c9b97":"\uc774\uac83\uc740 \ub610\ud55c \uc911\uac04 \uce35(\uadf8\ub798\ud504\uc758 \"\ub178\ub4dc\")\ub4e4\uc758 \ud65c\uc131\ud654\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc73c\uba70 \ub2e4\ub978 \uacf3\uc5d0\uc11c \uc7ac\uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4 - \uc774\uac83\uc740 \ud2b9\uc9d5 \ucd94\ucd9c \uac19\uc740 \uac83\uc5b4\uc138 \ub9e4\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4. ","6cb8ab20":"\uc608\ub97c \ub4e4\uc5b4, \uace0\uac1d \ubb38\uc81c \ud2f0\ucf13\uc5d0 \ub300\ud574 \uc6b0\uc120\uc21c\uc704\ub97c \ub9e4\uae30\uae30 \uc704\ud55c \uccb4\uacc4\ub97c \ub9cc\ub4e4\uace0 \uc62c\ubc14\ub978 \ubd80\uc11c\ub85c \ubcf4\ub0b4\uc900\ub2e4\uba74, \ubaa8\ub378\uc740 \uc138\uac00\uc9c0 \uc785\ub825\uc744 \uac00\uc9c8 \uac83\uc785\ub2c8\ub2e4:\n* \ud2f0\ucf13\uc758 \uc81c\ubaa9 (\ud14d\uc2a4\ud2b8 \uc785\ub825)\n* \ud2f0\ucf13\uc758 \ubcf8\ubb38 (\ud14d\uc2a4\ud2b8 \uc785\ub825)\n* \uc0ac\uc6a9\uc790\uc5d0 \uc758\ud574 \ucd94\uac00\ub41c \ud0dc\uadf8\ub4e4 (\uce74\ud14c\uace0\ub9ac \uc785\ub825)","54784e57":"\uc5ec\ub7ec \uc785\ub825\uacfc \ucd9c\ub825\uc744 \uac00\uc9c0\ub294 \ubaa8\ub378\ub4e4\uc5d0 \ub354\ud574, functional API\ub294 - \uc21c\ucc28\uc801\uc73c\ub85c \uc5f0\uacb0\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc544 `Sequential` API\uac00 \ub2e4\ub8f0 \uc218 \uc5c6\ub294 \uce35\ub4e4\uc744 \uac00\uc9c0\ub294 \ubaa8\ub378\ub4e4\uc778 - \ube44\uc120\ud615 \uc5f0\uacb0 \uc704\uc0c1\ub4e4\uc744 \ub2e4\ub8e8\uae30 \uc27d\uac8c \ud574\uc90d\ub2c8\ub2e4.","9b44bf93":"\uc544\ub798\uc758 \ubaa8\ub378\uc744 \uace0\ub824\ud574\ubd05\uc2dc\ub2e4:","760d435f":"\uc5ec\uae30 dtype\uc785\ub2c8\ub2e4:","c2cae037":"`Dataset` \uac1d\uccb4\ub85c \uc801\ud569\uc744 \ud638\ucd9c\ud560 \ub54c\ub294, `([title_data, body_data, tags_data], [priority_targets, dept_targets])` \uac19\uc740 \ubc30\uc5f4\uc758 \ud29c\ud50c\uc774\ub098 `({'title': title_data, 'body': body_data, 'tags': tags_data}, {'priority': priority_targets, 'department': dept_targets})` \uac19\uc740 \uc0ac\uc804\uc758 \ud29c\ud50c\uc744 \ubc1b\uc544\uc57c \ud569\ub2c8\ub2e4.","b41830a1":"functional API\uc5d0\uc11c \uce35\uc744 \uacf5\uc720\ud558\uae30 \uc704\ud574\uc11c\ub294, \uac19\uc740 \uce35 \uac1d\uccb4\ub97c \uc5ec\ub7ec\ubc88 \ud638\ucd9c\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc5ec\uae30 \ub450\uac00\uc9c0 \ub2e4\ub978 \ud14d\uc2a4\ud2b8 \uc785\ub825\uc5d0 \uacf5\uc720\ub418\ub294 `Embedding` \uce35\uc785\ub2c8\ub2e4:","cf4969a0":"\ubaa8\uc591\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\ub294 \ubc18\ud658\ub41c `inputs`\uc640 \ubaa8\ub378\uc5d0 \uc81c\uacf5\ub418\ub294 \uc785\ub825 \ub370\uc774\ud130\uc758 `dtype`\uc785\ub2c8\ub2e4. \uc5ec\uae30 \ubaa8\uc591\uc785\ub2c8\ub2e4:","7caa176c":"\uc785\ub825\uacfc \ubaa9\ud45c\uc758 NumPy \ubc30\uc5f4\uc758 \ubaa9\ub85d\uc744 \ub118\uaca8\uc90c\uc73c\ub85c\uc368 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4:","dc8acf14":"\ucd94\uac00\uc801\uc73c\ub85c, \uac1c\uc778\ud654 \uce35\uc774\ub098 \ubaa8\ub378 \uc704\uc5d0 `get_config` \uba54\uc18c\ub4dc\ub97c \uad6c\ud604\ud558\uba74, \uc0dd\uc131\ud55c functional \ubaa8\ub378\uc740 \uc5ec\uc804\ud788 \uc9c1\ub82c\ud654\ub098 \ubcf5\uc81c\ub420 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.","acf3feb3":"### \uc5ec\ub7ec \uc785\ub825\uacfc \ucd9c\ub825\uc744 \uac00\uc9c0\ub294 \ubaa8\ub378","888162b3":"### functional API\uc758 \ub2e8\uc810:","f74472b4":"\ub354 \uc77d\uc744\uac70\ub9ac\ub97c \uc704\ud574\uc11c\ub294, [\ud559\uc2b5\uacfc \ud3c9\uac00](https:\/\/www.tensorflow.org\/guide\/keras\/train_and_evaluate\/) \uac00\uc774\ub4dc\ub97c \ubcf4\uc138\uc694.","f1f2d33c":"### \uc5f0\uc2b5\uc6a9 ResNet \ubaa8\ub378","ce77a7ba":"\uc774\uac83\uc5d0 \ub300\ud574 \ud754\ud788 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\ub294 \uc794\uc5ec \uc5f0\uacb0\uc785\ub2c8\ub2e4. \uc774\uac83\uc744 \uc124\uba85\ud558\uae30 \uc704\ud574 CIFAR10\uc5d0 \ub300\ud55c \uc5f0\uc2b5\uc6a9 ResNet \ubaa8\ub378\uc744 \ub9cc\ub4ed\uc2dc\ub2e4:","7fce0862":"\ub9e8 \ucc98\uc74c\ubd80\ud130 \uce35\uc744 \uc0dd\uc131\ud558\ub294 \uac83\uc5d0 \ub300\ud574 \ub354 \uc54c\uace0 \uc2f6\ub2e4\uba74, [\uac1c\uc778\ud654 \uce35\uacfc \ubaa8\ub378](https:\/\/www.tensorflow.org\/guide\/keras\/custom_layers_and_models) \uac00\uc774\ub4dc\ub97c \uc77d\uc5b4\ubcf4\uc138\uc694.","352c4b55":"\uc608\uc81c\ub97c \ubd05\uc2dc\ub2e4. \uc774\uac83\uc740 ImageNet\uc5d0\uc11c \uc0ac\uc804 \ud559\uc2b5\ub41c \uac00\uc911\uce58\ub97c \uac00\uc9c0\ub294 VGG19 \ubaa8\ub378\uc785\ub2c8\ub2e4:","4397b2bb":"\uc544\ub798 \uc591\uc2dd \uc911 \ud558\ub098\ub97c \ub530\ub974\ub294 `call` \uba54\uc18c\ub4dc\ub97c \uad6c\ud604\ud55c\ub2e4\uba74 functional API \uc548\uc758 \uc5b4\ub5a4 \uc0c1\uc18d\ub41c \uce35\uc774\ub098 \ubaa8\ub378\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:\n* `call(self, inputs, **kwargs)` - `inputs`\uc740 \ud150\uc11c\ub098 \ud150\uc11c\uc758 \uc911\ucca9 \uad6c\uc870 (\uc608, \ud150\uc11c\uc758 \ubc30\uc5f4), `**kwargs`\ub294 \ud150\uc11c\uac00 \uc544\ub2cc \uc778\uc790 (\uc785\ub825\uc774 \uc544\ub2cc \uac12).\n* `call(self, inputs, training=None, **kwargs)` - `training`\uc740 \uce35\uc774 \ud559\uc2b5 \uc0c1\ud0dc\uc640 \ucd94\ub860 \uc0c1\ud0dc \uc911 \uc5b4\ub5bb\uac8c \ud589\ub3d9\ud574\uc57c \ud558\ub294\uc9c0 \ub098\ud0c0\ub0b4\ub294 \ubd88 \uac12.\n* `call(self, inputs, mask=None, **kwargs)` - `mask`\ub294 \ubd88 \ub9c8\uc2a4\ud06c \ud150\uc11c(\uc608\uc2dc\ub85c, RNN\uc5d0\uc11c \uc720\uc6a9\ud569\ub2c8\ub2e4).\n* `call(self, inputs, training=None, mask=None, **kwargs)` - \ubb3c\ub860 \ub9c8\uc2a4\ud0b9\uacfc \ud559\uc2b5 \ud2b9\uc815 \ud589\ub3d9\uc744 \ub3d9\uc2dc\uc5d0 \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","5772e97e":"#### functional \ubaa8\ub378\uc740 \uadf8\ub9b4 \uc218 \uc788\uace0 \uc810\uac80\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4","beda2ba3":"## \ubcf5\uc7a1\ud55c \uadf8\ub798\ud504 \uc704\uc0c1 \ub2e4\ub8e8\uae30","15a3480a":"functional API\ub294 \uc5ec\ub7ec \uc785\ub825\uacfc \ucd9c\ub825\uc744 \ub2e4\ub8e8\uae30 \uc27d\uac8c \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4. \uc774\uac83\uc740 `Sequential` API\uc5d0\uc11c\ub294 \ub2e4\ub904\uc9c8 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.","78cf4f28":"\uc774 \ubaa8\ub378\uc740 \ub450\uac00\uc9c0 \ucd9c\ub825\uc744 \uac00\uc9c8 \uac83\uc785\ub2c8\ub2e4:\n* 0\uacfc 1 \uc0ac\uc774\uc758 \uc6b0\uc120 \uc21c\uc704 \uc810\uc218 (sigmoid \uc2a4\uce7c\ub77c \ucd9c\ub825)\n* \ud2f0\ucf13\uc744 \ub2e4\ub904\uc57c \ud560 \ubd80\uc11c (\ubd80\uc11c\uc758 \uc9d1\ud569 \uc704\uc758 softmax \ucd9c\ub825)","67b59362":"\uc800\uc7a5\ub41c \ud30c\uc77c\uc740 \ub2e4\uc74c\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4:\n* \ubaa8\ub378 \uad6c\uc870\n* (\ud559\uc2b5 \uacfc\uc815\uc5d0\uc11c \ubc30\uc6e0\ub358) \ubaa8\ub378 \uac00\uc911\uce58 \uac12\ub4e4\n* \uc5b4\ub5a4 \uac83\uc774\ub4e0 (`compile`\uc5d0 \ub118\uaca8\uc84c\ub358) \ubaa8\ub378 \ud559\uc2b5 \uc124\uc815\n* \uc5b4\ub5a4 \uac83\uc774\ub4e0 (\uadf8\ub9cc\ub454 \uc2dc\uc810\uc5d0\uc11c \ud559\uc2b5\uc744 \ub2e4\uc2dc \uc2dc\uc791\ud560 \uc218 \uc788\ub294) \ucd5c\uc801\ud654\uc640 \uadf8 \uc0c1\ud0dc","d526d8e4":"`super(MyClass, self).__init__(...)`, `def call(self, ...):` \ub4f1\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.","e280e048":"[tf.keras](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras)\ub294 \ub113\uc740 \ud3ed\uc758 \ub0b4\uc81c\ub41c \uce35\ub4e4\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4, \uc608\ub97c \ub4e4\uc5b4:\n* \ud569\uc131\uacf1 \uce35: `Conv1D`, `Conv2D`, `Conv3D`, `Conv2DTranspose`\n* \ud1b5\ud569 \uce35: `MaxPooling1D`, `MaxPooling2D`, `MaxPooling3D`, `AveragePooling1D`\n* RNN \uce35: `GRU`, `LSTM`, `ConvLSTM2D`\n* `BatchNormalization`, `Dropout`, `Embedding`, \ub4f1","ba06157a":"```\n(input: 784 \ucc28\uc6d0 \ubca1\ud130\ub4e4)\n       \u21a7\n[Dense (64 \ub2e8\uc704, relu \ud65c\uc131\ud654)]\n       \u21a7\n[Dense (64 \ub2e8\uc704, relu \ud65c\uc131\ud654)]\n       \u21a7\n[Dense (10 \ub2e8\uc704, softmax \ud65c\uc131\ud654)]\n       \u21a7\n(output: 10\uac00\uc9c0 \uc885\ub958 \uc704\uc758 \ud655\ub960 \ubd84\ud3ec\uc758 \ub85c\uc9d3)\n```","dd7f5a8f":"\uacf5\uc720 \uce35\uc740 \uc720\uc0ac \uacf5\uac04(\ub2e4\uc2dc \ub9d0\ud574, \ube44\uc2b7\ud55c \uc5b4\ud718\ub97c \ud2b9\uc9d5\uc73c\ub85c \uac16\ub294 \ub450\uac00\uc9c0 \ub2e4\ub978 \ubcf8\ubb38 \uc870\uac01\ub4e4)\uc73c\ub85c\ubd80\ud130\uc758 \uc785\ub825\uc744 \uc778\ucf54\ub529\ud558\uae30 \uc704\ud574 \uc790\uc8fc \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 \uc774 \ub2e4\ub978 \uc785\ub825\ub4e4\uc744 \ud1b5\uacfc\ud558\ub294 \uc815\ubcf4\uc758 \uacf5\uc720\ub97c \uac00\ub2a5\ud558\uac8c \ud558\uace0, \ub354 \uc801\uc740 \ub370\uc774\ud130 \uc704\uc5d0\uc11c \ubaa8\ub378\uc744 \ud559\uc2b5\ud560 \uc218 \uc788\uac8c \ub9cc\ub4ed\ub2c8\ub2e4. \ub9cc\uc57d \uc8fc\uc5b4\uc9c4 \ub2e8\uc5b4\uac00 \uc785\ub825 \uc911 \ud558\ub098\uc5d0 \ubcf4\uc778 \uc801\uc774 \uc788\ub2e4\uba74, \uacf5\uc720 \uce35\uc744 \ud1b5\ud574 \ubaa8\ub4e0 \uc785\ub825\ub4e4\uc758 \ucc98\ub9ac\uc5d0 \uc774\uc775\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4.","280515f8":"\uc774 \ubaa8\ub378\uc740 functional API\ub85c \uba87 \uc904\ub85c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","835247fb":"\ub354 \uc790\uc138\ud55c \uc124\uba85\uc740, [\ud559\uc2b5\uacfc \ud3c9\uac00](https:\/\/www.tensorflow.org\/guide\/keras\/train_and_evaluate\/) \uac00\uc774\ub4dc\ub97c \ucc38\uc870\ud558\uc138\uc694.","78ad4342":"\uac1c\uc778\ud654 \uce35\uc5d0\uc11c\uc758 \uc9c1\ub82c\ud654 \uc9c0\uc6d0\uc744 \uc704\ud574\uc11c, \uce35 \uac1d\uccb4\uc758 \uc0dd\uc131\uc790 \uc778\uc790\ub97c \ubc18\ud658\ud558\ub294 `get_config` \uba54\uc18c\ub4dc\ub97c \uc815\uc758\ud558\uc138\uc694:","1fbec9d3":"\uadf8\ub798\ud504\ub85c \ubaa8\ub378\uc744 \uadf8\ub824\ubcfc \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4:","3516a959":"\uc774\uac83\uc740 \ub2e4\ub978 \uac83\ub4e4 \uc0ac\uc774\uc5d0\uc11c [\uc2e0\uacbd \ubc29\uc2dd \uc804\ub2ec](https:\/\/keras.io\/examples\/generative\/neural_style_transfer\/)\uacfc \uac19\uc740 \uc5c5\ubb34\uc5d0 \ub300\ud574 \ud3b8\ud558\uac8c \uad00\uc5ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","4295e6b1":"functional API\uc640 \ubaa8\ub378 \uc0c1\uc18d \uc0ac\uc774\uc5d0\uc11c \uc120\ud0dd\ud558\ub294 \uac83\uc740 \ubaa8\ub378\uc758 \ud558\ub098\uc758 \ubc94\uc8fc\ub85c \uc81c\ud55c\ud558\ub294 \uc774\ubd84\ubc95\uc801\uc778 \uacb0\uc815\uc774 \uc544\ub2d9\ub2c8\ub2e4. [`tf.keras`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras) API \uc548\uc758 \ubaa8\ub4e0 \ubaa8\ub378\ub4e4\uc740 \uae30\ubc18\uc774 `Sequential` \ubaa8\ub378, functional \ubaa8\ub378, \ub610\ub294 \uc0c1\uc18d\ub41c \ubaa8\ub378\ub85c \uc801\ud600\uc788\ub294\uc9c0\uc5d0 \uc0c1\uad00 \uc5c6\uc774 \uc11c\ub85c \uc0c1\ud638\uc791\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","f50a1d45":"## \uce35\ub4e4\uc758 \uadf8\ub798\ud504 \uc548\uc758 \ub178\ub4dc \ucd94\ucd9c \ubc0f \uc7ac\uc0ac\uc6a9","f5da6721":"\uadf8\ub9ac\uace0, \uc120\ud0dd\uc801\uc73c\ub85c, \uac01 \uce35\uc758 \uc785\ub825\uacfc \ucd9c\ub825 \ubaa8\uc591\uc744 \uadf8\ub824\uc9c4 \uadf8\ub798\ud504\uc5d0 \ud45c\uc2dc\ud569\ub2c8\ub2e4:","4b1650ca":"\uc774\uc81c \ubaa8\ub378\uc744 \uadf8\ub824\ubd05\ub2c8\ub2e4:","8ea54163":"#### functional \ubaa8\ub378\uc740 \uc9c1\ub82c\ud654\ub098 \ubcf5\uc81c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4","7f0b51ee":"## \ubaa8\ub4e0 \ubaa8\ub378\ub4e4\uc740 \uce35\uacfc \uac19\uc774 \ud638\ucd9c \uac00\ub2a5\ud569\ub2c8\ub2e4","02c50800":"\uc774\uac83\uc740 functional API\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub294 \uc5b4\ub5a4 \ubaa8\ub378\ub3c4 \uc2e4\ud589\ub420 \uac83\uc774\ub77c\ub294 \uac83\uc744 \ubcf4\uc7a5\ud574\uc90d\ub2c8\ub2e4. \ubaa8\ub4e0 \ub514\ubc84\uae45\uc740 - \uc218\ub834 \uad00\ub828\ub41c \ub514\ubc84\uae45\uc774 \uc544\ub2cc - \ubaa8\ub378\uc758 \uc0dd\uc131 \ub3d9\uc548\uc5d0 \uc815\uc801\uc73c\ub85c \ubc1c\uc0dd\ud558\uba70 \uc2e4\ud589\uc2dc\uac04\uc5d0\uc11c\ub294 \uc544\ub2d9\ub2c8\ub2e4. \uc774\uac83\uc740 \ucef4\ud30c\uc77c\ub7ec \uc548\uc5d0\uc11c \uc790\ub8cc\ud615 \ud655\uc778\uacfc \uc720\uc0ac\ud569\ub2c8\ub2e4.","0dff3cae":"\ud559\uc2b5, \ud3c9\uac00, \uadf8\ub9ac\uace0 \ucd94\ub860\uc740 functional API\ub97c \uc0ac\uc6a9\ud574 \ub9cc\ub4e0 \ubaa8\ub378\uc5d0 \ub300\ud574 `Sequential` \ubaa8\ub378\uc5d0 \ub300\ud574\uc11c \ub9d0\ud588\ub358 \uac83\uacfc \uc815\ud655\ud788 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4.","aa170025":"\ub354 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740, \ubaa8\ub378 [\uc9c1\ub82c\ud654 & \uc800\uc7a5](https:\/\/www.tensorflow.org\/guide\/keras\/save_and_serialize\/) \uac00\uc774\ub4dc\ub97c \uc77d\uc5b4\ubcf4\uc138\uc694.","8e804cbe":"\uc774 \ud2b9\uc9d5\ub4e4\uc744 \uc911\uac04 \uce35 \ud65c\uc131\ud654\uc758 \uac12\uc744 \ubc18\ud658\ud558\ub294 \uc0c8\ub85c\uc6b4 \ud2b9\uc9d5 \ucd94\ucd9c \ubaa8\ub378\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud569\ub2c8\ub2e4:","6f89d072":"functional API\ub294 \ubaa8\ub378\uc744 \uce35\ub4e4\uc758 DAG\ub85c \ucde8\uae09\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \ub300\ubd80\ubd84\uc758 \ub525\ub7ec\ub2dd \uad6c\uc870\uc5d0\uc11c \ucc38\uc774\uc9c0\ub9cc, \ubaa8\ub450\ub294 \uc544\ub2d9\ub2c8\ub2e4 - \uc608\ub97c \ub4e4\uc5b4, \uc7ac\uadc0 \ub124\ud2b8\uc6cc\ud06c\ub098 Tree RNN\uc740 \uc774 \uac00\uc815\uc744 \ub530\ub974\uc9c0 \uc54a\uc73c\uba70 functional API\uc5d0\uc11c \uad6c\ud604\ub420 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.","dbb0fe76":"#### \ub3d9\uc801 \uad6c\uc870\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4","c9880f42":"\ubaa8\ub378\uc744 \uadf8\ub798\ud504\ub85c \uadf8\ub824\ubcfc \uc218 \uc788\uace0, \uc774 \uadf8\ub798\ud504\uc758 \uc911\uac04 \ub178\ub4dc\ub4e4\uc5d0 \uc27d\uac8c \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 (\uc774\uc804 \uc608\uc81c\uc5d0\uc11c \ubd24\ub4ef\uc774) \uc911\uac04 \uce35\ub4e4\uc758 \ud65c\uc131\ud654\ub97c \ucd94\ucd9c\uacfc \uc7ac\uc0ac\uc6a9\uc785\ub2c8\ub2e4:","81ac5812":"\uc544\ub798\ub294 [`tf.keras.layers.Dense`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/Dense)\uc758 \uae30\ubcf8 \uad6c\ud604\uc785\ub2c8\ub2e4:","e809fd01":"\uadf8\ub9ac\uace0 \uc774\uac83\uc740 \uadf8\ub798\ud504 \uc790\ub8cc \uad6c\uc870\uc5d0 \uc9c8\uc758\ub97c \ud1b5\ud574 \uc5bb\uc5b4\uc9c4 \ubaa8\ub378\uc758 \uc911\uac04 \ud65c\uc131\ud654\ub4e4\uc785\ub2c8\ub2e4:","be6a8f45":"functional \ubaa8\ub378\uc774\ub098 `Sequential` \ubaa8\ub378\uc744 \uc0c1\uc18d\ub41c \ubaa8\ub378\uc774\ub098 \uce35\uc758 \ubd80\ubd84\uc73c\ub85c \ud56d\uc0c1 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"}}