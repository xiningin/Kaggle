{"cell_type":{"4d20b7f8":"code","fe4c0e14":"code","fe5d5ecf":"code","d1b8a670":"code","39ec67a5":"code","fab8c982":"code","997925a4":"code","6d9e055f":"code","79d665a5":"code","f3564862":"code","e33ce560":"code","22789e67":"code","3793c65a":"code","85f591cc":"code","e04ea9b6":"code","da0ab7d8":"code","a8507e2e":"code","08a79ca8":"code","b46774a8":"code","1a197ba7":"code","31dffa39":"code","a2242642":"code","45cb9ab3":"code","64bb66bb":"code","89307a2f":"code","ca9e07a1":"code","e9f84f6e":"code","7edda35e":"code","eb6c2ebb":"code","cc059a0b":"code","fd922644":"code","86573254":"code","173ae811":"code","13d9fffe":"code","8cdf3ad5":"code","bb6ca145":"code","b7b0b95b":"code","10240432":"code","195922dc":"code","8f3a9d18":"code","43555a3a":"code","7ef93dc4":"code","30103d2e":"code","160d8697":"code","dcc4e40c":"code","60169289":"code","8052c4ee":"code","198810e6":"code","b1edea14":"code","1f5ff4d6":"code","7b324f44":"code","55845715":"code","93d22e80":"code","241b0a18":"code","6ca8ebb6":"code","38d99b2f":"code","7e51c288":"code","83aa7ecc":"code","ab5dca3f":"code","d9d5b37e":"code","4e73b079":"code","d5ec8f66":"code","97f9b3f1":"markdown","d471ab47":"markdown","40a5985c":"markdown","51cfb834":"markdown","c7d5df83":"markdown","32d8075c":"markdown","24b02785":"markdown","85f9be26":"markdown","05ebe405":"markdown","1abf308c":"markdown","04056a4b":"markdown","370387e7":"markdown","291a4723":"markdown","707cfa6a":"markdown","4cbe9aa6":"markdown"},"source":{"4d20b7f8":"#Libraries are imported\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","fe4c0e14":"data = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\") #For loading data using pandas and data is a data frame.","fe5d5ecf":"data.head() # First five rows of data frame can be seen using this.","d1b8a670":"data.isnull().sum() #For checking if any column has null values or not and number of null values.","39ec67a5":"data.dtypes #Data type of each column.","fab8c982":"data['cp'].unique() #Checking unique values in the column in cp.","997925a4":"data[\"fbs\"].unique() #Checking unique values in the column in fbs.","6d9e055f":"data[\"restecg\"].unique() #Checking unique values in the column in restecq.","79d665a5":"data[\"exang\"].unique()","f3564862":"data[\"slope\"].unique()","e33ce560":"data['ca'].unique()","22789e67":"data['thal'].unique()","3793c65a":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'target', kind = 'count', hue = 'sex', data = data, palette = 'pink')\nplt.title(\"Gender and Target\")\nplt.show()","85f591cc":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'target', kind = 'count', hue = 'exang', data = data, palette = 'pastel')\nplt.title(\"Exang and Target\")\nplt.show()","e04ea9b6":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'target', kind = 'count', hue = 'fbs', data = data, palette = 'pink')\nplt.title(\"Fbs and Target\")\nplt.show()","da0ab7d8":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'ca', kind = 'count', data = data, palette = 'pastel')\nplt.title(\"Count of Ca\")\nplt.show()","a8507e2e":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'thal', kind = 'count', data = data, palette = 'pink')\nplt.title(\"Count of Thal\")\nplt.show()","08a79ca8":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'sex', kind = 'count', data = data, palette = 'pink')\nplt.title(\"Count of Gender\")\nplt.show()","b46774a8":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'cp', kind = 'count', data = data, palette = 'pastel')\nplt.title(\"Count of Cp\")\nplt.show()\n","1a197ba7":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'fbs', kind = 'count', data = data, palette = 'pink')\nplt.title(\"Count of Fbs\")\nplt.show()","31dffa39":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'restecg', kind = 'count', data = data, palette = 'pastel')\nplt.title(\"Count of restecg\")\nplt.show()\n","a2242642":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'exang', kind = 'count', data = data, palette = 'pink')\nplt.title(\"Count of Exang\")\nplt.show()","45cb9ab3":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'target', kind = 'count', data = data, palette = 'pastel')\nplt.title(\"Count of Target\")\nplt.show()","64bb66bb":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'target', kind = 'count', hue = 'cp', data = data, palette = 'pastel')\nplt.title(\"Cp and Target\")\nplt.show()","89307a2f":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'target', kind = 'count', hue = 'thal', data = data, palette = 'pink')\nplt.title(\"Thal and Target\")\nplt.show()","ca9e07a1":"plt.figure(figsize = (10,10))\nsns.catplot(x = 'target', kind = 'count', hue = 'restecg', data = data, palette = 'pink')\nplt.title(\"Restecg and Target\")\nplt.show()","e9f84f6e":"columns = ['age','trestbps','chol','thalach','oldpeak']\nfor i in columns:\n    plt.figure(figsize = (10,10))\n    sns.boxplot(data = data[i], palette = 'Set2')\n    plt.title(\"Box plot of \" + i)","7edda35e":"data = data[(data[\"trestbps\"]) < 170] #age has no outliers, but trestbps has outliers, but trestbps has outliers, above 170 outliers lie if we look at the boxplot.\ndata = data[(data[\"chol\"]) < 360] \ndata = data[(data[\"thalach\"]) > 90]\ndata = data[(data[\"oldpeak\"]) < 4]","eb6c2ebb":"feature = data[\"slope\"] * data[\"oldpeak\"] # feature generation.\nfeature.head()","cc059a0b":"data[\"feature\"] = feature #adding feature to dataset.\ndata.head()","fd922644":"plt.figure(figsize = (10,10))\nsns.boxplot(data[\"feature\"], palette = 'Set2')\nplt.title(\"Box plot of feature column\")\nplt.show()","86573254":"data = data[(data[\"feature\"]) < 3.8]","173ae811":"column = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'feature']\nfor i in column:\n    plt.figure(figsize = (10,10))\n    sns.distplot(data[i], color = 'b')\n    plt.title(\"Histogram of \" + i)\n    plt.show()","13d9fffe":"data[\"thalach\"] = QuantileTransformer().fit_transform(data[\"thalach\"].values.reshape(-1,1))\ndata[\"oldpeak\"] = QuantileTransformer().fit_transform(data[\"oldpeak\"].values.reshape(-1,1))\ndata[\"feature\"] = QuantileTransformer().fit_transform(data[\"feature\"].values.reshape(-1,1))","8cdf3ad5":"data[\"age\"] = StandardScaler().fit_transform(data[\"age\"].values.reshape(-1,1))\ndata[\"trestbps\"] = StandardScaler().fit_transform(data[\"trestbps\"].values.reshape(-1,1))\ndata[\"chol\"] = StandardScaler().fit_transform(data[\"chol\"].values.reshape(-1,1))\ndata[\"thalach\"] = StandardScaler().fit_transform(data[\"thalach\"].values.reshape(-1,1))\ndata[\"oldpeak\"] = StandardScaler().fit_transform(data[\"oldpeak\"].values.reshape(-1,1))\ndata[\"feature\"] = StandardScaler().fit_transform(data[\"feature\"].values.reshape(-1,1))","bb6ca145":"data_encoded = data #making a copy of our data.","b7b0b95b":"column = [\"sex\",\"cp\",\"fbs\",\"restecg\",\"exang\",\"slope\",\"ca\",\"thal\"]\nfor i in column:\n    dummy = pd.get_dummies(data_encoded[i])\n    data_encoded = pd.concat([data_encoded,dummy], axis = 1)\n    ","10240432":"data.head()","195922dc":"data_encoded.head()","8f3a9d18":"data.describe() #pandas function to get statistics.","43555a3a":"y = data[\"target\"] # y is target column","7ef93dc4":"data.drop([\"target\"], axis = 1, inplace = True)","30103d2e":"data.head()","160d8697":"train_x,test_x,train_y,test_y = train_test_split(data,y, test_size = 0.3, random_state = 50)","dcc4e40c":"data_encoded.drop(['target','sex','cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal'], axis = 1, inplace = True)","60169289":"train_x_1,test_x_1,train_y_1,test_y_1 = train_test_split(data_encoded,y, test_size = 0.3, random_state = 50)\n","8052c4ee":"logistic = LogisticRegression()\nlogistic.fit(train_x,train_y)\nlogistic_y = logistic.predict(test_x)\nprint(accuracy_score(logistic_y,test_y))","198810e6":"confusion_matrix=metrics.confusion_matrix(test_y,logistic_y)\nconfusion_matrix","b1edea14":"logistic_1 = LogisticRegression()\nlogistic_1.fit(train_x_1, train_y_1)\nlogistic_y_1 = logistic_1.predict(test_x_1)\nprint(accuracy_score(logistic_y_1, test_y_1))","1f5ff4d6":"confusion_matrix=metrics.confusion_matrix(test_y,logistic_y_1)\nconfusion_matrix","7b324f44":"random = RandomForestClassifier()\nrandom.fit(train_x,train_y)\nrandom_y = random.predict(test_x)\nprint(accuracy_score(random_y,test_y))","55845715":"confusion_matrix=metrics.confusion_matrix(test_y,random_y)\nconfusion_matrix","93d22e80":"random_1 = RandomForestClassifier()\nrandom_1.fit(train_x_1,train_y_1)\nrandom_y_1 = random_1.predict(test_x_1)\nprint(accuracy_score(random_y_1,test_y_1))","241b0a18":"confusion_matrix=metrics.confusion_matrix(test_y,random_y_1)\nconfusion_matrix","6ca8ebb6":"bayes = GaussianNB()\nbayes.fit(train_x,train_y)\nbayes_y = bayes.predict(test_x)\nprint(accuracy_score(bayes_y,test_y))","38d99b2f":"confusion_matrix=metrics.confusion_matrix(test_y,bayes_y)\nconfusion_matrix","7e51c288":"bayes_1 = GaussianNB()\nbayes_1.fit(train_x_1,train_y_1)\nbayes_y_1 = bayes_1.predict(test_x_1)\nprint(accuracy_score(bayes_y_1,test_y_1))","83aa7ecc":"confusion_matrix=metrics.confusion_matrix(test_y,bayes_y_1)\nconfusion_matrix","ab5dca3f":"svm = SVC()\nsvm.fit(train_x,train_y)\nsvm_y = svm.predict(test_x)\nprint(accuracy_score(svm_y,test_y))","d9d5b37e":"confusion_matrix=metrics.confusion_matrix(test_y,svm_y)\nconfusion_matrix","4e73b079":"svm_1 = SVC()\nsvm_1.fit(train_x_1,train_y_1)\nsvm_y_1 = svm_1.predict(test_x_1)\nprint(accuracy_score(svm_y_1,test_y_1))","d5ec8f66":"confusion_matrix=metrics.confusion_matrix(test_y,svm_y_1)\nconfusion_matrix","97f9b3f1":"# SVM","d471ab47":"# Model Fitting","40a5985c":"**Creating new feature**","51cfb834":"# Naive Bayes","c7d5df83":"# Data Preprocessing","32d8075c":"**Normal Distribution**","24b02785":"**If you liked it please upvote**","85f9be26":"**Removing Outliers**","05ebe405":"**Removing Outliers from new feature**","1abf308c":"# Logistic Regression","04056a4b":"# RandomForestClassifier","370387e7":"# Train-Test Data","291a4723":"**Min-Max Scaling**","707cfa6a":"# Introduction","4cbe9aa6":"# Data Visualization"}}