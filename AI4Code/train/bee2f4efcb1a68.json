{"cell_type":{"7037dfca":"code","6579f883":"code","6a7c36ab":"code","1266426e":"code","6c3adb78":"code","6e967187":"code","2c5fc8f0":"code","8540b882":"code","8ed0fc8e":"code","cf38ac59":"code","30079dc3":"code","a866ee84":"code","1acd7f75":"code","8cae0ff8":"code","8d48fe3a":"code","30b31720":"code","246bd4ba":"code","b2fdc512":"code","6ace4ba3":"code","35f101a6":"code","dae8f237":"code","00fb080d":"code","7776f5ae":"code","a71dc236":"code","7533ed9a":"code","5653a808":"code","bf035281":"code","32976b77":"code","3325ce0e":"markdown","77dc84b7":"markdown","7fbe34ba":"markdown","e07923a9":"markdown","f6add822":"markdown","3f5543eb":"markdown","82c8e2da":"markdown","acaf6547":"markdown","d2e835f9":"markdown","8dcf408a":"markdown","a0f89154":"markdown","4eec1816":"markdown","7e7016d0":"markdown","3861ff22":"markdown","6816f3bb":"markdown","a150955c":"markdown","717b2f9e":"markdown","78a40898":"markdown","b4fa4909":"markdown","7ee05231":"markdown","ac1619ad":"markdown","21f65d37":"markdown","48f8bf54":"markdown"},"source":{"7037dfca":"#Load the librarys\nimport pandas as pd #To work with dataset\nimport numpy as np #Math library\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns #Graph library that use matplot in background\nimport matplotlib.pyplot as plt #to plot some parameters in seaborn\nimport warnings\n# Preparation  \nfrom sklearn.preprocessing import LabelEncoder, OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import PowerTransformer, StandardScaler,Normalizer,RobustScaler,MaxAbsScaler,MinMaxScaler,QuantileTransformer\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import KBinsDiscretizer\n# Import StandardScaler from scikit-learn\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.impute import KNNImputer,IterativeImputer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.pipeline import make_pipeline, Pipeline,FeatureUnion\nfrom sklearn.manifold import TSNE\n# Import train_test_split()\n# Metrics\nfrom sklearn.metrics import roc_auc_score, average_precision_score\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import roc_curve,confusion_matrix\nfrom datetime import datetime, date\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.linear_model import LinearRegression, RidgeCV\nfrom sklearn.linear_model import LogisticRegression\n\nimport tensorflow as tf \nfrom tensorflow.keras import layers\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import LearningRateScheduler\n#import smogn\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.ensemble import GradientBoostingRegressor,RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import HistGradientBoostingClassifier\n# For training random forest model\nimport lightgbm as lgb\nfrom scipy import sparse\nfrom sklearn.neighbors import KNeighborsRegressor \nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans \n# Model selection\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_regression,f_classif,chi2\nfrom sklearn.feature_selection import mutual_info_regression\nfrom sklearn.feature_selection import SelectPercentile\nfrom sklearn.feature_selection import mutual_info_classif,VarianceThreshold\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom lightgbm import LGBMClassifier\nimport lightgbm as lgbm\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import svm\nfrom xgboost import XGBClassifier\nfrom sklearn import set_config\n\nfrom itertools import combinations\n#import smong \n\nimport category_encoders as ce\nimport warnings\nimport optuna \nfrom joblib import Parallel, delayed\nimport joblib \nfrom sklearn import set_config\nimport preparation\nset_config(display='diagram')\nimport ray\nwarnings.filterwarnings('ignore')","6579f883":"# import lux\n# Load the training data\ntrain = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\n# Preview the data\ntrain.head()","6a7c36ab":"train[train.select_dtypes(['float64']).columns] = train[train.select_dtypes(['float64']).columns].apply(pd.to_numeric)\ntrain[train.select_dtypes(['object']).columns] = train.select_dtypes(['object']).apply(lambda x: x.astype('category'))","1266426e":"# Author : https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        name =df[col].dtype.name \n        \n        if col_type != object and col_type.name != 'category':\n        #if name != \"category\":    \n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","6c3adb78":"# df_reduit_final =preparation.Reducer().reduce(train,verbose= False )","6e967187":"train=reduce_mem_usage(train)\ntest=reduce_mem_usage(test)","2c5fc8f0":"y=train['claim']","8540b882":"num_features= train.drop(['id','claim'], axis=1).columns\ncat_features = [w.replace('f', 'c') for w in num_features]\nnum_features","8ed0fc8e":"# create the discretizer object with strategy quantile and 1000 bins\ndiscretizer = KBinsDiscretizer(n_bins=1500, encode='ordinal',strategy='uniform')\n\npipeline = Pipeline([\n        ('imputer', SimpleImputer( strategy='median')),\n        ('bin', discretizer)\n    ])\n# fit the discretizer to the train set\npipeline.fit(train.loc[:,num_features])\n\n# apply the discretisation\ntrain2 = pipeline.transform(train.loc[:,num_features])\n\ntest2 = pipeline.transform(test.loc[:,num_features])\n\n","cf38ac59":"train2_df=pd.DataFrame(train2,columns=cat_features).astype('category')\ntest2_df=pd.DataFrame(test2,columns=cat_features).astype('category')\n# Apply the mask to create a reduced dataframe\ntrain2_df_red =train2_df.iloc[:, [ 2, 9, 10, 21, 23, 45, 52, 69, 91, 95, 96, 103]]\ntest2_df_red=test2_df.iloc[:, [ 2, 9, 10, 21, 23, 45, 52, 69, 91, 95, 96, 103]]\nprint(\"Dimensionality reduced from {} to {}.\".format(train2_df.shape[1], train2_df_red.shape[1]))\nx_final= pd.concat( [train.loc[:,num_features], train2_df_red], axis=1) \nx_test_final= pd.concat( [test.loc[:,num_features], test2_df_red], axis=1) ","30079dc3":"x_final.dtypes","a866ee84":"del train\ndel train2_df\ndel test \ndel test2_df \ndel train2_df_red\ndel test2_df_red","1acd7f75":"x_final[x_final.select_dtypes(['float64']).columns] = x_final[x_final.select_dtypes(['float64']).columns].apply(pd.to_numeric)\nx_final[x_final.select_dtypes(['object']).columns] = x_final.select_dtypes(['object']).apply(lambda x: x.astype('category'))\nx_test_final[x_test_final.select_dtypes(['float64']).columns] = x_test_final[x_test_final.select_dtypes(['float64']).columns].apply(pd.to_numeric)\nx_test_final[x_test_final.select_dtypes(['object']).columns] = x_test_final.select_dtypes(['object']).apply(lambda x: x.astype('category'))","8cae0ff8":"# select non-numeric columns\ncat_columns = x_final.select_dtypes(include=['object','category']).columns\ncat_columns","8d48fe3a":"# select the float columns\nnum_columns = x_final.select_dtypes(exclude=['object','category']).columns\nnum_columns","30b31720":"all_columns = list(num_columns) + list(cat_columns)\nprint(cat_columns)\nprint(num_columns)\nprint(all_columns)","246bd4ba":"if set(all_columns) == set(x_final.columns):\n    print('Ok')\nelse:\n    # Let's see the difference \n    print('dans all_columns mais pas dans train  :', set(all_columns) - set(x_final.columns))\n    print('dans X.columns   mais pas dans all_columns :', set(train.columns) - set(all_columns))","b2fdc512":"# select the float\/cat columns\ncat_feautres = x_final.select_dtypes(include=['object','category']).columns\nnum_features = x_final.select_dtypes(exclude=['object','category']).columns\n#Define vcat pipeline\ncat_feautres2=['c10', 'c11', 'c24']\ncat_pipe = Pipeline([('selector',preparation.ColumnsSelector(cat_feautres2)),\n                     ('Encoder', ce.target_encoder.TargetEncoder())\n                    ])\n#Define vnum pipeline\nnum_pipe = Pipeline([('selector',preparation.ColumnsSelector(num_features)),\n                     ('features',preparation.FeaturesEngineerTPS()),\n                      ('outlier',preparation.OutlierReplace()),\n                     ('imputer', SimpleImputer(strategy='mean',add_indicator=True)),\n                     ('scaler', RobustScaler()),\n                     ('kmeans', preparation.MiniKmeansTransformerStand())\n                   \n                    ])\n#Featureunion fitting training data\npreprocessor = FeatureUnion(transformer_list=[('cat', cat_pipe),\n                                              ('num', num_pipe)])\n# preprocessor.fit(X_train)\n#############################\n# Complete Pipe \ndef create_pipeline(model, preprocessor):\n    pipeline = Pipeline([\n        ('pre', preprocessor),\n        ('estimator', model)\n    ])\n    return pipeline\n# Model \nparamsHGBC={'l2_regularization': 2.311620342927431,          \n 'early_stopping': 'False',\n 'learning_rate': 0.0775102184223046,\n 'max_iter': 1000,\n 'max_depth': 29,\n 'max_bins': 141,\n 'min_samples_leaf': 4707,\n 'max_leaf_nodes': 28}\nmodel_HGBC = HistGradientBoostingClassifier(**paramsHGBC)\n# Complete Pipe \npipeline_model_HGBC = create_pipeline(model_HGBC,preprocessor)\npipeline_model_HGBC","6ace4ba3":"%%time \n# evaluate each strategy on the dataset\nresults = list()\n# Setting a 10-fold stratified cross-validation (note: shuffle=True)\nSEED = 42\nFOLDS = 10\nskf = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=SEED)\n# CV interations\n# Create arrays for the features and the response variable\nroc_auc = list()\naverage_precision = list()\noof     = np.empty((x_final.shape[0],))\noof_bin = np.empty((x_final.shape[0],))\npredictions=[]\nmean_auc = 0\nbest_iteration = list()\nfor fold, (train_idx, test_idx) in enumerate(skf.split(x_final, y)):    \n    X_train, y_train = x_final.iloc[list(train_idx), :], y.iloc[list(train_idx)]\n    X_test, y_test = x_final.iloc[list(test_idx), :], y.iloc[list(test_idx)]\n    pipeline_model_HGBC.fit(X_train,y_train)\n    preds = pipeline_model_HGBC.predict_proba(X_test)[:,1]\n    oof[test_idx] = preds\n    auc_score= roc_auc_score(y_true=y_test, y_score=preds)\n    print(f\"Fold {fold} | AUC: {auc_score}\")\n    roc_auc.append(auc_score)\n    average_precision.append(average_precision_score(y_true=y_test, y_score=preds))\n    mean_auc += auc_score \/ FOLDS\n    predictions.append(pipeline_model_HGBC.predict_proba(x_test_final)[:,1]) \n    #Mean of the predictions\nprint(f\"\\nOverall mean auc : {mean_auc}\")","35f101a6":"predictions = np.mean(np.column_stack(predictions), axis=1)","dae8f237":"import os \nprint('Number of CPUs in the system: {}'.format(os.cpu_count()))","00fb080d":"preprocessor.fit(x_final[0:500],y[0:500])\nx_final_pre = preprocessor.transform(x_final[0:500])\nx_test_final_pre = preprocessor.transform(x_test_final[0:500])\ndel x_final\ndel x_test_final\n","7776f5ae":"splitter = StratifiedKFold(n_splits=3, shuffle=True, random_state=123)\nfolds = list(splitter.split(x_final_pre[0:500],y[0:500]))\nprint(len(folds))\nprint(len(folds[0]),len(folds[1]))","a71dc236":"%%time\nray.shutdown()\n# Start Ray.\nray.init()\n# prepare our data for ray \nx_final_pre_id = ray.put(x_final_pre[0:500])\nx_test_final_pre_id= ray.put(x_final_pre[0:500])\ny_id= ray.put(y.iloc[0:500].to_numpy())\n# Start 3 tasks in parallel.\n@ray.remote\ndef cross_validation_helper(fold,num,x_final_pre,y,x_test_final_pre):\n    cross_vald =preparation.CrossValidationParallelism(model_HGBC,x_final_pre ,y,x_test_final_pre)\n    results = cross_vald.cross_validation(fold,num)\n    return results \nSEED = 42\nFOLDS = 3\nskf = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=SEED)\nresult_ids = [cross_validation_helper.remote(fold,num,x_final_pre_id,y_id,x_test_final_pre_id) for  num,  fold in enumerate(skf.split(x_final_pre[0:500],y.iloc[0:500]))]","7533ed9a":"values = ray.get(result_ids)\nprint(f\"overall auc: {np.column_stack([ i['auc'] for i in values]).mean(axis=1)}\")","5653a808":"print(\"Roc auc score OOF %0.3f\" % roc_auc_score(y_true=y, y_score=oof))\nprint(\"Average precision OOF %0.3f\" % average_precision_score(y_true=y, y_score=oof))","bf035281":"from sklearn.metrics import auc\nfpr, tpr, thresholds = roc_curve(y_true=y, y_score=oof)\nauc = auc(fpr, tpr)\nplt.figure(1)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='HGBC(area = {:.3f})'.format(auc))\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","32976b77":"# Save the predictions to a CSV file\nsub = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nsub['claim']=predictions\nsub.to_csv('CV_submission_deep.csv', index=False)\nsub","3325ce0e":"### Num Features","77dc84b7":"## Define the model features and target\n\n### Extract X and y \n\n**Reduce Memory Usage**","7fbe34ba":"<a id=3><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Data Preparation<\/center><\/h3>\n\n\n## Data preprocessing\n\nData preprocessing comes after you've cleaned up your data and after you've done some exploratory analysis to understand your dataset. Once you understand your dataset, you'll probably have some idea about how you want to model your data. Machine learning models in Python require numerical input, so if your dataset has categorical variables, you'll need to transform them. Think of data preprocessing as a prerequisite for modeling.\n\n\n### Missing Values  :\n\n- A Simple Option: Drop Columns with Missing Values\n\n        \n-  Replacing missing values with constants        \n    \n-  A Better Option: Imputation\n     \n- Iterative imputation\n\n### Scaling \n\n\n\n**Normalization**\n\n**Standardization**\n\n**Log Transformer**\n\n**Min-Max Scaler**\n\n\n**Max Abs Scaler**\n\n\n\n**Standard Scaler**\n\n**Robust Scaler**\n\n\n**Power Transformer**\n\n\n1. Box-Cox transform\n\n2. The Yeo-Johnson transform\n\n\n\n**Quantile Transformer Scaler**\n\n1. It computes the cumulative distribution function of the variable\n\n2. It uses this cdf to map the values to a normal distribution\n\n3. Maps the obtained values to the desired output distribution using the associated quantile function\n\n\n\n**Unit Vector Scaler\/Normalizer**\n\n\n    \n**Custom Transformer**\n\n\n**Binning**\n\n\n**Cat Features** \n\n    Label Encoding or Ordinal Encoding\n    \n    One hot Encoding\n    \n    Dummy Encoding\n    \n    Effect Encoding\n    \n    Binary Encoding\n    \n    BaseN Encoding\n    \n    Hash Encoding\n    \n    Target Encoding\n\n   \n###  Outlier Handling\n\nStatistical outlier removal\n\n\n## Feature Engineering\n\nFeature engineering is the act of taking raw data and extracting features from it that are suitable for tasks like machine learning. Most machine learning algorithms work with tabular data. When we talk about features, we are referring to the information stored in the columns of these tables \n\n- Binning\n\n\n![image.png](attachment:17b0d040-1817-40ac-a102-8243504c430b.png)\n\n- Sparse Interactions\n\n- Kmeans Features\n\n- Polynominal  Features","e07923a9":"# Modern_Parallelism_Ray_Optinal !!!\n**Distributed Scikit-Learn with Ray**\n\nScikit-learn parallelizes training on a single node using the joblib parallel backends. Joblib instantiates jobs that run on multiple CPU cores. The parallelism of these jobs is limited by the number of CPU cores available on that node. The current implementation of joblib is optimized for a single node, but why not go further and distribute it on multiple nodes?\n\nRunning distributed applications on multiple nodes introduces a host of new complexities like scheduling tasks across multiple machines, transferring data efficiently, and recovering from machine failures. Ray handles all of these details while keeping things simple.\n\nRay is a fast and simple framework for building and running distributed applications. Ray also provides many libraries for accelerating machine learning workloads. If your scikit-learn code takes too long to run and has a high degree of parallelism, using the Ray joblib backend could help you to seamlessly speed up your code from your laptop to a remote cluster by adding four lines of code that register and specify the Ray backend.\n\n\nGo deep : I prepared this notebook for this task \n\n**Upvote if you find it helpful :)**\n\nhttps:\/\/www.kaggle.com\/bannourchaker\/modern-parallel-distributed-pythonscikitlearn\n\n**prepare the data :**","f6add822":"# Add bin data ","3f5543eb":"<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\"><center>CRISP-DM Methodology<\/center><\/h3>\n\n* [Buissness Understanding](#1)\n* [Data Understanding](#2)\n* [Data Preparation](#3)\n* [Data Modeling](#4)   \n* [Data Evaluation](#5)\n    \n\nIn this section we overview our selected method for engineering our solution. CRISP-DM stands for Cross-Industry Standard Process for Data Mining. It is an open standard guide that describes common approaches that are used by data mining experts. CRISP-DM includes descriptions of the typical phases of a project, including tasks details and provides an overview of the data mining lifecycle. The lifecycle model consists of six phases with arrows indicating the most important and frequent dependencies between phases. The sequence of the phases is not strict. In fact, most projects move back and forth between phases as necessary. It starts with business understanding, and then moves to data understanding, data preparation, modelling, evaluation, and deployment. The CRISP-DM model is flexible and can be customized easily.\n## Buissness Understanding\n\n    Tasks:\n\n    1.Determine business objectives\n\n    2.Assess situation\n\n    3.Determine data mining goals\n\n    4.Produce project plan\n\n## Data Understanding\n     Tasks:\n\n    1.Collect data\n\n    2.Describe data\n\n    3.Explore data    \n\n## Data Preparation\n    Tasks\n    1.Data selection\n\n    2.Data preprocessing\n\n    3.Feature engineering\n\n    4.Dimensionality reduction\n\n            Steps:\n\n            Data cleaning\n\n            Data integration\n\n            Data sampling\n\n            Data dimensionality reduction\n\n            Data formatting\n\n            Data transformation\n\n            Scaling\n\n            Aggregation\n\n            Decomposition\n\n## Data Modeling :\n\nModeling is the part of the Cross-Industry Standard Process for Data Mining (CRISP-DM) process model that i like best. Our data is already in good shape, and now we can search for useful patterns in our data.\n\n   Tasks\n    1. Select modeling technique Select technique\n\n    2. Generate test design\n\n    3. Build model\n\n    4. Assess model\n\n## Data Evaluation :\n    Tasks\n\n    1.Evaluate Result\n\n    2.Review Process\n\n    3.Determine next steps\n\n<a id=1><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Buissness Understanding<\/center><\/h3>\n\n    \nThe dataset is used for this competition is synthetic but based on a real dataset and generated using a CTGAN. The original dataset deals with predicting the amount of an insurance claim. Although the features are anonymized, they have properties relating to real-world features.\n\n**Eval Metric**: Submissions are evaluated on area under the ROC curve between the predicted probability and the observed target\n    \n\n    \n## Step 1: Import helpful libraries","82c8e2da":"# Cast Dtype","acaf6547":"## check that we have all column","d2e835f9":"<a id=5><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Data Evaluation<\/center><\/h3>\n\n**ROC Curve**\n\nAUC - ROC curve is a performance measurement for the classification problems at various threshold settings. ROC is a probability curve and AUC represents the degree or measure of separability. It tells how much the model is capable of distinguishing between classes. Higher the AUC, the better the model is at predicting 0 classes as 0 and 1 classes as 1. By analogy, the Higher the AUC, the better the model is at distinguishing between patients with the disease and no disease. The ROC curve is plotted with TPR against the FPR where TPR is on the y-axis and FPR is on the x-axis.\n![image.png](attachment:af920d5f-6a36-47ad-a091-c6deea09bdba.png)","8dcf408a":"**Get the results :**","a0f89154":"\n## Step 2: Load the data\n\nNext, we'll load the training and test data.\n\nWe set index_col=0 in the code cell below to use the id column to index the DataFrame. (If you're not sure how this works, try temporarily removing index_col=0 and see how it changes the result.)","4eec1816":"**CrossValidation Design**","7e7016d0":"\n<a id=2><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Data Understanding<\/center><\/h3>\n\n\n### Explore the data\n\n    Null Data\n    Categorical data\n    Itrain.isnull().sum().valuess there Text data\n    wich columns will we use\n    IS there outliers that can destory our algo\n    IS there diffrent range of data\n    Curse of dimm...\n    \nThis step is done in this notebook : \n    \nhttps:\/\/www.kaggle.com\/bannourchaker\/step0-complete-eda-dataunderstanding?scriptVersionId=74464212\n    \n**If you like my work just upvote :)**\n\n\n\n\n    \n\n","3861ff22":"# Convert Dtypes :","6816f3bb":"# Train \n## Define Baseline  Preprocess: \nIt is always better to start with a simple model in every Machine Learning problem. Then we can apply different methods to increase the score and make a more robust model. This notebook aims to make a baseline model and make my first submission in this competition.\n\n**complete preprocessor pipe**","a150955c":"I have used only sample here : we have a big data set .If we want all benefits of ray  let's run it on cluster of workers .","717b2f9e":"### Final X and y  train \/ test:","78a40898":"# Classic : Pipe + CV ","b4fa4909":"<a id=4><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Modeling :Find Best Pipe<\/center><\/h3>\n\n\n\n**Steps for K-fold cross-validation**\n\n    Split the dataset into K equal partitions (or \"folds\")\n        So if k = 5 and dataset has 150 observations\n        Each of the 5 folds would have 30 observations\n    Use fold 1 as the testing set and the union of the other folds as the training set\n        Testing set = 30 observations (fold 1)\n        Training set = 120 observations (folds 2-5)\n    Calculate testing accuracy\n    Repeat steps 2 and 3 K times, using a different fold as the testing set each time\n        We will repeat the process 5 times\n        2nd iteration\n            fold 2 would be the testing set\n            union of fold 1, 3, 4, and 5 would be the training set\n        3rd iteration\n            fold 3 would be the testing set\n            union of fold 1, 2, 4, and 5 would be the training set\n        And so on...\n    Use the average testing accuracy as the estimate of out-of-sample accuracy\n\nDiagram of 5-fold cross-validation\n\n![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAYUAAAIYCAYAAACCM\/BIAAAgAElEQVR4nOzdeXxTdb7\/8RSKMiroODPqdUR2HWdGRrxeR3\/OeEWcwL2Oo+h9zNw7d66iuAAqOy6M7CIzAlIKiIigLC0UZC2LpQuFrlDaNN3SNUmbpU3SbM2eLu\/fH+Uc09IibWnShvfz8fg8hNCWcNrk5feckxwJiIiILpGE+g4QEVHfwSgQEZGIUSAiIhGjQEREIkaBiIhEjAIREYkYBSIiEjEKREQkYhSIiEjEKBARkYhRICIi0TWNQktLC1paWtDc3Izm5mY0NTWhsbGRw+FwONdwmpqaxOfZ5uZm8bn3WuhxFAIj0NjYCL\/fD5\/PB6\/XC4\/HA7fbzeFwOJxrPF6vFz6fDz6fD36\/XwxFT+PQoygIQWhsbITP54NOp8O+ffuwd+9exMbGIiYmBnv27MGePXuwe\/du7Nq1i8PhcDjdmN27d4vPp3v27EFMTAxiY2ORkJAAl8sFr9fbZhURkig0NzfD7\/fD6\/XC5XJhwoQJGDFiBF566SW8+OKLbWbKlCkcDofD6cG0f1598cUXIZFIkJycDIfDIa4gehKGbkdBCILH44HT6YTNZsPEiRORnJzc3S9JRERdNHnyZHz77bcwm81oaGiAy+WCz+frdhi6HYWmpiZ4vV4xCAaDARMmTGAUiIiCaPLkydizZw\/0er0YBo\/Hg8bGxuBFIXCVYLPZYDKZoNFo8OSTTzIKRERBNGnSJGzfvh1KpRJ6vR4WiwUOh0PcjdRV3Y6CcBzBbDZDq9WivLwcTzzxBKNARBREkyZNwsaNG1FUVASVSgWDwQCbzQa32w2\/39\/ls5G6FQVh15Gw20ilUqGgoACPPfYYo0BEFESTJk3C2rVrkZOTg7KyMmg0GtTX18PlcsHv93d5F1K3otDY2AiPxwOr1QqdTofy8nLk5ubi0UcfZRSIiIJIKpVi1apVSEtLQ2FhIdRqNYxGIxwOR3Cj4Ha7YTabodFooFAokJWVhUceeYRRICIKIqlUiiVLliAlJQUymQxVVVWora2F3W6Hz+cLThR8Ph+cTifq6+tRXV2NoqIipKWl4V\/\/9V8ZBSKiIJJKpVi0aBESEhLEXUh6vT40UTAajVCpVJDL5UhNTcXDDz\/MKBARBZFUKsX777+PkydPIjs7G6WlpdDpdLBarfB6vaGJgkwmQ3JyMsaPH88oEBEFkVQqxfz58xEfH4\/MzEwoFApotdrQRUGpVCIvLw9JSUl46KGHGAUioiCSSqWYN28ejh49ioyMDCgUCmg0GlgsltBEoaqqCrm5uUhMTGQUiIiCTCqVYu7cuWIUiouLUVNTA4vFAo\/H0\/tRaGlpgc\/ng8PhgMFgYBSIiEJIiMKRI0eQnp5+WRS6+qpmRoGIqB9jFIiISMQoEBGRiFEgIiIRo0BERCJGgYiIRIwCERGJGAUiIhIxCkSdqK6uhkKhEKe0tBQejyfUd4uoVzEKRJ146qmnIJFI2kxkZCQefvhhZGZmdulr+f1+fPHFF1Aqlb10b4muDUaBqBNPPfUUHn74YVRUVKCiogLFxcU4cOAAHn\/8cdxwww04fvz4VX8tu90OiUSCb7\/9thfvMVHPMQpEnXjqqafw\/\/7f\/7vsdp\/Ph\/Hjx+P++++\/7AFSXl6OM2fOwOl0irf5\/X7k5+dDIpFg8+bNMBqNP\/g5RKHCKBB1orMoAMCuXbsgkUiQnp4OAMjIyMCIESMQGRmJu+66C5GRkXjuuefgdrtRWlqKyMhISCQSDBw4ENOmTfvBzyEKFUaBqBNXioJcLodEIsE333wDAPjtb3+LP\/7xj6irqwMAJCQkQCKR4NChQwA63n30Q59DFAqMAlEnrhSF2tpaSCQSfP755wCAgwcPtjmIbDAYcMMNN4h\/3lEUfuhziEKBUSDqxJWiUFBQAIlEgvPnzwMAPB4PvvnmGzz\/\/PN48MEHMXToUERERFwxCj\/0OUShwCgQdeJKUVi5ciUGDRoEr9cLAPjNb36D0aNHY\/Xq1Thx4gSMRiNuvvnmK0bhhz6HKBQYBaJOdBYFpVKJYcOG4dlnnwUAZGVlQSKR4MyZM+LH6PX6NruX2kfhaj6HKBQYBaJOPPXUU3jggQdw4sQJnDhxAkeOHMG6detw++23Y8yYMaivrwcAqNVqDBgwAJs2bUJLSwtUKhUmT56MiIgIREVFAWg9jfWGG27AihUr4HK5rupziEKBUSDqRPtXNA8YMADjx4\/H\/PnzUVVV1eZj33vvPfzoRz\/CzTffjFtuuQVbtmzBtGnTEBkZiWPHjgEAXn\/9dQwYMABTp0696s8hCjZGgegasdvtkMlkbR40KpUKPp9P\/L3ZbG7zOoSr+RyiYGIUiIhIxCgQEZGIUSAiIhGjQEREIkaBiIhEjAIREYkYBSIiEjEKREQkYhSIiEjEKBARkYhRICIiEaNAREQiRoGIiESMAhERiRgFIiISMQpERCRiFIiISMQoEBGRiFEgIiJRyKMAAD6fD06nE0ajUYxCUlISo0BEFGRCFI4ePYqMjAyUlJSIUfB6vWhubu7S1+txFJRKJfLy8hgFIqIQkEqlmDdvXpsoaDSa0EZBJpMhOTkZ48ePZxSIiIJIKpViwYIFiI+PR2ZmJhQKBbRabWiiYDKZoFKpIJfLcebMGYwbNw7r1q3D1q1b8fnnn2PTpk2Ijo5GVFQUoqKisH79eg6Hw+F0c6KiorBhwwZs3LgRmzdvxpYtW3DzzTdj4cKFOHHiBLKysqBQKKDT6WC1WoMXBb\/fD6fTifr6elRXV6OgoADp6elYunQpHnzwQYwbNw4PPPAAxo4di1GjRmH48OG49957MWzYMA6Hw+F0c4YPH46RI0di9OjRuP\/++\/GrX\/0Kjz76KLZv346EhATk5OSgvLwcer0edrs9uFFwu90wm82oqalBSUkJsrOzcfz4cezatQsbNmzAxx9\/jEWLFmHOnDmYMWMG3njjDbz22mscDofD6cZMmzYNb775Jt555x0sWLAAS5YswZo1a7B161YcOHAAKSkpkMlkqKysRG1tLex2O3w+X3Ci0NjYCI\/HA5vNBp1Oh\/Lycly8eBFJSUk4cOAAvvrqK0RFRWHVqlVYvHgx3n\/\/fcyfPx9z5szhcDgcTjdm7ty5WLhwIT788EMsX74cn376KTZv3ozdu3cjPj4eGRkZKCwshEqlgtFohMPhCG4UvF4v7HY7DAYDVCoVCgoKkJGRgePHj2Pfvn3Yvn07Nm3ahHXr1mH16tVYuXIlVqxYgeXLl3M4HA6ni7Ny5UqsWrUKn376KaKiovDFF19g165dOHToEJKTk3Hx4kWUlZVBo9HAbDbD5XLB7\/ejpaWl96PQ3NwMr9cLp9MJs9kMjUaD8vJyyGQynD17FqdOncLBgwcRGxuLb775Bl9++SW2bt2KLVu24PPPP+dwOBxOF2fLli3Ytm0bduzYgV27diEuLg7Hjh1DYmIisrKyUFRUBJVKhbq6OtjtdrhcLjQ1NQUnCi0tLWhsbITb7YbdbofJZEJNTQ3KysqQn5+P7OxspKam4vTp0zh16hSOHTuGw4cP49ChQzh48CCHw+FwujiHDx\/GkSNHcPz4cSQkJCA5ORlpaWnIyclBcXExlEol9Ho9LBaLuOuoq69m7lEUmpqa4PV64XK5YLPZxDBUVFSguLgY+fn5uHjxIrKzs5GZmYn09HSkpaVxOBwOpxuTnp6O9PR0ZGdn48KFC8jNzUVBQQHKysqgUqmg0+lgNpvR0NAAt9uNxsbGLh9P6HYUgNZdSMKxBafTKYZBr9ejuroaVVVVKCsrQ2lpKRQKBYqLi1FUVMThcDicbk5xcTEUCgVKS0tRWVkJlUoFjUaD2tpaWCwWNDQ0wOl0iquEru466lEUWlpa2oTB5XLBbrfDYrHAaDTCYDBAr9dDq9VCo9FAo9GgpqaGw+FwON0cjUYDrVYLnU6H2tpaGI1G1NfXw2azweFwwOPxwOv1oqmpqVurhB5FoX0Y\/H4\/PB4PnE4nGhoaYLfbYbPZYLVaYTabORwOh3MNxmKxwGazwW63iysDt9sNr9eLxsbGHgWhx1EIjENTU5MYB7\/fD6\/XC6\/XC4\/HA7fbzeFwOJxrNMLzq8\/ng9\/vF2PQ3V1G1zwK7TU3N7cZ4c4K4eBwOBzO1U\/gc6iwEgica6lXokBERP0To0Bho6WlpcNp\/39V12ra\/z1E4YBRoH4v8Im5\/TI7WMv69qEg6q8YBeq3OouB3++Hz+drc5KDy+W6ZiN8TY\/HA4\/H0+ZAnxAGov6KUaB+q30QGhsbxTPeAk+NFk6PttlssFgs3Rqr1Qqr1SqeCtj+dECPxyOuHhgG6s8YBeq32gfB4\/FAZ27A4QIDvpXpcSBPh\/25WsRd1GBfTs01nf25WhzI0+FbmR7JpQY4nc42q4ZrfUYIUbAwCtRvCVEQXjjpcDgg3VmO+6JL8O87yvHkpfl3Yb5unafEqRBnwjffz9PtZuLOSkzcWYlnhNlViT\/sqsIfdrfOnZ8W4ly5QXxFqRAGrhaoP2IUqF8KfDW9EASr1Yo\/fFOGvx7WYn6yCQtSTFiYYsJ7Z+rxQaoZH6Sa8eFZM\/5+zoK\/n7PgozQLlqRbsSTdiqXpVizLsGF5pg0rMu1YmWXHx1kNWJXdgNUXHPhnjhP\/zHHi0xwn1ua6sDbXhc\/y3Fgv8+DZXWWIl2vFd6cUdiVxtUD9EaNA\/ZKwSvD5fHC7W9\/Cvb6+Hn\/4WoiCsU0U3k+tx4dnzVh0KQofpbXO4nQrlqbbsDTdhuWZ9ktja41CdmsUPjnfgH9ccODTHCc+vdgahXW5bqzLc2O9zI3\/3FmKQxdbr3ZltVrhcrng8\/m4WqB+iVGgfkm4poewSjCbzdDpdJi4Q4H\/PaL7fqVwpl5cKXzYbqWwOM2KxWmXVgoZtksrBTtWZNm\/j8J5Bz4578A\/hJXCxXYrhTw3Jn9dgris1oulm82tb10svA8No0D9DaNA\/VJHF3rSarWYuF3x\/e6j5A5WCpeC0LpasH6\/++hSFJZlfL\/7aGWW\/dJKwYF\/XNqFtOaiC2svtt19NGlHMWLTFaiurobRaITdbofb3f33sycKJUaB+h3heILf74fb7YbVaoXBYIBarcbT20vw1yM6zE82YmFK\/ffHFM62HlNYdM6CRWfN+CjN2rr76IdWCpeiIBxTWHPRhTUXXViX58Znl0a6vQi7z35\/KUSLxSJGoTtXviIKJUaB+p3AKLhcLlitVtTV1UGpVGLCV8VtDzSLu4\/aHlNov1JYFhiFTDtWZjUE7D66\/JhC4ErhD18V4psUOaqqqsTLIQoXTWcUqL9hFKjfEaLg8\/nE4wl6vR5VVVWtUTjS9kDzwhSTeOZRp8cUxLOPWqOwIuDso9YoODuMwmd5bvxhW2sUKioqxEsiOp1ORoH6JUaB+qX2UdDpdKisrMSEbcWdHmj+INWMRWevfExheaat4wPNF77ffdR+pfDMtgLsSJKhvLwcWq0W9fX14oXTeUyB+htGgfql9lHQarWoqKjAhG3F4jGF9q9T+PCs5SrOPmqNwop2p6S2nnnkuux1Cp\/lufHMtgJsT8xDWVkZNBoNo0D9GqNA\/Y6w+8jr9XYcBfGYQsCB5oCzjxaJr1NojcLSDFubA82Xv06h7dlHay62vk5BOCW1fRRMJpMYBe4+ov6GUaB+5wejcCTglNQz9eIxBeG4wqJLu44+Otf64rWOX9HcgI+z7OKB5n8GvE5BOPtoXa5L3H3EKFC4YBSo3\/mhKLQ5phBwSurlr1OwXApC6yual2XYsDzD9oOnpAq7j9YFHFNgFChcMArU71zd7iPhmEK9+OK11gPNrfPRlV7RnNn+mML3u4\/ElYKw+0jG3UcUXhgF6neubvdRRweavz\/7SHjvo85fp9AuCu1WCt+\/9xFXChReGAXqd67+QHPAKalnA44pXDoD6bLXKWS2HlNoc6D5fEOHxxSudPYRo0D9GaNAfVrgG8oJMRAuquN2u9HQ0ACTyQSNRoOysjLxmMKClMvfOjtwpfDDb4jX0G73UeuL175fKXQchY7e\/6ipqemyazfzjfKor2IUqE9qbm4WAyBEQBi\/3w+v1wun0wmLxYK6ujqo1WooFAo8ta0o6NdTeGabHNsT81BSUgK1Wo3a2lrxLbQDL7ojjPBv4mU7qS9iFKhPab8a8Pl84ng8Hng8HrhcLjgcjjbvjlpVVYWioqKAKATvegoTv5Tjy+9yUFRUhKqqKmi1WphMJthsNjgcDvEazh6PR\/y3CKHoaBVBFEqMAvUZgUEQVgOBERBCYLPZYLVaYTKZoNPpoFarUVZWhvz8fPz7l4VBv57CxC\/l+OLkeeTn56O0tBRKpRJ6vR4mkwlWqxV2ux0NDQ3iv0GIhHAhHoaB+hJGgfqMwCB8eaEOR4tMOFxgwCF5Hb6V6fGtTI8DeTrsz9ViX04NYrJV2Jlega\/PlWFrUiE2ncrDo58XBv16Co9tlmP5t9nYdCoPW5MKseNsKXZlVCL2vBr7cmqwP1cr3v9vZXocLjDgcIEB3+QaxIvxCGEgCjVGgfqEwGsue71e3PlpIX77ZSn+uLsCz+0px3O7y\/HH3WX4464y\/HFXKZ7dVYpnd5biP79R4D++LsHkHUWQbi\/ExO0lmHXaGNTrKfz9eCkm7SjCs98U47mdJfjTLgVe2FOGKTHlmBJTgRdjK\/DS3kq8tLcS\/7WvClP2KvHbL8vwq00lbVYMXC1QX8AoUJ8QuEpwu92oszTg+ZhKjI0uwV++rcb0k3rMOFWLmadq8fZ3rfNuQh1mnTZg1mkD5iQaMSfRgLlJRsxLMgb1egpRMg825HsRne\/FRrkXmwq82Fzow+eFfnxR1DpfljTiK0UTFqXZ8cCmUrxzvAZWmx1OpxMej0e8ShujQKHGKFCfIFw0RziryG63o76+HpvOqTFqfTGe3lmFGadqMaNdFN5NqMPs0wbMPm3AnEQD5iUbMS\/ZGNTrKURdCkN0vhcbC3zYVODD5gIfPi\/0YculKHxe5MeUb3X49eZS7M\/5\/gptDQ0NcLlcbVYLRKHEKFCf0D4KNptNPJB8vkSJp74qwa82KfDKMR3e\/q4Ob39Xi3cCVgqzL60S5l5aJQTzegqtKwUPouXCSkGIQmsQlmY6MG5LGf6ytwz5JeWorq6GXq+H2WwWoyAcW2AUKNQYBeoThN1HXq8XLpdLjIJer4darUZ5eTn+fqwYI9cX4z9jVW1WCrNO12FOouH73UfJpqBeT2G9zH1p95GnTRQ2F\/jx1yO1uH9DCaK+K0RxcTEqKipQU1OD2tpacaXgdrvFVz8zChRqjAL1Ce2PKTQ0NMBsNqO2thbV1dWoqKhAUVER4tPz8MjnxRj\/RRneOK7Hu6frMPtSEOYkGjCvzTGF4FxPISr\/0kpB2H0k92JltgOPfFkJ6fZiJKTnQCaToaSkBFVVVaipqYHBYIDFYoHD4RCPKTAK1BcwCtRntN+FZLVaYTQaodPpoFKpUFpaioKCApy\/kIPpe2UYtb4ILx6obt19dNqAOZd2H7UeUwje9RTEYwqXdh+9esKIsVHFWPTtRWRmZiIvLw+FhYUoL\/9+11F9fT3sdjt3HVGfwyhQn9HZasFgMECj0aCyshIlJSWQyWQ4f\/48dpzKxK+jC\/HY9grM\/K6u42MKQbiegrBS+OSCE7\/7ugqPbynE3lNnkZ6ejgsXLqCgoAAKhQJKpRI6nQ5GoxFWq5WrBOqTGAXqU9qvFoQw1NXVoaampk0YsrOzcTolFX\/5+iLGRBXjfw5rAnYfBe96Cutlbkz\/zoSxG4oxffd5nE5M7DAI7XcbcZVAfRGjQH1K4GpBeIuLwOMLGo0GVVVVUCgUkMlkyMrKwtmzZ\/HZoTTcF1WIp3ZWYXaiIWjXU\/hHjgsTd6vx0KZCfHEoGcnJyTh37hxycnJQUFAgvu2FVquF0WgUDy4L74XEVQL1NYwC9TnCq5uFFYPb7YbD4WjzfkdKpRKlpaWQy+W4cOEC0tPTEX\/6DJ7dlodfbCzGa\/H6Xr+ewuwkM+6PLsH\/fpOD46cScObMGWRmZiInp\/XN8crLy6FWq8VjCDabTXyxmrBCaG5uDvXmJmqDUaA+S3jbC+EdUgNf1FZXV4fq6mqUl5ejsLAQubm54qphxf50jF5fiMkx6l65nsI\/cpx4dm8NHoguwroDKeLq4Pz588jLyxPPMtJoNOLuIuH1CIFvpc3VAfVFjAL1ae3fNVU4AG21WsUD0MLupPz8fOTk5CAtLQ2HElLx1BYZxn2uwIxTddfsegrzz1jw4GYFnv\/qIo6eSkRKSgoyMzNx8eLFNruLAt8lVTigzDe\/o\/6AUaB+oaNVg81mg9FobPMCt8BVQ2pqKhbuzcLo9UWYcqCmR9dTWH3egZcOaDA2qhAr9qWKq4Ps7GxxdSC8ME2v18NisYinnHJ1QP0Jo0D9hhCG9u+RFHh2klKpbLNqSE9Px95TZ\/HbzXI8+mU55iQau3w9hfdSLXh4axkmfpGHAyeSxNVBbm4uCgoKUFZWdtnB5ParAwaB+gtGgfqdwFWDcHZS4Avd1Go1KioqUFhYiLy8PGRlZSHlTCqm78rCmPVF+N8juqu+nsJ\/H9ZjzPpCLNxzDomJiTh79qy4OiguLkZlZWWbF6QF7i7i6oD6I0aB+h3hugMdHYQWrtlcU1PT5ljD+fPnce7cOXwVfxa\/iZbjyR2VeC\/V3OlK4YOzFjy+rQyPb87HnvhkpKSkID09vcNTTYWDyYG7i3jsgPorRoH6rZaWFvEgdEerBq1WC5VKhbKyMhQUFCA3NxcZGRk4nZKKv319HvdHF2PaybrLXqfw8rFajF1fiBk7M3D60uogKytLXB1UVFSIq4P2B5OFt8DmqabUXzEK1G8JK4aOVg02mw319fWora0VXwldXFyMvLw8cdUQfSQND2wogHR3FRanWfDhWQv+\/etKPLQxH9uOpIirgwsXLrS5\/nLgK5PbH0zm6oD6O0aB+j0hDIGnrgauGoRTV5VKpbhquHjxIrKysnAq5RymbM\/F+C0luH9DEV7ZeQGnk8+0ed1BQUEBysvLoVKpoNPpeKophTVGgcJCYBgCVw0Oh0N8wZtw6qqwahDOUMrKysLqw+fxxYksZGRkIDs7G7m5uZDL5VAoFOLbXQvXQLDbv7+MpnAwmZfSpHDBKFBYaR+HwPdPslgs4qpBpVKhvLwcRUVFyM\/PR35+PmQyGWQyGQoKClBSUoLKykqo1WrxVFNhdeB2u9u8TYXwdxKFA0aBwk5nq4b2b5MhHIiurKxEWVkZysrKUFFRIcZAr9eLrzvo6IVoXB1QOGIUKCwJYWj\/Nhkulwt2u118cz2DwQCdTgetVguNRgOtVova2loYDIY2rzsIXB0Ixw4YBApHjAKFtR861mC1WmE2m1FfX4\/6+nqYzWZYLBZYrVY0NDTw2AFddxgFCnudrRqE4w1CIOx2OxoaGsSVQeDrDoRXJjMIFO4YBbpuBK4ahDgIgQgcn88nrgy4OqDrDaNA15XAF7wJKwdhhAg0NTWhubmZZxbRdemaR6H9g47D6asTGISOJtT3j\/P9BD6v8Pnl8u1yLV2TKAR+g4T3oRFG2Hfrdrs5HA7nqkZ4pbgwwu+Fa1sH\/nmo72uotovwHBt4EoQQipBFIXAJ7vP5oNfrsX\/\/fsTFxSEuLg579+7lcDicHk9MTAwOHDiAmD27ELNnF\/bG7vl+9l6a2Otg9n4\/+\/bGIG5fLJISEy677ndzc\/ffkLHbUejo4uoTJkzAyJEj8ec\/\/5nD4XCu6URGRmLkiHvx55ee5wSMRCJBSkpKm+t4CLs\/gxqF5ubWC50ILwiy2WyYOHEikpOTu\/sliYg6dddddyL5u8OAz8wJmMnSiThw4ID42hq32w2\/39\/tXUndioKwShBWCMK1cidMmMAoEFGvuPNORqGzKMTGxopv2NjQ0CBe6Kk7q4VuR8Hv98Pj8YjvJaPRaPDkk08yCkTUKxiFjmeSdCK2b98OtVqN2tpa8a1ZfD5f8KIgrBKcTicsFgu0Wi0qKirwu9\/9jlEgol7BKHQWhaexceNGFBcXo7q6GgaDAXa7HW63u1vXCO9WFJqamuD1emGz2WAwGKBWq1FQUIDHHnuMUSCiXsEodBKFPzyNTz\/9FLm5uSgvL4dWq4XZbIbL5YLf7w9OFIT3qbfZbNDr9SgvL0deXh4effRRRoGIegWj0PFI\/\/A0Vq5ciYyMDBQWFqK6uhomk6nbu5C6FQW\/3w+32y0eS1AoFMjOzsYjjzzCKBBRr2AUOo\/CkiVLkJqaCplMhqqqKtTW1sJutwc3Ci6XC\/X19aiurkZBQQHS0tIYBSLqNXfeeQej0EkUPvjgAyQmJiInJwcVFRXQ6\/Ww2+3wer3BiYLP54PT6YTJZIJKpYJcLkdqaioefvhhRoGIegWj0HkUFi5ciJMnT+L8+fMoLS2FTqeDzWYLfhSMRiOUSiVkMhmSk5Mxfvx4RoGIegWj0EkUnpmAefPmIT4+HllZWVAoFNBqtbBaraGLQl5eHpKSkhgFIuo1jELnUZg7dy6OHTuGzMxMlJSUQKPR9I0oPPTQQ4wCEfUKRqHzKMyZMwdHjx5FRkZG8KPQ0tICn88Hh8MBg8GAqqoq5ObmIjExkVEgol7DKHQehdmzZ+Po0aNIT09HcXExNBoNLBYLPB4PmpqaurSdGQUi6hcYBUaBiEjEKDAKREQiRoFRICISMQqMAhGRiFFgFIiIRIwCo0BEJGIUGAUiIhGjwChQkFmtVigUiiuOXq\/v9tfX6XSoqanptY+n8NYbUaiukEMhz7riOMzVIX\/iZxQoJDZv3gyJRHLF+dvf\/tbtr\/\/nP\/8ZUqm01z6ewltvROGpJ5\/4wZ\/5YwdjevR3KORZ+GLTOkaB+h+z2YyioiJxJk+ejH\/5l39pc5tWq+32109OTsapU6d67eMpvPVGFFRlMhTJMsQZEBGBqf\/3P21ua6hX9+jv+OqLKAyIiGAUqKrDQBkAACAASURBVP\/77\/\/+bwwfPvyy241GI+rq6gDgsl1KjY2NyMjIgFwuv+yNuKxWKywWCwDA6XRCqVQCAOrr65GcnIyqqqoefbxArVYjPz8fLS0t8Pv9aGho6Ma\/nvqaYBxTGBARgQVz377sdm+DHhcyEnEhIxGNLkOHn1tedAHfxR+ATlUk3mY1KLF65WJESCSoUuTCZdUwCtR\/dRaFV155BVOmTMFf\/vIXSCQSHDhwAACwYsUKDBkyBD\/+8Y9x880349Zbb8W6devEzwvcHXTgwAEMHjwY0dHRGDRoEG688UZIJBK888473f54h8OBF198ERKJBAMHDsRdd92Fd999F7fffntvbB4KslBFIfHkQdzxs59iUGQkBt94I358261IOH5A\/POsc9\/h17\/8BYYOGYIht9yCgQMGYM3q5YDPjI+XLcKAiAhIJBJEDhyIU8f2MwrUf10pCjfeeCOefvppnDhxAg6HAzU1NZBIJNiwYQN8Ph+ampowffp0DB48GH6\/H8DlT\/ISiQSPPfYYqqurYbFY8Morr0AikaC+vr5bHz9\/\/nzcdtttyMzMhMvlwpYtWzB48GBGIUyEIgo6VRFuvukmTJv6N+jVxfA76\/DBwtmIHDgQ1RVywGfGY48+gpemPIcmtxEeuw4b1n2CGwYNgtWgBHzcfcQohJEfioKwawcADAYDYmNj0djYKN62bds2SCQSmEwmAB0\/yefm5oofr1AoIJFIcPbs2S5\/fFNTEwYPHoxPPvmkzX2dNGkSoxAmQhGFDxbOxo8GD4bNqBJv8zlqcfNNN+Gfq5YCPjPGjB6J8b95EPX6CsBnRrPHhJzMJPGsJUaBUQgbV4rC73\/\/+8tu12g0WLx4MSZOnIjRo0eLu3iuFAWbzSZ+vsFggEQiQXx8fJc\/XqVStZ4pcuxYm\/v02WefMQphIhRReO7ZSbjt1qGYLH26zQwdMgQz33oN8JmxP3YHhg4ZgkGRkfj9E49h5dIPoSzNE78Go8AohI0rReHpp59uc1tJSQkGDhyIyZMn48svv0RaWhoOHz78g1Fwu93i17iaKHT28RUVFZBIJDh+\/Hib+7Vu3TpGIUyEIgrSZyZgzOiR2Ll982WTfuak+HFumxZxMdsxberf8LOf\/gS33ToUdpOKUWAUwktXojB37lzcc8898Hq94m3R0dFBi4Lf78fAgQMxd+7cNvfrpZdeYhTCRCii8O7MN3DjDTfAaakRb2tyG7Ho\/blISzkBj12H+XNmtlkZWA1K3Dp0CKLWrmIUGIXw0pUorFu3DjfffDMqKyvR1NSE5ORk3H333ZBIJNDpdAB6NwoA8Prrr+OOO+7Ajh07oNVq8emnn2LAgAGMQpgIRRQU8iwMiozEm9NeRk1lAZSleXhz2sv40eDBqFLkAr7WF8D95b9eEH+fknAEERIJ9u7eBvjMiIvZDolEgoLcNPiddYwC9V9diYLFYsETTzyBiIgI3HTTTfjFL36Bs2fPYtiwYbjlllsA9H4U7HY7pk6disGDByMyMhJPPPEEPvroI9xzzz3XbqNQyITqlNT9sTtw261DETlwIAZERGD0qBE4eTRO\/PPk7w7j9h\/fBolEgp\/+5HZIJBK8+vJf0eKtB3xmGDSluP++MZBIJDhxZB+jQNeXyspKqNVq8fc+nw8qlSqo96GxsREejwcAsGzZMvzHf\/xHUP9+6h2hfEM8t02L7LQEZKcldPh\/+w31amSnJSDx5EHxVNX2o1cXo9ljYhSIguXFF1\/Eiy++KD4ITCYTxowZgyVLloT4ntG1wHdJZRSIukShUGDIkCH4yU9+gt\/\/\/vcYOnQonnnmGXHVQP0bo8AoEHWZ3+9HWloavvnmG8jl8i4\/IKjvYhQYBSIiEaPAKBARiRgFRoGISMQoMApERCJGgVEgIhIxCowCEZGIUWAUiIhEjAKjQEQkYhQYBSIiEaPAKBARiRgFRoGISMQoMApERCJGgVEgIhIxCowCEZGIUWAUiIhEjAKjQEQkYhT6aBQAwOfzwel0wmg0QqlUIi8vD0lJSYwCEfUaRqHzKMyZMwdHjx5FRkYGSkpKoNFoYLVa4fV60dzc3KXtfE2iIJPJkJycjPHjxzMKRNQrGIXOozBv3jzEx8cjMzMTCoUCWq02dFFQqVSQy+U4c+YMxo0bh6+\/\/hpHjhzhcDicazo33ngjvt62EUcO7OYEzC233IwFCxbg5MmTyM7OhkKhgE6nC00UTCYTqqurIZfLce7cOSxZsgS\/+c1vMH78ePz617\/GAw88gPvuuw9jxozBqFGjMHLkSA6Hw\/nBGTVqFEaNGoXRo0djzJgxGDt2LIYNG4bhw4dj7NixGDt2rPi8MmpU6O9vcLbJSIwePQpjxozB\/fffj1\/+8pcYN24cHnvst9i2bRtOnz6NnJwclJeXQ6\/Xw2azBS8Kfr8fLpcLZrMZNTU1KC4uRlZWFo4dO4adO3di\/fr1WLFiBT788EPMmjULb731Fl599VVMnToVU6dOxSuvvMLhcDiXzdSpU\/Hyyy\/j1VdfxWuvvYY33ngDb731FqZPn46ZM2di5syZmDFjBqZPn4633noL06ZNEz9H+PxQ\/xt6a7tMnToVr7\/+OmbMmIG5c+di0aJFWL16NTZv3ox9+\/YhKSkJeXl5qKysRG1tLRoaGuDz+YIThcbGRng8HlgsFmi1WpSVleHChQs4ffo04uLisHXrVqxbtw4rVqzAokWLsGDBAsyZMwezZs3Cu+++y+FwOJ3OO++8g3fffRezZ8\/G7NmzMW\/ePMyfPx8LFizA\/PnzsXDhQsyfPx9z5szB7NmzQ35\/gzWzZs3C3Llz8d5772Hx4sVYvXo1oqOjsWPHDhw+fBhpaWkoLCyEWq2G0WiEw+EIfhRsNpt4WqqwCyk+Ph4xMTHYunUrNmzYgDVr1mDlypVYtmwZFi9ejI8++ojD4XCuOIsXL8bixYuxdOlSLF++vMNZunQpli1bJn58qO9zb8+SJUuwfPlyrFq1CmvWrMHGjRuxY8cO7N+\/HwkJCcjJyUFpaSlqampQX18Pp9MJv98fnCg0NzfD6\/XC4XDAZDJBo9GgrKwMOTk5SE1NRXx8PPbv349du3Zh27Zt2LJlC6KjoxEdHY0NGzZwOBxOpxMVFSWOcNumTZuwYcMGbNy4ERs3bsSmTZvE55OoqCisX78+5Pe7tyc6OhqbNm3CF198ga+++gq7d+\/GwYMHcerUKXGVoFQqUVdXB5vNBpfLhcbGRrS0tAQnCn6\/v81qobq6GgqFAjk5OTh37hySkpJw4sQJHDlyBAcPHsT+\/fsRFxeHffv2cTgcTqezd+\/eNhN4m\/Dr9rddDxMXF4f9+\/fj4MGDOHbsGE6ePImUlBRkZWVBLpejoqICWq0WZrNZPJ7Q1NQUnCi0tLSgqalJXC3YbDbU1dWhpqYGZWVlKCgoQG5uLrKzs5GWlobU1FSkpqYiJSUFycnJHA6Hc1WTlJSE5ORkJCYmIjExEUlJSTh9+rT4Z8LtKSkpYf\/8kpKSgtTUVJw7dw6ZmZnIzs6GTCZDYWEhKisrodPpYDKZYLfb4XK5urXrqNtRAIDm5mb4fD54PB40NDSIYdBoNFAqlSgrK4NCoUBhYSHkcjny8\/ORn58PmUzG4XA4HU7g80Rubi5yc3Nx8eJF8fc5OTnIy8sT\/ywvL0+ccH5+EbaLXC6HXC5HUVERSktLUVlZierqauj1epjNZjEIwiohqFEIXC14vV44nU7YbDaYzWbU1dVBr9ejpqYG1dXVUKvVUKvVUKlUHA6Hc8UJfK4oLy9HZWUlqqqqxKmoqEBlZSUqKiqgVCqhVCpDfp+DtV3UajWqq6tRXV0NjUaD2tpaGI1GWCwW2O12uN1ueL1eMQhd3XXUoygArauF5kvHF7xeb5tVg81mg8VigdlshslkgtFo5HA4nKsa4TnDZDLBYDDAYDCgtrYWdXV1qKurg8FggMlkui6fW+rr62E2m2GxWGCz2WC32+FwOODxeNqsELoThB5HAWhdMTQ3N6OpqUmMgxAIt9sNl8sFp9PJ4XA43R6XywWHw4GGhgY4HI7r\/nnF5XKJqwKv1wufz4fGxkbxf9S7G4RrEoX2cRCmqakJjY2NaGxshN\/vh8\/ng8\/ng9\/v53A4nA5HeJ4QnisaGxvbPJd09PvAzwv1\/Q\/mdhG2RWAIehIDwTWLwtUS7jiHw+G0Hz6\/9M526YpeiUL7f1Dg6oHD4bRO4Mq6oyeB6\/VxxO3Sve1yrVyTKAjfmKamJnGpI+zrEo4vcDicjqf9cbiO\/ns9DrfLlbdLbxxP6HEUAmPg8\/mg1+sRFxcnvtIwNjYWMTEx2LNnD4fDucrZu3cvdu\/ejd27d2PPnj18DO3Zg927d2Pv3r3ir6\/n7RITE4OYmBjxefb06dNiIALjEPQoBAbB6\/XC7XZjwoQJGD58OKZMmYIXXnjhsnn++ec5HM6l6exxERERgbvv\/hc8\/6fnvp\/nW+eF5\/8k\/jqcp82\/80\/P4U9\/+uOl7XJ3p9sy1N\/PYP7MCDNlyhRIJBKkpKTA6XSKKwdhd1NQoxAYBJfLBZvNhokTJyI5mZfjJOqJu+66k5ed7GDuuvMOPr90YPLkyThw4ACsVisaGhrgdrvFt8zuzq6kbr\/3UfOld0p1u92w2WwwmUyYMGECv2lEPXTnnYxCR3Mno9ChyZMnIyYmBnV1deKb4Xk8Hvj9QXzvo5aWFvGaCna7HfX19dBqtXjyySf5TSPqIUaBUeiKSZMmYfv27VCpVKirq4PVau32BXaAa3A9BeHqaxUVFfjd737HbxpRDzEKjEJXTJo0CZs2bUJJSQnUajUMBoP4PkhBvZ6C1+sVr6WgUqlQWFiIxx9\/nN80oh5iFDqJwh2MQkcmTZqENWvWIDc3F+Xl5eI1FYS3zw5KFAIvx6nX61FWVobc3Fz89re\/5TeNqIcYBUahK6RSKVauXInMzEwUFRWhuroaRqNRvNBOV3chdSsKfr8fbrcbFosFGo0GCoUC58+fxyOPPMJvGlEPMQqMQldIpVIsWbIEqampkMlkEC7JabfbgxsFl8uF+vp6VFdXo6CgAOnp6YwC0TVw5513MAqMwlWTSqX44IMPkJSUhJycHFRUVECv18Nut8Pr9QYnCj6fD06nEyaTCSqVCnK5HGfPnsXDDz\/MbxpRDzEKjEJXSKVSLFy4ECdPnsT58+dRWloKnU4Hm80W\/CgYjUYolUrIZDKkpKRg\/Pjx\/KYR9RCj0FkUfsbnlw5IpVLMmzcP8fHxyMrKgkKhgFarhdVqDV0U8vLykJSUxCgQXQOMAqPQFVKpFHPnzsWxY8eQmZmJkpISaDSavhGFhx56iN80oh5iFBiFrpBKpZgzZw6OHj2KjIyM4EehpaUFPp8PDocDBoMBVVVVyM3NRWJiIqNAdA0wCoxCV0ilUsyePRtHjx5Feno6iouLodFoYLFY4PF40NTU1KWvxygQ9TGMAqPQFYwCUZhjFBiFrmAUiMIco8AodAWjQBTmGAVGoSsYBaIwxygwCl3BKBCFOUaBUegKRoEozDEKjEJXMApEYY5RYBS6glEgCnOMAqPQFYwCUZjrjShUV8ihkGddcRzm6pA\/8TMKXccoEIW53ojCU08+AYlEcsU5djCmR3+HQp6FLzatYxSCjFEgCnO9EQVVmQxFsgxxBkREYOr\/\/U+b2xrq1T36O776IgoDIiIYhSBjFIjCXDCOKQyIiMCCuW9fdru3QY8LGYm4kJGIRpehw88tL7qA7+IPQKcqEm+zGpRYvXIxIiQSVCly4bJqGIUgYRSIwlyoopB48iDu+NlPMSgyEoNvvBE\/vu1WJBw\/IP551rnv8Otf\/gJDhwzBkFtuwcABA7Bm9XLAZ8bHyxZhQEQEJBIJIgcOxKlj+xmFIGEUiMJcKKKgUxXh5ptuwrSpf4NeXQy\/sw4fLJyNyIEDUV0hB3xmPPboI3hpynNochvhseuwYd0nuGHQIFgNSsDH3UehwigQhblQROGDhbPxo8GDYTOqxNt8jlrcfNNN+OeqpYDPjDGjR2L8bx5Evb4C8JnR7DEhJzNJPGuJUQgNRoEozIUiCs89Owm33ToUk6VPt5mhQ4Zg5luvAT4z9sfuwNAhQzAoMhK\/f+IxrFz6IZSleeLXYBRCg1EgCnOhiIL0mQkYM3okdm7ffNmknzkpfpzbpkVczHZMm\/o3\/OynP8Fttw6F3aRiFEKIUSAKc6GIwrsz38CNN9wAp6VGvK3JbcSi9+ciLeUEPHYd5s+Z2WZlYDUocevQIYhau4pRCCFGgSjMhSIKCnkWBkVG4s1pL6OmsgDK0jy8Oe1l\/GjwYFQpcgFf6wvg\/vJfL4i\/T0k4ggiJBHt3bwN8ZsTFbIdEIkFBbhr8zjpGIUgYBaIwF6pTUvfH7sBttw5F5MCBGBARgdGjRuDk0Tjxz5O\/O4zbf3wbJBIJfvqT2yGRSPDqy39Fi7ce8Jlh0JTi\/vvGQCKR4MSRfYxCkDAKRGEulG+I57ZpkZ2WgOy0hA7\/b7+hXo3stAQknjwonqrafvTqYjR7TIxCkDAKRGGO75LKKHQFo0AU5hgFRqErGAWiMMcoMApdwSgQhTlGgVHoCkaBKMwxCoxCVzAKRGGOUWAUuoJRIApzjAKj0BWMAlGYYxQYha5gFIjCHKPAKHQFo0AU5hgFRqErGAWiMMcoMApdwSgQhTlGgVHoCkaBKMwxCoxCVzAKRGGOUWAUuoJRIApzjAKj0BWMAlGYYxQYha5gFIjCHKPAKHQFo0AU5hgFRqEr+lwUlEol8vLyGAWia4RRYBS6IuRRAACfzwen0wmj0ShGISkpCePHj+c3jaiHGAVGoSukUinmzJmDo0ePIiMjAyUlJdBoNLBarfB6vWhubu7S17tmUUhOTmYUiK4BRoFR6AqpVIp58+bh2LFjyM7OhkKhCG0UVCoV5HI5zpw5g3HjxmH79u04dOhQmzl48CCHw\/mBER4vN954A7Z\/GY1DB3aJc3D\/9TvCNrjxxhsue34J9fcslD8nwtxyyy1YsGABTpw4IUZBq9UGPwoulwsmkwnV1dWQy+U4d+4clixZggcffBAPPvggfvGLX2Ds2LEYOXIkhg8fjmHDhuGee+7Bz3\/+cw7nuh\/hsXDPPfdg2LBhGD58OIYPH44RI0bg7rvvxs9\/\/nOMHDkSI0aMEB8\/w4YNa\/O54TzCdrn33nvbbJe77777ut0uwr91xIgRGD16NO677z788pe\/xCOPPIJt27YhISEBOTk5qKiogF6vh91uD14U\/H4\/XC4XzGYzampqUFJSgqysLMTHx2Pnzp2IiorC8uXL8cEHH2DWrFl466238Oqrr2Lq1Kl45ZVXOBzOK6\/g5ZdfxquvvopXX30Vb7zxBqZPn44ZM2ZgxowZePvttzFjxgxMnz4db775JqZNm4apU6fi5ZdfDvn9DsZ2mTp1KqZOnYrXX38db775JqZPn47p06dj5syZ4nZ56623rqvtImyP6dOnY+7cuVi0aBFWr16NzZs3Y9++fUhOToZMJkNVVRVqa2vR0NAAn88XnCg0NjbC4\/HAYrFAp9OhvLwcOTk5OH36NPbt24etW7di3bp1WLFiBf7+979jwYIFmDNnDmbNmoV3332Xw+FcmlmzZmHWrFmYO3cu5s2bhwULFmDBggWYP38+Fi5cKD525syZE\/L7GoptM3v2bHHbCHO9bhdhW7z33nv46KOPsGrVKmzYsAE7duzA4cOHkZaWhsLCQqhUKhiNxuBGoampCV6vFzabTTwtVdiFdPToUcTGxmLr1q3YsGED\/vGPf+Djjz\/GsmXLsGTJEnz00UccDuejj7B48WLxv8uWLRNnxYoVWL58ufhf4bGzePFicUJ933t7u\/z973\/H4sWLsXTp0jbbZtmyZVi5ciVWrFhx3W0XYVusWrUKa9euxaZNm7Bjxw7ExcXhu+++Q05ODkpLS6HRaFBfXw+XywW\/3x+cKDQ3N8Pr9cLpdMJkMkGj0aC0tBQ5OTk4c+YMjh07hri4OOzcuRPbtm3Dli1bsHHjRmzYsIHD4VyaqKgobNiwARs3bkR0dDSio6Pb\/Fr4M+HjoqKixAn1fe\/NWb9+PTZs2NBmOwjT2XYJ\/G84z+eff46tW7dix44d2LNnD7799lucOnUK6enpKCgogFKpRG1tLaxWK1wuF5qamtDS0hKcKPh8PrjdbthsNhiNRlRXV0OhUODixYs4d+4ckpKScOLECRw9ehSHDh1CXFwc4uLisG\/fPg6Hs28f9u7dK\/63s18H3hYXFyfeFs4j\/HsDJzY2FrGxsR1uq+tlu8TFxWH\/\/v04dOgQjh07hlOnTiElJQWZmZmQy+WorKyETqeD2WxGQ0MDvF5v8KLQ0tIi7kJyOp2wWq2oq6tDdXU1ysrKUFBQgIsXLyI7OxtpaWlITU0VJzk5mcPhJCfjzJkzSE5ORlJSEk6fPo2kpCQkJSUhMTGxze+F2xITE5GSkhL2jyNhuwj\/5qSkJCQnJ+P06dNISEi4bLskJSVdF9tFeA49e\/YsMjIycP78eeTn56OoqAgVFRXQ6XSor6+H3W7v9q6jbkcBAJqbm+H3++HxeOBwOMQwaDQaqFQqlJWVQaFQoLCwEAUFBZDL5cjPz4dMJuNwrvvJz88XHw+5ubni5OXl4eLFi8jJyYFMJkNeXp54e+Dnhvr+B2u7XLx4Udw2OTk51\/12kcvlKCgoQGFhIUpLS1FRUQG1Wg29Xg+z2SwGwefzoampKbhREFYLPp9PDIPdbofZbEZdXR10Oh1qampQXV0NtVoNtVoNpVLJ4XAujVqthkqlQlVVFZRKJSoqKlBZWYmqqipUVVWJv6+oqBA\/RqVShfx+B3O7BG4HYdsEbhfhc66X7SJMTU0NtFotamtrYTAYYLFY0NDQALfbLe42am5u7vKuox5FAWhdLTQ1NcHv94vHGBoaGmC322Gz2WCxWGAymWAymWA0GjkczlVMXV2d+GA3Go0wmUzir6+naf9vrq2tFbeL8LxyPW4Xk8kEs9kMq9UKm80Gu90Op9MJj8cDv9\/foyD0OApCGNrHwev1wuPxwOVyieN0OjkcTrsRHh8OhwMOh6PTXwsfG+r7y+3SN7aLMF6vF16vV9xd1NMgXJMoAEBLSwtaWlraBEKYxsZGNDY2wu\/3czicdiM8Pto\/VgL\/ez0+joR\/b+Bwu7TdLoHPs8Jzb09iILgmUbgSIRgcDufKw8cRt8u12i490etRICKi\/oNRICIiEaNAREQiRoGIiESMAhERiRgFIiISXdMoCKdKCefMNjc3d3i+Mef6ncBzqoVfB94W6vsXyuF24VztBP5sCK9PuFanqV6zF68F\/uAK74fk8Xjgdrs5nDYj\/Gy4XC7xZ8TlcoX8foV6uF04XRnhlcw+n69NKHoahx5FITAGPp8Per1efJ\/z2NhYxMTEYM+ePeLs3r2bc51O4Pd\/165d2LVrF2JjY7Fz507s2rXrso+9Xn5euF04XZnA59OYmBjs3bsXCQkJ4lteBMYhJFEQ3j7b6\/XC5XJhwoQJGDFiBF566SW8+OKLHM5lM2XKFHEGDBiAYcPuwZQX\/oQpL\/wJL065fkf490954U+XtsswcTuF+nvG6bvz0ksvQSKRIDk5GU6nE263u0dvm92jKAReT8HpdMJms2HixIlITk7u7pek68ydd96J5O8OAz4zJ2DuvPMOPo7oqk2ePBnffvuteMW1kF1PQbjymsvlgs1mg8FgwIQJE\/jDTFeNUWAUqOcmT56MPXv2oLa2VgyDx+NBY2Nj8KIQuEqw2WwwmUzQaDR48skn+cNMV41RYBSo5yZNmoTt27dDqVRCr9fDYrHA4XCIF9vpqm5HQbg+s8VigVarRXl5OX73u9\/xh5muGqPAKFDPTZo0CZs2bUJxcTHUajUMBgNsNhvcbjcaGxu7fDZSt6Ig7DoSdhtVV1ejsLAQjz\/+OH+Y6aoxCp1E4Q5Gga7epEmTsHbtWuTk5KCsrAwajQZmsxkulwt+v7\/Lu5C6FYXGxkZx15FOp0N5eTlyc3Px6KOP8oeZrhqjwChQz0mlUqxatQrp6ekoLCyEWq2G0WiEw+EIXhT8fj\/cbjcsFgs0Gg0UCgWys7PxyCOP8IeZrhqjwChQz0mlUixduhRnzpyBTCaDUqlEXV0dGhoa4PP5ghcFl8uF+vp6cddReno6\/vVf\/5U\/zHTV7rzzDkaBUaAekkqlWLRoERITE5GTk4OKigro9XrYbDZ4vd7gRMHn88HpdMJkMkGtVkMulyM1NRUPP\/wwf5jpqjEKjAL1nFQqxfvvv4+TJ0\/i\/PnzUCgU0Ol0oYmC0WiEUqlEfn4+UlJSMH78eP4w01VjFDqLws\/4OKKrJpVKsWDBAsTHxyMrKwsKhQIajQYWiyV0UZDJZEhKSsJDDz3EH2a6aowCo0A9J5VKMW\/ePBw9ehQZGRkoKSkJbhRaWlrg8\/ngcDhgMBigVCqRl5fHKFCXMQqMAvVcYBTS09Mvi0JXX8DW4yhUVVUhLy8PiYmJjAJ1CaPAKFDPSaVSzJ07V4xCcXGxGAWPx8MoUP\/BKDAK1HOMAoUNRoFRoJ5jFChsMAqMAvUco0Bhg1FgFKjnGAUKG4wCo0A9xyhQ2GAUGAXqOUaBwgajwChQzzEKFDYYBUaBeo5RoLDRG1GorpBDIc+64jjM1SF\/4mcU6FphFChs9EYUnnryCUgkkivOsYMxPfo7FPIsfLFpHaNAfQKjQGGjN6KgKpOhSJYhzoCICEz9v\/9pc1tDvbpHf8dXX0RhQEQEo0B9AqNAYSMYxxQGRERgwdy3L7vd26DHhYxEXMhIRKPL0OHnlhddwHfxB6BTFYm3WQ1KrF65GBESCaoUuXBZNYwChRSjQGEjVFFIPHkQd\/zspxgUGYnBN96IH992KxKOHxD\/POvcd\/j1L3+BoUOGYMgtt2DggAFYs3o54DPj42WLMCAiAhKJBJEDB+LUhcpOvgAAIABJREFUsf2MAoUUo0BhIxRR0KmKcPNNN2Ha1L9Bry6G31mHDxbORuTAgaiukAM+Mx579BG8NOU5NLmN8Nh12LDuE9wwaBCsBiXg4+4j6lsYBQoboYjCBwtn40eDB8NmVIm3+Ry1uPmmm\/DPVUsBnxljRo\/E+N88iHp9BeAzo9ljQk5mknjWEqNAfQmjQGEjFFF47tlJuO3WoZgsfbrNDB0yBDPfeg3wmbE\/dgeGDhmCQZGR+P0Tj2Hl0g+hLM0TvwajQH0Jo0BhIxRRkD4zAWNGj8TO7Zsvm\/QzJ8WPc9u0iIvZjmlT\/4af\/fQnuO3WobCbVIwC9TmMAoWNUETh3Zlv4MYbboDTUiPe1uQ2YtH7c5GWcgIeuw7z58xsszKwGpS4degQRK1dxShQn8MoUNgIRRQU8iwMiozEm9NeRk1lAZSleXhz2sv40eDBqFLkAr7WF8D95b9eEH+fknAEERIJ9u7eBvjMiIvZDolEgoLcNPiddYwChRSjQGEjVKek7o\/dgdtuHYrIgQMxICICo0eNwMmjceKfJ393GLf\/+DZIJBL89Ce3QyKR4NWX\/4oWbz3gM8OgKcX9942BRCLBiSP7GAUKKUaBwkYo3xDPbdMiOy0B2WkJHf7ffkO9GtlpCUg8eVA8VbX96NXFaPaYGAUKKUaBwgbfJZVRoJ5jFChsMAqMAvUco0Bhg1FgFKjnGAUKG4wCo0A9xyhQ2GAUGAXqOUaBwgajwChQzzEKFDYYBUaBeo5RoLDBKDAK1HOMAoUNRoFRoJ5jFChsMAqMAvUco0Bhg1FgFKjnGAUKG4wCo0A9xyhQ2GAUGAXqOUaBwgajwChQzzEKFDYYBUaBeo5RoLDBKDAK1HOMAoUNRoFRoJ5jFChsMAqMAvUco0Bhg1FgFKjnQh4FAPD5fHA6nTAajaiqqoJMJkNSUhKjQF3CKDAK1HOBUcjIyEBJSYkYBa\/Xi+bm5i59vR5HQalUMgrULYwCo0A9J5VKMW\/ePBw7dqzvRCE\/Px\/JyckYP348f5jpqjEKjAL1nFQqxYIFCxAfH4\/MzEwoFApotVpYrdbgR8FkMkGtVkMul+Ps2bMYN24c1qxZgy1btmDjxo2IiorCZ599hnXr1mHt2rUcDtatW4fPPvsMn332GQYNGoSPFi3EZ2s\/wWdrVmHdp62z9p8rr6\/59GOs+3QVPluzCp+t\/aR1u3z0EdavXy8+fvgY4qxd+\/3jJyoqCtHR0di8eTNuuukmvP\/++zh+\/DiysrKgUCig0+lgs9mCFwW\/3w+n04n6+npUV1ejoKAA6enpWLp0KR588EGMGzcODzzwAMaOHYtRo0Zh+PDhuPfee3HPPfdwrsMZNmwYhg0bhnvvvRfDhw\/HiBEjMHLkSNx99934+c9\/jpEjR2LEiBHiz4nw8aG+38HeLsOHD+d24Vzx50V4\/IwePRr3338\/fvWrX+Hf\/u3fsH37diQkJCAnJwfl5eXQ6\/Ww2+3BjYLb7YbZbIZGo0FJSQmys7Nx\/Phx7Nq1C9HR0Vi5ciUWLVqEOXPmYPr06Xj99dfx2muv4dVXX+VcZzN16lRMmzYNb7zxBt58803MmDEDb7\/9Nt555502\/505cybeeOON6+bn5P+3d+ZBUR54\/m6UxEwmmsxMjt9fu2YmMZnZyeHEaDLOZJLNVmvV1tTu1mRma7dmMx6JMcQogqCxoiJoMiaxTAKI8YonCIjDZdRwyh0QmuZqQKAvuqGhu+mm7wM+vz+y\/Q4gZqPYDU1\/nqqn6BPf9+vb\/fC+0N2+uaxduxbr1q3D+vXrhTls2LABGzZsQERERMjNhU7umjVr8NZbb2HDhg2Ijo7Gzp078dFHH+GLL75AZmYmiouLIZFI0NPTg76+PpjNZrhcrsBEwePxwOFwwGQyQaPRoLOzE9euXUNhYSEyMjJw9OhRfPrpp9izZw927NiBmJgYREVFITIykoagGzduxObNm7F582ZER0cjJiYGW7duRWxsLLZu3SoYHR2NqKgobNq0SXC6lz0Qc4mMjERUVBS2bNmC2NhYxMTEIDY2Ftu2bQvJudCbGxMTg\/feew+7d+\/Gvn37kJycjFOnTiE\/Px8VFRVobm6GXC7HwMAALBZL4KLg9XrhdDphNpuh0+kgl8vR1NSEyspKXLx4EefOncPRo0eRmJiI\/fv344MPPkBCQgLi4+MRFxdHQ9Ddu3cjLi4O8fHx2LNnD\/bu3Yu9e\/diz549wvmEhAQkJCTccJ\/ZrG8dd+\/ejYSEBGEevpns2bMH8fHxITcXeqPx8fHYu3cv9u3bhwMHDiAlJQWnTp3ChQsXUFhYiLq6OnR0dECtVsNgMMBms8HtdmN0dNT\/URgZGYHT6YTVahUOIXV2dkIikeDq1au4dOkSzp8\/jzNnzuDEiRM4cuQIUlJScPDgQRqCJicnIzk5WdgGkpOTcejQIaSkpNxweUpKCpKSkoT7TPey+3suSUlJwhwmm1EozoVObkpKCg4fPozjx4\/j1KlTSE9PR25uLgoKClBdXY2Wlhb09PSgv78fZrMZNpsNXq83MFEYHR2Fx+OB3W6H2WzG4OAgVCoVOjo6IJFIUF1djdLSUly5cgUXL15Ebm4usrOzceHCBWRlZdEQ9fz58zh\/\/jwuXLggnPY59ja+06GyvWRmZgrrnZmZiczMTGRkZNwwt1CbCx3vhQsXkJ2djby8PFy6dAlFRUUoLy9HbW0tWltb0dPTA61WC6PRKBw6utVXM08pCr5DSDabDSaTCQMDA1CpVOjq6kJrayskEgnq6upQXV2NyspKlJeXo7y8HGVlZTQEvXr1qmBpaSlKSkpQUlKC0tJSFBcXC9eVlJQIp0Nhexk7E98sxs7GZ6jNhd5oeXk5KioqUF1djW+++Qb19fWQSqXo6OiAXC6HRqOBwWDA8PAw7HY7PB7PLf8+4bajAHx7CMnj8QiHkUwmEwYHB6HVaqFUKtHd3Y329na0t7ejtbUVLS0taGlpQXNzMw0xx\/6\/NzU1oampCVKpFI2NjWhsbIRUKoVUKkVDQ4Nw\/cT7zUYnzsU3B4lEIpz2nffdJhTmQm++vbS2tkImk6G9vR1dXV2Qy+VQqVTo7+8XgmC1WoW9hFs9dDSlKIyOjmJkZETYY\/AdSvLFQafTQavVQqvVQqPRoLe3FyqVioagvb29UKvVgkqlEkqlEnK5HEqlEgqFAiqVCgqFQrhNKGwvnAu91e2lt7cXGo0GWq0W\/f39GBwchF6vh8lkgtVqhdPpFIJwO3sJU4rCxDC43W7hcJLFYsHw8LAQCaPRSCkMBgOMRiOGhoZgMBig1+thMBjGXT7dyzhT5mI0GoWvoToXenNNJhOGh4eFPQOHwwGn0ykcMrrdIEw5CpPFwePxwO12w+Vywel0wuFwUAqH49uN1udk50PVm80h1OdCJ9e3rbhcLrhcLrjdbmHPYGRk5LYOGd3xKExkdHRU0LegvmjQ0HTsBjvWUN9eOBd6p7aXO4VfokAIISQ4YRQIIYQIMAqEEEIEGAVCCCECjAIhhBABRoEQQogAo0AIIUTgjkZh4t9Tezyecbrd7lnv2PX1\/V2x1+sdd55z4VwovR3HPobGvm7hTrxozceUozA2BG7331\/JPPbVmHa7HXa7HTabbdbrW9exWiwWWCwW4fqJt5vuZZ4pc5nodC8zpTNN32Nj7CubnU4n3O4796rmO\/LeR753S+3t7UV6ejrS0tJw9uxZnD17FqdPn8bp06dx6tSpkPTEiRPCHHyXhfI8xs4lNTV13GWcC6X\/t6dPn8aZM2eE59ivv\/5aiMTYONxuGKb8Lqm+PQObzYaXX34ZCxcuxB\/\/+Meb+tprr81ab7Z+4eFzsfAf\/wGv\/eHfbvCP\/+tk180Wb7Z+4eHhWLhw4U1nOdu3F0pvxZs9p4pEIhQXF8NiscDhcMDlct32ZylMKQq+w0VOpxMWiwUmkwmvvvoqioqKbvdbzloeeeQRFF3+G+Ay0DE+8sjD3F4ImSIrV65EZmYmDAYDzGYz7HZ74D9PYewnr\/k+YEen0+Hll1\/mg3wSGAVGgRB\/sXLlSpw5c0b45DWz2QyHwwG32x24T17z\/R7BbrcLQVCpVHjppZf4IJ8ERoFRIMRfrFixAkePHhU+o9lgMIz7jOZb3Vu47Sj4DhsZjUaoVCp0dnZi+fLlfJBPAqPAKBDiL1asWIHExES0tLSgp6cH\/f39MJvNsNls8Hg8gYmC79CR2WyGTqeDXC6HVCrFCy+8wAf5JDAKN4nCw4wCIVNlxYoV+Pjjj1FXV4f29nao1WoYDAZYrdbbOoR021FwOBwwmUzQaDTo7OzEtWvXsHTpUj7IJ4FRYBQI8RdisRh79uxBRUUFmpuboVQqMTAwIBxCCkgUfL9PMBgMUKvVaGtrQ3V1NZYsWcIH+SQwCowCIf5CLBZj586dKCoqQkNDA7q6utDf34\/h4eHARcHtdsNms0Gv10OpVKKpqQllZWV47rnn+CCfhEceeZhRYBQI8QtisRjbt2\/HlStXUFdXh87OTmi1WpjNZjidzsBEweVywWq1YnBwEEqlEo2NjSgtLcXixYv5IJ8ERoFRIMRfiMVixMbGIj8\/HzU1NZDJZNBoNBgaGgp8FAYGBiCXyyGRSFBUVMQo3ARG4WZReIjbCyFTRCwWY8uWLcjLy0NVVRVkMhl6e3thNBqnLwoNDQ0oLCzEs88+ywf5JDAKjAIh\/kIsFiMqKgo5OTmorKxEW1sb1Gp14KIwOjoKl8sFi8UCnU6Hnp4e1NfXo6CggFG4CYwCo0CIv\/iuKDgcDni93lv6foxCAGAUGAVC\/IVYLMbmzZuRk5ODiooKtLa2QqVSMQozGUaBUSDEXzAKQQijwCgQ4i8YhSCEUWAUCPEXjEIQwigwCoT4C0YhCGEUGAVC\/AWjEIQwCowCIf6CUQhCGAVGgRB\/wSgEIYwCo0CIv2AUghB\/REF5XQqZtPo7tRiU0\/7EzygQ4l8YhSDEH1F4+aXlEIlE32lu1tkp\/RsyaTUOJe1nFAiZwTAKQYg\/oiDvkKBFUik4JywMq\/7nv8ZdNqxXTOnfOHroU8wJC2MUCJnBMApBSCB+pzAnLAxbNr9zw+XOYS1qKwtQW1kAj0036X07W2pxOS8TGnmLcNmQrgcfJuxAmEiEblk9bENqRoGQGQijEIRMVxQKvsrCww89iLvCw3HPvHn40QP340p+pnB9ddll\/PIXT2LB\/PmYf999mDtnDj7+cDfgMmBP3HbMCQuDSCRC+Ny5uJSbwSgQMgNhFIKQ6YiCRt6CH957L9au+jO0ila4rf3YFrMJ4XPnQnldCrgMeGHpEvzhP34Pr30ADrMGn+3\/AHffdReGdD2Ai4ePCAkGGIUgZDqisC1mE35wzz0wDciFy1yWPvzw3nuxb+8uwGXAYz97FIufeQp67XXAZcCIYxB1VYXCXy0xCoTMfBiFIGQ6ovD7f12BB+5fgJXifx7ngvnzEfHWGsBlQEbqcSyYPx93hYfjt8tfQMKu99DT3iB8D0aBkJkPoxCETEcUxP\/yCh772aM4eSz5BitKvhJuZzf1Iv3sMaxd9Wc89OBP8MD9C2AelDMKhAQJjEIQMh1ReDfiTcy7+25YjSrhMq99ANu3bkZ58UU4zBpER0aM2zMY0vXg\/gXz8eknexkFQoIERiEImY4oyKTVuCs8HOvWvg5VVxN62huwbu3r+ME996BbVg+4vn0B3H++9u\/C+eIr2QgTiZB2+gjgMiD97DGIRCI01ZfDbe1nFAiZgTAKQch0\/UlqRupxPHD\/AoTPnYs5YWH42U8X4qucdOH6ost\/w49\/9ABEIhEe\/MmPIRKJsPr1\/8aoUw+4DNCp2\/HEoscgEolwMfsco0DIDIRRCEKm8w3x7KZe1JRfQU35lUl\/2h\/WK1BTfgUFX2UJf6o6Ua2iFSOOQUaBkBkIoxCE8F1SGQVC\/AWjEIQwCowCIf6CUQhCGAVGgRB\/wSgEIYwCo0CIv2AUghBGgVEgxF8wCkEIo8AoEOIvGIUghFFgFAjxF4xCEMIoMAqE+AtGIQhhFBgFQvwFoxCEMAqMAiH+glEIQhgFRoEQf8EoBCGMAqNAiL9gFIIQRoFRIMRfMApBCKPAKBDiLxiFIIRRYBQI8ReMQhDCKDAKhPgLRiEIYRQYBUL8BaMQhDAKjAIh\/mLGRMFqtQpRaGhoQGFhIaNwExgFRoEQfyEWixEVFYWcnBxUVlaira0NarUaRqMRTqfT\/1EAIERhYGAAcrmcUfg\/YBQYBUL8hS8Kubm5k0ZhZGTklr7fHYmCRCJBUVERFi9ezAf5JDAKjAIh\/kIsFiM6Ohp5eXmoqqqCTCZDb2\/v9ERhcHAQCoUCjY2NKCkpwdNPP40vv\/wS2dnZdIzz5s3Dl0cSkZ15mo5x3rx53F4onaL33XcfYmJikJ+fj5qaGshkMmg0GgwNDQUuCm63GzabDXq9HkqlEs3NzSgrK0NcXBxefPFF\/O53v8NvfvMb\/PrXv8ayZcuwdOlSPP\/88yHl0qVLsWzZMixbtgxPP\/00nnnmKSxb9jyWLX0ey5YuwdLnn8Pzzz+H55f8KjT83\/Vd+vwSLFu6BMuWPo+nn\/olnnnmGWFOobqtUPp99T2vvPjii1i+fDl++9vfQiwW49ixY7h8+TLq6urQ2dkJrVYLk8kUuCh4PB7Y7XYYDAao1Wq0tbWhqqoK+fn5OHnyJD777DMkJCTgvffeQ2RkJNavX4833ngDa9aswerVq2etq1atwpo1a7B27Vq89dZbWL9+PSIiIhAREYF33nkHGzZsQEREBNavX48333xz1s\/j+8xlw4YN4+aybt06rFmzJmRmQ+n3de3atVi3bh02bNiA6Oho7Ny5Ex999BG++OILZGZmoqSkBBKJBN3d3ejv74fZbIbL5QpMFLxeLxwOB4aGhqDVatHZ2Ylr166hoKAA6enpOHLkCA4cOICEhATs2LEDMTExiIqKQmRkJCIjI7Fp06ZZZ2RkJDZu3CisY1RUFLZs2YKYmBjExsYiJiYGW7duRWxsLKKjoxEVFXXD\/ad7HQI1l+joaGEusbGx2LZtG7Zu3SrMZewsZutcKL0VfY+fmJgYvPfee4iLi8O+ffuQlJSEU6dOIS8vDxUVFWhuboZcLsfAwAAsFkvgojAyMgKn0wmTyQSdTge5XA6pVIry8nLk5+cjLS0NR44cweeff45PPvkEH3zwAeLj47F7927ExcXNWnft2iWs4+7du5GQkDDOvXv3IiEhAfHx8YiPjxfus2vXrmlf9umYy549e8bNxTebUJkLpbdifHw89u7di3379uHAgQNISUnByZMnkZWVhcLCQly7dg3t7e3o7e2FwWCA1WqF2+0ObBQsFotwCKmzsxP19fUoLS3FpUuXkJWVhTNnzuDEiRM4fPgwUlJScPDgwVltcnIyEhMTkZycjKSkJCQlJSElJQXJyclITk7GoUOHhPMpKSlISkoSrpvuZQ\/kXCau76FDh4TTvrn47jfdy07pTDElJQVffPEFjh07hpMnT+LcuXPIyclBQUEBampq0NLSArlcLhw6stvt8Hq9GB0dDUwUfL9XMJlMGBwchFKpREdHByQSCaqqqlBaWorLly8jPz8fOTk5yM7OxoULF2a158+fR1ZWFjIzM8edzszMREZGxg3X+85P93JP51wmXpaVlSXMZrqXm9KZZnZ2NvLy8nDp0iUUFhaivLwctbW1aGlpQU9PD7RarbCX4HK5bvmFa7cdhdHRUWFvwWazCYeRVCoVurq60NLSgsbGRtTV1aGqqgoVFRUoLy9HWVkZrl69OustLS0VvhYXF6O4uBglJSXjLh97nnMJ7blQ+n0sKytDRUUFqqqqUFtbi\/r6ekilUshkMsjlciEIw8PDsNvt8Hg8t3zo6LajAPx9b8F3GMm3x6DRaKBQKNDd3Y2Ojg60tbWhpaUFzc3NIWFTUxOkUimampogkUgglUrR2NgoKJVKx9nU1DTtyzxdcxk7n7HzCKW5UPp9bWlpQUtLC1pbW9He3o7r169DLpdDrVZDp9ONC4Lb7b6tQ0dTioJvb8Hj8cDhcMBqtcJsNsNoNGJgYAB9fX3QaDTo7e2FWq2GSqWCUqkMGRUKBeRyObq7uyGXy6FQKNDT04Oenh4oFArhdqE4F98PDWPn4jsdqnOh9PuoUqnQ29uL3t5e9PX1QafTQa\/Xw2QywWKxwG63C4eNbmcvYUpRGBsGr9cLl8sFh8MBm82G4eFhmM1mmEwmmEwmGI1GGAwG6PX6Wa\/BYIDRaBy3zoODg+O++m5jMBhCfi4+Q3UulN6KvseI77nVbDbDarXCbrfD6XQKewgjIyO3tZcw5SiMDYMvDm63Gy6XC06nEw6HA3a7PSS12WzfeT5UnTgH3wZtt9tDenuh9FZ1Op1wOp1wuVzweDxTjsEdi8JYRkdHx0Viol6vd9Z7s\/W+2Uw4l9CeC6W34s0eK1MNwVjuaBQIIYQEN4wCIYQQAUaBEEKIAKNACCFEgFEghBAiwCgQQggRYBQIIYQIMAqEEEIE7ngUbvYCtul+0cd0vbhk7DxCeS6U0ql7s+eXGffitbHvgeR7m4uxb3URSm9f4HA4hJefT1x333nfbUJpLpTSqTv2+cX3Fhe+t7m4U69uvqNviKfVapGRfg7p6Wk4l5aKtLSz35p6Bqlnv\/XsmdOzVt86TlzfjPRzOHv2LM6ePYvU1FSkpaWN+5qamipcTymlk+l7rkhLSxNMT09HYWEh7PZv3wtp7HsgBTwKviD49gxsNhteeeUVPLrwH\/CnP\/wbHWN4eDgeffRR\/OlPf6KU0juqSCRCcXExrFYrHA7H9L11tm8Pwel0wmq1wmQy4dVXX0XR5b8BLgMd4\/975GEUFRXd7qgJIeSmrFy5EufPn4fRaBQ+UyHgH7Lj20twuVyw2\/\/+Oc2vvPIyozCJjzAKhBA\/sXLlSqSmpqKvrw8Gg0EIQ0A\/jnN0dBRutxt2ux1msxl6vR5qtRovvfQSo8AoEEICyIoVK3D8+HHI5XL09\/fDaDTCarXC5XIFLgojIyPCYSOj0Yje3l5cv34dy5cvZxQYBUJIAFmxYgWSkpLQ2toKhUIBnU4Hs9ks7C3c6iGkKUXBbDZjYGAAcrkcUqkUL7zwAqMwWRQeZhQIIf5hxYoV+OSTT3Dt2jV0dHRAo9HAYDDAZrPB7XYHJgperxcOhwMmkwlarRadnZ24du0ali5dyigwCoSQACIWi7F3715UVlaiubkZSqUSAwMDsFgst3UI6bai4PF4YLfbYTQaoVar0dbWhurqaixZsoRRYBQIIQFELBZj165dKC0thUQiQXd3N\/r7+2E2mwMXBbfbDZvNBoPBAKVSCalUirKyMjz33HOMAqNACAkgYrEY27dvx9dff426ujp0dnZCq9XCbDbD6XQGJgoulwtWqxWDg4NQKBRobGxEaWkpfvWrXzEKjAIhJICIxWJs3boVFy9eRE1NDWQyGTQaDYaGhgIfBd8vmSUSCYqKirB48bOMwqRReIhRIIT4BbFYjC1btiAvLw9VVVWQyWTo7e2F0Wicvig0NDSgsLAQzz7LKDAKhJBAIhaLERUVhdzcXFRWVqKtrQ1qtZpRmMkyCoQQf+GLQk5OzvREYXR0FC6XCxaLBTqdDj09Paivr0dBQQGjwCgQQgKMWCzG5s2bkZOTg4qKCrS2tkKlUsFoNMLhcMDr9d7S92MUGAVCSBDDKAShjAIhxF8wCkEoo0AI8ReMQhDKKBBC\/AWjEIQyCoQQf8EoBKGMAiHEXzAKQSijQAjxF4xCEMooEEL8RchFQXldCpm0+ju1GJTT\/sTPKBBCpoOQi8LLLy2HSCT6TnOzzk7p35BJq3EoaT+jQAgJOkIuCvIOCVoklYJzwsKw6n\/+a9xlw3rFlP6No4c+xZywMEaBEBJ0hFwUJjonLAxbNr9zw+XOYS1qKwtQW1kAj0036X07W2pxOS8TGnmLcNmQrgcfJuxAmEiEblk9bENqRoEQEjQwCpNEoeCrLDz80IO4Kzwc98ybhx89cD+u5GcK11eXXcYvf\/EkFsyfj\/n33Ye5c+bg4w93Ay4D9sRtx5ywMIhEIoTPnYtLuRmMAiEkaGAUJkRBI2\/BD++9F2tX\/RlaRSvc1n5si9mE8LlzobwuBVwGvLB0Cf7wH7+H1z4Ah1mDz\/Z\/gLvvugtDuh7AxcNHhJDghVGYEIVtMZvwg3vugWlALlzmsvThh\/fei317dwEuAx772aNY\/MxT0GuvAy4DRhyDqKsqFP5qiVEghAQrjMKEKPz+X1fggfsXYKX4n8e5YP58RLy1BnAZkJF6HAvmz8dd4eH47fIXkLDrPfS0Nwjfg1EghAQrjMKEKIj\/5RU89rNHcfJY8g1WlHwl3M5u6kX62WNYu+rPeOjBn+CB+xfAPChnFAghQQ2jMCEK70a8iXl33w2rUSVc5rUPYPvWzSgvvgiHWYPoyIhxewZDuh7cv2A+Pv1kL6NACAlqGIUJUZBJq3FXeDjWrX0dqq4m9LQ3YN3a1\/GDe+5Bt6wecH37Arj\/fO3fhfPFV7IRJhIh7fQRwGVA+tljEIlEaKovh9vazygQQoIGRmGSP0nNSD2OB+5fgPC5czEnLAw\/++lCfJWTLlxfdPlv+PGPHoBIJMKDP\/kxRCIRVr\/+3xh16gGXATp1O55Y9BhEIhEuZp9jFAghQUPIR+Fm2k29qCm\/gpryK5P+tD+sV6Cm\/AoKvsoS\/lR1olpFK0Ycg4wCISRoYBSCUEaBEOIvGIUglFEghPgLRiEIZRQIIf6CUQhCGQVCiL9gFIJQRoEQ4i8YhSCUUSCE+AtGIQhlFAgh\/oJRCEIZBUKIv2AUglBGgRDiLxiFIJRRIIT4C0YhCGUUCCH+glEIQhkFQoi\/YBSCUEaBEOIvGIUglFEghPgLRiEIZRQIIf6CUQhCGQVCiL9gFIJQRoEQ4i8YhSCUUSCE+At8ljr\/AAAGw0lEQVRGIQhlFAgh\/mLaowAALpcLVqsVAwMDkMvlaGhoQGFhIaPAKBBCAoxYLEZUVBRycnJQWVmJtrY2qNVqGI1GOJ1OjIyM3NL3u2NRKCoqwuLFjAKjQAgJJGKxGNHR0cjLy0NVVRVkMhl6e3unLwoKhQKNjY0oLS3F008\/jS+PJCI78zQd47x58\/Dll18iOzubUkrvqPfddx9iYmKQn5+PmpoayGQyaDQaDA0NBT4Ker0eSqUSTU1NuHr1Knbu3InFi5\/Fc889h2eeeQa\/\/OU\/4ec\/fxJPPLEIixY9jscff2xW+9hjvtOPY9GiRXjiiSfw5JNPYOHCf8RPf\/pT\/PznP8eTTz6JJ554AosWLcLjjz9OKaXf20WLFuHJJ5\/EL37xCzz11FNYvHgxli9fjmPHjuHy5cuoq6tDR0cHtFotTCZT4KLgdrths9lgNBqhUqnQ1taGqqoq5OXl4eTJkzhw4ADi4+Oxbds2bNy4EevWrcPq1auxatUqrFq1Cn\/5y19mnb71Wr16NdasWYM33ngD69atw9tvv423334bERERiIiIwNtvv43169dj7dq1WL16NV5\/\/fVx96eU0omuWrUKq1evxptvvol33nkHUVFReP\/99\/Hhhx\/i0KFDyMjIQGFhIRoaGnD9+nX09fVheHgYLpcrMFHwer1wOBwwmUzQaDTo6OhAbW0tvv76a6Snp+Pw4cPYv38\/du\/eje3bt2PLli2IjIzEpk2bsHHjxlnru+++i3fffReRkZHYvHkzoqKisGXLFkRHRyM2NhYxMTGIiYlBVFQUNm3ahE2bNuHdd9+d9uWmlM58N23ahKioKGzbtg27du3CX\/\/6VyQmJuLEiRPIzc1FRUUFmpubIZfLMTAwAIvFMj1R8P1ZamNjI8rKypCbm4vU1FQcPnwYn332GT7++GMkJCQgLi4OcXFx2LFjx6z2\/fffx86dOxEXF4f4+Hjs3r1b+Lpnzx7Ex8cLs9i5cyd27NghfKWU0pu5c+dOxMfH48MPP8T+\/ftx8OBBfPnll8jMzERBQQFqa2shk8mgUqkwODgIq9UKt9sdmCiMjIzA6XTCYrFAr9dDpVKho6MDdXV1KCkpQW5uLjIzM3Hq1CkcPXoUhw4dQmJiIhITE\/H555\/PWj\/77LNxfv7550hKShLWPSkpSdB3n08\/\/XTal5tSOvNNTEzEwYMHcfjwYRw\/fhypqam4cOECrly5gqqqKjQ3N6Onpwf9\/f0wmUyw2WzweDwYHR0NTBTcbve4vQWFQgGZTIaGhgaUl5ejsLAQ+fn5yMnJQVZWFjIyMma9586dQ1pamnB6rGlpaUhPT0d6erpw3nddenr6tC87pXTme\/78eWRnZyM\/Px9XrlxBaWkpvvnmGzQ1NaGrqwtarRYGg0H4fYLX6w1MFEZHR+H1euF0OmG1WmEymdDf3w+lUonOzk40NTWhoaEBNTU1qKioQFlZGUpLS1FaWori4uJZaWlpKUpKSlBSUoLCwkIUFRUJFhQUoLCwEIWFhSguLkZRUdEN953u5aeUzlx9z59lZWUoLy9HVVUVamtrIZFI0NbWhu7ubmg0Guj1epjNZjgcjts6dHTbUQD+vrfgdDoxPDwshEGtVkMul6OzsxMymQwtLS1oamqCVCpFY2PjrFYqlUIikaChoQGNjY24du2a8LW+vn7cdRKJRHC6l5tSOvOVSqWQSqVoaWlBW1sb2tvb0d3dDZVKhb6+PhgMBpjNZthsNmEvIaBRGB0dxcjICFwuFxwOh7DHYDQaodPpoNFooFaroVKpoFQqoVAooFAoIJfLZ6W+9fOtY1dXF7q6utDd3Y3r169DLpeju7sb3d3d6OrquuG+0738lNKZq++5RalUQqlUQqVSobe3F319fRgcHMTQ0BCGh4dht9vhdDqFINzqoaMpRQH4dm9hZGQEHo8HTqcTdrsdFosFJpNJCITRaMTg4CAGBgZCQr1ej8HBQej1euj1euh0OgwMDECn0wmnBwcHQ2omlNKp63teMRgMMBqNwvPs8PAwrFYrHA7HlIMw5SgAf99j8Hq98Hg8cLlccDqdcDgcsNvtsNlssNlssFqtIaNvnceu+\/DwMGw2G+x2+7jbTfeyUkqDS9\/ziC8CTqcTLpcLHo9H+EH9doNwR6IwMQ4+vV6vEAqPxwO32w2XyzWrdbvdcLvdwjqPXf+x50NtLpTSqTv2+cX3\/OrbK\/CFYCox8HHHokAIIST4YRQIIYQIMAqEEEIEGAVCCCECjAIhhBABRoEQQogAo0AIIUSAUSCEECLAKBBCCBFgFAghhAgwCoQQQgT+PxhwuABxbMGQAAAAAElFTkSuQmCC)\n\n\n\n\n\n\n**Comparing cross-validation to train\/test split**\n\nAdvantages of cross-validation:\n\n    More accurate estimate of out-of-sample accuracy\n    More \"efficient\" use of data\n        This is because every observation is used for both training and testing\n\nAdvantages of train\/test split:\n\n    Runs K times faster than K-fold cross-validation\n        This is because K-fold cross-validation repeats the train\/test split K-times\n    Simpler to examine the detailed results of the testing process\n\n**Cross-validation recommendations**\n\n    K can be any number, but K=10 is generally recommended\n        This has been shown experimentally to produce the best out-of-sample estimate\n    For classification problems, stratified sampling is recommended for creating the folds\n        Each response class should be represented with equal proportions in each of the K folds\n            If dataset has 2 response classes\n                Spam\/Ham\n                20% observation = ham\n                Each cross-validation fold should consist of exactly 20% ham\n        scikit-learn's cross_val_score function does this by default\n\n**Feature engineering and selection within cross-validation iterations**\n\n    Normally, feature engineering and selection occurs before cross-validation\n    Instead, perform all feature engineering and selection within each cross-validation iteration\n    More reliable estimate of out-of-sample performance since it better mimics the application of the model to out-of-sample data\n      ","7ee05231":"## Features selection : \n**Feature Selection**\n\nFeature selection is a method of selecting features from your feature set to be used for modeling. It draws from a set of existing features, so it's different than feature engineering because it doesn't create new features. The overarching goal of feature selection is to improve your model's performance. Perhaps your existing feature set is much too large, or some of the features you're working with are unnecessary. There are different ways you can perform feature selection. It's possible to do it in an automated way. Scikit-learn has several methods for automated feature selection, such as choosing a variance threshold and using univariate statistical tests\n\n**Why reduce dimensionality?**\n\nYour dataset will become simpler and thus easier to work with, require less disk space to store and computations will run faster. In addition, models are less likely to overfit on a dataset with fewer dimensions.\n\n**Selection vs extraction**\n\nWhen we apply feature selection, we completely remove a feature and the information it holds from the dataset. We try to minimize the information loss by only removing features that are irrelevant or hold little unique information, but this is not always possible.\n\nCompared to feature selection, feature extraction is a completely different approach but with the same goal of reducing dimensionality. Instead of selecting a subset of features from our initial dataset, we'll be calculating, or extracting, new features from the original ones. These new features have as little redundant information in them as possible and are therefore fewer in number. One downside is that the newly created features are often less intuitive to understand than the original ones. \nPCA Calculating \n\n**Principal Components**\n\n**Feature Selection Methods**\n\n1. Uni-variate Selection\n\n\n2. Selecting from Model\n\n\n\n3. Wrapper\/RFE \n   \n        \n- Embeded\n \n- Sum the votes of the three models  \n \n4. PCA\n        ","ac1619ad":"#  Submit to the competition\nWe'll begin by using the trained model to generate predictions, which we'll save to a CSV file.","21f65d37":"##  What should we do for each colmun\n### Separate features by dtype\n\nNext we\u2019ll separate the features in the dataframe by their datatype. There are a few different ways to achieve this. I\u2019ve used the select_dtypes() function to obtain specific data types by passing in np.number to obtain the numeric data and exclude=['np.number'] to return the categorical data. Appending .columns to the end returns an Index list containing the column names. For the categorical features, we don\u2019t want to include the target income column, so I\u2019ve dropped that.\n### Cat Features","48f8bf54":"# Target "}}