{"cell_type":{"89a18709":"code","5d149026":"code","9f5f95ce":"code","bd701239":"code","e7980c41":"code","38af4db1":"code","27a06795":"code","2d3ac4c1":"code","0b0d4fae":"code","88156d4c":"code","73315c8a":"code","2e43d917":"code","f8dd34f6":"markdown","51401a13":"markdown","43e3f8ba":"markdown","ccdc621c":"markdown","7428f145":"markdown"},"source":{"89a18709":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d149026":"t = pd.read_csv(\"\/kaggle\/input\/healthcare-provider-fraud-detection-analysis\/Train-1542865627584.csv\")\nb = pd.read_csv(\"\/kaggle\/input\/healthcare-provider-fraud-detection-analysis\/Train_Beneficiarydata-1542865627584.csv\")\ni = pd.read_csv(\"\/kaggle\/input\/healthcare-provider-fraud-detection-analysis\/Train_Inpatientdata-1542865627584.csv\")\no = pd.read_csv(\"\/kaggle\/input\/healthcare-provider-fraud-detection-analysis\/Train_Outpatientdata-1542865627584.csv\")\n\ntt = pd.read_csv(\"\/kaggle\/input\/healthcare-provider-fraud-detection-analysis\/Test-1542969243754.csv\")\ntb = pd.read_csv(\"\/kaggle\/input\/healthcare-provider-fraud-detection-analysis\/Test_Beneficiarydata-1542969243754.csv\")\nti = pd.read_csv(\"\/kaggle\/input\/healthcare-provider-fraud-detection-analysis\/Test_Inpatientdata-1542969243754.csv\")\nto = pd.read_csv(\"\/kaggle\/input\/healthcare-provider-fraud-detection-analysis\/Test_Outpatientdata-1542969243754.csv\")\n\n\n(len(t), len(b), len(i), len(o))","9f5f95ce":"df = pd.concat([i,o])\ndf = pd.merge(df, t, on=\"Provider\", how=\"outer\")\ndf = df.fillna(0)\n\ndf2 = pd.concat([ti,to])\ndf2 = pd.merge(df2, tt, on=\"Provider\", how=\"outer\")\ndf2 = df2.fillna(0)","bd701239":"from sklearn import preprocessing\ncatcols = ['BeneID', 'ClaimID', 'ClaimStartDt', 'ClaimEndDt', 'Provider',\n        'AttendingPhysician', 'OperatingPhysician',\n       'OtherPhysician', 'AdmissionDt', 'ClmAdmitDiagnosisCode',\n       'DischargeDt', 'DiagnosisGroupCode',\n       'ClmDiagnosisCode_1', 'ClmDiagnosisCode_2', 'ClmDiagnosisCode_3',\n       'ClmDiagnosisCode_4', 'ClmDiagnosisCode_5', 'ClmDiagnosisCode_6',\n       'ClmDiagnosisCode_7', 'ClmDiagnosisCode_8', 'ClmDiagnosisCode_9',\n       'ClmDiagnosisCode_10', 'ClmProcedureCode_1', 'ClmProcedureCode_2',\n       'ClmProcedureCode_3', 'ClmProcedureCode_4', 'ClmProcedureCode_5',\n       'ClmProcedureCode_6']\n\nle = {}\nX = pd.concat([df[catcols].astype(str), df2[catcols].astype(str)])\nfor i in catcols:\n    print(i)\n    le[i] = preprocessing.LabelEncoder()\n    le[i].fit(X[i].astype(str))\n    df[i] = le[i].transform(df[i].astype(str))\n    df2[i] = le[i].transform(df2[i].astype(str))\n        ","e7980c41":"cols = ['BeneID', 'ClaimID', 'ClaimStartDt', 'ClaimEndDt', 'Provider',\n       'InscClaimAmtReimbursed', 'AttendingPhysician', 'OperatingPhysician',\n       'OtherPhysician', 'AdmissionDt', 'ClmAdmitDiagnosisCode',\n       'DeductibleAmtPaid', 'DischargeDt', 'DiagnosisGroupCode',\n       'ClmDiagnosisCode_1', 'ClmDiagnosisCode_2', 'ClmDiagnosisCode_3',\n       'ClmDiagnosisCode_4', 'ClmDiagnosisCode_5', 'ClmDiagnosisCode_6',\n       'ClmDiagnosisCode_7', 'ClmDiagnosisCode_8', 'ClmDiagnosisCode_9',\n       'ClmDiagnosisCode_10', 'ClmProcedureCode_1', 'ClmProcedureCode_2',\n       'ClmProcedureCode_3', 'ClmProcedureCode_4', 'ClmProcedureCode_5',\n       'ClmProcedureCode_6']\n\nX = df[cols]\nY = df[\"PotentialFraud\"].apply(lambda x: True if x == \"Yes\" else False)\n","38af4db1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.10, random_state=42)","27a06795":"import xgboost as xgb\nclf = xgb.XGBClassifier(n_jobs=12, n_estimators=200)\nclf.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_test, y_test)],\n        eval_metric=[\"auc\",\"error\",\"logloss\"],\n        verbose=10)","2d3ac4c1":"from xgboost import plot_importance\nplot_importance(clf)","0b0d4fae":"cols = ['BeneID', 'ClaimID', 'ClaimStartDt', 'ClaimEndDt',\n       'InscClaimAmtReimbursed', 'AttendingPhysician', 'OperatingPhysician',\n       'OtherPhysician', 'AdmissionDt', 'ClmAdmitDiagnosisCode',\n       'DeductibleAmtPaid', 'DischargeDt', 'DiagnosisGroupCode',\n       'ClmDiagnosisCode_1', 'ClmDiagnosisCode_2', 'ClmDiagnosisCode_3',\n       'ClmDiagnosisCode_4', 'ClmDiagnosisCode_5', 'ClmDiagnosisCode_6',\n       'ClmDiagnosisCode_7', 'ClmDiagnosisCode_8', 'ClmDiagnosisCode_9',\n       'ClmDiagnosisCode_10', 'ClmProcedureCode_1', 'ClmProcedureCode_2',\n       'ClmProcedureCode_3', 'ClmProcedureCode_4', 'ClmProcedureCode_5',\n       'ClmProcedureCode_6']\n\nX = df[cols]\nY = df[\"PotentialFraud\"].apply(lambda x: True if x == \"Yes\" else False)\n","88156d4c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.10, random_state=42)","73315c8a":"import xgboost as xgb\nclf = xgb.XGBClassifier(n_jobs=12, n_estimators=500)\nclf.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_test, y_test)],\n        eval_metric=[\"auc\",\"error\",\"logloss\"],\n        verbose=10)","2e43d917":"plot_importance(clf)","f8dd34f6":"# Training","51401a13":"# Removing the provider, just to see if the model reacts well","43e3f8ba":"# Feature importance plot","ccdc621c":"# Preparing the dataset","7428f145":"# Labeling categorical data"}}