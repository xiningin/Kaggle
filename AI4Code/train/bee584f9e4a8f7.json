{"cell_type":{"9b5a992d":"code","06d29fa4":"code","8ed8a87b":"code","ff797354":"code","5032f8dc":"code","98350de5":"code","d205108b":"code","1414af80":"code","e9be50eb":"markdown"},"source":{"9b5a992d":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nimport cv2\nimport glob\nimport time\nimport pydicom\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\n\nimport dask as dd\nimport dask.array as da\nfrom dask.distributed import Client, progress\n\nprint(os.listdir(\"..\/input\/sample images\"))","06d29fa4":"# Path to the data\ndata_dir = Path('..\/input\/sample images\/')\n\n# get the list of all the dcm files recursively\nall_files = list(data_dir.glob(\"**\/*.dcm\"))\n\nprint(\"Number of dcm files found: \", len(all_files))","8ed8a87b":"# Define the path to output directory\noutdir = \".\/processed_images\/\"\n\n# Make the directory\nif not os.path.exists(outdir):\n    os.mkdir(outdir)","ff797354":"# Convert DICOM to JPG\/PNG via openCV\ndef convert_images(filename, img_type='jpg'):\n    \"\"\"Reads a dcm file and saves the files as png\/jpg\n    \n    Args:\n        filename: path to the dcm file\n        img_type: format of the processed file (jpg or png)\n        \n    \"\"\"\n    # extract the name of the file\n    name = filename.parts[-1]\n    \n    # read the dcm file\n    ds = pydicom.read_file(str(filename)) \n    img = ds.pixel_array\n    \n    # save the image as jpg\/png\n    if img_type==\"jpg\":\n        cv2.imwrite(outdir + name.replace('.dcm','.jpg'), img)\n    else:\n        cv2.imwrite(outdir + name.replace('.dcm','.png'), img)","5032f8dc":"# Making the list bigger hust for showcasing \nall_files = all_files*1000\nprint(\"Total number of files: \", len(all_files))","98350de5":"# First using the simple way: the for loop\nt = time.time()\nfor f in all_files:\n    convert_images(f)\nprint(\"Time taken : \", time.time() - t)","d205108b":"# Using dask \nall_images = [dd.delayed(convert_images)(all_files[x]) for x in range(len(all_files))]\n\nt = time.time()\ndd.compute(all_images)\nprint(\"Time taken when using all cores: \", time.time()-t)","1414af80":"# Confirm that all the original 10 images are saved \n! ls .\/processed_images\/* | wc -l","e9be50eb":"There is still so much of room left to make it even faster!"}}