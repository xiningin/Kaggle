{"cell_type":{"1cb85aff":"code","93b61701":"code","4a1e4eb3":"code","6ca86daa":"code","8bd3d66c":"code","bbd872b1":"code","baff3f17":"code","818908c9":"code","93597c9d":"code","97464890":"code","6161e3f2":"code","20a99d3b":"code","008498f7":"code","fe95b16f":"code","fa56cd4b":"code","9434c5f1":"code","56c7ce2b":"code","55b51e70":"code","66fc1844":"code","001b5370":"code","4a0a7eee":"code","9edcc52e":"code","064442c0":"code","e6228aa9":"code","dd303deb":"code","57e19852":"code","928b4ccb":"code","b0a723ce":"code","651457c4":"markdown","5d83cbd0":"markdown","61a2a0f1":"markdown","a1d6d54b":"markdown","b18d2af4":"markdown","0c5a562f":"markdown","a1259eac":"markdown","8a105bd8":"markdown","ba1e7a08":"markdown","8a989259":"markdown","67b7194b":"markdown","b1160eb7":"markdown","496184b9":"markdown","f48fcc98":"markdown","d51ac19f":"markdown","64a9b719":"markdown","e009fce7":"markdown"},"source":{"1cb85aff":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nimport plotly.express as px\nfrom IPython.display import HTML\nimport warnings\nwarnings.filterwarnings(\"ignore\")","93b61701":"#defining a function to read all 3 files\ndef get_frame(name):\n    url = (\n        'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/'\n        f'csse_covid_19_time_series\/time_series_covid19_{name}_global.csv')\n    df = pd.read_csv(url)\n    return df\n\n\ndf_cases=get_frame('confirmed') #raw-data for confirmed cases\ndf_deaths=get_frame('deaths') #raw-data for deaths\ndf_recovered = get_frame('recovered') #raw-data for recovered cases\n\ndf_cases=df_cases.drop(columns=['Lat','Long','Province\/State'])\ndf_deaths=df_deaths.drop(columns=['Lat','Long','Province\/State'])\ndf_recovered=df_recovered.drop(columns=['Lat','Long','Province\/State'])\ndf_cases.head()","4a1e4eb3":"#Importing country-wise Population data\nurl='https:\/\/raw.githubusercontent.com\/vijayaiitk\/Covid-19-analysis\/main\/population_by_country_2020.csv'\ndf=pd.read_csv(url)\ndf=df.rename(columns={'Country (or dependency)': 'Country','Population (2020)':'Population'})\ndf['Country'] = df['Country'].replace('United States','US')\ndf=df[['Country','Population']]\n#pop share is population of a country out of total world population\ndf['Pop_share']=(df['Population']*100.00\/df['Population'].sum()).round(2)\ndf.head()","6ca86daa":"#current data\nres_cases=df_cases.columns.to_list()\nres_deaths=df_deaths.columns.to_list()\nres_recovered=df_recovered.columns.to_list()\n\n#taking data of most recent date\ndftoday_cases=df_cases[['Country\/Region',res_cases[len(res_cases)-1]]]\ndftoday_deaths=df_deaths[['Country\/Region',res_deaths[len(res_cases)-1]]]\ndftoday_recovered=df_recovered[['Country\/Region',res_recovered[len(res_cases)-1]]]\n\ndftoday_cases.columns=['Country','Total_cases']\ndftoday_deaths.columns=['Country','Total_deaths']\ndftoday_recovered.columns=['Country','Total_recovered']\n\ndftoday_cases=dftoday_cases.groupby(['Country'])['Total_cases'].sum().reset_index()\ndftoday_deaths=dftoday_deaths.groupby(['Country'])['Total_deaths'].sum().reset_index()\ndftoday_recovered=dftoday_recovered.groupby(['Country'])['Total_recovered'].sum().reset_index()\n\n#dftoday has current cases, deaths & recovered\ndftoday=dftoday_cases.merge(dftoday_deaths.merge(dftoday_recovered, on='Country'), on='Country')\n\n\n#Adding %infected column\ndftoday=dftoday.merge(df, on='Country')\ndftoday.reset_index(drop=True, inplace=True)\ndftoday['%infected']=(dftoday['Total_cases']*100.00\/dftoday['Population']).round(2)\ndftoday['Mortality Rate(%)']=(dftoday['Total_deaths']*100.00\/dftoday['Total_cases']).round(2)\n\n\n#current stats\nprint('Worldwide cases',':', (dftoday['Total_cases'].sum()\/1000000).round(2),'Million')\nprint('Worldwide deaths',':', (dftoday['Total_deaths'].sum()\/1000000).round(2),'Million')\nprint('Worldwide recovered',':', (dftoday['Total_recovered'].sum()\/1000000).round(2),'Million')\nprint('Mortality Rate(%)',':', (dftoday['Total_deaths'].sum()*100.00\/dftoday['Total_cases'].sum()).round(2),'%')\nprint('Infection Rate(%)',':', (dftoday['Total_cases'].sum()*100.00\/dftoday['Population'].sum()).round(2),'%')","8bd3d66c":"#Covid-index is covid share\/pop share of that country. If covid_index > 1 it's bad\ndftoday['Covid_index']=((dftoday['Total_cases']\/dftoday['Total_cases'].sum()*100.00)\/dftoday['Pop_share']).round(2)\ndftoday[dftoday['Pop_share'] !=0].sort_values(by='Covid_index',ascending=False).head()","bbd872b1":"pip install chart_studio","baff3f17":"#Plotting Geospatial data (current cases across countries)\nimport chart_studio.plotly as py \nimport plotly.graph_objs as go #importing graphical objects\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ndata = dict(type='choropleth',\n            locations = dftoday['Country'],\n            locationmode = 'country names',\n            colorscale = 'Reds',\n            text = dftoday['Country'],\n            z = dftoday['Total_cases'],\n            colorbar = {'title':\"Total_cases\"}\n            )\n\nlayout = dict(title = 'Worldwide cases ',\n              geo = dict(showframe = False,projection = {'type':'natural earth'}\n             ))\n\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","818908c9":"#Plotting Geospatial data (current deaths across countries)\nimport chart_studio.plotly as py \nimport plotly.graph_objs as go #importing graphical objects\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ndata = dict(type='choropleth',\n            locations = dftoday['Country'],\n            locationmode = 'country names',\n            colorscale = 'Reds',\n            text = dftoday['Country'],\n            z = dftoday['Total_deaths'],\n            colorbar = {'title':\"Total_deaths\"}\n            )\n\nlayout = dict(title = 'Worldwide deaths ',\n              geo = dict(showframe = False,projection = {'type':'natural earth'}\n             ))\n\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","93597c9d":"cbar=dftoday.sort_values(by='Total_cases',ascending=False).head(10)\ncbar.reset_index(drop=True, inplace=True)\ncbar=cbar.sort_values(by='Total_cases')\nx = cbar['Country']\ny = cbar['Total_cases']\n\nimport plotly.express as px\nfig = px.bar(cbar, x=\"Total_cases\", y=\"Country\",orientation='h',text='Total_cases')\nfig.update_layout(\n    title={\n        'text': 'Total Confirmed Cases',\n        'y':0.98,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","97464890":"#Top 10 worst hit countries & their contribution (cases as of today)\npie=dftoday[['Country','Total_cases','Total_deaths','Total_recovered']]\npie=pie.sort_values(by='Total_cases',ascending=False).head(10)\npie.reset_index(drop=True, inplace=True)\nrow_10=['Others',dftoday.Total_cases.sum()-pie.Total_cases.sum(),dftoday.Total_deaths.sum()-\n        pie.Total_deaths.sum(),dftoday.Total_recovered.sum()-pie.Total_recovered.sum()]\npie.loc[10]=row_10\n\nimport plotly.express as px\nfig = px.pie(pie, values= 'Total_cases', names=\"Country\")\nfig.update_layout(\n    title={\n        'text': \"Worldwide COVID-19 Cases\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.update_traces(hole=.4,textposition='outside', textinfo='percent+label')\nfig.show()","6161e3f2":"#Mortality rate of countries with Top 10 highest cases\nbard=dftoday.sort_values(by='Total_deaths',ascending=False).head(10)\nbard.reset_index(drop=True, inplace=True)\nbard=bard.sort_values(by='Total_deaths').reset_index()\n\nx = bard['Country']\ny = bard['Total_deaths']\n\nimport plotly.express as px\nfig = px.bar(bard, x=\"Total_deaths\", y=\"Country\",orientation='h',text='Total_deaths')\nfig.update_layout(\n    title={\n        'text': 'Total Deaths',\n        'y':0.98,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","20a99d3b":"#Top 10 worst hit countries & their contribution (deaths as of today)\npie=dftoday[['Country','Total_cases','Total_deaths','Total_recovered']]\npie=pie.sort_values(by='Total_deaths',ascending=False).head(10)\npie.reset_index(drop=True, inplace=True)\nrow_10=['Others',dftoday.Total_cases.sum()-pie.Total_cases.sum(),dftoday.Total_deaths.sum()-pie.Total_deaths.sum(),dftoday.Total_recovered.sum()-pie.Total_recovered.sum()]\npie.loc[10]=row_10\n\nfig = px.pie(pie, values= 'Total_deaths', names=\"Country\")\nfig.update_layout(\n    title={\n        'text': \"Worldwide COVID-19 Deaths\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.update_traces(hole=.4,textposition='outside', textinfo='percent+label')\n\nfig.show()","008498f7":"hbar=dftoday.sort_values(by='Total_cases',ascending=False).head(15)\nhbar=hbar.sort_values(by='Total_cases').reset_index()\nx = hbar['Country']\ny = hbar['%infected']\n\nimport plotly.express as px\nfig = px.bar(hbar, x=\"%infected\", y=\"Country\",orientation='h',text='%infected')\nfig.update_layout(width=1000,\n    height=600,\n    title={\n        'text': 'Infection_rate(%)',\n        'y':0.98,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","fe95b16f":"#Mortality rate of countries with Top 10 highest cases\nbar=dftoday.sort_values(by='Total_cases',ascending=False).head(15)\nbar.reset_index(drop=True, inplace=True)\nbar['Mortality_Rate']=(bar['Total_deaths']*100.00\/bar['Total_cases']).round(2)\nbar=bar.sort_values(by='Total_cases').reset_index()\n\nx = bar['Country']\ny = bar['Mortality_Rate']\n\nimport plotly.express as px\nfig = px.bar(bar, x=\"Mortality_Rate\", y=\"Country\",orientation='h',text='Mortality_Rate')\nfig.update_layout(width=1000,\n    height=600,\n    title={\n        'text': 'Mortality Rate(%)',\n        'y':0.98,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","fa56cd4b":"hbar=dftoday.sort_values(by='Total_cases',ascending=False).head(15)\nhbar=hbar.sort_values(by='Total_cases').reset_index()\nx = hbar['Country']\ny = hbar['Covid_index']\n\nimport plotly.express as px\nfig = px.bar(hbar, x=\"Covid_index\", y=\"Country\",orientation='h',text='Covid_index')\nfig.update_layout(width=1000,\n    height=600,\n    title={\n        'text': 'Covid_Index',\n        'y':0.98,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","9434c5f1":"#creating tables to store day-level data across countries\n\n#historical cases per country\ntempc=pd.melt(df_cases, id_vars=['Country\/Region'], var_name='Date', value_name='Cases')\ntempc1=tempc.groupby(['Country\/Region','Date'])['Cases'].sum().reset_index()\ntempc1.columns = ['Country', 'Date','Cases']\ntempc1['Date']=pd.to_datetime(tempc1['Date'])\n\n#adding Total rows(summation across countries) for each day\ntotalc=tempc1.groupby(['Date'])['Cases'].sum().reset_index().sort_values(by='Cases')\ntotalc['Country']='Total'\n\nframesc=[tempc1,totalc]\ndfch=pd.concat(framesc)\n\n#historical deaths per country\ntempd=pd.melt(df_deaths, id_vars=['Country\/Region'], var_name='Date', value_name='Deaths')\ntempd1=tempd.groupby(['Country\/Region','Date'])['Deaths'].sum().reset_index()\ntempd1.columns = ['Country', 'Date','Deaths']\ntempd1['Date']=pd.to_datetime(tempd1['Date'])\n\n#adding Total rows(summation across countries) for each day\ntotald=tempd1.groupby(['Date'])['Deaths'].sum().reset_index().sort_values(by='Deaths')\ntotald['Country']='Total'\n\nframesd=[tempd1,totald]\ndfdh=pd.concat(framesd)\n\n#historical recovery per country\ntempr=pd.melt(df_recovered, id_vars=['Country\/Region'], var_name='Date', value_name='Recovered')\ntempr1=tempr.groupby(['Country\/Region','Date'])['Recovered'].sum().reset_index()\ntempr1.columns = ['Country', 'Date','Recovered']\ntempr1['Date']=pd.to_datetime(tempr1['Date'])\n\n#adding Total rows(summation across countries) for each day\ntotalr=tempr1.groupby(['Date'])['Recovered'].sum().reset_index().sort_values(by='Recovered')\ntotalr['Country']='Total'\n\nframesr=[tempr1,totalr]\ndfrh=pd.concat(framesr)\n\n#dfhist has cumulative cases, deaths, recovered for each day & country\ndfhist=dfch.merge(dfdh.merge(dfrh, on=['Country','Date']), on=['Country','Date'])\ndfhist['Date']=pd.to_datetime(dfhist['Date'])\ndfhist.head()","56c7ce2b":"pip install bar_chart_race","55b51e70":"#Bar chat race (Covid Cases)\nbart=tempc1\nbart.reset_index(drop=True, inplace=True)\nbarc = bart.pivot_table('Cases',['Date'], 'Country')\nbarc.fillna(0, inplace=True)\nbarc.sort_values(list(barc.columns),inplace=True)\n\nimport bar_chart_race as bcr\nbcr.bar_chart_race(\n    df=barc,\n    filename=None,\n    orientation='h',\n    sort='desc',\n    n_bars=10,\n    fixed_order=False,\n    fixed_max=True,\n    steps_per_period=10,\n    interpolate_period=False,\n    label_bars=True,\n    bar_size=.90,\n    period_label={'x': .99, 'y': .25, 'ha': 'right', 'va': 'center'},\n    #period_fmt='%B %d, %Y',\n    period_summary_func=lambda v, r: {'x': .99, 'y': .18,\n                                      's': f'Total cases: {v.nlargest(39).sum():,.0f}',\n                                      'ha': 'right', 'size': 8, 'family': 'Courier New'},\n    #perpendicular_bar_func='median',\n    period_length=500,\n    figsize=(5,3.3 ),\n    dpi=144,\n    cmap='G10',\n    title='Worldwide COVID-19 cases by Country' ,\n    title_size='',\n    bar_label_size=7,\n    tick_label_size=7,\n    shared_fontdict={'family' : 'Helvetica', 'color' : '.1'},\n    scale='linear',\n    writer=None,\n    fig=None,\n    bar_kwargs={'alpha': .7},\n    filter_column_colors=True)  ","66fc1844":"#Bar chat race (Covid Deaths)\nbart=tempd1\nbart.reset_index(drop=True, inplace=True)\nbarc = bart.pivot_table('Deaths',['Date'], 'Country')\nbarc.fillna(0, inplace=True)\nbarc.sort_values(list(barc.columns),inplace=True)\n\nimport bar_chart_race as bcr\nbcr.bar_chart_race(\n    df=barc,\n    filename=None,\n    orientation='h',\n    sort='desc',\n    n_bars=10,\n    fixed_order=False,\n    fixed_max=True,\n    steps_per_period=10,\n    interpolate_period=False,\n    label_bars=True,\n    bar_size=.90,\n    period_label={'x': .99, 'y': .25, 'ha': 'right', 'va': 'center'},\n    #period_fmt='%B %d, %Y',\n    period_summary_func=lambda v, r: {'x': .99, 'y': .18,\n                                      's': f'Total Deaths: {v.nlargest(39).sum():,.0f}',\n                                      'ha': 'right', 'size': 8, 'family': 'Courier New'},\n    #perpendicular_bar_func='median',\n    period_length=500,\n    figsize=(5,3.3 ),\n    dpi=144,\n    cmap='G10',\n    title='Worldwide COVID-19 Deaths by Country' ,\n    title_size='',\n    bar_label_size=7,\n    tick_label_size=7,\n    shared_fontdict={'family' : 'Helvetica', 'color' : '.1'},\n    scale='linear',\n    writer=None,\n    fig=None,\n    bar_kwargs={'alpha': .7},\n    filter_column_colors=True)  ","001b5370":"#converting cumulative cases, deaths to daily new cases, deaths\ndata=dfhist\ndata=data.sort_values(by=['Country','Date'])\ndata.reset_index(drop=True,inplace=True)\ndata['Daily_cases'] = np.nan\ndata['Daily_cases'][0]=data['Cases'][0]\nfor i in range(1,len(data)):\n    if data['Country'][i]==data['Country'][i-1]:\n        data['Daily_cases'][i]= data['Cases'][i]-data['Cases'][i-1] \n    else:\n        data['Daily_cases'][i]= data['Cases'][i]   \n        \ndata['Daily_deaths'] = np.nan\ndata['Daily_deaths'][0]=data['Deaths'][0]\nfor i in range(1,len(data)):\n    if data['Country'][i]==data['Country'][i-1]:\n        data['Daily_deaths'][i]= data['Deaths'][i]-data['Deaths'][i-1] \n    else:\n        data['Daily_deaths'][i]= data['Deaths'][i]   \n          \ndata.tail()  ","4a0a7eee":"#Outlier (Turkey on 10th Dec'20)\ndata['Daily_cases'] = data['Daily_cases'].replace([823225.0],82322.50)\ndata['Daily_cases'] = data['Daily_cases'].replace([1494985.0],754088.5)","9edcc52e":"#Total Cases (worldwide)\ndft=data[data['Country']=='Total']\nx=pd.to_datetime(dft['Date'])\ny= dft['Cases']\n\nimport plotly.express as px\nfig = px.line(dft, x=\"Date\", y=\"Cases\", title=\"Total Worldwide Cases\")\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x unified\")\n\nfig.show()","064442c0":"#Total deaths (worldwide)\n\ndft=data[data['Country']=='Total']\nx=pd.to_datetime(dft['Date'])\ny= dft['Deaths']\n\nimport plotly.express as px\nfig = px.line(dft, x=\"Date\", y=\"Deaths\", title=\"Total Worldwide Deaths\")\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x unified\")\n\nfig.show()","e6228aa9":"#plotting line chart for new confirmed cases worldwide\ndft=data[data['Country']=='Total']\nx=pd.to_datetime(dft['Date'])\ny= dft['Daily_cases']\n\nimport plotly.express as px\nfig = px.line(dft, x=\"Date\", y=\"Daily_cases\")\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x unified\")\nfig.update_layout(\n    title={\n        'text': 'New Worlwide Cases',\n        'y':0.98,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","dd303deb":"#plotting line chart for new confirmed cases worldwide\ndft=data[data['Country']=='Total']\nx=pd.to_datetime(dft['Date'])\ny= dft['Daily_deaths']\n\nimport plotly.express as px\nfig = px.line(dft, x=\"Date\", y=\"Daily_deaths\")\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x unified\")\nfig.update_layout(\n    title={\n        'text': 'New Worldwide Deaths',\n        'y':0.98,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","57e19852":"#plotting line chart for new cases at country level\ncountry=['US','India','Brazil','Russia','United Kingdom','Turkey','Italy','Spain','Germany']\ndatac=data[data['Country'].isin(country)]\ndatac.reset_index(drop=True, inplace=True)\nx=pd.to_datetime(datac['Date'])\ny= datac['Daily_cases']\n\nimport plotly.express as px\nfig = px.line(datac, x=\"Date\", y=\"Daily_cases\",color=\"Country\", title=\"New Cases (worst hit countries)\")\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","928b4ccb":"#plotting line chart for new deaths at country level\ncountry=['US','India','Brazil','Russia','United Kingdom','France','Turkey','Italy','Germany']\ndatac=data[data['Country'].isin(country)]\ndatac.reset_index(drop=True, inplace=True)\nx=pd.to_datetime(datac['Date'])\ny= datac['Daily_deaths']\n\nimport plotly.express as px\nfig = px.line(datac, x=\"Date\", y=\"Daily_deaths\",color=\"Country\", title=\"New Deaths (worst hit countries)\")\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","b0a723ce":"#plotting line chart for new cases at country level\ncountry=['US','India','Brazil','Russia','United Kingdom','Turkey','Italy','Spain','Germany','China']\ndatac=data[data['Country'].isin(country)]\ndatac.reset_index(drop=True, inplace=True)\nx=pd.to_datetime(datac['Date'])\ny= datac['Daily_cases']\n\nimport plotly.express as px\nfor i in range(0,len(country)):\n    fig = px.line(datac[datac['Country']==country[i]], x=\"Date\", y=\"Daily_cases\",color=\"Country\", title=\"New Cases in\" + \" \"+ country[i])\n    fig.update_traces(mode=\"markers+lines\", hovertemplate=None)\n    fig.update_layout(hovermode=\"x unified\")\n    fig.show()","651457c4":"***Covid-Index of Top 15 worst hit countries***","5d83cbd0":"## **Import Packages**","61a2a0f1":"## **Time-series analysis and visualization of Covid Cases & Deaths across Countries**","a1d6d54b":"***Infection rate of Top 15 worst hit countries***","b18d2af4":"***PLOTTING NEW CASES & DEATHS FOR WORST HIT COUNTRIES***","0c5a562f":"***Mortality rate of Top 10 worst hit countries***","a1259eac":"## **Reading Data from Johns Hopkins Covid-19 dataset on GitHub**","8a105bd8":"***PLOTTING NEW WORLDWIDE CASES & DEATHS***","ba1e7a08":"***PLOTTING TOTAL WORLDWIDE CASES & DEATHS***","8a989259":"**The novel coronavirus is bringing countries to a halt and causing widespread health impacts and fatalities. This notebook aims at providing real-time Covid19 analysis and visualizations (cases, deaths & recovery) across countries on a daily-level. In this notebook I am taking a closer look at numbers and trends. All data are taken from the Johns Hopkins Covid-19 dataset on GitHub**","67b7194b":"***PLOTTING NEW CASES FOR WORST HIT COUNTRIE (SEPARATELY)***","b1160eb7":"***Bar Chart race of Covid19 Cases***","496184b9":"***GEOSPATIAL DATA (WORLDWIDE DEATHS)***","f48fcc98":"***Top 10 worst hit countries & their contribution***","d51ac19f":"***GEOSPATIAL DATA (WORLDWIDE CASES)***","64a9b719":"*Note: Countries with the highest mortality rate have the most deaths proportionally to their COVID-19 cases or population, not necessarily the most deaths overall. A high mortality rate could also mean that there's not enough tests being done in that country*","e009fce7":"## **Current Trend** \n**Since we have cumulative numbers, we will be taking the most recent date to get latest data**"}}