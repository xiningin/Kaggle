{"cell_type":{"6ff2d67d":"code","99063495":"code","e9427d4e":"code","864a36c9":"code","7b9c5999":"code","858f44d3":"code","bdbb3970":"code","3a7425bd":"code","4d238dfc":"code","6ee75724":"code","32ff5353":"code","18d2ad35":"code","f4dfbc62":"code","c3356a8e":"code","15ce3caa":"code","f47f99af":"code","086dc7db":"code","5993976d":"code","30d888ce":"code","2493943b":"code","3b8622a5":"code","b5211730":"code","e1c49fc5":"code","da2244e7":"code","4afb7358":"code","a9ec99a5":"code","e882612f":"code","9aad3857":"code","fc5d130f":"code","0cb61417":"code","26c93cdb":"code","f519538e":"code","6b2972f6":"markdown","588a47de":"markdown","09198698":"markdown","6b7acacf":"markdown","8a0762a8":"markdown","d9b2ac9c":"markdown","488c8b25":"markdown"},"source":{"6ff2d67d":"import numpy as np\nimport pandas as pd\n\nimport urllib.request\nfrom PIL import Image\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.ensemble import RandomForestRegressor\n","99063495":"### Para que funcione necesitas bajarte los archivos de datos de Kaggle \ndf = pd.read_csv(\"diamonds_train.csv\", index_col=0)","e9427d4e":"df.info()","864a36c9":"df.color.value_counts()","7b9c5999":"encoder = OrdinalEncoder(categories=[[\"J\", \"I\", \"H\", \"G\", \"F\",\"E\", \"D\",]])\nencoder.fit(df[[\"color\"]])\ndf[\"color\"] = encoder.transform(df[[\"color\"]])\ndf.clarity.value_counts()\nencoder = OrdinalEncoder(categories=[[\"I1\", \"SI2\", \"SI1\", \"VS1\", \"VS2\",\"VVS2\", \"VVS1\",\"IF\"]])\nencoder.fit(df[[\"clarity\"]])\ndf[\"clarity\"] = encoder.transform(df[[\"clarity\"]])\ndf.cut.value_counts()\nencoder = OrdinalEncoder(categories=[[\"Fair\", \"Good\", \"Very Good\", \"Premium\", \"Ideal\"]])\nencoder.fit(df[[\"cut\"]])\ndf[\"cut\"] = encoder.transform(df[[\"cut\"]])","858f44d3":"df[\"cut\"]","bdbb3970":"df.corr()","3a7425bd":"df.columns","4d238dfc":"\nX = np.array(df[[\"carat\",\"cut\",\"clarity\",\"color\",\"table\",\"depth\",'x', 'y', 'z']])\ny = np.array(df[\"price\"])\nX.shape\n","6ee75724":"y.shape","32ff5353":"# el test_size 0.20 y el random_state puede cambiar\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.2, random_state=7)","18d2ad35":"train_X","f4dfbc62":"rf = RandomForestRegressor(n_estimators=500, random_state=7,n_jobs=5)\nrf.fit(train_X, train_y)\n","c3356a8e":"predictions = rf.predict(test_X)","15ce3caa":"errors = abs(predictions - test_y)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')","f47f99af":"np.sqrt(mean_squared_error(test_y, predictions))","086dc7db":"X_pred = pd.read_csv(\"diamonds_test.csv\", index_col = 0)\nX_pred.head()","5993976d":"encoder = OrdinalEncoder(categories=[[\"J\", \"I\", \"H\", \"G\", \"F\",\"E\", \"D\",]])\nencoder.fit(X_pred[[\"color\"]])\nX_pred[\"color\"] = encoder.transform(X_pred[[\"color\"]])\nX_pred.clarity.value_counts()\nencoder = OrdinalEncoder(categories=[[\"I1\", \"SI2\", \"SI1\", \"VS1\", \"VS2\",\"VVS2\", \"VVS1\",\"IF\"]])\nencoder.fit(X_pred[[\"clarity\"]])\nX_pred[\"clarity\"] = encoder.transform(X_pred[[\"clarity\"]])\ndf.cut.value_counts()\nencoder = OrdinalEncoder(categories=[[\"Fair\", \"Good\", \"Very Good\", \"Premium\", \"Ideal\"]])\nencoder.fit(X_pred[[\"cut\"]])\nX_pred[\"cut\"] = encoder.transform(X_pred[[\"cut\"]])","30d888ce":"X_pred = np.array(X_pred[[\"carat\",\"cut\",\"clarity\",\"color\",\"table\",\"depth\",'x', 'y', 'z']])","2493943b":"X.shape","3b8622a5":"X_pred.shape","b5211730":"predictions_submit = rf.predict(X_pred)\npredictions_submit","e1c49fc5":"X_pred","da2244e7":"sample = pd.read_csv(\"sample_submission.csv\")","4afb7358":"sample.head()","a9ec99a5":"sample.shape","e882612f":"submission = pd.DataFrame({\"id\": range(len(predictions_submit)), \"price\": predictions_submit})","9aad3857":"submission.head()","fc5d130f":"submission.shape","0cb61417":"def chequeator(df_to_submit):\n    \"\"\"\n    Esta funci\u00f3n se asegura de que tu submission tenga la forma requerida por Kaggle.\n    \n    Si es as\u00ed, se guardar\u00e1 el dataframe en un `csv` y estar\u00e1 listo para subir a Kaggle.\n    \n    Si no, LEE EL MENSAJE Y HAZLE CASO.\n    \n    Si a\u00fan no:\n    - apaga tu ordenador, \n    - date una vuelta, \n    - enciendelo otra vez, \n    - abre este notebook y \n    - leelo todo de nuevo. \n    Todos nos merecemos una segunda oportunidad. Tambi\u00e9n t\u00fa.\n    \"\"\"\n    if df_to_submit.shape == sample.shape:\n        if df_to_submit.columns.all() == sample.columns.all():\n            if df_to_submit.id.all() == sample.id.all():\n                print(\"You're ready to submit!\")\n                submission.to_csv(\"submission.csv\", index = False) #muy importante el index = False\n                urllib.request.urlretrieve(\"https:\/\/i.kym-cdn.com\/photos\/images\/facebook\/000\/747\/556\/27a.jpg\", \"gfg.png\")     \n                img = Image.open(\"gfg.png\")\n                img.show()   \n            else:\n                print(\"Check the ids and try again\")\n        else:\n            print(\"Check the names of the columns and try again\")\n    else:\n        print(\"Check the number of rows and\/or columns and try again\")\n        print(\"\\nMensaje secreto de Clara: No me puedo creer que despu\u00e9s de todo este notebook hayas hecho alg\u00fan cambio en las filas de `diamonds_test.csv`. Lloro.\")\n","26c93cdb":"help(chequeator)","f519538e":"chequeator(submission)","6b2972f6":"### 5. P\u00e1sale el CHEQUEATOR para comprobar que efectivamente est\u00e1 listo para subir a Kaggle.","588a47de":"![image](competi.png)","09198698":"**\u00bfPor qu\u00e9 da error?** ","6b7acacf":"#### Aqu\u00ed encontrar\u00e1s todo lo que necesitas saber: https:\/\/www.kaggle.com\/t\/ab8726f0cfc84544abbae69a6be88071","8a0762a8":"-----------------------------------------------------------------","d9b2ac9c":"**\u00bfQu\u00e9 es lo que subir\u00e1s a Kaggle?**","488c8b25":"### 3. AHORA puedo hacer la predicci\u00f3n que ser\u00e1 lo que subir\u00e1s a Kaggle. "}}