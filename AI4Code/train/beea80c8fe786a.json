{"cell_type":{"afa4eabe":"code","915f2433":"code","2f729acd":"code","f0b38116":"code","bc15fff4":"code","0e5e10b6":"code","e73db333":"code","a9cc1fea":"code","08a307c1":"code","42cbee41":"code","7bb91ef9":"code","0c083cfe":"code","56e1917b":"code","ee09f472":"code","72127cf5":"code","b0dc7970":"code","d3f56e89":"code","09aa5306":"code","a588a17e":"code","18c6b4ce":"code","6c10e901":"code","e6378343":"code","5895ed6b":"code","b2677f07":"code","59549166":"code","35a83ac5":"code","fa32d17c":"code","3677e433":"code","432bd077":"code","7d0535e3":"code","de880e49":"code","41375455":"code","761964a6":"code","b38dcb26":"code","a453a8a7":"code","223763d3":"code","fa58138d":"code","f64648dc":"code","9db9ad1e":"code","4347a0cb":"markdown","56d84c82":"markdown","fdf09d41":"markdown","0e22e7c8":"markdown","8144a3a2":"markdown","ab642009":"markdown","d55552a2":"markdown","e5903a88":"markdown","fbcfa776":"markdown","07051f79":"markdown","b48e62ab":"markdown","6e8e771c":"markdown","a0b85769":"markdown","568e9740":"markdown","b0705278":"markdown"},"source":{"afa4eabe":"#importing libraries \n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","915f2433":"#reading train dataset\ntrain=pd.read_csv('..\/input\/titanic\/train.csv')\ntrain.head()","2f729acd":"#reading test dataset\ntest=pd.read_csv('..\/input\/titanic\/test.csv')\ntest.head()","f0b38116":"#finding shape of datasets\nprint(train.shape)\nprint(test.shape)","bc15fff4":"#summary for train dataset\ntrain.describe()","0e5e10b6":"#summary for train dataset\ntest.describe()","e73db333":"train.isnull().sum().sort_values(ascending = False).head()","a9cc1fea":"test.isnull().sum().sort_values(ascending = False).head()","08a307c1":"#merging both train & test dataset\ndf= pd.concat([train,test], sort= False)\ndf.shape","42cbee41":"#we will fill the missing values\ndf['Embarked'] = df['Embarked'].fillna(method ='pad')","7bb91ef9":"#filling age and fare with it's mean\ndf['Age']=df['Age'].fillna(df['Age'].mean())\ndf['Fare']=df['Fare'].fillna(df['Fare'].mean())","0c083cfe":"df.isnull().sum()","56e1917b":"df['Age_Bins'] = pd.cut(x=df['Age'], bins=[0,10,20,60,100],labels=['Kid', 'Young', 'Senior','Old'])\ndf['Fare_Bins'] = pd.cut(x=df['Fare'], bins=[0,102, 204, 307, 409,513],labels=['Very Low', 'Low', 'Medium', 'High','Very High'])","ee09f472":"df['Age_Bins'].value_counts()","72127cf5":"dummy=pd.get_dummies(df['Age_Bins'], drop_first=True)\ndummy1=pd.get_dummies(df['Fare_Bins'], drop_first=True)","b0dc7970":"df= pd.concat([df, dummy], axis=1)\ndf= pd.concat([df, dummy1], axis=1)","d3f56e89":"# Cabin Column has lots of missing value. \n# We will first extract first word to understand the cabin from where passengers belong\n# anf finally fill with value with 'Unknown: U' \n\ndf['Cabin'].str.slice(0,1)","09aa5306":"df['Cabin']=df['Cabin'].fillna('U')","a588a17e":"#filling values witj 1 and 0; where 1:U and Other: 0\n\ndef unknown_alone(Cabin):\n    if Cabin != \"U\":\n        return 1\n    else:\n        return 0\n    \ndf['Cabin'] = df['Cabin'].apply(lambda x:unknown_alone(x))","18c6b4ce":"#creatin isalone variable \n\ndf['isalone']=df['SibSp']+df['Parch']\n\ndef unknown_alone(isalone):\n    if isalone != 0:\n        return 1\n    else:\n        return 0\n    \n \ndf['isalone'] = df['isalone'].apply(lambda x:unknown_alone(x))","6c10e901":"#extract title from name\nfor i in df['Name']:\n    df['Title'] = df['Name'].str.extract('([A-Za-z]+)\\.', expand = False)","e6378343":"#finding unique title\ndf['Title'].unique()","5895ed6b":"#let's replace least occuring title in the data with rare\nleast_occuring = [ 'Don', 'Rev', 'Dr', 'Mme', 'Ms','Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'Countess','Dona','Jonkheer']\nfor i in df['Title']:\n    df['Title'] = df['Title'].replace(least_occuring, 'Rare')","b2677f07":"#Converting variables into 0,1,2,3,4 and 5 \ndf['Title']=df['Title'].map ( {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5} )","59549166":"#Converting variables into 0,1 and 2 \ndf['Sex']=df['Sex'].map ( {'male':0,'female':1} )\ndf['Embarked']=df['Embarked'].map ( {'S':0,'C':1, 'Q':2})","35a83ac5":"#we are already using these variables after applying dummy variables \ndf=df.drop(['Age_Bins','Fare_Bins','Age','Fare'], axis=1) \n\n#we will be dropping these columns\ndf=df.drop(['Ticket', 'PassengerId'],axis=1)\n\n#we are using name variables after extracting the title\ndf=df.drop(['Name'],axis=1)","fa32d17c":"df.head()","3677e433":"df.shape","432bd077":"#dividing train and test data and also dropping survived column which was created while merging train and test dataset\nnew_train=df.iloc[:891]\nnew_test=df.iloc[891:,1:]","7d0535e3":"new_train.head()","de880e49":"new_test.head()","41375455":"print(new_train.shape)\nprint(new_test.shape)","761964a6":"print(new_train.isnull().sum().sort_values(ascending = False).head())\nprint(new_test.isnull().sum().sort_values(ascending = False).head())","b38dcb26":"#creatiing X_train and y_train\nX_train= new_train.drop('Survived', axis = 1)\ny_train = new_train['Survived']\n\n#creatiing X_test\nX_test= new_test.copy()","a453a8a7":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)","223763d3":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)","fa58138d":"y_pred = model.predict(X_test).astype(np.int)","f64648dc":"output = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': y_pred})\noutput.to_csv('submission.csv', index=False)","9db9ad1e":"output.head()","4347a0cb":"# Titanic Survival Prediction\n\nThe solution is divided into the following sections: \n- Importing libraries and reading datasets \n- Data understanding \n- Data cleaning and preparation\n- Model building and prediction","56d84c82":"#### Dropping columns ","fdf09d41":"#### Imputing Missing Values","0e22e7c8":"#### Binning Method: `Age` and `Fare`","8144a3a2":"There is no missing values in any columns except column `Survived` which has been created while merging train and test dataset and will be deleted when we start model building","ab642009":"#### Finding Missing Values","d55552a2":"Finally, we do not have any missing values and data preprocessing is done.","e5903a88":"### 1. Importing libraries and reading datasets","fbcfa776":"### 3. Data cleaning and preparation","07051f79":"### 4. Model Building and prediction","b48e62ab":"`Let's start with mode building`","6e8e771c":"#### Creating Dummy Variables","a0b85769":"### 2. Data understanding ","568e9740":"#### Creating Derived Variables","b0705278":"#### Logistic Regression"}}