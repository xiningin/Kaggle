{"cell_type":{"1e233b15":"code","9abe0dc7":"code","31bd49a6":"code","019c73c2":"code","c86cd1bd":"code","dbb0b9a4":"code","c06e48db":"code","061423eb":"code","bc57fc32":"code","fe8c72d0":"code","917d9ff9":"code","88df674e":"code","b824fb2d":"code","930f3453":"code","7299db25":"code","c2df9cb2":"code","4759d0bc":"code","67d1c118":"code","2fa44783":"code","69a5f603":"code","188fda03":"code","78e15bc1":"code","025bb6f6":"code","133a6f51":"code","58e07ece":"code","ea4c5ce5":"code","3d0eeed7":"code","6c1de316":"markdown","0b30cd49":"markdown","7233449b":"markdown","30fd6cc9":"markdown","107cc41c":"markdown","db8e6234":"markdown","704487a5":"markdown","dace064b":"markdown","311f3030":"markdown","607c3851":"markdown"},"source":{"1e233b15":"!pip install iterative-stratification","9abe0dc7":"import os\n\nimport math\nimport openslide\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom tqdm import tqdm\nfrom joblib import Parallel, delayed\nfrom matplotlib import pyplot as plt\nfrom PIL import Image, ImageChops\n\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","31bd49a6":"BASE_DIR = '\/kaggle\/input\/prostate-cancer-grade-assessment'\nDATA_DIR = os.path.join(BASE_DIR, 'train_images')","019c73c2":"%%time\ntrain_df = pd.read_csv(os.path.join(BASE_DIR, 'train.csv'))\ntest_df = pd.read_csv(os.path.join(BASE_DIR, 'test.csv'))\nsample_sub_df = pd.read_csv(os.path.join(BASE_DIR, 'sample_submission.csv'))","c86cd1bd":"train_df.head()","dbb0b9a4":"img = os.path.join(DATA_DIR, f'{train_df[\"image_id\"].iloc[5]}.tiff')\nimg = openslide.OpenSlide(img)\npatch = img.read_region((0, 0), 2, img.level_dimensions[-1])\nimg.close()\npatch","c06e48db":"crop_size = 256  # Size of resultant images\ncrop_level = 2  # The level of slide used to get the images (you can use 0 to get very high resolution images)\ndown_samples = [1, 4, 16]  # List of down samples available in any tiff image file","061423eb":"def split_image(openslide_image):\n    \"\"\"\n    Splits the given image into multiple images if 256x256\n    \"\"\"\n    \n    # Get the size of the given image\n    width, height = openslide_image.level_dimensions[crop_level]\n\n    # Get the dimensions of level 0 resolution, as it's required in \"read_region()\" function\n    base_height = down_samples[crop_level] * height  # height of level 0\n    base_width = down_samples[crop_level] * width  # width of level 0\n\n    # Get the number of smaller images \n    h_crops = math.ceil(width \/ crop_size)\n    v_crops = math.ceil(height \/ crop_size)\n\n    splits = []\n    for v in range(v_crops):\n        for h in range(h_crops): \n            x_location = h*crop_size*down_samples[crop_level]\n            y_location = v*crop_size*down_samples[crop_level]\n\n            patch = openslide_image.read_region((x_location, y_location), crop_level, (crop_size, crop_size))\n\n            splits.append(patch)\n    return splits, h_crops, v_crops","bc57fc32":"img = os.path.join(DATA_DIR, f'{train_df[\"image_id\"].iloc[5]}.tiff')\nimg = openslide.OpenSlide(img)\ncrops, h_crops, v_crops = split_image(img)\nimg.close()","fe8c72d0":"fig, ax = plt.subplots(nrows=v_crops, ncols=h_crops, figsize=(12, 12))\ncount=0\nfor row in ax:\n    for col in row:\n        patch = crops[count]\n        col.grid(False)\n        col.set_xticks([])\n        col.set_yticks([])\n        col.imshow(patch)\n        count += 1\nplt.show()","917d9ff9":"def get_emptiness(arr):\n    total_ele = arr.size\n    white_ele = np.count_nonzero(arr == 255) + np.count_nonzero(arr == 0)\n    return white_ele \/ total_ele","88df674e":"ignore_threshold = 0.95  # If the image is more than 95% empty, consider it as white and ignore","b824fb2d":"def filter_white_images(images):\n    non_empty_crops = []\n    for image in images:\n        image_arr = np.array(image)[...,:3]  # Discard the alpha channel\n        emptiness = get_emptiness(image_arr)\n        if emptiness < ignore_threshold:\n            non_empty_crops.append(image)\n    return non_empty_crops","930f3453":"non_empty_crops = filter_white_images(crops)","7299db25":"len(non_empty_crops)","c2df9cb2":"for f in non_empty_crops:\n    display(f)","4759d0bc":"# train_df = train_df.loc[:20]","67d1c118":"!mkdir train_images","2fa44783":"dataset = []\ndef create_dataset(count):\n    img = os.path.join(DATA_DIR, f'{train_df[\"image_id\"].iloc[count]}.tiff')\n    img = openslide.OpenSlide(img)\n    crops, _, _ = split_image(img)\n    img.close()\n\n    non_empty_crops = filter_white_images(crops)\n    image_id = train_df['image_id'].iloc[count]\n\n    for index, img in enumerate(non_empty_crops):\n        img_metadata = {}\n        img = img.convert('RGB')\n\n        img_metadata['image_id'] = f'{image_id}_{index}'\n        img_metadata['data_provider'] = train_df['data_provider'].iloc[count]\n        img_metadata['isup_grade'] = train_df['isup_grade'].iloc[count]\n        img_metadata['gleason_score'] = train_df['gleason_score'].iloc[count]\n\n        img.save(f'train_images\/{image_id}_{index}.jpg', 'JPEG', quality=100, optimize=True, progressive=True)\n        dataset.append(img_metadata)\n    return dataset","69a5f603":"dataset = Parallel(n_jobs=8)(delayed(create_dataset)(count) for count in tqdm(range(len(train_df))))\ndataset = [item for sublist in dataset for item in sublist]\n\ndataset = pd.DataFrame(dataset)","188fda03":"dataset.loc[:, 'kfold'] = -1\n\n# Randomly shuffle the dataset\ndataset = dataset.sample(frac=1).reset_index(drop=True)\n\nX = dataset[['image_id', 'data_provider']].values\ny = dataset[['isup_grade', 'gleason_score']].values\n\nmskf = MultilabelStratifiedKFold(n_splits=5)\n\nfor fold, (train_idx, val_idx) in enumerate(mskf.split(X, y)):\n    dataset.loc[val_idx, 'kfold'] = fold\n\nprint(dataset.kfold.value_counts())","78e15bc1":"dataset","025bb6f6":"dataset.to_csv('train.csv', index=False)","133a6f51":"import zipfile\ndef zipdir(path, ziph):\n    # ziph is zipfile handle\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            ziph.write(os.path.join(root, file))\n\nzipf = zipfile.ZipFile('train.zip', 'w', zipfile.ZIP_DEFLATED)\nzipdir('\/kaggle\/working\/train_images', zipf)\nzipf.close()","58e07ece":"!mv train.zip train","ea4c5ce5":"!rm -rf \/kaggle\/working\/train_images","3d0eeed7":"!ls","6c1de316":"This looks promising. The only thing remaining is to discard the 'white' images. Let's do it.","0b30cd49":"The below code will crop the given image and will store the result in an array","7233449b":"Let's first read and visualize the training image which we are going to use as an example in this notebook.","30fd6cc9":"## Creating k-folds","107cc41c":"## Idea\nThe purpose of this notebook is to explain the procedure of dividing the given large image with any shape, into multiple 256x256 fixed sized images, which can be further used to train a model with fixed input size. \n\nAfter dividing the given image into multiple smaller images, there will be many images which has very small details or in many cases no details (fully white image), we'll discard those images as they are not useful for training models.","db8e6234":"Let's plot all the crops separately and verify that all the crops have meaningful details and are not empty.","704487a5":"Now as we have all the smaller images available. Let's plot all of them and verify out result by comparing it to original image.","dace064b":"Here are some constants' definition, which you can modify if you want higher dimensional images instead of 256x256 or you want to use higher resolution images.","311f3030":"Now let's do the above procedure for entire training dataset and save the resultant dataset so that it can be used further in training the models.","607c3851":"Cheers! We divided a large image into multiple images of size 256x256. Repeat this procedure on each of the training image to get the fixed sized images without lossing any data. "}}