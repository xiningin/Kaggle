{"cell_type":{"f900cbef":"code","2a2328ad":"code","6f884008":"code","8c5801b6":"code","06c24f80":"code","68724f46":"code","2d805dca":"code","a59ac188":"code","b400509a":"code","9ef3c027":"code","d0e69ec0":"code","811243f5":"markdown","1c354b4e":"markdown","fa15bab0":"markdown","39f1fb70":"markdown","d89490c6":"markdown","1ae3df44":"markdown","55922711":"markdown","9d1a4386":"markdown","38e91f87":"markdown","3282aebc":"markdown","cd978f32":"markdown"},"source":{"f900cbef":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","2a2328ad":"dataset = pd.read_csv(\"..\/input\/social-network-ads\/Social_Network_Ads.csv\")\nX = dataset.iloc[:, 0:-1]\ny = dataset.iloc[:, -1]","6f884008":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","8c5801b6":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","06c24f80":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5, metric = \"minkowski\", p = 2)\nknn.fit(X_train, y_train)","68724f46":"print(knn.predict(sc.transform([[30, 87000]])))","2d805dca":"y_pred = knn.predict(X_test)\ny_test = np.array(y_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","a59ac188":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\ncm = confusion_matrix(y_pred, y_test)\naccuracy = accuracy_score(y_pred, y_test)\naccuracy","b400509a":"print(classification_report(y_pred, y_test))","9ef3c027":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 1),\n                     np.arange(start = X_set[:, 1].min() - 10, stop = X_set[:, 1].max() + 10, step = 1))\nplt.contourf(X1, X2, knn.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n  plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title(\"K-NN (Training data)\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Estimated Salary\")\nplt.legend()\nplt.show()","d0e69ec0":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_test), y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 1),\n                     np.arange(start = X_set[:, 1].min() - 10, stop = X_set[:, 1].max() + 10, step = 1))\nplt.contourf(X1, X2, knn.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n  plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title(\"K-NN (Test data)\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Estimated Salary\")\nplt.legend()\nplt.show()","811243f5":"**Importing and analyzing dataset(s)**","1c354b4e":"**Importing libraries**","fa15bab0":"**Confusion matrix and Accuracy score**","39f1fb70":"**Predicting results on test data**","d89490c6":"**Predicting a new result**","1ae3df44":"**Classification Report**","55922711":"**Spliting dataset into Train and test set**","9d1a4386":"**Training data on KNN Classifier**","38e91f87":"**Feature Scaling**","3282aebc":"**Visualzing results on Training data**","cd978f32":"**Data Visualizing using test data**"}}