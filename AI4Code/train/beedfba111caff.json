{"cell_type":{"23b800bf":"code","0f1b15ca":"code","29ad1922":"code","b34238b7":"code","bc51e6af":"code","092ba12e":"code","0dfe528d":"code","4580dc6b":"code","99924b02":"code","6508c536":"code","fcadc48c":"code","8407003f":"code","a62018f7":"code","63b00333":"code","b8ea782c":"code","2b305a8f":"code","bd83169b":"code","6cbdd96b":"code","1c4a86d2":"markdown","710d566e":"markdown","0fd802d8":"markdown","b1b5b8f7":"markdown","8f649769":"markdown","54f7f5f8":"markdown","28edefa1":"markdown","43b15149":"markdown","d8a0b1d1":"markdown"},"source":{"23b800bf":"import numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.preprocessing import LabelEncoder\n","0f1b15ca":"mushroom = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv') ","29ad1922":"mushroom.head()","b34238b7":"mushroom.info()","bc51e6af":"mushroom.isna().sum()     #detecting missing values \n","092ba12e":"mushroom['class'].value_counts()         #numbers of edible and poisonous mushrooms","0dfe528d":"for i in mushroom.columns:\n    sns.countplot(x=i, data=mushroom, palette =\"BuPu_r\")   #bar charts showing numbers of all features\n    plt.show()","4580dc6b":"colors = [\"RosyBrown\", \"IndianRed\"]\nmushroom['veil-type'].value_counts().plot.pie(textprops={'color':\"w\"},autopct='%1.1f%%',figsize=(7,5),colors=colors)\nplt.legend(labels=mushroom['veil-type'].value_counts().index, loc=\"best\",bbox_to_anchor=(1, 0.25, 0.5, 0.5))\nplt.title(\"Veil Type Distribution \".format(i),fontsize=17,ha='right') \nplt.show()    #pie chart showing veil-type distribution","99924b02":"mushroom.drop('veil-type', inplace=True, axis=1) # veil-type column dropping\n","6508c536":"mushroom.describe()    # after dropping we have 22 columns now","fcadc48c":"sns.countplot('cap-shape',hue='class' ,data=mushroom ,palette =\"BuPu_r\")            \nplt.show()             #bar chart showing whether mushrooms are poisonous according to their cap-shape","8407003f":"pclass = mushroom[(mushroom['class']== 'p')]\nsns.countplot('class',hue='cap-shape' ,data=pclass ,palette =\"RdBu_r\")       \n#bar chart showing cap shapes of just poisonous mushrooms\n","a62018f7":"colors = [\"#1F618D\", \"#2471A3\", \"#2980B9\", \"#5499C7\",\"#7FB3D5\",\"#A9CCE3\",\"#D4E6F1\",\"#E8DAEF\",\"#D2B4DE\",\"#BB8FCE\"]\nfor i in mushroom.columns:\n    mushroom[i].value_counts().plot.pie(textprops={'color':\"w\"},autopct='%1.1f%%',figsize=(7,5),colors=colors)\n    plt.legend(labels=mushroom[i].value_counts().index, loc=\"best\",bbox_to_anchor=(1, 0.25, 0.5, 0.5))\n    plt.title(\"{} Distribution \".format(i),fontsize=17,ha='right')\n    plt.show()    #pie charts showing percentages of all features","63b00333":"sns.countplot('class',hue='habitat',data=mushroom,palette =\"BuPu_r\")   \nplt.show()             #Relationship of mushrooms habitats to whether they are poisonous or not       ","b8ea782c":"colors = [\"RosyBrown\", \"AntiqueWhite\"]\npclass['gill-size'].value_counts().plot.pie(textprops={'color':\"b\"},autopct='%1.1f%%',figsize=(7,5),colors=colors)\nplt.legend(labels=mushroom['gill-size'].value_counts().index, loc=\"best\",bbox_to_anchor=(1, 0.25, 0.5, 0.5))\nplt.title(\"Gill Size Distribution \".format(i),fontsize=17,ha='right')\nplt.show()\n#pie chart showing distribution of poisonous mushrooms according to gill-size","2b305a8f":"mushroom['ring-type'].hist(color='black',bins=40,figsize=(8,4))  \n # histogram showing the distribution of mushroom numbers according to the ring-type","bd83169b":"le = LabelEncoder()\n\ndf_encoded = mushroom.apply(le.fit_transform)\n\ny = df_encoded.iloc[:, :1].values\nX = df_encoded.iloc[:, 1:].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\naccryArray=[]","6cbdd96b":"for n in range(2,20):\n    classifier = KNeighborsClassifier(n_neighbors=n)\n    classifier.fit(X_train, y_train.ravel())\n    y_pred = classifier.predict(X_test)\n    predict = metrics.accuracy_score(y_test, y_pred)\n    #print(\"For n=\",n,\" Accuracy:\",predict)\n    accryArray.append(predict)\n\nplt.scatter([i for i in range(2,20)],accryArray)\nplt.plot([i for i in range(2,20)],accryArray)\nplt.show()\n","1c4a86d2":"<p> <font face=\"tahoma\" size=\"4\" color=\"Brown\">K-Nearest Neighbors Method <\/p>","710d566e":"<p> <font face=\"tahoma\" size=\"4\" color=\"Brown\">Split the data into train dataset and test data set <\/p>","0fd802d8":"<p> <font face=\"tahoma\" size=\"4\" color=\"Brown\">Import libraries <\/p>","b1b5b8f7":"<p> <font face=\"tahoma\" size=\"4\" color=\"Brown\">We have <b>22<\/b> features (independent variables) and one dependent variable (class).<\/p>","8f649769":"---\n   <p> <font face=\"tahoma\" size=\"3\" color=\"Brown\"><b> Attribute Information <\/b><\/p>\n    <ol> <font face=\"tahoma\" size=\"3\" color=\"Brown\">\n        <li>classes: edible=e, poisonous=p<\/li>\n        <li>cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s<\/li>\n        <li>cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n        <li>cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n        <li>bruises: bruises=t,no=f\n        <li>odor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n        <li>gill-attachment: attached=a,descending=d,free=f,notched=n\n        <li>gill-spacing: close=c,crowded=w,distant=d\n        <li>gill-size: broad=b,narrow=n\n        <li>gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g,    green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n        <li>stalk-shape: enlarging=e,tapering=t\n        <li>stalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n        <li>stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n        <li>stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n        <li>stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n        <li>stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n        <li>veil-type: partial=p,universal=u\n        <li>veil-color: brown=n,orange=o,white=w,yellow=y\n        <li>ring-number: none=n,one=o,two=t\n        <li>ring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n        <li>spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n        <li>population: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n        <li>habitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d<\/li>\n    <\/ol>\n","54f7f5f8":"---\n<center><h1><font face=\"Harrington\" size=\"20\" color=\"Brown\"> <b>Mushroom Classification <\/b><h1><center>\n\n\n![](https:\/\/s3-eu-central-1.amazonaws.com\/hermanns-website-2\/wp-content\/uploads\/2018\/11\/09142320\/florian-van-duyn-383221-unsplash_resized.jpg)    \n\n---","28edefa1":"<p> <font face=\"tahoma\" size=\"5\" color=\"Brown\">Machine Learning Models <\/p>","43b15149":"<p> <font face=\"tahoma\" size=\"4\" color=\"Brown\">We have <b>21<\/b> features (independent variables) and one dependent variable (class).<\/p>","d8a0b1d1":"<p> <font face=\"tahoma\" size=\"4\" color=\"Brown\"><b>veil-type<\/b> feature sholud dropped because all values are the same and would carry no influence in the analysis.<\/p>"}}