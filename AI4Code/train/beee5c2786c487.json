{"cell_type":{"2338d3e6":"code","fc543fa7":"code","ba61ef7a":"code","b7c2b18b":"code","2d58c0ce":"code","4d7053d0":"code","e6184325":"code","8f1b719a":"code","64b7fc47":"code","330911b4":"code","ca526e93":"code","9d93f6ad":"code","514eccea":"code","9b01eeac":"code","ba4ae4d9":"code","d80b58c8":"code","c274cf24":"code","b1f0d2c4":"code","abae2b79":"markdown","74405402":"markdown","156d682d":"markdown","e94bd0bd":"markdown","704bf2d5":"markdown"},"source":{"2338d3e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc543fa7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline \n\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport tensorflow\nfrom keras.layers import LSTM, Dense, Activation, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam","ba61ef7a":"test = pd.read_csv('..\/input\/gooogle-stock-price\/Google_Stock_Price_Test.csv')\n\ntrain = pd.read_csv('..\/input\/gooogle-stock-price\/Google_Stock_Price_Train.csv')","b7c2b18b":"train.head(120)","2d58c0ce":"train_Set = train.iloc[:,1:2].values\n\ntrain_Set","4d7053d0":"minmaxsc = MinMaxScaler()\n\ntrain_Set = minmaxsc.fit_transform(train_Set)","e6184325":"len(train_Set)","8f1b719a":"x_train = []\ny_train = []\n\nfor i in range(120,len(train_Set)):\n    x_train.append(train_Set[i-120:i,0])\n    y_train.append(train_Set[i,0])\n    \nx_train = np.array(x_train)\ny_train = np.array(y_train)","64b7fc47":"x_train","330911b4":"y_train","ca526e93":"x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))","9d93f6ad":"model = Sequential()\n\nmodel.add(LSTM(units = 100,return_sequences = True,input_shape = (x_train.shape[1],1)))\nmodel.add(Dropout(0.25))\n\nmodel.add(LSTM(units = 100,return_sequences = True))\nmodel.add(Dropout(0.25))\n\nmodel.add(LSTM(units = 100,return_sequences = True))\nmodel.add(Dropout(0.25))\n\nmodel.add(LSTM(units = 100,return_sequences = True))\nmodel.add(Dropout(0.25))\n\nmodel.add(LSTM(units = 100))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(1))","514eccea":"opt = Adam(lr=0.001)\nmodel.compile(loss = 'mean_squared_error',optimizer = opt)","9b01eeac":"history = model.fit(x_train,y_train,epochs = 100,batch_size = 32)","ba4ae4d9":"plt.plot(history.history['loss']) \nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.show()","d80b58c8":"real_stock_price = test.iloc[:,1:2].values","c274cf24":"dataset = pd.concat((train['Open'],test['Open']), axis = 0)\ninputs = dataset[len(dataset) - len(test) - 120:].values\ninputs = inputs.reshape(-1,1)\ninputs = minmaxsc.transform(inputs)\n\nx_test = []\nfor i in range(120,140):\n    x_test.append(inputs[i-120:i,0])\nx_test = np.array(x_test)\nx_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))\n\npredict = model.predict(x_test)\npredict = minmaxsc.inverse_transform(predict)","b1f0d2c4":"plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')\nplt.plot(predict, color = 'blue', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","abae2b79":"# Bonjour les amis\n(hello friends in french)\n \nToday we will Predict Stock price using RNN-LSTM ","74405402":"DO UPVOTE IF YOU LIKE THE NOTEBOOK.\nTHANK YOU","156d682d":"![maxresdefault.jpg](attachment:maxresdefault.jpg)","e94bd0bd":"DISCLAIMER : the future stocks prices are always independent of their past","704bf2d5":"1. Importing the dataset"}}