{"cell_type":{"5069946d":"code","2bc2d795":"code","ee6d5c0f":"code","e6284f08":"code","65cc7390":"code","d5ade483":"code","fcc24a19":"code","b239c172":"code","858c168f":"code","33f0c295":"code","85cfc3b5":"code","92884b9a":"code","2b066e94":"code","9372f058":"code","713bc6c7":"code","4d23c6c5":"code","f234de7d":"code","57a6babb":"code","a3729559":"code","0edc88de":"code","561d8470":"markdown","af46fc64":"markdown","4695416a":"markdown","910feebb":"markdown","586ba81c":"markdown","2ae18591":"markdown","7a67ced9":"markdown","3e239ec7":"markdown","6e29231a":"markdown"},"source":{"5069946d":"import numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom PIL import Image","2bc2d795":"import keras\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications import ResNet50\nfrom keras.applications.resnet50 import preprocess_input\nfrom keras import Model, layers\nfrom keras.models import load_model, model_from_json","ee6d5c0f":"keras.__version__  # should be 2.2.2","e6284f08":"import tensorflow as tf\ntf.__version__  # should be 1.10.x","65cc7390":"import PIL\nPIL.__version__  # should be 5.2.0","d5ade483":"# path for Kaggle kernels\ninput_path = \"..\/input\/alien_vs_predator_thumbnails\/data\/\"","fcc24a19":"train_datagen = ImageDataGenerator(\n    shear_range=10,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    preprocessing_function=preprocess_input)\n\ntrain_generator = train_datagen.flow_from_directory(\n    input_path + 'train',\n    batch_size=32,\n    class_mode='binary',\n    target_size=(224,224))\n\nvalidation_datagen = ImageDataGenerator(\n    preprocessing_function=preprocess_input)\n\nvalidation_generator = validation_datagen.flow_from_directory(\n    input_path + 'validation',\n    shuffle=False,\n    class_mode='binary',\n    target_size=(224,224))","b239c172":"conv_base = ResNet50(\n    include_top=False,\n    weights='imagenet')\n\nfor layer in conv_base.layers:\n    layer.trainable = False","858c168f":"\n\nx = conv_base.output\nx = layers.GlobalAveragePooling2D()(x)\nx = layers.Dense(128, activation='relu')(x) \npredictions = layers.Dense(2, activation='softmax')(x)\nmodel = Model(conv_base.input, predictions)","33f0c295":"optimizer = keras.optimizers.Adam()\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer=optimizer,\n              metrics=['accuracy'])","85cfc3b5":"history = model.fit_generator(generator=train_generator,\n                              steps_per_epoch=347 \/\/ 32,  # added in Kaggle\n                              epochs=3,\n                              validation_data=validation_generator,\n                              validation_steps=10  # added in Kaggle\n                             )","92884b9a":"!mkdir models\n!mkdir models\/keras","2b066e94":"# save\nmodel.save('models\/keras\/model.h5')","9372f058":"# load\nmodel = load_model('models\/keras\/model.h5')","713bc6c7":"# save\nmodel.save_weights('models\/keras\/weights.h5')\nwith open('models\/keras\/architecture.json', 'w') as f:\n        f.write(model.to_json())","4d23c6c5":"# load\nwith open('models\/keras\/architecture.json') as f:\n    model = model_from_json(f.read())\nmodel.load_weights('models\/keras\/weights.h5')","f234de7d":"validation_img_paths = [\"validation\/alien\/11.jpg\",\n                        \"validation\/alien\/22.jpg\",\n                        \"validation\/predator\/33.jpg\"]\nimg_list = [Image.open(input_path + img_path) for img_path in validation_img_paths]","57a6babb":"validation_batch = np.stack([preprocess_input(np.array(img.resize((224,224))))\n                             for img in img_list])","a3729559":"pred_probs = model.predict(validation_batch)\npred_probs","0edc88de":"fig, axs = plt.subplots(1, len(img_list), figsize=(20, 5))\nfor i, img in enumerate(img_list):\n    ax = axs[i]\n    ax.axis('off')\n    ax.set_title(\"{:.0f}% Alien, {:.0f}% Predator\".format(100*pred_probs[i,0],\n                                                            100*pred_probs[i,1]))\n    ax.imshow(img)","561d8470":"Note:  there was an error with the above on Kaggle (even though it works on my computer, same versions of Keras and TF):\n\n> AttributeError: 'Node' object has no attribute 'output_masks'\n\nSee [this issue](https:\/\/github.com\/keras-team\/keras\/issues\/10907).\nAfter reinstalling TensorFlow in Kaggle (packages -> tensorflow), no error.","af46fc64":"### 3. Create the network","4695416a":"### 6. Make predictions on sample test images","910feebb":"### 5. Save and load the model\n\nNote: this is for demonstration. You don't need to to so, if you intend to run predictions within this notebook.","586ba81c":"#### B. Architecture in JSON,  weights in HDF5","2ae18591":"### 2. Create Keras data generators ","7a67ced9":"### 4. Train the model","3e239ec7":"For the general context, see  also:\n\n* A deepsense.ai blog post [Keras vs. PyTorch - Alien vs. Predator recognition with transfer learning](https:\/\/deepsense.ai\/keras-vs-pytorch-avp-transfer-learning) in which we compare and contrast Keras and PyTorch approaches.\n* Repo with code: [github.com\/deepsense-ai\/Keras-PyTorch-AvP-transfer-learning](https:\/\/github.com\/deepsense-ai\/Keras-PyTorch-AvP-transfer-learning).\n* Free event: [upcoming webinar (10 Oct 2018)](https:\/\/www.crowdcast.io\/e\/KerasVersusPyTorch\/register), in which we walk trough the code (and you will be able to ask questions).\n\n### 1. Import dependencies","6e29231a":"#### A. Architecture and weights in HDF5"}}