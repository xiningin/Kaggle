{"cell_type":{"01100400":"code","9d8efec5":"code","ac05169a":"code","51756219":"code","d8c26f97":"code","6eae8608":"code","88bf4e3c":"code","81f2af17":"code","aa08b991":"code","c40536a4":"code","5a68a5bf":"code","d6a23408":"code","817fcb23":"code","9fe05f07":"code","98569579":"code","23a14dcc":"code","2cad2ac2":"code","2ba4e77d":"code","ec4fd20b":"code","97fea9ca":"code","f8ef8850":"code","519d3a4d":"code","1e867e4d":"code","217ad244":"code","c618e84d":"code","94310d27":"code","d6ec9c21":"code","5588aa13":"code","2ea83404":"code","435995fe":"code","6eee2842":"code","a302d4f9":"code","de1d598f":"code","bf206617":"code","7e6fd227":"code","9a3f214b":"code","fc29305e":"code","5e8e6c38":"code","5a9cefa3":"markdown"},"source":{"01100400":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder  ###for encode a categorical values\nfrom sklearn.model_selection import train_test_split  ## for spliting the data\nfrom sklearn.preprocessing import StandardScaler\nfrom lightgbm import LGBMRegressor  \nfrom catboost import CatBoostRegressor\nimport seaborn as sns","9d8efec5":"train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.head()","ac05169a":"train.isnull().any()","51756219":"miss_col=[col for col in train.columns if train[col].isnull().any()]\nprint(miss_col)","d8c26f97":"sns.set_style(\"whitegrid\")\nmissing = train.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar()","6eae8608":"for col in miss_col:\n    train[col]=train[col].fillna(train[col].mode()[0])\n    #train[col]=train[col].fillna(train[col].mean())","88bf4e3c":"train.isnull().sum()","81f2af17":"train.info()","aa08b991":"LE=LabelEncoder()\nfor col in train.select_dtypes(include=['object']):\n    train[col]=LE.fit_transform(train[col])","c40536a4":"train.head()","5a68a5bf":"#standardizing data\nsaleprice_scaled = StandardScaler().fit_transform(train['SalePrice'][:,np.newaxis])\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","d6a23408":"# Adding total sqfootage feature \ntrain['TotalSF'] = train['TotalBsmtSF'] + train['1stFlrSF'] + train['2ndFlrSF']\nprint(train)\ntrain.drop(['TotalBsmtSF','1stFlrSF','2ndFlrSF'],axis=1)","817fcb23":"test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.isnull().sum()","9fe05f07":"miss_test=[col for col in test.columns if test[col].isnull().any()]\nprint(miss_test)","98569579":"for col in miss_test:\n    test[col]=test[col].fillna(test[col].mode()[0])","23a14dcc":"test.head()","2cad2ac2":"for col in test.select_dtypes(include=['object']):\n    test[col]=LE.fit_transform(test[col])\n\ntest.head()","2ba4e77d":"# Adding total sqfootage feature \ntest['TotalSF'] = test['TotalBsmtSF'] + test['1stFlrSF'] + test['2ndFlrSF']\nprint(test)\ntest.drop(['TotalBsmtSF','1stFlrSF','2ndFlrSF'],axis=1)","ec4fd20b":"X_train=train.drop([\"SalePrice\"],axis=1)\nY_train=train[\"SalePrice\"]\nprint(X_train)","97fea9ca":"from sklearn.model_selection import train_test_split\nx_train , x_test , y_train , y_test = train_test_split(X_train , Y_train ,test_size = 0.3,random_state = 3)","f8ef8850":" lightgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=8,\n                                       learning_rate=0.0385, \n                                       n_estimators=3500,\n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                       verbose= 0,\n                                       ) ","519d3a4d":"lightgbm1 = LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=5000,\n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                       verbose=-1,\n                                       #min_data_in_leaf=2,\n                                       #min_sum_hessian_in_leaf=11\n                                       )\n                                       \n","1e867e4d":"Catmodel= CatBoostRegressor(iterations=20, learning_rate=1, depth=3, verbose= 0)","217ad244":"#from sklearn.linear_model import LogisticRegression\n\n#model = LogisticRegression()\n#model.fit(X_train, Y_train)\n#model.score(X_test, Y_test)","c618e84d":"Catmodel.fit(x_train,y_train)","94310d27":"cs1 = Catmodel.score(x_train,y_train)\nprint(cs1)","d6ec9c21":"cs2 = Catmodel.score(x_test,y_test)\nprint(cs2)","5588aa13":"lightgbm.fit(x_train,y_train)\nlightgbm1.fit(x_train,y_train)\n","2ea83404":"ls1 = lightgbm.score(x_train,y_train)\nprint(ls1)","435995fe":"lg1 = lightgbm1.score(x_train,y_train)\nprint(lg1)","6eee2842":"ls2 = lightgbm.score(x_test,y_test)\nprint(ls2)","a302d4f9":"lg2 = lightgbm1.score(x_test,y_test)\nprint(lg2)","de1d598f":"Catmodel.fit(X_train,Y_train)","bf206617":"lightgbm.fit(X_train,Y_train)\nlightgbm1.fit(X_train,Y_train)\n","7e6fd227":" \nprediction_lightgbm = lightgbm.predict(test)\nprediction_lightgbm1 = lightgbm1.predict(test)\nprint('Ran')","9a3f214b":"prediction_catbooster = Catmodel.predict(test)","fc29305e":"#submit1=pd.DataFrame()\n#submit1['Id']=test['Id']\n#submit['SalePrice']=prediction_lightgbm\n#submit1['SalePrice']=prediction_catbooster\n#submit1.to_csv('submission.csv',index=False)\n#print('Ran')","5e8e6c38":"submit=pd.DataFrame()\nsubmit['Id']=test['Id']\n#submit['SalePrice']=prediction_lightgbm\nsubmit['SalePrice']=prediction_lightgbm1\n#submit['SalePrice']=prediction_catbooster\nsubmit.to_csv('submission.csv',index=False)\nprint('Ran')","5a9cefa3":"Most of times missing values imply 0, example no garage (GaragCond, GarageType,GarageYrBlt)"}}