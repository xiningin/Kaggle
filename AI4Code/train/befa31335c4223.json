{"cell_type":{"03d0845e":"code","57566bc5":"code","e59edc4e":"code","ff525cbe":"code","740d352b":"code","5090acaa":"code","7b339e49":"code","c253d488":"code","5a98e6ec":"code","64f24071":"code","fd57e9e4":"code","9fcc484c":"code","9ac3f938":"code","108ecba2":"code","56783987":"code","4d4307f4":"code","b922df51":"code","0c174e65":"code","7bb1fb12":"code","a1c45fba":"code","f858f984":"code","130bd9fd":"code","11b4aaa7":"code","ab12ae3d":"code","66bc64f3":"code","bd9cf1ee":"code","d6bea21d":"markdown","b590e9b5":"markdown","94f9576b":"markdown","d38151a7":"markdown","661abaf8":"markdown","5eaaf070":"markdown","faaeb258":"markdown","d9edbe63":"markdown","854f2528":"markdown","73b482e6":"markdown","41901ae5":"markdown","80c2890a":"markdown"},"source":{"03d0845e":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","57566bc5":"print(os.listdir('..\/input'))","e59edc4e":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","ff525cbe":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","740d352b":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","5090acaa":"nRowsRead = None # specify 'None' if want to read whole file\n# survey_results_public.csv has 88883 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('..\/input\/survey_results_public.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'survey_results_public.csv'\nnRow, nCol = df1.shape\n\n\nprint(f'There are {nRow} rows and {nCol} columns')","7b339e49":"# Clean up\ndef getEdu(e):\n    if 'I never completed any formal education' == e:\n        return 0\n    if 'Primary\/elementary school' == e:\n        return 1\n    if 'Secondary school (e.g. American high school, German Realschule or Gymnasium, etc.)' == e:\n        return 2\n    if 'Some college\/university study without earning a degree' == e:\n        return 3\n    if 'Associate degree' == e:\n        return 4\n    if 'Bachelor\u2019s degree (BA, BS, B.Eng., etc.)' == e:\n        return 5\n    if 'Master\u2019s degree (MA, MS, M.Eng., MBA, etc.)' == e:\n        return 6\n    if 'Other doctoral degree (Ph.D, Ed.D., etc.)' == e:\n        return 7\n    if 'Professional degree (JD, MD, etc.)' == e:\n        return 8\n    return -1\n\ndef getJob(j):\n    if 'Less than a year ago' == j:\n        return 1\n    if '1-2 years ago' == j:\n        return 2\n    if '3-4 years ago' == j:\n        return 3\n    if 'More than 4 years ago' == j:\n        return 4\n    if 'NA - I am an independent contractor or self employed' == j:\n        return 0\n    return -1\n\n\n\ndf1['EdLev']=df1['EdLevel'].map(lambda x:  getEdu(x) )\ndf1['LastHireInt']=df1['LastHireDate'].map(lambda x:  getJob(x) )\ndf1['YearsCode']=pd.to_numeric(df1.YearsCode, errors='coerce').fillna(0).astype(np.int64)\ndf1['YearsCodePro']=pd.to_numeric(df1.YearsCodePro, errors='coerce').fillna(0).astype(np.int64)\n","c253d488":"df1['EdLevel'].value_counts()","5a98e6ec":"df1['LastHireDate'].value_counts()","64f24071":"df1['LastHireInt'].value_counts()","fd57e9e4":"  df1[(df1.Age > 51) & (df1.Age < 57)]['LastHireInt'].hist(bins=20);","9fcc484c":"df1.head(5)","9ac3f938":"df1.Age.hist(bins=20);","108ecba2":"\ndf1.WorkWeekHrs[df1.WorkWeekHrs < 120].hist(bins=25);","56783987":"df1.WorkWeekHrs[df1.WorkWeekHrs < 120].describe()","4d4307f4":"df1.CompTotal[(df1.CompTotal < 300000) & (df1.CurrencyDesc == 'United States dollar' )].hist(bins=20);","b922df51":"df1.CompTotal[(df1.CompTotal < 400000) & (df1.CurrencyDesc == 'United States dollar' ) & (df1.Age > 50)].hist(bins=20);","0c174e65":"df1.YearsCodePro.hist(bins=20);","7bb1fb12":"df1['YearsCode']=pd.to_numeric(df1.YearsCode, errors='coerce').fillna(0).astype(np.int64)\ndf1.CompTotal[(df1.CompTotal < 400000) & (df1.CurrencyDesc == 'United States dollar' ) & (df1.Age > 50) & (df1.YearsCode > 20)].describe()","a1c45fba":"t=df1[['YearsCode','Age','YearsCodePro','YearsCode']]","f858f984":"# plotPerColumnDistribution(t, 10, 5)","130bd9fd":"# plotCorrelationMatrix(t,3)","11b4aaa7":"df1.head(3)","ab12ae3d":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf2 = pd.read_csv('..\/input\/survey_results_schema.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'survey_results_schema.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","66bc64f3":"pd.set_option('display.max_colwidth', -1)\ndf2.head(85)","bd9cf1ee":"#plotPerColumnDistribution(df2, 10, 5)","d6bea21d":"Let's take a quick look at what the data looks like:","b590e9b5":"There are 2 csv files in the current version of the dataset:\n","94f9576b":"****","d38151a7":"### Let's check 2nd file: ..\/input\/survey_results_schema.csv","661abaf8":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Edit Notebook\" button at the top of the kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","5eaaf070":"Let's take a quick look at what the data looks like:","faaeb258":"Distribution graphs (histogram\/bar graph) of sampled columns:","d9edbe63":"Distribution graphs (histogram\/bar graph) of sampled columns:","854f2528":"### Let's check 1st file: ..\/input\/survey_results_public.csv","73b482e6":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made. (Hey, I'm just a kerneling bot, not a Kaggle Competitions Grandmaster!)","41901ae5":"Now you're ready to read in the data and use the plotting functions to visualize the data.","80c2890a":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code."}}