{"cell_type":{"1b62c89c":"code","051242e0":"code","d9782589":"code","4135d97a":"code","b74c5eda":"code","494b1a1e":"code","cade56a8":"code","c0f93d77":"code","cedb75d4":"code","610967b5":"code","bae80ab3":"code","bfe85ad8":"code","f4c636fd":"code","d337009c":"code","9fc96dde":"code","8eb28b47":"code","550721ab":"markdown","4df50d7d":"markdown","24d791cf":"markdown","a69f6dae":"markdown","4b935763":"markdown","5036c267":"markdown","508a1728":"markdown","f5382f85":"markdown","64512fe1":"markdown","8f76b49d":"markdown","d16007fe":"markdown","577cf618":"markdown","6fba0c4d":"markdown","4e71a96c":"markdown","89c576a4":"markdown","b6ca4e52":"markdown","ae25b956":"markdown","a8b3dac4":"markdown","51d11f80":"markdown","f7d7d0e4":"markdown","ed815c58":"markdown"},"source":{"1b62c89c":"import pandas as pd\ndf=pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')","051242e0":"df.isna().sum()","d9782589":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nl1=df.columns\nfor i in l1:\n    df[i]=le.fit_transform(df[i])\n\n","4135d97a":"x=df.drop('class',axis=1)\ny=df['class']","b74c5eda":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0,stratify=y)\n","494b1a1e":"from sklearn.svm import SVC\nsvm=SVC(gamma='auto')#just initializing for ease here","cade56a8":"from sklearn.model_selection import GridSearchCV\ngsc=GridSearchCV(svm,{\n    'kernel':['linear','rbf'],\n    'C':[1,5,25,100],\n},cv=4,return_train_score=False)","c0f93d77":"gsc.fit(x,y)","cedb75d4":"gsc.cv_results_","610967b5":"results_overview=pd.DataFrame(gsc.cv_results_)\nresults_overview","bae80ab3":"results_tidy=results_overview[['param_C','param_kernel','mean_test_score']]\nresults_tidy","bfe85ad8":"gsc.best_params_","f4c636fd":"from sklearn.model_selection import RandomizedSearchCV","d337009c":"rscv=RandomizedSearchCV(svm,{\n                            'kernel':['linear','rbf'],\n                            'C':[1,5,25,100],\n                            },n_iter=3)","9fc96dde":"rscv.fit(x,y)","8eb28b47":"rscv.best_params_","550721ab":"Though it gave me almost every minute details of the process. However, Mr. X, my manager, cannot read this pretty easily. So, let's apply some magic of dataframes over it!\n","4df50d7d":"See, the values we manually observed are equivalent to what *gsv.best_params_* gave me. Cool!","24d791cf":"To keep things simple, I will use the dataset from [Kaggle Mushroom Classification ](http:\/\/www.kaggle.com\/uciml\/mushroom-classification). Other things are just easy. Let's move.","a69f6dae":"The best thing about GridSearchCV is that it shows me a pretty nice overview of the optimization process with the help of its methods. Let's try some...","4b935763":"It shows the hyperparam C with value 100 and 'linear' kernel gave me the best result. I can now clearly and undoubtedly use these values for fine tuning my hyperparams. Mr. X would be more than happy now\ud83d\ude0d!\n\nWait! Do I need to perform all these processes to see the best values? It is not THAT FUN. \nWe have a built-in method for that too!","5036c267":"Awesome! Now Mr. X can see each details nicely! Still, we don't need these all columns for our mere interpretation, do we? I think not. Let's trim it.","508a1728":"**THIS BRINGS US TO THE END OF LEARNING ABOUT HYPERPARAMETER OPTIMIZATION!**\n\n**PLEASE UPVOTE\ud83d\ude4f**","f5382f85":"Let's Split!","64512fe1":"Null values are always my headache. Are there any again?","8f76b49d":"Again! The output is same for this too, because it has nothing to do with the actual score. The only thing we are trying to prove is RandomizedSearchCV can be a better alternative for fast and large iterations.\n","d16007fe":"# **Hyperparameter Optimization**","577cf618":"Okay the major thing comes from here. Keep your eyes wide open!","6fba0c4d":"Hello! If you're wandering in search of a good piece of code that clears your confusion about Hyperparameter Optimization, I think all of your confusions end up here. Welcome\ud83d\ude09!","4e71a96c":"Cool. No null values. Let's waste no time!\ud83c\udfc3\u200d\u2642\ufe0f\ud83c\udfc3\u200d\u2640\ufe0f","89c576a4":"**Note that I used a new parameter named *n_iter* and assigned it value 3. This is nothing, but a variable that tells the algorithm to iterate 3 times only. Confused with what output it gives? Well this just gives 3 random scores(thatswhy called RandomizedSearchCV) That way we can solve the problem of memory consume! \nThere must be a puzzle roaming around your head.Lemme solve this.\nYou must have asked yourself, 'Hey! If it gives 3 random scores, does it mean that we get different scores everytime we run the code? Yes, try it yourself.\n**\n**\nStill, RandomizedSearchCV is better than Grid when you don't have any idea what sized value you should probably feed your hyperparams. Just iterate in n times and get the result like this!\n\ud83d\udc47\ud83d\udc47\ud83d\udc47****","b6ca4e52":"We are gonna use Support Vector Machine as our predictor algorithm as of now.(Keeping things simple!)","ae25b956":"Here GridSearchCV is the optimization algorithm we will use for now. Later in this notebook, I will talk about RandomSearchCV and show you the implementation of it too!","a8b3dac4":"Now if you don't know what I am doing, it is just a way of converting string type values into integers, cause ML algos don't like to play with string type values(the same way I don't like coffee!) I will use LabelEncoder() to encode the values to integers.","51d11f80":"**Yes! It didn't take me as much time as GridSearchCV would take for equal no of combinations, because as I already said, this just picks a random value. Let's see the output!**","f7d7d0e4":"We need to predict if the mushrooms are edible or not. For that let's separate them into x as data and y as target.","ed815c58":"It is all okay, but I felt kind of delay while running the code. What could be the reason of it? Maybe the possible combinations of 2 different kernel types and 4 different C values(that made 8 possible combinations!) filled my memory! \n\nWell, this seemed not that good when Mr. X needs to check the C values in large number. He says he is not fascinated by this. I nod.\n\nBut don't you worry Mr. X, I have a robust and fast algorithm to perform the work! Lets try RandomizedSearchCV.\n\n"}}