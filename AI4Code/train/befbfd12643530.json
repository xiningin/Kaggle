{"cell_type":{"7cfadfcf":"code","25d1aa93":"code","262c3063":"code","c106ce8a":"code","ebef6b7c":"code","96fd8b9d":"code","2b9e51da":"code","2e3f45a5":"code","b7e2b441":"code","2c19f016":"code","319a1607":"code","6fa67fdf":"code","37f499f6":"code","67547f75":"code","c1194a5d":"code","3248031e":"code","64572614":"code","d385cd89":"code","46ef96cd":"code","7387529c":"code","905b651b":"code","c6eda739":"code","0273a1b3":"code","93d6b8f5":"code","cf78866f":"code","c84e7fb6":"code","7a616586":"code","c91c92e6":"code","5533ba6a":"code","fc6b11e3":"code","5d6e320d":"code","5a63b3e7":"code","063c8ad6":"code","a86cb434":"code","7045abbc":"code","34bdd366":"markdown","2673643f":"markdown","f19a47bd":"markdown","3ee3c2ba":"markdown","37b652cf":"markdown","14559f6d":"markdown","a6b35e97":"markdown","06bbab10":"markdown","06a380db":"markdown","2dc23b91":"markdown"},"source":{"7cfadfcf":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\ndf = pd.read_csv('\/kaggle\/input\/data-breastcancer\/data.csv')\nprint(df.shape)\ndf.head()","25d1aa93":"df.drop(['id'], axis = 1,inplace = True)","262c3063":"df['diagnosis'].value_counts()","c106ce8a":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['diagnosis'] = le.fit_transform(df['diagnosis'])","ebef6b7c":"df['diagnosis'].value_counts()","96fd8b9d":"df","2b9e51da":"import seaborn as sb\nimport matplotlib.pyplot as plt\nax = plt.figure(figsize = (16,25))\ncorr = df.corr()\nsb.heatmap(corr,vmax = 1, vmin = -1,annot = True)","2e3f45a5":"#df.drop(df[['fractal_dimension_se','smoothness_se','fractal_dimension_se','symmetry_se', 'concavity_se','compactness_se','texture_se','fractal_dimension_mean']], axis = 1,inplace = True)","b7e2b441":"df['diagnosis'].value_counts()","2c19f016":"import numpy as np\ndf[df.isnull()]","319a1607":"df.isnull().sum()","6fa67fdf":"df.dropna(axis = 1,inplace = True)","37f499f6":"df.astype('float')","67547f75":"from sklearn.model_selection import train_test_split\nx = df.drop('diagnosis', axis = 1)\ny = df['diagnosis']","c1194a5d":"x_train,x_test,y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state = 4)\nprint(x_train.shape,y_train.shape,x_test.shape, y_test.shape)\n\n","3248031e":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(max_iter = 20000)\nlr.fit(x_train, y_train)\npred = lr.predict(x_test)\npred","64572614":"from sklearn.metrics import confusion_matrix, classification_report, r2_score,accuracy_score\ncr = classification_report(y_test, pred)\nprint(cr)\ncm = confusion_matrix(y_test, pred)\nprint(cm)\nr2s = r2_score(y_test,pred)\nprint(r2s)\naccLog = round(accuracy_score(y_test,pred)*100,2)\naccLog","d385cd89":"x_train,x_test,y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state = 202)\nprint(x_train.shape,y_train.shape,x_test.shape, y_test.shape)","46ef96cd":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(random_state = 2).fit(x_train,y_train)\npredicts = dt.predict(x_test)\npredicts","7387529c":"cr = classification_report(y_test, predicts)\nprint(cr)\ncm = confusion_matrix(y_test, predicts)\nprint(cm)\naccDT = round(accuracy_score(y_test,predicts)*100,2)\naccDT","905b651b":"from sklearn.neighbors import KNeighborsClassifier as knn\nerror_rate = []\nfor i in range(1,100):\n    k = knn(n_neighbors = i).fit(x_train,y_train)\n    predKNN = k.predict(x_test)\n    error_rate.append(np.mean(y_test != predKNN))\ndist = np.sort(error_rate)\nprint(np.min(dist),' at ',error_rate.index(min(dist))+1)\nplt.plot(dist)\nplt.show()","c6eda739":"kn = knn(n_neighbors = 22).fit(x_train,y_train)\npredKNN = kn.predict(x_test)\npredKNN","0273a1b3":"knC = confusion_matrix(y_test,predKNN)\nknCl = classification_report(y_test,predKNN)\nprint(knCl)\nprint(knC)","93d6b8f5":"from sklearn.tree import DecisionTreeClassifier as dtc\ndt = dtc(criterion = 'entropy',random_state = 32).fit(x_train,y_train)\npredDTC = dt.predict(x_test)\npredDTC","cf78866f":"cm = confusion_matrix(y_test,predDTC)\nprint(cm)\ncr = classification_report(y_test,predDTC)\nprint(cr)","c84e7fb6":"from sklearn.ensemble import RandomForestClassifier as rfc\nrf = rfc(n_estimators = 100).fit(x_train,y_train)\npredRF = rf.predict(x_test)\npredRF","7a616586":"cm = confusion_matrix(y_test,predRF)\ncr = classification_report(y_test,predRF)\nprint(cm,'\\n',cr)\naccRF = round(accuracy_score(y_test,predRF)*100,2)\naccRF","c91c92e6":"from xgboost import XGBClassifier\nxgb = XGBClassifier().fit(x_train,y_train)\npredXGB = xgb.predict(x_test)\npredXGB","5533ba6a":"cr = classification_report(y_test,predXGB)\nprint(cr)\ncm = confusion_matrix(y_test, predXGB)\nprint(cm)\naccXGB = accuracy_score(y_test,predXGB)*100\naccXGB","fc6b11e3":"from sklearn.svm import SVC\nsv = SVC(kernel = 'linear').fit(x_train,y_train)\npredSVC = sv.predict(x_test)\npredSVC","5d6e320d":"cr = classification_report(y_test,predSVC)\nprint(cr)\ncm = confusion_matrix(y_test,predSVC)\nprint(cm)\naccSVM = accuracy_score(y_test,predSVC)*100\naccSVM","5a63b3e7":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB().fit(x_train,y_train)\npredNB = nb.predict(x_test)\n","063c8ad6":"cm = confusion_matrix(y_test,predNB)\nprint(cm)\ncr = classification_report(y_test,predNB)\nprint(cr)\naccNB = round(accuracy_score(y_test,predNB)*100,2)","a86cb434":"Accuracy_score = pd.Series([accLog,accDT,accRF,accXGB,accSVM,accNB],index = ['Logistic Regression','Decision Tree','Random Forest','XGBoost','SVM','Naive Bayes'])","7045abbc":"print(Accuracy_score)","34bdd366":"# Random Forest","2673643f":"# Logistic Regression","f19a47bd":"# Decision Tree","3ee3c2ba":"# Decision Tree","37b652cf":"## find n neighbors","14559f6d":"# SVM","a6b35e97":"# Naive Bayes       ","06bbab10":"# XGBoost","06a380db":"# Accuracy Score","2dc23b91":"# KNN"}}