{"cell_type":{"720c51cc":"code","e4495c98":"code","f22514a5":"code","5f11b781":"code","5519c01a":"code","93dafaa0":"code","1e528334":"code","3ed413b4":"code","76933c53":"code","8d1945a2":"code","1d72460f":"markdown","ec8d90d8":"markdown","ff2cf7d1":"markdown","ef2cc2ac":"markdown","6ffa6717":"markdown","cd4704a5":"markdown","a62c9b21":"markdown","4b4446d2":"markdown","1480b3e6":"markdown","74f677da":"markdown","2ba9ea94":"markdown"},"source":{"720c51cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4495c98":"#This will help us keep track of the submissions\nsub_name_list = ['dummy', 'mdabbert', 'BossaNostra']\nscore_list = [] #We can keep the scores here\n\n#Put the submissions in dataframe form and add to a list.\nsub_list = []\ntemp_df = pd.read_csv(\"\/kaggle\/input\/ufc-lewis-vsoleinik-bet-dummies\/task-dummy.csv\")\nsub_list.append(temp_df)\n\ntemp_df = pd.read_csv(\"\/kaggle\/input\/lewisoleiniksubmission\/lewis-oleinik-sub.csv\")\nsub_list.append(temp_df)\n\ntemp_df = pd.read_csv(\"\/kaggle\/input\/lewisoleinik-task-submission\/Lewis-Oleinik-Submission.csv\")\nsub_list.append(temp_df)\n\n","f22514a5":"results_df = pd.read_csv(\"\/kaggle\/input\/ultimate-ufc-dataset\/most-recent-event.csv\")\n\n#We only need the fighter names, odds, and winner\n\nresults_df = results_df[['R_fighter', 'B_fighter', 'R_ev', 'B_ev', 'Winner']]\ndisplay(results_df)","5f11b781":"#Returns a specific bet EV based on winning_ev and probability.\ndef get_bet_ev(ev, prob):\n    \n    return(ev*prob - (1-prob)*100)","5519c01a":"#Used to determine the bet of each fight.  We will use probabilities and the ev to \n#determine profitable bets\ndef get_bet(R_prob, B_prob, R_ev, B_ev):\n    red_ev = get_bet_ev(R_ev, R_prob)\n    blue_ev = get_bet_ev(B_ev, B_prob)\n    if red_ev > 0:\n        return('Red')\n    if blue_ev > 0:\n        return('Blue')\n    \n    return 'None'","93dafaa0":"def get_profit(winner, bet, R_ev, B_ev):\n    if bet == 'None':\n        return 0\n    if (bet == 'Blue' and winner == 'Blue'):\n        return B_ev\n    if (bet == 'Red' and winner == 'Red'):\n        return R_ev\n    else:\n        return (-100)","1e528334":"#Let's make a helper function to make this easier\n\ndef get_score(sub, results):\n#    display(sub)\n#    display(results)\n    #Let's merge the two dataframes\n    merge_df = pd.merge(sub, results)\n    #display(merge_df)\n    #We can get the proper bet by using a lambda function\n    merge_df['Bet'] = merge_df.apply(lambda x: get_bet(x['R_prob'],x['B_prob'],x['R_ev'],x['B_ev']), axis=1)\n    merge_df['Profit'] = merge_df.apply(lambda x: get_profit(x['Winner'], x['Bet'], x['R_ev'], x['B_ev']), axis=1)\n    display(merge_df)\n    return(sum(merge_df['Profit']))","3ed413b4":"z = 0\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","76933c53":"z = 1\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","8d1945a2":"z = 2\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","1d72460f":"BossaNostra won 3 of 10 bets for a loss of 458.05 units.","ec8d90d8":"# Open All Submissions and add to a list","ff2cf7d1":"# Submissions\n\nThere are 3 submissions.\n\n1. The dummy file (gives each fighter a .5 probability of winning. Therefore will bet every underdog with greater than +100 odds.)\n\n2. mdabbert's (my!) submission. A GaussianNB Classifier using the following features: ['R_Reach_cms', 'total_round_dif', 'R_Height_cms', 'R_avg_SIG_STR_pct', 'B_age', 'R_longest_win_streak', 'lose_streak_dif', 'ko_dif', 'R_win_by_Decision_Majority', 'longest_win_streak_dif', 'avg_sub_att_dif', 'R_Weight_lbs', 'sig_str_dif', 'B_Height_cms', 'B_avg_SUB_ATT', 'R_win_by_TKO_Doctor_Stoppage', 'B_draw', 'avg_td_dif', 'R_win_by_Decision_Split', 'age_dif', 'B_current_win_streak', 'R_odds']\n\n3. BossaNostra's submission","ef2cc2ac":"# Final Results\n\n* dummy: -650.00 units\n* mdabbert: +271.14 units\n* BossaNostra: -458.05 units\n\nmdabbert was the winner being able to predict winning bets for 9 fights while losing 3.","6ffa6717":"# Submission #2: mdabbert's Submission","cd4704a5":"# Submission #1: Dummy Submission\n\nThese are the results of the dummy submission.","a62c9b21":"mdabbert won 9 of 12 fights for a total profit of 271.14 units.  Of his nine wins two were underdogs.","4b4446d2":"# Iterate the submissions and see how everyone did!","1480b3e6":"# Purpose\n\nI am going to go through the task submissions for [Contest #6: Lewis vs. Oleinik UFC Fight Night Bet Prediction Contest](https:\/\/www.kaggle.com\/mdabbert\/ultimate-ufc-dataset\/tasks?taskId=1581)  and see what set of predictions was the most profitable (if any!)","74f677da":"# Submission #3: BossaNostra's submission","2ba9ea94":"After dummies remarkable profit last week he is back to his losing ways.  Losing 9 of 11 bets for a total loss of 650 units"}}