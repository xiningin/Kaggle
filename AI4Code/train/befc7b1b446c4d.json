{"cell_type":{"ad78bfe3":"code","72070ac4":"code","95c81a86":"code","f986635c":"code","b7a73d51":"code","879b2f57":"code","ef5b69bf":"code","6fc31d40":"code","7bfaea17":"code","f8012d96":"code","460b3f79":"code","51972bc0":"code","37c8bcd3":"code","e514a024":"code","4762ceaf":"code","b295c54b":"markdown","49f55eff":"markdown","db012d1e":"markdown","e00dcc3b":"markdown"},"source":{"ad78bfe3":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nX_train = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv')\nX_test = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv')\nsubmission = pd.read_csv('..\/input\/bike-sharing-demand\/sampleSubmission.csv', engine='python') # \uc81c\ucd9c\uc6a9","72070ac4":"X_train.head()","95c81a86":"X_test.head()","f986635c":"# datetime\uc740 object\ud615\uc784, \uc608\uce21 \ub2e8\uc704\uac00 \uc2dc\uac04\uc778\ub370 \ub0a0\uc9dc\ub85c \uc785\ub825 -> \uc2dc\uac04 \ubd84\ub9ac \ud544\uc694\n# \uadf8 \uc678 int, float64\ud615\n# \ubc94\uc8fc\ud615 \ubcc0\uc218 \uc788\uc74c, season, weather\n# X_train, X_test \uceec\ub7fc \uac1c\uc218 \ub2e4\ub984, X_train\uc5d0\ub9cc \ub4f1\ub85d\uc815\ubcf4 \ucd94\uac00\ub418\uc5b4 \uc788\uc74c -> \uc0ad\uc81c \ud544\uc694\n\nprint(X_train.info()) # \uacb0\uce21\uce58 \uc5c6\uc74c\nprint(X_test.info()) # \uacb0\uce21\uce58 \uc5c6\uc74c \nprint(X_train.describe()) # \uc790\ub3d9\uc73c\ub85c \uc9d1\uacc4\ub41c \ub0b4\uc6a9\uc77c \uac83\uc774\ubbc0\ub85c \uc774\uc0c1\uce58 \ucc98\ub9ac\ud558\uc9c0 \uc54a\uc74c","b7a73d51":"# \ud544\uc694\ud55c \uceec\ub7fc \uad6c\ubd84 : datetime\uc5d0\uc11c hour \ubd84\ub9ac (\ubd84\ub9ac \ud6c4 \uc6d0\ub798 \uceec\ub7fc\uc740 \uc0ad\uc81c)\n\nX_train['datetime'] = pd.to_datetime(X_train['datetime'])\nX_train['hour'] = X_train['datetime'].dt.hour\nX_train = X_train.drop(columns=['datetime'])\n\nX_test['datetime'] = pd.to_datetime(X_test['datetime'])\nX_test['hour'] = X_test['datetime'].dt.hour\nX_test = X_test.drop(columns=['datetime'])\n\ntype(X_test['hour'][0]) # int\ud615\uc774\uc9c0\ub9cc \ubc94\uc8fc\ud615 \ubcc0\uc218 -> \uc6d0\ud56b\uc778\ucf54\ub529 \uc218\ud589 \ud544\uc694\n\n# \ucc38\uace0 : str \uc0ac\uc6a9 \uc2dc datetime \ud615 \ubcc0\ud658 \uc5c6\uc774 \uc790\ub9bf\uc218\ub85c \ucd94\ucd9c\ud560 \uc218 \uc788\uc74c\n#X_train['hour'] = X_train['datetime'].str[-8:-6]\n#X_test['hour'] = X_test['datetime'].str[-8:-6]","879b2f57":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 onehotEncoding \uc218\ud589 : season, weather, hour\n\nX_train = pd.get_dummies(X_train, columns=['season', 'weather', 'hour'])\nX_test = pd.get_dummies(X_test, columns=['season', 'weather', 'hour'])\nX_train.columns","ef5b69bf":"# \ubd88\ud544\uc694\ud55c \uceec\ub7fc \uc0ad\uc81c\n\nX_train = X_train.drop(columns=['casual', 'registered'])\nX_train.columns","6fc31d40":"# y \ubcc0\uc218 \uc9c0\uc815 : count\n\ny_train = X_train[['count']]\nX_train = X_train.drop(columns=['count'])\nX_train.columns\ny_train","7bfaea17":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac \ud558\uae30 \uc804\uc5d0 \uc815\uaddc\ubd84\ud3ec \ud615\ud0dc \ud655\uc778 \ud6c4 \ucc98\ub9ac\nprint(y_train['count'].value_counts())\ny_train['count'].hist() # \uc67c\ucabd\uc73c\ub85c \uce58\uc6b0\uce58\uace0 \uc624\ub978\ucabd \uaf2c\ub9ac \uae34 \ud615\ud0dc -> \uc815\uaddc\ud654 \uc218\ud589 (np.log1p)","f8012d96":"y_train['count'] = np.log1p(y_train['count'])\ny_train['count'].hist()","460b3f79":"# \ub370\uc774\ud130 \ub098\ub204\uae30\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train, shuffle=True, test_size=0.15, random_state=2021)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","51972bc0":"# ## \ubaa8\ub378 \ud559\uc2b5 \ubc0f \ud3c9\uac00\ud558\uae30 : rmse_xgb \uc120\uc815\n\nmodel_rf = RandomForestRegressor()\nmodel_rf.fit(X_tr, y_tr)\npred_rf = model_rf.predict(X_val)\nprint(pred_rf)\n\nmodel_xgb = XGBRegressor()\nmodel_xgb.fit(X_tr, y_tr)\npred_xgb = model_xgb.predict(X_val)\nprint(pred_xgb)","37c8bcd3":"# \ubaa8\ub378 \ud3c9\uac00 : RMSE \uc0ac\uc6a9\nrmse_rf = np.sqrt(mean_squared_error(y_val, pred_rf))\nprint('RandomForestRegressor MSE', rmse_rf) # 0.419\n\nrmse_xgb = np.sqrt(mean_squared_error(y_val, pred_xgb))\nprint('XGBRegressor MSE', rmse_xgb) # 0.403","e514a024":"# ## \uc120\uc815\ud55c \ubaa8\ub378\ub85c X_test \uc608\uce21 \ud6c4 \uacb0\uacfc \ud30c\uc77c \uc0dd\uc131\ud558\uae30\n\npred_y = model_xgb.predict(X_test)\n\n# y \ubcc0\uc218\uc5d0 np.log1p \uc801\uc6a9\ud588\uc73c\ubbc0\ub85c \uc608\uce21 \uacb0\uacfc\uc5d0 np.expm1 \uc801\uc6a9\ud574\uc11c \uc8c4\uc885 \uacb0\uacfc \ub3c4\ucd9c\n\npred_result = np.expm1(pred_y)\n\nX_test.columns","4762ceaf":"# \uacb0\uacfc \ud30c\uc77c\noutput = pd.DataFrame({'count': pred_result})\noutput.head()\noutput.to_csv(\"\uc218\ud5d8\ubc88\ud638.csv\", index=False)","b295c54b":"# \uc790\uc804\uac70 \uc218\uc694 \uc608\uce21 \n# \ub9e4 \uc2dc\uac04\ub9c8\ub2e4 \ub80c\ud0c8\ub41c \uc790\uc804\uac70 \uc218\ub7c9 \uc608\uce21 \n\n# \uceec\ub7fc \uad6c\uc131\n    # datetime - hourly date + timestamp  \n    # season -  1 = spring, 2 = summer, 3 = fall, 4 = winter \n    # holiday - whether the day is considered a holiday\n    # workingday - whether the day is neither a weekend nor holiday\n    # weather - 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n    # 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n    # 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n    # 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \n    # temp - temperature in Celsius\n    # atemp - \"feels like\" temperature in Celsius\n    # humidity - relative humidity\n    # windspeed - wind speed\n    # casual - number of non-registered user rentals initiated\n    # registered - number of registered user rentals initiated\n    # count - number of total rentals","49f55eff":"# \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","db012d1e":"# EDA","e00dcc3b":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac : \uacb0\uce21\uce58, \uc774\uc0c1\uce58 \ucc98\ub9ac, \ubcc0\uc218 \uc885\ub958 \ubc0f \uc6d0\ud56b\uc778\ucf54\ub529 \ud544\uc694 \uc5ec\ubd80, y \ubcc0\uc218 \ubc0f \uc815\uaddc\ud654 \ub4f1\uc758 \ucc98\ub9ac, \ub370\uc774\ud130 \ub098\ub204\uae30"}}