{"cell_type":{"b5e80eb5":"code","787d1b85":"code","d265dc7d":"code","74868695":"code","a3ccec7c":"code","53fa2542":"code","4bc20618":"code","cb78de01":"code","a124f2c5":"code","f6456875":"code","d820784a":"code","6bb96e2d":"code","f3e7872b":"code","c6a27c5c":"code","9da7cd70":"code","7234b598":"code","2e3269b3":"code","a300173d":"code","6da762f4":"code","e02aac79":"code","b75ff978":"code","d06f97c0":"code","9892b71e":"code","25ff686d":"code","3fa79c3f":"code","bc46d410":"code","f90eaed6":"code","dceacd85":"code","d075beff":"code","dd02f3a4":"code","385d1c79":"code","e9f5ac57":"code","09795f0a":"code","cd6a559f":"code","f3f82710":"code","3539ca89":"code","0e71518e":"code","d664a8ae":"code","1bc02222":"code","b7a3193a":"code","93e32fbe":"code","506d04ca":"code","ca32059d":"code","f88696cb":"code","4d8f3118":"code","85f23a0f":"code","75f05c16":"markdown","55b0b64b":"markdown","c644dd9f":"markdown","25c09e51":"markdown"},"source":{"b5e80eb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","787d1b85":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","d265dc7d":"train=pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/train.csv')\ntest=pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/test.csv')","74868695":"test1=test","a3ccec7c":"train.head(5)","53fa2542":"test1.head(5)","4bc20618":"test.head(5)","cb78de01":"train.info()","a124f2c5":"fig = plt.figure(figsize=(16,8))\nax = fig.add_subplot(111)\ntrain.groupby('Date').mean().sort_values(by='ConfirmedCases', ascending=False)['ConfirmedCases'].plot('bar', color='r',width=0.3,title='Date Confirmed Cases', fontsize=10)\nplt.xticks(rotation = 90)\nplt.ylabel('Date')\nax.title.set_fontsize(30)\nax.xaxis.label.set_fontsize(10)\nax.yaxis.label.set_fontsize(10)\nprint(train.groupby('Date').mean().sort_values(by='ConfirmedCases', ascending=False)['ConfirmedCases'][[1,2]])\nprint(train.groupby('Date').mean().sort_values(by='ConfirmedCases', ascending=False)['ConfirmedCases'][[4,5,6]])","f6456875":"#Country_Region top 30\ntrain.Country_Region.value_counts()[0:30].plot(kind='bar')\nplt.show()","d820784a":"fig = plt.figure(figsize=(16,8))\nax = fig.add_subplot(111)\ntrain.groupby('Date').mean().sort_values(by='Fatalities', ascending=False)['Fatalities'].plot('bar', color='r',width=0.3,title='Date Fatalities Cases', fontsize=10)\nplt.xticks(rotation = 90)\nplt.ylabel('Date')\nax.title.set_fontsize(30)\nax.xaxis.label.set_fontsize(10)\nax.yaxis.label.set_fontsize(10)\nprint(train.groupby('Date').mean().sort_values(by='Fatalities', ascending=False)['Fatalities'][[1,2]])\nprint(train.groupby('Date').mean().sort_values(by='Fatalities', ascending=False)['Fatalities'][[4,5,6]])","6bb96e2d":"#visualization of main places US,ITALY,CHINA,UK\n#US\nConfirmedCases_date_US = train[train['Country_Region']=='US'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_US = train[train['Country_Region']=='US'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_US = ConfirmedCases_date_US.join(fatalities_date_US)\n\n\n#China\nConfirmedCases_date_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_China = ConfirmedCases_date_China.join(fatalities_date_China)\n\n#Italy\nConfirmedCases_date_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Italy = ConfirmedCases_date_Italy.join(fatalities_date_Italy)\n\n#Australia\nConfirmedCases_date_Australia = train[train['Country_Region']=='Australia'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Australia = train[train['Country_Region']=='Australia'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Australia = ConfirmedCases_date_Australia.join(fatalities_date_Australia)\n\n\n\nplt.figure(figsize=(15,10))\nplt.subplot(2, 2, 1)\ntotal_date_US.plot(ax=plt.gca(), title='US')\nplt.ylabel(\"Confirmed  cases\", size=13)\n\nplt.subplot(2, 2, 2)\ntotal_date_China.plot(ax=plt.gca(), title='China')\n\nplt.subplot(2, 2, 3)\ntotal_date_Italy.plot(ax=plt.gca(), title='Italy')\nplt.ylabel(\"Confirmed cases\", size=13)\n\nplt.subplot(2, 2, 4)\ntotal_date_Australia.plot(ax=plt.gca(), title='Australia')","f3e7872b":"train['Date']= pd.to_datetime(train['Date']) \ntest['Date']= pd.to_datetime(test['Date'])","c6a27c5c":"train = train.set_index(['Date'])\ntest = test.set_index(['Date'])","9da7cd70":"def create_time_features(df):\n    \"\"\"\n    Creates time series features from datetime index\n    \"\"\"\n    df['date'] = df.index\n    df['hour'] = df['date'].dt.hour\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    \n    X = df[['hour','dayofweek','quarter','month','year',\n           'dayofyear','dayofmonth','weekofyear']]\n    return X","7234b598":"create_time_features(train).head()\ncreate_time_features(test).head()","2e3269b3":"train.head(5)","a300173d":"train.drop(\"date\", axis=1, inplace=True)\ntest.drop(\"date\", axis=1, inplace=True)","6da762f4":"confirmed_corr=train.corr()['ConfirmedCases']","e02aac79":"confirmed_corr.sort_values(ascending=False)","b75ff978":"fatalities_corr=train.corr()['Fatalities']","d06f97c0":"fatalities_corr.sort_values(ascending=False)","9892b71e":"train.drop(\"dayofweek\", axis=1, inplace=True)\ntest.drop(\"dayofweek\", axis=1, inplace=True)","25ff686d":"train.drop(\"hour\", axis=1, inplace=True)\ntest.drop(\"hour\", axis=1, inplace=True)","3fa79c3f":"train.drop(\"quarter\", axis=1, inplace=True)\ntest.drop(\"quarter\", axis=1, inplace=True)","bc46d410":"train.drop(\"year\", axis=1, inplace=True)\ntest.drop(\"year\", axis=1, inplace=True)","f90eaed6":"train.drop(\"Province_State\", axis=1, inplace=True)\ntest.drop(\"Province_State\", axis=1, inplace=True)","dceacd85":"train.drop(\"Id\", axis=1, inplace=True)\ntest.drop(\"ForecastId\", axis=1, inplace=True)","d075beff":"test.info()","dd02f3a4":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndef FunLabelEncoder(df):\n    for c in df.columns:\n        if df.dtypes[c] == object:\n            le.fit(df[c].astype(str))\n            df[c] = le.transform(df[c].astype(str))\n    return df","385d1c79":"train = FunLabelEncoder(train)\ntrain.info()","e9f5ac57":"test = FunLabelEncoder(test)\ntest.info()","09795f0a":"test.head(5)","cd6a559f":"x_train= train[['Country_Region', 'month', 'dayofyear', 'dayofmonth' , 'weekofyear']]\ny1 = train[['ConfirmedCases']]\ny2 = train[['Fatalities']]\nx_test = test[['Country_Region', 'month', 'dayofyear', 'dayofmonth' , 'weekofyear']]","f3f82710":"from sklearn.ensemble import RandomForestClassifier\n\n# We define the model\ntree_model= RandomForestClassifier(n_estimators=100, max_depth=200,\n                        random_state=1)","3539ca89":"#for confirmed cases\ntree_model.fit(x_train,y1)\nprediction1 = tree_model.predict(x_test)\nprediction1 = pd.DataFrame(prediction1)\nprediction1.columns = [\"ConfirmedCases_prediction\"]","0e71518e":"prediction1.head()","d664a8ae":"#for fatalities\ntree_model.fit(x_train,y2)\nprediction2 = tree_model.predict(x_test)\nprediction2 = pd.DataFrame(prediction2)\nprediction2.columns = [\"Death_prediction\"]","1bc02222":"sub_new=test1[[\"ForecastId\"]]\nsub_new","b7a3193a":"\nsubmit = pd.concat([prediction1,prediction2,sub_new],axis=1)\nsubmit.head()","93e32fbe":"# Clean\nsubmit.columns = ['ConfirmedCases', 'Fatalities', 'ForecastId']\nsubmit = submit[['ForecastId','ConfirmedCases', 'Fatalities']]\n\nsubmit[\"ConfirmedCases\"] = submit[\"ConfirmedCases\"].astype(int)\nsubmit[\"Fatalities\"] = submit[\"Fatalities\"].astype(int)","506d04ca":"submit.info()","ca32059d":"submit.head(5)# Final prediction","f88696cb":"submit.shape","4d8f3118":"submit.to_csv(\"submission.csv\",index=False)","85f23a0f":"submit","75f05c16":"### Overview\n\n**Coronavirus disease (COVID-19) is an infectious disease caused by a new virus.\nThe disease causes respiratory illness (like the flu) with symptoms such as a cough, fever, and in more severe cases, difficulty breathing. You can protect yourself by washing your hands frequently, avoiding touching your face,\nand avoiding close contact (1 meter or 3 feet) with people who are unwell.**\n\n### How it spreads\n\n**Coronavirus disease spreads primarily through contact with an infected person when they cough or sneeze. It also spreads when a person touches a surface or object that has the virus on it, then touches their eyes, nose, or mouth.**\n\n### symptoms\n\n**People may be sick with the virus for 1 to 14 days before developing symptoms. The most common symptoms of coronavirus disease (COVID-19) are fever, tiredness, and dry cough. Most people (about 80%) recover from the disease without needing special treatment.**\n\n### Preventions\n\n**You can protect yourself and help prevent spreading the virus to others if you:\nDo\n\u2022 Wash your hands regularly for 20 seconds, with soap and water or alcohol-based hand rub\n\u2022 Cover your nose and mouth with a disposable tissue or flexed elbow when you cough or sneeze\n\u2022 Avoid close contact (1 meter or 3 feet) with people who are unwell\n\u2022 Stay home and self-isolate from others in the household if you feel unwell**\n\n###  Treatments\n\n**There is no specific medicine to prevent or treat coronavirus disease (COVID-19). People may need supportive care to help them breathe.**\n\n","55b0b64b":"![image.png](attachment:image.png)","c644dd9f":"### Details of the challenge \n\n***This is week 2 of Kaggle's COVID19 forecasting series, following the Week 1 competition. This is the 2nd of at least 4 competitions we plan to launch in this series.***\n\n### Background\n\n***The White House Office of Science and Technology Policy (OSTP) pulled together a coalition research groups and companies (including Kaggle) to prepare the COVID-19 Open Research Dataset (CORD-19) to attempt to address key open scientific questions on COVID-19. Those questions are drawn from National Academies of Sciences, Engineering, and Medicine\u2019s (NASEM) and the World Health Organization (WHO).***\n\n### The Challenge\n\n***Kaggle is launching a companion COVID-19 forecasting challenges to help answer a subset of the NASEM\/WHO questions. While the challenge involves forecasting confirmed cases and fatalities between April 1 and April 30 by region, the primary goal isn't only to produce accurate forecasts. It\u2019s also to identify factors that appear to impact the transmission rate of COVID-19.***\n\n***You are encouraged to pull in, curate and share data sources that might be helpful. If you find variables that look like they impact the transmission rate, please share your finding in a notebook.***\n\n***As the data becomes available, we will update the leaderboard with live results based on data made available from the Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE).***\n\n***We have received support and guidance from health and policy organizations in launching these challenges. We're hopeful the Kaggle community can make valuable contributions to developing a better understanding of factors that impact the transmission of COVID-19.***\n\n### Companies and Organizations\n***There is also a call to action for companies and other organizations: If you have datasets that might be useful, please upload them to Kaggle\u2019s dataset platform and reference them in this forum thread. That will make them accessible to those participating in this challenge and a resource to the wider scientific community.***\n\n### Acknowledgements\n***JHU CSSE for making the data available to the public. The White House OSTP for pulling together the key open questions. The image comes from the Center for Disease Control.***","25c09e51":"![image.png](attachment:image.png)"}}