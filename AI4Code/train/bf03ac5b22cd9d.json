{"cell_type":{"792cf5be":"code","262a5f5a":"code","66e639c9":"code","0f87c01b":"code","6adb802b":"code","f6c23418":"code","3f4e683b":"code","6e57e0ed":"code","edca479a":"code","524d484b":"code","37532e4c":"code","62c2bb8d":"markdown","a3ce7b55":"markdown","518cdd25":"markdown","e1b995f5":"markdown","c8654f7a":"markdown"},"source":{"792cf5be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly import subplots\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","262a5f5a":"kaggle_filepath = '..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv'\ncontinents_filepath = '..\/input\/continent\/Continent.csv'\n\nkaggle_df = pd.read_csv(kaggle_filepath, error_bad_lines=False, index_col=False, dtype='unicode')\ncontinent_df = pd.read_csv(continents_filepath)","66e639c9":"kaggle_df.head()","0f87c01b":"# Remove row [0]\nkaggle_df.drop(kaggle_df.index[0], inplace=True)","6adb802b":"# Convert some country names\nconvert_country_name = {'United States of America': 'United States',\n                       'United Kingdom of Great Britain and Northern Ireland': 'United Kingdom',\n                       'Iran, Islamic Republic of...': 'Iran',\n                       'Viet Nam': 'Vietnam'\n                      }\nkaggle_df['Q3'] = kaggle_df['Q3'].replace(convert_country_name)\n# Add Continents \ncontinents_dictionary = {country: continent for country, continent in zip(continent_df['Country'], continent_df['Continent'])}\nkaggle_df['Continent'] = kaggle_df['Q3'].map(continents_dictionary)","f6c23418":"kaggle_df.head()","3f4e683b":"# Lets see by Continent, Country, Sex and Age just click in it\n# Sunburts graphic with plotly express\nfig_sunburst = px.sunburst(kaggle_df,\n                           path=['Continent', 'Q3', 'Q2', 'Q1'],#[Continent, Country, Sex, Age]\n                           template='seaborn',\n                           maxdepth=2,\n                           title='Demography')\nfig_sunburst.update_traces(textinfo='label+percent entry')# Shows % in graph\nfig_sunburst.update_layout(margin=dict(t=25, l=0, r=0, b=0))","6e57e0ed":"continents = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America']\nfor continent in continents:\n    df_ages = kaggle_df[kaggle_df['Continent'] == continent]\n    unique_ages, count_by_age = np.unique(df_ages['Q1'], return_counts=True)\n    fig_bar = px.bar(x=unique_ages, y=count_by_age, labels={'x': 'Age', 'y': 'Users'}, title='Users in {} by age'.format(continent))\n    fig_bar.show()","edca479a":"Q14_ans = []\nQ14_col = []\nfor col in kaggle_df.columns:\n    if 'Q14' in col:\n        answer = kaggle_df[col].unique()\n        Q14_col.append(col) \n        Q14_ans.append(answer)\n\nQ14_r=[]\nfor i in Q14_ans:\n    for j in i:\n        if type(j) is str:\n            Q14_r.append(j)\n            \ncount_Q14 = kaggle_df[Q14_col].count()\nfig_Q14 = px.bar(x=Q14_r, y=count_Q14, labels={'x':'Graphic Library', 'y':'Users'}, title='Q_14_Graphic_Libraries', template='seaborn')\nfig_Q14.show()","524d484b":"Q16_ans =[]\nQ16_col = []\nfor col in kaggle_df.columns:\n    if 'Q16' in col:\n        answer = kaggle_df[col].unique()\n        Q16_col.append(col)\n        Q16_ans.append(answer)\nQ16_r=[]\nfor i in Q16_ans:\n    for j in i:\n        if type(j) is str:\n            Q16_r.append(j)\ncount_Q16 = kaggle_df[Q16_col].count()\npx.bar(x=Q16_r, y=count_Q16, labels={'x': 'ML Framework', 'y': 'Users'}, title='Q16_Machine_Learning_Frameworks', template='gridon')","37532e4c":"x_q5 = kaggle_df['Q5'].unique()\ndf_position_educations = pd.DataFrame()\nfor position in x_q5:\n    df_position_educations[position] = kaggle_df[kaggle_df['Q5']== position]['Q4'].value_counts()\n\n# Lets see with stacked bar\n\nfig_bar_2 = go.Figure(data=[\n    go.Bar(\n            x=df_position_educations.loc['Doctoral degree'],\n            y=df_position_educations.columns,\n            orientation='h',\n            name='Doctoral degree'),\n    go.Bar(\n            x=df_position_educations.loc[\"Bachelor\u2019s degree\"],\n            y=df_position_educations.columns,\n            orientation='h',\n            name=\"Bachelor's degree\"),\n    go.Bar(\n            x=df_position_educations.loc[\"Some college\/university study without earning a bachelor\u2019s degree\"],\n            y=df_position_educations.columns,\n            orientation='h',\n            name='Study without degree'),\n    go.Bar(\n            x=df_position_educations.loc[\"Master\u2019s degree\"],\n            y=df_position_educations.columns,\n            orientation='h',\n            name=\"Master's degree\"),\n    go.Bar(\n            x=df_position_educations.loc[\"Professional degree\"],\n            y=df_position_educations.columns,\n            orientation='h',\n            name=\"Professional degree\")\n])\nfig_bar_2.update_layout(barmode='stack',\n                       margin=dict(t=50, l=50, r=0, b=100),                       \n                       template='ggplot2',\n                       legend = dict(orientation='h',yanchor='top',xanchor='center',font=dict(size= 12), traceorder='normal'),\n                       title='Job positions by degree')\nfig_bar_2.show()","62c2bb8d":"# Machine Learning Frameworks","a3ce7b55":"Lets take a look about countries","518cdd25":"# Demography","e1b995f5":"# Job positions and education","c8654f7a":"# Graphic Libraries"}}