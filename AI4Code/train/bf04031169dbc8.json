{"cell_type":{"e2081183":"code","2d6fa120":"code","0e00afde":"code","98cf8594":"code","b76fe089":"code","385f3086":"code","73a861e8":"code","2ce89015":"code","71387eab":"code","18d98c49":"code","0f20686d":"code","08d90290":"code","8b2fe804":"code","df0666da":"code","80fea1f5":"code","656c4a1f":"code","a060b012":"markdown"},"source":{"e2081183":"# Requirements\n!pip install azure-cognitiveservices-search-imagesearch==2.0.0\n!pip3 install fastai==2.5.3","2d6fa120":"from azure.cognitiveservices.search.imagesearch import ImageSearchClient as api \nfrom msrest.authentication import CognitiveServicesCredentials as auth\n\nfrom fastai.vision.all import *\n\ndef search_images_bing(key, term, max_images: int = 100, **kwargs):    \n    params = {'q':term, 'count':max_images}\n    headers = {\"Ocp-Apim-Subscription-Key\":key}\n    search_url = \"https:\/\/api.bing.microsoft.com\/v7.0\/images\/search\"\n    response = requests.get(search_url, headers=headers, params=params)\n    response.raise_for_status()\n    search_results = response.json()    \n    return L(search_results['value'])","0e00afde":"# Reference - https:\/\/weather.fandom.com\/wiki\/Types_of_Weather\nweather_types = ['cloudy', 'snowy', 'rainy', 'windy', 'sunny'] \npath = Path('\/content\/drive\/MyDrive\/Colab Notebooks\/weatherFolder')","98cf8594":"if not path.exists():\n    path.mkdir()\n    for o in weather_types:\n      dest = (path\/o)\n      dest.mkdir(exist_ok =True)\n      results = search_images_bing('xxxxxxxxxx', f'{o} sky')\n      download_images(dest, urls = results.attrgot('contentUrl'))\n","b76fe089":"files = get_image_files(path)\nfailed = verify_images(files)\nfailed.map(Path.unlink)","385f3086":"# Clean EXIFs\nimport warnings\nwarnings.filterwarnings(\"error\")\n\nimport os\nfrom PIL import Image\n\nsubfolder = 'cloudy'\nimageFolder = f'\/content\/drive\/MyDrive\/Colab Notebooks\/weatherFolder\/{subfolder}'\nlistImages = os.listdir(imageFolder)\n\nfor img in listImages:\n    imgPath = os.path.join(imageFolder,img)\n    try:\n        if '.ipynb' not in imgPath:\n            img = Image.open(imgPath)\n            exif_data = img._getexif()\n            img.close()\n    except UserWarning as err:\n        print(err)\n        print(\"\\n Error on image: \", img)","73a861e8":"warnings.filterwarnings(\"ignore\", category=DeprecationWarning) \n\nweather = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=RandomSplitter(valid_pct=0.25, seed=42),\n    get_y=parent_label,\n    item_tfms=Resize(128))\n\ndls = weather.dataloaders(path)\ndls.valid.show_batch(max_n=4, nrows=1)","2ce89015":"weather = weather.new(\n    item_tfms=RandomResizedCrop(224, min_scale=0.5),\n    batch_tfms=aug_transforms())  #Editable\ndls = weather.dataloaders(path)  \ndls.train.show_batch(max_n=4, nrows=1, unique=True)","71387eab":"learn = cnn_learner(dls, resnet18, metrics=error_rate, model_dir='\/content\/drive\/MyDrive\/Colab Notebooks' )\nlearn.fine_tune(4)","18d98c49":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()","0f20686d":"interp.plot_top_losses(5, nrows=1)","08d90290":"from fastai.vision.widgets import ImageClassifierCleaner \ncleaner = ImageClassifierCleaner(learn)\ncleaner","8b2fe804":"learn.export()","df0666da":"path = Path()\npath.ls(file_exts='.pkl')","80fea1f5":"from IPython.display import Image\nlearn_inf = load_learner(path\/'export.pkl')\nprint(learn_inf.predict('\/content\/drive\/MyDrive\/Colab Notebooks\/weatherFolder\/rainy\/00000000.jpg'))\nImage(filename='\/content\/drive\/MyDrive\/Colab Notebooks\/weatherFolder\/rainy\/00000000.jpg') ","656c4a1f":"for idx in cleaner.delete(): cleaner.fns[idx].unlink()\nfor idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path\/cat)","a060b012":"# My Weather Dataset built using Bing Image Search API"}}