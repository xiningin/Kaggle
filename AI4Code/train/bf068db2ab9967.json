{"cell_type":{"a64c69f3":"code","480e860d":"code","2e001b01":"code","79a7e365":"code","783e5567":"code","f7b1ae07":"code","dd142844":"code","a4b7e234":"code","55cfc1dc":"code","3f21953f":"code","c34044a0":"code","fbbd17da":"markdown","7898cd1c":"markdown","2e57f383":"markdown","c1016ba0":"markdown"},"source":{"a64c69f3":"from __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import *\nfrom sklearn import datasets","480e860d":"from sklearn.datasets import load_digits\ndigits = load_digits()\n\nsampleDigits = digits.data.reshape((-1,8,8))[:10]\nfig = plt.figure(figsize=(8, 3))\nplt.title(\"Original digits data\")\nfor i in range(10):\n    ax = fig.add_subplot(2, 5, 1 + i, xticks=[], yticks=[])\n    ax.imshow(sampleDigits[i,:,:])\nplt.show()","2e001b01":"est = KMeans(n_clusters=10)\nclusters = est.fit_predict(digits.data)\n# est.cluster_centers_.shape\n\nfig = plt.figure(figsize=(8, 3))\nfor i in range(10):\n    ax = fig.add_subplot(2, 5, 1 + i, xticks=[], yticks=[])\n    ax.imshow(est.cluster_centers_[i].reshape((8, 8)), cmap=plt.cm.binary)\n\n#print cluster centers:\nplt.show()","79a7e365":"# Compute clustering accuracy\nfrom scipy.stats import mode\nfrom sklearn.metrics import accuracy_score\n\nlabels = np.zeros_like(clusters) #create array with zeros. Len=num of instances.\nfor i in range(10): #for each digit\n    mask = (clusters == i) #filter on digit i\n    labels[mask] = mode(digits.target[mask])[0] # use the mode as the target attribute. Note that we are using the target to create a classifier!\n    \nprint(\"Digits clustering Accuracy: %0.3f\"%(accuracy_score(digits.target, labels)))","783e5567":"# Plot clustering results\nfrom sklearn.decomposition import PCA\n\nX = PCA(2).fit_transform(digits.data)\n\nkwargs = dict(cmap = plt.cm.get_cmap('rainbow', 10),\n              edgecolor='none', alpha=0.6)\nfig, ax = plt.subplots(1, 2, figsize=(15, 10))\nax[1].scatter(X[:, 0], X[:, 1], c=labels, **kwargs)\nax[1].set_title('learned cluster labels')\n\nax[0].scatter(X[:, 0], X[:, 1], c=digits.target, **kwargs)\nax[0].set_title('true labels')\nplt.show()","f7b1ae07":"from sklearn.metrics import confusion_matrix\n# print(confusion_matrix(digits.target, labels))\n\nfig = plt.figure(figsize=(12,8))\nplt.imshow(confusion_matrix(digits.target, labels),\n           cmap='Blues', interpolation='nearest')\nplt.colorbar()\nplt.grid(False)\nplt.ylabel('true')\nplt.xlabel('predicted')\nplt.show()","dd142844":"from sklearn.datasets import load_sample_image\nchina = load_sample_image(\"china.jpg\")\nfig = plt.figure(figsize=(12,10))\nplt.imshow(china)\nplt.grid(False)\nplt.show()","a4b7e234":"print(china.shape)\n# normalize to standard vector\nX = (china \/ 255.0).reshape(-1, 3)\nprint(X.shape)","55cfc1dc":"def plot_pixels(data, title, colors=None, N=10000):\n    if colors is None:\n        colors = data\n    \n    # choose a random subset\n    rng = np.random.RandomState(0)\n    i = rng.permutation(data.shape[0])[:N]\n    colors = colors[i]\n    R, G, B = data[i].T\n    \n    fig, ax = plt.subplots(1, 2, figsize=(16, 6))\n    ax[0].scatter(R, G, color=colors, marker='.')\n    ax[0].set(xlabel='Red', ylabel='Green', xlim=(0, 1), ylim=(0, 1))\n\n    ax[1].scatter(R, B, color=colors, marker='.')\n    ax[1].set(xlabel='Red', ylabel='Blue', xlim=(0, 1), ylim=(0, 1))\n\n    fig.suptitle(title, size=20);\n    plt.show()\nplot_pixels(X, title='Input color space: 16 million possible colors')","3f21953f":"# from sklearn.cluster import MiniBatchKMeans\nnumColors = 16\nmodel = KMeans(numColors)\nmodel.fit(X)\nnew_colors = model.cluster_centers_[model.predict(X)]\n\nplot_pixels(X, colors=new_colors, title=\"Reduced color space: {} colors\".format(numColors))","c34044a0":"# Compress 256^3 colors \nfrom sklearn.cluster import MiniBatchKMeans\nimport seaborn as sns\n\n# model = MiniBatchKMeans(numColors)\nlabels = model.fit_predict(X)\ncolors = model.cluster_centers_\nnew_image = colors[labels].reshape(china.shape)\nnew_image = (255 * new_image).astype(np.uint8)\n\n# create and plot the new image\nfig, ax = plt.subplots(1, 2, figsize=(25, 25))\nwith sns.axes_style('white'):\n    ax[0].imshow(china)\n    ax[0].set_title('input: 16 million colors')\n\n    ax[1].imshow(new_image)\n    ax[1].set_title('{0} colors'.format(numColors))\nplt.show()","fbbd17da":"# KMeans as a Vector Quantizer ","7898cd1c":"# Compress image by grouping similar colors using KMeans","2e57f383":"### Cluster and plot digit centroids","c1016ba0":"## Load digits data"}}