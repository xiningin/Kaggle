{"cell_type":{"c885642d":"code","2e57e1a6":"code","30d97588":"code","237b67ee":"code","a4bbee18":"code","16ab8527":"code","9a95e743":"code","15e32540":"code","c4934ffa":"code","a95185d2":"code","009e6de8":"code","5c0caefb":"code","381a3a02":"code","82789527":"code","7a8eb6bf":"code","24c98b44":"code","aac50b32":"code","5c221e75":"code","3ee4981b":"code","858ffaa4":"code","790adcfa":"code","84979e9e":"code","d151bbc5":"code","b632c222":"code","389ab3b1":"code","48e404c5":"code","1cd72ab5":"code","71c4b40d":"code","3505f185":"code","6e1ea15a":"code","3a7c007b":"code","414d5e96":"code","9eed4bee":"code","d5229df7":"code","9195810b":"code","8b40a0be":"code","b93b9826":"code","2d6a6949":"code","d2035f13":"code","184f41ad":"code","59fa4e0a":"code","792060ea":"code","b9abe5c9":"code","974ec9c5":"code","35f78b84":"code","fdfa170d":"code","d6ffd27c":"code","9ff40f6c":"code","052e9429":"code","33f35fb6":"code","c21adc01":"code","f35e9058":"code","57e2ed83":"code","87accf04":"code","7845ec83":"code","e8142788":"code","ec1eb7d6":"code","838bcdbc":"code","3a7e9f23":"code","2d8f7599":"code","3793c366":"code","8a364a8b":"code","987aec5a":"code","5d475ee9":"code","7e3ca86e":"code","b00f481f":"code","1cce3a5c":"code","4741448f":"code","9fa87647":"code","d41bae1d":"code","986b08b4":"code","6a2d5d8f":"code","36e11168":"code","572888d7":"code","64ee43fd":"code","156ebc8a":"code","0e7f5207":"code","b13f7c3a":"code","15620f7e":"code","aa6f5639":"code","1042a8ad":"code","659a71a8":"code","fed16a8c":"code","561cbed3":"code","2d62a9ca":"code","ebc73496":"code","51ebe3b4":"code","d94e47ee":"code","801edceb":"code","384a291f":"markdown","caaafced":"markdown","b0a36965":"markdown","a19cfce5":"markdown","68e769c6":"markdown","b71237de":"markdown","7e689ef4":"markdown","917b91c8":"markdown","1b73575b":"markdown","58654509":"markdown","826b32f6":"markdown","c78d59a5":"markdown","f35e9003":"markdown","dec3b6b7":"markdown","59b2cec6":"markdown","052905bf":"markdown","fc04d320":"markdown","60503270":"markdown","c098a104":"markdown","673d67c5":"markdown","6dfec0f2":"markdown","1f7d6ede":"markdown","aef3e175":"markdown","020c529a":"markdown","01fee48e":"markdown","d2f71a24":"markdown","bb9c3f8d":"markdown","0e1e273d":"markdown","7fc797dc":"markdown","aea35f5e":"markdown","82d86e31":"markdown","e36f935b":"markdown","15ef6a2c":"markdown","c8974d39":"markdown","4cdabc45":"markdown","0ff73387":"markdown","3987ceb1":"markdown","208cd819":"markdown","02401612":"markdown","da5274cf":"markdown","9a8d1f83":"markdown","5cf0df07":"markdown","33dfbd75":"markdown","ab4bbed6":"markdown","4d241cfe":"markdown","57952e19":"markdown","3e1efad8":"markdown","16b57a52":"markdown","28f8deeb":"markdown","3915d253":"markdown","bd3ad9d7":"markdown","07505a39":"markdown","dbb16220":"markdown","4613d8f1":"markdown","91634e5a":"markdown","412dc820":"markdown","2c37acce":"markdown","ba0d53db":"markdown","510a6f1f":"markdown","5dfecf40":"markdown","0db593f5":"markdown","7aaffb54":"markdown","98646a85":"markdown","37fe7fbd":"markdown","7727f1e3":"markdown","176339b0":"markdown","22a98249":"markdown","e8d50b28":"markdown","3d2b3200":"markdown","2a0d2e2d":"markdown","9470f101":"markdown","47818283":"markdown","5d6f8bc7":"markdown","d6125b93":"markdown","ca412315":"markdown","3d931f08":"markdown","30bba2ee":"markdown","271bbfe4":"markdown","5f5f4488":"markdown","ec22a4e3":"markdown","3259afe1":"markdown","bc28b7e5":"markdown","241758cc":"markdown","d675ac2e":"markdown","1d36815f":"markdown"},"source":{"c885642d":"# Loading packages\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom scipy import stats\nimport warnings \nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport gc","2e57e1a6":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","30d97588":"train.head()","237b67ee":"train.isnull().sum()","a4bbee18":"test.isnull().sum()","16ab8527":"train.nunique()","9a95e743":"train['price'].describe()","15e32540":"#histogram\nf, ax = plt.subplots(figsize = (8, 6))\nsns.distplot(train['price'])","c4934ffa":"train['price'].skew()","a95185d2":"train['price'].kurt()","009e6de8":"# Scaling Example\n# generate 1000 data points randomly drawn from an exponential distribution\nfrom mlxtend.preprocessing import minmax_scaling\nimport numpy\noriginal_data = numpy.random.exponential(size = 1000)\n\n# mix-max scale the data between 0 and 1\nscaled_data = minmax_scaling(original_data, columns = [0])\n\n# plot both together to compare\nfig, ax=plt.subplots(1,2)\nsns.distplot(original_data, ax=ax[0])\nax[0].set_title(\"Original Data\")\nsns.distplot(scaled_data, ax=ax[1])\nax[1].set_title(\"Scaled data\")\ndel numpy #import numpy\ub97c \ud574\uc81c","5c0caefb":"# normalize the exponential data with boxcox\nnormalized_data = stats.boxcox(original_data)\n\n# plot both together to compare\nfig, ax=plt.subplots(1,2)\nsns.distplot(original_data, ax=ax[0])\nax[0].set_title(\"Original Data\")\nsns.distplot(normalized_data[0], ax=ax[1])\nax[1].set_title(\"Normalized data\")","381a3a02":"#histogram\n\nfig = plt.figure(figsize = (8, 6))\n\nfig.add_subplot(1, 3, 1)\nsns.distplot(sp.sqrt(train['price'])).set_title('square-root') # square root transformation\n\nfig.add_subplot(1, 3, 2)\nsns.distplot(train['price'] ** (1\/float(4.0))).set_title('fourth-root') # fourth square root transformation\n\nfig.add_subplot(1, 3, 3)\nsns.distplot(sp.special.log1p(train['price'])).set_title('log1p') # log1p transformation","82789527":"# price\uc5d0 square-root\ub97c \ucde8\ud568\ndata = pd.concat([train['price'], train['sqft_living']], axis = 1)\nf, ax = plt.subplots(figsize = (8, 6))\nfig = sns.regplot(x = 'sqft_living', y = 'price', data = data)","7a8eb6bf":"# price\uc5d0 fourth-root\ub97c \ucde8\ud568\ndata = pd.concat([train['price'] ** (1\/float(4.0)), train['sqft_living']], axis = 1)\nf, ax = plt.subplots(figsize = (8, 6))\nfig = sns.regplot(x = 'sqft_living', y = 'price', data = data)","24c98b44":"fig = plt.figure(figsize = (8, 6))\n\nfig.add_subplot(1, 3, 1)\ndata = pd.concat([pd.DataFrame(sp.sqrt(train['price'])), train['sqft_living']], axis = 1)\ndata.columns.values[0] = 'price'\nreg = sns.regplot(x = 'sqft_living', y = 'price', data = data).set_title('square-root transformation')\n\nfig.add_subplot(1, 3, 2)\ndata = pd.concat([(train['price'] ** 1\/float(4.0)), train['sqft_living']], axis = 1)\nreg = sns.regplot(x = 'sqft_living', y = 'price', data = data).set_title('fourth-root transformation')\n\nfig.add_subplot(1, 3, 3)\ndata = pd.concat([sp.special.log1p(train['price']), train['sqft_living']], axis = 1)\nreg = sns.regplot(x = 'sqft_living', y = 'price', data = data).set_title('log1p transformation')","aac50b32":"train['price'] = sp.special.log1p(train['price'])","5c221e75":"# correlation\uc774 \ub192\uc740 \uc0c1\uc704 10\uac1c\uc758 heatmap\n# continuous + sequential variables --> spearman\n# abs\ub294 \ubc18\ube44\ub840\uad00\uacc4\ub3c4 \uace0\ub824\ud558\uae30 \uc704\ud568\n# https:\/\/www.kaggle.com\/junoindatascience\/let-s-eda-it \uc900\ud638\ub2d8\uc774 \uc218\uc815\ud574 \uc900 \ucf54\ub4dc\ub85c \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4. \n\ncor_abs = abs(train.corr(method='spearman')) \ncor_cols = cor_abs.nlargest(n=10, columns='price').index # price\uacfc correlation\uc774 \ub192\uc740 column 10\uac1c \ubf51\uae30(\ub0b4\ub9bc\ucc28\uc21c)\n# spearman coefficient matrix\ncor = sp.array(sp.stats.spearmanr(train[cor_cols].values))[0] # 10 x 10\nprint(cor_cols.values)\nplt.figure(figsize=(10,10))\nsns.set(font_scale=1.25)\nsns.heatmap(cor, fmt='.2f', annot=True, square=True , annot_kws={'size' : 8} ,xticklabels=cor_cols.values, yticklabels=cor_cols.values)","3ee4981b":"data = pd.concat([train['price'], train['grade']], axis = 1)\nf, ax = plt.subplots(figsize = (8, 6))\nfig = sns.boxplot(x = 'grade', y = 'price', data = data)","858ffaa4":"data = pd.concat([train['price'], train['sqft_living']], axis = 1)\nf, ax = plt.subplots(figsize = (8, 6))\nfig = sns.regplot(x = 'sqft_living', y = 'price', data = data)","790adcfa":"data = pd.concat([train['price'], train['sqft_living15']], axis = 1)\nf, ax = plt.subplots(figsize = (8, 6))\nfig = sns.regplot(x = 'sqft_living15', y = 'price', data = data)","84979e9e":"data = pd.concat([train['price'], train['sqft_above']], axis = 1)\nf, ax = plt.subplots(figsize = (8, 6))\nfig = sns.regplot(x = 'sqft_above', y = 'price', data = data)","d151bbc5":"data = pd.concat([train['price'], train['bathrooms']], axis=1)\nf, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='bathrooms', y=\"price\", data=data)","b632c222":"data = pd.concat([train['price'], train['bedrooms']], axis=1)\nf, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='bedrooms', y=\"price\", data=data)","389ab3b1":"test[test['bedrooms'] > 10]","48e404c5":"data = pd.concat([train['price'], train['floors']], axis=1)\nf, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='floors', y=\"price\", data=data)","1cd72ab5":"train.head()","71c4b40d":"train['sqft_living_gap'] = train['sqft_living15'] - train['sqft_living']\ntrain['sqft_lot_gap'] = train['sqft_lot15'] - train['sqft_lot']","3505f185":"train['sqft_living_gap'].describe()","6e1ea15a":"data = pd.concat([train['price'], train['sqft_living_gap']], axis = 1)\nf, ax = plt.subplots(figsize = (8,6))\nfig = sns.regplot(x = 'sqft_living_gap', y = 'price', data = data)","3a7c007b":"train['sqft_lot_gap'].describe()","414d5e96":"data = pd.concat([train['price'], train['sqft_lot_gap']], axis = 1)\nf, ax = plt.subplots(figsize = (8,6))\nfig = sns.regplot(x = 'sqft_lot_gap', y = 'price', data = data)","9eed4bee":"data = pd.concat([train['price'], train['sqft_living']], axis = 1)\nf, ax = plt.subplots(figsize = (8,6))\nfig = sns.regplot(x = 'sqft_living', y = 'price', data = data)","d5229df7":"sorted(set(test['sqft_living']) - set(train['sqft_living']), reverse = True)[0:10]","9195810b":"max(test['sqft_living'])","8b40a0be":"train.loc[train['sqft_living'] > 12000]","b93b9826":"train = train.loc[(train['id'] != 5108) & (train['id'] != 8912),]","2d6a6949":"data = pd.concat([train['price'], train['grade']], axis = 1)\nf, ax = plt.subplots(figsize = (8,6))\nfig = sns.boxplot(x = 'grade', y = 'price', data = data)","d2035f13":"train[train['grade'] == 3]","184f41ad":"train.loc[(train['price']>14.5) & (train['grade'] == 7)]","59fa4e0a":"train.loc[(train['price']>14.5) & (train['grade'] == 8)]","792060ea":"train.loc[(train['price'] > 15.5) & (train['grade'] == 11)]","b9abe5c9":"train = train.loc[(train['id'] != 12346) & (train['id'] != 7173) & (train['id'] != 2775)]","974ec9c5":"f, ax = plt.subplots(figsize = (8, 6))\nsns.distplot(train['sqft_lot'])","35f78b84":"f, ax = plt.subplots(figsize = (8, 6))\nsns.distplot(sp.special.log1p(train['sqft_lot']))","fdfa170d":"data = pd.concat([train['price'], sp.special.log1p(train['sqft_lot'])], axis = 1)\nf, ax = plt.subplots(figsize = (8,6))\nfig = sns.regplot(x = 'sqft_lot', y = 'price', data = data)","d6ffd27c":"for df in [train,test]:\n    df['year'] = df.date.apply(lambda x: x[0:4]).astype(int)\n    df['month'] = df.date.apply(lambda x: x[4:6]).astype(int)\n    df['day'] = df.date.apply(lambda x: x[6:8]).astype(int)\n    df['date'] = df['date'].apply(lambda x: x[0:8])\n    df['yr_renovated'] = df['yr_renovated'].apply(lambda x: sp.nan if x == 0 else x)\n    df['yr_renovated'] = df['yr_renovated'].fillna(df['yr_built'])","9ff40f6c":"for df in [train,test]:\n    # bedrooms\uc640 bathrooms\uc758 \uac1c\uc218\ub97c \uc885\ud569\ud55c \ubc29\uc758 \uac1c\uc218\n    df['total_rooms'] = df['bedrooms'] + df['bathrooms']\n    \n    # grade\uc640 condition\uc758 \uacf1\uc744 \ud1b5\ud55c \uc0c8\ub85c\uc6b4 \uc9c0\ud45c \uc0dd\uc131\n    df['grade_condition'] = df['grade'] * df['condition']\n    \n    # \uba74\uc801\uad00\ub828 \ubcc0\uc218\ub4e4\uc744 \uc774\uc6a9\ud55c \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131\n    \n    # 15\ub144 \ubcc0\ud654 \uc774\uc804 \ubd80\uc9c0\uc640 \uc8fc\uac70\uacf5\uac04\uc758 \ud3c9\ubc29\ud53c\ud2b8 \ud569\n    df['sqft_total'] = df['sqft_living'] + df['sqft_lot'] \n    \n    # 15\ub144 \ubcc0\ud654 \uc774\uc804 \ubd80\uc9c0, \uc8fc\uac70\uacf5\uac04, \uc9c0\ud558\uc2e4 \uc81c\uc678, \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29\ud53c\ud2b8 \ud569\n    df['sqft_total_size'] = df['sqft_living'] + df['sqft_lot'] + df['sqft_above'] + df['sqft_basement']\n    \n    # 15\ub144 \ubcc0\ud654 \uc774\ud6c4 \ubd80\uc9c0\uc640 \uc8fc\uac70\uacf5\uac04\uc758 \ud3c9\ubc29\ud53c\ud2b8 \ud569\n    df['sqft_total15'] = df['sqft_living15'] + df['sqft_lot15'] \n    \n    # \uc8fc\uac70\uacf5\uac04 \ud3c9\ubc29\ud53c\ud2b8\uc758 \ubcc0\ud654 \uc774\uc804\uacfc \ubcc0\ud654 \uc774\ud6c4\uc758 \ucc28\uc774\n    df['sqft_living_gap'] = sp.absolute(df['sqft_living15'] - df['sqft_living'])\n    \n    # 15\ub144 \ubcc0\ud654 \uc774\ud6c4 \ubd80\uc9c0 \ud3c9\ubc29\ud53c\ud2b8\uc758 \ucc28\uc774\n    df['sqft_lot_gap'] = sp.absolute(df['sqft_lot15'] - df['sqft_lot'])\n    \n    # \uc7ac\uac74\ucd95 \uc5ec\ubd80\ub97c \ud1b5\ud55c \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131\n    df['is_renovated'] = df['yr_renovated'] - df['yr_built']\n    df['is_renovated'] = df['is_renovated'].apply(lambda x: 0 if x == 0 else 1)\n    df['date'] = df['date'].astype('int')\n    \n    df['garret'] = (df.floors%1==0.5).astype(int)\n    df['diff_of_rooms'] = sp.absolute(df['bedrooms'] - df['bathrooms'])\n    df['living_per_floors'] = df['sqft_living'] \/ df['floors']\n    df['total_score'] = df['condition'] + df['grade'] + df['view']\n    df['living_per_lot'] = df['sqft_living'] \/ df['sqft_lot']\n    df['gap_living_per_floor'] = df['sqft_living_gap'] \/ df['floors']\n    df['exist_special'] = df.garret + df.waterfront + df.is_renovated","052e9429":"train['per_price'] = train['price']\/train['sqft_total_size']\nzipcode_price = train.groupby(['zipcode'])['per_price'].agg({'mean','var'}).reset_index()\ntrain = pd.merge(train,zipcode_price,how='left',on='zipcode')\ntest = pd.merge(test,zipcode_price,how='left',on='zipcode')\n\nfor df in [train,test]:\n    df['zipcode_mean'] = df['mean'] * df['sqft_total_size']\n    df['zipcode_var'] = df['var'] * df['sqft_total_size']\n    del df['mean']; del df['var']\n    \ndel train['per_price']","33f35fb6":"# transformation\nskew_columns = ['sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement']\n\nfor c in skew_columns:\n    train[c] = sp.special.log1p(train[c].values)\n    test[c] = sp.special.log1p(test[c].values)","c21adc01":"train.head()","f35e9058":"X_features_dummy = pd.get_dummies(train, columns = ['waterfront', 'zipcode', 'yr_built', 'yr_renovated', 'year', 'month', 'day', 'garret', 'is_renovated'])\nY_features_dummy = pd.get_dummies(test, columns = ['waterfront', 'zipcode', 'yr_built', 'yr_renovated', 'year', 'month', 'day', 'garret', 'is_renovated'])","57e2ed83":"from sklearn.preprocessing import LabelEncoder\n\nle_columns = ['bedrooms', 'bathrooms', 'floors', 'view', 'condition', 'grade', 'total_rooms', 'grade_condition', 'exist_special', 'living_per_lot', 'living_per_floors',\n              'gap_living_per_floor', 'total_score', 'diff_of_rooms']\n\n\nle = LabelEncoder()\n\nfor i in le_columns : \n    X_features_dummy[i] = le.fit_transform(X_features_dummy[i])\n    Y_features_dummy[i] = le.fit_transform(Y_features_dummy[i])","87accf04":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\ntest_id = Y_features_dummy['id']\nY_test = Y_features_dummy.drop(['id'], axis = 1, inplace = False)\ny_target = X_features_dummy['price']\nX_data = X_features_dummy.drop(['price', 'id'], axis = 1, inplace = False)\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_target, test_size = 0.25, random_state = 42)","7845ec83":"lr = LinearRegression()\nlr.fit(X_train, y_train)","e8142788":"pred = sp.special.expm1(lr.predict(X_test))\ny_test = sp.special.expm1(y_test)\nmse = mean_squared_error(y_test, pred)\nrmse = mse ** float(0.5)\nprint('RMSE : {0:.3F}'.format(rmse))","ec1eb7d6":"import statsmodels.formula.api as sm\nfrom statsmodels.sandbox.regression.predstd import wls_prediction_std\n\ny = X_features_dummy['price']\nX = X_features_dummy.drop(['price', 'id'], axis = 1, inplace = False)\ntests = Y_features_dummy\n\n# X_features_dummy \ub370\uc774\ud130 \ub0b4, \ubaa8\ub4e0 X\ub97c \uc774\uc6a9\ud558\uc5ec Y\uc778 price\ub97c \uc608\uce21\ud558\ub3c4\ub85d \ud568\nresult = sm.OLS(y, X).fit()\n\nprint(result.summary())","838bcdbc":"# fitted values\nmodel_fitted_y = result.fittedvalues\n\n# model residuals\nmodel_residuals = result.resid\n\n# normalized residuals\nmodel_norm_residuals = result.get_influence().resid_studentized_internal\n\n# absolute squared normalized residuals\nmodel_norm_residuals_abs_sqrt = sp.sqrt(sp.absolute(model_norm_residuals))\n\n# absolute residuals\nmodel_abs_resid = sp.absolute(model_residuals)\n\n# leverage, from statsmodel internals\nmodel_leverage = result.get_influence().hat_matrix_diag\n\n# cook's distance, from sttasmodels internals\nmodel_cooks = result.get_influence().cooks_distance[0]","3a7e9f23":"plot_lm_1 = plt.figure(1)\nplot_lm_1.set_figheight(8)\nplot_lm_1.set_figwidth(12)\n\nplot_lm_1.axes[0] = sns.residplot(model_fitted_y, 'price', data=X_features_dummy, \n                          lowess=True, \n                          scatter_kws={'alpha': 0.5}, \n                          line_kws={'color': 'red', 'lw': 1, 'alpha': 0.8})\n\nplot_lm_1.axes[0].set_title('Residuals vs Fitted')\nplot_lm_1.axes[0].set_xlabel('Fitted values')\nplot_lm_1.axes[0].set_ylabel('Residuals')\n\n# annotations\nabs_resid = model_abs_resid.sort_values(ascending=False)\nabs_resid_top_3 = abs_resid[:3]\n\nfor i in abs_resid_top_3.index:\n    plot_lm_1.axes[0].annotate(i, \n                               xy=(model_fitted_y[i], \n                                   model_residuals[i]));","2d8f7599":"from statsmodels.graphics.gofplots import ProbPlot\n\nQQ = ProbPlot(model_norm_residuals)\nplot_lm_2 = QQ.qqplot(line='45', alpha=0.5, color='#4C72B0', lw=1)\n\nplot_lm_2.set_figheight(8)\nplot_lm_2.set_figwidth(12)\n\nplot_lm_2.axes[0].set_title('Normal Q-Q')\nplot_lm_2.axes[0].set_xlabel('Theoretical Quantiles')\nplot_lm_2.axes[0].set_ylabel('Standardized Residuals');\n\n# annotations\nabs_norm_resid = sp.flip(sp.argsort(sp.absolute(model_norm_residuals)), 0)\nabs_norm_resid_top_3 = abs_norm_resid[:3]\n\nfor r, i in enumerate(abs_norm_resid_top_3):\n    plot_lm_2.axes[0].annotate(i, \n                               xy=(sp.flip(QQ.theoretical_quantiles, 0)[r],\n                                   model_norm_residuals[i]));","3793c366":"plot_lm_3 = plt.figure(3)\nplot_lm_3.set_figheight(8)\nplot_lm_3.set_figwidth(12)\n\nplt.scatter(model_fitted_y, model_norm_residuals_abs_sqrt, alpha=0.5)\nsns.regplot(model_fitted_y, model_norm_residuals_abs_sqrt, \n            scatter=False, \n            ci=False, \n            lowess=True,\n            line_kws={'color': 'red', 'lw': 1, 'alpha': 0.8})\n\nplot_lm_3.axes[0].set_title('Scale-Location')\nplot_lm_3.axes[0].set_xlabel('Fitted values')\nplot_lm_3.axes[0].set_ylabel('$\\sqrt{|Standardized Residuals|}$');\n\n# annotations\nabs_sq_norm_resid = sp.flip(sp.argsort(model_norm_residuals_abs_sqrt), 0)\nabs_sq_norm_resid_top_3 = abs_sq_norm_resid[:3]\n\nfor i in abs_norm_resid_top_3:\n    plot_lm_3.axes[0].annotate(i, \n                               xy=(model_fitted_y[i], \n                                   model_norm_residuals_abs_sqrt[i]));\n","8a364a8b":"plot_lm_4 = plt.figure(4)\nplot_lm_4.set_figheight(8)\nplot_lm_4.set_figwidth(12)\n\nplt.scatter(model_leverage, model_norm_residuals, alpha=0.5)\nsns.regplot(model_leverage, model_norm_residuals, \n            scatter=False, \n            ci=False, \n            lowess=True,\n            line_kws={'color': 'red', 'lw': 1, 'alpha': 0.8})\n\nplot_lm_4.axes[0].set_xlim(0, 0.20)\nplot_lm_4.axes[0].set_ylim(-3, 5)\nplot_lm_4.axes[0].set_title('Residuals vs Leverage')\nplot_lm_4.axes[0].set_xlabel('Leverage')\nplot_lm_4.axes[0].set_ylabel('Standardized Residuals')\n\n# annotations\nleverage_top_3 = sp.flip(sp.argsort(model_cooks), 0)[:3]\n\nfor i in leverage_top_3:\n    plot_lm_4.axes[0].annotate(i, \n                               xy=(model_leverage[i], \n                                   model_norm_residuals[i]))\n    \n# shenanigans for cook's distance contours\ndef graph(formula, x_range, label=None):\n    x = x_range\n    y = formula(x)\n    plt.plot(x, y, label=label, lw=1, ls='--', color='red')\n\np = len(result.params) # number of model parameters\n\ngraph(lambda x: sp.sqrt((0.5 * p * (1 - x)) \/ x), \n      sp.linspace(0.001, 0.200, 50), \n      'Cook\\'s distance') # 0.5 line\ngraph(lambda x: sp.sqrt((1 * p * (1 - x)) \/ x), \n      sp.linspace(0.001, 0.200, 50)) # 1 line\nplt.legend(loc='upper right');","987aec5a":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint as sp_randint","5d475ee9":"test_id = test['id']\nY_test = test.drop(['id'], axis = 1, inplace = False)","7e3ca86e":"y_target = train['price']\nX_data = train.drop(['price', 'id'], axis = 1, inplace = False)\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_target, test_size = 0.25, random_state = 42)","b00f481f":"forest_reg = RandomForestRegressor()","1cce3a5c":"import numpy as np\ndef report(results, n_top=3):\n    for i in range(1, n_top + 1):\n        candidates = np.flatnonzero(results['rank_test_score'] == i)\n        for candidate in candidates:\n            print(\"Model with rank: {0}\".format(i))\n            print(\"Mean validation score: {0:.3f} (std: {1:.3f})\".format(\n                  results['mean_test_score'][candidate],\n                  results['std_test_score'][candidate]))\n            print(\"Parameters: {0}\".format(results['params'][candidate]))\n            print(\"\")","4741448f":"param_dist = {\"max_depth\": [7, 11, 15, 18, 21],\n              \"max_features\": sp_randint(1, 31),\n              \"min_samples_split\": sp_randint(2, 21),\n              \"min_samples_leaf\": sp_randint(1, 21),\n              \"bootstrap\": [True, False],\n              \"random_state\": [42]\n             }\n\nn_iter_search = 20\nrandom_search = RandomizedSearchCV(forest_reg, param_distributions=param_dist,\n                                   n_iter=n_iter_search)","9fa87647":"random_search.fit(X_train, y_train)","d41bae1d":"report(random_search.cv_results_)","986b08b4":"from sklearn.metrics import mean_squared_error as mse","6a2d5d8f":"pred = sp.special.expm1(random_search.predict(X_test))\ny_test = sp.expm1(y_test)\nrmse = (mean_squared_error(y_test, pred)) ** float(0.5)\nprint('RMSE : {0:.3F}'.format(rmse))","36e11168":"test_pred = sp.special.expm1(random_search.predict(Y_test))","572888d7":"submission = pd.DataFrame({'id' : test_id, 'price' : test_pred})","64ee43fd":"submission.to_csv('rfgridcv.csv', index=False)","156ebc8a":"from xgboost import XGBRegressor\nfrom sklearn import model_selection","0e7f5207":"test_id = test['id']\nY_test = test.drop(['id'], axis = 1, inplace = False)","b13f7c3a":"y_target = train['price']\nX_data = train.drop(['price', 'id'], axis = 1, inplace = False)\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_target, test_size = 0.25, random_state = 42)\nwatchlist=[(X_train,y_train),(X_test,y_test)]","15620f7e":"# feature missmatch \uc5d0\ub7ec\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud568\nY_test = Y_test[X_test.columns]","aa6f5639":"xgb_model= XGBRegressor(tree_method='gpu_hist',\n                        n_estimators=100000,\n                        num_round_boost=500,\n                        show_stdv=False,\n                        feature_selector='greedy',\n                        verbosity=0,\n                        reg_lambda=10,\n                        reg_alpha=0.01,\n                        learning_rate=0.001,\n                        seed=42,\n                        colsample_bytree=0.8,\n                        colsample_bylevel=0.8,\n                        subsample=0.8,\n                        n_jobs=-1,\n                        gamma=0.005,\n                        base_score=np.mean(y_target)\n                        )","1042a8ad":"xgb_model.fit(X_train,y_train, verbose=False, eval_set=watchlist,\n              eval_metric='rmse',\n              early_stopping_rounds=1000)","659a71a8":"xgb_score=mse(sp.special.expm1(xgb_model.predict(X_test)),sp.special.expm1(y_test))**0.5\n\nprint(\"RMSE : {}\".format(xgb_score))","fed16a8c":"xgb_pred = sp.special.expm1(xgb_model.predict(Y_test))","561cbed3":"submission=pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['price']= xgb_pred\nsubmission.to_csv('xgb_submission.csv', index = False)","2d62a9ca":"import lightgbm as lgb","ebc73496":"y_target = train['price']\nX_data = train.drop(['price', 'id'], axis = 1, inplace = False)\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_target, test_size = 0.2, random_state = 42)\n\nmodel_lgb=lgb.LGBMRegressor(\n                           learning_rate=0.001,\n                           n_estimators=100000,\n                           subsample=0.6,\n                           colsample_bytree=0.6,\n                           reg_alpha=0.2,\n                           reg_lambda=10,\n                           num_leaves=35,\n                           silent=True,\n                           min_child_samples=10,\n                            \n                           )\n\nmodel_lgb.fit(X_train,y_train,eval_set=(X_test,y_test),verbose=0,early_stopping_rounds=1000,\n              eval_metric='rmse')\n\nlgb_score=mse(sp.special.expm1(model_lgb.predict(X_test)),sp.special.expm1(y_test))**0.5\nprint(\"RMSE unseen : {}\".format(lgb_score))","51ebe3b4":"lgb_pred = sp.special.expm1(model_lgb.predict(Y_test))","d94e47ee":"submission=pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['price']= lgb_pred\nsubmission.to_csv('lgbm_submission.csv', index = False)","801edceb":"score=lgb_score+xgb_score\nlgb_ratio=1-lgb_score\/score\nxgb_ratio=1-xgb_score\/score\npredict=lgb_pred*(lgb_ratio)+xgb_pred*(xgb_ratio)\nprint('lgb_ratio={}, xgb_ratio={}'.format(lgb_ratio,xgb_ratio))\nsubmission=pd.read_csv('..\/input\/sample_submission.csv')\nsubmission.loc[:,'price']=predict\nsubmission.to_csv('xgb_lgbm.csv',index=False)","384a291f":"1. **Regularization** : Standard GBM(Gradient Boosting Machine)\uc740 overfitting\uc744 \uc904\uc774\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub429\ub2c8\ub2e4.\n\n2. **Parallel Processing** : XGBoost\ub294 \ubcd1\ub82c \ucc98\ub9ac\ub97c \uad6c\ud604\ud558\uba70 GBM\uacfc \ube44\uad50\ud574 \ub9e4\uc6b0 \ube60\ub985\ub2c8\ub2e4.\n\n3. **High Flexibility** : XGBoost\ub294 \uc720\uc800\uac00 custom optimization objectives\uc640 \ud3c9\uac00 \uc9c0\ud45c(evaluation criteria)\ub97c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n4. **Handling Missing Values** : XGBoost\ub294 missing value\ub97c \ud578\ub4e4\ub9c1\ud558\ub294 routine\uc774 in-built\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n5. **Tree Pruning** : GBM\uc740 greedy algorithm\uacfc \uac19\uc774, negative loss\uac00 \ubc1c\uc0dd\ud558\uba74 node split\uc744 \uc911\ub2e8\ud568\uc5d0 \ubc18\ud574, XGBoost\ub294 \uc9c0\uc815\ub41c max_depth\uae4c\uc9c0 split\ud558\uace0 \ud2b8\ub9ac\ub97c \uac70\uafb8\ub85c \uc798\ub77c positive gain\uc774 \uc5c6\uc73c\uba74 pruning\uc744 \ud569\ub2c8\ub2e4.\n\n6. **Built-in Cross-Validation** : XGBoost\ub294 \uc720\uc800\uac00 \ub9e4 iteration\ub9c8\ub2e4 cross-validation\uc744 \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n\n7. **Continue on Existing Model** : \uc774\uc804\uc5d0 \uc2e4\ud589\uc2dc\ud0a8 last iteration\uc73c\ub85c\ubd80\ud130 XGBoost model\uc744 training\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4.","caaafced":"lightGBM\ubaa8\ub378\uc740 \ud574\ub2f9 \ucee4\ub110\uc744 \ucc38\uc870\ud558\uc5ec \uc791\uc131\ud558\uc600\uc74c\uc744 \uba85\uc2dc\ud569\ub2c8\ub2e4. https:\/\/www.kaggle.com\/marchen911\/xgboost-lightgbm-catboost","b0a36965":"## **<a id='3'> 3. \ub370\uc774\ud130 \uc804\ucc98\ub9ac <\/a>**","a19cfce5":"-------------------------------------------------","68e769c6":"* grade 7\uc911, \uac00\uc7a5 \uc704 \ub5a8\uc5b4\uc9c4 id 12346\uc744 \uc774\uc0c1\uce58\ub85c \ud310\ub2e8\ud558\uc5ec \uc81c\uac70\ud558\uace0\uc790 \ud569\ub2c8\ub2e4","b71237de":"### **- sqft_lot(\ubd80\uc9c0 \ud3c9\ubc29\ud53c\ud2b8)**","7e689ef4":"train data\uc758 price\uc5d0 log transformation\uc744 \ud574\uc8fc\uc5c8\uc73c\ubbc0\ub85c, \ucd94\ud6c4 \ubaa8\ub378\uc744 \ud1b5\ud574 \uc608\uce21\ub41c \ucd5c\uc885\uac12\uc5d0 exponential\uc744 \ucde8\ud574 \uc6d0\ub798\uc758 \uac12\uc73c\ub85c \uc81c\ucd9c\ud574\uc57c\ud568\uc744 \uc78a\uc9c0 \ub9d0\uc544\uc57c \ud569\ub2c8\ub2e4.","917b91c8":"### ** - sqft_living_gap(15\ub144 \uc774\uc804\uacfc \uc774\ud6c4 \uc8fc\uac70\uba74\uc801\uc758 \ucc28\uc774) **","1b73575b":"# **2019 2nd ML month with KaKR**\n**House Price Prediction Challenge**\n\ud604\uc6b0\ub2d8\uc758 \ucee4\ub110\uc744 \ubca0\uc774\uc2a4\ub85c \ub2e4\ub978 \ucee4\ub110\ub4e4\uc744 \ucc38\uace0\ud558\uba70 \uacf5\ubd80\uc911\uc785\ub2c8\ub2e4 \n    * https:\/\/www.kaggle.com\/chocozzz\/house-price-prediction-eda-updated-2019-03-12\/notebook\n\n- **[Updated]**  2019.03.22 - \uae30\uc874 \uc791\uc131\ub418\uc9c0 \uc54a\uc740 Description \ucd94\uac00 \ubc0f Scaling vs. Normalization\uc744 \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4.\n- **[Updated]**  2019.03.25 - \uc608\uc81c\ub97c \uc81c\uc678\ud55c \ubd80\ubd84\uc5d0\uc11c \uae30\uc874 numpy\ub97c \ud1b5\ud574 \uc791\uc131\ud55c \ubd80\ubd84\uc744 \ubcc0\uacbd\ud588\uc2b5\ub2c8\ub2e4(\uacf5\ubd80\ubaa9\uc801\uc758 \uc774\uc720). \ub610\ud55c, bathrooms \uc124\uba85 \uc624\ub958 \ubd80\ubd84\uc744 \uc218\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4.\n- **[Updated]**  2019.04.12 - \ucf54\ub4dc \uc0c1\uc138 \uc124\uba85 \ucd94\uac00 \ubc0f \ud30c\uc0dd\ubcc0\uc218 \ubd80\ubd84\uc744 \uc218\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4. Randomforest \ub0b4 RandomizedSearch \ucd94\uac00 \ubc0f XGBoost \ubaa8\ub378\uc744 \ucd94\uac00\ud558\uc600\uc2b5\ub2c8\ub2e4. \n- **[Updated]**  2019.04.15 - lgbm \ubaa8\ub378\uc744 \ucd94\uac00\ud558\uc600\uc2b5\ub2c8\ub2e4. \ud30c\uc0dd\ubcc0\uc218 \ucd94\uac00 \ubc0f \uadf8\ub85c \uc778\ud55c \ucf54\ub4dc \uc218\uc815\uc774 \uc788\uc2b5\ub2c8\ub2e4.","58654509":"## **<a id='231'> 2-3-1. Scaling vs. Normalization <\/a>**\nOne of the reasons that it's easy to get confused between scaling and normalization is because the terms are sometimes used interchangeably and, to make it even more confusing, they are very similar! In both cases, you're transforming the values of numeric variables so that the transformed data points have specific helpful properties. **The difference is that, in scaling, you're changing the range of your data while in normalization you're changing the shape of the distribution of your data**. Let's talk a little more in-depth about each of these options","826b32f6":"* test \ub370\uc774\ud130 \uc911 sqft_living\uc758 \uac00\uc7a5 \ud070 \uac12\uc774 9640\uc774\ubbc0\ub85c, \ud574\ub2f9 \ud06c\uae30\uc5d0 \ube44\ud574 \ub2e4\uc18c \ucc28\uc774\uac00 \uc788\ub294 sqft_living\uc774 12000\uc774\uc0c1\uc778 2\uac00\uc9c0 \uac12\uc744 \uc774\uc0c1\uce58\ub85c \ud310\ub2e8\ud558\uc5ec \uc81c\uac70\ud558\uace0\uc790 \ud568","c78d59a5":"\n* XGBoost\ub294 \ud574\ub2f9 \ucee4\ub110\uc744 \ucc38\uc870\ud558\uc5ec \uc791\uc131\ud1a0\ub85d \ud588\uc74c\uc744 \uba85\uc2dc\ud569\ub2c8\ub2e4. https:\/\/www.kaggle.com\/marchen911\/xgboost-lightgbm-catboost","f35e9003":"* grade == 11\uc911, \uac00\uc7a5 \uc704 \ub3d9\ub5a8\uc5b4\uc9c4 id 2775 \ub610\ud55c \uc774\uc0c1\uce58\ub85c \ud310\ub2e8\ud558\uc5ec \uc81c\uac70\ud558\uace0\uc790 \ud568","dec3b6b7":"### ** - floors **","59b2cec6":"## **Leverage Plot**","052905bf":"### ** - sqft_living15 ** (2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8)","fc04d320":"### ** - sqft_above(\uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8) **","60503270":"  * waterfront\ub294 \uc774\uc9c4 \ubcc0\uc218\uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n  * condition, view\ub294 \uc815\ub3c4\ub97c \ub098\ud0c0\ub0b4\ub294 Rank\ubcc0\uc218\ub85c \uc608\uc0c1\ub429\ub2c8\ub2e4.\n\n\uc790\uc138\ud55c \uc0ac\ud56d\uc740 \uc55e\uc73c\ub85c EDA\ub97c \ud1b5\ud574 \ubcc0\uc218\ub4e4\uc744 \uc790\uc138\ud788 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","c098a104":"### **<a id='23'> 2-3. \uc885\uc18d\ubcc0\uc218(Y) <\/a>**","673d67c5":"* \uc2dc\uac01\ud654 \ubc0f \uc124\uba85\uc758 \uc6a9\uc774\uc131\uc744 \uc704\ud574 OLS(Ordinary Least Square)\ub97c \ud1b5\ud574 \ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.","6dfec0f2":"Residuals vs Fitted Plot\uc740 x\ucd95\uc5d0 $\\hat{Y}$, y\ucd95\uc5d0 \uc794\ucc28 ${\\epsilon }_{i}$\ub85c \ucd9c\ub825\ud569\ub2c8\ub2e4. \uc120\ud615\ud68c\uadc0\uc5d0\uc11c \uc624\ucc28\ub294 \ud3c9\uade0\uc774 0\uc774\uace0 \ubd84\uc0b0\uc774 \uc77c\uc815\ud55c \uc815\uaddc\ubd84\ud3ec\ub97c \uac00\uc815\ud558\uae30\uc5d0 $\\hat{Y}$\uacfc \ubb34\uad00\ud558\uac8c \uc794\ucc28\uc758 \ud3c9\uade0\uc740 0\uc744 \uc911\uc2ec\uc73c\ub85c \uc77c\uc815\ud558\uac8c \ud328\ud134 \uc5c6\uc774 \ubd84\ud3ec\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.","1f7d6ede":"* bedrooms \ubcc0\uc218\uc758 \uac12\uc774 2 - 6\uc5d0\uc11c \uc0c1\uc704 \uc774\uc0c1\uce58\uac00, 1 - 3\uc5d0\uc11c \ud558\uc704 \uc774\uc0c1\uce58\uac00 \ub2e4\uc218 \uc874\uc7ac\ud569\ub2c8\ub2e4.","aef3e175":"## **Scale-Location Plot**","020c529a":"## **<a id='5'> 5. \ubaa8\ub378\ub9c1 <\/a>**","01fee48e":"## **QQ Plot**","d2f71a24":"# **\ubaa9\ucc28**\n- <a href='#1'>1. Data Fields<\/a>  \n- <a href='#2'>2. Exploratory Data Analysis(EDA)<\/a>  \n    - <a href='#21'>2-1. \uacb0\uce21\uce58 \ud655\uc778<\/a>\n    - <a href='#22'>2-2. \ubcc0\uc218\ubcc4 \uc720\ub2c8\ud06c \uac12 \uac1c\uc218 \ud655\uc778<\/a>\n    - <a href='#23'>2-3. \uc885\uc18d\ubcc0\uc218(Y)<\/a>\n    - <a href='#231'>2-3-1. Scaling vs. Normalization<\/a>\n    - <a href='#232'>2-3-2. \uc815\uaddc\ud654(Normalization)<\/a>\n    - <a href='#24'>2-4. \ub3c5\ub9bd\ubcc0\uc218(X)<\/a>\n    - <a href='#241'>2-4-1. \uc815\uaddc\ud654(Normalization)<\/a>\n- <a href='#3'>3. \uc774\uc0c1\uce58 \ucc98\ub9ac<\/a>  \n    - <a href='#32'>3-1. \ub3c5\ub9bd\ubcc0\uc218(X)<\/a>\n- <a href='#4'>4. \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131<\/a>  \n- <a href='#5'>5. \ubaa8\ub378\ub9c1<\/a>  \n    - <a href='#51'>5-1. Linear Regression<\/a>\n    - <a href='#52'>5-2. Random Forest<\/a>\n    - <a href='#53'>5-3. XGBoost<\/a>","bb9c3f8d":"--------------------------------------------------------------------------------------------------------------------------\n** - data\uc758 skew \uc644\ud654\ub97c \uc124\uba85\ud558\uae30 \uc774\uc804, \ub2e4\uc18c \ud5f7\uac08\ub9b4 \uc218 \uc788\ub294 Scaling\uacfc Normalization\uc758 \uc815\uc758\ub97c \uc54c\uc544\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.**\n\n* \ud574\ub2f9 \uc815\uc758\ub294 https:\/\/www.kaggle.com\/jfeng1023\/data-cleaning-challenge-scale-and-normalize-data\ub97c \ucc38\uc870\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n--------------------------------------------------------------------------------------------------------------------------","0e1e273d":"### **<a id='21'> 2-1. \uacb0\uce21\uce58 \ud655\uc778 <\/a>**","7fc797dc":"## \ucd94\uac00 \uc815\uaddc\ud654\n\ucf54\ub4dc\ub294 \ud574\ub2f9 \ub9c1\ud06c\ub97c \ud65c\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4. https:\/\/www.kaggle.com\/kcs93023\/2019-ml-month-2nd-baseline\n\n\ub610\ud55c, \ucf54\ub4dc\ub97c \ucd94\uac00 \ubc0f \uc218\uc815\ud558\uba70 Data Fields\uc5d0\uc11c \ub9d0\uc500\ub4dc\ub9b0 \uc810\uc744 \ud30c\uc0dd\ubcc0\uc218\ub85c \ub9cc\ub4e4\uc5b4\uc11c \uccb4\ud06c\ud574\ubcf4\uace0\uc790 \ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n\ud30c\uc0dd\ubcc0\uc218\uc911 \uc77c\ubd80\ub294 https:\/\/www.kaggle.com\/marchen911\/xgboost-lightgbm-catboost \ub97c \ucc38\uc870\ud558\uc600\uc2b5\ub2c8\ub2e4.","aea35f5e":"* square root\ubcf4\ub2e4\ub294 fourth-root transformation\uc744 \ud568\uc774 \ub9de\uc73c\ub098, log1p\uc640 \ube44\uad50\ud574\uc11c\ubcf4\uc790","82d86e31":"### **<a id='232'> 2-3-2. \uc815\uaddc\ud654(Normalization) <\/a>**\n#### **\ubcf8\ub798\uc758 \ub370\uc774\ud130\ub85c \ub3cc\uc544\uc640\uc11c,**  right-skewed\ub41c \uc885\uc18d\ubcc0\uc218(Y)\ub97c normalize\ud574\uc8fc\uae30 \uc704\ud558\uc5ec square-root, fourth-root, log transformation\uc744 \uc0ac\uc6a9\ud558\uba70 \uc774\ub97c \ube44\uad50\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","e36f935b":"#### \uc774\ub7ec\ud55c \ube44\uad50\ub97c \ud1b5\ud574, **\ub3c5\ub9bd\ubcc0\uc218\uc5d0 log transformation**\uc744 \uc0ac\uc6a9\ud568\uc774 \uc633\ub2e4\uace0 \ud310\ub2e8\ud558\uc5ec log1p\ub85c \uc9c4\ud589\ud558\uace0\uc790 \ud569\ub2c8\ub2e4.\n* log1p\ub294 log(1+x)\ub85c\uc11c, log 0\uc774 \ubc1c\uc0dd\ud560 \uacbd\uc6b0\ub97c \ub300\ube44\ud558\uc5ec log transformation\uc744 \ub300\uc2e0\ud558\uc5ec practical\ud558\uac8c \uc0ac\uc6a9\ub429\ub2c8\ub2e4,","15ef6a2c":"* grade 8 \uc911\uc5d0\uc11c\ub294, \uac00\uc7a5 \uc704\uc5d0 \ub5a8\uc5b4\uc9c4 price\uac00 14.8\uc774\uc0c1\uc778 id 7173\uc744 \uc774\uc0c1\uce58\ub85c \ud310\ub2e8\ud558\uc5ec \uc81c\uac70\ud558\uace0\uc790 \ud568","c8974d39":"* \uc608\uc2dc\uc5d0\uc11c \ub370\uc774\ud130\uc758 shape \ubcc0\ud654 \uc5c6\uc774 0 to 8\uc774\ub358 \ubc94\uc704\ub97c 0 to 1\ub85c \ubcc0\ud654\uc2dc\ucf1c\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.\n* \uc774\uc640 \uac19\uc774, **shape\uc758 \ubcc0\ud654 \uc5c6\uc774 range \ub9cc\uc744 \uc870\uc815\ud558\ub294 \uac83\uc774 scaling\uc785\ub2c8\ub2e4.**","4cdabc45":"* Test\uc5d0 \uc788\uc73c\uba70 Train\uc5d0 \uc5c6\ub294 sqft_living\uc758 \uac12\uc744 \uccb4\ud06c","0ff73387":"\ub370\uc774\ud130\uac00 0\uc5d0 \ub9e4\uc6b0 \ubab0\ub824\uc788\uc73c\uba70, \uadf8\ub798\ud504 \uc0c1 \uac10\uc18c\ud558\ub294 \uacbd\ud5a5\uc744 \ud45c\ud558\uace0 \uc788\uc73c\ub098  \uc5b4\ub5a0\ud55c \uacbd\ud5a5\uc131\uc774 \uc788\ub2e4\uace0 \ud30c\uc545\ud558\uae30\ub294 \ub2e4\uc18c \ud798\ub4e4\uc5b4 \ubcf4\uc785\ub2c8\ub2e4.\n\ud574\ub2f9 \ubcc0\uc218\ub4e4\uc740 \ud30c\uc0dd\ubcc0\uc218\ub85c\uc11c \uc720\uc9c0 \ud6c4, \ubaa8\ub378\uc5d0\uc11c\uc758 importance\ub97c \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","3987ceb1":"### **- sqft_living(\uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801))**","208cd819":"\uadf8\ub798\ud504\ub97c \ubcf4\uc558\uc744 \ub54c \uac10\uc18c\ud558\ub294 \uacbd\ud5a5\uc774 \uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc774\uba70 \uadf8\ub798\ud504\uc640 describe\ub97c \ud1b5\ud574 \ubcf4\uc558\uc744 \ub54c 15\ub144\ub3c4\uc758 \uc8fc\uac70\uacf5\uac04 \ud3c9\ubc29 \ud53c\ud2b8\ub85c \ubcc0\ud654\ud558\uba70 \uc99d\uac00\ud55c \uac12\ub4e4 \ubcf4\ub2e4 \ud06c\uac8c \uac10\uc18c\ud55c \uac12\ub4e4\uc774 \ub354\uc6b1 \ub208\uc5d0 \ub755\ub2c8\ub2e4.","02401612":"\uac00\uc7a5 \uba3c\uc800, Data fields\uc758 \ubcc0\uc218\ub4e4\uc744 \ubcf4\uba70 \ub370\uc774\ud130\ub97c \uc774\ud574\ud558\uace0,  \uc124\uba85\uc744 \ubcf4\uba70 \ud30c\uc0dd\ubcc0\uc218\uac00 \ub420 \uc218 \uc788\ub294 \uac83\ub4e4\uc744 \uccb4\ud06c\ud588\uc2b5\ub2c8\ub2e4.\n    * bedrooms\uc640 bathrooms\ub294 \uac01 room\uc758 \uac1c\uc218\ub97c \ub098\ud0c0\ub0b4\uace0 \uc788\uc5b4 \ube44\uc2b7\ud55c \ud2b9\uc131\uc744 \ub748\ub2e4 \ud30c\uc545\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4, \n      \uc774\ub97c \ud569\ud558\uc5ec bedroom\uacfc bathroom\uc744 \ubcc0\uc218 \uc0dd\uc131\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4\n    * sqft \uad00\ub828 \ubcc0\uc218\ub4e4\uc758 \uacbd\uc6b0, \uba74\uc801\uc758 \uc601\ud5a5\uc774 \uc788\uae30\uc5d0 \uba74\uc801\uc774 \ud074 \uacbd\uc6b0 \uac00\uaca9\uc774 \ub192\uc744 \uc218 \ubc16\uc5d0 \uc5c6\ub294 \uad00\uacc4\uac00 \n      \uc788\uc73c\ubbc0\ub85c, row\uac04 \uc0c1\ub300\uc801\uc778 \ube44\uad50\ub97c \uc704\ud574\uc11c\ub294 \uba74\uc801\uc758 \uc601\ud5a5\uc744 \uc904\uc774\ub294\uac8c \uc88b\uc744 \ub4ef \ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud55c \ubc29\uc548\uc740 \ucd94\ud6c4 \uc0dd\uac01 \ud574\ubcfc \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.\n    * \ubaa8\ub4e0 \uba74\uc801\uc744 \ub354\ud558\uace0, \uc774\ub97c \uc9d1\uac12\uc73c\ub85c \ub098\ub204\uc5b4 \uba74\uc801 \ub2f9 \ud3c9\uade0\uac00 \ubcc0\uc218\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub77c \uc0dd\uac01\ud569\ub2c8\ub2e4.\n    * sqft_living15 - sqft_living\uc744 \ud558\uc5ec \ubcc0\ud654\uc758 \ucc28\uc774\ub97c \ud30c\uc0dd\ubcc0\uc218\ub85c \uc0dd\uc131 \ud560 \uc218 \uc788\uc744 \uac83\uc774\ub77c \uc0dd\uac01\ud569\ub2c8\ub2e4.","da5274cf":"--------------------------------------------------------------------------------------------------------------------------\n\n# **<a id='1'> 1. Data Fields <\/a>**\n\n* ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n* date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n* price : \uc9d1\uc758 \uac00\uaca9(Target variable)\n* bedrooms : \uce68\uc2e4\uc758 \uc218\n* bathrooms : \ud654\uc7a5\uc2e4\uc758 \uc218\n* sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n* sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n* floors : \uc9d1\uc758 \uce35 \uc218\n* waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n* view : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4\n* condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\n* grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09\n* sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n* sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n* yr_built : \uc9c0\uc5b4\uc9c4 \ub144\ub3c4\n* yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n* zipcode : \uc6b0\ud3b8\ubc88\ud638\n* lat : \uc704\ub3c4\n* long : \uacbd\ub3c4\n* sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n* sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n--------------------------------------------------------------------------------------------------------------------------","9a8d1f83":"randomizedsearch\ub97c \ud1b5\ud574 \ub192\uc740 score\ub97c \ubcf4\uc774\ub294 parameter\ub97c \ud30c\uc545\ud558\uc600\uc2b5\ub2c8\ub2e4.","5cf0df07":"### ** - sqft_living(\uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)) **","33dfbd75":"\n#### **<a id='53'> 5-3. XGBoost <\/a>**\n","ab4bbed6":"* \uc65c\ub3c4(skewness)\ub294 \uc815\uaddc\ubd84\ud3ec\uc640 \ube44\uad50\ud558\uc5ec \uc67c\ucabd\uc73c\ub85c \uaf2c\ub9ac\uac00 \uae38\uc218\ub85d(left-skewed), \ub354\uc6b1 \ud070 \uc74c\uc218\uac12\uc744 \uac00\uc9c0\uba70\n  \uc815\uaddc\ubd84\ud3ec\uc640 \ube44\uad50\ud558\uc5ec \uc624\ub978\ucabd\uc73c\ub85c \uaf2c\ub9ac\uac00 \uae38\uc218\ub85d(right-skewed), \uc591\uc758 \uac12\uc774 \ub354\uc6b1 \ucee4\uc9d1\ub2c8\ub2e4.\n* \ucca8\ub3c4(kurtosis)\uac12\uc740 \uac15\ud558\uac8c \ubcfc\ub54c\ub294 2\uc774\ub0b4 (k<2), \uc644\ud654\ud558\uc5ec \ubcfc \uacbd\uc6b0 3\uc774\ub0b4(k<3)\uae4c\uc9c0\ub97c \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae5d\uac8c \ud3c9\ud0c4\ud558\ub2e4 \ud574\uc11d\ud569\ub2c8\ub2e4.\n\n#### \uc704\uc758 histogram \ubc0f skew, kurt\uac12\uc744 \ud1b5\ud574 \uc885\uc18d\ubcc0\uc218\uac00 right-skewed \ub418\uc5b4\uc788\uc74c\uc744 \ud655\uc778\ud558\uc5ec skew\ub97c \uc644\ud654 \ud574\uc8fc\uace0\uc790 \ud569\ub2c8\ub2e4.","4d241cfe":"Leverage\ub294 \uc124\uba85\ubcc0\uc218\uac00 \uc5bc\ub9c8\ub098 \uadf9\ub2e8\uc5d0 \uce58\uc6b0\uccd0 \uc788\ub294\uc9c0 \ub9d0\ud569\ub2c8\ub2e4.","57952e19":"* Linear Regression\uc744 \uc0ac\uc6a9\ud560 \uacbd\uc6b0, \ubc94\uc8fc\ud615 \ubcc0\uc218(categorical variable)\uc5d0 \ub300\ud574\uc11c \ub354\ubbf8\ubcc0\uc218(dummy variable)\ub85c \ubcc0\ud658\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4. \n* bedrooms, bathrooms, floors, view, condition, grade, total_rooms, grade_condition, exist_special, living_per_lot, living_per_floors, gap_living_per_floor, total_score, diff_of_rooms \ubcc0\uc218\ub4e4\uc740 \ub370\uc774\ud130 \uac12\uc758 \ud06c\uae30\uc5d0 \ub530\ub978 \uc601\ud5a5\uc774 \uc788\ub2e4\uace0 \ud310\ub2e8\ud558\uc5ec label encoder\ub97c \uc801\uc6a9\ud574\uc8fc\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* waterfront, zipcode, yr_built, yr_renovated, garret, is_renovated \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud558\uc5ec pandas \ub77c\uc774\ube0c\ub7ec\ub9ac \ub0b4 get_dummies \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \ub354\ubbf8\ubcc0\uc218\ud654 \ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* date\uc758 \uacbd\uc6b0, year, month, day\ub85c \ub354\ubbf8\ubcc0\uc218\ub97c \uc0dd\uc131\ud558\uc600\uc73c\ubbc0\ub85c \uc774\ub97c \uc774\uc6a9\ud574 \ub144, \uc6d4, \uc77c\ub85c \ub098\ub204\uc5b4 \ub354\ubbf8\ubcc0\uc218\ub85c \ubcc0\ud658 \ud6c4 \ubaa8\ub378 \uc131\ub2a5\uc744 \ube44\uad50\ud574\ubcf4\ub824 \ud569\ub2c8\ub2e4.","3e1efad8":"\ub610\ud55c, \uc55e\uc120 Data Fields\uc640 train.head()\ub97c \ud1b5\ud574 \ubcf4\uc558\ub358 sqft_living, sqft_lot\uc758 \uac12\uacfc \ud574\ub2f9 \ubcc0\uc218\ub4e4\uc758 15\ub144\ub3c4 \uac12\uc758 \ucc28\uc774\ub97c \uccb4\ud06c\ud574\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.\n\uc55e\uc5d0\uc11c \uc5b8\uae09\ud588\ub358 \ub0b4\uc6a9\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n  * sqft_living\uc5d0\uc11c sqft_living15\ub85c \uac00\uba70 \uba74\uc801\uc774 \ub2e4\uc18c \uc99d\uac00\ud568\uc774 \ubcf4\uc785\ub2c8\ub2e4.\n  * sqft_lot\uc740 sqft_living\uacfc \ub2e4\ub974\uac8c sqft_lot15\ub85c \uac00\uba70 \ub2e4\uc18c \uac10\uc18c\ud588\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","16b57a52":"## **Normalization**\nScaling just changes the range of your data. Normalization is a more radical transformation. The point of normalization is to change your observations so that they can be described as a normal distribution.\n\n> **Normal distribution**: Also known as the \"bell curve\", this is a specific statistical distribution where a roughly equal observations fall above and below the mean, the mean and the median are the same, and there are more observations closer to the mean. The normal distribution is also known as the Gaussian distribution.\n\nIn general, you'll only want to normalize your data if you're going to be using a machine learning or statistics technique that assumes your data is normally distributed. Some examples of these include t-tests, ANOVAs, linear regression, linear discriminant analysis (LDA) and Gaussian naive Bayes. (Pro tip: any method with \"Gaussian\" in the name probably assumes normality.)\n\nThe method were using to normalize here is called the Box-Cox Transformation. Let's take a quick peek at what normalizing some data looks like:","28f8deeb":"* \ubcf8 competition\uc758 \ub370\uc774\ud130\ub294 \uacb0\uce21\uce58\uac00 \uc5c6\uc774 clean\ud558\uac8c \uc81c\uacf5\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4.","3915d253":"* 3\ub4f1\uae09\uc758 \uacbd\uc6b0, 4\ub4f1\uae09\uc758 Q3\ubcf4\ub2e4 \ub192\uc740 \ud3c9\uade0\uc744 \ubcf4\uc785\ub2c8\ub2e4.\n* 5\ub4f1\uae09 - 11\ub4f1\uae09\uae4c\uc9c0 \uc0c1\uc704 \uc774\uc0c1\uce58\uac00 \ub2e4\uc218 \uc874\uc7ac\ud558\uba70, 11\ub4f1\uae09\uc740 \uc720\ub3c5 \ub5a8\uc5b4\uc9c4 \uc774\uc0c1\uce58\uac00 \uc874\uc7ac\ud569\ub2c8\ub2e4.\n* 6 - 10\uae4c\uc9c0\ub294 \ud558\uc704 \uc774\uc0c1\uce58 \ub610\ud55c \uc874\uc7ac\ud569\ub2c8\ub2e4.","bd3ad9d7":"### **- grade(\uc9d1\uc758 \ub4f1\uae09)**","07505a39":"\n#### **<a id='52'> 5-2. Random Forest <\/a>**","dbb16220":"\uc794\ucc28\uc758 \uc815\uaddc\uc131\uc774 \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \uc54a\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. model\uc758 normalized residual\uac12\uc774 -2 \uc774\ud558\ubd80\ud130 \uc815\uaddc\uc131\uc744 \uac16\ucd94\uc9c0 \ubabb\ud558\uace0 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","4613d8f1":"bathrooms\uac19\uc740\uacbd\uc6b0 \uc18c\uc22b\uc810\uc774 \uc788\uc5b4\uc11c \ub9ce\uc774 \ud5f7\uac08\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc758 \uac12\uc774 \uc758\ubbf8\ud558\ub294\uac83\uc740 \uc544\ub798\uc640 \uac19\uace0 \uc704\uc758 \uac12\ub9cc\uc744 \uac00\uc9c0\uace0 \uc544\ub798\uc758 \uac12\ub4e4\uc774 \ub354\ud574\uc838 \ucd5c\uc885 bathrooms\ub97c \uc774\ub8e8\uace0 \uc788\uae30\uc5d0 \uac01\uac01\uc758 \uac12\uc774 \uba87\uac1c\uc788\ub294\uc9c0\ub294 \uad6c\ubd84\ud558\uae30 \ud798\ub4e4\uc5b4 \ubcf4\uc785\ub2c8\ub2e4.\n- 0.5 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4\n- 0.75 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4, \uc0e4\uc6cc\uc2e4\n- 1 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4, \uc0e4\uc6cc\uc2e4, \uc695\uc870","91634e5a":"XGBoost\uc758 \uc124\uba85\uc740 \ub2e4\uc74c article\uc744 \ucc38\uc870\ud558\uc600\uc2b5\ub2c8\ub2e4. \n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2016\/03\/complete-guide-parameter-tuning-xgboost-with-codes-python\/","412dc820":"#### \ubcc0\uc218 \uc0dd\uc131","2c37acce":"## **Residual Plot**","ba0d53db":"\ubcc0\uc218 \uc218\uc815","510a6f1f":"Scale-location plot\uc740 x\ucd95\uc5d0 $\\hat{Y}$, y\ucd95\uc5d0\ub294 \ud45c\uc900\ud654 \uc794\ucc28(Standard Residuals)\ub97c \ubcf4\uc785\ub2c8\ub2e4. \ube68\uac04 \ucd94\uc138\uc120\uc774 \uac00\uc7a5 \uc774\uc0c1\uc801\uc774\uba70, \ubc97\uc5b4\ub09c \uac12\ub4e4\uc740 \uc774\uc0c1\uce58(outlier)\uc77c \uac00\ub2a5\uc131\uc774 \uc788\uc2b5\ub2c8\ub2e4.","5dfecf40":"* bedrooms \ubcc0\uc218\uc758 \ud2b9\uc774\ud55c \uc810\uc740, train \ub370\uc774\ud130\ub294 0-10\uae4c\uc9c0 \uc874\uc7ac\ud558\ub098 test \ub370\uc774\ud130\ub294 11, 33\uac12\uc744 \uac16\ub294 row\uac00 \uc874\uc7ac\ud55c\ub2e4\ub294 \uc810\uc785\ub2c8\ub2e4.","0db593f5":"### ** - bedrooms(\uce68\uc2e4\uc758 \uc218)**","7aaffb54":"\ub2e4\uc911\uacf5\uc120\uc131(multicollinearity problem)\uc774 \uc874\uc7ac\ud568\uc744 Warnings\uc5d0\uc11c \ub9d0\ud574\uc8fc\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc120\ud615\ud68c\uadc0\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, \uae30\ubcf8\uc801\uc778 4\uac00\uc9c0\uc758 \uae30\ubcf8 \uac00\uc815\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\n>   1. **\uc120\ud615\uc131** \n        * \uc608\uce21\ud558\uace0\uc790 \ud558\ub294 y\uc640 \ub3c5\ub9bd\ubcc0\uc218 x\uac04\uc758 \uc120\ud615\uc131 \ub9cc\uc871\n   \n>   2. **\ub3c5\ub9bd\uc131**\n        * \ub3c5\ub9bd\ubcc0\uc218 x\uac04 \uc11c\ub85c \ub3c5\ub9bd\uc131\uc744 \ub9cc\uc871\n    \n>   3. **\ub4f1\ubd84\uc0b0\uc131**\n    \n>   4. **\uc815\uaddc\uc131**\n        * \uc794\ucc28\uc758 \uc815\uaddc\uc131 \ub9cc\uc871\n\nmulticollinearity\uc758 \uc874\uc7ac\uc720\ubb34\ub85c \uc778\ud574, \ub3c5\ub9bd\uc131\uc758 \uac00\uc815\uc774 \uc9c0\ucf1c\uc9c0\uc9c0 \uc54a\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c, \uc774\ub7ec\ud55c \uac00\uc815\uc5d0 \ub300\ud574 \uc790\uc138\ud788 \ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.","98646a85":"#### **<a id='51'>5-1. Linear Regression<\/a>**","37fe7fbd":"* min\uac12\uacfc 1\ubd84\uc704\uc218(first quartile)\uac12\uc758 \uc790\ub9ac\uc218\uac00 \ub2e4\ub984\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* 3\ubd84\uc704\uc218(third quantile)\uac12\uacfc max\uac12\uc758 \uc790\ub9ac\uc218\uac00 \ub2e4\ub984\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n* min\uac12\uacfc 1\ubd84\uc704\uc218, \uac01 \ubd84\uc704\uc218\ub4e4\uc758 \ucc28\uc774\ubcf4\ub2e4\ub3c4 75%(3Q)\uc5d0\uc11c max\uac12\uc758 \ucc28\uc774\uac00 \ub354\uc6b1 \ud07c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","7727f1e3":"head\ub97c \ud1b5\ud574 \uac04\ub7b5\ud788 \ub370\uc774\ud130\ub97c \ubcfc \ub54c, \ub2e4\uc74c\uc744 \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.\n  * sqft_living\uc5d0\uc11c sqft_living15\ub85c \uac00\uba70 \uba74\uc801\uc774 \ub2e4\uc18c \uc99d\uac00\ud568\uc774 \ubcf4\uc785\ub2c8\ub2e4.\n  * sqft_lot\uc740 sqft_living\uacfc \ub2e4\ub974\uac8c sqft_lot15\ub85c \uac00\uba70 \ub2e4\uc18c \uac10\uc18c\ud588\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","176339b0":"### **<a id='22'> 2-2. \ubcc0\uc218\ubcc4 \uc720\ub2c8\ud06c \uac12 \uac1c\uc218 \ud655\uc778 <\/a>**","22a98249":"* sqft_living\uc774 12000\uc778 \uac12\uae4c\uc9c0 \uba74\uc801 \uc0c1\uc2b9\uc5d0 \ub530\ub978 \uac00\uaca9\uc758 \uc0c1\uc2b9\uc744 \ub530\ub974\uc9c0\ub9cc, 14000\uc778 \uac12\uc740 \uba74\uc801\uc774 \ub354\uc6b1 \uc0c1\uc2b9\ub418\uc5c8\uc73c\ub098 \uac00\uaca9\uc774 12000\ubcf4\ub2e4 \uc309\ub2c8\ub2e4.","e8d50b28":"### price\uc640 \uc0c1\uad00\uad00\uacc4\uac00 \ud070 \uc0c1\uc704 9\uac1c\ub97c \uae30\uc900\uc73c\ub85c \uba3c\uc800 EDA\ub97c \uc9c4\ud589\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","3d2b3200":"### **XGBoost Advantage**","2a0d2e2d":"* \uc7ac\uac74\ucd95\uc73c\ub85c \uc778\ud574 sqft_living\ubcf4\ub2e4 \ubd84\uc0b0\uc774 \ud06c\uc9c0\ub9cc, \ub370\uc774\ud130\ub4e4\uc774 \uacbd\ud5a5\uc131\uc744 \uc798 \ub530\ub974\ub294 \ub4ef \ud569\ub2c8\ub2e4.","9470f101":"#### * \uc885\uc18d\ubcc0\uc218(price)\uc640 \ub3c5\ub9bd\ubcc0\uc218(sqft_living(\uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)))\uc744 \ud1b5\ud55c \ub3c5\ub9bd\ubcc0\uc218(Y)\uc758 Normalization \uc804\ud6c4 \ube44\uad50","47818283":"\n#### **<a id='54'> 5-4. LightGBM <\/a>**","5d6f8bc7":"sqft_lot \ubcc0\uc218 \ub610\ud55c \uc9c0\ub098\uce58\uac8c \uce58\uc6b0\uce5c \uacbd\ud5a5\uc774 \uc788\uae30\uc5d0 log transformation\uc744 \ucde8\ud574 skewness\uc758 \uc644\ud654\uac00 \ud544\uc694\ud574 \ubcf4\uc785\ub2c8\ub2e4.","d6125b93":"* grade\uac00 3\uc778 2\uac1c\uc758 row\ub294 yr_built\uac00 1920, 1950\ub144\uc73c\ub85c \uc624\ub798\ub418\uc5c8\uc73c\uba70 \uc7ac\uac74\ucd95\ub418\uc9c0 \uc54a\uc558\uace0 sqft_lot, sqft_lot15 \uac12\uc774 \ud07d\ub2c8\ub2e4.","ca412315":"### ** - bathrooms(\ud654\uc7a5\uc2e4\uc758 \uc218) **","3d931f08":"## **Scaling**\nThis means that you're transforming your data so that it fits within a specific scale, like 0-100 or 0-1. You want to scale data when you're using methods based on measures of how far apart data points, like support vector machines, or SVM or k-nearest neighbors, or KNN. With these algorithms, a change of \"1\" in any numeric feature is given the same importance.\n\nFor example, you might be looking at the prices of some products in both Yen and US Dollars. One US Dollar is worth about 100 Yen, but if you don't scale your prices methods like SVM or KNN will consider a difference in price of 1 Yen as important as a difference of 1 US Dollar! This clearly doesn't fit with our intuitions of the world. With currency, you can convert between currencies. But what about if you're looking at something like height and weight? It's not entirely clear how many pounds should equal one inch (or how many kilograms should equal one meter).\n\nBy scaling your variables, you can help compare different variables on equal footing. To help solidify what scaling looks like, let's look at a made-up example. (Don't worry, we'll work with real data in just a second, this is just to help illustrate my point.)","30bba2ee":"### **<a id='24'> 2-4. \ub3c5\ub9bd\ubcc0\uc218(X) <\/a>**\n* \ubc94\uc8fc\ud615 \ubcc0\uc218\uc758 \uc2dc\uac01\ud654\ub294 boxplot\n* \uc5f0\uc18d\ud615 \ubcc0\uc218\uc758 \uc2dc\uac01\ud654\ub294 scatter plot\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud0d0\uc0c9\ud558\uace0\uc790 \ud569\ub2c8\ub2e4.","271bbfe4":"* sqft_above\uc758 \ud06c\uae30\uc5d0 \ub530\ub77c price\ub3c4 \ub192\uc544\uc9c0\ub294 \uacbd\ud5a5\uc131\uc744 \ub530\ub974\uace0 \uc788\ub294 \ub4ef \ubcf4\uc785\ub2c8\ub2e4. ","5f5f4488":"**Ensemble**","ec22a4e3":"# **<a id='2'> 2. Exploratory Data Analysis(EDA) <\/a>**\n\n--------------------------------------------------------------------------------------------------------------------------","3259afe1":"### **\uc704\uc5d0\uc11c \ubcf8 \ubc14\uc640 \uac19\uc774**\n\uc120\ud615\ud68c\uadc0\ub294 \uae30\ubcf8 4\uac00\uc9c0 \uac00\uc815\uc774 \ubaa8\ub450 \ucda9\uc871\ub418\uc5b4\uc57c \ud558\uae30\uc5d0 \ub3c5\ub9bd\uc131 \uac00\uc815\ubd80\ud130 \ub9cc\uc871\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574, \ub2e4\uc911\uacf5\uc120\uc131\uc744 \uc81c\uac70\ud558\uace0\uc790 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc740 (1) VIF \uac12\uc744 \uae30\uc900\uc73c\ub85c \uacf5\uc120\uc131\uc744 \uc57c\uae30\uc2dc\ud0a4\ub294 \ubcc0\uc218\ub97c \uc81c\uac70, (2) \ub370\uc774\ud130\uc758 row\ub97c \ub298\ub824\uc90c\uc73c\ub85c\uc368 \ud45c\ubcf8\uc758 \ud06c\uae30\ub97c \uc99d\uac00, (3) \ubcc0\uc218\uc758 \ubcc0\ud658 \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. \n\n\ud558\uc9c0\ub9cc, competition \ub0b4\uc5d0\uc11c \ub370\uc774\ud130\uc758 row\ub97c \ub298\ub824\uc90c\uc740 \ubd88\uac00\ub2a5\ud558\uba70 VIF\uac12\uc744 \uae30\uc900\uc73c\ub85c \ubcc0\uc218\ub4e4\uc744 \uc81c\uac70\ud574 \ub098\uc544\uac00\ub294 \uc810\uc740 \uae30\uc874 \ubcc0\uc218\ub4e4\uc744 \uc774\uc6a9\ud574 \uc0dd\uc131\ud55c \ud30c\uc0dd\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud558\uac8c \ub420 \ubb38\uc81c\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uae30\uc5d0, \ub2e4\uc911\uacf5\uc120\uc131\uc5d0 robust\ud558\uba70 \ud3c9\uade0\uc801\uc73c\ub85c \uc131\ub2a5\uc774 \uc88b\uc740 Tree \uae30\ubc18 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n\uc800 \ub610\ud55c, \uc774\ud6c4 Tree \uae30\ubc18 \ubaa8\ub378\ub4e4\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc608\uce21\ud574\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.","bc28b7e5":"### **<a id='32'> 3-1. \ub3c5\ub9bd\ubcc0\uc218(X) <\/a>**","241758cc":"### **- grade(\uc9d1\uc758 \ub4f1\uae09)**","d675ac2e":"log transformation \uc774\uc804\uc5d0 \ube44\ud574 \uc644\ud654\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","1d36815f":"* \uae30\uc874 right-skewed\ub41c original data\uc5d0\uc11c, \ucc98\ub9ac\ub97c \ud1b5\ud574 range\uc758 \ubcc0\ud654\uac00 \uc77c\uc5b4\ub0a0 \ubfd0 \uc544\ub2c8\ub77c bell-curve(=normal distribution)\uc758 \ud615\ud0dc\ub85c shape\uac00 \ubcc0\ud615\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n* \uc774\uc640 \uac19\uc774, **\ubd84\ud3ec\uac00 \ubcc0\ud615\ub418\ub294(shape\uac00 \ubcc0\ud615\ub418\ub294)\uacfc\uc815\uc5d0\uc11c range\uc758 \ubcc0\ud654\uac00 \uc77c\uc5b4\ub098\ub294 \uac83\uc774 Normalization\uc785\ub2c8\ub2e4.**"}}