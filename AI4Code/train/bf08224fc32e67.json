{"cell_type":{"5c834356":"code","35537f66":"code","449b3e03":"code","5033de88":"code","254de92e":"code","ed19a780":"code","26d4c7b4":"code","a107a9e0":"code","30cec24e":"code","15f5821c":"code","96ae1056":"code","1587dbde":"code","eb518fae":"code","4f62b9e8":"markdown"},"source":{"5c834356":"pip install gTTS","35537f66":"import numpy as np\nimport pandas as pd\nimport cv2\nimport time\nfrom timeit import default_timer as timer\nimport matplotlib.pyplot as plt\nimport pickle\nfrom gtts import gTTS\nfrom keras.models import load_model\n\nimport os\nprint(os.listdir('..\/input'))","449b3e03":"labels = pd.read_csv('..\/input\/traffic-signs-preprocessed\/label_names.csv')\nprint(labels)","5033de88":"model = load_model('..\/input\/ptmodel3x3\/model-3x3.h5')\nwith open('..\/input\/traffic-signs-preprocessed\/mean_image_rgb.pickle', 'rb') as f:\n    mean = pickle.load(f, encoding='latin1')\n    \nprint(mean['mean_image_rgb'].shape)","254de92e":"path_to_weights = '..\/input\/trainedtrafficsignsdetectorbasedonyolov3\/yolov3_ts_train_5000.weights'\npath_to_cfg = '..\/input\/traffic-signs-dataset-in-yolo-format\/yolov3_ts_test.cfg'\n\nnetwork = cv2.dnn.readNetFromDarknet(path_to_cfg, path_to_weights)\n\n# To use with GPU\nnetwork.setPreferableBackend(cv2.dnn.DNN_BACKEND_OPENCV)\nnetwork.setPreferableTarget(cv2.dnn.DNN_TARGET_OPENCL_FP16)","ed19a780":"layers_all = network.getLayerNames()\nlayers_names_output = [layers_all[i[0] - 1] for i in network.getUnconnectedOutLayers()]","26d4c7b4":"# Minimum probability to eliminate weak detections\nprobability_minimum = 0.6\n\n# Setting threshold to filtering weak bounding boxes by non-maximum suppression\nthreshold = 0.2\n\n# Generating colours for bounding boxes\n# randint(low, high=None, size=None, dtype='l')\ncolours = np.random.randint(0, 255, size=(len(labels), 3), dtype='uint8')\n\n# Check point\nprint(type(colours))  # <class 'numpy.ndarray'>\nprint(colours.shape)  # (43, 3)\nprint(colours[0])  # [25  65 200]","a107a9e0":"# Reading video from a file by VideoCapture object\nvideo = cv2.VideoCapture('..\/input\/traffic-signs-dataset-in-yolo-format\/traffic-sign-to-test.mp4')\n# video = cv2.VideoCapture('..\/input\/videofortesting\/ts_video_1.mp4')\n#video = cv2.VideoCapture('..\/input\/videofortesting\/ts_video_6.mp4')\n\n# Writer that will be used to write processed frames\nwriter = None\n\n# Variables for spatial dimensions of the frames\nh, w = None, None","30cec24e":"%matplotlib inline\n\n# Setting default size of plots\nplt.rcParams['figure.figsize'] = (3, 3)\n\n# Variable for counting total amount of frames\nf = 0\n\n# Variable for counting total processing time\nt = 0\n\n# Catching frames in the loop\nwhile True:\n    # Capturing frames one-by-one\n    ret, frame = video.read()\n\n    # If the frame was not retrieved\n    if not ret:\n        break\n       \n    # Getting spatial dimensions of the frame for the first time\n    if w is None or h is None:\n        # Slicing two elements from tuple\n        h, w = frame.shape[:2]\n\n    # Blob from current frame\n    blob = cv2.dnn.blobFromImage(frame, 1 \/ 255.0, (416, 416), swapRB=True, crop=False)\n\n    # Forward pass with blob through output layers\n    network.setInput(blob)\n    start = time.time()\n    output_from_network = network.forward(layers_names_output)\n    end = time.time()\n\n    # Increasing counters\n    f += 1\n    t += end - start\n\n    # Spent time for current frame\n    print('Frame number {0} took {1:.5f} seconds'.format(f, end - start))\n\n    # Lists for detected bounding boxes, confidences and class's number\n    bounding_boxes = []\n    confidences = []\n    class_numbers = []\n\n    # Going through all output layers after feed forward pass\n    for result in output_from_network:\n        # Going through all detections from current output layer\n        for detected_objects in result:\n            # Getting 80 classes' probabilities for current detected object\n            scores = detected_objects[5:]\n            # Getting index of the class with the maximum value of probability\n            class_current = np.argmax(scores)\n            # Getting value of probability for defined class\n            confidence_current = scores[class_current]\n\n            # Eliminating weak predictions by minimum probability\n            if confidence_current > probability_minimum:\n                # Scaling bounding box coordinates to the initial frame size\n                box_current = detected_objects[0:4] * np.array([w, h, w, h])\n\n                # Getting top left corner coordinates\n                x_center, y_center, box_width, box_height = box_current\n                x_min = int(x_center - (box_width \/ 2))\n                y_min = int(y_center - (box_height \/ 2))\n\n                # Adding results into prepared lists\n                bounding_boxes.append([x_min, y_min, int(box_width), int(box_height)])\n                confidences.append(float(confidence_current))\n                class_numbers.append(class_current)\n                \n\n    # Implementing non-maximum suppression of given bounding boxes\n    results = cv2.dnn.NMSBoxes(bounding_boxes, confidences, probability_minimum, threshold)\n\n    # Checking if there is any detected object been left\n    if len(results) > 0:\n        # Going through indexes of results\n        for i in results.flatten():\n            # Bounding box coordinates, its width and height\n            x_min, y_min = bounding_boxes[i][0], bounding_boxes[i][1]\n            box_width, box_height = bounding_boxes[i][2], bounding_boxes[i][3]\n            \n            \n            # Cut fragment with Traffic Sign\n            c_ts = frame[y_min:y_min+int(box_height), x_min:x_min+int(box_width), :]\n            # print(c_ts.shape)\n            \n            if c_ts.shape[:1] == (0,) or c_ts.shape[1:2] == (0,):\n                pass\n            else:\n                # Getting preprocessed blob with Traffic Sign of needed shape\n                blob_ts = cv2.dnn.blobFromImage(c_ts, 1 \/ 255.0, size=(32, 32), swapRB=True, crop=False)\n                blob_ts[0] = blob_ts[0, :, :, :] - mean['mean_image_rgb']\n                blob_ts = blob_ts.transpose(0, 2, 3, 1)\n                # plt.imshow(blob_ts[0, :, :, :])\n                # plt.show()\n\n                # Feeding to the Keras CNN model to get predicted label among 43 classes\n                scores = model.predict(blob_ts)\n\n                # Scores is given for image with 43 numbers of predictions for each class\n                # Getting only one class with maximum value\n                prediction = np.argmax(scores)\n                # print(labels['SignName'][prediction])\n\n\n                # Colour for current bounding box\n                colour_box_current = colours[class_numbers[i]].tolist()\n\n                # Drawing bounding box on the original current frame\n                cv2.rectangle(frame, (x_min, y_min),\n                              (x_min + box_width, y_min + box_height),\n                              colour_box_current, 2)\n\n                # Preparing text with label and confidence for current bounding box\n                text_box_current = '{}: {:.4f}'.format(labels['SignName'][prediction],\n                                                       confidences[i])\n\n                # Putting text with label and confidence on the original image\n                cv2.putText(frame, text_box_current, (x_min, y_min - 5),\n                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, colour_box_current, 2)\n\n\n    # Initializing writer only once\n    if writer is None:\n        fourcc = cv2.VideoWriter_fourcc(*'mp4v')\n\n        # Writing current processed frame into the video file\n        writer = cv2.VideoWriter('result.mp4', fourcc, 25,\n                                 (frame.shape[1], frame.shape[0]), True)\n\n    # Write processed current frame to the file\n    writer.write(frame)\n\n\n# Releasing video reader and writer\nvideo.release()\nwriter.release()","15f5821c":"# Saving locally without committing\nfrom IPython.display import FileLink\n\nFileLink('result.mp4')","96ae1056":"# Reading Input image\n\nimage_BGR = cv2.imread('..\/input\/traffic-test-images\/result (9).png')\n\nprint('Image shape:', image_BGR.shape)  # tuple of (731, 1092, 3)\n\n# Getting spatial dimension of input image\nh, w = image_BGR.shape[:2]  # Slicing from tuple only first two elements\n\n# Check point\n# Showing height an width of image\nprint('Image height={0} and width={1}'.format(h, w))  # 731 1092\n","1587dbde":"# Processing the image\n\n# Variable for counting total processing time\nt = 0\n# Identified Traffic Sign\nid_traffic = \"\"\n# Blob from current frame\nblob = cv2.dnn.blobFromImage(image_BGR, 1 \/ 255.0, (416, 416), swapRB=True, crop=False)\n\n# Forward pass with blob through output layers\nnetwork.setInput(blob)\nstart = time.time()\noutput_from_network = network.forward(layers_names_output)\nend = time.time()\n\n# Time\nt += end - start\nprint('Total amount of time {:.5f} seconds'.format(t))\n\n# Lists for detected bounding boxes, confidences and class's number\nbounding_boxes = []\nconfidences = []\nclass_numbers = []\n\n# Going through all output layers after feed forward pass\nfor result in output_from_network:\n    # Going through all detections from current output layer\n    for detected_objects in result:\n        # Getting 80 classes' probabilities for current detected object\n        scores = detected_objects[5:]\n        # Getting index of the class with the maximum value of probability\n        class_current = np.argmax(scores)\n        # Getting value of probability for defined class\n        confidence_current = scores[class_current]\n\n        # Eliminating weak predictions by minimum probability\n        if confidence_current > probability_minimum:\n            # Scaling bounding box coordinates to the initial frame size\n            box_current = detected_objects[0:4] * np.array([w, h, w, h])\n\n            # Getting top left corner coordinates\n            x_center, y_center, box_width, box_height = box_current\n            x_min = int(x_center - (box_width \/ 2))\n            y_min = int(y_center - (box_height \/ 2))\n\n            # Adding results into prepared lists\n            bounding_boxes.append([x_min, y_min, int(box_width), int(box_height)])\n            confidences.append(float(confidence_current))\n            class_numbers.append(class_current)\n                \n\n# Implementing non-maximum suppression of given bounding boxes\nresults = cv2.dnn.NMSBoxes(bounding_boxes, confidences, probability_minimum, threshold)\n\n# Checking if there is any detected object been left\nif len(results) > 0:\n    # Going through indexes of results\n    for i in results.flatten():\n        # Bounding box coordinates, its width and height\n        x_min, y_min = bounding_boxes[i][0], bounding_boxes[i][1]\n        box_width, box_height = bounding_boxes[i][2], bounding_boxes[i][3]\n            \n            \n        # Cut fragment with Traffic Sign\n        c_ts = image_BGR[y_min:y_min+int(box_height), x_min:x_min+int(box_width), :]\n        # print(c_ts.shape)\n            \n        if c_ts.shape[:1] == (0,) or c_ts.shape[1:2] == (0,):\n            pass\n        else:\n            # Getting preprocessed blob with Traffic Sign of needed shape\n            blob_ts = cv2.dnn.blobFromImage(c_ts, 1 \/ 255.0, size=(32, 32), swapRB=True, crop=False)\n            blob_ts[0] = blob_ts[0, :, :, :] - mean['mean_image_rgb']\n            blob_ts = blob_ts.transpose(0, 2, 3, 1)\n            # plt.imshow(blob_ts[0, :, :, :])\n            # plt.show()\n\n            # Feeding to the Keras CNN model to get predicted label among 43 classes\n            scores = model.predict(blob_ts)\n\n            # Scores is given for image with 43 numbers of predictions for each class\n            # Getting only one class with maximum value\n            prediction = np.argmax(scores)\n            print(labels['SignName'][prediction])\n            id_traffic += labels['SignName'][prediction]\n            id_traffic += \" next\"\n\n\n            # Colour for current bounding box\n            colour_box_current = colours[class_numbers[i]].tolist()\n            \n            # Green BGR\n            colour_box_current = [0, 255, 61]\n            \n            # Yellow BGR\n#             colour_box_current = [0, 255, 255]\n\n            # Drawing bounding box on the original current frame\n            cv2.rectangle(image_BGR, (x_min, y_min),\n                              (x_min + box_width, y_min + box_height),\n                              colour_box_current, 6)\n\n#             # Preparing text with label and confidence for current bounding box\n#             text_box_current = '{}: {:.4f}'.format(labels['SignName'][prediction],\n#                                                    confidences[i])\n            \n#             # Putting text with label and confidence on the original image\n#             cv2.putText(image_BGR, text_box_current, (x_min, y_min - 15),\n#                             cv2.FONT_HERSHEY_SIMPLEX, 0.9, colour_box_current, 2)\n            \n            if prediction == 5:\n                # Preparing text with label and confidence for current bounding box\n                text_box_current = '{}: {:.4f}'.format('Speed limit 60', confidences[i])\n\n                # Putting text with label and confidence on the original image\n                cv2.putText(image_BGR, text_box_current, (x_min - 110, y_min - 10),\n                                cv2.FONT_HERSHEY_SIMPLEX, 0.9, colour_box_current, 2)\n                \n            elif prediction == 9:            \n                # Preparing text with label and confidence for current bounding box\n                text_box_current = '{}: {:.4f}'.format('No overtaking', confidences[i])\n\n                # Putting text with label and confidence on the original image\n                cv2.putText(image_BGR, text_box_current, (x_min - 110, y_min + box_height + 30),\n                                cv2.FONT_HERSHEY_SIMPLEX, 0.9, colour_box_current, 2)\n\n\n                \n                \n                \n                \n                \n                \n                \n                \n                \n# Saving image\ncv2.imwrite('result.png', image_BGR)\n\n#Showing the image\n\n%matplotlib inline\n\nplt.rcParams['figure.figsize'] = (35.0, 35.0) # Setting default size of plots\n\nimage_BGR = cv2.imread('.\/result.png')\n\n# Showing image shape\nprint('Image shape:', image_BGR.shape)  # tuple of (800, 1360, 3)\n\n# Getting spatial dimension of input image\nh, w = image_BGR.shape[:2]  # Slicing from tuple only first two elements\n\n# Showing height an width of image\nprint('Image height={0} and width={1}'.format(h, w))  # 800 1360\n\nplt.imshow(cv2.cvtColor(image_BGR, cv2.COLOR_BGR2RGB))\nplt.axis('off')\n# plt.title('Keras Visualization', fontsize=18)\n\n# Showing the plot\nplt.show()\n\nplt.close()\n\n# Saving locally without committing\nfrom IPython.display import FileLink\n\nFileLink('result.jpg')\n","eb518fae":"print(id_traffic)\nlanguage = 'en'\nmyobj = gTTS(text=id_traffic, lang=language, slow=True)\nmyobj.save(\"prediction.mp3\")","4f62b9e8":"# Identifying Traffic Signs in an Image\n"}}