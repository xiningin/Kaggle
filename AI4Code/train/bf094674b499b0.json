{"cell_type":{"0f36d291":"code","55106d36":"code","e0466cfe":"code","2ca33ab0":"code","65f60ec6":"code","753dac09":"code","ea3a33cb":"code","bc13d9d6":"code","b1dab9d0":"code","e6fc09bb":"code","623fb07a":"code","7e230bef":"code","0206f1c8":"markdown","b581d504":"markdown","886b1b6d":"markdown","1cafe123":"markdown","86b26145":"markdown","1fc41f07":"markdown"},"source":{"0f36d291":"import cv2\nimport glob\nimport gc\nimport imageio\nfrom multiprocessing import cpu_count\nimport os\nfrom PIL import Image\nimport pathlib\nimport random\nimport sys\nfrom tqdm.notebook import tqdm\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport torch","55106d36":"# import torch\n# import torchvision\n# import torch.nn as nn\n# import torch.nn.functional as F\n# from torch.utils.data import Dataset, DataLoader\n# print(f'python version: {sys.version}')\n# print(f'torch version: {torch.__version__}')","e0466cfe":"# Asthetics\npd.set_option('display.max_columns', None)","2ca33ab0":"def return_filpath(name, folder):\n    path = os.path.join(folder, f'{name}.jpg')\n    return path","65f60ec6":"# Hacky way of loading YOLOV5 offline, don't try this at home\n\n# Add YOLOV5 master to cache\n!cp -R '\/kaggle\/input\/yolov5\/torch\/root\/.cache\/torch' '\/root\/.cache\/torch'\n# Add Ultralytics (whatever this is) to the config folder\n!cp -R '\/kaggle\/input\/yolov5\/ultralytics\/root\/.config\/Ultralytics' '\/root\/.config\/Ultralytics'","753dac09":"# Load Best Performing YOLOV5X Model\nyolov5x6_model = torch.hub.load('ultralytics\/yolov5', 'yolov5x6')","ea3a33cb":"def get_pet_label(file_path):\n    # Read Image\n    image = imageio.imread(file_path)\n    \n    # Get YOLOV5 results using Test Time Augmentation for better result\n    results = yolov5x6_model(image, augment=True)\n    \n    # Save info for each pet\n    for x1, y1, x2, y2, treshold, label_int in results.xyxy[0].cpu().detach().numpy():\n        # Map integer encoded label to label\n        label = results.names[int(label_int)]\n        # Objects detected are already sorted on confidence, return first cat or dog\n        if label in [1, 0]:\n            return label\n        \n    # Could not detect pet, \"unknown\" label\n    return 2","bc13d9d6":"def crop_pets(file_path, filename, plot=False):\n    # Read Image\n    image = imageio.imread(file_path)\n    h, w, c = image.shape\n    # Get YOLOV5 results using Test Time Augmentation for better result\n    results = yolov5x6_model(image, augment=True)\n        \n    # Dictionary to Save Image Info\n    h, w, _ = image.shape\n    n_pets = 0\n    x_min = w-1\n    x_max = 0\n    y_min = h-1\n    y_max = 0\n    \n    # Save found pets to draw bounding boxes\n    pets_found = []\n    \n    # Save info for each pet\n    for x1, y1, x2, y2, treshold, label in results.xyxy[0].cpu().detach().numpy():\n        label = results.names[int(label)]\n        if label in ['cat', 'dog']:          \n            # Add found pet\n            pets_found.append([x1, x2, y1, y2, label])\n            n_pets += 1\n    \n    for x1, x2, y1, y2, label in pets_found:\n        x_min = min(x_min,x1)\n        x_max = max(x_max,x2)\n        y_min = min(y_min,y1)\n        y_max = max(y_max,y2)\n\n    if n_pets >= 1:\n        print(f\"x_min:{x_min}, x_max:{x_max}, y_min:{y_min}, y_max:{y_max}\")\n        im = Image.open(file_path)\n        im.crop((x_min, y_min, x_max, y_max)).save(f\".\/train_petcrop\/{filename}.jpg\", quality=95)\n    else:\n        print(f\"404 PETS NOT FOUND. x_min:{x_min}, x_max:{x_max}, y_min:{y_min}, y_max:{y_max}\")\n        im = Image.open(file_path)\n        im.save(f\".\/train_petcrop\/{filename}.jpg\", quality=95)\n    \n    return im","b1dab9d0":"dataset_path = pathlib.Path('..\/input\/petfinder-pawpularity-score\/')\ntrain_df = pd.read_csv(\"..\/input\/make-new-csv\/train_add_f.csv\")\ntrain_df.head()","e6fc09bb":"if not os.path.exists(\".\/train_petcrop\"):\n    os.makedirs(\".\/train_petcrop\")\n    print(\"train_petcrop directory is created\")\nelse:\n    print(\".\/train_petcrop directory is already exists\")","623fb07a":"train_df['path'] = train_df['Id'].map(lambda x:str(dataset_path\/'train'\/x)+'.jpg')\n\nfor idx, file_path in enumerate(train_df['path']):\n    filename = train_df[\"Id\"][idx]\n    crop_pets(file_path, filename, plot=True)\n    gc.collect()","7e230bef":"train_df.head()","0206f1c8":"# import libraries","b581d504":"# CFG","886b1b6d":"# Utilities","1cafe123":"# Train data petcrop","86b26145":"# Load YOLOV5 Offline and set function(pet labels & info)","1fc41f07":"# Load train and set fold"}}