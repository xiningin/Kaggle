{"cell_type":{"c96a6367":"code","6a440d18":"code","d875a522":"code","89b71a7d":"code","0801348a":"code","71c0c950":"code","0b7b2cba":"code","4642930b":"code","ca3f2aa9":"code","160dd8a5":"code","567d0223":"code","33510fa6":"code","040a0511":"code","9b1d8a49":"code","f893d6fd":"code","acc1b4bf":"code","62a56b67":"code","d9cc8cd0":"code","a64acfc4":"code","f1102bce":"code","594607bd":"code","043ca8eb":"code","8f062313":"code","7750aa9d":"code","b66ce735":"code","b1b9e20c":"code","4189a9d3":"code","761e9d82":"markdown","0923d91f":"markdown","2a57ec14":"markdown","3e64d008":"markdown","a69fc92f":"markdown","31f078ef":"markdown","44feb4ec":"markdown"},"source":{"c96a6367":"# imports pra mexer no dados\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\n# import das m\u00e9tricas\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import make_scorer\n\n# import dos modelos\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier","6a440d18":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d875a522":"path_test_iris = '\/kaggle\/input\/usp-pj01\/test_Iris.csv'\npath_train_iris = '\/kaggle\/input\/usp-pj01\/train_Iris.csv'\n\n# Carregando o treino\ndf_iris = pd.read_csv(path_train_iris)\ndf_iris = df_iris.drop(['Id'], axis=1)\n\n# Carregando o teste\ndf_iris_test = pd.read_csv(path_test_iris)","89b71a7d":"df_iris","0801348a":"# Checando se tem dados faltando\ndf_iris.isna().sum()","71c0c950":"# Separando os dados referentes a cada tipo de Species\nspecies = list(set(df_iris['Species']))\nspecies","0b7b2cba":"# Separa cada uma das instancias com base no target\nspecies_list = []\nfor specie in species:\n  species_list.append(df_iris.loc[df_iris['Species'] == specie])","4642930b":"species_list[0].describe()","ca3f2aa9":"print(species[0])\nspecies_list[0].hist(figsize=(8, 12), bins=10)","160dd8a5":"species_list[1].describe()","567d0223":"print(species[1])\nspecies_list[1].hist(figsize=(8, 12), bins=10)","33510fa6":"species_list[2].describe()","040a0511":"print(species[2])\nspecies_list[2].hist(figsize=(8, 12), bins=10)","9b1d8a49":"# Separando as features do target\nX = df_iris.drop(['Species'], axis=1)\ny = df_iris['Species']","f893d6fd":"# Normalizando os dados\nscaler = MinMaxScaler()\n# Pegando o valor m\u00e1ximo e m\u00ednimo de cada dado da nossa tabela de features\nscaler.fit(X)\nX = scaler.transform(X)\n# Retorna array de python, por isso dando casting pra um dataframe de novo\nX = pd.DataFrame(X)\nX","acc1b4bf":"# Divide entre treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","62a56b67":"# Definindo m\u00e9tricas de score pro CV\n\nscoring = {'accuracy' : make_scorer(accuracy_score), \n       'precision' : make_scorer(precision_score, average = 'weighted'),\n       'recall' : make_scorer(recall_score, average = 'weighted'), \n       'f1_score' : make_scorer(f1_score, average = 'weighted')}","d9cc8cd0":"# Criando knn\nknn = KNeighborsClassifier(n_neighbors=3)","a64acfc4":"# Checando Cross validation do KNN com as 4 m\u00e9tricas\nknn_cv = cross_validate(knn, X, y, cv= 5, scoring=scoring)\nknn_cv","f1102bce":"# O crit\u00e9rio final vai ser a media do f1\nknn_cv['test_f1_score'].mean()","594607bd":"# Criando random forest\nrf = RandomForestClassifier(random_state=42)","043ca8eb":"# Checando Cross validation do rf com as 4 m\u00e9tricas\nrf_cv = cross_validate(rf, X_train, y_train, cv= 5, scoring=scoring)\nrf_cv['test_f1_score']","8f062313":"# O crit\u00e9rio final vai ser a media do f1\nrf_cv['test_f1_score'].mean()","7750aa9d":"envio = pd.DataFrame()\nenvio['Id'] = df_iris_test['Id']\nenvio.head()","b66ce735":"test = df_iris_test.drop('Id', axis=1)\ntest.head()","b1b9e20c":"# Escalando o teste usando os dados de treino\ntest = pd.DataFrame(scaler.transform(test))\ntest.head()","4189a9d3":"# Fitando o modelo escolhido com base nas m\u00e9tricas e prevendo o teste\nknn.fit(X, y)\nenvio['Category'] = knn.predict(test)\nenvio.head()","761e9d82":"# Definindo m\u00e9tricas pro cross_val","0923d91f":"# Imports e leitura de dados","2a57ec14":"# Random Forest","3e64d008":"# Checando os dados","a69fc92f":"# Envio","31f078ef":"# Dividindo os dados de treino\n","44feb4ec":"# KNN"}}