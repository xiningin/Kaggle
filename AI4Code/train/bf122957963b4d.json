{"cell_type":{"24349f79":"code","64ffbe16":"code","ae11826e":"code","80bf4fc1":"code","2dfbbc6a":"code","2050ba30":"code","efa0e26e":"code","e0c2b9ed":"code","82778024":"code","d032342f":"markdown","87167f0f":"markdown","cb4d89e7":"markdown","8e43ba88":"markdown","97e959d7":"markdown","a763d870":"markdown","2c930c96":"markdown","c7ce9297":"markdown"},"source":{"24349f79":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\ndf = pd.read_csv('..\/input\/dataviz-facens-20182-aula-1-exerccio-2\/BR_eleitorado_2016_municipio.csv', delimiter=',') \ndf.head(10)","64ffbe16":"import pandas as pd\nresposta = [[\"cod_municipio_tse\", \"Qualitativa Nominal\"],\n            [\"uf\",\"Qualitativa Nominal\"],\n            [\"nome_municipio\",\"Qualitativa Nominal\"],\n            [\"total_eleitores\",\"Quantitativa Discreta\"],\n            [\"gen_feminino\",\"Quantitativa Discreta\"],\n            [\"gen_masculino\",\"Quantitativa Discreta\"],\n            [\"gen_nao_informado\",\"Quantitativa Discreta\"]] #vari\u00e1veis relacionadas a tempo s\u00e3o cont\u00ednuas, mas podem ser discretas pois n\u00e3o h\u00e1 perdas -- (discretiza\u00e7\u00e3o)\nresposta = pd.DataFrame(resposta, columns=[\"Variavel\", \"Classifica\u00e7\u00e3o\"])\nresposta","ae11826e":"resposta = df[\"cod_municipio_tse\"].value_counts()\nprint(\"Frequ\u00eancia de Munic\u00edpios TSE\")\nresposta","80bf4fc1":"resposta = df[\"uf\"].value_counts()\nprint(\"Frequ\u00eancia de UF (Estados)\")\nresposta","2dfbbc6a":"resposta = df[\"nome_municipio\"].value_counts()\nprint(\"Frequ\u00eancia de Munic\u00edpios\")\nresposta","2050ba30":"MunUF = df[['uf','nome_municipio']]\n\nMunporUF = MunUF.groupby(by='uf',as_index=False).count().sort_values(by=['nome_municipio'], ascending=False)\nMunporUF\nx = MunporUF['uf']\ny = MunporUF['nome_municipio']\nplt.figure(figsize=(20, 10))\nplt.bar(x, y)\nplt.title('Quantidade de Munic\u00edpios por Estado')\nplt.xlabel('Estados')\nplt.ylabel('N\u00ba Munic\u00edpios')\n\nplt.show()\n","efa0e26e":"EleitoresUF = df[['uf','total_eleitores']]\n\nEleitporUF = EleitoresUF.groupby(by='uf',as_index=False).sum().sort_values(by=['total_eleitores'], ascending=True)\nEleitporUF\n\nx = EleitporUF['uf']\n#Dividindo o n\u00famero de eleitores por milh\u00e3o para que o gr\u00e1fico fique melhor visualizado\ny = EleitporUF['total_eleitores']\/1000000\nplt.figure(figsize=(20, 10))\nplt.barh(x, y)\nplt.title('Total de Eleitores por Estado por milh\u00e3o de Eleitores')\nplt.ylabel('Estados')\nplt.xlabel('N\u00ba Eleitores (em milh\u00f5es)')\nplt.show()","e0c2b9ed":"#Dataframe com apenas as informa\u00e7\u00f5es relevantes para o gr\u00e1fico\nGenUF = df[['uf','gen_feminino','gen_masculino','gen_nao_informado']]\n\n#Realizando a soma por g\u00eanero\nsoma_feminino = GenUF['gen_feminino'].sum(axis = 0)\nsoma_masculino = GenUF['gen_masculino'].sum(axis = 0)\nsoma_naoinformado = GenUF['gen_nao_informado'].sum(axis = 0)\nTotal = soma_feminino + soma_masculino + soma_naoinformado\nperc_feminino = round((soma_feminino\/Total)*100,2)\nperc_masculino = round((soma_masculino\/Total)*100,2)\nperc_naoinformado = round((soma_naoinformado\/Total)*100,2)\n\n#Construindo o gr\u00e1fico de Pizza\nnomes = 'Feminino','Masculino','Sexo N\u00e3o Informado'\ntamanho = [perc_feminino,perc_masculino,perc_naoinformado]\nexplode = (0.1,0.1,0.1)\n\nfig1, ax1 = plt.subplots()\nax1.pie(tamanho, explode=explode, labels=nomes, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  \nplt.title('Distribui\u00e7\u00e3o de Eleitores por G\u00eanero')\nplt.show()\n","82778024":"GenUF.head()\nGenporUF = GenUF.groupby(by='uf',as_index=False).sum().sort_values(by=['uf'], ascending=False)\nGenporUF['gen_feminino'] = round(GenporUF['gen_feminino']\/1000)\nGenporUF['gen_masculino'] = round(GenporUF['gen_masculino']\/1000)\nGenporUF['gen_nao_informado'] = round(GenporUF['gen_nao_informado']\/1000)\n\n#Valores dos grupos e categorias\nUF = GenporUF['uf']\nFeminino = GenporUF['gen_feminino']\nMasculino = GenporUF['gen_masculino']\nNaoInformado = GenporUF['gen_nao_informado']\n    \n#Adicionando cores\ncolors = ['#00BFFF','#C1FFC1','#FFDEAD']\n# Posi\u00e7\u00e3o das barras no eixo X\nr = range(len(UF))\nbarWidth = 1\n#plot bars\nplt.figure(figsize=(20,20))\nax1 = plt.bar(r, Feminino, color=colors[0], edgecolor='white', width=barWidth, label=\"Feminino\")\nax2 = plt.bar(r, Masculino, bottom=np.array(Feminino), color=colors[1], edgecolor='white', width=barWidth, label='Masculino')\nax3 = plt.bar(r, NaoInformado, bottom=np.array(Feminino)+np.array(Masculino), color=colors[2], edgecolor='white', width=barWidth, label='G\u00eanero n\u00e3o informado')\nplt.legend(fontsize = 15)\n# Customizando o eixo X\nplt.xticks(r, UF, fontweight='bold')\nplt.ylabel(\"N\u00famero de Eleitores (em milhares)\",fontsize = 15)\nplt.xlabel(\"Estados\",fontsize = 15)\n\n#Adicionando os valores para cada barra\nfor r1, r2, r3 in zip(ax1, ax2, ax3):\n    h1 = r1.get_height()\n    h2 = r2.get_height()\n    h3 = r3.get_height()\n    plt.text(r1.get_x() + r1.get_width() \/ 2., h1 \/ 2., \"%d\" % h1, ha=\"center\", va=\"center\", color=\"black\", fontsize=10, fontweight=\"bold\")\n    plt.text(r2.get_x() + r2.get_width() \/ 2., h1 + h2 \/ 2., \"%d\" % h2, ha=\"center\", va=\"center\", color=\"black\", fontsize=10, fontweight=\"bold\")\n    plt.text(r3.get_x() + r3.get_width() \/ 2., h1 + h2 + h3 \/ 2., \"%d\" % h3, ha=\"center\", va=\"center\", color=\"black\", fontsize=10, fontweight=\"bold\")\nplt.savefig(\"stacked1.png\")\nplt.show()","d032342f":"### 4. Distribui\u00e7\u00e3o de Eleitores por g\u00eanero\/UF","87167f0f":"### 3. Distribui\u00e7\u00e3o de Eleitores por g\u00eanero","cb4d89e7":"### 2. Total de Eleitores por UF","8e43ba88":"### Quest\u00e3o 1 - Item C - Representa\u00e7\u00e3o Gr\u00e1fica\nPara cada uma das vari\u00e1veis, produza um ou mais gr\u00e1ficos, usando matplotlib, que descreva seu comportamento \/ caracteristica. Lembre-se que estes gr\u00e1ficos precisam ser compat\u00edveis com a classifica\u00e7\u00e3o da vari\u00e1vel. ","97e959d7":"### Quest\u00e3o 1 - Item B - Tabela de frequ\u00eancia\n\nConstrua uma tabela de frequ\u00eancia para cada uma das **vari\u00e1veis qualitativas** que voc\u00ea escolheu (caso n\u00e3o tenha escolhido nenhuma, deixe esta quest\u00e3o em branco). Uma dica: a fun\u00e7\u00e3o *value_counts()* do Pandas pode ser muito \u00fatil. =)\n","a763d870":"<div align=\"center\">\n <img src=\"https:\/\/raw.githubusercontent.com\/matheusmota\/dataviz2018\/master\/resources\/images\/logo_facens_pos.png\" width=\"150px\">\n <h1> Dataviz - Data Science Specialization Program - FACENS<\/h1>\n<\/div>\n<br><br>\n# Exerc\u00edcio 1 - Primeiro contato com o Kaggle\n(valendo nota)\n\n* **Data de entrega:** at\u00e9 o final da aula \n* **Professor:**  Matheus Mota\n* **Aluno:** Darci Roberto Pimenta Belon\n* **RA:** 203022","2c930c96":"## Quest\u00e3o 1\n**Enunciado:**  Este notebook est\u00e1 associado ao *Kaggle Dataset* chamado \"Exerc\u00edcio 1\". Este *Kaggle Dataset* possui dois arquivos em formato CSV (anv.csv e BR_eleitorado_2016_municipio ). Escolha um dos datasets dispon\u00edveis e j\u00e1 conhecidos, a seu crit\u00e9rio. Uma vez definido o csv, escolha no m\u00ednimo 7 e no m\u00e1ximo 12 vari\u00e1veis (colunas) que voc\u00ea avalia como sendo relevantes. Para cada uma das suas vari\u00e1veis escolhidas, forne\u00e7a:\n\n\n### Quest\u00e3o 1 - Item A - Classifica\u00e7\u00e3o das vari\u00e1veis\n\nClassifique todas as vari\u00e1veis escolhidas, e construa um dataframe com sua resposta.\nExemplo:","c7ce9297":"### 1. Quantidade de Munic\u00edpios por UF"}}