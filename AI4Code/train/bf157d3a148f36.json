{"cell_type":{"ab52ff71":"code","82ee9837":"code","8ce5e179":"code","7e51ae4f":"markdown"},"source":{"ab52ff71":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport copy\nimport glob\nimport random\nfrom random import random as rd","82ee9837":"def set_seed(seed = 2021):\n    np.random.seed(seed)\n    random_state = np.random.RandomState(seed)\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    return random_state\n\ndef wc(input_list):\n    # weight calculation based on public lb score\n\n    # the weight W1 of file 1 with pulibc lb score L1 equals\n    # W1 = L1 \/ (L1 + L2 + ...)\n    \n    l = []\n    for i in range(len(input_list)):\n        public_lb_score = int(input_list[i].split(\"\/\")[-1].split(\".\")[1].split(\" \")[0]) \n        l.append(public_lb_score)\n        input_list[i] = (pd.read_csv(input_list[i]).claim).ravel()\n    output = 0\n    l_sum = sum(l)\n    for i in range(len(input_list)):\n        weight = l[i] \/ l_sum\n        output += input_list[i] * weight\n    return output\n\ndef generate(dp):\n    # get all the files to blend\n    \n    l = []\n    for i in glob.iglob(f'{dp}\/*'):\n        l.append(i)\n    file_count = len(l)\n    \n    # calculate the number of files in the input dataset\n    # and split them 2 by 2\n    splits = file_count \/\/ 2\n    \n    # sort the file based on their public lb score\n    l.sort(reverse = True)\n    flist = []\n    \n    # create a file list\n    # append the 2 by 2 files as one element\n    # in the last loop, append all the files which are not necessarily 2 files\n    for i in range(splits):\n        if i == splits - 1:\n            flist.append(l[i * round(len(l) \/ splits): ])\n        else:\n            flist.append(l[i * round(len(l) \/ splits): (i + 1) * round(len(l) \/ splits)])\n    \n    # transfrom each element in the file list into one blended prediction\n    for i in range(len(flist)):   \n        flist[i] = wc(flist[i])\n    output = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\n    output.claim = 0       \n    \n    # loop a large number of times\n    # to converge the result into a stable expected value\n    for i in range(file_count ** 3):      \n        weight = []        \n        set_seed(i)\n        \n        # create a weight list with the same length as the file list\n        for i in range(len(flist)):\n            weight.append(rd())  \n        weight_sum = sum(weight)\n        \n        # normalize the weights\n        for i in range(len(weight)):\n            weight[i] \/= weight_sum\n        weight.sort(reverse = True)\n        \n        # assign each weights to each blended prediction\n        for i in range(len(flist)):\n            output.claim += flist[i] * weight[i]    \n    output.claim \/= (file_count ** 3)\n    output.to_csv(f'rwb {file_count ** 3} loops version 23.csv',index=False)","8ce5e179":"generate('..\/input\/tps09-public-notebook')","7e51ae4f":"# files are from \n* https:\/\/www.kaggle.com\/alexryzhkov\/sep21-lightautoml-starter by Alexander Ryzhkov\n* https:\/\/www.kaggle.com\/alexryzhkov\/sep21-autowoe-interpretable-model-starter by Alexander Ryzhkov\n* https:\/\/www.kaggle.com\/tomoyaogawam\/tps-sep-lightgbm-baseline-2 by TOMH\n* https:\/\/www.kaggle.com\/kennethquisado\/xgboost-10fold-cv-baseline by Kenneth Q\n* https:\/\/www.kaggle.com\/maksymshkliarevskyi\/tps-sep-starting-point-eda-xgb-cv-baseline by Maksym Shkliarevskyi\n* https:\/\/www.kaggle.com\/pratikkgandhi\/histgradientboostingclf-baseline by Pratik Gandhi\n* https:\/\/www.kaggle.com\/kieranmcgee\/tps-september-lightautoml-baseline\/output?scriptVersionId=73682974 by Kieran McGee\n* https:\/\/www.kaggle.com\/lukaszborecki\/tps-09-nn by Lukasz Borecki\n* https:\/\/www.kaggle.com\/suharkov\/sep-2021-playground-from-russia-with-love\/output by Suharkov\n* https:\/\/www.kaggle.com\/antonellomartiello\/tps09-autogluon\/output?scriptVersionId=73716407&select=submission.csv by Antonello Martiello\n* https:\/\/www.kaggle.com\/lucamassaron\/autogluon-for-tabular-playground-sep-2021 by Luca Massaron\n* https:\/\/www.kaggle.com\/farelarden\/tabular-sept-2021-optimized-xgb by Farel Arden\n* https:\/\/www.kaggle.com\/rahullalu\/tps-sept-2021-eda-and-base-models\/output?scriptVersionId=73706363 by rahul yadav\n* https:\/\/www.kaggle.com\/azzamradman\/catboost-baseline-with-simple-eda\/output?scriptVersionId=73682055&select=catboost_test.csv by Azzam Radman\n* https:\/\/www.kaggle.com\/mrigendraagrawal\/tps-sep-eda-and-starter by Mrigendra Agrawal\n* https:\/\/www.kaggle.com\/venkatkumar001\/tps-sep-21-day-1-baseline-xgb-fold\/output?scriptVersionId=73725776 by Venkatkumar R\n* https:\/\/www.kaggle.com\/hamzaghanmi\/tps-sep-starter-eda-xgboost by Hamza\n* https:\/\/www.kaggle.com\/junhyeok99\/tps-xgb-lgbm by JunHyeok Park\n* https:\/\/www.kaggle.com\/junhyeok99\/stacking-ensemble-for-beginner by JunHyeok Park\n* https:\/\/www.kaggle.com\/hiro5299834\/tps-sep-2021-single-lgbm by BIZEN\n* https:\/\/www.kaggle.com\/mlanhenke\/tps-09-single-catboostclassifier-0-81676 by mlanhenke\n* https:\/\/www.kaggle.com\/aleksandraposka\/mljar-automl-starter-optuna-mode-tps-sep-21 by Aleksandra P\u0142o\u0144ska\n* https:\/\/www.kaggle.com\/tensorchoko\/tabular-sep-2021-lightgbm\/output by tensor choko\n* https:\/\/www.kaggle.com\/takahiroyoshida012\/eda-lightgbm-hyperparameter-tuning-using-optuna by Momota\n* https:\/\/www.kaggle.com\/manabendrarout\/classification-on-gpu-lgb-and-xgboost by Manav\n* https:\/\/www.kaggle.com\/hsuchialun\/tps-xgboost-kfold-with-gpu\/output?scriptVersionId=73870353 by Hsu,CHIA-LUN\n* https:\/\/www.kaggle.com\/maximkazantsev\/tps-09-21-eda-xgboost-with-folds\/output by Maxim Kazantsev\n* https:\/\/www.kaggle.com\/nitinrajput47\/tps-aug-light-gbm\/output by Nitin Rajput\n* https:\/\/www.kaggle.com\/maximkazantsev\/tps-09-21-eda-lightgbm-with-folds\/data?select=submission.csv by Maxim Kazantsev\n* https:\/\/www.kaggle.com\/vishwas21\/tps-sep-21-tuning-xgb-catb-lgbm-and-stacking\/output?select=submission.csv by Vishwas Chepuri\n* https:\/\/www.kaggle.com\/hsuchialun\/tps-lightgbm-kfold\/output by Hsu,CHIA-LUN"}}