{"cell_type":{"07f1b20c":"code","40191d6e":"code","183d4624":"code","09dcaef9":"code","bb2ec17e":"code","32ba9fb0":"code","941ea933":"code","48920606":"code","acdc52b2":"code","2943afb3":"code","066d993d":"code","66aa6d68":"code","d32a08f9":"markdown","d9e18e33":"markdown","a405e470":"markdown","e0c4fc70":"markdown","d225f0ca":"markdown","1c446c72":"markdown","ea2d5dc0":"markdown","2c999015":"markdown","00377e7e":"markdown","f0d21712":"markdown"},"source":{"07f1b20c":"import sys\nimport os\nimport math\nimport time\nimport random\nimport shutil\nfrom pathlib import Path\n\nimport scipy as sp\nimport numpy as np\nimport pandas as pd\n","40191d6e":"train = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv')\ntarget = train.loss\ntrain = train.drop(['id','loss'],axis=1)\ntrain","183d4624":"train_add = pd.read_csv('..\/input\/tabular-denoising-residual-network\/yoof.csv')\ntrain_add = train_add.rename(columns={'loss':'pred'})\ntrain_add = train_add.drop(['ID'],axis=1)\ntrain = pd.concat([train,train_add],axis=1)\ntrain","09dcaef9":"test = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv')\ntest = test.drop(['id'],axis=1)\ntest","bb2ec17e":"test_add = pd.read_csv('..\/input\/tabular-denoising-residual-network\/submission.csv')\ntest_add = test_add.rename(columns={'loss':'pred'})\ntest_add = test_add.drop(['ID'],axis=1)\ntest = pd.concat([test,test_add],axis=1)\ntest","32ba9fb0":"from sklearn.model_selection import train_test_split\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score","941ea933":"\n#!pip install optuna\nimport optuna \nimport optuna.integration.lightgbm as lgbo\n\nparams = {'objective': 'poisson',  'metric': 'rmse' } #'objective': 'mean_squared_error',\nfrom sklearn.metrics import mean_absolute_error\nx_train, x_test, y_train, y_test = train_test_split(train, target, test_size=0.3, random_state=42)\nlgb_train = lgb.Dataset(x_train, y_train)\nlgb_valid = lgb.Dataset(x_test, y_test)\nmodel = lgbo.train(params, lgb_train, valid_sets=[lgb_valid], verbose_eval=False, num_boost_round=100, early_stopping_rounds=5) \nmodel.params\n","48920606":"best_lgb_params =model.params\nbest_lgb_params[\"learning_rate\"] = 0.006\nbest_lgb_params[\"early_stopping_round\"] = 200\nbest_lgb_params[\"num_iterations\"] = 80000","acdc52b2":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nspl=5\nkf = KFold(n_splits=spl, random_state=77, shuffle=True)\nmodels =[]\nfor fold, (trn_idx, val_idx) in enumerate(kf.split(train, target)):\n\n    print(\"Fold :\", fold+1)\n    \n    # create dataset\n    x_train, y_train = train.loc[trn_idx], target.loc[trn_idx]\n    x_test,  y_test = train.loc[val_idx], target.loc[val_idx]\n \n    #x_train, x_test, y_train, y_test = train_test_split(train, target, test_size=0.2, random_state=42)\n    lgb_train = lgb.Dataset(x_train, y_train)\n    lgb_valid = lgb.Dataset(x_test, y_test)\n \n    model = lgb.train(best_lgb_params,lgb_train, valid_sets=[lgb_valid], verbose_eval=100)\n    lpred = model.predict(x_test)\n\n    models.append(model)\n    \n    print('#### fold #########',np.sqrt(mean_squared_error(y_test, lpred)),mean_squared_error(y_test, lpred))","2943afb3":"lpred=[]\nfor model in models:\n   lpred.append(model.predict(x_test))\npred=lpred[0]\nfor i in range(1,spl):\n   pred += lpred[i]\npred = pred \/spl\nprint('#### fold #########',np.sqrt(mean_squared_error(y_test, pred)),mean_squared_error(y_test, pred))","066d993d":"#lightGBM\nlpred=[]\nfor model in models:\n   lpred.append(model.predict(test))\npred=lpred[0]\nfor i in range(1,spl):\n   pred += lpred[i]\npred = pred \/spl\npred","66aa6d68":"sub = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv')\nsub.loss = pred\nsub.to_csv('submit.csv',index=False)\nsub","d32a08f9":"![image.png](attachment:d121460a-300c-4d98-b4c2-ca30645d4621.png)","d9e18e33":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Inference<\/span>","a405e470":"### <span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Simple Optuna+LightGBM<\/span>","e0c4fc70":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Training<\/span>","d225f0ca":"![image.png](attachment:29cf6855-c7ba-4a9c-a9cc-6496ca4974b6.png)","1c446c72":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Optuna<\/span>","ea2d5dc0":"## Thanks a lot. plese upvote it.<br>\nhttps:\/\/www.kaggle.com\/oxzplvifi\/tabular-denoising-residual-network<br>\nhttps:\/\/www.kaggle.com\/alexryzhkov\/aug21-lightautoml-starter","2c999015":"### Final submission deadline - August 31, 2021","00377e7e":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Evaluation<\/span>","f0d21712":"\u3299\ud83d\udd30\ud83d\uddd1\u2b1b\ud83d\udfe5\ud83d\udfe8\ud83d\udfe9"}}