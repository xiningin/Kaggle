{"cell_type":{"bd9c910d":"code","c46f76a4":"code","b9a0751c":"code","657b5846":"code","f35250bb":"code","4cb7c7d0":"code","545aec8b":"code","58439227":"code","6ecc4d20":"code","503753f7":"code","09632e54":"code","ee0f3dc0":"code","3ed6e32f":"code","45c38ece":"code","f7fa7234":"code","fa756f60":"code","b927923f":"code","c0361ef2":"code","590334e5":"code","079365a0":"code","0b6d32cb":"code","fb84ddef":"code","6923b28c":"code","2a03fa9b":"code","b802b4e1":"code","248889cc":"code","39813a26":"code","f7fd20d3":"code","07ef5e87":"code","fa85c491":"code","b306f73f":"code","966d491c":"code","5b4aed06":"code","2a1705ed":"code","76da4880":"code","7d9cfb51":"markdown","0c2a9b1d":"markdown"},"source":{"bd9c910d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#import cudf\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nsns.set_theme()\nsns.set_style('dark')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c46f76a4":"train = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/train.csv',index_col='id')\ntest = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/test.csv')\nprint(f' Shape of the train data : {train.shape}')\nprint(f' Shape of the test data : {test.shape}')\n","b9a0751c":"train.info();","657b5846":"train.head()","f35250bb":"train['breath_id'].value_counts()","4cb7c7d0":"print(f'Each breath_id has 80 entries ?{80*train[\"breath_id\"].nunique() == train.shape[0]}')","545aec8b":"train.isna().sum()","58439227":"breath_id1=train[train.breath_id ==1]\nbreath_id2 = train[train['breath_id'] == 2]\nbreath_id3 = train[train['breath_id'] == 3]","6ecc4d20":"plt=sns.relplot(kind='scatter',data=breath_id2,x='time_step',y='pressure')","503753f7":"plt=sns.relplot(kind='line',data=breath_id3,x='time_step',y='pressure')","09632e54":"sns.set_palette(\"Set2\")","ee0f3dc0":"plt = sns.catplot(data=train,kind='box',x='pressure',row='C',col='R')","3ed6e32f":"g= sns.FacetGrid(train,col='R',row='C',sharex=True)\ng.map_dataframe(sns.scatterplot,'time_step','pressure')\ng.refline(y=train[\"pressure\"].median(),color='black')\ng.refline(y=train[\"pressure\"].mean(),color='red')","45c38ece":"g= sns.FacetGrid(train,col='R',row='C',sharex=True)\ng.map_dataframe(sns.scatterplot,'u_in','pressure')\ng.refline(y=train[\"pressure\"].median(),color='black')\ng.refline(y=train[\"pressure\"].mean(),color='red')","f7fa7234":"cateorical_columns = ['breath_id','C','R','u_out']\nnumerical_columns=['time_step','u_in']\ntrain['breath_id'].nunique(),train['u_in'].nunique()","fa756f60":"plt=sns.kdeplot(data=train[train['breath_id'].isin(list(range(1,500)))],y='pressure',x='time_step',alpha=0.7)","b927923f":"sns.set()\necdf_plot=sns.ecdfplot(train.sort_values('pressure'), \n                               x=\"pressure\",marker='.',linestyle='none')\npercentiles = np.array([2.5,25,50,75,97.5])\npressure_ptiles= np.percentile(train['pressure'],percentiles)\necdf_plot.plot(pressure_ptiles, percentiles\/100, marker='D', color='red',linestyle='none',)\n","c0361ef2":"sns.set_style('whitegrid')\ntimestep_ecdf_plot=sns.displot(train,x='time_step',y='pressure',col='C',row='R')\ntimestep_ecdf_plot.refline(y=train[\"pressure\"].median(),color='black')\ntimestep_ecdf_plot.refline(y=train[\"pressure\"].mean(),color='red')\ntimestep_ecdf_plot.refline(y=train[\"pressure\"].std(),color='orange')\ntimestep_ecdf_plot.refline(y=train[\"pressure\"].min(),color='blue')","590334e5":"print(f'The number of records where pressure recorded < 0 : {train.query(\"(pressure <0)\").shape[0]}')","079365a0":"train.query(\"(pressure <0)\").groupby('breath_id')['breath_id'].agg('count')","0b6d32cb":"train.groupby('breath_id').agg({'time_step':['mean','min','max']})","fb84ddef":"series = train.groupby('breath_id').collect().reset_index()\nexhale = 80 - train.groupby('breath_id')[['u_out']].agg('sum')","6923b28c":"train[train['breath_id'] == 70898]['u_out'].value_counts()","2a03fa9b":"pd_train = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/train.csv')\n","b802b4e1":"np.arange(80)","248889cc":"np.linspace(0,80,1)","39813a26":"#x = np.linspace(0,3,80)\nx = train[train['breath_id'] == 58]['time_step']\npressure= train[train['breath_id'] == 58]['pressure']\nu_in = train[train['breath_id'] == 58]['u_in']\nu_out = train[train['breath_id'] == 58]['u_out']\nplt.figure(figsize=(15,5))\nax = plt.plot(x,pressure,marker='.',label='pressure')\nplt.plot(x,u_in,marker='.',label='u_in')\nplt.plot(x,u_out,marker='.',label='u_out')\nplt.legend(loc='upper right')\nplt.show()","f7fd20d3":"plt.figure(figsize=(15,5))\nx = train[train['breath_id'] == 87]['time_step']\nfor i in range(1,5000):\n    pressure= train[train['breath_id'] == i]['pressure']\n    if not pressure.empty:\n        ax = plt.plot(x,pressure,color='blue')\n        u_in = train[train['breath_id'] == i]['u_in']\n        plt.plot(x,u_in,color='red')\n        u_out = train[train['breath_id'] == i]['u_out']\n        plt.plot(x,u_out,color='orange')\n\nplt.legend(['pressure','u_in','u_out'],loc='upper right',)\nplt.show()","07ef5e87":"train['u_in'].min(),train['u_in'].max()","fa85c491":"breath_id_byCandR = train.groupby(['C','R'])['breath_id'].unique()","b306f73f":"breath_id_byCandR.keys()","966d491c":"plt.figure(figsize=(15,5))\nx = train[train['breath_id'] == 87]['time_step']\nbreathids = breath_id_byCandR[(10,  5)]\nfor breath_id in breathids[:300]:\n    pressure= train[train['breath_id'] == breath_id]['pressure']\n    ax = plt.plot(x,pressure,color='blue')\n    u_in = train[train['breath_id'] == breath_id]['u_in']\n    plt.plot(x,u_in,color='red')\n    u_out = train[train['breath_id'] == breath_id]['u_out']\n    plt.plot(x,u_out,color='orange')\n\nplt.legend(['pressure','u_in','u_out'],loc='upper right',)\nplt.show()","5b4aed06":"plt.figure(figsize=(15,5))\nx = train[train['breath_id'] == 87]['time_step']\nbreathids = breath_id_byCandR[(10, 20)]\nfor breath_id in breathids[:300]:\n    pressure= train[train['breath_id'] == breath_id]['pressure']\n    ax = plt.plot(x,pressure,color='blue')\n    u_in = train[train['breath_id'] == breath_id]['u_in']\n    plt.plot(x,u_in,color='red')\n    u_out = train[train['breath_id'] == breath_id]['u_out']\n    plt.plot(x,u_out,color='orange')\n\nplt.legend(['pressure','u_in','u_out'],loc='upper right',)\nplt.show()","2a1705ed":"plt.figure(figsize=(15,5))\nx = train[train['breath_id'] == 87]['time_step']\nbreathids = breath_id_byCandR[(20, 20)]\nfor breath_id in breathids[:300]:\n    pressure= train[train['breath_id'] == breath_id]['pressure']\n    ax = plt.plot(x,pressure,color='blue')\n    u_in = train[train['breath_id'] == breath_id]['u_in']\n    plt.plot(x,u_in,color='red')\n    u_out = train[train['breath_id'] == breath_id]['u_out']\n    plt.plot(x,u_out,color='orange')\n\nplt.legend(['pressure','u_in','u_out'],loc='upper right',)\nplt.show()","76da4880":"#plt.figure(figsize=(15,45))\nfig,axs = plt.subplots(9,1,figsize=(15,45))\nx = train[train['breath_id'] == 87]['time_step']\nfor i,key in enumerate(breath_id_byCandR.keys()):\n    \n    breathids = breath_id_byCandR[key]\n    for breath_id in breathids[:200]:\n        pressure= train[train['breath_id'] == breath_id]['pressure']\n        axs[i].plot(x,pressure,color='blue')\n        u_in = train[train['breath_id'] == breath_id]['u_in']\n        axs[i].plot(x,u_in,color='red')\n        u_out = train[train['breath_id'] == breath_id]['u_out']\n        axs[i].plot(x,u_out,color='orange')\n        title = f'C = {key[0]}, R = {key[1]}'\n        axs[i].set_title(title)\n        axs[i].legend(['pressure','u_in','u_out'],loc='upper right',)\nplt.show()","7d9cfb51":"#### The columns C, R and u_out can be treated as categorical columns","0c2a9b1d":"### Let us look at any 1 breath_id in more detail"}}