{"cell_type":{"dca5eea2":"code","ca71632a":"code","2dd4b2ae":"code","cf58d671":"code","e6ddc675":"code","468f00ca":"code","30146d13":"code","1a1da73f":"code","34b92df4":"code","1f6b0991":"code","177af771":"code","3205888a":"markdown"},"source":{"dca5eea2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\"\"\"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\"\"\"\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca71632a":"test_image_path = \"\/kaggle\/input\/herbarium-2020-fgvc7\/nybg2020\/test\/\"","2dd4b2ae":"import json                                           # Loading Metadata\n\ntrain_path = \"\/kaggle\/input\/herbarium-2020-fgvc7\/nybg2020\/train\/\"\n\nwith open((train_path + \"metadata.json\"),\"r\", encoding = \"ISO-8859-1\") as file:\n    #dict_keys(['annotations', 'categories', 'images', 'info', 'licenses', 'regions'])\n    metadata = json.load(file)\n\ncategories = pd.DataFrame.from_dict(metadata[\"annotations\"])\nmetadata = pd.DataFrame.from_dict(metadata[\"images\"])\n\ndata = pd.merge(metadata, categories, on = (\"id\"))\ndata = data.drop(columns = \"id\")\ndata\n","cf58d671":"#data[data[\"category_id\"] == 23079]","e6ddc675":"import matplotlib.pyplot as plt\n\n#img = plt.imread((train_path + \"images\/156\/72\/354106.jpg\"))\n#plt.imshow(img)","468f00ca":"import torchvision\nfrom torchvision import transforms\nimport albumentations as A #Package of transformations\nfrom albumentations.pytorch.transforms import ToTensorV2\n\ndef train_transform():\n    return A.Compose([\n        ToTensorV2(p = 1),\n    ])\n\ndef test_transform():\n    return A.Compose([\n        ToTensorV2(p = 1),\n    ])","30146d13":"from torch.utils.data import Dataset, DataLoader\nimport cv2\n\nclass CreateDataset(Dataset):\n    def __init__(self, data, labels, transforms = train_transform):\n        self.data = data\n        self.transform = transforms\n        self.labels = labels\n        \n    def __len__(self):\n        return len(self.labels)\n        \n    def __getitem__(self, index):\n        file_name = self.data[\"file_name\"].values[index]\n        image = cv2.imread(train_path + file_name)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image \/= 255.0\n        \n        label = self.labels.values[index]\n        print(\"Label type before transform loop: \" + str(type(label))) #Label is a numpy array of int type\n        print(\"Image type before transforms loop: \"+ str(type(image)))#image is a numpy array\n        if self.transform:\n            image = {\"image\" : image,}\n            image = self.transform(**image) \n            print(\"Label type after transform loop: \" + str(type(label))) \n            print(\"Image type after transform loop: \" + str(type(image)))\n                 \n        return image, label\n    ","1a1da73f":"from sklearn.model_selection import train_test_split\n\ndef collate_fn(batch):\n    return (zip(*batch))\n\ntrain_data, test_data = train_test_split(data, train_size = 0.8)\n\ntrain_dataset = CreateDataset(train_data, train_data[\"category_id\"], train_transform())\ntest_dataset = CreateDataset(test_data, test_data[\"category_id\"], test_transform())\n\ntrain_loader = DataLoader(train_dataset, batch_size = 4, collate_fn = collate_fn)\ntest_loader = DataLoader(test_dataset, batch_size = 4, collate_fn = collate_fn)","34b92df4":"import torch\nfrom torch import nn\nfrom torch import optim\nimport torch.nn.functional as F\nfrom torchvision import datasets, models\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() \n                                  else \"cpu\")\n\nmodel = models.resnet50(pretrained=True)","1f6b0991":"for param in model.parameters():\n    param.requires_grad = False\n    \nmodel.fc = nn.Sequential(nn.Linear(2048, 512),\n                                 nn.ReLU(),\n                                 nn.Dropout(0.2),\n                                 nn.Linear(512, 10),\n                                 nn.LogSoftmax(dim=1))\ncriterion = nn.NLLLoss()\noptimizer = optim.Adam(model.fc.parameters(), lr=0.003)\nmodel.to(device)","177af771":"epochs = 1\nsteps = 0\nrunning_loss = 0\nprint_every = 10\ntrain_losses, test_losses = [], []\nfor epoch in range(epochs):\n    for image, label in train_loader:\n        steps += 1\n        image, label = image.to(device), label.to(device)\n        optimizer.zero_grad()\n        logps = model.forward(image)\n        loss = criterion(logps, label)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n        \n        if steps % print_every == 0:\n            test_loss = 0\n            accuracy = 0\n            model.eval()\n            with torch.no_grad():\n                for images, category in test_loader:\n                    images, category = images.to(device), category.to(device)\n                    logps = model.forward(images)\n                    batch_loss = criterion(logps, category)\n                    test_loss += batch_loss.item()\n                    \n                    ps = torch.exp(logps)\n                    top_p, top_class = ps.topk(1, dim=1)\n                    equals = top_class == category.view(*top_class.shape)\n                    accuracy += torch.mean(equals.type(torch.FloatTensor)).item()\n            train_losses.append(running_loss\/len(train_loader))\n            test_losses.append(test_loss\/len(test_loader))                    \n            print(f\"Epoch {epoch+1}\/{epochs}.. \"\n                  f\"Train loss: {running_loss\/print_every:.3f}.. \"\n                  f\"Test loss: {test_loss\/len(testloader):.3f}.. \"\n                  f\"Test accuracy: {accuracy\/len(testloader):.3f}\")\n            running_loss = 0\n            model.train()\ntorch.save(model, 'PlantDetectionResNet50.pth')","3205888a":"** Trains the model and saves a as pth output to be used in the Plant Detection Inference notebook**"}}