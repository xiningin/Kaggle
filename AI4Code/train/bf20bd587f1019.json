{"cell_type":{"6a6e228a":"code","b85c7e0a":"code","c7c25894":"code","ea1595b5":"code","fd699266":"code","be4d4ee8":"code","13e2fdee":"code","2f9a4865":"code","c52953f7":"code","e2dd8ff5":"code","5b3acdae":"code","181193ef":"code","c2daddcf":"code","f4613e1e":"code","deccf318":"code","2bfc06b0":"code","196ff3ad":"code","2a9fa962":"code","d7ea663b":"code","1228aa70":"code","5904cf49":"code","a5e1a175":"code","ca8e3cba":"code","d57d85e2":"code","be683959":"code","cb771f1e":"code","fa0d72fa":"code","e2503270":"code","8aead5c3":"code","37484d13":"code","9fd32537":"code","d6ef9afe":"code","f6b0778c":"code","2d9c03ed":"code","42b8982d":"code","ad2e5069":"code","5bcd61f6":"markdown","0a898de1":"markdown","e595a613":"markdown","39111711":"markdown","b4b02283":"markdown","3d2d82d4":"markdown","aec7e2a9":"markdown","daf58a41":"markdown","14e11739":"markdown","578323c2":"markdown","d7292f2f":"markdown","da2c6b15":"markdown","e29524ca":"markdown","74085135":"markdown","5c71b384":"markdown","8dee5205":"markdown","9bcf2517":"markdown","b3273e97":"markdown","9dd5708f":"markdown","b3281dac":"markdown","e25da100":"markdown"},"source":{"6a6e228a":"%%HTML \n<a href=\"http:\/\/a.video.nfl.com\/\/films\/vodzilla\/153321\/Lechler_55_yd_punt-lG1K51rf-20181119_173634665_5000k.mp4\"> \n    (2:57) (Punt formation) S.Lechler punts 48 yards to TEN 16, Center-J.Weeks. A.Jackson pushed ob at TEN 32 for 16 \n    yards (J.Jenkins).\n<\/a> \n<img src=\"https:\/\/s3.amazonaws.com\/nonwebstorage\/headstrong\/animation_585_733_3.gif\" width=\"650\">","b85c7e0a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_palette(\"Set2\")\nimport os\nprint(os.listdir('..\/input\/nfl-big-data-bowl-2020'))","c7c25894":"from kaggle.competitions import nflrush\nenv = nflrush.make_env()","ea1595b5":"%%time\ntrain_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\ntrain_df.head()","fd699266":"train_df.info()","be4d4ee8":"train_df.describe(include='all')","13e2fdee":"train_df.head()","2f9a4865":"%%time\nimport missingno as msno\nmsno.matrix(train_df)","c52953f7":"%%time\nprint(len(train_df.GameId.unique()))\nprint(len(train_df.NflId.unique()))","e2dd8ff5":"%%time\nprint(len(train_df.PlayId.unique()))\nprint(len(train_df.NflId.unique()))","5b3acdae":"play_id_unique = pd.Series([0 for i in range(512)])\nfor idx, i in enumerate(train_df.GameId.unique()):\n    play_id_unique[idx] = len(train_df[train_df['GameId']==i].PlayId.unique())\n\nfig, ax = plt.subplots(1, 1, figsize=(15, 6))\nsns.countplot(play_id_unique, ax=ax)","181193ef":"%%time\n#https:\/\/www.kaggle.com\/kmader\/previewing-the-games\n\nfrom matplotlib.patches import Rectangle\nfootball_field = lambda : Rectangle(xy=(10, 0), width=100, height=53.3,  color='g',alpha=0.10)\n\nfig, axes = plt.subplots(5, 4, figsize=(20, 20))\nfor (play_id, play_rows), ax in zip(train_df.groupby('PlayId'), axes.flatten()):\n    ax.add_patch(football_field())\n    for player_id, player_rows in play_rows.groupby('NflId'):\n        player_rows = player_rows.sort_values('TimeSnap')\n        ax.scatter(player_rows['X'], player_rows['Y'])\n    ax.set_title(play_id)\n    ax.set_aspect(1)\n    ax.set_xlim(0, 120)\n    ax.set_ylim(-10, 63)\nplt.show()","c2daddcf":"print((train_df.X.min(), train_df.Y.min()))\nprint((train_df.X.max(), train_df.Y.max()))","f4613e1e":"%%time\nfig, ax = plt.subplots(1,1, figsize=(12, 5.3))\nsns.scatterplot(x='X', y='Y', data=train_df, alpha=0.3)\nplt.show()","deccf318":"%%time\nfig, ax = plt.subplots(1,2, figsize=(18, 7))\nsns.distplot(train_df['X'], ax=ax[0])\nsns.distplot(train_df['Y'], ax=ax[1])\n\nplt.show()","2bfc06b0":"%%time\nfig, ax = plt.subplots(1,3, figsize=(21, 7))\nsns.distplot(train_df['S'], ax=ax[0], color=\"#4285f4\")\nsns.distplot(train_df['A'], ax=ax[1], color=\"#34a853\")\nsns.distplot(train_df['Dis'], ax=ax[2], color=\"#ea4335\")\n\nplt.show()","196ff3ad":"%%time\nfig, ax = plt.subplots(1,2, figsize=(18, 7))\nsns.countplot(train_df['PlayerHeight'], ax=ax[0])\nsns.countplot(train_df['PlayerWeight'], ax=ax[1])\n\nplt.show()","2a9fa962":"%%time\ndef ftoi(str):\n    a, b = map(int, str.split('-'))\n    return a * 12 + b\n\ntrain_df['PlayerHeight'] = train_df['PlayerHeight'].apply(ftoi)","d7ea663b":"train_df['PlayerHeight'].head()\ntrain_df['PlayerWeight'].head()","1228aa70":"%%time\nfig, ax = plt.subplots(1,2, figsize=(18, 7))\nsns.countplot(train_df['PlayerHeight'], ax=ax[0])\nsns.countplot(train_df['PlayerWeight'], ax=ax[1])\n\nplt.show()","5904cf49":"%%time\nfig, ax = plt.subplots(1,2, figsize=(18, 7))\nsns.distplot(train_df['PlayerHeight'], ax=ax[0])\nsns.distplot(train_df['PlayerWeight'], ax=ax[1])\n\nplt.show()","a5e1a175":"%%time\nsns.lmplot(x='PlayerHeight', y='PlayerWeight', data=train_df, palette=\"Set3\")\nplt.show()","ca8e3cba":"%%time\nfig, ax = plt.subplots(1,1, figsize=(20, 6))\nsns.countplot(train_df['PlayerBirthDate'], ax=ax)\nplt.show()","d57d85e2":"print(min(train_df['PlayerBirthDate']), max(train_df['PlayerBirthDate']))","be683959":"%%time\nfig, ax = plt.subplots(1, 1, figsize=(20,15))\nsns.countplot(y='PlayerCollegeName', data=train_df, ax=ax)\nplt.show()","cb771f1e":"len(train_df.PlayerCollegeName.unique())","fa0d72fa":"%%time\nfig, ax = plt.subplots(1, 1, figsize=(20,15))\nsns.countplot(y='Location', data=train_df, ax=ax)\nplt.show()","e2503270":"%%time\nfig, ax = plt.subplots(1, 1, figsize=(20,13))\nsns.countplot(y='Stadium', data=train_df, ax=ax)\nplt.title(\"{} Stadiums\".format(len(train_df.Stadium.unique())))\nplt.show()","8aead5c3":"%%time\nfig, ax = plt.subplots(1, 1, figsize=(15,8))\nsns.countplot(y='StadiumType', data=train_df, ax=ax)\nplt.title(\"{} Stadium Types\".format(len(train_df.StadiumType.unique())))\nplt.show()","37484d13":"%%time\nfig, ax = plt.subplots(1, 1, figsize=(15,8))\nsns.countplot(y='GameWeather', data=train_df, ax=ax)\nplt.show()","9fd32537":"%%time\nfrom wordcloud import WordCloud \n\nfig, ax = plt.subplots(1, 1, figsize=(15, 7))\ntrain_df['GameWeather'] = train_df['GameWeather'].apply(str)\nwordcloud = WordCloud(background_color='white').generate(\" \".join(train_df['GameWeather']))\n\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","d6ef9afe":"sns.set_palette('bright')\nfig, ax = plt.subplots(2,1,figsize=(20,10))\nfor idx, elem in enumerate([\"Temperature\" , \"Humidity\"]):\n    sns.distplot(train_df[elem].dropna(), ax=ax[idx])\nplt.show()","f6b0778c":"train_df['WindSpeed'].unique()","2d9c03ed":"%%time\ndef numeric_check(s):\n    s = str(s)\n    if s.isnumeric():\n        return int(s)\n    return None\n\ntrain_df[\"WindSpeed\"] = train_df[\"WindSpeed\"].apply(numeric_check)\n\nfig, ax = plt.subplots(1,1,figsize=(10,4))\nsns.distplot(train_df[\"WindSpeed\"].dropna(),ax=ax)\nplt.show()","42b8982d":"%%time\ndef direction_convert(s):\n    s = str(s)\n    for i in ['North', 'South', 'East', 'West']:\n        s = s.replace(i, i[0])\n        s = s.replace(i.lower(), i[0])\n        s = s.replace(i.upper(), i[0])\n\n    for i in ['-', 'from', 'From', '\/', ' ']:\n        s = s.replace(i,'')\n        \n    s.replace('s','S')\n    if s.isnumeric() or s=='nan':\n        s = \"Calm\"\n    return s \nfig, ax = plt.subplots(1,1,figsize=(30,4))\ntrain_df[\"WindDirection\"] = train_df[\"WindDirection\"] .apply(direction_convert)\nsns.countplot(train_df[\"WindDirection\"] ,ax=ax)\nplt.show()","ad2e5069":"%%time\nimport pandas_profiling\ntrain_df.profile_report()","5bcd61f6":"## Data\n\n- GameId - a unique game identifier\n- PlayId - a unique play identifier\n- Team - home or away\n- X - player position along the long axis of the field. See figure below.\n- Y - player position along the short axis of the field. See figure below.\n- S - speed in yards\/second\n- A - acceleration in yards\/second^2\n- Dis - distance traveled from prior time point, in yards\n- Orientation - orientation of player (deg)\n- Dir - angle of player motion (deg)\n- NflId - a unique identifier of the player\n- DisplayName - player's name\n- JerseyNumber - jersey number\n- Season - year of the season\n- YardLine - the yard line of the line of scrimmage\n- Quarter - game quarter (1-5, 5 == overtime)\n- GameClock - time on the game clock\n- PossessionTeam - team with possession\n- Down - the down (1-4)\n- Distance - yards needed for a first down\n- FieldPosition - which side of the field the play is happening on\n- HomeScoreBeforePlay - home team score before play started\n- VisitorScoreBeforePlay - visitor team score before play started\n- NflIdRusher - the NflId of the rushing player\n- OffenseFormation - offense formation\n- OffensePersonnel - offensive team positional grouping\n- DefendersInTheBox - number of defenders lined up near the line of scrimmage, spanning the width of the offensive line\n- DefensePersonnel - defensive team positional grouping\n- PlayDirection - direction the play is headed\n- TimeHandoff - UTC time of the handoff\n- TimeSnap - UTC time of the snap\n- Yards - the yardage gained on the play (you are predicting this)\n- PlayerHeight - player height (ft-in)\n- PlayerWeight - player weight (lbs)\n- PlayerBirthDate - birth date (mm\/dd\/yyyy)\n- PlayerCollegeName - where the player attended college\n- HomeTeamAbbr - home team abbreviation\n- VisitorTeamAbbr - visitor team abbreviation\n- Week - week into the season\n- Stadium - stadium where the game is being played\n- Location - city where the game is being player\n- StadiumType - description of the stadium environment\n- Turf - description of the field surface\n- GameWeather - description of the game weather\n- Temperature - temperature (deg F)\n- Humidity - humidity\n- WindSpeed - wind speed in miles\/hour\n- WindDirection - wind direction","0a898de1":"Total 512 game describe in train dataset.","e595a613":"A new contest has begun!!\n\nHow about seeing all the features before entering the competition?","39111711":"## Stadium Type","b4b02283":"without Outlier, it seams very normal or uniform distribution","3d2d82d4":"## PlayerBirthDate","aec7e2a9":"## PlayerHeight, PlayerWeight","daf58a41":"## Other Weather\n\n- Temperature - temperature (deg F)\n- Humidity - humidity\n- WindSpeed - wind speed in miles\/hour\n- WindDirection - wind direction","14e11739":"## Heatmap(have to fill null data)","578323c2":"## PlayerCollegeName","d7292f2f":"It's hard to see.. How about WordCloud","da2c6b15":"It seems skew. (have to preprocessing)","e29524ca":"image from https:\/\/www.kaggle.com\/jpmiller\/nfl-punt-analytics","74085135":"## GameId & NflId","5c71b384":"## PlayId & NflId","8dee5205":"## X and Y ","9bcf2517":"## Let's Start new Competition!\n\n","b3273e97":"## Location","9dd5708f":"## S & A (speed and acceleration)","b3281dac":"## GameWeather","e25da100":"## Stadium"}}