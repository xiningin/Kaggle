{"cell_type":{"92e6e935":"code","c5cd0e06":"code","c7ee59e1":"code","3f3e2c37":"code","d30f9f79":"code","9116d9d3":"code","45ab70d3":"code","49c4d36d":"code","e8e86f5c":"code","d7d8c5a0":"code","a06047fc":"code","3c1e1c93":"code","ac19d3bb":"code","f12ce8e4":"code","ab668293":"code","f3670dc3":"code","54b16322":"code","d0361d8f":"code","7611a7a3":"code","e6c1fbb5":"code","6737d043":"code","f322d1eb":"code","e99a1b04":"markdown"},"source":{"92e6e935":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5cd0e06":"df = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv\")\ntestdf = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv\")\ndf.head()","c7ee59e1":"df.info()","3f3e2c37":"df = df.drop(columns= ['County','Province_State'])\ntestdf = testdf.drop(columns= ['County','Province_State'])\ndf","d30f9f79":"df.iloc[:,[1,5]]","9116d9d3":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle1= LabelEncoder()\ndf.iloc[:,1] = le.fit_transform(df.iloc[:,1])\ndf.iloc[:,5] = le1.fit_transform(df.iloc[:,5])\ntestdf.iloc[:,1] = le.transform(testdf.iloc[:,1])\ntestdf.iloc[:,5] = le1.transform(testdf.iloc[:,5])","45ab70d3":"df['Date'] = pd.to_datetime(df['Date'])\ndf['Dayofweek'] = df['Date'].dt.dayofweek\ndf['Day'] = df['Date'].dt.day\ndf['Month'] = df['Date'].dt.month\ndf1 = df.drop(columns=['Date'])\n\ntestdf['Date'] = pd.to_datetime(testdf['Date'])\ntestdf['Day'] = testdf['Date'].dt.day\ntestdf['Dayofweek'] = testdf['Date'].dt.dayofweek\ntestdf['Month'] = testdf['Date'].dt.month\ntestdf1 = testdf.drop(columns=['Date'])","49c4d36d":"fid = testdf1['ForecastId']\ntest = testdf1.drop(columns=['ForecastId'])\ntest","e8e86f5c":"y_train = df1['TargetValue']\nx_train = df1.drop(columns=['TargetValue','Id'])\nx_train","d7d8c5a0":"test1 = test[['Country_Region', 'Population', 'Weight', 'Target','Dayofweek','Day','Month']]\ntest1","a06047fc":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test1 = sc.transform(test1)","3c1e1c93":"from sklearn.model_selection import train_test_split \n\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.2, random_state=0)","ac19d3bb":"from sklearn.ensemble import RandomForestRegressor\nforest = RandomForestRegressor()\nforest.fit(x_train , y_train)","f12ce8e4":"prediction = forest.predict(x_test)","ab668293":"check = pd.DataFrame({'pred':prediction})\ncheck","f3670dc3":"accuracy =forest.score(x_test,y_test)\naccuracy","54b16322":"predict =forest.predict(x_test1)","d0361d8f":"predict[1789]","7611a7a3":"sub = pd.DataFrame({'id':fid,'pred':predict})\nsub","e6c1fbb5":"a=sub.groupby(['id'])['pred'].quantile(q=0.05).reset_index()\nb=sub.groupby(['id'])['pred'].quantile(q=0.5).reset_index()\nc=sub.groupby(['id'])['pred'].quantile(q=0.95).reset_index()","6737d043":"a.columns=['Id','q0.05']\nb.columns=['Id','q0.5']\nc.columns=['Id','q0.95']\na=pd.concat([a,b['q0.5'],c['q0.95']],1)\na['q0.05']=a['q0.05']\na['q0.5']=a['q0.5']\na['q0.95']=a['q0.95']\na","f322d1eb":"sub=pd.melt(a, id_vars=['Id'], value_vars=['q0.05','q0.5','q0.95'])\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.to_csv(\"submission.csv\",index=False)\nsub.head()","e99a1b04":"I would like to mention that I referred to this [kernel](https:\/\/www.kaggle.com\/nischaydnk\/covid19-week5-visuals-randomforestregressor) for converting predictions to final format."}}