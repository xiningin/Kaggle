{"cell_type":{"c3ab8ab9":"code","ce2b1b6b":"code","e5cb8987":"code","dfda2fcb":"code","128202b5":"code","1a9b3691":"code","2cfc27b6":"code","08726397":"code","3abc3c2f":"code","056bd295":"code","8685b749":"code","32384167":"code","d5164e4e":"code","d91518fe":"code","c0089bce":"code","64af443d":"code","ed4b57d8":"code","f1893e62":"code","4be36cb3":"code","a3440b61":"code","ecb6133f":"code","958802eb":"code","507c7ae2":"code","a07dc800":"code","6c972963":"code","229a4453":"code","e0f26d42":"code","844abbaf":"markdown","a33a4436":"markdown","b56f8f19":"markdown","33c94807":"markdown","6a058630":"markdown","555bfbef":"markdown","714331ed":"markdown","ad8e2268":"markdown","60e6695d":"markdown","df80ed76":"markdown","b0eb43bd":"markdown","14c1a576":"markdown","9d7cf375":"markdown"},"source":{"c3ab8ab9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import *\nimport seaborn as sns\nimport plotly.express as px\nfrom os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport nltk\nimport spacy\nimport string\npd.options.mode.chained_assignment = None\n\nfrom nltk.corpus import stopwords\n\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce2b1b6b":"df = pd.read_csv('..\/input\/mbti-type\/mbti_1.csv')\ndf.head()","e5cb8987":"df.info()","dfda2fcb":"a = df.sort_values(by=[\"type\"], ascending=True, inplace=False)\na","128202b5":"fig = plt.gcf()\nfig.set_size_inches(20, 5)\nsns.countplot(x=\"type\", data = df)","1a9b3691":"grouped_data = df.groupby(['type']).size().reset_index()\ngrouped_data.columns = ['type','Count']\ngrouped_data = grouped_data.sort_values('Count', ascending = True)\nfig = px.bar(grouped_data, x = 'type', y = 'Count', title = 'Distribution Of Each Types')\nfig.show()","2cfc27b6":"a = df.groupby('type').agg({'type':'count'})\na","08726397":"b = df[~(df.type.isin(['ESTJ','ESFJ','ESFP', 'ESTP', 'ISFP', 'ISTP', 'ENFP','ENTP','INTJ','INTP','INFJ','INFP']))]\nb","3abc3c2f":"grouped_data = b.groupby(['type']).size().reset_index()\ngrouped_data.columns = ['type','Count']\ngrouped_data = grouped_data.sort_values('Count', ascending = True)\nfig = px.bar(grouped_data, x = 'type', y = 'Count', title = 'Distribution of ISFJ, ENFJ, ISTJ, ENTJ')\nfig.show()","056bd295":"def var_row(row):\n    l = []\n    for i in row.split('|||'):\n        l.append(len(i.split()))\n    return np.var(l)\n\nb['words_per_comment'] = b['posts'].apply(lambda x: len(x.split())\/50)\nb['variance_of_word_counts'] = b['posts'].apply(lambda x: var_row(x))\nb.head()","8685b749":"plt.figure(figsize=(15,10))\nsns.swarmplot(\"type\", \"words_per_comment\", data=b)","32384167":"##### Compute list of subject with Type | list of comments \nfrom nltk.stem import PorterStemmer, WordNetLemmatizer\n\nunique_type_list = ['INFJ', 'ENTP', 'INTP', 'INTJ', 'ENTJ', 'ENFJ', 'INFP', 'ENFP',\n       'ISFP', 'ISTP', 'ISFJ', 'ISTJ', 'ESTP', 'ESFP', 'ESTJ', 'ESFJ']\n  \nunique_type_list = [x.lower() for x in unique_type_list]\n\n# Lemmatize\nstemmer = PorterStemmer()\nlemmatiser = WordNetLemmatizer()\n\ndef pre_process_data(b, remove_stop_words=True):\n\n    list_personality = []\n    list_posts = []\n    len_data = len(b)\n    i=0\n    \n    for row in b.iterrows():\n        i+=1\n        if i % 500 == 0:\n            print(\"%s | %s rows\" % (i, len_data))\n\n        ##### Remove and clean comments\n        posts = row[1].posts\n        temp = re.sub('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', 'link', posts)\n        temp = re.sub(\"[^a-zA-Z]\", \" \", temp)\n        temp = re.sub(' +', ' ', temp).lower()\n        if remove_stop_words:\n            temp = \" \".join([lemmatiser.lemmatize(w) for w in temp.split(' ') if w not in cachedStopWords])\n        else:\n            temp = \" \".join([lemmatiser.lemmatize(w) for w in temp.split(' ')])\n\n        type_labelized = lab_encoder.transform([row[1].type])[0]\n        list_personality.append(type_labelized)\n        list_posts.append(temp)\n\n    #del data\n    list_posts = np.array(list_posts)\n    list_personality = np.array(list_personality)\n    return list_posts, list_personality\n\nlist_posts, list_personality = pre_process_data(b, remove_stop_words=True)","d5164e4e":"print(\"Num posts and personalities: \",  list_posts.shape, list_personality.shape)","d91518fe":"list_posts[0]","c0089bce":"from sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.manifold import TSNE\n\n# Posts to a matrix of token counts\ncntizer = CountVectorizer(analyzer=\"word\", \n                             max_features=1500, \n                             tokenizer=None,    \n                             preprocessor=None, \n                             stop_words=None,  \n                             max_df=0.7,\n                             min_df=0.1) \n\n# Learn the vocabulary dictionary and return term-document matrix\nprint(\"CountVectorizer...\")\nX_cnt = cntizer.fit_transform(list_posts)\n\n# Transform the count matrix to a normalized tf or tf-idf representation\ntfizer = TfidfTransformer()\n\nprint(\"Tf-idf...\")\n# Learn the idf vector (fit) and transform a count matrix to a tf-idf representation\nX_tfidf =  tfizer.fit_transform(X_cnt).toarray()","64af443d":"feature_names = list(enumerate(cntizer.get_feature_names()))\nfeature_names","ed4b57d8":"def preprocess_inputs(df):\n    \n    texts = b['posts'].copy()\n    labels = b['type'].copy()\n    \n    # Process text data\n    stop_words = stopwords.words('english')\n    \n    texts = [text.lower() for text in texts]\n    texts = [text.split() for text in texts]\n    texts = [[word.strip() for word in text] for text in texts]\n    texts = [[word for word in text if word not in stop_words] for text in texts]\n    \n    vocab_length = 10000\n    \n    tokenizer = Tokenizer(num_words=vocab_length)\n    tokenizer.fit_on_texts(texts)\n    \n    texts = tokenizer.texts_to_sequences(texts)\n    \n    max_seq_length = np.max([len(text) for text in texts])\n    \n    texts = pad_sequences(texts, maxlen=max_seq_length, padding='post')\n    \n    # Process label data\n    label_values = ['ENTJ', 'ENFJ', 'ISFJ', 'ISTJ']\n    \n    label_mapping = {label: np.int(label[0] == 'E') for label in label_values}\n    \n    labels = labels.replace(label_mapping)\n    labels = np.array(labels)\n    \n    return texts, labels, max_seq_length, vocab_length, label_mapping","f1893e62":"texts, labels, max_seq_length, vocab_length, label_mapping = preprocess_inputs(b)","4be36cb3":"print(\"Text sequences:\\n\", texts.shape)\nprint(\"\\nLabels:\\n\", labels.shape)\nprint(\"\\nMax sequence length:\\n\", max_seq_length)\nprint(\"\\nVocab length:\\n\", vocab_length)\nprint(\"\\nLabel mapping:\\n\", label_mapping)","a3440b61":"texts_train, texts_test, labels_train, labels_test = train_test_split(texts, labels, train_size=0.7, random_state=123)","ecb6133f":"texts","958802eb":"classifier = RandomForestClassifier(n_estimators=1000, random_state=0)\nclassifier.fit(texts_train, labels_train) ","507c7ae2":"labels_pred = classifier.predict(texts_test)","a07dc800":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\nprint(confusion_matrix(labels_test,labels_pred))\nprint(classification_report(labels_test,labels_pred))\nprint(accuracy_score(labels_test, labels_pred))","6c972963":"embedding_dim = 512\n\ninputs = tf.keras.Input(shape=(max_seq_length,))\n\nembedding = tf.keras.layers.Embedding(\n    input_dim=vocab_length,\n    output_dim=embedding_dim,\n    input_length=max_seq_length\n)(inputs)\n\ngru = tf.keras.layers.Bidirectional(\n    tf.keras.layers.GRU(\n        units=256,\n        return_sequences=True\n    )\n)(embedding)\n\nflatten = tf.keras.layers.Flatten()(gru)\n\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(flatten)\n\n\nmodel = tf.keras.Model(inputs, outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[\n        'accuracy',\n        tf.keras.metrics.AUC(name='auc')\n    ]\n)\n\n\nhistory = model.fit(\n    texts_train,\n    labels_train,\n    validation_split=0.2,\n    batch_size=32,\n    epochs=5,\n    callbacks=[\n        tf.keras.callbacks.ModelCheckpoint('.\/model.h5', save_best_only=True, save_weights_only=True)\n    ]\n)","229a4453":"model.load_weights('.\/model.h5')","e0f26d42":"model.evaluate(texts_test, labels_test)","844abbaf":"In this section, I will visualize all data and then scrap 4 types that equally distributed to be used in this notebook. ","a33a4436":"This notebook trying to do Classification of MBTI type by text. \nThere would be \n1. Data Visualization\n2. Text Preprocessing \n3. Converting Text to numbers\n4. Training and Test Sets\n5. Training Test Classification Model and Predicting Sentiment\n6. Evaluating the Model \n\nThe data actually are not equal distributed from each types. Therefore, I will only use 4 types that representing 2 Extroverted and 2 Introverted. ","b56f8f19":"## **Evaluating The Model**","33c94807":"**RNN using TensorFlow**","6a058630":"## **Text Preprocessing Version 2**","555bfbef":"This is the process of dropping down the data that we would not use.","714331ed":"## Data Visualization","ad8e2268":"## **Training and Testing Sets**","60e6695d":"## **Converting Text to Numbers**","df80ed76":"## **Text Preprocessing**\n\nIn this section, remove all the special characters, numbers, and unwanted spaces from our text.","b0eb43bd":"The accuracy only 45%. Let's try with another RNN using TensorFlow","14c1a576":"## **Training Text Classification Model and Predicting Sentiment**","9d7cf375":"The accuracy using RNN is 68%"}}