{"cell_type":{"e15442cb":"code","876786c3":"code","303c2c75":"code","961e386b":"code","6994f8f8":"code","f365f038":"code","6dde9ae4":"code","6e676f90":"code","0b98ace5":"code","351c3eb7":"code","a342e536":"code","cbec181b":"code","9072641e":"code","5a0d352f":"code","15476a8e":"code","d74abeb6":"code","3439a741":"code","f275b258":"code","e4e4fee4":"markdown","8288228c":"markdown","a13fb20f":"markdown","42bc508a":"markdown","fbcfd195":"markdown","d31a67a4":"markdown","6b7ca900":"markdown","7f92a104":"markdown","60110ca4":"markdown","c854d62d":"markdown","fb5da1b3":"markdown","c3f5ac80":"markdown","b88d5188":"markdown","8902f3a4":"markdown","89c2aa1a":"markdown","42155daf":"markdown"},"source":{"e15442cb":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nfrom colorama import Fore, Back, Style\n\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\nimport squarify\nfrom collections import Counter\n\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.optimizers import SGD\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import *\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","876786c3":"data = pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndf_student = data.copy(deep=True)","303c2c75":"data.head()","961e386b":"data.info()","6994f8f8":"data['score'] = ((data['math score']+ data['reading score'] + data['writing score'])\/ 3).round(2)","f365f038":"data.describe().T.style.bar(subset=['mean'], color='#205ff2')\\\n                            .background_gradient(subset=['std'], cmap='viridis')\\\n                             .background_gradient(subset=['50%'], cmap='mako')","6dde9ae4":"\ntrain,test=train_test_split(data,test_size=0.3)\n\nfig = plt.figure(figsize=(18,15),facecolor='#faf9f4')\ngs = fig.add_gridspec(3, 3)\ngs.update(wspace=0.5, hspace=0.25)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\nax3 = fig.add_subplot(gs[1, 0])\nax4 = fig.add_subplot(gs[1, 1])\nax5 = fig.add_subplot(gs[1, 2])\nax6 = fig.add_subplot(gs[2, 0])\nax7 = fig.add_subplot(gs[2, 1])\nax8 = fig.add_subplot(gs[2, 2])\n\nbackground_color = \"#faf9f4\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \nax2.set_facecolor(background_color) \nax3.set_facecolor(background_color) \nax4.set_facecolor(background_color) \nax5.set_facecolor(background_color) \nax6.set_facecolor(background_color) \nax7.set_facecolor(background_color) \nax8.set_facecolor(background_color)\n\n# Ax0 - parental level of education\ntrain_graph_temp_df = pd.DataFrame(train[\"parental level of education\"].value_counts())\ntrain_graph_temp_df[\"Percentage\"] = train_graph_temp_df[\"parental level of education\"].apply(lambda x: x\/sum(train_graph_temp_df[\"parental level of education\"])*100)\ntest_graph_temp_df = pd.DataFrame(test[\"parental level of education\"].value_counts())\ntest_graph_temp_df[\"Percentage\"] = test_graph_temp_df[\"parental level of education\"].apply(lambda x: x\/sum(test_graph_temp_df[\"parental level of education\"])*100)\n\nax0.grid(color='gray',axis='y',zorder=2,dashes=(1,5))\nax0.plot( train_graph_temp_df[\"Percentage\"],np.arange(len(train_graph_temp_df.index)), zorder=3, color=\"#eeb977\", marker='o')\nax0.plot(test_graph_temp_df[\"Percentage\"],np.arange(len(test_graph_temp_df.index)),  zorder=3, color=\"#8d9e8c\", marker='o')\nax0.xaxis.set_major_formatter(mtick.PercentFormatter())\nax0.xaxis.set_major_locator(mtick.MultipleLocator(10))\nax0.set_yticklabels(['','some college','high school',\"associate's degree\", 'some high school',   \"bachelor's degree\", \"master's degree\"])\nax0.set_xticklabels(['','10%','20%'])\nax0.text(5.5,-1,'parental level of education',fontfamily='serif',fontsize=14, fontweight='bold',color=\"#323232\")\nfor i,j in zip([0,1,2,3,4,5], train_graph_temp_df[\"Percentage\"]):\n    ax0.annotate(f'{j:0.0f}%',xy=(j,i), color='#eeb977')\nfor i,j in zip([0,1,2,3,4,5], test_graph_temp_df[\"Percentage\"]):\n    ax0.annotate(f'{j:0.0f}%',xy=(j,i), color='#8d9e8c')\n    \n\n# Ax1 - Race\/Ethnicity\ntrain_graph_temp_df = pd.DataFrame(train[\"race\/ethnicity\"].value_counts())\ntrain_graph_temp_df[\"Percentage\"] = train_graph_temp_df[\"race\/ethnicity\"].apply(lambda x: x\/sum(train_graph_temp_df[\"race\/ethnicity\"])*100)\ntest_graph_temp_df = pd.DataFrame(test[\"race\/ethnicity\"].value_counts())\ntest_graph_temp_df[\"Percentage\"] = test_graph_temp_df[\"race\/ethnicity\"].apply(lambda x: x\/sum(test_graph_temp_df[\"race\/ethnicity\"])*100)\n\nax1.grid(color='gray', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax1.barh(['group C','group D',  'group B',    'group E',  'group A' ], train_graph_temp_df[\"Percentage\"], zorder=3, color=\"#eeb977\")\nax1.barh(['group C','group D',  'group B',    'group E',  'group A'], test_graph_temp_df[\"Percentage\"]*-1, zorder=3, color=\"#8d9e8c\")\nax1.text(-20, -1.5, 'RACE\/ETHNICITY', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#323232\")\nax1.xaxis.set_major_formatter(mtick.PercentFormatter())\nax1.xaxis.set_major_locator(mtick.MultipleLocator(20))\nax1.set_xticklabels([\"40%\", \"20%\", \"0%\", \"20%\", \"40%\"])\nfor i,j in zip(['group C','group D',  'group B',    'group E',  'group A'], train_graph_temp_df[\"Percentage\"]):\n    ax1.annotate(f'{j:0.0f}%',xy=(j\/2,i), color='#f6f6f6', horizontalalignment='center', verticalalignment='center')\nfor i,j in zip(['group C','group D',  'group B',    'group E',  'group A'], test_graph_temp_df[\"Percentage\"]):\n    ax1.annotate(f'{j:0.0f}%',xy=((j*-1)\/2,i), color='#f6f6f6', horizontalalignment='center', verticalalignment='center')\n\n    \n# Ax2 - Gender\ntrain_graph_temp_df = pd.DataFrame(train[\"gender\"].value_counts())\ntrain_graph_temp_df[\"Percentage\"] = train_graph_temp_df[\"gender\"].apply(lambda x: x\/sum(train_graph_temp_df[\"gender\"])*100)\ntest_graph_temp_df = pd.DataFrame(test[\"gender\"].value_counts())\ntest_graph_temp_df[\"Percentage\"] = test_graph_temp_df[\"gender\"].apply(lambda x: x\/sum(test_graph_temp_df[\"gender\"])*100)\n\nx = np.arange(len(train_graph_temp_df))\nax2.text(0.37, -9, 'GENDER', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#323232\")\nax2.grid(color='gray', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax2.bar(x, height=train_graph_temp_df[\"Percentage\"], zorder=3, color=\"#eeb977\", width=0.4)\nax2.bar(x+0.4, height=test_graph_temp_df[\"Percentage\"], zorder=3, color=\"#8d9e8c\", width=0.4)\nax2.set_xticks(x + 0.4 \/ 2)\nax2.set_xticklabels([\"Female\", \"Male\"])\nax2.yaxis.set_major_formatter(mtick.PercentFormatter())\nax2.yaxis.set_major_locator(mtick.MultipleLocator(20))\nfor i,j in zip([0, 1], train_graph_temp_df[\"Percentage\"]):\n    ax2.annotate(f'{j:0.0f}%',xy=(i, j\/2), color='#f6f6f6', horizontalalignment='center', verticalalignment='center')\nfor i,j in zip([0, 1], test_graph_temp_df[\"Percentage\"]):\n    ax2.annotate(f'{j:0.0f}%',xy=(i+0.4, j\/2), color='#f6f6f6', horizontalalignment='center', verticalalignment='center')\n \n\n# Ax3 - READING score\ntrain_graph_temp_df = pd.DataFrame(train[\"reading score\"])\ntrain_graph_temp_df[\"TrainTest\"] = \"Train\"\ntest_graph_temp_df = pd.DataFrame(test[\"reading score\"])\ntest_graph_temp_df[\"TrainTest\"] = \"Test\"\nax3.text(0.18,0, 'READING score', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#323232\")\ncomb_graph_temp_df = pd.concat([train_graph_temp_df, test_graph_temp_df], axis=0)\nsns.boxenplot(ax=ax3, y=\"reading score\", x=\"TrainTest\", data=comb_graph_temp_df, palette=[\"#eeb977\", \"#8d9e8c\"])\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n\n# Ax4 - Heading\nax4.set_xticklabels([])\nax4.set_yticklabels([])\nax4.text(-0.45, 0.6, 'Features distribution of STUDENT PERFORMANCE dataset', fontsize=14, fontweight='bold')\nax4.text(-0.2, 0.51, 'Features comparison between train and test dataset', fontsize=12)\nfor s in [\"top\",\"right\",\"left\",\"bottom\"]:\n    ax4.spines[s].set_visible(False)\nax4.tick_params(left=False, bottom=False)\n\n\n# Ax5 - WRITING score\ntrain_graph_temp_df = pd.DataFrame(train[\"writing score\"])\ntrain_graph_temp_df[\"TrainTest\"] = \"Train\"\ntest_graph_temp_df = pd.DataFrame(test[\"writing score\"])\ntest_graph_temp_df[\"TrainTest\"] = \"Test\"\nax5.text(0.18,-10, 'WRITING score', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#323232\")\ncomb_graph_temp_df = pd.concat([train_graph_temp_df, test_graph_temp_df], axis=0)\nsns.boxenplot(ax=ax5, y=\"writing score\", x=\"TrainTest\", data=comb_graph_temp_df, palette=[\"#eeb977\", \"#8d9e8c\"])\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\n\n# Ax6 - Lunch\ntrain_graph_temp_df = pd.DataFrame(train[\"lunch\"].value_counts())\ntrain_graph_temp_df[\"Percentage\"] = train_graph_temp_df[\"lunch\"].apply(lambda x: x\/sum(train_graph_temp_df[\"lunch\"])*100)\ntest_graph_temp_df = pd.DataFrame(test[\"lunch\"].value_counts())\ntest_graph_temp_df[\"Percentage\"] = test_graph_temp_df[\"lunch\"].apply(lambda x: x\/sum(test_graph_temp_df[\"lunch\"])*100)\n\nax6.grid(color='gray', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax6.barh(np.arange(len(train_graph_temp_df.index)), train_graph_temp_df[\"Percentage\"], zorder=3, color=\"#eeb977\", height=0.4)\nax6.barh(np.arange(len(test_graph_temp_df.index))+0.25, test_graph_temp_df[\"Percentage\"], zorder=3, color=\"#8d9e8c\", height=0.4)\nax6.xaxis.set_major_formatter(mtick.PercentFormatter())\nax6.yaxis.set_major_locator(mtick.MultipleLocator(1))\nax6.set_yticks(np.arange(len(test_graph_temp_df.index))+0.4 \/ 2)\nax6.set_yticklabels(list(test_graph_temp_df.index))\nax6.text(20,-0.6, 'LUNCH', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#323232\")\nfor i,j in zip(train_graph_temp_df[\"Percentage\"],[0, 1]):\n    ax6.annotate(f'{i:0.0f}%',xy=(i\/2, j), color='#f6f6f6', horizontalalignment='center', verticalalignment='center')\nfor i,j in zip(test_graph_temp_df[\"Percentage\"],[0, 1]):\n    ax6.annotate(f'{i:0.0f}%',xy=(i\/2, j+0.25), color='#f6f6f6', horizontalalignment='center', verticalalignment='center')\n\n    \n# Ax7 - MATH score\ntrain_graph_temp_df = pd.DataFrame(train[\"math score\"])\ntrain_graph_temp_df[\"Percentage\"] = train_graph_temp_df[\"math score\"].apply(lambda x: x\/sum(train_graph_temp_df[\"math score\"])*100)\ntest_graph_temp_df = pd.DataFrame(test[\"math score\"])\ntest_graph_temp_df[\"Percentage\"] = test_graph_temp_df[\"math score\"].apply(lambda x: x\/sum(test_graph_temp_df[\"math score\"])*100)\n\nax7.text(20,-0.005, 'MATH score', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#323232\")\ncomb_graph_temp_df = pd.concat([train_graph_temp_df, test_graph_temp_df], axis=0)\nsns.kdeplot(train_graph_temp_df[\"math score\"], color=\"#eeb977\", alpha=0.3, shade=True, label=\"train\", ax=ax7)#0.8\nsns.kdeplot(test_graph_temp_df[\"math score\"], color=\"#8d9e8c\", alpha=0.3, shade=True, label=\"test\", ax=ax7)#0.8\nax7.yaxis.set_major_formatter(mtick.PercentFormatter(1, decimals=1))\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\n\n# Ax8 - test preparation course\ntrain_graph_temp_df = pd.DataFrame(train[\"test preparation course\"].value_counts())\ntrain_graph_temp_df[\"Percentage\"] = train_graph_temp_df[\"test preparation course\"].apply(lambda x: x\/sum(train_graph_temp_df[\"test preparation course\"])*100)\ntest_graph_temp_df = pd.DataFrame(test[\"test preparation course\"].value_counts())\ntest_graph_temp_df[\"Percentage\"] = test_graph_temp_df[\"test preparation course\"].apply(lambda x: x\/sum(test_graph_temp_df[\"test preparation course\"])*100)\nsize = 0.3\nax8.pie(train_graph_temp_df[\"Percentage\"],autopct='%1.1f%%', explode=(0,0.16), labels=['none','completed'], radius=1, colors=['#eeb977'],wedgeprops=dict(width=size, edgecolor='w'))\nax8.pie(test_graph_temp_df[\"Percentage\"],autopct='%1.1f%%', explode=(0,0.1), radius=1-size, colors=['#8d9e8c'],wedgeprops=dict(width=size, edgecolor='w'))\nax8.text(-0.9, -1.5, 'test preparation course', fontsize=14,fontweight='bold', fontfamily='serif', color=\"#323232\")\n\n\nfor s in [\"top\",\"right\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)\n    ax7.spines[s].set_visible(False)\n    ax8.spines[s].set_visible(False)\n\nfig.legend(['train','test'], ncol=2, facecolor=background_color, edgecolor=background_color, fontsize=20,loc='center')#bbox_to_anchor=(0.24, 0.91)\nplt.show()","6e676f90":"for i in data.columns:\n    if (len(data[i].value_counts())<10):\n        print(data[i].value_counts())\n        print('*'*90)","0b98ace5":"fig = px.density_heatmap(data, x=\"writing score\", y=\"reading score\", marginal_x=\"box\", marginal_y=\"violin\")\nfig.update_layout(title='Density HeatMap between Writing Score and Reading Score of the students')\niplot(fig)","351c3eb7":"x_data = np.unique(data['race\/ethnicity'])\n\nya,yb,yc,yd,ye=[],[],[],[],[]\n\nfor i in range(len(data)):\n    if data['race\/ethnicity'][i] =='group C':\n        yc.append(data['math score'][i])\n    elif data['race\/ethnicity'][i] == 'group D':\n        yd.append(data['math score'][i])\n    elif data['race\/ethnicity'][i] == 'group B':\n        yb.append(data['math score'][i])\n    elif data['race\/ethnicity'][i] == 'group E':\n        ye.append(data['math score'][i])\n    else:\n        ya.append(data['math score'][i])\n\n\ny_data = [ya,yb,yc,yd,ye]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)',\n          'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)']\n\nfig = go.Figure()\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        fig.add_trace(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints='all',\n            jitter=0.5,\n            notched=True,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker_size=2,\n            line_width=1))\n        \nfig.update_layout(\n    title='math Score of the students based on race\/ethnicity ',\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=5,\n        gridcolor='rgb(255, 255, 255)',\n        gridwidth=1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor='rgb(243, 243, 243)',\n    showlegend=False\n)\n\niplot(fig)","a342e536":"for i in list(data.columns):\n    if data[i].dtype == 'object':\n        data[i]=pd.factorize(data[i])[0]\n\nplt.figure(dpi=150)\nplt.title('correlation between attributes')\nsns.heatmap(data.corr(),annot=True,lw=1,linecolor='white',cmap='viridis_r')\nplt.xticks(rotation=90)\nplt.yticks(rotation = 0)\nplt.show()","cbec181b":"pd.options.mode.chained_assignment = None\n\ndata['score'] = ((data['math score']+ data['reading score'] + data['writing score'])\/ 3).round(2)\nfor i in range(len(data.score)):\n    if data.score[i] >= 80:\n        data.score[i] = 'excellent'\n    elif data.score[i] >= 70:\n        data.score[i] = 'good'\n    elif data.score[i] >= 60:\n        data.score[i] = 'satisfactory'\n    elif data.score[i] < 60:\n        data.score[i] = 'need support'\n        \ndf_student['grade'] = data['score']\n\nfig = px.histogram(df_student, x=\"grade\", y=\"math score\", color=\"gender\", facet_col=\"race\/ethnicity\",marginal=\"box\")\niplot(fig)","9072641e":"data['score'] = ((data['math score']+ data['reading score'] + data['writing score'])\/ 3).round(2)","5a0d352f":"x_train,x_val,y_train,y_val = train_test_split(data[['math score','reading score','writing score']],data.score)","15476a8e":"model = tf.keras.models.Sequential([tf.keras.layers.Dense(64,kernel_initializer='normal',activation='relu',input_dim=3),\n                                    tf.keras.layers.Dense(32,kernel_initializer='normal',activation='relu'),\n                                   tf.keras.layers.Dense(1,kernel_initializer='normal',activation = 'linear')])\n\nmodel.compile(optimizer=SGD(lr=1e-6),loss='mse',metrics=[\"mae\"])\nmodel.summary()\n\nhistory = model.fit(x_train,y_train,epochs=50)","d74abeb6":"pred = model.predict(x_val)","3439a741":"print('Accuracy score    : ',r2_score(pred,y_val)*100)\nprint('mean square error : ',mean_squared_error(pred,y_val))","f275b258":"fig = plt.figure(figsize=(20,5))\ngs = fig.add_gridspec(1,2)\n\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\n\nax0.plot(history.history['mae'])\nax0.set_xlabel('epochs')\nax0.set_ylabel('MAE')\n\nax1.plot(history.history['loss'])\nax1.set_xlabel('epochs')\nax1.set_ylabel('loss')\n\nplt.show()","e4e4fee4":"<div id='score'><\/div>\n\n## 3.2 Reading vs Writing Score","8288228c":"<div id='corr'><\/div>\n\n## 3.4 Correlation","a13fb20f":"<div id='data'><\/div>\n\n## 2.1 Exploring the Data","42bc508a":"<div id='Chapter4'><\/div>\n\n# 4.0 Model Building\n\n<div id='split'><\/div>\n\n## 4.1 spliting into train, val","fbcfd195":"<div id='fit'><\/div>\n\n## 4.2 fitting model","d31a67a4":"<div id='Chapter2'><\/div>\n\n## 2.0 Data Loading and Preperation","6b7ca900":"<div id='Chapter3'><\/div>\n\n# 3.0 EDA\n\n<div id='all'><\/div>\n\n## 3.1 Feature distribution","7f92a104":"<div id='Chapter6'><\/div>\n\n# 6.0 Conclusion","60110ca4":"# STUDENTS PERFORMANCE ANALYSIS\n\n### Context\nMarks secured by the students\n### Content\nThis data set consists of the marks secured by the students in various subjects.\n### Acknowledgements\nhttp:\/\/roycekimmons.com\/tools\/generated_data\/exams\n### Inspiration\nTo understand the influence of the parents background, test preparation etc on students performance\n\n![](https:\/\/blog.amerlux.com\/wp-content\/uploads\/2020\/11\/amlx-tw-education-blog-1024x683.jpg)","c854d62d":"<div id='content'><\/div>\n\n## Index of Content\n\n* [**1.0 Importing the modules**](#Chapter1)\n* [**2.0 Data Loading and Preperation**](#Chapter2)\n * [2.1 Exploring the  Data](#data)\n* [**3.0 EDA**](#Chapter3)\n * [3.1 feature distribution](#all)\n * [3.2 reading vs writing scores](#score)\n * [3.3 race\/ethnicity](#race)\n * [3.4 correlation](#corr)\n * [3.5 gender](#gender)\n* [**4.0 Model Building**](#Chapter4)\n * [4.1 spliting into train, val](#split)\n * [4.2 fitting model](#fit)\n * [4.3 validating model](#val)\n* [**5.0 Loss and Accuracy**](#Chapter5)\n* [**6.0 conclusion**](#Chapter6)\n\n<div id='Chapter1'><\/div>\n\n## 1.0 Importing the modules","fb5da1b3":"# <font color='red'>The model will predict the students score on the given attributes with more than 99.97% accuracy.<\/font>","c3f5ac80":"<div id='race'><\/div>\n\n## 3.3 Race\/Ethnicity","b88d5188":"# <font color='blue'>Conclusion<\/font>\n* ##  Boys are good at math and Girls are good at reading and writing.\n* ## Group A students have least scores compared to other race.\n* ## Reading ,Writing and Math scores have high positive correlation.\n\n# <font color='orange'>If you like, an upvote would be deeply appreciated. Thanks! :)<\/font>","8902f3a4":"<div id='val'><\/div>\n\n## 4.3 validating model","89c2aa1a":"<div id='Chapter5'><\/div>\n\n## 5.0 Loss and Accuracy","42155daf":"<div id='gender'><\/div>\n\n## 3.5 Gender"}}