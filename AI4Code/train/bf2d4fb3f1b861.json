{"cell_type":{"e9533315":"code","b1fa9e20":"code","0dc6daf5":"code","8cabd9fc":"code","72931a14":"code","a346f434":"code","2602b7e3":"code","f8d669ff":"code","c5255c87":"code","9a1f435d":"code","c5f767e4":"code","a6ae73e3":"code","d0f4f3eb":"code","d38e1b7e":"code","bd5a2f0c":"code","5ce424da":"code","5493e12d":"code","cabe4d68":"code","b8696bc5":"code","279e7b79":"code","f5d75af9":"code","0db48928":"code","3300bb6b":"code","7455a3dc":"code","75314538":"code","ced80d5b":"markdown","93a5de4c":"markdown"},"source":{"e9533315":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1fa9e20":"path = \"..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv\"\ndata = pd.read_csv(path)","0dc6daf5":"data.head()","8cabd9fc":"data.tail()","72931a14":"data.shape","a346f434":"data.isnull().sum()","2602b7e3":"data.describe()","f8d669ff":"data.columns","c5255c87":"data2=data.drop(['city', 'date','team1','team2','toss_winner','toss_decision','result','winner','player_of_match','venue','umpire1','umpire2','umpire3'], axis=1)\n","9a1f435d":"data2","c5f767e4":"x=data2.iloc[:,:-1].values\ny=data2.iloc[:,-1].values\ny","a6ae73e3":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25, random_state=1)","d0f4f3eb":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nx_train=sc.fit_transform(x_train)\nx_test=sc.transform(x_test)","d38e1b7e":"from sklearn.naive_bayes import GaussianNB\nclassifier=GaussianNB()\nclassifier.fit(x_train,y_train)","bd5a2f0c":"y_pred=classifier.predict(x_test)","5ce424da":"df={'actual':y_test,'predicted':y_pred}\ndf=pd.DataFrame(df)\ndf.head(50)","5493e12d":"from sklearn.metrics import confusion_matrix\ncf=confusion_matrix(y_test,y_pred)\ncf","cabe4d68":"from sklearn.metrics import classification_report as cr\nprint(cr(y_test,y_pred))","b8696bc5":"X = data2.iloc[:,:-1 ].values \ny = data2.iloc[:, -1].values \ny","279e7b79":"from sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) \n","f5d75af9":"import xgboost as xgb \nmy_model = xgb.XGBClassifier() \nmy_model.fit(X_train, y_train) ","0db48928":"y_pred = my_model.predict(X_test) ","3300bb6b":"from sklearn.metrics import confusion_matrix \ncm = confusion_matrix(y_test, y_pred)\ncm\n","7455a3dc":"data1 = pd.melt(data, id_vars=[\"season\"])\ndata1\n","75314538":"data1 = pd.melt(data, id_vars=[\"season\"],var_name=\"name\",value_name=\"member_id\")\ndata1","ced80d5b":"Navie classifier","93a5de4c":"XGBOOST"}}