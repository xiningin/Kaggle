{"cell_type":{"0302ebda":"code","358171a2":"code","cf917594":"code","68d72166":"code","d4e9fc9a":"code","dfb1b48b":"code","61c2e568":"code","0f868f5c":"code","33ee6c56":"code","6bd6ea40":"code","f1d155e3":"code","264184b8":"code","3c80a279":"code","85ecfe85":"code","d09c985f":"code","209412d9":"code","c35285ea":"code","ebf2d498":"code","5ae43427":"code","2aefeaf8":"code","1c41e62f":"code","b6964c13":"markdown","69b998cf":"markdown","d5b5327c":"markdown","82844c3d":"markdown","5df0a2ff":"markdown","fc5722cc":"markdown","bf081828":"markdown","3cae03c7":"markdown","6042b35f":"markdown","c14b80dd":"markdown","d17cfcb8":"markdown","42e36746":"markdown","e473d69a":"markdown","ca9054b6":"markdown","88ae91dc":"markdown","cd66a5a5":"markdown","a56a5d21":"markdown","91bae206":"markdown","d9840a99":"markdown","7b7d3e07":"markdown","629da88b":"markdown","6281b151":"markdown"},"source":{"0302ebda":"from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.svm import SVC\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","358171a2":"df = pd.read_csv(\"..\/input\/invehicle-coupon-recommendation\/in-vehicle-coupon-recommendation.csv\")\ndf","cf917594":"df.info()","68d72166":"df_na_sum = df.isna().sum()\ndf_na_sum[df_na_sum > 0]\/len(df)","d4e9fc9a":"df.drop('car', axis=1, inplace=True)\ndf","dfb1b48b":"df.dropna(subset=[\"CarryAway\", \"RestaurantLessThan20\"], inplace=True)\ndf","61c2e568":"for col in df.select_dtypes(include=\"object\").columns:\n    df[col] = df[col].astype(\"category\")\ndf","0f868f5c":"for col in df.drop('Y', axis=1).columns:\n    pd.crosstab(df[col], df['Y']).plot(kind='bar')\n    plt.xlabel(col)\n    plt.ylabel('Y')\n    plt.show()","33ee6c56":"df[\"Y\"].value_counts(normalize=True)","6bd6ea40":"df.dtypes","f1d155e3":"x = df.drop('Y', axis=1)\ny = df['Y']\n\nohe = OneHotEncoder(sparse=False)\nx = pd.DataFrame(ohe.fit_transform(x), index=y.index, columns=ohe.get_feature_names(x.columns))\nx","264184b8":"kf = KFold(\n    n_splits=5,\n    shuffle=True,\n    random_state=7\n)","3c80a279":"gbc = GradientBoostingClassifier(\n    max_depth=7,\n    min_samples_split=5,\n    random_state=7\n)\n\ngbc_acc = 0\ngbc_cfm = np.zeros((2, 2))\n\nfor train_index, test_index in kf.split(x):\n    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    x_train, x_test = x.iloc[train_index], x.iloc[test_index]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n    gbc.fit(x_train, y_train)\n    y_pred = gbc.predict(x_test)\n    gbc_acc = gbc_acc + accuracy_score(y_test, y_pred)\n    gbc_cfm = gbc_cfm + confusion_matrix(y_test, y_pred)","85ecfe85":"gbc_acc\/kf.get_n_splits()","d09c985f":"ConfusionMatrixDisplay(gbc_cfm).plot()\nplt.show()","209412d9":"rfc = RandomForestClassifier(\n    max_depth=7,\n    min_samples_split=5,\n    random_state=7\n)\n\nrfc_acc = 0\nrfc_cfm = np.zeros((2, 2))\n\nfor train_index, test_index in kf.split(x):\n    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    x_train, x_test = x.iloc[train_index], x.iloc[test_index]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n    rfc.fit(x_train, y_train)\n    y_pred = rfc.predict(x_test)\n    rfc_acc = rfc_acc + accuracy_score(y_test, y_pred)\n    rfc_cfm = rfc_cfm + confusion_matrix(y_test, y_pred)","c35285ea":"rfc_acc\/kf.get_n_splits()","ebf2d498":"ConfusionMatrixDisplay(rfc_cfm).plot()\nplt.show()","5ae43427":"svm = SVC(\n    random_state=7\n)\n\nsvm_acc = 0\nsvm_cfm = np.zeros((2, 2))\n\nfor train_index, test_index in kf.split(x):\n    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    x_train, x_test = x.iloc[train_index], x.iloc[test_index]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n    svm.fit(x_train, y_train)\n    y_pred = svm.predict(x_test)\n    svm_acc = svm_acc + accuracy_score(y_test, y_pred)\n    svm_cfm = svm_cfm + confusion_matrix(y_test, y_pred)","2aefeaf8":"svm_acc\/kf.get_n_splits()","1c41e62f":"ConfusionMatrixDisplay(svm_cfm).plot()\nplt.show()","b6964c13":"# Building and evaluating model","69b998cf":"## Combine confusion matrix","d5b5327c":"## Average accuracy score","82844c3d":"## Drop `car` column since it has 99% `NaN`","5df0a2ff":"# Conclusion\nAccording to the accuracy and confusion matrix of 3 models, Gradient Boosting perform better than SVM and Random Forest","fc5722cc":"# Load and describe","bf081828":"## SVM classifier","3cae03c7":"## Combine confusion matrix","6042b35f":"## Check if dataset is balanced","c14b80dd":"## Average accuracy score","d17cfcb8":"## Gradient Boosting classifier","42e36746":"## Drop `NaN` in `CarryAway` and `RestaurantLessThan20` since it doesn't allow `NaN` and it takes small percent of dataset","e473d69a":"# Split data for train and test (k-fold)","ca9054b6":"## Check for NaN","88ae91dc":"## Average accuracy score","cd66a5a5":"# Value encoding","a56a5d21":"# Load libs","91bae206":"## Combine confusion matrix","d9840a99":"## Random Forest classifier","7b7d3e07":"## Change all **object** columns to **category**","629da88b":"# Preprocessing dataset","6281b151":"## Visualize dataset"}}