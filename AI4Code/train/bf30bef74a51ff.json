{"cell_type":{"7d91ee84":"code","53604182":"code","d5c372cb":"code","e47c49dc":"code","3052520c":"code","c55d81e9":"code","8195be3c":"code","debabad3":"code","9ab0ba30":"code","5539d38b":"code","8b51dc30":"code","bdfe03bc":"code","bfc222c9":"code","ea8c4816":"code","2690d041":"code","d50375d9":"code","48e9cfe7":"code","9f3743a7":"code","c6d56897":"code","27a607bf":"code","85777008":"code","f7cc00a8":"code","cc376d5b":"code","10b5c834":"code","1acbc7fe":"code","f3a8b9a9":"code","a0a81e94":"code","c5f12e93":"code","9de5fc65":"code","9d568f1c":"code","8cae1ee8":"code","12b69b0f":"code","85615834":"code","f50095e2":"code","b0789e8a":"code","1b5ae1ab":"code","0b288c00":"code","6fe9c0ff":"markdown","8a3f2868":"markdown","0a4db3cc":"markdown","498ca1a8":"markdown","74c80f64":"markdown","2ebd09b4":"markdown","053f4e0f":"markdown","ac8a0b03":"markdown","cc292992":"markdown","2bc53f0c":"markdown","da65f123":"markdown"},"source":{"7d91ee84":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt # data visualization\nimport seaborn as sns # advanced data visualization\n\nfrom sklearn.model_selection import train_test_split # split data into train and test\nfrom sklearn.preprocessing import MinMaxScaler # scale the data between 0 - 1\nfrom tensorflow.keras.models import Sequential # initiate the mode \nfrom tensorflow.keras.layers import Dense, Activation # add the layers\nfrom tensorflow.keras.optimizers import Adam # optimizer \nfrom sklearn.metrics import mean_squared_error,mean_absolute_error,explained_variance_score # metric evaluation","53604182":"# read the data\ndf = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')","d5c372cb":"# describe numeric features \ndf.describe().round()","e47c49dc":"# dataframe information\ndf.info()","3052520c":"# Check for Missing Values\ndf.isna().sum()","c55d81e9":"#explore the price\nplt.figure(figsize = (8, 4), dpi = 100)\nsns.distplot(df['price'])\nplt.show()","8195be3c":"#  explore the number of bedrooms\nplt.figure(figsize = (8, 4), dpi = 100)\nsns.countplot(data = df, x = 'bedrooms')\nplt.show()","debabad3":"# correlation \ndf.corr()['price'].sort_values()","9ab0ba30":"# sqft_living vs price\nplt.figure(figsize = (8, 4), dpi = 100)\nsns.scatterplot(data = df, x = 'price', y = 'sqft_living')\nplt.show()","5539d38b":"# how bedrooms affect price \nplt.figure(figsize = (8, 4), dpi = 100)\nsns.boxplot(data = df, x = 'bedrooms', y = 'price')\nplt.show()","8b51dc30":"# impact of logitude on price\nplt.figure(figsize = (12, 8), dpi = 100)\nsns.scatterplot(data = df, x = 'long', y = 'price')\nplt.show()","bdfe03bc":"# impact of latitude on price\nplt.figure(figsize = (12, 8), dpi = 100)\nsns.scatterplot(data = df, x = 'lat', y = 'price')\nplt.show()","bfc222c9":"# display log asnd lat together\nplt.figure(figsize=(12,8))\nsns.scatterplot(x='long',y='lat',data=df,hue='price')\nplt.show()","ea8c4816":"df.sort_values('price', ascending = False).head(20)","2690d041":"# improving the figure by getting red of outliers \nlen(df) * 0.01\nnon_top_1_percent = df.sort_values('price', ascending = False).iloc[216:]\n\nplt.figure(figsize=(12,8))\nsns.scatterplot(x='long',y='lat',\n                data=non_top_1_percent,hue='price', palette='RdYlGn', alpha=0.5)\nplt.show()","d50375d9":"# the impact of water front on price \nplt.figure(figsize=(8,4), dpi = 100)\nsns.boxplot(x='waterfront',y='price',data=df)\nplt.show()","48e9cfe7":"# correct date type \ndf['date'] = pd.to_datetime(df['date'])","9f3743a7":"df['date']","c6d56897":"# extract new features \ndf['year'] = df['date'].apply(lambda x: x.year)\ndf['month'] = df['date'].apply(lambda x: x.month)","27a607bf":"df.groupby('month').mean()['price']","85777008":"df.groupby('year').mean()['price']","f7cc00a8":"# check the feature \ndf['yr_renovated'].value_counts()","cc376d5b":"# converting it into categorical \ndf.loc[df.yr_renovated > 0, 'yr_renovated'] = 1","10b5c834":"# check the result \ndf['yr_renovated'].value_counts()","1acbc7fe":"df = df.drop(['id', 'date', 'zipcode'], axis = 1)","f3a8b9a9":"# getting red off outliers \ndf = df[df.price < 3000000]","a0a81e94":"# seprate X and y\nX = df.drop('price', axis = 1).values \ny = df['price'].values","c5f12e93":"# train text split \nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=101)","9de5fc65":"# intiate the scaler \nscaler = MinMaxScaler()\n# fit the scaler and scale training data \nX_train= scaler.fit_transform(X_train)\n# scale the test data \nX_test = scaler.transform(X_test)","9d568f1c":"# build model architecture\nmodel = Sequential()\nmodel.add(Dense(19,activation='relu'))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(19,activation='relu'))\nmodel.add(Dense(1))\n# compile the model\nmodel.compile(optimizer='adam',loss='mae');","8cae1ee8":"# fit the model\nmodel.fit(x=X_train,y=y_train,\n          validation_data=(X_test,y_test),\n          batch_size=128,epochs=2000)","12b69b0f":"# compare train and validation loss \nlosses = pd.DataFrame(model.history.history)\nlosses.plot()","85615834":"# predict using the test data \npredictions = model.predict(X_test)\n# evaluate the model\nprint(mean_absolute_error(y_test,predictions))\nprint(np.sqrt(mean_squared_error(y_test,predictions)))","f50095e2":"# R squared \nexplained_variance_score(y_test,predictions) * 100","b0789e8a":"# Our predictions\nplt.figure(figsize = (8, 4), dpi = 100)\nplt.scatter(y_test,predictions)\n\n# Perfect predictions\nplt.plot(y_test,y_test,'r');","1b5ae1ab":"# plot the errors \nplt.figure(figsize = (8, 4), dpi = 100)\nerrors = y_test.reshape(6469, 1) - predictions\nsns.distplot(errors);","0b288c00":"# predicted price of the first house in our data \nsingle_house = df.drop('price',axis=1).iloc[0]\nsingle_house = scaler.transform(single_house.values.reshape(-1, 19))\npred = model.predict(single_house)[0][0]\nprint(f'Predicted price of the first house in our data: {pred.round()}')\nprint(f'Real price of the first house in our data: {df.iloc[0][0].round()}')","6fe9c0ff":"# Exploratory Data Analysis ","8a3f2868":"# Model Building","0a4db3cc":"## Date ","498ca1a8":"# Predict Using New Data ","74c80f64":"# Drop Redundant Features ","2ebd09b4":"# Model Evaluation ","053f4e0f":"# Read the Data and Check It","ac8a0b03":"# Feature Engineering ","cc292992":"It make sense to drop extreme outliers: houses with price > 2 millions ","2bc53f0c":"# Required Packages ","da65f123":"## Renovated"}}