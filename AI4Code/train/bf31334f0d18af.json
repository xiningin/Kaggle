{"cell_type":{"8ec54d6a":"code","bbb14011":"code","8504c5eb":"code","cbcf4147":"code","69e05e54":"code","ee8a7c43":"code","49411b70":"code","ce3e4f7a":"code","12582438":"code","9a1b294f":"code","21ab13a5":"code","1908bf0b":"code","41293169":"code","0c3b3bf4":"code","5083e2bb":"code","b8051320":"code","6d90d9a3":"code","4c7d7599":"code","fd880f13":"code","c9155f5f":"code","4dd03472":"code","49c4859f":"code","0f760fa1":"code","da5cadfe":"code","dd78b2fa":"code","967c75c8":"code","e5a7c4bd":"markdown","891993ac":"markdown","8f61c3bb":"markdown","29e26ca6":"markdown","f7117a07":"markdown","40c15bf1":"markdown","51a3a08a":"markdown","98717044":"markdown","1c667cd3":"markdown","70574d95":"markdown","cad2ab2a":"markdown","dfb4478b":"markdown","556c33d5":"markdown","1909e6c2":"markdown","92b3b699":"markdown","6f5663d0":"markdown"},"source":{"8ec54d6a":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\n%matplotlib inline","bbb14011":"flights = pd.read_csv('..\/input\/flight_delays_train.csv')","8504c5eb":"# we have flights from that many airports:\nlen(flights.Origin.value_counts())","cbcf4147":"# and almost 20% of them are delayed at departure:\nflights.dep_delayed_15min.value_counts()","69e05e54":"# date values have to be cleaned up, the rest is manageable:\nflights.head()","ee8a7c43":"# let's fix the date as proper integers\nflights['Month'] = flights['Month'].map(lambda x: str(x)[2:]).astype(int)\nflights['DayofMonth'] = flights['DayofMonth'].map(lambda x: str(x)[2:]).astype(int)\nflights['DayOfWeek'] = flights['DayOfWeek'].map(lambda x: str(x)[2:]).astype(int)\nflights.head()","49411b70":"# add a new column that stands for flight intinerary\nflights['Service'] = flights['Origin'] + '-' + flights['Dest']\n# and finally extract only those delayed flights\ndelayed = pd.DataFrame(flights.loc[flights['dep_delayed_15min'] == 'Y'])","ce3e4f7a":"# it isn't surprosing that largest airporst (Atlanta - ATL, Chicago - ORD) lead the way in most frequently delayed departures\ndelayed.Service.value_counts().nlargest(10)","12582438":"# let's see rows from specific month, day and airport\nprint('Atlanta 1st Feb')\nflights[(flights.Month == 2) & (flights.DayofMonth == 1) & (flights.Origin == 'ATL')]","9a1b294f":"print('Atlanta 2nd Feb')\nflights[(flights.Month == 2) & (flights.DayofMonth == 2) & (flights.Origin == 'ATL')]","21ab13a5":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\nimport matplotlib.pylab as pylab\nparams = {'legend.fontsize': 'large',\n         'axes.labelsize': 'x-large',\n         'axes.titlesize':'x-large',\n         'xtick.labelsize':'large',\n         'ytick.labelsize':'large',\n         'axes.facecolor': 'white',\n         'grid.color': 'd3d3d3'}\npylab.rcParams.update(params)","1908bf0b":"monthlydelays = pd.DataFrame(delayed['Month'].value_counts())\nmonthlydelays['Delayed'] = monthlydelays['Month']\nmonthlydelays['Month'] = monthlydelays.index\nmonthlydelays['AllFlights'] = flights.Month.value_counts()\nmonthlydelays['Pct_delayed'] = (monthlydelays['Delayed'] * 100 \/ monthlydelays['AllFlights']).round(1)\nmonthlydelays.sort_index(axis=0, ascending=True, inplace=True)","41293169":"ax = monthlydelays.Pct_delayed.plot(kind='bar', grid=True, color='#1272b1', figsize=(12, 6))\nax.set_xlabel('Month')\nax.set_ylabel('[%]')\nax.set_title(\"Percentage of delayed departures by month\", fontsize=20)","0c3b3bf4":"delaydaily = pd.DataFrame(delayed.groupby('Month').DayOfWeek.value_counts())\ndelaydaily.head(10)","5083e2bb":"#let's fix the month column:\nmonthlist = sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]*7)\n\ndelaydaily['Month'] = monthlist\ndelaydaily['Day'] = delaydaily.index\ndelaydaily['Day'] =delaydaily['Day'].map(lambda x: str(x)[:-1])\ndelaydaily['Day'] =delaydaily['Day'].map(lambda x: str(x)[-1:])\ndelaydaily.reset_index(drop=True, inplace=True)\ndelaydaily.head(10)","b8051320":"delaydaily = delaydaily.pivot('Month', 'Day', 'DayOfWeek')","6d90d9a3":"import seaborn as sns\nsns.set(font_scale=1.4)\nplt.figure(figsize = (14,10)) \nplt.xlabel('Month')\nplt.ylabel('Probability')\nplt.title('DELAYED DEPARTURES ACROSS DAYS OF THE WEEK')\nsns.set_style('white')\nsns.heatmap(delaydaily, cmap='GnBu')","4c7d7599":"timedf = pd.DataFrame(columns = [1, 2, 3, 4, 5, 6, 7])\ndays = [1, 2, 3, 4, 5, 6, 7]\ndaytime = []","fd880f13":"# I really don't like this code, although it works\nfor day in days:\n    dt0 = len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 0) & (delayed.DepTime <= 100)])\n    dt1 = len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 101) & (delayed.DepTime <= 200)])\n    dt2 = len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 201) & (delayed.DepTime <= 300)])\n    dt3 = len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 301) & (delayed.DepTime <= 400)])\n    dt4 = len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 401) & (delayed.DepTime <= 500)])\n    dt5 = len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 501) & (delayed.DepTime <= 600)])\n    dt6 = len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 601) & (delayed.DepTime <= 700)])\n    dt7 = len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 701) & (delayed.DepTime <= 800)])\n    dt8 = len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 801) & (delayed.DepTime <= 900)])\n    dt9 = len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 901) & (delayed.DepTime <= 1000)])\n    dt10 = len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 1001) & (delayed.DepTime <= 1100)])\n    dt11= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 1101) & (delayed.DepTime <= 1200)])\n    dt12= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 1201) & (delayed.DepTime <= 1300)])\n    dt13= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 1301) & (delayed.DepTime <= 1400)])\n    dt14= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 1401) & (delayed.DepTime <= 1500)])\n    dt15= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 1501) & (delayed.DepTime <= 1600)])\n    dt16= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 1601) & (delayed.DepTime <= 1700)])\n    dt17= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 1701) & (delayed.DepTime <= 1800)])\n    dt18= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 1801) & (delayed.DepTime <= 1900)])\n    dt19= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 1901) & (delayed.DepTime <= 2000)])\n    dt20= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 2001) & (delayed.DepTime <= 2100)])\n    dt21= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 2101) & (delayed.DepTime <= 2200)])\n    dt22= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 2201) & (delayed.DepTime <= 2300)])\n    dt23= len(delayed[(delayed.DayOfWeek == day) & (delayed.DepTime >= 2301) & (delayed.DepTime <= 2400)])\n    daytime.append((dt0, dt1, dt2, dt3, dt4, dt5, dt6, dt7, dt8, dt9, dt10, dt11, dt12, dt13, dt14, dt15, dt16,\n                dt17, dt18, dt19, dt20, dt21, dt22, dt23))","c9155f5f":"timedf2 = pd.DataFrame(daytime, index = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])\ntimedf2.head(7)","4dd03472":"sns.set(font_scale=1.4)\nplt.figure(figsize = (18,8))\nplt.xlabel('Hour')\nplt.ylabel('Day')\nplt.title('MOST DELAYED DEPARTURES AROUND THE CLOCK')\nsns.heatmap(timedf2, cmap='GnBu')","49c4859f":"# selecting punctual and delayed services\nontime = pd.DataFrame(flights.loc[flights['dep_delayed_15min'] == 'N'])\n\nontimeService = pd.DataFrame(ontime.Service.value_counts())\nontimeService['SERVICE'] = ontimeService.index\nontimeService.reset_index(inplace=True, drop=True)\n\ndelayedService = pd.DataFrame(delayed.Service.value_counts())\ndelayedService['SERVICE'] = delayedService.index\ndelayedService.reset_index(inplace=True, drop=True)","0f760fa1":"# matching punctual and delayed services together\nmerged = pd.merge(delayedService,\n                 ontimeService[['Service', 'SERVICE']],\n                 on='SERVICE')\nmerged.head()\n\nmerged['total'] = merged.Service_x + merged.Service_y\nmerged['pct_delayed'] = (merged.Service_x * 100 \/ merged.total).round(1)\nmerged.rename(columns={'Service_x': 'delayed', 'Service_y': 'on_time'}, inplace=True)","da5cadfe":"# pick services between 100 and 150 total flights in the data set\nmerged = merged[(merged.total <= 150) & (merged.total >= 100)]\nmerged.set_index('SERVICE', inplace=True)\nmerged.sort_values(by=['pct_delayed'], inplace=True, ascending=True)","dd78b2fa":"# plotting most punctual connections\nmerged12punctual = merged.head(12)\nmerged12punctual.sort_values(by=['pct_delayed'], inplace=True, ascending=False)\nmerged12punctual.pct_delayed.plot(kind='barh', grid=True, color='#1272b1')\n\nax = merged12punctual.pct_delayed.plot(kind='barh', grid=True, color='#1272b1', figsize=(12, 6))\nax.set_xlabel('[%] Delayed')\nax.set_ylabel('Service')\nax.set_title(\"Most punctual connections\", fontsize=20)\n","967c75c8":"# plotting most delayed connections\nmerged12tail = merged.tail(12)\nmerged12tail.sort_values(by=['pct_delayed'], inplace=True, ascending=False)\nmerged12tail.pct_delayed.plot(kind='barh', grid=True, color='#1272b1')\n\nax = merged12tail.pct_delayed.plot(kind='barh', grid=True, color='#1272b1', figsize=(12, 6))\nax.set_xlabel('[%] Delayed')\nax.set_ylabel('Service')\nax.set_title(\"Most delayed connections\", fontsize=20)","e5a7c4bd":"## Vizualizing the delayed flights","891993ac":"## The Nature of flight delays","8f61c3bb":"## But hey, how many years does the data cover?","29e26ca6":"The rush hours are between 18:00 and 21:00. Fortunately the delay issue vanishes at 22:00 as the number of flights also falls accordingly. Anyway, the busy time already starts on Thursday to reach its peak on Friday. Thank God for Saturday, right? That is a chillout day in the flight industry. But still, the Friday delays are much more severe than on Sunday. The gut feeling tells me that inspecting specific connections on Fridays and contrasting them with returns on Sundays would bring meaningful insights.","f7117a07":"## Hey Kagglers, how to nicely break down the data by time?","40c15bf1":"## Departure delays around the clock","51a3a08a":"It has turned out that Hawaiians are masters of timely take offs. Connections between Kona (KOA), Honolulu (HNL), Lihue (LIH) and Kahului (OGG) are almost always on time. Now it\u2019s time for the opposite end of the table. The problems grow with the size of the airports. Expect delays in Atlanta (ATL), Chicago (ORD: Chicago-O\u2019Hare) and Newark (EWR: Liberty International Airport).","98717044":"## Most punctual vs most unreliable flights","1c667cd3":"## Data Cleaning time","70574d95":"## This is it, thank you for browsing","cad2ab2a":"## Next insight: the worst days of the week to fly","dfb4478b":"The point of this quick EBA is to illustrate the nature of flight delays.\nThis is the way I've crunched the data. Please comment if you have ideas how to improve my code.\nI would especially appreciate tweaks \/ improvements regarding plots :)","556c33d5":" I have painted the data in this particular way. Feel free to leave a comment if you have ideas how to improve the code or make plots more appealing :)","1909e6c2":"We could even assume that the peak on Fridays in December is correlated with another high value - Mondays in January. I bet that these are returns from Christmas break. ","92b3b699":"Definitely July and December are critical months. The airline traffic jam coincides with holiday season and Christmas, meaning that one out four flights doesn\u2019t take off on time. Surprisingly the returns from Christmas do not hamper the timetables in January.","6f5663d0":"The way I see it. Day of the week is either 2 or 3 and 3 or 4 on the following day. That suggests the data ranges for 2 years. \nAssuming that 1 stands for Monday **the data comes from 2011 and 2012** when 1st Feb was Tuesday and then Wednesday respectively."}}