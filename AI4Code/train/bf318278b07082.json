{"cell_type":{"96e76219":"code","14cd7fc9":"code","d1fa5277":"code","89ba658d":"code","80da872c":"code","d7690d45":"code","a4334179":"code","ba167f29":"code","7bce8144":"code","0a16a37c":"code","04c7430f":"code","478ba38c":"code","fff64ed0":"code","d3d616d1":"code","b82f6bca":"code","941253d1":"code","d644168a":"code","0e9dba77":"code","1c5c62b7":"code","08b5f239":"code","ba1b1b7f":"code","ab272466":"code","c7b2090a":"code","9ba9e441":"code","4df6bc4f":"markdown","93c026e6":"markdown","8a200f4e":"markdown","7eadf403":"markdown","12b07dc5":"markdown","d47ffded":"markdown","c4eaa9c3":"markdown","c4e89a1c":"markdown","f541ea0f":"markdown","754c230b":"markdown","dcb848c2":"markdown","40e24f42":"markdown","38589643":"markdown","b372e6c5":"markdown","ede457a3":"markdown","39140fc1":"markdown"},"source":{"96e76219":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","14cd7fc9":"data = pd.read_csv(r'..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","d1fa5277":"data.head()","89ba658d":"data.shape","80da872c":"data.dtypes","d7690d45":"data.nunique()","a4334179":"data.drop('id',axis=1,inplace=True)","ba167f29":"data['gender'].value_counts()","7bce8144":"data['gender'].replace('Other','Male',inplace=True)","0a16a37c":"data['work_type'].value_counts()","04c7430f":"data['work_type'].replace('children','Never_worked',inplace=True)","478ba38c":"data['smoking_status'].value_counts()","fff64ed0":"data.isnull().sum()","d3d616d1":"data['bmi'].fillna(data['bmi'].mean(),inplace=True)","b82f6bca":"data.isnull().sum()","941253d1":"plt.figure(figsize=(14,6))\nplt.subplot(121)\nsns.countplot(x='gender',hue='stroke',data=data,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nplt.title('Distribution of gender\\naccording to target variable')\n\nplt.subplot(122)\nsns.countplot(x='ever_married',hue='stroke',data=data,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0) \nplt.title('Distribution of ever_married\\naccording to target variable')\nplt.show()","d644168a":"plt.figure(figsize=(14,6))\nplt.subplot(121)\nsns.countplot(x='work_type',hue='stroke',data=data,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nplt.title('Distribution of work_type\\naccording to target variable')\n\nplt.subplot(122)\nsns.countplot(x='Residence_type',hue='stroke',data=data,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0) \nplt.title('Distribution of Residence_type\\naccording to target variable')\nplt.show()","0e9dba77":"sns.countplot(x='smoking_status',hue='stroke',data=data,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nplt.title('Distribution of smoking_status\\naccording to target variable')\nplt.show()","1c5c62b7":"plt.figure(figsize=(14,6))\nplt.subplot(121)\nsns.kdeplot(x='avg_glucose_level',hue='stroke',data=data,fill=True, palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nplt.title('\"Distribution of avg_glucose_level\\naccording to target variable')\n\nplt.subplot(122)\nsns.kdeplot(x='bmi',hue='stroke',data=data,fill=True,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0) \nplt.title('\"Distribution of bmi\\naccording to target variable')\nplt.show()","08b5f239":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nvar_mod = ['gender','ever_married','work_type','Residence_type','smoking_status']\nfor i in var_mod:\n    data[i] = le.fit_transform(data[i])","ba1b1b7f":"X = data.drop('stroke',axis=1)\ny = data['stroke']","ab272466":"from sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import accuracy_score\n\ndef cross_val(X, y, model, params, folds=5):\n\n    skf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=21)\n    for fold, (train_idx, test_idx) in enumerate(skf.split(X, y)):\n        print(f\"Fold: {fold}\")\n        x_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n        x_test, y_test = X.iloc[test_idx], y.iloc[test_idx]\n\n        alg = model(**params)\n        alg.fit(x_train, y_train,\n                eval_set=[(x_test, y_test)],\n                early_stopping_rounds=100,\n                verbose=400)\n\n        pred = alg.predict(x_test)\n        accuracy = accuracy_score(y_test, pred)\n        print(f\" accuracy_score: {accuracy}\")\n        print(\"-\"*50)\n    \n    return alg","c7b2090a":"lgb_params= {'learning_rate' : 0.01,\n                  'max_depth' : 8,\n                  'n_estimators' : 900,\n                  'num_leaves' :8}","9ba9e441":"from lightgbm import LGBMClassifier\nlgb_model = cross_val(X, y, LGBMClassifier, lgb_params)","4df6bc4f":"### Model building","93c026e6":"* let me drop **id** column","8a200f4e":"* let's put **children** in **Never_worked** category","7eadf403":"#### if you like this notebook please upvote it.\n#### thank you!","12b07dc5":"* **gender** has 3 unique values, let's see each value counts:","d47ffded":"* **smoking_status** have 4 unique values, let's see each value counts:","c4eaa9c3":"### About the Data:\n1. id: unique identifier\n2. gender: \"Male\", \"Female\" or \"Other\"\n3. age: age of the patient\n4. hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n5. heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n6. ever_married: \"No\" or \"Yes\"\n7. work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n8. Residence_type: \"Rural\" or \"Urban\"\n9. avg_glucose_level: average glucose level in blood\n10. bmi: body mass index\n11. smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n12. stroke: 1 if the patient had a stroke or 0 if not\n* Note: \"Unknown\" in smoking_status means that the information is unavailable for this patient","c4e89a1c":"* looks like **bmi** column has some missing values. let's change null values with **bmi** mean.","f541ea0f":"* here, \"Unknown\" in smoking_status means that the information is unavailable for this patient.\n\n* let's check if there is any missing values","754c230b":"![](https:\/\/storage.googleapis.com\/kaggle-datasets-images\/1120859\/1882037\/04da2fb7763e553bdf251d5adf6f88d9\/data-original.jpg?t=2021-01-26-19-57-05)","dcb848c2":"* it looks like **Other** having only one value, let's change it to **Male**.","40e24f42":"### Data Preprocessing","38589643":"* looks like there is no missing value.","b372e6c5":"## Stroke Prediction\nAccording to the World Health Organization (WHO) stroke is the 2nd leading cause of death globally, responsible for approximately 11% of total deaths.\nThis dataset is used to predict whether a patient is likely to get stroke based on the input parameters like gender, age, various diseases, and smoking status. Each row in the data provides relavant information about the patient.","ede457a3":"### data visualization\n* let's visualize the data","39140fc1":"* **work_type** have 5 unique values, let's see each value counts:"}}