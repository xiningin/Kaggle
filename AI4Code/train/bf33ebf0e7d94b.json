{"cell_type":{"9a4f0e15":"code","fae51e42":"code","05995896":"code","dca02636":"code","3f3d1ca9":"code","cb3093d0":"code","0def53da":"code","b9c0fda6":"code","9daff440":"code","9e186186":"code","040ddc95":"code","54245c85":"code","336c7da3":"code","1cc751f9":"code","fa6eea53":"code","452a6df7":"code","07613334":"code","7cd93b04":"code","79417f03":"code","6f5b0f9f":"code","10061fee":"code","2741bfa3":"code","b29e21de":"code","2a9266c1":"code","cba24fe9":"code","30d8964f":"code","433d8a99":"code","eb7cf7f7":"code","57a13995":"code","3f35ce0f":"code","96041769":"code","82abe128":"code","8092aa05":"code","dc15b569":"code","70855aec":"code","674641b1":"code","05dcaa98":"code","693558d6":"code","eba408b4":"markdown","5ddcf6c6":"markdown","3d5b8e9f":"markdown","67b8db20":"markdown","c3dde52a":"markdown","1f925be9":"markdown","127ae8f1":"markdown","4667118b":"markdown","0a9799c5":"markdown","a7bf7204":"markdown","339f13f3":"markdown","4f06e3ed":"markdown","9bded65b":"markdown","36994459":"markdown","d89e6719":"markdown","9dfc46df":"markdown","d43fbe96":"markdown","832cae2f":"markdown","d11e933e":"markdown","64e0ef0e":"markdown","f366af57":"markdown","08b13e1b":"markdown","b25c2c66":"markdown","918be6d1":"markdown","c0c1c659":"markdown","53791d05":"markdown","8487db31":"markdown","13a482b2":"markdown","0b300654":"markdown","5ed51cc8":"markdown","8d9cb184":"markdown","b4bc9cb8":"markdown","41688914":"markdown","f240e8c2":"markdown","c19f3797":"markdown","20d3df92":"markdown","cafc57de":"markdown","1ab7dd3a":"markdown","6d738f92":"markdown","515124da":"markdown","88b405bf":"markdown","e3013463":"markdown","73b7f54d":"markdown"},"source":{"9a4f0e15":"#Import necessary packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport cufflinks as cf\n%matplotlib inline\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected = True)\ncf.go_offline()","fae51e42":"#Read dataset\ndf = pd.read_csv('..\/input\/17k-apple-app-store-strategy-games\/appstore_games.csv')","05995896":"#Display the first two rows\ndf.head(2)","dca02636":"##Check types of variables in each column\nprint(df.info())","3f3d1ca9":"#Convert columns to DateTime\ndf[['Original Release Date', 'Current Version Release Date']] = df[['Original Release Date', \n                                                                    'Current Version Release Date']].apply(pd.to_datetime)","cb3093d0":"#Check if changes applied\nprint(df['Original Release Date'].dtype.name, df['Current Version Release Date'].dtype.name)","0def53da":"#Create columns for year, month and weekday for original release date and current version release date\ndf['original_release_year'] = df['Original Release Date'].dt.year\ndf['current_version_year'] = df['Current Version Release Date'].dt.year\ndf['original_release_month'] = df['Original Release Date'].dt.month\ndf['current_version_month'] = df['Current Version Release Date'].dt.month\ndf['original_release_weekday'] = df['Original Release Date'].dt.weekday\ndf['current_version_weekday'] = df['Current Version Release Date'].dt.weekday","b9c0fda6":"#Check for null values\ndf.isnull().sum()","9daff440":"#Display summary statistics\ndf.describe()","9e186186":"#Prepare dataframe for plotting\ndf_price = df.loc[df['Price'].notnull()].reset_index()\ndf_price['paid | free']=0\n\nfor i in range(len(df_price['Price'])):\n    if df_price['Price'][i] > 0:\n        df_price['paid | free'][i] = 'pay-to-play'\n    else:\n        df_price['paid | free'][i] = 'free-to-play'\n        \ndf_price_pie = pd.DataFrame(df_price['paid | free'].value_counts()).reset_index()\ndf_price_pie.columns = ['paid | free', 'count']","040ddc95":"#Creation of pie chart\nfig = px.pie(df_price_pie, values = 'count', names = 'paid | free', title = 'Free-to-play vs Pay-to-play',\n            template = 'gridon', hole = 0.4)\nfig.update_traces(textinfo = 'percent+label', rotation = 60, \n                  marker = dict(line = dict(color = 'black', width = 3)), textposition='inside', \n                  insidetextorientation='tangential', opacity = 0.7, \n                  insidetextfont = {'color' : 'white', 'size' : 16})","54245c85":"#Display unique values of Age Rating variable\nlist(df['Age Rating'].unique())","336c7da3":"#Prepare data frame for plotting distribution of Age Rating variable\ndf_age = df.loc[df['Age Rating'].notnull()].reset_index()\ndf_age_pie = pd.DataFrame(df_price['Age Rating'].value_counts()).reset_index()\ndf_age_pie.columns = ['Age Rating', 'count']","1cc751f9":"# Create a pie chart\nfig = px.pie(df_age_pie, values = 'count', names = 'Age Rating', title = 'Age Rating',\n            template = 'gridon', hole = 0.4)\nfig.update_traces(textinfo = 'percent+label', rotation = 110, \n                  marker = dict(line = dict(color = 'black', width = 3)), \n                  insidetextorientation='tangential', opacity = 0.7,\n                  outsidetextfont = {'color' : 'black', 'size' : 14}, textposition = 'outside')","fa6eea53":"#Prepare a dataset\ndf_rating =  df['Average User Rating'].value_counts().reset_index()\ndf_rating. columns = ['Average User Rating', 'Count']\ndf_rating['prct'] = df_rating['Count'] \/ sum(df_rating['Count'])*100\n#Convert Average User Rating into categorical type\ndf_rating.loc[:, 'Average User Rating'] = df_rating['Average User Rating'].astype(str)\nrating = ['1.0', '1.5', '2.0', '2.5', '3.0', '3.5', '4.0', '4.5', '5.0']\nc_rating = pd.api.types.CategoricalDtype(ordered = True, categories = rating)\ndf_rating.loc[:, 'Average User Rating'] = df_rating['Average User Rating'].astype(c_rating)","452a6df7":"#Create a barplot\nfig = px.bar(df_rating, x = 'Average User Rating', y = 'Count', template = 'gridon', \n                   title = 'Distribution of Average User Rating', text = 'prct')\nfig.update_xaxes(type='category', categoryorder='category ascending', showgrid = False)\nfig.update_traces(texttemplate='%{text:.2s}%', textposition='inside', \n                  outsidetextfont = {'color' : 'white', 'size' : 12}, marker_color = '#387357')","07613334":"#Gather all genres into one string\ngenres = df['Genres'].str.cat(sep = ', ')\n#Split the genres and put in into pandas series\ndata = pd.Series(genres.split(', '))\n#Count unique values and put it into dataframe\ngenres = pd.DataFrame(data.value_counts())\n#Reset index\ngenres = genres.reset_index()\n#Change column names\ngenres.columns = ['Genre', 'Count']\n#Drop general genres and sort the dataframe in ascending order\ngenres = genres.query('Genre != \"Games\" and Genre != \"Strategy\" and Genre != \"Entertainment\"').sort_values('Count',\n                                                                                                           ascending=True)","7cd93b04":"#Plot the distribution\nfig = px.bar(genres.tail(20), y = 'Genre', x = 'Count', text = 'Count', template = 'gridon', title = 'Distribution of Genres')\nfig.update_yaxes(showgrid=False)\nfig.update_layout(uniformtext_minsize = 8)\nfig.update_traces(textposition = 'inside', opacity = 1, marker_color = '#387357')","79417f03":"#Prepare dataframe for vizualization\nprod_dev = df.Developer.value_counts().head(30).reset_index()\nprod_dev.columns = ['Developer', 'Count']\nprod_dev['prct'] = prod_dev['Count'] \/ sum(prod_dev['Count'])*100","6f5b0f9f":"#Create a barplot\nfig = px.bar(prod_dev, y = 'Count', x = 'Developer', \n             height=800, title = 'Distribution of the 30 most frequent developers', text = 'prct')\nfig.update_xaxes(tickangle=45, showgrid=False)\nfig.update_yaxes(gridcolor = '#ECECEC')\nfig.update_layout(plot_bgcolor='white', title_x=0.5)\nfig.update_traces(opacity = 1, marker_color = '#387357',\n                 texttemplate='%{text:.2s}%', textposition='inside', \n                  outsidetextfont = {'color' : 'white', 'size' : 12}, textangle=0)","10061fee":"#Prepare dataset for visualization\n#Filter the dataframe based on list of Developers\ndeveloper_list = list(prod_dev.Developer)\ntrue_false = df.Developer.isin(developer_list)\ndev_full = df[true_false]\n#Create dataframe with relevant columns\ndev_full = dev_full[['Developer', 'original_release_year']]\ndev_year = pd.DataFrame(dev_full.groupby(['Developer', 'original_release_year'])['original_release_year'].count())\ndev_year.columns = ['Count']\ndev_year = dev_year.reset_index()\ndev_year.columns = ['Developer', 'Year', 'Count']","2741bfa3":"#Create a facet grid\nfig = px.bar(dev_year, x = 'Year', y = 'Count',\n             text = 'Count', facet_col=\"Developer\", facet_col_wrap=3, \n             facet_row_spacing=0.04, facet_col_spacing=0.04, height = 1500, template = 'gridon', log_y = True) \nfig.update_traces(opacity = 1, marker_color = '#387357', textposition='inside', \n                  outsidetextfont = {'color' : 'white', 'size' : 10}, textangle=0)\nfig.update_xaxes(showgrid=False, tickfont_size=10,\n                showticklabels=True, title = None, tickmode='linear', tickangle = 45)\nfig.update_yaxes(showticklabels=True, title = None, tickfont_size=10, \n                 tickvals = [1, 2, 5, 10, 20, 50], ticktext = [1, 2, 5, 10, 20, 50])\nfig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[-1]))","b29e21de":"#Define a function for creation of a barchart\ndef count_dataset(a, b, c):\n    '''count_dataset is a function that creates bar plot.\n    It takes 3 variables:\n    a - pd.Series to plot\n    b - xlabel name\n    c - chart title '''\n    df_plot = a.value_counts().reset_index()\n    df_plot.columns = [b, 'No of releases']\n    df_plot = df_plot.sort_values(b, ascending = False)\n    df_plot['prct'] = df_plot['No of releases'] \/ sum(df_plot['No of releases'])*100\n    fig = px.bar(df_plot, x = b, y = 'No of releases',\n             text = 'prct', template = 'gridon', title = c)\n    fig.update_xaxes(showgrid = False, tickmode='linear')\n    fig.update_traces(texttemplate='%{text:.2s}%', textposition='inside', \n                  insidetextfont = {'color' : 'white', 'size' : 12}, marker_color = '#387357')\n    return fig","2a9266c1":"#Create a barchart\ncount_dataset(df['original_release_year'], 'Year', 'No of Releases by Year')","cba24fe9":"#Create a barchart\ncount_dataset(df['original_release_month'], 'Month', 'No of Releases by Month')","30d8964f":"#Create a barchart\ncount_dataset(df['original_release_weekday'], 'Day of Week', ' No of Releases by Day of the Week')","433d8a99":"#Prepare dataframe for visualization\ndf_pub_w = pd.DataFrame(df.groupby(['original_release_year', 'original_release_weekday'])['original_release_year'].count())\ndf_pub_w.columns = ['Count']\ndf_pub_w = df_pub_w.reset_index()","eb7cf7f7":"#Plotting the facet grid\nxticks = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\nxvals = np.arange(0,7,1)\nfig = px.bar(df_pub_w, x = 'original_release_weekday', y = 'Count',\n             text = 'Count', facet_col=\"original_release_year\", facet_col_wrap=4, \n             facet_row_spacing=0.04, facet_col_spacing=0.04, height = 1200, template = 'gridon', log_y = False) \nfig.update_traces(opacity = 1, marker_color = '#387357', textposition='inside', \n                  outsidetextfont = {'color' : 'white', 'size' : 10}, textangle=0)\nfig.update_xaxes(showgrid=False, tickfont_size=10,\n                showticklabels=True, title = None, tickmode='array', tickangle = 45,  ticktext = xticks, tickvals = xvals)\nfig.update_yaxes(showticklabels=True, title = None, tickfont_size=10) \nfig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[-1]))","57a13995":"#Prepare a dataframe for visualization\ncount_rating = df.sort_values('User Rating Count', ascending = False)\ncount_rating = count_rating[['Developer', 'User Rating Count', 'Name', 'Average User Rating']].head(30).reset_index()\ncount_rating.drop('index', axis = 1, inplace = True)\ncount_rating['developer_game'] = count_rating['Developer']+ ' | ' + count_rating['Name']","3f35ce0f":"#Create a barplot\ntext = list(count_rating.developer_game)\nvals = list(range(len(text)))\nfig = px.bar(count_rating, y = 'User Rating Count', x = 'developer_game', text = 'User Rating Count', height=800,\n            title = 'Distribution of the 30 Most Rated Mobile Games')\nfig.update_xaxes(tickangle=45, showgrid=False)\nfig.update_yaxes(gridcolor = '#ECECEC')\nfig.update_layout(plot_bgcolor='white', title_x=0.5)\nfig.update_traces(opacity = 1, marker_color = '#387357',\n                 texttemplate='%{text:.2s}', textposition='outside', \n                  outsidetextfont = {'color' : 'black', 'size' : 14}, textangle=0)","96041769":"#Filter the dataframe based on list of Developers\nlist_dev = [count_rating.iat[0,0], prod_dev.iat[0,0]]\ntrue_false = df.Developer.isin(list_dev)\ndev_full = df[true_false]\napp_count = dev_full.groupby('Developer').size().reset_index()\napp_count.columns = ['Developer', 'User Rating Count']\napp_rated = dev_full.groupby('Developer')['User Rating Count'].sum().reset_index()","82abe128":"# Plot the distribution\nlabels = ['Supercell', 'Tapps Tecnologia']\nfig = make_subplots(rows=1, cols=2, specs=[[{'type': 'domain'}, {'type': 'domain'}]],\n                   subplot_titles = ('Relative quantity of applications <br> per developer',\n                                     'Relative count of ratings<br> per developer'))\n\nfig.add_trace(go.Pie(values = app_count['User Rating Count'], labels = labels, hole = 0.4),row=1, col=1)\n\nfig.add_trace(go.Pie(values = app_rated['User Rating Count'], labels = labels, hole = 0.4), row=1, col=2)\nfig.update_layout(template = 'seaborn', height = 600)\nfig.update_traces(textinfo = 'percent', rotation = 0, \n                  marker = dict(line = dict(color = 'black', width = 2)), \n                  insidetextorientation='tangential', opacity = 0.7,\n                  outsidetextfont = {'color' : 'black', 'size' : 14}, textposition = 'outside')","8092aa05":"#Prepare dataframe for visualization\nrating_release = df.loc[df['Average User Rating'].notnull()]\ndf_release = rating_release.groupby('original_release_year')['Average User Rating'].mean().reset_index()","dc15b569":"#Create a lineplot\nfig = px.line(df_release, x = 'original_release_year', \n        y = 'Average User Rating', markers = True, text = 'Average User Rating',\n             title = 'Average User Rating by Year of Original Release')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='top center', line=dict(color='#140AC1', width=2))\nfig.update_xaxes(showgrid=False, tickmode='linear')\nfig.update_yaxes(showgrid=True)\nfig.update_layout(plot_bgcolor='#FBFAFA', title_x = 0.5)","70855aec":"#Prepare dataframe for vizualization\ndf_release_current = rating_release.groupby('current_version_year')['Average User Rating'].mean().reset_index()","674641b1":"#Create a line plot\nfig = px.line(df_release_current, x = 'current_version_year', \n        y = 'Average User Rating', markers = True, text = 'Average User Rating',\n             title = 'Average User Rating by Year of Current Version Release')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='top center', line=dict(color='#140AC1', width=2))\nfig.update_xaxes(showgrid=False, tickmode='linear')\nfig.update_yaxes(showgrid=True)\nfig.update_layout(plot_bgcolor='#FBFAFA', title_x=0.5)","05dcaa98":"#Calc of difference between ave score between original release and current version release\ndf_diff_release = df_release\ndf_diff_release['Average User Rating'] = df_release['Average User Rating'] - df_release_current['Average User Rating']\ndf_diff_release.columns = ['Year', 'Diff']","693558d6":"print(df_diff_release)","eba408b4":"<a id='Conclusions'><\/a>\n## Conclusions\n[to the top](#Table)","5ddcf6c6":"<a id='Insights'><\/a>\n## More insights\n[to the top](#Table)","3d5b8e9f":"The *Age Rating* variable has 4 values. The most frequent value is 4+, which is 69.5% of the total and the least frequent value is 17+, which is 3.9% of the total. ","67b8db20":"<center><img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxEHBhIQBw8SFhAVFx4XFxUXFRUVGBgeHRYXGxUYExgYHSggGBolGxYWITEjJSkrLi4uFx83ODMsNy4tLisBCgoKDQ0OGxAQFS0lICUtLSs3LystLS0tLy0tLS0vLS8tKystLS0yLTIrLS0rKy0tLS0vLzAvLS0rLS0tLy0tLf\/AABEIAOEA4QMBIgACEQEDEQH\/xAAcAAEAAgMBAQEAAAAAAAAAAAAAAQIFBgcEAwj\/xABBEAACAQICBwQGCAUCBwAAAAAAAQIDEQQFBiExQVFhgRIicZETFBYyVKEVI0JSo7HB0gc0YnLRkvAzNVOCorLh\/8QAGgEBAAIDAQAAAAAAAAAAAAAAAAUGAQIEA\/\/EADQRAAIBAgIFCgcBAAMAAAAAAAABAgMRBCEFEjFBcRNRYYGRobHB0fAUFSIyU5LhUmKisv\/aAAwDAQACEQMRAD8A7iAYfPs6hlNDvd6pL3Yf54L8zaEJTkoxV2zSpVhSg5zdkj247HU8BR7eKmordxfJLa2apmOmMptrLopL70tb6LYvma1jcbUx2IdTEycpPyXJLcj4E5Q0dTgr1M33f0q2L0zWqO1L6V\/27d3VmucyFbOMTiP+NWm+Sdl8tR4pScn3m34lAd8YRjsVuBETqTn90m+LbLElAbGpcFAAXBQAFwUABcFAAXBQAFwUABcgqAC6dnqPXQzWvh1ajXmuV7r5nhBhxi9qNoTlDOLa4Oxs+A0wq0rLGxU195d1\/LU\/I2vLczpZlS7WEne21PU14r9dhy0+lCvLD1lOhJxktjTszhr6PpVM45Pu7PQlMLpivSyqfVHp29T39Z14Gv6O56s0p9ivZVkuklxXPiv9rYCCqU5U5OMlmWqjWhWgpwd0\/efMwADQ9TyZjjI5fg51a2yK2cXuS5t6jl2Oxk8fipVa7vKT6JbrckbJp5j+1iI4eD1JdqXX3V0V31NUJ\/RuHUKeu9r8PeZVNM4p1KvJRf0x\/wDW\/s2dDuAASJD2AAAsAABYAACwAAFgAALAAAWAAAsAABYAACwAAFgAALF6NWVCqp0W1KLumtzOm5HmSzTL1UVlLZJcGtvR7V4nLzPaGY\/1XNlCT7tXU\/Fa4v8ANdTh0hh1Upay2xz9V6EponFOjXUH9ssuvc\/I6KACulvOT57W9ZzqrN75WXhe0flY8IlLtSbe93ILhCOrFR5kkUCpLXnKXO2+0kEA2sakggCwJBAFgSCALAkvSpSrVFGjFuT2JJ3fgkfJuyOo5DlUcqwKikvSSSc5b2+HTYcmLxKw8U7Xb2HbgcE8VNq9ktr47LdJzzEZXXw1PtYijOMeLTsvF7up5LnZTnumeTLA1lWwsbU5uzS2Rly4Jr8nyOfCaQVaepKNn0HXjtE8hDlISbS232rpy3dWXC9tcueynlOIq0u1ToVHHj2Za\/Dj0Ni0JyZTj6zi4312pp7NW2Xns8HyN3MYnSKpT1Ixvbb6G2D0Ry1NVKkmr7Eubnd\/DvONSi4Sammmtqas14p7CDomlmUwx+XynFJVYJuMuS1tc9V7c+pzo6sLiFXhrJWe9HBjcHLDVNVu6eaZIIB1WOQkEAWBIIAsCQQBYEl6NV0K0Zw2pprxvdfkfMCw4HWPpal94HL\/AF6f3gQ3ypc5Y\/n3\/H32nluLkAmiuk3FyAATcXIABNxcgAE3FyAAHrR1\/LsXHH4KFWlskr+D3p807rocgNq0Fzb1fFPD1n3J64cnw6r5pcSO0lQdSlrLbG76t\/r1MldEYhUq2o9krLrV7eLXGx0A8mYYOOPwcqVb3ZK3NcGuadmesFeTcWmtqLVKKkmmsmfGhRjh6MYUlaMUklwS2H2AMGUtyMTpFjI4LJqkqj2xcVzck0v8+CZyw2DTLNvX8w9HSf1VK6XBy3v\/AB4M14smjqDpUs9rz9CpaVxKrV7LZHL178lwJuLkA7yMJuLkAAm4uQACbi5AAJuLkAAm4IABW4uQDJuTcXIABNxcgAE3FyAATcXIABNyYzcJJwdmndNbU1saKkpOTsk23sS2vgkLGGdW0fzNZtlkamrt7JrhJbej29TLGI0bypZTlkYS9996b5vd4Jauhlyn1tTlJcn9t8vfh0F5ocpyceU+6yvx994MBpZmv0Xln1btVn3Y8UvtS6L8zN1ZqlByqNJJXbexJbWzl2a4irpFm05YSDlGKfZit0Ftb8dvi7cDqwGHVWprS+2Ob8l73HJpHEulT1YfdLJW29L6t3TYxC1C5FwWZlRSW4m4uQAZJuLkAAm4uQACbi5AAJuLkAAm4IABAKgyZLAqACwKgAsCoALAqACxtWgmUetYx4iuu5Tfd5y\/+LX4tcDWcHhpY3FQpYdXnN2X+XyS19Dr2WYKOXYGFGj7sVa\/F72+bd31I3SWJ5OnqLbLw95IldFYXlavKS2R8d3Zt42PYAeXMMZHAYKdWu+7BXfPglzbsupXUm3ZFmbSV2axp7nHq+FWHoPvzV5cluXVryT4mS0RypZblUXJfWVEpSe\/+ldE\/Ns0CjUec6QReK1urUSlyTaVlyS1dDrxJ42Hw9CFFb830\/z0RFYGfxFeeIe76Y9C9WrdrRy7TDKfozMnKkvqql5R4J\/aXR61yfIwR1nSDLFm2WSpSt2tsXwktnR60+TZyacXTm41E1JNpp7U07NPqSWj8Ty1Ozf1LJ+TIrSWF5GreP2yzXHevToyAKg7yOLAqACwKgAsCoALAqACxJQAEAi4ubG5IIuLgEgi4uASCLi4BIIuZDIcsebZnClG\/Z2zfBLa\/HYlzaNZyUIuUnkjaEJTkoxWbyNu0Ayj0NF4mutctUOS+0+rVvBczdD40aUaNKMKSSjFJJLYklZJH2KhiKzrVHN+1uRccPQjQpqmt3e977Qc80\/zf0+JWGoPuw1z5y3Lon5vkbbpDmqyjLJVNXa2QXGT2dFrb8Dkk5uc25ttt3be1t7WyS0VhtaTqy2LZx5+rx4EZpbE6sVRjvzfD++HE92RT9HneHk9iqR\/9lc7GcNvb3XZ8TsWS49ZlltOtHbJa1wktUl5pnppiD+ie7Nea8+w00NUX10+D8n5dpkDn2n+U+hrrFUF3Zap8pW1S6pW8VzOgnlzDBxx2EnSrq8Zqz\/RrmnZ9CLwuIdCqp7t\/D3miTxeHVek4b93H3k+hnGAffMMHPL8bOjiPeg7ePBrk1Z9Tz3Lcmmrp5FQaadmsyQRcXMmCQRcXAJBFxcAkEXFwCQRcAEXFyoBtYtcXKgCxa4uQAZsTcXIAFhc6foZk\/0ZlnbrK1WraUuKX2Y+Tu+b5GnaGZR9K5onVX1VKzlwb3Lq1d8k+J1YhNLYnZRjxfkvPsJrROG21nwXm\/LtABrGm2cfRmWejoP62reKttivtPltsvHkQ9KlKrNQjtfvuWZMVasaUHOWxe\/4ahphnH0rmjVJ\/VU7qHBve+rXkkYK5ALhTpxpwUI7F7\/vEqFScqs3OW1+\/wCLoJubVoDnHquO9XrP6uo+7ylu\/wBS1eKRqhCbTvF2fFbvA1rUo1oOEt5tQqyozU47vdjuoMJovm6zjKozl\/xF3Zrmt\/g1r81uM2VCpCVOTjLai3wnGcVKOxmnaf5P6zhVicOu\/TVpc48ej\/N8Dntzt9SCqQcZpNNWaexremcj0jyp5Pmsqa9x66b4p7vFfpzJzROJ1o8jLatnD+eHAgtK4bVarR35Pjz+XG3OYy4uQCYIixNxcggCxa4uVAMWLXFyoAsWuCoAsLi5UGTaxNyacHUqKNNNybSSW1tuyS6lDNaGKL0nw\/pNnal5+jl2fnY0qS1ISnzJvsVzenDXnGN9rS7XY2rKNBaVOgnmrlOo9sVJxjHlda2+d+hlPY3AfD\/iVf3GwAqksbiZO\/KPqdvAtEcFh4q3JrrSb7Wa\/wCxuA+H\/Eq\/uHsbgPh\/xKv7jYAa\/GYn8sv2fqbfCYf8Uf1XoeHLcspZXh3TwMOzFu71t3fFttvce4A8JScndu7PeMVFWSsgYfMdHcLmVf0mNpdqdkr9uotS2JJSSW1+ZmAbQqTpvWhJp9Dt4Gs6cJq04prpSfia\/wCxuA+H\/Eq\/uHsbgPh\/xKv7jYAevxmJ\/LL9n6nl8Jh\/xR\/Vehr\/ALG4D4f8Sr+4+GK0Jwdam\/QQlTlucZyfyk2jZwZ+MxP5ZdrHwmH\/ABR\/VHNsBTqaG6QxjjXehV7rmtUWr6nbc4t61ze250kwGmmBWN0eq6u9Beki+HZ97zj2keLQLOfX8u9DXf1tJW\/uh9l9NnlxOjEXxNH4i31LKXTzPyftHPQth6vIbnnHzXmu\/nNsMdmmUUM2jFZhT7XZv2dcotX264tO2peRkQcEZSi9aLs+g7pRjJWkrrp2Gv8AsbgPh\/xKv7h7G4D4f8Sr+42AHt8Zifyy\/Z+p4\/CYf8Uf1Xoa\/wCxuA+H\/Eq\/uMTnOg1OdByyhyjPb2HJyjLkm9cX1t+ZuwNo47Exd+Ub4ttd5rLBYeStyaXBJPtRwlrsu0k01qaeprimLmU0rUY6SYhU9nbfm0nL5tmJLZCWtFS50n2oq04asnHmbXY7F7i5UGxrYtcFQBYqCtxc2sb2LF6NaVCtGdFtSi1JNbmndM+VxcWB0\/J9NcPjKSWOl6KrvTT7L5xe5cn89plfaPB\/E0vM43cXIqWh6Dd02ujLzRJw0pWStJJ9J2X2jwfxNLzI9o8H8TS8zUdFdD6ePwCrZr2rSd4xi+ymt0par63e1nstxM\/U0HwVSnaMJxfFTk3\/AOV18iMqUsDTm4Oc8sskrEhTq4ucVJQjnzt38DIe0eD+JpeZHtHg\/iaXmaDpJojVyim6uGl6SitrtZw\/vS2rmvJGs3OyjozDVY68Kja6vQ5amka9OWrOmkzsntHg\/iaXmPaPB\/E0vM43cXPX5NR\/2+70PP5tU\/wu87J7R4P4ml5j2jwfxNLzON3Fx8mo\/wC33eg+bVP8LvOye0eD+JpeY9o8H8TS8zjdxcfJqP8At93oPm1T\/COo6S6RYd5HVjha0J1JR7Cind97U30TbOeZPmUspzKFalti9a+8n70eq+djw3Fzsw+Cp0abp7U9t+Fjkr4qdaanstst2ndMLiI4rDxqUHeMkpJ8mfc0D+HOc7cJXfGVL85xXzl5m\/lYxWHdCq4Pq6VuLDh6yrU1Pt6HvBi6ue4WjUcauIpxlF2acrNNbU0ZQ59\/EbJ+zJYuguEanjsg+vuvwibYOjTrVVTm2r7Lc5jFVZ0qbnFXt4G2e0OD+Kpf6kYbO9NaGEoNZbL0tV7Gk+zHnJvb4L5HMri5Nw0Ph4yu230ERPSlZqySXSfSpUdWo5VG3Jttt7W27tvqVK3FyVsRdiwK3FxYzYsCtwLCxAIuLmTYkEXFwCTK6M5S86zaNPX6Nd6o+CW7xezrfcYm50f+GFGKyutNe+6nZfgoxcfnKRyY6tKjQlOO3Yus6cJRVWqovZt7DcqcFTgowSSSsktiW5I+gBTyzmC0tzdZRlEpq3bl3YJ69bWttcErvyW84+tSM5phnP0zmzdJ\/VQ7tPmt76vX4Iwdy2aOwvIUs\/ueb8l1eNyt46vy1TLYsl5vt7rEgi4ud5xkgi4uASCLi4BIIuLgH1w9eWGxEalF2nFqUXwaeo7NkeZRzfLYVqWrtLvL7sl70fP5WOKXNq0Azv1DM\/Q139VWdlwjP7L6+75cCM0nheWpa0fujn1b15o79H1+SqareUsuvd6HUzzYvCwxmFnTxCvCacWuT\/JnpBV02ndFgavtOH5tgJ5XmM6FfbF6n95fZkvFfqeM3f8AinBLE4aa95qafhFxcfm5Gj3LnhKzrUY1Hta\/j7yrYikqVWUFsXmr+diQRcXOg8SQRcXAJBFwARJdmVnuIPbn2H9UzyvTf2ajt4OTcfk0eExF3inz5m8o6smuZ2JBANjFiTYNEdIfoLGP06bo1LKaW1NbHFb9rut\/Q14HnVpRqwcJrJm9OcqclKLzR22hneFxFLtUsTStt1zjFr+5NprqanpjpdTnhJYfKp9pzVpVF7qW9Qf2m1qutVm95z0kjqOiKNOam23bcdtXSNScNVJK5IIBKkfYkEACxIIAFiQQALEggAWJBABix0\/RfTGli8LGnmlRQrRVu1J92fPtbFLinblyzeO0gwuCpOVbEU\/CMlOT8Ixu2cWKkTU0PQlPWTaXMrd1\/DMkoaSqxjZpN8+fvwMxpNncs8zJ1ZJxgl2YR4R5823d9FuMSCCTpwjCKjFZI4Jyc5OUnmyQQDc1sSLkExg6slGHvN2S5vUvmDDPr6CX3WDrnsvRJIX5xT5iW+VS\/wBGnfxMy30GZxxEFqqxs\/7oq2vxj2fJmmHbdIcqjnOVTo1NTeuMvuyXuv8AR8mziuKoTwmJlTxMXGcHaSe5r81z3nvorEqrR1G845dW70Z5Y+hqVNZbJeO\/1KAi5FyUOEsCtxcGCwK3FwCwK3FwCwK3FwCwK3FwCwK3FwCwK3FwCwK3FwCwK3FwCwK3FwCwK3FwC5sOgWXev6RU5Ndyl35eK9xePas\/+1muRTlJKKbb1JLW29yS3s7Dodkf0JlSVZL0s+9Pl92N+EV82zg0liVQotX+qWS831LvaOzBUHUqp7ln6LrfgbCAColhBqmmWiyzqj6TCWjiYrU9imvuy4Pg\/wDa2sHrRrTozU4OzRpUpxqR1ZLI\/P1ejPDVpQrxcZxdpRas0+ZU7VnujtDO6VsZC00rRqR1TXK+9cndHPM30DxeBu8IlWp8Yap9Yv8ARss+F0nQrK0nqy5ns6n5PMhK+BqU3eKuujb1rzNYBNejLC1OziYShLg4uL8nrKXJM4rbiwKACxcFABYuCgAsXBQAWLgoALFwUAFi4KACxcFABYuCtxTi6s+zSTlJ7km30SFgWEU5SSim23ZJK7bexJb2bDlOhOMzFp1Kfoofen3X0h71\/G3idB0e0Uw+R96mu3V\/6kkrrj2FsivnzZHYrSVCitutLmXm9nizro4KrU2qy535La+4xGhOiPqFsRmcfrvsQ29j+qX9f5eOzeACsYjETrzc5v0S5kTlKlGlHViAAeB6AAAAAAGM0g\/5czjec\/zbAJ7QuxkbpLYjwEgFhIcAAAAAAAAAAAAAAAAAAEEgA++A\/mEdg0S\/kmSCD019iJbRn3MzoAK4SgAAAAAB\/9k=\"\/><\/center>","c3dde52a":"###### Average User Rating","1f925be9":"Now, I want to display the 30 most frequent developers.","127ae8f1":"It is unbelievable that in 2016 over 3K strategy games were released.  \nIt is interesting whether publishers prefer to publish in a particular month of a year. Let's explore this.","4667118b":"In conclusion, analyzing the dataset I found some interesting insights. For example, the majority of applications are free-to-play and fall into the 4+ category. Some companies bring to the market dozens of application each a year, while other have a couple of robust products which attract millions of users. On average, older applications score less than new applications. However, if an application is improved and updated on a regular basis, the average customer score will be higher.  \nThat's all, folks. Feel free to leave your comments on how to improve the notebook further, and if you liked my work, please upvote :) ","0a9799c5":"According to the graph, over 3 million people left their ratings of Supercell's Clash of Clans. This is the highest score in the dataset. We can conclude that Clash of Clans is the most popular game. The game was created by Supercell. This developer appears on the bar plot for 3 times: Clash of Clans, Clash Royale and Boom Beach. Surprisingly, these developers did not appear on the [Distribution of the 30 most frequent developers](#Developer) bar chart. This may be a question of quantity vs quality. Let's now compare the behaviour of the developer with the most popular application and the developer with the largest number of applications on the market. ","a7bf7204":"<a id='Table'><\/a>\n# <center> 17k Mobile Strategy Games","339f13f3":"In the facet grid presented some interesting things are shown. For example, I could not imagine that a developer could introduce to the maket 78 applications within one year. *Vilkash Patel* managed to do so :).   \nOverall, while some companies developed their market presence over a long period of time (*Easy Inc, Tapps Tecnologia, Qumaron*), meanwhile others developed theirs in only a couple of years (*Vikash Patel, Andrew Kudrin*).  \nNow I am interested in which year developers published the most.","4f06e3ed":"<a id='Packages'><\/a>\n## Import packages\n[to the top](#Table)","9bded65b":"The provided dataset contains 18 variables:  \n\n| VariableName | Description |\n|:--|:--|\n| URL |URL of the game at AppStore |\n| ID | Assigned ID of a game|\n| Name | Name of a game |\n| Subtitle | Secondary text under the game |\n| Icon URL | URL of game icon |\n| Average User Rating | Average user rating from 1 to 5 |\n| User Rating Count | How many users rated an application |\n| Price | Price of an application |\n| In-app Purchases | Price of available in-app purchases |\n| Description | Description of a game |\n| Developer | Developer name |\n| Age Rating | Age appropriateness |\n| Languages | Languages available for a particular game |\n| Size | Size of an application in bytes |\n| Primary Genre | The main genre |\n| Genres | Genres of an application |\n| Original Release Date | When it was released |\n| Current Version Release Date | When it was last updated |","36994459":"###### Price","d89e6719":"As expected, there is a positive difference when I deduct the average score by the current version release date from the average score by original release date. This supports that a company should constantly update and improve its product to maintain its competitive position.","9dfc46df":"Only 16% of the mobile games presented in the dataset are paid while 84% are free-to-play.","d43fbe96":"In theory, recent applications should have better scores then older ones, because technology develops and customer taste becomes more sophisticated. Further, I want to know whether this is the case. ","832cae2f":"<a id='Introduction'><\/a>\n## Introduction\n[to the top](#Table)","d11e933e":"<a id='Assessment'><\/a>\n## Data assessment\n[to the top](#Table)","64e0ef0e":"The columns *Original Release Date* and *Current Version Release Date* are strings. I will convert them to datetime type to make further manipulations easier. Later I will be using years, months and weekdays, so I will store them in separate columns","f366af57":"<a id='Developer'><\/a>\n###### Developer\n","08b13e1b":"Based on the facet grid presented here, we can see that almost in all cases for each year the games were released on the weekend less frequently. ","b25c2c66":"<a id='Dataset'><\/a>\n## Reading the dataset\n[to the top](#Table)","918be6d1":"Let's now look at the *Age Rating* variable.","c0c1c659":"###### Genres","53791d05":"Tapps Tecnologia introduced over 120 strategy games. I can assume that this Developer has an extensive history.","8487db31":"As we can see from the pie charts above, the company with 123 applications on the market was rated by 275K users, while the company with only 3 applications on the market was rated by 4.7M users. Based on the graphs above I assume that Tapps Tecnologia does not invest enough in marketing compaigns compared to Supercell. ","13a482b2":"I recently discovered a [plotly package](https:\/\/plotly.com\/python\/) for data visualization and wanted to apply it straight away to a realworld dataset. Since I am working in the mobile game industry, I looked for something relevant and found a [17K Mobile Strategy Games](https:\/\/www.kaggle.com\/tristan581\/17k-apple-app-store-strategy-games) dataset which was collected on the 3rd of August 2019, using the iTunes API and the App Store sitemap by Kaggle user [Tristan](https:\/\/www.kaggle.com\/tristan581) from North Korea. In this notebook, I will be conducting EDA to capture some insights.  ","0b300654":"The most frequent value is 4.5, which is 38% of the total","5ed51cc8":"I will be dealing with null values later, if needed","8d9cb184":"It seems that there is no preferred month for release. Maybe a particular day of the week?","b4bc9cb8":"The distribution above shows that companies prefer to publish games in the middle of the week slightly more than on the weekend or Monday.  \nI will now display distributions No of releases by Day for all years separately","41688914":"<a id='Deep'><\/a>\n## Go deeper\n[to the top](#Table)","f240e8c2":"The dataset gives an interesting insight into the *Price* variable. Since min, 25%, 50% and 75% percentiles are equal to 0 and max is equal to USD 179.99, I can assume that less than 25% of applications are free-to-play. Let's plot it on the pie chart to confirm the assumption.","c19f3797":"This line chart shows that on average, applications released in 2008 have an average score of 3.3 while the ones released in 2019 have an average score of 4.3, which confirms the theory I hypothesized. Customers give lower ratings to old applications.  \nBut what if a developer updates an application, will the customer rating be higher when an old application has been updated? To capture this, I will create an additional line plot putting current version release date on the x axis. I assume that frequently updated applications should have better score compared to those, that are updated less frequently. Based on this, for earlier years, the average score should deteriorate using the *current version release date* compared to the *original release date*.  ","20d3df92":"###### Age Rating","cafc57de":"Now, I want to see when the 30 most frequent companies have introduced their applications to the apple store. I put x axis on a log scale to make bar heights more visible.","1ab7dd3a":"<a id='Simple'><\/a>\n## Simple exploration\n[to the top](#Table)","6d738f92":"The most frequent genre is *Puzzle*, followed by *Simulation* and *Action*","515124da":"In this dataset we have not been provided with indicators about how popular the company is. However, we have *count of user rating* variable here, which can be used as an indirect indicator. If there are a lot of user ratings, the game may be considered popular. I will now plot the 30 most popular games in this dataset.","88b405bf":"## Table of contents\n- [Introduction](#Introduction)  \n- [Import packages](#Packages)  \n- [Reading the dataset](#Dataset)\n- [Data assessment](#Assessment)\n- [Simple exploration](#Simple)\n- [Go Deeper](#Deep)\n- [More insights](#Insights)  \n- [Conclusions](#Conclusions)","e3013463":"Further, let's vizualize a distribution of the genres.","73b7f54d":"Now, I want to look at the distribution of Average User Rating"}}