{"cell_type":{"3824ab11":"code","2deff83b":"code","6a2218d6":"code","114de35e":"code","014c1832":"code","4520e4aa":"code","6aedb4c2":"code","b38b0165":"code","3847520a":"code","87c88843":"code","efa07907":"code","be58599d":"code","9d527f9f":"code","82ebc0d4":"code","8899af64":"code","7c17325f":"code","1201416b":"code","295b4ace":"code","672aabc4":"code","4f54716d":"code","350d9971":"code","89569fe2":"code","7e57601a":"markdown","73cb91a1":"markdown","594aba30":"markdown","4e1c2265":"markdown","18841ec0":"markdown","e1f7249a":"markdown","270e937c":"markdown"},"source":{"3824ab11":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import train_test_split\n\ntitanic_test = pd.read_csv(\"..\/input\/titanic\/test.csv\") ","2deff83b":"the_passenger = titanic_test[titanic_test.Fare.isna()].style.highlight_null(null_color='gainsboro')\nthe_passenger","6a2218d6":"precision = 3\nfirst = round(titanic_test.Fare.mean(),precision)\nprint(\"First solution: \", first)","114de35e":"first_class_f_mean = round(titanic_test[titanic_test.Pclass == 1].Fare.mean(),precision)\nsecond_class_f_mean = round(titanic_test[titanic_test.Pclass == 2].Fare.mean(),precision)\nthird_class_f_mean = round(titanic_test[titanic_test.Pclass == 3].Fare.mean(),precision)","014c1832":"classes_f_mean = [first_class_f_mean, second_class_f_mean, third_class_f_mean]\ncolumns_names = [\"FirstClass\", \"SecondClass\",\"ThirdClass\"]\nclasses_f_mean_df = pd.DataFrame([classes_f_mean], columns=columns_names, index=[\"Fare\"])\nclasses_f_mean_df","4520e4aa":"columns_names = [\"FirstClass\\n\", \"SecondClass\",\"ThirdClass\"] \ndefault_bar_color = \"#a6cee3\"\ndf = pd.DataFrame({'Class':columns_names, 'Fare':classes_f_mean})\nax = df.plot.bar(x='Class', y='Fare', rot=0, title=\"Fare mean by passengers class\\n\", \\\n                 color=[default_bar_color,default_bar_color,default_bar_color])\nax.grid()","6aedb4c2":"second = third_class_f_mean\nprint(\"First solution: \", second)","b38b0165":"titanic_test.Age.describe()","3847520a":"the_passenger","87c88843":"filter_class = titanic_test.Pclass == 3;\nfilter_sex = titanic_test.Sex == \"male\"; \n# Age of the passeger: 60.5. 75% percentile = 38\nfilter_age = titanic_test.Age > titanic_test.Age.quantile(0.75);\nfilter_SibSp = titanic_test.SibSp == 0;\nfilter_Parch = titanic_test.Parch == 0;\nfilter_Embarked = titanic_test.Embarked == 'S';\nfilter_farenotnull = titanic_test.Fare.notnull()","efa07907":"filtered_titanic = titanic_test[filter_class & filter_sex & filter_age & filter_SibSp & filter_Parch & filter_Embarked & filter_farenotnull]\nfiltered_titanic","be58599d":"third = round(filtered_titanic.Fare.mean(),precision)\nprint(\"First solution: \", third) ","9d527f9f":"model = CatBoostRegressor(random_state = 0)","82ebc0d4":"cat_df = titanic_test.copy()\ncat_df.Age.fillna(cat_df.Age.mean(), inplace=True)\ncat_df.Cabin.fillna(\"missing\", inplace=True)\ncat_df.dropna(inplace=True)","8899af64":"def create_model(the_categorical_features_names, the_df, bool_full, drop_columns):\n    \n    X = the_df.drop(drop_columns, axis=1)\n    X = the_df.drop(\"Fare\", axis=1)\n    y = the_df[\"Fare\"]\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 0) \n    \n    for i in the_categorical_features_names:\n        X[i] = X[i].astype('category')\n    if (bool_full):\n        model.fit(X,y, cat_features=the_categorical_features_names, eval_set=(X_test, y_test),logging_level = 'Silent')\n    else:\n        model.fit(X_train,y_train, cat_features=the_categorical_features_names, eval_set=(X_test, y_test), logging_level = 'Silent')\n        print(\"Model score: \", model.score(X_test, y_test))\n        \n    ","7c17325f":"cat_df.head(1)","1201416b":"create_model([\"Name\", \"Sex\", \"Ticket\", \"Cabin\", \"Embarked\"], cat_df, True, [])","295b4ace":"titanic_test.Age.fillna(cat_df.Age.mean(), inplace=True)\ntitanic_test.Cabin.fillna(\"missing\", inplace=True)\ntitanic_test.Fare.fillna(titanic_test.Fare.mean(), inplace=True)","672aabc4":"the_passenger = titanic_test[152:153].drop(\"Fare\", axis=1)\nthe_passenger","4f54716d":"fourth = round(float(model.predict(the_passenger)),precision) \nprint(\"Fourth solution: \", fourth) ","350d9971":"all_solutions = [first, second, third, fourth]\nprint(all_solutions)","89569fe2":"columns_names = [\"FirstSolution\\n\", \"SecondSolution\",\"ThirdSolution\", \"FourthSolution\"] \ndf = pd.DataFrame({'Solutions':columns_names, 'Fare':all_solutions})\nax = df.plot.bar(x='Solutions', y='Fare', rot=0, title=\"Fare imputation results of all solutions\\n\",\\\n                 color=[default_bar_color,default_bar_color,default_bar_color,default_bar_color])\nax.grid()","7e57601a":"<h1 style=\"text-align: center;\">Titanic: Fare column imputation \ud83d\udea2<\/h1>\n","73cb91a1":"## Fourth solution: prediction with CatBoost","594aba30":"### First solution: Fare column mean","4e1c2265":"### Second solution: Fare mean only of third class","18841ec0":"### Third solution: Fare mean for passengers with similar parameters to the passenger","e1f7249a":"Passenger with missing Fare","270e937c":"There a big difference between fare mean of first and other classes. If use mean, only for those with the same class as the passenger. It can give a more accurate result than the first solution."}}