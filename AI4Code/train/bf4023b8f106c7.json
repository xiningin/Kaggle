{"cell_type":{"4ad3ae71":"code","b34b8abe":"code","3b33082e":"code","c524a65c":"code","cf924061":"code","a6e830a4":"code","3da3d49e":"code","25a64615":"code","73c920bb":"code","026e75fb":"code","386d3037":"code","dc03dc9c":"code","1d02fddf":"code","d317de47":"code","aee465ff":"code","4a123371":"code","5cb76b2f":"code","521bfc22":"code","d9c047f1":"code","a4c03f61":"code","0330f263":"code","3b92d653":"code","fce0d16c":"code","0b26bc93":"code","116d066e":"code","a5f76aa8":"code","4a9454fd":"code","8c14f586":"code","e8796773":"code","c9334b3a":"code","f1ef2f88":"code","27a2faa1":"code","57e436ad":"code","0363c9f8":"code","defdd6a1":"code","ea36ea4b":"code","6aca1adb":"code","0f9481f6":"code","1695db09":"code","a4276ee3":"code","df607630":"code","0e7aced7":"code","55914fc8":"code","b758f05b":"code","92e09e8d":"code","8d816a19":"code","8d1634e2":"code","bb5c8cbc":"code","5ede385a":"code","84d4a6aa":"code","29b9773c":"code","783bf715":"code","765ff73f":"code","f8f540ac":"code","701c159e":"code","cbdf2336":"code","aed7ddd4":"code","2fc5122a":"code","f9b0222e":"code","f1e88644":"code","af8661fb":"code","21b321ce":"code","2b4ecd72":"code","ae89d346":"code","6b4cb784":"code","a6db9c60":"code","80c360bb":"code","9c903e5b":"code","a5d2bec9":"code","29d68a98":"code","b8fdeb4c":"code","9d24ef7b":"code","3e9724cf":"code","d9ef1aa7":"code","ab9f2703":"code","fad6add2":"code","62b8d7e5":"code","9b5b3f4c":"code","6cbfab4f":"code","1a7893cf":"markdown","f27d214e":"markdown","31c92fe2":"markdown","b5a4b14c":"markdown","5e9cdb4c":"markdown","70866fab":"markdown","311b980a":"markdown","8b7a1e8d":"markdown","f035d0a0":"markdown","ef8e6bf3":"markdown","10f62d17":"markdown","21498b44":"markdown","ac6d3641":"markdown","7b44016c":"markdown","0425e3fd":"markdown","4ae48390":"markdown","6b47892f":"markdown","4c0037ab":"markdown","f0bd018b":"markdown","5402e0f5":"markdown","bf3d6fdb":"markdown","b44a3d5f":"markdown"},"source":{"4ad3ae71":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b34b8abe":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","3b33082e":"train.head()","c524a65c":"test.head()","cf924061":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() # setting seaborn default for plots\n\n","a6e830a4":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='inferno')","3da3d49e":"train.shape","25a64615":"test.shape","73c920bb":"plt.figure(figsize=(12, 7))\nsns.countplot(x='Survived',data=train,palette='RdBu_r')","026e75fb":"plt.figure(figsize=(12, 7))\nsns.countplot(x='Survived', hue= \"Sex\", data=train,palette='RdBu_r')","386d3037":"plt.figure(figsize=(12, 7))\nsns.countplot(x='Survived', hue= \"Pclass\", data=train)","dc03dc9c":"train.info()","1d02fddf":"test.info()","d317de47":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train,palette='winter')\n\n","aee465ff":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=test,palette='rainbow')","4a123371":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n","5cb76b2f":"train['Title'].value_counts()","521bfc22":"test['Title'].value_counts()","d9c047f1":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","a4c03f61":"train.head()","0330f263":"test.head()","3b92d653":"plt.figure(figsize=(12, 7))\nsns.countplot(x='Survived', hue= \"Title\", data=train)","fce0d16c":"# delete unnecessary feature from dataset\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)\n","0b26bc93":"train.head()","116d066e":"test.head()","a5f76aa8":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","4a9454fd":"plt.figure(figsize=(12, 7))\nsns.countplot(x='Survived', hue= \"Sex\", data=train)","8c14f586":"train.head(40)","e8796773":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","c9334b3a":"train.head(20)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","f1ef2f88":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show()\n\n","27a2faa1":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","57e436ad":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","0363c9f8":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)","defdd6a1":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)\n\n","ea36ea4b":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","6aca1adb":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)\n\n","0f9481f6":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","1695db09":"train.head()","a4276ee3":"plt.figure(figsize=(12, 7))\nsns.countplot(x='Survived', hue= \"Age\", data=train)","df607630":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","0e7aced7":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","55914fc8":"train.head()","b758f05b":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","92e09e8d":"# fill missing Fare with median fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain.head(50)","8d816a19":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()","8d1634e2":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)\n\n","bb5c8cbc":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 30)\n\n","5ede385a":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0)","84d4a6aa":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","29b9773c":"train.head()","783bf715":"train.Cabin.value_counts()","765ff73f":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","f8f540ac":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","701c159e":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","cbdf2336":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","aed7ddd4":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","2fc5122a":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","f9b0222e":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","f1e88644":"train.head()","af8661fb":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","21b321ce":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","2b4ecd72":"train_data.head(10)","ae89d346":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","6b4cb784":"train.info()","a6db9c60":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)\n\n","80c360bb":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","9c903e5b":"# kNN Score\nround(np.mean(score)*100, 2)","a5d2bec9":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","29d68a98":"# decision tree Score\nround(np.mean(score)*100, 2)","b8fdeb4c":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","9d24ef7b":"# Random Forest Score\nround(np.mean(score)*100, 2)\n\n","3e9724cf":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\n\n","d9ef1aa7":"# Naive Bayes Score\nround(np.mean(score)*100, 2)","ab9f2703":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","fad6add2":"round(np.mean(score)*100,2)","62b8d7e5":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","9b5b3f4c":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","6cbfab4f":"submission = pd.read_csv('submission.csv')\nsubmission.head(20)","1a7893cf":"Mapping by title\n* Mr : 0\n* Miss : 1\n* Mrs: 2\n* Others: 3","f27d214e":"fill out missing embark with S embark","31c92fe2":"Binning\/Converting Numerical Age to Categorical Variable\n\n* feature vector map:\n* child: 0\n* young: 1\n* adult: 2\n* mid-age: 3\n* senior: 4","b5a4b14c":"**Testing**","5e9cdb4c":"***Data Analysis***","70866fab":"**Cross Validation (K-fold)**","311b980a":"**Cabin**","8b7a1e8d":"**Embarked**\n* Filling missing values","f035d0a0":"**There are missing Ages** \n* Let's use Title's median age for missing Age","ef8e6bf3":"**Random Forest**","10f62d17":"* more than 50% of 1st class are from S embark\n* more than 50% of 2nd class are from S embark\n*  more than 50% of 3rd class are from S embark","21498b44":"**Family size**","ac6d3641":"**Visualizing data**","7b44016c":"**Decision Tree**","0425e3fd":"**SVM**","4ae48390":"**\nData Dictionary**\n\n*    Survived: 0 = No, 1 = Yes\n*     pclass: Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd\n*     sibsp: # of siblings \/ spouses aboard the Titanic\n*     parch: # of parents \/ children aboard the Titanic\n*     ticket: Ticket number\n*     cabin: Cabin number\n*     embarked: Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton\n\n","6b47892f":"Mapping by Sex","4c0037ab":"**Modelling**","f0bd018b":"**Fare**","5402e0f5":"**kNN**","bf3d6fdb":"**Naive Bayes**","b44a3d5f":"There is a lot of missing data."}}