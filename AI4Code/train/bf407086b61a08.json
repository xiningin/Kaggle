{"cell_type":{"9cd1450e":"code","7ed79ad6":"code","5bc91607":"code","ce5d1948":"code","29d3e5d2":"code","b74678bf":"markdown","e08c6a9b":"markdown","629f1ea7":"markdown","1f3371e9":"markdown","64e2cc81":"markdown","6384f6e1":"markdown"},"source":{"9cd1450e":"#Import numpy for linear algebra purposes\nimport numpy as np\n#Import pandas to read the file\nimport pandas as pd\n#Import a function to split our data for evaluation purposes\nfrom sklearn.model_selection import train_test_split\n#Import neccessary functions to process the input message\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\nfrom sklearn.pipeline import Pipeline\n#For this model, we will be using KNeighborsClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","7ed79ad6":"#Read the csv file\ndf = pd.read_csv('\/kaggle\/input\/chatbot-dataset-topical-chat\/topical_chat.csv')\n#X will be our message, and y will be the emotion\nX = df['message']\ny = df['sentiment']\n#Split our data for evaluation purposes, with our text size as 30% of the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","5bc91607":"#We will create our model to vectorize the text to be intepreted by KNeighborsClassifier\nmodel = Pipeline([\n    (\"vect\",CountVectorizer()),\n    (\"tfid\",TfidfTransformer()),\n    (\"algorithm\",KNeighborsClassifier(1))\n])\n#We will fit our pipeline to X_train and y_train to test it out\nmodel.fit(X_train, y_train)","ce5d1948":"#This function uses our model to predict based on text \ndef predict_emotion(text):\n    return model.predict([text])[0]\n\n#Here, we are testing out the model and it's responses\nprint(predict_emotion(\"I'm glad to hear that you are doing good! I love our conversation as of right now!\"))\nprint(predict_emotion(\"You disguist me you horrible creature\"))\nprint(predict_emotion(\"Please don't hurt me, I feel scared by you\"))","29d3e5d2":"#Convert our score to a string version of an integer from 1-100\nscore = model.score(X_test, y_test) * 100\nscore = str(int(score))\n#Display the score \nprint(\"Model accuracy: \" + score + \"%\")","b74678bf":"There are many ways that our model could be improved. The most obvious one is cleaning the text, by lowercasing it all along with deleting certain puncuation. You could also make a neural network use pretrained embeddings to further the accuracy. I will leave that for other people to experiment with. ","e08c6a9b":"This is an example of one of the many things you can do with this dataset. Here we will make a simple program to predict the emotion a person is feeling based on their message. We will start by importing the neccessary libraries","629f1ea7":"Now that we've toyed around with it, it's time to actually evaluate how good our model is doing. ","1f3371e9":"Now, it is time for the evaluation of the model. Before finding out the actual score of the model, we will create a function that can use the model to predict results, as we want to toy around with what we just created.","64e2cc81":"Now, it is time to actually make the model. Here we can use a Pipeline which vectorizes the input, transforms it, and then applies the KNeighborsClasisifer to it. The reason we are using KNeighborsClassifier is because it is much faster than other algorithms, and we will use 1 neighbor","6384f6e1":"Next up, we have to process our inputs to create an X and y for our model to learn from. We will not have to worry about vectorizing our inputs, as the pipeline will do that for us. We will also split our data using train_test_split so we can evaluate how well our model preforms"}}