{"cell_type":{"a14228bb":"code","da962112":"code","b93d8ea6":"code","9574d3d5":"code","b4648835":"code","c9181071":"code","94136139":"code","c1262f56":"markdown","ddefa838":"markdown","dc56c917":"markdown"},"source":{"a14228bb":"import itertools\nall_perms = set(itertools.permutations(range(1, 8), 7))\nmandatory_perms = set((1, 2) +  _ for _ in itertools.permutations(range(3, 8), 5))","da962112":"strnstrnstrb93d8ea6":"str1 = [int(e) for e in str1]\nstr2 = [int(e) for e in str2]\nstr3 = [int(e) for e in str3]","9574d3d5":"wildcards = [[], [], []]","b4648835":"def perms_in_string_list(string_as_list):\n    perms = []\n    for i in range(len(string_as_list)):\n        perm = tuple(string_as_list[i:i+7])\n        if len(set(perm))==7:\n            if 8 not in perm:\n                perms.append(perm)\n            else:\n                if perm.count(8) > 1:\n                    continue\n                for i in range(1,8):\n                    perm2 = list(perm)\n                    perm2[perm2.index(8)] = i\n                    if len(set(perm2))==7:\n                        perms.append(tuple(perm2))\n                \n    return perms\n\ndef perms_in_string(string_as_list):\n    perms = set()\n    for i in range(len(string_as_list)):\n        perm = tuple(string_as_list[i:i+7])\n        if len(set(perm))==7:\n            if 8 not in perm:\n                perms.add(perm)\n            else:\n                if perm.count(8) > 1:\n                    continue\n                for i in range(1,8):\n                    perm2 = list(perm)\n                    perm2[perm2.index(8)] = i\n                    if len(set(perm2))==7:\n                        perms.add(tuple(perm2))\n                \n    return perms\n\ndef perms_to_string(perms):\n    \"\"\"\n    Given list of permutations, compacts them to string\n    via removing overlaps\n    \"\"\"\n    perms = list(perms)\n    s = [*perms[0]]\n    for p, q in zip(perms, perms[1:]):\n        d = perm_dist(p[-7:], q[:7])\n        s.extend(q[7-d:])\n    return s\n\n\ndef check_validity(str1, str2, str3):\n\n    strings_perms = [perms_in_string(str1), perms_in_string(str2), perms_in_string(str3)]\n    for i, s in enumerate(strings_perms):\n        if mandatory_perms - s:\n            print(f'String #{i} is missing {mandatory_perms - s}.')\n            return False\n    if all_perms - set.union(*strings_perms):\n        print(f\"missing:{len(all_perms - set.union(*strings_perms))}\")\n        print(f'Strings are missing {all_perms - set.union(*strings_perms)}.')\n        return False\n    return True\n\n\ndef perm_dist(p, q, wildcard=False):\n    \"\"\"\n    Computes overlapping distance between two lists of integer\n    between 1 and 7. 8 is wildcard\n    \"\"\"\n    p = list(p)\n    q = list(q)\n    \n    #1234567 -> 1238567\n    #1276543 -> 1278543\n    if wildcard and p == [1,2,3,4,5,6,7] or p == [1,2,7,6,5,4,3]:\n        p[3] = 8\n    if wildcard and q == [1,2,3,4,5,6,7] or q == [1,2,7,6,5,4,3]:\n        q[3] = 8\n        \n    if p==q:\n        return 0\n    \n    # Nope\n    if 8 in q and 8 in p:\n        # Dist between 1238567 and 1278543 or reverse\n        return 7\n    \n    if 8 in q:\n        min_dist = 8\n        for i in range(1,8):\n            q2 = list(q)\n            q2[q2.index(8)] = i\n            for j in range(1,8):\n                if p[j:]==q2[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n                \n    if 8 in p:\n        min_dist = 8\n        for i in range(1,8):\n            p2 = list(p)\n            p2[p2.index(8)] = i\n            for j in range(1,8):\n                if p2[j:]==q[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n            \n    i = p.index(q[0])\n    return i if p[i:] == q[:7-i] else 7\n\ndef perm_dist(p, q, string_number, use_wildcards=True):\n    \"\"\"\n    Computes overlapping distance between two lists of integer\n    between 1 and 7. 8 is wildcard\n    \"\"\"\n    p = list(p)\n    q = list(q)\n    \n    \n    if p==q:\n        return 0\n    \n    if use_wildcards:\n        # Apply wildcards\n        for j in range(2):\n            if p == list(wildcards[string_number][j]):\n                p[WILDCARD_POS] = 8\n            if q == list(wildcards[string_number][j]):\n                q[WILDCARD_POS] = 8    \n    \n    # Nope\n    if 8 in q and 8 in p:\n        return 7\n    \n    if 8 in q:\n        min_dist = 8\n        for i in range(1,8):\n            q2 = list(q)\n            q2[q2.index(8)] = i\n            for j in range(1,8):\n                if p[j:]==q2[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n                \n    if 8 in p:\n        min_dist = 8\n        for i in range(1,8):\n            p2 = list(p)\n            p2[p2.index(8)] = i\n            for j in range(1,8):\n                if p2[j:]==q[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n            \n    i = p.index(q[0])\n    return i if p[i:] == q[:7-i] else 7","c9181071":"from termcolor import colored\nWILDCARD_POS = 0\n\ndef print_colored_perms(str_id, perms):\n    for i in range(len(perms)):\n        perm = perms[i]\n        if perm in mandatory_perms:\n            print(f\"[{str_id}] {colored(perm, 'green')}\", end='->')\n        else:\n            print(f\"[{str_id}] {colored(perm, 'red')}\", end='->')\n        if i != len(perms)-1:\n            dist = perm_dist(perm, perms[i+1], str_id, use_wildcards=False)\n            print(f'({dist})')","94136139":"for str_id, string in enumerate((str1, str2, str3)):\n    perms = perms_in_string_list(string)\n    print(f'Number of permutations {len(set(perms))}')\n    print(f'String length {len(string)}')\n    print_colored_perms(str_id, perms)\n    print()\n    print('='*100)\n    print()","c1262f56":"# Define strings","ddefa838":"# Printed perms","dc56c917":"Notebook to print the permutations and the distance between them in every string.\n\nMandatory permutations are printed in green, making it easier to detect them. Thanks to this notebook, one realizes that mandatory permutations are the ones that add more distance. This is because you quickly run out of permutations with the substring \"12\" that can overlap with mandatory ones, making it reasonable to use the wildcards in one of these permutations.\n\nAlthough the simplicity of this notebook works better for me, there is another [public notebook](https:\/\/www.kaggle.com\/seshurajup\/visualize-with-without-wildcard-sol-300-clones) with a great way of visualizing similar information that was published afterwards."}}