{"cell_type":{"bc009821":"code","79b6ace8":"code","e46dbd7d":"code","42f89567":"code","da42fe26":"code","99ba4f58":"code","dd867ec5":"code","70f42856":"code","275f337b":"code","6400cdc7":"code","3c7b0d78":"code","d0cc5e9c":"code","c3764998":"code","31830070":"markdown","f850a8fd":"markdown","5e9877aa":"markdown"},"source":{"bc009821":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","79b6ace8":"data = pd.read_csv(\"..\/input\/voice.csv\")","e46dbd7d":"data.info()","42f89567":"# object to int transform same time x and y data preparation\ndata.label = [1 if each==\"male\" else 0 for each in data.label]\ny = data.label.values\nx_data = data.drop([\"label\"], axis=1)","da42fe26":"# normalization to x_data \nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values","99ba4f58":"# preparation to x_train, x_test, y_train, y_test datasets\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train: \", x_train.shape)\nprint(\"x_test: \", x_test.shape)\nprint(\"y_train: \", y_train.shape)\nprint(\"y_test: \", y_test.shape)","dd867ec5":"#forward and bacward propagations, gradient descent and predict process.\nlr= LogisticRegression()\nlr.fit(x_train.T, y_train.T)\nprint(\"test accuracy: {}\".format(lr.score(x_test.T, y_test.T)))\n","70f42856":"# parameter initialize and sigmoid function\ndef initialize_weight_and_bias(dimension):\n    w = np.full((dimension,1), 0.01)\n    b = 0.0\n    return w,b\n\ndef sigmoid(z):\n    y_head = 1\/ (1+np.exp(-z))\n    return y_head  \n","275f337b":"#forward and bacward propagation process\ndef forward_bacward_propagation(w,b,x_train,y_train):\n    #forward propagation\n    z = np.dot(w.T, x_train)+b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head) #cross entropy loss -y*log(p) - (1-y)*log(1-p)\n    cost = (np.sum(loss)) \/ x_train.shape[1]\n    \n    #backward propagation(t\u00fcrevini alacagiz)\n    derivative_weight = (np.dot(x_train, ((y_head-y_train).T))) \/ x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train) \/ x_train.shape[1]\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\":derivative_bias}\n    \n    return cost, gradients\n    ","6400cdc7":"#updating (learning) parameters\ndef update(w,b,x_train,y_train,learning_rate,number_of_iteration):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    #updatinf(learning) parameters ist number_of_iteration\n    for i in range(number_of_iteration):\n        #make forward and baxward propagation and fibd cost and gradients\n        cost, gradients = forward_bacward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        #lets update\n        w = w - learning_rate*gradients[\"derivative_weight\"]\n        b = b - learning_rate*gradients[\"derivative_bias\"]\n        if i %500 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print(\"Cost after iteration%i: %f\" %(i,cost))\n            \n    #we update(leraning)parameters weights and bias\n    parameters = {\"weight\": w, \"bias\": b}\n    plt.plot(index, cost_list2)\n    plt.xticks(index, rotation='vertical')\n    plt.xlabel(\"Number of \u0130teration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    \n    return parameters, gradients, cost_list","3c7b0d78":"#prediction\ndef prediction(w,b,x_test):\n    #x_test is a input for forward propgation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    y_prediction = np.zeros((1, x_test.shape[1]))\n    \n    # if z is bigger than .5, our prediction is sign one\n    # if z is samller than .5, our prediction is sign zero\n    \n    for i in range(z.shape[1]):\n        if z [0,i]<=.5:\n            y_prediction[0,i] = 0\n        else:\n            y_prediction[0,i] = 1\n    \n    return y_prediction","d0cc5e9c":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate, num_iteration):\n    dimension = x_train.shape[0]\n    w,b = initialize_weight_and_bias(dimension)\n    parameters, gradients, cost_list = update(w,b,x_train,y_train,learning_rate,num_iteration)\n    y_prediction_test = prediction(parameters[\"weight\"], parameters[\"bias\"], x_test)\n    \n    print(\"test accuracy: {}&\".format(100-np.mean(np.abs(y_prediction_test - y_test))*100))\n    ","c3764998":"#Examples\nlogistic_regression(x_train, y_train, x_test, y_test, learning_rate=.1, num_iteration=5500)\n","31830070":"**First way:**","f850a8fd":"**Second way**","5e9877aa":" # Introduction\n* First way i'll predict with using sklearn.linear_model library to 'gender recognition by voice' dataset\n* Second way i'll predict with my self functions"}}