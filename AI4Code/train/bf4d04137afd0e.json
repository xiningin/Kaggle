{"cell_type":{"31a5876b":"code","77595b7e":"code","461bce50":"code","6b3fb2a2":"code","322b55b3":"code","7f659dec":"code","a0858048":"code","6b0e8e8b":"code","818bb910":"code","b8f0fe70":"code","8bc721d6":"code","c0fa7e39":"code","f17e18a2":"code","8dd7a9b8":"code","36cec4b3":"code","ac11f73c":"code","9ac2cc4d":"code","d6499d74":"code","fa66524c":"code","14600658":"code","eb56f0dc":"code","5e123da3":"code","c397086b":"code","45b2142b":"code","61166c2e":"code","bfd503df":"code","4a55e67c":"code","6461ab40":"code","ea43ae6d":"code","27758274":"code","f7ba852d":"code","3f23b9a7":"code","ae301ca5":"code","312f86a1":"code","7dd9bef6":"code","b72772ac":"code","9cb57dba":"code","2a0823cd":"code","510589f1":"code","16b09190":"code","6712a8db":"code","06b2974e":"code","585d1db9":"code","18a914d4":"code","13a77d47":"code","ad1e0464":"code","87a0d40a":"code","f27775bc":"code","4c12f3e4":"code","fda77f7a":"code","cce56f95":"code","d49a4f37":"code","2fd549e5":"code","f0fd13d0":"code","47bb8d38":"code","1ac1e400":"code","90208a21":"code","abf714b1":"code","1bd25498":"code","0af31d82":"code","22987d99":"code","47907ea3":"code","4ff8fc08":"code","4481ddc3":"code","9e48d764":"code","bf64eb5c":"code","4e3c085a":"code","386a2cb9":"code","5c854787":"code","26babf9a":"code","a6e83942":"code","754d3750":"code","f91b7582":"code","4ba253b9":"code","2494465f":"code","75d1777e":"code","24f6f520":"code","fe14273e":"code","a7929e58":"code","80bb9212":"code","7edc1d64":"code","d7f26bb9":"code","4aee6615":"code","289f5a90":"code","73207480":"code","43cb1464":"code","8feecc5e":"code","e465fdc8":"code","a63d0499":"code","6b47ee9b":"code","d999fdf5":"code","d8b28f13":"code","b8a78464":"code","a2797960":"code","c332c8e4":"code","ec8566f0":"code","e6e79657":"markdown","3f7bf580":"markdown","aca76fc3":"markdown","6d5dd8b0":"markdown","6fbaa40b":"markdown","b2962a84":"markdown","cae3e36c":"markdown","b62188b5":"markdown","9130f050":"markdown","4f431088":"markdown","fdb68cba":"markdown","e890d468":"markdown","959b9130":"markdown","b9a7bcf6":"markdown","57c0cec6":"markdown","1a782418":"markdown","11398072":"markdown","9ce173a6":"markdown"},"source":{"31a5876b":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.models import load_model\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","77595b7e":"Main_Train_Path = Path(\"..\/input\/cell-images-parasitized-or-not\/cell_images\/train\")\nMain_Test_Path = Path(\"..\/input\/cell-images-parasitized-or-not\/cell_images\/test\")","461bce50":"Train_PNG_Path = list(Main_Train_Path.glob(r\"*\/*.png\"))\nTest_PNG_Path = list(Main_Test_Path.glob(r\"*\/*.png\"))","6b3fb2a2":"print(Train_PNG_Path[0:5])","322b55b3":"print(Test_PNG_Path[0:5])","7f659dec":"Train_PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Train_PNG_Path))","a0858048":"print(\"Parasitized: \",Train_PNG_Labels.count(\"parasitized\"))\nprint(\"Uninfected: \",Train_PNG_Labels.count(\"uninfected\"))","6b0e8e8b":"Test_PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Test_PNG_Path))","818bb910":"print(\"Parasitized: \",Test_PNG_Labels.count(\"parasitized\"))\nprint(\"Uninfected: \",Test_PNG_Labels.count(\"uninfected\"))","b8f0fe70":"Train_PNG_Path_Series = pd.Series(Train_PNG_Path,name=\"PNG\").astype(str)\nTrain_PNG_Labels_Series = pd.Series(Train_PNG_Labels,name=\"CATEGORY\")","8bc721d6":"Test_PNG_Path_Series = pd.Series(Test_PNG_Path,name=\"PNG\").astype(str)\nTest_PNG_Labels_Series = pd.Series(Test_PNG_Labels,name=\"CATEGORY\")","c0fa7e39":"Main_Train_Data = pd.concat([Train_PNG_Path_Series,Train_PNG_Labels_Series],axis=1)","f17e18a2":"print(Main_Train_Data.head(-1))","8dd7a9b8":"Main_Test_Data = pd.concat([Test_PNG_Path_Series,Test_PNG_Labels_Series],axis=1)","36cec4b3":"print(Main_Test_Data.head(-1))","ac11f73c":"Main_Train_Data = Main_Train_Data.sample(frac=1).reset_index(drop=True)","9ac2cc4d":"print(Main_Train_Data.head(-1))","d6499d74":"Main_Test_Data = Main_Test_Data.sample(frac=1).reset_index(drop=True)","fa66524c":"print(Main_Test_Data.head(-1))","14600658":"plt.style.use(\"classic\")","eb56f0dc":"E_IMG = cv2.imread(Main_Train_Data[\"PNG\"][1234])\nplt.xlabel(E_IMG.shape)\nplt.ylabel(E_IMG.size)\nplt.imshow(E_IMG)","5e123da3":"E_IMG = cv2.imread(Main_Train_Data[\"PNG\"][1])\nplt.xlabel(E_IMG.shape)\nplt.ylabel(E_IMG.size)\nplt.imshow(E_IMG)","c397086b":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(12,12))\n\nfor i,ax in enumerate(axis.flat):\n    IMG = cv2.imread(Main_Train_Data[\"PNG\"][i])\n    ax.set_xlabel(IMG.shape)\n    ax.set_ylabel(IMG.size)\n    ax.set_title(Main_Train_Data[\"CATEGORY\"][i])\n    ax.imshow(IMG,cmap=\"Greys_r\")\nplt.tight_layout()\nplt.show()","45b2142b":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(12,12))\n\nE_IMG = cv2.imread(Main_Train_Data[\"PNG\"][1])\nC_IMG = cv2.Canny(E_IMG,10,100)\n\naxis[0].imshow(C_IMG)\naxis[1].imshow(E_IMG)","61166c2e":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(12,12))\n\nE_IMG = cv2.imread(Main_Train_Data[\"PNG\"][1])\n_,T_IMG = cv2.threshold(E_IMG,90,155,cv2.THRESH_TOZERO_INV)\nC_IMG = cv2.Canny(T_IMG,10,100)\n\naxis[0].imshow(T_IMG)\naxis[1].imshow(C_IMG)\naxis[2].imshow(E_IMG)","bfd503df":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(12,12))\n\nE_IMG = cv2.imread(Main_Train_Data[\"PNG\"][1])\n_,T_IMG = cv2.threshold(E_IMG,90,155,cv2.THRESH_TOZERO_INV)\nC_IMG = cv2.Canny(T_IMG,10,100)\ncontours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDraw_Contour = cv2.drawContours(E_IMG,contours,-1,(255,0,0),1)\n\naxis[0].imshow(T_IMG)\naxis[1].imshow(C_IMG)\naxis[2].imshow(Draw_Contour)","4a55e67c":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(12,12))\n\nE_IMG = cv2.imread(Main_Train_Data[\"PNG\"][1])\n_,T_IMG = cv2.threshold(E_IMG,90,155,cv2.THRESH_TOZERO_INV)\nC_IMG = cv2.Canny(T_IMG,10,100)\ncontours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDraw_Contour = cv2.drawContours(E_IMG,contours,-1,(255,0,0),1)\n\nfor contour in contours:\n    x,y,w,h = cv2.boundingRect(contour)\n    cv2.rectangle(Draw_Contour,(x,y),(x+w,y+h),(255,0,0),1)\n\naxis[0].imshow(T_IMG)\naxis[1].imshow(C_IMG)\naxis[2].imshow(E_IMG)","6461ab40":"E_IMG = cv2.imread(Main_Train_Data[\"PNG\"][1])\n_,T_IMG = cv2.threshold(E_IMG,90,155,cv2.THRESH_TOZERO_INV)\nC_IMG = cv2.Canny(T_IMG,10,100)\ncontours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDraw_Contour = cv2.drawContours(E_IMG,contours,-1,(255,0,0),1)\n\nfor contour in contours:\n    x,y,w,h = cv2.boundingRect(contour)\n    cv2.rectangle(Draw_Contour,(x,y),(x+w,y+h),(255,0,0),1)\n    \nplt.imshow(E_IMG)","ea43ae6d":"Parasitized_Set = Main_Train_Data[Main_Train_Data[\"CATEGORY\"] == \"parasitized\"]\nParasitized_Set = Parasitized_Set.reset_index()\nprint(Parasitized_Set.head(-1))","27758274":"Uninfected_Set = Main_Train_Data[Main_Train_Data[\"CATEGORY\"] == \"uninfected\"]\nUninfected_Set = Uninfected_Set.reset_index()\nprint(Uninfected_Set.head(-1))","f7ba852d":"E_IMG = cv2.imread(Parasitized_Set[\"PNG\"][52])\n_,T_IMG = cv2.threshold(E_IMG,80,155,cv2.THRESH_TOZERO_INV)\nC_IMG = cv2.Canny(T_IMG,10,100)\ncontours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDraw_Contour = cv2.drawContours(E_IMG,contours,-1,(255,0,0),1)\n\nfor contour in contours:\n    x,y,w,h = cv2.boundingRect(contour)\n    cv2.rectangle(Draw_Contour,(x,y),(x+w,y+h),(255,0,0),1)\n    \nplt.imshow(E_IMG)","3f23b9a7":"E_IMG = cv2.imread(Parasitized_Set[\"PNG\"][552])\n_,T_IMG = cv2.threshold(E_IMG,90,155,cv2.THRESH_TOZERO_INV)\nC_IMG = cv2.Canny(T_IMG,10,100)\ncontours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDraw_Contour = cv2.drawContours(E_IMG,contours,-1,(255,0,0),1)\n\nfor contour in contours:\n    x,y,w,h = cv2.boundingRect(contour)\n    cv2.rectangle(Draw_Contour,(x,y),(x+w,y+h),(255,0,0),1)\n    \nplt.imshow(E_IMG)","ae301ca5":"E_IMG = cv2.imread(Parasitized_Set[\"PNG\"][12474])\n_,T_IMG = cv2.threshold(E_IMG,90,155,cv2.THRESH_TOZERO_INV)\nC_IMG = cv2.Canny(T_IMG,10,100)\ncontours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDraw_Contour = cv2.drawContours(E_IMG,contours,-1,(255,0,0),1)\n\nfor contour in contours:\n    x,y,w,h = cv2.boundingRect(contour)\n    cv2.rectangle(Draw_Contour,(x,y),(x+w,y+h),(255,0,0),1)\n    \nplt.imshow(E_IMG)","312f86a1":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(12,12))\n\nfor i,ax in enumerate(axis.flat):\n    \n    E_IMG = cv2.imread(Parasitized_Set[\"PNG\"][i])\n    _,T_IMG = cv2.threshold(E_IMG,90,155,cv2.THRESH_TOZERO_INV)\n    C_IMG = cv2.Canny(T_IMG,10,100)\n    contours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    Draw_Contour = cv2.drawContours(E_IMG,contours,-1,(255,0,0),1)\n\n    for contour in contours:\n        x,y,w,h = cv2.boundingRect(contour)\n        cv2.rectangle(Draw_Contour,(x,y),(x+w,y+h),(255,0,0),1)\n\n    ax.set_xlabel(E_IMG.shape)\n    ax.set_ylabel(E_IMG.size)\n    ax.set_title(Parasitized_Set[\"CATEGORY\"][i])\n    ax.imshow(E_IMG,cmap=\"Greys_r\")\n\nplt.tight_layout()\nplt.show()","7dd9bef6":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(12,12))\n\nfor i,ax in enumerate(axis.flat):\n    \n    E_IMG = cv2.imread(Uninfected_Set[\"PNG\"][i])\n    _,T_IMG = cv2.threshold(E_IMG,80,155,cv2.THRESH_TOZERO_INV)\n    C_IMG = cv2.Canny(T_IMG,10,100)\n    contours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    Draw_Contour = cv2.drawContours(E_IMG,contours,-1,(255,0,0),1)\n\n    for contour in contours:\n        x,y,w,h = cv2.boundingRect(contour)\n        cv2.rectangle(Draw_Contour,(x,y),(x+w,y+h),(255,0,0),1)\n\n    ax.set_xlabel(E_IMG.shape)\n    ax.set_ylabel(E_IMG.size)\n    ax.set_title(Uninfected_Set[\"CATEGORY\"][i])\n    ax.imshow(E_IMG,cmap=\"Greys_r\")\n\nplt.tight_layout()\nplt.show()","b72772ac":"Train_IMG_Generator = ImageDataGenerator(rescale=1.\/255,\n                                        rotation_range=25,\n                                        shear_range=0.2,\n                                        zoom_range=0.1,\n                                        brightness_range=[0.2,0.8],\n                                        horizontal_flip=True,\n                                        vertical_flip=True,\n                                        width_shift_range=0.2,\n                                        height_shift_range=0.2,\n                                        validation_split=0.1)","9cb57dba":"Test_IMG_Generator = ImageDataGenerator(rescale=1.\/255)","2a0823cd":"Example_Image = Main_Train_Data[\"PNG\"][5]\nLoad_Image = image.load_img(Example_Image,target_size=(80,80))\nArray_Image = image.img_to_array(Load_Image)\nArray_Image = Array_Image.reshape((1,)+Array_Image.shape)\n\ni = 0\n\nfor batch in Train_IMG_Generator.flow(Array_Image,batch_size=32):\n    plt.figure(i)\n    Image = plt.imshow(image.img_to_array(batch[0]))\n    i += 1\n    if i % 6 == 0:\n        break\nplt.show()","510589f1":"Train_IMG_Set = Train_IMG_Generator.flow_from_dataframe(dataframe=Main_Train_Data,\n                                                       x_col=\"PNG\",\n                                                       y_col=\"CATEGORY\",\n                                                       color_mode=\"rgb\",\n                                                       class_mode=\"binary\",\n                                                       subset=\"training\")","16b09190":"Validation_IMG_Set = Train_IMG_Generator.flow_from_dataframe(dataframe=Main_Train_Data,\n                                                       x_col=\"PNG\",\n                                                       y_col=\"CATEGORY\",\n                                                       color_mode=\"rgb\",\n                                                       class_mode=\"binary\",\n                                                       subset=\"validation\")","6712a8db":"Test_IMG_Set = Train_IMG_Generator.flow_from_dataframe(dataframe=Main_Test_Data,\n                                                       x_col=\"PNG\",\n                                                       y_col=\"CATEGORY\",\n                                                       color_mode=\"rgb\",\n                                                       class_mode=\"binary\",\n                                                       shuffle=False)","06b2974e":"print(\"TRAIN: \")\nprint(Train_IMG_Set.class_indices)\nprint(Train_IMG_Set.classes[0:5])\nprint(Train_IMG_Set.image_shape)\nprint(\"---\"*20)\nprint(\"VALIDATION: \")\nprint(Validation_IMG_Set.class_indices)\nprint(Validation_IMG_Set.classes[0:5])\nprint(Validation_IMG_Set.image_shape)\nprint(\"---\"*20)\nprint(\"TEST: \")\nprint(Test_IMG_Set.class_indices)\nprint(Test_IMG_Set.classes[0:5])\nprint(Test_IMG_Set.image_shape)","585d1db9":"Model = Sequential()\n\nModel.add(SeparableConv2D(12,(3,3),activation=\"relu\",\n                 input_shape=(256,256,3)))\nModel.add(BatchNormalization())\nModel.add(MaxPooling2D((2,2)))\n\n#\nModel.add(SeparableConv2D(24,(3,3),\n                 activation=\"relu\",padding=\"same\"))\nModel.add(Dropout(0.2))\nModel.add(MaxPooling2D((2,2)))\n\n\n#\nModel.add(TimeDistributed(Flatten()))\nModel.add(Bidirectional(LSTM(32,\n                                  return_sequences=True,\n                                  dropout=0.5,\n                                  recurrent_dropout=0.5)))\nModel.add(Bidirectional(GRU(32,\n                                  return_sequences=True,\n                                  dropout=0.5,\n                                  recurrent_dropout=0.5)))\n\n#\nModel.add(Flatten())\nModel.add(Dense(256,activation=\"relu\"))\nModel.add(Dropout(0.5))\nModel.add(Dense(1,activation=\"sigmoid\"))","18a914d4":"print(Model.summary())","13a77d47":"Call_Back = tf.keras.callbacks.EarlyStopping(monitor=\"loss\",patience=5,mode=\"min\")","ad1e0464":"Model.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","87a0d40a":"CNN_Model = Model.fit(Train_IMG_Set,\n                      validation_data=Validation_IMG_Set,\n                      callbacks=Call_Back,\n                      epochs=5)","f27775bc":"Model.save(\".\/Cell_Last_Prediction_Model\")","4c12f3e4":"Model.save(\"Prediction_Model.h5\")","fda77f7a":"Grap_Data = pd.DataFrame(CNN_Model.history)","cce56f95":"Grap_Data.plot()","d49a4f37":"plt.plot(CNN_Model.history[\"accuracy\"])\nplt.plot(CNN_Model.history[\"val_accuracy\"])\nplt.ylabel(\"ACCURACY\")\nplt.legend()\nplt.show()","2fd549e5":"plt.plot(CNN_Model.history[\"loss\"])\nplt.plot(CNN_Model.history[\"val_loss\"])\nplt.ylabel(\"LOSS\")\nplt.legend()\nplt.show()","f0fd13d0":"History_Grap = CNN_Model.history\nval_losses = History_Grap[\"val_loss\"]\nval_acc = History_Grap[\"val_accuracy\"]\nepochs = range(1,len(val_losses)+1)","47bb8d38":"plt.plot(epochs,val_losses,\"k-\",label=\"LOSS\")\nplt.plot(epochs,val_acc,\"r\",label=\"ACCURACY\")\nplt.title(\"LOSS & ACCURACY\")\nplt.xlabel(\"EPOCH\")\nplt.ylabel(\"Loss & Acc\")\nplt.legend()\nplt.show()","1ac1e400":"Model_Results = Model.evaluate(Test_IMG_Set)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","90208a21":"Model_Test_Prediction = Model.predict(Test_IMG_Set)","abf714b1":"Model_Test_Prediction = Model_Test_Prediction.argmax(axis=-1)","1bd25498":"print(Model_Test_Prediction)","0af31d82":"Model_Test_Prediction_Classes = Model.predict_classes(Test_IMG_Set)","22987d99":"print(Model_Test_Prediction_Classes)","47907ea3":"fig, axes = plt.subplots(nrows=5,\n                         ncols=5,\n                         figsize=(20, 20),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(Main_Test_Data[\"PNG\"].iloc[i]))\n    ax.set_title(f\"PREDICTION:{Model_Test_Prediction_Classes[i]}\")\n    ax.set_xlabel(Main_Test_Data[\"CATEGORY\"].iloc[i])\nplt.tight_layout()\nplt.show()","4ff8fc08":"prediction_model = load_model(\".\/Prediction_Model.h5\")","4481ddc3":"print(prediction_model.summary())","9e48d764":"S_P_Image = Main_Test_Data[\"PNG\"][1111]\nR_L_Image = cv2.imread(S_P_Image)\nR_L_Image = cv2.resize(R_L_Image,(256,256))\nR_L_Image = R_L_Image \/ 255","bf64eb5c":"plt.imshow(R_L_Image)\nplt.xlabel(R_L_Image.shape)\nplt.title(Main_Test_Data[\"CATEGORY\"][1111])","4e3c085a":"R_L_Image = np.asarray(R_L_Image)\nR_L_Image = R_L_Image.reshape(-1,256,256,3)","386a2cb9":"Predict_Special_IMG = prediction_model.predict_classes(R_L_Image)","5c854787":"print(Predict_Special_IMG.argmax(axis=-1))","26babf9a":"S_P_Image = Parasitized_Set[\"PNG\"][i]\nR_L_Image = cv2.imread(S_P_Image)\nR_L_Image = cv2.resize(R_L_Image,(256,256))\nR_L_Image = R_L_Image \/ 255","a6e83942":"R_L_Image = np.asarray(R_L_Image)\nR_L_Image = R_L_Image.reshape(-1,256,256,3)","754d3750":"Predict_Two_Special_IMG = prediction_model.predict_classes(R_L_Image)","f91b7582":"print(Predict_Two_Special_IMG)","4ba253b9":"S_P_Image = Uninfected_Set[\"PNG\"][i]\nR_L_Image = cv2.imread(S_P_Image)\nR_L_Image = cv2.resize(R_L_Image,(256,256))\nR_L_Image = R_L_Image \/ 255","2494465f":"R_L_Image = np.asarray(R_L_Image)\nR_L_Image = R_L_Image.reshape(-1,256,256,3)","75d1777e":"Predict_Three_Special_IMG = prediction_model.predict_classes(R_L_Image)","24f6f520":"print(Predict_Three_Special_IMG[0][0])","fe14273e":"S_P_Image = \"..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST\/NEUTROPHIL\/_10_1098.jpeg\"\nR_L_Image = cv2.imread(S_P_Image)\nR_L_Image = cv2.resize(R_L_Image,(256,256))\nR_L_Image = R_L_Image \/ 255","a7929e58":"R_L_Image = np.asarray(R_L_Image)\nR_L_Image = R_L_Image.reshape(-1,256,256,3)","80bb9212":"Predict_Four_Special_IMG = prediction_model.predict_classes(R_L_Image)","7edc1d64":"print(Predict_Four_Special_IMG)","d7f26bb9":"S_P_Image = \"..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST\/LYMPHOCYTE\/_0_3988.jpeg\"\nR_L_Image = cv2.imread(S_P_Image)\nR_L_Image = cv2.resize(R_L_Image,(256,256))\nR_L_Image = R_L_Image \/ 255","4aee6615":"R_L_Image = np.asarray(R_L_Image)\nR_L_Image = R_L_Image.reshape(-1,256,256,3)","289f5a90":"Predict_Five_Special_IMG = prediction_model.predict_classes(R_L_Image)","73207480":"print(Predict_Five_Special_IMG[0][0])","43cb1464":"Example_All_IMG = Main_Test_Data[\"PNG\"][0:50]","8feecc5e":"for images in Example_All_IMG:\n    I_X = cv2.imread(images)\n    I_Y = cv2.resize(I_X,(256,256))\n    I_YA = np.asarray(I_Y)\n    I_YA = I_YA.reshape(-1,256,256,3)\n    Predict_X = prediction_model.predict_classes(I_YA)\n    if Predict_X[0][0] == 0:\n        _,T_IMG = cv2.threshold(I_X,90,155,cv2.THRESH_TOZERO_INV)\n        C_IMG = cv2.Canny(T_IMG,10,100)\n        contours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n        Draw_Contour = cv2.drawContours(I_X,contours,-1,(0,0,255),1)\n\n        for contour in contours:\n            x,y,w,h = cv2.boundingRect(contour)\n            cv2.rectangle(Draw_Contour,(x,y),(x+w,y+h),(255,0,0),1)\n        print(\"Found Parasitized Cell\\n\")\n        plt.imshow(I_X,cmap=\"Greys_r\")\n","e465fdc8":"E_IMG_T = Main_Train_Data[\"PNG\"][233]\nL_IMG_T = image.load_img(E_IMG_T,target_size=(256,256))\nArray_IMG_T = image.img_to_array(L_IMG_T)\nArray_IMG_T = np.expand_dims(Array_IMG_T,axis=0)\nArray_IMG_T \/= 255","a63d0499":"plt.imshow(Array_IMG_T[0])\nplt.show()","6b47ee9b":"Layer_Output = [layer.output for layer in Model.layers[:8]]\nactivation_model = models.Model(inputs=Model.input,outputs=Layer_Output)","d999fdf5":"activations = activation_model.predict(Array_IMG_T)","d8b28f13":"first_layer_v_act = activations[0]\nprint(first_layer_v_act.shape)","b8a78464":"plt.matshow(first_layer_v_act[0,:,:,4],cmap=\"viridis\")","a2797960":"plt.matshow(first_layer_v_act[0,:,:,11],cmap=\"viridis\")","c332c8e4":"plt.matshow(first_layer_v_act[0,:,:,1],cmap=\"viridis\")","ec8566f0":"plt.matshow(first_layer_v_act[0,:200,:200,7],cmap=\"viridis\")","e6e79657":"#### APPLYING","3f7bf580":"#### MAIN PATH","aca76fc3":"#### PREDICTION WITH COMPUTER VISION","6d5dd8b0":"#### SHUFFLING","6fbaa40b":"#### LEARNING IN LAYERS","b2962a84":"#### TO DATAFRAME","cae3e36c":"* 0 --> PARASITIZED\n* 1 --> UNINFECTED","b62188b5":"#### PNG PATH","9130f050":"#### SPECIAL PREDICTION","4f431088":"#### LABELS","fdb68cba":"#### HOW TO LOOK BY GENERATOR","e890d468":"#### PREDICTION","959b9130":"#### TO SERIES","b9a7bcf6":"# VISUALIZATION","57c0cec6":"# PACKAGES AND LIBRARIES","1a782418":"#### GENERATOR STRUCTURE","11398072":"# IMAGE GENERATOR","9ce173a6":"# PATH AND LABEL PROCESS"}}