{"cell_type":{"eacc31d7":"code","b3198c0b":"code","476d69c7":"code","62701396":"code","26c736a9":"code","fc547654":"code","e87db812":"code","951a28cc":"code","7f2015d0":"code","e605d7a3":"code","bec8fcb6":"code","5af9c760":"code","d71f8bb3":"code","4114962f":"code","98999afd":"code","d7241119":"code","9aa678c5":"code","02807417":"code","61c0e1f2":"code","8308cdc3":"code","fa805718":"code","e4a70f0d":"code","fb56446e":"code","17f3f232":"markdown","4235332c":"markdown","c189dfa0":"markdown","7832f1d4":"markdown","344c205a":"markdown","ac19eb4d":"markdown","1a4b8061":"markdown","e10c6cb4":"markdown","8997df7d":"markdown","ff0d451a":"markdown"},"source":{"eacc31d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3198c0b":"path = '..\/input\/example.txt'\nopen(path).readline()","476d69c7":"import json\nrecords = [json.loads(line) for line in open(path)]","62701396":"records[0]","26c736a9":"data = pd.DataFrame(records)\ndata.info()","fc547654":"data['tz'][:10]","e87db812":"tz_counts = data['tz'].value_counts()\ntz_counts","951a28cc":"clean_tz = data['tz'].fillna('Missing')\nclean_tz[clean_tz == ''] = 'Unknown'\ntz_counts = clean_tz.value_counts()\ntz_counts[:10]","7f2015d0":"subset = tz_counts[:10]\nsns.barplot(y=subset.index, x=subset.values)\nplt.title('Top time zones in the usa.gov sample data', fontsize=16)\nplt.xlabel(\"Counts\")\nplt.ylabel(\"Time Zones\")","e605d7a3":"data['a'][:10]","bec8fcb6":"browser = pd.Series([x.split(' ')[0] for x in data['a'].dropna()])\nbrowser.value_counts()[:10]","5af9c760":"clean_data = data[data['a'].notnull()]\nclean_data['os'] = np.where(clean_data['a'].str.contains('Windows'), 'Windows', 'Not Windows')\nclean_data['os'][:5]","d71f8bb3":"clean_data['tz'] = clean_data['tz'].fillna('Missing')\nclean_data['tz'][clean_data['tz'] == ''] = 'Unknown'","4114962f":"We group time zone and operating system","98999afd":"group_tz_os = clean_data.groupby(['tz', 'os'])","d7241119":" counts_tz_os = group_tz_os.size().unstack().fillna(0)\n    ","9aa678c5":"counts_tz_os","02807417":"indexer = counts_tz_os.sum(1).argsort()\nindexer","61c0e1f2":"subset = counts_tz_os.take(indexer[-10:])\nsubset","8308cdc3":"subset = subset.stack()\nsubset.name = 'total'\nsubset = subset.reset_index()\nsubset","fa805718":"sns.barplot(x = 'total', y = 'tz', hue = 'os', data = subset)\nplt.title('Top time zones by Windows and non-Windows users')","e4a70f0d":"def normal_total(group):\n    group['normal total'] = group.total\/group.total.sum()\n    return group\n\nsubset_normal = subset.groupby('tz').apply(normal_total)\nsubset_normal","fb56446e":"sns.barplot(x = 'normal total', y = 'tz', hue = 'os', data = subset_normal)\nplt.title('Percentage Windows and non-Windows users in top-occurring time zones')","17f3f232":"The most common time zone is New York with over 1200 counts","4235332c":"# Time Zones\nFirst, we are going to analyze the time zones (*tz* in the database).","c189dfa0":"- Cleaning of data","7832f1d4":"The most used browser is Morzilla\/5.0","344c205a":"# Browser\/Device","ac19eb4d":"- Cleaning of data","1a4b8061":"The database is in json format, so we extract the data following this format.","e10c6cb4":"This Database contains information about the users who shorten links ending with .gov or .mil.","8997df7d":"- Visualization of data","ff0d451a":"# Operating system"}}