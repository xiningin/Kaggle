{"cell_type":{"a5eec0da":"code","dd9dc0a6":"code","0a6057af":"code","712c2030":"code","b1110101":"code","291f5dd9":"code","b63aaa7f":"code","77b8adce":"code","cb980121":"code","eb6b9504":"code","c94b1313":"code","614d53ea":"code","b3723ed7":"code","f36e45c5":"code","d17ac322":"code","0250bb56":"code","e9fdc436":"markdown","ee9389f6":"markdown","97cd543e":"markdown","9850960d":"markdown","80b13a4e":"markdown"},"source":{"a5eec0da":"import numpy as np\nimport pandas as pd\n\nfrom sklearn import (\n    model_selection,\n    metrics,\n)\nfrom catboost import CatBoostRegressor  ","dd9dc0a6":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","0a6057af":"def weird_division(n, d):\n    return n \/ d if d else 0","712c2030":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')\ndf.head()","b1110101":"df.info()","291f5dd9":"df.nunique()","b63aaa7f":"df[\"date\"] = df.date.astype(\"datetime64[s]\")","77b8adce":"df['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue'] * 100)), x['measurable_impressions']) * 1000, axis=1)\ndf = df[df.CPM >= 0]\n\ncols_for_delete = [\n#     \"order_id\",  # dataset overview\n#     \"line_item_type_id\",  # dataset overview\n    \"total_revenue\",  # CPM depends \n    \"measurable_impressions\", # CPM depends\n    \"integration_type_id\", # one unique value\n    \"revenue_share_percent\", # one unique value\n]\ndf.drop(cols_for_delete, axis = 1, inplace=True)","cb980121":"numeric_features = [\n    \"total_impressions\", \n    \"viewable_impressions\", \n]\ncategorical_features = [\n    \"site_id\", \n    \"ad_type_id\", \n    \"geo_id\", \n    \"device_category_id\", \n    \"advertiser_id\", \n    \"os_id\", \n    \"monetization_channel_id\", \n    \"ad_unit_id\",\n    \"order_id\", \n    \"line_item_type_id\", \n]\n\nfeatures = numeric_features + categorical_features\ntarget_name = \"CPM\"","eb6b9504":"for cur_col in numeric_features + [target_name]:\n    df[cur_col] = np.log1p(df[cur_col])","c94b1313":"train_df = df[df.date < \"2019-06-22\"]\ntest_df = df[df.date >= \"2019-06-22\"]\n\ntrain_df = train_df.loc[train_df[\"CPM\"] < train_df[\"CPM\"].quantile(0.95)]\ntest_df = test_df.loc[test_df[\"CPM\"] < test_df[\"CPM\"].quantile(0.95)]","614d53ea":"X = train_df[features]\ny = train_df[target_name]\n\nX_train, X_val, y_train, y_val = model_selection.train_test_split(X, y)","b3723ed7":"cbr = CatBoostRegressor(\n    learning_rate=0.5,\n    iterations=1000, \n    random_seed=13, \n    depth=6, \n)","f36e45c5":"cbr.fit(X_train, y_train, cat_features=categorical_features, verbose=200)","d17ac322":"y_pred_val = cbr.predict(X_val)\n\nprint(f\"MSE on validation = {metrics.mean_squared_error(np.expm1(y_val), np.expm1(y_pred_val))}\")","0250bb56":"y_pred_test = cbr.predict(test_df[features])\n\nprint(f\"MSE on test = {metrics.mean_squared_error(np.expm1(test_df.CPM), np.expm1(y_pred_test))}\")","e9fdc436":"### CatBoost <a name = 'catboost'><\/a>","ee9389f6":"### Imports <a name = 'imports'><\/a>","97cd543e":"### Log and train test split <a name = 'split'><\/a>","9850960d":"### Outline <a name = 'outline'><\/a>\n* [Imports](#imports) \n* [Preprocessing](#dataset)\n* [Log and train test split](#split) \n* [Catboost](#catboost)","80b13a4e":"### Preprocessing <a name = 'dataset'><\/a>"}}