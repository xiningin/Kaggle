{"cell_type":{"54d760b0":"code","ec61b8e8":"code","f2272201":"code","eee5c414":"code","e0770863":"markdown"},"source":{"54d760b0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import HTML","ec61b8e8":"train_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-sep-2021\/test.csv\")\n\ndef display_html(content):\n    display(HTML(content))\n\ndef _describe(data, col, label):\n    df = data.describe().reset_index()\n    df.columns = [col, label]\n    df = df.append({col:'unique_values', label: data.nunique()}, ignore_index=True)\n    df = df.append({col:'nans', label:data.isnull().sum()}, ignore_index=True)\n    df = df.append({col:'nans_share', label: np.round(data.isnull().sum() * 100 \/ len(data), 6)}, ignore_index=True)\n    return df\n\ndef describe_feature(name, target, train_df, test_df):\n    d0 = _describe(train_df[name], name, 'Train')\n    d1 = _describe(train_df.loc[train_df[target] == 1, name], name, 'Train Claimed')\n    d2 = _describe(train_df.loc[train_df[target] == 0, name], name, 'Train Not Claimed')\n    d3 = _describe(test_df[name], name, 'Test')\n    dd = d0.merge(d1).merge(d2).merge(d3)\n    display(dd)\n    \n    display_html('<b>Most popular values (NaN = -999):<\/b>')\n    N = 10\n    d0 = train_df[[target, name]].fillna(-999).groupby(name)[target].agg(['size','mean','sum']).reset_index().sort_values('size', ascending=False).reset_index(drop=True)\n    d1 = test_df.reset_index()[['id', name]].fillna(-999).groupby(name)['id'].count().reset_index()\n    dd = d0.merge(d1, how='left', on=name).head(N)\n    dd = dd.rename({'size':'count_in_train','mean':'mean_value_of_claim','sum':'sum_value_of_claim','id':'count_in_test'}, axis=1)\n    display(dd)\n\n    display_html('<b>Biggest claim sum values in train (NaN = -999):<\/b>')\n    dd = d0.sort_values('sum', ascending=False).reset_index(drop=True).head(N).merge(d1, how='left', on=name)\n    dd = dd.rename({'size':'count_in_train','mean':'mean_value_of_claim','sum':'sum_value_of_claim','id':'count_in_test'}, axis=1)\n    display(dd)\n\ndef correlation(col, train_df):\n    N = None #10000\n    num_vars = [feature for feature in train_df.columns if train_df[feature].dtype != 'object']\n    df_sample = train_df.head(N) if N is not None else train_df.copy()\n    corrs = df_sample[num_vars].corrwith(df_sample[col]).reset_index().sort_values(0, ascending=False).reset_index(drop=True).rename({'index':'feature_name', 0: f'correlation with {col}'}, axis=1)\n    display_html('<b>Most correlated values with ' + col + ':<\/b>')\n    corr_df = pd.concat([corrs.head(6), corrs.dropna().tail(5)])\n    display_html(corr_df.to_html(escape=False))\n    \ndef dump_feature_details(feature_name, target, train_df, test_df):\n    display_html(f\"<h2>Feature Name: {feature_name}<\/h2>\")\n    describe_feature(feature_name, target, train_df, test_df)\n    correlation(feature_name, train_df)\n    \n\ndef plot_point_train_test_side_by_side_w_color_based_on_target(train_df, test_df, feature_name, figsize=(20, 4)):\n    fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize=figsize, sharey=True)\n    N = 5000\n    train_df = train_df[0: N]\n    test_df = test_df[0: N]\n    train_df[train_df[target] == 0][feature_name].plot(\n        style=\".\",\n        alpha=0.3,\n        ax=ax1,\n        color=\"blue\",\n    )\n    train_df[train_df[target] == 1][feature_name].plot(\n        style=\".\",\n        alpha=0.2,\n        ax=ax1,\n        color=\"orange\",\n    )\n    test_df[feature_name].plot(\n        style=\".\",\n        alpha=0.2,\n        ax=ax2,\n        color=\"green\",\n    )\n    ax1.set_title(f\"{feature_name} train [First {N} rows] (blue=no-claim, orange=claim)\")\n    ax2.set_title(f\"{feature_name} test [First {N} rows] (green)\")\n    plt.ylabel(f\"Value of {feature_name}\")\n    plt.show()\n    \n\ndef plot_hist_train_test_overlapping(\n    df_train, df_test, feature_name, kind=\"hist\", figsize=(10, 10), bins=100\n):\n    \"\"\"\n    Plot histogram for a particular feature both for train and test.\n\n    kind : Type of the plot\n\n    \"\"\"\n    df_train[feature_name].plot(\n        kind=kind,\n        figsize=figsize,\n        label=\"train\",\n        bins=bins,\n        alpha=0.4,\n        color=\"blue\",\n        title=f\"Train vs Test {feature_name} distribution\",\n    )\n    df_test[feature_name].plot(\n        kind=\"hist\",\n        figsize=figsize,\n        label=\"test\",\n        bins=bins,\n        alpha=0.4,\n        color=\"orange\",\n    )\n    plt.legend()\n    plt.show()\n\ndef plot_boxh_train_test_overlapping(\n    train_df, test_df, feature_name, kind=\"box\", log=False, figsize=(10, 4)\n):\n    \"\"\"\n    Box plot train and test\n    \"\"\"\n    fig, ((ax1, ax2)) = plt.subplots(2, 1, sharex=True, figsize=figsize)\n\n    ax1 = train_df[feature_name].plot(\n        kind=\"box\",\n        vert=False,\n        ax=ax1,\n        subplots=False,\n        label=\"train\",\n        title=f\"Distribution of {feature_name}\",\n    )\n    ax2 = test_df[feature_name].plot(kind=\"box\", vert=False, label=\"test\", ax=ax2)\n    plt.show()\n    \ndef plot_point_train_test_side_by_side(train_df, test_df, feature_name, target, figsize=(20, 4)):\n    fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize=figsize, sharey=True)\n    N = 5000\n    train_df = train_df[0: N]\n    test_df = test_df[0: N]\n    train_df[train_df[target] == 0][feature_name].plot(\n        style=\".\",\n        alpha=0.3,\n        ax=ax1,\n        color=\"blue\",\n    )\n    train_df[train_df[target] == 1][feature_name].plot(\n        style=\".\",\n        alpha=0.2,\n        ax=ax1,\n        color=\"orange\",\n    )\n    test_df[feature_name].plot(\n        style=\".\",\n        alpha=0.2,\n        ax=ax2,\n        color=\"green\",\n    )\n    ax1.set_title(f\"{feature_name} train [First {N} rows] (blue=no-claim, orange=claim)\")\n    ax2.set_title(f\"{feature_name} test [First {N} rows] (green)\")\n    plt.ylabel(f\"Value of {feature_name}\")\n    plt.show()","f2272201":"target = 'claim'\ndisplay_html(f\"<h2>Target Variable:  {target}<\/h2>\")\ndisplay_html('This is target column.')\ndf = train_df[target].value_counts().reset_index().rename({'index':'Value','claim':'Count'}, axis=1)\ndf['Share'] = np.round(df['Count'] * 100 \/ df['Count'].sum(), 6)\ndisplay(df)\ncorrelation(target, train_df)","eee5c414":"target = \"claim\"\nfor feature_name in train_df.drop([\"id\", \"claim\"], axis=1)[0: 2]:\n    dump_feature_details(feature_name, target, train_df, test_df)\n    plot_point_train_test_side_by_side(train_df, test_df, feature_name=feature_name, target=target, figsize=(20, 3))\n    plot_hist_train_test_overlapping(train_df, test_df, feature_name, figsize=(20, 3), bins=500)\n    plot_boxh_train_test_overlapping(train_df=train_df, test_df=test_df, feature_name=feature_name, figsize=(20, 3))","e0770863":"# One stop shop to understand behavior of all the features.\n\n## This notebook captures:\n\n### For the traget (claim):\n- Distribution of claim & no-claim in train\n- Most correlated features\n\n### For each feature:\n- Statistics across train (with claim), train (no-claim), test\n- Most popular values. \n    - For each value, number of occurrences in train and test, sum of the claim and mean of the claim\n- Biggest claim sum values in train\n- Most correlated features\n\n#### This work is based on the following work by Kaggle GM alijs (@alijs1):\n\nhttps:\/\/www.kaggle.com\/alijs1\/ieee-transaction-columns-reference"}}