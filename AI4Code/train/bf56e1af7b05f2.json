{"cell_type":{"1f5994e1":"code","7f7f1bcf":"code","0108ba5d":"code","160b0b7a":"code","2f17656c":"code","a8b6a966":"code","968feb08":"code","f8e4e74c":"code","0cc682d4":"code","0f473eac":"code","ed0d0011":"code","d1058d9c":"code","e055981f":"code","a9365c76":"code","abe81c9f":"code","5e09c6bc":"code","1df8b30b":"code","e361f665":"code","7a10843d":"code","85f4f7c1":"code","36492bc8":"code","9e8692bd":"code","8d03f6c7":"code","994ded06":"code","9888423e":"code","18cef2d0":"markdown"},"source":{"1f5994e1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nsns.set(style='white', palette='deep')\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7f7f1bcf":"#Importing dataset\ndf = pd.read_csv('\/kaggle\/input\/fuel-consumption\/FuelEconomy.csv')\ndf.head()","0108ba5d":"#Analysing dataset with padas profiling\nfrom pandas_profiling import ProfileReport\nprofile = ProfileReport(df, title='Fuel Consumption Datasets', html={'style':{'full_width':True}})","160b0b7a":"profile","2f17656c":"#Dataset info\ndf.info()","a8b6a966":"#Dataset statistic\ndf.describe()","968feb08":"#Plotting features with matplotlib\nfig=plt.figure(figsize=(10,10))\nax = fig.add_subplot(1,1,1)\nax.set_title('Fuel Economy', fontsize=15)\nax.scatter(df['Horse Power'].values,df['Fuel Economy (MPG)'].values,marker='o', color='r', alpha=1, linewidth=1, \n            edgecolor='k', label='one')\nax.set_xlabel('{} (HP)'.format(df.columns[0]), fontsize=15)\nax.set_ylabel('{} (MPG)'.format(df.columns[1]), fontsize=15)\nax.grid(b=True, which='major', linestyle='--')\nax.tick_params(axis='both', labelsize=15, labelcolor='k')","f8e4e74c":"#Plotting features with seaborn\nsns.jointplot(x=df.columns[0], y=df.columns[1], data=df)\nsns.pairplot(df)\nsns.lmplot(x=df.columns[0], y=df.columns[1], data=df, palette='deep')","0cc682d4":"#Splitting Data\nX=df.drop('Fuel Economy (MPG)', axis=1)\ny=df['Fuel Economy (MPG)']","0f473eac":"#Splitting the Dataset into the training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nX_train.shape, X_test.shape, y_train.shape,y_test.shape","ed0d0011":"#Feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nX_train = pd.DataFrame(sc_x.fit_transform(X_train), columns=X.columns.values)\nX_test = pd.DataFrame(sc_x.transform(X_test), columns=X.columns.values)","d1058d9c":"## Multiple Linear Regression Regression\nfrom sklearn.linear_model import LinearRegression\nlr_regressor = LinearRegression(fit_intercept=True)\nlr_regressor.fit(X_train, y_train)\n\nprint('Linear Model Coefficient (m): ', lr_regressor.coef_)\nprint('Linear Model Coefficient (b): ', lr_regressor.intercept_)","e055981f":"# Predicting Test Set Multiple Linear Regression Regression\ny_pred = lr_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nresults = pd.DataFrame([['Multiple Linear Regression', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])","a9365c76":"#Plotting Train set and predictions\nplt.scatter(X_train, y_train, color = 'gray')\nplt.plot(X_train, lr_regressor.predict(X_train), color = 'red')\nplt.ylabel('{} (MPG)'.format(df.columns[1]))\nplt.xlabel('{} (HP)'.format(df.columns[0]))\nplt.title('Fuel Economy (Training dataset)')","abe81c9f":"#Plotting Test set and predictions\nplt.scatter(X_test, y_test, color = 'gray')\nplt.plot(X_test, lr_regressor.predict(X_test), color = 'red')\nplt.ylabel('{} (MPG)'.format(df.columns[1]))\nplt.xlabel('{} (HP)'.format(df.columns[0]))\nplt.title('Fuel Economy (Test dataset)')","5e09c6bc":"## Polynomial Regressor\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 2)\nX_poly = poly_reg.fit_transform(X_train)\nlr_poly_regressor = LinearRegression(fit_intercept=True)\nlr_poly_regressor.fit(X_poly, y_train)\n\n# Predicting Test Set\ny_pred = lr_poly_regressor.predict(poly_reg.fit_transform(X_test))\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Polynomial Regression', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","1df8b30b":"## Decision Tree Regression\nfrom sklearn.tree import DecisionTreeRegressor\ndt_regressor = DecisionTreeRegressor(random_state=0)\ndt_regressor.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = dt_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Decision Tree Regression', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","e361f665":"## Random Forest Regression\nfrom sklearn.ensemble import RandomForestRegressor\nrf_regressor = RandomForestRegressor(n_estimators=300, random_state=0)\nrf_regressor.fit(X_train,y_train)\n\n# Predicting Test Set\ny_pred = rf_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Random Forest Regression', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","7a10843d":"## Ada Boosting\nfrom sklearn.ensemble import AdaBoostRegressor\nad_regressor = AdaBoostRegressor()\nad_regressor.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = ad_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['AdaBoost Regressor', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","85f4f7c1":"##Gradient Boosting\nfrom sklearn.ensemble import GradientBoostingRegressor\ngb_regressor = GradientBoostingRegressor()\ngb_regressor.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = gb_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['GradientBoosting Regressor', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","36492bc8":"##Xg Boosting\nfrom xgboost import XGBRegressor\nxgb_regressor = XGBRegressor()\nxgb_regressor.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = xgb_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['XGB Regressor', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)","9e8692bd":"##Ensemble Voting regressor\nfrom sklearn.ensemble import VotingRegressor\nvoting_regressor = VotingRegressor(estimators= [('lr', lr_regressor),\n                                                  ('lr_poly', lr_poly_regressor),\n                                                  ('dt', dt_regressor),\n                                                  ('rf', rf_regressor),\n                                                  ('ad', ad_regressor),\n                                                  ('gr', gb_regressor),\n                                                  ('xg', xgb_regressor)])\n\nfor clf in (lr_regressor,lr_poly_regressor,dt_regressor,\n            rf_regressor, ad_regressor,gb_regressor, xgb_regressor, voting_regressor):\n    clf.fit(X_train,y_train)\n    y_pred = clf.predict(X_test)\n    print(clf.__class__.__name__, metrics.r2_score(y_test, y_pred))\n\n# Predicting Test Set\ny_pred = voting_regressor.predict(X_test)\nfrom sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nr2 = metrics.r2_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Ensemble Voting', mae, mse, rmse, r2]],\n               columns = ['Model', 'MAE', 'MSE', 'RMSE', 'R2 Score'])\n\nresults = results.append(model_results, ignore_index = True)  ","8d03f6c7":"#The Best Classifier\nprint('The best regressor is:')\nprint('{}'.format(results.sort_values(by='R2 Score',ascending=False).head(5)))","994ded06":"#Applying K-fold validation\nfrom sklearn.model_selection import cross_val_score\ndef display_scores (scores):\n    print('Scores:', scores)\n    print('Mean:', scores.mean())\n    print('Standard:', scores.std())\n\nlin_scores = cross_val_score(estimator=lr_poly_regressor, X=X_train, y=y_train, \n                             scoring= 'neg_mean_squared_error',cv=10)\nlin_rmse_scores = np.sqrt(-lin_scores)\ndisplay_scores(lin_rmse_scores)","9888423e":"# Analyzing Coefficients\npd.concat([pd.DataFrame(X_train.columns, columns = [\"features\"]),\n           pd.DataFrame(np.transpose(lr_poly_regressor.coef_), columns = [\"coef\"])\n           ],axis = 1)","18cef2d0":"# Model Building \n## Comparing Models"}}