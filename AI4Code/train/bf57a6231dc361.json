{"cell_type":{"a51ad0c0":"code","ef03c851":"code","6042439e":"code","465b6635":"code","053dc58d":"code","91c08878":"code","e1420a71":"code","8100e05f":"code","f72de4f9":"code","bed58c8d":"code","a67f8700":"code","bd64d946":"code","c9ff3bd4":"code","4e17c443":"markdown","95ce299e":"markdown","4f4c3d52":"markdown"},"source":{"a51ad0c0":"from fastai.vision.all import *","ef03c851":"input_path = Path(\"..\/input\/digit-recognizer\/\")\ntrain = pd.read_csv(input_path\/\"train.csv\")","6042439e":"class NumberDataset:\n    def __init__(self, data, transform):\n        self.data = data.reset_index(drop=True)\n        self.trans = transform\n    \n    def __len__(self):\n        return self.data.shape[0]\n    \n    def __getitem__(self, index):\n        \n        d = self.data.iloc[index, 1:].values.reshape(1, 28, 28)\n        \n        if self.trans:\n            d = self.trans(tensor(d)\/255)\n        else:\n            d = tensor(d)\/255\n        \n        y = self.data.iloc[index, 0]\n        \n        return d, tensor(y)","465b6635":"def get_dls(train_idx, valid_idx, \n            trans_train=None, \n            trans_valid=None,\n            device=\"cpu\"):\n    \n    train_ds = NumberDataset(train.iloc[train_idx, :], trans_train)\n    valid_ds = NumberDataset(train.iloc[valid_idx, :], trans_valid)\n\n    train_dl = DataLoader(train_ds, bs=256)\n    valid_dl = DataLoader(valid_ds, bs=512)\n\n    return DataLoaders(train_dl, valid_dl).to(device)","053dc58d":"from torchvision import transforms\n\ntrans_train = transforms.Compose([\n    transforms.Resize(64),\n    transforms.RandomResizedCrop(40, scale=(0.3, 1.0)),\n    transforms.RandomErasing(),\n    transforms.RandomRotation(20)\n])\n\ntrans_valid = transforms.Compose([\n    transforms.Resize(40)\n])\n\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntrain_idx, valid_idx = RandomSplitter()(train)\ndls = get_dls(train_idx, valid_idx, \n              trans_train=trans_train, \n              trans_valid=trans_valid,\n              device=device)","91c08878":"model = nn.Sequential(\n    ConvLayer(1, 32),\n    ConvLayer(32, 64),\n    nn.MaxPool2d(3),\n    ConvLayer(64, 128),\n    ConvLayer(128, 256),\n    nn.MaxPool2d(3),\n    ConvLayer(256, 512),\n    nn.AdaptiveAvgPool2d(1),\n    Flatten(), \n    nn.Linear(512, 256),\n    nn.BatchNorm1d(256),\n    nn.ReLU(),\n    nn.Dropout(0.5),\n    nn.Linear(256, 10)\n).to(device)","e1420a71":"learn = Learner(dls, model, metrics=accuracy, \n                loss_func=nn.CrossEntropyLoss(),\n                cbs=EarlyStoppingCallback(patience=5))","8100e05f":"learn.lr_find()","f72de4f9":"learn.fit_one_cycle(50, 1e-2)","bed58c8d":"test = pd.read_csv(input_path\/\"test.csv\")","a67f8700":"class TestDS(NumberDataset):\n    def __getitem__(self, index):\n        \n        d = self.data.iloc[index, :].values.reshape(1, 28, 28)\n        d = self.trans(tensor(d)\/255)\n        return d, tensor(0)\n\n    \ntrans_test = transforms.Compose([\n    transforms.Resize(40)\n])\ntest_ds = TestDS(test, trans_test)\ntest_dl = DataLoader(test_ds, bs=256, device=device)","bd64d946":"preds, targ = learn.get_preds(dl=test_dl)","c9ff3bd4":"sub = pd.read_csv(input_path\/\"sample_submission.csv\")\nsub[\"Label\"] = np.argmax(preds, axis=1)\nsub.to_csv(\"submission.csv\", index=False)","4e17c443":"# Build and Train the model","95ce299e":"# Make prediction on the test set","4f4c3d52":"# Prepare our training data"}}