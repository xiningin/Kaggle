{"cell_type":{"7be97865":"code","08be9268":"code","d4e6d16e":"code","9176d833":"code","b834989b":"code","6762c758":"code","87f4dbee":"code","bd3d2ff2":"code","32c3b0d5":"code","ebb1d299":"code","a9738bba":"code","f83d5152":"code","04201efe":"code","27b87cfa":"code","0e3536a6":"code","64ec7dfb":"code","c4edeeca":"code","49ca1609":"code","593183a9":"code","599e8c36":"code","0ac2d8f0":"code","974eedd6":"code","9c789f20":"code","a359a8f4":"code","0ac7ded7":"code","9e25050e":"code","b0853809":"code","e951ffb0":"code","5d5b538b":"code","d1df8fd2":"code","9fa9c73e":"code","58cbd3a9":"code","2229e608":"code","3cc46676":"code","8ed011a3":"code","d45c9a2a":"code","7d99cb9f":"code","3392066a":"code","b5ad5b2b":"code","d3967c3a":"code","51e1f5ba":"code","f23270cc":"code","36f42847":"code","de009ab5":"code","94490426":"code","2757d7d4":"code","6977e9d9":"code","f78c0d2c":"code","1f347f54":"code","c41da269":"code","47c645e3":"code","984a4921":"code","5bf06a96":"code","2705e3d7":"code","27fc83a0":"code","74aeaaad":"code","b3a2853f":"code","8a3e0aff":"code","b4f34592":"code","a6e87d62":"code","03cb33b9":"code","46a53ca9":"code","d461a742":"markdown","85aabcdc":"markdown","06ec67a6":"markdown","66023e1c":"markdown","82135090":"markdown","89c4356e":"markdown","baf7440b":"markdown","b35a8648":"markdown","6353e1b0":"markdown","ab64f66e":"markdown","fb84d66d":"markdown","262a456d":"markdown","6d11787d":"markdown","138efa7b":"markdown","c8d61020":"markdown","b5523c96":"markdown","963dc4a1":"markdown","e727e9ac":"markdown","ec9965bd":"markdown","bb91c950":"markdown","d1b97eeb":"markdown","bbfaee24":"markdown","7b8a5a7c":"markdown","31cef3df":"markdown","622b06ea":"markdown","97375ce1":"markdown","18143724":"markdown","58db4a69":"markdown","8c4e4896":"markdown","229a4a87":"markdown","33601062":"markdown","839176ff":"markdown"},"source":{"7be97865":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler ,LabelEncoder\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn import svm \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.neighbors import KNeighborsClassifier \nfrom sklearn.naive_bayes import GaussianNB \nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.model_selection import train_test_split \nfrom sklearn import metrics \nfrom sklearn.metrics import confusion_matrix ,classification_report\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","08be9268":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_pass=train.shape[0]","d4e6d16e":"train.head()","9176d833":"train.describe()","b834989b":"train.describe(include='O')","6762c758":"train_data=train.copy()","87f4dbee":"Pclass=pd.DataFrame()\nPclass['Total Passinger']=train_data.groupby('Pclass')['Survived'].size()\nPclass['Solo Passinger']=[train_data.loc[(train_data.SibSp== 0)&(train_data.Parch== 0)]['Pclass'].value_counts()[1],\n                         train_data.loc[(train_data.SibSp== 0)&(train_data.Parch== 0)]['Pclass'].value_counts()[2],\n                         train_data.loc[(train_data.SibSp== 0)&(train_data.Parch== 0)]['Pclass'].value_counts()[3]]\nPclass['Family_Size']=Pclass['Total Passinger']-Pclass['Solo Passinger']\nPclass['median Age']=train_data.groupby('Pclass').median()['Age']\nPclass['(Sex)female']=train_data.groupby(['Sex','Pclass']).median()['Age']['female']\nPclass['(Sex)male']=train_data.groupby(['Sex','Pclass']).median()['Age']['male']\nPclass['Mean Fare']=train_data.groupby('Pclass').mean()['Fare']\nPclass['Survived']=train_data.groupby('Pclass')['Survived'].value_counts().unstack()[1]\nPclass['Not Survived']=train_data.groupby('Pclass')['Survived'].value_counts().unstack()[0]\nPclass['Survived percent']=train_data.groupby('Pclass')['Survived'].value_counts().unstack()[1]\/train.groupby('Pclass')['Survived'].size()*100\nPclass=Pclass.astype(int)\ndisplay(Pclass.style.background_gradient(cmap='YlGnBu'))","bd3d2ff2":"train_data.loc[(train_data.Age >=0)  & (train_data.Age <=9),'age_group'] = '0-9'\ntrain_data.loc[(train_data.Age >=10) &(train_data.Age <=19),'age_group'] = '10-19'\ntrain_data.loc[(train_data.Age >=20) & (train_data.Age <=29),'age_group'] = '20-29'\ntrain_data.loc[(train_data.Age >=30) & (train_data.Age <=39),'age_group'] = '30-39'\ntrain_data.loc[(train_data.Age >=40) & (train_data.Age <=49),'age_group'] = '40-49'\ntrain_data.loc[(train_data.Age >=50) & (train_data.Age <=59),'age_group'] = '50-59'\ntrain_data.loc[(train_data.Age >=60) & (train_data.Age <=69),'age_group'] = '60-69'\ntrain_data.loc[(train_data.Age >=70) & (train_data.Age <=80),'age_group'] = '70-80'","32c3b0d5":"age_group=train_data.groupby(['age_group'])['Survived'].value_counts().unstack(-2)\n\nage_group.rename(index={1: 'Survived',0:'Not-survived'}, inplace=True)\nage_group.index.name = 'Survived ?'\nage_group.columns.name = 'Age_Group'\ndisplay(age_group.style.background_gradient(cmap='YlGnBu'))","ebb1d299":"age_group=train_data.groupby(['age_group','Survived'])['Pclass'].value_counts().unstack(0)\nage_group=age_group.fillna(0)\nage_group=age_group.astype(int)\ndisplay(age_group.style.background_gradient(cmap='YlGnBu'))","a9738bba":"age_group=train_data.groupby(['age_group','Survived'])['Sex'].value_counts().unstack(0)\nage_group=age_group.fillna(0)\nage_group=age_group.astype(int)\ndisplay(age_group.style.background_gradient(cmap='YlGnBu'))","f83d5152":"age_group=train_data.groupby(['Survived','Pclass'])['Sex'].value_counts().unstack(-1)\nage_group=age_group.fillna(0)\nage_group=age_group.astype(int)\ndisplay(age_group.style.background_gradient(cmap='YlGnBu'))","04201efe":"cols=['Pclass',\"Sex\",\"SibSp\",\"Parch\",'age_group']\nData=pd.DataFrame()\nfor i in cols:\n    Data=train_data.groupby(i)['Survived'].value_counts().unstack()[1]\/train_data.groupby(i)['Survived'].size()*100\n    print('the percentage of survived %\\n', Data,'\\n------------------------------')","27b87cfa":"plt.style.use('bmh')\ndata=train_data['Survived'].value_counts()\nlabels=data.index\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.subplots_adjust(wspace=0)\nax2.set_title('Survived - UnSurvived Ratio')\nax2.pie(data,startangle=90,explode=[0,0.05],autopct='%1.1f%%',labels=['Not_Survived', 'Survived'])\nax1.bar(labels[0],data[0],color='black')\nax1.bar(labels[1],data[1],color='blue')\nax1.legend(labels=['Not_Survived', 'Survived'])\nax1.set_title('Survived - UnSurvived Count')\n\nplt.show()","0e3536a6":"data=train_data['Sex'].value_counts()\nlabels=data.index\ndata1=pd.DataFrame()\nfor i in range(labels.size):\n    data1[labels[i]]=train_data.loc[(train_data.Sex ==labels[i])]['Survived'].value_counts()\n\nX0=data1.loc[0]\nX1=data1.loc[1]\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.subplots_adjust(wspace=0)\nax2.set_title('Sex Ratio')\nax2.pie(data,explode=[0,0.05],autopct='%1.1f%%',labels=data.index)\nax1.bar(labels, X0,color='black')\nax1.bar(labels, X1,bottom=X0,color='blue')\nax1.legend(labels=['Not_Survived', 'Survived'])\nax1.set_title('Sex Count Across Survived')\nplt.show()","64ec7dfb":"data=train_data['Pclass'].value_counts()\nlabels=data.index\ndata1=pd.DataFrame()\nfor i in range(labels.size):\n    data1[labels[i]]=train_data.loc[(train_data.Pclass ==labels[i])]['Survived'].value_counts()\n\nX0=data1.loc[0]\nX1=data1.loc[1]\nplt.style.use('bmh')\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.subplots_adjust(wspace=0)\nax2.set_title('Pclass Ratio')\nax2.pie(data,explode=[0,0.05,0.05] ,autopct='%5.01f%%',labels=data.index)\nax1.bar(labels, X0,color='black')\nax1.bar(labels, X1,bottom=X0,color='blue')\nax1.legend(labels=['Not_Survived', 'Survived'])\nax1.set_title('Pclass Count Across Survived')\nplt.show()","c4edeeca":"data=train_data['Embarked'].value_counts()\nlabels=data.index\ndata1=pd.DataFrame()\nfor i in range(labels.size):\n    data1[labels[i]]=train_data.loc[(train_data.Embarked ==labels[i])]['Survived'].value_counts()\n\nX0=data1.loc[0]\nX1=data1.loc[1]\nplt.style.use('bmh')\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.subplots_adjust(wspace=0)\nax2.set_title('Pclass Ratio')\nax2.pie(data, explode=[0,0.1,0.1],autopct='%2.2f%%',labels=data.index)\nax1.bar(labels, X0,color='black')\nax1.bar(labels, X1,bottom=X0,color='blue')\nax1.legend(labels=['Not_Survived', 'Survived'])\nax1.set_title('Embarked Count Across Survived')\n\nplt.show()","49ca1609":"data=train_data['age_group'].value_counts()\nlabels=data.index\ndata1=pd.DataFrame()\nfor i in range(labels.size):\n    data1[labels[i]]=train_data.loc[(train_data.age_group ==labels[i])]['Survived'].value_counts()\n\nX0=data1.loc[0]\nX1=data1.loc[1]\nplt.style.use('bmh')\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.subplots_adjust(wspace=0)\nax2.set_title('Age-Group Ratior')\nax2.pie(data, explode=[0,0,0.03,0.03,0.03,0.03,0.03,0.03], autopct='%2.2f%%',labels=data.index)\nax1.bar(labels, X0,color='black')\nax1.bar(labels, X1,bottom=X0,color='blue')\nax1.legend(labels=['Not_Survived', 'Survived'])\nax1.set_title('Age-Group Count Across Survived')\n\nplt.show()","593183a9":"plt.figure(figsize=(12,8))\nsns.kdeplot(train_data['Age'][train_data.Pclass == 1], shade=True)\nsns.kdeplot(train_data['Age'][train_data.Pclass == 2], shade=True)\nsns.kdeplot(train_data['Age'][train_data.Pclass == 3], shade=True)\nplt.legend(['3st', '2st','1st'])\nplt.title('Pclass Age Distribution ')\nplt.show()","599e8c36":"plt.figure(figsize=(12,8))\nsns.kdeplot(train_data['Age'][train_data.Sex == 'male'], shade=True)\nsns.kdeplot(train_data['Age'][train_data.Sex == 'female'], shade=True)\nplt.legend(['Male','Female' ])\nplt.title('Sex Age Distribution ')\nplt.show()","0ac2d8f0":"plt.figure(figsize=(12,8))\nsns.kdeplot(train_data['Age'][train_data.Survived == 0], shade=True,color='black')\nsns.kdeplot(train_data['Age'][train_data.Survived == 1], shade=True,color='blue')\nplt.legend(['Not-Survived','Survived' ])\nplt.title('Survived Not-Survived Age Distribution ')\nplt.show()","974eedd6":"data1 = train_data.groupby('Sex')['Survived'].value_counts()['male']\ndata2 =train_data.groupby('Sex')['Survived'].value_counts()['female']\n\nplt.figure(figsize=(20,10))\n\nax1 = plt.subplot(121, aspect='equal')\ndata1.plot.pie(startangle=90,explode=[0,0.1],autopct='%1.1f%%',colors=['black','blue'], ax=ax1)\nax1.title.set_text('Male')\n\nax2 = plt.subplot(122, aspect='equal')\ndata2.plot.pie(startangle=90,explode=[0,0.1],autopct='%1.1f%%', colors=['blue','black'],ax=ax2)\nax2.title.set_text('Female')\n\nplt.show()","9c789f20":"f,ax=plt.subplots(1,2,figsize=(20,10))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=train_data,split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=train_data,split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","a359a8f4":"train_data.loc[(train_data.SibSp== 0)&(train_data.Parch== 0),'status']='Solo'\ntrain_data.loc[(train_data.SibSp!= 0)|(train_data.Parch!= 0),'status']='Family'","0ac7ded7":"data  =train_data['status'].value_counts()\ndata1 = train_data.groupby('status')['Survived'].value_counts()['Solo']\ndata2 =train_data.groupby('status')['Survived'].value_counts()['Family']\n\nplt.figure(figsize=(20,10))\n\nax1 = plt.subplot(121, aspect='equal')\ndata.plot.pie(startangle=90,explode=[0,0.025],autopct='%1.1f%%', ax=ax1)\nax1.title.set_text('Status Distribution Persent')\n\nax2 = plt.subplot(222, aspect='equal')\ndata1.plot.pie(startangle=90,explode=[0,0.05],autopct='%1.1f%%', colors=['black','blue'],ax=ax2)\nax2.title.set_text('Status Solo Survivie Persent')\n\nax3 = plt.subplot(224, aspect='equal')\ndata2.plot.pie(startangle=90,explode=[0,0.05],autopct='%1.1f%%', colors=['blue','black'],ax=ax3)\nax3.title.set_text('Status Family Survivie Persent')\n\nplt.show()","9e25050e":"data1 =train_data.groupby('age_group')['status'].value_counts().unstack()\ndata2 =train_data.groupby('Sex')['status'].value_counts().unstack()\n\nplt.figure(figsize=(20,10))\n\nax1 = plt.subplot(121 )\ndata1.plot(kind='bar',stacked=True,ax=ax1)\nax1.title.set_text('Status Count Across Age-group')\nax2 = plt.subplot(122 )\ndata2.plot(kind='bar',stacked=True,ax=ax2)\nax2.title.set_text('Status Count Across Sex')\n\n\nplt.show()","b0853809":"data1 =train_data.groupby('Pclass')['status'].value_counts().unstack()\ndata2 =train_data.groupby('Embarked')['status'].value_counts().unstack()\n\nplt.figure(figsize=(20,10))\n\nax1 = plt.subplot(121 )\ndata1.plot(kind='bar',stacked=True,ax=ax1)\nax1.title.set_text('Status Count Across Pclass')\n\nax2 = plt.subplot(122 )\ndata2.plot(kind='bar',stacked=True,ax=ax2)\nax2.title.set_text('Status Count Across Embarked')\n\n\nplt.show()","e951ffb0":"plt.figure(figsize=(12,8))\nsns.kdeplot(train_data['Fare'][train_data.Survived == 1], shade=True,color='blue')\nsns.kdeplot(train_data['Fare'][train_data.Survived == 0], shade=True,color='black')\nplt.legend(['Survived','Not-Survived'])\nplt.title('Survived Not-Survived Fare Distribution ')\n\nplt.show()","5d5b538b":"target=train['Survived']\nAll_Features=pd.concat([train,test]).reset_index(drop=True)\n","d1df8fd2":"All_Features['Title']=0\nfor i in All_Features:\n    All_Features['Title']=All_Features.Name.str.extract('([A-Za-z]+)\\.')     ","9fa9c73e":"All_Features['Title'].value_counts()","58cbd3a9":"others=All_Features['Title'].value_counts()[All_Features['Title'].value_counts()<10].index","2229e608":"All_Features['Title']=All_Features['Title'].replace([others],'other')\nAll_Features['Title'] = All_Features['Title'].replace('Mlle', 'Miss')\nAll_Features['Title'] = All_Features['Title'].replace('Ms', 'Miss')\nAll_Features['Title'] = All_Features['Title'].replace('Mme', 'Mrs')","3cc46676":"sns.factorplot('Pclass','Survived',col='Title',data=All_Features[:train_pass])\nplt.show()","8ed011a3":"def missing_values(data):\n    total=data.isnull().sum()\n    percent=total\/data.isnull().count()*100\n    missing_values=(pd.concat([total,percent],axis=1,keys=['Total','Precent'])).sort_values(['Total'],ascending=False)\n    missing_values=missing_values.drop((missing_values[missing_values['Total']==0]).index,0)\n    return missing_values","d45c9a2a":"display(missing_values(All_Features).head().style.background_gradient(cmap='Blues'))","7d99cb9f":"All_Features.groupby(['Sex','Pclass'])['Age'].median()","3392066a":"All_Features['Age']=All_Features.groupby(['Sex','Pclass'])['Age'].apply(lambda x:x.fillna(x.median()))","b5ad5b2b":"All_Features['Embarked'].value_counts()","d3967c3a":"All_Features['Embarked']=All_Features['Embarked'].fillna('S')","51e1f5ba":"All_Features['Fare']=All_Features.groupby(['Sex','Pclass'])['Fare'].apply(lambda x:x.fillna(x.median()))","f23270cc":"All_Features=All_Features.drop(['Cabin','Ticket','Name','PassengerId'],axis=1)","36f42847":"missing_values(All_Features).head()","de009ab5":"All_Features.loc[(All_Features.Age >=0)  & (All_Features.Age <=9),'age_group'] = 0\nAll_Features.loc[(All_Features.Age >=10) &(All_Features.Age <=19),'age_group'] = 1\nAll_Features.loc[(All_Features.Age >=20) & (All_Features.Age <=29.9),'age_group'] = 2\nAll_Features.loc[(All_Features.Age >=30) & (All_Features.Age <=39),'age_group'] = 3\nAll_Features.loc[(All_Features.Age >=40) & (All_Features.Age <=49),'age_group'] = 4\nAll_Features.loc[(All_Features.Age >=50) & (All_Features.Age <=59),'age_group'] = 5\nAll_Features.loc[(All_Features.Age >=60) & (All_Features.Age <=69),'age_group'] = 6\nAll_Features.loc[(All_Features.Age >=70) & (All_Features.Age <=80),'age_group'] = 7","94490426":"data =All_Features.groupby('Title')['age_group'].value_counts().unstack()\ndata.plot(kind='bar',stacked=True,figsize=(12,8),title='Title Count Across Age_group')\nplt.show()","2757d7d4":"All_Features['Family_Size']=All_Features['SibSp']+All_Features['Parch']\nAll_Features.loc[(All_Features.Family_Size == 0),'Solo_Passanger'] = 1\nAll_Features.loc[(All_Features.Family_Size > 0),'Solo_Passanger'] = 0","6977e9d9":"All_Features['Solo_Passanger'].value_counts()","f78c0d2c":"col=['Sex','Title','Embarked']\nfor i in col:\n    All_Features[i]=LabelEncoder().fit_transform(All_Features[i])","1f347f54":"f, ax = plt.subplots(figsize=(18, 10))\ncorrmat = All_Features.corr().sort_values(by='Survived',ascending=False)\nmask=np.triu(np.ones_like(All_Features.corr(), dtype=bool))\nsns.heatmap(corrmat, vmax=.3,annot=True,mask=mask,cmap=\"YlGnBu\")\nplt.title('Correlation Table')\nplt.show()","c41da269":"All_Features=pd.get_dummies(All_Features)\nAll_Features.head()","47c645e3":"All_Features=All_Features.drop(['Survived','Age'],axis=1)\nAll_Features_SL = StandardScaler().fit_transform(All_Features)\nprint('All_Features shape: {}'.format(All_Features.shape))","984a4921":"train=All_Features_SL[:train_pass]\ntest=All_Features_SL[train_pass:]\nprint('train shape: {}'.format(train.shape))\nprint('test shape: {}'.format(test.shape))\nprint('target shape: {}'.format(target.shape))","5bf06a96":"model = RandomForestClassifier(criterion='gini',n_estimators=1750,max_depth=7,min_samples_split=6,min_samples_leaf=6,\nmax_features='auto',oob_score=True,random_state=42,n_jobs=-1)\nmodel.fit(All_Features[:target.shape[0]],target)\n\nwith plt.style.context('dark_background'):\n    plt.figure(figsize=(12, 10))\n    features=pd.Series(model.feature_importances_,All_Features.columns).sort_values(ascending=True)\n    plt.barh(features.index ,features.values,color='red')\n    plt.title('Feature Importances')\nplt.show()","2705e3d7":"x_train,x_test,y_train,y_test=train_test_split(train,target,test_size=.33,random_state=42,shuffle=True)","27fc83a0":"model=LogisticRegression()\nmodel.fit(x_train,y_train)\npred=model.predict(x_test)\nprint('Accuracy for  LogisticRegression is ',metrics.accuracy_score(pred,y_test))\nplt.figure(figsize=(10,8))\nax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test,pred), annot=True, ax = ax, fmt='g',cmap='YlGnBu') \nax.set_title('Confusion Matrix')\nplt.show()","74aeaaad":"model=svm.SVC(kernel='rbf',C=1,gamma=0.1)\nmodel.fit(x_train,y_train)\npred=model.predict(x_test)\nprint('Accuracy for rbf SVM is ',metrics.accuracy_score(pred,y_test))\n\nplt.figure(figsize=(10,8))\nax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test,pred), annot=True, ax = ax, fmt='g',cmap='YlGnBu') \nax.set_title('Confusion Matrix')\nplt.show()","b3a2853f":"model=svm.SVC(kernel='linear',C=1,gamma=0.1)\nmodel.fit(x_train,y_train)\npred=model.predict(x_test)\nprint('Accuracy for linear SVM is ',metrics.accuracy_score(pred,y_test))\n\nplt.figure(figsize=(10,8))\nax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test,pred), annot=True, ax = ax, fmt='g',cmap='YlGnBu') \nax.set_title('Confusion Matrix')\nplt.show()","8a3e0aff":"model=DecisionTreeClassifier()\nmodel.fit(x_train,y_train)\npred=model.predict(x_test)\nprint('Accuracy for DecisionTreeClassifier is ',metrics.accuracy_score(pred,y_test))\n\nplt.figure(figsize=(10,8))\nax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test,pred), annot=True, ax = ax, fmt='g',cmap='YlGnBu') \nax.set_title('Confusion Matrix')\nplt.show()","b4f34592":"model=KNeighborsClassifier() \nmodel.fit(x_train,y_train)\npred=model.predict(x_test)\nprint('Accuracy for KNeighborsClassifier is ',metrics.accuracy_score(pred,y_test))\n\nplt.figure(figsize=(10,8))\nax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test,pred), annot=True, ax = ax, fmt='g',cmap='YlGnBu') \nax.set_title('Confusion Matrix')\nplt.show()","a6e87d62":"model=KNeighborsClassifier(n_neighbors=24)\nmodel.fit(x_train,y_train)\npred=model.predict(x_test)\nprint('Accuracy for KNeighborsClassifier is ',metrics.accuracy_score(pred,y_test))\n\nplt.figure(figsize=(10,8))\nax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test,pred), annot=True, ax = ax, fmt='g',cmap='YlGnBu') \nax.set_title('Confusion Matrix')\nplt.show()","03cb33b9":"model = RandomForestClassifier(criterion='gini',n_estimators=1750,max_depth=7,min_samples_split=6,min_samples_leaf=6,\nmax_features='auto',oob_score=True,random_state=42,n_jobs=-1)\nmodel.fit(x_train,y_train)\npred=model.predict(x_test)\nprint('Accuracy for RandomForestClassifier is ',metrics.accuracy_score(pred,y_test))\n\nplt.figure(figsize=(10,7))\nax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test,pred), annot=True, ax = ax, fmt='g',cmap='YlGnBu') \nax.set_title('Confusion Matrix')\nplt.show()","46a53ca9":"from yellowbrick.classifier import classification_report\nplt.figure(figsize=(10,7))\nclassification_report(model, x_train, y_train, x_test, y_test, support=True, cmap='YlGnBu')\nplt.show()","d461a742":"![](https:\/\/titanicfacts.net\/wp-content\/uploads\/2018\/06\/titanic-promenade-deck.jpg)\n10,000 \u2013 the approximate number of light bulbs on the ship.\n\n3 \u2013 the number of engines used to power the ship, 2 outboard reciprocal engines (which could move the ship forward or backwards) and a central steam turbine engine, which ran forward only.\n\n4 \u2013 the number of decks tall at which the two main engines stood, being the largest ever built at the time.\n\n3 \u2013 the number of propellers, 2 outboard (3 x 10\u2032 blades) driven by the main reciprocal engines, and a central prop (4 x 6\u2032 blades) powered by the steam turbine engine.\n\n38 tons \u2013 the weight of the two outer propellers, which were made of bronze.\n\n22 tons \u2013 the weight of the central propeller, of a moulded construction.\n\n2 \u2013 the number of anchors.\n\n15 tons \u2013 the weight of each anchor.\n\n15 \u2013 the number of transverse water-tight bulkheads.\n\n69 feet \u2013 the length of the room in which the reciprocating engines were located.\n\n57 feet \u2013 the length of the turbine room.\n\nSo thorough are the precautions which have been taken to prevent the ship from sinking in the event of a serious accident that any two compartments may be flooded without endangering the safety of the vessel. -From the Belfast Newsletter report on the launch of Titanic, published Thursday 01 June 1911.\n\n131,428 \u2013 the official number of the ship.\n\n1,200 miles \u2013 the typical range of the Titanic\u2019s wireless equipment at night.\n\n400 miles \u2013 the typical range of the same wireless equipment during daylight hours (due to heavier use of the airwaves by other shipping).\n\n1955 \u2013 the year in which Walter Lord (1917 \u2013 2002) published A Night To Remember, his popular non-fiction account of the Titanic tragedy, released as a movie in 1958 and credited with regenerating public interest in the story, which had wained over the years.\n\nIn the creation of the Titanic myth there were two defining moments: 1912, of course, and 1955. -Steven Biel, cultural historian, on the influence of A Night To Remember\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/a\/a4\/RMS_Titanic_Ad_April_10%2C_1912.jpg\/400px-RMS_Titanic_Ad_April_10%2C_1912.jpg)\nReference -https:\/\/titanicfacts.net\/titanic-ship\/","85aabcdc":"Now let's see how Age Group and Sex affect survival chance?\n\nAnd distribution Age group in Sex","06ec67a6":"Let's take a look at the category that affected the survivor","66023e1c":"# Dataset Information ","82135090":"Let's create new feature help us to understand Data\n![](https:\/\/thebite.aisb.ro\/wp-content\/uploads\/From_a_Child_to_an_Adult-e1523822431626.jpg)","89c4356e":"Mr is the highst one thats make sense because the men %65 percent of all passenger","baf7440b":"Split Data ","b35a8648":"# Feature Engineering","6353e1b0":"Now let's see how Pclass and Sex affect survival chance?\n\nAnd distribution Pclass in Sex","ab64f66e":"20% percent of  the Age is null\n\nsex and pclass most correlation feature to age ","fb84d66d":"Create New Featue ","262a456d":"Now let's see how Age Group and Pclass affect survival chance?\n\nAnd distribution Age group in pclass","6d11787d":"Reading Data","138efa7b":"![](https:\/\/titanicfacts.net\/wp-content\/uploads\/2018\/06\/rms-titanic.jpg)","c8d61020":"# Machine Learning","b5523c96":"# Encoding categorical feature","963dc4a1":"Pclass: A proxy for socio-economic status (SES)\n\n1st = Upper\n\n2nd = Middle\n\n3rd = Lower\n\nAge: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\nSibsp: The dataset defines family relations in this way...\n\nSibling = brother, sister, stepbrother, stepsister\n\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nParch: The dataset defines family relations in this way...\n\nParent = mother, father\n\nChild = daughter, son, stepdaughter, stepson\n\nSome children travelled only with a nanny, therefore parch=0 for them","e727e9ac":"The third class is higher for the number of passengers and smaller for the age of the passengers and the lowest price %24 only cant Survived now The third class is the domestic class on the ship\n\nThe Second class is lower for the number of passenger and Median age and median Price and %47 can survive\n\nThe First class is Median for the number of passenger and higher for age and %62 can survive","ec9965bd":"# Initial Questions & Data Investigation\nDid  Pclass affect the chances of surviving?\n\nDid  Pclass affect the Passenger Total ?\n\nDid  Pclass affect the Gender?\n\n","bb91c950":"![](https:\/\/memegenerator.net\/img\/instances\/64001897\/time-to-say-goodbye.jpg)","d1b97eeb":"1-Variable Survived ______________  _______________Definition Survival \t__________ ________Key 0 = No, 1 = Yes\n\n2-Variable Pclass ______________\t_______________Definition  Ticket class __________ ________Key\t1 = 1st, 2 = 2nd, 3 = 3rd\n\n3-Variable Age ______________\t_______________Definition  \t Age in years\n\n4-Variable Sex ______________\t_______________Definition    Sex  __________ ________Key\t1 = Male, 2 = Female\n\n5-Variable Sibsp ______________\t_______________Definition  of siblings \/ spouses aboard the Titanic\n\n6-Variable Parch ______________\t_______________Definition of parents \/ children aboard the Titanic\n\n7-Variable Ticket ______________ _______________Definition\tTicket number\n\n8-Variable Fare ______________ _______________Definition\tPassenger fare\n\n9-Variable Cabin ______________\t_______________Definition\tCabin number\n\n10-Variable Embarked ______________\t_______________Definition\tPort of Embarkation __________ ________Key \tC = Cherbourg, Q = Queenstown,S = Southampton","bbfaee24":"The only time there are more survivors than those who cannot survive is in kids","7b8a5a7c":"Let's make Name columns be useful","31cef3df":"Create New featue Family Size  And Alon Passanger","622b06ea":"Did  Age Group affect the chances of surviving?","97375ce1":"now the titles distribution cross Pclass","18143724":"# Titanic Ship\n__________________________________________________________________________________\n# Introduction\n\nThe RMS Titanic was the biggest moveable man-made object of her day, a colossal presence in the water and the subject of a tragic story that fascinates us to this day. Read on for the key facts about the ship, then explore the site further for more fascinating and moving aspects of her life and loss.\n\n46,328 tons \u2013 the internal usable volume of the Titanic (referred to as the \u2018gross register tons\u2019 or GRT).\n\n\n# How long was the Titanic?\n\nThe Titanic was 882 feet 9 inches (269.1 metres) long, at the time the World\u2019s largest man-made moving object. Today, the MS Allure of the Seas is largest passenger vessel afloat, at 1,187 feet (362 metres) long.\n\n92 feet \u2013 her breadth (28 metres).\n175 feet \u2013 the height of the Titanic, from the top of the funnels to the keel (53.3 metres).","58db4a69":"only one value missing in Embarked \n\nused most value for null values","8c4e4896":"Children in the third class couldn't survive like the first and second and 0 in kids in the second class and only one in first :\nand and teenager like  Children in third class may be bad more than %65 cant Survived and second class Fifty fifty first one more than %60 cant Survived after this from the 20 to 59 age in first class survive more than People who could not 60-80 only 5 can survive\n","229a4a87":"# missing values\nchecking missing values","33601062":"Svm Linear is most high score one","839176ff":"that's it we done here\n\nthank you for your time "}}