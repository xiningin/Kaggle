{"cell_type":{"8ade099b":"code","1d448a7b":"code","bdfb05c4":"code","8aacdec8":"code","cc492cc1":"code","3f9ef2c9":"code","8babf59b":"code","dab40f66":"code","d6ff1d48":"code","c037815e":"code","2bbbb468":"code","e64cdca9":"code","21cc831b":"code","c9642bdf":"code","ed4d3470":"code","16c5ce56":"markdown","e27b8387":"markdown"},"source":{"8ade099b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d448a7b":"import numpy as np\nimport csv\nimport os.path\nimport json\n\n#https:\/\/stackoverflow.com\/questions\/26414913\/normalize-columns-of-pandas-data-frame\ndef normalize(column):\n    max_value = column.max()\n    min_value = column.min()\n    result = (column - min_value) \/ (max_value - min_value)\n    \n    return result\n\ndef readData(data_file):\n    raw_data = open(data_file,'rt')\n    data = pd.read_csv(raw_data)\n    data = data.replace(np.nan,\"\")\n    \n    return data","bdfb05c4":"SPOTIFY_SONG_DATA = \"..\/input\/spotify-dataset-19212020-160k-tracks\/data_o.csv\"","8aacdec8":"#TARGET_SONG_ATTRIBUTES = [\"acousticness\",\"danceability\",\"energy\",\"instrumentalness\",\"liveness\",\"key\",\"loudness\",\"speechiness\",\"tempo\",\"valence\"]\nTARGET_SONG_ATTRIBUTES = [\"acousticness\",\"danceability\",\"instrumentalness\",\"liveness\",\"speechiness\",\"tempo\",\"valence\"]","cc492cc1":"SONGS = readData(SPOTIFY_SONG_DATA)\nSONGS = SONGS.drop_duplicates(subset=['artists','name'],keep='first')\nprint(SONGS.shape)\n\nSONGS.head()","3f9ef2c9":"song_data = SONGS[TARGET_SONG_ATTRIBUTES]\nsong_name = SONGS[['name','artists']]\n","8babf59b":"for attr in TARGET_SONG_ATTRIBUTES:\n    song_data[attr] = normalize(SONGS[attr])\n    \nsong_data","dab40f66":"song_name","d6ff1d48":"#Create one hot encoding \n#Encode uses [\"name of song\",\"['artist']\"] as key\n#Decode uses a number as key\nENCODER = dict()\nDECODER = dict()\n\nfor i,song in enumerate(song_name.values):\n    if not (song[0],song[1]) in ENCODER:\n        ENCODER[song[0],song[1]] = i\n        DECODER[i] = song","c037815e":"def recommendSongs(song):\n    global song_name,song_data\n    \n    RECOMMENDED_SONGS = []\n    distances = []\n    \n    for pos,targ_song in enumerate(song_data.values):\n        distances.append((np.linalg.norm(song - targ_song),pos))\n    \n    distances.sort(key=lambda x:x[0])\n    AMTOFRECOMMENDEDSONGS = 5\n    for x in range(AMTOFRECOMMENDEDSONGS):\n        RECOMMENDED_SONGS.append(ENCODER[song_name.values[distances[x+1][1]][0],song_name.values[distances[x+1][1]][1]])\n\n    return RECOMMENDED_SONGS","2bbbb468":"ENCODER [('Let Me Love You (Until You Learn To Love Yourself)',\"['Ne-Yo']\")]","e64cdca9":"print(SONGS.values[17184])\ntest = song_data.values[17184]\ntest","21cc831b":"song_name.values[17184]","c9642bdf":"recommend = recommendSongs(test)\nfor song in recommend:\n    print(SONGS.values[song])","ed4d3470":"\"\"\"\n%%time\n#Get the recommended list for all the songs\n#Not optimized- will take a long time\n\n#Training data is [input song, recommended song1,recommended song2,recommended song3,recommended song4,recommended song5]\nTRAINING_DATA = []\n\nfor i,input_song in enumerate(song_data.values):\n    temp = recommendSongs(input_song)\n    TRAINING_DATA.append(temp.insert(0,song_name.values[i]))\n   \n\"\"\"   ","16c5ce56":"## Create training data\ndata will be song [attributes,recommended song1, recommended song2, recommended song3, recommended song4, recommended song5]\n\nattributes consist of [\"acousticness\",\"danceability\",\"instrumentalness\",\"liveness\",\"key\",\"loudness\",\"speechiness\",\"tempo\",\"valence\"]\n\nthe recommended songs will be the target fields and be represented with their one hot encoded representation\n","e27b8387":"# Grab, Set up and Create data"}}