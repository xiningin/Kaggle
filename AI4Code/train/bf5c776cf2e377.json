{"cell_type":{"e463296f":"code","1bf6c9c5":"code","fee0ce4a":"code","9d7ddef9":"code","c75826f7":"code","759881ff":"code","d0c772ff":"code","fce5c7ab":"code","5bf31de5":"code","529489bc":"code","c5aa05e9":"code","7cdc56b9":"code","87409736":"code","ef9f855a":"code","9adeb6ce":"code","23ff4d94":"code","e202b593":"code","dd9cb814":"code","a25f63dd":"code","cb23685b":"code","80b8ee64":"code","266c754e":"code","ccb3efe6":"code","5dbc5c5e":"code","c022c18f":"code","87ae8024":"code","e7366b7c":"code","9e3ead0f":"code","1771289a":"code","dd26d7ae":"code","981ad91f":"code","c82b1f55":"markdown","26667015":"markdown","7b4754ce":"markdown","3d73bbd5":"markdown","321e6668":"markdown","32bf8da4":"markdown","b6e64142":"markdown","5f2b151a":"markdown","8ad5e2b2":"markdown","25663f6d":"markdown","c164b8a6":"markdown","aaf6c4c0":"markdown","10256405":"markdown","1bc7595e":"markdown","fbe4f992":"markdown","508cef62":"markdown","6a73e0d2":"markdown","7d16f56f":"markdown","81b89c6b":"markdown","a989dc8f":"markdown","096b2f84":"markdown","537cb6a2":"markdown","f20964c5":"markdown","9916e53d":"markdown","16d99972":"markdown","927e1a4e":"markdown","6b999fc0":"markdown","9b7a4e75":"markdown","4e86b94b":"markdown","04d22e3f":"markdown","bcd1da99":"markdown","4bd4661b":"markdown","564a6668":"markdown","9dcf6c2b":"markdown"},"source":{"e463296f":"import pandas as pd\nimport numpy as np","1bf6c9c5":"train_data_path = \"..\/input\/digit-recognizer\/train.csv\"\ntest_data_path = \"..\/input\/digit-recognizer\/test.csv\"\nsample_submission_path = \"..\/input\/digit-recognizer\/sample_submission.csv\"","fee0ce4a":"train_data = pd.read_csv(train_data_path)","9d7ddef9":"train_data.head()","c75826f7":"# get label data\ntrain_labels = train_data.iloc[:, 0]\n\n# get image data\ntrain_images = train_data.iloc[:, 1:]","759881ff":"train_labels_onehot = pd.get_dummies(train_labels)","d0c772ff":"train_labels.head()","fce5c7ab":"train_labels_onehot.head()","5bf31de5":"train_images \/= 255.","529489bc":"train_images = train_images.values\ntrain_labels_onehot = train_labels_onehot.values","c5aa05e9":"x_train = []\nfor image in train_images:\n    image_data = image.reshape(28, 28, 1)\n    x_train.append(image_data)","7cdc56b9":"x_train = np.array(x_train)\ny_train = train_labels_onehot","87409736":"x_train.shape","ef9f855a":"y_train.shape","9adeb6ce":"from keras import models\nfrom keras import layers","23ff4d94":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, kernel_size=(2, 2), activation=\"relu\", input_shape=(28, 28, 1)))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(layers.Conv2D(64, kernel_size=(2, 2), activation=\"relu\"))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(layers.Conv2D(64, kernel_size=(2, 2), activation=\"relu\"))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.4))\nmodel.add(layers.Dense(64, activation=\"relu\"))\nmodel.add(layers.Dropout(0.4))\nmodel.add(layers.Dense(10, activation=\"softmax\"))","e202b593":"model.summary()","dd9cb814":"model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","a25f63dd":"model.fit(x_train, y_train, epochs=5, batch_size=64, verbose=0)","cb23685b":"model.save(\"digit_cnn.h5\")","80b8ee64":"test_images = pd.read_csv(test_data_path)","266c754e":"test_images = test_images.values.astype(np.float32)","ccb3efe6":"test_images \/= 255.","5dbc5c5e":"x_test = []\nfor image_data in test_images:\n    image = image_data.reshape(28, 28, 1)\n    x_test.append(image)","c022c18f":"x_test = np.array(x_test)","87ae8024":"predictions = model.predict(x_test)","e7366b7c":"predictions[0]","9e3ead0f":"labels = np.argmax(predictions, axis=1)","1771289a":"sample = pd.read_csv(sample_submission_path)","dd26d7ae":"sample[\"Label\"] = labels\nsubmission = sample","981ad91f":"submission.to_csv(\"submission.csv\", index=False)","c82b1f55":"### Load Sample Submission","26667015":"### Scaling Data","7b4754ce":"### Prepare Test Data","3d73bbd5":"### Train Model","321e6668":"## Create Submission CSV","32bf8da4":"### Replace Sample to Predict Data","b6e64142":"### OnehotEncoding","5f2b151a":"## Predict Test Data","8ad5e2b2":"### Import Keras","25663f6d":"#### Convert to numpy array","c164b8a6":"### Convert List to Array","aaf6c4c0":"### split the data into training and testing","10256405":"# Train Data","1bc7595e":"#### Load Test Data","fbe4f992":"#### Scaling Test Data","508cef62":"## Get Data Path","6a73e0d2":"# Preprocessing Datasets","7d16f56f":"#### Predict","81b89c6b":"### Create Train Datasets","a989dc8f":"#### before onehot encoding","096b2f84":"#### Create Test Data","537cb6a2":"### Predict Test Data","f20964c5":"### Set optimizer and loss","9916e53d":"#### Get Max Index","16d99972":"### Model Summary","927e1a4e":"### Load train data","6b999fc0":"### Save Model","9b7a4e75":"## Train CNN Model with Keras","4e86b94b":"# Import Libraries","04d22e3f":"### Define Model","bcd1da99":"### Convert Data to CSV","4bd4661b":"### Convert to numpy arrray","564a6668":"#### after onehot encoding","9dcf6c2b":"#### Convert List to Array"}}