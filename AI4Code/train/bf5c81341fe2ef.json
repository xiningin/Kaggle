{"cell_type":{"c3278aab":"code","5991a1ca":"code","37666960":"code","203ff876":"code","b5023cae":"code","039ad3a5":"code","5ffc9df3":"code","fca1d722":"code","438a1707":"code","e8297c71":"code","7c3562ac":"code","1142881d":"code","414babd5":"code","afdefc6e":"code","0b953d53":"code","955f434a":"code","0d04f2b4":"code","4f9420f4":"code","51851ae5":"code","8bc2c678":"code","b537e82d":"code","505049b3":"code","51b063ea":"code","6aa63f14":"code","44d7f50a":"code","96864213":"code","998c2c1e":"code","5f6637c7":"code","cba8b112":"code","d2f9593c":"code","7e8ddf72":"code","86d87ed6":"code","5ed16a4b":"code","25c55b15":"code","66986b9e":"code","1ad87b36":"code","a5cacca5":"code","356329f5":"code","d60ac267":"code","6d77708f":"markdown","3d003cd0":"markdown","dd05db68":"markdown","c488a655":"markdown","c7504d4c":"markdown","424ca637":"markdown","9fa42634":"markdown","5b24d7c6":"markdown","de9477e3":"markdown","d9b2017a":"markdown","0fc2b868":"markdown","ea074492":"markdown","1eea987e":"markdown","b59c7d66":"markdown","5af67059":"markdown","978d2d24":"markdown","27c64a44":"markdown","96baddd7":"markdown"},"source":{"c3278aab":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\n\nimport plotly.express as px \nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Configs\npd.options.display.float_format = '{:,.4f}'.format\nsns.set(style=\"whitegrid\")\nplt.style.use('seaborn')\nseed = 42\nnp.random.seed(seed)\nrandom.seed(seed)","5991a1ca":"file_path = '\/kaggle\/input\/co2-ghg-emissionsdata\/co2_emission.csv'\ndf = pd.read_csv(file_path)\nprint(\"DataSet = {:,d} rows and {} columns\".format(df.shape[0], df.shape[1]))\n\nprint(\"\\nAll Columns:\\n=>\", df.columns.tolist())\n\nquantitative = [f for f in df.columns if df.dtypes[f] != 'object']\nqualitative = [f for f in df.columns if df.dtypes[f] == 'object']\n\nprint(\"\\nStrings Variables:\\n=>\", qualitative,\n      \"\\n\\nNumerics Variables:\\n=>\", quantitative)\n\ndf.head()","37666960":"def eda_categ_feat_desc_plot(series_categorical, title = \"\", fix_labels=False):\n    series_name = series_categorical.name\n    val_counts = series_categorical.value_counts()\n    val_counts.name = 'quantity'\n    val_percentage = series_categorical.value_counts(normalize=True)\n    val_percentage.name = \"percentage\"\n    val_concat = pd.concat([val_counts, val_percentage], axis = 1)\n    val_concat.reset_index(level=0, inplace=True)\n    val_concat = val_concat.rename( columns = {'index': series_name} )\n    \n    fig, ax = plt.subplots(figsize = (12,4), ncols=2, nrows=1)\n    if(title != \"\"):\n        fig.suptitle(title, fontsize=18)\n        fig.subplots_adjust(top=0.8)\n\n    s = sns.barplot(x=series_name, y='quantity', data=val_concat, ax=ax[0])\n    if(fix_labels):\n        val_concat = val_concat.sort_values(series_name).reset_index()\n    \n    for index, row in val_concat.iterrows():\n        s.text(row.name, row['quantity'], '{:,d}'.format(row['quantity']), color='black', ha=\"center\")\n\n    s2 = val_concat.plot.pie(y='percentage', autopct=lambda value: '{:.2f}%'.format(value),\n                             labels=val_concat[series_name].tolist(), legend=None, ax=ax[1],\n                             title=\"Percentage Plot\")\n\n    ax[1].set_ylabel('')\n    ax[0].set_title('Quantity Plot')\n\n    plt.show()","203ff876":"import squarify \nimport matplotlib\n\ndef tree_map_cat_feat(dfr, column, title='', threshold=1, figsize=(18, 6), alpha=.7):\n    plt.figure(figsize=figsize)\n    df_series = dfr[column].value_counts()\n    df_mins = df_series[ df_series <= threshold ].sum()\n    df_series = df_series[ df_series > threshold ]\n    df_series['Others'] = df_mins\n    percentages = df_series \/ df_series.sum()\n    alist, mini, maxi = [], min(df_series), max(df_series)\n    for i in range(len(df_series)):\n        alist.append( df_series.index[i] + '\\n{:.2%}'.format(percentages[i]) )\n    cmap = matplotlib.cm.viridis\n    norm = matplotlib.colors.Normalize(vmin=mini, vmax=maxi)\n    colors = [cmap(norm(i)) for i in df_series]\n    squarify.plot(sizes=df_series.values, label=alist, color=colors, alpha=alpha)\n    plt.axis('off')\n    plt.title(title)\n    plt.show()","b5023cae":"def eda_numerical_feat(series, title=\"\", with_label=True, number_format=\"\", show_describe=False, size_labels=10):\n    f, (ax1, ax2) = plt.subplots(ncols=2, figsize=(18, 5), sharex=False)\n    if(show_describe):\n        print(series.describe())\n    if(title != \"\"):\n        f.suptitle(title, fontsize=18)\n    sns.distplot(series, ax=ax1)\n    sns.boxplot(series, ax=ax2)\n    if(with_label):\n        describe = series.describe()\n        labels = { 'min': describe.loc['min'], 'max': describe.loc['max'], \n              'Q1': describe.loc['25%'], 'Q2': describe.loc['50%'],\n              'Q3': describe.loc['75%']}\n        if(number_format != \"\"):\n            for k, v in labels.items():\n                ax2.text(v, 0.3, k + \"\\n\" + number_format.format(v), ha='center', va='center', fontweight='bold',\n                         size=size_labels, color='white', bbox=dict(facecolor='#445A64'))\n        else:\n            for k, v in labels.items():\n                ax2.text(v, 0.3, k + \"\\n\" + str(v), ha='center', va='center', fontweight='bold',\n                     size=size_labels, color='white', bbox=dict(facecolor='#445A64'))\n    plt.show()","039ad3a5":"def eda_cat_top_slice_count(s, start=1, end=None, rotate=0):\n    # @rotate: 45\/80; \n    column, start, threshold = s.name, start - 1, 30\n    s = df[column].value_counts()\n    lenght = len(s)\n    if(end is None):\n        end = lenght if lenght <= threshold else threshold\n    s = s.reset_index()[start:end]\n    s = s.rename(columns = {column: 'count'}).rename(columns = {'index': column,})\n    fig, ax = plt.subplots(figsize = (12,4))\n    barplot = sns.barplot(x=s[column], y=s['count'], ax=ax)\n    # sort by name\n    s = s.sort_values(column).reset_index()\n    for index, row in s.iterrows():\n        barplot.text(row.name, row['count'], '{:,d}'.format(row['count']), color='black', ha=\"center\")\n    ax.set_title('Quantity Plot to {}. Top {}\u00b0-{}\u00b0'.format(column, start+1, end))\n    plt.xticks(rotation=rotate)\n    plt.show()","5ffc9df3":"from bokeh.io import show\nfrom bokeh.plotting import figure\nfrom bokeh.models import LinearColorMapper, HoverTool, ColorBar\nfrom bokeh.palettes import magma,viridis,cividis, inferno\nfrom bokeh.models import WheelZoomTool, BoxZoomTool, ResetTool\n\ndef eda_us_states_geo_plot(geosource, df_in, title, column, state_column, low = -1, high = -1, palette = -1, plot_width=500):\n    \"\"\"\n    Generate Bokeh Plot to Brazil States:\n        geosource: GeoJSONDataSource of Bokeh\n        df_in: DataSet before transformed in GeoJSONDataSource\n        title: title of plot\n        column: column of df_in to be placed values in geoplot\n        state_column: indicate column with names of States\n        low = (optional) min value of range of color spectre\n        high = (optional) max values of range of color spectre\n        palette: (optional) can be magma, viridis, civis, inferno e etc.. (with number os colors)\n            Example: cividis(8) (8 colors to classify), cividis(256)  (256, more colors to clasify)\n    \"\"\"\n    if high == -1:\n        high = max(df_in[column])\n    if low == -1:\n        low = min(df_in[column])\n    if palette == -1:\n        palette = inferno(24)\n        \n    palette = palette[::-1]\n    color_mapper = LinearColorMapper(palette = palette, low = low, high = high)\n    \n    hover = HoverTool(tooltips = [ ('State','@{'+'name'+'}'), (column, '@{'+column+'}{%.2f}')],\n                  formatters={'@{'+column+'}' : 'printf'})\n\n    color_bar = ColorBar(color_mapper=color_mapper, label_standoff=8, width = 450, height = 20, \n                         border_line_color=None, location = (0,0),  orientation = 'horizontal')\n\n    p = figure(title = title, plot_height = 400, plot_width = plot_width, tools = [hover])\n\n    p.xgrid.grid_line_color = None\n    p.ygrid.grid_line_color = None\n    p.xaxis.visible = False\n    p.yaxis.visible = False\n\n    p.patches('xs','ys', source = geosource, line_color = 'black', line_width = 0.25,\n              fill_alpha = 1, fill_color = {'field' : str(column), 'transform' : color_mapper})\n\n    p.add_layout(color_bar, 'below')\n    p.add_tools(WheelZoomTool())\n    p.add_tools(ResetTool())\n    return p   \n\nfrom bokeh.palettes import Turbo256 \nfrom bokeh.models import ColumnDataSource\nfrom bokeh.transform import factor_cmap\nfrom bokeh.palettes import magma,viridis,cividis, inferno\n\ndef eda_bokeh_horiz_bar_ranked(df, column_target, title = '', int_top = 3, second_target = 'state'):\n    \"\"\"\n    Generate Bokeh Plot ranking top fists and last value:\n        df: data_frame\n        column_targe: a column of df inputed\n        title: title of plot\n        int_top: number of the tops\n        column: column of df_in to be placed values in geoplot\n        second_targe = 'state'\n    \"\"\"\n    ranked = df.sort_values(by=column_target, ascending=False).reset_index(drop = True)\n    ranked = ranked.dropna()\n    top_int = int_top\n    # top = ranked[:top_int].append(ranked[-top_int:]) # Bottom an Top\n    top = ranked[:top_int+top_int]# only Top\n    top.index = top.index + 1\n    source = ColumnDataSource(data=top)\n    list_second_target = source.data[second_target].tolist()\n    index_label = list_second_target[::-1] # reverse order label\n\n    p = figure(plot_width=500, plot_height=400, y_range=index_label, \n                toolbar_location=None, title=title)   \n\n    p.hbar(y=second_target, right=column_target, source=source, height=0.85, line_color=\"#000000\",\n          fill_color=factor_cmap(second_target, palette=inferno(24), factors=list_second_target))\n    p.x_range.start = 0  # start value of the x-axis\n\n    p.xaxis.axis_label = \"value of '\" + column_target + \"'\"\n\n    hover = HoverTool()  # initiate hover tool\n    hover.tooltips = [(\"Value\",\"@{\" + column_target + \"}{%.2f}\" ),(\"Ranking\",\"@index\u00b0\")]\n    hover.formatters={'@{'+column_target+'}' : 'printf'}\n\n    hover.mode = 'hline' # set the mode of the hover tool\n    p.add_tools(hover)   # add the hover tooltip to the plot\n\n    return p # show in notebook\n\ndef eda_geplot_state_rank_plot(my_df, primary_column, target_column, first_title, second_title, int_top = 10, location_column = 'state', ):\n    \"\"\"\n    Execute and show all together:\n    @ primary_columns must to be a float to join to make a GeoSource\n    generate_GeoJSONSource_to_districts()\n    eda_seoul_districts_geo_plot()\n    eda_bokeh_horiz_bar_ranked()\n    \"\"\"\n    my_df = my_df.rename({primary_column: target_column}, axis = 1)\n\n    geo_source = generate_GeoJSONSource(my_df)\n\n    geo = eda_us_states_geo_plot(geo_source, my_df, first_title,\n                                       target_column, location_column, palette = inferno(32))\n\n\n    # rank 8 bottom and Up\n    rank = eda_bokeh_horiz_bar_ranked(my_df, target_column, second_title,\n                                      int_top = int_top, second_target = 'entity')\n\n    show( row( geo, rank ))","fca1d722":"# new functions to geojson of each continent\n\ndef create_geojson_to_one_map(my_df, my_geojson):\n    geo_source_merged_re = my_geojson.merge(my_df, left_on = 'name', right_on = 'entity', how='left')\n    eight_columns = geo_source_merged_re.columns[7]\n    return GeoJSONDataSource( geojson = geo_source_merged_re.to_json()), geo_source_merged_re[['entity', 'year', eight_columns]]\n\ndef geoplot_to_map(my_df, my_geojson, primary_column, target_column, first_title, second_title, int_top = 10, location_column = 'state', plot_width=500):\n    my_df = my_df.rename({primary_column: target_column}, axis = 1)\n\n    geo_source, my_df = create_geojson_to_one_map(my_df, my_geojson)\n\n    geo = eda_us_states_geo_plot(geo_source, my_df, first_title,target_column,\n                                 location_column, palette = inferno(32), plot_width = plot_width)\n\n    rank = eda_bokeh_horiz_bar_ranked(my_df, target_column, second_title,int_top = int_top,\n                                      second_target = 'entity')\n\n    show( row( geo, rank ))\n    ","438a1707":"def filter_by_merging_geojson(my_df, my_geojson):\n    return my_geojson.merge(my_df, left_on = 'name', right_on = 'entity', how='left')['entity'].dropna().unique().tolist()","e8297c71":"sns.heatmap(df.isnull(), cbar=False, yticklabels=False)","7c3562ac":"df.duplicated().sum() # no duplicate rows","1142881d":"df.columns = ['entity', 'code', 'year', 'CO2'] # lower and simplify column names\ndf = df.drop(['code'], axis=1) # Remove code","414babd5":"# simplify and replace continents names\ncontinent_replace = {'Americas (other)': 'Americas', 'Asia and Pacific (other)': 'Asia and Pacific',\n                     'EU-28':'European Union', 'Europe (other)': 'Europe'}\ncontinents_list = ['Americas', 'Middle East', 'Asia and Pacific', 'Europe', 'Africa']\ndf['entity'] = df['entity'].replace(continent_replace)\n\n# Replacement of some country names to match GeoJSON names\ncontries_replace = {'Democratic Republic of Republic of the Congo': 'Democratic Republic of the Congo',\n                    'Republic of the Congo': 'Republic of Congo', 'Cote d\\'Ivoire':'Ivory Coast',\n                    'Faeroe Islands': 'Faroe Islands', 'Guinea-Bissau': 'Guinea Bissau'}\ndf['entity'] = df['entity'].replace(contries_replace)","afdefc6e":"entities = df['entity'].unique().tolist()\nprint('There are {} diferents entities:\\n'.format(len(entities)))\nprint(entities)","0b953d53":"tree_map_cat_feat(df, 'entity', 'count by entity', 50, figsize=(20, 10))","955f434a":"# Year\nyears = np.sort(df['year'].unique())\n\nis_full = True\nfor i in range(1751,2017):\n    if(i not in years):\n        print('not found', i)\n        is_full = False\n        \nif(is_full):\n    print('Tem ao menos um dado para cada ano entre 1751 e 2017')\n","0d04f2b4":"eda_cat_top_slice_count(df['year'], start=1, end=35, rotate=60)","4f9420f4":"from bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure\nfrom bokeh.models.tools import HoverTool\nfrom bokeh.models import GeoJSONDataSource\nfrom bokeh.layouts import row\noutput_notebook()\n\nimport geopandas as gpd\n\n# import geojson\ngeojson = gpd.read_file('..\/input\/world-map-eckert3\/world-eckert3.geo.json')\n\n# delete useless columns\nlist_to_delete = ['id', 'hc-group', 'hc-middle-x', 'hc-middle-y', 'hc-key', 'hc-a2',\n                  'labelrank', 'woe-id', 'labelrank', 'iso-a3', 'iso-a2', 'woe-id']\n\n# replace some name to match with df\nreplace_dict = {'United States of America': 'United States', 'United Republic of Tanzania': 'Tanzania',\n                'Republic of Serbia': 'Serbia', 'The Bahamas':'Bahamas'}\n\ngeojson = geojson.drop(list_to_delete, axis = 1).dropna().replace(replace_dict)\n\ndef generate_GeoJSONSource(my_df):\n    global geojson\n    geo_source_merged = geojson.merge(my_df, left_on = 'name', right_on = 'entity')\n    return GeoJSONDataSource( geojson = geo_source_merged.to_json())\n\n# show\ngeojson.head(3)","51851ae5":"print(list(np.sort(geojson.name.unique()))) # Countries in GeoJSON","8bc2c678":"df1 = df.groupby(['entity']).count()['year'].reset_index()\ngeo_source_merged = geojson.merge(df1, left_on = 'name', right_on = 'entity', how='right')\ngeo_source_merged['name'] = geo_source_merged['name'].fillna('mising')\nremove_list = geo_source_merged.query('name == \"mising\"')['entity'].tolist()\nprint('Countries that did not match df[\"entity\"], that is, are in DF but not in GeoJSON: \\n')\nprint(remove_list)","b537e82d":"primary_column = 'CO2'\ntarget_column = 'sum_co2'\n\ndf1 = df.groupby(['entity']).sum()[primary_column].reset_index()\ndf1 = df1.drop(df1[df1['entity'].isin(remove_list)].index, axis=0) # remove_list: removes mismatched data\n\neda_geplot_state_rank_plot(df1, primary_column, target_column,\n                           \"Sum of Emission Of CO2\", \"The Top 20 Countries on Sum of Emission of CO2\")","505049b3":"primary_column = 'CO2'\ntarget_column = 'CO2\/2017'\n\ndf1 = df.query('year == 2017')\ndf1 = df1.drop(df1[df1['entity'].isin(remove_list)].index, axis=0)  # remove_list: removes mismatched data\n\neda_geplot_state_rank_plot(df1, primary_column, target_column,\n                           \"Emission in last Year 2017\", \"The Top 20 Countries on emission of CO2 on 2017\")","51b063ea":"# import europe_geojson\neurope_geojson = gpd.read_file('..\/input\/global-map-geojson\/europe.geo.json')\neurope_geojson = europe_geojson.drop(list_to_delete + ['country-abbrev'], axis = 1).dropna().replace(replace_dict)\n\nprimary_column = 'CO2'\ntarget_column = 'CO2\/2017'\n\ndf1 = df.query('year == 2017')\ndf1 = df1.drop(df1[df1['entity'].isin(remove_list)].index, axis=0)  # remove_list: removes mismatched data\n\ngeoplot_to_map(df1, europe_geojson, primary_column, target_column,\n               \"Emission of CO2 in Europe at 2017\", \"The Top 20 Countries on Emission of CO2 in Europe on 2017\", plot_width=400)","6aa63f14":"countries = filter_by_merging_geojson(df, europe_geojson)\n\ndf1 = df[ df['entity'].isin(countries) ]\n\nfig = px.line(df1, x=\"year\", y=\"CO2\", color='entity')\nfig.update_layout(title='Evolution of CO2 emissions in Europe')\nfig.show()","44d7f50a":"# import africa geojson\nafrica_geojson = gpd.read_file('..\/input\/global-map-geojson\/africa.geo.json')\nafrica_geojson = africa_geojson.drop(list_to_delete + ['country-abbrev'], axis = 1).dropna().replace(replace_dict)\n\nprimary_column = 'CO2'\ntarget_column = 'CO2\/2017'\n\ndf1 = df.query('year == 2017')\ndf1 = df1.drop(df1[df1['entity'].isin(remove_list + ['France'])].index, axis=0) # remove_list: removes mismatched data\n\ngeoplot_to_map(df1, africa_geojson, primary_column, target_column,\n               \"Emission of CO2 in Africa at 2017\", \"The Top 20 Countries on Emission of CO2 in Africa on 2017\", plot_width=400)","96864213":"countries = filter_by_merging_geojson(df, africa_geojson)\n\ndf1 = df[ df['entity'].isin(countries) ]\ndf1 = df1.drop( df1[df1['entity'].isin(['France'])].index, axis=0)\n\n\nfig = px.line(df1, x=\"year\", y=\"CO2\", color='entity')\nfig.update_layout(title='Evolution of CO2 emissions in Africa')\nfig.show()","998c2c1e":"# import south_america geojson\nsouth_america_geojson = gpd.read_file('..\/input\/global-map-geojson\/south-america.geo.json')\nsouth_america_geojson = south_america_geojson.drop(list_to_delete + ['country-abbrev'], axis = 1).dropna().replace(replace_dict)\n\nprimary_column = 'CO2'\ntarget_column = 'CO2_2017'\n\ndf1 = df.query('year == 2017')\ndf1 = df1.drop(df1[df1['entity'].isin(remove_list + ['France', 'United Kingdom'])].index, axis=0) # remove_list: removes mismatched data\n\ngeoplot_to_map(df1, south_america_geojson, primary_column, target_column,\n               \"Emission of CO2 in South America at 2017\", \"The Top 20 Countries on Emission of CO2 in South America on 2017\", plot_width=300)","5f6637c7":"countries = filter_by_merging_geojson(df, south_america_geojson)\n\ndf1 = df[ df['entity'].isin(countries) ]\ndf1 = df1.drop( df1[df1['entity'].isin(['United Kingdom'])].index, axis=0)\n\nfig = px.line(df1, x=\"year\", y=\"CO2\", color='entity')\nfig.update_layout(title='Evolution of CO2 emissions in South America')\nfig.show()","cba8b112":"# import geojson\nasia_geojson = gpd.read_file('..\/input\/global-map-geojson\/asia.geo.json')\nasia_geojson = asia_geojson.drop(list_to_delete + ['country-abbrev'], axis = 1).dropna().replace(replace_dict)\n\nprimary_column = 'CO2'\ntarget_column = 'CO2\/2017'\n\ndf1 = df.query('year == 2017')\ndf1 = df1.drop(df1[df1['entity'].isin(remove_list + ['France', 'United Kingdom'])].index, axis=0) \n\ngeoplot_to_map(df1, asia_geojson, primary_column, target_column,\n               \"Emission of CO2 in Asia at 2017\", \"The Top 20 Countries on Emission of CO2 in Asia on 2017\", plot_width=450)","d2f9593c":"countries = filter_by_merging_geojson(df, asia_geojson)\n\ndf1 = df[ df['entity'].isin(countries) ]\n\nfig = px.line(df1, x=\"year\", y=\"CO2\", color='entity')\nfig.update_layout(title='Evolution of CO2 emissions in Asia')\nfig.show()","7e8ddf72":"# import geojson\nnorth_america_geojson = gpd.read_file('..\/input\/global-map-geojson\/north-america.geo.json')\nnorth_america_geojson = north_america_geojson.drop(list_to_delete + ['country-abbrev'], axis = 1).dropna().replace(replace_dict)\n\nprimary_column = 'CO2'\ntarget_column = 'CO2\/2017'\n\ndf1 = df.query('year == 2017')\ndf1 = df1.drop(df1[df1['entity'].isin(remove_list + ['France', 'United Kingdom'])].index, axis=0) \n\ngeoplot_to_map(df1, north_america_geojson, primary_column, target_column,\n               \"Emission of CO2 in North America at 2017\", \"The Top 20 Countries on Emission of CO2 in North America on 2017\", plot_width=400)","86d87ed6":"countries = filter_by_merging_geojson(df, north_america_geojson)\n\ndf1 = df[ df['entity'].isin(countries) ]\n\nfig = px.line(df1, x=\"year\", y=\"CO2\", color='entity')\nfig.update_layout(title='Evolution of CO2 emissions in North America')\nfig.show()","5ed16a4b":"df1 = df[ df['entity'].isin(continents_list + ['World'] ) ] \nfig = px.line(df1, x=\"year\", y=\"CO2\", color='entity')\nfig.update_layout(title='Evolution Emission Of CO2 in World and Continents')\nfig.show()","25c55b15":"import plotly.express as px\n\ncountries = ['United States', 'China', 'Russia', 'United Kingdom', 'Germany', 'France', 'Japan', 'Canada', 'Brazil',\n             'South Africa', 'India', 'Mexico', 'Australia', 'Iran', 'Saudi Arabia']\ndf1 = df[ df['entity'].isin(countries) ]\n\nfig = px.line(df1, x=\"year\", y=\"CO2\", color='entity')\nfig.update_layout(title='Evolution of CO2 emissions in Big Contries')\nfig.show()","66986b9e":"df_countries = pd.read_csv('..\/input\/countries-of-the-world\/countries of the world.csv')\ndf_countries['Country'] = df_countries['Country'].apply(lambda x: x.strip())\ndict_replace_countries = { 'Bahamas, The': 'Bahamas', 'Congo, Dem. Rep.': 'Democratic Republic of the Congo',\n                          'Congo, Repub. of the': 'Republic of Congo', 'Korea, South':'South Korea',\n                          'Korea, North':'North Korea', 'Central African Rep.': 'Central African Republic',\n                          \"Cote d'Ivoire\": 'Ivory Coast', 'Guinea-Bissau': 'Guinea Bissau', 'Gambia, The': 'Gambia',\n                          'Western Sahara': 'Western Sahara'}\n\ndf_countries['Country'] = df_countries['Country'].replace(dict_replace_countries)\n\ndf_countries['Agriculture'] = df_countries['Agriculture'].fillna(0).astype('object').apply(lambda x: x if x == 0 else x.replace(',','.')).astype('float64')\ndf_countries['Industry'] = df_countries['Industry'].fillna(0).astype('object').apply(lambda x: x if x == 0 else x.replace(',','.')).astype('float64')\ndf_countries['Service'] = df_countries['Service'].fillna(0).astype('object').apply(lambda x: x if x == 0 else x.replace(',','.')).astype('float64')\n\ndf_countries.head(1)","1ad87b36":"dfc = df.merge(df_countries, left_on='entity', right_on='Country')\n\ndfc['CO2\/population'] = dfc['CO2']\/dfc['Population']\ndfc['CO2\/area'] = dfc['CO2']\/dfc['Area (sq. mi.)']\ndfc['CO2\/GDP'] = dfc['CO2']\/dfc['GDP ($ per capita)']","a5cacca5":"primary_column = 'CO2\/GDP'\ntarget_column = 'CO2\/GDP at 2017'\n\ndf1 = dfc.query('year == 2017')\ndf1 = df1.drop(df1[df1['entity'].isin(remove_list)].index, axis=0)  # remove_list: removes mismatched data\n\neda_geplot_state_rank_plot(df1, primary_column, target_column,\n                           \"Emission Of CO2\/GPD on 2017\", \"The Top 20 Countries on Emission Of CO2\/GPD on 2017\")","356329f5":"primary_column = 'CO2\/area'\ntarget_column = 'CO2\/area at 2017'\n\ndf1 = dfc.query('year == 2017')\ndf1 = df1.drop(df1[df1['entity'].isin(remove_list)].index, axis=0)  # remove_list: removes mismatched data\n\neda_geplot_state_rank_plot(df1, primary_column, target_column,\n                           \"Emission of CO2\/Area on 2017\", \"The Top 20 Countries on CO2\/Area on 2017\")","d60ac267":"primary_column = 'CO2\/population'\ntarget_column = 'CO2\/population at 2017'\n\ndf1 = dfc.query('year == 2017')\ndf1 = df1.drop(df1[df1['entity'].isin(remove_list)].index, axis=0)  # remove_list: removes mismatched data\n\neda_geplot_state_rank_plot(df1, primary_column, target_column,\n                           \"Emission of CO2\/Population 2017\", \"The Top 20 Countries on CO2\/Population at 2017\")","6d77708f":"### Asia <a id='index14'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","3d003cd0":"## Snippets <a id='index02'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","dd05db68":"<h1 align=\"center\"> CO2 emissions in the world over time <\/h1>\n\n<img src=\"https:\/\/portallubes.com.br\/wp-content\/uploads\/2017\/12\/Co2avcd-4.png\" width=\"50%\" \/>\n\nCreated: 2020-09-26\n\nLast updated: 2020-10-05\n\nKaggle Kernel made by \ud83d\ude80 <a href=\"https:\/\/www.kaggle.com\/rafanthx13\"> Rafael Morais de Assis<\/a>","c488a655":"### Year <a id='index06'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","c7504d4c":"### Big Countries <a id='index17'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","424ca637":"### Europe <a id='index11'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","9fa42634":"## DataSet Description\n\nKaggle DataSet Link: https:\/\/www.kaggle.com\/yoannboyere\/co2-ghg-emissionsdata\n\n**Content**\n\nThis dataset contains CO2 and GHG emissions for countries since 1750 until 2017.\nThe source is OurWorldInData (https:\/\/ourworldindata.org\/co2-and-other-greenhouse-gas-emissions).\n\nSource of GeoJSONs: https:\/\/code.highcharts.com\/mapdata\/","5b24d7c6":"### Africa <a id='index12'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","de9477e3":"### South America <a id='index13'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","d9b2017a":"## CO2 by population\/area\/GDP <a id='index61'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","0fc2b868":"## Clean and Restructure DataSet <a id='index03'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\nMissing data is only found in 'Code', however, it is just an abbreviation for 'Entity' with three letters, thus representing the same information as 'entity', so it will be deleted.","ea074492":"### Emission in last Year 2017 <a id='index10'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","1eea987e":"## EDA with Choropleth Maps <a id='index07'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\n### Prepare GeoJSON <a id='index08'><\/a> ","b59c7d66":"### Sum of Emission of CO2 in dataset for all years <a id='index09'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","5af67059":"## EDA: Exploration Data Analysis <a id='index04'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\n### Entity <a id='index05'><\/a>","978d2d24":"## Table Of Content (TOC) <a id=\"top\"><\/a>\n\n+ [Import Libs and DataSet](#index01) \n+ [Snippets](#index02)\n+ [Clean and Restructure DataSet](#index03)\n+ [EDA: Exploration Data Analysis](#index04)\n  - [Entity](#index05)\n  - [Year](#index06)\n+ [EDA with Choropleth Maps](#index07)\n  - [Prepare GeoJSON](#index08)\n  - [Emission in last Year 2017](#index10)\n  - [Europe](#index11)\n  - [Africa](#index12)\n  - [South America](#index13)\n  - [Asia](#index14)\n  - [North America](#index15)\n  - [World and Continents](#index16)\n  - [Big Countries](#index17)\n+ [CO2 by population\/area\/GDP](#index61)\n\n## Import Libs and DataSet","27c64a44":"### World and Continents <a id='index16'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","96baddd7":"### North America <a id='index15'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>"}}