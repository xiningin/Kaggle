{"cell_type":{"6c42ad47":"code","20019349":"code","7d339143":"code","0303cccc":"code","16d298b5":"code","746eb7a4":"code","cd4e83b4":"code","9326756b":"code","3284761e":"code","4d0ba1a5":"code","6c766734":"code","d36bf6f4":"markdown","a42b77d5":"markdown","ed103da7":"markdown","515b962f":"markdown","92175d96":"markdown","b75750ba":"markdown","93cf21c5":"markdown","8c42a3a6":"markdown","b2a5dab9":"markdown","c3eb9340":"markdown"},"source":{"6c42ad47":"# Base \n# -----------------------------------\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\n# Models \n# -----------------------------------\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier,RandomForestClassifier, BaggingClassifier, AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n# Metrics & Evaluation\n# -----------------------------------\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import accuracy_score, roc_auc_score, roc_curve, classification_report\n\n# Configuration\n# -----------------------------------\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\npd.set_option('display.max_columns', None)\npd.options.display.float_format = '{:.2f}'.format","20019349":"df = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf.head()","7d339143":"df.describe([0.01, 0.05, 0.10, 0.20, 0.7, 0.8, 0.9, 0.95, 0.99]).T","0303cccc":"# Target\nprint(df.Outcome.value_counts())\nprint(df.Outcome.value_counts() \/ df.shape[0])","16d298b5":"print(df.isnull().sum() \/ df.shape[0], \"\\n\")\n\nmissing = [\"Glucose\", \"BMI\", \"BloodPressure\", \"SkinThickness\", \"Insulin\"]\nfor i in missing:\n    df[i] = np.where(df[i] == 0, np.nan, df[i])\n    \ndef missing_imp_category(data, group_variable, target, method = \"mean\"):\n    data[target] = data[target].fillna(data.groupby(group_variable)[target].transform(method))\n    \ndf.isnull().sum().sort_values(ascending = False) \/ df.shape[0]","746eb7a4":"# Age Category\ndf[\"AGECAT\"] = pd.cut(df.Age, 5, labels = np.arange(1,6,1))\n\n# Fill Missing\nmissing_imp_category(df, group_variable=[\"AGECAT\", \"Outcome\"], target = \"BMI\", method=\"median\")\n\n# BMI Category\ndf[\"BMI_CAT\"] = np.where(df.BMI < 18.5, \"UNDERWEIGHT\", \"NORMAL\")\ndf[\"BMI_CAT\"] = np.where((df.BMI >= 25) & (df.BMI < 30), \"OVERRWEIGHT\", df[\"BMI_CAT\"])\ndf[\"BMI_CAT\"] = np.where((df.BMI >= 30) & (df.BMI < 35), \"OBESE\", df[\"BMI_CAT\"])\ndf[\"BMI_CAT\"] = np.where((df.BMI >= 35), \"EXTREMELY OBESE\", df[\"BMI_CAT\"])\ndf[\"ISOBESE\"] = np.where(df.BMI >= 30, 1, 0)\n\n# Fill Missing\nmissing_imp_category(df, group_variable=[\"BMI_CAT\", \"Outcome\"], target = \"SkinThickness\", method=\"median\")\n\n# Fill Missing\ndf[\"Glucose\"] = df.Glucose.fillna(df.Glucose.median())\n\n# Fill Missing\nmissing_imp_category(df, group_variable=[\"AGECAT\", \"Outcome\"], target = \"BloodPressure\", method=\"median\")\n\n# DIASTOLIC\ndf[\"DIASTOLIC\"] = np.where(df.BloodPressure < 80, \"Normal\", \"Hypertension Stg1\")\ndf[\"DIASTOLIC\"] = np.where((df.BloodPressure >= 90) & (df.BloodPressure < 120), \"Hypertension Stg2\", df[\"DIASTOLIC\"])\ndf[\"DIASTOLIC\"] = np.where((df.BloodPressure > 120), \"Hypertensive Crisis\", df[\"DIASTOLIC\"])\n\n\n# Fill Missing\nmissing_imp_category(df, group_variable=[\"AGECAT\", \"Outcome\"], target = \"Insulin\", method=\"median\")\nmissing_imp_category(df, group_variable=[\"Outcome\"], target = \"Insulin\", method=\"median\")","cd4e83b4":"# Pregnancies\ndf[\"CHILD\"] = np.where(df.Pregnancies > 0, 1, 0)\ndf[\"PregnanciesCAT\"] = np.where(df.Pregnancies == 0, \"No\", \"1-3\")\ndf[\"PregnanciesCAT\"] = np.where((df.Pregnancies > 3) & (df.Pregnancies < 10), \"4-9\", df[\"PregnanciesCAT\"])\ndf[\"PregnanciesCAT\"] = np.where((df.Pregnancies > 10), \"10+\", df[\"PregnanciesCAT\"])\n\n# Hypoglycemia\ndf[\"Hypoglycemia\"] = np.where(df.Glucose < 75, 1,0)\n\n# Risk Score\ndf[\"IDAgeRiskScore\"] = np.where(df.Age < 35, 0 , 20)\ndf[\"IDAgeRiskScore\"] = np.where(df.Age > 49, 30 , df[\"IDAgeRiskScore\"])\ndf[\"IDBMIRiskScore\"] = np.where(df.BMI < 30 , 0, 10)\ndf[\"IDBMIRiskScore\"] = np.where((df.BMI >= 45) & (df.BMI < 55) , 20, df[\"IDBMIRiskScore\"])\ndf[\"IDBMIRiskScore\"] = np.where((df.BMI >= 55), 30, df[\"IDBMIRiskScore\"])\n\n\n## Skin Thickness, BMI and Age\ndf[\"ST_BMI\"] = df[\"SkinThickness\"] \/ df[\"BMI\"]\ndf[\"ST_BMI_Age\"] = (df.BMI * df.SkinThickness ) \/ df.Age\n\ndf[\"New_SkinThickness\"] = df[\"SkinThickness\"] * 4\n\ndf.loc[(df['Age'] >= 21 ) & (df['Age'] <= 29) & (df[\"New_SkinThickness\"] < 34), 'Body_Fat'] = \"Underfat\"\ndf.loc[(df['Age'] >= 30 ) & (df['Age'] <= 39) & (df[\"New_SkinThickness\"] < 29), 'Body_Fat'] = \"Underfat\"\ndf.loc[(df['Age'] >= 40 ) & (df['Age'] <= 49) & (df[\"New_SkinThickness\"] < 23), 'Body_Fat'] = \"Underfat\"\ndf.loc[(df['Age'] >= 50 ) & (df[\"New_SkinThickness\"] < 20), 'Body_Fat'] = \"Underfat\"\n\ndf.loc[(df['Age'] >= 21 ) & (df['Age'] <= 29) & (df[\"New_SkinThickness\"] >= 34) & (df[\"New_SkinThickness\"] <= 79), 'Body_Fat'] = \"Healthy\"\ndf.loc[(df['Age'] >= 30 ) & (df['Age'] <= 39) & (df[\"New_SkinThickness\"] >= 29) & (df[\"New_SkinThickness\"] <= 73), 'Body_Fat'] = \"Healthy\"\ndf.loc[(df['Age'] >= 40 ) & (df['Age'] <= 49) & (df[\"New_SkinThickness\"] >= 23) & (df[\"New_SkinThickness\"] <= 59), 'Body_Fat'] = \"Healthy\"\ndf.loc[(df['Age'] >= 50 ) & (df[\"New_SkinThickness\"] >= 20) & (df[\"New_SkinThickness\"] <= 49), 'Body_Fat'] = \"Healthy\"\n\ndf.loc[(df['Age'] >= 21 ) & (df['Age'] <= 29) &( df[\"New_SkinThickness\"] > 79) & (df[\"New_SkinThickness\"] <= 120), 'Body_Fat'] = \"OverFat\"\ndf.loc[(df['Age'] >= 30) & (df['Age'] <= 39) & (df[\"New_SkinThickness\"] > 73) & (df[\"New_SkinThickness\"] <= 115), 'Body_Fat'] = \"OverFat\"\ndf.loc[(df['Age'] >= 40 ) & (df['Age'] <= 49) & (df[\"New_SkinThickness\"] > 59) & (df[\"New_SkinThickness\"] <= 95), 'Body_Fat'] = \"OverFat\"\ndf.loc[(df['Age'] >= 50 ) & (df[\"New_SkinThickness\"] > 49) & (df[\"New_SkinThickness\"] <= 77), 'Body_Fat'] = \"OverFat\"\n\ndf.loc[(df['Age'] >= 21 ) & (df['Age'] <= 29) & (df[\"New_SkinThickness\"] > 120), 'Body_Fat'] = \"Obese\"\ndf.loc[(df['Age'] >= 30 ) & (df['Age'] <= 39) & (df[\"New_SkinThickness\"] > 115) , 'Body_Fat'] = \"Obese\"\ndf.loc[(df['Age'] >= 40 ) & (df['Age'] <= 49) & (df[\"New_SkinThickness\"] > 95) , 'Body_Fat'] = \"Obese\"\ndf.loc[(df['Age'] >= 50 )  & (df[\"New_SkinThickness\"] > 77) , 'Body_Fat'] = \"Obese\"\n\ndf = df.drop([\"New_SkinThickness\"], axis=1)\n\n## Glucose\ndf.loc[(df[\"Glucose\"] < 140), \"GlucoseCAT\"] = \"No_Risk\"\ndf.loc[(df[\"Glucose\"] >= 140), \"GlucoseCAT\"] = \"Prediabetes\"","9326756b":"def num_plot(data, cat_length = 16, remove = [\"Id\"], hist_bins = 12, figsize = (20,4)):\n    \n    num_cols = [col for col in data.columns if data[col].dtypes != \"O\" \n                and len(data[col].unique()) >= cat_length]\n    \n    if len(remove) > 0:\n        num_cols = list(set(num_cols).difference(remove))\n            \n    for i in num_cols:\n        fig, axes = plt.subplots(1, 3, figsize = figsize)\n        data.hist(str(i), bins = hist_bins, ax=axes[0])\n        data.boxplot(str(i),  ax=axes[1], vert=False);\n        try: \n            sns.kdeplot(np.array(data[str(i)]))\n        except: ValueError\n        \n        axes[1].set_yticklabels([])\n        axes[1].set_yticks([])\n        axes[0].set_title(i + \" | Histogram\")\n        axes[1].set_title(i + \" | Boxplot\")\n        axes[2].set_title(i + \" | Density\")\n        plt.show()\n        \n        \nnum_plot(df, cat_length = 16, hist_bins = 10, figsize = (20,4))","3284761e":"def cat_eda(data, cat_length, target = \"Outcome\"):  \n    dataframe = data.copy()\n    \n    #if len(ordinal_variable) > 0:\n    #    dataframe.drop(ordinal_variable, axis = 1, inplace = True)\n        \n    more_cat_cols = [col for col in dataframe.columns if len(dataframe[col].unique()) < cat_length]\n    \n    for i in more_cat_cols: \n        print(i, \":\", len(dataframe[i].value_counts()), \"Unique Category -\", str(dataframe[i].dtype))\n        print(pd.DataFrame({\"COUNT\": dataframe[i].value_counts(),\n                            \"RATIO\": dataframe[i].value_counts() \/ len(dataframe),\n                            \"TARGET_MEAN\": dataframe.groupby(i)[target].mean(),\n                            \"TARGET_COUNT\": dataframe.groupby(i)[target].count(),\n                            \"TARGET_STD\": dataframe.groupby(i)[target].std()}), end=\"\\n\\n\\n\")\n    \n    print(\"# DTYPES -----------------------------\")\n    print(\"Object Variables:\",dataframe[more_cat_cols].select_dtypes(\"object\").columns.tolist(), \"\\n\")\n    print(\"Integer Variables:\",dataframe[more_cat_cols].select_dtypes(\"integer\").columns.tolist(), \"\\n\")\n    print(\"Float Variables:\",dataframe[more_cat_cols].select_dtypes(\"float\").columns.tolist(), \"\\n\")\n\ncat_eda(df, cat_length=10)","4d0ba1a5":"# Transform Object\ndf[\"AGECAT\"] = df[\"AGECAT\"].astype(object)\n\ncat_cols = [col for col in df.columns if df[col].dtypes == 'O']\n\ndef one_hot_encoder(dataframe, categorical_cols, nan_as_category=True):\n    original_columns = list(dataframe.columns)\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, dummy_na=nan_as_category, drop_first=True)\n    new_columns = [c for c in dataframe.columns if c not in original_columns]\n    return dataframe, new_columns\n\n\ndf, new_cols_ohe = one_hot_encoder(df, cat_cols, nan_as_category=False)","6c766734":"# All Models & Train Validation Scores\nmodels = [('LR', LogisticRegression()),\n          (\"NBAYES\", GaussianNB()),\n          ('KNN', KNeighborsClassifier()),\n          ('CART', DecisionTreeClassifier()),\n          (\"BAGGING\", BaggingClassifier()),\n          ('RF', RandomForestClassifier()),\n          ('SVM', SVC(gamma='auto')),\n          (\"ADAB\",AdaBoostClassifier()),\n          ('GBM', GradientBoostingClassifier()),\n          (\"XGB\", XGBClassifier()),\n          (\"LGBM\", LGBMClassifier())]\n\n\ny = df[\"Outcome\"]\nX = df.drop([\"Outcome\"], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=46)\n\n# evaluate each model in turn\nresults = []\nnames = []\n\nprint(\"# Algorithm Comparison\")\nprint(\"-----------------------------------------\")\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=123456)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring=\"accuracy\")\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)\n    \nprint(\"\\n\")    \n\n# boxplot algorithm comparison\nfig = plt.figure(figsize=(15, 10))\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","d36bf6f4":"<a id='6'><\/a><center> <h1 style=\"background-color:green; color:white\" ><br>6.Numeric Variables<br><\/h1><\/center>","a42b77d5":"<a id='1'><\/a><center> <h1 style=\"background-color:green; color:white\" ><br>1.Packages<br><\/h1>","ed103da7":"<!---------------------------------------------->\n<!-----------------ANA BA\u015eLIK------------------->\n<!---------------------------------------------->\n<center> <h1 style=\"background-color:green; color:white\"><br>Diabetes Prediction using Machine Learning<br><\/h1><\/center>\n\n<!---------------------------------------------->\n<!-----VER\u0130 SET\u0130 DE\u011e\u0130\u015eKENLER\u0130 HAKKINDA B\u0130LG\u0130---->\n<!---------------------------------------------->\n\n<p>\n- <b>Pregnancies:<\/b> Number of times pregnant<br \/>\n- <b>Glucose:<\/b> Plasma glucose concentration a 2 hours in an oral glucose tolerance test<br \/>\n- <b>BloodPressure:<\/b> Diastolic blood pressure (mm Hg)<br \/>\n- <b>SkinThickness:<\/b> Triceps skin fold thickness (mm)<br \/>\n- <b>Insulin:<\/b> 2-Hour serum insulin (mu U\/ml)<br \/>\n- <b>BMI:<\/b> Body mass index (weight in kg\/(height in m)^2)<br \/>\n- <b>DiabetesPedigreeFunction:<\/b> Diabetes pedigree function<br \/>\n- <b>Age:<\/b> Age (years)<br \/>\n- <b>Outcome:<\/b> Class variable (0 or 1)<br \/>\n<\/p>\n\n<!---------------------------------------------->\n<!------------------G\u00d6RSEL---------------------->\n<!---------------------------------------------->\n\n<center><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/6\/6f\/Pima.jpg\" style=\"width:25%;height:10%;\"><\/center>\n   \n\n<!---------------------------------------------->\n<!-------------------TABLO---------------------->\n<!---------------------------------------------->\n<br>    \n<center>    \n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action\" style=\"background-color:green; color:white\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\"><br>Notebook Content!<br><\/h3>  \n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#1\" role=\"tab\" aria-controls=\"profile\" style=\"color:green\">Packages<span        class=\"badge badge-primary badge-pill\" style=\"background-color:green; color:white\">1<\/span><\/a>\n  \n  <a id=\"section2\" class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#2\" role=\"tab\" aria-controls=\"messages\" style=\"color:green\">Data<span class=\"badge badge-primary badge-pill\" style=\"background-color:green; color:white\">2<\/span><\/a>\n  \n  <a class=\"list-group-item list-group-item-action\"  data-toggle=\"list\" href=\"#3\" role=\"tab\" aria-controls=\"settings\" style=\"color:green\">Missing Values<span class=\"badge badge-primary badge-pill\" style=\"background-color:green; color:white\">3<\/span><\/a>\n  \n  <a class=\"list-group-item list-group-item-action\"  data-toggle=\"list\" href=\"#4\" role=\"tab\" aria-controls=\"settings\" style=\"color:green\">Filling Missing Values and Creating New Variables<span class=\"badge badge-primary badge-pill\" style=\"background-color:green; color:white\">4<\/span><\/a>\n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#5\" role=\"tab\" aria-controls=\"settings\" style=\"color:green\">New Features<span class=\"badge badge-primary badge-pill\" style=\"background-color:green; color:white\">5<\/span><\/a> \n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#6\" role=\"tab\" aria-controls=\"settings\" style=\"color:green\">Numeric Variables<span class=\"badge badge-primary badge-pill\" style=\"background-color:green; color:white\">6<\/span><\/a>\n\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#7\" role=\"tab\" aria-controls=\"settings\" style=\"color:green\">Categoric Variables<span class=\"badge badge-primary badge-pill\" style=\"background-color:green; color:white\">7<\/span><\/a> \n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#8\" role=\"tab\" aria-controls=\"settings\" style=\"color:green\">One-Hot Encoder<span class=\"badge badge-primary badge-pill\" style=\"background-color:green; color:white\">8<\/span><\/a> \n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#9\" role=\"tab\" aria-controls=\"settings\" style=\"color:green\">Model Comparision<span class=\"badge badge-primary badge-pill\" style=\"background-color:green; color:white\">9<\/span><\/a>\n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#10\" role=\"tab\" aria-controls=\"settings\" style=\"color:green\">Reporting Diabetes Prediction Using Machine Learning<span class=\"badge badge-primary badge-pill\" style=\"background-color:green; color:white\">10<\/span><\/a><\/center>","515b962f":"<a id='2'><\/a><center> <h1 style=\"background-color:green; color:white\" ><br>2.Data<br><\/h1><\/center>\n    <p>\n- <b>Pregnancies:<\/b> Number of times pregnant<br \/>\n- <b>Glucose:<\/b> Plasma glucose concentration a 2 hours in an oral glucose tolerance test<br \/>\n- <b>BloodPressure:<\/b> Diastolic blood pressure (mm Hg)<br \/>\n- <b>SkinThickness:<\/b> Triceps skin fold thickness (mm)<br \/>\n- <b>Insulin:<\/b> 2-Hour serum insulin (mu U\/ml)<br \/>\n- <b>BMI:<\/b> Body mass index (weight in kg\/(height in m)^2)<br \/>\n- <b>DiabetesPedigreeFunction:<\/b> Diabetes pedigree function<br \/>\n- <b>Age:<\/b> Age (years)<br \/>\n- <b>Outcome:<\/b> Class variable (0 or 1)<br \/>\n<\/p>","92175d96":"<a id='5'><\/a><center> <h1 style=\"background-color:green; color:white\" ><br>5.New Features<br><\/h1><\/center>","b75750ba":"<a id='3'><\/a><center> <h1 style=\"background-color:green; color:white\" ><br>3.Missing Values<br><\/h1><\/center>","93cf21c5":"<a id='9'><\/a><center> <h1 style=\"background-color:green; color:white\" ><br>9.Model Comparision<br><\/h1><\/center>","8c42a3a6":"<a id='7'><\/a><center> <h1 style=\"background-color:green; color:white\" ><br>7.Categoric Variables<br><\/h1><\/center>","b2a5dab9":"<a id='4'><\/a><center> <h1 style=\"background-color:green; color:white\" ><br>4.Filling Missing Values and Creating New Variables<br><\/h1><\/center>","c3eb9340":"<a id='8'><\/a><center> <h1 style=\"background-color:green; color:white\" ><br>8.One-Hot Encoder<br><\/h1><\/center>"}}