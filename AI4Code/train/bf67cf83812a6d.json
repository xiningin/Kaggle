{"cell_type":{"b7b80610":"code","966632fb":"code","bde563ad":"code","df493a7d":"code","680ed042":"code","4a1fcb09":"code","85184611":"code","389b6754":"code","008197a6":"code","68734cb5":"code","eb107801":"code","5279a407":"code","d6a3e09b":"code","d032cfc2":"code","36c8c5fc":"code","c35ba3c3":"code","22a90ff3":"code","e704fda9":"code","7e4558fc":"code","b7476aeb":"code","e8ba37e8":"code","8cc3510b":"code","6f53b7d0":"code","74852e9d":"code","9a11aa73":"code","f2d66d9a":"code","c3a7de0e":"code","faa21c7a":"code","c87c998c":"markdown","d70dc179":"markdown","7db3b5e4":"markdown","2d93c4dd":"markdown","bd88c90f":"markdown","e3a93db7":"markdown","348e2a7b":"markdown","1f812d3a":"markdown","c42f76ca":"markdown","a952b897":"markdown","20c1a615":"markdown","031caa26":"markdown","a4ab8d5d":"markdown","1c4ee417":"markdown","71eab313":"markdown","ccbc5d77":"markdown","0da47126":"markdown","591799e0":"markdown","4006dee3":"markdown","3cc1d48f":"markdown","3a49239e":"markdown","7a5d69bf":"markdown","7b18cd93":"markdown"},"source":{"b7b80610":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport scipy\nfrom scipy import signal\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.svm import SVC\n%matplotlib inline","966632fb":"# read training data\n# Assume data is Kepler long-cadence data at 30 minute increments\ndf_train = pd.read_csv('..\/input\/kepler-labelled-time-series-data\/exoTrain.csv')\ndf_train.head()","bde563ad":"amp = df_train.iloc[0,1:]\ntime = np.arange(0,len(amp))*(30\/60)\nfig, ax = plt.subplots(1,figsize=(15,5))\nfig.suptitle('Sample time history with planet, index 0')\nax.plot(time,amp)\nax.set(xlabel='time(hrs)', ylabel='flux')\nax.grid()","df493a7d":"amp_s = scipy.signal.savgol_filter(amp, 101, 2) # window size 51, polynomial order 3\nfig, ax = plt.subplots(1,figsize=(15,5))\nfig.suptitle('Sample time history with planet, index 0, Smoothed')\nax.plot(time,amp)\nax.plot(time,amp_s,'r-',lw=5)\nax.set(xlabel='time(hrs)', ylabel='flux')\nax.grid()","680ed042":"amp_dt = amp - amp_s\nfig, ax = plt.subplots(1,figsize=(15,5))\nfig.suptitle('Sample time history with planet, index 0, Detrended')\nax.plot(time,amp_dt)\nax.set(xlabel='time(hrs)', ylabel='flux')\nax.grid()","4a1fcb09":"# subtract mean\namp_m = amp_dt - amp_dt.mean()\nfig, ax = plt.subplots(1,figsize=(15,5))\nfig.suptitle('Sample time history with planet, index 0, Remove mean bias')\nax.plot(time,amp_m)\nax.set(xlabel='time(hrs)', ylabel='flux')\nax.grid()","85184611":"# normalize by standard deviation\namp_norm = amp_m \/ amp_m.std()\nfig, ax = plt.subplots(1,figsize=(15,5))\nfig.suptitle('Sample time history with planet, index 0, Normalize')\nax.plot(time,amp_norm)\nax.set(xlabel='time(hrs)', ylabel='flux')\nax.grid()","389b6754":"sps = 1 \/ (30 *60) # samples per second\nnt = len(time) # total points in record\nnr = 128  # number points per analysis window\ndf = sps \/ (nr -1) # delta frequency in hertz\n[freq, psd] = signal.welch(amp_norm,fs=sps,window='hann',nperseg=nr)\nfig, ax = plt.subplots(1,figsize=(15,5))\nfig.suptitle('Sample power spectral density with planet, index 0')\nax.plot(freq,psd)\nax.set(xlabel='Frequency(Hz)', ylabel='flux power')\nax.grid()","008197a6":"# normalize data function\ndef normalize_data(amp):\n    # window size 101, polynomial order 2\n    amp_s = scipy.signal.savgol_filter(amp, 101, 2)\n    return (amp - amp_s - amp_dt.mean()) \/ amp_m.std()\n\n# return just the psd value for pandas apply method\ndef psd_calculation(y,sps,window,nr):\n    f,p = signal.welch(y,sps,window,nr)\n    return p \/  (p.max())","68734cb5":"# dataframe with just flux\ndf_train_flux = df_train.iloc[:,1:]\n# normulize\ndf_train_flux_norm = df_train_flux.apply(normalize_data,axis=1,result_type='broadcast')\ndf_train_flux_psd = df_train_flux_norm.apply(psd_calculation,axis=1,sps=sps,window='hann',nr=nr,result_type='expand')\ndf_train_flux_psd.head()","eb107801":"fig, (ax1,ax2) = plt.subplots(2,figsize=(15,5))\nfig.suptitle('Time history with planet, index 0, Normalize and psd')\n\nax1.plot(time,df_train_flux_norm.iloc[0,:])\nax1.set(xlabel='time(hrs)', ylabel='flux')\nax1.grid()\n\nax2.plot(freq,df_train_flux_psd.iloc[0,:])\nax2.set(xlabel='Frequency(Hz)', ylabel='flux power')\nax2.grid()","5279a407":"df_test = pd.read_csv('..\/input\/kepler-labelled-time-series-data\/exoTest.csv')\ndf_test.head()","d6a3e09b":"# dataframe with just flux\ndf_test_flux = df_test.iloc[:,1:]\n# normulize\ndf_test_flux_norm = df_test_flux.apply(normalize_data,axis=1,result_type='broadcast')\ndf_test_flux_psd = df_test_flux_norm.apply(psd_calculation,axis=1,sps=sps,window='hann',nr=nr,result_type='expand')\ndf_test_flux_psd.head()","d032cfc2":"fig, (ax1,ax2) = plt.subplots(2,figsize=(15,5))\nfig.suptitle('Time history with planet, index 0, Normalize and psd')\n\nax1.plot(time,df_test_flux_norm.iloc[0,:])\nax1.set(xlabel='time(hrs)', ylabel='flux')\nax1.grid()\n\nax2.plot(freq,df_test_flux_psd.iloc[0,:])\nax2.set(xlabel='Frequency(Hz)', ylabel='flux power')\nax2.grid()","36c8c5fc":"# training and test data\nX_train = df_train_flux_psd\ny_train = df_train['LABEL']\nX_test = df_test_flux_psd\ny_test = df_test['LABEL']","c35ba3c3":"weights = {1:1.0, 2:5.0}\nsvcf = SVC(kernel='linear',C=1,class_weight=weights).fit(X_train,y_train)\ny_train_pred = svcf.predict(X_train)\ny_test_pred = svcf.predict(X_test)","22a90ff3":"print(confusion_matrix(y_train, y_train_pred, labels=[1, 2]))\nprint(classification_report(y_train, y_train_pred, labels=[1,2]))","e704fda9":"print(confusion_matrix(y_test, y_test_pred, labels=[1, 2]))\nprint(classification_report(y_test, y_test_pred, labels=[1,2]))","7e4558fc":"sps = 1 \/ (30 *60) # samples per second\nnt = len(time) # total points in record\nnr = 256  # number points per analysis window\ndf = sps \/ (nr -1) # delta frequency in hertz\nfreq = np.arange(0,df*(nr\/2+1),df)\n#[freq, psd] = signal.welch(amp_norm,fs=sps,window='hann',nperseg=nr)\n# normalize data function\ndef normalize_data(amp):\n    amp_dt = amp - amp.shift()\n    amp_n = (amp - amp.shift()) \/ amp_dt.std()\n    amp_n[0] = amp_n[1]\n    return amp_n","b7476aeb":"# dataframe with just flux\ndf_train_flux = df_train.iloc[:,1:]\n# normulize\ndf_train_flux_norm = df_train_flux.apply(normalize_data,axis=1,result_type='broadcast')\ndf_train_flux_psd = df_train_flux_norm.apply(psd_calculation,axis=1,sps=sps,window='hann',nr=nr,result_type='expand')\ndf_train_flux_psd.head()","e8ba37e8":"fig, (ax1,ax2) = plt.subplots(2,figsize=(15,5))\nfig.suptitle('Time history with planet, index 0, Normalize and psd')\n\nax1.plot(time,df_train_flux_norm.iloc[0,:])\nax1.set(xlabel='time(hrs)', ylabel='flux')\nax1.grid()\n\nax2.plot(freq,df_train_flux_psd.iloc[0,:])\nax2.set(xlabel='Frequency(Hz)', ylabel='flux power')\nax2.grid()","8cc3510b":"#df_test = pd.read_csv('exoTest.csv')\ndf_test.head()","6f53b7d0":"# dataframe with just flux\ndf_test_flux = df_test.iloc[:,1:]\n# normulize\ndf_test_flux_norm = df_test_flux.apply(normalize_data,axis=1,result_type='broadcast')\ndf_test_flux_psd = df_test_flux_norm.apply(psd_calculation,axis=1,sps=sps,window='hann',nr=nr,result_type='expand')\ndf_test_flux_psd.head()","74852e9d":"fig, (ax1,ax2) = plt.subplots(2,figsize=(15,5))\nfig.suptitle('Time history with planet, index 0, Normalize and psd')\n\nax1.plot(time,df_test_flux_norm.iloc[0,:])\nax1.set(xlabel='time(hrs)', ylabel='flux')\nax1.grid()\n\nax2.plot(freq,df_test_flux_psd.iloc[0,:])\nax2.set(xlabel='Frequency(Hz)', ylabel='flux power')\nax2.grid()","9a11aa73":"# training and test data\nX_train = df_train_flux_psd\ny_train = df_train['LABEL']\nX_test = df_test_flux_psd\ny_test = df_test['LABEL']","f2d66d9a":"weights = {1:1.0, 2:5.0}\nsvcf = SVC(kernel='linear',C=1,class_weight=weights).fit(X_train,y_train)\ny_train_pred = svcf.predict(X_train)\ny_test_pred = svcf.predict(X_test)","c3a7de0e":"print(confusion_matrix(y_train, y_train_pred, labels=[1, 2]))\nprint(classification_report(y_train, y_train_pred, labels=[1,2]))","faa21c7a":"print(confusion_matrix(y_test, y_test_pred))\nprint(classification_report(y_test, y_test_pred))","c87c998c":"### Generate testing dataframe.","d70dc179":"# Exoplanet Prediction ","7db3b5e4":"### Generate training dataframe by applying normalizing function","2d93c4dd":"Subtract the trend from the time history","bd88c90f":"Plot sample time history with planet","e3a93db7":"Smooth time history using a Savitzky-Golay filter","348e2a7b":"Subtract the mean from the time history","1f812d3a":"### Read test dataset","c42f76ca":"Calculate power spectral density of the signal","a952b897":"Kepler data are available in two cadences, long cadence (LC) and short cadence (SC). Each cadence is composed of multiple 6.02-s exposures with associated 0.52-s readout times (Gilliland et al. 2010b).  The LC data integrate over 270 exposures to give 29.4-min observations, whereas the SC data contain nine exposures giving one data point every 58.9-s","20c1a615":"###  Support Vector Machine","031caa26":"Revised function for normalizing the data. Use Differencing in place of Savitzky-Golay filter.  Also increase the psd ananlysis frequency resolution using nr = 256","a4ab8d5d":"###  Support Vector Machine","1c4ee417":"Check that this wored by ploting index 0 and comparing to above plots","71eab313":"### Generate training dataframe by applying normalizing function\n","ccbc5d77":"### Generate testing dataframe.\u00b6","0da47126":"### Generate training dataframe by applying normalizing function","591799e0":"Normalize using standard deviation","4006dee3":"Check that this wored by ploting index 0 and comparing to above plots","3cc1d48f":"### Read training dataset","3a49239e":"### import packages","7a5d69bf":"### Lets try again using a different method of normalizing the time history","7b18cd93":"###  test dataset"}}