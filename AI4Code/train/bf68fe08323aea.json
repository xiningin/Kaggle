{"cell_type":{"846665f3":"code","13cdf3d0":"code","31d8fab8":"code","df8f5d1c":"code","a9c5edb5":"code","8c1c64b7":"code","3a422eee":"code","9b9fb62b":"code","efef8c1b":"code","50d957e3":"code","627abd69":"code","4833f977":"code","57ad85b2":"code","11e5ef07":"code","48a56ca6":"code","5ca6a134":"code","d90e3e69":"code","1ea9db23":"code","d090d963":"code","1486e297":"code","928eb497":"code","eed6b7ee":"code","23ea441a":"code","c2abaedb":"code","9c14856c":"code","e1a03f00":"code","07131336":"code","f1bdeadf":"code","c616c66c":"code","87d541ec":"code","9b694c55":"code","fc9c2ed2":"code","dc0ed34c":"code","6a6e379d":"code","fe6dc0c4":"code","2fd7eab6":"code","2bf637ea":"code","6a32062a":"code","09945526":"code","b7a27bc2":"code","68a00442":"code","4d0d15ca":"code","cb12b225":"code","e9c3f588":"code","52c3c258":"code","dca211de":"code","4f5e7a26":"code","1e9457c6":"code","a8bdf557":"code","18df1379":"code","e73b3b1f":"markdown","d6aca3bb":"markdown","bcf0ef26":"markdown","b4131475":"markdown","b4b08dc4":"markdown","38e04ba1":"markdown","afa847cf":"markdown","670d7641":"markdown","84921149":"markdown","64ce9d8e":"markdown","d8526f2d":"markdown"},"source":{"846665f3":"from warnings import filterwarnings\nfilterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import StratifiedKFold, train_test_split, cross_val_score, RandomizedSearchCV, KFold, GridSearchCV\nfrom sklearn.metrics import SCORERS, confusion_matrix, classification_report, accuracy_score, roc_curve, roc_auc_score\n\nfrom sklearn.linear_model import LogisticRegression, PassiveAggressiveClassifier, RidgeClassifier, SGDClassifier, Perceptron\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom sklearn.ensemble import AdaBoostClassifier, BaggingClassifier, ExtraTreesClassifier, GradientBoostingClassifier, RandomForestClassifier\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","13cdf3d0":"data = pd.read_csv(\".\/..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")","31d8fab8":"data.head()","df8f5d1c":"data.shape","a9c5edb5":"data[\"quality\"].value_counts(normalize=True)*100","8c1c64b7":"data.isna().sum()","3a422eee":"col=\"fixed acidity\"\ndata_gby_fixed_acidity = data[['quality', col]].groupby(['quality']).mean().reset_index().sort_values(by=col, ascending=False)\n\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x=\"quality\", y=col, data=data_gby_fixed_acidity)\n\nfor p in ax.patches:\n    ax.annotate('{:.2f}'.format(p.get_height()), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nplt.ylim(0,10)\nplt.title(f\"Quality vs mean {col}\", fontsize=16)\nplt.ylabel(f\"mean {col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","9b9fb62b":"plt.subplots(figsize=(15,8))\ncol='fixed acidity'\nax = sns.boxplot(x=data[\"quality\"], y=data[col])\n\n\n\nplt.ylim(0,20)\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","efef8c1b":"col=\"fixed acidity\"\nplt.subplots(figsize=(15,8))\nax = sns.violinplot(x=\"quality\", y=col, data=data)\n\n\nplt.ylim(0,20)\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","50d957e3":"col=\"volatile acidity\"\ndata_gby_fixed_acidity = data[['quality', col]].groupby(['quality']).mean().reset_index().sort_values(by=col, ascending=False)\n\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x=\"quality\", y=col, data=data_gby_fixed_acidity)\n\nfor p in ax.patches:\n    ax.annotate('{:.2f}'.format(p.get_height()), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nplt.ylim(0,1)\nplt.title(f\"Quality vs mean {col}\", fontsize=16)\nplt.ylabel(f\"mean {col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","627abd69":"plt.subplots(figsize=(15,8))\ncol='volatile acidity'\nax = sns.boxplot(x=data[\"quality\"], y=data[col])\n\n\n\nplt.ylim(0,2)\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","4833f977":"col=\"volatile acidity\"\nplt.subplots(figsize=(15,8))\nax = sns.violinplot(x=\"quality\", y=col, data=data)\n\n\nplt.ylim(0,3)\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","57ad85b2":"col=\"citric acid\"\ndata_gby_fixed_acidity = data[['quality', col]].groupby(['quality']).mean().reset_index().sort_values(by=col, ascending=False)\n\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x=\"quality\", y=col, data=data_gby_fixed_acidity)\n\nfor p in ax.patches:\n    ax.annotate('{:.2f}'.format(p.get_height()), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nplt.ylim(0,.5)\nplt.title(f\"Quality vs mean {col}\", fontsize=16)\nplt.ylabel(f\"mean {col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","11e5ef07":"plt.subplots(figsize=(15,8))\ncol='citric acid'\nax = sns.boxplot(x=data[\"quality\"], y=data[col])\n\n\n\nplt.ylim(-.5,1)\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","48a56ca6":"col=\"citric acid\"\nplt.subplots(figsize=(15,8))\nax = sns.violinplot(x=\"quality\", y=col, data=data)\n\n\nplt.ylim(-.5,2)\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","5ca6a134":"col=\"residual sugar\"\ndata_gby_fixed_acidity = data[['quality', col]].groupby(['quality']).mean().reset_index().sort_values(by=col, ascending=False)\n\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x=\"quality\", y=col, data=data_gby_fixed_acidity)\n\nfor p in ax.patches:\n    ax.annotate('{:.2f}'.format(p.get_height()), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nplt.ylim(0,4)\nplt.title(f\"Quality vs mean {col}\", fontsize=16)\nplt.ylabel(f\"mean {col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","d90e3e69":"plt.subplots(figsize=(15,8))\ncol='residual sugar'\nax = sns.boxplot(x=data[\"quality\"], y=data[col])\n\n\n\n#plt.ylim(-.5,1)\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","1ea9db23":"col=\"residual sugar\"\nplt.subplots(figsize=(15,8))\nax = sns.violinplot(x=\"quality\", y=col, data=data)\n\n\n#plt.ylim(-.5,2)\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","d090d963":"col=\"chlorides\"\ndata_gby_fixed_acidity = data[['quality', col]].groupby(['quality']).mean().reset_index().sort_values(by=col, ascending=False)\n\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x=\"quality\", y=col, data=data_gby_fixed_acidity)\n\nfor p in ax.patches:\n    ax.annotate('{:.2f}'.format(p.get_height()), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nplt.title(f\"Quality vs mean {col}\", fontsize=16)\nplt.ylabel(f\"mean {col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","1486e297":"plt.subplots(figsize=(15,8))\ncol='chlorides'\nax = sns.boxplot(x=data[\"quality\"], y=data[col])\n\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","928eb497":"col=\"chlorides\"\nplt.subplots(figsize=(15,8))\nax = sns.violinplot(x=\"quality\", y=col, data=data)\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","eed6b7ee":"col=\"free sulfur dioxide\"\ndata_gby_fixed_acidity = data[['quality', col]].groupby(['quality']).mean().reset_index().sort_values(by=col, ascending=False)\n\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x=\"quality\", y=col, data=data_gby_fixed_acidity)\n\nfor p in ax.patches:\n    ax.annotate('{:.2f}'.format(p.get_height()), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nplt.ylim((0,18))    \nplt.title(f\"Quality vs mean {col}\", fontsize=16)\nplt.ylabel(f\"mean {col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","23ea441a":"plt.subplots(figsize=(15,8))\nax = sns.boxplot(x=data[\"quality\"], y=data[col])\n\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","c2abaedb":"plt.subplots(figsize=(15,8))\nax = sns.violinplot(x=\"quality\", y=col, data=data)\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","9c14856c":"col=\"total sulfur dioxide\"\ndata_gby_fixed_acidity = data[['quality', col]].groupby(['quality']).mean().reset_index().sort_values(by=col, ascending=False)\n\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x=\"quality\", y=col, data=data_gby_fixed_acidity)\n\nfor p in ax.patches:\n    ax.annotate('{:.2f}'.format(p.get_height()), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nplt.ylim((0,60))    \nplt.title(f\"Quality vs mean {col}\", fontsize=16)\nplt.ylabel(f\"mean {col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","e1a03f00":"plt.subplots(figsize=(15,8))\nax = sns.boxplot(x=data[\"quality\"], y=data[col])\n\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","07131336":"plt.subplots(figsize=(15,8))\nax = sns.violinplot(x=\"quality\", y=col, data=data)\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","f1bdeadf":"col=\"density\"\ndata_gby_fixed_acidity = data[['quality', col]].groupby(['quality']).mean().reset_index().sort_values(by=col, ascending=False)\n\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x=\"quality\", y=col, data=data_gby_fixed_acidity)\n\nfor p in ax.patches:\n    ax.annotate('{:.2f}'.format(p.get_height()), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\n#plt.ylim((0,60))    \nplt.title(f\"Quality vs mean {col}\", fontsize=16)\nplt.ylabel(f\"mean {col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","c616c66c":"plt.subplots(figsize=(15,8))\nax = sns.boxplot(x=data[\"quality\"], y=data[col])\n\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","87d541ec":"plt.subplots(figsize=(15,8))\nax = sns.violinplot(x=\"quality\", y=col, data=data)\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","9b694c55":"col=\"pH\"\ndata_gby_fixed_acidity = data[['quality', col]].groupby(['quality']).mean().reset_index().sort_values(by=col, ascending=False)\n\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x=\"quality\", y=col, data=data_gby_fixed_acidity)\n\nfor p in ax.patches:\n    ax.annotate('{:.2f}'.format(p.get_height()), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nplt.ylim((0,4))    \nplt.title(f\"Quality vs mean {col}\", fontsize=16)\nplt.ylabel(f\"mean {col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","fc9c2ed2":"plt.subplots(figsize=(15,8))\nax = sns.boxplot(x=data[\"quality\"], y=data[col])\n\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","dc0ed34c":"plt.subplots(figsize=(15,8))\nax = sns.violinplot(x=\"quality\", y=col, data=data)\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","6a6e379d":"col=\"sulphates\"\ndata_gby_fixed_acidity = data[['quality', col]].groupby(['quality']).mean().reset_index().sort_values(by=col, ascending=False)\n\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x=\"quality\", y=col, data=data_gby_fixed_acidity)\n\nfor p in ax.patches:\n    ax.annotate('{:.2f}'.format(p.get_height()), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nplt.ylim((0,1))    \nplt.title(f\"Quality vs mean {col}\", fontsize=16)\nplt.ylabel(f\"mean {col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","fe6dc0c4":"plt.subplots(figsize=(15,8))\nax = sns.boxplot(x=data[\"quality\"], y=data[col])\n\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","2fd7eab6":"plt.subplots(figsize=(15,8))\nax = sns.violinplot(x=\"quality\", y=col, data=data)\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","2bf637ea":"col=\"alcohol\"\ndata_gby_fixed_acidity = data[['quality', col]].groupby(['quality']).mean().reset_index().sort_values(by=col, ascending=False)\n\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x=\"quality\", y=col, data=data_gby_fixed_acidity)\n\nfor p in ax.patches:\n    ax.annotate('{:.2f}'.format(p.get_height()), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nplt.ylim((0,13))    \nplt.title(f\"Quality vs mean {col}\", fontsize=16)\nplt.ylabel(f\"mean {col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","6a32062a":"plt.subplots(figsize=(15,8))\nax = sns.boxplot(x=data[\"quality\"], y=data[col])\n\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","09945526":"plt.subplots(figsize=(15,8))\nax = sns.violinplot(x=\"quality\", y=col, data=data)\n\nplt.title(f\"Quality vs {col}\", fontsize=16)\nplt.ylabel(f\"{col}\", fontsize=14)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.show()","b7a27bc2":"plt.subplots(figsize=(19,9))\nsns.heatmap(data.corr(), annot=True, fmt='.2f')\nplt.show()","68a00442":"#Making binary classificaion for the response variable.\n#Dividing wine as good and bad by giving the limit for the quality\nbins = (2, 6.5, 8)\ngroup_names = ['bad', 'good']\ndata['quality'] = pd.cut(data['quality'], bins = bins, labels = group_names)","4d0d15ca":"data.head()","cb12b225":"#Now lets assign a labels to our quality variable\nlabel_quality = LabelEncoder()\n#Bad becomes 0 and good becomes 1 \ndata['quality'] = label_quality.fit_transform(data['quality'])\ndata['quality'].value_counts()","e9c3f588":"X = data.drop(columns=['quality'])\ny = data['quality']","52c3c258":"X_train, X_valid, y_train, y_valid = train_test_split(X,y,stratify=y,shuffle=True)","dca211de":"def model_name(key):\n    model_dict = {\n        'lrc': \"LogisticRegression\", \n        'pac': \"PassiveAggressiveClassifier\",\n        'rdc': \"RidgeClassifier\",\n        'sgc': \"SGDClassifier\",\n        'pcn': \"Perceptron\",\n        'gpc': \"GaussianProcessClassifier\",\n        'lda': \"LinearDiscriminantAnalysis\",\n        'qda': \"QuadraticDiscriminantAnalysis\",\n        'knn': \"KNeighborsClassifier\",\n        'dtc': \"DecisionTreeClassifier\", \n        'etc': \"ExtraTreesClassifier\", \n        'knn': \"KNeighborsClassifier\",\n        'gnb': \"GaussianNB\",\n        'bnb': \"BernoulliNB\",\n        'rfc': \"RandomForestClassifier\",\n        'svc': \"SVC\",\n        'lvc': \"LinearSVC\",\n        'nvc': \"NuSVC\",\n        'bgc': \"BaggingClassifier\",\n        'abc': \"AdaBoostClassifier\",\n        'gbc': \"GradientBoostingClassifier\",\n        'lgb': \"LGBMClassifier\",\n        'cgb': \"CatBoostClassifier\",\n        'xgb': \"XGBClassifier\"\n    }\n    return model_dict[key]\n\n\n\ndef init(X, y, scoring='accuracy'):    \n    result = pd.DataFrame(columns=['model', f'mean-{scoring}', f'std-{scoring}'])\n    \n    skf = StratifiedKFold(n_splits=10)\n    model_dict = {\n        'lrc': LogisticRegression(), \n        'pac': PassiveAggressiveClassifier(),\n        'rdc': RidgeClassifier(),\n        'sgc': SGDClassifier(),\n        'pcn': Perceptron(),\n        'gpc': GaussianProcessClassifier(),\n        'lda': LinearDiscriminantAnalysis(),\n        'qda': QuadraticDiscriminantAnalysis(),\n        'knn': KNeighborsClassifier(),\n        'dtc': DecisionTreeClassifier(), \n        'etc': ExtraTreesClassifier(), \n        'knn': KNeighborsClassifier(),\n        'gnb': GaussianNB(),\n        'bnb': BernoulliNB(),\n        'rfc': RandomForestClassifier(),\n        'svc': SVC(),\n        'lvc': LinearSVC(),\n        'nvc': NuSVC(),\n        'bgc': BaggingClassifier(),\n        'abc': AdaBoostClassifier(),\n        'gbc': GradientBoostingClassifier(),\n        'lgb': LGBMClassifier(),\n        'cgb': CatBoostClassifier(verbose=0),\n        'xgb': XGBClassifier()\n    }\n\n    for key in tqdm(model_dict.keys()):\n        res = cross_val_score(model_dict[key], X, y=y, scoring=scoring, cv=skf, n_jobs=-1, verbose=0)\n        res_p = pd.DataFrame(data={\n            'model': [key],\n            f'mean-{scoring}': [res.mean()],\n            f'std-{scoring}': [res.std()]\n        })\n        result = pd.concat([result, res_p], axis=0)\n    result = result.sort_values(by=[f'mean-{scoring}'], ascending=False)\n    \n    fig,ax =  plt.subplots(figsize=(20, 8), sharey=True)\n    plt.title(f\"Model vs mean {scoring}\")\n    auc_chart = sns.barplot(ax = ax, x='model', y=f'mean-{scoring}', data=result)\n    for p in auc_chart.patches:\n        auc_chart.annotate('{:.4f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', fontsize=9)\n    \n    ax.set_ylim((0,1))\n    plt.ylabel(f\"Mean of {scoring}\")\n    plt.xlabel(\"Model\")\n    plt.show()\n    \n    fig,ax =  plt.subplots(figsize=(20, 8), sharey=True)\n    plt.title(f\"Model vs {scoring} standard deviation\")\n    std_chart = sns.barplot(ax = ax, x='model', y=f'std-{scoring}', data=result)\n    for p in std_chart.patches:\n        std_chart.annotate('{:.4f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', fontsize=9)\n    \n    ylim_val = max(result[f'std-{scoring}']) + max(result[f'std-{scoring}'])*.1\n    ax.set_ylim((0,ylim_val))\n    plt.ylabel(f\"Standard deviation of  {scoring}\")\n    plt.xlabel(\"Model\")\n    plt.show()\n    \n    return result","4f5e7a26":"res = init(X_train, y_train, scoring='accuracy')","1e9457c6":"res","a8bdf557":"model_name('lgb')","18df1379":"%%time\nclf = LGBMClassifier(verbose=0)\nclf.fit(X_train, y_train)\n\nprint(clf.score(X_train, y_train), clf.score(X_valid, y_valid))\nprint(\"================================\")\n\nprint(\"accuracy_score\")\nprint(accuracy_score(y_train, clf.predict(X_train)))\n\nprint(\"================================\")\nprint(\"classification_report train\")\nprint(print(classification_report(y_train, clf.predict(X_train))))\n\nprint(\"================================\")\nprint(\"classification_report test\")\nprint(print(classification_report(y_valid, clf.predict(X_valid))))","e73b3b1f":"### Deep dive into pH","d6aca3bb":"### Deep dive into chlorides","bcf0ef26":"### Deep dive into Residual Sugar","b4131475":"### Deep dive into citric acid","b4b08dc4":"### Deep Dive into 'Fixed Acidity'","38e04ba1":"### Deep dive into volatile acidity","afa847cf":"### Deep dive into sulphates","670d7641":"### Deep dive into density","84921149":"### Deep dive into total sulfur dioxide","64ce9d8e":"### Deep dive into 'free sulfur dioxide'","d8526f2d":"### Deep dive into alcohol"}}