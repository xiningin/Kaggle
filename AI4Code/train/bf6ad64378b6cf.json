{"cell_type":{"cbd2f940":"code","b518ffb3":"code","1270155c":"code","5ec4d904":"code","7910e815":"code","878918bf":"code","e9f80a8e":"code","4026ee0d":"code","aa7f77ea":"code","649d47e7":"code","fa8dbd31":"code","55244a09":"code","12da4f21":"code","6531fc1e":"code","362621e0":"code","268790f7":"code","e4190b2b":"code","6f3bacb8":"code","bf6312cc":"code","8ade8b1e":"code","9b5fcba8":"code","c6c4c497":"code","46f067bf":"code","e86c1cd6":"code","7bfc8626":"code","8582d88f":"code","9e5e691f":"code","8cf75ce4":"code","8f6f1ae8":"code","00ccb5cf":"code","a532d710":"code","b1e03b03":"code","57ba3e42":"code","c95d9861":"markdown","8df863cc":"markdown","98cffcd6":"markdown","ea3f3ec7":"markdown","6bccc4b5":"markdown","6972ce5d":"markdown","04641e76":"markdown","82cc956a":"markdown","64b776ab":"markdown","a099be80":"markdown","7592996e":"markdown","3f55d650":"markdown","aab5f487":"markdown","5412e5e0":"markdown","dbf139fc":"markdown","62c2d929":"markdown","2241275d":"markdown","4b2f2945":"markdown","9ecc2ce4":"markdown","44d5a6cf":"markdown","8c7aa4c5":"markdown","5a5b747d":"markdown","6ba529fb":"markdown"},"source":{"cbd2f940":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\nimport statistics\n\n# visualization\nimport seaborn as sns\nsns.set(style='white', context='notebook', palette='deep')\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\n\n\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n","b518ffb3":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\n","1270155c":"display(\"train data\", train_df)\ndisplay(\"test data\", test_df)\n","5ec4d904":"print(train_df.columns.values)\nprint(train_df.describe())","7910e815":"print(train_df.describe(include=['O']))","878918bf":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","e9f80a8e":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","4026ee0d":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","aa7f77ea":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","649d47e7":"# Correlation matrix between numerical values (SibSp Parch Age and Fare values) and Survived \ng = sns.heatmap(train_df[[\"Survived\",\"SibSp\",\"Parch\",\"Age\",\"Fare\"]].corr(),\n                annot=True, fmt = \".2f\", cmap = \"coolwarm\")","fa8dbd31":"# Explore SibSp feature vs Survived\ng = sns.catplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind=\"bar\", height = 6 , \npalette = \"muted\")\ng.despine(left=True)\ng = g.set_ylabels(\"survival probability\")","55244a09":"#Explore Parch feature vs Survived\ng  = sns.factorplot(x=\"Parch\",y=\"Survived\",data=train_df,kind=\"bar\", height = 6 , \npalette = \"muted\")\ng.despine(left=True)\ng = g.set_ylabels(\"survival probability\")","12da4f21":"# Explore Age vs Survived\ng = sns.FacetGrid(train_df, col='Survived')\ng = g.map(sns.distplot, \"Age\")","6531fc1e":"# Explore Age distibution \ng = sns.kdeplot(train_df[\"Age\"][(train_df[\"Survived\"] == 0) & (train_df[\"Age\"].notnull())], color=\"Red\", shade = True)\ng = sns.kdeplot(train_df[\"Age\"][(train_df[\"Survived\"] == 1) & (train_df[\"Age\"].notnull())], ax =g, color=\"Blue\", shade= True)\ng.set_xlabel(\"Age\")\ng.set_ylabel(\"Frequency\")\ng = g.legend([\"Not Survived\",\"Survived\"])","362621e0":"# grid = sns.FacetGrid(train_df, col='Pclass', hue='Gender')\ngrid = sns.FacetGrid(train_df, row='Pclass', col='Sex', height=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","268790f7":"#Join train and test datasets in order to obtain the same number of features during categorical conversion\n\ncombined =  pd.concat(objs=[train_df, test_df], axis=0).reset_index(drop=True)\ncombined","e4190b2b":"# Fill empty and NaNs values with NaN\ncombined = combined.fillna(np.nan)\n\n# Check for Null values\ncombined.isnull().sum()","6f3bacb8":"#Fill Embarked nan values of dataset set with the most frequent value\nembarked_mode=statistics.mode(combined[\"Embarked\"])\ncombined[\"Embarked\"] = combined[\"Embarked\"].fillna(embarked_mode)","bf6312cc":"# Explore Age vs Sex, Parch , Pclass and SibSP\ng = sns.catplot(y=\"Age\",x=\"Sex\",data=combined,kind=\"box\")\ng = sns.catplot(y=\"Age\",x=\"Sex\",hue=\"Pclass\", data=combined,kind=\"box\")\ng = sns.catplot(y=\"Age\",x=\"Parch\", data=combined,kind=\"box\")\ng = sns.catplot(y=\"Age\",x=\"SibSp\", data=combined,kind=\"box\")","8ade8b1e":"# convert Sex into categorical value 0 for male and 1 for female\ncombined[\"Sex\"] = combined[\"Sex\"].map({\"male\": 0, \"female\":1})\n\ng = sns.heatmap(combined[[\"Age\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),cmap=\"BrBG\",annot=True)","9b5fcba8":"# Filling missing value of Age \n\n## Fill Age with the median age of similar rows according to Pclass, Parch and SibSp\n# Index of NaN age rows\nindex_NaN_age = list(combined[\"Age\"][combined[\"Age\"].isnull()].index)\n\nfor i in index_NaN_age:\n    age_med = combined[\"Age\"].median()\n    age_pred = combined[\"Age\"][((combined['SibSp'] == combined.iloc[i][\"SibSp\"]) \n                                & (combined['Parch'] == combined.iloc[i][\"Parch\"]) \n                                & (combined['Pclass'] == combined.iloc[i][\"Pclass\"]))].median()\n    if not np.isnan(age_pred) :\n        combined['Age'].iloc[i] = age_pred\n    else :\n        combined['Age'].iloc[i] = age_med","c6c4c497":"# Get Title from Name\ncombined_title = [i.split(\",\")[1].split(\".\")[0].strip() for i in combined[\"Name\"]]\ncombined[\"Title\"] = pd.Series(combined_title)\ncombined[\"Title\"].head()","46f067bf":"g = sns.countplot(x=\"Title\",data=combined)\ng = plt.setp(g.get_xticklabels(), rotation=45) ","e86c1cd6":"title=combined[\"Title\"].unique()\ntitle","7bfc8626":"# Convert to categorical values Title \ncombined[\"Title\"] = combined[\"Title\"].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ncombined[\"Title\"] = combined[\"Title\"].map({\"Master\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Mr\":2, \"Rare\":3})\ncombined[\"Title\"] = combined[\"Title\"].astype(int)\n\ng = sns.catplot(x=\"Title\",y=\"Survived\",data=combined,kind=\"bar\")\ng = g.set_xticklabels([\"Master\",\"Miss-Mrs\",\"Mr\",\"Rare\"])\ng = g.set_ylabels(\"survival probability\")\n","8582d88f":"# Create a family size descriptor from SibSp and Parch\ncombined[\"Fsize\"] = combined[\"SibSp\"] + combined[\"Parch\"] + 1","9e5e691f":"g = sns.catplot(x=\"Fsize\",y=\"Survived\",data=combined,kind=\"bar\")\ng = g.set_ylabels(\"survival probability\")\n","8cf75ce4":"# Create new feature of family size\ncombined['Single'] = combined['Fsize'].map(lambda s: 1 if s == 1 else 0)\ncombined['SmallF'] = combined['Fsize'].map(lambda s: 1 if 2 <= s <= 4 else 0)\ncombined['LargeF'] = combined['Fsize'].map(lambda s: 1 if s >= 5 else 0)\n","8f6f1ae8":"# convert to indicator values Title and Embarked \ncombined = pd.get_dummies(combined, columns = [\"Title\"])\ncombined = pd.get_dummies(combined, columns = [\"Embarked\"], prefix=\"Em\")\ncombined.head()\n","00ccb5cf":"combined.columns.values","a532d710":"# Create categorical values for Pclass\ncombined[\"Pclass\"] = combined[\"Pclass\"].astype(\"category\")\ncombined = pd.get_dummies(combined, columns = [\"Pclass\"],prefix=\"Pc\")","b1e03b03":"# Drop variable\ncombined.drop(labels = [\"Name\",'SibSp', 'Parch','Fsize','Cabin',\"Ticket\"], axis = 1, inplace = True)\n\n#you may decide some are useful and retain. Adding a few of the above will improve the final solution. \n# try it out. see if you can figure out what helps and what does not\n\n","57ba3e42":"combined.info()","c95d9861":"# Import Libraries","8df863cc":"What other vizualisation do you want to try out?\n\nWhat else would you like to do as part of EDA?\n\nTry this out and let me know in comments\n\nModeling is in following notebook:https:\/\/www.kaggle.com\/kmldas\/titanic-ml-starter-dt-rf\/\n\n\nThanks!!","98cffcd6":"Women & children first! Followed by royalty. \nCommoners are low priority!","ea3f3ec7":"Continous: Age, Fare. \n\nDiscrete: SibSp, Parch.\n\nOrdinal: Pclass.\n\nCategorical: Survived, Sex, Ticket, cabin and Embarked. \n\n","6bccc4b5":"number of parents \/ children aboard the Titanic?","6972ce5d":"The correlation map confirms the factorplots observations except for Parch. Age is not correlated with Sex, but is negatively correlated with Pclass, Parch and SibSp.","04641e76":"Any thoughts on number of siblings\/ spouses on baord (sibsp)?","82cc956a":"Which of the fields are relevant?","64b776ab":"# Read the data","a099be80":"Notice anything interesting in the charts?\n\n\nMake some more... \n\nHere is how to make a combo chart with 3 variables.. please add more!!\n","7592996e":"# Titanic EDA & Visualization Tutorial for Beginners","3f55d650":"# Data Manipulation","aab5f487":"Is Pclass (Ticket class) a useful metrics or can it be discarded?","5412e5e0":"Note, categorical data columns are not shown in the describe function\n\nAlso note missing values in age!\n\nsome values like Pclass which are shown as numerical are actually ordinal or may be assiged as categorical\n\n\nwhich columns are continuous, discrete, ordinal and categorical? \n\n\n","dbf139fc":"# EDA","62c2d929":"Lets observe the categorical values as well!","2241275d":"# Some visualizations?","4b2f2945":"The 1st class passengers or the rich ones have a higher probability to survive!!","9ecc2ce4":"What do you observe?\n\nThe target varibale \"Survived\" is not present in the test data\n\nthe test data as 1\/2 the data of training data\n\nsome data are numberical and some are categorical","44d5a6cf":"# Source and Acknowledgements:\n\n1. https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions\n\n2. https:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling\n\n3. https:\/\/www.kaggle.com\/ldfreeman3\/a-data-science-framework-to-achieve-99-accuracy","8c7aa4c5":"![https:\/\/www.historic-uk.com\/wp-content\/uploads\/2017\/04\/the-sinking-of-the-rms-titanic.jpg](https:\/\/www.historic-uk.com\/wp-content\/uploads\/2017\/04\/the-sinking-of-the-rms-titanic.jpg)\n\nThe aim of the Titanic competetion is figure out which of the passengers in the \"test.csv\" file will survive based on the data analysis of people in the \"train.csv\"\n\nIt is a classification problem, and can be solved by logistic regression \/decision tree\/random forest\n\nThis notebook is limited to EDA and visualization and does not get into modelling.\nModeling is in following notebook:https:\/\/www.kaggle.com\/kmldas\/titanic-ml-starter-dt-rf\/\n\nHope this helps!","5a5b747d":"what can you infer?","6ba529fb":"What about gender?"}}