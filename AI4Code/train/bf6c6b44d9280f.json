{"cell_type":{"a42ed53f":"code","ae1c08db":"code","a9cf18bf":"code","355ec0ce":"code","b8859aae":"code","2ed01a1b":"code","0dcc5388":"code","03ca7fe5":"code","b103b8f3":"code","7e72aa8a":"code","c12bcbab":"code","415603fc":"code","a04acad9":"code","6c33a207":"code","07ae24e5":"code","43512059":"code","1cca8d1f":"code","3aa9a967":"code","343d952f":"code","4146ad78":"code","05fa722b":"code","043d3e99":"code","e71bbc9a":"code","49f18682":"code","c7de2e25":"code","12f15c06":"code","8ee50ddb":"code","799abc01":"code","b25d8ff8":"code","38981f23":"code","2c9bd6a6":"code","6f9e9d55":"code","3cb8b174":"code","72f81ca7":"code","d526fbd0":"code","8b09491a":"code","0d4e1d80":"code","fbbc22b8":"code","f73100e9":"code","bcb8b44c":"code","43773585":"code","86efa18d":"code","669408ff":"code","896aa829":"code","d62f8b07":"code","236625e6":"code","ac936ed5":"code","48927c4a":"code","dc835b76":"markdown"},"source":{"a42ed53f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ae1c08db":"#%% IMPORTING LIBRARIES \n\nimport os\nimport glob\nimport shutil\nimport json\nimport keras\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport tensorflow as tf\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom collections import Counter","a9cf18bf":"import os","355ec0ce":"os.getcwd()","b8859aae":"\nwork_dir = '..\/input\/cassava-leaf-disease-classification\/'\nos.listdir(work_dir) \ntrain_path = '\/kaggle\/input\/cassava-leaf-disease-classification\/train_images'","2ed01a1b":"os.listdir(work_dir) ","0dcc5388":"train_path","03ca7fe5":"\ndata = pd.read_csv(work_dir + 'train.csv')","b103b8f3":"data.shape","7e72aa8a":"data.head(3)","c12bcbab":"data['label'].value_counts()","415603fc":"data['label'].value_counts().plot(kind='bar')","a04acad9":"f = open(work_dir + 'label_num_to_disease_map.json')\nreal_labels = json.load(f)","6c33a207":"real_labels","07ae24e5":"real_labels.items()","43512059":"real_labels = {int(k):v for k,v in real_labels.items()}","1cca8d1f":"real_labels","3aa9a967":"data['class_name'] = data.label.map(real_labels)","343d952f":"data.head(3)","4146ad78":"data['class_name'].value_counts().plot(kind='bar')","05fa722b":"from sklearn.model_selection import train_test_split\ntrain,val = train_test_split(data, test_size = 0.1, random_state = 42, stratify = data['class_name'])","043d3e99":"train.shape","e71bbc9a":"val.shape","49f18682":"val['class_name'].value_counts().plot(kind='bar')","c7de2e25":"from keras.preprocessing.image import ImageDataGenerator","12f15c06":"IMG_SIZE = 224\nsize = (IMG_SIZE,IMG_SIZE)\nn_CLASS = 5","8ee50ddb":"#resnet_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))","799abc01":"from  tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","b25d8ff8":"#model.add(ResNet50(include_top = False, pooling = RESNET50_POOLING_AVERAGE, weights = resnet_weights_path))","38981f23":"#tf.keras.applications.resnet.preprocess_input","2c9bd6a6":"from tensorflow.keras.applications.vgg16 import VGG16","6f9e9d55":"\ndatagen = ImageDataGenerator(\n                    preprocessing_function = tf.keras.applications.vgg16.preprocess_input,\n                    rotation_range = 40,\n                    width_shift_range = 0.2,\n                    height_shift_range = 0.2,\n                    shear_range = 0.2,\n                    zoom_range = 0.2,\n                    horizontal_flip = True,\n                    vertical_flip = True,\n                    fill_mode = 'nearest')\n\ntrain_set = datagen.flow_from_dataframe(train,\n                         directory = train_path,\n                         seed=42,\n                         x_col = 'image_id',\n                         y_col = 'class_name',\n                         target_size = size,\n                         #color_mode=\"rgb\",\n                         class_mode = 'categorical',\n                         interpolation = 'nearest',\n                         shuffle = True,\n                         batch_size = 64)\n                         #target_size=(224, 224))\n\nval_set = datagen.flow_from_dataframe(val,\n                         directory = train_path,\n                         seed=42,\n                         x_col = 'image_id',\n                         y_col = 'class_name',\n                         target_size = size,\n                         #color_mode=\"rgb\",\n                         class_mode = 'categorical',\n                         interpolation = 'nearest',\n                         shuffle = True,\n                         batch_size = 64)\n                         #target_size=(224, 224))\n","3cb8b174":"from tensorflow.keras.applications.vgg16 import VGG16\nfrom keras.models import Sequential\nfrom keras.layers import GlobalAveragePooling2D, Flatten, Dense, Dropout\nfrom keras.optimizers import RMSprop, Adam\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom tensorflow.keras.applications import EfficientNetB3","72f81ca7":"from tensorflow.keras.applications.vgg16 import VGG16","d526fbd0":"from keras.applications.resnet50 import ResNet50\nfrom keras.models import Model\nimport keras\n","8b09491a":"import keras\n#\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/\nfirst_model = keras.models.load_model('\/kaggle\/input\/model-files\/Cassava_best_model.h5')\n\n#first_model = \nfirst_model.summary()","0d4e1d80":"n_CLASS","fbbc22b8":"keras.utils.plot_model(first_model)","f73100e9":"EPOCHS = 60\nSTEP_SIZE_TRAIN = train_set.n\/\/train_set.batch_size\nSTEP_SIZE_VALID = val_set.n\/\/val_set.batch_size","bcb8b44c":"train_set.batch_size","43773585":"STEP_SIZE_TRAIN","86efa18d":"#%% FITTING THE MODEL\n\ndef Model_fit():\n    \n    #leaf_model = None\n    \n    main_model = first_model\n    \n    '''Compiling the model'''\n    \n    loss = tf.keras.losses.CategoricalCrossentropy(from_logits = False,\n                                                   label_smoothing=0.0001,\n                                                   name='categorical_crossentropy' )\n    \n    first_model.compile(optimizer = Adam(learning_rate = 1e-3),\n                        loss = loss, #'categorical_crossentropy'\n                        metrics = ['categorical_accuracy']) #'acc'\n    \n    # Stop training when the val_loss has stopped decreasing for 5 epochs.\n    es = EarlyStopping(monitor='val_loss', mode='min', patience=5,\n                       restore_best_weights=True, verbose=1)\n    \n    # Save the model with the minimum validation loss\n    checkpoint_cb = ModelCheckpoint(\"Cassava_best_model.h5\",\n                                    save_best_only=True,\n                                    monitor = 'val_loss',\n                                    mode='min')\n    \n    # reduce learning rate\n    reduce_lr = ReduceLROnPlateau(monitor = 'val_loss',\n                                  factor = 0.3,\n                                  patience = 3,\n                                  min_lr = 1e-5,\n                                  mode = 'min',\n                                  verbose = 1)\n    \n    history = main_model.fit(train_set,\n                             validation_data = val_set,\n                             epochs= EPOCHS,\n                             batch_size = 64,\n                             #class_weight = d_class_weights,\n                             steps_per_epoch = STEP_SIZE_TRAIN,\n                             validation_steps = STEP_SIZE_VALID,\n                             callbacks=[es, checkpoint_cb, reduce_lr])\n    \n    first_model.save('Cassava_model'+'.h5')  \n    \n    return history","669408ff":"results = Model_fit()","896aa829":"#%% PLOTTING RESULTS (Train vs Validation FOLDER 1)\n\ndef Train_Val_Plot(acc,val_acc,loss,val_loss):\n    \n    fig, (ax1, ax2) = plt.subplots(1,2, figsize= (15,10))\n    fig.suptitle(\" MODEL'S METRICS VISUALIZATION \", fontsize=20)\n\n    ax1.plot(range(1, len(acc) + 1), acc)\n    ax1.plot(range(1, len(val_acc) + 1), val_acc)\n    ax1.set_title('History of Accuracy', fontsize=15)\n    ax1.set_xlabel('Epochs', fontsize=15)\n    ax1.set_ylabel('Accuracy', fontsize=15)\n    ax1.legend(['training', 'validation'])\n\n\n    ax2.plot(range(1, len(loss) + 1), loss)\n    ax2.plot(range(1, len(val_loss) + 1), val_loss)\n    ax2.set_title('History of Loss', fontsize=15)\n    ax2.set_xlabel('Epochs', fontsize=15)\n    ax2.set_ylabel('Loss', fontsize=15)\n    ax2.legend(['training', 'validation'])\n    plt.show()\n    \n\nTrain_Val_Plot(results.history['categorical_accuracy'],results.history['val_categorical_accuracy'],\n               results.history['loss'],results.history['val_loss'])","d62f8b07":"# Evaluating the model\n\nimport keras\n\nfinal_model = keras.models.load_model('Cassava_best_model.h5')","236625e6":"TEST_DIR = '\/kaggle\/input\/cassava-leaf-disease-classification\/test_images\/'\ntest_images = os.listdir(TEST_DIR)\npredictions = []\n\nfor image in test_images:\n    img = Image.open(TEST_DIR + image)\n    img = img.resize(size)\n    img = np.expand_dims(img, axis=0)\n    predictions.extend(final_model.predict(img).argmax(axis = 1))","ac936ed5":"predictions","48927c4a":"sub = pd.DataFrame({'image_id': test_images, 'label': predictions})\ndisplay(sub)\nsub.to_csv('submission.csv', index = False)","dc835b76":"** Main Links that helped\n1. https:\/\/towardsdatascience.com\/step-by-step-vgg16-implementation-in-keras-for-beginners-a833c686ae6c\n\n2. https:\/\/github.com\/1297rohit\/VGG16-In-Keras\/blob\/master\/VGG16%20in%20Keras.ipynb\n\n3. https:\/\/keras.io\/api\/preprocessing\/image\/**"}}