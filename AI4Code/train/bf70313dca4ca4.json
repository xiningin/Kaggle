{"cell_type":{"79474d5f":"code","b51492b6":"code","f123f365":"code","670908d4":"code","602a1803":"code","3a8c49ad":"code","25c8164f":"code","182d51c2":"code","b7e74f67":"code","3dd28ce6":"code","4b625703":"code","52bd39e1":"code","3402fe4a":"code","793f75ce":"code","3f29a19b":"code","77f2150a":"code","023e9bb1":"code","064b9fe6":"code","fdd73e01":"code","fc635c24":"code","a8e0c520":"code","05e1eba4":"code","c9a2060e":"code","724d6a9a":"code","36e32fa9":"code","76216b3a":"code","39324ffa":"code","42764af5":"code","b4abc47a":"code","8e4580e4":"code","bab0320b":"code","0e509308":"code","c2e6875a":"code","7ee75520":"code","e4c14a63":"code","8a3133bb":"code","e5cafa83":"code","e855307e":"code","885fbca8":"code","962e8ee5":"code","5aa880cc":"code","fc04bd68":"code","029685ca":"code","d3b96dd4":"code","c9ab3722":"code","ed0a4c39":"code","77579920":"code","68c96145":"markdown","c985f711":"markdown","84a6e2a9":"markdown","2816e988":"markdown","90ce2d96":"markdown","3b78050f":"markdown","dcac0285":"markdown","132dfd3a":"markdown","5b6635a6":"markdown","116d04ae":"markdown","9360374d":"markdown","e379e57a":"markdown","3cb1ba96":"markdown","e35bbedb":"markdown","728ab632":"markdown","4c6a91a6":"markdown","50ca3ccb":"markdown","ee089a4c":"markdown","b1795c65":"markdown","422639c6":"markdown","d93a06c9":"markdown"},"source":{"79474d5f":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport seaborn as sns","b51492b6":"# Read csv files\nbike_data1 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202004-divvy-tripdata\/202004-divvy-tripdata.csv')\nbike_data2 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202005-divvy-tripdata\/202005-divvy-tripdata.csv')\nbike_data3 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202006-divvy-tripdata\/202006-divvy-tripdata.csv')\nbike_data4 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202007-divvy-tripdata\/202007-divvy-tripdata.csv')\nbike_data5 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202008-divvy-tripdata\/202008-divvy-tripdata.csv')\nbike_data6 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202009-divvy-tripdata\/202009-divvy-tripdata.csv')\nbike_data7 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202010-divvy-tripdata\/202010-divvy-tripdata.csv')\nbike_data8 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202011-divvy-tripdata\/202011-divvy-tripdata.csv')\nbike_data9 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202012-divvy-tripdata\/202012-divvy-tripdata.csv')\nbike_data10 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202101-divvy-tripdata\/202101-divvy-tripdata.csv')\nbike_data11 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202102-divvy-tripdata\/202102-divvy-tripdata.csv')\nbike_data12 = pd.read_csv('..\/input\/divvy-chicago-bikesharing-data\/202103-divvy-tripdata\/202103-divvy-tripdata.csv')\n\n# Merge the datasets into one dataset using concat. (Number of columns and column names are the same for each dataset)\ndata = [bike_data1, bike_data2, bike_data3, bike_data4, \n        bike_data5, bike_data6, bike_data7, bike_data8, \n        bike_data9, bike_data10, bike_data11, bike_data12]\n\nbike_data = pd.concat(data)","f123f365":"bike_data.head()","670908d4":"# Information about data types for each column, total number of rows, total number of columns\nbike_data.info()","602a1803":"# Number of unique values in each columns\nbike_data.nunique()","3a8c49ad":"# Checking missing values \/ missing data\nbike_data.isnull().sum()","25c8164f":"# Create new dataframe and name it bike_data_v2\nbike_data_v2 = bike_data[['rideable_type','started_at','ended_at','start_station_name','end_station_name','member_casual']].copy()\nbike_data_v2.head()","182d51c2":"# Change the data type of started_at and ended_at column as datetime\nbike_data_v2['started_at'] = pd.to_datetime(bike_data_v2['started_at'])\nbike_data_v2['ended_at'] = pd.to_datetime(bike_data_v2['ended_at'])\n\nbike_data_v2.info()","b7e74f67":"# Rename columns\n\nbike_data_v2 = bike_data_v2.rename(columns={'rideable_type':'bike_type', 'member_casual':'customer_type'})\nbike_data_v2.head()","3dd28ce6":"# Change 'docked_bike' to 'classic_bike'\nbike_data_v2['bike_type'] = bike_data_v2['bike_type'].replace(['docked_bike'],'classic_bike')\n\nprint('bike type: ', bike_data_v2['bike_type'].unique())","4b625703":"# Change 'Burling St (Halsted) & Diversey Pkwy (Temp)' to 'Burling St & Diversey Pkwy'\nbike_data_v2['start_station_name'] = bike_data_v2['start_station_name'].replace(['Burling St (Halsted) & Diversey Pkwy (Temp)'],'Burling St & Diversey Pkwy')\nbike_data_v2['end_station_name'] = bike_data_v2['end_station_name'].replace(['Burling St (Halsted) & Diversey Pkwy (Temp)'],'Burling St & Diversey Pkwy')\n\n# Delete rows with station name HUBBARD ST BIKE CHECKING (LBS-WH-TEST)\nbike_data_v2.drop(bike_data_v2[bike_data_v2['start_station_name'] == 'HUBBARD ST BIKE CHECKING (LBS-WH-TEST)'].index, inplace=True)\nbike_data_v2.drop(bike_data_v2[bike_data_v2['end_station_name'] == 'HUBBARD ST BIKE CHECKING (LBS-WH-TEST)'].index, inplace=True)","52bd39e1":"# Check if there are still station name still in the wrong format\nprint(bike_data_v2[(bike_data_v2['start_station_name'] == 'Burling St (Halsted) & Diversey Pkwy (Temp)')].count(),'\\n')\n\nprint(bike_data_v2[(bike_data_v2['start_station_name'] == 'HUBBARD ST BIKE CHECKING (LBS-WH-TEST)')].count())","3402fe4a":"# Erase (*) and (Temp) at the end of station name\nbike_data_v2['start_station_name'] = bike_data_v2['start_station_name'].str.rstrip('(*) (Temp)')\nbike_data_v2['end_station_name'] = bike_data_v2['end_station_name'].str.rstrip('(*) (Temp)')","793f75ce":"# Check whether the station names still have the (*) and (Temp) or not\nprint(bike_data_v2[(bike_data_v2['start_station_name'] == 'Smith Park (*)')].count(), '\\n')\nprint(bike_data_v2[(bike_data_v2['end_station_name'] == 'Smith Park (*)')].count())","3f29a19b":"# Check the number of start_station_name and end_station_name unique values\nbike_data_v2.nunique()","77f2150a":"bike_data_v2.info()","023e9bb1":"# Fill missing station names with \"Unknown\"\nbike_data_v2 = bike_data_v2.fillna('Unknown')\n\n# Check missing data\nbike_data_v2.isnull().sum()","064b9fe6":"# Create ride_length column, change unit of measurement to minutes\nbike_data_v2['ride_length'] = (bike_data_v2['ended_at']-bike_data_v2['started_at']).astype('timedelta64[s]')\/60\n\nprint(\"Minimum ride_length : \", bike_data_v2['ride_length'].min())\nprint(\"Maximum ride_length : \", bike_data_v2['ride_length'].max())","fdd73e01":"# drop the data points with ride_length less than 0\nbike_data_v2 = bike_data_v2[bike_data_v2['ride_length'] > 0]\nbike_data_v2.info()","fc635c24":"# Search for outliers\nQ1 = bike_data_v2['ride_length'].quantile(0.25)\nQ3 = bike_data_v2['ride_length'].quantile(0.75)\nIQR = Q3 - Q1\nupper_bound = Q3 + 1.5*IQR\nlower_bound = Q1 - 1.5*IQR\nprint(\"Number of data points greater than upper_bound: \\n\",bike_data_v2[(bike_data_v2['ride_length'] > (upper_bound))].count())\nprint(\"Number of data points lower than lower_bound: \\n\",bike_data_v2[(bike_data_v2['ride_length'] < (lower_bound))].count())","a8e0c520":"# Move outliers to a different dataframe\noutliers = bike_data_v2[bike_data_v2['ride_length'] > upper_bound].copy()\n\n# Update dataset\nbike_data_v2 = bike_data_v2[bike_data_v2['ride_length'] < upper_bound].sort_values(by='started_at')\nbike_data_v2.head()","05e1eba4":"# Reset indexes\nbike_data_v2 = bike_data_v2.reset_index(drop=True)\nbike_data_v2.head()","c9a2060e":"# Counting rows that have the same start and end station name, and ride length less than 1 minute\ntemp = bike_data_v2.loc[(bike_data_v2['start_station_name'] == bike_data_v2['end_station_name']) & (bike_data_v2['ride_length']<1)].copy()\ntemp","724d6a9a":"# drop rows that have the same start and end station name, and ride length less than 1 minute\nidx = temp.index.to_list()\nbike_data_v2 = bike_data_v2.drop(idx)\nbike_data_v2.head()","36e32fa9":"# Copy cleaned data to a new dataframe\nbike_data_v3 = bike_data_v2.reset_index(drop=True).copy()\nbike_data_v3.info()","76216b3a":"# Group dataset by 'customer_type' and Week\nweekly_rides = bike_data_v3.groupby([pd.Grouper(key='started_at', freq='1W'),'customer_type'])['ride_length'].mean()\nweekly_rides = weekly_rides.reset_index()","39324ffa":"weekly_rides.tail()","42764af5":"# Rename 'ride_length' column name\nweekly_rides = weekly_rides.rename(columns={'ride_length':'avg_ride_length'})","b4abc47a":"# Group weekly_rides dataframe by 'customer_type' and aggregate ride_length using mean()\navg_weekly_rides = weekly_rides.groupby('customer_type')['avg_ride_length'].mean()\navg_weekly_rides","8e4580e4":"# Visualize\nsns.set_palette('Paired')\nfig, ax = plt.subplots()\nsns.barplot(x=avg_weekly_rides.index, y=avg_weekly_rides)\nax.set_title('Weekly Average Ride Length\\nby Customer Type')\nax.set_xlabel('Customer Type')\nax.set_ylabel('Average Ride Length (Minutes)')\nfig.show()","bab0320b":"# Group data daily and by customer_type\ndaily_rides_count = bike_data_v3.groupby([pd.Grouper(key='started_at', freq='1D'),'customer_type'])['ride_length'].count().reset_index()\n\n# Rename 'ride_length' column name\ndaily_rides_count = daily_rides_count.rename(columns={'ride_length':'daily_num_rides'})\n\n# Define function to detect season\ndef identify_season(month):\n    if month == 1 or month == 2 or month == 12:\n        season = 'Winter'\n    elif month == 3 or month == 4 or month == 5:\n        season = 'Spring'\n    elif month == 6 or month == 7 or month == 8:\n        season = 'Summer'\n    elif month == 9 or month == 10 or month == 11:\n        season = 'Autumn'\n    return season\n\n# Add month, and season_rep columns to weekly_rides \ndaily_rides_count['month'] = daily_rides_count['started_at'].dt.month\n\n# Add a new column to weekly_rides dataframe which describes the seasons\nseason_list = []\nfor month in daily_rides_count['month']:\n    season_list.append(identify_season(month))\n    \ndaily_rides_count['season'] = season_list","0e509308":"# Add season representation column 1=Winter 2=Spring 3=Summer 4=Autumn\ndaily_rides_count['season_rep'] = daily_rides_count['started_at'].dt.month%12\/\/3+1\ndaily_rides_count.head()","c2e6875a":"# Visualize\nfig2, ax2 = plt.subplots()\nfig2.set_size_inches(7,5)\nsns.scatterplot(data=daily_rides_count, x='started_at', y='daily_num_rides', hue='season', palette='ocean_r')\nax2.set_title('Daily Number of Rides', fontsize='16')\nax2.set_xlabel('Date')\nax2.set_ylabel('')\nax2.legend(frameon=False)\nfig2.show()","7ee75520":"# Correlation value\ncor = daily_rides_count['daily_num_rides'].corr(daily_rides_count['season_rep'])\nprint(\"Correlation between daily number of rides and seasons : \", round(cor,3))","e4c14a63":"# Group data daily and by customer_type\ndaily_rlength_avg = bike_data_v3.groupby([pd.Grouper(key='started_at', freq='1D'),'customer_type'])['ride_length'].mean().reset_index()\n\n# Rename 'ride_length' column name\ndaily_rlength_avg = daily_rlength_avg.rename(columns={'ride_length':'avg_daily_rlength'})\n\n# Add month column to weekly_rides \ndaily_rlength_avg['month'] = daily_rlength_avg['started_at'].dt.month\n# Add a new column to weekly_rides dataframe which describes the seasons\nseason_list = []\n\nfor month in daily_rlength_avg['month']:\n    season_list.append(identify_season(month))\n    \ndaily_rlength_avg['season'] = season_list","8a3133bb":"daily_rlength_avg['season_rep'] = daily_rlength_avg['started_at'].dt.month%12\/\/3+1\ndaily_rlength_avg.head()","e5cafa83":"# Visualize\nfig3, ax3 = plt.subplots()\nfig3.set_size_inches(7,5)\nsns.scatterplot(data=daily_rlength_avg, x='started_at', y='avg_daily_rlength', hue='season', palette='ocean_r')\nax3.set_title('Daily Average of Ride Length', fontsize='16')\nax3.set_xlabel('Date')\nax3.set_ylabel('')\nax3.legend(frameon=False, bbox_to_anchor=(1,0.5), loc='center left')\nfig3.show()","e855307e":"# Add season representation column 1=Winter 2=Spring 3=Summer 4=Autumn\ncor1 = daily_rlength_avg['avg_daily_rlength'].corr(daily_rlength_avg['season_rep'])\nprint(\"Correlation between daily average of ride length and seasons : \", round(cor1,3))","885fbca8":"# Create a new column with its value ranges from Monday to Sunday\ndaily_rides_count['day_of_week'] = daily_rides_count['started_at'].dt.day_name()\ndaily_rides_count['day'] = daily_rides_count['started_at'].dt.dayofweek.astype(int)\n\ndaily_rides_count.head()","962e8ee5":"# Group data by season and day_of_week\nday_rides = daily_rides_count.groupby(['season','day_of_week','day'])['daily_num_rides'].mean().reset_index()\n\n# Sort by day_of_week in ascending order from Monday to Sunday\nday_rides = day_rides.sort_values(by='day')\nday_rides.head()","5aa880cc":"fig4, ax4 = plt.subplots()\nfig4.set_size_inches(7,5)\nsns.lineplot(x='day_of_week',y='daily_num_rides', hue='season', data=day_rides, palette='cubehelix')\nax4.set_title('Average Number of Rides on Each Day of The Week', fontsize='16')\nax4.set_xlabel('Name of The Day')\nax4.set_ylabel('Average Number of Rides')\nax4.legend(frameon=False, bbox_to_anchor=(1,0.5), loc='center left')\nfig4.show()\n","fc04bd68":"# Create a new column with its value ranges from Monday to Sunday\ndaily_rlength_avg['day_of_week'] = daily_rlength_avg['started_at'].dt.day_name()\ndaily_rlength_avg['day'] = daily_rlength_avg['started_at'].dt.dayofweek.astype(int)\n\ndaily_rlength_avg.head()","029685ca":"# Group data by season and day_of_week\nday_rlength = daily_rlength_avg.groupby(['day_of_week','day'])['avg_daily_rlength'].mean().reset_index()\n\n# Sort by day_of_week in ascending order from Monday to Sunday\nday_rlength = day_rlength.sort_values(by='day')\nday_rlength.head()","d3b96dd4":"fig5, ax5 = plt.subplots()\nfig5.set_size_inches(7,5)\nsns.lineplot(x='day_of_week',y='avg_daily_rlength', data=day_rlength, color='red')\nax5.set_title('Average Ride Length on Each Day of The Week', fontsize='16')\nax5.set_xlabel('Name of The Day')\nax5.set_ylabel('Average Ride Length')\nax5.legend(frameon=False, bbox_to_anchor=(1,0.5), loc='center left')\nax5.set(ylim=(15,20))\nax5.yaxis.set_major_formatter(ticker.EngFormatter())\nfig5.show()","c9ab3722":"# Group data by start station name\nstart_stations = bike_data_v3.groupby(['start_station_name','customer_type'])['ride_length'].count().reset_index()\nstart_stations = start_stations.rename(columns={'ride_length':'num_of_visits'})\nstart_stations = start_stations[(start_stations['customer_type']=='casual') & \n                                (start_stations['start_station_name']!='Unknown')].sort_values(by='num_of_visits', ascending=False)\nstart_stations = start_stations.head()\nstart_stations","ed0a4c39":"# Group data by end station name\nend_stations = bike_data_v3.groupby(['end_station_name','customer_type'])['ride_length'].count().reset_index()\nend_stations = end_stations.rename(columns={'ride_length':'num_of_visits'})\nend_stations = end_stations[(end_stations['customer_type']=='casual') & \n                                (end_stations['end_station_name']!='Unknown')].sort_values(by='num_of_visits', ascending=False)\nend_stations = end_stations.head()\nend_stations","77579920":"fig6, ax6 = plt.subplots(nrows=2, constrained_layout=True,sharex=True)\nfig6.set_size_inches(7,5)\nfig6.suptitle('Most Visited Stations by Casual Riders', fontsize=16)\nsns.barplot(x= 'num_of_visits', y='start_station_name', data = start_stations, palette='magma', ax=ax6[0])\nsns.barplot(x= 'num_of_visits', y='end_station_name', data = end_stations, palette='crest', ax=ax6[1])\nax6[0].set_title('Start Stations', fontsize=14)\nax6[1].set_title('End Stations', fontsize=14)\nax6[0].set_xlabel('')\nax6[0].set_ylabel('')\nax6[1].set_xlabel('')\nax6[1].set_ylabel('')\nfig6.supxlabel('Number of Visits')\nfig6.supylabel('Station Name')\nfig6.show()","68c96145":"### **Recommendation**\nMarketing strategies to convert casual riders into annual members:\n1. Create a seasonal discount for new members (Ex: Summer special price, Spring special offers: Buy 12 months membership get free 1 month membership)\n2. Members only discount price for ride length more than 45 minutes on Friday-Sunday. (Ex: discount from 0.15 dollar\/min to 0.12 dollar\/min)\n3. Cooperate with recreational places to get special ticket price \/ food discount for new divvy members.\n4. Place promotional membership invitation advertisements on most visited stations by casual riders.","c985f711":"### **It's Time for Exploration!**\n\nAfter cleaning the dataset, let's explore the data to answer the questions and develop marketing strategies to convert casual riders into annual members","84a6e2a9":"#### **1. What is the weekly average of ride length for casual riders and members?**","2816e988":"### Informations about the dataset","90ce2d96":"#### **4. What is the average number of rides on each name of the day of the week?**\n\nSince there is a correlation between seasons and number of rides, to answer this question the data will be grouped according to the corresponding season.","3b78050f":"The above chart shows that there is an uptrend between spring and summer, with the peak is on late august. Autumn until Winter, the daily number of rides declines with the bottom is on February. The correlation is also quiet strong with the value of **0.61**. It means that **as the season gets warmer, the number of rides tend to have an uptrend. On the contrary, if the season gets colder, the number of rides tend to have a downtrend.**\n\n#### **3. Is there a correlation between the seasons in chicago and ride length?**","dcac0285":"The chart above also shows that **the average ride length tend to increase on Friday and Saturday**","132dfd3a":"There are 45379 cases where start station name and end station name is the same, and ride length less than 1 minute. Those rows can be dropped assuming that it occurred because the customers cancelled the ride and docked the bike back to the station.","5b6635a6":"Based on the output above, there are another issues with the data:\n* There are data points where the `ended_at` is smaller the `started_at` making our `ride_length` value negative, which can be caused by faulty system or something and therefore, those data should be dropped.\n* There are outliers in the data which can skew our analysis.","116d04ae":"### **Clean the data and Prepare for Exploration!**\n\nAs we can see from the informations above, the dataset needs to be cleaned before we go to the next step.\n1. Remove unwanted columns\n> * Remove `start_lat`, `start_lng`, `end lat`, `end_lng` columns because these columns are not needed for this analysis\n> * Remove `start_station_id`, `end_station_id`, `ride_id` columns, because these columns are not relevant for this analysis\n\n2. Fixing inconsistent station names\n> * There are some stations that has `(*)` or `(Temp)` at the end of the station name, for examples are Smith Park Station and Wood St & Taylor St. There are `Smith Park` and `Smith Park (*)`, `Wood St & Taylor St` and `Wood St & Taylor St (Temp)` in the data. The `(*)` and `(Temp)` should be erased to make the station name consistent.\n> * There is a station name written `HUBBARD ST BIKE CHECKING (LBS-WH-TEST)`. It seems like divvy's staff did some system checking because the time between the started_at and ended_at was only a few seconds. Therefore, those rows containing `HUBBARD ST BIKE CHECKING (LBS-WH-TEST)` should be deleted\n> * Station located in `Burling St (Halsted) & Diversey Pkwy (Temp)` is the same as `Burling St & Diversey Pkwy` station, so `Burling St (Halsted) & Diversey Pkwy (Temp)` should be changed to `Burling St & Diversey Pkwy`\n\n3. Fixing inconsistent `rideable_type` data\n> * Starting December 2020, `docked_bike` is written as `classic_bike`, so to make the data consistent, all `docked_bike` will be changed to `classic_bike`.\n\n4. Fixing data types\n> * `started_at` column and `ended_at` column will be changed to datetime\n\n5. Changing column name\n> * change column name from`rideable_type` to `bike_type`\n> * change column name from`member_casual` to `customer_type`\n\n6. Filling missing station names with `Unknown`\n\n7. Create new column: `ride_length` which calculates the customer's ride length by substracting `ended_at` by `started_at`, and then convert it to minutes.\n\n**The cleaned data will be saved in different dataframe named bike_data_v2**","9360374d":"#### **2. Is there a correlation between the seasons in chicago and number of rides?**\n\nFor this question we need a new column that describes the seasons according to the dates. Based on [seasonsyear.com](https:\/\/seasonsyear.com\/USA\/Illinois\/Chicago), there are 4 seasons in Chicago: Spring starts from March until May, Summer starts from June until August, Autumn starts from September until November, and Winter starts from December until February.","e379e57a":"Horizontal barcharts above show that **most casual riders starts or ends their trip in recreational areas**. Note: Trip data which have missing start and end station name are not included for this question.","3cb1ba96":"# **Divvy's Trips Data Analysis**\n\n## **Objective**\n\nThere are two kinds of customers using Divvy's Bike-sharing service, those are casual riders (Customers who purchase single-ride or full-day passes) and members (customers who purchase annual memberships). The objective of this analysis is to design marketing strategies aimed at converting casual riders to annual members.\n\n## **Questions to be Answered**\n\nThere are questions or business tasks need to be answered for this analysis:\n1. What is the weekly average of ride length for casual riders and members?\n2. Is there a correlation between the seasons in chicago and number of rides?\n3. Is there a correlation between the seasons in chicago and ride length?\n4. What is the average number of rides on each name of the day of the week??\n5. What is the average ride length on each name of the day of the week?\n6. Which stations do casual riders often visit?\n\n\n\n### Import packages","e35bbedb":"#### **5. Which stations do casual riders often visit?**","728ab632":"### Read files needed","4c6a91a6":"5th row of the dataset above has the same start and end station name. The ride length also less than 1 minute. The customer might have a change of mind and docked the bike back to the station. Let's see if there are rows with the same case as the 5th row.","50ca3ccb":"The linechart above shows that **the number of rides tend to increase on Friday and Saturday in Spring, Summer, and Autumn**.","ee089a4c":"### **Conclusion**\nFrom the analysis, we can conclude:\n1. Casual riders have the longest ride length with an average of 19.45 minutes, while annual members have an average of 14.33 minutes.\n2. There is a quite strong correlation between seasons and number of rides.\n3. There is no strong correlation between seasons and ride length.\n4. The number of rides increases on Friday and Saturday with the peak is on Saturday.\n5. The Ride length increases on Friday, Saturday, and Sunday with the peak is on Saturday.\n6. Most casual riders starts or ends their trip in recreational areas","b1795c65":"From scatterplot above, we can see that there is a slight decrease in average ride length from Summer until Winter and starts going up again in Spring. But, the correlation value is only **0.151** and it is really close to 0. Therefore we can conclude that **the seasons does not have a strong correlation with daily average of ride length**.","422639c6":"Bar chart above shows that **casual riders tend to ride longer than annual members**","d93a06c9":"#### **5. What is the average ride length on each name of the day of the week?**"}}