{"cell_type":{"d13e338e":"code","9bca3e16":"code","de62656c":"code","e0d2091a":"code","e4a3e62c":"code","2e197700":"code","ab2e3a1c":"code","fb16d5a5":"code","3d839de4":"code","6c1ca1c2":"code","b6d52928":"code","79e3e088":"code","a59500e0":"code","e858e4b5":"code","1dc9e4a7":"code","0e1426a6":"code","4011337e":"code","c0c1ee1a":"code","88a72aed":"code","6b9e8416":"code","63797257":"code","a3728c9a":"code","6205e5cb":"code","d5f1d1b6":"code","5029a4f3":"code","d5ef6228":"code","e7d7daeb":"code","2eef8f6a":"code","173ee709":"code","53fba232":"code","5315f327":"code","59a6ec6a":"code","c1c3f571":"code","19f71065":"code","beb83ab6":"code","7291ca12":"code","75c09ee0":"code","ffd41a85":"code","2dec9cf6":"code","83fb3ce9":"markdown","be3011e9":"markdown","92b5603e":"markdown","c669fe94":"markdown","a13e99a6":"markdown","c928c117":"markdown","a887056e":"markdown","b3223822":"markdown","c8ddf023":"markdown","a2bd8ea1":"markdown","fc3cd2ca":"markdown","cd7bc36c":"markdown","363ea889":"markdown","7b67d36a":"markdown","293d6059":"markdown","9a218b44":"markdown","3a052be7":"markdown","076cd40e":"markdown","33590e12":"markdown","8ce03faf":"markdown","24281134":"markdown","ab4071bb":"markdown","e73abc2a":"markdown","df522470":"markdown","40bd1a5a":"markdown","cba78b61":"markdown","585500cf":"markdown","ec08efa9":"markdown","875b5b9e":"markdown","8b7f0ddf":"markdown","2e912d2d":"markdown","bf9f7184":"markdown","ea741337":"markdown","c5cdbb05":"markdown","842b2646":"markdown","67856f6c":"markdown","f0298627":"markdown","542b6147":"markdown"},"source":{"d13e338e":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\nimport seaborn as sns\n\n%matplotlib inline","9bca3e16":"!wget -O loan_train.csv https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/FinalModule_Coursera\/data\/loan_train.csv","de62656c":"df = pd.read_csv('loan_train.csv')\ndf.head()","e0d2091a":"df.shape","e4a3e62c":"df['due_date'] = pd.to_datetime(df['due_date'])\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf.head()","2e197700":"df['loan_status'].value_counts()","ab2e3a1c":"# notice: installing seaborn might takes a few minutes\n!conda install -c anaconda seaborn -y","fb16d5a5":"import seaborn as sns\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","3d839de4":"bins = np.linspace(df.age.min(), df.age.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","6c1ca1c2":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()\n","b6d52928":"df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ndf.head()","79e3e088":"df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)","a59500e0":"df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ndf.head()","e858e4b5":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)","1dc9e4a7":"df[['Principal','terms','age','Gender','education']].head()","0e1426a6":"Feature = df[['Principal','terms','age','Gender','weekend']]\nFeature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\nFeature.head()\n","4011337e":"X = Feature\nX[0:5]","c0c1ee1a":"y = df['loan_status'].values\ny[0:5]","88a72aed":"X= preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","6b9e8416":"#Data Sets:\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)\n\nprint(\"Train set: \", X_train.shape, y_train.shape)\nprint(\"Test set: \", X_test.shape, y_test.shape)","63797257":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nk = 3\n#We fit the model:\nkNN_model = KNeighborsClassifier(n_neighbors=k).fit(X_train, y_train)\nkNN_model\ny_pred = kNN_model.predict( X_test )\n\n#Find the max value\naccuracies = {}\nk_max = 1\nacc_max = 0\nfor k in range(1, 10):\n    kNN_model = KNeighborsClassifier(n_neighbors=k).fit(X_train, y_train)\n    y_pred = kNN_model.predict( X_test )\n    accuracies[k] = accuracy_score(y_test, y_pred)\n    print(k, accuracies[k])","a3728c9a":"from sklearn.metrics import f1_score\nfrom sklearn.metrics import jaccard_score\nfrom sklearn import metrics\n\nprint(\"We take k = 7\")\nknn_model = KNeighborsClassifier(n_neighbors = 7).fit(X_train, y_train)\n\nprint(\"Train set Accuracy (Jaccard): \", metrics.accuracy_score(y_train, knn_model.predict(X_train)))\nprint(\"Test set Accuracy (Jaccard): \", metrics.accuracy_score(y_test, knn_model.predict(X_test)))\n\nprint(\"Train set Accuracy (F1): \", f1_score(y_train, knn_model.predict(X_train), average='weighted'))\nprint(\"Test set Accuracy (F1): \", f1_score(y_test, knn_model.predict(X_test), average='weighted'))\n","6205e5cb":"from sklearn.tree import DecisionTreeClassifier\n","d5f1d1b6":"for d in range(1,10):\n    dt = DecisionTreeClassifier(criterion = 'entropy', max_depth = d).fit(X_train, y_train)\n    y_pred = dt.predict(X_test)\n    print(d, accuracy_score(y_test, y_pred))","5029a4f3":"print(\"We take depth = 2\")\ndt = DecisionTreeClassifier(criterion=\"entropy\", max_depth=2).fit(X_train, y_train)\n\nprint(\"Train set Accuracy (Jaccard): \", metrics.accuracy_score(y_train, dt.predict(X_train)))\nprint(\"Test set Accuracy (Jaccard): \", metrics.accuracy_score(y_test, dt.predict(X_test)))\n\nprint(\"Train set Accuracy (F1): \", f1_score(y_train, dt.predict(X_train), average='weighted'))\nprint(\"Test set Accuracy (F1): \", f1_score(y_test, dt.predict(X_test), average='weighted'))\n","d5ef6228":"#importing svm\nfrom sklearn import svm \n","e7d7daeb":"for k in ('linear', 'poly', 'rbf','sigmoid'):\n    svm_model = svm.SVC( kernel = k).fit(X_train,y_train)\n    svm_yhat = svm_model.predict(X_test)\n    print(\"For kernel: {}, the f1 score is: {}\".format(k,f1_score(y_test,svm_yhat, average='weighted')))","2eef8f6a":"print(\"So we choose rbf\")\nsvm_model = svm.SVC( kernel = 'rbf').fit(X_train,y_train)\n\n\nprint(\"Train set Accuracy (Jaccard): \", metrics.accuracy_score(y_train, svm_model.predict(X_train)))\nprint(\"Test set Accuracy (Jaccard): \", metrics.accuracy_score(y_test, svm_model.predict(X_test)))\n\nprint(\"Train set Accuracy (F1): \", f1_score(y_train, svm_model.predict(X_train), average='weighted'))\nprint(\"Test set Accuracy (F1): \", f1_score(y_test, svm_model.predict(X_test), average='weighted'))","173ee709":"from sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import log_loss","53fba232":"for k in ('lbfgs', 'saga', 'liblinear', 'newton-cg', 'sag'):\n    lr_model = LogisticRegression(C = 0.01, solver = k).fit(X_train, y_train)\n    lr_yhat = lr_model.predict(X_test)\n    y_prob = lr_model.predict_proba(X_test)\n    print('When Solver is {}, logloss is : {}'.format(k, log_loss(y_test, y_prob)))","5315f327":"k = 'liblinear'\nlr_model = LogisticRegression(C = 0.01, solver = k).fit(X_train, y_train)\n\nprint(\"Train set Accuracy (Jaccard): \", metrics.accuracy_score(y_train, lr_model.predict(X_train)))\nprint(\"Test set Accuracy (Jaccard): \", metrics.accuracy_score(y_test, lr_model.predict(X_test)))\n\nprint(\"Train set Accuracy (F1): \", f1_score(y_train, lr_model.predict(X_train), average='weighted'))\nprint(\"Test set Accuracy (F1): \", f1_score(y_test, lr_model.predict(X_test), average='weighted'))","59a6ec6a":"from sklearn.metrics import jaccard_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss\n","c1c3f571":"!wget -O loan_test.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_test.csv","19f71065":"test_df = pd.read_csv('loan_test.csv')\ntest_df.head()","beb83ab6":"test_df['due_date'] = pd.to_datetime(test_df['due_date'])\ntest_df['effective_date'] = pd.to_datetime(test_df['effective_date'])\ntest_df['dayofweek'] = test_df['effective_date'].dt.dayofweek\n\ntest_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ntest_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\n\nFeature1 = test_df[['Principal','terms','age','Gender','weekend']]\nFeature1 = pd.concat([Feature1,pd.get_dummies(test_df['education'])], axis=1)\nFeature1.drop(['Master or Above'], axis = 1,inplace=True)\n\n\nx_loan_test = Feature1\nx_loan_test = preprocessing.StandardScaler().fit(x_loan_test).transform(x_loan_test)\n\ny_loan_test = test_df['loan_status'].values","7291ca12":"#jaccard list:\nknn_pred = kNN_model.predict(x_loan_test)\nj1 = accuracy_score(y_loan_test, knn_pred)\n\ndt_pred = dt.predict(x_loan_test)\nj2 = accuracy_score(y_loan_test, dt_pred)\n\nsvm_pred = svm_model.predict(x_loan_test)\nj3 = accuracy_score(y_loan_test, svm_pred)\n\nlr_pred = lr_model.predict(x_loan_test)\nj4 = accuracy_score(y_loan_test, lr_pred)\n\njaccard = [j1, j2, j3, j4]\njaccard","75c09ee0":"knn_pred = kNN_model.predict(x_loan_test)\nf1 = f1_score(y_loan_test, knn_pred, average='weighted')\n\ndt_pred = dt.predict(x_loan_test)\nf2 = f1_score(y_loan_test, dt_pred, average='weighted')\n\n\nsvm_pred = svm_model.predict(x_loan_test)\nf3 = f1_score(y_loan_test, svm_pred, average='weighted')\n\nlr_pred = lr_model.predict(x_loan_test)\nf4 = f1_score(y_loan_test, lr_pred, average='weighted')\n\nf1s = [f1, f2, f3, f4]\nf1s","ffd41a85":"from sklearn.metrics import log_loss\n\nlr_pred = lr_model.predict_proba(x_loan_test)\naux = log_loss(y_loan_test, lr_pred)\n\nlog_loss = ['NA','NA','NA', aux]\nlog_loss\n","2dec9cf6":"index   = [\"KNN\", \"Decision Tree\", \"SVM\", \"Logistic Regression\"]\ncolunms = [\"Jaccard\", \"F1-score\", \"LogLoss\"]\n\ndata = [jaccard, f1s, log_loss]\ndata = np.array(data).T\n\ndf = pd.DataFrame(data, index=index, columns=colunms)\ndf","83fb3ce9":"# Pre-processing:  Feature selection\/extraction\n","be3011e9":"86 % of female pay there loans while only 73 % of males pay there loan\n","92b5603e":"This dataset is about past loans. The **Loan_train.csv** data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n\n| Field          | Description                                                                           |\n|----------------|---------------------------------------------------------------------------------------|\n| Loan_status    | Whether a loan is paid off on in collection                                           |\n| Principal      | Basic principal loan amount at the                                                    |\n| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n| Effective_date | When the loan got originated and took effects                                         |\n| Due_date       | Since it\u2019s one-time payoff schedule, each loan has one single due date                |\n| Age            | Age of applicant                                                                      |\n| Education      | Education of applicant                                                                |\n| Gender         | The gender of applicant                                                               |\n","c669fe94":"| Algorithm          | Jaccard | F1-score | LogLoss |\n|--------------------|---------|----------|---------|\n| KNN                | ?       | ?        | NA      |\n| Decision Tree      | ?       | ?        | NA      |\n| SVM                | ?       | ?        | NA      |\n| LogisticRegression | ?       | ?        | ?       |\n","a13e99a6":"# Support Vector Machine\n","c928c117":"### Let's look at the day of the week people get the loan\n","a887056e":"First, download and load the test set:\n","b3223822":"# Model Evaluation using Test set\n","c8ddf023":"### Convert to date time object\n","a2bd8ea1":"What are our lables?\n","fc3cd2ca":"In this notebook we try to practice all the classification algorithms that we have learned in this course.\n\nWe load a dataset using Pandas library, and apply the following algorithms, and find the best one for this specific dataset by accuracy evaluation methods.\n\nLet's first load required libraries:\n","cd7bc36c":"# Report\n\nYou should be able to report the accuracy of the built model using different evaluation metrics:\n","363ea889":"## One Hot Encoding\n\n#### How about education?\n","7b67d36a":"Now, it is your turn, use the training set to build an accurate model. Then use the test set to report the accuracy of the model\nYou should use the following algorithm:\n\n*   K Nearest Neighbor(KNN)\n*   Decision Tree\n*   Support Vector Machine\n*   Logistic Regression\n\n\\__ Notice:\\__\n\n*   You can go above and change the pre-processing, feature selection, feature-extraction, and so on, to make a better model.\n*   You should use either scikit-learn, Scipy or Numpy libraries for developing the classification algorithms.\n*   You should include the code of the algorithm in the following cells.\n","293d6059":"Let's define feature sets, X:\n","9a218b44":"### About dataset\n","3a052be7":"# Classification\n","076cd40e":"Let\u2019s see how many of each class is in our data set\n","33590e12":"260 people have paid off the loan on time while 86 have gone into collection\n","8ce03faf":"Let's plot some columns to underestand data better:\n","24281134":"### Load Data From CSV File\n","ab4071bb":"<h2>Want to learn more?<\/h2>\n\nIBM SPSS Modeler is a comprehensive analytics platform that has many machine learning algorithms. It has been designed to bring predictive intelligence to decisions made by individuals, by groups, by systems \u2013 by your enterprise as a whole. A free trial is available through this course, available here: <a href=\"http:\/\/cocl.us\/ML0101EN-SPSSModeler?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2021-01-01\">SPSS Modeler<\/a>\n\nAlso, you can use Watson Studio to run these notebooks faster with bigger datasets. Watson Studio is IBM's leading cloud solution for data scientists, built by data scientists. With Jupyter notebooks, RStudio, Apache Spark and popular libraries pre-packaged in the cloud, Watson Studio enables data scientists to collaborate on their projects without having to install anything. Join the fast-growing community of Watson Studio users today with a free account at <a href=\"https:\/\/cocl.us\/ML0101EN_DSX?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2021-01-01\">Watson Studio<\/a>\n\n<h3>Thanks for completing this lesson!<\/h3>\n\n<h4>Author:  <a href=\"https:\/\/ca.linkedin.com\/in\/saeedaghabozorgi?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2021-01-01?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2021-01-01\">Saeed Aghabozorgi<\/a><\/h4>\n<p><a href=\"https:\/\/ca.linkedin.com\/in\/saeedaghabozorgi\">Saeed Aghabozorgi<\/a>, PhD is a Data Scientist in IBM with a track record of developing enterprise level applications that substantially increases clients\u2019 ability to turn data into actionable knowledge. He is a researcher in data mining field and expert in developing advanced analytic methods like machine learning and statistical modelling on large datasets.<\/p>\n\n<hr>\n\n## Change Log\n\n| Date (YYYY-MM-DD) | Version | Changed By | Change Description |\n|---|---|---|---|\n| 2020-10-27 | 2.1 | Lakshmi Holla | Made changes in import statement due to updates in version of  sklearn library |\n| 2020-08-27 | 2.0 | Malika Singla | Added lab to GitLab |\n\n<hr>\n\n## <h3 align=\"center\"> \u00a9 IBM Corporation 2020. All rights reserved. <h3\/>\n\n<p>\n","e73abc2a":"Let's download the dataset\n","df522470":"# Data visualization and pre-processing\n","40bd1a5a":"## Normalize Data\n","cba78b61":"### Feature Selection\n","585500cf":"We see that people who get the loan at the end of the week don't pay it off, so let's use Feature binarization to set a threshold value less than day 4\n","ec08efa9":"# Decision Tree\n","875b5b9e":"# Logistic Regression\n","8b7f0ddf":"<center>\n    <img src=\"https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/FinalModule_Coursera\/images\/IDSNlogo.png\" width=\"300\" alt=\"cognitiveclass.ai logo\"  \/>\n<\/center>\n\n<h1 align=\"center\"><font size=\"5\">Classification with Python<\/font><\/h1>\n","2e912d2d":"Let's convert male to 0 and female to 1:\n","bf9f7184":"## Convert Categorical features to numerical values\n","ea741337":"# K Nearest Neighbor(KNN)\n\nNotice: You should find the best k to build the model with the best accuracy.\\\n**warning:** You should not use the **loan_test.csv** for finding the best k, however, you can split your train_loan.csv into train and test to find the best **k**.\n","c5cdbb05":"### Load Test set for evaluation\n","842b2646":"Data Standardization give data zero mean and unit variance (technically should be done after train test split)\n","67856f6c":"#### Features before One Hot Encoding\n","f0298627":"Let's look at gender:\n","542b6147":"#### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame\n"}}