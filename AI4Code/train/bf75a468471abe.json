{"cell_type":{"25d2309c":"code","cac1e265":"code","0ad96a6c":"code","0aa9d8a7":"code","2c9d9d70":"code","34c0e72a":"code","bcc6ebd9":"code","cd136825":"code","1c0f8bfe":"code","59a16fa7":"code","6e86c5ef":"code","04c5e38c":"code","03c41eee":"code","05c66a93":"code","cb6da0e0":"code","5080cfd0":"code","4385ef6f":"code","873e5c4e":"code","e32cfce5":"code","fb7324af":"code","0c868d6f":"code","3c7cf04d":"code","fe4388d7":"code","634a9644":"code","53722e99":"code","886a9fa5":"code","638eb7ee":"code","d62fd7b2":"code","3ff07fd8":"markdown","9458f2a3":"markdown","0e1c6c09":"markdown"},"source":{"25d2309c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cac1e265":"patient_df = pd.read_csv('\/kaggle\/input\/indian-liver-patient-records\/indian_liver_patient.csv')","0ad96a6c":"patient_df.info()","0aa9d8a7":"# Check for null values\npatient_df.isnull().sum()","2c9d9d70":"# drop rows containing null values\npatient_df.dropna(axis=0, inplace = True)","34c0e72a":"# Check for duplicate values\npatient_df_copy = patient_df.copy()\npatient_df_copy.drop_duplicates(inplace = True)\nprint(\"Number of duplicate rows: \", patient_df.shape[0] - patient_df_copy.shape[0])","bcc6ebd9":"patient_df = patient_df_copy.copy()\npatient_df.head()\npatient_df.info()","cd136825":"!pip install seaborn==0.11.1","1c0f8bfe":"import seaborn as sns\nimport matplotlib.pyplot as plt","59a16fa7":"sns.__version__","6e86c5ef":"sns.set_context(font_scale=1.4)\nsns.countplot(x = 'Gender', data= patient_df, hue='Dataset')","04c5e38c":"patient_df[['Dataset', 'Gender', 'Age']].groupby(['Dataset', 'Gender'], as_index = False).count().sort_values(by = 'Dataset', ascending = False)","03c41eee":"# Correlation\ncorr = patient_df.corr()\nplt.figure(figsize = (15, 10))\nsns.heatmap(corr, annot = True)","05c66a93":"g = sns.FacetGrid(data = patient_df, col='Dataset', row='Gender')\ng.map_dataframe(sns.histplot, x = 'Age', binwidth = 10)\ng.set_axis_labels(\"Age\", \"Count\")","cb6da0e0":"# Convert Categorical variable to indicator variable\npatient_df = pd.get_dummies(patient_df, prefix='Gender', columns=['Gender'])","5080cfd0":"# Drop the variables with high correlation\npatient_df.drop(axis = 1, columns = [\"Direct_Bilirubin\", \"Aspartate_Aminotransferase\", \"Total_Protiens\"], inplace = True)","4385ef6f":"# Split the dataset for training and testing\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score, learning_curve, cross_validate, KFold\nX_train, X_test, y_train, y_test = train_test_split(patient_df.drop([\"Dataset\"], axis = 1 ), patient_df[\"Dataset\"], test_size=0.3, random_state=0, stratify=patient_df['Dataset'])","873e5c4e":"# Scale the variables\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.fit_transform(X_test)","e32cfce5":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(n_jobs=-1, solver='newton-cg',random_state=55) \ncv = StratifiedKFold(10, shuffle=True, random_state=42)\ncv_results = cross_validate(logreg, X_train_scaled, y_train, cv=cv, scoring='f1_macro', return_train_score=True)","fb7324af":"print(\"Training score: \", cv_results[\"train_score\"].mean())","0c868d6f":"# Stacking Models\nfrom sklearn.ensemble import StackingClassifier, RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, f1_score\nfrom xgboost import XGBClassifier","3c7cf04d":"estimators = [\n    ('rf', RandomForestClassifier(random_state=55,class_weight='balanced_subsample')),\n    ('gb', GradientBoostingClassifier(random_state=55),\n    ('xgb',XGBClassifier(random_state=55)), \n    )\n]","fe4388d7":"clf = StackingClassifier(\n    estimators=estimators, final_estimator=RandomForestClassifier(random_state=55), cv=5\n)","634a9644":"clf.fit(X_train, y_train).score(X_test, y_test)","53722e99":"pred = clf.predict(X_test)","886a9fa5":"print(\"Training classification report \\n\",classification_report(y_train, clf.predict(X_train)))\nprint(\"_______\"*40)\nprint(\"Testing classification report\\n\",classification_report(y_test, pred))","638eb7ee":"cm = confusion_matrix(y_test, pred)\ncm","d62fd7b2":"sns.heatmap(cm, fmt = 'g', annot=True, xticklabels=[\"Liver Disease\", \"Non-liver disease\"], yticklabels=[\"Liver Disease\", \"Non-liver disease\"] )","3ff07fd8":"### Exploratory Data Analysis","9458f2a3":"We can see very high correlation between :\n*     Direct_Bilirubin and Total_Bilirubin : 0.87\n*     Aspartate_Aminotransferase and Alamine_Aminotransferase : 0.79\n*     Total_Protiens and Albumin : 0.78\n*     Albumin_and_Globulin_Ratio and Albumin : 0.69\n\nHence we can eliminate one of these variables ","0e1c6c09":"# Stacking Models"}}