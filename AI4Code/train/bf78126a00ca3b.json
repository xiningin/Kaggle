{"cell_type":{"7cadc498":"code","ecd947d1":"code","1721be0f":"code","1bfd5726":"code","2aacc29d":"code","4b2ae618":"code","7dead4ff":"code","49b75cb3":"code","4ce88ca2":"code","f43b3831":"code","1495276e":"code","4fe990e8":"code","1cb517c9":"code","f3e37b96":"code","2a6a8389":"code","15cec31b":"code","ae93cffd":"code","29265dfa":"code","41b2d67f":"code","319a9bca":"code","5df85813":"code","4264f61d":"code","49564e3e":"code","b3a29901":"code","789a0f05":"code","0d856141":"code","1d79b40b":"code","5b4772fa":"code","53ae742c":"code","16c9e6ea":"code","491ec316":"code","f6a7ca14":"code","0830f78b":"code","657d85ce":"code","58b027ab":"code","4d6ad2cc":"code","54bc3a41":"code","9783fdcf":"code","3fef0177":"code","d66e83ac":"code","767ddba3":"code","01b6c570":"code","77d60b3d":"code","4c7649cc":"code","15f195f9":"markdown","e523d485":"markdown","9b070f97":"markdown","e1c3a134":"markdown","2007b450":"markdown","01a83c0a":"markdown","b5312b71":"markdown","178b3ce2":"markdown","501345d4":"markdown","48c8e29e":"markdown","35206824":"markdown","dd45d57d":"markdown","e41a6e75":"markdown","e23d6ca9":"markdown","abc5111d":"markdown","7cfc996d":"markdown","eace63b5":"markdown","50fc9cb2":"markdown","04936990":"markdown","7f3fddc8":"markdown","487d7790":"markdown","26d75a71":"markdown","306ae4e1":"markdown","ce5a9c13":"markdown","3171828f":"markdown","a83c03cf":"markdown","6cbd0cbe":"markdown","01cb928f":"markdown","eec5196d":"markdown","50719e9d":"markdown","ad73ccb5":"markdown","7ee586aa":"markdown","74ffde06":"markdown"},"source":{"7cadc498":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport collections\nfrom sklearn.metrics import r2_score\nimport re\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor \n%matplotlib inline","ecd947d1":"df_train = pd.read_csv(\"\/kaggle\/input\/used-cars-price-prediction\/train-data.csv\")","1721be0f":"df_train.head()","1bfd5726":"df_train.isna().sum()","2aacc29d":"(df_train.isnull().sum() \/ len(df_train)) * 100","4b2ae618":"df_train = df_train.rename(columns = {'Unnamed: 0': 'id'})","7dead4ff":"df_train.isna().sum()","49b75cb3":"df_train.groupby('Seats')['id'].nunique()","4ce88ca2":"df_train['Seats'].mode()","f43b3831":"df_train[\"Seats\"].fillna(value = 5.0, inplace=True)\ndf_train.Seats[df_train.Seats == 0.0] = 5.0\ndf_train.isna().sum()","1495276e":"df_train.groupby('Mileage')['id'].nunique()","4fe990e8":"df_train.Mileage[df_train.Mileage == '0.0 kmpl'] = np.nan\ndf_train['Mileage'] = df_train['Mileage'].apply(lambda x: re.sub(r'(\\d+\\.\\d+)\\s(kmpl|km\\\/kg)', \n                                                                 r'\\1', str(x)))\ndf_train['Mileage'] = df_train['Mileage'].astype(float)\ndf_train['Mileage'].mode()","1cb517c9":"df_train['Mileage'].fillna(value = 17.0, inplace = True)\ndf_train.isna().sum()","f3e37b96":"df_train.groupby('Engine')['id'].nunique()","2a6a8389":"df_train['Engine'] = df_train['Engine'].apply(lambda x: re.sub(r'(\\d+)\\s(CC)', r'\\1', str(x)))\ndf_train['Engine'] = df_train['Engine'].astype(float)\ndf_train['Engine'].mode()","15cec31b":"df_train['Engine'].fillna(value = 1197.0, inplace = True)\ndf_train.isna().sum()","ae93cffd":"df_train['Power'] = df_train['Power'].str.split(' ').str[0]\n# including nan rows there is data in this column of 'null' value\ndf_train.Power[df_train.Power == 'null'] = np.NaN\ndf_train['Power'].isnull().sum()","29265dfa":"df_train['Power'] = df_train['Power'].astype(float)\ndf_train['Power'].mode()","41b2d67f":"df_train['Power'].fillna(value = 74, inplace = True)\ndf_train.isna().sum()","319a9bca":"df_train['Name'] = df_train['Name'].str.split(' ').str[0]\ndf_train.groupby('Name')['id'].nunique()","5df85813":"df_train.Name[df_train.Name == 'Isuzu'] = 'ISUZU'","4264f61d":"del df_train['New_Price']","49564e3e":"dataset = df_train.copy()","b3a29901":"del df_train['id']","789a0f05":"df_train.dtypes","0d856141":"df_train['Year'] = df_train['Year'].astype(float)\ndf_train['Kilometers_Driven'] = df_train['Kilometers_Driven'].astype(float)","1d79b40b":"df_train['Price_log'] = np.log1p(df_train['Price'].values)\ndel df_train['Price']","5b4772fa":"df_train = pd.get_dummies(df_train, drop_first = True)","53ae742c":"X = df_train.drop(columns = ['Price_log'], axis = 1)\ny = df_train.iloc[:, 6].values","16c9e6ea":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","491ec316":"regressor_1 = LinearRegression()\nregressor_1.fit(X_train, y_train)","f6a7ca14":"y_pred_1 = regressor_1.predict(X_test)","0830f78b":"regressor_1.score(X_test,y_test)","657d85ce":"regressor_2 = RandomForestRegressor(random_state = 0)\nregressor_2.fit(X_train, y_train)","58b027ab":"y_pred_2 = regressor_2.predict(X_test)","4d6ad2cc":"regressor_2.score(X_test,y_test)","54bc3a41":"regressor_3 = DecisionTreeRegressor(random_state = 0)\nregressor_3.fit(X_train, y_train)","9783fdcf":"y_pred_3 = regressor_3.predict(X_test)","3fef0177":"regressor_3.score(X_test, y_test)","d66e83ac":"plt.style.use('ggplot')\ncolors = ['#FF8C73','#66b3ff','#99ff99','#CA8BCA', '#FFB973', '#89DF38', '#8BA4CA', '#ffcc99', \n          '#72A047', '#3052AF', '#FFC4C4']","767ddba3":"plt.figure(figsize = (10,8))\nbar1 = sns.countplot(dataset['Year'])\nbar1.set_xticklabels(bar1.get_xticklabels(), rotation = 90, ha = 'right')\nplt.title('Count year wise', size = 24)\nplt.xlabel('Year', size = 18)\nplt.ylabel('Count', size = 18)\nplt.show()","01b6c570":"plt.figure(figsize = (5,5))\nsns.countplot(dataset['Fuel_Type'])\nplt.title('Types of Fuel and count', size = 24)\nplt.tight_layout()\nplt.show()","77d60b3d":"plt.figure(figsize = (6,6))\nplt.pie(dataset['Location'].value_counts(), startangle = 90, autopct = '%1.1f%%', colors = colors, \n        labels = dataset['Location'].unique())\ncentre_circle = plt.Circle((0,0),0.80,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.tight_layout()\nplt.show()","4c7649cc":"plt.figure(figsize = (5,5))\nsns.countplot(dataset['Transmission'])\nplt.title('Types of transmission', size = 24)\nplt.tight_layout()\nplt.show()","15f195f9":"#### For improving the prediction values","e523d485":"## Fitting Data & Predicting in Linear Regression","9b070f97":"## Fitting the data to Decision Tree Algorithm","e1c3a134":"## <font color='green'>Prefer Random Forest Tree Regression Algorithm.<\/font>","2007b450":"#### Getting rid of categorical data","01a83c0a":"#### *Removing the string part and converting to the float, Taking mode and will replace emply rows with mode* ","b5312b71":"# INTRODUCTION\n\nIn this notebook I analised the dataset with three different algorithms\n1. Linear Regression Algorithm\n2. Random Forest Tree Regression Algorithm\n3. Decision Tree Algorithm\n4. And also with Ridge and Lasso Algorithm (only prection score written)\n\nThe Random Forest Tree Algorithm took few more seconds than the Multiple Linear Regression Algorithm but gives more accuracy.","178b3ce2":"#### Percentage of data missing","501345d4":"# **END**","48c8e29e":"## Fitting the data to Random Forest Tree Regression","35206824":"### This data is for Visualizing with cleaned dataset","dd45d57d":"# **CLEANING DATASET & MISSING VALUES**","e41a6e75":"# **VISUALIZING THE DATASET**","e23d6ca9":"\n#### *Removing the string part and converting to the float, Taking mode and will replace emply rows with mode* ","abc5111d":"# **IMPORTING DATASET**","7cfc996d":"### Types of Transmission and count","eace63b5":"### Seats Column","50fc9cb2":"### Name Column","04936990":"#### I also performed on Ridge and Lasso Algorithm and got accuracy 90.6 and 89.8 respectively","7f3fddc8":"### Power Column","487d7790":"#### Spliting the dataset","26d75a71":"#### Converting datatypes from int to float","306ae4e1":"#### Renaming columns of dataset","ce5a9c13":"#### Number of null row in columns","3171828f":"# **IMPORTING LIBS**","a83c03cf":"### Loction graph and percentage","6cbd0cbe":"#### Deleting new price column because of lots of missing values are there in it","01cb928f":"#### Spliting dataset into train and test","eec5196d":"### Year wise count","50719e9d":"### Engine Column","ad73ccb5":"### Mileage Column","7ee586aa":"# **PRICE PREDICTION**","74ffde06":"### Fuel Types count"}}