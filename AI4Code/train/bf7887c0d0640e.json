{"cell_type":{"d18e6959":"code","24c05c2e":"code","a1cd9efc":"code","65b52009":"code","293588a5":"code","bebea9ee":"code","b8b500d6":"code","d1099ab4":"code","7b10283f":"code","66872e7e":"code","1304723b":"code","02c46d72":"code","62d1caf1":"code","08407990":"code","2e30b419":"code","80b1b368":"code","8a648a4a":"code","47c228ec":"code","efd85242":"code","fb271179":"code","5c60d5e6":"code","f242ab79":"code","7e9b61b6":"code","11d93393":"code","a2885ee0":"code","9d700aee":"code","12dbe082":"code","0920c0fc":"code","8370c148":"code","2538f629":"code","a6760eaa":"code","8769a7ea":"code","cfc60be3":"code","4475ea4c":"markdown","257254a8":"markdown","32e362d0":"markdown","2576681e":"markdown","e0235f99":"markdown","85449dde":"markdown","2109de1b":"markdown","4a99d73a":"markdown"},"source":{"d18e6959":"import os\nimport re \nimport glob\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Pydicom related imports\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport SimpleITK as sitk\n\n# Deep learning packages\nimport tensorflow as tf\n\n# For gif creation\nimport imageio\n\nimport warnings\nwarnings.filterwarnings('ignore')","24c05c2e":"train_df = pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv')\nprint('Number of rows: ', len(train_df))\ntrain_df['MGMT_value'].value_counts()","a1cd9efc":"plt.figure(figsize=(5, 5))\nprint(train_df.MGMT_value.value_counts())\nsns.countplot(data=train_df, x=\"MGMT_value\");","65b52009":"train_files = glob.glob('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/*\/*\/*')\nprint(f'There are {len(train_files)} dicom files in the training data')","293588a5":"test_files = glob.glob('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test\/*\/*\/*')\nprint(f'There are {len(test_files)} dicom files in the test data')","bebea9ee":"df_train_labels = pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv')\ndf_train_labels = df_train_labels.rename(columns={'BraTS21ID': 'PatientId'})\ndf_train_labels['PatientId'] = [format(x, '05d') for x in df_train_labels.PatientId]\ndf_train_labels['PatientId'] = df_train_labels['PatientId'].astype(str)\ndf_train_labels.describe()","b8b500d6":"patients = glob.glob('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/*')\nprint(f'There are {len(patients)} patients in the training data')","d1099ab4":"patients = glob.glob('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test\/*')\nprint(f'There are {len(patients)} patients in the test data')","7b10283f":"keys = ['FLAIR', 'T1w', 'T1wCE', 'T2w']\n\nlabel_dict = {\n    'FLAIR': [],\n    'T1w': [],\n    'T1wCE': [],\n    'T2w': []\n}\n\nlabel_dict_counts = {}\n\nfor filename in tqdm(train_files):\n    \n    scan = filename.split('\/')[-2]\n    \n    if scan=='FLAIR':\n        label_dict['FLAIR'].append(filename)\n        \n    elif scan=='T1w':\n        label_dict['T1w'].append(filename)\n\n    elif scan=='T1wCE':\n        label_dict['T1wCE'].append(filename)\n\n    else:\n        label_dict['T2w'].append(filename)\n    \nfor key in keys:\n    label_dict_counts[key] = len(label_dict[key])\n\nvalues = label_dict_counts.values()\nsns.barplot(x=keys, y=list(values))","66872e7e":"# Number of files per patient per Key.\ntrain_folders = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/'\ndf_patient_records_train = pd.DataFrame(columns=['PatientId'] + keys)\ndf_patient_records_train.set_index('PatientId')\nfor f in tqdm(os.listdir(train_folders)):\n    patientId = f\n    df_patient_records_train = df_patient_records_train.append({'PatientId': patientId, 'FLAIR': 0, 'T1w': 0, 'T1wCE': 0, 'T2w' : 0}, ignore_index=True)\n    for key in keys:\n        patientId_key_path = f'..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/{patientId}\/{key}\/*.dcm'\n        df_patient_records_train.loc[df_patient_records_train['PatientId'] == patientId, [key]] = len(glob.glob(patientId_key_path))\ndf_patient_records_train.head()","1304723b":"# Number of files per patient per Key.\ntest_folders = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test\/'\ndf_patient_records_test = pd.DataFrame(columns=['PatientId'] + keys)\ndf_patient_records_test.set_index('PatientId')\nfor f in tqdm(os.listdir(test_folders)):\n    patientId = f\n    df_patient_records_test = df_patient_records_test.append({'PatientId': patientId, 'FLAIR': 0, 'T1w': 0, 'T1wCE': 0, 'T2w' : 0}, ignore_index=True)\n    for key in keys:\n        patientId_key_path = f'..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test\/{patientId}\/{key}\/*.dcm'\n        df_patient_records_test.loc[df_patient_records_test['PatientId'] == patientId, [key]] = len(glob.glob(patientId_key_path))\ndf_patient_records_test.head()","02c46d72":"for key in keys:\n    df_patient_records_train[key] = df_patient_records_train[key].astype(int)\ndf_patient_records_train['PatientId'] = df_patient_records_train['PatientId'].astype(str)\ndf_patient_records_train[\"TotalFiles\"] = df_patient_records_train[keys].sum(axis=1)\nassert df_patient_records_train.TotalFiles.sum() == len(train_files)\ndf_patient_records_train.head()","62d1caf1":"for key in keys:\n    df_patient_records_test[key] = df_patient_records_test[key].astype(int)\ndf_patient_records_test['PatientId'] = df_patient_records_test['PatientId'].astype(str)\ndf_patient_records_test[\"TotalFiles\"] = df_patient_records_test[keys].sum(axis=1)\nassert df_patient_records_test.TotalFiles.sum() == len(test_files)\ndf_patient_records_test.head()","08407990":"df_patient_records_train = pd.merge(df_patient_records_train, df_train_labels, on=['PatientId'])","2e30b419":"df_patient_records_train.head()","80b1b368":"df_patient_records_train.sort_values(by='TotalFiles', ascending=False).head(50)[keys].plot(kind='bar',figsize=(20, 8), stacked=True)","8a648a4a":"df_patient_records_test.sort_values(by='TotalFiles', ascending=False).head(50)[keys].plot(kind='bar',figsize=(20, 8), stacked=True)","47c228ec":"boxprops = dict(linestyle='-', linewidth=4, color='r')\nmedianprops = dict(linestyle='-', linewidth=4, color='b')\ndf_patient_records_train[keys].plot(kind='box', figsize=(10, 4), showfliers=True, showmeans=True,\n                boxprops=boxprops,\n                medianprops=medianprops)\nplt.suptitle(\"Distribution of files per patient\")\nplt.xlabel(\"Types\")\nplt.ylabel(\"Count of files\")","efd85242":"boxprops = dict(linestyle='-', linewidth=4, color='r')\nmedianprops = dict(linestyle='-', linewidth=4, color='b')\ndf_patient_records_test[keys].plot(kind='box', figsize=(10, 4), showfliers=True, showmeans=True,\n                boxprops=boxprops,\n                medianprops=medianprops)\nplt.suptitle(\"Distribution of files per patient\")\nplt.xlabel(\"Types\")\nplt.ylabel(\"Count of files\")","fb271179":"boxprops = dict(linestyle='-', linewidth=4, color='r')\nmedianprops = dict(linestyle='-', linewidth=4, color='b')\ndf_patient_records_train['TotalFiles'].plot(kind='box', figsize=(8, 5), showfliers=True, showmeans=True,\n                boxprops=boxprops,\n                medianprops=medianprops)\nplt.suptitle(\"Distribution of Total files per patient\")","5c60d5e6":"boxprops = dict(linestyle='-', linewidth=4, color='r')\nmedianprops = dict(linestyle='-', linewidth=4, color='b')\ndf_patient_records_test['TotalFiles'].plot(kind='box', figsize=(8, 5), showfliers=True, showmeans=True,\n                boxprops=boxprops,\n                medianprops=medianprops)\nplt.suptitle(\"Distribution of Total files per patient\")","f242ab79":"round(pd.DataFrame.from_dict(label_dict_counts, orient='index')\/len(train_files)*100, 2).plot(kind='bar')\nplt.suptitle(\"Percentage Data by Type\")\nplt.xlabel(\"Types\")\nplt.ylabel(\"Percentage\")","7e9b61b6":"df_patient_records_train.describe()","11d93393":"# Reference: https:\/\/www.kaggle.com\/xhlulu\/siim-covid-19-convert-to-jpg-256px\ndef ReadMRI(path, voi_lut = True, fix_monochrome = True):\n    \n    # Original from: https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n    dicom = pydicom.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \n    # \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n               \n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n        \n    return data\n\ndef resize(array, size, keep_ratio=False, resample=Image.LANCZOS):\n    # Original from: https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image\n    im = Image.fromarray(array)\n    if keep_ratio:\n        im.thumbnail((size, size), resample)\n    else:\n        if (im.size != (size, size)):\n            im = im.resize((size, size), resample)\n    return im","a2885ee0":"data = ReadMRI(train_files[1])\nprint('Shape of data: ', data.shape)\nplt.rcdefaults()\nplt.figure(figsize=(5, 5))\nplt.imshow(data, cmap='gray');","9d700aee":"patientIds = os.listdir('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train')\npatientId = np.random.choice(patientIds)\nkey = np.random.choice(keys)\n\noutput_dir_path_train = '\/kaggle\/working\/output\/images\/train' \nos.makedirs(output_dir_path_train, exist_ok=True)\n\noutput_dir_path_test = '\/kaggle\/working\/output\/images\/test' \nos.makedirs(output_dir_path_test, exist_ok=True)\n\ndef convert_dicom_to_png(patientId, key, ds_type = 'train'):\n    if ds_type == 'train':\n        mgmt_value = df_patient_records_train.loc[df_patient_records_train['PatientId'] == patientId][\"MGMT_value\"].item()\n    files_path = f'..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/{ds_type}\/{patientId}\/{key}\/*.dcm'\n#     print(len(files_path))\n    for file in glob.glob(files_path):\n        file_name = file.split('\/')[-1].split('.')[0]\n        img_data = ReadMRI(file)\n        # skipping blank images\n        if (np.count_nonzero(img_data) > 0):\n            img_data = resize(img_data, size=224)\n            if \"train\" == ds_type:\n                os.makedirs(f'{output_dir_path_train}\/{patientId}\/{key}', exist_ok=True)\n                img_data.save(f'{output_dir_path_train}\/{patientId}\/{key}\/{file_name}-{mgmt_value}.png')\n            else:\n                os.makedirs(f'{output_dir_path_test}\/{patientId}\/{key}', exist_ok=True)\n                img_data.save(f'{output_dir_path_test}\/{patientId}\/{key}\/{file_name}.png')\n\nconvert_dicom_to_png(patientId, key)","12dbe082":"anim_file = 'brain_scan.gif'\nwith imageio.get_writer(anim_file, mode='I') as writer:\n    filenames = glob.glob(f'{output_dir_path_train}\/{patientId}\/{key}\/Image*.png')\n    filenames = sorted(filenames)\n    for filename in filenames:\n        image = imageio.imread(filename)\n        writer.append_data(image)","0920c0fc":"!pip install git+https:\/\/github.com\/tensorflow\/docs","8370c148":"import tensorflow_docs.vis.embed as embed\nprint(f'Showing Animated gif for patient: {patientId}, for key: {key}')\nembed.embed_file(anim_file)","2538f629":"patient_path = f'..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/{patientId}\/{key}'\nfor p in list(df_patient_records_train.sample(n=5).PatientId):\n    for i, key in enumerate(keys, 1):\n        patient_path = f'..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/{p}\/'\n        t_paths = sorted(glob.glob(os.path.join(patient_path, key, \"*\")), key=lambda x: int(x[:-4].split(\"-\")[-1]))\n        data = ReadMRI(t_paths[int(len(t_paths)*0.5)])\n        plt.subplot(1, 4, i)\n        plt.imshow(data, cmap=\"gray\")\n        plt.title(f\"{key}\", fontsize=12)\n        plt.axis(\"off\")\n    mgmt_value = df_patient_records_train.loc[df_patient_records_train['PatientId'] == p][\"MGMT_value\"]\n    plt.suptitle(f\"MGMT_value: {mgmt_value.item()}, patient Id: {p}\", fontsize=12)\n    plt.show()","a6760eaa":"for patientId in tqdm(list(df_patient_records_train.PatientId)[:100]):\n    for key in keys:\n        convert_dicom_to_png(patientId, key)\n        \n        \nfor patientId in tqdm(list(df_patient_records_test.PatientId)[:100]):\n    for key in keys:\n        convert_dicom_to_png(patientId, key, 'test')","8769a7ea":"df_patient_records_train.to_csv(f'{output_dir_path_train}\/train.csv')\ndf_patient_records_test.to_csv(f'{output_dir_path_test}\/test.csv')","cfc60be3":"%%time\n!mkdir \/kaggle\/tmp\n!tar -zcf train.tar.gz -C \".\/output\/images\/train\" .\n!tar -zcf test.tar.gz -C \".\/output\/images\/test\" .\n!rm -r .\/output","4475ea4c":"## Data Visualization\n\nThe training data contains 585 values each corresponding to a patient\/subject. \nEach row is marked with target MGMT_value for each subject (BraTS21ID) in the training data (e.g. the presence of MGMT promoter methylation).\nFrom the training set 307 subjects reported presence of MGMT promoter, and 278 reported absence. \nThe imbalance in the training data set is acceptable. \n","257254a8":"- The images that belong to T2w are higher in number, the images that belong to T1wcE are lowest in number\n- More outliers observed for T1wCE Kind","32e362d0":"# Predicting Genetic Biomarker in Brain Tumor. \n\n## This Notebook only contains EDA and training data prep\n\n#### Problem \nIn this competition you will predict the genetic subtype of glioblastoma using MRI (magnetic resonance imaging) scans to train and test your model to detect for the presence of MGMT promoter methylation.\n\n#### Glossary \n\n- MGMT promoter methylation  - The presence of a specific genetic sequence in the tumor known as MGMT promoter methylation has been shown to be a favorable predictive factor and a strong predictor of responsiveness to chemotherapy.\n- Radio genomics - the field of predicting the genetics of the cancer through imaging\n- Types of mpMRI scans:\n    - Fluid Attenuated Inversion Recovery (FLAIR)\n    - T1-weighted pre-contrast (T1w)\n    - T1-weighted post-contrast (T1Gd)\n    - T2-weighted (T2)\n\n\n\n#### Notebooks Referred. \n- https:\/\/www.kaggle.com\/ayuraj\/train-brain-tumor-as-video-classification-w-b\n- https:\/\/www.kaggle.com\/ihelon\/brain-tumor-eda-with-animations-and-modeling\n- https:\/\/www.kaggle.com\/smoschou55\/advanced-eda-brain-tumor-data\/comments#Main-Competition-Workflow","2576681e":"### Animate MRI images for a patient","e0235f99":"## Convert DICOM to Images","85449dde":"Let us look at the volume of training data.","2109de1b":"### Read DICOM images","4a99d73a":"### Visualize Images per type"}}