{"cell_type":{"fbd35fc0":"code","ae06d307":"code","74844fee":"code","3ba88296":"code","1a685de2":"code","e4a9497b":"code","0ae1de67":"code","ef348973":"markdown","da8dd58c":"markdown","bf75f825":"markdown","e11aaf9f":"markdown","a84e7704":"markdown","531f0dd8":"markdown"},"source":{"fbd35fc0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ae06d307":"ex7data2 = pd.read_csv(\"..\/input\/ex7data2.csv\",header=None)\nex7data2.head()","74844fee":"ex7data2.plot.scatter(x=0,y=1)","3ba88296":"def findClosestCentroids(X, centroids):\n    distance = np.zeros((len(X),len(centroids)))\n    for i in range(len(X)):\n        for j in range(len(centroids)):\n            distance[i,j] = np.linalg.norm(X[i,:]-centroids[j,:])\n    \n    return np.argmin(distance,axis=1)","1a685de2":"def computeCentroids(X, idx, K):\n    centroids = np.zeros((K,X.shape[1]))\n    for i in range(K):\n        centroids[i,:] = np.mean(X[idx == i],axis = 0)\n        \n    return centroids","e4a9497b":"def runkMeans(X,K,max_iters):\n    indexs = np.random.choice(np.array(range(len(X))), K,replace=False)\n    centroids = X[indexs]\n    for max_iter in range(max_iters):\n        idx = findClosestCentroids(X, centroids)\n        centroids = computeCentroids(X, idx, K)\n        colors = ['','','']\n        for i in range(K):\n            plt.scatter(X[idx==i, 0], X[idx==i, 1])\n        plt.scatter(centroids[:, 0], centroids[:, 1], c='r')\n        plt.show()\nK = 3\nmax_iters = 3\nrunkMeans(ex7data2.values,K,max_iters)","0ae1de67":"from sklearn.cluster import KMeans\ny_pred = KMeans(n_clusters=3, random_state=9).fit_predict(ex7data2)\nplt.scatter(ex7data2.iloc[:, 0], ex7data2.iloc[:, 1], c=y_pred)\nplt.show()","ef348973":"\u805a\u7c7b","da8dd58c":"\u66f4\u65b0\u805a\u7c7b\u4e2d\u5fc3","bf75f825":"# \u7f16\u7a0b\u5b9e\u73b0","e11aaf9f":"# \u4f7f\u7528sk-learn","a84e7704":"\u8ba1\u7b97\u6bcf\u4e2a\u6837\u672c\u6700\u8fd1\u7684\u4e2d\u5fc3","531f0dd8":"\u7406\u8bba\u57fa\u7840\u89c1[K-Means\u7b97\u6cd5](https:\/\/drivingc.com\/p\/5b6ecef72392ec11707dc156)"}}