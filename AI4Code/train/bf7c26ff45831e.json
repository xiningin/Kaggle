{"cell_type":{"d60e31ff":"code","12add70e":"code","16cc1cea":"code","478c52f3":"code","0b6c54e4":"code","ad6899b6":"code","f153261a":"code","01410d81":"code","b83b1fa3":"code","702164cc":"code","a590255c":"code","24e14141":"code","dc6e927c":"code","3d1d57cb":"code","e50d4481":"code","151f51b6":"code","66c6f7c3":"code","1fd67553":"code","9d691f36":"code","ceba3639":"code","66ab7765":"code","3a0a44f0":"code","11b48092":"code","5c1a2272":"code","1e6215df":"code","06c17379":"markdown","28ceeeef":"markdown","1c600131":"markdown","e33c38fc":"markdown","3319b89b":"markdown","dcc0ad4e":"markdown","b070067c":"markdown","090d11da":"markdown","253ce369":"markdown","97bb5d5d":"markdown","ba4297fc":"markdown","a4232341":"markdown","439e5a8b":"markdown","8ad2d75b":"markdown"},"source":{"d60e31ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12add70e":"data = pd.read_csv(\"\/kaggle\/input\/airbnb-recruiting-new-user-bookings\/train_users_2.csv.zip\")\ndata.head(5)","16cc1cea":"data.info()","478c52f3":"customers_data = data.sample(frac = 0.1, random_state = 42)","0b6c54e4":"sessions_data = pd.read_csv(\"..\/input\/airbnb-recruiting-new-user-bookings\/sessions.csv.zip\")\nsessions_data.info()","ad6899b6":"sessions_data.head(5)","f153261a":"sessions_data['user_id'].duplicated()","01410d81":"sessions_data = pd.DataFrame(sessions_data.groupby('user_id')['secs_elapsed'].mean()).reset_index()\nsessions_data.head(5)","b83b1fa3":"sessions_data['minutes_elapsed'] = np.log1p(sessions_data['secs_elapsed'] \/ 60)\nsessions_data['minutes_elapsed'].plot(kind = 'hist')","702164cc":"sessions_data.drop(columns = 'secs_elapsed', inplace = True)","a590255c":"sessions_data.rename({'user_id': 'id', 'minutes_elapsed': 'mean_minutes_elapsed'}, axis = 'columns', inplace = True)\ncustomers_data = pd.merge(customers_data, sessions_data, on = 'id', how = 'left')\ncustomers_data.head(5)","24e14141":"# Features Related to Time\n# date_account_created\ncustomers_data['date_account_created'] = pd.to_datetime(customers_data['date_account_created'], format = '%Y-%m-%d')\n\n# Splitting on dates\ncustomers_data['yr_date_account_created'] = customers_data['date_account_created'].dt.year\ncustomers_data['m_date_account_created'] = customers_data['date_account_created'].dt.month\ncustomers_data['d_date_account_created'] = customers_data['date_account_created'].dt.day\n\n# # timestamp_first_active\n# customers_data['timestamp_first_active'] = pd.to_datetime(customers_data['timestamp_first_active'], format = '%Y%m%d%H%M%S')\n# customers_data['m_timestamp_first_active'] = customers_data['timestamp_first_active'].dt.month","dc6e927c":"# Demographic Features - Associated with information about customers\ndemographic_features = ['gender', 'language']\n# Event Features - Associated with what happens in the website\nevent_features = ['signup_method',\n                 'affiliate_channel',\n                 'affiliate_provider',\n                 'first_affiliate_tracked',\n                 'signup_app', \n                 'first_device_type',\n                 'first_browser']\n# The KPI\ncustomers_data.loc[customers_data['country_destination'] == 'NDF', 'Booked'] = 'No'\ncustomers_data.loc[customers_data['country_destination'] != 'NDF', 'Booked'] = 'Yes'\n\n# All categorical features\ncategorical_features =  []\ncategorical_features.append(demographic_features)\ncategorical_features.append(event_features)\ncategorical_features.append([\"Booked\"])\n\n# Dropping unnecessary columns\ncolumns_to_drop = ['id',\n                   'date_account_created', \n                   'timestamp_first_active', \n                   'date_first_booking', \n                   'age', \n                   'signup_flow', \n                   'country_destination']\n\ncustomers_data.drop(columns_to_drop, axis = 'columns', inplace = True)\n\n# Final Categorical features list\ncategorical_features = [feature for sublist in categorical_features for feature in sublist]\n\ncustomers_data.info()","3d1d57cb":"customers_data.loc[customers_data['first_affiliate_tracked'].isna(), 'first_affiliate_tracked'] = customers_data['first_affiliate_tracked'].mode()[0]\ncustomers_data['mean_minutes_elapsed'].fillna(customers_data['mean_minutes_elapsed'].mean(), inplace = True)","e50d4481":"customers_data.info()","151f51b6":"# Get the position of categorical columns\ncat_columns_pos = [customers_data.columns.get_loc(col) for col in categorical_features]\nprint(f\"Categorical columns: {list(customers_data.select_dtypes('object').columns)}\")\nprint(f\"Categorical columns position: {cat_columns_pos}\")","66c6f7c3":"# Credit goes to: \n# https:\/\/towardsdatascience.com\/the-k-prototype-as-clustering-algorithm-for-mixed-data-type-categorical-and-numerical-fe7c50538ebb\n\nfrom kmodes.kprototypes import KPrototypes\n\nfrom plotnine import *\nimport plotnine\n\nfrom tqdm.notebook import tqdm\n\ndf_matrix = customers_data.to_numpy()\n\n# Choose optimal K using Elbow method\ncost = []\nfor cluster in tqdm(range(1, 10)):\n    kprototype = KPrototypes(n_jobs = -1, n_clusters = cluster, init = 'Huang', random_state = 42)\n    kprototype.fit_predict(df_matrix, categorical = cat_columns_pos)\n    cost.append(kprototype.cost_)\n    print('Cluster initiation: {}'.format(cluster))\n        \n# Converting the results into a dataframe and plotting them\ndf_cost = pd.DataFrame({'Cluster':range(1, 10), 'Cost':cost})\n# Data viz\nplotnine.options.figure_size = (8, 4.8)\n(\n    ggplot(data = df_cost)+\n    geom_line(aes(x = 'Cluster',\n                  y = 'Cost'))+\n    geom_point(aes(x = 'Cluster',\n                   y = 'Cost'))+\n    geom_label(aes(x = 'Cluster',\n                   y = 'Cost',\n                   label = 'Cluster'),\n               size = 10,\n               nudge_y = 1000) +\n    labs(title = 'Optimal number of cluster with Elbow Method')+\n    xlab('Number of Clusters k')+\n    ylab('Cost')+\n    theme_minimal()\n)","1fd67553":"# Modeling using the best K\nkprototype = KPrototypes(n_jobs = -1, n_clusters = 6, init = 'Huang', random_state = 42)\nkprototype.fit_predict(df_matrix, categorical = cat_columns_pos)","9d691f36":"kprototype.cluster_centroids_","ceba3639":"customers_data['cluster'] = kprototype.labels_\ncustomers_data['mean_minutes_elapsed'] = np.expm1(customers_data['mean_minutes_elapsed']) \ncustomers_data.head(5)","66ab7765":"customers_data.to_csv('customers_data.csv')","3a0a44f0":"customers_data.groupby('cluster')['Booked'].value_counts(normalize = True)","11b48092":"import seaborn as sns\n\n# Plotting each cluster with its proportions\nsns.heatmap(pd.crosstab(customers_data['cluster'],\n                        customers_data['Booked'],\n                        customers_data['Booked'], aggfunc = 'count').apply(lambda r: r\/r.sum(), axis=1), annot = True)","5c1a2272":"customers_data.to_csv('customers_data.csv')","1e6215df":"customers_data['cluster'].value_counts(normalize = True)","06c17379":"### Time Features","28ceeeef":"## Preprocessing","1c600131":"## Importing Data","e33c38fc":"### Customer Segment 1 Properties","3319b89b":"### Filling NaNs","dcc0ad4e":"# AirBNB Customer Segments Analysis","b070067c":"### Datasets Aggregation and Join","090d11da":"### Users Data","253ce369":"### Seconds Elapsed","97bb5d5d":"### Clustering Interpretation","ba4297fc":"### Sessions Data","a4232341":"### Demographic and Event Features","439e5a8b":"## Modeling on the Dataset","8ad2d75b":"### K-Prototype Clustering Model"}}