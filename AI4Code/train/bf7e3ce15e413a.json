{"cell_type":{"a580256f":"code","04df1f51":"code","11c3ee03":"code","5228856c":"code","ee1d23aa":"code","1b260f1d":"code","bd9ff50d":"code","78ea3f86":"code","d2c1fb17":"code","5a1f29b8":"code","4461bd1f":"code","ec90110d":"code","7abbb986":"code","46f16742":"code","61b6298f":"code","308002d1":"code","612a8364":"code","1e22f31c":"code","a98d9f0f":"code","60a031f3":"markdown","6cf8fd1e":"markdown","01ba30ba":"markdown"},"source":{"a580256f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04df1f51":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import cross_val_score,RepeatedStratifiedKFold\nfrom sklearn.feature_selection import SelectKBest,chi2,mutual_info_classif,f_classif\n","11c3ee03":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv',index_col='PassengerId')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmit=pd.DataFrame(test['PassengerId'])\ntest=test.set_index('PassengerId')","5228856c":"sns.barplot(x='Pclass',y='Survived',data=train,hue='Sex')  #Female of 1st class  and 2nd Class has higher chance to survive","ee1d23aa":"sns.ecdfplot(x='Age',data=train,hue='Survived')  # We can see that below age 10 it has chance of survival","1b260f1d":"sns.distplot(train['Age'])   # we can see a rise in children columns","bd9ff50d":"sns.ecdfplot(x=train['Fare'],hue=train['Pclass'],palette='icefire_r')  #about 80% of people paid fare less than 100","78ea3f86":"sns.ecdfplot(x=train['Fare'],hue=train['Survived'],palette='icefire_r')  #1 st class offer higher price","d2c1fb17":"sns.countplot(train['SibSp'],hue=train['Survived'])  #More people who do no have no sibling has more chance to survive","5a1f29b8":"sns.countplot(train['Parch'],hue=train['Survived'])","4461bd1f":"train['pass_no']=train['SibSp']+train['Parch']\nsns.countplot(train['pass_no'],hue=train['Survived'])   # people with less than 3 people in family has more chance to survive","ec90110d":"def family(size):\n    a=''\n    if(size<=1):\n        a='alone'\n    elif(size<=3):\n        a='small'\n    elif(size<=5):\n        a='middle'\n    else:\n        a='large'\n    return a\ntrain['family']=train['pass_no'].map(family)\nsns.countplot(train['family'],hue=train['Survived']) # alone has more chance to survive\n\ntrain=pd.get_dummies(train,columns=['family'],drop_first=True)","7abbb986":"train['age_group']=pd.qcut(train['Age'],15)\n\nplt.figure(figsize=(19,11))                               #  Age between 31 and 36 has more chance to survive\nsns.countplot(train['age_group'],hue=train['Survived'])  #In age group we can see person with less than 14 age has chance to survive\n              \ndef age_group(age):\n    a=''\n    if(age<=3):\n        a='infant'\n    elif(age<=14):\n        a='child'\n    elif(age<=29):\n        a='young'\n    elif(age<=40):\n        a='middle'\n    elif(age<=60):\n        a='old'\n    else:\n        a='very old'\n    return a\ntrain['age_group']=train['Age'].map(age_group)\nsns.countplot(train['age_group'],hue=train['Survived']) \n    \n\n    \n        \n    \n    \n                    ","46f16742":"train['Age']=train[\"Age\"].fillna(train.groupby(['Pclass','Sex'])['Age'].transform(\"mean\"))\ntrain['Fare']=train[\"Fare\"].fillna(train.groupby(['Pclass','Sex'])['Age'].transform(\"median\"))\n","61b6298f":"train['Sex']=train['Sex'].replace({'male':0,'female':1})\ntrain=pd.get_dummies(train,columns=['Embarked'],drop_first=True)\n\n\ntrain=train.drop(['Name','Ticket','Cabin'],axis=1)","308002d1":"train['age_group'].replace({'young':0,'very old':1,'middle':2,'old':3,'child':4,'infant':5},inplace=True)","612a8364":"x=train.drop('Survived',axis=1)\ny=train['Survived']\n\n\nfor i in range(1,2):\n    pipeline=Pipeline(steps=[('rfe',SelectKBest(score_func=chi2,k=13)),('encode',StandardScaler()),('model',GradientBoostingClassifier())])\n    pipeline.fit(x,y)\n    score=cross_val_score(pipeline,x,y,scoring='accuracy',n_jobs=-1)\n    print(np.mean(score),i)","1e22f31c":"test['pass_no']=test['SibSp']+test['Parch']\ntest['family']=test['pass_no'].map(family)\n\ntest['age_group']=test['Age'].map(age_group)\ntest=pd.get_dummies(test,columns=['family','age_group','Embarked'],drop_first=True)\n\ntest['Sex']=test['Sex'].replace({'male':0,'female':1})\ntest=test.drop(['Name','Ticket','Cabin','pass_no'],axis=1)\n\ntest['Age']=test[\"Age\"].fillna(test.groupby(['Pclass','Sex'])['Age'].transform(\"mean\"))\ntest['Fare']=test[\"Fare\"].fillna(test.groupby(['Pclass','Sex'])['Age'].transform(\"median\"))\ntest['age_group'].replace({'young':0,'very old':1,'middle':2,'old':3,'child':4,'infant':5},inplace=True)","a98d9f0f":"submit['Survived']=pipeline.predict(test)\nsubmit.to_csv('ver1.csv',index=False)","60a031f3":"# Data Modelling","6cf8fd1e":"# Modelling","01ba30ba":"# Applying on test columns"}}