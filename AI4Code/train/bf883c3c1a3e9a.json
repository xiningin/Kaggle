{"cell_type":{"a2f534bb":"code","9c5a61e9":"code","057abf27":"code","d78c36ce":"code","e40bc12c":"code","30d87a07":"code","be8cbba0":"code","9b2a9f61":"code","357511e8":"code","80bb7c12":"code","5245dc1f":"code","d7d14277":"code","df00439a":"code","fff0d948":"code","010424ee":"code","f7558540":"code","e0aec398":"code","51645746":"code","07e59840":"code","adbe9c88":"code","eb08789b":"code","fb35580c":"code","0564daa5":"code","38da940f":"code","53e0782a":"code","08e69293":"code","7b50bc74":"code","1371da7b":"code","3d32cd1c":"code","0923ab66":"code","84f153b2":"code","1a440d4c":"code","db88e81c":"code","db45dc47":"code","aeb6d3fb":"code","d6ef3af3":"code","f626f496":"code","e2e6a204":"code","b8b9e8c6":"code","49d9ea85":"code","4aa4892b":"code","d1c5ec2e":"code","ea0cf06e":"code","b14dc9fb":"code","e0a9eb11":"code","a3e01f2a":"code","5f8b594e":"code","b339b94d":"code","f9f88d81":"code","0e5bc84c":"code","72d57405":"code","fedb35b5":"code","6de02281":"code","a358e5af":"code","5e1e8d06":"code","960088af":"code","bbbedcb2":"code","bbd43090":"code","1282e67c":"code","41e08ebc":"code","2234ba4e":"code","712c5fd8":"code","b18a6f3d":"code","a9272110":"code","33a480e2":"code","fbc1a635":"code","f9950fd7":"code","4cfcd232":"code","633efc74":"code","d8f67c39":"code","fd0f1861":"code","f74036d6":"code","22a6db0e":"code","f04fd683":"code","62647b57":"code","659115d0":"code","c91f0174":"code","8cd1a634":"code","d1c57756":"code","7d943d79":"code","56d32106":"code","fc982ca4":"code","0c094c4a":"code","bd23a8f5":"code","65a0ae16":"code","1653ce02":"code","90d5af03":"code","138892ec":"code","8130187c":"code","7ce1d4cd":"code","6cbb837c":"code","b9c26e83":"code","8476e312":"code","b38b4867":"code","d30b01fc":"code","276e759d":"code","f6753a50":"code","b0190304":"code","e6495a05":"code","f3376e72":"code","ac23d177":"markdown","fe6e6f75":"markdown","d7cd99e5":"markdown","ef9130bc":"markdown","26326848":"markdown","2a68e1e7":"markdown","e8bf3d16":"markdown","f6e831d7":"markdown","99afc564":"markdown","e384c5e4":"markdown","98a8bc79":"markdown","2037923f":"markdown","bb83da70":"markdown","128ebc9b":"markdown","842fa692":"markdown","d151fdc7":"markdown","97955eed":"markdown","115dfeae":"markdown","f79d69df":"markdown","ad34f558":"markdown","a2db078d":"markdown","27b0d23b":"markdown","093fece9":"markdown","856da3d3":"markdown","05ecf049":"markdown","59485d8a":"markdown"},"source":{"a2f534bb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder,MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.model_selection import cross_val_score\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams[\"figure.figsize\"]=(8,5)\nplt.rcParams[\"font.size\"]=10","9c5a61e9":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","057abf27":"train=pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Train.csv\")\ntest=pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Test.csv\")\ntrain.shape,test.shape","d78c36ce":"sales=pd.concat([train,test],ignore_index=True)\nsales.shape","e40bc12c":"sales.head()","30d87a07":"sales.info()","be8cbba0":"# statistics of numerical data\nsales.describe().T","9b2a9f61":"sales.isna().sum()","357511e8":"# Distribution of target values\nsns.distplot(sales['Item_Outlet_Sales'],bins=20,rug=True,hist=True)\nplt.show()","80bb7c12":"sales.Item_Outlet_Sales.mean()","5245dc1f":"sales['Outlet_Size'].unique()","d7d14277":"sales['Outlet_Identifier'].unique()\n","df00439a":"# OUTLET IDENTIFIER CATEGORIES\nplt.figure(figsize=(10,5))\nsales.groupby(['Outlet_Identifier']).size().plot(kind='bar')\nplt.xticks(rotation=45,horizontalalignment='right')\nplt.show()","fff0d948":"sales['Item_Type'].unique()","010424ee":"# DIFFERENT ITEM TYPES PRESENT IN THE RETAIL STORE\nplt.figure(figsize=(10,5))\nsns.countplot('Item_Type',data=sales)\nplt.xticks(rotation=45,horizontalalignment='right')\nplt.show()","f7558540":"sales['Outlet_Type'].unique()","e0aec398":"np.sort(sales['Outlet_Establishment_Year'].unique())","51645746":"sales['Item_Fat_Content'].unique()","07e59840":"#PROPORTION OF DIFFERENT TYPES OF OUTLET SIZES\nplt.figure(figsize=(5,5))\nplt.pie(x=sales['Outlet_Size'].value_counts(),\n        labels=[\"Medium\",\"Small\",'High'],\n        autopct='%1.2f%%',\n        explode=[0.04,0.01,0.02],shadow=True,)\n\nplt.title(\"Types of Outlet Size\",fontsize=16)\nplt.show()","adbe9c88":"sales['Item_MRP'].plot(kind='box')\n# no outliers present in Item_MRP","eb08789b":"plot_fig =sales.groupby('Outlet_Type').agg({'Item_Outlet_Sales':'mean'}).sort_values(by='Item_Outlet_Sales',ascending=False).reset_index()\nplot_fig","fb35580c":"plt.figure(figsize=(5,3))\nfig=px.pie(plot_fig,names='Item_Outlet_Sales',values='Outlet_Type')\nfig.show()","0564daa5":"plt.pie(x=plot_fig['Item_Outlet_Sales'],\n        labels=plot_fig['Outlet_Type'],\n        autopct='%1.1f%%',\n        explode=[0.04,0.01,0.02,0.02],shadow=True)\nplt.title(\"Item Outlet Sales in Different Outlets Types\",fontsize=16)\nplt.show()","38da940f":"#checking relation between establishment year with outlet type\nsales.groupby(['Outlet_Establishment_Year','Outlet_Type']).size()  ","53e0782a":"sales.groupby(['Outlet_Location_Type','Outlet_Size','Outlet_Type']).size().plot(kind='bar')\nplt.xticks(rotation=45,horizontalalignment='right',fontsize=8)","08e69293":"sales[(sales['Outlet_Type']=='Supermarket Type1') & (sales['Outlet_Location_Type']=='Tier 1')]['Outlet_Size'].value_counts()\n#supermarket type 1 and tier 1 have small and high outlet size","7b50bc74":"sales.groupby(['Outlet_Size','Outlet_Location_Type']).size()","1371da7b":"# visualizing the above groupby command individually\nsns.countplot('Outlet_Size',hue='Outlet_Location_Type',data=sales)\nplt.legend(loc=\"upper right\",shadow=True,fancybox=True)","3d32cd1c":"sns.countplot(\"Outlet_Type\",hue='Outlet_Location_Type',data=sales)\nplt.legend(loc=\"upper center\",shadow=True,fancybox=True)\nplt.show()","0923ab66":"# SCATTER PLOT OF TARGET VARIABLE WITH ITEM MRP\nplt.scatter(sales['Item_MRP'],sales['Item_Outlet_Sales'])\nplt.xlabel(\"Item_MRP\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.show()","84f153b2":"plt.scatter(sales['Item_Visibility'],sales['Item_Outlet_Sales'])\nplt.xlabel(\"Item_Visibility\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.show()","1a440d4c":"plt.scatter(sales['Outlet_Location_Type'],sales['Item_Outlet_Sales'])","db88e81c":"sales[sales['Outlet_Location_Type']=='Tier 2']\n# tier 2 has only small and nan values","db45dc47":"sales[(sales['Outlet_Type']=='Grocery Store') & (sales['Outlet_Location_Type']=='Tier 1')]['Outlet_Size'].unique()\n#small outlet_size is present only where location is Tier 2 and type is grocery","aeb6d3fb":"# OUTLET TYPE CATEGORIES\nsns.countplot('Outlet_Type',data=sales)","d6ef3af3":"pd.crosstab(sales[\"Outlet_Size\"],sales[\"Outlet_Type\"])","f626f496":"pd.crosstab(sales[\"Outlet_Size\"],sales[\"Outlet_Location_Type\"])","e2e6a204":"sales.loc[sales['Outlet_Type']=='Grocery Store','Outlet_Size']='Small'","b8b9e8c6":"sales.loc[sales['Outlet_Location_Type']=='Tier 2','Outlet_Size']='Small'","49d9ea85":"sales['Outlet_Size'].isna().sum()\n# now no missing values are there","4aa4892b":"sales['Outlet_Size'].value_counts().plot(kind='bar',color=['orange','lightgreen','skyblue'])\nplt.xticks(rotation=45,horizontalalignment='center',fontsize=14)","d1c5ec2e":"# CHECHING RELATION BETWEEN OUTLET SIZE WITH OUTLET LOCATION TYPE\n\nplt.figure(figsize=(5,3))\nsns.catplot('Outlet_Size',col='Outlet_Location_Type',\n            kind='count',col_order=['Tier 1','Tier 2','Tier 3'],\n            order=['Small','Medium','High'],data=sales)\nplt.show()","ea0cf06e":"sales['Item_Weight']=sales['Item_Weight'].fillna(sales.groupby('Item_Identifier')['Item_Weight'].transform('mean'))","b14dc9fb":"sales.groupby('Item_Identifier')['Item_Weight'].transform('mean')","e0a9eb11":"sales['Item_Weight'].isna().any()","a3e01f2a":"#sales.loc[sales['Item_Type']=='Dairy']['Item_Weight'].mean()","5f8b594e":"sales.to_csv(\"modified_sales.csv\")\ns1=pd.read_csv(\"modified_sales.csv\")\n#s1=s1.reset_index()","b339b94d":"sales['Item_Visibility'].replace(0.0,value=np.nan,inplace=True)  # first replace 0 with nan values","f9f88d81":"# fill nan values with corresponding item identifier mean value\nsales['Item_Visibility']=sales['Item_Visibility'].fillna(sales.groupby('Item_Identifier')['Item_Visibility'].transform('mean'))","0e5bc84c":"sales['Item_Weight'].isna().sum()","72d57405":"sales.describe().T","fedb35b5":"plt.figure(figsize=(7,5))\nsns.countplot('Item_Fat_Content',data=sales)","6de02281":"sales['Item_Fat_Content'].replace({'LF':'Low Fat','reg':'Regular','low fat':'Low Fat'},inplace=True)","a358e5af":"sales['Item_Fat_Content'].value_counts().plot(kind='bar',figsize=(7,4),color=['darkblue','orange'])\nplt.xticks(rotation=0,horizontalalignment='center',fontsize=14)\nplt.show()","5e1e8d06":"sales['Outlet_Years']=2020-sales['Outlet_Establishment_Year']\nsales['Outlet_Years'].value_counts()","960088af":"sales['Item_Identifier']=sales['Item_Identifier'].str[0:2]\nsales['Item_Identifier'].value_counts()","bbbedcb2":"sales['Item_Identifier']=sales['Item_Identifier'].replace({'FD':'Food','DR':'Drinks','NC':'Non-Consumable'})\nsales['Item_Identifier'].unique()","bbd43090":"# mark non consumable as separate category in low fat\nsales.loc[sales['Item_Identifier']=='Non-Consumable','Item_Fat_Content']='Non-Edible'","1282e67c":"sns.countplot('Item_Identifier',hue=\"Item_Fat_Content\",data=sales)\nplt.legend(loc=\"upper center\",shadow=True,fancybox=True)\nplt.show()","41e08ebc":"sales['Item_Fat_Content'].value_counts().plot(kind='bar',color=['darkblue','orange','darkgreen'])\nplt.xticks(rotation=0,horizontalalignment='center',fontsize=12)\nplt.xlabel(\" Fat Content in items\",fontsize=16)\nplt.ylabel(\"Count\",fontsize=16)\nplt.show()","2234ba4e":"sales.groupby([\"Item_Identifier\",\"Item_Type\"])['Item_Identifier'].count().plot(kind='bar',figsize=(10,5))","712c5fd8":"# Label encoding for variables which have internal dependency.\n\nvar_cat=['Outlet_Size','Outlet_Location_Type','Item_Type','Outlet_Years']\nle=LabelEncoder()\nfor i in var_cat:\n  sales[i]=le.fit_transform(sales[i])\n","b18a6f3d":"#one hot encoding for variables which have no internal dependency\nsales=pd.get_dummies(sales,columns=['Item_Identifier','Outlet_Type','Item_Fat_Content','Outlet_Identifier'])","a9272110":"sales.head()","33a480e2":"sales1=sales.copy()\nsales.drop(columns=['Outlet_Establishment_Year',],inplace=True)","fbc1a635":"scale=MinMaxScaler()\ncol=list(sales.columns.drop('Item_Outlet_Sales'))\ncol\nsales2=scale.fit_transform(sales)","f9950fd7":"sales=pd.DataFrame(sales2,columns=sales.columns)\nsales[\"Item_Outlet_Sales\"]=sales1['Item_Outlet_Sales']\nsales.head()","4cfcd232":"#Variance\nsales[col].var().sort_values(ascending=False)","633efc74":"plt.figure(figsize=(20,10))\nsns.heatmap(sales.corr(),annot=True,center=True,robust=True)\nplt.show()\n#checking correlation","d8f67c39":"sales.columns.drop(['Item_Fat_Content_Non-Edible','Outlet_Identifier_OUT018','Outlet_Identifier_OUT027','Outlet_Identifier_OUT019','Outlet_Identifier_OUT010',])","fd0f1861":"sales_train=sales.iloc[:8523,:]\nsales_test=sales.iloc[8523:,:]\nsales_test.drop(columns=['Item_Outlet_Sales'],inplace=True)\nsales_train.shape,sales_test.shape","f74036d6":"#features=['Item_Fat_Content','Outlet_Location_Type','Outlet_Years','Outlet_Size','Item_Identifier','Item_MRP','Item_Type','Item_Visibility','Outlet_Type']\nfeatures=['Item_Visibility', 'Item_Type', 'Item_MRP',\n       'Outlet_Size', 'Outlet_Location_Type',\n       'Outlet_Years', 'Item_Identifier_Drinks', 'Item_Identifier_Food',\n       'Item_Identifier_Non-Consumable', 'Outlet_Type_Grocery Store',\n       'Outlet_Type_Supermarket Type1', 'Outlet_Type_Supermarket Type2',\n       'Outlet_Type_Supermarket Type3', 'Item_Fat_Content_Low Fat',\n       'Item_Fat_Content_Regular', 'Outlet_Identifier_OUT013',\n       'Outlet_Identifier_OUT017', 'Outlet_Identifier_OUT035',\n       'Outlet_Identifier_OUT045', 'Outlet_Identifier_OUT046',\n       'Outlet_Identifier_OUT049']","22a6db0e":"X=sales_train[features]\ny=sales_train['Item_Outlet_Sales']\nX_test_sales=sales_test[features]","f04fd683":"X_train,X_val,y_train,y_val=train_test_split(X,y,random_state=42,test_size=0.20)\nX_train.shape,X_val.shape,y_val.shape","62647b57":"# defining a function which calculates details of each algorithm\ndef model_details(model,alg):\n    y_pred=model.predict(X_val)\n    rmse=np.sqrt(mse(y_val,y_pred))\n    acc=round(model.score(X_val,y_val)*100,2)\n    cvs=cross_val_score(model,X_val,y_val,cv=5)\n    mean=round(cvs.mean()*100,2)\n    std=round(cvs.std()*2,2)\n    print(\"Model Report\")\n    print('Accuracy of {}: {}%'.format(alg,acc),)\n    print('RMSE Value: ',round(rmse,2))\n    print('Cross Validation Score: Mean - {} | Std - {}'.format(mean,std))","659115d0":"reg=LinearRegression(normalize=True)","c91f0174":"reg.fit(X_train,y_train)","8cd1a634":"model_details(reg,'LinearRegression')","d1c57756":"ypred=reg.predict(X_val)\ny_val,ypred[:6]","7d943d79":"from sklearn.tree import DecisionTreeRegressor\ndtr=DecisionTreeRegressor(max_depth=15,min_samples_leaf=100,min_samples_split=5)","56d32106":"dtr.fit(X_train,y_train)","fc982ca4":"model_details(dtr,'DecisionTreeRegressor')","0c094c4a":"np.argsort(dtr.feature_importances_)","bd23a8f5":"y_test_dtr=y_dtr=dtr.predict(sales_test[features])\ny_test_dtr[:5]","65a0ae16":"from sklearn.ensemble import RandomForestRegressor","1653ce02":"rf=RandomForestRegressor(n_estimators=200,min_samples_split=7,random_state=42,\n                         max_depth=15)\n# rf --> random forest","90d5af03":"rf.fit(X_train,y_train)","138892ec":"model_details(rf,'RandomForestRegressor')","8130187c":"import xgboost as xgb","7ce1d4cd":"dmat=xgb.DMatrix(data=sales_train[features],label=sales_train['Item_Outlet_Sales'])","6cbb837c":"xg_reg=xgb.XGBRegressor(colsample_bytree=0.3,learning_rate=0.1,max_depth=5,n_estimators=100,reg_alpha=0.75,reg_lambda=0.45,subsample=0.6,seed=42)","b9c26e83":"xg_reg.fit(X_train,y_train)","8476e312":"model_details(xg_reg,'XGBoost')","b38b4867":"y=xg_reg.predict(sales_test[features])\ny[:10]","d30b01fc":"sub=pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Submission.csv\")\n\ntest_sales_pred=rf.predict(sales_test[features])\n\nsub['Item_Outlet_Sales']=y\nsub.head(10)","276e759d":"sub.to_csv(\"My_submission.csv\")","f6753a50":"#prediction of item sales on train dataset\ny_test_xgb=xg_reg.predict(X_val)","b0190304":"pred_rf=pd.DataFrame(y_test_xgb,columns=['predicted_rf'])\ntrue_values=list(y_val.values)\npred_rf['true_value']=true_values","e6495a05":"# comparision between true and predicted value\ncomp=pred_rf\ncomp=comp.iloc[:15]\ntrue_value=comp['true_value']\npredicted_value=comp['predicted_rf']","f3376e72":"plt.plot(true_value)\nplt.plot(predicted_value)\nplt.ylabel('Item Outlet Sales')\nplt.legend(['Actual','Predicted'])\nplt.title(\"Item Outlet Sales--> Actual vs Predicted\",fontsize=16)\nplt.show()","ac23d177":"## **Categorical data**","fe6e6f75":"## **Data Exploration**","d7cd99e5":"Inference from above crosstabs--> 'Small' is present only in grocery and Tier 2.\n\n\n1.   Impute small as outlet type where type is Grocery.\n2.   Impute small as outlet type where location is Tier 2.\n\n\n","ef9130bc":"**Concatenate both data sets into one to preprocess at once**","26326848":"\n               missing values are present in 'Item_Weight' and 'Outlet_Size'. \n               Ignore missing values in 'Item_Outlet_Sales'\n","2a68e1e7":"## **Model Building**","e8bf3d16":"## **Linear Regression**","f6e831d7":"### After all, Splitting the train and test datasets into their original form as they were before","99afc564":"## **Random Forest Regressor**","e384c5e4":"### **Reading Train and Test data sets**\n\n---\n\n","98a8bc79":"## Big mart sales prediction--> Xgboost and random forest ensemble methods\n1. EDA\n2. Model Building\n3. Prediction","2037923f":"the following list are the features","bb83da70":"### **Feature Engineering**","128ebc9b":"**Normalize all columns except Target variable**","842fa692":"LF, low fat, Low Fat are same value and reg, Regular is another same type","d151fdc7":"### **Convert categorical columns into numerical values**\n\n> **a.Label Encoding**\n\n","97955eed":"### Fill missing values in item weight with mean of their corresponding item identifier","115dfeae":"### **Please give an upvote if you like my contribution and feel free to give suggestion in comment section**","f79d69df":"## **XGBoost Regressor**","ad34f558":"## **Importing necessary libraries**","a2db078d":"### **b. Bivariate Analysis**","27b0d23b":"## **Submission**","093fece9":"## **XGBoost model has highest accuracy of 61.14**\n\n> Hence XGBoost will be used for prediction\n\n","856da3d3":"## **Decision Tree Algorithm**","05ecf049":"\n\n> **One Hot Encoding**\n\n","59485d8a":"## **Peprocessing item visibility**\n                 Item visibility contains 0 which in real has no meaning. \n                 Item should be visible in Outlet.\n\n"}}