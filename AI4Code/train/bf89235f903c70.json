{"cell_type":{"57b17144":"code","19f9ef5b":"code","468de313":"code","49278523":"code","b6e09198":"code","54ee22b9":"code","2cdb0fb6":"code","4a1a19a0":"code","2bf434cc":"code","056de41d":"code","a257a178":"code","07e14182":"code","af942782":"code","b6deb795":"code","a87d1d8a":"code","81710f2e":"code","4a6737c5":"code","deecd465":"code","9681b82a":"code","6b935e6d":"code","a8919748":"code","c2bcbae7":"code","d8023b09":"code","243fde52":"code","5f878f1d":"code","39c00e08":"code","2ace4edb":"code","4d3e8ec2":"code","f513fb64":"code","10bd938d":"code","9b5cb6da":"code","e619ed19":"code","6c02a802":"code","bd7d5f7a":"code","8e39e655":"markdown","8590c5ac":"markdown","c6558711":"markdown","14eb0028":"markdown","1afece98":"markdown","a2de3bb5":"markdown","ab88c8b1":"markdown","84f0eabf":"markdown","c085dbd3":"markdown","4656845c":"markdown","72df5fbe":"markdown","ca86c746":"markdown","9363f8f4":"markdown"},"source":{"57b17144":"import os\nimport sys\nimport pandas as pd\nimport numpy as np\nimport datetime\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display, Markdown\n\nplt.rcParams.update({'figure.max_open_warning': 0})","19f9ef5b":"# \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\nbase_context = 'fivethirtyeight'\n\n\ndef fast_bar(data, figsize=(6, 4), title='', alpha=1, label='', new_figure=True):\n    with plt.style.context(base_context):\n        if new_figure:\n            plt.figure(figsize=figsize)\n        plt.bar(data.index, data, alpha=alpha, label=label)\n        plt.title(title);\n\n\ndef fast_hist(data, n=30, ax=None, figsize=(12, 4), title='', alpha=1, label='', new_figure=True):\n    with plt.style.context(base_context):\n        if new_figure:\n            plt.figure(figsize=figsize)\n        data.hist(bins=n, ax=ax, figsize=figsize, alpha=alpha, label=label)\n        plt.title(title);\n\n\ndef fast_plot(data, rolling=1, alpha=0.5, figsize=(12, 4), new_figure=True, title=None, label=None):\n    data = data.rolling(rolling).mean()\n    with plt.style.context(base_context):\n        if new_figure:\n            plt.figure(figsize=figsize)\n        plt.scatter(data.index, data, alpha=alpha)\n        plt.plot(data.index, data, linewidth=2, label=label)\n        if title is not None:\n            plt.title(title)\n\n\ndef fast_scatter(x, y, rolling=1, alpha=0.5, figsize=(12, 4), new_figure=True, title=None, label=None):\n    x = x.rolling(rolling).mean()\n    y = y.rolling(rolling).mean()\n    with plt.style.context(base_context):\n        if new_figure:\n            plt.figure(figsize=figsize)\n        plt.scatter(x, y, alpha=alpha, label=label)\n        if title is not None:\n            plt.title(title)\n\n\ndef fast_legend(ncol=3, pos=(0.5, -0.15), fontsize=16):\n    return plt.legend(loc='upper center', ncol=ncol, bbox_to_anchor=pos, fontsize=fontsize)","468de313":"data = pd.read_csv('\/kaggle\/input\/secom-data\/uci-secom.csv')\nk = 30\ncolumns = data.columns[k:k+10]\ndata2 = data[columns]\ndata2.plot(figsize=(18,10))\n#df = data.describe()\n#df.to_csv('desc.txt')","49278523":"# Loading saple data\ndata = pd.read_csv('\/kaggle\/input\/secom-data\/uci-secom.csv', index_col=0)\n#data['Pass\/Fail'].value_counts()\n\n# We will take only few columns from 544 \ndata = data[['29','32','33','34','35','36','39','Pass\/Fail']]\n\n# Now we give the names for the unnamed columns\ndata.columns = ['Pressure','Current','Volume','Temperature', 'FlowIn', 'FlowOut','LOP','Pass\/Fail']\n#data.set_index(\"Time\", inplace = True)\ndata.index = pd.to_datetime(data.index, format=\"%Y-%m-%d %H:%M:%S\")\ndata = data.sort_index()\n\nlist_columns = (data.columns[:-1]).to_list()\n\n# \u0410urther we will have deal with this dataset\ndata.head(10)\ndata.plot(figsize=(18,8))","b6e09198":"data.shape","54ee22b9":"data.describe()","2cdb0fb6":"for column in list_columns[:-2]:\n    fast_plot(data[column], title=column + ' raw data ', figsize=(18, 4))","4a1a19a0":"for column in list_columns[:-2]:\n    fast_plot(data[column], title=column, figsize=(22, 3), label=column)\n    fast_plot(data[column], rolling=10, new_figure=False, label=f'\u0421\u0433\u043b\u0430\u0436\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 {column}')\n    fast_legend()","2bf434cc":"#ind = pd.to_datetime(data.index.to_series())\n#ind.diff().value_counts()\n#pd.to_datetime(data.Time.diff().value_counts())\n\ndiv = data.index.to_series().diff().value_counts()\ndiv.plot(figsize=(16,5))","056de41d":"for column in list_columns:\n    data[column].hist(label = column)\n    plt.ylabel(column)\n    plt.show()","a257a178":"#sns.pairplot(data, hue = \"Pass\/Fail\");\n#plt.show()","07e14182":"# Check if Nan exist\ndata.isna().sum()","af942782":"# Delete all rows with missed data\ndata = data.dropna()\ndata.isna().sum()","b6deb795":"corr = data.corr()\ncorr.style.background_gradient(cmap='coolwarm')","a87d1d8a":"fast_scatter(data['FlowIn'], data['Temperature'], title='Correlation')\nplt.xlabel('FlowIn')\nplt.ylabel('Temperature');","81710f2e":"fast_scatter(data['FlowOut'], data['Temperature'], title='Correlation')\nplt.xlabel('FlowOut')\nplt.ylabel('Temperature');","4a6737c5":"fast_scatter(data['FlowIn'], data['LOP'], title='Correlation')\nplt.xlabel('FlowIn')\nplt.ylabel('LOP');","deecd465":"# \u0414\u0435\u043b\u0438\u043c \u0432\u0435\u0441\u044c \u0440\u044f\u0434 \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438, \u0434\u043b\u044f \u0447\u0435\u0433\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0438\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n\n# \u0421\u043e\u0441\u0442\u043e\u0430\u0432\u043b\u044f\u0435\u043c 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ntrain = data['2008-02-10 23:32:00':'2008-06-10 00:41:00'] \ntest = data['2008-06-10 00:41:00':]\n\n# \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\nplt.figure(figsize=(18,7))\nplt.plot(data)\n#plt.axvline(pd.to_datetime('2008-02-10', format=\"%Y-%m-%d\"))\n#plt.axvline(pd.to_datetime('2008-06-10', format=\"%Y-%m-%d\"))\nplt.axvline(data.index[data.index=='2008-02-10 23:32:00'][0])\nplt.axvline(data.index[data.index=='2008-06-10 00:41:00'][0])\nplt.axvspan(\n    data.index[data.index=='2008-02-10 23:32:00'][0],\n    data.index[data.index=='2008-06-10 00:41:00'][0],\n    alpha=0.2, \n    color='red', label='\u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nfast_legend();","9681b82a":"column_name = 'Temperature'\nnumber_of_stdevs_away_from_mean = 2 # to set the accuracy for anomaly finding\nwindow = 6 # to set the alignment\n\ndt = data.copy()\ndt[column_name+'_Rolling_Average'] = dt[column_name].rolling(window=window, center=True).mean()\ndt[column_name+'_Rolling_StDev'] = dt[column_name].rolling(window=window, center=True).std()\ndt[column_name+'_Low_Pass_Filter_Anomaly'] = (abs(dt[column_name] - dt[column_name+'_Rolling_Average'])) > (number_of_stdevs_away_from_mean * dt[column_name+'_Rolling_StDev'])\ndt[column_name+'_Div'] = abs(dt[column_name] - dt[column_name+'_Rolling_Average'])\/dt[column_name+'_Rolling_StDev']\n\nfast_plot(dt[column_name], title='Temperature', label='\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435')\nplt.plot(dt.index[dt[column_name+'_Low_Pass_Filter_Anomaly'] == True],dt[column_name][dt[column_name+'_Low_Pass_Filter_Anomaly'] == True], 'rs', label='\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0438')\nfast_legend();","6b935e6d":"len(dt[dt[column_name+'_Low_Pass_Filter_Anomaly'] == True])","a8919748":"x_tr = train.drop(columns=['Pressure','Current','Volume','Temperature','LOP','Pass\/Fail'])\ny_tr = train['Temperature']\nx_tst = test.drop(columns=['Pressure','Current','Volume','Temperature','LOP','Pass\/Fail'])\ny_tst = test['Temperature']","c2bcbae7":"# \u041d\u041e\u0420\u041c\u0410\u041b\u0418\u0417\u0410\u0426\u0418\u042f\n# from sklearn.preprocessing import StandardScaler\n# StSc = StandardScaler()\n# StSc.fit(data.copy())\n# x_transform = StSc.transform(data.copy())\n# pd.DataFrame(x_transform).plot(figsize=(18,6))","d8023b09":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error","243fde52":"model_dtr = DecisionTreeRegressor()\nmodel_dtr.fit(x_tr, y_tr)","5f878f1d":"mean_absolute_error(y_tst, model_dtr.predict(x_tst))","39c00e08":"mean_squared_error(y_tst, model_dtr.predict(x_tst))","2ace4edb":"alldata = data.drop(columns=['Pressure','Current','Volume','Temperature','LOP','Pass\/Fail'])\nres = data[['Temperature']]","4d3e8ec2":"alldata[120:121].to_json()","f513fb64":"res['Predict'] = model_dtr.predict(alldata)\nres['Temperature'].plot(figsize=(16,6))\nres['Predict'].plot(figsize=(16,6))","10bd938d":"res['ITC'] = round((res.Temperature - res.Predict), 2)\n#res.head(50)","9b5cb6da":"alldata.info()","e619ed19":"importances = model_dtr.feature_importances_\nindices = np.argsort(importances)\n\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [i for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","6c02a802":"# model_dtc = LinearRegression()\n# model_dtc.fit(x_tr, y_tr)","bd7d5f7a":"# \u0421\u0435\u0440\u0438\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n\nimport pickle\nwith open('model_dtr.pickle', 'wb') as f:\n    pickle.dump(model_dtr, f)","8e39e655":"# Now we will compare raw data with mean value of it","8590c5ac":"# Check the size of the dataset","c6558711":"# This is a test notebook for DS lessons\n","14eb0028":"# Check the data parameters","1afece98":"#### There are some gaps. The most large gap is more then 30 days.","a2de3bb5":"# \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e","ab88c8b1":"# Let's see the gaps in data","84f0eabf":"## It looks like FlowOut is correlated with Temperature or vice versa","c085dbd3":"# Just create function for charts drawing","4656845c":"# Use method of Random Forest","72df5fbe":"# The DATA uploading","ca86c746":"\u0414\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u043e \u0441\u043f\u0440\u0430\u0432\u0438\u043b\u0441\u044f \u0441 \u0437\u0430\u0434\u0430\u0447\u0435\u0439","9363f8f4":"# Now let's see pairplot"}}