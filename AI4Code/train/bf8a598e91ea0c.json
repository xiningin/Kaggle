{"cell_type":{"cdc452f8":"code","0546e3de":"code","817617fe":"code","d3a925cc":"code","8e239948":"code","54af973a":"markdown"},"source":{"cdc452f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0546e3de":"train = pd.read_csv(\"..\/input\/ml-challenge-turkiye-is-bankasi-2\/train.csv\")\ntest = pd.read_csv('..\/input\/ml-challenge-turkiye-is-bankasi-2\/test_set.csv')\nsample_submission = pd.read_csv('..\/input\/ml-challenge-turkiye-is-bankasi-2\/sampleSubmission.csv')\n\nprint(\"Train shape: \", train.shape)\nprint(\"Test shape: \", test.shape)\nprint(\"Submission shape: \", sample_submission.shape)\n","817617fe":"from sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nimport xgboost as xgb\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.metrics import mean_absolute_error\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nle = preprocessing.LabelEncoder()\n\ntest_liste=[]\nliste=[]\npredictions=[]\n\nfor i in range(39):\n    subset=train[(train.Id==i)]\n    liste.append(subset)\n    X=liste[i].drop(\"ISLEM_TUTARI\", axis=1)\n    X=X.drop(\"Record_Count\", axis=1)\n    X=X.drop(\"SEKTOR\", axis=1)\n    X=X.drop(\"YIL_AY\", axis=1)\n    y=liste[i].ISLEM_TUTARI\n\n    test_subset=test[(test.Id==i)]\n    test_liste.append(test_subset)\n    X_test=test_liste[i].drop(\"ISLEM_TUTARI\", axis=1)\n    X_test=X_test.drop(\"Record_Count\", axis=1)\n    X_test=X_test.drop(\"SEKTOR\", axis=1)\n    X_test=X_test.drop(\"YIL_AY\", axis=1)\n    \n    X['ISLEM_TURU']= le.fit_transform(X['ISLEM_TURU'])\n    X_test['ISLEM_TURU']= le.fit_transform(X_test['ISLEM_TURU'])\n    \n    X_train,X_val,y_train,y_val=train_test_split(X, y, test_size=0.30, random_state=42)\n    \n    xgbr=xgb.XGBRegressor()\n    xgbr.fit(X_train,y_train)\n    \n    y_preds = xgbr.predict(X_test)\n    \n    #Changing negative values to zero\n    for index, item in enumerate(y_preds):\n        if (item <0):\n            y_preds[index] = 0\n    predictions.append(sum(y_preds))\n\n\n\n\n\n\n    ","d3a925cc":"submission=sample_submission.copy()\nsubmission['Expected'] = predictions\nsubmission.head()","8e239948":"filename = 'submission.csv'\nsubmission.to_csv(filename, index = False)","54af973a":"Dividing the train dataset into subsets by their Id values. Then using this subset to fit and predicting the same Id on the test set. Since we have 39 different Ids, the loop is in the range of 39."}}