{"cell_type":{"28c70087":"code","5d0b51d2":"code","8994ae16":"code","b54084f0":"code","efe54ed0":"code","dccc5250":"code","899fdbd8":"code","f48c84b5":"code","b068794f":"code","f7d5f63e":"code","bb7105f8":"code","dbd93769":"code","fcd0d844":"code","b97bb7c4":"code","76e78adf":"markdown"},"source":{"28c70087":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tensorflow.python.keras.preprocessing.text import Tokenizer\nfrom tensorflow.python.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Dropout, Embedding, LSTM, GlobalMaxPooling1D, SpatialDropout1D\nfrom tensorflow.python.keras import optimizers","5d0b51d2":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8994ae16":"file = '\/kaggle\/input\/gender-detection\/Gender_Detection.csv'\ndf = pd.read_csv(file, encoding='ISO-8859-1')","b54084f0":"df['Name'] = df['Name'].str.lower()\ndf['Gender'] = df['Gender'].replace('M', 0)\ndf['Gender'] = df['Gender'].replace('F', 1)\ndf.head(5)","efe54ed0":"# get length of longest name\nmax_name_len = max(df['Name'].apply(len))","dccc5250":"# training data\nx_train = df['Name']\ny_train = df['Gender']","899fdbd8":"max_words = 1000\ntokenizer = Tokenizer(\n    num_words = max_words,\n    filters='!\"#$%&()*+,-.\/:;<=>?@[\\\\]^_`{|}~\\t\\n',\n    char_level = True,\n    lower = True\n)\ntokenizer.fit_on_texts(x_train)","f48c84b5":"x_train = tokenizer.texts_to_sequences(x_train)\nword_index = tokenizer.word_index","b068794f":"# pad sequence \nx_train = pad_sequences(x_train, maxlen = max_name_len)\n# encoding data\ny_train = to_categorical(y_train)","f7d5f63e":"# build the model: 2 stacked LSTM\nmodel_lstm = Sequential()\nmodel_lstm.add(Embedding(input_dim = max_words, output_dim = 256, input_length = max_name_len))\nmodel_lstm.add(Dropout(0.2))\nmodel_lstm.add(LSTM(100, return_sequences=True))\nmodel_lstm.add(LSTM(50))\nmodel_lstm.add(Dropout(0.2))\nmodel_lstm.add(Dense(2, activation='softmax'))\nmodel_lstm.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model_lstm.summary())","bb7105f8":"# fit model\nhistory = model_lstm.fit(\n    x_train,\n    y_train,\n    validation_split = 0.3,\n    epochs = 10,\n    batch_size = 256\n)","dbd93769":"print(\"Accuracy: \", history.history['accuracy'])\nprint(\"Validation Accuracy: \", history.history['val_accuracy'])","fcd0d844":"# prediction example\nname=[\"steve\",\"ketty\",\"harry\",\"rhea\", \"ryan\"]\nname_X = tokenizer.texts_to_sequences(name)\nname_X = pad_sequences(name_X, maxlen = max_name_len)","b97bb7c4":"pred = np.argmax(model_lstm.predict(name_X), axis=-1)\nprint(list(map(lambda x: 'Male' if x == 0 else 'Female', pred)))","76e78adf":"# **Name-based Gender Prediction with LSTM**"}}