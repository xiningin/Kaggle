{"cell_type":{"52bb9d6d":"code","1581aacb":"code","a6a3f21d":"code","db933419":"code","e9bdb10f":"code","b632f6e0":"code","66b49564":"code","e86481c3":"code","2b7f660b":"code","5a30052f":"code","42b4b789":"code","ae26f396":"code","2583b6f8":"code","5eca1ad3":"code","331ec4a1":"code","ee532829":"code","e1c6b22b":"code","b35586f4":"code","7cb1a8a2":"code","dc0fbcf0":"code","91e4dc92":"code","8f665aaf":"code","c96d9b96":"code","63998273":"code","0e2321da":"code","b451bc6b":"code","a3bfff68":"code","33af49e6":"code","16155047":"code","150a1cd3":"code","6365c72b":"code","299b7044":"code","3d20d9a3":"code","f80d9a6f":"code","aeeb6e81":"code","1ec58bca":"code","a889a8bb":"code","6143a2e5":"code","327713a9":"code","ef4f0927":"code","c433197b":"code","c7edaabe":"code","2dcc0a45":"code","4cf739c5":"code","c78bce5f":"code","c03c162e":"code","0351f8f5":"code","40699d85":"code","5e91d990":"code","1a9a663d":"code","6b20c8e0":"code","12ae0990":"code","d3dadddc":"code","3dea1865":"code","78d36b3e":"code","f951ba96":"code","32d2351f":"code","359e70ed":"code","ebca9e58":"code","5fdc0555":"code","5e785efd":"markdown","f1fcc7b0":"markdown","86c97aa9":"markdown","8f5d71ac":"markdown","3088c94e":"markdown","020f625e":"markdown","8e3b07d8":"markdown","3c7d7b38":"markdown","273bb62b":"markdown","785668af":"markdown","1dbc8bfe":"markdown","4426f366":"markdown","3120f53d":"markdown","b3b93483":"markdown","c8c9b47c":"markdown","14d4c64e":"markdown","82ef0d75":"markdown","53e65c67":"markdown","b0ba8e7c":"markdown","e2ac9827":"markdown","2720cdcf":"markdown"},"source":{"52bb9d6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1581aacb":"import matplotlib.pyplot as plt\nimport re\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nimport spacy\nfrom sklearn.svm import LinearSVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nimport numpy as np \nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout\nfrom tensorflow.keras.optimizers import SGD\nimport seaborn as sns","a6a3f21d":"data_train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ndata_test = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")","db933419":"y_train_data = data_train[\"target\"]","e9bdb10f":"data_train.head()","b632f6e0":"data_test.head()","66b49564":"data_train.shape","e86481c3":"data_train.isna().sum()","2b7f660b":"data_train.head()","5a30052f":"def eliminate_symbols(text):\n    \"\"\"\n    this function allows to keep only letters in the text\n    \"\"\"\n    text =re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub(\"[^a-zA-^Z]\", \" \", text)\n    \n    return text\n\ndata_train[\"text\"] = data_train[\"text\"].apply(lambda x : eliminate_symbols(x))","42b4b789":"#Text to lowercase\ndata_train[\"text\"] = data_train[\"text\"].apply(lambda x : x.lower())","ae26f396":"# Tokenize text\ndata_train[\"text\"]=data_train[\"text\"].apply(lambda x : word_tokenize(x))","2583b6f8":"#Eliminate stopwords\ndef eliminate_stop_words(token):\n    new=[]\n    for word in token:\n        if word not in stopwords.words('english'):\n            new.append(word)\n    return new\n\ndata_train[\"text\"]=data_train[\"text\"].apply(lambda x : eliminate_stop_words(x))\n","5eca1ad3":"def token_toString(token):\n    \"\"\"\n    After transforming sentenses to token we need to return them as sentences\n    \"\"\"\n    text=\"\"\n    for j in token:\n        text+=\" \"+j\n    return text\ndata_train[\"text\"]=data_train[\"text\"].apply(lambda x : token_toString(x))\n","331ec4a1":"def get_top_n_words(corpus, n=None):\n    vec = CountVectorizer().fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\ncommon_words = get_top_n_words(data_train['text'], 20)\ndf2 = pd.DataFrame(common_words, columns = ['text' , 'count'])\ndf2.groupby('text').sum()['count'].sort_values(ascending=False).plot(\n    kind='bar', title='Top 20 words')\n","ee532829":"def get_top_bi_words(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(2, 2)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\ncommon_words = get_top_bi_words(data_train['text'], 20)\ndf2 = pd.DataFrame(common_words, columns = ['text' , 'count'])\ndf2.groupby('text').sum()['count'].sort_values(ascending=False).plot(\n    kind='bar', title='Top 20 Bigrams')","e1c6b22b":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ntweet_len=data_train[data_train['target']==1]['text'].str.len()\nax1.hist(tweet_len,color='red')\nax1.set_title('disaster tweets')\ntweet_len=data_train[data_train['target']==0]['text'].str.len()\nax2.hist(tweet_len,color='green')\nax2.set_title('Not disaster tweets')\nfig.suptitle('Characters in tweets')\nplt.show()","b35586f4":"nlp = spacy.load('en_core_web_lg')\ntrain_vectors = np.array([nlp(text).vector for text in data_train['text']])\ntest_vectors = np.array([nlp(text).vector for text in data_test['text']])","7cb1a8a2":"# Here is a little example to see how CountVectorizer works\n# it takes all the vocabulary in the dataset and make each word as feature the it puts zeros and ones the feature for each sentence\n# in the dataset\ncount_vect = CountVectorizer()\nX_data_count = count_vect.fit_transform([\"when i saw your shadow\",\"I am swimming am and the waves kicked me out\"])\nprint(pd.DataFrame(X_data_count.A, columns=count_vect.get_feature_names()).to_string())","dc0fbcf0":"count_vect = CountVectorizer()\ncount_vect.fit(data_train['text'])\n\ntrain_vectors1 = count_vect.transform(data_train['text'])\ntest_vectors1 = count_vect.transform(data_test['text'])","91e4dc92":"tfidf_transformer = TfidfTransformer()\nX_data_train_tfidf = tfidf_transformer.fit_transform(train_vectors1)\nX_data_test_tfidf = tfidf_transformer.transform(test_vectors1)","8f665aaf":"X_train_spacy_vectorizer, X_test_spacy_vectorizer, y_train_spacy_vectorizer, y_test_spacy_vectorizer = train_test_split(train_vectors, y_train_data, test_size= 0.2, shuffle= True, random_state= 42)","c96d9b96":"X_train_count_vectorizer, X_test_count_vectorizer, y_train_count_vectorizer, y_test_count_vectorizer = train_test_split(train_vectors1, y_train_data, test_size= 0.2, shuffle= True, random_state= 42)","63998273":"svc = LinearSVC(dual= False, max_iter= 10000, random_state= 1)\nsvc.fit(X_train_spacy_vectorizer, y_train_spacy_vectorizer)\n\nprint(f'Accuracy Score : {svc.score(X_train_spacy_vectorizer, y_train_spacy_vectorizer):.3f}')\n","0e2321da":"y_pred =svc.predict(X_test_spacy_vectorizer)\n","b451bc6b":"cm =confusion_matrix(y_test_spacy_vectorizer, y_pred)\nsns.heatmap(cm\/np.sum(cm), annot=True, \n            fmt='.2%', cmap='Blues')","a3bfff68":"print(classification_report(y_test_spacy_vectorizer, y_pred))","33af49e6":"\nsvc = LinearSVC(dual= False, max_iter= 10000, random_state= 1)\nsvc.fit(X_train_count_vectorizer, y_train_count_vectorizer)\n\nprint(f'Accuracy Score : {svc.score(X_train_count_vectorizer, y_train_count_vectorizer):.3f}')\n","16155047":"y_pred_count =svc.predict(X_test_count_vectorizer)\nprint(classification_report(y_test_count_vectorizer, y_pred_count))","150a1cd3":"cm =confusion_matrix(y_test_count_vectorizer, y_pred_count)\nsns.heatmap(cm\/np.sum(cm), annot=True, \n            fmt='.2%', cmap='Reds')","6365c72b":"logreg_basic = LogisticRegression()\nlogreg_basic.fit(X_train_spacy_vectorizer, y_train_spacy_vectorizer)\ny_pred_logistic_spacy = logreg_basic.predict(X_test_spacy_vectorizer)","299b7044":"print(classification_report(y_test_spacy_vectorizer, y_pred_logistic_spacy))","3d20d9a3":"cm =confusion_matrix(y_test_spacy_vectorizer, y_pred_logistic_spacy)\nsns.heatmap(cm\/np.sum(cm), annot=True, \n            fmt='.2%', cmap='Greens')","f80d9a6f":"logreg_basic = LogisticRegression(C=1.0)\nlogreg_basic.fit(X_train_count_vectorizer, y_train_count_vectorizer)\ny_pred_logistic_count = logreg_basic.predict(X_test_count_vectorizer)","aeeb6e81":"print(classification_report(y_test_count_vectorizer, y_pred_logistic_count))","1ec58bca":"cm =confusion_matrix(y_test_count_vectorizer, y_pred_logistic_count)\nsns.heatmap(cm\/np.sum(cm), annot=True, \n            fmt='.2%', cmap='Purples')","a889a8bb":"classifier_spacy = AdaBoostClassifier( DecisionTreeClassifier(max_depth=1),\n                                 n_estimators=200,\n                                learning_rate=1\n                               )\nclassifier_spacy.fit(X_train_spacy_vectorizer,y_train_spacy_vectorizer)","6143a2e5":"y_pred_adaboost_spacy = classifier_spacy.predict(X_test_spacy_vectorizer)","327713a9":"print(classification_report(y_test_spacy_vectorizer, y_pred_adaboost_spacy))","ef4f0927":"cm =confusion_matrix(y_test_spacy_vectorizer, y_pred_adaboost_spacy)\nsns.heatmap(cm\/np.sum(cm), annot=True, \n            fmt='.2%', cmap='Blues')","c433197b":"classifier = AdaBoostClassifier( DecisionTreeClassifier(max_depth=1),\n                                 n_estimators=200,\n                                learning_rate=1.0\n                               )\nclassifier.fit(X_train_count_vectorizer,y_train_count_vectorizer)","c7edaabe":"y_pred_adaboost_count = classifier.predict(X_test_count_vectorizer)\n","2dcc0a45":"print(classification_report(y_test_count_vectorizer, y_pred_adaboost_count))","4cf739c5":"cm =confusion_matrix(y_test_count_vectorizer, y_pred_adaboost_count)\nsns.heatmap(cm\/np.sum(cm), annot=True, \n            fmt='.2%', cmap='Blues')","c78bce5f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn import metrics\n\npredicted = cross_val_predict(LogisticRegression(), train_vectors, y_train_data, cv=9)\nprint( metrics.accuracy_score(y_train_data, predicted))\n\n\n\n","c03c162e":"print (classification_report(y_train_data, predicted))","0351f8f5":"train_vectors1[0].T.shape","40699d85":"model = Sequential()\n\nmodel.add(Dense(512, input_dim=16047, activation='relu', name='fc1'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(256, activation='relu', name='fc2'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128, activation='relu', name='fc3'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid', name='output'))\n\nsgd = SGD(lr=0.1)\nmodel.compile(loss='mean_squared_error', optimizer=sgd)\nprint(model.summary())","5e91d990":"history=model.fit(train_vectors1.toarray(), y_train_data, batch_size=4, nb_epoch=20, verbose=1)\nprint(np.around(model.predict_proba(train_vectors1.toarray())))","1a9a663d":"from sklearn.metrics import roc_curve, auc\n\nfpr1, tpr1, threshold1 = roc_curve(y_test_spacy_vectorizer, y_pred)\nroc_auc1 = auc(fpr1, tpr1)\n\n\nfpr2, tpr2, threshold2 = roc_curve(y_test_count_vectorizer, y_pred_count)\nroc_auc2 = auc(fpr2, tpr2)\n\n\nfpr3, tpr3, threshold3 = roc_curve(y_test_count_vectorizer, y_pred_logistic_count)\nroc_auc3 = auc(fpr3, tpr3)\n\n\nfpr4, tpr4, threshold4 = roc_curve(y_test_spacy_vectorizer, y_pred_logistic_spacy)\nroc_auc4 = auc(fpr4, tpr4)\n\n\nfpr5, tpr5, threshold5 = roc_curve(y_pred_adaboost_spacy, y_test_spacy_vectorizer)\nroc_auc5 = auc(fpr5, tpr5)\n\n\n\nfpr6, tpr6, threshold6 = roc_curve(y_pred_adaboost_count, y_test_count_vectorizer)\nroc_auc6 = auc(fpr6, tpr6)","6b20c8e0":"plt.figure(figsize=(10,10)) \nplt.plot(fpr1, tpr1, color='navy', lw=2, label='ROC CURVE LINEAR SVM SPACY VECTORIZER'% roc_auc1)\nplt.plot(fpr2, tpr2, color='green', lw=2, label='ROC CURVE LINEAR SVM COUNT VECTORIZER'% roc_auc2)\nplt.plot(fpr3, tpr3, color='yellow', lw=2, label='ROC CURVE LOGISTIC REGRESSION SPACY VECTORIZER'% roc_auc4)\n\nplt.plot(fpr3, tpr3, color='blue', lw=2, label='ROC CURVE LOGISTIC REGRESSION COUNT VECTORIZER'% roc_auc3)\nplt.plot(fpr3, tpr3, color='red', lw=2, label='ROC CURVE ADABOOST CLASSIFIER SPACY VECTORIZER'% roc_auc5)\nplt.plot(fpr3, tpr3, color='purple', lw=2, label='ROC CURVE ADABOOST CLASSIFIER COUNT VECTORIZER'% roc_auc6)\n\nplt.plot([0, 1], [0, 1], color='red', lw=2, linestyle='--') \nplt.xlim([0.0, 1.0]) \nplt.ylim([0.0, 1.05]) \nplt.xlabel('False Positive Rate') \nplt.ylabel('True Positive Rate') \nplt.title('Classifiers ROC curves') \nplt.legend(loc = \"lower right\")\nplt.show()","12ae0990":"y_pred_count =svc.predict(test_vectors1)","d3dadddc":"data_submission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")","3dea1865":"data_submission","78d36b3e":"\ndata_submission[\"target\"] = y_pred_adaboost_count","f951ba96":"data_submission = data_submission.loc[:,[\"id\",'target']]","32d2351f":"data_submission","359e70ed":"def classify(output):\n    if output > 0.5:\n        return 1\n    else:\n        return 0\n    ","ebca9e58":"data_submission[\"target\"] = data_submission[\"target\"].apply(lambda x : classify(x))\ndata_submission","5fdc0555":"data_submission.to_csv('submission.csv', index=False)","5e785efd":"# VI - Modeling and prediction","f1fcc7b0":"### 2 - Extracting features from text with CountVectorizer","86c97aa9":"##### f - AdaBoost with Count vectorizer data","8f5d71ac":"##### g - Logistic Regression with cross validation","3088c94e":"##### d - Logisitic Regression with Count Vectorizer","020f625e":"\nTwitter has become an important communication channel in times of emergency.\nThe ubiquitousness of smartphones enables people to announce an emergency they\u2019re observing in real-time. Because of this, more agencies are interested in programatically monitoring Twitter (i.e. disaster relief organizations and news agencies).\n\nBut, it\u2019s not always clear whether a person\u2019s words are actually announcing a disaster\n<img height =\"500\" width=\"250\" src =  \"https:\/\/st.depositphotos.com\/1032753\/4674\/v\/950\/depositphotos_46741417-stock-illustration-twitter-and-social-media-concept.jpg\">\n<img height =\"500\" width=\"250\" src =  \"https:\/\/miro.medium.com\/max\/1400\/0*z9jqZsQ7JSTZGSZz.jpg\">","8e3b07d8":"# V - Submission","3c7d7b38":"##### c - Logisitic Regression with Spacy Vectorizer","273bb62b":"The problem here is that the Machine Learning algorithm will give more weightage to longer documents (sentenses) beacause \nthey will have more ones as values in features. To avoid this issue we will use TF-IDF.\n<br>\n<br>\n\nTF-IDF : Term frequency inverse document frequence <br>\nLet's take an exemple : \"We are Hexagon, we are DataScientists\"<br>\nTFIDF(\"We\") = 2\/6 <br>\nTFIDF(\"DataScientits\") = 1\/6 <br>","785668af":"### 1 - Spacy Vectorizer","1dbc8bfe":"# I - Reading Data","4426f366":"# II - Data Understanding","3120f53d":"# III - Data Preparaton","b3b93483":"##### h - Neural Network","c8c9b47c":"##### b - SVM classifier count vectorizer data","14d4c64e":"##### e - AdaBoost with Spacy Vectorizer data","82ef0d75":"### 2- Applying machine learning algorithms","53e65c67":"### 1 - Splitting train_data to train and test sets","b0ba8e7c":"# Intro and Objective","e2ac9827":"# III - Data Cleaning","2720cdcf":"##### a - SVM classifier Spacy vectorizer data"}}