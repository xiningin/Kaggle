{"cell_type":{"48f3bd79":"code","545554df":"code","2a2b97d8":"code","f8bf64b3":"code","02aeb7ea":"code","59d08b6f":"code","8dabb690":"code","7a2e02ca":"code","f97b7842":"code","8d783e40":"code","af08466c":"code","93fa6fa0":"code","9804847c":"code","f6b137a9":"code","2af6500c":"code","dc85ce54":"code","9384971c":"code","620ae651":"code","8713697b":"code","20d23537":"markdown"},"source":{"48f3bd79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","545554df":"# import the libraries as shown below\n\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten,Conv2D\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom tensorflow.keras.models import Sequential\n\nfrom glob import glob\nimport matplotlib.pyplot as plt","2a2b97d8":"# re-size all the images to this\nIMAGE_SIZE = [224, 224]\n\ntrain_path = '..\/input\/malaria-detection\/Dataset\/Train'\nvalid_path = '..\/input\/malaria-detection\/Dataset\/Test'","f8bf64b3":"# Import the Vgg 16 library as shown below and add preprocessing layer to the front of VGG\n# Here we will be using imagenet weights\n\nmobilnet = VGG19(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)","02aeb7ea":"# don't train existing weights\nfor layer in mobilnet.layers:\n    layer.trainable = False\n","59d08b6f":"# useful for getting number of output classes\nfolders = glob('..\/input\/malaria-detection\/Dataset\/Train')","8dabb690":"folders\n","7a2e02ca":"# our layers - you can add more if you want\nx = Flatten()(mobilnet.output)","f97b7842":"prediction = Dense(len(folders), activation='softmax')(x)\n\n# create a model object\nmodel = Model(inputs=mobilnet.input, outputs=prediction)\n","8d783e40":"# view the structure of the model\nmodel.summary()","af08466c":"from tensorflow.keras.layers import MaxPooling2D\n","93fa6fa0":"### Create Model from scratch using CNN\nmodel=Sequential()\nmodel.add(Conv2D(filters=16,kernel_size=2,padding=\"same\",activation=\"relu\",input_shape=(224,224,3)))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=32,kernel_size=2,padding=\"same\",activation =\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=64,kernel_size=2,padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Flatten())\nmodel.add(Dense(500,activation=\"relu\"))\nmodel.add(Dense(2,activation=\"softmax\"))\nmodel.summary()\n","9804847c":"\n# tell the model what cost and optimization method to use\nmodel.compile(\n  loss='categorical_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)","f6b137a9":"# Use the Image Data Generator to import the images from the dataset\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","2af6500c":"# Make sure you provide the same target size as initialied for the image size\ntraining_set = train_datagen.flow_from_directory('..\/input\/malaria-detection\/Dataset\/Train',\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')","dc85ce54":"training_set\n","9384971c":"test_set = test_datagen.flow_from_directory('..\/input\/malaria-detection\/Dataset\/Test',\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')\n","620ae651":"# fit the model\n# Run the cell. It will take some time to execute\nr = model.fit_generator(\n  training_set,\n  validation_data=test_set,\n  epochs=50,\n  steps_per_epoch=len(training_set),\n  validation_steps=len(test_set)\n)","8713697b":"# plot the loss\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","20d23537":"malaria detection  using transfer learning\n\n![title](https:\/\/storage.googleapis.com\/kaggle-datasets-images\/87153\/200743\/31c387765e937986306b32afe5b7148c\/data-original.jpg?t=2018-12-05-05-57-20)"}}