{"cell_type":{"aa865d82":"code","93a750bb":"code","5d48d4f7":"code","e0860eb4":"code","8f8eb821":"code","e64028f8":"code","8887e789":"code","403784d2":"code","18c1d62b":"code","ba266fbc":"code","2e7bb843":"code","58fce3c9":"code","f816e2a8":"code","1b5132ba":"code","eb1ee33f":"code","2cf2f3ad":"code","dc416812":"code","0b785697":"code","fdd61813":"code","3ce981e5":"code","8ff2db17":"code","8cb61093":"code","e8cea882":"code","35a44bf3":"code","c7ae397f":"code","f2cdb465":"code","ff82aa04":"code","9dd5894d":"code","955c007d":"code","8f44c298":"code","60174896":"markdown","3e182c74":"markdown","491b6e5e":"markdown","d7571ed2":"markdown","e3b3e282":"markdown","014e6496":"markdown","a3a3488b":"markdown","52d0229d":"markdown","be32de68":"markdown","5585e911":"markdown","1af38d0c":"markdown","36d51bbe":"markdown","861a27e7":"markdown","7c0c75c9":"markdown","08754286":"markdown","f35f5b6a":"markdown","2d14a153":"markdown","d5cdf925":"markdown","8aca97f0":"markdown"},"source":{"aa865d82":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93a750bb":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode,iplot\n\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\n\n\ninit_notebook_mode(connected=True)\nplt.rcParams.update({'figure.max_open_warning': 0})","5d48d4f7":"df = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')\ndata = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')\ndata.head()","e0860eb4":"data.shape","8f8eb821":"data.info()","e64028f8":"for col in data.columns:\n    if '-' in col:\n        data = data.rename(columns={col:col.replace('-','_')})\n        \ndata.rename(columns = {'class':'class_ep'}, inplace = True)","8887e789":"data.columns","403784d2":"capshape={\"b\":\"bell\",\"c\":\"conical\",\"x\":\"convex\",\"f\":\"flat\",\"k\":\"knobbed\",\"s\":\"sunken\"}\ndata[\"cap_shape\"]=data[\"cap_shape\"].replace(capshape)\n\ncapsurface={\"f\": \"fibrous\", \"g\": \"grooves\",\"y\":\"scaly\",\"s\": \"smooth\"}\ndata[\"cap_surface\"]=data[\"cap_surface\"].replace(capsurface)\n\ncapcolor={\"n\":\"brown\",\"b\":\"buff\",\"c\":\"cinnamon\",\"g\":\"gray\",\"r\":\"green\",\"p\":\"pink\",\"u\":\"purple\",\"e\":\"red\",\"w\":\"white\",\"y\":\"yellow\"}\ndata[\"cap_color\"]=data[\"cap_color\"].replace(capcolor)\n\nodor={\"a\":\"almond\",\"l\":\"anise\",\"c\":\"creosote\",\"y\":\"fishy\",\"f\":\"foul\",\"m\":\"musty\",\"n\":\"none\",\"p\":\"pungent\",\"s\":\"spicy\"}\ndata[\"odor\"]=data[\"odor\"].replace(odor)\n\ngillattachment={\"a\":\"attached\",\"f\":\"free\"}\ndata[\"gill_attachment\"]=data[\"gill_attachment\"].replace(gillattachment)\n\ngillspacing={\"c\":\"close\",\"w\":\"crowded\"}\ndata[\"gill_spacing\"]=data[\"gill_spacing\"].replace(gillspacing)\n\ngillsize={\"b\":\"broad\",\"n\":\"narrow\"}\ndata[\"gill_size\"]=data[\"gill_size\"].replace(gillsize)\n\ngillcolor={\"k\":\"black\",\"b\":\"buff\",\"n\":\"brown\",\"h\":\"chocolate\",\"g\":\"gray\",\"r\":\"green\",\"o\":\"orange\",\"p\":\"pink\",\"u\":\"purple\",\"e\":\"red\",\"w\":\"white\",\"y\":\"yellow\"}\ndata[\"gill_color\"]=data[\"gill_color\"].replace(gillcolor)\n\nstalkshape={\"t\":\"tapering\",\"e\":\"enlarging\"}\ndata[\"stalk_shape\"]=data[\"stalk_shape\"].replace(stalkshape)\n\nstalkroot={\"b\":\"bulbous\",\"c\":\"club\",\"e\":\"equal\",\"z\":\"rhizomorphs\",\"r\":\"rooted\",\"?\":\"missing\"}\ndata[\"stalk_root\"]=data[\"stalk_root\"].replace(stalkroot)\n\nstalksurface={\"s\":\"smooth\",\"k\":\"silky\",\"f\":\"fibrous\",\"y\":\"scaly\"}\ndata[\"stalk_surface_above_ring\"]=data[\"stalk_surface_above_ring\"].replace(stalksurface)\ndata[\"stalk_surface_below_ring\"]=data[\"stalk_surface_below_ring\"].replace(stalksurface)\n\nstalkcolor ={\"n\":\"brown\",\"b\":\"buff\",\"c\":\"cinnamon\",\"g\":\"gray\",\"p\":\"pink\",\"e\":\"red\",\"w\":\"white\",\"y\":\"yellow\",\"o\":\"orange\"}\ndata[\"stalk_color_above_ring\"]=data[\"stalk_color_above_ring\"].replace(stalkcolor)\ndata[\"stalk_color_below_ring\"]=data[\"stalk_color_below_ring\"].replace(stalkcolor)\n\nveiltype={\"p\":\"partial\",\"u\":\"universal\"} \ndata[\"veil_type\"]=data[\"veil_type\"].replace(veiltype)\n\nveilcolor={\"n\":\"brown\",\"o\":\"orange\",\"w\":\"white\",\"y\":\"yellow\"} \ndata[\"veil_color\"]=data[\"veil_color\"].replace(veilcolor)\n\nringnumber= {\"n\":\"none\",\"o\":\"one\",\"t\":\"two\"}\ndata[\"ring_number\"]=data[\"ring_number\"].replace(ringnumber)\n\nringtype={\"c\":\"cobwebby\",\"e\":\"evanescent\",\"f\":\"flaring\",\"l\":\"large\",\"n\":\"none\",\"p\":\"pendant\",\"s\":\"sheathing\",\"z\":\"zone\"}\ndata[\"ring_type\"]=data[\"ring_type\"].replace(ringtype)\n\nsporeprintcolor= {\"k\":\"black\",\"n\":\"brown\",\"b\":\"buff\",\"h\":\"chocolate\",\"r\":\"green\",\"o\":\"orange\",\"u\":\"purple\",\"w\":\"white\",\"y\":\"yellow\"}\ndata[\"spore_print_color\"]=data[\"spore_print_color\"].replace(sporeprintcolor)\n\npopulation={\"a\":\"abundant\",\"c\":\"clustered\",\"n\":\"numerous\",\"s\":\"scattered\",\"v\":\"several\",\"y\":\"solitary\"}\ndata[\"population\"]=data[\"population\"].replace(population)\n\nhabitat={\"g\":\"grasses\",\"l\":\"leaves\",\"m\":\"meadows\",\"p\":\"paths\",\"u\":\"urban\",\"w\":\"waste\",\"d\":\"woods\"}\ndata[\"habitat\"]=data[\"habitat\"].replace(habitat)\n\nbruises={\"t\":\"bruises\",\"f\":\"no\"}\ndata[\"bruises\"]=data[\"bruises\"].replace(bruises)","18c1d62b":"data.head(3)","ba266fbc":"def plot_column(x, y):\n    plt.figure(figsize=(12, 6))                   \n    plt.legend(['Poisonous', 'Edible'], loc='upper right')\n    plt.ylabel('Number of the Mushrooms', fontsize=14)\n    plt.xlabel('Types of the Cap Shapes of the Mushrooms', fontsize=14)\n    plt.title(f'Edible or Poisonous Based on {y}', fontsize=20)\n    plotcolumn = sns.countplot(data=data, x=x ,hue='class_ep',order=x.value_counts().index, palette=['red', 'lightgreen'])                     \n    for p in plotcolumn.patches:\n        plotcolumn.annotate(format(p.get_height(), '.1f'),\n        (p.get_x() + p.get_width() \/ 2., p.get_height()),\n        ha='center', va='center')\n        \n    ","2e7bb843":"plot_column(data['cap_shape'], 'cap_shape')","58fce3c9":"cols = ['cap_surface', 'cap_color', 'bruises', 'odor',\n       'gill_attachment', 'gill_spacing', 'gill_size', 'gill_color',\n       'stalk_shape', 'stalk_root', 'stalk_surface_above_ring',\n       'stalk_surface_below_ring', 'stalk_color_above_ring',\n       'stalk_color_below_ring', 'veil_type', 'veil_color', 'ring_number','ring_type', 'spore_print_color', 'population', 'habitat']\nfor col in cols:\n    plot_column(data[col], col)","f816e2a8":"\nclassep_dim = go.parcats.Dimension(\n    values=data[\"class_ep\"].values,\n    label=\"Mushroom Types\",\n    categoryarray=[\"e\", \"p\"],\n    ticktext=['edible', 'poisonous']\n)\n\ncap_shape_dim = go.parcats.Dimension(\n    values=data[\"cap_shape\"].values,\n    label=\"Cap Shape\"\n)\n\ncap_surface_dim = go.parcats.Dimension(\n  values=data[\"cap_surface\"].values,\n  label=\"Cap Surface\"\n)\ncap_color_dim = go.parcats.Dimension(\n  values=data[\"cap_color\"].values,\n  label=\"Cap Color\"\n)\n\n# Create parcats trace\ncolor = [1 if i==\"e\" else 0 for i in data[\"class_ep\"]]\ncolorscale = [[0, 'lightcoral'], [1, 'mediumseagreen']];\ndata1 = [\n    go.Parcats(\n        dimensions=[classep_dim,cap_surface_dim,cap_shape_dim,cap_color_dim],\n        line={'color': color,\n              'colorscale': colorscale},\n        hoveron='dimension',\n        hoverinfo='count+probability',\n        labelfont={'size': 18, 'family': 'Times'},\n        tickfont={'size': 16, 'family': 'Times'},\n        arrangement='fixed',\n    )\n\n]\n\n\niplot(data1)","1b5132ba":"\ngill_attachment_dim = go.parcats.Dimension(\n    values=data[\"gill_attachment\"].values,\n    label=\"Gill Attachment\"\n)\n\ngill_spacing_dim = go.parcats.Dimension(\n  values=data[\"gill_spacing\"].values,\n  label=\"Gill Spacing\"\n)\ngill_size_dim = go.parcats.Dimension(\n  values=data[\"gill_size\"].values,\n  label=\"Gill Size\"\n)\ngill_color_dim = go.parcats.Dimension(\n  values=data[\"gill_color\"].values,\n  label=\"Gill Color\"\n)\n\n# Create parcats trace\ncolor = [1 if i==\"e\" else 0 for i in data[\"class_ep\"]]\ncolorscale = [[0, 'lightcoral'], [1, 'mediumseagreen']];\ndata2 = [\n    go.Parcats(\n        dimensions=[classep_dim,gill_attachment_dim,gill_spacing_dim,gill_size_dim,gill_color_dim],\n        line={'color': color,\n              'colorscale': colorscale},\n        hoveron='dimension',\n        hoverinfo='count+probability',\n        labelfont={'size': 18, 'family': 'Times'},\n        tickfont={'size': 16, 'family': 'Times'},\n        arrangement='fixed',\n    )\n\n]\n\n\niplot(data2)","eb1ee33f":"stalk_shape_dim = go.parcats.Dimension(\n    values=data[\"stalk_shape\"].values,\n    label=\"Stalk Shape\"\n)\n\nstalk_root_dim = go.parcats.Dimension(\n  values=data[\"stalk_root\"].values,\n  label=\"Stalk Root\"\n)\nstalk_surface_above_ring_dim = go.parcats.Dimension(\n  values=data[\"stalk_surface_above_ring\"].values,\n  label=\"Stalk Surface Above Ring\"\n)\nstalk_surface_below_ring_dim = go.parcats.Dimension(\n  values=data[\"stalk_surface_below_ring\"].values,\n  label=\"Below Ring\"\n)\nstalk_color_above_ring_dim = go.parcats.Dimension(\n  values=data[\"stalk_color_above_ring\"].values,\n  label=\"Stalk Color Above Ring\"\n)\nstalk_color_below_ring_dim = go.parcats.Dimension(\n  values=data[\"stalk_color_below_ring\"].values,\n  label=\"Below Ring\"\n)\n\n# Create parcats trace\ncolor = [1 if i==\"e\" else 0 for i in data[\"class_ep\"]]\ncolorscale = [[0, 'lightcoral'], [1, 'mediumseagreen']];\ndata3 = [\n    go.Parcats(\n        dimensions=[classep_dim,stalk_shape_dim,stalk_root_dim,stalk_surface_above_ring_dim,stalk_surface_below_ring_dim,stalk_color_above_ring_dim,stalk_color_below_ring_dim],\n        line={'color': color,\n              'colorscale': colorscale},\n        hoveron='dimension',\n        hoverinfo='count+probability',\n        labelfont={'size': 18, 'family': 'Times'},\n        tickfont={'size': 16, 'family': 'Times'},\n        arrangement='fixed',\n    )\n\n]\n\n\niplot(data3)","2cf2f3ad":"veil_type_dim = go.parcats.Dimension(\n    values=data[\"veil_type\"].values,\n    label=\"Veil Type\"\n)\n\nveil_color_dim = go.parcats.Dimension(\n  values=data[\"veil_color\"].values,\n  label=\"Veil Color\"\n)\n# Create parcats trace\ncolor = [1 if i==\"e\" else 0 for i in data[\"class_ep\"]]\ncolorscale = [[0, 'lightcoral'], [1, 'mediumseagreen']];\ndata4 = [\n    go.Parcats(\n        dimensions=[classep_dim,veil_type_dim, veil_color_dim],\n        line={'color': color,\n              'colorscale': colorscale},\n        hoveron='dimension',\n        hoverinfo='count+probability',\n        labelfont={'size': 18, 'family': 'Times'},\n        tickfont={'size': 16, 'family': 'Times'},\n        arrangement='fixed',\n    )\n\n]\n\n\niplot(data4)","dc416812":"ring_number_dim = go.parcats.Dimension(\n    values=data[\"ring_number\"].values,\n    label=\"Ring Number\"\n)\n\nring_type_dim = go.parcats.Dimension(\n  values=data[\"ring_type\"].values,\n  label=\"Ring Type\"\n)\n# Create parcats trace\ncolor = [1 if i==\"e\" else 0 for i in data[\"class_ep\"]]\ncolorscale = [[0, 'lightcoral'], [1, 'mediumseagreen']];\ndata5 = [\n    go.Parcats(\n        dimensions=[classep_dim,ring_number_dim, ring_type_dim],\n        line={'color': color,\n              'colorscale': colorscale},\n        hoveron='dimension',\n        hoverinfo='count+probability',\n        labelfont={'size': 18, 'family': 'Times'},\n        tickfont={'size': 16, 'family': 'Times'},\n        arrangement='fixed',\n    )\n\n]\n\n\niplot(data5)","0b785697":"data.columns","fdd61813":"data['spore_print_color'].value_counts().keys()","3ce981e5":"plt.pie(data['bruises'].value_counts(),labels=data['bruises'].value_counts().keys(), autopct='%1.1f%%', startangle=15, shadow = True)\nplt.title('bruises', fontsize= 15)\nplt.axis('equal')\nfig = plt.gcf()\nfig.set_size_inches(7,7)\nplt.show()","8ff2db17":"cols =['odor', 'spore_print_color', 'population', 'habitat']\nfor col in cols:\n    plt.pie(data[col].value_counts(),labels=data[col].value_counts().keys(), autopct='%1.1f%%', startangle=15, shadow = True)\n    plt.title(f'{col}', fontsize= 15)\n    plt.axis('equal')\n    fig = plt.gcf()\n    fig.set_size_inches(7,7)\n    plt.show()","8cb61093":"df = df.apply(label_encoder.fit_transform)\ndf.head()","e8cea882":"plt.figure(figsize = (20,20))\nsns.heatmap(df.corr(), annot = True, cmap = \"Blues\")\nplt.show()","35a44bf3":"from sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\n#class column is taken as a numpy array\ny = df[\"class\"].values\n#All the features are separated from our target value or label and stored in x\nx = df.drop([\"class\"],axis=1)\n#Finally split the data into train and test set\nx_train,x_test,y_train,y_test = train_test_split(x,y,random_state=42,test_size = 0.25)","c7ae397f":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(solver=\"newton-cg\")\nlr.fit(x_train,y_train)\nprint(\"Test Accuracy: {}%\".format(round(lr.score(x_test,y_test)*100,2)))","f2cdb465":"from sklearn.neighbors import KNeighborsClassifier\nbest_Kvalue = 0\nbest_score=0\nfor i in range(1,10):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train,y_train)\n    if knn.score(x_test,y_test) > best_score:\n        best_score = knn.score(x_train,y_train)\n        best_Kvalue = i\nprint(\"\"\"Best KNN Value: {}\nTest Accuracy: {}%\"\"\".format(best_Kvalue, round(best_score*100,2)))","ff82aa04":"from sklearn.svm import SVC\nsvm = SVC(random_state=42, gamma=\"auto\")\nsvm.fit(x_train,y_train)\nprint(\"Test Accuracy: {}%\".format(round(svm.score(x_test,y_test)*100,2)))","9dd5894d":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\nprint(\"Test Accuracy: {}%\".format(round(nb.score(x_test,y_test)*100,2)))","955c007d":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\nprint(\"Test Accuracy: {}%\".format(round(dt.score(x_test,y_test)*100,2)))","8f44c298":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=100, random_state=42)\nrf.fit(x_train,y_train)\nprint(\"Test Accuracy: {}%\".format(round(rf.score(x_test,y_test)*100,2)))","60174896":"<h3>The below diagram represents the relation between various stalk qualities contributing towards edibility of mushroom<\/h3>","3e182c74":"<h3><FONT COLOR=\"green\">KNN Classification<\/FONT COLOR><\/h3>","491b6e5e":"<h3>The below diagram represents the relation between various ring qualities contributing towards edibility of mushroom<\/h3>","d7571ed2":"<h1>Importing All Required Libraries<\/h1>","e3b3e282":"<h3><FONT COLOR=\"green\">Random Forest Classifier<\/FONT COLOR><\/h3>","014e6496":"<h3><center><FONT COLOR=\"RED\">Click on show output to view counts of posonous and edible mushrooms based on different properties of Mushrooms like the above diagram<\/FONT COLOR><\/center><\/h3>","a3a3488b":"<h3><center><FONT COLOR=\"Green\">below are pie charts of percentage unique values in the following columns- 'bruises', 'odor', 'spore_print_color', 'population', 'habitat'<\/FONT COLOR><\/center><\/h3>\n\n","52d0229d":"<h3><FONT COLOR=\"green\">Logistic Regression Classification<\/FONT COLOR><\/h3.","be32de68":"<h3><center><FONT COLOR=\"RED\">Click on Show Output to view pie charts for remanining mentioned columns<\/FONT COLOR><\/center><\/h3>","5585e911":"<h3> Split the data into train test <\/h3>","1af38d0c":"<h3><FONT COLOR=\"green\">SVM Classification<\/FONT COLOR><\/h3>","36d51bbe":"<h3><FONT COLOR=\"green\">Decision Tree Classifier<\/FONT COLOR><\/h3>","861a27e7":"<h3><FONT COLOR=\"green\">Naive Bayes Classification<\/FONT COLOR><\/h3>","7c0c75c9":"<h1>Attribute Information:<\/h1>\n\n1. class_ep: edible=e, poisonous=p\n2. cap_shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n3. cap_surface: fibrous=f,grooves=g,scaly=y,smooth=s\n4. cap_color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n5. bruises: bruises=t,no=f\n6. odor:almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n7. gill_attachment: attached=a,descending=d,free=f,notched=n\n1. gill_spacing: close=c,crowded=w,distant=d\n1. gill_size: broad=b,narrow=n\n1. gill_color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n1. stalk_shape: enlarging=e,tapering=t\n1. stalk_root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n1. stalk_surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n1. stalk_surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n1. stalk_color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n1. stalk_color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n1. veil_type: partial=p,universal=u\n1. veil_color: brown=n,orange=o,white=w,yellow=y\n1. ring_number: none=n,one=o,two=t\n1. ring_type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n1. spore_print_color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n1. population: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n1. habitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","08754286":"<h3>The below diagram represents the relation between various veil qualities contributing towards edibility of mushroom<\/h3>","f35f5b6a":"##The below step is not necessary but it might be helpful to understand the labels ahead","2d14a153":"<h3>The below diagram represents the relation between various gill qualities contributing towards edibility of mushroom<\/h3>","d5cdf925":"lets change the column names by adding a \" _ \" in place of a \"-\" and renaming the 'class column as 'class_ep' since class is a python keyword","8aca97f0":"<h3>The below diagram represents the relation between various cap qualities contributing towards edibility of mushroom<\/h3>"}}