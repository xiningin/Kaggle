{"cell_type":{"adc5cdb2":"code","4246d849":"code","a83fb63c":"code","f2ba8932":"code","c49dd3fb":"code","3e152ff1":"code","724f73a5":"code","66acea65":"code","8bf8ffc9":"code","39fec0f6":"code","56f9bfed":"code","f5fda512":"code","3f5a16a1":"code","0249af1f":"code","fd4ae085":"code","69d718f7":"code","7ce00816":"code","78fe5e79":"code","19f4ac9c":"code","5c7e885f":"code","0d5a50e3":"code","87460033":"code","c8823cee":"code","0c2aa643":"code","d2fc3b8f":"code","1170597e":"code","228a2f08":"code","012c7b88":"code","5326f88a":"code","38afbb87":"code","80dbed12":"code","b605bb16":"code","fabaa5b2":"code","54f24f1a":"code","348f3ebf":"code","ab72bd38":"code","59aa570e":"code","71bc4763":"code","09ff208b":"code","cf90c034":"code","e3105698":"code","4b76d51c":"code","c5301fb0":"code","6eb596a1":"code","13a10b38":"code","6bf296e6":"code","8d6affde":"code","31daf303":"code","4b3eb35f":"code","ed4f54c4":"code","3981bb5d":"code","e125354c":"code","e2487a32":"code","a7526238":"code","582bdd6a":"code","8f582853":"code","07e1c973":"code","de64df03":"code","02bf3281":"code","e74d506a":"code","7f277c6a":"code","0dec93d0":"code","8a9e6fa5":"code","2860400b":"code","f4bd5ae8":"code","89ec84b4":"markdown","d0bc40cf":"markdown","f9eac741":"markdown","e4f130b4":"markdown","dbbc43ac":"markdown","0296e3b6":"markdown","85d02bea":"markdown","e02cb108":"markdown","51a9cec6":"markdown","2ec0a34b":"markdown","9095371f":"markdown"},"source":{"adc5cdb2":"import json\nimport folium\nimport webbrowser\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport folium.plugins as plugins\nfrom folium.plugins import HeatMap","4246d849":"# load the json file of latitude and longtitude data\nwith open('\/kaggle\/input\/region.json') as f: \n    region = json.load(f)","a83fb63c":"longitude = []\nlatitude = []\nregion_name = []","f2ba8932":"# get province,longitude,and latitude to create a daraframe of province's geographic data\n# this part is for geographic visualization\nlongitude = []\nlatitude = []\nregion_name = []\n\nfor i in region['districts']:\n    if i['level'] == 'province': \n        region_name.append(i['name'])\n        longitude.append(i[\"center\"][\"longitude\"])\n        latitude.append(i[\"center\"][\"latitude\"])\n\nregion_lookup = pd.DataFrame({'province':region_name,\"longitude\":longitude,\"latitude\":latitude})\nregion_lookup.head()","c49dd3fb":"covidData = pd.read_csv(\"\/kaggle\/input\/ncovdata.csv\")","3e152ff1":"covidData.head()","724f73a5":"# take a look at some information about this dataset\ncovidData.info()","66acea65":"covidData.dtypes","8bf8ffc9":"# convert the datatype of updateTime to datetime64, and get date from that column as a new column\ndef datimeTrans(dataset):\n    dataset[\"updateTime\"] = dataset[\"updateTime\"].apply(pd.to_datetime)\n    dataset[\"date\"] = dataset[\"updateTime\"].dt.date.apply(pd.to_datetime)\n    return dataset","39fec0f6":"covidData = datimeTrans(covidData)","56f9bfed":"# here I just momentarily convert the datatype to string\ncovidData[\"date\"] = covidData[\"date\"].astype(str)","f5fda512":"date = []","3f5a16a1":"def deldup(dataset):    \n    for i in range(len(dataset)):\n        province = dataset.loc[i,\"provinceName\"]\n        city = dataset.loc[i,\"cityName\"]\n        if dataset.loc[i,\"date\"] not in date:\n            date.append(dataset.loc[i,\"date\"])\n            provinces = []\n            citys = []\n        if province not in provinces:\n            provinces.append(province)\n        if (province in provinces) & (city in citys):\n            dataset = dataset.drop(i)\n        if (province in provinces) & (city not in citys):\n            citys.append(city)\n    return dataset","0249af1f":"covidData = deldup(covidData)","fd4ae085":"covidData.describe()","69d718f7":"dayUnique = pd.DataFrame()\ndayUnique = covidData.groupby(['provinceName', 'date'])['city_confirmedCount'].aggregate('sum').unstack()\ndayUnique","7ce00816":"def nullhandling(dataset):\n    dataset.iloc[:,0].fillna(0,inplace = True)\n    for j in range(len(dataset)):\n        for i in range(len(dataset.columns)):\n            if i == 0:\n                continue\n            elif dataset.isnull().iloc[j,i] == False:\n                continue\n            else:\n                dataset.iloc[j,i] = dataset.iloc[j,i-1]\n    return dataset","78fe5e79":"dayUnique = nullhandling(dayUnique)\ndayUnique","19f4ac9c":"dayUnique.style.background_gradient(cmap='gnuplot')","5c7e885f":"dayUnique_drophb = dayUnique.drop(\"\u6e56\u5317\u7701\")\ndayUnique_drophb.style.background_gradient(cmap='twilight_shifted')","0d5a50e3":"dayUnique_drophb = dayUnique_drophb.T.reset_index()\ndayUnique = dayUnique.T.reset_index()","87460033":"listofcolumns = []\nfor i in dayUnique_drophb.columns:\n    if i != \"date\":\n        listofcolumns.append(i)\n\ndayUnique_drophb_melt = pd.melt(dayUnique_drophb, id_vars=['date'],\n                                value_vars= listofcolumns, \n                                var_name='Province', value_name='Count')","c8823cee":"listofcolumns = []\nfor i in dayUnique.columns:\n    if i != \"date\":\n        listofcolumns.append(i)\n\ndayUnique_melt = pd.melt(dayUnique, id_vars=['date'],\n                                value_vars= listofcolumns, \n                                var_name='Province', value_name='Count')","0c2aa643":"px.line(dayUnique_melt, x=\"date\", y=\"Count\",color ='Province',\n        title='Outbreak in China from Jan 25 - Feb 15')","d2fc3b8f":"px.line(dayUnique_drophb_melt, x=\"date\", y=\"Count\",color ='Province',\n        title='Outbreak in China (excluding Hubei Province) from Jan 25 - Feb 15')","1170597e":"fig = px.bar(dayUnique_melt, \n             y=\"date\", x=\"Count\", color='Province', orientation='h', height=700,\n             title='Number of Confirmed in China')\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='hide')\nfig.show()","228a2f08":"fig = px.bar(dayUnique_drophb_melt, \n             y=\"date\", x=\"Count\", color='Province', orientation='h', height=700,\n             title='Number of Confirmed in China (excluding Hubei Province)')\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='hide')\nfig.show()","012c7b88":"px.bar(dayUnique_melt,x=\"Count\", y=\"Province\", color='Province', \n       orientation='h', height=800,title='Outbreak in China',\n       animation_frame=\"date\",range_x = [0,65000])","5326f88a":"px.bar(dayUnique_drophb_melt,x=\"Count\", y=\"Province\", color='Province', \n       orientation='h', height=800,title='Outbreak in China (excluding Hubei Province)',\n       animation_frame=\"date\",range_x=[0,1400])","38afbb87":"px.treemap(dayUnique_drophb_melt.sort_values(by='Count', ascending=False).reset_index(drop=True), \n           path=[\"Province\"], values=\"Count\")","80dbed12":"dayUnique = pd.DataFrame()\ndayUnique = covidData.groupby(['provinceName', 'date'])['city_confirmedCount'].aggregate('sum').unstack()\ndayUnique","b605bb16":"dayUnique_wuhan = covidData[covidData[\"provinceName\"] == \"\u6e56\u5317\u7701\"]\ndayUnique_wuhan = dayUnique_wuhan.groupby(['cityName', 'date'])['city_confirmedCount'].aggregate('sum').unstack()","fabaa5b2":"# I have defined this function at the begining\ndayUnique_wuhan = nullhandling(dayUnique_wuhan)\ndayUnique_wuhan.style.background_gradient(cmap='rainbow')","54f24f1a":"dayUnique_wuhan = dayUnique_wuhan.T.reset_index()\nlistofcolumns = []\n# get all of the column names, store in a list\nfor i in dayUnique_wuhan.columns:\n    if i != \"date\":\n        listofcolumns.append(i)\n\ndayUnique_wuhan_melt = pd.melt(dayUnique_wuhan, id_vars=['date'],\n                                value_vars= listofcolumns, \n                                var_name='Province', value_name='Count')","348f3ebf":"fig = px.bar(dayUnique_wuhan_melt, \n             y=\"date\", x=\"Count\", color='Province', orientation='h', height=700,\n             title='Number of Confirmed in Hubei Province')\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='hide')\nfig.show()","ab72bd38":"px.bar(dayUnique_wuhan_melt,x=\"Count\", y=\"Province\", color='Province', \n       orientation='h', height=800,title='Outbreak in Hubei Province',\n       animation_frame=\"date\",range_x = [0,38000])","59aa570e":"px.treemap(dayUnique_wuhan_melt.sort_values(by='Count', ascending=False).reset_index(drop=True), \n           path=[\"Province\"], values=\"Count\")","71bc4763":"dayUnique_melt_region = pd.merge(region_lookup,dayUnique_melt,\n                                left_on=\"province\",right_on=\"Province\",how='outer')","09ff208b":"# here, some province name doesn't match\ndayUnique_melt_region.isnull().sum()","cf90c034":"# let's find it\ndayUnique_melt_region.head()","e3105698":"# let's find it\nfor i in list(set(dayUnique_melt[\"Province\"])):\n    if i in region_lookup[\"province\"].values:\n        pass\n    else:\n        print(i)","4b76d51c":"region_lookup['province'][0] = '\u6fb3\u95e8'","c5301fb0":"del dayUnique_melt_region\ndayUnique_melt_region = pd.merge(region_lookup,dayUnique_melt,\n                                left_on=\"province\",right_on=\"Province\",how='outer')\ndel dayUnique_melt_region[\"province\"]","6eb596a1":"dayUnique_melt_region.isnull().sum()","13a10b38":"dayUnique_melt_region = dayUnique_melt_region.dropna()\ndayUnique_melt_region.dtypes","6bf296e6":"# select only 2020-02-14\n# currently data of 02-15 is incomplete\ndayUnique_melt_region[\"date\"] = dayUnique_melt_region[\"date\"].apply(pd.to_datetime)\ndayUnique_melt_region_lastday = dayUnique_melt_region.query(\"date == '2020-02-14'\")\ndayUnique_melt_region_lastday.head()","8d6affde":"covmap = folium.Map(location=[36, 105], zoom_start=4)\n\nfor lat, lon, value, name in zip(dayUnique_melt_region_lastday[\"latitude\"], \n                                 dayUnique_melt_region_lastday['longitude'], \n                                 dayUnique_melt_region_lastday['Count'], \n                                 dayUnique_melt_region_lastday['Province']):\n    folium.CircleMarker([lat, lon],\n                        radius=20,\n                        popup = ('Province: ' + str(name) + '<br>'\n                        'Confrimed: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(covmap)\n\n\ncovmap","31daf303":"# convert data into lists that can be used by folium\nnum = dayUnique_melt_region_lastday.shape[0]\nlat = np.array(dayUnique_melt_region_lastday[\"latitude\"][0:num])\nlon = np.array(dayUnique_melt_region_lastday['longitude'][0:num])\nconfrimed = np.array(dayUnique_melt_region_lastday['Count'][0:num])\nmapdata = [[lat[i], lon[i], confrimed[i]] for i in range(num)]","4b3eb35f":"heatmap = folium.Map(location=[38, 100], zoom_start=4)\nHeatMap(mapdata).add_to(heatmap)","ed4f54c4":"# visualize the spread of COVID-19 \nheatmap","3981bb5d":"dayunique_dq = covidData.query(\"date == '2020-02-14'\").groupby(['provinceName', 'date'])[\"city_curedCount\",\"city_deadCount\",\"city_confirmedCount\"].aggregate('sum').unstack()","e125354c":"# create two new columns of cure rate and death rate\ndayunique_dq[\"cure rate\"] = dayunique_dq[\"city_curedCount\"]\/dayunique_dq[\"city_confirmedCount\"]\ndayunique_dq[\"death rate\"] = dayunique_dq[\"city_deadCount\"]\/dayunique_dq[\"city_confirmedCount\"]","e2487a32":"dayunique_dq.drop([\"city_curedCount\",\"city_deadCount\",\"city_confirmedCount\"],axis=1,inplace=True)\ndayunique_dq.reset_index(inplace=True)\ndayunique_dq.head()","a7526238":"px.bar(dayunique_dq,x=\"provinceName\",y=\"cure rate\",\n       color=\"provinceName\",title='Cure rate of each province')","582bdd6a":"px.bar(dayunique_dq,x=\"provinceName\",y=\"death rate\",\n       color=\"provinceName\",title='Death rate of each province')","8f582853":"dayUnique_gr = dayUnique.T\ndayUnique_gr.drop([\"2020-01-24\",\"2020-01-25\",\"2020-01-26\"],inplace=True)\ndayUnique_gr.drop([\"\u6fb3\u95e8\",\"\u897f\u85cf\u81ea\u6cbb\u533a\"],axis=1,inplace=True)","07e1c973":"pd.set_option('display.max_columns', None)\ndayUnique_gr.head(10)","de64df03":"dayUnique_gr_2 = dayUnique_gr.copy()","02bf3281":"for i in range(len(dayUnique_gr)):\n    for j in range(len(dayUnique_gr.columns)):\n        if i == 0:\n            pass\n        else:\n            now = dayUnique_gr.iloc[i,j]\n            past = dayUnique_gr.iloc[i-1,j]\n            dayUnique_gr_2.iloc[i,j] = (now-past)\/past","e74d506a":"dayUnique_gr_2.drop(\"2020-01-27\",inplace=True)\ndayUnique_gr_2.head()","7f277c6a":"dayUnique_gr_2 = dayUnique_gr_2.reset_index()","0dec93d0":"listofcolumns = []\nfor i in dayUnique_gr_2.columns:\n    if i != \"date\":\n        listofcolumns.append(i)\n\ndayUnique_gr_2_melt = pd.melt(dayUnique_gr_2, id_vars=['date'],\n                                value_vars= listofcolumns, \n                                var_name='ProvinceName')","8a9e6fa5":"dayUnique_gr_2_melt.head()","2860400b":"px.line(dayUnique_gr_2_melt, x=\"date\", y=\"value\",color ='ProvinceName',\n        title='Growth rate of coronavirus in each province')","f4bd5ae8":"px.bar(dayUnique_gr_2_melt,x=\"value\", y=\"ProvinceName\", color='ProvinceName', \n       orientation='h', height=800,title='Growth rate of coronavirus in each province',\n       animation_frame=\"date\",range_x = [0,2])","89ec84b4":"## Death Rate and Cure Rate","d0bc40cf":"Because the data range Hubei province is much larger than others, I just provisionally remove Hubei's data to visualize spread of Coronavirus. Later I will focus on the spread of Coronavirus within Hubei province separately.","f9eac741":"# Visualization\n## Spread of Coronavirus in China ","e4f130b4":"## Geographic Visualization","dbbc43ac":"## Coronavirus Data Preprocessing","0296e3b6":"# Data Preprocessing","85d02bea":"There are many missing value in this dataframe. To deal with this case, NaN in the first column must be 0. For the other columns, I am going to fill these NaN regarding the previous column.","e02cb108":"I find out that there are many duplicated data in a single day. In order to group our data by different province every single day, I am going to delete everyday's repetitive records.","51a9cec6":"## Geographic Data Preprocessing","2ec0a34b":"## Growth Rate","9095371f":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Data-Preprocessing\" data-toc-modified-id=\"Data-Preprocessing-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Data Preprocessing<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Geographic-Data-Preprocessing\" data-toc-modified-id=\"Geographic-Data-Preprocessing-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>Geographic Data Preprocessing<\/a><\/span><\/li><li><span><a href=\"#Coronavirus-Data-Preprocessing\" data-toc-modified-id=\"Coronavirus-Data-Preprocessing-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>Coronavirus Data Preprocessing<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Visualization\" data-toc-modified-id=\"Visualization-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Visualization<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Spread-of-Coronavirus-in-China\" data-toc-modified-id=\"Spread-of-Coronavirus-in-China-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>Spread of Coronavirus in China<\/a><\/span><\/li><li><span><a href=\"#Geographic-Visualization\" data-toc-modified-id=\"Geographic-Visualization-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;<\/span>Geographic Visualization<\/a><\/span><\/li><li><span><a href=\"#Death-Rate-and-Cure-Rate\" data-toc-modified-id=\"Death-Rate-and-Cure-Rate-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;<\/span>Death Rate and Cure Rate<\/a><\/span><\/li><li><span><a href=\"#Growth-Rate\" data-toc-modified-id=\"Growth-Rate-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;<\/span>Growth Rate<\/a><\/span><\/li><\/ul><\/li><\/ul><\/div>"}}