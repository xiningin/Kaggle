{"cell_type":{"b2dd27a4":"code","7d96be15":"code","09b3f337":"code","ba5cbda9":"code","9cbbac38":"code","671d1072":"code","be274242":"code","1e670a07":"code","213d10a9":"markdown","e173aa0e":"markdown","68a23fe1":"markdown","b5cf27b4":"markdown","ad5c9500":"markdown","b4fcf298":"markdown","dad2ab24":"markdown","94c19bbb":"markdown","fae5e721":"markdown"},"source":{"b2dd27a4":"import numpy as np\nimport pandas as pd\n! pip install tabula-py\nimport tabula as tb\nfrom scipy import stats\nimport datetime as dt","7d96be15":"datapath = '..\/input\/daily-power-generation-in-india-20172020'","09b3f337":"base = dt.datetime(2017,9,1) ## 1st September, 2017\nend = dt.datetime(2020,3,18) ## 18th March, 2020 \n\nnumdays = (end-base).days\ndate_list = [str((base + dt.timedelta(days=x)).date()) for x in range(numdays+1)] ## list of dates sorted from start to the end date\n\ndef rev(currdate):\n    currdate = currdate.split('-'); currdate = str(currdate[-1]+'-'+currdate[1]+'-'+currdate[0])\n    return currdate\n\n# date_list","ba5cbda9":"numdays","9cbbac38":"finaldf = pd.DataFrame()\nfinaldf.insert(0, 'Date', 'NaN')\nfinaldf.insert(1, 'Hydro Generation Estimated (in MU)', 'NaN')\nfinaldf.insert(1, 'Hydro Generation Actual (in MU)', 'NaN')\nfinaldf.insert(1, 'Nuclear Generation Estimated (in MU)', 'NaN')\nfinaldf.insert(1, 'Nuclear Generation Actual (in MU)', 'NaN')\nfinaldf.insert(1, 'Thermal Generation Estimated (in MU)', 'NaN')\nfinaldf.insert(1, 'Thermal Generation Actual (in MU)', 'NaN')\nfinaldf.insert(1, 'Region', 'NaN')\n\ns, f = 0, 129\nnotavailable = []\n\nfinaldf","671d1072":"for t in range(numdays):\n    ## GETTING THE DATE FOR WHICH WE NEED TO GET THE REPORT FOR\n    currdate = date_list[t]\n    ## CREATING THE LINK\n    link1 = 'https:\/\/npp.gov.in\/public-reports\/cea\/daily\/dgr\/{}\/dgr1-{}.pdf'.format(rev(currdate), currdate)\n    ## TRY OPENING AND READING THE DATA. IF \"HTMLERROR\" i.e. FILE DOES NOT EXIST(NATIONAL HOLIDAY), STORE THE DATE IN A LIST\n    try:\n        df = tb.read_pdf(link1, stream=False)[0]\n    except:\n        notavailable.append(currdate)\n        continue\n        \n    def getdata(region, val):\n        \"\"\"    UTILITY FUNCTION TO EXTRACT CERTAIN ROWS FOR DATA. RETURNS A LIST FOR THE  \"\"\"\n        temp = list()\n        temp.append(currdate)\n        df.iloc[:,0] = df.iloc[:,0].apply(lambda x: x.replace(\" \", \"\")if type(x)!=float else x)\n        ind = df[df.iloc[:,0]==region].index[0]\n        temp.append(df.iloc[ind, 0]) \n        temp.extend(df.iloc[ind+1:ind+1+val,4:6].transpose().reset_index(drop=True).melt()['value'].to_list())\n        return temp\n    \n    ## GETTING ROW-WISE DATA FOR REGIONS\n    north = getdata('Northern', 3)\n    west = getdata('Western', 3)\n    south = getdata('Southern', 3)\n    east = getdata('Eastern', 2); east.insert(4, 'NaN'); east.insert(4, 'NaN')\n    neast = getdata('NorthEastern', 2); neast.insert(4, 'NaN'); neast.insert(4, 'NaN')\n    \n    ## INSERTING THE RESULTS IN THE TEMPLATE OF FINAL DATAFRAME CREATED\n    finaldf = finaldf.append(pd.Series(north, index=finaldf.columns), ignore_index=True)\n    finaldf = finaldf.append(pd.Series(west, index=finaldf.columns), ignore_index=True)\n    finaldf = finaldf.append(pd.Series(south, index=finaldf.columns), ignore_index=True)\n    finaldf = finaldf.append(pd.Series(east, index=finaldf.columns), ignore_index=True)\n    finaldf = finaldf.append(pd.Series(neast, index=finaldf.columns), ignore_index=True)\n    \nfinaldf.to_csv(datapath+'\/file.csv', index=False)","be274242":"notavailable ","1e670a07":"import IPython.display as ipd\n\nipd.FileLink(datapath+'\/file.csv')","213d10a9":">## PRINTING THE TOTAL NUMBER OF FILES","e173aa0e":"\n>## CREATING THE FRAME FOR FINAL DATAFRAME\n","68a23fe1":">### DATES FOR WHICH REPORT IS NOT AVAILABLE\n","b5cf27b4":"## Below is my code for extraction of dataset '[Power Generation in India](https:\/\/www.kaggle.com\/navinmundhra\/daily-power-generation-in-india-20172020)'. Check out the dataset and [my kernels](https:\/\/www.kaggle.com\/navinmundhra\/notebooks) on it.","ad5c9500":">## GETTING THE PDF REPORT AND SCRAPING THE DATA FROM IT","b4fcf298":"# HAPPY CODING! I HOPE YOU LIKED THIS SHORT TUTORIAL! \n\n## UPVOTE | SHARE | COMMENT | CONNECT | CHEERS\n### CHECK OUT [MY NOTEBOOKS](https:\/\/www.kaggle.com\/navinmundhra\/notebooks) IN WHICH I COVER TOPICS EXTENSIVELY. THANK YOU :)","dad2ab24":">## GENERATING LIST OF DATES FROM 2017-09-01 (yyyy-mm-dd) TO LATEST AVAILABLE DATE OF DATA\n","94c19bbb":">### DOWNLOADING THE DATASET","fae5e721":"## References:\n* [Python documentation](https:\/\/docs.python.org\/3\/library\/datetime.html) for datetime handling\n* [Tabula documentation](https:\/\/tabula-py.readthedocs.io\/en\/latest\/)"}}