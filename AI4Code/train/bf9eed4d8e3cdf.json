{"cell_type":{"a38e4570":"code","05330ac5":"code","f6836bc6":"code","ccf03d7d":"code","93dcc9c0":"code","be416dd4":"code","b11f4c0e":"code","1c3e71a6":"code","28e98e56":"code","bd078f6f":"code","d2f3c9ad":"code","fe7539e7":"code","74250617":"code","977ed1e0":"code","25be767a":"code","6b024b30":"code","a6aeb891":"code","d77b0a6e":"code","cf38e85e":"code","c2e0df5f":"code","76bfa0c7":"code","138cfa3e":"code","ee1e3581":"code","60519c60":"code","a31748e3":"code","d6336c4b":"code","8a78cbc3":"code","8e1e6db2":"code","bce42f46":"code","b637456c":"code","f1e19b40":"code","26e87d9e":"code","f75b751c":"code","8036b91d":"code","eceb0152":"code","0548f45c":"code","c98dfded":"code","4bbc7486":"code","0289178f":"code","b4588231":"code","48df44d7":"markdown","a3dcbede":"markdown","8d112101":"markdown","3c0b25b5":"markdown","3d356e79":"markdown","8c0b0bf4":"markdown","46a9f964":"markdown","02dc3d9e":"markdown","5a0542ac":"markdown","41b1022b":"markdown","f1efd29d":"markdown","0d097bdd":"markdown","890ca246":"markdown","6f2ab63c":"markdown"},"source":{"a38e4570":"import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n%matplotlib inline","05330ac5":"salary_df = pd.read_csv(\"..\/input\/nba_2017_salary.csv\");salary_df.head()\n","f6836bc6":"pie_df = pd.read_csv(\"..\/input\/nba_2017_pie.csv\");pie_df.head()","ccf03d7d":"plus_minus_df = pd.read_csv(\"..\/input\/nba_2017_real_plus_minus.csv\")\nplus_minus_df[\"NAME\"] = plus_minus_df[\"NAME\"].apply(lambda x: x.split(\",\")[0])\nplus_minus_df.rename(columns = {\"NAME\" : \"PLAYER\"}, inplace = True)\nplus_minus_df.head()","93dcc9c0":"br_df = pd.read_csv(\"..\/input\/nba_2017_br.csv\");br_df.head()","be416dd4":"players_df = br_df.copy()\nplayers_df.rename(columns={'Player': 'PLAYER','Pos':'POSITION', 'Tm': \"TEAM\", 'Age': 'AGE', \"PS\/G\": \"POINTS\"}, inplace=True)\nplayers_df.drop([\"G\", \"GS\", \"TEAM\"], inplace=True, axis=1)\nplayers_df = players_df.merge(plus_minus_df, how=\"inner\", on=\"PLAYER\")","b11f4c0e":"players_df = players_df.merge(pie_df[[\"PLAYER\", \"PIE\", \"PACE\", \"W\"]], how=\"inner\", on=\"PLAYER\")\n","1c3e71a6":"salary_df.rename(columns={'NAME': 'PLAYER'}, inplace=True)\nsalary_df[\"SALARY_MILLIONS\"] = round(salary_df[\"SALARY\"]\/1000000, 2)\nsalary_df.drop([\"POSITION\",\"TEAM\", \"SALARY\"], inplace=True, axis=1)\nsalary_df.head()\nplayers_df = players_df.merge(salary_df) ","28e98e56":"players_df.head(5)\nplayers_df.columns","bd078f6f":"#check NULL values\nplayers_df.apply(axis=0, func=lambda x : any(pd.isnull(x)))","d2f3c9ad":"#fill NULL with mean\nplayers_df[\"3P%\"] = players_df[\"3P%\"].fillna(players_df[\"3P%\"].mean())\nplayers_df[\"FT%\"] = players_df[\"FT%\"].fillna(players_df[\"FT%\"].mean())","fe7539e7":"sns.set(style=\"white\")\n\nplayers_corr = players_df.corr()\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(30, 30))\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(players_corr, cmap=cmap,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5},annot=True, fmt=\".2f\")","74250617":"##Euclidean Distance between two players based on their abilities","977ed1e0":"#Import Euclidean Distance Packages\nfrom sklearn.preprocessing import normalize\n\nfrom scipy.spatial.distance import pdist, squareform","25be767a":"#normalize vector for each player \nnorm_df = pd.DataFrame(normalize(players_df[['Rk', 'AGE', 'MP', 'FG', 'FGA', 'FG%', '3P',\n       '3PA', '3P%', '2P', '2PA', '2P%', 'eFG%', 'FT', 'FTA', 'FT%', 'ORB',\n       'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'POINTS', 'GP',\n       'MPG', 'ORPM', 'DRPM', 'RPM', 'WINS', 'PIE', 'PACE', 'W',\n       'SALARY_MILLIONS']] , axis=1, copy=True, return_norm=False))","6b024b30":"#Calculate Euclidean Distance between each player\n\ndist = pdist(norm_df, 'euclidean')\ndis_df = pd.DataFrame(squareform(dist))","a6aeb891":"dis_df.set_index(players_df[\"PLAYER\"],inplace = True)","d77b0a6e":"dis_df.columns = list(dis_df.index)","cf38e85e":"dis_df","c2e0df5f":"sns.clustermap(dis_df,cmap=cmap)","76bfa0c7":"plt.figure(figsize=(8,8))\nplt.imshow(dis_df, cmap='YlGnBu_r')\ncbar = plt.colorbar()\ncbar.set_label('Eculidean Distance')","138cfa3e":"closest = np.where(dis_df.eq(dis_df[dis_df != 0].min(),0),dis_df.columns,False)\n# Remove false from the array and get the column names as list\nclose_player_df = pd.DataFrame()\nclose_player_df[\"PLAYER\"] = players_df[\"PLAYER\"]\nclose_player_df['CLOSE_PLAYER_ABILITY'] = [i[i.astype(bool)].tolist() for i in closest]","ee1e3581":"close_player_df.head(10)","60519c60":"import scipy.cluster.hierarchy as hac","a31748e3":"cluster_hac = hac.linkage(norm_df,method=\"ward\")","d6336c4b":"plt.figure(figsize=(50, 200))\ndendogram = hac.dendrogram(cluster_hac, leaf_font_size=50,orientation='right',show_leaf_counts = True,show_contracted=True,labels=dis_df.index)\nplt.title('Hierarchical Clustering Dendrogram', fontsize=50)\nplt.xlabel('Distance', fontsize=50)\nplt.ylabel('Player', fontsize=50)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.show()","8a78cbc3":"from sklearn.cluster import KMeans\nfrom sklearn.datasets.samples_generator import make_blobs\nfrom sklearn.cluster import KMeans\nfrom sklearn import metrics\nfrom scipy.spatial.distance import cdist\n\n\nfrom sklearn.cluster import KMeans, AgglomerativeClustering, AffinityPropagation #For clustering\n\nfrom sklearn.mixture import GaussianMixture #For GMM clustering","8e1e6db2":"#Determine the number of Clusters","bce42f46":"distortions = []\nK = range(1,10)\nfor k in K:\n    kmeanModel = KMeans(n_clusters=k).fit(norm_df)\n    kmeanModel.fit(norm_df)\n    distortions.append(sum(np.min(cdist(norm_df, kmeanModel.cluster_centers_, 'euclidean'), axis=1)) \/ dis_df.shape[0])\n\n# Plot the elbow\nplt.plot(K, distortions, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Distortion')\nplt.title('The Elbow Method showing the optimal k')\nplt.show()","b637456c":"#k = 3","f1e19b40":"kmeans = KMeans(n_clusters=3, random_state=0).fit(norm_df)\nkmeans_df = pd.DataFrame(kmeans.labels_)\nplayers_df.insert((players_df.shape[1]),'kmeans',kmeans_df)","26e87d9e":"players_df","f75b751c":"plt.figure(figsize=(20, 20))\nscatter = plt.scatter(players_df['W'],players_df[\"SALARY_MILLIONS\"],\n                     c=kmeans_df[0],s=50)\nplt.title('K-Means Clustering')\nplt.xlabel('Win')\nplt.ylabel('Salary')\nplt.colorbar(scatter,ticks=np.linspace(0,3,4))","8036b91d":"Agg = AgglomerativeClustering(n_clusters=3, affinity = 'euclidean', linkage = 'ward').fit_predict(norm_df)","eceb0152":"Agg_df = pd.DataFrame(Agg)\nplayers_df.insert((players_df.shape[1]),'AgglomerativeClustering',Agg_df)","0548f45c":"plt.figure(figsize=(20, 20))\nscatter = plt.scatter(players_df['W'],players_df[\"SALARY_MILLIONS\"],\n                     c=Agg_df[0],s=50)\nplt.title('Agglomerative Clustering')\nplt.xlabel('Win')\nplt.ylabel('Salary')\nplt.colorbar(scatter,ticks=np.linspace(0,3,4))\n","c98dfded":"gau_model = GaussianMixture(n_components=3,init_params='kmeans')\ngau_model.fit(norm_df)","4bbc7486":"gau_label = gau_model.predict(norm_df)","0289178f":"gau_df = pd.DataFrame(gau_label)\nplayers_df.insert((players_df.shape[1]),'gmm',gau_df)","b4588231":"plt.figure(figsize=(20, 20))\nscatter = plt.scatter(players_df['W'],players_df[\"SALARY_MILLIONS\"],\n                     c=gau_df[0],s=50)\nplt.title('Gaussian Mixture Clustering')\nplt.xlabel('Win')\nplt.ylabel('Salary')\nplt.colorbar(scatter,ticks=np.linspace(0,3,4))\n","48df44d7":"# Euclidean Distance between players","a3dcbede":"# Clean Data","8d112101":"# Read Data","3c0b25b5":"## player_df indicates players ability and salaries","3d356e79":"# Data Visualization","8c0b0bf4":"## Import ML Packages","46a9f964":"## Hierarchical Dendrogram","02dc3d9e":"## Agglomerative Clustering Method","5a0542ac":"# Clustering Models","41b1022b":"## KNN Clustering Method","f1efd29d":"## Euclidean Distance based on Player Abilities","0d097bdd":"## Gaussian Mixture Model","890ca246":"## Pair the players with most similar abilities","6f2ab63c":"## Players' Abilities"}}