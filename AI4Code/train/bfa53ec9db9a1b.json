{"cell_type":{"96758f4b":"code","b3bff4de":"code","5b9069e3":"code","ed8cd39f":"code","8bc2b906":"code","99705e43":"code","60b538cc":"code","20c65b4e":"code","704cb695":"code","866eb49a":"code","0bed5384":"code","c52997f5":"code","84a1b85c":"code","1bb5f2a7":"markdown","8ed91da1":"markdown","dc7723f9":"markdown","e3dcaa7a":"markdown","d2693847":"markdown","d3af46b3":"markdown","74579f68":"markdown"},"source":{"96758f4b":"import seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, mean_squared_error, r2_score,accuracy_score","b3bff4de":"iris = load_iris()\nprint(iris.DESCR)","5b9069e3":"df = pd.DataFrame(iris.data, columns=iris.feature_names)\ndf.head()","ed8cd39f":"target_df = pd.DataFrame(data= iris.target, columns= ['species'])\ndef converter(sp):\n    if sp == 0:\n        return 1\n    elif sp == 1:\n        return 0\n    else:\n        return 0\n\ntarget_df['species'] = target_df['species'].apply(converter)\ntarget_df.tail()","8bc2b906":"df = pd.concat([df, target_df], axis = 1)\ndf['species'].value_counts()","99705e43":"f, ax = plt.subplots(figsize=(6,5))\nsns.countplot('species', data=df, ax=ax)\nplt.xlabel('Distribution of Dataset')\nax.set_title('Number setosa in the dataset')\nplt.show()","60b538cc":"tar = df['species']\ndf.drop(['species'], axis = 1)","20c65b4e":"X_train, X_test,Y_train,Y_test = train_test_split(df['sepal width (cm)'],tar,test_size = 0.33, random_state = 42)","704cb695":"irisw = LogisticRegression()\nX_test = X_test.values.reshape(-1,1)\nX_train = X_train.values.reshape(-1,1)\nirisw.fit(X_train, Y_train)","866eb49a":"Y_pred = irisw.predict(X_test)\nY_test1 = Y_test.reset_index(drop=True)\npd.concat([Y_test1, pd.DataFrame(Y_pred.flatten(), columns = ['Predicted'])], axis = 1).head()","0bed5384":"print(str(irisw.score(X_test, Y_test)*100) +'%')","c52997f5":"from sklearn.metrics import confusion_matrix\n\nlabels1 = ['Actual Setosa','Actual Not Setosa']\nlabels2 = ['Predicted Setosa','Predicted Not Setosa']\n\ncm = confusion_matrix(Y_test, Y_pred)\n\n\nfig= plt.figure(figsize=(7, 6))\nax = fig.add_subplot(111) \n\nfig.text(0.45, 0.04, 'Predicted labels', ha='center', va='center')\nfig.text(0.06, 0.5, 'True labels', ha='center', va='center', rotation='vertical')\n\nax.xaxis.set_ticks_position('top')\n\nsns.heatmap(cm, annot = True, annot_kws = {'size': 12}, fmt='g', cmap=\"Blues\")\n\nax.xaxis.set_ticklabels(labels2)\nax.yaxis.set_ticklabels(labels1)\n\nplt.show()","84a1b85c":"sep_w = 30.0 #sepal width\n\na = np.array([sep_w]).reshape(-1,1)\n\ni = irisw.predict(a)\nif i == 1:\n  print(\"The value given is for an Iris-setosa!\")\nelse:\n  print(\"The value given is not for an Iris-setosa\")","1bb5f2a7":"### Data Visualization","8ed91da1":"### Verification of trained model using test data","dc7723f9":"### Testing with input parameters","e3dcaa7a":"### Confusion Matrix","d2693847":"### Calling Model and Training using train","d3af46b3":"### Importing the necessary libraries","74579f68":"### Spliting into train and test data"}}