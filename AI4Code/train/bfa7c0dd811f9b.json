{"cell_type":{"8fbe1a48":"code","71dff51e":"code","ce5bb7c5":"code","aa23f098":"code","5accac5a":"code","fd3c6c81":"code","22efe464":"code","eafc5647":"code","56949733":"code","74017d4f":"code","13d6446b":"code","5998afbb":"markdown","be2e515b":"markdown"},"source":{"8fbe1a48":"import random\nimport logging\nimport pandas as pd\nimport seaborn as sns\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)","71dff51e":"# Number of casino sessions we do\nCASINO_SESSIONS_MAX = 1000\n# In a casino sesssion, we stop after MAX_BET_COUNT placed\nMAX_BET_COUNT = 100\n# How much we bet when we do\nBET_AMOUNT = 100","ce5bb7c5":"# There are 2 methods to make a draw:\n# - fair: 1\/2 chance to get `red`, 1\/2 to get black\n# - roulette: simulate a roulette where there are 37 cases: 1 green, 18 red, 18 black\ndef make_a_draw(fairness = 'fair'):\n    if fairness == 'fair':    \n        return make_a_fair_draw()\n    if  fairness == 'roulette':\n        return make_a_roulette_color_draw()\n\ndef make_a_fair_draw():\n    return random.choice(['black', 'red'])\n\ndef make_a_roulette_color_draw():\n    number = random.choice(range(37))\n    if number == 0:\n        return 'green'\n    if number % 2:\n        return 'black'\n    return 'red'","aa23f098":"def go_to_casino(fairness):\n    # the number of bets placed\n    bet_count = 0\n    # Store my current bet value: `black`, `red` or `None`. `None` means no bet.\n    my_bet = None\n    # The money we have. Note we start at 0 and can go in negative.\n    my_account = 0\n\n    # a table storing my_account value bet after bet\n    bets = pd.DataFrame(columns=['bet_number', 'my_account'])\n    \n    # store the last 3 draws (initialized to `None`)\n    last_3_draws = [None, None, None]\n\n    while True:\n        # -- Betting --\n        # Strategy: when last 3 draws are red, we bet on black \u2014 and the opposite\n        if (\n            last_3_draws[0] == 'red' and\n            last_3_draws[1] == 'red' and\n            last_3_draws[2] == 'red'\n        ):\n            my_bet = 'black'\n            my_account = my_account - BET_AMOUNT\n            bet_count += 1;\n        elif (\n            last_3_draws[0] == 'black' and\n            last_3_draws[1] == 'black' and\n            last_3_draws[2] == 'black'\n        ):\n            my_bet = 'red'\n            my_account = my_account - BET_AMOUNT\n            bet_count += 1;\n        else:\n            # no bet\n            my_bet = None\n\n        # -- Draw --\n        draw = make_a_draw(fairness)\n        # update last_3_drawns with last draw\n        last_3_draws = last_3_draws[1:3] + [draw]\n\n        # -- Money time --\n        if (my_bet):\n            if (my_bet == draw):\n                my_account = my_account + 2*BET_AMOUNT\n                # print('Bet #%s I won this bet and i have $%s'%(bet_count, my_account))\n            #else:\n                # print('Bet #%s I lost this bet and i have $%s'%(bet_count, my_account))\n\n        bets = bets.append([{'bet_number': bet_count, 'my_account': my_account}], ignore_index=True)\n\n        if bet_count >= MAX_BET_COUNT:\n            # enough: let's leave the casino, we're rich now, right?\n            break\n\n    return my_account, bets","5accac5a":"# example with 1 session in casino\namount, bets = go_to_casino(fairness='fair')\nbets.plot(x='bet_number')","fd3c6c81":"casino_sessions = pd.DataFrame(columns=['session_number', 'amount'])\nfor x in range(CASINO_SESSIONS_MAX):\n    amount, bets = go_to_casino(fairness='fair')\n    casino_sessions = casino_sessions.append({'session_number': x, 'amount': amount}, ignore_index=True)","22efe464":"sns.distplot(casino_sessions['amount'], bins = 11)","eafc5647":"casino_sessions['amount'].mean()","56949733":"casino_sessions = pd.DataFrame(columns=['session_number', 'amount'])\nfor x in range(CASINO_SESSIONS_MAX):\n    amount, bets = go_to_casino(fairness='roulette')\n    casino_sessions = casino_sessions.append({'session_number': x, 'amount': amount}, ignore_index=True)","74017d4f":"sns.distplot(casino_sessions['amount'], bins = 11)","13d6446b":"casino_sessions['amount'].mean()","5998afbb":"## With fair draws","be2e515b":"## With roulette like draws"}}