{"cell_type":{"262a3e74":"code","1cb7f4cc":"code","a9cc9fc5":"code","69c99247":"code","a29ec4bc":"code","9ab3df99":"code","b9ddebfc":"code","e1b370fc":"code","c3d24518":"code","f0bcbb3e":"code","50ba79a6":"code","ff043188":"code","25a013ce":"code","82edc4b9":"code","d71cd901":"code","a343054f":"code","0a7be55d":"code","f944ada2":"code","ba6fcf64":"code","8a8076b0":"code","97866ef7":"code","4d91f33d":"code","4d005017":"code","86351812":"code","be2837e8":"code","95058359":"code","3d513986":"markdown","36c00462":"markdown","8f8c9b7d":"markdown","093e93e0":"markdown","921866de":"markdown","14982ab5":"markdown","8d2cb910":"markdown"},"source":{"262a3e74":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are avsailable in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1cb7f4cc":"import pandas as pd\nimport numpy as np\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","a9cc9fc5":"housing = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain_data = pd.get_dummies(housing)\ntest_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","69c99247":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ntrain = train_data.select_dtypes(include=numerics)\ntest = test_data.select_dtypes(include=numerics)","a29ec4bc":"d_train = train.fillna((np.mean(train)))","9ab3df99":"target = d_train['SalePrice']","b9ddebfc":"mean = d_train.mean(axis=0)\nd_train -= mean\nstd = d_train.std(axis=0)\nd_train \/= std\n\ntest -= mean\ntest \/= std","e1b370fc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(d_train, target, test_size = 0.1, random_state = 0)","c3d24518":"from keras import models\nfrom keras import layers\n\ndef build_model():\n    # Because we will need to instantiate\n    # the same model multiple times,\n    # we use a function to construct it.\n    model=models.Sequential()\n    model.add(layers.Flatten())\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(128, activation='relu'))# Add the proper output and activation\n    model.add(layers.Dense(1, activation='relu'))# Add the proper output and activation\n    return model","f0bcbb3e":"model = build_model()\nmodel.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n\nDesc = model.fit(d_train,target,\n                    epochs=20, batch_size=4, verbose=0)","50ba79a6":"from sklearn.linear_model import LinearRegression\nLG = LinearRegression() \nLG.fit(d_train, target)","ff043188":"y_pred = LG.predict(d_train)","25a013ce":"plt.scatter(target, y_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"SalePrices vs Predicted prices\")\nplt.show()","82edc4b9":"from sklearn.linear_model import SGDRegressor\n\nSR = SGDRegressor()\nSR.fit(d_train, target)","d71cd901":"SR.intercept_","a343054f":"y_predict = SR.predict(d_train)","0a7be55d":"plt.scatter(target, y_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"SalePrices vs Predicted prices\")\nplt.show()","f944ada2":"from sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.linear_model import LinearRegression, Ridge, \\\nRidgeCV, Lasso, LassoCV, \\\nElasticNet, ElasticNetCV\nRD = Ridge(alpha=0.01)\nRD.fit(d_train, target)\npred_train_RD= rr.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_train_RD)))\nprint(r2_score(target, pred_train_RD))\npred_test_RD= RD.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_test_RD)))\nprint(r2_score(target, pred_test_RD))","ba6fcf64":"from sklearn.linear_model import Lasso\nmodel_lasso = Lasso(alpha=0.01)\nmodel_lasso.fit(d_train, target)\npred_train_lasso= model_lasso.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_train_lasso)))\nprint(r2_score(target, pred_train_lasso))\n\n\n\npred_test_lasso= model_lasso.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_test_lasso)))\nprint(r2_score(target, pred_test_lasso))","8a8076b0":"from sklearn.linear_model import ElasticNet\nmodel_EN = ElasticNet(alpha = 0.01)\nmodel_EN.fit(d_train, target)\npred_train_EN= model_EN.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_train_EN)))\nprint(r2_score(target, pred_train_EN))\n\npred_test_EN= model_EN.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_test_EN)))\nprint(r2_score(target, pred_test_EN))","97866ef7":"train = pd.get_dummies(housing.iloc[:,:-1])\nx   = train.iloc[:,:-1].values\nx     = np.nan_to_num(x)\ny   = train.iloc[:,-1].values","4d91f33d":"from sklearn.linear_model import Ridge\n\nRD = Ridge()\nRD.fit(x, y)","4d005017":"from sklearn.linear_model import Lasso\n\nLS = Lasso()\nLS.fit(x, y)","86351812":"from sklearn.linear_model import ElasticNet\n\nEN = ElasticNet()\nEN.fit(x, y)","be2837e8":"#feature scaling\nfrom sklearn.preprocessing import StandardScaler\nSC = StandardScaler()\nX_train = SC.fit_transform(X_train)\nX_test = SC.transform(X_test)","95058359":"# Import SVM Regressor\nfrom sklearn.svm import SVC\nclassiffier = SVC(kernel = 'linear', random_state = 0)\nclassiffier.fit(X_train, y_train)","3d513986":"# D-SGDRegressor","36c00462":"# B-Different Batches size","8f8c9b7d":"# C-LinearRegression","093e93e0":"# A-Model","921866de":"# F-SVM","14982ab5":"# E- Ridge, Lasso, Elastic - Add proper regularization","8d2cb910":"**Another sol.**"}}