{"cell_type":{"902f08ed":"code","b50d6e5e":"code","afabcbc2":"code","c00dcb53":"code","d7c97afa":"code","a85fa2ec":"code","4255a48b":"code","c6125799":"code","090186c9":"code","52f75b25":"code","8d6199b6":"code","3995610e":"code","0cecc926":"code","330bd8bc":"code","0093b29d":"code","f6e1b5a6":"code","5e782f41":"markdown","804426f4":"markdown","cde9efa3":"markdown"},"source":{"902f08ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b50d6e5e":"import plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","afabcbc2":"data_dir = '..\/input\/rice-leaf-diseases\/rice_leaf_diseases'","c00dcb53":"classes = os.listdir(data_dir)\nclasses","d7c97afa":"image_size = (64, 64)\nbatch_size = 16","a85fa2ec":"train_ds = keras.preprocessing.image_dataset_from_directory(\n    data_dir,\n    subset='training',\n    validation_split=0.1,\n    seed=42,\n    image_size=image_size,\n    batch_size=batch_size,\n    label_mode=\"int\",\n    class_names=classes\n)","4255a48b":"val_ds = keras.preprocessing.image_dataset_from_directory(\n    data_dir,\n    subset='validation',\n    validation_split=0.1,\n    seed=42,\n    image_size=image_size,\n    batch_size=batch_size,\n    label_mode=\"int\",\n    class_names=classes\n)","c6125799":"plt.figure(figsize=(10,10))\n\nfor images, labels in train_ds.take(1):\n    for i in range(16):\n        ax = plt.subplot(4, 4, i + 1)\n        \n        #print(images[i].numpy())\n        \n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(classes[np.argmax(labels[i])])\n        plt.axis(\"off\")","090186c9":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\n\n\nclf = MLPClassifier(random_state=1, max_iter=300)","52f75b25":"train_samples = sum([16 for [x, _] in train_ds])\ntrain_samples","8d6199b6":"classes_ids = [x for x in range(len(classes))]","3995610e":"epochs = 10\n\nfor epoch in range(epochs):\n    print(f\"Epoch {epoch + 1}\/10\")\n    for images, labels in train_ds.take(train_samples \/\/ batch_size):\n        images = images.numpy().reshape((images.shape[0], images.shape[1] * images.shape[2] * images.shape[3]))\n        labels = labels.numpy()\n\n        clf.partial_fit(images, labels, classes = classes_ids)\n        print(f\"Partial Score: {clf.score(images, labels)}\") ","0cecc926":"val_sample = sum([16 for [x,_] in val_ds])","330bd8bc":"y_val = []\ny_val_pred = []\n\nfor images, targets in train_ds.take(val_sample \/\/ batch_size):\n    for i in range(batch_size):\n        \n        image = images[i].numpy().reshape((images[i].shape[0] * images[i].shape[1] * images[i].shape[2]))\n        label = int(targets[i])\n\n        prediction = clf.predict([image])\n        y_val_pred.append(prediction[0])\n        y_val.append(label)","0093b29d":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_val, y_val_pred)","f6e1b5a6":"import plotly.express as px\n\nfig = px.imshow(\n    cm,\n    x=classes,\n    y=classes\n)\nfig.update_xaxes(side=\"top\")\nfig.show()","5e782f41":"# Cargar datos","804426f4":"# Multilayer Perceptron Sklearn","cde9efa3":"# Matriz de confusion"}}