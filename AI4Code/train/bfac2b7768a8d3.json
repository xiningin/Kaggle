{"cell_type":{"0678db2e":"code","2c1b8ace":"code","cfbcdc86":"code","b9b1e4d1":"code","54f623ba":"code","2e234b9e":"code","50e4f88d":"code","545f9ae5":"code","4c017e34":"code","f6a5dc79":"code","f1dc25bd":"code","1426bea2":"code","3a3e235c":"code","281c8c13":"code","76cf5d53":"code","9894ed45":"code","7c2b6bbe":"code","14d3badf":"code","d64c01d8":"code","bdff228c":"code","3658ca60":"code","b404c110":"code","00e71e4f":"code","f0f724bd":"code","cc04ce36":"code","e4c44fe1":"code","9cebc3dc":"code","c7691737":"code","ba0fe348":"code","0d36e1f6":"code","377689d3":"code","bafbbe0a":"code","5876eb8f":"code","4e88d2ce":"code","192293f6":"code","527d05d9":"code","c41a0434":"code","d9d5ed79":"markdown","3ca56264":"markdown","b5831091":"markdown","b17d2574":"markdown"},"source":{"0678db2e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nprint('Priyatama is ready!')","2c1b8ace":"match = pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')\nball = pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv')","cfbcdc86":"match.head(3)","b9b1e4d1":"ball.head(3)","54f623ba":"sns.heatmap(match.isnull())","2e234b9e":"match.isnull().sum()","50e4f88d":"sns.heatmap(ball.isnull())","545f9ae5":"ball.isnull().sum()","4c017e34":"match.columns","f6a5dc79":"print ('Matches played so far: ', match.shape[0]) #Here [0] is used to show only count of Columns.\nprint ('\\n Cities played at so far: ','\\n', match[\"city\"].unique()) #\\n is used to make a new line.\nprint ('\\n Teams Participated :', '\\n', match['team1'].unique())","f1dc25bd":"match = match.replace({'Rising Pune Supergiants': 'Rising Pune Supergiant'}, regex=True)\nball = ball.replace({'Rising Pune Supergiants': 'Rising Pune Supergiant'}, regex=True)\nmatch['team1'].unique()","1426bea2":"match['Season'] = pd.DatetimeIndex(match['date']).year #Set year from one column of date in to a new column.\nmatch.head(3)","3a3e235c":"#Total matches played per season.\nmatch_per_season = match.groupby(['Season'])['id'].count().reset_index().rename(columns={'id':'Matches'}) #Reset_Index helps make it into a dataframe.\nmatch_per_season","281c8c13":"#Total matches played per season in a plot.\nsns.countplot(match['Season']) #Plot countplot as it is.\nplt.xticks(rotation = 90, fontsize = 10) #Stylize on X axis.\nplt.yticks(fontsize = 10) #Stylize X axis.\nplt.xlabel('Seasons', fontsize  = 12 ) #Stylize X header.\nplt.ylabel('Matches', fontsize = 12) #Stylize X header.\nplt.title('Matches Played Per Season', fontsize = 15, fontweight = 'bold') #Add and stylize title.","76cf5d53":"#Make a new data set season by putting Season from Match data in Ball data, by ID.\nseasons = match[['id', 'Season']].merge(ball, left_on= 'id',right_on = 'id', how = 'left')","9894ed45":"seasons.head(3)","7c2b6bbe":"seasons = seasons.drop('id', axis=1) #Drop column with 'id' \n#Could be done in one step - seasons = match[['id', 'Season']].merge(ball, left_on= 'id',right_on = 'id', how = 'left')\nseasons.head(3)","14d3badf":"#Plot a lineplot to show runs scored across seasons.\nruns_season=seasons.groupby(['Season'])['total_runs'].sum().reset_index() #Make a new list of grouping total runs per season. \nrs=runs_season.set_index('Season') #Set_index to convert it to a dataframe.\nax = plt.axes()\nax.set(facecolor = \"Grey\") #BG Colour\nsns.lineplot(data=rs,palette=\"magma\") #Line colour \nplt.title('Total runs in each season',fontsize=12,fontweight=\"bold\") #Stylize Title\nplt.show()","d64c01d8":"#Plot a lineplot to show wickets across seasons.\nwickets_season=seasons.groupby(['Season'])['is_wicket'].sum().reset_index() #Make a new list of grouping total runs per season. \nws=wickets_season.set_index('Season') #Set_index to convert it to a dataframe.\nax = plt.axes()\nax.set(facecolor = \"Grey\") #BG Colour\nsns.lineplot(data=ws,palette=\"magma\") #Line colour \nplt.title('Total wickets in each season',fontsize=12,fontweight=\"bold\") #Stylize Title\nplt.show()","bdff228c":"#Plot a lineplot to show runs across teams.\nteam_runs=seasons.groupby(['batting_team'])['total_runs'].sum().reset_index() #Make a new list of grouping total runs per season. \ntr=team_runs.set_index('batting_team') #Set_index to convert it to a dataframe.\nax = plt.axes()\nax.set(facecolor = \"Grey\") #BG Colour\nsns.lineplot(data=tr,palette=\"magma\") #Line colour \nplt.xticks(rotation = 90)\nplt.title('Total runs by each team',fontsize=12,fontweight=\"bold\") #Stylize Title\nplt.show()","3658ca60":"#Plot a lineplot to show runs across teams.\nwickets_team = seasons.groupby(['bowling_team'])['is_wicket'].sum().reset_index()\nwt = wickets_team.set_index('bowling_team')\nax = plt.axes()\nax.set(facecolor = 'Grey')\nsns.lineplot(data = wt, palette = 'magma')\nplt.title('Total Wickets by Team', fontsize = 15, fontweight = 'bold')\nplt.xticks(rotation=90)\nplt.xlabel('Teams', fontsize = 13 )\nplt.ylabel('Total Wickets', fontsize = 13)","b404c110":"#Plot a barplot to show toss won per team.\ntoss = match['toss_winner'].value_counts()\nax = plt.axes()\nax.set(facecolor = 'Grey')\nsns.set(rc={'figure.figsize':(10,5)}, style= 'darkgrid')\nsns.barplot(y=toss.index, x=toss, orient='h', palette = 'icefire', saturation = 1)\nplt.title('Toss won by teams', fontsize = 15, fontweight = 'bold')\nplt.xlabel('Toss Won')\nplt.ylabel('Teams')\nplt.show()","00e71e4f":"#Plot a barplot to show matches won per team.\nwin = match['winner'].value_counts()\nax = plt.axes()\nax.set(facecolor = 'Grey') \nsns.set(rc={'figure.figsize': (10,5)},style = 'darkgrid')\nsns.barplot(y=win.index, x=win, orient='h', palette = 'icefire', saturation = 1)\nplt.xticks(fontsize = 13)\nplt.yticks(fontsize = 13)\nplt.xlabel('Total Wins')\nplt.ylabel('Teams')\nplt.title('Total Team Wins', fontsize = 15, fontweight = 'bold')","f0f724bd":"#Toss decision across seasons.\nax = plt.axes()\nax.set(facecolor='Grey')\nsns.set({'figure.figsize':(10,5)}, style = 'darkgrid')\nsns.countplot(x='Season', hue = 'toss_decision', data= match)\nplt.xlabel('Seasons', fontsize = 13)\nplt.ylabel('Count', fontsize = 13)\nplt.title('Toss Decision across seasons', fontsize = 15, fontweight = 'bold')\nplt.xticks(rotation = 90)","cc04ce36":"#How many matches each team won after winning and loosing toss.\ntwmw = match['toss_winner'] == match['winner']\nax = plt.axes()\nax.set(facecolor='Grey')\nsns.set({'figure.figsize':(10,5)}, style = 'darkgrid')\nsns.countplot(match['winner'], hue=twmw, order = match['winner'].value_counts().index) #Order the countplot with value counts.\nplt.xticks(rotation = 90)\nplt.xlabel('Toss Wins')\nplt.ylabel('Count of Match Wins')\nplt.title('Match wins per toss win', fontsize = 15, fontweight = 'bold')\nplt.legend(title='Match Result', loc='upper right', labels=['Lost', 'Won']) #Rename Legends.","e4c44fe1":"#What was decision of teams after winning toss?\ntwmw = match['toss_winner'] == match['winner']\nax = plt.axes()\nax.set(facecolor='Grey')\nsns.set({'figure.figsize':(10,5)}, style = 'darkgrid')\nsns.countplot(match['toss_winner'], hue=match['toss_decision'], order = match['toss_winner'].value_counts().index)\nplt.xticks(rotation = 90)\nplt.legend(title = 'Toss Decision', loc = 'upper right',labels = ['Field First', 'Bat First'])\nplt.xlabel('Toss Winner', fontsize = 10)\nplt.ylabel('Count of Decision', fontsize = 10)\nplt.title('Toss Decision per Team', fontsize = 15, fontweight = 'bold')","9cebc3dc":"#Place a countplot most wicket taking bowlers.\n#First fill all NA in dismissal kind with 'Not a wicket'.\nball['dismissal_kind'].fillna('Not a Wicket', inplace = True)\nball.dismissal_kind.unique()","c7691737":"#Make a new data frame of all entries with wickets.\n#Multiple Filter on a single column.\nyes_bowler_wickets = ['caught', 'bowled', 'lbw', 'stumped', 'caught and bowled', 'hit wicket']\nbowler_wickets = ball[ball['dismissal_kind'].isin(yes_bowler_wickets)]\nprint('\\n Type of Dismissals', '\\n' ,bowler_wickets['dismissal_kind'].unique())","ba0fe348":"plt.figure(figsize=(15,112))\nsns.countplot(y=bowler_wickets['bowler'],\n              order = bowler_wickets['bowler'].value_counts().index)\nplt.title('Most wicket taking bowler!')\nplt.show()","0d36e1f6":"#Drow a pie chart for top 10 wicket taking bowlers.\nwickets_bowler = bowler_wickets.groupby(['bowler'])['dismissal_kind'].count().reset_index()\nwickets_bowler.columns = ['Bowler', 'Wickets']\ny = wickets_bowler.sort_values(by='Wickets', ascending = False).head(10).reset_index().drop('index', axis=1)\ny","377689d3":"y.set_index('Bowler', inplace=True) #Change index with Bowler name column.","bafbbe0a":"y['Wickets'].plot.pie(autopct='%1.1f%%', shadow = True , rotatelabels=True, radius = 0.9)\nplt.ylabel('  Top 10 ' '\\n Bowlers',fontsize=15,rotation = 0)\nplt.yticks(fontsize=10)","5876eb8f":"#Drow a bar chart for top 10 most run scoring batsmen.\nball.columns","4e88d2ce":"ball['batsman_runs'].unique()","192293f6":"top10runs= ball.groupby(['batsman'])['batsman_runs'].sum().reset_index()\ntop10runs.columns = ['Batsman', 'Runs']\ntop10runs = top10runs.sort_values(by = 'Runs', ascending = False).head(10).reset_index().drop('index', axis=1)\ntop10runs","527d05d9":"ax = plt.axes()\nax.set(facecolor = \"grey\")\nsns.barplot(x=top10runs['Batsman'],y=top10runs['Runs'],palette='rocket',saturation=1)\nplt.xticks(rotation=90,fontsize=10)\nplt.yticks(fontsize=10)\nplt.xlabel('\\n Player',fontsize=15)\nplt.ylabel('Total Runs',fontsize=15)\nplt.title('Top 10 run scorers in IPL',fontsize=15,fontweight=\"bold\")","c41a0434":"#Drow a bar chart for top 10 most MOM award winners.\nax = plt.axes()\nax.set(facecolor = 'Black')\nmatch.player_of_match.value_counts()[:10].plot(kind='bar')\nplt.xlabel('Player', fontsize = 15, fontweight = 'bold')\nplt.ylabel('Monst Man of the  Match', fontsize = 15, fontweight = 'bold')\nplt.title('Most MoM winner', fontsize = 20, fontweight = 'bold')","d9d5ed79":"## 2. Cleaning & Setting up the dataset.","3ca56264":"## 3. Exploratory data analysis.","b5831091":"## 1. Reading the dataset.","b17d2574":"Please share your feedback too!\n\nThank you for scrolling!"}}