{"cell_type":{"95278087":"code","3eac2494":"code","d3f7bc19":"code","e9891d67":"code","6bd6c42b":"code","cb78c035":"code","792796f7":"code","c19379a9":"code","487c1564":"code","df0e1e5d":"code","d3f506e5":"code","62c6db7b":"markdown","13b1dae0":"markdown","cd34d77f":"markdown","0e1faffb":"markdown","2eb3802f":"markdown","18007d39":"markdown","e5f5aecd":"markdown","a8f169f0":"markdown","0996acf8":"markdown"},"source":{"95278087":"# keras module for building LSTM \nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Embedding, LSTM, Dense, Dropout\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.models import Sequential\nimport keras.utils as ku \n\n# set seeds for reproducability\nfrom tensorflow import set_random_seed\nfrom numpy.random import seed\nset_random_seed(2)\nseed(1)\n\nimport pandas as pd\nimport numpy as np\nimport string, os \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.simplefilter(action='ignore', category=FutureWarning)","3eac2494":"curr_dir = '..\/input\/'\nplay_df = pd.read_csv(curr_dir + 'Shakespeare_data.csv')\n\nall_lines = [h for h in play_df.PlayerLine]\n\nprint(len(all_lines))","d3f7bc19":"def clean_text(txt):\n    txt = \"\".join(v for v in txt if v not in string.punctuation).lower()\n    txt = txt.encode(\"utf8\").decode(\"ascii\",'ignore')\n    return txt \n\ncorpus = [clean_text(x) for x in all_lines]\ncorpus[:10]","e9891d67":"tokenizer = Tokenizer()\n\ndef get_sequence_of_tokens(corpus):\n    ## tokenization\n    corpus = corpus[:7000]\n    tokenizer.fit_on_texts(corpus)\n    total_words = len(tokenizer.word_index) + 1\n    \n    ## convert data to sequence of tokens \n    input_sequences = []\n    for line in corpus:\n        token_list = tokenizer.texts_to_sequences([line])[0]\n        for i in range(1, len(token_list)):\n            n_gram_sequence = token_list[:i+1]\n            input_sequences.append(n_gram_sequence)\n    return input_sequences, total_words\n\ninp_sequences, total_words = get_sequence_of_tokens(corpus)\ninp_sequences[:10]","6bd6c42b":"def generate_padded_sequences(input_sequences):\n    max_sequence_len = max([len(x) for x in input_sequences])\n    input_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))\n    \n    predictors, label = input_sequences[:,:-1],input_sequences[:,-1]\n    label = ku.to_categorical(label, num_classes=total_words)\n    return predictors, label, max_sequence_len\n\npredictors, label, max_sequence_len = generate_padded_sequences(inp_sequences)\npredictors.shape, label.shape","cb78c035":"def create_model(max_sequence_len, total_words):\n    input_len = max_sequence_len - 1\n    model = Sequential()\n    \n    # Add Input Embedding Layer\n    model.add(Embedding(total_words, 10, input_length=input_len))\n    \n    # Add Hidden Layer 1 - LSTM Layer\n    model.add(LSTM(512))\n    model.add(Dropout(0.4))\n    \n    # Add Output Layer\n    model.add(Dense(total_words, activation='softmax'))\n\n    model.compile(loss='categorical_crossentropy', optimizer='adam')\n    \n    return model\n\nmodel = create_model(max_sequence_len, total_words)\nmodel.summary()","792796f7":"model.fit(predictors, label, epochs=2, verbose=1)","c19379a9":"model.fit(predictors, label, epochs=20, verbose=2)","487c1564":"model.fit(predictors, label, epochs=20, verbose=0)","df0e1e5d":"def generate_text(seed_text, next_words, model, max_sequence_len):\n    for _ in range(next_words):\n        token_list = tokenizer.texts_to_sequences([seed_text])[0]\n        token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n        predicted = model.predict_classes(token_list, verbose=0)\n        \n        output_word = \"\"\n        for word,index in tokenizer.word_index.items():\n            if index == predicted:\n                output_word = word\n                break\n        seed_text += \" \"+output_word\n    return seed_text.title()","d3f506e5":"print (\"1. \",generate_text(\"Julius\", 20, model, max_sequence_len))\nprint (\"2. \",generate_text(\"Thou\", 20, model, max_sequence_len))\nprint (\"3. \",generate_text(\"King is\", 20, model, max_sequence_len))\nprint (\"4. \",generate_text(\"Death of\", 20, model, max_sequence_len))\nprint (\"5. \",generate_text(\"The Princess\", 20, model, max_sequence_len))\nprint (\"6. \",generate_text(\"Thanos\", 20, model, max_sequence_len))","62c6db7b":"## 1. Import the libraries","13b1dae0":"## 3. Dataset preparation","cd34d77f":"Next we will generate sequence of N-gram tokens using Keras' Tokenizer.","0e1faffb":"## 4. Using LSTM for text generation","2eb3802f":"First, we will clean the data.","18007d39":"## 5. Generating the text","e5f5aecd":"# Text Generation using LSTMs","a8f169f0":"Next we will generate padded sequences.","0996acf8":"## 2. Load the dataset"}}