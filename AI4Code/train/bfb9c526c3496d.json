{"cell_type":{"c1219c52":"code","b1c7bdbd":"code","fc0d952f":"code","cd68a2b7":"code","8ce639e0":"code","fffadaa3":"code","f8da4439":"code","7bf74d8f":"code","1e76e299":"code","0440375f":"code","d9c5fbe6":"code","cc5a16a7":"code","52adbb19":"code","4f44dd74":"markdown","902d41f5":"markdown","5af02c04":"markdown","9e0097eb":"markdown","085ba4b9":"markdown","0b80b4a8":"markdown"},"source":{"c1219c52":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.losses import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.metrics import *\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.preprocessing.image import load_img\nfrom sklearn.metrics import classification_report\nfrom sklearn.utils import shuffle\nfrom PIL import Image, ImageEnhance\nfrom tqdm import tqdm\nimport random","b1c7bdbd":"x_train_paths = []\ny_train_paths = []\nx_val_paths = []\ny_val_paths = []\n\nall_paths = []\nall_labels = []\ndata_dir = '\/kaggle\/input\/weather-dataset\/dataset\/'\nfor label in os.listdir(data_dir):\n    for image in os.listdir(data_dir+label):\n        all_paths.append(data_dir+label+'\/'+image)\n        all_labels.append(label)\nall_paths, all_labels = shuffle(all_paths, all_labels)\n\nx_train_paths = all_paths[:5000]\ny_train = all_labels[:5000]\nx_val_paths = all_paths[5000:]\ny_val = all_labels[5000:]","fc0d952f":"def augment_image(image):\n    image = Image.fromarray(np.uint8(image))\n    image = ImageEnhance.Brightness(image).enhance(random.uniform(0.6,1.4))\n    image = ImageEnhance.Contrast(image).enhance(random.uniform(0.6,1.4))\n    image = np.array(image)\/255.0\n    return image","cd68a2b7":"def open_images(paths):\n    images = []\n    for path in paths:\n        image = load_img(path, target_size=(128,128))\n        image = augment_image(image)\n        images.append(image)\n    return np.array(images)","8ce639e0":"num_images = 9\nimages = open_images(x_train_paths[:num_images])\nfig = plt.figure(figsize=(16, round(num_images\/4)*4))\nfor x in range(1, num_images):\n    fig.add_subplot(int(num_images\/4), 4, x)\n    plt.axis('off')\n    plt.title(y_train[x])\n    plt.imshow(images[x])\nplt.show()","fffadaa3":"unique_labels = os.listdir('\/kaggle\/input\/weather-dataset\/dataset\/')\ndef encode_label(labels):\n    encoded = []\n    for x in labels:\n        encoded.append(unique_labels.index(x))\n    return np.array(encoded)\n\ndef decode_label(labels):\n    decoded = []\n    for x in labels:\n        decoded.append(unique_labels[x])\n    return np.array(decoded)","f8da4439":"def data_gen(paths, labels, batch_size=12):\n    \n    if len(paths)!=len(labels):\n        raise Exception('The length of paths is ',len(paths), ' but the length of labels is ', len(labels))\n    \n    for x in range(0, len(paths), batch_size):\n        batch_paths = paths[x:x+batch_size]\n        batch_images = open_images(batch_paths)\n        batch_labels = labels[x:x+batch_size]\n        batch_labels = encode_label(batch_labels)\n        yield batch_images, batch_labels","7bf74d8f":"vgg16 = VGG16(input_shape=(128,128,3), include_top=False, weights='imagenet')\n# Set all layers to non-trainable\nfor layer in vgg16.layers:\n    layer.trainable = False","1e76e299":"model = Sequential()\nmodel.add(Input(shape=(128,128,3)))\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dropout(0.3))\nmodel.add(Dense(768, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(len(unique_labels), activation='softmax'))\n\nmodel.summary()","0440375f":"model.compile(optimizer=Adam(learning_rate=0.0001),\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","d9c5fbe6":"batch_size=12\nsteps = int(len(x_train_paths)\/batch_size)\nepochs=1 # train for 8-12 epochs\nfor _ in range(epochs):\n    model.fit(data_gen(x_train_paths, y_train, batch_size=batch_size), epochs=1, steps_per_epoch=steps)","cc5a16a7":"batch_size=12\nsteps = int(len(x_val_paths)\/batch_size)\ny_pred = []\ny_true = []\nfor x,y in tqdm(data_gen(x_val_paths, y_val, batch_size=batch_size), total=steps):\n    pred = model.predict(x)\n    pred = np.argmax(pred, axis=-1)\n    for i in pred:\n        y_pred.append(i)\n    for i in y:\n        y_true.append(i)","52adbb19":"print(classification_report(y_true, y_pred))","4f44dd74":"# Model","902d41f5":"# Train Model","5af02c04":"# Train-Val Split","9e0097eb":"# Data Generator","085ba4b9":"# Evaluate Model","0b80b4a8":"# Label encoder-decoder"}}