{"cell_type":{"a311a83a":"code","c756c1b2":"code","2f8debfd":"code","fa83cd49":"code","ed6681d7":"code","18186427":"code","0a27a297":"code","32239ca9":"code","b6e1025d":"code","67e4a417":"code","5f4b3447":"code","a9b53669":"code","e5a4a775":"code","5e135736":"code","c8d7f76d":"code","8869337d":"code","7182efb9":"code","f4f4e3f3":"code","8d8df0f7":"markdown","d4bacff4":"markdown","0bbdf466":"markdown","28667c14":"markdown","cdedc81b":"markdown","e35f8cec":"markdown","6bcde4f5":"markdown","70afaf12":"markdown","064f9a61":"markdown","417344a0":"markdown","a4e70d38":"markdown","f4bc942c":"markdown","11fe5661":"markdown","74528a0e":"markdown","ab4ffe5e":"markdown","8061fb68":"markdown","9c4055f2":"markdown","198da799":"markdown","3b13f7e7":"markdown","48379ca0":"markdown"},"source":{"a311a83a":"from tensorflow.keras.datasets import cifar10\n\nimport numpy as np\nimport pandas as pd\n\nimport pickle\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import utils\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D, GlobalAveragePooling2D, Activation, BatchNormalization\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import regularizers\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport matplotlib.pyplot as plt\nfrom PIL import Image","c756c1b2":"(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n\nprint('Training set shape:', X_train.shape)\nprint('Test set shape:', X_test.shape)","2f8debfd":"X_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\nX_train = X_train \/ 255.0\nX_test = X_test \/ 255.0","fa83cd49":"y_train = tf.keras.utils.to_categorical(y_train, num_classes)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes)","ed6681d7":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.2)","18186427":"def cnn_model():\n    \n    model = Sequential()\n    \n    # First Conv layer\n    model.add(Conv2D(filters=128, kernel_size=(3,3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(1e-4), input_shape=(32,32,3)))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.3))\n    \n    # Second Conv layer\n    model.add(Conv2D(filters=256, kernel_size=(3,3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(1e-4)))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.3))\n    \n    # Third, fourth, fifth convolution layer\n    model.add(Conv2D(filters=512, kernel_size=(3,3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(1e-4)))\n    model.add(Conv2D(filters=512, kernel_size=(3,3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(1e-4)))\n    model.add(Conv2D(filters=256, kernel_size=(3,3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(1e-4)))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.3))\n\n    # Fully Connected layers\n    model.add(Flatten())\n    \n    model.add(Dense(512, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(256, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(128, activation='relu'))\n    model.add(Dropout(0.5))\n    \n    model.add(Dense(10, activation='softmax'))\n    \n    model.summary()\n    \n    return model","0a27a297":"datagen = ImageDataGenerator(featurewise_center=False,\n                            samplewise_center=False,\n                            featurewise_std_normalization=False,\n                            samplewise_std_normalization=False,\n                            zca_whitening=False,\n                            rotation_range=15,\n                            width_shift_range=0.1,\n                            height_shift_range=0.1,\n                            horizontal_flip=True,\n                            vertical_flip=False)\n\ndatagen.fit(X_train)","32239ca9":"model = cnn_model()","b6e1025d":"model.compile(loss='categorical_crossentropy',\n             optimizer=Adam(lr=0.0003, decay=1e-6),\n             metrics=['accuracy'])","67e4a417":"history = model.fit_generator(datagen.flow(X_train, y_train, batch_size = 64),\n                    steps_per_epoch = len(X_train) \/\/ 64, \n                    epochs = 125, \n                    validation_data= (X_valid, y_valid),\n                    verbose=1)","5f4b3447":"pd.DataFrame(history.history).plot()","a9b53669":"scores = model.evaluate(X_test, y_test)","e5a4a775":"pred = model.predict(X_test)","5e135736":"labels = ['Airplane', 'Automobile', 'Bird', 'Cat', 'Deer', 'Dog', 'Frog', 'Horse', 'Ship', 'Truck']\ny_pred = np.argmax(pred, axis=1)\ny_true = np.argmax(y_test, axis=1)\nerrors = y_pred - y_true != 0","c8d7f76d":"print(classification_report(y_true, y_pred))","8869337d":"fig, axes = plt.subplots(5, 5, figsize=(12,12))\naxes = axes.ravel()\n\nfor i in np.arange(25):\n    axes[i].imshow(X_test[i])\n    axes[i].set_title('True: %s \\nPredict: %s' % (labels[y_true[i]], labels[y_pred[i]]))\n    axes[i].axis('off')\n    plt.subplots_adjust(wspace=1)","7182efb9":"fig, axes = plt.subplots(5, 5, figsize=(12,12))\naxes = axes.ravel()\n\nmiss_pred = np.where(y_pred != y_true)[0]\nfor i in np.arange(25):\n    axes[i].imshow(X_test[miss_pred[i]])\n    axes[i].set_title('True: %s \\nPredict: %s' % (labels[y_true[miss_pred[i]]], labels[y_pred[miss_pred[i]]]))\n    axes[i].axis('off')\n    plt.subplots_adjust(wspace=1)","f4f4e3f3":"model.save('cifar10_cnn.h5')","8d8df0f7":"### Print Classification Report\nThis gives us a breaksdown of scores per label. We can see from the report below that our model has learned classifiying automobiles, ships and truck with a 90% precision and recall, and around 75-90% on all the other categories","d4bacff4":"### Evaluating model on the test set","0bbdf466":"### Import the required libraries","28667c14":"We can see from the pictures above that our model is perofrming really well, all the misclassified images can very easily be misclassified by a human as well. They are very similar to the mislcassfied prediction. ","cdedc81b":"### Check the wrong predictions","e35f8cec":"### Normalize the train and test data\nConverting to float and dividing each instance by 255 so that all the image pixels are between 0 and 1","6bcde4f5":"### Make predictions","70afaf12":"### Intitialize the model","064f9a61":"### Define the CNN Model\n\nThe layout of this model is similar to AlexNet designed by Alex Krizhevsky but with different number of filters, kernel_size etc. \n\nWe create a Sequential model and start adding layers one by one. The first Conv2D layers are preceeded by MaxPooling2D and Dropout layer. Then 3 Conv2D layers are stacked followed by again a pooling and dropout layer followed by 2 fully connected Dense layers leading to an output layer. The kernel_size and pool_sie are the same through out the network. \n\nThe filters double in the size with every layer starting from 128 going up to 512 and coming back down to 256 in the fifth layer. Similar values for neurons were used in the fully connected layer. These settings gave me the best accuracy though it can be computationally expensive. With the help of a GPU on the Kaggle platform, I was able to train this model in approximately an hour.\nI went with the standard activation 'relu' and 'same'padding'\n\nTo stop my model from overfitting, I used the l2 kernel_regularizer and also added dropout layers. This reduced overfitting while also icreasing accuracy by a few percent. I again exprimented with a varity of dropout values to land on this one, using lower dropout of 0.3 for the conv layers and a higher 0.5 for the fully connected layers.","417344a0":"### One Hot Encode the labels\n\nThe labels are currently vectors stored as a list with 10 values, all are zero except the correct index for that label will be a 1. \nExample: \n- Airplane --> [1,0,0,0,0,0,0,0,0,0] \n- Automobile --> [0,1,0,0,0,0,0,0,0,0]\n- Bird --> [0,0,1,0,0,0,0,0,0,0]\n\nWe want to split them into separate columns by one hot encoding them","a4e70d38":"### Saving the model\nAlways save the model and weights so that we can use this trained model and experiment with different parameters to recreate it.","f4bc942c":"### Splitting the train set for a validation set\n\nWe will further split the training set to create a validation set to test model results on. We want to make sure that we don't touch the test set till we're happy with our model and are ready to make predictions off the test set. ","11fe5661":"This notebook is the result of a series of experiments I conducted on the CIFAR-10 dataset to understand hyperparameter tuning of a Convolutional Neural Network.  It explains the model with the final parameters that achieved the highest results. This model secures a 85.97% accuracy on unseen test data.\n\n# CIFAR-10 dataset\nThe CIFAR-10 dataset contains 60,000 color images of dimension 32 X 32 in 3 channels divided into 10 classes. The training data has 50,000 images and the test data has 10,000. You can read more about the dataset here: https:\/\/www.cs.toronto.edu\/~kriz\/cifar.html \nThis is a mulyi-label image classification problem with 10 labels. The data is equally split between the labels.","74528a0e":"### Plotting the train and val accuracy and loss","ab4ffe5e":"### Data Augmentation\n\nAugmenting the training data and introducing random variations of images like rotating them by 15 dgrees, changing width and height etc. made the model generalize better and reduce overfitting while also increasing the accuracy by a bit. It does increase the training time due to the added variations, but is definitely worthit training on a GPU. Don't even think of training this model on a CPU, it will take days.","8061fb68":"### Compile the model\nPretty standard settings for the loss, optimizer and metrics functions. I did play around with the learning rate a little bit but the idea was to keep it fairly low to let it slowly converge.","9c4055f2":"### Fit the model\n\nI first tried a lower batch_size of 32 which increase the amount of time for every epoch and also converged to a higher accuracy very slowly. Batch_size of 64 converged the model much faster and also slowly increases the model accuracy by a bit at the end.\n\nStarted with 100 epochs but increased it to 125 as the model was slowly converging still at 100 epochs. Overfitting was not a concern as I had applied strong regluarization. If you look at the output below, the model is beginning to achieve 80% accuracy on the validation set around 30-35 epochs, and the convergence after that is very slow.","198da799":"### Check the predictions","3b13f7e7":"# CIFAR-10 Dataset CNN Model achieving 85.97% accuracy with regularization and data augmentation","48379ca0":"### Load the dataset from the keras library and split into train and test set\nThis is the easiest way to load the CIFAR-10 dataset. You can also download the files from the link in the introduction, but requires a lot more steps to bring it to a usable state. "}}