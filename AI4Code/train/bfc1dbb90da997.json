{"cell_type":{"6cf58dc5":"code","1041e4ff":"code","11614c24":"code","9b0a91c3":"code","997ee77c":"code","2bd4192e":"code","21a8ffe4":"code","d3950bdc":"code","8ff153bb":"markdown","4a404aa9":"markdown","0c3c7541":"markdown","019643f3":"markdown","cc3ef2e7":"markdown","b3fc0f02":"markdown","9ae4eb6e":"markdown","d914d739":"markdown","85b42027":"markdown"},"source":{"6cf58dc5":"import pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go","1041e4ff":"!pip install openpyxl\nimport warnings\n\nwith warnings.catch_warnings(record=True):\n    warnings.simplefilter(\"always\")\n    medals_data = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Medals.xlsx', \n                                engine=\"openpyxl\")","11614c24":"athletes_data = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Athletes.xlsx')\ngender_data = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/EntriesGender.xlsx')","9b0a91c3":"# count number of atheletes representing each country\nfig1_data = athletes_data\\\n                         .groupby('NOC')\\\n                         .agg({'Name': 'count'})\\\n                         .reset_index()\n# plot\nfig1 = px.choropleth(\n    data_frame = fig1_data, # data frame\n    locations = 'NOC', # country names\n    locationmode = 'country names', \n    color = 'Name', # color the map w.r.t. # of athletes\n    labels = dict( \n        NOC = 'Country', \n        Name = 'Number of Athletes'\n    ), # fix the axis label names\n    color_continuous_scale = 'YlOrRd', # color map\n    range_color = (0, 700), # fix the range for the legend\n    title = 'Distribution of Athletes', # plot title\n    hover_name='NOC', # specify information to display for interactivity\n    hover_data={'Name':True, 'NOC':False},\n    height = 500, # height and width of the figure\n    width = 800\n)\n\nfig1.update_geos(\n    resolution=110, # higher quality maps\n    showland=True, landcolor=\"white\", # map properties \n    showocean=True, oceancolor=\"paleturquoise\"\n)\n\nfig1.update_layout(\n    title=dict(font=dict(family='Rockwell', size=25)), # font title\n    font=dict(family='Verdana', size=13) # axis labels font\n)\nfig1.show()","997ee77c":"top_n = 20 # select top N countries\n\n# filter the data\nfig2_data = athletes_data\\\n                         .groupby('NOC')\\\n                         .agg({'Name': 'count'})\\\n                         .reset_index()\\\n                         .sort_values(by='Name', ascending=False)[:top_n]\n\n# plot\nfig2 = px.bar(\n    data_frame = fig2_data, # data\n    # specify the column names \n    x = 'Name', \n    y = 'NOC', \n    orientation = 'h', # horizontal bars; use 'v' for vertical bar chart\n    labels = dict(NOC='Country Name', Name='Number of Athletes'), # fix axis names\n    title = f'Top {top_n} Countries with the Highest Number of Athletes', # chart title\n    template = 'plotly_white', # theme; 'plotly', 'seaborn', 'ggplot2' few other themes available\n    height = 600, \n    width = 800,\n    range_x=(0, 700) # fix x-axis scale\n)\nfig2.update_layout(\n    # update chart aesthetics\n    title=dict(font=dict(family='Rockwell', size=20)),\n    font=dict(family='Verdana', size=12),\n    margin=dict(pad = 5)\n)\nfig2.show()","2bd4192e":"fig3 = px.treemap(\n    data_frame = athletes_data, \n    path = ['Discipline', 'NOC'],\n    title = 'Number of Athletes (country wise) competing in different sports',\n    height = 700\n)\nfig3.update_layout(\n    title=dict(font=dict(family='Rockwell', size=20)),\n    font=dict(family='Verdana', size=14),\n    margin=dict(pad = 5)\n)\nfig3.show()","21a8ffe4":"# plot\nfig4 = go.Figure(\n    data = [\n        # data for males\n        go.Bar(\n            name='Male', # name for this bar chart \n            y=gender_data['Discipline'], # sports data\n            x=gender_data['Male']\/gender_data['Total'], # male ratio competeing\n            orientation='h', # horizontal chart\n            # bar colors and aesthetics\n            marker=dict(color='darkturquoise', line=dict(color='black', width=2))\n        ),\n        # data for females\n        go.Bar(\n            name='Female',  # name for this bar chart \n            y=gender_data['Discipline'], # sports data\n            x=gender_data['Female']\/gender_data['Total'], # female ratio competeing\n            orientation='h',\n            # bar colors and aesthetics\n            marker=dict(color='darkorange', line=dict(color='black', width=2))\n        ),\n    ]\n)\nfig4.update_layout(\n    barmode='relative', \n    margin = dict(pad=5), # gap between plot and axis titles\n    # title aesthetics\n    title = dict(\n        text='Distribution of Athletes in various Disciplines by Gender', # display this title\n        font=dict(family='Rockwell', size=25) # title font \n    ),\n    font = dict(family='Verdana', size=13), # font for axis labels\n    height = 1100, \n    width = 750,\n    xaxis_tickformat = '.1%', # fix x axis format ; try commenting to see difference\n    template = 'plotly_white', # theme\n    legend = dict(title='Gender') # legend name \n)\nfig4.show()","d3950bdc":"top_n = 20\n\n# filter data\nfig5_data = medals_data[:top_n].sort_values(by='Rank', ascending=False)\n\n# plot\nfig5 = go.Figure(\n    data = [\n        # data for gold medals \n        go.Bar(\n            name='Gold', \n            y=fig5_data['Team\/NOC'], \n            x=fig5_data['Gold'],\n            orientation='h', \n            marker=dict(color='gold', line=dict(color='black', width=2))\n        ),\n        # data for silver medals \n        go.Bar(\n            name='Silver', \n            y=fig5_data['Team\/NOC'], \n            x=fig5_data['Silver'],\n            orientation='h', \n            marker=dict(color='silver', line=dict(color='black', width=2))\n        ),\n        # data for bronze medals \n        go.Bar(\n            name='Bronze', \n            y=fig5_data['Team\/NOC'], \n            x=fig5_data['Bronze'],\n            orientation='h', \n            marker=dict(color='chocolate', line=dict(color='black', width=2))\n        )\n    ]\n)\n# update chart aesthetics\nfig5.update_layout(\n    barmode='stack',\n    margin = dict(pad=5),\n    title = dict(\n        text=f'Medal distribution of Top {top_n} countries ranked',\n        font=dict(family='Rockwell', size=20)\n    ),\n    font = dict(family='Verdana', size=12),\n    height = 800, \n    width = 750, \n    template = 'plotly_white', \n    legend = dict(title='Medal'),\n    xaxis = dict(range=(0, 120))\n)\nfig5.show()","8ff153bb":"# 4. Horizontal Percent Stacked Bar Chart\n- The below chart shows the gender distribution across multiple sports (disciplines).\n- I have made this chart using plotly go object as compared to plotly express object, as used in above visualizations.","4a404aa9":"# Conclusion\nI think the best way to improve data visualization skill is to read the documentation of various packages and experiment with different properties.\n- A few tips for any visualiation\n    - Add chart title, axis labels and legend\n    - make sure the axis scale range are correct\n    - use correct visualization for plotting numeric and categorical data.","0c3c7541":"# 1. Choropleth Map\n\nThe below Choropleth Map shows the number of athletes competing from differnt countries. I have used a coloured continous scale to show the number of athletes.","019643f3":"# 2. Horizontal Bar Chart\nThe below horizontal bar chart shows the top 20 countries with the highest number of athelets competing in the olympics.","cc3ef2e7":"# Read Datasets","b3fc0f02":"# Motivation\n- Hello everyone! The purpose for creating this notebook is to improve my data visualization skills using plotly package. \n- Below you will see I have experimented with different chart types, asthetics etc. I have tried my best to make code readable by inserting comments. \n- Please feel free to point out my mistakes and suggest topics I can read to improve. Thanks!","9ae4eb6e":"# 5. Horizontal Stacked Bar Chart\nThe below chart shows the top 20 countries with highest number medals in all categories.","d914d739":"# Imports","85b42027":"# 3. Treemap\n- The below tree map shows two things - \n    - Number of athletes competing in different sports\n    - If you click on a particular sport, it will show the number of athletes from different countries"}}