{"cell_type":{"fea81c0e":"code","c6915aee":"code","30c5b962":"code","3abcb764":"code","1c3dc5da":"code","176bdf2d":"code","76b09dc2":"code","c9b661cd":"code","dd5a332d":"code","42f18f99":"code","6051dc9b":"code","a1173674":"code","00adcbc4":"code","4bf5857a":"code","471f915a":"code","a4f0632d":"code","73fe1d73":"code","ea76be97":"code","12846543":"code","b39a487a":"code","5d084d66":"code","da5e4068":"code","21d76ba3":"code","a6977910":"code","8705bc9a":"code","67a14a33":"code","dd2d7241":"code","e283930c":"code","c8e86d8c":"code","edb3b2c9":"code","5c4f63ea":"code","eca19b04":"code","5ff1819b":"code","08383296":"code","9b7aa69f":"code","c79a8661":"code","c616a738":"code","7133f50c":"code","3b8dcd0f":"code","58063a4b":"code","6d119e14":"code","d21a5c46":"code","f85b2e1e":"code","ffcbd67e":"code","e85eae99":"code","5dc78e48":"code","34fdc768":"markdown","a949fe79":"markdown","f8f8b383":"markdown","ad077e2c":"markdown","4acf3f5e":"markdown","63032c70":"markdown","28f68b67":"markdown","bd1d60b6":"markdown","22ffc0e7":"markdown","d0c4bfd2":"markdown","30115d5c":"markdown","a82e39e0":"markdown","cf5befa0":"markdown","a66c2942":"markdown","bc362067":"markdown","7e7b8ea1":"markdown","163b36af":"markdown","8e1ee012":"markdown","668ef7c7":"markdown","ebb7d43d":"markdown","1d8bfaa4":"markdown","6eaa7ee3":"markdown","9fdc44f2":"markdown"},"source":{"fea81c0e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nplt.style.use('fivethirtyeight') # For plots","c6915aee":"pjme = pd.read_csv('..\/input\/PJME_hourly.csv',\n                   index_col=[0], parse_dates=[0]) # We set the index column and know it has dates","30c5b962":"# Color pallete for plotting\ncolor_pal = [\"#F8766D\", \"#D39200\", \"#93AA00\",\n             \"#00BA38\", \"#00C19F\", \"#00B9E3\",\n             \"#619CFF\", \"#DB72FB\"]\npjme.plot(style='.', figsize=(15,5), color=color_pal[0], title='PJM East')\nplt.show()","3abcb764":"def create_features(df, label=None):\n    \"\"\"\n    Creates time series features from datetime index.\n    \"\"\"\n    df = df.copy()\n    df['date'] = df.index\n    df['hour'] = df['date'].dt.hour\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    \n    X = df[['hour','dayofweek','quarter','month','year',\n           'dayofyear','dayofmonth','weekofyear']]\n    if label:\n        y = df[label]\n        return X, y\n    return X\n\nX, y = create_features(pjme, label='PJME_MW')\n\nfeatures_and_target = pd.concat([X, y], axis=1)","1c3dc5da":"# See our features and target\nfeatures_and_target.head()","176bdf2d":"sns.pairplot(features_and_target.dropna(),\n             hue='hour',\n             x_vars=['hour','dayofweek',\n                     'year','weekofyear'],\n             y_vars='PJME_MW',\n             height=5,\n             plot_kws={'alpha':0.15, 'linewidth':0}\n            )\nplt.suptitle('Power Use MW by Hour, Day of Week, Year and Week of Year')\nplt.show()","76b09dc2":"split_date = '01-Jan-2015'\npjme_train = pjme.loc[pjme.index <= split_date].copy()\npjme_test = pjme.loc[pjme.index > split_date].copy()","c9b661cd":"# Plot train and test so you can see where we have split\npjme_test \\\n    .rename(columns={'PJME_MW': 'TEST SET'}) \\\n    .join(pjme_train.rename(columns={'PJME_MW': 'TRAINING SET'}),\n          how='outer') \\\n    .plot(figsize=(15,5), title='PJM East', style='.')\nplt.show()","dd5a332d":"# Format data for prophet model using ds and y\npjme_train.reset_index() \\\n    .rename(columns={'Datetime':'ds',\n                     'PJME_MW':'y'}).head()","42f18f99":"# Setup and train model and fit\nmodel = Prophet()\nmodel.fit(pjme_train.reset_index() \\\n              .rename(columns={'Datetime':'ds',\n                               'PJME_MW':'y'}))","6051dc9b":"# Predict on training set with model\npjme_test_fcst = model.predict(df=pjme_test.reset_index() \\\n                                   .rename(columns={'Datetime':'ds'}))","a1173674":"pjme_test_fcst.head()","00adcbc4":"# Plot the forecast\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nfig = model.plot(pjme_test_fcst,\n                 ax=ax)\nplt.show()","4bf5857a":"# Plot the components of the model\nfig = model.plot_components(pjme_test_fcst)","471f915a":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.index, pjme_test['PJME_MW'], color='r')\nfig = model.plot(pjme_test_fcst, ax=ax)","a4f0632d":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.index, pjme_test['PJME_MW'], color='r')\nfig = model.plot(pjme_test_fcst, ax=ax)\nax.set_xbound(lower='01-01-2015',\n              upper='02-01-2015')\nax.set_ylim(0, 60000)\nplot = plt.suptitle('January 2015 Forecast vs Actuals')","73fe1d73":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.index, pjme_test['PJME_MW'], color='r')\nfig = model.plot(pjme_test_fcst, ax=ax)\nax.set_xbound(lower='01-01-2015', upper='01-08-2015')\nax.set_ylim(0, 60000)\nplot = plt.suptitle('First Week of January Forecast vs Actuals')","ea76be97":"mean_squared_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_fcst['yhat'])","12846543":"mean_absolute_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_fcst['yhat'])","b39a487a":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\nmean_absolute_percentage_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_fcst['yhat'])","5d084d66":"from pandas.tseries.holiday import USFederalHolidayCalendar as calendar\n\ncal = calendar()\ntrain_holidays = cal.holidays(start=pjme_train.index.min(),\n                              end=pjme_train.index.max())\ntest_holidays = cal.holidays(start=pjme_test.index.min(),\n                             end=pjme_test.index.max())","da5e4068":"# Create a dataframe with holiday, ds columns\npjme['date'] = pjme.index.date\npjme['is_holiday'] = pjme.date.isin([d.date() for d in cal.holidays()])\nholiday_df = pjme.loc[pjme['is_holiday']] \\\n    .reset_index() \\\n    .rename(columns={'Datetime':'ds'})\nholiday_df['holiday'] = 'USFederalHoliday'\nholiday_df = holiday_df.drop(['PJME_MW','date','is_holiday'], axis=1)\nholiday_df.head()","21d76ba3":"holiday_df['ds'] = pd.to_datetime(holiday_df['ds'])","a6977910":"# Setup and train model with holidays\nmodel_with_holidays = Prophet(holidays=holiday_df)\nmodel_with_holidays.fit(pjme_train.reset_index() \\\n                            .rename(columns={'Datetime':'ds',\n                                             'PJME_MW':'y'}))","8705bc9a":"# Predict on training set with model\npjme_test_fcst_with_hols = \\\n    model_with_holidays.predict(df=pjme_test.reset_index() \\\n                                    .rename(columns={'Datetime':'ds'}))","67a14a33":"fig2 = model_with_holidays.plot_components(pjme_test_fcst_with_hols)","dd2d7241":"mean_squared_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_fcst_with_hols['yhat'])","e283930c":"mean_absolute_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_fcst_with_hols['yhat'])","c8e86d8c":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\nmean_absolute_percentage_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_fcst_with_hols['yhat'])","edb3b2c9":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.index, pjme_test['PJME_MW'], color='r')\nfig = model.plot(pjme_test_fcst, ax=ax)\nax.set_xbound(lower='07-01-2015', upper='07-7-2015')\nax.set_ylim(0, 60000)\nplot = plt.suptitle('Week of July 4th Forecast vs Actuals non-Holiday Model')","5c4f63ea":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.index, pjme_test['PJME_MW'], color='r')\nfig = model.plot(pjme_test_fcst_with_hols, ax=ax)\nax.set_xbound(lower='07-01-2015', upper='07-7-2015')\nax.set_ylim(0, 60000)\nplot = plt.suptitle('Week of July 4th Forecast vs Actuals Holiday Model')","eca19b04":"jul4_test = pjme_test.query('Datetime >= 20160407 and Datetime < 20160408')\njul4_pred = pjme_test_fcst.query('ds >= 20160407 and ds < 20160408')\njul4_pred_holiday_model = pjme_test_fcst_with_hols.query('ds >= 20160407 and ds < 20160408')","5ff1819b":"mean_absolute_error(y_true=jul4_test['PJME_MW'],\n                   y_pred=jul4_pred['yhat'])","08383296":"mean_absolute_error(y_true=jul4_test['PJME_MW'],\n                   y_pred=jul4_pred_holiday_model['yhat'])","9b7aa69f":"holiday_list = holiday_df['ds'].tolist()","c79a8661":"hols_test = pjme_test.query('Datetime in @holiday_list')\nhols_pred = pjme_test_fcst.query('ds in @holiday_list')\nhols_pred_holiday_model = pjme_test_fcst_with_hols.query('ds in @holiday_list')","c616a738":"mean_absolute_error(y_true=hols_test['PJME_MW'],\n                   y_pred=hols_pred['yhat'])","7133f50c":"mean_absolute_error(y_true=hols_test['PJME_MW'],\n                   y_pred=hols_pred_holiday_model['yhat'])","3b8dcd0f":"holiday_df['date'] = holiday_df['ds'].dt.date\n\nfor hol, d in holiday_df.groupby('date'):\n    holiday_list = d['ds'].tolist()\n    hols_test = pjme_test.query('Datetime in @holiday_list')\n    if len(hols_test) == 0:\n        continue\n    hols_pred = pjme_test_fcst.query('ds in @holiday_list')\n    hols_pred_holiday_model = pjme_test_fcst_with_hols.query('ds in @holiday_list')\n    non_hol_error = mean_absolute_error(y_true=hols_test['PJME_MW'],\n                   y_pred=hols_pred['yhat'])\n    hol_model_error = mean_absolute_error(y_true=hols_test['PJME_MW'],\n                       y_pred=hols_pred_holiday_model['yhat'])\n    diff = non_hol_error - hol_model_error\n    print(f'Holiday: {hol:%B %d, %Y}:    \\n MAE (non-holiday model): {non_hol_error:0.1f} \\n MAE (Holiday Model): {hol_model_error:0.1f} \\n Diff {diff:0.1f}')","58063a4b":"ax = pjme_test_fcst.set_index('ds')['yhat'].plot(figsize=(15, 5),\n                                                 lw=0,\n                                                 style='.')\npjme_test['PJME_MW'].plot(ax=ax,\n                          style='.',\n                          lw=0,\n                          alpha=0.2)\nplt.legend(['Forecast','Actual'])\nplt.title('Forecast vs Actuals')\nplt.show()","6d119e14":"ax = pjme_train.plot(style='.',\n                     figsize=(15,5),\n                     color=color_pal[5],\n                     title='PJME_MW with bad data highlighted',\n                     xlim=('01-01-2012','01-01-2013')\n                    )\npjme_train.query('PJME_MW < 19000').plot(style='.',\n                                             figsize=(15,5),\n                                             color=color_pal[0],\n                                             ax=ax)\nax.legend().set_visible(False)\nplt.show()","d21a5c46":"pjme_train.plot(figsize=(15, 5))\nplt.show()","f85b2e1e":"ax = pjme_train.plot(style='.',\n                     figsize=(15,5),\n                     color=color_pal[5],\n                     title='PJME_MW with bad data highlighted',\n                     xlim=('10-29-2012','11-01-2012'),\n                     ylim=(10000, 31000)\n                    )\npjme_train.query('PJME_MW < 19000').plot(style='.',\n                                             figsize=(15,5),\n                                             color=color_pal[0],\n                                             ax=ax)\nax.legend().set_visible(False)\nplt.show()","ffcbd67e":"# Clean Data\npjme_train['PJME_MW_clean'] = pjme_train['PJME_MW']\npjme_train.loc[pjme_train['PJME_MW'] < 19000, 'PJME_MW_clean'] = np.nan\n\n# Train model on clean data\nmodel = Prophet()\nmodel.fit(pjme_train.reset_index() \\\n              .rename(columns={'Datetime':'ds',\n                               'PJME_MW_clean':'y'})\n         )\n\n# Predict on training set with clean model\npjme_test_fcst_clean = model.predict(df=pjme_test.reset_index() \\\n                                   .rename(columns={'Datetime':'ds'}))","e85eae99":"mse_clean = mean_squared_error(y_true=pjme_test['PJME_MW'],\n                               y_pred=pjme_test_fcst_clean['yhat']\n                              )\nmae_clean = mean_absolute_error(y_true=pjme_test['PJME_MW'],\n                                y_pred=pjme_test_fcst_clean['yhat']\n                               )\nmape_clean = mean_absolute_percentage_error(y_true=pjme_test['PJME_MW'],\n                                            y_pred=pjme_test_fcst_clean['yhat'])\nprint(f'Cleaned data model has MSE {mse_clean:0.4f} - MAE {mae_clean:0.4f} - MAPE {mape_clean:0.4f}')","5dc78e48":"ax = pjme_test_fcst_clean.set_index('ds')['yhat'] \\\n    .plot(figsize=(15, 5), lw=0, style='.')\npjme_test['PJME_MW'].plot(ax=ax, style='.', lw=0, alpha=0.2)\nplt.legend(['Forecast','Actual'])\nplt.title('Forecast vs Actuals with Cleaned Model')\nplt.show()","34fdc768":"# Train\/Test Split\nCut off the data after 2015 to use as our validation set. We will train on earlier data.","a949fe79":"# Data Cleaning\n- Data cleaning is a very important part of the forecasting process. If the input data contains garbage values, the forecast will use them when making predictions and could cause serious issues.\n- We notice in the training data that we have some bad measurements where the values are much less. Could these be causing the under forecasting? Lets try removing this bad data.\n\nThis plot shows the bad data highlighted in red.","f8f8b383":"# Compare Models Just for Holiday Dates\nLets plot Forecast model with and without holidays for 4th of July. It does look like the model with holidays is more accurate for this holiday.","ad077e2c":"## Compare Error for just 4th of July\nThe error has gone down for this date.","4acf3f5e":"## Plotting the Features to see trends\n- Power demand has strong daily and seasonal properties.\n- Day of week also seems to show differences in peaks","63032c70":"# EDA\n\nWe will creat some time series features to see how the trends are impacted by day of week, hour, time of year, etc.","28f68b67":"# Identify Error by holiday\n- We can see different holidays respond differently in this model. The model would perform better if we specifically identify holidays instead of lumping them all together as \"USFederalHolidays\"","bd1d60b6":"# Plot Error of Each Forecast\n- We can see that both of our models generalize well, but struggle with peak demand days.\n- Seems to be under forecasting many days.","22ffc0e7":"# Adding Holidays\nNext we will see if adding holiday indicators will help the accuracy of the model. Prophet comes with a *Holiday Effects* parameter that can be provided to the model prior to training. \n\nWe will use the built in pandas `USFederalHolidayCalendar` to pull the list of holidays","d0c4bfd2":"# Error Metrics\n\nOur RMSE error is 43761675  \nOur MAE error is 5181.78  \nOur MAPE error is 16.5%\n\nby comparison in the XGBoost model our errors were significantly less (8.9% MAPE):\n[Check that out here](https:\/\/www.kaggle.com\/robikscube\/hourly-time-series-forecasting-with-xgboost\/)","30115d5c":"After cleaning we see a slight improvement in score compared to the first model. More data cleaning, along with holidays could yield even better results. Give it a try!","a82e39e0":"## Plot Holiday Effect","cf5befa0":"# Single Week of Predictions","a66c2942":"# Error of all Holidays\n- Holiday error has gone up! This is unexpected.","bc362067":"# Data\nThe data we will be using is hourly power consumption data from PJM. Energy consumtion has some unique charachteristics. It will be interesting to see how prophet picks them up.\n\nPulling the `PJM East` which has data from 2002-2018 for the entire east region.","7e7b8ea1":"# Error Metrics with Holidays Added\nSuprisingly the error has gotten worse after adding holidays.","163b36af":"## Predict With Holidays","8e1ee012":"What caused this dip in energy demand? Hurricane Sandy!\nCheck out this wikipedia article: https:\/\/en.wikipedia.org\/wiki\/List_of_major_power_outages#2012\n\n\n**On October 29\u201330, Hurricane Sandy brought high winds and coastal flooding to a large portion of the eastern United States, leaving an estimated 8 million customers without power. The storm, which came ashore near Atlantic City, New Jersey as a Category 1 hurricane, ultimately left scores of homes and businesses without power in New Jersey (2.7 million), New York (2.2 million), Pennsylvania (1.2 million), Connecticut (620,000), Massachusetts (400,000), Maryland (290,000), West Virginia (268,000), Ohio (250,000), and New Hampshire (210,000). Power outages were also reported in a number of other states, including Virginia, Maine, Rhode Island, Vermont, and the District of Columbia.**\n","668ef7c7":"# Compare Forecast to Actuals","ebb7d43d":"# Hourly Time Series Forecasting using Facebook's Prophet\n![](https:\/\/miro.medium.com\/max\/964\/0*tVCene42rgUTNv9Q.png)\n\nIn this notebook we will use facebook's prophet package to forecast hourly energy use. ","1d8bfaa4":"Thanks for reading! I hope you found this tutorial helpful.","6eaa7ee3":"# Look at first month of predictions","9fdc44f2":"# Simple Prophet Model\n- Prophet model expects the dataset to be named a specific way. We will rename our dataframe columns before feeding it into the model."}}