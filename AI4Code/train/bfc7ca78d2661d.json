{"cell_type":{"0d70ae85":"code","688a144e":"code","f802adf0":"code","07eeb781":"code","956f9f18":"code","4f1275a6":"code","9eb719e7":"code","9ee637c7":"code","ad07579f":"code","47e8cc12":"code","dadffd62":"code","3f898152":"code","1ffdddf2":"code","b9bbc7f9":"code","d2f6961e":"code","2e06170f":"code","82692fef":"code","100c56ea":"code","9e886bb3":"code","1267dcdd":"markdown","3bb5bf80":"markdown","3e98b1ab":"markdown","006e3533":"markdown"},"source":{"0d70ae85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling as pp\nimport seaborn as sns\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport matplotlib.font_manager as fm\n\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\nimport plotly.offline as py\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","688a144e":"deal_df = '\/kaggle\/input\/korean-real-estate-transaction-data\/Apart Deal.csv'\ndeal_df = pd.read_csv(deal_df)\ndeal_df = deal_df.rename({'\uc9c0\uc5ed\ucf54\ub4dc':'Area code', '\ubc95\uc815\ub3d9':'Dong', '\uac70\ub798\uc77c':'Trading day', '\uc544\ud30c\ud2b8':'Apartment', '\uc9c0\ubc88':'Lot number', '\uc804\uc6a9\uba74\uc801':'Exclusive area', '\uce35':'Floor', '\uac74\ucd95\ub144\ub3c4':'Year of construction', '\uac70\ub798\uae08\uc561':'Transaction amount'}, axis='columns')\ndeal_df.head(3)","f802adf0":"deal_df.dtypes","07eeb781":"deal_df = deal_df.astype({'Area code':'int',\n                          'Dong':'category',\n                          'Trading day':'datetime64',\n                          'Apartment':'category',\n                          'Exclusive area':'float',\n                          'Floor':'category',\n                          'Year of construction':'int',\n                          'Transaction amount':'int'})\ndeal_df.dtypes","956f9f18":"deal_df.info()","4f1275a6":"deal_df.describe()","9eb719e7":"profiling_report = pp.ProfileReport(deal_df.describe(), title=\"Deal data Profiling Report\")\nprofiling_report","9ee637c7":"# sns.pairplot(deal_df)\n# plt.show()","ad07579f":"# deal_df.hist(bins=50, figsize=(20, 15))","47e8cc12":"trading_group_pyeong = deal_df\ntrading_group_pyeong['Exclusive area'] = pd.DataFrame(np.true_divide(deal_df['Exclusive area'], 3.305785))\n\ntrading_group_pyeong['Trans per Pyeong'] = np.true_divide(trading_group_pyeong['Transaction amount'], trading_group_pyeong['Exclusive area'])\n\ntrading_group_pyeong = trading_group_pyeong.groupby('Trading day', as_index=False).mean()\n\ntrading_group_pyeong = trading_group_pyeong.drop(['Area code', \n                                                  'Exclusive area', \n#                                                   'Floor', \n                                                  'Year of construction',\n                                                  'Transaction amount'], axis=1)\n\ntrading_group_pyeong","dadffd62":"trading_group_mean = deal_df.groupby('Trading day', as_index=False).mean()\ntrading_group_mean = trading_group_mean.drop(['Exclusive area',\n#                                               'Floor',\n                                              'Year of construction',\n                                              'Area code'], axis=1)\ntrading_group_mean.head(3)","3f898152":"trading_group_count = deal_df.groupby('Trading day', as_index=False).count()\ntrading_group_count = trading_group_count.drop(['Area code', \n                                                'Apartment', \n                                                'Lot number', \n                                                'Dong', \n                                                'Exclusive area', \n                                                'Floor', \n                                                'Year of construction'], axis=1)\ntrading_group_count.head(3)","1ffdddf2":"test = trading_group_count\ntest = test.T[:1]\ntest","b9bbc7f9":"# trading_group_count[trading_group_count['Trading day'].notnull()][['Trading day', 'Transaction amount']].drop_duplicates().sort_values(['Trading day'])\n# (['Trading day'].to_datetime())\npd.to_datetime(trading_group_count['Trading day'], format='%y-%m-%d')\n\n# pd.to_datetime(df['date'])","d2f6961e":"fig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=trading_group_mean['Trading day'], y=trading_group_mean['Transaction amount'],\n                    mode='lines',\n                    name='Price'))\nfig.add_trace(go.Scatter(x=trading_group_count['Trading day'], y=trading_group_count['Transaction amount'],\n                    mode='lines',\n                    name='Volume'))\nfig.show()","2e06170f":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=trading_group_pyeong['Trading day'], y=trading_group_pyeong['Trans per Pyeong'],\n                    mode='lines',\n                    name='Trans per Pyeong'))\nfig.show()","82692fef":"# fig = go.Figure()\n# fig = px.scatter(deal_df, x=\"Trading day\", y=\"Transaction amount\", color=\"Area code\",\n#                  size='Exclusive area')\n# fig.show()","100c56ea":"dong_group_mean = deal_df.groupby(['Dong', 'Trading day'], as_index=False).mean()\ndong_group_mean.head(3)","9e886bb3":"convers_data = deal_df[{'Area code'}]\ny = deal_df['Transaction amount']\n\nprint(y.head(3))\nprint(convers_data.head(3))","1267dcdd":"## Load Data","3bb5bf80":"### Change Columns name","3e98b1ab":"## Basic summary of the data","006e3533":"## Change Dtype"}}