{"cell_type":{"697104aa":"code","d419359a":"code","54dfdedb":"code","671338bf":"code","be29ce06":"code","3d8f3cfd":"code","33634055":"code","5e622042":"code","90c827b1":"code","6d2705f7":"code","c8c95f60":"code","b3880321":"code","6008d988":"code","ed6bdc0b":"code","0f449848":"markdown","4dbdb152":"markdown","d23b10c9":"markdown","58290454":"markdown"},"source":{"697104aa":"import tensorflow as tf\ntf.__version__","d419359a":"import os\nimport glob\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mimg\n%matplotlib inline\nimport cv2\n\nfrom os import listdir, makedirs, getcwd, remove\nfrom os.path import isfile, join, abspath, exists, isdir, expanduser\nfrom PIL import Image\nfrom pathlib import Path\nfrom skimage.io import imread\nfrom skimage.transform import resize","54dfdedb":"# Input data files are available in the \"..\/input\/\" directory.\nINPUT_PATH = \"..\/input\/pneumonia-detection\/chest_xray\"\n\n# List the files in the input directory.\nprint(os.listdir(INPUT_PATH))","671338bf":"# list of all the training images\ntrain_normal = Path(INPUT_PATH + '\/train\/NORMAL').glob('*.jpeg')\ntrain_pneumonia = Path(INPUT_PATH + '\/train\/PNEUMONIA').glob('*.jpeg')\n\n# ---------------------------------------------------------------\n# Train data format in (img_path, label) \n# Labels for [ the normal cases = 0 ] & [the pneumonia cases = 1]\n# ---------------------------------------------------------------\nnormal_data = [(image, 0) for image in train_normal]\npneumonia_data = [(image, 1) for image in train_pneumonia]\n\ntrain_data = normal_data + pneumonia_data\n\n# Get a pandas dataframe from the data we have in our list \ntrain_data = pd.DataFrame(train_data, columns=['image', 'label'])\n\n# Checking the dataframe...\ntrain_data.head()","be29ce06":"# Checking the dataframe...\ntrain_data.tail()","3d8f3cfd":"# Shuffle the data \ntrain_data = train_data.sample(frac=1., random_state=100).reset_index(drop=True)\n\n# Checking the dataframe...\ntrain_data.head(10)","33634055":"print(train_data)","5e622042":"# Counts for both classes\ncount_result = train_data['label'].value_counts()\nprint('Total : ', len(train_data))\nprint(count_result)\n\n# Plot the results \nplt.figure(figsize=(8,5))\nsns.countplot(x = 'label', data =  train_data)\nplt.title('Number of classes', fontsize=16)\nplt.xlabel('Class type', fontsize=14)\nplt.ylabel('Count', fontsize=14)\nplt.xticks(range(len(count_result.index)), \n           ['Normal : 0', 'Pneumonia : 1'], \n           fontsize=14)\nplt.show()","90c827b1":"fig, ax = plt.subplots(3, 4, figsize=(20,15))\nfor i, axi in enumerate(ax.flat):\n    image = imread(train_data.image[i])\n    axi.imshow(image, cmap='bone')\n    axi.set_title('Normal' if train_data.label[i] == 0 else 'Pneumonia',\n                  fontsize=14)\n    axi.set(xticks=[], yticks=[])","6d2705f7":"train_data.to_numpy().shape","c8c95f60":"# ---------------------------------------------------------\n#  1. Resizing all the images to 224x224 with 3 channels.\n#  2. Then, normalize the pixel values.  \n# ---------------------------------------------------------\ndef data_input(dataset):\n    # print(dataset.shape)\n    for image in dataset:\n        im = cv2.imread(str(image))\n        im = cv2.resize(im, (224,224))\n        if im.shape[2] == 1:\n            # np.dstack(): Stack arrays in sequence depth-wise \n            #              (along third axis).\n            # https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.dstack.html\n            im = np.dstack([im, im, im])\n        \n        # ----------------------------------------------------------\n        # cv2.cvtColor(): The function converts an input image \n        #                 from one color space to another. \n        # [Ref.1]: \"cvtColor - OpenCV Documentation\"\n        #     - https:\/\/docs.opencv.org\/2.4\/modules\/imgproc\/doc\/miscellaneous_transformations.html\n        # [Ref.2]: \"Python\u8ba1\u7b97\u673a\u89c6\u89c9\u7f16\u7a0b- \u7b2c\u5341\u7ae0 OpenCV\" \n        #     - https:\/\/yongyuan.name\/pcvwithpython\/chapter10.html\n        # ----------------------------------------------------------\n        x_image = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)\n        \n        # Normalization\n        x_image = x_image.astype(np.float32)\/255.\n        return x_image","b3880321":"# Import training dataset...\nx_train, y_train = ([data_input(train_data.iloc[i][:]) for i in range(len(train_data))], \n                    [train_data.iloc[i][1] for i in range(len(train_data))])\n\n# Convert the list into numpy arrays\nx_train = np.array(x_train)\ny_train = np.array(y_train)\n    \nprint(\"Total number of validation examples: \", x_train.shape)\nprint(\"Total number of labels:\", y_train.shape)","6008d988":"x_train[0]","ed6bdc0b":"y_train","0f449848":"# **Data Preprocessing for Pneumonia Detection**\n2020\/02\/26\n+ \u672c\u7bc4\u4f8b\u53ea\u4ecb\u7d39\u5982\u4f55\u5c07 \"Chest_Xray\" \u5f71\u50cf\u8cc7\u6599\u532f\u5165\uff0c\u4e26\u4fee\u6539\u3001\u7d71\u4e00\u5176\u5f71\u50cf\u5c3a\u5bf8\u70ba (224, 224, 3)\u3002\n+ \u7531\u65bc\u8cc7\u6599\u532f\u5165\u5340\u5206\u70ba train\u3001test \u548c val \u4e09\u500b\u90e8\u5206\uff1b\u6b64\u8655\u53ea\u5c55\u793a\u5982\u4f55\u532f\u5165 train \u8cc7\u6599\u96c6\uff0c\u5176\u9918\u4e8c\u90e8\u5206\u53ef\u4ee5\u6bd4\u7167\u8655\u7406\u3002","4dbdb152":"## Data Preprocessing","d23b10c9":"+ ### File Directory\n       +-- input \n             +-- pneumonia-detection\n                           +-- chest_xray\n                                   +-- test\n                                         +-- NORMAL\n                                         +-- PNEUMONIA\n                                   +-- train\n                                         +-- NORMAL\n                                         +-- PNEUMONIA                   \n                                   +-- val\n                                         +-- NORMAL\n                                         +-- PNEUMONIA                                           ","58290454":"### Import Training Datasets"}}