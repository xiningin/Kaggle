{"cell_type":{"dcf02324":"code","8d2f3138":"code","0e7ef666":"code","8a70ba33":"code","45b10f0c":"code","20ab8270":"code","b3731116":"code","e17d9059":"code","e0a581a2":"code","588666df":"code","7f62582b":"code","9eab7ad9":"code","ac4ebae4":"code","8c826a79":"code","3a8495d0":"code","92a68c2e":"code","66d9c141":"code","84477558":"code","77c09f64":"code","5d2ceb67":"code","462da901":"code","60e18e51":"code","b3c914cc":"code","c0aba402":"code","1d52b936":"code","9c556bc3":"code","8cdfdfaa":"code","df1fe680":"code","cf5b32a4":"code","e590d14d":"code","4a80a0c7":"code","3779e090":"code","e6d0552e":"code","ecd79600":"code","3ef35de0":"code","ff044129":"code","575b4dc8":"code","14b35909":"code","f6d3a4e1":"code","c8e06832":"code","239df05d":"code","266ade94":"code","8459a5e0":"code","15165761":"code","d1fb82a5":"code","ab550317":"code","a5ae33c4":"code","242af37e":"code","ad4061dc":"code","794e4db4":"code","de36d05e":"code","a71cecf0":"code","0a040dfc":"code","0b91e349":"code","6793cfae":"markdown","7adce4e0":"markdown","71db3d0f":"markdown","421ce35b":"markdown","3b9cf8e2":"markdown","a8e2dfdd":"markdown","b791672b":"markdown","49f63690":"markdown","296e1f6e":"markdown","a849eafd":"markdown","76c72e59":"markdown","cd04cb64":"markdown","10b2a7a2":"markdown","e0b5dac2":"markdown","69bb4946":"markdown","5a2a67b5":"markdown","4c3c3b3a":"markdown","a51b06a9":"markdown","497847db":"markdown","f7fa9092":"markdown","46f5036c":"markdown","7969134a":"markdown","5b9ae54e":"markdown","d044556d":"markdown","7477a3b8":"markdown","b1cafb78":"markdown","e360abe8":"markdown","9220c5ba":"markdown","a596a4de":"markdown","c59a9639":"markdown","81b7e540":"markdown","8e0a7948":"markdown","82646145":"markdown","a99e7b94":"markdown","89a16721":"markdown","4521aaab":"markdown","5f49aea2":"markdown","2575fa0b":"markdown","e2ffaf3e":"markdown","85ee0c7c":"markdown","39e4a7d5":"markdown","0ed4b1b9":"markdown","250a402b":"markdown","014a54b9":"markdown","e2806094":"markdown","eb1ba254":"markdown","5d975bf8":"markdown","e648330c":"markdown","2d76637e":"markdown","a7f79d87":"markdown","33a4ea16":"markdown","6df05283":"markdown","449ecbca":"markdown","b98d86ef":"markdown","20dfcb23":"markdown","e5f63a17":"markdown","0f925d67":"markdown","b977ee69":"markdown"},"source":{"dcf02324":"import gc\nimport numpy as np\nimport pandas as pd\nimport scipy.ndimage\nimport seaborn as sns\nfrom sklearn.model_selection import cross_val_score\nfrom matplotlib import pyplot as plt","8d2f3138":"plt.rcParams['figure.figsize'] = (12, 8)\nplt.style.use('seaborn-white')","0e7ef666":"cols = ['fare_amount', 'pickup_datetime', 'pickup_longitude',\n       'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude',\n       'passenger_count']\ntrain = pd.read_csv('..\/input\/train.csv', usecols=cols, engine='c')\ntest = pd.read_csv('..\/input\/test.csv', usecols=cols[1:], engine='c')","8a70ba33":"float_cols = ['pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude']\ntrain[float_cols] = np.round(train[float_cols].astype('float16'), 2)\ntest[float_cols] = np.round(test[float_cols].astype('float16'), 2)\ngc.collect()","45b10f0c":"train['year'] = train.pickup_datetime.str[:4].astype('uint16')\ntest['year'] = test.pickup_datetime.str[:4].astype('uint16')\ngc.collect()\n\ntrain['month'] = train.pickup_datetime.str[5:7].astype('uint8')\ntest['month'] = test.pickup_datetime.str[5:7].astype('uint8')\ngc.collect()\n\ntrain['day'] = train.pickup_datetime.str[8:10].astype('uint8')\ntest['day'] = test.pickup_datetime.str[8:10].astype('uint8')\ngc.collect()\n\ntrain['hour'] = train.pickup_datetime.str[11:13].astype('uint8')\ntest['hour'] = test.pickup_datetime.str[11:13].astype('uint8')\ngc.collect()\n\n# train['minute'] = train.pickup_datetime.str[14:16].astype('uint8')\n# test['minute'] = test.pickup_datetime.str[14:16].astype('uint8')\n# gc.collect()\n\n# train['second'] = train.pickup_datetime.str[17:19].astype('uint8')\n# test['second'] = test.pickup_datetime.str[17:19].astype('uint8')\n# gc.collect()\n\ntrain = train.drop('pickup_datetime', axis=1)\ntest = test.drop('pickup_datetime', axis=1)\ngc.collect()","20ab8270":"len(train)","b3731116":"len(test)","e17d9059":"train.head()","e0a581a2":"test.head()","588666df":"# train = train.sample(frac=0.25).reset_index(drop=True)\n# gc.collect()","7f62582b":"Y = train.fare_amount","9eab7ad9":"Y.value_counts().head(10)","ac4ebae4":"from sklearn.metrics import median_absolute_error, make_scorer\nprint('MAE Error (in USD):', median_absolute_error(Y, np.ones_like(Y.values) * 6.5))","8c826a79":"print('MAE Error (in USD):', median_absolute_error(Y, np.ones_like(Y.values) * 4.5))","3a8495d0":"_ = Y.plot.hist(100, color='teal')","92a68c2e":"_ = np.log1p(Y).plot.hist(bins=100, color='teal')","66d9c141":"# Credit: https:\/\/stackoverflow.com\/questions\/8747761\/scipy-lognormal-distribution-parameters\n# commented out due to slowness\n# from scipy.stats import lognorm\n# shape, loc, scale = lognorm.fit(Y.sample(1000000).values, loc=0)\n\nshape, loc, scale = 0.6009456315880513, -0.01272662981718287, 9.165648701197032\nprint('--Log-normal Distribution--')\nprint('\\tmu:', np.log(scale))\nprint('\\tsigma:', shape)\nprint('\\t[linear space \/ in dollars] mu:', scale)\nprint('\\t[linear space \/ in dollars] sigma:', np.exp(shape))","84477558":"_ = np.round(Y[(Y>=0)&(Y<=30)]).astype(int).hist(bins=30, color='teal')","77c09f64":"np.round(Y.describe(), 2)","5d2ceb67":"mean = Y.mean()\nprint('Arithmetic mean:', mean)\nprint('MAE Error (in USD):', median_absolute_error(Y, mean * np.ones_like(Y)))","462da901":"median = Y.median()\nprint('Median:', median)\nprint('MAE Error (in USD):', median_absolute_error(Y, median * np.ones_like(Y)))","60e18e51":"geom_mean = np.expm1(np.log1p(Y).mean())\nprint('Geometric mean:', geom_mean)\nprint('MAE Error (in USD):', median_absolute_error(Y, geom_mean * np.ones_like(Y)))","b3c914cc":"pickup_map = train.groupby(['pickup_longitude', 'pickup_latitude'])['fare_amount'].mean().reset_index()\npickup_map = pickup_map.pivot('pickup_longitude', 'pickup_latitude', 'fare_amount').fillna(0)\npickup_map = pickup_map.loc[pickup_map.index[~np.isinf(pickup_map.index)], \n               pickup_map.columns[~np.isinf(pickup_map.columns)]]\ngc.collect()\n_ = plt.contour(\n    pickup_map.columns, \n    pickup_map.index, \n    np.log1p(pickup_map.values), \n    cmap='viridis')\n_ = plt.colorbar()","c0aba402":"pickup_map = train.groupby(['pickup_longitude', 'pickup_latitude'])['fare_amount'].mean().reset_index()\npickup_map = pickup_map.pivot('pickup_longitude', 'pickup_latitude', 'fare_amount').fillna(0)\npickup_map = pickup_map.loc[pickup_map.index[(~np.isinf(pickup_map.index)) & (pickup_map.index>-76) & (pickup_map.index<-72)], \n               pickup_map.columns[~np.isinf(pickup_map.columns) & (pickup_map.columns>39) & (pickup_map.columns<42.25)]]\ngc.collect()\n_ = plt.contour(\n    pickup_map.columns, \n    pickup_map.index, \n    np.log1p(pickup_map.values), \n    cmap='viridis')\n_ = plt.colorbar()","1d52b936":"train['pickup_central'] = ((train.pickup_longitude>-76) & (train.pickup_longitude<-72) & (train.pickup_latitude>39) & (train.pickup_latitude<42.25)).astype(int)\ntrain.pickup_central.value_counts(True)","9c556bc3":"test['pickup_central'] = ((test.pickup_longitude>-76) & (test.pickup_longitude<-72) & (test.pickup_latitude>39) & (test.pickup_latitude<42.25)).astype(int)\ntest.pickup_central.value_counts(True)","8cdfdfaa":"dropoff_map = train.groupby(['dropoff_longitude', 'dropoff_latitude'])['fare_amount'].mean().reset_index()\ndropoff_map = dropoff_map.pivot('dropoff_longitude', 'dropoff_latitude', 'fare_amount').fillna(0)\ndropoff_map = dropoff_map.loc[dropoff_map.index[~np.isinf(dropoff_map.index)], \n               dropoff_map.columns[~np.isinf(dropoff_map.columns)]]\ngc.collect()\n_ = plt.contour(\n    dropoff_map.columns, \n    dropoff_map.index, \n    np.log1p(dropoff_map.values), \n    cmap='viridis')\n_ = plt.colorbar()","df1fe680":"dropoff_map = train.groupby(['dropoff_longitude', 'dropoff_latitude'])['fare_amount'].mean().reset_index()\ndropoff_map = dropoff_map.pivot('dropoff_longitude', 'dropoff_latitude', 'fare_amount').fillna(0)\ndropoff_map = dropoff_map.loc[dropoff_map.index[(~np.isinf(dropoff_map.index)) & (dropoff_map.index>-76) & (dropoff_map.index<-72)], \n               dropoff_map.columns[~np.isinf(dropoff_map.columns) & (dropoff_map.columns>39) & (dropoff_map.columns<42.25)]]\ngc.collect()\n_ = plt.contour(\n    dropoff_map.columns, \n    dropoff_map.index, \n    np.log1p(dropoff_map.values), \n    cmap='viridis')\n_ = plt.colorbar()","cf5b32a4":"train['dropoff_central'] = ((train.dropoff_longitude>-76) & (train.dropoff_longitude<-72) & (train.dropoff_latitude>39) & (train.dropoff_latitude<42.25)).astype(int)\ntrain.dropoff_central.value_counts(True)","e590d14d":"test['dropoff_central'] = ((test.dropoff_longitude>-76) & (test.dropoff_longitude<-72) & (test.dropoff_latitude>39) & (test.dropoff_latitude<42.25)).astype(int)\ntest.dropoff_central.value_counts(True)","4a80a0c7":"n_train = len(train)\ntrain = train[(train['pickup_central']==1)].reset_index(drop=True)\ntrain = train[(train['dropoff_central']==1)].reset_index(drop=True)\ntrain = train.drop(['pickup_central','dropoff_central'],axis=1)\ngc.collect()\nprint('Remaining:', len(train)\/n_train)","3779e090":"from sklearn.tree import DecisionTreeRegressor\nX = train[['pickup_longitude', 'pickup_latitude']]\nY = train.fare_amount.values\nidx = np.isfinite(X.pickup_longitude) & np.isfinite(X.pickup_latitude) & np.isfinite(Y)\nX = X[idx]\nY = Y[idx]\nprint(cross_val_score(DecisionTreeRegressor(min_samples_split=30000), X, Y))\nm = DecisionTreeRegressor(min_samples_split=30000).fit(X, Y)\nX['prediction'] = np.log1p(m.predict(X))\n_ = X.groupby(['pickup_longitude', 'pickup_latitude']).prediction.mean().reset_index().plot.scatter('pickup_longitude', 'pickup_latitude', c='prediction', s=1, cmap='viridis')\ndel X, Y, m, idx\ngc.collect()","e6d0552e":"X = train[['dropoff_longitude', 'dropoff_latitude']]\nY = train.fare_amount.values\nidx = np.isfinite(X.dropoff_longitude) & np.isfinite(X.dropoff_latitude) & np.isfinite(Y)\nX = X[idx]\nY = Y[idx]\nprint(cross_val_score(DecisionTreeRegressor(min_samples_split=30000), X, Y))\nm = DecisionTreeRegressor(min_samples_split=30000).fit(X, Y)\nX['prediction'] = np.log1p(m.predict(X))\n_ = X.groupby(['dropoff_longitude', 'dropoff_latitude']).prediction.mean().reset_index().plot.scatter('dropoff_longitude', 'dropoff_latitude', c='prediction', s=1, cmap='viridis')\ndel X, Y, m, idx\ngc.collect()","ecd79600":"pickups = train[['pickup_longitude', 'pickup_latitude']].values\ndropoffs = train[['dropoff_longitude', 'dropoff_latitude']].values\ntrain['distance'] = np.sqrt(np.square(pickups - dropoffs).sum(axis=1)).round(5)\ndel pickups, dropoffs\ngc.collect()\n_ = train.groupby('distance').fare_amount.median().reset_index().plot.scatter('distance', 'fare_amount', s=5)","3ef35de0":"pickups = train[['pickup_longitude', 'pickup_latitude']].values\ndropoffs = train[['dropoff_longitude', 'dropoff_latitude']].values\ntrain['distance'] = np.abs(pickups - dropoffs).sum(axis=1).round(5)\ndel pickups, dropoffs\ngc.collect()\n_ = train.groupby('distance').fare_amount.median().reset_index().plot.scatter('distance', 'fare_amount', s=5)","ff044129":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Ridge\nX, Y = train.distance.values, train.fare_amount.values\nidx = np.isfinite(X) & np.isfinite(Y)\nX = X[idx].reshape(-1, 1)\nY = Y[idx]\ngc.collect()\ncross_val_score(Ridge(), X, Y, scoring=make_scorer(median_absolute_error))","575b4dc8":"from sklearn.isotonic import IsotonicRegression\ncross_val_score(IsotonicRegression(3, 140), X.flatten(), Y, scoring=make_scorer(median_absolute_error))","14b35909":"print('[Train] Percentage of rides with 1-6 passengers:', (train.passenger_count.isin(range(1,6))).sum()\/len(train))\nprint('[Test] Percentage of rides with 1-6 passengers:', (test.passenger_count.isin(range(1,6))).sum()\/len(test))","f6d3a4e1":"train.passenger_count = train.passenger_count.clip(1, 6)\ntest.passenger_count = test.passenger_count.clip(1, 6)","c8e06832":"_ = train.groupby('passenger_count').fare_amount.mean().reset_index().plot.scatter('passenger_count', 'fare_amount')","239df05d":"X, Y = train[['passenger_count']].values, train.fare_amount.values\ngc.collect()\ncross_val_score(Ridge(), X, Y, scoring=make_scorer(median_absolute_error))","266ade94":"cross_val_score(IsotonicRegression(3, 140), X.flatten(), Y.flatten(), scoring=make_scorer(median_absolute_error))","8459a5e0":"monthly_fare = train.groupby(['year', 'month']).fare_amount.mean().reset_index()\nmonthly_fare.index = pd.to_datetime(monthly_fare.year.astype(str) + '-' + monthly_fare.month.astype(str).str.zfill(2) + '-01')\ngc.collect()\n_ = monthly_fare.fare_amount.plot()\n_ = [plt.axvline(pd.to_datetime(m), linestyle='dashed', color='skyblue') for m in monthly_fare.index if m.month==1]\n_ = plt.axvspan(pd.to_datetime('2012-08-01'), pd.to_datetime('2012-09-01'), color='pink')","15165761":"train['hike_status'] = 'pre-hike'\ntrain.loc[(train.year >= 2012) & (train.month >= 9), 'hike_status'] = 'post-hike'\n\ntest['hike_status'] = 'pre-hike'\ntest.loc[(test.year >= 2012) & (test.month >= 9), 'hike_status'] = 'post-hike'","d1fb82a5":"train.groupby('hike_status').fare_amount.median()","ab550317":"years = [2009, 2010, 2011, 2012, 2013, 2014, 2015]\nfor y in years:\n    year_data = train[train.year==y].reset_index(drop=True).groupby('month').fare_amount.mean().reset_index()\n    year_data.fare_amount.plot.line(marker='.')\n    gc.collect()\n_ = plt.xticks(range(12), ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n_ = plt.axvspan(-0.5, 2.5, color='pink')\n_ = plt.legend(years)","a5ae33c4":"train['fare_season'] = 'high fare season'\ntrain.loc[train.month <= 3, 'fare_season'] = 'low fare season'\n\ntest['fare_season'] = 'high fare season'\ntest.loc[test.month <= 3, 'fare_season'] = 'low fare season'","242af37e":"train.groupby('fare_season').fare_amount.median()","ad4061dc":"hourly_fare = train.groupby('hour').fare_amount.mean().reset_index()\n# UTC time adjustment to NYC (GMT-4)\nhourly_fare.hour -= 4\nhourly_fare.hour %= 24\nhourly_fare = hourly_fare.sort_values('hour').reset_index(drop=True)\ngc.collect()\n_ = hourly_fare.fare_amount.plot.line(marker='.')\nhours = ['12mn'] + [str(i) + 'am' for i in range(1,12)] + ['12nn'] + [str(i) + 'pm' for i in range(1,12)]\n_ = plt.xticks(range(24), hours)\n_ = plt.axhline(11.5, color='pink', linestyle='dashed')\n_ = plt.axhline(11, color='pink', linestyle='dashed')","794e4db4":"hours_high = set([0, 1, 2, 10, 11, 12, 13, 18])\nhours_low = set([3, 4, 5, 6, 17, 19, 20])\n\ntrain['hourly_seasonality'] = 'normal'\ntrain.loc[(train.hour-4).isin(hours_high), 'hourly_seasonality'] = 'peak'\ntrain.loc[(train.hour-4).isin(hours_low), 'hourly_seasonality'] = 'off-peak'\ngc.collect()\n\ntest['hourly_seasonality'] = 'normal'\ntest.loc[(test.hour-4).isin(hours_high), 'hourly_seasonality'] = 'peak'\ntest.loc[(test.hour-4).isin(hours_low), 'hourly_seasonality'] = 'off-peak'\ngc.collect()","de36d05e":"train.groupby('hourly_seasonality').fare_amount.mean().sort_values(ascending=False)","a71cecf0":"# factors = [\n#     'passenger_count',\n#     'fare_season',\n#     'hike_status',\n#     'hourly_seasonality',\n# ]\n# train['segment'] = train[factors].astype(str).T.apply(lambda x: ':'.join(x))\n# gc.collect()","0a040dfc":"# train.segment.value_counts()","0b91e349":"# segments = sorted(train.segment.unique())\n# scores = {}\n# for segment in segments:\n#     X = train[train.segment == segment]['distance'].values.flatten()\n#     Y = train[train.segment == segment]['fare_amount'].values.flatten()\n#     idx = np.isfinite(X) & np.isfinite(Y)\n#     X = X[idx]\n#     Y = Y[idx]\n#     cv_score = cross_val_score(IsotonicRegression(out_of_bounds='clip'), X, Y, scoring=make_scorer(median_absolute_error))\n#     scores[segment] = cv_score.mean()\n#     print(segment, cv_score)\n#     gc.collect()","6793cfae":"*Euclidean distance exhibits moderate heteroskedasticity (bad):*","7adce4e0":"### [Key Insight] A monotonic piecewise relationship exists between passenger and fare amount","71db3d0f":"### [Key Insight] Focus on central location; disregard location outliers\n*Since both pick-ups and drop-offs are concentrated in the central for both train and test sets, we can focus only on the central for the rest of the analysis*","421ce35b":"# D. Predictive Modelling","3b9cf8e2":"### [Key Insight] Fare amounts are distributed log-normally:","a8e2dfdd":"*For the test set, all drop-offs are in the central:*","b791672b":"### [Key Insight] 98% of rides have one to six passengers","49f63690":"## A4. [Test] First few rows","296e1f6e":"### [Key Insight] Taxi fare hike on September 2012 (<a href=\"https:\/\/www.nytimes.com\/2012\/09\/04\/nyregion\/new-york-taxis-to-start-charging-increased-rates.html\">click here to go to related news article<\/a>):","a849eafd":"# A. Preview","76c72e59":"*85 cents increase in mean fare from off-peak to peak hours:*","cd04cb64":"*Manhattan distance exhibits very high homoskedasticity (very good):*","10b2a7a2":"### [Key Insight] Peak and off-peak hours\n> **Higher fares**<br>\n> - 12mn - 2am (from bars)<br>\n> - 10am - 1pm (commute to work)<br>\n> - 6pm (commute back home)\n\n> **Lower fares:**<br>\n> - 3am - 6am (unholy hours)\n> - 5pm (just finishing work)\n> - 7pm - 8pm (everyone having dinner)","e0b5dac2":"*General statistics:*","69bb4946":"*A linear regression yields a CV MAE score of 4.56:*","5a2a67b5":"*Median USD 1.40 dollar increase post-hike:*","4c3c3b3a":"*Passenger count vs. mean fare amount:*","a51b06a9":"*Mean fare at each rounded pickup long-lat pair:*","497847db":"*Round longitude and latitudes - higher precision might result in better accuracy:*","f7fa9092":"# C. Feature Analysis","46f5036c":"## C3. Number of passengers","7969134a":"*Using the second mode as general prediction:*","5b9ae54e":"*An isotonic regression yields a CV MAE score of 3.7:*","d044556d":"*Using the geometric mean as general prediction:*","7477a3b8":"## A3. [Train] First few rows","b1cafb78":"### [Key Insight] An almost-linear relationship exists between Manhattan distance and fare amount","e360abe8":"## C1. Pick-up and drop-off locations","9220c5ba":"*Log histogram:*","a596a4de":"### [Key Insight] Low-fare season: rides on January, February and March have lower fares than average:","c59a9639":"## A2. [Test] Row count","81b7e540":"## C2. Distances between pickup and dropoff","8e0a7948":"*Median 40 cent decrease in low-fare season:*","82646145":"*Histogram:*","a99e7b94":"*Using the mean as general prediction:*","89a16721":"*An isotonic regression yields a CV MAE score of 2.59:*","4521aaab":"*[Zoom-in at central] Mean fare at each rounded pickup long-lat pair:*","5f49aea2":"*Rounded integer histogram (0 to 30 dollars):*","2575fa0b":"*98% of drop-offs are in the central:*","e2ffaf3e":"*Monthly mean fare amount (skyblue lines = start of year; pink highlight = fare hike):*","85ee0c7c":"## B1. Top value frequencies","39e4a7d5":"*Using the median as general prediction:*","0ed4b1b9":"*For the test set, all pickups are in the central:*","250a402b":"*Monthly average fare amount - compared yearly (pink highlight has lower fare amounts):*","014a54b9":"*Ridge regression yields a CV MAE score of 2.64:*","e2806094":"### [Key Insight] Some sections of pick-up\/drop-off locations have higher fare rates\n*A decision tree can be used to determine these sections:*","eb1ba254":"# B. Target Analysis","5d975bf8":"## D1. Isotonic Regression per segment (TODO)\n*Isotonic regression will most likely fare well because of the almost-linear relationship between Manhattan distance and taxi fare.*<br>\n*Also, the isotonic regression is done in segments because the isotonic relationships are heterogeneous for each segment.*\n\nSegments are based on the combination of the following factors:\n- passenger count\n- fare season\n- hike status\n- hourly seasonality","e648330c":"## B2. Histograms","2d76637e":"*[Zoom-in at central] Mean fare at each rounded pickup long-lat pair:*","a7f79d87":"*Using the mode as general prediction we get an error of 2.4 dollars:*","33a4ea16":"## B3. Statistics","6df05283":"*Mean fare at each rounded pickup long-lat pair:*","449ecbca":"## A1. [Train] Row count","b98d86ef":"*98% of pickups are in the central:*","20dfcb23":"## A5. Sampling\n*Train row count is too high; take only 25% uniform random sample of the data:*","e5f63a17":"# NYC Taxi Fares: Exploration, Insights, Models\n*By: Ian Chu Te (dinosaur)*\n<br\/>\n<img style=\"height:300px; margin-left:0;\" src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/ef\/NYC_Taxi_Ford_Crown_Victoria.jpg\"\/>\n\n## Key Insights:\n### 1. Taxi fares are distributed log-normally\n> **Log-normal distribution parameters (MLE fit - 1M samples):**<br>\n> - &mu;: 2.21<br>\n> - &sigma;: 0.60<br>\n\n> **Parameters mapped back to original dollar space:**\n> - exp(&mu;): USD 9.17<br>\n> - exp(&sigma;): USD 1.82\n\n### 2. Overwhelming majority of rides (98%) have pick-up and drop-off points from and to a specific central location\n> **Central Location:**<br>\n> - Longitude: from -76 to -72<br>\n> - Latitude: from 39 to 42.25<br>\n\n### 3. Some sections of pick-up\/drop-off locations have higher fare rates\n\n### 4. An almost-linear relationship exists between Manhattan distance from pick-up to drop-off and fare amount\n>**Linear Models CV-MAE:**<br>\n> - Ridge Regression: 2.85<br>\n> - Isotonic Regression: 2.59\n\n### 5. Overwhelming majority of rides (98%) have one to six passengers\n> **Breakdown:**<br>\n> - 1 passenger: 69%<br>\n> - 2 passengers: 14%<br>\n> - 3 passengers: 4%<br>\n> - 4 passengers 2%<br>\n> - 5 passengers: 7%<br>\n> - 6 passengers: 2%\n\n### 6. A piecewise-linear relationship exists between number of passengers and fare amount\n>**Linear Model CV-MAE:**<br>\n> - Ridge Regression: 4.56<br>\n> - Isotonic Regression: 3.7\n\n### 7. Massive taxi fare hike on September 2012 (<a href=\"https:\/\/www.nytimes.com\/2012\/09\/04\/nyregion\/new-york-taxis-to-start-charging-increased-rates.html\">click here to go to related news article<\/a>)\n> - Median fare increase: USD 1.40\n\n### 8. Low-fare season: rides on January, February and March have lower fares than rest of the months\n> - Median fare decrease: USD 0.40\n\n### 9. Peak and off-peak hours\n> Mean fare increase: USD 0.85\n\n> **Peak hours:**<br>\n> - 12mn - 2am (from bars)<br>\n> - 10am - 1pm (commute to work)<br>\n> - 6pm (commute back home)\n\n> **Off-peak hours:**<br>\n> - 3am - 6am (unholy hours)<br>\n> - 5pm (just finishing work)<br>\n> - 7pm - 8pm (everyone having dinner)<br><br>\n\n","0f925d67":"## C4. Pickup Date & Time","b977ee69":"*Prepare date features:*"}}