{"cell_type":{"5e4f1980":"code","b1e3228e":"code","5fc68331":"code","5112432a":"code","e05b3362":"code","0fc2feab":"code","25181f92":"code","cc1d2ae9":"code","2d353fa2":"code","faaf13d1":"code","b9ea79d4":"code","60c897b1":"markdown","b71f58d7":"markdown","cab765fd":"markdown","017aac0b":"markdown","b0f2b978":"markdown","5520ed0d":"markdown","14563afc":"markdown","4fe34020":"markdown","1eb242d8":"markdown","ce7b5f79":"markdown","54fc86af":"markdown"},"source":{"5e4f1980":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport xlrd\n\npd.set_option(\"display.max.columns\", None)\n \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1e3228e":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","5fc68331":"pip install sweetviz","5112432a":"import sweetviz as sv\ndata_analyst_report = sv.analyze(df_train)\ndata_analyst_report.show_html('Analyst.html')","e05b3362":"from IPython.display import IFrame\nIFrame(src = \"Analyst.html\",width=1000,height=600)","0fc2feab":"report_comparison = sv.compare([df_train, \"Train\"], [df_test, \"Test\"], \"Survived\")\nreport_comparison.show_html(\"report_comparison.html\") \n# Not providing a filename will default to SWEETVIZ_REPORT.html","25181f92":"from IPython.display import IFrame\nIFrame(src = \"report_comparison.html\",width=1000,height=600)","cc1d2ae9":"feature_config = sv.FeatureConfig(skip=\"PassengerId\", force_cat=[\"Ticket\"])\nmy_report_feature = sv.compare([df_train, \"Train\"], [df_test, \"Test\"], \"Survived\", feature_config)\nmy_report_feature.show_html(\"my_report_feature.html\") \n# Not providing a filename will default to SWEETVIZ_REPORT.html","2d353fa2":"from IPython.display import IFrame\nIFrame(src = \"my_report_feature.html\",width=1000,height=600)","faaf13d1":"my_report_compare_intra = sv.compare_intra(df_train, df_train[\"Sex\"] == 'male', [\"Male\", \"Female\"], 'Survived')\nmy_report_compare_intra.show_html(\"my_report_compare_intra.html\") \n# Not providing a filename will default to SWEETVIZ_REPORT.html","b9ea79d4":"from IPython.display import IFrame\nIFrame(src = \"my_report_compare_intra.html\",width=1000,height=600)","60c897b1":"# Install the sweetviz library","b71f58d7":"By running the following line, is gonna take you to a new html page, which has been created & it'll gonna save automatically in the following folder, in which you are running the Code.\ud83d\udcca\n\nSince it is a beta version until today, be prepared to scroll a lot in that IFrame below","cab765fd":"# Compare two datasets\nWe now have 2 dataframes (train and test), and we would like to analyze the target value \u201cSurvived\u201d. \nI want to point out in this case we know the name of the target column in advance, but it is always optional to specify a target column. \n\nWe can generate a report with this line of code:","017aac0b":"#\u00a0Analyze","b0f2b978":"# Do an automatic EDA when disaster strikes\n\nExploratory data analysis (EDA) is an approach to analyzing data sets to summarize their main characteristics, often with visual methods. A statistical model can be used or not, but primarily EDA is for seeing what the data can tell us beyond the formal modeling or hypothesis testing task.\n\nEDA generally takes a lot of time.\nHere is a handcrafted EDA from me with the Titanic datasets - which is still work in progress.\n\n[Handcrafted EDA on Titanic Dataset](https:\/\/www.kaggle.com\/chrisdobbert\/titanic-eda-to-avoid-disaster-work-in-progress)\n\nIn this notebook I will try out a library that gives a quick visualisation from the data. \n**Let's try Python.SweetViz.**\n\n**This is a open source Python library that generates beautiful, high-density visualizations to kickstart EDA (Exploratory Data Analysis) with a single line of code.**\n\nOutput is a fully self-contained HTML application.\nThe system is built around quickly visualizing target values and comparing datasets. \nIts goal is to help quick analysis of target characteristics, training vs testing data, and other such data characterization tasks.\n\n<font color='gray'><em> Note: Sweetviz is in the BETA TESTING PHASE\n    \nCurrently the only rendering supported is to a standalone HTML file, using a \"widescreen\" aspect ratio (i.e. 1080p resolution or wider).\n<\/em><\/font>\n\nHere is a link to the documentation of \n[Sweetviz](https:\/\/github.com\/fbdesignpro\/sweetviz)\n\n","5520ed0d":"The summary shows us the characteristics of both dataframes side-by-side. We can immediately identify that the testing set is roughly half the size of the training set, but that it contains the same features. That legend at the bottom shows us that the training set does contain the \u201cSurvived\u201d target variable, but that the testing set does not.\nNote that Sweetviz will do a best guess at determining the data type of each column, between numerical, category\/boolean and text. These can be overridden, more on that below.\nAssociations\n\nHovering your mouse over the \u201cAssociations\u201d button in the summary will make the Associations graph appear on the right-hand side:","14563afc":"## FeatureConfig: forcing data types, skipping columns\n\nIn many cases, there are \u201clabel\u201d columns that you may not want to analyze (although target analysis can provide insights on the distribution of target values based on labeling). In other cases, you may want to force some values to be marked as categorical even though they are numerical in nature.\n\nTo do all this, simply create a FeatureConfig object and pass it in to the analyze\/compare function. You can specify either a string or a list to kwargs *skip*, *force_cat* and *force_text*:\n","4fe34020":"# There are 3 main functions for creating reports:\n\n* analyze( )\n\n* compare( )\n\n* compare_intra( )","1eb242d8":"# Conclusion\n\nSweetviz provides a lot of information quickly.\nMaybe it is a bit overwhelming.\nUsing Sweetviz gives me a jump-start when I start looking at a new dataset. \n\nEven though I have the feeling that I dive deeper into the datasets, when I create my own handcrafted visualisation and feature overviews.\n\nHere is a link to the documentation of \n[Sweetviz](https:\/\/github.com\/fbdesignpro\/sweetviz)\n\nHere is a link to an article on Medium from the developer [EDA using sweetviz](https:\/\/towardsdatascience.com\/powerful-eda-exploratory-data-analysis-in-just-two-lines-of-code-using-sweetviz-6c943d32f34)\n\nI am curious to hear what you think about this library?","ce7b5f79":"# This is an auto EDA of the Titanic Datasets provided by kaggle.","54fc86af":"# Comparing sub-populations (e.g. Male vs Female)\nEven if you are only looking at a single dataset, it can be very useful to study the characteristics of different subpopulations within that dataset. \n\nTo do so, Sweetviz provides the compare_intra() function. \n\nTo use it, you provide a boolean test that splits the population \n(here we try train[\"Sex\"] == 'male', to get a sense of the different gender populations), and give a name to each subpopulation. "}}