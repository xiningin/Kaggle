{"cell_type":{"e3a8e3f7":"code","3ff36b9c":"code","c46b1917":"code","1e4af317":"code","9166a868":"code","e0d96123":"code","2bc87ef4":"code","3c947530":"code","74f00a7f":"code","5c4a64a1":"code","b02c3e92":"code","8e828280":"code","123ecb68":"code","6b5f54b2":"code","bdbe6c39":"code","275ded20":"code","34f3d739":"code","4026caa5":"code","cf2f48cb":"code","a3caa89a":"code","901de74e":"code","9c7b1b77":"code","1175fd2b":"markdown","508240a1":"markdown","71e7fd0b":"markdown","cbe021b4":"markdown","e65b0284":"markdown","860e9cf4":"markdown","60b44c84":"markdown","eefb68fc":"markdown","1c05ec37":"markdown","eae4501d":"markdown","51db49f3":"markdown","97d6af88":"markdown","fc85c55a":"markdown"},"source":{"e3a8e3f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ff36b9c":"training = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntesting = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","c46b1917":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier","1e4af317":"np.seterr(divide='ignore', invalid='ignore')","9166a868":"remove = ['Name', 'Ticket', 'Cabin']\ntraining = training.drop(remove, axis = 1)\ntraining['Age'] = training['Age'].fillna(training['Age'].mean())\n","e0d96123":"remove = ['Name', 'Ticket', 'Cabin']\ntesting = testing.drop(remove, axis = 1)\ntesting['Age'] = testing['Age'].fillna(testing['Age'].mean())","2bc87ef4":"y = training['Survived']\nX_train, y_train, X, y = train_test_split(training,y,test_size = .25, random_state = 42)","3c947530":"lived=training[training['Survived']==1]\ndied=training[training['Survived']==0]\nage_bins=np.linspace(0,100)\nlived_hist=np.histogram(lived['Age'],bins=age_bins,range=(0,100))\ndied_hist=np.histogram(died['Age'],bins=age_bins,range=(0,100))\nsurv_rates=lived_hist[0]\/(lived_hist[0]+died_hist[0])\nplt.bar(age_bins[:-1],surv_rates, edgecolor = 'black')\nplt.title('Overall mortality rate by age')\nplt.xlabel('Age')\nplt.ylabel('Survival Rate')","74f00a7f":"trainingF=training[training['Sex']=='female']\nlived=trainingF[trainingF['Survived']==1]\ndied=trainingF[trainingF['Survived']==0]\nage_bins=np.linspace(0,100)\nlived_hist=np.histogram(lived['Age'],bins=age_bins,range=(0,100))\ndied_hist=np.histogram(died['Age'],bins=age_bins,range=(0,100))\nsurv_rates=lived_hist[0]\/(lived_hist[0]+died_hist[0])\nplt.bar(age_bins[:-1],surv_rates, edgecolor = 'black')\nplt.title('Female mortality rate by age')\nplt.xlabel('Age')\nplt.ylabel('Survival Rate')\n","5c4a64a1":"trainingM=training[training['Sex']=='male']\nlived=trainingM[trainingM['Survived']==1]\ndied=trainingM[trainingM['Survived']==0]\nage_bins=np.linspace(0,100)\nlived_hist=np.histogram(lived['Age'],bins=age_bins)\ndied_hist=np.histogram(died['Age'],bins=age_bins)\nsurv_rates=lived_hist[0]\/(lived_hist[0]+died_hist[0])\nplt.bar(age_bins[:-1],surv_rates, edgecolor = 'black')\nplt.title('Male mortality rate by age')\nplt.xlabel('Age')\nplt.ylabel('Survival Rate')","b02c3e92":"lived=training[training['Survived']==1]\ndied=training[training['Survived']==0]\nage_bins=np.linspace(0,3)\nlived_hist=np.histogram(lived['Pclass'],bins=age_bins)\ndied_hist=np.histogram(died['Pclass'],bins=age_bins)\nsurv_rates=lived_hist[0]\/(lived_hist[0]+died_hist[0])\nplt.bar(age_bins[:-1],surv_rates, edgecolor = 'black')\nplt.xticks(np.arange(4), ('0','1', '2', '3'))\nplt.ylim(0,1)\nplt.title('Overall mortality rate by class')\nplt.xlabel('Pclass')\nplt.ylabel('Survival Rate')","8e828280":"trainingF=training[training['Sex']=='female']\nlived=trainingF[trainingF['Survived']==1]\ndied=trainingF[trainingF['Survived']==0]\nage_bins=np.linspace(0,3)\nlived_hist=np.histogram(lived['Pclass'],bins=age_bins)\ndied_hist=np.histogram(died['Pclass'],bins=age_bins)\nsurv_rates=lived_hist[0]\/(lived_hist[0]+died_hist[0])\nplt.bar(age_bins[:-1],surv_rates, edgecolor = 'black')\nplt.xticks(np.arange(4), ('0','1', '2', '3'))\nplt.ylim(0,1)\nplt.title('Female mortality rate by class')\nplt.xlabel('Pclass')\nplt.ylabel('Survival Rate')","123ecb68":"trainingM=training[training['Sex']=='male']\nlived=trainingM[trainingM['Survived']==1]\ndied=trainingM[trainingM['Survived']==0]\nage_bins=np.linspace(0,3)\nlived_hist=np.histogram(lived['Pclass'],bins=age_bins)\ndied_hist=np.histogram(died['Pclass'],bins=age_bins)\nsurv_rates=lived_hist[0]\/(lived_hist[0]+died_hist[0])\nplt.bar(age_bins[:-1],surv_rates, edgecolor = 'black')\nplt.xticks(np.arange(4), ('0','1', '2', '3'))\nplt.ylim(0,1)\nplt.title('Male mortality rate by class')\nplt.xlabel('Pclass')\nplt.ylabel('Survival Rate')","6b5f54b2":"sns.histplot(data=training, x='Embarked', hue='Survived', multiple='dodge', stat='count').set_title('Overall Mortality by departure location')","bdbe6c39":"sns.histplot(data=training.loc[training.Sex == 'female'], x='Embarked', hue='Survived', multiple='dodge', stat='count').set_title('Female Mortality by departure location')","275ded20":"sns.histplot(data=training.loc[training.Sex == 'male'], x='Embarked', hue='Survived', multiple='dodge', stat='count').set_title('Male Mortality by departure location')\n","34f3d739":"\nlived=training[training['Survived']==1]\ndied=training[training['Survived']==0]\nage_bins=np.linspace(0,5)\nlived_hist=np.histogram(lived['SibSp'],bins=age_bins)\ndied_hist=np.histogram(died['SibSp'],bins=age_bins)\nsurv_rates=lived_hist[0]\/(lived_hist[0]+died_hist[0])\nplt.bar(age_bins[:-1],surv_rates, edgecolor = 'black')\nplt.xticks(np.arange(6), ('0','1', '2', '3', '4', '5'))\nplt.ylim(0,1)\nplt.title('Overall  mortality rate by siblings')\nplt.xlabel('Pclass')\nplt.ylabel('Survival Rate')","4026caa5":"trainingM=training[training['Sex']=='female']\nlived=trainingF[trainingF['Survived']==1]\ndied=trainingF[trainingF['Survived']==0]\nage_bins=np.linspace(0,5)\nlived_hist=np.histogram(lived['SibSp'],bins=age_bins)\ndied_hist=np.histogram(died['SibSp'],bins=age_bins)\nsurv_rates=lived_hist[0]\/(lived_hist[0]+died_hist[0])\nplt.bar(age_bins[:-1],surv_rates, edgecolor = 'black')\nplt.xticks(np.arange(6), ('0','1', '2', '3', '4', '5'))\nplt.ylim(0,1)\nplt.title('Female mortality rate by siblings')\nplt.xlabel('# of siblings')\nplt.ylabel('Survival Rate')","cf2f48cb":"trainingM=training[training['Sex']=='male']\nlived=trainingM[trainingM['Survived']==1]\ndied=trainingM[trainingM['Survived']==0]\nage_bins=np.linspace(0,5)\nlived_hist=np.histogram(lived['SibSp'],bins=age_bins)\ndied_hist=np.histogram(died['SibSp'],bins=age_bins)\nsurv_rates=lived_hist[0]\/(lived_hist[0]+died_hist[0])\nplt.bar(age_bins[:-1],surv_rates, edgecolor = 'black')\nplt.xticks(np.arange(6), ('0','1', '2', '3', '4', '5'))\nplt.ylim(0,1)\nplt.title('Male mortality rate by siblings')\nplt.xlabel('# of siblings')\nplt.ylabel('Survival Rate')","a3caa89a":"y = training[\"Survived\"]\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Age\"]\nX = pd.get_dummies(training[features])\nX_test = pd.get_dummies(testing[features])\nmodel_lr = LinearRegression()\nmodel_kn = KNeighborsClassifier()\nmodel_dt = DecisionTreeClassifier()\nmodel_sgdc = SGDClassifier()","901de74e":"model_lr_cv = cross_val_score(model_lr, X, y, cv = 100)\nmodel_kn_cv = cross_val_score(model_kn, X, y, cv = 100)\nmodel_dt_cv = cross_val_score(model_dt, X, y, cv = 100)\nmodel_sgdc_cv = cross_val_score(model_sgdc, X, y, cv = 100)\n\n\nprint(model_lr_cv.mean())\nprint(model_kn_cv.mean())\nprint(model_dt_cv.mean())\nprint(model_sgdc_cv.mean())","9c7b1b77":"model_dt.fit(X, y)\npredictions = model_dt.predict(X_test)\noutput = pd.DataFrame({'PassengerId': testing.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\n","1175fd2b":"# **Mortality rate by departure location**","508240a1":"Decision Tree tends to have the highest score, so im gonna use that one.","71e7fd0b":"# **Mortality rate by # of siblings**","cbe021b4":"# **Mortality rate by Class**","e65b0284":"Importing stuff","860e9cf4":"# **EDA**","60b44c84":"Removing feaures from training I thought were useless or less important and filling any missing ages with the mean.","eefb68fc":"Removing feaures from testing I thought were useless or less important and filling any missing ages with the mean.","1c05ec37":"# **Building the models**","eae4501d":"For ignoring divide by 0 errors in some graphs","51db49f3":"# **Mortality rate by age**","97d6af88":"# **Evaluating the data**","fc85c55a":"**Loading the data**"}}