{"cell_type":{"1fdbf458":"code","feaf54bc":"code","82671a23":"code","698d8405":"code","5023da0f":"code","70ce6caa":"code","1aab5cf1":"code","8d89e9ab":"code","85ba2d4c":"code","b662a016":"code","21426133":"code","015e3377":"code","5a6e14ad":"code","2ebf899e":"code","dd7b182b":"code","a8cc775f":"code","835a7742":"code","910ea551":"code","96fc43c7":"code","30fe817e":"code","9e02df0d":"code","129f48a2":"code","a8e5fe22":"code","4bf6d4ad":"code","c490849b":"code","267d81c7":"code","6c85feab":"code","da9b485e":"code","04e798fe":"code","95f4672f":"code","aebde3c3":"code","2dfd1803":"code","18c19562":"code","a46a4c94":"code","9b333d4a":"markdown"},"source":{"1fdbf458":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","feaf54bc":"import pandas as pd","82671a23":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","698d8405":"train.head()","5023da0f":"train.describe()","70ce6caa":"# help(train)","1aab5cf1":"train.dtypes","8d89e9ab":"train.iloc[0:100,0:5]","85ba2d4c":"train.loc[0:100,'Survived']","b662a016":"train","21426133":"train.dropna()","015e3377":"print(len(train['Cabin']) - train['Cabin'].count())\nprint(len(train['Embarked']) - train['Embarked'].count())","5a6e14ad":"train  =  train.drop(['Cabin'],axis = 1)","2ebf899e":"train  =  train.drop(['PassengerId'],axis = 1)","dd7b182b":"train  =  train.drop(['Name'],axis = 1)","a8cc775f":"train  =  train.drop(['Ticket'],axis = 1)","835a7742":"train","910ea551":"print('Survived : ' + str( len(train['Survived']) - train['Survived'].count()) )\nprint('Pclass : ' + str( len(train['Pclass']) - train['Pclass'].count()))\nprint('Sex : ' + str( len(train['Sex']) - train['Sex'].count()))\nprint('Age : ' + str( len(train['Age']) - train['Age'].count()))\nprint('SibSp : ' + str( len(train['SibSp']) - train['SibSp'].count()))\nprint('Parch : ' + str( len(train['Parch']) - train['Parch'].count()))\nprint('Ticket : ' + str( len(train['Ticket']) - train['Ticket'].count()))\nprint('Fare : ' + str( len(train['Fare']) - train['Fare'].count()))\nprint('Embarked : ' + str( len(train['Embarked']) - train['Embarked'].count()))","96fc43c7":"print(train['Age'].mean())","30fe817e":"train['Age'] = train['Age'].fillna(train['Age'].mean())","9e02df0d":"print('Age : ' + str( len(train['Age']) - train['Age'].count()))\n","129f48a2":"train = train.dropna()","a8e5fe22":"train.dtypes","4bf6d4ad":"set(train['Sex'])","c490849b":"Sex_data_dic = {'female':0,'male':1}","267d81c7":"train['Sex'] = train['Sex'].map(Sex_data_dic)","6c85feab":"train.dtypes","da9b485e":"set(train['Sex'])","04e798fe":"set(train['Embarked'])","95f4672f":"Embarked_data_dic = {'C':0, 'Q':1, 'S':2}","aebde3c3":"train['Embarked'] = train['Embarked'].map(Embarked_data_dic)","2dfd1803":"set(train['Embarked'])","18c19562":"train.describe()","a46a4c94":"train.head(10)","9b333d4a":"loc gets rows (or columns) with particular labels from the index.\niloc gets rows (or columns) at particular positions in the index (so it only takes integers)"}}