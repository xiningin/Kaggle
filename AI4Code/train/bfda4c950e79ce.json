{"cell_type":{"3e27b63c":"code","ea61008a":"code","af2b23f9":"code","3fd6be13":"code","6c1a184f":"code","205754b0":"code","2d62104d":"code","79a2a1f2":"code","7d417ce8":"code","6e82dd56":"code","e140edda":"code","04839fca":"code","41525a72":"markdown","d887f90d":"markdown","83e9f65a":"markdown","6b044b33":"markdown","e05933b3":"markdown","e89b3e90":"markdown","d2d2b663":"markdown","c3b037b9":"markdown","5486b3f1":"markdown","8d33de65":"markdown","64b2cd8b":"markdown","6eacf032":"markdown","a0fedaa3":"markdown","d892d0e4":"markdown","7a04282d":"markdown","d98bd15c":"markdown","a518bfa0":"markdown","42fb9f53":"markdown","124acd3f":"markdown","881a86da":"markdown"},"source":{"3e27b63c":"%matplotlib inline\n\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier, forest\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\nfrom IPython.display import display\nimport numpy as np\nimport scipy\nimport re\n\n# Permutation Importance\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\n# Partial Plots\nfrom pdpbox import pdp, get_dataset, info_plots\n\n# Package used to calculate SHAP Values\nimport shap","ea61008a":"dtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }\n\n%time train = pd.read_csv('..\/input\/train.csv', nrows=1000000, usecols=dtypes.keys(), low_memory=False)\n\n#display(train.describe(include='all').T)","af2b23f9":"col = ['EngineVersion', 'AppVersion', 'AvSigVersion', 'OsBuildLab', 'Census_OSVersion']\nfor c in col:\n    for i in range(6):\n        train[c + str(i)] = train[c].map(lambda x: re.split('\\.|-', str(x))[i] if len(re.split('\\.|-', str(x))) > i else -1)\n        try:\n            train[c + str(i)] = pd.to_numeric(train[c + str(i)])\n        except:\n            #print(f'{c + str(i)} cannot be casted to number')\n            pass\n            \ntrain['HasExistsNotSet'] = train['SmartScreen'] == 'ExistsNotSet'\n#In the competition details, a strong time component was indicated. \n#At this point, I am not aware of any columns which show this time component, so lets for now split our validation set based on the index\ndef split_train_val_set(X, Y, n):\n    if n < 1: n=int(len(X.index) * n)\n    return X.iloc[:n], X.iloc[n:], Y.iloc[:n], Y.iloc[n:]\n\n#We prepare the training data by replacing the category variables with the category codes \n#and replacing the nan values in the numerical columns with the median\nfor col, val in train.items():\n    if pd.api.types.is_string_dtype(val): \n        train[col] = val.astype('category').cat.as_ordered()\n        train[col] = train[col].cat.codes\n    elif pd.api.types.is_numeric_dtype(val) and val.isnull().sum() > 0:\n        train[col] = val.fillna(val.median())\n\nX, Y = train.drop('HasDetections', axis=1), train['HasDetections']\nX_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size=0.2, random_state=42)\n#X_train, X_val, Y_train, Y_val = split_train_val_set(X, Y, n=0.1)\nX_train.head(5)\n\n#To be able to test the models rapidly, we create a function to print the scores of the model.\ndef print_score(m):\n    res = [roc_auc_score(m.predict(X_train), Y_train), roc_auc_score(m.predict(X_val), Y_val), \n           m.score(X_train, Y_train), m.score(X_val, Y_val)\n          ]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)\n    \n#As in the fastai course, the rf_samples can be reduced to allow for faster repetition cycles. \n#We also immediately create a reset function to check the model performance on the entire dataset.\ndef set_rf_samples(n):\n    \"\"\" Changes Scikit learn's random forests to give each tree a random sample of\n    n random rows.\n    \"\"\"\n    forest._generate_sample_indices = (lambda rs, n_samples: forest.check_random_state(rs).randint(0, n_samples, n))\n    \ndef reset_rf_samples():\n    \"\"\" Undoes the changes produced by set_rf_samples.\n    \"\"\"\n    forest._generate_sample_indices = (lambda rs, n_samples:\n        forest.check_random_state(rs).randint(0, n_samples, n_samples))\n    \nset_rf_samples(50000)\n","3fd6be13":"train[:5]","6c1a184f":"train.describe()","205754b0":"model = RandomForestClassifier(n_estimators=100, min_samples_leaf=50, max_features=0.5, n_jobs=-1, oob_score=False)\n%time model.fit(X_train, Y_train)\n\nprint_score(model)","2d62104d":"perm = PermutationImportance(model, random_state=1).fit(X_val, Y_val)\neli5.show_weights(perm, feature_names = X_val.columns.tolist())","79a2a1f2":"feat_names = ['AVProductStatesIdentifier', 'AVProductsInstalled', 'AvSigVersion']\n\nfor feat_name in feat_names:\n    pdp_dist = pdp.pdp_isolate(model=model, dataset=X_val, model_features=X_val.columns.tolist(), feature=feat_name)\n    pdp.pdp_plot(pdp_dist, feat_name)\n    plt.show()","7d417ce8":"inter1  =  pdp.pdp_interact(model=model, dataset=X_val, model_features=X_val.columns.tolist(), features=['AVProductStatesIdentifier', 'AVProductsInstalled'])\n\npdp.pdp_interact_plot(pdp_interact_out=inter1, feature_names=['AVProductStatesIdentifier', 'AVProductsInstalled'], plot_type='contour')\nplt.show()","6e82dd56":"row_to_show = 17\ndata_for_prediction = X_val.iloc[row_to_show]  # use 1 row of data here. Could use multiple rows if desired\ndata_for_prediction_array = data_for_prediction.values.reshape(1, -1)\n\nmodel.predict_proba(data_for_prediction_array)","e140edda":"# Create object that can calculate shap values\nexplainer = shap.TreeExplainer(model)\n\n# Calculate Shap values\nshap_values = explainer.shap_values(data_for_prediction)\n\nshap.initjs()\nshap.force_plot(explainer.expected_value[1], shap_values[1], data_for_prediction)","04839fca":"# Calculate shap_values for all of val_X rather than a single row, to have more data for plot.\nshap_values = explainer.shap_values(X_val)\n\n# Make plot. Index of [1] is explained in text below.\nshap.summary_plot(shap_values[1], X_val)","41525a72":"* **AVProductStatesIdentifier** -  ID for the specific configuration of a user's antivirus software \n    * Chances of malware detection considerably increase from a value of ~23000 till ~48000. Thereafter, though chances decrease, these machine are still not as protected as the ones with a value < 23000. Having a value < 23000 for this feature seems ideal for a machine not to be affected by malware\n    * Additional stats : As can be seen in train.describe() above, min value = 6 and max value = 70492. \n    \n* **AVProductsInstalled** - NA in description\n    * Having a value >= 2 lowers prediction of malware detection.\n\n* **AvSigVersion** - Defender state information e.g. 1.217.1014.0 \n    * To be filled in","d887f90d":"<a id=\"3.1\"><\/a> <br>\n### **Permutation Importance**\nPermutation Importance help us understand what features have the biggest impact on predictions","83e9f65a":"<a id=\"3.2\"><\/a> <br>\n### **Partial Plots**\nPartial plots help us understand how a feature affects predictions.","6b044b33":"<a id=\"2\"><\/a> <br>\n## **Train Model**","e05933b3":"<a id=\"1\"><\/a> <br>\n## **Load Data and Feature Engineering**","e89b3e90":"### **Purpose of this notebook** : To gain model insights\n---\n### **Methods used to serve the purpose** : Permutation Importance, Partial Plots and SHAP values\n---\n### **Prerequisites** : Since a model is necessary for doing the above, we'll quickly do feature engineering and train a model based on [this](https:\/\/www.kaggle.com\/harmeggels\/random-forest-feature-importances\/notebook) popular notebook. Credits to this notebook for useful information.\n----","d2d2b663":"This graph shows predictions for any combination of Goals Scored and Distance covered.\n\nWhen AVProductsInstalled >= 2, the impact of AVProductStatesIdentifier on the prediction is not as much as it would have had when AVProductsInstalled < 2","c3b037b9":"The machine is **83.38%** likely to get infected by malware","5486b3f1":"**Feature values causing increased predictions are in pink, and their visual size shows the magnitude of the feature's effect. Feature values decreasing the prediction are in blue**","8d33de65":"### **Notebook contents** \n\n* [Necessary Imports](#0)\n* [Load Data and Feature Engineering](#1)\n* [Train Model](#2)\n* [**Derive Model Insights**](#3)\n    * [**Permutation Importance**](#3.1)\n    * [**Partial Plots**](#3.2)\n    * [**SHAP Values**](#3.3)","64b2cd8b":"**SHAP Summary Plot:** SHAP values all of validation data samples and not just a single row","6eacf032":"### **Please upvote if you find this kernel useful**. ","a0fedaa3":"<a id=\"3\"><\/a> <br>\n## **Derive Model insights**","d892d0e4":"As explained in [this](https:\/\/www.kaggle.com\/theoviel\/load-the-totality-of-the-data) notebook, we set the data types(example : switching from float64 to float32) of variables\/features to reduce memory usage","7a04282d":"<a id=\"3.3\"><\/a> <br>\n### **SHAP Values**\n SHAP values break down a single prediction to show the impact of each feature","d98bd15c":"For now, let us dig more into the top 3 original features(AVProductStatesIdentifier, AVProductsInstalled, AvSigVersion) as indicated by Permutation Importance.","a518bfa0":"Let's also check the interaction between the top 2 features. We'll make use of 2D interactive plots for this.","42fb9f53":"**More to come. Stay tuned!**","124acd3f":"<a id=\"0\"><\/a> <br>\n## **Necessary Imports**","881a86da":"* Q) How in general model insights help?\n* *A) Debugging(ex: leakage problems), better feature engineering , direct future data collection and inform human decision making.*\n---\n\n* Q) How in this Microsoft malware prediction competition does model insights help?\n* *A) Better feature engineering*"}}