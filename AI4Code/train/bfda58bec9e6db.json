{"cell_type":{"c5cf6e53":"code","80f5e33e":"code","8c6f86ef":"code","76027f3f":"code","28cfebee":"code","bb62d912":"code","075ea34c":"code","28021ae9":"code","a3a4a4bd":"code","67042df1":"code","d11f8a39":"code","b5135f4c":"code","ed8062c8":"code","06feeaff":"code","6d70989e":"code","84ec108f":"code","a0b2cf45":"code","76bc86fa":"code","6f4cc3cc":"code","88baa86a":"code","09d70fbe":"code","fc3736c3":"code","ef4f2594":"code","3a8da91f":"code","1f890413":"code","d91cca05":"code","a38eda28":"code","cc76e645":"code","7b6fce54":"code","a62ebb57":"code","3b9739fc":"code","48f99fa0":"code","0476aa0c":"code","d5bef943":"code","6781667d":"code","9b877b36":"code","5d2fef3e":"code","0d9a4ab0":"code","b6db735b":"code","d0095589":"code","aa11b5b1":"code","8f44c1bd":"code","c3ac2213":"code","a5dc8916":"code","81c5fcdf":"code","8a62c586":"code","f20f9c97":"code","bc80f422":"code","9e07cae7":"code","15018b44":"code","06f0c8c1":"code","4553a874":"code","f5747211":"code","8cfa4a94":"code","63c1481e":"code","77b2ff96":"code","84543fa1":"code","d2ae36d6":"code","1039ff92":"code","3629695b":"code","0ab81cdc":"code","7b3ad385":"code","ff0eca7d":"code","49893949":"code","8ce0b051":"code","60e3863b":"code","1344eda2":"code","f10de667":"code","fbe67b33":"code","bfa139d2":"code","43f478be":"markdown","7da6c8a0":"markdown","aeb6fccb":"markdown","15f707d0":"markdown","e352031a":"markdown","818bdd7d":"markdown","d1350d84":"markdown","88ab8618":"markdown","1f5c91f5":"markdown","37886038":"markdown","f4646c4c":"markdown","0888cff1":"markdown","32d6bac5":"markdown","fecaa183":"markdown","790e7b9c":"markdown","6d4b5bab":"markdown","2c4f2b66":"markdown","615a8a57":"markdown","60ba5e90":"markdown","cb9d3c7e":"markdown","4418e5ea":"markdown","b977cf95":"markdown","6caaf2b1":"markdown","104a23fb":"markdown","fd0f81f5":"markdown","4d7cdc03":"markdown","4097c09a":"markdown","528bbbca":"markdown","1e35cbaa":"markdown","aedb893f":"markdown","5ece18d4":"markdown","4309e3cb":"markdown","c60f3edb":"markdown","a610ee2c":"markdown","d264e7a4":"markdown","1c7f764d":"markdown","3c69e144":"markdown","aac45060":"markdown","41b1db31":"markdown","cd7b3d3e":"markdown","18a0d82a":"markdown","f0812d87":"markdown","ffc900b3":"markdown"},"source":{"c5cf6e53":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport sklearn \nimport matplotlib.pyplot as plt\n%matplotlib inline","80f5e33e":"#load in the datafile\nhousing = pd.read_csv('..\/input\/nyc-property-sales\/nyc-rolling-sales.csv')","8c6f86ef":"#how many rows and columns?\nprint(housing.shape)\n\n#print first five rows\nhousing.head()","76027f3f":"#general summary of dataset\nhousing.describe().transpose()","28cfebee":"#drop unnecessary column \nhousing.drop(columns = ['Unnamed: 0'], inplace = True)","bb62d912":"#types of data for each column\nhousing.info()","075ea34c":"# Identify object columns\nprint(housing.select_dtypes(['object']).columns)","28021ae9":"# Identify integer columns\nprint(housing.select_dtypes(['int64']).columns)","a3a4a4bd":"# Convert objects to categorical variables\nobj_cats = ['NEIGHBORHOOD', 'BUILDING CLASS CATEGORY', 'TAX CLASS AT PRESENT',\n       'EASE-MENT', 'BUILDING CLASS AT PRESENT', 'ADDRESS', 'APARTMENT NUMBER',\n       'BUILDING CLASS AT TIME OF SALE']\n\nfor colname in obj_cats:\n    housing[colname] = housing[colname].astype('category')  ","67042df1":"# Convert numeric to categorical variables\nnum_cats = ['BOROUGH', 'BLOCK', 'LOT', 'ZIP CODE',\n            'TAX CLASS AT TIME OF SALE']\n\nfor colname in num_cats:\n    housing[colname] = housing[colname].astype('category')  ","d11f8a39":"housing.info()","b5135f4c":"#getting an error where I cannot convert the object types into integers using astype function\n#convert object type to integer using pd.to_numeric & set errors to 'coerce'; ie. changes to NaN\n\nnumer = ['LAND SQUARE FEET','GROSS SQUARE FEET', 'SALE PRICE']\nfor col in numer: # coerce for missing values\n    housing[col] = pd.to_numeric(housing[col], errors='coerce')","ed8062c8":"# Convert to date object\nhousing['SALE DATE'] = pd.to_datetime(housing['SALE DATE'])","06feeaff":"#check dataframe\nhousing.head()","6d70989e":"#check dtypes\nhousing.info()","84ec108f":"# remove space and add _ character for ease of processing \nhousing.columns = housing.columns.str.replace(' ', '_')","a0b2cf45":"#make column names lowercase for ease of readability and further processing\nhousing.columns= housing.columns.str.lower()\nhousing.columns","76bc86fa":"#create a new column for age of the unit\nhousing['age'] = 2021 - housing['year_built']\n\n#is the building pre or post war?\nhousing['age_category'] = np.where(housing['age']>=76,'Pre-War','Post-War')\n\n# Convert to Category\nhousing['age_category'] = housing['age_category'].astype('category')\n\nhousing","6f4cc3cc":"#set numerical indicators for boroughs as type str to distinguish boroughs  \nhousing['borough'] = housing['borough'].astype(str)\nhousing['borough'] = housing['borough'].str.replace(\"1\", \"Manhattan\")\nhousing['borough'] = housing['borough'].str.replace(\"2\", \"Bronx\")\nhousing['borough'] = housing['borough'].str.replace(\"3\", \"Brooklyn\")\nhousing['borough'] = housing['borough'].str.replace(\"4\", \"Queens\")\nhousing['borough'] = housing['borough'].str.replace(\"5\", \"Staten Island\")","88baa86a":"# Count of missing values\nhousing.isnull().sum()","09d70fbe":"# Percentage of missing values\nhousing.isnull().sum()\/len(housing)*100","fc3736c3":"# Visualize missing values\nfig, ax = plt.subplots(figsize=(8,5))\nsns.set(font_scale=1)\nsns.heatmap(housing.isnull(),yticklabels = False, cbar = False, cmap = 'Greys_r')\nplt.show()","ef4f2594":"# Remove rows missing data\nhousing = housing.dropna()","3a8da91f":"# Recheck the count of missing values\nhousing.isnull().sum()","1f890413":"#convert from scientific notation to describe dataset\nhousing.describe().apply(lambda s: s.apply('{0:.5f}'.format)).transpose()","d91cca05":"#check dataframe where year_built is 0 years\nhousing[housing['year_built']==0]\n","a38eda28":"#check how many cases where year_built is less than 1 \nzero = housing[housing['year_built']==0] #create variable called zero with condition where year_built less than 1\ncount = zero.count() #count the cases of less than 1\n\nprint(count)","cc76e645":"#remove rows where year_built = 0\nhousing = housing[housing['year_built']!=0]","7b6fce54":"housing","a62ebb57":"housing[housing['land_square_feet']==0]","3b9739fc":"housing[housing['gross_square_feet']==0]","48f99fa0":"# Remove outliers of zero gross square feet and land square feet.\nhousing = housing[housing['land_square_feet']!=0]\nhousing = housing[housing['gross_square_feet']!=0]\n\n# Confirm removals\nhousing.describe().apply(lambda s: s.apply('{0:.5f}'.format)).transpose()","0476aa0c":"#simple scatter plot to find potential outliers\nsns.scatterplot(data=housing, x=\"age\", y=\"sale_price\")","d5bef943":"#remove outlier prices\nhousing = housing[housing['sale_price'] <500000000] ","6781667d":"sns.scatterplot(data=housing, x=\"age\", y=\"sale_price\")","9b877b36":"#create distribution plot of housing sale prices below $500,000,000\nplt.figure(figsize = (20,10))\nsns.distplot(housing['sale_price'], kde = True, hist_kws=dict(edgecolor=\"k\"))\n","5d2fef3e":"#create new df where sale_price is below $5 mil. \nnew_housing = housing[housing['sale_price'] <5000000] ","0d9a4ab0":"new_housing.describe().apply(lambda s: s.apply('{0:.5f}'.format)).transpose()","b6db735b":"#check again\nsns.scatterplot(data=new_housing, x=\"age\", y=\"sale_price\")","d0095589":"#create distribution plot of housing sale prices below $500,000,000\nplt.figure(figsize = (20,10))\nsns.distplot(new_housing['sale_price'], kde = True, hist_kws=dict(edgecolor=\"k\"))\n","aa11b5b1":"#create new df where sale_price is not 0 and below $5 mil. \nnew_housing = housing[(housing['sale_price'] <5000000) & (housing['sale_price'] != 0)] ","8f44c1bd":"#check new df again\nnew_housing.describe().apply(lambda s: s.apply('{0:.5f}'.format)).transpose()","c3ac2213":"#quick plots of land_square_feet & gross_square_feet against price. \nsns.scatterplot(data=new_housing, x=\"land_square_feet\", y=\"sale_price\", hue = \"gross_square_feet\")","a5dc8916":"#creates a filter for land_square_feet where over 1,000,000 SF\nland_filt = (new_housing['land_square_feet'] > 1000000)\n\n#creates a filter for land_square_feet where over 1,000,000 SF\ngross_filt = (new_housing['gross_square_feet'] > 1000000)","81c5fcdf":"#check properties with land_square_feet > 1,000,000 SF\nnew_housing[land_filt]","8a62c586":"#check properties with gross_square_feet > 1,000,000 SF\nnew_housing[gross_filt]","f20f9c97":"new_housing = housing[(housing['sale_price'] <5000000) #limit up to $5,000,000 \n                       & (housing['sale_price'] > 1000) #removes all properties less than $1,000\n                       & (housing['residential_units'] < 500) #limit up to 500 units\n                       & (housing['commercial_units'] < 500) #limit up to 500 units\n                       & (housing['land_square_feet'] < housing['gross_square_feet']) #removes instances where land sf is greater than gross sf\n                       & (housing['gross_square_feet'] < 2530) #removes instances where gross sf is greater than 2530 SF\n                       & (housing['gross_square_feet'] > 120)] #removes instances where gross sf is less than 120 SF","bc80f422":"#remove duplicates\nnew_housing.drop_duplicates()","9e07cae7":"#check new df again\nnew_housing.describe().apply(lambda s: s.apply('{0:.5f}'.format)).transpose()","15018b44":"#create distribution plot of property sale prices\nplt.figure(figsize = (20,10))\nsns.distplot(new_housing['sale_price'], kde = True, hist_kws=dict(edgecolor=\"k\"))","06f0c8c1":"#check datatypes\nnew_housing.dtypes","4553a874":"# Identify categorical features again\nnew_housing.select_dtypes(['category']).columns","f5747211":"# #check number of unique values for categorical columns\n\n# neighborhood = len(pd.unique(new_housing['neighborhood']))\n# print('The number of unique neighborhoods:', neighborhood)\n\n# building_cat = len(pd.unique(new_housing['building_class_category']))\n# print('The number of unique building class categories:', building_cat)\n\n# tax_present = len(pd.unique(new_housing['tax_class_at_present']))\n# print('The number of unique tax class at present:', tax_present)\n\n# building_class_present = len(pd.unique(new_housing['building_class_at_present']))\n# print('The number of unique building classifications at present:', building_class_present)\n\n# easement = len(pd.unique(new_housing['ease-ment']))\n# print('The number of unique cases of ease-ment:', easement)\n\n# zipcode = len(pd.unique(new_housing['zip_code']))\n# print('The number of unique zipcodes:', zipcode)\n\n# tax_at_sale = len(pd.unique(new_housing['tax_class_at_time_of_sale']))\n# print('The number of unique tax classes at time of sale:', tax_at_sale)\n\n# building_class_sale = len(pd.unique(new_housing['building_class_at_time_of_sale']))\n# print('The number of unique building classifications at time of sale:', building_class_sale)\n","8cfa4a94":"# Suplots of categorical features v price\nsns.set_style('darkgrid')\nf, axes = plt.subplots(2,2, figsize = (15,15))\n\n#create order variable to plot unique values only\norder_tax = sorted(new_housing['tax_class_at_present'].unique())\norder_class = sorted(new_housing['building_class_category'].unique())\n\n\n#plot of borough category vs price\nsns.boxplot(x = 'borough', y = 'sale_price', data = new_housing, ax = axes[0,0])\naxes[0,0].set_xlabel('Borough')\naxes[0,0].set_ylabel('Sale Price')\naxes[0,0].set_title('Borough vs. Price')\n\n#plot of tax class at present vs price\nsns.boxplot(x = 'tax_class_at_present', y = 'sale_price', data = new_housing, ax = axes[0,1], order = order_tax)\naxes[0,1].set_xlabel('Tax Class at Present')\naxes[0,1].set_ylabel('Sale Price')\naxes[0,1].set_title('Tax Class at Present vs. Price')\n\n#plot of age classification category vs price\nsns.boxplot(x = 'age_category', y = 'sale_price', data = new_housing, ax = axes[1,0])\naxes[1,0].set_xlabel('Pre or Post War')\naxes[1,0].set_ylabel('Sale Price')\naxes[1,0].set_title('Age Category vs. Price')\n\n#plot of building class categories vs price\nsns.boxplot(x = 'building_class_category', y = 'sale_price', data = new_housing, ax = axes[1,1], order = order_class)\naxes[1,1].set_xlabel('Building Class Category')\naxes[1,1].set_ylabel('Sale Price')\naxes[1,1].set_title('Building Class Category vs. Price')\nplt.xticks(rotation=90)\n\nplt.tight_layout()\nplt.show()","63c1481e":"#create new list called 'neighborhood' with top 20 most expensive average sale prices\nfrom collections import Counter\nneighborhood = list(dict(Counter(new_housing.neighborhood).most_common(20)).keys())\n\navg_sale_prices = []\nfor i in neighborhood:\n    avg_price = np.mean(new_housing.sale_price[new_housing.neighborhood == i])\n    avg_sale_prices.append(avg_price)","77b2ff96":"#plot most expensive neighborhoods with highest average property price\nplt.figure(figsize=(15,5))\n\nax = sns.barplot(x= avg_sale_prices, y= neighborhood , ci=None, palette = \"Spectral\")\nax.set_xlabel('Average Property Price')\nax.set_ylabel('Neighborhood')\nplt.title('Average Property Price in the Top 20 Neighborhoods')","84543fa1":"new_housing.dtypes","d2ae36d6":"#plot residential units\nplt.figure(figsize=(10,6))\nsns.boxplot(x='residential_units', y=\"sale_price\", data=new_housing)\nplt.title('Residential Units vs Sale Price')","1039ff92":"#plot commercial units\nplt.figure(figsize=(10,6))\nsns.boxplot(x='commercial_units', y=\"sale_price\", data=new_housing)\nplt.title('Commercial Units vs Sale Price')","3629695b":"#Suplots of numeric features vs sales price\nsns.set_style('darkgrid')\nf, axes = plt.subplots(3,2, figsize = (25,30))\n\n# Plot residential units \naxes[0,0].scatter(x = 'residential_units', y = 'sale_price', data = new_housing, edgecolor = 'b', s = 10)\naxes[0,0].set_xlabel('Residential Units')\naxes[0,0].set_ylabel('Sale Price')\naxes[0,0].set_title('Residential Units vs. Price')\n\n# Plot commercial units \naxes[0,1].scatter(x = 'commercial_units', y = 'sale_price', data = new_housing, edgecolor = 'b', s = 10)\naxes[0,1].set_xlabel('Commercial Units')\naxes[0,1].set_ylabel('Sale Price')\naxes[0,1].set_title('Commercial Units vs. Price')\n\n# Plot land square feet\naxes[1,0].scatter(x = 'land_square_feet', y = 'sale_price', data = new_housing, edgecolor = 'b', s = 10)\naxes[1,0].set_xlabel('Land (SF)')\naxes[1,0].set_ylabel('Sale Price')\naxes[1,0].set_title('Land (SF) vs. Price')\n\n# Plot gross square feet\naxes[1,1].scatter(x = 'gross_square_feet', y = 'sale_price', data = new_housing, edgecolor = 'b', s = 10)\naxes[1,1].set_xlabel('Gross (SF)')\naxes[1,1].set_ylabel('Sale Price')\naxes[1,1].set_title('Gross (SF) vs. Price')\n\n# Plot year built\naxes[2,0].scatter(x = 'year_built', y = 'sale_price', data = new_housing, edgecolor = 'b', s = 10)\naxes[2,0].set_xlabel('Year Built')\naxes[2,0].set_ylabel('Sale Price')\naxes[2,0].set_title('Year Built vs. Price')\n\n# Plot age\naxes[2,1].scatter(x = 'age', y = 'sale_price', data = new_housing, edgecolor = 'b', s = 10)\naxes[2,1].set_xlabel('Age')\naxes[2,1].set_ylabel('Sale Price')\naxes[2,1].set_title('Age vs. Price')\n","0ab81cdc":"#correlation matrix\ncorrmat = new_housing.corr()\nf, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(corrmat, cmap = 'coolwarm', square=True, annot= True, annot_kws={\"size\": 9})\nplt.title('Variable Correlation')","7b3ad385":"new_housing.dtypes","ff0eca7d":"# Split\n# Create features variable \nX = new_housing[['residential_units', 'commercial_units', 'total_units', 'land_square_feet',\n                'gross_square_feet', 'year_built', 'age']]\n\n# Create target variable\ny = new_housing['sale_price']\n\n# Train, test, split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = .20, random_state= 0)","49893949":"# Fit\n# Import model\nfrom sklearn.linear_model import LinearRegression\n\n# Create linear regression object\nregressor = LinearRegression()\n\n# Fit model to training data\nregressor.fit(X_train,y_train)","8ce0b051":"# Predict\n# Predicting test set results\ny_pred = regressor.predict(X_test)","60e3863b":"# Score It\nfrom sklearn import metrics\nprint('MAE:',metrics.mean_absolute_error(y_test,y_pred))\nprint('MSE:',metrics.mean_squared_error(y_test,y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))","1344eda2":"# Calculated R Squared\nprint('R^2 =',metrics.explained_variance_score(y_test,y_pred))","f10de667":"#Actual v predictions scatter\nplt.scatter(y_test, y_pred)","fbe67b33":"#Histogram of the distribution of residuals\nsns.distplot((y_test - y_pred))","bfa139d2":"cdf = pd.DataFrame(data = regressor.coef_, index = X.columns, columns = ['Coefficients'])\ncdf","43f478be":"### Weak Positive Correlation\n* Residential Units and Price\n\n* Total Units and Price\n\n* Gross Square Feet and price\n\n\n### Moderate Positive Correlation\n* Age and Price\n\nAs can be expected, increases in total units or residentail units is positively correlated with total and gross square footage of a property. ","7da6c8a0":"The new dataframe now incldues properties with sale prices not equal to 0 which is great. But there are some other potential outliers within the `land_square_feet` and `gross_square_feet` categories which may influence the other data points. \n\nPlotting these points below confirms a few outliers. \n\nWhat are these properties exactly? I'll create a filter to identify the maximum values for the `land_square_feet` and `gross_square_feet`.","aeb6fccb":"Still a bit crowded, but this gives a better idea of the distribution of sale prices. After removing outliers over \\\\$500,000,000, the sale price variable appears to be normally distributed and skewed to the right with the exception of the most frequent housing sale price approaching $0. \n\nAs explained earlier and as described as part of the dataset, \"many sales occur with a nonsensically small dollar amount: $0 most commonly. These sales are actually transfers of deeds between parties: for example, parents transferring ownership to their home to a child after moving out for retirement.\"\n\nHaving understanding of this, lets further remove the sale of prices where `sale_price` = 0 and further confirm the distribution of sale prices in the NYC housing market. ","15f707d0":"### Interpretting the Coefficients","e352031a":"### Analyze the Residuals","818bdd7d":"Lets remove these crazy outliers for the purposes of this analysis. Lets set a limit of \\\\$500,000,000","d1350d84":"As expected, the median sale price generally increases as residential units increases as well. ","88ab8618":"Even with the removal of housing prices greater than \\\\$500,000,000, there is still a vast amount of other housing units in NYC clustered below the \\\\$5,000,000 price point. ","1f5c91f5":"## Insights\n\n* All boroughs (with the exception of Manhattan) consist of properties with a similar price for properties. Manhattan has the most expensive sale prices with a median sale price at about \\\\$1.7 million. Brooklyn comes in second with a median price at about \\\\$900k, and Queens in third with a median price at about \\\\$800k. The Bronx and Staten Island have median prices around \\\\$500k.\n\n\n* As can be expected, properties identified as Tax Class 2 have the highest median price. Tax Class 2 properties consist of co-ops and condos. \n\n\n* The median price for pre-War properties (built before 1945) are more expensive (about \\\\$300k - \\\\$400k) than properties built post-war. \n\n\n* The most expensive neighborhood average price of a property is Park Slope South followed by Bedford Stuyvesant and Astoria. ","37886038":"There are 8,522 rows where the gross square feet is zero.  \n\nThe Gross Square Feet is defined as the total area of all the floors of a building as measured from the exterior surfaces of the outside walls of the building, including the land area and space within any building or structure on the property. \n\nSimiarly, it is not possible to have a gross square feet area of zero and shall be removed as such. ","f4646c4c":"Overall, the dataset is generally in good shape when it comes to missing values. There are however, missing values for the land (31%) and gross square feet (33%) of the housing units. Additionally, sale prices (17%) are missing. \n\nThis may be explained by the following for the context and content description for the dataset below: \n\n* Many sales occur with a nonsensically small dollar amount: $0 most commonly. These sales are actually transfers of deeds between parties: for example, parents transferring ownership to their home to a child after moving out for retirement.\n\n\n* This dataset uses the financial definition of a building\/building unit, for tax purposes. In case a single entity owns the building in question, a sale covers the value of the entire building. In case a building is owned piecemeal by its residents (a condominium), a sale refers to a single apartment (or group of apartments) owned by some individual.\n\nSince the missing values can be explained by the above notes and to allow for a more complete analysis, I will proceed with dropping the missing values from the housing dataset. ","0888cff1":"Now I want to explore what is the relationship between sale prices and other categorical features. \n\nFirst, what are the categorical features I currently have? ","32d6bac5":"Every one unit increase in:\n\n* Residential Units is associated with a decrease in Sale Price by \\\\$-166237.63\n\n\n* Commercial Units is associated with a decrease in Sale Price by \\\\$-178832.54\n\n\n* Total Units is associated with a increase in Sale Price by \\\\$202497.01\n\n\n* Land Square Foot is associated with a decrease in Sale Price by \\\\$-341.62\n\n\n* Gross Square Foot is associated with a increase in Sale Price by \\\\$506.20\n\n\n* Year Built is associated with a decrease in Sale Price by \\\\$-2307.03\n\n\n* Age is associated with a increase in Sale Price by \\\\$-2307.03\n\n\n\n","fecaa183":"### Check Variable Types","790e7b9c":"Additionally, there are duplicate values as evidenced by the property located at 2655 RICHMOND AVENUE. Lets also remove these values with the `.drop_duplicates` function. ","6d4b5bab":"Simiarly, sale prices for commercial units generally increase as the number of units increase. ","2c4f2b66":"There are currently 84,548 rows or observations in this housing dataset. ","615a8a57":"#### Converting Datatype Variables\n\nI will need to convert the datatypes for the above datatypes to their appropriate classification. Some columns such as `SALE PRICE` is considered an object when it should be an float. And other columns such as `NEIGHBORHOOD` should be a categorical datatype rather than an object. \n\nThis dataset only contains object and integer dtypes. ","60ba5e90":"## Missing Values\n\nTime to check the number of missing values in this dataset. ","cb9d3c7e":"It is very crowded below the \\\\$5,000,000 price point as expected. Lets create a new limitation where the dataset will only include sale prices below \\\\$5,000,000. ","4418e5ea":"# Conclusions","b977cf95":"Based on the condition set for the dataframe where year_built is less than 1, there are 2911 rows\/observations where the year_built for the building is 0 years old. \n\nDouble-checking this below with a variable case condition confirms 2911 rows is correct. ","6caaf2b1":"# Load and Preliminary Explore the Dataset","104a23fb":"# Plots of Numerical Features VS. Sales Price","fd0f81f5":"# Correlation","4d7cdc03":"Lets check the new dataframe again and see if these changes have been made. ","4097c09a":"Finally, I can plot a distribution of the property sale prices!","528bbbca":"There are minimum values of zero for columns that do not make sense. For example, year built has a minimum value of 0. ","1e35cbaa":"## Outliers\n\nSimilarly, lets check other values where land and gross square feet is zero as these may be potential outliers. ","aedb893f":"There are 8,345 rows where the land square feet is zero. \n\nAccording to the definition in the glossary of terms; the Land Square Feet is the land area of the property listed in square feet. Based on this definition, it is not possible to have housing units with a land square feet of zero. ","5ece18d4":"# Linear Regression","4309e3cb":"Upon checking for potentially additional outliers, there is reason to believe that the sale_price has a significant outlier. Creating a simple scatter plot confirms this as we have some crazy property prices with one sale price of over $2 billion dollars!","c60f3edb":"A few interesting things to note once I created filters for the land and gross square feet of properties over 1,000,000 SF. As defined by the glossary of terms, the Gross Square Feet is the **total** area of all the floors of a building as measured from the exterior surfaces of the outside walls of the building, **including the land area** and space within any building or structure on the property. \n\nWhen isolating the above properties, there are results yielding a gross square feet area LESS than the total land square feet area which should not be true. Thus, lets further remove these results as part of the dataframe set.  Further, many outliers exist in the lower and upper bound of the distribution.I will set an upper bound of 75% for the dataset as maximum since 75th percentile of the dataset represents a good cutoff for majority of houses' square feet metrics.\n\nThere are also properties being sold at absurdly low prices (between \\\\$1 - \\\\$500). I'll further limit the dataset to include only properties greater than $1,000. ","a610ee2c":"# Exploratory Data Analysis (EDA) & some more cleaning\n\nWith the new parameter limiting housing prices below \\\\$500,000,000, what does the distribution of the data look like? ","d264e7a4":"## Insights\n\n* There is a slight positive correlation between the gross square footage of a property and the sale price. This should be expected and makes sense if the property is larger in area. \n\n\n* There appears to be a general negative correlation between sale price and when the property was built. Newer properties appear to be cheaper than older properties. ","1c7f764d":"RMSE tells us explicitly how much our predictions deviate, on average, from the actual values in the dataset. In this case, the predicted values are \\\\$512,857.45 away from the actual value.","3c69e144":"# Import Libraries","aac45060":"### Renaming and further organization of the dataset to make my life easier!","41b1db31":"There are now a total of 36,805 observations in the housing dataset. ","cd7b3d3e":"According to the R-squared, 21.9% of the variance in the dependent variable is explained by the model.","18a0d82a":"#### GOAL: The objective of this notebook is to apply exploratory analysis and regression techniques to identify which features affect housing property sales the most in New York City and come to conclusions about the dataset. I also hope to build upon and apply my Python skills in this notebook. ","f0812d87":"# Some Data Cleaning","ffc900b3":"# Plots of Categorical Features VS. Sales Price"}}