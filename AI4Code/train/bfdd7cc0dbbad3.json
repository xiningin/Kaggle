{"cell_type":{"92d77ec5":"code","6f4d2b2f":"code","7f37b01d":"code","960f3654":"code","cd22f7c0":"code","02e1fe0d":"code","f6ed4496":"code","28b458ed":"code","1625bbcf":"code","a9d169dc":"code","dacd8b20":"code","83a07617":"code","f0f4c2c8":"code","3eadc408":"code","682a30d2":"code","6035c59c":"code","230a964e":"code","ab16f3ac":"code","72c67fe3":"code","3c1db9de":"code","e8ac558e":"code","4dad2bce":"code","0f2a88d9":"code","77a456e6":"code","cdcf17ba":"code","42ca2a4f":"code","d719f9b0":"code","4c56d52e":"code","f23e19e6":"code","7ea667ec":"code","e612199c":"code","7986e579":"code","bbf3b105":"code","768ccec3":"code","f014e13b":"code","c76939a3":"code","20058a88":"code","255bbdc7":"code","de7f8735":"code","9c79b491":"markdown","144c02b9":"markdown","962e1edb":"markdown","604b703b":"markdown","36140e42":"markdown","082ebec4":"markdown","6cc95bad":"markdown","2c3417d5":"markdown","de93249e":"markdown","cf0c97d9":"markdown","8681bf3a":"markdown","fb0a9140":"markdown","fbad5988":"markdown"},"source":{"92d77ec5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Data viz. and EDA\nimport matplotlib.pyplot as plt \n%matplotlib inline  \nimport plotly.offline as py\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot, iplot\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)\n\n## For scaling data \nfrom mlxtend.preprocessing import minmax_scaling \n\n# Tensorflow \nimport tensorflow as tf\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f4d2b2f":"data = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")\n","7f37b01d":"# checking missing values if any\ndisplay(data.info(),data.head())","960f3654":"## lets see how many are affected by diabeties \nD = data[data['Outcome'] == 1]\nH = data[data['Outcome'] == 0]\n\n## here I am using graph_obs as I am not able to costimize px. \n\ndef target_count():\n    trace = go.Bar( x = data['Outcome'].value_counts().values.tolist(), \n                    y = ['healthy','diabetic' ], \n                    orientation = 'h', \n                    text=data['Outcome'].value_counts().values.tolist(), \n                    textfont=dict(size=15),\n                    textposition = 'auto',\n                    opacity = 0.5,marker=dict(\n                    color=['lightskyblue', ' indigo'],\n                    line=dict(color='#000000',width=1.5)))\n\n    layout = dict(title =  'Count of affectes females')\n\n    fig = dict(data = [trace], layout=layout)\n    py.iplot(fig)\n\n# --------------- donut chart to show there percentage -------------------- # \n\ndef target_per():\n    trace = go.Pie(labels=['healthy','diabetic' ],values=data['Outcome'].value_counts(),\n                   textfont=dict(size=15),\n                   opacity = 0.5,marker=dict(\n                   colors=['lightskyblue','indigo'],line=dict(color='#000000', width=1.5)),\n                   hole=0.6\n                  )\n    layout = dict(title='Donut chart to see the %age of affected.')\n    fig = dict(data=[trace],layout=layout)\n    py.iplot(fig)","cd22f7c0":"target_count()\ntarget_per()","02e1fe0d":"## As seen earlier there is no null value. However on close inspection we find that null values are filled with '0'\n\ndata[['Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']] = data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']].replace(0,np.NaN)    ","f6ed4496":"## Checking the new null values found.\ndata.isnull().sum()","28b458ed":"# Define missing plot to detect all missing values in dataset\ndef missing_plot(dataset, key) :\n    null_feat = pd.DataFrame(len(dataset[key]) - dataset.isnull().sum(), columns = ['Count'])\n    percentage_null = pd.DataFrame((dataset.isnull().sum())\/len(dataset[key])*100, columns = ['Count'])\n    percentage_null = percentage_null.round(2)\n\n    trace = go.Bar(x = null_feat.index, y = null_feat['Count'] ,opacity = 0.8, text = percentage_null['Count'],  textposition = 'auto',marker=dict(color = '#7EC0EE',\n            line=dict(color='#000000',width=1.5)))\n\n    layout = dict(title =  \"Missing Values (count & %)\")\n\n    fig = dict(data = [trace], layout=layout)\n    py.iplot(fig)\n    ","1625bbcf":"missing_plot(data,'Outcome')","a9d169dc":"## to find the median for filling null values\n\ndef find_median(var):\n    temp = data[data[var].notnull()]\n    temp = data[[var,'Outcome']].groupby('Outcome')[[var]].median().reset_index()\n    return temp","dacd8b20":"def density_plot(var,size_bin):\n    tmp1 = D[var]\n    tmp2 = H[var]\n    \n    hist_data = [tmp1,tmp2]\n    labels = ['Diabeties','Healthy']\n    color = ['skyblue','indigo']\n    fig = ff.create_distplot(hist_data,labels,colors = color,show_hist=True,bin_size=size_bin,curve_type='kde')\n    \n    fig['layout'].update(title = var)\n\n    py.iplot(fig, filename = 'Density plot')\n    ","83a07617":"density_plot('Insulin',0)","f0f4c2c8":"find_median('Insulin')","3eadc408":"## Now we will be filling these values instead of null values\n\ndata.loc[(data['Outcome'] == 0) & (data['Insulin'].isnull()), 'Insulin'] = 102.5\ndata.loc[(data['Outcome'] == 1) & (data['Insulin'].isnull()), 'Insulin'] = 169.5","682a30d2":"# SkinThickness density plot \n\ndensity_plot('SkinThickness',0)","6035c59c":"find_median('SkinThickness')","230a964e":"## Now we will be filling these values instead of null values\n\ndata.loc[(data['Outcome'] == 0) & (data['SkinThickness'].isnull()), 'SkinThickness'] = 27.0\ndata.loc[(data['Outcome'] == 1) & (data['SkinThickness'].isnull()), 'SkinThickness'] = 32.0","ab16f3ac":"density_plot('BloodPressure',0)","72c67fe3":"find_median('BloodPressure')","3c1db9de":"data.loc[(data['Outcome'] == 0) & (data['BloodPressure'].isnull()), 'BloodPressure'] = 27.0\ndata.loc[(data['Outcome'] == 1) & (data['BloodPressure'].isnull()), 'BloodPressure'] = 32.0","e8ac558e":"density_plot('BMI',0)","4dad2bce":"find_median('BMI')","0f2a88d9":"data.loc[(data['Outcome'] == 0) & (data['BMI'].isnull()), 'BMI'] = 30.1\ndata.loc[(data['Outcome'] == 1) & (data['BMI'].isnull()), 'BMI'] = 34.3","77a456e6":"density_plot('Glucose',0)","cdcf17ba":"find_median('Glucose')","42ca2a4f":"data.loc[(data['Outcome'] == 0) & (data['Glucose'].isnull()) , 'Glucose'] = 107.0\ndata.loc[(data['Outcome'] == 1) & (data['Glucose'].isnull()) , 'Glucose'] = 140.0","d719f9b0":"## lets check if any null value is still left\n\ndisplay(data.isnull().sum())","4c56d52e":"def correlation_plot():\n    #correlation\n    correlation = data.corr()\n    #tick labels\n    matrix_cols = correlation.columns.tolist()\n    #convert to array\n    corr_array  = np.array(correlation)\n    trace = go.Heatmap(z = corr_array,\n                       x = matrix_cols,\n                       y = matrix_cols,\n                       colorscale='Viridis',\n                       colorbar   = dict() \n                      )\n    layout = go.Layout(dict(title = 'Correlation Matrix for variables',\n                            #autosize = False,\n                            #height  = 1400,\n                            #width   = 1600,\n                            margin  = dict(r = 0 ,l = 100,\n                                           t = 0,b = 100,\n                                         ),\n                            yaxis   = dict(tickfont = dict(size = 9)),\n                            xaxis   = dict(tickfont = dict(size = 9)),\n                           )\n                      )\n    fig = go.Figure(data = [trace],layout = layout)\n    py.iplot(fig)","f23e19e6":"correlation_plot()","7ea667ec":"def plot_feat1_feat2(feat1, feat2) :  \n    D = data[(data['Outcome'] != 0)]\n    H = data[(data['Outcome'] == 0)]\n    trace0 = go.Scatter(\n        x = D[feat1],\n        y = D[feat2],\n        name = 'diabetic',\n        mode = 'markers', \n        opacity=0.8,\n        marker = dict(color = 'lightskyblue',\n            line = dict(\n                width = 1)))\n\n    trace1 = go.Scatter(\n        x = H[feat1],\n        y = H[feat2],\n        name = 'healthy',\n        opacity=0.8,\n        mode = 'markers',\n        marker = dict(color = 'indigo',\n            line = dict(\n                width = 1)))\n\n    layout = dict(title = feat1 +\" \"+\"vs\"+\" \"+ feat2,\n                  yaxis = dict(title = feat2,zeroline = False),\n                  xaxis = dict(title = feat1, zeroline = False)\n                 )\n\n    plots = [trace0, trace1]\n\n    fig = dict(data = plots, layout=layout)\n    py.iplot(fig)\n","e612199c":"plot_feat1_feat2('Pregnancies', 'Age')","7986e579":"plot_feat1_feat2('Glucose', 'Insulin')\n","bbf3b105":"plot_feat1_feat2('SkinThickness', 'BMI')","768ccec3":"scaled_data = minmax_scaling(data,columns=['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age'])","f014e13b":"def build_model():\n    model = tf.keras.Sequential([\n    tf.keras.layers.Dense(8, activation='relu', input_shape=[len(scaled_data.keys())]),\n    tf.keras.layers.Dense(4, activation='relu'),\n    tf.keras.layers.Dense(1,activation='sigmoid')\n  ])\n\n    optimizer = tf.keras.optimizers.RMSprop(0.01)\n\n    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n    return model\n\nmodel = build_model()","c76939a3":"model.summary()","20058a88":"EPOCHS = 1000\n\nhistory = model.fit(scaled_data, data['Outcome'],epochs=EPOCHS, validation_split=0.2, verbose=2)","255bbdc7":"hist = pd.DataFrame(history.history)\nhist['epoch'] = history.epoch\nhist.tail()","de7f8735":"acc = (hist['accuracy'].tail().sum())*100\/5 \nval_acc = (hist['val_accuracy'].tail().sum())*100\/5 \n\nprint(\"Training Accuracy = {}% and Validation Accuracy= {}%\".format(acc,val_acc))","9c79b491":"## We find 3 pairs which were having good correlations. ","144c02b9":"## Final Training and Validation Accuracy ","962e1edb":"## Creating the binary classifier model.  ","604b703b":"We are doing this step as to to load the data in the model and avoid multi-variable multi-output data problem. ","36140e42":"# Now that we do not have any null values we can start with finding some correlations between the data presents ","082ebec4":"### Here we can see that people with SkinThickness< 30 and BMI <45 are less likly to be affected with diageties.  ","6cc95bad":"### Before starting I would like to give credit to \"Pima Indians Diabetes - EDA & Prediction (0.906) by Vincent Lugat\" for inspiring me to add some of his beautiful EDA in this notebook. \n[https:\/\/www.kaggle.com\/vincentlugat\/pima-indians-diabetes-eda-prediction-0-906\/notebook](http:\/\/) \n\n### If you like my work please upvote it. Thank You!!","2c3417d5":"Here we can see 9 columns where 'Outcome' specifies whether the person is diabetic or not. \n\nIts great to see that there is no null element present. Thus we do not need to fill or drop empty cells.\nHowever on close inspection I found that there are many '0' values that doesn't make anysense. So we are considering them as null values.","de93249e":"## Scaling data using minmax_scaling[](http:\/\/)","cf0c97d9":"### Here we can see that people with Age < 35 and Pragnancies < 6 are less likly to be affected with diageties.  ","8681bf3a":"### Here we can see that people with Glucose> 100 and Insulin > 180 are more likly to be affected with diageties.  ","fb0a9140":"## Affected People from Diabeties. ","fbad5988":"## Lets first fill null values and then find relations."}}