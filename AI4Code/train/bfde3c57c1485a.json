{"cell_type":{"b51bd19d":"code","c2e3e53f":"code","5e386f0f":"code","1b273981":"code","85f49f4e":"code","69d51cd5":"code","904a9c6e":"code","ac0d1885":"code","17af9b28":"code","60222d0b":"code","80125217":"code","e24c8ef7":"code","47f0d1bb":"code","a0a6182b":"code","160f0796":"code","e53c1935":"code","266d048b":"code","2b205610":"code","6cd703c2":"code","ebfd60e2":"code","e02e61ac":"code","19110307":"code","9b4a1b13":"code","496780d4":"code","dc08b82b":"code","c8a11abe":"code","2f144b0f":"markdown","eb1cd4d0":"markdown","8fec4f57":"markdown","411b4584":"markdown","df58d8b0":"markdown","8be8841d":"markdown","b39869d0":"markdown","3e50c18d":"markdown","5aae9b43":"markdown","0e5086d5":"markdown"},"source":{"b51bd19d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2e3e53f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras import optimizers\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import (StandardScaler, \n                                   PolynomialFeatures)\n%matplotlib inline","5e386f0f":"df=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.head()","1b273981":"df_test=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ndf_test.head()","85f49f4e":"total = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","69d51cd5":"df = df.drop((missing_data[missing_data['Total'] >= 1]).index,1)\n\ndf.isnull().sum().max() ","904a9c6e":"features = df[['MSSubClass', 'MSZoning', 'LotArea', 'Street', 'LotShape',\n       'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood',\n       'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'OverallQual',\n       'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle', 'RoofMatl',\n       'Exterior1st', 'Exterior2nd', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n       'HeatingQC', 'CentralAir', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'GarageCars', 'GarageArea',\n       'PavedDrive', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n       'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition']]\nprice = df[['SalePrice']]","ac0d1885":"testing = df_test[['MSSubClass', 'MSZoning', 'LotArea', 'Street', 'LotShape',\n       'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood',\n       'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'OverallQual',\n       'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle', 'RoofMatl',\n       'Exterior1st', 'Exterior2nd', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n       'HeatingQC', 'CentralAir', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'GarageCars', 'GarageArea',\n       'PavedDrive', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n       'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition']]","17af9b28":"X_train = pd.get_dummies(features)\ny_train = pd.get_dummies(price)","60222d0b":"testing.columns","80125217":"testing=pd.get_dummies(features)\n","e24c8ef7":"X_train.shape","47f0d1bb":"testing.shape","a0a6182b":"# Splitting the Training Set\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X_train, y_train, test_size=0.5 , shuffle=True)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","160f0796":"s = StandardScaler()\nX_train = s.fit_transform(X_train)\nX_test = s.fit_transform(X_test)\ntesting = s.fit_transform(testing)\n","e53c1935":"model = tf.keras.Sequential([\nkeras.layers.Dense(512 , activation='relu' , input_shape=[215]),\nkeras.layers.Dense(512 , activation='relu') ,\nkeras.layers.Dense(512 , activation='relu') ,\nkeras.layers.Dense(512 , activation='relu') ,    \n\nkeras.layers.Dense(1) ])\n","266d048b":"model.compile(optimizer='adam' , loss='mse' , metrics=['mse','mae'])","2b205610":"history=model.fit( X_train,y_train ,epochs = 20,steps_per_epoch=len(X_train)\/30,verbose=1,shuffle=True)","6cd703c2":"model.evaluate(X_test,y_test)","ebfd60e2":"yhat_test=model.predict(X_test)\nyhat_train=model.predict(X_train)\n","e02e61ac":"#PLOTTING LOSS \nwidth = 12\nheight = 10\nplt.figure(figsize=(width, height))\nplt.xlabel('Epoch Number')\nplt.ylabel(\"Loss Magnitude\")\nplt.plot(history.history['loss'])\nplt.show()","19110307":"# DISTRIBUTION PLOT Training\n\nplt.figure(figsize=(width, height))\n\nax1 = sns.distplot(y_train, hist=False, color=\"r\", label=\"Actual Value\")\nsns.distplot(yhat_train, hist=False, color=\"b\", label=\"Fitted Values\" , ax=ax1)\n\nplt.title('Actual vs Fitted Values for Price')\n\n\nplt.show()\nplt.close()","9b4a1b13":"# DISTRIBUTION PLOT Testing\n\nplt.figure(figsize=(width, height))\n\nax2 = sns.distplot(y_test, hist=False, color=\"r\", label=\"Actual Value\")\nsns.distplot(yhat_test, hist=False, color=\"b\", label=\"Fitted Values\" , ax=ax2)\n\nplt.title('Actual vs Fitted Values for Price')\n\n\nplt.show()\nplt.close()","496780d4":"preds = model.predict(testing)\npred = preds.astype(np.float64)","dc08b82b":"sample = pd.read_csv('..\/input\/house-pricing-multiple-lr\/Ksubmissions1.csv')\nsample['SalePrice']=pred\nsample.to_csv('submissionNP123.csv', index=False)","c8a11abe":"sample.head(10)","2f144b0f":"# Importing Libraries","eb1cd4d0":"# Fitting Trainging Values","8fec4f57":"Test Data","411b4584":"# Prediction","df58d8b0":"# Data Preprocessing","8be8841d":"# Prediction and Submission","b39869d0":"# Model Compiling","3e50c18d":"# Importing Training & Test Data","5aae9b43":"# Model Building","0e5086d5":"# Model Evaluation"}}