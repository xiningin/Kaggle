{"cell_type":{"117d21b1":"code","347bfb57":"code","b0493040":"code","873562dc":"code","3c8c4055":"code","6008b34c":"code","35208cf2":"code","e62effd6":"code","f6855001":"code","3574d227":"markdown","e5d0c767":"markdown","fdd9b1b4":"markdown","64e97a5b":"markdown","09b8cee7":"markdown"},"source":{"117d21b1":"import pandas as pd\nfrom sklearn.preprocessing import MultiLabelBinarizer\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport numpy as np","347bfb57":"#load data\ndf = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/train.csv', index_col='image')\n#nh\u00e3n b\u1eb1ng ch\u1eef ban \u0111\u1ea7u c\u1ee7a t\u1eebng m\u1eabu\nlabels = df.labels.values.copy()\ndf","b0493040":"label_unique = df.labels.unique()\nprint(label_unique)","873562dc":"#format train data\ntrain_Y = df['labels'].values.copy() \n# nh\u00ecn v\u00e0o d\u1eef li\u1ec7u ta th\u1ea5y r\u1eb1ng 1 m\u1eabu d\u1eef li\u1ec7u c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u nh\u00e3n, v\u1eady \u0111\u00e2y l\u00e0 b\u00e0i to\u00e1n \u0111a nh\u00e3n\ndf['labels'] = [x.split(' ') for x in df['labels']] \nclasses = ['complex', 'frog_eye_leaf_spot', 'powdery_mildew', 'rust', 'scab', 'healthy']\nscores = MultiLabelBinarizer(classes=classes).fit_transform(df['labels'].values)\ndf = pd.DataFrame(columns=classes, data=scores, index=df.index)\n# df.to_csv('train.csv')\ndf.head()","3c8c4055":"df.value_counts()","6008b34c":"x = [df[x].sum() for x in classes]\ny = classes\ny","35208cf2":"plt.style.use('bmh')\nplt.xticks(fontsize =12)\nplt.yticks(fontsize =12)\nplt.xlabel('Category',fontsize =13)\nplt.ylabel('Quantity of Image',fontsize = 13)\nplt.xticks(rotation=50)\ncolor_list = ['#f8a709', '#FF6565', '#2CC9FB', '#37DE5B', '#FF74E9', '#2C99FE']\nplt.bar(y,x, color = color_list,width=0.6)\n\nplt.show()\nprint(\"S\u1ed1 m\u1eabu d\u1eef li\u1ec7u: \", len(df))","e62effd6":"from sklearn.model_selection import KFold\nkfold = KFold(n_splits=5, shuffle=True, random_state = 42)\nfold_ids = np.zeros(len(df))\nfor i, (train_ids, val_ids) in enumerate(kfold.split(df.index, labels)):\n    fold_ids[val_ids] = i\n\nvalue_counts = lambda x: pd.Series.value_counts(x, normalize=True)\ndf_five_folds = pd.DataFrame({\n    'origin_data': df.apply(value_counts).loc[1],\n    'fold_0': df[fold_ids == 0].apply(value_counts).loc[1],\n    'fold_1': df[fold_ids == 1].apply(value_counts).loc[1],\n    'fold_2': df[fold_ids == 2].apply(value_counts).loc[1],\n    'fold_3': df[fold_ids == 3].apply(value_counts).loc[1],\n    'fold_4': df[fold_ids == 4].apply(value_counts).loc[1]})\n\nbar = df_five_folds.plot.bar(figsize=[10, 10], colormap='Spectral', rot=50)\n\nfolds = pd.DataFrame({\n    'image': df.index,\n    'fold': fold_ids})\n\nfolds.to_csv('folds.csv', index=False)","f6855001":"from sklearn.model_selection import StratifiedKFold\nkfold = StratifiedKFold(n_splits=5, shuffle=True, random_state = 42)\nfold_ids = np.zeros(len(df))\nfor i, (train_ids, val_ids) in enumerate(kfold.split(df.index, labels)):\n    fold_ids[val_ids] = i\n\nvalue_counts = lambda x: pd.Series.value_counts(x, normalize=True)\ndf_five_folds = pd.DataFrame({\n    'origin_data': df.apply(value_counts).loc[1],\n    'fold_0': df[fold_ids == 0].apply(value_counts).loc[1],\n    'fold_1': df[fold_ids == 1].apply(value_counts).loc[1],\n    'fold_2': df[fold_ids == 2].apply(value_counts).loc[1],\n    'fold_3': df[fold_ids == 3].apply(value_counts).loc[1],\n    'fold_4': df[fold_ids == 4].apply(value_counts).loc[1]})\n\nbar = df_five_folds.plot.bar(figsize=[10, 10], colormap='Spectral', rot=50)\n\nfolds = pd.DataFrame({\n    'image': df.index,\n    'fold': fold_ids})\n\nfolds.to_csv('folds.csv', index=False)","3574d227":"> Khi s\u1eed d\u1ee5ng KFold ta th\u1ea5y ph\u00e2n b\u1ed1 nh\u00e3n trong c\u00e1c fold so v\u1edbi ph\u00e2n b\u1ed1 nh\u00e3n trong d\u1eef li\u1ec7u train ban \u0111\u1ea7u b\u1ecb l\u1ec7ch nhau. V\u1edbi StratifiedKFold ta s\u1ebd thu \u0111\u01b0\u1ee3c t\u1ec9 l\u1ec7 n\u00e0y c\u00e2n b\u1eb1ng h\u01a1n kh\u00e1 nhi\u1ec1u. V\u1edbi ph\u01b0\u01a1ng ph\u00e1p n\u00e0y th\u00ec n\u00f3 s\u1ebd ch\u1ec9 shuffle d\u1eef li\u1ec7u m\u1ed9t l\u1ea7n \u0111\u1ea7u ti\u00ean tr\u01b0\u1edbc khi b\u1eaft \u0111\u1ea7u chia fold v\u00e0 n\u00f3 s\u1ebd c\u1ed1 g\u1eafng chia sao cho t\u1ef7 l\u1ec7 c\u00e1c class trong c\u00e1c fold l\u00e0 t\u01b0\u01a1ng \u0111\u1ed3ng nhau.","e5d0c767":"**Ta nh\u1eadn th\u1ea5y r\u1eb1ng tuy \u0111\u00e2y l\u00e0 b\u00e0i to\u00e1n \u0111a nh\u00e3n nh\u01b0ng nh\u00ecn v\u00e0o th\u1ef1c t\u1ebf nh\u1eefng m\u1eabu \u0111\u00e3 \u0111\u01b0\u1ee3c g\u00e1n nh\u00e3n heathy r\u1ed3i th\u00ec s\u1ebd kh\u00f4ng g\u00e1n \u0111\u01b0\u1ee3c nh\u1eefng nh\u00e3n kh\u00e1c, v\u1eady ta s\u1ebd x\u00e2y d\u1ef1ng 5 model cho 5 nh\u00e3n:complex, frog_eye_leaf_spot, powdery_mildew, rust, scab. M\u1eabu d\u1eef li\u1ec7u kh\u00f4ng \u0111\u01b0\u1ee3c g\u00e1n nh\u00e3n n\u00e0o trong 5 nh\u00e3n tr\u00ean s\u1ebd \u0111c g\u00e1n l\u00e0 healthy**","fdd9b1b4":"**Chu\u1ea9n h\u00f3a d\u1eef li\u1ec7u**","64e97a5b":"**Nh\u00ecn v\u00e0o bi\u1ec3u \u0111\u1ed3 tr\u00ean, ta th\u1ea5y r\u1eb1ng c\u00f3 m\u1ed9t s\u1ed1 l\u1edbp kh\u00e1 \u00edt d\u1eef li\u1ec7u, n\u00ean khi chia d\u1eef li\u1ec7u d\u1ec5 b\u1ecb miss n\u00ean ta d\u00f9ng 5-fold cross validation**","09b8cee7":"**> Chia fold"}}