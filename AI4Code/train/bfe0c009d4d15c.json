{"cell_type":{"851bc4ff":"code","59ea1a3b":"code","64286600":"code","ac99ba70":"code","3943d6d1":"code","4aa2cb3e":"code","d1bdbd39":"code","1eb23d02":"code","a29e4084":"code","b307e889":"code","8c33064f":"code","3a865c0e":"code","75ea97d8":"code","20e4f45b":"code","30df60e6":"code","ac7942a5":"code","2b94afc5":"code","e78c5299":"code","a5004973":"code","c8de1d26":"code","c8fc3a0a":"code","96897eae":"code","53794252":"code","e0149b57":"code","db32ca5e":"code","e2e570fc":"code","927aef46":"code","7421300d":"code","5aa995b9":"code","1f97d474":"code","4d66e4b5":"code","432b8d45":"code","f98f88fe":"code","cda849ef":"code","899df241":"code","2b96332e":"code","04534b1b":"code","f6023f9a":"code","fe3dece4":"code","c2bbfe43":"code","3a0fa9d3":"code","2429ff2c":"code","14f9992b":"code","6ad887dc":"code","5065a018":"code","4bdd6f86":"code","1a81da80":"code","313c2663":"code","f3d64bdf":"code","6e545794":"code","9e767f6d":"code","8f0cfdaa":"code","939eb93b":"code","e36fecd4":"code","e70b7146":"markdown","4da6e4e0":"markdown","64c29404":"markdown","a8b57f4f":"markdown","6ad689d6":"markdown","4ed8ebbc":"markdown","0864d955":"markdown","a0e06899":"markdown","70a4fd6f":"markdown","80abc8fe":"markdown","2640deb4":"markdown","c8bb5379":"markdown","2fa278eb":"markdown","40a74cce":"markdown","73111819":"markdown","26f38c86":"markdown","e715a824":"markdown","71f9c1dd":"markdown","003264ff":"markdown","1f0f2518":"markdown","a96278fc":"markdown","fc58efd3":"markdown","0bb8133a":"markdown","61b79d4a":"markdown","3f34d993":"markdown","e0db9f12":"markdown","cd6369e0":"markdown","bda3a58f":"markdown","6bf03e5b":"markdown","acf63e91":"markdown","69a603d8":"markdown","9e11cb2c":"markdown","a46afbf2":"markdown","3e263509":"markdown","6eb6bd57":"markdown","c5103b13":"markdown","3952fb54":"markdown","3692eeb6":"markdown","8ec123a2":"markdown","8399bffd":"markdown","84e1038b":"markdown","fc4eb56e":"markdown","fed446fb":"markdown","a82d0964":"markdown","129333e0":"markdown","6c25aa6c":"markdown","09d6e3cb":"markdown","e7af09c7":"markdown","9b5e2ccd":"markdown","0df82353":"markdown","4357590e":"markdown","b9a2bfb1":"markdown","0f8551ee":"markdown","777b09f4":"markdown"},"source":{"851bc4ff":"%matplotlib inline\nfrom matplotlib import pyplot as plt\nplt.rcParams['figure.figsize'] = (10, 8)\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nimport collections\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import preprocessing\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom ipywidgets import Image\nfrom io import StringIO\nimport pydotplus #pip install pydotplus","59ea1a3b":"# Create dataframe with dummy variables\ndef create_df(dic, feature_list):\n    out = pd.DataFrame(dic)\n    out = pd.concat([out, pd.get_dummies(out[feature_list])], axis = 1)\n    out.drop(feature_list, axis = 1, inplace = True)\n    return out\n\n# Some feature values are present in train and absent in test and vice-versa.\ndef intersect_features(train, test):\n    common_feat = list( set(train.keys()) & set(test.keys()))\n    return train[common_feat], test[common_feat]","64286600":"features = ['Looks', 'Alcoholic_beverage','Eloquence','Money_spent']","ac99ba70":"df_train = {}\ndf_train['Looks'] = ['handsome', 'handsome', 'handsome', 'repulsive',\n                         'repulsive', 'repulsive', 'handsome'] \ndf_train['Alcoholic_beverage'] = ['yes', 'yes', 'no', 'no', 'yes', 'yes', 'yes']\ndf_train['Eloquence'] = ['high', 'low', 'average', 'average', 'low',\n                                   'high', 'average']\ndf_train['Money_spent'] = ['lots', 'little', 'lots', 'little', 'lots',\n                                  'lots', 'lots']\ndf_train['Will_go'] = LabelEncoder().fit_transform(['+', '-', '+', '-', '-', '+', '+'])\n\ndf_train = create_df(df_train, features)\ndf_train","3943d6d1":"df_test = {}\ndf_test['Looks'] = ['handsome', 'handsome', 'repulsive'] \ndf_test['Alcoholic_beverage'] = ['no', 'yes', 'yes']\ndf_test['Eloquence'] = ['average', 'high', 'average']\ndf_test['Money_spent'] = ['lots', 'little', 'lots']\ndf_test = create_df(df_test, features)\ndf_test","4aa2cb3e":"# Some feature values are present in train and absent in test and vice-versa.\ny = df_train['Will_go']\ndf_train, df_test = intersect_features(train=df_train, test=df_test)\ndf_train","d1bdbd39":"df_test","1eb23d02":"import math","a29e4084":"s_0 = -(4\/7) * math.log(4\/7, 2) - (3\/7) * math.log(3\/7, 2)\nprint('Entropy S_0 of the initial system is ' + str(round(s_0,3)))","b307e889":"s_1 =  -(1\/4) * math.log(1\/4, 2) - (3\/4) * math.log(3\/4, 2)\ns_2 = -(2\/3) * math.log(2\/3, 2) - (1\/3) * math.log(1\/3, 2)\nIG = s_0 - (4\/7) * s_1 - (3\/7) * s_2\nprint('Entropy S_1 is ' + str(round(s_1,3)))\nprint('Entropy S_2 is ' + str(round(s_2,3)))\nprint('Information gain IG is ' + str(round(IG,3)))","8c33064f":"from sklearn.tree import DecisionTreeClassifier\n\nclf_tree = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=17)\nclf_tree.fit(df_train,y)","3a865c0e":"import graphviz\nfrom sklearn.tree import export_graphviz\ndot_data = export_graphviz(clf_tree, out_file=None, \n                         feature_names=['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8'], \n                         filled=True, rounded=True,  \n                         special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph ","75ea97d8":"balls = [1 for i in range(9)] + [0 for i in range(11)]","20e4f45b":"# two groups\nballs_left  = [1 for i in range(8)] + [0 for i in range(5)] # 8 blue and 5 yellow\nballs_right = [1 for i in range(1)] + [0 for i in range(6)] # 1 blue and 6 yellow","30df60e6":"import math\ndef entropy(a_list):\n    n_labels = len(a_list)\n    value,counts = np.unique(a_list, return_counts = True)\n    probs = counts\/ n_labels\n    ent = 0\n    for i in probs:\n        ent -= i * math.log(i,2)\n    return ent","ac7942a5":"print(entropy(balls)) # 9 blue \u0438 11 yellow\nprint(entropy(balls_left)) # 8 blue \u0438 5 yellow\nprint(entropy(balls_right)) # 1 blue \u0438 6 yellow\nprint(entropy([1,2,3,4,5,6])) # entropy of a fair 6-sided die","2b94afc5":"print('Entropy of the state given by the list balls_left is ' + str(round(entropy(balls_left),3)))","e78c5299":"print('Entropy of a fair dice is ' + str(round(entropy([1,2,3,4,5,6]),3)))","a5004973":"# information gain calculation\ndef information_gain(root, left, right):\n    ''' root - initial data, left and right - two partitions of initial data'''\n    s0 = entropy(root)\n    s1 = entropy(left)\n    s2 = entropy(right)\n    N = len(root)\n    N1 = len(left)\n    N2 = len(right)\n    IG = s0 - (N1\/N) * s1 - (N2\/N) * s2\n    return IG","c8de1d26":"print('Information gain is ' + str(round(information_gain(balls, balls_right, balls_left), 3)))","c8fc3a0a":"def best_feature_to_split(X, y):\n    '''Outputs information gain when splitting on best feature'''\n    \n    # you code here\n    pass","96897eae":"data_train = pd.read_csv('..\/input\/adult_train.csv')","53794252":"data_train.tail()","e0149b57":"data_test = pd.read_csv('..\/input\/adult_test.csv')","db32ca5e":"data_test.tail()","e2e570fc":"# necessary to remove rows with incorrect labels in test dataset\ndata_test = data_test[(data_test['Target'] == ' >50K.') | (data_test['Target']==' <=50K.')]\n\n# encode target variable as integer\ndata_train.loc[data_train['Target']==' <=50K', 'Target'] = 0\ndata_train.loc[data_train['Target']==' >50K', 'Target'] = 1\n\ndata_test.loc[data_test['Target']==' <=50K.', 'Target'] = 0\ndata_test.loc[data_test['Target']==' >50K.', 'Target'] = 1","927aef46":"data_test.describe(include='all').T","7421300d":"data_train['Target'].value_counts()","5aa995b9":"fig = plt.figure(figsize=(25, 15))\ncols = 5\nrows = np.ceil(float(data_train.shape[1]) \/ cols)\nfor i, column in enumerate(data_train.columns):\n    ax = fig.add_subplot(rows, cols, i + 1)\n    ax.set_title(column)\n    if data_train.dtypes[column] == np.object:\n        data_train[column].value_counts().plot(kind=\"bar\", axes=ax)\n    else:\n        data_train[column].hist(axes=ax)\n        plt.xticks(rotation=\"vertical\")\nplt.subplots_adjust(hspace=0.7, wspace=0.2)","1f97d474":"data_train.dtypes","4d66e4b5":"data_test.dtypes","432b8d45":"data_test['Age'] = data_test['Age'].astype(int)","f98f88fe":"data_test['fnlwgt'] = data_test['fnlwgt'].astype(int)\ndata_test['Education_Num'] = data_test['Education_Num'].astype(int)\ndata_test['Capital_Gain'] = data_test['Capital_Gain'].astype(int)\ndata_test['Capital_Loss'] = data_test['Capital_Loss'].astype(int)\ndata_test['Hours_per_week'] = data_test['Hours_per_week'].astype(int)","cda849ef":"# choose categorical and continuous features from data\n\ncategorical_columns = [c for c in data_train.columns \n                       if data_train[c].dtype.name == 'object']\nnumerical_columns = [c for c in data_train.columns \n                     if data_train[c].dtype.name != 'object']\n\nprint('categorical_columns:', categorical_columns)\nprint('numerical_columns:', numerical_columns)","899df241":"# fill missing data\n\nfor c in categorical_columns:\n    data_train[c].fillna(data_train[c].mode(), inplace=True)\n    data_test[c].fillna(data_train[c].mode(), inplace=True)\n    \nfor c in numerical_columns:\n    data_train[c].fillna(data_train[c].median(), inplace=True)\n    data_test[c].fillna(data_train[c].median(), inplace=True)","2b96332e":"data_train = pd.concat([data_train[numerical_columns],\n    pd.get_dummies(data_train[categorical_columns])], axis=1)\n\ndata_test = pd.concat([data_test[numerical_columns],\n    pd.get_dummies(data_test[categorical_columns])], axis=1)","04534b1b":"set(data_train.columns) - set(data_test.columns)","f6023f9a":"data_train.shape, data_test.shape","fe3dece4":"data_test['Country_ Holand-Netherlands'] = 0","c2bbfe43":"set(data_train.columns) - set(data_test.columns)","3a0fa9d3":"data_train.head(2)","2429ff2c":"data_test.head(2)","14f9992b":"X_train = data_train.drop(['Target'], axis=1)\ny_train = data_train['Target']\n\nX_test = data_test.drop(['Target'], axis=1)\ny_test = data_test['Target']","6ad887dc":"tree =  DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=17)\ntree.fit(X_train, y_train)","5065a018":"tree_predictions = tree.predict(X_test)\naccuracy_score(y_test, tree_predictions)","4bdd6f86":"print('Accuracy is ' + str(round(accuracy_score(y_test, tree_predictions),3)))","1a81da80":"tree_params = {'max_depth': range(2,11)}\n\nlocally_best_tree = GridSearchCV(tree, tree_params, cv=5, n_jobs=-1, verbose=True)  \n\nlocally_best_tree.fit(X_train, y_train)","313c2663":"# locally_best_tree.best_params_\ntuned_tree = DecisionTreeClassifier(criterion='entropy', max_depth=9, random_state=17)\ntuned_tree.fit(X_train, y_train)\ntuned_tree_predictions = tuned_tree.predict(X_test)\naccuracy_score(y_test, tuned_tree_predictions)","f3d64bdf":"print('Accuracy is ' + str(round(accuracy_score(y_test, tuned_tree_predictions),3)))","6e545794":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=100, n_jobs=-1,random_state=17)\nrf.fit(X_train, y_train)","9e767f6d":"rf_predictions = rf.predict(X_test)\naccuracy_score(y_test, rf_predictions)\nprint('Accuracy is ' + str(round(accuracy_score(y_test, rf_predictions),2)))","8f0cfdaa":"# Fitting took too much time to finish, so I wasn`t able to get the best parametrs and do further actions. \n# Code I tried to execute can be seen below: \n'''\nforest_params = {'max_depth': range(10, 21),\n                 'max_features': range(5, 105, 20)}\n\nlocally_best_forest = GridSearchCV(rf, forest_params,\n                           cv=3, n_jobs=-1, verbose=True) \n\nlocally_best_forest.fit(X_train, y_train)\n'''","939eb93b":"# getting the best parameters\n''' locally_best_forest.best_params_ '''","e36fecd4":"# tuning the parameters\n'''\ntuned_forest = RandomForestClassifier(n_estimators=100, n_jobs=-1,random_state=17)\ntuned_forest.fit(X_train, y_train)\ntuned_forest_predictions = tuned_forest.predict(X_test)\naccuracy_score(y_test, tuned_forest_predictions)\n'''","e70b7146":"Consider the following warm-up example: we have 9 blue balls and 11 yellow balls. Let ball have label **1** if it is blue, **0** otherwise.","4da6e4e0":"### 3.1 Decision tree without parameter tuning","64c29404":"#### Fill in missing data for continuous features with their median values, for categorical features with their mode.","a8b57f4f":"# <center> Assignment #3 (demo)\n## <center>  Decision trees with a toy task and the UCI Adult dataset \n\nPlease fill in the answers in the [web-form](https:\/\/docs.google.com\/forms\/d\/1wfWYYoqXTkZNOPy1wpewACXaj2MZjBdLOL58htGWYBA\/edit).","6ad689d6":"Train a random forest **(RandomForestClassifier)**. Set the number of trees to 100 and use **random_state = 17**.","4ed8ebbc":"Train a decision tree **(DecisionTreeClassifier)** with a maximum depth of 3, and evaluate the accuracy metric on the test data. Use parameter **random_state = 17** for results reproducibility.","0864d955":"2\\. Let's split the data by the feature \"Looks_handsome\". What is the entropy $S_1$ of the left group - the one with \"Looks_handsome\". What is the entropy $S_2$ in the opposite group? What is the information gain (IG) if we consider such a split?","a0e06899":"Make predictions for the test data and assess accuracy.","70a4fd6f":"Train a decision tree with maximum depth of 9 (it is the best **max_depth** in my case), and compute the test set accuracy. Use parameter **random_state = 17** for reproducibility.","80abc8fe":"#### There is no Holland in the test data. Create new zero-valued feature.","2640deb4":"Feature descriptions:","c8bb5379":"As we see, in the test data, age is treated as type **object**. We need to fix this.","2fa278eb":"#### Additional: display the resulting tree using graphviz. You can use pydot or [web-service](https:\/\/www.coolutils.com\/ru\/online\/DOT-to-PNG) dot2png.","40a74cce":"#### Test data","73111819":"Also we'll cast all **float** features to **int** type to keep types consistent between our train and test data.","26f38c86":"### 3.4 (Optional) Random forest with parameter tuning","e715a824":"### Part 2. Functions for calculating entropy and information gain.","71f9c1dd":"Let's start by loading all necessary libraries:","003264ff":"We'll dummy code some categorical features: **Workclass**, **Education**, **Martial_Status**, **Occupation**, **Relationship**, **Race**, **Sex**, **Country**. It can be done via pandas method **get_dummies**","1f0f2518":"Make a prediction with the trained model on the test data.","a96278fc":"#### Primary data analysis","fc58efd3":"**Target** \u2013 earnings level, categorical (binary) feature.","0bb8133a":"Your goal is to figure out how decision trees work by walking through a toy problem. While a single decision tree does not yield outstanding results, other performant algorithms like gradient boosting and random forests are based on the same idea. That is why knowing how decision trees work might be useful.","61b79d4a":"Make predictions for the test data and assess accuracy.","3f34d993":"<img src='https:\/\/habrastorage.org\/webt\/bd\/aq\/5w\/bdaq5wi3c4feezaexponvin8wmo.png'>","e0db9f12":"#### Training data","cd6369e0":"**Tests**","bda3a58f":"### Part 1. Toy dataset \"Will They? Won't They?\"","6bf03e5b":"4\\. What is the entropy of a fair dice? (where we look at a dice as a system with 6 equally probable states)?","acf63e91":"#### Implement a function to calculate the Shannon Entropy","69a603d8":"Train a random forest **(RandomForestClassifier)**. Tune the maximum depth and maximum number of features for each tree using **GridSearchCV**. ","9e11cb2c":"#### Reading train and test data","a46afbf2":"#### Draw a decision tree (by hand or in any graphics editor) for this dataset. Optionally you can also implement tree construction and draw it here.","3e263509":"<img src = 'https:\/\/habrastorage.org\/webt\/mu\/vl\/mt\/muvlmtd2njeqf18trbldenpqvnm.png'>","6eb6bd57":"### 3.2 Decision tree with parameter tuning","c5103b13":"3\\. What is the entropy of the state given by the list **balls_left**?","3952fb54":"<center>\n<img src=\"https:\/\/habrastorage.org\/files\/fd4\/502\/43d\/fd450243dd604b81b9713213a247aa20.jpg\">\n    \n## Open Machine Learning Course\n\nAuthors: [Maria Sumarokova](https:\/\/www.linkedin.com\/in\/mariya-sumarokova-230b4054\/), senior data scientist\/analyst at Veon, and [Yury Kashnitsky](https:\/\/www.linkedin.com\/in\/festline\/), data scientist at Mail.Ru Group. Translated and edited by Gleb Filatov, Aleksey Kiselev, [Anastasia Manokhina](https:\/\/www.linkedin.com\/in\/anastasiamanokhina\/), [Egor Polusmak](https:\/\/www.linkedin.com\/in\/egor-polusmak\/), and [Yuanyuan Pao](https:\/\/www.linkedin.com\/in\/yuanyuanpao\/). All content is distributed under the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license.","3692eeb6":"- **Age** \u2013 continuous feature\n- **Workclass** \u2013  continuous feature\n- **fnlwgt** \u2013 final weight of object, continuous feature\n- **Education** \u2013  categorical feature\n- **Education_Num** \u2013 number of years of education, continuous feature\n- **Martial_Status** \u2013  categorical feature\n- **Occupation** \u2013  categorical feature\n- **Relationship** \u2013 categorical feature\n- **Race** \u2013 categorical feature\n- **Sex** \u2013 categorical feature\n- **Capital_Gain** \u2013 continuous feature\n- **Capital_Loss** \u2013 continuous feature\n- **Hours_per_week** \u2013 continuous feature\n- **Country** \u2013 categorical feature","8ec123a2":"### Part 3. The \"Adult\" dataset","8399bffd":"Train a decision tree **(DecisionTreeClassifier, random_state = 17).** Find the optimal maximum depth using 5-fold cross-validation **(GridSearchCV)**.","84e1038b":"### 3.3 (Optional) Random forest without parameter tuning","fc4eb56e":"#### Train a decision tree using sklearn on the training data. You may choose any depth for the tree.","fed446fb":"#### Dataset description:","a82d0964":"[Dataset](http:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/adult) UCI Adult (no need to download it, we have a copy in the course repository): classify people using demographical data - whether they earn more than \\$50,000 per year or not.","129333e0":"5\\. What is the information gain from splitting the initial dataset into **balls_left** and **balls_right** ?","6c25aa6c":"#### Checking data types","09d6e3cb":"Let's take a sneak peek of upcoming lectures and try to use a random forest for our task. For now, you can imagine a random forest as a bunch of decision trees, trained on slightly different subsets of the training data.","e7af09c7":"We'll go through a toy example of binary classification - Person A is deciding whether they will go on a second date with Person B. It will depend on their looks, eloquence, alcohol consumption (only for example), and how much money was spent on the first date.","9b5e2ccd":"Next split the balls into two groups:","0df82353":"#### Optional:\n- Implement a decision tree building algorithm by calling **best_feature_to_split** recursively\n- Plot the resulting tree","4357590e":"1\\. What is the entropy $S_0$ of the initial system? By system states, we mean values of the binary feature \"Will_go\" - 0 or 1 - two states in total.","b9a2bfb1":"6\\. What is the test set accuracy of a decision tree with maximum tree depth of 3 and **random_state = 17**?","0f8551ee":"#### Creating the dataset","777b09f4":"7\\. What is the test set accuracy of a decision tree with maximum depth of 9 and **random_state = 17**?"}}