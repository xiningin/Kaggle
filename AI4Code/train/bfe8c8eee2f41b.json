{"cell_type":{"ad840ef4":"code","b006baa5":"code","d1d0254f":"code","be0a03a9":"code","d166b711":"code","af5add3c":"code","b02d266e":"code","b9593c70":"code","8dc8cfc7":"code","27da0e51":"code","cdec6e86":"code","fd1209c4":"code","c94c5338":"code","8755e466":"code","90cb9d19":"code","8adbf514":"code","5e87b8ed":"code","46bb2376":"code","24578ef2":"code","18c57ab4":"code","feb3710a":"code","4bb69a4b":"code","69d3cd2f":"code","b80a3a22":"code","cc8ee735":"code","8914b971":"code","3a99ddfd":"code","e3a513a9":"code","c98eb8ac":"code","330ec9f8":"code","5df4d8fe":"code","48bb42ba":"code","fa2578b3":"code","e1c081db":"code","b7e90e8a":"code","a2bb73e8":"code","02427138":"code","e80cbd78":"code","2dccd61c":"code","c2f05c03":"code","d16a37b4":"markdown","8d695e78":"markdown","299a7c92":"markdown","f30dcce3":"markdown","8654c58e":"markdown","6b6d8e27":"markdown","d44468d8":"markdown","de13caf1":"markdown","7bb0b3be":"markdown","b13962a5":"markdown","6f17acbf":"markdown","d6a85e07":"markdown","fc1e3373":"markdown","937911d6":"markdown","46db3b98":"markdown","631cf105":"markdown","b6141a13":"markdown","5ba1e0cc":"markdown","969437d8":"markdown","b17854d3":"markdown","ffde6583":"markdown","19a5f26f":"markdown","f33acf76":"markdown","90314a2f":"markdown","7b8aba21":"markdown"},"source":{"ad840ef4":"import seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier  \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)","b006baa5":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d1d0254f":"heart=pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\nheart.head()","be0a03a9":"print('Number of rows are',heart.shape[0], 'and number of columns are ',heart.shape[1])","d166b711":"# Checking Missing values\nheart.isnull().sum()\/len(heart)*100","af5add3c":"heart.info()","b02d266e":"heart[heart.duplicated()]","b9593c70":"heart.drop_duplicates(keep='first',inplace=True)","8dc8cfc7":"# Visualising new shape\nprint('Number of rows are',heart.shape[0], 'and number of columns are ',heart.shape[1])","27da0e51":"heart.describe()","cdec6e86":"\nheart.corr()","fd1209c4":"# Visualising Gender\n\nx=(heart.sex.value_counts())\nprint(f'Number of people having sex as 1 are {x[0]} and Number of people having sex as 0 are {x[1]}')\np = sns.countplot(data=heart, x=\"sex\")\nplt.show()","c94c5338":"# Visualising chestpain\nx=(heart.cp.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"cp\")\nplt.show()","8755e466":"x=(heart.cp.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"cp\")\nplt.show()","90cb9d19":"x=(heart.fbs.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"fbs\")\nplt.show()","8adbf514":"\nx=(heart.restecg.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"restecg\")\nplt.show()","5e87b8ed":"\nx=(heart.exng.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"exng\")\nplt.show()","46bb2376":"x=(heart.thall.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"thall\")\nplt.show()","24578ef2":"plt.figure(figsize=(10,10))\nsns.displot(heart.age, color=\"red\", label=\"Age\", kde= True)\nplt.legend()","18c57ab4":"plt.figure(figsize=(20,20))\nsns.displot(heart.trtbps , color=\"green\", label=\"Resting Blood Pressure\", kde= True)\nplt.legend()","feb3710a":"\nplt.figure(figsize=(10,10))\nsns.distplot(heart[heart['output'] == 0][\"age\"], color='green',kde=True,) \nsns.distplot(heart[heart['output'] == 1][\"age\"], color='red',kde=True)\nplt.title('Attack versus Age')\nplt.show()","4bb69a4b":"plt.figure(figsize=(10,10))\nsns.distplot(heart[heart['output'] == 0][\"chol\"], color='green',kde=True,) \nsns.distplot(heart[heart['output'] == 1][\"chol\"], color='red',kde=True)\nplt.title('Cholestrol versus Age')\nplt.show()","69d3cd2f":"plt.figure(figsize=(10,10))\nsns.distplot(heart[heart['output'] == 0][\"trtbps\"], color='green',kde=True,) \nsns.distplot(heart[heart['output'] == 1][\"trtbps\"], color='red',kde=True)\nplt.title('Trtbs versus Age')\nplt.show()","b80a3a22":"\nplt.figure(figsize=(10,10))\nsns.distplot(heart[heart['output'] == 0][\"thalachh\"], color='green',kde=True,) \nsns.distplot(heart[heart['output'] == 1][\"thalachh\"], color='red',kde=True)\nplt.title('Thalachh versus Age')\nplt.show()","cc8ee735":"plt.figure(figsize=(20,20))\nsns.pairplot(heart)\nplt.show()","8914b971":"\nplt.figure(figsize=(13,13))\nplt.subplot(2,3,1)\nsns.violinplot(x = 'sex', y = 'output', data = heart)\nplt.subplot(2,3,2)\nsns.violinplot(x = 'thall', y = 'output', data = heart)\nplt.subplot(2,3,3)\nsns.violinplot(x = 'exng', y = 'output', data = heart)\nplt.subplot(2,3,4)\nsns.violinplot(x = 'restecg', y = 'output', data = heart)\nplt.subplot(2,3,5)\nsns.violinplot(x = 'cp', y = 'output', data = heart)\nplt.xticks(fontsize=9, rotation=45)\nplt.subplot(2,3,6)\nsns.violinplot(x = 'fbs', y = 'output', data = heart)\n\nplt.show()","3a99ddfd":"x = heart.iloc[:, 1:-1].values\ny = heart.iloc[:, -1].values\nx,y","e3a513a9":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state= 0)","c98eb8ac":"\nprint('Shape for training data', x_train.shape, y_train.shape)\nprint('Shape for testing data', x_test.shape, y_test.shape)","330ec9f8":"\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","5df4d8fe":"x_train,x_test","48bb42ba":"model = LogisticRegression()\nmodel.fit(x_train, y_train)\npredicted=model.predict(x_test)\nconf = confusion_matrix(y_test, predicted)\nprint (\"Confusion Matrix : \\n\", conf)\nprint()\nprint()\nprint (\"The accuracy of Logistic Regression is : \", accuracy_score(y_test, predicted)*100, \"%\")","fa2578b3":"model = GaussianNB()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\n  \nprint(\"The accuracy of Gaussian Naive Bayes model is : \", accuracy_score(y_test, predicted)*100, \"%\")","e1c081db":"model = BernoulliNB()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\n  \nprint(\"The accuracy of Gaussian Naive Bayes model is : \", accuracy_score(y_test, predicted)*100, \"%\")","b7e90e8a":"model = SVC()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\nprint(\"The accuracy of SVM is : \", accuracy_score(y_test, predicted)*100, \"%\")","a2bb73e8":"model = RandomForestRegressor(n_estimators = 100, random_state = 0)  \nmodel.fit(x_train, y_train)  \npredicted = model.predict(x_test)\nprint(\"The accuracy of Random Forest is : \", accuracy_score(y_test, predicted.round())*100, \"%\")","02427138":"\n  \nmodel = KNeighborsClassifier(n_neighbors = 1)  \nmodel.fit(x_train, y_train)\npredicted = model.predict(x_test)\n  \n\nprint(confusion_matrix(y_test, predicted))\nprint(\"The accuracy of KNN is : \", accuracy_score(y_test, predicted.round())*100, \"%\")","e80cbd78":"\nerror_rate = []\n  \nfor i in range(1, 40):\n      \n    model = KNeighborsClassifier(n_neighbors = i)\n    model.fit(x_train, y_train)\n    pred_i = model.predict(x_test)\n    error_rate.append(np.mean(pred_i != y_test))\n  \nplt.figure(figsize =(10, 6))\nplt.plot(range(1, 40), error_rate, color ='blue',\n                linestyle ='dashed', marker ='o',\n         markerfacecolor ='red', markersize = 10)\n  \nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","2dccd61c":"\nmodel = KNeighborsClassifier(n_neighbors = 7)\n  \nmodel.fit(x_train, y_train)\npredicted = model.predict(x_test)\n  \nprint('Confusion Matrix :')\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test, predicted))\n\nprint()\nprint()\nprint(\"The accuracy of KNN is : \", accuracy_score(y_test, predicted.round())*100, \"%\")","c2f05c03":"model = xgb.XGBClassifier(use_label_encoder=False)\nmodel.fit(x_train, y_train)\n   \npredicted = model.predict(x_test)\n   \ncm = confusion_matrix(y_test, predicted)\nprint()\nprint (\"The accuracy of X Gradient Boosting is : \", accuracy_score(y_test, predicted)*100, \"%\")","d16a37b4":"# Checking Duplicate Rows","8d695e78":"# Logestic Regression","299a7c92":"* True Positive + True Negative : 54\n* False Positive + False Negative : 7","f30dcce3":"* Density is high for 50 to 60 age groups","8654c58e":"# Loading Data","6b6d8e27":"# Gaussian Navie Bayes","d44468d8":"# Feature Scaling","de13caf1":"# Optemising the KNN","7bb0b3be":"# Model Evaluation","b13962a5":"# Removing Duplicates","6f17acbf":"# K Neareast Neaighbour","d6a85e07":"# Checking Correlation","fc1e3373":"# Conclusion\n* Most of the models are performing really well.\n* SVM is performing the best for the given dataset","937911d6":"# Suport vector Meachine","46db3b98":"# Random Forest","631cf105":"# Heart Attact Vs Age","b6141a13":"# Data Visualisation","5ba1e0cc":"# Visualising DataSet","969437d8":"# X Gradient Boosting","b17854d3":"# About Data\n* age: Age of the patient\n* sex: Sex of the patient\n* cp: Chest pain type, 0 = Typical Angina, 1 = Atypical Angina, 2 = Non-anginal Pain, 3 = Asymptomatic\n* trtbps: Resting blood pressure (in mm Hg)\n* chol: Cholestoral in mg\/dl fetched via BMI sensor\n* fbs: (fasting blood sugar > 120 mg\/dl), 1 = True, 0 = False\n* restecg: Resting electrocardiographic results, 0 = Normal, 1 = ST-T wave normality, 2 = Left ventricular hypertrophy\n* thalachh: Maximum heart rate achieved\n* oldpeak: Previous peak\n* slp: Slope\n* caa: Number of major vessels\n* thall: Thalium Stress Test result ~ (0,3)\n* exng: Exercise induced angina ~ 1 = Yes, 0 = No\n* output: Target variable","ffde6583":"# Data PreProcessing","19a5f26f":"# Bernoulie Navie Bayes","f33acf76":"# Checking Statistics","90314a2f":"# Importing Modules","7b8aba21":"* With k=7 as it hovers after that"}}