{"cell_type":{"96053628":"code","adb66e87":"code","63bd6e9c":"code","2fa4b21c":"code","fd62ca11":"code","5a4947aa":"code","26a89851":"code","b8e7f7fb":"code","28b6224a":"code","f9748364":"code","0c3786bf":"code","b0c800c3":"code","acf468ef":"code","aabdc98e":"code","c664f1ff":"code","4c5d4dc1":"code","43055fd6":"code","69f6996c":"code","d3f4e397":"code","7b4d4244":"code","fc9fd492":"code","c4f8d911":"code","928935f1":"code","9883afd0":"code","9e4049e3":"code","2ebfa3ef":"code","e0eac70b":"code","96afc4ed":"code","22be5adb":"code","551d2769":"code","4166e233":"code","76cdcc7f":"code","7708112c":"code","96f3c867":"code","7d8fa9c1":"code","cd26efc1":"code","00ef2d98":"code","2057e872":"code","b4849d04":"code","7ab024f2":"code","adc302c5":"code","ab9b0d8d":"code","02fe3022":"code","e070106c":"code","ced9b486":"code","1fb4c053":"code","fef221e2":"code","68468619":"code","1a5e259f":"code","c70db0e9":"code","be440fd5":"code","ad64537c":"code","0e18e979":"code","18ff846b":"code","73dbe2a2":"code","1efe438a":"code","44623718":"code","e532ba7d":"code","277a1399":"code","fb54a67b":"markdown","72d44a62":"markdown","7c322896":"markdown","01514754":"markdown","c18dc6ff":"markdown","209cbfc0":"markdown","c1dfc87a":"markdown","9cc48a4d":"markdown","f78d469b":"markdown","2ccf774c":"markdown","e250fdd0":"markdown","dac9d1cc":"markdown","16b2b580":"markdown","a2ac01f0":"markdown","299b7f56":"markdown","5cefd12c":"markdown","a89df37b":"markdown","9b2d124c":"markdown","201ecd95":"markdown","784cc56d":"markdown","317834d6":"markdown","6686aa5a":"markdown","b70c49d6":"markdown"},"source":{"96053628":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","adb66e87":"loans = pd.read_csv(\"\/kaggle\/input\/data-science-for-good-kiva-crowdfunding\/kiva_loans.csv\")","63bd6e9c":"variables = [\"loan_amount\", \"sector\", \"country_code\", \"term_in_months\", \"borrower_genders\", \"repayment_interval\"]\nloans.head()","2fa4b21c":"## create a \"funded\" column\n\nloans[\"funded\"] = ((loans[\"loan_amount\"] - loans[\"funded_amount\"]) \/ (loans[\"loan_amount\"] - loans[\"funded_amount\"]) - 1) * -1 \nloans[\"funded\"] = loans[\"funded\"].astype('bool')\nloans[loans[\"funded_amount\"] < loans[\"loan_amount\"]].head()\n","fd62ca11":"n_funded = loans[loans[\"funded\"] == True ].shape[0]\nn_tot = loans.shape[0]\n\nprint(\"{} out of {} loans got funded ({} %)\".format(n_funded, n_tot, round(n_funded\/n_tot*100)))\n","5a4947aa":"## get male\/female\nloans[\"borrower_genders\"]= loans[\"borrower_genders\"].astype(\"str\")\nloans[\"has_female\"] = loans[\"borrower_genders\"].astype(\"str\").apply(lambda x: \"female\" in x)\nloans[\"has_male\"] = loans[\"borrower_genders\"].astype(\"str\").apply(lambda x: len(x) == 4 or (len(x) > 6 and (len(x) % 8) != 6))","26a89851":"variables = [\"loan_amount\", \"sector\", \"term_in_months\", \"has_male\", \"has_female\", \"repayment_interval\", \"funded\"]\n\nloans_explore = loans[variables]\n\nloans_explore.head()\n","b8e7f7fb":"loans_explore[\"loan_amount\"].describe()","28b6224a":"loans_explore[\"sector\"].describe()","f9748364":"# loans_explore[\"country_code\"].hist()","0c3786bf":"loans_explore[\"repayment_interval\"].describe()","b0c800c3":"loans_explore[\"term_in_months\"].describe() ","acf468ef":"loans_explore[\"loan_amount\"].describe()","aabdc98e":"print(loans_explore.shape)\nprint(\"{} datapoints\".format(loans_explore.shape[0] * loans_explore.shape[1]))","c664f1ff":"l = loans_explore.copy()","4c5d4dc1":"## create dummy variables \nl = pd.concat([l.drop(\"sector\", axis = 1), pd.get_dummies(l[\"sector\"], prefix = \"sector\")], axis=1, sort=False)\n# pd.concat([l.drop(\"country_code\", axis = 1), pd.get_dummies(l[\"country_code\"], prefix = \"country\")], axis=1, sort=False)\nl = pd.concat([l.drop(\"repayment_interval\", axis = 1), pd.get_dummies(l[\"repayment_interval\"], prefix = \"repayment_interval\")], axis=1, sort=False)","43055fd6":"# convert bools to 1\/0\nl[\"has_male\"] = pd.to_numeric(l[\"has_male\"])\nl[\"has_female\"] = pd.to_numeric(l[\"has_female\"])\nl[\"funded\"] = pd.to_numeric(l[\"funded\"])","69f6996c":"# normalize loan amount, term in month\nl[\"loan_amount_norm\"] = l[\"loan_amount\"] \/ np.max(l[\"loan_amount\"]) # max is 100k\nl[\"term_in_months_norm\"] = l[\"term_in_months\"] \/ np.max(l[\"term_in_months\"]) # max is 158\n\nl = l.drop(\"loan_amount\", axis = 1)\nl = l.drop(\"term_in_months\", axis = 1)\nl.head()","d3f4e397":"l_false = l[l[\"funded\"] == False]","7b4d4244":"n_false_labels = l_false.shape[0]\nn_true_labels = l.shape[0] - n_false_labels\nfactor = round(n_true_labels \/ n_false_labels) - 1\nprint(\"inflate all false labels with a factor of {}\".format(factor))\nfalse_inflated = pd.concat([l_false] * factor)\nl = pd.concat([l, false_inflated])\nprint(\"now we have {} data points\".format(l.shape[0]))","fc9fd492":"l_fem = l[l[\"has_female\"] == True]\n\nfem_funded = l_fem[l_fem[\"funded\"] == True].shape[0]\nfem_tot = l_fem.shape[0]\n\nprint(\"{}\/{} females funded ({} %)\".format(fem_funded, fem_tot, round(100 * fem_funded\/fem_tot)))\n\nl_m = l[l[\"has_male\"] == True]\n\nm_funded = l_m[l_m[\"funded\"] == True].shape[0]\nm_tot = l_m.shape[0]\n\nprint(\"{}\/{} males funded ({} %)\".format(m_funded, m_tot, round(100 * m_funded\/m_tot)))\n","c4f8d911":"cm = l.corr()","928935f1":"alpha = ['ABC', 'DEF', 'GHI', 'JKL']\nalpha = l.columns\n\nfig_cm = plt.figure(figsize = (15, 15))\nax = fig_cm.add_subplot(111)\ncax = ax.matshow(cm, interpolation='nearest', cmap = 'Blues')\nfig_cm.colorbar(cax)\n\nplt.xticks(np.arange(0, len(l.columns)), rotation='vertical')\nplt.yticks(np.arange(0, len(l.columns)))\n\nax.set_xticklabels(['']+alpha)\nax.set_yticklabels(['']+alpha)\n\nplt.show()","9883afd0":"## let's import scikit learn\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix","9e4049e3":"# use only some variables\n# variables_used = [\"term_in_months_norm\", \"loan_amount_norm\", \"has_male\", \"has_female\", \"repayment_interval_bullet\", \"repayment_interval_irregular\", \"repayment_interval_monthly\", \"repayment_interval_weekly\"]\n\n# use all variables\nvariables_used = l.drop(\"funded\", axis = 1).columns","2ebfa3ef":"x = l.drop(\"funded\", axis = 1)[variables_used]\ny = l[\"funded\"]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)","e0eac70b":"x_train.head()","96afc4ed":"y_train.head()","22be5adb":"n_true = y[y == True].shape[0]\nn_false = y[y == False].shape[0]\nn = y.shape[0]\nprint(\"{} ({} %) true, {} false\".format(n_true, round(100 * n_true\/n), n_false))","551d2769":"rf_model = RandomForestClassifier(n_estimators = 100, criterion = 'entropy', random_state = 0)\nrf_model.fit(x_train, y_train)","4166e233":"train_score = rf_model.score(x_train, y_train)\ntest_score = rf_model.score(x_test, y_test)\n\nprint(\"train_score: {}\".format(train_score))\nprint(\"test_score: {}\".format(test_score))","76cdcc7f":"y_pred = rf_model.predict(x_test)\ncm = confusion_matrix(y_test, y_pred)\ncm","7708112c":"plot_confusion_matrix(rf_model, x_test, y_test, normalize = 'true')","96f3c867":"lr_model = LogisticRegression(max_iter = 1000)\nlr_model.fit(x_train, y_train)","7d8fa9c1":"train_score = lr_model.score(x_train, y_train)\ntest_score = lr_model.score(x_test, y_test)\n\nprint(\"train_score: {}\".format(train_score))\nprint(\"test_score: {}\".format(test_score))","cd26efc1":"plot_confusion_matrix(lr_model, x_test, y_test, normalize = 'true')","00ef2d98":"importance = rf_model.feature_importances_\nfeature = x.columns\n\nsort_order = np.argsort(importance)\n\nprint(importance)\nprint(feature)\n\nimportance = list(np.array(importance)[sort_order])\nfeature = list(np.array(feature)[sort_order])","2057e872":"%matplotlib inline\nfig = plt.figure(figsize = (12, 12))\n\nplt.barh(feature, importance, figure = fig)\nplt.show()","b4849d04":"## split l into funded and not funded\nlexp_funded = loans_explore[loans_explore[\"funded\"] == True]\nlexp_nfunded = loans_explore[loans_explore[\"funded\"] == False]\n","7ab024f2":"\nlexp_funded[\"loan_amount\"].hist(bins = 100, figsize = (12, 12), range = [0, 10000])","adc302c5":"lexp_funded[\"loan_amount\"].describe()","ab9b0d8d":"lexp_nfunded[\"loan_amount\"].hist(bins = 100, figsize = (12, 12), range = [0, 10000])","02fe3022":"lexp_nfunded[\"loan_amount\"].describe()","e070106c":"lexp_funded[\"term_in_months\"].hist(bins = 48, figsize = (12, 12), range = [0, 48])","ced9b486":"lexp_funded[\"term_in_months\"].describe()","1fb4c053":"lexp_nfunded[\"term_in_months\"].hist(bins = 48, figsize = (12, 12), range = [0, 48])","fef221e2":"lexp_nfunded[\"term_in_months\"].describe()","68468619":"# - Sub - Proposition 1: On average, loans consisting of longer loan periods are more likely to get funded through the Kiva Platform \n\n## 1. Loan term and loan amount are the most important variables\n\n## 2. \nl.corr()\n\n# corr loan_amount <-> funded = -0.214468\n# corr loan_term <-> funded = -0.276060\n\n","1a5e259f":"# - Sub - Proposition 2: On average, loans consisting of larger amounts are more likely to get funded\n\n## kolla distributions f\u00f6r funded\/not funded, g\u00f6r statistiskt test p\u00e5 om de \u00e4r olika\n\n\n\n","c70db0e9":"# - Sub - Proposition 3: On average, women take smaller loans than men \n\n## kolla distributions f\u00f6r m\u00e4n\/kvinnors l\u00e5nsize, g\u00f6r statistiskt test p\u00e5 om de \u00e4r olika\n\n\n","be440fd5":"# - Sub - Proposition 4: On average, women taking loans are more likely to have longer loan periods\n\n## kolla distributions f\u00f6r m\u00e4n\/kvinnors terms, g\u00f6r statistiskt test p\u00e5 om de \u00e4r olika\n\n\n","ad64537c":"# Sectors  - corr small amounts\nl.corr()[\"loan_amount_norm\"].sort_values()","0e18e979":"x1 = list(loans[loans['sector'] == 'Agriculture']['loan_amount'])\nx2 = list(loans[loans['sector'] == 'Housing']['loan_amount'])\nx3 = list(loans[loans['sector'] == 'Retail']['loan_amount'])\nx4 = list(loans[loans['sector'] == 'Clothing']['loan_amount'])\nx5 = list(loans[loans['sector'] == 'Entertainment']['loan_amount'])\nx6 = list(loans[loans['sector'] == 'Services']['loan_amount'])\nx0 = list(loans[loans['sector'] == 'Personal Use']['loan_amount'])\n\n\nplt.figure(figsize=(20,10))\n\n# Assign colors for each airline and the names\ncolors = ['pink', '#E69F00', '#56B4E9', '#F0E442', '#009E73', '#D55E00', 'purple']\nnames = ['Personal Use', 'Agriculture.', 'Housing', 'Retail', 'Clothing',\n         'Entertainment', 'Services']\n         \n# Make the histogram using a list of lists\n# Normalize the flights and assign colors and names\nplt.hist([x0, x1, x2, x3, x4, x5, x6], normed=True, # bins = \n         color = colors, label=names, range=(0, 10000))\n\n# Plot formatting\nplt.legend()\nplt.xlabel('Loan Amount (USD)')\nplt.ylabel('Normalized frequency')\nplt.title('Loan amount per Sector')","18ff846b":"# Sectors - corr loan terms\n\nl.corr()[\"term_in_months_norm\"].sort_values()","73dbe2a2":"x1 = list(loans[loans['sector'] == 'Retail']['term_in_months'])\nx2 = list(loans[loans['sector'] == 'Food']['term_in_months'])\nx3 = list(loans[loans['sector'] == 'Clothing']['term_in_months'])\nx4 = list(loans[loans['sector'] == 'Health']['term_in_months'])\nx5 = list(loans[loans['sector'] == 'Housing']['term_in_months'])\nx6 = list(loans[loans['sector'] == 'Education']['term_in_months'])\nx0 = list(loans[loans['sector'] == 'Personal Use']['term_in_months'])\n\n\nplt.figure(figsize=(20,10))\n\n# Assign colors for each airline and the names\ncolors = ['pink', '#E69F00', '#56B4E9', '#F0E442', '#009E73', '#D55E00', 'purple']\n\nnames = [\n'Personal Use'\n'Retail',\n'Food',\n'Clothing',\n'Health',\n'Housing',\n'Education',\n]\n\n         \n# Make the histogram using a list of lists\n# Normalize the flights and assign colors and names\nplt.hist([x0, x1, x2, x3, x4, x5, x6], normed=True, bins = 10,\n         color = colors, label=names, range=(0, 50))\n\n# Plot formatting\nplt.legend()\nplt.xlabel('Loan term (months)')\nplt.ylabel('Normalized frequency')\nplt.title('Loan term per Sector')","1efe438a":"loans_explore.head()","44623718":"x1 = list(loans_explore[loans_explore['has_male'] == True]['loan_amount'])\nx2 = list(loans_explore[loans_explore['has_female'] == True]['loan_amount'])\n\n\nplt.figure(figsize=(20,10))\n\n# Assign colors for each airline and the names\ncolors = ['#F0E442', '#009E73']\nnames = ['Male', 'Female']\n         \n# Make the histogram using a list of lists\n# Normalize the flights and assign colors and names\nplt.hist([x1, x2], normed=True, # bins = \n         color = colors, label=names, range=(0, 10000))\n\n# Plot formatting\nplt.legend()\nplt.xlabel('Loan Amount (USD)')\nplt.ylabel('Normalized frequency')\nplt.title('Loan amount per Gender')","e532ba7d":"x1 = list(loans_explore[loans_explore['has_male'] == True]['term_in_months'])\nx2 = list(loans_explore[loans_explore['has_female'] == True]['term_in_months'])\n\nplt.figure(figsize=(20,10))\n\n# Assign colors for each airline and the names\ncolors = ['#F0E442', '#009E73']\nnames = ['Male', 'Female']\n         \n# Make the histogram using a list of lists\n# Normalize the flights and assign colors and names\nplt.hist([x1, x2], normed=True, # bins = \n         color = colors, label=names, range=(0, 50))\n\n# Plot formatting\nplt.legend()\nplt.xlabel('Loan term (Months)')\nplt.ylabel('Normalized frequency')\nplt.title('Loan Term per Gender')","277a1399":"from scipy import stats\n\nmerged = pd.merge(\n    loans_explore[loans_explore['has_male'] == True]['term_in_months'].to_frame(),\n    loans_explore[loans_explore['has_female'] == True]['term_in_months'].to_frame(),\n    left_index=True,\n    right_index=True)\nmerged.head()\n\nstats.ks_2samp(merged.term_in_months_x, merged.term_in_months_y)","fb54a67b":"## 2. Train a logistic regression","72d44a62":"### 3.2.3 term in months of funded","7c322896":"## inflate data labelled as false","01514754":"### 3.2.4 loan term in months, not funded","c18dc6ff":"### 3.2.1 loan amount of funded","209cbfc0":"## Split the data into train and test","c1dfc87a":"## 3.2 See distributions\n\nSo, given that some features are more important than others, let's see if we can understand which values are more common for getting funded than others.\n\n\n","9cc48a4d":"# Training models","f78d469b":"### learnings from the above plot:\n\n- high correlations between having a female borrower and getting funded \n- negative correlation between having a male borrower and getting funded)\n- high correlation between irregular payments and funded (although, also high correlation between female and irregular payment, so this might explain it)\n- low loan term AND low loan amount has negative correlations to funded ==> shorter and smaller loans get funded easier (it's called microfinance for a reason I guess) \n","2ccf774c":"# Check correlations among variables\n","e250fdd0":"### 1.2. Validate by getting the accuracy and confusion matrix","dac9d1cc":"# 0. check current true\/false ratio","16b2b580":"## how many loans get funded?","a2ac01f0":"## what is the gender distribution for funded\/not funded?","299b7f56":"## Propositions\n\n- Sub - Proposition 1: On average, loans consisting of longer loan periods are more likely to get funded through the Kiva Platform \n\n- Sub - Proposition 2: On average, loans consisting of larger amounts are more likely to get funded\n\n- Sub - Proposition 3: On average, women take smaller loans than men \n\n- Sub - Proposition 4: On average, women taking loans are more likely to have longer loan periods\n\n- Sub - Proposition 5: Sector n\u00e5got","5cefd12c":"## transform gender variable to has_female, has_male","a89df37b":"## Variables\nWe have 6 variables: \n- \"loan_amount\" (numerical)\n- \"sector\" (categorical) \n- \"country_code\" (categorical)\n- \"term_in_months\" (numerical)\n- \"borrower_genders\" (categorical)\n- \"repayment_interval\" (categorical)\n","9b2d124c":"# 3. Analyze the results \n\n## 3.1 Get most important variables\n","201ecd95":"\n## We want to investigate:\n- Can we predict the probability of a loan getting funded?\n- Which variables are more important for getting funded?","784cc56d":"# 1. Variable analysis\n\nwe want to answer:\n- which are the variables and are they numerical or cathegorical?\n- what are the distributions?","317834d6":"# Data preparation\n\n## Variables\nWe have 6 variables: \n- \"loan_amount\" (numerical)\n- \"sector\" (categorical) -> dummy\n- \"country_code\" (categorical) --> dummy\n- \"term_in_months\" (numerical)\n- \"borrower_genders\" (categorical) --> dummy variables: \"has_female\", \"has_male\"\n- \"repayment_interval\" (categorical) --> dummy","6686aa5a":"### 3.2.2 loan amount of not funded","b70c49d6":"## 1. Train a Random Forest classifier\n### 1.1 train on 80% of the data"}}