{"cell_type":{"08e1c96f":"code","271fff68":"code","0f30d7e3":"code","f2e162d0":"code","31c9d45d":"code","6e1bee68":"markdown","bf687bd4":"markdown","fc6a85dd":"markdown"},"source":{"08e1c96f":"import pandas as pd\nimport os\n\nos.listdir('..\/input')\n\nStock_Market = pd.read_csv('..\/input\/Stock market data.csv')\ndf = pd.DataFrame(Stock_Market,columns=['Year','Month','Interest_Rate','Unemployment_Rate','Stock_Index_Price'])\nprint (df)","271fff68":"from pandas import DataFrame\nimport matplotlib.pyplot as plt\nplt.scatter(df['Interest_Rate'], df['Stock_Index_Price'], color='red')\nplt.title('Stock Index Price Vs Interest Rate', fontsize=14)\nplt.xlabel('Interest Rate', fontsize=14)\nplt.ylabel('Stock Index Price', fontsize=14)\nplt.grid(True)\nplt.show()\n \nplt.scatter(df['Unemployment_Rate'], df['Stock_Index_Price'], color='green')\nplt.title('Stock Index Price Vs Unemployment Rate', fontsize=14)\nplt.xlabel('Unemployment Rate', fontsize=14)\nplt.ylabel('Stock Index Price', fontsize=14)\nplt.grid(True)\nplt.show()  ","0f30d7e3":"from sklearn import linear_model\nimport statsmodels.api as sm\nX = df[['Interest_Rate','Unemployment_Rate']] # here we have 2 variables for multiple regression. If you just want to use one variable for simple linear regression, then use X = df['Interest_Rate'] for example.Alternatively, you may add additional variables within the brackets\nY = df['Stock_Index_Price']\n \n# with sklearn\nregr = linear_model.LinearRegression()\nregr.fit(X, Y)\n\nprint('Intercept: \\n', regr.intercept_)\nprint('Coefficients: \\n', regr.coef_)\n\n\n# prediction with sklearn\nNew_Interest_Rate = 2.75\nNew_Unemployment_Rate = 5.3\nprint ('Predicted Stock Index Price: \\n', regr.predict([[New_Interest_Rate ,New_Unemployment_Rate]]))\n\n# with statsmodels\nX = sm.add_constant(X) # adding a constant\n \nmodel = sm.OLS(Y, X).fit()\npredictions = model.predict(X) \n \nprint_model = model.summary()\nprint(print_model)\n","f2e162d0":"import tkinter as tk \nimport statsmodels.api as sm\nX = df[['Interest_Rate','Unemployment_Rate']] # here we have 2 input variables for multiple regression. If you just want to use one variable for simple linear regression, then use X = df['Interest_Rate'] for example.Alternatively, you may add additional variables within the brackets\nY = df['Stock_Index_Price'] # output variable (what we are trying to predict)\n\n# with sklearn\nregr = linear_model.LinearRegression()\nregr.fit(X, Y)\n\nprint('Intercept: \\n', regr.intercept_)\nprint('Coefficients: \\n', regr.coef_)\n\n\n# with statsmodels\nX = sm.add_constant(X) # adding a constant\n \nmodel = sm.OLS(Y, X).fit()\npredictions = model.predict(X) \n \n\n\n# tkinter GUI\nroot= tk.Tk() \n \ncanvas1 = tk.Canvas(root, width = 1200, height = 450)\ncanvas1.pack()\n\n# with sklearn\nIntercept_result = ('Intercept: ', regr.intercept_)\nlabel_Intercept = tk.Label(root, text=Intercept_result, justify = 'center')\ncanvas1.create_window(260, 220, window=label_Intercept)\n\n# with sklearn\nCoefficients_result  = ('Coefficients: ', regr.coef_)\nlabel_Coefficients = tk.Label(root, text=Coefficients_result, justify = 'center')\ncanvas1.create_window(260, 240, window=label_Coefficients)\n\n# with statsmodels\nprint_model = model.summary()\nlabel_model = tk.Label(root, text=print_model, justify = 'center', relief = 'solid', bg='LightSkyBlue1')\ncanvas1.create_window(800, 220, window=label_model)\n\n\n# New_Interest_Rate label and input box\nlabel1 = tk.Label(root, text='Type Interest Rate: ')\ncanvas1.create_window(100, 100, window=label1)\n\nentry1 = tk.Entry (root) # create 1st entry box\ncanvas1.create_window(270, 100, window=entry1)\n\n# New_Unemployment_Rate label and input box\nlabel2 = tk.Label(root, text=' Type Unemployment Rate: ')\ncanvas1.create_window(120, 120, window=label2)\n\nentry2 = tk.Entry (root) # create 2nd entry box\ncanvas1.create_window(270, 120, window=entry2)\n\n\ndef values(): \n    global New_Interest_Rate #our 1st input variable\n    New_Interest_Rate = float(entry1.get()) \n    \n    global New_Unemployment_Rate #our 2nd input variable\n    New_Unemployment_Rate = float(entry2.get()) \n    \n    Prediction_result  = ('Predicted Stock Index Price: ', regr.predict([[New_Interest_Rate ,New_Unemployment_Rate]]))\n    label_Prediction = tk.Label(root, text= Prediction_result, bg='orange')\n    canvas1.create_window(260, 280, window=label_Prediction)\n    \nbutton1 = tk.Button (root, text='Predict Stock Index Price',command=values, bg='orange') # button to call the 'values' command above \ncanvas1.create_window(270, 150, window=button1)\n \n\nroot.mainloop()","31c9d45d":"import matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nX = df[['Interest_Rate','Unemployment_Rate']].astype(float) # here we have 2 input variables for multiple regression. If you just want to use one variable for simple linear regression, then use X = df['Interest_Rate'] for example.Alternatively, you may add additional variables within the brackets\nY = df['Stock_Index_Price'].astype(float) # output variable (what we are trying to predict)\n\n# with sklearn\nregr = linear_model.LinearRegression()\nregr.fit(X, Y)\n\nprint('Intercept: \\n', regr.intercept_)\nprint('Coefficients: \\n', regr.coef_)\n\n\n# tkinter GUI\nroot= tk.Tk()\n\ncanvas1 = tk.Canvas(root, width = 500, height = 300)\ncanvas1.pack()\n\n# with sklearn\nIntercept_result = ('Intercept: ', regr.intercept_)\nlabel_Intercept = tk.Label(root, text=Intercept_result, justify = 'center')\ncanvas1.create_window(260, 220, window=label_Intercept)\n\n# with sklearn\nCoefficients_result  = ('Coefficients: ', regr.coef_)\nlabel_Coefficients = tk.Label(root, text=Coefficients_result, justify = 'center')\ncanvas1.create_window(260, 240, window=label_Coefficients)\n\n\n# New_Interest_Rate label and input box\nlabel1 = tk.Label(root, text='Type Interest Rate: ')\ncanvas1.create_window(100, 100, window=label1)\n\nentry1 = tk.Entry (root) # create 1st entry box\ncanvas1.create_window(270, 100, window=entry1)\n\n# New_Unemployment_Rate label and input box\nlabel2 = tk.Label(root, text=' Type Unemployment Rate: ')\ncanvas1.create_window(120, 120, window=label2)\n\nentry2 = tk.Entry (root) # create 2nd entry box\ncanvas1.create_window(270, 120, window=entry2)\n\n\ndef values(): \n    global New_Interest_Rate #our 1st input variable\n    New_Interest_Rate = float(entry1.get()) \n    \n    global New_Unemployment_Rate #our 2nd input variable\n    New_Unemployment_Rate = float(entry2.get()) \n    \n    Prediction_result  = ('Predicted Stock Index Price: ', regr.predict([[New_Interest_Rate ,New_Unemployment_Rate]]))\n    label_Prediction = tk.Label(root, text= Prediction_result, bg='orange')\n    canvas1.create_window(260, 280, window=label_Prediction)\n    \nbutton1 = tk.Button (root, text='Predict Stock Index Price',command=values, bg='orange') # button to call the 'values' command above \ncanvas1.create_window(270, 150, window=button1)\n \n\n#plot 1st scatter \nfigure3 = plt.Figure(figsize=(5,4), dpi=100)\nax3 = figure3.add_subplot(111)\nax3.scatter(df['Interest_Rate'].astype(float),df['Stock_Index_Price'].astype(float), color = 'r')\nscatter3 = FigureCanvasTkAgg(figure3, root) \nscatter3.get_tk_widget().pack(side=tk.RIGHT, fill=tk.BOTH)\nax3.legend() \nax3.set_xlabel('Interest Rate')\nax3.set_title('Interest Rate Vs. Stock Index Price')\n\n#plot 2nd scatter \nfigure4 = plt.Figure(figsize=(5,4), dpi=100)\nax4 = figure4.add_subplot(111)\nax4.scatter(df['Unemployment_Rate'].astype(float),df['Stock_Index_Price'].astype(float), color = 'g')\nscatter4 = FigureCanvasTkAgg(figure4, root) \nscatter4.get_tk_widget().pack(side=tk.RIGHT, fill=tk.BOTH)\nax4.legend() \nax4.set_xlabel('Unemployment_Rate')\nax4.set_title('Unemployment_Rate Vs. Stock Index Price')\n\nroot.mainloop()","6e1bee68":"The goal of this article is linear prediction based on Stock market data.A tkinter Graphical User Interface (GUI) to gather input from users, and then display the prediction results","bf687bd4":"Before you execute a linear regression model, it is advisable to validate that certain assumptions are met.\n\nAs noted earlier, you may want to check that a linear relationship exists between the dependent variable and the independent variable\/s.\n\nIn our example, you may want to check that a linear relationship exists between:\n\nThe Stock_Index_Price (dependent variable) and the Interest_Rate (independent variable); and\nThe Stock_Index_Price (dependent variable) and the Unemployment_Rate (independent variable)\nTo perform a quick linearity check, you can use scatter diagrams (utilizing the matplotlib library)\nAs you can see, a linear relationship exists in both cases:\n\nIn the first case, when interest rates go up, the stock index price also goes up\nIn the second case, when unemployment rates go up, the stock index price goes down (here we still have a linear relationship, but with a negative slope)\nNext, we are going to perform the actual multiple linear regression in Python.\n\nPerforming the Multiple Linear Regression\nOnce you added the data into Python, you may use both sklearn and statsmodels to get the regression results.\n\nEither method would work, but I\u2019ll show you both methods for illustration purposes.\n","fc6a85dd":"Imagine that you want to predict the stock index price after you collected the following data:\n\nInterest Rate = 2.75 (i.e., X1= 2.75)\nUnemployment Rate = 5.3 (i.e., X2= 5.3)\nIf you plug that data into the regression equation, you\u2019ll get the exact same predicted results as displayed in the second part:\n\nStock_Index_Price = (1798.4040) + (345.5401)*(2.75) + (-250.1466)*(5.3) = 1422.86"}}