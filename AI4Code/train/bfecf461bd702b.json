{"cell_type":{"237f4d49":"code","74a0a2d1":"code","588fbae6":"code","484dbe49":"code","5c0a564b":"code","17293f50":"code","56d0c0a1":"code","c7c1444f":"code","0e6d03ee":"code","586c3336":"code","fd9be65a":"code","5fcd0db7":"markdown","fff4b92a":"markdown"},"source":{"237f4d49":"import time\nimport numpy as np\nfrom sklearn.datasets import load_files\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_extraction.text import ENGLISH_STOP_WORDS\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer","74a0a2d1":"reviews_train = load_files('..\/input\/raw-imdb-data-for-sentiment-prediction\/train\/train')","588fbae6":"reviews_test = load_files('..\/input\/raw-imdb-data-for-sentiment-prediction\/test\/test')","484dbe49":"# Split data\ntext_train, y_train = reviews_train.data, reviews_train.target\ntext_test, y_test = reviews_test.data, reviews_test.target","5c0a564b":"# Remove formatting symbols\ntext_train = [doc.replace(b\"<br \/>\", b\" \") for doc in text_train]\ntext_test = [doc.replace(b\"<br \/>\", b\" \") for doc in text_test]","17293f50":"tfidf = TfidfVectorizer(ngram_range=(1, 3), min_df=5, max_df=0.8).fit(text_train)\nprint(\"Dictionary size: {}\".format(len(tfidf.vocabulary_)))\nprint(\"Dictionary:\\n{}\".format(tfidf.get_feature_names()[:100]))","56d0c0a1":"X_train = tfidf.transform(text_train)\nprint(\"bag_of_words: {}\".format(repr(X_train)))\nX_test = tfidf.transform(text_test)\nprint(\"bag_of_words: {}\".format(repr(X_test)))","c7c1444f":"# Finding the maximum value of each feature from a dataset\nmax_value = X_train.max(axis=0).toarray().ravel()\nsorted_by_tfidf = max_value.argsort()\n# Getting feature names\nfeature_names = np.array(tfidf.get_feature_names())\n\nprint(\"Features with smallest TF-IDF values:\\n{}\".format(\n    feature_names[sorted_by_tfidf[:20]]))\nprint(\"Features with the highest TF-IDF values: \\n{}\".format(\n    feature_names[sorted_by_tfidf[-20:]]))","0e6d03ee":"sorted_by_idf = np.argsort(tfidf.idf_)\nprint(\"Features with the smallest IDF values:\\n{}\".format(\n    feature_names[sorted_by_idf[:100]]))","586c3336":"start = time.time()\nmodel = LogisticRegression(solver='sag', C=25)\nmodel.fit(X_train, y_train)\nstop = time.time()\nprint(f\"Learning time: {stop - start} sec\")\nscore = model.score(X_test, y_test)\nprint('Score: {}'.format(score))","fd9be65a":"# Cross val score\nscores = cross_val_score(model, X_train, y_train, cv=5)\nprint(\"Average model score: {:.4f}\".format(np.mean(scores)))","5fcd0db7":"### Logistic Regression","fff4b92a":"## TfidfVectorizer"}}