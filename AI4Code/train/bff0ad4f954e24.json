{"cell_type":{"a8df7699":"code","7d165b30":"code","e9d598e9":"code","096d38c1":"code","7b106220":"code","2e3f5564":"code","235bff5f":"code","a51e18e6":"code","fb9a64d0":"code","979e3720":"code","21903d42":"code","d0990894":"code","eaefec55":"markdown","a237d9d8":"markdown","d5c90589":"markdown","27b983ef":"markdown","65dc000f":"markdown","4f9754db":"markdown","ced0a4a2":"markdown","1b2747a5":"markdown","8343be7c":"markdown","fd32bc0a":"markdown"},"source":{"a8df7699":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d165b30":"import pandas as pd\nimport numpy as np\nimport re\nimport sys\nimport matplotlib.pyplot as plt\nimport nltk\nimport gensim\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom gensim import corpora\nfrom nltk.tokenize import TweetTokenizer\nfrom wordcloud import WordCloud\nfrom string import punctuation\nfrom nltk.corpus import stopwords\nfrom nltk.probability import FreqDist\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nfrom gensim.models.ldamodel import LdaModel\nimport pyLDAvis.gensim\nfrom gensim.models.coherencemodel import CoherenceModel\nimport matplotlib.colors as mcolors\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer","e9d598e9":"tweets = pd.read_csv('\/kaggle\/input\/pfizer-vaccine-tweets\/vaccination_tweets.csv')\n\n#Cleaning Tweets\nstop_nltk= stopwords.words(\"english\")\nstop_updated= stop_nltk+[\"https\",'t.co','...']\nlemm= WordNetLemmatizer()\ntweet_tok=  TweetTokenizer()\n\ndef clean_text(text):\n    tokens= tweet_tok.tokenize(text.lower())\n    tokens1 = [re.sub(r'^https:\/\/t.co\/[\\w]+','',tok) for tok in tokens]\n    tokens2 = [re.sub(r'^@[\\w]+','',tok) for tok in tokens1]\n    tokens3 = [re.sub(r'^#[\\w]+','',tok) for tok in tokens2]\n    tokens4 = [re.sub(r'[0-9]+','',tok) for tok in tokens3]\n    lemmed=[lemm.lemmatize(term) for term in tokens4 if term not in  stop_updated and term not in list(punctuation) and len(term)>2]\n    res=' '.join(lemmed)\n    return res\n\ntweets['Clean_Tweets']= tweets['text'].apply(clean_text)","096d38c1":"clean_txt = [text.split() for text in tweets['Clean_Tweets'].to_list()]\n\n# Creating the term dictionary of corpus\ndictionary = corpora.Dictionary(clean_txt)\n\n#Creating DTM\ndoc_term_matrix = [dictionary.doc2bow(doc) for doc in clean_txt]\n\n# Running and Trainign LDA model on the document term matrix.\nldamodel = LdaModel(doc_term_matrix, num_topics=3, id2word = dictionary,\n                    passes=50, \n                    random_state=42)\nldamodel.print_topics(num_words=20)","7b106220":"def get_lda_topics(model, num_topics):\n    word_dict = {};\n    for i in range(num_topics):\n        words = model.show_topic(i, topn = 10);\n        word_dict['Topic # ' + '{:02d}'.format(i+1)] = [i[0] for i in words];\n    return pd.DataFrame(word_dict)\n\n# Getting Top 10 words in each Document\nget_lda_topics(ldamodel, 3)","2e3f5564":"pyLDAvis.enable_notebook()\nvis = pyLDAvis.gensim.prepare(ldamodel, doc_term_matrix, dictionary=ldamodel.id2word)\nvis","235bff5f":"# Compute Perplexity\nprint('Perplexity: ', ldamodel.log_perplexity(doc_term_matrix))\n\n# Compute Coherence\ncoherence_model_lda = CoherenceModel(model=ldamodel, texts=clean_txt, dictionary=ldamodel.id2word, coherence='c_v')\nwith np.errstate(invalid='ignore'):\n    lda_score = coherence_model_lda.get_coherence()\nprint('Coherence Score: ', lda_score)","a51e18e6":"def format_topics_sentences(ldamodel=None, corpus=doc_term_matrix, texts=clean_txt):\n    # Init output\n    sent_topics_df = pd.DataFrame()\n\n    # Get main topic in each document\n    for i, row_list in enumerate(ldamodel[corpus]):\n        row = row_list[0] if ldamodel.per_word_topics else row_list            \n        # print(row)\n        row = sorted(row, key=lambda x: (x[1]), reverse=True)\n        # Get the Dominant topic, Perc Contribution and Keywords for each document\n        for j, (topic_num, prop_topic) in enumerate(row):\n            if j == 0:  # => dominant topic\n                wp = ldamodel.show_topic(topic_num)\n                topic_keywords = \", \".join([word for word, prop in wp])\n                sent_topics_df = sent_topics_df.append(pd.Series([int(topic_num), round(prop_topic,4), topic_keywords]), ignore_index=True)\n            else:\n                break\n    sent_topics_df.columns = ['Dominant_Topic', 'Perc_Contribution', 'Topic_Keywords']\n\n    # Add original text to the end of the output\n    contents = pd.Series(texts)\n    sent_topics_df = pd.concat([sent_topics_df, contents], axis=1)\n    return(sent_topics_df)\n\n\ndf_topic_sents_keywords = format_topics_sentences(ldamodel=ldamodel, corpus=doc_term_matrix, texts=clean_txt)\n\n# Format\ndf_dominant_topic = df_topic_sents_keywords.reset_index()\ndf_dominant_topic.columns = ['Document_No', 'Dominant_Topic', 'Topic_Perc_Contrib', 'Keywords', 'Text']\ndf_dominant_topic.head(10)","fb9a64d0":"a = pd.DataFrame(df_dominant_topic['Dominant_Topic'].value_counts())\nsns.barplot(a.index,a.Dominant_Topic, palette='inferno')\nplt.title(\"Dominant Topic across Dataset\")\nplt.show()","979e3720":"doc_lens = [len(d) for d in df_dominant_topic.Text]\n\n# Plot\nplt.figure(figsize=(14,7))\nplt.hist(doc_lens, bins = 50, color='navy')\nplt.text(750, 100, \"Mean   : \" + str(round(np.mean(doc_lens))))\nplt.text(750,  90, \"Median : \" + str(round(np.median(doc_lens))))\nplt.text(750,  80, \"Stdev   : \" + str(round(np.std(doc_lens))))\nplt.text(750,  70, \"1%ile    : \" + str(round(np.quantile(doc_lens, q=0.01))))\nplt.text(750,  60, \"99%ile  : \" + str(round(np.quantile(doc_lens, q=0.99))))\n\nplt.gca().set(xlim=(0, 50), ylabel='Number of Documents', xlabel='Document Word Count')\nplt.tick_params(size=16)\nplt.xticks(np.linspace(0,50,4))\nplt.title('Distribution of Document Word Counts', fontdict=dict(size=22))\nplt.show()","21903d42":"cols = [color for name, color in mcolors.TABLEAU_COLORS.items()]  # more colors: 'mcolors.XKCD_COLORS'\n\ncloud = WordCloud(\n                  background_color='white',\n                  width=2500,\n                  height=1800,\n                  max_words=20,\n                  colormap='Spectral',\n                  color_func=lambda *args, **kwargs: cols[i],\n                  prefer_horizontal=1.0)\n\ntopics = ldamodel.show_topics(formatted=False)\n\nfig, axes = plt.subplots(1, 3, figsize=(15,15), sharex=True, sharey=True)\n\nfor i, ax in enumerate(axes.flatten()):\n    fig.add_subplot(ax)\n    topic_words = dict(topics[i][1])\n    cloud.generate_from_frequencies(topic_words, max_font_size=300)\n    plt.gca().imshow(cloud)\n    plt.gca().set_title('Topic ' + str(i), fontdict=dict(size=16))\n    plt.gca().axis('off')\n\n\nplt.subplots_adjust(wspace=0, hspace=0)\nplt.axis('off')\nplt.margins(x=0, y=0)\nplt.tight_layout()\nplt.show()","d0990894":"# Conducting Sentiment Analysis to draw further Inference\nanalyser= SentimentIntensityAnalyzer() \n\ndef get_vader_sentiment(sent):\n    return analyser.polarity_scores(sent)['compound']\n\ntweets['sent_vader']= tweets['Clean_Tweets'].apply(get_vader_sentiment)\n\nsent_pred=[]\nfor i in range(len(tweets['sent_vader'])):\n    if tweets['sent_vader'][i]>=0.05:\n        sent_pred.append('positive')\n    elif tweets['sent_vader'][i]<=-0.05:\n        sent_pred.append('negative')\n    else:\n        sent_pred.append('neutral')  \n\ntweets['sent_pred']= sent_pred\nmerge1 = pd.concat([df_dominant_topic,tweets[['sent_pred','sent_vader']]],axis=1)\nm1 = pd.DataFrame(merge1.groupby(['Dominant_Topic','sent_pred'])['Text'].count())\n\ncross_tab= pd.crosstab(index=merge1['Dominant_Topic'],columns=merge1['sent_pred'])\ncross_tab.plot(kind='bar', figsize=(10,7), colormap=\"viridis\")\nplt.xticks(rotation=0)\nplt.title(\"Sentiments in Dominant Topics\")\nax= plt.subplot(111)\nax.legend(loc=\"upper center\",bbox_to_anchor=(00.5,1.00),ncol=4,fancybox=True,shadow=True)","eaefec55":"* Analysing the Topic Cluster, \n  - Cluster-1 has a positive outlook with terms such as 'grateful', 'good', 'thanks' & 'received' \n  - Cluster-2 has a concerned outlook with terms such as 'emergency', 'injection', 'sore' & 'health'\n  - Cluster-3 has a negative outlook with terms such as 'ban', 'red', 'death', 'mutation', 'protect' & 'please'\n  \n*  Most Tweets belong to Cluster-1, Cluster-2 & Cluster-3 (descending order) \n\n* It is seen that percentage of positive sentiment tweet is highest in Cluster-1 justifying the positive outlook in the Tweets topics\n\n* In Cluster-2, Neutral statement Tweets are highest\n\n* In Cluster-3, it is seen thet in comparison to other two Topic Clusters, the number or count of Negative sentiment Tweets in highest Cluster -3 with 207 tweets","a237d9d8":"## Top words in each Topic Cluster","d5c90589":"## Topics wise Sentiment Analysis\n","27b983ef":"## Calculating Perplexity & Coherence","65dc000f":"## Visualizing Topic Clusters","4f9754db":"## Importing the Required Libraries","ced0a4a2":"## Topic Modeling","1b2747a5":"## Dominant Topic Analysis","8343be7c":"## Frequency Distribution of Word Counts in Documents","fd32bc0a":"## Conclusion"}}