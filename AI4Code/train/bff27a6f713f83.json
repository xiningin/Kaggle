{"cell_type":{"0ffef13b":"code","6383bc0f":"code","75c2d046":"code","1270133c":"code","9d26627f":"code","f420981a":"code","0e39cf57":"code","8be96d73":"code","d9257521":"code","1e8379fb":"code","60082362":"code","6c98dbdb":"code","45c7985a":"code","8505c3c2":"code","27a6e5eb":"code","6be0a48d":"code","f8367b8e":"code","f85b6d40":"code","b5ce30da":"code","6a4fcbb3":"code","db225f3e":"code","aea599e5":"code","5eefbd74":"code","1791fd99":"code","e008d5cd":"code","27e13b07":"code","2b5ed169":"code","86a6caef":"code","44135e50":"code","5433ee8a":"code","19e14622":"code","e308d4cd":"code","07ec6e73":"code","dd0a24de":"markdown","aaaaf008":"markdown","a3e00496":"markdown","2b3660a2":"markdown","5ce1b403":"markdown","be3c84c0":"markdown","98bfb7f6":"markdown","2751dbc9":"markdown","b7bbcdf1":"markdown"},"source":{"0ffef13b":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","6383bc0f":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","75c2d046":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","1270133c":"train.info()","9d26627f":"test.info()","f420981a":"all = pd.concat([train, test], sort = False)\nall.info()","0e39cf57":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","8be96d73":"all.info()","d9257521":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","1e8379fb":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","60082362":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","6c98dbdb":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","45c7985a":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","8505c3c2":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","27a6e5eb":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","6be0a48d":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","f8367b8e":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","f85b6d40":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","b5ce30da":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","6a4fcbb3":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","db225f3e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101, stratify = all_train['Survived'])","aea599e5":"from sklearn.linear_model import LogisticRegression","5eefbd74":"logmodel = LogisticRegression(solver = 'liblinear')\nlogmodel.fit(X_train,y_train)","1791fd99":"predictions = logmodel.predict(X_test)\npredictions","e008d5cd":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","27e13b07":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)","2b5ed169":"all_test.head()","86a6caef":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","44135e50":"TestForPred.info()","5433ee8a":"t_pred = logmodel.predict(TestForPred).astype(int)","19e14622":"PassengerId = all_test['PassengerId']","e308d4cd":"logSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nlogSub.head()","07ec6e73":"logSub.to_csv(\"1_Logistics_Regression_Submission.csv\", index = False)","dd0a24de":"****Confusion Matrix","aaaaf008":"# Import Libraries","a3e00496":"****Check Accuracy","2b3660a2":"# Import Data","5ce1b403":"## Combine train and test","be3c84c0":"****Train\/Test Split","98bfb7f6":"****Extra Features:","2751dbc9":"****Final Predictions","b7bbcdf1":"****Build Logistic Model"}}