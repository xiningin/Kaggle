{"cell_type":{"c4586917":"code","545d173c":"code","fc797a60":"code","032ef394":"code","c0d7f098":"code","a947e330":"code","2f4ccd89":"code","a405f698":"code","065fc7c1":"code","5c5d56db":"code","b33d8dca":"markdown","a8c7c2c7":"markdown"},"source":{"c4586917":"import matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\nimport numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","545d173c":"import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","fc797a60":"col_names = ['pregnant', 'glucose', 'bp', 'skin', 'insulin', 'bmi', 'pedigree', 'age', 'label']\npima = pd.read_csv(\"..\/input\/pima-indians-diabetes.csv\")\npima.columns = col_names\npima.head()","032ef394":"feature_cols = ['pregnant', 'insulin', 'bmi', 'age','glucose','bp','pedigree']\nX = pima[feature_cols] # Features\ny = pima.label # Target variable","c0d7f098":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1) # 70% training and 30% test\n","a947e330":"clf = DecisionTreeClassifier()\n#default kriteri ginidir.\n#gini entropy'e oranla daha hizli oldugu icin default olarak kullanilmaktadir.\n\nclf = clf.fit(X_train, y_train)\n\ny_pred = clf.predict(X_test)","2f4ccd89":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n","a405f698":"from sklearn.tree import export_graphviz\nfrom sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nimport pydotplus\n\ndot_data = StringIO()\nexport_graphviz(clf, out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True,feature_names = feature_cols,class_names=['0','1'])\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('diabetes_1.png')\nImage(graph.create_png())","065fc7c1":"clf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)\n#entropy olarak ayarlaniyor, max depth agacin derinlik sayisidir.\n\nclf = clf.fit(X_train,y_train)\n\ny_pred = clf.predict(X_test)\n\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","5c5d56db":"from sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus\ndot_data = StringIO()\nexport_graphviz(clf, \n                out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True, \n                feature_names = feature_cols,class_names=['0','1']\n               )\n\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('diabetes_2.png')\nImage(graph.create_png())","b33d8dca":"# **Decision Trees**","a8c7c2c7":"**Decision Tree Classifiers**"}}