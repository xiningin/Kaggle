{"cell_type":{"d3da8c32":"code","ae343612":"code","04172c1b":"code","63f27822":"code","d5944d91":"code","cbca434b":"code","224eb2bd":"code","85eea4fa":"code","d9a75208":"code","476151f0":"code","fca2729e":"code","7a4f75ac":"code","02ff0139":"code","d2e4f773":"code","96f9509c":"code","5aefa23e":"code","e2a3907a":"code","5cac4c9e":"code","6d9537ec":"code","5578916a":"code","02c8946d":"code","ebb2b5db":"markdown","007ea66c":"markdown","13b5994c":"markdown","9a6ea1ec":"markdown","35e1b7a5":"markdown"},"source":{"d3da8c32":"import pandas as pd\nimport numpy as np\nimport math\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nimport xgboost\nfrom sklearn import preprocessing","ae343612":"original_train_df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\noriginal_test_df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')\ngdp_df = pd.read_csv('..\/input\/gdp-20152019-finland-norway-and-sweden\/GDP_data_2015_to_2019_Finland_Norway_Sweden.csv')\n\n# gdp_df\uc758 \uc778\ub371\uc2a4\ub97c \ub144\ub3c4\ub85c \uc124\uc815\ud574\uc90c\ngdp_df.set_index('year', inplace=True)\n\n# \ubb38\uc790\ud615\uc778 date \uceec\ub7fc\uc744 datatime\ud615\uc73c\ub85c \ubcc0\ud658\ud574\uc90c\nfor df in [original_train_df, original_test_df]:\n    df['date'] = pd.to_datetime(df.date)\noriginal_train_df.head(2)","04172c1b":"original_train_df.shape","63f27822":"original_train_df['date']","d5944d91":"original_train_df.head()","cbca434b":"original_test_df.shape","224eb2bd":"original_test_df.head()","85eea4fa":"gdp_df","d9a75208":"def smape_loss(y_true, y_pred):\n    \"\"\"SMAPE Loss\"\"\"\n    return np.abs(y_true - y_pred) \/ (y_true + np.abs(y_pred)) * 200","476151f0":"# Feature engineering\n# \uacc4\uc808 \uc8fc\uae30\uc131\uc744 \uace0\ub824\ud55c Feature engineering\uc740 \ucd94\ud6c4\uc5d0 \ud560 \uc608\uc815 \ndef engineer(df):\n    \"\"\"Return a new dataframe with the engineered features\"\"\"\n    \n    def get_gdp(row):\n        country = 'GDP_' + row['country']\n        return gdp_df.loc[row['date'].year, country]\n    \n    new_df = pd.DataFrame({'gdp': np.log(df.apply(get_gdp, axis = 1)),\n                          'wd4': df.date.dt.weekday == 4, # \uae08\uc694\uc77c\n                          'wd56': df.date.dt.weekday >= 5, # \ud1a0\uc694\uc77c, \uc77c\uc694\uc77c\n                          })\n    \n    # \uae30\uc874 \uceec\ub7fc \uc6d0-\ud56b \uc778\ucf54\ub529\n    for country in ['Finland', 'Norway']:\n        new_df[country] = df['country'] == country\n    new_df['KaggleRama'] = df['store'] == 'KaggleRama'\n    for product in ['Kaggle Mug', 'Kaggle Hat']:\n        new_df[product] = df['product'] == product\n\n    # \uacc4\uc808\uc758 \uc8fc\uae30\uc131\n    # 3\uac1c\uc758 \uc81c\ud488\ub4e4\uc740 \ub2e4\ub978 \uacc4\uc808 \ud328\ud134\uc744 \ubcf4\uc778\ub2e4.\n    dayofyear = df.date.dt.dayofyear # \ud574\ub2f9 \ub0a0\uc9dc\uac00 365\uc77c \uc911 \uc5bc\ub9c8\ub098 \uc9c0\ub0ac\ub294\uc9c0 \uc54c\ub824\uc8fc\ub294 \ud568\uc218\n    for k in range(1, 3):\n        new_df[f'sin{k}'] = np.sin(dayofyear \/ 365 * 2 * math.pi * k)\n        new_df[f'cos{k}'] = np.cos(dayofyear \/ 365 * 2 * math.pi * k)\n        new_df[f'mug_sin{k}'] = new_df[f'sin{k}'] * new_df['Kaggle Mug']\n        new_df[f'mug_cos{k}'] = new_df[f'cos{k}'] * new_df['Kaggle Mug']\n        new_df[f'hat_sin{k}'] = new_df[f'sin{k}'] * new_df['Kaggle Hat']\n        new_df[f'hat_cos{k}'] = new_df[f'cos{k}'] * new_df['Kaggle Hat']\n        \n    return new_df\n\ntrain_df = engineer(original_train_df)\ntrain_df['date'] = original_train_df['date']\ntrain_df['num_sold'] = original_train_df['num_sold'].astype(np.float32)\ntest_df= engineer(original_test_df)\n\nfeatures = test_df.columns\n\nfor df in [train_df, test_df]:\n    df[features] = df[features].astype(np.float32)\n\nprint(list(features))","fca2729e":"def LabelEncoding(df):\n    def get_gdp(row):\n        country = 'GDP_' + row['country']\n        return gdp_df.loc[row['date'].year, country]\n        \n    new_df = pd.DataFrame({'gdp': np.log(df.apply(get_gdp, axis = 1)),\n                        'wd4': df.date.dt.weekday == 4, # \uae08\uc694\uc77c\n                        'wd56': df.date.dt.weekday >= 5, # \ud1a0\uc694\uc77c, \uc77c\uc694\uc77c\n                        })\n        \n    # \uae30\uc874 \uceec\ub7fc \ub77c\ubca8\uc778\ucf54\ub529\n    features = ['country','store', 'product']\n    le = preprocessing.LabelEncoder()\n    for feature in features:\n        le.fit(df[feature])\n        new_df[feature] = le.transform(df[feature])\n    return new_df\n\ntrain_df_label = LabelEncoding(original_train_df)\ntrain_df_label['date'] = original_train_df['date']\ntrain_df_label['num_sold'] = original_train_df['num_sold'].astype(np.float32)\ntest_df_label= LabelEncoding(original_test_df)","7a4f75ac":"train_df_label['wd4'] = train_df_label['wd4'].astype(int)\ntrain_df_label['wd56'] = train_df_label['wd56'].astype(int)\ntest_df_label['wd4'] = test_df_label['wd4'].astype(int)\ntest_df_label['wd56'] = test_df_label['wd56'].astype(int)","02ff0139":"train_df_label.head()","d2e4f773":"test_df_label.head()","96f9509c":"train_df.head()","5aefa23e":"train_df.drop('date',axis = 1, inplace = True)","e2a3907a":"test_df.head()","5cac4c9e":"X = train_df.drop('num_sold', axis = 1)\ny = train_df['num_sold']","6d9537ec":"model = xgboost.XGBRegressor()\nmodel.fit(X,y)\npred = model.predict(test_df)","5578916a":"sub = original_test_df[['row_id']].copy()\nsub['num_sold'] = pred\nsub.to_csv('submission_XGboost_model.csv', index=False)","02c8946d":"sub_rounded = sub.copy()\nsub_rounded['num_sold'] = sub_rounded['num_sold'].round()\nsub_rounded.to_csv('submission_XGboost_model_rounded.csv', index=False)\nsub_rounded","ebb2b5db":"# LabelEncoding","007ea66c":"# Data Explore","13b5994c":"# Holidays \ucd94\uac00","9a6ea1ec":"# Data Loading","35e1b7a5":"# Simple feature engineering (without holidays)\nin this simple model, we consider the following:\n\n* country, store, product\n* weekdays\n* seasonal variations per product as a Fourier series with wavelengths from 1 year down to 18 days\n* country's GDP\n\nThe residuals of this simple model will permit us to understand the effect of holidays."}}