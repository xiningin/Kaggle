{"cell_type":{"7a49843c":"code","87a11bcc":"code","32f601bc":"code","1e1255af":"code","8db5c275":"code","e13a0a02":"code","630603d1":"code","8c12877c":"code","b024a3fa":"code","73f33c55":"code","818bcd39":"code","bc5fecc7":"code","4b454458":"code","09132451":"code","cfada10c":"code","a2b60147":"code","b4acb8a5":"code","06ce731f":"code","de4d1e8e":"code","6e5aa64e":"code","3cdf26c6":"code","53d13b6a":"code","c2607f79":"code","03c32042":"code","2a286bc7":"markdown","ecfd973b":"markdown","436f4901":"markdown","1d1433ac":"markdown","6852cc3a":"markdown","7b5a04a3":"markdown","37b44a99":"markdown","fcb83484":"markdown","22cbd702":"markdown","3352dab0":"markdown","eae48a47":"markdown","2f31d2c9":"markdown","0e1ffb57":"markdown"},"source":{"7a49843c":"## importing file\nimport pandas as pd\nimport numpy as np\n\n# Visualization \nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns; sns.set()\nimport plotly.express as px\nplt.style.use('seaborn-whitegrid')\nimport missingno as msn\n\n#map\nimport geopandas\nfrom shapely.geometry import Point\nimport plotly.graph_objects as go\n","87a11bcc":"df = pd.read_csv(\"..\/input\/online-classes-survey-bangladesh\/EEE17BUET.csv\")","32f601bc":"for i in range(len(df)):\n    listi = df.iloc[i]['District'].split()\n    new_value = listi[0]\n    df[\"District\"]= df[\"District\"].str.replace(df.iloc[i]['District'], new_value, case = True) \nprint(df.District.value_counts())","1e1255af":"# Getting to know GEOJSON file:\ncountry = geopandas.read_file(\"..\/input\/geometry\/bangladesh.json\")\n\n#check the data\ncountry.head()\nprint(type(country))\ntype(country.geometry)\ntype(country.geometry[0])\n\n#plot the map\nfig = country.plot(figsize = (200, 50))\n\n#create an empty dataframe to store the lat,long, name, and cases\nmyDF = pd.DataFrame()\nmyDF['Lat'] = country.geometry.centroid.x\nmyDF['Long'] = country.geometry.centroid.y\nmyDF['Zilla'] = country['NAME_2']\n\n#write the name of all zillas in a list\nallZilla = '\\n'.join(zillas for zillas in list(myDF.iloc[:,2]))","8db5c275":"for i in range(len(df)):\n    if((df.iloc[i][\"District\"] in allZilla) == False): print(df.iloc[i][\"District\"])","e13a0a02":"df[\"District\"]= df[\"District\"].str.replace(\"Chapai\", \"Nawabganj\", case = True)\ndf[\"District\"]= df[\"District\"].str.replace(\"Netrokona\", \"Netrakona\", case = True)\ndf[\"District\"]= df[\"District\"].str.replace(\"Moulvibazar\", \"Maulvibazar\", case = True)\ndf[\"District\"]= df[\"District\"].str.replace(\"Brahmanbaria\", \"Brahamanbaria\", case = True)","630603d1":"for i in range(len(df)):\n    if((df.iloc[i][\"District\"] in allZilla) == False): print(df.iloc[i][\"District\"])","8c12877c":"new = pd.DataFrame()\nnew = df['District']\ncaselist = []\nlisti = new.value_counts().reset_index().values.tolist()\n\nonlyNames = []\nfor i in range(len(listi)):\n    onlyNames.append(listi[i][0])\nprint(onlyNames)\n\nfor i in range(len(country['NAME_2'])):\n    if((country.iloc[i]['NAME_2'] in onlyNames) == False): caselist.append(0)\n    else: \n        ind = onlyNames.index(country.iloc[i]['NAME_2'])\n        caselist.append(listi[ind][1])\n\nprint(caselist)","b024a3fa":"country.head()","73f33c55":"country['cases'] = caselist","818bcd39":"country.head()","bc5fecc7":"fig, ax = plt.subplots(figsize=(15,10))\nmyPlt = country.plot(column = 'cases',cmap='PRGn',ax=ax,edgecolor='k')\nax.set_axis_off()\nax.set(title='People staying in respective areas')\n\nfig = myPlt.get_figure()\nfig.savefig(\"output_country.png\")","4b454458":"print(df.Required_device.value_counts())\nsplot = sns.barplot(df.Required_device.value_counts().index, df['Required_device'].value_counts().values, alpha=0.8)\nsplot.set_title('Have Required Device')\nfor p in splot.patches:\n    splot.annotate(format(int(p.get_height())), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n\nfig = splot.get_figure()\nfig.savefig(\"required_device.png\")","09132451":"print(df.Broadband.value_counts())\nsplot = sns.barplot(df.Required_device.value_counts().index, df['Broadband'].value_counts().values, alpha=0.8)\nsplot.set_title('Have Broadband connection')\nfor p in splot.patches:\n    splot.annotate(format(int(p.get_height())), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n    \nfig = splot.get_figure()\nfig.savefig(\"Broadband.png\")","cfada10c":"print(df.two_month_net.value_counts())\nsplot = sns.barplot(df.Required_device.value_counts().index, df['two_month_net'].value_counts().values, alpha=0.8)\nsplot.set_title('Support two month net connecton')\nfor p in splot.patches:\n    splot.annotate(format(int(p.get_height())), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n\nfig = splot.get_figure()\nfig.savefig(\"two_month_net.png\")","a2b60147":"print(df.Cellular.value_counts())\n\nfigu = df.Cellular.value_counts().plot(kind='pie', \n                                    figsize = (5,5), \n                                    autopct = lambda p : '{:,.0f}'.format(p * df.Cellular.count()\/100) , \n                                    subplots = True,\n                                    colormap = \"plasma_r\", \n                                    title = 'Cellular Network Type', \n                                    fontsize = 15)\nfig.savefig(\"cellular_network.png\")","b4acb8a5":"print(df.Net_speed.value_counts())","06ce731f":"print(df.Hall.value_counts())\n\ndf.Hall.value_counts().plot(kind='pie', \n                                    figsize = (5,5), \n                                    autopct = lambda p : '{:,.0f}'.format(p * df.Hall.count()\/100) , \n                                    subplots = False,\n                                    colormap = 'Accent', \n                                    title = 'Resident\/Attached', \n                                    legend= True, \n                                    fontsize = 15)","de4d1e8e":"print(df.Books.value_counts())\n\ndf.Books.value_counts().plot(kind='pie', \n                                    figsize = (5,5), \n                                    autopct = lambda p : '{:,.0f}'.format(p * df.Books.count()\/100) , \n                                    subplots = False,\n                                    colormap = 'coolwarm_r', \n                                    title = 'Where our books are', \n                                    legend= True, \n                                    fontsize = 15)","6e5aa64e":"print(df.Class_System.value_counts())\n\n#process the datas manually\nrecorded = []\nrecorded.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Uploaded Lecture Notes (PPT, Word or PDF)']))\nrecorded.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials']))\nrecorded.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Online Conference Platforms (like Zoom), Uploaded Lecture Notes (PPT, Word or PDF)']))\nrecorded.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Online Conference Platforms (like Zoom), Facebook Live, Uploaded Lecture Notes (PPT, Word or PDF)']))\nrecorded.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Facebook Live, Uploaded Lecture Notes (PPT, Word or PDF)']))\nrecorded.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Online Conference Platforms (like Zoom)']))\n\nuploaded = []\nuploaded.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Uploaded Lecture Notes (PPT, Word or PDF)']))\nuploaded.append(len(df.loc[df['Class_System'] == 'Uploaded Lecture Notes (PPT, Word or PDF)']))\nuploaded.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Online Conference Platforms (like Zoom), Uploaded Lecture Notes (PPT, Word or PDF)']))\nuploaded.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Online Conference Platforms (like Zoom), Facebook Live, Uploaded Lecture Notes (PPT, Word or PDF)']))\nuploaded.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Facebook Live, Uploaded Lecture Notes (PPT, Word or PDF)']))\nuploaded.append(len(df.loc[df['Class_System'] == 'Online Conference Platforms (like Zoom), Facebook Live, Uploaded Lecture Notes (PPT, Word or PDF)']))\nuploaded.append(len(df.loc[df['Class_System'] == 'Online Conference Platforms (like Zoom), Uploaded Lecture Notes (PPT, Word or PDF)']))\n\nconference = []\nconference.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Online Conference Platforms (like Zoom), Uploaded Lecture Notes (PPT, Word or PDF)']))\nconference.append(len(df.loc[df['Class_System'] == 'Online Conference Platforms (like Zoom)']))\nconference.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Online Conference Platforms (like Zoom), Facebook Live, Uploaded Lecture Notes (PPT, Word or PDF)']))\nconference.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Facebook Live, Uploaded Lecture Notes (PPT, Word or PDF)']))\nconference.append(len(df.loc[df['Class_System'] == 'Online Conference Platforms (like Zoom), Facebook Live, Uploaded Lecture Notes (PPT, Word or PDF)']))\nconference.append(len(df.loc[df['Class_System'] == 'Online Conference Platforms (like Zoom), Uploaded Lecture Notes (PPT, Word or PDF)']))\n\nfacebook = []\nfacebook.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Online Conference Platforms (like Zoom), Facebook Live, Uploaded Lecture Notes (PPT, Word or PDF)']))\nfacebook.append(len(df.loc[df['Class_System'] == 'Recorded Video Tutorials, Facebook Live, Uploaded Lecture Notes (PPT, Word or PDF)']))\nfacebook.append(len(df.loc[df['Class_System'] == 'Online Conference Platforms (like Zoom), Facebook Live, Uploaded Lecture Notes (PPT, Word or PDF)']))\nfacebook.append(len(df.loc[df['Class_System'] == 'Facebook Live']))\n\n","3cdf26c6":"labels = ['Recorded Video', 'Online Conference Platforms', 'Uploaded Lecture Notes (PPT, Word or PDF)', 'Facebook Live']\nsizes = [sum(recorded), sum(uploaded), sum(conference), sum(facebook)]\n\nimport plotly.graph_objects as go\n\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(\n            x=labels, y=sizes,\n            text=sizes,\n            textposition='auto',\n        )])\n\nfig.update_traces(marker_color='rgb(158,100,225)', marker_line_color='rgb(8,48,107)',\n                  marker_line_width=3)\nfig.update_layout(title_text='Feasible system for classtaking (one selected multiple option)')\nfig.show()\n","53d13b6a":"print(df.Ct.value_counts())\n\nfig = plt.figure(figsize= (16,4))\nsplot = sns.barplot(df.Ct.value_counts().index, df['Ct'].value_counts().values, alpha=0.8, palette = sns.color_palette('spring'))\nsplot.set_title('Preferred assessment methods')\nfor p in splot.patches:\n    splot.annotate(format(int(p.get_height())), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\nfig.show()\n\nfig = splot.get_figure()\nfig.savefig(\"preferred_exam.png\")","c2607f79":"print(df.Comments.value_counts())\nComments = [\"feasible for EVERYBODY(NOT MAJORITY)\",\n        \"internet slow\",\n        \"no broadband\",\n        \"location can't provide live stream for zoom\",\n        \"lives in Dhaka and has broadband connection, still often disconnected for bad weather\",\n        \"go outside for good connection\",\n        \"recorded class ok\",\n        \"loadshedding due to bad weather\",\n        \"online class to lessen pressure of offline class\",\n        \"must be recorded\",\n        \"overwhelmed by the current epidemic, can't concentrate\",\n        \"need internet cost fund\",\n        \"power cut can harm attendence\",\n        \"broadband connection not cost effective\",\n        \"pdf ok\",\n        \"don't have all the books\",\n        \"impossible if long term\",\n        \"class test replaced by assignment\",\n        \"taking attendance postponed\",\n        \"make zoom free for students and teachers\"]\nfor i in range(len(Comments)):\n    print(Comments[i])\n\nwith open(\"comments.txt\", \"w\") as outfile:\n    outfile.write(Comments)","03c32042":"print(len(df))","2a286bc7":"## Prefered assessment methods\nThe survey was made to see how they prefer their daily assessments should be taken in this situation\n","ecfd973b":"# Feature analysis","436f4901":"## District\nWhere ae they living currently","1d1433ac":"##  Broadband\nDo people have proper broadband connections","6852cc3a":"## Class System\n\/\/this needs to be checked if dataset is changed\nPeople were given 4 options, people could choose any of them, multiple selection was allowed too. So manual processing was demanded","7b5a04a3":"## two_month_net\nIf they can affort buying mobile data for 2 months straight","37b44a99":"## Where left the books\nAs this was a case of emergency, many people left their books in the Hall","fcb83484":"Bangladesh is a developing country. During this lockdown situation, we are struggling to continue our surveys. The data was taken from BUET: a renowned enginnering university in Bangladesh. The survey was done to check the feasibility of online classes","22cbd702":"## Hall\nHall is synonymous to dorm, 'Resident' means the people who stay in the 'Hall', attached means the people who stay at home","3352dab0":"## Comments\nPeople gave their opinion about online class, so I had to manually go through them and write the end result","eae48a47":"## Required Device\nDo they have the required device to continue online classes","2f31d2c9":"## Cellular net type","0e1ffb57":"## Net speed\nHere I just saw people's net connection"}}