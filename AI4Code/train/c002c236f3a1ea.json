{"cell_type":{"5d0fa88a":"code","a33bd524":"code","d81d10e1":"code","d348a9c9":"code","fd1aba7d":"code","084e319f":"code","12d24b0e":"code","72818c11":"code","986f15d6":"code","68dbd182":"code","73f8c994":"markdown"},"source":{"5d0fa88a":"import pandas as pd\nimport numpy as np\nimport random\nimport time\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport seaborn as sns\n\nfrom tqdm import tqdm\n\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nfrom xgboost import XGBRegressor, XGBClassifier\nfrom lightgbm import LGBMClassifier, LGBMRegressor\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import RobustScaler, StandardScaler, MinMaxScaler, QuantileTransformer, KBinsDiscretizer\nfrom sklearn.metrics import mean_squared_error, roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.ensemble import StackingRegressor, StackingClassifier\nfrom sklearn.impute import SimpleImputer\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import Input, Dense,   Dropout,  Concatenate, Embedding,  Flatten, Add, Average\nfrom tensorflow.keras.models import Model\n\ntf.config.set_visible_devices([], 'GPU')\n\nimport optuna\nfrom optuna.samplers import TPESampler\n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport gc","a33bd524":"SEED = 2021\nTARGET = \"target\"\n\nN_SPLITS = 20\nN_ESTIMATORS=15000\nDEVICE = 'GPU'\n\nLOSS = 'CrossEntropy'\nEVAL_METRIC = \"AUC\"\n\nSTUDY_TIME = 60*60*8","d81d10e1":"def seed_everything(seed=2021):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(SEED)","d348a9c9":"df_train = pd.read_csv(r\"..\/input\/tabular-playground-series-oct-2021\/train.csv\", index_col=0)\ndf_test = pd.read_csv(r\"..\/input\/tabular-playground-series-oct-2021\/test.csv\", index_col=0)\n\nfeatures = [col for col in df_train.columns if 'f' in col]\n\ncont_features =[]\ndisc_features =[]\n\nfor col in features:\n    if df_train[col].dtype=='float64':\n        cont_features.append(col)\n    else:\n        disc_features.append(col)\n        \n\ndf_train[cont_features] = df_train[cont_features].astype('float32')\ndf_train[disc_features] = df_train[disc_features].astype('uint8')\n\ndf_test[cont_features] = df_test[cont_features].astype('float32')\ndf_test[disc_features] = df_test[disc_features].astype('uint8')\n\nX = df_train.drop(TARGET, axis=1)\ny = df_train[[TARGET]]\nX_test = df_test\n\nX_index = X.index\nX_test_index = X_test.index\n\ndel df_train, df_test\ngc.collect()","fd1aba7d":"xgb1_oof = pd.read_parquet(r\"..\/input\/tps-10-21-single-xgboost-model\/xgb_oof.parquet\").rename(columns={TARGET:\"xgb1_oof\"})\nxgb1_pred = pd.read_csv(r\"..\/input\/tps-10-21-single-xgboost-model\/xgb_submission.csv\",  index_col=0).rename(columns={TARGET:\"xgb1_pred\"})\n\ncat1_oof = pd.read_parquet(r\"..\/input\/tps-10-21-catboost\/cat_oof.parquet\").rename(columns={TARGET:\"cat1_oof\"})\ncat1_pred = pd.read_csv(r\"..\/input\/tps-10-21-catboost\/cat_submission.csv\", index_col=0).rename(columns={TARGET:\"cat1_pred\"})\n\nlgbm1_oof = pd.DataFrame(np.load(r\"..\/input\/tps-oct-2021-single-lightgbm\/lgb_oof.npy\"), columns =[TARGET], index= X_index)\nlgbm1_pred = pd.DataFrame(np.load(r\"..\/input\/tps-oct-2021-single-lightgbm\/lgb_pred.npy\"), columns =[TARGET], index= X_test_index)\n\n# lgbm1_oof = pd.read_parquet(r\"..\/input\/tps-09-21-lgbm\/lgbm_oof.parquet\").rename(columns={TARGET:\"lgbm1_oof\"})\n# lgbm1_pred = pd.read_csv(r\"..\/input\/tps-09-21-lgbm\/lgbm_submission.csv\", index_col=0).rename(columns={TARGET:\"lgbm1_pred\"})\n\noff_ls = [xgb1_oof, cat1_oof, lgbm1_oof]\npred_ls = [xgb1_pred, cat1_pred, lgbm1_pred]\n\nX = pd.concat(off_ls, axis=1)\nX_test = pd.concat(pred_ls, axis=1)\n\ngc.collect()","084e319f":"def run_kfold(model, n_splits=5, test_data=None):\n    kf = KFold(n_splits=n_splits, random_state=SEED, shuffle=True)\n    \n    scores = np.empty((n_splits,1))\n    \n    y_preds = np.empty((len(test_data), n_splits))\n    y_oof =  np.empty((len(X), 1))\n    \n    for i_fold,(train_idx, val_idx) in enumerate(kf.split(X)):\n        print(5*\"=\" + f\" Fold {i_fold} \" + 5*\"=\")\n        X_train = X.iloc[train_idx,:]\n        y_train = y.iloc[train_idx].values.ravel()\n        \n        X_val = X.iloc[val_idx,:]\n        y_val = y.iloc[val_idx]\n        \n        model.fit(X_train, y_train)\n\n        fold_oof = model.predict_proba(X_val)[:,1].reshape((-1,1))\n        y_oof[val_idx,:] = fold_oof\n        \n        fold_score = roc_auc_score(y_val, fold_oof)\n        scores[i_fold, 0] = fold_score\n        print(f\"*** Fold {i_fold} score :\", fold_score, \" ***\")\n\n        if test_data is not None :\n            y_preds[:,i_fold] = model.predict_proba(test_data)[:,1] \n\n    print('CV auc scores: ',scores.mean(), \" +\/- \",  scores.std())\n    return scores, y_preds, y_oof","12d24b0e":"model = LogisticRegression(random_state=SEED)","72818c11":"scores, y_preds, y_oof = run_kfold(model, n_splits= N_SPLITS, test_data=X_test)","986f15d6":"y_preds","68dbd182":"pd.DataFrame(y_oof, index=X.index, columns= [TARGET]).to_parquet(\"stack_oof.parquet\")\npd.DataFrame(y_preds.mean(axis=1), index=X_test.index, columns= [TARGET]).to_csv(\"stack_submission.csv\")","73f8c994":"LGBM Model : \nhttps:\/\/www.kaggle.com\/hiro5299834\/tps-oct-2021-single-lightgbm?kernelSessionId=76163449 by BIZEN"}}