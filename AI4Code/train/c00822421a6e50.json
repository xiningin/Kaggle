{"cell_type":{"1dfe842d":"code","26155753":"code","dbcf0df1":"code","08cc6bcf":"code","ea596c06":"code","04833251":"code","a241e232":"code","ddd89a79":"code","8f2f859e":"code","9e9e03a2":"code","bea3bf72":"code","af292889":"code","c361db30":"code","a347d1ee":"code","fc92bc20":"markdown","47df54c8":"markdown","5ed188cc":"markdown","c3b221c9":"markdown","19b84599":"markdown","486cbef1":"markdown","b4131c7c":"markdown","8ba472a0":"markdown","e1315078":"markdown","f89b36d4":"markdown","6fa42f82":"markdown","d6c60f2a":"markdown","74b08011":"markdown","9383bb4b":"markdown"},"source":{"1dfe842d":"import pandas as pd\nimport numpy as np\nimport time\nimport datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(\"talk\")\n\nfrom sklearn.linear_model import LinearRegression\n\n\nTRAIN_CSV = '..\/input\/g-research-crypto-forecasting\/train.csv'\n\nASSET_DETAILS_CSV = '..\/input\/g-research-crypto-forecasting\/asset_details.csv'\nOUTPUT_DIR = '..\/model\/'","26155753":"train = pd.read_csv(TRAIN_CSV)\ntrain.dropna(subset=[\"Target\"], inplace=True)\n    \nasset_details = pd.read_csv(ASSET_DETAILS_CSV).sort_values(\"Asset_ID\")\nprint(train.shape)\nprint(asset_details.shape)\ndisplay(train.head())\ndisplay(asset_details)","dbcf0df1":"#merge assetID\ndef add_asset_details(train, asset_details):\n    return train.merge(\n        asset_details,\n        how = \"left\", on = \"Asset_ID\"\n    )\n\ntrain = add_asset_details(train, asset_details)\n\n#calculate mean\ntrain[\"Mean\"] = train[['Open', 'High', 'Low', 'Close']].mean(axis=1)","08cc6bcf":"#window for train\ntrain_start = \"21\/08\/2020\"\ntrain_end = \"21\/08\/2021\"\n\ndef set_time_train(train, train_start, train_end):\n    totimestamp = lambda s: np.int32(time.mktime(datetime.datetime.strptime(s, \"%d\/%m\/%Y\").timetuple()))\n    train_window = [totimestamp(train_start), totimestamp(train_end)]\n    train = train.query(\"@train_window[0] < timestamp < @train_window[1]\")\n    return train\n\ntrain = set_time_train(train, train_start, train_end)\nprint(train.shape)","ea596c06":"#get the table which index is time stamp\ndf_pivot = train.pivot_table(index=\"timestamp\", columns=\"Asset_Name\", values=\"Mean\")\ndf_pivot = df_pivot.fillna(method=\"ffill\")","04833251":"df_pivot.head()","a241e232":"df_pivot.isnull().sum()","ddd89a79":"target = \"Bitcoin\"\nfeats = df_pivot.drop(target, axis=1).columns","8f2f859e":"#linear regression\nlr = LinearRegression()\nlr.fit(df_pivot[feats], df_pivot[target])","9e9e03a2":"def get_df_pred(lr, feats, target, df_pivot):\n    #get prediction datafram\n    df_pred = pd.DataFrame()\n    df_pred[\"pred\"] = lr.predict(df_pivot[feats])\n    df_pred[\"true\"] = df_pivot[target].values\n    df_pred[\"pred\/true\"] = df_pred[\"pred\"] \/ df_pred[\"true\"]\n    df_pred[\"time\"] = df_pivot.index\n    df_pred[\"time\"] = df_pred[\"time\"].apply(lambda x:datetime.datetime.fromtimestamp(x))\n    return df_pred\n\ndf_pred = get_df_pred(lr, feats, target, df_pivot)\ndf_pred.head()","bea3bf72":"fig, ax = plt.subplots(1,1,figsize=(20,5))\n\ndef plot_pred(df_pred, target, ax):\n    ax.plot(df_pred[\"time\"], df_pred[\"true\"], label=\"true\")\n    ax.plot(df_pred[\"time\"], df_pred[\"pred\"], label=\"pred\")\n    ax.set_title(target)\n    ax.legend()\n    \nplot_pred(df_pred, target, ax)","af292889":"fig, ax = plt.subplots(13,1,figsize=(20,40), sharex=True)\n\nlr_list = []\nfor ax_i, asset_i in zip(ax, df_pivot.columns):\n    print(asset_i)\n    target = asset_i\n    feats = df_pivot.drop(asset_i, axis=1).columns\n    \n    lr = LinearRegression()\n    lr.fit(df_pivot[feats], df_pivot[target])\n    lr_list.append(lr)\n    \n    df_pred = get_df_pred(lr, feats, target, df_pivot)\n    plot_pred(df_pred, target, ax_i)","c361db30":"target_pivot = train.pivot_table(index=\"timestamp\", columns=\"Asset_Name\", values=\"Target\")\ntarget_pivot.head()","a347d1ee":"#check with figure\ntarget = \"Bitcoin\"\nfeats = df_pivot.drop(target, axis=1).columns\ndf_pred = get_df_pred(lr_list[1], feats, target, df_pivot)\n\nfig, ax = plt.subplots(1,1,figsize=(20,5))\n\ndef plot_pred(df_pred, target, ax):\n    ax.plot(df_pred[\"time\"], df_pred[\"true\"], label=\"true\")\n    ax.plot(df_pred[\"time\"], df_pred[\"pred\"], label=\"pred\")\n    ax.set_title(target)\n    ax.legend()\n    \nplot_pred(df_pred, target, ax)\nax2 = ax.twinx()\nax2.plot(df_pred[\"time\"], target_pivot[target], color=\"black\", alpha=0.3)\nax2.grid(False)","fc92bc20":"### check prediction error","47df54c8":"# EDA  - predict value from other assets- \n\nIn this notebook, we describe the results of predicting the transition of one asset from the values of other assets.\n\nSpecifically, Predict the value of mean for asset ID = 0 from the value of mean for asset ID = 1 to 13 at the same time..\n\nThe purpose of this paper is to obtain insights for score improvement from the discrepancies in the predicted values.\nFor example, if the discrepancy is large, it can be inferred that a large change has occurred only in that asset ID.","5ed188cc":"## import","c3b221c9":"## get pivot table\n- index:timestamp\n- columns:Asset_ID\n- values:Mean","19b84599":"### check nan","486cbef1":"- Unfortunately, I don't see any significant correlation...\n- Whether this prediction error feature can be used or not will be verified in the future.","b4131c7c":"## predict (in case of Bitcoin)","8ba472a0":"- The predictions are generally good, but there are times when the errors are large.","e1315078":"## check correlation of predicion error and target\nCheck if there is a correlation between the error and the target, the log return in case of bitcoin.","f89b36d4":"## Read train data\n- read csv data\n- merge asset details","6fa42f82":"## set time for train\n\n","d6c60f2a":"### predict (in cases of all assets)","74b08011":"point\n- The error tends to be larger where there is more change.","9383bb4b":"##E linear regression by other asset"}}