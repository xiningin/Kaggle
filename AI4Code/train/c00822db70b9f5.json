{"cell_type":{"298dc743":"code","fc0568af":"code","b8b4b95a":"code","8d0cfbf1":"code","70a03056":"code","0a9a4a6d":"code","db0e35d6":"code","36b5ee0f":"code","d8fd7201":"code","d6901989":"code","9aacce5a":"code","30fa9479":"code","be08cdfe":"code","6e2a26c0":"code","6d191527":"code","78a250c3":"code","5482c842":"code","cb1783e4":"code","748b2c87":"code","0b3e4f41":"code","3cfeb826":"code","668cf5dd":"code","97b10476":"code","44561746":"markdown","77450305":"markdown","36a6cdd8":"markdown","23c83ddf":"markdown","9b7d8bd4":"markdown","e2779049":"markdown","a92a3624":"markdown","e9673005":"markdown","f0d2da63":"markdown","5c71ad56":"markdown","f78a8b5d":"markdown","7f8d5857":"markdown","4b498447":"markdown","c95901ab":"markdown","0c1241b7":"markdown","25bdb5c5":"markdown","cb1f9902":"markdown","be08fab3":"markdown","af418033":"markdown"},"source":{"298dc743":"import io\nimport openpyxl\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","fc0568af":"house_ds = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\", sep=\",\")\n\nhouse_ds","b8b4b95a":"#Checking a dataset sample\n\npd.set_option(\"display.max_rows\", 100)\npd.set_option(\"display.max_columns\", 100)\npd.options.display.float_format=\"{:,.2f}\".format\nhouse_ds.sample(n=10, random_state=0)","8d0cfbf1":"#Checking dataset info by feature\n\nhouse_ds.info(verbose=True, null_counts=True)","70a03056":"#Checking the existence of zeros in rows\n\n(house_ds==0).sum(axis=0).to_excel(\"zeros_per_feature.xlsx\")\n(house_ds==0).sum(axis=0)","0a9a4a6d":"#Checking the existence of duplicated rows\n\nhouse_ds.duplicated().sum()","db0e35d6":"#Checking basic statistical data by feature\n\nhouse_ds.describe(include=\"all\")","36b5ee0f":"#1\n\nhouse_ds.drop([\"Alley\", \"PoolArea\", \"PoolQC\", \"Fence\", \"MiscFeature\", \"MiscVal\", \"Id\"], axis=1, inplace=True)\n\n#2\n\n#2.1\nhouse_ds[\"LotFrontage\"].replace(0, np.nan, inplace=True)\nhouse_ds[\"LotFrontage\"].fillna(house_ds[\"LotFrontage\"].sum() \/ house_ds[\"LotArea\"].sum() * house_ds[\"LotArea\"], inplace=True)\n#2.2\nhouse_ds[\"MasVnrType\"].fillna(house_ds[\"MasVnrType\"].mode()[0], inplace=True)\n#2.3\nhouse_ds[\"MasVnrArea\"].fillna(house_ds[\"MasVnrArea\"].mean(), inplace=True)\n#2.4\nhouse_ds[\"BsmtQual\"].fillna(house_ds[\"BsmtQual\"].mode()[0], inplace=True)\n#2.5\nhouse_ds[\"BsmtCond\"].fillna(house_ds[\"BsmtCond\"].mode()[0], inplace=True)\n#2.6\nhouse_ds[\"BsmtExposure\"].fillna(house_ds[\"BsmtExposure\"].mode()[0], inplace=True)\n#2.7\nhouse_ds[\"BsmtFinType1\"].fillna(house_ds[\"BsmtFinType1\"].mode()[0], inplace=True)\n#2.8\nhouse_ds[\"BsmtFinType2\"].fillna(house_ds[\"BsmtFinType2\"].mode()[0], inplace=True)\n#2.9\nhouse_ds[\"Electrical\"].fillna(house_ds[\"Electrical\"].mode()[0], inplace=True)\n#2.10\nhouse_ds[\"FireplaceQu\"].fillna(house_ds[\"FireplaceQu\"].mode()[0], inplace=True)\n#2.11\nhouse_ds[\"GarageType\"].fillna(house_ds[\"GarageType\"].mode()[0], inplace=True)\n#2.12\nhouse_ds[\"GarageYrBlt\"].fillna(house_ds[\"GarageYrBlt\"].mean(), inplace=True)\n#2.13\nhouse_ds[\"GarageFinish\"].fillna(house_ds[\"GarageFinish\"].mode()[0], inplace=True)\n#2.14\nhouse_ds[\"GarageQual\"].fillna(house_ds[\"GarageQual\"].mode()[0], inplace=True)\n#2.15\nhouse_ds[\"GarageCond\"].fillna(house_ds[\"GarageCond\"].mode()[0], inplace=True)\n\n#3\n\n#3.1\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"MSZoning\"], prefix=\"MSZoning\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"Street\"], prefix=\"Street\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"LotConfig\"], prefix=\"LotConfig\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"Neighborhood\"], prefix=\"Neighborhood\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"Condition1\"], prefix=\"Condition1\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"Condition2\"], prefix=\"Condition2\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"BldgType\"], prefix=\"BldgType\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"RoofStyle\"], prefix=\"RoofStyle\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"RoofMatl\"], prefix=\"RoofMatl\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"Exterior1st\"], prefix=\"Exterior1st\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"Exterior2nd\"], prefix=\"Exterior2nd\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"MasVnrType\"], prefix=\"MasVnrType\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"Foundation\"], prefix=\"Foundation\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"Heating\"], prefix=\"Heating\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"CentralAir\"], prefix=\"CentralAir\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"SaleType\"], prefix=\"SaleType\")], axis=1)\nhouse_ds = pd.concat([house_ds, pd.get_dummies(house_ds[\"SaleCondition\"], prefix=\"SaleCondition\")], axis=1)\n#3.2\nhouse_ds[\"LotShape_Encoding\"] = house_ds[\"LotShape\"].apply(lambda x: [\"IR3\", \"IR2\", \"IR1\", \"Reg\"].index(x))\nhouse_ds[\"LandContour_Encoding\"] = house_ds[\"LandContour\"].apply(lambda x: [\"HLS\", \"Bnk\", \"Low\", \"Lvl\"].index(x))\nhouse_ds[\"Utilities_Encoding\"] = house_ds[\"Utilities\"].apply(lambda x: [\"ELO\", \"NoSeWa\", \"NoSewr\", \"AllPub\"].index(x))\nhouse_ds[\"LandSlope_Encoding\"] = house_ds[\"LandSlope\"].apply(lambda x: [\"Sev\", \"Mod\", \"Gtl\"].index(x))\nhouse_ds[\"HouseStyle_Encoding\"] = house_ds[\"HouseStyle\"].apply(lambda x: [\"1Story\", \"1.5Fin\", \"1.5Unf\", \"2Story\", \"2.5Fin\", \"2.5Unf\", \"SFoyer\", \"SLvl\"].index(x))\nhouse_ds[\"ExterQual_Encoding\"] = house_ds[\"ExterQual\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds[\"ExterCond_Encoding\"] = house_ds[\"ExterCond\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds[\"BsmtQual_Encoding\"] = house_ds[\"BsmtQual\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds[\"BsmtCond_Encoding\"] = house_ds[\"BsmtCond\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds[\"BsmtExposure_Encoding\"] = house_ds[\"BsmtExposure\"].apply(lambda x: [\"No\", \"Mn\", \"Av\", \"Gd\"].index(x))\nhouse_ds[\"BsmtFinType1_Encoding\"] = house_ds[\"BsmtFinType1\"].apply(lambda x: [\"Unf\", \"LwQ\", \"BLQ\", \"Rec\", \"ALQ\", \"GLQ\"].index(x))\nhouse_ds[\"BsmtFinType2_Encoding\"] = house_ds[\"BsmtFinType2\"].apply(lambda x: [\"Unf\", \"LwQ\", \"BLQ\", \"Rec\", \"ALQ\", \"GLQ\"].index(x))\nhouse_ds[\"HeatingQC_Encoding\"] = house_ds[\"HeatingQC\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds[\"Electrical_Encoding\"] = house_ds[\"Electrical\"].apply(lambda x: [\"Mix\", \"FuseP\", \"FuseF\", \"FuseA\", \"SBrkr\"].index(x))\nhouse_ds[\"KitchenQual_Encoding\"] = house_ds[\"KitchenQual\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds[\"Functional_Encoding\"] = house_ds[\"Functional\"].apply(lambda x: [\"Sal\", \"Sev\", \"Maj2\", \"Maj1\", \"Mod\", \"Min2\", \"Min1\", \"Typ\"].index(x))\nhouse_ds[\"FireplaceQu_Encoding\"] = house_ds[\"FireplaceQu\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds[\"GarageType_Encoding\"] = house_ds[\"GarageType\"].apply(lambda x: [\"Detchd\", \"CarPort\", \"BuiltIn\", \"Basment\", \"Attchd\", \"2Types\"].index(x))\nhouse_ds[\"GarageFinish_Encoding\"] = house_ds[\"GarageFinish\"].apply(lambda x: [\"Unf\", \"RFn\", \"Fin\"].index(x))\nhouse_ds[\"GarageQual_Encoding\"] = house_ds[\"GarageQual\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds[\"GarageCond_Encoding\"] = house_ds[\"GarageCond\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds[\"PavedDrive_Encoding\"] = house_ds[\"PavedDrive\"].apply(lambda x: [\"N\", \"P\", \"Y\"].index(x))\n\n#4\n\nhouse_ds.drop(index=249, axis=0, inplace=True)\nhouse_ds.drop(index=313, axis=0, inplace=True)\nhouse_ds.drop(index=335, axis=0, inplace=True)\nhouse_ds.drop(index=706, axis=0, inplace=True)\nhouse_ds.drop(index=1298, axis=0, inplace=True)\nhouse_ds.drop(index=197, axis=0, inplace=True)\n\nhouse_ds.to_excel(\"house_ds_clean.xlsx\")","d8fd7201":"#Plotting Categorical Variables\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"MSZoning\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"MSZoning\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"MSZoning Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"Street\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"Street\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"Street Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"LotShape\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"LotShape\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"LotShape Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"LandContour\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"LandContour\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"LandContour Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"Utilities\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"Utilities\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"Utilities Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"LotConfig\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"LotConfig\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"LotConfig Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"LandSlope\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"LandSlope\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"LandSlope Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"Neighborhood\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"Neighborhood\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"Neighborhood Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"Condition1\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"Condition1\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"Condition1 Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"Condition2\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"Condition2\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"Condition2 Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"BldgType\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"BldgType\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"BldgType Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"HouseStyle\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"HouseStyle\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"HouseStyle Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"RoofStyle\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"RoofStyle\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"RoofStyle Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"RoofMatl\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"RoofMatl\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"RoofMatl Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"Exterior1st\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"Exterior1st\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"Exterior1st Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"Exterior2nd\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"Exterior2nd\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"Exterior2nd Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"MasVnrType\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"MasVnrType\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"MasVnrType Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"ExterQual\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"ExterQual\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"ExterQual Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"ExterCond\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"ExterCond\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"ExterCond Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"Foundation\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"Foundation\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"Foundation Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"BsmtQual\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"BsmtQual\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"BsmtQual Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"BsmtCond\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"BsmtCond\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"BsmtCond Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"BsmtExposure\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"BsmtExposure\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"BsmtExposure Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"BsmtFinType1\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"BsmtFinType1\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"BsmtFinType1 Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"BsmtFinType2\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"BsmtFinType2\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"BsmtFinType2 Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"Heating\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"Heating\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"Heating Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"HeatingQC\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"HeatingQC\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"HeatingQC Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"CentralAir\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"CentralAir\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"CentralAir Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"Electrical\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"Electrical\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"Electrical Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"KitchenQual\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"KitchenQual\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"KitchenQual Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"Functional\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"Functional\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"Functional Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"FireplaceQu\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"FireplaceQu\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"FireplaceQu Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"GarageType\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"GarageType\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"GarageType Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"GarageFinish\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"GarageFinish\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"GarageFinish Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"GarageQual\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"GarageQual\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"GarageQual Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"GarageCond\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"GarageCond\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"GarageCond Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"PavedDrive\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"PavedDrive\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"PavedDrive Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"SaleType\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"SaleType\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"SaleType Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2)\nhouse_ds[\"SaleCondition\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\nhouse_ds[\"SaleCondition\"].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,textprops={\"fontsize\": 10},ax=ax[1])\nfig.suptitle(\"SaleCondition Frequency\", fontsize=15)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)","d6901989":"#Plotting Numerical Variables\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"MSSubClass Distribution\", fontsize=15)\nsns.distplot(house_ds[\"MSSubClass\"], ax=ax[0])\nsns.boxplot(house_ds[\"MSSubClass\"], ax=ax[1])\nsns.violinplot(house_ds[\"MSSubClass\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"LotFrontage Distribution\", fontsize=15)\nsns.distplot(house_ds[\"LotFrontage\"], ax=ax[0])\nsns.boxplot(house_ds[\"LotFrontage\"], ax=ax[1])\nsns.violinplot(house_ds[\"LotFrontage\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"LotArea Distribution\", fontsize=15)\nsns.distplot(house_ds[\"LotArea\"], ax=ax[0])\nsns.boxplot(house_ds[\"LotArea\"], ax=ax[1])\nsns.violinplot(house_ds[\"LotArea\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"OverallQual Distribution\", fontsize=15)\nsns.distplot(house_ds[\"OverallQual\"], ax=ax[0])\nsns.boxplot(house_ds[\"OverallQual\"], ax=ax[1])\nsns.violinplot(house_ds[\"OverallQual\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"OverallCond Distribution\", fontsize=15)\nsns.distplot(house_ds[\"OverallCond\"], ax=ax[0])\nsns.boxplot(house_ds[\"OverallCond\"], ax=ax[1])\nsns.violinplot(house_ds[\"OverallCond\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"YearBuilt Distribution\", fontsize=15)\nsns.distplot(house_ds[\"YearBuilt\"], ax=ax[0])\nsns.boxplot(house_ds[\"YearBuilt\"], ax=ax[1])\nsns.violinplot(house_ds[\"YearBuilt\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"YearRemodAdd Distribution\", fontsize=15)\nsns.distplot(house_ds[\"YearRemodAdd\"], ax=ax[0])\nsns.boxplot(house_ds[\"YearRemodAdd\"], ax=ax[1])\nsns.violinplot(house_ds[\"YearRemodAdd\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"MasVnrArea Distribution\", fontsize=15)\nsns.distplot(house_ds[\"MasVnrArea\"], ax=ax[0])\nsns.boxplot(house_ds[\"MasVnrArea\"], ax=ax[1])\nsns.violinplot(house_ds[\"MasVnrArea\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"BsmtFinSF1 Distribution\", fontsize=15)\nsns.distplot(house_ds[\"BsmtFinSF1\"], ax=ax[0])\nsns.boxplot(house_ds[\"BsmtFinSF1\"], ax=ax[1])\nsns.violinplot(house_ds[\"BsmtFinSF1\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"BsmtFinSF2 Distribution\", fontsize=15)\nsns.distplot(house_ds[\"BsmtFinSF2\"], ax=ax[0], kde_kws = {\"bw\":1})\nsns.boxplot(house_ds[\"BsmtFinSF2\"], ax=ax[1])\nsns.violinplot(house_ds[\"BsmtFinSF2\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"BsmtUnfSF Distribution\", fontsize=15)\nsns.distplot(house_ds[\"BsmtUnfSF\"], ax=ax[0])\nsns.boxplot(house_ds[\"BsmtUnfSF\"], ax=ax[1])\nsns.violinplot(house_ds[\"BsmtUnfSF\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"TotalBsmtSF Distribution\", fontsize=15)\nsns.distplot(house_ds[\"TotalBsmtSF\"], ax=ax[0])\nsns.boxplot(house_ds[\"TotalBsmtSF\"], ax=ax[1])\nsns.violinplot(house_ds[\"TotalBsmtSF\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"1stFlrSF Distribution\", fontsize=15)\nsns.distplot(house_ds[\"1stFlrSF\"], ax=ax[0])\nsns.boxplot(house_ds[\"1stFlrSF\"], ax=ax[1])\nsns.violinplot(house_ds[\"1stFlrSF\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"2ndFlrSF Distribution\", fontsize=15)\nsns.distplot(house_ds[\"2ndFlrSF\"], ax=ax[0])\nsns.boxplot(house_ds[\"2ndFlrSF\"], ax=ax[1])\nsns.violinplot(house_ds[\"2ndFlrSF\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"LowQualFinSF Distribution\", fontsize=15)\nsns.distplot(house_ds[\"LowQualFinSF\"], ax=ax[0], kde_kws = {\"bw\":1})\nsns.boxplot(house_ds[\"LowQualFinSF\"], ax=ax[1])\nsns.violinplot(house_ds[\"LowQualFinSF\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"GrLivArea Distribution\", fontsize=15)\nsns.distplot(house_ds[\"GrLivArea\"], ax=ax[0])\nsns.boxplot(house_ds[\"GrLivArea\"], ax=ax[1])\nsns.violinplot(house_ds[\"GrLivArea\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"BsmtFullBath Distribution\", fontsize=15)\nsns.distplot(house_ds[\"BsmtFullBath\"], ax=ax[0])\nsns.boxplot(house_ds[\"BsmtFullBath\"], ax=ax[1])\nsns.violinplot(house_ds[\"BsmtFullBath\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"BsmtHalfBath Distribution\", fontsize=15)\nsns.distplot(house_ds[\"BsmtHalfBath\"], ax=ax[0], kde_kws = {\"bw\":1})\nsns.boxplot(house_ds[\"BsmtHalfBath\"], ax=ax[1])\nsns.violinplot(house_ds[\"BsmtHalfBath\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"FullBath Distribution\", fontsize=15)\nsns.distplot(house_ds[\"FullBath\"], ax=ax[0])\nsns.boxplot(house_ds[\"FullBath\"], ax=ax[1])\nsns.violinplot(house_ds[\"FullBath\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"HalfBath Distribution\", fontsize=15)\nsns.distplot(house_ds[\"HalfBath\"], ax=ax[0])\nsns.boxplot(house_ds[\"HalfBath\"], ax=ax[1])\nsns.violinplot(house_ds[\"HalfBath\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"BedroomAbvGr Distribution\", fontsize=15)\nsns.distplot(house_ds[\"BedroomAbvGr\"], ax=ax[0])\nsns.boxplot(house_ds[\"BedroomAbvGr\"], ax=ax[1])\nsns.violinplot(house_ds[\"BedroomAbvGr\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"KitchenAbvGr Distribution\", fontsize=15)\nsns.distplot(house_ds[\"KitchenAbvGr\"], ax=ax[0], kde_kws = {\"bw\":1})\nsns.boxplot(house_ds[\"KitchenAbvGr\"], ax=ax[1])\nsns.violinplot(house_ds[\"KitchenAbvGr\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"TotRmsAbvGrd Distribution\", fontsize=15)\nsns.distplot(house_ds[\"TotRmsAbvGrd\"], ax=ax[0])\nsns.boxplot(house_ds[\"TotRmsAbvGrd\"], ax=ax[1])\nsns.violinplot(house_ds[\"TotRmsAbvGrd\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"Fireplaces Distribution\", fontsize=15)\nsns.distplot(house_ds[\"Fireplaces\"], ax=ax[0])\nsns.boxplot(house_ds[\"Fireplaces\"], ax=ax[1])\nsns.violinplot(house_ds[\"Fireplaces\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"GarageYrBlt Distribution\", fontsize=15)\nsns.distplot(house_ds[\"GarageYrBlt\"], ax=ax[0])\nsns.boxplot(house_ds[\"GarageYrBlt\"], ax=ax[1])\nsns.violinplot(house_ds[\"GarageYrBlt\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"GarageCars Distribution\", fontsize=15)\nsns.distplot(house_ds[\"GarageCars\"], ax=ax[0])\nsns.boxplot(house_ds[\"GarageCars\"], ax=ax[1])\nsns.violinplot(house_ds[\"GarageCars\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"GarageArea Distribution\", fontsize=15)\nsns.distplot(house_ds[\"GarageArea\"], ax=ax[0])\nsns.boxplot(house_ds[\"GarageArea\"], ax=ax[1])\nsns.violinplot(house_ds[\"GarageArea\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"WoodDeckSF Distribution\", fontsize=15)\nsns.distplot(house_ds[\"WoodDeckSF\"], ax=ax[0])\nsns.boxplot(house_ds[\"WoodDeckSF\"], ax=ax[1])\nsns.violinplot(house_ds[\"WoodDeckSF\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"OpenPorchSF Distribution\", fontsize=15)\nsns.distplot(house_ds[\"OpenPorchSF\"], ax=ax[0])\nsns.boxplot(house_ds[\"OpenPorchSF\"], ax=ax[1])\nsns.violinplot(house_ds[\"OpenPorchSF\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"EnclosedPorch Distribution\", fontsize=15)\nsns.distplot(house_ds[\"EnclosedPorch\"], ax=ax[0], kde_kws = {\"bw\":1})\nsns.boxplot(house_ds[\"EnclosedPorch\"], ax=ax[1])\nsns.violinplot(house_ds[\"EnclosedPorch\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"3SsnPorch Distribution\", fontsize=15)\nsns.distplot(house_ds[\"3SsnPorch\"], ax=ax[0], kde_kws = {\"bw\":1})\nsns.boxplot(house_ds[\"3SsnPorch\"], ax=ax[1])\nsns.violinplot(house_ds[\"3SsnPorch\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"ScreenPorch Distribution\", fontsize=15)\nsns.distplot(house_ds[\"ScreenPorch\"], ax=ax[0], kde_kws = {\"bw\":1})\nsns.boxplot(house_ds[\"ScreenPorch\"], ax=ax[1])\nsns.violinplot(house_ds[\"ScreenPorch\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"MoSold Distribution\", fontsize=15)\nsns.distplot(house_ds[\"MoSold\"], ax=ax[0])\nsns.boxplot(house_ds[\"MoSold\"], ax=ax[1])\nsns.violinplot(house_ds[\"MoSold\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"YrSold Distribution\", fontsize=15)\nsns.distplot(house_ds[\"YrSold\"], ax=ax[0])\nsns.boxplot(house_ds[\"YrSold\"], ax=ax[1])\nsns.violinplot(house_ds[\"YrSold\"], ax=ax[2])\n\nfig, ax = plt.subplots(1,3)\nfig.suptitle(\"SalePrice Distribution\", fontsize=15)\nsns.distplot(house_ds[\"SalePrice\"], ax=ax[0])\nsns.boxplot(house_ds[\"SalePrice\"], ax=ax[1])\nsns.violinplot(house_ds[\"SalePrice\"], ax=ax[2])","9aacce5a":"#Alternatively using Profile Report to see variables statistics and correlations\n# from pandas_profiling import ProfileReport\n# profile = ProfileReport(house_ds, title=\"House Prices Advanced Regression Techniques\")\n# profile.to_file(output_file=\"House Prices Advanced Regression Techniques.html\")","30fa9479":"#Deleting original categorical columns\n\nhouse_ds.drop([\"MSZoning\", \"Street\", \"LotShape\", \"LandContour\", \"Utilities\", \"LotConfig\", \"LandSlope\", \"Neighborhood\", \"Condition1\", \"Condition2\", \"BldgType\", \"HouseStyle\", \"RoofStyle\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\", \"MasVnrType\", \"ExterQual\", \"ExterCond\", \"Foundation\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\", \"Heating\", \"HeatingQC\", \"CentralAir\", \"Electrical\", \"KitchenQual\", \"Functional\", \"FireplaceQu\", \"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"PavedDrive\", \"SaleType\", \"SaleCondition\"], axis=1, inplace=True)\n\n# #Plotting a Heatmap\n\n# fig, ax = plt.subplots(1, figsize=(25,25))\n# sns.heatmap(house_ds.corr(), annot=True, fmt=\",.2f\")\n# plt.title(\"Heatmap Correlation\", fontsize=20)\n# plt.tick_params(labelsize=12)\n# plt.xticks(rotation=90)\n# plt.yticks(rotation=45)\n\n# #Plotting a Pairplot\n\n# sns.pairplot(house_ds)","be08cdfe":"#Plotting a Feature Importance\n\nfrom xgboost import XGBRegressor\nfrom matplotlib import pyplot\n#Defining Xs and y\nX = house_ds.drop([\"SalePrice\"], axis=1)\ny = house_ds[\"SalePrice\"]\n#Defining the model\nmodel = XGBRegressor().fit(X, y)\n#Getting importance\nimportance = model.feature_importances_\n#Summarizing feature importance\nfor i,v in enumerate(importance):\n    print(\"Feature:{0:}, Score:{1:,.4f}\".format(X.columns[i], v))\n#Plotting feature importance\npd.Series(model.feature_importances_[::-1], index=X.columns[::-1]).plot(kind=\"barh\", figsize=(25,25))","6e2a26c0":"#Defining Xs and y\n\nX = house_ds[[\"ExterQual_Encoding\", \"OverallQual\", \"GarageCars\", \"GarageFinish_Encoding\", \"BsmtQual_Encoding\",\n              \"TotalBsmtSF\", \"KitchenQual_Encoding\", \"GrLivArea\", \"Fireplaces\", \"YearRemodAdd\", \"BsmtFinSF1\",\n              \"2ndFlrSF\", \"CentralAir_N\", \"GarageType_Encoding\", \"MSZoning_RM\", \"1stFlrSF\", \"TotRmsAbvGrd\",\n              \"BsmtFinType1_Encoding\", \"HalfBath\", \"MSZoning_RL\", \"LotArea\", \"KitchenAbvGr\", \"BldgType_1Fam\",\n              \"BedroomAbvGr\", \"BsmtExposure_Encoding\", \"GarageArea\", \"SaleType_New\", \"MoSold\", \"YearBuilt\"]]\ny = house_ds[[\"SalePrice\"]]\n\n#Scaling all features\n\nfrom sklearn.preprocessing import MinMaxScaler\nsc_X = MinMaxScaler()\nX_scaled = sc_X.fit_transform(X)\nX_scaled = pd.DataFrame(X_scaled)\n\n#Setting train\/test split\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, random_state=0)","6d191527":"#Creating a Polynomial Regression model and checking its Metrics\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n\n#Creating a Linear Regressor\nlin_regressor = LinearRegression()\n\n#Trying different polynomial degrees\ndegrees = [1, 2, 3]\nprint(\"Testing degrees:\")\nfor a in degrees:\n    poly = PolynomialFeatures(degree=a)\n    X_train_degree = poly.fit_transform(X_train)\n    X_test_degree = poly.fit_transform(X_test)\n    model_pr = lin_regressor.fit(X_train_degree, y_train)\n    y_preds_train = model_pr.predict(X_train_degree)\n    y_preds_test = model_pr.predict(X_test_degree)\n    score_train = r2_score(y_train, y_preds_train)\n    score_test = r2_score(y_test, y_preds_test)\n    mse_train = mean_squared_error(y_train, y_preds_train)\n    mse_test = mean_squared_error(y_test, y_preds_test)\n    print(\"Train: Degree:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a, score_train, mse_train, np.sqrt(mse_train)))\n    print(\"Test : Degree:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a, score_test, mse_test, np.sqrt(mse_test)))       \nprint(\"\")\n\n#Choosing the best polynomial degree\nchosen_degree = 1\npoly = PolynomialFeatures(degree=chosen_degree)\n\n#Working on X_train & X_test in the polynomial chosen degree\nX_train_degree = poly.fit_transform(X_train)\nX_test_degree = poly.fit_transform(X_test)\n\n#Fitting to the Linear Regressor\nmodel_pr = lin_regressor.fit(X_train_degree, y_train)\nprint(f\"Linear Regression Intercept: {model_pr.intercept_}\")\nprint(f\"Linear Regression Coefficients: {model_pr.coef_}, \\n\")\n\n#Getting the predictions & Metrics\ny_preds_train = model_pr.predict(X_train_degree)\ny_preds_test = model_pr.predict(X_test_degree)\nscore_train = r2_score(y_train, y_preds_train)\nscore_test = r2_score(y_test, y_preds_test)\nmse_train = mean_squared_error(y_train, y_preds_train)\nmse_test = mean_squared_error(y_test, y_preds_test)\nprint(\"Chosen degree:\")\nprint(\"Train: Degree:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(chosen_degree, score_train, mse_train, np.sqrt(mse_train)))\nprint(\"Test : Degree:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(chosen_degree, score_test, mse_test, np.sqrt(mse_test)))   \n\n#Visualizing y_pred in the dataset\nX_degree = poly.fit_transform(X_scaled)\ny_pred_all = model_pr.predict(X_degree)\nhouse_ds[\"SalePrice_predicted\"] = y_pred_all\nhouse_ds.to_excel(\"model_pr.xlsx\")","78a250c3":"#Creating a Ridge Regression model and checking its Metrics\n\nfrom sklearn.linear_model import Ridge\n\n#Trying different alphas\nalphas = [0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\nprint(\"Testing alphas:\")\nfor a in alphas:\n    model_ridge = Ridge(alpha=a, normalize=True).fit(X_train, y_train) \n    y_preds_train = model_ridge.predict(X_train)\n    y_preds_test = model_ridge.predict(X_test)\n    score_train = r2_score(y_train, y_preds_train)\n    score_test = r2_score(y_test, y_preds_test)\n    mse_train = mean_squared_error(y_train, y_preds_train)\n    mse_test = mean_squared_error(y_test, y_preds_test)\n    print(\"Train: Alpha:{0:,.6f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a, score_train, mse_train, np.sqrt(mse_train)))\n    print(\"Test : Alpha:{0:,.6f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a, score_test, mse_test, np.sqrt(mse_test)))\nprint(\"\")\n\n#Choosing the best alpha\na_final = 0.000001\nmodel_ridge = Ridge(alpha=a_final, normalize=True).fit(X_train, y_train) \ny_preds_train = model_ridge.predict(X_train)\ny_preds_test = model_ridge.predict(X_test)\nscore_train = r2_score(y_train, y_preds_train)\nscore_test = r2_score(y_test, y_preds_test)\nmse_train = mean_squared_error(y_train, y_preds_train)\nmse_test = mean_squared_error(y_test, y_preds_test)\nprint(f\"Linear Regression Intercept: {model_ridge.intercept_}\")\nprint(f\"Linear Regression Coefficients: {model_ridge.coef_}, \\n\")\nprint(\"Chosen alpha:\")\nprint(\"Train: Alpha:{0:,.6f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a_final, score_train, mse_train, np.sqrt(mse_train)))\nprint(\"Test : Aplha:{0:,.6f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a_final, score_test, mse_test, np.sqrt(mse_test)))\n\n#Plotting\nx_ax = range(len(X_test))\nplt.scatter(x_ax, y_test, s=5, color=\"blue\", label=\"original\")\nplt.plot(x_ax, y_preds_test, lw=0.8, color=\"red\", label=\"predicted\")\nplt.legend()\n\n#Visualizing y_pred in the dataset\ny_pred_all = model_ridge.predict(X_scaled)\nhouse_ds[\"SalePrice_predicted\"] = y_pred_all\nhouse_ds.to_excel(\"model_ridge.xlsx\")","5482c842":"#Creating a RidgeCV Regression model and checking its Metrics\n\nfrom sklearn.linear_model import RidgeCV\n\n#Choosing the best alpha\nmodel_ridge_cv = RidgeCV(alphas=alphas, normalize=True).fit(X_train, y_train) \ny_preds_train = model_ridge_cv.predict(X_train)\ny_preds_test = model_ridge_cv.predict(X_test)\nscore_train = r2_score(y_train, y_preds_train)\nscore_test = r2_score(y_test, y_preds_test)\nmse_train = mean_squared_error(y_train, y_preds_train)\nmse_test = mean_squared_error(y_test, y_preds_test)\nprint(f\"Linear Regression Intercept: {model_ridge_cv.intercept_}\")\nprint(f\"Linear Regression Coefficients: {model_ridge_cv.coef_}, \\n\")\nprint(\"Train: R2:{0:,.3f}, MSE:{1:,.2f}, RMSE:{2:,.2f}\".format(score_train, mse_train, np.sqrt(mse_train)))\nprint(\"Test : R2:{0:,.3f}, MSE:{1:,.2f}, RMSE:{2:,.2f}\".format(score_test, mse_test, np.sqrt(mse_test)))\n\n#Plotting\nx_ax = range(len(X_test))\nplt.scatter(x_ax, y_test, s=5, color=\"blue\", label=\"original\")\nplt.plot(x_ax, y_preds_test, lw=0.8, color=\"red\", label=\"predicted\")\nplt.legend()\n\n#Visualizing y_pred in the dataset\ny_pred_all = model_ridge_cv.predict(X_scaled)\nhouse_ds[\"SalePrice_predicted\"] = y_pred_all\nhouse_ds.to_excel(\"model_ridge_cv.xlsx\")","cb1783e4":"#Creating a Lasso Regression model and checking its Metrics\n\nfrom sklearn.linear_model import Lasso\n\n#Trying different alphas\nalphas = [0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\nprint(\"Testing alphas:\")\nfor a in alphas:\n    model_lasso = Lasso(alpha=a, normalize=True, max_iter=1000000000).fit(X_train, y_train) \n    y_preds_train = model_lasso.predict(X_train)\n    y_preds_test = model_lasso.predict(X_test)\n    score_train = r2_score(y_train, y_preds_train)\n    score_test = r2_score(y_test, y_preds_test)\n    mse_train = mean_squared_error(y_train, y_preds_train)\n    mse_test = mean_squared_error(y_test, y_preds_test)\n    print(\"Train: Alpha:{0:,.6f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a, score_train, mse_train, np.sqrt(mse_train)))\n    print(\"Test : Alpha:{0:,.6f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a, score_test, mse_test, np.sqrt(mse_test)))\nprint(\"\")\n\n#Choosing the best alpha\na_final = 0.000001\nmodel_lasso = Lasso(alpha=a_final, normalize=True, max_iter=1000000000).fit(X_train, y_train) \ny_preds_train = model_lasso.predict(X_train)\ny_preds_test = model_lasso.predict(X_test)\nscore_train = r2_score(y_train, y_preds_train)\nscore_test = r2_score(y_test, y_preds_test)\nmse_train = mean_squared_error(y_train, y_preds_train)\nmse_test = mean_squared_error(y_test, y_preds_test)\nprint(f\"Linear Regression Intercept: {model_lasso.intercept_}\")\nprint(f\"Linear Regression Coefficients: {model_lasso.coef_}, \\n\")\nprint(\"Chosen alpha:\")\nprint(\"Train: Alpha:{0:,.6f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a_final, score_train, mse_train, np.sqrt(mse_train)))\nprint(\"Test : Aplha:{0:,.6f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a_final, score_test, mse_test, np.sqrt(mse_test)))\n\n#Plotting\nx_ax = range(len(X_test))\nplt.scatter(x_ax, y_test, s=5, color=\"blue\", label=\"original\")\nplt.plot(x_ax, y_preds_test, lw=0.8, color=\"red\", label=\"predicted\")\nplt.legend()\n\n#Visualizing y_pred in the dataset\ny_pred_all = model_lasso.predict(X_scaled)\nhouse_ds[\"SalePrice_predicted\"] = y_pred_all\nhouse_ds.to_excel(\"model_lasso.xlsx\")","748b2c87":"#Creating a LassoCV Regression model and checking its Metrics\n\nfrom sklearn.linear_model import LassoCV\n\n#Choosing the best alpha\nmodel_lasso_cv = LassoCV(alphas=alphas, normalize=True).fit(X_train, y_train) \ny_preds_train = model_lasso_cv.predict(X_train)\ny_preds_test = model_lasso_cv.predict(X_test)\nscore_train = r2_score(y_train, y_preds_train)\nscore_test = r2_score(y_test, y_preds_test)\nmse_train = mean_squared_error(y_train, y_preds_train)\nmse_test = mean_squared_error(y_test, y_preds_test)\nprint(f\"Linear Regression Intercept: {model_lasso_cv.intercept_}\")\nprint(f\"Linear Regression Coefficients: {model_lasso_cv.coef_}, \\n\")\nprint(\"Train: R2:{0:,.3f}, MSE:{1:,.2f}, RMSE:{2:,.2f}\".format(score_train, mse_train, np.sqrt(mse_train)))\nprint(\"Test : R2:{0:,.3f}, MSE:{1:,.2f}, RMSE:{2:,.2f}\".format(score_test, mse_test, np.sqrt(mse_test)))\n\n#Plotting\nx_ax = range(len(X_test))\nplt.scatter(x_ax, y_test, s=5, color=\"blue\", label=\"original\")\nplt.plot(x_ax, y_preds_test, lw=0.8, color=\"red\", label=\"predicted\")\nplt.legend()\n\n#Visualizing y_pred in the dataset\ny_pred_all = model_lasso_cv.predict(X_scaled)\nhouse_ds[\"SalePrice_predicted\"] = y_pred_all\nhouse_ds.to_excel(\"model_lasso_cv.xlsx\")","0b3e4f41":"#Creating a Random Forest Regression model and checking its Metrics\n\nfrom sklearn.ensemble import RandomForestRegressor\n\n#Trying different depths\ndepths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nprint(\"Testing depths:\")\nfor a in depths:\n    model_rf = RandomForestRegressor(max_depth=a, random_state=0).fit(X_train, y_train.values.ravel()) \n    y_preds_train = model_rf.predict(X_train)\n    y_preds_test = model_rf.predict(X_test)\n    score_train = r2_score(y_train, y_preds_train)\n    score_test = r2_score(y_test, y_preds_test)\n    mse_train = mean_squared_error(y_train, y_preds_train)\n    mse_test = mean_squared_error(y_test, y_preds_test)\n    print(\"Train: Depth:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a, score_train, mse_train, np.sqrt(mse_train)))\n    print(\"Test : Depth:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a, score_test, mse_test, np.sqrt(mse_test)))\nprint(\"\")\n\n#Choosing the best depth\na_final = 16\nmodel_rf = RandomForestRegressor(max_depth=a_final, random_state=0).fit(X_train, y_train.values.ravel()) \ny_preds_train = model_rf.predict(X_train)\ny_preds_test = model_rf.predict(X_test)\nscore_train = r2_score(y_train, y_preds_train)\nscore_test = r2_score(y_test, y_preds_test)\nmse_train = mean_squared_error(y_train, y_preds_train)\nmse_test = mean_squared_error(y_test, y_preds_test)\nprint(\"Chosen depth:\")\nprint(\"Train: Depth:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a_final, score_train, mse_train, np.sqrt(mse_train)))\nprint(\"Test : Depth:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a_final, score_test, mse_test, np.sqrt(mse_test)))\n\n#Plotting\nx_ax = range(len(X_test))\nplt.scatter(x_ax, y_test, s=5, color=\"blue\", label=\"original\")\nplt.plot(x_ax, y_preds_test, lw=0.8, color=\"red\", label=\"predicted\")\nplt.legend()\n\n#Visualizing y_pred in the dataset\ny_pred_all = model_rf.predict(X_scaled)\nhouse_ds[\"SalePrice_predicted\"] = y_pred_all\nhouse_ds.to_excel(\"model_rf.xlsx\")","3cfeb826":"#Creating a XGBoost Regression model and checking its Metrics\n\nfrom xgboost import XGBRegressor\n\n#Trying different depths\ndepths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(\"Testing depths:\")\nfor a in depths:\n    model_xgb = XGBRegressor(max_depth=a, random_state=0, silent=True).fit(X_train,y_train) \n    y_preds_train = model_xgb.predict(X_train)\n    y_preds_test = model_xgb.predict(X_test)\n    score_train = r2_score(y_train, y_preds_train)\n    score_test = r2_score(y_test, y_preds_test)\n    mse_train = mean_squared_error(y_train, y_preds_train)\n    mse_test = mean_squared_error(y_test, y_preds_test)\n    print(\"Train: Depth:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a, score_train, mse_train, np.sqrt(mse_train)))\n    print(\"Test : Depth:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a, score_test, mse_test, np.sqrt(mse_test)))\nprint(\"\")\n\n#Choosing the best depth\na_final = 3\nmodel_xgb = XGBRegressor(max_depth=a_final, random_state=0, silent=True).fit(X_train,y_train) \ny_preds_train = model_xgb.predict(X_train)\ny_preds_test = model_xgb.predict(X_test)\nscore_train = r2_score(y_train, y_preds_train)\nscore_test = r2_score(y_test, y_preds_test)\nmse_train = mean_squared_error(y_train, y_preds_train)\nmse_test = mean_squared_error(y_test, y_preds_test)\nprint(\"Chosen depth:\")\nprint(\"Train: Depth:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a_final, score_train, mse_train, np.sqrt(mse_train)))\nprint(\"Test : Depth:{0:,.0f}, R2:{1:,.3f}, MSE:{2:,.2f}, RMSE:{3:,.2f}\".format(a_final, score_test, mse_test, np.sqrt(mse_test)))\n\n#Plotting\nx_ax = range(len(X_test))\nplt.scatter(x_ax, y_test, s=5, color=\"blue\", label=\"original\")\nplt.plot(x_ax, y_preds_test, lw=0.8, color=\"red\", label=\"predicted\")\nplt.legend()\n\n#Visualizing y_pred in the dataset\ny_pred_all = model_xgb.predict(X_scaled)\nhouse_ds[\"SalePrice_predicted\"] = y_pred_all\nhouse_ds.to_excel(\"model_xgb.xlsx\")","668cf5dd":"#Creating a Deep Learning Regression model and checking its Metrics\n\nfrom keras import Sequential\nfrom keras.layers import Dense\n\n#Creating a model\nmodel_dl = Sequential()\n\n#Input and First Hidden Layer\nmodel_dl.add(Dense(units=256, activation=\"relu\", input_dim=X_train.shape[1]))\n#Second Hidden Layer\nmodel_dl.add(Dense(units=256, activation=\"relu\"))\n#Third Hidden Layer\nmodel_dl.add(Dense(units=256, activation=\"relu\"))\n#Output Layer\nmodel_dl.add(Dense(units=1))\n\n#Compiling the neural network\nmodel_dl.compile(optimizer=\"adam\",loss=\"mean_squared_error\")\n\n#Fitting to the model\nmodel_dl.fit(X_train,y_train, batch_size=10, epochs=100)\n\n#Getting the predictions & Metrics\ny_preds_train = model_dl.predict(X_train)\ny_preds_test = model_dl.predict(X_test)\nscore_train = r2_score(y_train, y_preds_train)\nscore_test = r2_score(y_test, y_preds_test)\nmse_train = mean_squared_error(y_train, y_preds_train)\nmse_test = mean_squared_error(y_test, y_preds_test)\nprint(\"Train: R2:{0:,.3f}, MSE:{1:,.2f}, RMSE:{2:,.2f}\".format(score_train, mse_train, np.sqrt(mse_train)))\nprint(\"Test : R2:{0:,.3f}, MSE:{1:,.2f}, RMSE:{2:,.2f}\".format(score_test, mse_test, np.sqrt(mse_test)))\n\n#Plotting\nx_ax = range(len(X_test))\nplt.scatter(x_ax, y_test, s=5, color=\"blue\", label=\"original\")\nplt.plot(x_ax, y_preds_test, lw=0.8, color=\"red\", label=\"predicted\")\nplt.legend()\n\n#Visualizing y_pred in the dataset\ny_pred_all = model_dl.predict(X_scaled)\nhouse_ds[\"SalePrice_predicted\"] = y_pred_all\nhouse_ds.to_excel(\"model_dl.xlsx\")","97b10476":"#Data Collection\n\nhouse_ds_to_submit = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\", sep=\",\")\n\n#Data Cleaning\n#Treat rows with NA in the following columns:\nhouse_ds_to_submit[\"LotFrontage\"].replace(0, np.nan, inplace=True)\nhouse_ds_to_submit[\"LotFrontage\"].fillna(house_ds_to_submit[\"LotFrontage\"].sum() \/ house_ds_to_submit[\"LotArea\"].sum() * house_ds_to_submit[\"LotArea\"], inplace=True)\nhouse_ds_to_submit[\"MasVnrType\"].fillna(house_ds_to_submit[\"MasVnrType\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"MasVnrArea\"].fillna(house_ds_to_submit[\"MasVnrArea\"].mean(), inplace=True)\nhouse_ds_to_submit[\"BsmtQual\"].fillna(house_ds_to_submit[\"BsmtQual\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"BsmtCond\"].fillna(house_ds_to_submit[\"BsmtCond\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"BsmtExposure\"].fillna(house_ds_to_submit[\"BsmtExposure\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"BsmtFinType1\"].fillna(house_ds_to_submit[\"BsmtFinType1\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"BsmtFinType2\"].fillna(house_ds_to_submit[\"BsmtFinType2\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"Electrical\"].fillna(house_ds_to_submit[\"Electrical\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"FireplaceQu\"].fillna(house_ds_to_submit[\"FireplaceQu\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"GarageType\"].fillna(house_ds_to_submit[\"GarageType\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"GarageYrBlt\"].fillna(house_ds_to_submit[\"GarageYrBlt\"].mean(), inplace=True)\nhouse_ds_to_submit[\"GarageFinish\"].fillna(house_ds_to_submit[\"GarageFinish\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"GarageQual\"].fillna(house_ds_to_submit[\"GarageQual\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"GarageCond\"].fillna(house_ds_to_submit[\"GarageCond\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"GarageCars\"].fillna(house_ds_to_submit[\"GarageCars\"].mean(), inplace=True)\nhouse_ds_to_submit[\"GarageArea\"].fillna(house_ds_to_submit[\"GarageArea\"].mean(), inplace=True)\nhouse_ds_to_submit[\"TotalBsmtSF\"].fillna(house_ds_to_submit[\"TotalBsmtSF\"].mean(), inplace=True)\nhouse_ds_to_submit[\"BsmtFinSF1\"].fillna(house_ds_to_submit[\"BsmtFinSF1\"].mean(), inplace=True)\nhouse_ds_to_submit[\"KitchenQual\"].fillna(house_ds_to_submit[\"KitchenQual\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"SaleType\"].fillna(house_ds_to_submit[\"SaleType\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"Utilities\"].fillna(house_ds_to_submit[\"Utilities\"].mode()[0], inplace=True)\nhouse_ds_to_submit[\"Functional\"].fillna(house_ds_to_submit[\"Functional\"].mode()[0], inplace=True)\n\n#Convert categorical variables to dummies:\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"MSZoning\"], prefix=\"MSZoning\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"Street\"], prefix=\"Street\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"LotConfig\"], prefix=\"LotConfig\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"Neighborhood\"], prefix=\"Neighborhood\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"Condition1\"], prefix=\"Condition1\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"Condition2\"], prefix=\"Condition2\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"BldgType\"], prefix=\"BldgType\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"RoofStyle\"], prefix=\"RoofStyle\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"RoofMatl\"], prefix=\"RoofMatl\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"Exterior1st\"], prefix=\"Exterior1st\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"Exterior2nd\"], prefix=\"Exterior2nd\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"MasVnrType\"], prefix=\"MasVnrType\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"Foundation\"], prefix=\"Foundation\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"Heating\"], prefix=\"Heating\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"CentralAir\"], prefix=\"CentralAir\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"SaleType\"], prefix=\"SaleType\")], axis=1)\nhouse_ds_to_submit = pd.concat([house_ds_to_submit, pd.get_dummies(house_ds_to_submit[\"SaleCondition\"], prefix=\"SaleCondition\")], axis=1)\n\nhouse_ds_to_submit[\"LotShape_Encoding\"] = house_ds_to_submit[\"LotShape\"].apply(lambda x: [\"IR3\", \"IR2\", \"IR1\", \"Reg\"].index(x))\nhouse_ds_to_submit[\"LandContour_Encoding\"] = house_ds_to_submit[\"LandContour\"].apply(lambda x: [\"HLS\", \"Bnk\", \"Low\", \"Lvl\"].index(x))\nhouse_ds_to_submit[\"Utilities_Encoding\"] = house_ds_to_submit[\"Utilities\"].apply(lambda x: [\"ELO\", \"NoSeWa\", \"NoSewr\", \"AllPub\"].index(x))\nhouse_ds_to_submit[\"LandSlope_Encoding\"] = house_ds_to_submit[\"LandSlope\"].apply(lambda x: [\"Sev\", \"Mod\", \"Gtl\"].index(x))\nhouse_ds_to_submit[\"HouseStyle_Encoding\"] = house_ds_to_submit[\"HouseStyle\"].apply(lambda x: [\"1Story\", \"1.5Fin\", \"1.5Unf\", \"2Story\", \"2.5Fin\", \"2.5Unf\", \"SFoyer\", \"SLvl\"].index(x))\nhouse_ds_to_submit[\"ExterQual_Encoding\"] = house_ds_to_submit[\"ExterQual\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds_to_submit[\"ExterCond_Encoding\"] = house_ds_to_submit[\"ExterCond\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds_to_submit[\"BsmtQual_Encoding\"] = house_ds_to_submit[\"BsmtQual\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds_to_submit[\"BsmtCond_Encoding\"] = house_ds_to_submit[\"BsmtCond\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds_to_submit[\"BsmtExposure_Encoding\"] = house_ds_to_submit[\"BsmtExposure\"].apply(lambda x: [\"No\", \"Mn\", \"Av\", \"Gd\"].index(x))\nhouse_ds_to_submit[\"BsmtFinType1_Encoding\"] = house_ds_to_submit[\"BsmtFinType1\"].apply(lambda x: [\"Unf\", \"LwQ\", \"BLQ\", \"Rec\", \"ALQ\", \"GLQ\"].index(x))\nhouse_ds_to_submit[\"BsmtFinType2_Encoding\"] = house_ds_to_submit[\"BsmtFinType2\"].apply(lambda x: [\"Unf\", \"LwQ\", \"BLQ\", \"Rec\", \"ALQ\", \"GLQ\"].index(x))\nhouse_ds_to_submit[\"HeatingQC_Encoding\"] = house_ds_to_submit[\"HeatingQC\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds_to_submit[\"Electrical_Encoding\"] = house_ds_to_submit[\"Electrical\"].apply(lambda x: [\"Mix\", \"FuseP\", \"FuseF\", \"FuseA\", \"SBrkr\"].index(x))\nhouse_ds_to_submit[\"KitchenQual_Encoding\"] = house_ds_to_submit[\"KitchenQual\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds_to_submit[\"Functional_Encoding\"] = house_ds_to_submit[\"Functional\"].apply(lambda x: [\"Sal\", \"Sev\", \"Maj2\", \"Maj1\", \"Mod\", \"Min2\", \"Min1\", \"Typ\"].index(x))\nhouse_ds_to_submit[\"FireplaceQu_Encoding\"] = house_ds_to_submit[\"FireplaceQu\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds_to_submit[\"GarageType_Encoding\"] = house_ds_to_submit[\"GarageType\"].apply(lambda x: [\"Detchd\", \"CarPort\", \"BuiltIn\", \"Basment\", \"Attchd\", \"2Types\"].index(x))\nhouse_ds_to_submit[\"GarageFinish_Encoding\"] = house_ds_to_submit[\"GarageFinish\"].apply(lambda x: [\"Unf\", \"RFn\", \"Fin\"].index(x))\nhouse_ds_to_submit[\"GarageQual_Encoding\"] = house_ds_to_submit[\"GarageQual\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds_to_submit[\"GarageCond_Encoding\"] = house_ds_to_submit[\"GarageCond\"].apply(lambda x: [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"].index(x))\nhouse_ds_to_submit[\"PavedDrive_Encoding\"] = house_ds_to_submit[\"PavedDrive\"].apply(lambda x: [\"N\", \"P\", \"Y\"].index(x))\n\n#Features Selection\n\nX_ds_to_submit = house_ds_to_submit[[\"ExterQual_Encoding\", \"OverallQual\", \"GarageCars\", \"GarageFinish_Encoding\", \n                                     \"BsmtQual_Encoding\", \"TotalBsmtSF\", \"KitchenQual_Encoding\", \"GrLivArea\",\n                                     \"Fireplaces\", \"YearRemodAdd\", \"BsmtFinSF1\", \"2ndFlrSF\", \"CentralAir_N\",\n                                     \"GarageType_Encoding\", \"MSZoning_RM\", \"1stFlrSF\", \"TotRmsAbvGrd\",\n                                     \"BsmtFinType1_Encoding\", \"HalfBath\", \"MSZoning_RL\", \"LotArea\", \"KitchenAbvGr\",\n                                     \"BldgType_1Fam\", \"BedroomAbvGr\", \"BsmtExposure_Encoding\", \"GarageArea\",\n                                     \"SaleType_New\", \"MoSold\", \"YearBuilt\"]]\n\n#Scaling all features\n\nsc_X = MinMaxScaler()\nX_ds_to_submit_scaled = sc_X.fit_transform(X_ds_to_submit)\nX_ds_to_submit_scaled = pd.DataFrame(X_ds_to_submit_scaled)\n\n#Visualizing y_pred in the dataset\n\ny_pred_all =  model_xgb.predict(X_ds_to_submit_scaled)\nhouse_ds_to_submit[\"SalePrice_predicted\"] = y_pred_all\nhouse_ds_to_submit.to_excel(\"model_xgb_to_submit.xlsx\")","44561746":"# 9.7 XGBoost Regression","77450305":"# 5. Data Cleaning\n\n    We\u00b4ll perform the following:\n\n    1. Remove columns with huge amount of null information since they won\u00b4t aggregate relevant info to the model (Alley, PoolArea, PoolQC, Fence, MiscFeature, MiscVal). Also remove column Id since it\u00b4s not important to the model\n\n\n    2. Treat rows with NA in the following columns:\n        * 2.1 LotFrontage: make it proportional to LotArea\n        * 2.2 MasVnrType: replace by mode\n        * 2.3 MasVnrArea: replace by mean\n        * 2.4 BsmtQual: replace by mode\n        * 2.5 BsmtCond: replace by mode\n        * 2.6 BsmtExposure: replace by mode\n        * 2.7 BsmtFinType1: replace by mode\n        * 2.8 BsmtFinType2: replace by mode\n        * 2.9 Electrical: replace by mode\n        * 2.10 FireplaceQu: replace by mode\n        * 2.11 GarageType: replace by mode\n        * 2.12 GarageYrBlt:\treplace by mean\n        * 2.13 GarageFinish: replace by mode\n        * 2.14 GarageQual: replace by mode\n        * 2.15 GarageCond: replace by mode\n\n\n    3. Convert categorical variables to dummies:\n        * 3.1 One Hot Encoding: MSZoning, Street, LotConfig, Neighborhood, Condition1, Condition2, BldgType, RoofStyle, RoofMatl, Exterior1st, Exterior2nd, MasVnrType, Foundation, Heating, CentralAir, SaleType, SaleCondition\n        * 3.2 Label Encoding: LotShape, LandContour, Utilities, LandSlope, HouseStyle, ExterQual, ExterCond, BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, HeatingQC, Electrical, KitchenQual, Functional, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PavedDrive\n\n\n    4. Remove outliers (also to be commented on 6. Data Exploration)\n        * LotArea: rows 249, 313, 335, 706\n        * BsmtFinSF1: row 1298\n        * TotalBsmtSF: row 1298\n        * EnclosedPorch: row 197\n\n\n    * no duplicated rows found","36a6cdd8":"# 11. Conclusions\n\nIF YOU LIKE IT OR IF IT HELPS YOU SOMEHOW, COULD YOU PLEASE UPVOTE? THANK YOU VERY MUCH!!!\n\nIn this project we went through all the process from defining the business objective, collecting data, exploring features and distributions, treating data, understanding correlations, selecting relevant features, data modelling and presenting 8 different algorithms with metrics to select the best to predict the best Sale Price to use in the market, what\u00b4s vital for a real state company in order to minimize the profit losses, maximize the revenue and gain market share. The chosen model was Random Forest for bringing the lowest prediction error (R2 around 90%).","23c83ddf":"# 8. Data Modelling","9b7d8bd4":"# 10. Model Deployment","e2779049":"# 6. Data Exploration\n\n1. With the data exploration below we find the following outliers (to be removed since they\u00b4re not compromising many lines):\n    * LotArea: rows 249, 313, 335, 706\n    * BsmtFinSF1: row 1298\n    * TotalBsmtSF: row 1298\n    * EnclosedPorch: row 197","a92a3624":"# 4. Data Preliminary Exploration","e9673005":"# 2. Importing Basic Libraries","f0d2da63":"# 9.3 RidgeCV Regression","5c71ad56":"# 9.6 Random Forest Regression","f78a8b5d":"# 9.2 Ridge Regression","7f8d5857":"# 9.1 Polynomial Regression","4b498447":"# 1. Introduction: Business Goal & Problem Definition\n\nThe goal of this project is developing an algorithm that best predicts House Prices, allowing the real state company decide on the best prices to practice in the market, bringing agility and a robust system behind it. The dataset counts on 80 independent variables, as listed below:\n\nIF YOU LIKE IT OR IF IT HELPS YOU SOMEHOW, COULD YOU PLEASE UPVOTE? THANK YOU VERY MUCH!!!\n\n* MSSubClass: The building class\n* MSZoning: The general zoning classification\n* LotFrontage: Linear feet of street connected to property\n* LotArea: Lot size in square feet\n* Street: Type of road access\n* Alley: Type of alley access\n* LotShape: General shape of property\n* LandContour: Flatness of the property\n* Utilities: Type of utilities available\n* LotConfig: Lot configuration\n* LandSlope: Slope of property\n* Neighborhood: Physical locations within Ames city limits\n* Condition1: Proximity to main road or railroad\n* Condition2: Proximity to main road or railroad (if a second is present)\n* BldgType: Type of dwelling\n* HouseStyle: Style of dwelling\n* OverallQual: Overall material and finish quality\n* OverallCond: Overall condition rating\n* YearBuilt: Original construction date\n* YearRemodAdd: Remodel date\n* RoofStyle: Type of roof\n* RoofMatl: Roof material\n* Exterior1st: Exterior covering on house\n* Exterior2nd: Exterior covering on house (if more than one material)\n* MasVnrType: Masonry veneer type\n* MasVnrArea: Masonry veneer area in square feet\n* ExterQual: Exterior material quality\n* ExterCond: Present condition of the material on the exterior\n* Foundation: Type of foundation\n* BsmtQual: Height of the basement\n* BsmtCond: General condition of the basement\n* BsmtExposure: Walkout or garden level basement walls\n* BsmtFinType1: Quality of basement finished area\n* BsmtFinSF1: Type 1 finished square feet\n* BsmtFinType2: Quality of second finished area (if present)\n* BsmtFinSF2: Type 2 finished square feet\n* BsmtUnfSF: Unfinished square feet of basement area\n* TotalBsmtSF: Total square feet of basement area\n* Heating: Type of heating\n* HeatingQC: Heating quality and condition\n* CentralAir: Central air conditioning\n* Electrical: Electrical system\n* 1stFlrSF: First Floor square feet\n* 2ndFlrSF: Second floor square feet\n* LowQualFinSF: Low quality finished square feet (all floors)\n* GrLivArea: Above grade (ground) living area square feet\n* BsmtFullBath: Basement full bathrooms\n* BsmtHalfBath: Basement half bathrooms\n* FullBath: Full bathrooms above grade\n* HalfBath: Half baths above grade\n* Bedroom: Number of bedrooms above basement level\n* Kitchen: Number of kitchens\n* KitchenQual: Kitchen quality\n* TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n* Functional: Home functionality rating\n* Fireplaces: Number of fireplaces\n* FireplaceQu: Fireplace quality\n* GarageType: Garage location\n* GarageYrBlt: Year garage was built\n* GarageFinish: Interior finish of the garage\n* GarageCars: Size of garage in car capacity\n* GarageArea: Size of garage in square feet\n* GarageQual: Garage quality\n* GarageCond: Garage condition\n* PavedDrive: Paved driveway\n* WoodDeckSF: Wood deck area in square feet\n* OpenPorchSF: Open porch area in square feet\n* EnclosedPorch: Enclosed porch area in square feet\n* 3SsnPorch: Three season porch area in square feet\n* ScreenPorch: Screen porch area in square feet\n* PoolArea: Pool area in square feet\n* PoolQC: Pool quality\n* Fence: Fence quality\n* MiscFeature: Miscellaneous feature not covered in other categories\n* MiscVal: $Value of miscellaneous feature\n* MoSold: Month Sold\n* YrSold: Year Sold\n* SaleType: Type of sale\n* SaleCondition: Condition of sale","c95901ab":"# 9.4 Lasso Regression","0c1241b7":"# 3. Data Collection","25bdb5c5":"# 9. Machine Learning Algorithms Implementation & Assessment","cb1f9902":"# 9.5 LassoCV Regression","be08fab3":"# 7. Correlations Analysis & Features Selection","af418033":"# 9.8 Deep Learning Regression"}}