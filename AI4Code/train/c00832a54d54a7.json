{"cell_type":{"685b83ac":"code","fe8a5a52":"code","1058df6f":"code","d08bc7cc":"code","102f13bc":"code","97dc58d4":"code","3c3c5ad0":"code","a5dab195":"code","f1588537":"code","1d2a4aa1":"code","443ac23c":"code","690a6a14":"code","19ff0a2b":"code","c25510f8":"code","5f818a9b":"code","268bf6c7":"code","34ff918c":"code","84f9fedf":"code","53210052":"code","269fcf77":"markdown","73c7f494":"markdown","bd15b250":"markdown","bdff6706":"markdown","7cc188ff":"markdown","42d03e13":"markdown","1e7c088e":"markdown","6d157ecd":"markdown","a95f2fb9":"markdown"},"source":{"685b83ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe8a5a52":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport numpy as np \nimport pandas as pd","1058df6f":"df = pd.read_csv('\/kaggle\/input\/go-emotions-google-emotions-dataset\/go_emotions_dataset.csv')","d08bc7cc":"df.head()","102f13bc":"df.isnull().sum().reset_index()","97dc58d4":"df.drop('id', inplace=True, axis=1)","3c3c5ad0":"df1 =df.iloc[:,2:-6]","a5dab195":"df1.head()","f1588537":"plt.figure(figsize=(25,20))\nsns.heatmap(df1.corr(), center=0, annot=True)","1d2a4aa1":"positive_col = ['admiration','amusement','approval','caring','curiosity','excitement','gratitude','joy','love','optimism','relief','surprise']\nnegative_col = ['sadness','pride','fear','embarrassment','disapproval','disappointment','confusion','annoyance','anger','nervousness','desire']\nambiguous_col = ['remorse','realization','grief','disgust']\nneutral_col = ['neutral']","443ac23c":"positive_col = df[positive_col]\nnegative_col = df[negative_col]\nambiguous_col = df[ambiguous_col]\nneutral_col = df[neutral_col]","690a6a14":"emotion_counts = {}\nfor c in positive_col:\n    emotion_counts[c]  = positive_col[c].value_counts().to_dict()[1]","19ff0a2b":"plt.figure(figsize = (10,10) )\nfig = px.bar(x=list(emotion_counts.keys()), y=list(emotion_counts.values()))\nfig.update_layout(title = 'Go Emotions', height = 600, xaxis_title=\" Positive Emotion\", yaxis_title=\"Number of Texts\")\nfig.show()","c25510f8":"positive_col['admiration'].value_counts()","5f818a9b":"emotion_counts = {}\nfor c in negative_col:\n    emotion_counts[c]  = negative_col[c].value_counts().to_dict()[1]","268bf6c7":"plt.figure(figsize = (10,10) )\nfig = px.bar(x=list(emotion_counts.keys()), y=list(emotion_counts.values()))\nfig.update_layout(title = 'Go Emotions', height = 600, xaxis_title=\"Negative Emotion\", yaxis_title=\"Number of Texts\")\nfig.show()","34ff918c":"negative_col['sadness'].value_counts()","84f9fedf":"df1 =df['example_very_unclear'].value_counts()","53210052":"plt.figure(figsize = (5,5))\nplt.pie(df1,labels = ['No','Yes'],autopct='%.0f%%' , radius = 2 ,explode = (0.1,0.03),shadow = True)\nplt.show()","269fcf77":"# Import Dependencies","73c7f494":"# Negative Emotion Analysis","bd15b250":"# Positive Emotion Analysis","bdff6706":"# Data Cleaning","7cc188ff":"# Is the text very unclear ?","42d03e13":"# Feature Engineering","1e7c088e":"# Thank you !!\nPlease upvote if you liked my work :):)","6d157ecd":"**Cross-Validation**","a95f2fb9":"**Corss-validation**"}}