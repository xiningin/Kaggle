{"cell_type":{"9df7ffb1":"code","c9ae31f7":"code","ee589103":"code","f4539993":"code","c9f73944":"code","980427d1":"code","f0d96e82":"code","d6bf19fb":"code","0ed047ed":"code","ea28e70e":"code","83475650":"code","9c585143":"code","1877fe63":"code","8c9347df":"code","85247261":"code","8dbce736":"code","65d5c059":"code","5998b334":"code","a489d4eb":"code","17a75986":"code","f67add6f":"code","b3d711a6":"code","59c404f6":"code","d6a2ca22":"code","545060b7":"code","5f171bb2":"code","9b4174ec":"code","1f2380c7":"code","594cc594":"code","6da349ed":"code","52e581c2":"code","9d07f0c3":"code","cf86146e":"code","35c7147c":"code","9db6ae2d":"code","3f1ea545":"code","7672110a":"markdown","46ede610":"markdown","809a73e4":"markdown","a96ed3da":"markdown","fe1bcdd3":"markdown","bf168ec1":"markdown","1289517e":"markdown","876b68dd":"markdown","c7e224e8":"markdown","3299de8c":"markdown","8911acfc":"markdown","b48231da":"markdown","6be1b3e1":"markdown","76b3150d":"markdown","169f8534":"markdown","bf92b713":"markdown","4a6ffc15":"markdown","598218ed":"markdown","44430a36":"markdown","d023c4aa":"markdown","4ec9afea":"markdown","4d88cbd8":"markdown","4334a101":"markdown","b09ae378":"markdown"},"source":{"9df7ffb1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom xgboost import XGBRegressor\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.metrics import mean_squared_log_error, r2_score, mean_squared_error\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport statsmodels.api as sm\n\nimport tensorflow as tf\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\nimport warnings\nwarnings.filterwarnings('ignore')","c9ae31f7":"submission_df = pd.read_csv('..\/input\/ml-challenge-turkiye-is-bankasi-2\/sampleSubmission.csv')\ntrain_df = pd.read_csv('..\/input\/ml-challenge-turkiye-is-bankasi-2\/train.csv')\ntest_df = pd.read_csv('..\/input\/ml-challenge-turkiye-is-bankasi-2\/test_set.csv')\nsb = pd.read_csv('..\/input\/isbank2submission\/submission.csv')","ee589103":"train = train_df.copy()\ntest = test_df.copy()\nsubmission = submission_df.copy()","f4539993":"# Verilerdeki kolonlarin veri tiplerine bakiyoruz\n\nprint('---------------------------------')\nprint(\"TRAIN\")\nprint('---------------------------------\\n')\nprint(train.info())\nprint('\\n')\nprint('---------------------------------')\nprint(\"TEST\")\nprint('---------------------------------\\n')\nprint(test.info())","c9f73944":"# Verilerdeki bos satirlara bakiyoruz\n\nprint('---------------------------------')\nprint(\"TRAIN\")\nprint('---------------------------------\\n')\nprint(train.isna().sum())\nprint('\\n')\nprint('---------------------------------')\nprint(\"TEST\")\nprint('---------------------------------\\n')\nprint(test.isna().sum())","980427d1":"# Verilerdeki kolonlarin unique eleman sayilarina bakiyoruz\n\nprint('---------------------------------')\nprint(\"TRAIN\")\nprint('---------------------------------\\n')\nfor i in train.columns:\n    print(i,' kolonundaki unique eleman sayisi',train[i].nunique())\nprint('\\n')\nprint('---------------------------------')\nprint(\"TEST\")\nprint('---------------------------------\\n')\nfor i in test.columns:\n    print(i,' kolonundaki unique eleman sayisi',train[i].nunique())","f0d96e82":"# ISLEM_TURU kolonundaki degerleri PESIN ise 1 TAKSITLI ise 0 olarak degistiriyoruz\n\ntrain['ISLEM_TURU'] = train['ISLEM_TURU'].apply(lambda x: 1 if x =='PESIN' else 0)\n\ntest['ISLEM_TURU'] = test['ISLEM_TURU'].apply(lambda x: 1 if x =='PESIN' else 0)","d6bf19fb":"# Verilerdeki Yil ve Ay degerlerini kolon olarak ekliyoruz\n\ntrain['YIL'] = train['YIL_AY'].apply(lambda x: str(x)[:4])\ntrain['YIL'] = train['YIL'].astype(int)\n\ntrain['AY'] = train['YIL_AY'].apply(lambda x: str(x)[4:])\ntrain['AY'] = train['AY'].astype(int)\n\n\n\ntest['YIL'] = test['YIL_AY'].apply(lambda x: str(x)[:4])\ntest['YIL'] = test['YIL'].astype(int)\n\ntest['AY'] = test['YIL_AY'].apply(lambda x: str(x)[4:])\ntest['AY'] = test['AY'].astype(int)","0ed047ed":"# Dolar kur bilgisini kolon olarak verilere ekliyoruz\n\ntrain['DOLAR'] = train['YIL_AY'].apply(lambda x: 3.91 if x == 201711 else(3.79 if x == 201712 else(3.75 if x == 201801 else(3.79 if x == 201802 else(3.95 if x == 201803 else(4.06 if x == 201804 else(4.52 if x == 201805 else(4.58 if x == 201806 else(4.91 if x == 201807 else(6.50 if x == 201808 else(6.05 if x == 201809 else(5.58 if x == 201810 else(5.21 if x == 201811 else (5.28 if x == 201812 else(5.16 if x == 201901 else(np.nan))))))))))))))))\n\n\ntest['DOLAR'] = 5.33","ea28e70e":"# Sektorlere gore toplam harcamalara bakiyoruz\nsektor_harcamalari = train.groupby(['SEKTOR'])[['ISLEM_TUTARI']].sum().sort_values('ISLEM_TUTARI',ascending=False).reset_index()\n\nsns.barplot(y=sektor_harcamalari['SEKTOR'],x=sektor_harcamalari['ISLEM_TUTARI'])\nsns.set(rc={'figure.figsize':(20,15)})","83475650":"# Sektorleri harcamalara gore siniflara ayiriyoruz\n\n'''\n1. sinif = 'MARKET \/ ALISVERIS MERKEZLERI'\n\n2. sinif = 'BENZIN VE YAKIT ISTASYONLARI', 'GIYIM \/ AKSESUAR', 'CESITLI GIDA', 'ELEKTRIK-ELEKTRONIK ESYA \/ BILGISAYAR', 'SIGORTA' \n\n3. sinif = 'YAPI MALZEMELERI \/ HIRDAVAT \/ NALBURIYE', 'RESTORAN \/ CATERING', 'ARAC BAKIM \/ SERVIS', 'TURIZM \/ KONAKLAMA', 'MOBILYA \/ DEKORASYON', 'KAMU \/ VERI ODEMELERI', 'HIZMET SEKTORLERI'\n\n4. sinif = 'TELEKOMUNIKASYON', 'SAGLIK URUNLERI SATISI', 'BIREYSEL EMEKLILIK', 'EGITIM', 'SAGLIK HIZMETI', 'HAVAYOLLARI', 'KITAP-DERGI \/ KIRTASIYE \/ OFIS MALZEMELERI', 'MUTEAHHIT ISLERI', 'KOZMETIK \/ GUZELLIK', 'KUYUMCULAR', 'DIGER', 'FATURA', 'TASIMACILIK', 'DOGRUDAN PAZARLAMA', 'KULUP \/ DERNEK \/ SOSYAL HIZMETLER'\n\n5. sinif = 'EGLENCE \/ SPOR \/ HOBI', 'ARAC KIRALAMA', 'BAHCECILIK \/ CICEKCILIK', 'TARIM', 'TV YAYINCILIK HIZMETI'\n\n6. sinif = 'FINANSAL HIZMETLER', 'ICKILI YERLER', 'ARAC SATIS', 'DIJITAL URUNLER', 'TEMIZLIK \/ BAKIM \/ GIYSI HIZMETLERI', 'SANS VE BAHIS OYUNLARI'\n\n'''","9c585143":"def sektor_sinifi(df):\n    \n    df.loc[df['SEKTOR'].str.contains('MARKET \/ ALISVERIS MERKEZLERI', na=False), 'SEKTOR_SINIF'] = '1'\n    \n    df.loc[df['SEKTOR'].str.contains('BENZIN VE YAKIT ISTASYONLARI', na=False), 'SEKTOR_SINIF'] = '2'\n    df.loc[df['SEKTOR'].str.contains('GIYIM \/ AKSESUAR', na=False), 'SEKTOR_SINIF'] = '2'\n    df.loc[df['SEKTOR'].str.contains('CESITLI GIDA', na=False), 'SEKTOR_SINIF'] = '2'\n    df.loc[df['SEKTOR'].str.contains('ELEKTRIK-ELEKTRONIK ESYA \/ BILGISAYAR', na=False), 'SEKTOR_SINIF'] = '2'\n    df.loc[df['SEKTOR'].str.contains('SIGORTA', na=False), 'SEKTOR_SINIF'] = '2'\n\n    df.loc[df['SEKTOR'].str.contains('YAPI MALZEMELERI \/ HIRDAVAT \/ NALBURIYE', na=False), 'SEKTOR_SINIF'] = '3'\n    df.loc[df['SEKTOR'].str.contains('RESTORAN \/ CATERING', na=False), 'SEKTOR_SINIF'] = '3'\n    df.loc[df['SEKTOR'].str.contains('ARAC BAKIM \/ SERVIS', na=False), 'SEKTOR_SINIF'] = '3'\n    df.loc[df['SEKTOR'].str.contains('TURIZM \/ KONAKLAMA', na=False), 'SEKTOR_SINIF'] = '3'\n    df.loc[df['SEKTOR'].str.contains('MOBILYA \/ DEKORASYON', na=False), 'SEKTOR_SINIF'] = '3'\n    df.loc[df['SEKTOR'].str.contains('KAMU \/ VERI ODEMELERI', na=False), 'SEKTOR_SINIF'] = '3'\n    df.loc[df['SEKTOR'].str.contains('HIZMET SEKTORLERI', na=False), 'SEKTOR_SINIF'] = '3'\n    \n    df.loc[df['SEKTOR'].str.contains('TELEKOMUNIKASYON', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('SAGLIK URUNLERI SATISI', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('BIREYSEL EMEKLILIK', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('EGITIM', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('SAGLIK HIZMETI', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('HAVAYOLLARI', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('KITAP-DERGI \/ KIRTASIYE \/ OFIS MALZEMELERI', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('MUTEAHHIT ISLERI', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('KOZMETIK \/ GUZELLIK', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('KUYUMCULAR', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('DIGER', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('FATURA', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('TASIMACILIK', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('DOGRUDAN PAZARLAMA', na=False), 'SEKTOR_SINIF'] = '4'\n    df.loc[df['SEKTOR'].str.contains('KULUP \/ DERNEK \/ SOSYAL HIZMETLER', na=False), 'SEKTOR_SINIF'] = '4'\n\n    df.loc[df['SEKTOR'].str.contains('EGLENCE \/ SPOR \/ HOBI', na=False), 'SEKTOR_SINIF'] = '5'\n    df.loc[df['SEKTOR'].str.contains('ARAC KIRALAMA', na=False), 'SEKTOR_SINIF'] = '5'\n    df.loc[df['SEKTOR'].str.contains('BAHCECILIK \/ CICEKCILIK', na=False), 'SEKTOR_SINIF'] = '5'\n    df.loc[df['SEKTOR'].str.contains('TARIM', na=False), 'SEKTOR_SINIF'] = '5'\n    df.loc[df['SEKTOR'].str.contains('TV YAYINCILIK HIZMETI', na=False), 'SEKTOR_SINIF'] = '5'\n    \n    df.loc[df['SEKTOR'].str.contains('FINANSAL HIZMETLER', na=False), 'SEKTOR_SINIF'] = '6'\n    df.loc[df['SEKTOR'].str.contains('ICKILI YERLER', na=False), 'SEKTOR_SINIF'] = '6'\n    df.loc[df['SEKTOR'].str.contains('ARAC SATIS', na=False), 'SEKTOR_SINIF'] = '6'\n    df.loc[df['SEKTOR'].str.contains('DIJITAL URUNLER', na=False), 'SEKTOR_SINIF'] = '6'\n    df.loc[df['SEKTOR'].str.contains('TEMIZLIK \/ BAKIM \/ GIYSI HIZMETLERI', na=False), 'SEKTOR_SINIF'] = '6'\n    df.loc[df['SEKTOR'].str.contains('SANS VE BAHIS OYUNLARI', na=False), 'SEKTOR_SINIF'] = '6'\n\nsektor_sinifi(train)\nsektor_sinifi(test)","1877fe63":"# Yilin ceyrek donem bilgilerini veriye kolon olarak ekliyoruz\n\n\n\ntrain['CEYREK'] = train['AY'].apply(lambda x: 'Q1' if x == 1 or x == 2 or x == 3 else('Q2' if x == 4 or x == 5 or x == 6 else('Q3' if x == 7 or x == 8 or x == 9 else('Q4' if x == 10 or x == 11 or x == 12 else(np.nan)))))\n\ntest['CEYREK'] = test['AY'].apply(lambda x: 'Q1' if x == 1 or x == 2 or x == 3 else('Q2' if x == 4 or x == 5 or x == 6 else('Q3' if x == 7 or x == 8 or x == 9 else('Q4' if x == 10 or x == 11 or x == 12 else(np.nan)))))\n","8c9347df":"# Musterileri toplam harcama tutarlarina gore siniflara ayiriyoruz\n\nmusteri_harcamalari = train.groupby('CUSTOMER').sum()[['ISLEM_TUTARI']].reset_index()","85247261":"def musteri_sinifi(df):\n    \n    df.loc[df['ISLEM_TUTARI'] <= 5000, 'MUSTERI_SINIF'] = '1'\n    \n    df.loc[(df['ISLEM_TUTARI'] > 5000) & (df['ISLEM_TUTARI'] <= 100000), 'MUSTERI_SINIF'] = '2'\n    df.loc[(df['ISLEM_TUTARI'] > 100000) & (df['ISLEM_TUTARI'] <= 200000), 'MUSTERI_SINIF'] = '3'\n    df.loc[(df['ISLEM_TUTARI'] > 200000) & (df['ISLEM_TUTARI'] <= 300000), 'MUSTERI_SINIF'] = '4'\n    df.loc[(df['ISLEM_TUTARI'] > 300000) & (df['ISLEM_TUTARI'] <= 400000), 'MUSTERI_SINIF'] = '5'\n    df.loc[(df['ISLEM_TUTARI'] > 400000) & (df['ISLEM_TUTARI'] <= 500000), 'MUSTERI_SINIF'] = '6'\n    df.loc[(df['ISLEM_TUTARI'] > 500000) & (df['ISLEM_TUTARI'] <= 600000), 'MUSTERI_SINIF'] = '7'\n    df.loc[(df['ISLEM_TUTARI'] > 600000) & (df['ISLEM_TUTARI'] <= 700000), 'MUSTERI_SINIF'] = '8'\n    df.loc[(df['ISLEM_TUTARI'] > 700000) & (df['ISLEM_TUTARI'] <= 800000), 'MUSTERI_SINIF'] = '9'\n    df.loc[(df['ISLEM_TUTARI'] > 800000) & (df['ISLEM_TUTARI'] <= 900000), 'MUSTERI_SINIF'] = '10'\n    df.loc[(df['ISLEM_TUTARI'] > 900000) & (df['ISLEM_TUTARI'] <= 1000000), 'MUSTERI_SINIF'] = '11'\n    \n    df.loc[df['ISLEM_TUTARI'] > 1000000, 'MUSTERI_SINIF'] = '12'\n\nmusteri_sinifi(musteri_harcamalari)","8dbce736":"musteri_harcamalari","65d5c059":"train = pd.merge(train, musteri_harcamalari[['CUSTOMER','MUSTERI_SINIF']], on='CUSTOMER')\ntest = pd.merge(test, musteri_harcamalari[['CUSTOMER','MUSTERI_SINIF']], on='CUSTOMER')","5998b334":"# Musterilerin ortalama islem adedi ve islem tutarlarini buluyoruz\n\nmusteri_ortalama = train.groupby('CUSTOMER').mean()[['ISLEM_ADEDI','ISLEM_TUTARI']].rename(columns={'ISLEM_ADEDI':'ORTALAMA_ISLEM_ADET','ISLEM_TUTARI':'ORTALAMA_ISLEM_TUTAR'})","a489d4eb":"# Buldugumuz verileri kolon olarak ekliyoruz\n\ntrain = pd.merge(train,musteri_ortalama, on='CUSTOMER')\ntest = pd.merge(test,musteri_ortalama, on='CUSTOMER')","17a75986":"# Verilerdeki Record_Count kolonunu siliyoruz\n\ntrain.drop(['Record_Count','YIL_AY','SEKTOR'],axis=1,inplace=True)\n\ntest.drop(['Record_Count','YIL_AY','SEKTOR'],axis=1,inplace=True)","f67add6f":"encod_cols = ['YIL','AY','CEYREK','SEKTOR_SINIF','MUSTERI_SINIF','Id']","b3d711a6":"print('---------------------------------')\nprint(\"TRAIN\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(train.shape))\ndf = pd.get_dummies(train, columns=[encod_cols[0]], drop_first=True)\nprint('Dummy sonras\u0131 shape: {}'.format(df.shape))\nprint('\\n')\nprint('---------------------------------')\nprint(\"TEST\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(test.shape))\ntest_df = test.copy()\ntest_df['YIL_2018'] = 0\ntest_df['YIL_2019'] = 1\ntest_df.drop(['YIL'],axis=1,inplace=True)\nprint('Dummy sonras\u0131 shape: {}'.format(test_df.shape))","59c404f6":"print('---------------------------------')\nprint(\"TRAIN\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(df.shape))\ndf = pd.get_dummies(df, columns=[encod_cols[1]], drop_first=True)\nprint('Dummy sonras\u0131 shape: {}'.format(df.shape))\nprint('\\n')\nprint('---------------------------------')\nprint(\"TEST\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(test_df.shape))\ntest_df['AY_2'],test_df['AY_3'],test_df['AY_4'],test_df['AY_5'],test_df['AY_6'],test_df['AY_7'],test_df['AY_8'],test_df['AY_9'],test_df['AY_10'],test_df['AY_11'],test_df['AY_12'] = [1,0,0,0,0,0,0,0,0,0,0]\ntest_df.drop(['AY'],axis=1,inplace=True)\nprint('Dummy sonras\u0131 shape: {}'.format(test_df.shape))","d6a2ca22":"print('---------------------------------')\nprint(\"TRAIN\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(df.shape))\ndf = pd.get_dummies(df, columns=[encod_cols[2]], drop_first=True)\nprint('Dummy sonras\u0131 shape: {}'.format(df.shape))\nprint('\\n')\nprint('---------------------------------')\nprint(\"TEST\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(test_df.shape))\ntest_df['CEYREK_Q2'],test_df['CEYREK_Q3'],test_df['CEYREK_Q4'] = [0,0,0]\ntest_df.drop(['CEYREK'],axis=1,inplace=True)\nprint('Dummy sonras\u0131 shape: {}'.format(test_df.shape))","545060b7":"print('---------------------------------')\nprint(\"TRAIN\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(df.shape))\ndf = pd.get_dummies(df, columns=[encod_cols[3]], drop_first=True)\nprint('Dummy sonras\u0131 shape: {}'.format(df.shape))\nprint('\\n')\nprint('---------------------------------')\nprint(\"TEST\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(test_df.shape))\ntest_df = pd.get_dummies(test_df, columns=[encod_cols[3]], drop_first=True)\nprint('Dummy sonras\u0131 shape: {}'.format(test_df.shape))","5f171bb2":"print('---------------------------------')\nprint(\"TRAIN\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(df.shape))\ndf = pd.get_dummies(df, columns=[encod_cols[4]], drop_first=True)\nprint('Dummy sonras\u0131 shape: {}'.format(df.shape))\nprint('\\n')\nprint('---------------------------------')\nprint(\"TEST\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(test_df.shape))\ntest_df = pd.get_dummies(test_df, columns=[encod_cols[4]], drop_first=True)\nprint('Dummy sonras\u0131 shape: {}'.format(test_df.shape))","9b4174ec":"print('---------------------------------')\nprint(\"TRAIN\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(df.shape))\ndf = pd.get_dummies(df, columns=[encod_cols[5]],prefix='SEKTOR_ID' ,drop_first=True)\nprint('Dummy sonras\u0131 shape: {}'.format(df.shape))\nprint('\\n')\nprint('---------------------------------')\nprint(\"TEST\")\nprint('---------------------------------\\n')\nprint('Dummy \u00f6ncesi shape: {}'.format(test_df.shape))\ntest_df = pd.get_dummies(test_df, columns=[encod_cols[5]],prefix='SEKTOR_ID', drop_first=True)\nprint('Dummy sonras\u0131 shape: {}'.format(test_df.shape))","1f2380c7":"# y_train verisinin ortalamasi ile baz bir model olusturuyoruz. Bu modelde cikan hata en kotu modelin verdigi hatadir. Amacimiz bu hatayi dusurmek","594cc594":"y_train['ISLEM_TUTARI'].mean()","6da349ed":"y_test['ortalama'] = 421.5563907574824","52e581c2":"mean_squared_log_error(y_test['ISLEM_TUTARI'],y_test['ortalama'])","9d07f0c3":"x_train = df.drop(['ISLEM_TUTARI'],axis=1)\ny_train = df[['ISLEM_TUTARI']]\n\nx_test = test_df.drop(['ISLEM_TUTARI'],axis=1)","cf86146e":"scalerx = MinMaxScaler().fit(x_train)\nx_train = pd.DataFrame(scalerx.transform(x_train),columns=x_train.columns)\nx_test = pd.DataFrame(scalerx.transform(x_test),columns=x_test.columns)","35c7147c":"xgb_1 = XGBRegressor(n_estimators=150,learning_rate=0.5,max_depth=10,n_jobs=-1,verbosity=2)\nxgb_1.fit(x_train,y_train,verbose=True)","9db6ae2d":"test_df['model_1_pred'] = xgb_1.predict(x_test)\nsubmission['Expected'] = test_df.groupby('Id')[['model_1_pred']].sum().values","3f1ea545":"submission.to_csv('submission.csv',index=False)","7672110a":"<a id=\"4.3\"><\/a> <br>\n## Dolar Verisi Eklenmesi","46ede610":"<a id=\"7.2\"><\/a> <br>\n## 1.Model","809a73e4":"<a id=\"4.2\"><\/a> <br>\n## Ay ve Y\u0131l Verisi Eklenmesi","a96ed3da":"YIL_AY -harcamalar\u0131n yap\u0131ld\u0131\u011f\u0131 tarih (YIL ve AY format\u0131nda)\n\nISLEM_TURU -harcamalar\u0131n t\u00fcr\u00fc (pe\u015fin ya da taksitli)\n\nSEKTOR -harcamalar\u0131n yap\u0131ld\u0131\u011f\u0131 sekt\u00f6r\n\nCUSTOMER -her m\u00fc\u015fterinin unique m\u00fc\u015fteri numaras\u0131\n\nISLEM_ADEDI -ilgili tarih, t\u00fcr ve sekt\u00f6rde m\u00fc\u015fterinin yapt\u0131\u011f\u0131 i\u015flem adedi\n\nISLEM_TUTARI -m\u00fc\u015fterinin ilgili tarih, t\u00fcr ve sekt\u00f6rde yapt\u0131\u011f\u0131 i\u015flemlerin toplam tutar\u0131\n\nID sekt\u00f6r\u00fcn ID'si (submission dosyas\u0131ndaki sektor_id)","fe1bcdd3":"## AY","bf168ec1":"## YIL","1289517e":"<a id=\"4.5\"><\/a> <br>\n## Y\u0131l \u00c7eyrek Bilgilerinin Eklenmesi","876b68dd":"<a id=\"5\"><\/a> <br>\n# 5- Encoding","c7e224e8":"<a id=\"4.6\"><\/a> <br>\n## M\u00fc\u015fteri S\u0131n\u0131fland\u0131r\u0131lmas\u0131","3299de8c":"1. [K\u00fct\u00fcphanelerin Tan\u0131mlanmas\u0131](#1)\n1. [Veriyi Okuma](#2)\n1. [Veriyi Anlama (Data Understanding)](#3)\n1. [\u00d6znitelik \u00c7\u0131kar\u0131m\u0131 (Feature Engineering)](#4)\n  1. [\u0130\u015flem T\u00fcr\u00fc De\u011fi\u015fimi](#4.1)\n  1. [Ay ve Y\u0131l Verisi Eklenmesi](#4.2)\n  1. [Dolar Verisi Eklenmesi](#4.3)\n  1. [Sekt\u00f6r S\u0131n\u0131fland\u0131r\u0131lmas\u0131](#4.4)\n  1. [Y\u0131l \u00c7eyrek Bilgilerinin Eklenmesi](#4.5)\n  1. [M\u00fc\u015fteri S\u0131n\u0131fland\u0131r\u0131lmas\u0131](#4.6)\n  1. [M\u00fc\u015fterilerin Ortalama \u0130\u015flem Adedi ve \u0130\u015flem Tutar\u0131](#4.7)\n  1. [Gereksiz S\u00fctunlar\u0131n Silinmesi](#4.8)\n1. [Encoding](#5)\n1. [Train-Test Split](#6)\n1. [Model](#7)\n  1. [Baz Model](#7.1)\n  1. [1. Model](#7.2)","8911acfc":"<a id=\"4\"><\/a> <br>\n# 4- \u00d6znitelik \u00c7\u0131kar\u0131m\u0131 (Feature Engineering)","b48231da":"<a id=\"2\"><\/a> <br>\n# 2- Veriyi Okuma","6be1b3e1":"<a id=\"4.1\"><\/a> <br>\n## \u0130\u015flem T\u00fcr\u00fc De\u011fi\u015fimi","76b3150d":"<a id=\"3\"><\/a> <br>\n# 3- Veriyi Anlama","169f8534":"<a id=\"4.7\"><\/a> <br>\n## M\u00fc\u015fterilerin Ortalama \u0130\u015flem Adedi ve \u0130\u015flem Tutar\u0131","bf92b713":"<a id=\"1\"><\/a> <br>\n# 1- K\u00fct\u00fcphanelerin Tan\u0131mlanmas\u0131","4a6ffc15":"## \u00c7EYREK","598218ed":"<a id=\"7.1\"><\/a> <br>\n## Baz Model","44430a36":"## SEKTOR_SINIF","d023c4aa":"## Id","4ec9afea":"## MUSTERI_SINIF","4d88cbd8":"<a id=\"7\"><\/a> <br>\n# 6- Model","4334a101":"<a id=\"4.8\"><\/a> <br>\n## Gereksiz S\u00fctunlar\u0131n Silinmesi","b09ae378":"<a id=\"4.4\"><\/a> <br>\n## Sekt\u00f6r S\u0131n\u0131fland\u0131r\u0131lmas\u0131"}}