{"cell_type":{"e910ae0f":"code","cc9941d7":"code","d1039585":"code","204a2f8c":"code","8a3bea9e":"code","f650c39e":"code","a23502cd":"code","71a413a8":"code","9b841e06":"code","e6f2e802":"code","744e10a3":"code","c6aaafb7":"code","dc33a6be":"code","f4b3322d":"code","4b199a60":"code","6c0251f9":"code","f0d6ca78":"code","d795e3b8":"code","c12e7050":"code","f2db771e":"markdown","d57236ef":"markdown","e97a3ef1":"markdown","8d5c7a0e":"markdown","0181daeb":"markdown","fc986530":"markdown"},"source":{"e910ae0f":"!pip install pretrainedmodels","cc9941d7":"from PIL import Image\nimport shutil\n\nimport numpy as np\nimport matplotlib.pyplot as plot\nimport pandas as pd\n\nimport torch\nimport fastai\nfrom fastai import vision\n\nimport pretrainedmodels as pm","d1039585":"%matplotlib inline","204a2f8c":"def set_seed(seed):\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n\nset_seed(42)","8a3bea9e":"transform_kwargs = {\"do_flip\": True,\n                    \"flip_vert\": True,\n                    \"max_rotate\": 180,\n                    \"max_zoom\": 1.1,\n                    \"max_lighting\": 0.2,\n                    \"max_warp\": 0.2,\n                    \"p_affine\": 0.75,\n                    \"p_lighting\": 0.7}\n        \ntransforms = vision.get_transforms(**transform_kwargs)\n\ndata_bunch_kwargs = {\"path\": \"..\/input\/cassava-disease\/train\",\n                     \"train\": \"train\",\n                     \"valid_pct\": 0.1,\n                     \"size\": 448,\n                     \"bs\": 16,\n                     \"ds_tfms\": transforms,\n                     \"test\": \"..\/extraimages\/extraimages\"}\n\nimage_data_bunch = (vision.ImageDataBunch\n                          .from_folder(**data_bunch_kwargs)\n                          .normalize())","f650c39e":"shutil.copytree(\"..\/input\/cassava-disease-classification\/models\/\", \".\/models\")","a23502cd":"_base_arch = lambda arg: pm.se_resnext101_32x4d(num_classes=5, pretrained=None)\nlearner = vision.cnn_learner(image_data_bunch, base_arch=_base_arch, pretrained=False, metrics=vision.error_rate, model_dir=\"\/kaggle\/working\/models\/se-resnext101-32x4d\")\n_ = learner.load(\"best-model-stage-2\")","71a413a8":"predicted_probabilities, _ = learner.TTA(ds_type=fastai.basic_data.DatasetType.Test)","9b841e06":"predicted_class_probabilities, _predicted_classes = predicted_probabilities.max(dim=1)\nclass_labels = np.array(['cbb','cbsd','cgm','cmd','healthy'])\npredicted_class_labels = class_labels[_predicted_classes]\n","e6f2e802":"shutil.copytree(\"..\/input\/cassava-disease\/train\/train\/\", \".\/data\/train\")\nshutil.copytree(\"..\/input\/cassava-disease\/test\/test\/\", \".\/data\/test\")\n\nthreshold = 0.95  # only include pseudo-labeled images where model is sufficiently confident in its prediction\nfilenames = [item.name for item in learner.data.test_ds.items]\nfor predicted_class_label, predicted_class_probability, filename in zip(predicted_class_labels, predicted_class_probabilities, filenames):\n    if predicted_class_probability > threshold:\n        shutil.copy(f\"..\/input\/cassava-disease\/extraimages\/extraimages\/{filename}\", f\".\/data\/train\/{predicted_class_label}\/{filename}\")","744e10a3":"transform_kwargs = {\"do_flip\": True,\n                    \"flip_vert\": True,\n                    \"max_rotate\": 180,\n                    \"max_zoom\": 1.1,\n                    \"max_lighting\": 0.2,\n                    \"max_warp\": 0.2,\n                    \"p_affine\": 0.75,\n                    \"p_lighting\": 0.7}\n        \ntransforms = vision.get_transforms(**transform_kwargs)\n\ndata_bunch_kwargs = {\"path\": \".\/data\/train\",\n                     \"train\": \"train\",\n                     \"valid_pct\": 0.1,\n                     \"size\": 448,\n                     \"bs\": 16,\n                     \"ds_tfms\": transforms,\n                     \"test\": \"..\/test\"}\n\nimage_data_bunch = (vision.ImageDataBunch\n                          .from_folder(**data_bunch_kwargs)\n                          .normalize())","c6aaafb7":"_base_arch = lambda arg: pm.se_resnext101_32x4d(num_classes=5, pretrained=None)\nlearner = vision.cnn_learner(image_data_bunch, base_arch=_base_arch, pretrained=False, metrics=vision.error_rate, model_dir=\"\/kaggle\/working\/models\/se-resnext101-32x4d\")\n_ = learner.load(\"best-model-stage-2\")","dc33a6be":"learner.lr_find()","f4b3322d":"(learner.recorder\n        .plot())","4b199a60":"_save_model_kwargs = {\"every\": \"improvement\",\n                      \"monitor\": \"valid_loss\",\n                      \"name\": \"best-model-stage-3\"}\n_save_model = (fastai.callbacks\n                     .SaveModelCallback(learner, **_save_model_kwargs))\nlearner.fit_one_cycle(15, max_lr=slice(None, 1e-6, None), callbacks=[_save_model])","6c0251f9":"predicted_probabilities, _ = learner.TTA(ds_type=fastai.basic_data.DatasetType.Test)","f0d6ca78":"_, _predicted_classes = predicted_probabilities.max(dim=1)\n_predicted_class_labels = class_labels[_predicted_classes]\n\n_filenames = np.array([item.name for item in image_data_bunch.test_ds.items])\n\nsubmission = (pd.DataFrame\n                .from_dict({'Category': _predicted_class_labels,'Id': _filenames}))","d795e3b8":"submission.to_csv('submission-using-pseudo-labels.csv', header=True, index=False)","c12e7050":"shutil.rmtree(\".\/data\") # remove unnecessary output files!","f2db771e":"## Train the model on new training data set","d57236ef":"## Creating a new training data set\n\nOnce we have the pseudo-labels and predicted probabilities that these pseudo-labels are correct we need to decide which of the extra images we want to include in our new, larger training data set. Basic idea is to choose a decision threshold and then only include the extra images where our original model was highly confident in the predicted pseduo-label.","e97a3ef1":"## Make predictions using TTA","8d5c7a0e":"### Use our pretrained model to predict the labels for our extra images","0181daeb":"## Create a submission","fc986530":"## Creating Pseudo-Labels for the Extra Images"}}