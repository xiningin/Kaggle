{"cell_type":{"01c8e24e":"code","9dbd82e7":"code","b83a59b2":"code","ef8cdcde":"code","5a6bb476":"code","8b39c624":"code","4c899e63":"code","983841e6":"code","7e4cbe07":"code","7b876bc7":"code","401f4c59":"code","9cf9c6c7":"code","bb827d41":"code","e0c74d50":"code","c1403b50":"code","f09ceeb2":"code","ffbb193c":"code","02ab36a5":"code","1fe6ed51":"code","d8efb289":"code","97275434":"markdown","42bf144b":"markdown","4b97a476":"markdown","cab59d85":"markdown","3b308a4c":"markdown","fa3baae4":"markdown","d00230fd":"markdown","2143834b":"markdown","79210bd7":"markdown"},"source":{"01c8e24e":"import warnings\nwarnings.filterwarnings('ignore')\n\n#importing libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn import metrics","9dbd82e7":"# Reading the dataset\ndig_df = pd.read_csv(\"..\/input\/train.csv\")\ndig_df.head()","b83a59b2":"dig_df.info()","ef8cdcde":"dig_df.describe()","5a6bb476":"# Checking of any values are missing\ndig_df.isnull().sum().sort_values(ascending = False)","8b39c624":"# Counting the number of labels present in the dataset\ndig_df.label.astype('category').value_counts()","4c899e63":"100*(round(dig_df.label.astype('category').value_counts()\/len(dig_df.index), 4))","983841e6":"sns.countplot(x = 'label', palette=\"Set3\", data = dig_df)","7e4cbe07":"# Splitting the data into train and test set\nX = dig_df.iloc[:, 1:]\nY = dig_df.iloc[:, 0]\n\n# Rescaling the features\nfrom sklearn.preprocessing import scale\nX = scale(X) \n\n# train test split with train_size=10% and test size=90%\nx_train, x_test, y_train, y_test = train_test_split(X, Y, train_size=0.20, random_state=101)","7b876bc7":"#building model\nlinear_model = svm.SVC(kernel='linear')\n\n#fitting the model\nlinear_model.fit(x_train, y_train)","401f4c59":"# Prediction on y\ny_pred = linear_model.predict(x_test)","9cf9c6c7":"# Model evaluation (Using Accuracy score)\nprint(\"accuracy:\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), \"\\n\")","bb827d41":"# Confusion Matrix\nprint(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred))","e0c74d50":"# rbf kernel with other hyperparameters kept to default \nrbf_model = svm.SVC(kernel='rbf')\nrbf_model.fit(x_train, y_train)\n\n# Prediction\ny_pred = rbf_model.predict(x_test)\n\n# Evaluation\nprint(\"accuracy:\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), \"\\n\")","c1403b50":"# creating a KFold object with 5 splits \nfrom sklearn.model_selection import KFold\nfolds = KFold(n_splits = 5, shuffle = True, random_state = 101)\n\nfrom sklearn.model_selection import GridSearchCV\n\nparameters = {'C':[1, 10, 100], \n             'gamma': [1e-2, 1e-3, 1e-4]}\n\n# instantiate a model \nmodel = svm.SVC(kernel=\"rbf\")\n\n# create a classifier to perform grid search\nmodel_cv = GridSearchCV(model, param_grid=parameters, scoring='accuracy',cv= folds,verbose = 1, return_train_score=True)\n\n# fit\nmodel_cv.fit(x_train, y_train)","f09ceeb2":"# results\ncv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results","ffbb193c":"# converting C to numeric type for plotting on x-axis\ncv_results['param_C'] = cv_results['param_C'].astype('int')\n\n# # plotting\nplt.figure(figsize=(16,6))\n\n# subplot 1\/3\nplt.subplot(131)\ngamma_01 = cv_results[cv_results['param_gamma']==0.01]\n\nplt.plot(gamma_01[\"param_C\"], gamma_01[\"mean_test_score\"])\nplt.plot(gamma_01[\"param_C\"], gamma_01[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.01\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='lower right')\nplt.xscale('log')\n\n# subplot 2\/3\nplt.subplot(132)\ngamma_001 = cv_results[cv_results['param_gamma']==0.001]\n\nplt.plot(gamma_001[\"param_C\"], gamma_001[\"mean_test_score\"])\nplt.plot(gamma_001[\"param_C\"], gamma_001[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.001\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='lower right')\nplt.xscale('log')\n\n\n# subplot 3\/3\nplt.subplot(133)\ngamma_0001 = cv_results[cv_results['param_gamma']==0.0001]\n\nplt.plot(gamma_0001[\"param_C\"], gamma_0001[\"mean_test_score\"])\nplt.plot(gamma_0001[\"param_C\"], gamma_0001[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.0001\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='lower right')\nplt.xscale('log')\n\nplt.show()","02ab36a5":"# printing the optimal accuracy score and hyperparameters\nbest_score = model_cv.best_score_\nbest_hyperparams = model_cv.best_params_\n\nprint(\"The best test score is {0} corresponding to hyperparameters {1}\".format(best_score, best_hyperparams))","1fe6ed51":"# optimal hyperparameters\nbest_C = 10\nbest_gamma = 0.001\n\n# model\nmodel_f = svm.SVC(kernel='rbf', C=best_C, gamma=best_gamma)\n\n# fit\nmodel_f.fit(x_train, y_train)\n\n# predict\ny_pred= model_f.predict(x_test)","d8efb289":"# confusion matrix and accuracy\nprint(\"accuracy\", metrics.accuracy_score(y_true=y_test, y_pred= y_pred), \"\\n\")\nprint(metrics.confusion_matrix(y_true = y_test, y_pred = y_pred))\n","97275434":"# Pattern Recognition - SVM Assignement\n\nA classic problem in the field of pattern recognition is that of handwritten digit recognition. Suppose that you have images of handwritten digits ranging from 0-9 written by various people in boxes of a specific size - similar to the application forms in banks and universities.\n\nThe goal is to develop a model that can correctly identify the digit (between 0-9) written in an image. ","42bf144b":"### 3.2 Non-Linear SVM","4b97a476":"There are no missing values","cab59d85":"## 2. Data Preparation","3b308a4c":"## 3. Model Building\n\n\n### 3.1 Linear SVM","fa3baae4":"All the labels are almost all equally distributed.","d00230fd":"## 1. Data Understanding and Cleaning","2143834b":"The accuracy of non-linear kernel is higher than a linear one. \n\n### 3.3 Grid Search Cross-Validation","79210bd7":"### 4. Final Model"}}