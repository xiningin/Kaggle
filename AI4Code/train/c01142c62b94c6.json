{"cell_type":{"fc645bea":"code","80cf2f62":"code","959a4429":"code","fbdfc9a2":"code","1d6d5fdd":"code","b6a9cc0d":"code","bc62f906":"code","af143a06":"code","f04d196f":"code","7c2d754a":"code","98331fb0":"code","14bd8b50":"code","5bf9a7d2":"code","5cb54ee4":"code","d21ac3e6":"code","056a505e":"code","850f899f":"code","b9f9106b":"code","63027ac3":"code","2d99878b":"code","7f836d81":"code","cc90f785":"code","0cdd6a8d":"code","7b2983c4":"code","7d19e593":"code","770c6f15":"markdown","0d2eb67c":"markdown","7afd0ed4":"markdown","4b4ac917":"markdown","d6a93bca":"markdown"},"source":{"fc645bea":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","80cf2f62":"train0 = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/test.csv\")","959a4429":"n=len(train0)\nprint(n)\nN=list(range(n))\nrandom.seed(2021)\nrandom.shuffle(N)","fbdfc9a2":"train=train0.iloc[N[0:10000],:]","1d6d5fdd":"trainY0 = train['target']\ntrainX = train.drop(['target','id'],axis=1)\ntestX = test.drop('id',axis=1)","b6a9cc0d":"df_columns = list(trainX.columns)\nprint(df_columns)","bc62f906":"print(len(trainX))\nprint(len(testX))","af143a06":"train_df=pd.DataFrame(trainX)\ntest_df=pd.DataFrame(testX)","f04d196f":"train_df.columns=df_columns\ntest_df.columns=df_columns","7c2d754a":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","98331fb0":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","14bd8b50":"def to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","5bf9a7d2":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","5cb54ee4":"train_feat_df","d21ac3e6":"test_feat_df","056a505e":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","850f899f":"params =  {\n    'num_leaves': 10, \n    'objective': 'regression', \n    'max_depth': 3, \n    'learning_rate': 0.15878788525210086, \n    'lambda_l1': 2.2250723401622309e-07, \n    'lambda_l2': 3.155610811025729, \n    'bagging_freq': 8, \n    'bagging_fraction': 0.8396873791240804, \n    'feature_fraction': 0.9169635405737855\n}\n","b9f9106b":"y = trainY0\nprint(y.shape)","63027ac3":"ydf=pd.DataFrame(y)\nydf","2d99878b":"target=['target']\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Train Predicted '+target[i],fontsize=12)\n    ax.set_xlabel('Train Actual '+target[i],fontsize=12)\n    ax.scatter(y,oof)","7f836d81":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n    \n    print(order[0:5].tolist())\n    print(order[::-1][0:5].tolist())\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","cc90f785":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","0cdd6a8d":"orders_top=['f179', 'f69', 'f22', 'f58', 'f136']\norders_bottom=['f99', 'f219', 'f42', 'f29', 'f32']","7b2983c4":"# top2\nsns.jointplot(data=train, x='f179', y='f69', hue=\"target\",kind=\"kde\")","7d19e593":"# bottom2\nsns.jointplot(data=train, x='f99', y='f219', hue=\"target\",kind=\"kde\")","770c6f15":"# Data preparation","0d2eb67c":"# Visualize Importance","7afd0ed4":"# Model","4b4ac917":"# Target setting","d6a93bca":"* params values are derived from https:\/\/www.kaggle.com\/stpeteishii\/tps1021-prediction-lgbm"}}