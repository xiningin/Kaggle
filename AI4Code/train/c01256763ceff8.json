{"cell_type":{"23bbff81":"code","ad76e765":"code","1ef7d565":"code","3c28ab2f":"code","7ad28dc7":"code","b64d260e":"code","587351ac":"code","4cee1030":"code","d8bc63a9":"code","d53b0159":"code","54fd6e04":"code","c720d992":"code","7ad571c9":"code","c5cd0f9b":"code","b685927a":"code","2bce2387":"code","191d2e47":"code","2550f671":"code","5b2c85cb":"code","0b9cff4f":"code","a59ce7a7":"code","0106edaa":"code","0d52587b":"code","d5f6c92e":"code","e36e7e70":"code","6de60d7c":"code","56d597f8":"code","42ec7fed":"code","74eafbe1":"code","08069073":"code","3737399a":"code","236b74af":"code","ff27b59c":"code","9650cbfc":"code","76945b40":"code","5ca45ec8":"markdown","7d285299":"markdown","3c2fa9bf":"markdown","9226c2f6":"markdown","13ea3485":"markdown","b53adb3e":"markdown","ac80f167":"markdown","40ad29e2":"markdown","18f23614":"markdown","3df15594":"markdown","ebe8c6c1":"markdown","38ad0b2e":"markdown","7e93d17d":"markdown","e190a9ac":"markdown","5c8cf9d0":"markdown","1a8bc982":"markdown","65f8de20":"markdown","7d121441":"markdown","276d6cdb":"markdown","0169f0dc":"markdown","9d906fd4":"markdown","97743311":"markdown","213beb77":"markdown","ccc30fa9":"markdown"},"source":{"23bbff81":"from IPython.display import Image\nImage(\"..\/input\/amer_sign2.png\")","ad76e765":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1ef7d565":"train = pd.read_csv('..\/input\/sign_mnist_train.csv')\ntest = pd.read_csv('..\/input\/sign_mnist_test.csv')","3c28ab2f":"train.head()","7ad28dc7":"train.shape","b64d260e":"Image(\"..\/input\/american_sign_language.PNG\")","587351ac":"labels = train['label'].values","4cee1030":"unique_val = np.array(labels)\nnp.unique(unique_val)","d8bc63a9":"plt.figure(figsize = (18,8))\nsns.countplot(x =labels)","d53b0159":"train.drop('label', axis = 1, inplace = True)","54fd6e04":"images = train.values\nimages = np.array([np.reshape(i, (28, 28)) for i in images])\nimages = np.array([i.flatten() for i in images])","c720d992":"from sklearn.preprocessing import LabelBinarizer\nlabel_binrizer = LabelBinarizer()\nlabels = label_binrizer.fit_transform(labels)","7ad571c9":"labels","c5cd0f9b":"plt.imshow(images[0].reshape(28,28))","b685927a":"from sklearn.model_selection import train_test_split","2bce2387":"x_train, x_test, y_train, y_test = train_test_split(images, labels, test_size = 0.3, random_state = 101)","191d2e47":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout","2550f671":"batch_size = 128\nnum_classes = 24\nepochs = 50","5b2c85cb":"x_train = x_train \/ 255\nx_test = x_test \/ 255","0b9cff4f":"x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)","a59ce7a7":"x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)","0106edaa":"plt.imshow(x_train[0].reshape(28,28))","0d52587b":"model = Sequential()\nmodel.add(Conv2D(64, kernel_size=(3,3), activation = 'relu', input_shape=(28, 28 ,1) ))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(Conv2D(64, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(Conv2D(64, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dropout(0.20))\n\nmodel.add(Dense(num_classes, activation = 'softmax'))","d5f6c92e":"model.compile(loss = keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),\n              metrics=['accuracy'])","e36e7e70":"history = model.fit(x_train, y_train, validation_data = (x_test, y_test), epochs=epochs, batch_size=batch_size)","6de60d7c":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title(\"Accuracy\")\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.legend(['train','test'])\n\nplt.show()","56d597f8":"test_labels = test['label']","42ec7fed":"test.drop('label', axis = 1, inplace = True)","74eafbe1":"test_images = test.values\ntest_images = np.array([np.reshape(i, (28, 28)) for i in test_images])\ntest_images = np.array([i.flatten() for i in test_images])","08069073":"test_labels = label_binrizer.fit_transform(test_labels)","3737399a":"test_images = test_images.reshape(test_images.shape[0], 28, 28, 1)","236b74af":"test_images.shape","ff27b59c":"y_pred = model.predict(test_images)","9650cbfc":"from sklearn.metrics import accuracy_score","76945b40":"accuracy_score(test_labels, y_pred.round())","5ca45ec8":"Since our target variable are in categorical(nomial) so we are using label binarizer","7d285299":"# About the data","3c2fa9bf":"The data set is given in the form of labels and pixel value ranging from pixel 1 to pixel 784 which is 28 * 28 image.","9226c2f6":"Spliting the dataset into train(70%) and test(30%)","13ea3485":"As we can see we got a really great accuracy ","b53adb3e":"Load the dataset","ac80f167":"Let's see what does each sign means","40ad29e2":"# Data exploration","18f23614":"We can increate the accuracy by tuning the hyper parameters of the model like playing with different activation functions and using different loss functions","3df15594":"Predecting with test images","ebe8c6c1":"Visualizing the image after normalizing","38ad0b2e":"# CNN Model","7e93d17d":"# Sign Language","e190a9ac":"Let's validate with the test data","5c8cf9d0":"Each letter indicates a sign produced by our fingers. We will apply deep learning to these images to make sure our model can understand what sign indicated what letter","1a8bc982":"As you can see each one is almost equally distributed","65f8de20":"Normalizing the training and test data","7d121441":"As you can see, the number of epochs increase the accuracy also increases.","276d6cdb":"Lets see how the images look","0169f0dc":"For deep learning i am using keras library","9d906fd4":"Re shaping the images","97743311":"Creating the batch size to 128 and using 50 epochs","213beb77":"We are droping the label coloumn from the training set","ccc30fa9":"The original MNIST image dataset of handwritten digits is a popular benchmark for image-based machine learning methods but researchers have renewed efforts to update it and develop drop-in replacements that are more challenging for computer vision and original for real-world applications. As noted in one recent replacement called the Fashion-MNIST dataset, the Zalando researchers quoted the startling claim that \"Most pairs of MNIST digits (784 total pixels per sample) can be distinguished pretty well by just one pixel\". To stimulate the community to develop more drop-in replacements, the Sign Language MNIST is presented here and follows the same CSV format with labels and pixel values in single rows. The American Sign Language letter database of hand gestures represent a multi-class problem with 24 classes of letters (excluding J and Z which require motion)."}}