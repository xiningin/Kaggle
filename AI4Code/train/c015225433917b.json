{"cell_type":{"cd481e75":"code","ca997cde":"code","14fee4a3":"code","4e5d8688":"code","03ca35b1":"code","27b9c733":"code","eb3a5096":"code","f5750ac9":"code","e30a6f8d":"code","6af50293":"code","c0eac4ea":"code","2995a348":"code","818b1a1e":"code","4add0ec4":"code","11d2300c":"code","3fa0f46a":"code","c095fe72":"code","343a4cfe":"code","a651b9c9":"code","c2407d96":"code","a282d3f7":"code","1f62e3d2":"code","fcf44e14":"code","c90850b6":"code","33e10eb3":"code","8039d535":"code","1768c95e":"code","8956060b":"markdown","11273cbc":"markdown","c11c0320":"markdown","da8f12e0":"markdown","e65b9b6e":"markdown","afaf5fba":"markdown","8949e97a":"markdown","afebdca8":"markdown","befa861b":"markdown","7f7b867e":"markdown","4d51f70e":"markdown","524a9028":"markdown","1f5152fa":"markdown","75e683d5":"markdown","4787b637":"markdown","e7884a7d":"markdown"},"source":{"cd481e75":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ca997cde":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)","14fee4a3":"# Read in dataset\ndf = pd.read_csv('\/kaggle\/input\/toy-dataset\/toy_dataset.csv')\ndf.head()","4e5d8688":"df.info() # There is no NaN value","03ca35b1":"df.columns","27b9c733":"df['City'].value_counts()","eb3a5096":"city = df['City'].value_counts().index.to_list()\n\ndef assign_code(city):\n    if city == 'New York City':\n        return 'NY'\n    elif city in ['Los Angeles','Mountain View','San Diego']:\n        return 'CA'\n    elif city in ['Dallas','Texas']:\n        return 'TX'\n    elif city == 'Boston':\n        return 'MA'\n    else:\n        return 'Washington D.C.'\n\ndf['Location'] = df['City'].apply(lambda city: assign_code(city))\ndf.head()","f5750ac9":"byState_count = df['Location'].value_counts().reset_index().rename(columns={'Location':'Count','index':'Location'})\n\nfig = px.choropleth(data_frame = byState_count,\n                     locations = 'Location',\n                     color = 'Count',\n                     locationmode = 'USA-states',\n                     scope = 'usa',\n                     title = 'Where is the data from?',\n                     color_continuous_scale=\"tropic\"\n                    )\n\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\nfig.show()","e30a6f8d":"byGender_count = df['Gender'].value_counts().reset_index().rename(columns = {'Gender':'Count','index':'Gender'})\n\nfig = px.pie(data_frame = byGender_count,\n             values = 'Count',\n             names = 'Gender',\n             color_discrete_sequence = px.colors.qualitative.Safe,\n             title = 'Distribution of Gender in the Dataset')\n\nfig.update_traces(textposition ='outside',\n                  textinfo = 'label+percent',\n                  pull = [0.05] * 2)\n\nfig.update_layout(paper_bgcolor = 'cornsilk',\n                  legend_title = 'Gender',\n                  uniformtext_minsize=18,\n                  uniformtext_mode='hide',\n                  font = dict(\n                      family = \"Courier New, monospace\",\n                      size = 18,\n                      color = 'black'\n                  ))\n\nfig.show()","6af50293":"# What Cities are there?\ndf['City'].value_counts()","c0eac4ea":"gender_city = df.groupby(['Gender','City']).count().reset_index()\n\nfig = px.bar(data_frame = gender_city, \n             x = 'City', y = 'Number',\n             color = 'Gender', barmode = 'group',\n             text = 'Number', height = 550)\n\nfig.update_layout(title = 'Number of Male and Female in different Cities',\n                  yaxis_title = 'Count',\n                  legend_title = 'Gender',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n\nfig.update_xaxes(tickangle=45)\n\nfig.show()","2995a348":"# Gender and Illness\ngender_illness = df.groupby(['Gender','Illness']).count().reset_index()\n\nfig = px.bar(data_frame = gender_illness, \n             x = 'Gender', y = 'Number',\n             color = 'Illness', barmode = 'group',\n             text = 'Number', color_discrete_sequence = px.colors.qualitative.Safe)\n\nfig.update_layout(title = 'Number of Male and Female reported Illness',\n                  yaxis_title = 'Count',\n                  legend_title = 'Illness?',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n\n\nfig.show()","818b1a1e":"# City Illness\n\nillness_city = df.groupby(['Illness','City']).count().reset_index()\n\n\nfig = px.bar(data_frame = illness_city, \n             x = 'City', y = 'Number',\n             color = 'Illness', barmode = 'group',\n             text = 'Number',\n             color_discrete_sequence = px.colors.qualitative.Set2, height = 550)\n\nfig.update_layout(title = 'Illness in different Cities',\n                  yaxis_title = 'Count',\n                  legend_title = 'Illness?',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n\n\nfig.update_xaxes(tickangle=45)\n\nfig.show()","4add0ec4":"fig, ax = plt.subplots(dpi=120)\n\nfig = sns.countplot(data = df, x = 'Age', hue = 'City',\n              order = df['Age'].value_counts().iloc[:10].index,\n              palette = 'Accent')\nfig.set_title(\"Top Age Group in the Dataset\\nseperated by City\")\nplt.legend(loc = 'center right',bbox_to_anchor = (1.40,0.5), borderaxespad = 0)\nplt.show()","11d2300c":"# Age and Illness \nage_illness = df.groupby(['Age','Illness']).count().reset_index()\nage_illness.head()","3fa0f46a":"# Age Group and Illness\nfig = px.bar(data_frame = age_illness,\n             x = 'Age', y = 'Number',color = 'Illness')\n\nfig.update_layout(title = 'Age Group and Illness',\n                  yaxis_title = 'Count',\n                  legend_title = 'Illness?',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","c095fe72":"# Before Turning 30\nfig = px.bar(data_frame = age_illness[age_illness['Age'] <= 30],\n             x = 'Age', y = 'Number', color = 'Illness',\n             barmode = 'group', text = 'Number', height = 550)\n\nfig.update_layout(title = 'Age Group (before 30) and Illness',\n                  yaxis_title = 'Count',\n                  legend_title = 'Illness?',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n\nfig.show()","343a4cfe":"# Between 45 and 60\nfig = px.bar(data_frame = age_illness[(age_illness['Age'] <= 60) & (age_illness['Age'] >= 45)],\n             x = 'Age', y = 'Number', color = 'Illness',\n             barmode = 'group', text = 'Number', height = 550)\n\nfig.update_layout(title = 'Age Group (45-60) and Illness',\n                  yaxis_title = 'Count',\n                  legend_title = 'Illness?',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n\nfig.show()","a651b9c9":"# Mean Income\ndf['Income'].mean()","c2407d96":"# Average Income between Male and Female\n\nprint(\"Female average income:\",df[df['Gender'] == 'Female']['Income'].mean())\nprint(\"Male average income:\",df[df['Gender'] == 'Male']['Income'].mean())","a282d3f7":"# Creating new Datframe for average income by cities\navr_income_cities = df.groupby('City').mean().reset_index()\n\ndef define_status(income):\n    if income > avr_income_cities['Income'].quantile(0.75):\n        return 'green'\n    elif avr_income_cities['Income'].quantile(0.75) > income >= avr_income_cities['Income'].quantile(0.5):\n        return 'lightgreen'\n    elif avr_income_cities['Income'].quantile(0.5) > income >= avr_income_cities['Income'].quantile(0.25):\n        return 'orange'\n    else:\n        return 'red'\n\navr_income_cities['Color Coded'] = avr_income_cities['Income'].apply(lambda income: define_status(income))\navr_income_cities.head()","1f62e3d2":"# City with the average income\n\nfig = px.bar(data_frame = avr_income_cities,\n             x = 'City', y = 'Income', text = 'Income',\n             height = 550)\n\nfig.update_layout(title = 'Average Income in different Cities',\n                  yaxis_title = 'Income (US Dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside',\n                  marker_color = avr_income_cities['Color Coded'].to_list()\n                  )\n\nfig.update_xaxes(tickangle=45)\n\nfig.show()","fcf44e14":"# Male and Female Earning in Different City\n\nfig = px.bar(data_frame = df.groupby(['Gender','City']).mean().reset_index(),\n             x = 'Gender', y = 'Income', color = 'City',\n             barmode = 'group', text = 'Income', height = 550)\n\nfig.update_layout(title = 'Male and Female Average Income in different Cities',\n                  yaxis_title = 'Income (US Dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n\nfig.show()","c90850b6":"df2 = df.copy()\n\ndef status(income):\n    if income <= 80867.750000:\n        return 'Below 25'\n    elif 80867.750000 < income <= 93655.000000:\n        return 'Between 25 and 50'\n    elif 93655.000000 < income <= 104519.000000:\n        return 'Between 50 and 75'\n    else:\n        return 'Above 75'\n\ndf2['Income Status'] = df2['Income'].apply(lambda income: status(income))\ndf2.head()","33e10eb3":"fig = px.bar(data_frame = df2.groupby(['Gender','Income Status']).count().reset_index(),\n             x = 'Income Status', y = 'Number', color = 'Gender',\n             barmode = 'group', text = 'Income', height = 550,\n             color_discrete_sequence = px.colors.qualitative.Vivid,\n             category_orders = {\"Income Status\": ['Below 25','Between 25 and 50','Between 50 and 75','Above 75']})\n\nfig.update_layout(title = 'Male and Female Income in different Percentile',\n                  yaxis_title = 'Count',\n                  legend_title = 'Gender',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n\nfig.show()","8039d535":"fig = px.bar(data_frame = df2.groupby(['City','Income Status']).count().reset_index(),\n             x = 'Income Status', y = 'Number', color = 'City',\n             barmode = 'group', text = 'Income', height = 550,\n             color_discrete_sequence = px.colors.qualitative.Pastel,\n             category_orders = {\"Income Status\": ['Below 25','Between 25 and 50','Between 50 and 75','Above 75']})\n\nfig.update_layout(title = 'Different Cities Income in different Percentile',\n                  yaxis_title = 'Count',\n                  legend_title = 'City',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.update_traces(texttemplate='%{text:.2s}',textposition='outside')\n\nfig.show()","1768c95e":"fig = px.bar(data_frame = df2.groupby(['Illness','Income Status']).count().reset_index(),\n             x = 'Income Status', y = 'Number', color = 'Illness',\n             barmode = 'group', text = 'Income', height = 550,\n             color_discrete_sequence = px.colors.qualitative.Pastel,\n             category_orders = {\"Income Status\": ['Below 25','Between 25 and 50','Between 50 and 75','Above 75']})\n\nfig.update_layout(title = 'Illness and Income in different Percentile',\n                  yaxis_title = 'Count',\n                  legend_title = 'Illness?',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.update_traces(texttemplate='%{text:.2s}',textposition='outside')\n\nfig.show()","8956060b":"# Gender","11273cbc":"## Gender and Income in Percentile","c11c0320":"## Gender and Illness","da8f12e0":"# Thank you for checking out my work!","e65b9b6e":"## Illness and Income in different Percentile","afaf5fba":"## City and Average Income","8949e97a":"For the Bar Chart above, I couldn't figure out a way to put a legend to indicate that does the color means. So, I will put the description here:\n* Green: Above 75% of Average Income of all the cities\n* Lightgreen: Below 75% and Above 50% ...\n* Yellow: Below 50% and Above 25% ... \n* Red: Below 25% ... \n\nIf someone knows how to can improve this, please let me know in the comment section. Thank you in advance!","afebdca8":"## Gender and City","befa861b":"<h1 style = 'text-align:center;font-size:40px;'>Features related to Illness\ud83e\udd22\ud83e\udd22\ud83e\udd22 in the US\ud83c\uddfa\ud83c\uddf8<\/h1>","7f7b867e":"## City and Illness","4d51f70e":"# Income Percentile","524a9028":"## Gender and Average Income","1f5152fa":"## Cities and Income in Percentile","75e683d5":"# Age","4787b637":"# City","e7884a7d":"# Average Income"}}