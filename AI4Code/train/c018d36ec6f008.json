{"cell_type":{"650a4cb5":"code","a650097c":"code","50a7c29a":"code","62498cb8":"code","3f2e09ee":"code","d6c830c2":"code","f0aff5ac":"code","c7875bf5":"code","8e682a8e":"code","d0063f5f":"code","26abbc0f":"code","9fda8d5b":"code","a2587a0f":"code","1cc1c389":"code","cbb8de0e":"code","9c4cf3de":"code","4fa492e9":"code","c6a4f03a":"code","c6ad14ab":"code","5be12c8a":"code","f7d0c854":"code","ec6d1d0e":"code","e706f71d":"code","326965b7":"code","4b17d792":"code","801655ad":"code","0b4d0de2":"code","0a1b818a":"code","e67ad957":"code","7fb54336":"code","80ebc741":"code","ca971593":"code","5ab18ea7":"code","c078e1a3":"markdown","c13c0332":"markdown","812644cf":"markdown","13da3de0":"markdown","d1006361":"markdown","6098d7a5":"markdown","bb13a69b":"markdown","e26d3276":"markdown","a647c4c4":"markdown","6cdb9430":"markdown","9056af32":"markdown","8d01c792":"markdown","7c0be6cd":"markdown"},"source":{"650a4cb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(rc={\"font.style\":\"normal\",\n            \"axes.grid\":False,\n            'figure.figsize':(10.0,10.0)}) \n\nimport nltk\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud\n\n\nfrom sklearn.cluster import KMeans\n# Any results you write to the current directory are saved as output.","a650097c":"retail_df = pd.read_csv('\/kaggle\/input\/online-retail-customer-clustering\/OnlineRetail.csv',encoding='ISO_8859-1')\nretail_df.head()","50a7c29a":"retail_df.CustomerID = retail_df.CustomerID.astype(object)\nretail_df.InvoiceDate = pd.to_datetime(retail_df.InvoiceDate,format='%d-%m-%Y %H:%M')","62498cb8":"retail_df.shape","3f2e09ee":"retail_df.info()","d6c830c2":"# Droping rows that have missing values\n\nretail_df = retail_df.dropna()\n\n#Dropping negative values\nidx = retail_df[retail_df.Quantity < 0].index\nretail_df.drop(idx,axis=0,inplace=True)\n\nidx = retail_df[retail_df.UnitPrice < 0].index\nretail_df.drop(idx,axis=0,inplace=True)\n\n#Very few outliers, will just drop it for now!\nidx = retail_df[retail_df['Quantity'] > 5000].index\nretail_df.drop(idx,axis=0,inplace=True)","f0aff5ac":"retail_df.describe()","c7875bf5":"plt.figure(figsize=(12,5))\nsns.countplot(retail_df['Country'],palette= 'Set3')\nplt.xticks(rotation=40,ha='right')\nplt.title(\"Country Distribution\")\nplt.xlabel('Country')\nplt.ylabel('Count');","8e682a8e":"plt.figure(figsize=(8,5))\nsns.countplot(retail_df['InvoiceDate'].dt.year,palette= 'Set1')\nplt.xticks(rotation=40,ha='right')\nplt.title(\"Year Distribution\")\nplt.xlabel('Year')\nplt.ylabel('Count');","d0063f5f":"plt.figure(figsize=(8,5))\nsns.countplot(retail_df['InvoiceDate'].dt.month_name(),palette= 'Spectral')\nplt.xticks(rotation=40,ha='right')\nplt.title(\"Month Distribution\")\nplt.xlabel('Month')\nplt.ylabel('Count');","26abbc0f":"plt.figure(figsize=(8,5))\nsns.countplot(retail_df['InvoiceDate'].dt.day_name(),palette= 'Set1')\nplt.xticks(rotation=40,ha='right')\nplt.title(\"Week Distribution\")\nplt.xlabel('Week')\nplt.ylabel('Count');","9fda8d5b":"\n #seaborn.set(context='notebook', style='darkgrid', palette='deep', font='sans-serif', font_scale=1, color_codes=True, rc=None)\n    \ndef wordcloud(text,my_mask=None):\n    wordcloud = WordCloud(width=1000,height=1000,max_words=1000,collocations=False,\n    min_font_size=10,contour_width=2, mask=my_mask,background_color='white').generate(text)\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()\n\ndef tokenize(text):    \n    stop_words = set(stopwords.words('english'))\n    token =word_tokenize(text)\n    \n    word_token = []\n    for w in token:\n        if w not in stop_words and w.isalpha() == True :\n            word_token.append(str(w))\n    return(str(word_token))","a2587a0f":"text = tokenize(str(retail_df['Description']).lower())\n\nwordcloud(text)","1cc1c389":"df1 = pd.DataFrame()\ndf2 = pd.DataFrame()\ndf3 = pd.DataFrame()","cbb8de0e":"retail_df['Transaction_Amount'] = retail_df['Quantity'] * retail_df['UnitPrice']\ndf1['Transaction_Amount'] = retail_df.groupby('CustomerID')['Transaction_Amount'].sum()","9c4cf3de":"df2= retail_df.groupby('CustomerID')['InvoiceNo'].count()\ndf2 = df2.reset_index()\ndf2.columns = ['CustomerID','Total_Transaction']\ndf2.head()","4fa492e9":"df = pd.merge(df1,df2,on='CustomerID',how='inner')","c6a4f03a":"latest_transaction = retail_df['InvoiceDate'].max()\n\nretail_df['Latest_Transaction'] = latest_transaction - retail_df['InvoiceDate']\n\ndf3 = retail_df.groupby('CustomerID')['Latest_Transaction'].min()\ndf3 = df3.reset_index()\n\ndf3['Latest_Transaction'] = df3['Latest_Transaction'].dt.days","c6ad14ab":"df = pd.merge(df,df3,on='CustomerID',how='inner')\ndf.columns = ['CustomerID','Total_Amount','Total_Transaction','Latest_Transaction']\ndf.head()","5be12c8a":"plt.figure(figsize=(10,5))\nsns.boxplot(data = df[['Total_Amount','Total_Transaction','Latest_Transaction']],orient=\"v\", palette=\"Set2\" ,whis=1.5,saturation=1, width=0.7)","f7d0c854":"df.describe()","ec6d1d0e":"Q1 = df.Total_Amount.quantile(0.05)\nQ3 = df.Total_Amount.quantile(0.95)\n\nIQR = Q3 - Q1\ndf = df[ (df['Total_Amount']  >= Q1 - 1.5 * IQR) & (df['Total_Amount'] <= Q3 + 1.5 * IQR)]\n\nQ1 = df.Total_Transaction.quantile(0.05)\nQ3 = df.Total_Transaction.quantile(0.95)\n\nIQR = Q3 - Q1\ndf = df[ (df['Total_Transaction']  >= Q1 - 1.5 * IQR) & (df['Total_Transaction'] <= Q3 + 1.5 * IQR)]\n\nQ1 = df.Latest_Transaction.quantile(0.05)\nQ3 = df.Latest_Transaction.quantile(0.95)\n\nIQR = Q3 - Q1\ndf = df[ (df['Latest_Transaction']  >= Q1 - 1.5 * IQR) & (df['Latest_Transaction'] <= Q3 + 1.5 * IQR)]\n\ndf","e706f71d":"plt.figure(figsize=(10,5))\nsns.boxplot(data = df[['Total_Amount','Total_Transaction','Latest_Transaction']],orient=\"v\", palette=\"Set2\" ,whis=1.5,saturation=1, width=0.7)","326965b7":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nscaled = scaler.fit_transform(df[['Total_Amount','Total_Transaction','Latest_Transaction']])\n\ndf_scaled = pd.DataFrame(scaled,columns=['Total_Amount','Total_Transaction','Latest_Transaction'])\n\ndf_scaled.head()","4b17d792":"#Lets fit multiple kmeans\nSSE = []\n\nfor cluster in range(2,8):\n    kmeans = KMeans(n_clusters=cluster,random_state=42)\n\n    kmeans.fit(df_scaled)\n    \n    centroids = kmeans.cluster_centers_\n    pred_clusters = kmeans.predict(df_scaled)\n    \n    SSE.append(kmeans.inertia_)\n    \nframe = pd.DataFrame({'Cluster':range(2,8) , 'SSE':SSE})\n\nframe","801655ad":"plt.figure(figsize=(5,5))\nplt.plot(frame['Cluster'],frame['SSE'],marker='o')\nplt.title('Custers Vs SSE')\nplt.xlabel('No of Clusters')\nplt.ylabel('Intertia')\nplt.show()","0b4d0de2":"kmeans = KMeans(n_clusters=3,random_state=42)\nkmeans.fit(df_scaled)\npred = kmeans.predict(df_scaled)","0a1b818a":"#frame = pd.DataFrame(df_scaled)\ndf['Cluster'] = kmeans.labels_\ndf['Cluster'].value_counts()","e67ad957":"df.head()","7fb54336":"plt.figure(figsize=(10,5))\nsns.boxplot(x = df['Cluster'] ,y = df['Total_Amount'],orient=\"v\", palette=\"Set2\" ,whis=1.5,saturation=1, width=0.7)\nplt.title(\"Clusters Vs Total_Amount\")\nplt.xlabel(\"Clusters\")\nplt.ylabel(\"Total_Amount\")\nplt.legend();","80ebc741":"plt.figure(figsize=(10,5))\nsns.boxplot(x = df['Cluster'] ,y = df['Total_Transaction'],orient=\"v\", palette=\"Set2\" ,whis=1.5,saturation=1, width=0.7)\nplt.title(\"Clusters Vs Total_Transaction\")\nplt.xlabel(\"Clusters\")\nplt.ylabel(\"Total_Transaction\")\nplt.legend();","ca971593":"plt.figure(figsize=(10,5))\nsns.boxplot(x = df['Cluster'] ,y = df['Latest_Transaction'],orient=\"v\", palette=\"Set2\" ,whis=1.5,saturation=1, width=0.7)\nplt.title(\"Clusters Vs Latest_Transaction\")\nplt.xlabel(\"Clusters\")\nplt.ylabel(\"Latest_Transaction\")\nplt.legend();","5ab18ea7":"plt.scatter(df['Total_Amount'],df['Total_Transaction'],df['Latest_Transaction'],\n                     c=kmeans.labels_, cmap='rainbow');","c078e1a3":"#Referred from Analytical Vidya\n\n    Step 1: Choose the number of clusters k\n    Step 2: Select k random points from the data as centroids\n    Step 3: Assign all the points to the closest cluster centroid\n    Step 4: Recompute the centroids of newly formed clusters\n    Step 5: Repeat steps 3 and 4\n    \n    Stopping Criteria :\n    Centroids of newly formed clusters do not change\n    Points remain in the same cluster\n    Maximum number of iterations are reached","c13c0332":"Cluster 1 customers spend more money followed by Cluster 2 customers and lastly Cluster 0","812644cf":"**KMeans**","13da3de0":"#Large number of the customers are from UK","d1006361":"Total_Amount       = Total amount spent by the customer\nTotal_Transaction  = Total Transactions made by the customer\nLatest_Transaction = how recently did the customer make the last transaction (in days)","6098d7a5":"So we can conclude that Cluster 1 customers have made more transaction recently and have spent more","bb13a69b":"Thursdays have shown more transactions and Fridays the lowest. No transactions on Saturdays !!","e26d3276":"Data Visualization","a647c4c4":"More transactions in 2011","6cdb9430":"Year ends show more transaction with November being the highest","9056af32":"Cluster 1 customer also buy more frequently followed by Cluster 2 and lastly Cluster 0","8d01c792":"Cluster 1 customer have made recent transactions, followed by Cluster 2 and lastly Cluster 0","7c0be6cd":"No of clusters can be anything betwen 3 and 10 as optimum cluster value\nLet's choose 3!"}}