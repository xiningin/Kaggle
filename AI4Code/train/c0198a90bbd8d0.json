{"cell_type":{"ada26d0a":"code","ec85e17c":"code","04f82896":"code","1429a894":"code","6af054df":"code","64420c7f":"code","d83b5484":"code","ca5a655d":"code","0e51a746":"code","2c43c8b8":"code","f7a348f4":"code","20067ca5":"code","6e1c6587":"code","b6b02a66":"code","bdfd453f":"code","616638ff":"code","d0139d34":"code","aa919b94":"markdown","a9423954":"markdown","9314436e":"markdown","d789525a":"markdown","a77f3496":"markdown","4b319f9d":"markdown","bef35b5d":"markdown","d29a5480":"markdown","5e804470":"markdown"},"source":{"ada26d0a":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier","ec85e17c":"data = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","04f82896":"data.head()","1429a894":"#Get Target data \ny = data['target']\n\n#Load X Variables into a Pandas Dataframe with columns \nX = data.drop(['target'], axis = 1)","6af054df":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=101)","64420c7f":"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 10, stop = 80, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [2,4]\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]","d83b5484":"# Create the param grid\nparam_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(param_grid)","ca5a655d":"rf_Model = RandomForestClassifier()","0e51a746":"from sklearn.model_selection import GridSearchCV\nrf_Grid = GridSearchCV(estimator = rf_Model, param_grid = param_grid, cv = 10, verbose=2, n_jobs = 4)","2c43c8b8":"rf_Grid.fit(X_train, y_train)","f7a348f4":"rf_Grid.best_params_","20067ca5":"from sklearn.model_selection import RandomizedSearchCV\nrf_RandomGrid = RandomizedSearchCV(estimator = rf_Model, param_distributions = param_grid, cv = 10, verbose=2, n_jobs = 4)","6e1c6587":"rf_RandomGrid.fit(X_train, y_train)","b6b02a66":"rf_Grid.best_params_","bdfd453f":"rf_RandomGrid.best_params_","616638ff":"print (f'Train Accuracy - : {rf_Grid.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {rf_Grid.score(X_test,y_test):.3f}')","d0139d34":"print (f'Train Accuracy - : {rf_RandomGrid.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {rf_RandomGrid.score(X_test,y_test):.3f}')","aa919b94":"## With RandomizedSearchCV","a9423954":"# END","9314436e":"# Build Random Forest Model with hyperparameters","d789525a":"# Divide Data into Train and test","a77f3496":"# Check Data for any missing values","4b319f9d":"# Check Accuracy","bef35b5d":"# Load Libraries","d29a5480":"## With GridSearchCV","5e804470":"# Load Dataset "}}