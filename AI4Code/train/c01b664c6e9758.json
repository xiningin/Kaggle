{"cell_type":{"f565dc38":"code","98e1fb58":"code","b442e94b":"code","d069172d":"code","f0cb309b":"code","b496f04a":"code","cbac4b02":"code","a74ed837":"code","539dea9c":"code","95ae3ec8":"code","a5133bc9":"code","8b7417d9":"code","7ea25232":"markdown","2bf515ed":"markdown","cbfec09e":"markdown","398f593d":"markdown","b25454e5":"markdown","69f02bd5":"markdown"},"source":{"f565dc38":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import Counter\nfrom itertools import chain","98e1fb58":"netflix = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles_nov_2019.csv\")\nnetflix.head()\nmovies = netflix.loc[netflix[\"type\"]==\"Movie\"]\nshows = netflix.loc[netflix[\"type\"]==\"TV Show\"]\nmovies.info()\nshows.info()","b442e94b":"n=10\nimport matplotlib.pyplot as plt \ntop_directors = movies.director.str.split(',', expand = True).stack().value_counts()[:n]\ny_pos = np.arange(len(top_directors.index))\nplt.bar(top_directors.index, top_directors.array, color='green')\nplt.xticks(y_pos, top_directors.index,rotation = \"vertical\")\nplt.yticks(np.arange(19)[::2])\nplt.title(\"Top 10 Movie Directors\")\nplt.ylabel(\"Number of Titles\")\nplt.show()","d069172d":"top_directors =shows.director.str.split(',', expand = True).stack().value_counts()[:n]\nplt.bar(top_directors.index, top_directors.array, color='green')\nplt.xticks(y_pos, top_directors.index,rotation = \"vertical\")\nplt.yticks(np.arange(5)[::2])\nplt.title(\"Top 10 TV Show Directors\")\nplt.ylabel(\"Number of Titles\")\nplt.show()","f0cb309b":"top_actors = movies.cast.str.split(',', expand = True).stack().value_counts()[:n]\nplt.bar(top_actors.index, top_actors.array, color='green')\nplt.xticks(y_pos, top_actors.index,rotation = \"vertical\")\nplt.yticks(np.arange(28)[::2])\nplt.title(\"Top 10 Movies actors\")\nplt.ylabel(\"Number of Titles\")\nplt.show()","b496f04a":"top_actors = shows.cast.str.split(',', expand = True).stack().value_counts()[:n]\nplt.bar(top_actors.index, top_actors.array, color='green')\nplt.xticks(y_pos, top_actors.index,rotation = \"vertical\")\nplt.yticks(np.arange(18)[::2])\nplt.title(\"Top 10 TV actors\")\nplt.ylabel(\"Number of Titles\")\nplt.show()","cbac4b02":"#generate the list of actors\namerican_movies = netflix[(netflix[\"country\"].str.contains(\"United States\"))& (netflix[\"type\"]==\"Movie\")]\nsplit_cast = american_movies.cast.str.split(',', expand = True)\nactors = []\nfor i in range(len(split_cast.columns)):\n    actors.extend(split_cast[i].unique())\n\nactors1 = list(set(actors)) #remove duplicates\nactors1.pop(0); #remove none\nactors1.remove(None) #remove None\nactors =[]\nfor i in actors1: #remove spaces from beginning and end of name\n    j = i.strip()\n    actors.append(j)","a74ed837":"#make a list of actors that have been in a movie with another actor\nconnections = []\nmovies_dict ={}  #to store what movies they were in will be added as attributes to a network\nfor i in range(len(actors)):\n    con = []\n    appears = np.where(american_movies['cast'].str.contains(actors[i])==1) #find where they appear\n    reindex_movies = american_movies['cast'].reset_index(drop=True) #reindex the movies to match appears\n    reindex_titles = american_movies['title'].reset_index(drop = True) #reindex movie titles\n    movies_dict[actors[i]] = reindex_titles[appears[0]]\n    for ii in range(len(appears[0])): #make a list of connections for each person\n        list_acts = reindex_movies[appears[0][ii]]\n        con.extend(list_acts.split(\",\"))\n    cons = []\n    for ii in con: #remove spaces on names\n        j = ii.strip()\n        cons.append(j)\n    cons = list(set(cons)) #remove duplicates\n    cons.remove(actors[i]) #remove the queried actor from the list\n    connections.append(cons)","539dea9c":"#make a web with the actors that have appears in other movies\nimport networkx as nx\nfrom operator import itemgetter\nimport community\n\nG = nx.Graph()\nG.add_nodes_from(actors) # Add nodes to the Graph                             \nedges = []\nfor i in range(len(actors)):\n    for ii in range(len(connections[i])):\n        edges.append((actors[i],connections[i][ii]))\nG.add_edges_from(edges) #add edges to the graph\nnx.set_node_attributes(G, movies_dict, 'Movies')","95ae3ec8":"#see if two actors are connected\nj = 1500\nk = 840\nif nx.has_path(G, actors[j],actors[k])==True:\n    print(actors[j] + \" and \" + actors[k] + \" are connected. It takes \" +\n          str(nx.shortest_path_length(G,source=actors[j],target=actors[k])) + \" movies to move between them.\")\n    path = nx.shortest_path(G, source= actors[j], target = actors[k])\n    for i in range(len(path)-1):\n        movies1 = G.nodes[path[i]][\"Movies\"]\n        movies2 = G.nodes[path[i+1]][\"Movies\"]\n        if i < len(path)-2:\n            print(path[i] + ' was in ' + str(set(movies1).intersection(movies2)) + ' with '+ path[i+1])\n        else:\n            print(path[i] + ' was in ' + str(set(movies1).intersection(movies2)) + ' with '+ path[i+1] + '.')\n            \nelse:\n    print(actors[j] + \" and \" + actors[k] + \" are not connected.\")","a5133bc9":"#if you want to specify the actors \nj = \"Daniel Craig\"\nk = \"Brent Werzner\"\nif nx.has_path(G, j , k)==True:\n    print(j + \" and \" + k + \" are connected. It takes \" +\n          str(nx.shortest_path_length(G,source=j,target=k)) + \" movies to move between them.\")\n    path = nx.shortest_path(G, source= j, target = k)\n    for i in range(len(path)-1):\n        movies1 = G.nodes[path[i]][\"Movies\"]\n        movies2 = G.nodes[path[i+1]][\"Movies\"]\n        if i < len(path)-2:\n            print(path[i] + ' was in ' + str(set(movies1).intersection(movies2)) + ' with '+ path[i+1])\n        else:\n            print(path[i] + ' was in ' + str(set(movies1).intersection(movies2)) + ' with '+ path[i+1] + '.')\n            \nelse:\n    print(j + \" and \" + k + \" are not connected.\")","8b7417d9":"print(\"The following actors \" + str([n for n in nx.isolates(G)]) + \" have not been in a movie with anyone else.\")","7ea25232":"Here you can see if two actors are connected, both from just using the list of actors and from actually specifying them. ","2bf515ed":"**3. Connections between American movie actors**\n\nThis is the main thing that I was interested in playing around with. Using networkx I made a network connecting actors in American movies. The nodes have attributes of what Movies actors were in so you can see the shortest path from one actor to another. Since the cast data lists all of the actors together,first I needed to generate a list of all actors that appear.","cbfec09e":"**1. Preparing Data**\n\nThe dataset consists of information about the content on Netflix in November 2019. I separated out Movie and TV shows to do an analysis of each separately. I only look at the cast and directors of movies here.  ","398f593d":"Next is associating each actor with all of the actors they have been in a film with. I also stored each actor's movies in a dictionary, so you can see what movies you need to go through to get from one actor to another. ","b25454e5":"These folks are isolated in what they've been in. A lot of these folks are comedians or aren't actors but instead have been in documentaries. ","69f02bd5":"**2. Top Performers**\n\nFirst looking at some of the top directors and actors for both Movies and Shows on Netflix."}}