{"cell_type":{"2ebfba31":"code","e5057019":"code","b83d834b":"code","ae44f150":"code","b8e3f366":"code","2242ee53":"code","48409216":"code","88759832":"code","6fcf4493":"markdown","ef5d5f7e":"markdown","ebd779dd":"markdown","967da872":"markdown","ccfc314f":"markdown","02dcf8ee":"markdown","b2bf5e98":"markdown","d056b652":"markdown"},"source":{"2ebfba31":"#write a programme in python to output the correct answer for any 2 cartesian coordinates, test it with evidence and writing in and a conclusion to explain what is happening\n#bearings between 0 and 360 degrees\n#2 coordinates with direction of travel-whole circle bearing from point 1 to point 2-bearing is angle between north line and line from point 1 to point 2clockwise\n#bearing=inverse tan of gradient-cxhange in x over change in y-     math.atan(dx\/dy)\n#atan does not do whole circle bearings-gives range of -90 to 90-needs to be converted to whole circle bearings-do this with if elif statement checking signs etc\n#less than or greater than 0 dx>0 or dx<0\n# if dx is positive and dy is negative or if both are negative add 180, if dx is negative and dy is positive add 360\n#if dy is 0 then it could be a bearing of 90 or 270\n#must find if dy is 0 first before finding dx by dy\n#math.degrees-turns radians into degrees","e5057019":"import math","b83d834b":"def change_x(x1, x2):\n    dx = x2 - x1\n    res = dx\n    return res\ndef change_y(y1, y2):\n    dy = y2 - y1\n    res = dy\n    return dy\nprint(change_x(3, 1))\nprint(change_y(5, 7))","ae44f150":"def gradient(dx, dy):\n    grad = dx \/ dy\n    return grad\nprint(gradient(-2, 2))\nprint(gradient(6, 3))\nprint(gradient(3, 6))","b8e3f366":"def gradient(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    grad = dx \/ dy\n    return grad\nprint(gradient(1, 2, 3, 4))\nprint(gradient(3, 2, 1, 4))\nprint(gradient(1, 4, 3, 2))\nprint(gradient(1, 3, 2, 5))","2242ee53":"def bearing(grad):\n    bearing = math.atan(grad)\n    return bearing\nbearing(1)\n  ","48409216":"import math\ndef bearing(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    if dy == 0 and x2 > x1:\n        bearing = 90 \n    elif dy == 0 and x2 < x1:\n        bearing = 270\n    elif dx == 0 and y2 > y1:\n        bearing = 0\n    elif dx == 0 and y2 < y1:\n        bearing = 180\n    elif dx == 0 and dy == 0:\n        bearing = \"same point\"\n    else:\n        grad = dx \/ dy\n        bearing_rad= math.atan(grad)\n        bearing = math.degrees(bearing_rad)\n    if dx > 0 and dy < 0 or dx < 0 and dy < 0:\n        bearing = bearing + 180\n    elif dx < 0 and dy > 0:\n        bearing = bearing + 360\n    else:\n        bearing = bearing \n    return bearing\nbearing(3, 2, 3, 4)","88759832":"print(bearing (3, 4, 1, 4))\nprint(bearing(1, 4 , 3, 4))\nprint(bearing(1, 2, 1, 3))\nprint(bearing(1, 3, 1, 2))\nprint(bearing(1, 5, 5, 1))\nprint(bearing(5, 1, 1, 5))\nprint(bearing(3, 2, 4, 3))\nprint(bearing(4, 3, 3, 2))\nprint(bearing(1, 3, 1, 3))","6fcf4493":"This first piece of code is to find what the change in x and the change in y between each of the points is and check it works, with the expected answers if the code is correct using the numbers below being a -2 change in x and a 2 change in y.","ef5d5f7e":"The next code is the testing, one set of points for each of the anomalies when dx and\/or dy equal 0, and then one set of points for each of the four quadrants, with the expected results being 270,90,0,180,135,315,45,225 and the same point.","ebd779dd":"This code is will produce the correct whole circle bearing when given any 2 cartesian coordinates, giving a bearing between 0 and 360 degrees from North, which is used in surveying to get the direction for a line, such as when surveying buildings, to find where a wall goes, or when using GPS and finding the bearings to get to another point from an original point.  Firstly, import.math is used to allow the calculations to occur. ","967da872":"Once the code to work out the change in x and the change in y is correct, the next step is to write the code for the gradient of the line between the two points and then check to make sure it is giving the right result before working out the inverse tan of it to find the bearing in radians, with the numbers below giving a gradient of -1, 2 and a half.","ccfc314f":"The next code combines the two codes above into one, to work out the change in x and the change in y, and then the gradient, in one go.  Testing it gave the correct gradient of 1, -1, -1 and a half.","02dcf8ee":"Using the code above, the code below combines it together and turns the answer into degrees and a bearing between 0 and 360 degrees.  Firstly importing maths, then by working out the difference between the x coordinates and the y coordinates. \n\nThen some new code for when dx or dy is 0 allows the correct bearing to be found, as when one equals 0 the gradient and then the bearing cannot be found using calculations as 0 cannot be divided by, and so the code would come up with an error.  To solve this, it is known that the bearing will be 270, if dy is 0 and the second x value is bigger than the first, or 90 if the first is bigger than the second value, and so this code says that.  The same is then done for when dx is 0, as the bearing is 0 if the second y value is the larger, or 180 degrees if the first y bearing is bigger.  \n\nThis section also defines when both dx and dy are 0, as it is then the same point.  The code then goes on with working out the gradient as it did above, then the bearing in radians again as above.  This is then converted into degrees, and then certain amounts may be added, depending on what the change in x and y are, to turn it into whole circle bearings.","b2bf5e98":"The code below then takes the gradient and uses math.atan to find the bearing in radians between -90 and 90, with the test giving the correct answer of 0.785, although this is not the form that the bearing needs to be in, and so the final code will have change that.","d056b652":"These are all the correct whole circle bearings for these points, and so the code is correct for working out whole circle bearings."}}