{"cell_type":{"5df5e285":"code","2f9a3bfa":"code","8ef9112a":"code","0eb1be87":"code","ea7d63e8":"code","02ca618a":"code","3f835642":"code","035dfb3a":"code","5bd7d3c2":"code","115b79ed":"code","4d899b6f":"code","3897c8cc":"code","109f7de5":"code","0c0137d5":"code","90dc6473":"code","2e7b7277":"code","0a39d2c1":"markdown","b7deaaf4":"markdown","e49ead9e":"markdown","80f99a3c":"markdown","a1f6fc8e":"markdown","0ec37fbb":"markdown","c0e86d25":"markdown","8230157b":"markdown","77ada0b9":"markdown","82a889be":"markdown","b6e31049":"markdown","4f13a51e":"markdown","a1b0619f":"markdown","8367c6c5":"markdown","aca66325":"markdown","bc698171":"markdown"},"source":{"5df5e285":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport cv2 as cv\nfrom re import match\nfrom itertools import product, count, chain\nfrom keras.utils import to_categorical\n\n%matplotlib inline","2f9a3bfa":"images = os.listdir('..\/input\/samples\/samples')\nimages[0]","8ef9112a":"images = list(filter(lambda image: match('^[a-z0-9]+\\..+$', image), images))","0eb1be87":"len(images)","ea7d63e8":"texts = [match('^([a-z0-9]+)\\..+$', image).group(1) for image in images]","02ca618a":"all([len(text) == 5 for text in texts])","3f835642":"alphabet = list(frozenset(chain.from_iterable(texts)))\nalphabet.sort()\n''.join(alphabet)","035dfb3a":"ids = dict([(ch, alphabet.index(ch)) for ch in alphabet])\nids['b']","5bd7d3c2":"n, m = len(texts), 5\ny_labels = np.zeros([n, m], dtype=np.uint8)\nfor i, j in product(range(0, n), range(0, m)):\n    y_labels[i, j] = ids[texts[i][j]]\ny_labels[0]","115b79ed":"y = np.zeros([n, m, len(alphabet)], dtype=np.uint8)\nfor i, j in product(range(0, n), range(0, m)):\n    y[i, j, :] = to_categorical(y_labels[i, j], len(alphabet))","4d899b6f":"y[0, 0, :]","3897c8cc":"y.shape","109f7de5":"np.all((y_labels == y.argmax(axis=2)).flatten())","0c0137d5":"X = np.zeros((n,) + (50, 200, 1), dtype=np.float32)\nfor i, filename in zip(range(0, n), images):\n    img = cv.cvtColor(cv.imread('..\/input\/samples\/samples\/' + filename), cv.COLOR_BGR2GRAY)\n    assert img.shape == (50, 200)\n    X[i, :, :, 0] = img.astype(np.float32) \/ 255","90dc6473":"plt.imshow(X[10, :, :, 0], cmap='gray'), plt.xticks([]), plt.yticks([]);","2e7b7277":"np.savez_compressed('preprocessed-data.npz', X=X, y=y, y_labels=y_labels, alphabet=alphabet)","0a39d2c1":"## Get captcha images","b7deaaf4":"Assign a unique integer id label for each character in the alphabet","e49ead9e":"We are going to store all the images (grayscaled) in a 4D matrix of size: num images x image height x image width x 1 with float32 dtype with values in the range [0, 1]","80f99a3c":"Now we turn y_labels to a 3D matrix ('y') of size num images x text size x alphabet size. <br\/>\n$y_i^j$ (y[i, j, :]) is a sparse vector filled by zeros except the element at kth position where k is the integer label of the jth character on the ith captcha image <br\/>\n\n$y_i^j =\n\\begin{bmatrix}\nyl_i^{j,0} & yl_i^{j, 1} & yl_i^{j, 2} & ... & yl_i^{j, s}\n\\end{bmatrix} =\n\\begin{bmatrix}\n0 & 0 & ... & 1 & ... & 0 & 0\n\\end{bmatrix}$\n\n$s$ is the alphabet size","a1f6fc8e":"## Get captcha texts","0ec37fbb":"\n\nExtract the captcha texts from the file names\n","c0e86d25":"\n\nSelect image files\n","8230157b":"Now we are going to to create a 2D array ('y_labels') of size num images (n) x captcha text size (m)\n\n\\begin{bmatrix}\nyl_0^0 & yl_0^1 & yl_0^2 & ... & yl_0^m \\\\\nyl_1^0 & yl_1^1 & yl_1^2 & ... & yl_1^m \\\\\n& & ... & \\\\\nyl_n^0 & yl_n^1 & yl_n^2 & ... & yl_n^m\n\\end{bmatrix}\n\nWhere the element $yl_i^j$ its the integer label for the jth character on the ith captcha image","77ada0b9":"Save the variables we defined here to use later in other kernels","82a889be":"Get all unique characters that appears once in the captchas","b6e31049":"Make sure all captchas have a fixed size of 5 tokens","4f13a51e":"In this notebook i will show how to load, process and organize the captcha dataset images & their labels <br\/>\nAdditional code and notebooks are avaliable on my repository: https:\/\/github.com\/Vykstorm\/CaptchaDL","a1b0619f":"Note that $yl_i^j = argmax_k(y_i^{j,k})$","8367c6c5":"## Import statements","aca66325":"\n\nList all files in the dataset.\n","bc698171":"## Save data"}}