{"cell_type":{"05ff557f":"code","820561cc":"code","1059c241":"code","bdbdb2c8":"code","e4b7e1b3":"code","825e09cf":"code","0b8522fa":"code","4f578341":"code","4469e53d":"code","2cfad5e8":"code","2134b529":"code","dce5c795":"code","8ec795be":"code","6d4101f3":"code","11f48fea":"code","9e757326":"code","9b8d26e7":"code","5f8c4fc6":"code","6279f835":"code","ab84fc2c":"code","79c7b26e":"code","46c6b4ba":"code","bf5754b2":"code","5bd1868b":"code","5b5c5865":"code","b27cb170":"code","73a834d8":"code","0347c19c":"code","37eb5d36":"markdown","aa1870e2":"markdown","8b1277bc":"markdown","5db240ee":"markdown","dfe264f1":"markdown","9d27e3c9":"markdown","74ab0a17":"markdown","c9cb02a3":"markdown","1f9e0475":"markdown","44e69246":"markdown","57c8c7b1":"markdown","3507c3e3":"markdown","6499b2df":"markdown","e867f88c":"markdown","6ddb1b85":"markdown"},"source":{"05ff557f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","820561cc":"from scipy.stats import norm\nfrom datetime import datetime\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, ShuffleSplit\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nfrom sklearn.feature_selection import SelectKBest, f_regression\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport xgboost as xgb # regression model\n\n# plots\nimport seaborn as sns\nimport matplotlib.pyplot as plt","1059c241":"ford = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/ford.csv')\nford.info()","bdbdb2c8":"if 'tax(\u00a3)' in ford.columns:\n    ford.rename({'tax(\u00a3)': 'tax'}, axis='columns')","e4b7e1b3":"f, (ax1, ax2) = plt.subplots(1,2, figsize=(15,5))\nsns.distplot(ford['price'], fit=norm, ax=ax1)\nsns.distplot(np.log(ford['price']), fit=norm, ax=ax2)\nplt.show()","825e09cf":"ford['price'] = np.log(ford['price'])","0b8522fa":"def price_plot(feature, target='price', width=8, height=7, flip=False):\n    if feature in ford.columns:\n        plt.figure(figsize=(width, height))\n        price_order = ford.groupby(feature)[target].mean().sort_values(ascending=False).index.values\n        if flip:\n            sns.boxplot(data=ford, y=target, x=feature, order=price_order)\n        else:\n            sns.boxplot(data=ford, x=target, y=feature, order=price_order)\n        plt.title('Price of Ford vehicles by %s' %feature)","4f578341":"ford['model'] = ford['model'].str.strip()\nprice_plot('model')","4469e53d":"price_plot('year', flip=True, height=5, width=12)","2cfad5e8":"price_plot('transmission', flip=True, width=5, height=4)","2134b529":"sns.lmplot(data=ford, x='mileage', y='price')","dce5c795":"f, (ax1, ax2) = plt.subplots(1,2, figsize=(15,5))\nsns.distplot(ford['mileage'], fit=norm, ax=ax1)\nsns.distplot(np.sqrt(ford['mileage']), fit=norm, ax=ax2)\nplt.show()","8ec795be":"ford['mileage'] = np.sqrt(ford['mileage'])\nsns.lmplot(data=ford, x='mileage', y='price')","6d4101f3":"price_plot('fuelType', flip=True, width=5, height=4)","11f48fea":"price_plot('tax', flip=True, width=10, height=5)","9e757326":"price_plot('mpg', flip=True, width=30, height=5)","9b8d26e7":"if 'mpg' in ford.columns:\n    sns.lmplot(data=ford, x='mpg', y='price')","5f8c4fc6":"price_plot('engineSize', flip=True, width=10, height=5)","6279f835":"sns.lmplot(data=ford, x='engineSize', y='price')","ab84fc2c":"ford.info()","79c7b26e":"to_one_hot = ['model', 'transmission', 'fuelType']\n\ntemp = ford.copy()\ntemp = pd.concat([temp, pd.get_dummies(temp[to_one_hot])], axis=1)\ntemp.drop(to_one_hot, axis=1, inplace=True)\nford = temp\nford.head()","46c6b4ba":"y = ford.price\nX = ford.drop(columns='price', axis=1)\nX.head(10)","bf5754b2":"pd.DataFrame(np.exp(y)).head(10).T","5bd1868b":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=1)\n\ndef validation_predictions(model, name):\n    new_model = model.fit(X_train, y_train)\n    pred = np.exp(new_model.predict(X_valid))\n    print(\"============= %s and Shuffle Split =============\" %name)\n    print(\"Accuracy: %f\" %(r2_score(np.exp(y_valid), pred)))\n    print(\"RMSE: %f\" %(np.sqrt(mean_squared_error(np.exp(y_valid), pred))))\n    print(\"MAE: %f\" %(mean_absolute_error(np.exp(y_valid), pred)))\n    \n    new_model = model.fit(X, y)\n    cv = ShuffleSplit(n_splits=5, test_size=0.3, random_state=0)\n    cvs = cross_val_score(new_model, X, y, cv=cv)\n    print('Shuffle and cross validate: %s \\nAverage: %.4f' %(cvs, cvs.mean()))","5b5c5865":"lr_model = LinearRegression()\nvalidation_predictions(lr_model, 'Linear Regression')","b27cb170":"dt_model = DecisionTreeRegressor(random_state=0)\nvalidation_predictions(dt_model, 'Decision Tree Regressor')","73a834d8":"rf_model = RandomForestRegressor(random_state=0)\nvalidation_predictions(rf_model, 'Random Forest Regressor')","0347c19c":"xgb_model = xgb.XGBRegressor()\nvalidation_predictions(xgb_model, 'XGBoost Regressor')","37eb5d36":"Distribution of the response variable:","aa1870e2":"**Miles per gallon (mpg)**","8b1277bc":"**Engine Size**","5db240ee":"# START\n\n**Imports**","dfe264f1":"**Read File**\n\nThis notebook will work with any csv file in the '100,000 UK Used Car' data set. XGBoost always gives the best score; it will give an r^2 score of 0.90 or greater. Change the csv file and hit 'Run All' to see different results. The cclass file does not have tax or mpg as features and performs the worst at an r2 score of 0.90. The best score is with the vw.csv file with an r2 of ~0.9642.","9d27e3c9":"# Predictions","74ab0a17":"**Tax**","c9cb02a3":"Transform the price to get a normal distribution:","1f9e0475":"# Encoding\n\nThe categorical variables need to be converted into numerical variables for training.","44e69246":"Take the square root of the mileage to get a normal distribution:","57c8c7b1":"**Mileage**","3507c3e3":"**Fuel Type**","6499b2df":"**Transmission**","e867f88c":"# Eploratory Data Analysis (EDA)\n\n**Model**","6ddb1b85":"**Year**"}}