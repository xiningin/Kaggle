{"cell_type":{"5e853972":"code","b75286df":"code","42bf6cb1":"code","1f2e7fd5":"code","d6b22807":"code","1edb91f0":"code","264b02f4":"code","14b6cd4d":"code","110aacb1":"code","b814a93a":"code","d56c1def":"code","137d7e60":"code","b17c5425":"code","055d150d":"code","7acaebe3":"code","154f5362":"code","0a80bd0e":"code","dc437044":"code","0daefe5c":"code","a276d135":"code","a50fc518":"code","6189848c":"code","6ae67dce":"code","a1872bc9":"code","f8e9c827":"code","733a41c6":"code","77de115e":"code","6ea744c4":"code","7d88e622":"code","92fb725c":"code","5552c880":"code","f7fffa77":"code","aca7a574":"code","3bdf44a3":"markdown","406deb44":"markdown","028e45a2":"markdown","17252a2a":"markdown","e86f3838":"markdown","114aecca":"markdown","8425a5e3":"markdown","22539bda":"markdown","79a33f6d":"markdown","cb141f91":"markdown","d8fbe849":"markdown","42bfd4da":"markdown","1ff0bfbc":"markdown","c6bde063":"markdown","5702c33d":"markdown","0053bf92":"markdown","c4e90d07":"markdown","b1aa461f":"markdown","121cb6a4":"markdown"},"source":{"5e853972":"import pandas as pd","b75286df":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nrating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ndf = movie.merge(rating, how=\"left\", on=\"movieId\")","42bf6cb1":"comment_counts = pd.DataFrame(df[\"title\"].value_counts())\nrare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index","1f2e7fd5":"common_movies = df[~df[\"title\"].isin(rare_movies)]","d6b22807":"user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\nuser_movie_df","1edb91f0":"random_user = int(pd.Series(user_movie_df.index).sample(1, random_state=41).values)\nrandom_user","264b02f4":"# random user selected\nrandom_user_df = user_movie_df[user_movie_df.index == random_user]","14b6cd4d":"# we brought the movies that this user watched\nmovies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()\nmovies_watched","110aacb1":"# we checked his score on a movie\nuser_movie_df.loc[user_movie_df.index == random_user, user_movie_df.columns == \"Carlito's Way (1993)\"]","b814a93a":"# we found the total number of movies this user watched : 20\nlen(movies_watched)","d56c1def":"# we have selected other users who watch the same movies as the user\nmovies_watched_df = user_movie_df[movies_watched]\nmovies_watched_df.head()","137d7e60":"movies_watched_df.shape","b17c5425":"# the number of users who gave at least 1 vote for the same movies\nuser_movie_count = movies_watched_df.T.notnull().sum()\nuser_movie_count","055d150d":"user_movie_count = user_movie_count.reset_index()\nuser_movie_count","7acaebe3":"user_movie_count.columns = [\"userId\", \"movie_count\"]\nuser_movie_count.head()","154f5362":"perc = len(movies_watched) * 60 \/ 100\n# we selected other users who watched the movie in partnership with at least 60 percent of the user\nuser_movie_count[user_movie_count[\"movie_count\"] > perc].sort_values(\"movie_count\", ascending=False)","0a80bd0e":"# let's find the number of people who watch all the same movies as the user\nuser_movie_count[user_movie_count[\"movie_count\"] == 20].count()","dc437044":"# let's bring in the IDs of users who watch more than 60 percent of common movies with the user\nusers_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > perc][\"userId\"]\nusers_same_movies.head()","0daefe5c":"# Number of people watching the same movies as the user (%60) : 558\nusers_same_movies.count()","a276d135":"# We will collect the data of our user and other users.\nfinal_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies)],\n                      random_user_df[movies_watched]])\nfinal_df.head()","a50fc518":"final_df.T.corr()","6189848c":"# We're going to create a correlation DF.\ncorr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()\ncorr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['user_id_1', 'user_id_2']\ncorr_df = corr_df.reset_index()\ncorr_df.head()","6ae67dce":"# We'll find the most similar bullies (Top Users)\ntop_users = corr_df[(corr_df[\"user_id_1\"] == random_user) & (corr_df[\"corr\"] >= 0.65)][[\"user_id_2\", \"corr\"]].reset_index(drop=True)\ntop_users = top_users.sort_values(by='corr', ascending=False)\ntop_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)\ntop_users","a1872bc9":"top_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')\ntop_users_ratings.head(20)","f8e9c827":"top_users_ratings = top_users_ratings[top_users_ratings[\"userId\"] != random_user]\ntop_users_ratings.head(20)","733a41c6":"top_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\ntop_users_ratings.head()","77de115e":"top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})","6ea744c4":"recommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\nrecommendation_df = recommendation_df.reset_index()\nrecommendation_df.head()","7d88e622":"recommendation_df[[\"movieId\"]].nunique()","92fb725c":"recommendation_df[recommendation_df[\"weighted_rating\"] > 3]","5552c880":"movies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 3].sort_values(\"weighted_rating\", ascending=False)","f7fffa77":"recommendation = movies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])","aca7a574":"recommendation.head(20)","3bdf44a3":"### Selecting common movies by removing rare movies from the dataset ","406deb44":"* Movies that can be suggested based on the movies the user has watched","028e45a2":"### Random User Selection with ID","17252a2a":"### Let's choose the ones with the highest weighted average to suggest","e86f3838":"### What movies can be recommended? How many do we have ?","114aecca":"# Step 5: Calculating the Weighted Average Recommendation Score\n---","8425a5e3":"# Dataset Story\n---\nContext\nThe datasets describe ratings and free-text tagging activities from MovieLens, a movie recommendation service. It contains 20000263 ratings and 465564 tag applications across 27278 movies. These data were created by 138493 users between January 09, 1995 and March 31, 2015. This dataset was generated on October 17, 2016.\n\nUsers were selected at random for inclusion. All selected users had rated at least 20 movies.\n\n### We will use movie and rating dataset in this study\n* rating.csv that contains ratings of movies by users:\n    * userId\n    * movieId\n    * rating\n    * timestamp\n* movie.csv that contains movie information:\n    * movieId\n    * title\n    * genres","22539bda":"# User-Based Collaborative Filtering\n---\n\n* It is one of the collaborative filtering types.\n* Recommendations are made based on user similarities\n\n### Let's open this up a little bit.\n--- \nFor example, we will make a movie recommendation to a person from a group of friends. Everyone in this group of friends has seen at least 2 joint movies. \nThe person I'm proposing to and the others liked one movie.They all liked it. \nI suggest that the other friends of mys have seen one more joint film. They saw that joint film and they liked it. Yes, the person I'm proposing to and his other colleagues have already acted in common and liked a film. They liked that movie that the person I was going to recommend, and because they acted in common with them, we can recommend it to that person.\n\nSo we're going to pick users who've seen the same movie as this person. We will examine the similarity between these users and this person. We will select the users who have the nearest liking habit and they will like the movies they like on our user.","79a33f6d":"# User-Based Collaborative Filtering Methodology\n\n* Step 1: Preparing the Data Set\n* Step 2: Determination of The Films Watched by the User to Be Recommended\n* Step 3: Accessing the Data and IDs of Other Users Watching the Same Movies\n* Step 4: Identifying the Users with the Most Similar Behavior to The User to Be Recommended\n* Step 5: Calculation of Weighted Average Recommendation Score","cb141f91":"### Reading datasets and combining them into a single dataset","d8fbe849":"# Step 2: Determination of the Films Watched by the User to Be Recommended\n---","42bfd4da":"# Step 4: Identifying the Users with the Most Similar Behavior to The User to Be Recommended\n---","1ff0bfbc":"### Total reviews of movies by users and selection of rare movies","c6bde063":"# Let's start\n---\n![letstry.png](attachment:f12ff593-c2c6-4642-94f5-e199cebaba5c.png)","5702c33d":"# Step 3: Accessing the Data and IDs of Other Users Watching the Same Movies\n---","0053bf92":"### Necessary Import","c4e90d07":"# Step 1: Preparing the Data Set\n---","b1aa461f":"### We calculated the weight average","121cb6a4":"# Movie Recommendation with User-Based Collaborative Filtering \n---\n![thibault-penin-AWOl7qqsffM-unsplash.jpg](attachment:34ad6bec-dd7f-4a12-b4ba-0387b581849f.jpg)"}}