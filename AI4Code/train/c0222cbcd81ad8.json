{"cell_type":{"23596655":"code","356ba89c":"code","ab97a876":"code","2ddb5d3e":"code","e31ab002":"code","e501b323":"code","7eb538aa":"code","e65e1315":"code","236c8fa9":"code","fecc0f01":"code","a50cb33a":"code","8cfa086c":"code","8c154044":"code","b8f6e3e6":"code","4eb51d4a":"code","093be3d8":"code","f6fd5573":"code","fab2671b":"code","76a02077":"code","515372f9":"code","e04ffca2":"code","03a18adb":"code","c99ad298":"code","63c1b780":"code","d8fd17be":"code","37c33a38":"code","060d8386":"code","8aa6ea33":"code","892f7df2":"code","d44d387d":"code","3c577f1f":"code","b81b67fa":"code","dd3dab72":"code","8354bd4d":"code","95006f5a":"code","0c844319":"code","c2849caa":"code","9522484a":"code","9b1fba00":"code","ec5f1a79":"code","8abe2da4":"code","8089c5f5":"code","09f6905e":"code","38118424":"code","2d867370":"code","294b39fb":"code","cb156a45":"code","f8031145":"code","6fdbf79e":"code","a3b6745d":"code","db6c2835":"code","c3388a4a":"markdown","562e10d8":"markdown","f7e861c9":"markdown","246b1812":"markdown","562da681":"markdown","b9be6307":"markdown","c3a6a064":"markdown","028364bd":"markdown","86e36429":"markdown","dd87c018":"markdown","9bd990cb":"markdown","7d05eac6":"markdown","9c1bb733":"markdown","04733f9d":"markdown","0122d291":"markdown","90c5c9c3":"markdown","def98ecc":"markdown","cac97a1f":"markdown","5638ebe1":"markdown","2d961d63":"markdown","bf92892b":"markdown","b79e58a0":"markdown","ea6f43d2":"markdown","406cab3c":"markdown","75c59fb4":"markdown","d2e44c57":"markdown","a3e66e9d":"markdown","1bbe9e48":"markdown","e8ea1326":"markdown","d795ad86":"markdown","36561e32":"markdown","2d72fc25":"markdown","16a0d5ce":"markdown"},"source":{"23596655":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","356ba89c":"import pandas as pd\nimport numpy as np\nimport pprint\nimport re\nimport Levenshtein\nimport datetime as dt","ab97a876":"print(Levenshtein.distance(\"T-54 (1949)\", \"T-54 (1947)\"))","2ddb5d3e":"print(Levenshtein.distance(\"T-54 (1949)\", \"T-54(1949)\"))","e31ab002":"df_data = pd.read_csv(\"..\/input\/warthunder-manual-killdeath-record\/records.csv\")\ndf_data.head()","e501b323":"df_data.info()","7eb538aa":"df_data.describe()","e65e1315":"df_data.dropna(inplace=True)\ndf_data.info()","236c8fa9":"def remove_nondigit(input_string: str):\n    return re.sub(pattern=\"[^0-9.]\", repl='', string=input_string)","fecc0f01":"df_data[\"Distance\"] = pd.to_numeric(df_data[\"Distance\"].map(arg=remove_nondigit), errors=\"coerce\")\ndf_data[\"EnemySpeed\"] = pd.to_numeric(df_data[\"EnemySpeed\"].map(arg=remove_nondigit), errors=\"coerce\")\ndf_data[\"SelfSpeed\"] = pd.to_numeric(df_data[\"SelfSpeed\"].map(arg=remove_nondigit), errors=\"coerce\")\n\ndf_data.dropna(inplace=True)","a50cb33a":"df_data.info()","8cfa086c":"df_data[\"Event\"] = df_data[\"Event\"].str.lower()","8c154044":"df_data.info()","b8f6e3e6":"df_data.describe()","4eb51d4a":"bmask_overdistance = df_data[\"Distance\"] > 3\ndf_data.loc[bmask_overdistance]","093be3d8":"df_data.drop(inplace=True, index=df_data.loc[bmask_overdistance].index)","f6fd5573":"df_data.describe()","fab2671b":"df_data[\"SelfSpeed\"] = df_data[\"SelfSpeed\"].astype(dtype=float)\ndf_data[\"EnemySpeed\"] = df_data[\"EnemySpeed\"].astype(dtype=float)\ndf_data[\"Distance\"] = df_data[\"Distance\"].astype(dtype=float)","76a02077":"df_data.describe()","515372f9":"df_data.info()","e04ffca2":"df_data[\"DateRecorded\"] = pd.to_datetime(df_data[\"DateRecorded\"], format = \"%Y-%m-%d\", errors = \"coerce\")\nbmask_isnat =  pd.isnull(df_data[\"DateRecorded\"])\ndf_data.drop(inplace=True, index=df_data.loc[bmask_isnat].index)","03a18adb":"df_data.dtypes","c99ad298":"bmask_kb = df_data[\"Event\"] == \"kb\"\nbmask_kill = df_data[\"Event\"] == \"k\"","63c1b780":"df_data.loc[bmask_kb][\"Distance\"].describe()","d8fd17be":"df_data.loc[bmask_kill][\"Distance\"].describe()","37c33a38":"def make_bmask(columns_and_values : list, df : pd.DataFrame = df_data):\n    masks = list()\n    \n    for col_val_pair in columns_and_values:\n        column_name, target_value = col_val_pair[0], col_val_pair[1]\n        masks.append(df[column_name].str.contains(pat = target_value, flags = re.I))\n    \n    return masks\n\n\ndef group_df(\n    groupby: list,\n    masks: list(tuple()),\n    df: pd.DataFrame = df_data,\n    keep_columns: list = [\"Event\", \"VehicleUsed\", \"EnemyVehicle\",\n                           \"Distance\", \"OrientationInSight\", \"EnemySpeed\", \"SelfSpeed\"]\n    ):\n    \n    # result = pd.DataFrame(columns = df.columns)\n    result = list()\n    \n    for bmask in masks:\n        # return df.loc[bmask, keep_columns].groupby(by = groupby, axis = \"rows\").mean()\n        result.append(\n            #df.loc[bmask, keep_columns].groupby(by = groupby, axis = \"rows\").mean()\n            df.loc[bmask, keep_columns].groupby(by = groupby, axis = \"rows\").agg(func=[\"count\", \"mean\"])\n        )\n    \n    # return df.loc[masks[0], keep_columns]\n    return result","060d8386":"df_data.info()","8aa6ea33":"bmasks = make_bmask(\n    columns_and_values = [\n        (\"VehicleUsed\", \"firefly\"),\n        (\"VehicleUsed\", \"sherman\"),\n        (\"VehicleUsed\", \"centurion mk. 10\")\n    ]\n)\n\nbmask_firefly = df_data[\"VehicleUsed\"].str.contains(pat=\"firefly\", flags=re.I)\nbmask_vc = df_data[\"VehicleUsed\"].str.contains(pat=\"sherman\", flags=re.I)\nbmask_tiger_e = df_data[\"VehicleUsed\"].str.contains(pat=\"tiger\", flags=re.I)\nbmask_cent = df_data[\"VehicleUsed\"].str.contains(pat=\"centurion mk. 10\", flags=re.I)\n\nbmask_enemy85 = df_data[\"EnemyVehicle\"].str.contains(pat=\"85\")\nbmask_enemy54 = df_data[\"EnemyVehicle\"].str.contains(pat=\"54\")\n\nstandard_mask = [\n    bmask_firefly & bmask_enemy85,\n    bmask_vc & bmask_enemy85,\n    bmask_tiger_e & bmask_enemy85,\n    bmask_cent & bmask_enemy54\n]\n\n# group_df(\n#     groupby = [\"Event\", \"VehicleUsed\", \"EnemyVehicle\"],\n#     masks = standard_mask\n#     # masks = bmasks\n# )","892f7df2":"bmask_subject_vehicle = df_data[\"VehicleUsed\"].str.contains(pat=\"fly\", flags=re.I)\nbmask_target_vehicle = df_data[\"EnemyVehicle\"].str.contains(pat=\"85\", flags=re.I)\ndf_data_by_vehicle = df_data.loc[bmask_subject_vehicle & bmask_target_vehicle].groupby(by=[\"Event\",\"EnemyVehicle\"], axis=\"rows\").agg(func=[\"count\", \"mean\"])\ndf_data_by_vehicle","d44d387d":"bmask_subject_vehicle = df_data[\"VehicleUsed\"].str.contains(pat=\"sherman\", flags=re.I)\nbmask_target_vehicle = df_data[\"EnemyVehicle\"].str.contains(pat=\"85\", flags = re.I)\ndf_data_by_vehicle = df_data.loc[bmask_subject_vehicle & bmask_target_vehicle].groupby(by=[\"Event\",\"EnemyVehicle\"], axis=\"rows\").agg(func=[\"count\", \"mean\"])\ndf_data_by_vehicle","3c577f1f":"bmask_subject_vehicle = df_data[\"VehicleUsed\"].str.contains(pat = \"tiger\", flags = re.I)\nbmask_target_vehicle = df_data[\"EnemyVehicle\"].str.lower().str.contains(pat=\"85\")\ndf_data_by_vehicle = df_data.loc[bmask_subject_vehicle & bmask_target_vehicle].groupby(by=[\"Event\",\"EnemyVehicle\"], axis=\"rows\").agg(func=[\"count\", \"mean\"])\ndf_data_by_vehicle","b81b67fa":"bmask_subject_vehicle = df_data[\"VehicleUsed\"].str.contains(pat=\"Centurion Mk. 10\") & df_data[\"EnemyVehicle\"].str.contains(pat=\"T-54\", flags = re.I)\ndf_data_by_vehicle = df_data.loc[bmask_subject_vehicle].groupby(by=[\"Event\",\"EnemyVehicle\"], axis=\"rows\").agg(func=[\"count\", \"mean\"])\ndf_data_by_vehicle","dd3dab72":"df_data.loc[(df_data[\"Distance\"] >= 2)].sort_values(by=[\"Distance\"], axis=\"index\", ascending=False)","8354bd4d":"def describe_kd(\n    subject_target_pairs : list = [(\"*\", [\"*\"])],\n    df_data = df_data):\n    \n    # results = dict()\n    results = pd.DataFrame()\n    \n    for tup in subject_target_pairs:\n        subject_vehicle = tup[0]\n        \n        for target_vehicle in tup[1]:\n            bmask_subject_vehicle = df_data[\"VehicleUsed\"].str.contains(pat = subject_vehicle)\n            bmask_target_vehicle = df_data[\"EnemyVehicle\"].str.contains(pat = target_vehicle, flags = re.I)\n            bmask = (bmask_subject_vehicle & bmask_target_vehicle)\n            \n            pair_result = df_data.loc[bmask].groupby(by=[\"Event\", \"EnemyVehicle\"])\n            if (len(pair_result) != 0):\n                results = pd.concat([results, pair_result.describe()])\n                \n    return results\n","95006f5a":"bmask_62days = df_data[\"DateRecorded\"].dt.date >= (dt.date.today() - dt.timedelta(days=62))\nbmask_after_allowskipping = df_data[\"DateRecorded\"].dt.date >= dt.date(2022, 1, 7)\nbmask_after_heshfix = df_data[\"DateRecorded\"].dt.date >= dt.date(2021, 12, 21)\nbmask_after_wingedlions = df_data[\"DateRecorded\"].dt.date >= dt.date(2021, 12, 13)\nbmask_after_newsight_2021_11_12 = df_data[\"DateRecorded\"].dt.date >= dt.date(2021, 11, 12)\nbmask_after_respawnrule = df_data[\"DateRecorded\"].dt.date >= dt.date(2021, 10, 4)\nbmask_after_redskies = df_data[\"DateRecorded\"].dt.date >= dt.date(2021, 6, 4)","0c844319":"describe_kd(\n    subject_target_pairs = [\n        (\"Centurion Mk. 10\", [\"1947\", \"1949\"])\n    ],\n    df_data = df_data.loc[bmask_62days]\n)","c2849caa":"describe_kd(\n    subject_target_pairs = [\n        (\"Centurion Mk. 10\", [\"1947\", \"1949\"])\n    ],\n    df_data = df_data.loc[bmask_after_newsight_2021_11_12 & ~bmask_after_wingedlions]\n)","9522484a":"describe_kd(\n    subject_target_pairs = [\n        (\"Centurion Mk. 10\", [\"1947\", \"1949\"])\n    ],\n    df_data = df_data.loc[(~bmask_after_newsight_2021_11_12) & (bmask_after_respawnrule)]\n)","9b1fba00":"describe_kd(\n    subject_target_pairs = [\n        (\"Centurion Mk. 10\", [\"1947\", \"1949\"])\n    ],\n    df_data = df_data.loc[bmask_after_allowskipping]\n)","ec5f1a79":"describe_kd(\n    subject_target_pairs = [\n        (\"Centurion Mk. 10\", [\"1947\", \"1949\"])\n    ],\n    df_data = df_data.loc[bmask_after_heshfix & ~bmask_after_allowskipping]\n)","8abe2da4":"describe_kd(\n    subject_target_pairs = [\n        (\"Centurion Mk. 10\", [\"1947\", \"1949\"])\n    ],\n    df_data = df_data.loc[~bmask_after_heshfix & bmask_after_wingedlions]\n)","8089c5f5":"describe_kd(\n    subject_target_pairs = [\n        (\"Centurion Mk. 10\", [\"1947\", \"1949\"])\n    ],\n    df_data = df_data.loc[bmask_after_wingedlions]\n)","09f6905e":"describe_kd(\n    subject_target_pairs = [\n        (\"Centurion Mk. 10\", [\"1947\", \"1949\"])\n    ],\n    df_data = df_data.loc[bmask_after_respawnrule]\n)","38118424":"describe_kd(\n    subject_target_pairs = [\n        (\"Chieftain Mk. 5\", [\"T-64A\", \"T-62M\", \"T-55AM\"])\n    ]\n)","2d867370":"describe_kd(\n    subject_target_pairs = [\n        (\"Chieftain Mk. 3\", [\"T-64A\", \"T-62M\", \"T-55AM\"])\n    ]\n)","294b39fb":"describe_kd(\n    subject_target_pairs = [\n        (\"Sherman Vc\", [\"85\"])\n    ]\n)","cb156a45":"describe_kd(\n    subject_target_pairs = [\n        (\"Firefly\", [\"85\"])\n    ]\n)","f8031145":"describe_kd(\n    subject_target_pairs = [\n        (\"Tiger E\", [\"85\"])\n    ]\n)","6fdbf79e":"describe_kd(\n    subject_target_pairs = [\n        (\"Panther D\", [\"85\"])\n    ]\n)","a3b6745d":"describe_kd(\n    subject_target_pairs = [\n        (\"Panther A\", [\"85\"])\n    ]\n)","db6c2835":"print(\"Done\")","c3388a4a":"- Remove non-digit characters from numeric columns before selecting columns to drop. Reduces lost data.","562e10d8":"Update\n- As of August 17, 2021, the engagment distance between the Centurion and T-54 series has changed. It has become more like the expected values: kills at .72 km, deaths at .435 (1947) and .491 (1949).","f7e861c9":"#### DateRecorded is converted to a Date type from a string type.","246b1812":"### Average engangement distances for Centurion Mk. 10 vs. T-54 series.","562da681":"Update: KD Review 2021-11-03\n\n#### Cheiftain Mk. 5\n- Ratio for Chieftain Mk. 5 meets the 1-1 goal versus T-64A (1971): 17\/13 = ~1.308.\n- It is one kill short of 2-1 goal vs. T-62M-1: (11\/6 = 1.8333...).\n- Exceeds 2-1 goal vs. T-55AM-1: 10\/2, 5.0. Manual review showed 12\/3 = 4.","b9be6307":"Update: KD Review 2021-10-27\n\n#### Centurion Mk. 10\n- All replays earlier than Oct. 26 reviewed.\n- Ratio versus T-54 (1947) mostly unchanged despite mostly losses since Oct. 13 gains.\n- Ratio versus T-54 (1949) has insignificant improvement: 3.200 versus previous 3.146\n- Ranges versus T-54 (1947) unchanged: kills at .720 (no change), deaths at .434 (-.001).\n- Ranges versus T-54 (1949) slightly changed: kills at .736 (+.016), deaths at .487 (+.052).","c3a6a064":"# Exploratory Data Analysis","028364bd":"#### Distance, SelfSpeed, and EnemySpeed should be floats.","86e36429":"KD records after update Winged Lions and before allowing skipping maps.","dd87c018":"### Effect of RideR2's custom sight on KD Ratio","9bd990cb":"### Effect of suspected unannounced HESH penetration fix on KD Ratio","7d05eac6":"### Dealing with Apparently Erroneous Distances\n\nThe area in which ground vehicles are allowed to travel within all WarThunder maps never exceeds 3 kilometers. The recommended solution is to remove these columns even if the cuase for typographical errors can be guessed. E.g. double-digit non-decimal numbers or those with special characters corresponding to number keys on a standard keyboard.","9c1bb733":"### Testing Levenshtein Distance","04733f9d":"KD records BEFORE using new custom sight and after next significant variable, respawning if killed by a \"non-priority:, i.e. not a T-54 1949 or 1947.","0122d291":"### Chieftain Mk. 3","90c5c9c3":"**Average distance at which a \"kill\" is made by the player.**","def98ecc":"### Longest Kills Made","cac97a1f":"KD after HESHfix and before skipping \"bad\" maps.","5638ebe1":"# Data Cleaning\n\n- Columns that documentation says are numberic should also be identified by Pandas as numeric","2d961d63":"# WarThunder Performance Analysis","bf92892b":"### Sherman Vc (Italian)","b79e58a0":"## Remarks on Exploratory Analysis\n\n- More data is needed. The average kill distance for the T-44-100 is .76 kilometers while the average killed-by distance is 1.08. Further, the kill and killed-by distances of the T-44-100 are greater than for the T-54 series (1949 and 1947) despite the 1947 having better armor and the 1949 having better shells.\n\n- There is a presumed reason for the T-54 (1949) being killed at a longer range (0.75) than the T-54 (1947) despite the 1949 series having better ammunition for long range. Since the 1949 series is generally better than the 1947, it is spawned first. Once killed, the enemy players have an approximate idea of where the player is and manage to get close more often thanks to knowledge gained while in the 1949. This is an unproven explanation and may require an additional column\/parameter to be verified.\n","ea6f43d2":"### Average engagement range of Tiger vs. 85mm-armed tanks.","406cab3c":"Update\n\n- As of October 13, 2021, ratio vs. T-54 (1949) reached ~3.146. 129\/41.\n- Ratio versus T-54 (1947) mostly unchanged: ~2.214. 93\/42.","75c59fb4":"**Average distance at which a \"killed-by\" event occurrs.**","d2e44c57":"### Mean distance of engagements for Firefly\/Sherman Vc vs. 85mm-armed tanks.","a3e66e9d":"### Enforcing Data-types Based on Dataset Documentation","1bbe9e48":"### Current Goal:\n#### Nov. 04, 2021-11-04\n- Correct misspelled vehicle names based on string similarity and frequencies. Steps:\n1. First step is to identify names that rarely appear. It is assumed that these are misspelled names.\n2. For each mispelled name, find the most similar name that appears frequently.\n\n- Hamming distance is not appropriate since it only works on strings with the same length.\n    \n- The Levenshtein Distance method cannot distinguish well between missing characters and coincidentally similar names. It might work if there are no extremly similar and rare correct names. E.g. T-55AM-1 versus T55AM-1 will be parsed correctly provided only one character is misspelled.\n\n- Levenshtein distance cannot distinguish between a swapping error and similar but clearly different names, e.g. 1949 vs. 1974 and 1947 vs 1974 have the same Levenshtein distance.\n","e8ea1326":"KD records after using new custom sight and before next significant variable, update \"Winged Lions\".","d795ad86":"Recall previous boolean masks: <br>\nbmask_kb = df_data[\"Event\"] == \"kb\" <br>\nbmask_kill = df_data[\"Event\"] == \"k\" <br>","36561e32":"## Kill-Death Ratio Summaries","2d72fc25":"### Chieftain Mk. 5","16a0d5ce":"Sources:\n\nComparison of edit-distance methods for measuring string similarity:\nhttps:\/\/www.baeldung.com\/cs\/string-similarity-edit-distance\n\nString similarity calculations for merging different versions of each app.\nhttps:\/\/medium.com\/@appaloosastore\/string-similarity-algorithms-compared-3f7b4d12f0ff\n\nBuilt-in Python libraries for Levenshtein and Cosine Similarity:\nhttps:\/\/towardsdatascience.com\/calculating-string-similarity-in-python-276e18a7d33a\n\nManual implementation of Hamming Distance and Levenshtein Distance:\nhttps:\/\/www.analyticsvidhya.com\/blog\/2021\/02\/a-simple-guide-to-metrics-for-calculating-string-similarity\/"}}