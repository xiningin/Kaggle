{"cell_type":{"11a88e97":"code","5760a8e9":"code","4085a715":"code","95cac90a":"code","e39a6065":"code","372a2dc2":"code","12692d29":"code","5fe71ff9":"code","4b40b9fc":"code","0af07e58":"code","875cfe5f":"code","8ffa05ce":"code","e81c6588":"markdown","7623bd97":"markdown","949bf4df":"markdown","e35adae7":"markdown","f503a286":"markdown","6b1002f7":"markdown","7a966ff8":"markdown","01de1995":"markdown","c2bc3ae3":"markdown","d9b0c4d6":"markdown","793834d9":"markdown"},"source":{"11a88e97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5760a8e9":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","4085a715":"dataset = pd.read_csv(\"\/kaggle\/input\/iris-flower-dataset\/IRIS.csv\")\ndataset.head()","95cac90a":"Features=[\"sepal_length\",\"sepal_width\",\"petal_length\",\"petal_width\"]\nX=dataset[Features]\ny=dataset.species","e39a6065":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)","372a2dc2":"from sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","12692d29":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 8)\nclassifier.fit(X_train, y_train)","5fe71ff9":"y_pred = classifier.predict(X_test)","4b40b9fc":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2)","0af07e58":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5)\nclassifier.fit(X_train, y_train)","875cfe5f":"y_pred = classifier.predict(X_test)","8ffa05ce":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2)","e81c6588":"# Getting result and accuracy","7623bd97":"# Making Predictions","949bf4df":"# Data preprocessing\n**1. selecting dependent and independent values.**","e35adae7":"# Loading and reading the dataset","f503a286":"# Training the model with K-NN classifier.\n# For k=5","6b1002f7":"# Training the model with K-NN classifier.\n# For k=8","7a966ff8":"# Making Predictions","01de1995":"# Getting results and accuracy","c2bc3ae3":"**2. dividing into train and test set**","d9b0c4d6":"# importing necessary python packages ","793834d9":"**3. Scaling data**"}}