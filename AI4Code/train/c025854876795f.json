{"cell_type":{"9b1440c6":"code","8e0f4699":"code","364ac22a":"code","71c77244":"code","2f149f70":"code","1dd59dcb":"code","2966b31a":"code","e813a0e1":"code","498562b4":"code","170397b9":"code","2759bbe1":"code","41ffce3d":"code","1b897a0a":"code","b7219f54":"code","7b637421":"code","51021233":"code","2a805c9e":"code","31ce0710":"code","7af497f3":"code","3623a56b":"code","e45f643a":"code","0c8866a6":"code","f48eddde":"code","6f27543f":"code","28d8ac9a":"code","addbc0fb":"code","79ba5864":"code","fec04dc9":"code","a5b52a35":"code","e9762fb0":"code","0d9c5f7d":"markdown","a9398dff":"markdown","bad81699":"markdown","74feca10":"markdown","def41718":"markdown","6b045241":"markdown","a73fb612":"markdown","d74b11ba":"markdown","e6fb21a0":"markdown","928feeb5":"markdown","62476309":"markdown","a6530d11":"markdown","d8b4112e":"markdown","c3401364":"markdown"},"source":{"9b1440c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e0f4699":"df = pd.read_csv('..\/input\/videogame-sale\/VideoGame_Sales.csv')","364ac22a":"df.head()","71c77244":"df.size, df.shape","2f149f70":"df.isnull().mean()","1dd59dcb":"plt.figure(figsize=(16,5))\nsns.heatmap(df.isnull(),cmap='BuPu_r')\n# the white lines in the heatmap indicate the null values in the dataset","2966b31a":"df = df.dropna()","e813a0e1":"df.duplicated().sum()\n\n# no duplicates in our dataset","498562b4":"df.dtypes","170397b9":"df['Genre'].value_counts().plot(kind = 'pie', autopct = '%1.2f%%', figsize = (15,8))\nplt.show()","2759bbe1":"# converting Year from float to int\ndf['Year'] = df['Year'].astype('int')","41ffce3d":"plt.figure(figsize=(15,5))\ngames = df.groupby(['Year']).count()['Name'].sort_values(ascending = False)\ngames = pd.DataFrame(games).reset_index()\ngames = games.rename(columns = {'Name':'No_of_Games'})\nsns.lineplot(data=games, x=games['Year'], y=games['No_of_Games'])\nplt.show()","1b897a0a":"games = df.groupby(['Year']).count()['Name'].sort_values(ascending = False).head(10)\ngames = pd.DataFrame(games).reset_index()\ngames = games.rename(columns = {'Name':'No_of_Games'})\nplt.figure(figsize=(14,8))\nplot = sns.barplot(data=games, x=games['Year'], y=games['No_of_Games'])\nfor p in plot.patches:\n    plot.annotate(p.get_height(),(p.get_x()+p.get_width()\/3, p.get_height()+10))","b7219f54":"top_sales_year = round(df.groupby(['Year']).sum()['Global_Sales'].sort_values(ascending = False).head(10),2)\ntop_sales_year = pd.DataFrame(top_sales_year).reset_index()\ntop_sales_year","7b637421":"plt.figure(figsize=(16,8))\nplot = sns.barplot(data=top_sales_year, x = top_sales_year['Year'], y = top_sales_year['Global_Sales'])\nfor p in plot.patches:\n    plot.annotate(p.get_height(),(p.get_x()+p.get_width()\/3, p.get_height()+10))","51021233":"plt.figure(figsize=(15,8))\npublisher = df.groupby(['Publisher']).count()['Rank'].sort_values(ascending = False).head(10)\npublisher = pd.DataFrame(publisher).reset_index().rename(columns={'Rank':'No_of_Games_Published'})\nplot = sns.barplot(data=publisher, x=publisher['Publisher'], y = publisher['No_of_Games_Published'])\nplt.xticks(rotation = 90)\nfor p in plot.patches:\n    plot.annotate(p.get_height(), (p.get_x()+p.get_width()\/3, p.get_height()+10))","2a805c9e":"NA = pd.DataFrame(round(df.groupby(['Publisher']).sum()['NA_Sales'].sort_values(ascending = False).head(10))).reset_index()\nplt.figure(figsize=(15,8))\nplot = sns.barplot(data=NA, x=NA['Publisher'], y=NA['NA_Sales'])\nfor p in plot.patches:\n    plot.annotate(p.get_height(), (p.get_x()+p.get_width()\/3, p.get_height()+10))\nplt.xticks(rotation = 90)\nplt.show()","31ce0710":"EU = pd.DataFrame(round(df.groupby(['Publisher']).sum()['EU_Sales'].sort_values(ascending = False).head(10))).reset_index()\nplt.figure(figsize=(15,8))\nplot = sns.barplot(data=EU, x=EU['Publisher'], y=EU['EU_Sales'])\nfor p in plot.patches:\n    plot.annotate(p.get_height(), (p.get_x()+p.get_width()\/3, p.get_height()+10))\nplt.xticks(rotation = 90)\nplt.show()","7af497f3":"JP = pd.DataFrame(round(df.groupby(['Publisher']).sum()['JP_Sales'].sort_values(ascending = False).head(10))).reset_index()\nplt.figure(figsize=(15,8))\nplot = sns.barplot(data=JP, x=JP['Publisher'], y=JP['JP_Sales'])\nfor p in plot.patches:\n    plot.annotate(p.get_height(), (p.get_x()+p.get_width()\/3, p.get_height()+10))\nplt.xticks(rotation = 90)\nplt.show()","3623a56b":"plt.figure(figsize=(30,10))\nplot = sns.countplot(data=df, x=df['Year'], hue='Genre', order=df['Year'].value_counts().iloc[:5].index)\nfor p in plot.patches:\n    plot.annotate(p.get_height(), (p.get_x()+p.get_width()\/4, p.get_height()+5))","e45f643a":"genre_per = df.groupby(['Year','Genre']).size().reset_index(name = 'count')\ngenre_per_max = genre_per.groupby(['Year'])['count'].transform('max')==genre_per['count']\nyear_max_genre = genre_per[genre_per_max].reset_index(drop = True)\nyear_max_genre = year_max_genre.drop_duplicates(subset = ['Year','count'], keep = 'last').reset_index(drop = True)\nyear_max_genre\ngenre = year_max_genre['Genre'].values\n\nplt.figure(figsize = (30,10))\nplot = sns.barplot(data=year_max_genre, x = 'Year', y = 'count')\nindex = 0\nfor value in year_max_genre['count'].values:\n#     print(asd)\n    plot.text(index, value + 3, str(genre[index] + '----' +str(value)), color='#000', size=13, rotation= 90, ha=\"center\")\n    index += 1\n","0c8866a6":"year_sale = df.groupby(['Year','Genre'])['Global_Sales'].sum().reset_index()\nyear_sales_a= year_sale.groupby(['Year'])['Global_Sales'].transform('max')==year_sale['Global_Sales']\nyear_sale_max = year_sale[year_sales_a].reset_index(drop = True)\nyear_sale_max\n\nSales = year_sale_max['Genre']\n\nplt.figure(figsize = (30,10))\nplot = sns.barplot(data=year_sale_max, x = 'Year', y = 'Global_Sales')\nindex = 0\nfor value in year_sale_max['Global_Sales']:\n#     print(asd)\n    plot.text(index, value + 2, str(Sales[index] + '----' +str(round(value,2))), color='#000', size=13, rotation= 90, ha=\"center\")\n    index += 1","f48eddde":"platform = pd.DataFrame(round(df.groupby(['Platform']).sum()['Global_Sales'].sort_values(ascending = False).reset_index()))\nplatform\nplt.figure(figsize=(20,5))\nplot = sns.barplot(data=platform, x='Platform', y='Global_Sales')\nfor p in plot.patches:\n    plot.annotate(p.get_height(), (p.get_x()+p.get_width()\/5, p.get_height()+10))","6f27543f":"plt.figure(figsize=(10,8))\ncorr_back = df.corr()\nmask = np.zeros_like(corr_back, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr_back, mask=mask, center=0, square=True, annot=True, linewidths=.5)\nplt.show()","28d8ac9a":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error","addbc0fb":"X = df[['NA_Sales','EU_Sales','JP_Sales','Other_Sales']]\nY = df['Global_Sales']","79ba5864":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30, random_state=0)","fec04dc9":"lr = LinearRegression()\n\nlr.fit(X_train,y_train)\ny_train_pred = lr.predict(X_train)\ny_test_pred = lr.predict(X_test)\n\nr2_score_train = r2_score(y_train,y_train_pred)\nr2_score_test = r2_score(y_test,y_test_pred)\n\nrmse_train = np.sqrt(mean_squared_error(y_train,y_train_pred))\nrmse_test = np.sqrt(mean_squared_error(y_test,y_test_pred))\n\nprint('r_square_train: ', r2_score_train)\nprint('rmse_train: ',rmse_train)\n\nprint('\\n')\nprint('r_square_test: ', r2_score_test)\nprint('rmse_test: ', rmse_test)","a5b52a35":"lr.intercept_","e9762fb0":"pd.DataFrame(lr.coef_, index=X.columns, columns=['coefficient'])","0d9c5f7d":"### Top publishers with most games published","a9398dff":"### Percentage of Genre Type Games","bad81699":"### check for duplicates in our dataset","74feca10":"### Top 10 publishers who dominate North_America, Japan and European regions","def41718":"### Linear Regression","6b045241":"### since the missing values are only about 1.6% and .3% lets drop them\n","a73fb612":"### Platform with the highest sale prices","d74b11ba":"### Total Games Sold over the duration of years","e6fb21a0":"### Top 10 Sales","928feeb5":"### Genre game with the most Sales in a year","62476309":"### Most Games published in a year","a6530d11":"### Top 5 games release by year","d8b4112e":"### From the heatmap we can notice that NA_sales, EU_sales, JP_Sales, Other_Sales are highly correlated. So we will only be considering them for our linear regression model","c3401364":"### Genre game with the most releases in a year"}}