{"cell_type":{"24362d37":"code","4011f851":"code","346b02db":"code","054baf33":"code","eff80823":"code","f4a3da2a":"code","69189566":"code","df4dc4a0":"code","2a69545b":"code","3ee6dd23":"code","3775c3cc":"code","5ee97a48":"code","9c95f8b9":"code","8345d6c9":"code","106b3704":"code","ae871d03":"code","1f495a23":"code","ba58931d":"code","e1d767d0":"code","4a421e21":"markdown","7ced5eb4":"markdown","02901009":"markdown","04b945d1":"markdown","5dcb0469":"markdown","c3b67dfb":"markdown","1c57a736":"markdown"},"source":{"24362d37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4011f851":"df = pd.read_csv(\"\/kaggle\/input\/pakistan-super-leaguepsl-ball-by-ball-20162020\/psl_formated.csv\")","346b02db":"boundries_df =df.groupby(['psl_year']).agg(\n    fours = ('is_four','sum'),\n    sixes = ('is_six','sum'),\n    matches = ('match_number','max')\n    \n)\nboundries_df = boundries_df.reset_index()\nboundries_df","054baf33":"ax =boundries_df.plot('psl_year', 'fours', kind='bar')","eff80823":"ax = boundries_df.plot('psl_year', 'sixes', kind='bar')","f4a3da2a":"boundries_df['fours_per_match'] = boundries_df['fours']\/boundries_df['matches']\nboundries_df['six_per_match'] = boundries_df['sixes']\/boundries_df['matches']","69189566":"ax =boundries_df.plot('psl_year', 'fours_per_match', kind='bar')","df4dc4a0":"ax = boundries_df.plot('psl_year', 'six_per_match', kind='bar')","2a69545b":"wickets = df['wicket_text'].value_counts()\nwicket_dict = dict(wickets)\ndel_keys = []\nothers = 0\nfor key, value in wicket_dict.items():\n    if value <100:\n        others = others+value\n        del_keys.append(key)\nfor del_key in del_keys:\n    del(wicket_dict[del_key])\nwicket_dict['others']= others\nwicket_dict","3ee6dd23":"plt.bar(*zip(*wicket_dict.items()))","3775c3cc":"teams_df = {'quetta' : df.loc[((df['team_1'] == \"Quetta Gladiators\") & (df['inning'] == 1)) | ((df['team_2'] == \"Quetta Gladiators\") & (df['inning'] == 2))],\n'lahore' : df.loc[((df['team_1'] == \"Lahore Qalandars\") & (df['inning'] == 1)) | ((df['team_2'] == \"Lahore Qalandars\") & (df['inning'] == 2))],\n'islamabad' : df.loc[((df['team_1'] == \"Islamabad United\") & (df['inning'] == 1)) | ((df['team_2'] == \"Islamabad United\") & (df['inning'] == 2))],\n'peshawar' : df.loc[((df['team_1'] == \"Peshawar Zalmi\") & (df['inning'] == 1)) | ((df['team_2'] == \"Peshawar Zalmi\") & (df['inning'] == 2))],\n'multan' : df.loc[((df['team_1'] == \"Multan Sultans\") & (df['inning'] == 1)) | ((df['team_2'] == \"Multan Sultans\") & (df['inning'] == 2))],\n'karachi' : df.loc[((df['team_1'] == \"Karachi Kings\") & (df['inning'] == 1)) | ((df['team_2'] == \"Karachi Kings\") & (df['inning'] == 2))]\n}","5ee97a48":"team_runs = {}\nfor team_name, value in teams_df.items():\n    team_runs[team_name] = value['runs'].sum()\nteam_matches = {}\nfor team_name , value in teams_df.items():\n    team_matches[team_name] = value.groupby(['psl_year', 'match_number']).ngroups\n","9c95f8b9":"plt.bar(*zip(*team_runs.items()))","8345d6c9":"team_runs_per_match ={}\nfor team_name, value in team_runs.items():\n    team_runs_per_match[team_name]= value\/team_matches[team_name]\nplt.bar(*zip(*team_runs_per_match.items()))","106b3704":"team_boundry_runs = {}\nfor team_name, value in teams_df.items():\n    sixes = value['is_six'].sum()\n    fours = value['is_four'].sum()\n    team_boundry_runs[team_name]= (sixes*6)+(fours*4)\n\nboundry_run_percentage = {}\nfor team, runs in team_runs.items():\n    print (f\"{team} scored {(team_boundry_runs[team]\/runs)*100}% runs in boundries\")\n    boundry_run_percentage[team] = (team_boundry_runs[team]\/runs)*100","ae871d03":"plt.bar(*zip(*boundry_run_percentage.items()))","1f495a23":"dot_balls_played = {}\ntotal_balls_played = {}\nfor team, value in teams_df.items():\n    dot_balls_played[team]=value[value['runs']==0].shape[0]\n    total_balls_played[team]= value.shape[0]\n\ndot_ball_percentage ={}\nfor team , value in dot_balls_played.items():\n    dot_ball_percentage[team] = (value\/total_balls_played[team])*100\n\nfor team , value in dot_ball_percentage.items():\n    print (f\"Team : {team} played {value}% of dot balls\")","ba58931d":"plt.bar(*zip(*dot_ball_percentage.items()))","e1d767d0":"six_per_team = {}\nfor team, value in teams_df.items():\n    six_per_team[team] = value['is_six'].sum()\n\nsix_per_match ={}\nfor team ,value in six_per_team.items():\n    six_per_match[team] = value\/team_matches[team]\n\nplt.bar(*zip(*six_per_match.items()))","4a421e21":"# Six Hit Per Team","7ced5eb4":"# Team Based Runs\n\n","02901009":"# Wickets","04b945d1":"# Team Based Dataframes\n\n\n","5dcb0469":"# Boundries Count","c3b67dfb":"# Teams based percentage runs in boundries","1c57a736":"# Dot Balls Played"}}