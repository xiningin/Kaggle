{"cell_type":{"eccb9671":"code","44ed0ec6":"code","f430ad6f":"code","6c3bca5b":"code","0e0ade48":"code","b2bdb2f7":"code","2f4cc148":"code","94fc08c4":"code","13e4cfbc":"code","97e6de27":"code","1445feca":"code","a491c3a5":"code","d4a77045":"code","b60e2fc6":"code","f18e9cef":"code","6432a398":"code","17ce2a21":"code","aa087d8a":"code","faa3e384":"code","17d68538":"code","de612cc7":"code","4cb6424d":"code","30242315":"code","00d543c8":"code","c846e090":"code","8fe3f178":"code","95167f0f":"code","a5145cf3":"code","2058ca5b":"code","b1fd80ad":"code","7f488352":"code","9f519d7e":"code","2254c8a6":"code","8deedf46":"code","3d831455":"code","9dad3772":"code","0c2c6772":"code","2fcae06e":"code","6748e8d6":"code","00c53e10":"code","2edb8797":"code","c395f98d":"code","525922ba":"code","3580ce31":"code","354d10d1":"code","8965daf3":"code","129bbec0":"code","69497c4a":"code","d19c30b2":"code","7197ca59":"code","dffb66a7":"code","700e94a1":"code","f194f421":"code","4d95e4e8":"markdown","6872eac5":"markdown","8cc19599":"markdown","6ae56e00":"markdown","0c2ae4e9":"markdown","45ed6b3f":"markdown","1b58a222":"markdown","29f5404a":"markdown","64d62b84":"markdown","93a91dc7":"markdown","a1387162":"markdown","f00613ae":"markdown","cd8d74d3":"markdown","d802ddc0":"markdown","8cbe8ae5":"markdown","40d86d92":"markdown","1884ff5c":"markdown","1bc08d06":"markdown"},"source":{"eccb9671":"# Matplotlib config\n%matplotlib inline\n%config InlineBackend.figure_formats = ['svg']\n%config InlineBackend.rc = {'figure.figsize': (5.0, 4.0)}\n\nimport pandas as pd\nimport numpy as np\nimport csv\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import plot_tree\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix, accuracy_score, recall_score, precision_score, plot_confusion_matrix\nfrom sklearn.model_selection import GridSearchCV, RepeatedKFold, train_test_split\n\nfrom sklearn.svm import SVC\nfrom sklearn.svm import LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.decomposition import PCA\nimport statsmodels.api as sm\n\ninput_file = \"..\/input\/breast-cancer-wisconsin-data\/data.csv\"\ndf = pd.read_csv(input_file, header = 0, sep = ',', quotechar='\"')\ndf.head()","44ed0ec6":"df.columns","f430ad6f":"%matplotlib\ndf.info()\ndf.describe()","6c3bca5b":"#Delete the \"id\" column\ndf.drop('id', axis = 1, inplace = True)","0e0ade48":"df['diagnosis'].unique()","b2bdb2f7":"#\"diagnosis\" column in True\/False\ndf['diagnosis'] = df['diagnosis'] == \"M\"\ndf['diagnosis_ord'] = pd.Categorical(df.diagnosis).codes","2f4cc148":"#Grouping\nprint('malignant: ' + str(np.mean(df['diagnosis'])))","94fc08c4":"#All columns correlated with the \"diagnosis\"\ndf.corr()[\"diagnosis\"].abs().sort_values(ascending = False)","13e4cfbc":"#Correlation Matrix Graphic\nsns.heatmap(df.corr());","97e6de27":"#Correlation Matrix Table\ndf.corr()","1445feca":"#Attribute choice\nfeatures = ['concave points_worst', 'perimeter_worst', 'radius_worst', \\\n            'concave points_worst', 'area_worst', 'concavity_mean', \\\n            'compactness_mean', 'texture_worst', 'smoothness_worst', \\\n            'symmetry_worst', 'fractal_dimension_worst']\n\nX = df[['concave points_worst', 'perimeter_worst', 'radius_worst', \\\n        'concave points_worst', 'area_worst', 'concavity_mean', \\\n        'compactness_mean', 'texture_worst', 'smoothness_worst', \\\n        'symmetry_worst', 'fractal_dimension_worst']]\n\ny = df['diagnosis']\n\n#y = df['diagnosis_ord']\n\n#train set\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.80, random_state = 42)","a491c3a5":"#Logistic Regression (LgR)\n#Parameter tuning with GridSearchCV and RepeatedKFold\nmodel_lgrgscv = GridSearchCV(LogisticRegression(), param_grid = { \n    \"max_iter\": [1000000],\n    \"class_weight\": [\"balancend\"]\n}, cv = RepeatedKFold())\n\nmodel_lgrgscv.fit(X_train, y_train)\n\nprint('LgR GridSearchCV best model parameter: ' + str(model_lgrgscv.best_params_))\nprint('LgR GridSearchCV best model score: ' + str(model_lgrgscv.best_score_))","d4a77045":"#Train a Logistic Regression\nmodel_lgr = LogisticRegression(class_weight = \"balancend\", max_iter = 1000000)\nmodel_lgr.fit(X_train, y_train)","b60e2fc6":"#Predict\ny_lgr_pred_test = model_lgr.predict(X_test)","f18e9cef":"#Confusion matrix\nplot_confusion_matrix(model_lgr, X_test, y_test, normalize = \"all\")","6432a398":"#Scores\nprint('LgR train score: ' + str(model_lgr.score(X_train, y_train)))\nprint('LgR test score: ' + str(model_lgr.score(X_test, y_test)))","17ce2a21":"#Dimension reduction with Principal Component Analysis (PCA) and than Logistic Regression (LgR)\n#Parameter tuning with GridSearchCV and RepeatedKFold\npca = PCA(n_components = 4)\n\n# pca.fit(X_train)\n# X_train_transformed = pca.transform(X_train)\n\nX_train_transformed = pca.fit_transform(X_train)\n\nmodel_pcalgrgscv = GridSearchCV(LogisticRegression(), param_grid = { \n    \"max_iter\": [1000000]\n}, cv = RepeatedKFold())\n\nmodel_pcalgrgscv.fit(X_train_transformed, y_train)\n\nprint('PCA LgR GridSearchCV best model parameter: ' + str(model_pcalgrgscv.best_params_))\nprint('PCA LgR GridSearchCV best model score: ' + str(model_pcalgrgscv.best_score_))","aa087d8a":"#Train\nmodel_pcalgr= LogisticRegression(class_weight = \"balancend\")\nmodel_pcalgr.fit(X_train_transformed, y_train)","faa3e384":"sns.scatterplot(X_train_transformed[:, 0], X_train_transformed[:, 1], hue = y_train);","17d68538":"#Predict\nX_test_transformed = pca.transform(X_test)\n\ny_pcalgr_test_pred = model_pcalgr.predict(pca.transform(X_test))","de612cc7":"sns.scatterplot(X_test_transformed[:, 0], X_test_transformed[:, 1], hue = y_test);","4cb6424d":"#Confusion matrix\nplot_confusion_matrix(model_pcalgr, X_test_transformed, y_test, normalize = \"all\")","30242315":"#Scores\nprint('PCA LgR train score: ' + str(model_pcalgr.score(X_train_transformed, y_train)))\nprint('PCA LgR test score: ' + str(model_pcalgr.score(X_test_transformed, y_test)))","00d543c8":"#Linear SupportVectorClassifier (LinSVC)\n#Parameter tuning with GridSearchCV and RepeatedKFold\nsc = StandardScaler()\nsc_train = sc.fit(X_train)\n\nX_train_scalar = sc.transform(X_train)\nX_test_scalar = sc.transform(X_test)\n\nmodel_linsvcgscv = GridSearchCV(LinearSVC(), param_grid = {\n    \"C\": [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1], \n    \"max_iter\": [1000000]\n}, cv = RepeatedKFold())\n\nmodel_linsvcgscv.fit(X_train_scalar, y_train)\n\nprint('LinSVC GridSearchCV best model parameter: ' + str(model_linsvcgscv.best_params_))\nprint('LinSVC GridSearchCV best model score: ' + str(model_linsvcgscv.best_score_))","c846e090":"#Train\nmodel_linsvc = LinearSVC(max_iter = 1000000, C = 0.05)\nmodel_linsvc.fit(X_train_scalar, y_train)","8fe3f178":"#Predict\ny_linsvc_test_pred = model_linsvc.predict(X_test_scalar)","95167f0f":"#Confusion matrix \nplot_confusion_matrix(model_linsvc, X_test_scalar, y_test, normalize = \"all\")","a5145cf3":"#Scores\nprint('LinSVC train score: ' + str(model_linsvc.score(X_train_scalar, y_train)))\nprint('LinSVC test score: ' + str(model_linsvc.score(X_test_scalar, y_test)))","2058ca5b":"#RBF SupportVectorClassifier (RBF SVM)\n#Parameter tuning with GridSearchCV and RepeatedKFold\nmodel_rbfsvcgscv = GridSearchCV(SVC(), param_grid = {\n    \"kernel\": [\"rbf\"], \n    \"C\": [15, 20, 25, 30, 35, 40, 45], \n    \"gamma\": [0.0005, 0.001, 0.005, 0.01, 0.05]\n}, cv = RepeatedKFold())\n\nmodel_rbfsvcgscv.fit(X_train_scalar, y_train)\n\nprint('RBF SVC GridSearchCV best model parameter: ' + str(model_rbfsvcgscv.best_params_))\nprint('RBF SVC GridSearchCV best model score: ' + str(model_rbfsvcgscv.best_score_))","b1fd80ad":"#Train\nmodel_rbfsvc = SVC(kernel = \"rbf\", C = 25, gamma = 0.005)\nmodel_rbfsvc.fit(X_train_scalar, y_train)","7f488352":"#Predict\ny_rbfsvc_test_pred = model_rbfsvc.predict(X_test)","9f519d7e":"#Confussion matrix\nplot_confusion_matrix(model_linsvc, X_test_scalar, y_test, normalize = \"all\")","2254c8a6":"#Scores\nprint('RBF SVC train score: ' + str(model_rbfsvc.score(X_train_scalar, y_train)))\nprint('RBF SVC test score: ' + str(model_rbfsvc.score(X_test_scalar, y_test)))","8deedf46":"#DecisionTreeClassifier (DT)\n#Parameter tuning with GridSearchCV and RepeatedKFold\nX_train_dumm = pd.get_dummies(X_train[features])\nX_test_dumm = pd.get_dummies(X_test[features])\n\nmodel_dtgscv = GridSearchCV(DecisionTreeClassifier(), param_grid = {\n    'max_depth': [23, 24, 25, 26, 27, 28, 29, 30, 31, 32],\n    'min_samples_leaf': [2, 3, 4, 5, 6, 7]\n}, cv = RepeatedKFold())\n\nmodel_dtgscv.fit(X_train_dumm, y_train)\n\nprint('DT GridSearchCV best model parameters: ' + str(model_dtgscv.best_params_))\nprint('DT GridSearchCV best model score: ' + str(model_dtgscv.best_score_))","3d831455":"#Train\nmodel_dt = DecisionTreeClassifier(max_depth=28, min_samples_leaf = 5)\nmodel_dt.fit(X_train_dumm, y_train)","9dad3772":"#Predict\ny_dt_test_pred = model_dt.predict(X_train_dumm)","0c2c6772":"#Confusion matrix\nplot_confusion_matrix(model_dt, X_test_dumm, y_test, normalize = \"all\")","2fcae06e":"#Scores\nprint('DT train score: ' + str(model_dt.score(X_train_dumm, y_train)))\nprint('DT test score: ' + str(model_dt.score(X_test_dumm, y_test)))","6748e8d6":"#RandomForestClassifier (RF)\n#Parameter tuning with GridSearchCV and RepeatedKFold\nmodel_rfgscv = GridSearchCV(RandomForestClassifier(), param_grid = {\n    'max_depth': [11, 12, 13, 14, 15],\n    'min_samples_leaf': [1, 5, 10]\n}, cv = RepeatedKFold())\n\nmodel_rfgscv.fit(X_train_dumm, y_train)\n\nprint('RF GridSearchCV best model parameter: ' + str(model_rfgscv.best_params_))\nprint('RF GridSearchCV best model score: ' + str(model_rfgscv.best_score_))","00c53e10":"#Train\nmodel_rf = RandomForestClassifier(n_estimators=100, max_depth=15, min_samples_leaf = 1)\nmodel_rf.fit(X_train_dumm, y_train)","2edb8797":"#Predict\ny_rf_test_pred = model_rf.predict(X_test_dumm)","c395f98d":"#Confusion matrix\nplot_confusion_matrix(model_rf, X_test_dumm, y_test, normalize = \"all\")","525922ba":"#Scores\nprint('RF train score: ' + str(model_rf.score(X_train_dumm, y_train)))\nprint('RF test score: ' + str(model_rf.score(X_test_dumm, y_test)))","3580ce31":"#K-Nearest-Neighbours (KNN)\n#Parameter tuning with GridSearchCV and RepeatedKFold\nmodel_knngscv = GridSearchCV(KNeighborsClassifier(), param_grid = {\n    'n_neighbors': [5, 6, 7, 8, 9, 10, 15, 20, 25, 35, 50, 75],\n    'p': [1, 2], \n    'weights': ['uniform', 'distance']\n}, cv = RepeatedKFold())\n\nmodel_knngscv.fit(X_train_scalar, y_train)\n\nprint('KNN GridSearchCV best model parameter: ' + str(model_knngscv.best_params_))\nprint('KNN GridSearchCV best model score: ' + str(model_knngscv.best_score_))","354d10d1":"#Train\nmodel_knn = KNeighborsClassifier(n_neighbors = 9, p = 1, weights = 'uniform')\nmodel_knn.fit(X_train_scalar, y_train)","8965daf3":"#Predict\ny_knn_test_pred = model_knn.predict(X_test_scalar)","129bbec0":"#Confusion Matrix\nplot_confusion_matrix(model_knn, X_test_scalar, y_test, normalize = \"all\")","69497c4a":"#Scores\nprint('KNN train score: ' + str(model_knn.score(X_train_scalar, y_train)))\nprint('KNN test score: ' + str(model_knn.score(X_test_scalar, y_test)))","d19c30b2":"#Ordinary Least Squares (OLS)\n#Train\nX_train_ols = sm.add_constant(X_train)\nmodel_ols = sm.OLS(y_train, X_train_ols).fit()\n\n#summary\nmodel_ols.summary()","7197ca59":"#Predict\nX_test_ols = sm.add_constant(X_test)\n\ny_ols_train_pred = model_ols.predict(X_train_ols)\ny_ols_test_pred = model_ols.predict(X_test_ols)\n\ny_ols_train_pred = round(y_ols_train_pred)\ny_ols_test_pred = round(y_ols_test_pred)","dffb66a7":"#Confusion matrix\n\n#Train set\nols_train_cm = confusion_matrix(y_train, y_ols_train_pred, normalize = \"all\")\nols_train_score = accuracy_score(y_train, y_ols_train_pred, normalize = \"all\")\n\nprint('Train OLS Confusion Matrix: \\n' + str(ols_train_cm) + '\\n')\n\n#Test set\nols_test_cm = confusion_matrix(y_test, y_ols_test_pred, normalize = \"all\")\nols_test_score = accuracy_score(y_test, y_ols_test_pred, normalize = \"all\")\n\nprint('Test OLS Confusion Matrix: \\n' + str(ols_test_cm))","700e94a1":"#Scores\nprint('OLS train score: ' + str(ols_train_score))\nprint('OLS test score: ' + str(ols_test_score))","f194f421":"#Summary, Scores\nrelevant_metrics_pred = pd.DataFrame({\n    'Model': [ 'Logistic Regression', 'PCA Logistic Regression', 'LinSVC', 'RBFSVC', 'Decision Tree', 'Random Forest', 'K-Nearest-Neighbours', 'OLS'],\n    'Accuracy, A': [model_lgr.score(X_test, y_test), model_pcalgr.score(X_test_transformed, y_test), model_linsvc.score(X_test_scalar, y_test), model_rbfsvc.score(X_test_scalar, y_test), model_dt.score(X_test_dumm, y_test), model_rf.score(X_test_dumm, y_test), model_knn.score(X_test_scalar, y_test), ols_test_score]})\nbest_model_pred =relevant_metrics_pred.sort_values(by='Accuracy, A', ascending=False)\nbest_model_pred","4d95e4e8":"## <a id='LinSVC'>4.3. Linear SupportVectorClassifier (LinSVC) and GridSearchCV<\/a>","6872eac5":"## <a id='RBFSVC'>4.4. RBF SupportVectorClassifier (RBF SVM) and GridSearchCV<\/a>","8cc19599":"# <a id='split'>3. Splitting the data<\/a>","6ae56e00":"# <a id='summary'>5. Summary<\/a>","0c2ae4e9":"## <a id='describe'>2.1. Describing and planning the data<\/a>","45ed6b3f":"# <a id='fit'>4. Building the models<\/a>","1b58a222":"# <a id='read'>1. Reading the data<\/a>","29f5404a":"## <a id='RF'>4.6. RandomForestClassifier (RF) and GridSearchCV<\/a>","64d62b84":"# <a id='understand'>2. Understanding and preparing the data<\/a>","93a91dc7":"## <a id='LgR'>4.1. Logistic Regression (LgR)<\/a>","a1387162":"| Variable orig | not missing values | Type | Ranges\/Values | Describing | Preparing\/Transforming | New Variable | New Ranges\/New Values |\n| :- | --- | :- | :- | :- | :- | :- | :- |\n| id | 569 | int64 | | | delete | | |\n| diagnosis | 569 | object | B\/M | B=benign, M=malignant, Target variable | categories as boolean or numbers | diagnosis_ord | False=0=B, True=1=M |\n| optional |  |  |  |  | normalising | | 0-1 | ","f00613ae":"## <a id='OLS'>4.8. Ordinary Least Squares (OLS)<\/a>","cd8d74d3":"Splitting the data in training and validation sets in new csv files.\n\n| Kaggle set | | Splitted sets |need for |\n| :- | --- | :- | :- |\n| train set | 80% | train set | training and validating the models |\n| test set | 20% | test set | testing the models|","d802ddc0":"## <a id='DT'>4.5. DecisionTreeClassifier (DT) and GridSearchCV<\/a>","8cbe8ae5":"**<center><font size=6>Breast Cancer Wisconsin (Diagnostic)<\/font>\n<\/center>**\n\n**Data Set origin**: https:\/\/www.kaggle.com\/uciml\/breast-cancer-wisconsin-data\n\n**Date**: 08.01.2021\n\n**Table of Contents**\n- <a href='#read'>1. Reading the data<\/a> \n- <a href='#understand'>2. Understanding and preparing the data<\/a>\n    - <a href='#describe'>2.1. Describing and planning the data<\/a>\n    - <a href='#group'>2.2. Preprocessing<\/a>\n- <a href='#split'>3. Splitting the data<\/a>\n- <a href='#fit'>4. Fitting and validating the models<\/a>\n    - <a href='#LgR'>4.1. Logistic Regression (LgR) and GridSearchCV<\/a>\n    - <a href='#PCALgR'>4.2. Principal Component Analysis (PCA) and Logistic Regression (LgR) and GridSearchCV<\/a>\n    - <a href='#LinSVC'>4.3. Linear SupportVectorClassifier (LinSVC) and GridSearchCV<\/a>\n    - <a href='#RBFSVC'>4.4. RBF SupportVectorClassifier (RBF SVC) and GridSearchCV<\/a>\n    - <a href='#DT'>4.5. DecisionTreeClassifier (DT) and GridSearchCV<\/a>\n    - <a href='#RF'>4.6. RandomForestClassifier (RF) and GridSearchCV<\/a>\n    - <a href='#KNN'>4.7. K-Nearest-Neighbours (KNN) and GridSearchCV<\/a>    \n    - <a href='#OLS'>4.8. Ordinary Least Squares Linear Regression (OLS)<\/a>\n- <a href='#summary'>5. Summary<\/a>","40d86d92":"## <a id='group'>2.2. Preprocessing<\/a>","1884ff5c":"## <a id='KNN'>4.7. K-Nearest-Neighbours (KNN) and GridSearchCV<\/a>","1bc08d06":"## <a id='PCALgR'>4.2. Principal Component Analysis and Logistic Regression (PCA LgR)<\/a><\/a>"}}