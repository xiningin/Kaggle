{"cell_type":{"029504b8":"code","63ba095a":"code","10fbae79":"code","ade20d15":"code","c114e4a4":"code","5af8be03":"code","fcaa069f":"code","ae4c708d":"code","55fd070f":"markdown","cd05d275":"markdown","40f9367a":"markdown","b62e6bd4":"markdown","dce4a2a1":"markdown","ac0cc926":"markdown","68132fae":"markdown","8fa059b9":"markdown","40874eea":"markdown","7ad0a6e2":"markdown","634956df":"markdown","a849fd29":"markdown","84202529":"markdown","1b79a19e":"markdown","036a4a29":"markdown","f0e86e9d":"markdown","826f987b":"markdown","a2a8dca4":"markdown"},"source":{"029504b8":"#\u00a0All 8 initialised to 0\ntrain_number_of_passengers = [0,0,0,0,0,0,0,0]\ntrain_money_taken          = [0,0,0,0,0,0,0,0]\n# Initialise constant list for the maximum values for each journey\ntrain_max_seats            = [480,480,480,480,480,480,480,640]","63ba095a":"print(\"Time : seats available\")\nfor i in range(8):\n    seats_available = train_max_seats[i] - train_number_of_passengers[i]\n    print(i+9,\":\",seats_available)","10fbae79":"number_of_passengers = int(input(\"How many people? \"))","ade20d15":"departure_time = int(input(\"What time to depart? [9|11|13|15] \"))\nwhile 1:\n    index = departure_time-9\n    seats_available = train_max_seats[index] - train_number_of_passengers[index]\n    #\u00a0not valid input\n    if not (departure_time == 9 or departure_time == 11 or departure_time == 13 or departure_time == 15):\n        departure_time = int(input(\"Error: Invalid choice of\",departure_time,\"What time to depart? [9|11|13|15] \"))\n    elif seats_available < number_of_passengers:\n        departure_time = int(input(\"Error: Not enough seats available. What time to depart? [9|11|13|15] \"))\n    else:\n        break","c114e4a4":"return_time = int(input(\"What time to return? [10|12|14|16] \"))\nwhile 1:\n    index = departure_time-9\n    seats_available = train_max_seats[index] - train_number_of_passengers[index]\n    #\u00a0not valid input\n    if not (return_time == 10 or return_time == 12 or return_time == 14 or return_time == 16):\n        return_time = int(input(\"Error: Invalid choice of\",departure_time,\"What time to return? [10|12|14|16] \"))\n    elif seats_available < number_of_passengers:\n        return_time = int(input(\"Error: Not enough seats available. What time to return? [10|12|14|16] \"))\n    else:\n        break","5af8be03":"price = number_of_passengers * 50\nif 10 <= number_of_passengers < 20: price = price - 50\nelif 20 <= number_of_passengers < 30: price = price - 100\nelif 30 <= number_of_passengers < 40: price = price - 150\nelif 40 <= number_of_passengers < 50: price = price - 200\nelif 50 <= number_of_passengers < 60: price = price - 250\nelif 60 <= number_of_passengers < 70: price = price - 300\nelif 70 <= number_of_passengers < 80: price = price - 350\nelif number_of_passengers == 80: price = price - 400","fcaa069f":"departure_index = departure_time - 9\nreturn_index = return_time - 9\n\ntrain_number_of_passengers[departure_index] += number_of_passengers\ntrain_money_taken[departure_index] += price \/ 2\n\ntrain_number_of_passengers[return_index] += number_of_passengers\ntrain_money_taken[return_index] += price \/ 2","ae4c708d":"total_number_of_passengers = 0\ntotal_money_taken = 0\nmax_passengers = 0\nmax_passenger_journey = 0\nprint(\"Time : n\u00ba of passengers : money\")\nfor i in range(8):\n    passengers = train_number_of_passengers[i]\n    money_taken = train_money_taken[i]\n    print(i+9,':',passengers,':',money_taken)\n    total_number_of_passengers += passengers\n    total_money_taken += money_taken\n    if passengers >= max_passengers:\n        max_passengers = passengers\n        max_passenger_journey = i\nprint(\"Total passengers:\",total_number_of_passengers, \"total money:\",total_money_taken)\nprint(\"Train journey with most passengers was at\",max_passenger_journey+9,\" o'clock with\",max_passengers,\"passengers.\")","55fd070f":"__Step 3:__ Return times.\n\nLiterally the same as departure but for 10,12,14,16\n\nPython:","cd05d275":"__Step 1:__ get the input for number of people.\n\nNo validation for this, as it is simply an integer and we are not required to account for abnormal data.\n\nPython:","40f9367a":"__Step 0:__ Printing screen\n\nUse loop","b62e6bd4":"```\ntotalNumberOfPassengers <- 0\ntotalMoneyTaken <- 0\nmaxPassengers = 0\nmaxPassengerJourney = 0\nPRINT \"Time : n\u00ba of passengers : money\"\nFOR i <- 1 TO 8\n    passengers <- trainNumberOfPassengers[i]\n    moneyTaken <- trainMoneyTaken[i]\n    PRINT i+8,':',passengers,':',moneyTaken\n    totalNumberOfPassengers <- totalNumberOfPassengers + passengers\n    totalMoneyTaken <- totalMoneyTaken + moneyTaken\n    if passengers >= maxPassengers:\n        maxPassengers <- passengers\n        maxPassengerJourney <- i\nNEXT i\nPRINT \"Total passengers:\",totalNumberOfPassengers, \"total money:\",totalMoneyTaken\nPRINT \"Train journey with most passengers was at\",maxPassengerJourney+8,\" o'clock with\",maxPassengers,\"passengers.\"\n```","dce4a2a1":"# Year 11 Computer science mock exam: prerelease material.\n\n## Intro\n\nAn interactive guide for the paper given for the computer science igcse mocks by David Raibaut.\nI tried to keep this at the bare minimum required using only what is taught by the book to keep it simple.\n\n## The problem\n\nTrain goes up and down the mountain.\n\nIt goes up at 9, then down at 10, then up at 11 and so on until 16\n\nEach train has 6 coaches with 80 seats, so a total of 640 seats.\n\nThe last train has has 8 coaches, as most people return later, so a total of 480 seats.\n\nPassengers book their departure and return journey. The return journey can be on any train as long as it is after the departure.\n\nPassengers will pay 25$ per journey, with groups between 10 and 80 inclusive getting every tenth ticket free.\n\nA large screen has the train times with the number of tickets available (with the word 'Closed' if there are no seats left)\n\n## Task 1\n_\"Initialise suitable data structures to total passengers and money for each train journey.\"_\n\nWe know there are 8 train journeys (4 up and 4 down) so we can use an array to store the total for each one.\nIn python:","ac0cc926":"Pseudocode (note indeces in pseudocode will go from 1-8, so we subtract only 8):\n```\nPRINT \"What time to return? [10|12|14|16] \"\nREAD departureTime\n\nindex <- departureTime - 8\nseatsAvailable <- trainMaxSeats[index] - trainNumberOfPassengers[index]\n\nWHILE NOT (departureTime = 10 OR departureTime = 12 OR departureTime = 14 OR departureTime = 16) OR seatsAvailable < numberOfPassengers DO\n\n    index <- departureTime - 8\n    seatsAvailable <- trainMaxSeats[index] - trainNumberOfPassengers[index]\n\n    IF NOT (departureTime = 10 OR departureTime = 12 OR departureTime = 14 OR departureTime = 16)\n        THEN\n            PRINT \"Error: Departure time has to be positive integer of 10,12,14,16\"\n    ELSE\n        IF seatsAvailable < numberOfPassengers THEN\n            PRINT \"Error: Not enough seats available.\"\n        ENDIF\n    ENDIF\n    \n    PRINT \"What time to depart? [10|12|14|16] \"\n    READ departureTime\nENDWHILE\n```","68132fae":"Pseudocode:\n```\nPRINT \"Number of people \"\nREAD numberOfPassengers\n```","8fa059b9":"## Task 3\n\n_\"Display train, number of passengers and money taken. Calculate total passengers and money. Find largest journey\"_","40874eea":"```\nprice <- numberOfPassengers * 50\nIF 10 <= numberOfPassengers < 20 THEN price <- price - 50\nIF 20 <= numberOfPassengers < 30 THEN price <- price - 100\nIF 30 <= numberOfPassengers < 40 THEN price <- price - 150\nIF 40 <= numberOfPassengers < 50 THEN price <- price - 200\nIF 50 <= numberOfPassengers < 60 THEN price <- price - 250\nIF 60 <= numberOfPassengers < 70 THEN price <- price - 300\nIF 70 <= numberOfPassengers < 80 THEN price <- price - 350\nIF numberOfPassengers == 80      THEN price <- price - 400\n```","7ad0a6e2":"Pseudocode (note indeces in pseudocode will go from 1-8, so we subtract only 8):\n```\nPRINT \"What time to depart? [9|11|13|15] \"\nREAD departureTime\n\nindex <- departureTime - 8\nseatsAvailable <- trainMaxSeats[index] - trainNumberOfPassengers[index]\n\nWHILE NOT (departureTime = 9 OR departureTime = 11 OR departureTime = 13 OR departureTime = 15) OR seatsAvailable < numberOfPassengers DO\n\n    index <- departureTime - 8\n    seatsAvailable <- trainMaxSeats[index] - trainNumberOfPassengers[index]\n\n    IF NOT (departureTime = 9 OR departureTime = 11 OR departureTime = 13 OR departureTime = 15)\n        THEN\n            PRINT \"Error: Departure time has to be positive integer of 9,11,13,15\"\n    ELSE\n        IF seatsAvailable < numberOfPassengers THEN\n            PRINT \"Error: Not enough seats available.\"\n        ENDIF\n    ENDIF\n    \n    PRINT \"What time to depart? [9|11|13|15] \"\n    READ departureTime\nENDWHILE\n```","634956df":"__Step 2:__ Getting the departure time.\n\nValidation check conditions:\n- Positive integer\n- Between 9 and 15 inclusive\n- Odd number (look at departure times)\n- Enough seats available\n\nWe can sum this up by just checking whether the input is equal to any of 9,11,13,15\n\nSeats available is max_number - number of people\n\nAnd we can check the seats if the number of people > seats available\n\nTo get the index in the array, we can just subtract 9, as our array indeces go from 0-7 (len 8) and our times go from 9-16 (including the returns).\n\nPython:","a849fd29":"In pseudocode, it already defaults to 0 (i.e. null), as we define the length:\n```\ntrainNumberOfPassengers[1:8]\ntrainMoneyTaken[1:8]\n\ntrainMaxSeats[1:8]\n\nFOR i <- 1 TO 7\n    trainMaxSeats[i] <- 480\nNEXT i\n\ntrainMaxSeats[8] <- 640\n```","84202529":"__Step 4:__ Price and discounts\n\nTo calculate the price, just multiply group size by 50 (25$ up, 25$ down per person)\n\n_\"For groups between 10 and 80 inclusive, every tenth passenger travels free.\"_\n\n__What a sane human being would do:__\n- First, we check whether the group is between 10 and 80 (10 <= n <= 80)\n- Then, if it is, we calculate the number of people with discount, dividing n by 10, and casting to an int\n- Casting to an int has the effect of flooring (removing anything after the decimal) the number.\n    - I.e. 67 \/ 10 = 6.7 => 6, which is the number of 'tenth people' in 67\n    - This means it is equivalent to the 'a \/\/ b' operator in python, which divides a by b without remainder (i.e. equivalent to a - (a%b) \/ b as a%b returns the remainder - used in pseudocode)\n- Finally, we mutliply this by 50 to get the price discount and subtract that from \n\n__What they expect us to do:__\n\nUse many if\/elif statements to check for every possible range.","1b79a19e":"## Bringing it all together\n\nThere has been one thing ignored throughout: we need to put all of the purchasing code inside of a loop such that multiple people can buy tickets in a day.\n\nTODO: finish this section","036a4a29":"```\nPRINT \"Time: seats availabe\"\nFOR i <- 1 TO 8\n    seatsAvailable <- trainMaxSeats[i] - trainNumberOfPassengers[i]\n    PRINT i+8, \":\", seatsAvailable\nNEXT i\n```","f0e86e9d":"__Step 5:__ Adding to totals\n\nVery simple, access train number of passengers and money taken and add the number of passengers and price at each time (half the price at departure, and half at return). Calculate the index using the departure time variable using methods previously outlined.","826f987b":"```\ndepartureIndex <- departureTime - 8\nreturnIndex <- returnTime - 8\n\ntrainNumberOfPassengers[departureIndex] <- trainNumberOfPassengers[departureIndex] + numberOfPassengers\ntrainMoneyTaken[departureIndex] <- trainMoneyTaken[departureIndex] + price \/ 2\n\ntrainNumberOfPassengers[returnIndex] <- trainNumberOfPassengers[returnIndex] + numberOfPassengers\ntrainMoneyTaken[returnIndex] <- trainMoneyTaken[returnIndex] + price \/ 2\n```","a2a8dca4":"## Task 2\n_\"Purchasing tickets\"_\n\nNote in this task some conditions were done as simply as possible to keep almost everything within the syllabus."}}