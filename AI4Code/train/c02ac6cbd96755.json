{"cell_type":{"6cbf6e06":"code","28c48fe8":"code","09b7ac34":"code","4abaa039":"code","16b5c03e":"code","d214d1d1":"code","88cd58e0":"code","6b822449":"code","ad10c140":"code","c75ded71":"code","a08456a4":"code","d28fd88f":"code","4a6917c5":"code","d3aa7e80":"code","fb8ec29c":"code","7ffda02e":"code","09948cef":"code","53fc6b75":"code","980fc122":"code","7ae1a443":"code","3a94531d":"code","f1418c18":"code","3537e724":"code","94915e6d":"code","17c87c59":"code","15f1632f":"code","cec929b2":"code","4a2921d6":"code","c557f21b":"markdown","4ac26123":"markdown","0a8849be":"markdown"},"source":{"6cbf6e06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\ndir_list=[]\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        dir_list.append(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","28c48fe8":"len(dir_list) # 24335 Total pictures","09b7ac34":"pred_list=[]  # collecting all pred data in same list\n\nfor i in dir_list:\n    if 'seg_pred' in i:\n        pred_list.append(i)\n        \n\n        ","4abaa039":"test_list=[]  # collecting all pred data in same list\n\nfor i in dir_list:\n    if 'seg_test' in i:\n        test_list.append(i)\n        \n        \n        \n        \n        ","16b5c03e":"train_list=[]  # ccollecting all data in same list\n\nfor i in dir_list:\n    if 'seg_train' in i:\n        train_list.append(i)","d214d1d1":"len(train_list)  # 14034 train images","88cd58e0":"len(test_list) #3000 test images","6b822449":"len(pred_list)  # 7301 pred images","ad10c140":"train_label=[]\n\na=0\nb=1\nc=2\nd=3\ne=4\nf=5\n\nfor i in train_list:\n    if 'buildings' in i:\n        train_label.append(a)\n    elif 'forest' in i:\n        train_label.append(b)\n    elif 'glacier' in i:\n        train_label.append(c)\n    elif 'mountain' in i:\n        train_label.append(d)\n    elif 'sea' in i:\n        train_label.append(e)\n    elif 'street' in i :\n        train_label.append(f)\n        \n        ","c75ded71":"test_label=[]\n\na=0\nb=1\nc=2\nd=3\ne=4\nf=5\n\nfor i in test_list:\n    if 'buildings' in i:\n        test_label.append(a)\n    elif 'forest' in i:\n        test_label.append(b)\n    elif 'glacier' in i:\n        test_label.append(c)\n    elif 'mountain' in i:\n        test_label.append(d)\n    elif 'sea' in i:\n        test_label.append(e)\n    elif 'street' in i :\n        test_label.append(f)","a08456a4":"#buildings,street,mountain,glacier,sea,forest","d28fd88f":"df=pd.DataFrame({\"Label_train\":train_label})","4a6917c5":"df2=pd.DataFrame({\"Label_test\":test_label})","d3aa7e80":"import matplotlib.pyplot as plt","fb8ec29c":"import seaborn as sns\n\nplt.figure(figsize=(5,5))\nsns.countplot(\"Label_train\",data=df)\nplt.xlabel(\"Class Distrubition\") # I think class distrubition is balanced","7ffda02e":"plt.figure(figsize=(5,5))\nsns.countplot(\"Label_test\",data=df2)\nplt.xlabel(\"Class Distrubition\") ","09948cef":"\n\nplt.figure(figsize=(16,16))\n\nfor i in range(25):\n    \n    img = cv2.imread(train_list[i])\n    plt.subplot(5,5,(i%25)+1)\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(img)\n    plt.xlabel(\n        \"Class:\"+str(df['Label_train'].iloc[i])\n    )\nplt.show()","53fc6b75":"plt.figure(figsize=(16,16)) \n\nfor i in range(3000,3025):\n    \n    img = cv2.imread(train_list[i])\n    plt.subplot(5,5,(i%25)+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(img)\n    plt.xlabel(\n        \"Class:\"+str(df['Label_train'].iloc[i])\n    )\nplt.show()","980fc122":"plt.figure(figsize=(16,16)) \n\nfor i in range(5000,5025):\n    \n    img = cv2.imread(train_list[i])\n    plt.subplot(5,5,(i%25)+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(img)\n    plt.xlabel(\n        \"Class:\"+str(df['Label_train'].iloc[i])\n    )\nplt.show()","7ae1a443":"plt.figure(figsize=(16,16)) \n\nfor i in range(9000,9025):\n    \n    img = cv2.imread(train_list[i])\n    plt.subplot(5,5,(i%25)+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(img)\n    plt.xlabel(\n        \"Class:\"+str(df['Label_train'].iloc[i])\n    )\nplt.show()","3a94531d":"plt.figure(figsize=(16,16)) \n\nfor i in range(10025,10050):\n    \n    img = cv2.imread(train_list[i])\n    plt.subplot(5,5,(i%25)+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(img)\n    plt.xlabel(\n        \"Class:\"+str(df['Label_train'].iloc[i])\n    )\nplt.show()","f1418c18":"plt.figure(figsize=(16,16)) \n\nfor i in range(12000,12025):\n    \n    img = cv2.imread(train_list[i])\n    plt.subplot(5,5,(i%25)+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(img)\n    plt.xlabel(\n        \"Class:\"+str(df['Label_train'].iloc[i])\n    )\nplt.show()","3537e724":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndir_train='\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/'\n\ndir_test='\/kaggle\/input\/intel-image-classification\/seg_test\/seg_test\/'\n\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255)\n\n\ntrain_generator = train_datagen.flow_from_directory(\n        dir_train, \n        target_size=(150,150), \n        batch_size=32,\n        class_mode='categorical')\n\n\n\nvalidation_generator = validation_datagen.flow_from_directory(\n        dir_test,  \n        target_size=(150, 150), \n        batch_size=8,\n        class_mode='categorical')\n\n\n\n\n","94915e6d":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, BatchNormalization\n\nmodel=tf.keras.models.Sequential([\ntf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(150, 150,3)),\ntf.keras.layers.MaxPooling2D(2, 2),\ntf.keras.layers.Dropout(0.25),\n    \ntf.keras.layers.Conv2D(32, (3,3), activation='relu'),\nBatchNormalization(),\ntf.keras.layers.MaxPooling2D(2,2),\ntf.keras.layers.Dropout(0.25),\n\ntf.keras.layers.Conv2D(64, (3,3), activation='relu'),\nBatchNormalization(),\ntf.keras.layers.MaxPooling2D(2,2),\ntf.keras.layers.Dropout(0.25),\n    \n#tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n#tf.keras.layers.MaxPooling2D(2,2),\n\n    \ntf.keras.layers.Flatten(),\ntf.keras.layers.Dropout(0.50),\ntf.keras.layers.Dense(128, activation='relu'),\nBatchNormalization(),\ntf.keras.layers.Dropout(0.50),\ntf.keras.layers.Dense(256),\ntf.keras.layers.Dense(6, activation='softmax')])\n\nmodel.summary()","17c87c59":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self,epoch,logs={}):\n        if(logs.get(['acc']>0.99)):\n            print(\"Reached desired acc\")\n            self.model.stop_training=True\n            \ncallback=myCallback()","15f1632f":"from tensorflow.keras.optimizers import RMSprop\n\nmodel.compile(optimizer = RMSprop(lr=0.001),\n              loss = 'categorical_crossentropy',\n              metrics=['accuracy'])\n\nModel = model.fit_generator(\n      train_generator,\n      steps_per_epoch=439,  \n      epochs=30,\n      verbose=1,\n      validation_data = validation_generator,\n      validation_steps=8\n)","cec929b2":"History=Model","4a2921d6":"%matplotlib inline\nacc = History.history['accuracy']\nval_acc = History.history['val_accuracy']\nloss = History.history['loss']\nval_loss = History.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","c557f21b":"## CNN ","4ac26123":"### CNN  \u0130mage Classification","0a8849be":"'buildings' -> 0\n\n'forest' -> 1\n\n'glacier' -> 2\n\n'mountain' -> 3\n\n'sea' -> 4\n\n'street' -> 5 "}}