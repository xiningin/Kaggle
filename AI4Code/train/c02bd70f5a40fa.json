{"cell_type":{"d2720110":"code","cb316dc6":"code","eafa1aea":"code","8639e185":"code","bcc9c0c0":"code","3b6d34ba":"code","3890b0b0":"code","c902f253":"code","94d44e87":"code","9f01a0e5":"code","275429d5":"code","acd87052":"code","3090fc0f":"code","b1ab5ae4":"code","2ed49e99":"code","e07971de":"code","72070014":"code","209d9c22":"code","15fc49f0":"code","84b44511":"code","c015a2c5":"code","7c8071c8":"code","9e6a7b78":"code","0ace4608":"code","28cb4a48":"code","17b42224":"code","b823174c":"code","3b68ca73":"code","31151d0a":"code","d5e39191":"code","3edd98e1":"code","d705c8d4":"code","46714db4":"code","d3d8b4c7":"code","aa3be6be":"code","37e7fbac":"code","4aa3936a":"code","ab14d417":"code","d9a55b76":"code","281552e3":"markdown","eb726fff":"markdown","f393c4cf":"markdown","c831f057":"markdown","9653db66":"markdown","3e3f847e":"markdown","b1b8e7d1":"markdown","d96ecba2":"markdown","0c425e03":"markdown","aff2bace":"markdown"},"source":{"d2720110":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","cb316dc6":"from fastai.vision import *\nfrom fastai.metrics import error_rate","eafa1aea":"bs = 16","8639e185":"import os\nfrom pathlib import Path\nprint(os.listdir(\"..\/input\"))\nwork_p = Path(\".\/\")\np = Path(\"..\/input\")","bcc9c0c0":"len(os.listdir(p\/\"test\"))","3b6d34ba":"# folders = [\"train\", \"test\"]\n# for c in classes:\n#     print(c)\n#     verify_images(p\/c, delete=False, max_size=500)","3890b0b0":"train_df = pd.read_csv(p\/\"train.csv\")#.sample(frac=0.3, random_state=2)\nprint(train_df.shape); train_df.head()","c902f253":"labels_count = train_df.Id.value_counts()\ntrain_names = train_df.index.values","94d44e87":"for idx,row in train_df.iterrows():\n    if labels_count[row['Id']] < 2:\n        for i in row*math.ceil((2 - labels_count[row['Id']])\/labels_count[row['Id']]):\n            train_df = train_df.append(row,ignore_index=True)\n\nprint(train_df.shape)\n# plt.hist(train_df.Id.value_counts()[1:],bins=100,range=[0,100]);\n# plt.hist(train_df.Id.value_counts()[1:],bins=100,range=[0,100]);","9f01a0e5":"name = f'res50-full-train'","275429d5":"np.random.seed(2)\ndata = (ImageDataBunch.from_df(work_p, train_df, folder=p\/\"train\", test=p\/\"test\", valid_pct=0.20, ds_tfms=get_transforms(), size=224, bs=bs)\n        .normalize(imagenet_stats))","acd87052":"data.show_batch(rows=3, figsize=(7,6))","3090fc0f":"learn = create_cnn(data, models.resnet50, metrics=error_rate)\nlearn.fit_one_cycle(2, max_lr=slice(6.31e-07, 3e-07))","b1ab5ae4":"learn = create_cnn(data, models.resnet50, metrics=error_rate)","2ed49e99":"learn.fit_one_cycle(2, max_lr=3e-03)","e07971de":"learn = create_cnn(data, models.resnet50, metrics=error_rate)\nlearn.fit_one_cycle(2, max_lr=0.5e-02)","72070014":"learn.recorder.plot_losses()","209d9c22":"learn = create_cnn(data, models.resnet50, metrics=error_rate)\nlearn.fit_one_cycle(2, max_lr=slice(5e-02, 2.5e-02))","15fc49f0":"# learn.save(\"stage-1\")","84b44511":"# learn.unfreeze()","c015a2c5":"# learn.fit_one_cycle(1)","7c8071c8":"# learn.load('stage-1');","9e6a7b78":"learn.lr_find()","0ace4608":"learn.recorder.plot()","28cb4a48":"# data_bigger = ImageDataBunch.from_df(work_p, train_df, folder=p\/\"train\", valid_pct=0.20, ds_tfms=get_transforms(), size=448, bs=bs).normalize(imagenet_stats)\n# learn_bigger = create_cnn(data_bigger, models.resnet34, metrics=error_rate)","17b42224":"# learn_bigger.fit_one_cycle(4)","b823174c":"# data_bigger.show_batch(rows=3, figsize=(7,6))","3b68ca73":"# interp = ClassificationInterpretation.from_learner(learn)\n# losses,idxs = interp.top_losses()\n# len(data.valid_ds)==len(losses)==len(idxs)","31151d0a":"# interp.plot_top_losses(9, figsize=(15,11))","d5e39191":"# learn.unfreeze()","3edd98e1":"# learn.fit_one_cycle(1)","d705c8d4":"# learn.load('stage-1');","46714db4":"# learn.lr_find()","d3d8b4c7":"# learn.recorder.plot()","aa3be6be":"# learn.unfreeze()\n# learn.fit_one_cycle(2, max_lr=slice(1e-5,1e-4))","37e7fbac":"preds, _ = learn.get_preds(DatasetType.Test)","4aa3936a":"preds = torch.cat((preds, torch.ones_like(preds[:, :1])), 1)","ab14d417":"def top_5_pred_labels(preds, classes):\n    top_5 = np.argsort(preds.numpy())[:, ::-1][:, :5]\n    labels = []\n    for i in range(top_5.shape[0]):\n        labels.append(' '.join([classes[idx] for idx in top_5[i]]))\n    return labels\n\ndef create_submission(preds, data, name, classes=None):\n    if not classes: classes = data.classes\n    sub = pd.DataFrame({'Image': [path.name for path in data.test_ds.x.items]})\n    sub['Id'] = top_5_pred_labels(preds, classes)\n    sub.to_csv(f'{name}.csv', index=False)","d9a55b76":"create_submission(preds, learn.data, name, learn.data.classes)","281552e3":"This one won't work since we need write permissions. To fix, images should be moved to {work_p}","eb726fff":"I have no idea how to properly create a validation set, so I just duplicate every single occurence","f393c4cf":"# Unfreezing, fine-tuning, and learning rates","c831f057":"# Interpretation","9653db66":"## Data pipeline","3e3f847e":"# Training","b1b8e7d1":"Looks like default transformation is not alright. Let's give it a go anyway.","d96ecba2":"I don't know how to use any advanced fastai techniques, so I just went as simple as possible in this notebook.","0c425e03":"# Submission","aff2bace":"Bigger size doesn't fit the kernel"}}