{"cell_type":{"4479f115":"code","90dcc20d":"code","f3e137b7":"code","befb08ad":"code","bedb36a2":"code","b7c2d41c":"code","1732537c":"code","9da6450e":"code","99500679":"code","e23f4a3c":"code","686049c0":"code","c94f8283":"markdown","059855a1":"markdown"},"source":{"4479f115":"import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport numpy as np\nimport csv\nfrom collections import OrderedDict","90dcc20d":"def get_team_players( url ):\n\n    soup = BeautifulSoup(requests.get(url).text, 'html.parser')\n    table = soup.find('table')\n\n    links = []\n    for tr in table.findAll(\"tr\"):\n        for each in tr.findAll(\"td\"):\n          if not each.text.startswith('Matches'): continue\n          try:\n              link = each.find('a')['href']\n              links.append(link)\n          except:\n              pass \n\n    df = pd.read_html( url, header=1)[0]\n    df = df[ (df.Player != 'Opponent Total') & (df.Player != 'Squad Total') ]\n\n    assert len(links) == len(df)\n    df['Matches'] = links\n    return df","f3e137b7":"##### Test \n# get_team_players( 'https:\/\/fbref.com\/\/en\/squads\/6c8b07df\/2020-2021\/Elche-Stats' )","befb08ad":"def get_league_tables( url ):\n\n    squad = pd.read_html( url, header=1 )[0]\n    opponent = pd.read_html( url, header=1 )[1]\n\n    oppNames =  OrderedDict()\n    for x in opponent.columns.to_list(): oppNames[x] = 'Opp '+x\n    opponent.rename( columns=oppNames, inplace=True )\n\n    soup = BeautifulSoup(requests.get(url).text, 'html.parser')\n    table = soup.find('table')\n\n    links = []\n    for tr in table.findAll(\"tr\"):\n        for each in tr.findAll(\"th\", {'data-stat':'squad'}):\n          try:\n              link = each.find('a')['href']\n              links.append(link)\n          except:\n              pass \n\n    squad['page'] = links\n    df = pd.concat( [squad, opponent], axis=1 )\n    return df","bedb36a2":"##### test\n# get_league_tables('https:\/\/fbref.com\/en\/comps\/12\/10731\/stats\/2020-2021-La-Liga-Stats')","b7c2d41c":"def get_teamInfoPerLeague( url ):\n\n    df = pd.read_html( url )[1]\n\n    soup = BeautifulSoup(requests.get(url).text, 'html.parser')\n    table = soup.findAll('table')[1]\n\n    links = []\n    for tr in table.findAll(\"tr\"):\n        for each in tr.findAll(\"td\", {'data-stat':'match_report'}):\n          try:\n              link = each.find('a')['href']\n              links.append(link)\n          except:\n              links.append('')\n\n    df['Team'] = url.split('\/')[-1].split('-')[0]\n    df['Match Report'] = links\n    return df","1732537c":"###### test\n# get_teamInfoPerLeague( 'https:\/\/fbref.com\/en\/squads\/8d6fd021\/2020-2021\/Alaves-Stats' )","9da6450e":"def access_perMatchInfo_tables( url, ind ):\n    df = pd.read_html( url )[ind]\n    dfColumns = df.columns.map('{0[0]}|{0[1]}'.format) \n    dfColumns = [ x.split('|')[1] if x.startswith('Unnamed') else x for x in dfColumns ]\n    df = df.droplevel(level=0, axis=1)\n    df.columns = dfColumns\n    return df\n\ndef access_perMatchInfo_summary( url, ind ):\n    simpleTable = pd.read_html( url )[ind] \n    tmpTeamName = simpleTable.columns.to_list()[0]\n    simpleTable['Team'] = np.array( [tmpTeamName.split(' ')[0]]*len(simpleTable) )\n    simpleTable['Formation'] = np.array( [tmpTeamName.split(' ')[1].replace('(','').replace(')','')]*len(simpleTable) )\n    simpleTable.rename( columns={ simpleTable.columns.to_list()[0]: 'Shirt', simpleTable.columns.to_list()[1] : 'Player'}, inplace=True )    \n    return simpleTable\n\ndef get_perMatchInfo_players( url, players='all' ):\n\n    tmpColumns = ['Player', '#', 'Nation', 'Pos', 'Age', 'Min']\n    simpleTableHome = access_perMatchInfo_summary( url, 0 )\n    simpleTableAway = access_perMatchInfo_summary( url, 1 )\n\n    if players.startswith('goalkeepers'):\n        gkHome = pd.merge( simpleTableHome, access_perMatchInfo_tables( url, 9 ), how='inner', on='Player')\n        gkAway = pd.merge( simpleTableAway, access_perMatchInfo_tables( url, 16 ), how='inner', on='Player')\n        finalTable = pd.concat( [gkHome, gkAway], ignore_index=True )\n\n    else:\n        finalTableHome = pd.merge( simpleTableHome, access_perMatchInfo_tables( url, 3 ), on='Player')\n        for itab in range(4,9):\n            finalTableHome = pd.merge( finalTableHome, access_perMatchInfo_tables( url, itab ), on=tmpColumns)\n\n        finalTableAway = pd.merge( simpleTableAway, access_perMatchInfo_tables( url, 10 ), on='Player')\n        for itab in range(11,16):\n            finalTableAway = pd.merge( finalTableAway, access_perMatchInfo_tables( url, itab ), on=tmpColumns)\n\n        finalTable = pd.concat( [finalTableHome, finalTableAway], ignore_index=True )\n\n    return finalTable\n\ndef get_perMatchInfo_shots( url ):\n    df = access_perMatchInfo_tables( url, 17 )\n    df.dropna( how='all', inplace=True )\n    return df","99500679":"######### test\n# get_perMatchInfo_players( 'https:\/\/fbref.com\/en\/matches\/8c3b5490\/Alaves-Real-Betis-September-13-2020-La-Liga', players='goalkeepers' )\n# get_perMatchInfo_players( 'https:\/\/fbref.com\/en\/matches\/8c3b5490\/Alaves-Real-Betis-September-13-2020-La-Liga' )","e23f4a3c":"def createDataframes( url, label ):\n    season = get_league_tables(url)\n    season.to_csv( f'datasetTable{label}.csv', index=False )\n\n    teamInfoSeason = []\n    for teamPage in season['page'].to_list():\n        teamInfoSeason.append( get_teamInfoPerLeague( 'https:\/\/fbref.com\/'+teamPage ) )\n\n    dfTeamInfoSeason = pd.concat( teamInfoSeason, ignore_index=True )\n    dfTeamInfoSeason.to_csv( f'datasetTeamInfo{label}.csv', index=False )\n\n    matchInfoSeason = []\n    matchGkInfoSeason = []\n    matchShotsInfoSeason = []\n    for matchPage in dfTeamInfoSeason['Match Report'].to_list():\n        if label in matchPage:\n            matchInfoSeason.append( get_perMatchInfo_players( 'https:\/\/fbref.com\/'+matchPage ) )\n            matchGkInfoSeason.append( get_perMatchInfo_players( 'https:\/\/fbref.com\/'+matchPage, players='goalkeepers' ) )\n            matchShotsInfoSeason.append( get_perMatchInfo_shots( 'https:\/\/fbref.com\/'+matchPage ) )\n\n    dfMatchInfoSeason = pd.concat( matchInfoSeason, ignore_index=True )\n    dfMatchInfoSeason.to_csv( f'datasetMatchInfo{label}.csv', index=False )\n    dfMatchGkInfoSeason = pd.concat( matchGkInfoSeason, ignore_index=True )\n    dfMatchGkInfoSeason.to_csv( f'datasetMatchGkInfo{label}.csv', index=False )\n    dfMatchShotsInfoSeason = pd.concat( matchShotsInfoSeason, ignore_index=True )\n    dfMatchShotsInfoSeason.to_csv( f'datasetMatchShotsInfo{label}.csv', index=False )","686049c0":"# createDataframes( 'https:\/\/fbref.com\/en\/comps\/12\/10731\/stats\/2020-2021-La-Liga-Stats', '2020-La-Liga' )","c94f8283":"To extract all the information for the season, uncomment the next cell. Beware that it can take around 2 hours. ","059855a1":"Here are some functions to scrap information from the football reference website."}}