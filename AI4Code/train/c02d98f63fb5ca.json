{"cell_type":{"ab3cd206":"code","56029efe":"code","fc8e17c3":"code","39f3ead8":"code","7a843292":"code","ec9c959f":"code","90260813":"code","decbd19a":"code","9e5df625":"code","7714556f":"code","9db3ec62":"code","0d1cc7aa":"code","e3ecbd6d":"code","1759233f":"code","e3962266":"code","e69e1bcf":"code","5c9ca980":"markdown","ff121fa7":"markdown","0e7fbb9e":"markdown","d256fe06":"markdown","00e0daac":"markdown","0d459f8a":"markdown"},"source":{"ab3cd206":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","56029efe":"read_data = pd.read_csv('..\/input\/train.csv')","fc8e17c3":"read_data.head()","39f3ead8":"from sklearn.model_selection import train_test_split","7a843292":"train_data, test_data = train_test_split(read_data, random_state = 55,\n                                        shuffle = True)","ec9c959f":"train_data.columns","90260813":"#create a target (i.e, the column you want to predict) for model\nY_train = train_data.Survived\n#drop label from X\ntrain_data.drop('Survived', axis = 1, inplace = True)\nY_val = test_data.Survived\ntest_data.drop('Survived', axis = 1, inplace = True)","decbd19a":"train_data.columns","9e5df625":"train_data.loc[Y_train == 1].Age.mean()","7714556f":"train_data.loc[Y_train == 0].Age.mean()","9db3ec62":"train_data.loc[Y_train == 1].Fare.mean()","0d1cc7aa":"train_data.loc[Y_train == 0].Fare.mean()","e3ecbd6d":"def classify(X):\n    '''\n    a baseline (a really basic) function that \n    ries to predict whether a person survived \n    or not based on their fare\n    \n    Arguements:\n        X: a DataFrame\n    \n    Returns:\n        a pandas Series (kind of like an array) where\n        each element represents \n        0 survived\n        1 not survived\n    '''\n    if(X.Fare < 35):\n        return 0\n    else:\n        return 1","1759233f":"Y_preds = test_data.apply(classify, axis = 1)","e3962266":"from sklearn.metrics import accuracy_score","e69e1bcf":"accuracy_score(Y_val, Y_preds)","5c9ca980":"You can now see a change in the columns","ff121fa7":"Displaying the first 5 rows of the DataFrame","0e7fbb9e":"The above line of code shows us that the people survived have paid more for thier ticket on average","d256fe06":"Reading data from .csv into a pandas DataFrame","00e0daac":"Splitting data data into `train_data` and `test_data`. Where `train_data` is the data your ML model learns on and `test_data` is where your evaluate how well your algorithm predicts on unseen data.","0d459f8a":"Shows the accuracy of our baseline algorithm on the `test_data`. "}}