{"cell_type":{"3cea37dc":"code","730d0e15":"code","c08e0484":"code","508ab9ad":"code","67065a5e":"code","42aa160a":"code","15a96993":"code","0a29a0ff":"code","e7bed241":"code","7752cb9f":"code","b6c4b470":"code","24d449fe":"code","81648d96":"code","70463d1b":"code","1d19aad9":"code","66ffac8b":"code","3d19ae3e":"code","c110b4fc":"code","792596a1":"code","fe6b923a":"code","d5c3903c":"code","30e58982":"code","f3a60f61":"code","4d42d416":"code","466b3614":"code","c9ffdea5":"code","05cf8779":"code","5fac0a27":"code","acf52f6c":"code","0c0dbf0d":"code","5da1537d":"code","0f02d27e":"code","250bfb8f":"code","95586075":"code","a2497e12":"code","c0c25c22":"code","47aebe3e":"code","700e36d0":"code","89d82257":"code","fd72faee":"code","cb9049ca":"code","7c2270dc":"code","dcfc5021":"code","50e92015":"code","162f20c7":"markdown","6cf5b544":"markdown","4f3d97ac":"markdown","c7ef2f72":"markdown"},"source":{"3cea37dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n","730d0e15":"import matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nimport sklearn as sk\nimport seaborn as sns\nimport datetime\nfrom sklearn.utils import resample\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix","c08e0484":"#Reading the data\nrdo_1 = pd.read_csv(\"\/kaggle\/input\/crime-data-in-brazil\/RDO_1.csv\", low_memory = False)\nrdo_2 = pd.read_csv(\"\/kaggle\/input\/crime-data-in-brazil\/RDO_2.csv\", low_memory = False)\nrdo_3 = pd.read_csv(\"\/kaggle\/input\/crime-data-in-brazil\/RDO_3.csv\", low_memory = False)\n\n#dropping extra column\nrdo_1.drop('Unnamed: 30', axis = 1, inplace = True)\nrdo_2.drop('Unnamed: 30', axis = 1, inplace = True)\nrdo_3.drop('Unnamed: 30', axis = 1, inplace = True)\n\nprint (rdo_1.shape)\nprint (rdo_1.columns)\nprint (rdo_1.dtypes)\n\nprint (rdo_2.shape)\nprint (rdo_2.columns)\nprint (rdo_2.dtypes)\n\nprint (rdo_3.shape)\nprint (rdo_3.columns)\nprint (rdo_3.dtypes)\n","508ab9ad":"frames = [rdo_1, rdo_2, rdo_3]\n\ndata = pd.concat(frames, ignore_index=True)\n\nprint (data.shape)\nprint (data.columns)\nprint (data.dtypes)","67065a5e":"data['IDADE_PESSOA'] = pd.to_numeric(data['IDADE_PESSOA'], errors='coerce')\ndata['NUMERO_LOGRADOURO'] = pd.to_numeric(data['NUMERO_LOGRADOURO'], errors='coerce')\n\ndata['LONGITUDE'] = pd.to_numeric(data['LONGITUDE'], errors='coerce')\ndata['LATITUDE'] = pd.to_numeric(data['LATITUDE'], errors='coerce')\n\ndata['DATA_OCORRENCIA_BO'] = pd.to_datetime(data['DATA_OCORRENCIA_BO'], errors='coerce')\ndata['HORA_OCORRENCIA_BO'] = pd.to_datetime(data['HORA_OCORRENCIA_BO'], format='%H:%M', errors='coerce').dt.time\n\ndata['CIDADE'] = pd.Categorical(data['CIDADE'])\ndata['NOME_SECCIONAL_CIRC'] = pd.Categorical(data['NOME_SECCIONAL_CIRC'])\ndata['NOME_DELEGACIA_CIRC'] = pd.Categorical(data['NOME_DELEGACIA_CIRC'])\ndata['DESCR_TIPO_BO'] = pd.Categorical(data['DESCR_TIPO_BO'])\ndata['RUBRICA'] = pd.Categorical(data['RUBRICA'])\ndata['DESCR_CONDUTA'] = pd.Categorical(data['DESCR_CONDUTA'])\ndata['DESDOBRAMENTO'] = pd.Categorical(data['DESDOBRAMENTO'])\ndata['DESCR_TIPOLOCAL'] = pd.Categorical(data['DESCR_TIPOLOCAL'])\ndata['DESCR_SUBTIPOLOCAL'] = pd.Categorical(data['DESCR_SUBTIPOLOCAL'])\ndata['LOGRADOURO'] = pd.Categorical(data['LOGRADOURO'])\ndata['DESCR_TIPO_PESSOA'] = pd.Categorical(data['DESCR_TIPO_PESSOA'])\ndata['SEXO_PESSOA'] = pd.Categorical(data['SEXO_PESSOA'])\ndata['COR_CUTIS'] = pd.Categorical(data['COR_CUTIS'])","42aa160a":"print (data.dtypes)","15a96993":"print(data['FLAG_VITIMA_FATAL'].unique())\nprint(data['FLAG_STATUS'].unique())\nprint(data['SEXO_PESSOA'].unique())\nprint(data['COR_CUTIS'].unique())","0a29a0ff":"bool = (data['FLAG_VITIMA_FATAL'] != 'N') & (data['FLAG_VITIMA_FATAL'] != 'S')\ndata['FLAG_VITIMA_FATAL'].loc[bool] = np.NaN\nprint(data['FLAG_VITIMA_FATAL'].value_counts())\n\nbool = (data['SEXO_PESSOA'] != 'M') & (data['SEXO_PESSOA'] != 'F')\ndata['SEXO_PESSOA'].loc[bool] = np.NaN\nprint(data['SEXO_PESSOA'].value_counts())\n\n#'Preta' 'Parda' 'Branca' 'Amarela' 'Outros' 'Vermelha'\ndata['COR_CUTIS'] =data['COR_CUTIS'].str.strip()\nbool = (data['COR_CUTIS'] != 'Preta') & (data['COR_CUTIS'] != 'Parda') & (data['COR_CUTIS'] != 'Branca') & (data['COR_CUTIS'] != 'Amarela') & (data['COR_CUTIS'] != 'Outros') & (data['COR_CUTIS'] != 'Vermelha')\ndata['COR_CUTIS'].loc[bool] = np.NaN\nprint(data['COR_CUTIS'].value_counts())","e7bed241":"plt.bar(data['ANO_BO'].unique(), data['ANO_BO'].value_counts(), align='center', alpha=0.5)\nplt.ylabel('Quantity')\nplt.title('Quantity of cases per year')\n\nplt.show()","7752cb9f":"bool_logradouro = data['LOGRADOURO'].notnull()\n\ndata = data[bool_logradouro]\n\nle = preprocessing.LabelEncoder()\ndata['CAT_LOGRADOURO'] = le.fit_transform(data['LOGRADOURO'])\n\nprint (data.shape)\nprint (data.columns)","b6c4b470":"#missing values\ndata['FLAG_VITIMA_FATAL'].value_counts()\n\nbool_vitimas = data['FLAG_VITIMA_FATAL'].notnull()\n\nvitimas = data[bool_vitimas]\n\nprint(data.shape)\nprint(vitimas.shape)\n\nbool_values = vitimas['IDADE_PESSOA'].notnull()\n\nscatter = vitimas[bool_values]\n\nplt.scatter(scatter['CAT_LOGRADOURO'], scatter['IDADE_PESSOA'])\nplt.xlabel('Logradouro')\nplt.ylabel('Idade')\nplt.show()","24d449fe":"bool_values = vitimas['LATITUDE'].notnull()\nscatter = vitimas[bool_values]\nbool_values = scatter['LONGITUDE'].notnull()\nscatter = scatter[bool_values]\n\nplt.scatter(scatter['LATITUDE'], scatter['LONGITUDE'])\nplt.xlabel('Latitude')\nplt.ylabel('Longitude')\nplt.show()","81648d96":"bool_values = data['COR_CUTIS'].notnull()\n\nbar = data[bool_values]\nbar = pd.DataFrame(bar['COR_CUTIS'].value_counts())\nbar['COR'] = bar.index\n\nplt.bar(bar['COR'], bar['COR_CUTIS'], align='center', alpha=0.5)\nplt.ylabel('Quantity')\nplt.title('Quantity of cases per skin color')\n\nplt.show()","70463d1b":"bool_values = data['COR_CUTIS'].notnull()\nscatter = data[bool_values]\n\nplt.scatter(scatter['CAT_LOGRADOURO'], scatter['COR_CUTIS'])\nplt.xlabel('Logradouro')\nplt.ylabel('Cor da Pele')\nplt.show()","1d19aad9":"print(data['IDADE_PESSOA'].max())\nprint(data['IDADE_PESSOA'].min())\n\nbool = (data['IDADE_PESSOA'] > 100) | (data['IDADE_PESSOA'] < 10)\ndata['IDADE_PESSOA'].loc[bool] = np.NaN\ndata['IDADE_PESSOA'].value_counts()","66ffac8b":"bool_values = data['IDADE_PESSOA'].notnull()\n\nbox = data[bool_values]\n\nfig1, ax1 = plt.subplots()\nax1.set_title('Idade')\nax1.boxplot(box['IDADE_PESSOA'])","3d19ae3e":"dd=pd.melt(box,id_vars=['COR_CUTIS'],value_vars=['IDADE_PESSOA'])\nsns.boxplot(x='COR_CUTIS',y='value',data=dd)","c110b4fc":"bool_values = data['HORA_OCORRENCIA_BO'].notnull()\n\nbar = data[bool_values]\n\nlist = pd.Series.tolist(bar['HORA_OCORRENCIA_BO'])\n\nnew_list = []\nfor item in list:\n    new_list.append(item.hour)\n    \nplot = pd.DataFrame(new_list, columns = ['QTD'])\n\nplot = pd.DataFrame(plot['QTD'].value_counts())\n\nplot['HORA'] = plot.index\n\nplt.bar(plot['HORA'], plot['QTD'], align='center', alpha=0.5)\nplt.ylabel('Quantidade')\nplt.title('Quantidade de ocorr\u00eancias por hora')\n\nplt.show()","792596a1":"#Quantidade por m\u00eas\n\nbool_values = data['DATA_OCORRENCIA_BO'].notnull()\n\nbar = data[bool_values]\n\nlist = pd.Series.tolist(bar['DATA_OCORRENCIA_BO'])\n\nnew_list = []\nfor item in list:\n    new_list.append(item.month)\n    \nplot = pd.DataFrame(new_list, columns = ['QTD'])\n\nplot = pd.DataFrame(plot['QTD'].value_counts())\n\nplot['MES'] = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']\n\nplt.bar(plot['MES'], plot['QTD'], align='center', alpha=0.5)\nplt.ylabel('Quantidade')\nplt.title('Quantidade de ocorr\u00eancias por m\u00eas')\n\nplt.show()","fe6b923a":"#varia\u00e7\u00e3o mensal por ano\n\nbool_values = data['DATA_OCORRENCIA_BO'].notnull()\n\nbar = data[bool_values]\n\nbar = pd.DataFrame(bar['DATA_OCORRENCIA_BO'].value_counts())\nbar['DATA'] = bar.index\nbar['DATA'] = pd.to_datetime(bar['DATA'], errors='coerce')\nbar['ATRASO'] = bar['DATA'].apply (lambda x: (x - x.now()).days)\n\nbar.reset_index(drop=True, inplace=True)\n\nplt.bar(bar['ATRASO'], bar['DATA_OCORRENCIA_BO'], align='center', alpha=0.5)\nplt.ylabel('Quantidade')\nplt.title('varia\u00e7\u00e3o mensal por ano')\n\nplt.show()","d5c3903c":"data.columns","30e58982":"#quantidade de vitimas fatais por cor de pele\n#quantidade de vitimas fatais por hora\n#quantidade de vitimas fatais por idade\n#quantidade de vitimas fatais por sexo\n#quantidade de vitimas fatais por municipio","f3a60f61":"bool_values = data['FLAG_VITIMA_FATAL'].notnull()\n\nvitima = data[bool_values]\n\nprint(vitima.shape)\nprint(vitima['FLAG_VITIMA_FATAL'].value_counts())","4d42d416":"#dropping useless columns\n#['ID_DELEGACIA', 'NOME_DEPARTAMENTO', 'NOME_SECCIONAL', 'NOME_DELEGACIA',\n#       'CIDADE', 'ANO_BO', 'NUM_BO', 'NOME_DEPARTAMENTO_CIRC',\n#       'NOME_SECCIONAL_CIRC', 'NOME_DELEGACIA_CIRC', 'NOME_MUNICIPIO_CIRC',\n#       'DESCR_TIPO_BO', 'DATA_OCORRENCIA_BO', 'HORA_OCORRENCIA_BO',\n#       'DATAHORA_COMUNICACAO_BO', 'FLAG_STATUS', 'RUBRICA', 'DESCR_CONDUTA',\n#       'DESDOBRAMENTO', 'DESCR_TIPOLOCAL', 'DESCR_SUBTIPOLOCAL', 'LOGRADOURO',\n#       'NUMERO_LOGRADOURO', 'LATITUDE', 'LONGITUDE', 'DESCR_TIPO_PESSOA',\n#       'FLAG_VITIMA_FATAL', 'SEXO_PESSOA', 'IDADE_PESSOA', 'COR_CUTIS']\nvitima.drop('ID_DELEGACIA', axis = 1, inplace = True)\nvitima.drop('NOME_DEPARTAMENTO', axis = 1, inplace = True)\nvitima.drop('NOME_SECCIONAL', axis = 1, inplace = True)\nvitima.drop('NOME_DELEGACIA', axis = 1, inplace = True)\nvitima.drop('NUM_BO', axis = 1, inplace = True)\nvitima.drop('NOME_DEPARTAMENTO_CIRC', axis = 1, inplace = True)\nvitima.drop('NOME_MUNICIPIO_CIRC', axis = 1, inplace = True)\nvitima.drop('DATAHORA_COMUNICACAO_BO', axis = 1, inplace = True)\nvitima.drop('NUMERO_LOGRADOURO', axis = 1, inplace = True)\nvitima.drop('CAT_LOGRADOURO', axis = 1, inplace = True)","466b3614":"#one-hot encoding categorical variables\n\ndmCidade = pd.get_dummies(vitima['CIDADE'])\ndmNomeSceccional = pd.get_dummies(vitima['NOME_SECCIONAL_CIRC'])\ndmNomeDelegacia = pd.get_dummies(vitima['NOME_DELEGACIA_CIRC'])\ndmDescBO = pd.get_dummies(vitima['DESCR_TIPO_BO'])\ndmRubrica = pd.get_dummies(vitima['RUBRICA'])\ndmConduta = pd.get_dummies(vitima['DESCR_CONDUTA'])\ndmDesdobramento = pd.get_dummies(vitima['DESDOBRAMENTO'])\ndmTipoLocal = pd.get_dummies(vitima['DESCR_TIPOLOCAL'])\ndmSubTipoLocal = pd.get_dummies(vitima['DESCR_SUBTIPOLOCAL'])\ndmTipoPessoa = pd.get_dummies(vitima['DESCR_TIPO_PESSOA'])\ndmSexoPessoa = pd.get_dummies(vitima['SEXO_PESSOA'])\ndmCor = pd.get_dummies(vitima['COR_CUTIS'])","c9ffdea5":"print(dmCidade.shape)\nprint(dmNomeSceccional.shape)\nprint(dmNomeDelegacia.shape)\nprint(dmDescBO.shape)\nprint(dmRubrica.shape)\nprint(dmConduta.shape)\nprint(dmDesdobramento.shape)\nprint(dmTipoLocal.shape)\nprint(dmSubTipoLocal.shape)\nprint(dmTipoPessoa.shape)\nprint(dmSexoPessoa.shape)\nprint(dmCor.shape)","05cf8779":"vitima = pd.concat([vitima, dmCidade, dmNomeSceccional, dmDescBO, dmRubrica, dmConduta, dmDesdobramento, \n                    dmTipoLocal, dmTipoPessoa, dmSexoPessoa, dmCor], axis=1)","5fac0a27":"vitima.drop('CIDADE', axis = 1, inplace = True)\nvitima.drop('NOME_SECCIONAL_CIRC', axis = 1, inplace = True)\nvitima.drop('NOME_DELEGACIA_CIRC', axis = 1, inplace = True)\nvitima.drop('DESCR_TIPO_BO', axis = 1, inplace = True)\nvitima.drop('RUBRICA', axis = 1, inplace = True)\nvitima.drop('DESCR_CONDUTA', axis = 1, inplace = True)\nvitima.drop('DESDOBRAMENTO', axis = 1, inplace = True)\nvitima.drop('DESCR_TIPOLOCAL', axis = 1, inplace = True)\nvitima.drop('DESCR_SUBTIPOLOCAL', axis = 1, inplace = True)\nvitima.drop('LOGRADOURO', axis = 1, inplace = True)\nvitima.drop('DESCR_TIPO_PESSOA', axis = 1, inplace = True)\nvitima.drop('SEXO_PESSOA', axis = 1, inplace = True)\nvitima.drop('COR_CUTIS', axis = 1, inplace = True)","acf52f6c":"print(vitima.shape)\nvitima.head(5)","0c0dbf0d":"enc = preprocessing.OrdinalEncoder()\n\nvitima['FLAG_STATUS'] = enc.fit_transform(vitima['FLAG_STATUS'].values.reshape(-1, 1))\nvitima['FLAG_VITIMA_FATAL'] = enc.fit_transform(vitima['FLAG_VITIMA_FATAL'].values.reshape(-1, 1))","5da1537d":"#'ANO_BO', 'DATA_OCORRENCIA_BO', 'HORA_OCORRENCIA_BO', 'FLAG_STATUS', 'LATITUDE', 'LONGITUDE', 'FLAG_VITIMA_FATAL', 'IDADE_PESSOA'\nprint(vitima['ANO_BO'].isnull().value_counts())\nprint(vitima['DATA_OCORRENCIA_BO'].isnull().value_counts())\nprint(vitima['HORA_OCORRENCIA_BO'].isnull().value_counts())\nprint(vitima['FLAG_STATUS'].isnull().value_counts())\nprint(vitima['LATITUDE'].isnull().value_counts())\nprint(vitima['LONGITUDE'].isnull().value_counts())\nprint(vitima['FLAG_VITIMA_FATAL'].isnull().value_counts())\nprint(vitima['IDADE_PESSOA'].isnull().value_counts())","0f02d27e":"bool_values = vitima['HORA_OCORRENCIA_BO'].notnull()\n\nvitima = vitima[bool_values]\n\nbool_values = vitima['LATITUDE'].notnull()\n\nvitima = vitima[bool_values]\n\nbool_values = vitima['IDADE_PESSOA'].notnull()\n\nvitima = vitima[bool_values]","250bfb8f":"vitima.reset_index(inplace=True, drop = True)\n\nlist = pd.Series.tolist(vitima['DATA_OCORRENCIA_BO'])\n\nmonths = []\ndays = []\nfor item in list:\n    months.append(item.month)\n    days.append(item.day)\n\nlist = pd.Series.tolist(vitima['HORA_OCORRENCIA_BO'])\n\nhours = []\nfor item in list:\n    hours.append(item.hour)\n\nd = {'MES': months, 'DIA': days, 'HORA': hours}\ndf = pd.DataFrame(d)\n\nvitima = pd.concat([vitima,df], axis = 1, sort=False)\n\nvitima.drop('DATA_OCORRENCIA_BO', axis = 1, inplace = True)\nvitima.drop('HORA_OCORRENCIA_BO', axis = 1, inplace = True)","95586075":"print(vitima.columns)\nvitima['FLAG_VITIMA_FATAL'].value_counts()","a2497e12":"y = vitima['FLAG_VITIMA_FATAL']\nX = vitima.drop('FLAG_VITIMA_FATAL', axis = 1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","c0c25c22":"#Downsampling majority class\n\ntrain = pd.concat([X_train, y_train], axis = 1)\n\nvitima_majority = train[train['FLAG_VITIMA_FATAL']==0]\nvitima_minority = train[train['FLAG_VITIMA_FATAL']==1]\n\n\nvitima_majority_downsampled = resample(vitima_majority, replace=False, n_samples=3581, random_state=100)\n \nvitima_downsampled = pd.concat([vitima_majority_downsampled, vitima_minority])\n \nprint(vitima_downsampled['FLAG_VITIMA_FATAL'].value_counts())\n\ny_train = vitima_downsampled['FLAG_VITIMA_FATAL']\nX_train = vitima_downsampled.drop('FLAG_VITIMA_FATAL', axis = 1)","47aebe3e":"#kNN\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn_model = KNeighborsClassifier(n_neighbors=100)\n\nknn_model.fit(X_train,y_train)\n\ny_pred = knn_model.predict(X_test)\nprint(\"kNN Accuracy:\",metrics.accuracy_score(y_test, y_pred))\ncm = confusion_matrix(y_test, y_pred, labels = [0,1])\nprint(\"     Predito\")\nprint(\"Real\", cm[0][0], cm[0][1])\nprint(\"     \", cm[1][0], cm[1][1])\n#false negative rate (FNR)\nprint(\"False Negative Rate:\",cm[1][0]\/(cm[1][0]+cm[1][1]))","700e36d0":"#Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\nlog_reg_model = LogisticRegression()\n\nlog_reg_model.fit(X_train,y_train)\n\ny_pred = log_reg_model.predict(X_test)\nprint(\"Logistic Regression Accuracy:\",metrics.accuracy_score(y_test, y_pred))\ncm = confusion_matrix(y_test, y_pred, labels = [0,1])\nprint(\"     Predito\")\nprint(\"Real\", cm[0][0], cm[0][1])\nprint(\"     \", cm[1][0], cm[1][1])\n#false negative rate (FNR)\nprint(\"False Negative Rate:\",cm[1][0]\/(cm[1][0]+cm[1][1]))","89d82257":"#LDA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\n\nlda_model = LDA(n_components=1)\n\nlda_model.fit(X_train, y_train)\n\ny_pred = lda_model.predict(X_test)\nprint(\"LDA Accuracy:\",metrics.accuracy_score(y_test, y_pred))\ncm = confusion_matrix(y_test, y_pred, labels = [0,1])\nprint(\"     Predito\")\nprint(\"Real\", cm[0][0], cm[0][1])\nprint(\"     \", cm[1][0], cm[1][1])\n#false negative rate (FNR)\nprint(\"False Negative Rate:\",cm[1][0]\/(cm[1][0]+cm[1][1]))","fd72faee":"#Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\n\nnb_model = GaussianNB()\n\nnb_model.fit(X_train, y_train)\n\ny_pred = nb_model.predict(X_test)\nprint(\"Naive Bayes Accuracy:\",metrics.accuracy_score(y_test, y_pred))\ncm = confusion_matrix(y_test, y_pred, labels = [0,1])\nprint(\"     Predito\")\nprint(\"Real\", cm[0][0], cm[0][1])\nprint(\"     \", cm[1][0], cm[1][1])\n#false negative rate (FNR)\nprint(\"False Negative Rate:\",cm[1][0]\/(cm[1][0]+cm[1][1]))","cb9049ca":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\n\ndt_model = DecisionTreeClassifier()\n\ndt_model.fit(X_train,y_train)\n\ny_pred = dt_model.predict(X_test)\nprint(\"Decision Tree Accuracy:\",metrics.accuracy_score(y_test, y_pred))\ncm = confusion_matrix(y_test, y_pred, labels = [0,1])\nprint(\"     Predito\")\nprint(\"Real\", cm[0][0], cm[0][1])\nprint(\"     \", cm[1][0], cm[1][1])\n#false negative rate (FNR)\nprint(\"False Negative Rate:\",cm[1][0]\/(cm[1][0]+cm[1][1]))","7c2270dc":"#Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier(n_estimators =100, random_state = 100)\n\nrf_model.fit(X_train,y_train)\n\ny_pred = rf_model.predict(X_test)\nprint(\"Random Forest Accuracy:\",metrics.accuracy_score(y_test, y_pred))\ncm = confusion_matrix(y_test, y_pred, labels = [0,1])\nprint(\"     Predito\")\nprint(\"Real\", cm[0][0], cm[0][1])\nprint(\"     \", cm[1][0], cm[1][1])\n#false negative rate (FNR)\nprint(\"False Negative Rate:\",cm[1][0]\/(cm[1][0]+cm[1][1]))\n","dcfc5021":"#SVM\nfrom sklearn import svm\n\nsvm_model = svm.SVC(kernel='linear')\n\nsvm_model.fit(X_train,y_train)\n\ny_pred = svm_model.predict(X_test)\nprint(\"SVM Accuracy:\",metrics.accuracy_score(y_test, y_pred))\ncm = confusion_matrix(y_test, y_pred, labels = [0,1])\nprint(\"     Predito\")\nprint(\"Real\", cm[0][0], cm[0][1])\nprint(\"     \", cm[1][0], cm[1][1])\n#false negative rate (FNR)\nprint(\"False Negative Rate:\",cm[1][0]\/(cm[1][0]+cm[1][1]))\n","50e92015":"#Neural Network\nfrom sklearn.neural_network import MLPClassifier\n\nnn_model = MLPClassifier(hidden_layer_sizes=(30,30,30), random_state = 100)\n\nnn_model.fit(X_train,y_train)\n\ny_pred = nn_model.predict(X_test)\nprint(\"Neural Network Accuracy:\",metrics.accuracy_score(y_test, y_pred))\ncm = confusion_matrix(y_test, y_pred, labels = [0,1])\nprint(\"     Predito\")\nprint(\"Real\", cm[0][0], cm[0][1])\nprint(\"     \", cm[1][0], cm[1][1])\n#false negative rate (FNR)\nprint(\"False Negative Rate:\",cm[1][0]\/(cm[1][0]+cm[1][1]))","162f20c7":"# 1. Cleaning of the Data","6cf5b544":"Machine learning models to train, considering the target variable as flag_vitima_fatal:\n\nkNN\n\nLogistic Regression\n\nLDA\n\nNaive Bayes\n\nDecision Tree\n\nRandom Forest\n\nSVM\n\nNeural Network","4f3d97ac":"# 2. Exploring the Data","c7ef2f72":"Target variable: fatal victim. We want to understand which cases leads to a fatal victim"}}