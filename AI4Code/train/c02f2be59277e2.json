{"cell_type":{"440f41fd":"code","0f1c674c":"code","60b1e705":"code","f8c19d59":"code","0aec5e88":"code","3cd932cb":"code","ab5ec143":"code","35d61e0e":"code","7aa157de":"code","324ba170":"code","ee668220":"code","86597991":"code","9f2788e3":"code","f2f981a4":"code","eb9b71db":"code","c7fa7d76":"code","5229f62c":"code","67d4f9a0":"markdown","b9aca8ca":"markdown","838bda15":"markdown","d827e53e":"markdown","7af1485d":"markdown","d399093f":"markdown","ee8691a0":"markdown","96f42c28":"markdown","add8bced":"markdown","713fa106":"markdown","f7125200":"markdown","053a0d66":"markdown","defa542d":"markdown","ed01aa3b":"markdown","7f14cde6":"markdown","ef535747":"markdown","1fcfa4d0":"markdown","ffd44dfd":"markdown","1bf327c3":"markdown","29079c62":"markdown","5c6e6a35":"markdown"},"source":{"440f41fd":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n!pip install calplot\n!pip install calmap\nimport calmap\nimport calplot\nimport matplotlib.pyplot as plt\nfrom IPython.display import clear_output\n\n%matplotlib inline\nclear_output()\n\n\n\ngames_df = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/games.csv')\nplayers_df = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv')\nplays_df = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\nteams_df = pd.read_csv('..\/input\/nfl-team-names\/teams.csv')\npositions_df = pd.read_csv('..\/input\/nfl-team-names\/positions.csv')","0f1c674c":"df = games_df['gameDate'].value_counts().reset_index().copy()\ndf.columns = ['date', 'games']\ndf.sort_values(['games'], inplace = True, ascending = False)\n\nfig = px.bar(df,\n             x='date',\n             y=\"games\", \n             color = \"games\",\n             title='Number of Games on each Date',\n             height=400,\n             width=800,\n             color_continuous_scale=px.colors.sequential.Viridis_r\n)\nfig.update_layout(title_x=0.5, xaxis_title = 'Dates', yaxis_title = '#games' )\nfig.update_xaxes(type='category', tickangle = 60 )\nfig.show()","60b1e705":"game_date = pd.to_datetime(games_df['gameDate']).value_counts()\n# game_date = pd.Series(game_date.values, index= game_date.index)\nplt.figure()\ncalplot.calplot(game_date, cmap='YlGn', figsize=(15.,3.5))\nplt.title('Game Played Over time')\nclear_output()","f8c19d59":"df = games_df['gameTimeEastern'].value_counts().reset_index()\ndf.columns = ['time', 'games']\ndf.sort_values(['games'], ascending = True, inplace = True)\n\nfig = px.bar(\n    df, \n    y='time', \n    x=\"games\", \n    orientation='h', \n    color = \"games\",\n    title='Games Played in Time of Day', \n    height=400, \n    width=800,\n    color_continuous_scale=px.colors.sequential.Viridis_r\n)\nfig.update_layout(title_x = 0.5, xaxis_title = '#games')\nfig.show()","0aec5e88":"fig = go.Figure(data=[go.Pie(labels=df['time'], values=df['games'], hole=.5)])\nfig.update_layout(title = 'Game Play Time Propotions', title_x = 0.5)\nfig.show()","3cd932cb":"df = games_df.groupby(['week']).count()['gameId'].copy()\ndf = pd.DataFrame({'week': df.index, 'games': df.values})\nfig = px.bar(df, x='week', y = 'games', color= 'games', color_continuous_scale=px.colors.sequential.Viridis_r)\nfig.update_xaxes(type='category')\nfig.update_layout(title = 'Number of Gemes Played Weekly', title_x = 0.5, xaxis_title = 'Weeks ->', yaxis_title = '#games')\nfig.show()","ab5ec143":"df = games_df['homeTeamAbbr'].value_counts().copy()\ndf = pd.DataFrame({'homeTeamAbbr': df.index, 'games': df.values })\ndf.sort_values(['homeTeamAbbr'], inplace = True)\ndf.reset_index(inplace = True, drop = True)\n\nteam_names = teams_df.set_index('short').to_dict()['long']\n\n\nfig = px.bar(df.replace(team_names), \n             x='homeTeamAbbr',\n             y= 'games',\n             color = 'games',\n             title='Home Games for Each Team',\n#              height=400,\n#              width=800,\n             color_continuous_scale=px.colors.sequential.Viridis_r\n)\nfig.update_layout(title_x=0.5, xaxis_title = 'Home Teams', yaxis_title = '#games' )\nfig.update_xaxes(tickangle = 60)\nfig.show()\n","35d61e0e":"# Height conversion function\ndef height_convert(x):\n    if len(x)>2:\n        [ft, inch] = x.split('-')\n        return int(ft)*12 + int(inch)\n    else:\n        return int(x)\n\nplayers_df['height'] = players_df.apply(lambda x: height_convert(x.height), 1)\n# Convert all the dates to one single format\nplayers_df['birthDate'] = pd.to_datetime(players_df.birthDate)\nplayers_df.head(5)","7aa157de":"df = players_df['position'].value_counts()\ndf = pd.DataFrame({'position': df.index, 'count': df.values})\ndf.sort_values(['count'], inplace = True, ascending = True)\npositions_map = positions_df.set_index('short').to_dict()['long']\n\nfig = px.bar(df.replace(positions_map),\n             y='position', \n             x=\"count\",\n             color = 'count',\n             orientation='h', \n             title='Number of Players at Different Positions',\n             height=600,\n             width=800)\nfig.update_layout(title_x = 0.5, xaxis_title = 'Position', yaxis_title = 'Player Counts')\nfig.show()","324ba170":"df = players_df['collegeName'].value_counts().reset_index().copy()\ndf.columns = ['college', 'players']\ndf.sort_values('players', ascending= True, inplace = True)\n\nfig = px.bar(df.tail(30), \n    y='college', \n    x=\"players\", \n    orientation='h',\n    color = \"players\",\n    title='Top 30 colleges by number of players',\n    height=900,\n    width=800\n)\nfig.update_layout(title_x = 0.5, xaxis_title = 'Player Count', yaxis_title = 'College Name')\nfig.show()","ee668220":"fig = px.box(players_df.replace(positions_map) , y=\"height\", color=\"position\", title=\"Height Distribution by Player Position\", width = 1000)\nfig.update_layout(title_x = 0.5, xaxis_title = 'Player Position', yaxis_title = 'Height Distrubution')\nfig.show()","86597991":"df = players_df.groupby(['position']).mean()['weight'].copy()\ndf = pd.DataFrame({'position': df.index, 'weight': df.values})\ndf.sort_values(['weight'], inplace = True, ascending = False)\n\npositions_map = positions_df.set_index('short').to_dict()['long']\n\n\nfig = px.bar(df.replace(positions_map), \n             x='position',\n             y= 'weight',\n             color = 'weight',\n             title='Average Weight of The Players by Position',\n#              height=400,\n             width=800,\n             color_continuous_scale=px.colors.sequential.Viridis_r\n)\nfig.update_layout(title_x=0.5, xaxis_title = 'Player Position', yaxis_title = 'Average Weight' )\nfig.update_xaxes(tickangle = 60)\n# fig.update_yaxes(type='category')\nfig.show()","9f2788e3":"fig = px.box(players_df.replace(positions_map) , y=\"weight\", color=\"position\", title=\"Weight Distribution by Player Position\", width = 1000)\nfig.update_layout(title_x = 0.5, xaxis_title = 'Player Position', yaxis_title = 'Weight Distrubution')\nfig.show()","f2f981a4":"df = plays_df['possessionTeam'].value_counts().reset_index()\ndf.columns = ['team', 'plays']\ndf = df.sort_values('plays')\n\nfig = px.bar(df.replace(team_names), \n             y='team', \n             x=\"plays\", \n             orientation='h',\n             color = \"plays\",\n             title='Number of Plays for Each Team',\n             height=800,\n             width=800,\n             color_continuous_scale=px.colors.sequential.Viridis\n)\nfig.update_layout(title_x = 0.5, xaxis_title = \"No of Plays\", yaxis_title = \"Teams\")\nfig.show()","eb9b71db":"df = plays_df['playType'].value_counts().reset_index()\ndf.columns = ['type', 'plays']\ndf.sort_values(['plays'], inplace = True, ascending = False)\n\nfig = px.pie(\n    df, \n    names='type', \n    values=\"plays\",  \n    title='Number of plays of every type',\n    height=600,\n    width=600, \n    hole = 0.5\n    \n)\nfig.update_layout(title_x = 0.5)\nfig.show()","c7fa7d76":"df = plays_df['yardlineNumber'].value_counts().reset_index()\ndf.columns = ['yardline', 'plays']\ndf.sort_values('plays', inplace = True)\n\nfig = px.bar(df, \n    x='yardline', \n    y=\"plays\",  \n    color = \"plays\", \n    title='Number of Plays for Every Yard Line',\n    height=600,\n    width=800\n)\nfig.update_layout(title_x = 0.5, xaxis_title = 'Yard Line Number', yaxis_title = 'Number of Plays')\nfig.show()","5229f62c":"df = plays_df['offenseFormation'].value_counts().reset_index()\ndf.columns = ['offenseFormation', 'plays']\ndf = df.sort_values('plays')\n\nfig = px.pie(df, \n             names='offenseFormation',\n             values=\"plays\",  \n             title='Number of Plays for Every Offense Formation Type',\n             height=600,\n             width=600, \n             hole = 0.4)\n\nfig.update_layout(title_x = 0.5)\nfig.show()","67d4f9a0":"The `plays.csv` file contains play-level information from each game. The key variables are gameId and playId\n\n|Column Name | Description |\n|:--|:--|\n|**`gameId:`**| Game identifier, unique (numeric)|\n|**`playId:`** |Play identifier, not unique across games (numeric)|\n| **`playDescription:`** | Description of play (text)|\n| **`quarter:`** |Game quarter (numeric)|\n| **`down:`** |Down (numeric)|\n| **`yardsToGo:`** |Distance needed for a first down (numeric)|\n| **`possessionTeam:`** |Team on offense (text)|\n| **`playType:`** |Outcome of dropback: sack or pass (text)|\n| **`yardlineSide:`** |3-letter team code corresponding to line-of-scrimmage (text)|\n| **`yardlineNumber:`** |Yard line at line-of-scrimmage (numeric)|\n| **`offenseFormation:`** |Formation used by possession team (text)|\n| **`personnelO:`** |Personnel used by offensive team (text)|\n| **`defendersInTheBox:`** |Number of defenders in close proximity to line-of-scrimmage (numeric)|\n| **`numberOfPassRushers:`** |Number of pass rushers (numeric)|\n| **`personnelD:`** |Personnel used by defensive team (text)|\n| **`typeDropback:`** |Dropback categorization of quarterback (text)|\n| **`preSnapHomeScore:`** |Home score prior to the play (numeric)|\n| **`preSnapVisitorScore:`** |Visiting team score prior to the play (numeric)|\n| **`gameClock:`** |Time on clock of play (MM:SS)|\n| **`absoluteYardlineNumber:`**| Distance from end zone for possession team (numeric)|\n| **`penaltyCodes:`** |NFL categorization of the penalties that ocurred on the play. For purposes of this contest, the most important penalties are Defensive Pass Interference (DPI), on a play are separated by a ; (text)|\n| **`penaltyJerseyNumber:`** |Jersey number and team code of the player commiting each penalty. Multiple penalties on a play are separated by a ; (text)|\n| **`passResult:`** |Outcome of the passing play (C: Complete pass, I: Incomplete pass, S: Quarterback sack, IN: Intercepted pass, text)|\n| **`offensePlayResult:`** |Yards gained by the offense, excluding penalty yardage (numeric)|\n| **`playResult:`** |Net yards gained by the offense, including penalty yardage (numeric)|\n| **`epa:`** |Expected points added on the play, relative to the offensive team. Expected points is a metric that estimates the average of every <br>next scoring outcome given the play's down, distance, yardline, and time remaining (numeric)|\n| **`isDefensivePI:`** |An indicator variable for whether or not a DPI penalty ocurred on a given play (TRUE\/FALSE)|","b9aca8ca":"## Players' Height Distribution\nHere is some interesting insight. Usually the heavyweight players are in the defensive positions. ","838bda15":"The two figures above suggests that most of the games were played at 03.00 pm in the afternoon. \n\n\n## Weekly Number of Games Played","d827e53e":"![](https:\/\/miro.medium.com\/max\/2834\/1*85UdCLBSCGMObaXVj1Tf7w.png)\n\nThe 2021 Big Data Bowl data contains **player tracking,** **play,** **game,** and **player level information** for all possible passing **plays during the 2018 regular season.** <font color=\"blue\"> For purposes of this event, passing plays are considered to be ones on a pass was thrown, the quarterback was sacked, or any one of five different penalties was called (defensive pass interference, offensive pass interference, defensive holding, illegal contact, or roughing the passer). <\/font>On each play, linemen (both offensive and defensive) data are not provided. <font color=\"green\"> The focus of this year's contest is on pass coverage. <\/font>\n\n\n<br> Now let us have a introductory look at the given data itself and the gradually we will dig dipper. \n","7af1485d":"## Number of Plays for Every Offense Formation Type","d399093f":"![](https:\/\/cdn.imgbin.com\/5\/12\/13\/imgbin-under-construction-5fUZhLgcZb6DkMJfFGfjZr6zE.jpg)","ee8691a0":"## Number of Home Games for Each Team\nSo we see that except three of the teams, all the other teams played 8 home games throughout the season 2018. ","96f42c28":"## No of Players by Positions","add8bced":"## Players from Different Colleges:","713fa106":"### Preprocessing: \nHere we need to do a bit of pre-processing. The height is given in `inches` in some places and `feet-inches` in some other place. So we convert the whole thing into inches.  Also the date of birth of the players are given in different formats. We will unify them too. ","f7125200":"<a id=\"2\"><\/a>\n<h2 style='background:#900C3F; border:0; color:white'><center>02. Player Data Analysis<center><\/h2> \n\nThe `players.csv` file contains player-level information for each player that participated in any of the tracking data files. The key variable here is `nflId` by which it is possible to get individual traits of each of the players. \n\n|<font color=\"blue\">Column Name <\/font>|<font color=\"blue\"> Description <\/font> |\n|:--|:--|\n|`nflId:` | Player identification number, unique across players (numeric)|\n| `height:`| Player height (text)|\n| `weight:` |Player weight (numeric, `lbs`)|\n| `birthDate:` |Date of birth (YYYY-MM-DD)|\n| `collegeName:` |Player college (text)|\n| `position:` |Player position (text)|\n| `displayName:` |Player name (text)|","053a0d66":"## Weight Distribution of the Players\nTo have a deeper understanding in the distribution of the weights, lets take a closer look on the distribution of the average weights based on the position of the players. ","defa542d":"## Players Weight Distribution\nLet's have a look at the players distribution of the weights based on their playing positions. ","ed01aa3b":"## Plays at Yard Line Level\nHere it is quite simple understandable that the middle line which is 25 yard line will have the most number of plays becase play starts from there. ","7f14cde6":"## Gameplay Time","ef535747":"## Number of Plays of Every Type:\nNow let us have a look at the proportions of every types of play. ","1fcfa4d0":"<a id=\"1\"><\/a>\n<h2 style='background:#900C3F; border:0; color:white'><center>01. Game Data Analysis<center><\/h2> \n    \nLet's have a look at the `games.csv` file at first which stores date and time of each of the games in indexed week of the year with name of the home and visitor team. The key variable here is gameId. The follwoing table shows the data columns and the format\n    \n|Column Name|Description|\n|:--|:--|\n| **gameId:** |Game identifier, unique (numeric)|\n| **gameDate:** |Game Date (time, mm\/dd\/yyyy) format|\n| **gameTimeEastern:** |Start time of game (time, HH:MM:SS, EST)|\n| **homeTeamAbbr:** |Home team three-letter code (text)|\n| **visitorTeamAbbr:** |Visiting team three-letter code (text)|\n| **week:** |Week of game (numeric)|\n    \n<br>\n \n## Number of Games Played on Different Dates","ffd44dfd":"## Number of Plays for Each Team\nLet's have a look at the number of plays for each of the teams. ","1bf327c3":"## Game Played Over Time. \nThe calendar plot of the games mostly show that, the majority of the games were played in the Sunday weekend during the last four months of the year. ","29079c62":"<a id=\"3\"><\/a>\n<h2 style='background:#900C3F; border:0; color:white'><center>02. Play Data Analysis<center><\/h2> ","5c6e6a35":"## Gameplay Time Propotions"}}