{"cell_type":{"918b5345":"code","b108db96":"code","b1f8a6a2":"code","7998c08e":"code","2f4b2aac":"code","9ded92af":"code","974d6427":"code","c6990e5b":"code","e53737fc":"code","73fab64c":"code","5b83d5cf":"markdown","7e8d638a":"markdown","967e2fe3":"markdown","abd8d043":"markdown","4c2adeae":"markdown","94c4fcd1":"markdown"},"source":{"918b5345":"from __future__ import print_function\nfrom tensorflow import keras\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.models import Model\nimport tensorflow as tf \n# %matplotlib notebook\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport time\ndef plt_dynamic(x, vy, ty, ax, colors=['b']):\n    ax.plot(x, vy, 'b', label=\"Validation Loss\")\n    ax.plot(x, ty, 'r', label=\"Train Loss\")\n    plt.legend()\n    plt.grid()\n    fig.canvas.draw()\n    plt.show()","b108db96":"\nbatch_size = 128\nnum_classes = 10\nepochs = 25\n\n# input image dimensions\nimg_rows, img_cols = 28, 28\n\n# the data, split between train and test sets\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\nif K.image_data_format() == 'channels_first':\n    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)\n    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)\n    input_shape = (1, img_rows, img_cols)\nelse:\n    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\n    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n    input_shape = (img_rows, img_cols, 1)\n\n\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train \/= 255\nx_test \/= 255\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')\n\n# convert class vectors to binary class matrices\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)\n","b1f8a6a2":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=input_shape))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\nmodel.summary()","7998c08e":"\n\nhistory = model.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(x_test, y_test))\nscore = model.evaluate(x_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","2f4b2aac":"score = model.evaluate(x_test, y_test, verbose=0) \nprint('Test score:', score[0]) \nprint('Test accuracy:', score[1])\n\nfig,ax = plt.subplots(1,1)\nax.set_xlabel('epoch') ; ax.set_ylabel('Categorical Crossentropy Loss')\n\n# list of epoch numbers\nx = list(range(1,epochs+1))\n\nvy = history.history['val_loss']\nty = history.history['loss']\nplt_dynamic(x, vy, ty, ax)","9ded92af":"plt.imshow(x_train[20].reshape(28,28), cmap = 'gray');","974d6427":"layer_outputs = [layer.output for layer in model.layers]\nactivation_model = Model(inputs=model.input, outputs=layer_outputs)\n\n#https:\/\/gist.github.com\/NISH1001\/7287b01aaa531aec08ab21359f7d3342 \ndef display_activation(activations, col_size, row_size, act_index): \n    activation = activations[act_index]\n    activation_index=0\n    fig, ax = plt.subplots(row_size, col_size, figsize=(row_size*2.5,col_size*1.5))\n    for row in range(0,row_size):\n        for col in range(0,col_size):\n            ax[row][col].imshow(activation[0, :, :, activation_index], cmap='gray')\n            activation_index += 1","c6990e5b":"activations = activation_model.predict(x_train[20].reshape(1,28,28,1))\ndisplay_activation(activations, 5,5,1)","e53737fc":"display_activation(activations, 5,5,2)","73fab64c":"display_activation(activations, 5,5,3)","5b83d5cf":"# Visualizing Layer : 1","7e8d638a":"# Visualizing Layer 2\n","967e2fe3":"### Plotting Train and validation Loss :","abd8d043":"# The Model:","4c2adeae":"- Following image is of the Handwritten digit \" 4 \" from our train dataset \n- We will observe how this image behaves as we pass it on through different layers of our CNN","94c4fcd1":"# Visualizing Layer 3"}}