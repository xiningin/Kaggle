{"cell_type":{"d548fd06":"code","54970799":"code","f55d11a2":"code","6cf9f946":"code","0c8419bc":"code","ac707fa1":"code","c42c86e7":"code","c8cc1efb":"code","9fcf8a9e":"code","21d3575b":"code","1d936057":"code","32f48738":"code","8c350c7f":"code","322c2f91":"code","09ef1e69":"code","6b0df8a3":"code","78c64b9c":"code","97fa0937":"code","a7201a11":"code","5a167d28":"code","9f38dd36":"code","973f160c":"code","3d852dde":"code","caf918ac":"markdown","88690d03":"markdown","49d31331":"markdown","5c54d01b":"markdown","baef50b6":"markdown","af054234":"markdown","7065b78a":"markdown","185d158c":"markdown","12e7acca":"markdown","4f4fc4f3":"markdown","585358db":"markdown","91f9b8c9":"markdown","f4ffbdb0":"markdown","fc22f083":"markdown"},"source":{"d548fd06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54970799":"# Importing neccesary packages.\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore') # Disabling warnings for clearer outputs.\nfrom collections import Counter","f55d11a2":"train= pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest =pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n","6cf9f946":"train.head()","0c8419bc":"sns.set_style(\"whitegrid\")\nsns.catplot(x='Pclass', data=train,kind='count', hue='Sex',palette='rocket')","ac707fa1":"sns.catplot(x = 'Sex',data=train, kind='count')","c42c86e7":"sns.barplot(x='Pclass', y='Survived', data=train,palette='rocket')","c8cc1efb":"sns.catplot(x ='Survived',data=train, kind='count',hue='Sex')","9fcf8a9e":"#Age\nsns.boxplot(x='Survived',y='Age',data=train,palette='winter')","21d3575b":"#Survival and dead distribution with respect to age\nplt.figure(figsize=(20, 30))\nsns.countplot(y = \"Age\",hue=\"Survived\", data=train)","1d936057":"full_data = [train, test]\n","32f48738":"for dataset in full_data:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\nprint (train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())","8c350c7f":"for dataset in full_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\nprint (train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean())","322c2f91":"for dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\nprint (train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean())","09ef1e69":"Fare\nFare also has some missing value and we will replace it with the median. then we categorize it into 4 ranges.","6b0df8a3":"for dataset in full_data:\n    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())\ntrain['CategoricalFare'] = pd.qcut(train['Fare'], 4)\nprint (train[['CategoricalFare', 'Survived']].groupby(['CategoricalFare'], as_index=False).mean())","78c64b9c":"for dataset in full_data:\n    age_avg \t   = dataset['Age'].mean()\n    age_std \t   = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\n    \ntrain['CategoricalAge'] = pd.cut(train['Age'], 5)\n\nprint (train[['CategoricalAge', 'Survived']].groupby(['CategoricalAge'], as_index=False).mean())","97fa0937":"import re as re\ndef get_title(name):\n\ttitle_search = re.search(' ([A-Za-z]+)\\.', name)\n\t# If the title exists, extract and return it.\n\tif title_search:\n\t\treturn title_search.group(1)\n\treturn \"\"\n\nfor dataset in full_data:\n    dataset['Title'] = dataset['Name'].apply(get_title)\n\nprint(pd.crosstab(train['Title'], train['Sex']))","a7201a11":"for dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\nprint (train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean())","5a167d28":"for dataset in full_data:\n    # Mapping Sex\n    dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n    \n    # Mapping titles\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n# Mapping Embarked\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n    \n# Mapping Fare\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] \t\t\t\t\t\t        = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] \t\t\t\t\t\t\t        = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n# Mapping Age\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] \t\t\t\t\t       = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']                           = 4\n\n# Feature Selection\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp',\\\n                 'Parch', 'FamilySize']\ntrain = train.drop(drop_elements, axis = 1)\ntrain = train.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)\n\ntest  = test.drop(drop_elements, axis = 1)\n\nprint (train.head(10))\n\ntrain = train.values\ntest  = test.values","9f38dd36":"from sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\n","973f160c":"classifiers = [\n    KNeighborsClassifier(3),\n    SVC(probability=True),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n\tAdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis(),\n    LogisticRegression()]\n\nlog_cols = [\"Classifier\", \"Accuracy\"]\nlog \t = pd.DataFrame(columns=log_cols)\n\nsss = StratifiedShuffleSplit(n_splits=10, test_size=0.1, random_state=0)\n\nX = train[0::, 1::]\ny = train[0::, 0]\n\nacc_dict = {}\n\nfor train_index, test_index in sss.split(X, y):\n\tX_train, X_test = X[train_index], X[test_index]\n\ty_train, y_test = y[train_index], y[test_index]\n\t\n\tfor clf in classifiers:\n\t\tname = clf.__class__.__name__\n\t\tclf.fit(X_train, y_train)\n\t\ttrain_predictions = clf.predict(X_test)\n\t\tacc = accuracy_score(y_test, train_predictions)\n\t\tif name in acc_dict:\n\t\t\tacc_dict[name] += acc\n\t\telse:\n\t\t\tacc_dict[name] = acc\n\nfor clf in acc_dict:\n\tacc_dict[clf] = acc_dict[clf] \/ 10.0\n\tlog_entry = pd.DataFrame([[clf, acc_dict[clf]]], columns=log_cols)\n\tlog = log.append(log_entry)\n\nplt.xlabel('Accuracy')\nplt.title('Classifier Accuracy')\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x='Accuracy', y='Classifier', data=log, color=\"b\")","3d852dde":"candidate_classifier = SVC()\ncandidate_classifier.fit(train[0::, 1::], train[0::, 0])\nresult = candidate_classifier.predict(test)","caf918ac":"Embarked\nthe embarked feature has some missing value. and we try to fill those with the most occurred value ( 'S' ).","88690d03":"With the number of siblings\/spouse and the number of children\/parents we can create new feature called Family Size.","49d31331":"**FEATURE ENGINEERING**","5c54d01b":"Class 3 has much more males than feamles.","baef50b6":"Passengers of class 1 have higher survival chance followed by class2.","af054234":"**Data Cleaning**","7065b78a":"**What's in the notebook?**\n1)EDA\n\n2)Detection of missing data and imputation.\n\n3)Feature enginnering.\n\n4)Coverting categorical features.\n\n5)Modelling.\n\n6)Ensemble.\n\n7)K-fold cv.\n\n8)Hyperparameter tuning.","185d158c":"While the average age of people seems to almost same for survived and dead but some outiers are present.","12e7acca":" Age\nThere are plenty of missing values in this feature. # generate random numbers between (mean - std) and (mean + std). then we categorize age into 5 range.","4f4fc4f3":"This shows a  higher chance of survived passenger being female.","585358db":"**EXPLORING THE DATESET**\n\nTypes of features in titanic\nCategorical: is a collection of information that is divided into groups. Eg. Embarked (C = Cherbourg; Q = Queenstown; S = Southampton)\n\nOrdinal: They are similar to categorical features but they have an order. Eg. Pclass (1, 2, 3)\n\nBinary: A categrorical feature which has only 2 types of categories.Which is often represted as 0 and 1. Eg: Sex (Male\/Female)\n\nContinuous: They can take up any value between the minimum and maximum values in a column. Eg. Age, Fare\n\nCount: They represent the count of a variable. Eg. SibSp, Parch","91f9b8c9":"Name","f4ffbdb0":"**MODELLING**","fc22f083":"Number of male passengers are almost 2x of female passengers "}}