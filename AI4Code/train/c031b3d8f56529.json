{"cell_type":{"114074e8":"code","c566705a":"code","5fda09be":"code","af55acc5":"code","15f1ea81":"code","945a6461":"code","0cd02fca":"code","96b82c57":"code","45b3cdfa":"code","e94baae0":"code","c0497813":"code","49be1eb9":"code","9080b02a":"code","4cf0fdff":"code","b5650fa6":"code","040c0d08":"code","2c682df2":"code","060fe592":"markdown","5067ba58":"markdown","a9c696c8":"markdown","c1ceee6f":"markdown","5ddb58ce":"markdown"},"source":{"114074e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c566705a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport statistics\nimport sklearn\nimport sklearn.metrics as sm\nimport lightgbm as lgb\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\n\npd.options.display.max_rows = 1500\npd.options.display.max_columns = 130","5fda09be":"train_set = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest_set = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\ntrain_set.head()","af55acc5":"train_set.shape","15f1ea81":"target_category = train_set[\"claim\"].unique()\ntarget_category=list(map(str,target_category))\nprint(target_category)\n","945a6461":"train_set.isnull().sum().sort_values(ascending =False)","0cd02fca":"y= train_set['claim']\nx= train_set.drop(columns=['claim','id'])\nprint(len(x.columns))\n","96b82c57":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.3, random_state = 60,shuffle=True)\nprint(len(X_train))\nprint(len(X_test))","45b3cdfa":"from sklearn.impute import SimpleImputer\n\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(X_train))\nimputed_X_test = pd.DataFrame(my_imputer.transform(X_test))\n\n# Imputation removed column names; put them back\nimputed_X_train.columns = X_train.columns\nimputed_X_test.columns = X_test.columns\n","e94baae0":"from xgboost import XGBClassifier\nxgb = XGBClassifier()\n\nxgb.fit(X_train, Y_train)\n\ntest_predict = xgb.predict(X_test)","c0497813":"y_pred_proba = xgb.predict_proba(X_test)[::,1]\nfpr, tpr, _ = metrics.roc_curve(Y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(Y_test, y_pred_proba)\nprint(auc)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()\n","49be1eb9":"test_set.isnull().sum().sort_values(ascending = False)","9080b02a":"test_id = test_set['id']\ntest_x= test_set.drop(columns=['id'])\nprint(len(test_x.columns))\n","4cf0fdff":"\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(test_x))\n\n# Imputation removed column names; put them back\nimputed_X_train.columns = X_test.columns\n","b5650fa6":"y_prdict =xgb.predict_proba(test_x)[:, 1]","040c0d08":"submission = pd.DataFrame(list(zip(test_id, y_prdict)),\n               columns =['id', 'claim'])\nsubmission.head(20)","2c682df2":"submission.to_csv('submission.csv', index=False)","060fe592":"# Read Datasets","5067ba58":"# Test set","a9c696c8":"# Check Null Values","c1ceee6f":"# Use SimpleImputer to replace missing values with the mean value of each column.","5ddb58ce":"# XGB Classifier"}}