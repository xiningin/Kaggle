{"cell_type":{"e005ac79":"code","71940ccb":"code","732fbc22":"code","5b9139d3":"code","b6a4ce0e":"code","655d6ac4":"code","0bd0a54a":"code","722bf4a6":"code","2f502295":"code","7b3d1684":"code","b6c37763":"code","dc79fc74":"code","0f0b197b":"code","502a11a2":"code","a1607e6c":"code","1f1ec373":"code","39c7b418":"code","ec79d83e":"code","82980f57":"code","a721bbc7":"code","0d1a5805":"code","fa3f8ce4":"code","05bc6803":"code","d72b7500":"code","0ba9b8d8":"code","a836fe39":"code","4fa3d5d2":"code","363c9e90":"code","d85f5e0d":"code","d1ae87b6":"code","536a7bf0":"code","a00f490b":"code","be20292b":"code","b3fccfc7":"code","5f719bb2":"code","57cf944d":"code","05a7ea0b":"code","dc52aeba":"code","128692a1":"code","c6e211ec":"code","68666395":"code","1152892c":"code","4ac47c2a":"code","0c78bc9d":"code","c35b81ad":"markdown","bbdd4a3a":"markdown","ddd8b5f3":"markdown"},"source":{"e005ac79":"import numpy as np \nimport pandas as pd\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\nimport plotly_express as px\n\n# color_pallete = ['#FF1744', '#666666']\n# sns.set_palette(color_pallete, 2)\nplt.style.use('fivethirtyeight')\n\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nimport xgboost\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\nimport eli5\nfrom eli5.sklearn import PermutationImportance","71940ccb":"# SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n# MSSubClass: The building class\n# MSZoning: The general zoning classification\n# LotFrontage: Linear feet of street connected to property\n# LotArea: Lot size in square feet\n# Street: Type of road access\n# Alley: Type of alley access\n# LotShape: General shape of property\n# LandContour: Flatness of the property\n# Utilities: Type of utilities available\n# LotConfig: Lot configuration\n# LandSlope: Slope of property\n# Neighborhood: Physical locations within Ames city limits\n# Condition1: Proximity to main road or railroad\n# Condition2: Proximity to main road or railroad (if a second is present)\n# BldgType: Type of dwelling\n# HouseStyle: Style of dwelling\n# OverallQual: Overall material and finish quality\n# OverallCond: Overall condition rating\n# YearBuilt: Original construction date\n# YearRemodAdd: Remodel date\n# RoofStyle: Type of roof\n# RoofMatl: Roof material\n# Exterior1st: Exterior covering on house\n# Exterior2nd: Exterior covering on house (if more than one material)\n# MasVnrType: Masonry veneer type\n# MasVnrArea: Masonry veneer area in square feet\n# ExterQual: Exterior material quality\n# ExterCond: Present condition of the material on the exterior\n# Foundation: Type of foundation\n# BsmtQual: Height of the basement\n# BsmtCond: General condition of the basement\n# BsmtExposure: Walkout or garden level basement walls\n# BsmtFinType1: Quality of basement finished area\n# BsmtFinSF1: Type 1 finished square feet\n# BsmtFinType2: Quality of second finished area (if present)\n# BsmtFinSF2: Type 2 finished square feet\n# BsmtUnfSF: Unfinished square feet of basement area\n# TotalBsmtSF: Total square feet of basement area\n# Heating: Type of heating\n# HeatingQC: Heating quality and condition\n# CentralAir: Central air conditioning\n# Electrical: Electrical system\n# 1stFlrSF: First Floor square feet\n# 2ndFlrSF: Second floor square feet\n# LowQualFinSF: Low quality finished square feet (all floors)\n# GrLivArea: Above grade (ground) living area square feet\n# BsmtFullBath: Basement full bathrooms\n# BsmtHalfBath: Basement half bathrooms\n# FullBath: Full bathrooms above grade\n# HalfBath: Half baths above grade\n# Bedroom: Number of bedrooms above basement level\n# Kitchen: Number of kitchens\n# KitchenQual: Kitchen quality\n# TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n# Functional: Home functionality rating\n# Fireplaces: Number of fireplaces\n# FireplaceQu: Fireplace quality\n# GarageType: Garage location\n# GarageYrBlt: Year garage was built\n# GarageFinish: Interior finish of the garage\n# GarageCars: Size of garage in car capacity\n# GarageArea: Size of garage in square feet\n# GarageQual: Garage quality\n# GarageCond: Garage condition\n# PavedDrive: Paved driveway\n# WoodDeckSF: Wood deck area in square feet\n# OpenPorchSF: Open porch area in square feet\n# EnclosedPorch: Enclosed porch area in square feet\n# 3SsnPorch: Three season porch area in square feet\n# ScreenPorch: Screen porch area in square feet\n# PoolArea: Pool area in square feet\n# PoolQC: Pool quality\n# Fence: Fence quality\n# MiscFeature: Miscellaneous feature not covered in other categories\n# MiscVal: $Value of miscellaneous feature\n# MoSold: Month Sold\n# YrSold: Year Sold\n# SaleType: Type of sale\n# SaleCondition: Condition of sale","732fbc22":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","5b9139d3":"print(\"Train shape : \", train.shape, \"\\nTest shape : \", test.shape)","b6a4ce0e":"train.head()","655d6ac4":"# train.columns","0bd0a54a":"# train.info()","722bf4a6":"# train.describe(include='all')","2f502295":"# train.isnull().sum()","7b3d1684":"# # correlation heatmap\n\n# plt.figure(figsize=(40, 40))\n# sns.heatmap(train.corr(), annot=True, cmap='RdBu', vmax=1, vmin=-1)\n# plt.plot()","b6c37763":"train['SalePrice'].describe()","dc79fc74":"# sns.distplot(train['SalePrice'])","0f0b197b":"# finding numerical and categorical columns\n\ncols = train.drop(['Id', 'SalePrice'], axis=1).columns\n\nnum_cols = []\ncat_cols = []\n\nfor i in train[cols]:\n    if(train[i].dtype=='object'):\n        cat_cols.append(i)\n    else:\n        num_cols.append(i)\n        \n# print(num_cols)\n# print()\n# print(cat_cols)","502a11a2":"for i in num_cols:\n    data = pd.concat([train['SalePrice'], train[i]], axis=1)\n    data.plot.scatter(x=i, y='SalePrice', ylim=(0,800000));","a1607e6c":"for i in cat_cols:\n    data = pd.concat([train['SalePrice'], train[i]], axis=1)\n    f, ax = plt.subplots(figsize=(8, 6))\n    fig = sns.boxplot(x=i, y=\"SalePrice\", data=train)\n    fig.axis(ymin=0, ymax=800000);","1f1ec373":"null_cols = []\n\nfor i in train.isnull().sum().index:\n    if train.isnull().sum()[i] > 0:\n        null_cols.append(i)\n        \nfor i in test.isnull().sum().index:\n    if (test.isnull().sum()[i] > 0) and (i not in null_cols):\n        null_cols.append(i)\n        \nprint(null_cols)","39c7b418":"train[null_cols].describe(include='all')","ec79d83e":"plt.figure(figsize=(8, 8))\nsns.heatmap(train[[i for i in null_cols if i in num_cols]].corr(), annot=True, cmap='RdBu', vmax=1, vmin=-1)\nplt.plot()","82980f57":"for df in [train, test]:\n    for i in num_cols:\n        avg = df[i].mean()\n        df[i] = df[i].fillna(avg)","a721bbc7":"null_cols = []\n\nfor i in train.isnull().sum().index:\n    if train.isnull().sum()[i] > 200:\n        null_cols.append(i)\n        \nfor i in test.isnull().sum().index:\n    if (test.isnull().sum()[i] > 200) and (i not in null_cols):\n        null_cols.append(i)\n        \nprint(null_cols)\nprint()\n\nfor i in [train, test]:\n    print(i.shape)\n    i.drop(null_cols, axis=1, inplace=True)\n    print(i.shape)\n    print()","0d1a5805":"train = train.fillna(df.mode().iloc[0])\ntest = test.fillna(df.mode().iloc[0])","fa3f8ce4":"cols = train.drop(['Id', 'SalePrice'], axis=1).columns\n\nnum_cols = []\ncat_cols = []\n\nfor i in train[cols]:\n    if(train[i].dtype=='object'):\n        cat_cols.append(i)\n    else:\n        num_cols.append(i)\n        \ntrain[cat_cols].describe(include='all')","05bc6803":"test[cat_cols].describe(include='all')","d72b7500":"test['Utilities'].describe(include='all')['unique']","0ba9b8d8":"test[i].describe(include='all')['unique']","a836fe39":"diff_cols = [i for i in cat_cols if train[i].describe(include='all')['unique'] != test[i].describe(include='all')['unique']]\ndiff_cols","4fa3d5d2":"for i in [train, test]:\n    print(i.shape)\n    i.drop(diff_cols, axis=1, inplace=True)\n    print(i.shape)\n    print()","363c9e90":"# for i in [i for i in null_cols if i in cat_cols]:\n#     sns.catplot(x=i, y='SalePrice', kind=\"box\", data=train)\n#     plt.plot()","d85f5e0d":"# for i in cat_cols:\n#     plt.figure(figsize=(15, 5))\n#     sns.boxplot(x=i , y='SalePrice', data=train)\n#     plt.plot()","d1ae87b6":"# plt.figure(figsize=(40, 40))\n# sns.pairplot(train)\n# plt.plot()","536a7bf0":"print(\"Train shape : \", train.shape, \"\\nTest shape : \", test.shape)","a00f490b":"sc = StandardScaler()\n\nfor df in [train, test]:\n    for i in num_cols:\n        df[i] = df[i].astype('float64')\n        df[i] = sc.fit_transform(df[i].values.reshape(-1,1))","be20292b":"train = pd.get_dummies(train, drop_first=True)\ntest = pd.get_dummies(test, drop_first=True)","b3fccfc7":"# creating numerical and categorical columns\n\ncols = train.drop(['Id', 'SalePrice'], axis=1).columns\n\nnum_cols = []\ncat_cols = []\n\nfor i in train[cols]:\n    if(train[i].dtype=='object'):\n        cat_cols.append(i)\n    else:\n        num_cols.append(i)\n        \n# print(num_cols)\n# print()\n# print(cat_cols)","5f719bb2":"cols","57cf944d":"train.drop(cat_cols, axis=1, inplace=True)\ntest.drop(cat_cols, axis=1, inplace=True)\n\nX = train[['FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold', 'MSZoning', 'LandContour', 'LotConfig', 'Neighborhood',\n        'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n        'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'Foundation', 'GarageType', 'MiscFeature', \n        'SaleType', 'SaleCondition', 'Electrical', 'Heating']]\n# .drop(['Id', 'SalePrice'], axis=1)\ny = train['SalePrice']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)","05a7ea0b":"lr = LinearRegression()\nlr.fit(X_train, y_train)\n\npred = lr.predict(X_test)\n\nprint(mean_absolute_error(y_test, pred))\nprint(mean_squared_error(y_test, pred))\nprint(r2_score(y_test, pred))\n\nperm = PermutationImportance(lr, random_state=1).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())","dc52aeba":"ridge = Ridge()\nridge.fit(X_train, y_train)\n\npred = ridge.predict(X_test)\n\nprint(mean_absolute_error(y_test, pred))\nprint(mean_squared_error(y_test, pred))\nprint(r2_score(y_test, pred))\n\nperm = PermutationImportance(ridge, random_state=1).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())","128692a1":"Lasso = Lasso()\nLasso.fit(X_train, y_train)\n\npred = Lasso.predict(X_test)\n\nprint(mean_absolute_error(y_test, pred))\nprint(mean_squared_error(y_test, pred))\nprint(r2_score(y_test, pred))\n\nperm = PermutationImportance(Lasso, random_state=1).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())","c6e211ec":"dt = DecisionTreeRegressor()\ndt.fit(X_train, y_train)\n\npred = dt.predict(X_test)\n\nprint(mean_absolute_error(y_test, pred))\nprint(mean_squared_error(y_test, pred))\nprint(r2_score(y_test, pred))\n\nperm = PermutationImportance(dt, random_state=1).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())","68666395":"rf = RandomForestRegressor()\nrf.fit(X_train, y_train)\n\npred = rf.predict(X_test)\n\nprint(mean_absolute_error(y_test, pred))\nprint(mean_squared_error(y_test, pred))\nprint(r2_score(y_test, pred))\n\nperm = PermutationImportance(rf, random_state=1).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())","1152892c":"# model = xgboost.XGBRegressor(colsample_bytree=0.4,\n#                  gamma=0,                 \n#                  learning_rate=0.07,\n#                  max_depth=3,\n#                  min_child_weight=1.5,\n#                  n_estimators=10000,                                                                    \n#                  reg_alpha=0.75,\n#                  reg_lambda=0.45,\n#                  subsample=0.6,\n#                  seed=42) \n\n# model.fit(X_train, y_train)\n\n# pred = model.predict(X_test)\n\n# print(mean_absolute_error(y_test, pred))\n# print(mean_squared_error(y_test, pred))\n# print(r2_score(y_test, pred))","4ac47c2a":"# feature = X_train.columns\n# importance = rf.feature_importances_\n# indices = np.argsort(importance)\n\n# plt.rcParams['figure.figsize'] = (10, 50)\n# plt.barh(range(len(indices)), importance[indices])\n# plt.yticks(range(len(indices)), feature[indices])\n# plt.xlabel('Relative Importance')\n# plt.show()","0c78bc9d":"# pred = rf.predict(test[['FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n#         'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n#         'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n#         'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n#         'YrSold', 'MoSold', 'MSZoning', 'LandContour', 'LotConfig', 'Neighborhood',\n#         'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n#         'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'Foundation', 'GarageType', 'MiscFeature', \n#         'SaleType', 'SaleCondition', 'Electrical', 'Heating']])\n# my_submission = pd.DataFrame({'Id': test.Id, 'SalePrice': pred})\n# my_submission.to_csv('submission.csv', index=False)\n\n# print(my_submission.head())","c35b81ad":"# Column names","bbdd4a3a":"# Datasets","ddd8b5f3":"# Importing libraries"}}