{"cell_type":{"361e20ba":"code","1af0f600":"code","5b88c3fd":"code","fdd774d7":"code","cba1159e":"code","5181647d":"code","714aef55":"code","c3b4dd29":"code","359b75f0":"code","c32e2940":"code","1a9b8655":"code","7ac528dd":"code","313d4f01":"code","630e265b":"code","7833f189":"code","84812e40":"code","40135d7d":"code","a2d6bf1b":"code","e60e8248":"code","3b70a3f8":"code","537bd93a":"code","25436d5c":"code","8228c075":"code","a5114dbe":"code","ba4cbc68":"code","8691a899":"code","e59f7b7e":"code","880777c7":"code","55c02d35":"code","442d441a":"code","68ade243":"code","b3c670fb":"code","8e6d540b":"code","ec791884":"code","9c4c5478":"code","5c1a6f8e":"code","7caaedf7":"code","5e2edac2":"code","d545db31":"code","40b29b8d":"code","0953ecb5":"code","d191f904":"code","7503e4e4":"markdown","26f49a3d":"markdown","2b99018d":"markdown"},"source":{"361e20ba":"#importar librer\u00edas\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#from plotnine import *\n\n\n#secci\u00f3n del tutorial para listar la ruta de los datos de entrenamiento y a predecir\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n#Notas del tutorial\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1af0f600":"#Leer dataset de entrenamiento\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","5b88c3fd":"#Leer dataset a predecir\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","fdd774d7":"sns.set()\nsns.catplot(x=\"Sex\", hue=\"Pclass\", kind=\"count\", legend=False,data=train_data)\nplt.title('Total por g\u00e9nero y clase')\nplt.xlabel('G\u00e9nero')\nplt.ylabel('No. Tripulantes')\nplt.legend(title='Clase', loc='upper right', labels=['1ra', '2da', '3ra'])","cba1159e":"sns.catplot(x=\"Sex\", hue=\"Survived\", kind=\"count\", legend=False,data=train_data)\nplt.title('Total sobrevivientes por g\u00e9nero')\nplt.xlabel('G\u00e9nero')\nplt.ylabel('No. Tripulantes')\nplt.legend(title='Status', loc='upper right', labels=['No Sobrevivi\u00f3', 'Sobrevivi\u00f3'])","5181647d":"#Porcentaje de mujeres que sobrevivieron\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% de mujeres que sobrevivieron:\", rate_women)","714aef55":"#Porcentaje de hombres que sobrevivieron\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% de hombres que sobrevivieron:\", rate_men)","c3b4dd29":"print('Total hombres:',len(men))\nprint('Total mujeres:',len(women))\nprint('Total sobrevivientes hombres:',sum(men))\nprint('Total sobrevivientes mujeres:',sum(women))","359b75f0":"#Parch = 0 que sobrevivieron\nparch_0 = train_data.loc[train_data.Parch == 0][\"Survived\"]\nrate_parch_0 = sum(parch_0)\/len(parch_0)\nprint(\"% parch = 0 que sobrevivieron:\", rate_parch_0)\n\nparch_1 = train_data.loc[train_data.Parch == 1][\"Survived\"]\nrate_parch_1 = sum(parch_1)\/len(parch_1)\nprint(\"% parch = 1 que sobrevivieron:\", rate_parch_1)\n\nparch_2 = train_data.loc[train_data.Parch == 2][\"Survived\"]\nrate_parch_2 = sum(parch_2)\/len(parch_2)\nprint(\"% parch = 2 que sobrevivieron:\", rate_parch_2)\n\nparch_3 = train_data.loc[train_data.Parch == 3][\"Survived\"]\nrate_parch_3 = sum(parch_3)\/len(parch_3)\nprint(\"% parch = 3 que sobrevivieron:\", rate_parch_3)\n\nparch_4 = train_data.loc[train_data.Parch == 4][\"Survived\"]\nrate_parch_4 = sum(parch_4)\/len(parch_4)\nprint(\"% parch = 4 que sobrevivieron:\", rate_parch_4)\n\nparch_5 = train_data.loc[train_data.Parch == 5][\"Survived\"]\nrate_parch_5 = sum(parch_5)\/len(parch_5)\nprint(\"% parch = 5 que sobrevivieron:\", rate_parch_5)\n\nparch_6 = train_data.loc[train_data.Parch == 6][\"Survived\"]\nrate_parch_6 = sum(parch_6)\/len(parch_6)\nprint(\"% parch = 3 que sobrevivieron:\", rate_parch_6)\n\n\nprint('----')\nprint('Parch0 sobrevivientes sobre el total',sum(parch_0)\/len(train_data['Parch']))\nprint('Parch1 sobrevivientes sobre el total',sum(parch_1)\/len(train_data['Parch']))\nprint('Parch2 sobrevivientes sobre el total',sum(parch_2)\/len(train_data['Parch']))\nprint('Parch3 sobrevivientes sobre el total',sum(parch_3)\/len(train_data['Parch']))\nprint('Parch4 sobrevivientes sobre el total',sum(parch_4)\/len(train_data['Parch']))\nprint('Parch5 sobrevivientes sobre el total',sum(parch_5)\/len(train_data['Parch']))\nprint('Parch6 sobrevivientes sobre el total',sum(parch_6)\/len(train_data['Parch']))\n\n\n\nprint(sum(train_data['Survived'])\/len(train_data['Survived']))","c32e2940":"print(\"Total de datos usando survived:\",len(train_data['Survived']))\n\nprint(\"Total de datos usando sex:\",len(train_data['Sex']))\n\nprint(\"Total hombres:\",len(men))\nprint(\"Total mujeres:\",len(women))\nprint(\"Total hombres vivos:\", sum(men))\nprint(\"Total mujeres vivas:\",sum(women))\n\nprint(train_data.describe())\n#Faltan datos dela edad\n","1a9b8655":"print(test_data.describe())","7ac528dd":"#Revisar columnas que tengan null(vac\u00edos)\nprint('Vacios en embarked:',train_data['Embarked'].isnull().values.any())\nprint('Vacios en Sex:',train_data['Sex'].isnull().values.any())\nprint('Vacios en Name:',train_data['Name'].isnull().values.any())\nprint('Vacios en Age:',train_data['Age'].isnull().values.any())\nprint('Vacios en Cabin:',train_data['Cabin'].isnull().values.any())\nprint('Vacios en Ticket:',train_data['Ticket'].isnull().values.any())\n\n#Vacios\n#embarked, Age y Cabin","313d4f01":"#Ver cuantos registros est\u00e1n vacios\nprint('Embarked:',train_data['Embarked'].isnull().sum())\nprint('Age:',train_data['Age'].isnull().sum())\nprint('Cabin:',train_data['Cabin'].isnull().sum())","630e265b":"#Que tipo de datos se tienen?\n\nprint('Embarked:',train_data['Embarked'].unique())\nprint('Sex:',train_data['Sex'].unique())\nprint('Parch:',train_data['Parch'].unique())\n","7833f189":"embarked_s = train_data.loc[train_data.Embarked == 'S'][\"Survived\"]\nrate_embarked_s = sum(embarked_s)\/len(train_data['Survived'])\nprint('% que sobrevivio con embarked = S: ',rate_embarked_s)\n\nembarked_c = train_data.loc[train_data.Embarked == 'C'][\"Survived\"]\nrate_embarked_c = sum(embarked_c)\/len(train_data['Survived'])\nprint('% que sobrevivio con embarked = C:',rate_embarked_c)\n\nembarked_q = train_data.loc[train_data.Embarked == 'Q'][\"Survived\"]\nrate_embarked_q = sum(embarked_q)\/len(train_data['Survived'])\nprint('% que sobrevivio con embarked = Q:',rate_embarked_q)\n\nprint('s:',len(embarked_s), 'c:',len(embarked_c), 'q:',len(embarked_q))\n\n#Sobrevivieron m\u00e1s de los que embarcaron en S pero er\u00e1n m\u00e1s\n\nembarked_s = train_data.loc[train_data.Embarked == 'S'][\"Survived\"]\nrate_embarked_s = sum(embarked_s)\/len(embarked_s)\nprint('%S: ',rate_embarked_s)\n\nembarked_c = train_data.loc[train_data.Embarked == 'C'][\"Survived\"]\nrate_embarked_c = sum(embarked_c)\/len(embarked_c)\nprint('%C:',rate_embarked_c)\n\nembarked_q = train_data.loc[train_data.Embarked == 'Q'][\"Survived\"]\nrate_embarked_q = sum(embarked_q)\/len(embarked_q)\nprint('%Q:',rate_embarked_q)","84812e40":"\ntrain_data[train_data['Embarked'].isnull()]\n\n#Porque tienen el mismo ticket id???? R= https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/amelia-icard.html\n#Con el dato de la info se sabe que embarked es = S","40135d7d":"train_data[train_data['Age'].isnull()]\n#TODO: Sacar el rango de Fare y compararlo con los que si tienen el Cabin","a2d6bf1b":"#train_data[train_data['Pclass'] == 1]\n\nprimera_clase = train_data.loc[train_data.Pclass == 1][\"Survived\"]\nrate_1 = sum(primera_clase)\/len(primera_clase)\n\nprint(\"% Sobrevivientes en primera clase:\", rate_1)\n\nsegunda_clase = train_data.loc[train_data.Pclass == 2][\"Survived\"]\nrate_2 = sum(segunda_clase)\/len(segunda_clase)\n\nprint(\"% Sobrevivientes en segunda clase:\", rate_2)\n\ntercera_clase = train_data.loc[train_data.Pclass == 3][\"Survived\"]\nrate_3 = sum(tercera_clase)\/len(tercera_clase)\n\nprint(\"% Sobrevivientes en tercera clase:\", rate_3)\n\n#De la primera clase hubo m\u00e1s sobrevivientes","e60e8248":"test_data.head(10)","3b70a3f8":"#Ya que se tienen solo 2 valores de la columna embarked en NaN pueden borrarse esas filas o poner el valor m\u00e1s repetido de esa columna\n#Ya que se sabe que subieron en S se setteara dicho valor\ntrain_data['Embarked'].fillna('S', inplace=True)\n#Comprobar el cambio\ntrain_data[(train_data['PassengerId'] == 62) | (train_data['PassengerId'] == 830)]","537bd93a":"#Algunos registros tienen cabin, la mayor\u00eda no, se podra tomar como 1 y 0 ? para usarlo en el modelo...\n\n    \n#train_data['Cabin'] = np.where(train_data['Cabin'].isnull(), 0, 1)\n\n\n#Se tiene que hacer lo mismo para los datos a predecir para que funcione el modelo\n#test_data['Cabin'] = np.where(test_data['Cabin'].isnull(), 0, 1)\n\n\n#Trabajar con cabin\n\n\ntrain_data['Cabin'].fillna('M', inplace=True)\ntrain_data['Cabin_full'] = train_data.Cabin.str.slice(0, 1)\n\ntest_data['Cabin'].fillna('M', inplace=True)\ntest_data['Cabin_full'] = test_data.Cabin.str.slice(0, 1)","25436d5c":"train_data.head(10)","8228c075":"test_data.head(10)","a5114dbe":"#Ya no hay ning\u00fan dato vacio de cabin, se podr\u00eda utilizar en el modelo \n\ntrain_data[train_data['Cabin'].isnull()]","ba4cbc68":"#Trabajar con la edad\n#https:\/\/medium.com\/vickdata\/four-feature-types-and-how-to-transform-them-for-machine-learning-8693e1c24e80\n#Llenar edad con la mediana\ntrain_data[\"Age\"].fillna(train_data[\"Age\"].mean(), inplace=True)\n#train_data.describe()\n\n\n#Poner el promedio tomando en cuenta subconjuntos (Pclass y Sex)\n#Por ejemplo: Promedio de los datos que sean Pclass = 1 y Sex =  female \n#Visto en: https:\/\/www.udemy.com\/course-dashboard-redirect\/?course_id=3034216 \n#Se toma el promedio  de todos los datos o separados train y test?\n\n#train_data.groupby([\"Sex\",\"Pclass\"]).agg({'Age': ['mean']})\n\n\n","8691a899":"train_data[\"Age\"].max(),test_data[\"Age\"].max()","e59f7b7e":"#Transformar edad en rangos (categor\u00edas)\ntrain_data['age_bins'] = pd.cut(x=train_data['Age'], bins=[0, 12, 20, 25, 40, 80])\ntrain_data['age_bins'].unique()","880777c7":"train_data.head()","55c02d35":"#Mismo caso para test_data\ntest_data[\"Age\"].fillna(test_data[\"Age\"].mean(), inplace=True)\ntest_data.describe()","442d441a":"test_data['age_bins'] = pd.cut(x=test_data['Age'], bins=[0, 12, 20, 25, 40, 80])\ntest_data['age_bins'].unique()","68ade243":"test_data.head()","b3c670fb":"#Transformar Pclass a categorica esto dio de resultado 0.77033 en el submit\n#train_data['Pclass'] = pd.Categorical(train_data.Pclass)\n#test_data['Pclass'] = pd.Categorical(test_data.Pclass)\ntrain_data.corr(method ='pearson') ","8e6d540b":"sns.catplot(x=\"age_bins\", hue=\"Survived\", kind=\"count\", legend=False,data=train_data)\nplt.title('Total sobrevivientes por rango de edad')\nplt.xlabel('Edad')\nplt.ylabel('No. Tripulantes')\nplt.legend(title='Status', loc='upper right', labels=['No Sobrevivi\u00f3', 'Sobrevivi\u00f3'])","ec791884":"#Saber si estuvieron solos o no\n\n\n#Para train data\ntrain_data['vaSolo'] = train_data['SibSp'] + train_data['Parch']\ntrain_data['vaSolo'] = np.where(train_data['vaSolo'] == 0, 1, 0)\n\ntrain_data.head()","9c4c5478":"\n#Para test data\ntest_data['vaSolo'] = test_data['SibSp'] + test_data['Parch']\ntest_data['vaSolo'] = np.where(test_data['vaSolo'] == 0, 1, 0)\n\ntrain_data.head()","5c1a6f8e":"train_data.head()","7caaedf7":"test_data.head()","5e2edac2":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n#Definir variables predictoras (X) y variable objetivo\/respuesta\/dependiente (y)\n#Transformar de texto a enteros con getdummies, generando columna hombre y mujer \n#Ya que la clase, el g\u00e9nero y donde embarcaron parece influir se tomar\u00e1n como los features\n#Ya se puede usar cabin\nfeatures = ['Pclass', 'Sex', 'Embarked', 'age_bins', 'vaSolo', 'Cabin_full']\n\ny = train_data['Survived'].values\nX = pd.get_dummies(train_data[features])\n\n#Del dataset de entrenamiento dividir para tener datos para entrenar y para predecir, as\u00ed poder ver el accuracy\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.40, random_state=5, stratify=y)\n\n\n\n\nX_test_r = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=300, max_depth=4, random_state=0, max_features=4)\nmodel.fit(X_train, y_train)\n\ny_pred= model.predict(X_test)\n\nmodel.score(X_test, y_test)","d545db31":"X_test_r.head()\n#No se tiene la columna T, se agrega con valores en 0\nX_test_r['Cabin_full_T'] = 0","40b29b8d":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n#print(model.score(X_test, y_test))\n\n#La matriz de confusi\u00f3n es mejor para  ver que tan acertado es el modelo\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\nfor feature in zip(features, model.feature_importances_):\n    print(feature)\n","0953ecb5":"predictions = model.predict(X_test_r)","d191f904":"\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Se guard\u00f3 el csv\")\n#mejor\u00f3 el porcentaje pero no super\u00f3 al de la versi\u00f3n 4","7503e4e4":"# **Procesar datos**","26f49a3d":"# **Exploraci\u00f3n de datos**","2b99018d":"Modelo random forest"}}