{"cell_type":{"125cf483":"code","1495de19":"code","8d6d8df0":"code","0d95a872":"code","00fa7f32":"code","7e46f228":"code","97615703":"markdown","1fb3b055":"markdown","b2227406":"markdown"},"source":{"125cf483":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1495de19":"print(\"Reading csv's...\")    \ntrain = pd.read_csv('..\/input\/train_transaction.csv')\ntest = pd.read_csv('..\/input\/test_transaction.csv')\ntraini = pd.read_csv('..\/input\/train_identity.csv') \ntesti = pd.read_csv('..\/input\/test_identity.csv')\nprint('Done!')","8d6d8df0":"train = pd.merge(train, traini, on='TransactionID', how='left')\ntest = pd.merge(test, testi, on='TransactionID', how='left')\ndel traini\ndel testi","0d95a872":"def make_hour_feature(df, tname='TransactionDT'):\n    \"\"\"\n    Creates an hour of the day feature, encoded as 0-23. \n    \n    Parameters:\n    -----------\n    df : pd.DataFrame\n        df to manipulate.\n    tname : str\n        Name of the time column in df.\n    \"\"\"\n    hours = df[tname] \/ (3600)        \n    encoded_hours = np.floor(hours) % 24\n    return encoded_hours\n\ntrain['hours'] = make_hour_feature(train)\ntest['hours'] = make_hour_feature(test)\n\nprint(\"Added hours feature...\")","00fa7f32":"from sklearn.utils import resample\n\nprint(\"Fraud counts\",len(train[train.isFraud == 1]))\nprint(\"Non Fraud counts\",len(train[train.isFraud == 0]))\n\nfor h in range(24):\n    fc = len(train[(train.isFraud==1) &(train.hours==h)])\n    nfc = len(train[(train.isFraud==0) &(train.hours==h)])\n    print(\"hour \",h,\"fraud counts:\",fc)\n    print(\"hour \",h,\"non-fraud counts:\",nfc)\n    if fc < nfc and fc > 0: # on small dataset we may need this check\n        print(\"Fraud precentage ceil:\",int(np.ceil(100*fc\/nfc)))    \n        chunk = train[train.hours==h]\n        df_majority = chunk[chunk.isFraud==0]\n        df_minority = chunk[chunk.isFraud==1]\n        maj_len = len(df_majority) \n        min_len = len(df_minority) \n        # Upsample minority class\n        df_minority_upsampled = resample(df_minority, \n                                     replace=True,     # sample with replacement\n                                     n_samples=maj_len,    # to match majority class\n                                     random_state=123) # reproducible results\n     \n    # Combine majority class with upsampled minority class\n        train = pd.concat([train, df_minority_upsampled])\n        del df_majority\n        del df_minority\n        del df_minority_upsampled\nprint(\"Fraud counts\",len(train[train.isFraud == 1]))\nprint(\"Non Fraud counts\",len(train[train.isFraud == 0]))\n","7e46f228":"train = train.sample(frac=1,random_state=100)  # reset index      \ntrain = train.sort_values('hours')\ntest = test.sort_values('hours')","97615703":"Let upsample on an hourly basis","1fb3b055":"* Reference : [Day and Time - powerful predictive feature?](https:\/\/www.kaggle.com\/fchmiel\/day-and-time-powerful-predictive-feature)","b2227406":"* We upsample the data based on the number of fraud entries we can find each hour\n"}}