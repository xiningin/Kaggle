{"cell_type":{"5c8d2fd3":"code","9d5bb468":"code","cb804488":"code","64a19b6e":"code","bbdf7929":"code","e4c0839c":"code","47bcae11":"code","c28d0e5d":"code","84614003":"code","265639a9":"code","9e1abf90":"code","a09aaa0b":"code","595e330f":"code","00f2e233":"code","96aa7047":"code","98b3e926":"code","50e61b25":"code","a2e6a0bb":"code","5e1337cf":"code","a43c3513":"code","7ecfe72b":"code","62821818":"code","b5f8657b":"markdown","6667aa57":"markdown","5150a61e":"markdown"},"source":{"5c8d2fd3":"import numpy as np\nimport pandas as pd\n\nimport xgboost as xgb\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.utils import shuffle","9d5bb468":"df_train = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/train.csv\")","cb804488":"df_train.head()","64a19b6e":"df_test = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/test.csv\")","bbdf7929":"df_test.head()","e4c0839c":"def df_stats(df):\n    df_agg = df.agg(\n        [\n            \"nunique\",\n            (lambda x: x.nunique() \/ len(x) * 100),\n            (lambda x: x.isna().sum()),\n            (lambda x: x.isna().sum() \/ len(x) * 100),\n            (lambda x: x.isin([0]).sum()),\n            (lambda x: x.isin([0]).sum() \/ len(x) * 100),\n        ]\n    ).transpose()\n\n    df_agg.columns = [\n        \"Unique\",\n        \"Percentage of unique\",\n        \"NaNs\",\n        \"Percentage of NaNs\",\n        \"Null values\",\n        \"Percentage of nulls\",\n    ]\n\n    return df_agg","47bcae11":"df_stats(df_train)","c28d0e5d":"df_stats(df_test)","84614003":"# df_train = df_train.drop(columns=\"cat10\")\n# df_test = df_test.drop(columns=\"cat10\")","265639a9":"categorical = np.array(df_train.columns[np.where(df_train.dtypes == \"object\")])\nnumeric = np.array(df_train.columns[np.where(df_train.dtypes == \"float64\")])","9e1abf90":"def smooth(train, test, categorical):\n    mean = train[\"target\"].mean()\n    for i in categorical:\n        agg = train.groupby(i)[\"target\"].agg([\"count\", \"mean\"])\n        count = agg[\"count\"]\n        mean = agg[\"mean\"]\n        weight = 10\n\n        # smoothed mean\n        smooth = (count * mean + weight * mean) \/ (count * weight)\n\n        train[i] = train[i].map(smooth)\n        test[i] = test[i].map(smooth)\n\n    return train, test","a09aaa0b":" df_train, df_test = smooth(df_train, df_test, categorical)","595e330f":"df_train = shuffle(df_train, random_state=142)\nX = df_train.drop(columns=\"target\")\ny = df_train[\"target\"]","00f2e233":"args = {\n    \"max_depth\": 5,\n    \"learning_rate\": 0.09,\n    \"n_estimators\": 1340,\n    \"min_child_weight\": 103,\n    \"gamma\": 0.000108,\n    \"alpha\": 0.0165,\n    \"lambda\": 0.0196,\n    \"colsample_bytree\": 0.42,\n    \"subsample\": 0.658,\n    \"eval_metric\": \"auc\"\n}\n\nxgb_cool = xgb.XGBClassifier(**args)","96aa7047":"params = {\n    \"objective\": \"binary:logistic\",\n    \"grow_policy\": \"lossguide\",\n    \"eval_metric\": \"auc\",\n    \"min_child_weight\": 20,\n    \"colsample_bytree\": 0.3,\n    \"subsample\": 0.7,\n    \"n_estimators\": 4500,\n    \"learning_rate\": 0.1,\n    \"n_jobs\": -1,\n}\nxgb_cool = xgb.XGBRegressor(**params)","98b3e926":"column_transformer = ColumnTransformer(\n    [\n        (\"ohe\", OneHotEncoder(handle_unknown=\"ignore\"), categorical),\n        (\"scaling\", StandardScaler(), numeric),\n    ]\n)\n\npipeline = Pipeline(\n    steps=[(\"onehot_scaling\", column_transformer), (\"xlassifier\", xgb_cool)]\n)","50e61b25":"#cross_val_score(pipeline, X, y, scoring=\"roc_auc\", cv=5)","a2e6a0bb":"pipeline.fit(X, y)","5e1337cf":"y_pred = pipeline.predict(df_test)","a43c3513":"df_submission = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv\")","7ecfe72b":"df_submission[\"target\"] = y_pred","62821818":"df_submission.to_csv(\"submission_6.csv\", index=None)","b5f8657b":"<center><h3> Importing libraries <\/h3><\/center>","6667aa57":"<center><h3> EDA <\/h3><\/center>","5150a61e":"<center><h3> Simple pipeline <\/h3><\/center>"}}