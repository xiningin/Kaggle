{"cell_type":{"346266bd":"code","be6705cc":"code","4ab3dc12":"code","88a174fd":"code","84a81376":"code","be240584":"code","5e6a79d2":"code","43dc41f7":"code","99f7acc1":"code","e959883d":"code","35790a9e":"code","cf2baa71":"code","88b844bc":"code","72a5cb9e":"code","c8e56bb8":"code","c791b2cb":"code","188b20b0":"code","8af218e2":"code","7b07f661":"code","1c5dd143":"code","e0284c6b":"code","b7240122":"code","51afc03e":"code","7a808826":"markdown","84f09e34":"markdown","e64a0743":"markdown","b8c9feeb":"markdown","408bf618":"markdown","f41b164b":"markdown","c48af5d1":"markdown","005787b2":"markdown"},"source":{"346266bd":"from matplotlib import pyplot as plt\nimport pandas as pd\nimport os\nimport torchvision.transforms as tr\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom torch import optim\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nimport pydicom\nimport glob\nimport collections\nfrom datetime import datetime\nfrom skimage import measure\nfrom skimage.measure import block_reduce\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nfrom skimage.transform import resize\nimport torchvision.models as models\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.autograd import Variable\nimport seaborn as sns\nfrom collections import defaultdict","be6705cc":"img_array = np.load('..\/input\/covid-segmentation\/images_medseg.npy')","4ab3dc12":"#for i in range(0,(len(img_array)-1)):\n#    plt.imshow(img_array[i][:,:,0])\n#    plt.imsave('.\/'+str(i)+'.jpeg',img_array[i][:,:,0])\n    ","88a174fd":"mask_array = np.load('..\/input\/covid-segmentation\/masks_medseg.npy')","84a81376":"#for i in range(0,(len(mask_array)-1)):\n #   plt.imshow(mask_array[i][:,:,0])\n  #  plt.imsave('.\/'+'mask_'+str(i)+'.jpg',mask_array[i][:,:,0])","be240584":"#for i in range(0,(len(mask_array)-1)):\n #   plt.imshow(img_array[i][:,:,0])\n  #  plt.show()\n   # plt.imshow(mask_array[i][:,:,0])\n    #plt.show()","5e6a79d2":"#import cv2\n#img = cv2.imread('.\/45.jpg')","43dc41f7":"img_array.shape","99f7acc1":"img_arrays = [i[:,:,0] for i in img_array]\nmask_arrays = [j for j in mask_array]","e959883d":"print(len(img_arrays),len(mask_array))","35790a9e":"from collections import OrderedDict\nimport torch\nimport torch.nn as nn\n\nclass UNet(nn.Module):\n\n    def __init__(self, in_channels=1, out_channels=4, init_features=32):\n        super(UNet, self).__init__()\n\n        features = init_features\n        self.encoder1 = UNet._block(in_channels, features, name=\"enc1\")\n        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)\n        self.encoder2 = UNet._block(features, features * 2, name=\"enc2\")\n        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)\n        self.encoder3 = UNet._block(features * 2, features * 4, name=\"enc3\")\n        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)\n        self.encoder4 = UNet._block(features * 4, features * 8, name=\"enc4\")\n        self.pool4 = nn.MaxPool2d(kernel_size=2, stride=2)\n\n        self.bottleneck = UNet._block(features * 8, features * 16, name=\"bottleneck\")\n\n        self.upconv4 = nn.ConvTranspose2d(\n            features * 16, features * 8, kernel_size=2, stride=2\n        )\n        self.decoder4 = UNet._block((features * 8) * 2, features * 8, name=\"dec4\")\n        self.upconv3 = nn.ConvTranspose2d(\n            features * 8, features * 4, kernel_size=2, stride=2\n        )\n        self.decoder3 = UNet._block((features * 4) * 2, features * 4, name=\"dec3\")\n        self.upconv2 = nn.ConvTranspose2d(\n            features * 4, features * 2, kernel_size=2, stride=2\n        )\n        self.decoder2 = UNet._block((features * 2) * 2, features * 2, name=\"dec2\")\n        self.upconv1 = nn.ConvTranspose2d(\n            features * 2, features, kernel_size=2, stride=2\n        )\n        self.decoder1 = UNet._block(features * 2, features, name=\"dec1\")\n\n        self.conv = nn.Conv2d(\n            in_channels=features, out_channels=out_channels, kernel_size=1\n        )\n\n    def forward(self, x):\n        enc1 = self.encoder1(x)\n        enc2 = self.encoder2(self.pool1(enc1))\n        enc3 = self.encoder3(self.pool2(enc2))\n        enc4 = self.encoder4(self.pool3(enc3))\n\n        bottleneck = self.bottleneck(self.pool4(enc4))\n\n        dec4 = self.upconv4(bottleneck)\n        dec4 = torch.cat((dec4, enc4), dim=1)\n        dec4 = self.decoder4(dec4)\n        dec3 = self.upconv3(dec4)\n        dec3 = torch.cat((dec3, enc3), dim=1)\n        dec3 = self.decoder3(dec3)\n        dec2 = self.upconv2(dec3)\n        dec2 = torch.cat((dec2, enc2), dim=1)\n        dec2 = self.decoder2(dec2)\n        dec1 = self.upconv1(dec2)\n        dec1 = torch.cat((dec1, enc1), dim=1)\n        dec1 = self.decoder1(dec1)\n        return torch.sigmoid(self.conv(dec1))\n\n    @staticmethod\n    def _block(in_channels, features, name):\n        return nn.Sequential(\n            OrderedDict(\n                [\n                    (\n                        name + \"conv1\",\n                        nn.Conv2d(\n                            in_channels=in_channels,\n                            out_channels=features,\n                            kernel_size=3,\n                            padding=1,\n                            bias=False,\n                        ),\n                    ),\n                    (name + \"norm1\", nn.BatchNorm2d(num_features=features)),\n                    (name + \"relu1\", nn.ReLU(inplace=True)),\n                    (\n                        name + \"conv2\",\n                        nn.Conv2d(\n                            in_channels=features,\n                            out_channels=features,\n                            kernel_size=3,\n                            padding=1,\n                            bias=False,\n                        ),\n                    ),\n                    (name + \"norm2\", nn.BatchNorm2d(num_features=features)),\n                    (name + \"relu2\", nn.ReLU(inplace=True)),\n                ]\n            )\n        )","cf2baa71":"model_unet = UNet(in_channels=1, out_channels=4, init_features=32)\nmodel_unet = model_unet.cuda()","88b844bc":"def dice_loss(pred, target, smooth = 1.):\n    pred = pred.contiguous()\n    target = target.contiguous()    \n\n    intersection = (pred * target).sum(dim=2).sum(dim=2)\n    \n    loss = (1 - ((2. * intersection + smooth) \/ (pred.sum(dim=2).sum(dim=2) + target.sum(dim=2).sum(dim=2) + smooth)))\n    \n    return loss.mean()","72a5cb9e":"def calc_loss(pred, target, metrics, bce_weight=0.5):\n    bce = F.binary_cross_entropy_with_logits(pred, target)\n        \n    pred = F.sigmoid(pred)\n    dice = dice_loss(pred, target)\n    \n    loss = bce * bce_weight + dice * (1 - bce_weight)\n    \n    metrics['bce'] += bce.data.cpu().numpy() * target.size(0)\n    metrics['dice'] += dice.data.cpu().numpy() * target.size(0)\n    metrics['loss'] += loss.data.cpu().numpy() * target.size(0)\n    \n    return loss","c8e56bb8":"metrics = defaultdict(float)","c791b2cb":"import torch\nfrom torch import Tensor\nimport torch.nn as nn\nfrom typing import Type, Any, Callable, Union, List, Optional\nfrom torch.hub import load_state_dict_from_url\n#from torch.utils.model_zoo import load_url as load_state_dict_from_url\n\n\n__all__ = ['ResNet', 'resnet18', 'resnet34', 'resnet50', 'resnet101',\n           'resnet152', 'resnext50_32x4d', 'resnext101_32x8d',\n           'wide_resnet50_2', 'wide_resnet101_2']\n\n\nmodel_urls = {\n    'resnet18': 'https:\/\/download.pytorch.org\/models\/resnet18-5c106cde.pth',\n    'resnet34': 'https:\/\/download.pytorch.org\/models\/resnet34-333f7ec4.pth',\n    'resnet50': 'https:\/\/download.pytorch.org\/models\/resnet50-19c8e357.pth',\n    'resnet101': 'https:\/\/download.pytorch.org\/models\/resnet101-5d3b4d8f.pth',\n    'resnet152': 'https:\/\/download.pytorch.org\/models\/resnet152-b121ed2d.pth',\n    'resnext50_32x4d': 'https:\/\/download.pytorch.org\/models\/resnext50_32x4d-7cdf4587.pth',\n    'resnext101_32x8d': 'https:\/\/download.pytorch.org\/models\/resnext101_32x8d-8ba56ff5.pth',\n    'wide_resnet50_2': 'https:\/\/download.pytorch.org\/models\/wide_resnet50_2-95faca4d.pth',\n    'wide_resnet101_2': 'https:\/\/download.pytorch.org\/models\/wide_resnet101_2-32ee1156.pth',\n}\n\n\ndef conv3x3(in_planes: int, out_planes: int, stride: int = 1, groups: int = 1, dilation: int = 1) -> nn.Conv2d:\n    \"\"\"3x3 convolution with padding\"\"\"\n    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,\n                     padding=dilation, groups=groups, bias=False, dilation=dilation)\n\n\ndef conv1x1(in_planes: int, out_planes: int, stride: int = 1) -> nn.Conv2d:\n    \"\"\"1x1 convolution\"\"\"\n    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)\n\n\nclass BasicBlock(nn.Module):\n    expansion: int = 1\n\n    def __init__(\n        self,\n        inplanes: int,\n        planes: int,\n        stride: int = 1,\n        downsample: Optional[nn.Module] = None,\n        groups: int = 1,\n        base_width: int = 64,\n        dilation: int = 1,\n        norm_layer: Optional[Callable[..., nn.Module]] = None\n    ) -> None:\n        super(BasicBlock, self).__init__()\n        if norm_layer is None:\n            norm_layer = nn.BatchNorm2d\n        if groups != 1 or base_width != 64:\n            raise ValueError('BasicBlock only supports groups=1 and base_width=64')\n        if dilation > 1:\n            raise NotImplementedError(\"Dilation > 1 not supported in BasicBlock\")\n        # Both self.conv1 and self.downsample layers downsample the input when stride != 1\n        self.conv1 = conv3x3(inplanes, planes, stride)\n        self.bn1 = norm_layer(planes)\n        self.relu = nn.ReLU(inplace=True)\n        self.conv2 = conv3x3(planes, planes)\n        self.bn2 = norm_layer(planes)\n        self.downsample = downsample\n        self.stride = stride\n\n    def forward(self, x: Tensor) -> Tensor:\n        identity = x\n\n        out = self.conv1(x)\n        out = self.bn1(out)\n        out = self.relu(out)\n\n        out = self.conv2(out)\n        out = self.bn2(out)\n\n        if self.downsample is not None:\n            identity = self.downsample(x)\n\n        out += identity\n        out = self.relu(out)\n\n        return out\n\n\nclass Bottleneck(nn.Module):\n    # Bottleneck in torchvision places the stride for downsampling at 3x3 convolution(self.conv2)\n    # while original implementation places the stride at the first 1x1 convolution(self.conv1)\n    # according to \"Deep residual learning for image recognition\"https:\/\/arxiv.org\/abs\/1512.03385.\n    # This variant is also known as ResNet V1.5 and improves accuracy according to\n    # https:\/\/ngc.nvidia.com\/catalog\/model-scripts\/nvidia:resnet_50_v1_5_for_pytorch.\n\n    expansion: int = 4\n\n    def __init__(\n        self,\n        inplanes: int,\n        planes: int,\n        stride: int = 1,\n        downsample: Optional[nn.Module] = None,\n        groups: int = 1,\n        base_width: int = 64,\n        dilation: int = 1,\n        norm_layer: Optional[Callable[..., nn.Module]] = None\n    ) -> None:\n        super(Bottleneck, self).__init__()\n        if norm_layer is None:\n            norm_layer = nn.BatchNorm2d\n        width = int(planes * (base_width \/ 64.)) * groups\n        # Both self.conv2 and self.downsample layers downsample the input when stride != 1\n        self.conv1 = conv1x1(inplanes, width)\n        self.bn1 = norm_layer(width)\n        self.conv2 = conv3x3(width, width, stride, groups, dilation)\n        self.bn2 = norm_layer(width)\n        self.conv3 = conv1x1(width, planes * self.expansion)\n        self.bn3 = norm_layer(planes * self.expansion)\n        self.relu = nn.ReLU(inplace=True)\n        self.downsample = downsample\n        self.stride = stride\n\n    def forward(self, x: Tensor) -> Tensor:\n        identity = x\n\n        out = self.conv1(x)\n        out = self.bn1(out)\n        out = self.relu(out)\n\n        out = self.conv2(out)\n        out = self.bn2(out)\n        out = self.relu(out)\n\n        out = self.conv3(out)\n        out = self.bn3(out)\n\n        if self.downsample is not None:\n            identity = self.downsample(x)\n\n        out += identity\n        out = self.relu(out)\n\n        return out\n\n\nclass ResNet(nn.Module):\n\n    def __init__(\n        self,\n        block: Type[Union[BasicBlock, Bottleneck]],\n        layers: List[int],\n        num_classes: int = 64,\n        zero_init_residual: bool = False,\n        groups: int = 1,\n        width_per_group: int = 64,\n        replace_stride_with_dilation: Optional[List[bool]] = None,\n        norm_layer: Optional[Callable[..., nn.Module]] = None\n    ) -> None:\n        super(ResNet, self).__init__()\n        if norm_layer is None:\n            norm_layer = nn.BatchNorm2d\n        self._norm_layer = norm_layer\n\n        self.inplanes = 64\n        self.dilation = 1\n        if replace_stride_with_dilation is None:\n            # each element in the tuple indicates if we should replace\n            # the 2x2 stride with a dilated convolution instead\n            replace_stride_with_dilation = [False, False, False]\n        if len(replace_stride_with_dilation) != 3:\n            raise ValueError(\"replace_stride_with_dilation should be None \"\n                             \"or a 3-element tuple, got {}\".format(replace_stride_with_dilation))\n        self.groups = groups\n        self.base_width = width_per_group\n        self.conv1 = nn.Conv2d(4, self.inplanes, kernel_size=7, stride=2, padding=3,\n                               bias=False)\n        self.bn1 = norm_layer(self.inplanes)\n        self.relu = nn.ReLU(inplace=True)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n        self.layer1 = self._make_layer(block, 64, layers[0])\n        self.layer2 = self._make_layer(block, 128, layers[1], stride=2,\n                                       dilate=replace_stride_with_dilation[0])\n        self.layer3 = self._make_layer(block, 256, layers[2], stride=2,\n                                       dilate=replace_stride_with_dilation[1])\n        self.layer4 = self._make_layer(block, 512, layers[3], stride=2,\n                                       dilate=replace_stride_with_dilation[2])\n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.fc = nn.Linear(512 * block.expansion, num_classes)\n\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n            elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n                nn.init.constant_(m.weight, 1)\n                nn.init.constant_(m.bias, 0)\n\n        # Zero-initialize the last BN in each residual branch,\n        # so that the residual branch starts with zeros, and each residual block behaves like an identity.\n        # This improves the model by 0.2~0.3% according to https:\/\/arxiv.org\/abs\/1706.02677\n        if zero_init_residual:\n            for m in self.modules():\n                if isinstance(m, Bottleneck):\n                    nn.init.constant_(m.bn3.weight, 0)  # type: ignore[arg-type]\n                elif isinstance(m, BasicBlock):\n                    nn.init.constant_(m.bn2.weight, 0)  # type: ignore[arg-type]\n\n    def _make_layer(self, block: Type[Union[BasicBlock, Bottleneck]], planes: int, blocks: int,\n                    stride: int = 1, dilate: bool = False) -> nn.Sequential:\n        norm_layer = self._norm_layer\n        downsample = None\n        previous_dilation = self.dilation\n        if dilate:\n            self.dilation *= stride\n            stride = 1\n        if stride != 1 or self.inplanes != planes * block.expansion:\n            downsample = nn.Sequential(\n                conv1x1(self.inplanes, planes * block.expansion, stride),\n                norm_layer(planes * block.expansion),\n            )\n\n        layers = []\n        layers.append(block(self.inplanes, planes, stride, downsample, self.groups,\n                            self.base_width, previous_dilation, norm_layer))\n        self.inplanes = planes * block.expansion\n        for _ in range(1, blocks):\n            layers.append(block(self.inplanes, planes, groups=self.groups,\n                                base_width=self.base_width, dilation=self.dilation,\n                                norm_layer=norm_layer))\n\n        return nn.Sequential(*layers)\n\n    def _forward_impl(self, x: Tensor) -> Tensor:\n        # See note [TorchScript super()]\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.relu(x)\n        x = self.maxpool(x)\n\n        x = self.layer1(x)\n        x = self.layer2(x)\n        x = self.layer3(x)\n        x = self.layer4(x)\n        \n        #x = self.avgpool(x)\n        #x = torch.flatten(x, 1)\n        #x = self.fc(x)\n\n        return x\n\n    def forward(self, x: Tensor) -> Tensor:\n        return self._forward_impl(x)\n\n\ndef _resnet(\n    arch: str,\n    block: Type[Union[BasicBlock, Bottleneck]],\n    layers: List[int],\n    pretrained: bool,\n    progress: bool,\n    **kwargs: Any\n) -> ResNet:\n    model = ResNet(block, layers, **kwargs)\n    if pretrained:\n        state_dict = load_state_dict_from_url(model_urls[arch],\n                                              progress=progress)\n        model.load_state_dict(state_dict)\n    return model\n\n\n\ndef resnet18(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:\n    r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https:\/\/arxiv.org\/pdf\/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"\n    return _resnet('resnet18', BasicBlock, [2, 2, 2, 2], pretrained, progress,\n                   **kwargs)\n\n\ndef resnet34(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:\n    r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https:\/\/arxiv.org\/pdf\/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"\n    return _resnet('resnet34', BasicBlock, [3, 4, 6, 3], pretrained, progress,\n                   **kwargs)\n\n\ndef resnet50(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:\n    r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https:\/\/arxiv.org\/pdf\/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"\n    return _resnet('resnet50', Bottleneck, [3, 4, 6, 3], pretrained, progress,\n                   **kwargs)\n\n\ndef resnet101(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:\n    r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https:\/\/arxiv.org\/pdf\/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"\n    return _resnet('resnet101', Bottleneck, [3, 4, 23, 3], pretrained, progress,\n                   **kwargs)\n\n\ndef resnet152(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:\n    r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https:\/\/arxiv.org\/pdf\/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"\n    return _resnet('resnet152', Bottleneck, [3, 8, 36, 3], pretrained, progress,\n                   **kwargs)\n\n\ndef resnext50_32x4d(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:\n    r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https:\/\/arxiv.org\/pdf\/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"\n    kwargs['groups'] = 32\n    kwargs['width_per_group'] = 4\n    return _resnet('resnext50_32x4d', Bottleneck, [3, 4, 6, 3],\n                   pretrained, progress, **kwargs)\n\n\ndef resnext101_32x8d(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:\n    r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https:\/\/arxiv.org\/pdf\/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"\n    kwargs['groups'] = 32\n    kwargs['width_per_group'] = 8\n    return _resnet('resnext101_32x8d', Bottleneck, [3, 4, 23, 3],\n                   pretrained, progress, **kwargs)\n\n\ndef wide_resnet50_2(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:\n    r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https:\/\/arxiv.org\/pdf\/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"\n    kwargs['width_per_group'] = 64 * 2\n    return _resnet('wide_resnet50_2', Bottleneck, [3, 4, 6, 3],\n                   pretrained, progress, **kwargs)\n\n\ndef wide_resnet101_2(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> ResNet:\n    r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https:\/\/arxiv.org\/pdf\/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"\n    kwargs['width_per_group'] = 64 * 2\n    return _resnet('wide_resnet101_2', Bottleneck, [3, 4, 23, 3],\n                   pretrained, progress, **kwargs)\nmodel_resnet = resnet50()","188b20b0":"model_unet.load_state_dict(torch.load('..\/input\/unet-model-output\/final_model500.pth'))","8af218e2":"class traindataset(Dataset):\n    def __init__(self,img_list,mask_list,model,transform=None):\n        self.mask_list = mask_list\n        self.img_list = img_list\n        self.model = model\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.img_list)\n\n    def __getitem__(self, index):\n        img_list = self.img_list\n        mask_list = self.mask_list\n        model = self.model\n        img_array = img_list[index]\n        mask_array = mask_list[index]\n        mask_arrays = mask_array.astype(np.float32())\n        img_numpy = img_array.astype(np.float32())\n        img_tensor = torch.from_numpy(img_numpy).unsqueeze(0)\n        img_cuda = img_tensor.unsqueeze(0).cuda()\n        outputs = model(img_cuda)\n        predict = outputs.cpu().detach().squeeze()\n        m = mask_arrays[:,:,0]\n        m1 = mask_arrays[:,:,1]\n        m2 = mask_arrays[:,:,2]\n        #m3 = mask_arrays[:,:,3]\n        mm = np.transpose(np.stack([m,m,m],axis=0))\n        mm1 = np.transpose(np.stack([m1,m1,m1],axis=0))\n        mm2 = np.transpose(np.stack([m2,m2,m2],axis=0))\n        #mm3 = np.transpose(np.stack([m3,m3,m3],axis=0))\n        tt = tr.ToTensor()(img_numpy)\n        tt = np.transpose(tt,(2,1,0))\n        target=np.where(mm,(255,0,0),tt)\n        target1=np.where(mm1,(0,255,0),target)\n        target2=np.where(mm2,(0,0,255),target1)\n        target2 = target2.astype(np.float32())\n        target_tensor = tr.ToTensor()(target2)\n        train_image = np.stack([img_tensor,predict[0].unsqueeze(0),predict[1].unsqueeze(0),predict[2].unsqueeze(0)],axis = 1)\n        print(train_image.shape)\n        return train_image.squeeze(),target_tensor\ndataset = traindataset(img_list = img_arrays,mask_list =mask_arrays,model = model_unet)\ndataloader = DataLoader(dataset=dataset, shuffle=True, batch_size=1)","7b07f661":"model_resnet = model_resnet.cuda()\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model_resnet.parameters(), lr=0.001)","1c5dd143":"epochs = 40\nsteps = 0\nprint_every = 10\ntrain_losses, train_accuracy = [], []\nfor epoch in range(epochs):\n    model_resnet.train()\n    size = 0\n    running_loss = 0\n    acc = 0\n    for a,(image_train, y_train) in enumerate(dataloader):\n        steps += 1\n        image_train, y_target = image_train.cuda(), y_train.cuda()\n        image_train = Variable(image_train,requires_grad=True)\n        optimizer.zero_grad()\n        print('input shape',image_train.shape)\n        print('target shape',y_target.shape)\n        y_predtrain = model_resnet.forward(image_train)\n        print('input shape',y_predtrain.shape)\n        print('target shape',y_target.shape)\n        loss = calc_loss(y_predtrain, y_target, metrics)\n        #loss = criterion(y_predtrain, y_train)\n        #loss = torch.cuda.FloatTensor(loss).float()\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n        ps = torch.exp(y_predtrain)\n        top_p = torch.max(y_predtrain, 1)\n        top_class = torch.argmax(y_predtrain,dim = 1)\n        equals = top_class == y_target\n        print(torch.mean(equals.type(torch.FloatTensor)).item())\n        acc += torch.mean(equals.type(torch.FloatTensor)).item()\n        size += image_train.shape[0]\n        model_resnet.eval()\n        print(f\"Epoch {epoch+1}\/{epochs}.. \"\n              f\"Train loss: {running_loss\/print_every:.3f}.. \"\n              f\"Train accuracy: {acc\/len(dataloader):.3f}\")\n        break\n    #torch.save(model.state_dict(),'.\/'+str(epoch)+'model.pth')\n    #print('model saved')\n    train_losses.append(float(running_loss)\/float(size))\n    train_accuracy.append(float(acc)\/float(size))\n    print('train_losses',epoch,train_losses)\n    print('train_accuracy',epoch,train_accuracy)\ntorch.save(model_resnet.state_dict(),'.\/final_resnetmodel5001.pth')\nprint('model saved')\nprint('train_losses',epoch,train_losses)\nprint('train_accuracy',epoch,train_accuracy)","e0284c6b":"from collections import OrderedDict\nimport torch\nimport torch.nn as nn\n\nclass unet(nn.Module):\n\n    def __init__(self, in_channels=4, out_channels=3, init_features=32):\n        super(unet, self).__init__()\n\n        features = init_features\n        self.encoder1 = UNet._block(in_channels, features, name=\"enc1\")\n        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)\n        self.encoder2 = UNet._block(features, features * 2, name=\"enc2\")\n        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)\n        self.encoder3 = UNet._block(features * 2, features * 4, name=\"enc3\")\n        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)\n        self.encoder4 = UNet._block(features * 4, features * 8, name=\"enc4\")\n        self.pool4 = nn.MaxPool2d(kernel_size=2, stride=2)\n\n        self.bottleneck = UNet._block(features * 8, features * 16, name=\"bottleneck\")\n\n        self.upconv4 = nn.ConvTranspose2d(\n            features * 16, features * 8, kernel_size=2, stride=2\n        )\n        self.decoder4 = UNet._block((features * 8) * 2, features * 8, name=\"dec4\")\n        self.upconv3 = nn.ConvTranspose2d(\n            features * 8, features * 4, kernel_size=2, stride=2\n        )\n        self.decoder3 = UNet._block((features * 4) * 2, features * 4, name=\"dec3\")\n        self.upconv2 = nn.ConvTranspose2d(\n            features * 4, features * 2, kernel_size=2, stride=2\n        )\n        self.decoder2 = UNet._block((features * 2) * 2, features * 2, name=\"dec2\")\n        self.upconv1 = nn.ConvTranspose2d(\n            features * 2, features, kernel_size=2, stride=2\n        )\n        self.decoder1 = UNet._block(features * 2, features, name=\"dec1\")\n\n        self.conv = nn.Conv2d(\n            in_channels=features, out_channels=out_channels, kernel_size=1\n        )\n\n    def forward(self, x):\n        enc1 = self.encoder1(x)\n        enc2 = self.encoder2(self.pool1(enc1))\n        enc3 = self.encoder3(self.pool2(enc2))\n        enc4 = self.encoder4(self.pool3(enc3))\n\n        bottleneck = self.bottleneck(self.pool4(enc4))\n\n        dec4 = self.upconv4(bottleneck)\n        dec4 = torch.cat((dec4, enc4), dim=1)\n        dec4 = self.decoder4(dec4)\n        dec3 = self.upconv3(dec4)\n        dec3 = torch.cat((dec3, enc3), dim=1)\n        dec3 = self.decoder3(dec3)\n        dec2 = self.upconv2(dec3)\n        dec2 = torch.cat((dec2, enc2), dim=1)\n        dec2 = self.decoder2(dec2)\n        dec1 = self.upconv1(dec2)\n        dec1 = torch.cat((dec1, enc1), dim=1)\n        dec1 = self.decoder1(dec1)\n        return torch.sigmoid(self.conv(dec1))\n\n    @staticmethod\n    def _block(in_channels, features, name):\n        return nn.Sequential(\n            OrderedDict(\n                [\n                    (\n                        name + \"conv1\",\n                        nn.Conv2d(\n                            in_channels=in_channels,\n                            out_channels=features,\n                            kernel_size=3,\n                            padding=1,\n                            bias=False,\n                        ),\n                    ),\n                    (name + \"norm1\", nn.BatchNorm2d(num_features=features)),\n                    (name + \"relu1\", nn.ReLU(inplace=True)),\n                    (\n                        name + \"conv2\",\n                        nn.Conv2d(\n                            in_channels=features,\n                            out_channels=features,\n                            kernel_size=3,\n                            padding=1,\n                            bias=False,\n                        ),\n                    ),\n                    (name + \"norm2\", nn.BatchNorm2d(num_features=features)),\n                    (name + \"relu2\", nn.ReLU(inplace=True)),\n                ]\n            )\n        )\nmodel_resnet = unet(in_channels=4, out_channels=3, init_features=32)\nmodel_resnet = model_resnet.cuda()","b7240122":"model_resnet.load_state_dict(torch.load('.\/final_resnetmodel5001.pth'))\nwith torch.no_grad():\n    for (images, labels) in dataloader:\n        image = images\n        images = image.cuda()\n        plt.imshow(image.squeeze()[1])\n        plt.show()\n        mask_tensor = np.transpose(labels)\n        outputs = model_resnet(images)\n        predict = outputs.cpu()\n        label = labels.squeeze()\n        plt.imshow(np.transpose(label.squeeze()))\n        plt.show()\n        print(predict.shape)\n        p = predict.squeeze()\n        f_predict = np.transpose(np.stack([p[0],p[1],p[2]],axis = 0),(2,1,0))\n        plt.imshow(p[0])\n        plt.show()\n        plt.imshow(p[1])\n        plt.show()\n        plt.imshow(p[2])\n        plt.show()\n        break","51afc03e":"pr = p.squeeze(0).numpy()\npr = pr.transpose(1,2,0)\nplt.imshow(pr)\nplt.show()","7a808826":"class traindataset(Dataset):\n    def __init__(self,img_list,mask_list,transform=None):\n        self.mask_list = mask_list\n        self.img_list = img_list\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.img_list)\n\n    def __getitem__(self, index):\n        img_list = self.img_list\n        mask_list = self.mask_list\n        img_array = img_list[index]\n        mask_arrays = mask_list[index]\n        #mask_array1 = mask_arrays[:,:,0]\n        #mask_array2 = mask_arrays[:,:,1]\n        #mask_array3 = mask_arrays[:,:,2]\n        #mask_array4 = mask_arrays[:,:,3]\n        img_numpy = img_array.astype(np.float32())\n        img_tensor = torch.from_numpy(img_numpy).unsqueeze(0)\n        #mask_numpy1 = mask_array1.astype(np.float32())\n        #mask_tensor1 = torch.from_numpy(mask_numpy1).unsqueeze(0)\n        #mask_numpy2 = mask_array2.astype(np.float32())\n        #mask_tensor2 = torch.from_numpy(mask_numpy2).unsqueeze(0)\n        #mask_numpy3 = mask_array3.astype(np.float32())\n        #mask_tensor3 = torch.from_numpy(mask_numpy3).unsqueeze(0)\n        mask_numpy = mask_arrays.astype(np.float32())\n        mask_tensor = torch.from_numpy(mask_numpy)\n        mask_tensor = np.transpose(mask_tensor, (2,0,1))\n        return img_tensor,mask_tensor\ndataset = traindataset(img_list = img_arrays,mask_list =mask_arrays)\ndataloader = DataLoader(dataset=dataset, shuffle=True, batch_size=1)","84f09e34":"from collections import OrderedDict\nimport torch\nimport torch.nn as nn\n\nclass unet(nn.Module):\n\n    def __init__(self, in_channels=4, out_channels=3, init_features=32):\n        super(unet, self).__init__()\n\n        features = init_features\n        self.encoder1 = UNet._block(in_channels, features, name=\"enc1\")\n        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)\n        self.encoder2 = UNet._block(features, features * 2, name=\"enc2\")\n        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)\n        self.encoder3 = UNet._block(features * 2, features * 4, name=\"enc3\")\n        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)\n        self.encoder4 = UNet._block(features * 4, features * 8, name=\"enc4\")\n        self.pool4 = nn.MaxPool2d(kernel_size=2, stride=2)\n\n        self.bottleneck = UNet._block(features * 8, features * 16, name=\"bottleneck\")\n\n        self.upconv4 = nn.ConvTranspose2d(\n            features * 16, features * 8, kernel_size=2, stride=2\n        )\n        self.decoder4 = UNet._block((features * 8) * 2, features * 8, name=\"dec4\")\n        self.upconv3 = nn.ConvTranspose2d(\n            features * 8, features * 4, kernel_size=2, stride=2\n        )\n        self.decoder3 = UNet._block((features * 4) * 2, features * 4, name=\"dec3\")\n        self.upconv2 = nn.ConvTranspose2d(\n            features * 4, features * 2, kernel_size=2, stride=2\n        )\n        self.decoder2 = UNet._block((features * 2) * 2, features * 2, name=\"dec2\")\n        self.upconv1 = nn.ConvTranspose2d(\n            features * 2, features, kernel_size=2, stride=2\n        )\n        self.decoder1 = UNet._block(features * 2, features, name=\"dec1\")\n\n        self.conv = nn.Conv2d(\n            in_channels=features, out_channels=out_channels, kernel_size=1\n        )\n\n    def forward(self, x):\n        enc1 = self.encoder1(x)\n        enc2 = self.encoder2(self.pool1(enc1))\n        enc3 = self.encoder3(self.pool2(enc2))\n        enc4 = self.encoder4(self.pool3(enc3))\n\n        bottleneck = self.bottleneck(self.pool4(enc4))\n\n        dec4 = self.upconv4(bottleneck)\n        dec4 = torch.cat((dec4, enc4), dim=1)\n        dec4 = self.decoder4(dec4)\n        dec3 = self.upconv3(dec4)\n        dec3 = torch.cat((dec3, enc3), dim=1)\n        dec3 = self.decoder3(dec3)\n        dec2 = self.upconv2(dec3)\n        dec2 = torch.cat((dec2, enc2), dim=1)\n        dec2 = self.decoder2(dec2)\n        dec1 = self.upconv1(dec2)\n        dec1 = torch.cat((dec1, enc1), dim=1)\n        dec1 = self.decoder1(dec1)\n        return torch.sigmoid(self.conv(dec1))\n\n    @staticmethod\n    def _block(in_channels, features, name):\n        return nn.Sequential(\n            OrderedDict(\n                [\n                    (\n                        name + \"conv1\",\n                        nn.Conv2d(\n                            in_channels=in_channels,\n                            out_channels=features,\n                            kernel_size=3,\n                            padding=1,\n                            bias=False,\n                        ),\n                    ),\n                    (name + \"norm1\", nn.BatchNorm2d(num_features=features)),\n                    (name + \"relu1\", nn.ReLU(inplace=True)),\n                    (\n                        name + \"conv2\",\n                        nn.Conv2d(\n                            in_channels=features,\n                            out_channels=features,\n                            kernel_size=3,\n                            padding=1,\n                            bias=False,\n                        ),\n                    ),\n                    (name + \"norm2\", nn.BatchNorm2d(num_features=features)),\n                    (name + \"relu2\", nn.ReLU(inplace=True)),\n                ]\n            )\n        )\nmodel_resnet = unet(in_channels=4, out_channels=3, init_features=32)\nmodel_resnet = model_resnet.cuda()\ncriterion = nn.MSELoss()\noptimizer = optim.Adam(model_resnet.parameters(), lr=0.001)","e64a0743":"epochs = 1\nsteps = 0\nprint_every = 10\ntrain_losses, train_accuracy = [], []\n#model.load_state_dict(torch.load('.\/final_model.pth'))\nfor epoch in range(epochs):\n    model_unet.train()\n    size = 0\n    running_loss = 0\n    acc = 0\n    for a,(image_train, y_train) in enumerate(dataloader):\n        steps += 1\n        image_train, y_train = image_train.cuda(), y_train.cuda()\n        image_train = Variable(image_train,requires_grad=True)\n        optimizer.zero_grad()\n        y_predtrain = model_unet.forward(image_train)\n        #y_train=y_train.type(torch.LongTensor)\n        loss = calc_loss(y_predtrain, y_train, metrics)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n        ps = torch.exp(y_predtrain)\n        top_p = torch.max(y_predtrain, 1)\n        top_class = torch.argmax(y_predtrain,dim = 1)\n        equals = top_class == y_train\n        print(torch.mean(equals.type(torch.FloatTensor)).item())\n        acc += torch.mean(equals.type(torch.FloatTensor)).item()\n        size += image_train.shape[0]\n        model_unet.eval()\n        print(f\"Epoch {epoch+1}\/{epochs}.. \"\n              f\"Train loss: {running_loss\/print_every:.3f}.. \"\n              f\"Train accuracy: {acc\/len(dataloader):.3f}\")\n    #torch.save(model.state_dict(),'.\/'+str(epoch)+'model.pth')\n    #print('model saved')\n    train_losses.append(float(running_loss)\/float(size))\n    train_accuracy.append(float(acc)\/float(size))\n    print('train_losses',epoch,train_losses)\n    print('train_accuracy',epoch,train_accuracy)\ntorch.save(model_unet.state_dict(),'.\/final_model500.pth')\nprint('model saved')\nprint('train_losses',epoch,train_losses)\nprint('train_accuracy',epoch,train_accuracy)","b8c9feeb":"model_unet.load_state_dict(torch.load('..\/input\/unet-model-output\/final_model500.pth'))\niters = []\np_label = []\ni_label = []\nwith torch.no_grad():\n    correct = 0\n    total = 0\n    i = 0\n    for (images, labels) in dataloader:\n        images = images.cuda()\n        mask_tensor = np.transpose(labels)\n        labels = labels.cuda()\n        outputs = model_unet(images)\n        _, predict = torch.max(outputs.data, 1)\n        total+=labels.size(0)\n        correct+=(predict==labels).sum().item()\n        print(correct)\n        i += 1\n        predict = predict.cpu()\n        labels = labels.cpu()\n        label = labels.squeeze()\n        plt.imshow(predict.squeeze())\n        break","408bf618":"**U-net model training** ","f41b164b":"model_unet = model_unet.cuda()\ncriterion = nn.NLLLoss()\noptimizer = optim.Adam(model_unet.parameters(), lr=0.0001)","c48af5d1":"**Validation**","005787b2":"**Data_loader**"}}