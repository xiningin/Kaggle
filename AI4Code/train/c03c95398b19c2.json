{"cell_type":{"32e8e989":"code","d551a176":"code","0a612131":"code","3a21cfbe":"code","81f9f42f":"code","0019ad03":"code","c3b1bc56":"code","96676e52":"code","ec916c9f":"code","a2bbe3d5":"code","7bc9e30b":"code","7146cfae":"code","1e8cb76c":"code","8c5d34dd":"code","91b77bf3":"code","4f2a4f9a":"code","45f39cc0":"code","c5d2112d":"code","752db98c":"code","1c07f5b6":"code","075c599d":"code","e90deb20":"code","f21f25e8":"code","feb7dea4":"code","5b9b62ca":"code","5ab52dee":"code","0566d32e":"code","753623a7":"code","04481f97":"markdown","d3058ca5":"markdown","4dfeaa78":"markdown","a94b8acf":"markdown","3669dfbc":"markdown","bc6f759d":"markdown","b94f9159":"markdown","dbe0d558":"markdown","abd7854b":"markdown","cd2899eb":"markdown","e2ad5689":"markdown","e2f0a8cf":"markdown","c4ad08bf":"markdown","c39d56fe":"markdown","343c9bea":"markdown","47930cf0":"markdown","99214041":"markdown","26de883b":"markdown"},"source":{"32e8e989":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dropout,Dense, Flatten, BatchNormalization, Conv2D, MaxPooling2D, Lambda\nfrom tensorflow.keras.optimizers import Adam, RMSprop\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc\nimport itertools\nfrom sklearn import metrics\nfrom keras.models import load_model\nimport os\nimport shutil\nfrom keras import backend as K\nimport random\nimport glob\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n%matplotlib inline","d551a176":"img_width, img_height = 64, 64\n\ntrain_data_dir = '..\/input\/modiified\/Modified_Dataset\/Train'\ntest_data_dir = '..\/input\/modiified\/Modified_Dataset\/Test'\nnb_train_samples = 1050\nnb_validation_samples = 144\nepochs = 50\nbatch_size = 32\n\nif K.image_data_format() == 'channels_first':\n    input_shape = (3, img_width, img_height)\nelse:\n    input_shape = (img_width, img_height, 3)","0a612131":"train_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    shear_range=0.3,\n    zoom_range=0.3,\n    width_shift_range=0.25,\n    height_shift_range=0.25,\n    horizontal_flip=True,\n    vertical_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1. \/ 255)\n","3a21cfbe":"train_batches = train_datagen.flow_from_directory(\n    train_data_dir,\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    classes=['BENIGN', 'MALIGNANT', 'NORMAL'])\n    #color_mode=\"grayscale\")","81f9f42f":"test_batches = test_datagen.flow_from_directory(\n    test_data_dir,\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    classes=['BENIGN', 'MALIGNANT', 'NORMAL'])\n    #color_mode=\"grayscale\")","0019ad03":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=input_shape, padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n#model.add(Dropout(0.5))","c3b1bc56":"model.add(Conv2D(64, (3, 3), padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))","96676e52":"model.add(Conv2D(64, (3, 3), padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))","ec916c9f":"model.add(Conv2D(128, (3, 3), padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))","a2bbe3d5":"model.add(Conv2D(128, (3, 3), padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))","7bc9e30b":"model.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\n#model.add(Dense(32))\n#model.add(Activation('relu'))\n\nmodel.add(Dense(3))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","7146cfae":"%%time\nh = model.fit(\n    train_batches,\n    steps_per_epoch=nb_train_samples \/\/ batch_size,\n    epochs=epochs,\n    validation_data=test_batches,\n    validation_steps=nb_validation_samples \/\/ batch_size,\n    callbacks=[\n        #tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=4),\n        tf.keras.callbacks.ModelCheckpoint(filepath = '\/kaggle\/working\/Model_{val_accuracy:.3f}.h5', save_best_only=True,\n                                          save_weights_only=False, monitor='val_accuracy')\n    ])","1e8cb76c":"test_batches = test_datagen.flow_from_directory(\n    test_data_dir,\n    target_size=(img_width, img_height),\n    batch_size=144,\n    classes=['BENIGN', 'MALIGNANT', 'NORMAL'])\n    #color_mode=\"grayscale\")","8c5d34dd":"test_imgs, test_labels = next(test_batches)\nrounded_labels = np.argmax(test_labels, axis=-1)","91b77bf3":"test_model = load_model('.\/Model_0.797.h5')","4f2a4f9a":"predictions = test_model.predict(test_batches, steps=1, verbose=0)","45f39cc0":"predictions","c5d2112d":"rounded_prediction = np.argmax(predictions, axis=-1)","752db98c":"for i in rounded_prediction:\n    print(i)","1c07f5b6":"cm = confusion_matrix(y_true=rounded_labels, y_pred=rounded_prediction)","075c599d":"def plot_confusion_matrix(cm, classes,\n                        normalize=False,\n                        title='Confusion matrix',\n                        cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n            horizontalalignment=\"center\",\n            color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","e90deb20":"cm_plot_labels = ['BENIGN', 'MALIGNANT', 'NORMAL']\nplot_confusion_matrix(cm=cm, classes=cm_plot_labels, title='confusion_matrix')","f21f25e8":"from sklearn.metrics import classification_report\nprint(classification_report(y_true=rounded_labels, y_pred=rounded_prediction))","feb7dea4":"accs = h.history['accuracy']\nval_accs = h.history['val_accuracy']\n\nplt.plot(range(len(accs)),accs, label = 'Training_accuracy')\nplt.plot(range(len(accs)),val_accs, label = 'Testing_accuracy')\nplt.xlabel('x-axis (no.of epoch)')\nplt.ylabel('y-axis (accuracy_value)')\nplt.legend()\nplt.show()","5b9b62ca":"accs = h.history['loss']\nval_accs = h.history['val_loss']\n\nplt.plot(range(len(accs)),accs, label = 'Training_loss')\nplt.plot(range(len(accs)),val_accs, label = 'Testing_loss')\nplt.xlabel('x-axis (no.of epoch)')\nplt.ylabel('y-axis (loss_value)')\nplt.legend()\nplt.show()","5ab52dee":"from PIL import Image\nimport numpy as np\nfrom skimage import transform\ndef load(filename):\n    img = Image.open(filename)\n    img = np.array(img).astype('float32')\/255\n    img = transform.resize(img, (64, 64, 3))\n    img = np.expand_dims(img, axis=0)\n    return img","0566d32e":"image = load('..\/input\/modiified\/Modified_Dataset\/Test\/MALIGNANT\/10.jpg')\nprediction = test_model.predict(image)\nprediction","753623a7":"rounded_prediction = np.argmax(prediction, axis=-1)\nif rounded_prediction == 0:\n    print(\"Benign\")\nelif rounded_prediction == 1:\n    print(\"Malignant\")\nelif rounded_prediction == 2:\n    print(\"Normal\")","04481f97":"**This cell generates more training data by performing data augmentation, also performs data normalization by dividing them by 255**","d3058ca5":"**Here the image is loaded and prediction is performed. Enter the path of the desired image below inside the ('  ')**","4dfeaa78":"**This cell block will give the predicted output**","a94b8acf":"**Here the Convolutional Neural Network model is built. You can use different number of layers,tune different value like dropout value from 0.5 to 0.6 or 0.25 or whatever value that may give the best result.**","3669dfbc":"**The true label for test images are loaded here and processed necessarily.**","bc6f759d":"**This cell below performs the training. The callback function is used to stop the training when no improvement occurs.**","b94f9159":"**This is the loss curve.These accuracy and loss curves only generate when the training is performed. If just load a pre-trained best performing model without training the model then running thses cells will generate error.**","dbe0d558":"**The confusion matrix shows the result of the model**","abd7854b":"**The Conv2D layers above are responsible for extracting the features and the layer below i.e the dense layers are responsible to perform the classification. Simillarly, you can change the number of nodes in the dense layer like 64 to 32, 128 or other desired values but the last layer must have nodes equal to the number of classes you are using,as in here it is 3.**","cd2899eb":"**The best performing model is loaded here.**","e2ad5689":"**The cell below imports all the necessary packages required for this classification task**","e2f0a8cf":"**Here the prediction is performed.**","c4ad08bf":"**Here the training and testing (here testing and validation are used as same) data batches are prepared by giving the directory to the data and other necessary parameters**","c39d56fe":"**Same thing is performed as the training batch before**","343c9bea":"**Just copy and paste the below cell block of three lines for an additional number of layer. You can change the value 32 to 64 or 128 or whatever value which may give the best output.**","47930cf0":"**Here necessary functions are defined to load a single image to perform the prediction**","99214041":"**This is the accuracy curve**","26de883b":"**The below cell initialized the width, height of input images along with the directories for training and testing data, the batch size and number of epochs(iterations)**"}}