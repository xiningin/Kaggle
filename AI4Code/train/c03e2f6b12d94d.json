{"cell_type":{"a39a4133":"code","e2baece3":"code","bdfd7295":"code","aed45cfd":"code","566802cb":"code","2c56949c":"code","afe264b3":"code","7396ec65":"code","7b0b7eb2":"code","82b8fc4d":"code","7a8dcced":"code","7411ebf3":"code","8ec7e8d5":"code","54f0548b":"code","d76c6b58":"code","e5b3bb5a":"markdown"},"source":{"a39a4133":"# Installing to read excel file\n!pip install openpyxl\n!pip install xlrd","e2baece3":"# Importing OS library\nimport os\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Importing some basic library\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nimport plotly.express as px\nfrom matplotlib.ticker import StrMethodFormatter\nimport seaborn as sns","bdfd7295":"# Preparing the list of banks \npayment_banks = ['Total', 'PAYTM PAYMENTS BANK', 'AIRTEL PAYMENTS BANK']\n\n# Preparing the list of columns to be renamed\nrenaming_columns_names = {'Unnamed: 1':'Bank Name',\n                         'Unnamed: 2':'ATMs - On-site',\n                         'Unnamed: 3':'ATMs - Off-site',\n                         'Unnamed: 4':'PoS - On-site',\n                         'Unnamed: 5':'PoS - Off-site',\n                         'Unnamed: 6':'Micro ATMs',\n                         'Unnamed: 7':'Bharat QR',\n                         'Unnamed: 8':'Credit Cards - No. of outstanding cards as at the end of the month',\n                         'Unnamed: 9':'Credit Cards - No. of Transactions (Actuals) - ATMs',\n                         'Unnamed: 10':'Credit Cards - No. of Transactions (Actuals) - PoS',\n                         'Unnamed: 11':'Credit Cards - Value of transactions (Rupees Lakh) - ATMs',\n                         'Unnamed: 12':'Credit Cards - Value of transactions (Rupees Lakh) - PoS',\n                         'Unnamed: 13':'Debit Cards - No. of outstanding cards as at the end of the month',\n                         'Unnamed: 14':'Debit Cards - No. of Transactions (Actuals) - ATMs',\n                         'Unnamed: 15':'Debit Cards - No. of Transactions (Actuals) - PoS',\n                         'Unnamed: 16':'Debit Cards - Value of transactions (Rupees Lakh) - ATMs',\n                         'Unnamed: 17':'Debit Cards - Value of transactions (Rupees Lakh) - PoS',}\n\n# Preparing the list of columns to be renamed\nrenaming_columns_names_old = {'Unnamed: 1':'Bank Name',\n                             'Unnamed: 2':'ATMs - On-site',\n                             'Unnamed: 3':'ATMs - Off-site',\n                             'Unnamed: 4':'PoS - On-site',\n                             'Unnamed: 5':'PoS - Off-site',\n                             'Unnamed: 6':'Credit Cards - No. of outstanding cards as at the end of the month',\n                             'Unnamed: 7':'Credit Cards - No. of Transactions (Actuals) - ATMs',\n                             'Unnamed: 8':'Credit Cards - No. of Transactions (Actuals) - PoS',\n                             'Unnamed: 9':'Credit Cards - Value of transactions (Rupees Lakh) - ATMs',\n                             'Unnamed: 10':'Credit Cards - Value of transactions (Rupees Lakh) - PoS',\n                             'Unnamed: 11':'Debit Cards - No. of outstanding cards as at the end of the month',\n                             'Unnamed: 12':'Debit Cards - No. of Transactions (Actuals) - ATMs',\n                             'Unnamed: 13':'Debit Cards - No. of Transactions (Actuals) - PoS',\n                             'Unnamed: 14':'Debit Cards - Value of transactions (Rupees Lakh) - ATMs',\n                             'Unnamed: 15':'Debit Cards - Value of transactions (Rupees Lakh) - PoS',}\n\n# Preparing the list of columns to be renamed\nrenaming_columns_names_very_old = {'Unnamed: 2':'Bank Name',\n                                 'Unnamed: 3':'ATMs - On-site',\n                                 'Unnamed: 4':'ATMs - Off-site',\n                                 'Unnamed: 5':'PoS - On-site',\n                                 'Unnamed: 6':'PoS - Off-site',\n                                 'Unnamed: 7':'Credit Cards - No. of outstanding cards as at the end of the month',\n                                 'Unnamed: 8':'Credit Cards - No. of Transactions (Actuals) - ATMs',\n                                 'Unnamed: 9':'Credit Cards - No. of Transactions (Actuals) - PoS',\n                                 'Unnamed: 10':'Credit Cards - Value of transactions (Rupees Lakh) - ATMs',\n                                 'Unnamed: 11':'Credit Cards - Value of transactions (Rupees Lakh) - PoS',\n                                 'Unnamed: 12':'Debit Cards - No. of outstanding cards as at the end of the month',\n                                 'Unnamed: 13':'Debit Cards - No. of Transactions (Actuals) - ATMs',\n                                 'Unnamed: 14':'Debit Cards - No. of Transactions (Actuals) - PoS',\n                                 'Unnamed: 15':'Debit Cards - Value of transactions (Rupees Lakh) - ATMs',\n                                 'Unnamed: 16':'Debit Cards - Value of transactions (Rupees Lakh) - PoS',}","aed45cfd":"# Creating an empty dataframe\npayment_banks_df = pd.DataFrame()\n\n# Reading each file of the dataset\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path = os.path.join(dirname, filename)\n        \n        print(\"Reading the file \" + path + \"...\")\n        df = pd.read_excel(path)\n        \n        # Adding the two columns\n        month = int(filename.split(\"_\")[2].split('.')[0])\n        year = int(filename.split(\"_\")[1])\n        \n        if (month < 3 and year < 2021) or (year < 2020):\n            # Finding the selected banks\n            df = df[df[\"Unnamed: 2\"].str.lower().isin([x.lower() for x in payment_banks])]\n            for index, row in df.iterrows():\n                for payment_bank in payment_banks:\n                    if row[\"Unnamed: 2\"].lower() == payment_bank.lower():\n                        df.at[index, \"Unnamed: 2\"] = payment_bank\n                \n            print(\"  Data is found for {0}\".format(','.join(df[\"Unnamed: 2\"])))\n        else:\n            # Finding the selected banks\n            df = df[df[\"Unnamed: 1\"].str.lower().isin([x.lower() for x in payment_banks])]\n            print(\"  Data is found for {0}\".format(','.join(df[\"Unnamed: 1\"])))\n        \n        df[\"Month\"] = month\n        df[\"Year\"] = year\n        print(\"  Data is found for {0}\/{1}\".format(month, year))\n        \n        if (month == 3 or month == 4) and year == 2020:\n            # inserting column with static value in data frame\n            df.insert(5, \"Micro ATMs\", 0)\n            df.insert(6, \"Bharat QR\", 0)\n            \n            # Renaming the columns header name\n            df.rename(renaming_columns_names_old, axis=1, inplace=True)\n            \n            # Removing the unnecessary columns\n            df.drop(columns={\"Unnamed: 0\",}, axis=0, inplace=True)\n        elif (month < 3 and year < 2021) or (year < 2020):\n            # inserting column with static value in data frame\n            df.insert(6, \"Micro ATMs\", 0)\n            df.insert(7, \"Bharat QR\", 0)\n            \n            # Renaming the columns header name\n            df.rename(renaming_columns_names_very_old, axis=1, inplace=True)\n            \n            # Removing the unnecessary columns\n            df.drop(columns={\"Unnamed: 0\", \"Unnamed: 1\",}, axis=0, inplace=True)\n        else:\n            # Renaming the columns header name\n            df.rename(renaming_columns_names, axis=1, inplace=True)\n            \n            # Removing the unnecessary columns\n            df.drop(columns={\"Unnamed: 0\", \"Unnamed: 18\", \"Unnamed: 19\", \"Unnamed: 20\", \"Unnamed: 21\"}, axis=0, inplace=True, errors=\"ignore\")\n        \n        if  (month < 7 and year < 2020) or (year < 2019):\n            for index, row in df.iterrows():\n                column_name = \"Debit Cards - Value of transactions (Rupees Lakh) - ATMs\"\n                df.at[index, column_name] = float(df.at[index, column_name]) * 10\n                \n                column_name = \"Debit Cards - Value of transactions (Rupees Lakh) - PoS\"\n                df.at[index, column_name] = float(df.at[index, column_name]) * 10\n                \n                column_name = \"Credit Cards - Value of transactions (Rupees Lakh) - ATMs\"\n                df.at[index, column_name] = float(df.at[index, column_name]) * 10\n                \n                column_name = \"Credit Cards - Value of transactions (Rupees Lakh) - PoS\"\n                df.at[index, column_name] = float(df.at[index, column_name]) * 10\n        \n        # Appending the data to dataframe \n        payment_banks_df = payment_banks_df.append(df, ignore_index = True)","566802cb":"payment_banks_df.sort_values(by=['Year', 'Month'], ascending=True, inplace=True)\npayment_banks_df","2c56949c":"column_name = 'Debit Cards - No. of outstanding cards as at the end of the month'\n\ndef get_month_name(x):\n    if x==1:\n        return \"JAN\"\n    elif x==2:\n        return \"FEB\"\n    elif x==3:\n        return \"MAR\"\n    elif x==4:\n        return \"APR\"\n    elif x==5:\n        return \"MAY\"\n    elif x==6:\n        return \"JUN\"\n    elif x==7:\n        return \"JUL\"\n    elif x==8:\n        return \"AUG\"\n    elif x==9:\n        return \"SEP\"\n    elif x==10:\n        return \"OCT\"\n    elif x==11:\n        return \"NOV\"\n    elif x==12:\n        return \"DEC\"\n    else:\n        return \"DEC\"\n\ndef get_month(x):\n    return str(get_month_name(x.Month)) + \" - \" + str(x.Year)\n\npaytm = \"paytm\"\nairtel = \"airtel\"","afe264b3":"gain_percent = \" Gain or Loss\"\n\n# set width of bar\nfig = plt.subplots(figsize =(25, 15))\n\ngs = gridspec.GridSpec(2, 1, height_ratios=[2, 1]) \n\nplt.subplot(gs[0])\n\n# set height of bar\ntotal_se = payment_banks_df[(payment_banks_df[\"Bank Name\"] == payment_banks[0])]\npaytm_se = payment_banks_df[(payment_banks_df[\"Bank Name\"] == payment_banks[1])]\npaytm_se[column_name + gain_percent] = round(paytm_se[column_name].pct_change().fillna(0)*100, 2)\nairtel_se = payment_banks_df[(payment_banks_df[\"Bank Name\"] == payment_banks[2])]\nairtel_se[column_name + gain_percent] = round(airtel_se[column_name].pct_change().fillna(0)*100, 2)\n\nplt.plot(paytm_se.apply(lambda x: get_month(x), axis=1) , paytm_se[column_name], marker='o', color=\"#06a6db\")\nplt.bar(paytm_se.apply(lambda x: get_month(x), axis=1) , paytm_se[column_name], alpha=0.5, label ='paytm', color=\"#06a6db\")\nplt.plot(airtel_se.apply(lambda x: get_month(x), axis=1), airtel_se[column_name], marker='o', color=\"#e61414\")\nplt.bar(airtel_se.apply(lambda x: get_month(x), axis=1) , airtel_se[column_name], alpha=0.5, label ='airtel', color=\"#e61414\")\n \n# Adding Xticks\nplt.ylabel('Count', fontweight ='bold', fontsize = 12)\nplt.title(column_name, fontweight ='bold', fontsize = 15)\nplt.xticks(rotation=45)\nplt.gca().yaxis.set_major_formatter(StrMethodFormatter('{x:,.0f}'))\n\nfor i,j in zip(paytm_se.apply(lambda x: get_month(x), axis=1) , paytm_se[column_name]):\n    plt.text(i, j, str(j),horizontalalignment=\"left\", verticalalignment=\"top\", rotation_mode=\"default\", rotation=90)\n    \nfor i,j in zip(airtel_se.apply(lambda x: get_month(x), axis=1) , airtel_se[column_name]):\n    plt.text(i, j, str(j),horizontalalignment=\"left\", verticalalignment=\"bottom\", rotation_mode=\"default\", rotation=90)\n\nplt.legend()\n    \nplt.subplot(gs[1])\n\nplt.plot(paytm_se.apply(lambda x: get_month(x), axis=1) , paytm_se[column_name + gain_percent], marker='o', color='#06a6db')\nplt.plot(airtel_se.apply(lambda x: get_month(x), axis=1) , airtel_se[column_name + gain_percent], marker='o', color='#e61414')\n\n# Adding Xticks\nplt.ylabel('Percentage', fontweight ='bold', fontsize = 12)\nplt.title(gain_percent, fontweight ='bold', fontsize = 15)\nplt.xticks(rotation=45)\n\nplt.show()","7396ec65":"paytm_se_quarter = paytm_se[paytm_se.Month.isin([3,6,9,12])].sort_values(by=['Year', 'Month'], ascending=False)\nairtel_se_quarter = airtel_se[airtel_se.Month.isin([3,6,9,12])].sort_values(by=['Year', 'Month'], ascending=False)\ntotal_se_quarter = total_se[total_se.Month.isin([3,6,9,12])].sort_values(by=['Year', 'Month'], ascending=False)\n\npaytm_se_quarter_cards = paytm_se_quarter[column_name].astype(int).reset_index(drop=True)\nairtel_se_quarter_cards = airtel_se_quarter[column_name].astype(int).reset_index(drop=True)\nothers_se_quarter_cards = total_se_quarter[column_name].astype(int).reset_index(drop=True) - paytm_se_quarter_cards - airtel_se_quarter_cards\nothers_se_quarter_cards = others_se_quarter_cards[:-1]\n\ndata = dict(Quantity=paytm_se_quarter[column_name].append(airtel_se_quarter[column_name]).astype(int),\n            Stage=paytm_se_quarter.apply(lambda x: get_month(x), axis=1).append(airtel_se_quarter.apply(lambda x: get_month(x), axis=1)),\n            PaymentBanks=[paytm]*len(paytm_se_quarter) + [airtel]*len(airtel_se_quarter))\n    \nfig = px.funnel(data, y='Stage', x='Quantity', color=\"PaymentBanks\",\n                color_discrete_map={paytm: \"#06a6db\", airtel: \"#e61414\"},\n                template=\"simple_white\",\n                title= column_name + \" (Q-on-Q)\",\n                labels={\"Stage\": \"\"})\nfig.show()","7b0b7eb2":"month_se_quarter = paytm_se_quarter.apply(lambda x: get_month(x), axis=1).reset_index(drop=True)\n\ndata = dict(Quantity=paytm_se_quarter_cards.append(airtel_se_quarter_cards).append(others_se_quarter_cards),\n            Stage=month_se_quarter.append(month_se_quarter).append(month_se_quarter),\n            PaymentBanks=[paytm]*len(paytm_se_quarter) + [airtel]*len(airtel_se_quarter) + [\"others\"]*len(others_se_quarter_cards))\n    \nfig = px.funnel(data, y='Stage', x='Quantity', color=\"PaymentBanks\",\n                color_discrete_map={paytm: \"#06a6db\", airtel: \"#e61414\", \"others\": \"green\"},\n                template=\"simple_white\",\n                title= column_name + \" (Q-on-Q)\",\n                labels={\"Stage\": \"\"})\nfig.show()","82b8fc4d":"month_number = [6]\n\nyears = paytm_se[paytm_se.Month.isin(month_number)].Year.astype(int)\npaytm_total = paytm_se[paytm_se.Month.isin(month_number)][column_name].astype(int).reset_index(drop=True)\nairtel_total = airtel_se[airtel_se.Month.isin(month_number)][column_name].astype(int).reset_index(drop=True)\nothers_total = payment_banks_df[(payment_banks_df[\"Bank Name\"] == payment_banks[0]) \n                                & (payment_banks_df.Month.isin(month_number))][column_name].astype(int).reset_index(drop=True)\nothers_total = others_total - paytm_total - airtel_total\n\nplt.figure(figsize=(18,10))\n\ncount = 1\nfor i, j, k, l in zip(paytm_total, airtel_total, others_total, years):\n    plt.subplot(1, len(paytm_total), count)\n    items = [i, j, k]\n    plt.pie(items, startangle = 300, explode=[0.10, 1.25, 0.10], labels = [paytm, airtel, \"others\"], \n            colors = [\"#06a6db\", \"#e61414\", \"green\"], autopct='%1.1f%%', )\n    plt.title(get_month_name(month_number[0]) + \" - \"+ str(l), fontweight ='bold', fontsize = 15)\n    count+=1\n\nplt.legend()\nplt.show()","7a8dcced":"column_name_atm = \"Debit Cards - No. of Transactions (Actuals) - ATMs\"\ncolumn_name_pos = \"Debit Cards - No. of Transactions (Actuals) - PoS\"\n\ncolumn_name_atm_amt = \"Debit Cards - Value of transactions (Rupees Lakh) - ATMs\"\ncolumn_name_pos_amt = \"Debit Cards - Value of transactions (Rupees Lakh) - PoS\"\n\npaytm_se_atm = paytm_se[column_name_atm]\npaytm_se_pos = paytm_se[column_name_pos]\npaytm_se_atm_amt = paytm_se[column_name_atm_amt]\npaytm_se_pos_amt = paytm_se[column_name_pos_amt]\n\nairtel_se_atm = airtel_se[column_name_atm]\nairtel_se_pos = airtel_se[column_name_pos]\nairtel_se_atm_amt = airtel_se[column_name_atm_amt]\nairtel_se_pos_amt = airtel_se[column_name_pos_amt]\n\n# Create Fig and gridspec\nfig = plt.figure(figsize =(20, 12))\ngrid = plt.GridSpec(5, 1, hspace=0.7, wspace=0.2)\n\n# Define the axes\nax_main = fig.add_subplot(grid[0:3,0])\nax_bottom = fig.add_subplot(grid[3:5, 0], xticklabels=[], yticklabels=[])\n\nax_main.plot(paytm_se.apply(lambda x: get_month(x), axis=1), paytm_se_atm, marker='o', \n         color='#06a6db', alpha=0.50, mfc='black', linestyle='--', label=paytm + \" - ATM\")\nax_main.plot(paytm_se.apply(lambda x: get_month(x), axis=1), paytm_se_pos, marker='o', \n         color='#06a6db', mfc='black', label=paytm + \" - POS\")\nax_main.plot(airtel_se.apply(lambda x: get_month(x), axis=1), airtel_se_atm, marker='o', \n         color='#e61414', alpha=0.50, mfc='black', linestyle='--', label=airtel + \" - ATM\")\nax_main.plot(airtel_se.apply(lambda x: get_month(x), axis=1), airtel_se_pos, marker='o', \n         color='#e61414', mfc='black', label=airtel + \" - POS\")\n\nax_main.yaxis.set_major_formatter(StrMethodFormatter('{x:,.0f}'))\nax_main.yaxis.set_label(\"No. of Transactions (Actuals)\")\nax_main.legend(loc=\"upper left\")\nax_main.set_ylabel(\"Number of Transactions\", fontweight ='bold', fontsize = 15)\nax_main.xaxis.set_tick_params(rotation=45)\n\nax_bottom.bar(paytm_se.apply(lambda x: get_month(x), axis=1), paytm_se_atm_amt, color='#06a6db', alpha=0.50, \n           label=paytm + \" - ATM\", width= 0.4, align='edge',)\nax_bottom.plot(paytm_se.apply(lambda x: get_month(x), axis=1), paytm_se_atm_amt, color='#06a6db', alpha=0.50,\n              linestyle='--')\nax_bottom.bar(paytm_se.apply(lambda x: get_month(x), axis=1), paytm_se_pos_amt, bottom = paytm_se_atm_amt, color='#06a6db',\n          label=paytm + \" - POS\", width= 0.4, align='edge',)\nax_bottom.plot(paytm_se.apply(lambda x: get_month(x), axis=1), paytm_se_pos_amt + paytm_se_atm_amt, color='#06a6db',\n              linestyle='--')\n\nax_bottom.bar(paytm_se.apply(lambda x: get_month(x), axis=1), airtel_se_atm_amt, color='#e61414', alpha=0.50,\n             label=airtel + \" - ATM\", width= -0.4,align='edge',)\nax_bottom.plot(paytm_se.apply(lambda x: get_month(x), axis=1), airtel_se_atm_amt, color='#e61414', alpha=0.50,\n              linestyle='--')\nax_bottom.bar(paytm_se.apply(lambda x: get_month(x), axis=1), airtel_se_pos_amt, bottom = airtel_se_atm_amt, color='#e61414',\n             label=airtel + \" - POS\", width= -0.4,align='edge',)\nax_bottom.plot(paytm_se.apply(lambda x: get_month(x), axis=1), airtel_se_pos_amt + airtel_se_atm_amt, color='#e61414',\n              linestyle='--')\n\nax_bottom.set_ylabel(\"Amount (Rs. Lakh)\", fontweight ='bold', fontsize = 15)\nax_bottom.xaxis.set_ticks([])\nax_bottom.yaxis.set_major_formatter(StrMethodFormatter('{x:,.0f}'))\nax_bottom.invert_yaxis()\n\nax_bottom.legend()\n\nplt.show()","7411ebf3":"month_number = [6]\n\nyears = paytm_se[paytm_se.Month.isin(month_number)].Year.astype(int)\npaytm_total = (paytm_se[paytm_se.Month.isin(month_number)][column_name_atm_amt].astype(int).reset_index(drop=True) +\n                paytm_se[paytm_se.Month.isin(month_number)][column_name_pos_amt].astype(int).reset_index(drop=True))\nairtel_total = (airtel_se[airtel_se.Month.isin(month_number)][column_name_atm_amt].astype(int).reset_index(drop=True) + \n                 airtel_se[airtel_se.Month.isin(month_number)][column_name_pos_amt].astype(int).reset_index(drop=True))\nothers_total = (payment_banks_df[(payment_banks_df[\"Bank Name\"] == payment_banks[0]) \n                                & (payment_banks_df.Month.isin(month_number))][column_name_atm_amt].astype(int).reset_index(drop=True) +\n                payment_banks_df[(payment_banks_df[\"Bank Name\"] == payment_banks[0]) \n                                & (payment_banks_df.Month.isin(month_number))][column_name_pos_amt].astype(int).reset_index(drop=True))\n\nothers_total = others_total - paytm_total - airtel_total\n\nplt.figure(figsize=(18,10))\n\ncount = 1\nfor i, j, k, l in zip(paytm_total, airtel_total, others_total, years):\n    plt.subplot(1, len(paytm_total), count)\n    items = [i, j, k]\n    plt.pie(items, startangle = 300, explode=[0.10, 1.25, 0.10], labels = [paytm, airtel, \"others\"], \n            colors = [\"#06a6db\", \"red\", \"green\"], autopct='%.2f%%')\n    plt.title(get_month_name(month_number[0]) + \" - \"+ str(l), fontweight ='bold', fontsize = 15)\n    count+=1\n\nplt.legend()\nplt.show()","8ec7e8d5":"column_name_atm_on = 'ATMs - On-site'\ncolumn_name_atm_off = 'ATMs - Off-site'\n\ncolumn_name_pos_on = 'PoS - On-site'\ncolumn_name_pos_off = 'PoS - Off-site'\n\ncolumn_name_micro_atm = 'Micro ATMs'\ncolumn_name_bharat_qr = 'Bharat QR'\n\npaytm_se_atm_on = paytm_se[column_name_atm_on]\npaytm_se_atm_off = paytm_se[column_name_atm_off]\npaytm_se_pos_on = paytm_se[column_name_pos_on]\npaytm_se_pos_off = paytm_se[column_name_pos_off]\npaytm_se_micro_atm = paytm_se[column_name_micro_atm]\npaytm_se_bharat_qr = paytm_se[column_name_bharat_qr]\n\nmonth_se = paytm_se.apply(lambda x: get_month(x), axis=1)\n\nplt.figure(figsize=(22,12))\n\nplt.subplot(1,3,1)\nplt.hlines(y=month_se, xmin=paytm_se_atm_on, xmax=paytm_se_atm_off, color='grey', alpha=0.4)\nplt.scatter(paytm_se_atm_on, month_se, color='#06a6db', label='On-site ATMs')\nplt.scatter(paytm_se_atm_off, month_se, color='#06a6db', alpha=0.5 , label='Off-site ATMs')\nplt.legend(loc=\"lower right\")\nplt.yticks([])\nplt.title(\"ATMs (onsite vs offsite)\", fontweight ='bold', fontsize = 15)\n\nplt.subplot(1,3,2)\nplt.hlines(y=month_se, xmin=paytm_se_pos_on, xmax=paytm_se_pos_off, color='grey', alpha=0.4)\nplt.scatter(paytm_se_pos_on, month_se, color='#06a6db', alpha=1, label='On-line POS')\nplt.scatter(paytm_se_pos_off, month_se, color='#06a6db', alpha=0.5 , label='Off-line POS')\nplt.legend(loc=\"lower right\")\nplt.title(\"POS (online vs offline)\", fontweight ='bold', fontsize = 15)\n\nplt.subplot(1,3,3)\nplt.hlines(y=month_se, xmin=paytm_se_micro_atm, xmax=paytm_se_bharat_qr, color='grey', alpha=0.4)\nplt.scatter(paytm_se_micro_atm, month_se, color='#06a6db', alpha=1, label='Micro ATMs')\nplt.scatter(paytm_se_bharat_qr, month_se, color='#06a6db', alpha=0.5 , label='Bharat QR')\nplt.legend(loc=\"lower right\")\nplt.title(\"Micro ATMs vs Bharat QR\", fontweight ='bold', fontsize = 15)\n\nplt.show()","54f0548b":"others_se_atm_on = (total_se[column_name_atm_on].reset_index(drop=True) - paytm_se_atm_on.reset_index(drop=True))[:-3]\nothers_se_atm_off = (total_se[column_name_atm_off].reset_index(drop=True) - paytm_se_atm_off.reset_index(drop=True))[:-3]\nothers_se_pos_on = (total_se[column_name_pos_on].reset_index(drop=True) - paytm_se_pos_on.reset_index(drop=True))[:-3]\nothers_se_pos_off = (total_se[column_name_pos_off].reset_index(drop=True) - paytm_se_pos_off.reset_index(drop=True))[:-3]\nothers_se_micro_atm = (total_se[column_name_micro_atm].reset_index(drop=True) - paytm_se_micro_atm.reset_index(drop=True))[:-3]\nothers_se_bharat_qr = (total_se[column_name_bharat_qr].reset_index(drop=True) - paytm_se_bharat_qr.reset_index(drop=True))[:-3]\n\nplt.figure(figsize=(22,24))\n\nplt.subplot(2,3,1)\nplt.hlines(y=month_se, xmin=0, xmax=others_se_atm_on, color='grey', alpha=0.4)\nplt.scatter(paytm_se_atm_on, month_se, color='#06a6db', label='paytm')\nplt.scatter(others_se_atm_on, month_se, color='green', alpha=0.5 , label='others')\nplt.yticks([])\nplt.title(\"Onsite ATMs (paytm vs others)\", fontweight ='bold', fontsize = 15)\nplt.xticks(rotation=45)\n\nplt.subplot(2,3,2)\nplt.hlines(y=month_se, xmin=0, xmax=others_se_atm_off, color='grey', alpha=0.4)\nplt.scatter(paytm_se_atm_off, month_se, color='#06a6db', label='paytm')\nplt.scatter(others_se_atm_off, month_se, color='green', alpha=0.5 , label='others')\nplt.title(\"Offsite ATMs (paytm vs others)\", fontweight ='bold', fontsize = 15)\nplt.xticks(rotation=45)\n\nplt.subplot(2,3,4)\nplt.hlines(y=month_se, xmin=0, xmax=others_se_pos_on, color='grey', alpha=0.4)\nplt.scatter(paytm_se_pos_on, month_se, color='#06a6db', label='paytm')\nplt.scatter(others_se_pos_on, month_se, color='green', alpha=0.5 , label='others')\nplt.yticks([])\nplt.title(\"Online PoS (paytm vs others)\", fontweight ='bold', fontsize = 15)\nplt.gca().xaxis.set_major_formatter(StrMethodFormatter('{x:,.0f}'))\nplt.xticks(rotation=45)\n\nplt.subplot(2,3,5)\nplt.hlines(y=month_se, xmin=0, xmax=others_se_pos_off, color='grey', alpha=0.4)\nplt.scatter(paytm_se_pos_off, month_se, color='#06a6db', label='paytm')\nplt.scatter(others_se_pos_off, month_se, color='green', alpha=0.5 , label='others')\nplt.title(\"Offline PoS (paytm vs others)\", fontweight ='bold', fontsize = 15)\nplt.xticks(rotation=45)\n\nplt.subplot(2,3,3)\nplt.hlines(y=month_se, xmin=0, xmax=others_se_micro_atm, color='grey', alpha=0.4)\nplt.scatter(paytm_se_micro_atm, month_se, color='#06a6db', label='paytm')\nplt.scatter(others_se_micro_atm, month_se, color='green', alpha=0.5 , label='others')\nplt.legend(loc=\"lower right\")\nplt.title(\"Micro ATMs (paytm vs others)\", fontweight ='bold', fontsize = 15)\nplt.xticks(rotation=45)\n\nplt.subplot(2,3,6)\nplt.hlines(y=month_se, xmin=0, xmax=others_se_bharat_qr, color='grey', alpha=0.4)\nplt.scatter(paytm_se_bharat_qr, month_se, color='#06a6db', label='paytm')\nplt.scatter(others_se_bharat_qr, month_se, color='green', alpha=0.5 , label='others')\nplt.legend(loc=\"lower right\")\nplt.title(\"Bharat QR (paytm vs others)\", fontweight ='bold', fontsize = 15)\nplt.gca().xaxis.set_major_formatter(StrMethodFormatter('{x:,.0f}'))\nplt.xticks(rotation=45)\n\nplt.show()","d76c6b58":"from pandas.plotting import table\n\n# sample data\nraw_data = {'RBI': ['Public Sector Banks', 'Private Sector Banks', 'Foreign Banks','Payment Banks', 'Small Finance Banks'],\n        'Jun 2021': [12, 21, 9, 6, 10]}\ndf = pd.DataFrame(raw_data, columns = ['RBI', 'Jun 2021'])\n#df['Total'] = df['Jun 2021'] \n\nplt.figure(figsize=(15,5))\n# plot chart\np, tx, autotexts= plt.pie(df['Jun 2021'], startangle=90, shadow=True, labels=df['RBI'], autopct=\"\")\n\nfor i, a in enumerate(autotexts):\n    a.set_text(\"{}\".format(df['Jun 2021'][i]))\n    a.set_color(\"white\")\n    a.set_weight(\"bold\")\n    a.set_size(12)\n\nplt.title(\"RBI Official Banks\", fontweight ='bold', fontsize = 15)\nplt.axis('equal')\nplt.show()","e5b3bb5a":"# **RBI - BANKWISE ATM\/POS\/CARD STATISTICS**\n(https:\/\/www.rbi.org.in\/scripts\/ATMView.aspx)"}}