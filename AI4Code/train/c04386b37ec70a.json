{"cell_type":{"8a92fad1":"code","5f35e0ed":"code","1ecaa9d7":"code","65f310eb":"code","ecb2e5f0":"code","5e2bfe73":"code","1f980189":"code","8960c616":"code","b7408c06":"code","2f0e55b1":"code","d6681387":"code","9396b259":"code","1183ecc0":"code","74b1769d":"code","d1cff0a8":"code","992ea37c":"code","5031dad6":"code","a5a0afe8":"code","00889fb7":"code","bb80b6d1":"code","a5ee8eb1":"code","2a81823b":"code","e51b486a":"code","9aa33cc5":"code","c73ac999":"code","fbf0f928":"code","a780da2b":"code","109bcc0a":"code","db12c337":"code","f64e6942":"code","2cf82835":"code","6ee6bed7":"code","0977b3c1":"code","32125a40":"code","0057de56":"code","0784fc9d":"code","cc767228":"code","fb45f54f":"code","be279ea1":"code","014f8560":"markdown","77a8d685":"markdown"},"source":{"8a92fad1":"from warnings import filterwarnings\nfilterwarnings('ignore')\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.neighbors import LocalOutlierFactor\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge, Lasso, ElasticNet\nfrom sklearn.linear_model import RidgeCV, LassoCV,ElasticNetCV\n\n\nimport scipy as sp\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\n\n\n\nHitters=pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf=Hitters.copy()\ndf.head()","5f35e0ed":"df.info()","1ecaa9d7":"df.isnull().sum().sum()","65f310eb":"print(\"New League= A\" ,df[df[\"NewLeague\"]==\"A\"].agg({\"Salary\":\"mean\"}))\nprint(\"New League= N\" ,df[df[\"NewLeague\"]==\"N\"].agg({\"Salary\":\"mean\"}))\nprint(\"League= A\" ,df[df[\"League\"]==\"A\"].agg({\"Salary\":\"mean\"}))\nprint(\"League= N\" ,df[df[\"League\"]==\"N\"].agg({\"Salary\":\"mean\"}))\nprint(\"Division= E\" ,df[df[\"Division\"]==\"E\"].agg({\"Salary\":\"mean\"}))\nprint(\"Division= W\" ,df[df[\"Division\"]==\"W\"].agg({\"Salary\":\"mean\"}))","ecb2e5f0":"df.loc[(df[\"Salary\"].isnull())& (df['Division'] == 'E'),\"Salary\"]=624.27\ndf.loc[(df[\"Salary\"].isnull())& (df['Division'] == 'W'),\"Salary\"]=450.87\ndf.isnull().sum().sum()","5e2bfe73":"# One hot Encoding\ndf1 = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf1.head()","1f980189":"clf= LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df1)[0:10]","8960c616":"df1_scores=clf.negative_outlier_factor_\nnp.sort(df1_scores)[0:20]","b7408c06":"sns.boxplot(df1_scores);","2f0e55b1":"threshold=np.sort(df1_scores)[15]\nprint(threshold)\ndf1.loc[df1_scores == threshold]","d6681387":"df1.loc[df1_scores < threshold].index","9396b259":"df1.iloc[[4, 22, 32, 82, 100, 113, 217, 236, 249, 272, 274, 295, 302, 314,\n            315],:]=[[557,142,21,58,81,23,18,8759,2583,271,1138,1299,478,1160,53,7,1450.0,1,1,1]]","1183ecc0":"df1.iloc[4,:]","74b1769d":"## Applying Standart Scaler on only X variables","d1cff0a8":"dff=df1.drop([\"Salary\",\"League_N\",\"Division_W\",\"NewLeague_N\"], axis=1)\ncategorical_columns=[col for col in dff.columns if dff[col].dtype==\"object\"]\nnumeric_columns=[num for num in dff.columns if num not in categorical_columns]\n\nscaled_cols=StandardScaler().fit_transform(dff[numeric_columns])\nscaled_cols=pd.DataFrame(scaled_cols, columns=numeric_columns)\n\n\nscaled_cols","992ea37c":"ayrikdf=df1.loc[:, \"League_N\":\"NewLeague_N\"]\nayrikdf=pd.DataFrame(ayrikdf)\nayrikdf=ayrikdf.reset_index(drop=True)\nprint(ayrikdf.shape)\nayrikdf.head()","5031dad6":"scaled_cols=pd.DataFrame(scaled_cols)\nscaled_cols=scaled_cols.reset_index(drop=True)\nprint(scaled_cols.shape)\nscaled_cols.head()","a5a0afe8":"DF=pd.concat([scaled_cols,ayrikdf],axis=1)\nDF.head()","00889fb7":"# Generating Variables","bb80b6d1":"pca=PCA(n_components=5)\npca_fit=pca.fit_transform(scaled_cols)\npca.explained_variance_ratio_","a5ee8eb1":"component_df=pd.DataFrame(data= pca_fit, columns=[\"1st Component\",\"2nd Component\",\"3rd Component\",\"4th Component\",\"5th Component\"])\ncomponent_df.head()","2a81823b":"DF2=pd.concat([component_df,ayrikdf],axis=1)\nDF2.head()","e51b486a":"#Regression\ny=df1[\"Salary\"]\nX_train, X_test, y_train, y_test = train_test_split(DF2, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)\ny_pred=reg_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","9aa33cc5":"#Ridge Regression\nX_train, X_test, y_train, y_test = train_test_split(DF2, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nridge_model=Ridge().fit(X_train,y_train)\ny_pred= ridge_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","c73ac999":"# Overfitting?  NO. RMSE values for test and train data sets are close to each other.\nridge_model=Ridge().fit(X_train,y_train)\ny_pred= ridge_model.predict(X_train)\nnp.sqrt(mean_squared_error(y_train, y_pred))","fbf0f928":"# Ridge_tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas1, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","a780da2b":"# Ridge_tuned(alpha2)\n\nridge_cv = RidgeCV(alphas = alphas2, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","109bcc0a":"# Ridge_tuned(alpha3)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas3, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","db12c337":"# Ridge_tuned(best alpha)\nalphas4 = [40]\nridge_cv = RidgeCV(alphas = alphas4, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","f64e6942":"#Lasso Regression\nlasso_model = Lasso().fit(X_train, y_train)\ny_pred=lasso_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","2cf82835":"#Lasso Tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nlasso_cv_model = LassoCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","6ee6bed7":"#Lasso Tuned(alpha2)\nlasso_cv_model = LassoCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","0977b3c1":"#Lasso Tuned(alpha3)\nlasso_cv_model = LassoCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","32125a40":"# Lasso_tuned(best alpha)\nalphas4 = [25,50,100]\nlasso_cv_model = LassoCV(alphas = alphas4, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","0057de56":"# Elastic Net Regression\nenet_model = ElasticNet().fit(X_train, y_train)\ny_pred = enet_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","0784fc9d":"#Elastic Net(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nenet_cv_model = ElasticNetCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","cc767228":"#Elastic Net(alpha2)\nenet_cv_model = ElasticNetCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","fb45f54f":"#Elastic Net(alpha3)\nenet_cv_model = ElasticNetCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","be279ea1":"enet_params = {\"l1_ratio\": [0,0.001,0.002,0.003,0.005,0.01,0.03,0.05,0.1,0.2,0.4,0.5,0.6,0.8,1],\n               \"alpha\":[30,40]}\nenet_model = ElasticNet().fit(DF, y)\nfrom sklearn.model_selection import GridSearchCV\ngs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(DF, y)\nprint(gs_cv_enet.best_params_)\nenet_tuned = ElasticNet(**gs_cv_enet.best_params_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","014f8560":"#Totally, 90% of the data(df without categoric variables) variation can be explained by these 5 components.","77a8d685":"# 1) Eksik verilere k\u0131r\u0131l\u0131m ortalamalar\u0131 atand\u0131.\n# 2) Ayk\u0131r\u0131 g\u00f6zlemler LOF ile belirlendi,15.de\u011fer sonras\u0131 bask\u0131land\u0131.\n# 3) X de\u011fi\u015fkenlerine Std Scaler d\u00f6n\u00fc\u015f\u00fcm\u00fc yap\u0131ld\u0131.\n# 4) PCA ile yeni de\u011fi\u015fkenler t\u00fcretildi.\n# 5) 322 veri ile; tune edilmi\u015f ve edilmemi\u015f, en iyi durumda:\n- Regression rmse: 282\n- Ridge rmse: 280\n- Lasso rmse: 281\n- Elastic Net rmse: 281"}}