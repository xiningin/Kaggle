{"cell_type":{"feb50733":"code","e8a3a225":"code","57958709":"code","27c9ebbd":"code","655ad57f":"code","3b4ec49f":"code","6bea572a":"code","d4c50186":"code","90cce650":"code","44bfc208":"code","c4bbdb1b":"code","8a492368":"code","0032544b":"code","2e26dfe9":"code","267870f1":"code","370a02ef":"code","0c4c779b":"code","db77ab1c":"code","3863604c":"code","31a36e5b":"code","965b493c":"code","17ca4fe1":"code","59ac023d":"code","48d7092c":"code","eeccdeec":"code","835b1e7b":"code","9f6f5959":"code","71d0c1cf":"code","4f2e1b42":"code","e6582c9f":"code","3f457dd8":"code","638e7d5a":"markdown","0f1c667d":"markdown","a291653f":"markdown","b68e8a10":"markdown","36ccb134":"markdown","d93f9249":"markdown","684dbbe4":"markdown","14056a06":"markdown","c06a04e3":"markdown","8ab644b4":"markdown","82419bfb":"markdown","54d355a4":"markdown"},"source":{"feb50733":"filename_train = '..\/input\/tabular-playground-series-apr-2021\/train.csv'\nfilename_test  = '..\/input\/tabular-playground-series-apr-2021\/test.csv'","e8a3a225":"import pandas as pd\n\ndf_train = pd.read_csv(filename_train, index_col='PassengerId')\ndf_test  = pd.read_csv(filename_test, index_col='PassengerId')","57958709":"df_train","27c9ebbd":"df_train.isnull().sum()","655ad57f":"df_test","3b4ec49f":"df_test.isnull().sum()","6bea572a":"import numpy as np\n\ndf_train['Cabin'] = df_train['Cabin'].apply(lambda x: x[:2] if x is not np.nan else np.nan)\ndf_train","d4c50186":"df_test['Cabin'] = df_test['Cabin'].apply(lambda x: x[:2] if x is not np.nan else np.nan)\ndf_test","90cce650":"df_train['Ticket'] = df_train['Ticket'].apply(lambda x: str(x).split()[0])\ndf_train","44bfc208":"df_test['Ticket'] = df_test['Ticket'].apply(lambda x: str(x).split()[0])\ndf_test","c4bbdb1b":"df_train['Family'] = df_train['SibSp'] + df_train['Parch']\ndf_train","8a492368":"df_test['Family'] = df_test['SibSp'] + df_test['Parch']\ndf_test","0032544b":"drop_cols = ['Name', 'SibSp', 'Parch']\nobj_col = 'Survived'","2e26dfe9":"X_train = df_train.drop(drop_cols + [obj_col], axis=1)\nX_train","267870f1":"X_test = df_test.drop(drop_cols, axis=1)\nX_test","370a02ef":"y_train = df_train['Survived']\ny_train","0c4c779b":"def to_category(df):\n    for col, type in zip(df.columns, df.dtypes):\n        if type == object:\n            df[col] = df[col].astype('category')\n    \n    return df","db77ab1c":"X_train = to_category(X_train)\nX_test  = to_category(X_test)","3863604c":"import numpy as np\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\n\ndef acc_score(preds, data):\n    y_true = data.get_label()\n    y_pred = np.where(preds > 0.5, 1, 0)\n    acc = accuracy_score(y_true, y_pred)\n    return 'acc', acc, True\n\nlgb_train = lgb.Dataset(X_train, y_train)\n\nparams = {\n    'objective': 'binary',    \n    #'min_data_in_leaf': 15,  \n    #'force_row_wise': True,\n}\n\ncv_rslt = lgb.cv(params, \n                 lgb_train, \n                 nfold=5, \n                 num_boost_round=10000, \n                 early_stopping_rounds=20,               \n                 feval=acc_score,\n                 return_cvbooster=True)","31a36e5b":"cvbooster = cv_rslt['cvbooster']","965b493c":"cv_rslt['acc-mean']","17ca4fe1":"import scipy\n\ny_preds = cvbooster.predict(X_test, num_iteration=cvbooster.best_iteration)\ny_preds = np.round(y_preds)\ny_pred = scipy.stats.mode(y_preds)[0].squeeze()\ny_pred = pd.Series(y_pred, name=obj_col).astype(int)\ny_pred","59ac023d":"X_merge = pd.concat([X_train, X_test], axis=0)\nX_merge","48d7092c":"X_merge = to_category(X_merge)\nX_merge.dtypes","eeccdeec":"y_merge = pd.concat([y_train, pd.Series(y_pred)], axis=0).reset_index(drop=True)\ny_merge","835b1e7b":"lgb_train = lgb.Dataset(X_merge, y_merge)\n\ncv_rslt = lgb.cv(params, \n                 lgb_train, \n                 nfold=5, \n                 num_boost_round=10000, \n                 early_stopping_rounds=20,               \n                 feval=acc_score,\n                 return_cvbooster=True)","9f6f5959":"cv_rslt['acc-mean']","71d0c1cf":"cvbooster = cv_rslt['cvbooster']","4f2e1b42":"import scipy\n\ny_preds = cvbooster.predict(X_test, num_iteration=cvbooster.best_iteration)\ny_preds = np.round(y_preds)\ny_test = scipy.stats.mode(y_preds)[0].squeeze()\ny_test = pd.Series(y_test, name=obj_col).astype(int)\ny_test","e6582c9f":"answer = pd.concat([df_test.index.to_series().reset_index(drop=True), y_test], axis=1)\nanswer","3f457dd8":"filename_output = '.\/submission.csv'\nanswer.to_csv(filename_output, index=False)","638e7d5a":"## Categorize cabin","0f1c667d":"# Modeling","a291653f":"# Feature engineering","b68e8a10":"## Objective variables","36ccb134":"## Change object-type to category-type","d93f9249":"## Explanatory variables","684dbbe4":"## Add the number of families","14056a06":"# Preprocessing","c06a04e3":"# Prediction","8ab644b4":"# Pseudo-Labeling","82419bfb":"## Categorize ticket","54d355a4":"# Load files"}}