{"cell_type":{"eb63e2b0":"code","0e27fd13":"code","29fb1196":"code","d323e794":"code","f7e74b00":"code","b932e30e":"code","35dad0c9":"code","e05ae453":"code","c69a8327":"code","e738ce87":"code","0813bcf0":"code","742a6997":"code","146855bf":"code","c4f3f0dd":"code","7dc1500d":"code","ad5588ff":"code","f393b9b5":"code","86ec519a":"code","bc045bc9":"code","5d6f10c7":"code","59d06608":"code","3fca6829":"code","67d6f61c":"code","dcf312e3":"code","7b65fb57":"code","09a2789c":"code","7c2e9617":"code","baf45f6f":"code","03ba2c89":"code","09017f7d":"code","c6724f80":"code","576f529e":"code","68589964":"code","00a33c7d":"code","29c85689":"code","1455ac94":"code","50f32b32":"code","d9457adc":"code","22e1e3f4":"code","acb35f3a":"markdown","3d3221fb":"markdown","923de20b":"markdown","880ca796":"markdown","365bd75b":"markdown","b95601fa":"markdown","6cd067ee":"markdown","d1c7416e":"markdown","85b60067":"markdown","1a396df6":"markdown","d43c218e":"markdown","d328de68":"markdown","594e8cfb":"markdown","66fc6b67":"markdown","46c5e26c":"markdown","babf1468":"markdown","2d32c621":"markdown","ad35426f":"markdown","c5c7727c":"markdown","25fd4064":"markdown","891c34a4":"markdown","0a120846":"markdown","7ae18508":"markdown","4106cb6c":"markdown","4954c5a2":"markdown","235088da":"markdown"},"source":{"eb63e2b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e27fd13":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","29fb1196":"train_df = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv')\ntest_df = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv')","d323e794":"print(train_df.shape)\nprint(test_df.shape)","f7e74b00":"train_df.head()","b932e30e":"train_df.info()","35dad0c9":"test_df.info()","e05ae453":"train_df['datetime'] = pd.to_datetime(train_df['datetime'])\ntest_df['datetime'] = pd.to_datetime(test_df['datetime'])","c69a8327":"train_df['year'] = train_df['datetime'].apply(lambda x: x.year)\ntrain_df['month'] = train_df['datetime'].apply(lambda x: x.month)\ntrain_df['day'] = train_df['datetime'].apply(lambda x: x.day)\ntrain_df['hour'] = train_df['datetime'].apply(lambda x: x.hour)\n\ntest_df['year'] = test_df['datetime'].apply(lambda x: x.year)\ntest_df['month'] = test_df['datetime'].apply(lambda x: x.month)\ntest_df['day'] = test_df['datetime'].apply(lambda x: x.day)\ntest_df['hour'] = test_df['datetime'].apply(lambda x: x.hour)","e738ce87":"train_df.head()","0813bcf0":"test_df.head()","742a6997":"train_df = train_df.drop(['datetime', 'casual', 'registered'], axis=1)\ntest_df = test_df.drop(['datetime'], axis=1)","146855bf":"def rmsle(y, pred):\n    log_y = np.log1p(y)\n    log_pred = np.log1p(pred)\n    squared_error = (log_y - log_pred)**2\n    rmsle = np.sqrt(np.mean(squared_error))\n    return rmsle","c4f3f0dd":"sns.distplot(train_df['count'])","7dc1500d":"sns.distplot(np.log1p(train_df['count']))","ad5588ff":"train_df['count'] = np.log1p(train_df['count'])","f393b9b5":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\n\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(['count'], axis=1), train_df['count'], test_size=0.3)","86ec519a":"lr_reg = LinearRegression()\nlr_reg.fit(X_train, y_train)\npred = lr_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('RMSLE:', rmsle(y_test_exp, pred_exp))","bc045bc9":"coef = pd.Series(lr_reg.coef_, index=X_train.columns)\ncoef_sort = coef.sort_values(ascending=False)\nsns.barplot(x=coef_sort.values, y=coef_sort.index)","5d6f10c7":"train_df = pd.get_dummies(train_df, columns=['year', 'month', 'day', 'hour', 'holiday', 'workingday', 'season', 'weather'])\ntest_df = pd.get_dummies(test_df, columns=['year', 'month', 'day', 'hour', 'holiday', 'workingday', 'season', 'weather'])","59d06608":"print(train_df.shape)\nprint(test_df.shape)","3fca6829":"train_df, test_df = train_df.align(test_df, join='left', axis=1)\ntest_df = test_df.drop(['count'], axis=1)","67d6f61c":"print(train_df.shape)\nprint(test_df.shape)","dcf312e3":"X_train, X_test, y_train, y_test = train_test_split(train_df.drop(['count'], axis=1), train_df['count'], test_size=0.3)","7b65fb57":"lr_reg = LinearRegression()\nlr_reg.fit(X_train, y_train)\npred = lr_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('LinearRegression RMSLE:', rmsle(y_test_exp, pred_exp))","09a2789c":"ridge_reg = Ridge(alpha=10)\nridge_reg.fit(X_train, y_train)\npred = ridge_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('Ridge RMSLE:', rmsle(y_test_exp, pred_exp))","7c2e9617":"lasso_reg = Lasso(alpha=0.01)\nlasso_reg.fit(X_train, y_train)\npred = lasso_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('Lasso RMSLE:', rmsle(y_test_exp, pred_exp))","baf45f6f":"coef = pd.Series(lr_reg.coef_, index=X_train.columns)\ncoef_sort = coef.sort_values(ascending=False)[:25]\nsns.barplot(x=coef_sort.values, y=coef_sort.index)","03ba2c89":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor","09017f7d":"rf_reg = RandomForestRegressor(n_estimators=500)\nrf_reg.fit(X_train, y_train)\npred = rf_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('RandomForestRegressor RMSLE:', rmsle(y_test_exp, pred_exp))","c6724f80":"gbm_reg = GradientBoostingRegressor(n_estimators=500)\ngbm_reg.fit(X_train, y_train)\npred = gbm_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('GradientBoostingRegressor RMSLE:', rmsle(y_test_exp, pred_exp))","576f529e":"xgb_reg = XGBRegressor(n_estimators=500)\nxgb_reg.fit(X_train, y_train)\npred = xgb_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('XGBRegressor RMSLE:', rmsle(y_test_exp, pred_exp))","68589964":"lgbm_reg = LGBMRegressor(n_estimators=500)\nlgbm_reg.fit(X_train, y_train)\npred = lgbm_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('LGBMRegressor RMSLE:', rmsle(y_test_exp, pred_exp))","00a33c7d":"X_train = train_df.drop(['count'], axis=1)\ny_train = train_df['count']\nX_test = test_df","29c85689":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)","1455ac94":"lgbm_reg = LGBMRegressor(n_estimators=500)\nlgbm_reg.fit(X_train, y_train)\npred = lgbm_reg.predict(X_test)\n\npred_exp = np.expm1(pred)","50f32b32":"submission = pd.read_csv('..\/input\/bike-sharing-demand\/sampleSubmission.csv')\nsubmission","d9457adc":"submission.loc[:, 'count'] = pred_exp\nsubmission","22e1e3f4":"submission.to_csv('submission.csv', index=False)","acb35f3a":"\uc774\uc81c \ud68c\uadc0 \ubaa8\ub378\uc744 \uc774\uc6a9\ud574 \uc790\uc804\uac70 \ub300\uc5ec \ud69f\uc218\ub97c \uc608\uce21\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ud68c\uadc0 \ubaa8\ub378\uc744 \uc801\uc6a9\ud558\uae30 \uc804\uc5d0 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \ub300\ud574\uc11c \uba3c\uc800 \ucc98\ub9ac\ud574\uc57c \ud560 \uc0ac\ud56d\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uacb0\uad0f\uac12\uc774 \uc815\uaddc \ubd84\ud3ec\ub85c \ub3fc \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uacfc \uce74\ud14c\uace0\ub9ac\ud615 \ud68c\uadc0 \ubaa8\ub378\uc758 \uacbd\uc6b0 \uc6d0-\ud56b \uc778\ucf54\ub529\uc73c\ub85c \ud53c\ucc98\ub97c \uc778\ucf54\ub529\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n\ud68c\uadc0\uc5d0\uc11c \ud070 \uc608\uce21 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uacbd\uc6b0 \uac00\uc7a5 \uba3c\uc800 \uc0b4\ud3b4\ubcfc \uac83\uc740 Target \uac12\uc758 \ubd84\ud3ec\uac00 \uc65c\uace1\ub41c \ud615\ud0dc\ub97c \uc774\ub8e8\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. Target \uac12\uc758 \ubd84\ud3ec\ub294 \uc815\uaddc \ubd84\ud3ec \ud615\ud0dc\uac00 \uac00\uc7a5 \uc88b\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uace0 \uc65c\uace1\ub41c \uacbd\uc6b0\uc5d0\ub294 \ud68c\uadc0 \uc608\uce21 \uc131\ub2a5\uc774 \uc800\ud558\ub418\ub294 \uacbd\uc6b0\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\uc2b5\ub2c8\ub2e4.","3d3221fb":"# \uc774 \ucee4\ub110\uc5d0\uc11c \uc5bb\uac8c \ub420 \uac83\n\n- datetime\ud615 \uce7c\ub7fc \uc804\ucc98\ub9ac\n- \ub370\uc774\ud130\uc758 \ubd84\ud3ec\uc640 np.log1p(), np.expm1()\n- \uce74\ud14c\uace0\ub9ac\ud615 \ubcc0\uc218 \uc6d0-\ud56b \uc778\ucf54\ub529\n- train \ub370\uc774\ud130\uc640 test \ub370\uc774\ud130\uc758 \uce7c\ub7fc align\n- \ud68c\uadc0 \uacc4\uc218\ub97c \ubcf4\uace0 \uacb0\ub860 \ub0b4\ub9ac\uae30","923de20b":"\uc704\uc758 rmsle() \ud568\uc218\ub97c \ub9cc\ub4e4 \ub54c \ud55c \uac00\uc9c0 \uc8fc\uc758\ud574\uc57c \ud560 \uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. rmsle\ub97c \uad6c\ud560 \ub54c \ub118\ud30c\uc774\uc758 log() \ud568\uc218\ub97c \uc774\uc6a9\ud558\uac70\ub098 \uc0ac\uc774\ud0b7\ub7f0\uc758 mean_squared_log_error()\ub97c \uc774\uc6a9\ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc \ub370\uc774\ud130 \uac12\uc758 \ud06c\uae30\uc5d0 \ub530\ub77c \uc624\ubc84\ud50c\ub85c\/\uc5b8\ub354\ud50c\ub85c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c log()\ubcf4\ub2e4\ub294 log1p()\ub97c \uc774\uc6a9\ud558\ub294\ub370, log1p()\uc758 \uacbd\uc6b0\ub294 1+log() \uac12\uc73c\ub85c log \ubcc0\ud658\uac12\uc5d0 1\uc744 \ub354\ud558\ubbc0\ub85c \uc774\ub7f0 \ubb38\uc81c\ub97c \ud574\uacb0\ud574 \uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 log1p()\ub85c \ubcc0\ud658\ub41c \uac12\uc740 \ub2e4\uc2dc \ub118\ud30c\uc774\uc758 expm1() \ud568\uc218\ub85c \uc27d\uac8c \uc6d0\ub798\uc758 \uc2a4\ucf00\uc77c\ub85c \ubcf5\uc6d0\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","880ca796":"\uc774\ubc88\uc5d0\ub294 \ud68c\uadc0 \ud2b8\ub9ac\ub97c \uc774\uc6a9\ud574 \ud68c\uadc0 \uc608\uce21\uc744 \uc218\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc55e\uc5d0\uc11c \uc801\uc6a9\ud55c Target \uac12\uc758 \ub85c\uadf8 \ubcc0\ud658\ub41c \uac12\uacfc \uc6d0-\ud56b \uc778\ucf54\ub529\ub41c \ud53c\uccd0 \uc138\ud2b8\ub97c \uadf8\ub300\ub85c \uc774\uc6a9\ud574 \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8, GBM, XGBoost, LightGBM\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \uc131\ub2a5 \ud3c9\uac00\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","365bd75b":"# Disclaimer\n\n\uc774 \ucee4\ub110\uc740 \uc704\ud0a4\ubd81\uc2a4 \ucd9c\ud310 '\ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \uc644\ubcbd \uac00\uc774\ub4dc' \ub3c4\uc11c\ub97c \ub2e4\ub7c9 \ucc38\uace0\ud558\uc5ec \uc791\uc131\ud558\uc600\uc2b5\ub2c8\ub2e4.","b95601fa":"# \ub370\uc774\ud130 \ub85c\ub4dc","6cd067ee":"\uc6d4, \uc8fc\ub9d0\/\uc8fc\uc911, \uadf8\ub9ac\uace0 \uacc4\uc808 \ub4f1 \uc0c1\uc2dd\uc120\uc5d0\uc11c \uc790\uc804\uac70\ub97c \ud0c0\ub294 \ub370 \ud544\uc694\ud55c \ud53c\uccd0\uc758 \ud68c\uadc0 \uacc4\uc218\uac00 \ub192\uc544\uc84c\uc2b5\ub2c8\ub2e4. \uc774\ucc98\ub7fc \uc120\ud615 \ud68c\uadc0 \uc218\ud589 \uc2dc\uc5d0\ub294 \ud53c\ucc98\ub97c \uc5b4\ub5bb\uac8c \uc778\ucf54\ub529\ud558\ub294\uac00\uac00 \uc131\ub2a5\uc5d0 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce60 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","d1c7416e":"\ud574\ub2f9 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0\ub294 2011\ub144 1\uc6d4\ubd80\ud130 2012\ub144 12\uc6d4\uae4c\uc9c0 \ub0a0\uc9dc\/\uc2dc\uac04, \uae30\uc628, \uc2b5\ub3c4, \ud48d\uc18d \ub4f1\uc758 \uc815\ubcf4\ub97c \uae30\ubc18\uc73c\ub85c 1\uc2dc\uac04 \uac04\uaca9 \ub3d9\uc548\uc758 \uc790\uc804\uac70 \ub300\uc5ec \ud69f\uc218\uac00 \uae30\uc7ac\ub3fc \uc788\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130 \uc138\ud2b8\uc758 \uc8fc\uc694 \uce7c\ub7fc\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc774 \uc911 \uacb0\uc815 \uac12\uc740 \ub9e8 \ub9c8\uc9c0\ub9c9 \uce7c\ub7fc\uc778 count\ub85c '\ub300\uc5ec \ud69f\uc218'\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4.\n\n- datetime: hourly date + timestamp\n- season: 1=\ubd04, 2=\uc5ec\ub984, 3=\uac00\uc744, 4=\uaca8\uc6b8\n- holiday: 1=\uc8fc\ub9d0\uc744 \uc81c\uc678\ud55c \uad6d\uacbd\uc77c \ub4f1\uc758 \ud734\uc77c, 0=\ud734\uc77c\uc774 \uc544\ub2cc \ub0a0\n- workingday: 1=\uc8fc\ub9d0 \ubc0f \ud734\uc77c\uc774 \uc544\ub2cc \uc8fc\uc911, 0=\uc8fc\ub9d0 \ubc0f \ud734\uc77c\n- weather:\n  - 1=\ub9d1\uc74c, \uc57d\uac04 \uad6c\ub984 \ub080 \ud750\ub9bc\n  - 2=\uc548\uac1c, \uc548\uac1c + \ud750\ub9bc\n  - 3=\uac00\ubcbc\uc6b4 \ub208, \uac00\ubcbc\uc6b4 \ube44 + \ucc9c\ub465\n  - 4=\uc2ec\ud55c \ub208\/\ube44, \ucc9c\ub465\/\ubc88\uac1c\n- temp: \uc628\ub3c4(\uc12d\uc528)\n- atemp: \uccb4\uac10\uc628\ub3c4(\uc12d\uc528)\n- humidity: \uc0c1\ub300\uc2b5\ub3c4\n- windspeed: \ud48d\uc18d\n- casual: \uc0ac\uc804\uc5d0 \ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \uc0ac\uc6a9\uc790\uac00 \ub300\uc5ec\ud55c \ud69f\uc218\n- registered: \uc0ac\uc804\uc5d0 \ub4f1\ub85d\ub41c \uc0ac\uc6a9\uc790\uac00 \ub300\uc5ec\ud55c \ud69f\uc218\n- count: \ub300\uc5ec \ud69f\uc218","85b60067":"\uc6d0\ud558\ub294 \uc815\uaddc \ubd84\ud3ec \ud615\ud0dc\ub294 \uc544\ub2c8\uc9c0\ub9cc \ubcc0\ud658\ud558\uae30 \uc804\ubcf4\ub2e4\ub294 \uc65c\uace1 \uc815\ub3c4\uac00 \ub9ce\uc774 \ud5a5\uc0c1\ub410\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc774\uc6a9\ud574 LinearRegression \ubaa8\ub378\uc744 \ud559\uc2b5\ud55c \ud6c4 \ud3c9\uac00\ub97c \uc218\ud589\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","1a396df6":"## \ud2b8\ub9ac \uae30\ubc18 \ud68c\uadc0","d43c218e":"\uc6d0-\ud56b \uc778\ucf54\ub529\uc744 \uc801\uc6a9\ud558\uace0 \ub098\uc11c \uc120\ud615 \ud68c\uadc0\uc758 \uc608\uce21 \uc131\ub2a5\uc774 \ub9ce\uc774 \ud5a5\uc0c1\ub410\uc2b5\ub2c8\ub2e4. \uc6d0-\ud56b \uc778\ucf54\ub529\ub41c \ub370\uc774\ud130 \uc138\ud2b8\uc5d0\uc11c \ud68c\uadc0 \uacc4\uc218\uac00 \ub192\uc740 \ud53c\uccd0\ub97c \ub2e4\uc2dc \uc2dc\uac01\ud654\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc6d0-\ud56b \uc778\ucf54\ub529\uc73c\ub85c \ud53c\uccd0\uac00 \ub298\uc5b4\ub0ac\uc73c\ubbc0\ub85c \ud68c\uadc0 \uacc4\uc218 \uc0c1\uc704 25\uac1c \ud53c\uccd0\ub97c \ucd94\ucd9c\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","d328de68":"year \ud53c\uccd0\uc758 \ud68c\uadc0 \uacc4\uc218 \uac12\uc774 \ub3c5\ubcf4\uc801\uc73c\ub85c \ud070 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. year\ub294 2011, 2012 \ub450 \uac1c\uc758 \uac12\uc73c\ub85c \ub3fc \uc788\uc2b5\ub2c8\ub2e4. year\uc5d0 \ub530\ub77c\uc11c \uc790\uc804\uac70 \ub300\uc5ec \ud69f\uc218\uac00 \ud06c\uac8c \uc601\ud5a5\uc744 \ubc1b\ub294\ub2e4\ub294 \uac83\uc740 \ub0a9\ub4dd\ud558\uae30 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \uc5ec\ub984, \uac00\uc744\uacfc \uac19\uc774 \uc790\uc804\uac70\ub97c \ud0c0\uae30 \uc88b\uc740 \uacc4\uc808\uc774\ub098 \ub0ae \uc2dc\uac04\ub300 \ub4f1\uc758 \ub2e4\uc591\ud55c \uc694\uc18c\ub97c \uc81c\uc678\ud558\uace0 year\uc758 \ud68c\uadc0 \uacc4\uc218\uac00 \uc774\ub807\uac8c \ud070 \uc774\uc720\ub294 \ubb34\uc5c7\uc77c\uae4c\uc694? year \ud53c\uccd0\ub294 \uc5f0\ub3c4\ub97c \ub73b\ud558\ubbc0\ub85c \uce74\ud14c\uace0\ub9ac\ud615 \ud53c\uccd0\uc9c0\ub9cc, \uc22b\uc790\ud615 \uac12\uc73c\ub85c \ub3fc \uc788\uc2b5\ub2c8\ub2e4. \ub354\uad70\ub2e4\ub098 \uc544\uc8fc \ud070 \uac12\uc778 2011, 2012\ub85c \ub3fc \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc774\ud0b7\ub7f0\uc740 \uce74\ud14c\uace0\ub9ac\ub97c \uc704\ud55c \ub370\uc774\ud130 \ud0c0\uc785\uc774 \uc5c6\uc73c\uba70, \ubaa8\ub450 \uc22b\uc790\ub85c \ubcc0\ud658\ud574\uc57c \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ucc98\ub7fc \uc22b\uc790\ud615 \uce74\ud14c\uace0\ub9ac \uac12\uc744 \uc120\ud615 \ud68c\uadc0\uc5d0 \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \ud68c\uadc0 \uacc4\uc218\ub97c \uc5f0\uc0b0\ud560 \ub54c \uc774 \uc22b\uc790\ud615 \uac12\uc5d0 \ud06c\uac8c \uc601\ud5a5\uc744 \ubc1b\ub294 \uacbd\uc6b0\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc120\ud615 \ud68c\uadc0\uc5d0\uc11c\ub294 \uc774\ub7ec\ud55c \ud53c\ucc98 \uc778\ucf54\ub529\uc5d0 \uc6d0-\ud56b \uc778\ucf54\ub529\uc744 \uc801\uc6a9\ud574 \ubcc0\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.","594e8cfb":"train_df\uc640 test_df\uc758 shape\ub97c \ub9de\ucdb0\uc8fc\uae30 \uc704\ud574 align\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. (https:\/\/www.kaggle.com\/dansbecker\/using-categorical-data-with-one-hot-encoding )","66fc6b67":"Null \ub370\uc774\ud130\ub294 \uc5c6\uc73c\uba70, \ub300\ubd80\ubd84\uc758 \uce7c\ub7fc\uc774 int \ub610\ub294 float\ud615\uc778\ub370, datetime \uce7c\ub7fc\ub9cc object \ud615\uc785\ub2c8\ub2e4. Datetime \uce7c\ub7fc\uc758 \uacbd\uc6b0 \ub144-\uc6d4-\uc77c \uc2dc:\ubd84:\ucd08 \ubb38\uc790 \ud615\uc2dd\uc73c\ub85c \ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \uc774\uc5d0 \ub300\ud55c \uac00\uacf5\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. datetime\uc744 \ub144, \uc6d4, \uc77c, \uadf8\ub9ac\uace0 \uc2dc\uac04\uacfc \uac19\uc774 4\uac1c\uc758 \uc18d\uc131\uc73c\ub85c \ubd84\ub9ac\ud558\uaca0\uc2b5\ub2c8\ub2e4. \ud310\ub2e4\uc2a4\uc5d0\uc11c\ub294 datetime\uacfc \uac19\uc740 \ud615\ud0dc\uc758 \ubb38\uc790\uc5f4\uc744 \ub144\ub3c4, \uc6d4, \uc77c, \uc2dc\uac04, \ubd84, \ucd08\ub85c \ud3b8\ub9ac\ud558\uac8c \ubcc0\ud658\ud558\ub824\uba74 \uba3c\uc800 \ubb38\uc790\uc5f4\uc744 'datetime' \ud0c0\uc785\uc73c\ub85c \ubcc0\uacbd\ud574\uc57c \ud569\ub2c8\ub2e4.","46c5e26c":"\ud310\ub2e4\uc2a4\uc758 get_dummies()\ub97c \uc774\uc6a9\ud574 \uc774\ub7ec\ud55c year \uce7c\ub7fc\uc744 \ube44\ub86f\ud574 month, day, hour, holiday, workingday, season, weather \uce7c\ub7fc\ub3c4 \ubaa8\ub450 \uc6d0-\ud56b \uc778\ucf54\ub529\ud55c \ud6c4\uc5d0 \ub2e4\uc2dc \uc608\uce21 \uc131\ub2a5\uc744 \ud655\uc778\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","babf1468":"\uac01 \ud53c\uccd0\uc758 \ud68c\uadc0 \uacc4\uc218 \uac12\uc744 \uc2dc\uac01\ud654\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","2d32c621":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac","ad35426f":"train.csv \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc774\uc6a9\ud574 \ubaa8\ub378\uc744 \ud559\uc2b5\ud55c \ud6c4 \ub300\uc5ec \ud69f\uc218(count)\ub97c \uc608\uce21\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","c5c7727c":"# \ubaa8\ub378 \uc120\uc815","25fd4064":"\ub2e4\uc74c\uc73c\ub85c \ub2e4\uc591\ud55c \ud68c\uadc0 \ubaa8\ub378\uc744 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \uc801\uc6a9\ud574 \uc608\uce21 \uc131\ub2a5\uc744 \uce21\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uce90\uae00\uc5d0\uc11c \uc694\uad6c\ud55c \uc131\ub2a5 \ud3c9\uac00 \ubc29\ubc95\uc740 RMSLE(Root Mean Square Log Error)\uc785\ub2c8\ub2e4. \uc989, \uc624\ub958 \uac12\uc758 \ub85c\uadf8\uc5d0 \ub300\ud55c RMSE\uc785\ub2c8\ub2e4. \uc544\uc27d\uac8c\ub3c4 \uc0ac\uc774\ud0b7\ub7f0\uc740 RMSLE\ub97c \uc81c\uacf5\ud558\uc9c0 \uc54a\uc544\uc11c RMSLE\ub97c \uc218\ud589\ud558\ub294 \uc131\ub2a5 \ud3c9\uac00 \ud568\uc218\ub97c \uc9c1\uc811 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","891c34a4":"\uc55e\uc758 \uc120\ud615 \ud68c\uadc0 \ubaa8\ub378\ubcf4\ub2e4 \ud68c\uadc0 \uc608\uce21 \uc131\ub2a5\uc774 \uac1c\uc120\ub410\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc774 \ud68c\uadc0 \ud2b8\ub9ac\uac00 \uc120\ud615 \ud68c\uadc0\ubcf4\ub2e4 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uac00\uc9c4\ub2e4\ub294 \uc758\ubbf8\ub294 \uc544\ub2d9\ub2c8\ub2e4. \ub370\uc774\ud130 \uc138\ud2b8\uc758 \uc720\ud615\uc5d0 \ub530\ub77c \uacb0\uacfc\ub294 \uc5bc\ub9c8\ub4e0\uc9c0 \ub2ec\ub77c\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","0a120846":"## \uc120\ud615 \ud68c\uadc0 \ubaa8\ub378","7ae18508":"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0\ub294 casual, registered, count \ubcc0\uc218\uac00 \ube60\uc9c4 \uc0c1\ud0dc\uc785\ub2c8\ub2e4.","4106cb6c":"count \uce7c\ub7fc \uac12\uc774 \uc815\uaddc \ubd84\ud3ec\uac00 \uc544\ub2cc 0~200 \uc0ac\uc774\uc5d0 \uc65c\uace1\ub3fc \uc788\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \uc65c\uace1\ub41c \uac12\uc744 \uc815\uaddc \ubd84\ud3ec \ud615\ud0dc\ub85c \ubc14\uafb8\ub294 \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\uc740 \ub85c\uadf8\ub97c \uc801\uc6a9\ud574 \ubcc0\ud658\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \ub118\ud30c\uc774\uc758 log1p()\ub97c \uc774\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ubcc0\uacbd\ub41c Target \uac12\uc744 \uae30\ubc18\uc73c\ub85c \ud559\uc2b5\ud558\uace0 \uc608\uce21\ud55c \uac12\uc740 \ub2e4\uc2dc expm1() \ud568\uc218\ub97c \uc801\uc6a9\ud574 \uc6d0\ub798 scale \uac12\uc73c\ub85c \uc6d0\uc0c1 \ubcf5\uad6c\ud558\uba74 \ub429\ub2c8\ub2e4. log1p()\ub97c \uc801\uc6a9\ud55c count\uac12\uc758 \ubd84\ud3ec\ub97c \ud655\uc778\ud558\uaca0\uc2b5\ub2c8\ub2e4.","4954c5a2":"# \uc608\uce21(Prediction), \uc81c\ucd9c(Submission)","235088da":"\uc0c8\ub86d\uac8c year, month, day, hour \uce7c\ub7fc\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uc81c datetime \uce7c\ub7fc\uc740 \uc0ad\uc81c\ud558\uaca0\uc2b5\ub2c8\ub2e4. \n\n\ub610\ud55c casual \uce7c\ub7fc\uc740 \uc0ac\uc804\uc5d0 \ub4f1\ub85d\ud558\uc9c0 \uc54a\uc740 \uc0ac\uc6a9\uc790\uc758 \uc790\uc804\uac70 \ub300\uc5ec \ud69f\uc218\uc774\uace0, registered\ub294 \uc0ac\uc804\uc5d0 \ub4f1\ub85d\ud55c \uc0ac\uc6a9\uc790\uc758 \ub300\uc5ec \ud69f\uc218\uc774\uba70, casual + registered = count\uc774\ubbc0\ub85c casual\uacfc registered\uac00 \ub530\ub85c \ud544\uc694\ud558\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \uc624\ud788\ub824 \uc0c1\uad00\ub3c4\uac00 \ub192\uc544 \uc608\uce21\uc744 \uc800\ud574\ud560 \uc6b0\ub824\uac00 \uc788\uc73c\ubbc0\ub85c \uc774 \ub450 \uce7c\ub7fc\ub3c4 \uc0ad\uc81c\ud558\uaca0\uc2b5\ub2c8\ub2e4."}}