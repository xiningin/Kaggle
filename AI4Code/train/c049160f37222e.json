{"cell_type":{"a973027b":"code","eff49c3c":"code","92258dd8":"code","c51ebda6":"code","d2140404":"code","fbaccb54":"code","e2b32e57":"code","e8ccd5cb":"code","faee6810":"code","6ab9c70d":"code","98228b43":"code","bc2aabb2":"code","b0b5ca3b":"code","16b5834b":"code","b97c878b":"code","e9c9fa55":"code","6ec921b7":"code","b3e47852":"markdown","280b55a8":"markdown","49b66bcc":"markdown","caf783f1":"markdown","d9de4f09":"markdown","dd0f48d9":"markdown","e8284839":"markdown","96474863":"markdown","4e9e9949":"markdown","5f4efa01":"markdown","9ec65712":"markdown","1e03ce58":"markdown","7b9ef775":"markdown","ba8c1358":"markdown","a5de13e5":"markdown","e49833c4":"markdown","acd908e4":"markdown"},"source":{"a973027b":"import numpy\nfrom keras import backend as K\nfrom keras.datasets import mnist\nfrom keras.utils import np_utils","eff49c3c":"from keras.layers import Dense, Dropout,Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D","92258dd8":"from keras.models import Sequential\nimport pandas as pd","c51ebda6":"K.set_image_data_format('channels_last')\nnumpy.random.seed(0)","d2140404":"X = pd.read_csv(\"..\/input\/ahdd1\/csvTrainImages 60k x 784.csv\")\ny = pd.read_csv(\"..\/input\/ahdd1\/csvTrainLabel 60k x 1.csv\")\ntest=pd.read_csv(\"..\/input\/ahdd1\/csvTestImages 10k x 784.csv\")","fbaccb54":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X.values, y.values, test_size=0.2 , random_state=42)","e2b32e57":"X_train = X_train.reshape(X_train.shape[0], 28, 28 , 1).astype('float32')\nX_test = X_test.reshape(X_test.shape[0], 28, 28 , 1).astype('float32')","e8ccd5cb":"import matplotlib.pyplot as plt\nprint(\"the number of training examples = %i\" % X_train.shape[0])\nprint(\"the number of classes = %i\" % len(numpy.unique(y_train)))\nprint(\"Dimention of images = {:d} x {:d}  \".format(X_train[1].shape[0],X_train[1].shape[1])  )\n\n#This line will allow us to know the number of occurrences of each specific class in the data\nunique, count= numpy.unique(y_train, return_counts=True)\nprint(\"The number of occuranc of each class in the dataset = %s \" % dict (zip(unique, count) ), \"\\n\" )\n \nimages_and_labels = list(zip(X_train,  y_train))\nfor index, (image, label) in enumerate(images_and_labels[:12]):\n    plt.subplot(5, 4, index + 1)\n    plt.axis('off')\n    plt.imshow(image.squeeze(), cmap=plt.cm.gray_r, interpolation='nearest')\n    plt.title('label: %i' % label )","faee6810":"from keras.layers import Dropout\n\nmodel = Sequential()\n\nmodel.add(Conv2D(100, kernel_size=3, padding=\"valid\", input_shape=(28, 28, 1), activation = 'relu'))","6ab9c70d":"model.add(Conv2D(100, kernel_size=3, padding=\"valid\", activation = 'relu'))\nmodel.add(Conv2D(100, kernel_size=3, padding=\"valid\", activation = 'relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))","98228b43":"from keras.layers.core import Activation\n\nmodel.add(Flatten())\nmodel.add(Dense(units= 500, activation='relu'  ))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(10))\nmodel.add(Activation(\"softmax\"))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","bc2aabb2":"y_train = np_utils.to_categorical(y_train).astype('int32')\ny_test = np_utils.to_categorical(y_test)","b0b5ca3b":"from tensorflow import keras\n\ncallbacks = [\n    keras.callbacks.EarlyStopping(\n        # Stop training when `val_loss` is no longer improving\n        monitor='val_loss',\n        # \"no longer improving\" being defined as \"no better than 1e-2 less\"\n        min_delta=1e-3,\n        # \"no longer improving\" being further defined as \"for at least 2 epochs\"\n        patience=25,\n        verbose=1)\n]","16b5834b":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nX_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=10,\n    fill_mode='nearest',\n    validation_split = 0.2\n    )\n\ndatagen.fit(X_train)\n\ntrain_generator = datagen.flow(X_train, y_train, batch_size=60, subset='training')\n\nvalidation_generator = datagen.flow(X_train, y_train, batch_size=60, subset='validation')\n\n\n# fits the model on batches with real-time data augmentation:\nhistory = model.fit_generator(generator=train_generator,\n                    validation_data=validation_generator,\n                    use_multiprocessing=True,\n                    steps_per_epoch = len(train_generator) \/ 60,\n                    validation_steps = len(validation_generator) \/ 60,\n                    epochs = 10,\n                    workers=-1)","b97c878b":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('Accuracy')\nplt.ylim([-1,1])\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.ylabel('Cross Entropy')\nplt.ylim([-1,1.0])\nplt.title('Training and Validation Loss')\nplt.xlabel('epoch')\nplt.show()","e9c9fa55":"# # model.fit(X_train, y_train, epochs= 32 , batch_size=200, validation_split = 0.2)\n# scores = model.evaluate(X_test, y_test, verbose = 10 )\n# print ( scores )\n","6ec921b7":"test_set = (test.values).reshape(-1, 28, 28 , 1).astype('float32')\n\nres = model.predict(test_set)\nres = numpy.argmax(res,axis = 1)\nres = pd.Series(res, name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1 ,28001) ,name = \"ImageId\"),   res],axis = 1)\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)\nsubmission.head(10)","b3e47852":"There are two csv files that contain the data for the training set and the test set when combined they form the mnist Dataset of 60,000 28x28 grayscale images of the 10 digits, along with a test set of 10,000 images.  when we use the read_csv() function to read the dataset csv files.","280b55a8":"We have used categorical_crossentropy as the cost function for that model but what does we mean by **cost function**\n\n#### Cost function : It is a measure of the overall loss in our network after assigning values to the parameters during the forward phase so it indicates how well the parameters were chosen during the forward probagation phase.\n\n#### Optimizer : It is the gradiant descent algorithm that is used. We use it to minimize the cost function to approach the minimum point. We are using adam optimizer which is one of the best gradient descent algorithms. You can refere to this paper to know how it works https:\/\/arxiv.org\/abs\/1412.6980v8\n\nYou can use other metrics to measure the performance other than accuracy as precision or recall or F1 score. the choice depends on the problem itself. Where high recall means low number of false negatives , High precision means low number of false positives and     F1 score is a trade off between them. You can refere to this article for more about precision and recall http:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_precision_recall.html","49b66bcc":"Now we add a flatten layer that takes the output of the CNN and flattens it and passes it as an input to the Dense Layers which passes it to the output layer.\nwe have used number of classes = 10 because we have 10 numbers from 0 to 9 .\nevery dense layer contains 300 neurons except for the output layer.\nWe use Softmax with the output layer to output estimated probability vector for  multi-class classification .","caf783f1":"### This tutorial is written by AbdElRhman ElMoghazy.\n\n### Refrences ,Textbooks and Tutorials :\nHands on machine learning with scikit-learn and TensorFlow by Aur\u00e9lien G\u00e9ron\n\nPyhron machine learning 2nd edition by Sebastian Raschka ,Vahid Mirjalili\n\nhttp:\/\/www.deeplearningbook.org\/\n\nhttps:\/\/keras.io\/\n\nhttps:\/\/machinelearningmastery.com\/handwritten-digit-recognition-using-convolutional-neural-networks-python-keras\/\n\nhttps:\/\/codelabs.developers.google.com\/codelabs\/cloud-tensorflow-mnist\/index.html?index=..%2F..%2Findex#0","d9de4f09":"I will use ImageDataGenerator from keras to augment the images. Augmenting the images makes the model more robust and more generalizable when using newly unseen data like the data in the test set of the competition. There are many ways to augment the images like centering the images, normalization, rotation, shifting, and flipping and i will use some of them [here](http:\/\/) .","dd0f48d9":"Lets add the 2nd layer but this time we increase the feature maps .","e8284839":"We will start by importing Keras.","96474863":"We then import the layers of the convolutional neural network.The network consists of two main components :\n\n1. Convolutional layers : the convolutional layer is responsible for the convolutional operation in which feature maps identifies features in the images.\nand is usually followed by two types of layers which are :\n>*   **Dropout** : Dropout is a regulization technique where you turn off part of the network's layers randomally to increase regulization and hense decrease overfitting. We use when the training set accuracy is muuch higher than the test set accuracy.\n>*   **Max Pooling** : The maximum output in a rectangular neighbourhood. It is used to make the network more flexible to slight changes and decrease the network computationl expenses by extracting the group of pixels that are highly contributing to each feature in the feature maps in the layer.\n2. Dense layers : The dense layer is a fully connected layer that comes after the convolutional layers and they give us the output vector of the Network.\n\nAs a convention in Convolutional Neural Network we decrease the dimensions of the layers as we go deeper and increase the number of feature maps to make it detect more features and decrease the number of computational cost.\n\n![alt text](https:\/\/raw.githubusercontent.com\/MoghazyCoder\/Machine-Learning-Tutorials\/master\/assets\/Untitled.png)\n\n ","4e9e9949":"We have to compile the model and then try training it using the fit() function which fits the training data and labels , the number of epochs and the batch_size which is the number of photos per training cycle.\nThe last thing that we are going to do is to evaluate the model to ensure that it doesn't overfit the trainig data .Evaluating the model is done by using the weights that resulted from the training step and using it to estimate the value of the test data that the model haven't seen before to estimate how well the model will perform in the future on new data.\n\nif you are using cross-validation split then the convention is to split the data by 60% training set , 20% validation set and 20% test set but in the era of big data this ratio may vary according to the amount of data you have.","5f4efa01":"<h1>Data Exploration<\/h1>\nLet's explore the data we have as this will give us a hint on the algorithm we will use if we have to choose. Exploring data is also very important because it will tell you which accuracy metric you are going to use, if the data is balanced which means all the classes have fair contribution in the dataset regarding its numbers then we can easily use accuracy, But if the data is skewed then we won't be able to use accurace as it's results will be misleading and we may use F-beta score instead.","9ec65712":"<h1>  Model Design and Achitecture<\/h1>\n\nNow lets implement the first layer of the convolutional network as shown in the schema below and i will use a simple archicture simillar to LeCun's network a .\n![alt text](https:\/\/raw.githubusercontent.com\/MoghazyCoder\/Machine-Learning-Tutorials\/master\/assets\/Layer.png)\nFor the sequential model you just stack the layers and only specify the image input dimensions in the first layer.\nOur first layer will be a convolutional layer Conv2D() where we specify the number of feature maps , the input shape and the activation function which is here relu .The relu activation function is represented mathematically by max(0,X).\nWe then add the max pooling layer (which is the most common kind of pooling) with a kernel of dimensions 2 * 2 .\n","1e03ce58":"# Convolutional Neural Networks with Data Augmentation using Keras\n\n---\n\n\n## In this tutorial I will be using Keras with TensorFlow as backend to calssify digits from the MNIST Dataset","7b9ef775":"Sequential layers are stacked such that every layer passes its output to the next layer without you specifying extra information so we import Sequential from models","ba8c1358":"From the previous results we can see that the dataset consists of 60000 training example each is an image of dimention 28 * 28. We can see that the number of occurances of each class is almost balanced and based on that it is safe to use accuracy as our metric later.","a5de13e5":"We must specify which data format convention Keras will follow using the following line of code. Keras can accept the number of channels before other dimensions or after it but here we have to specify which convention we will use. We will use channels last which is Tensorflow's convention .","e49833c4":"We then reshape the samples according to TensorFlow convention which we chosed previously using \"K.set_image_data_format('channels_last')\" samples,rows,columns,channels as we are using channels_last if you are using channels_first you will need to change the order to samples,channels,rows,column and here we have only one channel because we are using the image in grayscale not RGB. We should also make the output in the form of one vs all (aka one hot encoding) which means that we will have 10 calsses from 0 to 9 one class for each number from 0 to 9\n\n","acd908e4":"Note that these results can be further optimized and regulized but i will leave that for you. Knowing how to optimize the results is very important and can be done using error analysis techniques."}}