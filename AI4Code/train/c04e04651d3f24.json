{"cell_type":{"5eb54d49":"code","5c3525ff":"code","b5dd324c":"code","3faf26ff":"code","c72fd2eb":"code","c05023b8":"code","7977df75":"code","73cb58c7":"code","3050db30":"code","2f524c2e":"code","059cb8f8":"code","aabf18d2":"code","953e563a":"markdown","9dbf86ba":"markdown","704a32a1":"markdown","97c1c9b3":"markdown","f8b7eb71":"markdown","c1b3ca14":"markdown","e38ec9ab":"markdown","bb4cad3f":"markdown","03f82489":"markdown","b288edaa":"markdown","d36484e1":"markdown","6867044f":"markdown","c15f57f3":"markdown","3a471143":"markdown"},"source":{"5eb54d49":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense","5c3525ff":"dataset_athlet = pd.read_csv(\"..\/input\/athlete_events.csv\")\ndataset_noc = pd.read_csv(\"..\/input\/noc_regions.csv\")\ndataset_noc = dataset_noc.iloc[:,[0,1]]\ndataset_final=pd.merge(dataset_athlet, dataset_noc, on = 'NOC',how = 'left')","b5dd324c":"\nX = dataset_final.iloc[:,[2,3,4,5,10,12,15]].values\nY = dataset_final.iloc[:,[14]].values","3faf26ff":"from sklearn.preprocessing import Imputer\nimputer = Imputer(missing_values = 'NaN', strategy = 'mean', axis = 0)\nimputer = imputer.fit(X[:, 1:4])\nX[:,1:4] = imputer.transform(X[:, 1:4])","c72fd2eb":"for i in range(len(X[:,6])):\n    if type(X[:,6][i]) != type('string'):\n        X[:,6][i] = 'unknown'","c05023b8":"for i in range(len(Y[:,0])):\n    if type(Y[:,0][i]) != type('asd'):\n        Y[:,0][i] = 'No Medals'\n","7977df75":"labelencoder_X = LabelEncoder()\nX[:,0] = labelencoder_X.fit_transform(X[:,0])\nX[:,4] = labelencoder_X.fit_transform(X[:,4])\nX[:,5] = labelencoder_X.fit_transform(X[:,5])\nX[:,6] = labelencoder_X.fit_transform(X[:,6])\nonehotencoder_X = OneHotEncoder(categorical_features = [4,5,6])\nX = onehotencoder_X.fit_transform(X).toarray()","73cb58c7":"labelencoder_Y = LabelEncoder()\nY[:,0] = labelencoder_Y.fit_transform(Y[:,0])\nonehotencoder_Y = OneHotEncoder(categorical_features = [0])\nY = onehotencoder_Y.fit_transform(Y).toarray()","3050db30":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state=0)\n","2f524c2e":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n","059cb8f8":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\ndef build_classifier():\n    # Initialising the ANN\n    classifier = Sequential()\n    # Adding the input layer and the first hidden layer\n    classifier.add(Dense(units = 180, kernel_initializer = 'uniform', activation = 'relu', input_dim = 278))\n    # Adding the second hidden layer\n    classifier.add(Dense(units = 180, kernel_initializer = 'uniform', activation = 'relu'))\n    # Adding the output layer\n    classifier.add(Dense(units = 4, kernel_initializer = 'uniform', activation = 'sigmoid'))\n    # Compiling the ANN\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return classifier\n\nclassifier = KerasClassifier(build_fn = build_classifier, batch_size = 10, epochs = 100)\naccuracies = cross_val_score(estimator = classifier, X = X_train, y=Y_train, cv = 5)","aabf18d2":"score = accuracies.mean()\nvariance = accuracies.std()\n\nprint('the score is:', score)\nprint('The variance is:', variance)","953e563a":"**1.2 Importing the dataset as dataFrame:**","9dbf86ba":"**1.6 Taking care of missing (NAN) categorical data (Medal won) in Y**","704a32a1":"**1.4 Taking care of missing (NAN) numerical data**","97c1c9b3":"1. DATA PRE-PROCESSING\n----------------------------------","f8b7eb71":"2. NOW LETS CREATE THE ARTIFICIAL NEURAL NETWORK TO PREDICT THE WINNERS IN OLYMPICS\n--------------------------------------------------------------------------------------------------------------------------------","c1b3ca14":"**1.8 Splitting the dataset into training and  test set**","e38ec9ab":"**1.5 Taking care of missing (NAN) categorical data (region) in X**","bb4cad3f":"**2.1 Evaluating the model through K-fold cross validation:**","03f82489":"**1.1 Importing required libraries:**","b288edaa":"**1.3 Storing the independent variables (2=sex; 3=age; 4=height; 5=weight; 10=season; 12=Event; 15=region ) as 'X' and the dependent variable (14=medal won) as 'Y'**","d36484e1":"**2.2 Calculating the score of our model prediction**","6867044f":"**1.7 Encoding categorical data in X**","c15f57f3":"**1.9 Performing feature scaling in training data and fitting the same in test data**","3a471143":"**1.7 Encoding categorical data in Y**"}}