{"cell_type":{"2ea22f59":"code","69c61eba":"code","03273099":"code","23ce6d9f":"code","f4728c64":"code","8f2c74b5":"code","b5126cb5":"code","19297f5f":"code","a8498b4b":"code","1020573e":"code","b34cc82c":"code","fbc2570b":"markdown","db399a7a":"markdown","f1219b3e":"markdown","2aa1c0d7":"markdown"},"source":{"2ea22f59":"import functools\nimport glob\nimport random\n\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport tqdm.notebook as tqdm\n\nfrom skimage.feature import hog\nfrom skimage import exposure\n\n%matplotlib inline","69c61eba":"random.seed(0)\nvehicle = sorted(glob.glob('..\/input\/vehicle-images-gti\/VehicleImage\/vehicles\/*\/*.png'))\nnonvehicle = sorted(glob.glob('..\/input\/vehicle-images-gti\/VehicleImage\/non-vehicles\/*\/*.png'))\n\nrandom.shuffle(vehicle)\nrandom.shuffle(nonvehicle)","03273099":"# random.seed(0)\n_, (axs1, axs2) = plt.subplots(2, 10, figsize=(20, 4))\nfor ax in axs1:\n    img = cv2.imread(random.choice(vehicle))[:, :, ::-1]\n    ax.imshow(img)\nfor ax in axs2:\n    img = cv2.imread(random.choice(nonvehicle))[:, :, ::-1]\n    ax.imshow(img)\n\nplt.show()\nplt.close()","23ce6d9f":"random.seed(0)\n_, (axs1, axs2) = plt.subplots(2, 10, figsize=(20, 4))\nfor ax1, ax2 in zip(axs1, axs2):\n    img = cv2.imread(random.choice(vehicle))[:, :, ::-1]\n    ax1.imshow(img)\n    \n    # img = cv2.cvtColor(img, cv2.COLOR_RGB2YCrCb)\n    _, img = hog(img, orientations=8, pixels_per_cell=(8, 8),\n                 cells_per_block=(1, 1), visualize=True, multichannel=True)\n    # Rescale histogram for better display\n    img = exposure.rescale_intensity(img, in_range=(0, 10))\n    ax2.imshow(img, cmap='gray')\n\nplt.show()\n\nrandom.seed(0)\n_, (axs1, axs2) = plt.subplots(2, 10, figsize=(20, 4))\nfor ax1, ax2 in zip(axs1, axs2):\n    img = cv2.imread(random.choice(nonvehicle))[:, :, ::-1]\n    ax1.imshow(img)\n    \n    # img = cv2.cvtColor(img, cv2.COLOR_RGB2YCrCb)\n    _, img = hog(img, orientations=8, pixels_per_cell=(8, 8),\n                 cells_per_block=(1, 1), visualize=True, multichannel=True)\n    # Rescale histogram for better display\n    img = exposure.rescale_intensity(img, in_range=(0, 10))\n    ax2.imshow(img, cmap='gray')\n\nplt.show()\nplt.close()\n\nplt.close()","f4728c64":"COLOR_CONVERSION = None\nORIENTATIONS = 9\nCELLS_PER_BLOCK = (3, 3)\nPIXELS_PER_CELL = (8, 8)\n\n\ndef hog_features(img):\n    \"\"\"img = rgb_img\"\"\"\n    if isinstance(img, str):\n        img = cv2.cvtColor(cv2.imread(img), cv2.COLOR_BGR2RGB)\n    if COLOR_CONVERSION is not None:\n        img = cv2.cvtColor(img, COLOR_CONVERSION)\n    \n    vec = hog(\n        img,\n        orientations=ORIENTATIONS,\n        pixels_per_cell=PIXELS_PER_CELL,\n        cells_per_block=CELLS_PER_BLOCK,\n        multichannel=True\n    )\n    return vec\n\n\n# Define vehicle as 'positive' class and nonvehicle as 'negative' class\nx_vehicle = np.array([hog_features(img) for img in tqdm.tqdm(vehicle)])\ny_vehicle = np.array([1 for _ in x_vehicle])\n\nx_novehicle = np.array([hog_features(img) for img in tqdm.tqdm(nonvehicle)])\ny_novehicle = np.array([-1 for _ in x_novehicle])","8f2c74b5":"_, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nax1.set_title('Vehicle')\nax2.set_title('Non-Vehicle')\nax1.plot(x_vehicle.mean(axis=0))\nax2.plot(x_novehicle.mean(axis=0))\nplt.show()\nplt.close()","b5126cb5":"from sklearn.feature_selection import SelectKBest\n\nK = 50\n_x = np.concatenate([x_vehicle, x_novehicle])\n_y = np.concatenate([y_vehicle, y_novehicle])\n\nselect = SelectKBest(k=K).fit(_x, _y)\n\nx_vehicle = select.transform(x_vehicle)\nx_novehicle = select.transform(x_novehicle)\n\n_, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nax1.set_title('Vehicle, after k best')\nax2.set_title('Non-Vehicle, after k best')\nax1.plot(x_vehicle.mean(axis=0))\nax2.plot(x_novehicle.mean(axis=0))\nplt.show()\nplt.close()","19297f5f":"# Using vehicle as inlier class\n\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.model_selection import train_test_split\n\nx_in, x_out = x_vehicle, x_novehicle\n\nx_in_train, x_in_test = train_test_split(x_in, test_size=0.2, random_state=0)\n\nocsvm = OneClassSVM(\n    kernel='rbf',\n    gamma='scale',\n    nu=0.001,\n).fit(x_in_train)\n\ny = ocsvm.predict(x_in_train)\ncls, cnts = np.unique(y, return_counts=True)\nprint('Inlier train', cls, cnts \/ cnts.sum())\n\ny = ocsvm.predict(x_in_test)\ncls, cnts = np.unique(y, return_counts=True)\nprint('Inlier test', cls, cnts \/ cnts.sum())\n\ny = ocsvm.predict(x_out)\ncls, cnts = np.unique(y, return_counts=True)\nprint('Outlier class', cls, cnts \/ cnts.sum())","a8498b4b":"# Using no vehicle as inlier class\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.model_selection import train_test_split\n\nx_in, x_out = x_novehicle, x_vehicle\n\nx_in_train, x_in_test = train_test_split(x_in, test_size=0.2, random_state=0)\n\nocsvm = OneClassSVM(\n    kernel='rbf',\n    gamma='scale',\n    tol=0.001,\n    nu=0.001,\n).fit(x_in_train)\n\ny = ocsvm.predict(x_in_train)\ncls, cnts = np.unique(y, return_counts=True)\nprint('Inlier train', cls, cnts \/ cnts.sum())\n\ny = ocsvm.predict(x_in_test)\ncls, cnts = np.unique(y, return_counts=True)\nprint('Inlier test', cls, cnts \/ cnts.sum())\n\ny = ocsvm.predict(x_out)\ncls, cnts = np.unique(y, return_counts=True)\nprint('Outlier class', cls, cnts \/ cnts.sum())","1020573e":"from sklearn.linear_model import LogisticRegressionCV as LRCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report as cr, confusion_matrix as cm\n\n\ndef train_ocsvm_proba(ocsvm, x_in, x_out, cv=5, platt_split=0.2):\n    # Actual features + labels\n    x = np.concatenate([x_in, x_out])\n    y = np.concatenate([[1 for _ in x_in], [-1 for _ in x_out]])\n    \n    x_platt = ocsvm.decision_function(x)\n    # y_platt = ocsvm.predict(x)\n    y_platt = y\n    \n    x_platt, _, y_platt, _ = train_test_split(x_platt, y_platt, train_size=platt_split, random_state=42, shuffle=True)\n    \n    lr = LRCV(cv=cv, random_state=42).fit(x_platt.reshape(-1, 1), y_platt)\n    return lr\n    \n\nlr = train_ocsvm_proba(ocsvm, x_in, x_out)\nprint(\"Platt classes: \", lr.classes_)\n_x = np.concatenate([x_in, x_out])\n_y = np.concatenate([[1 for _ in x_in], [-1 for _ in x_out]])\n\ny_prob = lr.predict_proba(ocsvm.decision_function(_x).reshape(-1, 1))\nassert (y_prob.sum(axis=1) == 1).all()\n\nt = 0.5\ny = np.where(y_prob[:, 1] > t, 1, -1)\n\nprint(cm(y_true=_y, y_pred=y))\nprint(cr(y_true=_y, y_pred=y))","b34cc82c":"# Platt scale using statsmodels\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report as cr, confusion_matrix as cm\n\n\ndef train_ocsvm_proba(ocsvm, x_in, x_out, platt_split=0.2):\n    \"\"\"https:\/\/en.wikipedia.org\/wiki\/Platt_scaling#Description\"\"\"\n    # Actual features + labels\n    x = np.concatenate([x_in, x_out])\n    \n    t_plus = (len(x_in) + 1) \/ (len(x_in) + 2)\n    t_minus = 1 \/ (len(x_out) + 2)\n    y = np.concatenate([[t_plus for _ in x_in], [t_minus for _ in x_out]])\n    \n    x_platt = ocsvm.decision_function(x)\n    y_platt = y\n    \n    x_platt, _, y_platt, _ = train_test_split(\n        x_platt, y_platt, train_size=platt_split, random_state=42, shuffle=True, stratify=y_platt)\n    \n    glm = sm.GLM(y_platt, x_platt, family=sm.families.Binomial()).fit()\n    glm.predict(x_platt)\n    \n    return glm\n\nglm = train_ocsvm_proba(ocsvm, x_in, x_out)\n_x = np.concatenate([x_in, x_out])\n_y = np.concatenate([[1 for _ in x_in], [-1 for _ in x_out]])\n\ny_prob = glm.predict(ocsvm.decision_function(_x))\nassert (y_prob <= 1).all()\nassert (y_prob >= 0).all()\n\nt = 0.65\ny = np.where(y_prob > t, 1, -1)\n\nprint(cm(y_true=_y, y_pred=y))\nprint(cr(y_true=_y, y_pred=y))","fbc2570b":"## Applying platt scaling","db399a7a":"# HOG + OC-SVM\n\nNote, I do not actually recommend this approach for this task, the purpose of this notebook is to prototype an approach for anomaly detection for another work. This notebook is just some proof of concept on a clean dataset.\n\nhttps:\/\/github.com\/udacity\/CarND-Vehicle-Detection\nhttps:\/\/github.com\/charleswongzx\/Vehicle-Detection","f1219b3e":"## Computing + visualising HOG features","2aa1c0d7":"# OCSVM\n\nReturns -1 for outliers and 1 for inliers."}}