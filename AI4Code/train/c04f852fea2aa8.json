{"cell_type":{"7705de5d":"code","5c2e280c":"code","77bcc947":"code","36df2133":"code","e4f10595":"code","b1cc3a85":"code","60ee4c69":"code","98129377":"code","220e67d3":"code","d93e6e88":"code","83883d8d":"code","f63b2d0f":"code","6f8d855f":"code","bf413dd4":"code","c91532bb":"code","80747208":"code","f1b487a1":"code","793fc1a0":"code","5949089f":"code","c509e4a0":"code","c0f52147":"code","a9ca08eb":"code","1d532ee3":"code","eb3c242a":"code","62f6e69b":"code","4c2d1fab":"code","3f44420f":"markdown","d4f3de34":"markdown"},"source":{"7705de5d":"# import the libraries as shown below\n\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten,Conv2D\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import *\nimport numpy as np\nfrom glob import glob\nimport matplotlib.pyplot as plt","5c2e280c":"# re-size all the images to this\nIMAGE_SIZE = [224, 224]\n\ntrain_path = '..\/input\/malaria-detection-dataset\/Dataset\/Train\/'\nvalid_path = '..\/input\/malaria-detection-dataset\/Dataset\/Test\/'\n","77bcc947":"# Import the Vgg 16 library as shown below and add preprocessing layer to the front of VGG\n# Here we will be using imagenet weights\n\nmobilnet = VGG19(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)\n\n\n","36df2133":"# don't train existing weights\nfor layer in mobilnet.layers:\n    layer.trainable = False","e4f10595":"# useful for getting number of output classes\nimport os\nfolders = os.listdir(train_path)","b1cc3a85":"folders","60ee4c69":"# our layers - you can add more if you want\nx = Flatten()(mobilnet.output)","98129377":"prediction = Dense(len(folders), activation='softmax')(x)\n\n# create a model object\nmodel = Model(inputs=mobilnet.input, outputs=prediction)","220e67d3":"\n# view the structure of the model\nmodel.summary()\n","d93e6e88":"# tell the model what cost and optimization method to use\nmodel.compile(\n  loss='categorical_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)\n","83883d8d":"# Use the Image Data Generator to import the images from the dataset\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","f63b2d0f":"# Make sure you provide the same target size as initialied for the image size\ntraining_set = train_datagen.flow_from_directory(train_path,\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')","6f8d855f":"training_set","bf413dd4":"test_set = test_datagen.flow_from_directory(valid_path,\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')","c91532bb":"mc = ModelCheckpoint('best_model.h5', monitor='val_loss', mode='min', verbose=1)\n# es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=10)","80747208":"# fit the model\n# Run the cell. It will take some time to execute\nr = model.fit_generator(\n  training_set,\n  validation_data=test_set,\n  epochs=50,\n  steps_per_epoch=len(training_set),\n  validation_steps=len(test_set),\n  callbacks=[mc]\n)","f1b487a1":"# plot the loss\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","793fc1a0":"from keras.models import load_model\nsaved_model = load_model('best_model.h5')","5949089f":"saved_model.evaluate(test_set)","c509e4a0":"def create():\n    from tensorflow.keras.layers import MaxPooling2D\n    ### Create Model from scratch using CNN\n    model=Sequential()\n    model.add(Conv2D(filters=16,kernel_size=2,padding=\"same\",activation=\"relu\",input_shape=(224,224,3)))\n    model.add(MaxPooling2D(pool_size=2))\n    model.add(Conv2D(filters=32,kernel_size=2,padding=\"same\",activation =\"relu\"))\n    model.add(MaxPooling2D(pool_size=2))\n    model.add(Conv2D(filters=64,kernel_size=2,padding=\"same\",activation=\"relu\"))\n    model.add(MaxPooling2D(pool_size=2))\n    model.add(Flatten())\n    model.add(Dense(500,activation=\"relu\"))\n    model.add(Dense(2,activation=\"softmax\"))\n    \n    # tell the model what cost and optimization method to use\n    model.compile(\n      loss='categorical_crossentropy',\n      optimizer='adam',\n      metrics=['accuracy']\n    )\n\n    return model","c0f52147":"scratch = create()\nscratch.summary()","a9ca08eb":"mc = ModelCheckpoint('scratch_model.h5', monitor='val_loss', mode='min', verbose=1)\n# es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=10)","1d532ee3":"# fit the model\n# Run the cell. It will take some time to execute\nr = scratch.fit_generator(\n  training_set,\n  validation_data=test_set,\n  epochs=50,\n  steps_per_epoch=len(training_set),\n  validation_steps=len(test_set),\n  callbacks=[mc]\n)","eb3c242a":"# plot the loss\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","62f6e69b":"from keras.models import load_model\nsaved_model = load_model('scratch_model.h5')","4c2d1fab":"saved_model.evaluate(test_set)","3f44420f":"## Creating CNN Using Scratch And Transfer Learning","d4f3de34":"Please download the dataset from the below url"}}