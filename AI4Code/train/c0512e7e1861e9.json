{"cell_type":{"23fddcce":"code","c8c528c1":"code","9565e861":"code","a01ee807":"code","0d7318c9":"code","876b55a0":"code","e7915a76":"markdown","d181ecd3":"markdown","95937915":"markdown","64e910df":"markdown","689d3214":"markdown"},"source":{"23fddcce":"import re","c8c528c1":"files = ['employees.xml', 'calculator.jar', 'nfsmw.exe', 'bkgrnd001.jpg', 'sales_report.ppt']\n\nresult = []\n\n# write your code here\npattern = '\\w*.xml|\\w*.exe|\\w*.jar|'\n\nfor item in files:\n    if re.search(pattern, item):\n        result.append(item)\n# print result - result should only contain the items that match the pattern. In this case, result should be ['employees.xml', 'calculator.jar', 'nfsmw.exe']\nprint(result)","9565e861":"addresses = ['466, 5th block, Koramangala, Bangalore', '4th BLOCK, KORAMANGALA - 560034', '999, St. Marks Road, Bangalore']\n\nresult = []\n\n# write your code here\npattern = 'Koramangala'\n\nfor item in addresses:\n    if re.search(pattern , item , re.I):\n        result.append(item)\n\n# print result - result should only contain the items that match the pattern\nprint(result)","a01ee807":"numbers = ['2', '2.3', '4.56', '.61', '4.567', '75.8792', 'abc']\n\nresult = []\n\n# write your code here\npattern = '^\\d*$|^\\d*.\\d{1,2}$'\n\nfor item in numbers:\n    if re.search(pattern , item):\n        result.append(item)\n\n# print result - result should only contain the items that match the pattern\nprint(result)","0d7318c9":"phones = ['apple_iphone_6', 'samsung_note_4', 'google_pixel_2', 'apple_6', 'iphone_6', 'google_pixel_']\n\nresult = []\n\n# write your code here\n\n\n# print result - result should only contain the items that match the pattern\nprint(result)","876b55a0":"emails = ['random.guy123@gmail.com', 'mr_x_in_bombay@gov.in', '1@ued.org',\n          '@gmail.com','abc!@yahoo.in', 'sam_12@gov.us', 'neeraj@']\n\nresult = []\n\n# write your code here\n\n\n# print result - result should only contain the items that match the pattern\nprint(result)","e7915a76":"### Q4. \nWrite a regular expression to match the model names of smartphones which follow the following pattern: \n\nmobile company name followed by underscore followed by model name followed by underscore followed by model number\n\nStrings that should match:\n* apple_iphone_6\n* samsung_note_4\n* google_pixel_2\n\nStrings that shouldn\u2019t match:\n* apple_6\n* iphone_6\n* google\\_pixel\\_\n","d181ecd3":"### Q1. \nWrite a regular expression to match all the files that have either .exe, .xml or .jar extensions. A valid file name can contain any alphabet, digit and underscore followed by the extension.","95937915":"### Q2. \nWrite a regular expression to match all the addresses that have Koramangala embedded in them.\n\nStrings that should match:\n* 466, 5th block, Koramangala, Bangalore\n* 4th BLOCK, KORAMANGALA - 560034\n\nStrings that shouldn't match:\n* 999, St. Marks Road, Bangalore\n","64e910df":"### Q5.\nWrite a regular expression that can be used to match the emails present in a database. \n\nThe pattern of a valid email address is defined as follows:\nThe '@' character can be preceded either by alphanumeric characters, period characters or underscore characters. The length of the part that precedes the '@' character should be between 4 to 20 characters.\n\nThe '@' character should be followed by a domain name (e.g. gmail.com). The domain name has three parts - a prefix (e.g. 'gmail'), the period character and a suffix (e.g. 'com'). The prefix can have a length between 3 to 15 characters followed by a period character followed by either of these suffixes - 'com', 'in' or 'org'.\n\n\nEmails that should match:\n* random.guy123@gmail.com\n* mr_x_in_bombay@gov.in\n\nEmails that shouldn\u2019t match:\n* 1@ued.org\n* @gmail.com\n* abc!@yahoo.in\n* sam_12@gov.us\n* neeraj@","689d3214":"### Q3. \nWrite a regular expression that matches either integer numbers or floats upto 2 decimal places.\n\nStrings that should match: \n* 2\n* 2.3\n* 4.56\n* .61\n\nStrings that shoudln't match:\n* 4.567\n* 75.8792\n* abc\n"}}