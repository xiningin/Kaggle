{"cell_type":{"e6c824d0":"code","f68c99b5":"code","b72dce7c":"code","ca85204d":"code","7c5b42f3":"code","166c9e75":"code","b81ecb2b":"code","49d196e2":"code","d0fda6ee":"code","d34a3f1f":"code","2f3a7a2a":"code","d3f524a9":"code","c13bcb86":"code","d7a85e14":"code","dd4fef5c":"code","c611a72a":"code","5688bb8d":"code","fa790890":"code","3c99101e":"code","e04868c0":"code","53a047d7":"code","496ee6aa":"code","ca6bca0b":"code","6ebf4aee":"code","bdb1cbf0":"code","f875370f":"code","7d1030f3":"code","f6a38493":"code","efa20f52":"code","6641da43":"code","b788fa36":"code","30f32ee3":"code","df28d719":"code","f1c4a8b1":"code","4e3994c8":"code","6421ea9c":"code","48ae4823":"code","d8387cc4":"code","d0380703":"code","cdc57875":"code","48e906f3":"code","48ea6b77":"code","c9b287f3":"code","9e255515":"code","1a63f566":"code","4849f405":"code","5b90c9a5":"code","e58d9f36":"code","3075a439":"code","81547fe3":"code","4db687d6":"code","0f493271":"code","fc60a6fc":"code","2ad1199c":"code","745eda6d":"code","27918cac":"code","22076a4a":"code","5608b4fc":"code","f750f569":"code","9b02361f":"markdown","53fd20b4":"markdown","92815866":"markdown","fe30265b":"markdown","c96fadea":"markdown","7806503d":"markdown","6d7d8ac0":"markdown","95c23689":"markdown","598c62b9":"markdown","73c2a6ef":"markdown","09c48eb9":"markdown","6515c3ef":"markdown","85562a81":"markdown","f7740e9f":"markdown","5c1038f3":"markdown","efdd5988":"markdown","c66fd359":"markdown","506ca2c1":"markdown","11fcb6bc":"markdown","ab5624ee":"markdown"},"source":{"e6c824d0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","f68c99b5":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv',index_col=False)\nrating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')","b72dce7c":"movie.head()","ca85204d":"rating.head()","7c5b42f3":"movie.shape, rating.shape","166c9e75":"rating.describe(include='all').T","b81ecb2b":"movie.describe(include='all').T","49d196e2":"data = pd.merge(movie, rating, on='movieId')\ndata.head()","d0fda6ee":"data.shape","d34a3f1f":"data.nunique()","2f3a7a2a":"data.head()","d3f524a9":"avg_rating = data.groupby('title')['rating'].mean()\navg_rating","c13bcb86":"avg_rating.sort_values(ascending=False)","d7a85e14":"total_rating = data.groupby('title')['rating'].count()\ntotal_rating","dd4fef5c":"df = pd.DataFrame()\ndf['Average_rating'] = avg_rating\ndf['Total_Rating'] = total_rating","c611a72a":"df.tail()","5688bb8d":"df.shape","fa790890":"avg_rating.hist(bins=25, grid=False, edgecolor='b', label ='All genres', figsize=(20,8))\nplt.legend(loc=(1.05,0), ncol=2)\nplt.xlim(0,5)\nplt.xlabel('Movie rating')\nplt.title('Movie rating histograms')\nplt.show()","3c99101e":"user_rating = rating[['userId','rating']].groupby('userId').mean()\n\n# Plot histogram\nuser_rating.plot(kind='hist', bins=50, grid=0, edgecolor='black', figsize=(20,8))\n\nplt.xlim(0,5)\nplt.legend()\nplt.xlabel ('Average movie rating')\nplt.ylabel ('Normalized frequency')\nplt.title ('Average ratings per user')\nplt.show()","e04868c0":"# Histogram of ratings counts.\n\nuser_rating = rating[['userId', 'movieId']].groupby('userId').count()\nuser_rating.columns=['num_ratings']\n\nplt.figure(figsize=(25,8))\nplt.hist(user_rating.num_ratings, bins=100, edgecolor='black', log=True)\nplt.title('Ratings per user')\nplt.xlabel('Number of ratings given')\nplt.ylabel('Number of userIds')\nplt.xlim(0,)\nplt.xticks(np.arange(0,10000,500))\nplt.show()","53a047d7":"plt.figure(figsize=(25,15))\nsns.jointplot(df.Average_rating, df.Total_Rating,)\nplt.xlabel('Average Rating')\nplt.ylabel('Total Rating')\nplt.xlim(0,)\nplt.show()","496ee6aa":"data.shape","ca6bca0b":"new_data = data.iloc[0:15000000]\nnew_data.shape","6ebf4aee":"#sorting values according to num of rating column\n\nmovie_title = new_data.pivot_table(index='userId', columns = 'title', values='rating')","bdb1cbf0":"movie_title.head()","f875370f":"movie_title.shape","7d1030f3":"def movie_recommendation():\n    #Taking Movie as a Input on whose basic User want recommendation\n    movie = input(\"Please Enter Movie Name : \")\n    \n    #How many Recommendation should be shown to user\n    n = int(input(\"How many recommendation you need : \"))\n\n    #getting its rating from our data\n    user_rating = movie_title[movie]\n  \n    #Finding Movies with similar rating\n    similar_movie = movie_title.corrwith(user_rating)\n    \n    similar_movie = pd.DataFrame(similar_movie, columns =['Correlation']) \n    \n    similar_movie = similar_movie.join(df['Total_Rating'])\n\n    #Sorting related \n    rec_ = similar_movie.sort_values(by = ['Correlation', 'Total_Rating'], ascending=False)\n\n    rec = pd.DataFrame(rec_)\n    rec.drop_duplicates()\n    print()\n    print()\n    print(\"Following are the {} Recommended Movies\".format(n))\n\n    return rec.head(n)","f6a38493":"movie_recommendation()","efa20f52":"genre_labels = set()\nfor s in movie['genres'].str.split('|').values:\n    genre_labels = genre_labels.union(set(s))\n    \ngenre_labels = list(genre_labels)\ngenre_labels","6641da43":"from wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)","b788fa36":"def count_word(df, ref_col, liste):\n    keyword_count = dict()\n    \n    for s in liste: \n        keyword_count[s] = 0\n    \n    for liste_keywords in df[ref_col].str.split('|'):\n        if type(liste_keywords) == float and pd.isnull(liste_keywords): \n            continue\n        \n        for s in liste_keywords: \n            if pd.notnull(s): \n                keyword_count[s] += 1\n    \n    # convert the dictionary in a list to sort the keywords  by frequency\n    keyword_occurences = []\n    \n    for k,v in keyword_count.items():\n        keyword_occurences.append([k,v])\n    keyword_occurences.sort(key = lambda x:x[1], reverse = True)\n    \n    return keyword_occurences, keyword_count","30f32ee3":"keyword_occurences, dum = count_word(movie, 'genres', genre_labels)\nkeyword_occurences","df28d719":"keyword_occurences[0:50]","f1c4a8b1":"words = dict()\nfor s in keyword_occurences:\n    words[s[0]] = s[1]","4e3994c8":"# instantiate a word cloud object\nword_cloud = WordCloud(\n    background_color='white',\n    max_words=2000,\n    stopwords=stopwords\n)\n\n# generate the word cloud\nword_cloud.generate_from_frequencies(words)\nplt.figure(figsize=(20,15))\nplt.imshow(word_cloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","6421ea9c":"fig = plt.figure(1, figsize=(18,13))\nax2 = fig.add_subplot(2,1,2)\ny_axis = [i[1] for i in keyword_occurences]\nx_axis = [k for k,i in enumerate(keyword_occurences)]\nx_label = [i[0] for i in keyword_occurences]\nplt.xticks(rotation=85, fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xticks(x_axis, x_label)\nplt.ylabel(\"No. of occurences\", fontsize = 24, labelpad = 0)\nax2.bar(x_axis, y_axis, align = 'center', color='r')\nplt.title(\"Popularity of Genres\",color='g')\nplt.show()","48ae4823":"for i in genre_labels:\n    movie[i] = movie.apply(lambda _:int(i in _.genres), axis = 1)","d8387cc4":"movie.head()","d0380703":"movie.info()","cdc57875":"movie['movieId'] = movie['movieId'].astype(object)","48e906f3":"avg_movieid_rating = pd.DataFrame(rating.groupby('movieId')['rating'].agg(['mean','count']))\navg_movieid_rating.head()","48ea6b77":"movies = pd.merge(avg_movieid_rating,movie,on='movieId')\nmovies.head()","c9b287f3":"tags = pd.read_csv(\"..\/input\/movielens-20m-dataset\/tag.csv\")\ntags.head()","9e255515":"tags.shape","1a63f566":"tags.nunique()","4849f405":"tags.drop(['timestamp'], axis=1, inplace=True)","5b90c9a5":"tag_labels = [i for i in tags.tag.unique()]\ntag_labels","e58d9f36":"tag_keyword_occurences, tag_dum = count_word(tags, 'tag', tag_labels)\ntag_keyword_occurences","3075a439":"tag_words = dict()\ntag_trunc_occurences = tag_keyword_occurences[0:50]\nfor s in tag_trunc_occurences:\n    tag_words[s[0]] = s[1]","81547fe3":"# instantiate a word cloud object\nword_cloud = WordCloud(\n    background_color='white',\n    max_words=2000,\n    stopwords=stopwords\n)\n\n# generate the word cloud\nword_cloud.generate_from_frequencies(tag_words)\nplt.figure(figsize=(20,15))\nplt.imshow(word_cloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","4db687d6":"fig = plt.figure(1, figsize=(25,22))\nax2 = fig.add_subplot(2,1,2)\ntag_trunc_occurences = tag_keyword_occurences[0:20]\n\ny_axis = [i[1] for i in tag_trunc_occurences]\nx_axis = [k for k,i in enumerate(tag_trunc_occurences)]\nx_label = [i[0] for i in tag_trunc_occurences]\nplt.xticks(rotation=90, fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xticks(x_axis, x_label)\nplt.ylabel(\"No. of occurences\", fontsize = 24, labelpad = 0)\nax2.bar(x_axis, y_axis, align = 'center', color='m')\nplt.title(\"Popularity of Tags\",color='g')\nplt.show()","0f493271":"movies = pd.merge(movies,tags,on='movieId')\nmovies.head()","fc60a6fc":"movies.shape","2ad1199c":"def movie_by_genre():\n    genre = input(\"Please enter genre : \")\n    n = int(input(\"Please enter Number of Recommendation you want : \"))\n    \n    df = pd.DataFrame(movies.loc[(movies[genre]==1)].sort_values(['mean'], ascending=False)[['title', 'genres', 'count','mean']])\n    df = df.drop_duplicates()\n    \n    return df[:n]","745eda6d":"movie_by_genre()","27918cac":"def movie_by_tag():\n    tag = input(\"Please enter tag : \")\n    n = int(input(\"Please enter Number of Recommendation you want : \"))\n    \n    df = pd.DataFrame(movies.loc[(movies['tag']==tag)].sort_values(['mean'], ascending=False)[['tag', 'title','count','mean']])\n    df = df.drop_duplicates()\n    \n    return df[:n]","22076a4a":"movie_by_tag()","5608b4fc":"def movie_by_tag_genre():\n    genre = input(\"Please enter Genre : \")\n    tag = input(\"Please enter tag : \")\n    n = int(input(\"Please enter Number of Recommendation you want : \"))\n    \n    df = pd.DataFrame(movies.loc[(movies['tag']==tag) & (movies[genre]==1)].sort_values(['mean'], ascending=False)[['tag', 'title', 'genres', 'count','mean']])\n    df = df.drop_duplicates()\n    \n    return df[:n]","f750f569":"movie_by_tag_genre()","9b02361f":"# Merging our Dataset","53fd20b4":"# Let's take a look at our data","92815866":"# Now creating a DataFrame of both Average rating and Total Rating of Movies","fe30265b":"# Now we can recommend movie according to Genre based on average mean ","c96fadea":"User can enter a movie name and number of recommendtion he want.\n\nThis system will recommend user the similar Movies on the basis of input.\n\nJust try and Play with it.","7806503d":"## Visualizing Tags","6d7d8ac0":"# Calculating Total Ratings given by users","95c23689":"# Now lets calulate Average Rating","598c62b9":"Importing our data","73c2a6ef":"as the data is too big we will only work with some of it but it can be applied to whole dataset as well.","09c48eb9":"# Now lets move on to recommend or search movie according to Average Mean based on Tag and Genre","6515c3ef":"# Now's Lets do some Visualization","85562a81":"How recommendation system work?\n\nSimple solution is recommending product based on ratings from previous users. \n\nLet's say a customer like Movie A so we can recommend him Movie's with Similiar rating.","f7740e9f":"# Recommending Similar Movies","5c1038f3":"# Now we can recommend movie according to Tag based on average mean","efdd5988":"This graph is showing that Movies with higher rating actually have more number of ratings compared to movies with low average rating","c66fd359":"# Here we can recommend movie according to Genre and Tags based on average mean","506ca2c1":"## Visualizing Genres","11fcb6bc":"# Movie Recommendation System based on Movie","ab5624ee":"# Importing libraries"}}