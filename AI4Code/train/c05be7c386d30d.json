{"cell_type":{"d2b19846":"code","59ec1a2d":"code","126b9f10":"code","39cc28a9":"code","ca3b388d":"code","7ccffec4":"code","e7a1e7b7":"code","cfa0a374":"code","c846d394":"code","508281a1":"code","d18792ec":"code","8130ac2b":"code","e26d4c0c":"code","b027a5f4":"code","795b3546":"code","40fe0fa0":"code","ade29824":"code","6373896e":"code","4c406ad4":"code","e6263e1d":"markdown","14f44db4":"markdown","0ad170b8":"markdown","03b2815c":"markdown","5b8cebd9":"markdown"},"source":{"d2b19846":"#Machine Learning Lab 2 - Naive Bayes Classifier","59ec1a2d":"#Import libraries\nimport numpy as np \nimport pandas as pd \nimport nltk\nfrom nltk.corpus import stopwords\nimport string","126b9f10":"#Loading the Data\ndf = pd.read_csv('..\/input\/spam-ham-dataset\/spam_ham_dataset.csv')\ndf.head(5)","39cc28a9":"#Print the shape (Get the number of rows and cols)\ndf.shape","ca3b388d":"#Get the column names\ndf.columns","7ccffec4":"#Checking for duplicates and removing them\ndf.drop_duplicates(inplace = True)","e7a1e7b7":"#Show the new shape (number of rows & columns)\ndf.shape","cfa0a374":"#Show the number of missing (NAN, NaN, na) data for each column\ndf.isnull().sum()","c846d394":"#Need to download stopwords\nnltk.download('stopwords')","508281a1":"def process_text(text):\n    \n    #1 Remove Punctuation\n    nopunc = [char for char in text if char not in string.punctuation]\n    nopunc = ''.join(nopunc)\n    \n    #2 Remove Stop Words\n    clean_words = [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]\n    \n    #3 Return a list of clean words\n    return clean_words","d18792ec":"#Show the Tokenization (a list of tokens )\ndf['text'].head().apply(process_text)","8130ac2b":"from sklearn.feature_extraction.text import CountVectorizer\nmessages_bow = CountVectorizer(analyzer=process_text).fit_transform(df['text'])","e26d4c0c":"#Split data into 80% training & 20% testing data sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(messages_bow, df['label'], test_size = 0.20, random_state = 0)","b027a5f4":"#Get the shape of messages_bow\nmessages_bow.shape","795b3546":"from sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)","40fe0fa0":"#Print the predictions\nprint(classifier.predict(X_train))\n#Print the actual values\nprint(y_train.values)","ade29824":"#Evaluate the model on the training data set\nfrom sklearn.metrics import classification_report,confusion_matrix, accuracy_score\npred = classifier.predict(X_train)\nprint(classification_report(y_train ,pred ))\nprint('Confusion Matrix: \\n',confusion_matrix(y_train,pred))\nprint()\nprint('Accuracy: ', accuracy_score(y_train,pred))","6373896e":"#Print the predictions\nprint('Predicted value: ',classifier.predict(X_test))\n#Print Actual Label\nprint('Actual value: ',y_test.values)","4c406ad4":"#Evaluate the model on the test data set\nfrom sklearn.metrics import classification_report,confusion_matrix, accuracy_score\npred = classifier.predict(X_test)\nprint(classification_report(y_test ,pred ))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test,pred))\nprint()\nprint('Accuracy: ', accuracy_score(y_test,pred))","e6263e1d":"**Starting Normalization of Data**","14f44db4":"**Loading Dataset**","0ad170b8":"**Printing Accuracy on Train Data**","03b2815c":"**Naive Bayes Classifier**","5b8cebd9":"**Printing Accuracy on Test Data**"}}