{"cell_type":{"0acb2135":"code","4f8881bd":"code","df89e805":"code","6bcc46c7":"code","fb3a72e7":"code","9ea7e982":"code","b04e706d":"code","3d615c5c":"code","dc32c70a":"code","42b20501":"code","697db2d9":"code","21ec11a7":"code","272ec0f3":"code","38928177":"code","8964ce5a":"code","9196c90a":"code","68ceb25a":"code","1f12c62f":"code","7845eaf2":"code","3c26f8f6":"code","e26629b0":"code","78b32e43":"code","3d0ec1dd":"code","4cd3b8f0":"code","36ed7db7":"code","e79e77e9":"code","adfbfa81":"code","4f90a936":"code","faa93d43":"code","d784f3a0":"code","7cdc0f29":"code","be516ac1":"code","16a6500a":"code","e15ff781":"code","08b70947":"code","67c3f169":"code","9e635786":"code","3b4d9b1c":"code","461eb56d":"code","580af0dd":"code","50a84748":"code","ea727afe":"code","7bb1b93e":"code","630f2e2d":"code","5d0f1295":"markdown","13820f1f":"markdown","a32f089c":"markdown","fed4b223":"markdown","d5b7d03a":"markdown","1a0116bd":"markdown","86dae879":"markdown","38276d58":"markdown","98104559":"markdown","91f23efe":"markdown","ec75e385":"markdown","ffa668fa":"markdown","8b5eec83":"markdown","36f9b5ec":"markdown","c58fabc0":"markdown"},"source":{"0acb2135":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f8881bd":"# import seaborn for vizualization \nimport seaborn as sns","df89e805":"# Load data \ndf = pd.read_csv('..\/input\/heart-failure-prediction\/heart.csv')","6bcc46c7":"# Dataset shape: \ndf.shape","fb3a72e7":"# Let's take a look at 10 first rows of our data \ndf.head(10)","9ea7e982":"# We will take a closer look at our dataset: \ndf.describe().style.background_gradient(cmap=\"Blues\", axis=1)","b04e706d":"# Since there are two major groups in the dataset - with and without heart disease, \n# let's check the descrition for those two different options: \ndf[df.HeartDisease == 1].describe().style.background_gradient(cmap=\"Blues\", axis=1)","3d615c5c":"# And the same for patients without disease: \ndf[df.HeartDisease == 0].describe().style.background_gradient(cmap=\"Blues\", axis=1)","dc32c70a":"# Plot histogram for numerical variables: \ndf.hist(figsize=(12,12))\nplt.show()","42b20501":" df.isnull().sum()","697db2d9":"# Make sure there is no duplicated values: \ndf.duplicated().sum()","21ec11a7":"sns.scatterplot(x=\"Age\", y=\"Cholesterol\",hue=\"HeartDisease\",data=df)\nplt.show()\n","272ec0f3":"sns.scatterplot(x=\"Age\", y=\"RestingBP\",hue=\"HeartDisease\",data=df)\nplt.show()\n","38928177":"df = df[df.Cholesterol != 0]\ndf = df[df.RestingBP != 0]\n\n","8964ce5a":"df[df.HeartDisease == 1].describe().style.background_gradient(cmap=\"Blues\", axis=1)","9196c90a":"df[df.HeartDisease == 0].describe().style.background_gradient(cmap=\"Blues\", axis=1)","68ceb25a":"sns.scatterplot(x=\"Age\", y=\"Cholesterol\",hue=\"HeartDisease\",data=df)\nplt.show()","1f12c62f":"# To make it a bit more user-friendly we can use seaborn and heatmap: \nplt.figure(dpi=100)\nsns.heatmap(np.round(df.corr(),3),annot=True)\nplt.show()","7845eaf2":"# And pairplot for each variable v heart disease:\nsns.pairplot(df, hue=\"HeartDisease\", palette=\"viridis\", corner=True);","3c26f8f6":"sns.countplot(x = df['Sex'], data = df)\nplt.show()","e26629b0":"sns.swarmplot(y=\"Age\", x=\"Sex\", hue=\"HeartDisease\", data=df, palette=\"husl\", s=4)\n\n","78b32e43":"sns.swarmplot(y=\"Age\", x=\"RestingECG\", hue=\"HeartDisease\", data=df, palette=\"husl\", s=4)\n","3d0ec1dd":"sns.swarmplot(y=\"Age\", x=\"ChestPainType\", hue=\"HeartDisease\", data=df, palette=\"husl\", s=4)\n","4cd3b8f0":"sns.swarmplot(y=\"Age\", x=\"ST_Slope\", hue=\"HeartDisease\", data=df, palette=\"husl\", s=4)\n","36ed7db7":"sns.swarmplot(y=\"Age\", x=\"ExerciseAngina\", hue=\"HeartDisease\", data=df, palette=\"husl\", s=4)\n","e79e77e9":"sns.swarmplot(y=\"MaxHR\", x=\"RestingECG\", hue=\"HeartDisease\", data=df, palette=\"husl\", s=3)\n","adfbfa81":"# Select categorical variables\ncateg = df.select_dtypes(include=object).columns\n\n","4f90a936":"\n# What variables are categorical: \ncateg","faa93d43":"# One hot encoding\ndf = pd.get_dummies(df, columns=categ, drop_first=True)  \ndf.head()","d784f3a0":"y, X = df['HeartDisease'], df.drop(columns='HeartDisease')\n\n# Split the data into training and test samples\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","7cdc0f29":"print(X_train.shape)\nprint(X_test.shape)","be516ac1":"print(y_train.shape)\nprint(y_test.shape)","16a6500a":"X_train","e15ff781":"# Import tensorflow: \nimport tensorflow as tf","08b70947":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, f1_score\n\nlr = LogisticRegression(solver='liblinear').fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint('Accuracy score: ', round(accuracy_score(y_test, y_pred), 4))\nprint('F1 Score: ', round(f1_score(y_test, y_pred), 4))","67c3f169":"from keras.models import Sequential, Model\nfrom keras.layers import Dense, Input, Dropout\nfrom keras.utils.vis_utils import plot_model","9e635786":"input_layer = Input(shape=(15,))\nhidden1 = Dense(40, activation='sigmoid',name='First_Hidden')(input_layer)\nhidden2 = Dense(20, activation='sigmoid',name='Second_Hidden')(input_layer)\noutput_1 = Dense(2, activation='softmax',name='Softmax_Output')(hidden2)\ndropout_layer = Dropout(0.25)(hidden1)\nhidden3 = Dense(20, activation='sigmoid',name='Third_Hidden')(dropout_layer)\nhidden4 = Dense(6, activation='sigmoid',name='Fourth_Hidden')(hidden3)\noutput_2 = Dense(2, activation='softmax',name='Softmax_Output_two')(hidden4)\nmodel_func = Model(inputs=input_layer, outputs=[output_1,output_2])\n\n","3b4d9b1c":"model_func.summary()","461eb56d":"plot_model(model_func,  show_shapes=True, show_layer_names=True)","580af0dd":"model_func.compile(loss='sparse_categorical_crossentropy', \n                   optimizer='adam', \n                   metrics=['acc'])","50a84748":"history = model_func.fit(X_train, y_train, epochs=500, \n               validation_data=(X_test,y_test))","ea727afe":"print(history.history.keys())","7bb1b93e":"acc = history.history['Softmax_Output_acc']\nval_acc = history.history['val_Softmax_Output_acc']\nloss = history.history['Softmax_Output_loss']\nval_loss = history.history['val_Softmax_Output_loss']\n\nepochs = range(len(acc))\nplt.figure(dpi = 150)\nplt.plot(epochs, acc, 'r', label='Training accuracy ')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy for Softmax_Output')\nplt.legend()\nplt.figure(dpi = 150)\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss for Softmax_Output')\nplt.legend()\n\nplt.show()","630f2e2d":"acc = history.history['Softmax_Output_two_acc']\nval_acc = history.history['val_Softmax_Output_two_acc']\nloss = history.history['Softmax_Output_two_loss']\nval_loss = history.history['val_Softmax_Output_two_loss']\n\nepochs = range(len(acc))\nplt.figure(dpi = 150)\nplt.plot(epochs, acc, 'r', label='Training accuracy ')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy for Softmax_Output_two')\nplt.legend()\nplt.figure(dpi = 150)\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss for Softmax_Output_two')\nplt.legend()\n\nplt.show()","5d0f1295":"We can clearly see that there is a lot of 0 values (what's more, majority of them are related with disease cases!), let's do the same for RestingBP","13820f1f":"And now check correlations:","a32f089c":"As we can see there is way more cases in general as well with heart disease in case of Males","fed4b223":"It looks better now, since there is no 0 in Cholesterol, we can once again check the scatter","d5b7d03a":"It's clear ASY is strongly correlated with heart disease","1a0116bd":"Since there is no missing nor duplicated values - we can check the Cholesterol and RestingBP: \n","86dae879":"We can in addition check how it look when we inclide the HeartDisease","38276d58":"At this point there are several observations we could notice: \n* The mean Age in case of Disease is higher which makes sense (the older we are, the more health problems we face) \n* There are 0 valus for RestingBP and Cholesterol, we should investigate it further if it's not a mistake nor a way to handle missing values,\n* There is really big std for Cholesterol (0 values could play a big role here), \n","98104559":"Let's check the categorical variables: \n","91f23efe":"Now we can taka a look at descriptions once again: ","ec75e385":"1. Logistic Regression with tf","ffa668fa":"We can observe: \n* There is raise in the RestingBP with age, and in addition it correlates with disease cases, \n* There is slight correlation between RestingBP and cholesterol,\n* MaxHR is falling with age,\n* The lower MaxHR the more likely disease appear, \n","8b5eec83":"Here we can observe only one such a case. Besides that we can clearly see how the RestingBP is raising with age (and disease cases too, unfortunately).\nWe will delete the 0s now and check the correlation between numeric values ","36f9b5ec":"1. Logistic Regression with scikit-learn","c58fabc0":"We can clearly see now that there is a lot of 0 values in Cholesterol and some of them in the RestingBP, we will deal with them later, let's check for nulls and missing values first "}}