{"cell_type":{"e6a73216":"code","f837ce8c":"code","deebc4d8":"code","3a080524":"code","8e360c7a":"code","6f36dd79":"code","9a5c812a":"code","e59912a4":"code","6d015f2a":"code","44974d01":"code","94a320e9":"code","2a10fbc4":"code","b3f78462":"code","93c5dadd":"code","754e1190":"code","f54562b6":"code","1d748601":"code","65c12d79":"code","51f616b0":"code","eefae41e":"code","59f5a918":"code","7ce8f4a2":"code","290615e3":"code","129a2239":"code","66dfe83e":"code","3eba4580":"code","31cfbf99":"code","12c5f43b":"code","93e6a284":"code","9f6229c0":"code","fc4669ec":"code","e9ea0659":"code","50ac0bae":"code","a4094b82":"code","ee32c50e":"code","f81fe4b3":"code","df984b1e":"code","61732673":"code","ffd1455c":"code","34dcf912":"code","04f8080a":"code","de8ab2a1":"code","7370aa6b":"code","6c932965":"code","a65d78ad":"code","0a52f6ac":"code","9151c2a2":"code","03717afe":"code","91473087":"code","bb61241d":"code","b915887c":"code","3e2e7be1":"markdown","6bb486b1":"markdown","966961d9":"markdown","97f901fe":"markdown","3482eaf4":"markdown","eb195a74":"markdown","c2c6d284":"markdown","c9cd4df8":"markdown","699c8d68":"markdown","249577c9":"markdown","66d82d28":"markdown","a13ca22e":"markdown","2bf45241":"markdown","ae4be7b0":"markdown","fb2f0fa2":"markdown"},"source":{"e6a73216":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f837ce8c":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf\nimport keras\nfrom keras.models import Sequential\nfrom keras.utils.np_utils import to_categorical\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom collections import Counter\nfrom sklearn.neighbors import KNeighborsClassifier","deebc4d8":"!ls ..\/input\/urbanchanllange","3a080524":"train_dataset = pd.read_csv('..\/input\/urbanchanllange\/train.csv') # \ud559\uc2b5 \ub370\uc774\ud130\uc14b\ntest_dataset = pd.read_csv('..\/input\/urbanchanllange\/test.csv') # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b","8e360c7a":"sns.countplot(train_dataset['CLASS'])","6f36dd79":"train_dataset['CLASS'].value_counts()","9a5c812a":"n_x_train = train_dataset.iloc[:, 1:11]","e59912a4":"n_x_train","6d015f2a":"n_y_train = train_dataset.iloc[:, 11]","44974d01":"def draw_plot(history): # \uacb0\uacfc \uc2dc\uac01\ud654\n  acc = history.history['accuracy']\n  val_acc = history.history['val_accuracy']\n  loss = history.history['loss']\n  val_loss = history.history['val_loss']\n\n  fig, ax = plt.subplots(2)\n  ax[0].plot(range(1, len(acc)+1), acc, 'b', label='accuracy')\n  ax[1].plot(range(1, len(acc)+1), val_acc, 'b', label='val_accuracy')\n  ax[1].plot(range(1, len(acc)+1), loss, 'r', label='val_loss')\n  ax[0].plot(range(1, len(acc)+1), val_loss, 'r', label='loss')\n  plt.show()","94a320e9":"def default_model_maker(config): # \ubaa8\ub378 \uc0dd\uc131\uc744 \uc704\ud55c \ud568\uc218\n  _model = Sequential()\n\n  for i, cfg in config.items():\n    unit = cfg.get('unit')\n    activation = cfg.get('activation')\n    input_shape = cfg.get('input_shape')\n    kernel_initializer = cfg.get('kernel_initializer', 'glorot_uniform')\n    dropout = cfg.get('dropout')\n    \n    if activation == 'mish':\n      activation = mish\n\n    if i == 1:\n      layer = keras.layers.Dense(unit, activation=activation, input_shape=input_shape ,kernel_initializer=kernel_initializer)\n    else:\n      if dropout:\n        layer = keras.layers.Dropout(0.05)\n      else:\n        layer = keras.layers.Dense(unit, activation=activation ,kernel_initializer=kernel_initializer)\n\n    _model.add(layer)\n  return _model","2a10fbc4":"def calc_new_features(row): # suit\uc640 distance \uacc4\uc0b0\n  shapes = [0, 0, 0, 0]\n  for suit in row.loc[['S1', 'S2', 'S3', 'S4', 'S5']]:\n    shapes[suit-1] += 1\n    \n  if 5 in shapes: # \ud50c\ub7ec\uc26c \ud310\ub2e8\uc744 \uc27d\uac8c \ud558\uae30 \uc704\ud568\n    shapes = sorted(shapes) \n    \n  _list = sorted(list(row.loc[['C1', 'C2', 'C3', 'C4', 'C5']]))\n  differences = [ abs(_list[i] - _list[i+1]) for i in range(len(_list)-1)]\n  differences.append(abs(_list[len(_list)-1] - _list[0]))\n  return pd.Series(shapes + differences)","b3f78462":"BATCH_SIZE = 32\nEPOCHS = 500","93c5dadd":"callbacks = [ # DNN \ubaa8\ub378 \ud559\uc2b5 \uc0ac\uc6a9\ud560 \ucf5c\ubc31 \ud568\uc218 \uc120\uc5b8\n  keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=10),\n  keras.callbacks.ModelCheckpoint('..\/kaggle\/working\/cp', monitor='val_accuracy', save_best_only=True),\n]","754e1190":"n_td = train_dataset.copy() # \ud559\uc2b5 \ub370\uc774\ud130\uc14b \ubcf5\uc0ac","f54562b6":"n_td[['a', 'b', 'c', 'd', 'ad1', 'ad2', 'ad3', 'ad4', 'ad5']] = n_td.apply(calc_new_features, axis=1) # \uc0c8\ub85c\uc6b4 \ud53c\uccd0 \uacc4\uc0b0","1d748601":"n_td # \uc0c8\ub85c\uc6b4 \ud2b9\uc131\uc774 \ud3ec\ud568\ub41c \ud14c\uc774\ube14","65c12d79":"n_td_test = test_dataset.copy() # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b \ubcf5\uc0ac","51f616b0":"n_td_test[['a', 'b', 'c', 'd', 'ad1', 'ad2', 'ad3', 'ad4', 'ad5']] = n_td_test.apply(calc_new_features, axis=1)","eefae41e":"n_td_test","59f5a918":"extract_cols = ['a', 'b', 'c', 'd',\n                         'ad1', 'ad2', 'ad3', 'ad4', 'ad5'] # \ucd94\ucd9c \uceec\ub7fc \uc815\uc758","7ce8f4a2":"target_datas = n_td_test[extract_cols] # \uc0c8\ub86d\uac8c \ub9cc\ub4e4\uc5b4\uc9c4 \ud2b9\uc131 \ucd94\ucd9c","290615e3":"x_train, x_test, y_train, y_test = train_test_split(n_td[extract_cols], n_td['CLASS'], test_size=0.3, random_state=42, shuffle=True) # \ub370\uc774\ud130\uc14b \ubd84\ub9ac","129a2239":"knn = KNeighborsClassifier(n_neighbors=10)","66dfe83e":"knn.fit(x_train, y_train)","3eba4580":"knn.score(x_test, y_test)","31cfbf99":"svm = SVC()","12c5f43b":"svm.fit(x_train, y_train)","93e6a284":"svm.score(x_test, y_test)","9f6229c0":"dcclf = DecisionTreeClassifier(max_features=9)","fc4669ec":"dcclf.fit(x_train, y_train)","e9ea0659":"dcclf.score(x_test, y_test)","50ac0bae":"rfclf = RandomForestClassifier(300, max_features=9)","a4094b82":"rfclf.fit(x_train, y_train)","ee32c50e":"rfclf.score(x_test, y_test)","f81fe4b3":"# 3 layers \ubaa8\ub378 \uc815\uc758\nmodel = default_model_maker({ \n    1 : {\n        'unit' : 30,\n        'activation' : 'relu',\n        'kernel_initializer' : 'uniform',\n        'input_shape' : (9, )\n    },\n    2 : {\n        'unit' : 30,\n        'activation' : 'relu',\n        'kernel_initializer' : 'uniform'\n    },\n    3 : {\n        'unit' : 10,\n        'activation' : 'softmax'\n    }\n})","df984b1e":"# \ubaa8\ub378 \uc124\uc815\nmodel.compile(\n    optimizer=keras.optimizers.Adam(lr=0.001),\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","61732673":"DNN_Y = to_categorical(n_td['CLASS']) # CLASS \uc815\ubcf4 \uc6d0\ud56b\uc778\ucf54\ub529","ffd1455c":"# \ubaa8\ub378 \ud559\uc2b5\nhis = model.fit(\n    n_td[extract_cols],\n    DNN_Y,\n    batch_size = BATCH_SIZE,\n    epochs = EPOCHS,\n    validation_split=0.3,\n    callbacks=callbacks,\n    verbose=1,\n)","34dcf912":"draw_plot(his) # ACC, LOSS \uc2dc\uac01\ud654","04f8080a":"loss, accuracy = model.evaluate(n_td[extract_cols], DNN_Y)","de8ab2a1":"pred_values = rfclf.predict(target_datas) # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b \uc608\uce21","7370aa6b":"result_table = pd.concat([n_td_test, pd.Series(pred_values, name='CLASS')], axis=1) # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uacfc \uacb0\uacfc \ub370\uc774\ud130\uc14b \ubcd1\ud569","6c932965":"result_table.head()","a65d78ad":"train_dataset['CLASS'].value_counts()","0a52f6ac":"# Straight Flush Cases [\ubaa8\ub4e0 \uce74\ub4dc\uc758 suit\uc774 \ub3d9\uc77c\ud558\uace0, \uce74\ub4dc\uc758 \ub4f1\uae09\uc774 1\uc529 \uc99d\uac00\ud560 \uacbd\uc6b0 => \uac01 \uce74\ub4dc\uc758 \uac12 \ucc28\uc774\uac00 1\uc774\uba74 1\uc529 \uc99d\uac00]\ncase8 = result_table[ (result_table.S1 == result_table.S2) & (result_table.S2 == result_table.S3) & (result_table.S3 == result_table.S4) & (result_table.S4 == result_table.S5) & \n              (result_table.ad1 == 1) &  (result_table.ad2 == 1) & (result_table.ad3 == 1) & (result_table.ad4 == 1) ]","9151c2a2":"case8 # 17\uac74\uc758 \uc798\ubabb\ub41c \ub370\uc774\ud130 \uac80\ucd9c","03717afe":"len(result_table)-17*100\/len(result_table)","91473087":"for x in case8.index: # 8\ubc88 \ucf00\uc774\uc2a4 \ucc98\ub9ac\n  result_table.loc[x]['CLASS'] = 8","bb61241d":"result_table[['Id', 'CLASS']] # \ucd5c\uc885 \uacb0\uacfc \ud14c\uc774\ube14","b915887c":"result_table[['Id', 'CLASS']].to_csv('submission.csv', index=False)","3e2e7be1":"## SVM","6bb486b1":"## \uc608\uce21","966961d9":"# \ubaa8\ub378 \uc120\uc815","97f901fe":"* \uacb0\uacfc\n> * KNN - 0.8393\n> * SVM - 0.9087\n> * DNN - 0.9996\n> * DT  - 1.0000\n> * RF  - 1.0000\n* SELECT Random Forest","3482eaf4":"## \ub370\uc774\ud130\uc14b \ub85c\ub4dc \ubc0f \ud655\uc778","eb195a74":"# \uc131\ub2a5 \uac1c\uc120\n* \uae30\ubcf8 \ub370\uc774\ud130\uc14b\uc744 \uae30\ubc18\uc73c\ub85c \ud559\uc2b5 \uc2dc\ud0a8 \uacb0\uacfc ACC\uac00 \ub9cc\uc871\uc2a4\ub7fd\uc9c0 \ubabb\ud568\n* Accuracy \ud5a5\uc0c1\uc744 \uc704\ud574 \ud3ec\ucee4 \ud2b9\uc131\uacfc \uad00\ub828\ub41c features \ucd94\uac00\n* \ud3ec\ucee4\uc758 \uce74\ub4dc\ub294 \uc21c\uc11c\uac00 \uc911\uc694\ud558\uc9c0 \uc54a\uace0, Suit\uc640 Rank\uac00 \uc911\uc694 \n> * EX) [2, 2, 0, 1, 1] => two pair = [0, 1, 1, 2, 2] => two pair\n> * EX) [1, 3, 2, 4, 5], 5 \ud558\ud2b8 => Straight Flush = [1, 2, 3, 4, 5], 5\ud558\ud2b8\n> * \uc989, Suit, Rank \uc815\ubcf4\ub97c \ud1b5\ud574 \uc9c1\uad00\uc801\uc73c\ub85c Case \uacc4\uc0b0 \uac00\ub2a5","c2c6d284":"## DNN","c9cd4df8":"## Random Forest","699c8d68":"## Decision Tree","249577c9":"## KNN","66d82d28":"## \ubaa8\ub4c8 \uc791\uc5c5","a13ca22e":"* 8\ubc88 \ucf00\uc774\uc2a4\ub97c \ucc98\ub9ac\ud558\uc9c0 \uc54a\uc744 \uacbd\uc6b0 \ucd5c\ub300 ACC\ub294 99.9983","2bf45241":"* 8\ubc88 \ub370\uc774\ud130\uc758 \ubd80\uc7ac -> 8\ubc88 (Straight Flush) \ud559\uc2b5 \ubd88\uac00 \n* \ud574\uacb0 \ubc29\uc548 -> 8\ubc88 \ub370\uc774\ud130 \ucc98\ub9ac","ae4be7b0":"## \ubd84\ub958 \ubaa8\ub378 \uc791\uc5c5","fb2f0fa2":"# \uacb0\uce21 \ub370\uc774\ud130"}}