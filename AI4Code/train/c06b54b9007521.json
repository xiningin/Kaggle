{"cell_type":{"f49d28f8":"code","793ea997":"code","2531be2c":"code","a840e153":"code","9e53a753":"code","251c8d75":"code","58f2bd34":"code","2cce81cb":"code","3cb86478":"code","1ec48eb8":"code","5cbf16f3":"code","2c0b44c6":"code","fdc4b926":"code","3a5d1c60":"code","2afe6252":"code","82c7ffb7":"code","2b8ef01b":"code","e6654285":"code","ac8b3cfc":"code","7dc831d0":"code","b14534bc":"code","ff01a5da":"code","8fe4d7ff":"code","66b96192":"code","249752ff":"code","7f1be5eb":"code","e1ec9fb1":"code","6398593e":"code","0d4b2d12":"code","c9074e44":"code","06d9ae39":"code","9743cd88":"code","e8f7f64b":"code","4eac10e2":"code","f1a231f6":"code","6840e0f5":"code","cb93ff4d":"code","8ea8eb69":"code","eae16481":"code","c6dd4b89":"code","36b9be3f":"code","41bba158":"code","a2ab1345":"code","ed8aedea":"code","e4bd516d":"code","246e6d17":"code","9145ce23":"code","666da6a2":"markdown","2590c6bd":"markdown","496a5293":"markdown","298e33df":"markdown","9b2379c9":"markdown","6b5c8364":"markdown","41766aca":"markdown","ba0a01b2":"markdown","3d479681":"markdown","8892814f":"markdown","94cb6cfc":"markdown","6eb0ff97":"markdown","dcce7ad7":"markdown","cc0cb706":"markdown","fcdb8ba0":"markdown","2907115d":"markdown","156717e7":"markdown","0701d82b":"markdown","0cca09bd":"markdown","f703e86c":"markdown","3acb13c1":"markdown","999552e9":"markdown","e1a4f534":"markdown"},"source":{"f49d28f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","793ea997":"eda=pd.read_csv('\/kaggle\/input\/titanic-dataset-from-kaggle\/train.csv')","2531be2c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\neda","a840e153":"eda.head()","9e53a753":"eda.tail()","251c8d75":"eda.info()","58f2bd34":"eda.describe()","2cce81cb":"eda.isnull().sum()","3cb86478":"eda['Age']=eda['Age'].fillna(value=eda['Age'].mean())","1ec48eb8":"eda.isnull().sum()","5cbf16f3":"eda.boxplot()","2c0b44c6":"IQR_Fare=eda['Fare'].quantile(0.75)-eda['Fare'].quantile(0.25)\nIQR_Fare","fdc4b926":"Upper_OutlierLimit=eda['Fare'].quantile(0.75)+1.5*IQR_Fare\nUpper_OutlierLimit","3a5d1c60":"OutlierValues=eda[(eda['Fare']>Upper_OutlierLimit)]\nOutlierValues","2afe6252":"eda['Fare']=np.where(eda['Fare']>65.6,eda['Fare'].quantile(0.85),eda['Fare'])\neda","82c7ffb7":"IQR_Age=eda['Age'].quantile(0.75)-eda['Age'].quantile(0.25)\nIQR_Age","2b8ef01b":"Upper_OutlierLimit2=eda['Age'].quantile(0.75)+1.5*IQR_Age\nUpper_OutlierLimit2","e6654285":"OutlierValues2=eda[(eda['Age']>Upper_OutlierLimit2)]\nOutlierValues2","ac8b3cfc":"eda['Age']=np.where(eda['Age']>54.5,eda['Age'].quantile(0.95),eda['Age'])\neda","7dc831d0":"eda.boxplot(column=['Fare'])","b14534bc":"obj=eda.dtypes==np.object\nprint(obj)","ff01a5da":"eda.drop(['Name','Ticket','Cabin'],axis=1,inplace=True)\neda","8fe4d7ff":"eda=pd.get_dummies(eda,drop_first=True)\neda","66b96192":"cols=eda.columns\ncols=['PassengerId','Pclass','Age','SibSp','Parch','Fare','Sex_male','Embarked_Q','Embarked_S','Survived']","249752ff":"eda=eda[cols]\neda","7f1be5eb":"x=eda.iloc[:,:-1].values\nx.shape","e1ec9fb1":"y=eda.iloc[:,-1].values\ny.shape","6398593e":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25 , random_state=5)","0d4b2d12":"x_train.shape","c9074e44":"x_test.shape","06d9ae39":"y_train.shape","9743cd88":"y_test.shape","e8f7f64b":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train, y_train)","4eac10e2":"y_pred = lr.predict(x_test)","f1a231f6":"y_test","6840e0f5":"y_pred","cb93ff4d":"from sklearn.metrics import confusion_matrix\nconfusion = confusion_matrix(y_test, y_pred)\nprint(confusion)","8ea8eb69":"TN = confusion [0,0]\nFP = confusion [0,1]\nFN = confusion [1,0]\nTP = confusion [1,1]","eae16481":"print(confusion)\nprint (\"TN: \", TN)\nprint (\"FP: \", FP)\nprint (\"FN: \", FN)\nprint (\"TP: \", TP)","c6dd4b89":"from sklearn import metrics\naccuracy = metrics.accuracy_score(y_test, y_pred)\naccuracy1 = (TN+TP)\/(TN+TP+FN+FP)\nprint (\"Accuracy from metrics: \", accuracy)\nprint (\"Accuracy Calculated: \", accuracy1)","36b9be3f":"print((FP+FN)\/float(TP+TN+FP+FN))\nprint(round(1-metrics.accuracy_score(y_test, y_pred),4))","41bba158":"print(\"RECALL:\", metrics.recall_score(y_test,y_pred))\nprint(\"CALCULATED RECALL:\", (TP)\/(TP+FN))","a2ab1345":"print (\"SPECIFICITY\/TRUE NEGATIVE RATE:\", (TN)\/(TN+FP))","ed8aedea":"print(\"FALSE POSITIVE RATE: \",(FN)\/(FN+TP))","e4bd516d":"print(\"FALSE NEGATIVE RATE: \",(FP)\/(TN+FP))","246e6d17":"print (\"Precision: \", round(metrics.precision_score(y_test,y_pred),2))\nprint (\"PRECISION CALCULATED: \", round(TP\/float(TP+FP),2))","9145ce23":"from sklearn.metrics import accuracy_score,f1_score,precision_score,recall_score,roc_auc_score\naccuracy = accuracy_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\nroc_auc = roc_auc_score(y_test, y_pred)\n\nprint('Accuracy is  :' ,round(accuracy,2)*100)\nprint('F1 score is :' ,round(f1,2)*100)\nprint('Precision is  :',round(precision,2)*100)\nprint('Recall is  :',round(recall,4)*100)\nprint('Roc Auc is  :',round(roc_auc,2)*100)","666da6a2":"### Splitting the DataSet","2590c6bd":"## f1 Score","496a5293":"# Building the model by using Logistic Regression","298e33df":"## Sensitivity\/True Positive Rate\/Recall","9b2379c9":"### Now Outliers are capped.We can check it through BoxPlot of the Particular Columns ","6b5c8364":"### Outliers are present in four different columns,two of those columns are ignorable,'Age','Fare' Column Outliers should be Fixed.\n\n### It is finded and capped as below:","41766aca":"# EDA(Exploratory Data Analysis) or Cleaning of the Data","ba0a01b2":"## Classification Accuracy","3d479681":"### Here,we have Name,Sex,Ticket,Cabin & Embarked columns as categorical data.\n### In the process of Cleaning,we don't require\/accept categorical data.All the data should be numeric.\n### Other thing to note here is,'Sex' and 'Embarked' Columns are not Continuous data.So we can get numeric data by creating dummies to them.\n### So we should Drop 3 Columns and create dummies for 2 columns ","8892814f":"### Defining x and y:","94cb6cfc":"# Importing Data","6eb0ff97":"## Precision","dcce7ad7":"## False Positive Rate","cc0cb706":"## False Negative Rate","fcdb8ba0":"## Classification Error","2907115d":"# Importing all the Libraries","156717e7":"## Checking for Null Values","0701d82b":"### We are just interchanging the columns(Dependent variable to last column) just to have good view","0cca09bd":"## Specificity\/True Negative Rate","f703e86c":"### We should 1st check whether Null values are present in the DataSet or not, before performing any cleaning on that particular column. Here age has null values,so we should fix it.","3acb13c1":"## Confusion Matrix","999552e9":"## Checking for Outliers in the DataSet","e1a4f534":"### Building the Model"}}