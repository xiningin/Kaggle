{"cell_type":{"01527f6d":"code","fada968d":"code","609aac8d":"code","e255fdaf":"code","f68dfee2":"code","fbd3d0ec":"code","c6af7b33":"code","9c5f651c":"markdown","b11d77b5":"markdown","842adf65":"markdown","fac377c1":"markdown","506ea261":"markdown"},"source":{"01527f6d":"# Following the Univrsity of Tennessee ASTR 217 \n# python lecture on implementing Verlet method\n# this shows planetary trajectories\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O \nimport matplotlib.pyplot as plt # good stuff\nimport random\nimport math\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fada968d":"G2 = 6.674e-11\/(1.496e11**3)*5.974e24*(31557600**2) #AU^3\/Meath\/year^2\nG3 = 4*math.pi**2\/332946\nprint(\"G2: \",G2,\"\\nG3: \",G3)","609aac8d":"# Making verlet function\ndef verlet_xy(G,x_init,y_init,vx_init,vy_init,Nstep=100,mass=0,N=2,dt=0.01,verbose=0):\n    if verbose>0:\n        print('N,Nstep',N,Nstep)\n        \n    x=np.zeros((N,3,Nstep+1))\n    a=np.zeros((N,3))\n    m=np.zeros((N))\n    t=0\n    \n    if Nstep>1000:\n        raise Exception('Too many steps.')\n        \n    # Initialize remaining objects\n    for io in range(0,N):\n        if type(mass)==type(int(0)) and mass==0:\n            if io==0:\n                m[0]=332946.0\n            else:\n                m[io]=1.0\n        else:\n            m[io]=mass[io]\n        \n        x[io][0][0]=x_init[io]\n        x[io][1][0]=y_init[io]\n        x[io][2][0]=0\n        x[io][0][1]=x_init[io]+vx_init[io]*dt\n        x[io][1][1]=y_init[io]+vy_init[io]*dt\n        x[io][2][1]=0\n        \n    if verbose>0:\n        print('x: ',0,x[:,:,0])\n        print('x: ',1,x[:,:,1])\n        \n    # Loop over timesteps\n    for it in range(1,Nstep):\n        \n        # Computer acceleration on object io from object ip\n        for io in range(0,N):\n            fx=0.0\n            fy=0.0\n            fz=0.0\n            for ip in range(0,N):\n                if io !=ip:\n                    dx=x[io][0][it]-x[ip][0][it]\n                    dy=x[io][1][it]-x[ip][1][it]\n                    dz=x[io][2][it]-x[ip][2][it]\n                    dd=math.sqrt(dx*dx+dy*dy+dz*dz)\n                    # Component of grav. force in x, y, and z directions\n                    fx=fx-G*m[io]*m[ip]*dx\/dd\/dd\/dd\n                    fy=fy-G*m[io]*m[ip]*dy\/dd\/dd\/dd\n                    fz=fz-G*m[io]*m[ip]*dz\/dd\/dd\/dd\n                    if verbose>1:\n                        print('f: ',fx,fy,fz)\n            a[io][0]=fx\/m[io]\n            a[io][1]=fy\/m[io]\n            a[io][2]=fz\/m[io]\n            if verbose>1:\n                print('a: ',io,a[io][0],a[io][1],a[io][2])\n                \n        # Implement Verlet Method\n        for io in range(0,N):\n            for ic in range(0,3):\n                x[io][ic][it+1]=(2.0*x[io][ic][it]-x[io][ic][it-1]+dt*dt*a[io][ic])\n        if verbose>0:\n            print('a: ',it+1,x[:,:,it+1])\n            \n    return x","e255fdaf":"x=verlet_xy(G2,[0,1],[0,0],[0,0],[0,2*math.pi])\nfig=plt.figure(figsize=(5,5))\nplt.plot(x[0][0][:],x[0][1][:])\nplt.plot(x[1][0][:],x[1][1][:])\nplt.xlim([-1.2,1.2])\nplt.ylim([-1.2,1.2])\nplt.show()","f68dfee2":"x=verlet_xy(G2,[0,1],[0,0],[0,4.0],[0,2*math.pi-1],Nstep=300)\nfig=plt.figure(figsize=(5,5))\nplt.plot(x[0][0][:],x[0][1][:])\nplt.plot(x[1][0][:],x[1][1][:])\nplt.xlim([-2,2])\nplt.ylim([-2,2])\nplt.show()","fbd3d0ec":"x=verlet_xy(G2,[0,1,4],[0,0,0],[0,0,0],[0,2.0*math.pi,1.0*math.pi],Nstep=1000,N=3)\nfig=plt.figure(figsize=(5,5))\nplt.plot(x[0][0][:],x[0][1][:])\nplt.plot(x[1][0][:],x[1][1][:])\nplt.plot(x[2][0][:],x[2][1][:])\nplt.xlim([-7,7])\nplt.ylim([-7,7])\nplt.show()","c6af7b33":"dv = 0.1\ndx = 1.0e-4\nx=verlet_xy(G2,[0,1-dx,1+dx],[0,0,0],[0,dv,dv],[0,2*math.pi+dv,2*math.pi-dv],N=3,mass=[332946,0.5,0.5])\nfig=plt.figure(figsize=(5,5))\nplt.plot(x[0][0][:],x[0][1][:])\nplt.plot(x[1][0][:],x[1][1][:])\nplt.plot(x[2][0][:],x[2][1][:])\nplt.xlim([-1.2,1.2])\nplt.ylim([-1.2,1.2])\nplt.show()","9c5f651c":"**Circles with in circles**","b11d77b5":"Problem: Not seeing the middle dot","842adf65":"**Make a circle**","fac377c1":"**Make a Circle in an Elliptical**","506ea261":"**Make an Elliptical**"}}