{"cell_type":{"4c40790a":"code","ee92100e":"code","0cf7d689":"code","8644bb27":"code","f2a5cbdb":"code","57cd5eab":"code","11b7b028":"code","68000826":"code","09835594":"code","a46a74f9":"code","bdcee15a":"code","d5b01478":"code","74b9d90d":"code","6114444e":"code","ce4db310":"code","ba4cc370":"markdown","199474bd":"markdown","5205f209":"markdown"},"source":{"4c40790a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee92100e":"# importing libraries \nimport tensorflow\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator \nfrom tensorflow.keras.models import Sequential, save_model, load_model\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D \nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense,BatchNormalization\nimport numpy as np\nfrom tensorflow.keras.callbacks import TensorBoard\nimport time\nimport matplotlib.pyplot as plt\nimport datetime\nimport cv2\nimport os\nimport tensorflow as tf\nimport tensorflow.keras\nimport cv2\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report\nprint('tf version', tf.__version__)\nprint('keras version', tf.keras.__version__)\nprint('gpu is ','available' if tf.config.list_physical_devices('GPU') else 'not available')","0cf7d689":"subdir = ['25-30','42-48','60-98','6-20']\npath = '\/kaggle\/input\/age-recognition-dataset\/Dataset\/'\n\ntarget_name = {'25-30': 0, '42-48': 1, '60-98': 2, '6-20': 3}\nX, y = [], []\nfor age in subdir:\n    for img_name in os.listdir(path+age):\n        img = cv2.imread(path+age+'\/'+img_name)\n        scalled_raw_img = cv2.resize(img, (80, 80))\/255.0\n        X.append(scalled_raw_img)\n        y.append(target_name[age])","8644bb27":"len(X), len(y)","f2a5cbdb":"X, y = np.array(X), np.array(y)\nX.shape, y.shape","57cd5eab":"y = tf.keras.utils.to_categorical(y, num_classes=4)\ny.shape","11b7b028":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","68000826":"base_model = tf.keras.applications.Xception(\n    include_top=False,\n    weights=\"imagenet\",\n    input_shape=(80, 80, 3),\n    pooling='avg',\n    classes=4,\n    classifier_activation=\"softmax\",\n)","09835594":"num_of_class = 4\nepoch = 20\n\nmodel = Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_of_class, activation='softmax'))\n\n\nmodel.compile(loss ='categorical_crossentropy',\n                     optimizer ='adam', \n                   metrics =['accuracy'])","a46a74f9":"model.summary()","bdcee15a":"H = model.fit(\n    x=X_train,\n    y=y_train,\n    batch_size=256,\n    epochs=epoch,\n    validation_data=(X_test, y_test)) #Model Training","d5b01478":"# Plot training & validation accuracy values\nfig, ax = plt.subplots(1,1)\nplt.plot(H.history[\"accuracy\"])\nplt.plot(H.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n","74b9d90d":"# Plot training & validation loss values\nfig, ax = plt.subplots(1,1)\nplt.plot(H.history['loss'])\nplt.plot(H.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","6114444e":"y_pred = np.argmax(model.predict(X_test,batch_size=1), axis=1) \n\nprint('Classification Report')\ny_classes = [np.argmax(y, axis=None, out=None) for y in y_test]\nreport = classification_report(y_classes, y_pred, target_names=target_name.keys())\nprint(report)\n\nplt.figure(figsize=(10,10))\ncm = confusion_matrix(y_classes, y_pred)\n_=sns.heatmap(cm.T, annot=True, fmt='d', cbar=True, square=True, xticklabels=target_name.keys(),\n             yticklabels=target_name.keys())\nplt.xlabel('Truth')\nplt.ylabel('Predicted')","ce4db310":"model.save('.\/age_recongnition_model.hdf5') #save the developed model.","ba4cc370":"# Data processing","199474bd":"**Selected [Xception model](https:\/\/keras.io\/api\/applications\/xception\/) as a base model for extracting features from images**","5205f209":"# Development process for age recognition using Deep Learning\n\nThe dataset has high diversity. So for feature extraction I used [Xception model](https:\/\/keras.io\/api\/applications\/xception\/). I merged this **functional model** with my **sequential model** and developed a final model that will predict label for four age groups. I kept the data processing part very simple. I just converted image into numpy array and insert it in X(data) same goes for y(label). Then used train_test_split to split X,y into X_train, X_test, y_train, y_test where train set contains **80%** and test set contains **20%** of the data. After training I plotted accuracy and loss achieved during training. From the visualization **I observed that the model is overfitted** on training data. For model evaluation I provided **classification report and confusion matrix at the end.**"}}