{"cell_type":{"c17f9098":"code","55da47c4":"code","3519fac1":"code","70d59575":"code","0fc98397":"code","3bf3e034":"code","fcb5cc0a":"code","1e510fe5":"code","99d51d89":"code","ddff13bb":"code","a29cbf88":"code","708975a9":"code","bbd0720c":"code","e4e4de77":"code","a66c3b18":"code","c3580216":"code","61d67f98":"code","a3035f82":"code","b505945b":"code","5d394d2f":"code","690d1ca5":"code","0b51a66d":"markdown","2c73cc15":"markdown","33900aa5":"markdown","a854f52c":"markdown","57c6d652":"markdown","3f9894a4":"markdown","6841f6ec":"markdown","c2c77ffd":"markdown","7c13aadb":"markdown","dbddc8ed":"markdown","df7310d0":"markdown","8eaeb704":"markdown","c7d62258":"markdown","cf986c55":"markdown","14a517df":"markdown","9f4a1255":"markdown","f65499a7":"markdown","5778007e":"markdown","6f9622b7":"markdown","03405a5b":"markdown","0ca7e767":"markdown"},"source":{"c17f9098":"#libraries\nfrom keras.models import Sequential \nfrom keras.layers import Dense \nimport matplotlib.pyplot as plt\n\n#\nfrom textblob import TextBlob\nfrom sklearn import model_selection, preprocessing, linear_model, naive_bayes, metrics\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn import decomposition, ensemble\n#\nfrom sklearn import metrics\n#\nimport textblob, string\nfrom keras.preprocessing import text, sequence\nfrom keras import layers, models, optimizers\n#\n#stopwords\nimport nltk\n#nltk.download('stopwords')\nfrom nltk.corpus import stopwords\n#\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nseed = 7 \nnp.random.seed(seed)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","55da47c4":"train = pd.read_csv(\"\/kaggle\/input\/imdb-dataset-sentiment-analysis-in-csv-format\/Train.csv\")\ntrain.head()","3519fac1":"train.info()","70d59575":"train.label.value_counts()","0fc98397":"train.groupby(\"label\").count()","3bf3e034":"def transformations(dataframe):\n    # upper to lower character\n    dataframe['text'] = dataframe['text'].apply(lambda x: \" \".join(x.lower() for x in x.split()))\n    #punctuations\n    dataframe['text'] = dataframe['text'].str.replace('[^\\w\\s]','')\n    #numbers\n    dataframe['text'] = dataframe['text'].str.replace('\\d','')\n    # \n    sw = stopwords.words('english')\n    dataframe['text'] = dataframe['text'].apply(lambda x: \" \".join(x for x in x.split() if x not in sw))\n    #rare characters deleting\n    sil = pd.Series(' '.join(dataframe['text']).split()).value_counts()[-1000:]\n    dataframe['text'] = dataframe['text'].apply(lambda x: \" \".join(x for x in x.split() if x not in sil))\n    #lemmi\n    from textblob import Word\n    #nltk.download('wordnet')\n    dataframe['text'] = dataframe['text'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()])) \n    return dataframe","fcb5cc0a":"train = transformations(train)\ntrain.head()","1e510fe5":"valid = pd.read_csv(\"\/kaggle\/input\/imdb-dataset-sentiment-analysis-in-csv-format\/Valid.csv\")\nvalid = transformations(valid)\nvalid.head()","99d51d89":"test = pd.read_csv(\"\/kaggle\/input\/imdb-dataset-sentiment-analysis-in-csv-format\/Test.csv\")\ntest = transformations(test)\ntest.head()","ddff13bb":"train_x = train['text']\nvalid_x = valid[\"text\"]\ntrain_y = train[\"label\"]\nvalid_y = valid[\"label\"]","a29cbf88":"vectorizer = CountVectorizer()\nvectorizer.fit(train_x)","708975a9":"x_train_count = vectorizer.transform(train_x)\nx_valid_count = vectorizer.transform(valid_x)\nx_test_count  = vectorizer.transform(test[\"text\"])","bbd0720c":"model = Sequential() \n#layers\nmodel.add(Dense(50,input_dim=x_train_count.shape[1], kernel_initializer=\"uniform\", activation=\"relu\")) \n#model.add(Dense(6, kernel_initializer=\"uniform\", activation=\"relu\")) \nmodel.add(Dense(1, kernel_initializer=\"uniform\", activation=\"sigmoid\")) \nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n# Fit the model\nhistory = model.fit(x_train_count, train_y.values.reshape(-1,1), validation_data=(x_valid_count,valid_y), nb_epoch=2, batch_size=128)","e4e4de77":"# evaluate\nloss, acc = model.evaluate(x_test_count, test[\"label\"], verbose=0)\nprint('Test Accuracy: %f' % (acc*100))","a66c3b18":"comments = pd.Series(test[\"text\"])\ncomments = vectorizer.transform(comments)","c3580216":"y_pred = model.predict_classes(comments)\nnn_cm = metrics.confusion_matrix(test[\"label\"],y_pred)\nprint(nn_cm)","61d67f98":"import sklearn.metrics as metrics\n# calculate the fpr and tpr for all thresholds of the classification\nprobs = model.predict_proba(x_valid_count)\npreds = probs[:,:]\nfpr, tpr, threshold = metrics.roc_curve(test[\"label\"], y_pred)\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.3f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","a3035f82":"comment_1 = pd.Series(\"this film is very nice and good i like it\")\ncomment_2 = pd.Series(\"no not good look at that shit very bad\")","b505945b":"comment_1  = vectorizer.transform(comment_1)\ncomment_2 = vectorizer.transform(comment_2)","5d394d2f":"model.predict_classes(comment_1)","690d1ca5":"model.predict_classes(comment_2)","0b51a66d":"<a id = \"15\"><\/a><br>\n## ROC","2c73cc15":"<a id = \"5\"><\/a><br>\n## Text Clearing","33900aa5":"<a id = \"9\"><\/a><br>\n## Split Dataset","a854f52c":"<a id = \"17\"><\/a><br>\n## A Positive Comment","57c6d652":"<a id = \"12\"><\/a><br>\n## Neural Network Model","3f9894a4":"<a id = \"16\"><\/a><br>\n## Making Prediction","6841f6ec":"<a id = \"3\"><\/a><br>\n## Train Dataset Analysis","c2c77ffd":"1. [Load Libraries](#1)  \n1. [Load Train Dataset](#2)\n1. [Train Dataset Analysis](#3)\n    * [Balanced Dataset](#4)\n1. [Text Clearing](#5)\n    * [Train Dataset Clearing](#6)\n    * [Test Dataset Clearing](#7)\n    * [Valid Dataset Clearing](#8)\n1. [Split Dataset](#9)\n1. [Feature Engineering](#10)\n1. [Deep Learning](#11)\n    * [Neural Network Model](#12)\n    * [Accuracy](#13)\n    * [Confusion Metrics](#14)\n    * [ROC](#15) \n    * [Making Prediction](#16) \n    * [A Positive Comment](#17)\n    * [A Negative Comment](#18)","7c13aadb":"<a id = \"7\"><\/a><br>\n## Validation Dataset Clearing","dbddc8ed":"<a id = \"11\"><\/a><br>\n## Deep Learning","df7310d0":"<a id = \"18\"><\/a><br>\n## A Negative Comment","8eaeb704":"<a id = \"4\"><\/a><br>\n## Balanced Dataset","c7d62258":"<a id = \"10\"><\/a><br>\n## Feature Engineering\n\nCountVectorizer is like One-Hot Encoding","cf986c55":"<a id = \"6\"><\/a><br>\n## Train Dataset Clearing","14a517df":"Create a Function for Clearing","9f4a1255":"<a id = \"13\"><\/a><br>\n## Accuracy","f65499a7":"<font color = 'red'>\n<h3>Please Upvote, if you like my kernel.<h3>","5778007e":"<a id = \"2\"><\/a><br>\n## Load Train Dataset","6f9622b7":"<a id = \"14\"><\/a><br>\n## Confusion Metrics","03405a5b":"<a id = \"8\"><\/a><br>\n## Test Dataset Clearing","0ca7e767":"<a id = \"1\"><\/a><br>\n## Load Libraries"}}