{"cell_type":{"7a69fb98":"code","7e824f4d":"code","fe967664":"code","b7fc797a":"code","b822ad9d":"code","461db108":"code","3ecceb0e":"code","2246dd6c":"code","1ebbc52c":"code","d00d4a41":"code","dc86219f":"code","4224c694":"code","cf8da669":"code","c6774eda":"code","ff88ff53":"code","a440743f":"code","cc6e0761":"code","8f60e952":"code","2aab5a4b":"code","29627893":"code","e969a348":"code","907445b6":"code","ab8e6ba6":"code","8f3fccd9":"code","ae2a484f":"code","2951c06e":"code","f7772b9d":"code","e722738c":"code","c9f0d5a4":"code","9a99c698":"code","85040574":"code","8e8c4d1d":"code","c80da06e":"code","2b8522e6":"code","eb31f7f0":"code","47f2fc34":"code","3b3785ab":"code","309679f7":"code","22ca9966":"code","a9ba83b1":"code","4ed7b84c":"code","2d54d673":"code","b484511b":"code","51000338":"code","c5830313":"code","c0559230":"code","e167cb3a":"code","a166abd3":"code","142cd25f":"code","676ec11a":"code","709c4146":"code","5a073f7e":"code","96da6919":"code","a9067fba":"code","f4c3f0c4":"code","737c2347":"code","c663c011":"code","c4e380c1":"code","4475dda4":"code","d43e2320":"code","5e3ae5dc":"code","7c289834":"code","706099e9":"code","d0811260":"code","c3ab0e8e":"code","6b483149":"code","f27a5b64":"code","dd133385":"code","a92cd18a":"code","aea41f5e":"code","c1ab1412":"code","dbc90c78":"code","7b09294a":"code","3b0a3075":"code","f800b520":"code","8f21fcf4":"code","7e305347":"code","de3b6af5":"code","7d1f90a1":"code","4011d4bd":"code","80f55102":"code","e5e36016":"code","c0553949":"code","56760c3d":"code","a961a4c3":"code","1e59fbc8":"code","0e2162af":"code","19bfcf6a":"code","31be3331":"code","b6bb7ff1":"code","9b56b676":"code","f5698092":"code","07bd6a27":"code","6396cf36":"code","1cbeda50":"code","bf7c29c9":"code","a932c112":"code","8f97900a":"code","8f71e11d":"code","26a9e51e":"code","c8f3375c":"code","064344e2":"code","ef092f09":"code","49f4306e":"code","57eff0c4":"code","23c48ce3":"code","252af901":"code","e6dcdfa8":"code","d31593c3":"code","3a0b2bc2":"code","ffcd2be3":"code","5acd4dcb":"code","c5ce97a4":"code","0c0fbf6c":"code","6167d83b":"code","750d2d0b":"code","1f8747aa":"code","3d9b0a5c":"code","a10a8374":"code","0a9072bf":"code","4b34154e":"code","dfadef97":"code","4b81a98e":"code","b55ab1f7":"code","2a966404":"code","82beab49":"code","76356f11":"code","72ef07af":"code","23fa7741":"code","db2efa73":"code","08f3c4ee":"code","6e2b80c6":"markdown","542b057e":"markdown","4f17ed61":"markdown","2640a8c3":"markdown","274fa4ac":"markdown","27a7781b":"markdown","158b9056":"markdown"},"source":{"7a69fb98":"import warnings\nwarnings.filterwarnings('ignore')","7e824f4d":"import numpy as np\nimport pandas as pd","fe967664":"import matplotlib.pyplot as plt\n%matplotlib inline","b7fc797a":"import seaborn as sns","b822ad9d":"titanic_train=pd.read_csv('..\/input\/titanic\/train.csv')","461db108":"titanic_train.head()","3ecceb0e":"titanic_train.info()","2246dd6c":"round(titanic_train.isna().sum()\/titanic_train.shape[0],1)","1ebbc52c":"titanic_train['Embarked'][titanic_train['Embarked'].isna()]='S'","d00d4a41":"titanic_train['Family_Size']=titanic_train['SibSp']+titanic_train['Parch']+1","dc86219f":"titanic_train['Title']=titanic_train['Name'].apply(lambda x:x.split(\",\")[1].split(\".\")[0])","4224c694":"titanic_train['Title'].value_counts()","cf8da669":"titanic_train['Title']=titanic_train['Title'].str.strip()","c6774eda":"def Template(row):\n    if row.Title in (['Mr','Mrs','Miss','Ms','Mlle']):\n        return(row.Title)\n    else:\n        if row.Sex=='Male':\n            return('Mr')\n        else:\n            return('Mrs')\n        ","ff88ff53":"titanic_train['Title']=titanic_train.apply(Template,axis=1)","a440743f":"titanic_train['Title'].replace('Mlle','Ms',inplace=True)","cc6e0761":"titanic_train['Title'].value_counts()","8f60e952":"titanic_train['Age']=titanic_train['Age'].fillna(titanic_train.groupby(['Pclass','Title'])['Age'].transform('median'))","2aab5a4b":"titanic_train['Unit_Fare']=round(titanic_train['Fare']\/titanic_train['Family_Size'])","29627893":"bin_labels=['VeryYoung','Young','Adult','Old','VeryOld']\ntitanic_train['AgeBin']=pd.qcut(titanic_train['Age'],q=5,labels=bin_labels)","e969a348":"bin_labels=['Low','Medium','High']\ntitanic_train['FareBin']=titanic_train.groupby(\"Embarked\")['Fare'].transform(lambda x: pd.qcut(x, 3, labels=bin_labels))","907445b6":"sns.countplot(x='AgeBin',hue='Survived',data=titanic_train)","ab8e6ba6":"sns.countplot(x='FareBin',hue='Survived',data=titanic_train)","8f3fccd9":"titanic_train[\"Cabin\"].value_counts()","ae2a484f":"titanic_train['Cabin_class']=titanic_train[~titanic_train['Cabin'].isna()]['Cabin'].apply(lambda x:x[0])","2951c06e":"titanic_train[\"Cabin_class\"].value_counts()","f7772b9d":"titanic_train['Cabin_class'].fillna(value='Unknown',inplace=True)","e722738c":"titanic_train.head(5)","c9f0d5a4":"titanic_train.head()","9a99c698":"titanic_train['Sex']=titanic_train['Sex'].map(lambda x:0 if x=='male' else 1)","85040574":"Cat_var=['Pclass','Embarked','Title','AgeBin','FareBin','Cabin_class']","8e8c4d1d":"D1=pd.get_dummies(titanic_train['Pclass'],drop_first=True)\nD2=pd.get_dummies(titanic_train['Embarked'],drop_first=True)\nD3=pd.get_dummies(titanic_train['Title'],drop_first=True)\nD4=pd.get_dummies(titanic_train['AgeBin'],drop_first=True)\nD5=pd.get_dummies(titanic_train['FareBin'],drop_first=True)\nD6=pd.get_dummies(titanic_train['Cabin_class'],drop_first=True)","c80da06e":"ttrn=[titanic_train,D1,D2,D3,D4,D5,D6]","2b8522e6":"ttrn=pd.concat(ttrn,axis=1)","eb31f7f0":"ttrn=ttrn.drop(Cat_var,axis=1)","47f2fc34":"ttrn=ttrn.drop(['Name','Age','SibSp','Parch','Ticket','Fare','Cabin','Unit_Fare','PassengerId'],axis=1)","3b3785ab":"ttrn.head()","309679f7":"ttrn.columns","22ca9966":"titanic_test=pd.read_csv('..\/input\/titanic\/test.csv')","a9ba83b1":"titanic_test.head()","4ed7b84c":"titanic_test.isna().sum()\/titanic_test.shape[0]","2d54d673":"titanic_test['Family_Size']=titanic_test['SibSp']+titanic_test['Parch']+1","b484511b":"titanic_test['Title']=titanic_test['Name'].apply(lambda x:x.split(\",\")[1].split(\".\")[0])","51000338":"titanic_test['Title'].value_counts()","c5830313":"titanic_test['Title']=titanic_test['Title'].str.strip()","c0559230":"def Template(row):\n    if row.Title in (['Mr','Mrs','Miss','Ms','Mlle']):\n        return(row.Title)\n    else:\n        if row.Sex=='Male':\n            return('Mr')\n        else:\n            return('Mrs')\n        ","e167cb3a":"titanic_test['Title']=titanic_test.apply(Template,axis=1)","a166abd3":"titanic_test['Age']=titanic_test['Age'].fillna(titanic_test.groupby(['Pclass','Title'])['Age'].transform('median'))","142cd25f":"titanic_test['Unit_Fare']=round(titanic_test['Fare']\/titanic_test['Family_Size'])","676ec11a":"bin_labels=['VeryYoung','Young','Adult','Old','VeryOld']\ntitanic_test['AgeBin']=pd.qcut(titanic_test['Age'],q=5,labels=bin_labels)","709c4146":"bin_labels=['Low','Medium','High']\ntitanic_test['FareBin']=titanic_test.groupby(\"Embarked\")['Fare'].transform(lambda x: pd.qcut(x, 3, labels=bin_labels))","5a073f7e":"titanic_test.head()","96da6919":"titanic_test['Cabin_class']=titanic_test[~titanic_test['Cabin'].isna()]['Cabin'].apply(lambda x:x[0])","a9067fba":"titanic_test['Cabin_class'].fillna(value='Unknown',inplace=True)","f4c3f0c4":"titanic_test['Sex']=titanic_test['Sex'].map(lambda x:0 if x=='male' else 1)","737c2347":"Cat_var=['Pclass','Embarked','Title','AgeBin','FareBin','Cabin_class']","c663c011":"D1=pd.get_dummies(titanic_test['Pclass'],drop_first=True)\nD2=pd.get_dummies(titanic_test['Embarked'],drop_first=True)\nD3=pd.get_dummies(titanic_test['Title'],drop_first=True)\nD4=pd.get_dummies(titanic_test['AgeBin'],drop_first=True)\nD5=pd.get_dummies(titanic_test['FareBin'],drop_first=True)\nD6=pd.get_dummies(titanic_test['Cabin_class'],drop_first=True)","c4e380c1":"ttst=[titanic_test,D1,D2,D3,D4,D5,D6]","4475dda4":"ttst=pd.concat(ttst,axis=1)","d43e2320":"ttst=ttst.drop(Cat_var,axis=1)","5e3ae5dc":"ttst.head()","7c289834":"ttst=ttst.drop(['Name','Age','SibSp','Parch','Ticket','Fare','Cabin','Unit_Fare','PassengerId'],axis=1)","706099e9":"PID=titanic_test['PassengerId']","d0811260":"pidtn=titanic_train['PassengerId']","c3ab0e8e":"ttst.head()","6b483149":"ttst.columns","f27a5b64":"ttrn.columns","dd133385":"ttrn=ttrn.drop('T',axis=1)","a92cd18a":"ttrny=titanic_train['Survived']","aea41f5e":"ttrny","c1ab1412":"ttrn.drop('Survived',axis=1,inplace=True)","dbc90c78":"from sklearn.preprocessing import StandardScaler","7b09294a":"scaler=StandardScaler()","3b0a3075":"import statsmodels.api as sm","f800b520":"log_M1=sm.GLM(ttrny,(sm.add_constant(ttrn)),family=sm.families.Binomial())","8f21fcf4":"log_M1.fit().summary()","7e305347":"# As the number of variables is very high we can use RFE to shortlist the variables","de3b6af5":"from sklearn.linear_model import LogisticRegression\nlogreg=LogisticRegression()","7d1f90a1":"from sklearn.feature_selection import RFE\nrfe=RFE(logreg,15)","4011d4bd":"rfe=rfe.fit(ttrn,ttrny)","80f55102":"rfe.support_","e5e36016":"list(zip(ttrn.columns, rfe.support_, rfe.ranking_))","c0553949":"col=ttrn.columns[rfe.support_]","56760c3d":"ttrn.columns[~rfe.support_]","a961a4c3":"ttrn.columns[rfe.support_]","1e59fbc8":"ttrn_sm=sm.add_constant(ttrn[col])\n","0e2162af":"log_M2=sm.GLM(ttrny,ttrn_sm,family=sm.families.Binomial())\n","19bfcf6a":"res2=log_M2.fit()\n","31be3331":"res2.summary()","b6bb7ff1":"from statsmodels.stats.outliers_influence import variance_inflation_factor","9b56b676":"vif = pd.DataFrame()\nvif['Features'] = ttrn[col].columns\nvif['VIF'] = [variance_inflation_factor(ttrn[col].values, i) for i in range(ttrn[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","f5698092":"col=col.drop('Unknown')","07bd6a27":"ttrn_sm=sm.add_constant(ttrn[col])\nlog_M3=sm.GLM(ttrny,ttrn_sm,family=sm.families.Binomial())\nres3=log_M3.fit()\nres3.summary()","6396cf36":"from statsmodels.stats.outliers_influence import variance_inflation_factor","1cbeda50":"vif = pd.DataFrame()\nvif['Features'] = ttrn[col].columns\nvif['VIF'] = [variance_inflation_factor(ttrn[col].values, i) for i in range(ttrn[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","bf7c29c9":"col=col.drop(\"G\")","a932c112":"ttrn_sm=sm.add_constant(ttrn[col])\nlog_M4=sm.GLM(ttrny,ttrn_sm,family=sm.families.Binomial())\nres4=log_M4.fit()\nres4.summary()","8f97900a":"from statsmodels.stats.outliers_influence import variance_inflation_factor","8f71e11d":"vif = pd.DataFrame()\nvif['Features'] = ttrn[col].columns\nvif['VIF'] = [variance_inflation_factor(ttrn[col].values, i) for i in range(ttrn[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","26a9e51e":"col=col.drop('Mr')","c8f3375c":"ttrn_sm=sm.add_constant(ttrn[col])\nlog_M4=sm.GLM(ttrny,ttrn_sm,family=sm.families.Binomial())\nres4=log_M4.fit()\nres4.summary()","064344e2":"from statsmodels.stats.outliers_influence import variance_inflation_factor","ef092f09":"vif = pd.DataFrame()\nvif['Features'] = ttrn[col].columns\nvif['VIF'] = [variance_inflation_factor(ttrn[col].values, i) for i in range(ttrn[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","49f4306e":"col=col.drop('Q')","57eff0c4":"ttrn_sm=sm.add_constant(ttrn[col])\nlog_M4=sm.GLM(ttrny,ttrn_sm,family=sm.families.Binomial())\nres4=log_M4.fit()\nres4.summary()","23c48ce3":"col","252af901":"y=res4.predict(ttrn_sm).values.reshape(-1)","e6dcdfa8":"pred_df=pd.DataFrame({'Survival':ttrny,\"Sur_Prob\":y})","d31593c3":"pred_df['Surv_pred']=pred_df['Sur_Prob'].apply(lambda x:0 if x<0.5 else 1)","3a0b2bc2":"pred_df.head()","ffcd2be3":"from sklearn import metrics","5acd4dcb":"print(metrics.accuracy_score(pred_df['Survival'],pred_df['Surv_pred']))","c5ce97a4":"cn=metrics.confusion_matrix(pred_df['Survival'],pred_df['Surv_pred'])","0c0fbf6c":"cn","6167d83b":"num=[float(k)\/10 for k in range(10)]\nfor i in num:\n    pred_df[i]=pred_df['Sur_Prob'].apply(lambda x:0 if x<i else 1)\npred_df.head()","750d2d0b":"cutoff_conv=pd.DataFrame(columns=['prob','accuracy','sens','spec'])\n\nfor i in num:\n    cnf=metrics.confusion_matrix(pred_df['Survival'],pred_df[i])\n    tot=sum(sum(cnf))\n    acc=(cnf[0,0]+cnf[1,1])\/tot\n    spec=cnf[0,0]\/(cnf[0,0]+cnf[0,1])\n    sens=cnf[1,1]\/(cnf[1,1]+cnf[1,0])\n    cutoff_conv.loc[i]=[i,acc,sens,spec]\nprint(cutoff_conv)","1f8747aa":"cutoff_conv.plot.line(x='prob',y=['accuracy','sens','spec'])","3d9b0a5c":"def drawroc(actual,probs):\n    fpr,tpr,thresholds=metrics.roc_curve(actual,probs,drop_intermediate=False)\n    auc_score=metrics.roc_auc_score(actual,probs)\n    plt.figure(figsize=(5,5))\n    plt.plot(fpr,tpr,label='ROC curve (area = %0.2f)' % auc_score)\n    plt.plot([0,1],[0,1],'k--')\n    plt.xlim([0.0,1.0])\n    plt.ylim([0.0,1.05])\n    plt.xlabel='False Positive Rate'\n    plt.ylabel='True Positive Rate'\n    plt.title('ROC')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n    return None","a10a8374":"fpr,tpr,thresholds=metrics.roc_curve(pred_df['Survival'],pred_df['Sur_Prob'],drop_intermediate=False)","0a9072bf":"drawroc(pred_df['Survival'],pred_df['Sur_Prob'])","4b34154e":"tsm=sm.add_constant(ttst)","dfadef97":"tsm.head()","4b81a98e":"col","b55ab1f7":"tsm=tsm[col]","2a966404":"tsm=sm.add_constant(tsm)","82beab49":"tsm.head()","76356f11":"ytest=res4.predict(tsm)","72ef07af":"test_df=pd.DataFrame({'PassengerId':PID,'Survived':ytest})","23fa7741":"test_df['Survived']=test_df['Survived'].apply(lambda x:0 if x<0.5 else 1)","db2efa73":"test_df.head()","08f3c4ee":"test_df.to_csv(\"F:\\iiit b\\Python\\submission.csv\",index=False)","6e2b80c6":"Treating the missing value in fair","542b057e":"### Finding Optimal Cut Off Point","4f17ed61":"##### Unknown has a high VIF which can be removed","2640a8c3":"Missing Values: Four columns seems to have missing values which are i) Age- 90 ~25% ii) Fare 1 iii) Cabin - 75% Missing Value","274fa4ac":"### ROC","27a7781b":"Assessing the model","158b9056":"### One Hot Encoding"}}