{"cell_type":{"f958d3b5":"code","28e14254":"code","1a822e3e":"code","4796a3f9":"code","f1a9968f":"code","868de8ff":"code","7e50436f":"code","339f010c":"code","5f3dd2d5":"code","99722c4b":"code","0cf4d6f7":"code","f5eb1c64":"code","0ffd5edc":"code","9588d15d":"code","50e4a946":"code","66a8f231":"code","4ee18995":"code","511404b7":"code","41ccc0fa":"code","9e841c55":"code","6b6fa056":"code","842e3c5f":"code","9d6271bd":"code","aeab04a2":"code","a797bbdd":"code","4eb1cba0":"code","af3e11e7":"code","ed14eb78":"code","415990c9":"code","97c8609d":"code","4b163041":"code","22d4f308":"code","42ec668c":"code","2f727a99":"code","dae37b46":"code","eafdbbb5":"code","fe4223a5":"code","5339c150":"code","4f5da79e":"code","b9862b2c":"code","6cff191b":"code","0c5ad49c":"code","65e30cb0":"code","17ec5cd0":"code","0e897216":"code","e0dd0866":"markdown","6b8bb3d9":"markdown","aaf86d4a":"markdown","b8d53b2b":"markdown","11abd952":"markdown","7b01117c":"markdown","31289c0a":"markdown","378c834f":"markdown","7b601683":"markdown","6eae2d2b":"markdown","9a8c3e79":"markdown","d3e84439":"markdown","6090464a":"markdown","0b6d624f":"markdown","747a202c":"markdown","69402ea5":"markdown","b9347c09":"markdown","3bc01675":"markdown","b8c15b67":"markdown","cf4b6ba9":"markdown","45b48207":"markdown","9fd84f1d":"markdown","c403da5e":"markdown","dbee5ea0":"markdown","19f07845":"markdown","8d9b0129":"markdown","cc943d7d":"markdown","d51b769e":"markdown"},"source":{"f958d3b5":"import warnings\nwarnings.filterwarnings('ignore')","28e14254":"import pandas as pd\npd.set_option('display.max_columns', None)\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\n\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import classification_report, confusion_matrix, auc, roc_auc_score, roc_curve, mean_squared_error\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression, Perceptron, SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom mlxtend.classifier import StackingCVClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\n\nfrom imblearn.under_sampling import NearMiss\nfrom imblearn.combine import SMOTETomek","1a822e3e":"data_df = pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")","4796a3f9":"data_df.shape","f1a9968f":"data_df.columns","868de8ff":"data_df.head()","7e50436f":"total = data_df.isnull().sum().sort_values(ascending = False)\npercent = (data_df.isnull().sum()\/data_df.isnull().count()*100).sort_values(ascending = False)\npd.concat([total, percent], axis=1, keys=['Total', 'Percent']).transpose()","339f010c":"data_df.Class.value_counts(normalize=True)*100","5f3dd2d5":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12,6))\ns = sns.boxplot(ax = ax1, x=\"Class\", y=\"Amount\", hue=\"Class\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"Class\", y=\"Amount\", hue=\"Class\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show();","99722c4b":"data_df.groupby(['Class'])['Amount'].agg({'min','max','mean','median','std'}).reset_index()","0cf4d6f7":"sns.scatterplot(x='Time', y='Amount', data=data_df[data_df['Class'] == 1])\nplt.show()","f5eb1c64":"sns.scatterplot(x='Time', y='Amount', data=data_df[data_df['Class'] == 0])\nplt.show()","0ffd5edc":"plt.figure(figsize=(20,8))\n\nax = sns.violinplot(x='Class', y='Amount', data=data_df)\n\nplt.show()","9588d15d":"plt.figure(figsize = (14,14))\nplt.title('Credit Card Transactions features correlation plot (Pearson)')\ncorr = data_df.corr()\nsns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,linewidths=.1,cmap=\"Reds\")\nplt.show()","50e4a946":"var = data_df.columns.values\n\ni = 0\nt0 = data_df.loc[data_df['Class'] == 0]\nt1 = data_df.loc[data_df['Class'] == 1]\n\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(8,4,figsize=(16,28))\n\nfor feature in var:\n    i += 1\n    plt.subplot(8,4,i)\n    sns.kdeplot(t0[feature], bw=0.5,label=\"Class = 0\")\n    sns.kdeplot(t1[feature], bw=0.5,label=\"Class = 1\")\n    plt.xlabel(feature, fontsize=12)\n    locs, labels = plt.xticks()\n    plt.tick_params(axis='both', which='major', labelsize=12)\nplt.show();","66a8f231":"target = 'Class'\npredictors = ['Time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\\\n       'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19',\\\n       'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28',\\\n       'Amount']","4ee18995":"X, y = data_df[predictors], data_df[target]\nX = np.array(X)\ny = np.array(y)","511404b7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","41ccc0fa":"scaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","9e841c55":"def show_model_report(x,y,model):\n    y_pred = model.predict(x)\n\n    print('Classification report:')\n    print(classification_report(y, y_pred))\n    print(\"-----------------------------------\\n\")\n    print('Confusion Metrix: ')\n    print(confusion_matrix(y, y_pred))\n    print(\"-----------------------------------\\n\")\n    print('Accuracy Score')\n    print(roc_auc_score(y, y_pred))\n    print(\"-----------------------------------\\n\")\n    \n    try:\n        y_pred = model.predict_proba(x)[:,1]\n        FPR, TPR, threshold = roc_curve(y, y_pred)\n        print(\"ROC AUC Score\")\n        print(roc_auc_score(y, y_pred))\n\n        #Plot ROC curve\n        plt.title('ROC Curve')\n        plt.plot(FPR, TPR)\n        plt.plot([0,1], ls ='--')\n        plt.plot([0,0], [1,0], c='.7'), plt.plot([1,1], c='.7')\n        plt.ylabel('True Positive Rate')\n        plt.xlabel('False Positive Rate')\n        plt.show()\n    except Exception as ex:\n        pass","6b6fa056":"lr_model = LogisticRegression()\nlr_model.fit(X_train, y_train)\n\n\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\n\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","842e3c5f":"lr_model = GaussianNB()\nlr_model.fit(X_train, y_train)\n\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","9d6271bd":"svc_model = SVC()\nsvc_model.fit(X_train, y_train)\n\nprint('\\n\\n')\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,svc_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,svc_model)","aeab04a2":"dt_model = DecisionTreeClassifier()\ndt_model.fit(X_train, y_train)\n\nprint('\\n\\n')\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,dt_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,dt_model)","a797bbdd":"rf_model = RandomForestClassifier()\nrf_model.fit(X_train, y_train)\n\n\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,rf_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,rf_model)","4eb1cba0":"et_model = ExtraTreeClassifier()\net_model.fit(X_train, y_train)\n\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,et_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,et_model)","af3e11e7":"abc_model = AdaBoostClassifier()\nabc_model.fit(X_train, y_train)\n\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,abc_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,abc_model)","ed14eb78":"xb_model = XGBClassifier()\nxb_model.fit(X_train, y_train)\n\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,xb_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,xb_model)","415990c9":"cb_model = CatBoostClassifier()\ncb_model.fit(X_train, y_train)\n\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,cb_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,cb_model)","97c8609d":"lgbc_model = LGBMClassifier()\nlgbc_model.fit(X_train, y_train)\n\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lgbc_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lgbc_model)","4b163041":"nm = NearMiss()\nX_us, y_us= nm.fit_sample(X_train,y_train)","22d4f308":"from collections import Counter\n\nprint('Original dataset shape {}'.format(Counter(y_train)))\nprint('Undersampled dataset shape {}' .format(Counter(y_us)))","42ec668c":"lr_model = LogisticRegression()\nlr_model.fit(X_us, y_us)\n\nprint(\"Undersampld data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_us,y_us,lr_model)\n\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\n\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","2f727a99":"lr_model = GaussianNB()\nlr_model.fit(X_us, y_us)\n\nprint(\"Undersampld data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_us,y_us,lr_model)\nprint('\\n\\n')\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","dae37b46":"lr_model = SVC()\nlr_model.fit(X_us, y_us)\n\nprint(\"Undersampld data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_us,y_us,lr_model)\nprint('\\n\\n')\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","eafdbbb5":"lr_model = DecisionTreeClassifier()\nlr_model.fit(X_us, y_us)\n\nprint(\"Undersampld data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_us,y_us,lr_model)\nprint('\\n\\n')\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","fe4223a5":"lr_model = RandomForestClassifier()\nlr_model.fit(X_us, y_us)\n\nprint(\"Undersampld data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_us,y_us,lr_model)\nprint('\\n\\n')\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","5339c150":"lr_model = ExtraTreeClassifier()\nlr_model.fit(X_us, y_us)\n\nprint(\"Undersampld data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_us,y_us,lr_model)\nprint('\\n\\n')\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","4f5da79e":"lr_model = AdaBoostClassifier()\nlr_model.fit(X_us, y_us)\n\nprint(\"Undersampld data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_us,y_us,lr_model)\nprint('\\n\\n')\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","b9862b2c":"lr_model = XGBClassifier()\nlr_model.fit(X_us, y_us)\n\nprint(\"Undersampld data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_us,y_us,lr_model)\nprint('\\n\\n')\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","6cff191b":"lr_model = CatBoostClassifier()\nlr_model.fit(X_us, y_us)\n\nprint(\"Undersampld data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_us,y_us,lr_model)\nprint('\\n\\n')\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","0c5ad49c":"lr_model = LGBMClassifier()\nlr_model.fit(X_us, y_us)\n\nprint(\"Undersampld data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_us,y_us,lr_model)\nprint('\\n\\n')\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train,y_train,lr_model)\nprint('\\n\\n')\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test,y_test,lr_model)","65e30cb0":"smk = SMOTETomek(random_state = 42)\nX_ov_smk, y_ov_smk = smk.fit_sample(X_train, y_train)","17ec5cd0":"print('Original dataset shape {}'.format(Counter(y_train)))\nprint('Undersampled dataset shape {}' .format(Counter(y_ov_smk)))","0e897216":"lr_model = LogisticRegression()\nlr_model.fit(X_ov_smk, y_ov_smk)\n\nprint(\"Oversampled data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_ov_smk, y_ov_smk, lr_model)\n\nprint(\"Train data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_train, y_train, lr_model)\n\nprint(\"Test data report\")\nprint(\"---------------------------------------\")\nshow_model_report(X_test, y_test, lr_model)","e0dd0866":"## SVC","6b8bb3d9":"## Let's Try Oversampling","aaf86d4a":"## Distribution of Amount between classes","b8d53b2b":"## RandomForestClassifier","11abd952":"## LGBMClassifier","7b01117c":"### Check for Fraud, Not Fraud transaction ration in given dataset","31289c0a":"## AdaboostClassifier","378c834f":"## LogisticRegression","7b601683":"## Logistic Regression","6eae2d2b":"## RandomForestClassifier","9a8c3e79":"There are 99.82% data belongs to not fraud and 0.17% data belong to fraud transaction.\n\nData is imbanalced","d3e84439":"## AdaboostClassifier","6090464a":"## Logistic Regression","0b6d624f":"**After Oversampling Recall for Test and Train data is .93 for Class Fraud**\n\n### We can Further try other algorithms as well","747a202c":"## GaussianNB","69402ea5":"## SVC","b9347c09":"## XGBClassifier","3bc01675":"## CatBoostClassifier","b8c15b67":"## XGBClassifier","cf4b6ba9":"## ExtraTreeClassifier","45b48207":"## DecisionTree","9fd84f1d":"## GaussianNB","c403da5e":"## ExtraTreeClassifier","dbee5ea0":"## Check for Null Values","19f07845":"## DecisionTree","8d9b0129":"## CatBoostClassifier","cc943d7d":"## Let's Try Undersampling","d51b769e":"## LGBMClassifier"}}