{"cell_type":{"502ebf7b":"code","9f0d35e6":"code","fe12fa1f":"code","95d8a88e":"code","c1389b8a":"code","fd584b5d":"code","c8d5fbe8":"code","5f3f7fc0":"code","9e80c9ab":"code","66bb85f0":"code","51935bb7":"code","a3a719ec":"code","4c6ce99e":"code","f045157d":"code","61564905":"code","50b08056":"code","2e0ba7ea":"code","ba18d5f5":"code","73edc039":"markdown","8978f41c":"markdown","76de4596":"markdown"},"source":{"502ebf7b":"from fastai.imports import *\nfrom fastai.structured import *\n\nfrom pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import display\n\nfrom sklearn import metrics","9f0d35e6":"PATH = '..\/input\/'\n!ls {PATH}","fe12fa1f":"df_raw = pd.read_csv(f'{PATH}Train\/Train.csv', low_memory=False, parse_dates=['saledate'])\ndf_raw.SalePrice = np.log(df_raw.SalePrice)\nadd_datepart(df_raw, 'saledate')\ntrain_cats(df_raw)\ndf, y, *rest = proc_df(df_raw, 'SalePrice')\ndf.head()","95d8a88e":"def split_vals(a, n): return a[:n].copy(), a[n:].copy()\n\nn_valid = 12000\nn_trn = len(df) - n_valid\nraw_train, raw_valid = split_vals(df_raw, n_trn)\nX_train, X_valid = split_vals(df, n_trn)\ny_train, y_valid = split_vals(y, n_trn)\n\nX_train.shape, y_train.shape, X_valid.shape","c1389b8a":"def rmse(x, y): return math.sqrt(((x-y)**2).mean())\n\ndef print_score(m):\n    res = [rmse(m.predict(X_train), y_train),\n          rmse(m.predict(X_valid), y_valid),\n          m.score(X_train, y_train),\n          m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_') :\n        res.append(m.oob_score_)\n        \n    print(res)\n    \nm = RandomForestRegressor(n_jobs=-1)\n%time m.fit(X_train, y_train)\nprint_score(m)","fd584b5d":"df_trn, y_trn, *rest = proc_df(df_raw, 'SalePrice', subset=30000)\nX_train, _ = split_vals(df_trn, 20000)\ny_train, _ = split_vals(y_trn, 20000)","c8d5fbe8":"m = RandomForestRegressor(n_jobs=-1)\n%time m.fit(X_train, y_train)\nprint_score(m)","5f3f7fc0":"m = RandomForestRegressor(n_estimators=1, max_depth=3, bootstrap=False, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","9e80c9ab":"draw_tree(m.estimators_[0], df_trn, precision=3)","66bb85f0":"m = RandomForestRegressor(n_estimators=1, bootstrap=False, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","51935bb7":"m = RandomForestRegressor(n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","a3a719ec":"preds = np.stack([t.predict(X_valid) for t in m.estimators_])\npreds[:, 0], np.mean(preds[:, 0]), y_valid[0]","4c6ce99e":"preds.shape","f045157d":"plt.plot([metrics.r2_score(y_valid, np.mean(preds[:i+1], axis=0)) for i in range(10)])","61564905":"m = RandomForestRegressor(n_estimators=40, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","50b08056":"df_trn, y_trn, *rest = proc_df(df_raw, 'SalePrice')\nX_train, X_valid = split_vals(df_trn, n_trn)\ny_train, y_valid = split_vals(y_trn, n_trn)","2e0ba7ea":"set_rf_samples(20000)","ba18d5f5":"m = RandomForestRegressor(n_estimators=40, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","73edc039":"# Single Tree ","8978f41c":"# Bagging ","76de4596":"# Speeding things up "}}