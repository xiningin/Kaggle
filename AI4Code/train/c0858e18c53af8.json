{"cell_type":{"1ed94ed7":"code","063f0bd4":"code","009185ea":"code","a964e657":"code","bfd46910":"code","eed4e62b":"code","aeff942a":"code","89576760":"code","b1318039":"code","d1d478fb":"code","f067baee":"code","2d538592":"code","80649106":"code","f9e7cc7e":"code","471afada":"code","da52120d":"code","9c00e1a5":"code","ce5287ae":"code","9e811e94":"code","30014d92":"code","14916e55":"code","64ed9c4b":"code","e770a172":"code","31fa4cf3":"code","3af87f2f":"code","71c494b8":"code","87a3094f":"code","d82f36c3":"code","823240a1":"code","3a7fe7e8":"code","72747110":"code","4107fcc5":"code","ea9453cd":"code","df2d661a":"code","90744238":"code","765d084d":"code","d4347511":"code","b358bff3":"code","d98d2052":"code","ba269edc":"code","83e10a91":"code","ea4453e0":"code","26535dc7":"code","b819a9de":"code","a9136935":"code","31433ce8":"code","6e2a2dd9":"code","488925fd":"code","9ee5d1a9":"code","1f0ee910":"code","c3fb7671":"code","8208ff52":"code","db2a0c70":"markdown","b55a9adf":"markdown","17128359":"markdown","54bfa1a9":"markdown","b1ec8e6e":"markdown","481a7272":"markdown","a07b6a08":"markdown","c9f678aa":"markdown","138601ec":"markdown","747c0f6c":"markdown","1141028c":"markdown","4ad1f110":"markdown","36d660c5":"markdown"},"source":{"1ed94ed7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","063f0bd4":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","009185ea":"df_train.head()","a964e657":"df_train.columns","bfd46910":"df_train.describe().T","eed4e62b":"df_train.info()","aeff942a":"plt.figure(figsize=(15,5))\nsns.countplot(df_train.Survived);","89576760":"plt.figure(figsize=(15,5))\nsns.countplot(df_train.Sex);","b1318039":"plt.figure(figsize=(15,5))\nsns.countplot(df_train.Pclass);","d1d478fb":"plt.figure(figsize=(15,5))\nsns.countplot(df_train.Embarked);","f067baee":"plt.figure(figsize=(15,5))\nsns.countplot(df_train.SibSp);","2d538592":"plt.figure(figsize=(15,5))\nsns.countplot(df_train.Parch);","80649106":"plt.figure(figsize=(15,5))\nsns.distplot(df_train.Age, hist=True, kde=True, color='r');\nplt.show()","f9e7cc7e":"plt.figure(figsize=(15,5))\nsns.distplot(df_train.Fare, hist=True, kde=True, color='g')\nplt.show()","471afada":"plt.figure(figsize=(15,5))\nsns.countplot(df_train.Sex, hue=df_train.Survived, palette='pastel');","da52120d":"plt.figure(figsize=(15,5))\nsns.countplot(df_train.Pclass, hue=df_train.Survived, palette='pastel');","9c00e1a5":"df = pd.concat([df_train, df_test])","ce5287ae":"df.isnull().sum()","9e811e94":"df[df['Embarked'].isnull()]","30014d92":"sns.catplot(x=\"Embarked\", y=\"Fare\", kind=\"box\", data=df);","14916e55":"df['Embarked'] = df[\"Embarked\"].fillna(\"C\")","64ed9c4b":"df[df['Fare'].isnull()]","e770a172":"df['Fare'] = df[\"Fare\"].fillna(df.Fare.mean())","31fa4cf3":"sns.distplot(df.Age);","3af87f2f":"df.Age.mean()","71c494b8":"df.Age.median()","87a3094f":"df['Age'] = df[\"Age\"].fillna(df.Age.mean())","d82f36c3":"df.head()","823240a1":"df = df.drop(['Name', \"PassengerId\", \"Ticket\", \"Cabin\"], axis=1)\ndf.head()","3a7fe7e8":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df[\"Sex\"])\ndf['Embarked'] = le.fit_transform(df['Embarked'])\ndf.head()","72747110":"train = df.iloc[0: (df.shape[0] - df_test.shape[0])]\ntest = df.iloc[df_train.shape[0]:]","4107fcc5":"X = train.drop(['Survived'], axis=1)\ny = train.Survived","ea9453cd":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()","df2d661a":"rf_params = {'n_estimators': [400,500,600,700],\n            'max_features': [5,6,7,8,9,10],\n            'min_samples_split':[5,6,7,8,9,10]}","90744238":"from sklearn.model_selection import GridSearchCV\nrf_cv_model = GridSearchCV(rf, rf_params, cv=21, n_jobs=-1, verbose=1).fit(X, y)\n","765d084d":"rf_cv_model","d4347511":"best_params = rf_cv_model.best_params_\nprint(best_params)","b358bff3":"rf = RandomForestClassifier(\n    max_features=best_params['max_features'], \n    min_samples_split=best_params['min_samples_split'], \n    n_estimators=best_params['n_estimators']\n).fit(X, y)","d98d2052":"y_pred_rf = rf.predict(X)","ba269edc":"from sklearn.metrics import accuracy_score\naccuracy_score(y, y_pred_rf)","83e10a91":"rf.feature_importances_","ea4453e0":"feature_imp = pd.Series(rf.feature_importances_,\n                       index=X.columns).sort_values(ascending=False)\nplt.figure(figsize=(10, 7))\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('De\u011fisken \u00d6nem Skorlar\u0131')\nplt.ylabel('De\u011fi\u015fkenler')\nplt.title('De\u011fi\u015fken \u00d6nem D\u00fczeyleri')\nplt.show()","26535dc7":"from sklearn.model_selection import cross_val_score\ncross_val_score(rf, X, y, cv=7).mean()","b819a9de":"from imblearn.metrics import classification_report_imbalanced, sensitivity_specificity_support\nprint('sensitivity and specificity:', sensitivity_specificity_support(y, y_pred_rf, average='micro', labels=pd.unique(df_train.Survived)))\nprint(classification_report_imbalanced(y, y_pred_rf))","a9136935":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y, y_pred_rf)\nsns.heatmap(cm, annot=True, fmt=\"d\", cbar=False)\nplt.title('Confusion Matrix')\nplt.savefig('con_mat')\nplt.show()","31433ce8":"from sklearn.metrics import roc_auc_score, roc_curve\nrf_roc_auc = roc_auc_score(y, rf.predict(X))\nfpr , tpr, thresholds = roc_curve(y, rf.predict_proba(X)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='AUC (area = %0.2f)' % rf_roc_auc)\nplt.plot([0,1], [0,1], 'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('FPR')\nplt.ylabel('TPR')\nplt.legend(loc='lower right')\nplt.show()","6e2a2dd9":"submission.head()","488925fd":"test.head()","9ee5d1a9":"test = test.drop(['Survived'], axis=1)","1f0ee910":"submission = df_test.PassengerId.copy().to_frame()\npredictions = rf.predict(test)","c3fb7671":"predictions = [int(i) for i in predictions]\nsubmission['Survived'] = predictions","8208ff52":"submission.to_csv(\"submission.csv\", index = False)","db2a0c70":"## Kernel Content\n\n1. [Load Data](#1)\n1. [Data Analysis](#2)\n1. [Basic Data Analysis](#3)\n1. [Random Forest](#4)\n1. [Test](#5)","b55a9adf":"<a id=4><\/a>\n## Random Forest","17128359":"## The columns of the data set\n\n1. PassengerId\n1. Survived: 0->Died 1->Alive\n1. Pclass: 1-> 1st Grade 2-> 2nd Grade 3-> 3rd Grade \n1. Name\n1. Sex\n1. Age \n1. SibSp: (number of) Siblings\/Spouses\n1. Parch: (number of) Parent\/Children\n1. Ticket\n1. Fare\n1. Cabin\n1. Embarked: C->Cherbourg, Q->Queenstown, S->Southampton\n\n## Variable Types\n1. Categorial Variable\n    Survived, Sex, Pclass, Embarked, Cabin, Name, Sibsn, Ticket and Parch\n2. Numerical Variable \n    Fare, Age, PassengerId","54bfa1a9":"<a id=1><\/a>\n## Data Read","b1ec8e6e":"### Categorical Variables\n\n1. Survived\n1. Sex \n1. Pclass \n1. Embarked\n1. Cabin\n1. Name \n1. Sibsn \n1. Parch\n1. Ticket\n","481a7272":"### Missing Values","a07b6a08":"The Name, Ticket and Cabin columns have unique values, so no visualization has been made.","c9f678aa":"<a id=5><\/a>\n## Test","138601ec":"## Univariate Variable Analysis","747c0f6c":"<a id=3><\/a>\n## Basic Data Analysis","1141028c":"<a id=2><\/a>\n## Data Analysis \n\n\n","4ad1f110":"### Numerical Variabels\n\n1. Fare\n1. Age \n1. PassengerId (Not visualized)","36d660c5":"* int64      [PassengerId, Survived, Pclass, SibSp, Parch]\n* float64                                      [Age, Fare]\n* object              [Name, Sex, Ticket, Cabin, Embarked]"}}