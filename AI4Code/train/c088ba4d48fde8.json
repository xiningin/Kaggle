{"cell_type":{"b694e911":"code","73ebfd9c":"code","3f6f0f58":"code","bcfb151d":"code","cb52d592":"code","1c1b363d":"code","3ea546b5":"code","fe860cfd":"code","c68dc433":"code","21d02e8b":"code","d47d21c6":"code","9d9562ff":"code","bd2b447c":"code","3bb4a913":"code","43236fe9":"code","49d80f35":"code","f363043d":"code","c9db5809":"code","bb3e256b":"code","76ffea9e":"code","f61e75fc":"code","31cacb0d":"code","7aa6e6da":"code","3df3fcd7":"code","0a35f228":"code","a38538f4":"code","aa52926e":"code","cd9a3590":"code","faf15e8c":"code","f40927db":"code","81284af1":"code","a4db0d38":"code","b00a4ff8":"code","fb9ecf84":"code","52200405":"code","187a5a08":"code","ce67336c":"markdown","02dc0b11":"markdown","f536edc5":"markdown","117bfbe1":"markdown","7b5e0e1e":"markdown","9e8c1f63":"markdown","1ee23c4c":"markdown","4bcaf724":"markdown","2a3e754e":"markdown","cf1ebc8f":"markdown","19874bbc":"markdown","6ca5b98d":"markdown","5984ca19":"markdown","e4b05038":"markdown","3115863c":"markdown","96d1af11":"markdown","a8ef5828":"markdown","da651205":"markdown","ac29dd50":"markdown","357274aa":"markdown","2e816b5d":"markdown","6fc63bea":"markdown","aa0a96c2":"markdown","10d9a155":"markdown","bf4288f1":"markdown","4c9df2f0":"markdown","7b2e7947":"markdown","f72ab3f4":"markdown"},"source":{"b694e911":"# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport folium","73ebfd9c":"# !ls -lt ..\/input\/corona-virus-report","3f6f0f58":"# importing datasets\nconf_df = pd.read_csv('..\/input\/corona-virus-report\/time_series_2019-ncov-Confirmed.csv')\ndeaths_df = pd.read_csv('..\/input\/corona-virus-report\/time_series_2019-ncov-Deaths.csv')\nrecv_df = pd.read_csv('..\/input\/corona-virus-report\/time_series_2019-ncov-Recovered.csv')","bcfb151d":"conf_df.head()\n# deaths_df.head()\n# recv_df.head()","cb52d592":"# conf_df.columns\n# deaths_df.columns\n# recv_df.columns","1c1b363d":"dates = ['1\/22\/20', '1\/23\/20', '1\/24\/20', '1\/25\/20', '1\/26\/20', '1\/27\/20', '1\/28\/20', \n         '1\/29\/20', '1\/30\/20', '1\/31\/20', '2\/1\/20', '2\/2\/20', '2\/3\/20', '2\/4\/20', \n         '2\/5\/20', '2\/6\/20', '2\/7\/20', '2\/8\/20', '2\/9\/20', '2\/10\/20', '2\/11\/20', '2\/12\/20', \n         '2\/13\/20', '2\/14\/20', '2\/15\/20', '2\/16\/20', '2\/17\/20', '2\/18\/20', '2\/19\/20']\n\nconf_df_long = conf_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Confirmed')\n\ndeaths_df_long = deaths_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Deaths')\n\nrecv_df_long = recv_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Recovered')\n\nfull_table = pd.concat([conf_df_long, deaths_df_long['Deaths'], recv_df_long['Recovered']], \n                       axis=1, sort=False)\nfull_table.head()","3ea546b5":"# converting to proper data format\nfull_table['Date'] = pd.to_datetime(full_table['Date'])\nfull_table['Recovered'] = full_table['Recovered'].astype('int')\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values with 0 in columns ('Confirmed', 'Deaths', 'Recovered')\nfull_table[['Confirmed', 'Deaths', 'Recovered']] = full_table[['Confirmed', 'Deaths', 'Recovered']].fillna(0)\nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('NA')\n\n# cases in the Diamond Princess cruise ship\nship = full_table[full_table['Province\/State']=='Diamond Princess cruise ship']\n\n# full table\nfull_table = full_table[full_table['Province\/State']!='Diamond Princess cruise ship']\nfull_table.head()","fe860cfd":"# full_table.info()","c68dc433":"# derived dataframes\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()","21d02e8b":"temp = full_latest.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered'].max()\ntemp.style.background_gradient(cmap='Pastel1_r')","d47d21c6":"# World wide\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[full_latest.iloc[i]['Lat'], full_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(full_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(full_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(full_latest.iloc[i]['Recovered']),\n        radius=int(full_latest.iloc[i]['Confirmed'])).add_to(m)\nm","9d9562ff":"temp_f = full_latest_grouped[['Country\/Region', 'Confirmed']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.head(10).style.background_gradient(cmap='Pastel1_r')","bd2b447c":"fig = px.choropleth(full_latest_grouped, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", range_color=[1,50], \n                    color_continuous_scale=\"Sunsetdark\", \n                    title='Countries with Confirmed Cases')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","3bb4a913":"temp_c = china_latest_grouped[['Province\/State', 'Confirmed']]\ntemp_c = temp_c.sort_values(by='Confirmed', ascending=False)\ntemp_c = temp_c.reset_index(drop=True)\ntemp_c.head(10).style.background_gradient(cmap='Pastel1_r')","43236fe9":"# China \nm = folium.Map(location=[30, 116], tiles='cartodbpositron',\n               min_zoom=2, max_zoom=5, zoom_start=3)\n\nfor i in range(0, len(china_latest)):\n    folium.Circle(\n        location=[china_latest.iloc[i]['Lat'], china_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(china_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(china_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(china_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(china_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(china_latest.iloc[i]['Recovered']),\n        radius=int(china_latest.iloc[i]['Confirmed'])**1).add_to(m)\nm","49d80f35":"temp_flg = full_latest_grouped[['Country\/Region', 'Deaths']]\ntemp_flg = temp_flg.sort_values(by='Deaths', ascending=False)\ntemp_flg = temp_flg.reset_index(drop=True)\ntemp_flg = temp_flg[temp_flg['Deaths']>0]\ntemp_flg.style.background_gradient(cmap='Pastel1_r')","f363043d":"fig = px.choropleth(full_latest_grouped[full_latest_grouped['Deaths']>0], \n                    locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country\/Region\", \n                    range_color=[1,50], color_continuous_scale=\"Peach\",\n                    title='Countries with Deaths Reported')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","c9db5809":"# Countries with all the cases recovered\ntemp = row_latest_grouped[row_latest_grouped['Confirmed']==row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","bb3e256b":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\ntemp = temp.sort_values('Date', ascending=False)\ntemp.head(1).style.background_gradient(cmap='Pastel1')","76ffea9e":"fig.update_traces?","f61e75fc":"def location(row):\n    if row['Country\/Region']=='China':\n        if row['Province\/State']=='Hubei':\n            return 'Hubei'\n        else:\n            return 'Other Chinese Provinces'\n    else:\n        return 'Rest of the World'\n\ntemp = full_latest.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp = temp.groupby('Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars='Region', value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             height=500, width=1000, text='Count', title='Hubei - China - World', \n             color_discrete_sequence= ['#EF553B', '#00CC96', '#636EFA'])\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","31cacb0d":"# Cases in the Diamond Princess Cruise Ship\ntemp = ship.sort_values(by='Date', ascending=False).head(1)\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","7aa6e6da":"# China \n\ntemp = ship[ship['Date'] == max(ship['Date'])].reset_index()\n\nm = folium.Map(location=[35.4437, 139.638], tiles='cartodbpositron',\n               min_zoom=8, max_zoom=12, zoom_start=10)\n\nfolium.Circle(location=[temp.iloc[0]['Lat'], temp.iloc[0]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Ship : '+str(temp.iloc[0]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[0]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[0]['Deaths'])+\n                    '<li><bold>Recovered : '+str(temp.iloc[0]['Recovered']),\n        radius=int(temp.iloc[0]['Confirmed'])**1).add_to(m)\nm","3df3fcd7":"# Number of Countries\/Regions to which COVID-19 spread\nprint(len(temp_f))","0a35f228":"# Number of Province\/State in Mainland China to which COVID-19 spread\nlen(temp_c)","a38538f4":"# Number of countries with deaths reported\nlen(temp_flg)","aa52926e":"formated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf = formated_gdf[formated_gdf['Country\/Region']!='China']\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(formated_gdf[formated_gdf['Country\/Region']!='China'], \n                     locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='Confirmed', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread outside China over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\n\n# -----------------------------------------------------------------------------------\n\nchina_map = china.groupby(['Date', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', \n                                                      'Lat', 'Long'].max()\nchina_map = china_map.reset_index()\nchina_map['size'] = china_map['Confirmed'].pow(0.5)\nchina_map['Date'] = pd.to_datetime(china_map['Date'])\nchina_map['Date'] = china_map['Date'].dt.strftime('%m\/%d\/%Y')\nchina_map.head()\n\nfig = px.scatter_geo(china_map, lat='Lat', lon='Long', scope='asia',\n                     color=\"size\", size='size', hover_name='Province\/State', \n                     hover_data=['Confirmed', 'Deaths', 'Recovered'],\n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread in China over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","cd9a3590":"c_spread = china[china['Confirmed']!=0].groupby('Date')['Province\/State'].unique().apply(len)\nc_spread = pd.DataFrame(c_spread).reset_index()\n\nfig = px.line(c_spread, x='Date', y='Province\/State', \n              title='Number of Provinces\/States\/Regions of China to which COVID-19 spread over the time')\nfig.show()","faf15e8c":"spread = full_table[full_table['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len)\nspread = pd.DataFrame(spread).reset_index()\n\nfig = px.line(spread, x='Date', y='Country\/Region', \n              title='Number of Countries\/Regions to which COVID-19 spread over the time')\nfig.show()","f40927db":"temp = full_table.groupby('Date').sum().reset_index()\ntemp.head()\n\n# adding two more columns\ntemp['No. of Deaths to 100 Confirmed Cases'] = round(temp['Deaths']\/temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 100 Confirmed Cases'] = round(temp['Recovered']\/temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 1 Death Case'] = round(temp['Recovered']\/temp['Deaths'], 3)\n\ntemp = temp.melt(id_vars='Date', \n                 value_vars=['No. of Deaths to 100 Confirmed Cases', \n                             'No. of Recovered to 100 Confirmed Cases', \n                             'No. of Recovered to 1 Death Case'], \n                 var_name='Ratio', \n                 value_name='Value')\nfig = px.line(temp, x=\"Date\", y=\"Value\", color='Ratio', \n              title='Recovery and Mortality Rate Over The Time')\nfig.show()","81284af1":"rl = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum()\nrl = rl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nrl.head().style.background_gradient(cmap='rainbow')\n\nncl = rl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Country\/Region\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             x=\"Country\/Region\", y=\"value\", color='variable', orientation='v', height=600,\n             # height=600, width=1000,\n             title='Number of Cases outside China')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()\n\n# ------------------------------------------\n\ncl = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum()\ncl = cl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\n# cl.head().style.background_gradient(cmap='rainbow')\n\nncl = cl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Province\/State\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             y=\"Province\/State\", x=\"value\", color='variable', orientation='h', height=800,\n             # height=600, width=1000,\n             title='Number of Cases in China')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","a4db0d38":"gdf = gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngdf = gdf.reset_index()","b00a4ff8":"temp = gdf[gdf['Country\/Region']=='China'].reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n            title='Cases in China')\nfig.show()","fb9ecf84":"temp = gdf[gdf['Country\/Region']!='China'].groupby('Date').sum().reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n             title='Cases Outside China')\nfig.show()","52200405":"fig = px.treemap(china_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Confirmed\", title='Number of Confirmed Cases in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\nfig = px.treemap(china_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Deaths\", title='Number of Deaths Reported in Chinese Provinces',\n                color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\nfig = px.treemap(china_latest.sort_values(by='Recovered', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Recovered\", title='Number of Recovered Cases in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()","187a5a08":"fig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Confirmed\", \n                 title='Number of Confirmed Cases outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Deaths\", \n                 title='Number of Deaths outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Recovered\", \n                 title='Number of Recovered Cases outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()","ce67336c":"* Massive number of cases are reported in Mainland China Compared to reset of the world\n* The next few countries are infact are the neighbours of China","02dc0b11":"## Countries with all the cases recovered","f536edc5":"## Current Situation","117bfbe1":"* During the first few weeks the there were more Deaths reported per day than Recoverd cases\n* Over the time that has changed drastically\n* Although the death rate hasn't come down, the number of recovered cases has defenitly increased","7b5e0e1e":"# Import Dataset","9e8c1f63":"# Visual EDA","1ee23c4c":"# Import Libraries","4bcaf724":"## Diamond Princess Cruise ship Status","2a3e754e":"## Spread Across the Globe","cf1ebc8f":"* Outside China, there hasn't been a lot of deaths due to COVID-19 has reported","19874bbc":"## Hubei - China - World","6ca5b98d":"## Most Recent Stats","5984ca19":"# Data Wrangling","e4b05038":"## Top 10 Provinces in China with most no. of reported cases","3115863c":"## Recovery and Mortality Rate Over The Time","96d1af11":"## Count of Cases","a8ef5828":"## Number of Places to which COVID-19 Spread","da651205":"* COVID-19 spread to all the provinces of the China really fast and early","ac29dd50":"# EDA","357274aa":"## Proportion of Cases","2e816b5d":"* Number of countries to which COVID-19 spread hasn't increased that much after first few weeks","6fc63bea":"# Data Cleaning and Preprocessing","aa0a96c2":"* There are more recovered cases than deaths at this point of time","10d9a155":"## Proportion of Cases","bf4288f1":"## Countries with deaths reported","4c9df2f0":"* Even in China most of the cases reported are from a particular Province Hubei.  \n* It is no surprise, because Hubei's capital is **Wuhan**, where the the first cases are reported","7b2e7947":"* The Diamond Princess cruise ship was carrying 3,711 passengers and crew on board\n* Ship arrived in Yokohama, near Tokyo, on February 3\n* [https:\/\/www.princess.com\/news\/notices_and_advisories\/notices\/diamond-princess-update.html](https:\/\/www.princess.com\/news\/notices_and_advisories\/notices\/diamond-princess-update.html)","f72ab3f4":"## Top 10 Countries with most no. of reported cases"}}