{"cell_type":{"be59a1c0":"code","eb168ea2":"code","7032e60c":"code","75cab1ca":"code","16130b5f":"code","7cd1ea5b":"code","91d2fa06":"code","95b06237":"code","15a566d9":"code","d72325b1":"code","f6dfdf48":"code","06aa559f":"code","1462b96c":"code","6ff851b3":"code","a2515a3a":"code","ba8a7c28":"code","8db503ef":"code","941f3132":"code","c6eedb89":"code","915a4ffb":"code","8e1c3b89":"code","353635c6":"code","5dc06c0b":"code","963e8aa4":"code","a1221813":"code","74e2af06":"code","1cd89b43":"code","1b192d13":"code","599ded08":"code","ebd3bc94":"code","19b79d72":"code","b0b74b8f":"code","355fb807":"code","806d6475":"code","53781ae9":"code","105d77db":"code","1c468203":"code","0f6dbde4":"code","62bd414b":"code","0fbe7596":"code","fbabe787":"code","2b2c16aa":"code","66355561":"code","c1737c09":"code","c5b8113c":"code","8bdcac8c":"code","7dbd9a00":"code","53669df5":"code","191d02e6":"code","c0dde090":"code","93946b14":"markdown","f8490c10":"markdown","400d0933":"markdown","fe0291f7":"markdown","b9237715":"markdown","8d598d58":"markdown","c455132d":"markdown","b97b1fa4":"markdown","851d36dc":"markdown","83d4a3ad":"markdown","95f0e9dd":"markdown","fbbd99d4":"markdown","04251abe":"markdown","8973aea0":"markdown","14c3a413":"markdown","34e0cc77":"markdown","d44009af":"markdown"},"source":{"be59a1c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb168ea2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm, skew\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nfrom scipy.special import boxcox1p\nimport warnings\n\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler, LabelEncoder\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline\npd.set_option('display.max_columns', None)","7032e60c":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","75cab1ca":"df_train.head()","16130b5f":"df_train.shape","7cd1ea5b":"df_test.head()","91d2fa06":"df_test.shape","95b06237":"df_train.columns","15a566d9":"df_test.columns","d72325b1":"print(df_train['SalePrice'].describe())","f6dfdf48":" sns.distplot(df_train['SalePrice'])","06aa559f":"print(\"Skewness: %f\" % df_train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % df_train['SalePrice'].kurt())","1462b96c":"df_train['SalePrice'] = np.log1p(df_train['SalePrice'])","6ff851b3":"var = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nplt.scatter(x=data[var], y=data['SalePrice'])\nprint(data[:5])\nplt.show()","a2515a3a":"var = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nplt.scatter(x=data[var], y=data['SalePrice'])\nprint(data.head())\nplt.show()","ba8a7c28":"var = 'OverallQual'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nsns.boxplot(x=data[var], y=data['SalePrice'])","8db503ef":"var = 'YearBuilt'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nsns.boxplot(x=data[var], y=data['SalePrice'])","941f3132":"corrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat)","c6eedb89":"k = 10\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nf, ax = plt.subplots(figsize=(10, 7))\nsns.heatmap(cm, annot=True, square=True, fmt='.2f', annot_kws={'size': 10},\n            yticklabels=cols.values, xticklabels=cols.values)","915a4ffb":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df_train[cols])","8e1c3b89":"y_train = df_train['SalePrice']\nntrain = df_train.shape[0]\nntest = df_test.shape[0]\ntest_id = df_test['Id']\nall_data = pd.concat([df_train, df_test], axis=0, sort=False)\nall_data = all_data.drop(['Id', 'SalePrice'], axis=1)","353635c6":"total = all_data.isnull().sum().sort_values(ascending=False)\npercent = (all_data.isnull().sum() \/ all_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(40)","5dc06c0b":"all_data.drop((missing_data[missing_data['Total'] > 5]).index, axis=1, inplace=True)\nprint(all_data.isnull().sum().max())\nprint(all_data.info())","963e8aa4":"total = all_data.isnull().sum().sort_values(ascending=False)\npercent = (all_data.isnull().sum() \/ all_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","a1221813":"print(ntrain)\nprint(ntest)\nprint(all_data.shape)\nprint(all_data.columns)","74e2af06":"for col in ('GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","1cd89b43":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","1b192d13":"all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","599ded08":"all_data.drop(['Utilities'], axis=1, inplace=True)","ebd3bc94":"all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","19b79d72":"all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","b0b74b8f":"all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])","355fb807":"all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","806d6475":"all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","53781ae9":"total = all_data.isnull().sum().sort_values(ascending=False)\npercent = (all_data.isnull().sum() \/ all_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(5)","105d77db":"print(ntrain)\nprint(ntest)\nprint(all_data.shape)\nprint(all_data.columns)","1c468203":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\nprint(all_data.shape)","0f6dbde4":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\nprint(len(numeric_feats))\nprint(numeric_feats)","62bd414b":"skewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","0fbe7596":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))","fbabe787":"skewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)","2b2c16aa":"all_data.head()","66355561":"all_data = pd.get_dummies(all_data)\nall_data.shape","c1737c09":"train = all_data[:ntrain]\ntest = all_data[ntrain:]\nprint(train.shape)\nprint(test.shape)","c5b8113c":"from sklearn.metrics import make_scorer\nfrom sklearn.model_selection import KFold\nscorer = make_scorer(mean_squared_error,greater_is_better = False)\ndef rmse_CV_train(model):\n    kf = KFold(5,shuffle=True,random_state=42).get_n_splits(train.values)\n    rmse = np.sqrt(-cross_val_score(model, train, y_train,scoring =\"neg_mean_squared_error\",cv=kf))\n    return (rmse)\ndef rmse_CV_test(model):\n    kf = KFold(5,shuffle=True,random_state=42).get_n_splits(train.values)\n    rmse = np.sqrt(-cross_val_score(model, test, y_test,scoring =\"neg_mean_squared_error\",cv=kf))\n    return (rmse)","8bdcac8c":"# XGBoost\nmodel_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","7dbd9a00":"model_xgb.fit(train, y_train)","53669df5":"y_pred = np.floor(np.expm1(model_xgb.predict(test)))","191d02e6":"y_pred","c0dde090":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = y_pred\nsub.to_csv('finalsubmission.csv',index=False)","93946b14":"# Exploring the correlations between the target and the rest of the features","f8490c10":"#### Handle the skewness of the target feature","400d0933":"### There is no Strong relation between the (year built) and the (sale price)","fe0291f7":"# Handling the rest of the null values","b9237715":"# Missing Values","8d598d58":"# Encode Categorical data","c455132d":"### This looks like a there is a linear realtionship between (Sale Price) and (Total Basement, GrLiveArea)","b97b1fa4":"#### It seems like there is a positive skewness in the target feature (Sale Price)","851d36dc":"### Drop any columns that contains more than 5 null values and keep the rest","83d4a3ad":"# Analyze the data","95f0e9dd":"# Features engineering\n### Conatenate all the features toegther to make the engineering more easy and drop the Id and Sale Price features","fbbd99d4":"## Create a new feature","04251abe":"## Exploring some realtionships between the target and some features","8973aea0":"# Modelling","14c3a413":"### Focus on the top 10 features and make some analysis","34e0cc77":"# Take a look at the data","d44009af":"# Handle The Skewness in the data"}}