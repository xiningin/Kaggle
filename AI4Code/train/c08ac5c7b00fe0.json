{"cell_type":{"cb2d54ab":"code","641bfdfb":"code","86498d52":"code","b46b3e45":"code","67792169":"code","f6782a20":"code","8ef9c65d":"code","6b9f6426":"code","ce71c140":"code","2a6d41b1":"code","45483afc":"code","cbbfb4e3":"code","7d81230f":"code","0b6a40c9":"code","ea134390":"code","c1bd8734":"code","90e0905c":"code","3fdf9288":"code","e1189354":"code","84555942":"code","c79ee43e":"code","dd5904f8":"code","1d455689":"code","f1f94ae4":"code","ae6c46d2":"code","87f9f672":"code","08bd37fc":"code","d4c70bd3":"code","2dbdef50":"code","4602a53e":"code","cb71d103":"code","091c3f9c":"code","e21ec3a8":"code","190bfd92":"code","ce55f398":"code","d19cc726":"code","b7c5f3be":"code","8410d699":"code","75b90cad":"code","9c6df2cc":"code","7e343e0b":"code","23637fb7":"code","3d5adec2":"code","bb12d00a":"code","fb38e283":"code","76fd7e3e":"code","c9991bbe":"code","4f6203bc":"code","3eaf6604":"markdown"},"source":{"cb2d54ab":"### Keras and Tensorflow >2.0","641bfdfb":"### Data Collection\nimport pandas as pd","86498d52":"df = pd.read_csv('..\/input\/apple-stock-prices-20152020\/AAPL.csv')","b46b3e45":"df.to_csv('AAPL.csv')","67792169":"import pandas as pd","f6782a20":"df=pd.read_csv('AAPL.csv')","8ef9c65d":"df.head()","6b9f6426":"df.tail()","ce71c140":"df1=df.reset_index()['close']","2a6d41b1":"df1","45483afc":"import matplotlib.pyplot as plt\nplt.plot(df1)","cbbfb4e3":"### LSTM are sensitive to the scale of the data. so we apply MinMax scaler ","7d81230f":"import numpy as np","0b6a40c9":"df1","ea134390":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ndf1=scaler.fit_transform(np.array(df1).reshape(-1,1))","c1bd8734":"print(df1)","90e0905c":"##splitting dataset into train and test split\ntraining_size=int(len(df1)*0.65)\ntest_size=len(df1)-training_size\ntrain_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]","3fdf9288":"training_size,test_size","e1189354":"train_data","84555942":"import numpy\n# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n\tdataX, dataY = [], []\n\tfor i in range(len(dataset)-time_step-1):\n\t\ta = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n\t\tdataX.append(a)\n\t\tdataY.append(dataset[i + time_step, 0])\n\treturn numpy.array(dataX), numpy.array(dataY)","c79ee43e":"# reshape into X=t,t+1,t+2,t+3 and Y=t+4\ntime_step = 100\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, ytest = create_dataset(test_data, time_step)","dd5904f8":"print(X_train.shape), print(y_train.shape)","1d455689":"print(X_test.shape), print(ytest.shape)","f1f94ae4":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)","ae6c46d2":"### Create the Stacked LSTM model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","87f9f672":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')\n","08bd37fc":"model.summary()","d4c70bd3":"model.summary()","2dbdef50":"model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)","4602a53e":"import tensorflow as tf","cb71d103":"tf.__version__","091c3f9c":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)","e21ec3a8":"##Transformback to original form\ntrain_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","190bfd92":"### Calculate RMSE performance metrics\nimport math\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train,train_predict))","ce55f398":"### Test Data RMSE\nmath.sqrt(mean_squared_error(ytest,test_predict))","d19cc726":"### Plotting \n# shift train predictions for plotting\nlook_back=100\ntrainPredictPlot = numpy.empty_like(df1)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = numpy.empty_like(df1)\ntestPredictPlot[:, :] = numpy.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict\n# plot baseline and predictions\nplt.plot(scaler.inverse_transform(df1))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","b7c5f3be":"len(test_data)","8410d699":"x_input=test_data[341:].reshape(1,-1)\nx_input.shape\n","75b90cad":"temp_input=list(x_input)\ntemp_input=temp_input[0].tolist()","9c6df2cc":"temp_input","7e343e0b":"# demonstrate prediction for next 10 days\nfrom numpy import array\n\nlst_output=[]\nn_steps=100\ni=0\nwhile(i<30):\n    \n    if(len(temp_input)>100):\n        #print(temp_input)\n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        #print(x_input)\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    \n\nprint(lst_output)","23637fb7":"day_new=np.arange(1,101)\nday_pred=np.arange(101,131)","3d5adec2":"import matplotlib.pyplot as plt","bb12d00a":"len(df1)","fb38e283":"plt.plot(day_new,scaler.inverse_transform(df1[1158:]))\nplt.plot(day_pred,scaler.inverse_transform(lst_output))","76fd7e3e":"df3=df1.tolist()\ndf3.extend(lst_output)\nplt.plot(df3[1200:])","c9991bbe":"df3=scaler.inverse_transform(df3).tolist()","4f6203bc":"plt.plot(df3)","3eaf6604":"### Stock Market Prediction And Forecasting Using Stacked LSTM"}}