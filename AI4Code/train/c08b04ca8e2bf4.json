{"cell_type":{"4b0e1d5a":"code","cae7c28b":"code","c902169e":"code","4ae7523e":"code","e2e313c8":"code","e5061d7b":"code","9744bf6e":"code","26630060":"code","b29d0711":"code","bafef6cf":"code","50e8ca49":"code","4fd8fcbe":"code","f249b8db":"code","3ff613c2":"code","d0581bcd":"code","8aa105e5":"code","6a4a8490":"code","9ac69fba":"code","2ce0ea03":"code","1b795ef3":"code","8a63390f":"code","c8b2924a":"code","7e5720bd":"code","cb97d6d7":"code","0233c482":"code","57ab1638":"code","9c6cab11":"code","0feaa823":"code","30143726":"code","ff620d02":"code","a694152b":"code","91e09f21":"code","7e6f9e3b":"code","72dc1689":"code","2993c1dc":"code","18561931":"code","2a55a46c":"markdown","057a6ce5":"markdown","757c9d8c":"markdown","e52bdd58":"markdown","08016ccc":"markdown","292a87ff":"markdown","3588562b":"markdown","4a97bc0f":"markdown","b3b591e6":"markdown","fc749a0b":"markdown","659b996e":"markdown","cd034aa1":"markdown","08ece224":"markdown","a69a84cb":"markdown","a59c3a11":"markdown"},"source":{"4b0e1d5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cae7c28b":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","c902169e":"train.head()","4ae7523e":"train.info()","e2e313c8":"train.isnull()","e5061d7b":"# Lets check the patterns of null values in the dataset\nsns.heatmap(train.isnull(), yticklabels = False, cbar = False)","9744bf6e":"# Lets see the ratio of survived and death of passengers\nsns.set_style('whitegrid')\nsns.countplot(x = 'Survived', data = train)","26630060":"# Lets see which Ticket class has more survival rate\nsns.countplot(x = 'Survived', hue = 'Pclass', data = train)","b29d0711":"# Lets see which gender has higher survival rate\nsns.countplot(x = 'Survived', hue = 'Sex', data = train)","bafef6cf":"# Lets see the distribution of passengers in terms of age\ntrain['Age'].plot.hist(bins = 35)","50e8ca49":"sns.heatmap(train.isnull(), yticklabels = False, cbar = False)","4fd8fcbe":"sns.heatmap(test.isnull(), yticklabels = False, cbar = False)","f249b8db":"train['Age'] = train['Age'].fillna(value = train['Age'].mean())\ntest['Age'] = test['Age'].fillna(value = test['Age'].mean())","3ff613c2":"# Lets check the patterns again\nsns.heatmap(train.isnull(), yticklabels = False, cbar = False)","d0581bcd":"sns.heatmap(test.isnull(), yticklabels = False, cbar = False)","8aa105e5":"train.head()","6a4a8490":"# Dropping the columns that are not required\ntrain = train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1)\ntest = test.drop(['Name', 'Ticket', 'Cabin'], axis = 1)","9ac69fba":"train.head()","2ce0ea03":"test.head()","1b795ef3":"sns.heatmap(train.isnull(), yticklabels = False, cbar = False)\n# No null values left","8a63390f":"sns.heatmap(test.isnull(), yticklabels = False, cbar = False)","c8b2924a":"test['Fare'].isna().sum()","7e5720bd":"test['Fare'] = test['Fare'].fillna(value = test['Fare'].mean())","cb97d6d7":"test['Fare'].isna().sum()","0233c482":"sns.heatmap(test.isnull(), yticklabels = False, cbar = False)","57ab1638":"# sex = pd.get_dummies(train['Sex'], drop_first = True)\n# embark = pd.get_dummies(train['Embarked'], drop_first = True)\nfrom sklearn.preprocessing import LabelEncoder\n\nlabel_encode = LabelEncoder()\ntrain['Sex'] = label_encode.fit_transform(train['Sex'])\ntrain['Embarked'] = label_encode.fit_transform(train['Embarked'])","9c6cab11":"train.head()","0feaa823":"test.head()","30143726":"\ntest['Sex'] = label_encode.fit_transform(test['Sex'])\ntest['Embarked'] = label_encode.fit_transform(test['Embarked'])","ff620d02":"test.head()","a694152b":"X_train = train.drop('Survived', axis = 1)\ny_train = train['Survived']\nX_test = test.drop('PassengerId', axis = 1).copy()","91e09f21":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)","7e6f9e3b":"y_pred_test = rfc.predict(X_test)\nrfc_score = rfc.score(X_train, y_train)\nrfc_score","72dc1689":"submission = pd.DataFrame({\n    'PassengerId': test['PassengerId'],\n    'Survived': y_pred_test\n})","2993c1dc":"submission","18561931":"submission.to_csv('submission.csv', index = False)","2a55a46c":"Lets check if there is any null values or not","057a6ce5":"The male gender has low survival rate.","757c9d8c":"There is one null value in Fare column so lets again fill up the null values of Fare column","e52bdd58":"The Third Ticket class has highest mortality rate.","08016ccc":"As, we can see that there are null values in age and cabin columns. We need to do something for it.\nBut before that lets play around the data relationships among the columns","292a87ff":"As we can see there are some null values within the dataset.","3588562b":"If we try to categorize the columns that are not that much important to analyze the survival rate while implementing in the model, then we can \nsee that the 'PassengerId', 'Name', 'Ticket', 'Cabin' will not provide much help. So, we can reduce those columns","4a97bc0f":"As we can see that there are no null values remaining in Age columns. The only column have null values is Cabin column.","b3b591e6":"There were passengers of range (18 - 35) years old in high ratio overall approximately.\nNow, lets check the null values patterns of dataset again","fc749a0b":"As, we can see that both train and test dataset have null values in AGE and CABIN columns.\nIn order to fill the null values in age columns, we can inject mean values of AGE columns replacing the null values so that the overall mean doesn't change while erasing the null values.","659b996e":"Now, we have two columns named Sex and Embarked which are not in numerical. We can convert those categorical values in numerical values.\nKeep in mind, the Sex column only consists of male and female. We can take 'male' as 1 and 0 as female. The embarked has three values as Q,S,C. We can those as 0, 1, 2.","cd034aa1":"It looks like more death occured than total survials.","08ece224":"Lets perform the same code for test dataset also","a69a84cb":"Here, we can see that there is few null values in Fare left","a59c3a11":"As, we have new columns representing the numerical values for sex and embarked columns, so we no longer need the categorical columns. So, lets drop the Sex and Embarked columns"}}