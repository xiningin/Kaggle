{"cell_type":{"12565286":"code","d475d844":"code","cf2d9218":"code","f141431b":"code","7ebf5928":"code","29a641b4":"code","a1d78065":"code","afae63b7":"code","cef472d2":"code","68b67db2":"code","05981746":"code","07a4bc0f":"code","28f050a8":"code","8d92fdee":"code","619ffe2f":"code","142a5216":"code","022578cb":"code","54847ae7":"code","ae6d7246":"markdown","6bc1375e":"markdown","c4b188f6":"markdown","fb99ffc7":"markdown","085fce66":"markdown","892c3ac1":"markdown"},"source":{"12565286":"from shutil import copyfile\n\ncopyfile(src = \"..\/input\/img2vector\/img_to_vec.py\", dst = \".\/img_to_vec.py\")\n\nfrom img_to_vec import *","d475d844":"import numpy as np\nimport pandas as pd\nimport os\nimport torch\nfrom PIL import Image\nfrom tqdm import tqdm, tqdm_notebook \n\nfrom xgboost import XGBRegressor","cf2d9218":"TRAIN_PATH = \"..\/input\/petfinder-pawpularity-score\/train.csv\"\nTEST_PATH = \"..\/input\/petfinder-pawpularity-score\/test.csv\"\nTRAIN_IMAGE_FOLDER = \"..\/input\/petfinder-pawpularity-score\/train\"\nTEST_IMAGE_FOLDER = \"..\/input\/petfinder-pawpularity-score\/test\"\n\nSAMPLE_SUBMISSION_PATH = \"..\/input\/petfinder-pawpularity-score\/sample_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"Id\"\nTARGET = \"Pawpularity\"\nIMAGE_TYPE = 'jpg'\nTREE_METHOD = 'gpu_hist'\nPROJECT_NAME = \"Petfinder\"","f141431b":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)","7ebf5928":"def fe_ima2vec(df, img_path, img_col, filename_extension):\n    \n    img2vec = Img2Vec(cuda=(torch.cuda.is_available()))\n    \n    fe_img = []\n    for idx in tqdm(range(len(df))):\n        img = Image.open(f'{img_path}\/{df.loc[idx, img_col]}.{filename_extension}')\n        vec = img2vec.get_vec(img)\n        fe_img.append(vec)\n    \n    fe_img = pd.DataFrame(fe_img)\n    fe_img.columns = ['img_vec_' + str(i) for i in range(fe_img.shape[1])]\n    return fe_img","29a641b4":"fe_train = fe_ima2vec(train, TRAIN_IMAGE_FOLDER, ID, IMAGE_TYPE)\nfe_train.head()","a1d78065":"fe_test = fe_ima2vec(test, TEST_IMAGE_FOLDER, ID, IMAGE_TYPE)\nfe_test.head()","afae63b7":"fe_train.columns","cef472d2":"fe_train.shape,train.shape","68b67db2":"fe_test.shape,test.shape","05981746":"new_train = pd.concat([train,fe_train],axis=1)\nnew_test = pd.concat([test,fe_test],axis=1)\nnew_train.shape,new_test.shape","07a4bc0f":"def getLabelCount(df,target):\n    return sorted([( labelValue,len(train.loc[df[target] == labelValue]) ) for labelValue in df[target].unique()])\n\ngetLabelCount(new_train,TARGET)","28f050a8":"new_train.to_csv(\"new_train.csv\",index=False)\nnew_test.to_csv(\"new_test.csv\",index=False)","8d92fdee":"from sklearn.model_selection import StratifiedKFold\nimport seaborn as sns\ndef makeNFoldCSV(df,target_col,project_name,nFold=5,folder_col_name=\"Fold\",seed=2021,shuffle=True):\n    skf = StratifiedKFold(n_splits=nFold,random_state=seed, shuffle=shuffle)\n    skfSplit = skf.split(df, df[target_col])\n    fold = 1\n    for train_index, test_index in skfSplit:\n        df.loc[test_index,folder_col_name] = fold\n        fold = fold + 1\n\n    df = df.astype({folder_col_name: 'int64'})\n    csv_name = project_name + \"_\" + str(nFold) + \"folds.csv\"\n    df.to_csv(csv_name,index = False)\n    \ndef getFoldCount(df,col=\"Fold\"):\n    return sorted([( colValue,len(train.loc[df[col] == colValue]) ) for colValue in df[col].unique()])","619ffe2f":"makeNFoldCSV(new_train,TARGET,PROJECT_NAME)\nfold_csv = pd.read_csv(\".\/Petfinder_5folds.csv\")\nprint(getFoldCount(fold_csv))\nax = sns.countplot(data=fold_csv,y=\"Fold\")","142a5216":"makeNFoldCSV(new_train,TARGET,PROJECT_NAME,nFold = 4)\nfold_csv = pd.read_csv(\".\/Petfinder_4folds.csv\")\nprint(getFoldCount(fold_csv))\nax = sns.countplot(data=fold_csv,y=\"Fold\")","022578cb":"makeNFoldCSV(new_train,TARGET,PROJECT_NAME,nFold = 10)\nfold_csv = pd.read_csv(\".\/Petfinder_10folds.csv\")\nprint(getFoldCount(fold_csv))\nax = sns.countplot(data=fold_csv,y=\"Fold\")","54847ae7":"makeNFoldCSV(new_train,TARGET,PROJECT_NAME,nFold = 20)\nfold_csv = pd.read_csv(\".\/Petfinder_20folds.csv\")\nprint(getFoldCount(fold_csv))\nax = sns.countplot(data=fold_csv,y=\"Fold\")","ae6d7246":"# 5 fold","6bc1375e":"# 4 fold","c4b188f6":"# 20 fold","fb99ffc7":"# 10 fold","085fce66":"# image + data  => new dataframe ","892c3ac1":"reference notebook : https:\/\/www.kaggle.com\/rhythmcam\/function-make-training-folds-csv"}}