{"cell_type":{"00788594":"code","8b6eaf1d":"code","207cd39b":"code","ced6a0b4":"code","c459ad1c":"code","faabaefd":"code","0121c117":"code","0f683cda":"code","e7fed4a6":"code","96dffb32":"code","c454501a":"code","5b2e21b7":"code","07587242":"code","72da05f3":"markdown","4d0fe3d9":"markdown","87d9253e":"markdown","da1a16eb":"markdown","94ba8c04":"markdown","5ef77bfc":"markdown","97c158c2":"markdown","e485d56f":"markdown","7dba1c3f":"markdown"},"source":{"00788594":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b6eaf1d":"import pandas as pd\nprint(pd.__version__)","207cd39b":"df = pd.read_json(\"https:\/\/data.smcgov.org\/resource\/mb6a-xn89.json\")\n\ndf.head(5)","ced6a0b4":"df.shape","c459ad1c":"df.describe()\n","faabaefd":"df.dtypes","0121c117":"df.bachelor_s_degree_or_higher.mean()","0f683cda":"df.geography.count()","e7fed4a6":"df.geography_type.unique()","96dffb32":"df.less_than_high_school_graduate.value_counts()","c454501a":"def mapGeography(x):\n    if x == \"City\":\n        return 1\n    else:\n        return 0\n\n","5b2e21b7":"df['geography_mapped_value'] = df.geography_type.apply(mapGeography)\n\ndf.geography_mapped_value.value_counts()","07587242":"df['geography_mapped_value_lambda'] = df.geography_type.apply(lambda y: 1 if y == \"City\" else 0)\n\ndf.geography_mapped_value_lambda.value_counts()","72da05f3":"# Mapping Functions to Transform Data","4d0fe3d9":"# TO get count of geography","87d9253e":"**BASIC ANALYSIS OF DATA**","da1a16eb":"The data is returned as a \u201cDataFrame\u201d which is a 2 dimensional spreadsheet-like data structure with columns of different types. pandas has two main data structures - DataFrame and Series. A Series is a one-dimensional array that can hold any value type - This is not necessarily the case but a DataFrame column may be treated as a Series.","94ba8c04":"Few important functions for data analysis\n\n.shape - returns the row and column count of a dataset\n\n.describe() - returns statistics about the numerical columns in a dataset\n\n.dtypes returns the data type of each column","5ef77bfc":" Some additional methods that can give you statistics of a DataFrame or particular column in a DataFrame.\n\n.mean(axis=0 [will give you the calculated value per column]) - returns the statistical mean\n\n.median(axis=0 [will give you the calculated value per column]) - returns the statistical median\n\n.mode(axis=0 [will give you the calculated value per column]) - returns the statistical mode\n\n.count() - gives number of total values in column\n\n.unique() - returns array of all unique values in that column\n\n.value_counts() - returns object containing counts of unique values","97c158c2":"# To get mean value of column bachelor_s_degree_or_higher","e485d56f":"lets read the following dataset from the Open San Mateo County site: https:\/\/data.smcgov.org\/Government\/Educational-Attainment\/mb6a-xn89\n","7dba1c3f":"Acheive same thing by using lambda function"}}