{"cell_type":{"1797c58d":"code","e51ff4d4":"code","039ff7c9":"code","0a3214eb":"code","e970f413":"code","0ec16b6e":"code","c75572c0":"code","a509ae18":"code","ed6fcb96":"code","0f86e20c":"code","593c01c4":"code","5db0c2fa":"code","a4f63ca9":"code","56d1cb90":"code","b0cf1caf":"code","8b596afe":"code","9c1460d7":"code","e763fb13":"code","ea094b38":"code","9e66b83e":"code","509fa51f":"code","ed30d95c":"code","a9bd9e2e":"code","dd431737":"code","5b53167c":"code","3ebeb517":"code","c9325536":"code","c1c44a19":"code","cca5c272":"code","8bb68257":"code","e5ca758a":"markdown","426cc905":"markdown","28bd5ca4":"markdown","01a1d29a":"markdown","280fcf44":"markdown","5b2eb381":"markdown","51f1bd3b":"markdown","c559b7b6":"markdown","0e281b1a":"markdown","add41e46":"markdown","414fd93a":"markdown","53c120b0":"markdown","659dacd6":"markdown","38fa87c4":"markdown","3cc59e24":"markdown","72f9786c":"markdown","fa78bc06":"markdown","18a69338":"markdown","495d45b3":"markdown","d1a002c7":"markdown","d1681307":"markdown","69fe384f":"markdown","28ff0237":"markdown","51a3ed8d":"markdown","27de799c":"markdown","eb2a6058":"markdown","44d4126e":"markdown","f98e9fe0":"markdown","bbe6cee8":"markdown","6f5c21dc":"markdown","9582abb8":"markdown","58e8925b":"markdown","0f9fd6a0":"markdown","6a50a020":"markdown","9d221444":"markdown","2bb57637":"markdown","bbfb7876":"markdown","330944aa":"markdown","bd020577":"markdown","acafc450":"markdown","73aebaad":"markdown","d1a24d95":"markdown","05fb2f2a":"markdown","d690d3f0":"markdown","8458ec76":"markdown","39a14f3f":"markdown","149129d3":"markdown","fb92968f":"markdown","34db15f9":"markdown","622efbb7":"markdown","542cd720":"markdown"},"source":{"1797c58d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e51ff4d4":"pollution=pd.read_csv('\/kaggle\/input\/pollution_wide.csv')","039ff7c9":"houston_pollution = pollution[pollution.city  ==  'Houston']\n\n# Make array orangred for day 330 of year 2014, otherwise lightgray\nhouston_colors = ['orangered' if (day  ==  330) & (year  ==  2014) else 'lightgray' \n                  for day,year in zip(houston_pollution.day, houston_pollution.year)]\n\nsns.regplot(x = 'NO2',\n            y = 'SO2',\n            data = houston_pollution,\n            fit_reg = False, \n            # Send scatterplot argument to color points \n            scatter_kws = {'facecolors': houston_colors, 'alpha': 0.7})\nplt.show()","0a3214eb":"houston_pollution = pollution[pollution.city  ==  'Houston'].copy()\n\n# Find the highest observed O3 value\nmax_O3 = houston_pollution.O3.max()\n\n# Make a column that denotes which day had highest O3\nhouston_pollution['point_type'] = ['Highest O3 Day' if O3  ==  max_O3 else 'Others' for O3 in houston_pollution.O3]\n\n# Encode the hue of the points with the O3 generated column\nsns.scatterplot(x = 'NO2',\n                y = 'SO2',\n                hue = 'point_type',\n                data = houston_pollution)\nplt.show()","e970f413":"# Filter dataset to the year 2012\nsns.kdeplot(pollution[pollution.year == 2012].O3, \n            # Shade under kde and add a helpful label\n            shade = True,\n            label = '2012')\n\n# Filter dataset to everything except the year 2012\nsns.kdeplot(pollution[pollution.year != 2012].O3, \n            # Again, shade under kde and add a helpful label\n            shade = True,\n            label = 'other years')\nplt.show()","0ec16b6e":"sns.distplot(pollution[pollution.city == 'Vandenberg Air Force Base'].O3, \n             label = 'Vandenberg', \n             # Turn of the histogram and color blue to stand out\n             hist = False,\n             color = 'steelblue', \n             # Turn on rugplot\n             rug = True)\n\nsns.distplot(pollution[pollution.city != 'Vandenberg Air Force Base'].O3, \n             label = 'Other cities',\n             # Turn off histogram and color gray\n             hist = False,  \n             color = 'gray')\nplt.show()","c75572c0":"# Filter data to just March\npollution_mar = pollution[pollution.month == 3]\n\n# Plot beeswarm with x as O3\nsns.swarmplot(y = \"city\",\n              x = 'O3', \n              data = pollution_mar, \n              # Decrease the size of the points to avoid crowding \n              size = 3)\n\n# Give a descriptive title\nplt.title('March Ozone levels by city')\nplt.show()","a509ae18":"# Draw basic scatter plot of pollution data for August\nsns.scatterplot(x = 'CO', y = 'SO2', data = pollution[pollution.month  ==  8],color=\"orange\")\n\n# Label highest SO2 value with text annotation\nplt.text(0.57,41,\n         'Cincinnati had highest observed\\nSO2 value on Aug 11, 2013', \n         # Set the font to large\n         fontdict = {'ha': 'left', 'size': 'large'},color=\"blue\")\nplt.show()    ","ed6fcb96":"# Query and filter to New Years in Long Beach\njan_pollution = pollution.query(\"(month  ==  1) & (year  ==  2012)\")\nlb_newyears = jan_pollution.query(\"(day  ==  1) & (city  ==  'Long Beach')\")\n\nsns.scatterplot(x = 'CO', y = 'NO2',\n                data = jan_pollution)\n\n# Point arrow to lb_newyears & place text in lower left \nplt.annotate('Long Beach New Years',\n             xy = (lb_newyears.CO, lb_newyears.NO2),\n             xytext = (2, 15), \n             # Shrink the arrow to avoid occlusion\n             arrowprops = {'facecolor':'gray', 'width': 3, 'shrink': 0.03},\n             backgroundcolor = 'white')\nplt.show()","0f86e20c":"# Make a vector where Long Beach is orangered; else lightgray\nis_lb = ['orangered' if city  ==  'Long Beach' else 'lightgray' for city in pollution['city']]\n\n# Map facecolors to the list is_lb and set alpha to 0.3\nsns.regplot(x = 'CO',\n            y = 'O3',\n            data = pollution,\n            fit_reg = False, \n            scatter_kws = {'facecolors':is_lb, 'alpha':0.3})\n# Add annotation to plot\nplt.text(1.6,0.072, 'April 30th, Bad Day')\nplt.show() ","593c01c4":"sns.scatterplot('CO', 'NO2',\n                 alpha = 0.2,\n                 hue = 'city',\n                 data = pollution)","5db0c2fa":"g = sns.FacetGrid(data = pollution,\n                  col = 'city',\n                  col_wrap = 3)\n\n# Map sns.scatterplot to create separate city scatter plots\ng.map(sns.scatterplot, 'CO', 'NO2', alpha = 0.2,color=\"orange\")\nplt.show()","a4f63ca9":"sns.barplot(y = 'city', x = 'CO', \n              estimator = np.mean,\n            ci = False,\n              data = pollution,\n              # Add a border to the bars\n            )","56d1cb90":"sns.barplot(y = 'city', x = 'CO', \n              estimator = np.mean,\n            ci = False,\n              data = pollution,\n              # Add a border to the bars\n            edgecolor ='black')\nplt.show()","b0cf1caf":"sns.barplot(y = 'city', x = 'CO', \n              estimator = np.mean,\n            ci = False,\n              data = pollution,\n              # Replace border with bar colors\n            color = 'cadetblue')\nplt.show()","8b596afe":"# Filter the data\ncinci_2014 = pollution.query(\"city  ==  'Cincinnati' & year  ==  2014\")\n\n# Define a custom continuous color palette\ncolor_palette = sns.light_palette('orangered',\n                         as_cmap=True)\n\n# Plot mapping the color of the points with custom palette\nsns.scatterplot(x = 'CO',\n                y = 'NO2',\n                hue = 'O3', \n                data = cinci_2014,\n                palette = color_palette)\nplt.show()","9c1460d7":"plt.figure(figsize=(10,10))\n# Filter our data to Jan 2013\npollution_jan13 = pollution.query('year  ==  2013 & month  ==  1')\n\n# Color lines by the city and use custom ColorBrewer palette\nsns.lineplot(x = \"day\", \n             y = \"CO\", \n             hue = \"city\",\n             palette = \"Set2\", \n             linewidth = 3,\n             data = pollution_jan13)\nplt.show()","e763fb13":"# Divide CO into quartiles\npollution['CO quartile'] = pd.qcut(pollution['CO'], q = 4, labels = False)\n\n# Filter to just Des Moines\ndes_moines = pollution.query(\"city  ==  'Des Moines'\")\n\n# Color points with by quartile and use ColorBrewer palette\nsns.scatterplot(x = 'SO2',\n                y = 'NO2',\n                hue = 'CO quartile', \n                  data = des_moines,\n                palette = 'GnBu')\nplt.show()","ea094b38":"average_ests=pd.DataFrame()\naverage_ests['pollutant']=['CO','NO2','O3','SO2']\naverage_ests['mean']=[0.351911,19.021429,0.043982,0.207143]\naverage_ests['std_err']=[0.033563,2.200518,0.001822,0.037518]\naverage_ests['y']=['95% Interval','95% Interval','95% Interval','95% Interval']\naverage_ests['seen']=[0.40,16.00,0.05,0.15]\n","9e66b83e":"# Construct CI bounds for averages\naverage_ests['lower'] = average_ests['mean'] - 1.96*average_ests['std_err']\naverage_ests['upper'] = average_ests['mean'] + 1.96*average_ests['std_err']\nprint(average_ests)\n# Setup a grid of plots, with non-shared x axes limits\ng = sns.FacetGrid(average_ests, row = 'pollutant', sharex = False)\n\n# Plot CI for average estimate\ng.map(plt.hlines, 'y', 'lower', 'upper')\n\n# Plot observed values for comparison and remove axes labels\ng.map(plt.scatter, 'seen', 'y', color = 'orangered').set_ylabels('').set_xlabels('') \n\nplt.show()","509fa51f":"plt.fill_between(x='pollutant',y1='lower',y2='upper',data=average_ests)\nplt.plot('pollutant','mean','w-',alpha=0.5,data=average_ests)","ed30d95c":"markets=pd.read_csv('\/kaggle\/input\/markets_cleaned.csv')","a9bd9e2e":"# Print first three rows of data and transpose\nfirst_rows = markets.head(3).transpose()\nprint(first_rows)\n","dd431737":"# Get descriptions of every column\ncol_descriptions = markets.describe(include = 'all',\n                                percentiles = [0.5]).transpose()\nprint(col_descriptions)","5b53167c":"markets['num_items_sold']=markets.iloc[:,8:36].sum(axis=1)","3ebeb517":"markets","c9325536":"# Select just the numeric columns (exluding individual goods)\nnumeric_columns = ['lat', 'lon', 'months_open', 'num_items_sold']\n\n# Make a scatter matrix of numeric columns\npd.plotting.scatter_matrix(markets[numeric_columns], \n                             # Make figure large to show details\n                             figsize = (15,10), \n                           # Lower point opacity to show overlap\n                           alpha = 0.5)\n\nplt.show()","c1c44a19":"sns.regplot(x = 'lat', \n            y = 'months_open', \n            # Set scatter point opacity & color\n            scatter_kws = {'alpha':0.10, 'color':'gray'}, \n            # Disable confidence band\n            ci = False, \n            data = markets)\n\nplt.show()","cca5c272":"sns.regplot(x = 'lon', \n            y = 'months_open', \n            # Set scatter point opacity & color\n            scatter_kws = {'alpha':0.10, 'color':'gray'}, \n            # Disable confidence band\n            ci = False, \n            data = markets)\n\nplt.show()","8bb68257":"plt.figure(figsize=(30,30))\n# Setup two stacked plots\nfig, (ax1, ax2) = plt.subplots(2, 1)\n\n# Draw location scatter plot on first plot\nsns.scatterplot(\"lon\", \"lat\", 'months_open', \n                palette = sns.light_palette(\"orangered\",n_colors = 12), \n                legend = False, data = markets,\n                ax = ax1);\n\n# Plot a regression plot on second plot\nsns.regplot('lon', 'months_open',\n            scatter_kws = {'alpha': 0.2, 'color': 'gray', 'marker': '|'},\n            lowess = True,\n            marker = '|', data = markets, \n            ax = ax2)\n\nplt.show()","e5ca758a":"## Making a custom continuous palette","426cc905":"### To solve the above issue, divide each city into different facet as shown below","28bd5ca4":"## Categorical Palettes\n![image.png](attachment:image.png)","01a1d29a":"![image.png](attachment:image.png)","280fcf44":"### One way of enhancing KDEs is with the addition of a rug plot. Rug plots are little dashes drawn beneath the density that show precisely where each data point falls. Adding a rug plot is particularly useful when you don't have a ton of data.","5b2eb381":"# Case study using above knowledge","51f1bd3b":"### The default color scheme used by Seaborn's heatmap() doesn't give the value of 0 any special treatment. This is fine for instances when 0 isn't special for the variable you're visualizing but means you will need to customize the palette when 0 is special, such as when it represents a neutral value.For this visualization, you want to compare all the cities against the average pollution value for CO in November 2015. (As is provided in the DataFrame nov_2015_CO).To do this, use a heat map to encode the number of standard deviations away from the average each city's CO pollution was for the day. You'll need to replace the default palette by creating your own custom diverging palette and passing it to the heatmap and informing the function what your neutral value is.","c559b7b6":"# Showing Uncertainty.\n![image.png](attachment:image.png)","0e281b1a":"## Comparing Groups","add41e46":"### Fixing Seaborn's bar charts","414fd93a":"### Judging by the plot, there doesn't appear to be much of an association of O3 to either CO or NO2. By adding color to this simple scatter plot, you added a large amount of information on a previously un-visualized variable to the chart while still maintaining high precision in your main goal of comparing the CO and NO2 values to each other.","53c120b0":"### From this plot, we can see that 2012 had slightly higher than typical O3 levels, which may explain the filter sales. However, keen observers will note that some of our cities don't have full data for 2012, which could skew the trends. Next up we will look at techniques that can help out KDE's be more honest about this lack of data.","659dacd6":"### Beeswarms are a nice (and nice looking) way of comparing a bunch of classes to each other. In the plot, you can see that Vandenberg on average has high O3 levels in March. However, Houston has a much wider range and can sometimes reach much higher levels.Additionally, you can also get a sense of data quantities. Here, you see that Des Moines and Fairbanks have far fewer observations than the other sites.","38fa87c4":"## Now that you've investigated the data, you can see that it is very \"wide\" \u2013 with many columns corresponding to the different goods sold. The goods are encoded with 1s and 0s that indicate whether the market sells the good or not.","3cc59e24":"### Seaborn's default values for the colors of bars in a bar chart are not ideal for the most accurate perception. By drawing each bar as a different color, there is a risk of the viewer seeing two identical sized bars as different sizes as people tend to see some colors as 'larger' than others.As shown below\n","72f9786c":"### Imagine that you work for the premier air-filter provider. Your company has asked you to build a report that looks into why 2012 was a particularly good year for sales of your ozone (O3) filter. You downloaded some helpful pollution data from the USGS, and you want to make a concise visualization that compares the general pattern of O3 pollution for 2012 to all other years on record.To do this, you can build two overlaid kernel density estimation plots (KDEs): one for 2012 O3 data and one for all other years.","fa78bc06":"### When you have a line chart with lots of categories choosing your palette carefully is essential. Often default palettes have very similar hues, that are hard to differentiate when spread over the small surface of a line. ColorBrewer palettes are built with this in mind and keep the colors as distinct as possible.","18a69338":"### You believe that Long Beach, California has a smog problem. Using the pollution data, you'll attempt to make a point for increasing smog reduction regulations using your data visualization wizardry. Specifically, you want to focus on the relationship of CO to O3 levels during 2014 at a city council meeting.To emphasize how Long Beach compares to a set of peer cities, you've decided to highlight Long Beach and draw attention to a particularly bad day where the CO level was 1.6 and O3 was 0.072 using an annotation.","495d45b3":"### It's amazing how something as simple as adding a bit of text on a plot can take it from something the reader mindlessly scans to a learning experience. Here we have managed to convey the large-scale relationship of the two pollutants while also giving the viewer a glimpse into an outlier.","d1a002c7":"### By stacking these two plots, you can tell a detailed story using little space. You have broad geographic trends on how long markets stay open in the top map plot. While below, the scatter focuses on patterns in longitude; showing detailed cross-country trends.Notice the slight bump around longitude -80? What region of the country seems to be causing this?","d1681307":"### Adding borders is an easy and quick way to improve default bar charts without sacrificing some of the trippy colors. Spending a tiny bit more time to adjust the default colors will result in a more accurate and easy to read chart","69fe384f":"### You are working with the city of Houston to look at the relationship between sulfur dioxide (SO2) and nitrogen dioxide (NO2) pollution, specifically, pollution in the most recent year data was collected (2014). You have singled out a particularly bad day, November 26th, where there was a bad spike in the SO2 levels. To draw the viewers attention to this bad day, you will highlight it in a bright orangish-red and color the rest of the points gray.","28ff0237":"## Customizing a diverging palette heatmap","51a3ed8d":"### Here you see that underneath all the overlapping points there may be a negative relationship between a market's longitude and the number of months it's open. While you would never take these results and call the relationship true, you now have a path to dig into further to see if the signal is true or simply noise.","27de799c":"### By simplifying the color encoding to just four distinct values, you get a clear picture of the patterns between CO, SO2, and NO2. Here you see the low quartiles of CO seem to relate with NO2 and appear much less related to the SO2 values. By categorizing the continuous color variable, you allow the viewer to investigate patterns along a third variable in a clear and simple way at the expense of some precision: a tradeoff that is often worth it.","eb2a6058":"## Coloring ordinal categories\n### You are working for the Des Moines city council to assess the associations of various pollutant levels in the city. The two most important pollutants are SO2 and NO2 but CO is also of interest. You've only been allowed enough space for a single plot for your part of the report.You start with a scatter plot of the SO2 and NO2 values as they are most important and then decide to show the CO values using a color scale corresponding to CO quartiles. By binning the continuous CO values, you have turned CO into an ordinal variable that can illuminate broad patterns without requiring much effort from the viewer to compare subtly different shades.","44d4126e":"## Is latitude related to months open?\nWhile exploring the farmers market dataset with a scatter matrix, you noticed a potentially interesting relationship between a market's latitude and the number of months it stays open. Digging into this relationship a bit further, you decide to use Seaborn's regression plot to see if there's any weight to this pattern or if the heavy overlap of the points is playing tricks on your eyes.\n\nTo make the regression line stand out, you'll want to lower the overlapping background points opacity and color them a muted gray. Since you're not going to be making any formal inference and want to quickly investigate a pattern, you can turn off the default uncertainty band.","f98e9fe0":"### Using arrows with annotations is a great way to keep your text in a nice point-free area of the plot while precisely calling out a given point in a more-crowded location. In this plot, there is what appears to be a slightly higher than normal quantity of NO2 in the air compared to usual. The viewer's attention is driven to the point of interest at first rather than the more obvious outliers, thus kicking off their exploration of the chart in a guided way.","bbe6cee8":"## Text Annotation","6f5c21dc":"![image.png](attachment:image.png)","9582abb8":"## Confidence Bands\n![image.png](attachment:image.png)","58e8925b":"### Rug plots can improve KDEs as they help you see those gaps that you may have otherwise assumed were filled with data. In this plot, the rug plot shows that there is a small, but not neglible gap, in the data around O3 = 0.065.","0f9fd6a0":"### By carefully choosing your categorical palettes you can increase the speed and accuracy with which your visualization is read. Here, thanks to the well-separated colors, it is easy to determine that the large spike around 23 days belongs to Denver.","6a50a020":"### You might want to compare the relationship CO to NO2 values across cities using a simple scatter plot with color to differentiate the different cities' data\n### Unfortunately, the resulting plot is very convoluted. It's hard to make out differences between the cities because one has to differentiate between similar colors. It turns out that sometimes the best color palette for your plot is no color at all.To remedy this hard-to-read chart, get rid of the color component and facet by each city. While the resulting plot may not be as pretty, it will be a much better tool to decipher the differences.","9d221444":"## Stacking to find trends\n### you are interested in the number of months that a market stays open in relation to its geography, more specifically its longitude. You're curious to see if there are any regions of the country that behave noticeably different from the others.\n\n### To do this, you create a basic map with a scatter plot of the latitude and longitude of each market, coloring each market by the number of months it's open. Further digging into the latitude relationship, you draw a regression plot of the latitude to the number of months open with a flexible fit line to determine if any trends appear. You want to view these simultaneously to get the clearest picture of the trends.","2bb57637":"## Here you see that underneath all the overlapping points there may be a negative relationship between a market's latitude and the number of months it's open. While you would never take these results and call the relationship true, you now have a path to dig into further to see if the signal is true or simply noise.","bbfb7876":"## Continous band work fine when there is only one band , but it become hard to separate between multiple bands and analyse\n## Solution : To handle above mentioned issue we should separate the bands if possible into different graphs","330944aa":"### You are continuing your work for the city of Houston. Now you want to look at the behavior of both NO2 and SO2 when the un-plotted ozone (O3) value was at its highest.","bd020577":"## You've investigated the new farmer's market data, and it's rather wide \u2013 with lots of columns of information for each market's row. Rather than painstakingly going through every combination of numeric columns and making a scatter plot to look at correlations, you decide to make a scatter matrix using the pandas built-in function.","acafc450":"### You are interested in the pollution levels of Cincinnati for the year 2014. Specifically, you're interested in CO and NO2, so you make a simple scatter plot to show the relationship between the two pollutants.\n![image.png](attachment:image.png)\n### However, there may be some interesting information in how the value of O3 relates to the two plotted pollutants, so you decide to color the points by their O3 levels. To do this, you need to define an appropriate continuous palette and map your O3 column to it in your scatter plot.","73aebaad":"### Loaded is a new dataset, markets. Each row of this DataFrame belongs to an individual farmers market in the continental United States with various information about the market contained in the columns.As a first step, print out the first three lines of markets to get an idea of what type of data the columns encode. Then look at the summary descriptions of all of the columns. Since there are so many columns in the DataFrame, you'll want to turn the results 'sideways' by transposing the output to avoid cutting off rows.","d1a24d95":"## Continous Color Palettes\n### Continous vs Not Continous Data\n![image.png](attachment:image.png)","05fb2f2a":"# Highlighting your data","d690d3f0":"## Basic confidence intervals\n### You are a data scientist for a fireworks manufacturer in Des Moines, Iowa. You need to make a case to the city that your company's large fireworks show has not caused any harm to the city's air. To do this, you look at the average levels for pollutants in the week after the fourth of July and how they compare to readings taken after your last show. By showing confidence intervals around the averages, you can make a case that the recent readings were well within the normal range.","8458ec76":"### In just a few lines of code you've made a plot that clearly highlights a given datapoint. The gray color of the non-highlighted points here helps them provide context but does not overcrowd the main points of interest. Here you see that Nov 26th happened to be on the high end for both SO2 and NO2.","39a14f3f":"## Only o3 is lying outside the confidence Interval","149129d3":"# Using color in your visualizations","fb92968f":"### On the current scatter plot, you can see a particularly prominent point that contains the largest SO2 value observed for August. This point is Cincinnati on August 11th, 2013; however, you would not be able to learn this information from the plot in its current form. Basic text annotations are great for pointing out interesting outliers and giving a bit more information. Draw the readers attention to this Cincinnati value by adding a basic text annotation that gives a bit of the background about this outlier.","34db15f9":"###  This new faceted plot removes the pretty colors but becomes a whole lot more informative. In certain situations, if you can take something that is encoded in color and encode it in position instead, you often will increase the legibility of your chart. The balance between attractiveness and utility is something you need to balance in every plot you make.","622efbb7":"### We discussed two easy ways to fix this. First, to put a border around the bars; second, change all bar colors to the same value. Try both of these solutions on our pollution data.","542cd720":"### Highlights are great for making plots to show others, but they can also help you explore a dataset. Sometimes you will want to highlight a point in a plot based upon its value for some variable not displayed. In this plot, we used automatic filtering to see that the highest O3 day fell in the upper (but not highest) values of NO2 and SO2. This indicates a potentially weak interaction between O3 and the other variables."}}