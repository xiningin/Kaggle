{"cell_type":{"1c265518":"code","781306bd":"code","77612452":"code","e7744ad4":"code","930c6346":"code","1eb87b8e":"code","b65d8833":"code","f84e23ef":"code","52a1284e":"code","602e8cac":"code","258ae0b5":"code","6bbb7ea3":"code","ee552c79":"code","642a1999":"code","6b8731cd":"code","e96aab30":"code","eba516dd":"code","c6b02f22":"code","68563b73":"code","7532317c":"code","df7af4c0":"code","ef6aacce":"code","9e5cfa67":"code","b4e5f1b2":"code","ff16fdbc":"code","48df4dce":"code","7df67068":"code","c65bad7b":"code","4dd3f690":"code","25a99e8e":"code","67a51da4":"code","2f959f78":"code","3781363d":"code","e56aa33d":"code","784fea1b":"code","2d207289":"code","8c62e544":"code","530ccb77":"code","90d5d5a0":"code","2be03f28":"code","dc03485a":"code","f5ffc455":"code","3877081a":"code","8d263f9e":"code","182f9202":"code","ad5631cb":"code","405706ca":"markdown","72c971f1":"markdown","d589c8dc":"markdown","1947a4c2":"markdown","44cb27cb":"markdown","1fdad60f":"markdown","7189167d":"markdown","c1e70fc1":"markdown","928e52c1":"markdown","517491a5":"markdown","25f04417":"markdown","9d591340":"markdown","e5fdbd9e":"markdown","0eb409b9":"markdown","f870bc9b":"markdown","e15c7932":"markdown","5d5a0e0c":"markdown"},"source":{"1c265518":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n\n# Any results you write to the current directory are saved as output.","781306bd":"#importing required libraries\nimport pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nsns.set()","77612452":"#loading the files \ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest  = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","e7744ad4":"train.head()","930c6346":"train.info()","1eb87b8e":"test.head(), test.info()","b65d8833":"train.isnull().sum(), test.isnull().sum()","f84e23ef":"train.describe(), test.describe()","52a1284e":"def barPlot(feature):\n    survived = train[train.Survived == 1][feature].value_counts()\n    dead     = train[train.Survived == 0][feature].value_counts()\n    df       = pd.DataFrame([survived, dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar', stacked = True, figsize=(10,5))","602e8cac":"barPlot('Sex')","258ae0b5":"barPlot('Pclass')","6bbb7ea3":"barPlot('SibSp')","ee552c79":"barPlot('Parch')","642a1999":"barPlot('Embarked')","6b8731cd":"train_test_combined = [train, test]\n\nfor dataset in train_test_combined:\n    dataset[\"Title\"] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand = False)","e96aab30":"train.Title.value_counts()","eba516dd":"test.Title.value_counts()","c6b02f22":"title_mapping = {'Mr': 0, 'Miss': 1,'Mrs': 2, 'Master': 3, 'Dr': 3,'Rev': 3, 'Col': 3, 'Dona': 3, 'Ms': 3,\n                 'Major': 3,'Mlle': 2,'Mme': 1,'Countess'  :1,'Sir': 1,'Jonkheer': 1,'Ms': 1,'Don': 1,'Capt': 1,\n                 'Lady': 1\n                }\n\nfor dataset in train_test_combined:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","68563b73":"train.Title.value_counts(), test.Title.value_counts()","7532317c":"barPlot('Title')","df7af4c0":"#Since we derived Title from Name, we can remove the Name feature from the Datasets\ntrain.drop([\"Name\"], axis = 1, inplace = True)\ntest.drop([\"Name\"], axis = 1, inplace = True)","ef6aacce":"sex_mapping = {'male': 0, 'female': 1}\nfor dataset in train_test_combined:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","9e5cfa67":"#there are Null values in Age column. impute Age values\n# using median values for age based on Title to impute \n\ntrain['Age'].fillna(train.groupby('Title')['Age'].transform(\"median\"), inplace = True)\ntest['Age'].fillna(test.groupby('Title')['Age'].transform(\"median\"), inplace = True)","b4e5f1b2":"for dataset in train_test_combined:\n    dataset.loc[ (dataset[\"Age\"] <= 16), 'Age' ] = 0\n    dataset.loc[ (dataset[\"Age\"] > 16) & (dataset[\"Age\"] <= 26), 'Age' ] = 1\n    dataset.loc[ (dataset[\"Age\"] > 26) & (dataset[\"Age\"] <= 36), 'Age' ] = 2\n    dataset.loc[ (dataset[\"Age\"] > 36 ) & ( dataset[\"Age\"] <= 62), 'Age' ] = 3\n    dataset.loc[ (dataset[\"Age\"] > 62), 'Age' ] = 4","ff16fdbc":"#Embarked\nPClass1 = train.loc[train['Pclass']==1, 'Embarked'].value_counts()\nPClass2 = train.loc[train['Pclass']==2, 'Embarked'].value_counts()\nPClass3 = train.loc[train['Pclass']==3, 'Embarked'].value_counts()\ndf      = pd.DataFrame([PClass1, PClass2, PClass3])\ndf.index= ['1st Class','2nd Class','3rd Class']\ndf.plot(kind='bar', stacked = True, figsize=(10,5))","48df4dce":"#Fill out missing value for Embark as S as majority of data set is from S \nfor dataset in train_test_combined:\n    dataset['Embarked'].fillna('S', inplace = True)\n    \nembark_mapping = {\"S\":0, \"C\":1, \"Q\":2}\nfor dataset in train_test_combined:\n    dataset[\"Embarked\"] = dataset[\"Embarked\"].map(embark_mapping)","7df67068":"# Fare\ntrain[\"Fare\"].fillna(train.groupby('Pclass')['Fare'].transform(\"median\"), inplace = True)\ntest[\"Fare\"].fillna(test.groupby('Pclass')['Fare'].transform(\"median\"), inplace = True)","c65bad7b":"for dataset in train_test_combined:\n    dataset.loc[ dataset[\"Fare\"]<=17, \"Fare\"] = 0\n    dataset.loc[ (dataset[\"Fare\"]>17) & (dataset[\"Fare\"]<=30), \"Fare\"] = 1\n    dataset.loc[ (dataset[\"Fare\"]>30) & (dataset[\"Fare\"]<=100), \"Fare\"] = 2\n    dataset.loc[ dataset[\"Fare\"]> 100, \"Fare\"] = 3","4dd3f690":"#Cabin\nfor dataset in train_test_combined:\n    dataset[\"Cabin\"] = dataset[\"Cabin\"].str[:1]","25a99e8e":"cabin_mapping = {'A': 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2.0, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_combined:\n    dataset[\"Cabin\"] = dataset[\"Cabin\"].map(cabin_mapping)\n    \ntrain.Cabin.unique()","67a51da4":"train.Cabin.fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace = True)\ntest.Cabin.fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace = True)","2f959f78":"#FamilySize\ntrain[\"FamilySize\"] = train.Parch + train.SibSp + 1\ntest[\"FamilySize\"] = test.Parch + test.SibSp + 1","3781363d":"family_mapping = {1:0.0, 2:0.4, 3:0.8, 4:1.2, 5:1.6, 6:2.0, 7:2.4, 8:2.8, 9:3.2, 10:3.6, 11:4}\nfor dataset in train_test_combined:\n    dataset[\"FamilySize\"] = dataset[\"FamilySize\"].map(family_mapping)","e56aa33d":"drop_features = ['Parch','SibSp', 'Ticket']\nfor dataset in train_test_combined:\n    dataset.drop(drop_features, axis = 1, inplace = True)","784fea1b":"#Train Data\ntrain_data = train.drop([\"PassengerId\",\"Survived\"], axis = 1)\ntarget = train[\"Survived\"]\ntest_data = test.drop([\"PassengerId\"], axis = 1)","2d207289":"#FINAL FEATURES\ntrain_data.head(4), test_data.head(4), train_data.shape, test_data.shape","8c62e544":"from sklearn.linear_model import LogisticRegression\nlm1 = LogisticRegression()","530ccb77":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train_data, target, test_size = 0.3, random_state = 42)","90d5d5a0":"lm1.fit(X_train, y_train)\ny_pred = lm1.predict(X_test)\n","2be03f28":"from sklearn.metrics import classification_report, confusion_matrix\nconfusionmatrix =  confusion_matrix(y_test, y_pred)\nconfusionmatrix","dc03485a":"def printConfusionMatrix(cm):\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.imshow(cm)\n    ax.grid(False)\n    ax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\n    ax.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\n    ax.set_ylim(1.5, -0.5)\n    for i in range(2):\n        for j in range(2):\n            ax.text(j, i, cm[i, j], ha='center', va='center', color='red')\n    plt.show()","f5ffc455":"printConfusionMatrix(confusionmatrix)","3877081a":"print(classification_report(y_test, lm1.predict(X_test)))","8d263f9e":"lm1.fit(train_data, target)\ntest_target = lm1.predict(test_data)","182f9202":"submission = pd.DataFrame({\"PassengerId\": test[\"PassengerId\"], \"Survived\": test_target})\nsubmission.to_csv('submission.csv', index = False, )","ad5631cb":"df = pd.read_csv('submission.csv')\ndf.head(-1)","405706ca":"**Binning Age**\n* Less than 16 0\n* Between 16 and 26 1\n* Between 26 and 36 2\n* Between 36 and 62 3\n* Greater than 62 4","72c971f1":"**DATA EXPLORATION**\n","d589c8dc":"Person with parents\/children likely to survive person without parents\/children unlikely to survive","1947a4c2":"**EMBARKED**","44cb27cb":"**CABIN**","1fdad60f":"**BINNING FARE**\n* less than 17 0\n* between 17 and 30 1\n* between 30 and 100 2\n* greater than 100 3","7189167d":"**FEATURE ENGINEERING**","c1e70fc1":"**Converting Sex column**\n* male 0\n* female 1","928e52c1":"**FAMILY SIZE**\nThis is a derived feature","517491a5":"**MODELLING**\n> Building a logistic regression\n","25f04417":"Mr. (Title =0) is more unlikely to survive","9d591340":"**FARE**","e5fdbd9e":"* More than 50% of 1st class are from S embark\n* More than 50% of 2nd class are from S embark\n* More than 50% of 3rd class are from S embark","0eb409b9":"Person with no spouse or siblings are less likely to survive\n\nPerson with spuse\/siblings likely to survive\n","f870bc9b":"** BAR CHART FOR CATEGORICAL VARIABLES **","e15c7932":"Person boarded from S is least likely to survive than the person boarded from other locations.","5d5a0e0c":"We will keep 4 categories\n\n* Mr = 0\n* Miss = 1\n* Mrs = 2\n* others = 3"}}