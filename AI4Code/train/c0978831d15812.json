{"cell_type":{"0817f653":"code","f9d2229b":"code","8dc5400a":"code","18fb2a34":"code","3bb6f101":"code","49ebdbc9":"code","df8208ac":"code","758a38e2":"code","b95711d5":"code","33b703ab":"code","b4356c18":"code","0ee2990e":"code","3c37d455":"code","9edd1af5":"code","fb483234":"code","7241f4ba":"code","cc5812d7":"code","93407e5b":"code","7312a7d3":"code","70f61004":"code","4f9a9141":"code","7477e002":"code","69eef4fd":"code","6496ce67":"code","d7c91281":"code","57d03e62":"code","da1c77d7":"code","9e8974b8":"code","ecff24a9":"code","f51a4ba4":"code","f9f86f64":"code","021a0fee":"code","555316cd":"code","7b1651f1":"code","b3b0e47d":"code","cedf4d0b":"code","845f8ed5":"code","50bd5a13":"code","2e400761":"code","57fd86c7":"code","2798bed0":"code","2632e21f":"code","362b38a7":"code","21f052b2":"code","b32d3b47":"code","dee04d64":"code","ff1b8f1b":"code","8778ac17":"code","d9cda208":"code","c4380a6c":"code","3be69125":"code","d2549317":"code","f6311a4e":"code","eb280bca":"code","909664fc":"code","848d0249":"code","7a5a555b":"code","dcd6ed16":"code","b7637122":"code","b7740001":"code","3fb36f1e":"code","f74051c2":"code","f697dfcd":"code","a48fc12d":"code","c6547974":"code","c88f99b2":"code","0cae8ae3":"code","cb288e14":"code","c1046755":"code","0056ec5c":"code","133862f8":"code","3d091022":"code","a4a1b42c":"code","85d19299":"code","c907ea42":"code","b959bc6a":"code","cf5c4ea5":"code","94e2f927":"code","37f88039":"code","ee82f100":"code","62f138f1":"code","a176ee45":"code","da7a1b49":"code","b4c3dfdd":"code","0b31a479":"code","42bba2e1":"code","458c0999":"code","dc2341c8":"code","cfee78ef":"code","e5867d76":"code","58c68fb1":"code","eee7835d":"code","b978dc28":"code","28e8f640":"code","7badaaf6":"code","5c93e575":"code","65f9f348":"code","987d5b34":"code","3065db91":"code","b8e0b9fc":"code","4c512412":"code","c3cf63b4":"code","c4d4382d":"code","bcf2e3cc":"code","e801e3ed":"code","53a6a8af":"code","bc838d85":"code","adda3448":"code","96890888":"code","3e1fcbdc":"code","f5490f30":"code","4d288fb3":"code","44569848":"code","30a82785":"code","eea95d6a":"code","58c17af7":"code","b2411273":"code","e7ab4239":"code","7d70fb6e":"code","ef3672bd":"code","a9c6fdc8":"code","55dc12ad":"code","fe1138dd":"code","2c29baeb":"code","56a70aac":"code","cb627516":"code","5b7def8c":"code","3e0b69d8":"code","a60f6b5e":"code","e0731b7a":"code","374d3da1":"code","bf2d45d3":"code","c72e8a51":"code","d5d8f729":"code","1d580780":"markdown","a276aafa":"markdown","fb314b07":"markdown","2c26bdc1":"markdown","2dcd640c":"markdown","f83aa77f":"markdown","02e6d5e1":"markdown","f4145999":"markdown","5eaed023":"markdown","aa55ae05":"markdown"},"source":{"0817f653":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9d2229b":"df = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","8dc5400a":"df.head()","18fb2a34":"df.columns","3bb6f101":"df.isnull().sum()","49ebdbc9":"X=df[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age']]","df8208ac":"X.head()","758a38e2":"y=df['Outcome']","b95711d5":"y.head()","33b703ab":"X.info()","b4356c18":"X.shape","0ee2990e":"corr=df.corr()\nsns.heatmap(corr,annot=True)","3c37d455":"sns.distplot(X['Pregnancies'])","9edd1af5":"sns.distplot(X['Pregnancies'],kde=False)","fb483234":"X['Pregnancies'].max()","7241f4ba":"X['Pregnancies'].min()","cc5812d7":"X['Pregnancies'].mode()","93407e5b":"X['Pregnancies'].mean()","7312a7d3":"a=df['Pregnancies']==17","70f61004":"b=df[a]\nb.shape\nb.head()","4f9a9141":"c=df['Pregnancies']==df['Pregnancies'].min()\nd=df[c]\nd.head()","7477e002":"sns.catplot(x='Outcome',y='Pregnancies',data=df)","69eef4fd":"sns.catplot(x='Outcome',y='Pregnancies',kind='box',data=df)","6496ce67":"c=df['Glucose']==df['Glucose'].min()\nd=df[c]\nd.head()","d7c91281":"c=df['Glucose']==df['Glucose'].max()\nd=df[c]\nd.head()","57d03e62":"c=df['Glucose']==df['Glucose'].median()\nd=df[c]\nd.head()","da1c77d7":"df['Glucose'].mean()","9e8974b8":"c=df['Glucose']>df['Glucose'].mean()\nd=df[c]\nd.head(700)\nd['Outcome'].mode()\nd['Outcome'].value_counts()","ecff24a9":"c=df['Glucose']<df['Glucose'].mean()\nd=df[c]\nd.head(700)\nd['Outcome'].mode()\nd['Outcome'].count()\nd['Outcome'].value_counts()","f51a4ba4":"sns.distplot(X['Glucose'])","f9f86f64":"sns.distplot(X['Glucose'],kde=False)","021a0fee":"sns.catplot(x='Outcome',y='Glucose',data=df)","555316cd":"df['BloodPressure'].mean()","7b1651f1":"df['BloodPressure'].max()","b3b0e47d":"df['BloodPressure'].min()","cedf4d0b":"df['BloodPressure'].mode()","845f8ed5":"df['BloodPressure'].value_counts()","50bd5a13":"c=df['BloodPressure']<df['BloodPressure'].mean()\nd=df[c]\nd.head(700)\n","2e400761":"d['Outcome'].mode()\nd['Outcome'].count()\nd['Outcome'].value_counts()","57fd86c7":"c=df['BloodPressure']>df['BloodPressure'].mean()\nd=df[c]\nd.head(700)\n","2798bed0":"d['Outcome'].mode()\nd['Outcome'].count()\nd['Outcome'].value_counts()","2632e21f":"sns.distplot(X['BloodPressure'],kde=False)","362b38a7":"sns.catplot(x='Outcome',y='BloodPressure',data=df)","21f052b2":"df['SkinThickness'].mean()","b32d3b47":"df['SkinThickness'].max()","dee04d64":"df['SkinThickness'].min()","ff1b8f1b":"sns.catplot(x='Outcome',y='SkinThickness',data=df)","8778ac17":"c=df['SkinThickness']<df['SkinThickness'].mean()\nd=df[c]\nd.head(700)\nd['SkinThickness'].value_counts()","d9cda208":"d['Outcome'].mode()\nd['Outcome'].count()\nd['Outcome'].value_counts()\n","c4380a6c":"105\/(105+246)","3be69125":"c=df['SkinThickness']>df['SkinThickness'].mean()\nd=df[c]\nd.head(700)\nd['SkinThickness'].value_counts()\nd['Outcome'].value_counts()\n","d2549317":"163\/(163+254)","f6311a4e":"#We saw percentage of diabetic patient is more when skin thickness> than its mean value.","eb280bca":"sns.distplot(X['SkinThickness'],kde=False)","909664fc":"sns.heatmap(corr,annot=True)","848d0249":"# correlation of skin thickness and blood pressure is comparatively more.\ndf.plot(x='SkinThickness',y='BloodPressure',style='o')","7a5a555b":"sns.lineplot(x=df['SkinThickness'],y=df['BloodPressure'])","dcd6ed16":"df['Insulin'].describe()","b7637122":"c=df['Insulin']==846\nd=df[c]\nd.head()","b7740001":"c=df['Insulin']==0\nd=df[c]\nd.head()","3fb36f1e":"sns.catplot(x='Outcome',y='Insulin',data=df)","f74051c2":"sns.distplot(X['Insulin'],kde=False)","f697dfcd":"c=df['Insulin']>df['Insulin'].mean()\nd=df[c]\nd.head(700)\nd['Insulin'].value_counts()\nd['Outcome'].value_counts()","a48fc12d":"121\/(121+168)","c6547974":"c=df['Insulin']<df['Insulin'].mean()\nd=df[c]\nd.head(700)\nd['Insulin'].value_counts()\nd['Outcome'].value_counts()","c88f99b2":"147\/(147+332)","0cae8ae3":"sns.heatmap(corr,annot=True)","cb288e14":"df.plot(x='Insulin',y='BloodPressure',style='o')","c1046755":"sns.lineplot(x=df['Insulin'],y=df['BloodPressure'])","0056ec5c":"sns.lineplot(x=df['Insulin'],y=df['SkinThickness'])","133862f8":"sns.relplot(x=\"Insulin\", y=\"BloodPressure\", hue=\"SkinThickness\", data=df);\n","3d091022":"df['BMI'].describe()","a4a1b42c":"c=df['BMI']<df['BMI'].mean()\nd=df[c]\nd.head(700)\n","85d19299":"d['Outcome'].value_counts()","c907ea42":"84\/(84+289)","b959bc6a":"d['BMI'].value_counts()","cf5c4ea5":"c=df['BMI']>df['BMI'].mean()\nd=df[c]\nd.head(700)","94e2f927":"d['Outcome'].value_counts()","37f88039":"184\/(184+211)","ee82f100":"sns.distplot(X['BMI'],kde=False,color='brown')","62f138f1":"sns.catplot(x='Outcome',y='BMI',data=df)","a176ee45":"sns.lineplot(x=df['BMI'],y=df['Glucose'],color='orange')","da7a1b49":"sns.lineplot(x=df['BMI'],y=df['BloodPressure'],color='red')","b4c3dfdd":"sns.lineplot(x=df['BMI'],y=df['Insulin'])","0b31a479":"sns.relplot(x=\"SkinThickness\", y=\"BloodPressure\", hue=\"BMI\", data=df);\n","42bba2e1":"sns.relplot(x=\"SkinThickness\", y=\"BloodPressure\", hue=\"Outcome\", data=df,color='purple');\n","458c0999":"sns.relplot(x=\"SkinThickness\", y=\"Insulin\", hue=\"Outcome\", data=df,color='purple');\n","dc2341c8":"sns.relplot(x=\"SkinThickness\", y=\"Pregnancies\", hue=\"Outcome\", data=df,color='purple');\n","cfee78ef":"df['DiabetesPedigreeFunction'].describe()","e5867d76":"sns.distplot(X['DiabetesPedigreeFunction'],kde=False)","58c68fb1":"sns.catplot(x='Outcome',y='DiabetesPedigreeFunction',data=df)","eee7835d":"c=df['DiabetesPedigreeFunction']<df['DiabetesPedigreeFunction'].mean()\nd=df[c]\nd.head(700)\n","b978dc28":"d['Outcome'].value_counts()","28e8f640":"139\/(139+334)","7badaaf6":"c=df['DiabetesPedigreeFunction']>df['DiabetesPedigreeFunction'].mean()\nd=df[c]\nd.head(700)","5c93e575":"d['Outcome'].value_counts()","65f9f348":"129\/(129+166)","987d5b34":"sns.lineplot(x=df['DiabetesPedigreeFunction'],y=df['Insulin'],color='pink')","3065db91":"sns.lineplot(x=df['DiabetesPedigreeFunction'],y=df['Glucose'],color='purple')","b8e0b9fc":"sns.lineplot(x=df['DiabetesPedigreeFunction'],y=df['SkinThickness'],color='green')","4c512412":"df['Age'].describe()","c3cf63b4":"sns.boxplot(df['Age'],color='silver')","c4d4382d":"sns.distplot(df['Age'],kde=False,color='pink')","bcf2e3cc":"sns.catplot(x='Outcome',y='Age',data=df)","e801e3ed":"sns.relplot(x=\"Age\", y=\"Pregnancies\", hue=\"Outcome\", data=df,color='purple');\n","53a6a8af":"# from sklearn.preprocessing import StandardScaler\n# sc_X = StandardScaler()\n# X = sc_X.fit_transform(X)\n","bc838d85":"from sklearn import preprocessing\n# from sklearn.preprocessing import Normalizer\nX = preprocessing.normalize(X, norm='l2')","adda3448":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n\n","96890888":"X # Normalised X","3e1fcbdc":"#Fitting Logistic Regression\n\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\n","f5490f30":"from yellowbrick.model_selection import LearningCurve\nvisualizer = LearningCurve(\n    classifier, cv=10, scoring='f1_weighted'\n)\n\nvisualizer.fit(X, y)        # Fit the data to the visualizer\nvisualizer.show()   ","4d288fb3":"classifier.get_params()","44569848":"from sklearn.model_selection import GridSearchCV\ngrid={\"C\":np.logspace(-3,3,4,5,7), \"penalty\":[\"l1\",\"l2\"]}# l1 lasso l2 ridge\ngrid_cv=GridSearchCV(classifier,grid,cv=10)\ngrid_cv.fit(X_train,y_train)\n\nprint(\"tuned hpyerparameters :(best parameters) \",grid_cv.best_params_)\nprint(\"accuracy :\",grid_cv.best_score_)\n","30a82785":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\n# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv =2)\naccuracies.std()\naccuracies.mean()","eea95d6a":"from sklearn.metrics import f1_score\nf1_score(y_test, y_pred)","58c17af7":"cm","b2411273":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_test, y_pred)","e7ab4239":"y_prob = classifier.predict_proba(X_test)","7d70fb6e":"y_prob","ef3672bd":"y_pred1= []\nfor i in range(len(y_prob)):\n    if y_prob[i][0]>0.7: \n        y_pred1.append(1)\n    else:\n        y_pred1.append(0)","a9c6fdc8":"y_pred1","55dc12ad":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_test, y_pred1)","fe1138dd":"from sklearn.metrics import roc_curve","2c29baeb":"roc_curve(y_test,y_pred)","56a70aac":"# # Fitting XGBoost to the Training set\n# from xgboost import XGBClassifier\n# classifier = XGBClassifier(n_estimators=500,learning_rate=0.1,verbosity=1)\n# classifier.fit(X_train, y_train)","cb627516":"# y_pred = classifier.predict(X_test)\n\n# # Making the Confusion Matrix\n# from sklearn.metrics import confusion_matrix\n# cm = confusion_matrix(y_test, y_pred)\n\n# # Applying k-Fold Cross Validation\n# from sklearn.model_selection import cross_val_score\n# accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv =2)\n# accuracies.std()\n# accuracies.mean()\n","5b7def8c":"# print(cm)","3e0b69d8":"# from sklearn.model_selection import GridSearchCV\n# params = {\n#         'min_child_weight': [1, 5, 10],\n#         'gamma': [0.5, 1, 1.5, 2, 5],\n#         'subsample': [0.6, 0.8, 1.0],\n#         'colsample_bytree': [0.6, 0.8, 1.0],\n#         'max_depth': [3, 4, 5]\n#         }","a60f6b5e":"# xgb=XGBClassifier()\n# clf = GridSearchCV(xgb, params)","e0731b7a":"# clf.fit(X_train, y_train)","374d3da1":"# from sklearn.preprocessing import StandardScaler, LabelEncoder\n# from sklearn.model_selection import GridSearchCV, cross_val_score, train_test_split, GridSearchCV, RandomizedSearchCV\n# from sklearn.metrics import precision_score, recall_score, confusion_matrix,  roc_curve, precision_recall_curve, accuracy_score, roc_auc_score\n# import lightgbm as lgbm\n# from sklearn.ensemble import VotingClassifier\n# from sklearn.neighbors import KNeighborsClassifier\n# from sklearn.metrics import roc_curve,auc\n# from sklearn.model_selection import KFold\n# from sklearn.model_selection import cross_val_predict\n# from yellowbrick.classifier import DiscriminationThreshold\n\n# # Stats\n# import scipy.stats as ss\n# from scipy import interp\n# from scipy.stats import randint as sp_randint\n# from scipy.stats import uniform as sp_uniform\n\n# #","bf2d45d3":"\n\n# random_state=42\n\n# fit_params = {\"early_stopping_rounds\" : 100, \n#              \"eval_metric\" : 'auc', \n#              \"eval_set\" : [(X,y)],\n#              'eval_names': ['valid'],\n#              'verbose': 0,\n#              'categorical_feature': 'auto'}\n\n# param_test = {'learning_rate' : [0.01, 0.02, 0.03, 0.04, 0.05, 0.08, 0.1, 0.2, 0.3, 0.4],\n#               'n_estimators' : [100, 200, 300, 400, 500, 600, 800, 1000, 1500, 2000],\n#               'num_leaves': sp_randint(6, 50), \n#               'min_child_samples': sp_randint(100, 500), \n#               'min_child_weight': [1e-5, 1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3, 1e4],\n#               'subsample': sp_uniform(loc=0.2, scale=0.8), \n#               'max_depth': [-1, 1, 2, 3, 4, 5, 6, 7],\n#               'colsample_bytree': sp_uniform(loc=0.4, scale=0.6),\n#               'reg_alpha': [0, 1e-1, 1, 2, 5, 7, 10, 50, 100],\n#               'reg_lambda': [0, 1e-1, 1, 5, 10, 20, 50, 100]}\n\n# #number of combinations\n# n_iter = 300\n\n# #intialize lgbm and lunch the search\n# lgbm_clf = lgbm.LGBMClassifier(random_state=random_state, silent=True, metric='None', n_jobs=4)\n# grid_search = RandomizedSearchCV(\n#     estimator=lgbm_clf, param_distributions=param_test, \n#     n_iter=n_iter,\n#     scoring='accuracy',\n#     cv=5,\n#     refit=True,\n#     random_state=random_state,\n#     verbose=True)\n\n# grid_search.fit(X_train, y_train, **fit_params)\n# opt_parameters =  grid_search.best_params_\n# lgbm_clf = lgbm.LGBMClassifier(**opt_parameters)\n","c72e8a51":"# lgbm_clf.fit(X_train,y_train)","d5d8f729":"# y_pred = lgbm_clf.predict(X_test)\n\n# # Making the Confusion Matrix\n# from sklearn.metrics import confusion_matrix\n# cm = confusion_matrix(y_test, y_pred)\n\n# # Applying k-Fold Cross Validation\n# from sklearn.model_selection import cross_val_score\n# accuracies = cross_val_score(estimator = lgbm_clf, X = X_train, y = y_train, cv =2)\n# accuracies.std()\n# accuracies.mean()","1d580780":"# Plotting graphs between variables.","a276aafa":"# EDA and data visualization ","fb314b07":"# Deciding the decision boundaries by checking the roc auc curves.","2c26bdc1":"# Normalising the data.","2dcd640c":"# Logistic Regression","f83aa77f":"# Splitting the data into training and test data.","02e6d5e1":"# Learning Curve","f4145999":"# Loading the data ","5eaed023":"**Exploring the data points value which are lesser than its mean value**","aa55ae05":"# Probability prediction of both the classes"}}