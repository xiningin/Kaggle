{"cell_type":{"665e53a0":"code","baaf2c8f":"code","e7dede24":"code","309a3825":"code","c6786ef3":"code","a9a769e4":"code","4cf66c31":"code","b5f93ffc":"code","c4250fe2":"code","adf80b44":"code","8338b177":"code","dc533e2f":"code","d1e28a7a":"code","6f0c9f4f":"code","f1e5282f":"code","f643eee9":"code","30b8163a":"code","6da80311":"code","a56cdcf6":"code","af4fee83":"code","5e987947":"code","fe7eda57":"code","155a83e8":"code","6edd2e70":"code","86ff4929":"code","fa8a3b09":"code","9de96da1":"code","e7657a7c":"code","8b26c9c1":"code","bce69035":"code","2074c890":"code","9058812d":"code","1f3d13b5":"code","36ab9aa2":"code","d77b9aac":"code","34a68b45":"code","8c140377":"code","d390f36b":"code","3b555e04":"code","b797c703":"code","1fd31506":"code","658d01e7":"code","9ba66de4":"code","6c9a97d1":"code","47ded860":"code","10eeee01":"code","b4e8a7cb":"code","db63cacb":"markdown","d69c0d02":"markdown","56d9871e":"markdown","8ac8d2e1":"markdown","38d6e0d1":"markdown","ad47e693":"markdown"},"source":{"665e53a0":"import torch\nfrom torchtext import data\n\nSEED = 1234\nimport pandas as pd\nimport numpy as np\ntorch.manual_seed(SEED)\ntorch.cuda.manual_seed(SEED)\ntorch.backends.cudnn.deterministic = True\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nimport torchtext\n\nimport nltk\n\nimport random\nfrom sklearn.metrics import classification_report\n\nimport pyprind\n%matplotlib inline  ","baaf2c8f":"main_df = pd.read_csv(\"..\/input\/train.csv\")\nprint(main_df.shape)\nmain_df = main_df.sample(n=main_df.shape[0])\nmain_df = main_df[[\"question_text\", \"target\"]]\nmain_df.head()","e7dede24":"main_df.target.value_counts()","309a3825":"o_class = main_df.loc[main_df.target == 0, :]\nl_class = main_df.loc[main_df.target == 1, :]","c6786ef3":"# splitting test and train \ntest_o = o_class.iloc[:10000, :]\ntest_l = l_class.iloc[:10000, :]\n\nvalid_o = o_class.iloc[10000:20000, :]\nvalid_l = l_class.iloc[10000:20000, :]\n\ntrain_o = o_class.iloc[20000:, :]\ntrain_l = l_class.iloc[20000:, :]","a9a769e4":"train = pd.concat([train_o, train_l], axis=0)\nprint(train.shape)\n\nvalid = pd.concat([valid_o, valid_l], axis=0)\nprint(valid.shape)\n\ntest = pd.concat([test_o, test_l], axis=0)\nprint(test.shape)","4cf66c31":"train.target.value_counts()","b5f93ffc":"test.target.value_counts()","c4250fe2":"valid.target.value_counts()","adf80b44":"!mkdir torchtext_data","8338b177":"train.to_csv(\"torchtext_data\/train.csv\", index=False)\ntest.to_csv(\"torchtext_data\/test.csv\", index=False)\nvalid.to_csv(\"torchtext_data\/valid.csv\", index=False)","dc533e2f":"# freeing up some memory\ndel main_df, train, test, valid, train_l, train_o, test_l, test_o, valid_l,valid_o, o_class, l_class","d1e28a7a":"import spacy\nspacy_en = spacy.load('en')\n# nltk.download('punkt')","6f0c9f4f":"is_cuda = torch.cuda.is_available()\nprint(\"Cuda Status on system is {}\".format(is_cuda))","f1e5282f":"# sample tokenizer which you can use\ndef tokenizer(text):\n    return [tok for tok in nltk.word_tokenize(text)]","f643eee9":"# tokenizer = \"spacy\" uses spacy's tokenizer\nTEXT = data.Field(sequential=True, tokenize=\"spacy\")\nLABEL = data.LabelField(dtype=torch.long, sequential=False)","30b8163a":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","6da80311":"# loading train, test and validation data \ntrain_data, valid_data, test_data = data.TabularDataset.splits(\n    path=\"torchtext_data\/\", train=\"train.csv\", \n    validation=\"valid.csv\", test=\"test.csv\",format=\"csv\", skip_header=True, \n    fields=[('Text', TEXT), ('Label', LABEL)]\n)","a56cdcf6":"print(f'Number of training examples: {len(train_data)}')\nprint(f'Number of valid examples: {len(valid_data)}')\nprint(f'Number of testing examples: {len(test_data)}')","af4fee83":"TEXT.build_vocab(train_data, vectors=torchtext.vocab.Vectors(\"..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt\"), \n                 max_size=20000, min_freq=10)\nLABEL.build_vocab(train_data)","5e987947":"# if you dont wanna load any word vectors\n# TEXT.build_vocab(train_data, max_size=50000)\n# LABEL.build_vocab(train_data)","fe7eda57":"print(f\"Unique tokens in TEXT vocabulary: {len(TEXT.vocab)}\")\nprint(f\"Unique tokens in LABEL vocabulary: {len(LABEL.vocab)}\")","155a83e8":"BATCH_SIZE = 20\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n# keep in mind the sort_key option \ntrain_iterator, valid_iterator, test_iterator = data.BucketIterator.splits(\n    (train_data, valid_data, test_data), sort_key=lambda x: len(x.Text),\n    batch_size=BATCH_SIZE,\n    device=device)\n","6edd2e70":"LABEL.vocab.freqs\n# torch.cuda.empty_cache()","86ff4929":"class RNN(nn.Module):\n    def __init__(self, input_dim, embedding_dim, hidden_dim, output_dim):\n        super().__init__()\n        \n        self.embedding = nn.Embedding(input_dim, embedding_dim)\n        self.rnn = nn.RNN(embedding_dim, hidden_dim)\n        self.fc = nn.Linear(hidden_dim, output_dim)\n        \n    def forward(self, x):\n\n        #x = [sent len, batch size]\n        \n        embedded = self.embedding(x)\n        \n        #embedded = [sent len, batch size, emb dim]\n        \n        output, hidden = self.rnn(embedded)\n        \n        #output = [sent len, batch size, hid dim]\n        #hidden = [1, batch size, hid dim]\n        \n        assert torch.equal(output[-1,:,:], hidden.squeeze(0))\n        \n        out = self.fc(hidden)\n        return out","fa8a3b09":"INPUT_DIM = len(TEXT.vocab)\nEMBEDDING_DIM = 300\nHIDDEN_DIM = 374\nOUTPUT_DIM = 2\n\nmodel = RNN(INPUT_DIM, EMBEDDING_DIM, HIDDEN_DIM, OUTPUT_DIM)","9de96da1":"pretrained_embeddings = TEXT.vocab.vectors\n\nprint(pretrained_embeddings.shape)","e7657a7c":"model.embedding.weight.data = pretrained_embeddings.cuda()","8b26c9c1":"class_weights = torch.tensor([1.0, 15.0]).cuda()","bce69035":"optimizer = optim.SGD(model.parameters(), lr=1e-3)","2074c890":"criterion = nn.CrossEntropyLoss(weight=class_weights)","9058812d":"model = model.to(device)\ncriterion = criterion.to(device)","1f3d13b5":"def binary_accuracy(preds, y):\n    \"\"\"\n    Returns accuracy per batch, i.e. if you get 8\/10 right, this returns 0.8, NOT 8\n    \"\"\"\n\n    preds, ind= torch.max(F.softmax(preds, dim=-1), 1)\n    correct = (ind == y).float()\n    acc = correct.sum()\/float(len(correct))\n    return acc","36ab9aa2":"def train(model, iterator, optimizer, criterion):\n    \n    epoch_loss = 0\n    epoch_acc = 0\n    \n    model.train()\n    bar = pyprind.ProgBar(len(iterator), bar_char='\u2588')\n    for batch in iterator:\n        \n        optimizer.zero_grad()\n                \n        predictions = model(batch.Text).squeeze(0)\n#         print(predictions.shape, batch.Label.shape, model(batch.Text).shape)\n        loss = criterion(predictions, batch.Label)\n#         print(loss.shape)\n        acc = binary_accuracy(predictions, batch.Label)\n        \n        loss.backward()\n        \n        optimizer.step()\n        \n        epoch_loss += loss.item()\n        epoch_acc += acc.item()\n        bar.update()\n    return epoch_loss \/ len(iterator), epoch_acc \/ len(iterator)","d77b9aac":"def evaluate(model, iterator, criterion):\n    \n    epoch_loss = 0\n    epoch_acc = 0\n    \n    model.eval()\n    \n    with torch.no_grad():\n        bar = pyprind.ProgBar(len(iterator), bar_char='\u2588')\n        for batch in iterator:\n\n            predictions = model(batch.Text).squeeze(0)\n            \n            loss = criterion(predictions, batch.Label)\n            \n            acc = binary_accuracy(predictions, batch.Label)\n\n            epoch_loss += loss.item()\n            epoch_acc += acc.item()\n            bar.update()\n    return epoch_loss \/ len(iterator), epoch_acc \/ len(iterator)\n","34a68b45":"N_EPOCHS = 2\n\nfor epoch in range(N_EPOCHS):\n\n    train_loss, train_acc = train(model, train_iterator, optimizer, criterion)\n    valid_loss, valid_acc = evaluate(model, valid_iterator, criterion)\n    \n    print(f'| Epoch: {epoch+1:02} | Train Loss: {train_loss:.3f} | Train Acc: {train_acc*100:.2f}% | Val. Loss: {valid_loss:.3f} | Val. Acc: {valid_acc*100:.2f}% |')","8c140377":"test_loss, test_acc = evaluate(model, test_iterator, criterion)\n\nprint(f'| Test Loss: {test_loss:.3f} | Test Acc: {test_acc*100:.2f}% |')","d390f36b":"def predict_sentiment(sentence):\n    tokenized = [tok for tok in sentence.split()]\n    indexed = [TEXT.vocab.stoi[t] for t in tokenized]\n    tensor = torch.LongTensor(indexed).to(device)\n    \n    tensor = tensor.unsqueeze(1)\n#     print(tensor.shape)\n    prediction = model(tensor)\n#     print(prediction)\n    preds, ind= torch.max(F.softmax(prediction.squeeze(0), dim=-1), 1)\n#     print(preds)\n    return preds, ind","3b555e04":"text = \"My voice range is A2-C5. My chest voice goes up to F4. Included sample in my higher chest range. What is my voice type?\"\npredict_sentiment(text)[1].item()","b797c703":"# calculating classification report\ntest = pd.read_csv(\"torchtext_data\/test.csv\")","1fd31506":"pre = [predict_sentiment(k)[1].item() for k in test.question_text]","658d01e7":"print(classification_report(test.target, pre))","9ba66de4":"test_df = pd.read_csv(\"..\/input\/test.csv\")\nprint(test_df.shape)\ntest_df.head()","6c9a97d1":"test_predictions = [int(predict_sentiment(k)[1].item()) for k in test_df.question_text]","47ded860":"out_df = pd.DataFrame({\"qid\":test_df[\"qid\"].values})\nout_df['prediction'] = test_predictions\nprint(out_df.shape)\nout_df.head()","10eeee01":"out_df.to_csv(\"submission.csv\", index=False)","b4e8a7cb":"out_df.head()","db63cacb":"preparing balanced test and validation set","d69c0d02":"I am going to use spacy tokenizer. ","56d9871e":"## preparing sheets for train, validation and test set from entire data\n\ntorchtext can load a custom dataset in csv and json. I chose csv for my convinience.","8ac8d2e1":"Saving files to disk","38d6e0d1":"###  importing necessary things","ad47e693":"### using torchtext to load text data "}}