{"cell_type":{"7d96b0fc":"code","59e0483a":"code","ba0971e3":"code","4b5f236c":"code","8de5bc28":"code","fcf253e4":"code","002341fe":"code","ee30656e":"code","cf70d119":"code","8691c2b1":"code","aec54392":"code","0b235c65":"code","148cbc8c":"code","b27f4db2":"markdown","da7b81ac":"markdown","05dff6e2":"markdown","f8790234":"markdown","68b601b2":"markdown","4b960600":"markdown","3609ae01":"markdown","e0ce1b3e":"markdown","b621ea55":"markdown","811693a6":"markdown"},"source":{"7d96b0fc":"# Additional imports \nimport pandas as pd \nimport numpy as np\n\n# Imports for creating plots\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 18, 7\n\nimport warnings\nwarnings.filterwarnings('ignore')","59e0483a":"file_path = '..\/input\/microsoft-stock-time-series-analysis\/Microsoft_Stock.csv'\ndf = pd.read_csv(file_path, parse_dates=['Date'])\ndf.head(5)","ba0971e3":"plt.plot(df['Date'], df['Close'])\nplt.show()","4b5f236c":"train_size = int(len(df)*0.75)\ntest_size = len(df) - train_size","8de5bc28":"forecast_length = test_size","fcf253e4":"# We will use FEDOT framework version 0.3.1 for forecasting\n!pip install fedot==0.3.1","002341fe":"from fedot.api.main import Fedot\n\n# Chain and nodes\nfrom fedot.core.chains.chain import Chain\nfrom fedot.core.chains.node import PrimaryNode, SecondaryNode\n\n# Data \nfrom fedot.core.data.data import InputData\nfrom fedot.core.data.data_split import train_test_data_setup\nfrom fedot.core.repository.dataset_types import DataTypesEnum\n\n# Tasks\nfrom fedot.core.repository.tasks import Task, TaskTypesEnum, TsForecastingParams\n\n# Metric\nfrom sklearn.metrics import mean_absolute_error","ee30656e":"task = Task(TaskTypesEnum.ts_forecasting,\n            TsForecastingParams(forecast_length=forecast_length))\n\n# Load data from csv file and wrap it into InputData structure\ninput_data = InputData.from_csv_time_series(task, file_path, target_column='Close')\n\n# Divide into train and test \ntrain_data, test_data = train_test_data_setup(input_data)","cf70d119":"# Define parameters\ntask_parameters = TsForecastingParams(forecast_length=forecast_length)\n\n# Init model for the time series forecasting\nmodel = Fedot(problem='ts_forecasting', task_params=task_parameters)\n\n# Run AutoML model design in the same way\nchain = model.fit(features=train_data)","8691c2b1":"# Use model to obtain forecast\nforecast = model.predict(features=test_data)","aec54392":"def display_results(actual_time_series, predicted_values, len_train_data, y_name = 'Microsoft Stocks Price'):\n    \"\"\"\n    Function for drawing plot with predictions and check metrics\n    \n    :param actual_time_series: the entire array with one-dimensional data\n    :param predicted_values: array with predicted values\n    :param len_train_data: number of elements in the training sample\n    :param y_name: name of the y axis\n    \"\"\"\n    \n    plt.plot(np.arange(0, len(actual_time_series)), \n             actual_time_series, label = 'Actual values', c = 'green')\n    plt.plot(np.arange(len_train_data, len_train_data + len(predicted_values)), \n             predicted_values, label = 'Predicted', c = 'blue')\n    # Plot black line which divide our array into train and test\n    plt.plot([len_train_data, len_train_data],\n             [min(actual_time_series), max(actual_time_series)], c = 'black', linewidth = 1)\n    plt.ylabel(y_name, fontsize = 15)\n    plt.xlabel('Time index', fontsize = 15)\n    plt.legend(fontsize = 15, loc='upper left')\n    plt.grid()\n    plt.show()\n    \n    mae_value = mean_absolute_error(actual_time_series[len_train_data:], predicted_values)\n    print(f'MAE value: {mae_value}')","0b235c65":"display_results(np.array(df['Close']), forecast, len(train_data.features))","148cbc8c":"chain.show()","b27f4db2":"## Exploratory visualizations ","da7b81ac":"## Train test split","05dff6e2":"# AutmoML framework FEDOT\n\nfedot version 0.3.1","f8790234":"# Microsoft Stocks Price Prediction (using AutoML framework FEDOT)\n\nThis notebook was inspired by that [post](https:\/\/www.kaggle.com\/paramarthasengupta\/microsoft-stocks-price-prediction?select=Microsoft_Stock.csv). \n\nTask: Time series forecasting","68b601b2":"Check obtained chain structure","4b960600":"Note that it may be inefficient to predict the time series of stocks as one-dimensional arrays. it will be better to use additional data, which, however, does not guarantee a very accurate result.","3609ae01":"Prepare function for visualisation.","e0ce1b3e":"## [Original repository on GitHub](https:\/\/github.com\/nccr-itmo\/FEDOT)\n\n--- \n","b621ea55":"The length of the forecast is equal to the length of the validation block","811693a6":"Launch AutmoML framework for two minutes\n\n*Due to the specifics of the jupiter notebooks format, in order not to overload the page with unnecessary logs, we do not show the cell output below.\n\nThe log must starts with: \"Composition started. Parameters tuning: True. Set of candidate models: ['linear', 'lasso', 'ridge', 'xgbreg', 'adareg', 'gbr', 'dtreg', 'treg', 'rfr', 'svr', 'sgdr', 'ar', 'scaling', 'normalization', 'simple_imputation', 'pca', 'poly_features', 'ransac_lin_reg', 'ransac_non_lin_reg', 'rfe_lin_reg', 'rfe_non_lin_reg', 'lagged', 'smoothing', 'gaussian_filter']. Composing time limit: 2 min\n\nModel composition started ...\""}}