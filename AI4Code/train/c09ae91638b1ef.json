{"cell_type":{"386ba468":"code","6faf6f65":"code","746ec942":"code","918cceac":"code","ff05dd88":"code","ac78e746":"code","c13ce646":"markdown","97e39da6":"markdown","cfc689e1":"markdown","d954c48d":"markdown","d1fa3677":"markdown","78086f4d":"markdown","5cf0d59c":"markdown"},"source":{"386ba468":"import os\nimport random\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","6faf6f65":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer=RMSprop(lr=0.001), loss='binary_crossentropy', metrics=['acc'])\n","746ec942":"print (os.listdir('\/kaggle\/input\/facemask-detection-dataset-20000-images\/'))","918cceac":"TRAINING_DIR = \"\/kaggle\/input\/facemask-detection-dataset-20000-images\/\"\ntrain_datagen = ImageDataGenerator(rescale=1.0\/255.,validation_split=0.25,  \n                                  horizontal_flip=True,\n                                  vertical_flip=True,\n                                  featurewise_center=True,\n                                  rotation_range=20,\n                                  width_shift_range=0.15,\n                                  height_shift_range=0.25,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  )\n\ntrain_generator = train_datagen.flow_from_directory(TRAINING_DIR,\n                                                    class_mode='binary',\n                                                    subset = 'training',\n                                                    target_size=(150, 150))\n\nvalidation_generator = train_datagen.flow_from_directory(TRAINING_DIR,\n                                                         class_mode='binary',\n                                                         subset = 'validation',\n                                                         target_size=(150, 150))","ff05dd88":"history = model.fit(train_generator, epochs=5, validation_data=validation_generator)","ac78e746":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\n\nacc=history.history['acc']\nval_acc=history.history['val_acc']\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(len(acc))\n\nplt.plot(epochs, acc, 'r', \"Training Accuracy\")\nplt.plot(epochs, val_acc, 'b', \"Validation Accuracy\")\nplt.title('Training and validation accuracy')\nplt.figure()\n\nplt.plot(epochs, loss, 'r', \"Training Loss\")\nplt.plot(epochs, val_loss, 'b', \"Validation Loss\")\nplt.figure()","c13ce646":"We have front face masked data, that's why we don't need complex model.","97e39da6":"# Image Data Processing ","cfc689e1":"# Model Performance","d954c48d":"# Create Model","d1fa3677":"Because of simple validation data we got Higher accuracy","78086f4d":"Here we Get 99% accuracy and 99% validation accuracy","5cf0d59c":"# Import Library"}}