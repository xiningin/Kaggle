{"cell_type":{"ce0f0bdc":"code","adf3da8e":"code","cb418a16":"code","7f3b8746":"code","74bdf413":"code","4e83fafe":"code","c2356faa":"code","15c57eae":"code","373cfcbe":"code","a5c23ede":"code","24beaf2f":"code","1f45dbb0":"code","63b8e04f":"code","5a98f8e4":"code","19e8ee56":"code","586cc901":"code","d6da74c2":"code","80898e24":"code","291dd3ba":"code","6e47c0b0":"code","9c37fc2c":"code","71e3b951":"code","bacd6cd3":"code","d4198d90":"code","00492c6a":"code","8561786c":"code","5a7318c2":"code","e9961152":"code","0482b91c":"code","548d52a9":"code","9a626d15":"code","710c160e":"code","6b0c2108":"code","4aec1a12":"code","699b8640":"code","ce841dd1":"code","04525941":"code","39318e80":"code","28737c41":"code","e6e9d197":"code","5ed91d18":"code","900d2a76":"code","eb7aa2cc":"code","76ad13dc":"code","6da4949f":"code","5b1c461c":"code","e6db9ed6":"code","ca213c68":"code","1da40467":"code","2cff1255":"code","a2dd8db2":"code","8c971473":"code","67552a6d":"code","cdfdd2c8":"code","ad7dca1f":"code","7ab40a3b":"code","1ed64e7c":"code","ffbaaa93":"code","79c0f926":"code","993c7ffd":"code","7d24ff22":"code","319aabc8":"markdown","bd41b062":"markdown","49b7e838":"markdown","5c8835a0":"markdown"},"source":{"ce0f0bdc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","adf3da8e":"import pandas as pd\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom pandas import Series\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\nfrom sklearn.base import clone\nimport datetime\nfrom datetime import datetime, timedelta\nimport math\n\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor, AdaBoostRegressor\nfrom pprint import pprint","cb418a16":"def mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","7f3b8746":"DIR_TRAIN  = '..\/input\/all-auto-ru-14-11-2020csv\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n#DIR_TRAIN  = '..\/input\/parsing-all-moscow-auto-ru-09-09-2020\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nDIR_TEST   = '..\/input\/sf-dst-car-price-prediction\/'","74bdf413":"train = pd.read_csv(DIR_TRAIN+'all_auto_ru_14_11_2020.csv') # \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n\n\n#train = pd.read_csv(DIR_TRAIN+'all_auto_ru_09_09_2020.csv') # \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ntest = pd.read_csv(DIR_TEST+'test.csv')\nsample_submission = pd.read_csv(DIR_TEST+'sample_submission.csv')","4e83fafe":"#train.head(5)\ntest.head(5)\n","c2356faa":"test.info()","15c57eae":"# test.isna().sum()","373cfcbe":"train.info()\n\n","a5c23ede":"train.head(5)","24beaf2f":"train['equipment_dict']","1f45dbb0":"train.info()","63b8e04f":"train['sample'] = 1\ntest['sample'] = 0\ncars = train.append(test, ignore_index=True, sort=False)\n\n# \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\ny = train['price']","5a98f8e4":"brands = test.brand.value_counts()\nbrand_dict = {brands.index[i]: brands[i] for i in range(len(brands))}\nbrand_dict.keys()","19e8ee56":"dict_keys = ['VOLKSWAGEN', 'NISSAN', 'MERCEDES', 'TOYOTA', 'AUDI', 'MITSUBISHI', 'SKODA', 'VOLVO', 'HONDA', 'INFINITI', 'LEXUS']\nnew_train_f = train[train['brand']== 'BMW']\nfor unit in dict_keys:\n    new_train = train[train['brand']== unit]\n    new_train_f = new_train_f.append(new_train, ignore_index=True, sort=False)","586cc901":"new_train_f.info()","d6da74c2":"new_train_f.isna().sum()","80898e24":"test.info()","291dd3ba":"# \u0421\u043f\u0438\u0441\u043a\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 cars\nnum_f = ['modelDate', 'productionDate', 'mileage', 'enginePower', 'engineDisplacement']\ncat_f = ['bodyType', 'brand', 'color', 'fuelType', 'model_name', 'numberOfDoors', 'vehicleConfiguration',\n         'vehicleTransmission', 'vendor']\nall_f = ['modelDate', 'productionDate', 'mileage', 'enginePower', 'engineDisplacement', 'bodyType', 'model_name', 'numberOfDoors', 'vehicleConfiguration' ]","6e47c0b0":"# for i in num_f:\n#     plt.figure()\n#     sns.distplot(train[i])\n#     plt.title(i)\n#     plt.show()","9c37fc2c":"cars = cars.drop(columns=['equipment_dict', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'])\ncars['\u041f\u0422\u0421'] = cars['\u041f\u0422\u0421'].fillna(cars['\u041f\u0422\u0421'].mode()[0])","71e3b951":"cars['complectation_dict'] = cars['complectation_dict'].fillna('other')","bacd6cd3":"cars.isna().sum()","d4198d90":"train.head(5)","00492c6a":"\ntest.info()","8561786c":"train.isna().sum()","5a7318c2":"train = train.drop(columns=['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'price_EUR', 'price_USD'])\ntrain['description'] = train['description'].fillna('other')\ntrain['name'] = train['name'].fillna('other')\ntrain['super_gen'] = train['super_gen'].fillna('other')\ntrain['bodyType'] = train['bodyType'].fillna(train['bodyType'].mode()[0])\ntrain['priceCurrency'] = train['priceCurrency'].fillna(train['priceCurrency'].mode()[0])\ntrain['modelDate'] = train['modelDate'].fillna(train['modelDate'].mode()[0])\ntrain['numberOfDoors'] = train['numberOfDoors'].fillna(train['numberOfDoors'].mode()[0])\ntrain['vehicleConfiguration'] = train['vehicleConfiguration'].fillna(train['vehicleConfiguration'].mode()[0])\ntrain['vehicleTransmission'] = train['vehicleTransmission'].fillna(train['vehicleTransmission'].mode()[0])\ntrain['\u041f\u0440\u0438\u0432\u043e\u0434'] = train['\u041f\u0440\u0438\u0432\u043e\u0434'].fillna(train['\u041f\u0440\u0438\u0432\u043e\u0434'].mode()[0])\ntrain['\u041f\u0422\u0421'] = train['\u041f\u0422\u0421'].fillna(train['\u041f\u0422\u0421'].mode()[0])\ntrain['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].fillna(train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].mode()[0])\ntrain['enginePower'] = train['enginePower'].fillna(train['enginePower'].median())\ntrain['price'] = train['price'].fillna(train['price'].median())","e9961152":"new_train_f = new_train_f.drop(columns=['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'price_EUR', 'price_USD'])\nnew_train_f['description'] = new_train_f['description'].fillna('other')\nnew_train_f['name'] = new_train_f['name'].fillna('other')\nnew_train_f['super_gen'] = new_train_f['super_gen'].fillna('other')\nnew_train_f['bodyType'] = new_train_f['bodyType'].fillna(new_train_f['bodyType'].mode()[0])\nnew_train_f['priceCurrency'] = new_train_f['priceCurrency'].fillna(new_train_f['priceCurrency'].mode()[0])\nnew_train_f['modelDate'] = new_train_f['modelDate'].fillna(new_train_f['modelDate'].mode()[0])\nnew_train_f['numberOfDoors'] = new_train_f['numberOfDoors'].fillna(train['numberOfDoors'].mode()[0])\nnew_train_f['vehicleConfiguration'] = new_train_f['vehicleConfiguration'].fillna(new_train_f['vehicleConfiguration'].mode()[0])\nnew_train_f['vehicleTransmission'] = new_train_f['vehicleTransmission'].fillna(new_train_f['vehicleTransmission'].mode()[0])\nnew_train_f['\u041f\u0440\u0438\u0432\u043e\u0434'] = new_train_f['\u041f\u0440\u0438\u0432\u043e\u0434'].fillna(new_train_f['\u041f\u0440\u0438\u0432\u043e\u0434'].mode()[0])\nnew_train_f['\u041f\u0422\u0421'] = new_train_f['\u041f\u0422\u0421'].fillna(new_train_f['\u041f\u0422\u0421'].mode()[0])\nnew_train_f['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = new_train_f['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].fillna(new_train_f['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].mode()[0])\nnew_train_f['enginePower'] = new_train_f['enginePower'].fillna(new_train_f['enginePower'].median())\nnew_train_f['price'] = new_train_f['price'].fillna(train['price'].median())","0482b91c":"new_train_f['sample'] = 1\ntest['sample'] = 0\nnew_cars = new_train_f.append(test, ignore_index=True, sort=False)\n\n# \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\ny = train['price']\n\nnew_cars = new_cars.drop(['parsing_unixtime', 'start_date', 'complectation_dict', \n                          'description', 'equipment_dict', 'image'], axis=1)","548d52a9":"new_train_f.isna().sum()","9a626d15":"new_train_f.info()","710c160e":"train['equipment_dict']\n","6b0c2108":"test.info()","4aec1a12":"test = test.drop(columns=['complectation_dict', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'car_url'])","699b8640":"\ntest['equipment_dict'] = test['equipment_dict'].fillna('other')","ce841dd1":"test.isna().sum()\n","04525941":"# # \u041c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 int64 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0438 \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n# for col in num_f:\n#     train[col] = train[col].astype('int64')","39318e80":"cat_f = ['bodyType', 'brand', 'color', 'fuelType', 'model_name', 'numberOfDoors', 'vehicleConfiguration',\n         'vehicleTransmission', 'vendor', 'complectation_dict', 'description', \n         'engineDisplacement', 'equipment_dict', 'model_info', 'name', 'start_date',\n        'priceCurrency', 'super_gen', '\u041f\u0422\u0421', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c']\ncat_f_test = ['bodyType', 'brand', 'color', 'fuelType', 'model_name', 'numberOfDoors', 'vehicleConfiguration',\n         'vehicleTransmission', 'vendor', 'description', \n         'engineDisplacement', 'equipment_dict', 'model_info', 'name',\n        'priceCurrency', 'super_gen', '\u041f\u0422\u0421', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', 'enginePower',\n             'image', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f']\n\n# \u041a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n# for col in cat_f:\n#     train[col] = train[col].astype('category').cat.codes\n    \n# for col in cat_f_test:\n#     test[col] = test[col].astype('category').cat.codes\n    \n# for col in cat_f:\n#     new_train_f[col] = new_train_f[col].astype('category').cat.codes","28737c41":"# new_train_f['sample'] = 1\n# test['sample'] = 0\n# new_cars = new_train_f.append(test, ignore_index=True, sort=False)\n\n# # \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\n# y = train['price']\n\n# new_cars = new_cars.drop(['parsing_unixtime', 'start_date', 'complectation_dict', \n#                           'description', 'equipment_dict', 'image'], axis=1)","e6e9d197":"new_cars.info()","5ed91d18":"new_cars.modelDate.value_counts()","900d2a76":"new_cars.describe(include='object')","eb7aa2cc":"# def label_encoding(data, col):\n#     unique_values = data[col].unique()\n#     enconding_values = range(len(unique_values))\n#     encoding_dict = dict(zip(unique_values, enconding_values))\n#     #print(encoding_dict)\n#     return data[col].replace(encoding_dict)\n\n# new_cars['bodyType'] = label_encoding(new_cars, 'bodyType')\n# new_cars['engineDisplacement'] = label_encoding(new_cars, 'engineDisplacement')\n# new_cars['enginePower'] = label_encoding(new_cars, 'enginePower')\n\nnew_cars.enginePower = new_cars.enginePower.apply(lambda x: str(x))\nle = LabelEncoder()\nle_list = ['bodyType', 'engineDisplacement', 'enginePower', 'model_info', 'model_name', 'name',\n          'super_gen', 'vehicleConfiguration']\nfor name in le_list:\n    new_cars[name] = le.fit_transform(new_cars[name])\n\n#new_cars['enginePower'] = le.fit_transform(new_cars['enginePower'])","76ad13dc":"dummy_list = [ 'color','brand', 'fuelType', 'priceCurrency', 'vehicleTransmission', 'vendor',\n             '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u041f\u0422\u0421', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f']\nfor name in dummy_list:\n    dummy = pd.get_dummies(new_cars[[name]])\n    new_cars = new_cars.join(dummy)\n    new_cars = new_cars.drop([name], axis=1)\n","6da4949f":"new_cars['car_age'] = (2021 - round(new_cars['modelDate']))","5b1c461c":"new_cars['mileage_year'] = round(new_cars['mileage'] \/ new_cars['car_age']).astype(int)","e6db9ed6":"new_cars.head()","ca213c68":"for i in all_f:\n    plt.figure()\n    sns.distplot(new_cars[i])\n    plt.title(i)\n    plt.show()","1da40467":"#\u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c heatmap\ncorrelation = new_cars[all_f].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","2cff1255":"# \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e train \u0438 test\ntrain = new_cars.query('sample == 1').drop(['sample', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'car_url'], axis=1)\ntest = new_cars.query('sample == 0').drop(['sample', 'price', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'car_url'], axis=1)\n\n#test = cars[cars['sample']==0]","a2dd8db2":"test.info()","8c971473":"train.info()","67552a6d":"y = train['price']\nX = train.drop(['price'], axis=1)\n# y = train['price']\n# X = train.drop(['start_date', 'price', 'complectation_dict'], axis=1)\n\n#train.drop(['start_date', 'price', 'complectation_dict'], axis=1)\n","cdfdd2c8":" # \u0414\u0435\u043b\u0438\u043c train \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=42)","ad7dca1f":"ITERATIONS = 5000\nLR         = 0.15\nmodel = CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = LR,\n                          depth = 8,\n                          random_seed = 42,\n                          eval_metric='MAPE',\n                          custom_metric=['RMSE']\n                         )\nmodel.fit(X_train, y_train,\n#         cat_features=cat_f,\n         eval_set=(X_test, y_test),\n         verbose_eval=0,\n         #use_best_model=True,\n         #plot=True\n         )\npredict = model.predict(X_test)\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict))*100:0.4f}%\")","7ab40a3b":"# # B: \u043f\u0430\u0440-\u0440\u044b \u043b\u0435\u0441\u0430 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435\n# rf = RandomForestRegressor(\n#  n_estimators=300, \n#  min_samples_split=2,\n#  min_samples_leaf=1,\n#  max_features=10,\n#  max_depth=77,\n#  bootstrap=True, \n#  random_state=42)\n\n# rf.fit(X_train, y_train)\n# test_predict = rf.predict(X_test)\n# print(f\"Test MAPE: {mape(y_test, test_predict)*100:0.4f}%\")\n","1ed64e7c":"sample_submission.info()\n\n\n#train = train.drop(columns=['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'price_EUR', 'price_USD'])","ffbaaa93":"# print(X.info())\n\n# test.info()","79c0f926":"\n\npredict_submission = model.predict(test)\nsample_submission['price'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)\n\n","993c7ffd":"# cars.info()","7d24ff22":"# cars = cars.drop(['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'], axis = 1)","319aabc8":"# Lable Encoding","bd41b062":"# EDA","49b7e838":"# \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","5c8835a0":"# Model"}}