{"cell_type":{"e58ffe11":"code","569e1e5c":"code","0279e01d":"code","d2597afb":"code","22b8af27":"code","eadda831":"code","4f784c83":"code","6b7a4102":"code","45424422":"code","b3b4d423":"code","695bc0fa":"code","dcfe54f9":"code","b535e732":"code","fe957d3d":"code","57860c6c":"code","0ebc3d97":"code","0e269a71":"code","1f3f271a":"code","630d4243":"code","849fb740":"code","e3edd61d":"code","042cf0be":"code","2419fbc3":"code","79af7732":"code","e5648325":"code","2a0a388e":"code","ba780697":"markdown","33a14aa6":"markdown","8cd5d311":"markdown","43cecd1e":"markdown","943c1706":"markdown","ab9e6a92":"markdown","a8505737":"markdown","d6b4f852":"markdown","620f86da":"markdown","14fd7049":"markdown","38ab29fa":"markdown","84d99750":"markdown","72214bf9":"markdown"},"source":{"e58ffe11":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots","569e1e5c":"power_df = pd.read_csv(\"..\/input\/daily-power-generation-in-india-20172020\/file.csv\", thousands=',', \n                       skiprows=1,\n                       names=['Date', 'Region', \n                              'Thermal Actual', 'Thermal Estimated',\n                              'Nuclear Actual', 'Nuclear Estimated',\n                              'Hydro Actual', 'Hydro Estimated'])","0279e01d":"df = pd.read_html(\"https:\/\/en.wikipedia.org\/wiki\/List_of_states_and_union_territories_of_India_by_area\")\n\nstate_df = df[1].drop([\"Country of comparable size (land mass)\", \n            \"Ref\", \"Rank\"], \n           axis=1).drop([28,35,36,37]).reset_index(drop=True)","d2597afb":"population_df = pd.read_html(\"https:\/\/en.wikipedia.org\/wiki\/List_of_states_and_union_territories_of_India_by_population\")","22b8af27":"population_df = population_df[1][[\"State or union territory\", \"Population\", \"Area[16]\", \"Density[a]\"]]\n\npopulation_df.columns = [\"State\",\"Population\",\"Area\",\"Density\"]\n\npopulation_df.replace(\"Manipur[c]\",\"Manipur\", inplace=True)","eadda831":"state_df = state_df.merge(population_df, left_on=\"State \/ Union territory (UT)\",\n                          right_on=\"State\").drop([\"State \/ Union territory (UT)\"], \n                                                      axis=1)","4f784c83":"state_df.Population = state_df.Population.apply(lambda x: int(x.replace(\",\",\"\").replace(\"[b]\",\"\")))\nstate_df.Region = state_df.Region.apply(lambda x: \"NorthEastern\" if x==\"Northeastern\" else x)","6b7a4102":"state_df.replace(\"Central\",\"Western\", inplace=True)\n\nstate_df.groupby(\"Region\")[[\"State\",\"Population\"]]\\\n                            .agg({\"State\":\"count\", \n                                  \"Population\":\"sum\"})","45424422":"state_distribution = state_df.groupby(\"Region\")[[\"State\",\"Population\"]]\\\n                                                    .agg({\"State\":\"count\", \n                                                          \"Population\":\"sum\"})\\\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_trace(go.Bar(x=state_distribution.index, \n                     y=state_distribution.State,\n                     name='State per Region'),\n              row=1, col=1)\nfig.add_trace(go.Bar(x=state_distribution.index, \n                     y=state_distribution.Population,\n                     name='Population per Region'),\n              row=1, col=2)\n\nfig.update_layout(\n    showlegend=False,\n    title={'text': \"Distribution of States and Population in Regions\",\n        'y':0.9,\n        'x':0.5},\n    yaxis_title=\"Frequency\",\n    yaxis2_title=\"Population\",\n    xaxis_title=\"\")\n\nfig.show()","b3b4d423":"power_df.head()","695bc0fa":"missing = pd.DataFrame(power_df.isna().sum()\/power_df.shape[0]).T\n\nmissing.style.background_gradient(cmap='Reds', axis=1)","dcfe54f9":"power_df[power_df[\"Nuclear Actual\"].isna()].Region.value_counts()","b535e732":"power_columns = power_df.columns.difference([\"Date\",\"Region\"])\npower_df.groupby(\"Region\")[power_columns].sum()\\\n                   .style.background_gradient(cmap='hsv',\n                                              subset=([\"Eastern\",\n                                                       \"NorthEastern\"],\n                                                      [\"Nuclear Actual\",\n                                                      \"Nuclear Estimated\"]))","fe957d3d":"power_df.fillna(0, inplace=True)","57860c6c":"plt.figure(figsize=(15,5))\nplt.subplot(131)\nsns.heatmap(power_df.filter(regex=\"^Hydro.*\").corr(), \n            annot=True, cbar=False,\n            xticklabels=[\"Hydro Actual\", \"Hydro Estimated\"],\n            yticklabels=[\"Hydro Actual\", \"Hydro Estimated\"])\nplt.yticks(va=\"center\")\nplt.xticks(rotation=0)\nplt.title(\"Hydro Eenrgy Correlation\")\n\nplt.subplot(132)\nsns.heatmap(power_df.filter(regex=\"^Nuclear.*\").corr(), \n            annot=True, cbar=False,\n            xticklabels=[\"Nuclear Actual\", \"Nuclear Estimated\"],\n            yticklabels=[\"Nuclear Actual\", \"Nuclear Estimated\"])\nplt.yticks(va=\"center\")\nplt.xticks(rotation=0)\nplt.title(\"Nuclear Eenrgy Correlation\")\n\nplt.subplot(133)\nsns.heatmap(power_df.filter(regex=\"^Thermal.*\").corr(), \n            annot=True, cbar=False,\n            xticklabels=[\"Thermal Actual\", \"Thermal Estimated\"],\n            yticklabels=[\"Thermal Actual\", \"Thermal Estimated\"])\nplt.yticks(va=\"center\")\nplt.xticks(rotation=0)\nplt.title(\"Thermal Eenrgy Correlation\")\n\nplt.show()","0ebc3d97":"power_df[\"Total Generation Actual\"] = power_df.filter(regex=\".*Actual.*\").sum(axis=1)\npower_df[\"Total Generation Estimated\"] = power_df.filter(regex=\".*Estimated.*\").sum(axis=1)","0e269a71":"power_by_date = power_df.groupby(\"Date\")[power_columns.union([\"Total Generation Actual\",\n                                                               \"Total Generation Estimated\"])].sum().reset_index()","1f3f271a":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=power_by_date[\"Date\"],\n    y=power_by_date[\"Thermal Actual\"],\n    name='Thermal Generation',\n    mode='lines'))\n    \nfig.add_trace(go.Scatter(\n    x=power_by_date[\"Date\"],\n    y=power_by_date[\"Total Generation Actual\"]\/3,\n    name='Average Generation',\n    mode='lines'))\n\n\nfig.add_trace(go.Scatter(\n    x=power_by_date[\"Date\"],\n    y=power_by_date[\"Hydro Actual\"],\n    name='Hydro Generation',\n    mode='lines'))\n\nfig.add_trace(go.Scatter(\n    x=power_by_date[\"Date\"],\n    y=power_by_date[\"Nuclear Actual\"],\n    name='Nuclear Generation',\n    mode='lines'))\n\nfig.update_layout(\n    title={'text': \"Power Generation in India\",\n        'y':0.95,\n        'x':0.5},\n    yaxis_title=\"Power Generation in MU\",\n    xaxis_title=\"\",\n    legend={'traceorder':'normal'})\n\nfig.show()","630d4243":"power_by_region = power_df.groupby(\"Region\")[['Total Generation Actual','Thermal Actual',\n                                             'Nuclear Actual','Hydro Actual']].sum().reset_index()\n\npower_by_region = power_by_region.merge(state_distribution, on=\"Region\")\n\npower_by_region[\"Total Generation Actual\"] = power_by_region[\"Total Generation Actual\"]\/power_by_region[\"Population\"]*10000\npower_by_region[\"Thermal Actual\"] = power_by_region[\"Thermal Actual\"]\/power_by_region[\"Population\"]*10000\npower_by_region[\"Nuclear Actual\"] = power_by_region[\"Nuclear Actual\"]\/power_by_region[\"Population\"]*10000\npower_by_region[\"Hydro Actual\"] = power_by_region[\"Hydro Actual\"]\/power_by_region[\"Population\"]*10000","849fb740":"figure = go.Figure()\n\nfigure.add_trace(go.Bar(x = power_by_region.Region,\n                        y = power_by_region[\"Thermal Actual\"],\n                        name=\"Thermal\", textposition='outside',\n                        marker_color='#ef553b',\n                        text=round(power_by_region[\"Thermal Actual\"],2)))\n\nfigure.add_trace(go.Bar(x = power_by_region.Region,\n                        y = power_by_region[\"Hydro Actual\"],\n                        name=\"Hydro\",textposition='outside',\n                        marker_color='#636efa',\n                        text=round(power_by_region[\"Hydro Actual\"],2)))\n\nfigure.add_trace(go.Bar(x = power_by_region.Region,\n                        y = power_by_region[\"Nuclear Actual\"],\n                        name=\"Nuclear\", textposition='outside',\n                        marker_color='#2ca02c',\n                        text=round(power_by_region[\"Nuclear Actual\"],2)))\n\nfigure.update_layout(showlegend = True,\n                     barmode='group',\n                    title={'text': \"Power Generation for every 10,000 person in each Region\",\n                    'y':0.95,\n                    'x':0.5})","e3edd61d":"!wget https:\/\/gist.githubusercontent.com\/jbrobst\/56c13bbbf9d97d187fea01ca62ea5112\/raw\/e388c4cae20aa53cb5090210a42ebb9b765c0a36\/india_states.geojson","042cf0be":"import geopandas as gpd\n\n\nstates = gpd.read_file('india_states.geojson')\nstates.head()","2419fbc3":"# both files uses different notation for and!\nstate_region = state_df[[\"State\",\"Region\"]].replace(\"Jammu and Kashmir\", \"Jammu & Kashmir\")","79af7732":"in_regions = states.merge(state_region, \n                          left_on=\"ST_NM\", \n                          right_on=\"State\").dissolve(by=\"Region\").reset_index()[[\"Region\",\"geometry\"]]","e5648325":"fig = px.choropleth(\n    power_by_region,\n    geojson=in_regions,\n    featureidkey='properties.Region',\n    locations='Region',\n    color='Total Generation Actual',\n    color_continuous_scale='Reds'\n)\n\nfig.update_geos(fitbounds=\"locations\", visible=False)\n\nfig.update_layout(\n    title=dict(\n        text=\"Total Electricity Generation for every 10.000 person 2017\/2020\",\n        xanchor='center',\n        x=0.5,\n        yref='paper',\n        yanchor='bottom',\n        y=0.9,\n        pad={'b': 10}\n    ),\n    margin={'r': 0, 't': 30, 'l': 0, 'b': 0},\n    height=550,\n    width=750\n)\n\nfig.layout[\"coloraxis\"][\"colorbar\"] = dict(\n        title={'text': \"Electricity Generation\"},\n\n        thickness=15,\n        len=0.35,\n        bgcolor='rgba(255,255,255,0.6)',\n    \n        xanchor='left',\n        x=0.01,\n        yanchor='bottom',\n        y=0.05\n    )\n\nfig.show(config = dict({'scrollZoom': False}))","2a0a388e":"fig = px.choropleth(\n    state_df.replace(\"Jammu and Kashmir\",\"Jammu & Kashmir\"),\n    geojson=states,\n    featureidkey='properties.ST_NM',\n    locations='State',\n    color='Population',\n    color_continuous_scale='Reds'\n)\n\nfig.update_geos(fitbounds=\"locations\", visible=False)\n\nfig.update_layout(\n    title=dict(\n        text=\"Population in each State\",\n        xanchor='center',\n        x=0.5,\n        yref='paper',\n        yanchor='bottom',\n        y=0.9,\n        pad={'b': 10}\n    ),\n    margin={'r': 0, 't': 30, 'l': 0, 'b': 0},\n    height=550,\n    width=750\n)\n\nfig.layout[\"coloraxis\"][\"colorbar\"] = dict(\n        title={'text': \"Population\"},\n\n        thickness=15,\n        len=0.35,\n        bgcolor='rgba(255,255,255,0.6)',\n    \n        xanchor='left',\n        x=0.01,\n        yanchor='bottom',\n        y=0.05\n    )\n\nfig.show(config = dict({'scrollZoom': False}))","ba780697":"Since the are all very highly correlated let's study only the Actual Power Generation.\n\nLet's see the time plot of the Energy production in India.","33a14aa6":"Using the 2011 census we can also get the approximate population for each state, this is more useful than the number of states, as not all state have the same population.","8cd5d311":"Finally we do a chropleth for India, firstly we downlaod the geojson files for indian states, then we open it with GeoPandas and dissolve the states in the various Region, one thing to note is that the central state enery is not present in the dataset (It may be aggregated in some other region for example western). Turn out from an aswer of the dataset author that these two states are to be considered as Western states.\n\nThe example has been heavily copied from a solution in stack (only for the choropleth  graph code), so I will leave a [link](https:\/\/stackoverflow.com\/questions\/60910962\/is-there-any-way-to-draw-india-map-in-plotly) to the original question.","43cecd1e":"Something happened 22 September 2017, there is a deep peak depression just that day, or maybe just a data error. Another thing we note is the dependency of power generation on the thermal resources, thus consuming a lot of fossil fuels, while the Nuclear Energy Generation is very low, when compared to the average Generation.","943c1706":"The state table had some problem, so will scrape it down manually from the internet!","ab9e6a92":"40% of the Nuclear Generation data is missing :( \n\nWell let's start exploring a little bit about it, why is that so much of data is missing!","a8505737":"Well apparently the only regions where it has NaN values are the Easter and North Eastern regions, may be they don't have nuclear plants, let's check it by getting total energy consumption for each region and if these two regions have no nuclear energy production at all we can assume out hypothesis and impute the NaNs with 0.","d6b4f852":"As we can see from the plot above, the NorthEastern states even though had 8 states they have the lowest population.","620f86da":"We do also a population wise choropleth :), just to show how to do a choropleth statewise.","14fd7049":"# EDA for the Power Generation in India","38ab29fa":"Well the Estimations and Actual values of all three energy are higly correlated, we don't even need a statistical test to confirm it.\n\nNow let's sum the columns to get the total generation of energy, one for the actual value and one for the estiamted values.","84d99750":"There are a lot of Northern states,  while there are a very few Central State. If the data were divided into more sub direction, i.e. NorthWest, SouthEast etc., it might have been even more useful. ","72214bf9":"Let's see total energy consumption in 3 years grouped by regions, but it needs to be normalized for the number of states in each region to get an average of a state in a specific region, this is done because some regions have 10 states while some have only 2."}}