{"cell_type":{"10e338d8":"code","d87d3755":"code","a7585893":"code","fe1659e8":"code","4bf82769":"code","1305eba8":"code","46729a7a":"code","d128708c":"code","56550c2d":"code","94aab1bc":"code","a54d292a":"code","3fd4a105":"code","cfd25442":"code","99bad24a":"code","e97ea55b":"code","d704e638":"code","cde60588":"code","62899028":"code","9f8248cf":"code","57f942a2":"code","9ca58386":"code","b35d3f82":"code","a0a16d20":"code","6c54e995":"code","80769159":"code","b0bb7faa":"code","6de895d0":"code","dedc6288":"code","18aec9ff":"code","98fff353":"code","16205673":"code","0a5ddd57":"code","77041763":"code","8771a3bd":"code","5b4cef9e":"code","5d6f0aca":"code","d36c7576":"code","6c792b76":"code","164ffaba":"code","2770c80f":"code","53eeaa5b":"code","afa19051":"code","bcbbb9ff":"markdown","64f28e6c":"markdown"},"source":{"10e338d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d87d3755":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a7585893":"pd.pandas.set_option('display.max_columns',None)\ndf =pd.read_csv('\/kaggle\/input\/heart-disease-dataset\/heart.csv')\ndf.head()","fe1659e8":"df['target'].unique()","4bf82769":"#!pip install pandas-profiling \n#from pandas_profiling import ProfileReport\n\n# ### To Create the Simple report quickly\n#profile = ProfileReport(df, title='Heart Profiling Report', explorative=True)\n\n#profile.to_widgets() \n# profile.to_file(\"output.html\")","1305eba8":"df.isnull().sum()","46729a7a":"df.info()","d128708c":"df.dtypes","56550c2d":"sns.pairplot(df)","94aab1bc":"df.columns","a54d292a":"for feature in df.columns:\n    plt.hist(x=df[feature])\n    plt.title('{}'.format(feature))\n    plt.show()","3fd4a105":"sns.countplot(df['target'] ,)","cfd25442":"import numpy as np\ncorr = df.corr()\nfig, ax= plt.subplots(figsize=(8,8))\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\ndropSelf = np.zeros_like(corr)\ndropSelf[np.triu_indices_from(dropSelf)] = True\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, cmap=colormap, linewidths=.5, annot=True, fmt=\".2f\", mask=dropSelf)\nplt.show()","99bad24a":"cat_features = [feature for feature in df.columns if len(df[feature].unique()) < 7]\nprint('Caegorical features count {}'.format(len(cat_features)))\ncat_features","e97ea55b":"cat_features.remove('target')","d704e638":"cat_features","cde60588":"df.head()","62899028":"df1 = pd.get_dummies(df, columns=cat_features)","9f8248cf":"df1.shape","57f942a2":"df.shape","9ca58386":"from sklearn.preprocessing import StandardScaler\nstandscal = StandardScaler()\nscale_col = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']\ndf1[scale_col] =standscal.fit_transform(df1[scale_col])","b35d3f82":"df1[['age', 'trestbps', 'chol', 'thalach', 'oldpeak']].head()","a0a16d20":"X = df1.drop(columns='target')\ny = df1['target']","6c54e995":"X.shape","80769159":"y.shape","b0bb7faa":"df1.shape","6de895d0":"df1.head()","dedc6288":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)","18aec9ff":"print('X_train {} ,X_test {} ,y_train {} ,y_test{}'.format(X_train.shape,X_test.shape,y_train.shape,y_test.shape))","98fff353":"## Hyper Parameter Optimization\n\nparams={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    \n}\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nimport xgboost\nclassifier = xgboost.XGBClassifier()","16205673":"random_search = RandomizedSearchCV(classifier, param_distributions=params, n_iter=5, scoring='roc_auc', n_jobs=-1,cv=5,verbose=3)","0a5ddd57":"random_search.fit(X_train,y_train)","77041763":"random_search.best_estimator_","8771a3bd":"classifier = xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.3, gamma=0.0,\n              learning_rate=0.25, max_delta_step=0, max_depth=4,\n              min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n              nthread=None, objective='binary:logistic', random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n              silent=None, subsample=1, verbosity=1)\n","5b4cef9e":"from sklearn.model_selection import cross_val_score\nscore = cross_val_score(classifier, X, y, cv=10)","5d6f0aca":"score","d36c7576":"score.mean()","6c792b76":"classifier.fit(X_train,y_train)","164ffaba":"y_pred = classifier.predict(X_test)","2770c80f":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_pred,y_test)\ncm","53eeaa5b":"y_test","afa19051":"y_pred","bcbbb9ff":"## Handling Categorical Features","64f28e6c":"## Feature Engg"}}