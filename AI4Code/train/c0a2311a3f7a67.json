{"cell_type":{"2915f147":"code","4fe55010":"code","d509e12f":"code","f79b9f17":"code","164309fc":"code","ba8443c0":"code","45799be8":"code","3da2fb37":"code","627e52a3":"code","e35c3faf":"code","22f0fbcc":"code","7191db04":"code","8396b781":"code","9b87f02f":"code","e322fab4":"code","781f99c0":"code","a366f524":"code","dc2e1f66":"code","18104426":"code","357a0e1e":"code","40a4afa7":"code","de311181":"code","f4c1630e":"code","328d011f":"code","ebc32f36":"code","1247e0bf":"code","12a0a8e2":"code","c419e174":"code","383c5ff9":"code","28225b1d":"code","763532b7":"code","7ac09505":"code","8480da6b":"code","0fc92d79":"code","cc4e65c7":"code","6bc48abf":"code","37e54d36":"code","c20ac432":"code","7f6db7f5":"code","0d36743c":"code","a105d06c":"code","f0d208f3":"code","95fae25c":"code","24d4959e":"code","75287141":"code","43799646":"code","06b41a99":"code","4d7fb153":"code","e9b737e5":"code","9983e2de":"markdown","f6228ce7":"markdown","8ef4c3c7":"markdown","61511aff":"markdown","a4835909":"markdown","76fc4f7a":"markdown","ad5142b0":"markdown","c88eb4b4":"markdown","b40757ea":"markdown","727ad21b":"markdown","cfde49d5":"markdown","fe4a1ccd":"markdown","48b57e13":"markdown","5474d437":"markdown","8af2e965":"markdown","933df34e":"markdown","7459b710":"markdown"},"source":{"2915f147":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4fe55010":"leaders = pd.read_csv('..\/input\/fastest-typists-in-the-world\/leaders.csv', encoding='utf8')\nleaders.head().style.set_properties(**{'background-color':'#FAFAD2',\n                                     'color': 'red'})","d509e12f":"leaders.isnull().sum()","f79b9f17":"#Code by Siti K https:\/\/www.kaggle.com\/khotijahs1\/2020-indonesia-university-rank\/comments\n\n#The Best 20 Women Chess competitors by Standard Rating\ntop_leaders = leaders.sort_values(by='Best_10', ascending=False)[:20]\nfigure = plt.figure(figsize=(10,6))\nsns.barplot(y=top_leaders.Racer, x=top_leaders.Best_10)\nplt.xticks()\nplt.xlabel('Best 10')\nplt.ylabel('Competitor Name')\nplt.title('Top 20 Typists by Best 10')\nplt.show()","164309fc":"##Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color = 'black',\n                      colormap='Set3',\n                      height =2000,\n                      width = 2000\n                     ).generate(str(leaders[\"Racer\"]))\nplt.rcParams['figure.figsize'] = (12,12)\nplt.axis(\"off\")\nplt.imshow(wordcloud)\nplt.title(\"Fastest Typists\")\nplt.show()","ba8443c0":"leaders.describe()","45799be8":"leaders.dtypes","3da2fb37":"months = pd.read_csv('..\/input\/fastest-typists-in-the-world\/months.csv', encoding='ISO-8859-2')\nmonths.head().style.set_properties(**{'background-color':'#03e8fc',\n                                     'color': 'black'})","627e52a3":"#Code by Siti K https:\/\/www.kaggle.com\/khotijahs1\/2020-indonesia-university-rank\/comments\n\n#The Best 20 Women Chess competitors by Standard Rating\ntop_months = months.sort_values(by='Texts_Raced', ascending=False)[:20]\nfigure = plt.figure(figsize=(10,6))\nsns.barplot(y=top_months.Fastest_User, x=top_months.Texts_Raced)\nplt.xticks()\nplt.xlabel('Texts Raced')\nplt.ylabel('Fastest User')\nplt.title('Top 20 Typists by Texts Raced')\nplt.show()","e35c3faf":"texts = pd.read_csv('..\/input\/fastest-typists-in-the-world\/texts.csv', encoding='ISO-8859-2')\ntexts.head().style.set_properties(**{'background-color':'#FFB6C1',\n                                     'color': 'purple'})","22f0fbcc":"iamTyperacer = texts[(texts['Top_Racer']=='iamtyperacer')].reset_index(drop=True)\niamTyperacer.head()","7191db04":"#Fifth row, fourth column \n\ntexts.iloc[4,3]","8396b781":"iamTyperacer.describe()","9b87f02f":"#Third row, fourth column\n\niamTyperacer.iloc[2,3]","e322fab4":"#Code by Parul Pandey  https:\/\/www.kaggle.com\/parulpandey\/a-guide-to-handling-missing-values-in-python\n\n\nfrom sklearn.impute import SimpleImputer\nleaders_most_frequent = leaders.copy()\n#setting strategy to 'mean' to impute by the mean\nmean_imputer = SimpleImputer(strategy='most_frequent')# strategy can also be mean or median \nleaders_most_frequent.iloc[:,:] = mean_imputer.fit_transform(leaders_most_frequent)","781f99c0":"leaders_most_frequent.isnull().sum()","a366f524":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in leaders_most_frequent.columns:\n    if leaders_most_frequent[c].dtype=='float16' or  leaders_most_frequent[c].dtype=='float32' or  leaders_most_frequent[c].dtype=='float64':\n        leaders_most_frequent[c].fillna(leaders_most_frequent[c].mean())\n\n#fill in -999 for categoricals\nleaders_most_frequent = leaders_most_frequent.fillna(-999)\n# Label Encoding\nfor f in leaders_most_frequent.columns:\n    if leaders_most_frequent[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(leaders_most_frequent[f].values))\n        leaders_most_frequent[f] = lbl.transform(list(leaders_most_frequent[f].values))\n        \nprint('Labelling done.')","dc2e1f66":"leaders_most_frequent.head()","18104426":"# Prepare the data\nX = leaders_most_frequent.drop('Wins', axis=1)\ny = leaders_most_frequent['Wins'].copy()\n\nX.head()","357a0e1e":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=42)\nX_train.shape, X_test.shape","40a4afa7":"from sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier(max_depth=3)\ndt.fit(X_train, y_train)","de311181":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\n# pip users\n!pip install pydotplus\n!pip install six\n\nfrom IPython.display import Image\nfrom six import StringIO\nfrom sklearn.tree import export_graphviz\nimport pydotplus, graphviz\n\ndot_data = StringIO()\n\nexport_graphviz(dt, out_file=dot_data, filled=True, rounded=True, feature_names=X.columns, \n                )\n\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(graph.create_png())","f4c1630e":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ny_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nprint(\"Train set performance\")\nprint(accuracy_score(y_train, y_train_pred))\nconfusion_matrix(y_train, y_train_pred)","328d011f":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\nprint(\"Test set performance\")\nprint(accuracy_score(y_test, y_test_pred))\nconfusion_matrix(y_test, y_test_pred)","ebc32f36":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndef get_dt_graph(dt_classifier):\n    dot_data = StringIO()\n\n    export_graphviz(dt_classifier, out_file=dot_data, filled=True, rounded=True, feature_names=X.columns, \n                )\n    \n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    \n    return graph","1247e0bf":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndef evaluate_model(dt_classifier):\n    y_train_pred = dt_classifier.predict(X_train)\n    y_test_pred = dt_classifier.predict(X_test)\n    \n    print(\"Train set performance\")\n    print(accuracy_score(y_train, y_train_pred))\n    print(confusion_matrix(y_train, y_train_pred))\n    print(\"-\"*50)\n    print(\"Test set performance\")\n    print(accuracy_score(y_test, y_test_pred))\n    print(confusion_matrix(y_test, y_test_pred))","12a0a8e2":"evaluate_model(dt)","c419e174":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ngph = get_dt_graph(dt)\nImage(gph.create_png())","383c5ff9":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndt_default = DecisionTreeClassifier(random_state=42)\ndt_default.fit(X_train, y_train)","28225b1d":"gph = get_dt_graph(dt_default)\nImage(gph.create_png())","763532b7":"evaluate_model(dt_default)","7ac09505":"dt_depth = DecisionTreeClassifier(max_depth=3, random_state=42)\ndt_depth.fit(X_train, y_train)","8480da6b":"gph = get_dt_graph(dt_depth)\nImage(gph.create_png())","0fc92d79":"evaluate_model(dt_depth)","cc4e65c7":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndt_min_split = DecisionTreeClassifier(min_samples_split=20, random_state=42)\ndt_min_split.fit(X_train, y_train)\n\ngph = get_dt_graph(dt_min_split)\nImage(gph.create_png())","6bc48abf":"evaluate_model(dt_min_split)","37e54d36":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndt_min_leaf = DecisionTreeClassifier(min_samples_leaf=20, random_state=42)\ndt_min_leaf.fit(X_train, y_train)\n\ngph = get_dt_graph(dt_min_leaf)\nImage(gph.create_png())","c20ac432":"evaluate_model(dt_min_leaf)","7f6db7f5":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndt_min_leaf_entropy = DecisionTreeClassifier(min_samples_leaf=20, random_state=42, criterion=\"entropy\")\ndt_min_leaf_entropy.fit(X_train, y_train)\n\ngph = get_dt_graph(dt_min_leaf_entropy)\nImage(gph.create_png())","0d36743c":"evaluate_model(dt_min_leaf_entropy)","a105d06c":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndt = DecisionTreeClassifier(random_state=42)\n\nfrom sklearn.model_selection import GridSearchCV\n\nparams = {\n    \"max_depth\": [2, 3, 5, 10, 20],\n    \"min_samples_leaf\": [5, 10, 20, 50, 100],\n    \"criterion\": ['gini', 'entropy']\n}\n\ngrid_search = GridSearchCV(estimator=dt, param_grid=params, cv=4, n_jobs=-1, verbose=1, scoring=\"accuracy\")","f0d208f3":"%%time\ngrid_search.fit(X_train, y_train)","95fae25c":"cv_df = pd.DataFrame(grid_search.cv_results_)\ncv_df.head()","24d4959e":"cv_df.shape","75287141":"cv_df.nlargest(5, 'mean_test_score')","43799646":"grid_search.best_estimator_","06b41a99":"grid_search.best_score_","4d7fb153":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndt_best = grid_search.best_estimator_\nevaluate_model(dt_best)","e9b737e5":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ngph = get_dt_graph(dt_best)\nImage(gph.create_png())","9983e2de":"#Specifying the minimum samples before the split\n\nThe snippet below took so long and didn't render anything. I don't know why.","f6228ce7":"#Hyper-parameter tuning using Grid Search CV","8ef4c3c7":"#Controlling the depth of the tree","61511aff":"#Specifying the minimum samples in leaf node","a4835909":"words per minute (WPM)\n\ncharacters per minute (CPM)","76fc4f7a":"#Building the decision tree","ad5142b0":"#iamtyperacer\n\n\u05d0\u05d9\u05d6\u05d9 (iamtyperacer) - Country: Israel\n\nhttps:\/\/typeracerdata.com\/profile?username=iamtyperacer\n","c88eb4b4":"#Tiny Tree that it's impossible to read any leaf.","b40757ea":"#Decision tree without any hyper-parameter setting","727ad21b":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRrwR6GcuJc0-P-mXMIppRH-omdATTLxLvd8w&usqp=CAU)videogamegeek.com","cfde49d5":"#Using Entropy instead of Gini","fe4a1ccd":"#Removed again ( after : feature_names=X.columns\n\nclass_names=['No Disease', 'Disease']","48b57e13":"#Evaluating the model performance on the test set","5474d437":"#Model Building\n\nBelow I removed Class Names (No disease\/disease) after:\n\nfeature_names=X.columns, class_names=['No Disease', 'Disease']","8af2e965":"#Helper functions to evaluate the model performance and create the graph for DT","933df34e":"#Acknowledgement\n\nSIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree","7459b710":"#I commented below because:\n\ndot: graph is too large for cairo-renderer bitmaps. Scaling by 0.324615 to fit\n\nIt seems some abstract art, which is Not very artistical."}}