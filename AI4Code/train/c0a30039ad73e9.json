{"cell_type":{"3bf1e20e":"code","b49ac2ba":"code","c94cc85b":"code","934b3f74":"code","ed1618aa":"code","cffc5739":"code","d6f87c1b":"code","539ded81":"code","6b2d5194":"code","a8dad51d":"code","d8ba5441":"code","df660d25":"code","8c5c633b":"code","027bf5c5":"code","295bb441":"code","accfb359":"code","f064c574":"code","a925cf51":"code","9a4f7fe8":"code","ab20763c":"code","3f9fb6f3":"code","84238973":"code","46201d91":"code","517f67c3":"code","2d61e9a2":"code","8de5cdcf":"code","3b3ce2dc":"code","ca49d43d":"code","0b550a0c":"code","c6faf3e7":"code","10af31e9":"code","b378632d":"code","62f313ef":"code","03597c57":"code","b2ed4500":"code","03fdb52b":"code","6e30f1ba":"code","b92b2ec1":"code","f83a00d9":"code","e0510459":"code","106d2fff":"code","b31a5057":"code","017d7ae9":"code","6d3e3eae":"markdown"},"source":{"3bf1e20e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.experimental import enable_iterative_imputer  \nfrom sklearn.impute import IterativeImputer\nfrom sklearn.metrics import mean_squared_error\nfrom scipy import stats\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b49ac2ba":"data = pd.read_csv('..\/..\/kaggle\/input\/electric-motor-temperature\/pmsm_temperature_data.csv')","c94cc85b":"data.head()","934b3f74":"data.drop(columns='profile_id', inplace=True)","ed1618aa":"data.boxplot(figsize=(12,8), grid=False)","cffc5739":"data.describe()","d6f87c1b":"df = data.copy()","539ded81":"def defile_dataset(df, col_selection_rate=0.40):\n    cols = np.random.choice(df.columns, int(len(df.columns)*col_selection_rate))\n    df_cp = df.copy()\n    for col in cols:\n        data_drop_rate = np.random.choice(np.arange(0.15, 0.5, 0.02), 1)[0]\n        drop_ind = np.random.choice(np.arange(len(df_cp[col])), size=int(len(df_cp[col])*data_drop_rate), replace=False)\n        df_cp[col].iloc[drop_ind] = np.nan\n    return df_cp, cols","6b2d5194":"df_mod, cols = defile_dataset(df)","a8dad51d":"df_mod.info()","d8ba5441":"imputer = IterativeImputer(sample_posterior=True)\nimputer_non = IterativeImputer()","df660d25":"df1 = df_mod.copy()\ndf2 = df_mod.copy()","8c5c633b":"df_mod_fit = imputer.fit_transform(df1)","027bf5c5":"imputer.get_params()","295bb441":"df_mod_fit_non = imputer_non.fit_transform(df2)","accfb359":"df_mod_fit.shape","f064c574":"df_fit_np = df_mod_fit[:,[df.columns.get_loc(i) for i in cols]]","a925cf51":"df_fit_non_np = df_mod_fit_non[:,[df.columns.get_loc(i) for i in cols]]","9a4f7fe8":"pd.DataFrame(df_fit_non_np, columns=cols)","ab20763c":"df_np = df[cols].values","3f9fb6f3":"print(df_fit_np.shape)\nprint(df_np.shape)","84238973":"for i in range(len(cols)):\n    print(\"When sample posterior is True {:.3f} and when it isnt {:.3f}\".format(mean_squared_error(df_np[:,i], df_fit_np[:,i]), mean_squared_error(df_np[:,i], df_fit_non_np[:,i])))","46201d91":"print(np.std(df_np, axis=0))\nprint(np.std(df_fit_non_np, axis=0))","517f67c3":"print(stats.sem(df_np, axis=0))\nprint(stats.sem(df_fit_non_np, axis=0))","2d61e9a2":"def impute(df_orig):\n    df_miss, cols = defile_dataset(df_orig)\n    df_orig_slice = df_orig[cols]\n    imputed_data = []\n    n_iterations = []\n    for i in range(10):\n        imputer = IterativeImputer(max_iter=(i+1)*10)\n        df_stg = df_miss.copy()\n        imp_arr = imputer.fit_transform(df_stg)\n        n_iterations.append(imputer.n_iter_)\n        imp_arr_sl = imp_arr[:,[df_orig.columns.get_loc(i) for i in cols]]\n        imputed_data.append(pd.DataFrame(imp_arr_sl, columns=cols))\n    return df_orig_slice, imputed_data, n_iterations","8de5cdcf":"def impute_once(df_orig):\n    df_miss, cols = defile_dataset(df_orig)\n    df_orig_slice = df_orig[cols]\n    imputer = IterativeImputer(max_iter=100)\n    df_stg = df_miss.copy()\n    imp_arr = imputer.fit_transform(df_stg)\n    return df_orig_slice, df_miss[cols], pd.DataFrame(imp_arr[:,[df_orig.columns.get_loc(i) for i in cols]], columns=cols), imputer.n_iter_","3b3ce2dc":"df_orig, imp_data, n_iter = impute(df)","ca49d43d":"df_orig.head()","0b550a0c":"len(imp_data)","c6faf3e7":"cols = df_orig.columns","10af31e9":"imp_data[0][cols[0]]","b378632d":"n_iter","62f313ef":"fig, axes = plt.subplots(len(cols), sharex=True, figsize=(6,6), dpi=120)\nfor i in range(len(cols)):\n    bars = []\n    for j in range(len(imp_data)):\n        bars.append(mean_squared_error(df_orig[cols[i]], imp_data[j][cols[i]])) \n    axes[i].bar(np.arange(10), bars, color='white', width=0.6, edgecolor='k', linewidth=1)\n    axes[i].set_ylim([0,0.2])\n    axes[i].set_yticks([])\n    for k in range(len(imp_data)):\n        axes[i].text(k-0.2, bars[k]+0.01, round(bars[k], 3), fontsize=6)\n    axes[i].set_title(str(cols[i]))\nfig.tight_layout()\nplt.show()","03597c57":"'''\nfig, axes = plt.subplots(len(cols), sharex=True, figsize=(10,8), dpi=120)\nfor i in range(len(cols)):\n    for j in range(len(imp_data)):\n        sns.boxplot(np.arange(10), imp_data[j][cols[i]], ax=axes[i])\n    #axes[i].set_ylim([0.8,1.2])\n    #axes[i].set_yticks([])\n    #for k in range(len(imp_data)):\n        #axes[i].text(k-0.2, bars[k]+0.01, round(bars[k], 3), fontsize=6)\n    #axes[i].set_title(str(cols[i]))\nfig.tight_layout()\nplt.show()\n'''","b2ed4500":"pd.DataFrame(imp_data[0].stack()).reset_index()","03fdb52b":"df_og, df_def, df_imp, n_iter = impute_once(df)","6e30f1ba":"print(df_og.columns)\nprint(df_imp.columns)\nprint(n_iter)","b92b2ec1":"for i in range(len(df_og.columns)):\n    print(\"Iterative Imputer: MSE for {} is {:.4f}.\".format(df_og.columns[i], mean_squared_error(df_og[df_og.columns[i]], df_imp[df_imp.columns[i]])))","f83a00d9":"df_def = df_def[df_og.columns]","e0510459":"from sklearn.impute import SimpleImputer","106d2fff":"sim_imp = SimpleImputer()","b31a5057":"df_simimp = pd.DataFrame(sim_imp.fit_transform(df_def), columns=df_og.columns)","017d7ae9":"for i in range(len(df_og.columns)):\n    print(\"Simple Imputer: MSE for {} is {:.4f}.\".format(df_og.columns[i], mean_squared_error(df_og[df_og.columns[i]], df_simimp[df_simimp.columns[i]])))","6d3e3eae":"1. Load data set\n2. Check distributions\n3. Build function to drop 20% of values in 30% of columns\n4. Build function to implement various iterativeimputer on dataset\n5. Plot imputed values against real values\n6. Repeat and plot generalized results"}}