{"cell_type":{"83f2dae0":"code","345090f7":"code","f03604b4":"code","6fd4a4b3":"code","ec8c5ef9":"code","de45970d":"code","c058dcb0":"code","28625a19":"code","907f6c74":"code","b0ff0b80":"code","a109807f":"code","6f250629":"code","6077efc6":"code","4186c084":"code","a16ce269":"code","bf6f03e5":"code","31ea5628":"code","e650aa91":"code","09b99c37":"code","c41b7650":"code","5e971c03":"code","f972ac8a":"code","413bda34":"code","38e67e91":"code","5e2f427c":"code","b62b410d":"code","fdf7dc2d":"code","fd4e0d79":"code","b4fdd3c1":"code","0b06de64":"markdown","d76c3545":"markdown","b1c2d03e":"markdown","604fc9a7":"markdown","fb24a699":"markdown"},"source":{"83f2dae0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","345090f7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","f03604b4":"# Import train dataset\ndf_train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_train.head(5)","6fd4a4b3":"#Import test dataset\ndf_test=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")#read test dataset\ndf_test.head(5)","ec8c5ef9":"df_train.shape, df_test.shape","de45970d":"df_train.duplicated().sum(), df_test.duplicated().sum()","c058dcb0":"df_train.info()","28625a19":"df_test.info()","907f6c74":"#Target variable distribution -> positive skewness\nsns.distplot(df_train['SalePrice'])  \n\n#QQ-plot\nfrom scipy import stats\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)\nplt.show()\n\n#Descriptive statistics summary\ndf_train['SalePrice'].describe()","b0ff0b80":"# Log-transformation of the target variable\ndf_train[\"SalePrice\"] = np.log1p(df_train[\"SalePrice\"])\ny = df_train['SalePrice']\n\n#Check the new distribution \nfrom scipy.stats import norm, skew\nsns.distplot(df_train['SalePrice'] , fit=norm)\n\n\n#new probability plot\nfrom scipy import stats\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)\nplt.show()","a109807f":"df_train.skew().sort_values(ascending=False) ","6f250629":"numerical_features = df_train.select_dtypes(exclude = [\"object\"]).columns\ntrain_num = df_train[numerical_features]\nskewness = train_num.apply(lambda x: skew(x))\n\nskewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    df_train[feat] = boxcox1p(df_train[feat], lam)","6077efc6":"plt.figure(figsize=(10,10)) #plotting missing values\nsns.heatmap(df_train.isnull(),cbar=False,cmap='Blues')\nplt.ioff()","4186c084":"train_nan=df_train.isnull().sum()\/len(df_train)*100 # % of missing value > 0 for train dataset\ntrain_nan = train_nan[train_nan>0]\ntrain_nan.sort_values(ascending=False)","a16ce269":"\nfor i in ('PoolQC','MiscFeature','Alley','Fence','FireplaceQu','GarageType', 'GarageFinish', 'GarageQual', 'GarageCond','BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','MasVnrType'):\n    df_train[i] = df_train[i].fillna('None')\n\ndf_train['LotFrontage']=df_train['LotFrontage'].fillna(df_train['LotFrontage'].median())\n\nfor i in ('GarageYrBlt', 'GarageArea', 'GarageCars','MasVnrArea'):\n    df_train[i] = df_train[i].fillna(0)\n    \ndf_train['Electrical'] = df_train['Electrical'].fillna(df_train['Electrical'].mode()[0])","bf6f03e5":"test_nan=df_test.isnull().sum()\/len(df_test)*100 # % of missing value > 0 for test dataset\ntest_nan = test_nan[test_nan>0]\ntest_nan.sort_values(ascending=False)","31ea5628":"for i in ('PoolQC','MiscFeature','Alley','Fence','FireplaceQu','GarageType', 'GarageFinish', 'GarageQual', 'GarageCond','BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','MasVnrType'):\n    df_test[i] = df_test[i].fillna('None')\n\nfor i in ('TotalBsmtSF','BsmtUnfSF','BsmtFinSF2','BsmtFinSF1','LotFrontage'):\n    df_test[i]=df_test[i].fillna(df_test[i].median())\n\nfor i in ('GarageYrBlt', 'GarageArea', 'GarageCars','MasVnrArea','BsmtHalfBath','BsmtFullBath'):\n    df_test[i] = df_test[i].fillna(0)\n    \ndf_test['MSZoning'] = df_test['MSZoning'].fillna(df_test['MSZoning'].mode()[0])\ndf_test['Functional'] = df_test['Functional'].fillna('Typ') \ndf_test['Utilities'] = df_test['Utilities'].fillna('AllPub') \ndf_test['Exterior1st'] = df_test['Exterior1st'].fillna(df_test['Exterior1st'].mode()[0]) \ndf_test['Exterior2nd'] = df_test['Exterior2nd'].fillna(df_test['Exterior2nd'].mode()[0])\ndf_test['KitchenQual'] = df_test['KitchenQual'].fillna(\"TA\") \ndf_test['SaleType'] = df_test['SaleType'].fillna(df_test['SaleType'].mode()[0])","e650aa91":"# most correlated features\ncorrmat = df_train.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(df_train[top_corr_features].corr(),annot=True,cmap=\"coolwarm\")\n","09b99c37":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotRmsAbvGrd', 'FullBath', 'YearBuilt','GarageArea']\nsns.pairplot(df_train[cols])\nplt.show();","c41b7650":"ntrain = df_train.shape[0]\nntest = df_test.shape[0]\ntest_id = df_test['Id']\nall_data = pd.concat([df_train, df_test], axis=0, sort=False)\nall_data = all_data.drop(['Id', 'SalePrice'], axis=1)","5e971c03":"all_data=pd.get_dummies(all_data, drop_first=True) # OHE on categorical variable.","f972ac8a":"train = all_data[:ntrain]\ntest = all_data[ntrain:]\nprint(train.shape)\nprint(test.shape)","413bda34":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(train)","38e67e91":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state= 0)","5e2f427c":"from sklearn.ensemble import RandomForestRegressor\nrf_reg = RandomForestRegressor(random_state=0,n_estimators=1000,verbose=0,criterion='mae',max_features='sqrt',oob_score=True,n_jobs=4)\nrf_reg.fit(X_train, y_train)\npredictions=rf_reg.predict(X_test)","b62b410d":"plt.scatter(y_test,predictions)","fdf7dc2d":"from sklearn import metrics\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\nprint('R2 Square',metrics.r2_score(y_test, predictions))","fd4e0d79":"y_pred=np.floor(np.expm1(rf_reg.predict(test)))","b4fdd3c1":"my_submission = pd.DataFrame({'Id': test_id, 'SalePrice': y_pred})\nmy_submission.to_csv('submission.csv', index=False)","0b06de64":"Handling Missing value for test dataset","d76c3545":"> Missing Value check","b1c2d03e":"Normality means that your data follows the normal distributed. **Skewness** is how much the overall shape of a distribution deviates from the shape of the normal distribution. Skewness of the normal distribution is zero. \n\nSkewness are:\n    1. Positively skewed -> longer tail on the right side.\n    2. Negatively skewed -> longer tail on the left side.\n\nTo reduce the skewness we do transformation:\n    1. positively skewed -> apply logarithmic or square root transformation.\n    2. negatively skewed -> apply exponential or power transformation.\n","604fc9a7":"Handling missing value for train dataset","fb24a699":"* 82% correlation between SalePrice and OverallQual.\n* 83% correlation between TotRmsAbvGrd and GrLivArea.\n* 88% correlation between GarageCars and GarageArea.\n...."}}