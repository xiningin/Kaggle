{"cell_type":{"d39d260c":"code","0f94e859":"code","0bd0255d":"code","2e88cbe4":"code","dc1f68e7":"code","91eaea6b":"code","065a92a0":"code","9a6c6b30":"code","840a90f1":"code","9e21759f":"code","53d3e418":"code","2358dbbb":"code","c8847135":"code","b04dd933":"code","6b47afaa":"code","f71f87dc":"code","0b7685fb":"code","e0e8bad5":"code","6cb08647":"code","c859308c":"code","0c00abca":"code","f7849bcf":"code","b0e89ee2":"code","26c145f4":"code","4fac4ef0":"code","845c2bbd":"code","c92db2b0":"code","0f54462b":"code","56b468f6":"code","52ea05b3":"code","bbea81fb":"code","f5cb5595":"code","21c9d717":"code","9489fe0d":"code","ed21fa73":"code","b7652b11":"code","057e0e74":"code","bc158a98":"code","b43009a9":"code","19f4c5ba":"code","e07f72b8":"code","08e8b919":"code","5926c02f":"code","c102773a":"code","b7a00662":"code","659958fa":"code","04374f21":"code","c07667bc":"code","b562257e":"code","8100318c":"code","730a024e":"code","756677ea":"markdown","65286ee6":"markdown","8bbf62f7":"markdown"},"source":{"d39d260c":"# data analysis libraries\nimport numpy as np\nimport pandas as pd\n\n# visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# ignore warinings\nimport warnings\nwarnings.filterwarnings('ignore')","0f94e859":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","0bd0255d":"train.describe(include='all')\n#train","2e88cbe4":"train.columns","dc1f68e7":"train.isnull().sum()","91eaea6b":"sns.barplot(x='Sex', y=\"Survived\", data=train)","065a92a0":"sns.barplot(x='Pclass', y=\"Survived\", data=train)","9a6c6b30":"sns.barplot(x='SibSp', y=\"Survived\", data=train)","840a90f1":"sns.barplot(x='Parch', y=\"Survived\", data=train)","9e21759f":"train[\"Age\"] = train[\"Age\"].fillna(-0.5)\ntest[\"Age\"] = test[\"Age\"].fillna(-0.5)\nbins = [-1,0,5,12,18,24,35,60,np.inf]\nlabels = ['Unknown','Baby','Child','Teenager','Student','Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train['Age'],bins,labels=labels)\ntest['AgeGroup'] = pd.cut(test['Age'],bins,labels=labels)","53d3e418":"sns.barplot(x='AgeGroup', y='Survived', data=train)","2358dbbb":"train['CabinBool'] = (train[\"Cabin\"].notnull().astype('int'))\ntest['CabinBool'] = (test[\"Cabin\"].notnull().astype('int'))","c8847135":"sns.barplot(x='CabinBool', y='Survived', data=train)","b04dd933":"train = train.drop(['Cabin'], axis=1)\ntest = test.drop(['Cabin'], axis=1)","6b47afaa":"train = train.drop(['Ticket'], axis=1)\ntest = test.drop(['Ticket'], axis=1)","f71f87dc":"train = train.fillna({\"Embarked\": 'S'})","0b7685fb":"combine = [train, test]\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)","e0e8bad5":"pd.crosstab(train['Title'], train['Sex'])","6cb08647":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady','Capt','Col','Don','Dr','Major','Rev','Jonkheer','Dona'], 'Rare')\n    \n    dataset['Title'] = dataset['Title'].replace(['Contess','Lady','Sir'], 'Royal')\n    dataset['Title'] = dataset['Title'].replace('Mlle','Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms','Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme','Miss')","c859308c":"train[['Title','Survived']].groupby(['Title'], as_index=False).mean()","0c00abca":"title_mapping = {'Mr':1, 'Miss':2, \"Mrs\":3, \"Master\": 4, \"Royal\":5, \"Rare\":6}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)","f7849bcf":"train.head()","b0e89ee2":"mr_age = train[train['Title'] == 1]['AgeGroup'].mode()\nmiss_age = train[train['Title'] == 2]['AgeGroup'].mode()\nmrs_age = train[train['Title'] == 3]['AgeGroup'].mode()\nmaster_age = train[train['Title'] == 4]['AgeGroup'].mode()\nroyal_age = train[train['Title'] == 5]['AgeGroup'].mode()\nrare_age = train[train['Title'] == 6]['AgeGroup'].mode()\n\nage_title_mapping = {1: \"Young Adult\", 2:\"Student\", 3:\"Adult\", 4:\"Baby\", 5:\"Adult\", 6:'Adult'}","26c145f4":"for x in range(len(train[\"AgeGroup\"])):\n    if train['AgeGroup'][x] == \"Unknown\":\n        train['AgeGroup'][x] = age_title_mapping[train[\"Title\"][x]]\n        \nfor x in range(len(test[\"AgeGroup\"])):\n    if test['AgeGroup'][x] == \"Unknown\":\n        test['AgeGroup'][x] = age_title_mapping[test[\"Title\"][x]]","4fac4ef0":"age_mapping = {\"Baby\":1,\"Child\":2,'Teenager':3,\"Student\":4,\"Young Adult\":5, \"Adult\":6, \"Senior\":7}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)","845c2bbd":"train.head()","c92db2b0":"train = train.drop([\"Age\"], axis=1)\ntest = test.drop([\"Age\"], axis=1)","0f54462b":"train = train.drop([\"Name\"], axis=1)\ntest = test.drop([\"Name\"], axis=1)","56b468f6":"sex_mapping = {\"male\":0,\"female\":1}\ntrain['Sex'] = train['Sex'].map(sex_mapping)\ntest['Sex'] = test['Sex'].map(sex_mapping)","52ea05b3":"train.head()","bbea81fb":"embarked_mapping = {\"S\":1,\"C\":2, \"Q\":3}\ntrain['Embarked'] = train['Embarked'].map(embarked_mapping)\ntest['Embarked'] = test['Embarked'].map(embarked_mapping)","f5cb5595":"for x in range(len(test[\"Fare\"])):\n    if pd.isnull(test['Fare'][x]):\n        pclass = test['Pclass'][x]\n        test['Fare'][x] = round(train[train['Pclass'] == pclass][\"Fare\"].mean(), 4)","21c9d717":"train['FareBand'] = pd.qcut(train['Fare'], 4, labels=[1,2,3,4])\ntest['FareBand'] = pd.qcut(test['Fare'], 4, labels=[1,2,3,4])","9489fe0d":"train = train.drop([\"Fare\"], axis=1)\ntest = test.drop([\"Fare\"], axis=1)","ed21fa73":"train","b7652b11":"from sklearn.model_selection import train_test_split","057e0e74":"predictors = train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = train['Survived']\nx_train,x_val,y_train,y_val = train_test_split(predictors, target, test_size=0.22, random_state=0)","bc158a98":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\n\ngaussian = GaussianNB()\ngaussian.fit(x_train, y_train)\ny_pred = gaussian.predict(x_val)\nacc_gaussian = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_gaussian)","b43009a9":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(x_val)\nacc_svc = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_svc)","19f4c5ba":"from sklearn.svm import LinearSVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(x_train, y_train)\ny_pred = linear_svc.predict(x_val)\nacc_linear_svc = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_linear_svc)","e07f72b8":"from sklearn.linear_model import Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(x_train, y_train)\ny_pred = perceptron.predict(x_val)\nacc_perceptron = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_perceptron)","08e8b919":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_val)\nacc_logreg = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_logreg)","5926c02f":"from sklearn.tree import DecisionTreeClassifier\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(x_train, y_train)\ny_pred = decision_tree.predict(x_val)\nacc_decision_tree = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_decision_tree)","c102773a":"from sklearn.ensemble import RandomForestClassifier\n\nrandom_forest = RandomForestClassifier()\nrandom_forest.fit(x_train, y_train)\ny_pred = random_forest.predict(x_val)\nacc_random_forest = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_random_forest)","b7a00662":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_val)\nacc_knn = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_knn)","659958fa":"from sklearn.linear_model import SGDClassifier\n\nsgd = SGDClassifier()\nsgd.fit(x_train, y_train)\ny_pred = sgd.predict(x_val)\nacc_sgd = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_sgd)","04374f21":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_val)\nacc_gbk = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_gbk)","c07667bc":"models = pd.DataFrame({\"Model\":['Gradient Boosting Classifier', \"Support Vector Machines\", \"Random Forest\", \"Decision Tree\", \"Logistic Regression\",\"Preceptron\",\"Naive Bayes\", \"Linear SVC\", \"KNN\" ,\"Stochastic Grandient Descent\"]\n                       ,\"Score\":[acc_gbk, acc_svc, acc_random_forest, acc_decision_tree, acc_logreg, acc_perceptron, acc_gaussian, acc_linear_svc, acc_knn, acc_sgd]})\nmodels.sort_values(by=\"Score\", ascending=False)","b562257e":"ids = test['PassengerId']","8100318c":"predictions = gbk.predict(test.drop('PassengerId', axis=1))","730a024e":"output = pd.DataFrame({'PassengerId': ids, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)","756677ea":"### \u6570\u636e\u5206\u6790","65286ee6":"### \u52a0\u8f7d\u6570\u636e","8bbf62f7":"### \u5bfc\u5165\u5e93"}}