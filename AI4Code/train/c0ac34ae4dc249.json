{"cell_type":{"2b531517":"code","a9d3949f":"code","6221c95a":"code","4791609b":"code","a317f538":"code","85c09ee9":"code","ca45c925":"code","10311d61":"code","048f280d":"code","81f0d17b":"code","38dae24b":"code","10ab59c8":"code","9d183654":"code","1e11d625":"code","6557296b":"code","e0660349":"code","6d89367b":"code","a05a5114":"code","fac14e34":"code","dfca10d0":"code","691dda67":"code","8d2fbae3":"code","612f6979":"code","27358aae":"code","584b81fc":"code","489c2ff5":"code","c20d4d77":"code","50ccc1e3":"code","903c7976":"code","12063653":"code","338ea9cd":"code","4dcf37dc":"code","5a05a912":"code","dfb86bf5":"code","a46da7d4":"code","2d9b868d":"code","4d5526ce":"code","b71fdd81":"code","b1317ef6":"code","2b8e525e":"code","5855f29a":"code","50526a97":"code","17c2d8e1":"code","6101583b":"code","b9a25064":"code","bf89730b":"code","48e76585":"code","ec18757a":"code","61aff5aa":"code","a7bfb342":"code","f09b7fb9":"code","3b199ddc":"code","f32b6c72":"code","469e4c74":"code","b31af2fa":"code","1944d747":"code","6402a1a2":"code","dbeedc7d":"code","69b92804":"code","c1965ce2":"code","7c5f71b4":"code","73e34d04":"code","c04e1599":"code","53fd2fd6":"code","6f64a345":"code","836ade7b":"markdown","6be50bf2":"markdown","a4d15a27":"markdown","f93b4166":"markdown","4a1039bb":"markdown","7eb44d1c":"markdown","be9f7131":"markdown","174b758b":"markdown","e1b5a2b8":"markdown","bff4653e":"markdown","db5072af":"markdown","45d38d3c":"markdown","4f9a794b":"markdown","53499e88":"markdown","99bd66cd":"markdown","c17d9d71":"markdown","89896b43":"markdown","13691dac":"markdown","83b450c3":"markdown","b39de05b":"markdown","2ebd8c1e":"markdown","cad392cf":"markdown","cd99b6fb":"markdown"},"source":{"2b531517":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/covid_19_india.csv'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9d3949f":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\n#plt.rcParams['figure.figsize']=17,8\nimport cufflinks as cf\nimport plotly.offline as pyo\nfrom plotly.offline import init_notebook_mode,plot,iplot\nimport folium \nfrom folium import plugins\nplt.rcParams['figure.figsize'] = 10, 12\nimport warnings\nwarnings.filterwarnings('ignore')","6221c95a":"pyo.init_notebook_mode(connected=True)\ncf.go_offline()","4791609b":"df= pd.read_csv(r\"..\/input\/covid19-in-india\/covid_19_india.csv\")\ndf.head()","a317f538":"df.isnull().sum()","85c09ee9":"df.drop(['ConfirmedIndianNational','ConfirmedForeignNational'],axis=1,inplace=True)","ca45c925":"df.shape","10311d61":"f, ax = plt.subplots(figsize=(28, 28))\ndata = df[['State\/UnionTerritory','Confirmed','Cured','Deaths']]   \ndata.sort_values('Confirmed',ascending=False,inplace=True)\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Confirmed\", y=\"State\/UnionTerritory\", data=data,label=\"Total\", color=\"red\")\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Cured\", y=\"State\/UnionTerritory\", data=data, label=\"Cured\", color=\"green\")\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 700000), ylabel=\"\",xlabel=\"Cases\")\nsns.despine(left=True, bottom=True)","048f280d":"df['Date'] = pd.to_datetime(df['Date'],dayfirst = True)","81f0d17b":"df_confirmed_india=df.groupby('Date')['Confirmed'].sum().reset_index()\ndf_cured_india=df.groupby('Date')['Cured'].sum().reset_index()\ndf_death_india=df.groupby('Date')['Deaths'].sum().reset_index()","38dae24b":"df_confirmed_india","10ab59c8":"print(\"The Confirmed Cases are\",df_confirmed_india.Confirmed.max())\nprint(\"The Recovered Cases are\",df_cured_india.Cured.max())\nprint(\"The Deaths Cases are\",df_death_india.Deaths.max())","9d183654":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_confirmed_india['Date'], y = df_confirmed_india['Confirmed'], mode='lines+markers',name='Total Cases'))\nfig.update_layout(title_text='Trend of Coronavirus Cases in India (Cumulative cases)',plot_bgcolor='rgb(230, 230, 230)')\nfig.show()\n# New COVID-19 cases reported daily in India\nimport plotly.express as px\nfig = px.bar(df_confirmed_india, x=\"Date\", y=\"Confirmed\", barmode='group', height=400)\nfig.update_layout(title_text='Coronavirus Cases in India on daily basis',plot_bgcolor='gold')\nfig.show()","1e11d625":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_death_india['Date'], y = df_death_india['Deaths'], mode='lines+markers',name='Total Deaths',line=dict(color='Red', width=2)))\nfig.update_layout(title_text='Trend of Death Cases in India',plot_bgcolor='rgb(230, 230, 230)')\nfig.show()\n# New COVID-19 cases reported daily in India\nimport plotly.express as px\nfig = px.bar(df_death_india, x=\"Date\", y=\"Deaths\", barmode='group', height=500)\nfig.update_layout(title_text='Coronavirus Deaths in India on daily basis',plot_bgcolor='lime')\nfig.show()","6557296b":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_confirmed_india['Date'], y=df_confirmed_india['Confirmed'], mode='lines+markers', name='Confirmed',line=dict(color='blue', width=2)))\nfig.add_trace(go.Scatter(x=df_death_india['Date'], y=df_death_india['Deaths'], mode='lines+markers', name='Deaths', line=dict(color='Red', width=2)))\nfig.add_trace(go.Scatter(x=df_cured_india['Date'], y=df_cured_india['Cured'], mode='lines+markers', name='Recovered', line=dict(color='Green', width=2)))\nfig.update_layout(title='India COVID-19 Cases', xaxis_tickfont_size=14,yaxis=dict(title='Number of Cases'))\nfig.show()","e0660349":"import numpy as np\nstate_cases = df.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']+ state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)","6d89367b":"state_cases","a05a5114":"state_cases.head()","fac14e34":"state_cases['State\/UnionTerritory'].unique()","dfca10d0":"state_cases['State\/UnionTerritory'].nunique()","691dda67":"state_wise_cases=state_cases.sort_values('Confirmed', ascending= False).fillna(0).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Cured\"])\\\n                        .background_gradient(cmap='Oranges',subset=[\"Active\"])\\\n                        .background_gradient(cmap='RdYlBu',subset=[\"Death Rate (per 100)\"])\\\n                        .background_gradient(cmap='Accent',subset=[\"Cure Rate (per 100)\"])","8d2fbae3":"state_wise_cases","612f6979":"px.treemap(state_cases,path=[\"State\/UnionTerritory\"],values=\"Deaths\",title=\"Overall States Comparision of deaths\")","27358aae":"df['Fatality-Ratio'] = df['Deaths']\/df['Confirmed']","584b81fc":"df['Fatality-Ratio']","489c2ff5":"fatality_ratio=df.groupby('State\/UnionTerritory')['Fatality-Ratio'].sum().reset_index()\nfatality_ratio.iplot(kind='line',mode='lines+markers',x='State\/UnionTerritory',y='Fatality-Ratio',title='Fatality-Ratio Among States',color='blue')","c20d4d77":"fatality_year=df.groupby('Date')['Fatality-Ratio'].sum().reset_index()\nfatality_year.iplot(kind='line',x='Date',y='Fatality-Ratio')","50ccc1e3":"# Top 10 states with maximum number of COnfirmed Cases\ntop_10=state_cases.groupby('State\/UnionTerritory')['Confirmed'].max().sort_values(ascending=False).reset_index()\ntrace = go.Table(\n    domain=dict(x=[0, 0.52],\n                y=[0, 1.0]),\n    header=dict(values=[\"State\/UnionTerritory\",\"Confirmed Cases\"],\n                fill = dict(color = '#119DFF'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[top_10['State\/UnionTerritory'].head(10),top_10['Confirmed'].head(10)],\n               fill = dict(color = ['#25FEFD', 'white']),\n               align = ['center'],height=20))\n\ntrace1 = go.Bar(x=top_10['State\/UnionTerritory'].head(10),\n                y=top_10['Confirmed'].head(10),\n                xaxis='x1',\n                yaxis='y1',\n                marker=dict(color='blue'),opacity=0.60)\nlayout = dict(\n    width=1000,\n    height=400,\n    autosize=False,\n    title='Top-10 States with Highest No. of Cases',\n    showlegend=False,   \n    xaxis1=dict(**dict(domain=[0.58, 1], anchor='y1', showticklabels=True)),\n    yaxis1=dict(**dict(domain=[0, 1.0], anchor='x1', hoverformat='.2f')),  \n)\nfig1 = dict(data=[trace, trace1], layout=layout)\niplot(fig1)","903c7976":"# Top 10 states with maximum number of Recovery\ntop_10=state_cases.groupby('State\/UnionTerritory')['Cured'].max().sort_values(ascending=False).reset_index()\ntrace = go.Table(\n    domain=dict(x=[0, 0.52],\n                y=[0, 1.0]),\n    header=dict(values=[\"State\/UnionTerritory\",\"Cured Cases\"],\n                fill = dict(color = '#119DFF'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[top_10['State\/UnionTerritory'].head(10),top_10['Cured'].head(10)],\n               fill = dict(color = ['lime', 'white']),\n               align = ['center'],height=20))\n\ntrace1 = go.Bar(x=top_10['State\/UnionTerritory'].head(10),\n                y=top_10['Cured'].head(10),\n                xaxis='x1',\n                yaxis='y1',\n                marker=dict(color='lime'),opacity=0.60)\nlayout = dict(\n    width=1000,\n    height=400,\n    autosize=False,\n    title='Top-10 States with Highest Recovery',\n    showlegend=False,   \n    xaxis1=dict(**dict(domain=[0.58, 1], anchor='y1', showticklabels=True)),\n    yaxis1=dict(**dict(domain=[0, 1.0], anchor='x1', hoverformat='.2f')),  \n)\nfig1 = dict(data=[trace, trace1], layout=layout)\niplot(fig1)","12063653":"# Top 10 states with maximum number of Deaths\ntop_10=state_cases.groupby('State\/UnionTerritory')['Deaths'].max().sort_values(ascending=False).reset_index()\ntrace = go.Table(\n    domain=dict(x=[0, 0.52],\n                y=[0, 1.0]),\n    header=dict(values=[\"State\/UnionTerritory\",\"Deaths Cases\"],\n                fill = dict(color = '#119DFF'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[top_10['State\/UnionTerritory'].head(10),top_10['Deaths'].head(10)],\n               fill = dict(color = ['darksalmon', 'white']),\n               align = ['center'],height=20))\n\ntrace1 = go.Bar(x=top_10['State\/UnionTerritory'].head(10),\n                y=top_10['Deaths'].head(10),\n                xaxis='x1',\n                yaxis='y1',\n                marker=dict(color='darkred'),opacity=0.70)\nlayout = dict(\n    width=1000,\n    height=400,\n    autosize=False,\n    title='Top-10 States with Highest No. of Cases',\n    showlegend=False,   \n    xaxis1=dict(**dict(domain=[0.58, 1], anchor='y1', showticklabels=True)),\n    yaxis1=dict(**dict(domain=[0, 1.0], anchor='x1', hoverformat='.2f')),  \n)\nfig1 = dict(data=[trace, trace1], layout=layout)\niplot(fig1)","338ea9cd":"df_testing=pd.read_csv(r\"..\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")","4dcf37dc":"df_testing.head()","5a05a912":"# States with Total Sample collections\ndf_sample=df_testing.groupby('State')['TotalSamples'].max().sort_values(ascending=False).reset_index()","dfb86bf5":"df_sample.head()","a46da7d4":"# Top 10 states with Total Sample Collections\npx.bar(df_sample.head(10),x='State',y='TotalSamples')","2d9b868d":"df_positive=df_testing.groupby('State')['Positive'].max().sort_values(ascending=False).reset_index()","4d5526ce":"df_positive.head(10).iplot(kind='bar',x='State',y='Positive')","b71fdd81":"df_vaccine=pd.read_csv(r'..\/input\/covid19-in-india\/covid_vaccine_statewise.csv')","b1317ef6":"df_vaccine.head()","2b8e525e":"df_vaccine.columns","5855f29a":"male = df_vaccine[\"Male(Individuals Vaccinated)\"].max() \nfemale = df_vaccine[\"Female(Individuals Vaccinated)\"].max()  \ntrans = df_vaccine[\"Transgender(Individuals Vaccinated)\"].max()\npx.pie(names=[\"Male Vaccinated\",\"Female Vaccinated\",\"Trans Gender\"],values=[male,female,trans],title=\"Male and Female Vaccinated ratio for Covid19\")","50526a97":"Covaxin = df_vaccine[\"Total Covaxin Administered\"].max() \nCovishield = df_vaccine[\"Total CoviShield Administered\"].max()  \npx.pie(names=[\"Covaxin Vaccinated\",\"Covishield Vaccinated\"],values=[Covaxin,Covishield],title=\"Covaxin and Covishield Vaccination\")","17c2d8e1":"df_vaccine.head()","6101583b":"Doses = df_vaccine[\"Total Doses Administered\"].max() \nVaccinated = df_vaccine[\"Total Individuals Vaccinated\"].max()  \npx.pie(names=[\"Doses Administered\",\"People Vaccinated\"],values=[Doses,Vaccinated],title=\"Doses administered vs People Vaccinated\")","b9a25064":"df_vaccine.head()","bf89730b":"df_vaccine['State'].unique()","48e76585":"df_Odisha=df_vaccine[df_vaccine['State']=='Odisha']\ndf_Maharashtra=df_vaccine[df_vaccine['State']=='Maharashtra']\ndf_Delhi=df_vaccine[df_vaccine['State']=='Delhi']","ec18757a":"Doses = df_Odisha[\"Total Doses Administered\"].max() \nVaccinated = df_Odisha[\"Total Individuals Vaccinated\"].max()  \npx.pie(names=[\"Doses Administered\",\"People Vaccinated\"],values=[Doses,Vaccinated],title=\"Doses administered vs People Vaccinated\")","61aff5aa":"maxDoses = df_Maharashtra[\"Total Doses Administered\"].max() \nVaccinated = df_Maharashtra[\"Total Individuals Vaccinated\"].max()  \npx.pie(names=[\"Doses Administered\",\"People Vaccinated\"],values=[Doses,Vaccinated],title=\"Doses administered vs People Vaccinated\")","a7bfb342":"Doses = df_Delhi[\"Total Doses Administered\"].max() \nVaccinated = df_Delhi[\"Total Individuals Vaccinated\"].max()  \npx.pie(names=[\"Doses Administered\",\"People Vaccinated\"],values=[Doses,Vaccinated],title=\"Doses administered vs People Vaccinated\")","f09b7fb9":"df_Odisha.iplot(kind='bar',x='Updated On',y='Total Individuals Vaccinated')","3b199ddc":"df_confirmed_india.columns = ['ds','y']\ndf_confirmed_india['ds'] = pd.to_datetime(df_confirmed_india['ds'])","f32b6c72":"df_confirmed_india","469e4c74":"from fbprophet import Prophet","b31af2fa":"m = Prophet()\nm.fit(df_confirmed_india)\nfuture = m.make_future_dataframe(periods=21)\nfuture.tail()","1944d747":"forecast = m.predict(future)\nforecast.tail()","6402a1a2":"m.plot(forecast)","dbeedc7d":"confirmed_forecast_plot =m.plot_components(forecast)","69b92804":"df_death_india.columns = ['ds','y']\ndf_death_india['ds'] = pd.to_datetime(df_death_india['ds'])","c1965ce2":"df_death_india","7c5f71b4":"model = Prophet()\nmodel.fit(df_death_india)\nfuture = model.make_future_dataframe(periods=14)\nfuture.tail()","73e34d04":"prediction = model.predict(future)\nprediction.tail()","c04e1599":"prediction.plot()","53fd2fd6":"death_forecast_plot = model.plot(prediction)","6f64a345":"deaths_forecast_plot = model.plot_components(prediction)","836ade7b":"# Let's Now Analyze State-Wise Cases and Recovery","6be50bf2":"## Let's See the Day-wise cases on India","a4d15a27":"## Deaths Day-Wise ","f93b4166":"Here we can see that Maharastra is at the top of confirmed cases,","4a1039bb":"### Here we have got that we have the data if around 40 States and Union Territories","7eb44d1c":"## Now let's Analyze the Confirmed,Recovered and Deaths on Each State","be9f7131":"### Top 10 States With Highest Confirmed Cases","174b758b":"## Let's Do in One graph to see te day-Wise Confirmed, Deaths and Cured cases","e1b5a2b8":"# Let's Analyze 3 States of How many People gets Vaccinated\n# Odisha, Maharastra, Delhi","bff4653e":"### FATALITY RATIO IN AN YEAR","db5072af":"# *Let's Predict The Upcoming Cases and Deaths on India*","45d38d3c":"> ## Confirmed Day wise Cases","4f9a794b":"### Top 10 States in Highest Recovery","53499e88":"# Thanks a Lot!! Stay Home Stay Safe","99bd66cd":"## Check The Confirmed, Recovered and Death Trolls in India ","c17d9d71":"# Let's See WHats the race between Recovered and Deaths","89896b43":"# Let's Check the Fatality Ratio","13691dac":"### FATALITY_RATIO AMONG STATES","83b450c3":"# *Let's Predict the Deaths in India*","b39de05b":"### Top 10 States with highest number of Deaths","2ebd8c1e":"# In the Next cell we'll see this in a better visualization \n# Which states are more affected by the virus?","cad392cf":"## Testing Details","cd99b6fb":"## Positive Cases\n## What is the number of positive cases rising in India?"}}