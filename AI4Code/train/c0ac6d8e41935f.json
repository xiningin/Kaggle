{"cell_type":{"6f12b8d3":"code","63debbd6":"code","610de0f6":"code","df58f385":"code","75bd47d1":"code","04eea239":"code","270b6fb9":"code","a4b3a4d9":"code","f8e4fb11":"code","80acfe95":"code","915fa62c":"code","36662977":"code","b4c4ddd1":"code","d6aed8df":"code","a15c1fbb":"code","4af20f76":"code","4ee2e700":"code","b0b58228":"code","c160063b":"code","c24a9e02":"code","abedcea4":"code","d8255314":"code","5b108aaa":"code","174d62bc":"code","5b56a451":"code","6633d498":"code","f592255c":"code","2d089326":"code","64720935":"code","42ef24a6":"code","abad3745":"code","bb8814d4":"code","d4c5de3a":"code","5ec8eb8b":"code","d24ba6c6":"code","3e2a499d":"code","4d48ebd8":"code","0f46419c":"code","cb8935c7":"code","b40f5dd5":"code","1b24a0f6":"code","c86eb888":"code","5cbaa66f":"code","b84a01e6":"code","19820b5a":"code","fbab1553":"code","137caa57":"code","c187a7a6":"code","18054a32":"code","4d9032ef":"code","24e998cc":"code","8185780b":"code","34f42dd1":"code","c7e32e46":"code","358a08ad":"code","c6d90976":"code","32bc2aeb":"code","e6f7dc23":"code","b1c4d6c3":"code","62746c91":"code","56e8598f":"code","f5b173ad":"code","393431d6":"code","95689385":"code","0fb84f03":"code","b24cf417":"code","fdcd0c1f":"code","e6b66452":"code","0fc4af43":"code","7be740ba":"code","0af8488b":"code","287a6d02":"code","4e9713cb":"code","bf97b65f":"code","cf2489df":"code","466206e0":"code","bb7083af":"code","5b84720a":"code","07a6aed2":"code","c53ee0c2":"code","ad021343":"code","05170ac3":"code","34354d1a":"code","3d9bb188":"code","8a2d8cf2":"code","f63db7a3":"code","5e39bef5":"code","bf402759":"code","d6cfe79b":"code","fc2c77b2":"code","88a879e2":"code","dc826887":"code","08d14009":"code","dcb60389":"code","ea924bd0":"code","474da9ab":"code","f518fe26":"code","d81ba44c":"code","e99e0008":"markdown","1336bf6e":"markdown","16ef089d":"markdown","9c80b48b":"markdown","4ea92f0c":"markdown","df4aa251":"markdown"},"source":{"6f12b8d3":"#Fish prediction\n\n#SAS practice datasets\n\n#Multiple linear regression\n#Multivariate analysis","63debbd6":"#Importing all the needed libraries\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly as plt\n\n#avaoiding warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","610de0f6":"#Reading the file\nfish= pd.read_csv(\"..\/input\/fish-market\/Fish.csv\")","df58f385":"#Display the the tables\nfish.head(5)","75bd47d1":"fish.shape","04eea239":"fish.describe()","270b6fb9":"fish.info()","a4b3a4d9":"#Checking for null values\nfish.isnull().sum()","f8e4fb11":"#copy of fish file\ndf= fish.copy()","80acfe95":"df.head()","915fa62c":"df.columns","36662977":"#Checking for duplicate values\n\ndf[df.duplicated()== True]","b4c4ddd1":"df.corr()","d6aed8df":"df.columns","a15c1fbb":"\nsns.countplot(df['Species'])\n\n","4af20f76":"df['Species'].value_counts()","4ee2e700":"#PIE CHART\n\n# Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\n\ndf['Species'].value_counts().plot.pie(autopct='%1.1f%%', colors = ['cyan','darkcyan','pink'])","b0b58228":"#Weight\nsns.distplot(df['Weight'], color=\"DimGrey\")\n","c160063b":"#Height\nsns.distplot(df['Height'])","c24a9e02":"#Width\nsns.distplot(df['Width'], color=\"darkviolet\")","abedcea4":"sns.heatmap(df.corr(), annot=True, cmap='YlGnBu');","d8255314":"#scatterplot\n\nsns.scatterplot(data=df, x=\"Weight\", y=\"Length1\")","5b108aaa":"sns.scatterplot(data=df, x=\"Weight\", y=\"Length2\")","174d62bc":"sns.scatterplot(data=df, x=\"Weight\", y=\"Width\")","5b56a451":"sns.scatterplot(data=df, x=\"Weight\", y=\"Length3\", palette=\"deep\")","6633d498":"#So from the scatterplot it is evident that there are outliers","f592255c":"sns.pairplot(df, kind='scatter', hue='Species');","2d089326":"sns.boxplot(df['Weight'])\n","64720935":"ax = sns.boxplot(x=\"Species\", y=\"Weight\", data=df, palette=\"Set3\")","42ef24a6":"sns.violinplot(x=df[\"Weight\"])","abad3745":"df.head()","bb8814d4":"#Create a duplicate dataframe\ndf1 = df.copy()","d4c5de3a":"df1.head(5)","5ec8eb8b":"df1.drop(['Species'], axis=1,inplace= True)","d24ba6c6":"from sklearn.neighbors import LocalOutlierFactor\nclf = LocalOutlierFactor(n_neighbors=20, contamination=0.1)","3e2a499d":"y_pred = clf.fit_predict(df1)\ny_pred\n","4d48ebd8":"X_scores = clf.negative_outlier_factor_","0f46419c":"X_scores[0:10]","cb8935c7":"np.sort(X_scores)[0:20]","b40f5dd5":"threshold_value = np.sort(X_scores)[4]\nthreshold_value","1b24a0f6":"Outlier_df= df[X_scores < threshold_value]\nindexs=Outlier_df.index\nOutlier_df","c86eb888":"# Kick Outliers\nfor i in indexs:\n    df.drop(i, axis = 0,inplace = True)","5cbaa66f":"df1.head(5)","b84a01e6":"df.head()","19820b5a":"#Now we are doing label encoder to the species column","fbab1553":"from sklearn.preprocessing import LabelEncoder\nlbe = LabelEncoder()","137caa57":"lbe.fit_transform(df[\"Species\"])","c187a7a6":"df[\"Target\"]=lbe.fit_transform(df[\"Species\"])\ndf.head()","18054a32":"df.drop(['Species'],axis=1,inplace=True)","4d9032ef":"df.head(5)","24e998cc":"y=df['Target']\nX=df.drop('Target',axis=1)","8185780b":"X.head(5)","34f42dd1":"#Now we normalize X\n\n\nX = (X - np.min(X)) \/ (np.max(X) - np.min(X)).values\nX.head()","c7e32e46":"#splitting the data\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,  test_size=0.2, random_state=42)","358a08ad":"print('X_train',X_train.shape)\nprint('X_test',X_test.shape)\nprint('y_train',y_train.shape)\nprint('y_test',y_test.shape)","c6d90976":"from sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import classification_report,plot_confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\nfrom sklearn.model_selection import train_test_split","32bc2aeb":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier","e6f7dc23":"#Decision treee","b1c4d6c3":"from sklearn.tree import DecisionTreeClassifier\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state= 124)","62746c91":"print(X_train.shape, X_test.shape)","56e8598f":"model1= DecisionTreeClassifier()","f5b173ad":"model1.fit(X_train, y_train)","393431d6":"from sklearn.metrics import accuracy_score\nprediction = model1.predict(X_test)\n\naccuracy_score(y_test, prediction)","95689385":"from sklearn.metrics import classification_report, confusion_matrix","0fb84f03":"print (confusion_matrix(y_test, prediction))","b24cf417":"print (classification_report (y_test, prediction))","fdcd0c1f":"#logistic regression","e6b66452":"from sklearn.linear_model import LogisticRegression\nloj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X_train,y_train)\nloj_model","0fc4af43":"y_pred_loj = loj_model.predict(X_test)","7be740ba":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report","0af8488b":"accuracy_score(y_test, y_pred_loj)","287a6d02":"print(\"Training Accuracy :\", loj_model.score(X_train, y_train))\nprint(\"Testing Accuracy :\", loj_model.score(X_test, y_test))","4e9713cb":"cross_val_score(loj_model, X_test, y_test, cv = 10).mean()","bf97b65f":"print(classification_report(y_test, y_pred_loj))","cf2489df":"#Random Forest Classifier","466206e0":"from sklearn.ensemble.forest import RandomForestClassifier","bb7083af":"rf_model =RandomForestClassifier(n_estimators =150)","5b84720a":"rf_model.fit(X_train, y_train)","07a6aed2":"rf_prediction = rf_model.predict(X_test)","c53ee0c2":"print(classification_report(y_test, rf_prediction))","ad021343":"print(confusion_matrix(y_test, rf_prediction))","05170ac3":"#Feature Importance","34354d1a":"feat_importances = pd.Series(rf_model.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(15).plot(kind='barh')\n#feat_importances.nsmallest(20).plot(kind='barh')\n","3d9bb188":"#Gaussian Naive Bayes","8a2d8cf2":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb_model = nb.fit(X_train, y_train)\nnb_model","f63db7a3":"y_pred_nb = nb_model.predict(X_test)","5e39bef5":"accuracy_score(y_test, y_pred_nb)","bf402759":"print(classification_report(y_test, y_pred_nb))","d6cfe79b":"#KNN","fc2c77b2":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\nknn_model","88a879e2":"y_pred_knn = knn_model.predict(X_test)","dc826887":"accuracy_score(y_test, y_pred_knn)","08d14009":"print(classification_report(y_test, y_pred_knn))","dcb60389":"#Random Forest","ea924bd0":"from sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier().fit(X_train, y_train)","474da9ab":"y_pred_rf = rf_model.predict(X_test)\naccuracy_score(y_test, y_pred_rf)","f518fe26":"print(classification_report(y_test, y_pred_rf))","d81ba44c":"models = [\n    knn_model,\n    nb_model,\n    rf_model,\n    loj_model,\n    model1,\n    \n\n      \n]\n\nfor model in models:\n    names = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    print(\"-\"*28)\n    print(names + \":\" )\n    print(\"Accuracy: {:.4%}\".format(accuracy))","e99e0008":"Modelling","1336bf6e":"#Species = Species name of fish\n#Weight = Weight of fish in Gram g\n#Length1 = Vertical length in cm\n#Length3 = Cross length in cm\n#Height = Height in cm\n#Width = Diagonal width in cm","16ef089d":"This dataset is a record of 7 common different fish species in fish market sales. With this dataset, a predictive model can be performed using machine friendly data and estimate the weight of fish can be predicted.","9c80b48b":"Local Outlier Factor","4ea92f0c":"Data Preprocessing","df4aa251":"Distribution of weight , height, and width"}}