{"cell_type":{"d4b83d77":"code","de5baf8b":"code","1386e65b":"code","16921c0f":"code","9294cee5":"code","de5d710a":"code","7a2dadb5":"code","dcc0858e":"code","182742ba":"code","fafc6405":"code","e890b43a":"code","1242947f":"code","429db7fa":"code","c17eca06":"markdown","b35d5d97":"markdown","85edadc2":"markdown","c2e6fed0":"markdown"},"source":{"d4b83d77":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","de5baf8b":"#imports\nimport matplotlib.pyplot as plt\nimport cv2\nimport random","1386e65b":"face_cascade = cv2.CascadeClassifier('\/kaggle\/input\/haarcascade\/haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier('\/kaggle\/input\/haarcascade\/haarcascade_eye.xml')\nsmile_cascade = cv2.CascadeClassifier('\/kaggle\/input\/haarcascade\/haarcascade_smile.xml')","16921c0f":"# function to get images from directory\ndef get_data(directory):\n    a = []\n    for file in os.listdir(directory):\n        for f in os.listdir(directory+file):\n            img = cv2.imread(os.path.join(directory+file,f))\n            a.append(img)\n    return a","9294cee5":"path = '\/kaggle\/input\/lfw-dataset\/lfw-deepfunneled\/lfw-deepfunneled\/'\nX = get_data(path)","de5d710a":"type(X[0])","7a2dadb5":"X[0].shape","dcc0858e":"f,ax = plt.subplots(5,5) \nf.subplots_adjust(0,0,3,3)\nfor i in range(0,5,1):\n    for j in range(0,5,1):\n        rnd_number = random.randint(0,len(X))\n        ax[i,j].imshow(X[rnd_number])\n        ax[i,j].axis('off')","182742ba":"#im = np.array(X[0], dtype = np.uint8)\n#grayImage = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)","fafc6405":"# function to detect features\ndef detect(X):\n    a = []\n    for i in range(len(X)):\n        img = X[i]\n        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n        for (x,y,w,h) in faces:\n            cv2.rectangle(img,(x,y),(x+w,y+h),(255,255,255),2)\n            roi_gray = gray[y:y+h,x:x+w]\n            roi_color = img[y:y+h,x:x+w]\n            eyes = eye_cascade.detectMultiScale(roi_gray, 1.1, 22)\n            for (ex,ey,ew,eh) in eyes:\n                cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,0,255),2)\n            smiles = smile_cascade.detectMultiScale(roi_gray, 1.7, 25)\n            for (sx,sy,sw,sh) in smiles:\n                cv2.rectangle(roi_color,(sx,sy),(sx+sw,sy+sh),(0,255,0),2)\n        \n        a.append(img)\n    return a","e890b43a":"d = detect(X)","1242947f":"d[0].shape","429db7fa":"f,ax = plt.subplots(5,5) \nf.subplots_adjust(0,0,3,3)\nfor i in range(0,5,1):\n    for j in range(0,5,1):\n        rnd_number = random.randint(0,len(d))\n        ax[i,j].imshow(d[rnd_number])\n        ax[i,j].axis('off')","c17eca06":"# Define Haar cascades","b35d5d97":"**Look at some of the images**","85edadc2":"# Detect features","c2e6fed0":"**Look at some of the detected features**"}}