{"cell_type":{"722c2b9d":"code","7454a34a":"code","c8659434":"code","da8fbbef":"code","2dd75e04":"code","b4f43eee":"code","ca5405ce":"code","2caebc3e":"code","39946fc4":"code","bd338812":"code","55e912ea":"code","1fbd6075":"code","4a968245":"markdown","81255675":"markdown","58caf9cc":"markdown","977bc03f":"markdown"},"source":{"722c2b9d":"import os\n\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nfrom tqdm import tqdm_notebook as tqdm\nimport numba\n\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.axes_grid1 import ImageGrid","7454a34a":"INIT_DIR = '\/kaggle\/input\/nfl-big-data-bowl-2020'","c8659434":"os.listdir(INIT_DIR)","da8fbbef":"train = pd.read_csv(os.path.join(INIT_DIR, 'train.csv'), low_memory=False)","2dd75e04":"train.head()","b4f43eee":"@numba.jit\ndef dist_matrix(first_vector, second_vector):\n    first_length = len(first_vector)\n    second_length = len(second_vector)\n    \n    matrix = np.ones((first_length, second_length))\n    for i in range(len(first_vector)):\n        for j in range(len(second_vector)):\n            matrix[i, j] = np.sqrt(np.mean(np.square(first_vector[i] - second_vector[j])))\n    return matrix","ca5405ce":"poss_matrixs = np.zeros((len(train.PlayId.unique()[:25]), 11, 11, 3))\na_matrixs = np.zeros((len(train.PlayId.unique()[:25]), 11, 11, 3))\ns_matrixs = np.zeros((len(train.PlayId.unique()[:25]), 11, 11, 3))\ndis_matrixs = np.zeros((len(train.PlayId.unique()[:25]), 11, 11, 3))\n\nfor i, unique_play_id in tqdm(enumerate(train.PlayId.unique()[:25]), total=len(poss_matrixs)):\n    home_poss = train.loc[(train.PlayId == unique_play_id) & (train.Team == 'home'),:].sort_values(by='Position')[['X', 'Y']].values\n    away_poss = train.loc[(train.PlayId == unique_play_id) & (train.Team == 'away'),:].sort_values(by='Position')[['X', 'Y']].values\n    \n    home_a = train.loc[(train.PlayId == unique_play_id) & (train.Team == 'home'),:].sort_values(by='Position')[['A']].values\n    away_a = train.loc[(train.PlayId == unique_play_id) & (train.Team == 'away'),:].sort_values(by='Position')[['A']].values\n    \n    home_s = train.loc[(train.PlayId == unique_play_id) & (train.Team == 'home'),:].sort_values(by='Position')[['S']].values\n    away_s = train.loc[(train.PlayId == unique_play_id) & (train.Team == 'away'),:].sort_values(by='Position')[['S']].values\n    \n    home_dis = train.loc[(train.PlayId == unique_play_id) & (train.Team == 'home'),:].sort_values(by='Position')[['Dis']].values\n    away_dis = train.loc[(train.PlayId == unique_play_id) & (train.Team == 'away'),:].sort_values(by='Position')[['Dis']].values\n    \n    poss_matrixs[i] = np.dstack([dist_matrix(home_poss, home_poss), dist_matrix(away_poss, away_poss), dist_matrix(home_poss, away_poss)])\n    a_matrixs[i] = np.dstack([dist_matrix(home_a, home_a), dist_matrix(away_a, away_a), dist_matrix(home_a, away_a)])\n    s_matrixs[i] = np.dstack([dist_matrix(home_s, home_s), dist_matrix(away_s, away_s), dist_matrix(home_s, away_s)])\n    dis_matrixs[i] = np.dstack([dist_matrix(home_dis, home_dis), dist_matrix(away_dis, away_dis), dist_matrix(home_dis, away_dis)])","2caebc3e":"poss_matrixs = (poss_matrixs - np.min(poss_matrixs, axis=0)) \/ (np.max(poss_matrixs, axis=0) - np.min(poss_matrixs, axis=0) + 1)\na_matrixs = (a_matrixs - np.min(a_matrixs, axis=0)) \/ (np.max(a_matrixs, axis=0) - np.min(a_matrixs, axis=0) + 1)\ndis_matrixs = (dis_matrixs - np.min(dis_matrixs, axis=0)) \/ (np.max(dis_matrixs, axis=0) - np.min(dis_matrixs, axis=0) + 1)\ns_matrixs = (s_matrixs - np.min(s_matrixs, axis=0)) \/ (np.max(s_matrixs, axis=0) - np.min(s_matrixs, axis=0) + 1)","39946fc4":"fig = plt.figure(figsize=(25, 25))\n\ngrid = ImageGrid(fig, 111,\n                 nrows_ncols=(5, 5),\n                 axes_pad=0.5,\n                 )\n\nfor ax, im, y in zip(grid, poss_matrixs, train.Yards.values[:22*25:22]):\n    ax.imshow(im)\n    ax.set_title(str(y))","bd338812":"fig = plt.figure(figsize=(25, 25))\n\ngrid = ImageGrid(fig, 111,\n                 nrows_ncols=(5, 5),\n                 axes_pad=0.5,\n                 )\n\nfor ax, im, y in zip(grid, a_matrixs, train.Yards.values[:22*25:22]):\n    ax.imshow(im)\n    ax.set_title(str(y))","55e912ea":"fig = plt.figure(figsize=(25, 25))\n\ngrid = ImageGrid(fig, 111,\n                 nrows_ncols=(5, 5),\n                 axes_pad=0.5,\n                 )\n\nfor ax, im, y in zip(grid, s_matrixs, train.Yards.values[:22*25:22]):\n    ax.imshow(im)\n    ax.set_title(str(y))","1fbd6075":"fig = plt.figure(figsize=(25, 25))\n\ngrid = ImageGrid(fig, 111,\n                 nrows_ncols=(5, 5),\n                 axes_pad=0.5,\n                 )\n\nfor ax, im, y in zip(grid, dis_matrixs, train.Yards.values[:22*25:22]):\n    ax.imshow(im)\n    ax.set_title(str(y))","4a968245":"## Distance marix","81255675":"## Visualization","58caf9cc":"## Next steps\n* accelerate matrix calculation\n* try used simle CNN model\n* compare CNN trained on this matrixs with other approach","977bc03f":"## Normalize matrix"}}