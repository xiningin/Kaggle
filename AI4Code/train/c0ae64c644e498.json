{"cell_type":{"31c9fa27":"code","6ef4eadc":"code","e339db5a":"code","72271d5f":"code","8ae63e4d":"code","ef0521cb":"code","5adf47cb":"code","6cd87b8d":"code","5cb91129":"code","2f41d0e1":"code","09597be4":"code","ea7cfff8":"code","7b77658b":"code","6a7c1891":"code","b1312e2b":"code","a9ed662d":"code","e237f5ce":"code","161b0964":"code","c0a83893":"code","0ffc0aab":"code","4980262f":"code","b01a709e":"code","4013b908":"code","9369caf5":"code","06eb839c":"code","4f4e22ef":"code","2a61f7a1":"code","e2c0244c":"code","a026f53b":"code","0ba6ff27":"code","2caee4bc":"code","bdc1f1df":"code","b6574a27":"code","9f039401":"code","76b9c376":"code","4bee51f3":"code","083ba693":"code","0846086c":"code","787af58e":"code","505a8a5c":"code","889057a1":"code","e7a0b04b":"code","66184fc2":"code","50466d5a":"code","b7cc57b4":"code","348eb5a7":"code","f31a826b":"code","b13b3110":"code","22b88ebe":"code","c0fc6705":"code","a3d30c10":"code","4ea5e428":"code","2ce3fd66":"code","208489ee":"code","7553e822":"code","2e1789d7":"code","3478b31a":"code","e4098ff7":"code","b1c0a78c":"code","571c575b":"code","e50b22c8":"code","60b3329d":"code","63b98083":"code","9a018b68":"code","44295cf0":"code","39f16826":"code","81b0a439":"code","2309fc7c":"code","54fa2a34":"code","35899eb3":"code","d164bfbc":"code","cf5390d5":"code","238d7217":"code","79efa331":"code","d9885aff":"code","4dd65437":"code","fddb3fe8":"code","3239a280":"code","6b19f055":"code","04b60353":"code","4e35f0a9":"code","d8a7978b":"code","7254f303":"code","0ae63aac":"code","edc8df33":"code","d912dee7":"code","fe118041":"markdown","0a830e51":"markdown","9c0f9a8e":"markdown","479f1762":"markdown","0cc47202":"markdown","4e960d0d":"markdown","f750ef36":"markdown","6617e798":"markdown","4a5ffcb9":"markdown","7aa966e3":"markdown","25c56c29":"markdown","bc72cfc4":"markdown","a84d9e00":"markdown","5592fd80":"markdown","2d9dcb80":"markdown","d58019ba":"markdown","0636b193":"markdown","679af826":"markdown","d5a89107":"markdown","63def4f0":"markdown","d7c2bfe5":"markdown","59bab25a":"markdown","02f9289a":"markdown","6e1c2a17":"markdown","afd4c2f1":"markdown","3cd6ca92":"markdown","cc826091":"markdown","78d81bc8":"markdown","101760de":"markdown","d56f9d2b":"markdown","4d69afbe":"markdown","661f0861":"markdown","66f06ca9":"markdown","f3737dca":"markdown","886dae7c":"markdown","0366ef22":"markdown","28035fa5":"markdown","169818f4":"markdown","d046d55c":"markdown","34d987e2":"markdown","7da55636":"markdown","40b23eb7":"markdown","f9b0fba9":"markdown","8107a491":"markdown","52579334":"markdown","1451f9e6":"markdown","1a3214dc":"markdown","991dbbf8":"markdown","1c29b858":"markdown","dc0b0699":"markdown","bf505756":"markdown","97fb4073":"markdown"},"source":{"31c9fa27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ef4eadc":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","e339db5a":"import warnings\nwarnings.filterwarnings('ignore')","72271d5f":"matplotlib.rcParams.update({'font.size': 14})","8ae63e4d":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","ef0521cb":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","5adf47cb":"TRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'","6cd87b8d":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df","5cb91129":"train_df.dtypes","2f41d0e1":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df","09597be4":"train_df.dtypes","ea7cfff8":"print('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u0435\u0439\u043d\u0435: ', train_df.shape[0])\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0435\u0441\u0442\u0435: ', test_df.shape[0])","7b77658b":"train_df.shape[1] - 1 == test_df.shape[1]","6a7c1891":"train_df['Id'] = train_df['Id'].astype(str)\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)\ntrain_df.dtypes","b1312e2b":"plt.figure(figsize = (16, 8))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('Price')\n\nplt.title('Target distribution')\nplt.show()","a9ed662d":"train_df.describe()","e237f5ce":"df_num_features = train_df.select_dtypes(include=['float64', 'int64'])\ndf_num_features.drop('Price', axis=1, inplace=True)\ndf_num_features.hist(figsize=(16,16), bins=20, grid=False);","161b0964":"train_df.select_dtypes(include='object').columns.tolist()","c0a83893":"train_df['DistrictId'].value_counts()","0ffc0aab":"train_df['Ecology_2'].value_counts()","4980262f":"train_df['Ecology_3'].value_counts()","b01a709e":"train_df['Shops_2'].value_counts()","4013b908":"train_df.loc[train_df['Square'] < 3, 'Square'] = 3","9369caf5":"train_df['Rooms'].value_counts()","06eb839c":"train_df['Rooms_outlier'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 6), 'Rooms_outlier'] = 1\ntrain_df.head()","4f4e22ef":"train_df.loc[train_df['Rooms'] == 0, 'Rooms'] = 1","2a61f7a1":"train_df['Rooms'].value_counts()","e2c0244c":"temp_df = train_df.loc[train_df['Rooms'] < 6]\nSquare_Rooms_K = ((temp_df['Square'] - temp_df['KitchenSquare'])\/ temp_df['Rooms']).median()\nSquare_Rooms_K","a026f53b":"train_df.loc[train_df['Rooms'] >= 6, 'Rooms'] = round((train_df['Square'] - train_df['KitchenSquare']) \/ Square_Rooms_K)\ntrain_df['Rooms'].value_counts()","0ba6ff27":"train_df['KitchenSquare'].value_counts()","2caee4bc":"train_df['KitchenSquare'].quantile(.975), train_df['KitchenSquare'].quantile(.025)","bdc1f1df":"temp_df = train_df.loc[train_df['KitchenSquare'] < train_df['Square']]\nSquare_KitchenSquare_K = (temp_df['Square'] \/ temp_df['KitchenSquare']).median()\nSquare_KitchenSquare_K","b6574a27":"condition = (train_df['KitchenSquare'].isna()) \\\n             | (train_df['KitchenSquare'] > train_df['KitchenSquare'].quantile(.975))\n\ntrain_df.loc[condition, 'KitchenSquare'] = round(train_df['Square'] \/ Square_KitchenSquare_K)\n\ntrain_df.loc[train_df['KitchenSquare'] < 3, 'KitchenSquare'] = 3\n\ntrain_df['KitchenSquare'].value_counts()","9f039401":"train_df['HouseFloor'].value_counts()","76b9c376":"train_df['Floor'].value_counts()","4bee51f3":"(train_df['Floor'] > train_df['HouseFloor']).sum()","083ba693":"train_df['HouseFloor_outlier'] = 0\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1","0846086c":"train_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor'] = train_df['HouseFloor'].median()","787af58e":"floor_outliers = train_df.loc[train_df['Floor'] > train_df['HouseFloor']].index\nfloor_outliers","505a8a5c":"train_df.loc[floor_outliers, 'HouseFloor'] = train_df.loc[floor_outliers, 'Floor']","889057a1":"(train_df['Floor'] > train_df['HouseFloor']).sum()","e7a0b04b":"train_df['HouseYear'].sort_values(ascending=False)","66184fc2":"train_df['HouseYear'].sort_values().unique()","50466d5a":"train_df.loc[train_df['HouseYear'] > 2020, 'HouseYear'] = 2020\ntrain_df.loc[train_df['HouseYear'] < 1910, 'HouseYear'] = 1910","b7cc57b4":"train_df.isna().sum()","348eb5a7":"train_df['LifeSquare'].fillna((train_df['Square'] - train_df['KitchenSquare']), inplace=True)\ntrain_df.isna().sum()","f31a826b":"train_df.drop('Healthcare_1', axis=1, inplace=True)","b13b3110":"train_df.dtypes","22b88ebe":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians=None\n        self.kitchen_square_quantile = None\n        self.temp_df = None\n        \n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.975)\n        \n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Square\n        X.loc[X['Square'] < 3, 'Square'] = 3\n        \n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 6), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        \n        self.temp_df = X.loc[X['Rooms'] < 6]\n        Square_Rooms_K = (self.temp_df['Square'] \/ self.temp_df['Rooms']).median()\n        X.loc[X['Rooms'] >= 6, 'Rooms'] = round(X['Square'] \/ Square_Rooms_K)\n                \n        # KitchenSquare\n        self.temp_df = X.loc[X['KitchenSquare'] < X['Square']]\n        Square_KitchenSquare_K = (self.temp_df['Square'] \/ self.temp_df['KitchenSquare']).median()\n        condition = (X['KitchenSquare'].isna()) \\\n                    | (X['KitchenSquare'] > self.kitchen_square_quantile)\n        \n        X.loc[condition, 'KitchenSquare'] = round(X['Square'] \/ Square_KitchenSquare_K)\n        X.loc[X['KitchenSquare'] < 3, 'KitchenSquare'] = 3\n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        floor_outliers = X.loc[X['Floor'] > X['HouseFloor']].index\n#         X.loc[floor_outliers, 'Floor'] = X.loc[floor_outliers, 'HouseFloor']\\\n#                                             .apply(lambda x: random.randint(1, x))\n        X.loc[floor_outliers, 'HouseFloor'] = X.loc[floor_outliers, 'Floor']\n        \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        X.loc[X['HouseYear'] < 1910, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        X.loc[X['HouseYear'] < 1910, 'HouseYear'] = 1910\n        \n        # Healthcare_1\n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)\n            \n        # LifeSquare\n        X['LifeSquare'].fillna((X['Square'] - X['KitchenSquare']), inplace=True)\n        \n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","c0fc6705":"train_df_corr = train_df.corr()\nimport seaborn as sns\nplt.figure(figsize = (16,8))\nsns.set(font_scale=0.8)\ntrain_df_corr_round = np.round(train_df_corr, 2)\ntrain_df_corr_round[np.abs(train_df_corr) < 0.3] = 0\nsns.heatmap(train_df_corr_round, annot=True, linewidths=.5, cmap='coolwarm')\nplt.show()","a3d30c10":"binary_to_numbers = {'A': 0, 'B': 1}\n\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","4ea5e428":"district_size = train_df['DistrictId'].value_counts().reset_index().rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n\ndistrict_size.head()","2ce3fd66":"train_df = train_df.merge(district_size, on='DistrictId', how='left')\ntrain_df.head()","208489ee":"(train_df['DistrictSize'] > 100).value_counts()","7553e822":"train_df['IsDistrictLarge'] = (train_df['DistrictSize'] > 100).astype(int)","2e1789d7":"med_price_by_district = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByDistrict'})\n\nmed_price_by_district.head()","3478b31a":"med_price_by_district.shape","e4098ff7":"train_df = train_df.merge(med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\ntrain_df.head()","b1c0a78c":"def floor_to_cat(X):\n\n    X['floor_cat'] = 0\n\n    X.loc[X['Floor'] <= 3, 'floor_cat'] = 1  \n    X.loc[(X['Floor'] > 3) & (X['Floor'] <= 5), 'floor_cat'] = 2\n    X.loc[(X['Floor'] > 5) & (X['Floor'] <= 9), 'floor_cat'] = 3\n    X.loc[(X['Floor'] > 9) & (X['Floor'] <= 15), 'floor_cat'] = 4\n    X.loc[X['Floor'] > 15, 'floor_cat'] = 5\n\n    return X\n\n\ndef floor_to_cat_pandas(X):\n    bins = [0, 3, 5, 9, 15, X['Floor'].max()]\n    X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n    \n    X['floor_cat'].fillna(-1, inplace=True)\n    return X\n\n\ndef year_to_cat(X):\n\n    X['year_cat'] = 0\n\n    X.loc[X['HouseYear'] <= 1941, 'year_cat'] = 1\n    X.loc[(X['HouseYear'] > 1941) & (X['HouseYear'] <= 1945), 'year_cat'] = 2\n    X.loc[(X['HouseYear'] > 1945) & (X['HouseYear'] <= 1980), 'year_cat'] = 3\n    X.loc[(X['HouseYear'] > 1980) & (X['HouseYear'] <= 2000), 'year_cat'] = 4\n    X.loc[(X['HouseYear'] > 2000) & (X['HouseYear'] <= 2010), 'year_cat'] = 5\n    X.loc[(X['HouseYear'] > 2010), 'year_cat'] = 6\n\n    return X\n\n\ndef year_to_cat_pandas(X):\n    bins = [0, 1941, 1945, 1980, 2000, 2010, X['HouseYear'].max()]\n    X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n    \n    X['year_cat'].fillna(-1, inplace=True)\n    return X","571c575b":"bins = [0, 3, 5, 9, 15, train_df['Floor'].max()]\npd.cut(train_df['Floor'], bins=bins, labels=False)","e50b22c8":"bins = [0, 3, 5, 9, 15, train_df['Floor'].max()]\npd.cut(train_df['Floor'], bins=bins)","60b3329d":"train_df = year_to_cat(train_df)\ntrain_df = floor_to_cat(train_df)\ntrain_df.head()","63b98083":"med_price_by_floor_year = train_df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\nmed_price_by_floor_year.head()","9a018b68":"train_df = train_df.merge(med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\ntrain_df.head()","44295cf0":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.district_size = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByDistrict'})\n            \n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.house_year_max = df['HouseYear'].max()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n\n        \n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['MedPriceByDistrict'].fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['MedPriceByFloorYear'].fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        return X\n    \n    def floor_to_cat(self, X):\n        bins = [0, 3, 5, 9, 15, self.floor_max]\n        X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n\n        X['floor_cat'].fillna(-1, inplace=True)\n        return X\n     \n    def year_to_cat(self, X):\n        bins = [0, 1941, 1945, 1980, 2000, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n\n        X['year_cat'].fillna(-1, inplace=True)\n        return X","39f16826":"train_df.columns.tolist()","81b0a439":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear','Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3', 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['Rooms_outlier', 'HouseFloor_outlier', 'HouseYear_outlier', 'DistrictSize', 'new_district', 'IsDistrictLarge',  'MedPriceByDistrict', 'MedPriceByFloorYear']\n\ntarget_name = 'Price'","2309fc7c":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","54fa2a34":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","35899eb3":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","d164bfbc":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","cf5390d5":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","238d7217":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","79efa331":"rf_model = RandomForestRegressor(random_state=21, criterion='mse')\nrf_model.fit(X_train, y_train)","d9885aff":"y_train_preds = rf_model.predict(X_train)\ny_test_preds = rf_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","4dd65437":"cv_score = cross_val_score(rf_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score","fddb3fe8":"cv_score.mean()","3239a280":"feature_importances = pd.DataFrame(zip(X_train.columns, rf_model.feature_importances_), columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","6b19f055":"from sklearn.ensemble import StackingRegressor, VotingRegressor, BaggingRegressor, GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\ngb = GradientBoostingRegressor()\n\nstack = StackingRegressor([('lr', lr), ('rf', rf_model)], final_estimator=gb)\nstack.fit(X_train, y_train)","04b60353":"y_train_preds = stack.predict(X_train)\ny_test_preds = stack.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","4e35f0a9":"test_df.shape","d8a7978b":"test_df","7254f303":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","0ae63aac":"predictions = rf_model.predict(test_df)\npredictions","edc8df33":"submit['Price'] = predictions\nsubmit.head()","d912dee7":"submit.to_csv('rf_submit.csv', index=False)","fe118041":"## \u042d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u043c\u0430 - HouseFloor \u0438 \u044d\u0442\u0430\u0436 - Floor","0a830e51":"## MedPriceByDistrict","9c0f9a8e":"## \u041f\u043b\u0430\u043d \u0440\u0430\u0431\u043e\u0442\u044b\n\n1. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n2. EDA\n3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n4. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n5. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n6. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n7. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test\n8. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n9. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","479f1762":"## \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0432 \u043a\u0443\u0447\u0443","0cc47202":"\u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445","4e960d0d":"## \u041e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c - Square\n\n\u041e\u0431\u0440\u0435\u0436\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c","f750ef36":"\u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445","6617e798":"# 7. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test","4a5ffcb9":"## Dummies","7aa966e3":"## \u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438","25c56c29":"### \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u0430","bc72cfc4":"# \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0432 \u043a\u0443\u0447\u0443.","a84d9e00":"## \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f","5592fd80":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","2d9dcb80":"\u043d\u0430\u0439\u0434\u0435\u043c \u043a\u043e\u044d\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438 \u0434\u043b\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438.","d58019ba":"## \u041d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","0636b193":"### \u041f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c","679af826":"\u041d\u0430\u0439\u0434\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a","d5a89107":"## \u0411\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:","63def4f0":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","d7c2bfe5":"# 1. EDA\n\u0414\u0435\u043b\u0430\u0435\u043c EDA \u0434\u043b\u044f:\n\n* \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n* \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f NaN\n* \u0418\u0434\u0435\u0439 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447","59bab25a":"# 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n\n* \u0412\u044b\u043a\u0438\u043d\u0443\u0442\u044c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435, \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0432\u044b\u043a\u0438\u0434\u044b\u0432\u0430\u0435\u043c)\n* \u0417\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 (\u043c\u0435\u0434\u0438\u0430\u043d\u044b, \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, np.clip \u0438 \u0442.\u0434.)\n* \u0414\u0435\u043b\u0430\u0442\u044c\/\u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0444\u0438\u0447\u0443\n* \u041d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c","02f9289a":"## \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","6e1c2a17":"# \u0421\u0434\u0430\u0447\u0430 \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\n- \u041f\u0440\u0438\u043a\u0440\u0435\u043f\u0438\u0442\u0435 \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 (\u0435\u0441\u043b\u0438 \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u043d\u0430 kaggle, \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0435\u0433\u043e \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u043c)\n\n- \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0438\u043a \u043d\u0430 kaggle, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0435.\n\n# \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u043c\u0443:\n\n- \u041d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0444\u043e\u0440\u043c\u0438\u0442\u044c \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\u0438 \u044d\u0442\u0430\u043f\u0430\u043c\u0438:\n    * \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0430\u043d\u0430\u043b\u0438\u0437, \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0444\u0438\u0447\u0435\u0439)\n    * \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n    * \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\n    \n    \n- \u0422\u0430\u043a \u0436\u0435 \u043d\u0430\u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0444\u0430\u0439\u043b \u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438 \u043d\u0430 kaggle \u0438 \u043d\u0430 private leaderboard \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 0.6","afd4c2f1":"# 9. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\n1. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u043d\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n2. \u041d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c \u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u0432\n3. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0434\u043b\u044f \u0432\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043e\u043a)","3cd6ca92":"# 1. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","cc826091":"# 8. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","78d81bc8":"## 3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","101760de":"### \u041c\u0435\u0434\u043f\u043e\u043c\u043e\u0449\u044c_1 - Healthcare_1\n\u042f \u0443\u0431\u0438\u0440\u0430\u044e \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043c\u043d\u0435 \u043d\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.","d56f9d2b":"\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u0437\u0430\u043f\u0438\u0441\u0438, \u043f\u0440\u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044d\u0442\u0430\u0436\u0430 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440","4d69afbe":"\u0447\u0442\u043e \u0442\u043e \u043c\u043d\u043e\u0433\u043e\u0432\u0430\u0442\u043e \u0434\u043b\u044f 10000 \u0442\u044b\u0441\u044f\u0447 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043f\u043e\u0447\u0442\u0438 20%","661f0861":"## \u0413\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430 - HouseYear","66f06ca9":"\u0441\u043e\u0431\u0435\u0440\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0442\u0440\u043e\u043a \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440","f3737dca":"### \u0416\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c - LifeSquare\n\u0412\u044b\u0447\u0442\u0435\u043c \u0438\u0437 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u044e, \u0442\u0443\u0430\u043b\u0435\u0442\u044b \u043e\u0431\u044b\u0447\u043d\u043e \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435.","886dae7c":"### \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043d\u0430\u0442 \u0434\u043b\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043e\u043c\u043d\u0430\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 6\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0449\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u043c\u0435\u0442\u0440\u0430\u0436\u0430 1 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0434\u043b\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0441 5 \u0438 \u043c\u0435\u043d\u0435\u0435 \u043a\u043e\u043c\u043d\u0430\u0442.\n\u041a\u043e\u044d\u0444\u0438\u0446\u0438\u0435\u043d\u0442 =(\u041e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c - \u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438)\/\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442.","0366ef22":"### \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","28035fa5":"## \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 - Rooms\n\n\u0432\u044b\u0440\u0430\u0437\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043d\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 \u043e\u0431\u0449\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c","169818f4":"# 6. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","d046d55c":"\u0417\u0430\u0442\u0435\u043c \u0434\u043b\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043e\u043c\u043d\u0430\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 6.\n\u0411\u0435\u0440\u0435\u043c \u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u043c \u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u0438 \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u041a\u043e\u044d\u0444\u0438\u0446\u0438\u0435\u043d\u0442, \u0437\u0430\u0442\u0435\u043c \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u043c \u0434\u043e \u0446\u0435\u043b\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442.\n\u0418 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","34d987e2":"## MedPriceByFloorYear","7da55636":"\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u0430\u0436 \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430","40b23eb7":"## \u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f","f9b0fba9":"### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\n* **Id** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* **DistrictId** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* **Rooms** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* **Square** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **LifeSquare** - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **KitchenSquare** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* **Floor** - \u044d\u0442\u0430\u0436\n* **HouseFloor** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* **HouseYear** - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* **Ecology_1, Ecology_2, Ecology_3** - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Social_1, Social_2, Social_3** - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Healthcare_1, Helthcare_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* **Shops_1, Shops_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* **Price** - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","8107a491":"### 0 \u043a\u043e\u043c\u043d\u0430\u0442 \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0430 1 \u043a\u043e\u043c\u043d\u0430\u0442\u0443","52579334":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","1451f9e6":"### \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","1a3214dc":"## \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","991dbbf8":"## DistrictSize, IsDistrictLarge","1c29b858":"## \u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 - KitchenSquare","dc0b0699":"\u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f 97,5\n\u0434\u043b\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438 \u043c\u0435\u043d\u0435\u0435 3, \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043c 3\n\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","bf505756":"### \u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","97fb4073":"### \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\u00b6"}}