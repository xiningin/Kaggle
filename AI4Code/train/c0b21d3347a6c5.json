{"cell_type":{"43a065a0":"code","9ccb7187":"code","9cfe5500":"code","7f81478c":"code","067b80c8":"code","3a49300b":"code","45537375":"code","ad5ee85f":"code","5497253d":"code","30ec70b2":"code","7fa350d4":"code","67c4eeff":"code","c33e1ae0":"code","61dc1542":"code","8804bae9":"code","43556451":"code","b1ce7808":"code","b9984c1f":"code","2e103b94":"code","a40ec600":"code","78c10c96":"code","e3bb5a1f":"code","3c6d7521":"code","9536d68b":"code","9d32b3bd":"code","4640bc0b":"markdown","19beaade":"markdown"},"source":{"43a065a0":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","9ccb7187":"x1 = np.random.randn(1000)*1.5-4\nx2 = np.random.randn(1000)*1.5\n\nx3 = np.random.randn(1000)*0.5+4\nx4 = np.random.randn(1000)*0.5","9cfe5500":"X1 = np.hstack([x1,x3])\nX2 = np.hstack([x2,x4])\n\nX = np.vstack([X1,X2]).T","7f81478c":"y = np.ones(2000)\ny[1000:]=2","067b80c8":"plt.scatter(X[:,0],X[:,1],c=y, cmap='rainbow')\nplt.axis('equal');","3a49300b":"theta = np.linspace(0,2*np.pi,1000)\nx1 = np.random.randn(1000)*0.1+np.sin(theta)\ny1 = np.random.randn(1000)*0.1+np.cos(theta)\n\nx2 = np.random.randn(1000)*0.2\ny2 = np.random.randn(1000)*0.2","45537375":"plt.scatter(x1,y1)\nplt.scatter(x2,y2)\nplt.axis('equal');","ad5ee85f":"x1 = np.random.randn(1000)\nx2 = np.random.randn(1000)\n\nx3 = np.random.randn(1000)*0.2\nx4 = np.random.randn(1000)*0.2\n\nr = np.sqrt(x1**2+x2**2)\nr = (r<2.5) & (r>1.5)\n\nx1 = x1*r\nx2 = x2*r\n\nX = np.concatenate([[x1,x2],[x3,x4]], axis=1).T\nY = np.hstack([np.zeros(1000), np.ones(1000)])","5497253d":"plt.scatter(X[:,0], X[:,1], c=Y, s=40, cmap=plt.cm.Spectral)\nplt.axis('equal');","30ec70b2":"x_l = np.random.rand(1000)*0.1\ny_l = np.random.rand(1000)+1.1\n\nx_r = np.random.rand(1000)*0.1+0.9\ny_r = np.random.rand(1000)+1.1\n\nx_b = np.random.rand(1000)\ny_b = np.random.rand(1000)*0.1+1\n\nx_t = np.random.rand(1000)\ny_t = np.random.rand(1000)*0.1+2\n\nx_m = np.random.randn(10000)*0.07+0.5\ny_m = np.random.randn(10000)*0.07+1.5","7fa350d4":"# left\nplt.scatter(x_l,y_l)\n\n# right\nplt.scatter(x_r,y_r)\n\n# botton\nplt.scatter(x_b,y_b)\n\n# top\nplt.scatter(x_t,y_t)\n\n# middle\nplt.scatter(x_m, y_m)\nplt.axis('equal');","67c4eeff":"x1 = np.random.randn(1000)\ny1 = np.random.randn(1000)\n\nx2 = np.random.randn(1000)*0.2\ny2 = np.random.randn(1000)*0.2","c33e1ae0":"r = np.sqrt(x1**2+y1**2)>1.5","61dc1542":"plt.scatter(x1*r,y1*r)\nplt.scatter(x2,y2)\nplt.axis('equal');","8804bae9":"mean = [0,1]\nvar = [[1,-0.5],[-0.5,1]]\n\nx , y = np.random.multivariate_normal(mean, var, 1000).T \n\nmean1 = [3,1]\nvar1 = [[1,-0.5],[-0.5,1]]\n\nx1 , y1 = np.random.multivariate_normal(mean1, var1, 1000).T ","43556451":"plt.scatter(x,y)\nplt.scatter(x1,y1);","b1ce7808":"N = 100 # number of points per class\nD = 2 # dimensionality\nK = 3 # number of classes\nX = np.zeros((N*K,D)) # data matrix (each row = single example)\ny = np.zeros(N*K, dtype='uint8') # class labels\nfor j in range(K):\n  ix = range(N*j,N*(j+1))\n  r = np.linspace(0,1,N) # radius\n  t = np.linspace(j*4,(j+1)*4,N) + np.random.randn(N)*0.2 # theta\n  X[ix] = np.c_[r*np.sin(t), r*np.cos(t)]\n  y[ix] = j\n# let's visualize the data:\nplt.scatter(X[:, 0], X[:, 1], c=y, s=40, cmap='winter');","b9984c1f":"from sklearn.datasets import make_gaussian_quantiles\nX, y = make_gaussian_quantiles(mean=None, cov=0.5, n_samples=200, n_features=2, n_classes=2, shuffle=True, random_state=None)\n\nplt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='winter');","2e103b94":"from sklearn.datasets import make_blobs\nX, y = make_blobs(200, random_state=5, n_features=2, centers=6)\n\nplt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='winter');","a40ec600":"from sklearn.datasets import make_circles\nX, y = make_circles(200, noise=.05, random_state=0)\n\nplt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='winter');","78c10c96":"from sklearn.datasets import make_moons\nX, y = make_moons(200, noise=.05, random_state=0)\n\nplt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='winter');","e3bb5a1f":"m = 400 # number of examples\nN = int(m\/2) # number of points per class\nD = 2 # dimensionality\nX = np.zeros((m,D)) # data matrix where each row is a single example\nY = np.zeros((m), dtype='uint8') # labels vector (0 for red, 1 for blue)\na = 4 # maximum ray of the flower\n\nfor j in range(2):\n    ix = range(N*j,N*(j+1))\n    t = np.linspace(j*3.12,(j+1)*3.12,N) + np.random.randn(N)*0.2 # theta\n    r = a*np.sin(4*t) + np.random.randn(N)*0.2 # radius\n    X[ix] = np.c_[r*np.sin(t), r*np.cos(t)]\n    Y[ix] = j\n        \nX = X.T\ny = Y.T","3c6d7521":"plt.scatter(X[0,:], X[1,:], c=Y, s=40, cmap='winter');","9536d68b":"X_c=np.random.rand(2000)\nY_c=np.random.rand(2000)\nc1=X_c*0.6\nc1=Y_c*0.6\nX_c=X_c-c1\nY_c=Y_c-c1\nX_c1=np.random.rand(2000)\nY_c1=np.random.rand(2000)\nc11=X_c1*0.6 \nc11=Y_c1*0.6 - 1\nX_c1=X_c1-c11\nY_c1=Y_c1-c11\nplt.scatter(X_c, Y_c, c='r')\nplt.scatter(X_c1, Y_c1 -1 , c='b')\nplt.axis('equal');","9d32b3bd":"k = 200\nn = np.random.rand(k,1) * 720 * (2*np.pi)\/360\nx1 = -np.cos(n)*n + np.random.rand(k,1) * 0.5\ny1 = np.sin(n)*n + np.random.rand(k,1) * 0.5\nX = np.vstack((np.hstack((x1,y1)),np.hstack((-x1,-y1))))\ny = np.hstack((np.zeros(k),np.ones(k)))\nX = np.vstack((np.hstack((x1,y1)),np.hstack((-x1,-y1))))\ny = np.hstack((np.zeros(k),np.ones(k)))\nplt.scatter(X[y==0,0],X[y==0,1])\nplt.scatter(X[y==1,0],X[y==1,1])\nplt.axis('equal');","4640bc0b":"Artifical datasets can successfully replace real data and it is used for training and testing machine learning models. We usually use Artifical data when real data are sensitive, confidential or when acquiring data sets are expensive.","19beaade":"# Artificial Datasets for Machine Learning purposes"}}