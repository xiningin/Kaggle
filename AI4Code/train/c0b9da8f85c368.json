{"cell_type":{"3cc66948":"code","fb7cd344":"code","6a041a69":"code","08a9a55e":"code","6d7c6b4b":"code","50304b9f":"code","2be8288c":"code","2d80c201":"code","75fc3dca":"code","236a7691":"code","dae0f633":"code","29a183b6":"code","a5606110":"code","7d5f1cff":"code","a4c17e2f":"code","49b2371c":"code","288faa4f":"code","3248acdc":"code","3539edf8":"code","08557dae":"code","d3d7c3f2":"code","7d476409":"code","02310d2f":"code","d0bf5bdc":"code","0b7ba3bc":"code","e448de95":"code","d68eafef":"code","45a8e4c4":"code","70dc18de":"code","1a7d04df":"code","27fed380":"code","ef80b720":"code","091dca72":"code","0038eb88":"code","b36c6ab8":"code","b9076e04":"code","8780de5e":"code","06605ea2":"code","f28221a9":"code","a662749a":"code","0a5ae5d8":"code","f514f5bc":"code","0c92717a":"code","55cc5557":"code","6fb67f59":"code","7f6ba237":"code","033ca0f0":"code","019579b9":"code","6bebb8bb":"code","939893b0":"code","933a699b":"code","cb3c3cd6":"code","71b9cf34":"code","ade597e8":"code","237cb4e0":"code","bf65604d":"code","30a120d2":"code","41368fcf":"code","4924109e":"code","af5353df":"code","fb79763d":"code","5d34dbd8":"code","c1daaafd":"code","b5e258cc":"code","aa2b5df0":"markdown","b01086e8":"markdown","587a7acf":"markdown","668396f0":"markdown","912a8e2f":"markdown","82ab41e7":"markdown","ea688341":"markdown","0834f93e":"markdown","d9b03ff3":"markdown","10c8b013":"markdown","ebae0401":"markdown","0e22a85c":"markdown","31c316eb":"markdown","a147a8cc":"markdown","0ec86709":"markdown","2f8b3766":"markdown","9bea5fa9":"markdown","380822ea":"markdown","f58b0383":"markdown","fe319718":"markdown","b0e03826":"markdown","12e09630":"markdown","3e3b6de5":"markdown","f87ff6dd":"markdown"},"source":{"3cc66948":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport seaborn as sns\nplt.style.use({'figure.figsize':(16, 9)})","fb7cd344":"data = pd.read_csv('..\/input\/olist-public-dataset\/olist_public_dataset.csv')","6a041a69":"data.head()","08a9a55e":"data.order_status.unique()","6d7c6b4b":"data.customer_state.unique().shape","50304b9f":"data.product_category_name.unique().shape","2be8288c":"data.drop(['review_comment_title','Unnamed: 0','id','review_comment_message','customer_zip_code_prefix'],axis=1,inplace=True)","2d80c201":"data = data.dropna()","75fc3dca":"data.info()","236a7691":"time_col = [s for s in data.columns if (('_date' in s) or ('_timestamp' in s)) or ('order_aproved_at' in s)]\nprint(time_col)","dae0f633":"for i in time_col:\n    data[i] = pd.to_datetime(data[i])","29a183b6":"data['order_purchase_date'] = data.order_purchase_timestamp.dt.date\nsales_per_purchase_date = data.groupby('order_purchase_date', as_index=False).order_products_value.sum()\nax = sns.lineplot(x=\"order_purchase_date\", y=\"order_products_value\", data=sales_per_purchase_date,color='seagreen')\nax.set_title('Sales per day')","a5606110":"data['order_purchase_date'] = data.order_purchase_timestamp.dt.date\norder_counts_per_date = data.groupby('order_purchase_date',as_index=False).order_status.count()\nax = sns.lineplot(x=\"order_purchase_date\", y=\"order_status\", data=order_counts_per_date,color='orangered')\nax.set_ylabel('order purchase counts')\nax.set_title('Order per day')","7d5f1cff":"data['order_items_qty_date'] = data.order_purchase_timestamp.dt.date\norder_items_qty_date = data.groupby('order_purchase_date', as_index=False).order_items_qty.sum()\nax = sns.lineplot(x=\"order_purchase_date\", y=\"order_items_qty\", data=order_items_qty_date,color='purple')\nax.set_title('order items qty per day')","a4c17e2f":"data['order_purchase_week'] = data.order_purchase_timestamp.dt.to_period('W').astype(str)\nsales_per_purchase_week = data.groupby('order_purchase_week', as_index=False).order_products_value.sum()\nax = sns.lineplot(x=\"order_purchase_week\", y=\"order_products_value\", data=sales_per_purchase_week,color='seagreen')\nax.set_title('Sales per week')","49b2371c":"data['order_purchase_week'] = data.order_purchase_timestamp.dt.to_period('W').astype(str)\norder_counts_per_week = data.groupby('order_purchase_week', as_index=False).order_status.count()\nax = sns.lineplot(x=\"order_purchase_week\", y=\"order_status\", data=order_counts_per_week,color='orangered')\nax.set_title('order counts per week')\nax.set_ylabel('order per week')","288faa4f":"data['order_items_qty_week'] = data.order_purchase_timestamp.dt.to_period('W').astype(str)\norder_items_qty_week = data.groupby('order_purchase_week', as_index=False).order_items_qty.sum()\nax = sns.lineplot(x=\"order_purchase_week\", y=\"order_items_qty\", data=order_items_qty_week,color='purple')\nax.set_title('order items qty per week')","3248acdc":"data.head()","3539edf8":"data['review_date'] = data['review_creation_date'].dt.date","08557dae":"avg_review_score_date = data.groupby('review_date',as_index=False).review_score.mean()\nax = sns.lineplot(x='review_date',y='review_score',data=avg_review_score_date)\nax.set_title('average review score per day')","d3d7c3f2":"data['review_week'] = data.order_purchase_timestamp.dt.to_period('W').astype(str)\navg_review_score_week = data.groupby('review_week',as_index=False).review_score.mean()\nax = sns.lineplot(x='review_week',y='review_score',data=avg_review_score_week)\nax.set_title('average review score per week')","7d476409":"data['order_purchase_week'] = data.order_purchase_timestamp.dt.to_period('W').astype(str)\navg_sales_per_purchase_week = data.groupby('order_purchase_week', as_index=False).order_products_value.mean()\nax = sns.lineplot(x=\"order_purchase_week\", y=\"order_products_value\", data=avg_sales_per_purchase_week,color='seagreen')\nax.set_title('Average vales\/order per week')\nax.set_ylabel('avg values\/order')","02310d2f":"data['order_purchase_week'] = data.order_purchase_timestamp.dt.to_period('W').astype(str)\nsales_per_purchase_week = data.groupby('order_purchase_week', as_index=False).order_products_value.mean()\norder_freight_value_week = data.groupby('order_purchase_week', as_index=False).order_freight_value.mean()\nfreight_div_sales = pd.concat([sales_per_purchase_week['order_purchase_week'],\n                            (order_freight_value_week['order_freight_value']\/sales_per_purchase_week['order_products_value'])],\n                              axis=1)\nfreight_div_sales.columns = ['order_purchase_week','freight_div_sales']\nax = sns.lineplot(x=\"order_purchase_week\", y=\"freight_div_sales\", data=freight_div_sales,color='seagreen')\nax.set_title('Freight\/sales per week')","d0bf5bdc":"data.head()","0b7ba3bc":"data.head()","e448de95":"plt.scatter(data['customer_state'].value_counts().index.values,data['customer_state'].value_counts())","d68eafef":"data['customer_state'].value_counts()","45a8e4c4":"customer_state = dict(zip(*np.unique(data['customer_state'], return_counts=True)))\ndata['customer_state'] = data['customer_state'].apply(lambda x: 'OTHER' if customer_state[x] < 1000 else x)\n\ncs = pd.get_dummies(data['customer_state'],prefix='customer_state')\ndata = pd.concat((data,cs),axis=1)\ndata.drop(['customer_state'],axis=1,inplace=True)","70dc18de":"data['product_category_name'].value_counts()","1a7d04df":"plt.scatter(data['product_category_name'].value_counts().index.values,data['product_category_name'].value_counts())","27fed380":"product_category_name = dict(zip(*np.unique(data['product_category_name'], return_counts=True)))\ndata['product_category_name'] = data['product_category_name'].apply(lambda x: 'OTHER' if product_category_name[x] < 2000 else x)\n\npcn = pd.get_dummies(data['product_category_name'],prefix='product_category_name')\ndata = pd.concat((data,pcn),axis=1)\ndata.drop(['product_category_name'],axis=1,inplace=True)","ef80b720":"plt.scatter(data['product_name_lenght'].value_counts().index.values,data['product_name_lenght'].value_counts())","091dca72":"def get_nameLength(dt):\n    if (dt>=10) & (dt < 20):\n        return '20'\n    elif (dt>=20) & (dt<30):\n        return '30'\n    elif (dt>=30) & (dt<40):\n        return '40'\n    elif (dt>=40) & (dt<50):\n        return '50'\n    elif (dt>=50) & (dt<60):\n        return '60'\n    elif (dt>=60) & (dt<70):\n        return '70'\n    else:\n        return 'others'","0038eb88":"data['product_name_lenght_new'] = np.array([get_nameLength(x) for x in data['product_name_lenght']])\npnl = pd.get_dummies(data['product_name_lenght_new'],prefix='product_name_lenght')\ndata = pd.concat((data,pnl),axis=1)\ndata.drop(['product_name_lenght','product_name_lenght_new'],axis=1,inplace=True)","b36c6ab8":"plt.scatter(data['product_description_lenght'].value_counts().index.values,data['product_description_lenght'].value_counts())","b9076e04":"def get_descriptionLength(dt):\n    if (dt>=0) & (dt < 1000):\n        return '1000'\n    elif (dt>=1000) & (dt<2000):\n        return '2000'\n    elif (dt>=2000) & (dt<3000):\n        return '3000'\n    elif (dt>=3000) & (dt<4000):\n        return '4000'\n    else:\n        return 'others'","8780de5e":"data['product_description_lenght_new'] = np.array([get_descriptionLength(x) for x in data['product_description_lenght']])\npnl = pd.get_dummies(data['product_description_lenght_new'],prefix='product_description_lenght')\ndata = pd.concat((data,pnl),axis=1)\ndata.drop(['product_description_lenght','product_description_lenght_new'],axis=1,inplace=True)","06605ea2":"data.head()","f28221a9":"data['freight_div_sales'] = np.true_divide(data['order_freight_value'].values,data['order_products_value'].values)","a662749a":"plt.scatter(data['freight_div_sales'].value_counts().index.values,data['freight_div_sales'].value_counts())","0a5ae5d8":"def getFreightDivSales(dt):\n    if dt == 0:\n        return '0'\n    elif (dt>0) & (dt<0.25):\n        return '25%'\n    elif (dt>=0.25) & (dt<0.5):\n        return '50%'\n    elif (dt>=0.5) & (dt<0.75):\n        return '75%'\n    elif (dt>=0.75) & (dt<1):\n        return '100%'\n    else:\n        return 'more than 100%'","f514f5bc":"data['freight_div_sales_new'] = np.array([getFreightDivSales(x) for x in data['freight_div_sales']])\nfds = pd.get_dummies(data['freight_div_sales_new'],prefix='freight_div_sales')\ndata = pd.concat((data,fds),axis=1)\ndata.drop(['freight_div_sales','freight_div_sales_new'],axis=1,inplace=True)","0c92717a":"time_span_odcd_opt = data['order_delivered_customer_date'].subtract(data['order_purchase_timestamp']).dt.days","55cc5557":"plt.scatter(time_span_odcd_opt.value_counts().index.values,time_span_odcd_opt.value_counts())","6fb67f59":"def get_time_span_odcd_opt(dt):\n    if (dt <= 7) & (dt >= 0):\n        return 'OneWeek'\n    elif (dt <= 14) & (dt > 7):\n        return 'TwoWeeks'\n    elif (dt <= 21) & (dt > 14):\n        return 'ThreeWeeks'\n    elif (dt <= 28) & (dt > 21):\n        return 'FourWeeks'\n    elif (dt <= 35) & (dt > 28):\n        return 'FiveWeeks'\n    elif (dt <= 42) & (dt > 35):\n        return 'SixWeeks'\n    elif (dt <= 48) & (dt > 42):\n        return 'SevenWeeks'\n    else:\n        return 'More than sevenweeks'","7f6ba237":"data['time_span_odcd_opt'] = np.array([get_time_span_odcd_opt(x) for x in time_span_odcd_opt])\ntsoo = pd.get_dummies(data['time_span_odcd_opt'],prefix='time_span_odcd_opt')\ndata = pd.concat((data,tsoo),axis=1)\ndata.drop(['time_span_odcd_opt'],axis=1,inplace=True)","033ca0f0":"data['review_answer_timestamp_wd'] = np.array([x.isoweekday() for x in data['review_answer_timestamp']])\nrat_wd = pd.get_dummies(data['review_answer_timestamp_wd'], prefix = 'review_answer_timestamp_wd')\ndata = pd.concat((data, rat_wd), axis = 1)\ndata.drop(['review_answer_timestamp_wd','review_answer_timestamp'],axis=1,inplace=True)","019579b9":"data['order_purchase_timestamp_wd'] = np.array([x.isoweekday() for x in data['order_purchase_timestamp']])\nopt_wd = pd.get_dummies(data['order_purchase_timestamp_wd'], prefix = 'order_purchase_timestamp_wd')\ndata = pd.concat((data, opt_wd), axis = 1)\ndata.drop(['order_purchase_timestamp','order_purchase_timestamp_wd'],axis=1,inplace=True)","6bebb8bb":"order_status = pd.get_dummies(data['order_status'],prefix='order_status')\ndata = pd.concat((data,order_status),axis=1)\ndata.drop(['order_status'],axis=1,inplace=True)","939893b0":"time = ['order_aproved_at','order_estimated_delivery_date',\n        'order_delivered_customer_date','review_creation_date']\n\nfor i in time:\n    data[i + '_year'] = np.array([x.year for x in data[i]])\n    data[i + '_month'] = np.array([x.month for x in data[i]])   \n    data[i + '_day'] = np.array([x.day for x in data[i]])\n    data.drop([i],axis=1,inplace=True)","933a699b":"data.head()","cb3c3cd6":"data.drop(['customer_city','order_purchase_date','order_items_qty_date','order_purchase_week','order_items_qty_week',\n           'review_date','review_week'],axis=1,inplace=True)","71b9cf34":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import *\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","ade597e8":"train_data_ = data.drop('review_score',axis=1)\ntarget = data['review_score']\n\nn = int(train_data_.shape[0])\ntrain_data_ = train_data_.iloc[:n, :]\ntarget = target.iloc[:n]\n\nprint(n)\n\ndata_scaler = StandardScaler()\ntrain_data = data_scaler.fit_transform(train_data_)\nk_fold = KFold(n_splits=10, shuffle=False, random_state=0)","237cb4e0":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","bf65604d":"X_train, X_test, y_train, y_test = train_test_split(train_data,target,test_size=0.33,random_state=0)\nmodel = XGBClassifier()\nmodel.fit(X_train,y_train)","30a120d2":"y_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]","41368fcf":"accuracy = accuracy_score(y_test,predictions)\nprint(\"Accuracy:%2f%%\" % (accuracy * 100.0))","4924109e":"clf = KNeighborsClassifier(n_neighbors=5)\nscoring = 'accuracy'\nscore = cross_val_score(clf,train_data,target,cv=k_fold,n_jobs=1,scoring=scoring)\nprint(score)","af5353df":"#knn socre\nround(np.mean(score)*100,2)","fb79763d":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","5d34dbd8":"#decision tree socre\nround(np.mean(score)*100,2)","c1daaafd":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","b5e258cc":"# Random Forest Score\nround(np.mean(score)*100, 2)","aa2b5df0":"Decision tree","b01086e8":"week","587a7acf":"# week","668396f0":"knn","912a8e2f":"Time span(order_delivered_customer_date - order_purchase_timestamp)","82ab41e7":"Freight\/sales","ea688341":"Xgboost","0834f93e":"# modeling","d9b03ff3":"whether order_purchase_timestamp is a weekday","10c8b013":"# feature enginnering","ebae0401":"customer_state","0e22a85c":"# review score","31c316eb":"drop some useless features","a147a8cc":"product_name_lenght","0ec86709":"order_status","2f8b3766":"Random Forest","9bea5fa9":"day","380822ea":"time","f58b0383":"#\u5ba2\u5355\u4ef7","fe319718":"product_description_lenght","b0e03826":"# day","12e09630":"#\u6bcf\u5468\u8fd0\u8d39\u5360\u6bd4\u60c5\u51b5","3e3b6de5":"product_category_name","f87ff6dd":"whether review_answer_timestamp is a weekday"}}