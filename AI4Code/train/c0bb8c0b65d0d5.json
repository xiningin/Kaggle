{"cell_type":{"d4c056fc":"code","2ee35333":"code","7e37fa82":"code","4d591834":"code","085dd379":"code","e1779985":"code","160d15f8":"code","b21a5b89":"code","48949c71":"code","5fa0f62d":"code","69292018":"code","01b7f938":"code","6bc5cecf":"code","64a806c0":"markdown","e80c32e3":"markdown","1cbfdd73":"markdown","3db1f33f":"markdown","bf7b6d71":"markdown","00a9cc4b":"markdown","6678189a":"markdown","db01b17f":"markdown","297332c6":"markdown","a2376277":"markdown","8dbba49a":"markdown","df4e06b0":"markdown","6ee541d6":"markdown","561136e4":"markdown","5bba0f62":"markdown","81734208":"markdown"},"source":{"d4c056fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ee35333":"#import the libraries\nimport plotly.graph_objects as go\nimport pandas as pd\nimport plotly.express as px\n\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)","7e37fa82":"#read the data from the file using pandas\ndf = pd.read_csv(\"..\/input\/publictalks\/Publictalks.csv\")\ndf.head(1)","4d591834":"data_sorted=df.sort_values(by='comments', ascending=False)\ndata_comments=data_sorted.iloc[:3,:]","085dd379":"# Create two trace in the figure container\n\nfig = go.Figure( data = [go.Bar(x= data_comments.main_speaker, y= data_comments.comments, name='comments', type='bar', marker = dict( color='rgb(58,200,225)' )),\n\ngo.Bar(x= data_comments.main_speaker, y= data_comments.duration, name = 'duration in minutes', type='bar',text= data_comments.title, marker= dict(color='rgb(158,202,225)'))])\n\n \n\n# Create the layout object\n\nfig.update_layout(xaxis = {'title': 'Top 3 speakers'}, barmode='stack',title= 'Number of comments and speech duration of the 3 most commented')\n\n \n\n# Visualize the figure container\n\nfig.show()","e1779985":"# Filter the dataframe to take only the necessary details\ndfGlobal=df[df['event']=='TEDGlobal 2005']\ndf2002=df[df['event']=='TED2002']\ndf2006=df[df['event']=='TED2006']\n\n \n\n# Add three traces to the figure container\nfig = go.Figure(     data = [  go.Scatter( x = dfGlobal.index,y = dfGlobal.views,mode = \"lines+markers\",name = \"TEDGlobal 2005\",marker = dict(color = 'rgba(255, 128, 255, 0.8)'),text= dfGlobal.main_speaker),        \n\ngo.Scatter( x = df2002.index,y = df2002.views, mode = \"lines+markers\", name = \"TED2002\", marker = dict(color = 'rgba(255, 128, 2, 0.8)'), text= df2002.main_speaker),  \n\ngo.Scatter( x = df2006.index, y = df2006.views, mode = \"lines+markers\", name = \"TED2006\", marker = dict(color = 'rgba(0, 128, 2, 0.8)'),text= df2006.main_speaker),     ] )\n\n \n\n# Create the layout object\n\nfig.update_layout(title='Number of views received at TEDGlobal 2005, TED2002, TED2006',xaxis= {'title':'index','ticklen':5,'zeroline' : False},yaxis= {'title':'Views','ticklen':5,'zeroline' : False})\n\n \n\n# Visualise the figure container\n\nfig.show()","160d15f8":"#read the data from the file using pandas\ndata = pd.read_csv(\"..\/input\/planet-data-set\/planets.csv\")\ndata.head(1)","b21a5b89":"# Add a trace to the figure conatiner\n\nfig = go.Figure(\n    data = [\n        go.Scatter(x = data['planet'],\n                   y = data['distance_from_sun'],\n                   mode = 'markers',\n                   marker =dict(size = data['planet_diameter'],\n                                sizeref = 1000,\n                                color = data['no_of_moons'],\n                                colorscale = 'Rainbow',\n                                showscale = True\n                              ),\n                   text =  [str(dia) + ' km' for dia in data['planet_diameter']]),\n          ]\n)\n\n \n\n# Create the layout object\nfig.update_layout(height = 600, \n                   width = 900,\n                   title = 'Planets of our Solar System')\n\n \n\n# Plot the figure container\nfig.show()","48949c71":"# Importing Data Set into a Pandas Dataframe\ndata_google = pd.read_csv(\"..\/input\/google\/GOOGLE.csv\")\ndata_google.head(1)","5fa0f62d":"\n# Convert the time to conatin only the year\ndata_google['Year'] = pd.DatetimeIndex(data_google['Date']).year\n\n \n\n# Filter the data to contain only the 2010 stock market price\ndata_google= data_google[data_google['Year']==2010]\n\n \n\n# Add a trace to the figure container\nfig = go.Figure(data=[go.Candlestick(x=data_google['Date'],\n                open=data_google['Open'],\n                high=data_google['High'],\n                low=data_google['Low'],\n                close=data_google['Close'])])\n\n \n\n# Add the layout object\n\nfig.update_layout(title = 'Closing Stock price of Google in Year 2010',\n              xaxis= dict(title= 'Date',ticklen= 5,rangeslider = dict(visible = False),zeroline= False),\n              yaxis= dict(title= 'Closing Stock price($)',ticklen= 5,zeroline= False)\n             )\n\n \n\n# Plot the figure container\nfig.show()","69292018":"# Read the data from file\n\ndf1 = pd.read_csv('..\/input\/google\/GOOGLE.csv')\ndf2 = pd.read_csv('..\/input\/amazon\/AMAZON.csv')\n\n \n\n# Convert the date to contain only the year\ndf1['Year'] = pd.DatetimeIndex(df1['Date']).year\ndf2['Year'] = pd.DatetimeIndex(df2['Date']).year\n\n \n\n# Add traces to the figure container\nfig = go.Figure(\n    data = [\n        go.Scatter(x=df1[df1['Year']==2011].Date, y=df1[df1['Year']==2011].Close, name='GOOG', line=dict(color='lime')),\n        go.Scatter(x=df2[df2['Year']==2011].Date, y=df2[df2['Year']==2011].Close, name='AMZ', line=dict(color='Blue')),\n    ]\n)\n\n \n\n# Create the layout object\nfig.update_layout(xaxis = {'title': 'Date'},yaxis = {'title': 'Stock price($)'}, title= 'Stock Prices of GOOG vs AMZN in 2011')\n\n \n\n# Plot the figure container\nfig.show()","01b7f938":"#create a list with various nodes\nlocations = ['Street1', \n             'Street2', \n             'Street3', \n             'Front Lobby', \n             'Rear Lobby', \n             'Conference Room'\n            ]","6bc5cecf":"#create the figure container with data object. The trace is a Sankey chart\nfig = go.Figure(data = [\n    go.Sankey(\n        node = dict(\n            pad = 15,\n            thickness = 20,\n            line = dict(color = \"black\",width = 0.5),\n            label = locations,\n            color = \"blue\"\n        ),\n        link = dict(source = [0, 0, 1, 1, 2, 3, 4],\n                   target = [3,4,3,4,3,5,5],\n                   value = [2,2,4,2,5,9,3])\n    )\n])\n\n#create the layout object\nfig.update_layout(title_text = \"Sankey charts\")\n#plot the figure container\nfig.show()","64a806c0":"#  Time Series Chart","e80c32e3":"creating three separate line charts for the following three events: \u2018TEDGlobal 2005\u2019 'TED2006' and TED2002\u2019. Each line chart should show the number of views received by all the speakers who gave a talk in the respective events mentioned above. Following are the points to be noted:\n\nThe line graphs should be of different colours for both the events.\nThe graphs should have a legend for each event.\nThe line charts should show the name of the speakers when the cursor is hovered over them.\nWhat is the number of views for 'Dan Gilbert' who gave his speech in the event 'TEDGlobal 2005'? (Approx answer)","1cbfdd73":"Google's closing stock price increase or decrease on October 8th 2010 as compared to October 7th 2010 closing price?","3db1f33f":"Increased","bf7b6d71":"ans is Richard,ken and sam","00a9cc4b":"#  Candle stick","6678189a":"Comparing the stock prices of the two companies Google and Amazon which company had a higher closing stock price on April 15th 2011?","db01b17f":"creating a bubble plot in Plotly with the following terms and conditions.\n\nDefining the Bubble Chart\nplanets are on the X-axis\nthe Y-axis denotes the distance from the sun (in Million KM)\nthe marker size represents the planet diameter\nthe colour represents the number of moons\nThe hover text should show the planet diameter\nYou can size ref the plots to 1000\nWhich planet has the highest number of moons? Give your answer by observing the values on the colour scale.","297332c6":"Google is doing better","a2376277":"Answer the following questions by creating a stacked bar chart in Plotly for the top three speakers who received the highest number of comments for their talk. Each element on the x-axis, which in your case are the top three speakers, will have a separate stacked bar chart. The elements of the stacked bar chart should represent the following information:\n\nThe first layer of the stacked bar chart should show the total number of comments that were received for the speaker talk.\n\nThe second layer of the stacked bar chart should show the duration of the talk. This element should display the duratime time of the speaker's talk when hovered over it.\n\nWhat are the names of the top three speakers who received the highest number of comments? The order is first, second and third?","8dbba49a":"#  Bubble chart","df4e06b0":"#  Line and Scatter chart","6ee541d6":"# Jupiter has the highest number of moons","561136e4":"# Sankey Diagram","5bba0f62":"# BAR CHART","81734208":"Ans is 3.7 Million"}}