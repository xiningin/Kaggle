{"cell_type":{"50c04f60":"code","b350db81":"code","91c45a5c":"code","3e2f538c":"code","c451c073":"code","af0ebc7d":"code","dc938dfa":"code","6f53547a":"code","7dc54866":"code","1fd783ce":"code","101f144c":"code","9f80c610":"code","3c397fc4":"code","1413285b":"code","93ca1a15":"code","ece1f1e9":"code","ff2f714e":"code","2da7c49f":"code","081093a5":"code","1cb8b6e8":"code","9c3331d7":"code","778a99a1":"code","b9e7780a":"code","ef92e34b":"code","7bcf1788":"code","9204bab5":"code","ad15f866":"code","3593019a":"code","fb28ab1f":"code","a6a7c593":"code","9965ee16":"code","2a26939c":"code","5b77ef37":"code","991b1718":"code","8a414e54":"code","97121dda":"code","3333d0f2":"code","a3a1bb8e":"code","6314c013":"code","8d618528":"code","bc23ed1d":"code","437b301e":"code","09356009":"code","bef5280f":"code","5ca6417e":"code","61c4c115":"code","d0987730":"code","8eedbec5":"code","63f3553e":"code","82a05dcf":"code","a105ed36":"code","edc898e5":"code","e8f15c94":"code","cf6694b4":"code","c6553d0e":"code","77852bf5":"code","9aeec0b0":"code","8af4a41d":"code","10c273a4":"code","e6e29294":"code","e1409f23":"code","03c12f17":"code","4c3e2556":"code","5da2f712":"code","cd98be10":"code","58df75db":"code","60840157":"code","7db80a3d":"code","3084100d":"code","9e9121b8":"code","ea0c47c2":"code","01f99f2a":"code","a383a327":"code","ce20c926":"code","c238e15c":"code","8144a3ed":"code","8f9dee99":"code","9aed21ce":"code","55e2e750":"code","fa83909c":"code","9733d414":"markdown","a8fc706a":"markdown","67a48b12":"markdown","f404f44c":"markdown","94881d4c":"markdown","c3a7510d":"markdown","a64afc5f":"markdown","20396b7e":"markdown","3f610397":"markdown","1fb0eafd":"markdown","4c272226":"markdown","3f6da590":"markdown","6041b2c9":"markdown","fd9c34b6":"markdown","33ccf769":"markdown","33c46551":"markdown","c76670c5":"markdown","04546f6c":"markdown","1a80fa9a":"markdown","7ed8b37b":"markdown","40edfece":"markdown","2aa556f0":"markdown","cbeb93ff":"markdown","adad124b":"markdown","bf2e564a":"markdown"},"source":{"50c04f60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b350db81":"file = open('\/kaggle\/input\/datalab3\/files\/adult.data', 'r')","91c45a5c":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","3e2f538c":"print (data[1:2])","c451c073":"#matplotlib inline\nimport pandas as pd\n\ndf = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","af0ebc7d":"df.tail()","dc938dfa":"df.shape","6f53547a":"counts = df.groupby('country').size()\n\nprint (counts) ","7dc54866":"counts = df.groupby('age').size() # grouping by age\nprint(counts)\n","1fd783ce":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape","101f144c":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","9f80c610":"fm =df[(df.sex == 'Female')]\nfm.shape","3c397fc4":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","1413285b":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","93ca1a15":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","ece1f1e9":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","ff2f714e":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","2da7c49f":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","081093a5":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","1cb8b6e8":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","9c3331d7":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","778a99a1":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(density=0, histtype='stepfilled', bins=20)","b9e7780a":"fm_age=fm['age']\nfm_age.hist(histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","ef92e34b":"import seaborn as sns\nfm_age.hist(density=0, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=0, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","7bcf1788":"ml_age.hist(density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nfm_age.hist(density=1, histtype='stepfilled', alpha=.5, bins=10)   # default number of bins = 10\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","9204bab5":"ml_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","ad15f866":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","3593019a":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","fb28ab1f":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","a6a7c593":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","9965ee16":"ml_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","2a26939c":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","5b77ef37":"df['age'].median()","991b1718":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])\n","8a414e54":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","97121dda":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","3333d0f2":"ml1_age=ml1['age']\nfm1_age=fm1['age']","a3a1bb8e":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","6314c013":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","8d618528":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","bc23ed1d":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","437b301e":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","09356009":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","bef5280f":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","5ca6417e":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.","61c4c115":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","d0987730":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","8eedbec5":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","63f3553e":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","82a05dcf":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","a105ed36":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","edc898e5":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","e8f15c94":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","cf6694b4":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","c6553d0e":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","77852bf5":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","9aeec0b0":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","8af4a41d":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","10c273a4":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","e6e29294":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","e1409f23":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28)\nplt.plot(xgrid, density(xgrid), 'r-')","03c12f17":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18)","4c3e2556":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18)\nplt.plot(xgrid, density(xgrid), 'r-')","5da2f712":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50)","cd98be10":"print ('The empirical mean of the sample is ', x.mean())","58df75db":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","60840157":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","7db80a3d":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","3084100d":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","9e9121b8":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","ea0c47c2":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","01f99f2a":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","a383a327":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","ce20c926":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","c238e15c":"print (\"For the first Anscombe's quartet:\")\ndef Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nprint (\"Mean(X) = %.2f\" % np.mean(X[:,0]))\nprint (\"Mean(Y) = %.2f\" % np.mean(X[:,1]))\n\nprint (\"Var(X) = %.2f\" % np.var(X[:,0]))\nprint (\"Var(Y) = %.2f\" % np.var(X[:,1]))\nprint (\"Cov(X, X) = %.2f\" % Cov(X[:,0], X[:,0]))\nprint (\"Cov(X, Y) = %.2f\" % Cov(X[:,0], X[:,1]))\n\n\ndef list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nprint (\"ranks X: \", list2rank(X[:,0]))\nprint (\"ranks Y: \", list2rank(X[:,1]))\n\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X[:,0], X[:,1]))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X[:,0], X[:,1]))","8144a3ed":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","8f9dee99":"print (\"For the second Anscombe's quartet:\")\ndef Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nprint (\"Mean(X) = %.2f\" % np.mean(X[:,2]))\nprint (\"Mean(Y) = %.2f\" % np.mean(X[:,3]))\n\nprint (\"Var(X) = %.2f\" % np.var(X[:,2]))\nprint (\"Var(Y) = %.2f\" % np.var(X[:,3]))\nprint (\"Cov(X, X) = %.2f\" % Cov(X[:,2], X[:,2]))\nprint (\"Cov(X, Y) = %.2f\" % Cov(X[:,2], X[:,3]))\n\n\ndef list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nprint (\"ranks X: \", list2rank(X[:,2]))\nprint (\"ranks Y: \", list2rank(X[:,3]))\n\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X[:,2], X[:,3]))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X[:,2], X[:,3]))","9aed21ce":"print (\"For the third Anscombe's quartet:\")\ndef Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nprint (\"Mean(X) = %.2f\" % np.mean(X[:,4]))\nprint (\"Mean(Y) = %.2f\" % np.mean(X[:,5]))\n\nprint (\"Var(X) = %.2f\" % np.var(X[:,4]))\nprint (\"Var(Y) = %.2f\" % np.var(X[:,5]))\nprint (\"Cov(X, X) = %.2f\" % Cov(X[:,4], X[:,4]))\nprint (\"Cov(X, Y) = %.2f\" % Cov(X[:,4], X[:,5]))\n\n\ndef list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nprint (\"ranks X: \", list2rank(X[:,4]))\nprint (\"ranks Y: \", list2rank(X[:,5]))\n\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X[:,4], X[:,5]))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X[:,4], X[:,5]))","55e2e750":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","fa83909c":"print (\"For the fourth Anscombe's quartet:\")\n\ndef Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nprint (\"Mean(X) = %.2f\" % np.mean(X[:,6]))\nprint (\"Mean(Y) = %.2f\" % np.mean(X[:,7]))\n\nprint (\"Var(X) = %.2f\" % np.var(X[:,6]))\nprint (\"Var(Y) = %.2f\" % np.var(X[:,7]))\nprint (\"Cov(X, X) = %.2f\" % Cov(X[:,6], X[:,6]))\nprint (\"Cov(X, Y) = %.2f\" % Cov(X[:,6], X[:,7]))\n\n\ndef list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nprint (\"ranks X: \", list2rank(X[:,6]))\nprint (\"ranks Y: \", list2rank(X[:,7]))\n\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X[:,6], X[:,7]))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X[:,6], X[:,7]))","9733d414":"12. We observe on the same graph the ages distribution for men and women, men in light red and women in purple. If we use the same number of bins we observe that ages from 35 to 50 are more represented for men that women and that in general the number of men exceed the number of women for each category (which is normal because there are 21 790 men and 10 771 women in the database. That is why it could be useful to normalize the data using the PMF.","a8fc706a":"9. Using raw data, we observe that the number of hours per week for women is lower than for men. ","67a48b12":"14. Samples are now expressed as frequencies between 0 and 1. This normalized graph (PMF) has exactly the same shape as the graph in question 10 but its y axis is now different.","f404f44c":"2. We created a data frame from the previous data structure called \"data\". We then asked to print the first rows of the data frame, using the head() method.","94881d4c":"5. The \"Counts\" command used with groupby('country') provides us the number of rows (so the number of person) associated with each country. For example, the country USA is associated with 29170 persons and Mexico with 643.","c3a7510d":"10. By using the median value instead of the mean value we observe that the difference of hours per week between men and women no longer exists. The previous difference may come from errors in the raw data such as high values of hours per week for men.","a64afc5f":"16. The men cumulative distriution function gives us the probability \"y\" that the age of a random man picked inside data is lower than \"x\". For example the probability that a man is younger than 50 years is around 0.8 (80%).","20396b7e":"11. This graph shows us the distribution of ages for women. The number of bins is lower so the intervals are larger. We observe that instead of men, low ages are highly represented. ","3f610397":"7. We observe that the rate of people with high income is higher for men than for women. The difference is significant because it is 20%.","1fb0eafd":"10. This graph shows us the distribution of ages for men, with ages intervals of (Age_max-Age_min)\/Bins. The distribution is close to look like a gaussian curve which is centred around 38. ","4c272226":"17. We observe that the women CDF has higher steps at the begining that the men CDF, but the probability that a women is younger than 50 years old is still around 80%. In the opposite, the probability that she is younger than 30 is around 45%, but is equal to 35% for men.","3f6da590":"18. This graph is the same than for question 13 but with opposite colours.","6041b2c9":"19. By adding both CDF on the same graph we can easily compare the differences for ages distribution between men and women. The lines are separated by a large gap between 20 and 40 years old and then this gap tends to decrease.","fd9c34b6":"1. The result of the previous command is the first row of the data structure data. We just asked to print those values. ","33ccf769":"21. The mean squared error obtained is really low. The estimator corresponds perfectly.","33c46551":"6. If we use \"counts\" for the charateristics 'age', we have the number of every representated ages. The most representated age is 36.","c76670c5":"3. Using the method tail() we asked to print the last rows of the data frame.","04546f6c":"21. By suppressing too young and yoo old ages we reduce the differences between mean values.","1a80fa9a":"20. The mean age for men is higher that the mean age for women, this is explained as previously by the high number of young women in those data.","7ed8b37b":"21. We observe that the skewness for women is significantly higher than for men. Men and women data both skew right because they are positive. Women data are more distributed asymetrically.","40edfece":"21. The previous figure gives us a continuous function of the approximation of the distribution of the sum of random set of data (red line), by considering a Gaussian kernel around each set. ","2aa556f0":"4. The command shape gives us informations on the number of rows (32561) and columns (15). ","cbeb93ff":"8. The average age of high-income if obsviously higher than the average age, both for men and women. This is due to the income increase with experience. ","adad124b":"15. Same as the question before, the PMF graph for women gives us now normalized data in frequencies for each age. We still observe the previous trend, women that have been chosen in this analysis are younger comparatively to men.","bf2e564a":"13. By normalizing and using the same number of bins for each graph we can see that there are effectively younger women (blue) proportionally to men (indian red) in those data and more men between 30 and 50 than women."}}