{"cell_type":{"01241e28":"code","c141fe6a":"code","1dc08a8a":"code","a3ac6fa8":"code","144a4da2":"code","4ad1bba2":"code","121dec17":"code","19e27475":"code","4107344e":"code","8020d858":"code","e6fa112e":"code","2e57ecd5":"markdown","560d5171":"markdown","8e5eed0c":"markdown","11b666ed":"markdown","9b661ad3":"markdown","4b9ea52c":"markdown"},"source":{"01241e28":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\n\n","c141fe6a":"pd.set_option('display.max_columns', None)\ndf_ = pd.read_excel(\"..\/input\/pareto\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")\n\n#Dataset\ndf_.head()\n","1dc08a8a":"#Dataset's columns names and datatypes\n#541910 observation in our dataset\n\ndf_.info()","a3ac6fa8":"df = df_.copy()\n\n#we remove invoice cancelation datas\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]\n\n#we remove NA values\ndf=df.dropna()\ndf\n","144a4da2":"#Lets we find our total price(or total gain)\n\ndf[\"Total_gain\"]=df[\"Quantity\"]*df[\"Price\"]\n\ndf","4ad1bba2":"#our total gain\ndf[\"Total_gain\"].sum()","121dec17":"#Let's group by StockCode and sort by Total gain \ndf_new = df.groupby(\"StockCode\").agg({\"Total_gain\": \"sum\"}).sort_values(\"Total_gain\", ascending=False)\ndf_new.reset_index(inplace=True)\ndf_new","19e27475":"#Lets check our total gain again\ntotal_price=df_new[\"Total_gain\"].sum()\n","4107344e":"sayi = 0\nj = 0\nfor i in df_new[\"Total_gain\"]:\n    sayi = sayi + i\n    j = j + 1\n    if (sayi \/ total_price) >= 0.8:\n        break\nprint(j)\n    \n","8020d858":"print(777\/3665)","e6fa112e":"df_new\ndf_new_excel= df_new.loc[0:776]\n\ndf_new_excel.to_csv(\"pareto_bystockcode.csv\")","2e57ecd5":"when total gains  rank in descending order, the top 777 products account for 80% of the amount earned","560d5171":"These products are 21% of all my products.\n","8e5eed0c":"Our total gain: 8911425.904","11b666ed":"**First, we ranked our Price according to our products, we calculated which products generate 80% of our price. Finally, according to the result of our codes, we can say that 21% of our products generate 80% of our Price. \nFrom this example, we see that the Pareto rule has been proven in the data set with an easy approach.**","9b661ad3":"# **The Pareto principle states that, for most events, roughly 80% of impacts are due to 20% of the factors.**","4b9ea52c":"We have 3665 products"}}