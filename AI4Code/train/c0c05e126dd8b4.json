{"cell_type":{"014479f9":"code","9b0d4004":"code","3ab9a2e2":"code","3f693e3a":"code","e4193f5c":"code","8bdd099f":"code","92a6ae60":"code","8e6d3ae1":"code","948cab44":"code","15204e3d":"code","29276046":"code","14a5d96a":"code","31b05f65":"code","e139919f":"code","889453e0":"code","1702b7d3":"code","339a6c23":"code","bfad6011":"code","c4097870":"code","8fea82ad":"code","66e7fcf1":"code","30f22da2":"code","f3b8cc7e":"code","f8775860":"code","af659830":"code","bc0f9dae":"code","89e14300":"code","2edee108":"code","508196d1":"code","20c4a943":"code","c248dbc5":"code","5148e8e9":"code","d46b4922":"code","7ee972de":"code","98254dbf":"code","252dd90b":"code","4de6ceb7":"code","b99313a1":"code","70f4c1ae":"code","040b5551":"code","b7db1459":"code","c3e1961e":"code","5549b914":"code","c4dda3db":"code","0b678a65":"code","48becd61":"code","75b0c8e4":"code","c625b521":"code","f5506804":"code","8984d39a":"code","058bd738":"code","d4e488e6":"code","7d42fa83":"code","a6a42f21":"code","fadb5a8f":"code","9920d75c":"code","3f05f17d":"code","7031d1f3":"code","0f06da3b":"code","67d4bf37":"code","0041d6fe":"code","efd7c30c":"code","8c4053b3":"code","83028bf3":"code","72fb435c":"code","45e72d64":"code","d997b406":"code","c0aaa180":"code","59429a4d":"code","eca13c56":"code","55f6901c":"code","41a62145":"code","a867bc1f":"code","e48a6b92":"code","1154cd0c":"code","39bdf6c0":"code","1411116a":"code","1a7c0a0f":"code","1a29fddb":"code","4110a526":"code","96e54011":"code","db9ea66e":"code","b532d614":"code","9b0a7b1f":"code","bb3efa90":"code","b3d4df10":"code","fa7baa2d":"markdown","994c5ce4":"markdown","6846635c":"markdown","09dc17fe":"markdown","68dd919d":"markdown","022d3c9b":"markdown","5718e9a4":"markdown","7c081207":"markdown","4f5bd6ad":"markdown","1df63406":"markdown","dd4b3b2c":"markdown","86e82d4b":"markdown","6eab6e0c":"markdown","8c342116":"markdown","f95d9ebb":"markdown","c6579ce6":"markdown","9332212e":"markdown","be06b831":"markdown","ee3efa66":"markdown","71307080":"markdown","ea0b7d32":"markdown","9e3331ab":"markdown","660a71a5":"markdown","f801197b":"markdown","eeb42b45":"markdown","1f0c04dc":"markdown","11cfac2a":"markdown"},"source":{"014479f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b0d4004":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno as msno\nfrom sklearn import preprocessing\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler,PowerTransformer\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nimport plotly.express as ex\nfrom imblearn.over_sampling import SMOTE\n\nimport warnings\nwarnings.filterwarnings('ignore')","3ab9a2e2":"main_df=pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf=main_df.copy()","3f693e3a":"df.head()","e4193f5c":"df.tail()","8bdd099f":"df.shape","92a6ae60":"df.describe().T","8e6d3ae1":"df.info()","948cab44":"df.isnull().sum()","15204e3d":"plt.figure(figsize=(15,15))\nsns.heatmap(df.corr(),annot=True,linewidths=.5)","29276046":"df[\"DEATH_EVENT\"].value_counts().plot.bar()","14a5d96a":"df[\"DEATH_EVENT\"].value_counts()","31b05f65":"X = df.drop([\"DEATH_EVENT\"],axis=1)\ny = df['DEATH_EVENT']\n\noversample = SMOTE()\nX, y = oversample.fit_resample(X, y)\n\n\ndf = pd.concat([pd.DataFrame(X), pd.DataFrame(y)], axis=1)\ndf.columns =['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes',\n       'ejection_fraction', 'high_blood_pressure', 'platelets',\n       'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time',\n       'DEATH_EVENT']\ndf","e139919f":"X_SMT = df[\"DEATH_EVENT\"].value_counts().reset_index()\nsns.barplot(x = \"index\", y = \"DEATH_EVENT\", data=X_SMT);","889453e0":"df.columns","1702b7d3":"df.info()","339a6c23":"fig, axes = plt.subplots(3, 2, figsize=(18, 15))\nsns.boxplot(x=\"DEATH_EVENT\",y=\"age\",ax=axes[0,0],data=df)\nsns.boxplot(x=\"DEATH_EVENT\",y=\"ejection_fraction\",ax=axes[0,1],data=df)\nsns.boxplot(x=\"DEATH_EVENT\",y=\"platelets\",ax=axes[1,0],data=df)\nsns.boxplot(x=\"DEATH_EVENT\",y=\"serum_creatinine\",ax=axes[1,1],data=df)\nsns.boxplot(x=\"DEATH_EVENT\",y=\"serum_sodium\",ax=axes[2,0],data=df)","bfad6011":"sns.pairplot(df,hue=\"DEATH_EVENT\")","c4097870":"ex.pie(df,names=\"DEATH_EVENT\",title=\"DEATH EVENT\")","8fea82ad":"df.age = df.age.astype('int64')\ndf.anaemia=pd.Categorical(df.anaemia)\ndf.diabetes=pd.Categorical(df.diabetes)\ndf.high_blood_pressure=pd.Categorical(df.high_blood_pressure)\ndf.sex=pd.Categorical(df.sex)\ndf.smoking=pd.Categorical(df.smoking)\ndf.DEATH_EVENT=pd.Categorical(df.DEATH_EVENT)","66e7fcf1":"df.info()","30f22da2":"plt.figure(figsize=(20,16))\nddf=df.drop('DEATH_EVENT',axis=True)\nfor i,column in enumerate(ddf.columns,1):\n    plt.subplot(4,3,i)\n    sns.distplot(ddf[column],hist=True,color=\"blue\")\nplt.show()","f3b8cc7e":"df.columns","f8775860":"fig, axes = plt.subplots(4, 3, figsize=(20, 25))\n\npd.crosstab(df.age>df.age.mean() ,df.DEATH_EVENT).plot(kind='bar',ax=axes[0,0])\n\npd.crosstab(df.anaemia ,df.DEATH_EVENT).plot(kind='bar',ax=axes[0,1])\n\npd.crosstab(df.creatinine_phosphokinase>df.creatinine_phosphokinase.mean() ,df.DEATH_EVENT).plot(kind='bar',ax=axes[0,2])\n\npd.crosstab(df.diabetes ,df.DEATH_EVENT).plot(kind='bar',ax=axes[1,0])\n\npd.crosstab(df.ejection_fraction>df.ejection_fraction.mean() ,df.DEATH_EVENT).plot(kind='bar',ax=axes[1,1])\n\npd.crosstab(df.high_blood_pressure ,df.DEATH_EVENT).plot(kind='bar',ax=axes[1,2])\n\npd.crosstab(df.platelets>df.platelets.mean() ,df.DEATH_EVENT).plot(kind='bar',ax=axes[2,0])\n\npd.crosstab(df.serum_creatinine>df.serum_creatinine.mean() ,df.DEATH_EVENT).plot(kind='bar',ax=axes[2,1])\n\npd.crosstab(df.serum_sodium>df.serum_sodium.mean() ,df.DEATH_EVENT).plot(kind='bar',ax=axes[2,2])\n\npd.crosstab(df.smoking ,df.DEATH_EVENT).plot(kind='bar',ax=axes[3,0])\n\npd.crosstab(df.time>df.time.mean() ,df.DEATH_EVENT).plot(kind='bar',ax=axes[3,1])\n\n\nplt.show()\n","af659830":"# numeric variables \n\nage_big_avg=df[df[\"age\"]>df[\"age\"].mean()]\nage_small_avg=df[df[\"age\"]<df[\"age\"].mean()]\nage_big_avg_survived=age_big_avg[df[\"DEATH_EVENT\"]==0]\nage_big_avg_dead=age_big_avg[df[\"DEATH_EVENT\"]==1]\nage_small_avg_survived=age_small_avg[df[\"DEATH_EVENT\"]==0]\nage_small_avg_dead=age_small_avg[df[\"DEATH_EVENT\"]==1]\n\ncreatine_big_avg=df[df[\"creatinine_phosphokinase\"]>df[\"creatinine_phosphokinase\"].mean()]\ncreatine_small_avg=df[df[\"creatinine_phosphokinase\"]<df[\"creatinine_phosphokinase\"].mean()]\ncreatine_big_avg_survived=creatine_big_avg[df[\"DEATH_EVENT\"]==0]\ncreatine_big_avg_dead=creatine_big_avg[df[\"DEATH_EVENT\"]==1]\ncreatine_small_avg_survived=creatine_small_avg[df[\"DEATH_EVENT\"]==0]\ncreatine_small_avg_dead=creatine_small_avg[df[\"DEATH_EVENT\"]==1]\n\nejection_big_avg=df[df[\"ejection_fraction\"]>df[\"ejection_fraction\"].mean()]\nejection_small_avg=df[df[\"ejection_fraction\"]<df[\"ejection_fraction\"].mean()]\nejection_big_avg_survived=ejection_big_avg[df[\"DEATH_EVENT\"]==0]\nejection_big_avg_dead=ejection_big_avg[df[\"DEATH_EVENT\"]==1]\nejection_small_avg_survived=ejection_small_avg[df[\"DEATH_EVENT\"]==0]\nejection_small_avg_dead=ejection_small_avg[df[\"DEATH_EVENT\"]==1]\n\nplatelets_big_avg=df[df[\"platelets\"]>df[\"platelets\"].mean()]\nplatelets_small_avg=df[df[\"platelets\"]<df[\"platelets\"].mean()]\nplatelets_big_avg_survived=platelets_big_avg[df[\"DEATH_EVENT\"]==0]\nplatelets_big_avg_dead=platelets_big_avg[df[\"DEATH_EVENT\"]==1]\nplatelets_small_avg_survived=platelets_small_avg[df[\"DEATH_EVENT\"]==0]\nplatelets_small_avg_dead=platelets_small_avg[df[\"DEATH_EVENT\"]==1]\n\ns_creatine_big_avg=df[df[\"serum_creatinine\"]>df[\"serum_creatinine\"].mean()]\ns_creatine_small_avg=df[df[\"serum_creatinine\"]<df[\"serum_creatinine\"].mean()]\ns_creatine_big_avg_survived=s_creatine_big_avg[df[\"DEATH_EVENT\"]==0]\ns_creatine_big_avg_dead=s_creatine_big_avg[df[\"DEATH_EVENT\"]==1]\ns_creatine_small_avg_survived=s_creatine_small_avg[df[\"DEATH_EVENT\"]==0]\ns_creatine_small_avg_dead=s_creatine_small_avg[df[\"DEATH_EVENT\"]==1]\n\ns_sodium_big_avg=df[df[\"serum_sodium\"]>df[\"serum_sodium\"].mean()]\ns_sodium_small_avg=df[df[\"serum_sodium\"]<df[\"serum_sodium\"].mean()]\ns_sodium_big_avg_survived=s_sodium_big_avg[df[\"DEATH_EVENT\"]==0]\ns_sodium_big_avg_dead=s_sodium_big_avg[df[\"DEATH_EVENT\"]==1]\ns_sodium_small_avg_survived=s_sodium_small_avg[df[\"DEATH_EVENT\"]==0]\ns_sodium_small_avg_dead=s_sodium_small_avg[df[\"DEATH_EVENT\"]==1]\n\ntime_big_avg=df[df[\"time\"]>df[\"time\"].mean()]\ntime_small_avg=df[df[\"time\"]<df[\"time\"].mean()]\ntime_big_avg_survived=time_big_avg[df[\"DEATH_EVENT\"]==0]\ntime_big_avg_dead=time_big_avg[df[\"DEATH_EVENT\"]==1]\ntime_small_avg_survived=time_small_avg[df[\"DEATH_EVENT\"]==0]\ntime_small_avg_dead=time_small_avg[df[\"DEATH_EVENT\"]==1]","bc0f9dae":"# categorical variables\n\nanaemia_yes=df[df['anaemia']==1]\nanaemia_no=df[df['anaemia']==0]\nanaemia_yes_survived=anaemia_yes[df[\"DEATH_EVENT\"]==0]\nanaemia_yes_dead=anaemia_yes[df[\"DEATH_EVENT\"]==1]\nanaemia_no_survived=anaemia_no[df[\"DEATH_EVENT\"]==0]\nanaemia_no_dead=anaemia_no[df[\"DEATH_EVENT\"]==1]\n\ndiabetes_yes=df[df['diabetes']==1]\ndiabetes_no=df[df['diabetes']==0]\ndiabetes_yes_survived=diabetes_yes[df[\"DEATH_EVENT\"]==0]\ndiabetes_yes_dead=diabetes_yes[df[\"DEATH_EVENT\"]==1]\ndiabetes_no_survived=diabetes_no[df[\"DEATH_EVENT\"]==0]\ndiabetes_no_dead=diabetes_no[df[\"DEATH_EVENT\"]==1]\n\nblood_pressure_yes=df[df['high_blood_pressure']==1]\nblood_pressure_no=df[df['high_blood_pressure']==0]\nblood_pressure_yes_survived=blood_pressure_yes[df[\"DEATH_EVENT\"]==0]\nblood_pressure_yes_dead=blood_pressure_yes[df[\"DEATH_EVENT\"]==1]\nblood_pressure_no_survived=blood_pressure_no[df[\"DEATH_EVENT\"]==0]\nblood_pressure_no_dead=blood_pressure_no[df[\"DEATH_EVENT\"]==1]\n\nsmoking_yes=df[df['smoking']==1]\nsmoking_no=df[df['smoking']==0]\nsmoking_yes_survived=smoking_yes[df[\"DEATH_EVENT\"]==0]\nsmoking_yes_dead=smoking_yes[df[\"DEATH_EVENT\"]==1]\nsmoking_no_survived=smoking_no[df[\"DEATH_EVENT\"]==0]\nsmoking_no_dead=smoking_no[df[\"DEATH_EVENT\"]==1]","89e14300":"labels=[\"age_big_avg_survived\",\"age_big_avg_dead\",\"age_small_avg_survived\",\"age_small_avg_dead\"]\nvalues=[len(age_big_avg_survived),len(age_big_avg_dead),len(age_small_avg_survived),len(age_small_avg_dead)]\nex.pie(df,labels=labels,values=values,title=\"age - DEATH_EVENT\",names=labels)","2edee108":"labels=[\"creatine_big_avg_survived\",\"creatine_big_avg_dead\",\"creatine_small_avg_survived\",\"creatine_small_avg_dead\"]\nvalues=[len(creatine_big_avg_survived),len(creatine_big_avg_dead),len(creatine_small_avg_survived),len(creatine_small_avg_dead)]\nex.pie(df,labels=labels,values=values,title=\"creatinine_phosphokinase - DEATH_EVENT\",names=labels)","508196d1":"labels=[\"ejection_big_avg_survived\",\"ejection_big_avg_dead\",\"ejection_small_avg_survived\",\"ejection_small_avg_dead\"]\nvalues=[len(ejection_big_avg_survived),len(ejection_big_avg_dead),len(ejection_small_avg_survived),len(ejection_small_avg_dead)]\nex.pie(df,labels=labels,values=values,title=\"ejection_fraction - DEATH_EVENT\",names=labels)","20c4a943":"labels=[\"platelets_big_avg_survived\",\"platelets_big_avg_dead\",\"platelets_small_avg_survived\",\"platelets_small_avg_dead\"]\nvalues=[len(platelets_big_avg_survived),len(platelets_big_avg_dead),len(platelets_small_avg_survived),len(platelets_small_avg_dead)]\nex.pie(df,labels=labels,values=values,title=\"platelets - DEATH_EVENT\",names=labels)","c248dbc5":"labels=[\"s_creatine_big_avg_survived\",\"s_creatine_big_avg_dead\",\"s_creatine_small_avg_survived\",\"s_creatine_small_avg_dead\"]\nvalues=[len(s_creatine_big_avg_survived),len(s_creatine_big_avg_dead),len(s_creatine_small_avg_survived),len(s_creatine_small_avg_dead)]\nex.pie(df,labels=labels,values=values,title=\"serum_creatine - DEATH_EVENT\",names=labels)","5148e8e9":"labels=[\"s_sodium_big_avg_survived\",\"s_sodium_big_avg_dead\",\"s_sodium_small_avg_survived\",\"s_sodium_small_avg_dead\"]\nvalues=[len(s_sodium_big_avg_survived),len(s_sodium_big_avg_dead),len(s_sodium_small_avg_survived),len(s_sodium_small_avg_dead)]\nex.pie(df,labels=labels,values=values,title=\"serum_sodium -  DEATH_EVENT\",names=labels)","d46b4922":"labels=[\"time_big_avg_survived\",\"time_big_avg_dead\",\"time_small_avg_survived\",\"time_small_avg_dead\"]\nvalues=[len(time_big_avg_survived),len(time_big_avg_dead),len(time_small_avg_survived),len(time_small_avg_dead)]\nex.pie(df,labels=labels,values=values,title=\"time - DEATH_EVENT\",names=labels)","7ee972de":"labels=[\"anaemia_yes_survived\",\"anaemia_yes_dead\",\"anaemia_no_survived\",\"anaemia_no_dead\"]\nvalues=[len(anaemia_yes_survived),len(anaemia_yes_dead),len(anaemia_no_survived),len(anaemia_no_dead)]\nex.pie(df,labels=labels,values=values,title=\"anemia - DEATH_EVENT\",names=labels)","98254dbf":"labels=[\"diabetes_yes_survived\",\"diabetes_yes_dead\",\"diabetes_no_survived\",\"diabetes_no_dead\"]\nvalues=[len(diabetes_yes_survived),len(diabetes_yes_dead),len(diabetes_no_survived),len(diabetes_no_dead)]\nex.pie(df,labels=labels,values=values,title=\"diabetes - DEATH_EVENT\",names=labels)","252dd90b":"labels=[\"blood_pressure_yes_survived\",\"blood_pressure_yes_dead\",\"blood_pressure_no_survived\",\"blood_pressure_no_dead\"]\nvalues=[len(blood_pressure_yes_survived),len(blood_pressure_yes_dead),len(blood_pressure_no_survived),len(blood_pressure_no_dead)]\nex.pie(df,labels=labels,values=values,title=\"high_blood_pressure - DEATH_EVENT\",names=labels)","4de6ceb7":"labels=[\"smoking_yes_survived\",\"smoking_yes_dead\",\"smoking_no_survived\",\"smoking_no_dead\"]\nvalues=[len(smoking_yes_survived),len(smoking_yes_dead),len(smoking_no_survived),len(smoking_no_dead)]\nex.pie(df,labels=labels,values=values,title=\"smoking - DEATH_EVENT\",names=labels)","b99313a1":"df.columns","70f4c1ae":"plt.figure(figsize=(12,8))\nX = df.drop([\"DEATH_EVENT\"],axis=1)\ny = df['DEATH_EVENT']\nsns.distplot(y)\nplt.show()","040b5551":"X","b7db1459":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=42)","c3e1961e":"df.info()","5549b914":"sc=StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","c4dda3db":"lr=LogisticRegression(solver=\"liblinear\")\nlr_model=lr.fit(X_train,y_train)\nlr_model.intercept_","0b678a65":"y_pred=lr_model.predict(X_test)\nconfusion_matrix(y_test,y_pred)","48becd61":"accuracy_score(y_test,y_pred) # primitive score","75b0c8e4":"print(classification_report(y_test,y_pred))","c625b521":"logit_roc_auc= roc_auc_score(y_test,lr_model.predict(X_test))\nfpr,tpr,thresholds = roc_curve(y_test,lr_model.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr,tpr,label=\"AUC (area = %0.2f)\" % logit_roc_auc)\nplt.plot([0,1],[0,1],\"r--\")\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title(\"ROC\")\nplt.show()","f5506804":"lr=LogisticRegression(random_state=42)\nlr_tuned=lr.fit(X_train,y_train)\naccuracy_score(y_test,lr_tuned.predict(X_test))","8984d39a":"nb=GaussianNB()\nnb_model=nb.fit(X_train,y_train)\nnb_model.predict(X_test)[0:10]","058bd738":"nb_model.predict_proba(X_test)[0:10]","d4e488e6":"y_pred=nb_model.predict(X_test)\naccuracy_score(y_test,y_pred)","7d42fa83":"nb_params={'var_smoothing': np.logspace(0,-9, num=100)}\nnb_cv=GridSearchCV(estimator=nb, \n                 param_grid=nb_params, \n                 cv=10, \n                 verbose=1, \n                 scoring='accuracy') \nnb_cv.fit(X_train,y_train)\nnb_cv.best_params_","a6a42f21":"nb=GaussianNB(**nb_cv.best_params_)\nnb_tuned=nb.fit(X_train,y_train)\n\ny_pred=nb_tuned.predict(X_test)\naccuracy_score(y_test,y_pred)","fadb5a8f":"knn=KNeighborsClassifier()\nknn_model=knn.fit(X_train,y_train)\ny_pred=knn_model.predict(X_test) \naccuracy_score(y_test,y_pred)","9920d75c":"print(classification_report(y_test,y_pred))","3f05f17d":"knn_params={\"n_neighbors\":np.arange(1,50)}\nknn=KNeighborsClassifier()\nknn_cv=GridSearchCV(knn,knn_params,cv=10).fit(X_train,y_train)\nknn_cv.best_params_","7031d1f3":"knn=KNeighborsClassifier(**knn_cv.best_params_)\nknn_tuned=knn.fit(X_train,y_train)\ny_pred=knn_tuned.predict(X_test)\naccuracy_score(y_test,y_pred)","0f06da3b":"svm_model=SVC(random_state=42).fit(X_train,y_train)\ny_pred=svm_model.predict(X_test)\naccuracy_score(y_test,y_pred)","67d4bf37":"svc_params={\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nsvc=SVC(random_state=42)\nsvc_cv_model=GridSearchCV(svc,svc_params,cv=10,n_jobs=-1,verbose=1).fit(X_train,y_train)\nsvc_cv_model.best_params_","0041d6fe":"svc_tuned=SVC(**svc_cv_model.best_params_).fit(X_train,y_train)\ny_pred=svc_tuned.predict(X_test)\naccuracy_score(y_test,y_pred)","efd7c30c":"scaler=StandardScaler()\nscaler.fit(X_train)\nX_train_scaled=scaler.transform(X_train)\nX_test_scaled=scaler.transform(X_test)\nmlpc=MLPClassifier(random_state=42).fit(X_train_scaled,y_train)\n\ny_pred=mlpc.predict(X_test_scaled)\naccuracy_score(y_test,y_pred)","8c4053b3":"mlpc_params={\"alpha\":[0.1,0.01,0.02,0.005,0.0001,0.00001],\n            \"hidden_layer_sizes\":[(10,10,10),(100,100,100),(100,100),(3,5),(5,3)],\n            \"solver\":[\"lbfgs\",\"adam\",\"sgd\"],\n            \"activation\":[\"relu\",\"logistic\"],\n            \"random_state\":[42]}\n\nmlpc=MLPClassifier(random_state=42)\nmlpc_cv_model=GridSearchCV(mlpc,mlpc_params,cv=10,n_jobs=-1,verbose=2).fit(X_train_scaled,y_train)\nmlpc_cv_model.best_params_","83028bf3":"mlpc_tuned=MLPClassifier(**mlpc_cv_model.best_params_).fit(X_train,y_train)\ny_pred=mlpc_tuned.predict(X_test)\naccuracy_score(y_test,y_pred)","72fb435c":"cart=DecisionTreeClassifier(random_state=42)\ncart_model=cart.fit(X_train,y_train)\n\ny_pred=cart_model.predict(X_test)\naccuracy_score(y_test,y_pred)","45e72d64":"cart_params={\"max_depth\":list(range(1,10)),\n          \"min_samples_split\":list(range(2,50)),}\n\ncart=tree.DecisionTreeClassifier(random_state=42)\ncart_cv_model=GridSearchCV(cart,cart_params,cv=10,n_jobs=-1,verbose=2).fit(X_train,y_train)\ncart_cv_model.best_params_","d997b406":"cart=tree.DecisionTreeClassifier(**cart_cv_model.best_params_)\ncart_tuned=cart.fit(X_train,y_train)\n\ny_pred=cart_tuned.predict(X_test)\naccuracy_score(y_test,y_pred)","c0aaa180":"rf_model=RandomForestClassifier(random_state=42).fit(X_train,y_train)\ny_pred=rf_model.predict(X_test)\naccuracy_score(y_test,y_pred)","59429a4d":"rf_params={\"max_depth\":[2,5,8,10],\n          \"max_features\":[2,5,8],\n          \"n_estimators\":[10,500,1000],\n          \"min_samples_split\":[2,5,10]}\n\n\nrf_model=RandomForestClassifier(random_state=42)\nrf_cv_model=GridSearchCV(rf_model,rf_params,cv=10,n_jobs=-1,verbose=2).fit(X_train,y_train)\n\nrf_cv_model.best_params_","eca13c56":"rf_tuned=RandomForestClassifier(**rf_cv_model.best_params_).fit(X_train,y_train)\ny_pred=rf_tuned.predict(X_test)\naccuracy_score(y_test,y_pred)","55f6901c":"gbm_model=GradientBoostingClassifier(random_state=42).fit(X_train,y_train)\ny_pred=gbm_model.predict(X_test)\naccuracy_score(y_test,y_pred)","41a62145":"gbm_params={\"n_estimators\":[5,50,250,500,1000],\n            \"max_depth\":[1,3,5,7,9],\n            \"learning_rate\":[0.01,0.1,1,2]}\n\ngbm=GradientBoostingClassifier(random_state=42)\ngbm_cv_model=GridSearchCV(gbm,gbm_params,cv=10,n_jobs=-1,verbose=2).fit(X_train,y_train)\n\ngbm_cv_model.best_params_","a867bc1f":"gbm_tuned=GradientBoostingClassifier(**gbm_cv_model.best_params_).fit(X_train,y_train)\ny_pred=gbm_tuned.predict(X_test)\naccuracy_score(y_test,y_pred)","e48a6b92":"xgb_model=XGBClassifier(random_state=42).fit(X_train,y_train)\ny_pred=xgb_model.predict(X_test)\naccuracy_score(y_test,y_pred)","1154cd0c":"\"\"\"\nxgb_params={\"n_estimators\":[500,1000],\n           \"max_depth\":[4,5,6],\n           \"learning_rate\":[0.01,0.1],\n           \"tree_method\":[\"hist\"],\n           \"max_delta_step\":[1]}\n\nxgb=XGBClassifier(random_state=42)\nxgb_cv_model=GridSearchCV(xgb,xgb_params,cv=10,n_jobs=-1,verbose=2).fit(X_train,y_train)\n\nxgb_cv_model.best_params_\n\"\"\"","39bdf6c0":"xgb_tuned=XGBClassifier(random_state=42,learning_rate=0.001,max_depth=7,n_estimators=1500).fit(X_train,y_train)\n\ny_pred=xgb_tuned.predict(X_test)\naccuracy_score(y_test,y_pred)","1411116a":"lgbm_model=LGBMClassifier().fit(X_train,y_train)\ny_pred=lgbm_model.predict(X_test)\naccuracy_score(y_test,y_pred)","1a7c0a0f":"lgbm_params={\"n_estimators\":[100,500,1000],\n           \"max_depth\":[3,4,5,6],\n           \"learning_rate\":[0.1,0.01,0.02,0.05],\n           \"min_child_samples\":[2,5,10,20]}\n\nlgbm=LGBMClassifier()\nlgbm_cv_model=GridSearchCV(lgbm,lgbm_params,cv=10,n_jobs=-1,verbose=2).fit(X_train,y_train)\nlgbm_cv_model.best_params_","1a29fddb":"lgbm_tuned=LGBMClassifier(**lgbm_cv_model.best_params_).fit(X_train,y_train)\ny_pred=lgbm_tuned.predict(X_test)\naccuracy_score(y_test,y_pred)","4110a526":"catb_model=CatBoostClassifier(random_state=42).fit(X_train,y_train)\n\ny_pred=catb_model.predict(X_test)","96e54011":"accuracy_score(y_test,y_pred)","db9ea66e":"catb_params={\"iterations\":[1000,1500],\n            \"learning_rate\":[0.01,0.05,0.1],\n            \"depth\":[3,5,8],\n            \"random_state\":[42]}\ncatb=CatBoostClassifier(random_state=42)\ncatb_cv_model=GridSearchCV(catb,catb_params,cv=10,n_jobs=-1,verbose=2).fit(X_train,y_train)\n\ncatb_cv_model.best_params_","b532d614":"catb_tuned=CatBoostClassifier(**catb_cv_model.best_params_).fit(X_train,y_train)\n\ny_pred=catb_tuned.predict(X_test)","9b0a7b1f":"accuracy_score(y_test,y_pred)","bb3efa90":"models=[knn_tuned,\n         lr_tuned,\n         svc_tuned,\n         nb_tuned,\n         mlpc_tuned,\n         cart_tuned,\n         rf_tuned,\n         gbm_tuned,\n         catb_tuned,\n         lgbm_model,\n         xgb_tuned]\n\n\nresult=[]\n\nresults=pd.DataFrame(columns=[\"Models\",\"Accuracy\"])\n\nfor model in models:\n    names=model.__class__.__name__\n    y_pred=model.predict(X_test)\n    accuracy=accuracy_score(y_test,y_pred)\n    result=pd.DataFrame([[names,accuracy*100]],columns=[\"Models\",\"Accuracy\"])\n    results=results.append(result)\n    \nresults = results.sort_values('Accuracy').reset_index()\n\nsns.barplot(x=\"Accuracy\",y=\"Models\",data=results,color=\"r\")","b3d4df10":"del results[\"index\"]\nresults","fa7baa2d":"# **Read Data and Preprocessing**","994c5ce4":"### Logistic Regression Tuning","6846635c":"## **Support Vector Machines (SVM)**","09dc17fe":"## **Artificial Neural Networks (ANN)**","68dd919d":"## **eXtreme Gradient Boosting (XGBM)**","022d3c9b":"### KNN Tuning","5718e9a4":"### CART Tuning","7c081207":"### GBM Tuning","4f5bd6ad":"## **CatBoost**","1df63406":"## **LightGBM**","dd4b3b2c":"## **K-Nearest Neighbors (KNN)**","86e82d4b":"**In the following visualization;**\n\n**numeric variables are taken as \"True\" if they are greater than the mean,**\n\n**numeric variables are taken as \"False\" if they are less than the mean.**","6eab6e0c":"# **Model Training and Tuning**","8c342116":"# **Import Libraries**","f95d9ebb":"### XGBM Tuning","c6579ce6":"# **About Dataset**\n\nCardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worlwide.\nHeart failure is a common event caused by CVDs and this dataset contains 12 features that can be used to predict mortality by heart failure.\n\nMost cardiovascular diseases can be prevented by addressing behavioural risk factors such as tobacco use, unhealthy diet and obesity, physical inactivity and harmful use of alcohol using population-wide strategies.\n\nPeople with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes, hyperlipidaemia or already established disease) need early detection and management wherein a machine learning model can be of great help.\n\n# **Variables**\n\n* **age:** Age\n* **anaemia:** Decrease of red blood cells or hemoglobin (boolean)\n* **creatinine_phosphokinase:** Level of the CPK enzyme in the blood (mcg\/L)\n* **diabetes:** If the patient has diabetes (boolean)\n* **ejection_fraction:** Percentage of blood leaving the heart at each contraction (percentage)\n* **high_blood_pressure:** If the patient has hypertension (boolean)\n* **platelets:** Platelets in the blood (kiloplatelets\/mL)\n* **serum_creatinine:** Level of serum creatinine in the blood (mg\/dL)\n* **serum_sodium:** Level of serum sodium in the blood (mEq\/L)\n* **sex:** Woman or man (binary)\n* **smoking** Smoking status (boolean)","9332212e":"## **Random Forests (RF)**","be06b831":"### LightGBM Tuning","ee3efa66":"### RF Tuning","71307080":"## **Logistic Regression**","ea0b7d32":"### SVM Tuning","9e3331ab":"### CatBoost Tuning","660a71a5":"## **Gradient Boosting Machines (GBM)**","f801197b":"### Gaussian Naive Bayes Tuning","eeb42b45":"## **Gaussian Naive Bayes**","1f0c04dc":"### ANN Tuning","11cfac2a":"## **Classification and Regression Trees (CART)**"}}