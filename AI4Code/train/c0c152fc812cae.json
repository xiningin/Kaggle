{"cell_type":{"d6d1a0b0":"code","fe727b7a":"code","24c54331":"code","0eb6661c":"code","df22365f":"code","0bfd69c0":"code","decadbde":"code","515f471d":"code","d7aea01c":"code","691f898e":"code","82ba7947":"code","d32138cb":"code","b45b9dec":"code","0b7d323e":"code","b8d2c9a8":"code","6ca4eb86":"code","2f65ae79":"code","27d9de43":"code","89f82ddb":"code","d2324c33":"markdown","86031e3e":"markdown","77ba075b":"markdown","f89ab7b8":"markdown","8dd3b6e2":"markdown","cf788b1d":"markdown","f1a61268":"markdown","74d19f17":"markdown","ddd21649":"markdown"},"source":{"d6d1a0b0":"import numpy as np\nimport pandas as pd \nimport gc\nimport json\nimport matplotlib.pyplot as plt","fe727b7a":"train_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train.csv\")\n# specs_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/specs.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/test.csv\")\ntrain_label_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv\")","24c54331":"train_df.head()","0eb6661c":"plt.hist(list(train_df[\"game_session\"].value_counts()))","df22365f":"train_df[\"game_time\"].value_counts()","0bfd69c0":"gc.collect()","decadbde":"train_label_df[train_label_df.installation_id==\"0006a69f\"]","515f471d":"train_df[(train_df.installation_id==\"0006a69f\") & (train_df.title==\"Mushroom Sorter (Assessment)\") & (train_df.event_code==4100)]","d7aea01c":"train_df[(train_df.installation_id==\"0006a69f\") & (train_df.title==\"Bird Measurer (Assessment)\") & (train_df.event_code==4110)]","691f898e":"train_df_clear = train_df[((train_df.event_code==4100)|(train_df.event_code==4110))\n                          &(train_df.event_data.str.contains(\"true\"))]\ntrain_df_fail = train_df[((train_df.event_code==4100)|(train_df.event_code==4110))\n                         &(train_df.event_data.str.contains(\"false\"))]","82ba7947":"train_df_clear_g = train_df_clear.groupby([\"installation_id\"]).count()[\"event_id\"]\ntrain_df_fail_g = train_df_fail.groupby([\"installation_id\"]).count()[\"event_id\"]","d32138cb":"train_df_clear_g","b45b9dec":"sample_submission = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv\")","0b7d323e":"test_df","b8d2c9a8":"test_df_clear = test_df[((test_df.event_code==4100)|(test_df.event_code==4110))\n                          &(test_df.event_data.str.contains(\"true\"))]\ntest_df_fail = test_df[((test_df.event_code==4100)|(test_df.event_code==4110))\n                         &(test_df.event_data.str.contains(\"false\"))]\n\ntest_df_clear_g = test_df_clear.groupby([\"installation_id\"]).count()[\"event_id\"]\ntest_df_fail_g = test_df_fail.groupby([\"installation_id\"]).count()[\"event_id\"]","6ca4eb86":"test_clear_dic=dict(zip(test_df_clear_g.index,list(test_df_clear_g)))\ntest_fail_dic=dict(zip(test_df_fail_g.index,list(test_df_fail_g)))","2f65ae79":"for i in range(len(sample_submission)):\n    id = sample_submission[\"installation_id\"][i]\n    fail = test_fail_dic[id] if id in test_fail_dic else 0\n    clear = test_clear_dic[id] if id in test_clear_dic else 0\n    if fail+clear!=0:\n        score = clear\/(fail+clear)\n        if score>0.85:\n            sample_submission[\"accuracy_group\"][i]=3\n        elif score>0.55:\n            sample_submission[\"accuracy_group\"][i]=2\n        elif score>0.35:\n            sample_submission[\"accuracy_group\"][i]=1\n        else:\n            sample_submission[\"accuracy_group\"][i]=0\n    else:\n        sample_submission[\"accuracy_group\"][i]=1","27d9de43":"sample_submission","89f82ddb":"sample_submission.to_csv(\"submission.csv\",index=False)","d2324c33":"If you look at the game_time, you can see that events occur in many games at least at 0.<br>\n\nNow consider the data and results of the owner of the device with installation_id is 0006a69f.","86031e3e":"## eda","77ba075b":"He is playing Mushroom Sorter and Bird Measurer. This time, let's focus on the event when the game ends.\n\n### Mushroom Sorter (Assessment) by 0006a69f","f89ab7b8":"This result is also consistent with the first train_label_df result.<br>\n\nIf you calculate the probability that the player will clear at the end event, it will help the final classification.\n\n## make simple benchmark\n\nThis time, it is classified by game clear probability.","8dd3b6e2":"Since the clearing tendency changes depending on the game, it is difficult to classify only the players.","cf788b1d":"This kernel introduces a simple benchmark.<br>\nIn this competition, game information and information on events in the game are given. And what we ultimately want is to determine how many times the owner of a device can clear the game.\n\n# import","f1a61268":"### Mushroom Sorter (Assessment) by 0006a69f","74d19f17":"Games with many events have more than 3000 events per play, while most games have fewer than 500 events.","ddd21649":"If event_date contains correct: true, the game has been cleared, and if false, it has failed.<br>\nThis result is consistent with that of the first train_label_df."}}