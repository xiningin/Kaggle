{"cell_type":{"0aee1738":"code","9574925c":"code","68edd063":"code","ea065298":"markdown"},"source":{"0aee1738":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\nimport lightgbm as lgb\n\n\nfrom sklearn.model_selection import train_test_split\nimport gc\nimport shap","9574925c":"data=pd.read_csv('..\/input\/train.csv')\n\ntarget='target'\nfeats=[f for f in data.columns if f not in ['target', 'ID_code']]\n\nX_train, X_test, y_train, y_test = train_test_split(data[feats], data[target],\n                                                    test_size=0.30,\n                                                    random_state=10)\n\n\ndtrain = lgb.Dataset(data=X_train, \n                     label=y_train, \n                     free_raw_data=False, silent=True)\ndvalid = lgb.Dataset(data=X_test, \n                     label=y_test, \n                     free_raw_data=False, silent=True)\n\n\nparams = {\n    'objective': 'binary',\n    'metric': 'auc',\n    'boosting_type': 'gbdt',\n    'nthread': 7,\n    'learning_rate': 0.2, \n\n\n    'seed': 100,\n    'verbose': -1,\n    'predict_contrib' : True,\n}\n\nclf = lgb.train(\n    params=params,\n    train_set=dtrain,\n    num_boost_round=10000,\n    valid_sets=[dtrain, dvalid],\n    early_stopping_rounds=200,\n    verbose_eval = 100\n)","68edd063":"shap_values = shap.TreeExplainer(clf).shap_values(data[feats][0:10000])\nshap.summary_plot(shap_values, data[feats][0:10000], feature_names=data[feats].columns, max_display=200)","ea065298":"This is a basic notebook to show how important each raw feature is according to shap values. I thought that it was worth sharing because it seemed unusual that so many of the values are of approximately equal importance. I don't think that these data are \"naturally occuring\", rather I think that we are possibly seeing features that have already been engineered by Santander - and perhaps even some principal-component-like features. "}}