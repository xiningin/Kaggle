{"cell_type":{"1f5f69ca":"code","095fc660":"code","8a701b02":"code","e40f773c":"code","4a707685":"code","d8e5e224":"code","33ab4c45":"code","bc16f592":"code","8f3a17e9":"markdown","872c63e7":"markdown","92aadcd5":"markdown","c85936d1":"markdown","8952ed02":"markdown","eb5b6d07":"markdown","046d616e":"markdown","c4fe8c9e":"markdown"},"source":{"1f5f69ca":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","095fc660":"df = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","8a701b02":"# Scaling\nfrom sklearn.preprocessing import RobustScaler\n\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\n\n# Models\nimport torch\nimport torch.nn as nn\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Metrics\nfrom sklearn.metrics import accuracy_score, classification_report, roc_curve\n\n# Cross Validation\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nprint('Packages imported...')","e40f773c":"Data creating","4a707685":"# creating a copy of df\ndf1 = df\n\n# define the columns to be encoded and scaled\ncat_cols = ['sex','exng','caa','cp','fbs','restecg','slp','thall']\ncon_cols = [\"age\",\"trtbps\",\"chol\",\"thalachh\",\"oldpeak\"]\n\n# encoding the categorical columns\ndf1 = pd.get_dummies(df1, columns = cat_cols, drop_first = True)\n\n# defining the features and target\nX = df1.drop(['output'],axis=1)\ny = df1[['output']]\n\n# instantiating the scaler\nscaler = RobustScaler()\n\n# scaling the continuous featuree\nX[con_cols] = scaler.fit_transform(X[con_cols])\nprint(\"The first 5 rows of X are\")\nX.head()","d8e5e224":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)\nprint(\"The shape of X_train is      \", X_train.shape)\nprint(\"The shape of X_test is       \",X_test.shape)\nprint(\"The shape of y_train is      \",y_train.shape)\nprint(\"The shape of y_test is       \",y_test.shape)","33ab4c45":"# instantiating the object\nlogreg = LogisticRegression()\n\n# fitting the object\nlogreg.fit(X_train, y_train)\n\n# calculating the probabilities\ny_pred_proba = logreg.predict_proba(X_test)\n\n# finding the predicted valued\ny_pred = np.argmax(y_pred_proba,axis=1)\n\n# printing the test accuracy\nprint(\"The test accuracy score of Logistric Regression is \", accuracy_score(y_test, y_pred))","bc16f592":"# calculating the probabilities\ny_pred_prob = logreg.predict_proba(X_test)[:,1]\n\n# instantiating the roc_cruve\nfpr,tpr,threshols=roc_curve(y_test,y_pred_prob)\n\n# plotting the curve\nplt.plot([0,1],[0,1],\"k--\",'r+')\nplt.plot(fpr,tpr,label='Logistic Regression')\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"Logistric Regression ROC Curve\")\nplt.show()","8f3a17e9":"Logistic Regression","872c63e7":"Data splitting","92aadcd5":"#### 2.1 Packages <a id=5><\/a>","c85936d1":"I want to import data","8952ed02":"Data <a id=7><\/a>","eb5b6d07":"<h1 align=\"center\">Heart Attack - EDA<\/h1>","046d616e":"Probabilities Calculation","c4fe8c9e":"##### 3.2.5 Pairplot according to target variable - one plot to rule them all"}}