{"cell_type":{"a970f9a1":"code","3f9336fe":"code","ace1c176":"code","f40cb0d2":"code","2b8410d8":"code","e8b4e4ee":"code","f71fa8bc":"code","a50c9660":"code","047f7ba9":"markdown","01ca5522":"markdown","52b03a1d":"markdown"},"source":{"a970f9a1":"import numpy as np\nimport pandas as pd\nimport os\nimport sys\nfrom joblib import Parallel, delayed\n\n\nsys.path.insert(0, '..\/input\/pretrained-bert-including-scripts\/master\/bert-master')\nBERT_PRETRAINED_DIR = '..\/input\/pretrained-bert-including-scripts\/uncased_l-12_h-768_a-12\/uncased_L-12_H-768_A-12'","3f9336fe":"import tokenization\ndict_path = os.path.join(BERT_PRETRAINED_DIR, 'vocab.txt')\ntokenizer = tokenization.FullTokenizer(vocab_file=dict_path, do_lower_case=True)","ace1c176":"train_df = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv', nrows=10000)","f40cb0d2":"def convert_lines(example, max_seq_length,tokenizer):\n    max_seq_length -=2\n    all_tokens = []\n    for i in range(example.shape[0]):\n        tokens_a = tokenizer.tokenize(example[i])\n        if len(tokens_a)>max_seq_length:\n            tokens_a = tokens_a[:max_seq_length]\n        one_token = tokenizer.convert_tokens_to_ids([\"[CLS]\"]+tokens_a+[\"[SEP]\"])+[0] * (max_seq_length - len(tokens_a))\n        all_tokens.append(one_token)\n    return np.array(all_tokens)","2b8410d8":"%%time\ntrain_lines, train_labels = train_df['comment_text'].values, train_df.target.values \ntoken_input = convert_lines(train_lines, 25, tokenizer)","e8b4e4ee":"def convert_line(tl, max_seq_length,tokenizer):\n    example = str(tl[0])\n    y = tl[1]\n    max_seq_length -=2\n    tokens_a = tokenizer.tokenize(example)\n    if len(tokens_a)>max_seq_length:\n      tokens_a = tokens_a[:max_seq_length]\n    one_token = tokenizer.convert_tokens_to_ids([\"[CLS]\"]+tokens_a+[\"[SEP]\"])+[0] * (max_seq_length - len(tokens_a))\n    return one_token, y","f71fa8bc":"train_lines = zip(train_df['comment_text'].values.tolist(), train_df.target.values.tolist())","a50c9660":"%time\nres = Parallel(n_jobs=4, backend='multiprocessing')(delayed(convert_line)(i, 25, tokenizer) for i in train_lines)","047f7ba9":"# old version","01ca5522":"### converting to token inputs and labels is left as an exercise to the reader","52b03a1d":"# new version"}}