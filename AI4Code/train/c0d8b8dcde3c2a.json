{"cell_type":{"8e8f5397":"code","6c5d2620":"code","68d34570":"code","10330bc1":"code","6666b967":"code","6f0af941":"code","cc8b7aa1":"code","3e889e1f":"code","20c09cb9":"code","3d5a39dc":"code","2cc67b1e":"code","e0644604":"code","8138b327":"code","7f5a2d40":"code","dd3c4f78":"code","9c30071d":"code","702e004e":"code","03f9b5fa":"code","5df0f0a6":"code","469ebb8a":"code","fe09d145":"code","3e704b6d":"code","ca4ced55":"code","3fadd0fd":"code","0d9f8ba5":"code","0f6dc815":"code","eb4c673c":"code","e96ea2a1":"code","5b92c2bc":"code","37674cce":"code","a344cfd5":"code","9cf4a444":"code","10ea0235":"markdown","d0456433":"markdown","5db6b8f3":"markdown","15516c27":"markdown","57ea17c8":"markdown","d82ec798":"markdown","06cf671a":"markdown","2b105c05":"markdown","37b6db21":"markdown","1dc9bc2a":"markdown","1d594c5d":"markdown","246e3ebe":"markdown","2cf7a76a":"markdown","a6580496":"markdown"},"source":{"8e8f5397":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c5d2620":"import sys\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nfrom tqdm import tqdm\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\nimport gensim\n\nfrom wordcloud import WordCloud, STOPWORDS\nimport nltk\nnltk.download('stopwords')\nfrom nltk.probability import  FreqDist\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\n\nimport tensorflow as tf\nfrom keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.layers import Flatten, Dropout, Dense, LSTM, Embedding\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom keras.callbacks import EarlyStopping\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score","68d34570":"dff1 = pd.read_csv('..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv')\ndff2 = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv')\nprint(dff1.head(10))\nprint(dff2.head())","10330bc1":"print('dff.shape : ',dff1.shape,'\\n')\nprint('dff.isna().sum() : ',dff1.isna().sum(),'\\n')\nprint('dff.describe() :', dff1.describe(),'\\n')\nprint('dff.severe_toxic.value_counts():', dff1.severe_toxic.value_counts(),'\\n')","6666b967":"dff1['toxicity'] = (dff1[['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']].sum(axis=1) > 0).astype(int)\ndff1 = dff1[['comment_text', 'toxicity']].rename(columns={'comment_text': 'text'})\ndff1.sample(5)","6f0af941":"print('dff.shape : ',dff1.shape,'\\n')\nprint('dff.describe() :', dff1.describe(),'\\n')\nprint('dff.severe_toxic.value_counts():', dff1.toxicity.value_counts(),'\\n')","cc8b7aa1":"min_len = (dff1['toxicity'] == 1).sum()\ndf_undersample = dff1[dff1['toxicity'] == 0].sample(n=min_len, random_state=201)\ndff1 = pd.concat([df_undersample, dff1[dff1['toxicity'] == 1]])\ndff1 = shuffle(dff1)\ndff1.toxicity.value_counts()","3e889e1f":"dff1.text = dff1.text.map(lambda x:x.replace('\\n',' '))\ndff1.text[:2]","20c09cb9":"toxic = dff1[dff1['toxicity'] == 1]\nnot_toxic = dff1[dff1['toxicity'] == 0]","3d5a39dc":"toxic","2cc67b1e":"dff2_processed = dff2.drop(['less_toxic'], axis=1)\ntoxic_text = pd.concat([dff2['more_toxic'], toxic['text']])\ntoxic_text","e0644604":"wordcloud = WordCloud(width=1400, height=700, background_color='white').generate(' '.join(toxic_text.tolist()))\nfig = plt.figure(figsize=(30,10), facecolor='white')\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('The most 100 frequent words in the toxic comments', fontsize=50)\nplt.tight_layout(pad=0)\nplt.savefig('wordcloud_toxic_text.png')\nplt.show()","8138b327":"wordcloud = WordCloud(width=1400, height=700, background_color='white').generate(' '.join(not_toxic.text.tolist()))\nfig = plt.figure(figsize=(30,10), facecolor='white')\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('The most 100 frequent words in the normal comments', fontsize=50)\nplt.tight_layout(pad=0)\nplt.show()","7f5a2d40":"dff1.head()","dd3c4f78":"dff2_text = pd.concat([dff2.less_toxic, dff2.more_toxic])\ndff2_toxicity = pd.DataFrame(dff2_text,  columns=['text'])\ndff2_toxicity['toxicity'] = 1\ndff2_toxicity","9c30071d":"y = pd.concat([dff1.toxicity, dff2_toxicity.toxicity])\ndff1_x = dff1.drop('toxicity', axis=1)\ndff2_toxicity_x = dff2_toxicity.drop('toxicity', axis=1)\nx = pd.concat([dff1_x, dff2_toxicity_x])","702e004e":"texts = x.copy()\ntexts.reset_index(inplace = True, drop = True)\ntexts.head()","03f9b5fa":"sys.setrecursionlimit(6000)","5df0f0a6":"ps = PorterStemmer()\ncorpus = []\nfor i in tqdm(range(0, len(texts))):\n    cleaned = re.sub('[^a-zA-Z]', ' ', texts['text'][i])\n    cleaned = cleaned.lower().split()\n    \n    cleaned = [ps.stem(word) for word in cleaned if not word in stopwords.words('english')]\n    cleaned = ' '.join(cleaned)\n    corpus.append(cleaned)","469ebb8a":"DIM = 100\n\nX = [d.split() for d in corpus]\nw2v_model = gensim.models.Word2Vec(sentences = X, vector_size = DIM, window = 10, min_count = 1)","fe09d145":"len(w2v_model.wv.key_to_index.keys())","3e704b6d":"w2v_model.wv.most_similar('fuck')","ca4ced55":"tokenizer = Tokenizer()\ntokenizer.fit_on_texts(X)\nX = tokenizer.texts_to_sequences(X)\nX[:3]","3fadd0fd":"X = pad_sequences(X, padding = 'pre', maxlen = 20)\nX[:10]","0d9f8ba5":"vocab_size = len(tokenizer.word_index) + 1 \nvocab = tokenizer.word_index","0f6dc815":"def get_weights_matrix(model):\n    weights_matrix = np.zeros((vocab_size, DIM))\n    \n    for word, i in vocab.items():\n        weights_matrix[i] = model.wv[word]\n        \n    return weights_matrix\n\nembedding_vectors = get_weights_matrix(w2v_model)","eb4c673c":"model = Sequential()\n\nmodel.add(Embedding(vocab_size, output_dim = DIM, weights = [embedding_vectors], input_length = 20))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(64))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(1, activation='linear'))","e96ea2a1":"model.compile(loss = 'mean_squared_error', optimizer = 'adam', metrics = 'accuracy')\nmodel.summary()","5b92c2bc":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\nes = EarlyStopping(patience=3, \n                   monitor='loss', \n                   restore_best_weights=True, \n                   mode='min', \n                   verbose=1)\n\n# train the model \nhist = model.fit(x_train, y_train, validation_data = (x_test, y_test), epochs = 100,\n                 callbacks=es, batch_size = 32)","37674cce":"plt.style.use('fivethirtyeight')\n\n# visualize the models accuracy\nplt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc = 'upper left')\nplt.show()","a344cfd5":"sub = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\") \nnew_text = tokenizer.texts_to_sequences(sub.text)\nnew_text = pad_sequences(new_text, maxlen = 20)\nsub['score'] = model.predict(new_text) * 1000 \nsub.head()","9cf4a444":"sub[['comment_id', 'score']].to_csv(\"submission.csv\", index=False)","10ea0235":"# \ud14d\uc2a4\ud2b8 \uc804\ucc98\ub9ac","d0456433":"## \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 \ub370\uc774\ud130 \uac00\uc838\uc624\uae30 ","5db6b8f3":"\ubb38\uc7a5\ub4e4\uc744 \ud1a0\ud06c\ub098\uc774\uc988\ud558\uace0 \ub9d0\ubb49\uce58 X\ub97c \uc21c\ucc28\uc801\uc778 \uc22b\uc790 \ub370\uc774\ud130\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.","15516c27":"edited SImple LSTM With Word2Vec link: https:\/\/www.kaggle.com\/khkuggle\/simple-lstm-with-word2vec\/notebook ","57ea17c8":"For Koreans\n\n\uc774\ubc88 \ub300\ud68c\uc5d0\uc11c \uc6b0\ub9ac\ub294 \ucf54\uba58\ud2b8\ub4e4\uc758 \uc720\ud574 \uc815\ub3c4\uc758 \uc21c\uc704\ub97c \ub9e4\uae30\uac8c \ub420\uac81\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc8fc\uc5b4\uc9c4 \ucf54\uba58\ud2b8\ub4e4\uc744 \uc0c1\ub300\uc801 \uc720\ud574\uc131\uc744 \ucc38\uace0\ud558\uc5ec \uc810\uc218\ub97c \uc904\uac81\ub2c8\ub2e4. \ub192\uc740 \uc720\ud574\ub3c4\uc744 \uac00\uc9c4 \ucf54\uba58\ud2b8\ub294 \ub0ae\uc740 \uc720\ud574\ub3c4\ub97c \uac00\uc9c4 \ucf54\uba58\ud2b8\ubcf4\ub2e4 \ub192\uc740 \uc810\uc218\ub97c \ubc1b\uc744 \uac81\ub2c8\ub2e4.","d82ec798":"RecursionError\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud574 recursionlimit\uc744 6000\uc73c\ub85c \ub298\ub9bd\ub2c8\ub2e4. RecursionError\ub294 \uc7ac\uadc0\uc640 \uad00\ub828\ub41c \uc5d0\ub7ec\uc785\ub2c8\ub2e4. \uac00\uc7a5 \ub9ce\uc774 \ubc1c\uc0dd\ud558\ub294 \uc774\uc720\ub294 Python\uc774 \uc815\ud55c \ucd5c\ub300 \uc7ac\uadc0 \uae4a\uc774\ubcf4\ub2e4 \uc7ac\uadc0\uc758 \uae4a\uc774\uac00 \ub354 \uae4a\uc5b4\uc9c8 \ub54c\uc785\ub2c8\ub2e4.","06cf671a":"# \ubaa8\ub378\ub9c1 & \ud559\uc2b5","2b105c05":"\uc6b0\ub9ac\ub294 NLP\uc758 \ud544\uc218 \uacfc\uc815\uc778 \uc804\ucc98\ub9ac\ub97c \ud560\uac81\ub2c8\ub2e4. \n\n\uc774\ubc88 \uc804\ucc98\ub9ac\uc5d0\uc11c\ub294 \uc815\uc81c \uc791\uc5c5 \uadf8\ub9ac\uace0 \uc5b4\uac04 \ucd94\ucd9c\uc744 \ud560\uac81\ub2c8\ub2e4.\n\n\uc5b4\uac04(Stem)\uc744 \ucd94\ucd9c\ud558\ub294 \uc791\uc5c5\uc744 \uc5b4\uac04 \ucd94\ucd9c(stemming)\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc5b4\uac04 \ucd94\ucd9c\uc740 \ud615\ud0dc\ud559\uc801 \ubd84\uc11d\uc744 \ub2e8\uc21c\ud654\ud55c \ubc84\uc804\uc774\ub77c\uace0 \ubcfc \uc218\ub3c4 \uc788\uace0, \uc815\ud574\uc9c4 \uaddc\uce59\ub9cc \ubcf4\uace0 \ub2e8\uc5b4\uc758 \uc5b4\ubbf8\ub97c \uc790\ub974\ub294 \uc5b4\ub9bc\uc9d0\uc791\uc758 \uc791\uc5c5\uc774\ub77c\uace0 \ubcfc \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc2dc \ub9d0\ud574, \uc774 \uc791\uc5c5\uc740 \uc12c\uc138\ud55c \uc791\uc5c5\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 \uc5b4\uac04 \ucd94\ucd9c \ud6c4\uc5d0 \ub098\uc624\ub294 \uacb0\uacfc \ub2e8\uc5b4\ub294 \uc0ac\uc804\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \ub2e8\uc5b4\uc77c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc608\ub97c \ub4e4\uba74 \uc774\ub7f0 \uc2dd\uc73c\ub85c \ub2e8\uc5b4\uac00 \uc804\ucc98\ub9ac\ub429\ub2c8\ub2e4.\n- formalize \u2192 formal\n- allowance \u2192 allow\n- electricical \u2192 electric","37b6db21":"## EDA","1dc9bc2a":"X \uadf8\ub9ac\uace0 y \ubcc0\uc218\ub97c \uac16\uace0\uc788\uc73c\ub2c8\uae4c \uc774\uc6a9\ud558\uae30 \uc704\ud574\uc11c \ubcf5\uc0ac\ub97c \ud574\ubcf4\uc790","1d594c5d":"\ubaa8\ub4e0 \ubb38\uc7a5\ub4e4\uc758 \uae38\uc774\uac00 20\uc774 \ub418\ub3c4\ub85d \ubcc0\ud658\ud574\uc90d\ub2c8\ub2e4.","246e3ebe":"\uc6b0\ub9ac\ub294 \uc774 \ubca1\ud130\ub4e4\uc744 \ubaa8\ub378\uc758 \uc2dc\uc791\ud558\ub294 weights\ub85c \ub123\uace0, \ub354 \ub098\uc740 \uc815\ud655\ub3c4\ub97c \uc5bb\uae30 \uc704\ud574 \uc774 \ubca1\ud130\ub4e4\uc744 \ub2e4\uc2dc \ub9cc\ub4ed\ub2c8\ub2e4.","2cf7a76a":"\uc6b0\ub9ac\uac00 \uc5bc\ub9c8\ub098 \ub9ce\uc740 \ub2e8\uc5b4\ub4e4\uc744 \ucc98\ub9ac\ud588\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.","a6580496":"train dataset\uc758 severe_toxic column\uc758 value\uac00 0\uc5d0 \uce58\uc6b0\uccd0\uc838 \uc788\uc2b5\ub2c8\ub2e4."}}