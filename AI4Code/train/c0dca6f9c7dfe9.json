{"cell_type":{"3f3f78e6":"code","3030a8d9":"code","f9d484e1":"code","20facf81":"code","304c8c2e":"code","08318219":"code","f366df39":"code","bb2253f5":"code","14fde5fe":"code","7d4fe7bd":"code","881427ce":"code","d3e22c0b":"code","c3a44a9a":"code","d45fec88":"code","5e939a6c":"markdown"},"source":{"3f3f78e6":"import pandas as pd\n\nmain_file_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv' # this is the path to the Iowa data that you will use\ndata = pd.read_csv(main_file_path)\n\n# Run this code block with the control-enter keys on your keyboard. Or click the blue botton on the left\nprint(data.describe())","3030a8d9":"print(data.columns)","f9d484e1":"sale_price = data.SalePrice\nsale_price.head()","20facf81":"columns_of_interest = ['YrSold', 'OverallCond']\ntwo_columns_of_data = data[columns_of_interest]\nprint(two_columns_of_data.describe())","304c8c2e":"model_predictors = ['LotArea', 'YearBuilt', '1stFlrSF',\n                    '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = data[model_predictors]","08318219":"from sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor()\nregressor.fit(X, sale_price)","f366df39":"print(\"Making predictions for the following 5 houses:\")\nprint(X.head())\nprint(\"The predictions are\")\nprint(regressor.predict(X.head()))","bb2253f5":"from sklearn.model_selection import train_test_split\ntrain_X, val_X, train_y, val_y = train_test_split(X, sale_price,random_state = 0)\n# Define model\nRegressor = DecisionTreeRegressor()\n# Fit model\nRegressor.fit(train_X, train_y)","14fde5fe":"# get predicted prices on validation data\nfrom sklearn.metrics import mean_absolute_error\nval_predictions = Regressor.predict(val_X)\nprint(mean_absolute_error(val_y, val_predictions))","7d4fe7bd":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef get_mae(max_leaf_nodes, predictors_train, predictors_val, targ_train, targ_val):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(predictors_train, targ_train)\n    preds_val = model.predict(predictors_val)\n    mae = mean_absolute_error(targ_val, preds_val)\n    return(mae)","881427ce":"# compare MAE with differing values of max_leaf_nodes\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","d3e22c0b":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\nforest_model = RandomForestRegressor()\nforest_model.fit(train_X, train_y)\nmelb_preds = forest_model.predict(val_X)\nprint(mean_absolute_error(val_y, melb_preds))","c3a44a9a":"# Read the test data\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n# Treat the test data in the same way as training data. In this case, pull same columns.\ntest_X = test[model_predictors]\n# Use the model to make predictions\npredicted_prices = forest_model.predict(test_X)\n# We will look at the predicted prices to ensure we have something sensible.\nprint(predicted_prices)","d45fec88":"my_submission = pd.DataFrame({'Id': test.Id, 'SalePrice': predicted_prices})\nmy_submission.to_csv('submission.csv', index=False)","5e939a6c":"**Housing Prices Predictions**"}}