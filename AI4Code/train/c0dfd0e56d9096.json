{"cell_type":{"8282e436":"code","0bfdd7d1":"code","1bda2ff5":"code","ae4edfd3":"code","9dc6019f":"code","fe71e4ce":"code","6d32ad4c":"code","050c9a7d":"code","0b2033c9":"code","d37692ff":"code","e6d46501":"code","d7a15c63":"code","b236e025":"code","5d9a418a":"code","15716b32":"markdown","1f80e7b3":"markdown","f8177033":"markdown","dd9ac645":"markdown","b440e7ba":"markdown","7c746912":"markdown"},"source":{"8282e436":"import tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D,Dropout,Flatten,Dense,BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping","0bfdd7d1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","1bda2ff5":"import cv2\n\nupic='..\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected\/C100P61ThinF_IMG_20150918_144104_cell_131.png'\napic='..\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\/C100P61ThinF_IMG_20150918_144104_cell_164.png'\nplt.figure(1, figsize = (15 , 7))\nplt.subplot(1 , 2 , 1)\nplt.imshow(cv2.imread(upic))\nplt.title('Uninfected Cell')\nplt.xticks([]) , plt.yticks([])\n\nplt.subplot(1 , 2 , 2)\nplt.imshow(cv2.imread(apic))\nplt.title('Infected Cell')\nplt.xticks([]) , plt.yticks([])\n\nplt.show()","ae4edfd3":"width = 128\nheight = 128","9dc6019f":"datagen = ImageDataGenerator(rescale=1\/255.0, validation_split=0.2)","fe71e4ce":"trainDatagen = datagen.flow_from_directory(directory='..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n                                           target_size=(width,height),\n                                           class_mode = 'binary',\n                                           batch_size = 16,\n                                           subset='training')","6d32ad4c":"valDatagen = datagen.flow_from_directory(directory='..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n                                           target_size=(width,height),\n                                           class_mode = 'binary',\n                                           batch_size = 16,\n                                           subset='validation')","050c9a7d":"model = Sequential()\nmodel.add(Conv2D(16,(3,3),activation='relu',input_shape=(128,128,3)))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(32,(3,3),activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1,activation='sigmoid'))","0b2033c9":"model.summary()","d37692ff":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","e6d46501":"early_stop = EarlyStopping(monitor='val_loss',patience=2)","d7a15c63":"history = model.fit_generator(generator = trainDatagen,\n                             steps_per_epoch = len(trainDatagen),\n                              epochs =20,\n                              validation_data = valDatagen,\n                              validation_steps=len(valDatagen),\n                             callbacks=[early_stop])","b236e025":"def plotLearningCurve(history,epochs):\n    epochRange = range(1,epochs+1)\n    plt.plot(epochRange,history.history['accuracy'])\n    plt.plot(epochRange,history.history['val_accuracy'])\n    plt.title('Model Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.legend(['Train','Validation'],loc='upper left')\n    plt.savefig(\"accuracy.png\",dpi=1000,bbox_inches='tight')\n    plt.show()\n    plt.plot(epochRange,history.history['loss'])\n    plt.plot(epochRange,history.history['val_loss'])\n    plt.title('Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend(['Train','Validation'],loc='upper left')\n    plt.savefig(\"loss graph.png\",dpi=1000,bbox_inches='tight')\n    plt.show()","5d9a418a":"plotLearningCurve(history,7)","15716b32":"# Dividing Dataset into two folders train and test","1f80e7b3":"# Preparing train and test Image Generator","f8177033":"# Displaying Uninfected and Infected Cell tissues","dd9ac645":"# Plots","b440e7ba":"# Importing neccessary libraries","7c746912":"# Preparing the model"}}