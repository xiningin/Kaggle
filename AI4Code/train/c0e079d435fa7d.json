{"cell_type":{"ee4ae8e9":"code","15bf64c4":"code","22785a81":"code","c324605e":"code","3112622f":"code","022aee76":"code","a5549240":"code","3f404a33":"code","9b72fe57":"code","524f0def":"code","ff6ee577":"code","c40dbc59":"code","903852b8":"code","b7255a20":"code","0e0b8e22":"code","7d311c50":"code","f7c85835":"code","62ef4d5a":"code","9bcd8623":"code","c9d32be4":"code","850d5886":"code","24aa2d2b":"code","d5185f1c":"code","c6f84d7f":"code","d26bd322":"code","d12b40aa":"code","7746a15e":"code","b5d77f18":"code","25d246e7":"code","6b4c1c7d":"code","8b91335d":"code","b4497626":"code","36b81ff0":"code","5fc39084":"code","df3a85b3":"code","d04415f4":"code","ff1f7b0a":"code","e683380c":"code","dc53b373":"code","774f9659":"code","f207f82b":"code","34dcc8dc":"code","8f0a6bfb":"code","74b5c53c":"code","5c9825b2":"code","c933a775":"code","8ab3ec31":"code","b857a211":"code","eae0a6fb":"code","62e40897":"code","eaab8af6":"code","d4bddbb1":"code","fe0a948a":"code","31ce4697":"code","f4a1343c":"code","d3224b6f":"code","07c561fa":"code","b0d2732b":"code","b12472b0":"code","7984ef18":"code","91388da5":"code","7763d8bf":"code","f107fed7":"code","11bff718":"code","17fda541":"code","45a79a8d":"code","e5471526":"code","de6df486":"code","d3c2f394":"code","aa71c219":"code","96169aba":"code","29781fa1":"code","d247a3d8":"code","8716477b":"code","eb1d2246":"code","9ac511e4":"code","565b0760":"code","e5b7a3e0":"code","6d66b84c":"code","2a523caa":"code","63c36bd7":"code","bdeb7931":"code","959275d9":"code","793331e4":"code","91561715":"markdown","5f842e59":"markdown"},"source":{"ee4ae8e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))\n\n# Any results you write to the current directory are saved as output.","15bf64c4":"PATH = os.getcwd()\nprint(PATH)","22785a81":"PATH = '..\/input\/image-classification-cute4\/10_categories\/10_categories'","c324605e":"print(os.listdir(PATH))","3112622f":"data_dir_list = os.listdir(PATH)","022aee76":"print(data_dir_list)","a5549240":"#Required variables decleration and intialization","3f404a33":"img_rows=224\nimg_cols=224\nnum_channel=3\n\nnum_epoch = 25\nbatch_size = 32\n\nimg_data_list=[]\nclasses_names_list=[]\ntarget_column=[]","9b72fe57":"import cv2","524f0def":"for dataset in data_dir_list:\n    classes_names_list.append(dataset)\n    print(\"Getting images from {} folder\\n\".format(dataset))\n    img_list = os.listdir(PATH+'\/'+ dataset)\n    for img in img_list:\n        input_img = cv2.imread(PATH + '\/' + dataset + '\/' + img)\n        input_img_resize=cv2.resize(input_img,(img_rows,img_cols))\n        img_data_list.append(input_img_resize)\n        target_column.append(dataset)","ff6ee577":"#Get the number of classes","c40dbc59":"num_classes = len(classes_names_list)\nprint(num_classes)","903852b8":"#Image Pre-Processing","b7255a20":"img_data = np.array(img_data_list)\nimg_data = img_data.astype('float32')\nimg_data \/= 255","0e0b8e22":"print(img_data.shape)","7d311c50":"num_of_samples = img_data.shape[0]\ninput_shape = img_data[0].shape","f7c85835":"print(num_of_samples)","62ef4d5a":"print(input_shape)","9bcd8623":"from sklearn.preprocessing import LabelEncoder\nLabelencoder = LabelEncoder()\ntarget_column = Labelencoder.fit_transform(target_column)","c9d32be4":"target_column[0:10]","850d5886":"np.unique(target_column)","24aa2d2b":"from keras.utils import to_categorical","d5185f1c":"target_column_hotcoded = to_categorical(target_column,num_classes)","c6f84d7f":"#Shuffle the dataset","d26bd322":"from sklearn.utils import shuffle","d12b40aa":"X,Y = shuffle(img_data,target_column_hotcoded,random_state=2)","7746a15e":"from sklearn.model_selection import train_test_split","b5d77f18":"X_train,X_temp,y_train,y_temp = train_test_split(X,Y,test_size=0.3,random_state=2)","25d246e7":"y_train.shape","6b4c1c7d":"X_test,X_val,y_test,y_val = train_test_split(X_temp,y_temp,test_size=0.3,random_state=2)","8b91335d":"#Define the Model","b4497626":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout,Flatten\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D","36b81ff0":"first_Mod = Sequential()\n\nfirst_Mod.add(Conv2D(64,(3,3),activation='relu',input_shape=input_shape))\nfirst_Mod.add(Conv2D(64,(3,3),activation='relu'))\nfirst_Mod.add(MaxPool2D(pool_size=(2,2)))\nfirst_Mod.add(Dropout(0.5))\n\nfirst_Mod.add(Conv2D(128,(3,3),activation='relu'))\nfirst_Mod.add(Conv2D(128,(3,3),activation='relu'))\nfirst_Mod.add(MaxPool2D(pool_size=(2,2)))\nfirst_Mod.add(Dropout(0.5))\n\nfirst_Mod.add(Flatten())\nfirst_Mod.add(Dense(128,activation='relu'))\nfirst_Mod.add(Dropout(0.5))\nfirst_Mod.add(Dense(num_classes,activation='softmax'))","5fc39084":"#Compile the model","df3a85b3":"first_Mod.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","d04415f4":"first_Mod.summary()","ff1f7b0a":"hist = first_Mod.fit(X_train,y_train,batch_size=batch_size,epochs=num_epoch,verbose=1,validation_data=(X_test,y_test))","e683380c":"score = first_Mod.evaluate(X_test,y_test,batch_size=batch_size)\n\nprint('Test Loss',score[0])\nprint(\"Test Accuracy\",score[1])","dc53b373":"test_image = X_test[0:1]\nprint(test_image)","774f9659":"print(first_Mod.predict(test_image))\nprint(first_Mod.predict_classes(test_image))\nprint(y_test[0:1])","f207f82b":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report,accuracy_score","34dcc8dc":"Y_pred = first_Mod.predict(X_test)\nprint(Y_pred)\nY_train_result = first_Mod.predict(X_train)\nprint(Y_train_result)","8f0a6bfb":"y_pred = np.argmax(Y_pred,axis=1)\nprint(y_pred)\ny_train_result = np.argmax(Y_train_result, axis=1)\nprint(y_train_result)","74b5c53c":"conf_Matrix = confusion_matrix(np.argmax(y_test,axis=1),y_pred)\nprint(conf_Matrix)","5c9825b2":"y_true=np.argmax(y_test,axis=1)\ny_true_train=np.argmax(y_train,axis=1)","c933a775":"print(classification_report(y_pred,y_true))\nprint(classification_report(y_train_result,y_true_train))\nprint(\"test accuracy = \",accuracy_score(y_pred,y_true))\nprint(\"validation accuracy = \",accuracy_score(y_train_result,y_true_train))","8ab3ec31":"#Image Augumentation using Image Data Generator","b857a211":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","eae0a6fb":"data_gen = ImageDataGenerator(\n    rotation_range=20,\n    shear_range=0.5, \n    zoom_range=0.4, \n    rescale=1.\/255,\n    vertical_flip=True, \n    validation_split=0.2,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True)","62e40897":"TRN_AUGMENTED = os.path.join(PATH , 'Trn_Augmented_Images')\nTST_AUGMENTED = os.path.join(PATH , 'Tst_Augmented_Images')","eaab8af6":"import matplotlib.pyplot as plt","d4bddbb1":"print('\\n')\n\nprint(hist.history.keys())","fe0a948a":"#Summarize hist for accuracy\nplt.plot(hist.history['acc'])\nplt.plot(hist.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train','test'],loc = 'upper left')\nplt.show()\n\n#summarize hist for loss\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train','test'],loc = 'upper left')\nplt.show()","31ce4697":"ftrain_generator = data_gen.flow(\n       X_train,\n       y_train,\nbatch_size=batch_size,\nshuffle=True,\nsubset='training')","f4a1343c":"ftest_generator = data_gen.flow(\nX_test,\ny_test,\nbatch_size=batch_size,\nshuffle=True,\nsubset='validation')","d3224b6f":"first_Mod.fit_generator(ftrain_generator,epochs=num_epoch,validation_data=ftest_generator,workers=6)","07c561fa":"first_Mod.evaluate_generator(ftest_generator,verbose=1)","b0d2732b":"#Predict on agumented dataset","b12472b0":"#train_fdata_predict = first_Mod.predict_generator(ftest_generator,verbose=1)","7984ef18":"#train_fdata_predict.argmax(axis=1)","91388da5":"Y_pred = first_Mod.predict(X_test)\nprint(Y_pred)","7763d8bf":"y_pred1=np.argmax(Y_pred,axis=1)\nprint(y_pred1)","f107fed7":"print(confusion_matrix(np.argmax(y_test,axis=1),y_pred1))","11bff718":"y_true1=np.argmax(y_test,axis=1)","17fda541":"print(classification_report(y_pred1,y_true1))","45a79a8d":"print(\"test accuracy = \",accuracy_score(y_pred1,y_true1))","e5471526":"#Transfer Learning","de6df486":"from tensorflow.keras.layers import Input, Dense","d3c2f394":"image_input = Input(shape=(img_rows,img_cols,num_channel))","aa71c219":"from tensorflow.keras.applications.vgg16 import VGG16","96169aba":"vgg_mod = VGG16(input_tensor=image_input, include_top=True,weights='imagenet')","29781fa1":"vgg_mod.summary()","d247a3d8":"last_layer = vgg_mod.get_layer('fc2').output\nout = Dense(num_classes, activation= 'softmax', name = 'output')(last_layer)","8716477b":"from tensorflow.keras.models import Model\n\ncustom_vgg_model = Model(image_input, out)\ncustom_vgg_model.summary()","eb1d2246":"for layer in custom_vgg_model.layers[:-1]:\n    layer.trainable= False","9ac511e4":"custom_vgg_model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","565b0760":"custom_vgg_model.fit(X_train, y_train, batch_size=batch_size, epochs=num_epoch,verbose=1,validation_data=(X_test,y_test))","e5b7a3e0":"(loss, accuracy) = custom_vgg_model.evaluate(X_test, y_test, batch_size=batch_size, verbose=1)\n\nprint(\"[INFO] loss={:.4f}, accuracy: {:.4f}%\".format(loss, accuracy * 100))","6d66b84c":"Y_train_pred = custom_vgg_model.predict(X_test)","2a523caa":"y_train_pred = np.argmax(Y_train_pred, axis=1)\nprint(y_train_pred)","63c36bd7":"print(confusion_matrix(np.argmax(y_test, axis=1), y_train_pred))","bdeb7931":"y_true2=np.argmax(y_test,axis=1)","959275d9":"print(classification_report(y_train_pred,y_true2))","793331e4":"print(\"test accuracy = \",accuracy_score(y_train_pred,y_true2))","91561715":"**Convert class labels to numeric using One-Hot encoding**","5f842e59":"**Train-Test Split**"}}