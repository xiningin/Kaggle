{"cell_type":{"15789c43":"code","fd61bdde":"code","77b55a2b":"code","5c96b5d5":"code","c6306d32":"code","2d19b5fa":"code","a9dbe0a5":"code","9062a810":"code","ce9aab68":"code","32e82f50":"code","0eeec2bc":"code","4e903da3":"code","6344ef32":"code","f44559c5":"code","1f6c83d8":"code","2cb73218":"code","477e4a51":"code","4516be3c":"code","56bf63e6":"code","16b9e115":"code","b1f2e4a5":"code","674c70ae":"code","9ef25ab5":"code","390e4ae6":"code","7c21076f":"code","b66a16b1":"code","026b380f":"code","4c7fb5f8":"code","c6dea652":"code","763e3321":"code","388ed245":"code","ef0cacf8":"code","ca6922da":"code","56eaccc9":"code","28d5e83b":"code","9d39d927":"code","2ece0401":"code","aba65a5f":"code","43b82233":"code","bda59141":"code","445071cd":"code","8d77f68e":"code","4ba68d48":"code","08a3d781":"markdown","59b6a7e0":"markdown","6798614d":"markdown","9b76dd3e":"markdown","a769615c":"markdown","988179b3":"markdown","91e1a0cb":"markdown","625e281e":"markdown","835ae539":"markdown","f3d32b10":"markdown","dc44814f":"markdown","4d514bf2":"markdown","f1f9ad53":"markdown","cd4d3e5e":"markdown","4b177468":"markdown","f18557dd":"markdown","73ba9e84":"markdown","e1556bb9":"markdown","ab519989":"markdown","423167f0":"markdown","86565c7a":"markdown","1e5c8754":"markdown","af274e20":"markdown","da68ac8d":"markdown","4bed7370":"markdown","44e62a71":"markdown","500713fb":"markdown","5557e5d1":"markdown","7e66a16e":"markdown","4fc12b3d":"markdown","83630c3b":"markdown","d536a3d6":"markdown","0e7fa6a1":"markdown"},"source":{"15789c43":"# Importing pandas and Series + DataFrame:\nimport pandas as pd\nfrom pandas import Series, DataFrame\n\n# Importing numpy, matplotlib and seaborn:\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Imports for plotly:\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots","fd61bdde":"titanic_df = pd.read_csv('..\/input\/train.csv')","77b55a2b":"# A short preview of our data from Titanic file (displays first 5 rows):\ntitanic_df.head()","5c96b5d5":"# To display basic stats for columns filled in with numerical values:\ntitanic_df.describe().transpose()","c6306d32":"# Function to describe variables\ndef desc(df):\n    d = pd.DataFrame(df.dtypes,columns=['Data_Types'])\n    d = d.reset_index()\n    d['Columns'] = d['index']\n    d = d[['Columns','Data_Types']]\n    d['Missing'] = df.isnull().sum().values    \n    d['Uniques'] = df.nunique().values\n    return d\n\n# Use desc() function to describe df:\ndesc(titanic_df)","2d19b5fa":"print('Number of rows where Age data is missing: ' + str(titanic_df.Age.isnull().sum()))\nprint('Percentage of Age data missing: ' + str(titanic_df.Age.isnull().sum()\/len(titanic_df.Age)*100))","a9dbe0a5":"# What are different titles on the board of Titanic?\ntitanic_df.Name.apply(lambda name: name.split(',')[1].split('.')[0].strip()).unique()","9062a810":"# We create new feature 'Title' in our dataset, and we map our 17 titles to 6 main categories:\ntitanic_df['Title'] = titanic_df.Name.apply(lambda name: name.split(',')[1].split('.')[0].strip())","ce9aab68":"# Normalise the titles:\nnormalised_titles = {'Mr':'Mr', 'Mrs':'Mrs', 'Miss':'Miss', 'Master':'Master', 'Don':'Royalty', 'Rev':'Officer', \n                     'Dr':'Officer', 'Mme':'Mrs', 'Ms':'Mrs', 'Major':'Officer', 'Lady':'Royalty', 'Sir':'Royalty',  \n                     'Mlle':'Miss', 'Col':'Officer', 'Capt':'Officer', 'the Countess':'Royalty', 'Jonkheer':'Royalty',\n                     'Dona':'Royalty'}","32e82f50":"# Map normalised titles to the current titles:\ntitanic_df['Title'] = titanic_df['Title'].map(normalised_titles)","0eeec2bc":"# Check the new column 'Title' in titanic dataset: \ntitanic_df.head()","4e903da3":"print(titanic_df['Title'].value_counts())","6344ef32":"# Group by Sex, Pclass and title:\ngroup = titanic_df.groupby(['Sex', 'Pclass', 'Title'])","f44559c5":"# To display mediang age by the groupped features:\ngroup['Age'].median()","1f6c83d8":"# Fill in the NaN age values by group median values:\ntitanic_df['Age'] = group['Age'].apply(lambda x: x.fillna(x.median()))","2cb73218":"# Convert male and female groups to integer form:\n# titanic_df['Sex'] = titanic_df['Sex'].map({'male':0, 'female':1})","477e4a51":"print('Number of rows where Cabin data is missing: ' + str(titanic_df.Cabin.isnull().sum()))\nprint('Percentage of Cabin data missing: ' + str(titanic_df.Cabin.isnull().sum()\/len(titanic_df.Cabin)*100))","4516be3c":"titanic_df = titanic_df.drop(['Cabin'], axis = 1)","56bf63e6":"# Visualising missing data with heatmap:\nsns.heatmap(titanic_df.isnull(), yticklabels = False, cbar = False, cmap = 'plasma')","16b9e115":"# Gender distribution:\n\ng_df = pd.DataFrame(titanic_df.groupby(['Sex'])['Sex'].count())\n\ndata=go.Bar(x = g_df.index\n           , y = g_df.Sex\n           ,  marker=dict( color=['#D43949', '#0e9aa7'])\n           , \n           )\n\n\n\nlayout = go.Layout(title = 'Gender Distribution'\n                   , xaxis = dict(title = 'Gender')\n                   , yaxis = dict(title = 'Volume')\n                  )\n\nfig = go.Figure(data,layout)\nfig.show()\n","b1f2e4a5":"\nfig = go.Figure(data=[\n    go.Bar(name='survived', x=['female', 'male'], y=[20, 14]),\n    go.Bar(name='deceased', x=['female', 'male'], y=[12, 18])\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","674c70ae":"# Bar chart of male and female, split into survived\/not survived:\nplt.figure(figsize=(6,4))\nsns.countplot(x = 'Sex', hue = 'Survived', data=titanic_df, palette = 'winter_d')\nplt.title('Passenger Gender Distribution - Survived vs Not-survived')\nplt.show()","9ef25ab5":"# Distribution of ages (we will drop rows with no data in Age column):\nplt.figure(figsize=(6,4))\nplt.hist(titanic_df['Age'].dropna(), bins=20, edgecolor = 'black', linewidth = 0.5)\nplt.title('Distribution of Ages')\nplt.xlabel('Age')\nplt.ylabel('count')\nplt.show()","390e4ae6":"# Returns the average age of Titanic passenger:\nmean = titanic_df['Age'].mean()\nprint('The average age of a passenger on Titanic was: ', mean)","7c21076f":"# Distribution of ages grouped by gender\nfig = sns.FacetGrid(titanic_df, hue='Sex', aspect=4)\nfig.map(sns.kdeplot, 'Age', shade=True)\noldest = titanic_df['Age'].max()\nfig.set(xlim=(0,oldest))\nfig.set(title='Distribution of Age Grouped by Gender')\nfig.add_legend()","b66a16b1":"# Adding a new column 'Age Group':\ndef age_group(passenger):\n    Age, Sex = passenger\n    \n    if Age < 5:\n        return '0-4'\n    elif Age < 10:\n        return '5-9'\n    elif Age < 20:\n        return '10-19'\n    elif Age < 30:\n        return '20-29'\n    elif Age < 40:\n        return '30-39'\n    elif Age < 50:\n        return '40-49'\n    elif Age < 60:\n        return '50-50'\n    elif Age < 70:\n        return '60-69'\n    else:\n        return '70+'","026b380f":"# Add new column Age Groups into titanic dataset: \ntitanic_df['Age Groups'] = titanic_df[['Age', 'Sex']].apply(age_group, axis = 1)","4c7fb5f8":"# Check the changes by displaying first 5 rows of the dataset: \ntitanic_df.head()","c6dea652":"# Bar chart of 'Age Groups' and 'Sex':\nplt.figure(figsize=(6,4))\nsns.countplot(x = 'Age Groups', hue = 'Sex', data=titanic_df,  palette = 'winter_d', \n              order = ['0-4','5-9','10-19','20-29','30-39','40-49','50-59','60-69','70+'])\nplt.title('Age Groups for All Passengers')\nplt.show()","763e3321":"# Returns counts of 'age groups' split into defined categories: \ntitanic_df['Age Groups'].value_counts()","388ed245":"# Bar chart of 'Age Groups' and 'Sex' for both males and females:\nplt.figure(figsize=(12,4))\nplt.subplot(121)\nsns.countplot(x = 'Age Groups', hue = 'Survived', data = titanic_df[titanic_df.Sex == 'female'],\n              palette = 'rocket_r', \n              order = ['0-4','5-9','10-19','20-29','30-39','40-49','50-59','60-69','70+'])\nplt.title('Female Survival Age Groups')\n\nplt.subplot(122)\nsns.countplot(x = 'Age Groups', hue = 'Survived', data = titanic_df[titanic_df.Sex == 'male'],  palette = 'rocket_r', \n              order = ['0-4','5-9','10-19','20-29','30-39','40-49','50-59','60-69','70+'])\nplt.title('Male Survival Age Groups')\n\nplt.show()","ef0cacf8":"# How many people embarked in each of the ports?\ntitanic_df['Embarked'].value_counts()","ca6922da":"# How many passengers of each class embarked in C, Q, and S port?\nemb = titanic_df.groupby(['Embarked', 'Pclass'])\nemb.Pclass.sum()","56eaccc9":"# Embarked split into travel class: \n\nplt.figure(figsize = (6,4))\nsns.countplot('Embarked', data=titanic_df, hue='Pclass', palette = 'winter_d', order = ['C','Q','S'])\nplt.title('Embarked by Travel Class')\nplt.show()","28d5e83b":"# Is there any relationship between embarked and survival?\nsns.catplot(data = titanic_df, x = 'Survived', col = 'Embarked', kind = 'count', palette = 'winter_d')","9d39d927":"sns.catplot(data = titanic_df, x = 'Survived', hue = 'Sex',  col = 'Embarked', kind = 'count', palette = 'rocket_r')","2ece0401":"plt.figure(figsize = (6,4))\nsns.stripplot(data = titanic_df, x='Survived', y='Fare', alpha=0.3, jitter=True)\nplt.title('Fare Feature vs Survival')\nplt.show()","aba65a5f":"plt.figure(figsize = (6,4))\nsns.swarmplot(data = titanic_df, x = 'Survived', y = 'Fare')\nplt.title('Fare Feature vs Survival')\nplt.show()","43b82233":"# Create a crosstab with Age Groups, Pclass, Sex and Survived categories:\npd.crosstab([titanic_df.Sex, titanic_df.Survived], \n            [titanic_df['Age Groups'], titanic_df.Pclass],\n             margins=True).style.background_gradient(cmap='autumn_r')\n","bda59141":"chance = round(16\/17*100, 2)\nprint(print(\"The chance that a woman in her 30's with a 2nd class ticket survies is: \" , chance,'%'))","445071cd":"# We can drop PassengerId, as this is only for ML purpose created feature.\ntitanic = titanic_df.drop(['PassengerId'], axis = 1)","8d77f68e":"# Change sex column to binary values 0 and 1: \ntitanic['Sex'] = titanic['Sex'].map({'male':0, 'female':1})","4ba68d48":"# Correlation between all features:\n\nplt.figure(figsize = (8,6))\nsns.heatmap(titanic.corr(), annot=True, cmap='YlGnBu', linecolor=\"white\")\n\n# Adding title to the heatmap:\nplt.title('Correlation for Titanic Features')","08a3d781":"KEY:<br>\n0 - male <br>\n1 - female\n\nFor data visualisation we will keep male\/female description in the Sex column, but this can be set later.","59b6a7e0":"# Titanic","6798614d":"### Introduction ","9b76dd3e":"The bar charts above show that there are almost twice as many males on board as females. However, females have a better chance of survival.","a769615c":"Because the percentage of mising Cabin data is quite high, we can drop the column from our dataframe titanic_df instead of filling it in.","988179b3":"It seems like people who embarked in Southampton had higher survival rate than those who embarked in other two ports. ","91e1a0cb":"The variable that has the highest impact on a likelihood of survival is 'Sex', followed by 'Pclass' and 'Fare'.","625e281e":"##### Filling in Missing Age values","835ae539":"Our first data filling will be related to the passengers' age. We will use groupped data for Sex, Pclass and Title. This should give us more accurate ages, than just simply filling NaN values with the average age of known ages. \n\nIn the next step we will show that we have 17 different titles used in names and try to map them to 6 main categories: Mr, Miss, Mrs, Master, Officer and Royalty.","f3d32b10":"<img src='https:\/\/cdn.britannica.com\/72\/153172-050-EB2F2D95\/Titanic.jpg' width=900, heigth=450 align='center'\/>","dc44814f":"Embark = port of embarkation (C = Cherbourg, Q = Queenstown, S = Southampton)","4d514bf2":"Titanic was a British passenger liner that sank in the North Atlantic Ocean in 1912, after colliding with an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making it one of modern history's deadliest commercial marine disasters during peacetime.\n\nThe dataset we are going to work with contains demographics and passenger information from 891 passengers and crew on board of the Titanic. \n\nThe Titanic dataset has the following attributes:\n - PassengerId: Unique identifier for passengers\n - Survival (0 = No; 1 = Yes)\n - Pclass: Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\n - Name: Name\n - Sex: Sex\n - Age: Age\n - SibSp: Number of Siblings\/Spouses Aboard\n - Parch: Number of Parents\/Children Aboard\n - Ticket: Ticket Number\n - Fare: Passenger Fare\n - Cabin: Cabin\n - Embarked: Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)","f1f9ad53":"In our Titanic dataset we have missing data in Age and Cabin columns.","cd4d3e5e":"### Data Cleaning","4b177468":"There are 177 NaN values for passengers' age. We will now try to estimate those missing values, by using groupped data and averages.","f18557dd":"We can obtain this information from correlation. We will create a heatmap to show correlation between our variables\/features:","73ba9e84":"### Import Libraries ","e1556bb9":"### Import the Data ","ab519989":"Explore your dataset:","423167f0":"##### Embarked Feature ","86565c7a":"##### Setting Binary Values for Sex Column ","1e5c8754":"######  What is the chance that a woman in her 30's with a 2nd class ticket survives? ","af274e20":"##### Which variable has the highest impact when considering the likelihood of survival? ","da68ac8d":"##### Age Feature ","4bed7370":"The following code loads data from our csv file into jupyter notebook and sets it as a DataFrame:","44e62a71":"We now have no data missing and can go to explore our dataset further.","500713fb":"##### Fare Feature","5557e5d1":"##### Who were the passengers on the Titanic?","7e66a16e":"Exploring the age feature shows us that females on the board of Titanic had a higher chance of survival than males.","4fc12b3d":"Looking at the visualisation above - heatmap, we can see that some values, such as age and cabin are missing. We will try to estimate those missing values and add them to our dataset.","83630c3b":"### Exploratory Data Analysis (EDA) ","d536a3d6":"There is a weak correlation between fare and survival.","0e7fa6a1":"##### Filling in Missing Cabin Values"}}