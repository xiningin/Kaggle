{"cell_type":{"9efd28d5":"code","a27cfff0":"code","e7f84817":"code","fea22127":"code","83bb61c3":"code","c27b29f6":"code","657f840c":"code","a80e6389":"code","5860ceb0":"code","d5e2b0c6":"code","b43bdff7":"code","cd78f974":"code","20748e37":"code","9f06cbc3":"code","397fd2bb":"code","c26ca013":"code","783ceea6":"code","16224a62":"code","0667494c":"code","66ad5eed":"code","d21a02a9":"code","dc371a0f":"code","591a1f6f":"code","40e98d94":"code","c0216e9d":"code","fe4ce68b":"code","596eced4":"code","1226540a":"code","a440ff61":"code","57788450":"code","e7117343":"code","e4bc7437":"code","835f6ea3":"code","92371b7d":"code","99465354":"code","65d13cc1":"code","f796a619":"code","a316c9bf":"code","6e5b9203":"code","0777c362":"markdown","36122c7e":"markdown","c1f9abf8":"markdown","4f1610ae":"markdown","d4348f70":"markdown","2ad717df":"markdown","542e55dd":"markdown","fa1c2ad6":"markdown","ed35df7b":"markdown","141e773a":"markdown","506be71b":"markdown","d56e3def":"markdown","b01db7a5":"markdown","1d1f3901":"markdown","721a5a31":"markdown","b53924ae":"markdown","90d3f4f5":"markdown","ce11d1d9":"markdown","3fe8991c":"markdown","8eba6c1f":"markdown","f455d4b4":"markdown","d7973919":"markdown","21e174bb":"markdown","681aacf9":"markdown","39bbcfba":"markdown","51ceca58":"markdown","2d6202d5":"markdown","9226dda8":"markdown","ddb35de2":"markdown","c0925aab":"markdown","bcf3fdad":"markdown"},"source":{"9efd28d5":"# importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","a27cfff0":"# reading data into fishes\nfishes = pd.read_csv('..\/input\/fish-market\/Fish.csv')\nfishes.head()","e7f84817":"fishes.info()","fea22127":"fishes.describe()","83bb61c3":"fishes.hist(bins= 25, figsize=(16, 8))","c27b29f6":"from sklearn.model_selection import StratifiedShuffleSplit\n\n# stratified train test split by 'Weight_cat' \nstat_split = StratifiedShuffleSplit(n_splits=1, test_size=0.2 ,random_state=90)\n\nfor train_index, test_index in stat_split.split(fishes, fishes.Species):\n    strat_train = fishes.loc[train_index]\n    strat_test = fishes.loc[test_index]","657f840c":"fishes = strat_train.copy()","a80e6389":"fishes.sort_index(inplace=True)","5860ceb0":"def SelectIndicesZeroVal(df):\n    \"\"\"\n    Searching for rows with zero values and\n    return thier indices in list\n    \n    df: DataFrame\n    \"\"\"\n    zero = []\n\n    for column in df.columns:\n        zero.extend(df[df[column] == 0].index.values)\n        \n    return zero","d5e2b0c6":"zero = SelectIndicesZeroVal(fishes)\nfishes.loc[zero]","b43bdff7":"zero = SelectIndicesZeroVal(strat_test)\nstrat_test.loc[zero]","cd78f974":"def PlotSpecies(ax_):\n    \"\"\"\n    Takes ax object and plots with it \n    species frequencies\n    \"\"\"\n    ax_.bar(species.index, species.values)\n    ax_.set_ylabel('frequencies')","20748e37":"# species frequencies\nspecies = fishes.Species.value_counts()\nspecies","9f06cbc3":"fig, ax = plt.subplots(figsize=(12,6))\nPlotSpecies(ax)\nax.set_title('Species', fontsize=19)","397fd2bb":"fishes_labels = fishes['Species']","c26ca013":"from sklearn.base import BaseEstimator, TransformerMixin\n\nclass ZeroToNan(BaseEstimator, TransformerMixin):\n    \"\"\"\n    Custom transformer transformers zero values \n    to Nan in given columns\n    \n    variables: column names iterable\n    \"\"\"\n    def __init__(self, variables):\n        self.variables = variables\n        \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        X_c = X.copy()\n        X_c[self.variables] = X_c[self.variables].replace(0, np.nan)\n        return X_c","783ceea6":"class ImputerSpeciesFeatureMean(BaseEstimator, TransformerMixin):\n    \"\"\"\n    Custom transformer replaces Nan \n    in provided columns with \n    column mean in groups\n    \n    variables: column names iterable\n    by: column to group by\n    \"\"\"\n    def __init__(self, variables, by):\n        self.variables = variables\n        self.by = by\n            \n    def fit(self, X, y=None):\n        self.map = X.groupby(self.by)[self.variables].mean()\n        return self\n    \n    def transform(self, X, y=None):\n        Xc = X.copy()\n        for variable in self.variables:\n            Xc[variable] = Xc[variable].fillna(value = Xc[self.by].map(self.map[variable]))\n        return Xc[self.variables]","16224a62":"from sklearn.pipeline import Pipeline\n\nsteps = [\n    ('zero_nan', ZeroToNan('Weight')),\n    ('imputer_species_mean', ImputerSpeciesFeatureMean(['Weight'], 'Species'))\n]\n\npipe_weight = Pipeline(steps)","0667494c":"# extracting necessary columns\ncolumns = list(fishes)\ncolumns_length = columns.copy()\ncolumns_length = columns_length[2:]\n\nfishes_num = fishes[columns_length]","66ad5eed":"class FeaturesCalculator(BaseEstimator, TransformerMixin):\n    \"\"\"\n    Calculates new features\n    \"\"\"\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        X_c = X.copy()\n        \n        X_c['Diff_Length21'] = X_c['Length2'] - X_c['Length1']\n        X_c['Diff_Length31'] = X_c['Length3'] - X_c['Length1']\n        X_c['Volume'] = X_c['Length2'] * X_c['Height'] * X_c['Width']\n        \n        return X_c","d21a02a9":"calc_feat = FeaturesCalculator()\ncalc_feat.fit_transform(fishes_num).head()","dc371a0f":"columns_weight = ['Weight', 'Species']","591a1f6f":"from sklearn.compose import ColumnTransformer\n\nsteps = [\n    ('feat_calc', FeaturesCalculator(), columns_length),\n    ('weight_imputer', pipe_weight, columns_weight)\n]\n\ncolumn_transformer = ColumnTransformer(steps)\nfishes_prepared = column_transformer.fit_transform(fishes)","40e98d94":"from sklearn.model_selection import cross_val_score\n\ndef AccuracyCV(model):\n    \"\"\"\n    Cross validates model.\n    Returns list of accuracy scores\n    \"\"\"\n    return np.round(cross_val_score(model, fishes_prepared,\n                                    fishes_labels, cv=4, \n                                    scoring='accuracy'), 2)","c0216e9d":"from sklearn.ensemble import RandomForestClassifier\n\nforest_clf = RandomForestClassifier()\nforest_clf.fit(fishes_prepared, fishes_labels)","fe4ce68b":"AccuracyCV(RandomForestClassifier())","596eced4":"from sklearn.linear_model import SGDClassifier\n\nsgd_clf = SGDClassifier()\nsgd_clf.fit(fishes_prepared, fishes_labels)","1226540a":"AccuracyCV(SGDClassifier())","a440ff61":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_clf = KNeighborsClassifier()\nknn_clf.fit(fishes_prepared, fishes_labels)","57788450":"AccuracyCV(KNeighborsClassifier())","e7117343":"from sklearn.svm import SVC\n\nsvc = SVC(kernel='linear')\nsvc.fit(fishes_prepared, fishes_labels)","e4bc7437":"AccuracyCV(SVC(kernel='linear'))","835f6ea3":"y_test = strat_test['Species']\ny_test.head()","92371b7d":"# transfroming strat_test\nX_test_prepared = column_transformer.transform(strat_test)","99465354":"forest_clf.score(X_test_prepared, y_test)","65d13cc1":"svc.score(X_test_prepared, y_test)","f796a619":"# predicting test data set\ny_test_pred = svc.predict(X_test_prepared)","a316c9bf":"# getting vectors that we got wrong\nfalse_index = y_test.loc[y_test_pred != y_test].index\nfalse_index","6e5b9203":"strat_test.loc[false_index]","0777c362":"Searching for zero values in 'fishes'","36122c7e":"There is a zero value in test set","c1f9abf8":"`pipe_weight`: preprocesses `Weight` by replacing zeros with Species mean weight","4f1610ae":"### Constructing pipeline ","d4348f70":"In this section I'm creating, testing new transformers","2ad717df":"Cross validating diffrent classifiers","542e55dd":"<b>Full pipeline<\/b>\n\n\n`column_transformer`: Calculates new numerical features and replaces zero weights with Species mean. `fishes_prepared` is the output.","fa1c2ad6":"\nDataSet source: https:\/\/www.kaggle.com\/aungpyaeap\/fish-market\n\nTask: Predict the Type of fish\n\nThis is my second notebook on this dataset, so I skip some things here, e.g Exploratry Analysis. So go and check it out https:\/\/www.kaggle.com\/johnwoodbirch\/predicting-fish-weight-rmse-53-9-gram  ","ed35df7b":"### Numerical ","141e773a":"No zero values in train set","506be71b":"## Exploratry analysis ","d56e3def":"Custom transformer `ImputerSpeciesFeatureMean` replaces Nan in provided attributes with Species attribute mean","b01db7a5":"### Transformations ","1d1f3901":"## Modeling","721a5a31":"## Preprocessing ","b53924ae":"Custom transformer `FeaturesCalculator` calculates new features","90d3f4f5":"# Species classification","ce11d1d9":"Support Vector Classifier with linear kernel has the highest accuracy scores obtained from cross validation, then follows RandomForestClassifier. ","3fe8991c":"### Weight","8eba6c1f":"`y_test`: Species column","f455d4b4":"While writting the notebook one of my goals was to practise `sklearn` library, thus for some tasks were created `sklearn` custom transformers insted of using `pandas` in few lines of code.","d7973919":"`fishes_labels`: Species column","21e174bb":"# Validating on test set ","681aacf9":"I suppose that reason for getting low scores from cross validation is presence of classes with few vectors in addition to small size of the dataset.","39bbcfba":"Custom transformer `ZeroToNan` transformers zero values to Nan in given columns ","51ceca58":"## Beginning ","2d6202d5":"Accuracy scores","9226dda8":"Stratified Train Test split by 'Species' ","ddb35de2":"Support Vector Classifier wins the race with `0.96875` accuracy score","c0925aab":"Testing","bcf3fdad":"We got wrong only one fish!\n\nSmelly fish :\/"}}