{"cell_type":{"0169702b":"code","03d80964":"code","722749d5":"code","f9bf1b16":"code","bf380fd3":"code","7ac51e9a":"code","55e9bc26":"code","c7f1c85f":"code","109e1e82":"code","256ea7d2":"code","fe128a1b":"code","9774cf24":"code","373a7c86":"code","4a4f26c8":"code","b1064fe7":"code","237088a2":"code","0662a595":"code","e99a66d1":"code","08ea2db3":"code","01bd372a":"code","e6aebd07":"code","cc60b05d":"code","f4292535":"code","cb7d268c":"code","42e4ff80":"code","6bd3d50f":"code","b44a676e":"code","d0fa68f6":"code","ecd3fb43":"code","c94f4fab":"code","0956d42f":"code","cc214814":"code","b9f41753":"code","79dee739":"code","ef1cab8f":"code","c2c7812f":"code","2fd0b4ac":"code","5a5fcff7":"code","5657b8c7":"code","623b70e6":"code","3aef602f":"code","dc923e37":"code","07d007d4":"code","2d0ca96b":"code","b0bf3381":"code","21a35836":"code","7b21911a":"code","804351c1":"code","2c88bd28":"code","7d278c0e":"code","77b56173":"code","60f21137":"code","f9b1a28a":"markdown","21313a0b":"markdown","41115471":"markdown","a989de85":"markdown","69872d35":"markdown","6f0868f9":"markdown","31aab187":"markdown","0b4880e6":"markdown","162848ac":"markdown","e203a0d8":"markdown","f4d5a15a":"markdown","4a9eaf1b":"markdown","aa9c9dfb":"markdown","0daa88d5":"markdown"},"source":{"0169702b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\n%matplotlib inline\n\n","03d80964":"filepath1=('..\/input\/titanic\/train.csv')\nfilepath2=('..\/input\/titanic\/test.csv')\ndata_Train=pd.read_csv(filepath1)\ndata_Test=pd.read_csv(filepath2)\ndata_Train.head()","722749d5":"data_Train.info()","f9bf1b16":"data_Train.isnull().sum()","bf380fd3":"data_Test.isnull().sum()","7ac51e9a":"data_Train.describe()","55e9bc26":"\nplt.title('Train')\nsns.countplot(data_Train['Survived'])","c7f1c85f":"sns.countplot(data_Train['Pclass'],hue=data_Train['Survived'])","109e1e82":"sns.distplot(data_Train[data_Train['Survived']==1]['Age'],bins=30,label='Survived')\nsns.distplot(data_Train[data_Train['Survived']==0]['Age'],bins=30,color='red',label='Not survived')\nplt.legend()\n","256ea7d2":"sns.distplot(data_Train[data_Train['Sex']=='male']['Age'],bins=30,label='male')\nsns.distplot(data_Train[data_Train['Sex']=='female']['Age'],bins=30,color='red',label='female')\nplt.legend()\n","fe128a1b":"sns.countplot(data_Train['Survived'],hue=data_Train['Sex'])","9774cf24":"sns.countplot(data_Train['Embarked'],hue=data_Train['Survived'])","373a7c86":"\nplt.subplot(121)\nplt.title('female')\ncircle = plt.Circle((0, 0), 0.5, color = 'white')\ndata_Train[data_Train['Sex']=='female']['Survived'].value_counts().plot(kind='pie',figsize=(12, 12), rot=1, colors=[ '#1849CA','crimson'], autopct = '%.2f%%')\nplots = plt.gcf()\nplots.gca().add_artist(circle)\nplt.legend()\n\nplt.subplot(122)\nplt.title('male')\ncircle = plt.Circle((0, 0), 0.5, color = 'white')\ndata_Train[data_Train['Sex']=='male']['Survived'].value_counts().plot(kind='pie',figsize=(12, 12), rot=1, colors=['crimson','#1849CA'], autopct = '%.2f%%')\nplots = plt.gcf()\nplots.gca().add_artist(circle)\nplt.legend()","4a4f26c8":"sns.pairplot(data_Train)","b1064fe7":"data_Train['Sex'].replace(['male','female'],[1,0],inplace=True)\ndata_Test['Sex'].replace(['male','female'],[1,0],inplace=True)","237088a2":"plt.subplots(figsize=(12, 10))\nsns.heatmap(data_Train.corr().abs(),annot=True,cmap='Blues')","0662a595":"data_Train['Embarked'].fillna(\"S\", inplace = True) \ndata_Train['Embarked'].unique()","e99a66d1":"data_Train['Family']=data_Train['SibSp']+data_Train['Parch']+1\ndata_Test['Family']=data_Test['SibSp']+data_Test['Parch']+1\n\ndata_Train['Title']=data_Train['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\ndata_Test['Title']=data_Test['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\nprint(data_Train['Title'].value_counts())\ntitle=['Mr','Miss','Mrs','Master']\nprint(title)\ndata_Train['Title'] = np.where(data_Train['Title'].isin(title), data_Train['Title'], 'Other')\ndata_Test['Title'] = np.where(data_Test['Title'].isin(title), data_Test['Title'], 'Other')\ndata_Train['Title'].value_counts()","08ea2db3":"data_Train=pd.get_dummies(data_Train,columns=['Embarked'], prefix='embarked')\ndata_Test=pd.get_dummies(data_Test,columns=['Embarked'],prefix='embarked')\ndata_Train=pd.get_dummies(data_Train,columns=['Title'], prefix='Title')\ndata_Test=pd.get_dummies(data_Test,columns=['Title'],prefix='Title')\ndata_Train.head()","01bd372a":"data_Train.drop(columns=['PassengerId','Name','Ticket','Cabin'],inplace=True)\ndata_Test.drop(columns=['PassengerId','Name','Ticket','Cabin'],inplace=True)","e6aebd07":"\nimp_mean=SimpleImputer(missing_values=np.nan,strategy='median')\nimp_mean.fit(data_Train[['Age']])\ndata_Train['Age']=imp_mean.transform(data_Train[['Age']])\ndata_Test['Age']=imp_mean.transform(data_Test[['Age']])\nimp_mean.fit(data_Test[['Fare']])\ndata_Test['Fare']=imp_mean.transform(data_Test[['Fare']])","cc60b05d":"Y_Train=data_Train['Survived']\nX_Train=data_Train.drop(['Survived'],axis=1)\nprint(X_Train.head())\nprint(data_Test.head())","f4292535":"\nscaler=StandardScaler()\nscaler.fit(X_Train)\nX_Train=scaler.transform(X_Train)\nX_Test=scaler.transform(data_Test)","cb7d268c":"from sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score,f1_score,confusion_matrix,make_scorer\nX_train,X_test,Y_train,Y_test=train_test_split(X_Train,Y_Train,test_size=0.2, random_state=45)","42e4ff80":"print('Positive cases % in validation set: ', round(100 * len(Y_test[Y_test == 1]) \/ len(Y_test), 3), '%')\nprint('Positive cases % in train set: ', round(100 * len(Y_train[Y_train == 1]) \/ len(Y_train), 3), '%')","6bd3d50f":"support=SVC()\nsupport.fit(X_train,Y_train)\npred=support.predict(X_test)\naccuracy = cross_val_score(support, X_train, Y_train, scoring='accuracy', cv = 5)\nprint(accuracy.mean())\nsns.heatmap(confusion_matrix(pred,Y_test),annot=True,cbar=False)\nf1_score(pred,Y_test)","b44a676e":"support1=SVC(C=1,kernel='poly',degree=3,gamma=.05)\nsupport1.fit(X_train,Y_train)\npred=support1.predict(X_test)\nprint(f1_score(pred,Y_test))\naccuracy = cross_val_score(support1, X_train, Y_train, scoring='accuracy', cv = 5)\nprint(accuracy.mean())\nsns.heatmap(confusion_matrix(pred,Y_test),annot=True,cbar=False)\n","d0fa68f6":"from sklearn.model_selection import GridSearchCV \nfrom sklearn.model_selection import StratifiedKFold\nstr=StratifiedKFold(n_splits=4, shuffle = True, random_state = 999)\nparam_grid = {'C': [0.1, 1,5, 10, 100, ],  \n              'gamma': [1, 0.1, 0.01,.05 ,0.001 ], \n              'kernel': ['rbf','linear','poly'],'degree':[2,3,4]}  \n  \ngrid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3,cv=str) \ngrid.fit(X_train, Y_train) \nprint(grid.best_params_) \nprint(grid.best_estimator_) ","ecd3fb43":"pred1=support1.predict(X_Test)","c94f4fab":"file='..\/input\/titanic\/gender_submission.csv'\nsubmission=pd.read_csv(file)\nsubmission['Survived']=pred1\nsubmission[submission['Survived']==0].count()\n","0956d42f":"#submission.to_csv('submission2.csv', index=False, encoding='utf-8')","cc214814":"from sklearn.model_selection import GridSearchCV  \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import StratifiedKFold","b9f41753":"\nstr=StratifiedKFold(n_splits=4, shuffle = True, random_state = 999)\nrfc=RandomForestClassifier()\nparameters={'n_estimators':[100,300,400,500,1000],'max_features':['auto','sqrt','log2'],\n            'max_depth':[3,4,5,6,8],'criterion':['gini']}\nCV_r = GridSearchCV(estimator=rfc, param_grid=parameters, cv= str,verbose=3)\nCV_r.fit(X_Train, Y_Train)\nprint(CV_r.best_params_) \nprint(CV_r.best_estimator_) ","79dee739":"rfc1=RandomForestClassifier(random_state=42, max_features='auto', n_estimators= 100, max_depth=4, criterion='gini')\nrfc1.fit(X_train,Y_train)\npred=rfc1.predict(X_test)\nprint(f1_score(pred,Y_test))\naccuracy = cross_val_score(rfc1, X_train, Y_train, scoring=make_scorer(f1_score), cv = 5)\nprint(accuracy.mean())\nsns.heatmap(confusion_matrix(pred,Y_test),annot=True,cbar=False)","ef1cab8f":"pred3=rfc1.predict(X_Test)","c2c7812f":"file='..\/input\/titanic\/gender_submission.csv'\nsubmission3=pd.read_csv(file)\nsubmission3['Survived']=pred3\n#submission3.to_csv('submission3.csv', index=False, encoding='utf-8')\nsubmission3[submission3['Survived']==0].count()\n","2fd0b4ac":"X_train.shape[1]\nTrain=X_train.copy()\nTest=X_test.copy()","5a5fcff7":"Train.shape\nY_train.head()\nY_t=Y_train.to_numpy()","5657b8c7":"from keras import Sequential \nfrom keras.layers import Dense\nmodel = Sequential()\nmodel.add(Dense(17, input_dim=15, activation='relu'))\nmodel.add(Dense(17, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(Train, Y_t, validation_data=(Test,Y_test) ,epochs=250)","623b70e6":"pred4=model.predict(Test)\npred4=(pred4>.5).astype(int)\npred4.reshape((1,179))\n","3aef602f":"print(f1_score(pred4,Y_test))\nsns.heatmap(confusion_matrix(pred4,Y_test),annot=True,cbar=False)","dc923e37":"print(X_Test.shape)\npred5=model.predict(X_Test)\npred5=(pred5>.5).astype(int)\npred5=pred5.reshape((1,418))\npred5=np.squeeze(pred5)\npred5\n","07d007d4":"file='..\/input\/titanic\/gender_submission.csv'\nsubmission4=pd.read_csv(file)\nsubmission4['Survived']=pred5\n#submission4.to_csv('submission4.csv', index=False, encoding='utf-8')\nsubmission4[submission4['Survived']==0].count()\n","2d0ca96b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\n","b0bf3381":"lm=LogisticRegression()\nstr=StratifiedKFold(n_splits=4, shuffle = True, random_state = 999)\nparam={'C':[.01,.1,.3,.5,1,2,10],'penalty':['l2']}\nCV_r = GridSearchCV(estimator=lm, param_grid=param, cv= str,verbose=3)\nCV_r.fit(X_Train, Y_Train)\nprint(CV_r.best_params_) \nprint(CV_r.best_estimator_) \n","21a35836":"lm=LogisticRegression(penalty='l2',solver='lbfgs',C=.1)\nlm.fit(X_train,Y_train)\npred6=lm.predict(X_test)\nprint(f1_score(pred6,Y_test))\naccuracy = cross_val_score(lm, X_train, Y_train, scoring=make_scorer(f1_score), cv = 5)\nprint(accuracy.mean())\nsns.heatmap(confusion_matrix(pred6,Y_test),annot=True,cbar=False)","7b21911a":"import xgboost\nxgb=xgboost.XGBClassifier(colsample_bytree=0.3,eta=0.1,gamma=0.1)","804351c1":"from sklearn.ensemble import VotingClassifier\neclf1 = VotingClassifier(estimators=[('lr', lm), ('rf', rfc1), ('svm', support1),('xgb',xgb)], voting='hard')","2c88bd28":"eclf1.fit(X_train,Y_train)\n","7d278c0e":"from sklearn.metrics import accuracy_score\nfor clf in (lm,rfc1,support1,xgb,eclf1):\n    clf.fit(X_train,Y_train)\n    y_pred=clf.predict(X_test)\n    print(clf.__class__.__name__,accuracy_score(Y_test,y_pred))\n","77b56173":"result=eclf1.predict(X_Test)","60f21137":"file='..\/input\/titanic\/gender_submission.csv'\nsubmission5=pd.read_csv(file)\nsubmission5['Survived']=result\nsubmission5.to_csv('first.csv', index=False, encoding='utf-8')\nsubmission5[submission5['Survived']==0].count()","f9b1a28a":"#feature selection\n* converting the classifier data into numerical","21313a0b":"#RandomForestClassifier","41115471":"features ","a989de85":"#SVC model ","69872d35":"#data visualization\n1. Survived is the target variable ","6f0868f9":"* cabin with total 687 null values out of total 891 values \n* harder to utilize data with this much null values ","31aab187":"the distribution of the survived and not survived seems almost similar ","0b4880e6":"Replacing the two nan to S for embarked ","162848ac":"#ANN","e203a0d8":"Female seems to have higher chances of survival then the male ","f4d5a15a":"Female have considerably higher chances of survival then the male ","4a9eaf1b":"score of .727 with SVM ","aa9c9dfb":"score in submission .786","0daa88d5":"Lets replace the missing value in age with the mean values"}}