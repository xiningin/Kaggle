{"cell_type":{"4779dd04":"code","0677f54a":"code","d2aa79e6":"code","83188f27":"code","fc56f133":"code","8d42ebea":"code","5b221d29":"code","b1f404d0":"code","ab8192dd":"code","2826f41c":"code","102e2e9d":"code","43c3f850":"code","93a4fa2c":"code","14664c14":"code","df695eed":"code","ed9e2ab3":"code","3b3c85cf":"markdown","971d9c65":"markdown","3e5f7796":"markdown","918fb632":"markdown","bc829709":"markdown"},"source":{"4779dd04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0677f54a":"# importing magic functions\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n%config InlineBackend.figure_format ='retina'\n%matplotlib inline\n\n# importing visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d2aa79e6":"# importing the combined data\ndf = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv')\ndf.head()\ndf.info()","83188f27":"# dropping columns with redundant data \ndf = df.drop(['Last Update','Sno'], axis=1)","fc56f133":"# changing the date type to datetime\ndf['Date'] = df['Date'].astype('datetime64[D]')","8d42ebea":"# changing data type float to int (there are no half people :-))\ndf[['Confirmed',\"Deaths\",'Recovered']] = df[['Confirmed',\"Deaths\",'Recovered']].astype(int)","5b221d29":"# checking for missing values\ndf.isna().sum()\n# fill NA with new string: 'Unknown'\ndf[['Province\/State']] = df[['Province\/State']].fillna('Unknown')","b1f404d0":"# combine China and Mainland China\ndf['Country'] = df['Country'].replace({'Mainland China':'China'})\n# combine Cruise Ship and Diamons Princess Cruise Ship\ndf['Province\/State'] = df['Province\/State'].replace({'Cruise Ship':'Diamond Princess cruise ship'})\n# replace 'Other' country for the cruise with 'Japan'\ndf.loc[df['Province\/State'] =='Diamond Princess cruise ship', 'Country'] = 'Japan'","ab8192dd":"# visualize development of Corona Cases over time\n\nf, ax = plt.subplots(figsize=(12, 6))\nsns.lineplot(x='Date',y='Confirmed',data=df,ci=None,label=\"Confirmed\", color='B')\nsns.lineplot(x='Date',y='Deaths',data=df,label=\"Deaths\", ci=None, color='R')\nsns.lineplot(x='Date',y='Recovered',data=df,label=\"Recovered\", ci=None, color='G')\n\nplt.legend(loc=\"upper left\")\nplt.xticks(rotation=45)\nplt.ylabel('Corona Cases')\nplt.xlim('2020-01-22','2020-02-15')\nplt.tight_layout()\nplt.box(False)\nplt.title(\"Corona Cases over Time\", fontweight=\"bold\")\nplt.show()","2826f41c":"# get the data for the most recent date \ndf['Date'].max()\ndf_now = df[df['Date']=='2020-02-15']\n\nprint(\"As of February 15, 2020 there are\",df_now['Confirmed'].sum(),\"confirmed Corona cases worldwide.\",df_now['Deaths'].sum(),\"people have died from the virus and\",\n      df_now['Recovered'].sum(),\"have recovered.\")","102e2e9d":"# Corona Cases by Country\ndf_now = df_now.groupby('Country', as_index=False).agg({'Confirmed':'sum','Deaths':'sum','Recovered':'sum'}).sort_values(by=['Confirmed'],ascending=False)\ndf_now = df_now.reset_index(drop=True)\ndf_now","43c3f850":"# loading world coordinates map (found on Kaggle)\ndf_geo = pd.read_csv(\"..\/input\/world-coordinates\/world_coordinates.csv\")","93a4fa2c":"df_geo = df_geo.drop(['Code'], axis=1)","14664c14":"df_geo.head()\ndf_geo.shape\ndf_now.head()\ndf_now.shape","df695eed":"# Merging the 2 dataframes on Country to get the long- and latitude values\ndf_comb = pd.merge(df_now, df_geo, on='Country',how='left')\ndf_comb","ed9e2ab3":"# Geomapping with Folium\nimport folium\nworld_map=folium.Map(location=[10, -20], zoom_start=0.5,tiles='cartodbdark_matter')\nfor lat, lon, value, name in zip(df_comb['latitude'], df_comb['longitude'], df_comb['Confirmed'], df_comb['Country']):\n    folium.CircleMarker([lat, lon],radius=7,popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                                     '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.5 ).add_to(world_map)\nworld_map","3b3c85cf":"## Visualizing on Map","971d9c65":"### Preprocessing the Data","3e5f7796":"### Development over Time","918fb632":"### Current Situation - Summary","bc829709":"# Corona Virus - Analysis\n\nExploratory Data Analysis about the Corona Virus spread using data supplied by the World Health Organization.\n\n<iframe src=\"https:\/\/giphy.com\/embed\/U3sSjGoNbFHPBHzoCp\" width=\"480\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen><\/iframe><p><a href=\"https:\/\/giphy.com\/gifs\/flu-ncov-2019-U3sSjGoNbFHPBHzoCp\">via GIPHY<\/a><\/p>"}}