{"cell_type":{"2f021d15":"code","c0568c15":"code","527a1b26":"code","870c14af":"code","14258c99":"code","9b2a1a83":"code","4e8f3078":"code","e1368f0d":"code","ff476128":"code","2b467a9e":"code","ef4c3e77":"code","20ef09a8":"code","6b4ec5f1":"code","a52232fd":"code","07b6764f":"code","3d744501":"markdown","9e8dbafc":"markdown","39881e2d":"markdown","eb569806":"markdown","256a4607":"markdown","f00f3e58":"markdown","045f9322":"markdown","35d5259c":"markdown","0bd8ca7c":"markdown"},"source":{"2f021d15":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c0568c15":"data=pd.read_csv('..\/input\/real-estate-price-prediction\/Real estate.csv',index_col='No')\ndata.head()","527a1b26":"from sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import StandardScaler\n\npipe=Pipeline([(\"StandardScaler\",StandardScaler()),(\"ridge\",Ridge())])","870c14af":"#Splitting data into train and test data\nfrom sklearn.model_selection import train_test_split\ny=pd.DataFrame()\ny['Price']=data['Y house price of unit area']\ndata.drop('Y house price of unit area',axis=1,inplace=True)\nX_train,X_test,y_train,y_test=train_test_split(data,y,random_state=0)","14258c99":"#fitting out pipepline with train data\npipe.fit(X_train,y_train)","9b2a1a83":"#score\nprint(pipe.score(X_test,y_test))\nprint(pipe.score(X_train,y_train))\n","4e8f3078":"#step name with double underscore then the name of parameter to perform grid search.\nparam={\"step2__alpha\":[0.01,0.1,1,10,100]}","e1368f0d":"from sklearn.model_selection import GridSearchCV\npipe2=Pipeline([('step1',StandardScaler()),('step2',Ridge())])\ngrid=GridSearchCV(pipe2,param_grid=param,cv=5)\ngrid.fit(X_train,y_train)\nprint(\"Best cv accuracy : \",grid.best_score_)\nprint(\"Best parameter : \",grid.best_params_)\nprint(\"Train score : \",grid.score(X_train,y_train))\nprint(\"Test score : \",grid.score(X_test,y_test))","ff476128":"from sklearn.pipeline import make_pipeline\npipe3=make_pipeline(StandardScaler(),Ridge())\n\n#names of steps can be seen using steps attribute\n#if any step has same class, a number will be appended to its name\nprint(pipe3.steps)","2b467a9e":"#fitting the pipeline using train data\npipe3.fit(X_train,y_train)","ef4c3e77":"print(pipe3.named_steps.keys())\nprint(pipe3.named_steps.values())","20ef09a8":"print(pipe3.steps)","6b4ec5f1":"param={\"ridge__alpha\":[0.01,0.1,0,1,10,100]}","a52232fd":"grid2=GridSearchCV(pipe3,param,cv=5)\ngrid2.fit(X_train,y_train)","07b6764f":"print(\"best estimator \",grid2.best_estimator_)\nprint(\"best param \",grid2.best_params_)\nprint(\"test score \",grid2.score(X_test,y_test))\nprint(\"train score \",grid2.score(X_train,y_train))","3d744501":"**What is pipelining?**\n\nCombining multiple steps involved into a single estimator.\nSteps such as preprocessing can be combined into a single estimator.\nAlong with preprocessing model can be chained too.","9e8dbafc":"**make_pipeline**\n\nmake_pipeline function will create a pipeline and will automatically name each step based on its class.","39881e2d":"In order to access the steps in a pipeline we can use **named_steps** attribute.\nIt is a dictionary with keys equal to step names and values equal to the estimators.","eb569806":"**Here we're going to combine Standard scaler and Ridge Regression model into a single estimator.**\n\n\nHow to make a pipeline-\n\nBuild a pipeline object and provide it with list of steps. Each step is a list of tuple consisting of name of step(any string of your choice) and an instance of estimator.","256a4607":"**GridSearchCV with make_pipeline**","f00f3e58":"Now we've object of pipeline, which is itself an estimator,therefore we can call fit method.\nOn calling fit method , train data provided first will fit the standard scaler and then train data will be preprocessed by  fitted standard scaler and finally preprocessed data will be sent to fit our ridge regression model.\nWe can also call score method on pipeline object.\nOn calling score method test data will go through same preprocessing first it will be transformed by our standard scaler(fitted by train data) and then transformed test data will be sent to our ridge Regression model to calculate score.","045f9322":"*Imports and fetching data*","35d5259c":"Just like we can provide instance of model to GridSearchCV, we can provide pipelining object too.\nThis can help in parameter optimization. GridSearch in pipelining works the same way as with any other estimator. We define a parameter grid and then build a GridSearchCV from the pipeline and the parameter grid.\n\nThe only difference between GridSearchCV with model and GridSearchCV with pipeline is in defining the parameter grid. We need to specify parameters along with which step they belong to.\n","0bd8ca7c":"StandardScaler in step 1 is fitted(refit) using train data, test data is only used for calculating accuracy.\n\nPipelining can contain steps such as feature extraction,scailing of data,feature selection,regression or classification.\nThe only requirement that has to be fulfilled is that the all but the last step needs to have a transform method,so that a new representation of data is produced in each but last step and this new representation of data can be utilised by the next step in preprocessing."}}