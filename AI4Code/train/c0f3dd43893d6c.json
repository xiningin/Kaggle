{"cell_type":{"115fdd0b":"code","bd6e4f2d":"code","7e51cdb5":"code","4511af98":"code","5702721b":"code","0243c566":"code","9a9f571d":"code","50cafc0f":"code","7b6844c5":"code","27eb700c":"code","1e047f3d":"markdown","bded1d19":"markdown","4a2ff93a":"markdown","527a5f32":"markdown","c1ab1ce0":"markdown","6eb3d6dd":"markdown","2a8598c0":"markdown","6130cf72":"markdown","ed8dc69e":"markdown","48380a60":"markdown"},"source":{"115fdd0b":"import numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nfrom matplotlib import pyplot as plt","bd6e4f2d":"questions = pd.read_csv(\"\/kaggle\/input\/riiid-test-answer-prediction\/questions.csv\")","7e51cdb5":"questions[questions[\"tags\"].isnull()]","4511af98":"tags_lst = []\nfor tags in questions[~questions[\"tags\"].isnull()][\"tags\"]:\n    tags_lst += tags.split()\n    \ntags_lst = list(map(int, set(tags_lst)))\ntags_lst.sort()\n\nlen(tags_lst), max(tags_lst)","5702721b":"lst = []\nfor tags in questions[\"tags\"]:\n    ohe = np.zeros(188)\n    if str(tags) != \"nan\":\n        for tag in tags.split():\n            ohe += np.eye(188)[int(tag)]\n    lst.append(ohe)\ntags_df = pd.DataFrame(lst, columns=[f\"tag_{i}\" for i in range(188)]).astype(int)","0243c566":"for part, df in questions.groupby(\"part\"):\n    exist_tags = tags_df.columns[tags_df.loc[df.index].sum() > 0]\n    print(f\"part {part} has {len(exist_tags)} tags.\")","9a9f571d":"lst = []\nfor tag in tags_df.columns:\n    part_tag = questions.loc[tags_df[tags_df[tag] > 0].index][\"part\"].unique()\n    if len(part_tag) > 1:\n        lst.append(\",\".join(map(str, part_tag)))\n        \npd.DataFrame(lst)[0].value_counts()","50cafc0f":"pca = PCA(n_components=2)\n\nX_2d = pca.fit_transform(tags_df.values)\nplt.scatter(X_2d[:,0], X_2d[:,1])","7b6844c5":"pca_feat_df = pd.DataFrame(X_2d, columns=[\"tags_pca_0\", \"tags_pca_1\"])\npca_feat_df[\"question_id\"] = questions[\"question_id\"]\npca_feat_df.head()","27eb700c":"pca_feat_df.to_csv(\"tags_pca_feat_v1.csv\", index=None)","1e047f3d":"It looks there are some group.\n\nCreate this PCA feature DataFrame.","bded1d19":"checking tags of each part ","4a2ff93a":"The question of 10033 doesn't have tags.","527a5f32":"I try to analysis question tags.","c1ab1ce0":"Check Nan","6eb3d6dd":"There are some tags that spans multiple parts.\n\nCheck multiple tags","2a8598c0":"My insight:\n- TOEIC Test part 1 to 4 is listening test, so \"1,2,3,4\" group's tags may be related listening.\n- TOEIC Test part 3 and 4 is listening test which listen long sentence.\n- The most frequent \"5,6\" group may be grammar question because TOEIC test part 5 and 6 are fill-in-the-blank problem.\n- \"1,2,3,4,6,7\" may be a simple problem that applies to any format.\n\n\nI think that it's enough to pay attention to the tags to understand question types.","6130cf72":"## Dimensionality reduction and visualization by PCA","ed8dc69e":"We can use this feature to train model.","48380a60":"The tags has 188 numbers, between 0 and 187.\n\nSo, create a DataFrame with one-hot encoded tags."}}