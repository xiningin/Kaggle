{"cell_type":{"f4d67558":"code","be131790":"code","d5339a8c":"code","2f7665e1":"code","c39b03bd":"code","e4483570":"code","d97d3105":"code","b0747e56":"code","f863949b":"code","a8c66bc0":"code","c145a417":"code","f9587aa1":"code","9d30db85":"code","f5428eca":"code","bd9f0441":"code","af27735f":"code","23870341":"code","3e41d26a":"code","c1d574f6":"code","83fe0931":"code","f5977e5d":"code","5137d605":"code","e2d47c07":"code","3a168557":"code","05a5448a":"code","de34e55a":"code","af133b7d":"code","0737a5f7":"code","37dec74a":"markdown","82349c9e":"markdown","cd48e814":"markdown","2a5f3dd9":"markdown","b77845cb":"markdown","17db5082":"markdown","006314b0":"markdown","ffcab35d":"markdown","4cfcf38c":"markdown","708f06e4":"markdown","d6278699":"markdown","008ae6a5":"markdown"},"source":{"f4d67558":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\nimport seaborn as sns\n\n# Based on <https:\/\/www.kaggle.com\/dgomonov\/data-exploration-on-nyc-airbnb>\n# Error in loading image. Correction available on <https:\/\/github.com\/imageio\/imageio\/issues\/202>\n# The most interesting conclusion is the increase in price avarege based on the top 25 most reviewed listings","be131790":"data=pd.read_csv('..\/input\/airbnbnewyork\/listings.csv')","d5339a8c":"data.head()","2f7665e1":"data.shape","c39b03bd":"data.isnull().sum() #checking for total null values","e4483570":"#dropping columns that are not significant or could be unethical to use for our future data exploration and predictions\ndata.drop(['id','host_name','last_review'], axis=1, inplace=True)\n#examing the changes\ndata.head(3)","d97d3105":"#replacing all NaN values in 'reviews_per_month' with 0\ndata.fillna({'reviews_per_month':0}, inplace=True)\n#examing changes\ndata.reviews_per_month.isnull().sum()","b0747e56":"#let's proceed with examing some interesting categorical unique values\n\n#examining the unique values of n_group as this column will appear very handy for later analysis\ndata.neighbourhood_group.unique()","f863949b":"#examining the unique values of neighbourhood as this column will appear very handy for later analysis\nlen(data.neighbourhood.unique())","a8c66bc0":"#examining the unique values of room_type as this column will appear very handy for later analysis\ndata.room_type.unique()","c145a417":"#we will skip first column for now and begin from host_id\n\n#let's see what hosts (IDs) have the most listings on Airbnb platform and taking advantage of this service\ntop_host=data.host_id.value_counts().head(10)\ntop_host","f9587aa1":"#coming back to our dataset we can confirm our findings with already existing column called 'calculated_host_listings_count'\ntop_host_check=data.calculated_host_listings_count.max()\ntop_host_check","9d30db85":"#setting figure size for future visualizations\nsns.set(rc={'figure.figsize':(10,8)})\nsns.set_style('white')","f5428eca":"top_host_df=pd.DataFrame(top_host)\ntop_host_df.reset_index(inplace=True)\ntop_host_df.rename(columns={'index':'Host_ID', 'host_id':'P_Count'}, inplace=True)\ntop_host_df","bd9f0441":"viz_1=sns.barplot(x=\"Host_ID\", y=\"P_Count\", data=top_host_df,\n                 palette='Blues_d')\nviz_1.set_title('Hosts with the most listings in NYC')\nviz_1.set_ylabel('Count of listings')\nviz_1.set_xlabel('Host IDs')\nviz_1.set_xticklabels(viz_1.get_xticklabels(), rotation=45)","af27735f":"#let's find out more about our neighborhoods presented 'Brooklyn', 'Manhattan', 'Queens', 'Staten Island', and 'Bronx'\n\n#Brooklyn\nsub_1=data.loc[data['neighbourhood_group'] == 'Brooklyn']\nprice_sub1=sub_1[['price']]\n#Manhattan\nsub_2=data.loc[data['neighbourhood_group'] == 'Manhattan']\nprice_sub2=sub_2[['price']]\n#Queens\nsub_3=data.loc[data['neighbourhood_group'] == 'Queens']\nprice_sub3=sub_3[['price']]\n#Staten Island\nsub_4=data.loc[data['neighbourhood_group'] == 'Staten Island']\nprice_sub4=sub_4[['price']]\n#Bronx\nsub_5=data.loc[data['neighbourhood_group'] == 'Bronx']\nprice_sub5=sub_5[['price']]\n#putting all the prices' dfs in the list\nprice_list_by_n=[price_sub1, price_sub2, price_sub3, price_sub4, price_sub5]","23870341":"#creating an empty list that we will append later with price distributions for each neighbourhood_group\np_l_b_n_2=[]\n#creating list with known values in neighbourhood_group column\nnei_list=['Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx']\n#creating a for loop to get statistics for price ranges and append it to our empty list\nfor x in price_list_by_n:\n    i=x.describe(percentiles=[.25, .50, .75])\n    i=i.iloc[3:]\n    i.reset_index(inplace=True)\n    i.rename(columns={'index':'Stats'}, inplace=True)\n    p_l_b_n_2.append(i)\n#changing names of the price column to the area name for easier reading of the table    \np_l_b_n_2[0].rename(columns={'price':nei_list[0]}, inplace=True)\np_l_b_n_2[1].rename(columns={'price':nei_list[1]}, inplace=True)\np_l_b_n_2[2].rename(columns={'price':nei_list[2]}, inplace=True)\np_l_b_n_2[3].rename(columns={'price':nei_list[3]}, inplace=True)\np_l_b_n_2[4].rename(columns={'price':nei_list[4]}, inplace=True)\n#finilizing our dataframe for final view    \nstat_df=p_l_b_n_2\nstat_df=[df.set_index('Stats') for df in stat_df]\nstat_df=stat_df[0].join(stat_df[1:])\nstat_df","3e41d26a":"#we can see from our statistical table that we have some extreme values, therefore we need to remove them for the sake of a better visualization\n\n#creating a sub-dataframe with no extreme values \/ less than 500\nsub_6=data[data.price < 500]\n#using violinplot to showcase density and distribtuion of prices \nviz_2=sns.violinplot(data=sub_6, x='neighbourhood_group', y='price')\nviz_2.set_title('Density and distribution of prices for each neighberhood_group')","c1d574f6":"#as we saw earlier from unique values for neighbourhood there are way too many to concentrate on;\n#therefore, let's grab just top 10 neighbourhoods that have the most listings in them\n\n#finding out top 10 neighbourhoods\ndata.neighbourhood.value_counts().head(10)","83fe0931":"#let's now combine this with our boroughs and room type for a rich visualization we can make\n\n#grabbing top 10 neighbourhoods for sub-dataframe\nsub_7=data.loc[data['neighbourhood'].isin(['Williamsburg','Bedford-Stuyvesant','Harlem','Bushwick',\n                 'Upper West Side','Hell\\'s Kitchen','East Village','Upper East Side','Crown Heights','Midtown'])]\n#using catplot to represent multiple interesting attributes together and a count\nviz_3=sns.catplot(x='neighbourhood', hue='neighbourhood_group', col='room_type', data=sub_7, kind='count')\nviz_3.set_xticklabels(rotation=90)","f5977e5d":"#let's what we can do with our given longtitude and latitude columns\n\n#let's see how scatterplot will come out \nviz_4=sub_6.plot(kind='scatter', x='longitude', y='latitude', label='availability_365', c='price',\n                  cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.4, figsize=(10,8))\nviz_4.legend()","5137d605":"import urllib\n#initializing the figure size\nplt.figure(figsize=(10,8))\n#loading the png NYC image found on Google and saving to my local folder along with the project\nimport imageio\nnyc_img = imageio.imread('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/ec\/Neighbourhoods_New_York_City_Map.PNG')\n#scaling the image based on the latitude and longitude max and mins for proper output\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\nax=plt.gca()\n#using scatterplot again\nsub_6.plot(kind='scatter', x='longitude', y='latitude', label='availability_365', c='price', ax=ax, \n           cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.4, zorder=5)\n\nplt.legend()\nplt.show()","e2d47c07":"#let's comeback now to the 'name' column as it will require litte bit more coding and continue to analyze it!\n\n#initializing empty list where we are going to put our name strings\n_names_=[]\n#getting name strings from the column and appending it to the list\nfor name in data.name:\n    _names_.append(name)\n#setting a function that will split those name strings into separate words   \ndef split_name(name):\n    spl=str(name).split()\n    return spl\n#initializing empty list where we are going to have words counted\n_names_for_count_=[]\n#getting name string from our list and using split function, later appending to list above\nfor x in _names_:\n    for word in split_name(x):\n        word=word.lower()\n        _names_for_count_.append(word)","3a168557":"#we are going to use counter\nfrom collections import Counter\n#let's see top 25 used words by host to name their listing\n_top_25_w=Counter(_names_for_count_).most_common()\n_top_25_w=_top_25_w[0:25]","05a5448a":"#now let's put our findings in dataframe for further visualizations\nsub_w=pd.DataFrame(_top_25_w)\nsub_w.rename(columns={0:'Words', 1:'Count'}, inplace=True)","de34e55a":"#we are going to use barplot for this visualization\nviz_5=sns.barplot(x='Words', y='Count', data=sub_w)\nviz_5.set_title('Counts of the top 25 used words for listing names')\nviz_5.set_ylabel('Count of words')\nviz_5.set_xlabel('Words')\nviz_5.set_xticklabels(viz_5.get_xticklabels(), rotation=80)","af133b7d":"#last column we need to look at is 'number_of_reviews'\n\n#let's grab 10 most reviewed listings in NYC\ntop_reviewed_listings=data.nlargest(10,'number_of_reviews')\ntop_reviewed_listings","0737a5f7":"price_avrg=top_reviewed_listings.price.mean()\nprint('Average price per night: {}'.format(price_avrg))","37dec74a":"## Verificando valores nulos","82349c9e":"# Projeto do Curso Introdu\u00e7\u00e3o \u00e0 Ci\u00eancia de Dados da Petrobras\n## Autor: Rafael Andrello Rubo\n## Instrutor: Vitor Alc\u00e2ntara Batista","cd48e814":"## An\u00e1lise Explorat\u00f3ria dos Dados\n### Verificando quais anfitri\u00f5es t\u00eam mais op\u00e7\u00f5es dispon\u00edveis","2a5f3dd9":"## Verificando as palavras mais utilizadas nos nomes de acomoda\u00e7\u00e3o","b77845cb":"## Utilizando o dado de lat\/lon para avaliar os pre\u00e7os em rela\u00e7\u00e3o a distribui\u00e7\u00e3o espacial","17db5082":"## Selecionando os dados com maior oferta e analisando em rela\u00e7\u00e3o ao tipo de acomoda\u00e7\u00e3o","006314b0":"## Lendo o dataset da cidade de Nova Iorque\n### Dispon\u00edvel em: <http:\/\/insideairbnb.com\/get-the-data.html>\n### Dados de 04 de agosto de 2021","ffcab35d":"## Verificando, agora, as op\u00e7\u00f5es de hospedagem em rela\u00e7\u00e3o ao n\u00famero de revis\u00f5es","4cfcf38c":"## Compreendendo os bairros","708f06e4":"## J\u00e1 d\u00e1 para perceber os valores maiores na ilha de Manhattan. Vamos acrescentar um mapa!","d6278699":"## Eliminando atributos irrelavantes","008ae6a5":"## Compreendendo valores \u00fanicos para cada atributo categ\u00f3rico"}}