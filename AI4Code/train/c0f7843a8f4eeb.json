{"cell_type":{"4e1df8f7":"code","5e030752":"code","5696bb7f":"code","0a379f14":"code","79a8761d":"code","4c228009":"code","ddadda26":"code","818dc6e3":"code","371dcaba":"code","4b3f30eb":"code","f1573680":"code","66071709":"code","8d1f18a8":"code","21fb4fab":"code","17681034":"code","ee575cca":"code","079c12b5":"code","46c2076d":"code","fba936b5":"code","6f2a94ca":"code","619de0e2":"code","0219d462":"code","cc5b1c6d":"code","39abb833":"markdown","d4dff2be":"markdown","09b50826":"markdown","b94da88f":"markdown","2d9fc065":"markdown","390c8517":"markdown","53d3fe50":"markdown"},"source":{"4e1df8f7":"# data analyses and wrangling\nimport numpy as np\nimport pandas as pd\n\n# data visualisation\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.optimizers import RMSprop \n\n\nimport warnings\nwarnings.filterwarnings('ignore')","5e030752":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","5696bb7f":"train.head()","0a379f14":"train.info()","79a8761d":"X_train = train.drop(labels=['label'],axis=1)\ny_train = train['label']\n\n# free some space\ndel train","4c228009":"y_train.value_counts(sort=False)","ddadda26":"fig = plt.figure(figsize=(12,8))\nsns.countplot(y_train)\nplt.xlabel='label'\nplt.ylabel='count'\nplt.title='count of labels'","818dc6e3":"X_train.isnull().any().describe()","371dcaba":"X_train = X_train \/ 255.0\ntest = test \/ 255.0","4b3f30eb":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","f1573680":"y_train = to_categorical(y_train, num_classes=10)","66071709":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, y_train, test_size = 0.1, random_state=101)","8d1f18a8":"plt.imshow(X_train[0][:,:,0])","21fb4fab":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(filters=32, kernel_size=(5,5), padding='same', activation='relu', input_shape = (28,28,1) ),\n    tf.keras.layers.Conv2D(32, (5,5), padding='same', activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size=(2, 2)),\n    tf.keras.layers.Dropout(0.25),\n    \n    tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'),\n    tf.keras.layers.Conv2D(64, (3,3), padding='same', activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size=(2, 2), strides=(2,2)),\n    tf.keras.layers.Dropout(0.25),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(10, activation='softmax')\n    \n])","17681034":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","ee575cca":"model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","079c12b5":"learning_rate_reduction = ReduceLROnPlateau(\n    monitor='val_acc', \n    patience=3, \n    verbose=1, \n    factor=0.5, \n    min_lr=0.00001)","46c2076d":"epochs = 30 \nbatch_size = 86","fba936b5":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","6f2a94ca":"history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 1, steps_per_epoch=batch_size\n                              , callbacks=[learning_rate_reduction])","619de0e2":"model.summary()","0219d462":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","cc5b1c6d":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"my_cnn_mnist_datagen.csv\",index=False)","39abb833":"## Label encoding","d4dff2be":"## Load data","09b50826":"# Done!","b94da88f":"## Define the model","2d9fc065":"## Split training and valdiation set","390c8517":"## Normalization","53d3fe50":"## Reshape"}}