{"cell_type":{"297238e7":"code","cb5ea50d":"code","32297dce":"code","a48066f5":"code","390e4906":"code","221cdd67":"code","d270972d":"code","e6d8aacc":"code","5cace0fb":"code","85b63a5a":"code","7031aeae":"code","e406522f":"code","456512c2":"code","ba96c441":"code","d1211071":"code","8f303d61":"code","fcedce38":"code","24a37ccb":"code","fa5a8675":"code","252c4967":"code","30cc57d4":"code","e4a851e7":"code","a786aa32":"code","df9d5383":"code","70c1b90e":"code","91c9dab6":"code","05842a24":"code","89f8ac1b":"code","fa75aec1":"code","7f4c30f8":"code","97322631":"code","c2cbac17":"code","103ccd82":"code","980ec2b2":"code","aa1ca600":"markdown","a8722b03":"markdown","66b8bdf0":"markdown","73c76e22":"markdown","3553ed55":"markdown","f5d1b104":"markdown","299c02e7":"markdown","81f577f4":"markdown","28dba66f":"markdown","41086acf":"markdown","db467973":"markdown","3a1bfbe2":"markdown","f39077b8":"markdown","2921b2a0":"markdown"},"source":{"297238e7":"%%time\nimport tensorflow as tf\nimport pandas as pd\nimport numpy as np \nfrom keras_preprocessing.image import ImageDataGenerator\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nimport itertools \nimport matplotlib.pyplot as plt\n%matplotlib inline","cb5ea50d":"%%time\ntrain_dir = '..\/input\/dog-breed-identification\/train'\ntest_dir ='..\/input\/dog-breed-identification\/test'","32297dce":"def append_ext(fn):\n    return fn+\".jpg\"","a48066f5":"%%time\n# def append_ext(fn):\n#     return fn+\".jpg\"\ntraindf = pd.read_csv('..\/input\/dog-breed-identification\/labels.csv',dtype=str)\ntestdf = pd.read_csv('..\/input\/dog-breed-identification\/sample_submission.csv',dtype=str)\n\n","390e4906":"traindf[\"id\"] = traindf[\"id\"].apply(append_ext)\ntestdf[\"id\"] = testdf[\"id\"].apply(append_ext)","221cdd67":"included_breed = ['beagle', 'chihuahua', 'doberman',\n'french_bulldog', 'golden_retriever', 'malamute', 'pug', 'saint_bernard', 'scottish_deerhound',\n'tibetan_mastiff']\nfor index,breed in traindf.iterrows():\n    if breed[1] not in included_breed:\n        traindf= traindf.drop([index])\ntraindf.shape\n        ","d270972d":"traindf.head()","e6d8aacc":"testdf.head()","5cace0fb":"import os \nsrc_path = \"..\/input\/dog-breed-identification\/train\"\nsub_class = os.listdir(src_path)\n\nfig = plt.figure(figsize=(10,5))\nfor e in range(len(sub_class[:8])):\n    plt.subplot(2,4,e+1)\n    img = plt.imread(os.path.join(src_path,sub_class[e]))\n    plt.imshow(img, cmap=plt.get_cmap('gray'))\n    plt.axis('off')","85b63a5a":"%%time\ntrain_datagen=ImageDataGenerator( rescale=1.\/255.,\n                                  rotation_range = 20,\n                                  brightness_range=[0.2,1.0],\n                                  width_shift_range = 0.2,\n                                  height_shift_range = 0.2,\n                                  #shear_range = 0.2,\n                                  #zoom_range = [0.7,1],\n                                  horizontal_flip = True,\n                                  #Setting validation split to 2% \n                                  validation_split=0.1\n                                  )","7031aeae":"BATCH_SIZE = 32","e406522f":"image_size=(224,224)","456512c2":"train_generator=train_datagen.flow_from_dataframe(\ndataframe=traindf,\ndirectory=train_dir,\nx_col=\"id\",\ny_col=\"breed\",\nsubset=\"training\",\nbatch_size=BATCH_SIZE,\nseed=42,\nshuffle=True,\nclass_mode=\"categorical\",\ntarget_size=image_size,\ncolor_mode=\"rgb\" \n)","ba96c441":"x,y = next(train_generator)","d1211071":"print(type(x))\nprint(x.shape)\nprint(y.shape)","8f303d61":"def show_grid(image_list,nrows,ncols,figsize=(10,10),showaxis='off'):\n    \n    image_list = [image_list[i,:,:,:] for i in range(image_list.shape[0])]\n    fig = plt.figure(None, figsize,frameon=False)\n    grid = ImageGrid(fig, 111,  # similar to subplot(111)\n                     nrows_ncols=(nrows, ncols),  # creates 2x2 grid of axes\n                     axes_pad=0.3,  # pad between axes in inch.\n                     share_all=True,\n                     )\n    for i in range(nrows*ncols):\n        ax = grid[i]\n        ax.imshow(image_list[i],cmap='Greys_r')  # The AxesGrid object work as a list of axes.\n        ax.axis('off')\n        ","fcedce38":"%%time\nshow_grid(x,8,3,figsize=(25,25))\n","24a37ccb":"valid_generator=train_datagen.flow_from_dataframe(\ndataframe=traindf,\ndirectory=train_dir,\nx_col=\"id\",\ny_col=\"breed\",\nsubset=\"validation\",\nbatch_size=BATCH_SIZE,\nseed=42,\nshuffle=True,\nclass_mode=\"categorical\",\ntarget_size=image_size,\ncolor_mode=\"rgb\")\n","fa5a8675":"test_datagen=ImageDataGenerator(rescale=1.\/255.)\n\ntest_generator=test_datagen.flow_from_dataframe(\ndataframe=testdf,\ndirectory=test_dir,\nx_col=\"id\",\ny_col=None,\nbatch_size=BATCH_SIZE,\nseed=42,\nshuffle=False,\nclass_mode=None,\ntarget_size=image_size,\ncolor_mode=\"rgb\")","252c4967":"shape=(224,224,3)","30cc57d4":"classes = len(included_breed)\nclasses","e4a851e7":"pretrained_model = tf.keras.applications.ResNet50V2(\n        weights='imagenet',\n        include_top=False ,\n        input_shape=shape\n    )\n# pretrained_model.trainable = False\n    \nmodel = tf.keras.Sequential([ \n        pretrained_model,  \n        tf.keras.layers.Flatten(),\n#         tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(2048, activation='relu'),\n        tf.keras.layers.Dropout(0.5),\n#         tf.keras.layers.Dense(512, activation='relu'),\n#         tf.keras.layers.Dropout(0.5),\n#         tf.keras.layers.Dense(128, activation='relu'),\n#         tf.keras.layers.Dropout(0.4),\n        tf.keras.layers.Dense(256, activation='relu'),\n        tf.keras.layers.Dropout(0.5),\n        tf.keras.layers.Dense(64, activation='relu'),\n        tf.keras.layers.Dropout(0.3),\n    \n        tf.keras.layers.Dense(10, activation='softmax')\n    ])","a786aa32":"from keras import backend as K\n\ndef recall_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n    recall = true_positives \/ (possible_positives + K.epsilon())\n    return recall\n\ndef precision_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n    precision = true_positives \/ (predicted_positives + K.epsilon())\n    return precision\n\ndef f1_m(y_true, y_pred): \n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\n# compile the model\n\n# fit the model\n# history = model.fit(Xtrain, ytrain, validation_split=0.3, epochs=10, verbose=0)","df9d5383":"#opt = tf.keras.optimizers.Adam(learning_rate=0.001)\nopt=tf.keras.optimizers.Adam(lr=1e-4)\nmodel.compile(optimizer= opt , loss='categorical_crossentropy', metrics=['acc',f1_m,precision_m, recall_m])\n\n# model.compile(optimizer = opt ,\n#               loss=\"categorical_crossentropy\",\n#               metrics=[\"accuracy\"])\nmodel.summary()","70c1b90e":"# reduce = tf.keras.callbacks.ReduceLROnPlateau( monitor='val_loss',factor=0.2,patience=5, min_lr=0.001 )\n\n# early = tf.keras.callbacks.EarlyStopping( patience=2,\n#                                           min_delta=0.001,\n#                                           restore_best_weights=True)","91c9dab6":"STEP_SIZE_TRAIN = train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VALID = valid_generator.n\/\/valid_generator.batch_size\nhistory = model.fit(train_generator,\n                    steps_per_epoch=STEP_SIZE_TRAIN,\n                    validation_data=valid_generator,\n                    validation_steps=STEP_SIZE_VALID,\n                    epochs=10,\n#                     callbacks=[early],\n                   )","05842a24":"def display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('MODEL '+ title)\n    ax.set_ylabel(title)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","89f8ac1b":"display_training_curves(\n    history.history['loss'],\n    history.history['val_loss'],\n    'LOSS',\n    211,\n)\n\ndisplay_training_curves(\n    history.history['acc'],\n    history.history['val_acc'],\n    'ACCURACY',\n    212,\n)\n","fa75aec1":"loss, accuracy, f1_score, precision, recall = model.evaluate(valid_generator,batch_size=32)\n# score = model.evaluate(valid_generator,batch_size=32)\n# print(\"Accuracy: {:.2f}%\".format(score[1] * 100)) \n# print(\"Loss: \",score[0])\n\nprint(\"Loss:\", loss)\nprint(\"Accuracy:\", accuracy)\nprint(\"F1 Score:\", f1_score)\n\n","7f4c30f8":"model.save(\"DogClassificationByResNet2.h5\")","97322631":"%%time\npred=model.predict(test_generator)","c2cbac17":"df_submission = pd.read_csv('\/kaggle\/input\/dog-breed-identification\/sample_submission.csv', usecols= included_breed+['id'])\ndf_submission.head()\n","103ccd82":"df_submission.iloc[:,1:] = pred\ndf_submission.head()","980ec2b2":"%%time\ndf_submission.to_csv('Submission.csv')","aa1ca600":"\n# Fitting the Model:","a8722b03":"# Submission","66b8bdf0":"# Test id or Sample Submission","73c76e22":"# Training Labels","3553ed55":"# Predicting Test Images","f5d1b104":"# Validation Data","299c02e7":"# Early stopping","81f577f4":"# Plotting Augmented images","28dba66f":"# Loss and Accuracy Curves","41086acf":"# Test Data","db467973":"# Data preprocessing","3a1bfbe2":"# Pretrained model NASNetLarge","f39077b8":"# Training Images","2921b2a0":"# Accuracy"}}