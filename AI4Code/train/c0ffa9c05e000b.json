{"cell_type":{"0194b31a":"code","cda28248":"code","c410e9ca":"code","65a8b8a4":"code","5c0c4e33":"code","69aefb68":"code","55299365":"code","93ef27c3":"code","e49e8273":"code","eff58893":"code","d5774df5":"code","92b50be9":"code","50307f65":"code","db4669f8":"code","fe0a1ee9":"code","a8f27d29":"code","ee2b88c4":"code","095d9055":"code","6d9614c0":"code","479a5766":"code","11b1796c":"code","5bef6827":"code","8530cb1e":"code","e1093a9a":"code","89191f32":"code","34ee4b6e":"code","e057173e":"markdown","34f9a56f":"markdown","009833b5":"markdown","846393d7":"markdown","573a8608":"markdown","2746ff89":"markdown","b55a62c0":"markdown","84c96503":"markdown","9b34a24d":"markdown","627dbd89":"markdown","65b4a984":"markdown","4b5933be":"markdown","ea1f60f6":"markdown","6814e35b":"markdown","00e3ad9d":"markdown","63a68b0d":"markdown","e5a3f9d2":"markdown","939828c4":"markdown","c03121ed":"markdown","dac94bd0":"markdown","8c59be4a":"markdown","e777919a":"markdown","21827471":"markdown","555b7836":"markdown","826fa1d9":"markdown","c8ba3b4b":"markdown"},"source":{"0194b31a":"import os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom io import StringIO\n\n# folium for maps\nimport folium\nfrom folium import plugins\n\n# geopandas for operations on shape files\nimport geopandas as gpd\nfrom shapely.geometry import Polygon\nfrom pprint import pprint \n\n# plotly for other visuals\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly import tools\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True)\npd.options.display.max_columns = 999","cda28248":"os.listdir(\"..\/input\/data-science-for-good\/cpe-data\/\")","c410e9ca":"os.listdir(\"..\/input\/data-science-for-good\/cpe-data\/Dept_24-00013\")","65a8b8a4":"os.listdir(\"..\/input\/data-science-for-good\/cpe-data\/Dept_24-00013\/24-00013_ACS_data\/\")","5c0c4e33":"fname = \"..\/input\/data-science-for-good\/cpe-data\/Dept_24-00013\/24-00013_ACS_data\/24-00013_ACS_race-sex-age\/ACS_15_5YR_DP05_with_ann.csv\"\nacs_race_df = pd.read_csv(fname)\nacs_race_clean_df = acs_race_df.loc[1:,:].reset_index(drop=True)\n\nacs_race_clean_df[\"CT\"] = acs_race_clean_df[\"GEO.display-label\"].apply(lambda x: x.split(\"Tract \")[1].split(\",\")[0].strip())\n\nacs_race_df.head()","69aefb68":"force_df = pd.read_csv(\"..\/input\/data-science-for-good\/cpe-data\/Dept_24-00013\/24-00013_UOF_2008-2017_prepped.csv\")\nforce_clean_df = force_df.loc[1:,:].reset_index(drop=True)\nforce_df.head()","55299365":"fname = \"..\/input\/data-science-for-good\/cpe-data\/Dept_24-00013\/24-00013_Shapefiles\/Minneapolis_Police_Precincts.shp\"\npolice_df = gpd.read_file(fname)\npolice_df.head()","93ef27c3":"mapa = folium.Map([44.99, -93.27], height=500, zoom_start=11, tiles='Stamen Terrain')\nfolium.GeoJson(police_df).add_to(mapa)\nmapa","e49e8273":"mapa = folium.Map([44.99, -93.27], height=500, zoom_start=11, tiles='Stamen Terrain')\n\nfolium.GeoJson(police_df).add_to(mapa)\n\nlocations_df = force_clean_df[[\"LOCATION_LATITUDE\", \"LOCATION_LONGITUDE\"]].copy()\nnotna = locations_df[['LOCATION_LATITUDE','LOCATION_LONGITUDE']].dropna().index\nlocations_df = locations_df.iloc[notna].reset_index(drop=True)\nlocations_df[\"LOCATION_LATITUDE\"] = locations_df[\"LOCATION_LATITUDE\"].astype('float')\nlocations_df[\"LOCATION_LONGITUDE\"] = locations_df[\"LOCATION_LONGITUDE\"].astype('float')\nlocationlist = locations_df.values.tolist()[-2000:]\nfor point in range(0, len(locationlist)):\n    #folium.Marker(locationlist[point], popup=df_counters['Name'][point], icon=folium.Icon(color='darkblue', icon_color='white', icon='male', angle=0, prefix='fa')).add_to(marker_cluster)\n    folium.CircleMarker(locationlist[point], radius=0.1, color='red').add_to(mapa)\n\nmapa ","eff58893":"f, ax = plt.subplots(1, figsize=(10, 8))\npolice_df.plot(column=\"PRECINCT\", ax=ax, cmap='Accent',legend=True);\nplt.title(\"Districts : Minneapolis Police Precincts\")\nplt.show()","d5774df5":"fname = \"..\/input\/dsfg-cpe-acs-shape-files\/cb_2017_27_tract_500k\/cb_2017_27_tract_500k.shp\"\nacs_df = gpd.read_file(fname)\nacs_df = acs_df[acs_df[\"COUNTYFP\"]==\"053\"].reset_index()\nacs_df.head()","92b50be9":"mapa = folium.Map([45.04, -93.47], height=600, zoom_start=10, tiles='Stamen Terrain')\nfolium.GeoJson(acs_df).add_to(mapa)\nmapa","50307f65":"mapa = folium.Map([44.98, -93.27], height=500, zoom_start=13, tiles='Stamen Terrain')\nfolium.GeoJson(police_df.loc[0:0,:], style_function= lambda x:{'color':'red'}).add_to(mapa)\nmapa","db4669f8":"police_gdf = gpd.GeoDataFrame(police_df[\"geometry\"])\nacs_gdf = gpd.GeoDataFrame(acs_df[\"geometry\"])\n\nprint(\"Following Census Tracts are present in the Minneapolis Police District 1 : \")\nacs_police_df = []\nfor i in range(acs_gdf.shape[0]):\n    a = (police_gdf['geometry'][0]).intersection(acs_gdf['geometry'][i])\n    if a.area != 0:\n        print(\"CT :\", acs_df['NAME'][i], \" and the percentage of area is :\", (a.area \/ acs_gdf['geometry'][i].area)*100)\n        acs_police_df.append([acs_df['NAME'][i], (a.area \/ acs_gdf['geometry'][i].area)])\nacs_police_df = pd.DataFrame(acs_police_df)\nacs_police_df.columns = [\"NAME\", \"PercentageArea\"]","fe0a1ee9":"mapa = folium.Map([44.98, -93.27], height=500, zoom_start=13, tiles='Stamen Terrain')\nfolium.GeoJson(police_df.loc[0:0,:], style_function= lambda x:{'color':'red'}).add_to(mapa)\nfolium.GeoJson(acs_df[acs_df[\"NAME\"].isin(acs_police_df[\"NAME\"].values)], style_function= lambda x:{'color':'green'}).add_to(mapa)\nmapa","a8f27d29":"# pie chart based on population\nacs_police_race_df = acs_race_clean_df[acs_race_clean_df[\"CT\"].isin(acs_police_df[\"NAME\"].values)].reset_index(drop=True)\nacs_police_race_df = pd.merge(acs_police_race_df, acs_police_df, left_on=[\"CT\"], right_on=[\"NAME\"])\n\ncols_to_use = [\"HC01_VC49\", \"HC01_VC50\", \"HC01_VC51\", \"HC01_VC56\", \"HC01_VC69\"]\ncol_names = [\"White\", \"Black\", \"Native American\", \"Asian\", \"Other \/ Mixed Race\"]\ncolor_names = [\"LightGrey\", \"Black\", \"Red\", \"Orange\", \"Green\"]\n\nrace_count = []\nfor i, col in enumerate(cols_to_use):\n    race_count.append([col_names[i], np.round((acs_police_race_df[col].astype(float) * acs_police_race_df[\"PercentageArea\"]).sum())])\nrace_count_df = pd.DataFrame(race_count)\nrace_count_df.columns = [\"race\", \"count\"]\n\nlabels = (np.array(race_count_df[\"race\"].values))\ntemp_series = race_count_df[\"count\"]\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\n\ntrace0 = go.Pie(labels=labels, \n                values=sizes,\n                domain=dict(x=[0,0.48]),\n                marker=dict(\n                   colors=color_names\n               ),\n              )\n\n## Pie chart based on use of force\ntemp_series = force_clean_df[\"SUBJECT_RACE\"][force_clean_df[\"LOCATION_DISTRICT\"]==\"1\"].value_counts().head(5)\nlabels = (np.array(temp_series.index))\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\ncolor_map = {\"Black\":\"Black\", \"White\":\"LightGrey\", \"Other \/ Mixed Race\":\"Green\", \"Asian\":\"Orange\", \"Native American\":\"Red\"}\ncolor_names = []\nfor i in labels:\n    color_names.append(color_map[i])\n\ntrace1 = go.Pie(labels=labels, \n               values=sizes,\n                domain=dict(x=[0.52,1]),\n               marker=dict(\n                   colors=color_names\n               ),\n              )\nann1 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Census Population Distribution by Race ',\n            # Specify text position (place text in a hole of pie)\n            x=0.1,\n            y=1.1,\n            )\nann2 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Use of Force Distribution by Race',\n            # Specify text position (place text in a hole of pie)\n            x=0.9,\n            y=1.1,\n            )\nlayout = go.Layout(title ='Minneapolis Police District 1',\n                   annotations=[ann1,ann2],\n                   # Hide legend if you want\n                   #showlegend=False\n                   )\n\ndata = [trace0, trace1]\nfig = go.Figure(data=data,layout=layout)\n# Plot the plot and save the file in your Python script directory\niplot(fig, filename='subplot_pie_chart.html')\n\n","ee2b88c4":"police_gdf = gpd.GeoDataFrame(police_df[\"geometry\"])\nacs_gdf = gpd.GeoDataFrame(acs_df[\"geometry\"])\n\nPOLICE_DIST_ROW = 1\n\n#print(\"Following Census Tracts are present in the Minneapolis Police District 1 : \")\nacs_police_df = []\nfor i in range(acs_gdf.shape[0]):\n    a = (police_gdf['geometry'][POLICE_DIST_ROW]).intersection(acs_gdf['geometry'][i])\n    if a.area != 0:\n        #print(\"CT :\", acs_df['NAME'][i], \" and the percentage of area is :\", (a.area \/ acs_gdf['geometry'][i].area)*100)\n        acs_police_df.append([acs_df['NAME'][i], (a.area \/ acs_gdf['geometry'][i].area)])\nacs_police_df = pd.DataFrame(acs_police_df)\nacs_police_df.columns = [\"NAME\", \"PercentageArea\"]\n\nmapa = folium.Map([44.98, -93.27], height=500, zoom_start=12, tiles='Stamen Terrain')\nfolium.GeoJson(police_df.loc[POLICE_DIST_ROW:POLICE_DIST_ROW,:], style_function= lambda x:{'color':'red'}).add_to(mapa)\nfolium.GeoJson(acs_df[acs_df[\"NAME\"].isin(acs_police_df[\"NAME\"].values)], style_function= lambda x:{'color':'green'}).add_to(mapa)\nmapa","095d9055":"# pie chart based on population\nacs_police_race_df = acs_race_clean_df[acs_race_clean_df[\"CT\"].isin(acs_police_df[\"NAME\"].values)].reset_index(drop=True)\nacs_police_race_df = pd.merge(acs_police_race_df, acs_police_df, left_on=[\"CT\"], right_on=[\"NAME\"])\n\ncols_to_use = [\"HC01_VC49\", \"HC01_VC50\", \"HC01_VC51\", \"HC01_VC56\", \"HC01_VC69\"]\ncol_names = [\"White\", \"Black\", \"Native American\", \"Asian\", \"Other \/ Mixed Race\"]\ncolor_names = [\"LightGrey\", \"Black\", \"Red\", \"Orange\", \"Green\"]\n\nrace_count = []\nfor i, col in enumerate(cols_to_use):\n    race_count.append([col_names[i], np.round((acs_police_race_df[col].astype(float) * acs_police_race_df[\"PercentageArea\"]).sum())])\nrace_count_df = pd.DataFrame(race_count)\nrace_count_df.columns = [\"race\", \"count\"]\n\nlabels = (np.array(race_count_df[\"race\"].values))\ntemp_series = race_count_df[\"count\"]\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\n\ntrace0 = go.Pie(labels=labels, \n                values=sizes,\n                domain=dict(x=[0,0.48]),\n                marker=dict(\n                   colors=color_names\n               ),\n              )\n\n## Pie chart based on use of force\nPOLICE_DISTRICT = \"2\"\ntemp_series = force_clean_df[\"SUBJECT_RACE\"][force_clean_df[\"LOCATION_DISTRICT\"]==POLICE_DISTRICT].value_counts().head(5)\nlabels = (np.array(temp_series.index))\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\ncolor_map = {\"Black\":\"Black\", \"White\":\"LightGrey\", \"Other \/ Mixed Race\":\"Green\", \"Asian\":\"Orange\", \"Native American\":\"Red\"}\ncolor_names = []\nfor i in labels:\n    color_names.append(color_map[i])\n    \ntrace1 = go.Pie(labels=labels, \n               values=sizes,\n                domain=dict(x=[0.52,1]),\n               marker=dict(\n                   colors=color_names\n               ),\n              )\nann1 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Census Population Distribution by Race ',\n            # Specify text position (place text in a hole of pie)\n            x=0.1,\n            y=1.1,\n            )\nann2 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Use of Force Distribution by Race',\n            # Specify text position (place text in a hole of pie)\n            x=0.9,\n            y=1.1,\n            )\nlayout = go.Layout(title ='Minneapolis Police District '+POLICE_DISTRICT,\n                   annotations=[ann1,ann2],\n                   # Hide legend if you want\n                   #showlegend=False\n                   )\n\ndata = [trace0, trace1]\nfig = go.Figure(data=data,layout=layout)\n# Plot the plot and save the file in your Python script directory\niplot(fig, filename='subplot_pie_chart.html')\n","6d9614c0":"police_gdf = gpd.GeoDataFrame(police_df[\"geometry\"])\nacs_gdf = gpd.GeoDataFrame(acs_df[\"geometry\"])\n\nPOLICE_DIST_ROW = 2\n#print(\"Following Census Tracts are present in the Minneapolis Police District 1 : \")\nacs_police_df = []\nfor i in range(acs_gdf.shape[0]):\n    a = (police_gdf['geometry'][POLICE_DIST_ROW]).intersection(acs_gdf['geometry'][i])\n    if a.area != 0:\n        #print(\"CT :\", acs_df['NAME'][i], \" and the percentage of area is :\", (a.area \/ acs_gdf['geometry'][i].area)*100)\n        acs_police_df.append([acs_df['NAME'][i], (a.area \/ acs_gdf['geometry'][i].area)])\nacs_police_df = pd.DataFrame(acs_police_df)\nacs_police_df.columns = [\"NAME\", \"PercentageArea\"]\n\n# pie chart based on population\nacs_police_race_df = acs_race_clean_df[acs_race_clean_df[\"CT\"].isin(acs_police_df[\"NAME\"].values)].reset_index(drop=True)\nacs_police_race_df = pd.merge(acs_police_race_df, acs_police_df, left_on=[\"CT\"], right_on=[\"NAME\"])\n\ncols_to_use = [\"HC01_VC49\", \"HC01_VC50\", \"HC01_VC51\", \"HC01_VC56\", \"HC01_VC69\"]\ncol_names = [\"White\", \"Black\", \"Native American\", \"Asian\", \"Other \/ Mixed Race\"]\ncolor_names = [\"LightGrey\", \"Black\", \"Red\", \"Orange\", \"Green\"]\n\nrace_count = []\nfor i, col in enumerate(cols_to_use):\n    race_count.append([col_names[i], np.round((acs_police_race_df[col].astype(float) * acs_police_race_df[\"PercentageArea\"]).sum())])\nrace_count_df = pd.DataFrame(race_count)\nrace_count_df.columns = [\"race\", \"count\"]\n\nlabels = (np.array(race_count_df[\"race\"].values))\ntemp_series = race_count_df[\"count\"]\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\n\ntrace0 = go.Pie(labels=labels, \n                values=sizes,\n                domain=dict(x=[0,0.48]),\n                marker=dict(\n                   colors=color_names\n               ),\n              )\n\n## Pie chart based on use of force\nPOLICE_DISTRICT = \"3\"\ntemp_series = force_clean_df[\"SUBJECT_RACE\"][force_clean_df[\"LOCATION_DISTRICT\"]==POLICE_DISTRICT].value_counts().head(5)\nlabels = (np.array(temp_series.index))\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\ncolor_map = {\"Black\":\"Black\", \"White\":\"LightGrey\", \"Other \/ Mixed Race\":\"Green\", \"Asian\":\"Orange\", \n             \"Native American\":\"Red\", \"not recorded\":\"blue\"}\ncolor_names = []\nfor i in labels:\n    color_names.append(color_map[i])\n    \ntrace1 = go.Pie(labels=labels, \n               values=sizes,\n                domain=dict(x=[0.52,1]),\n               marker=dict(\n                   colors=color_names\n               ),\n              )\nann1 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Census Population Distribution by Race ',\n            # Specify text position (place text in a hole of pie)\n            x=0.1,\n            y=1.1,\n            )\nann2 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Use of Force Distribution by Race',\n            # Specify text position (place text in a hole of pie)\n            x=0.9,\n            y=1.1,\n            )\nlayout = go.Layout(title ='Minneapolis Police District '+POLICE_DISTRICT,\n                   annotations=[ann1,ann2],\n                   # Hide legend if you want\n                   #showlegend=False\n                   )\n\ndata = [trace0, trace1]\nfig = go.Figure(data=data,layout=layout)\n# Plot the plot and save the file in your Python script directory\niplot(fig, filename='subplot_pie_chart.html')","479a5766":"police_gdf = gpd.GeoDataFrame(police_df[\"geometry\"])\nacs_gdf = gpd.GeoDataFrame(acs_df[\"geometry\"])\n\nPOLICE_DIST_ROW = 3\n#print(\"Following Census Tracts are present in the Minneapolis Police District 1 : \")\nacs_police_df = []\nfor i in range(acs_gdf.shape[0]):\n    a = (police_gdf['geometry'][POLICE_DIST_ROW]).intersection(acs_gdf['geometry'][i])\n    if a.area != 0:\n        #print(\"CT :\", acs_df['NAME'][i], \" and the percentage of area is :\", (a.area \/ acs_gdf['geometry'][i].area)*100)\n        acs_police_df.append([acs_df['NAME'][i], (a.area \/ acs_gdf['geometry'][i].area)])\nacs_police_df = pd.DataFrame(acs_police_df)\nacs_police_df.columns = [\"NAME\", \"PercentageArea\"]\n\n# pie chart based on population\nacs_police_race_df = acs_race_clean_df[acs_race_clean_df[\"CT\"].isin(acs_police_df[\"NAME\"].values)].reset_index(drop=True)\nacs_police_race_df = pd.merge(acs_police_race_df, acs_police_df, left_on=[\"CT\"], right_on=[\"NAME\"])\n\ncols_to_use = [\"HC01_VC49\", \"HC01_VC50\", \"HC01_VC51\", \"HC01_VC56\", \"HC01_VC69\"]\ncol_names = [\"White\", \"Black\", \"Native American\", \"Asian\", \"Other \/ Mixed Race\"]\ncolor_names = [\"LightGrey\", \"Black\", \"Red\", \"Orange\", \"Green\"]\n\nrace_count = []\nfor i, col in enumerate(cols_to_use):\n    race_count.append([col_names[i], np.round((acs_police_race_df[col].astype(float) * acs_police_race_df[\"PercentageArea\"]).sum())])\nrace_count_df = pd.DataFrame(race_count)\nrace_count_df.columns = [\"race\", \"count\"]\n\nlabels = (np.array(race_count_df[\"race\"].values))\ntemp_series = race_count_df[\"count\"]\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\n\ntrace0 = go.Pie(labels=labels, \n                values=sizes,\n                domain=dict(x=[0,0.48]),\n                marker=dict(\n                   colors=color_names\n               ),\n              )\n\n## Pie chart based on use of force\nPOLICE_DISTRICT = \"4\"\ntemp_series = force_clean_df[\"SUBJECT_RACE\"][force_clean_df[\"LOCATION_DISTRICT\"]==POLICE_DISTRICT].value_counts().head(5)\nlabels = (np.array(temp_series.index))\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\ncolor_map = {\"Black\":\"Black\", \"White\":\"LightGrey\", \"Other \/ Mixed Race\":\"Green\", \"Asian\":\"Orange\", \n             \"Native American\":\"Red\", \"not recorded\":\"blue\"}\ncolor_names = []\nfor i in labels:\n    color_names.append(color_map[i])\n    \ntrace1 = go.Pie(labels=labels, \n               values=sizes,\n                domain=dict(x=[0.52,1]),\n               marker=dict(\n                   colors=color_names\n               ),\n              )\nann1 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Census Population Distribution by Race ',\n            # Specify text position (place text in a hole of pie)\n            x=0.1,\n            y=1.1,\n            )\nann2 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Use of Force Distribution by Race',\n            # Specify text position (place text in a hole of pie)\n            x=0.9,\n            y=1.1,\n            )\nlayout = go.Layout(title ='Minneapolis Police District '+POLICE_DISTRICT,\n                   annotations=[ann1,ann2],\n                   # Hide legend if you want\n                   #showlegend=False\n                   )\n\ndata = [trace0, trace1]\nfig = go.Figure(data=data,layout=layout)\n# Plot the plot and save the file in your Python script directory\niplot(fig, filename='subplot_pie_chart.html')","11b1796c":"police_gdf = gpd.GeoDataFrame(police_df[\"geometry\"])\nacs_gdf = gpd.GeoDataFrame(acs_df[\"geometry\"])\n\nPOLICE_DIST_ROW = 4\n#print(\"Following Census Tracts are present in the Minneapolis Police District 1 : \")\nacs_police_df = []\nfor i in range(acs_gdf.shape[0]):\n    a = (police_gdf['geometry'][POLICE_DIST_ROW]).intersection(acs_gdf['geometry'][i])\n    if a.area != 0:\n        #print(\"CT :\", acs_df['NAME'][i], \" and the percentage of area is :\", (a.area \/ acs_gdf['geometry'][i].area)*100)\n        acs_police_df.append([acs_df['NAME'][i], (a.area \/ acs_gdf['geometry'][i].area)])\nacs_police_df = pd.DataFrame(acs_police_df)\nacs_police_df.columns = [\"NAME\", \"PercentageArea\"]\n\n# pie chart based on population\nacs_police_race_df = acs_race_clean_df[acs_race_clean_df[\"CT\"].isin(acs_police_df[\"NAME\"].values)].reset_index(drop=True)\nacs_police_race_df = pd.merge(acs_police_race_df, acs_police_df, left_on=[\"CT\"], right_on=[\"NAME\"])\n\ncols_to_use = [\"HC01_VC49\", \"HC01_VC50\", \"HC01_VC51\", \"HC01_VC56\", \"HC01_VC69\"]\ncol_names = [\"White\", \"Black\", \"Native American\", \"Asian\", \"Other \/ Mixed Race\"]\ncolor_names = [\"LightGrey\", \"Black\", \"Red\", \"Orange\", \"Green\"]\n\nrace_count = []\nfor i, col in enumerate(cols_to_use):\n    race_count.append([col_names[i], np.round((acs_police_race_df[col].astype(float) * acs_police_race_df[\"PercentageArea\"]).sum())])\nrace_count_df = pd.DataFrame(race_count)\nrace_count_df.columns = [\"race\", \"count\"]\n\nlabels = (np.array(race_count_df[\"race\"].values))\ntemp_series = race_count_df[\"count\"]\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\n\ntrace0 = go.Pie(labels=labels, \n                values=sizes,\n                domain=dict(x=[0,0.48]),\n                marker=dict(\n                   colors=color_names\n               ),\n              )\n\n## Pie chart based on use of force\nPOLICE_DISTRICT = \"5\"\ntemp_series = force_clean_df[\"SUBJECT_RACE\"][force_clean_df[\"LOCATION_DISTRICT\"]==POLICE_DISTRICT].value_counts().head(5)\nlabels = (np.array(temp_series.index))\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\ncolor_map = {\"Black\":\"Black\", \"White\":\"LightGrey\", \"Other \/ Mixed Race\":\"Green\", \"Asian\":\"Orange\", \n             \"Native American\":\"Red\", \"not recorded\":\"blue\"}\ncolor_names = []\nfor i in labels:\n    color_names.append(color_map[i])\n    \ntrace1 = go.Pie(labels=labels, \n               values=sizes,\n                domain=dict(x=[0.52,1]),\n               marker=dict(\n                   colors=color_names\n               ),\n              )\nann1 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Census Population Distribution by Race ',\n            # Specify text position (place text in a hole of pie)\n            x=0.1,\n            y=1.1,\n            )\nann2 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Use of Force Distribution by Race',\n            # Specify text position (place text in a hole of pie)\n            x=0.9,\n            y=1.1,\n            )\nlayout = go.Layout(title ='Minneapolis Police District '+POLICE_DISTRICT,\n                   annotations=[ann1,ann2],\n                   # Hide legend if you want\n                   #showlegend=False\n                   )\n\ndata = [trace0, trace1]\nfig = go.Figure(data=data,layout=layout)\n# Plot the plot and save the file in your Python script directory\niplot(fig, filename='subplot_pie_chart.html')","5bef6827":"os.listdir(\"..\/input\/data-science-for-good\/cpe-data\/Dept_24-00098\/\")","8530cb1e":"### American community survey data\nfname = \"..\/input\/data-science-for-good\/cpe-data\/Dept_24-00098\/24-00098_ACS_data\/24-00098_ACS_race-sex-age\/ACS_15_5YR_DP05_with_ann.csv\"\nacs_race_df = pd.read_csv(fname)\nacs_race_clean_df = acs_race_df.loc[1:,:].reset_index(drop=True)\nacs_race_clean_df[\"CT\"] = acs_race_clean_df[\"GEO.display-label\"].apply(lambda x: x.split(\"Tract \")[1].split(\",\")[0].strip())\n\nforce_df = pd.read_csv(\"..\/input\/data-science-for-good\/cpe-data\/Dept_24-00098\/24-00098_Vehicle-Stops-data.csv\")\nforce_clean_df = force_df.loc[1:,:].reset_index(drop=True)\n\nfname = \"..\/input\/data-science-for-good\/cpe-data\/Dept_24-00098\/24-00098_Shapefiles\/StPaul_geo_export_6646246d-0f26-48c5-a924-f5a99bb51c47.shp\"\npolice_df = gpd.read_file(fname)\n\n#-93.18, 44.95\nmapa = folium.Map([44.99, -93.08], height=500, zoom_start=11, tiles='Stamen Toner')\nfolium.GeoJson(police_df).add_to(mapa)\nmapa","e1093a9a":"fname = \"..\/input\/dsfg-cpe-acs-shape-files\/cb_2017_27_tract_500k\/cb_2017_27_tract_500k.shp\"\nacs_df = gpd.read_file(fname)\nacs_df = acs_df[acs_df[\"COUNTYFP\"]==\"123\"].reset_index()\nacs_df.head()\n\nmapa = folium.Map([44.99, -93.08], height=600, zoom_start=11, tiles='Stamen Toner')\nfolium.GeoJson(acs_df).add_to(mapa)\nmapa","89191f32":"### Config ###\npolice_area_column = \"gridnum\"\npolice_area_value = \"1\"\npolice_shp_column = \"geometry\"\n\npolice_district = \"1\"","34ee4b6e":"police_gdf = gpd.GeoDataFrame(police_df[police_shp_column])\nacs_gdf = gpd.GeoDataFrame(acs_df[\"geometry\"])\n\n#print(\"Following Census Tracts are present in the Minneapolis Police District 1 : \")\nacs_police_df = []\nfor i in range(acs_gdf.shape[0]):\n    a = (police_gdf[police_shp_column][police_df[police_area_column]==police_area_value].iloc[0]).intersection(acs_gdf['geometry'][i])\n    if a.area != 0:\n        #print(\"CT :\", acs_df['NAME'][i], \" and the percentage of area is :\", (a.area \/ acs_gdf['geometry'][i].area)*100)\n        acs_police_df.append([acs_df['NAME'][i], (a.area \/ acs_gdf['geometry'][i].area)])\nacs_police_df = pd.DataFrame(acs_police_df)\nacs_police_df.columns = [\"NAME\", \"PercentageArea\"]\n\n# pie chart based on population\nacs_police_race_df = acs_race_clean_df[acs_race_clean_df[\"CT\"].isin(acs_police_df[\"NAME\"].values)].reset_index(drop=True)\nacs_police_race_df = pd.merge(acs_police_race_df, acs_police_df, left_on=[\"CT\"], right_on=[\"NAME\"])\n\ncols_to_use = [\"HC01_VC49\", \"HC01_VC50\", \"HC01_VC51\", \"HC01_VC56\", \"HC01_VC69\"]\ncol_names = [\"White\", \"Black\", \"Native American\", \"Asian\", \"Other \/ Mixed Race\"]\ncolor_names = [\"LightGrey\", \"Black\", \"Red\", \"Orange\", \"Green\"]\n\nrace_count = []\nfor i, col in enumerate(cols_to_use):\n    race_count.append([col_names[i], np.round((acs_police_race_df[col].astype(float) * acs_police_race_df[\"PercentageArea\"]).sum())])\nrace_count_df = pd.DataFrame(race_count)\nrace_count_df.columns = [\"race\", \"count\"]\n\nlabels = (np.array(race_count_df[\"race\"].values))\ntemp_series = race_count_df[\"count\"]\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\n\ntrace0 = go.Pie(labels=labels, \n                values=sizes,\n                domain=dict(x=[0,0.48]),\n                marker=dict(\n                   colors=color_names\n               ),\n              )\n\n## Pie chart based on use of force\ntemp_series = force_clean_df[\"SUBJECT_RACE\"][force_clean_df[\"LOCATION_DISTRICT\"]==police_district].value_counts().head(5)\nlabels = (np.array(temp_series.index))\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\ncolor_map = {\"Black\":\"Black\", \"White\":\"LightGrey\", \"Other \/ Mixed Race\":\"Green\", \"Asian\":\"Orange\", \n             \"Native American\":\"Red\", \"not recorded\":\"blue\", \"Latino\":\"green\", \"No Data\":\"yellow\"}\ncolor_names = []\nfor i in labels:\n    color_names.append(color_map[i])\n    \ntrace1 = go.Pie(labels=labels, \n               values=sizes,\n                domain=dict(x=[0.52,1]),\n               marker=dict(\n                   colors=color_names\n               ),\n              )\nann1 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Census Population Distribution by Race ',\n            # Specify text position (place text in a hole of pie)\n            x=0.1,\n            y=1.1,\n            )\nann2 = dict(font=dict(size=12),\n            showarrow=False,\n            text='Use of Force Distribution by Race',\n            # Specify text position (place text in a hole of pie)\n            x=0.9,\n            y=1.1,\n            )\nlayout = go.Layout(title ='St Paul Police District '+police_district,\n                   annotations=[ann1,ann2],\n                   # Hide legend if you want\n                   #showlegend=False\n                   )\n\ndata = [trace0, trace1]\nfig = go.Figure(data=data,layout=layout)\n# Plot the plot and save the file in your Python script directory\niplot(fig, filename='subplot_pie_chart.html')\n","e057173e":"Let us now overlay the police district 1 with the census tracts we got from last step and plot it in the map.","34f9a56f":"Now let us use the ACS shape files and get the census tracts and the percentage of area in each census tracts that come under the police district 1.","009833b5":"### Minneapolis Police District 2\n\n####  Census & Police Shape files intersection plot","846393d7":"**References:**\n\nA big shoutout to the following kernels \/ links which helped me get started with the GIS data exploration \/ this dataset.\n\n1. https:\/\/www.kaggle.com\/shivamb\/hunting-for-insights-geo-maps\n2. https:\/\/georgetsilva.github.io\/posts\/mapping-points-with-folium\/\n3. https:\/\/www.kaggle.com\/dsholes\/confused-start-here\n4. https:\/\/www.kaggle.com\/crawford\/another-world-famous-starter-kernel-by-chris","573a8608":"#### St. Paul Police Shape file plot","2746ff89":"### St. Paul Police - Ramsey County - Minnesota:\n\nThe files for the Ramsey county is present in the folder `Dept_24-00098`","b55a62c0":"Each of these directories include data associated with specific police departments. \n\nFor each police department there are two sub-directories for shape files and demographic data. Some departments also include police activity (use of force) CSV files. An example structure from one of the directories can be seen below.\n\n```\nExample:\nDept_37-00027\n    |- Dept_37-00027_Shapefiles\n    |- Dept_37-00027_ACS_data (American Community Survey Data)\n    |- 37-00027_UOF-P_2014-2016_prepped.csv (use of force)\n```\n\nIf you are wondering what a shape file is, then [this link](https:\/\/doc.arcgis.com\/en\/arcgis-online\/reference\/shapefiles.htm) can help you get started. Shivam has a detailed [discussion post](https:\/\/www.kaggle.com\/center-for-policing-equity\/data-science-for-good\/discussion\/67776) on various types of file formats included in shape files.  \n\nSo ideally each directory will have three files\n* One sub-directory with the police department shape files\n* One sub-directory with American Community Survey Data\n* One file containing police incident data\n\n\n## Minneapolis Police\n\nTo start with, let us explore the dataset of Minneapolis police. It is present in the folder `Dept_24-00013`. We are expecting three folders \/ files - one for ACS, one for use of force and one for police department shape files. Let us confirm the same.\n\n","84c96503":"## Dataset Description\n\nBefore even going into the analysis part, let us first look at the datasets provided and understand the same.","9b34a24d":"As we can see, the census folder consists of the following information\n * Education attainment\n * Education attainment over age 25\n * Income\n * Employment\n * Poverty\n * Race - Sex - Age\n * Owner occupied housing\n\nLet us look at the top few lines of the Race - Sex - Age file - `24-00013_ACS_race-sex-age` to get an undersstanding.","627dbd89":"As we can see, minneapolis data comes under the Hennepin county of Minnesota state. \n\nACS survey is generally done at census tract level and so here each row has information for each census tract like race, age and sex information. From Wiki, we can see that census tract is a geographic region defined for the purpose of taking a census.\n\nThe below diagram from ACS website gives a much more clear picture about a Census Tract.\n\n![ACS level](https:\/\/www.census.gov\/content\/census\/en\/programs-surveys\/acs\/geography-acs\/concepts-definitions\/jcr:content\/par\/expandablelist\/section_1\/image.img.576.medium.png\/1443049671759.png)\n\n** Use of Force Data:**\n\nFrom [Use of force wiki page](https:\/\/en.wikipedia.org\/wiki\/Use_of_force) - The use of force, in the context of law enforcement, may be defined as the \"amount of effort required by police to compel compliance by an unwilling subject\" \n\nNow let us look at the top few rows of Use of Force data of Minneapolis department","65b4a984":"Use of force dataset has details about latitude, longitude of the incident along with date, time and type of force used.\n\n\n**Minneapolis Police Precincts \/ Districts Shape files:**\n\nNow let us look the top few rows of the shape file of Minneapolis Police Precincts.","4b5933be":"## Competition Objective:\n![CPE](https:\/\/storage.googleapis.com\/kaggle-organizations\/1964\/thumbnail.png?r=654)\n\nThe Center for Policing Equity (CPE) is research scientists, race and equity experts, data virtuosos, and community trainers working together to build more fair and just systems. CPE look for factors that drive racial disparities in policing by analyzing census and police department deployment data. The ultimate goal is to inform police agencies where they can make improvements by identifying deployment areas where racial disparities exist and are not explainable by crime rates and poverty levels.\n\nI would like to thank CPE for making this data available for us to analyze and get some insights. \n\n## Objective of the Notebook:\n\nWe are given information about use of force data, police department data and census-level data of different socioeconomic factors. We are given both csv files and shape files. Shapefiles are unusual and messy -- which makes it difficult to, for instance, generate maps of police behavior with precinct boundary layers mixed with census layers.\n\nSo in this notebook, let us try to combine the shape files from police precinct data and from census data to make it more comparable. We will also make some visual plots along the way and make some inferences on the way.","ea1f60f6":"** ACS shape files:**\n\nNow to combine the Police precincts data with the survey data, we need the geographical information of each of the census tracts as they can be different from the police districts.\n\nThankfully, we can download the shape files for each of the census tracts from the ACS website using this [link](https:\/\/www.census.gov\/geo\/maps-data\/data\/cbf\/cbf_tracts.html).\n\nI have uploaded some of them into a Kaggle dataset which can be accessed [here](https:\/\/www.kaggle.com\/sudalairajkumar\/dsfg-cpe-acs-shape-files)\n\nLet us read the shape file of Minnesota state and filter the Hennepin county from the same. The top few rows are:  ","6814e35b":"We can also plot the geopandas dataframe as such without using folium maps. It will give the polygons alone.","00e3ad9d":"#### ACS community survey shape file plot","63a68b0d":"As we can see there are 5 police precincts in Minneapolis.\n\nNow let us also plot the co-ordinates from \"Use of force\" data on top of police districts. Since the number of rows are huge for folium plot, let us plot only the recent 2000 incidents on the map. ","e5a3f9d2":"As we can see, the shape file from the police department and the shape file from the ACS survey does not cover the exact same locations.  Infact, the survey shape file location seem to be a super set of the police district data. So we need only those census tracts which are present in each of the police precincts.\n\n### Combining Police & Census Shape files:\n\nTo take an example, say police district 1 has 100% of Census Tract 1 (CT1) and 50% of CT2 and 25% of CT3. And if there are 100 people of Race A in each of these CTs, then we need to do the following computation to get the overall number of people of Race A in the police district \n```\n= 1.*100 (for CT1) + 0.5*100 (for CT2) + 0.25*100 (for CT3)\n= 100 + 50 + 25\n= 175\n```\n\n### Minneapolis Police District 1:\nFor simplicity, let us just conecntrate on Police district 1 of Minneapolis data and get this done. ","939828c4":"**American Community Survey Data of Minneapolis**:\n\nFirst let us have a look at the type of files present inside the survey folder. ","c03121ed":"### Minneapolis District 4","dac94bd0":"The below are the input features we need to give to analyze a given police district data.\n\nThe column name of the police district should be variable `police_area_column`. we also need to specify the name of the police district in variable `police_area_value`\n\nWe also need to specify the name of the column having shape information in `police_shp_column`. The police district which we are interested in should be specified at `police_district`\n","8c59be4a":"Now let us plot them in the map and see the same.","e777919a":"### Minneapolis District 5","21827471":"### Minneapolis District 3","555b7836":"`NAME` column is the census tract id and this can be used to combine this with the ACS survey data we have.\n\nNow let us plot them on a map and see.","826fa1d9":"### Conclusion & Next steps:\n * This gives an example of how we can combine the police shape files with ACS shape files to figure out the racial disparity\n * We could also similar analysis on other disparities like gender, education etc\n * We could extend the above code base for other police districts as well.","c8ba3b4b":"\nThis is cool.! Now we can get the census information from these places and based on the percentage area covered, we can multiply the census values with percentage covered to get the numbers. (Not an accurate method, but some approximation is better than nothing)\n\nNow let us get the number of people based on race in this police district and also the 'use of force' distribution by race in this police dsitrict and plot the same. "}}