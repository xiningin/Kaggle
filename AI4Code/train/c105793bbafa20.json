{"cell_type":{"64f4e41b":"code","ecf16952":"code","998be3ed":"code","ba8a68d2":"code","7b04b146":"code","90fb5096":"code","74d890d0":"code","87850ff4":"code","b73ec96b":"code","9a1fae4a":"code","345e9320":"code","77bb0575":"code","631ffedc":"code","2b1c3ef7":"code","8c13c3d4":"code","d3b18732":"code","553913b0":"code","c93942f3":"code","f0e87c1f":"code","e3d4b65e":"code","1f6638ba":"code","5741c5a2":"code","863ed21f":"code","41589dfb":"code","ab59f9ec":"code","11bcc65d":"code","9b5576e9":"code","42d2db2a":"code","0badcdda":"code","7a519d54":"code","9f7eda65":"code","34496dfa":"code","dced7a39":"code","08a10f73":"code","65a8f066":"code","193cad07":"code","6200c3dc":"code","c0c85b4e":"code","34078377":"code","09982950":"code","ea860024":"code","99dc77cf":"code","cd9877ca":"code","c97cf88c":"code","92ab8ee8":"code","20a03d59":"code","bd98c6b4":"markdown","669eee7f":"markdown","857840d5":"markdown","d3948838":"markdown","7407bf3d":"markdown","25fd67a8":"markdown","8f7cf708":"markdown","dc30e021":"markdown","a5e8da19":"markdown","104031d1":"markdown","9eb89955":"markdown","878b150d":"markdown","c1785686":"markdown","0deed96d":"markdown","26d50b94":"markdown","e4477665":"markdown","5d6858c3":"markdown","73d8e30c":"markdown","949c96a6":"markdown","71347bc3":"markdown","892268a8":"markdown","73ba5974":"markdown","147950c5":"markdown","08053ed4":"markdown","3f7dd195":"markdown","0cbceceb":"markdown","c268bd7c":"markdown","1a39d40f":"markdown","44796f52":"markdown","f81f7a4f":"markdown","ad64afbc":"markdown","aa96b09b":"markdown","2095ccad":"markdown","584141b5":"markdown","b786511d":"markdown"},"source":{"64f4e41b":"# Uncomment and run the commands below if imports fail\n# !conda install numpy pytorch torchvision cpuonly -c pytorch -y\n# !pip install matplotlib --upgrade --quiet\n!pip install jovian --upgrade --quiet","ecf16952":"import torch\nimport jovian\nimport torchvision\nimport torch.nn as nn\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport torch.nn.functional as F\nfrom torchvision.datasets.utils import download_url\nfrom torch.utils.data import DataLoader, TensorDataset, random_split","998be3ed":"project_name='02-insurance-linear-regression' # will be used by jovian.commit","ba8a68d2":"DATASET_URL = \"https:\/\/hub.jovian.ml\/wp-content\/uploads\/2020\/05\/insurance.csv\"\nDATA_FILENAME = \"insurance.csv\"\ndownload_url(DATASET_URL, '.')","7b04b146":"dataframe_raw = pd.read_csv(DATA_FILENAME)\ndataframe_raw.head()","90fb5096":"your_name = \"Misa Krug\" # at least 5 characters","74d890d0":"def customize_dataset(dataframe_raw, rand_str):\n    dataframe = dataframe_raw.copy(deep=True)\n    # drop some rows\n    dataframe = dataframe.sample(int(0.95*len(dataframe)), random_state=int(ord(rand_str[0])))\n    # scale input\n    dataframe.bmi = dataframe.bmi * ord(rand_str[1])\/100.\n    # scale target\n    dataframe.charges = dataframe.charges * ord(rand_str[2])\/100.\n    # drop column\n    if ord(rand_str[3]) % 2 == 1:\n        dataframe = dataframe.drop(['region'], axis=1)\n    return dataframe","87850ff4":"dataframe = customize_dataset(dataframe_raw, your_name)\ndataframe.head()","b73ec96b":"num_rows = dataframe.shape[0]\nprint(num_rows)","9a1fae4a":"num_cols = dataframe.shape[1]\nprint(num_cols)","345e9320":"input_cols = list(dataframe.columns.values)","77bb0575":"categorical_cols = dataframe.select_dtypes('object').columns.to_list()","631ffedc":"output_cols = [dataframe.columns[5]]","2b1c3ef7":"# Write your answer here\nprint(dataframe['charges'].min())\nprint(dataframe['charges'].max())","8c13c3d4":"jovian.commit(project=project_name, environment=None)","d3b18732":"def dataframe_to_arrays(dataframe):\n    # Make a copy of the original dataframe\n    dataframe1 = dataframe.copy(deep=True)\n    # Convert non-numeric categorical columns to numbers\n    for col in categorical_cols:\n        dataframe1[col] = dataframe1[col].astype('category').cat.codes\n    # Extract input & outupts as numpy arrays\n    inputs_array = dataframe1[input_cols].to_numpy()\n    targets_array = dataframe1[output_cols].to_numpy()\n    return inputs_array, targets_array","553913b0":"inputs_array, targets_array = dataframe_to_arrays(dataframe)\ninputs_array, targets_array","c93942f3":"def dataframe_to_arrays(dataframe):\n    # Make a copy of the original dataframe\n    dataframe1 = dataframe.copy(deep=True)\n    # Convert non-numeric categorical columns to numbers\n    for col in categorical_cols:\n        dataframe1[col] = dataframe1[col].astype('category').cat.codes\n    # Extract input & outupts as numpy arrays\n    inputs_array = dataframe1[input_cols].to_numpy()\n    targets_array = dataframe1[output_cols].to_numpy()\n    return inputs_array, targets_array","f0e87c1f":"inputs = torch.from_numpy(inputs_array).type(torch.float32)\ntargets = torch.from_numpy(targets_array).type(torch.float32)","e3d4b65e":"inputs.dtype, targets.dtype","1f6638ba":"dataset = TensorDataset(inputs, targets)","5741c5a2":"val_percent = 0.2 # between 0.1 and 0.2\nval_size = int(num_rows * val_percent)\ntrain_size = num_rows - val_size\n\n\ntrain_ds, val_ds = random_split(dataset, [train_size, val_size]) # Use the random_split function to split dataset into 2 parts of the desired length","863ed21f":"batch_size = 35","41589dfb":"train_loader = DataLoader(train_ds, batch_size, shuffle=True)\nval_loader = DataLoader(val_ds, batch_size)","ab59f9ec":"for xb, yb in train_loader:\n    print(\"inputs:\", xb)\n    print(\"targets:\", yb)\n    break","11bcc65d":"jovian.commit(project=project_name, environment=None)","9b5576e9":"input_size = len(input_cols)\noutput_size = len(output_cols)","42d2db2a":"class InsuranceModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.linear = nn.Linear(input_size, output_size)                  # fill this (hint: use input_size & output_size defined above)\n        \n    def forward(self, xb):\n        out = self.linear(xb)                          # fill this\n        return out\n    \n    def training_step(self, batch):\n        inputs, targets = batch \n        # Generate predictions\n        out = self(inputs)          \n        # Calcuate loss\n        loss = F.l1_loss(out, targets)                           # fill this\n        return loss\n    \n    def validation_step(self, batch):\n        inputs, targets = batch\n        # Generate predictions\n        out = self(inputs)\n        # Calculate loss\n        loss = F.l1_loss(out, targets)                           # fill this    \n        return {'val_loss': loss.detach()}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        return {'val_loss': epoch_loss.item()}\n    \n    def epoch_end(self, epoch, result, num_epochs):\n        # Print result every 20th epoch\n        if (epoch+1) % 20 == 0 or epoch == num_epochs-1:\n            print(\"Epoch [{}], val_loss: {:.4f}\".format(epoch+1, result['val_loss']))","0badcdda":"model = InsuranceModel()","7a519d54":"list(model.parameters())","9f7eda65":"jovian.commit(project=project_name, environment=None)","34496dfa":"def evaluate(model, val_loader):\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        for batch in train_loader:\n            loss = model.training_step(batch)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        model.epoch_end(epoch, result, epochs)\n        history.append(result)\n    return history","dced7a39":"result = evaluate(model, val_loader) # Use the the evaluate functi\nprint(result)","08a10f73":"epochs = 1000\nlr =  1e-2\nhistory1 = fit(epochs, lr, model, train_loader, val_loader)","65a8f066":"epochs = 1000\nlr = 1e-3\nhistory2 = fit(epochs, lr, model, train_loader, val_loader)","193cad07":"epochs = 150\nlr = 1e-4\nhistory3 = fit(epochs, lr, model, train_loader, val_loader)","6200c3dc":"epochs = 200\nlr = 1e-5\nhistory4 = fit(epochs, lr, model, train_loader, val_loader)","c0c85b4e":"epochs = 250\nlr = 1e-6\nhistory5 = fit(epochs, lr, model, train_loader, val_loader)","34078377":"val_loss = [result] + history1 + history2 + history3 + history4 + history5","09982950":"jovian.log_metrics(val_loss=val_loss)","ea860024":"jovian.commit(project=project_name, environment=None)","99dc77cf":"def predict_single(input, target, model):\n    inputs = input.unsqueeze(0)\n    predictions = model(inputs)                 # fill this\n    prediction = predictions[0].detach()\n    print(\"Input:\", input)\n    print(\"Target:\", target)\n    print(\"Prediction:\", prediction)","cd9877ca":"input, target = val_ds[0]\npredict_single(input, target, model)","c97cf88c":"input, target = val_ds[10]\npredict_single(input, target, model)","92ab8ee8":"input, target = val_ds[23]\npredict_single(input, target, model)","20a03d59":"jovian.commit(project=project_name, environment=None)\njovian.commit(project=project_name, environment=None) # try again, kaggle fails sometimes","bd98c6b4":"**Q: Convert the numpy arrays `inputs_array` and `targets_array` into PyTorch tensors. Make sure that the data type is `torch.float32`.**","669eee7f":"**Q: What is the final validation loss of your model?**","857840d5":"Let's look at a batch of data to verify everything is working fine so far.","d3948838":"## Step 5: Make predictions using the trained model\n\n**Q: Complete the following function definition to make predictions on a single input**","7407bf3d":"We're going to do a slight customization of the data, so that you every participant receives a slightly different version of the dataset. Fill in your name below as a string (enter at least 5 characters)","25fd67a8":"# Insurance cost prediction using linear regression\n\nIn this assignment we're going to use information like a person's age, sex, BMI, no. of children and smoking habit to predict the price of yearly medical bills. This kind of model is useful for insurance companies to determine the yearly insurance premium for a person. The dataset for this problem is taken from: https:\/\/www.kaggle.com\/mirichoi0218\/insurance\n\n\nWe will create a model with the following steps:\n1. Download and explore the dataset\n2. Prepare the dataset for training\n3. Create a linear regression model\n4. Train the model to fit the data\n5. Make predictions using the trained model\n\n\nThis assignment builds upon the concepts from the first 2 lectures. It will help to review these Jupyter notebooks:\n- PyTorch basics: https:\/\/jovian.ml\/aakashns\/01-pytorch-basics\n- Linear Regression: https:\/\/jovian.ml\/aakashns\/02-linear-regression\n- Logistic Regression: https:\/\/jovian.ml\/aakashns\/03-logistic-regression\n- Linear regression (minimal): https:\/\/jovian.ml\/aakashns\/housing-linear-minimal\n- Logistic regression (minimal): https:\/\/jovian.ml\/aakashns\/mnist-logistic-minimal\n\nAs you go through this notebook, you will find a **???** in certain places. Your job is to replace the **???** with appropriate code or values, to ensure that the notebook runs properly end-to-end . In some cases, you'll be required to choose some hyperparameters (learning rate, batch size etc.). Try to experiment with the hypeparameters to get the lowest loss.\n","8f7cf708":"Let's save our work by committing to Jovian.","dc30e021":"**Q: How many columns doe the dataset have**","a5e8da19":"**Q: What are the column titles of output\/target variable(s)?**","104031d1":"## Step 1: Download and explore the data\n\nLet us begin by downloading the data. We'll use the `download_url` function from PyTorch to get the data as a CSV (comma-separated values) file. ","9eb89955":"Remember to commit your notebook to Jovian after every step, so that you don't lose your work.","878b150d":"One final commit before we train the model.","c1785686":"Now scroll back up, re-initialize the model, and try different set of values for batch size, number of epochs, learning rate etc. Commit each experiment and use the \"Compare\" and \"View Diff\" options on Jovian to compare the different results.","0deed96d":"**Q: Pick a number between `0.1` and `0.2` to determine the fraction of data that will be used for creating the validation set. Then use `random_split` to create training & validation datasets. **","26d50b94":"Next, we need to create PyTorch datasets & data loaders for training & validation. We'll start by creating a `TensorDataset`.","e4477665":"Let's log the final validation loss to Jovian and commit the notebook","5d6858c3":"Let us answer some basic questions about the dataset. \n\n\n**Q: How many rows does the dataset have?**","73d8e30c":"Let's check out the weights and biases of the model using `model.parameters`.","949c96a6":"## Step 2: Prepare the dataset for training\n\nWe need to convert the data from the Pandas dataframe into a PyTorch tensors for training. To do this, the first step is to convert it numpy arrays. If you've filled out `input_cols`, `categorial_cols` and `output_cols` correctly, this following function will perform the conversion to numpy arrays.","71347bc3":"\nWe are now ready to train the model. You may need to run the training loop many times, for different number of epochs and with different learning rates, to get a good result. Also, if your loss becomes too large (or `nan`), you may have to re-initialize the model by running the cell `model = InsuranceModel()`. Experiment with this for a while, and try to get to as low a loss as possible.","892268a8":"## Step 4: Train the model to fit the data\n\nTo train our model, we'll use the same `fit` function explained in the lecture. That's the benefit of defining a generic training loop - you can use it for any problem.","73ba5974":"## Step 3: Create a Linear Regression Model\n\nOur model itself is a fairly straightforward linear regression (we'll build more complex models in the next assignment). \n","147950c5":"## (Optional) Step 6: Try another dataset & blog about it\n\nWhile this last step is optional for the submission of your assignment, we highly recommend that you do it. Try to clean up & replicate this notebook (or [this one](https:\/\/jovian.ml\/aakashns\/housing-linear-minimal), or [this one](https:\/\/jovian.ml\/aakashns\/mnist-logistic-minimal) ) for a different linear regression or logistic regression problem. This will help solidify your understanding, and give you a chance to differentiate the generic patters in machine learning from problem-specific details.\n\nHere are some sources to find good datasets:\n\n- https:\/\/lionbridge.ai\/datasets\/10-open-datasets-for-linear-regression\/\n- https:\/\/www.kaggle.com\/rtatman\/datasets-for-regression-analysis\n- https:\/\/archive.ics.uci.edu\/ml\/datasets.php?format=&task=reg&att=&area=&numAtt=&numIns=&type=&sort=nameUp&view=table\n- https:\/\/people.sc.fsu.edu\/~jburkardt\/datasets\/regression\/regression.html\n- https:\/\/archive.ics.uci.edu\/ml\/datasets\/wine+quality\n- https:\/\/pytorch.org\/docs\/stable\/torchvision\/datasets.html\n\nWe also recommend that you write a blog about your approach to the problem. Here is a suggested structure for your post (feel free to experiment with it):\n\n- Interesting title & subtitle\n- Overview of what the blog covers (which dataset, linear regression or logistic regression, intro to PyTorch)\n- Downloading & exploring the data\n- Preparing the data for training\n- Creating a model using PyTorch\n- Training the model to fit the data\n- Your thoughts on how to experiment with different hyperparmeters to reduce loss\n- Making predictions using the model\n\nAs with the previous assignment, you can [embed Juptyer notebook cells & outputs from Jovian](https:\/\/medium.com\/jovianml\/share-and-embed-jupyter-notebooks-online-with-jovian-ml-df709a03064e) into your blog. \n\nDon't forget to share your work on the forum: https:\/\/jovian.ml\/forum\/t\/share-your-work-here-assignment-2\/4931","08053ed4":"**Q: Train the model 4-5 times with different learning rates & for different number of epochs.**\n\nHint: Vary learning rates by orders of 10 (e.g. `1e-2`, `1e-3`, `1e-4`, `1e-5`, `1e-6`) to figure out what works.","3f7dd195":"**Q: What are the column titles of the input variables?**","0cbceceb":"**Q: Complete the class definition below by filling out the constructor (`__init__`), `forward`, `training_step` and `validation_step` methods.**\n\nHint: Think carefully about picking a good loss fuction (it's not cross entropy). Maybe try 2-3 of them and see which one works best. See https:\/\/pytorch.org\/docs\/stable\/nn.functional.html#loss-functions","c268bd7c":"**Q: Which of the input columns are non-numeric or categorial variables ?**\n\nHint: `sex` is one of them. List the columns that are not numbers.","1a39d40f":"Are you happy with your model's predictions? Try to improve them further.","44796f52":"Finally, we can create data loaders for training & validation.\n\n**Q: Pick a batch size for the data loader.**","f81f7a4f":"The `customize_dataset` function will customize the dataset slightly using your name as a source of random numbers.","ad64afbc":"To load the dataset into memory, we'll use the `read_csv` function from the `pandas` library. The data will be loaded as a Pandas dataframe. See this short tutorial to learn more: https:\/\/data36.com\/pandas-tutorial-1-basics-reading-data-files-dataframes-data-selection\/","aa96b09b":"**Q: Use the `evaluate` function to calculate the loss on the validation set before training.**","2095ccad":"**Q: (Optional) What is the minimum, maximum and average value of the `charges` column? Can you show the distribution of values in a graph?**\nUse this data visualization cheatsheet for referece: https:\/\/jovian.ml\/aakashns\/dataviz-cheatsheet","584141b5":"Let us create a model using the `InsuranceModel` class. You may need to come back later and re-run the next cell to reinitialize the model, in case the loss becomes `nan` or `infinity`.","b786511d":"Read through the [Pandas documentation](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/categorical.html) to understand how we're converting categorical variables into numbers."}}