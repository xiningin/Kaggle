{"cell_type":{"0d07a779":"code","d3f0248e":"code","39974f6a":"code","ccea14af":"code","31aecc5b":"code","3f6b2101":"code","59455078":"code","b9626f32":"code","efd86261":"code","3e7b13f3":"code","b46ca9d2":"code","6fc55159":"code","346c2eac":"code","f2d9f3a7":"code","57a764a5":"markdown","5fabd1e2":"markdown","da0dbc1e":"markdown","f82cf3aa":"markdown","fa337118":"markdown","0381bd98":"markdown","eec7108c":"markdown","d9862d21":"markdown"},"source":{"0d07a779":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3f0248e":"import numpy as np \nimport pandas as pd\nimport missingno as msno # for finding missing values in the data\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nfrom ipywidgets import interact, interactive, fixed\nimport ipywidgets as widgets\nfrom IPython.display import display","39974f6a":"data=pd.read_csv(\"\/kaggle\/input\/fifa-20-complete-player-dataset\/players_20.csv\")\nuselesscolumn = ['dob','sofifa_id','player_url','long_name','body_type','real_face','nation_position','loaned_from','nation_jersey_number',]\ndata = data.drop(uselesscolumn,axis = 1)\ndata.head()","ccea14af":"columns = ['ls','st','rs','lw','lf','cf','rf','rw','lam','cam','ram','lm','lcm','cm',\n           'rcm','rm','lwb','ldm', 'cdm','rdm','rwb','lb','lcb','cb','rcb','rb']\nfor col in columns:\n    data[col] = data[col].str.split('+').str[0]\n    \ndata[columns] = data[columns].fillna(0)\n\n#changig the dtype to 'int'\ndata[columns] = data[columns].astype('int')\n\nfor col in columns:\n    data[col] = data[col].replace(0,(data[col].mean()))\ndata[columns]\n\nattributes = ['dribbling','defending','physic','passing','shooting','pace']\nfor att in attributes:\n    data[att] = data[att].fillna(data[att].mean())","31aecc5b":"def f(x):\n    display(x)\n    return x\n\nC = data.columns\nP = interactive(f, x=widgets.Dropdown(options=C,value='overall',description='Attribute:',disabled=False))\nP","3f6b2101":"Att = P.result\nGen = data.sort_values(by = Att , ascending = False)[['short_name','club',Att,'overall']].head(10)\nprint(\"The top 10 players are: \")\nprint(Gen)\n\nfig,ax = plt.subplots(figsize = (12,6))\nsns.barplot(Gen['short_name'],Gen[Att], color = 'blue',palette='PuBuGn_d')\nplt.title('Top 10')\nplt.xlabel(\"Player\")\nplt.xticks(rotation=45)\nplt.grid()\nplt.tight_layout()\nplt.show()","59455078":"plt.figure(figsize=(10,6))\nnewdf =data[['weight_kg','height_cm','physic', 'overall']]\ncorrelation = newdf.corr()\nsns.heatmap(correlation, cmap=\"Blues\",) \nplt.tight_layout()","b9626f32":"dataset1 = data[['age','height_cm','weight_kg','club','overall','potential','preferred_foot',\n                 'weak_foot','work_rate']]\ndataset1.hist(bins='auto', figsize=(14, 10))\nplt.show()","efd86261":"data['main_position']=data['player_positions'].str.split(pat=',', n=-1, expand=True)[0]\nPlayers_grouped=data.groupby('main_position')['value_eur'].mean()\/1e6\nPlayers_grouped=Players_grouped.sort_values()\nPlayers_grouped.plot(kind='barh',figsize=(12,8))\nplt.grid()\nplt.xlabel(\"Average value (Million euro) \")\nplt.show()","3e7b13f3":"counts_Nationality = data[\"nationality\"].value_counts()\ncounts_Nationality = counts_Nationality.reset_index()\ncounts_Nationality.columns= [\"Nations\",\"Counts\"]\nsns.catplot(y=\"Nations\",x=\"Counts\",data=counts_Nationality.head(50),height=20,kind=\"bar\")\nplt.title(\"Nation Wise Players Counts\",fontsize=25)\nplt.yticks(fontsize=15)\nplt.xticks(fontsize=15)\nplt.grid()\nplt.show()","b46ca9d2":"#Function to extract specific club players\ndef Club(x):\n    return data[data['club'] == x ][\n        ['short_name','age','club',\"player_positions\",\"overall\",\"value_eur\"]].sort_values(by=['overall'],ascending=False)\n\n#Function to extract specific country players\ndef Country(x):\n    return data[data['nationality'] == x ][['short_name','age','nationality',\"player_positions\",\n                                            \"overall\",\"value_eur\"]].sort_values(by=['overall'],ascending=False)","6fc55159":"#Testing with some clubs and contries\nChelsea = Club(\"Chelsea\")\nPSG = Club(\"Paris Saint-Germain\")\nJuventus = Club(\"Juventus\")\nBVB = Club(\"Borussia Dortmund\")\nGermany = Country(\"Germany\")\nEngland = Country(\"England\")\nFrance = Country(\"France\")","346c2eac":"#Visualization of specific club and country players\nplt.figure(figsize=(30, 12))\nplt.bar(Chelsea[\"short_name\"],Chelsea[\"overall\"],color=\"b\")\nplt.xticks(rotation=90,fontsize=20)\nplt.yticks(fontsize=20)\nplt.title(\"Chelsea players\", fontsize = 25)\nplt.ylabel(\"Overall\",fontsize = 20)\nplt.xlabel(\"Player\",fontsize = 20)\nplt.grid()\nplt.show()\n\nplt.figure(figsize=(30, 12))\nplt.bar(Juventus[\"short_name\"],Juventus[\"overall\"],color=\"k\")\nplt.xticks(rotation=90,fontsize=20)\nplt.yticks(fontsize=20)\nplt.title(\"Juventus players\", fontsize = 25)\nplt.ylabel(\"Overall\",fontsize = 20)\nplt.xlabel(\"Player\",fontsize = 20)\nplt.grid()\nplt.show()\n\nplt.figure(figsize=(30, 12))\nplt.bar(Germany[\"short_name\"].head(25),Germany[\"overall\"].head(25),color=\"r\")\nplt.xticks(rotation=90,fontsize=20)\nplt.yticks(fontsize=20)\nplt.title(\"Top 25 German players\", fontsize = 25)\nplt.ylabel(\"Overall\",fontsize = 20)\nplt.xlabel(\"Player\",fontsize = 20)\nplt.grid()\nplt.show()\n\nplt.figure(figsize=(30, 12))\nplt.bar(France[\"short_name\"].head(25),France[\"overall\"].head(25),color=\"g\")\nplt.xticks(rotation=90,fontsize=20)\nplt.yticks(fontsize=20)\nplt.title(\"Top 25 French players\", fontsize = 25)\nplt.ylabel(\"Overall\",fontsize = 20)\nplt.xlabel(\"Player\",fontsize = 20)\nplt.grid()\nplt.show()","f2d9f3a7":"data['preferred_foot'].value_counts()\n\nlabel = data['preferred_foot'].value_counts().index\nname = data['preferred_foot'].value_counts()\nexplode = [0,0.3]\nplt.pie(name,labels = label,shadow = True,autopct='%1.1f%%',explode =explode, radius = 2)\nplt.title('Perecentage of the preferred foot')\nplt.legend()\nplt.show()","57a764a5":"**Preferred Foot**","5fabd1e2":"Correlation between physique and overall","da0dbc1e":"Import all neccessary libraries ","f82cf3aa":"Histograms of common numerical features","fa337118":"***Specific Club and Country Information***","0381bd98":"Number of players from each country","eec7108c":"Most valuable positions","d9862d21":"***Top 10 Attributes Generator***"}}