{"cell_type":{"d75cdb64":"code","e8fdabcd":"code","0780fc6a":"code","e1b22225":"code","7b7e3959":"code","4fde7950":"code","65cf1b94":"code","26c98085":"markdown","cc709b89":"markdown","c8fbf50e":"markdown","041f3ee5":"markdown","8dfb1124":"markdown"},"source":{"d75cdb64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.tree import DecisionTreeClassifier # decision tree classification\nfrom sklearn.model_selection import train_test_split # splitting training and testing data\nfrom sklearn.preprocessing import Normalizer, StandardScaler # normalizing and standardizing\nfrom sklearn.ensemble import BaggingClassifier # bagging classifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score, f1_score # parametric scoring\n\nseed = 42 # set seed\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8fdabcd":"# importing datasets from kaggle\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n\n# removing Cabin, Age, Name, and Ticket data from the sets\ntest_nocab = test.drop(['Cabin','Age', 'Name', 'Ticket'], axis = 1)\ntrain_nocab = train.drop(['Cabin','Age', 'Name', 'Ticket'], axis = 1)\n\n# changing sex and port embarked from to a numerical value\ntrain_nocab['Sex'].replace({\"male\":0, \"female\":1}, inplace = True)\ntest_nocab['Sex'].replace({\"male\":0, \"female\":1}, inplace = True)\ntrain_nocab['Embarked'].replace({\"C\":0, \"Q\":1, \"S\":2}, inplace = True)\ntest_nocab['Embarked'].replace({\"C\":0, \"Q\":1, \"S\":2}, inplace = True)\n\n# dropping NA values from the training dataframe\ntrain_noNA = train_nocab.dropna(how = 'any')\n\n# filling NA values from the testing dataframe\ntest_noNA = test_nocab.fillna(0)","0780fc6a":"# printing datasets in a separate cell\n# print(test.head())\n# print(train.head())\n\n# print(test_nocab.head())\n# print(train_nocab.head())\n\n# counting nas for both test and train\n# print(test_nocab.isna().sum())\n# print(train_nocab.isna().sum())\n# print(train_noNA.isna().sum())\n\n# print(train_noNA.head())","e1b22225":"# setting up and splitting train data\ny = train_noNA['Survived']\nX = train_noNA.drop(['Survived'], axis = 1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = seed)","7b7e3959":"# training a decision tree \ndt = DecisionTreeClassifier(max_depth = 6, random_state = seed)\n\ndt.fit(X_train, y_train)\n\n# predicting y\ny_pd = dt.predict(X_test)","4fde7950":"# printing the parametric scores of the model\nprint(\"ROC AUC Score:\", roc_auc_score(y_test, y_pd))\nprint(\"Accuracy Score:\", accuracy_score(y_test, y_pd))\nprint(\"F1 Score:\", f1_score(y_test, y_pd))","65cf1b94":"# applying the model to the test data\ndt.fit(X, y)\ny_pred = dt.predict(test_noNA)\n\ndf = pd.DataFrame(({'PassengerId': test_noNA.PassengerId, 'Survived': y_pred}))\ndf.to_csv('submission.csv', index = False)","26c98085":"Importing data from Kaggle, dropping the Cabin and Age columns for having too many NaN values, dropping NA values, dropping name and ticket for being strings that can't be converted to numerics, assigned numeric values to sex and port embarked from","cc709b89":"Importing libraries and printing filepaths (code was provided when the notebook was made and I expanded on it)","c8fbf50e":"Setting up the X and y values of the train data, then splitting them up for predictions","041f3ee5":"Training a decision Tree","8dfb1124":"Saving and downloading the model"}}