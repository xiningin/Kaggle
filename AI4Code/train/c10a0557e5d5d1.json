{"cell_type":{"8bb599aa":"code","233bbad2":"code","3f6a0991":"code","0a14ffc6":"code","d6c78fd2":"code","bb08643f":"code","84e834f1":"code","4f0854d0":"code","64af4529":"code","9969995f":"code","243208e6":"code","6010de80":"code","c2a6441a":"code","11d4566b":"code","ecec2865":"code","834dafb1":"code","e8da4e53":"markdown","78dccc07":"markdown","12b46519":"markdown","76b4ead2":"markdown","bbacf60a":"markdown"},"source":{"8bb599aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","233bbad2":"from keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Activation,Dropout,Dense,Flatten\nfrom keras.preprocessing.image import ImageDataGenerator,img_to_array,load_img,array_to_img\nimport matplotlib.pyplot as plt \nfrom glob import glob","3f6a0991":"train_path = '..\/input\/fruits\/fruits-360_dataset\/fruits-360\/Training\/'\ntest_path = '..\/input\/fruits\/fruits-360_dataset\/fruits-360\/Test\/'","0a14ffc6":"img = load_img(train_path + 'Apple Braeburn\/0_100.jpg')","d6c78fd2":"plt.imshow(img)\nplt.axis('off')\nplt.show()","bb08643f":"x = img_to_array(img)\nx.shape","84e834f1":"classname = glob(train_path+'\/*')\nprint(len(classname))","4f0854d0":"numberOfClass = len(classname)\nnumberOfClass","64af4529":"# CNN Model\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32,(3,3),input_shape=x.shape))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(32,(3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D())\n\nmodel.add(Flatten())\nmodel.add(Dense(1024)) #Why 1024\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(numberOfClass))\nmodel.add(Activation('softmax'))","9969995f":"model.compile(loss='categorical_crossentropy',\n             optimizer='rmsprop',\n             metrics=['accuracy'])","243208e6":"batch_size =32","6010de80":"train_datagen=ImageDataGenerator(rescale=1.\/255,\n                  shear_range=0.3,\n                  horizontal_flip=True,\n                  zoom_range=0.3)\ntest_datagen =ImageDataGenerator(rescale=1.\/255)","c2a6441a":"train_generator=train_datagen.flow_from_directory(train_path,\n                                                 target_size=x.shape[0:2],\n                                                 batch_size=batch_size,\n                                                 color_mode='rgb',\n                                                 class_mode='categorical')\ntest_generator=test_datagen.flow_from_directory(test_path,\n                                                 target_size=x.shape[0:2],\n                                                 batch_size=batch_size,\n                                                 color_mode='rgb',\n                                                 class_mode='categorical')\nprint('done')","11d4566b":"hist=model.fit_generator(train_generator,\n                   steps_per_epoch=1600\/\/batch_size,\n                   epochs=90,\n                   validation_data=test_generator,\n                   validation_steps=800\/\/batch_size)","ecec2865":"# Model Save\n#model.save_weights('Fruit_classif_model.h5')","834dafb1":"print(hist.history.keys())\nplt.plot(hist.history['loss'],label='Train Loss')\nplt.plot(hist.history['val_loss'],label='Validation Loss')\nplt.legend()\nplt.figure()\nplt.plot(hist.history['accuracy'],label='Train Accuracy')\nplt.plot(hist.history['val_accuracy'],label='Validation Accuracy')\nplt.legend()\nplt.show()","e8da4e53":"# 4.Training The CNN Model","78dccc07":"# 2. Visualizing Dataset","12b46519":"# 6. Results","76b4ead2":"# 1. Importing Libraries","bbacf60a":"# 3. Creating CNN Model"}}