{"cell_type":{"251f4fa0":"code","62484084":"code","68046e4f":"code","13eafc7f":"code","278a0f64":"code","14c35412":"code","6da8e910":"code","dd679a66":"code","3e12d7b6":"code","bf96873e":"code","7efb2fa0":"code","548c71e3":"code","d0632393":"code","0506b3fd":"code","24494d61":"code","104df758":"code","27635c79":"code","40ac8787":"code","c24a1f0d":"code","6fbd4eb1":"code","5a5e291f":"code","80125272":"code","8ce1f5ba":"code","82eb5d5f":"code","a6f0d3ee":"code","425eed7c":"code","44a5bde8":"markdown","f25dcd06":"markdown","87b4504c":"markdown","65e679a9":"markdown","89b2f696":"markdown","9dec60ab":"markdown","b2f90903":"markdown","79725a89":"markdown","f33dca69":"markdown","5253ddb8":"markdown","40a3e8c2":"markdown","fc624c48":"markdown","a65a56a9":"markdown","85d586ac":"markdown","7719b141":"markdown","68124882":"markdown","e6ad5620":"markdown","fed1a132":"markdown","c397515d":"markdown","353d1859":"markdown","c618ab2a":"markdown","0a4451a9":"markdown","4f1a5f62":"markdown","bea4e7f6":"markdown","bede8b6a":"markdown","34c63e92":"markdown"},"source":{"251f4fa0":"from IPython.core.display import display, HTML, Javascript\nhtml_contents =\"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n    <style>\n    \n    .top_section{\n        background-color: #056e13; \n        color: black;\n        font-family: Copperplate, Papyrus, fantasy;\n        font-weight: 800;\n        font-size: 25px;\n        padding: 8px 14px;\n        margin-bottom: 6px;\n    }\n    \n    .section_title{\n        background-color: #FF8C00;\n        color: black;\n        font-family: Copperplate, Papyrus, fantasy;\n        font-weight: 600;\n        font-size: 25px;\n        padding: 6px 12px;\n        margin-bottom: 5px;\n    }\n    .subsection_title{\n        background: #2189d9;\n        font-weight: 400;\n        color: black;\n        font-family: Copperplate, Papyrus, fantasy;\n        font-size: 21px;\n        padding: 6px 12px;\n        margin-bottom: 0px;\n    }\n    .subsection_detail{\n        background: #d10808;\n        font-weight: 300;\n        color: black;\n        font-family: Copperplate, Papyrus, fantasy;\n        font-size: 18px;\n        border: 1px solid #d7d7d7;\n        padding: 1px 10px 2px;\n        box-shadow: 1px 1px 2px 1px rgba(0,0,0,0.3);\n        margin-bottom: 3px;\n    }\n    <\/style>\n    <\/head>\n    \n<\/html>\n\"\"\"\n\nHTML(html_contents)","62484084":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\npd.set_option('mode.chained_assignment', None)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","68046e4f":"df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv', skiprows=1, low_memory=False)\ndf[df.columns[3]].replace({'United Kingdom of Great Britain and Northern Ireland':'UK',\n                           'Iran, Islamic Republic of...':'Iran',\n                           'United Arab Emirates':'UAE',\n                           'United States of America':'USA',\n                           'Viet Nam':'Vietnam'}, inplace=True)\n\nprint(f\"List of countries:\\n{np.sort(df[df.columns[3]].unique())}\\n\")","13eafc7f":"country = 'Spain'","278a0f64":"if country not in df[df.columns[3]].unique():\n    raise ValueError(f'{country} not found in the list')\ndf['country_agg'] = np.where(df[df.columns[3]]==country,country,'Others')","14c35412":"fig = px.pie(df, df.columns[3], \n       title=f\"{len(df[df[df.columns[3]]==country])*100\/len(df):.2f}% of all survey respondents are from {country}\", \n       hole=0.6)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","6da8e910":"fig = px.pie(df, df.columns[1], title='56,2% of all Kagglers are less than 30 years old', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nage_pct = len(df[(df[df.columns[3]]==country) & (df[df.columns[1]].isin(['18-21','22-24','25-29']))])*100\/len(df[df[df.columns[3]]==country])\nif age_pct < 56:\n    title = f\"{country} is older, with {age_pct:.0f}% of Kagglers being under under 30\"\nelif age_pct > 56:\n    title = f\"{country} is younger, with {age_pct:.0f}% of Kagglers being under under 30\"\nelse:\n    title = f\"{age_pct:.0f}% of Kagglers from {country} are also under 30\"\nfig = px.pie(df[df[df.columns[3]]==country], df.columns[1], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ndf['age1'] = df.iloc[:,1].str.split('-').str[0]\ndf['age1'].replace('70+','70', inplace=True)\ndf['age2'] = df.iloc[:,1].str.split('-').str[1]\ndf['age1'] = df.age1.astype('int')\ndf.age2.fillna(70, inplace=True)\ndf['age2'] = df.age2.astype('int')\ndf['age'] = (df.age1+df.age2)\/2\n\nglobal_median = df.age.mean()\ncountry_median = df[df.country_agg==country].age.mean()\n\nif country_median <= global_median:\n    title = f\"With an average age of {country_median:.0f},<br>Kagglers from {country} are generally {global_median - country_median:.0f} years younger than the average Kaggler\"\nelse:\n    title = f\"With an average age of {country_median:.0f},<br>Kagglers from {country} are generally {country_median - global_median:.0f} years younger than the average Kaggler\"\n\nloc = df.groupby(df.columns[3]).age.mean().sort_values(ascending=False).index.to_list().index(country)\ncolor = ['#636EFA']*len(df.groupby(df.columns[3]).age.mean().sort_values(ascending=False).index)\ncolor[loc] = 'orange'\n\nfig = go.Figure(data=[go.Bar(x=df.groupby(df.columns[3]).age.mean().sort_values(ascending=False).index\n       , y=df.groupby(df.columns[3]).age.mean().sort_values(ascending=False)\n            , marker_color=color)])\n\nfig.update_layout(\n    shapes=[\n    dict(\n      type= 'line',\n      yref= 'y', y0= global_median, y1= global_median,\n      xref= 'x', x0= -0.5, x1= len(df.groupby(df.columns[3]).age)-0.5\n    )],\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Age')\n\nfig.add_annotation(x=len(df.groupby(df.columns[3]).age)*0.95, y=global_median, xshift=-20, yshift=10,\n            text=\"Global Average\",\n            showarrow=False)\nfig.show()\n\nfig = go.Figure(data=[\n    go.Bar(name=country, y=df[df.country_agg==country][df.columns[1]].value_counts(normalize=True).sort_index()*100),\n    go.Bar(name='Others', y=df[df.country_agg=='Others'][df.columns[1]].value_counts(normalize=True).sort_index()*100)\n])\n\n# Change the bar mode\nfig.update_layout(\n    barmode='group',\n    title=f'Age distribution of Kagglers from {country} compared to others',\n    xaxis_title='Age',\n    yaxis_title='Percentage of respondents',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(12)],\n        ticktext = df[df.columns[1]].sort_values().unique()\n    )\n)\n\nfig.show()","dd679a66":"print(f\"Genders reported by survey respondents from {country}: {set(df[df.iloc[:,3]==country][df.columns[2]])}\")","3e12d7b6":"# Select the gender you would like to see detailed stats about\ngender = 'Nonbinary'","bf96873e":"gndr_pct = len(df[df[df.columns[2]]==gender])*100\/len(df)\nfig = px.pie(df, df.columns[2], title=f\"{gndr_pct:.2f}% of all survey respondents identified as '{gender}'\", hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n    \ndf_all = df.groupby(df.columns[3])[df.columns[2]].value_counts().groupby(level=0).apply(lambda x: 100 * x \/ float(x.sum()))[:,gender].sort_values(ascending=False)\n\nif country in df_all.index:\n    country_avg = df_all[country]\n    global_avg = len(df[df[df.columns[2]]==gender])*100\/len(df)\n\n    if country_avg > global_avg:\n        title=f\"In {country}, this percentage increases to {country_avg:.2f}%\"\n    else:\n        title=f\"In {country}, this percentage decreases to {country_avg:.2f}%\"\n\n    loc = df_all.index.to_list().index(country)\n    color = ['#636EFA']*len(df_all.index)\n    color[loc] = 'orange'\n\n    fig = go.Figure(data=[go.Bar(x=df_all.index, y=df_all.values, marker_color=color)])\n    fig.update_layout(\n        shapes=[\n            dict(\n              type= 'line',\n              yref= 'y', y0= global_avg, y1= global_avg,\n              xref= 'x', x0= -0.5, x1= len(df_all.index)-0.5\n            )],\n        title=title,\n        xaxis_title=None,\n        yaxis_title='Percentage')\n    fig.add_annotation(x=len(df_all.index)*0.95, y=global_avg, xshift=-20, yshift=10,\n                text=\"Global Average\",\n                showarrow=False)\n    fig.show()\n\n    categories = sorted(df.iloc[:,2].unique())\n    df_country_gender = df[df.country_agg==country].iloc[:,2].value_counts(normalize=True).sort_index()\n    df_other_platform = df[df.country_agg=='Others'].iloc[:,2].value_counts(normalize=True).sort_index()\n\n    fig = go.Figure(data=[\n        go.Bar(name=country, x=categories, y=df_country_gender.values*100),\n        go.Bar(name='Others', x=categories, y=df_other_platform.values*100)\n    ])\n    # Change the bar mode\n    fig.update_layout(\n        title=f'Gender of respondents from {country} compared to Other countries',\n        xaxis_title=None,\n        yaxis_title='Percentage',\n        xaxis={'categoryorder':'array',\n               'categoryarray':categories}\n    )\n    fig.show()\n\nelse:\n    print(f\"Nobody from {country} identified as {gender}\")","7efb2fa0":"df_academic = df[(df[df.columns[4]]!='I prefer not to answer') & (~df[df.columns[4]].isna())]\n\nfig = px.pie(df_academic, df_academic.columns[4], \n             title=\"Surprisingly, globally more Kagglers reported having a Master's degree (40%)<br>than a Bachelor's (39%)\", hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\nmost_comm = df_academic[df_academic.iloc[:,3]==country].iloc[:,4].value_counts(normalize=True)[[0]]\nif most_comm.index[0] == \"Master's degree\":\n    title = f\"The same trend is observed in {country},<br>with {most_comm[0]*100:.0f}% respondents reporting having a Master's degree\"\nelse:\n    title = f\"However, in the case of {country},<br>more respondents reported having a {most_comm.index[0]} at {most_comm[0]*100:.0f}%\"\n    \nfig = px.pie(df_academic[df_academic.iloc[:,3]==country], df_academic.columns[4], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ncategories = ['No formal education past high school',\n             'Some college\/university study without earning a bachelor\u2019s degree',\n             'Professional degree',\n             'Bachelor\u2019s degree',\n             'Master\u2019s degree',\n             'Doctoral degree']\n\ndf_country_agg = df[df.country_agg==country].iloc[:,4].value_counts(normalize=True)\ndf_country_agg.index = pd.Categorical(df_country_agg.index, categories)\ndf_country_agg.sort_index(inplace=True)\n\ndf_others_agg = df[df.country_agg=='Others'].iloc[:,4].value_counts(normalize=True)\ndf_others_agg.index = pd.Categorical(df_others_agg.index, categories)\ndf_others_agg.sort_index(inplace=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=country, x=categories, y=df_country_agg.values*100),\n    go.Bar(name='Others', x=categories, y=df_others_agg.values*100)\n])\n# Change the bar mode\nfig.update_layout(\n    title=f'Academic Qualification of respondents from {country} compared to Other countries',\n    xaxis_title=None,\n    yaxis_title='Percentage'\n)\nfig.show()","548c71e3":"df_job = df[~df[df.columns[5]].isna()]\nprint(f\"Job titles reported by survey respondents from {country}: {set(df_job[df_job.iloc[:,3]==country][df_job.columns[5]])}\")","d0632393":"# Enter the job-title you want to compare on\njob = \"Currently not employed\"","0506b3fd":"fig = px.pie(df_job, df_job.columns[5], title='Globally, 26% Kagglers are students, followed by 14% being Data Scientists', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ndf_country_job = df_job[df_job.iloc[:,3]==country].iloc[:,5].value_counts(normalize=True)\ncom_job = df_country_job[[0]].index[0]\nif com_job=='Student':\n    title = f\"For {country} too, most Kagglers are {com_job}s ({df_country_job[0]*100:.0f}%), followed by {df_country_job[[1]].index[0]}s ({df_country_job[1]*100:.0f}%)\"\nelse:\n    title = f\"However, for {country}, most Kagglers are {com_job}s ({df_country_job[0]*100:.0f}%), followed by {df_country_job[[1]].index[0]}s ({df_country_job[1]*100:.0f}%)\"\n\nfig = px.pie(df_job[df_job.iloc[:,3]==country], df_job.columns[5], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ndf_all = df.groupby(df.columns[3])[df.columns[5]].value_counts().groupby(level=0).apply(lambda x: 100 * x \/ float(x.sum()))[:,job].sort_values(ascending=False)\ncountry_avg = df_all[country]\nglobal_avg = len(df[df[df.columns[5]]==job])*100\/len(df)\n\nloc = df_all.index.to_list().index(country)\ncolor = ['#636EFA']*len(df_all.index)\ncolor[loc] = 'orange'\n\nfig = go.Figure(data=[go.Bar(x=df_all.index, y=df_all.values, marker_color=color)])\n\nfig.update_layout(\n    shapes=[\n    dict(\n      type= 'line',\n      yref= 'y', y0= global_avg, y1= global_avg,\n      xref= 'x', x0= -0.5, x1= len(df_all.index)-0.5\n    )],\n    title=f\"{country_avg:.0f}% of Kagglers from {country} reported their job-title as \\'{job}\\',<br>compared to the global average of {global_avg:.0f}%\",\n    xaxis_title=None,\n    yaxis_title='Percentage',)\n\nfig.add_annotation(x=len(df_all.index), y=global_avg, xshift=-60, yshift=10,\n            text=\"Global Average\",\n            showarrow=False)\n\nfig.show()","24494d61":"df_coding = df[~df[df.columns[6]].isna()]\n\nfig = px.pie(df_coding, df_coding.columns[6], title='65% of all survey respondents have been coding for less than 5 years', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ncountry_coding_exp = len(df_coding[(df_coding[df_coding.columns[3]]==country) & (df_coding[df_coding.columns[6]].isin(['3-5 years','< 1 years','1-2 years']))])*100\/len(df_coding[df_coding[df_coding.columns[3]]==country])\nif country_coding_exp > 65:\n    title = f\"For {country}, this percentage increases to {country_coding_exp:.0f}%\"\nelif country_coding_exp < 65:\n    title = f\"For {country}, this percentage decreases to {country_coding_exp:.0f}%\" \nelse:\n    title = f\"At {country_coding_exp:.0f}%, it is the same for {country} too<br>The average Kaggler from {country} about the same coding experience as the global average\"\nfig = px.pie(df_coding[df_coding[df_coding.columns[3]]==country], df_coding.columns[6], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ndf_coding[df_coding.columns[6]] = df_coding[df_coding.columns[6]].replace('< 1 years','0-1 years').replace('I have never written code','0-0').apply(lambda x: x.split()[0])\ndf_coding['code1'] = df_coding.iloc[:,6].str.split('-').str[0].replace('20+','20').astype('int')\ndf_coding['code2'] = df_coding.iloc[:,6].str.split('-').str[1].fillna('20').astype('int')\ndf_coding.groupby([df_coding.columns[6]]+['code1','code2']).size()\ndf_coding['code'] = (df_coding.code1+df_coding.code2)\/2\n\nglobal_median = df_coding.code.mean()\ncountry_median = df_coding[df_coding.country_agg==country].code.mean()\n\nif country_median <= global_median:\n    title = f\"The average Kaggler from {country} has been coding for {country_median:.1f} years,<br>less than the global average of {global_median:.1f} years\"\nelse:\n    title = f\"The average Kaggler from {country} has been coding for {country_median:.1f} years,<br>more than the global average of {global_median:.1f} years\"\n\nloc = df_coding.groupby(df_coding.columns[3]).code.mean().sort_values(ascending=False).index.to_list().index(country)\ncolor = ['#636EFA']*len(df_coding.groupby(df_coding.columns[3]).code.mean().sort_values(ascending=False).index)\ncolor[loc] = 'orange'\n\nfig = go.Figure(data=[go.Bar(x=df_coding.groupby(df_coding.columns[3]).code.mean().sort_values(ascending=False).index\n       , y=df_coding.groupby(df_coding.columns[3]).code.mean().sort_values(ascending=False)\n            , marker_color=color)])\n\nfig.update_layout(\n    shapes=[\n    dict(\n      type= 'line',\n      yref= 'y', y0= global_median, y1= global_median,\n      xref= 'x', x0= -0.5, x1= len(df_coding.groupby(df_coding.columns[3]).code)-0.5\n    )],\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Average coding experience')\n\nfig.add_annotation(x=len(df_coding.groupby(df.columns[3]).code)*0.95, y=global_median, xshift=-20, yshift=10,\n            text=\"Global Average\",\n            showarrow=False)\nfig.show()\n\ncategories = ['I have never written code','< 1 years','1-2 years','3-5 years','5-10 years','10-20 years','20+ years']\n\ndf_country_agg = df[df.country_agg==country].iloc[:,6].value_counts(normalize=True)\ndf_country_agg.index = pd.Categorical(df_country_agg.index, categories)\ndf_country_agg.sort_index(inplace=True)\n\ndf_others_agg = df[df.country_agg=='Others'].iloc[:,6].value_counts(normalize=True)\ndf_others_agg.index = pd.Categorical(df_others_agg.index, categories)\ndf_others_agg.sort_index(inplace=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=country, x=categories, y=df_country_agg.values*100),\n    go.Bar(name='Others', x=categories, y=df_others_agg.values*100)\n])\n# Change the bar mode\nfig.update_layout(\n    title=f'Coding Experience of respondents from {country} compared to Other countries',\n    xaxis_title=None,\n    yaxis_title='Percentage'\n)\nfig.show()","104df758":"programming_cols = [col for col in df.columns \n                    if 'What programming languages do you use on a regular basis?' in col]\ndf_programming = df.copy()\nmapper = [col.split('-')[-1].lstrip() for col in programming_cols]\nmapping_dict = dict(zip(programming_cols,mapper))\ndf_programming = df_programming[programming_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_programming.dropna(how='all', subset=mapper, inplace=True)\ndf_programming.drop(columns=[\"None\"], inplace=True)\n\nfig = px.bar(df_programming[df_programming.columns[:-2]].count().sort_values(ascending=False),\n            color_discrete_sequence=[\"green\"])\nfig.update_layout(\n    title=f'87% of all respondents use Python on a regular basis',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_programming[df_programming.iloc[:,-1]==country][df_programming.columns[:-2]].count().sort_values(ascending=False)\npop_lang = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_programming[df_programming.iloc[:,-1]==country])\nif pop_lang=='Python':\n    if most_pop_pct > 87:\n        title = f'{pop_lang} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_lang} remains the most popular programming language in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_lang} is more popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_programming[df_programming.iloc[:,-1]==country][df_programming.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","27635c79":"ide_cols = [col for col in df.columns \n            if \"Which of the following integrated development environments (IDE's) do you use on a regular basis?\" in col]\ndf_ide = df.copy()\nmapper = [col.split('-')[-1].lstrip() for col in ide_cols]\nmapping_dict = dict(zip(ide_cols,mapper))\ndf_ide = df_ide[ide_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ide.dropna(how='all', subset=mapper, inplace=True)\n#df_ide.drop(columns=['Click to write Choice 13','None'], inplace=True)\ndf_ide.rename(columns={'Jupyter (JupyterLab, Jupyter Notebooks, etc) ':'Jupyter'}, inplace=True)\n\nfig = px.bar(df_ide[df_ide.columns[:-2]].count().sort_values(ascending=True)[:6],orientation=\"h\",\n            color_discrete_sequence= ['yellow'])\nfig.update_layout(\n    title=f'64% of all respondents use Jupyter',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ide[df_ide.iloc[:,-1]==country][df_ide.columns[:-2]].count().sort_values(ascending=False)\npop_ide = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_ide[df_ide.iloc[:,-1]==country])\nif pop_ide=='Jupyter':\n    if most_pop_pct > 64:\n        title = f'{pop_ide} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ide} remains the most popular IDE in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ide} is more,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ide[df_ide.iloc[:,-1]==country][df_ide.columns[:-2]].count().sort_values(ascending=True)[:6], orientation=\"h\")\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","40ac8787":"nb_cols = [col for col in df.columns \n           if \"Which of the following hosted notebook products do you use on a regular basis?\" in col]\ndf_nb = df.copy()\nmapper = [col.split('-')[-1].lstrip() for col in nb_cols]\nmapping_dict = dict(zip(nb_cols,mapper))\ndf_nb = df_nb[nb_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_nb.dropna(how='all', subset=mapper, inplace=True)\ndf_nb.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_nb[df_nb.columns[:-2]].count().sort_values(ascending=True)[:3], orientation=\"h\",\n            color_discrete_sequence=[\"magenta\", \"green\", \"blue\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=f'37% of all respondents use Colab Notebooks',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_nb[df_nb.iloc[:,-1]==country][df_nb.columns[:-2]].count().sort_values(ascending=False)\npop_nb = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_nb[df_nb.iloc[:,-1]==country])\nif pop_nb=='Colab Notebooks':\n    if most_pop_pct > 37:\n        title = f'{pop_nb} are even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\n    else:\n        title = f'{pop_nb} remain the most popular hosted notebooks in {country} too,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_nb} are more popular,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis\"\n\nfig = px.bar(df_nb[df_nb.iloc[:,-1]==country][df_nb.columns[:-2]].count().sort_values(ascending=True)[:3],orientation=\"h\",\n            color_discrete_sequence=[\"red\", \"green\", \"blue\", \"goldenrod\"])\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","c24a1f0d":"viz_cols = [col for col in df.columns \n           if \"What data visualization libraries or tools do you use on a regular basis?\" in col]\ndf_viz = df.copy()\nmapper = [col.split('-')[-1].strip() for col in viz_cols]\nmapping_dict = dict(zip(viz_cols,mapper))\ndf_viz = df_viz[viz_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_viz.dropna(how='all', subset=mapper, inplace=True)\ndf_viz.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_viz[df_viz.columns[:-2]].count().sort_values(ascending=True)[:4], orientation=\"h\",\n            color_discrete_sequence=[\"grey\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=f'75% of all respondents use Matplotlib',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_viz[df_viz.iloc[:,-1]==country][df_viz.columns[:-2]].count().sort_values(ascending=False)\npop_viz = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_viz[df_viz.iloc[:,-1]==country])\nif pop_viz=='Matplotlib':\n    if most_pop_pct > 75:\n        title = f'{pop_viz} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_viz} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_viz} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_viz[df_viz.iloc[:,-1]==country][df_viz.columns[:-2]].count().sort_values(ascending=True)[:4], orientation=\"h\",\n            color_discrete_sequence=[\"black\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","6fbd4eb1":"\nml_cols = [col for col in df.columns \n           if \"Which of the following machine learning frameworks do you use on a regular basis?\" in col]\ndf_ml = df.copy()\nmapper = [col.split('-')[-1].strip() for col in ml_cols]\nmapper[0]='Scikit-learn'\nmapping_dict = dict(zip(ml_cols,mapper))\ndf_ml = df_ml[ml_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ml.dropna(how='all', subset=mapper, inplace=True)\ndf_ml.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_ml[df_ml.columns[:-2]].count().sort_values(ascending=True)[:3], orientation=\"h\",\n            color_discrete_sequence=[\"blue\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=f'72% of all respondents use Scikit-learn',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=False)\npop_ml = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_ml[df_ml.iloc[:,-1]==country])\nif pop_ml=='Scikit-learn':\n    if most_pop_pct > 72:\n        title = f'{pop_ml} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ml} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ml} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=True)[:3], orientation=\"h\",\n            color_discrete_sequence=[\"pink\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","5a5e291f":"ml_cols = [col for col in df.columns \n           if \"Which of the following ML algorithms do you use on a regular basis?\" in col]\ndf_ml = df.copy()\nmapper = [col.split('-')[-1].strip() for col in ml_cols]\nmapper[9]='Transformer Networks (BERT, gpt-3, etc)'\nmapping_dict = dict(zip(ml_cols,mapper))\ndf_ml = df_ml[ml_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ml.dropna(how='all', subset=mapper, inplace=True)\ndf_ml.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_ml[df_ml.columns[:-2]].count().sort_values(ascending=True)[:4], orientation=\"h\",\n            color_discrete_sequence=[\"goldenrod\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=f'76% of all respondents use Linear or Logistic Regression',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=False)\npop_ml = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_ml[df_ml.iloc[:,-1]==country])\nif pop_ml=='Linear or Logistic Regression':\n    if most_pop_pct > 76:\n        title = f'{pop_ml} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ml} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ml} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=True)[:4], orientation=\"h\",\n            color_discrete_sequence=[\"purple\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","80125272":"cv_cols = [col for col in df.columns \n           if \"Which categories of computer vision methods do you use on a regular basis?\" in col]\ndf_cv = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cv_cols]\nmapping_dict = dict(zip(cv_cols,mapper))\ndf_cv = df_cv[cv_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_cv.dropna(how='all', subset=mapper, inplace=True)\ndf_cv.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_cv[df_cv.columns[:-2]].count().sort_values(ascending=True)[:2], orientation=\"h\",\n            color_discrete_sequence=[\"orange\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=f'59% of all respondents use Image classification and other general purpose networks',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_cv[df_cv.iloc[:,-1]==country][df_cv.columns[:-2]].count().sort_values(ascending=False)\npop_cv = country_most_pop.index[0]\nif '(' in pop_cv:\n    pop_cv = pop_cv.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_cv[df_cv.iloc[:,-1]==country])\nif pop_cv=='Image classification and other general purpose networks':\n    if most_pop_pct > 59:\n        title = f'{pop_cv} are even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\n    else:\n        title = f'{pop_cv} remain the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_cv} are popular,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis\"\n\nfig = px.bar(df_cv[df_cv.iloc[:,-1]==country][df_cv.columns[:-2]].count().sort_values(ascending=True)[:2], orientation=\"h\",\n            color_discrete_sequence=[\"violet\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","8ce1f5ba":"nlp_cols = [col for col in df.columns \n           if \"Which of the following natural language processing (NLP) methods do you use on a regular basis?\" in col]\ndf_nlp = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in nlp_cols]\nmapping_dict = dict(zip(nlp_cols,mapper))\ndf_nlp = df_nlp[nlp_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_nlp.dropna(how='all', subset=mapper, inplace=True)\ndf_nlp.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_nlp[df_nlp.columns[:-2]].count().sort_values(ascending=True)[:2], orientation=\"h\",\n            color_discrete_sequence=[\"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=f'55% of all respondents use Word embeddings\/vectors',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_nlp[df_nlp.iloc[:,-1]==country][df_nlp.columns[:-2]].count().sort_values(ascending=False)\npop_nlp = country_most_pop.index[0]\nif '(' in pop_nlp:\n    pop_nlp = pop_nlp.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_nlp[df_nlp.iloc[:,-1]==country])\nif pop_nlp.strip()=='Word embeddings\/vectors':\n    if most_pop_pct > 55:\n        title = f'{pop_nlp} are even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\n    else:\n        title = f'{pop_nlp} remain the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_nlp} are popular,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis\"\n\nfig = px.bar(df_nlp[df_nlp.iloc[:,-1]==country][df_nlp.columns[:-2]].count().sort_values(ascending=True)[:2], orientation=\"h\",\n            color_discrete_sequence=[\"blue\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","82eb5d5f":"ccp_cols = [col for col in df.columns \n           if \"Which of the following cloud computing platforms do you use on a regular basis?\" in col]\ndf_ccp = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in ccp_cols]\nmapping_dict = dict(zip(ccp_cols, mapper))\ndf_ccp = df_ccp[ccp_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ccp.dropna(how='all', subset=mapper, inplace=True)\ndf_ccp.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_ccp[df_ccp.columns[:-2]].count().sort_values(ascending=True)[:2], orientation=\"h\",\n            color_discrete_sequence=[\"goldenrod\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=f'41% of all respondents use Alibaba',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ccp[df_ccp.iloc[:,-1]==country][df_ccp.columns[:-2]].count().sort_values(ascending=False)\npop_ccp = country_most_pop.index[0].strip()\nif '(' in pop_ccp:\n    pop_ccp = pop_ccp.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_ccp[df_ccp.iloc[:,-1]==country])\nif pop_ccp == 'Amazon Web Services (AWS)':\n    if most_pop_pct > 41:\n        title = f'{pop_ccp} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ccp} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ccp} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ccp[df_ccp.iloc[:,-1]==country][df_ccp.columns[:-2]].count().sort_values(ascending=True)[:2], orientation=\"h\",\n            color_discrete_sequence=[\"pink\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","a6f0d3ee":"ccp_cols = [col for col in df.columns \n           if \"Do you use any of the following cloud computing products on a regular basis?\" in col]\ndf_ccp = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in ccp_cols]\nmapping_dict = dict(zip(ccp_cols, mapper))\ndf_ccp = df_ccp[ccp_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ccp.dropna(how='all', subset=mapper, inplace=True)\ndf_ccp.drop(columns=['No \/ None'], inplace=True)\n\nfig = px.bar(df_ccp[df_ccp.columns[:-2]].count().sort_values(ascending=True)[:2], orientation=\"h\",\n            color_discrete_sequence=[\"red\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=f'36% of all respondents use Amazon EC2',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ccp[df_ccp.iloc[:,-1]==country][df_ccp.columns[:-2]].count().sort_values(ascending=False)\npop_ccp = country_most_pop.index[0].strip()\nif '(' in pop_ccp:\n    pop_ccp = pop_ccp.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_ccp[df_ccp.iloc[:,-1]==country])\nif pop_ccp == 'Amazon EC2':\n    if most_pop_pct > 36:\n        title = f'{pop_ccp} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ccp} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ccp} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ccp[df_ccp.iloc[:,-1]==country][df_ccp.columns[:-2]].count().sort_values(ascending=True)[:2], orientation=\"h\",\n            color_discrete_sequence=[\"black\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","425eed7c":"role_cols = [col for col in df.columns \n           if \"Select any activities that make up an important part of your role at work\" in col]\ndf_role = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in role_cols]\nmapping_dict = dict(zip(role_cols,mapper))\ndf_role = df_role[role_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_role.dropna(how='all', subset=mapper, inplace=True)\n\nfig = px.bar(df_role[df_role.columns[:-2]].count().sort_values(ascending=True)[:2], orientation=\"h\",\n            color_discrete_sequence=[\"yellow\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=f'21% of all respondents are involved in ML research',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_role[df_role.iloc[:,-1]==country][df_role.columns[:-2]].count().sort_values(ascending=False)\nresearch_cnt = country_most_pop.loc['Do research that advances the state of the art of machine learning']\nresearch_pct = research_cnt*100\/len(df_role[df_role.iloc[:,-1]==country])\nif research_pct > 21:\n    title = f'At {research_pct:.0f}%, more Kagglers from {country} are involved in ML research than the global average'\nelif research_pct < 21:\n    title = f'At {research_pct:.0f}%, less Kagglers from {country} are involved in ML research than the global average'\nelse:\n    title = f'At {research_pct:.0f}%, the percentage of Kagglers {country} involved in ML research is the same as the global average'\n\nfig = px.bar(df_role[df_role.iloc[:,-1]==country][df_role.columns[:-2]].count().sort_values(ascending=True)[:2], orientation=\"h\",\n            color_discrete_sequence=[\"orange\", \"green\", \"magenta\", \"goldenrod\", \"red\"])\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","44a5bde8":"# <div class=\"subsection_title\">2.4.12 Cloud Computing Products<\/div>\n\nOnly includes respondents who chose atleast one option for the question 'Do you use any of the following cloud computing products on a regular basis?'","f25dcd06":"- In Spain, 86% are men and the rest are unspecified.","87b4504c":"# <div class=\"subsection_title\">2.4.8 Machine Learning Algorithms<\/div>\n\nOnly includes respondents who chose atleast one option for the question 'Which of the following ML algorithms do you use on a regular basis?'","65e679a9":"# <div class=\"section_title\">2.3 Demographic study<\/div>","89b2f696":"# <div class=\"subsection_title\">2.4.4 IDE<\/div> \n\nOnly includes respondents who chose atleast one option for the question 'Which of the following integrated development environments (IDE's) do you use on a regular basis?'","9dec60ab":"# <div class=\"subsection_title\">2.4.5 Hosted Notebooks<\/div>  \n\nOnly includes respondents who chose atleast one option for the question 'Which of the following hosted notebook products do you use on a regular basis?'","b2f90903":"\n# <div class=\"subsection_title\">2.4.2 Job title<\/div> \n\nOnly includes respondents who answered the question \"Select the title most similar to your current role (or most recent title if retired)\"","79725a89":"# <div class=\"subsection_title\">2.3.1 Age<\/div>","f33dca69":"# <div class=\"subsection_title\">2.4.3 Programming language<\/div>  \n\nOnly includes respondents who chose atleast one option for the question \"What programming languages do you use on a regular basis?\"","5253ddb8":"# <div class=\"subsection_title\">2.3.2 Genders diversity<\/div>","40a3e8c2":"# <div class=\"section_title\">2.4 Background<\/div>\n\n# <div class=\"subsection_title\">2.4.1 Academic qualification<\/div> \n","fc624c48":"# <div class=\"subsection_title\">2.4.6 Data Visualization Library<\/div> \n\nOnly includes respondents who chose atleast one option for the question 'What data visualization libraries or tools do you use on a regular basis?'","a65a56a9":"# <div class=\"subsection_title\">2.4.7 Machine Learning Frameworks<\/div>\n\nOnly includes respondents who chose atleast one option for the question 'Which of the following machine learning frameworks do you use on a regular basis?'","85d586ac":"\n# <div class=\"subsection_title\">2.4.3 Coding Experience<\/div> \n\nOnly includes respondents who answered the question \"For how many years have you been writing code and\/or programming?\"","7719b141":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #66e891;\"><b style=\"color:#013815;\">\ud83d\udc4d If you liked my notebook give it a like \ud83d\udc4d<\/b><\/h1><\/center>","68124882":"# <div class=\"top_section\">1. Introduction<\/div>\nHello everyone, with this document I intend to give visibility to the kaggles of Spain, where I live. We will ask different questions such as: \n- At what age are more people involved in the world of Data Science?\n- Which platform do you use the most?\n- Does it present statistics similar to the rest of the world?\n\nLet's see it!\n\n# <div class=\"top_section\">2. Data<\/div>\n\n# <div class=\"section_title\">2.1 Import library<\/div>","e6ad5620":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #66e891;\"><b style=\"color:#013815;\"> Acknowledgement: Siddhant Sadangi <\/b><\/h1><\/center>\n\nhttps:\/\/www.kaggle.com\/siddhantsadangi\/your-country-vs-the-world-24-factors-wip","fed1a132":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:400%; padding: 10px; background: #00ff62;\"><b style=\"color:#013815;\">\ud83d\udd96 Are there Spanish participants in the Kaggle community?<\/b><\/h1><\/center>\n\nAuthor| Date\n:--------:|-------\n@Nebul91|2021-11-09","c397515d":"# <div class=\"subsection_title\">2.4.11 Cloud Computing Platforms<\/div>\n\nOnly includes respondents who chose atleast one option for the question 'Which of the following cloud computing platforms do you use on a regular basis?'","353d1859":"# <div class=\"subsection_title\">2.4.10 NLP Methods<\/div>\n\nOnly includes respondents who chose atleast one option for the question 'Which of the following natural language processing (NLP) methods do you use on a regular basis?'","c618ab2a":"- Interestingly, the 25-29 and 45-49 age brackets are the most significant. ","0a4451a9":"# <div class=\"subsection_title\">2.4.9 Computer Vision Methods<\/div>\n\nOnly includes respondents who chose atleast one option for the question 'Which categories of computer vision methods do you use on a regular basis?'","4f1a5f62":"# <div class=\"subsection_title\">2.4.13 Role at Work<\/div> \n\nOnly includes respondents who chose atleast one option for the question 'Select any activities that make up an important part of your role at work'","bea4e7f6":"# <div class=\"section_title\">2.2 Load data<\/div>","bede8b6a":"**Let's see if among all the participants of Kaggle, there are any of Spanish origin. In the final graphs I show two or 4 options so as not to burden the reader. Let's get to it! If you like it, don't forget to give like to continue with the work :)**","34c63e92":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #66e891;\"><b style=\"color:#013815;\">\ud83d\udc83 Spanish in Kaggle \ud83e\udd58<\/b><\/h1><\/center>"}}