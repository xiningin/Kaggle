{"cell_type":{"2720b9f5":"code","9b508f8e":"code","0055e74f":"code","b3ee2d51":"code","acf84962":"code","6cf6a764":"code","16489903":"code","0f91b234":"code","384d54d7":"code","6f51ad78":"code","f9911d14":"code","ae5854d1":"code","dbc28931":"code","14e82eca":"code","d7f98526":"code","2234f092":"code","131c3a6b":"code","eeb5f0dd":"code","a268b198":"code","8f9042ec":"code","79e80077":"code","47c21c60":"code","778a5ff6":"code","b76a8b89":"code","9d57ff81":"code","66904a31":"code","9660b0ea":"code","84b563bc":"code","c88aa2ee":"code","0f7491c0":"code","bb7f01b3":"code","b745a376":"code","fab8c95b":"code","d412575d":"code","7047a630":"code","b21c7da6":"code","a6a862ca":"code","ad909c76":"code","7ff54d43":"code","626f5c36":"code","624df92d":"code","95890a0f":"code","ee271d65":"code","b0d2c975":"code","6438c776":"code","d45f1cc9":"code","41797c4a":"code","835fdab9":"code","730592d8":"code","86c15786":"code","3e87a9eb":"code","49108158":"code","35af6fbb":"code","a49b3b65":"code","3b39c65b":"code","33146d11":"code","21f6f9ae":"code","eadb12af":"code","c7d8b154":"code","4f196078":"code","9c513418":"code","042c78a3":"code","6c253f3a":"code","04e1c22a":"code","e207dc17":"code","f0a7012a":"code","68eb22e0":"code","a930b1e1":"code","2f1ce3ab":"code","6cccb1bc":"code","1d492162":"code","054d7f85":"code","fbc6a9b1":"code","81e1a71c":"code","b1bb591f":"code","ca62f280":"code","260aa082":"code","b8d57d86":"code","aac813eb":"code","9a28ba15":"code","feb8e71c":"code","0829ae8e":"code","44bc8727":"code","12f891de":"code","ab8920ad":"code","4ef044c4":"code","49939a8d":"code","dd9da51e":"code","546ef51e":"code","537ddd0b":"code","9cf498c7":"code","74713b26":"code","3e113c37":"markdown","affbe9f4":"markdown","1deb3042":"markdown","1ef1b4a8":"markdown","f888f136":"markdown","85660aa6":"markdown","bc5d61d5":"markdown","b882bf36":"markdown","2e0e2ec9":"markdown","a4dd5eb5":"markdown","95ebe800":"markdown","cbd6a381":"markdown","fdf5d37a":"markdown","3f3183ec":"markdown","549b1132":"markdown","5e74daab":"markdown","5fff479d":"markdown","4a5964ab":"markdown","4dc384c0":"markdown","50373185":"markdown","4c3ec081":"markdown","8ccb419c":"markdown"},"source":{"2720b9f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b508f8e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0055e74f":"train_data=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","b3ee2d51":"train_data.head()","acf84962":"train_data.shape","6cf6a764":"train_data.columns","16489903":"train_data.info()","0f91b234":"dict={}\nfor i in list(train_data.columns):\n    dict[i]=train_data[i].value_counts().shape[0]\ndata=pd.DataFrame(dict,index=[\"Unique_Count\"]).transpose()\ndata","384d54d7":"train_data.duplicated().sum()","6f51ad78":"train_data.isnull().sum()","f9911d14":"train_data=train_data.drop(['Alley', 'Fence', 'FireplaceQu', 'PoolQC', 'MiscFeature'],axis=1)","ae5854d1":"cat=[]\ncon=[]\nfor i in list(train_data.columns):\n    d=train_data[i].dtype\n    if d == object:\n        cat.append(i)\n    else:\n        con.append(i)","dbc28931":"## Checing the percentage of continous and categorical data in train_dataset\nlen(cat)\/len(list(train_data.columns))","14e82eca":"len(con)\/len(list(train_data.columns))","d7f98526":"for i in list(train_data[con]):\n    train_data[i].fillna(train_data[i].mean(),inplace=True)","2234f092":"def fillna(col):\n    col.fillna(col.value_counts().index[0], inplace=True)\n    return col\ntrain_data[cat]=train_data[cat].apply(lambda col:fillna(col))","131c3a6b":"train_data.isnull().sum()","eeb5f0dd":"train_data.describe().transpose()","a268b198":"test_data.shape","8f9042ec":"test_data.isnull().sum()","79e80077":"test_data=test_data.drop(['Alley','FireplaceQu','MiscFeature','PoolQC','Fence'],axis=1)","47c21c60":"cat1=[]\ncon1=[]\nfor k in list(test_data.columns):\n    d1=test_data[k].dtype\n    if d1 == object:\n        cat1.append(k)\n    else:\n        con1.append(k)","778a5ff6":"len(cat1)\/len(list(test_data.columns))","b76a8b89":"len(con1)\/len(list(test_data.columns))","9d57ff81":"for j in list(test_data[con1]):\n    test_data[j].fillna(test_data[j].mean(),inplace=True)    ","66904a31":"def fillna(col1):\n    col1.fillna(col1.value_counts().index[0], inplace=True)\n    return col1\ntest_data[cat1]=test_data[cat1].apply(lambda col1:fillna(col1))","9660b0ea":"test_data.info()","84b563bc":"test_data.describe().transpose()","c88aa2ee":"## Top 10 features which can influence Our SalePrice\ndata=train_data.copy()\nX =data.drop(\"SalePrice\",axis=1)  #independent columns\ny =data[\"SalePrice\"]    #target column i.e price range\nX=pd.get_dummies(X,drop_first=True)\ny=pd.get_dummies(y,drop_first=True)\nfrom sklearn.ensemble import ExtraTreesClassifier\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\n# print(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()","0f7491c0":"## Let see MSsubClass\nplt.hist(train_data['MSSubClass'],bins=50)\nplt.title(\"Distribution of MSSubClass Area\")\nplt.xlabel('MSSubClass')\nplt.ylabel('Frequency')","bb7f01b3":"## Lets see the relation between MSSubClass and SalePrice\nsns.scatterplot(x=train_data['MSSubClass'],y=train_data['SalePrice'])","b745a376":"## Lets See the percentage of MSZoning(different areas)\nplt.figure(figsize=(7,8))\npie_data=train_data[\"MSZoning\"].value_counts()\nlabels=[\"Residential Low Density\",\"Residential Medium Density\",\"Floating Village Residential\",'Residential High Density','Commercial']\nplt.pie(pie_data,labels=labels,autopct=\"%1.1f%%\",shadow=True,explode=(0, 0.0, 0.0, 0.1, 0.3))\npie_data","fab8c95b":"#Effect of MSZoning on SalePrice\nfig=sns.barplot(x=train_data[\"MSZoning\"],y=train_data['SalePrice'])\nfig.set_xticklabels(labels=[\"Residential Low Density\",\"Residential Medium Density\",\n                            \"Floating Village Residential\",\"Residential High Density\",\"Commercial\"],\n                    rotation=90)","d412575d":"## Lets see the street variable\nstreet=train_data['Street'].value_counts()\nlabels=[\"Pave\",\"Grvl\"]\nplt.pie(street,labels=labels,autopct=\"%1.1f%%\",explode=(0,0.1),shadow=True)\nplt.title(\"Distributon of Street Variable\")","7047a630":"## Effect of Street variable on Saleprice\nfig=sns.barplot(x=train_data['Street'],y=train_data[\"SalePrice\"])\nfig.set_xticklabels(labels=[\"Pave\",'Grvl'])","b21c7da6":"## Lot Area\nplt.hist(train_data['LotArea'],bins=50)\nplt.title(\"Distribution of Lot Area\")\nplt.xlabel(\"LotArea\")\nplt.ylabel(\"'Frequency\")","a6a862ca":"#Effect of LotArea on SalePrice\ntable=pd.pivot_table(train_data,index=\"LotArea\",values=['SalePrice'])\ntable","ad909c76":"px.scatter(train_data,x=\"LotArea\",y='SalePrice',color='SalePrice')","7ff54d43":"Gr=train_data['GrLivArea']\nplt.hist(Gr,bins=50)\nplt.title(\"Distribution of GrLivArea\")\nplt.xlabel('GrLivArea')\nplt.ylabel('Frequency')","626f5c36":"## Effect of GrLivArea on SalesPrice\npd.pivot_table(train_data,index='GrLivArea',values='SalePrice')","624df92d":"px.scatter(train_data,x='GrLivArea',y='SalePrice',color='SalePrice')","95890a0f":"## Let see BsmtUnfSF variabe\nBs=train_data['BsmtUnfSF']\nplt.hist(Bs,bins=50)\nplt.title(\"Distribution of BsmtUnfSF\")\nplt.xlabel('BsmtUnfSF')\nplt.ylabel('Frequency')","ee271d65":"## Effect of BsmtUnfSF on SalePrice\npivot=pd.pivot_table(train_data,index='BsmtUnfSF',values='SalePrice')\npivot.head(10)","b0d2c975":"px.scatter(train_data,x='BsmtUnfSF',y='SalePrice',color='SalePrice')","6438c776":"# Lets See 1stFlrSF variable\nplt.hist(x=train_data['1stFlrSF'],bins=50)\nplt.title(\"Disrtibution of 1stFlrSF Variable\")\nplt.xlabel('1stFlrSF')\nplt.ylabel(\"Frequency\")","d45f1cc9":"pd.pivot_table(train_data,index='1stFlrSF',values=['SalePrice'])","41797c4a":"px.scatter(train_data,x=\"1stFlrSF\",y=\"SalePrice\",color='SalePrice')","835fdab9":"## Lets Explore TotalBsmtSF Varible\nplt.hist(x=train_data['TotalBsmtSF'],bins=50)\nplt.title(\"Disrtibution of TotalBsmtSF Variable\")\nplt.xlabel('TotalBsmtSF')\nplt.ylabel(\"Frequency\")","730592d8":"pd.pivot_table(train_data,index='TotalBsmtSF',values=['SalePrice'])","86c15786":"px.scatter(train_data,x=\"TotalBsmtSF\",y=\"SalePrice\",color='SalePrice')","3e87a9eb":"## Lets Explore GarageArea variable\nplt.hist(x=train_data['GarageArea'],bins=50)\nplt.title(\"Disrtibution of GarageArea Variable\")\nplt.xlabel('GarageArea')\nplt.ylabel(\"Frequency\")","49108158":"pd.pivot_table(train_data,index=['GarageArea'],values='SalePrice')","35af6fbb":"px.scatter(train_data,x=\"GarageArea\",y=\"SalePrice\",color='SalePrice')","a49b3b65":"## Lets see GarageQual Variable effect on SalePrice\nGarage_Qual=train_data['GarageQual'].value_counts()\nGarage_Qual\nfig=sns.barplot(x=train_data['GarageQual'],y=train_data[\"SalePrice\"])\nfig.set_xticklabels(labels=[\"TA\",\"Fa\",\"Gd\",\"Po\",\"Ex\"])","3b39c65b":"garage_cars=train_data[['GarageCars', 'SalePrice']]\npd.pivot_table(garage_cars,index=['GarageCars'],values='SalePrice',aggfunc=np.sum)","33146d11":"fig = sns.barplot(x='GarageCars', y='SalePrice', data=train_data)\nfig.set_xlabel(\"No. of Cars\")","21f6f9ae":"## Lets Explore MoSold Variable\nplt.hist(train_data['MoSold'],bins=50)\nplt.title('Distribution of MoSold Variable')\nplt.xlabel(\"MoSold\")\nplt.ylabel('Frequency')","eadb12af":"## Effect of Mosold on saleprice\nmo=train_data[['MoSold','SalePrice']]\npd.pivot_table(mo,index=['MoSold'],values='SalePrice',aggfunc=np.sum)","c7d8b154":"fig=sns.barplot(x=\"MoSold\",y='SalePrice',data=train_data)\nfig.set_xticklabels(labels=['January','February','March','April','May','June','July','August','September','October','November','December'],rotation=90)\nfig.set_title(\"Month Sold Vs SalePrice\")","4f196078":"px.scatter(train_data,x='MoSold',y='SalePrice',color='MoSold',size=\"MoSold\")","9c513418":"## Lets Explore YearBuilt Variable\nplt.hist(train_data['YearBuilt'],bins=50)\nplt.title(\"DIstribution of Year Built Variable\")\nplt.xlabel(\"YearBuilt\")\nplt.ylabel('Frequency')","042c78a3":"## Effect of YearBuilt On SalePrice\nfig_dims = (10, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.lineplot(x=train_data['YearBuilt'],y=train_data['SalePrice'],ax=ax)","6c253f3a":"## Lets Explore Remodeldate Variable\nplt.hist(train_data['YearRemodAdd'],bins=50)\nplt.title('Distribution of Remodel date')\nplt.xlabel('Remodel Year')\nplt.ylabel('Frequency')","04e1c22a":"## Effect of YearRemodAdd on SalePrice\nfig_dims = (10, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.lineplot(x=train_data['YearRemodAdd'],y=train_data['SalePrice'],ax=ax)","e207dc17":"from sklearn.preprocessing import LabelEncoder,StandardScaler,RobustScaler\nfrom sklearn.linear_model import LinearRegression,Lasso,ElasticNet\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\nfrom sklearn.pipeline import make_pipeline\nimport xgboost as xgb\nfrom prettytable import PrettyTable","f0a7012a":"X_train=train_data.drop('SalePrice',axis=1)\nY_train=train_data['SalePrice']","68eb22e0":"X_test=test_data.copy()","a930b1e1":"label=LabelEncoder()\nfor i in list(X_test[cat1]):\n    X_test[i]=label.fit_transform(X_test[i])","2f1ce3ab":"for j in list(X_train[cat]):\n    X_train[j]=label.fit_transform(X_train[j])","6cccb1bc":"# scaling the features\nfrom sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nX_Scaler_train=scaler.fit_transform(X_train)\nX_Scaler_test=scaler.transform(X_test)","1d492162":"model=LinearRegression()\nmodel.fit(X_Scaler_train,Y_train)","054d7f85":"Y_predict=model.predict(X_Scaler_test)\nY_train_predict=model.predict(X_Scaler_train)","fbc6a9b1":"score_lr=r2_score(Y_train,Y_train_predict)\nprint(f\"R2 train Score Of Linear Regression : {score_lr}\")","81e1a71c":"clf=RandomForestRegressor()\nclf.fit(X_Scaler_train,Y_train)","b1bb591f":"Y_pred_random=clf.predict(X_Scaler_test)\nY_train_random=clf.predict(X_Scaler_train)","ca62f280":"score_rf=r2_score(Y_train,Y_train_random)\nprint(f\"R2 train Score Of Random Forest Regressor : {score_rf}\")","260aa082":"gr=GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\ngr.fit(X_Scaler_train,Y_train)","b8d57d86":"pred_gr=gr.predict(X_Scaler_test)\npred_gr_train=gr.predict(X_Scaler_train)","aac813eb":"score_gr=r2_score(Y_train,pred_gr_train)\nprint(f\"R2 train Score Of GragientBoostRegressor : {score_gr}\")","9a28ba15":"lasso = make_pipeline(RobustScaler(), Lasso(alpha=0.0005, random_state=1))","feb8e71c":"lasso.fit(X_Scaler_train,Y_train)","0829ae8e":"lasso_pred=lasso.predict(X_Scaler_test)\nlasso_pred_train=lasso.predict(X_Scaler_train)","44bc8727":"score_lasso=r2_score(Y_train,lasso_pred_train)\nprint(f\"R2 train Score Of Lasso : {score_lasso}\")","12f891de":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","ab8920ad":"model_xgb.fit(X_Scaler_train,Y_train)","4ef044c4":"pred_xgb=model_xgb.predict(X_Scaler_test)\npred_xgb_train=model_xgb.predict(X_Scaler_train)","49939a8d":"score_xgb=r2_score(Y_train,pred_xgb_train)\nprint(f\"R2 train Score Of XGBRegressor : {score_xgb}\")","dd9da51e":"Enet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005,\n                                                l1_ratio=.9, random_state=3))","546ef51e":"Enet.fit(X_Scaler_train,Y_train)","537ddd0b":"Enet_predict=Enet.predict(X_Scaler_test)\nEnet_train_predict=Enet.predict(X_Scaler_train)","9cf498c7":"score_enet=r2_score(Y_train,Enet_train_predict)\nprint(f\"R2 train Score Of Enet : {score_enet}\")","74713b26":"from prettytable import PrettyTable\nScoring_table=PrettyTable(['Algorithm',\"r2 Score\"])\nScoring_table.add_row([\"Linear Regression\",score_lr])\nScoring_table.add_row([\"RandomForest Regressor\",score_rf])\nScoring_table.add_row([\"Lasso\",score_lasso])\nScoring_table.add_row([\"XGBRegressor\",score_xgb])\nScoring_table.add_row([\"GradientBoosterRegressor\",score_gr])\nScoring_table.add_row([\"Enet Regression\",score_enet])\nprint(Scoring_table)","3e113c37":"## Separating the Continous and Categorical Data","affbe9f4":"## Fixing Missing Values in Test Dataset","1deb3042":"## Stastical Analysis","1ef1b4a8":"## Fixing the Missing Values in Train Dataset","f888f136":"## Lassso Regression","85660aa6":"## Exploring the data","bc5d61d5":"## Linear Regression Model","b882bf36":"## Checking Missing Values in Train Dataset","2e0e2ec9":"## Separating continous and categorical Variable in Test Dataset","a4dd5eb5":"1)We can see that 1-STORY 1946 & NEWER ALL STYLES and 2-STORY 1946 & NEWER have higher prices.\n\n2)While 2-STORY 1945 & OLDER,STORY ALL AGES OR MULTI-LEVEL SPLIT FOYER,DUPLEX - ALL STYLES AND AGES have less prize\n\n3)While 2 FAMILY CONVERSION - ALL STYLES AND AGES,2-STORY PUD - 1946 & NEWERPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER are the cheapest houses..\n","95ebe800":"## GradientBoosting Regressor","cbd6a381":"## Enet Regression","fdf5d37a":"## Coverting all variable into numerical variable","3f3183ec":"## XGB Regressor","549b1132":"## Basic Features","5e74daab":"## Train_Test Spilliting","5fff479d":"## Randomforest Regressor","4a5964ab":"## Finding Missing Values in Test Dataset","4dc384c0":"## Importing Required Libraries","50373185":"## Model Predicting","4c3ec081":"## Top Features which can effect SalePrice","8ccb419c":"## Visualization of Data"}}