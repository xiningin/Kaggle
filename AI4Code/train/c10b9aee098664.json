{"cell_type":{"ad33f71b":"code","00b373eb":"code","580b816a":"code","ec9515f5":"code","995ceba1":"code","a4978b78":"code","55686e11":"code","1a678716":"code","126e394b":"code","056d5db6":"code","a16e070d":"code","fb417637":"code","248bb8e7":"markdown","885dadc0":"markdown","0bc6ceab":"markdown","253e6b4b":"markdown","2ba1ed23":"markdown","ef068b9e":"markdown","f954881c":"markdown","f3a9d48c":"markdown","f9210bda":"markdown","affa045c":"markdown","7b43d266":"markdown","d7582f61":"markdown","4e7ae6c2":"markdown","4edc770a":"markdown"},"source":{"ad33f71b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","00b373eb":"data=pd.read_csv('\/kaggle\/input\/infosys-stock-price-nyse\/INFY.csv',parse_dates=['Date'],index_col='Date')\ndata.head()","580b816a":"data['Day']=data.index.day\ndata['DayOfWeek']=data.index.dayofweek\ndata.head()","ec9515f5":"import matplotlib.pyplot as plt\nplt.figure(figsize=(30,7))\nplt.plot(data.index,data['Close'])\nplt.show()","995ceba1":"train_size=int(len(data)*0.9)\ntrain,test=data.iloc[:train_size],data.iloc[train_size:len(data)]\ntrain.shape,test.shape","a4978b78":"from sklearn.preprocessing import MinMaxScaler\n\nrs_data = MinMaxScaler()\nrs_target = MinMaxScaler()\n\ntarget=data['Close']\ndata.drop(columns=['Close'],inplace=True)\n\ntrain.loc[:,data.columns]=rs_data.fit_transform(train.loc[:,data.columns].to_numpy())\ntrain['Close']=rs_target.fit_transform(train[['Close']].to_numpy())\ntest.loc[:,data.columns]=rs_data.fit_transform(test.loc[:,data.columns].to_numpy())\ntest['Close']=rs_target.fit_transform(test[['Close']].to_numpy())","55686e11":"import numpy as np\ndef create_dataset(X, y, time_steps=1):\n    Xs, ys = [], []\n    for i in range(len(X) - time_steps):\n        v = X.iloc[i:(i + time_steps)].values\n        Xs.append(v)\n        ys.append(y.iloc[i + time_steps])\n    return np.array(Xs), np.array(ys)","1a678716":"time_steps=5\n\nx_train, y_train = create_dataset(train, train['Close'], time_steps)\nx_test, y_test = create_dataset(test, test['Close'], time_steps)\n\nx_train.shape,x_test.shape","126e394b":"import keras\nmodel = keras.Sequential()\nmodel.add(keras.layers.Conv1D(filters=32, kernel_size=5,\n                      strides=1, padding=\"causal\",\n                      activation=\"relu\",\n                      input_shape=(x_train.shape[1], x_train.shape[2])))\nmodel.add(\n  keras.layers.Bidirectional(\n    keras.layers.LSTM(\n      units=128,return_sequences=True\n    )\n  ))\nmodel.add(\n  keras.layers.Bidirectional(\n  keras.layers.LSTM(\n  units=500,return_sequences=True\n    )\n  ))\nmodel.add(\n  keras.layers.Bidirectional(\n  keras.layers.LSTM(units=500)\n  )\n)\nmodel.add(keras.layers.Dropout(rate=0.25))\nmodel.add(keras.layers.Dense(units=100,activation='relu'))\nmodel.add(keras.layers.Dense(10, activation=\"relu\"))\nmodel.add(keras.layers.Dense(units=1))\nmodel.compile(loss=keras.losses.Huber(),\n              optimizer='adam',\n              metrics=[\"mse\"])","056d5db6":"history = model.fit(\n    x_train, y_train,\n    epochs=50,\n    batch_size=32,\n    validation_split=0.35,\n    shuffle=False,\n    verbose=1\n)","a16e070d":"pred=model.predict(x_test)\ny_train_inv=rs_target.inverse_transform(y_train.reshape(1,-1))\ny_test_inv=rs_target.inverse_transform(y_test.reshape(1,-1))\npred=rs_target.inverse_transform(pred.reshape(1,-1))","fb417637":"plt.plot(y_test_inv.flatten(),marker='.',label='True')\nplt.plot(pred.flatten(),'r',marker='.',label='Predicted')\nplt.legend()\nplt.show()","248bb8e7":"Plot of the target variable , i.e Close Price","885dadc0":"We take a 90-10 split of the data, You can experiment with the split size.","0bc6ceab":"**Model Creation**","253e6b4b":"Although the plot looks pretty satisfactory, I still feel there is room for plenty of improvement, Can try with tweaking the hyperparameters such as timesteps and also the train-test-split values. Try it out and also please upvote this notebook if this has been a good learning experience.","2ba1ed23":"Here we take the past 5 days close price to predict the 6th day close price with all the other parameters of the data too.","ef068b9e":"This is by far the most important snipet of the projct. Here we create the main data., i.e Here we use the previous time stamp data values of the time series as the data and the current time value as target, In the next instance, the current value goes on with the data and the next value is considered as the target.Hope it makes sense ;p.","f954881c":"**Visualizations**","f3a9d48c":"**Reading Data**","f9210bda":"**Model Training**","affa045c":"The Conv-1D layer is technically added to smooth out the input vector which is our data. This helps the LSTM underneath to preform really well on the smoothened data.","7b43d266":"Since the features are of various numeric ranges, So with MinMax Scaler we get th variables down to range [0,1].","d7582f61":"**Data Preprocessing**","4e7ae6c2":"Get the Day and Day of week as features to predict the Closing price of the stock","4edc770a":"Since we had scaled the values previously, Now to compare with the actual values and also get correct predictions we have to scale them back to their original range."}}