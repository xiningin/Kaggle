{"cell_type":{"d4ddbb75":"code","2170bfd8":"code","e482c4a7":"code","8229b504":"code","46237f1d":"code","99dffdd8":"code","bb12fcca":"code","309b073a":"code","9a97a90c":"code","870a8728":"code","b811fc38":"code","7a3c84f6":"code","3475d464":"code","68169b6e":"code","f4f8d73a":"code","d5e01fce":"code","6ef3d1c4":"code","98552348":"code","d4a5d705":"code","1462cb11":"code","e2bff0ce":"code","e7e2d1ce":"code","3a6a9fc4":"code","8584de4a":"code","1c46095e":"code","76a11d2a":"code","ed1997f5":"code","4a49f7a9":"code","2b4910dc":"code","86e98631":"code","ca6383c3":"code","303556b3":"code","8f96f66b":"code","e92b14fd":"code","37677960":"code","40362cb3":"code","e1c6725c":"code","55fbc9bd":"code","1c53a2dd":"code","44cfc62b":"code","a150b5b5":"code","8e9f8570":"code","2727497f":"code","90ac065e":"code","1aea87ca":"code","61425d73":"code","e7ab4d68":"code","ccb5ed17":"code","9a2ce1c8":"code","23445bc7":"code","6c303fa2":"code","1020d1f2":"code","79610008":"code","e1997ef7":"code","fb2ca94c":"code","def85515":"code","cca1a919":"code","59034cce":"code","a40e1cfd":"code","005e84b3":"code","f3527e2b":"code","7e20567f":"markdown","e07c02b0":"markdown","143888ba":"markdown","8433b270":"markdown","8418d4f9":"markdown","cb6a51b1":"markdown","0d582605":"markdown","6851dc5b":"markdown","013cae3c":"markdown","d8f2441e":"markdown","d45c56b9":"markdown","ed8294db":"markdown","7435ee8c":"markdown"},"source":{"d4ddbb75":"# Import the necessary libraries\nimport numpy as np\nimport pandas as pd\nimport os\nimport time\nimport warnings\nimport os\nfrom six.moves import urllib\nimport matplotlib\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings('ignore')","2170bfd8":"#Add All the Models Libraries\n\n# Scalers\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.utils import shuffle\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import FeatureUnion\n\n# Models\nfrom sklearn.linear_model import LogisticRegression #logistic regression\nfrom sklearn.svm import SVC # Support Vector Classifier\nfrom sklearn.ensemble import RandomForestClassifier #Random Forest\nfrom sklearn.neighbors import KNeighborsClassifier #KNN\nfrom sklearn.ensemble import ExtraTreesClassifier \nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier #Decision Tree\nfrom sklearn.ensemble import BaggingClassifier\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split #training and testing data split\nfrom sklearn import metrics #accuracy measure\nfrom sklearn.metrics import confusion_matrix #for confusion matrix\nfrom scipy.stats import reciprocal, uniform\n\nfrom sklearn.ensemble import AdaBoostClassifier\n\n\n# Cross-validation\nfrom sklearn.model_selection import KFold #for K-fold cross validation\nfrom sklearn.model_selection import cross_val_score #score evaluation\nfrom sklearn.model_selection import cross_val_predict #prediction\nfrom sklearn.model_selection import cross_validate\n\n# GridSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#Common data processors\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.utils import check_array\nfrom scipy import sparse\n\n#Accuracy Score\nfrom sklearn.metrics import accuracy_score","e482c4a7":"# to make this notebook's output stable across runs\nnp.random.seed(123)\n\n# To plot pretty figures\n%matplotlib inline\nplt.rcParams['axes.labelsize'] = 14\nplt.rcParams['xtick.labelsize'] = 12\nplt.rcParams['ytick.labelsize'] = 12","8229b504":"#merge the data for feature engineering and later split it, just before applying Data Pipeline\nTrainFile = pd.read_csv(\"..\/input\/train.csv\") #read the data from the csv file.\nTestFile = pd.read_csv(\"..\/input\/test.csv\")\npassenger_id_test = TestFile[\"PassengerId\"].copy()\nDataFile = TrainFile.append(TestFile)","46237f1d":"TrainFile.shape","99dffdd8":"TestFile.shape","bb12fcca":"DataFile.describe()","309b073a":"DataFile.info()","9a97a90c":"# First Split the names to gt Mr. or Miss or Mrs.\n\nFirstName = DataFile[\"Name\"].str.split(\"[,.]\")","870a8728":"# now strip the white spaces from the Salutation\ntitles = [str.strip(name[1]) for name in FirstName.values]","b811fc38":"DataFile[\"Title\"] = titles","7a3c84f6":"# Now first we replace the extra titles to Mr and Mrs\n\nmapping = {'Mlle': 'Miss', 'Major': 'Mr', 'Col': 'Mr', 'Sir': 'Mr', 'Don': 'Mr', 'Mme': 'Miss',\n          'Jonkheer': 'Mr', 'Lady': 'Mrs', 'Capt': 'Mr', 'the Countess': 'Mrs', 'Ms': 'Miss', 'Dona': 'Mrs'}\n\nDataFile.replace({'Title': mapping}, inplace=True)","3475d464":"# get the imputed value for FARE\nDataFile['Fare'].fillna(DataFile['Fare'].median(), inplace=True)\n\n#based on the median taken to check fare the imputed value of Embarkment to be \"S\"\nDataFile['Embarked'].fillna(\"S\", inplace=True)\n\n#impute the age based on Titles \ntitles = ['Dr', 'Master', 'Miss', 'Mr', 'Mrs', 'Rev']\nfor title in titles:\n    imputed_age = DataFile.groupby('Title')['Age'].median()[titles.index(title)]\n    DataFile.loc[(DataFile['Age'].isnull()) & (DataFile['Title'] == title), 'Age'] = imputed_age","68169b6e":"# Merge SibSp and Parch into one\nDataFile[\"Family Size\"] = DataFile[\"SibSp\"] + DataFile[\"Parch\"] + 1\n\n#Make Family Bins\nDataFile[\"Family Size\"] = pd.cut(DataFile[\"Family Size\"], bins=[0,1,4,20], labels=[1,2,3])","f4f8d73a":"#Making Fare bins\n\nDataFile['FareBin'] = pd.qcut(DataFile['Fare'], 5)\n\nlabel = LabelEncoder()\nDataFile['FareBin'] = label.fit_transform(DataFile['FareBin'])\n\n#Making Age Bins\nDataFile['AgeBin'] = pd.qcut(DataFile['Age'], 4)\n\nlabel = LabelEncoder()\nDataFile['AgeBin'] = label.fit_transform(DataFile['AgeBin'])\n","d5e01fce":"#create a dummy for male and female\nDataFile['Sex'].replace(['male','female'],[0,1],inplace=True)","6ef3d1c4":"##ADDED NEW CODE TO THE EXISTING PROGRAM\nDataFile['Last_Name'] = DataFile['Name'].apply(lambda x: str.split(x, \",\")[0])\n\nDEFAULT_SURVIVAL_VALUE = 0.5\nDataFile['Family_Survival'] = DEFAULT_SURVIVAL_VALUE\n\nfor grp, grp_df in DataFile[['Survived','Name', 'Last_Name', 'Fare', 'Ticket', 'PassengerId',\n                           'SibSp', 'Parch', 'Age', 'Cabin']].groupby(['Last_Name', 'Fare']):\n    \n    if (len(grp_df) != 1):\n        # A Family group is found.\n        for ind, row in grp_df.iterrows():\n            smax = grp_df.drop(ind)['Survived'].max()\n            smin = grp_df.drop(ind)['Survived'].min()\n            passID = row['PassengerId']\n            if (smax == 1.0):\n                DataFile.loc[DataFile['PassengerId'] == passID, 'Family_Survival'] = 1\n            elif (smin==0.0):\n                DataFile.loc[DataFile['PassengerId'] == passID, 'Family_Survival'] = 0\n\nprint(\"Number of passengers with family survival information:\", \n      DataFile.loc[DataFile['Family_Survival']!=0.5].shape[0])","98552348":"for _, grp_df in DataFile.groupby('Ticket'):\n    if (len(grp_df) != 1):\n        for ind, row in grp_df.iterrows():\n            if (row['Family_Survival'] == 0) | (row['Family_Survival']== 0.5):\n                smax = grp_df.drop(ind)['Survived'].max()\n                smin = grp_df.drop(ind)['Survived'].min()\n                passID = row['PassengerId']\n                if (smax == 1.0):\n                    DataFile.loc[DataFile['PassengerId'] == passID, 'Family_Survival'] = 1\n                elif (smin==0.0):\n                    DataFile.loc[DataFile['PassengerId'] == passID, 'Family_Survival'] = 0\n                        \nprint(\"Number of passenger with family\/group survival information: \" \n      +str(DataFile[DataFile['Family_Survival']!=0.5].shape[0]))","d4a5d705":"#drop SibSp and Parch\nDataFile = DataFile.drop(['SibSp','Parch','Age','Fare',\n                          'Last_Name','Name','PassengerId',\n                          \"Ticket\",\"Cabin\",\"Embarked\"],axis=1)","1462cb11":"#Now split Back The data to training and test set - before applying the pipeline\n\ntrain_set, test_set = train_test_split(DataFile, test_size=0.3193,shuffle=False)","e2bff0ce":"train_set.shape # This exactly matches the original training set","e7e2d1ce":"test_set.shape # This exactly matches the original test set","3a6a9fc4":"#Check for the missing values to check if any random extraction happened? Validate that shuffle was false\n\nobs = train_set.isnull().sum().sort_values(ascending = False)\npercent = round(train_set.isnull().sum().sort_values(ascending = False)\/len(train_set)*100, 2)\npd.concat([obs, percent], axis = 1,keys= ['Number of Observations', 'Percent'])","8584de4a":"#Check for the missing values to check if any random extraction happened? Validate that shuffle was false\n\nobs = test_set.isnull().sum().sort_values(ascending = False)\npercent = round(test_set.isnull().sum().sort_values(ascending = False)\/len(test_set)*100, 2)\npd.concat([obs, percent], axis = 1,keys= ['Number of Observations', 'Percent'])","1c46095e":"# Now define x and y.\n\n#the Y Variable\ntrain_set_y = train_set[\"Survived\"].copy()\ntest_set_y = test_set[\"Survived\"].copy()\n\n#the X variables\ntrain_set_X = train_set.drop(\"Survived\", axis=1)\ntest_set_X = test_set.drop(\"Survived\", axis=1)","76a11d2a":"# The CategoricalEncoder class will allow us to convert categorical attributes to one-hot vectors.\n\nclass CategoricalEncoder(BaseEstimator, TransformerMixin):\n    def __init__(self, encoding='onehot', categories='auto', dtype=np.float64,\n                 handle_unknown='error'):\n        self.encoding = encoding\n        self.categories = categories\n        self.dtype = dtype\n        self.handle_unknown = handle_unknown\n\n    def fit(self, X, y=None):\n        \"\"\"Fit the CategoricalEncoder to X.\n        Parameters\n        ----------\n        X : array-like, shape [n_samples, n_feature]\n            The data to determine the categories of each feature.\n        Returns\n        -------\n        self\n        \"\"\"\n\n        if self.encoding not in ['onehot', 'onehot-dense', 'ordinal']:\n            template = (\"encoding should be either 'onehot', 'onehot-dense' \"\n                        \"or 'ordinal', got %s\")\n            raise ValueError(template % self.handle_unknown)\n\n        if self.handle_unknown not in ['error', 'ignore']:\n            template = (\"handle_unknown should be either 'error' or \"\n                        \"'ignore', got %s\")\n            raise ValueError(template % self.handle_unknown)\n\n        if self.encoding == 'ordinal' and self.handle_unknown == 'ignore':\n            raise ValueError(\"handle_unknown='ignore' is not supported for\"\n                             \" encoding='ordinal'\")\n\n        X = check_array(X, dtype=np.object, accept_sparse='csc', copy=True)\n        n_samples, n_features = X.shape\n\n        self._label_encoders_ = [LabelEncoder() for _ in range(n_features)]\n\n        for i in range(n_features):\n            le = self._label_encoders_[i]\n            Xi = X[:, i]\n            if self.categories == 'auto':\n                le.fit(Xi)\n            else:\n                valid_mask = np.in1d(Xi, self.categories[i])\n                if not np.all(valid_mask):\n                    if self.handle_unknown == 'error':\n                        diff = np.unique(Xi[~valid_mask])\n                        msg = (\"Found unknown categories {0} in column {1}\"\n                               \" during fit\".format(diff, i))\n                        raise ValueError(msg)\n                le.classes_ = np.array(np.sort(self.categories[i]))\n\n        self.categories_ = [le.classes_ for le in self._label_encoders_]\n\n        return self\n\n    def transform(self, X):\n        \"\"\"Transform X using one-hot encoding.\n        Parameters\n        ----------\n        X : array-like, shape [n_samples, n_features]\n            The data to encode.\n        Returns\n        -------\n        X_out : sparse matrix or a 2-d array\n            Transformed input.\n        \"\"\"\n        X = check_array(X, accept_sparse='csc', dtype=np.object, copy=True)\n        n_samples, n_features = X.shape\n        X_int = np.zeros_like(X, dtype=np.int)\n        X_mask = np.ones_like(X, dtype=np.bool)\n\n        for i in range(n_features):\n            valid_mask = np.in1d(X[:, i], self.categories_[i])\n\n            if not np.all(valid_mask):\n                if self.handle_unknown == 'error':\n                    diff = np.unique(X[~valid_mask, i])\n                    msg = (\"Found unknown categories {0} in column {1}\"\n                           \" during transform\".format(diff, i))\n                    raise ValueError(msg)\n                else:\n                    # Set the problematic rows to an acceptable value and\n                    # continue `The rows are marked `X_mask` and will be\n                    # removed later.\n                    X_mask[:, i] = valid_mask\n                    X[:, i][~valid_mask] = self.categories_[i][0]\n            X_int[:, i] = self._label_encoders_[i].transform(X[:, i])\n\n        if self.encoding == 'ordinal':\n            return X_int.astype(self.dtype, copy=False)\n\n        mask = X_mask.ravel()\n        n_values = [cats.shape[0] for cats in self.categories_]\n        n_values = np.array([0] + n_values)\n        indices = np.cumsum(n_values)\n\n        column_indices = (X_int + indices[:-1]).ravel()[mask]\n        row_indices = np.repeat(np.arange(n_samples, dtype=np.int32),\n                                n_features)[mask]\n        data = np.ones(n_samples * n_features)[mask]\n\n        out = sparse.csc_matrix((data, (row_indices, column_indices)),\n                                shape=(n_samples, indices[-1]),\n                                dtype=self.dtype).tocsr()\n        if self.encoding == 'onehot-dense':\n            return out.toarray()\n        else:\n            return out","ed1997f5":"class DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        return X[self.attribute_names]","4a49f7a9":"cat_pipeline = Pipeline([\n        (\"selector\", DataFrameSelector(['Title'])),\n        (\"cat_encoder\", CategoricalEncoder(encoding='onehot-dense')),\n    ])\n\nno_pipeline = Pipeline([\n        (\"selector\", DataFrameSelector([\"Sex\",\"Pclass\",\"FareBin\", \"AgeBin\",\"Family Size\",\"Family_Survival\"]))\n    ])","2b4910dc":"full_pipeline = FeatureUnion(transformer_list=[\n    (\"cat_pipeline\", cat_pipeline),\n    (\"no_pipeline\", no_pipeline),\n    ])\n\nfinal_train_X = full_pipeline.fit_transform(train_set_X)\nfinal_test_X = full_pipeline.transform(test_set_X)","86e98631":"#Introduce KNN Classifier \n\nKNeighbours = KNeighborsClassifier()\nleaf_size = list(range(1,25,5))\nn_neighbors = list(range(4,30,2))\n\nparam_grid_KNeighbours = {'n_neighbors' : n_neighbors,\n'algorithm' : ['auto'],\n'weights' : ['uniform', 'distance'],\n'leaf_size':leaf_size}\n\ngrid_search_KNeighbours = GridSearchCV(KNeighbours, param_grid_KNeighbours, cv = 4, scoring='roc_auc', \n                               refit = True, n_jobs = -1, verbose = 2)\n\ngrid_search_KNeighbours.fit(final_train_X, train_set_y)","ca6383c3":"neighbor_grid = grid_search_KNeighbours.best_estimator_\n\ny_pred_neighbor_grid = neighbor_grid.predict(final_train_X)\naccuracy_score(train_set_y, y_pred_neighbor_grid)","303556b3":"# now get the predictions\ny_pred_neigh_rand = neighbor_grid.predict(final_test_X)\n\n# Prepare the predictions file\nresult_test1 = pd.DataFrame()\npassenger_id_test = TestFile[\"PassengerId\"].copy()\nresult_test1[\"PassengerId\"] = passenger_id_test\nresult_test1[\"Survived\"] = y_pred_neigh_rand\n\n# Export the predictions file\n#result_test1.to_csv(\"Titanic_prediction_ashish_KNN.csv\")","8f96f66b":"KNeighbours2 = KNeighborsClassifier()\nleaf_size2 = list(range(8,50,1))\nn_neighbors2 = list(range(5,20,1))\n\nparam_grid_KNeighbours = {'n_neighbors' : n_neighbors2,\n'algorithm' : ['auto'],\n'weights' : ['uniform', 'distance'],\n'leaf_size':leaf_size2}\n\ngrid_search_KNeighbours2 = GridSearchCV(KNeighbours2, param_grid_KNeighbours, cv = 4, scoring='roc_auc', \n                               refit = True, n_jobs = -1, verbose = 2)\n\ngrid_search_KNeighbours2.fit(final_train_X, train_set_y)","e92b14fd":"neighbor_grid2 = grid_search_KNeighbours2.best_estimator_\n\ny_pred_neighbor_grid2 = neighbor_grid2.predict(final_train_X)\naccuracy_score(train_set_y, y_pred_neighbor_grid2)","37677960":"forest_class = RandomForestClassifier(random_state = 42)\n\nn_estimators = [50, 100, 400, 700, 1000]\nmax_features = [5, 7, 10]\nmax_depth = [10, 20] \noob_score = [True, False]\nmin_samples_split = [2, 4, 10, 12, 16]\nmin_samples_leaf = [1, 5, 10] \nmax_leaf_nodes = [2, 10, 20]\n\n\nparam_grid_forest = {'n_estimators' : n_estimators, 'max_features' : max_features,\n                     'max_depth' : max_depth, 'min_samples_split' : min_samples_split,\n                    'oob_score' : oob_score, 'min_samples_leaf': min_samples_leaf, \n                     'max_leaf_nodes' : max_leaf_nodes}\n\n\nrand_search_forest = RandomizedSearchCV(forest_class, param_grid_forest, cv = 4, scoring='roc_auc', refit = True,\n                                 n_jobs = -1, verbose=2)\n\nrand_search_forest.fit(final_train_X, train_set_y)","40362cb3":"random_estimator = rand_search_forest.best_estimator_\n\ny_pred_random_estimator = random_estimator.predict(final_train_X)\naccuracy_score(train_set_y, y_pred_random_estimator)","e1c6725c":"# now get the predictions\ny_pred_forest_rand = random_estimator.predict(final_test_X)\n\n# Prepare the predictions file\nresult_test2 = pd.DataFrame()\npassenger_id_test = TestFile[\"PassengerId\"].copy()\nresult_test2[\"PassengerId\"] = passenger_id_test\nresult_test2[\"Survived\"] = y_pred_forest_rand\n\n# Export the predictions file\n#result_test2.to_csv(\"Titanic_prediction_ashish_RF.csv\")","55fbc9bd":"ada_boost = AdaBoostClassifier(random_state = 42)\n\nn_estimators = [50, 100, 400, 700, 1000]\nlearning_rate = [0.001, 0.01, 0.05, 0.09]\nalgorithm = ['SAMME', 'SAMME.R']\n\nparam_grid_ada = {'n_estimators' : n_estimators, 'learning_rate' : learning_rate, 'algorithm' : algorithm}\n\nrand_search_ada = RandomizedSearchCV(ada_boost, param_grid_ada, cv = 4, scoring='roc_auc', refit = True, n_jobs = -1, verbose = 2)\n\nrand_search_ada.fit(final_train_X, train_set_y)","1c53a2dd":"ada_estimator = rand_search_ada.best_estimator_\n\ny_pred_ada_estimator = ada_estimator.predict(final_train_X)\naccuracy_score(train_set_y, y_pred_ada_estimator)","44cfc62b":"# now get the predictions\ny_pred_ada_rand = ada_estimator.predict(final_test_X)\n\n# Prepare the predictions file\nresult_test3 = pd.DataFrame()\npassenger_id_test = TestFile[\"PassengerId\"].copy()\nresult_test3[\"PassengerId\"] = passenger_id_test\nresult_test3[\"Survived\"] = y_pred_ada_rand\n\n# Export the predictions file\n#result_test3.to_csv(\"Titanic_prediction_ashish_ada.csv\")","a150b5b5":"extra_classifier = ExtraTreesClassifier(random_state = 42)\n\nn_estimators = [50, 100, 400, 700, 1000]\nmax_features = [5, 7, 10]\nmax_depth = [10, 20]\nmin_samples_split = [2, 4, 10, 12, 16]\nmin_samples_leaf = [1, 5, 10]  # Mhm, this one leads to accuracy of test and train sets being the same.\n\nparam_grid_extra_trees = {'n_estimators' : n_estimators, 'max_features' : max_features,\n                         'max_depth' : max_depth, 'min_samples_split' : min_samples_split,\n                         'min_samples_leaf' : min_samples_leaf}\n\n\nrand_search_extra_trees = RandomizedSearchCV(extra_classifier, param_grid_extra_trees, cv = 4, scoring='roc_auc', \n                               refit = True, n_jobs = -1, verbose = 2)\n\nrand_search_extra_trees.fit(final_train_X, train_set_y)","8e9f8570":"extra_estimator = rand_search_extra_trees.best_estimator_\n\ny_pred_extra_estimator = extra_estimator.predict(final_train_X)\naccuracy_score(train_set_y, y_pred_extra_estimator)","2727497f":"SVC_Classifier = SVC(random_state = 42)\n\nparam_distributions = {\"gamma\": reciprocal(0.0001, 0.001), \"C\": uniform(100000, 1000000)}\n\nrand_search_svc = RandomizedSearchCV(SVC_Classifier, param_distributions, n_iter=10, verbose=2, n_jobs = -1)\n\nrand_search_svc.fit(final_train_X, train_set_y)","90ac065e":"svc_estimator = rand_search_svc.best_estimator_\n\ny_pred_svc_estimator = svc_estimator.predict(final_train_X)\naccuracy_score(train_set_y, y_pred_svc_estimator)","1aea87ca":"# now get the predictions\ny_pred_svc_rand = svc_estimator.predict(final_test_X)\n\n# Prepare the predictions file\nresult_test4 = pd.DataFrame()\npassenger_id_test = TestFile[\"PassengerId\"].copy()\nresult_test4[\"PassengerId\"] = passenger_id_test\nresult_test4[\"Survived\"] = y_pred_svc_rand \n\n# Export the predictions file\n#result_test4.to_csv(\"Titanic_prediction_ashish_svc.csv\")","61425d73":"GB_Classifier = GradientBoostingClassifier(random_state = 42)\n\nn_estimators = [50, 100, 400, 700, 1000]\nlearning_rate = [0.1, 0.5]\nmax_depth = [10, 20]\nmin_samples_split = [2, 4, 10, 12, 16]\nmin_samples_leaf = [1, 5, 10]\nmax_leaf_nodes = [2, 10, 20]\n                            \nparam_grid_grad_boost_class = {'n_estimators' : n_estimators, 'learning_rate' : learning_rate,\n                              'max_depth' : max_depth, 'min_samples_split' : min_samples_split,\n                              'min_samples_leaf' : min_samples_leaf, 'max_leaf_nodes' : max_leaf_nodes}\n\nrand_search_grad_boost_class = RandomizedSearchCV(GB_Classifier, param_grid_grad_boost_class, cv = 4, scoring='roc_auc', \n                               refit = True, n_jobs = -1, verbose = 2)\n\nrand_search_grad_boost_class.fit(final_train_X, train_set_y)","e7ab4d68":"gb_estimator = rand_search_grad_boost_class.best_estimator_\n\ny_pred_gb_estimator = gb_estimator.predict(final_train_X)\naccuracy_score(train_set_y, y_pred_gb_estimator)","ccb5ed17":"# now get the predictions\ny_pred_gb_rand = gb_estimator.predict(final_test_X)\n\n# Prepare the predictions file\nresult_test5 = pd.DataFrame()\npassenger_id_test = TestFile[\"PassengerId\"].copy()\nresult_test5[\"PassengerId\"] = passenger_id_test\nresult_test5[\"Survived\"] = y_pred_gb_rand \n\n# Export the predictions file\n#result_test5.to_csv(\"Titanic_prediction_ashish_gb.csv\")","9a2ce1c8":"log_reg = LogisticRegression(random_state = 42)\n\nC = np.array(list(range(1, 100)))\/10\n                            \nparam_grid_log_reg = {'C' : C}\n\nrand_search_log_reg = RandomizedSearchCV(log_reg, param_grid_log_reg, cv = 4, scoring='roc_auc', \n                               refit = True, n_jobs = -1, verbose = 2)\n\nrand_search_log_reg.fit(final_train_X, train_set_y)","23445bc7":"log_estimator = rand_search_log_reg.best_estimator_\n\ny_pred_log_estimator = log_estimator.predict(final_train_X)\naccuracy_score(train_set_y, y_pred_log_estimator)","6c303fa2":"# now get the predictions\ny_pred_log_rand = log_estimator.predict(final_test_X)\n\n# Prepare the predictions file\nresult_test6 = pd.DataFrame()\npassenger_id_test = TestFile[\"PassengerId\"].copy()\nresult_test6[\"PassengerId\"] = passenger_id_test\nresult_test6[\"Survived\"] = y_pred_log_rand \n\n# Export the predictions file\n#result_test6.to_csv(\"Titanic_prediction_ashish_log.csv\")","1020d1f2":"mlp_clf = MLPClassifier(random_state = 42)\n\nalpha = [.0001,.001,.01,1]\nlearning_rate_init= [.0001,.001,.01,1]\nmax_iter = [50,70,100,200]\ntol = [.0001,.001,.01,1]\n\nparam_grid_mlp_clf = {'alpha':alpha, 'learning_rate_init':learning_rate_init, 'max_iter':max_iter,'tol':tol}\n\nrand_search_mlp_clf = RandomizedSearchCV(mlp_clf, param_grid_mlp_clf, cv = 4, scoring='roc_auc', \n                               refit = True, n_jobs = -1, verbose = 2)\n\nrand_search_mlp_clf.fit(final_train_X, train_set_y)\n","79610008":"mlp_estimator = rand_search_mlp_clf.best_estimator_\n\ny_pred_mlp_estimator = mlp_estimator.predict(final_train_X)\naccuracy_score(train_set_y, y_pred_mlp_estimator)","e1997ef7":"# now get the predictions\ny_pred_mlp_rand = mlp_estimator.predict(final_test_X)\n\n# Prepare the predictions file\nresult_test7 = pd.DataFrame()\npassenger_id_test = TestFile[\"PassengerId\"].copy()\nresult_test7[\"PassengerId\"] = passenger_id_test\nresult_test7[\"Survived\"] = y_pred_mlp_rand \n\n# Export the predictions file\n#result_test7.to_csv(\"Titanic_prediction_ashish_mlp.csv\")","fb2ca94c":"Bag_Classifier = BaggingClassifier(DecisionTreeClassifier(random_state=42))\n\nn_estimators = [50,70,100,200,500]\nmax_samples = [10,50,100]\n\nparam_grid_bag_clf = {'n_estimators':n_estimators, 'max_samples':max_samples}\n\nrand_search_bag_clf = RandomizedSearchCV(Bag_Classifier, param_grid_bag_clf, cv = 4, scoring='roc_auc', \n                               refit = True, n_jobs = -1, verbose = 2)\n\nrand_search_bag_clf.fit(final_train_X, train_set_y)","def85515":"#Predict the y_pred to get accuracy score.\nbag_estimator = rand_search_bag_clf.best_estimator_\ny_pred_bag = bag_estimator.predict(final_train_X)\naccuracy_score(train_set_y, y_pred_bag)","cca1a919":"voting_clf = VotingClassifier(\n    estimators=[('lr', log_estimator),('rf',random_estimator), ('ada',ada_estimator),('gb', gb_estimator), ('knn', neighbor_grid),\n                ('svc', svc_estimator), ('mlp', mlp_estimator), ('ext', extra_estimator),('bag',bag_estimator)],\n    voting='hard')\nvoting_clf.fit(final_train_X, train_set_y)","59034cce":"#Ensemble out the best models to get better accuracy score.\n\nfor clf in (log_estimator, random_estimator, ada_estimator, gb_estimator, neighbor_grid, svc_estimator, mlp_estimator, extra_estimator, bag_estimator,voting_clf):\n    clf.fit(final_train_X, train_set_y)\n    y_pred = clf.predict(final_train_X)\n    print(clf.__class__.__name__, accuracy_score(train_set_y, y_pred))","a40e1cfd":"#predict using voting\ny_pred_voting = voting_clf.predict(final_test_X)","005e84b3":"#Create the datafile for voting classifier 2\nresult_test8 = TestFile.copy()\nresult_test8[\"Survived\"] = y_pred_voting.astype(int)","f3527e2b":"#Import Voting Classifier results\nresult_test8.to_csv('Titanic_prediction_ashish.csv', columns=['PassengerId', 'Survived'], index=False)","7e20567f":"###### Ada Boost Classifier","e07c02b0":"#### Support Vector Classifier","143888ba":"#### Another KNN Approach","8433b270":"##### Random Forest Classifier","8418d4f9":"##### MLP Classifier - Nueral Networks","cb6a51b1":"###### Extra Trees Classifier","0d582605":"SVC looks like a clear winner with 87% accuracy on training set. But Kaggle predicts Voting Classifier as the best classification algorithm on Test set.","6851dc5b":"#### KNN Classifier","013cae3c":"##### Voting Classifier - Ensemble the models.","d8f2441e":"#### Logistic Classifier","d45c56b9":"#### Now We Build the Models","ed8294db":"#### Gradient Boosting Classifier","7435ee8c":"#### Another Ensemble Technique : Bagging Model - Not the best model on the test data"}}