{"cell_type":{"af3b5092":"code","8b3b20a1":"code","133a9dd3":"code","9bc477ca":"code","5c8df3af":"code","fdbe7ad7":"code","6a072518":"code","b4813475":"code","1033dec9":"code","1f3c4039":"code","990e4369":"code","dd7817fb":"code","d254e896":"code","efcca124":"code","ac599b73":"code","09689fb0":"code","577f32dc":"code","4dfe9ac3":"code","340f3d10":"code","50bd7d99":"code","6a0b763e":"code","3033afb7":"code","4830403f":"code","2e9d28f2":"code","4b003dd6":"code","a36ca1c7":"code","1e0235c2":"code","09efa2b7":"markdown","cc9f55be":"markdown","14f37659":"markdown","57d703aa":"markdown","2bc7cb70":"markdown"},"source":{"af3b5092":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b3b20a1":"import numpy as np\nimport pywt\nimport cv2    \nimport os\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nimport seaborn as sns\n\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.model_selection import GridSearchCV","133a9dd3":"def w2d(img, mode='haar', level=1): #This function is to perform wavelet transformation on a given image.\n    imArray = img\n    imArray = cv2.cvtColor( imArray,cv2.COLOR_RGB2GRAY ) #grayscale convertion\n    imArray =  np.float32(imArray) #converting to float   \n    imArray \/= 255.0; #rescaling\n    coeffs=pywt.wavedec2(imArray, mode, level=level) #compute coefficients\n    #Process coefficients\n    coeffs_H=list(coeffs)  \n    coeffs_H[0] *= 0;  \n    #Reconstruction of image\n    imArray_H=pywt.waverec2(coeffs_H, mode);\n    imArray_H *= 255.0;\n    imArray_H =  np.uint8(imArray_H)\n    \n    return imArray_H #return transformed image.","9bc477ca":"len(os.listdir('\/kaggle\/input\/gender-recognition-dataset\/Train\/Train\/Male')),len(os.listdir('\/kaggle\/input\/gender-recognition-dataset\/Train\/Train\/Female'))","5c8df3af":"#Defining path and subdir\nsubdir = ['Male','Female']\npath = '\/kaggle\/input\/gender-recognition-dataset\/Train\/Train\/'","fdbe7ad7":"# Creating train set\nX_train, y_train = [], []\nfor gender in subdir:\n    for img_name in os.listdir(path+gender):\n        img = cv2.imread(path+gender+'\/'+img_name)\n        scalled_raw_img = cv2.resize(img, (32, 32)) #resized image\n        img_har = w2d(img,'db1',5)#wavelet transformation\n        scalled_img_har = cv2.resize(img_har, (32, 32))#resize transformed image\n        #Stack original and transformed image together and make a single image\n        combined_img = np.vstack((scalled_raw_img.reshape(32*32*3,1),scalled_img_har.reshape(32*32,1)))\n        X_train.append(combined_img)\n        if gender=='Male':\n            y_train.append(1)\n        else:\n            y_train.append(0)","6a072518":"len(X_train), len(y_train)","b4813475":"fig, ax = plt.subplots(figsize=(8,6)) \nchart = sns.barplot(x=['Male','Female'], y=[Counter(y_train)[1],Counter(y_train)[0]],palette=\"YlGnBu\")\n_=chart.set_xticklabels(chart.get_xticklabels(), rotation=45)\nplt.title('Distribution of Train Dataset')\nplt.savefig('Train dataset.png',dpi=100)","1033dec9":"subdir = ['Male','Female']\npath = '\/kaggle\/input\/gender-recognition-dataset\/Test\/Test\/'","1f3c4039":"X_test, y_test = [], []\nfor gender in subdir:\n    for img_name in os.listdir(path+gender):\n        img = cv2.imread(path+gender+'\/'+img_name)\n        scalled_raw_img = cv2.resize(img, (32, 32))\n        img_har = w2d(img,'db1',5)\n        scalled_img_har = cv2.resize(img_har, (32, 32))\n        combined_img = np.vstack((scalled_raw_img.reshape(32*32*3,1),scalled_img_har.reshape(32*32,1)))\n        X_test.append(combined_img)\n#         y_test.append(int((val_lbl_npy[int(img_name.split('.')[0])]).split('-')[0]))\n        if gender=='Male':\n            y_test.append(1)\n        else:\n            y_test.append(0)","990e4369":"Counter(y_test)","dd7817fb":"fig, ax = plt.subplots(figsize=(8,6)) \nchart = sns.barplot(x=['Male','Female'], y=[Counter(y_test)[1],Counter(y_test)[0]],palette=\"YlGnBu\")\n_=chart.set_xticklabels(chart.get_xticklabels(), rotation=45)\nplt.title('Distribution of Test Dataset')\nplt.savefig('Test dataset.png',dpi=100)","d254e896":"X_train = np.array(X_train).reshape(len(X_train),4096).astype(float)\nX_test = np.array(X_test).reshape(len(X_test),4096).astype(float)\n\ny_train = np.array(y_train).astype(int)\ny_test = np.array(y_test).astype(int)","efcca124":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","ac599b73":"# Model dictionaries for comparison\n\nscores=[]\nbest_estimators = {}\n\n\nmodel_params = {          \n    'SVM': {\n        'model': SVC(),\n        'params': {\n             'C': [7.0]\n        }\n    },\n       \n    'RANDOM_FOREST':{\n        'model' : RandomForestClassifier(),\n        'params': {\n            'n_estimators':[230],\n            'random_state' : [11]\n\n        }\n    }\n}","09689fb0":"import time\n\n\nfor model_name, mp in model_params.items():\n    clf = GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)\n    print(mp['model'], mp['params'])\n    start_time = time.time()\n    \n    clf.fit(X_train, y_train)    \n    \n\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': str(clf.best_params_)\n    })\n    best_estimators[model_name] = clf.best_estimator_\n    print('{} minutes'.format((time.time() - start_time)\/60))","577f32dc":"import pandas as pd    \ndf = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf = df.sort_values(by='best_score',ascending=False)\ndf","4dfe9ac3":"best_estimators['SVM'].score(X_test,y_test)","340f3d10":"best_estimators['RANDOM_FOREST'].score(X_test,y_test)","50bd7d99":"cross_val_score(best_estimators['SVM'],X_test,y_test,cv=5), cross_val_score(best_estimators['SVM'],X_test,y_test,cv=5).mean()","6a0b763e":"cross_val_score(best_estimators['SVM'],X_train,y_train,cv=5), cross_val_score(best_estimators['SVM'],X_train,y_train,cv=5).mean()","3033afb7":"cross_val_score(best_estimators['RANDOM_FOREST'],X_test,y_test,cv=5), cross_val_score(best_estimators['RANDOM_FOREST'],X_test,y_test,cv=5).mean()","4830403f":"cross_val_score(best_estimators['RANDOM_FOREST'],X_train,y_train,cv=5), cross_val_score(best_estimators['RANDOM_FOREST'],X_train,y_train,cv=5).mean()","2e9d28f2":"import sklearn.metrics as metrics\n\nrf_false_positive_rate,rf_true_positive_rate,rf_threshold = metrics.roc_curve(y_test,best_estimators['RANDOM_FOREST'].predict(X_test))           \nsvc_false_positive_rate,svc_true_positive_rate,svc_threshold = metrics.roc_curve(y_test,best_estimators['SVM'].predict(X_test))\n\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(10,5))\nplt.title('Reciver Operating Characterstic Curve')\n\nplt.plot(rf_false_positive_rate,rf_true_positive_rate,label='Random Forest')\nplt.plot(svc_false_positive_rate,svc_true_positive_rate,label='Support Vector Classifier')\n\n\nplt.plot([0,1],ls='--')\nplt.plot([0,0],[1,0],c='.5')\nplt.plot([1,1],c='.5')\nplt.ylabel('True positive rate')\nplt.xlabel('False positive rate')\nplt.legend()\nplt.show()","4b003dd6":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,best_estimators['SVM'].predict(X_test)))","a36ca1c7":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns \n\ncm = confusion_matrix(y_test, best_estimators['SVM'].predict(X_test))\n\nfig, ax = plt.subplots(figsize=(8,8))\ng = sns.heatmap(cm,annot=True,ax=ax, fmt='0.1f',cmap='Accent_r')\ng.set_yticklabels(g.get_yticklabels(), rotation = 0, fontsize = 12)\ng.set_xticklabels(g.get_xticklabels(), rotation = 90, fontsize = 12)\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels');","1e0235c2":"print(classification_report(y_test,best_estimators['RANDOM_FOREST'].predict(X_test)))\n\ncm = confusion_matrix(y_test, best_estimators['RANDOM_FOREST'].predict(X_test))\n\nfig, ax = plt.subplots(figsize=(8,8))\ng = sns.heatmap(cm,annot=True,ax=ax, fmt='0.1f',cmap='Accent_r')\ng.set_yticklabels(g.get_yticklabels(), rotation = 0, fontsize = 12)\ng.set_xticklabels(g.get_xticklabels(), rotation = 90, fontsize = 12)\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels');","09efa2b7":"# Evaluation and selection of ML model","cc9f55be":"**Test data processing**","14f37659":"# Modeling","57d703aa":"**Train data processing**","2bc7cb70":"# Data processing\n\n**[Wavelet transformation on images](https:\/\/sundoc.bibliothek.uni-halle.de\/diss-online\/02\/03H033\/t4.pdf)**"}}