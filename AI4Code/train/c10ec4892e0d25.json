{"cell_type":{"2a71deed":"code","706bf702":"code","da89dba1":"code","3f656315":"code","9d7e27bd":"code","772fda26":"code","fc53e86a":"code","0d7d4160":"code","0456ac1c":"code","f7a12c39":"code","f7944688":"code","77aad56c":"code","fc3af185":"code","ca78e407":"code","690f3e6c":"code","abcb58af":"code","8aa25565":"code","02da31a9":"code","8ca4e8b0":"code","1abb9197":"code","d76ab1b0":"code","499cef94":"code","45eed0d1":"code","03839a30":"code","d9b47cac":"code","0f8caa97":"code","0886db91":"code","971eeb23":"code","7cc0d8a2":"code","3f09e317":"code","6613c3f0":"code","542d8f04":"code","3fa5dce3":"code","413c7daa":"code","267fd1c5":"code","d1f924b5":"code","29c9e329":"code","39b2a6a7":"code","6c0ad29b":"code","8f8a9a79":"code","7b84e332":"code","e76d0cdf":"code","530c282e":"code","c51dcf95":"code","07b7fe76":"code","83567a09":"code","d5462a83":"code","54a21a72":"code","b1ffce36":"code","f3f789dc":"code","0171a2a4":"code","05d61aae":"markdown","4fc9a621":"markdown","a0f1b842":"markdown","4c870a27":"markdown","0c5d58ec":"markdown","9e51c7ce":"markdown","9b6fcb9c":"markdown","8d09c118":"markdown","66e14320":"markdown","212da560":"markdown","3588073b":"markdown","ce6f614f":"markdown"},"source":{"2a71deed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n'''import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))'''\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","706bf702":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","da89dba1":"df=pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","3f656315":"df","9d7e27bd":"df.shape","772fda26":"df.columns","fc53e86a":"df.tail(5)","0d7d4160":"df.isnull().sum()","0456ac1c":"df=df.drop(['Unnamed: 32'],axis=1)\ndf=df.drop(['id'],axis=1)","f7a12c39":"df.head(5)","f7944688":"y=df[['diagnosis']]","77aad56c":"y","fc3af185":"x=df.drop(['diagnosis'],axis=1)","ca78e407":"x","690f3e6c":"y=pd.get_dummies(y['diagnosis'],drop_first=True)","abcb58af":"y","8aa25565":"from sklearn.model_selection import train_test_split","02da31a9":"xtrain,xtest,ytrain,ytest=train_test_split(x,y, test_size=0.25,random_state=0)","8ca4e8b0":"xtest","1abb9197":"ytest","d76ab1b0":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import average_precision_score, precision_recall_curve\nfrom sklearn.metrics import auc, plot_precision_recall_curve\nfrom sklearn import metrics","499cef94":"clf=DecisionTreeClassifier()","45eed0d1":"clf=clf.fit(xtrain,ytrain)","03839a30":"pred1=clf.predict(xtest)","d9b47cac":"pred1","0f8caa97":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred1))\nprint(\"Precision:\",metrics.precision_score(ytest, pred1))\nprint(\"Recall:\",metrics.recall_score(ytest, pred1))","0886db91":"cnf_matrix = metrics.confusion_matrix(ytest, pred1)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","971eeb23":"y_pred_proba = clf.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","7cc0d8a2":"average_precision = average_precision_score(ytest, pred1)\nprint(average_precision)\ndisp = plot_precision_recall_curve(clf, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","3f09e317":"from sklearn.linear_model import LogisticRegression","6613c3f0":"logreg=LogisticRegression()","542d8f04":"logreg.fit(xtrain,ytrain)","3fa5dce3":"pred2=logreg.predict(xtest)","413c7daa":"pred2","267fd1c5":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred2))\nprint(\"Precision:\",metrics.precision_score(ytest, pred2))\nprint(\"Recall:\",metrics.recall_score(ytest, pred2))","d1f924b5":"cnf_matrix = metrics.confusion_matrix(ytest, pred2)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","29c9e329":"y_pred_proba = logreg.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","39b2a6a7":"average_precision = average_precision_score(ytest, pred2)\nprint(average_precision)\ndisp = plot_precision_recall_curve(logreg, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","6c0ad29b":"from sklearn.ensemble import RandomForestClassifier","8f8a9a79":"ran=RandomForestClassifier(n_estimators=100)","7b84e332":"ran.fit(xtrain,ytrain)","e76d0cdf":"pred3=ran.predict(xtest)","530c282e":"pred3","c51dcf95":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred3))\nprint(\"Precision:\",metrics.precision_score(ytest, pred3))\nprint(\"Recall:\",metrics.recall_score(ytest, pred3))","07b7fe76":"cnf_matrix = metrics.confusion_matrix(ytest, pred2)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","83567a09":"y_pred_proba = ran.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","d5462a83":"average_precision = average_precision_score(ytest, pred3)\nprint(average_precision)\ndisp = plot_precision_recall_curve(ran, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","54a21a72":"from lightgbm import LGBMClassifier","b1ffce36":"model_lgb= LGBMClassifier()\nmodel_lgb.fit(xtrain,ytrain)","f3f789dc":"pred4=model_lgb.predict(xtest)","0171a2a4":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred4))\nprint(\"Precision:\",metrics.precision_score(ytest, pred4))\nprint(\"Recall:\",metrics.recall_score(ytest, pred4))","05d61aae":"# Split data X and Y for Train and Test","4fc9a621":"# Data Preproceesing","a0f1b842":"# LGMClassifier","4c870a27":"# Import machine learning library","0c5d58ec":"# Import Library","9e51c7ce":"# Decision Tree Classifier","9b6fcb9c":"# Read Data","8d09c118":"# Data Analysis","66e14320":"# One hor encoding for comvert text data to numeric data","212da560":"# Logistic Regression","3588073b":"# THE END","ce6f614f":"# Random Forest Algorithm"}}