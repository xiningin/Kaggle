{"cell_type":{"afd822a0":"code","105d594e":"code","dd3e3db2":"code","1a222450":"code","bb524957":"code","2ad985d0":"code","0c981c0c":"code","5ade9afe":"code","c170f013":"markdown","4b311aed":"markdown"},"source":{"afd822a0":"import cv2\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras.models import load_model\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, Add\nfrom keras.models import Model\nimport keras.backend as K\nfrom keras.optimizers import Adam\nfrom keras.callbacks import LearningRateScheduler, ModelCheckpoint\n\n%matplotlib inline","105d594e":"def load_images(inputdir, inputpath, imagesize):\n    imglist = []\n    \n    for i in range(len(inputpath)):\n        img = cv2.imread(inputdir+inputpath[i], cv2.IMREAD_COLOR) \n        img = img[::-1] \n        imglist.append(img)\n        \n    return imglist","dd3e3db2":"IMAGE_SIZE = 128\n\n\nimage_path = sorted(os.listdir(\"..\/input\/super-resolution\/flower_images_scale3\/flower_images_scale3\"))\nlabel_path = sorted(os.listdir(\"..\/input\/super-resolution\/flower_images_scale6\/flower_images_scale6\"))\n\n\nimage =load_images(\"..\/input\/super-resolution\/flower_images_scale3\/flower_images_scale3\/\", image_path, IMAGE_SIZE)\nlabel =load_images(\"..\/input\/super-resolution\/flower_images_scale6\/flower_images_scale6\/\", label_path, IMAGE_SIZE)\n    \nimage \/= np.max(image)\nlabel \/= np.max(label)\n\nimage.shape, label.shape","1a222450":"num = 20\n\nplt.figure(figsize=(14, 7))\n\nax = plt.subplot(1, 2, 1)\nplt.imshow(np.squeeze(image[num]))\n\nax = plt.subplot(1, 2, 2)\nplt.imshow(np.squeeze(label[num]))","bb524957":"\ndef network_ddsrcnn():\n    input_img = Input(shape=(IMAGE_SIZE,IMAGE_SIZE,3))\n    \n    enc1 = Conv2D(64,kernel_size=3,activation=\"relu\",padding=\"same\")(input_img)\n    enc1 = Conv2D(64,kernel_size=3,activation=\"relu\",padding=\"same\")(enc1)\n    down1 = MaxPooling2D(pool_size=2)(enc1)\n\n    enc2 = Conv2D(128,kernel_size=3,activation=\"relu\",padding=\"same\")(down1)\n    enc2 = Conv2D(128,kernel_size=3,activation=\"relu\",padding=\"same\")(enc2)\n    down2 = MaxPooling2D(pool_size=2)(enc2)\n    \n    enc3 = Conv2D(256,kernel_size=3,activation=\"relu\",padding=\"same\")(down2)\n    \n    up3 = UpSampling2D(size=2)(enc3)\n    dec3 = Conv2D(128,kernel_size=3,activation=\"relu\",padding=\"same\")(up3)\n    dec3 = Conv2D(128,kernel_size=3,activation=\"relu\",padding=\"same\")(dec3)\n    \n    add2 = Add()([dec3,enc2])\n    up2 = UpSampling2D(size=2)(add2)\n    dec2 = Conv2D(64,kernel_size=3,activation=\"relu\",padding=\"same\")(up2)\n    dec2 = Conv2D(64,kernel_size=3,activation=\"relu\",padding=\"same\")(dec2)\n    \n    add1 = Add()([dec2,enc1])\n    dec1 = Conv2D(3,kernel_size=5,activation=\"linear\",padding=\"same\")(add1)\n    \n    model = Model(input_img,dec1)\n    return model\n\nmodel = network_ddsrcnn()\nmodel.summary()","2ad985d0":"initial_learningrate=2e-3\n    \ndef lr_decay(epoch):\n    if epoch < 500:\n        return initial_learningrate\n    else:\n        return initial_learningrate * 0.99 ** epoch\n\n\ndef psnr(y_true,y_pred):\n    return -10*K.log(K.mean(K.flatten((y_true-y_pred))**2))\/np.log(10)\n\nmodel.compile(loss=\"mean_squared_error\",optimizer=Adam(lr=initial_learningrate),metrics=[psnr])\nmodel.fit(label,image,epochs=500,batch_size=32,verbose=1,callbacks=[LearningRateScheduler(lr_decay,verbose=1)])","0c981c0c":"results = model.predict(image,verbose=1)","5ade9afe":"n = 8\n\nplt.figure(figsize=(14, 7))\n\nax = plt.subplot(1, 3, 1)\nplt.imshow(np.squeeze(results[n]))\n\nax = plt.subplot(1, 3, 2)\nplt.imshow(np.squeeze(image[n]))\n\nax = plt.subplot(1, 3, 3)\nplt.imshow(np.squeeze(label[n]))","c170f013":"# Training","4b311aed":"# Results"}}