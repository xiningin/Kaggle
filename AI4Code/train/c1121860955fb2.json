{"cell_type":{"016b5b44":"code","3dbafb86":"code","87b4745c":"code","a1d1d1e9":"code","fa5e2dc4":"code","788cbde1":"code","6495bf73":"code","48f9c099":"code","752471d9":"code","f85caf23":"code","d73ec523":"code","87bfccd1":"code","15c4d215":"code","67932ea7":"code","f588ab60":"code","9aba6dd1":"code","226c4279":"code","d32a8dbf":"code","b45010b8":"code","66484f01":"code","d0441960":"markdown","4fa80631":"markdown"},"source":{"016b5b44":"# function ClickConnect(){\n#     console.log(\"Working\"); \n#     document.querySelector(\"colab-connect-button\").click()\n# }\n# setInterval(ClickConnect, 30000)","3dbafb86":"# DEPTH = 101250  # \u4f7f\u7528resnet101\u6a21\u578b,\u4f46\u8f09\u5165resnet50\u6b0a\u91cd\n# IMAGE_SIZE = (540, 960)\n# BATCH_SIZE = 5\n\n# DEPTH = 101250  # \u4f7f\u7528resnet101\u6a21\u578b,\u4f46\u8f09\u5165resnet50\u6b0a\u91cd\n# IMAGE_SIZE = (675, 1200)\n# BATCH_SIZE = 4\n\n# DEPTH = 101250  # \u4f7f\u7528resnet101\u6a21\u578b,\u4f46\u8f09\u5165resnet50\u6b0a\u91cd\n# IMAGE_SIZE = (810, 1440)\n# BATCH_SIZE = 2\n\nDEPTH = 50\nIMAGE_SIZE = (512, 512)\nBATCH_SIZE = 16\n\n# DEPTH = 50\n# IMAGE_SIZE = (540, 960)\n# BATCH_SIZE = 6\n\n# DEPTH = 50\n# IMAGE_SIZE = (675, 1200)\n# BATCH_SIZE = 6\n\nEPOCHS = 2\nNUM_WORKERS = 2\nMERGE_VAL = 0\nDO_AUG = 0\n\n# LR_CHOICE = 'lr_scheduler'\nLR = 1e-4\n\n# LR_CHOICE = 'lr_map'\nLR_MAP = {'1':'2e-4', '25':'1.5e-4', '30':'7.5e-5', '35':'3e-5'}\n\nLR_CHOICE = 'lr_fn'\nLR_FN = {\n    'LR_START': '1e-5',\n    'LR_MAX': '1e-4',\n    'LR_MIN': '1e-5',\n    'LR_RAMPUP_EPOCHS': '10',\n    'LR_SUSTAIN_EPOCHS': '5',\n    'LR_EXP_DECAY': '.8'\n}\n\nLIMIT = (0, 0)\nNUM_CLASSES = 80","87b4745c":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef lr_change(epoch, lr, lr_map):\n    new_lr = lr\n    for k in lr_map.keys():\n        if epoch >= int(k):\n            new_lr = float(lr_map[k])\n\n#     if new_lr != lr:\n#         print('changing lr form {} to {}'.format(lr, new_lr))\n    \n    return new_lr\n\nx = np.arange(1, 40+1)\ny = [lr_change(i, LR, LR_MAP) for i in x]\nif LR_CHOICE == 'lr_map':\n    plt.plot(x, y);\n\nnew_map = ''\nfor k in LR_MAP.keys():\n    new_map += '{}={}'.format(k, LR_MAP[k])\n    new_map += ','\nnew_map = new_map[:-1]\n\n        \n\ndef lrfn(epoch, lr_fn_dicts):\n    if epoch < int(lr_fn_dicts['LR_RAMPUP_EPOCHS']):\n        lr = (float(lr_fn_dicts['LR_MAX']) - float(lr_fn_dicts['LR_START'])) \/ int(lr_fn_dicts['LR_RAMPUP_EPOCHS']) * epoch + \\\n            float(lr_fn_dicts['LR_START'])\n    elif epoch < int(lr_fn_dicts['LR_RAMPUP_EPOCHS']) + int(lr_fn_dicts['LR_SUSTAIN_EPOCHS']):\n        lr = float(lr_fn_dicts['LR_MAX'])\n    else:\n        lr = (float(lr_fn_dicts['LR_MAX']) - float(lr_fn_dicts['LR_MIN'])) * \\\n            float(lr_fn_dicts['LR_EXP_DECAY'])**(epoch - int(lr_fn_dicts['LR_RAMPUP_EPOCHS']) - \\\n            int(lr_fn_dicts['LR_SUSTAIN_EPOCHS'])) + float(lr_fn_dicts['LR_MIN'])\n    return lr\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x, LR_FN) for x in rng]\nif LR_CHOICE == 'lr_fn':\n    plt.plot(rng, y);\n    \nnew_lr_fn = ''\nfor k in LR_FN.keys():\n    new_lr_fn += '{}={}'.format(k, LR_FN[k])\n    new_lr_fn += ','\nnew_lr_fn = new_lr_fn[:-1]","a1d1d1e9":"import os\nimport torch\nimport platform\n\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\"\n\nUSE_KAGGLE = True if os.environ.get('KAGGLE_KERNEL_RUN_TYPE', False) else False # kggle or colab\nUSE_TPU = True if os.environ.get('TPU_NAME', False) else False # TPU or GPU\n\nPLATFORM = '' # LINUX, COLAB, KAGGLE, WINDOWS\nif platform.system() == 'Linux':\n    if not USE_KAGGLE: # colab\n        PLATFORM = 'COLAB'\n    else:\n        PLATFORM = 'KAGGLE'\nelif platform.system() == 'Windows':\n    PLATFORM = 'WINDOWS'\nelse:\n    raise SystemError\n\nprint(PLATFORM)","fa5e2dc4":"if PLATFORM == 'COLAB':\n    !nvidia-smi\n    \nif PLATFORM == 'COLAB' and not USE_TPU:\n    assert 'Tesla P100-PCIE-16GB' == torch.cuda.get_device_name(0)","788cbde1":"if PLATFORM == 'COLAB':\n    from google.colab import drive\n    drive.mount('\/content\/gdrive')","6495bf73":"# if PLATFORM != 'WINDOWS':\n#     !free -h","48f9c099":"# if PLATFORM != 'WINDOWS':\n#     !cat \/proc\/cpuinfo","752471d9":"DATASET_PATH = ''\nCOCO_PATH = ''\nDATASET= ''\nif PLATFORM == 'COLAB':\n    DATASET_PATH = '\/content\/gdrive\/My Drive\/Competitions\/AIdea\/\u5c55\u5834\u6c11\u773e\u7279\u5fb5\u5206\u6790\/show'\n    COCO_PATH = '\/content'\n    DATASET = 'h5'\nelif PLATFORM == 'WINDOWS':\n    DATASET_PATH = 'D:\/show'\n    COCO_PATH = DATASET_PATH\n    DATASET = 'show'\nelif PLATFORM == 'KAGGLE':\n    DATASET_PATH = '\/kaggle\/input\/show-dataset\/show'\n    COCO_PATH = DATASET_PATH\n    DATASET = 'colab'\n    \nTRAIN_FILENAME = 'train_small.hdf5'\nVAL_FILENAME = 'test.hdf5'","f85caf23":"if PLATFORM == 'COLAB':\n    train_file = '{}\/{}x{}\/{}'.format(DATASET_PATH, IMAGE_SIZE[0], IMAGE_SIZE[1], TRAIN_FILENAME)\n    val_file = '{}\/{}x{}\/{}'.format(DATASET_PATH, IMAGE_SIZE[0], IMAGE_SIZE[1], VAL_FILENAME) \n    test_file = '{}\/test\/test.json'.format(DATASET_PATH)\n\n    if os.path.isfile(TRAIN_FILENAME) and os.path.isfile(VAL_FILENAME):\n        if not (os.stat(train_file).st_size == os.stat(TRAIN_FILENAME).st_size):\n            print('Download data from DRIVE')\n            !cp '{train_file}' .\n            !cp '{val_file}' .\n            !mkdir test\n            !cp '{test_file}' test\/\n    else:\n        print('Download data from DRIVE')\n        !cp '{train_file}' .\n        !cp '{val_file}' .\n        !mkdir test\n        !cp '{test_file}' test\/","d73ec523":"if PLATFORM == 'COLAB':\n    %cd '\/content\/gdrive\/My Drive\/Competitions\/AIdea\/\u5c55\u5834\u6c11\u773e\u7279\u5fb5\u5206\u6790\/pytorch-retinanet'\nelif PLATFORM == 'WINDOWS':\n    %cd pytorch-retinanet\nelif PLATFORM == 'KAGGLE':\n    %cd \/kaggle\/input\/pytorch-retinanet","87bfccd1":"%run main.py --coco_path {COCO_PATH} --dataset {DATASET} --depth {DEPTH} --image_size {IMAGE_SIZE[0]} {IMAGE_SIZE[1]} \\\n    --epochs {EPOCHS} --batch_size {BATCH_SIZE} --num_works {NUM_WORKERS} --lr {LR} --num_classes {NUM_CLASSES} \\\n    --limit {LIMIT[0]} {LIMIT[1]} --lr_map {new_map} --lr_choice {LR_CHOICE} --lr_fn {new_lr_fn} --merge_val {MERGE_VAL}","15c4d215":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\niteration_loss_path = 'iteration_loss.csv'\nif USE_KAGGLE:\n    iteration_loss_path = '\/kaggle\/working\/' + iteration_loss_path\niteration_loss_df = pd.read_csv(iteration_loss_path)\nplt.plot(iteration_loss_df['iteration'], iteration_loss_df['iteration_loss']);","67932ea7":"epoch_loss_path = 'epoch_loss.csv'\nif USE_KAGGLE:\n    epoch_loss_path = '\/kaggle\/working\/' + epoch_loss_path\nepoch_loss_df = pd.read_csv(epoch_loss_path)\nplt.plot(epoch_loss_df['epoch_num'], epoch_loss_df['mean_epoch_loss']);","f588ab60":"eval_file = 'eval_train_result.csv'\nif USE_KAGGLE:\n    eval_file = '\/kaggle\/working\/' + eval_file\neval_file_df = pd.read_csv(eval_file)\nplt.plot(eval_file_df['epoch_num'], eval_file_df['map50']);","9aba6dd1":"eval_file = 'eval_val_result.csv'\nif USE_KAGGLE:\n    eval_file = '\/kaggle\/working\/' + eval_file\neval_file_df = pd.read_csv(eval_file)\nplt.plot(eval_file_df['epoch_num'], eval_file_df['map50']);","226c4279":"iteration_loss_df.tail()","d32a8dbf":"epoch_loss_df.tail()","b45010b8":"# rm -Rf '__pycache__' 'retinanet\/__pycache__'","66484f01":"# if PLATFORM == 'WINDOWS':\n#     !del -f test_bbox_results.json result.csv loss_list.csv\n# else:\n#     !rm -f test_bbox_results.json result.csv loss_list.csv","d0441960":"# Plot Losses","4fa80631":"# Run RetinaNet"}}