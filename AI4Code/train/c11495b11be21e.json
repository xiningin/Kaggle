{"cell_type":{"52a333c0":"code","c662e94c":"code","a4858eb4":"code","848952cb":"code","a6725120":"code","58daf2c1":"code","5f1847d7":"code","b1bea0b5":"code","5f09582d":"code","2a1cb0e9":"code","4cb3fd9d":"code","dbf37893":"code","b7f4b575":"code","bf7c47f8":"code","dec35e99":"code","1a2e819d":"code","3b765fb6":"code","e436b96f":"code","0881d892":"code","7de4258b":"code","ca36862c":"code","c38ee1bf":"code","422f1c90":"code","25c8afba":"code","50457b54":"code","cfa3d432":"code","cb3dbf30":"code","964a2698":"code","580e8eba":"code","72fd57a8":"code","739058a4":"code","1812e857":"code","e4af3424":"code","55fdfd24":"code","9d729c98":"code","a828e5b6":"code","2709da35":"code","46f41835":"code","ba405331":"code","ce4db34f":"code","72716f48":"code","261858e2":"code","a785f22d":"code","65dfbf2c":"code","4c9b49e3":"code","a62bc349":"code","4fa2490a":"code","38b35a94":"code","db611839":"code","819d9817":"code","8c55087f":"code","ed1244bf":"code","9794141c":"code","51ed6b55":"code","f1680c05":"code","a5463b70":"code","b4d2eccd":"code","b4b172af":"code","4090a6f3":"code","5529e6e0":"code","088f3850":"code","e2bc04f7":"markdown","70716a63":"markdown","2b733fe5":"markdown","da0937d3":"markdown","a4fd2a24":"markdown","7f9ba5ec":"markdown"},"source":{"52a333c0":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","c662e94c":"import cv2\nimport nltk\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom colorama import Fore,Back,Style\n!pip install wordcloud\nfrom wordcloud import WordCloud,STOPWORDS\n","a4858eb4":"y_=Fore.YELLOW\nr_=Fore.RED\ng_=Fore.GREEN\nb_=Fore.BLUE\nm_=Fore.MAGENTA","848952cb":"Tr_df = pd.read_csv(\"..\/input\/shopee-product-matching\/train.csv\")\nTe_df = pd.read_csv(\"..\/input\/shopee-product-matching\/test.csv\")","a6725120":"Tr_df.head()","58daf2c1":"Te_df.head()","5f1847d7":"Te_df","b1bea0b5":"Tr_jpg ='..\/input\/shopee-product-matching\/train_images'\nTe_jpg = '..\/input\/shopee-product-matching\/test_images'","5f09582d":"def getImagePaths(path):\n    image_names = []\n    for dirname,_,filenames in os.walk(path):\n        for filename in filenames:\n            pathfull = os.path.join(dirname,filename)\n            image_names.append(pathfull)\n    return image_names        ","2a1cb0e9":"Tr_img_path = getImagePaths(Tr_jpg)\nTe_img_path = getImagePaths(Te_jpg)","4cb3fd9d":"print(f\"{y_}Number of train images :  {g_} {len(Tr_img_path)}\\n\")\nprint(f\"{y_}Number of test images :  {g_} {len(Te_img_path)}\\n\")","dbf37893":"def getShape(images_paths):\n    shape = cv2.imread(images_paths[0]).shape\n    for image_path in images_paths:\n        image_shape = cv2.imread(image_path).shape\n        if (image_shape!=shape):\n            return 'Different Images shape : '\n        else:\n            return 'Same Image shape : ' +str(shape)","b7f4b575":"getShape(Tr_img_path)","bf7c47f8":"getShape(Te_img_path)","dec35e99":"def display_multi_img(images_paths,rows,cols):\n    figure ,ax = plt.subplots(nrows=rows,ncols = cols,figsize=(17,9))\n    for ind,image_path in enumerate(images_paths):\n        image = cv2.imread(image_path)\n        image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n        try:\n            ax.ravel()[ind].imshow(image)\n            ax.ravel()[ind].set_axis_off()\n        except:\n            continue;\n    plt.tight_layout()\n    plt.show()\n","1a2e819d":"display_multi_img(Tr_img_path[0:25],5,5)","3b765fb6":"display_multi_img(Te_img_path,1,3)","e436b96f":"def styling():\n    for spine in plt.gca().spines.values():\n        spine.set_visible(False)\n        plt.xticks([])\n        plt.yticks([])","0881d892":"def hist(image_path):\n    plt.figure(figsize = (16,4))\n    \n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n    plt.subplot(1,5,1)\n    plt.imshow(img)\n    styling()\n    \n    custom_colors= [\"#ef233d\",'#76dd71','#26677f','#aec3d0']\n    labels = ['Red Channel','Green Channel','Blue Channel','Total']\n    \n    for i in range(1,3):\n        plt.subplot(1,5,i+1)\n        plt.hist(img[:,:,i-1].reshape(-1),bins=64,color = custom_colors[i-1],alpha = 0.6)\n        plt.xlabel(labels[i-1],fontsize=10)\n        styling()\n        \n    plt.subplot(1,5,5)\n    plt.hist(img.reshape(-1),bins=128,color = custom_colors[3],alpha = 0.6)\n    plt.xlabel(labels[3],fontsize=10)\n    styling()\n    plt.show()    ","7de4258b":"def display_hist(images_paths):\n    for ind,image_path in enumerate(images_paths):\n        if (ind<6):\n            hist(image_path)","ca36862c":"display_hist(Tr_img_path[5:10])","c38ee1bf":"display_hist(Te_img_path)","422f1c90":"Tr_df['label_group'].nunique()","25c8afba":"tr_labels_count = Tr_df['label_group'].value_counts()\nmost_freq = tr_labels_count[tr_labels_count == tr_labels_count.max()]\nless_freq = tr_labels_count[tr_labels_count == tr_labels_count.min()]\n\nm_label = np.unique(Tr_df['label_group'][Tr_df['label_group'].isin(most_freq.index)].values)\nl_label = np.unique(Tr_df['label_group'][Tr_df['label_group'].isin(less_freq.index)].values)\n\nprint(f\"{m_}Most Frequent label group : \",m_label)\nprint(f\"{y_}Most Frequent label group : \",l_label)\n","50457b54":"def path(group,m):\n    PATH = \"..\/input\/shopee-product-matching\/train_images\"\n    \n    if m=='l':\n        z = Tr_df['image'][Tr_df['label_group']==group].values\n    if m=='t':\n        z = Tr_df['image'][Tr_df['title']==group].values\n   \n    image_names = []\n    for filename in z:\n        fullpath = os.path.join(PATH, filename)\n        image_names.append(fullpath)\n    return image_names","cfa3d432":"display_multi_img(path(159351600,'l'),3,3)","cb3dbf30":"display_multi_img(path(994676122,'l'),3,3)","964a2698":"display_multi_img(path(562358068,'l'),3,3)","580e8eba":"display_multi_img(path(1141798720,'l'),3,3)","72fd57a8":"display_multi_img(path( 3113678103,'l'),3,3)","739058a4":"display_multi_img(path( 3627744656,'l'),3,3)","1812e857":"display_multi_img(path( 4293276364,'l'),1,2)","e4af3424":"display_multi_img(path( 4292939171,'l'),1,2)","55fdfd24":"display_multi_img(path( 4292154092,'l'),1,2)","9d729c98":"Tr_df.shape","a828e5b6":"Te_df.shape","2709da35":"Tr_df['title'].nunique()","46f41835":"t = Tr_df['title'].value_counts().sort_values(ascending=False).reset_index()\nt.columns = ['title','count']\nt","ba405331":"display_multi_img(path(\"Koko syubbanul muslimin koko azzahir koko baju\",'t'),3,3)","ce4db34f":"display_multi_img(path(\"Viva Air Mawar\",'t'),3,2)","72716f48":"display_multi_img(path(\"Emina Glossy Stain\",'t'),3,2)","261858e2":"display_multi_img(path(\"Baju Koko Pria Gus Azmi Syubbanul Muslimin Kombinasi Hadroh Azzahir Hilw HO187 KEMEJA KOKO PRIA BAJU\",'t'), 4, 2)","a785f22d":"display_multi_img(path(\"Monde Boromon Cookies 1 tahun+ 120gr\",'t'), 2, 3)","65dfbf2c":"def color_w(word=None,font_size=None,position=None,orientation =None, font_path=None,random_state=None):\n    h =40\n    s = 100\n    l = random_state.randint(30,70)\n    return 'hsl({},{}%,{}%)'.format(h,s,l)\nplt.subplots(figsize=(10,10))\nww = WordCloud(stopwords = STOPWORDS,background_color = 'white',contour_width = 2,contour_color ='blue',color_func = color_w,max_words=100,max_font_size = 256 ,random_state = 42)\nww.generate(' '.join(Tr_df['title']))\nplt.imshow(ww,interpolation = 'bilinear')\nplt.axis('off')\nplt.show()","4c9b49e3":"stopwords = set(STOPWORDS) \nwordcloud = WordCloud(width = 800, \n                      height = 800,\n                      background_color ='white',\n                      min_font_size = 10,\n                      stopwords = stopwords,).generate(' '.join(Tr_df['title'])) \n\n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n\nplt.show()","a62bc349":"STOPWORDS = nltk.corpus.stopwords.words('english')\n\nfilters = [ '!', '\"', '#', '$', '%', '&', '(', ')', '*', '+', '-', '.', '\/',  '\\\\', ':', ';', '<', '=', '>',\n           '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '\\t','\\n',\"'\",\",\",'~' , '\u2014']\n\ndef preprocess_text(input_strs , filters=None , stopwords=STOPWORDS):\n    # filter punctuation and case conversion\n    translation_table = {ord(char): ord(' ') for char in filters}\n    input_strs = input_strs.str.translate(translation_table)\n    input_strs = input_strs.str.lower()\n        \n    # remove stopwords\n    input_strs =  input_strs.str.replace_tokens(STOPWORDS, ' ')\n        \n    # replace multiple spaces with single one and strip leading\/trailing spaces\n    input_strs = input_strs.str.normalize_spaces( )\n    input_strs = input_strs.str.strip(' ')\n    \n    return input_strs\n\ndef preprocess_text_df(df, text_cols=['title'], **kwargs):\n    for col in text_cols:\n        df[col] = preprocess_text(df[col], **kwargs)\n    return  df","4fa2490a":"for k in range(5):\n    plt.figure(figsize=(20,3))\n    plt.plot(np.arange(50),'o-',color='#f48c06')\n    plt.title('Text Distance From Train Row %i to Other Train Rows'%k,fontsize=15, fontweight='bold',horizontalalignment='center',fontfamily='serif')\n    plt.ylabel('Distance to Train Row %i'%k,fontsize=13, fontweight='bold',fontfamily='serif')\n    plt.xlabel('Index Sorted by Distance to Train Row %i'%k,fontsize=13, fontweight='bold',fontfamily='serif')\n    plt.show()\n    \n    print(Tr_df['title'])","38b35a94":"\nfor k in range(5):\n    plt.figure(figsize=(20,3))\n    plt.plot(np.arange(50),'o-',color='#f48c06')\n    plt.title('Text Distance From Train Row %i to Other Train Rows'%k,fontsize=15, fontweight='bold',horizontalalignment='center',fontfamily='serif')\n    plt.ylabel('Distance to Train Row %i'%k,fontsize=13, fontweight='bold',fontfamily='serif')\n    plt.xlabel('Index Sorted by Distance to Train Row %i'%k,fontsize=13, fontweight='bold',fontfamily='serif')\n    plt.show()\n    \n    print(Tr_df['label_group'])","db611839":"for k in range(5):\n    plt.figure(figsize=(20,3))\n    plt.plot(np.arange(50),'o-',color='#f48c06')\n    plt.title('Text Distance From Train Row %i to Other Train Rows'%k,fontsize=15, fontweight='bold',horizontalalignment='center',fontfamily='serif')\n    plt.ylabel('Distance to Train Row %i'%k,fontsize=13, fontweight='bold',fontfamily='serif')\n    plt.xlabel('Index Sorted by Distance to Train Row %i'%k,fontsize=13, fontweight='bold',fontfamily='serif')\n    plt.show()\n    \n    print(Te_df['title'])","819d9817":"\nfor k in range(5):\n    plt.figure(figsize=(20,3))\n    plt.plot(np.arange(50),'o-',color='#f48c06')\n    plt.title('Text Distance From Train Row %i to Other Train Rows'%k,fontsize=15, fontweight='bold',horizontalalignment='center',fontfamily='serif')\n    plt.ylabel('Distance to Train Row %i'%k,fontsize=13, fontweight='bold',fontfamily='serif')\n    plt.xlabel('Index Sorted by Distance to Train Row %i'%k,fontsize=13, fontweight='bold',fontfamily='serif')\n    plt.show()\n    \n    print(Te_df['posting_id'])","8c55087f":"import seaborn as sns\ntop10_names = Tr_df['label_group'].value_counts().index.tolist()[:15]\ntop10_values = Tr_df['label_group'].value_counts().tolist()[:15]\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=top10_names, y=top10_values)\nplt.xticks(rotation=45)\nplt.xlabel(\"Label Group\")\nplt.ylabel(\"Image Count\")\nplt.title(\"Top-15 Label Groups by Image Count\")\nplt.show()","ed1244bf":"sample = pd.read_csv('..\/input\/shopee-product-matching\/sample_submission.csv')","9794141c":"sample","51ed6b55":"check = Te_df.groupby(['title']).count().reset_index()['title'].tolist()\na = []\nb = []\nfor item in check:\n    res = Te_df[Te_df['title']==item]['posting_id'].tolist()\n    ans = \"\"\n    for id_item in res:\n        ans = ans + str(id_item)+\"\"\n    for id_item in res:\n        a.append(id_item)\n        b.append(ans)","f1680c05":"submission1 = pd.DataFrame()\nsubmission1['posting_id'] = a\nsubmission1['matches'] = b\nsubmission1","a5463b70":"check = Te_df.groupby(['title']).count().reset_index()['title'].tolist()\na = []\nb = []\nfor item in check:\n    res = Te_df[Te_df['title']==item]['posting_id'].tolist()\n    ans = \"\"\n    for id_item in res:\n        ans = ans + str(id_item)+\"\"\n    for id_item in res:\n        a.append(id_item)\n        b.append(ans)","b4d2eccd":"submission2 = pd.DataFrame()\nsubmission2['posting_id'] = a\nsubmission2['matches'] = b\nsubmission2","b4b172af":"sub = pd.merge(submission1,submission2,on='posting_id',how='inner')\nsub['list' ] = sub['matches_x'] + sub['matches_y']","4090a6f3":"sub","5529e6e0":"final = []\nfor index , row in sub.iterrows():\n    res = list(set(row['list'].split(' ')))\n    ans = \"\"\n    for item in res:\n        ans = ans + str(item) + \" \"\n    ans = ans[:-1]\n    final.append(ans)\n    \nsubmission = pd.DataFrame()\nsubmission['posting_id'] = sub['posting_id']\nsubmission['matches'] = final","088f3850":"submission.to_csv('submission.csv',index=False)","e2bc04f7":"<center><h3>Displaying Images <\/h3><\/center>","70716a63":"<center><h2>Evaluation metric:<\/h2> <b><h4>F1-score \ud83e\uddea<\/h4><\/b> <\/center>\n\n> The evaluation metric for this competition is F1-Score or F-Score.\n> \n> <img src=\"https:\/\/www.gstatic.com\/education\/formulas2\/355397047\/en\/f1_score.svg\">\n> \n>  It finds the balance between precision and recall.\n>  <img src=\"https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/d37e557b5bfc8de22afa8aad1c187a357ac81bdb\">\n>  <img src=\"https:\/\/miro.medium.com\/max\/560\/1*AEV3TE67ahMn3NVpU0ov4g.png\" height=10>\n>  \n>  where-\n>  - TP = True Positive\n>  - FP = False Positive\n>  - TN = True Negative\n>  - FN = False Negative","2b733fe5":"[Documentation](https:\/\/docs.rapids.ai\/api\/cuml\/nightly\/api.html#cuml.feature_extraction.text) \ud83d\udcd6","da0937d3":"<center><h1>Diving into the Data \ud83e\udd3f <\/h1><\/center>\n\n> **train\/test.csv** - Each row contains the data for a single posting. \n> \n> - posting_id : the ID code for the posting\n> - image : the image id\/md5sum\n> - image_phash : a perceptual hash of the image\n> - title : the product description for the posting\n> - label_group : ID code for all postings that map to the same product. Not provided for the test set\n> - matches - **Space delimited** list of all posting IDs that match a particular posting. \n> \n> \ud83d\udcccPosts always self-match. \n> \n> \ud83d\udccc**Group sizes were capped at 50**, so we need not predict more than 50 matches for a posting.","a4fd2a24":"<div>\n    <img src=\"https:\/\/i.imgur.com\/kQdrSYV.png\">\n    <\/div>\n    \n<center><h1>Introduction \ud83d\udcdd<\/h1><\/center>\n\n> \ud83c\udfafGoal: To build a model that predicts which items are the same products\n>\n> These matches can be performed automatically with the help of machine learning and that is the goal of this competition. We have been provided with data of **Shopee**, which is the leading e-commerce platform in Southeast Asia and Taiwan.","7f9ba5ec":"<center><h3>Plugging in RAPIDS <\/h3><\/center>\n<img src =\"https:\/\/i.imgur.com\/qWulN0F.jpg\" height = 40>"}}