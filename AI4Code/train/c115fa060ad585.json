{"cell_type":{"ac96076f":"code","b23fec38":"code","aa69e071":"code","c26266e7":"code","618272f6":"code","75a81a30":"code","c0ec2a00":"code","c40767c8":"code","2886827f":"code","6fee2a74":"code","e8f1115b":"code","b398d4f9":"code","a953c5a9":"code","0af7e5ca":"code","b47b81c1":"code","6c12a804":"code","7e8bda82":"code","2aa8ac11":"code","ae1ed8af":"code","231a428d":"code","995e7982":"code","71c3abea":"code","74232db1":"code","8d76bca9":"code","5c8c5843":"code","adf8fa64":"code","5bd8d7fd":"code","c5f7f4ba":"code","0e89d90e":"code","e5c51d90":"code","1b8bbdc7":"code","89b2901e":"code","1c780fc4":"code","37e9efb0":"code","0c5026fc":"code","ce3b4d28":"code","1e668189":"code","8dd1583c":"code","7e52dbb2":"code","d739c026":"code","cc040b67":"code","cf4f98ff":"code","b87de782":"code","15b9af62":"code","9eec3924":"code","c2d41700":"code","e71c8197":"code","ef179982":"code","3b8c2f40":"code","d1536afe":"code","31fa30dd":"code","e5ad4438":"code","c3f7887b":"code","52d23ff8":"code","2a940408":"code","7b2e6a6a":"code","aec72f69":"code","dea77de3":"markdown","4d872e36":"markdown","3adfac38":"markdown","376b840b":"markdown","948405a4":"markdown","238740f4":"markdown","a9a15351":"markdown","361d6985":"markdown","64613085":"markdown","7b97564e":"markdown","ce4e9a54":"markdown"},"source":{"ac96076f":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.models.tools import HoverTool","b23fec38":"data = pd.read_csv('..\/input\/kc-house-data\/kc_house_data.csv')\ndata.head()\nprint(len(data))","aa69e071":"data1 =  data[~data['id'].duplicated()]","c26266e7":"data['id'].nunique()","618272f6":"data1.dropna(inplace=True)","75a81a30":"data1['date'] = data1['date'].apply(lambda x: x.split('T')[0])\ndata1['date'] = pd.to_datetime(data1['date'])","c0ec2a00":"from scipy import stats","c40767c8":"ideal = stats.norm.rvs(size=len(data1['price']),loc=data1['price'].mean() ,scale=data1['price'].std()) \nicount, idevision = np.histogram(ideal, bins=100)","2886827f":"count, devision = np.histogram(data['price'], bins=100)","6fee2a74":"def kl(p, q):\n    result = np.sum(np.where(np.logical_and(p!=0, q!=0), p*np.log(p\/q), 0))\n    return result","e8f1115b":"kl(count\/17630, icount\/17630)","b398d4f9":"data1['price'].plot(kind='hist', figsize=(20, 12), bins=100)","a953c5a9":"data1.hist(bins=100, figsize=(20, 12))","0af7e5ca":"def just_95(x):\n    if (x < (-2 * data1['price'].std())) or (x > (2 * data1['price'].std())):\n        return np.nan\n    else:\n        return x","b47b81c1":"data1['price'] = data1['price'].apply(just_95)","6c12a804":"data1['price'].isna().sum()","7e8bda82":"data1.dropna(inplace=True)","2aa8ac11":"data1.hist(bins=100, figsize=(20, 12))","ae1ed8af":"data1['bedrooms'].hist(bins=25)","231a428d":"data1['bathrooms'].value_counts()","995e7982":"#### sqft_lot  \u0645\u062a\u0631\u0627\u0698 \u0645\u0631\u0628\u0639 \u0641\u0636\u0627\u06cc \u0632\u0645\u06cc\u0646\n### sqft_living:\u0645\u062a\u0631\u0627\u0698 \u0645\u0631\u0628\u0639 \u0622\u067e\u0627\u0631\u062a\u0645\u0627\u0646\u0647\u0627 \u0641\u0636\u0627\u06cc \u0632\u0646\u062f\u06af\u06cc \u062f\u0627\u062e\u0644\u06cc","71c3abea":"data1","74232db1":"data1.drop('waterfront', axis=1, inplace=True)","8d76bca9":"### waterfront: \u0622\u0628 \u0646\u0645\u0627 - \u06cc\u06a9 \u0645\u062a\u063a\u06cc\u0631 \u0633\u0627\u062e\u062a\u06af\u06cc \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u0622\u067e\u0627\u0631\u062a\u0645\u0627\u0646 \u0645\u0634\u0631\u0641 \u0628\u0647 \u0622\u0628 \u0646\u0645\u0627 \u0628\u0627\u0634\u062f \u06cc\u0627 \u0646\u0647\n### \n###\n### \u0634\u0627\u062e\u0635 \u0627\u0632 1 \u062a\u0627 13 \u060c \u062c\u0627\u06cc\u06cc \u06a9\u0647 1-3 \u0627\u0632 \u0633\u0627\u062e\u062a \u0648 \u0637\u0631\u0627\u062d\u06cc \u0633\u0627\u062e\u062a\u0645\u0627\u0646 \u06a9\u0645 \u0627\u0633\u062a \u060c 7 \u062f\u0627\u0631\u0627\u06cc \u0633\u0637\u062d \u0633\u0627\u062e\u062a \u0648 \u0637\u0631\u0627\u062d\u06cc \u0645\u062a\u0648\u0633\u0637 \u200b\u200b\u0627\u0633\u062a \u0648 11-13 \u062f\u0627\u0631\u0627\u06cc \u0633\u0637\u062d \u0633\u0627\u062e\u062a \u0648 \u0637\u0631\u0627\u062d\u06cc \u0628\u0627 \u06a9\u06cc\u0641\u06cc\u062a \u0628\u0627\u0644\u0627 \u0627\u0633\u062a.","5c8c5843":"data1['view'].value_counts()","adf8fa64":"data1['grade'].value_counts()","5bd8d7fd":"data1['condition'].value_counts()","c5f7f4ba":"data1['sqft_basement'].value_counts()","0e89d90e":"def renovated(x):\n    if x > 0:\n        return 1\n    elif x <= 0:\n        return 0\ndata1['yr_renovated'] = data1['yr_renovated'].apply(renovated)","e5c51d90":"data1['yr_renovated'].value_counts()","1b8bbdc7":"data1.drop(['id'], inplace=True, axis=1)","89b2901e":"data1","1c780fc4":"p = figure(plot_width=400, plot_height=400)\noutput_file('test.html')\np.circle(x='lat', y='long', source=data1,\n       fill_color='orange',size='price')\nshow(p)","37e9efb0":"plt.figure(figsize=(10, 10))\ns = round((np.sqrt(data1['price'][:1000]) \/ 50 ) - 5)\namount = data1['lat'][:1000].values\nvolume = data1['long'][:1000].values\n\n\nplt.scatter(volume, amount, s=s,\n                     vmin=-3, vmax=3, cmap=\"Spectral\")","0c5026fc":"data2 = data1[:1000].copy()","ce3b4d28":"bath_bed_flor = data2.groupby(['bathrooms', 'bedrooms', 'floors'])['price'].size()","1e668189":"bath_bed_flor.plot(kind='barh', figsize=(20, 20))","8dd1583c":"data1","7e52dbb2":"from geopy.geocoders import Nominatim\ngeolocator = Nominatim(user_agent=\"geoapiExercises\")","d739c026":"lat = data1['lat']\nlong = data1['long']","cc040b67":"## THIS IS JUST FOR TEST:\n#for i in lat:\n#    for j in long:\n#        location = geolocator.reverse(str(i)+','+str(j)) \n#        address = location.raw['address']\n#        state = address.get('state', '')\n#        zipcode = address.get('postcode')\n#    print(state)","cf4f98ff":"def retcityname(lat, long):  \n    for i in lat:\n        for j in long:\n            location = geolocator.reverse(str(i)+','+str(j)) \n            address = location.raw['address']\n            state = address.get('state', '')\n    return state","b87de782":"## it takes long time because at every step start query\n#data1['city_state'] = retcityname(lat, long) ","15b9af62":"data1.drop(['lat', 'long', 'date', 'zipcode'],axis=1 , inplace=True)","9eec3924":"from sklearn.feature_selection import chi2, SelectKBest\nfrom sklearn.model_selection import   train_test_split\nfrom sklearn.preprocessing import StandardScaler","c2d41700":"y = data1['price']","e71c8197":"st = StandardScaler()","ef179982":"x = data1.iloc[:, 1:]","3b8c2f40":"corr = x.corr()\nsns.heatmap(corr, annot=True)","d1536afe":"best_fea = SelectKBest(chi2, k=10)\nbest_fea.fit(x, y)\nx.columns[best_fea.get_support()]","31fa30dd":"x_best = best_fea.transform(x)","e5ad4438":"#x_best = st.fit_transform(x_best)\n#print(x_best.shape)\n\n#y = st.fit_transform(y.reshape(-1, 1))\n#print(y.shape)","c3f7887b":"x_train, x_test, y_train, y_test = train_test_split(x_best ,y)","52d23ff8":"#from catboost import CatBoostRegressor\n#model = CatBoostRegressor(iterations=1000, \n                          #depth=8, \n                          #learning_rate=0.02)\n\n#model.fit(x_train, y_train)\n\n#preds = model.predict(x_test)\n#print(preds)\n#from sklearn import metrics\n#print(metrics.mean_absolute_error(y_test, preds))\n#print(metrics.r2_score(y_test, preds))","2a940408":"from sklearn.ensemble import RandomForestRegressor","7b2e6a6a":"rn = RandomForestRegressor(n_estimators=3000, max_depth=10)\nrn.fit(x_train, y_train)\npre = rn.predict(x_test)\nprint(metrics.mean_absolute_error(y_test, pre))\nprint(metrics.r2_score(y_test, pre))","aec72f69":"import xgboost\nxgb = xgboost.XGBRegressor(max_depth=10\n                           , subsample=0.5, eta=0.1)\nxgb.fit(x_train, y_train)\nyp = xgb.predict(x_test)\nprint(metrics.mean_absolute_error(y_test, yp))\nprint(metrics.r2_score(y_test, yp))","dea77de3":"### Return City Name:","4d872e36":"## Look At First Column [id] it's Not Unique And 177 Row is a Duplicated","3adfac38":"# CLEAN:","376b840b":"alpha means = std\n#### we now our data in normal distribution 65% = 1alpha, -1alpha, 95% = 2alpha, -2alpha, 99% = 3alpha, -3alpha","948405a4":"## Select Just 95% Of Data1['price']: ","238740f4":"### id - Unique ID for each home sold\n### date - Date of the home sale\n### price - Price of each home sold\n### bedrooms - Number of bedrooms\n### bathrooms - Number of bathrooms, where .5 accounts for a room with a toilet but no shower\n### sqft_living - Square footage of the apartments interior living space\n### sqft_lot - Square footage of the land space\n### floors - Number of floors\n### waterfront - A dummy variable for whether the apartment was overlooking the waterfront or not\n### view - An index from 0 to 4 of how good the view of the property was\n### condition - An index from 1 to 5 on the condition of the apartment,\n### grade - An index from 1 to 13, where 1-3 falls short of building construction and design, 7 has an average level of construction and design, and 11-13 have a high quality level of construction and design.\n### sqft_above - The square footage of the interior housing space that is above ground level\n### sqft_basement - The square footage of the interior housing space that is below ground level\n### yr_built - The year the house was initially built\n### yr_renovated - The year of the house\u2019s last renovation\n### zipcode - What zipcode area the house is in\n### lat - Lattitude\n### long - Longitude\n### sqft_living15 - The square footage of interior housing living space for the nearest 15 neighbors\n### sqft_lot15 - The square footage of the land lots of the nearest 15 neighbors","a9a15351":"### is data1['price'] Normal Distribution Or Not?","361d6985":"# Catboostregressor","64613085":"### STANDARD SCALER","7b97564e":"# Explanation Code:","ce4e9a54":"# VISUALIZE"}}