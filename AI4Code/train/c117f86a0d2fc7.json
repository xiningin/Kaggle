{"cell_type":{"e23ae6ea":"code","7912ab6e":"code","666e4f9d":"code","7485bd86":"code","e6ee13e7":"code","1575380c":"code","3508035c":"code","15678876":"code","a53aec65":"code","72afd215":"code","c2ff0d0d":"code","c58c3a03":"code","1f62f9a2":"code","dd3d0640":"code","bac19206":"code","b0470a64":"code","ca17d6c9":"code","e9ee05eb":"code","6cce3771":"code","aaab87b2":"code","ef2bc622":"code","a598c35b":"code","46b02fb2":"code","1e8d9326":"code","993b77d3":"code","fabbf90d":"code","7bbdbe4f":"code","2acd7da2":"markdown","0dc02715":"markdown","4f5c70ff":"markdown","65ecd698":"markdown","b400f4e7":"markdown","771108dd":"markdown","dd7f8e92":"markdown","415bfc4b":"markdown","1115d89b":"markdown","acda0442":"markdown","27414c5d":"markdown","871f221b":"markdown","1f86d6f1":"markdown","8244084d":"markdown","fb2e6191":"markdown","0c02ab40":"markdown","e30be44e":"markdown"},"source":{"e23ae6ea":"import numpy as np\nimport pandas as pd\nimport os \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport folium\nimport datetime\nimport plotly.graph_objs as go\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML","7912ab6e":"os.listdir('..\/input\/novel-corona-virus-2019-dataset')","666e4f9d":"data=pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndata['date']=data.ObservationDate.apply(lambda x:datetime.datetime.strptime(str(x),'%m\/%d\/%Y').strftime('%Y-%m-%d'))\ndata.head()","7485bd86":"data2=pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv')\ndata2.head()","e6ee13e7":"data2=data2.dropna(subset=['wuhan(0)_not_wuhan(1)','latitude'])\ndata2=data2.fillna(value = {'sex' : 'Unknown', 'age' : 'Unknown'})\ndata2=data2.drop(index=data2[data2.sex=='4000'].index)\ndata2=data2.replace(to_replace = 'Female', value ='female')\ndata2=data2.replace(to_replace = 'Male', value ='male')\ndata2['label']=data2.apply(lambda x: ('age:'+str(x['age']),'sex:'+str(x['sex']),'geo_resolution:'+str(x['geo_resolution']),'Confirmed_date:'+str(x['date_confirmation'])),axis=1)\nplt.figure(figsize=(10,10))\nsns.barplot(x=data2.isnull().sum().sort_values(ascending=False),y=data2.isnull().sum().sort_values(ascending=False).index)\nplt.title(\"counts of missing value for COVID19_open_line_list\",size=20)","1575380c":"print('The data size is',len(data))","3508035c":"formated_gdf = data.groupby(['date','Country\/Region']).agg('sum')\nformated_gdf = formated_gdf.reset_index()\nformated_gdf=formated_gdf.drop(columns='SNo')\n","15678876":"Confirmed_last=data[data['date']==max(data['date'])].groupby(['Country\/Region']).agg('sum').sort_values('Confirmed',ascending=False)[:10]\nConfirmed_last=Confirmed_last.reset_index()\nConfirmed_last=Confirmed_last.drop(columns='SNo')\nConfirmed_last['Recovered rate']=Confirmed_last['Recovered']\/Confirmed_last['Confirmed']\nConfirmed_last.style.background_gradient(cmap='Blues')","a53aec65":"fig = go.Figure(data=[\n    go.Line(name='Confirmed', x=formated_gdf[formated_gdf['Country\/Region']=='Mainland China']['date'], y=formated_gdf[formated_gdf['Country\/Region']=='Mainland China']['Confirmed']),\n    go.Line(name='Deaths', x=formated_gdf[formated_gdf['Country\/Region']=='Mainland China']['date'], y=formated_gdf[formated_gdf['Country\/Region']=='Mainland China']['Deaths']),\n    go.Line(name='Recovered', x=formated_gdf[formated_gdf['Country\/Region']=='Mainland China']['date'], y=formated_gdf[formated_gdf['Country\/Region']=='Mainland China']['Recovered']),\n])\n\nfig.update_layout(\n    title=\"Number of Confirmed,Recovered,death in china for each day\",\n    xaxis_title=\"date\",\n    yaxis_title=\"People\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"#7f7f7f\"\n    ))\nfig","72afd215":"fig = go.Figure(data=[\n    go.Line(name='Confirmed', x=formated_gdf[formated_gdf['Country\/Region']=='Taiwan']['date'], y=formated_gdf[formated_gdf['Country\/Region']=='Taiwan']['Confirmed']),\n    go.Line(name='Deaths', x=formated_gdf[formated_gdf['Country\/Region']=='Taiwan']['date'], y=formated_gdf[formated_gdf['Country\/Region']=='Taiwan']['Deaths']),\n    go.Line(name='Recovered', x=formated_gdf[formated_gdf['Country\/Region']=='Taiwan']['date'], y=formated_gdf[formated_gdf['Country\/Region']=='Taiwan']['Recovered']),\n])\n\nfig.update_layout(\n    title=\"Number of Confirmed,Recovered,death in Taiwan for each day\",\n    xaxis_title=\"date\",\n    yaxis_title=\"People\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"#7f7f7f\"\n    ))\nfig","c2ff0d0d":"formated_gdf['size'] = formated_gdf['Confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"date\", \n                     title='Confirmed for each day')\nfig.show()","c58c3a03":"formated_gdf['size'] = formated_gdf['Deaths'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Deaths\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Deaths'])+2], \n                     projection=\"natural earth\", animation_frame=\"date\", \n                     title='Deaths for each day')\nfig.show()","1f62f9a2":"formated_gdf['size'] = formated_gdf['Recovered'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Recovered\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Recovered'])+2], \n                     projection=\"natural earth\", animation_frame=\"date\", \n                     title='Recovered for each day')\nfig.show()","dd3d0640":"china=data[data['Country\/Region']=='Mainland China']\nchina= china.groupby(['date','Province\/State'])['Confirmed', 'Deaths', 'Recovered'].max()\nchina = china.reset_index()\nchina.head()","bac19206":"china['Province\/State'].unique()","b0470a64":"china_table=china[china['date']==max(china['date'])].sort_values('Confirmed',ascending=False)[:10]\nchina_table=china_table.drop(columns=['date'])\nchina_table['Recovered rate']=china_table['Recovered']\/china_table['Confirmed']\nchina_table.style.background_gradient(cmap='Reds')","ca17d6c9":"colors = dict(zip(\n    ['Anhui', 'Beijing', 'Chongqing', 'Fujian', 'Gansu', 'Guangdong',\n       'Guangxi', 'Guizhou', 'Hainan', 'Hebei', 'Heilongjiang', 'Henan',\n       'Hubei', 'Hunan', 'Inner Mongolia', 'Jiangsu', 'Jiangxi', 'Jilin',\n       'Liaoning', 'Ningxia', 'Qinghai', 'Shaanxi', 'Shandong',\n       'Shanghai', 'Shanxi', 'Sichuan', 'Tianjin', 'Tibet', 'Xinjiang',\n       'Yunnan', 'Zhejiang'],\n    ['#800000', '#8B0000', '#A52A2A', '#B22222', '#DC143C', '#FF0000', '#FF6347','#FF7F50','#CD5C5C','#F08080',\n    '#E9967A','#FA8072','#FFA07A','#FF4500','#FF8C00','#FFA500','#FFD700','#B8860B','#DAA520','#EEE8AA',\n    '#BDB76B','#F0E68C','#808000','#FFFF00','#9ACD32','#556B2F','#6B8E23','#7CFC00','#7FFF00','#ADFF2F',\n    '#006400']\n))\n\n\ndef race_barchart(date):\n    dff = china[china['date'].eq(date)].sort_values(by='Confirmed', ascending=True).tail(10)\n    ax.clear()\n    ax.barh(dff['Province\/State'], dff['Confirmed'], color=[colors[x] for x in dff['Province\/State']],height=0.8)\n    dx = dff['Confirmed'].max() \/ 200\n    \n    for i, (value, name) in enumerate(zip(dff['Confirmed'], dff['Province\/State'])):\n        ax.text(0, i,name+' ',size=16, weight=600, ha='right', va='center') \n        ax.text(value+dx, i,f'{value:,.0f}',  size=16, ha='left',  va='center') \n            \n    ax.text(0.9, 0.2, date, transform=ax.transAxes, color='#777777', size=72, ha='right', weight=1000) \n    ax.text(0.59, 0.14, 'Total Confirmed:'+str(int(dff['Confirmed'].sum())), transform=ax.transAxes, size=24, color='#000000',ha='left')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12) \n    ax.xaxis.set_ticks_position('top') \n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-') \n    ax.text(0, 1.15, 'Confirmed for each date in China ',\n                transform=ax.transAxes, size=24, weight=600, ha='left', va='top') \n\n    plt.box(False)\n    \n\nday = list(set(china.date.values))\nday.sort()\n\nfig, ax = plt.subplots(figsize=(16, 9))\n\nHTML(animation.FuncAnimation(fig, race_barchart, frames=day).to_jshtml())","e9ee05eb":"fig = go.Figure(data=[\n    go.Line(name='Confirmed', x=china[china['Province\/State']=='Hubei']['date'], y=china[china['Province\/State']=='Hubei']['Confirmed']),\n    go.Line(name='Deaths', x=china[china['Province\/State']=='Hubei']['date'], y=china[china['Province\/State']=='Hubei']['Deaths']),\n    go.Line(name='Recovered', x=china[china['Province\/State']=='Hubei']['date'], y=china[china['Province\/State']=='Hubei']['Recovered']),\n])\n\nfig.update_layout(\n    title=\"Number of Confirmed,Recovered,death in Huibel for each day\",\n    xaxis_title=\"date\",\n    yaxis_title=\"People\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"#7f7f7f\"\n    ))\nfig","6cce3771":"Italy=data[data['Country\/Region']=='Italy']\nItaly= Italy.groupby(['date'])['Confirmed', 'Deaths', 'Recovered'].max()\nItaly = Italy.reset_index()\nItaly.head()","aaab87b2":"fig = go.Figure(data=[\n    go.Line(name='Confirmed', x=Italy['date'], y=Italy['Confirmed']),\n    go.Line(name='Deaths', x=Italy['date'], y=Italy['Deaths']),\n    go.Line(name='Recovered', x=Italy['date'], y=Italy['Recovered']),\n])\n\nfig.update_layout(\n    title=\"Number of Confirmed,Recovered,death in Italy for each day\",\n    xaxis_title=\"date\",\n    yaxis_title=\"People\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"#7f7f7f\"\n    ))\nfig","ef2bc622":"fig,ax=plt.subplots(1,2,figsize=(20,10))\nsns.barplot(x=data2.sex.value_counts().sort_values(ascending=False),y=data2.sex.value_counts().sort_values(ascending=False).index,ax=ax[0])\nax[0].set_title(\"Number of patient by sex\",size=20)\nax[0].set_xlabel('patient',size=18)\nsns.barplot(x=data2.country.value_counts().sort_values(ascending=False),y=data2.country.value_counts().sort_values(ascending=False).index,ax=ax[1])\nax[1].set_title(\"Number of patient by country\",size=20)\nax[1].set_xlabel('patient',size=18)","a598c35b":"incidents=folium.map.FeatureGroup()\n\nLat=data2.latitude.mean()\nLon=data2.longitude.mean()\nfrom folium import plugins\n\nmap1=folium.Map([Lat,Lon],zoom_start=3)\n\nCOVID_map=plugins.MarkerCluster().add_to(map1)\nfor lat,lon,label in zip(data2.latitude,data2.longitude,data2.label):\n    folium.Marker(location=[lat,lon],icon=None,popup=label).add_to(COVID_map)\nmap1.add_child(COVID_map)\nmap1.save(\"COVID\"+\".html\")","46b02fb2":"HTML('<iframe src=COVID.html width=1000 height=450><\/iframe>')","1e8d9326":"US=data[data['Country\/Region']=='US']\nUS= US.groupby(['date','Province\/State'])['Confirmed', 'Deaths', 'Recovered'].max()\nUS =US.reset_index()\n\nUS_table=US[US['date']==max(US['date'])].sort_values('Confirmed',ascending=False)[:10]\nUS_table=US_table.drop(columns=['date'])\nUS_table['Recovered rate']=US_table['Recovered']\/US_table['Confirmed']\nUS_table.style.background_gradient(cmap='Purples')","993b77d3":"import random\nrandom.seed( 199 )\ndef randomcolor():\n    colorArr = ['1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n    color = \"\"\n    for i in range(6):\n        color += colorArr[random.randint(0,14)]\n    return \"#\"+color\ncolor_US=[]\nfor i in range(len(US['Province\/State'].unique())):\n    color_US.append(randomcolor())","fabbf90d":"colors_US = dict(zip(\n    US['Province\/State'].unique(),\n    color_US\n))\n\n\ndef race_barchart_US(date):\n    dff = US[US['date'].eq(date)].sort_values(by='Confirmed', ascending=True).tail(10)\n    ax.clear()\n    ax.barh(dff['Province\/State'], dff['Confirmed'], color=[colors_US[x] for x in dff['Province\/State']],height=0.8)\n    dx = dff['Confirmed'].max() \/ 200\n    \n    for i, (value, name) in enumerate(zip(dff['Confirmed'], dff['Province\/State'])):\n        ax.text(0, i,name+' ',size=16, weight=600, ha='right', va='center') \n        ax.text(value+dx, i,f'{value:,.0f}',  size=16, ha='left',  va='center') \n            \n    ax.text(0.9, 0.2, date, transform=ax.transAxes, color='#777777', size=72, ha='right', weight=1000) \n    ax.text(0.59, 0.14, 'Total Confirmed:'+str(int(dff['Confirmed'].sum())), transform=ax.transAxes, size=24, color='#000000',ha='left')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12) \n    ax.xaxis.set_ticks_position('top') \n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-') \n    ax.text(0, 1.15, 'Confirmed for each date in US ',\n                transform=ax.transAxes, size=24, weight=600, ha='left', va='top') \n\n    plt.box(False)\n    \n\nday = list(set(US.date.values))\nday.sort()\n\nfig, ax = plt.subplots(figsize=(16, 9))\n\nHTML(animation.FuncAnimation(fig, race_barchart_US, frames=day,interval=400).to_jshtml())","7bbdbe4f":"fig = go.Figure(data=[\n    go.Line(name='Confirmed', x=formated_gdf[formated_gdf['Country\/Region']=='US']['date'], y=formated_gdf[formated_gdf['Country\/Region']=='US']['Confirmed']),\n    go.Line(name='Deaths', x=formated_gdf[formated_gdf['Country\/Region']=='US']['date'], y=formated_gdf[formated_gdf['Country\/Region']=='US']['Deaths']),\n    go.Line(name='Recovered', x=formated_gdf[formated_gdf['Country\/Region']=='US']['date'], y=formated_gdf[formated_gdf['Country\/Region']=='US']['Recovered']),\n])\n\nfig.update_layout(\n    title=\"Number of Confirmed,Recovered,death in US for each day\",\n    xaxis_title=\"date\",\n    yaxis_title=\"People\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"#7f7f7f\"\n    ))\nfig","2acd7da2":"<h3 id=\"25\">2.5&nbsp;Visualization&nbsp;for&nbsp;Province\/State&nbsp;in&nbsp;US<\/h3>","0dc02715":"# 2.Visualization","4f5c70ff":"<h3 id=\"24\">2.4&nbsp;Visualization&nbsp;for&nbsp;patient&nbsp;in&nbsp;the&nbsp;world<\/h3>","65ecd698":"<h3 id=\"23\">2.3&nbsp;Visualization&nbsp;for&nbsp;Italy<\/h3>","b400f4e7":"According to this chart,the confirmed people were between 2\/12 and 2\/13,increased about 10,000 people in Hubei.Because the rest of China is still using the results of lab tests to count confirmed cases, which is why the surge only appeared in Hubei.\n\nThe detail news:https:\/\/www.vox.com\/2020\/2\/13\/21136307\/coronavirus-china-virus-hubei-cases","771108dd":"According to this table,you can know that the recovered rate is so high for each state in China.Actually,we can doubt about this information,but I think that there do not have too much problem  for other country so far.","dd7f8e92":"<h3 id=\"21\">2.1&nbsp;Visualization&nbsp;for&nbsp;Country\/Region<\/h3>","415bfc4b":"According to this line chart,Corona is getting serious on 15th,March,2020.More and more people are confirmed.","1115d89b":"<h3 id=\"22\">2.2&nbsp;Visualization&nbsp;for&nbsp;Province\/State&nbsp;in&nbsp;China<\/h3>","acda0442":"The data size is 16729,and the variables include Observation Date,State,Region,and so on.We know that the disease was first identified in 2019 in Wuhan,China.According to this data,we can understand how fast the virus were spread in the world.In this note,I will do some data visualization and table to get some information about the COVID-19.If you have any advice or suggestion,welcome to give me some comments to improve the analysis.","27414c5d":"# 1.DataOverview","871f221b":"![image.png](attachment:image.png)","1f86d6f1":"We know that Corona is getting serious in US.So I want to do some visualization to understand how fast the virus infected. According to this table,we know that the virus is the most serious in New York. ","8244084d":"According to this table,not only in china,we know that the virus is getting serious in US.The people are confirmed up to 759086.Actually,there has a little weird information in this table,which is the number of  people are recovered in china.The are 77068 people have recovered,but the confirmed are only 82735.Compare to other country,the recovered rate is too high in china.","fb2e6191":"**Coronavirus disease 2019 (COVID-19)** is an infectious disease caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2).The disease was first identified in 2019 in Wuhan, China, and has since spread globally, resulting in the 2019\u201320 coronavirus pandemic.Recommended measures to prevent infection include frequent hand washing, maintaining distance from others (social distancing), and keeping hands away from the face. The use of masks is recommended for those who suspect they have the virus and their caregivers, but not the general public.There is no vaccine or specific antiviral treatment for COVID-19. Management involves treatment of symptoms, supportive care, isolation, and experimental measures.","0c02ab40":"![image.png](attachment:image.png)","e30be44e":"* [1.DataOverview](#1.DataOverview)\n* [2.Visualization](#2.Visualization)\n    * [2.1 Visualization for Country\/Region](#21)\n    * [2.2 Visualization for Province\/State in China](#22)\n    * [2.3 Visualization for Italy](#23)\n    * [2.4 Visualization for patient in the world](#24)\n    * [2.5 Visualization for Province\/State in US](#25)"}}