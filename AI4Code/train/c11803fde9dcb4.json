{"cell_type":{"4e37feab":"code","c056258b":"code","5f9bd804":"code","f90b4c96":"code","3e9f491f":"code","c72ddfa6":"code","5fc6af45":"code","509aa7df":"code","838043b7":"code","550ac3a8":"code","56a5921f":"code","8fd38e9c":"code","a77d5865":"markdown","9f9796d2":"markdown","96821104":"markdown","900d0f7b":"markdown","6b343224":"markdown","7e7cb9e5":"markdown","0af36381":"markdown"},"source":{"4e37feab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c056258b":"import os\n\nimport pandas as pd\nimport numpy as np\n\nimport cv2\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Input, Conv2D, Dense, Flatten, Dropout, GlobalMaxPooling2D\nfrom tensorflow.keras.models import Model\n\nfrom tqdm import tqdm\n\nfrom  matplotlib import pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline","5f9bd804":"BASE_DIR = '..\/input\/rfcsaddenoisedmelspectrainv1\/train_images'\nOUTPUT_DIR = '.'","f90b4c96":"train_fp = pd.read_csv('..\/input\/rfcx-species-audio-detection\/train_fp.csv')\ntrain_fp.head()","3e9f491f":"NUM_SPECIES = len(set(train_fp['species_id'].values))\nprint('There are %s species' % (NUM_SPECIES))","c72ddfa6":"images = []\nspecies = []\nfor index, row in tqdm(train_fp.iterrows()):    \n    # Load the image\n    IMG_HEIGHT = 310\n    IMG_WIDTH = 154\n    image_path= '%s\/%s.jpg' % (BASE_DIR, str(row['recording_id']))\n    image= cv2.imread( image_path, cv2.COLOR_BGR2RGB)\n    image=cv2.resize(image, (IMG_HEIGHT, IMG_WIDTH),interpolation = cv2.INTER_AREA)\n    image=np.array(image)\n    image = image.astype('float32')\n    image \/= 255 \n    \n    # Put the image into an array\n    images = images + [image]\n    \n    # Put the species_id into an array\n    species = species + [int(row['species_id'])]\n\nspecies_dummies = pd.get_dummies(np.array(species))","5fc6af45":"species_dummies","509aa7df":"'''\n# Save Images Array\nimages_file = open('%s\/images' % (OUTPUT_DIR), \"wb\")\nnp.save(images_file, images)\n# close the file\nimages_file.close\n\n# Save Species Array\nspecies_file = open('%s\/species' % (OUTPUT_DIR), \"wb\")\nnp.save(species_file, species)\n# close the file\nspecies_file.close\n'''","838043b7":"# Build the model using the functional API\ni = Input(shape=(IMG_HEIGHT,IMG_WIDTH, 3))\nx = Conv2D(32, (3, 3), strides=2, activation='relu')(i)\nx = Conv2D(64, (3, 3), strides=2, activation='relu')(x)\nx = Conv2D(128, (3, 3), strides=2, activation='relu')(x)\nx = Flatten()(x)\nx = Dropout(0.5)(x)\nx = Dense(1024, activation='relu')(x)\nx = Dropout(0.2)(x)\nx = Dense(NUM_SPECIES, activation='softmax')(x)\n\nmodel = Model(i, x)\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","550ac3a8":"model.summary()","56a5921f":"history = model.fit(x=np.array(images, np.float32), y=np.array(species_dummies, np.float32), epochs=15)","8fd38e9c":"model.predict(np.array(images[:2], np.float32))","a77d5865":"# Predict","9f9796d2":"# Compile and Fit Model","96821104":"# Data Preprocessing","900d0f7b":"# Classify Species using De-noised Melspectrograms and a CNN\n\nHere I will be using my dataset (https:\/\/www.kaggle.com\/tjcdev\/rfcsaddenoisedmelspectrainv1) that was created by converting all the .flac files into de-noised melspectrogram images. \n\nThe following notebook contains the code for converting the .flac files into the de-noised melspectrograms https:\/\/www.kaggle.com\/tjcdev\/convert-audio-to-de-noised-melspectrogram-image","6b343224":"The image shapes are (154, 310, 3).","7e7cb9e5":"# Future Work\n\nNext I will build a prediction pipeline on the test set. In the meantime I hope this notebook is a helpful example of how to use the denoised melspectrogram dataset.","0af36381":"### Create two arrays, one of images and one of the species in this image."}}