{"cell_type":{"61e0d4ba":"code","6c55700c":"code","fe21a5f9":"code","1e6db726":"code","64659cbf":"code","7ecb2d71":"code","f602d562":"code","6899258a":"code","69fd4dbb":"code","d6f4a3f0":"markdown","8288041a":"markdown","89c651e8":"markdown","06ad026e":"markdown","d840b596":"markdown"},"source":{"61e0d4ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6c55700c":"fpath = '\/kaggle\/input\/santa-2019-workshop-scheduling\/family_data.csv'\ndata = pd.read_csv(fpath, index_col='family_id')\n\nfpath = '\/kaggle\/input\/santa-2019-workshop-scheduling\/sample_submission.csv'\nsubmission = pd.read_csv(fpath, index_col='family_id')","fe21a5f9":"data.head()","1e6db726":"data.shape","64659cbf":"submission.head()","7ecb2d71":"submission.shape","f602d562":"family_size_dict = data[['n_people']].to_dict()['n_people']\n\ncols = [f'choice_{i}' for i in range(10)]\nchoice_dict = data[cols].to_dict()\n\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\n# from 100 to 1\ndays = list(range(N_DAYS,0,-1))","6899258a":"def cost_function(prediction):\n\n    penalty = 0\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = {k:0 for k in days}\n    \n    # Looping over each family; d is the day for each family f\n    for f, d in enumerate(prediction):\n\n        # Using our lookup dictionaries to make simpler variable names\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # add the family member count to the daily occupancy\n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    for _, v in daily_occupancy.items():\n        if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n            penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_cost = max(0, accounting_cost)\n    \n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_cost += max(0, (daily_occupancy[day]-125.0) \/ 400.0 * daily_occupancy[day]**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n\n    penalty += accounting_cost\n\n    return penalty","69fd4dbb":"# Start with the sample submission values\nbest = submission['assigned_day'].tolist()\nstart_score = cost_function(best)\n\nnew = best.copy()\n# loop over each family\nfor fam_id, _ in enumerate(best):\n    # loop over each family choice\n    for pick in range(10):\n        day = choice_dict[f'choice_{pick}'][fam_id]\n        temp = new.copy()\n        temp[fam_id] = day # add in the new pick\n        if cost_function(temp) < start_score:\n            new = temp.copy()\n            start_score = cost_function(new)\n\nfor fam_id, _ in enumerate(new):\n    # loop over each family choice\n    for pick in range(10):\n        day = choice_dict[f'choice_{pick}'][fam_id]\n        temp = new.copy()\n        temp[fam_id] = day # add in the new pick\n        if cost_function(temp) < start_score:\n            new = temp.copy()\n            start_score = cost_function(new)\n\n\nsubmission['assigned_day'] = new\nscore = cost_function(new)\nsubmission.to_csv(f'submission_{score}.csv')\nprint(f'Score: {score}')","d6f4a3f0":"## Read in the family information and sample submission","8288041a":"## Create some lookup dictionaries and define constants\n\nYou don't need to do it this way. :-)","89c651e8":"This notebook is derived on below idea in discussion  and complete copy of Inversion's notebook but getting better score by optimizing score once more- 568724\n\nCredits- Inversion ,Venn\n\nhttps:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/119196#latest-682286\n\nI wonder if we can optimize it further by adding same code multiple times . I will research on it but definitely that is not the most efficient manner of improving score :-) . \n","06ad026e":"## Cost Function\nVery un-optimized  ;-)","d840b596":"## Simple Opimization Approach\n\nFor each family, loop over their choices, and if keep it if the score improves. There's a lot of easy improvement that can be made to this code."}}