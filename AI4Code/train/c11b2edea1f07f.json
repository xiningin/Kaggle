{"cell_type":{"b7bdb341":"code","442b01f0":"code","fe1573eb":"code","c09bee8b":"code","82a97e76":"code","7ca6e378":"code","be999958":"code","c696a532":"code","dfe8ce9d":"markdown","1fa29105":"markdown","6d9784dc":"markdown","df4da9ea":"markdown"},"source":{"b7bdb341":"!pip install mtcnn","442b01f0":"import numpy as np\nimport pandas as pd\nimport cv2\nfrom mtcnn.mtcnn import MTCNN\nfrom matplotlib import pyplot as plt\nfrom keras.models import load_model\nfrom PIL import Image\nimport os","fe1573eb":"def extract_face(filename, required_size=(160, 160)):#\u8bfb\u53d6\u56fe\u7247\u6587\u4ef6\uff0c\u63d0\u53d6\u4eba\u8138\uff0c\u5e76\u8f6c\u6362\u4e3aFaceNet\u652f\u6301\u7684required_size\u5927\u5c0f\n    image = Image.open(filename)\n    image = image.convert('RGB')\n    pixels = np.asarray(image)\n    detector = MTCNN()#\u4f7f\u7528\u9ed8\u8ba4\u6743\u91cd\u521b\u5efa\u68c0\u6d4b\u5668\n    results = detector.detect_faces(pixels)#\u4eba\u8138\u68c0\u6d4b\n    x1, y1, width, height = results[0]['box']#\u7b2c\u4e00\u5f20\u8138\u7684bounding_box\n    x1, y1 = abs(x1), abs(y1)\n    x2, y2 = x1 + width, y1 + height#\u5f97\u5230\u6240\u6709\u9876\u70b9\u7684\u4f4d\u7f6e\n    face = pixels[y1:y2, x1:x2]\n    image = Image.fromarray(face)\n    image = image.resize(required_size)#\u8f6c\u6362\u5927\u5c0f\n    face_array = np.asarray(image)\n    return face_array\n\ndef load_face(dir):#\u8bfb\u53d6\u4e00\u4e2a\u6587\u4ef6\u5939\u5185\u6240\u6709\u56fe\u7247\u6587\u4ef6\u5e76\u63d0\u53d6\u4eba\u8138\uff0c\u8fd4\u56de\u4e00\u4e2a\u4eba\u8138\u5217\u8868\n    faces = list()\n    for filename in os.listdir(dir):\n        path = dir + filename\n        face = extract_face(path)\n        faces.append(face)\n    return faces\n\ndef load_dataset(dir):#\u83b7\u53d6\u8bad\u7ec3\u96c6\u548c\u6807\u7b7e\n    X, y = list(), list()\n    for subdir in os.listdir(dir):#\u6587\u4ef6\u5939\u540d\u5c31\u662f\u6807\u7b7e\u540d\n        path = dir + subdir + '\/'\n        faces = load_face(path)\n        labels = [subdir for i in range(len(faces))]\n        print(\"loaded %d sample for class: %s\" % (len(faces),subdir))#\u8bfb\u53d6\u8fdb\u5ea6\n        X.extend(faces)\n        y.extend(labels)\n    return np.asarray(X), np.asarray(y)\n\n\n#\u8bfb\u53d6\u8bad\u7ec3\u96c6\ntrainX, trainy = load_dataset('..\/input\/5-celebrity-faces-dataset\/data\/train\/')\nprint(trainX.shape, trainy.shape)\n#\u8bfb\u53d6\u6d4b\u8bd5\u96c6\ntestX, testy = load_dataset('..\/input\/5-celebrity-faces-dataset\/data\/val\/')\nprint(testX.shape, testy.shape)","c09bee8b":"facenet_model = load_model('..\/input\/facenet-keras\/facenet_keras.h5')\n\ndef get_embedding(model, face):\n    face = face.astype('float32')\n    mean, std = face.mean(), face.std()\n    face = (face-mean)\/std#\u5f52\u4e00\u5316\n    sample = np.expand_dims(face, axis=0)#\u4e09\u7ef4\u53d8\u56db\u7ef4\n    yhat = model.predict(sample)#\u4eba\u8138\u7f16\u7801\u4e3a\u5411\u91cf\n    return yhat[0]\n\nemdTrainX = list()\nfor face in trainX:\n    emd = get_embedding(facenet_model, face)\n    emdTrainX.append(emd)\n    break\nemdTrainX = np.asarray(emdTrainX)#\u8f6c\u4e3anumpy\u6570\u7ec4","82a97e76":"#\u8bad\u7ec3\u96c6\u4e2d\u6240\u6709\u7684\u4eba\u8138\u8f6c\u4e3a\u5411\u91cf\nemdTrainX = list()\nfor face in trainX:\n    emd = get_embedding(facenet_model, face)\n    emdTrainX.append(emd)\nemdTrainX = np.asarray(emdTrainX)#\u8f6c\u4e3anumpy\u6570\u7ec4\nprint(emdTrainX.shape)\n\n#\u6d4b\u8bd5\u96c6\u4e2d\u6240\u6709\u7684\u4eba\u8138\u8f6c\u4e3a\u5411\u91cf\nemdTestX = list()\nfor face in testX:\n    emd = get_embedding(facenet_model, face)\n    emdTestX.append(emd)\nemdTestX = np.asarray(emdTestX)#\u8f6c\u4e3anumpy\u6570\u7ec4\nprint(emdTestX.shape)","7ca6e378":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import Normalizer\n\nin_encoder = Normalizer()\nemdTrainX_norm = in_encoder.transform(emdTrainX)#\u5f52\u4e00\u5316\nemdTestX_norm = in_encoder.transform(emdTestX)#\u5f52\u4e00\u5316\nout_encoder = LabelEncoder()\nout_encoder.fit(trainy)\ntrainy_enc = out_encoder.transform(trainy)#\u6807\u79f0\u578b\u6570\u636e\u7f16\u7801\u4e3a\u6570\u503c\u578b\u6570\u636e\ntesty_enc = out_encoder.transform(testy)#\u6807\u79f0\u578b\u6570\u636e\u7f16\u7801\u4e3a\u6570\u503c\u578b\u6570\u636e","be999958":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\nmodel = SVC(kernel='linear', probability=True)\nmodel.fit(emdTrainX_norm, trainy_enc)\nyhat_train = model.predict(emdTrainX_norm)\nyhat_test = model.predict(emdTestX_norm)\nscore_train = accuracy_score(trainy_enc, yhat_train)\nscore_test = accuracy_score(testy_enc, yhat_test)\nprint('Accuracy: train=%.3f, test=%.3f' % (score_train*100, score_test*100))","c696a532":"from random import choice\n\nselection = choice([i for i in range(testX.shape[0])])\nrandom_face = testX[selection]#\u968f\u673a\u83b7\u53d6\u4e00\u5f20\u4eba\u8138\nrandom_face_emd = emdTestX_norm[selection]#\u83b7\u53d6\u8be5\u4eba\u8138\u7684\u7f16\u7801\u5411\u91cf\nrandom_face_class = testy_enc[selection]#\u83b7\u53d6\u8be5\u4eba\u8138\u7684\u6807\u7b7e\uff08\u6570\u503c\u578b\uff09\nrandom_face_name = out_encoder.inverse_transform([random_face_class])#\u83b7\u53d6\u8be5\u4eba\u8138\u7684\u6807\u7b7e\uff08\u6807\u79f0\u578b\uff09\n\nsamples = np.expand_dims(random_face_emd, axis=0)#\u4e09\u7ef4\u53d8\u56db\u7ef4\nyhat_class = model.predict(samples)#\u4f7f\u7528SVM\u5206\u7c7b\nprint(yhat_class)\nyhat_prob = model.predict_proba(samples)#\u83b7\u53d6\u6bcf\u4e00\u7c7b\u7684\u6982\u7387\nprint(yhat_prob)\nclass_index = yhat_class[0]#\u83b7\u53d6\u5206\u7c7b\uff08\u6570\u503c\u578b\uff09\nclass_probability = yhat_prob[0,class_index] * 100#\u5206\u7c7b\u7684\u6982\u7387\npredict_names = out_encoder.inverse_transform(yhat_class)#\u83b7\u53d6\u5206\u7c7b\uff08\u6807\u79f0\u578b\uff09\nall_names = out_encoder.inverse_transform([0,1,2,3,4])#\u6240\u6709\u79cd\u7c7b\u7684\u6807\u7b7e\uff08\u6807\u79f0\u578b\uff09\nprint('Predicted: \\n%s \\n%s' % (all_names, yhat_prob[0]*100))\nprint('Expected: %s' % random_face_name[0])\nplt.imshow(random_face)\ntitle = '%s (%.3f)' % (predict_names[0], class_probability)\nplt.title(title)\nplt.show()\n","dfe8ce9d":"# \u63d0\u53d6\u4eba\u8138","1fa29105":"# \u63d0\u53d6\u7279\u5f81","6d9784dc":"# \u5206\u7c7b","df4da9ea":"# \u524d\u671f\u51c6\u5907"}}