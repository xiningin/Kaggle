{"cell_type":{"71f7d498":"code","f6a95166":"code","ecf945dd":"code","bbd2eb41":"code","b82de9ab":"code","6fd8d94c":"code","6038cfab":"code","2d10d86a":"code","9f84a79e":"markdown","3180997b":"markdown","8cc8aa8e":"markdown","c3defe0f":"markdown"},"source":{"71f7d498":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6a95166":"data = pd.read_csv('..\/input\/student-study-hour-v2\/Student Study Hour V2.csv')\ndata.head()\nX = data[['Hours']]\ny = data[['Scores']]\n","ecf945dd":"import seaborn as sns\nheatmap = sns.heatmap(data.corr()[['Scores']].sort_values(by='Scores', ascending=False), vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('Hours Correlating with Scores', fontdict={'fontsize':20}, pad=30);\nheatmap.figure.set_size_inches(6, 6)","bbd2eb41":"sc = sns.scatterplot(data=data, x = \"Scores\", y = \"Hours\")\nsc","b82de9ab":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","6fd8d94c":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\ndef metrics(y_true, y_preds):#func by Kwadwo Ofosu\n    r2 = r2_score(y_true, y_preds)\n    mae = mean_absolute_error(y_true, y_preds)\n    mse = mean_squared_error(y_true, y_preds)\n    \n    metrics = {'r2_score' : r2,\n               'mean absolute error' : round(mae, 2),\n               'mean_squared error' : round(mse, 2)}\n    \n    print(f'R2_score: {r2 * 100:.2f}%')\n    print(f'MAE: {mae:.2f}')\n    print(f'MSE: {mse:.2f}')\n    \n    return metrics","6038cfab":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import accuracy_score\nreg = LinearRegression()\n#reg.coef_\nreg.fit(X_train,y_train)\ny_pred = reg.predict(X_test)\nmetrics(y_test,y_pred)\n","2d10d86a":"import matplotlib.pyplot as plt \n%matplotlib inline\nline= reg.coef_*X+reg.intercept_\n\nplt.scatter(X, y)\nplt.plot(X, line)\nplt.show()","9f84a79e":"# Split data","3180997b":"# Import Data","8cc8aa8e":"# Make metrics functions","c3defe0f":"# Make model"}}