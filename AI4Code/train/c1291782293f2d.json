{"cell_type":{"9f2688cd":"code","051ae935":"code","199af405":"code","27ccf8c5":"code","6f072e42":"code","87828d43":"code","514dc3f6":"code","543c2234":"code","e70ac226":"code","a8a68274":"code","8b24d250":"code","c681e67a":"code","8e351161":"code","1172d06c":"code","9ea1eab2":"code","3aa6af1e":"code","eca45a64":"code","155cfc34":"code","12767c84":"code","4ab70a98":"code","dd9e5799":"code","6d8e01d8":"code","5bfbccc1":"code","6f21fcef":"code","7f8ae793":"code","13707d83":"code","a9d9c4e2":"code","a42f39f4":"code","f73dd134":"code","16d40d99":"code","589ef8e8":"code","540f709a":"code","2d7b3d96":"code","062700f4":"code","4353824e":"code","7ed48668":"code","219f371f":"code","9c26009f":"code","71f745bd":"code","4db89bbe":"code","f49c847e":"code","7f36ff63":"code","486375c9":"code","350b4383":"code","1f24e6d8":"markdown","0a175063":"markdown","f8b361f5":"markdown","0286e3a2":"markdown","dce943fc":"markdown","c2301050":"markdown","4ad519d4":"markdown","6743541c":"markdown","660299d3":"markdown","40e7cd4d":"markdown","6f886a2d":"markdown","75276b02":"markdown","e123e369":"markdown","80fc7344":"markdown","8544295d":"markdown","a3c5dff0":"markdown","053fc208":"markdown"},"source":{"9f2688cd":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler,OrdinalEncoder\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor","051ae935":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsample_sub = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","199af405":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","27ccf8c5":"train.head()","6f072e42":"train.shape","87828d43":"# features = [col for col in train.columns if col not in ['Id','SalePrice']]\n# print(features)","514dc3f6":"#statistical analysis of only numerical columns\ntrain.describe().T","543c2234":"train.info()","e70ac226":"Missing_train = train.isnull().sum().sort_values(ascending=False)\nMissing_train = Missing_train[Missing_train > 0]\npercent = (train.isnull().sum()\/train.isnull().count()*100).sort_values(ascending=False)\npercent = percent[percent>0]\nmissing_data = pd.concat([Missing_train, percent], axis=1, keys=['Missing_train', 'Percent'])\n# missing_data = missing_data[missing_data > 0]\nf, ax = plt.subplots(figsize=(15, 6))\nplt.xticks(rotation='90')\nsns.barplot(x=missing_data.index, y=missing_data['Percent'])\nplt.xlabel('features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)\nmissing_data","a8a68274":"train = train.drop(['PoolQC','MiscFeature','Alley','Fence'],axis = 1)","8b24d250":"features = [col for col in train.columns if col not in ['Id','SalePrice']]\nprint(features)","c681e67a":"numerical_cols = [col for col in features if train[col].dtypes !='O']\nprint(numerical_cols)\nlen(numerical_cols)","8e351161":"categorical_cols = [col for col in features if train[col].dtypes =='O']\nprint(categorical_cols)\nlen(categorical_cols)","1172d06c":"imputer = SimpleImputer(strategy = 'median')\ntrain[numerical_cols] = imputer.fit_transform(train[numerical_cols])\n\nscaler = StandardScaler()\ntrain[numerical_cols] = scaler.fit_transform(train[numerical_cols])","9ea1eab2":"print((train[categorical_cols].isnull().sum()\/len(train)*100).sort_values(ascending = False))","3aa6af1e":"train_columns_None = ['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','GarageType','GarageFinish','GarageQual','FireplaceQu','GarageCond']\ntrain[train_columns_None] = train[train_columns_None].fillna(train[train_columns_None].mode().iloc[0])\n\ntrain_columns_None = ['MasVnrType','Electrical']\ntrain[train_columns_None] = train[train_columns_None].fillna(train[train_columns_None].mode().iloc[0])","eca45a64":"encoder = OrdinalEncoder()\ntrain[categorical_cols] = encoder.fit_transform(train[categorical_cols])","155cfc34":"test.head()","12767c84":"test.shape","4ab70a98":"test.describe().T","dd9e5799":"test.info()","6d8e01d8":"test.describe().T","5bfbccc1":"Missing_test = test.isnull().sum().sort_values(ascending=False)\nMissing_test = Missing_test[Missing_test > 0]\npercent = (test.isnull().sum()\/test.isnull().count()*100).sort_values(ascending=False)\npercent = percent[percent>0]\nmissing_data = pd.concat([Missing_test, percent], axis=1, keys=['Missing_test', 'Percent'])\n# missing_data = missing_data[missing_data > 0]\nf, ax = plt.subplots(figsize=(15, 6))\nplt.xticks(rotation='90')\nsns.barplot(x=missing_data.index, y=missing_data['Percent'])\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percentage of Missing Values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)\nmissing_data","6f21fcef":"test = test.drop(['PoolQC','MiscFeature','Alley','Fence'],axis = 1)","7f8ae793":"test[numerical_cols] = imputer.transform(test[numerical_cols])\n\ntest[numerical_cols] = scaler.transform(test[numerical_cols])","13707d83":"print((test[categorical_cols].isnull().sum()\/len(test)*100).sort_values(ascending = False))","a9d9c4e2":"test_columns_None = ['FireplaceQu','GarageCond','GarageQual','GarageFinish','GarageType','BsmtCond','BsmtExposure','BsmtQual','BsmtFinType1','BsmtFinType2','MasVnrType']\ntest[test_columns_None] = test[test_columns_None].fillna(test[test_columns_None].mode().iloc[0])\n\ntest_columns_None = ['MSZoning','Functional','Utilities','Exterior1st','Exterior2nd','SaleType','KitchenQual']\ntest[test_columns_None] = test[test_columns_None].fillna(test[test_columns_None].mode().iloc[0])","a42f39f4":"test[categorical_cols] = encoder.transform(test[categorical_cols])","f73dd134":"test = test[numerical_cols + categorical_cols]","16d40d99":"train.SalePrice.describe()","589ef8e8":"plt.figure(figsize = (10,5))\nsns.histplot(data = train, x = train['SalePrice'], kde = True)","540f709a":"#skewness and kurtosis\nprint(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())","2d7b3d96":"train['SalePrice'] = np.log1p(train['SalePrice'])","062700f4":"train.SalePrice.describe()","4353824e":"plt.figure(figsize = (10,5))\nsns.histplot(data = train, x = train['SalePrice'], kde = True)","7ed48668":"#skewness and kurtosis\nprint(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())","219f371f":"X = train[numerical_cols + categorical_cols]\ny = train.SalePrice","9c26009f":"from sklearn.model_selection import KFold\nkf = KFold(n_splits = 5,shuffle = True, random_state=42)","71f745bd":"scores = []\nfold = 0\nfor train_idx,valid_idx in kf.split(X,y):\n    X_train,X_valid = X.iloc[train_idx], X.iloc[valid_idx]\n    y_train,y_valid = y.iloc[train_idx], y.iloc[valid_idx]\n    dtr = DecisionTreeRegressor()\n    dtr.fit(X_train,y_train)\n    pred_valid = dtr.predict(X_valid)\n    dtr_pred_test = dtr.predict(test)\n    rmse = np.sqrt(mean_squared_error(y_valid, pred_valid))\n    print('fold :', fold, \"rmse : \", rmse)\n    fold+=1\n    scores.append(rmse)\nprint(np.mean(scores))","4db89bbe":"scores = []\nfold = 0\nfor train_idx,valid_idx in kf.split(X,y):\n    X_train,X_valid = X.iloc[train_idx], X.iloc[valid_idx]\n    y_train,y_valid = y.iloc[train_idx], y.iloc[valid_idx]\n    rfr = RandomForestRegressor()\n    rfr.fit(X_train,y_train)\n    pred_valid = rfr.predict(X_valid)\n    rfr_pred_test = rfr.predict(test)\n    rmse = np.sqrt(mean_squared_error(y_valid, pred_valid))\n    print('fold :', fold, \"rmse : \", rmse)\n    fold+=1\n    scores.append(rmse)\nprint(np.mean(scores))","f49c847e":"scores = []\nfold = 0\nfor train_idx,valid_idx in kf.split(X,y):\n    X_train,X_valid = X.iloc[train_idx], X.iloc[valid_idx]\n    y_train,y_valid = y.iloc[train_idx], y.iloc[valid_idx]\n    gbr = GradientBoostingRegressor()\n    gbr.fit(X_train,y_train)\n    pred_valid = gbr.predict(X_valid)\n    gbr_pred_test = gbr.predict(test)\n    rmse = np.sqrt(mean_squared_error(y_valid, pred_valid))\n    print('fold :', fold, \"rmse : \", rmse)\n    fold+=1\n    scores.append(rmse)\nprint(np.mean(scores))","7f36ff63":"scores = []\nfold = 0\nfor train_idx,valid_idx in kf.split(X,y):\n    X_train,X_valid = X.iloc[train_idx], X.iloc[valid_idx]\n    y_train,y_valid = y.iloc[train_idx], y.iloc[valid_idx]\n    xgb = XGBRegressor(random_state = 42)\n    xgb.fit(X_train,y_train)\n    pred_valid = xgb.predict(X_valid)\n    xgb_pred_test = xgb.predict(test)\n    rmse = np.sqrt(mean_squared_error(y_valid, pred_valid))\n    print('fold :', fold, \"rmse : \", rmse)\n    fold+=1\n    scores.append(rmse)\nprint(np.mean(scores))","486375c9":"sample_sub = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsample_sub.head()","350b4383":"sample_sub['SalePrice'] = gbr_pred_test\nsample_sub.to_csv('sub.csv', index = False)","1f24e6d8":"## Import necessary libraries","0a175063":"### Drop missing columns which has more than 50% null values","f8b361f5":"### Categorical Columns","0286e3a2":"### Numerical Columns","dce943fc":"## Training set view (first 5 instances)","c2301050":"### Impute missing values and transform it.","4ad519d4":"## Read datasets","6743541c":"## Handle Missing Values","660299d3":"###  Impute missing values and scale it.","40e7cd4d":"### There are so many null values in the dataset","6f886a2d":"### Numerical Columns","75276b02":"### Categorical Columns","e123e369":"## Test Dataset","80fc7344":"### Drop missing columns which has more than 50% null values","8544295d":"## Handle Missing Values","a3c5dff0":"###  Impute missing values and scale it.","053fc208":"### Impute missing values and do transformation."}}