{"cell_type":{"22e6f3cd":"code","ebc92ac1":"code","81f18615":"code","69cf9235":"code","1f31f528":"code","a77e0bbd":"code","5db4c0df":"code","e917b303":"code","22e0be98":"code","e35c3fe5":"code","5ec3354b":"code","3a1e285c":"code","e786271d":"code","9950fc97":"code","3e015e6f":"code","fc7f40a9":"code","52d3424d":"code","8471a729":"markdown","60e2358d":"markdown","d1ede648":"markdown","44bb2adb":"markdown","fe818c5c":"markdown"},"source":{"22e6f3cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras import models\nfrom keras import layers\nfrom keras.utils import to_categorical\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ebc92ac1":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","81f18615":"X_labels = train[\"label\"]\nX_images = train.drop(labels = [\"label\"],axis = 1) \n\nX_images = X_images.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\n\ndel train ","69cf9235":"digit = X_images[3]\nplt.imshow(digit, cmap=plt.cm.binary)\nplt.show()","1f31f528":"train_images, val_images, train_labels, val_labels = train_test_split(X_images, X_labels, test_size = 0.125, random_state=0)","a77e0bbd":"#train_images.shape\n#len(train_labels)\ntrain_labels","5db4c0df":"#train_images = train_images.reshape((-1, 28 * 28))\ntrain_images = train_images.astype('float32') \/ 255\n#val_images = val_images.reshape((-1, 28 * 28))\nval_images = val_images.astype('float32') \/ 255\n\n#test = test.reshape((-1, 28 * 28))\ntest = test.astype('float32') \/ 255","e917b303":"train_labels = to_categorical(train_labels)\nval_labels = to_categorical(val_labels)","22e0be98":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))","e35c3fe5":"model.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))","5ec3354b":"model.summary()","3a1e285c":"model.compile(optimizer='rmsprop',\nloss='categorical_crossentropy',\nmetrics=['accuracy'])","e786271d":"history = model.fit(train_images, train_labels, epochs=15, batch_size=64, validation_data=(val_images, val_labels))","9950fc97":"test_loss, test_acc = model.evaluate(val_images, val_labels)\nprint('val_acc:', test_acc)","3e015e6f":"plt.clf()\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","fc7f40a9":"results = model.predict(test)\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")","52d3424d":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"mnist_base.csv\",index=False)","8471a729":"## Network architecture","60e2358d":"## Compilation step","d1ede648":"## Prediction on test set","44bb2adb":"## Model fitting","fe818c5c":"## Preprocessing"}}