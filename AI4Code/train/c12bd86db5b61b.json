{"cell_type":{"73a0c762":"code","ee841dd2":"code","181747eb":"code","015f7230":"code","d2bd2e53":"code","685a0526":"code","5b35b86d":"code","b711cfb4":"code","84c8a44e":"code","7b16ccb4":"code","3a996706":"code","5f98f046":"code","4af9aa5b":"code","30d5e52d":"code","b2bbe91c":"code","04e6871a":"code","be6b1aac":"code","07561e26":"code","a6562c90":"code","39f4a58b":"code","a1768349":"code","e5dc69a8":"code","af47088e":"code","75e71591":"code","c1ffb9da":"markdown","b7a71174":"markdown","7ef46c3f":"markdown","1b85f01f":"markdown","1902efb2":"markdown","b3d6aa7d":"markdown","c2b5d215":"markdown","f1e22428":"markdown","06ab5d38":"markdown"},"source":{"73a0c762":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ee841dd2":"df=pd.read_csv('..\/input\/ethusd-cryptocurrency\/Binance_ETHUSDT_d - Binance_ETHUSDT_d.csv')","181747eb":"df.head()","015f7230":"df.info()","d2bd2e53":"from datetime import date\nimport json\nimport requests\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense, Dropout, LSTM\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_absolute_error\n%matplotlib inline\nsns.set_style('darkgrid')\nimport plotly.graph_objects as go","685a0526":"fig = go.Figure(data=go.Ohlc(x=df['date'],\n                    open=df['open'],\n                    high=df['high'],\n                    low=df['low'],\n                    close=df['close']))\nfig.show()","5b35b86d":"import plotly.express as px\nfig = px.line(df, x='date', y='close')\nfig.show()","b711cfb4":"close_data=df.reset_index()['close']","84c8a44e":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nscaled_data=scaler.fit_transform(np.array(close_data).reshape(-1,1))","7b16ccb4":"train_size=int(len(scaled_data)*0.7)\ntest_size=len(scaled_data)-train_size\ntrain_data,test_data=scaled_data[0:train_size,:],scaled_data[train_size:len(scaled_data),:]","3a996706":"train_size,test_size","5f98f046":"def time_series_data(dataset,step):\n    x,y=[],[]\n    for i in range(len(dataset)-step-1):\n        # creating a series of values\n        series=dataset[i:(i+step),0]\n        # appending that series to x\n        x.append(series)\n        # appending the next values of series x after step to y\n        y.append(dataset[i+step,0])\n    return np.array(x),np.array(y)","4af9aa5b":"step=9\nx_train,y_train=time_series_data(train_data,step)\nx_test,y_test=time_series_data(test_data,step)","30d5e52d":"x_train.shape,y_train.shape","b2bbe91c":"x_train =x_train.reshape(x_train.shape[0],x_train.shape[1] , 1)\nx_test = x_test.reshape(x_test.shape[0],x_test.shape[1] , 1)","04e6871a":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(49,1)))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='mean_squared_error',optimizer='adam')","be6b1aac":"model.summary()","07561e26":"history=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=50,batch_size=64)","a6562c90":"loss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(loss))\nplt.figure(figsize=(15,4))\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title(\"Training and Validation Loss\")\nplt.legend()\nplt.show()","39f4a58b":"train_predict=model.predict(x_train)\ntest_predict=model.predict(x_test)","a1768349":"# doing inverse transform to scale it back to original scale\ntrain_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","e5dc69a8":"y_test=scaler.inverse_transform(y_test.reshape(y_test.shape[0],1))","af47088e":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(y_test,test_predict))","75e71591":"plt.figure(figsize=(14,5))\nplt.plot(y_test, color = 'red', label = 'Real Ethereum Price')\nplt.plot(test_predict, color = 'green', label = 'Predicted Ethereum Price')\nplt.title('Ethereum Price Prediction using RNN-LSTM')\nplt.xlabel('Time')\nplt.ylabel('Price')\nplt.legend()\nplt.show()","c1ffb9da":"## Making Predictions","b7a71174":"## Loading Data","7ef46c3f":"## Model Building","1b85f01f":"### Foreacsting for next 30 days","1902efb2":"## Min-Max Scaling data ","b3d6aa7d":"## Train\/Test Splitting Data","c2b5d215":"## Evaluation","f1e22428":"## Visualisation of Ethereum Prices using its trading features","06ab5d38":"## Plotting losses"}}