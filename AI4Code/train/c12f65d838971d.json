{"cell_type":{"5b3925ee":"code","bede0231":"code","dbc1a7e8":"code","ac2d90af":"code","5013647f":"code","db336966":"code","c5dba120":"code","1eea5338":"code","3609942d":"code","6304ee69":"code","85235d08":"code","d59ff0fb":"code","a86e30b4":"code","98484736":"code","f198be9c":"code","77c10149":"code","9291ee81":"code","e51315bb":"code","c9e9f2fb":"code","dbcac1df":"code","5faf1e20":"code","0c33fe53":"code","fe35208e":"code","4a73bd64":"code","c9797076":"code","73647ff7":"code","93da9a74":"markdown","6d486c7a":"markdown","fb306b40":"markdown","733ff208":"markdown","393316eb":"markdown","68f6adcb":"markdown","2558e79f":"markdown","f8430747":"markdown","89d99936":"markdown","d6ccf1fb":"markdown","dfcd51b6":"markdown","8f71065a":"markdown","4fff2ddd":"markdown","1c4f5554":"markdown","80a4ce54":"markdown"},"source":{"5b3925ee":"import numpy as np\nimport pandas as pd\n\nimport os\n\nimport librosa\nimport librosa.display\n\nfrom tqdm.notebook import tqdm\n\nimport operator\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nimport matplotlib.pyplot as plt\n\nfrom keras.models import load_model\nfrom keras import regularizers\nfrom keras.utils import to_categorical\nfrom keras.optimizers import Adam\nfrom keras.models import Sequential, Model\nfrom keras.layers import Input, LSTM, Dense, Dropout, Flatten, Activation, SpatialDropout1D, Conv2D\nfrom keras.layers.convolutional import Conv1D\nfrom keras.layers.pooling import MaxPooling1D, GlobalMaxPooling1D, GlobalAveragePooling1D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler\n\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nnp.random.seed(42)\ntf.random.set_seed(42)","bede0231":"def load_songs(song_folder):\n    song_specs = []\n    ind_to_labels = []\n    labels_to_ind = {}\n    genres = []\n    \n    for i, genre in enumerate(tqdm(os.listdir(song_folder), 'Classes music')):\n        labels_to_ind[genre] = i\n        ind_to_labels.append(genre)\n        genre_folder = os.path.join(song_folder, genre)\n        \n        for song in tqdm(os.listdir(genre_folder), f'Count sound inside {genre}'):\n            signal, sr = librosa.load(os.path.join(genre_folder, song))\n            melspec = librosa.feature.melspectrogram(signal, sr=sr).T[:1280,]\n            song_specs.append(melspec)\n            genres.append(labels_to_ind[genre])\n            \n    return song_specs, genres, labels_to_ind, ind_to_labels","dbc1a7e8":"song_specs, labels, labels_to_ind, ind_to_labels = load_songs('..\/input\/music-dataset\/')\nsong_specs[0].shape","ac2d90af":"labels_to_ind","5013647f":"ind_to_labels","db336966":"librosa.display.specshow(librosa.power_to_db(song_specs[150].T, ref=np.max),\n                         y_axis='mel', fmax=8000, x_axis='time')\nplt.show()","c5dba120":"def show_spectogram(label_genre, ax, name, count=25):\n    indexes = np.where(np.array(labels) == label_genre)[0]\n    indexes = np.random.permutation(indexes)\n    specs = np.array(song_specs)[indexes[:count]]\n\n    x = np.concatenate(specs, axis=1)\n    x = (x - x.min()) \/ (x.max() - x.min())\n    \n    ax.set_title(name, fontsize=14)\n    ax.imshow((x * 50).clip(0, 1.0))","1eea5338":"fig, axes = plt.subplots(nrows=5, ncols=2, figsize=(25, 15))\n\nfor i, ax in enumerate(axes.flatten()):\n    show_spectogram(i, ax=ax, name=ind_to_labels[i], count=50) ","3609942d":"labels_one_hot = to_categorical(labels, num_classes=len(labels_to_ind))\n\nX_train, X_valid, Y_train, Y_valid = train_test_split(np.array(song_specs), np.array(labels_one_hot), test_size=0.1, random_state=42, stratify=labels)","6304ee69":"pd.DataFrame(Y_train.argmax(axis=1)).value_counts()","85235d08":"pd.DataFrame(Y_valid.argmax(axis=1)).value_counts()","d59ff0fb":"def split(X, Y, count_parts=10):\n    s = X.shape\n    s = (s[0] * count_parts, s[1] \/\/ count_parts, s[2])\n    return X.reshape(s), np.repeat(Y, count_parts, axis=0)","a86e30b4":"X_train2, Y_train2 = split(X_train, Y_train, count_parts=20)\nX_valid2, Y_valid2 = split(X_valid, Y_valid, count_parts=20)","98484736":"X_train2.shape[1:]","f198be9c":"def create_cnn_model(input_shape):\n    inputs = Input(input_shape)\n    x = inputs\n    levels = 32\n    \n    for level in range(3):\n        x = Conv1D(levels, 3, activation='relu')(x)\n        x = BatchNormalization()(x)\n        x = SpatialDropout1D(0.1)(x)\n        x = MaxPooling1D(pool_size=2, strides=2)(x)\n        levels *= 2\n    \n    x = GlobalMaxPooling1D()(x)\n    \n    units = 160\n    \n    for fc in range(2):\n        x = Dense(units, kernel_regularizer=regularizers.l2(0.005), activation='relu')(x)\n        x = Dropout(0.5)(x)\n        units \/= 2\n\n    labels = Dense(10, activation='softmax')(x)\n\n    model = Model(inputs=[inputs], outputs=[labels])\n\n    optimizer = Adam(lr=0.001)\n    model.compile(loss='categorical_crossentropy',\n                  optimizer=optimizer,\n                  metrics=['categorical_accuracy'])\n    return model\n\nmodel = create_cnn_model(X_train2.shape[1:])\n# model.summary()","77c10149":"checkpoint_path = 'bestmodel_{epoch:02d}_{val_loss:.2f}_{val_categorical_accuracy:.2f}.hdf5'\n# checkpoint_path = 'bestmodel.hdf5'\n\ncheckpoint = ModelCheckpoint(checkpoint_path, monitor='val_categorical_accuracy', \n                             verbose=1, save_best_only=True, mode='max')\n\nscheduler = LearningRateScheduler(lambda epoch, lr: lr * 0.9, verbose=1)\n\nearly_stop = EarlyStopping(monitor='val_loss', min_delta=0, patience=3, mode='min', verbose=1)\n\ntqdm_callback = tfa.callbacks.TQDMProgressBar(\n    leave_epoch_progress=False, \n    leave_overall_progress=True, \n    show_epoch_progress=False,\n    show_overall_progress=True\n)\n\ncallbacks_list = [\n    checkpoint, \n    scheduler, \n    tqdm_callback, \n    early_stop\n]","9291ee81":"tf.config.run_functions_eagerly(True)","e51315bb":"history = model.fit(X_train2, Y_train2, batch_size=32, epochs=40, verbose=1, validation_data=(X_valid2, Y_valid2), callbacks = [callbacks_list])","c9e9f2fb":"def graph_plot(history, typ=False):\n    if typ:\n        for i in history.history.keys():\n            print(f'{i} = [{min(history.history[i])}; {max(history.history[i])}]\\n')\n    \n    epoch = len(history.history['loss'])\n    # \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e: (train, val) + lr\n    size = len(history.history.keys()) \/\/ 2 + 1\n    \n    fig = plt.figure(figsize=(30, 5))\n    i = 1\n    for k in list(history.history.keys()):\n        if 'val' not in k:\n            fig.add_subplot(1, size, i)\n            plt.plot(history.history[k], marker='o', markersize=5)\n            if k != 'lr':\n                plt.plot(history.history['val_' + k], marker='o', markersize=5)\n            plt.title(k, fontsize=10)\n\n            plt.ylabel(k)\n            plt.xlabel('epoch')\n            plt.grid()\n\n            plt.yticks(fontsize=10, rotation=30)\n            plt.xticks(fontsize=10, rotation=30)\n            plt.legend(['train', 'valid'], loc='upper left', fontsize=10, title_fontsize=15)\n            i += 1\n#         plt.show()","dbcac1df":"graph_plot(history)","5faf1e20":"stats = {file_model: float(file_model.split('_')[-1][:4]) for file_model in os.listdir('.\/') if 'bestmodel' in file_model}\nstats","0c33fe53":"max(stats.items(), key=operator.itemgetter(1))[0]","fe35208e":"model = load_model(max(stats.items(), key=operator.itemgetter(1))[0])\nmodel.evaluate(X_valid2, Y_valid2)","4a73bd64":"pred = model.predict(X_valid2)\npred = np.argmax(pred, axis=1)\npred","c9797076":"accuracy_score(pred, Y_valid2.argmax(axis=1))","73647ff7":"plt.subplots(figsize=(10, 8))\n\ncm = confusion_matrix(pred, Y_valid2.argmax(axis=1))\n\n\nplt.imshow(cm.T, interpolation='nearest', cmap='gray')\nplt.xticks(np.arange(0, len(ind_to_labels)), ind_to_labels)\nplt.yticks(np.arange(0, len(ind_to_labels)), ind_to_labels)\n\nplt.show()","93da9a74":"## CNN model","6d486c7a":"## Training","fb306b40":"Example spectrogram","733ff208":"## Load best model","393316eb":"## Accuracy score and confusion matrix","68f6adcb":"genre indices","2558e79f":"## Import libraries","f8430747":"## Create spectrogram","89d99936":"Statistics","d6ccf1fb":"## Spectrograms by class","dfcd51b6":"## Augmentation data","8f71065a":"displaying the genre of music in indices","4fff2ddd":"## Graph history","1c4f5554":"## Predict","80a4ce54":"## One hot encoding for labels"}}