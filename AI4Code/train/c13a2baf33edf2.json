{"cell_type":{"39a379e7":"code","77561aae":"code","b512fd43":"code","1203a41b":"code","f17eb672":"code","e8fe4266":"code","96bd7977":"code","37e73786":"code","ca0c313b":"code","6f867697":"code","c35da711":"code","931b214c":"code","99ca16dc":"code","d0c57c7a":"code","edf6fbe5":"code","b7475916":"code","7f1eb1fb":"code","704fea8e":"code","02dac7ce":"code","467c24de":"code","c055ca2a":"code","7c077989":"code","8ba8c364":"markdown"},"source":{"39a379e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nimport ast\nimport json\nimport matplotlib.mlab as mlab\nimport matplotlib.pyplot as plt\n\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","77561aae":"test = pd.read_csv('..\/input\/test.csv', dtype=object)\ntrain = pd.read_csv('..\/input\/train.csv', dtype=object)","b512fd43":"test.head(1)\nids = test['fullVisitorId'].values\nidss = ids.astype('str')\nlen(ids), type(ids)","1203a41b":"uniq_ids = np.unique(idss)\nnum_ids = len(uniq_ids) #Unique IDs in the test.csv\nlen(uniq_ids)","f17eb672":"#Create a dummy but valid submission\n#d = {'fullVisitorId':uniq_ids,'PredictedLogRevenue':np.zeros(num_ids)}\n#df = pd.DataFrame(d)\n#df.to_csv('.\/submission_all_zeros.csv', index=False)\n#print(os.listdir(\".\"))","e8fe4266":"idx = 5\ns = train.iloc[idx]\nprint(train.columns)\nfor c in train:\n    print(train[c][:5])","96bd7977":"totals = train['device'][1]\ntotals","37e73786":"#TEST\ns = set()\ns.update([1,2,2])\nprint(s, len(s))","ca0c313b":"print(type(totals))\ns = json.loads(totals)\nprint(type(s), s)\n#ast.literal_eval(totals)\n#df.apply (dict_to_cols,axis=1)","6f867697":"def expand_tree_column(col_data):\n    keys = set()\n    ds = []\n    for cd in col_data:\n        d = json.loads(cd)\n        ds.append(d)\n        keys.update(list(d.keys()))\n    #print('unique keys: %s', keys)\n    res = {k:[] for k in keys}\n    for d in ds:\n        for k in res.keys():\n            res[k].append(d.get(k, None))\n    return res","c35da711":"def expand_col(df, col_name):\n    col_data = np.array(df[col_name])\n    res = expand_tree_column(col_data)\n    return res","931b214c":"#Expand dictionary-like columns in train.csv\ndict_cols = ['device', 'geoNetwork', 'totals', 'trafficSource']\ntraine = train.copy()\nfor dict_col in dict_cols:\n    print('processing column: {}'.format(dict_col))\n    res = expand_col(train, dict_col)\n    traine = traine.drop(dict_col, axis=1)\n    for k, vec in res.items():\n        traine[k] = vec\ntraine.to_csv('.\/train_expanded.csv', index=False)","99ca16dc":"#Expand dictionary-like columns in test.csv\nteste = test.copy()\nfor dict_col in dict_cols:\n    print('processing column: {}'.format(dict_col))\n    res = expand_col(test, dict_col)\n    teste = teste.drop(dict_col, axis=1)\n    for k, vec in res.items():\n        teste[k] = vec\nteste.to_csv('.\/test_expanded.csv', index=False)","d0c57c7a":"#TEST\ndd = {'a':1, 'b':2, 'c':3}\nfor d,v in dd.items():\n    print(d,v)\n\nprint(len(traine), len(train), len(teste), len(test))\nprint(os.listdir(\".\/\"))\ntraine.head(5)","edf6fbe5":"teste = pd.read_csv('.\/test_expanded.csv', dtype=object)\ntraine = pd.read_csv('.\/train_expanded.csv', dtype=object)","b7475916":"trs = np.array(traine['transactionRevenue'])\ntrs = [0 if np.isnan(float(tr)) else float(tr) for tr in trs]","7f1eb1fb":"trsn = [np.log10(tr) for tr in trs if tr > 0]","704fea8e":"trsnn = [tr for tr in trsn if tr >=7 and tr < 9]\nlen(trsnn), len(trsn)\nlen(trsnn)\/len(trsn)\/2","02dac7ce":"a,b,c= plt.hist(trsn, density=1, bins=[4,5,6,7,9,10,11])","467c24de":"a, b, c","c055ca2a":"c[0]","7c077989":"10**8,10**7","8ba8c364":"**Check Data for the First Time**"}}