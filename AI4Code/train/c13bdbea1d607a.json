{"cell_type":{"4c09f037":"code","bc5054c8":"code","ebb0520d":"code","7082d47d":"code","ce2f3f3a":"code","c202f904":"code","0b7f59f6":"code","91f0c635":"code","bd6bb978":"code","bc4edb55":"code","4dbed651":"code","5276ec30":"code","d34250da":"code","ad158070":"markdown","5bdcfa83":"markdown","12779e6c":"markdown"},"source":{"4c09f037":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc5054c8":"daten = np.array([[8,12], [12,17],[20,20], [25,10],[22,35],[81,65], [70,75],[55,65],[51,60],[85,93],])\npunkte = range(1, 11)","ebb0520d":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 6))\nplt.subplots_adjust(bottom=0.2)\nplt.scatter(daten[:,0],daten[:,1], color = 'r', edgecolor='k', s=150)\nfor punkt, x, y in zip(punkte, daten[:, 0], daten[:, 1]):\n    plt.annotate(punkt, xy=(x, y), xytext=(-5, 5), textcoords='offset points', ha='right', va='bottom')\nplt.show() ","7082d47d":"from sklearn.cluster import KMeans\nk = 3\nkmeans = KMeans(n_clusters = k, random_state=21)","ce2f3f3a":"kmeans.fit(daten)","c202f904":"centroide = kmeans.cluster_centers_\ncentroide","0b7f59f6":"clusters = kmeans.predict(daten)\nclusters","91f0c635":"# Summe der quadrierten Distanzen aller Punkte zum n\u00e4chsten Centroiden\n\nsumme_qd = kmeans.inertia_\nsumme_qd","bd6bb978":"plt.figure(figsize=(8, 6))\nplt.subplots_adjust(bottom=0.2)\nplt.scatter(daten[:,0],daten[:,1], c=clusters, cmap='jet', edgecolor='k', s=150)\nfor punkt, x, y in zip(punkte, daten[:, 0], daten[:, 1]):\n    plt.annotate(punkt, xy=(x, y), xytext=(-5, 5), textcoords='offset points', ha='right', va='bottom')\n    plt.scatter(centroide[:,0],centroide[:,1], marker=\"*\", c=\"black\", s=100)\nplt.show() ","bc4edb55":"sqds = []\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters = k, random_state=21)\n    kmeans.fit(daten)\n    sqds.append(kmeans.inertia_)\nplt.plot(range(1, 10), sqds)\nplt.title(' Ellenbogen Methode')\nplt.xlabel('Anzahl der Cluster')\nplt.ylabel('Summe der quadrierten Distanzen')\nplt.show()\n","4dbed651":"from scipy.cluster.hierarchy import dendrogram, linkage\nlinks = linkage(daten, 'complete')\npunkte = range(1, 11)\nplt.figure(figsize=(8, 6))\ndendrogram(links, orientation='top', labels=punkte, distance_sort='descending', show_leaf_counts=True)\nplt.show()","5276ec30":"from sklearn.cluster import AgglomerativeClustering\nagglo = AgglomerativeClustering(n_clusters=2, affinity='euclidean', linkage='complete')\nclusters = agglo.fit_predict(daten)\nclusters","d34250da":"plt.figure(figsize=(8, 6))\nplt.subplots_adjust(bottom=0.2)\nplt.scatter(daten[:,0],daten[:,1], c=clusters, cmap='jet', edgecolor='k', s=150)\nfor punkt, x, y in zip(punkte, daten[:, 0], daten[:, 1]):\n    plt.annotate(punkt, xy=(x, y), xytext=(-5, 5), textcoords='offset points', ha='right', va='bottom')\nplt.show()","ad158070":"# Hierarchisches Clustering","5bdcfa83":"# Daten","12779e6c":"# Partitionierendes Clustering: KMeans"}}