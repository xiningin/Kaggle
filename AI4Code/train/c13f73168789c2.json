{"cell_type":{"ac2aff94":"code","b5048db6":"code","9560ad16":"code","1447b57c":"code","602221bf":"code","4b455615":"code","19d3b239":"code","f4c6fa59":"code","f83d495a":"code","c1f1debd":"code","d7cafed3":"code","35236981":"code","eed859a2":"code","95c0a05b":"code","c08fe456":"code","3f98876f":"code","e4c40d29":"code","c4106a4b":"code","7cb10570":"code","819269b4":"code","0220e51c":"code","fac957ed":"code","3278d112":"code","a7d284d8":"code","fc0b5ea6":"code","be781c83":"code","48a0a45f":"code","ec2fff1d":"code","cadf0fa6":"code","a836455b":"code","012fa3f3":"code","2fca3bf9":"code","72a3e58a":"code","915aeafb":"code","a3218e84":"code","f822bdeb":"code","11c2a066":"code","743db68d":"code","805a5498":"code","7dd8965f":"code","3fef5cdd":"code","869b0898":"markdown","1948e62e":"markdown","d30e87a0":"markdown","92442763":"markdown","15ba4844":"markdown","595300bd":"markdown","0350533d":"markdown","46745133":"markdown","2b567319":"markdown","f5928f72":"markdown","1de27fd4":"markdown","aa14bcea":"markdown","16ec6757":"markdown","8fec2a4f":"markdown","0382ff0a":"markdown","efb50c2c":"markdown","aac5e461":"markdown","75b9f522":"markdown","e3815877":"markdown","446a882d":"markdown","8b64e26a":"markdown","a71813c1":"markdown","86fb6aab":"markdown","31b4ab85":"markdown","8c01696a":"markdown","cca4500e":"markdown","3d23e859":"markdown","e45d6354":"markdown","4df062bb":"markdown","f39faa0c":"markdown","3572f789":"markdown","31646dcc":"markdown","7e1b70d0":"markdown","2263269e":"markdown","3901bd0c":"markdown","68b61ea0":"markdown"},"source":{"ac2aff94":"# import library\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b5048db6":"# import data\ndf = pd.read_csv('\/kaggle\/input\/stocknews\/upload_DJIA_table.csv')","9560ad16":"df.head()","1447b57c":"df.loc[:, 'Open']","602221bf":"df['Open']","4b455615":"df.Open","19d3b239":"df.loc[:, ['Open', 'Close']]","f4c6fa59":"df[['Open', 'Close']]","f83d495a":"df.loc[0]","c1f1debd":"df.loc[[0,1,10]]","d7cafed3":"df.loc[0, 'Open']","35236981":"df.loc[1, ['Open', 'Close']]","eed859a2":"df.loc[[0, 1], ['Open']]","95c0a05b":"df.loc[[0, 1], ['Open', 'Close']]","c08fe456":"df.iloc[0]","3f98876f":"df.iloc[:, 5]","e4c40d29":"df.iloc[0, 0]","c4106a4b":"df.iloc[[0, 1, 3], [0, 1]]","7cb10570":"df.nlargest(3,'Open') ","819269b4":"df.nsmallest(3,'Open') ","0220e51c":"df.sample(3)","fac957ed":"df.sample(frac = 0.3)","3278d112":"df[df.Open >= 18281.949219]","a7d284d8":"df.loc[1:5, :]","fc0b5ea6":"df.loc[:, 'Open' : 'Close']","be781c83":"df.loc[1:3, 'Open' : 'Close']","48a0a45f":"df.iloc[0:2, :]","ec2fff1d":"df.iloc[:, 1:4]","cadf0fa6":"df.iloc[0:2, 0:2]","a836455b":"df.iloc[:2, :2]","012fa3f3":"df.Open == 17355.210938","2fca3bf9":"df[df.Open == 17355.210938]","72a3e58a":"df.loc[df.Open == 17355.210938]","915aeafb":"df[df.Open.isin([17355.210938])]","a3218e84":"df[(df.Open == 17355.210938) | (df.Close == 17949.369141)]","f822bdeb":"# row 0 and 2 contains these values so it is not in output\ndf[~df.Open.isin([17924.240234, 17456.019531])]","11c2a066":"df.loc[:, df.isin([17456.019531]).any()]","743db68d":"df.filter(items=['Open', 'Close'])","805a5498":"df.filter(like=\"2\", axis=0)","7dd8965f":"df.filter(regex=\"[^OpenCloseHigh]\")","3fef5cdd":"df[(df['Open'] > 18281.949219) & (df['Date'] > '2015-05-20')]","869b0898":"### 1.3 Select a row by it's label<a id='5'><\/a>\nSyntax : `df.loc[row_label]`","1948e62e":"### 2.3 Select data at specified row and column location<a id='14'><\/a>\nSyntax : `df.iloc[row_index, column_index]`","d30e87a0":"### 1.8 Accessing values from multiple rows and multiple columns<a id='10'><\/a>\nSyntax : `df.loc[[row_label1, row_label2, ...], ['column_name1, column_name2, ...']]`","92442763":"### 1.2 Rows that match multiple column conditions<a id='32'><\/a>\nSyntax : `df[(df.column_name == value) | (df.column_name == value)]`","15ba4844":"## 2. Select by index position<a id='11'><\/a>\nYou can select data from a Pandas DataFrame by its location. Note, Pandas indexing starts from zero.","595300bd":"## 1. Slicing rows and columns using labels<a id='21'><\/a>\nYou can select a range of rows or columns using labels or by position. To slice by labels you use **loc** attribute of the DataFrame.","0350533d":"## 1. Select rows and columns using labels<a id='2'><\/a>\nYou can select rows and columns in a Pandas DataFrame by using their corresponding labels.","46745133":"## 3. Selecting top n largest values of given column<a id='16'><\/a>\nSyntax : `df.nlargest(n, 'column_name')`","2b567319":"### 2.2 To slice columns by index position<a id='27'><\/a>\nSyntax : `df.iloc[:, starting_column_index : ending_column_index]`","f5928f72":"### 1.1 Slice row by label<a id='22'><\/a>\nSyntax : `df.loc[starting_row_label : ending_row_label, :]`","1de27fd4":"## 1. Select rows based on column value<a id='30'><\/a>","aa14bcea":"### 2.1 To slice rows by index position<a id='26'><\/a>\nSyntax : `df.iloc[starting_row_index : ending_row_index, :]`","16ec6757":"## 3. Subsetting using filter method<a id='35'><\/a>\nSubsets can be created using the filter method like below.\n\nMethod 1 : `df.filter(items=['column_name1', 'column_name2'])`\n\nMethod 2 : `df.filter(like='row_index\/label', axis=0)`\n\nMethod 3 : `df.filter(regex='[^column_letter]')`\n\nMethod 4 : `df[(df['column_name'] > value) & (df['column_name'] > value)]`","8fec2a4f":"## Subsetting by boolean conditions<a id='29'><\/a>\nYou can use boolean conditions to obtain a subset of the data from dataframe.","0382ff0a":"## 6. Conditional selection of columns<a id='19'><\/a>\nSyntax 1 : `df[df.column_name < value]`\n\nSyntax 2 : `df[df.column_name > value]`\n\nSyntax 3 : `df[df.column_name == value]`\n\nSyntax 4 : `df[df.column_name <= value]`\n\nSyntax 5 : `df[df.column_name >= value]`","efb50c2c":"## 5. Selecting random sample from the dataset<a id='18'><\/a>\nSyntax 1 : `df.sample(n)` \n\nSyntax 2 : `df.sample(frac = n)` ","aac5e461":"### 2.4 Select multiple rows and columns<a id='15'><\/a>\nSyntax : `df.iloc[[row_index1, row_index2, ...], [column_index1, column_index2, ...]]`","75b9f522":"## 4. Selecting top n smallest values of given column<a id='17'><\/a>\nSyntax : `df.nsmallest(n, 'column_name')`","e3815877":"### 2.3 To slice row and columns by index position<a id='28'><\/a>\nSyntax 1 : `df.iloc[starting_row_index : ending_row_index, starting_column_index : ending_column_index]`\n\nSyntax 2 : `df.iloc[:starting_row_index, :ending_column_index]`","446a882d":"## 2. Slicing rows and columns by position<a id='25'><\/a>\nTo slice a Pandas dataframe by position use the iloc attribute. Remember index starts from 0 to (number of rows\/columns - 1).","8b64e26a":"### 2.2 Select a column by index location<a id='13'><\/a>\nSyntax : `df.iloc[:, index]`","a71813c1":"### 1.1 To select a single column<a id='3'><\/a>\nSyntax 1 : `df.loc[:, 'column_name']`\n\nSyntax 2 : `df['column_name']`\n\nSyntax 3 : `df.column_name`","86fb6aab":"### 1.5 Accessing values by row label and column name<a id='7'><\/a>\nSyntax : `df.loc[row_label, 'column_name']`","31b4ab85":"### 1.2 Slice columns by label<a id='23'><\/a>\nSyntax : `df.loc[:, 'starting_column_name' : 'ending_column_name']`","8c01696a":"### 1.1 To select all rows whose column contain the specified value(s)<a id='31'><\/a>\nSyntax 1 : `df.column_name == value`\n\nSyntax 2 : `df.loc[df.column_name == value]`\n\nSyntax 3 : `df[df.Open == value]`\n\nSyntax 4 : `df[df.column_name.isin([value1, value2, ...])]`","cca4500e":"### 2.1 Select a row by index location<a id='12'><\/a>\nSyntax : `df.iloc[index]`","3d23e859":"# Pandas tutorial : Day 3\n\nSelecting, Slicing and Filtering data in a Pandas DataFrame\n\n* [Selecting](#1)\n 1. [Select rows and columns using labels](#2)\n   * [To select a single column](#3)\n   * [To select multiple columns](#4)\n   * [Select a row by it's label](#5)\n   * [Select multiple row by it's label](#6)\n   * [Accessing values by row label and column name](#7)\n   * [Accessing values from multiple columns of same row](#8)\n   * [Accessing values from multiple rows but same columns](#9)\n   * [Accessing values from multiple rows and multiple columns](#10)\n 2. [Select by index position](#11)\n   * [Select a row by index location](#12)\n   * [Select a column by index location](#13)\n   * [Select data at specified row and column location](#14)\n   * [Select multiple rows and columns](#15)\n 3. [Selecting top n largest values of given column](#16)\n 4. [Selecting top n samllest values of given column](#17)\n 5. [Selecting random sample from the dataset](#18)\n 6. [Conditional selection of columns](#19)\n* [Slicing](#20)\n 1. [Slicing rows and columns using labels.](#21)\n   * [Slice row by label](#22)\n   * [Slice columns by label](#23)\n   * [Slice row and columns by label](#24)\n 2. [Slicing rows and columns by position.](#25)\n   * [To slice rows by index position](#26)\n   * [To slice columns by index position](#27)\n   * [To slice row and columns by index position](#28)\n* [Subsetting by boolean conditions](#29)\n 1. [Select rows based on column value](#30)\n   * [To select all rows whose column contain the specified value(s)](#31)\n   * [Rows that match multiple column conditions](#32)\n   * [Select rows whose column DOES NOT contain specified values](#33)\n 2. [Select columns based on row value](#34)\n 3. [Subsetting using filter method](#35)\n \n \nLet's gets started!\n \n[Data for daily news for stock market prediction](https:\/\/www.kaggle.com\/aaron7sun\/stocknews)","e45d6354":"## 2. Select columns based on row value<a id='34'><\/a>\nTo select columns where rows contain the specified value.\n\nSyntax : `df.loc[:, df.isin([value]).any()]`","4df062bb":"### 1.4 Select multiple row by it's label<a id='6'><\/a>\nSyntax : `df.loc[[row_label1, row_label2, ...]]`","f39faa0c":"### 1.7 Accessing values from multiple rows but same columns<a id='9'><\/a>\nSyntax : `df.loc[[row_label1, row_label2], 'column_name']`","3572f789":"### 1.3 Select rows whose column DOES NOT contain specified values<a id='33'><\/a>\nSyntax : `df[~df.column_name.isin([value])]`","31646dcc":"### 1.3 Slice row and columns by label<a id='24'><\/a>\nSyntax : `df.loc[starting_row_label : ending_row_label, 'starting_column_name' : 'ending_column_name']`","7e1b70d0":"### 1.6 Accessing values from multiple columns of same row<a id='8'><\/a>\nSyntax : `df.loc[row_label, ['column_name1', 'column_name2']]`","2263269e":"# Selecting<a id='1'><\/a>","3901bd0c":"# **Slicing**<a id='20'><\/a>\nSlicing in Python is a feature that enables accessing parts of sequences like strings, tuples, and lists. You can also use them to modify or delete the items of mutable sequences such as lists. Slices can also be applied on third-party objects like NumPy arrays, as well as Pandas series and data frames.\n\nSlicing enables writing clean, concise, and readable code.","68b61ea0":"### 1.2 To select multiple columns<a id='4'><\/a>\nSyntax 1 : `df.loc[:, ['column1', 'column2', ...]]`\n\nSyntax 2 : `df[['column1', 'column2', ...]]`"}}