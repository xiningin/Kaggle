{"cell_type":{"831c6fc8":"code","8d819faf":"code","a03b6f04":"code","2bb266a8":"code","e0897c07":"code","59cb6713":"code","a0970f40":"code","a86537e6":"code","de57e273":"code","76c4e86f":"code","d4dbf07d":"code","72145589":"code","289d74fc":"code","4d4e75ab":"code","bc40c200":"code","53268e50":"code","52f488c3":"code","0345744c":"code","4b1c807c":"code","f5d13778":"code","6890b2e4":"code","16d450d8":"markdown","6faa0a66":"markdown","350c1d8e":"markdown","6de588c6":"markdown","60604fb3":"markdown","210fa51a":"markdown","9ba664df":"markdown","3c2d4370":"markdown","6eb2d4aa":"markdown","1c92e07e":"markdown","40e3aac0":"markdown","2b4e3f07":"markdown","45dcc62b":"markdown","9ff79e65":"markdown","26d91feb":"markdown","6db15aa1":"markdown","da6ff03c":"markdown","945753cd":"markdown","291e7ac6":"markdown","b7bac494":"markdown","f945e64f":"markdown","01d41dda":"markdown","872c299b":"markdown"},"source":{"831c6fc8":"# linear algebra\nimport numpy as np \n\n# data processing\nimport pandas as pd \n\n# Data visualization\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n%matplotlib inline\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\nsns.set(style=\"whitegrid\")\n\n# Algorithms\nfrom sklearn.ensemble import RandomForestClassifier","8d819faf":"test_df = pd.read_csv(\"..\/input\/test.csv\")\ntrain_df = pd.read_csv(\"..\/input\/train.csv\")\nsample_submission = pd.read_csv(\"..\/input\/sample_submission.csv\")\n\n# Create categorical features\nfor i in range(1,5):\n    train_df.loc[train_df['Wilderness_Area' + str(i)] == 1, 'Wilderness_Area'] = i\n    test_df.loc[test_df['Wilderness_Area' + str(i)] == 1, 'Wilderness_Area'] = i\n    \n# Create categorical features\nfor i in range(1,40):\n    train_df.loc[train_df['Soil_Type' + str(i)] == 1, 'Soil_Type'] = i\n    test_df.loc[test_df['Soil_Type' + str(i)] == 1, 'Soil_Type'] = i\n    \ntrain_df.Soil_Type.fillna(41, inplace=True)\ntest_df.Soil_Type.fillna(41, inplace=True)\n\ntrain_df.head(5)","a03b6f04":"numerical_features = ['Elevation', 'Aspect', 'Slope',\n       'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology',\n       'Horizontal_Distance_To_Roadways', 'Hillshade_9am', 'Hillshade_Noon',\n       'Hillshade_3pm', 'Horizontal_Distance_To_Fire_Points']\n\nOHE_features = ['Wilderness_Area1', 'Wilderness_Area2', 'Wilderness_Area3', 'Wilderness_Area4',\n       'Soil_Type1', 'Soil_Type2', 'Soil_Type3', 'Soil_Type4',\n       'Soil_Type5', 'Soil_Type6', 'Soil_Type7', 'Soil_Type8',\n       'Soil_Type9', 'Soil_Type10', 'Soil_Type11', 'Soil_Type12',\n       'Soil_Type13', 'Soil_Type14', 'Soil_Type15', 'Soil_Type16',\n       'Soil_Type17', 'Soil_Type18', 'Soil_Type19', 'Soil_Type20',\n       'Soil_Type21', 'Soil_Type22', 'Soil_Type23', 'Soil_Type24',\n       'Soil_Type25', 'Soil_Type26', 'Soil_Type27', 'Soil_Type28',\n       'Soil_Type29', 'Soil_Type30', 'Soil_Type31', 'Soil_Type32',\n       'Soil_Type33', 'Soil_Type34', 'Soil_Type35', 'Soil_Type36',\n       'Soil_Type37', 'Soil_Type38', 'Soil_Type39', 'Soil_Type40']\n\ncategorical_features = ['Wilderness_Area', 'Soil_Type']\n\ncover_type = {1:'Spruce\/Fir',2:'Lodgepole Pine',3:'Ponderosa Pine',4 : 'Cottonwood\/Willow',5 : 'Aspen',6:'Douglas-fir',7:'Krummholz'}\n\nwilderness_areas ={1:'Rawah',2:'Neota',3:'Comanche Peak',4:'Cache la Poudre'}\n\nsoil_types = {1: 'Cathedral',2: 'Vanet - Ratake',3: 'Haploborolis',4: 'Ratake',5: 'Vanet',6: 'Vanet - Wetmore',7: 'Gothic',8: 'Supervisor - Limber',9: 'Troutville family',10: 'Rock outcrop',\n11: 'Rock land',12: 'Legault',13: 'Catamount',14: 'Pachic Argiborolis',15: 'unspecified',16: 'Cryaquolis - Cryoborolis',17: 'Gateview',18: 'Rogert',19: 'Typic Cryaquolis',20: 'Typic Cryaquepts',\n21: 'Typic Cryaquolls',22: 'Leighcan extremely bouldery',23: 'Leighcan - Typic Cryaquolls',24: 'Leighcan extremely stony',25: 'Leighcan warm, extremely stony',26: 'Granile - Catamount',27: 'Leighcan, warm',\n28: 'Leighcan',29: 'Como - Legault',30: 'Como',31: 'Leighcan - Catamount',32: 'Catamount',33: 'Leighcan - Catamount - Rock outcrop',34: 'Cryorthents',35: 'Cryumbrepts',36: 'Bross',37: 'Rock - Cryumbrepts - Cryorthents',\n38: 'Leighcan - Moran',39: 'Moran Leighcan',40: 'Moran Rock',41: 'NaN'}","2bb266a8":"# Visualize train and test distribution\ndef draw_train_test_kde(feature_name):\n    fig, ax = plt.subplots(figsize=(10, 5))\n    sns.kdeplot(train_df[feature_name], color=sns.color_palette(\"coolwarm\",5)[0], label='Train')\n    sns.kdeplot(test_df[feature_name], color=sns.color_palette(\"coolwarm\",5)[4], label='Test')\n    ax.set_title('Comparison of the ' + feature_name + ' distribution', size=20);\n\n# Visualize traind distibution by caregorical feature\ndef draw_kde_cat_feat(feature_name, cat_feature_name, cat_feature_real_name):\n    cat_feat_n = train_df[cat_feature_name].nunique()\n    palette = sns.color_palette(\"viridis\",cat_feat_n)\n    fig, ax = plt.subplots(nrows=cat_feat_n, ncols=1, figsize=(10, 12), sharex=True, sharey=True)\n    ax = ax.flatten()\n    for i in range(0,cat_feat_n):\n        sns.kdeplot(train_df[train_df[cat_feature_name] == i+1][feature_name].values, clip_on=False, shade=True, alpha=1, lw=1.5, color=palette[i], ax=ax[i])\n        sns.kdeplot(train_df[train_df[cat_feature_name] == i+1][feature_name].values, clip_on=False, color=\"w\", lw=2, ax=ax[i])\n        ax[i].text(0.01, 0.8, cat_feature_real_name[i+1], fontweight=\"bold\", color=palette[i], ha=\"left\", va=\"center\", transform=ax[i].transAxes)\n    ax[0].set_title('The forest ' + cat_feature_name + ' distributions for ' + feature_name, fontsize=18);\n    ax[cat_feat_n-1].tick_params(axis='x',labelsize=13)\n    \n# It is a bad code. Someday I'll fix it.\ndef draw_kde_Soil_type(index_for_soil_type, feature_name, cat_feature_name, cat_feature_real_name):\n    cat_feat_n = len(index_for_soil_type)\n    palette = sns.color_palette(\"viridis\",cat_feat_n)\n    fig, ax = plt.subplots(nrows=cat_feat_n, ncols=1, figsize=(10, 12), sharex=True, sharey=True)\n    ax = ax.flatten()\n    for i in range(cat_feat_n):\n        sns.kdeplot(train_df[train_df[cat_feature_name] == index_for_soil_type[i]][feature_name].values, clip_on=False, shade=True, alpha=1, lw=1.5, color=palette[i], ax=ax[i])\n        sns.kdeplot(train_df[train_df[cat_feature_name] == index_for_soil_type[i]][feature_name].values, clip_on=False, color=\"w\", lw=2, ax=ax[i])\n        ax[i].text(0.01, 0.8, cat_feature_real_name[i+1], fontweight=\"bold\", color=palette[i], ha=\"left\", va=\"center\", transform=ax[i].transAxes)\n    ax[0].set_title('The forest ' + cat_feature_name + ' distributions for ' + feature_name, fontsize=18);\n    ax[cat_feat_n-1].tick_params(axis='x',labelsize=13)\n    \n#  Visualize the embedding vectors\ndef draw_3d_plot(data_pd, title_name, categorical_feature='Cover_Type', name_dict = cover_type):\n    cat_feat_n = data_pd.loc[:,categorical_feature].nunique()\n    palette = sns.color_palette(\"viridis\",cat_feat_n)\n    data = []\n    \n    for i in range(cat_feat_n):\n        temp_trace = go.Scatter3d(\n            x=data_pd[data_pd.loc[:,categorical_feature] == i+1]['First'],\n            y=data_pd[data_pd.loc[:,categorical_feature] == i+1]['Second'],\n            z=data_pd[data_pd.loc[:,categorical_feature] == i+1]['Third'],\n            mode='markers',\n            name=name_dict[i+1],\n            marker=dict(\n                size=3,\n                color='rgb'+str(palette[i])\n            )\n        )\n        data.append(temp_trace)\n\n    layout = dict(title=title_name, autosize=True, \n                  scene=dict(xaxis=dict(title='First Cmp.', titlefont=dict(family='Arial, sans-serif',size=10,color='grey')), \n                             yaxis=dict(title='Second Cmp.', titlefont=dict(family='Arial, sans-serif',size=10,color='grey')), \n                             zaxis=dict(title='Third Cmp.', titlefont=dict(family='Arial, sans-serif',size=10,color='grey'))));\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)","e0897c07":"for feature in numerical_features:\n    draw_train_test_kde(feature)","59cb6713":"for feature in numerical_features:\n    draw_kde_cat_feat(feature, 'Cover_Type', cover_type)","a0970f40":"for feature in numerical_features:\n    draw_kde_cat_feat(feature, 'Wilderness_Area', wilderness_areas)","a86537e6":"index_for_soil_type = train_df['Soil_Type'].value_counts().index[:7]\n\nfor feature in numerical_features:\n    draw_kde_Soil_type(index_for_soil_type, feature, 'Soil_Type', soil_types)","de57e273":"from sklearn import manifold, decomposition, ensemble, discriminant_analysis, random_projection\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ntrain_df_scale = scaler.fit_transform(train_df.loc[:,numerical_features + categorical_features])","76c4e86f":"%%time\nrp = random_projection.SparseRandomProjection(n_components=3, random_state=42)\nX_projected = rp.fit_transform(train_df_scale)\nX_projected = pd.DataFrame(X_projected, columns=['First', 'Second', 'Third'])\nX_projected = pd.concat([X_projected, train_df.loc[:,['Cover_Type', 'Wilderness_Area']]],axis=1)\nX_projected.to_csv(\"SparseRandomProjection.csv\", index=False) ","d4dbf07d":"draw_3d_plot(X_projected, 'SparseRandom Projection')","72145589":"%%time\nX_pca = decomposition.TruncatedSVD(n_components=3, random_state=42).fit_transform(train_df_scale)\nX_pca = pd.DataFrame(X_pca, columns=['First', 'Second', 'Third'])\nX_pca = pd.concat([X_pca, train_df.loc[:,['Cover_Type', 'Wilderness_Area']]],axis=1)\nX_pca.to_csv(\"TruncatedSVD.csv\", index=False) ","289d74fc":"draw_3d_plot(X_pca, 'Computing PCA projection')","4d4e75ab":"%%time\nX_lda = discriminant_analysis.LinearDiscriminantAnalysis(n_components=3).fit_transform(train_df_scale, train_df.Cover_Type.values)\nX_lda = pd.DataFrame(X_lda, columns=['First', 'Second', 'Third'])\nX_lda = pd.concat([X_lda, train_df.loc[:,['Cover_Type', 'Wilderness_Area']]],axis=1)\nX_lda.to_csv(\"LinearDiscriminantAnalysis.csv\", index=False) ","bc40c200":"draw_3d_plot(X_lda, 'Computing Linear Discriminant Analysis projection')","53268e50":"%%time\nX_iso = manifold.Isomap(n_components=3).fit_transform(train_df_scale)\nX_iso = pd.DataFrame(X_iso, columns=['First', 'Second', 'Third'])\nX_iso = pd.concat([X_iso, train_df.loc[:,['Cover_Type', 'Wilderness_Area']]],axis=1)\nX_iso.to_csv(\"Isomap.csv\", index=False) ","52f488c3":"draw_3d_plot(X_iso, 'Computing Isomap embedding')","0345744c":"%%time\nclf = manifold.LocallyLinearEmbedding(n_components=3, method='standard', random_state=42)\nX_lle = clf.fit_transform(train_df_scale)\nX_lle = pd.DataFrame(X_lle, columns=['First', 'Second', 'Third'])\nX_lle = pd.concat([X_lle, train_df.loc[:,['Cover_Type', 'Wilderness_Area']]],axis=1)\nX_lle.to_csv(\"LLE_embedding.csv\", index=False) ","4b1c807c":"draw_3d_plot(X_lle, 'Computing LLE embedding')","f5d13778":"rf = RandomForestClassifier(n_estimators=100, random_state=42)\nrf.fit(train_df[numerical_features + categorical_features + OHE_features].values, train_df.Cover_Type.values)\npredictions = rf.predict(test_df[numerical_features + categorical_features + OHE_features].values)","6890b2e4":"sub = pd.DataFrame({\"Id\": test_df.iloc[:,0].values,\"Cover_Type\": predictions})\nsub.to_csv(\"rf.csv\", index=False) ","16d450d8":"## 1. Dataset Preparation","6faa0a66":"---","350c1d8e":"### 3.3. Wilderness area distributions","6de588c6":"### 4.5. Computing LLE embedding","60604fb3":"## 4. Manifold learning","210fa51a":"### 3.1. Comparison of train with test","9ba664df":"### 4.2. Computing PCA projection","3c2d4370":"### 4.3. Computing Linear Discriminant Analysis projection","6eb2d4aa":"### 3.4. Soil type distributions","1c92e07e":"---","40e3aac0":"---","2b4e3f07":"Let see at the distribution 'Soil Type' with most of value counts. ","45dcc62b":"### 4.1. Computing random projection","9ff79e65":"## 5. Fast Baseline","26d91feb":"---","6db15aa1":"### 3.2. Cover type distributions","da6ff03c":"[1. Dataset Preparation](#1.-Dataset-Preparation)\n\n[2. Define functions](#2.-Define-functions)\n\n[3. Data Visualisation](#3.-Data-Visualisation)\n\n* [3.1. Comparison of train with test](#3.1.-Comparison-of-train-with-test)\n\n* [3.2. Cover type distributions](#3.2.-Cover-type-distributions)\n\n* [3.3. Wilderness area distributions](#3.3.-Wilderness-area-distributions)\n\n* [3.4. Soil type distributions](#3.4.-Soil-type-distributions)\n\n[4. Manifold learning](#4.-Manifold-learning)\n\n* [4.1. Computing random projection](#4.1.-Computing-random-projection)\n\n* [4.2. Computing PCA projection](#4.2.-Computing-PCA-projection)\n\n* [4.3. Computing Linear Discriminant Analysis projection](#4.3.-Computing-Linear-Discriminant-Analysis-projection)\n\n* [4.4. Computing Isomap embedding](#4.4.-Computing-Isomap-embedding)\n\n* [4.5. Computing LLE embedding](#4.5.-Computing-LLE-embedding)\n\n[5. Fast Baseline](#5.-Fast-Baseline)","945753cd":"---","291e7ac6":"### 4.4. Computing Isomap embedding","b7bac494":"## 2. Define functions","f945e64f":"## 3. Data Visualisation","01d41dda":"---","872c299b":"---"}}