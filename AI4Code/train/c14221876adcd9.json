{"cell_type":{"90df2539":"code","58edaedc":"code","0f9410d3":"code","473cd371":"code","3c8c732b":"code","46663a70":"code","877b4c22":"code","c1b006fe":"code","94f24ca7":"code","9a822afc":"code","979ef1f7":"code","c21d667b":"code","780bf830":"code","06731d8c":"code","e77831e5":"code","35466365":"code","93775ee9":"code","54cc158e":"code","c306c7f7":"code","4f56e48d":"code","a11db910":"code","0f94bda8":"code","3c323ab6":"code","b645fac2":"code","ffa5ad52":"code","dce00896":"code","eadd132d":"code","4e4a6a0e":"code","814442e0":"code","0d9a1772":"code","fee126f6":"code","77478d3b":"code","0ede06f5":"code","ad6e85e3":"code","c0dcd934":"code","28beb281":"code","1a5edc43":"code","485180e6":"code","753fdac5":"code","b72bc482":"code","245e3b45":"code","f873e296":"code","df76ddc0":"code","6f9607ca":"code","0f590b03":"code","a4e23211":"code","6a27d7a3":"code","0074781f":"code","8edbfaf2":"code","296565ad":"code","91e22d24":"markdown","eac91f9a":"markdown","8dfcb670":"markdown","061b2381":"markdown","2bad39bb":"markdown","ff4ab308":"markdown","d2c9fe50":"markdown","93e515b8":"markdown","a93355e1":"markdown","443bda1d":"markdown","5c1ebc2c":"markdown","7137c39b":"markdown","cddf24f9":"markdown","e1554bfc":"markdown","c0ad2835":"markdown","536c098b":"markdown","13e86d30":"markdown","b02ee1b2":"markdown","6f7cf7cf":"markdown","7ec22d96":"markdown"},"source":{"90df2539":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58edaedc":"import seaborn as sns\nimport plotly\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = 'iframe' ","0f9410d3":"import implicit\nfrom implicit.nearest_neighbours import CosineRecommender\nimport scipy.sparse as sp","473cd371":"villagers_df = pd.read_csv('\/kaggle\/input\/animal-crossing-new-horizons-nookplaza-dataset\/villagers.csv')","3c8c732b":"villagers_df.head()","46663a70":"villagers_df.info()","877b4c22":"villagers_df.columns","c1b006fe":"villagers_df.columns = villagers_df.columns.str.lower().str.replace(' ','_')","94f24ca7":"villagers_df.columns","9a822afc":"villagers_df['unique_entry_id'].nunique()","979ef1f7":"villagers_df.rename(columns={'unique_entry_id':'user_id'}, inplace=True)","c21d667b":"villagers_df.head()","780bf830":"villagers_df['furniture_list'] = villagers_df['furniture_list'].str.split(';')","06731d8c":"user_items_df = villagers_df[['user_id','furniture_list']]","e77831e5":"user_items_df","35466365":"# unpuck lists of items\nuser_items_df = user_items_df.explode('furniture_list')","93775ee9":"user_items_df.reset_index(drop=True, inplace=True)","54cc158e":"#drop duplicated items as some users bought same items several times\nuser_items_df=user_items_df.drop_duplicates(['user_id','furniture_list'], keep='first').reset_index(drop=True)","c306c7f7":"user_items_df.rename(columns={'furniture_list':'item_id'},inplace=True)","4f56e48d":"users_inv_mapping = dict(enumerate(user_items_df['user_id'].unique()))\nuser_mapping = {v: k for k, v in users_inv_mapping.items()}","a11db910":"user_items_df.head()","0f94bda8":"user_items_df.duplicated().sum()","3c323ab6":"items_inv_mapping = dict(enumerate(user_items_df['item_id'].unique()))\nitems_mapping = {v: k for k, v in items_inv_mapping.items()}\nlen(items_mapping)","b645fac2":"def get_coo_matrix(df, \n                   user_col='user_id', \n                   item_col='item_id', \n                   weight_col=None, \n                   users_mapping=user_mapping, \n                   items_mapping=items_mapping):\n    if weight_col is None:\n        weights = np.ones(len(df), dtype=np.float32)\n    else:\n        weights = df[weight_col].astype(np.float32)\n\n    interaction_matrix = sp.coo_matrix((\n        weights, \n        (\n            df[user_col].map(users_mapping.get), \n            df[item_col].map(items_mapping.get)\n        )\n    ))\n    return interaction_matrix","ffa5ad52":"train_matrix = get_coo_matrix(user_items_df).tocsr()","dce00896":"pd.DataFrame.sparse.from_spmatrix(get_coo_matrix(user_items_df)).head()\n","eadd132d":"cosine_model = CosineRecommender(K=10) #model will find 10 closest items based on cosine distance\ncosine_model.fit(train_matrix.T) #model need to get item-oriented matrix, so we have to transpouse matrix which we created previously","4e4a6a0e":"def generate_implicit_recs_mapper(model, train_matrix, N, user_mapping, items_inv_mapping):\n    def _recs_mapper(user):\n        user_id = user_mapping[user]\n        recs = model.recommend(user_id, \n                               train_matrix, \n                               N=N) #number of items which we are going to recommend for a user\n        return [items_inv_mapping[item] for item, _ in recs]\n    return _recs_mapper","814442e0":"top_N = 5 # lets take top 5 recommendations\nmapper = generate_implicit_recs_mapper(cosine_model, train_matrix, top_N, user_mapping, items_inv_mapping)\nmapper","0d9a1772":"#creating final recommendations dataframe\nrecs = pd.DataFrame({\n    'user_id': user_items_df['user_id'].unique()\n})\n\nrecs['item_id'] = recs['user_id'].map(mapper) #get recommendations from mapper object by mapping user_id with rec list \nrecs.head()","fee126f6":"joint_recs_df = villagers_df[['user_id','furniture_list']].merge(recs, on='user_id', how='left')\njoint_recs_df.rename(columns={'furniture_list':'purchased_items',\n                             'item_id':'recommended_items'}, inplace=True)","77478d3b":"joint_recs_df","0ede06f5":"recs_df = joint_recs_df.explode('recommended_items')[['user_id','recommended_items']].reset_index(drop=True)","ad6e85e3":"recs_df","c0dcd934":"houswares = pd.read_csv('\/kaggle\/input\/animal-crossing-new-horizons-nookplaza-dataset\/housewares.csv')","28beb281":"houswares.head()","1a5edc43":"houswares.shape","485180e6":"# transform columns names to standard snake-case\nhouswares.columns = houswares.columns.str.lower().str.replace(' ','_')","753fdac5":"houswares.columns","b72bc482":"unique_houswares_types = houswares[['name','internal_id']].drop_duplicates().reset_index(drop=True)","245e3b45":"recs_df['recommended_items'] = recs_df['recommended_items'].astype(int)","f873e296":"recs_df = recs_df.merge(unique_houswares_types, how='left', left_on='recommended_items', right_on='internal_id')[['user_id','recommended_items','name']]","df76ddc0":"recs_df","6f9607ca":"#creating column which shows position of recommended item for every user\nrecs_df['rec_num']=recs_df.groupby('user_id')['recommended_items'].cumcount()+1","0f590b03":"recs_df","a4e23211":"recs_pvt = recs_df.pivot_table(values=['recommended_items'],\n                   index=['rec_num','name'],\n                   aggfunc='count').reset_index().sort_values(['rec_num','recommended_items'], ascending=[True, False]).reset_index(drop=True)","6a27d7a3":"recs_pvt['item_%_of_recnum'] = round(recs_pvt.groupby('rec_num')['recommended_items'].apply(lambda x: 100* x\/float(x.sum())),2)","0074781f":"recs_pvt","8edbfaf2":"recs_bar = px.bar(recs_pvt.sort_values(['rec_num','item_%_of_recnum'], ascending=[True, False]),\n       x='rec_num',\n       y='item_%_of_recnum',\n       color='name',\n       barmode='group',\n      title='% of recommendation from recommendation position for every unique Item')","296565ad":"recs_bar","91e22d24":"**create item-mapping dict object**","eac91f9a":"**This is how our matrix finally looks like. Rows are user ids, columns are items ids. 1 if user previously purchased that item, 0 if not.**","8dfcb670":"**Finally we have a dataset with a list of items which were already purchased and list of recommended items for every user**\n","061b2381":"# EDA and data-cleaning","2bad39bb":"**At first lets have a look at data we have**","ff4ab308":"# Recommendations simple EDA ","d2c9fe50":"**Please remember, that we didnt do anything with ids for which we dont have any data in households datasets.\nBesides that we dont have any dataset to validate our recommendations.\nBut for simple recsys to start with as a baseline I wish in total the final result is good enough**","93e515b8":"**755 equal to total number of unique items in our dataset**","a93355e1":"**function which will help us to convert our user-item dataset to 0-1 matrix which needed by our model**","443bda1d":"# Thank you for reading, looking forward for your comments!","5c1ebc2c":"**lets create user-mapping dict object**","7137c39b":"**Import implicit rec lib**","cddf24f9":"**here we create a function which will construct dataset with recommendations for every user**","e1554bfc":"**this column seems to be used as user_id, lets change it's name**","c0ad2835":"# Simple cosine-distance based recommendation model implementation with Implicit lib","536c098b":"**lets have a look at how many furniture items we have in general and what are they**","13e86d30":"**From merged dataset we can see that we have lack of data for some itemsm, they are not in our furniture list**","b02ee1b2":"**we have 755 unique items in total**","6f7cf7cf":"**Creation of user-item dataframe shows which furniture items users already have**","7ec22d96":"**Lets start from villagers dataset**"}}