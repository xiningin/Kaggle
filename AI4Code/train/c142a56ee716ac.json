{"cell_type":{"2ff67c75":"code","f1f3a7c8":"code","66dd1583":"code","7f2d928c":"code","813028d6":"code","bffe579a":"code","33924bea":"code","bae27cef":"code","352df6ff":"code","1e007c94":"code","8963d4bd":"markdown","21b4b913":"markdown","ed733761":"markdown","ebf4360d":"markdown"},"source":{"2ff67c75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# Any results you write to the current directory are saved as output.\n\nfrom PIL import Image\n%matplotlib inline\n\nimport matplotlib.pyplot as plt","f1f3a7c8":"ROOT = '\/kaggle\/input\/deepfake-detection-challenge-actors\/actors\/'\n\nvideos_actor_df = pd.read_hdf(os.path.join(ROOT, 'videos_actor.h5'))\nvideos_actor_df","66dd1583":"actors = videos_actor_df['actor'].unique()\nnum_actors = len(actors)\nnc = 5\nnr = int(np.ceil(num_actors \/ nc))\n\nfig, ax = plt.subplots(nrows = nr, ncols=nc, figsize = (nc * 3, nr * 3))\nfig.tight_layout()\nr_idx = 0\nc_idx = 0\nfor actor in actors:\n    sample_path = os.path.join(ROOT, 'samples', f'{actor[0]}_{actor[1]}.jpg')\n    img = Image.open(sample_path)\n    ax[r_idx][c_idx].imshow(img)\n    ax[r_idx][c_idx].set_title(actor)\n    \n    c_idx += 1\n    if c_idx >= nc:\n        c_idx = 0\n        r_idx += 1","7f2d928c":"import glob\nex = sorted(glob.glob(os.path.join(ROOT, 'face_swaps', 's*.jpg')))\nex_imgs = [Image.open(v) for v in ex]\n\nex_imgs[0]","813028d6":"ex_imgs[1]","bffe579a":"ex_imgs[2]","33924bea":"ex_imgs[3]","bae27cef":"ex_imgs[4]","352df6ff":"ex_imgs[5]","1e007c94":"ex_imgs[6]","8963d4bd":"From what I can tell, face swap actors are mixed from many folders, which made it very challenging to generate a validation dataset that didn't have an actor as either the source or target face.\nHave a look at the following examples of what I'm talking about. For each example, the first image is the real video, the second is the fake and the third is a real video of the actor which I think the swap came from. The second row, I mask out the outer head to make it easier to see the actor identities, and I show the actor IDs above the photos.","21b4b913":"This notebook contains a dataset of the real videos and actors. The dataset was manually labelled.\nThe notebook will show you a sample of each actor in the dataset (386 actors). There are a few more actors that this, because for each video I labelled the main actor.\nSome videos contain more than one actor. The other actors in the video are usually appearing in multiple folders, but the main actors are in a single folder as far as I could see.","ed733761":"Load the actor database. \nThe actor identifier is a tuple, whose first element is the folder number and the second element is actor rank in that folder.","ebf4360d":"Let's see a sample of each actor:"}}