{"cell_type":{"34d86ec6":"code","53dbef97":"code","e46608c8":"code","969d480c":"code","705a526e":"code","4d49eb14":"code","32589819":"code","31f71949":"code","b57e8047":"code","879981d3":"code","187b9a29":"code","8be6184d":"code","9a424337":"code","c7abae37":"code","52866f04":"code","c817437b":"code","b22c1ed9":"code","c3454c9e":"code","f6fbdb04":"code","c1bdc626":"code","b2ad6106":"code","775d58ed":"code","f9181f20":"code","04fcf3ae":"code","55b9ffa7":"code","b8869376":"code","b15d9da7":"markdown","c1ed56f7":"markdown","8fea254f":"markdown","fdd2410a":"markdown","0f92569d":"markdown","714dbbd0":"markdown","8de17b62":"markdown","062fc252":"markdown","1f32262e":"markdown","68803c1d":"markdown","2a57b511":"markdown","8eb70eb6":"markdown","ae16a080":"markdown","0955c85d":"markdown","32db78ec":"markdown"},"source":{"34d86ec6":"import pandas as pd\nimport numpy as  np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,Flatten,MaxPool2D,Dropout,BatchNormalization\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.callbacks import ReduceLROnPlateau","53dbef97":"train=pd.read_csv('..\/input\/Kannada-MNIST\/train.csv')\ntest=pd.read_csv('..\/input\/Kannada-MNIST\/test.csv')\nsample_sub=pd.read_csv('..\/input\/Kannada-MNIST\/sample_submission.csv')","e46608c8":"print('The Train  dataset has {} rows and {} columns'.format(train.shape[0],train.shape[1]))\nprint('The Test  dataset has {} rows and {} columns'.format(test.shape[0],test.shape[1]))\n","969d480c":"train.head(3)","705a526e":"test.head(3)\ntest=test.drop('id',axis=1)\n","4d49eb14":"sns.set_style('whitegrid')\nsns.countplot(x='label',data=train,palette='RdBu_r')","32589819":"X_train=train.drop('label',axis=1)\nY_train=train.label","31f71949":"X_train=X_train\/255\ntest=test\/255","b57e8047":"X_train=X_train.values.reshape(-1,28,28,1)\ntest=test.values.reshape(-1,28,28,1)","879981d3":"print('The shape of train set now is',X_train.shape)\nprint('The shape of test set now is',test.shape)\n","187b9a29":"Y_train=to_categorical(Y_train)","8be6184d":"X_train,X_test,y_train,y_test=train_test_split(X_train,Y_train,random_state=42,test_size=0.15)","9a424337":"plt.imshow(X_train[0][:,:,0])","c7abae37":"# CREATE MORE IMAGES VIA DATA AUGMENTATION\ndatagen = ImageDataGenerator(\n        rotation_range=10,  \n        zoom_range = 0.10,  \n        width_shift_range=0.1, \n        height_shift_range=0.1)\n\n\ndatagen.fit(X_train)\n","52866f04":"\nmodel = Sequential()\n\nmodel.add(Conv2D(32,kernel_size=3,activation='relu',input_shape=(28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,kernel_size=3,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,kernel_size=5,strides=2,padding='same',activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(64,kernel_size=3,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64,kernel_size=3,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64,kernel_size=5,strides=2,padding='same',activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\nmodel.add(Dense(10, activation='softmax'))","c817437b":"model.summary()","b22c1ed9":"model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","c3454c9e":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","f6fbdb04":"epochs=5 #change this to 30 if you need to get better score\nbatch_size=64","c1bdc626":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_test,y_test),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","b2ad6106":"test=pd.read_csv('..\/input\/Kannada-MNIST\/test.csv')","775d58ed":"test_id=test.id\n\ntest=test.drop('id',axis=1)\ntest=test\/255\ntest=test.values.reshape(-1,28,28,1)\n","f9181f20":"test.shape","04fcf3ae":"y_pre=model.predict(test)     ##making prediction\ny_pre=np.argmax(y_pre,axis=1) ##changing the prediction intro labels","55b9ffa7":"sample_sub['label']=y_pre\nsample_sub.to_csv('submission.csv',index=False)\n","b8869376":"sample_sub.head()","b15d9da7":"### Data Augmentation!","c1ed56f7":"## Let's GO!!!\n\nIn this Kernel We will be using Convolution Neural Networks:\n- [Understanding the data](#1)\n- [Preparing the data](#2)\n- [Building a CNN](#3)\n- [How to make submission](#4)\n\n\n<p><font size='4' color='green'> If you like this kernel then please consider giving an upvote !<\/font><\/p>","8fea254f":"## Submission <a id='4'><\/a>\n","fdd2410a":"## Modelling <a id='3' ><\/a>","0f92569d":"We will make our prediction using our CNN model.","714dbbd0":"Now we will encode our target value.Keras inbuild library to_categorical() is used to do the on-hot encoding.","8de17b62":"### Checking wether target column is balanced or not\n* Target variable **label** is balanced","062fc252":"### Reshape","1f32262e":"### Loading the data","68803c1d":"### Splitting train and test","2a57b511":"### Understanding the data <a id=\"1\" ><\/a>","8eb70eb6":"### Encoding Target Values","ae16a080":"## Importing necessary libraries !","0955c85d":"## Data preparation <a id='2'><\/a>","32db78ec":"It's Nine in Kannada\n"}}