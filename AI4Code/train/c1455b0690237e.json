{"cell_type":{"9044a826":"code","5dce963d":"code","b2115123":"code","ef804098":"code","479b17fe":"code","7aed5b5b":"code","68c4e183":"code","3bdec823":"code","3d9be0dd":"code","d1203ae9":"code","e2ba0f32":"code","867eb098":"code","cace62b9":"code","71d4c493":"code","4c5633ef":"code","8c852543":"code","bde479df":"code","d575ea82":"markdown","c97e969b":"markdown","04fbf8a5":"markdown","fed754af":"markdown"},"source":{"9044a826":"import tarfile\nopened_tar = tarfile.open('..\/input\/comic-books-classification\/train.tar.gz')\nopened_tar.extractall('.\/Train')","5dce963d":"opened_tar = tarfile.open('..\/input\/comic-books-classification\/test.tar.gz')\nopened_tar.extractall('.\/Test')","b2115123":"import cv2\nimport os\nimport keras\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras.layers import *\nfrom keras import optimizers\nfrom keras.models import Sequential, Model\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.applications import ResNet50, Xception, VGG19,EfficientNetB7, InceptionV3\nfrom keras.callbacks import ModelCheckpoint\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom imgaug import augmenters as imaug\nimport numpy as np","ef804098":"Path = '.\/Train\/train'","479b17fe":"Train_X = []\nTrain_Y = []\nfor labels in os.listdir(Path):\n    path = os.path.join(Path, labels)\n    for images in os.listdir(path):\n        path1 = os.path.join(path,images)\n        img = cv2.imread(path1)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img, (128,128), interpolation = cv2.INTER_AREA)\n        Train_X.append(img)\n        Train_Y.append(labels)","7aed5b5b":"Path = '.\/Test\/test'","68c4e183":"Test_X = []\nTest_Y = []\nfor labels in os.listdir(Path):\n    path = os.path.join(Path, labels)\n    for images in os.listdir(path):\n        path1 = os.path.join(path,images)\n        img = cv2.imread(path1)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img, (128,128), interpolation = cv2.INTER_AREA)\n        Test_X.append(img)\n        Test_Y.append(labels)","3bdec823":"print(len(Train_X))\nprint(len(Test_X))","3d9be0dd":"plt.figure(figsize=(10,8))\nplt.subplot(1,3,1)\nplt.imshow(Train_X[1])\nplt.subplot(1,3,2)\nplt.imshow(Train_X[5000])\nplt.subplot(1,3,3)\nplt.imshow(Train_X[10000])","d1203ae9":"Train_X, Val_X, Train_Y, Val_Y = train_test_split(Train_X, Train_Y, test_size=0.20, random_state=0)\n\nTrain_X = np.array(Train_X)\nTrain_X = Train_X.reshape(Train_X.shape[0],128,128,3)\n\nVal_X = np.array(Val_X)\nVal_X = Val_X.reshape(Val_X.shape[0],128,128,3)\n\nTest_X = np.array(Test_X)\nTest_X = Test_X.reshape(Test_X.shape[0],128,128,3)\n\nlabel = LabelEncoder()\nTrain_Y = label.fit_transform(Train_Y)\nTrain_Y = to_categorical(Train_Y,86)\n\nVal_Y = label.fit_transform(Val_Y)\nVal_Y = to_categorical(Val_Y,86)\n\nTest_Y = label.fit_transform(Test_Y)\nTest_Y = to_categorical(Test_Y,86)\n\nprint(Train_X.shape)\nprint(Train_Y.shape)\n\nprint(Val_X.shape)\nprint(Val_Y.shape)\n\nprint(Test_X.shape)\nprint(Test_Y.shape)","e2ba0f32":"ResNet50 = ResNet50(include_top=False, weights='imagenet', input_shape=(128,128,3))\n\nResNet50.trainable = False\n\n\nmodel = Sequential()\nmodel.add(ResNet50)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dense(units=1024, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=86, activation='softmax'))\nmodel.summary()","867eb098":"checkpoint = ModelCheckpoint('.\/Comics_model.h5',\n                             monitor = 'val_loss',\n                             mode = 'min',\n                             save_best_only=True,\n                             verbose = 1\n                            )\ncallbacks = [checkpoint]","cace62b9":"optimizers = keras.optimizers.Adam(0.001)\nmodel.compile(loss='categorical_crossentropy', optimizer=optimizers, metrics=[\"accuracy\"])\n\nhistory = model.fit(x = Train_X, y = Train_Y, epochs=50, batch_size = 16, validation_data=(Test_X,Test_Y), callbacks =callbacks, verbose = 1)","71d4c493":"from keras.models import load_model\nmodel = load_model('.\/Comics_model.h5')","4c5633ef":"score = model.evaluate(Train_X,Train_Y)\nprint('Training Accuracy', score[1])","8c852543":"score = model.evaluate(Val_X,Val_Y)\nprint('Training Accuracy', score[1])","bde479df":"Score = model.evaluate(Test_X,Test_Y)\nprint(' Test Accuracy ', Score[1])\nprint(' Test Loss ', Score[0])","d575ea82":"# Comic Books Classification","c97e969b":"### Training Accuracy","04fbf8a5":"### Test Accuracy","fed754af":"### Validation Accuracy"}}