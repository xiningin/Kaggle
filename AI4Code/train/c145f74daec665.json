{"cell_type":{"dc6c9ed0":"code","1da776d7":"code","7f1035dc":"code","d4edfa6c":"code","5f278694":"code","147456ce":"code","880c51e7":"code","95e143da":"code","fdd14b55":"code","679af62f":"code","ec454d23":"code","03495ed3":"code","cd9620ad":"code","d4d1a036":"code","e7c1cc19":"code","733f655e":"code","3f1b652d":"code","29812925":"code","568c0fc4":"code","f69c7500":"code","4c3146cf":"code","faa97311":"code","20fa4d5a":"code","c87f1f54":"code","c2eb8821":"code","61e8503d":"code","ed2cac7e":"code","15cc5ee8":"code","f45bde53":"code","5c5d6a0f":"code","c1adcaee":"code","8297da3a":"code","deaf0fba":"code","51c0653c":"code","a231e2b0":"code","813ef44e":"code","19d964a8":"code","dcdc6095":"code","e7981270":"code","0ec93353":"code","1aa3bbeb":"code","c6e62b53":"code","aa9f4268":"code","1df46c19":"code","645eacfc":"code","a37ca7f1":"code","1bb6f675":"code","80cc8551":"code","e4e3ef75":"code","65e65032":"code","e04f3817":"markdown","0c10e4ee":"markdown","f0a3f8a4":"markdown","2b0572c6":"markdown","e40f6cf3":"markdown","a77cf075":"markdown","0fb2d900":"markdown","ef1a298a":"markdown","53f1b5d2":"markdown","f35cc70a":"markdown","1ede3a00":"markdown","1a4b9f00":"markdown","d65f5486":"markdown"},"source":{"dc6c9ed0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1da776d7":"# setting up environment\nimport pandas as pd\nimport numpy as np\nimport requests\nimport time\nfrom datetime import datetime as dt\n\nfrom fbprophet import Prophet\nfrom bokeh.plotting import figure, show\nfrom bokeh.models import Span\nfrom bokeh.io import output_notebook\nfrom bokeh.models import Range1d\n\n\noutput_notebook()","7f1035dc":"# getting Data from FlipsideCrypto\ndef getSquiggs ():\n\n    api = 'https:\/\/api.flipsidecrypto.com\/api\/v2\/queries\/001261ac-56de-47cf-af86-4a7d6c1c410a\/data\/latest'\n    response = requests.get(api)\n    df = pd.DataFrame(response.json())\n    return df","d4edfa6c":"# cleaning up the traits columns\ndef cleanTraits(row):\n    try:\n        return row.replace('\\n','').replace('[','').replace(']','').replace(' ','').replace('\"','').split(',')\n    except : \n        return None","5f278694":"# getting number of traits\ndef no_of_traits(row):\n    try:\n        return len(row)\n    except:\n        return None","147456ce":"# converting traits from string to python Dict\ndef trait_dict (row): \n    try:\n        z = {}\n        v = len(row)-min_traits    \n        z['name'] = '_'.join(row[0:v])\n        z['traits'] = {a[-2]:a[-1] for a in [k.split(':') for k in row[v:]]}\n        z['traits']['name'] = '_'.join(row[0:v])\n        return z\n    except:\n        return None","880c51e7":"# calculating rarity\ndef rarity_calc(row):\n    \n    sum = 0\n    for i in row.index:\n        sum += (len(traits_df) \/ len(traits_df[traits_df[i]==row[i]]))\n    return sum","95e143da":"squiggs_meta = getSquiggs().drop_duplicates().dropna().reset_index(drop=True)\n\nsquiggs_meta['TRAITS'] = squiggs_meta['TRAITS'].apply(cleanTraits)\n\nsquiggs_meta['NO_TRAITS'] = squiggs_meta['TRAITS'].apply(no_of_traits)\nmin_traits = int(min(squiggs_meta['NO_TRAITS']))\n\nsquiggs_meta['TRAITS'] = squiggs_meta['TRAITS'].apply(trait_dict)\n","fdd14b55":"tdf = pd.DataFrame(list(squiggs_meta['TRAITS']))\ncdf = pd.DataFrame(list(tdf['traits']))\ntraits_df = cdf\n\nsquiggs_meta['RARITY_SCORE'] = traits_df.apply(rarity_calc, axis=1)","679af62f":"squiggs_meta.sort_values(by = ['RARITY_SCORE'],ascending=False)","ec454d23":"def getSquigEvents():\n    \n    api = 'https:\/\/api.flipsidecrypto.com\/api\/v2\/queries\/69cbb0a5-7201-4755-b206-6601215781ad\/data\/latest'\n    response = requests.get(api)\n    df = pd.DataFrame(response.json())\n    \n    return df","03495ed3":"events_df = getSquigEvents()\nsales_df = events_df[(events_df['EVENT_TYPE'] == 'sale') & (events_df['TX_CURRENCY'] =='ETH') ]\n\nsales_tsf_df = sales_df[['BLOCK_TIMESTAMP','CONTRACT_ADDRESS','TOKEN_ID','PRICE','PRICE_USD']]\nsales_tsf_df = sales_tsf_df.merge(squiggs_meta, how='inner', on='TOKEN_ID')\nsales_tsf_df = sales_tsf_df[['BLOCK_TIMESTAMP','CONTRACT_ADDRESS_x','TOKEN_ID','PRICE','PRICE_USD','RARITY_SCORE']]\nsales_tsf_df['BLOCK_TIMESTAMP'] = pd.to_datetime(sales_tsf_df['BLOCK_TIMESTAMP']).dt.tz_localize(None)\nsales_tsf_df['ETH_PRICE'] = sales_tsf_df['PRICE_USD']\/sales_tsf_df['PRICE']\nsales_tsf_df = sales_tsf_df.dropna()","cd9620ad":"sales_tsf_df","d4d1a036":"model_df = sales_tsf_df[['BLOCK_TIMESTAMP','PRICE_USD']]\nmodel_df.columns = ['ds','y']\ntrain_df = model_df[sales_tsf_df['BLOCK_TIMESTAMP']<('2021-08-01')]\ntest_df = model_df[sales_tsf_df['BLOCK_TIMESTAMP']>('2021-08-01')]","e7c1cc19":"m = Prophet(interval_width=0.95)\nmodel = m.fit(train_df)","733f655e":"future = m.make_future_dataframe(periods=720,freq='H')\nforecast = m.predict(future)\n# forecast","3f1b652d":"p = figure(title=\"Model 1\",x_axis_type=\"datetime\", x_axis_label='Time', y_axis_label='Price_USD')\np.scatter(sales_tsf_df['BLOCK_TIMESTAMP'], sales_tsf_df['PRICE_USD'], legend_label='Actual price',line_width=0.5,color='red')\np.line(forecast['ds'],forecast['yhat_lower'], legend_label=\"Bounds price\", line_width=2,color='black')\np.line(forecast['ds'],forecast['yhat_upper'], legend_label=\"Bounds price\", line_width=2,color='black')\np.legend.location = \"top_left\"\n\nprediction_start_date = time.mktime(dt(2021, 8, 1, 0, 0, 0).timetuple())*1000\nprediction_start = Span(location=prediction_start_date,dimension='height', line_color='green',line_dash='dashed', line_width=3)\np.add_layout(prediction_start)\n\nshow(p)","29812925":"d1 = time.mktime(dt(2021, 5, 1, 0, 0, 0).timetuple())*1000\nd2 = time.mktime(dt(2021, 10, 1, 0, 0, 0).timetuple())*1000\np.x_range = Range1d(d1, d2)\np.y_range = Range1d(-(10**4), 10**5)\nshow(p)","568c0fc4":"model_df = sales_tsf_df[['BLOCK_TIMESTAMP','RARITY_SCORE','ETH_PRICE','PRICE_USD']]\nmodel_df.columns = ['ds','r1','r2','y']\ntrain_df = model_df[sales_tsf_df['BLOCK_TIMESTAMP']<('2021-08-01')]\ntest_df = model_df[sales_tsf_df['BLOCK_TIMESTAMP']>('2021-08-01')]","f69c7500":"m2 = Prophet()\nm2.add_regressor('r1')\nm2.add_regressor('r2')\nm2.fit(train_df)","4c3146cf":"forecast2 = m2.predict(model_df.drop(columns ='y'))","faa97311":"p = figure(title=\"Model 2\",x_axis_type=\"datetime\", x_axis_label='Time', y_axis_label='Price_USD')\np.scatter(sales_tsf_df['BLOCK_TIMESTAMP'], sales_tsf_df['PRICE_USD'], legend_label='Actual price',line_width=0.5,color='red')\np.line(forecast2['ds'],forecast2['yhat_lower'], legend_label=\"Bounds price\", line_width=1,color='black')\np.line(forecast2['ds'],forecast2['yhat_upper'], legend_label=\"Bounds price\", line_width=1,color='black')\np.legend.location = \"top_left\"\n\nprediction_start_date = time.mktime(dt(2021, 8, 1, 0, 0, 0).timetuple())*1000\nprediction_start = Span(location=prediction_start_date,dimension='height', line_color='green',line_dash='dashed', line_width=3)\np.add_layout(prediction_start)\n\nshow(p)","20fa4d5a":"d1 = time.mktime(dt(2021, 5, 1, 0, 0, 0).timetuple())*1000\nd2 = time.mktime(dt(2021, 10, 1, 0, 0, 0).timetuple())*1000\np.x_range = Range1d(d1, d2)\np.y_range = Range1d(-(10**4), 10**5)\nshow(p)","c87f1f54":"model_df = sales_tsf_df[['BLOCK_TIMESTAMP','RARITY_SCORE','ETH_PRICE','PRICE_USD']]\nmodel_df.columns = ['ds','r1','r2','y']\ntrain_df = model_df[(sales_tsf_df['BLOCK_TIMESTAMP']<('2021-08-01')) & (sales_tsf_df['BLOCK_TIMESTAMP']>('2021-06-01'))]\ntest_df = model_df[sales_tsf_df['BLOCK_TIMESTAMP']>('2021-08-01')]","c2eb8821":"m3 = Prophet()\nm3.add_regressor('r1')\nm3.add_regressor('r2')\nm3.fit(train_df)","61e8503d":"forecast3 = m3.predict(model_df.drop(columns ='y'))","ed2cac7e":"p = figure(title=\"Model 3\",x_axis_type=\"datetime\", x_axis_label='Time', y_axis_label='Price_USD')\np.scatter(sales_tsf_df['BLOCK_TIMESTAMP'], sales_tsf_df['PRICE_USD'], legend_label='Actual price',line_width=0.5,color='red')\np.line(forecast3['ds'],forecast3['yhat_lower'], legend_label=\"Bounds price\", line_width=1,color='black')\np.line(forecast3['ds'],forecast3['yhat_upper'], legend_label=\"Bounds price\", line_width=1,color='black')\np.legend.location = \"top_left\"\n\nprediction_start_date = time.mktime(dt(2021, 8, 1, 0, 0, 0).timetuple())*1000\nprediction_start = Span(location=prediction_start_date,dimension='height', line_color='green',line_dash='dashed', line_width=3)\np.add_layout(prediction_start)\n\nshow(p)","15cc5ee8":"d1 = time.mktime(dt(2021, 5, 1, 0, 0, 0).timetuple())*1000\nd2 = time.mktime(dt(2021, 10, 1, 0, 0, 0).timetuple())*1000\np.x_range = Range1d(d1, d2)\np.y_range = Range1d(-(10**4), 10**5)\nshow(p)","f45bde53":"model_df = sales_tsf_df[['BLOCK_TIMESTAMP','RARITY_SCORE','ETH_PRICE','PRICE_USD']]\nmodel_df.columns = ['ds','r1','r2','y']\ntrain_df = model_df[sales_tsf_df['BLOCK_TIMESTAMP']<('2021-06-01')]\ntest_df = model_df[sales_tsf_df['BLOCK_TIMESTAMP']>('2021-06-01')]","5c5d6a0f":"m4 = Prophet()\nm4.add_regressor('r1')\nm4.add_regressor('r2')\nm4.fit(train_df)","c1adcaee":"forecast4 = m4.predict(model_df.drop(columns ='y'))","8297da3a":"p = figure(title=\"Model 4\",x_axis_type=\"datetime\", x_axis_label='Time', y_axis_label='Price_USD')\np.scatter(sales_tsf_df['BLOCK_TIMESTAMP'], sales_tsf_df['PRICE_USD'], legend_label='Actual price',line_width=0.5,color='red')\np.line(forecast4['ds'],forecast4['yhat_lower'], legend_label=\"Bounds price\", line_width=1,color='black')\np.line(forecast4['ds'],forecast4['yhat_upper'], legend_label=\"Bounds price\", line_width=1,color='black')\np.legend.location = \"top_left\"\n\nprediction_start_date = time.mktime(dt(2021, 6, 1, 0, 0, 0).timetuple())*1000\nprediction_start = Span(location=prediction_start_date,dimension='height', line_color='gray',line_dash='dashed', line_width=3)\np.add_layout(prediction_start)\n\ndeviation_start_date = time.mktime(dt(2021, 8, 1, 0, 0, 0).timetuple())*1000\ndeviation_start = Span(location=deviation_start_date,dimension='height', line_color='green',line_dash='dashed', line_width=3)\np.add_layout(deviation_start)\n\nshow(p)","deaf0fba":"d1 = time.mktime(dt(2021, 5, 1, 0, 0, 0).timetuple())*1000\nd2 = time.mktime(dt(2021, 10, 1, 0, 0, 0).timetuple())*1000\np.x_range = Range1d(d1, d2)\np.y_range = Range1d(-(10**4), 10**5)\nshow(p)","51c0653c":"model_df = sales_tsf_df[['BLOCK_TIMESTAMP','RARITY_SCORE','ETH_PRICE','PRICE_USD']]\nmodel_df.columns = ['ds','r1','r2','y']\ntrain_df = model_df[sales_tsf_df['BLOCK_TIMESTAMP']<('2021-08-22')]\ntest_df = model_df[sales_tsf_df['BLOCK_TIMESTAMP']>('2021-08-22')]","a231e2b0":"m5 = Prophet()\nm5.add_regressor('r1')\nm5.add_regressor('r2')\nm5.fit(train_df)","813ef44e":"forecast5 = m5.predict(model_df.drop(columns ='y'))","19d964a8":"p = figure(title=\"Model 5\",x_axis_type=\"datetime\", x_axis_label='Time', y_axis_label='Price_USD')\np.scatter(sales_tsf_df['BLOCK_TIMESTAMP'], sales_tsf_df['PRICE_USD'], legend_label='Actual price',line_width=0.5,color='red')\np.line(forecast5['ds'],forecast5['yhat_lower'], legend_label=\"Bounds price\", line_width=1,color='black')\np.line(forecast5['ds'],forecast5['yhat_upper'], legend_label=\"Bounds price\", line_width=1,color='black')\np.legend.location = \"top_left\"\n\nprediction_start_date = time.mktime(dt(2021, 8, 22, 0, 0, 0).timetuple())*1000\nprediction_start = Span(location=prediction_start_date,dimension='height', line_color='green',line_dash='dashed', line_width=3)\np.add_layout(prediction_start)\n\n\nshow(p)","dcdc6095":"d1 = time.mktime(dt(2021, 7, 1, 0, 0, 0).timetuple())*1000\nd2 = time.mktime(dt(2021, 10, 1, 0, 0, 0).timetuple())*1000\np.x_range = Range1d(d1, d2)\np.y_range = Range1d(-(5*10**4), 10**5)\nshow(p)","e7981270":"model_df = sales_tsf_df[['BLOCK_TIMESTAMP','RARITY_SCORE','ETH_PRICE','PRICE_USD']]\nmodel_df.columns = ['ds','r1','r2','y']\ntrain_df = model_df[(sales_tsf_df['BLOCK_TIMESTAMP']<('2021-08-22')) & (sales_tsf_df['BLOCK_TIMESTAMP']>('2021-07-01'))]\ntest_df = model_df[sales_tsf_df['BLOCK_TIMESTAMP']>('2021-08-22')]","0ec93353":"m6 = Prophet()\nm6.add_regressor('r1')\nm6.add_regressor('r2')\nm6.fit(train_df)","1aa3bbeb":"forecast6 = m6.predict(model_df.drop(columns ='y'))","c6e62b53":"p = figure(title=\"Model 6\",x_axis_type=\"datetime\", x_axis_label='Time', y_axis_label='Price_USD')\np.scatter(sales_tsf_df['BLOCK_TIMESTAMP'], sales_tsf_df['PRICE_USD'], legend_label='Actual price',line_width=0.5,color='red')\np.line(forecast6['ds'],forecast6['yhat_lower'], legend_label=\"Bounds price\", line_width=1,color='black')\np.line(forecast6['ds'],forecast6['yhat_upper'], legend_label=\"Bounds price\", line_width=1,color='black')\np.legend.location = \"top_left\"\n\nprediction_start_date = time.mktime(dt(2021, 8, 22, 0, 0, 0).timetuple())*1000\nprediction_start = Span(location=prediction_start_date,dimension='height', line_color='green',line_dash='dashed', line_width=3)\np.add_layout(prediction_start)\n\nshow(p)","aa9f4268":"d1 = time.mktime(dt(2021, 7, 1, 0, 0, 0).timetuple())*1000\nd2 = time.mktime(dt(2021, 10, 1, 0, 0, 0).timetuple())*1000\np.x_range = Range1d(d1, d2)\np.y_range = Range1d(-(2*10**5),5*10**5)\nshow(p)","1df46c19":"model_df = sales_tsf_df[['BLOCK_TIMESTAMP','RARITY_SCORE','ETH_PRICE','PRICE_USD']]\nmodel_df.columns = ['ds','r1','r2','y']\ntrain_df = model_df[(sales_tsf_df['BLOCK_TIMESTAMP']<('2021-09-01')) & (sales_tsf_df['BLOCK_TIMESTAMP']>('2021-07-01'))]\ntest_df = model_df[sales_tsf_df['BLOCK_TIMESTAMP']>('2021-09-01')]","645eacfc":"m7 = Prophet()\nm7.add_regressor('r1')\nm7.add_regressor('r2')\nm7.fit(train_df)","a37ca7f1":"future7_1 = m7.make_future_dataframe(periods=720,freq='H')\nfuture7_1['r1'] = train_df['r1'].median()\nfuture7_1['r2'] = train_df['r2'].median()","1bb6f675":"future7_2 = m7.make_future_dataframe(periods=720,freq='H')\nfuture7_2['r1'] = train_df['r1'].max()\nfuture7_2['r2'] = train_df['r2'].max()","80cc8551":"forecast7_1 = m7.predict(future7_1)\nforecast7_2 = m7.predict(future7_2)","e4e3ef75":"p = figure(title=\"Model 7\",x_axis_type=\"datetime\", x_axis_label='Time', y_axis_label='Price_USD')\np.scatter(sales_tsf_df['BLOCK_TIMESTAMP'], sales_tsf_df['PRICE_USD'], legend_label='Actual price',line_width=0.5,color='red')\n\np.line(forecast7_1['ds'],forecast7_1['yhat_lower'], legend_label=\"Bounds price(median Rarity)\", line_width=1,color='blue')\np.line(forecast7_1['ds'],forecast7_1['yhat_upper'], legend_label=\"Bounds price(median Rarity)\", line_width=1,color='blue')\n\np.line(forecast7_2['ds'],forecast7_2['yhat_lower'], legend_label=\"Bounds price(max Rarity)\", line_width=1,color='black')\np.line(forecast7_2['ds'],forecast7_2['yhat_upper'], legend_label=\"Bounds price(max Rarity)\", line_width=1,color='black')\np.legend.location = \"top_left\"\n\nprediction_start_date = time.mktime(dt(2021, 9, 1, 0, 0, 0).timetuple())*1000\nprediction_start = Span(location=prediction_start_date,dimension='height', line_color='green',line_dash='dashed', line_width=3)\np.add_layout(prediction_start)\n\nshow(p)","65e65032":"d1 = time.mktime(dt(2021, 7, 1, 0, 0, 0).timetuple())*1000\nd2 = time.mktime(dt(2021, 10, 1, 0, 0, 0).timetuple())*1000\np.x_range = Range1d(d1, d2)\np.y_range = Range1d(-(2*10**5),5*10**5)\nshow(p)","e04f3817":"# Model 1 \n### Predicting USD value as a pure Time-Series function","0c10e4ee":"## Setting up the environment","f0a3f8a4":"# Model 2 \n### Predicting USD value with RARITY_SCORE and ETH_PRICE as extra parameters","2b0572c6":"## Squiggle MetaData Helper Functions","e40f6cf3":"# Model 6\n#### Using only July and first three weeks of August to predict last week of August","a77cf075":"## Getting and Prepping Squiggles Events","0fb2d900":"# Model 4\n### Checking if August is an anomaly","ef1a298a":"# Model 5 \n### Predict last week of august","53f1b5d2":"# Model 7\n### Predicting September price","f35cc70a":"# Model 3\n### Using only July data to predict August","1ede3a00":"# Building Models","1a4b9f00":"## Squiggles Event Data Helper Functions","d65f5486":"## Getting and Prepping Metadata"}}