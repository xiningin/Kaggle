{"cell_type":{"7dda1794":"code","f19aad22":"code","315d3baa":"code","4b180232":"code","906bd383":"code","936bac88":"code","55c4d806":"code","912638bc":"code","fb195449":"code","9ec29113":"code","48575561":"code","bd5aef28":"code","d90f1859":"code","f79cd1bf":"code","a387b6da":"code","385ac69d":"code","0f7932d9":"code","846e4ad2":"markdown","96d9f03d":"markdown","cd2bf12a":"markdown","2509381f":"markdown","2a63c957":"markdown","84c2e066":"markdown","9eb9041c":"markdown","4a4baae1":"markdown"},"source":{"7dda1794":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, f1_score","f19aad22":"data = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndata.head()","315d3baa":"#Data about information in each column in dataset\nfor col in data.columns:\n    print(col, ':', data[col].unique())","4b180232":"#Finding missing values\ndata.isna().sum()","906bd383":"#Creating labeled dataframe in order to visualize trends in the data\ntry:\n    data.drop(columns = 'veil-type', inplace = true)\n    print('veil-type dropped')\nexcept:\n    pass\n\nlenc = LabelEncoder()\nlabeled_data = pd.DataFrame()\nfor col in data.columns:\n    labeled_data[col] = lenc.fit_transform(data[col]).astype('int64')\n    print(col, 'done')","936bac88":"#Distribution of data in the dataframe in the form of histograms.\nfig = plt.figure(figsize = (30,30))\nax = fig.gca()\nlabeled_data.hist(ax=ax)\nfig.suptitle('Distributions of each Feature', size = 30)\nfig.tight_layout()\nfig.subplots_adjust(top=0.95)\nplt.show()","55c4d806":"#Plotting features vs class data to uncover any strong trends between features and target class\nfig, ax = plt.subplots(6,4, figsize = (28,40))\ncolumns = list(labeled_data.columns)\nn = 1\nfor i in range(6):\n    for j in range(4):\n        sns.barplot(x = labeled_data[['class',columns[n]]].groupby(columns[n])['class'].sum().keys(),\n                    y = labeled_data[['class',columns[n]]].groupby(columns[n])['class'].sum().values,\n                   palette = 'viridis',\n                   ax = ax[i,j]\n                   ).set_title(columns[n], size = 20)\n        ax[i,j].set_xlabel(\" \")\n        n += 1\n        if n == len(columns):\n            break\nfig.suptitle('Poisonous Mushrooms in each category', size = 30)\nfig.tight_layout()\nfig.subplots_adjust(top=0.95)\nax[5,1].set_visible(False)\nax[5,2].set_visible(False)\nax[5,3].set_visible(False)\nplt.show()","912638bc":"#Creating lists of colums to be label encoded and onehot encoded. \n## Columns to be label encoded have only 2 categories while those that need to be onehot encoded have more than 2 categories. \nlabel_encoding_columns = [col for col in data.columns if data[col].nunique() == 2]\nonehot_encoding_columns = [col for col in data.columns if col not in label_encoding_columns]","fb195449":"#Label Encoding and Onehot Encoding\nlabel_encoder = LabelEncoder()\nonehot_encoder = OneHotEncoder(handle_unknown='ignore')","9ec29113":"#Creating a Transformer to smoothly transform columns\npreprocessor = ColumnTransformer(\n    transformers=[\n    ('label', label_encoder, label_encoding_columns),\n    ('onehot', onehot_encoder, onehot_encoding_columns)\n])","48575561":"#Create a dataframe with labeled data\ndata_label = pd.DataFrame()\nfor col in label_encoding_columns:\n    data_label[col] = label_encoder.fit_transform(data[col]).astype('int64')\n    print(col, 'label encoded')","bd5aef28":"#Create dataframe with onehot encoded (dummy) data\ndata_dummies = pd.get_dummies(data[onehot_encoding_columns], columns = onehot_encoding_columns, drop_first = False, dtype= 'int64')","d90f1859":"#Concatinate both labeled and onehot dataframes to create dataframe with all data which has been iether label encoded or onehot encoded\ndata_encoded = pd.DataFrame()\ndata_encoded = pd.concat([data_label ,data_dummies], axis = 1)","f79cd1bf":"data_label.shape, data_dummies.shape, data_encoded.shape","a387b6da":"#Splitting data into features X and target y\nX = data_encoded.drop('class', axis = 1)\ny = data_encoded['class']","385ac69d":"#Splitting data into train and test \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)","0f7932d9":"rfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)\n\ny_pred = rfc.predict(X_test)\nscore = accuracy_score(y_pred, y_test)\n\nprint('The accuracy score for Random Forest Classifier is %.1f'%(score))","846e4ad2":"### Random Forest Classifier","96d9f03d":"---\n\n\nIn conclusion, we obtained a perfect accuracy score on our testing set. Normally, a perfect score would mean the model has overfit the dataset, however, in this case, because of extremely skewed features and high correlation with our target, our model was able to obtained a perfect accuracy with minimal effort and no hyper parameter tuning. This result atypical and should not be expected to be replicated for other datasets. \n\nThank you for reading! Please comment down below if you have any questions!\n\n---","cd2bf12a":"-------------------------------------------------------------------------------------------------------------------------\n\nEvery column in the dataset consists of catagorical variables. \n\nThere are no columns with numerical data. Additionally, there are no missing values in the dataset at all. \n\nThis makes the preprocessing stage a breeze. \n\nHowever, do note that the column 'veil-type' contains only a single variable. This makes the column useless to the dataset because it adds no insight into the data. Therefore, we shall drop this column.\n\nAll we need to do is to biforcate the columns into two lists. The first will contain all the columns that need to be label encoded, while the second will contain those that need to be onehot encoded.\n\nBefore that, however, I label encode the entire dataset in order to better visualise the trends in the data.\n\n-------------------------------------------------------------------------------------------------------------------------","2509381f":"## Modelling","2a63c957":"## Data Exploration","84c2e066":"-------------------------------------------------------------------------------------------------------------------\nThe barcharts above display the number of poisonous mushrooms for each category in each feature. \n\nWe notice that some of the data like 'ring-number' and 'gill-attachment' is heavily skewed. This is because they are highly correlated with our taget class, which would allow us to make good predictions based on those classes alone. This means that for a feature like 'ring-number', if the 'ring-number' is 1, then there is a high probability that the mushroom in consideration is poisonous. \n\n\n-------------------------------------------------------------------------------------------------------------------","9eb9041c":"## Data Preprocessing","4a4baae1":"# Mushroom Classification\n\n### Goal\nThe goal of this project is to be able to classifiy mushrooms into either safe to eat or poisionous based on certain physical features. The dataset was originally contributed to the UCI Machine Learning Library.    \nIn doing so, I attempt to answer the following questions:\n- What model works best to classify this data?\n- What features are imporatant when trying to discern between a mushroom thats poisionous and safe to eat?\n\n### Description\nThis dataset includes descriptions of hypothetical samples corresponding to 23 species of gilled mushrooms in the Agaricus and Lepiota Family Mushroom drawn from The Audubon Society Field Guide to North American Mushrooms (1981). Each species is identified as definitely edible, definitely poisonous, or of unknown edibility and not recommended. This latter class was combined with the poisonous one. The Guide clearly states that there is no simple rule for determining the edibility of a mushroom; no rule like \"leaflets three, let it be'' for Poisonous Oak and Ivy.\n\nDataset and information about the dataset can be found here: https:\/\/www.kaggle.com\/uciml\/mushroom-classification"}}