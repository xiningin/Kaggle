{"cell_type":{"8b0f94ba":"code","16d21041":"code","c63cfe8a":"code","6e2f9bdf":"code","842eb5b3":"code","75d90e83":"code","bb0de09b":"code","40fbc1e3":"code","9a21dcff":"code","b7c00ab5":"code","5719afeb":"code","e894d60c":"code","a4fe63bd":"code","0882438a":"code","4c43789f":"markdown","b7cbf807":"markdown","ba02a473":"markdown"},"source":{"8b0f94ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16d21041":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\ndataset = pd.read_csv('..\/input\/nutrition-facts\/menu.csv')","c63cfe8a":"calories_data = dataset.iloc[:,0:5]\ncalories_data['Total Calories'] = calories_data['Calories']+calories_data['Calories from Fat']\ncalories_by_category = calories_data.groupby('Category').mean().sort_values(by='Total Calories')\ncalories_by_category\n\ncalories_by_category.iloc[:,:2].plot(kind='bar', stacked=True)\nplt.title('Total Calories Average by Category')\nplt.ylabel('Total Calories')\nplt.show()","6e2f9bdf":"sandwich_data = dataset[dataset['Item'].str.contains('Sandwich')]\nsandwich_data = sandwich_data.iloc[:,[1,6,8,11,13,15,17,20,21,22,23]]\nsandwich_data['Total Daily Value'] = sandwich_data.sum(axis=1)\nsandwich_data['Chicken Type'] = sandwich_data['Item'].str.extract(\"(Crispy|Grilled)\")\nsandwich_data['Item Type'] = sandwich_data['Item'].str.extract(\"(Classic|Club|Ranch|Bacon|Southern)\")\nsandwich_data\n\n","842eb5b3":"\nsandwich_datax = dataset[dataset['Item'].str.contains('Sandwich')]\n#sandwich_datax = sandwich_datax.iloc[:,[3,5,8,11,13,15,17,20,21,22,23]]\nsandwich_datax = sandwich_datax.iloc[:,[1,3,5,7,10,12,14,16,18,19]]\nsandwich_datax['Chicken Type'] = sandwich_datax['Item'].str.extract(\"(Crispy|Grilled)\")\nsandwich_datax","75d90e83":"sandwich_datax['Total Calories'] = sandwich_datax['Calories']+sandwich_datax['Total Fat']+sandwich_datax['Saturated Fat']+sandwich_datax['Sodium']+sandwich_datax['Carbohydrates']+sandwich_datax['Dietary Fiber']+sandwich_datax['Sugars']+sandwich_datax['Protein']+sandwich_datax['Cholesterol']\n\nnutrition_by_item = sandwich_datax.groupby('Item').mean().sort_values(by='Item')\nnutrition_by_item\n","bb0de09b":"nutrition_by_item.iloc[:,[0,1,2,3,4,5,6,7,8]].plot(kind='bar', stacked=True)\n#nutrition_by_item.iloc[:,[2,3,4,5,6,7,8,9,10,11,12,13]].plot(kind='bar', stacked=True)\nplt.title('Grilled vs Crispy')\nplt.ylabel('Total Nutrition')\nplt.figure(figsize=(10,7))\nplt.show()","40fbc1e3":"nutrition_by_type = sandwich_datax.groupby('Chicken Type').mean().sort_values(by='Chicken Type')\nnutrition_by_type\n","9a21dcff":"nutrition_by_type.iloc[:,[0,1,2,3,4,5,6,7,8]].plot(kind='bar', stacked=True)\n#nutrition_by_item.iloc[:,[2,3,4,5,6,7,8,9,10,11,12,13]].plot(kind='bar', stacked=True)\nplt.title('Grilled vs Crispy')\nplt.ylabel('Total Nutrition')\nplt.figure(figsize=(10,7))\nplt.show()","b7c00ab5":"plt.figure(figsize=(10,7))\nsns.barplot(sandwich_data['Chicken Type'], sandwich_data['Total Daily Value'], hue=sandwich_data['Item'])\nplt.show()","5719afeb":"plt.figure(figsize=(10,7))\nsns.barplot(sandwich_data['Item Type'], sandwich_data['Total Daily Value'], hue=sandwich_data['Chicken Type'])\nplt.show()","e894d60c":"egg_data = dataset[dataset['Item'].str.contains('Egg')]\n#sandwich_datax = sandwich_datax.iloc[:,[3,5,8,11,13,15,17,20,21,22,23]]\negg_data = egg_data.iloc[:,[1,3,5,7,10,12,14,16,18,19]]\negg_data['Egg Type'] = egg_data['Item'].str.extract(\"(Egg Whites|Egg)\")\negg_data['Egg Type'] = egg_data['Egg Type'].map({'Egg Whites': \"Egg Whites\", 'Egg': \"Whole Eggs\"})\n\negg_data","a4fe63bd":"nutrition_by_type_egg = egg_data.groupby('Egg Type').mean().sort_values(by='Egg Type')\nnutrition_by_type_egg","0882438a":"nutrition_by_type_egg.iloc[:,[0,1,2,3,4,5,6,7,8]].plot(kind='bar', stacked=True)\n#nutrition_by_item.iloc[:,[2,3,4,5,6,7,8,9,10,11,12,13]].plot(kind='bar', stacked=True)\nplt.title('Whole Eggs vs Egg Whites')\nplt.ylabel('Total Nutrition')\nplt.figure(figsize=(10,7))\nplt.rcParams[\"figure.figsize\"] = [10,7]\nplt.show()","4c43789f":"# **Crispy Chicken**","b7cbf807":"# **Whole eggs vs Egg Whites**","ba02a473":"# **Total Calories Average**"}}