{"cell_type":{"5de94412":"code","f1c8f7f6":"code","9f35d531":"code","8a85674e":"code","033ac886":"code","3b5ca06e":"code","1b90671a":"code","112113ee":"code","7d344062":"code","aee3ab35":"code","188a650e":"code","cad640ae":"code","a48abeab":"code","3f969bf5":"code","5c96207f":"code","cb6b3959":"code","d4ea766e":"code","6b47bc4f":"code","6b5f9a6d":"code","e9477d93":"code","c06be281":"code","ded4b3f4":"code","84f4c21b":"markdown","87e9ad48":"markdown","81a20951":"markdown","3d9cddba":"markdown","3f622b34":"markdown","ce10df4e":"markdown","067bbe02":"markdown","6bca18a6":"markdown","32310794":"markdown","14e3c26e":"markdown"},"source":{"5de94412":"# importing necessary libraries\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","f1c8f7f6":"data = pd.read_csv(\"..\/input\/voicegender\/voice.csv\")\ndf = pd.DataFrame(data)\ndf.shape","9f35d531":"df.head()","8a85674e":"# showing column wise %ge of NaN values they contains \n\nfor i in df.columns:\n  print(i,\"\\t-\\t\", df[i].isna().mean()*100)\n","033ac886":"sns.countplot(x='label', data = df) ","3b5ca06e":"# Since our last column(label: male\/female) is categorical let's first convert it into numerical\n\nfrom sklearn.preprocessing import LabelEncoder\n\nenc = LabelEncoder()\ndf['label'] = enc.fit_transform(df['label'].astype('str'))\n\ndf.head()","1b90671a":"index = 0\nlabel = ['Female', 'Male']\n\nfig, ax = plt.subplots(nrows = 2, ncols = 1, figsize=(20,7))\n\nfor i in range(2):\n  ax[i].plot(df[df['label'] == i].sample(1).iloc[0,:20])\n  ax[i].set_title(label[i],)\n","112113ee":"cormap = df.corr()\nfig, ax = plt.subplots(figsize=(20,20))\nsns.heatmap(cormap, annot = True)","7d344062":"# Simple Function to get the name of top most corelated attributes\n\ndef get_corelated_col(cor_dat, threshold): \n  # Cor_data to be column along which corelation to be measured \n  #Threshold be the value above wich of corelation to considered\n  feature=[]\n  value=[]\n\n  for i ,index in enumerate(cor_dat.index):\n    if abs(cor_dat[index]) > threshold:\n      feature.append(index)\n      value.append(cor_dat[index])\n\n  df = pd.DataFrame(data = value, index = feature, columns=['corr value'])\n  return df\n","aee3ab35":"top_corelated_values = get_corelated_col(cormap['label'], 0.30)\ntop_corelated_values","188a650e":"sns.pairplot(df[top_corelated_values.index], hue='label')\n","cad640ae":"# Saparating features and labels \n\nX = df[list(top_corelated_values.index[:-1]) + [ 'kurt', 'maxdom', 'dfrange']]\nY = df['label']","a48abeab":"# Scale the data to be between -1 and 1\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\nX.head()","3f969bf5":"#now lets split data in test train pairs\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y)","5c96207f":"# Initialising the SVM classifier \n\nfrom sklearn.svm import SVC\nfrom sklearn import metrics\n\nSVC().get_params()   # Hyperparamters of SVC","cb6b3959":"# Now let's make grid for tunning the hyperparametes\n\nfrom sklearn.model_selection import GridSearchCV\n\nC = np.arange(0.1, 2, 0.1)\nkernel = ['linear', 'rbf', 'poly']\ngamma = [0.01,0.02,0.03,0.04,0.05]\n\n\ngrid = {'C': C,\n        'kernel': kernel,\n        'gamma': gamma }","d4ea766e":"# Fitting SVM classifiers with hyperparameter tunned using grid search(cross validation with 10 folds)\n\nfrom sklearn.svm import SVC\nfrom sklearn import metrics\n\nsvc_grid = GridSearchCV(estimator = SVC(), param_grid = grid, cv = 10)\nsvc_grid.fit(X_train, y_train)","6b47bc4f":"svc_grid.best_params_  # Best pairs of hyperparameters provided by grid search","6b5f9a6d":"# Prediction\n\ny_pred = svc_grid.best_estimator_.predict(X_test)\n\npred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\npred_df.head()","e9477d93":"from sklearn.metrics import confusion_matrix\n\nmat = confusion_matrix(y_test, y_pred)\nfig, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(mat, annot = True)","c06be281":"from sklearn import metrics\n\n# Generate the roc curve using scikit-learn.\nfpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.show()\n\n# Measure the area under the curve.  The closer to 1, the \"better\" the predictions.\nprint(\"AUC of the predictions: {0}\".format(metrics.auc(fpr, tpr)))\n\n# Measure the Accuracy Score\nprint(\"Accuracy score of the predictions: {0}\".format(metrics.accuracy_score(y_pred, y_test)))\n","ded4b3f4":"x_min, x_max = X['meanfun'].min() - 1, X['meanfun'].max() + 1\ny_min, y_max = X['centroid'].min() - 1, X['centroid'].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02),\n                     np.arange(y_min, y_max, 0.02))\n\nsvc_plot = SVC(C = 1.8000000000000003, gamma = 0.05, kernel = 'rbf')\nsvc_plot.fit(X[['meanfun', 'centroid']], Y)\nZ = svc_plot.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\n\nplt.contourf(xx, yy, Z, cmap = plt.cm.coolwarm, alpha=0.8)\nplt.scatter(X['meanfun'], X['centroid'], c = Y, cmap = plt.cm.coolwarm)\nplt.xlabel('Meanfun')\nplt.ylabel('Centroid')\nplt.xlim(xx.min(), xx.max())\nplt.ylim(yy.min(), yy.max())\nplt.xticks(())\nplt.yticks(())\nplt.title(\"Support Vector Machine (Classifier)\")","84f4c21b":"#### Support Vector Machine\n\n> Here I'm using SVM classifier on this dataset. I'm also gonna tune it's hyperparameters in order to increase the accuracy","87e9ad48":"> Here I'm plotting pairplot of attributes shown in heatmap most related to attribute __label__.","81a20951":"> Now for visualising each class, here is plot of any any 1 random sample of voices of each class.","3d9cddba":"> This graphs clearly shows how __Kurt__ is genrally high for males as compared to females whereas __Maxdom__ and __Dfrange__ are quite low. These attributes are essential for classfication of data\n\n\n\n\n> Let's further see how other attributes are related to each other using correlation matrix and pairplot","3f622b34":"## Gender Classification\n\n> Gender Classification by Voice and Speech Analysis","ce10df4e":"#### Data Standardisation\n\n> We arehere standardising data so in order to make the mean of data . Doing standaradisation is appreciated before applying SVM (classifier used in this notebook) as Standardization gives all features the same influence on the distance metric","067bbe02":"> Here diagonal of pairplot depicts how both the classes are correlated with these attributes so nicely , thus they are perfect for using in classification.\n\n> Other plots also shows nice correlation with each other and how both classes are easily saparable over these columns\n\n> So for classification I'm going to use there attributes plus  Kurt, Maxdom and Dfrange since they are also seems essential flrom the line plot","6bca18a6":"> Since data does'nt contain any null values, we can move further","32310794":"> Here graph sows that data is equally balanced between both the classes","14e3c26e":"#### Plotting Decision surface of Radial basis function(rbf) SVC\n\n> Here is a plot of dicision boundary of of SVM usinf __rbf__ kernel. Here two attributes of our dataset __Meanfun__ and __Centroid__ is used for plotting an 2D surface. "}}