{"cell_type":{"4d5a7b48":"code","a63a1d9e":"code","12103f1c":"code","b64a328f":"code","e5819aa9":"code","edaec48a":"code","88f3ba7f":"code","f9f64a81":"code","bba66e01":"code","12d0c9a0":"code","a4c9e586":"code","3b83bff1":"code","bc1d8855":"code","d4e31a87":"code","cf2b1797":"code","6fe0617e":"code","5716ae45":"code","d0f464ae":"code","744a4ee1":"code","cf614270":"code","03b26cc9":"code","9c82c7ea":"code","e68cb3ac":"code","552dc7c3":"markdown","a2909ab7":"markdown","5386d49e":"markdown","3e73248e":"markdown","763d282a":"markdown"},"source":{"4d5a7b48":"import pandas as pd","a63a1d9e":"df_sub = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MSampleSubmissionStage1.csv',sep=',',header=0,index_col=None)\ndf_sub","12103f1c":"df_sub['Season'] = df_sub['ID'].apply(lambda x: x.split('_')[0])\ndf_sub['Team1'] = df_sub['ID'].apply(lambda x: x.split('_')[1])\ndf_sub['Team2'] = df_sub['ID'].apply(lambda x: x.split('_')[2])\ndf_sub","b64a328f":"df_seed = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MNCAATourneySeeds.csv',sep=',',header=0,index_col=None)\ndf_seed.Seed = df_seed.Seed.apply(lambda x: int(x[1:3]))\ndf_seed","e5819aa9":"df_R = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MNCAATourneyDetailedResults.csv',sep=',',header=0,index_col=None)\ndf_R","edaec48a":"df_Rid_1 = df_R[['Season','WTeamID','LTeamID']]\ndf_Rid_1['Label']=1\n\ndf_Rid_0 = df_R[['Season','LTeamID','WTeamID']]\ndf_Rid_0.columns = ['Season','WTeamID','LTeamID']\ndf_Rid_0['Label']=0\n\ndf_all = pd.concat([df_Rid_1,df_Rid_0])\ndf_all","88f3ba7f":"df_seed1 = pd.merge(df_all, df_seed, how='left', left_on=['Season','WTeamID'], right_on = ['Season','TeamID'])\ndf_seed1.rename(columns={'Seed':'Seed1'}, inplace =True)\ndf_seed1.drop('TeamID',axis=1, inplace =True)\ndf_seed1","f9f64a81":"df_seed2 = pd.merge(df_seed1, df_seed, how='left', left_on=['Season','LTeamID'], right_on = ['Season','TeamID'])\ndf_seed2.rename(columns={'Seed':'Seed2'}, inplace =True)\ndf_seed2.drop('TeamID',axis=1, inplace =True)\ndf_seed2","bba66e01":"df_seed2['Seed_diff']=df_seed2['Seed1'] - df_seed2['Seed2']\ndf_seed2","12d0c9a0":"df_all = df_seed2[['Seed_diff','Label']]\ndf_all","a4c9e586":"import numpy as np\nimport pandas as pd\nimport pickle\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report\n\ntrain, test = train_test_split(df_all)","3b83bff1":"train_X = train.drop('Label', axis=1).values\ntrain_y = train['Label'].values\ntest_X = test.drop('Label', axis=1).values\ntest_y = test['Label'].values\n","bc1d8855":"clf = GridSearchCV(\n    estimator = XGBClassifier(use_label_encoder =False,verbosity=0),\n    param_grid = {'booster':['gbtree', 'gblinear', 'dart'],\n        'n_estimators': [2,5,10, 20, 50],\n                  'max_depth': [3,4,5,6,10,20],\n                  'subsample':[0.6, 0.7, 0.8]},\n    cv=StratifiedKFold(n_splits=5).split(train_X, train_y)\n)\nclf.fit(train_X, train_y)","d4e31a87":"print(clf.best_params_)\nprint(classification_report(clf.predict(test_X), test_y))","cf2b1797":"df_sub['Season']=df_sub['Season'].astype('int64')\ndf_sub['Team1']=df_sub['Team1'].astype('int64')\ndf_sub['Team2']=df_sub['Team2'].astype('int64')","6fe0617e":"df_sub.info()","5716ae45":"df_sub1 = pd.merge(df_sub, df_seed, how='left', left_on=['Season','Team1'], right_on = ['Season','TeamID'])\ndf_sub1.rename(columns={'Seed':'Seed1'}, inplace =True)\ndf_sub1.drop('TeamID',axis=1, inplace =True)\ndf_sub1","d0f464ae":"df_sub2 = pd.merge(df_sub1, df_seed, how='left', left_on=['Season','Team2'], right_on = ['Season','TeamID'])\ndf_sub2.rename(columns={'Seed':'Seed2'}, inplace =True)\ndf_sub2.drop('TeamID',axis=1, inplace =True)\ndf_sub2","744a4ee1":"df_sub2['Seed_diff']=df_sub2['Seed1'] - df_sub2['Seed2']\ndf_sub2","cf614270":"predict_features = df_sub2[['Seed_diff']].values\n\ndf_final = df_sub2\ndf_final['Pred'] = clf.predict_proba(predict_features)[:,1] # get prob of class 1\n","03b26cc9":"df_final","9c82c7ea":"df_final[['ID','Pred']]\ndf_final[['ID','Pred']].set_index('ID').to_csv('submission_seed1.csv')","e68cb3ac":"df_all = df_seed2[['Seed1','Seed2','Seed_diff','Label']]\ndf_all\n\ntrain, test = train_test_split(df_all)\ntrain_X = train.drop('Label', axis=1).values\ntrain_y = train['Label'].values\ntest_X = test.drop('Label', axis=1).values\ntest_y = test['Label'].values\n\nclf = GridSearchCV(\n    estimator = XGBClassifier(use_label_encoder =False,verbosity=0),\n    param_grid = {'booster':['gbtree', 'gblinear', 'dart'],\n        'n_estimators': [2,5,10, 20, 50],\n                  'max_depth': [3,4,5,6,10,20],\n                  'subsample':[0.6, 0.7, 0.8]},\n    cv=StratifiedKFold(n_splits=5).split(train_X, train_y)\n)\nclf.fit(train_X, train_y)\n\npredict_features = df_sub2[['Seed1','Seed2','Seed_diff']].values\n\ndf_final = df_sub2\ndf_final['Pred'] = clf.predict_proba(predict_features)[:,1] # get prob of class 1\n\ndf_final[['ID','Pred']]\ndf_final[['ID','Pred']].set_index('ID').to_csv('submission_seed2.csv')","552dc7c3":"Prediction","a2909ab7":"## Loading data","5386d49e":"Xgboost","3e73248e":"# Train by seed only","763d282a":"Train with Seed1 and Seed2 and seeddiff"}}