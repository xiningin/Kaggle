{"cell_type":{"ccc00919":"code","2585ed0c":"code","b058ad16":"code","c126eaf2":"code","0ccd1e1c":"code","1c55c26d":"code","59707b2d":"code","55f6b215":"code","0874b0ef":"code","adcc6244":"code","61d70b98":"code","ef65f297":"code","0b84bb0d":"code","04d34c83":"markdown","07bf9716":"markdown","958b92d7":"markdown","1ff738cb":"markdown","d959c06e":"markdown"},"source":{"ccc00919":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nimport tensorflow as tf","2585ed0c":"_input= \"..\/input\/breast-cancer-wisconsin-data\/data.csv\"\ndata = pd.read_csv(_input)\ndf = data.copy()\n\ndel df['Unnamed: 32']\ndel df['id']","b058ad16":"df.head()","c126eaf2":"X = df.drop(['diagnosis'], axis=1).values\ny =  df['diagnosis']\n\n# Encoding categorical data\nlabelencoder_X_1 = LabelEncoder()\ny = labelencoder_X_1.fit_transform(y)\n\n# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n#Feature Scaling\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","0ccd1e1c":"X_train.shape[1]","1c55c26d":"classifier = Sequential() \nclassifier.add(Dense(units = 24, activation = 'relu', input_dim = X_train.shape[1]))\nclassifier.add(Dropout(0.2))\n\nclassifier.add(Dense(units = 12, activation = 'relu'))\nclassifier.add(Dropout(0.2))\n\nclassifier.add(Dense(units = 1, activation = 'sigmoid'))\nclassifier.compile(optimizer = 'rmsprop', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\ncallback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=4)\n\nhistory = classifier.fit(X_train, y_train,validation_data = (X_test,y_test), epochs=100, batch_size=100, callbacks=[callback] ,verbose=1)","59707b2d":"mse_value, mae_value = classifier.evaluate(X_test, y_test, verbose=0)\nprint(\"mse_value: \", mse_value)\nprint(\"mae_value: \", mae_value)","55f6b215":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","0874b0ef":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss']) \nplt.title('Model loss') \nplt.ylabel('Loss') \nplt.xlabel('Epoch') \nplt.legend(['Train', 'Test'], loc='upper left') \nplt.show()","adcc6244":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(units = 24, activation = 'relu', input_dim=X_train.shape[1]))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Dense(units = 12, activation = 'relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Dense(units = 1, activation = 'sigmoid'))\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\n\ncallback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=4)\n\nhistory = model.fit(X_train, y_train,validation_data = (X_test,y_test), epochs=100, batch_size=100, callbacks=[callback], verbose=1)","61d70b98":"mse_value, mae_value = model.evaluate(X_test, y_test, verbose=0)\nprint(\"mse_value: \", mse_value)\nprint(\"mae_value: \", mae_value)","ef65f297":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","0b84bb0d":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss']) \nplt.title('Model loss') \nplt.ylabel('Loss') \nplt.xlabel('Epoch') \nplt.legend(['Train', 'Test'], loc='upper left') \nplt.show()","04d34c83":"load and read data","07bf9716":"## Keras","958b92d7":"import the necessary packages","1ff738cb":"### How to decide the number of hidden layers and nodes in a hidden layer?\n- The number of hidden neurons should be between the size of the input layer and the size of the output layer.\n- The number of hidden neurons should be 2\/3 the size of the input layer, plus the size of the output layer.\n- The number of hidden neurons should be less than twice the size of the input layer.","d959c06e":"## Tensorflow"}}