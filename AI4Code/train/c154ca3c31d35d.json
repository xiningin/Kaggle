{"cell_type":{"8286e804":"code","32694347":"code","0220142f":"code","a2d6f62a":"code","e44769d6":"code","3719914a":"code","4d3b4e5c":"code","92d2adfb":"code","348dd587":"code","eadf9288":"code","58b70f43":"code","81811277":"code","31e3d880":"code","ff2f1a9a":"code","66a2cd21":"code","cc817a31":"code","7bed6afd":"code","f2dc9dfd":"code","77c45683":"code","a42b0788":"code","f1e29a51":"code","7dce63f4":"code","c1c3071a":"code","06992876":"code","084ea34a":"code","b2671479":"code","aadea973":"code","c074daa5":"code","dcbf2417":"code","8d0e90ce":"markdown","634f8d27":"markdown","eba3dc69":"markdown","96c99f93":"markdown","7c5f5dff":"markdown"},"source":{"8286e804":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","32694347":"train = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_inicial_train\/ib_base_inicial_train.csv\")\ndigital = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_digital\/ib_base_digital.csv\")\nrcc = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_rcc\/ib_base_rcc.csv\")\nreniec = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_reniec\/ib_base_reniec.csv\")\nvehicular = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_vehicular\/ib_base_vehicular.csv\")","0220142f":"print(\"# Filas: {0}\".format(str(train.shape[0])))\nprint(\"# Columnas: {0}\".format(str(train.shape[1])))\n\nprint(\"Compruebo tipos de datos de las columnas\")\ntrain.dtypes\nprint(\"compruebo valores nulos\")\ntrain.isna().sum()","a2d6f62a":"variables = [\"margen\", \"cem\", \"ingreso_neto\", \"linea_ofrecida\"]\n\nfor variable in variables:\n    print(\"calculo deciles para variable {0}\".format(variable))\n    print(\"----------------------------------\")\n    dfAux = train.groupby([\"codmes\", pd.qcut(train[variable], 10, duplicates = \"drop\"), \"codtarget\"]).size().reset_index().rename(columns = {0 : \"qCasos\"})\n    crosstab = pd.crosstab(index = [dfAux.codmes, dfAux[variable]], columns = dfAux.codtarget, values = dfAux[\"qCasos\"], aggfunc = \"sum\").reset_index()\n    crosstab[\"totales\"] = crosstab[0]+crosstab[1]\n    crosstab[\"%target0\"] = crosstab[0]\/crosstab[\"totales\"]\n    crosstab[\"%target1\"] = crosstab[1]\/crosstab[\"totales\"]\n    print(crosstab[crosstab.codmes == 201901])\n","e44769d6":"print(\"Observamos las proporciones del target\")\nprint(train.groupby(\"codtarget\").size() \/ len(train))\n\nprint(\"calculamos quienes son rentables y quienes son, margen > 0 es rentable\")\ntrain[\"esRentable\"] = np.where(train.margen > 0, 1, 0)\nprint(train.groupby(\"esRentable\").size() \/ len(train))\n\nprint(\"vemos quienes son rentables y compraron una TC\")\nprint(train.groupby([\"codtarget\",\"esRentable\"]).size() \/ len(train))\n","3719914a":"variables = [\"margen\", \"cem\", \"ingreso_neto\", \"linea_ofrecida\"]\n\nfor variable in variables:\n    print(\"calculo deciles para variable {0}\".format(variable))\n    print(\"----------------------------------\")\n    dfAux = train.groupby([\"codmes\", pd.qcut(train[variable], 4, duplicates = \"drop\"), \"codtarget\"]).size().reset_index().rename(columns = {0 : \"qCasos\"})\n    crosstab = pd.crosstab(index = [dfAux.codmes, dfAux[variable]], columns = dfAux.codtarget, values = dfAux[\"qCasos\"], aggfunc = \"sum\").reset_index()\n    crosstab[\"totales\"] = crosstab[0]+crosstab[1]\n    crosstab[\"%target0\"] = crosstab[0]\/crosstab[\"totales\"]\n    crosstab[\"%target1\"] = crosstab[1]\/crosstab[\"totales\"]\n    print(crosstab[crosstab.codmes == 201901])\n","4d3b4e5c":"a = train[train.codtarget == 1].groupby(\"codmes\").agg({\"linea_ofrecida\": [\"min\", \"max\", \"mean\", \"median\"], \n                                                   \"cem\": [\"min\", \"max\", \"mean\", \"median\"], \n                                                   \"ingreso_neto\": [\"min\", \"max\", \"mean\", \"median\"], \n                                                   \"margen\": [\"min\", \"max\", \"mean\", \"median\"]})","92d2adfb":"array = []\nfor column in a.columns:\n    array.append(column[0]+\"_\"+column[1])\na.columns = array\n \na","348dd587":"train[train.codtarget == 0].groupby(\"codmes\").agg({\"linea_ofrecida\": [\"min\", \"max\", \"mean\", \"median\"], \n                                                   \"cem\": [\"min\", \"max\", \"mean\", \"median\"], \n                                                   \"ingreso_neto\": [\"min\", \"max\", \"mean\", \"median\"], \n                                                   \"margen\": [\"min\", \"max\", \"mean\", \"median\"]})","eadf9288":"train[\"ratioLineaIngreso\"] = train[\"linea_ofrecida\"] \/ train[\"ingreso_neto\"]\ntrain.groupby([\"codmes\", \"codtarget\"]).agg({\"ratioLineaIngreso\": [\"min\", \"max\", \"mean\", \"median\"]})","58b70f43":"variables = [\"ratioLineaIngreso\", \"ingreso_neto\", \"cem\"]\n\nfor variable in variables:\n    print(\"calculo deciles para variable {0}\".format(variable))\n    print(\"----------------------------------\")\n    dfAux = train.groupby([\"codmes\", pd.qcut(train[variable], 10, duplicates = \"drop\"), \"codtarget\"]).size().reset_index().rename(columns = {0 : \"qCasos\"})\n    crosstab = pd.crosstab(index = [dfAux.codmes, dfAux[variable]], columns = dfAux.codtarget, values = dfAux[\"qCasos\"], aggfunc = \"sum\").reset_index()\n    crosstab[\"totales\"] = crosstab[0]+crosstab[1]\n    crosstab[\"%target0\"] = crosstab[0]\/crosstab[\"totales\"]\n    crosstab[\"%target1\"] = crosstab[1]\/crosstab[\"totales\"]\n    print(crosstab[crosstab.codmes == 201901])","81811277":"print(\"valido la cantidad de veces que una persona aparece en las bases\")\nprint(\"----------------------------------------------------------------\")\na = train.groupby(\"id_persona\").size().reset_index().rename(columns ={0:\"qApariciones\"})\nb = train.groupby(\"id_persona\").codtarget.max().reset_index()\nc = pd.merge(a,b, on =\"id_persona\", how = \"left\")\nprint(c[c.qApariciones > 1].groupby(\"codtarget\").size() \/ len(c[c.qApariciones > 1]))\nprint(\"valido segun las apariciones en la base como se comporta segun la venta de los productos\")\nprint(\"---------------------------------------------------------------------------------------\")\n\nprint(c.groupby([\"codtarget\", \"qApariciones\"]).size() \/ len(c))\n\nprint(\"valido los porcentajes de target cuando aparece solo una vez el cliente\")\nprint(\"-----------------------------------------------------------------------\")\n\nprint(c[c.qApariciones == 1].groupby(\"codtarget\").size() \/ len(c[c.qApariciones == 1]))","31e3d880":"meses = train.codmes.drop_duplicates().values\nfor codmes in meses:\n    print(\"cantidad de registros para el mes {0} son {1}\".format(codmes, len(train[train.codmes == codmes])))\n    a = train[train.codmes < codmes].groupby(\"id_persona\").size().reset_index().rename(columns ={0:\"qApariciones\"})\n    b = train[train.codmes == codmes].groupby(\"id_persona\").codtarget.max().reset_index()\n    c = pd.merge(b,a, on =\"id_persona\", how = \"left\").fillna(0)\n    print(\"valido el paso anterior pero cada uno de los meses separados\")\n    print(\"------------------------------------------------------------\")\n    print(c.groupby([\"codtarget\", \"qApariciones\"]).size() \/ len(c))\n\n    print(\"con solo la aparicion del mes en curso\")\n    print(\"--------------------------------------\")\n    print(c[c.qApariciones == 0].groupby([\"codtarget\"]).size() \/ len(c[c.qApariciones == 0]))\n    print(\"con una aparicion ademas del mes en curso\")\n    print(\"-----------------------------------------\")\n    print(c[c.qApariciones == 1].groupby([\"codtarget\"]).size() \/ len(c[c.qApariciones == 1]))\n\n    print(\"con al menos una aparicion ademas del mes en curso\")\n    print(\"--------------------------------------------------\")\n    print(c[c.qApariciones == 1].groupby([\"codtarget\"]).size() \/ len(c[c.qApariciones == 1]))\n\n    \n\n","ff2f1a9a":"print(\"revisamos para aquellos que hayan tenido una aparicion anteriormente como se comportan en base a los limites otorgados anteriormente y ahora\")\nprint(\"el campo mayorLimite es 1 entonces se otorga en el mes en curso mayor limite que en otra aparicion\")\nprint(\"--------------------------------------------------------------------------------------------------\")\nmeses = train.codmes.drop_duplicates().values\n#meses = [201904]\nfor codmes in meses:\n    a = train[train.codmes < codmes].groupby(\"id_persona\").size().reset_index().rename(columns ={0:\"qApariciones\"})    \n    b = train[train.codmes == codmes].groupby(\"id_persona\").agg({\"codtarget\": \"max\", \"linea_ofrecida\": \"max\"}).reset_index().rename(columns = {\"linea_ofrecida\": \"ultimaLinea\"})\n    c = train[train.codmes < codmes].groupby(\"id_persona\").linea_ofrecida.max().reset_index()\n    d = pd.merge(b,a, on =\"id_persona\", how = \"left\").fillna(0)\n    e = pd.merge(d, c, on = \"id_persona\", how = \"left\").fillna(0)\n    e = e[e.qApariciones > 0]\n    e[\"mayorLimite\"] = np.where(e.ultimaLinea > e.linea_ofrecida, 1, 0)\n    print(\"como se comporta la cartera mes a mes en base al target y si se aumento o no el limite\")\n    print(\"--------------------------------------------------------------------------------------\")\n    print(e.groupby([\"mayorLimite\", \"codtarget\"]).size() \/ len(e))\n    print(\"como se comportan aquellos que la linea ofrecida disminuye\")\n    print(e[e.mayorLimite == 0].groupby([\"mayorLimite\", \"codtarget\"]).size() \/ len(e[e.mayorLimite == 0]))\n    \n    print(\"como se comportan aquellos que la linea ofrecida aumenta\")\n    print(e[e.mayorLimite == 1].groupby([\"mayorLimite\", \"codtarget\"]).size() \/ len(e[e.mayorLimite == 1]))\n    \n   \n   ","66a2cd21":"digital[\"codmes\"] = digital.apply(lambda x: x.codday \/\/ 100, axis = 1).astype(int)\ndigital = digital.fillna(0)\nagregatedColumns = ['simu_prestamo', 'benefit', 'email', 'facebook',\n       'goog', 'youtb', 'compb', 'movil', 'desktop', 'lima_dig', 'provincia_dig', 'extranjero_dig', 'n_sesion',\n       'busqtc', 'busqvisa', 'busqamex', 'busqmc', 'busqcsimp', 'busqmill',\n       'busqcsld', 'busq', 'n_pag', 'android', 'iphone']\n\naggFunctions = dict()\nfor column in agregatedColumns:\n    aggFunctions[column] = \"sum\"\n\ndigital = digital.groupby([\"codmes\", \"id_persona\"]).agg(aggFunctions).reset_index()\n","cc817a31":"mesesDigital = {\n    201901: (201808, 201810),\n    201902: (201809, 201811),\n    201903: (201810, 201812),\n    201904: (201811, 201901),\n    201905: (201812, 201902),\n    201906: (201901, 201903),\n    201907: (201902, 201904)\n}","7bed6afd":"auxDigital = digital[digital.codmes.between (mesesDigital[201902][0], mesesDigital[201902][1])]","f2dc9dfd":"for column in auxDigital.columns[2:]:\n    print(\"Columnas con Valores distintos a 0 {0} {1} {2} %\".format(column, auxDigital[auxDigital[column] > 0][column].count(), \\\n                                                             round(auxDigital[auxDigital[column] > 0][column].count() \/ auxDigital[column].count(),2)))","77c45683":"rcc.head()","a42b0788":"rcc.groupby(\"rango_mora\").size()","f1e29a51":"rcc.groupby(\"id_persona\").producto.size().sort_values(ascending = False)","7dce63f4":"mesesMora = mesesDigital = {\n    201901: (201803, 201809),\n    201902: (201804, 201810),\n    201903: (201805, 201811),\n    201904: (201806, 201812),\n    201905: (201807, 201901),\n    201906: (201808, 201902),\n    201907: (201809, 201903)\n}","c1c3071a":"auxRcc = rcc[rcc.codmes.between (mesesMora[201902][0], mesesMora[201902][1])]","06992876":"auxRcc.isna().sum()\/ auxRcc.count()","084ea34a":"auxRcc.rango_mora.min()","b2671479":"auxRcc[\"rango_mora\"] = auxRcc[\"rango_mora\"].fillna(0).astype(int)\nmoraValues = auxRcc.rango_mora.drop_duplicates().values\n\nauxRccRangoMora = auxRcc.groupby(\"id_persona\").agg({\"rango_mora\": \"max\", \"mto_saldo\": \"mean\"}).join(auxRcc.groupby(\"id_persona\").cod_banco.nunique())\nauxRccRangoMora = auxRccRangoMora.join(auxRcc.groupby(\"id_persona\").producto.nunique())\n","aadea973":"reniecColumns = reniec.columns[2:-1]\nreniecDummies = pd.concat([pd.get_dummies(reniec.set_index(\"id_persona\")[col]) for col in reniecColumns], axis=1, keys=reniecColumns)\nreniecDummies.columns = [col[0]+\"_\"+str(col[1]) for col in reniecDummies.columns]\nreniecDummies\n\nreniec.set_index(\"id_persona\").join(reniecDummies).drop(columns = reniecColumns)","c074daa5":"vehicular.marca.value_counts().to_frame().sort_values(by = \"marca\", ascending = False).head(50)","dcbf2417":"vehicular1 = vehicular.groupby([\"id_persona\", \"marca\"]).veh_var1.sum().unstack(level=1, fill_value=0).astype(\"float32\")\nvehicular1.columns = [c + \"_v1\" for c in vehicular1.columns]\n\nvehicular2 = vehicular.groupby([\"id_persona\", \"marca\"]).veh_var1.sum().unstack(level=1, fill_value=0).astype(\"float32\")\nvehicular2.columns = [c + \"_v2\" for c in vehicular2.columns]","8d0e90ce":"<h2>Campos de base_reniec.csv<\/h2>\n<li><strong>base_reniec.csv<\/strong><\/li>\n<ul>\n<li><strong>soc_var1<\/strong> - variable sociodemogr\u00e1fica 1<\/li>\n<li><strong>soc_var2<\/strong> - variable sociodemogr\u00e1fica 2<\/li>\n<li><strong>soc_var3<\/strong> - variable sociodemogr\u00e1fica 3<\/li>\n<li><strong>soc_var4<\/strong> - variable sociodemogr\u00e1fica 4<\/li>\n<li><strong>soc_var5<\/strong> - variable sociodemogr\u00e1fica 5<\/li>\n<li><strong>soc_var6<\/strong> - variable sociodemogr\u00e1fica 6<\/li>\n<\/ul>","634f8d27":"<h2>Campos de base_vehicular.csv<\/h2>\n<li><strong>base_vehicular.csv<\/strong><\/li>\n<ul>\n<li><strong>marca<\/strong> - marca del vehiculo<\/li>\n<li><strong>veh_var1<\/strong> - variable vehicular 1<\/li>\n<li><strong>veh_var2<\/strong> - variable vehicular 2<\/li>\n<\/ul>\n<\/ol>","eba3dc69":"<h2>Campos de base_rcc.csv<\/h2>\n<li><strong>base_rcc.csv<\/strong><\/li>\n<ul>\n<li><strong>cod_banco<\/strong> - entidad financiera con la que el cliente tiene un saldo<\/li>\n<li><strong>producto<\/strong> - producto que el cliente tiene en la entidad<\/li>\n<li><strong>clasif<\/strong> - clasificacion de riesgo en dicho producto-entidad<\/li>\n<li><strong>mto_saldo<\/strong> - saldo que tiene en dicho producto-entidad<\/li>\n<li><strong>rango_mora<\/strong> - rango de sus dias de mora en el producto-entidad<\/li>\n<\/ul>","96c99f93":"<h2>Campos de base_digital.csv<\/h2>\n<li><strong>base_digital.csv<\/strong><\/li>\n<ul>\n<li><strong>simu_prestamo<\/strong> - numero de veces en el dia en que el cliente utiliz\u00f3 el simulador de pr\u00e9stamos<\/li>\n<li><strong>benefit<\/strong> - numero de veces en el dia en que el cliente ingres\u00f3 a la pagina de interbank benefit<\/li>\n<li><strong>email<\/strong> - numero de veces en el dia en que el cliente arrib\u00f3 al sitio a traves de email<\/li>\n<li><strong>facebook<\/strong> - numero de veces en el dia en que el cliente arrib\u00f3 al sitio a traves de facebook<\/li>\n<li><strong>goog<\/strong> - numero de veces en el dia en que el cliente arrib\u00f3 al sitio a traves de google<\/li>\n<li><strong>youtb<\/strong> - numero de veces en el dia en que el cliente arrib\u00f3 al sitio a traves de youtube<\/li>\n<li><strong>compb<\/strong> - numero de veces en el dia en que el cliente arrib\u00f3 al sitio a traves de comparabien<\/li>\n<li><strong>movil<\/strong> - numero de sesiones iniciadas en el movil<\/li>\n<li><strong>desktop<\/strong> - numero de sesiones iniciadas en desktop<\/li>\n<li><strong>n_rep30<\/strong> - si ha tenido una sesion en los 30 dias previos<\/li>\n<li><strong>recencia<\/strong> - variable categorica que indica hace cuanto fue su ultima sesion, donde 100 = primera sesion.<\/li>\n<li><strong>lima_dig<\/strong> - si tuvo una visita desde lima<\/li>\n<li><strong>provincia_dig<\/strong> - si tuvo una visita desde provincia<\/li>\n<li><strong>extranjero_dig<\/strong> - si tuvo una visita desde el extranjero<\/li>\n<li><strong>time_ctasimple<\/strong> - tiempo visitanto p\u00e1ginas referentes a cuenta simple<\/li>\n<li><strong>time_mllp<\/strong> - tiempo visitanto p\u00e1ginas referentes a cuenta millonaria premia<\/li>\n<li><strong>time_mllst<\/strong> - tiempo visitanto p\u00e1ginas referentes a cuenta millonaria super tasa<\/li>\n<li><strong>time_ctasld<\/strong> - tiempo visitanto p\u00e1ginas referentes a cuenta sueldo<\/li>\n<li><strong>time_tc<\/strong> - tiempo visitanto p\u00e1ginas referentes a tarjeta de credito<\/li>\n<li><strong>n_sesion<\/strong> - numero de sesiones en el dia<\/li>\n<li><strong>busqtc<\/strong> - utilizo el buscador para buscar informaci\u00f3n de TC<\/li>\n<li><strong>busqvisa<\/strong> - utilizo el buscador para buscar informaci\u00f3n devisa<\/li>\n<li><strong>busqamex<\/strong> - utilizo el buscador para buscar informaci\u00f3n de american express<\/li>\n<li><strong>busqmc<\/strong> - utilizo el buscador para buscar informaci\u00f3n de master card<\/li>\n<li><strong>busqcsimp<\/strong> - utilizo el buscador para buscar informaci\u00f3n de cuenta simple<\/li>\n<li><strong>busqmll<\/strong> - utilizo el buscador para buscar informaci\u00f3n de cuenta millonaria<\/li>\n<li><strong>busqcsld<\/strong> - utilizo el buscador para buscar informaci\u00f3n de cuenta sueldo<\/li>\n<li><strong>busq<\/strong> - utilizo el buscador<\/li>\n<li><strong>n_pag<\/strong> - numero de paginas visitadas en el dia<\/li>\n<li><strong>android<\/strong> - Si uso android cual es su sistema operativo<\/li>\n<li><strong>iphone<\/strong> - si uso iphone cual fue su sistema operativo<\/li>\n<\/ul>","7c5f5dff":"<h2>Campos de base_inicial.csv<\/h2>\n<ol>\n<li><strong>base_inicial.csv<\/strong><\/li>\n<ul>\n<li><strong>codtarget<\/strong> - indica si el cliente contactado adquiri\u00f3 una TC en el mes<\/li>\n<li><strong>margen<\/strong> - rentabilidad esperada de ese cliente menos los costos de gestion<\/li>\n<li><strong>cem<\/strong> - capacidad de endeudamiento<\/li>\n<li><strong>ingreso_neto<\/strong> - ingreso estimado<\/li>\n<li><strong>lines_ofrecida<\/strong> - linea ofertada<\/li>\n<\/ul>"}}