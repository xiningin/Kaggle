{"cell_type":{"c6e71a50":"code","8037bce5":"code","102a6d9a":"code","754711bd":"code","1741867d":"code","8eb838f4":"code","76d08fc3":"code","e9ae3b9d":"code","5e396117":"code","c18b0b13":"code","3e88c40a":"code","7c33f316":"code","d81dcdca":"code","e569a4e3":"code","c9601d5c":"code","62a93b38":"code","1be6bd08":"code","a48f48d5":"code","dcef8ad2":"code","1af71192":"code","c85114f3":"markdown"},"source":{"c6e71a50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8037bce5":"#Reading train and test data\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","102a6d9a":"print(\"Train data shape: \",train.shape)\nprint(\"Test data shape: \",test.shape)","754711bd":"#Class count\ncount_class_0, count_class_1 = train.target.value_counts()\nprint(\"Count of class 0\", count_class_0)\nprint(\"Count of class 1\", count_class_1)\n\nclass_0 = train[train['target'] == 0]\nclass_1 = train[train['target'] == 1]\nprint(class_0.shape)\nprint(class_1.shape)","1741867d":"train.head()","8eb838f4":"test.head()","76d08fc3":"import nltk\nfrom nltk.corpus import stopwords\nimport re","e9ae3b9d":"#Remove bad symbols and stopwords from test and train data\nREPLACE_BY_SPACE_RE = re.compile('[\/(){}\\[\\]\\|@,;]')\nBAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')\nSTOPWORDS = set(stopwords.words('english'))\n\ndef text_prepare(text):\n    \"\"\"\n        text: a string\n        \n        return: modified initial string\n    \"\"\"\n    text = text.lower()   # lowercase text\n    text = REPLACE_BY_SPACE_RE.sub(\" \", text)     # replace REPLACE_BY_SPACE_RE symbols by space in text\n    text = BAD_SYMBOLS_RE.sub(\"\", text)     # delete symbols which are in BAD_SYMBOLS_RE from text\n    \n    \n    resultwords = [word for word in text.split() if word not in STOPWORDS]  # delete stopwords from text\n    text = ' '.join(resultwords)\n    \n    return text","5e396117":"\nX_train_class_0 = class_0['question_text'].values\nX_train_class_1 = class_1['question_text'].values","c18b0b13":"X_train_class_0 = [text_prepare(x) for x in X_train_class_0]\nX_train_class_1 = [text_prepare(x) for x in X_train_class_1]","3e88c40a":"#Word counts of n-grams of both the classes\nfrom nltk.util import ngrams\nfrom collections import Counter\nwords_counts_class_0_unigram = Counter()\nwords_counts_class_1_unigram = Counter()\nwords_counts_class_0_bigram = Counter()\nwords_counts_class_1_bigram = Counter()\nwords_counts_class_0_trigram = Counter()\nwords_counts_class_1_trigram = Counter()\n\nfor sentence in X_train_class_0:\n  token = [word for word in sentence.split()]\n  words_counts_class_0_unigram.update(x for x in ngrams(token, 1))\n  words_counts_class_0_bigram.update(x for x in ngrams(token, 2))\n  words_counts_class_0_trigram.update(x for x in ngrams(token, 3))\n\nfor sentence in X_train_class_1:\n  token = [word for word in sentence.split()]\n  words_counts_class_1_unigram.update(x for x in ngrams(token, 1))\n  words_counts_class_1_bigram.update(x for x in ngrams(token, 2))\n  words_counts_class_1_trigram.update(x for x in ngrams(token, 3))\n","7c33f316":"words_counts_class_0_unigram.most_common(10)","d81dcdca":"words_counts_class_1_unigram.most_common(10)","e569a4e3":"words_counts_class_0_bigram.most_common(10)","c9601d5c":"words_counts_class_1_bigram.most_common(10)","62a93b38":"words_counts_class_0_trigram.most_common(10)","1be6bd08":"words_counts_class_1_trigram.most_common(10)","a48f48d5":"print('Average character length of Sincere questions in train is {0:.0f}.'.format(np.mean(class_0['question_text'].apply(lambda x: len(x)))))\nprint('Average character length of Insincere questions in train is {0:.0f}.'.format(np.mean(class_1['question_text'].apply(lambda x: len(x)))))","dcef8ad2":"print('Average word length of Sincere questions in train is {0:.0f}.'.format(np.mean(class_0['question_text'].apply(lambda x: len(x.split())))))\nprint('Average word length of Insincere questions in train is {0:.0f}.'.format(np.mean(class_1['question_text'].apply(lambda x: len(x.split())))))","1af71192":"print('Max word length of Sincere questions in train is {0:.0f}.'.format(np.max(class_0['question_text'].apply(lambda x: len(x.split())))))\nprint('Max word length of Insincere questions in train is {0:.0f}.'.format(np.max(class_1['question_text'].apply(lambda x: len(x.split())))))","c85114f3":"Data is highly biased as approx ~6% values belongs to class 1(Insincere) only, rest belongs to class 0(Sincere)."}}