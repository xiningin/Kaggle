{"cell_type":{"59bf2f4f":"code","7e75b552":"code","48ac1868":"code","5e09e67b":"code","0dc84dff":"code","2acab1d1":"code","d6220917":"code","6ba730e4":"code","228bac32":"code","e0286646":"code","66557f69":"code","57bb5e7f":"code","2f0528d9":"code","45990fe2":"code","97ae18ab":"code","7fcdf330":"code","1b51ac46":"code","d9f0f1c7":"code","03481bce":"code","f591ccd1":"code","733d9d2f":"code","58dd09d5":"markdown"},"source":{"59bf2f4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/working\"))\n\n# Any results you write to the current directory are saved as output.","7e75b552":"#!ls ..\/hack input\/flower_data\/flower_data\/\n#!ls ..\/input\/hackathon-blossom-flower-classification\/\n# !ls ..\/input\/hackathon-blossom-flower-classification\/flower_data\/flower_data\/train","48ac1868":"from __future__ import print_function\nfrom __future__ import division\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nimport torchvision\nfrom torchvision import datasets, models, transforms\nimport matplotlib.pyplot as plt\nimport time\nimport os\nimport copy\nimport json\nprint(\"PyTorch Version: \",torch.__version__)\nprint(\"Torchvision Version: \",torchvision.__version__)","5e09e67b":"# Top level data directory. Here we assume the format of the directory conforms\n#   to the ImageFolder structure\ndata_dir = \"..\/input\/hackathon-blossom-flower-classification\/flower_data\/flower_data\/\"\ntest_data_dir = \"..\/input\/hackathon-blossom-flower-classification\/\"\n\n# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]\nmodel_name = \"inception\"\n\n# Number of classes in the dataset\nnum_classes = 102\n\n# Batch size for training (change depending on how much memory you have)\nbatch_size = 16\n\n# Number of epochs to train for\nnum_epochs = 15\n\n# Flag for feature extracting. When False, we finetune the whole model,\n#   when True we only update the reshaped layer params\nfeature_extract = False","0dc84dff":"def train_model(model, dataloaders, criterion, optimizer, num_epochs=25, is_inception=False):\n    since = time.time()\n\n    val_acc_history = []\n\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_acc = 0.0\n\n    for epoch in range(num_epochs):\n        print('Epoch {}\/{}'.format(epoch, num_epochs - 1))\n        print('-' * 10)\n\n        # Each epoch has a training and validation phase\n        for phase in ['train', 'valid']:\n            if phase == 'train':\n                model.train()  # Set model to training mode\n            else:\n                model.eval()   # Set model to evaluate mode\n\n            running_loss = 0.0\n            running_corrects = 0\n\n            # Iterate over data.\n            for inputs, labels in dataloaders[phase]:\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n\n                # zero the parameter gradients\n                optimizer.zero_grad()\n\n                # forward\n                # track history if only in train\n                with torch.set_grad_enabled(phase == 'train'):\n                    # Get model outputs and calculate loss\n                    # Special case for inception because in training it has an auxiliary output. In train\n                    #   mode we calculate the loss by summing the final output and the auxiliary output\n                    #   but in testing we only consider the final output.\n                    if is_inception and phase == 'train':\n                        # From https:\/\/discuss.pytorch.org\/t\/how-to-optimize-inception-model-with-auxiliary-classifiers\/7958\n                        outputs, aux_outputs = model(inputs)\n                        loss1 = criterion(outputs, labels)\n                        loss2 = criterion(aux_outputs, labels)\n                        loss = loss1 + 0.4*loss2\n                    else:\n                        outputs = model(inputs)\n                        loss = criterion(outputs, labels)\n\n                    _, preds = torch.max(outputs, 1)\n\n                    # backward + optimize only if in training phase\n                    if phase == 'train':\n                        loss.backward()\n                        optimizer.step()\n\n                # statistics\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n\n            epoch_loss = running_loss \/ len(dataloaders[phase].dataset)\n            epoch_acc = running_corrects.double() \/ len(dataloaders[phase].dataset)\n\n            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))\n\n            # deep copy the model\n            if phase == 'valid' and epoch_acc > best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict())\n            if phase == 'valid':\n                val_acc_history.append(epoch_acc)\n\n        print()\n\n    time_elapsed = time.time() - since\n    print('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed \/\/ 60, time_elapsed % 60))\n    print('Best val Acc: {:4f}'.format(best_acc))\n\n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    return model, val_acc_history","2acab1d1":"def set_parameter_requires_grad(model, feature_extracting):\n    if feature_extracting:\n        for param in model.parameters():\n            param.requires_grad = False","d6220917":"def initialize_model(model_name, num_classes, feature_extract, use_pretrained=True):\n    # Initialize these variables which will be set in this if statement. Each of these\n    #   variables is model specific.\n    model_ft = None\n    input_size = 0\n\n    if model_name == \"resnet\":\n        \"\"\" Resnet18\n        \"\"\"\n        model_ft = models.resnet18(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.fc.in_features\n        model_ft.fc = nn.Linear(num_ftrs, num_classes)\n        input_size = 224\n\n    elif model_name == \"alexnet\":\n        \"\"\" Alexnet\n        \"\"\"\n        model_ft = models.alexnet(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.classifier[6].in_features\n        model_ft.classifier[6] = nn.Linear(num_ftrs,num_classes)\n        input_size = 224\n\n    elif model_name == \"vgg\":\n        \"\"\" VGG11_bn\n        \"\"\"\n        model_ft = models.vgg11_bn(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.classifier[6].in_features\n        model_ft.classifier[6] = nn.Linear(num_ftrs,num_classes)\n        input_size = 224\n\n    elif model_name == \"squeezenet\":\n        \"\"\" Squeezenet\n        \"\"\"\n        model_ft = models.squeezenet1_0(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        model_ft.classifier[1] = nn.Conv2d(512, num_classes, kernel_size=(1,1), stride=(1,1))\n        model_ft.num_classes = num_classes\n        input_size = 224\n\n    elif model_name == \"densenet\":\n        \"\"\" Densenet\n        \"\"\"\n        model_ft = models.densenet121(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.classifier.in_features\n        model_ft.classifier = nn.Linear(num_ftrs, num_classes)\n        input_size = 224\n\n    elif model_name == \"inception\":\n        \"\"\" Inception v3\n        Be careful, expects (299,299) sized images and has auxiliary output\n        \"\"\"\n        model_ft = models.inception_v3(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        # Handle the auxilary net\n        num_ftrs = model_ft.AuxLogits.fc.in_features\n        model_ft.AuxLogits.fc = nn.Linear(num_ftrs, num_classes)\n        # Handle the primary net\n        num_ftrs = model_ft.fc.in_features\n        model_ft.fc = nn.Linear(num_ftrs,num_classes)\n        input_size = 299\n\n    else:\n        print(\"Invalid model name, exiting...\")\n        exit()\n\n    return model_ft, input_size\n\n# Initialize the model for this run\nmodel_ft, input_size = initialize_model(model_name, num_classes, feature_extract, use_pretrained=True)\n\n# Print the model we just instantiated\nprint(model_ft)","6ba730e4":"# Data augmentation and normalization for training\n# Just normalization for validation\ndata_transforms = {\n    'train': transforms.Compose([\n        transforms.RandomResizedCrop(input_size),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ]),\n    'valid': transforms.Compose([\n        transforms.Resize(input_size),\n        transforms.CenterCrop(input_size),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ]),\n    'test set': transforms.Compose([\n        transforms.Resize(input_size),\n        transforms.CenterCrop(input_size),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ]),\n}\n\nprint(\"Initializing Datasets and Dataloaders...\")\n\n# Create training and validation datasets\nimage_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x]) for x in ['train', 'valid']}\n# Create training and validation dataloaders\ndataloaders_dict = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=batch_size, shuffle=True, num_workers=4) for x in ['train', 'valid']}\n\ntest_image_datasets = {x: datasets.ImageFolder(os.path.join(test_data_dir, x), data_transforms[x]) for x in ['test set']}\ntest_dataloaders_dict = {x: torch.utils.data.DataLoader(test_image_datasets[x], batch_size=batch_size, shuffle=False, num_workers=4) for x in ['test set']}\n\n# Detect if we have a GPU available\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","228bac32":"# Send the model to GPU\nmodel_ft = model_ft.to(device)\n\n# Gather the parameters to be optimized\/updated in this run. If we are\n#  finetuning we will be updating all parameters. However, if we are\n#  doing feature extract method, we will only update the parameters\n#  that we have just initialized, i.e. the parameters with requires_grad\n#  is True.\nparams_to_update = model_ft.parameters()\nprint(\"Params to learn:\")\nif feature_extract:\n    params_to_update = []\n    for name,param in model_ft.named_parameters():\n        if param.requires_grad == True:\n            params_to_update.append(param)\n            print(\"\\t\",name)\nelse:\n    for name,param in model_ft.named_parameters():\n        if param.requires_grad == True:\n            print(\"\\t\",name)\n\n# Observe that all parameters are being optimized\noptimizer_ft = optim.SGD(params_to_update, lr=0.001, momentum=0.9)","e0286646":"def save_checkpoint():\n    checkpoint = {\n        'model':model_ft, \n        'state_dict':model_ft.state_dict(),\n        'optimizer':optimizer_ft.state_dict()\n    }\n    torch.save(checkpoint, '..\/working\/checkpoint.pt')\ndef load_checkpoint(filepath, inference = False):\n    checkpoint = torch.load(filepath + 'checkpoint.pt')\n    model = checkpoint['model']\n    if inference:\n        for parameter in model.parameter():\n            parameter.require_grad = False\n        model.eval()\n    model.to(device)\n    return model\n        ","66557f69":"# Setup the loss fxn\ncriterion = nn.CrossEntropyLoss()\n\n# Train and evaluate\nmodel_ft, hist = train_model(model_ft, dataloaders_dict, criterion, optimizer_ft, num_epochs=25, is_inception=(model_name==\"inception\"))","57bb5e7f":"save_checkpoint()\nm_ft = model_ft","2f0528d9":"model_ft = load_checkpoint(filepath = '..\/working\/')\nmodel_ft","45990fe2":"#model_save_name = 'classifier_inception.pt'\n#path = \"..\/model_save_name\" \ntorch.save(model_ft.state_dict(), '..\/classifier_inception.pt')","97ae18ab":"import json\ndata=json.loads(open('..\/input\/hackathon-blossom-flower-classification\/cat_to_name.json').read())\n#data","7fcdf330":"def send_name(image_id):\n    for im_id in data.keys():\n        #print(im_id)\n        if im_id == str(image_id):\n            name = data[im_id]\n            return name","1b51ac46":"image_names = []\nfor i in test_dataloaders_dict['test set'].dataset.imgs:\n    image_names.append(i[0].split('\/')[-1])\n#image_names    \n#test_dataloaders_dict['test set'].dataset.imgs","d9f0f1c7":"output = []\nflower_name = []\nfor inputs, labels in test_dataloaders_dict['test set']:\n    inputs = inputs.to(device)\n    labels = labels.to(device)\n    outputs = model_ft(inputs)\n    _, predicted = torch.max(outputs, 1)\n    for i in predicted:\n        #print(i)\n        #print(send_name(int(i)))\n        flower_name.append(send_name(int(i)))\n        output.append(int(i))","03481bce":"df = pd.DataFrame()\ndf['image_name'] = image_names\ndf['output'] = output\ndf['flower_name'] = flower_name\ndf\ndf.to_csv('submission.csv')","f591ccd1":"with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n    print(df)","733d9d2f":"#from IPython.display import FileLink, FileLinks\n#FileLinks('.') #lists all downloadable files on server","58dd09d5":"\n### Author : Khushkumar Patel\n### Slack ID : @Khush\n### ----------\n### Model Used Name : Inception\nI have used Inceptionv3 because it has more complex and more layes than anyother. And this will give better accuracy. Moreover, It works totally fine with Problems like Overfitting. \n\nA type of regularizing component added to the loss formula that prevents the network from becoming too confident about a class. Prevents over fitting\n\nInception work with 300px where as all other are working as 224px data. So images are trained full without lossing more data. \n\nCrossEntropyLoss and SGD works very perfectly with Inception so here I used it. \n### ----------\n### criterion = CrossEntropyLoss\n### optimizer = SGD"}}