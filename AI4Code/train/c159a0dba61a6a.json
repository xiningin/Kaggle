{"cell_type":{"92d6e7cf":"code","3dfc828b":"code","b156d750":"code","1db4ed78":"code","6cfca3e4":"code","ed41f9f4":"code","5a6bdc1f":"code","aab31203":"code","aa3c8a80":"code","9937c81b":"code","eae64436":"code","2eb0b752":"code","c64a22fe":"code","64634d02":"code","04d981e9":"code","2dcdbf83":"code","0a841762":"code","8e0bd2d0":"code","ef21f1e2":"code","66a120f0":"code","af80a9bf":"code","532b6b19":"code","7f58db99":"code","8660a5f0":"code","338e3a55":"markdown","49ec7669":"markdown","a714fc3d":"markdown","30ced437":"markdown","aad01b03":"markdown","3bc41d42":"markdown","73e1c87c":"markdown","3d872748":"markdown","df701133":"markdown","0437ce78":"markdown","27db7edd":"markdown","4828acca":"markdown","33ab2553":"markdown","3643c306":"markdown","0514cb4b":"markdown","6056173c":"markdown","d9dff904":"markdown","7566362e":"markdown","0d0705d3":"markdown"},"source":{"92d6e7cf":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nimport json\nimport numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\ncolor = sns.color_palette()\n\n%matplotlib inline\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\nfrom IPython.display import HTML, display\nimport tabulate\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()","3dfc828b":"def load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df","b156d750":"%%time\ntrain_df = load_df()\ntest_df = load_df(\"..\/input\/test.csv\")","1db4ed78":"print('size of training data : ', train_df.shape)\nprint('size of testing data  : ', test_df.shape)","6cfca3e4":"train_df.head()","ed41f9f4":"train_df.columns.values","5a6bdc1f":"test_df.head()","aab31203":"test_df.columns.values","aa3c8a80":"total = train_df.isnull().sum().sort_values(ascending = False)\npercent = (train_df.isnull().sum() \/ train_df.isnull().count()*100).sort_values(ascending = False)\nmissing_application_train_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_application_train_data.head(20)","9937c81b":"temp1 = train_df['trafficSource.campaignCode'].value_counts()\n\ntrace1 = go.Bar(\n    x = temp1.index,\n    y = temp1 ,\n)\n\ndata = [trace1]\n\nlayout = go.Layout(\n    title = \"Campaign code for training data\",\n    xaxis=dict(\n        title='Campaign codes',\n        domain=[0, 0.5]\n    ),\n    \n    yaxis=dict(\n        title='Count of Campaign codes '\n        \n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='Campaign code')","eae64436":"train_df['trafficSource.campaignCode'].value_counts()","2eb0b752":"transactionRevenue = train_df['totals.transactionRevenue'].value_counts()\nprint(transactionRevenue.head())\nlen(transactionRevenue)","c64a22fe":"temp1 = train_df['trafficSource.adwordsClickInfo.page'].value_counts()\ntemp2 = test_df['trafficSource.adwordsClickInfo.page'].value_counts()\n\n\ntrace1 = go.Bar(\n    x = temp1.index,\n    y = temp1,\n   \n)\ntrace2 = go.Bar(\n    x = temp2.index,\n    y = temp2 \n    \n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n    title = \"Page # where the ad was shown for training data\",\n    width = 900,\n    xaxis=dict(\n        title='Page #',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    \n    yaxis=dict(\n        title='# of instances',  \n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","64634d02":"print(train_df['trafficSource.adwordsClickInfo.page'].value_counts())\nprint(test_df['trafficSource.adwordsClickInfo.page'].value_counts())","04d981e9":"temp1 = train_df['trafficSource.adwordsClickInfo.adNetworkType'].value_counts()\ntemp2 = test_df['trafficSource.adwordsClickInfo.adNetworkType'].value_counts()\n\n\ntrace1 = go.Bar(\n    x = temp1.index,\n    y = temp1,\n    name = 'train'\n   \n)\ntrace2 = go.Bar(\n    x = temp2.index,\n    y = temp2,\n    name = 'test'\n    \n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n    title = \"Page # where the ad was shown for training data\",\n    width = 900,\n    xaxis=dict(\n        title='Page #',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    \n    yaxis=dict(\n        title='# of instances',  \n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","2dcdbf83":"print(train_df['trafficSource.adwordsClickInfo.adNetworkType'].value_counts())\nprint(test_df['trafficSource.adwordsClickInfo.adNetworkType'].value_counts())","0a841762":"temp1 = train_df['trafficSource.adwordsClickInfo.slot'].value_counts()\ntemp2 = test_df['trafficSource.adwordsClickInfo.slot'].value_counts()\n\n\ntrace1 = go.Bar(\n    x = temp1.index,\n    y = temp1,\n    name = 'train'\n   \n)\ntrace2 = go.Bar(\n    x = temp2.index,\n    y = temp2,\n    name = 'test'\n    \n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n    title = \"Page # where the ad was shown for training data\",\n    width = 900,\n    xaxis=dict(\n        title='Page #',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    \n    yaxis=dict(\n        title='# of instances',  \n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","8e0bd2d0":"print(train_df['trafficSource.adwordsClickInfo.slot'].value_counts())\nprint(test_df['trafficSource.adwordsClickInfo.slot'].value_counts())\n","ef21f1e2":"print(train_df['trafficSource.adwordsClickInfo.isVideoAd'].value_counts())\nprint(test_df['trafficSource.adwordsClickInfo.isVideoAd'].value_counts())","66a120f0":"print(train_df['trafficSource.isTrueDirect'].value_counts())\nprint(test_df['trafficSource.isTrueDirect'].value_counts())\n","af80a9bf":"#print(train_df['trafficSource.referralPath'].value_counts())\n#print(test_df['trafficSource.referralPath'].value_counts())","532b6b19":"# print(train_df['trafficSource.keyword'].value_counts())\n# print(test_df['trafficSource.keyword'].value_counts())","7f58db99":"print(train_df['totals.bounces'].value_counts())\nprint(test_df['totals.bounces'].value_counts())","8660a5f0":"print(train_df['totals.newVisits'].value_counts())\nprint(test_df['totals.newVisits'].value_counts())","338e3a55":"<h3> <span style=\"color:,brown\">**Feature # 11 : totals.newVisits : ** <\/span><\/h3>\n\n**Description : **\n\nTotal number of new users in session (for convenience). If this is the first visit, this value is 1, otherwise it is null.\n\n**Recomendation :** \n\nreplace all NaN's with _0_","49ec7669":"<h3> <span style=\"color:,brown\">**Feature # 2 : totals.transactionRevenue :** <\/span><\/h3>\n\n**Description :** \nTotal transaction revenue, expressed as <span style=\"color:,blue\">the value passed to Analytics multiplied by 10^6. *(e.g., 2.40 would be given as 2400000).<\/span>\n\n**Analysis : **\n\nNow This is the Target attribute . \n\n**Recomendation :** 5332 datapoints has valid numerical values and rest all datapoints can be populated with value 0_\n","a714fc3d":"** Train Data snippets : **","30ced437":"**Objective of the notebook:**\n\nIn this notebook, We will analyze the data and try to perform simple data analysis around Missing values in the data set\n\n**Objective of the competition:**\n\nIn this competition, we a\u2019re challenged to analyze a Google Merchandise Store (also known as GStore, where Google swag is sold) customer dataset to predict revenue per customer.","aad01b03":"<h3> <span style=\"color:,brown\">**Feature # 10 : totals.bounces : ** <\/span><\/h3>\n\n**Description : **\nTotal bounces (If the user leave the site rather than continuing on the site). For a bounced session, the value is 1, otherwise it is null.\n\n**Analysis ** \n\n**[Bounce rate](https:\/\/en.wikipedia.org\/wiki\/Bounce_rate)** is an Internet marketing term used in web traffic analysis. It represents the percentage of visitors who enter the site and then leave (\"bounce\") rather than continuing to view other pages within the same site. Bounce rate is basically calculated on how much time a person spends on your site.\n\n**Recomendation ** \n\nReplace all NaN's with _0_","3bc41d42":"<h3> <span style=\"color:,brown\">**Feature # 4 : trafficSource.adwordsClickInfo.adNetworkType :** <\/span><\/h3>\n\n**Description :** \n\nNetwork Type. Takes one of the following values: {\u201cGoogle Search\", \"Content\", \"Search partners\", \"Ad Exchange\", \"Yahoo Japan Search\", \"Yahoo Japan AFS\", \u201cunknown\u201d}\n\n**Analysis : **\n\nTrain dataframe contains *** Google Search and Search partners *** (Content class is missing in training data). \nTest dataframe contains *** Content, Google Search and Search partners. ***\n\n**Recomendation :**  _Not sure how to handle \"content\" ._ \n    We may need to bin the whole data into 2 bins \n    \n        1) Google Search and \n        \n        2) Others ","73e1c87c":"**Column names for testing data**","3d872748":"<h3> <span style=\"color:,brown\">**Feature # 8 : trafficSource.referralPath : **<\/span><\/h3>\n\n**Description : **\n\nIf trafficSource.medium is \"referral\", then this is set to the path of the referrer","df701133":"** Column names for training data ** ","0437ce78":"<h3> <span style=\"color:,brown\">**Feature # 3 : trafficSource.adwordsClickInfo.page :** <\/span><\/h3>\n\n**Description : ** \n\nPage number in search results where the ad was shown.\n\n**Analysis :**\n\nIn 21362 cases add was shown on 1st page, In 73 cases add was shown on 2nd page and so on.\n\n**Recomendation : ** _With my experience I never go beyond 3 \/ 4  pages of search results so this feature is a good candidate for binning._\n","27db7edd":"** Below statatistics shows that there are 8 columns with more than 97% missing values **\n\nNext task is to analyse the missing attribute and try to recommnd on imputing the missing values","4828acca":"<h3> <span style=\"color:,brown\">**Feature # 9 : trafficSource.keyword : ** <\/span><\/h3>\n\n**Description : **\n\nThe keyword of the traffic source, usually set when the trafficSource.medium is \"organic\" or \"cpc\".","33ab2553":"<h3> <span style=\"color:,brown\">**Feature # 6 : trafficSource.adwordsClickInfo.isVideoAd : ** <\/span><\/h3>\n\n**Description : **\n\nTrue if it is a Trueview video ad.\n \n**Analysis and Recomendation: **\n\nIn train and test Dataframe user can replace all NaN's with True.","3643c306":"<h3> <span style=\"color:,brown\">**Feature # 7 : trafficSource.isTrueDirect : ** <\/span><\/h3>\n\n**Description : **\n\nTrue if the source of the session was Direct (meaning the user typed the name of your website URL into the browser or came to your site via a bookmark), This field will also be true if 2 successive but distinct sessions have exactly the same campaign details. Otherwise NULL.\n\n**Analysis and Recomendation :**\n\nIn train and test Dataframe user can replace all NaN's with False.\n\n","0514cb4b":"*** Missing values assesment ***\n\nIn this section \n\n    [a] We will display the counts and percentage of missing value.\n    \n    [b] We will explore the attribites with missing values \n    \n    [c] We will try to explore if we can provide a recomendation for imputation of missing values.\n","6056173c":"<h3> <span style=\"color:,brown\">**Feature # 5 : trafficSource.adwordsClickInfo.slot :** <\/span><\/h3>\n\n**Description :*** \n\nPosition of the Ad. Takes one of the following values:{\u201cRHS\", \"Top\"}\n\n**Analysis : **\n\nAs per the document Top and RHS are the valid values but Test dataframe also contains Google Display Network, which may be an invalid entry. \n\n**Recomendation : **  We can replace all NaN's and Google Display Network with unique value class.","d9dff904":"**File Descriptions**\n\ntrain.csv - the training set - contains the same data as the BigQuery rstudio_train_set.\n\ntest.csv - the test set - contains the same data as the BigQuery rstudio_test_set.\n\n**Data Fields**\n\nfullVisitorId- A unique identifier for each user of the Google Merchandise Store.\n\nchannelGrouping - The channel via which the user came to the Store.\n\ndate - The date on which the user visited the Store.\n\ndevice - The specifications for the device used to access the Store.\n\ngeoNetwork - This section contains information about the geography of the user.\n\nsessionId - A unique identifier for this visit to the store.\n\nsocialEngagementType - Engagement type, either \"Socially Engaged\" or \"Not Socially Engaged\".\n\ntotals - This section contains aggregate values across the session.\n\ntrafficSource - This section contains information about the Traffic Source from which the session originated.\n\nvisitId - An identifier for this session. This is part of the value usually stored as the _utmb cookie. This is only unique to the user. For a completely unique ID, you should use a combination of fullVisitorId and visitId.\n\nvisitNumber - The session number for this user. If this is the first session, then this is set to 1.\n\nvisitStartTime - The timestamp (expressed as POSIX time).\n\n**Credit Note** : Using code from kernal [**Quick start: read csv and flatten json fields**](https:\/\/www.kaggle.com\/julian3833\/1-quick-start-read-csv-and-flatten-json-fields) by [Juli\u00e1n Peller1 ](https:\/\/www.kaggle.com\/julian3833)","7566362e":"** Train Data snippets : **","0d0705d3":"<h3> <span style=\"color:,brown\">**Feature # 1 : trafficSource.campaignCode** <\/span><\/h3>\n\n*** Description : *** \n\nValue of the utm_id campaign tracking parameter, **used for manual campaign tracking.**\n\n*** Analysis : ***\n\nIn Train dataframe trafficSource.campaignCode has value in only one cell as a result we can drop this attribute. \n \nIn Test dataframe trafficSource.campaignCode is not present.\n\n**Recomendation :**   We can plan to remove this feature."}}