{"cell_type":{"29047e49":"code","d39908c9":"code","6e33706a":"code","6fe0a651":"code","4fa3e4d6":"code","ef260be5":"code","75ca712a":"code","d21dcaf4":"code","83c79fcb":"code","7f911308":"code","2b36e09b":"code","e8b646b7":"code","4c6c8dd4":"code","4054687a":"code","cd89fcc9":"code","1943c9f7":"code","fb086ab8":"code","adcf45eb":"code","bb4a0fe6":"code","933afbf1":"code","421c300e":"code","9845b320":"code","7b623a5b":"markdown","436ccd38":"markdown","70dc17e3":"markdown","9b9a982c":"markdown","505ecc5f":"markdown","74c0bfac":"markdown","c429f3f5":"markdown","c0fddf17":"markdown","1f6b943d":"markdown","2a180c3d":"markdown","bc214747":"markdown","39a336ce":"markdown","f7d44ade":"markdown","ab1cb4c8":"markdown","6f31a06f":"markdown","9b73a2cb":"markdown","8cb5408b":"markdown","190fa819":"markdown","6c4a26e6":"markdown","a6a54062":"markdown","59d6be30":"markdown"},"source":{"29047e49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d39908c9":"import pandas as pd\n\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport seaborn as sns","6e33706a":"df = pd.read_csv(r'..\/input\/stocknews\/Combined_News_DJIA.csv')","6fe0a651":"df.head()","4fa3e4d6":"df.isnull().sum()","ef260be5":"df.dropna(inplace= True)","75ca712a":"df.isnull().sum()","d21dcaf4":"sns.countplot(x=df['Label'])","83c79fcb":"df_train = df[df['Date'] < '20150101']\ndf_test = df[df['Date'] > '20141231']","7f911308":"# function for cleaning the data\ndef clean_data(dataset):\n    data = dataset.iloc[:,2:27]\n    data.replace(\"[^a-zA-Z]\", \" \", regex=True, inplace=True)\n    return data\n\n# function for combining the headlines of all the columns into single column\ndef combine_data(data):\n    headlines = []\n    for i in range(len(data.index)):\n        headlines.append(' '.join(str(x) for x in data.iloc[i, :]))\n    return headlines\n\n# function to perform lemmatization of the word\ndef lemmatize_data(data, lemmatizer):\n    cleaned_dataset = []\n    for i in range(len(data)):\n        clean_text = data[i].lower()\n        clean_text = clean_text.split()\n        clean_text = [lemmatizer.lemmatize(word) for word in clean_text if word not in stopwords.words('english')]\n        cleaned_dataset.append(' '.join(clean_text))\n    return cleaned_dataset\n\n# function to vectorize the data\ndef vectorize_data(data, cv):\n    vectorized_dataset = cv.fit_transform(data)\n    return vectorized_dataset","2b36e09b":"# clean train and test data\nclean_train_data = clean_data(df_train)\nclean_test_data = clean_data(df_test)","e8b646b7":"# combine the headlines in single column\ncomb_train_data = combine_data(clean_train_data)\ncomb_test_data = combine_data(clean_test_data)","4c6c8dd4":"lemmatizer = WordNetLemmatizer()","4054687a":"# lemmatize data\ntrain_data = lemmatize_data(comb_train_data, lemmatizer)\ntest_data = lemmatize_data(comb_test_data, lemmatizer)","cd89fcc9":"cv = CountVectorizer(ngram_range=(2,2))","1943c9f7":"# vectorize data\nvec_train_data = vectorize_data(train_data, cv)\nvec_test_data = cv.transform(test_data)","fb086ab8":"# create classifier\nrf_clf = RandomForestClassifier(n_estimators=200, criterion='entropy')\nrf_clf.fit(vec_train_data, df_train['Label'])","adcf45eb":"# run precictions on test data\ny_pred = rf_clf.predict(vec_test_data)","bb4a0fe6":"from sklearn.metrics import classification_report, accuracy_score, confusion_matrix","933afbf1":"confusion_matrix(df_test['Label'], y_pred)","421c300e":"print(classification_report(df_test['Label'], y_pred))","9845b320":"print(accuracy_score(df_test['Label'], y_pred).round(2))","7b623a5b":"## Here we will define the functions for performing feature engineering","436ccd38":"# Check Accuracy","70dc17e3":"# Feature Engineering","9b9a982c":"We have null values for columns - 'Top23', 'Top24', and 'Top25'","505ecc5f":"# Visualize the distribution of target variable","74c0bfac":"# Vectorize the data","c429f3f5":"We will remove the rows that contain null values","c0fddf17":"# Predictions","1f6b943d":"# Create CountVectorizer object","2a180c3d":"# Read data","bc214747":"check for null values again","39a336ce":"# Combine headlines","f7d44ade":"# Perform necessary imports","ab1cb4c8":"# Create Random Forest Classifier","6f31a06f":"## If you found this notebook helpful. Please help me by upvoting this notebook. Thank you. All kind of suggestions are welcome. :)","9b73a2cb":"# Split the dataset into training and test data","8cb5408b":"# Clean train and test data","190fa819":"## Check for null values","6c4a26e6":"## Lemmatize the data","a6a54062":"# Create Lemmatizer object","59d6be30":"The dataset is balanced in terms of number of tagets"}}