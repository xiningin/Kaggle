{"cell_type":{"a4966a69":"code","267d8538":"code","82f26e50":"code","a15ccee3":"code","b682a469":"code","251b6111":"code","bdd92a45":"code","a6243a5e":"code","921581dd":"code","3a1a0e4d":"code","c2309be6":"code","dc9b9247":"code","6bfcb634":"code","58382753":"code","7b598704":"code","96873959":"code","33724ce9":"code","de849461":"code","a5e13b6e":"code","e7c0fcce":"code","39f3a925":"code","b8b16250":"code","e20d3dc1":"code","5129fdcd":"code","25654b18":"code","688132a6":"code","4b9b946b":"code","0406c24b":"code","d380082a":"code","df3b0cc6":"code","20534862":"code","d5d81c61":"code","34a506de":"code","0143bc82":"code","2d9cf61c":"code","f6f1f7b2":"code","8829e763":"code","1644d8b3":"code","64e0d803":"code","63e4af6a":"code","3d523397":"code","56c72b52":"code","ba453dd2":"code","b0749f3f":"code","616c8c0f":"code","e831ac81":"code","7ad02d17":"code","3ee3708d":"code","9e59718b":"code","cd6e942a":"code","04142cdd":"code","f8c832fb":"code","0c41cd6d":"code","f22084fa":"code","5ac37b96":"code","d8f392cb":"code","c91a55d2":"code","f2d6922b":"code","e54679cf":"code","5409d2f0":"code","be54db71":"code","f799ef71":"code","0926833d":"code","354eeb8e":"code","1fa842de":"code","32b3b6b0":"markdown","d49776a7":"markdown","2a1529fc":"markdown","52777761":"markdown","4eb2fb8d":"markdown","c260488e":"markdown","450a87ff":"markdown","e50b0541":"markdown","db864e61":"markdown","322e5e9f":"markdown","d744ea29":"markdown","5b9d8e0a":"markdown"},"source":{"a4966a69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","267d8538":"df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","82f26e50":"df.info()","a15ccee3":"df.head(2)","b682a469":"df.describe()","251b6111":"df.isnull().sum()","bdd92a45":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","a6243a5e":"plt.figure(figsize = (20,6))\nsns.heatmap(df.isnull(), cbar = False)","921581dd":"df.columns[df.isnull().mean() > 0.2]","3a1a0e4d":"df.drop(['Id','Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'], axis = 1, inplace = True)","c2309be6":"df.head(2)","dc9b9247":"plt.figure(figsize = (20,6))\nsns.heatmap(df.isnull(), cbar = False);","6bfcb634":"df.LotFrontage.isnull().sum()\/len(df.LotFrontage)","58382753":"corr = df.corr()","7b598704":"plt.figure(figsize=(30,15))\nsns.heatmap(corr, square=True, vmin = -1, vmax = 1,cmap = 'coolwarm', linewidths=.5);","96873959":"df.LotFrontage.fillna(df.LotFrontage.mean(), inplace = True)","33724ce9":"plt.figure(figsize = (20,6))\nsns.heatmap(df.isnull(), cbar = False);","de849461":"df.columns[df.isnull().sum() > 0]","a5e13b6e":"df[['MasVnrType', 'MasVnrArea', 'BsmtQual', 'BsmtCond', 'BsmtExposure',\n       'BsmtFinType1', 'BsmtFinType2', 'Electrical', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageQual', 'GarageCond']].isnull().sum()\/len(df[['MasVnrType', 'MasVnrArea', 'BsmtQual', 'BsmtCond', 'BsmtExposure',\n       'BsmtFinType1', 'BsmtFinType2', 'Electrical', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageQual', 'GarageCond']])","e7c0fcce":"df.dropna(inplace = True)","39f3a925":"df","b8b16250":"df.select_dtypes('object').columns","e20d3dc1":"df1 = pd.get_dummies(df, columns=['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'SaleType', 'SaleCondition'], drop_first=True)","5129fdcd":"print(df.columns.values)","25654b18":"print(df1.columns.values)","688132a6":"corr_matrix = df1.corr().abs()","4b9b946b":"upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))","0406c24b":"to_drop = [column for column in upper.columns if any(upper[column] > 0.70)]","d380082a":"to_drop.remove('SalePrice')","df3b0cc6":"to_drop","20534862":"df1.head(2)","d5d81c61":"train = df1.drop(to_drop,axis=1)","34a506de":"train.columns.values","0143bc82":"from sklearn.model_selection import train_test_split\nX = train.drop('SalePrice', axis = 1)\ny = train.SalePrice","2d9cf61c":"from sklearn.ensemble import RandomForestRegressor","f6f1f7b2":"RF = RandomForestRegressor()","8829e763":"RF.fit(X,y)","1644d8b3":"test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","64e0d803":"test.drop(['Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'], axis = 1, inplace = True)","63e4af6a":"test.LotFrontage.fillna(test.LotFrontage.mean(), inplace = True)","3d523397":"test.columns[test.isnull().sum() > 0]","56c72b52":"test.BsmtFullBath.dtype","ba453dd2":"test.GarageFinish.isnull().sum()","b0749f3f":"test.SaleType.value_counts()","616c8c0f":"test.MSZoning.fillna('RL', inplace = True)\ntest.Utilities.fillna('AllPub', inplace = True)\ntest.Exterior1st.fillna('VinylSd', inplace = True)\ntest.Exterior2nd.fillna('VinylSd', inplace = True)\ntest.MasVnrType.fillna('None', inplace = True)\ntest.MasVnrArea.fillna(test.MasVnrArea.mean(), inplace = True)\ntest.BsmtQual.fillna('TA', inplace = True)\ntest.BsmtCond.fillna('TA', inplace = True)\ntest.BsmtExposure.fillna('No', inplace = True)\ntest.BsmtFinType1.fillna('GLQ', inplace = True)\ntest.BsmtFinSF1.fillna(test.BsmtFinSF1.mean(), inplace = True)\ntest.BsmtFinType2.fillna('Unf', inplace = True) \ntest.BsmtFinSF2.fillna(test.BsmtFinSF2.mean(), inplace = True)\ntest.BsmtUnfSF.fillna(test.BsmtUnfSF.mean(), inplace = True)\ntest.TotalBsmtSF.fillna(test.TotalBsmtSF.mean(), inplace = True)\ntest.BsmtFullBath.fillna(0.0, inplace = True)\ntest.BsmtHalfBath.fillna(0.0, inplace = True)\ntest.KitchenQual.fillna('TA', inplace = True) \ntest.Functional.fillna('Typ', inplace = True)\ntest.GarageType.fillna('Attchd', inplace = True)\ntest.GarageYrBlt.fillna(2005, inplace = True)\ntest.GarageFinish.fillna('Unf', inplace = True) \ntest.GarageCars.fillna(2, inplace = True)\ntest.GarageArea.fillna(test.GarageArea.mean(), inplace = True)\ntest.GarageQual.fillna('TA', inplace = True)\ntest.GarageCond.fillna('TA', inplace = True)\ntest.SaleType.fillna('WD', inplace = True)","e831ac81":"test.info()","7ad02d17":"test.head(2)","3ee3708d":"test1 = pd.get_dummies(test, columns=['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'SaleType', 'SaleCondition'], drop_first=True)","9e59718b":"test1.head(2)","cd6e942a":"to_drop","04142cdd":"missing_cols = set( train.columns ) - set( test.columns )","f8c832fb":"extra_cols = set( test1.columns ) - set( train.columns )","0c41cd6d":"extra_cols","f22084fa":"test2 = test1.drop(extra_cols, axis = 1)","5ac37b96":"test2","d8f392cb":"missing_cols = set( train.columns ) - set( test2.columns )","c91a55d2":"missing_cols","f2d6922b":"for c in missing_cols:\n    test2[c] = 0","e54679cf":"test_final = test2[train.columns]","5409d2f0":"test_final.columns.values","be54db71":"train.columns.values","f799ef71":"test_final = test_final.drop('SalePrice', axis =1)","0926833d":"predictions = RF.predict(test_final)","354eeb8e":"outputRF = pd.DataFrame({'Id': test.Id, 'SalePrice': predictions})","1fa842de":"outputRF.to_csv('house_submission2.csv', index=False) ","32b3b6b0":"# 5. Partition Data","d49776a7":"# 4. Delete strong correlated columns","2a1529fc":"# 2.3 Treat missing values","52777761":"# 3 Create dummy variables","4eb2fb8d":"# 1. Start the project by doing exploratory data analysis","c260488e":"# 8. make predictions","450a87ff":"# 6. Build Model","e50b0541":"# 7. Handle Test Data","db864e61":"# 9. Output","322e5e9f":"# 2. Look for missing values","d744ea29":"# 2.1 Delete columns with missing values over 20%","5b9d8e0a":"# 2.2 Look for correlation"}}