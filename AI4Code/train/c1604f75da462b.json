{"cell_type":{"a4abbb33":"code","9631612f":"code","03e9a9f9":"code","9e9b4e4c":"code","2562da52":"code","3fafac86":"code","ef61a906":"code","5daecbef":"code","49c41672":"code","0c070edd":"code","33518355":"code","a3aebf18":"code","c7f62374":"code","8a174a35":"code","815f13a8":"code","7131793e":"code","df1d27d3":"code","8fc92461":"code","601856cc":"code","110743d4":"code","cb8d65e4":"code","2a39d487":"code","e03f3c68":"code","cc73eacf":"markdown","0b33703a":"markdown","8f15654a":"markdown","83cb8fca":"markdown","972ff3c0":"markdown","afb6f48b":"markdown","e13acf4d":"markdown","163ee704":"markdown","1106d8df":"markdown","3703f682":"markdown","69398e2f":"markdown","1acf4c27":"markdown","f0f77642":"markdown","989e9245":"markdown","141feb28":"markdown","497563e2":"markdown","7a2fbc97":"markdown","45f99725":"markdown","8c839fc0":"markdown"},"source":{"a4abbb33":"# Data Analysis \nimport numpy as np \nimport pandas as pd \n\n# Data Visualisation \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nprint(\"Modules Imported\")","9631612f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03e9a9f9":"# Check the current Directory\nos.getcwd()","9e9b4e4c":"# Import Covid19 Data \ncovid_data = pd.read_csv('..\/input\/covid19\/covid19_Confirmed_dataset.csv')\ncovid_data.shape","2562da52":"# Print the first 5 rows\ncovid_data.head()","3fafac86":"# Check unique countries \ncountries = list(covid_data['Country\/Region'].unique())\nprint(\"Number of Countries: \", len(countries))","ef61a906":"# Remove Lat, Long columns \ncovid_data.drop(['Lat', 'Long'], axis=1, inplace=True)\ncovid_data.shape","5daecbef":"# Group data by country \ncovid_data_agg = covid_data.groupby('Country\/Region').sum()\nprint(covid_data_agg.shape)","49c41672":"covid_data_agg.head()","0c070edd":"# Find the data for a particular country and plot it\ncovid_data_agg.loc['China'].plot()\ncovid_data_agg.loc['Italy'].plot()\ncovid_data_agg.loc['India'].plot()\nplt.legend()","33518355":"# Plot for the first n days\nn = 3\ncovid_data_agg.loc['China'][:n].plot()","a3aebf18":"covid_data_agg.loc['China'].diff().plot()","c7f62374":"# Calculate the maximum and minimum increase in the cases\nmax_inc = covid_data_agg.loc['China'].diff().max()\nmin_inc = covid_data_agg.loc['China'].diff().min()\n\nprint(\"Maximum Increase in a day:\", max_inc)\nprint(\"Minimum Increase in a day: \", min_inc)","8a174a35":"# Make a list of max infections for each country\nmax_infections = []\nfor c in countries: \n    max_infections.append(covid_data_agg.loc[c].diff().max())\n\n# Add to the data\ncovid_data_agg['max_infection_rate'] = max_infections","815f13a8":"# Create a new dataframe \ndf = pd.DataFrame(covid_data_agg['max_infection_rate'])\ndf.head()","7131793e":"# Load Happiness Report Data\nhappiness_data = pd.read_csv('..\/input\/covid19\/worldwide_happiness_report.csv')\nhappiness_data.shape","df1d27d3":"# Let's look at the first five rows \nhappiness_data.head()","8fc92461":"# List of useless columns \nuseless_cols = ['Overall rank', 'Score', 'Generosity', 'Perceptions of corruption']\n\n# Drop the useless cols \nhappiness_data.drop(useless_cols, inplace=True, axis=1)\nhappiness_data.shape","601856cc":"happiness_data.set_index('Country or region', inplace=True)","110743d4":"data = df.join(happiness_data, how='inner')\ndata.head()","cb8d65e4":"x = data['GDP per capita']\ny = data['max_infection_rate']\n\n# Make a scatter plot but due to the scale a logplot should be plotted\nsns.scatterplot(x, np.log(y))","2a39d487":"# Make a regression plot \n\nsns.regplot(x, np.log(y))","e03f3c68":"# Plot a correlation matrix and viualise it\nsns.heatmap(data.corr(), annot=True)","cc73eacf":"### Social Support vs Maximum Infection Rate","0b33703a":"#### Plot Data for a few dates\/days","8f15654a":"### Visualising Data For a Country ","83cb8fca":"#### Selecting the DataFrame with only the columns we need\n\nFor now, I am only selecting max_infection_rates. ","972ff3c0":"### Import the Covid19 Dataset ","afb6f48b":"### Calculating the First Derivative of the Curve \n\nThis way we can count the number of increase in cases each day. This can also be used to calculate the infection rate. ","e13acf4d":"**Observations**\n\n1. We have data from 22nd January to 30th April for each day for 187 unique countries. \n\n2. We have names of countries and and their latitudes and longitudes. \n\n3. For each country we have their daily confirmed cases count in a cumulative manner.\n","163ee704":"### Removing less useful columns","1106d8df":"## Importing Necessary Modules","3703f682":"# Covid19 Data Analysis Notebook","69398e2f":"## Task 1","1acf4c27":"## Task 3: Merge the datasets\n\nWe need to perform an inner join on the datasets. ","f0f77642":"#### Find them maximum infection rate for all the countries","989e9245":"## Task2: Happiness Report Data","141feb28":"## Task 4: Combined Analysis","497563e2":"### Aggregating the rows by the country","7a2fbc97":"### GDP vs Maximum Infection Rate","45f99725":"### Correlation Analysis","8c839fc0":"### Change the index of the happiness data"}}