{"cell_type":{"30557b3d":"code","e249f7b8":"code","6f0d8df2":"code","4b56e319":"code","c226abcb":"code","a8a71d65":"code","824d9a19":"code","239e441b":"code","d220b6d9":"code","7f481756":"code","b0b6776c":"code","201ade07":"code","2f569210":"code","03449801":"code","9c361d6e":"code","ea8132cd":"code","bb80703e":"code","9effd102":"code","a8482205":"code","f8f1e59e":"code","91b7f0f4":"code","9a89d80d":"code","8e9a8059":"code","34aa8014":"markdown","939cd0e5":"markdown","ee2ec28b":"markdown","6e0de13c":"markdown","ec082c7e":"markdown","05b1e956":"markdown","7c40778c":"markdown"},"source":{"30557b3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e249f7b8":"data = pd.read_csv('\/kaggle\/input\/regressioncsv\/datasets_88705_204267_Real estate.csv', index_col = \"No\")\ndata.head(20)","6f0d8df2":"data.info()","4b56e319":"dates2013 = data[data['X1 transaction date']<= 2013]\nsns.distplot(a = dates2013['X1 transaction date'], kde = False)\n","c226abcb":"data['X1 transaction date'].describe()","a8a71d65":"for i in range(1,13):\n    print(i\/12)","824d9a19":"names  = {'X1 transaction date':'transaction_date',\n          'X2 house age': 'house_age',\n          'X3 distance to the nearest MRT station': 'distance_MRT_station',\n          'X4 number of convenience stores' : 'number_convenience_stores', \n          'X5 latitude': 'latitude', \n          'X6 longitude': 'longitude',\n          'Y house price of unit area': 'sale_price'}\n\ndata.rename(columns = names, inplace = True)","239e441b":"data.transaction_date = round((data.transaction_date - 2012) *12)","d220b6d9":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\n\nX = data.drop('sale_price', axis = 1)\ny = data.sale_price\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state= 92387, test_size = .15)\nxgbmodel = XGBRegressor()","7f481756":"xgbmodel.fit(X_train, y_train)","b0b6776c":"predictions = xgbmodel.predict(X_valid)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, y_valid)))","201ade07":"ns = []\nfor i in range(1,21):\n    ns.append(i * 50)","2f569210":"#looking for a more optimized values for n_estimators\nmaes = []\nfor n in ns:\n    model = XGBRegressor(n_estimators = n)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_valid)\n    MAE = mean_absolute_error(predictions, y_valid)\n    maes.append(MAE)\n    print('For {} n_estimators:'.format(n))\n    print('Mean Absolute Error = ' + str(MAE))\n    print('========')","03449801":"plt.figure(figsize = (6,3))\nplt.plot(ns,maes)","9c361d6e":"learning_rates = [.5]\nfor i in range(0,20):\n    learning_rates.append(learning_rates[-1]*0.8)\n    \nprint(learning_rates)","ea8132cd":"maes = []\nfor l in learning_rates:\n    model = XGBRegressor(n_estimators = 300, learning_rate = l)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_valid)\n    MAE = mean_absolute_error(predictions, y_valid)\n    maes.append(MAE)\n    print('For n_estimators = {} and learning_rate = {}:'.format(300, l))\n    print('Mean Absolute Error = ' + str(MAE))\n    print('========')","bb80703e":"plt.figure(figsize = (6,3))\nplt.plot(learning_rates,maes)","9effd102":"maes = []\n\nfor lvalue in np.linspace(.001, .04, num = 20):\n    model = XGBRegressor(n_estimators = 300, learning_rate = lvalue)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_valid)\n    MAE = mean_absolute_error(predictions, y_valid)\n    maes.append(MAE)\n    print('For n_estimators = {} and learning_rate = {}:'.format(300, lvalue))\n    print('Mean Absolute Error = ' + str(MAE))\n    print('========')\n    ","a8482205":"plt.figure(figsize = (6,3))\nplt.plot(np.linspace(.001, .04, num = 20),maes)","f8f1e59e":"np.argmin(maes)\nnp.linspace(.001, .04, num = 20)[7]","91b7f0f4":"LR = np.linspace(.001, .04, num = 20)[7]\nns = []\nmaes = []\nfor n in np.arange(50, 1000, step = 50):\n    model = XGBRegressor(n_estimators = n, learning_rate = LR)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_valid)\n    MAE = mean_absolute_error(predictions, y_valid)\n    maes.append(MAE)\n    print('For n_estimators = {} and learning_rate = {}:'.format(n, LR))\n    print('Mean Absolute Error = ' + str(MAE))\n    print('========')","9a89d80d":"plt.figure(figsize = (6,3))\nplt.plot(np.arange(50, 1000, step = 50),maes)","8e9a8059":"rstates = [4539,3169,1003,2242]\nn_est = 350 \nlr = .01536842105263158\n\nfor r in rstates:\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state= r, test_size = .25)\n    model = XGBRegressor(n_estimators = n_est, learning_rate = lr)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_valid)\n    mae = mean_absolute_error(predictions, y_valid)\n    print('MAE for this sampling: {}'.format(mae))","34aa8014":"The best value I have for learning_rate is therefore around .015368. Let's plug that back into the n_estimators again because I kind of want an idea of if that changes the ideal. ","939cd0e5":"It looks like the best combination is \nFor n_estimators = 350 and learning_rate = 0.01536842105263158:\nMean Absolute Error = 4.140109510270375\n\nThat's a mean error of about $4,140, which is unfortunatly something like \\%10 of the average price, I think...\n\nI should try this for a few more samples to see if some model delivers a better one.","ee2ec28b":"# Feature Engineering","6e0de13c":"# XGBoost","ec082c7e":"It looks like the date is the year + month\/12. I have to assume that if the sale date is 2013.000, that means that the sale went down in January. I think that I'm going to convert this column to the number of months past January 2012 the sale took place in because that's pretty simple to do.","05b1e956":"It looks like the best value is somewhere between .04 and .001. Let's look at that area in greater resolution.","7c40778c":"It looks like anything more than 200 n_estimators is overkill. I wonder if that slightly lower value at n = 100 was just a fluke or not."}}