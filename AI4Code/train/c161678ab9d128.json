{"cell_type":{"b8e05ef7":"code","01a7b868":"code","75d76b50":"code","402b8328":"code","353c8d69":"code","9d428490":"code","9b63bd8b":"code","21833389":"code","f7344351":"code","4e6e0c26":"code","7c1d9c25":"code","5c9fd2ca":"code","36cd93c3":"code","d67fc9af":"code","948ea965":"code","61be30e0":"code","3d3e3a18":"code","1b323530":"code","f316c598":"code","8a5aa897":"code","18e59803":"code","ad98ce45":"code","cd96453f":"code","a63bd737":"markdown"},"source":{"b8e05ef7":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt","01a7b868":"train = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/test.csv\")","75d76b50":"train.head()","402b8328":"Name0=train['loss'].unique()\nName=sorted(Name0)\nprint(Name)","353c8d69":"N=list(range(len(Name)))  \nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","9d428490":"target = train['loss'].apply(lambda x:np.log1p(x))\ndata = train.drop(['loss','id'],axis=1)","9b63bd8b":"target.value_counts()","21833389":"columns=data.columns.to_list()\nprint(columns)","f7344351":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 2, 200),\n        'objective': trial.suggest_categorical('objective',['regression','rmse','tweedie']),  \n        'max_depth': trial.suggest_int('max_depth', 3, 8),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-1, 1.0),\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 1e-3),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-3, 10.0),\n        \"bagging_freq\": 5,\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": -1,\n    }\n    model = lgb.LGBMRegressor(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","4e6e0c26":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=12)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","7c1d9c25":"study.trials_dataframe()","5c9fd2ca":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","36cd93c3":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","d67fc9af":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","948ea965":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','learning_rate','feature_fraction','bagging_fraction'])","61be30e0":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","3d3e3a18":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","1b323530":"Best_trial=study.best_trial.params\nprint(Best_trial)","f316c598":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv\")\nprint(sample.shape)","8a5aa897":"preds = np.zeros((sample.shape[0]))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = lgb.LGBMRegressor(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","18e59803":"print(preds.shape)\nprint(preds[0])","ad98ce45":"subm = sample\nPRED=[]\nfor item in preds:\n    value=int(np.expm1(item))      \n    PRED+=[value]\nsubm['loss'] = PRED\nsubm.to_csv('submission.csv',index=False)\nsubm","cd96453f":"subm['loss'].value_counts()","a63bd737":"# XGBoost with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna"}}