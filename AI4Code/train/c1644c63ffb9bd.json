{"cell_type":{"37dc7cd2":"code","d8ec3203":"code","160f80d0":"code","fee9abc0":"code","1beb58dd":"code","886b4ad2":"code","42fc4684":"code","7a071d98":"code","8c94765d":"code","1c4ef3d3":"code","509010db":"code","4666874d":"code","5242776d":"code","d57a4bf8":"code","626d67ac":"code","3d48ee43":"code","21cc148d":"code","daaf1210":"code","68ff14aa":"code","e2bc927a":"code","f000a2fa":"code","8636920b":"code","d8b2a343":"code","bc2bfc52":"code","dd4f6733":"code","643a9372":"code","ecb46f79":"code","a3268bc6":"code","63fab068":"code","dfa6032a":"code","f865e3bd":"code","c034961c":"code","d904f6d0":"code","7fd5cb18":"code","dc860dd2":"code","5d90c64c":"code","fd3789b5":"code","1cd63efc":"code","ea5cdfa2":"code","57d564a4":"code","00af15ac":"code","c6c6781f":"code","5e9648c1":"code","80bbdc35":"code","da9859c3":"code","fce48670":"code","1cd71f7e":"code","ccd906aa":"code","998aef8d":"code","d4813e93":"code","2d2680e1":"code","a1c7b1dd":"code","1a8f4c2c":"code","db5d012d":"code","23cd6c0e":"code","ff84f5bc":"code","d093201d":"code","8d020548":"code","9d04c327":"code","e2561b00":"code","5d3b13a4":"code","1dc1fb70":"code","d0a6b1b4":"code","4a2850d7":"code","c5cfe076":"code","a0c44ecb":"code","64716685":"code","c19a78b3":"code","7e78a5a8":"code","d02203e9":"code","65f695da":"code","23d2d236":"code","4b36438b":"code","5119f2b0":"code","522eba2a":"code","16ead5b1":"code","b0fcf962":"code","9c6aeb51":"code","8a2805b2":"code","4a66978a":"code","a445e349":"code","a75c8d26":"code","477e28ad":"code","abffe281":"code","fed51d8b":"code","29e20a72":"code","a645b403":"code","da6a9f9b":"code","b6f995c1":"code","380ffecc":"code","3ac4d1bc":"code","61b07989":"code","c8d484db":"markdown","6df87fe6":"markdown","201a335d":"markdown","05d3538a":"markdown","90f504da":"markdown","7e98bfdb":"markdown","d12fcb41":"markdown","48a1fa8c":"markdown","eff03db1":"markdown","638fb0fd":"markdown","aebdc991":"markdown","cd38f0bf":"markdown","f66049c2":"markdown","8e790b80":"markdown","356b79a5":"markdown","5bff9539":"markdown","2a8a1fd5":"markdown","6da99b47":"markdown","2138ad69":"markdown","002ba6be":"markdown","81f5cfe9":"markdown","02821de7":"markdown","e2fdf809":"markdown","8a2d0d39":"markdown","63728f85":"markdown","183a2ccb":"markdown","87e9ff24":"markdown","cd7ba7fe":"markdown","e0097352":"markdown","0498f55b":"markdown","cdf186c5":"markdown","eb0d4030":"markdown","4c42f377":"markdown","fae48d02":"markdown"},"source":{"37dc7cd2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d8ec3203":"data = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","160f80d0":"data.head()","fee9abc0":"data.info()","1beb58dd":"data.isnull().sum()","886b4ad2":"plt.figure(figsize=(15,7))\nsns.heatmap(data.isnull(), cbar=False, cmap=\"viridis\")","42fc4684":"data.duplicated().sum()","7a071d98":"data.describe().transpose()","8c94765d":"data[\"stroke\"].value_counts()","1c4ef3d3":"stroke_percent = len(data[data[\"stroke\"] == 1]) \/ len(data[data[\"stroke\"] == 0])*100","509010db":"print(\"The total stroke patient in this dataset accounts for: {}\".format(stroke_percent))","4666874d":"data.corr()[\"stroke\"].sort_values(ascending=False)","5242776d":"data.corr()[\"bmi\"].sort_values(ascending=False)","d57a4bf8":"sns.set_palette(\"PRGn\")\nsns.pairplot(data)","626d67ac":"plt.figure(figsize=(12,7))\nsns.set_context(\"paper\", font_scale=1.5)\nsns.heatmap(data.corr(), cmap=\"plasma\")","3d48ee43":"data.columns","21cc148d":"data = data.drop(\"id\", axis=1)","daaf1210":"data[\"gender\"].value_counts(normalize=True)*100","68ff14aa":"plt.figure(figsize=(15,7))\nsns.violinplot(x=\"gender\", y=\"age\", data=data, hue=\"stroke\", shade=True, palette=\"plasma\")","e2bc927a":"plt.figure(figsize=(15,7))\nsns.kdeplot(x=data[\"age\"], shade=True, color=\"red\")","f000a2fa":"data[\"heart_disease\"].value_counts(normalize=True)*100","8636920b":"data.columns","d8b2a343":"data.corr()[\"bmi\"]","bc2bfc52":"labels = [1,2,3,4,5]\ndata[\"age_bin\"] = pd.cut(data[\"age\"], 5, labels=labels)","dd4f6733":"data[\"age_bin\"].value_counts()","643a9372":"gb_bmi = data.groupby(\"age_bin\")[\"bmi\"].mean()","ecb46f79":"gb_bmi","a3268bc6":"def impute_bmi(cols):\n    bmi = cols[0]\n    age_bin = cols[1]\n    \n    if pd.isnull(bmi):\n        if age_bin == 1:\n            return 20.7\n        elif age_bin == 2:\n            return 28.6\n        elif age_bin == 3:\n            return 31.4\n        elif age_bin == 4:\n            return 31.6\n        elif age_bin == 5:\n            return 29.4\n    else:\n        return bmi","63fab068":"data[\"bmi\"] = data[[\"bmi\",\"age_bin\"]].apply(impute_bmi, axis=1)","dfa6032a":"data[\"bmi\"].isnull().sum()","f865e3bd":"data.head()","c034961c":"data[\"ever_married\"].value_counts()","d904f6d0":"plt.figure(figsize=(12,7))\nsns.violinplot(x=\"ever_married\", y=\"age\", data=data, hue=\"stroke\", palette=\"Reds\")\nplt.legend(bbox_to_anchor=(1.2,0.5))","7fd5cb18":"data[\"hypertension\"].value_counts() ","dc860dd2":"plt.figure(figsize=(12,7))\nsns.countplot(x=data[\"hypertension\"], color=\"Green\")","5d90c64c":"data[\"work_type\"].value_counts() ","fd3789b5":"plt.figure(figsize=(12,7))\nsns.countplot(y=data[\"work_type\"], palette=\"rainbow\")","1cd63efc":"data[\"Residence_type\"].value_counts() ","ea5cdfa2":"plt.figure(figsize=(9,5))\nsns.countplot(x=data[\"Residence_type\"], color=\"pink\")","57d564a4":"data[\"avg_glucose_level\"].value_counts()","00af15ac":"plt.figure(figsize=(15,7))\nsns.distplot(x=data[\"avg_glucose_level\"], bins=30, color=\"red\")","c6c6781f":"sns.jointplot(x=\"bmi\", y=\"avg_glucose_level\", data=data, color=\"green\", alpha=0.5)","5e9648c1":"plt.figure(figsize=(15,7))\nsns.kdeplot(x=data[\"bmi\"], shade=True, color=\"red\")","80bbdc35":"sns.set_palette(\"RdBu\")\ng = sns.FacetGrid(data=data, col=\"gender\", hue=\"stroke\")\ng.map(plt.scatter, \"age\", \"bmi\").add_legend()","da9859c3":"g = sns.FacetGrid(data=data, col=\"gender\", hue=\"stroke\")\ng.map(plt.scatter, \"age\", \"avg_glucose_level\").add_legend()","fce48670":"data.describe().transpose()","1cd71f7e":"data[\"smoking_status\"].value_counts()","ccd906aa":"plt.figure(figsize=(15,7))\nsns.violinplot(x=\"smoking_status\", y=\"age\", data=data, hue=\"stroke\", palette=\"Spectral_r\")\nplt.legend(bbox_to_anchor=(1.1,0.5))","998aef8d":"data.head()","d4813e93":"data.info()","2d2680e1":"data.corr()[\"stroke\"].sort_values(ascending=False)","a1c7b1dd":"dummy_features = pd.get_dummies(data[[\"gender\", \"ever_married\", \"work_type\", \"Residence_type\", \"smoking_status\"]], \n                                drop_first=True, dtype=int)","1a8f4c2c":"data = pd.concat((data.drop([\"gender\", \"ever_married\", \"work_type\", \"Residence_type\", \"smoking_status\"], axis=1), \n                  dummy_features), axis=1)","db5d012d":"data.head()","23cd6c0e":"data[\"avg_glucose_level\"].skew()","ff84f5bc":"data[\"avg_glucose_level\"] = np.log10(data[\"avg_glucose_level\"])","d093201d":"data[\"bmi\"].skew()","8d020548":"data[\"bmi\"] = np.log10(data[\"bmi\"])","9d04c327":"data[\"age\"].skew()","e2561b00":"data.head()","5d3b13a4":"data = data.drop(\"age_bin\", axis=1)","1dc1fb70":"data.head()","d0a6b1b4":"data.shape","4a2850d7":"data.info()","c5cfe076":"X = data.drop([\"stroke\"], axis=1)\ny = data[\"stroke\"]","a0c44ecb":"from sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.preprocessing import MinMaxScaler\nfrom imblearn import over_sampling \nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import cross_val_predict","64716685":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","c19a78b3":"knn_model = KNeighborsClassifier(n_neighbors=5)","7e78a5a8":"log_model = LogisticRegression()","d02203e9":"tree_model = DecisionTreeClassifier()","65f695da":"random_model = RandomForestClassifier()","23d2d236":"g_model = GaussianNB()","4b36438b":"xgb_model = XGBClassifier()","5119f2b0":"svc_model = SVC()","522eba2a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)","16ead5b1":"scaler = MinMaxScaler()","b0fcf962":"X_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","9c6aeb51":"log_model.fit(X_train, y_train)\nlog_predict = log_model.predict(X_test)\nprint(confusion_matrix(y_test, log_predict))\nprint(classification_report(y_test, log_predict))","8a2805b2":"sm = SMOTE(random_state=42)","4a66978a":"X_sm, y_sm = sm.fit_resample(X_train, y_train)","a445e349":"X_sm.shape","a75c8d26":"X_train.shape","477e28ad":"y_sm.shape","abffe281":"random_model.fit(X_sm, y_sm)\nrandom_predict = random_model.predict(X_test)\nprint(confusion_matrix(y_test, random_predict))\nprint(classification_report(y_test, random_predict))","fed51d8b":"log_model.fit(X_sm, y_sm)\nlog_predict = log_model.predict(X_test)\nprint(confusion_matrix(y_test, log_predict))\nprint(classification_report(y_test, log_predict))","29e20a72":"tree_model.fit(X_sm, y_sm)\ntree_predict = tree_model.predict(X_test)\nprint(confusion_matrix(y_test, tree_predict))\nprint(classification_report(y_test, tree_predict))","a645b403":"knn_model.fit(X_sm, y_sm)\nknn_predict = knn_model.predict(X_test)\nprint(confusion_matrix(y_test, knn_predict))\nprint(classification_report(y_test, knn_predict))","da6a9f9b":"svc_model.fit(X_sm, y_sm)\nsvc_predict = svc_model.predict(X_test)\nprint(confusion_matrix(y_test, svc_predict))\nprint(classification_report(y_test, svc_predict))","b6f995c1":"g_model.fit(X_sm, y_sm)\ng_predict = g_model.predict(X_test)\nprint(confusion_matrix(y_test, g_predict))\nprint(classification_report(y_test, g_predict))","380ffecc":"xgb_model.fit(X_sm, y_sm)\nxgb_predict = xgb_model.predict(X_test)\nprint(confusion_matrix(y_test, xgb_predict))\nprint(classification_report(y_test, xgb_predict))","3ac4d1bc":"cols= [\"Models\", \"Accuracy\", \"Precision\", \"Recall\", \"f1_score\"]\n\nreport = [[\"Random Forest\",0.90, 0.13, 0.18,0.15], [\"Logistic Regression\",0.76, 0.14, 0.80,0.24,], \n          [\"Decision Tree\", 0.86, 0.12, 0.30, 0.18], [\"K-nearest neighbor\", 0.81,0.10, 0.36, 0.16], \n          [\"Support Vector Machines\", 0.79, 0.14, 0.60, 0.22], [\"GaussianNB\", 0.24,0.06,0.98,0.11], \n          [\"XGBoost\", 0.93, 0.21, 0.14, 0.17]]\n\nmodel_comparison = pd.DataFrame(report, columns= cols)\nmodel_comparison.sort_values(\"Accuracy\", ascending=False)","61b07989":"model_comparison.sort_values(\"Recall\", ascending=False)","c8d484db":"### Noted that the BMI feature is obviously right skewed","6df87fe6":"### Checking out what types of data that we are dealing with","201a335d":"### Model comparison with recall","05d3538a":"### Model comparison with accuracy","90f504da":"### The gender data is sorta balanced","7e98bfdb":"# Exploratory Data Analysis","d12fcb41":"### Recalling our target feature dataset is significantly imbalanced. To solve this, oversampling technqiue SMOTE will be used.","48a1fa8c":"### Dropping feature \"id\" as it serves no purpose","eff03db1":"### Final check before machine learning model","638fb0fd":"### Age has the highest correlation with BMI. Thus, it makes sense to replace msising values in BMI with the mean value of the age group. However, this requires some feature engineering. Will need to create age groups to obtain the mean value for bmi based on the age group. The bins will be labeled 1-5.","aebdc991":"### The feature \"stroke\" is our target feature\/y-variable. Noted they are imbalanced","cd38f0bf":"### Looks like we have a lot of missing data on bmi feature","f66049c2":"### This model has recall at 0.60, able to predict 30 out of 50 accurately. ","8e790b80":"### Transforming feature to log due to high skewness ","356b79a5":"### Obtaining the mean value of bmi for each age group","5bff9539":"### Visualizing missing values","2a8a1fd5":"### Accuracy 95% is excellent. While the accuracy is at 95%, the score tells us that this model works very well in predicting non-stroke but failed miserably in predicting stroke. \n\n### Regardless the accuracy, the model doesn't serve the purpose if it can't predict stroke. Similarly to fraud cases, models are built to find and recognize a fraud case out of a million cases. It does not serve the purpose if the model was not sensitive and could not predict frauds accurately.   \n\n### From the healthcare provider perspective, it is important for the model to recognize stroke. So in this case, recall is a better measurement than accuracy of a model. ","6da99b47":"### A simple logistic regression model will be used. \n### Noted that this model yields a very high accuracy rate 95%. At a glance, this model is perfect. However, if we looked at the classfication report on 1s, the scores are 0s across the board. The confusion matrix tells us that out of 50 minority class in test data, the model predicted none accurately. The model failed to predict stroke. ","2138ad69":"### With SMOTE applied, the model has improved tremendously, able to predict 12 accurately out of 50 based on the confusion matrix, yielding 0.24 for recall. ","002ba6be":"### Importing libraries","81f5cfe9":"### Splitting train and test data. Only 80% of the data will be used for training, which is arbitrary. Train data will be scaled. Fit_transform not used on the test data to prevent data leakge. ","02821de7":"### Basic descriptive analysis","e2fdf809":"### A fast way to check out the relationship with all other features","8a2d0d39":"### Since bmi is missing many values, I need to find a way to fill the missing values. Looks like age has the highest correlation with this feature. Will obtain the mean value of bmi for the age class. ","63728f85":"### The feature Age has acceptable skewness so will not transform log","183a2ccb":"### Replacing missing values on bmi feature","87e9ff24":"### Setting up X and y variable and importing libraries","cd7ba7fe":"### Our target feature dataset is significantly imbalanced. ","e0097352":"### Logistic regression model with SMOTE applied yields a significant recall at 0.80, able to predict 40 cases out of 50 accurately. This is a significant improvement from previous. ","0498f55b":"### Noted that the glucose level feature is obviously right skewed","cdf186c5":"### By far, the naive bayes model yields 0.98 recall, predicted accurately 49 out of 50. ","eb0d4030":"### Only ~5% of the data had pre-existing heart disease","4c42f377":"### All missing values were filled","fae48d02":"### Setting up the data into binaries for machine learning "}}