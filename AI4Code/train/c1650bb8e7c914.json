{"cell_type":{"68b4c6ef":"code","3252f57d":"code","6e6e0c40":"code","598d4515":"code","ab57f0a9":"code","c2f40a9f":"code","d6cd8126":"code","5aafbd5d":"code","4e33062f":"code","d32cfe8f":"code","f0c63613":"code","0044af63":"code","3bda8c5a":"code","2fbb877d":"code","a6ee6885":"code","00b40d3c":"code","229dd99b":"code","cca278ea":"code","b4f64417":"code","047a90b7":"code","04072a4e":"code","29e54fe6":"code","146a5edd":"code","1834df90":"code","817988f3":"code","ab954d18":"code","8cff5396":"code","8720ed40":"code","c9e53e10":"code","2194618d":"code","f6e39dea":"code","63fe38b1":"markdown","f3603232":"markdown"},"source":{"68b4c6ef":"import pandas as pd\nimport numpy as np\nimport missingno as msno\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression as lr\nfrom sklearn.preprocessing import StandardScaler as ss\nfrom sklearn import metrics as m\nfrom sklearn.tree import DecisionTreeClassifier  \nfrom sklearn.model_selection import train_test_split \n\n\ncovid_symp = pd.read_csv(\"..\/input\/early-stage-symptoms-of-covid19-patients\/covid_early_stage_symptoms.csv\")\ncovid_symp = covid_symp.rename(columns={'SARS-CoV-2 Positive':'covid'})\n#dependent variable = covid\ncovid_symp.head(5)\n#covid:(positive=1, suspected=0); for all others:(yes=1, no=0)\n\n#The definition of a suspected case is the patient who develops symptoms and has contact\n#with confirmed COVID-19 patients but didn\u2019t confirm as COVID-19 after diagnosis. \n#Confirmed cases are defined as the patients who are confirmed as positive for COVID-19 in \n#the CDC approved test report or by the doctors. \n","3252f57d":"#Now male gender is denoted by 1 and female gender denoted by 2\ncovid_symp.gender = covid_symp.gender.replace(['male','female'],[1,2])\nprint(covid_symp.gender[3:8])","6e6e0c40":"#Exploratory Data Analysis:\ncovid_symp.describe()","598d4515":"def features_ratio(val):\n    sum=0\n    for i in val:\n        if i==1:\n            sum=sum+1\n    return round((sum\/val.count()*100),1)\nprint('Male: ',features_ratio(covid_symp.gender),'%\\t\\t\\tFemale: ',100-features_ratio(covid_symp.gender),'%')\nprint('Having fever: ',features_ratio(covid_symp.fever),'%\\t\\tNot having fever: ',100-features_ratio(covid_symp.fever),'%')\nprint('Having cough: ',features_ratio(covid_symp.cough),'%\\t\\tNot having cough: ',100-features_ratio(covid_symp.cough),'%')\nprint('Having runny nose: ',features_ratio(covid_symp.runny_nose),'%\\tNot having runny nose: ',100-features_ratio(covid_symp.runny_nose),'%')\nprint('Having soreness: ',features_ratio(covid_symp.muscle_soreness),'%\\t\\tNot having soreness: ',100-features_ratio(covid_symp.muscle_soreness),'%')\nprint('Having pneumonia: ',features_ratio(covid_symp.pneumonia),'%\\tNot having pneumonia: ',100-features_ratio(covid_symp.pneumonia),'%')\nprint('Having diarrhea: ',features_ratio(covid_symp.diarrhea),'%\\t\\tNot having diarrhea: ',100-features_ratio(covid_symp.diarrhea),'%')\nprint('Having lung infection: ',features_ratio(covid_symp.lung_infection),'%\\tNot having lung infection: ',100-features_ratio(covid_symp.lung_infection),'%')\nprint('People who travelled: ',features_ratio(covid_symp.travel_history),'%\\tPeople who did nt travel: ',round(100-features_ratio(covid_symp.travel_history),1),'%')\nprint('Received isolation treatment:',features_ratio(covid_symp.isolation_treatment),'%Did not receive isolation treatment:',100-features_ratio(covid_symp.isolation_treatment),'%')\nprint('Covid positive: ',features_ratio(covid_symp.covid),'%\\t\\tCovid suspected: ',100-features_ratio(covid_symp.covid),'%')\nsum1 = 0 \nsum2 = 0 \nsum3 = 0 \nsum4 = 0\nfor i in covid_symp.age_year:\n        if 0<i<=30:\n            sum1=sum1+1\n        if 30<i<=50:\n            sum2=sum2+1\n        if 50<i<=70:\n            sum3=sum3+1\n        if 70<i<=99:\n            sum4=sum4+1\nprint('\\n0-30 age group: ',round((sum1\/covid_symp.age_year.count()*100),1),'%\\t\\t31-50 age group: ',round((sum2\/covid_symp.age_year.count()*100),1),\n      '%\\n51-70 age group: ',round((sum3\/covid_symp.age_year.count()*100),1),'%\\t71-99 age group: ',round((sum4\/covid_symp.age_year.count()*100),1),'%')\n\n","ab57f0a9":"#Visualizing the data:\nmsno.bar(covid_symp)  # to visualize missing data\n#There is no missing data. We are dealing with a clean dataset.\n\n#the distribution of data grouped by column 'covid':\ngrb = covid_symp.groupby('covid')\ngrb.describe()","c2f40a9f":"#Plotting frequency for all attributes:\nplt.hist(covid_symp.gender,bins=10,color=\"tan\",ec=\"black\")","d6cd8126":"plt.hist(covid_symp.age_year,bins=10,color=\"blue\",ec=\"black\")","5aafbd5d":"plt.hist(covid_symp.fever,bins=10,color=\"grey\",ec=\"black\")","4e33062f":"plt.hist(covid_symp.cough,bins=10,color=\"green\",ec=\"black\")","d32cfe8f":"plt.hist(covid_symp.runny_nose,bins=10,color=\"orange\",ec=\"black\")","f0c63613":"plt.hist(covid_symp.muscle_soreness,bins=10,color=\"purple\",ec=\"black\")","0044af63":"plt.hist(covid_symp.pneumonia,bins=10,color=\"red\",ec=\"black\")","3bda8c5a":"plt.hist(covid_symp.diarrhea,bins=10,color=\"yellow\",ec=\"black\")","2fbb877d":"plt.hist(covid_symp.lung_infection,bins=10,color=\"pink\",ec=\"black\")","a6ee6885":"plt.hist(covid_symp.travel_history,bins=10,color=\"olive\",ec=\"black\")","00b40d3c":"plt.hist(covid_symp.isolation_treatment,bins=10,color=\"chocolate\",ec=\"black\")","229dd99b":"plt.hist(covid_symp.covid,bins=10,color=\"aqua\",ec=\"black\")","cca278ea":"#checking for outliers and removing them:\nfrom scipy import stats\nz = np.abs(stats.zscore(covid_symp['age_year']))\nprint(np.where(z>3))\n#covid_symp['age_year']=covid_symp['age_year'].replace([93,96],round(covid_symp.age_year.median()))","b4f64417":"#Plotting correlation plot to display relationships between attributes:\ncovid_symp.corr().style.background_gradient().set_precision(1)","047a90b7":"# isolation of feature matrix from covid_symp:\ncovid_features = covid_symp.iloc[:,0:10]\nprint('The features matrix has %d rows and %d columns'%(covid_features.shape))\n# isolation of target vector from covid_symp:\ncovid_target = covid_symp.iloc[:,-1]\nprint('The target vector has %d rows and %d column(s)'%np.array(covid_target).reshape(-1,1).shape)","04072a4e":"#standardization of features matrix using scikit-learn's StandardScaler\n#so that all inputted values are on the same scale for algorithm\ncovid_features_std = ss().fit_transform(covid_features)\ncovid_features_std[0:10]","29e54fe6":"#Model-1\n# fitting of logistic model\nmodel = lr(penalty='l2', dual=False, tol=1e-8,C=0.1, fit_intercept=True,\n            intercept_scaling=1.0, class_weight=None,random_state=None, \n            solver='lbfgs',max_iter=100, multi_class='multinomial',verbose=0, \n            warm_start=False, n_jobs=None,l1_ratio=None)\ncovid_model_1 = model.fit(covid_features_std, covid_target)\n","146a5edd":"# intercept of logistic regression\ncovid_model_1.intercept_","1834df90":"# coefficients of logistic regression\ncovid_model_1.coef_","817988f3":"#predicted values \npredicted_covid_1 = covid_model_1.predict(covid_features_std)\nprint(predicted_covid_1[0:30])\n#predicting response for some data\ndata = [[1,22,1,1,0,1,1,1,1,1],[2,86,1,0,1,1,0,1,1,0]]\nx=np.array(data).reshape(2,-1)\nprint(covid_model_1.predict(x))","ab954d18":"#confusion matrix for logistic regression:\nm.confusion_matrix(covid_target,predicted_covid_1)","8cff5396":"#accuracy,recall, precision, f1 score for Model-1:\nprint('Accuracy: ',round(m.accuracy_score(covid_target,predicted_covid_1)*100,4),'%\\nRecall Score: ',\n      round(m.recall_score(covid_target,predicted_covid_1)*100,4),'%\\nPrecision Score: ',\n      round(m.precision_score(covid_target,predicted_covid_1)*100,4),'%\\nF1 Score: ',\n      round(m.f1_score(covid_target,predicted_covid_1)*100,4),'%')\n","8720ed40":"#Model-2\n#decision tree model:\n# Split dataset into training set and test set\ncovid_features_train, covid_features_test, covid_target_train, covid_target_test = train_test_split(covid_features, covid_target, test_size=0.3, random_state=1) \n# 70% training and 30% test ","c9e53e10":"# Create Decision Tree classifer object\nobj = DecisionTreeClassifier()\n\n# Train Decision Tree Classifer\nobj = obj.fit(covid_features_train,covid_target_train)\n\n#Predict the response for test dataset\npredicted_covid_2 = obj.predict(covid_features_test)\nprint(predicted_covid_2[0:30])\n#predicting response for some data\nprint(obj.predict(x))","2194618d":"#confusion matrix for decision tree:\nm.confusion_matrix(covid_target_test,predicted_covid_2)","f6e39dea":"#accuracy,recall, precision, f1 score for Model-2:\nprint('Accuracy: ',round(m.accuracy_score(covid_target_test, predicted_covid_2)*100,4),'\\nRecall Score: ',\n      round(m.recall_score(covid_target_test, predicted_covid_2)*100,4),'\\nPrecision Score: ',\n      round(m.precision_score(covid_target_test, predicted_covid_2)*100,4),'\\nF1 Score: ',\n      round(m.f1_score(covid_target_test, predicted_covid_2)*100,4))\n","63fe38b1":"All outliers had either 93 or 96 age\ndecided not to remove or replace the outliers\naccuracy also improved on not removing.","f3603232":"Pairs having strong correlation: 1) pneumonia and runny_nose (0.9)  2) cough and fever (0.8)  3) covid and lung_infection (0.6)  4) covid and cough (0.6) "}}