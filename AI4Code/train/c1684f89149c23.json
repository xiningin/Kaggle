{"cell_type":{"557bb192":"code","35455ada":"code","dda6b543":"code","87373b8b":"code","b0792300":"code","3c25652e":"code","d8815673":"code","e951bc6f":"markdown","46548c41":"markdown","fda8c871":"markdown"},"source":{"557bb192":"#loadpackages & data print data head\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n#load data\ndf = pd.read_csv('..\/input\/athlete_events.csv')\ndf.head(3)","35455ada":"#plot continuous data , perhaps this can be predicted using other metrics...spoiler\n_=sns.violinplot(x='Sex',y='Height',data=df)\nplt.title('Heights of Male and Female Athletes')\nplt.show()","dda6b543":"#load sklearn data set for regression predictions\nfrom sklearn import datasets, linear_model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import r2_score\nimport statsmodels.api as sm\nfrom scipy import stats\nnp.random.seed(17)","87373b8b":"#prep data\ndf_na = df.dropna(subset=['Height','Weight','Age','Team','Sex','Sport'])\ndf_na['RAND'] = np.random.randint(1,3,df_na.shape[0])\nholdOut = df_na[df_na['RAND']==1]## holdout set\ndf_na = df_na[df_na['RAND']!=1]\nHeight = df_na['Height']\ndata = df_na[['Age','Weight','Sex','Sport']]\ndata = pd.get_dummies(data,columns=['Sex','Sport'])\n\n#split data\nXTrain,XTest,yTrain,yTest = train_test_split(data,Height,test_size=0.2,random_state=2)\n\n#Train model\nlm = LinearRegression()\nlm.fit(XTrain,yTrain)\nypred=lm.predict(XTest)\nprint(data.shape)\n\n#https:\/\/stackoverflow.com\/questions\/27928275\/find-p-value-significance-in-scikit-learn-linearregression\n#code i pulled off line to help finding if features are statistically significant\nX=XTrain\ny=yTrain\nparams = np.append(lm.intercept_,lm.coef_)\npredictions = lm.predict(X)\n\n#newX = pd.DataFrame({\"Constant\":np.ones(len(X))}).join(pd.DataFrame(X))\n#MSE = (sum((y-predictions)**2))\/(len(newX)-len(newX.columns))\n\n# Note if you don't want to use a DataFrame replace the two lines above with\nnewX = np.append(np.ones((len(X),1)), X, axis=1)\nMSE = (sum((y-predictions)**2))\/(len(newX)-len(newX[0]))\n\nvar_b = MSE*(np.linalg.inv(np.dot(newX.T,newX)).diagonal())\nsd_b = np.sqrt(var_b)\nts_b = params\/ sd_b\n\np_values =[2*(1-stats.t.cdf(np.abs(i),(len(newX)-1))) for i in ts_b]\n\nsd_b = np.round(sd_b,3)\nts_b = np.round(ts_b,3)\np_values = np.round(p_values,3)\nparams = np.round(params,4)\n\nmyDF3 = pd.DataFrame()\nmyDF3[\"Coefficients\"],myDF3[\"Standard Errors\"],myDF3[\"t values\"],myDF3[\"Probabilites\"] = [params,sd_b,ts_b,p_values]\n#myDF3['features']=data.columns\nmyDF3.to_csv('myDF3.csv')\ndata.head(2).to_csv('features.csv')\nprint(myDF3)","b0792300":"#we definitly have a significant model lets take a look at its performance\nprint(\"Training R2: \",np.round(lm.score(XTrain,yTrain),4))\nprint(\"Testing R2: \",np.round(lm.score(XTest,yTest),4))\n","3c25652e":"#predict on hold out set\nholdOutHeight = holdOut['Height']\nholdOutData = holdOut[['Age','Weight','Sex','Sport']]\nholdOutData = pd.get_dummies(holdOutData,columns=['Sex','Sport'])\nlm.predict(holdOutData)\nprint(\"Holdout: \",np.round(lm.score(holdOutData,holdOut['Height']),4))\nprint(\"Data set size: \", holdOutData.shape)","d8815673":"residuals = holdOutHeight - lm.predict(holdOutData)\n_=sns.scatterplot(x=holdOut['Height'],y=residuals,palette='muted')\nsns.set()\nplt.show()","e951bc6f":"# Olympic Data set analysis\n#### By. Brad Kittrell","46548c41":"#### Model seems to work pretty with validation set, lets try the holdout set","fda8c871":"# Regression\n## predict athlete height using given data"}}