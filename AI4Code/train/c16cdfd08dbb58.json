{"cell_type":{"ab12cf15":"code","4ec3fa9a":"code","4c341573":"code","a8fd77f4":"code","c0b16b9c":"code","c011b0f2":"code","27a58087":"code","7e2bfe5f":"code","1e3af626":"code","6e9a9ce9":"code","0bf59faa":"code","c6868b54":"code","c3e7306e":"markdown","d52b09d0":"markdown","7d0b7d87":"markdown","e2544251":"markdown"},"source":{"ab12cf15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4ec3fa9a":"#importing all required Datasets\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler\nimport seaborn as sns #iris datsset is available in this library","4c341573":"data=pd.read_csv('..\/input\/iris-datasets\/Iris.csv',index_col=False)\ndata.head() #here is my data","a8fd77f4":"data=data.set_index('Id')\ndata.head() #set a id colmn as index","c0b16b9c":"#using 2 columns sepalwidth and sepallength\n#creating scattered plot from data\nplt.scatter(data[['SepalLengthCm']],data[['SepalWidthCm']])\n#in the below grapgh we can say randomly that having 4 clusters","c011b0f2":"#basically in this function iam trying to find numbers of centroids or clusters \nkm=KMeans()\nk_range=range(1,10)\nsse=[]\nfor k in k_range:\n    km=KMeans(n_clusters=k)\n    km.fit(data[['SepalLengthCm','SepalWidthCm']])\n    sse.append(km.inertia_)\n    \nsse #arrays","27a58087":"#plot the k_range and sse\nplt.plot(k_range,sse)","7e2bfe5f":"#Applying the KMean algorithm\nkm=KMeans(n_clusters=3)\ny_pred=km.fit_predict(data[['SepalLengthCm','SepalWidthCm']])#fit and prediction on both sepal and petal\ny_pred","1e3af626":"#after creating arrays iam creating new column CLUSTER for arrays\ndata['cluster']=y_pred\ndata.head()","6e9a9ce9":"km.cluster_centers_","0bf59faa":"#create dataframe for three clusters\ndf1=data[data.cluster==0]\ndf2=data[data.cluster==1]\ndf3=data[data.cluster==2]\n\n\n#plot the graph of dataframes with different colors\nplt.scatter(df1['SepalLengthCm'],df1['SepalWidthCm'],c='r')\nplt.scatter(df2['SepalLengthCm'],df2['SepalWidthCm'],c='g')\nplt.scatter(df3['SepalLengthCm'],df3['SepalWidthCm'],c='b')\nplt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],c='black',marker='*')\n\n\nplt.ylabel('sepalWidth')\nplt.xlabel('sepalLength')\nplt.show()","c6868b54":"#df1.to_csv('Iris_IfCluster=0.csv')\n#df2.to_csv('Iris_IfCluster=1.csv')\n#df3.to_csv('Iris_IfCluster=2.csv')\n#df1\n#df2\n#df3\n#len(df1),len(df2),len(df3)","c3e7306e":"**In above graph we can see centroids\n\n","d52b09d0":"**lets use elbow technique******","7d0b7d87":"**KMean Cluster Algorithm using iris Dataset:For Beginner**","e2544251":"**If any suggestions Please comment below**"}}