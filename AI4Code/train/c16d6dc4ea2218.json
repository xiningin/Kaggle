{"cell_type":{"f68f3820":"code","6c1ba064":"code","d5d27a48":"code","21dfb3d3":"code","9b8cf0a7":"code","4982950a":"code","acc222e5":"code","88a6e1dd":"code","e30892a4":"code","9e195e19":"code","37538af9":"code","cb8608e9":"code","95a210bd":"code","47dabcfd":"code","b43add61":"code","54937c09":"code","0041358c":"code","5a2c837a":"code","96a67dd1":"code","c8b186bd":"code","fc7e2e70":"code","24aca09c":"code","c19bb3e6":"code","93c4569e":"code","03f93ee0":"code","28d8656d":"code","d68016f0":"code","93d8ca6e":"markdown","a90d9a96":"markdown","9eb22b78":"markdown","ce8e6e68":"markdown"},"source":{"f68f3820":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c1ba064":"UShousing = pd.read_csv('\/kaggle\/input\/usa-housing\/USA_Housing.csv')","d5d27a48":"UShousing.head()","21dfb3d3":"UShousing.isnull().values.any()","9b8cf0a7":"UShousing.describe()","4982950a":"UShousing.info()","acc222e5":"UShousing.columns","88a6e1dd":"sns.pairplot(UShousing)","e30892a4":"X = UShousing[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',\n               'Avg. Area Number of Bedrooms', 'Area Population']]\ny = UShousing[['Price']]","9e195e19":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 42)","37538af9":"from sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\n\ndef evaluation(true, pred):\n    mae = metrics.mean_absolute_error(true,pred)\n    mse = metrics.mean_squared_error(true,pred)\n    rmse = np.sqrt(metrics.mean_squared_error(true,pred))\n    r2_score = metrics.r2_score(true,pred)\n    print(\"MAE:\", mae)\n    print(\"MSE:\", mse)\n    print(\"RMSE:\", rmse)\n    print(\"r2_score:\", r2_score)","cb8608e9":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","95a210bd":"pipeline = Pipeline([\n    ('std_scaler', StandardScaler())\n])\n\nX_train = pipeline.fit_transform(X_train)\nX_test = pipeline.fit_transform(X_test)\n","47dabcfd":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression(normalize=True)\nlr.fit(X_train,y_train)","b43add61":"pred = lr.predict(X_test)","54937c09":"print(lr.intercept_)","0041358c":"df1 = pd.DataFrame(lr.coef_.transpose(), X.columns, columns=['coefficient'])\ndf1","5a2c837a":"plt.scatter(y_test, pred)","96a67dd1":"sns.distplot((y_test-pred), bins = 50)","c8b186bd":"test_pred = lr.predict(X_test)\ntrain_pred = lr.predict(X_train)","fc7e2e70":"x = evaluation(y_test, test_pred)\nevaluation(y_train, train_pred)","24aca09c":"col = ['MAE', 'MSE', 'RMSE', 'R2_score']","c19bb3e6":"from sklearn.linear_model import Ridge\nmodel = Ridge()\nmodel.fit(X_train,y_train)\npred = model.predict(X_test)\ntest_pred = model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nevaluation(y_test,test_pred)\nevaluation(y_train,train_pred)","93c4569e":"from sklearn.linear_model import Lasso\nmodel = Lasso()\nmodel.fit(X_train,y_train)\npred = model.predict(X_test)\ntest_pred = model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nevaluation(y_test,test_pred)\nevaluation(y_train,train_pred)","03f93ee0":"from sklearn.linear_model import ElasticNet\nmodel = ElasticNet()\nmodel.fit(X_train,y_train)\npred = model.predict(X_test)\ntest_pred = model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nevaluation(y_test,test_pred)\nevaluation(y_train,train_pred)","28d8656d":"from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=1000)\nmodel.fit(X_train,y_train)\npred = model.predict(X_test)\ntest_pred = model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nevaluation(y_test,test_pred)\nevaluation(y_train,train_pred)","d68016f0":"from sklearn.svm import SVR\nmodel = SVR(kernel = 'rbf')\nmodel.fit(X_train,y_train)\npred = model.predict(X_test)\ntest_pred = model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nevaluation(y_test,test_pred)\nevaluation(y_train,train_pred)","93d8ca6e":"ElasticNet Regression","a90d9a96":"Ridge Regression","9eb22b78":"Lasso Regression","ce8e6e68":"**In Progress!!!**"}}