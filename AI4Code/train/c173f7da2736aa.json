{"cell_type":{"d312a5d6":"code","63de23e6":"code","68323299":"code","b11ac46e":"code","9dc5f48a":"code","a1fa5d83":"code","5653a4ac":"code","b6058cb8":"code","0fb124c6":"code","c2eed5f8":"code","21ada1da":"code","387a7d78":"code","0846b1c0":"code","3b20c185":"code","bf2a7470":"code","db41b5e7":"code","2b891186":"code","42004ded":"code","7c9e1182":"code","e4c6464a":"markdown","6b717e5a":"markdown","318d25f2":"markdown","d94f51a2":"markdown","02f60c42":"markdown","376d1f7a":"markdown","e52b6f75":"markdown"},"source":{"d312a5d6":"import os\n\nimport pandas as pd\nimport numpy as np\nimport urllib\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom wordcloud import WordCloud, ImageColorGenerator\nimport cv2\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","63de23e6":"df = pd.read_csv('\/kaggle\/input\/word-difficulty\/WordDifficulty.csv')\ndf.head()","68323299":"df.info()","b11ac46e":"df.dropna(inplace=True)\ndf['I_Zscore']=MinMaxScaler().fit_transform(df['I_Zscore'].values.reshape(-1,1))","9dc5f48a":"text = ' '.join(df[\"Word\"].sample(np.round(df.shape[0]\/2).astype(int)))","a1fa5d83":"wordcloud = WordCloud(\n    background_color=\"white\", \n    min_font_size=0.01,\n    colormap='gist_rainbow_r')\n    \nwordcloud.generate(text)\n\n\n\nplt.figure(figsize=(10, 10))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","5653a4ac":"text_hardest = ' '.join(df['Word'][df.sort_values('I_Zscore',ascending=False).index][0:10].values)\ntext_easiest = ' '.join(df['Word'][df.sort_values('I_Zscore',ascending=True).index][0:10].values)\nprint('The hardest words are: ',text_hardest,'\\n')\nprint('The easiest words are: ',text_easiest,'\\n')","b6058cb8":"fig, (ax1,ax2) = plt.subplots(1,2,figsize=(16,9))\n\nwordcloud = WordCloud(\n        background_color=\"white\", \n        min_font_size=4,\n        colormap='jet',\n        height=1000,\n        width=1000\n        )\n    \nwordcloud.generate(text_hardest)\n\nax1.imshow(wordcloud)\nax1.axis(\"off\")\nax1.set_title('Hardest words')\n\nwordcloud.generate(text_easiest)\n\nax2.imshow(wordcloud)\nax2.axis(\"off\")\nax2.set_title('Easiest words')\n\nplt.show()","0fb124c6":"sns.set_style(style='dark')\nplt.figure(figsize=(16,9))\nheatmap = sns.heatmap(df.corr(), vmin=-1,vmax=1, annot=True,cmap='viridis')\n\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12)\nplt.show()","c2eed5f8":"column_names = df.columns.values.tolist()\nPredictors_all = df[column_names].drop(columns=['I_Zscore','Word'])\nPredictors_PC = df[['I_Mean_RT','I_SD','Length']]\nPredictors_NC = df[['Log_Freq_HAL','Obs','I_Mean_Accuracy']]\nPredictors_0C = df['Freq_HAL']\nTarget = df['I_Zscore']","21ada1da":"corr_mat = Predictors_all.corr()\n\neig_vals, eig_vectors = np.linalg.eig(corr_mat)\n\ntotal_sum = sum(eig_vals)\nvar_exp = [(i\/total_sum)*100 for i in eig_vals]\ncum_var_exp = np.cumsum(var_exp)\n\nwith plt.style.context('dark_background'):\n    plt.figure(figsize=(16,9))\n    plt.bar(range(7),cum_var_exp, label='Cummulative Variance Explained for components')\n    plt.xlabel('Principal Components')\n    plt.ylabel('Cummulative Variance Explained')\n    plt.legend(loc=(0,0.9))\n    for i in range(7):\n        plt.text(x = i-0.5 , y = cum_var_exp[i]+1, s = '{:.2f}'.format(cum_var_exp[i]), size = 12)\n","387a7d78":"acp = PCA(n_components=4)\nPredictors_PCA = acp.fit_transform(Predictors_all)","0846b1c0":"X_all_tr, X_all_tst, X_PC_tr, X_PC_tst, X_NC_tr, X_NC_tst, X_0C_tr, X_0C_tst, X_PCA_tr, X_PCA_tst, Y_tr, Y_tst = train_test_split(Predictors_all,Predictors_PC,Predictors_NC,Predictors_0C,Predictors_PCA,Target, test_size = 0.3, random_state=0)\n\nX_0C_tr=np.array(X_0C_tr).reshape(-1,1)\nX_0C_tst=np.array(X_0C_tst).reshape(-1,1)","3b20c185":"error_by_regressor = pd.DataFrame(index=['KNNR','RFR','GBR'], columns=['error_all','error_PC','error_NC','error_0C','error_PCA'])","bf2a7470":"KNR = KNeighborsRegressor()\n\nKNR.fit(X_all_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with all variables given by R^(2) has been: {:.4f}'.format(KNR.score(X_all_tst,Y_tst)))\n\nY_pred = KNR.predict(X_all_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with all variables has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with all variables is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[0][0]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nKNR.fit(X_PC_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables strongly positive correlationated given by R^(2) has been: {:.4f}'.format(KNR.score(X_PC_tst,Y_tst)))\n\nY_pred = KNR.predict(X_PC_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables strongly positive correlationated has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables strongly positive correlationated is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[0][1]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nKNR.fit(X_NC_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables strongly negative correlationated given by R^(2) has been: {:.4f}'.format(KNR.score(X_NC_tst,Y_tst)))\n\nY_pred = KNR.predict(X_NC_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables strongly negative correlationated has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables strongly negative correlationated is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[0][2]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nKNR.fit(X_0C_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables non-correlationated given by R^(2) has been: {:.4f}'.format(KNR.score(X_0C_tst,Y_tst)))\n\nY_pred = KNR.predict(X_0C_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables non-correlationated has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables non-correlationated is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[0][3]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nKNR.fit(X_PCA_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables taken by PCA given by R^(2) has been: {:.4f}'.format(KNR.score(X_PCA_tst,Y_tst)))\n\nY_pred = KNR.predict(X_PCA_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables taken by PCA has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables taken by PCA is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[0][4]=error\nprint('----------------------------------------------------------------------------------------\\n')","db41b5e7":"RFR = RandomForestRegressor()\n\nRFR.fit(X_all_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with all variables given by R^(2) has been: {:.4f}'.format(RFR.score(X_all_tst,Y_tst)))\n\nY_pred = RFR.predict(X_all_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with all variables has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with all variables is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[1][0]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nRFR.fit(X_PC_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables strongly positive correlationated given by R^(2) has been: {:.4f}'.format(RFR.score(X_PC_tst,Y_tst)))\n\nY_pred = RFR.predict(X_PC_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables strongly positive correlationated has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables strongly positive correlationated is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[1][1]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nRFR.fit(X_NC_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables strongly negative correlationated given by R^(2) has been: {:.4f}'.format(RFR.score(X_NC_tst,Y_tst)))\n\nY_pred = RFR.predict(X_NC_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables strongly negative correlationated has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables strongly negative correlationated is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[1][2]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nRFR.fit(X_0C_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables non-correlationated given by R^(2) has been: {:.4f}'.format(RFR.score(X_0C_tst,Y_tst)))\n\nY_pred = RFR.predict(X_0C_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables non-correlationated has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables non-correlationated is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[1][3]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nRFR.fit(X_PCA_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables taken by PCA given by R^(2) has been: {:.4f}'.format(RFR.score(X_PCA_tst,Y_tst)))\n\nY_pred = RFR.predict(X_PCA_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables taken by PCA has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables taken by PCA is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[1][4]=error\nprint('----------------------------------------------------------------------------------------\\n')","2b891186":"GBR =GradientBoostingRegressor()\n\nGBR.fit(X_all_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with all variables given by R^(2) has been: {:.4f}'.format(GBR.score(X_all_tst,Y_tst)))\n\nY_pred = GBR.predict(X_all_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with all variables has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with all variables is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[2][0]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nGBR.fit(X_PC_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables strongly positive correlationated given by R^(2) has been: {:.4f}'.format(GBR.score(X_PC_tst,Y_tst)))\n\nY_pred = GBR.predict(X_PC_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables strongly positive correlationated has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables strongly positive correlationated is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[2][1]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nGBR.fit(X_NC_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables strongly negative correlationated given by R^(2) has been: {:.4f}'.format(GBR.score(X_NC_tst,Y_tst)))\n\nY_pred = GBR.predict(X_NC_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables strongly negative correlationated has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables strongly negative correlationated is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[2][2]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nGBR.fit(X_0C_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables non-correlationated given by R^(2) has been: {:.4f}'.format(GBR.score(X_0C_tst,Y_tst)))\n\nY_pred = GBR.predict(X_0C_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables non-correlationated has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables non-correlationated is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[2][3]=error\nprint('----------------------------------------------------------------------------------------\\n')\n\nGBR.fit(X_PCA_tr,Y_tr)\n\nprint('----------------------------------------------------------------------------------------\\n')\nprint('The accuracy for Predictors with variables taken by PCA given by R^(2) has been: {:.4f}'.format(GBR.score(X_PCA_tst,Y_tst)))\n\nY_pred = GBR.predict(X_PCA_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model with variables taken by PCA has a rmse of: {:.2f}'.format(rmse))\n\nI_Zscore_mean = np.mean(Y_tst)\nerror=rmse\/I_Zscore_mean\nprint('The error with variables taken by PCA is: {:.2f}%'.format(error*100))\nerror_by_regressor.iloc[2][4]=error\nprint('----------------------------------------------------------------------------------------\\n')","42004ded":"error_by_regressor=error_by_regressor.astype(float)\nerror_by_regressor","7c9e1182":"sns.set_style(style='dark')\nplt.figure(figsize=(16,9))\nheatmap = sns.heatmap(error_by_regressor,\n                      vmin=np.min(error_by_regressor.min()),vmax=np.max(error_by_regressor.max()),\n                      annot=True,fmt='.2%',cmap='vlag')\n\nheatmap.set_title('Error by each regressor and each variable taken', fontdict={'fontsize':12}, pad=12)\nplt.show()","e4c6464a":"## Correlations","6b717e5a":"# Word Difficulty\n\nPredicting the I_Zscore by various methods.","318d25f2":"## Word Cloud Visualization","d94f51a2":"### KNR","02f60c42":"## Model predictions\nLet's do three types of regression for each type of Predictors:\n\n* KNeighboursRegressor\n* RandomForestRegressor\n* GradientBoostingRegressor","376d1f7a":"The best model was ***Gradient Boosting Regressor*** taking all components into account with an error of 10.84 %.\n\nWith all the methods we see that:\n* Taking all components is the best option.\n* Taking PCA components is good enough.\n* Taking only the strongly positive correlated components is good.\n* Taking only the strongly negative correlated or only the non-correlated components is a pretty bad idea.","e52b6f75":"Positive strong correlation between I_Zscore and:\n* I_Mean_RT\n* I_SD\n* Length\n\nNegative strong correlation between I_Zscore and:\n* Log_Freq_HAL\n* Obs\n* I_Mean_Accuracy\n\nNon-correlation between I_Zscore and:\n* Freq_HAL"}}