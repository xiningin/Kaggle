{"cell_type":{"06cd761d":"code","009395be":"code","8b4f87e9":"code","8d6f7c16":"code","c0bf81dd":"code","ce12a16f":"code","a205b623":"code","036823b9":"code","78c03f26":"code","828ed695":"code","84252371":"code","96c8b169":"code","1253abcb":"code","1c4b88f4":"code","36492646":"code","cbcb6790":"code","02c4aec1":"code","a4098e2a":"code","9d33b22b":"code","a3e447c1":"code","41ba5d15":"code","0c25e3bf":"code","f3202b2e":"code","daab7311":"code","45d89af9":"code","1e8fcfd3":"code","39a09351":"code","3290e8c9":"code","33dbb333":"code","a853ed04":"code","62c10e6a":"code","646448f7":"code","e57961a5":"code","a93bbbce":"code","fb8d2c15":"code","03febda2":"code","dae8c117":"code","5b35a22c":"code","ec446dc6":"code","715e8b0c":"code","447851ba":"code","cb040a7b":"code","6b234ff7":"markdown","5539ef0c":"markdown","0fa88570":"markdown","946c9640":"markdown"},"source":{"06cd761d":"# Imort main libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # for photing and viewing data\nimport matplotlib.pyplot as plt# plotting library\n\n\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","009395be":"# Read csv file\ndata = pd.read_csv('\/kaggle\/input\/amazon-stock-price-all-time\/Amazon.csv')\ndata.head()","8b4f87e9":"data.set_index('Date',inplace = True)# Set the date to be the index","8d6f7c16":"# resorting the data\ndata.index =  pd.to_datetime(data.index,format='%Y-%m-%d')","c0bf81dd":"data.head()","ce12a16f":"data.isnull().sum()# to see the null values","a205b623":"print('_'*80)\nprint(data.duplicated().sum())# to see the duplicated data\nprint('_'*80)\nprint(data.info())# to get information about data","036823b9":"data[['Open','Close','High','Low']].plot(figsize = (20,12))\nplt.title('Anazon Stock at all time')","78c03f26":"data[['Open','Close']].plot(figsize = (20,10), alpha = 1)\nplt.title('Amazon Stock price action')\nplt.xlabel('Date')\nplt.ylabel('Stock action')","828ed695":"data[['Open','High']].plot(figsize = (20,10), alpha = 1)\nplt.title('Amazon Stock price action')\nplt.xlabel('Date')\nplt.ylabel('Stock action')","84252371":"data[['Low','Close']].plot(figsize = (20,10), alpha = 1)\nplt.title('Amazon Stock price action')\nplt.xlabel('Date')\nplt.ylabel('Stock action')","96c8b169":"data['Volume'].plot(figsize = (20,10), alpha = 1)\nplt.title('Amazon Stock price action')\nplt.xlabel('Date')\nplt.ylabel('Stock action')","1253abcb":"data['Adj Close'].plot(figsize = (20,10), alpha = 1)\nplt.title('Amazon Stock price action')\nplt.xlabel('Date')\nplt.ylabel('Stock action')","1c4b88f4":"Ama = data['2015':'2021']\n\n\nAma['Open'].plot(figsize = (20,10), alpha = 1)\nplt.title('Amazon Stock Price Action form 2012 to 2021')","36492646":"Ama[['Open','High']].plot(figsize = (20,10), alpha = 1)\nplt.title('Amazon Stock Price Action form 2012 to 2021')","cbcb6790":"Ama['Adj Close'].plot(figsize = (20,10), alpha = 1)\nplt.title('Amazon Stock Price Action form 2015 to 2021')","02c4aec1":"Ama['Volume'].plot(figsize = (20,10), alpha = 1)\nplt.title('Amazon Stock Price Action form 2015 to 2021')","a4098e2a":"Ama.describe()","9d33b22b":"from statsmodels.tsa.stattools import adfuller\n\ndef adf_test(timeseries):\n    #Perform Dickey-Fuller test:\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n       dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)\n\n","a3e447c1":"print(adf_test(data['High']))","41ba5d15":"print(adf_test(data['High'].resample('MS').std()))","0c25e3bf":"print(adf_test(data['High'].resample('MS').mean()))","f3202b2e":"Ama_diff = Ama['Open'].resample('MS').mean() - Ama['Open'].resample('MS').mean().shift(1)\nAma_open_diff = Ama_diff.dropna()\nAma_open_diff.plot()\n\n\nprint(adf_test(Ama_open_diff))\nprint('_'*80)\n","daab7311":"from statsmodels.tsa.stattools import kpss\n\n\ndef kpss_test(timeseries):\n    print(\"Results of KPSS Test:\")\n    kpsstest = kpss(timeseries, regression=\"c\", nlags=\"auto\")\n    kpss_output = pd.Series(\n        kpsstest[0:3], index=[\"Test Statistic\", \"p-value\", \"Lags Used\"]\n    )\n    for key, value in kpsstest[3].items():\n        kpss_output[\"Critical Value (%s)\" % key] = value\n    print(kpss_output)","45d89af9":"kpss_test(Ama['High'])","1e8fcfd3":"Ama[\"High_diff\"] = Ama[\"High\"] - Ama[\"High\"].shift(\n    1\n)\nAma[\"High_diff\"].dropna().plot(figsize=(12, 8))","39a09351":"\nkpss_test(Ama['High_diff'].dropna())","3290e8c9":"kpss_test(Ama['High_diff'].resample('MS').mean().dropna())","33dbb333":"kpss_test(Ama['High_diff'].resample('MS').std().dropna())","a853ed04":"adf_test(Ama['High_diff'].dropna())","62c10e6a":"train_Ama = Ama['High'].iloc[:-4]\n\n# Take ramdom  6 variables \n\nX_train=[]\nY_train=[]\n\nfor i in range(2, len(train_Ama)):\n    X_train.append(train_Ama[i-2:i])\n    Y_train.append(train_Ama[i])\n","646448f7":"import math\ntrain_len = math.ceil(len(train_Ama)*0.8)\ntrain_len","e57961a5":"X_train, Y_train= np.array(X_train), np.array(Y_train)\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\n","a93bbbce":"# For Model and apply RNN + LSTM\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation, Dropout, TimeDistributed \n#from tensorflow.keras.layers import Activation\n#from tensorflow.keras.layers import Dropout","fb8d2c15":"model=Sequential()\nmodel.add(LSTM(50,activation='relu', input_shape=(X_train.shape[1],1)))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.summary()\nmodel.fit(X_train, Y_train, epochs=5, batch_size=10, verbose=2)","03febda2":"losse = pd.DataFrame(model.history.history)\nlosse[['loss']].plot()\n","dae8c117":"test_data = train_Ama[train_len-2:]\nX_val=[]\nY_val=[] \n\nfor i in range(2, len(test_data)):\n    X_val.append(test_data[i-2:i])\n    Y_val.append(test_data[i])","5b35a22c":"X_val, Y_val = np.array(X_val), np.array(Y_val)\nX_val = np.reshape(X_val, (X_val.shape[0], X_val.shape[1],1))\nprediction = model.predict(X_val)\n","ec446dc6":"from sklearn.metrics import mean_squared_error\n# Know the model error accuracy | the model accuracy \nlstm_train_pred = model.predict(X_train)\nlstm_valid_pred = model.predict(X_val)\nprint('Train rmse:', np.sqrt(mean_squared_error(Y_train, lstm_train_pred)))\nprint('Validation rmse:', np.sqrt(mean_squared_error(Y_val, lstm_valid_pred)))","715e8b0c":"\n\nvalid = pd.DataFrame(train_Ama[train_len:])\nvalid['Predictions']=lstm_valid_pred \n\nplt.plot(valid[['High','Predictions']])\nplt.legend(['Validation','Predictions'])\nplt.show()","447851ba":"# data frame to see the percentage of error between real and predicted\n\nvariance = []\nfor i in range(len(valid)):\n  \n  variance.append(valid['High'][i]-valid['Predictions'][i])\nvariance = pd.DataFrame(variance)\nvariance.describe()","cb040a7b":"train = train_Ama[:train_len]\nvalid = pd.DataFrame(train_Ama[train_len:])\nvalid['Predictions']=lstm_valid_pred\n\nplt.figure(figsize=(16,8))\nplt.title('Model LSTM')\nplt.xlabel('Date')\nplt.ylabel('Amazon Price USD')\nplt.plot(train)\nplt.plot(valid[['High','Predictions']])\nplt.legend(['Train','Val','Predictions'])\nplt.show()","6b234ff7":"### Kwiatkowski-Phillips-Schmidt-Shin Test (KPSS)\n#### another test for checking the stationarity of a time series","5539ef0c":"## Data Preprocessing","0fa88570":"### From the previous analysis and visualization, it can take teh data fro 2015 as the previous years doesn't important, not have a stock price variance  ","946c9640":"### Augmented Dickey Fuller Test (ADF)\n\n#### ADF test is used to determine the presence of unit root in the series, and hence helps in understand if the series is stationary or not. "}}