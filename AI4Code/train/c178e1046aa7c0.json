{"cell_type":{"0b16359b":"code","df6aa3d7":"code","3b4bb165":"code","3953ca81":"code","9b1a5f90":"code","1b260e6f":"code","084e3707":"code","7c519c7d":"code","92b8c7b1":"code","a308aa33":"code","202ffed7":"code","0d5942b8":"code","fa542ea9":"code","7b630a03":"code","adf66f7c":"code","025e3dcd":"code","ab667999":"code","828044f0":"code","e1333fd6":"code","909ab866":"code","67df79e8":"code","8d9e45a5":"code","bfd87c96":"code","13dd9ca9":"code","3ac1e30f":"code","19d83056":"code","22504aa8":"code","958975fe":"code","790f7c44":"code","85f6f9ac":"code","8a07493d":"code","6868a526":"code","9433edec":"code","0491fbef":"code","6afdbb0a":"code","32e88a6a":"code","12f07a56":"code","31921f6d":"code","38efea17":"code","79e24cb7":"code","a3f86280":"code","eb9d4558":"code","c896ec55":"code","5b9b088d":"code","0657332d":"code","8875fc3e":"code","c6778f4f":"code","da538400":"code","33a516e1":"code","73a3fd39":"code","e15441a9":"code","8c4880ce":"code","dbeb5972":"code","95f28c75":"code","fea9d901":"code","dd3097bf":"code","ff236941":"code","6f7a68c3":"code","bffdb670":"code","ec14483f":"code","126564e3":"code","a90f4a0f":"code","ba2fa1b2":"code","1017f2a8":"code","a9cb19d0":"code","5fc5b3c2":"code","62adb65e":"code","6861d104":"code","e083a9e9":"code","01862d09":"code","c368a395":"markdown","fcdc5d29":"markdown","e9a5bc30":"markdown","facffbdc":"markdown","8772a371":"markdown","779939f5":"markdown","171a06d7":"markdown","aa75d722":"markdown","0f860b74":"markdown","1c56db54":"markdown","803eb441":"markdown","7312c38e":"markdown","a012d73e":"markdown","472af1f2":"markdown","c175c93d":"markdown","0c2edfff":"markdown","858f3a54":"markdown","ba1c9027":"markdown","652d4554":"markdown","354997c8":"markdown","7ee734dc":"markdown","b642fe78":"markdown","6bafd3fe":"markdown","b8e5a7bd":"markdown","08b4320a":"markdown","96ccd73a":"markdown","6e15bb22":"markdown","c7949ee5":"markdown","03aa431d":"markdown","199b6c7b":"markdown","8dcebd72":"markdown","8584c6a5":"markdown","8327543d":"markdown","07a1f03b":"markdown","2d6fd9f7":"markdown","1e7df7b5":"markdown","d706a3c8":"markdown","75e2c090":"markdown","353279aa":"markdown","137614f2":"markdown","491c163e":"markdown","92f7c4fa":"markdown","29200d3d":"markdown","f4e6f329":"markdown","35262b93":"markdown","3be6bb88":"markdown","735b3c4e":"markdown","54ee6cf8":"markdown","c563b0a4":"markdown","344c1547":"markdown","8dc09405":"markdown","9a0bbe82":"markdown","ad879561":"markdown","361a8b1d":"markdown","866b8f29":"markdown","b60ae280":"markdown","a461d2c3":"markdown","30bff527":"markdown","0833b56f":"markdown","4caf449f":"markdown","9a3a4b3c":"markdown","6d87d383":"markdown","73a16dec":"markdown","9660e3e6":"markdown"},"source":{"0b16359b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\/stocknews\"))","df6aa3d7":"Series = pd.Series([3,-5,7,4], index = ['a','b','c','d'])\n","3b4bb165":"type(Series)","3953ca81":"Series","9b1a5f90":"data = {'Country' : ['Belgium','India','Brazil'],\n        'Capital' : ['Brussels','New Delhi','Brassilia'],\n        'Population' : [1234,1234,1234]}\ndatas= pd.DataFrame(data,columns=['Country','Capital','Population'])","1b260e6f":"print(type(data))\nprint(type(datas))","084e3707":"dictionary={\"Name\":[\"John\",\"James\",\"Awi\",\"Kewi\"],\n           \"Age\":[15,16,17,18]}\nprint(dictionary)","7c519c7d":"data_dict = pd.DataFrame(data=dictionary,index=range(4),columns=[\"Name\",\"Age\"])\nprint(data_dict)","92b8c7b1":"dict_new={\"Name\":[\"King\",\"Arthur\",\"Jurdi\",\"Hirdi\"],\n           \"Age\":[25,35,45,55]}\ndict_new=pd.DataFrame(data=dict_new,index=range(4),columns=[\"Name\",\"Age\"])\nprint(dict_new)\n","a308aa33":"data_dict = pd.concat([data_dict,dict_new],axis = 0, ignore_index=True)\nprint(data_dict)","202ffed7":"df = pd.read_csv(\"..\/input\/stocknews\/upload_DJIA_table.csv\")\ntype(df)","0d5942b8":"df.head()","fa542ea9":"# pd.read_excel('filename')\n# pd.to_excel('dir\/dataFrame.xlsx', sheet_name='Sheet1')","7b630a03":"# pd.read_sql(query,connection_object) -> Reads from a SQL table\/database\n# pd.read_table(filename) -> From a delimited text file(like TSV)\n# pd.read_json(json_string) -> Reads from a json formatted string, URL or file\n# pd.read_html(url) -> Parses an html URL, string or file and extracts tables to a list of dataframes\n# pd.read_clipboard() -> Takes the contentes of your clipboard and passes it to read_table()\n# pd.DataFrame(dict) -> From a dict, keys for columns names, values for data as lists","adf66f7c":"# df.to_csv(filename) -> Writes to a CSV file\n# df.to_excel(filename) -> Writes on an Excel file\n# df.to_sql(table_name, connection_object) -> Writes to a SQL table\n# df.to_json(filename) -> Writes to a file in JSON format\n# df.to_html(filename) -> Saves as an HTML table\n# df.to_clipboard() -> Writes to the clipboard","025e3dcd":"pd.DataFrame(np.random.rand(20,5)) # row , column","ab667999":"df.info()","828044f0":"df.shape","e1333fd6":"df.index","909ab866":"df.columns","67df79e8":"for col in df.columns:\n    print(col)","8d9e45a5":"df.count()","bfd87c96":"df.sum()","13dd9ca9":"df.sample(3)","3ac1e30f":"df.cumsum().head()","19d83056":"df.min()","22504aa8":"df.max()","958975fe":"print(\"df: \",df['Open'].idxmin())\nprint(\"series\", Series.idxmin())","790f7c44":"print(\"df: \",df['Open'].idxmax())\nprint(\"series: \",Series.idxmax())","85f6f9ac":"df.describe()","8a07493d":"df[['Open','High','Low']].describe()","6868a526":"df.mean()","9433edec":"df.median()","0491fbef":"df.quantile([0.25,0.75])","6afdbb0a":"df.quantile([0.5])","32e88a6a":"df.var()","12f07a56":"df.std()","31921f6d":"df.cummax()","38efea17":"df.cummin()","79e24cb7":"df['Open'].cumprod().head()","a3f86280":"len(df)","eb9d4558":"df.isnull().head()","c896ec55":"df.isnull().sum()","5b9b088d":"df.corr()","0657332d":"import seaborn as sns\nsns.heatmap(df.corr(),annot=True)\nplt.show()","8875fc3e":"Series['b']","c6778f4f":"df[1982:]","da538400":"df.iloc[[0],[3]]","33a516e1":"df.loc[5:7]","73a3fd39":"df['Open'].nunique()","e15441a9":"df['Open'].unique()","8c4880ce":"df.sample(frac=0.5).head()","dbeb5972":"df.nlargest(5,'Open')","95f28c75":"df.nsmallest(3,'Open')","fea9d901":"df[df.Open > 18281.949219]","dd3097bf":"filters = df.Date > '2016-06-27'\ndf[filters]","ff236941":"df.filter(regex='^L').head()","6f7a68c3":"df.sort_values('Open').head()","bffdb670":"df.sort_values(by='Date', ascending=True).head()","ec14483f":"df.sort_index().head()","126564e3":"df.rename(columns= {'Adj Close' : 'Adjclose'}).head()","a90f4a0f":"df[\"Difference\"] = df.High - df.Low\ndf.head()","ba2fa1b2":"print(df.index.name)\ndf.index.name = \"index_name\"\ndf.head()","1017f2a8":"df.drop(columns=['Adj Close']).head()","a9cb19d0":"Series.drop(['a'])","5fc5b3c2":"df.dtypes","62adb65e":"df.Date.astype('category').dtypes\n","6861d104":"df.head()","e083a9e9":"\ndf_new = df.head()\nmelted = pd.melt(frame=df_new,id_vars = 'Date', value_vars= ['Low'])\nmelted","01862d09":"df_new_1 = df.tail()\nmelted = pd.melt(frame=df_new_1,id_vars = 'Date', value_vars= ['Low','Close','High'])\nmelted","c368a395":"<hr>\n\n## df[n:n]\nThis code fetches data from N to N.","fcdc5d29":"<hr>\n\n## df.info()\nThis Code provides detailed information about our data.\n","e9a5bc30":"<hr>\n\n## df.loc[n:n]\nThis code allows us to fetch the data in the range we specify.","facffbdc":"<hr>\n\n## df.nlargest(n,'columnName')\nThis code brings N from the column where we have specified the largest data\n","8772a371":"<hr>\n\n## df.iloc[[n],[n]]\nThis code brings the data in the N row and N column in the DataFrame.","779939f5":"<hr>\n\n## df.corr()\n\nIt gives information about the correlation between the data.","171a06d7":"<hr>\n\n## df.describe()\n\nThis code provides basic statistical information about the data. \nThe numerical column is based","aa75d722":"<hr>\n\n## df.index\nThis code shows the total number of index found.","0f860b74":"<hr>\n\n<a id=\"eight\"><\/a>\n\n# 8. Sort Data","1c56db54":"<hr>\n\n## df.max()\nThis code brings up the largest among the data.","803eb441":"<hr>\n\n## Change Index Name\nChange index name to new index name","7312c38e":"<hr>\n\n## df.median()\nThis code returns median for columns with numeric values.","a012d73e":"<hr>\n\n## df.rename(columns={'columnName':newColumnName'})","472af1f2":"<hr>\n\n## Reference\n\n- Pandas Tutorial For Beginners\n(https:\/\/www.kaggle.com\/kralmachine\/pandas-tutorial-for-beginners#Sort-Data-)\n- Wikipedia Pandas\n(https:\/\/en.wikipedia.org\/wiki\/Pandas_(software))]","c175c93d":"<hr>\n\n## df.sum()\nThis code shows us the sum of the data in each column.","0c2edfff":"<hr>\n\n## df.std()\n\nThis code calculates the standard deviation value for each column with numeric value.","858f3a54":"<hr>\n\n## pd.melt(frame=dataFrameName,id_vars = 'columnName', value_vars= ['columnName']) \nThis code is confusing, so lets look at the example.","ba1c9027":"<hr>\n\n<a id=\"five\"><\/a>\n\n# 5. Create Test Objects","652d4554":"<hr>\n\n## idxmax()\nThis code returns the largest value in the data.","354997c8":"<hr>\n\n## df[df.columnNAME <  5]\nThis code returns the column name we have specified, which is less than 5.","7ee734dc":"<hr>\n\n## mySeries.drop(['a'])\nThis code allows us to delete the value specified in the series.","b642fe78":"<hr>\n\n## df.shape()\nThis code shows us the number of rows and columns.","6bafd3fe":"<hr>\n\n## Create Filter","b8e5a7bd":"<hr>\n\n## df.var()\nThis code calculates the variance value for each column with a numeric value.","08b4320a":"<hr>\n\n## df.cumsum()\nThis code gives us cumulative sum of the data.","96ccd73a":"<hr>\n\n<a id=\"six\"><\/a>\n\n# 6. Summarize Data","6e15bb22":"<hr>\n\n## Excel","c7949ee5":"<hr>\n\n## df.mean()\nThis code returns the mean value for the numeric column.","03aa431d":"<hr>\n\n## df['columnName'].nunique()\nThis code shows how many of the data that is not repeated.","199b6c7b":"<hr>\n\n## df.nsmallest(n,'columnName')\nThis code brings N from the column where we have specified the smallest data.","8dcebd72":"<hr>\n\n## df['columnName'] = df['columnName'].astype('dataType') \nThis code convert the column we specify into the data type we specify.","8584c6a5":"<hr>\n\n## df.min()\nThis code brings us the smallest of the data.","8327543d":"<hr>\n\n<a id=\"three\"><\/a>\n\n# 3. CSV, Excel and SQL databases\nWith pandas, we can open CSV, Excel and SQL databases","07a1f03b":"<hr>\n\n## df.sort_values('columnName',ascending=False)\nThis code is the column we specify in the form of high to low.","2d6fd9f7":"<hr>\n\n## Series['b']\nThis code returns data with a value of B in series.","1e7df7b5":"<hr>\n\n## df.isnull()\nChecks for null values, returns boolean.","d706a3c8":"<hr>\n\n## idxmin()\nThis code fetches the smallest value in the data,\nThe use on series and dataframe is different\n","75e2c090":"<hr>\n\n## df.sort_index()\nThis code sorts from small to larger according to the DataFrame index.","353279aa":"<hr>\n\n## df.quantile([0.25,0.75])\nThis code calculates the values 0.25 and 0.75 of the columns for each column.","137614f2":"<hr>\n\n## df.filter(regex='code')\nThis code allows regex to filter any data we want.  \n\nregex = regular expression","491c163e":"<hr>\n\n## df.drop(columns=['columnName']","92f7c4fa":"<hr>\n\n## df.dtypes\nThis code shows what data type of columns are. Boolean,int,float,object(String),data and categorical.","29200d3d":"<hr>\n\n## df.sort_values('columnName')\nThis code sorts the column we specify in the form of low to high.","f4e6f329":"<hr>\n\n<a id=\"ten\"><\/a>\n\n# 10. Drop Data","35262b93":"<hr>\n\n## Series ###","3be6bb88":"<hr>\n\n## df['columnName'].unique()\nThis code shows which of the data is repeated.","735b3c4e":"<hr>\n\n## DataFrame ","54ee6cf8":"<hr>\n\n## df.columns\nThis code shows all the columns contained in the data we have examined.","c563b0a4":"<a id=\"one\"><\/a>\n\n# 1. Import Libraries\n\n<hr>","344c1547":"<hr>\n\n<a id=\"two\"><\/a>\n\n# 2. Pandas Data Structure\n\nPandas has two types of data structures\n\n1. **Series** - one dimensional labeled array\n![141.PNG](attachment:141.PNG)\n2. **DataFrame** - two dimensional data \n![3211.jpg](attachment:3211.jpg)","8dc09405":"<hr>\n\n<a id=\"eleven\"><\/a>\n\n# 11. Convert Data Types","9a0bbe82":"<hr>\n\n## df.count()\nThis code shows us how many pieces of data are in each column.","ad879561":"<hr>\n\n<a id=\"seven\"><\/a>\n\n# 7. Selection & Filtering","361a8b1d":"<hr>\n\n## Defining New Column\nCreate a new column","866b8f29":"<hr>\n\n## df['columnName'].cumproad()\nThis code returns the cumulative production of the data.","b60ae280":"<hr>\n\n## len(df)\nThis code gives you how many data there is.","a461d2c3":"<hr>\n\n## df.cummin()\nThis code returns the cumulative min value of the data.\n","30bff527":"<hr>\n\n<a id=\"nine\"><\/a>\n\n# 9. Rename & Defining New & Change columns","0833b56f":"# Pandas Basic Tutorial\n\n* **Pandas** : \npandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool especially for **Table data** and **Time-series data**\n![212.png](attachment:212.png)\n![2.png](attachment:2.png)\n\n## Content\n1. [Import Libraries](#one)\n2. [Pandas Data Structure](#two)\n3. [CSV, Excel and SQL databases](#three)\n4. [Exporting Data](#four)\n5. [Create Test Objects](#five)\n6. [Summarize Data](#six)\n7. [Selection & Filtering](#seven)\n8. [Sort Data](#eight)\n9. [Rename & Defining New & Change columns](#nine)\n10. [Drop Data](#ten)\n11. [Convert Data Types](#eleven)\n<hr>\n\nHow to use this notebook :\n\nThere is only minimum explanation\n\nThis notebook could be helpful for who want to see how code works right away\n\nPlease upvote if it was helpful !! \n<hr>","4caf449f":"<hr>\n\n<a id=\"four\"><\/a>\n\n# 4. Exporting Data","9a3a4b3c":"<hr>\n\n## df.cummax()\n\nThis code calculates the cumulative max value between the data.","6d87d383":"<hr>\n\n## CSV","73a16dec":"<hr>\n\n## df.sample(frac=0.5)\nThis code selects the fractions of random rows and fetches the data to that extent.","9660e3e6":"<hr>\n\n## Others (json,SQL,table,html)"}}