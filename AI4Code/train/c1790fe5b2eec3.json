{"cell_type":{"ca4f239d":"code","8d562273":"code","15c96ba0":"code","5e313d22":"code","90d68c3a":"code","c6cb5f32":"code","f25c9302":"code","37a0a82d":"code","da576996":"code","472b310b":"code","2bb1db87":"code","14299bc7":"code","70a10950":"code","74a6ca67":"code","41f72f14":"code","3488c44f":"code","2b8bccdc":"code","f2367c03":"code","b3f72878":"code","93e664ae":"code","3dabe1ec":"code","e2e30464":"code","edfad419":"code","65d4b4a0":"code","04bfbad9":"code","0097d933":"code","164e3ffc":"code","30fcb2f8":"code","54146eec":"code","93f0b277":"code","fe589c55":"code","b415d27e":"code","ada62370":"code","b5e20e6a":"code","04f794c6":"code","1fe0840c":"code","453b08d0":"code","14af10d4":"code","37b0b2c2":"code","085f5b78":"code","bb130ef4":"code","971f1782":"markdown","badaf861":"markdown"},"source":{"ca4f239d":"#Importing the necessary libraries\nimport pandas as pd\nimport matplotlib.pylab as plt\nfrom matplotlib import pyplot\nimport seaborn as sns\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve, auc\nfrom numpy import expand_dims\nimport numpy as np\nimport glob\nimport os\nimport cv2","8d562273":"# Read the train csv file\nTrain_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\nTrain_df","15c96ba0":"#Finding unique patient ids from csv file\nprint(f\"The total patient ids are {Train_df['patient_id'].count()}, from those the unique ids are {Train_df['patient_id'].value_counts().shape[0]} \")","5e313d22":"#Display patient_id column \npatient_id = Train_df['patient_id'].unique()\npatient_id","90d68c3a":"#Remove the duplicate 'patiend_id'\ndf = Train_df.drop_duplicates(subset = \"patient_id\", keep='first') \ndf","c6cb5f32":"#Check whether any cell is empty or not\ndf.isnull().sum()","f25c9302":"# Replace empty cell with nan \ndf.replace('', np.nan, inplace=True)","37a0a82d":"#Remove all the rows which have null value\ndata = df.dropna()","da576996":"#Finding number of benign samples\nbenign = data[data['target'] == 0]\nbenign = benign.sample(800)                               #choose number of samples from benign \nbenign_image = benign['image_name'].tolist()              #convert the columan data into list\nbenign_image = [item + '.jpg' for item in benign_image]   #add the .jpg extension at the end of 'image_name'","472b310b":"benign_label = benign['target'].tolist()                  #Converted the labels into the list\nbenign_label = np.array(benign_label)                     #convert list into numpy array\nlen(benign_label)","2bb1db87":"#Divide the benign images into training, validation and test set\ntrain_b = benign_image[:500]\nval_b = benign_image[500:650]\ntest_b = benign_image[650:]","14299bc7":"#Divide the benign labels into training, validation and test set\ntrain_bl = benign_label[:500]\nval_bl = benign_label[500:650]\ntest_bl = benign_label[650:]","70a10950":"# dir is your directory path\nM_train = os.listdir('..\/input\/melanoma-512-images\/train\/') \nfile1 = len(M_train)\nprint(file1)","74a6ca67":"# dir is your directory path\nM_val = os.listdir('..\/input\/melanoma-512-images\/val\/') \nfile2 = len(M_val)\nprint(file2)","41f72f14":"# dir is your directory path\nM_test = os.listdir('..\/input\/melanoma-512-images\/test\/') \nfile3 = len(M_test)\nprint(file3)","3488c44f":"#Divide the malignant images into training, validation and test set\ntrain_m = M_train[:500]\nval_m = M_val[:150]\ntest_m = M_test[:150]","2b8bccdc":"#Function to convert the images into grayscale and numpy array. \ndef image(path, data):\n    output = []\n    for i in range(len(data)):\n        img_arr = cv2.imread(path + data[i], cv2.IMREAD_GRAYSCALE)\n        output.append(img_arr)\n    return np.array(output)","f2367c03":"#train, validation and test set melanoma images for model training\npath1 = '..\/input\/melanoma-512-images\/train\/'\ntrain_mimg = image(path1, train_m)\npath2 = '..\/input\/melanoma-512-images\/val\/'\nval_mimg = image(path2, val_m)\npath3 = '..\/input\/melanoma-512-images\/test\/' \ntest_mimg = image(path3, test_m)","b3f72878":"#Reshape the melanoma images\nimg_size = 512\ntrain_mimg = train_mimg.reshape(-1, img_size, img_size, 1)\nval_mimg = val_mimg.reshape(-1, img_size, img_size, 1)\ntest_mimg = test_mimg.reshape(-1, img_size, img_size, 1)","93e664ae":"print(len(train_mimg))\nprint(len(val_mimg))\nprint(len(test_mimg))","3dabe1ec":"#Divide the malignant labels into training, validation and test set\ntrain_ml = np.ones(500, dtype = int)\nval_ml = np.ones(150, dtype = int)\ntest_ml = np.ones(150, dtype = int)","e2e30464":"#Final train, validation and test set labels for model training\ny_train = np.concatenate((train_bl, train_ml))\ny_val = np.concatenate((val_bl, val_ml))\ny_test = np.concatenate((test_bl, test_ml))","edfad419":"#Function to resize the benign images and convert into grayscale and numpy array. \nimg_size = 512\ndef load_image(path, data_dir):\n    data = []\n    for i in range(len(data_dir)):\n        img_arr = cv2.imread(path + data_dir[i], cv2.IMREAD_GRAYSCALE)\n        resized_arr = cv2.resize(img_arr, (img_size, img_size)) # Reshaping images to preferred size\n        data.append(resized_arr)\n    return np.array(data)","65d4b4a0":"#train, validation and test set benign images for model training\npath_train = '\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/'\ntrain_bimg = load_image(path_train, train_b)\nval_bimg = load_image(path_train, val_b)\ntest_bimg = load_image(path_train, test_b)","04bfbad9":"#Reshape the benign images\ntrain_bimg = train_bimg.reshape(-1, img_size, img_size, 1)\nval_bimg = val_bimg.reshape(-1, img_size, img_size, 1)\ntest_bimg = test_bimg.reshape(-1, img_size, img_size, 1)","0097d933":"#Final train, validation and test set images for model training\ntrain = np.concatenate((train_bimg, train_mimg))\nval = np.concatenate((val_bimg, val_mimg))\ntest = np.concatenate((test_bimg, test_mimg))","164e3ffc":"# Normalize the data\nx_train = np.array(train) \/ 255\nx_val = np.array(val) \/ 255\nx_test = np.array(test) \/ 255","30fcb2f8":"#Train the model\nmodel = Sequential()\nmodel.add(Conv2D(32, (3,3) , strides = 1 , padding = 'same' , activation = 'linear' , input_shape = (512, 512, 1)))\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(64, (3,3) , strides = 1 , padding = 'same' , activation = 'linear'))\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(128, (3,3) , strides = 1 , padding = 'same' , activation = 'linear'))\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(128, (3,3) , strides = 1 , padding = 'same' , activation = 'linear'))\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(256, (3,3) , strides = 1 , padding = 'same' , activation = 'linear'))\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Flatten())\nmodel.add(Dense(units = 256, activation = 'linear'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(units = 1 , activation = 'sigmoid'))\nmodel.compile(optimizer = 'sgd' , loss = 'binary_crossentropy' , metrics = ['accuracy', keras.metrics.AUC()])\nmodel.summary()","54146eec":"history = model.fit(x_train, y_train, batch_size = 4, epochs = 30 , steps_per_epoch = 100, validation_data = (x_val, y_val))","93f0b277":"#Predict x_test set\npredictions = model.predict_classes(x_test)\npredictions = predictions.reshape(1,-1)[0]\npredictions[:300]","fe589c55":"#Calculate roc_auc_score\nrocaucscore = roc_auc_score(y_test, predictions)\nprint('ROC_AUC_SCORE: %.2f' % rocaucscore)","b415d27e":"#Calculate sensitivity and precision\ntp,fn,fp,tn = confusion_matrix(y_test, predictions, labels=[0,1]).ravel()   \nSensityvity = tp\/(tp+fn)\nprint('sensitivity:',Sensityvity)\nprecision = tp\/(tp+fp)\nprint('precision:',precision)\nprint('False Negatives:',fn)","ada62370":"# Read the test csv file\ntest_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')\ntest_df","b5e20e6a":"all_images = test_df['image_name'].tolist()              #convert the columan data into list\nall_images = [item + '.jpg' for item in all_images]      #add the .jpg extension at the end of 'image_name' to read image from the main folder","04f794c6":"#load test data and convert it into 512 grayscale images\npath_test = '\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/test\/'\ntest_data = load_image(path_test, all_images[:5491])","1fe0840c":"#reshape test images\ntest_imgs = test_data.reshape(-1, img_size, img_size, 1)","453b08d0":"#predict the probability of the class of test images\nprobabilities = model.predict(test_imgs)","14af10d4":"#convert the probability of the class into numpy array\nresult = np.array(probabilities)\nprint(result.shape)","37b0b2c2":"#store the probabitility of array into list\nfor i in range(len(result)):\n    result[i]=result[i][0]\nresult = list(result)","085f5b78":"#create data frame to store the result\ndf_result = pd.DataFrame(result, columns=['target'])\ndf_image = test_df['image_name']\n\nfinal_result = pd.concat([df_image, df_result], axis = 1)\nfinal_result.head()","bb130ef4":"#convert the data frame into csv file\nfinal_result.to_csv('submission.csv', header=True, index=False)","971f1782":"# About this notebook...","badaf861":"Note: We have only 64 unique melanoma samples. That's why I have used augmentated melanoma images. This is the link of augmented images dataset. "}}