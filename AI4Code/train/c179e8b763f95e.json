{"cell_type":{"7f2659e4":"code","7201ad25":"code","c29409fa":"code","41975e8f":"code","5e24c975":"code","da7b0383":"code","ed0fdf19":"code","e52976be":"code","357f975a":"code","ed52842f":"code","e342dc8f":"code","55f81ff1":"code","17bed289":"code","d2ef4b02":"code","c5aa3218":"code","ee9935b1":"code","4575a965":"code","5e44f4e2":"code","d6be28c9":"code","3b0e0d7b":"code","262d65a5":"code","4b3eaa33":"code","105a0459":"code","c73f3ead":"code","98cd8da4":"code","0024be50":"code","28823c39":"code","c72330a5":"code","581eddcb":"markdown","04c07c69":"markdown","735922b9":"markdown","e7979d7b":"markdown","8039fc36":"markdown","42fc080a":"markdown","072f09fb":"markdown"},"source":{"7f2659e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7201ad25":"import pandas as pd\n# !pip install openpyxl","c29409fa":"pd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)","41975e8f":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nrating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ndf = movie.merge(rating, how=\"left\", on=\"movieId\")\ndf.head()","5e24c975":"comment_counts = pd.DataFrame(df[\"title\"].value_counts())\ncomment_counts","da7b0383":"rare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\ncommon_movies = df[~df[\"title\"].isin(rare_movies)]\ncommon_movies.head()","ed0fdf19":"user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\") \nuser_movie_df.head()","e52976be":"random_user=28941","357f975a":"random_user_df =user_movie_df[user_movie_df.index == random_user]\nmovies_watched_rf =random_user_df.columns[random_user_df.notna().any()].tolist()\nlen(movies_watched_rf)","ed52842f":"movies_watched_same = user_movie_df[movies_watched_rf]\nmovies_watched_same.shape[0]","e342dc8f":"movies_watched_smDF = movies_watched_same.T.notna().sum()\nmovies_watched_smDF","55f81ff1":"movies_watched_smDF.index[movies_watched_smDF ==30]","17bed289":"movies_watched_smDF = movies_watched_smDF.reset_index()\nmovies_watched_smDF.columns = [\"userId\", \"movie_count\"]\nmovies_watched_smDF","d2ef4b02":"movies_watched_smDF[movies_watched_smDF ==33].count()","c5aa3218":" Recommed_movies_smDF= movies_watched_smDF[movies_watched_smDF[\"movie_count\"] > 20][\"userId\"]\nRecommed_movies_smDF.head()","ee9935b1":"final_recommend = pd.concat([movies_watched_same[movies_watched_same.index.isin(Recommed_movies_smDF)],\n                             random_user_df[movies_watched_rf]])\nfinal_recommend.head()","4575a965":"final_recommend.T.corr()","5e44f4e2":"corr_df = final_recommend.T.corr().unstack().drop_duplicates()\ncorr_df =pd.DataFrame(corr_df,\n                      columns=['Correlation'])\ncorr_df.index.names =['user_id_1', 'user_id_2']\ncorr_df = corr_df.reset_index()\ncorr_df","d6be28c9":"corr_df.user_id_1.unique()","3b0e0d7b":"corr_df.columns","262d65a5":"top_users =corr_df [(corr_df['user_id_1']== random_user) & (corr_df['Correlation'] >= 0.65)][['user_id_2', 'Correlation']].reset_index(drop=True)\ntop_users =top_users.sort_values(by ='Correlation',ascending =False)\ntop_users.rename(columns ={'user_id_2': 'userId'},inplace=True)\ntop_users","4b3eaa33":"rating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')","105a0459":"top_users_ratings =top_users.merge(rating[['userId',\n                                           'movieId', 'rating']],how ='inner')\ntop_users_ratings","c73f3ead":"top_users_ratings= top_users_ratings[top_users_ratings['userId'] !=random_user]","98cd8da4":"top_users_ratings['WeightedRating'] =top_users_ratings['Correlation'] * top_users_ratings['rating']","0024be50":"top_users_ratings.head()","28823c39":"top_users_ratings.groupby('movieId').agg({\"WeightedRating\": \"mean\"})","c72330a5":"recommendation_df = top_users_ratings.groupby('movieId').agg({\"WeightedRating\": \"mean\"})\n\nrecommendation_df = recommendation_df.reset_index()\n\nrecommendation_df[[\"movieId\"]].nunique()","581eddcb":"# User Based Movie Recommendation System","04c07c69":"Create correlation dataframe","735922b9":"## Demographic Filtering\n\n\nA user-based collaborative filtering recommendation system for preferences in movie selection could make predictions about which movie a user should like given a partial list of that user's tastes.\n\n   Before getting started with this  -\n* we need a metric to score or rate movie \n* Calculate the score for every movie \n* Sort the scores and recommend the best rated movie to the users.\n\nWe can use the average ratings of the movie as the score but using this won't be fair enough since a movie with 8.9 average rating and only 3 votes cannot be considered better than the movie with 7.8 as as average rating but 40 votes.\nSo, I'll be using IMDB's weighted rating (wr) which is given as :-\n\n![](https:\/\/image.ibb.co\/jYWZp9\/wr.png)\nwhere,\n* v is the number of votes for the movie;\n* m is the minimum votes required to be listed in the chart;\n* R is the average rating of the movie; And\n* C is the mean vote across the whole report\n\n","e7979d7b":"## Attribute Information of Movielens dataset\n\nThe two files from the data will be used in this study as rating.csv and movie.csv\n\n* rating.csv that contains ratings of movies by users:\n\n  * userId\n  *movieId\n  *rating\n  *timestamp\n* movie.csv that contains movie information:\n\n  * movieId\n  * title\n  * genresAttribute Information\n\n","8039fc36":"## Calculating the Weighted Average Recommendation Score","42fc080a":"We gather the data of our user and other users who watched 20 movies in common.","072f09fb":"We want to find users who watched the same 33 movies as the user. \"movies_watched_rf\" contains movies watched by the selected user. Users who have rated any of the 33 movies here are included in this dataset"}}