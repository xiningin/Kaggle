{"cell_type":{"40c704b0":"code","1ac9b51b":"code","27d5dd16":"code","af0aa31e":"code","0d87d4f2":"code","07b61904":"code","776da962":"code","9a221822":"code","5203d15d":"code","f27e5d6d":"code","0f34eb09":"code","b407bae7":"code","cf5d1439":"code","6981c177":"code","1009acce":"code","69efb2c9":"code","a483f2c0":"code","9328cb8f":"code","a37940e5":"code","aa0799bf":"code","31e71b22":"code","f5f8f7c7":"code","fdc929d9":"code","ee65d5d6":"code","6471e208":"code","ed7b162a":"code","c4d02020":"code","97ca0251":"code","9cbf5a9a":"code","b2f67de3":"code","373ce494":"code","97c4e84c":"code","d149f112":"code","66e660e8":"code","4c16b74d":"code","cc2de37e":"code","9417a075":"code","c359fb0d":"code","5b4ae3bb":"code","859e8c17":"code","9d6bd415":"code","c90b8e70":"code","73ab90a6":"code","b6a86ea8":"code","9aca097e":"code","190d9293":"code","48d9af97":"code","703ae105":"code","b3cf2976":"code","9e0132b3":"code","aa919cea":"code","c9f083cb":"code","07a75880":"code","3038cfd0":"code","9398f9e3":"code","61f2248a":"code","1231a79a":"code","f9ed1bf4":"code","f279b6fe":"code","48d8c9c3":"code","c4fd1322":"code","954caf00":"code","c19ff2aa":"code","46d1c23c":"code","b2c2b66f":"code","74a1c15e":"code","22417e31":"code","49402f17":"code","b5c80bfb":"code","3584bdb5":"code","10e958d5":"code","bcbccef9":"code","9d66f756":"code","7549ff37":"code","bbdececa":"code","957c0fd2":"code","e8113945":"markdown","e49e2956":"markdown","2172ab94":"markdown","f6ef1717":"markdown","3051f644":"markdown","40064bb3":"markdown","c83e00b3":"markdown"},"source":{"40c704b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1ac9b51b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","27d5dd16":"df = pd.read_csv('\/kaggle\/input\/water-potability\/water_potability.csv')\ndf.head()","af0aa31e":"df.shape","0d87d4f2":"df.info()","07b61904":"df.describe()","776da962":"df['Potability'].value_counts()\/len(df['Potability'])","9a221822":"df.isnull().sum()","5203d15d":"df.columns","f27e5d6d":"list1 = ['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate', 'Conductivity',\n       'Organic_carbon', 'Trihalomethanes', 'Turbidity']","0f34eb09":"fig = plt.figure(figsize = (14,40))\na = 10 #rows\nb = 2 #columns\nc = 1 #increment\n\nfor i in list1:\n    \n    plt.subplot(a,b,c)\n  \n    sns.distplot(df[i], color='firebrick')\n    \n    \n    c= c+1\n    \n    \n    \nplt.show()","b407bae7":"fig = plt.figure(figsize = (14,40))\na = 10 #rows\nb = 2 #columns\nc = 1 #increment\n\nfor i in list1:\n    plt.subplot(a,b,c)\n    plt.xlabel(i, fontsize=15)\n    sns.boxplot(x=df[i], color='firebrick')\n    c= c+1\n    \nplt.show()","cf5d1439":"sns.pairplot(df, hue='Potability')","6981c177":"df.isnull().any(axis=1).sum()","1009acce":"df['ph'].fillna(df['ph'].mean(), inplace=True)","69efb2c9":"df['ph'].isnull().sum()","a483f2c0":"df['Sulfate'].fillna(df['Sulfate'].mean(), inplace=True)","9328cb8f":"df['Sulfate'].isnull().sum()","a37940e5":"df['Trihalomethanes'].fillna(df['Trihalomethanes'].mean(), inplace=True)","aa0799bf":"df['Trihalomethanes'].isnull().sum()","31e71b22":"df.isnull().sum()","f5f8f7c7":"X=df[df.columns[:-1]]","fdc929d9":"X.head()","ee65d5d6":"y = df['Potability']","6471e208":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","ed7b162a":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.20, random_state=0)","c4d02020":"scaled = StandardScaler()","97ca0251":"X_train_scaled = scaled.fit_transform(X_train)","9cbf5a9a":"X_test_scaled = scaled.transform(X_test)","b2f67de3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import precision_score, recall_score, roc_auc_score, roc_curve, classification_report, confusion_matrix","373ce494":"Log_reg = LogisticRegression(solver='liblinear', penalty='l2',class_weight='balanced')","97c4e84c":"Log_reg.fit(X_train_scaled, y_train)","d149f112":"y_pred= Log_reg.predict(X_test_scaled)","66e660e8":"print(classification_report(y_test,y_pred))","4c16b74d":"print(confusion_matrix(y_test, y_pred))","cc2de37e":"from sklearn.tree import DecisionTreeClassifier","9417a075":"dt = DecisionTreeClassifier(max_depth=3,  min_samples_leaf=30)","c359fb0d":"dt.fit(X_train_scaled, y_train)","5b4ae3bb":"y_pred1=dt.predict(X_test_scaled)","859e8c17":"print(classification_report(y_pred,y_test))","9d6bd415":"print(confusion_matrix(y_test, y_pred1))","c90b8e70":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier","73ab90a6":"rf = RandomForestClassifier()","b6a86ea8":"param_grid = {'n_estimators':[300,500], 'criterion':['gini', 'entropy'],'max_depth':[3,5], 'min_samples_leaf':[30,50],'max_features':[5,9]}","9aca097e":"gscv_rf = GridSearchCV(rf,param_grid=param_grid, scoring='roc_auc', n_jobs=1, verbose=3)","190d9293":"gscv_rf.fit(X_train_scaled, y_train)","48d9af97":"print(gscv_rf.best_params_)","703ae105":"print(gscv_rf.best_score_)\nprint(gscv_rf.best_estimator_)\nprint(gscv_rf.scorer_)","b3cf2976":"y_pred_rf = gscv_rf.predict(X_test_scaled)","9e0132b3":"print(roc_auc_score(y_true=y_test,y_score=gscv_rf.predict_proba(X_test_scaled)[:, 1]))\nprint(confusion_matrix(y_test,y_pred_rf))\nprint(classification_report(y_test, y_pred_rf))","aa919cea":"ada =  AdaBoostClassifier()","c9f083cb":"param_grid = {'n_estimators':[500,700],'learning_rate':[0.01,0.025, 0.05]}","07a75880":"gscv_ada = GridSearchCV(ada,param_grid=param_grid, cv=3, scoring='roc_auc', verbose=3, n_jobs=1)","3038cfd0":"gscv_ada.fit(X_train_scaled,y_train)","9398f9e3":"print(gscv_ada.best_params_)","61f2248a":"print(gscv_ada.best_score_)","1231a79a":"y_pred_ada = gscv_ada.predict(X_test_scaled)","f9ed1bf4":"\nprint(roc_auc_score(y_true=y_test,y_score=gscv_ada.predict_proba(X_test_scaled)[:, 1]))\nprint(confusion_matrix(y_test,y_pred_ada))\nprint(classification_report(y_test,y_pred_ada))","f279b6fe":"gb = GradientBoostingClassifier()","48d8c9c3":"param_grid = {'n_estimators':[300,500],\n              'learning_rate':[0.01,0.001],\n              'max_depth': [3,5],\n             'min_samples_leaf':[30,50]}","c4fd1322":"gscv_gb = GridSearchCV(gb, param_grid=param_grid, scoring='roc_auc', verbose=3, n_jobs=-1,cv=3)","954caf00":"gscv_gb.fit(X_train_scaled, y_train)","c19ff2aa":"print(gscv_gb.best_params_)\nprint(gscv_gb.best_score_)","46d1c23c":"y_pred_gb = gscv_gb.predict(X_test_scaled)","b2c2b66f":"print(roc_auc_score(y_true=y_test, y_score=gscv_gb.predict_proba(X_test_scaled)[:,1]))\nprint(classification_report(y_test,y_pred_gb))\nprint(confusion_matrix(y_test,y_pred_gb))","74a1c15e":"xg = XGBClassifier()","22417e31":"\nmodel_parameters = { 'n_estimators': [300,500],\n                    'learning_rate': [0.01, 0.025, 0.001],\n                    'max_depth': [2, 3],\n                    'min_child_weight': [ 20, 30]\n                    }","49402f17":"gscv_xg = GridSearchCV(xg, param_grid=model_parameters, cv=3, verbose=3, n_jobs=1, scoring='roc_auc')","b5c80bfb":"gscv_xg.fit(X_train_scaled, y_train)","3584bdb5":"gscv_xg.best_params_","10e958d5":"gscv_xg.best_score_","bcbccef9":"y_pred_xg = gscv_xg.predict(X_test_scaled)","9d66f756":"print(roc_auc_score(y_true=y_test, y_score=gscv_xg.predict_proba(X_test_scaled)[:,1]))\nprint(classification_report(y_test,y_pred_xg))\nprint(confusion_matrix(y_test,y_pred_xg))","7549ff37":"def plot_roc_curve( y_pred_rf, y_pred_ada, y_pred_gb, y_pred_xg , *args):\n    '''\n    Generate test roc curve\n    '''\n\n    AUC_rf = roc_auc_score(y_test, y_pred_rf)\n    AUC_ad = roc_auc_score(y_test, y_pred_ada)\n    AUC_grd = roc_auc_score(y_test, y_pred_gb)\n    AUC_xg = roc_auc_score(y_test, y_pred_xg)\n    if len(args) == 0:\n        print(\"RF_AUC =\" ,AUC_rf )\n        print(\"ADA_AUC = \", AUC_ad)\n        print(\"GB_AUC=\" , AUC_grd )\n        print(\"XG_AUC=\", AUC_xg )\n        fpr_rf, tpr_rf, thresholds = roc_curve(y_test, y_pred_rf)\n        fpr_ada, tpr_ada, thresholds = roc_curve(y_test, y_pred_ada)\n        fpr_gb, tpr_gb, thresholds = roc_curve(y_test, y_pred_gb)\n        fpr_xg, tpr_xg, thresholds = roc_curve(y_test, y_pred_xg)\n        roc_plot(fpr_rf, tpr_rf, fpr_ada, tpr_ada, fpr_gb, tpr_gb, fpr_xg, tpr_xg)\n\n    else:\n        AUC_Valid = roc_auc_score(args[0], args[1])\n        print(\"Train AUC = \", AUC_Train)\n        print(\"Test AUC = \", AUC_Test)\n        print(\"Validation AUC = \", AUC_Valid)\n        fpr, tpr, thresholds = roc_curve(y_train, train_pred_prob)\n        fpr_tst, tpr_tst, thresholds = roc_curve(y_test, test_pred_prob)\n        fpr_val, tpr_val, thresholds = roc_curve(args[0], args[1])\n        roc_plot(fpr, tpr, fpr_tst, tpr_tst, fpr_val, tpr_val)","bbdececa":"def roc_plot(fpr_rf, tpr_rf, fpr_ad, tpr_ad, fpr_grd, tpr_grd, fpr_xg, tpr_xg, *args):\n    '''\n    Generates roc plot\n    '''\n\n    fig = plt.plot(fpr_rf, tpr_rf, label='ROC_RF')\n    fig = plt.plot(fpr_ad, tpr_ad, label='ROC_AD')\n    fig = plt.plot(fpr_grd, tpr_grd, label= 'ROC_GRD')\n    fig = plt.plot(fpr_xg, tpr_xg, label = 'ROC_XG')\n\n    if len(args) == 0:\n        plt.xlim([0.0, 1.0])\n        plt.ylim([0.0, 1.0])\n        plt.title(\"ROC curve using \")\n        plt.xlabel('False Positive Rate (1 - Specificity)')\n        plt.ylabel('True Positive Rate (Sensitivity)')\n        plt.legend(loc='lower right')\n        plt.grid(True)\n        plt.show()\n\n    else:\n        fig = plt.plot(args[0], args[1], label='Validation')\n        plt.xlim([0.0, 1.0])\n        plt.ylim([0.0, 1.0])\n        plt.title(\"ROC curve using \")\n        plt.xlabel('False Positive Rate (1 - Specificity)')\n        plt.ylabel('True Positive Rate (Sensitivity)')\n        plt.legend(loc='lower right')\n        plt.grid(True)\n        plt.show()","957c0fd2":"plt.subplots(figsize=(15, 10))\nRF = gscv_rf.predict_proba(X_test_scaled)[:, 1]\nAda = gscv_ada.predict_proba(X_test_scaled)[:, 1]\nGRD = gscv_gb.predict_proba(X_test_scaled)[:, 1]\nXG = gscv_xg.predict_proba(X_test_scaled)[:, 1]\n\n\nplot_roc_curve(RF, Ada,\n               GRD, XG)","e8113945":"# Gradient Boosting","e49e2956":"# XG Boosting","2172ab94":"# Decision Tree","f6ef1717":"# Random Forest","3051f644":"# AdaBoostClassifier","40064bb3":"# Logistic Regression","c83e00b3":"# Univariate Analysis"}}