{"cell_type":{"75299b1e":"code","0c9c481e":"code","b3c07e4c":"code","de2f92f3":"code","ef0dd8be":"code","a49dbc07":"code","6fc54f42":"code","63ffc7cf":"code","2bfaeee2":"code","55d0a9f2":"code","bd0d8f4e":"code","6a59b385":"code","921957c1":"code","4a8cfdad":"code","e8752600":"code","c7d2fb6f":"code","f552c172":"code","b15e0f38":"code","79869839":"code","cc8bca40":"markdown","4c28aafb":"markdown","abeecd9c":"markdown","0d0b862d":"markdown"},"source":{"75299b1e":"# Install dicom-csv, utils for gathering, aggregation and handling metadata from DICOM files.\n# This allows us to join DICOMs into volumes in a correct order without relying on file names.\n\n!pip install git+https:\/\/github.com\/neuro-ml\/dicom-csv.git","0c9c481e":"# install deep-pipe, collection of tools for dl experiments,\n# here just for the vizualisation\n\n!pip install deep-pipe","b3c07e4c":"from dicom_csv import join_tree, aggregate_images, load_series","de2f92f3":"# Single row of df corresponds to a single DICOM file (unique SOPInstanceUID in DICOM's slang)\n# First run takes ~3-4 mins, since it actually opens all available DICOMs inside a directory,\n# so I recommend you to store the resulting DataFrame\n\ndf = join_tree('\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train', verbose=True, relative=False, force=True)\ndf.head(3)","ef0dd8be":"df['NoError'].value_counts()","a49dbc07":"# Single row of df_images corresponds to a single volume (unique SeriesInstanceUID in DICOM's slang)\n\n\ndf_images = aggregate_images(df.query('NoError == True'))\ndf_images.head(3)","6fc54f42":"df_images.RescaleSlope.value_counts().sort_index()","63ffc7cf":"df_images.RescaleIntercept.value_counts().sort_index()","2bfaeee2":"image = load_series(df_images.iloc[0], orientation=False)","55d0a9f2":"from dpipe.im.visualize import slice3d","bd0d8f4e":"# There is a slide bar you could move to go over different slices (run notebook to see it).\n\nslice3d(image)","6a59b385":"import matplotlib.pyplot as plt\n%matplotlib inline","921957c1":"df_images.columns","4a8cfdad":"df_images['PixelArrayShape'].value_counts()","e8752600":"df_images['PatientSex'].value_counts()","c7d2fb6f":"df_images['PixelSpacing0'].value_counts().sort_index()","f552c172":"plt.hist(df_images['PixelSpacing0'], bins=15)\nplt.xlabel('Pixel spacing, mm.')\nplt.ylabel('Number of images.');","b15e0f38":"df_images['SlicesCount'].value_counts().sort_index()","79869839":"plt.hist(df_images['SlicesCount'], bins=15)\nplt.xlabel('Number of slices in a single 3D image.')\nplt.ylabel('Number of images.');","cc8bca40":"# DICOMs metadata\n\nPixel space (mm) distribution, SliceCount's distribution","4c28aafb":"# Install dicom-csv, deep-pipe.","abeecd9c":"# Load images and visualize\n\n## RescaleSlope, RescaleIntercept\n\nRecall that there are two important parameters `RescaleSlope` and `RescaleIntercept`, which you would\ncompletely loose if you simply did pydicom.dcmread('image.dcm'), see for example https:\/\/stackoverflow.com\/questions\/10193971\/rescale-slope-and-rescale-intercept .\n\n`load_series` takes them into account.","0d0b862d":"# Collect metadata from all DICOMs."}}