{"cell_type":{"c521b1bc":"code","f3eda219":"code","204b78d7":"code","973a92b9":"code","3d400de8":"code","dbac55da":"code","7b104600":"code","c2c6ed2b":"code","21e4124b":"code","c5e83677":"markdown","c99586f0":"markdown","2192d57e":"markdown","2c404cad":"markdown","01ed25aa":"markdown","a370b581":"markdown","00d9fd15":"markdown"},"source":{"c521b1bc":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder,MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split,StratifiedKFold\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport gc ","f3eda219":"train = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")","204b78d7":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df\n\ntrain = reduce_memory_usage(train)\ntest = reduce_memory_usage(test)\ngc.collect()","973a92b9":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","3d400de8":"from IPython.display import clear_output\n!pip install pycaret --user\nclear_output()","dbac55da":"import numpy as np\nimport pandas as pd\nimport pycaret\nfrom pycaret.regression import *\nfrom sklearn.model_selection import train_test_split","7b104600":"TARGET = \"Cover_Type\"\nSESSION_ID = 2021\nSEED = 42\nFEATURE = \"feature\"\nEXPERIMENT_NAME = 'tabular_prediction'\nN_SPLITS = 5","c2c6ed2b":"test_pred = np.zeros(test.shape[0])\n\nskf = StratifiedKFold(n_splits=N_SPLITS, shuffle=False, random_state=SEED)\n\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X=train, y=train[TARGET])):\n    setup(data = train.iloc[val_idx], \n      target = TARGET, \n      session_id=SESSION_ID, \n      experiment_name=EXPERIMENT_NAME,\n      silent=True,\n      normalize=True,\n      transformation=True\n     )\n    \n    lightgbm = create_model('lightgbm')\n    \n#     lgbm_params = {\n# #                 'num_leaves': np.arange(10,200,10),\n#                 'max_depth': np.arange(1,10,1),\n#                 'learning_rate': [0.1,0.05,0.001,0.0005,0.0001,0.00005,0.00001],\n# #                 'n_estimators':np.arange(100,2000,100),\n# #                 'min_child_samples':np.arange(10,1000,10),\n# #                 'subsample_freq':np.arange(0,1000,10)\n#              }\n\n#     tuned_lightgbm = tune_model(lightgbm, custom_grid = lgbm_params)\n    tuned_lightgbm = tune_model(lightgbm)\n    \n    final_lightgbm = finalize_model(tuned_lightgbm)\n    \n    test_pred += predict_model(final_lightgbm, data=test)[\"Label\"] \/ N_SPLITS\n    gc.collect()","21e4124b":"submission = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\")\nsubmission.Cover_Type = (test_pred - 0.5).astype(int) + 1\nsubmission.to_csv(\"submission.csv\",index=False)\nsubmission.head(10)","c5e83677":"# import libraries","c99586f0":"# install pycaret ","2192d57e":"# reduce memory ","2c404cad":"# predict test data","01ed25aa":"# submission","a370b581":"# load Data","00d9fd15":"# global variables"}}