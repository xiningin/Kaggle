{"cell_type":{"c288a26e":"code","a05c4ded":"code","08dbe3c9":"code","63a19fd1":"code","c1d05763":"code","42cbbd3d":"code","f2e0798b":"code","71439fcf":"code","cdf9e667":"code","57f6b666":"code","8ccc1277":"code","1f321107":"code","3bc6487c":"code","1cde7a88":"code","7fd9c5a6":"code","568aca89":"code","9096b530":"code","60ccbf64":"code","5b308bc7":"code","a243365f":"code","260941d7":"code","9b57b2e5":"code","41dc72d2":"code","f765b785":"code","54f9003b":"code","c3584026":"code","7199a4c2":"code","8b35aa48":"code","1a31a57e":"code","abb22e2c":"code","5ce982a1":"code","9178ea59":"code","6a0124f7":"code","51fd39e7":"code","35dbf8e7":"code","8e18fe4d":"code","9a6da606":"code","d0e0ad8b":"code","43eca0e0":"code","a83ef08c":"code","173f992d":"code","db900600":"code","e8fb1b3c":"code","5a04f4ee":"code","48e84f6e":"markdown","9010bfbf":"markdown","e358f06d":"markdown","4cba9a03":"markdown","744c934a":"markdown","e84069ca":"markdown","b513390e":"markdown","727860ed":"markdown","b9bd51ea":"markdown","5d81fac7":"markdown","cd108fc6":"markdown","4b14d680":"markdown","6d4ca035":"markdown","dd2b66b1":"markdown","7d469689":"markdown","7d15e8fa":"markdown","ac5feec6":"markdown","71481232":"markdown","3a25ebb0":"markdown","ea0b94c9":"markdown","da197bf8":"markdown","3a2dd193":"markdown","c0269ecc":"markdown","d195374f":"markdown","29d0b42f":"markdown","ff0c464e":"markdown","c90e8d32":"markdown"},"source":{"c288a26e":"import pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt \nimport matplotlib.dates as md\n%matplotlib inline\nimport seaborn as sns\nimport statsmodels.api as sm    ","a05c4ded":"%cd C:\\Musfique\\Springboard Data Analytics CT\\Capstone 2\\Telco Customer Churn","08dbe3c9":"telco_df = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ntelco_df.head()","63a19fd1":"telco_df.dtypes","c1d05763":"telco_df.TotalCharges = pd.to_numeric(telco_df.TotalCharges, errors='coerce')\ntelco_df['TotalCharges'].dtypes","42cbbd3d":"telco_df.isnull().sum()","f2e0798b":"telco_df.dropna(inplace=True)\ntelco_df.isnull().sum()","71439fcf":"df_cleaned = telco_df.drop(['customerID'], axis=1)\ndf_cleaned.head()","cdf9e667":"for item in df_cleaned.columns:\n    try:\n        df_cleaned[item] = df_cleaned[item].str.lower()\n    except:\n        print(item, \"couldn't convert\")\ndf_cleaned.head(20)","57f6b666":"columns_to_convert = ['Partner', 'Dependents', 'PhoneService', 'PaperlessBilling', 'Churn']\nfor item in columns_to_convert:\n    df_cleaned[item].replace(to_replace='yes', value=1, inplace=True)\n    df_cleaned[item].replace(to_replace='no',  value=0, inplace=True)\ndf_cleaned.head()","8ccc1277":"corr_mat = df_cleaned.corr()\nplt.figure(figsize=(16, 6))\nheat_map = sns.heatmap(corr_mat, vmin=-1, vmax=1, annot=True)\nheat_map.set_title('Correlation Heatmap')","1f321107":"ax = sns.countplot(x='SeniorCitizen', data=df_cleaned)\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['SeniorCitizen'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nax = sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['SeniorCitizen'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","3bc6487c":"ax = sns.countplot(x='Partner', data=df_cleaned)\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['Partner'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nax = sns.countplot(x='Partner', data=df_cleaned, hue='Churn')\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['Partner'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","1cde7a88":"ax = sns.countplot(x='Dependents', data=df_cleaned)\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['Dependents'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nax = sns.countplot(x='Dependents', data=df_cleaned, hue='Churn')\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['Dependents'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","7fd9c5a6":"ax = sns.countplot(x='PhoneService', data=df_cleaned)\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['PhoneService'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nax = sns.countplot(x='PhoneService', data=df_cleaned, hue='Churn')\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['PhoneService'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","568aca89":"ax = sns.countplot(x='PaperlessBilling', data=df_cleaned)\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['PaperlessBilling'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nax = sns.countplot(x='PaperlessBilling', data=df_cleaned, hue='Churn')\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['PaperlessBilling'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","9096b530":"ax = sns.countplot(x='gender', data=df_cleaned)\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['gender'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nax = sns.countplot(x='gender', data=df_cleaned, hue='Churn')\nplt.figure()\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['gender'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","60ccbf64":"plt.figure(figsize=(9, 4))\nax = sns.countplot(x='PaymentMethod', data=df_cleaned)\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['PaymentMethod'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nplt.figure(figsize=(9, 4))\nax = sns.countplot(x='PaymentMethod', data=df_cleaned, hue='Churn')\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['PaymentMethod'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","5b308bc7":"plt.figure(figsize=(7, 4))\nax = sns.countplot(x='Contract', data=df_cleaned)\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['Contract'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nplt.figure(figsize=(7, 4))\nax = sns.countplot(x='Contract', data=df_cleaned, hue='Churn')\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['Contract'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","a243365f":"plt.figure(figsize=(7, 4))\nax = sns.countplot(x='MultipleLines', data=df_cleaned)\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['MultipleLines'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nplt.figure(figsize=(7, 4))\nax = sns.countplot(x='MultipleLines', data=df_cleaned, hue='Churn')\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['MultipleLines'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","260941d7":"plt.figure(figsize=(7, 4))\nax = sns.countplot(x='InternetService', data=df_cleaned)\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['InternetService'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nplt.figure(figsize=(7, 4))\nax = sns.countplot(x='InternetService', data=df_cleaned, hue='Churn')\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['InternetService'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","9b57b2e5":"plt.figure(figsize=(7, 4))\nax = sns.countplot(x='OnlineSecurity', data=df_cleaned)\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['OnlineSecurity'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nplt.figure(figsize=(7, 4))\nax = sns.countplot(x='OnlineSecurity', data=df_cleaned, hue='Churn')\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['OnlineSecurity'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","41dc72d2":"plt.figure(figsize=(7, 4))\nax = sns.countplot(x='OnlineBackup', data=df_cleaned)\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['OnlineBackup'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nplt.figure(figsize=(7, 4))\nax = sns.countplot(x='OnlineBackup', data=df_cleaned, hue='Churn')\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['OnlineBackup'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","f765b785":"plt.figure(figsize=(7, 4))\nax = sns.countplot(x='DeviceProtection', data=df_cleaned)\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['DeviceProtection'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nplt.figure(figsize=(7, 4))\nax = sns.countplot(x='DeviceProtection', data=df_cleaned, hue='Churn')\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['DeviceProtection'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","54f9003b":"plt.figure(figsize=(7, 4))\nax = sns.countplot(x='TechSupport', data=df_cleaned)\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['TechSupport'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nplt.figure(figsize=(7, 4))\nax = sns.countplot(x='TechSupport', data=df_cleaned, hue='Churn')\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['TechSupport'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","c3584026":"plt.figure(figsize=(7, 4))\nax = sns.countplot(x='StreamingTV', data=df_cleaned)\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['StreamingTV'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nplt.figure(figsize=(7, 4))\nax = sns.countplot(x='StreamingTV', data=df_cleaned, hue='Churn')\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['StreamingTV'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","7199a4c2":"plt.figure(figsize=(7, 4))\nax = sns.countplot(x='StreamingMovies', data=df_cleaned)\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['StreamingMovies'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()\n\nplt.figure(figsize=(7, 4))\nax = sns.countplot(x='StreamingMovies', data=df_cleaned, hue='Churn')\n#ax=sns.countplot(x='SeniorCitizen', data=df_cleaned, hue='Churn')\n\ntotal = len(df_cleaned['StreamingMovies'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/2.5\n        y = p.get_y() + p.get_height()+1\n        ax.annotate(percentage, (x, y))\nplt.show()","8b35aa48":"sns.displot(df_cleaned, x='MonthlyCharges', hue='Churn', element='step')","1a31a57e":"sns.displot(df_cleaned, x='TotalCharges', hue='Churn', element='step')","abb22e2c":"sns.displot(df_cleaned, x='tenure', hue='Churn', element='step')","5ce982a1":"sns.pairplot(df_cleaned,vars = ['tenure','MonthlyCharges','TotalCharges'], hue=\"Churn\")","9178ea59":"df_lr = df_cleaned.drop('gender', 1)\ndf_lr.head()","6a0124f7":"df_dummies = pd.get_dummies(df_lr)\ndf_dummies.head()","51fd39e7":"x = df_dummies.drop('Churn', 1)\ny = df_dummies['Churn']","35dbf8e7":"X = df_dummies.drop('Churn', 1)\ny = df_dummies['Churn']","8e18fe4d":"# split X and y into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=0)","9a6da606":"# import the class\nfrom sklearn.linear_model import LogisticRegression","d0e0ad8b":"# instantiate the model (using the default parameters)\nlogreg = LogisticRegression()","43eca0e0":"# fit the model with data\nlogreg.fit(X_train,y_train)","a83ef08c":"#\ny_pred=logreg.predict(X_test)","173f992d":"# import the metrics class\nfrom sklearn import metrics\ncnf_matrix = metrics.confusion_matrix(y_test, y_pred)\ncnf_matrix","db900600":"class_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","e8fb1b3c":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))","5a04f4ee":"y_pred_proba = logreg.predict_proba(X_test)[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","48e84f6e":"Step 1: Get data","9010bfbf":"* The 'TotalCharges' column is supposed to be numeric.","e358f06d":"# Removing 'customerID' from the Dataset","4cba9a03":"# Converting 'TotalCharges' to a Numeric Data Type:","744c934a":"# Converting All 'yes\/no' Variables to '1\/0':","e84069ca":"Insights:\n\n1. 33.6% customers paying through Electronic Checks. Churn is significantly higher in customers paying through electronic checks (45.2%) compared to those having other Payments Methods (15-19%).\n\n2. 55.1% of the customers have Month-to-Month Contract. Churn is significantly higher in customers having a month-to-month contract (42.6%) compared to those having other Contracts (3-11%).\n\n3. 9.7% of the customers don't have Phone Service. Of the 90.3% having Phone Service, 46.7% have Multiple Lines. Churn is observed to be bit lower in customers not having Multiple Lines (25.1%) compared to those having Multiple Lines (28.7%).\n\n4. 78.4% customers have Internet Service. Higher proportion of the customers subscribed Internet Service through Fiber Optic (41.8%) have churned compared to those subscribed the service through DSL (18.9%).\n\n5. Churn is significantly higher in customers who haven't subscribed to these serives - Online Security, Online Backup, Device Protection and Tech Support (41.9%, 39.9%, 39.1% and 41.7% respectively) compared to those who subcribed these services (14.6%, 21.4%, 22.7% and 15.2% respectively) \n\n5. Churn is slightly higher (less than 3%) in customers who haven't subscribed streaming TV or movies too.","b513390e":"Insights: Churn clearly shows some correlation with all variables shown on the heatmap except phone service.","727860ed":"Plotting Distributions:","b9bd51ea":"# Converting All Strings to Lowercase:","5d81fac7":"# Correlation Heatmap:","cd108fc6":"Insights:\n\n1. 16.2% of the customers are seen to have churned. Churn is significantly higher in Senior Citizens (42%) compared to customers who aren't Senior Citizens (23.6%).\n\n2. 48.3% of the customers have Partners. Churn is significantly higher in customers that don't have partners (33.1%) compared to those having Partners (19.7%).\n\n3. 29.8% of customers have Dependents. Churn is significantly lower in customers having Dependents (15.4%) compared to those not having Dependents (31.2%).\n\n4. 59.3% of the customers have Paperless Billing. Churn is significantly higher in customers having paperless billing (33.6%) compared to those not having Paperless Billing (16.5%).\n\n5. 90.3% of the customers have Phone Service. Churn is not much different irrespective of customers enjoying a Phone Service (26.8%) or not (24.7%).\n\n6. Male - Female ratio is 50.5% vs 49.5%. Churn is almost unbiased in terms of gender.","4b14d680":"# Analyzing Other Categorical Variables:","6d4ca035":"# Exploratory Data Analysis (EDA)","dd2b66b1":"# Removing Rows having Missing Values from the Dataset:","7d469689":"Insights: \n\nBoth distributions and pair plot confirms the following:\n\n1. The lower the total charges and tenure, the higher the churn.\n\n2. Churn, conversely, is higher for highers bands of monthly charges.","7d15e8fa":"# Testing Logistic Regression as a Predictive Model:","ac5feec6":"# Checking Missing Values in the Dataset:","71481232":"Let's convert all the categorical variables into dummy variables","3a25ebb0":"# Analyzing Continuous Variables:","ea0b94c9":"# Reading the Dataset in the Notebook:","da197bf8":"# Setting the Dataset Path:","3a2dd193":"'Insights:\n    \nThe accuracy of predicting churn using logistic regression looks quite high (80.77%).'","c0269ecc":"- Since the gender is seen to remain unbiased towards churn, gender has been dropped.","d195374f":"Pair Plots:","29d0b42f":"# Analyzing Binary Categorical Variables:","ff0c464e":"# Importing Libraries:","c90e8d32":"# Exploring & Cleaning the Dataset:"}}