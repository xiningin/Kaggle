{"cell_type":{"32d51616":"code","98a0b38f":"code","d6c0750c":"code","a4973134":"code","3a3186d6":"code","cac4e8d3":"code","fa1a1df8":"code","8e48ee49":"code","5542dbb9":"code","f952c57b":"code","fed349d2":"code","ee119c90":"code","eb9210d6":"code","e0bfd837":"code","4b95c22c":"code","faa68ac6":"code","d99b43c1":"code","c7356fe0":"code","a6892f66":"code","a1e96d58":"markdown","3e746ac3":"markdown"},"source":{"32d51616":"# function ClickConnect(){\n#     console.log(\"Working\"); \n#     document.querySelector(\"colab-connect-button\").click()\n# }\n# setInterval(ClickConnect, 30000)","98a0b38f":"IMAGE_SIZE = 512\nEPOCHS = 20\nBATCH_SIZE = 10\nWORKERS = 2\n\n# LR_CHOICE = 'lr_scheduler'\nLR = 1e-4\nPATIENCE = 3\nFACTOR = 0.1\n\nLR_CHOICE = 'lr_fn'\nLR_FN = {\n    'LR_START': '1e-5',\n    'LR_MAX': '1e-4',\n    'LR_MIN': '1e-5',\n    'LR_RAMPUP_EPOCHS': '5',\n    'LR_SUSTAIN_EPOCHS': '0',\n    'LR_EXP_DECAY': '.8'\n}\n\n# NETWORK = 'efficientdet-d0'\n# NETWORK = 'efficientdet-d1'\n# NETWORK = 'efficientdet-d2'\n# NETWORK = 'efficientdet-d3'\nNETWORK = 'efficientdet-d4'\n# NETWORK = 'efficientdet-d5'\n# NETWORK = 'efficientdet-d6'\n# NETWORK = 'efficientdet-d7'\n\nNUM_CLASS = 80\nLIMIT = (0, 0)","d6c0750c":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef lrfn(epoch, lr_fn_dicts):\n    if epoch < int(lr_fn_dicts['LR_RAMPUP_EPOCHS']):\n        lr = (float(lr_fn_dicts['LR_MAX']) - float(lr_fn_dicts['LR_START'])) \/ int(lr_fn_dicts['LR_RAMPUP_EPOCHS']) * epoch + \\\n            float(lr_fn_dicts['LR_START'])\n    elif epoch < int(lr_fn_dicts['LR_RAMPUP_EPOCHS']) + int(lr_fn_dicts['LR_SUSTAIN_EPOCHS']):\n        lr = float(lr_fn_dicts['LR_MAX'])\n    else:\n        lr = (float(lr_fn_dicts['LR_MAX']) - float(lr_fn_dicts['LR_MIN'])) * \\\n            float(lr_fn_dicts['LR_EXP_DECAY'])**(epoch - int(lr_fn_dicts['LR_RAMPUP_EPOCHS']) - \\\n            int(lr_fn_dicts['LR_SUSTAIN_EPOCHS'])) + float(lr_fn_dicts['LR_MIN'])\n    return lr\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x, LR_FN) for x in rng]\nif LR_CHOICE == 'lr_fn':\n    plt.plot(rng, y);\n    \nnew_lr_fn = ''\nfor k in LR_FN.keys():\n    new_lr_fn += '{}={}'.format(k, LR_FN[k])\n    new_lr_fn += ','\nnew_lr_fn = new_lr_fn[:-1]","a4973134":"import os\nimport torch\nimport platform\n\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\"\n\nUSE_KAGGLE = True if os.environ.get('KAGGLE_KERNEL_RUN_TYPE', False) else False # kggle or colab\nUSE_TPU = True if os.environ.get('TPU_NAME', False) else False # TPU or GPU\n\nPLATFORM = '' # LINUX, COLAB, KAGGLE, WINDOWS\nif platform.system() == 'Linux':\n    if not USE_KAGGLE: # colab\n        PLATFORM = 'COLAB'\n    else:\n        PLATFORM = 'KAGGLE'\nelif platform.system() == 'Windows':\n    PLATFORM = 'WINDOWS'\nelse:\n    raise SystemError\n\nprint(PLATFORM)\n\nassert PLATFORM != ''","3a3186d6":"if PLATFORM == 'COLAB':\n    !nvidia-smi\n    \n    if not USE_TPU:\n        assert 'Tesla P100-PCIE-16GB' == torch.cuda.get_device_name(0)","cac4e8d3":"if PLATFORM == 'COLAB':\n    from google.colab import drive\n    drive.mount('\/content\/gdrive')","fa1a1df8":"# if PLATFORM != 'WINDOWS':\n#     !free -h","8e48ee49":"# if PLATFORM != 'WINDOWS'\n#     !cat \/proc\/cpuinfo","5542dbb9":"DATASET_PATH = ''\nDATASET_ROOT = ''\nDATASET= ''\nif PLATFORM == 'COLAB':\n    DATASET_PATH = '\/content\/gdrive\/My Drive\/Competitions\/AIdea\/\u5c55\u5834\u6c11\u773e\u7279\u5fb5\u5206\u6790\/show'\n    DATASET_ROOT = '\/content'\n    DATASET = 'h5'\nelif PLATFORM == 'WINDOWS':\n    DATASET_PATH = 'D:\\\\show'\n    DATASET_ROOT = DATASET_PATH\n    DATASET = 'limit'\nelif PLATFORM == 'KAGGLE':\n    DATASET_PATH = '\/kaggle\/input\/show-dataset\/show'\n    DATASET_ROOT = DATASET_PATH\n    DATASET = 'limit'\n    \nTRAIN_FILENAME = 'train_small.hdf5'\nVAL_FILENAME = 'test.hdf5'\n\nassert DATASET_PATH != ''\nassert DATASET_ROOT != ''\nassert DATASET != ''","f952c57b":"if PLATFORM == 'COLAB':\n    train_file = '{}\/{}\/{}'.format(DATASET_PATH, IMAGE_SIZE, TRAIN_FILENAME)\n    val_file = '{}\/{}\/{}'.format(DATASET_PATH, IMAGE_SIZE, VAL_FILENAME) \n    test_file = '{}\/test\/test.json'.format(DATASET_PATH)\n\n    if os.path.isfile(TRAIN_FILENAME) and os.path.isfile(VAL_FILENAME):\n        if not (os.stat(train_file).st_size == os.stat(TRAIN_FILENAME).st_size):\n            print('Download data from DRIVE')\n            !cp '{train_file}' .\n            !cp '{val_file}' .\n            !mkdir test\n            !cp '{test_file}' test\/\n    else:\n        print('Download data from DRIVE')\n        !cp '{train_file}' .\n        !cp '{val_file}' .\n        !mkdir test\n        !cp '{test_file}' test\/","fed349d2":"if PLATFORM == 'COLAB':\n    %cd '\/content\/gdrive\/My Drive\/Competitions\/AIdea\/\u5c55\u5834\u6c11\u773e\u7279\u5fb5\u5206\u6790\/EfficientDet'\nelif PLATFORM == 'WINDOWS':\n    %cd EfficientDet\nelif PLATFORM == 'KAGGLE':\n    %cd \/kaggle\/input\/efficientdet","ee119c90":"# cd datasets","eb9210d6":"# !python coco.py","e0bfd837":"%run main.py --dataset {DATASET} --dataset_root {DATASET_ROOT} --image_size {IMAGE_SIZE} \\\n    --num_epoch {EPOCHS} --batch_size {BATCH_SIZE} --workers {WORKERS} --lr {LR} --num_class {NUM_CLASS} \\\n    --limit {LIMIT[0]} {LIMIT[1]} --network {NETWORK} --lr_choice {LR_CHOICE} --lr_fn {new_lr_fn}","4b95c22c":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef plotIt(csv_path, x_str, y_str):\n    if USE_KAGGLE:\n        csv_path = '\/kaggle\/working\/' + csv_path\n    df = pd.read_csv(csv_path)\n    plt.plot(df[x_str], df[y_str]);\n\nplotIt('iteration_loss.csv', 'iteration', 'iteration_loss')","faa68ac6":"plotIt('epoch_loss.csv', 'epoch_num', 'mean_epoch_loss')","d99b43c1":"plotIt('eval_train_result.csv', 'epoch_num', 'map50')","c7356fe0":"plotIt('eval_val_result.csv', 'epoch_num', 'map50')","a6892f66":"# !pip download -d install_all -r requirements.txt","a1e96d58":"# Plot Losses","3e746ac3":"# Train EfficientDet"}}