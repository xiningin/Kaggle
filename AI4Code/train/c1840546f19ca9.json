{"cell_type":{"7042490e":"code","4a9f32aa":"code","fd3f82f1":"code","3684818f":"code","823f7b86":"code","ffd6a978":"code","8cc7cfe7":"code","f37b8d2f":"code","e05a6b80":"code","94c6f3db":"code","ca608589":"code","e4fef898":"code","dc7833fc":"code","31ffa138":"code","888a4258":"code","9eba79c8":"code","e9d07e9b":"code","00f27f73":"code","29d1949f":"code","1143ab5c":"code","e9ae44e2":"code","50fbd88b":"code","b8277991":"code","94b3bab3":"markdown","41a8b198":"markdown","155c1685":"markdown","ff4b8310":"markdown","4a3d21d1":"markdown","dc4ecf6b":"markdown","5884335b":"markdown","c37bc6f2":"markdown","8ce9b05b":"markdown","ff8f8024":"markdown","28070925":"markdown","38e3c294":"markdown","bbd8565c":"markdown","c77006e3":"markdown","41809d69":"markdown","cf0f445e":"markdown","fbd9645b":"markdown","951be6aa":"markdown","78da64c6":"markdown","11179e6d":"markdown"},"source":{"7042490e":"# Importing necessary libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMClassifier\nfrom sklearn.preprocessing import LabelEncoder\n\n%matplotlib inline","4a9f32aa":"# Reading in the data\ndf = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')","fd3f82f1":"# Taking a look at the first 5 rows of data\ndf.head()","3684818f":"# Getting the shape of the dataset\ndf.shape","823f7b86":"df.dtypes.value_counts().sort_values(ascending=False)","ffd6a978":"df.select_dtypes('object').apply(pd.Series.nunique, axis = 0)","8cc7cfe7":"df['patient_id'].value_counts()","f37b8d2f":"df['patient_id'].value_counts().mean()","e05a6b80":"df['target'].value_counts()","94c6f3db":"def plot_analysis(col_name, df, plot_kind='bar'):\n    \"\"\"\n    Function to plot two subplots containing Joe's and non-Joe's counts of data points for a given feature.\n    :param col_name: Column name of the feature to be analysed\n    :param df: DataFrame containing the source of data\n    :plot_kind: Line plot or Bar Plot\n    :return True: Boolean indicating that the analysis has been plotted\n    \"\"\"\n    \n    df_benign = df[df['target']==0]\n    df_malignant = df[df['target']!=0]\n    fig, axs = plt.subplots(2,figsize=(26,8))\n    fig.suptitle('Difference between ' + col_name + ' of patients in benign and malignant cases ')\n    axs[0].set_title('Benign')\n    axs[0].set_ylabel('Number of cases', fontsize=12)\n    axs[1].set_title('Malignant')\n    axs[1].set_ylabel('Number of cases', fontsize=12)\n    axs[1].set_xlabel(col_name, fontsize=12)\n    if plot_kind == 'line':\n        axs[0].plot(df_benign[col_name].value_counts().index, df_benign[col_name].value_counts().values)\n        axs[1].plot(df_malignant[col_name].value_counts().index, df_malignant[col_name].value_counts().values)\n    elif plot_kind == 'bar':\n        axs[0].bar(df_benign[col_name].value_counts().index, df_benign[col_name].value_counts().values)\n        axs[1].bar(df_malignant[col_name].value_counts().index, df_malignant[col_name].value_counts().values)\n    return True","ca608589":"plot_analysis('sex', df)","e4fef898":"plot_analysis('anatom_site_general_challenge', df)","dc7833fc":"plot_analysis('diagnosis', df)","31ffa138":"plot_analysis('age_approx', df)","888a4258":"df.isnull().sum()","9eba79c8":"def data_preparation(df, evaluation = False):\n    # Filling in the missing values\n    df['sex'] = df['sex'].fillna('male')\n    df['age_approx'] = df['age_approx'].fillna(df['age_approx'].mean())\n    df['anatom_site_general_challenge'] = df['anatom_site_general_challenge'].fillna('torso')\n\n    # Label encoding sex\n    labelencoder = LabelEncoder()\n    df['sex'] = labelencoder.fit_transform(df['sex'])\n\n    df = pd.get_dummies(df, columns=['anatom_site_general_challenge'])\n\n    if evaluation:\n        X_return = df.drop(['image_name', 'patient_id'], axis = 1)\n        return X_return\n    else:\n        X_return = df.drop(['image_name', 'patient_id', 'benign_malignant','target','diagnosis'], axis = 1)\n        return X_return, df['target']\n","e9d07e9b":"X, y = data_preparation(df)","00f27f73":"# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42, stratify = y)\n\n# Gradient Boosting Model\nclf = LGBMClassifier(\n            objective='binary',\n            n_estimators=100000,\n            num_leaves=10,\n            learning_rate=0.1,\n            max_depth=16,\n            subsample_for_bin= 200000,\n            subsample=1,\n            subsample_freq= 200,\n            silent=-1,\n            verbose=-1,\n            min_split_gain=0.0001,\n            min_child_samples=800,\n            )\n\n# Training the model\nclf.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_test, y_test)], eval_metric='auc', verbose=200, early_stopping_rounds=1000)\n","29d1949f":"test_df  = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')\ntest_df.head()","1143ab5c":"# Preprocessing test data\neval_X = data_preparation(test_df, evaluation = True)","e9ae44e2":"# Getting the prediction probability\nprediction_list = clf.predict_proba(eval_X)\nfinal_pred_list = [a[1] for a in prediction_list]","50fbd88b":"# Appending to the test dataframe\ntest_df['target'] = final_pred_list","b8277991":"test_df[['image_name','target']].to_csv('submission.csv',index=False)","94b3bab3":"Creating a helper function for further analysis.","41a8b198":"Performing Data pre-processing on the training data","155c1685":"The proportion of anatom_site_general_challenge is also very similar in proportion.","ff4b8310":"The mean age of all the patients in both cases is around 40-60.","4a3d21d1":"## Data Modelling","dc4ecf6b":"There are large number of cases in the dataset that are benign and low number of cases in the dataset that are malignant. ","5884335b":"In this notebook, I will be going over the train.csv file and perform EDA as well as create a basic model using the patients data. In a realistic scenario, the pictures in the data of the competition should be used for modelling.","c37bc6f2":"Checking for null values show that there are some missing values for sex, age_approx and anatom_site_general_challenge. Filling the null values with the mostly observed value.","8ce9b05b":"There are a total of 33126 rows of data and 8 columns including 2 target columns, i.e. benign_maginant and target.","ff8f8024":"The mean number of images for the 2056 patients is 16.","28070925":"# Exploring the patients data and starter model","38e3c294":"Now, seeing how many unique categorical types of data are in the columns having 'object' as a datatype.","bbd8565c":"Looks the proportion of male and female patients is quite similar for the benign and malignant cases","c77006e3":"Now, finding the number of photos present of each patient.","41809d69":"Getting the final output file","cf0f445e":"Checking the data types, it is clear that most of the columns contain objects.","fbd9645b":"There are a large number of unknown diagnosis for benign cases but in malignant cases, it is all melanoma.","951be6aa":"So, the max number of images for a single patient is 115 and the minimum number of images for a single patient is 2.","78da64c6":"Performing data pre-processing","11179e6d":"I will try my best to use the pictures next to get better accuracy for this competition."}}