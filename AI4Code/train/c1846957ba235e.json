{"cell_type":{"29b8e2a6":"code","07b7ea0c":"code","9ec32f76":"code","0bcfaa51":"code","d588734e":"code","545427ae":"code","9794d014":"code","10010bc5":"code","f251f6b9":"code","fb58b928":"markdown","f5da2397":"markdown","9cbf675f":"markdown"},"source":{"29b8e2a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","07b7ea0c":"data = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\n\ndata.tail()","9ec32f76":"data.isnull().sum()","0bcfaa51":"data.drop(['Date', 'Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm'], axis=1, inplace=True)\n\n\nfor i in range(0, len(data.columns)):\n    if i==16 or i==18:\n        continue  # \u00c7\u00fcnk\u00fc raintoday ve raintomorrow column'lar\u0131 yes ve no'dan olu\u015fuyor.\n    \n    mean = data.iloc[:, i].mean()\n    \n    data.iloc[:, i] = [mean if str(each)=='nan' else each for each in data.iloc[:, i]]  # Bo\u015f data'lara, ayn\u0131 column'daki di\u011fer data'lar\u0131n ortalama de\u011ferini ekledim.\n\n    \ndata.RainToday = [1 if each=='Yes' else 0 for each in data.RainToday]\ndata.RainTomorrow = [1 if each=='Yes' else 0 for each in data.RainTomorrow]\n\n\ndata.isnull().sum()  # you can see alteration","d588734e":"y = data.RainTomorrow.values\nx_head = data.drop('RainTomorrow', axis=1).values","545427ae":"#normalize\nx = (x_head - np.min(x_head)) \/ (np.max(x_head) - np.min(x_head))","9794d014":"#split\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)","10010bc5":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=3)\n\nknn.fit(x_train, y_train)\nknn.score(x_test, y_test)","f251f6b9":"n = 10\nscore_list = []\n\nfor i in range(1, n):\n    percent = (100 \/ (n-1)) * i\n    print(f\"%{int(percent)}\")\n    \n    knn2 = KNeighborsClassifier(n_neighbors = i)\n    knn2.fit(x_train, y_train)\n    \n    score_list.append(knn2.score(x_test, y_test))\n\nprint(\"Max score:\", max(score_list))\nprint(\"Best K number:\", score_list.index(max(score_list)) + 1)\n    \nplt.plot(range(1, n), score_list)\nplt.xlabel('n_neighbors')\nplt.ylabel('score')\nplt.show()","fb58b928":"# Data Visualization","f5da2397":"# KNN with sklearn","9cbf675f":"# Conclusion\n* For max score, we should choose 5 number."}}