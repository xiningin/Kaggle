{"cell_type":{"e6d1baf2":"code","ad789c51":"code","89bd9738":"code","48f45905":"code","a203105e":"code","b22df99d":"code","65507dc1":"code","4bf1db87":"code","d9d4014f":"code","7300a967":"code","4a06be5a":"code","fbd87e7a":"code","e4d48221":"code","9ef3fdc8":"code","02517252":"code","451c3dcb":"markdown","2fdad2d5":"markdown","fdd4193c":"markdown"},"source":{"e6d1baf2":"!pip install git+https:\/\/github.com\/tensorflow\/docs","ad789c51":"import numpy as np,pylab as pl,pandas as pd\nimport imageio,h5py\nimport tensorflow as tf\ntf.random.set_seed(23)\nfrom tensorflow_docs.vis import embed\nimport tensorflow_hub as th","89bd9738":"def timg(img):\n    img=tf.constant(img)\n    img=tf.image.convert_image_dtype(img,tf.uint8)\n    pl.imshow(img.numpy()); pl.title(img.shape);\ndef tanimate(images):\n    converted_images=np.clip(images*255,0,255)\\\n    .astype(np.uint8)\n    imageio.mimsave('animation.gif',converted_images)\n    return embed.embed_file('animation.gif')","48f45905":"fpath='..\/input\/classification-of-handwritten-letters\/'\nf='LetterColorImages_123.h5'\nf=h5py.File(fpath+f,'r')\nkeys=list(f.keys()); print(keys)\nx=np.array(f[keys[1]],dtype='float32')\/255\nx=np.array(tf.image.resize(x,[128,128]),dtype='float32')\ny=np.array(f[keys[2]],dtype='int32')\\\n.reshape(-1,1)-1\nN=len(y); n=int(.1*N)\nshuffle_ids=np.arange(N)\nnp.random.RandomState(23).shuffle(shuffle_ids)\nx,y=x[shuffle_ids],y[shuffle_ids]\nx.shape,y.shape","a203105e":"def interpolate_hypersphere(v1,v2,steps):\n    v1norm=tf.norm(v1)\n    v2norm=tf.norm(v2)\n    v2normalized=v2*(v1norm\/v2norm)\n    vectors=[]\n    for step in range(steps):\n        interpolated=v1+(v2normalized-v1)*step\/(steps-1)\n        interpolated_norm=tf.norm(interpolated)\n        interpolated_normalized=\\\n        interpolated*(v1norm\/interpolated_norm)\n        vectors.append(interpolated_normalized)\n    return tf.stack(vectors)","b22df99d":"imgs=interpolate_hypersphere(x[7],x[8],120)\ntanimate(imgs)","65507dc1":"timg(np.concatenate([x[7],imgs[40],\n                     imgs[80],x[8]],axis=1))","4bf1db87":"handle='https:\/\/tfhub.dev\/google\/progan-128\/1'\nprogan=th.load(handle).signatures['default']\nlatent_dim=512","d9d4014f":"def interpolate_between_vectors(steps,latent_dim=512):\n    tf.random.set_seed(1)\n    v1=tf.random.normal([latent_dim])\n    v2=tf.random.normal([latent_dim])\n    vectors=interpolate_hypersphere(v1,v2,steps)\n    interpolated_images=progan(vectors)['default']\n    return interpolated_images","7300a967":"imgs2=interpolate_between_vectors(30)\ntanimate(imgs2)","4a06be5a":"timg(np.concatenate([imgs2[0],imgs2[10],\n                     imgs2[-10],imgs2[-1]],axis=1))","fbd87e7a":"tf.random.set_seed(23)\ninitial_vector=tf.random.normal([1,latent_dim])\ninitial_img=progan(initial_vector)['default'][0]\ntf.random.set_seed(123)\ntarget_vector=tf.random.normal([1,latent_dim])\ntarget_img=progan(target_vector)['default'][0]\ntimg(np.concatenate([initial_img,target_img],axis=1))","e4d48221":"def find_closest_latent_vector(initial_vector,target_img,\n                               steps,steps_per_image):\n    images=[]; losses=[]\n    vector=tf.Variable(initial_vector)  \n    optimizer=tf.optimizers.Adam(learning_rate=.01)\n    loss_fn=tf.losses.MeanAbsoluteError(reduction=\"sum\")\n    for step in range(steps):\n        if (step%100)==0: print()\n        print('.',end='')\n        with tf.GradientTape() as tape:\n            image=progan(vector.read_value())['default'][0]\n            if (step%steps_per_image)==0:\n                images.append(image.numpy())\n            target_image_difference=loss_fn(image,target_img[:,:,:3])\n            regularizer=tf.abs(tf.norm(vector)-np.sqrt(latent_dim))     \n            loss=target_image_difference+regularizer\n            losses.append(loss.numpy())\n        grads=tape.gradient(loss,[vector])\n        optimizer.apply_gradients(zip(grads,[vector]))\n    return images,losses\nsteps=200; steps_per_image=5\nimages,loss=find_closest_latent_vector(initial_vector,target_img,\n                                       steps,steps_per_image)","9ef3fdc8":"tanimate(np.stack(images))","02517252":"timg(np.concatenate([images[0],images[10],\n                     images[-10],target_img],axis=1))","451c3dcb":"## Symbol images & hypersphere interpolation","2fdad2d5":"## Latent space interpolation using a pre-trained Progressive GAN","fdd4193c":"## Code modules, functions, & links\n[Generate Artificial Faces with CelebA Progressive GAN Model](https:\/\/github.com\/tensorflow\/hub\/blob\/master\/examples\/colab\/tf_hub_generative_image_module.ipynb)"}}