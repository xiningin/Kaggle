{"cell_type":{"7a279783":"code","26d1384a":"code","d492bfa8":"code","ffa417bb":"code","ef9b2704":"code","524ec2c3":"code","0d54fe44":"code","99d4745c":"code","ad25d051":"code","1cd4963a":"code","65809c14":"code","27a48f76":"code","086cf681":"code","d49f4d50":"code","4634cfa4":"code","bdea6f19":"code","ec44af92":"code","34421456":"code","b5af535e":"code","2755a825":"code","88d9f55e":"markdown","8432f75f":"markdown","a847eb97":"markdown","392fff46":"markdown","9a2784f8":"markdown","ce7f3928":"markdown","7b20c607":"markdown"},"source":{"7a279783":"from typing import List\nfrom os.path import join as pjoin\n\nimport numpy as np\nimport pandas as pd\n\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline","26d1384a":"path = '..\/input\/stanford-covid-vaccine\/'\ntrain = pd.read_json(f'{path}\/train.json',lines=True).drop(columns='index')\ntest = pd.read_json(f'{path}\/test.json', lines=True).drop(columns='index')\nsub = pd.read_csv(f'{path}\/sample_submission.csv')","d492bfa8":"STRUCTURE_CODE = {\n    '(': 0, \n    '.': 1, \n    ')': 2\n}\n\nPREDICTED_LOOP_TYPE_CODE = {\n    'H': 0, \n    'E': 1, \n    'B': 2, \n    'M': 3, \n    'X': 4, \n    'S': 5, \n    'I': 6\n}\n\nSEQUANCE_CODE = {\n    'U': 0, \n    'C': 1, \n    'A': 2, \n    'G': 3\n}\n\nX_COLS = ['sequence', 'structure', 'predicted_loop_type']\nX_MAPPINGS = [SEQUANCE_CODE, STRUCTURE_CODE, PREDICTED_LOOP_TYPE_CODE]\nY_COLS = ['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']","ffa417bb":"def get_x_y_atten(\n    df_row: pd.Series,\n    root: str = pjoin(path,'bpps')\n):\n    x_array = []\n    for col, mapping in zip(X_COLS, X_MAPPINGS):\n        x_array.append(np.array([mapping[el] for el in df_row[col]]))\n    x_array = np.stack(x_array, axis=-1)\n    \n    y_array = [np.array(df_row[col]) for col in Y_COLS]\n    y_array = np.stack(y_array, axis=-1)\n    \n    bpps = np.load(pjoin(root, df_row.id + '.npy'))\n    \n    return x_array, y_array, bpps","ef9b2704":"class Compose(object):\n    \n    def __init__(\n        self,\n        transforms: List\n    ):\n        self.transforms = transforms\n        \n    def __call__(self, x_arr, y_arr, atten_arr):\n        for trans in self.transforms:\n            x_arr, y_arr, atten_arr = trans(x_arr, y_arr, atten_arr)\n        return x_arr, y_arr, atten_arr","524ec2c3":"class TemporalFlip(object):\n    \n    def __init__(\n        self,\n        p: float = 0.5\n    ):\n        self.p = p\n        \n    def __call__(self, x_arr, y_arr, atten_arr):\n        \n        if np.random.binomial(n=1, p=self.p):\n            x_arr = np.flip(x_arr, axis=0).copy()\n            y_arr = np.flip(y_arr, axis=0).copy()\n            atten_arr = np.flip(np.flip(atten_arr, axis=0), axis=1).copy()\n            \n        return x_arr, y_arr, atten_arr","0d54fe44":"flip_aug = TemporalFlip(p=1.0)","99d4745c":"x, y, atten = get_x_y_atten(train.iloc[0])\nx_a, y_a, atten_a = flip_aug(x, y, atten)","ad25d051":"plt.title('Original Structure')\nplt.plot(x[:,0])\nplt.show()\nplt.title('Auged Structure')\nplt.plot(x_a[:,0])\nplt.show()","1cd4963a":"plt.title('Original Sequence')\nplt.plot(y[:,0])\nplt.show()\nplt.title('Auged Sequence')\nplt.plot(y_a[:,0])\nplt.show()","65809c14":"plt.title('Original bpps')\nplt.imshow(atten)\nplt.show()\nplt.title('Auged bpps')\nplt.imshow(atten_a)\nplt.show()","27a48f76":"class GaussianTargetNoise(object):\n    \n    def __init__(\n        self,\n        p: float = 0.5,\n        gaus_std: float = 1.0,\n    ):\n        self.p = p\n        self.gaus_std = gaus_std\n        \n    def __call__(self, x_arr, y_arr, atten_arr):\n        \n        if np.random.binomial(n=1, p=self.p):\n            y_arr = y_arr + np.random.normal(scale=self.gaus_std, size=y_arr.shape)\n            \n        return x_arr, y_arr, atten_arr","086cf681":"gaus_aug = GaussianTargetNoise(p=1.0, gaus_std=0.3)","d49f4d50":"x, y, atten = get_x_y_atten(train.iloc[0])\nx_a, y_a, atten_a = gaus_aug(x, y, atten)","4634cfa4":"for i in range(5):\n    plt.title(Y_COLS[i])\n    plt.plot(y[:,i], label='original')\n    plt.plot(y_a[:,i], label='auged')\n    plt.legend()\n    plt.show()","bdea6f19":"combined_aug = Compose(transforms=[\n    GaussianTargetNoise(p=1.0, gaus_std=0.3),\n    TemporalFlip(p=1.0)\n])","ec44af92":"x, y, atten = get_x_y_atten(train.iloc[0])\nx_a, y_a, atten_a = combined_aug(x, y, atten)","34421456":"plt.title('Original Structure')\nplt.plot(x[:,0])\nplt.show()\nplt.title('Auged Structure')\nplt.plot(x_a[:,0])\nplt.show()","b5af535e":"plt.title('Original Sequence')\nplt.plot(y[:,0])\nplt.show()\nplt.title('Auged Sequence')\nplt.plot(y_a[:,0])\nplt.show()","2755a825":"plt.title('Original bpps')\nplt.imshow(atten)\nplt.show()\nplt.title('Auged bpps')\nplt.imshow(atten_a)\nplt.show()","88d9f55e":"# Reading utils","8432f75f":"## Composition of Augmentations","a847eb97":"# Augmentations","392fff46":"## Flip\n\nIf you use position agnostic models, such as Bidirectional LSTMs\/GRUs, such augmentation maybe useless for you. If not, you can try ","9a2784f8":"# Read data","ce7f3928":"## Gaussian Noise on Target\n\nOriginal target is supposed to be noisy. We have *_error_* columns. So we can make a kind of `label smoothing` for continious target","7b20c607":"## Compose"}}