{"cell_type":{"4983f727":"code","feea2dc2":"code","be65d515":"code","646e2bf7":"code","bc60866b":"code","d0416cfb":"code","8e5ad9dc":"code","c69f57e4":"code","3ee7ff16":"code","5dd0bad6":"code","bef2cd06":"code","9191fc9c":"code","03d5087b":"code","062ad49e":"code","e2c386f1":"code","82e05570":"code","61129778":"code","d87523b2":"code","c0247ef8":"code","ee0f935d":"code","51531fa3":"code","71222f5b":"code","7f0f3a3f":"code","91a0b5aa":"markdown","98e28527":"markdown"},"source":{"4983f727":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\ndef parser_image_preds(single_image):\n    image_preds = \"\"\n    prediction = single_image.split(\"seconds.\")[1]\n    individual_preds_in_image = prediction.split(\"wheathead\")[1:]\n    \n    for i in individual_preds_in_image:\n        pred = i.split(\":\")[1]\n        conf = float(\"\".join(pred.split('\\t')[0]).strip().replace(\"%\",\"\"))\/100\n        \n        ny = \"\".join(i.split(\":\")[2:]).replace(\")\",\"\").split(\" \")\n        bbox = []\n        for inner in ny:\n            if inner.lstrip('-').isdigit():\n                bbox.append(int(inner))\n        \n        string_to_add = str(str(conf) + \" \" + str(bbox).replace(\"[\", \"\").replace(\"]\", \"\").replace(\",\", \"\"))\n        image_preds += \" \" + string_to_add\n    return image_preds\n","feea2dc2":"cp -r \/kaggle\/input\/darknet-jpo2\/* .\/","be65d515":"os.chdir(\"\/kaggle\/working\/darknet_jpo\/darknet\/\")","646e2bf7":"!ls ","bc60866b":"!cp ..\/..\/yolov4-wheat100_best_v2.weights backup\/wheat100\/","d0416cfb":"!ls backup\/wheat100\/","8e5ad9dc":"!sed '1 s\/^.*$\/GPU=0\/; 2 s\/^.*$\/CUDNN=0\/; 3 s\/^.*$\/CUDNN_HALF=0\/; 5 s\/^.*$\/AVX=0\/; 6 s\/^.*$\/OPENMP=0\/; 7 s\/^.*$\/LIBSO=0\/' -i Makefile","c69f57e4":"!head Makefile","3ee7ff16":"! make clean","5dd0bad6":"!make ","bef2cd06":"test_subs = pd.read_csv(\"\/kaggle\/input\/global-wheat-detection\/sample_submission.csv\")\ntest_image_ids = test_subs.image_id.values\ntest_subs.head()","9191fc9c":"test_image_ids","03d5087b":"from pathlib import Path\nimport subprocess\n\nroot_image = Path(\"\/kaggle\/input\/global-wheat-detection\/test\")\ntest_images = [root_image \/ f\"{img}.jpg\" for img in test_subs.image_id]","062ad49e":"with open(\"test_predict.txt\", 'a') as file: # append lines to file\n    for i in test_image_ids:\n        new_name =  \"\/kaggle\/input\/global-wheat-detection\/test\/{}.jpg\".format(i)\n        new_name = new_name + \"\\n\"\n        file.write(new_name)","e2c386f1":"cmd = \".\/darknet detector test data\/wheat100.data cfg\/yolov4-wheat100.cfg backup\/wheat100\/yolov4-wheat100_best_v2.weights -dont_show -ext_output < test_predict.txt > pr_res.txt -thresh 0.25\"\nb = subprocess.getoutput(cmd)","82e05570":"!head pr_res.txt","61129778":"conf_result_file = \"pr_res.txt\"\nfile_l = open(conf_result_file, 'r')   \nlines = file_l.read().split('\\n')\ncontent_str = \"\".join(lines)\nint_unique_predictions = content_str.split('Enter')[1:]","d87523b2":"res_lines = []  \n#single_image = int_unique_predictions[0]\nfor single_image in int_unique_predictions[:-1]:\n    img_id = \"\".join([i for i in single_image.split(\" \") if '.jpg' in i]).replace(\":\",\"\").split(\"\/\")[-1].replace(\".jpg\", \"\")\n    print(img_id)\n    xx = parser_image_preds(single_image)\n    #print(img_id, xx)\n    res_lines.append({'image_id': img_id, 'PredictionString': xx})\n\nsubmission_df = pd.DataFrame(res_lines)     ","c0247ef8":"submission_df.head()","ee0f935d":"os.chdir(\"\/kaggle\/working\/\")","51531fa3":"submission_df.to_csv('submission.csv', index=False)","71222f5b":"!ls","7f0f3a3f":"!rm -r darknet","91a0b5aa":"### Get list of test ids","98e28527":"## Notebook compiles darknet from scratch, uses weights that I have trained on my machine, and creates submission file using yolov4 on darknet."}}