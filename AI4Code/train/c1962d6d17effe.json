{"cell_type":{"bf23edb8":"code","b5e3dcce":"code","b775744e":"code","1f92c564":"code","311d1a99":"code","f2a9e7c5":"code","ad447f83":"code","4c5ab3c1":"code","aec2da47":"code","2e42fe8d":"markdown","758afbdb":"markdown","0f21ce9c":"markdown","20bafd60":"markdown","756a1781":"markdown","05782196":"markdown","e2487f28":"markdown","11f0be1d":"markdown","b7fb14a7":"markdown","c8b6894e":"markdown","e77f27dc":"markdown","d7f82bc1":"markdown","1babcefe":"markdown","efc0cf6e":"markdown"},"source":{"bf23edb8":"# Input the strings\nstr1=\"126374521637452613745263174526371452637415263741254673126475312657431256473126547321654732615473265147326541732654713265471236547127563412567341273564127354612573462157346251734625713462573146257341625734125643721564372516437256143725641372564317256431275643217564327156432751643275614327564132756412346571243657214365724136572431657243615724365172436512743652174365271436527413652743165274361527436124753612437651273465217346527134652731465273416527346152734612574362157436251743625714362574136257431625743126534712635471236574126375412736542173654271365427316542736154273651427365124367512634752163475261347526314752634175263471526347125364721536472513647253164725361472536417253641275436127534612753641257364215736425173642571364257316425736142573612457631247365126437521643752614375264137526431752643715264371254637215463725146372541637254613725463172546312754632175463271546327514632754163275461327546123475612457361253476125346712543671253674126537412537641276435127634512674531257463125634721563472516347256134725631472563417256341257643125763412563741267534216753426175342671534267513426753142675312746351235467123547612356471235674123574612357641236457123674512367541237465126743521674352617435267143526741352674315267431254763127456321745632714563274156327451632745613274561237456123476512743561253746215374625137462531746253714625374162537412657342165734261573426517342657134265731426573241657324615732465173246571324657124657321465732614573264157326451732645713264571264573216457326127345612547362154736251473625417362547136254731625473126453712465371245673124537612437562143756241375624317562437156243751624375126435712634571246357214635724163572461357246315724635172463512647352164735261473526417352647135264731526473126543712475631247635124563712453672145367241536724513672453167245361724536124735621473562417356247135624731562473516247351246735124675312435762143576241357624315762435176243571624357125437621543762514376254137625431762543716254371256743127654321765432716543276154327651432765413276541273645126734512673541263574216357426135742631574263517426357142635712364752136475231647523614752364175236471523647123467512345761234567124356721435672413567243156724351672435617243561274536127653412675431276354217635427163542761354276315427635142763512476531274653217465327146532741653274615327465132746512375641237546123764512376542137654231765423716542376154237651423765124637512764532176453271645327614532764153276451327645\"\nstrnstrnprint(\"Provided strings with lengths: \", len(str1), len(str2), len(str3))\n\n# Input the wildcard pairs for each string, and the wildcard position.\n# Since WILDCARD_POS = 0, for example, this means that in string 1, \"1246573\" will have\n# a wildcard instead of the \"1\".\nwild1 = ((1, 2, 4, 6, 5, 7, 3), (1, 2, 6, 4, 5, 7, 3))\nwild2 = ((1, 2, 7, 5, 3, 4, 6), (1, 2, 6, 7, 3, 4, 5))\nwild3 = ((1, 2, 3, 5, 6, 4, 7), (1, 2, 7, 3, 5, 6, 4))\nwildcards = [wild1,wild2,wild3]\nWILDCARD_POS=0","b5e3dcce":"TIME_LIMIT = 30 # Total runtime of the notebook is around (TIME_LIMIT * 3) seconds","b775744e":"# Import dependencies\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport random\n!wget http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/LKH-3.0.7.tgz\n!tar xvfz LKH-3.0.7.tgz\n!cd LKH-3.0.7; make clean; make; cp LKH ..","1f92c564":"def perm_dist(p, q, string_number, use_wildcards=True):\n    \"\"\"\n    Computes distance between two permutations. The distance\n    between p and q is the minimum number of symbols we need to \n    add to p so that q appears within the extension.\n    \n    - p and q are tuples of integers between 1 and 8. 8 is interpreted as a wildcard.\n    \n    - string_number and use_wildcards allows to insert the desired wildcards in specific permutations. \n        If use_wildcards is true, then the previously set wildcards for string with number \"string_number\" (0 to 2)\n        are considered. For example, if wildcards[0] contains (1,2,3,4,5,6,7) and string_number = 0, p =(1,2,3,4,5,6,7),\n        then p is replaced internally by (8,2,3,4,5,6,7) (since WILDCARD_POS = 0).\n    \"\"\"\n    p = list(p)\n    q = list(q)\n    \n    \n    if p==q:\n        return 0\n    \n    if use_wildcards:\n        # Apply wildcards\n        for j in range(2):\n            if p == list(wildcards[string_number][j]):\n                p[WILDCARD_POS] = 8\n            if q == list(wildcards[string_number][j]):\n                q[WILDCARD_POS] = 8    \n    \n    # Nope\n    if 8 in q and 8 in p:\n        return 7\n    \n    if 8 in q:\n        min_dist = 8\n        for i in range(1,8):\n            q2 = list(q)\n            q2[q2.index(8)] = i\n            for j in range(1,8):\n                if p[j:]==q2[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n                \n    if 8 in p:\n        min_dist = 8\n        for i in range(1,8):\n            p2 = list(p)\n            p2[p2.index(8)] = i\n            for j in range(1,8):\n                if p2[j:]==q[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n            \n    i = p.index(q[0])\n    return i if p[i:] == q[:7-i] else 7\n\ndef perm_dist_no_wildcards(p, q):\n    \"\"\"\n    This is an alias to compute the distance between two permutations without wildcard\n    insertion (although if p and q contain wildcards beforehand, they're used).\n    \"\"\"\n    return perm_dist(p,q,0,False)\n\n\ndef perms_to_string(perms, string_number, use_wildcards=True):\n    \"\"\"\n    Given list of permutations in order, creates a string.\n    string_number and use_wildcards allow for wildcard insertion, similar to perm_dist.\n    \"\"\"\n    perms = list(perms)\n    s = [*perms[0]]\n    for p, q in zip(perms, perms[1:]):\n        d = perm_dist(p[-7:], q[:7], string_number, use_wildcards)\n        s.extend(q[7-d:])\n        if use_wildcards:\n            if q == wildcards[string_number][0]:\n                s[-(7-WILDCARD_POS)] = 8\n            elif q == wildcards[string_number][1]:\n                s[-(7-WILDCARD_POS)] = 8\n    return s\n\ndef distances_matrix(perms, string_number, depot=False, use_wildcards=True):\n    \"\"\"\n    Computes distance matrix for TSP given the desired permutations and the string number for\n    wildcard insertion. Allows for depot insertion as well. (This will be important to remove\n    the constraint that the starting and ending permutations are the same.)\n    \"\"\"\n    if depot:\n        m = np.zeros((len(perms)+1, len(perms)+1), dtype='int8')\n    else:\n        m = np.zeros((len(perms), len(perms)), dtype='int8')\n    for i, p in enumerate(perms):\n        for j, q in enumerate(perms):\n            if depot:\n                m[i+1, j+1] = perm_dist(p[-7:], q[:7], string_number, use_wildcards) + len(q) - 7\n            else:\n                m[i,j] = perm_dist(p[-7:], q[:7], string_number, use_wildcards) + len(q) - 7\n    if depot:\n        m[0,:]=0\n        m[:,0]=0\n    return m\n\ndef write_params_file(name=\"tsp\"):\n    \"\"\"\n    Writes LKH param file with given name.\n    \"\"\"\n    with open(f'{name}.par', 'w') as f:\n        print(f'PROBLEM_FILE = {name}.tsp', file=f)\n        print(f'TOUR_FILE = {name}.txt', file=f)\n        print(f'INITIAL_TOUR_FILE = {name}.txt', file=f)\n        print('PATCHING_C = 3', file=f)\n        print('PATCHING_A = 2', file=f)\n        print('SPECIAL',file=f)\n        print('GAIN23 = YES', file=f)\n        print('MAX_TRIALS=10000000', file=f) # We want time to be the limit\n        print('SEED = 69', file=f) # Nice\n        print(f'TIME_LIMIT = {TIME_LIMIT}', file=f) #seconds\n        print('TRACE_LEVEL = 1', file=f) # Log detail level.\n\n\ndef write_problem_file(distances,name=\"tsp\"):\n    \"\"\"\n    Writes problem file given distance matrix and filename.\n    \"\"\"\n    with open(f'{name}.tsp', 'w') as f:\n        print('TYPE: ATSP', file=f)\n        print(f'DIMENSION: {len(distances)}', file=f)\n        print('EDGE_WEIGHT_TYPE: EXPLICIT', file=f)\n        print('EDGE_WEIGHT_FORMAT: FULL_MATRIX\\n', file=f)\n        print('EDGE_WEIGHT_SECTION', file=f)\n        for row in distances:\n            print(' '.join(str(_) for _ in row), file=f)\n\ndef read_output_tour(perms,name=\"best_tour\"):\n    \"\"\"\n    Reads resulting tour given ordered permutations and file name.\n    Output tour permutations in order.\n    \"\"\"\n    perms = list(perms)\n    with open(f'{name}.txt') as f:\n        lines = f.readlines()\n    tour = lines[lines.index('TOUR_SECTION\\n')+2:-2]\n    return [perms[int(_) - 2] for _ in tour]\n    \ndef solve_atsp(perms, name=\"santa.par\"):\n    \"\"\"\n    Runs command to solve TSP problem from file name and permutations.\n    \"\"\"\n    # Run LKH-3 to solve ATSP instance saving log to file\n    !touch lkh.log\n    !.\/LKH $name >> lkh.log\n\ndef check_validity(str1, str2, str3):\n    \"\"\"\n    Check whether given strings are valid strings for the competition. \n    Strings should be lists of integers. Returns true or false and prints problems, if any.\n    Wildcards should be marked with an 8.\n    \"\"\"\n    all_perms = set(itertools.permutations(range(1, 8), 7))\n    mandatory_perms = set((1, 2) +  _ for _ in itertools.permutations(range(3, 8), 5))\n\n    strings_perms = [perms_in_string(str1), perms_in_string(str2), perms_in_string(str3)]\n    for i, s in enumerate(strings_perms):\n        if mandatory_perms - s:\n            print(f'String #{i} is missing {mandatory_perms - s}.')\n            return False\n    if all_perms - set.union(*strings_perms):\n        print(f\"missing:{len(all_perms - set.union(*strings_perms))}\")\n        print(f'Strings are missing {all_perms - set.union(*strings_perms)}.')\n        return False\n    return True\n\ndef perms_in_string(string_as_list):\n    \"\"\"\n    Given string as list of integers (possibly 8 for wildcard), returns\n    the permutation set covered by the string.\n    \"\"\"\n    perms = set()\n    for i in range(len(string_as_list)):\n        perm = tuple(string_as_list[i:i+7])\n        if len(set(perm))==7:\n            if 8 not in perm:\n                perms.add(perm)\n            else:\n                if perm.count(8) > 1:\n                    continue\n                for i in range(1,8):\n                    perm2 = list(perm)\n                    perm2[perm2.index(8)] = i\n                    if len(set(perm2))==7:\n                        perms.add(tuple(perm2))\n                \n    return perms","311d1a99":"def string_to_tour(string, perms, name=\"tour\"):\n    \"\"\"\n    Given a string and a permutation list in order, writes a starting tour file\n    for TSP with given filename. Wildcards are allowed in the string as \"8\" symbols\n    \"\"\"\n    seen = set()\n    perms = list(perms)\n    dimension = len(perms)+1\n    lines = [f\"DIMENSION: {dimension}\\nTYPE: TOUR\\nTOUR_SECTION\\n1\\n\"]\n    for j in range(len(string)-6):\n        perm = tuple(string[j:j+7])\n        if perm.count(8) == 1:\n            for k in range(1,8):\n                perm2 = list(perm)\n                perm2[perm2.index(8)] = k\n                if len(set(perm2)) == 7:\n                    perm = tuple(perm2)\n                    break\n        if perm not in seen and len(set(perm))==7 and perm in perms:\n            seen.add(perm)\n            lines.append(f\"{perms.index(perm)+2}\\n\")\n    lines.append(\"-1\\nEOF\")\n    with open(f\"{name}.txt\", \"w\") as f:\n        f.writelines(lines)","f2a9e7c5":"# Define the permutation sets\nall_perms = set(itertools.permutations(range(1, 8), 7))\nmandatory_perms = set((1, 2) +  _ for _ in itertools.permutations(range(3, 8), 5))\nnon_mandatory_perms = all_perms - mandatory_perms","ad447f83":"# Convert\nstr1 = [int(e) for e in str1]\nstr2 = [int(e) for e in str2]\nstr3 = [int(e) for e in str3]\n\nprint(f\"INITIAL LENGTHS\\n{len(str1)} {len(str2)} {len(str3)}\")\n\n# Optimize str1\nprint(f\"OPTIMIZING STR1\")\nperms1 = perms_in_string(str1)\nwrite_params_file(\"str1\")\nwrite_problem_file(distances_matrix(perms1, 0, depot=True), \"str1\")\nstring_to_tour(str1,perms1,name=\"str1\")\nsolve_atsp(perms1, name=\"str1.par\")\ntour1=read_output_tour(perms1,name=\"str1\")\nstr1 = perms_to_string(tour1,0)\nprint(f\"STR1 CHANGED TO {len(str1)}\")\n\n# Optimize str2\nperms1 = perms_in_string(str1)\nperms2 = perms_in_string(str2)\nperms2 = perms2 - (perms2.intersection(perms1) - mandatory_perms)\nprint(f\"OPTIMIZING STR2 WITHOUT WILDCARDS\")\nwrite_params_file(\"str2\")\nwrite_problem_file(distances_matrix(perms2, 1, depot=True, use_wildcards=False), \"str2\")\nstring_to_tour(str2,perms2,name=\"str2\")\nsolve_atsp(perms2, name=\"str2.par\")\ntour2=read_output_tour(perms2,name=\"str2\")\nstr2 = perms_to_string(tour2,1,use_wildcards=False)\nprint(f\"STR2 CHANGED TO {len(str2)}\")\nperms2 = perms_in_string(str2)\nperms2 = perms2 - (perms2.intersection(perms1) - mandatory_perms)\nprint(f\"OPTIMIZING STR2\")\nwrite_params_file(\"str2\")\nwrite_problem_file(distances_matrix(perms2, 1, depot=True), \"str2\")\nstring_to_tour(str2,perms2,name=\"str2\")\nsolve_atsp(perms2, name=\"str2.par\")\ntour2=read_output_tour(perms2,name=\"str2\")\nstr2 = perms_to_string(tour2,1)\nprint(f\"STR2 CHANGED TO {len(str2)}\")\n\n# Optimize str3\nperms1 = perms_in_string(str1)\nperms2 = perms_in_string(str2)\nperms3 = perms_in_string(str3)\nperms3 = perms3 - (perms3.intersection(perms1.union(perms2)) - mandatory_perms)\nprint(f\"OPTIMIZING STR3 WITHOUT WILDCARDS\")\nwrite_params_file(\"str3\")\nwrite_problem_file(distances_matrix(perms3, 2, depot=True, use_wildcards=False), \"str3\")\nstring_to_tour(str3,perms3,name=\"str3\")\nsolve_atsp(perms3, name=\"str3.par\")\ntour3=read_output_tour(perms3,name=\"str3\")\nstr3 = perms_to_string(tour3,2, use_wildcards=False)\nprint(f\"STR3 CHANGED TO {len(str3)}\")\nperms3 = perms_in_string(str3)\nperms3 = perms3 - (perms3.intersection(perms1.union(perms2)) - mandatory_perms)\nprint(f\"OPTIMIZING STR3\")\nwrite_params_file(\"str3\")\nwrite_problem_file(distances_matrix(perms3, 2, depot=True), \"str3\")\nstring_to_tour(str3,perms3,name=\"str3\")\nsolve_atsp(perms3, name=\"str3.par\")\ntour3=read_output_tour(perms3,name=\"str3\")\nstr3 = perms_to_string(tour3,2)\nprint(f\"STR3 CHANGED TO {len(str3)}\")\n","4c5ab3c1":"str1 = [int(e) for e in str1]\nstr2 = [int(e) for e in str2]\nstr3 = [int(e) for e in str3]\nif not check_validity(str1, str2, str3):\n    print(\"UNVALID STRINGS\")\nelse:\n    print(\"VALID STRINGS\")\nprint(\"PERMS PER STRING\")\nprint(len(perms_in_string(str1)),len(perms_in_string(str2)),len(perms_in_string(str3)))\nprint(\"SYMBOLS PER STRING\")\nprint(len(str1),len(str2),len(str3))\nprint(\"WILDCARDS\")\nprint(wildcards)\nprint(\"WILDCARD POSITION\")\nprint(WILDCARD_POS)\nprint(\"STRINGS\")\nprint(\"=\"*50)\nprint(\"str1=\",end=\"\")\nprint(\"\\\"\",''.join(str(e) for e in str1),\"\\\"\",sep=\"\")\nprint(\"str2=\",end=\"\")\nprint(\"\\\"\",''.join(str(e) for e in str2),\"\\\"\",sep=\"\")\nprint(\"str3=\",end=\"\")\nprint(\"\\\"\",''.join(str(e) for e in str3),\"\\\"\",sep=\"\")","aec2da47":"LETTERS = {\n    1: '\ud83c\udf85',  # father christmas\n    2: '\ud83e\udd36',  # mother christmas\n    3: '\ud83e\udd8c',  # reindeer\n    4: '\ud83e\udddd',  # elf\n    5: '\ud83c\udf84',  # christmas tree\n    6: '\ud83c\udf81',  # gift\n    7: '\ud83c\udf80',  # ribbon\n    8: '\ud83c\udf1f',  # star\n}\nstrings = [str1, str2, str3]\nsub = pd.DataFrame()\nsub['schedule'] = [''.join(LETTERS[x] for x in s) for s in strings]\nsub_name = f'submission.csv'\nsub.to_csv(sub_name, index=False)","2e42fe8d":"## Summary","758afbdb":"## UTILS AND FUNCTIONS","0f21ce9c":"## Parting words","20bafd60":"This section checks the validity of the strings, prints statistics and prints three python variable declarations so that the strings can be used somewhere else in our pipeline. It also prints wildcard information.","756a1781":"This notebook, paired with the wildcard selection heurisitic mentioned at the beginning, is what got us to 2430. There is still one disadvantage to using TSP for wildcards, and it is that the permutations immediately before and after the one with the wildcard determine which number the \"wildcard\" becomes. In other words, suppose that we have permutation **1234567** with wildcard on the first position, and **1723456** before it:\n\n**...-1723456-1234567-...**\n\nNotice that the distance of that edge is 1 because of the wildcard. However, for the permutation that goes before **1723456**, the wildcard \"doesn't exist\" and it is forced to be a **7**, which is the value used by **1723456** as a wildcard. This is a limitation that can't be modelled as a TSP problem.\n\nIn order to circumvent this issue, we created further code that merged the permutations as one big group (in our example, **17234567** with the wildcard in the first \"7\"), which fixes the problem. This code is here: https:\/\/www.kaggle.com\/miguelgonzalez2\/santa-2021-wildcard-longer-patterns-groups\/\n\nIf this notebook was useful, kindly consider upvoting.","05782196":"We set a time limit for LKH. Since this postprocessing is not very complicated, we go for 30 seconds.","e2487f28":"We start by providing a score 2442 solution found by us using CTSP. Even though we had plenty of 2440 (optimal) solutions, none of them went below 2430 so we decide to use this one as a demonstration. We also need to provide which permutations will have a wildcard, and the position (0 to 6 value).","11f0be1d":"This notebook was used to insert wildcards in our non-wildcard solutions in an \"intelligent\" way using TSP and LKH solver. In order to do so for a given string, we select beforhand two permutations and replace on each permutation one of its characters by a wildcard. This only has the effect of changing the distances \"from\" and \"to\" the permutation.\n\nFor example: if we decide to insert a wildcard in the first position of \"**1234567**\", then the distance from \"1456723\" to \"**1234567**\" gets lowered from 7 to 4, since the \"723\" at the end of the first permutation now overlaps with the \"123\" at the start of the second permutation, for it has a wildcard at the beginning.\n\nThe strategy then relies on two factors:\n1. Given a string, detecting the optimal permutations and positions where the wildcard should be inserted.\n2. Having done that, process the strings and run LKH plus extra optimizations to reduce the lengths.\n\nThese two factors are tackled as follows:\n1. Since the mandatory permutations (those starting with \"12\") are way more frequent (thrice as much) than those starting with a different 2-symbol prefix, it becomes harder to \"stitch\" them together nicely within the string. For this reason, we decide that the permutations in which we will insert a wildcard need to be mandatory permutations. Moreover, experimentally, we find out that the best position is the first one (in other words, replacing the symbol \"1\"). As for which two mandatory permutations to use, my teammate Guillermo Garc\u00eda Cobo has developed an heuristic which attempts to find the best choices, linked here: https:\/\/www.kaggle.com\/atmguille\/santa-2021-best-place-for-wildcards. This heuristic was used to get our best solution, but is not present in this notebook for clarity sake.\n2. This notebook tackles factor 2 entirely.\n\n**In this demonstration, we will start with a non wildcard solution of score 2442 and lower it to a wildcard solution of score 2430. The permutations that will have a wildcard were selected as explained in step 1 of previous list, but here are introduced manually for clarity sake. Explanations and further insights are provided througout the notebook.**","b7fb14a7":"In this section the main process is carried out. The strategy is as follows:\n1. Shorten STR1 using TSP with the selected wildcards. This is shown as \"OPTIMIZING STR1\". After this, STR1 is final.\n2. Get permutation set from STR2 and remove every permutation within STR1. Shorten STR2 with this reduced amount of permutations. This is shown as \"OPTIMIZING STR2 WITHOUT WILDCARDS\". \n3. Now, shorten STR2 using TSP with the selected wildcards. This is shown as \"OPTIMIZING STR2\". After this, STR2 is final.\n4. Get permutation set from STR3 and remove every permutation within STR1 and STR2. Shorten STR3 with this reduced amount of permutations. This is shown as \"OPTIMIZING STR3 WITHOUT WILDCARDS\". \n5. Now, shorten STR3 using TSP with the selected wildcards. This is shown as \"OPTIMIZING STR3\". After this, STR3 is final.","c8b6894e":"Submission file is generated here","e77f27dc":"This section contains a set of utility and LKH-related functions. Documentation has been provided for each function, but this is just standard LKH except we update the distance matrix to take the wildcards into consideration.","d7f82bc1":"### Show and store","1babcefe":"## Process","efc0cf6e":"## INPUT"}}