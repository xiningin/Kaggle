{"cell_type":{"34991eac":"code","63310e52":"code","bbdc1dd7":"code","5a4c0f72":"code","a5b423a9":"code","8dcfc2ef":"code","70b2e427":"code","339771b6":"code","842ee27e":"code","0bf6288e":"code","ce3a21af":"code","6740d2a3":"code","f6a77925":"code","e29d51b6":"code","a65f43c1":"code","0f18d18a":"code","88b8edc0":"code","5aa12210":"code","4155e69b":"code","ab044209":"code","0354fe28":"code","b1781434":"code","3be42fe8":"code","15c3b34c":"code","dda81055":"code","36c96315":"code","d52aef7a":"code","0483ed99":"code","bbdb73b6":"code","36e67f14":"code","6b46989c":"code","58a453a2":"code","0f194fdf":"code","111a591b":"code","0c42791f":"code","609e87c6":"code","fbbcbc26":"code","e6f8a44f":"code","c61528c8":"code","97901859":"code","1193a816":"code","604dbddc":"code","e14560c9":"code","d8127102":"code","3cd98384":"code","18a3f5f6":"code","62ad3134":"code","ee674b51":"code","275cceac":"code","253756a2":"code","239517c8":"code","e8927508":"code","e86b7e56":"code","3b6f21ca":"code","48de3dba":"code","39b4093b":"code","f115d266":"code","7450cf34":"code","22bd2b44":"markdown","f64059fa":"markdown","ab5130d6":"markdown","32944f3e":"markdown","11461c80":"markdown","a9a48488":"markdown","c4322885":"markdown","386ddd9b":"markdown","424faf2c":"markdown","5b6181e8":"markdown","fe1455ba":"markdown","98785af6":"markdown"},"source":{"34991eac":"import numpy as np\nimport pandas as pd\nimport os\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use(\"seaborn-darkgrid\")\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, f1_score, classification_report\n\nfrom keras import callbacks\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Input, BatchNormalization\nfrom keras import optimizers","63310e52":"def read_data(path):\n    '''\n    Read csv file and return pandas dataframe\n    Input:\n        path: csv file path\n    Output:\n        data: pandas dataframe\n    '''\n    data = pd.read_csv(path)\n    return data","bbdc1dd7":"df_train = read_data('\/kaggle\/input\/titanic\/train.csv')\ndf_test = read_data('\/kaggle\/input\/titanic\/test.csv')\ntest_passengerId = df_test[\"PassengerId\"]","5a4c0f72":"#shape of the dataset\ndf_train.shape, df_test.shape","a5b423a9":"df_train_len = len(df_train)\ndf_train = pd.concat([df_train,df_test],axis = 0).reset_index(drop = True)","8dcfc2ef":"df_train.head()","70b2e427":"#shape of the dataset(concat dataset)\ndf_train.shape","339771b6":"df_train.describe()","842ee27e":"df_train.isnull().sum()","0bf6288e":"sns.boxplot(x=\"Pclass\", y=\"Embarked\", data=df_train, orient=\"h\", palette=\"Set2\")","ce3a21af":"df_train[\"Embarked\"] = df_train[\"Embarked\"].fillna(\"C\")","6740d2a3":"sns.boxplot(x=\"Fare\", y=\"Pclass\", data=df_train, orient=\"h\", palette=\"Set2\")","f6a77925":"df_train[\"Fare\"] = df_train[\"Fare\"].fillna(np.mean(df_train[df_train[\"Pclass\"] == 3][\"Fare\"]))","e29d51b6":"columns_lst = [\"SibSp\",\"Parch\",\"Survived\",\"Pclass\", \"Age\",\"Fare\"]\n\nplt.figure(figsize = (11,7))\nsns.heatmap(df_train[columns_lst].corr(),annot = True,fmt = \".2f\")\nplt.show()","a65f43c1":"# SibSp and Survival\nsibsp_survival = sns.factorplot(x = \"SibSp\", y = \"Survived\",kind = \"bar\",size = 7,data = df_train)\nsibsp_survival.set_ylabels(\"Survived Probability\")\nplt.show()","0f18d18a":"# Parch and Survival\nparch_survival = sns.factorplot(x = \"Parch\", y = \"Survived\",kind = \"bar\",size = 7,data = df_train)\nparch_survival.set_ylabels(\"Survived Probability\")\nplt.show()","88b8edc0":"# Pclass and Survival\npclass_survival = sns.factorplot(x = \"Pclass\", y = \"Survived\",kind = \"bar\",size = 7,data = df_train)\npclass_survival.set_ylabels(\"Survived Probability\")\nplt.show()","5aa12210":"# Age and survival\nage_survival = sns.FacetGrid(df_train, col = \"Survived\",size = 7)\nage_survival.map(sns.distplot,\"Age\",bins = 10)\nplt.show()","4155e69b":"# Fare and survival\nfare_survival = sns.FacetGrid(df_train, col = \"Survived\",size = 7)\nfare_survival.map(sns.distplot,\"Fare\",bins = 10)\nplt.show()","ab044209":"df_train[df_train.Age.isnull()]","0354fe28":"sns.factorplot(x = \"Sex\", y = \"Age\",data = df_train, kind = \"box\").set(title='Age and SibSp')\nsns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = df_train, kind = \"box\").set(title='Age and Pclass')\nsns.factorplot(x = \"SibSp\", y = \"Age\",data = df_train, kind = \"box\").set(title='Age and SibSp')\nsns.factorplot(x = \"Parch\", y = \"Age\",data = df_train, kind = \"box\").set(title='Age and Parch')\n\nplt.show()","b1781434":"index_nan = list(df_train[df_train.Age.isnull()].index)\nfor i in index_nan:\n    age_pred = df_train[\"Age\"][((df_train[\"SibSp\"] == df_train.iloc[i][\"SibSp\"]) & (df_train[\"Parch\"] == df_train.iloc[i][\"Parch\"]) & \n                               (df_train[\"Pclass\"] == df_train.iloc[i][\"Pclass\"]))].median()\n    age_med = df_train[\"Age\"].median()\n    \n    if not np.isnan(age_pred):\n        df_train[\"Age\"].iloc[i] = age_pred\n    else:\n        df_train[\"Age\"].iloc[i] = age_med   ","3be42fe8":"names = df_train[\"Name\"]\ndf_train[\"Title\"] = [name.split(\".\")[0].split(\",\")[-1].strip() for name in names]\ndf_train[\"Title\"].head(10)","15c3b34c":"plt.figure(figsize = (11,7))\n\nsns.countplot(x=\"Title\", data = df_train)\nplt.xticks(rotation = 60)\nplt.show()","dda81055":"df_train[\"Title\"] = df_train[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"Other\")\ndf_train[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in df_train[\"Title\"]]","36c96315":"plt.figure(figsize = (9,7))\n\nsns.countplot(x=\"Title\", data = df_train)\nplt.show()","d52aef7a":"title_survival = sns.factorplot(x = \"Title\", y = \"Survived\", data = df_train, kind = \"bar\").set(title = \"Title and Survival\")\ntitle_survival.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ntitle_survival.set_ylabels(\"Survival Probability\")\nplt.show()","0483ed99":"#create dummies for title\ndf_train = pd.get_dummies(df_train,columns=[\"Title\"])","bbdb73b6":"df_train[\"Family_size\"] = df_train[\"SibSp\"] + df_train[\"Parch\"] + 1","36e67f14":"fsize_survival = sns.factorplot(x = \"Family_size\", y = \"Survived\", data = df_train, kind = \"bar\").set(title = 'Family Size and Survival')\nfsize_survival.set_ylabels(\"Survival\")\nplt.show()","6b46989c":"df_train[\"Family_size\"] = [1 if i < 5 else 0 for i in df_train[\"Family_size\"]]","58a453a2":"fsize_survival = sns.factorplot(x = \"Family_size\", y = \"Survived\", data = df_train, kind = \"bar\")\nfsize_survival.set_ylabels(\"Survival\")\nplt.show()","0f194fdf":"df_train = pd.get_dummies(df_train, columns= [\"Family_size\"])","111a591b":"sns.countplot(x = \"Embarked\", data = df_train)\nplt.show()","0c42791f":"df_train = pd.get_dummies(df_train, columns=[\"Embarked\"])","609e87c6":"df_train.isnull().sum()","fbbcbc26":"tickets = []\nfor i in list(df_train.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ndf_train[\"Ticket\"] = tickets","e6f8a44f":"df_train[\"Ticket\"].unique","c61528c8":"df_train = pd.get_dummies(df_train, columns= [\"Ticket\"], prefix = \"T\")","97901859":"sns.countplot(x = \"Pclass\", data = df_train)\nplt.show()","1193a816":"df_train[\"Pclass\"] = df_train[\"Pclass\"].astype(\"category\")\ndf_train = pd.get_dummies(df_train, columns= [\"Pclass\"])","604dbddc":"df_train[\"Sex\"] = df_train[\"Sex\"].astype(\"category\")\ndf_train = pd.get_dummies(df_train, columns=[\"Sex\"])","e14560c9":"df_train.drop(labels = [\"PassengerId\", \"Cabin\", \"Name\"], axis = 1, inplace = True)\ndf_train.columns","d8127102":"df_train.isnull().sum()","3cd98384":"df_train.shape, df_train_len","18a3f5f6":"test = df_train[df_train_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)\n\ntrain = df_train[:df_train_len]","62ad3134":"X_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]","ee674b51":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size = 0.3, random_state = 42)","275cceac":"def build_model():\n    '''\n    Build neural network for classification\n    Output:\n    model: neural network model\n    '''\n\n    model = Sequential([\n        Input(shape=(X_train.shape[1])),\n        Dense(32, activation='relu'),\n        Dropout(0.3),\n        BatchNormalization(),\n        \n        Dense(16, activation='relu'),\n        Dropout(0.3),\n        BatchNormalization(),\n        \n        Dense(5, activation='relu'),\n        BatchNormalization(),\n        \n        Dense(1, activation=\"sigmoid\")\n    ])\n    return model","253756a2":"def evaluate_model(model, X_valid, y_valid):\n    '''\n    Evaluate the performance using validation data and display the results\n    Input:\n        model: classification model\n        X_valid: features for validation data\n        y_valid: targets for validation data\n    '''\n    y_pred = model.predict_classes(X_valid)\n    acc_score = accuracy_score(y_valid, y_pred)\n    print(\"Accuracy Score:\", acc_score)\n    print(\"Classification Report:\")\n    print(classification_report(y_valid, y_pred))","239517c8":"def evaluate_and_save_submission(model, test_data):\n    '''\n    Evaluate the performance and save the submission file\n    Input:\n        model: classification model\n        test_data: submission test data\n    Output:\n        y_pred: prediction result\n    '''\n    y_pred = pd.Series(list(model.predict_classes(test_data)), name = \"Survived\").astype(int)\n    results = pd.concat([test_passengerId, y_pred],axis = 1)\n    \n    results.to_csv(\"submission_nn.csv\", index = False)","e8927508":"X_valid.shape, y_valid.shape","e86b7e56":"model = build_model()\nmodel.summary()","3b6f21ca":"adam = optimizers.Adam(lr = 0.001)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=adam, metrics=[\"accuracy\"])\nearly_stop = callbacks.EarlyStopping(patience=20)","48de3dba":"history = model.fit(\n    X_train, y_train,\n    batch_size = 32,\n    epochs=400, validation_data=(X_valid, y_valid), \n    callbacks=[early_stop],\n    verbose=1\n)","39b4093b":"df_plot = pd.DataFrame(history.history)\ndf_plot.plot(figsize=(10,5))","f115d266":"evaluate_model(model, X_valid, y_valid)","7450cf34":"evaluate_and_save_submission(model, test)","22bd2b44":"### Train\/test split","f64059fa":"# Data Exploratory","ab5130d6":"# Import Libraries","32944f3e":"# Data Preprocessing","11461c80":"### Prepare training and testing data","a9a48488":"# Load Dataset","c4322885":"# Model Evaluation","386ddd9b":"## Name","424faf2c":"### Check null values","5b6181e8":"# Submission","fe1455ba":"# Classification with Neural Network","98785af6":"### Handling the missing values of 'Age'"}}