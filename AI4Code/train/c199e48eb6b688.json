{"cell_type":{"e353ba20":"code","a637d956":"code","18bdee04":"code","ab179d44":"code","6c87faaa":"code","4cb38f20":"code","4e1b7ae0":"markdown","b8d30488":"markdown","4d5b4d93":"markdown","3ba09491":"markdown","7e76d39d":"markdown","5bdcff0b":"markdown"},"source":{"e353ba20":"from kaggle_environments import make, utils\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import renderer\n\nenv = make(\"hungry_geese\", debug=True)\nbot_list = ['greedy', 'random', 'greedy', 'random']","a637d956":"states = env.run(bot_list)\ngame_len = len(states)\nenv.render(mode=\"ipython\", width=500, height=400)","18bdee04":"def view_result(state, bot_list):    \n    print('bot      \\tstatus \\treward')\n    print('----------------------------')\n    for i, bot in enumerate(bot_list):\n        print('{}:  \\t{} \\t{}'.format(bot if type(bot) is str else bot.__name__, \n                                     state[i]['status'],\n                                     state[i]['reward']))\n    print('----------------------------')\n\nprint(renderer(states[game_len-2], env))\nview_result(states[game_len-2], bot_list)\n\nprint(renderer(states[game_len-1], env))\nview_result(states[game_len-1], bot_list)","ab179d44":"from matplotlib import pyplot as plt\nfrom matplotlib.patches import Rectangle, Circle, Polygon\nimport json, requests\n\nDIR = {'NORTH': (-1, 0),\n       'SOUTH': (+1, 0),\n       'EAST': (0, +1),\n       'WEST': (0, -1)\n      }\nOPPOSITE = {'NORTH': 'SOUTH',\n            'SOUTH': 'NORTH',\n            'EAST': 'WEST',\n            'WEST': 'EAST'\n           }\n\nclass Viewer:\n    SCALE = 1\n    MARGIN = 0.05 * SCALE\n    \n    GEESE_COLORS = {0:{'body':'darkgray',\n                       'head':'white',\n                       'arrows':(0.75,0.75,0.75)\n                      },\n                    1:{'body':'blue',\n                       'head':'cyan',\n                       'arrows':(0, 0, 0.55)\n                      },\n                    2:{'body':'green',\n                       'head':'lime',\n                       'arrows':(0, 0.75, 0)\n                      },\n                    3:{'body':'red',\n                       'head':'pink',\n                       'arrows':(0.55, 0, 0)\n                      }\n                   }\n    \n    FOOD_COLOR = 'yellow'\n    BACKGROUND_COLOR = (0.4,0.4,0.15)\n    \n    RIGHT_ARROW = [[0, 0], [-.2, -.2], [-.2, -.05], [-.4, -.05], [-.4, .05], [-.2, .05], [-.2, .2]]    \n    LEFT_ARROW = [[-x, y] for [x, y] in RIGHT_ARROW]\n    DOWN_ARROW = [[y, x] for [x, y] in RIGHT_ARROW]\n    UP_ARROW = [[y, -x] for [x, y] in RIGHT_ARROW]    \n    \n    ARROWS = {'NORTH': UP_ARROW,\n              'SOUTH': DOWN_ARROW,\n              'EAST': RIGHT_ARROW,\n              'WEST': LEFT_ARROW\n             }\n    \n    def __init__(self, rows=7, columns=11):\n        self.figure = plt.figure()\n        \n        for c in Viewer.GEESE_COLORS:\n            plt.plot(-10,-10,Viewer.GEESE_COLORS[c]['body'], marker='o', markersize=10)\n                        \n        self.board_view = self.figure.add_subplot(111)\n        self.board_view.set_facecolor('black')\n        \n        self.cell_width = Viewer.SCALE - Viewer.MARGIN*2\n        self.cell_height = Viewer.SCALE - Viewer.MARGIN*2\n        self.head_radius = Viewer.SCALE * 0.4\n        self.food_radius = Viewer.SCALE * 0.2\n        \n        self.rows = rows\n        self.columns = columns\n        \n        self.states = []\n        self.legend = []\n        self._draw_grid()\n        \n    def _norm(self, row_col, delta=(0,0)):\n        row, col = row_col\n        dr, dc = delta        \n        r = (row + dr + self.rows) % self.rows\n        c = (col + dc + self.columns) % self.columns        \n        return r, c\n    \n    def _rect(self, row, col, color):\n        x, y = col*Viewer.SCALE-Viewer.SCALE\/2 + Viewer.MARGIN, row*Viewer.SCALE-Viewer.SCALE\/2 + Viewer.MARGIN\n        rect = Rectangle(xy=(x, y), width=self.cell_width, height=self.cell_height , color=color)\n        #print (rect.__dict__)\n        self.board_view.add_patch(rect)\n    \n    def _circle(self, row, col, color, radius):\n        x, y = col*Viewer.SCALE, row*Viewer.SCALE\n        c = Circle(xy=(x, y), radius=radius, color=color)\n        self.board_view.add_patch(c)\n        \n    def _arrow(self, row, col, direction, color):        \n        p = Polygon([[x+col, y+row] for [x,y] in Viewer.ARROWS[direction]], color=color)        \n        self.board_view.add_patch(p)\n    \n    def show(self):        \n        plt.axis([-0.6,10.6,6.6,-0.6])        \n        plt.show()\n        \n    def _draw_grid(self):\n        for r in range(self.rows):\n            for c in range(self.columns):\n                self._rect(r, c, Viewer.BACKGROUND_COLOR)\n        \n                \n    def draw_geese(self, geese):\n        for idx, goose in enumerate(geese):\n            for j, (row, col) in enumerate(goose):\n                if j == 0:\n                    self._circle(row, col, Viewer.GEESE_COLORS[idx]['head'], self.head_radius)\n                else:\n                    self._rect(row, col, Viewer.GEESE_COLORS[idx]['body'])\n                \n    def draw_food(self, food):\n        for row, col in food:\n            self._circle(row, col, Viewer.FOOD_COLOR, self.food_radius)\n            \n    def set_states(self, states):\n        self.states = states\n        \n    def load_from_url(self, url):\n        json_file = requests.get(url)\n        game_replay = json.loads(json_file.text)\n \n        self.states = game_replay['steps']\n        self.legend = game_replay['info']['TeamNames']                \n        plt.legend(self.legend, framealpha=0.35, shadow=True, fontsize='large')    \n        \n    def draw_step(self, step):\n        if self.states is not None and step in range(len(self.states)):\n            plt.title('Step {}'.format(step + 1))\n            \n            prev_state = None\n            current_state = self.states[step]\n            next_state = None\n            \n            if step > 0:\n                prev_state = self.states[step - 1]\n            if step + 1 < len(self.states):\n                next_state = self.states[step + 1]\n             \n            # geese            \n            geese_pos = current_state[0]['observation']['geese']            \n            geese_row_col = []\n            for idx, goose in enumerate(geese_pos):\n                geese_row_col.append([])\n                for position in goose:\n                    row, col = position \/\/ self.columns, position % self.columns                    \n                    geese_row_col[idx].append((row, col))\n            \n            self.draw_geese(geese_row_col)\n            \n            # food\n            food_pos = current_state[0]['observation']['food']\n            food_row_col = []\n            for position in food_pos:\n                row, col = position \/\/ self.columns, position % self.columns\n                food_row_col.append((row, col))\n                \n            self.draw_food(food_row_col)\n            \n            # action arrows\n            # FROM direction:\n            for idx, goose in enumerate(geese_row_col):\n                if len(goose) > 0:\n                    action = current_state[idx]['action']\n                    if action is not None:\n                        row, col = self._norm(goose[0], DIR[OPPOSITE[action]])\n                        self._arrow(row, col, action, Viewer.GEESE_COLORS[idx]['arrows'])\n            \n            # TO direction:\n            if next_state is not None:\n                for idx, goose in enumerate(geese_row_col):\n                    if len(goose) > 0:\n                        action = next_state[idx]['action']\n                        if action is not None:\n                            row, col = self._norm(goose[0], DIR[action])\n                            self._arrow(row, col, action, Viewer.GEESE_COLORS[idx]['arrows'])\n        ","6c87faaa":"for s in range(game_len - 2, game_len):    \n    v = Viewer()\n    v.set_states(states)\n    v.draw_step(s)\n    v.show()","4cb38f20":"steps = 5\nfor s in range(195, 200):    \n    v = Viewer()\n    v.load_from_url('https:\/\/www.kaggleusercontent.com\/episodes\/13922785.json')    \n    v.draw_step(s)\n    v.show()\n    ","4e1b7ae0":"# 6. Load replay file from URL","b8d30488":"# 2. Save game states and veiw replay","4d5b4d93":"# 3. Look at few last steps by built-in renderer()","3ba09491":"# 5. Look at last steps one more time","7e76d39d":"# 4. Create little viewer to simplify analysis","5bdcff0b":"# 1. Create and run sample game"}}