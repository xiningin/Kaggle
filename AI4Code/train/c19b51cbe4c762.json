{"cell_type":{"61cff8ab":"code","4c13d5d9":"code","f7c3185d":"code","50d47469":"code","9fb79f82":"code","adb49723":"code","49cd0a28":"code","b55796b6":"code","1d9146d8":"code","c88f65ad":"code","fd85fcfe":"code","6f1e0a1a":"code","8a7374c3":"code","1ee64222":"code","9cc8fde9":"code","cd342b7e":"code","a30ff95e":"code","730b547a":"code","bba19ef8":"code","76468349":"code","acd3bb61":"code","3c01bb84":"code","fba65c32":"code","e7f17862":"code","65d626c0":"code","517dbc9b":"code","e110b51a":"code","d219bdb8":"code","d17f1604":"code","67dff8b4":"code","d5ccc57f":"code","689ebb4e":"code","8c30a28b":"code","bee728f6":"code","c804daed":"code","b44c32f9":"code","3ae2f5ae":"code","0fce4529":"code","bac060aa":"code","f60f4c65":"code","e5a7d2ac":"code","5ca5d942":"code","00420769":"code","4a56eb5b":"code","2214a1b4":"code","0b2dbdf6":"code","21620b08":"code","1e5f48b0":"code","a2dd1457":"code","d7e00437":"code","4e439bb5":"code","6db7e5f9":"code","7fe78708":"code","61b9dabd":"code","94b3af38":"markdown","495ebeae":"markdown","b9b495c0":"markdown","dc4d9c9d":"markdown","e52983eb":"markdown","0ae54f06":"markdown","f99e23ac":"markdown","916ace9b":"markdown","0ef16517":"markdown","2b3af272":"markdown","db86aded":"markdown","97110f4f":"markdown","8676e247":"markdown","d02551e6":"markdown","6dff35c3":"markdown","27a08646":"markdown","f0e1feb3":"markdown","9f6a3a5b":"markdown","f9b39be9":"markdown"},"source":{"61cff8ab":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport datetime as dt\nimport matplotlib.pyplot as plt\n%matplotlib inline","4c13d5d9":"df= pd.read_csv('..\/input\/onlineretail\/OnlineRetail.csv')","f7c3185d":"df.head()","50d47469":"df.shape","9fb79f82":"df.drop(['InvoiceNo'],axis='columns',inplace= True)","adb49723":"df.info()","49cd0a28":"df.describe()","b55796b6":"df[df.columns[df.isnull().any()]].isnull().sum()","1d9146d8":"df.dropna(subset=['Description','CustomerID'], how='all', inplace= True)","c88f65ad":"df.Description = df.Description.str.replace('\\W+', '')","fd85fcfe":"df['Description']= df['Description'].str.lower()","6f1e0a1a":"df['Quantity']= list(map((lambda x: 0 if(x<0) else x),df['Quantity']))","8a7374c3":"df['Price']= df['Quantity'] * df['UnitPrice']","1ee64222":"df.head()","9cc8fde9":"df['date'] = pd.to_datetime(df['InvoiceDate']).dt.date","cd342b7e":"df.head()","a30ff95e":"print(df['date'].min(), df['date'].max())","730b547a":"df['no_of_days']= (dt.date(2012,1,1))-df['date']","bba19ef8":"df['no_of_days']= df['no_of_days'].astype('timedelta64[D]')","76468349":"df.head()","acd3bb61":"rfm = df.groupby('CustomerID').agg({'no_of_days': lambda x:x.min(),'CustomerID': lambda x: len(x),'Price': lambda x: x.sum()})     \nrfm.rename(columns={'no_of_days': 'recency', 'CustomerID': 'frequency', 'Price': 'monetary'}, inplace=True)","3c01bb84":"rfm.head() #REMOVE ID FROM INDEX","fba65c32":"rfm.describe()","e7f17862":"rfm[\"recency_score\"] = pd.cut(rfm[\"recency\"], bins=[-1,np.percentile(rfm[\"recency\"], 25),np.percentile(rfm[\"recency\"], 50), \n                                             np.percentile(rfm[\"recency\"], 75),rfm[\"recency\"].max()],labels=[4, 3, 2, 1]).astype(\"int\")","65d626c0":"rfm[\"frequency_score\"] = pd.cut(rfm[\"frequency\"], bins=[-1,np.percentile(rfm[\"frequency\"], 25),np.percentile(rfm[\"frequency\"], 50), \n                                             np.percentile(rfm[\"frequency\"], 75),rfm[\"frequency\"].max()],labels=[1, 2, 3, 4]).astype(\"int\")","517dbc9b":"rfm[\"monetary_score\"] = pd.cut(rfm[\"monetary\"], bins=[-1,np.percentile(rfm[\"monetary\"], 25),np.percentile(rfm[\"monetary\"], 50), \n                                             np.percentile(rfm[\"monetary\"], 75),rfm[\"monetary\"].max()],labels=[1, 2, 3, 4])","e110b51a":"rfm.head()","d219bdb8":"rfm['RFMClass']=0\nrfm['Customer_Seg']=''","d17f1604":"j=0\nwhile j <= (len(rfm)-1):\n    rfm['RFMClass'][j]= ((rfm['recency_score'].iloc[j])*100)+((rfm['frequency_score'].iloc[j])*10)+(rfm['monetary_score'].iloc[j])\n    j+=1","67dff8b4":"from tabulate import tabulate","d5ccc57f":"table= [['R','M','F1','F2','F3','F4'],['4','4','Unsteady','Active','Top customer','Top customer'],[' ','3','Unsteady','Active','Top customer','Top customer'],\n       [' ','2','Unsteady','Active','Active','Active'],[' ','1','Unsteady','Active','Active','Active'],['3','4','Unsteady','Emerging','Emerging','Emerging'],\n       [' ','3','Unsteady','Emerging','Emerging','Emerging'],[' ','2','Unsteady','Unsteady','Unsteady','Unsteady'],[' ','1','Unsteady','Unsteady','Unsteady','Unsteady'],\n       ['2','4','At risk','At risk','At risk','At risk'],[' ',3,'At risk','At risk','At risk','At risk'],[' ','2','Potentially lost','Potentially lost','At risk','At risk'],\n       [' ','2','Potentially lost','Potentially lost','At risk','At risk'],[' ','1','Potentially lost','Potentially lost','At risk','At risk'],\n       ['1','4','Inactive','Inactive','At risk','At risk'],[' ','3','Inactive','Inactive','At risk','At risk'],[' ','2','Lost','Lost','At risk','At risk'],\n       [' ','1','Lost','Lost','At risk','At risk']]\nprint('Customer Segmentation: ')\nprint(tabulate(table,headers='firstrow', tablefmt='fancy_grid'))","689ebb4e":"k=0\nwhile k <= (len(rfm)-1):\n    if rfm['recency_score'].iloc[k]== 4 and rfm['frequency_score'].iloc[k]>=3 and  rfm['monetary_score'].iloc[k]>=3:\n        rfm['Customer_Seg'].iloc[k]= 'Top Customers'\n    elif rfm['recency_score'].iloc[k]== 4 and rfm['frequency_score'].iloc[k]>=1 and  rfm['monetary_score'].iloc[k]>=1:\n        rfm['Customer_Seg'].iloc[k]= 'Active Customers'\n    elif rfm['recency_score'].iloc[k]== 3 and rfm['frequency_score'].iloc[k]>=2 and  rfm['monetary_score'].iloc[k]>=3:\n        rfm['Customer_Seg'].iloc[k]= 'Emerging Customers'\n    elif rfm['recency_score'].iloc[k]>= 3 and rfm['frequency_score'].iloc[k]==1 and  rfm['monetary_score'].iloc[k]>=1:\n        rfm['Customer_Seg'].iloc[k]= 'Unsteady Customers'\n    elif rfm['recency_score'].iloc[k]== 3 and rfm['frequency_score'].iloc[k]>=2 and  rfm['monetary_score'].iloc[k]<=2:\n        rfm['Customer_Seg'].iloc[k]= 'Unsteady Customers'\n    elif rfm['recency_score'].iloc[k]== 2 and rfm['frequency_score'].iloc[k]>=1 and  rfm['monetary_score'].iloc[k]>=3:\n        rfm['Customer_Seg'].iloc[k]= 'At Risk'\n    elif rfm['recency_score'].iloc[k]== 2 and rfm['frequency_score'].iloc[k]>=3 and  rfm['monetary_score'].iloc[k]<=2:\n        rfm['Customer_Seg'].iloc[k]= 'At Risk'\n    elif rfm['recency_score'].iloc[k]== 1 and rfm['frequency_score'].iloc[k]>=3 and  rfm['monetary_score'].iloc[k]>=1:\n        rfm['Customer_Seg'].iloc[k]= 'At Risk'\n    elif rfm['recency_score'].iloc[k]== 2 and rfm['frequency_score'].iloc[k]<=2 and  rfm['monetary_score'].iloc[k]<=2:\n        rfm['Customer_Seg'].iloc[k]= 'Potentially lost'\n    elif rfm['recency_score'].iloc[k]== 1 and rfm['frequency_score'].iloc[k]<=2 and  rfm['monetary_score'].iloc[k]>=3:\n        rfm['Customer_Seg'].iloc[k]= 'Inactive Customers'\n    elif rfm['recency_score'].iloc[k]== 1 and rfm['frequency_score'].iloc[k]<=2 and  rfm['monetary_score'].iloc[k]<=2:\n        rfm['Customer_Seg'].iloc[k]= 'Lost'\n    else:\n        rfm['Customer_Seg'].iloc[k]= 'Uncategorized'\n    k+=1       \n       ","8c30a28b":"rfm.head()","bee728f6":"data = rfm.groupby(\"Customer_Seg\")[\"RFMClass\"].count()\ndata","c804daed":"sns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.subplots(figsize=(10,10))\ndata.plot.pie(autopct=\"%.1f%%\")","b44c32f9":"sns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.subplots(figsize=(15,5))\na= df.groupby(\"Country\")[\"Price\"].size().plot(kind = \"bar\")\na.set(xlabel=\"Country\", ylabel = \"Sale\")","3ae2f5ae":"rfm['monetary_score']=rfm['monetary_score'].astype('int32')","0fce4529":"uk= df[df['Country']=='United Kingdom']","bac060aa":"rfm_uk = uk.groupby('CustomerID').agg({'no_of_days': lambda x:x.min(),'CustomerID': lambda x: len(x),'Price': lambda x: x.sum()})     \nrfm_uk.rename(columns={'no_of_days': 'recency', 'CustomerID': 'frequency', 'Price': 'monetary'}, inplace=True)","f60f4c65":"rfm_uk.head()","e5a7d2ac":"rfm_uk['monetary']= rfm_uk['monetary'].astype('int')","5ca5d942":"rfm_uk.describe()","00420769":"rfm_uk[\"recency_score\"] = pd.cut(rfm_uk[\"recency\"], bins=[-1,np.percentile(rfm_uk[\"recency\"], 25),np.percentile(rfm_uk[\"recency\"], 50), \n                                             np.percentile(rfm_uk[\"recency\"], 75),rfm_uk[\"recency\"].max()],labels=[4, 3, 2, 1]).astype(\"int\")","4a56eb5b":"rfm_uk[\"frequency_score\"] = pd.cut(rfm_uk[\"frequency\"], bins=[-1,np.percentile(rfm_uk[\"frequency\"], 25),np.percentile(rfm_uk[\"frequency\"], 50), \n                                             np.percentile(rfm_uk[\"frequency\"], 75),rfm_uk[\"frequency\"].max()],labels=[1, 2, 3, 4]).astype(\"int\")","2214a1b4":"rfm_uk[\"monetary_score\"] = pd.cut(rfm_uk[\"monetary\"], bins=[-1,np.percentile(rfm_uk[\"monetary\"], 25),np.percentile(rfm_uk[\"monetary\"], 50), \n                                             np.percentile(rfm_uk[\"monetary\"], 75),rfm_uk[\"monetary\"].max()],labels=[1, 2, 3, 4])","0b2dbdf6":"rfm_uk","21620b08":"rfm_uk['RFMClass']=0\nrfm_uk['Customer_Seg']=''","1e5f48b0":"j=0\nwhile j <= (len(rfm_uk)-1):\n    rfm_uk['RFMClass'][j]= ((rfm_uk['recency_score'].iloc[j])*100)+((rfm_uk['frequency_score'].iloc[j])*10)+(rfm_uk['monetary_score'].iloc[j])\n    j+=1","a2dd1457":"k=0\nwhile k <= (len(rfm_uk)-1):\n    if rfm_uk['recency_score'].iloc[k]== 4 and rfm_uk['frequency_score'].iloc[k]>=3 and  rfm_uk['monetary_score'].iloc[k]>=3:\n        rfm_uk['Customer_Seg'].iloc[k]= 'Top Customers'\n    elif rfm_uk['recency_score'].iloc[k]== 4 and rfm_uk['frequency_score'].iloc[k]>=1 and  rfm_uk['monetary_score'].iloc[k]>=1:\n        rfm_uk['Customer_Seg'].iloc[k]= 'Active Customers'\n    elif rfm_uk['recency_score'].iloc[k]== 3 and rfm_uk['frequency_score'].iloc[k]>=2 and  rfm_uk['monetary_score'].iloc[k]>=3:\n        rfm_uk['Customer_Seg'].iloc[k]= 'Emerging Customers'\n    elif rfm_uk['recency_score'].iloc[k]>= 3 and rfm_uk['frequency_score'].iloc[k]==1 and  rfm_uk['monetary_score'].iloc[k]>=1:\n        rfm_uk['Customer_Seg'].iloc[k]= 'Unsteady Customers'\n    elif rfm_uk['recency_score'].iloc[k]== 3 and rfm_uk['frequency_score'].iloc[k]>=2 and  rfm_uk['monetary_score'].iloc[k]<=2:\n        rfm_uk['Customer_Seg'].iloc[k]= 'Unsteady Customers'\n    elif rfm_uk['recency_score'].iloc[k]== 2 and rfm_uk['frequency_score'].iloc[k]>=1 and  rfm_uk['monetary_score'].iloc[k]>=3:\n        rfm_uk['Customer_Seg'].iloc[k]= 'At Risk'\n    elif rfm_uk['recency_score'].iloc[k]== 2 and rfm_uk['frequency_score'].iloc[k]>=3 and  rfm_uk['monetary_score'].iloc[k]<=2:\n        rfm_uk['Customer_Seg'].iloc[k]= 'At Risk'\n    elif rfm_uk['recency_score'].iloc[k]== 1 and rfm_uk['frequency_score'].iloc[k]>=3 and  rfm_uk['monetary_score'].iloc[k]>=1:\n        rfm_uk['Customer_Seg'].iloc[k]= 'At Risk'\n    elif rfm_uk['recency_score'].iloc[k]== 2 and rfm_uk['frequency_score'].iloc[k]<=2 and  rfm_uk['monetary_score'].iloc[k]<=2:\n        rfm_uk['Customer_Seg'].iloc[k]= 'Potentially lost'\n    elif rfm_uk['recency_score'].iloc[k]== 1 and rfm_uk['frequency_score'].iloc[k]<=2 and  rfm_uk['monetary_score'].iloc[k]>=3:\n        rfm_uk['Customer_Seg'].iloc[k]= 'Inactive Customers'\n    elif rfm_uk['recency_score'].iloc[k]== 1 and rfm_uk['frequency_score'].iloc[k]<=2 and  rfm_uk['monetary_score'].iloc[k]<=2:\n        rfm_uk['Customer_Seg'].iloc[k]= 'Lost'\n    else:\n        rfm_uk['Customer_Seg'].iloc[k]= 'Uncategorized'\n    k+=1       \n       ","d7e00437":"rfm_uk['monetary_score']=rfm_uk['monetary_score'].astype('int32')","4e439bb5":"rfm_uk.info()","6db7e5f9":"data1 = rfm_uk.groupby(\"Customer_Seg\")[\"RFMClass\"].count()\ndata1","7fe78708":"sns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.subplots(figsize=(10,10))\ndata1.plot.pie(autopct=\"%.1f%%\")","61b9dabd":"sns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.subplots(figsize=(18,5))\nsns.barplot(y='monetary',x= 'Customer_Seg',data= rfm_uk)","94b3af38":"### Monetary","495ebeae":"## Inorder to fix the date of analysis we will see the date range ","b9b495c0":"### count of null values in each column","dc4d9c9d":"### observation:\nMaximum number of transactions have taken place in UK","e52983eb":"### Frequency","0ae54f06":"### considering the negative quantities as 0 for rfm analysis","f99e23ac":"### creating a new column called price which will quantity x unitprice","916ace9b":"\n### since the values that are null for description are null for both customer id and unitprice and the description has less missing values thus i will drop the rows will missing values in Description feature","0ef16517":"### Drop the Invoice No. column as it is not needed","2b3af272":"## since the sale is highest in UK thus we can check Uk to analyze the data more details","db86aded":"### Recency","97110f4f":"## Handling Null Values\n","8676e247":"#### let's consider the analysis date as 2012-01-01 and lets calculate the recency","d02551e6":"### Creating RFM class and Customer Segments","6dff35c3":"## Let's derive a separate column for Date from Invoice Date","27a08646":"### Observation:\nSignificant number of customers have been lost amd are at Risk","f0e1feb3":"### removing the special characters from descritpion column to make it a little more consistant","9f6a3a5b":"### find the basic informations using info() and describe() to understand the dataset better","f9b39be9":"### The scores are given as follows: for frequency and monetary 1 is the lowest and 4 the highest while for recency it is the opposite"}}