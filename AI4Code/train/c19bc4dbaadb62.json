{"cell_type":{"b09d81c0":"code","c9d6ce82":"code","3efbc268":"code","98d1149e":"code","84911157":"code","bc1f3a90":"code","4dd84ba2":"code","2280a331":"code","15244d17":"code","2b984e76":"code","99acd4b6":"code","1698db7f":"code","27856870":"code","e182b7e1":"code","3235a2fb":"code","cf85f532":"code","2f23a6dc":"code","43778fa7":"code","496ac865":"code","74a423a3":"code","6eb4f7b5":"code","1ba7b90f":"code","50a42f2b":"code","38fc0eae":"code","2df0a37b":"code","c749563c":"code","d7c886c9":"code","cf6a23aa":"code","6cc589ea":"code","a8ca6761":"code","992a983b":"code","6d8c124f":"code","b6fe138c":"code","44695777":"code","ff678e22":"code","8be00969":"code","62de457e":"code","d686ef09":"code","85c4a454":"code","682fcd76":"code","e86541d5":"code","bc61c32f":"code","793c206c":"code","edf252d1":"code","577264c2":"code","8550ce63":"code","c5d3c002":"code","f4825a62":"code","bb0e5692":"markdown","e6e18303":"markdown","99312a71":"markdown","6eed503f":"markdown","8b19066f":"markdown","2f6bbc4f":"markdown","1737cd2f":"markdown"},"source":{"b09d81c0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","c9d6ce82":"# READ A COMMA-SEPARETED VALUES (CSV)FILE INTO PANDAS DATA FRAME.\ntrain=pd.read_csv(r\"..\/input\/titanic\/train.csv\")\ntrain.head(10)","3efbc268":"test=pd.read_csv(r\"..\/input\/titanic\/test.csv\")\ntest.head(10)","98d1149e":"# COUNT THE NUMBER OF ROWS AND COLUMNS IN THE TRAIN DATASET AND TEST DATASET.\nprint(train.shape)\nprint(test.shape)\n","84911157":"#LOOK AT THE COLUMNS OF TRAIN DATASET AND TEST DATASET.\nprint(train.columns)\nprint(test.columns)","bc1f3a90":"train.isnull().sum()","4dd84ba2":"# GET THE COUNT OF THE NUMBER OF SURVIOURS,SEX,EMBARKED,SIBSP,TICKET.\nprint(train[\"Survived\"].value_counts())\nprint(train[\"Sex\"].value_counts())\nprint(train[\"Embarked\"].value_counts())\nprint(train[\"SibSp\"].value_counts())\nprint(train[\"Ticket\"].value_counts())","2280a331":"test.isnull().sum()","15244d17":"sns.countplot(x=\"Survived\",data=train)","2b984e76":"sns.countplot(x=\"Sex\",data=train)","99acd4b6":"#LOOK AT THE SURVIVAL RATE BY SEX.\ntrain.groupby('Sex')[['Survived']].mean()","1698db7f":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS\ntrain.pivot_table('Survived',index='Sex',columns='Pclass')","27856870":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS VISUALLY.\ntrain.pivot_table('Survived',index='Sex',columns='Pclass').plot()","e182b7e1":"#PLOT THE SURVIVAL RATE OF EACH CLASS\nsns.barplot(x='Pclass',y='Survived',data=train)","3235a2fb":"#LOOK AT SURVIVAL RATE BY SEX ,AGE AND PCLASS.\nage=pd.cut(train['Age'],[0,18,80])\ntrain.pivot_table('Survived',['Sex','Age'],'Pclass')","cf85f532":"#COUNT THE EMPTY VALUES IN EACH COLUMN\ntrain.isna().sum()","2f23a6dc":"#LOOK AT ALL OF THE VALUES IN EACH COLUMN AND GET A COUNT.\nfor val in train:\n    print(train[val].value_counts())\n    print()","43778fa7":"train.dtypes","496ac865":"#PRINT THE UNIQUE VALUES IN THE COLUMNS\nprint(train['Sex'].unique())\nprint(train['Embarked'].unique())","74a423a3":"title=set()\nfor name in train[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","6eb4f7b5":"titles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}\n","1ba7b90f":"train[\"Name\"]=train[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntrain[\"Name\"]=train.Name.map(titles)\ntrain.head(10)","50a42f2b":"#DROP THE UNWANTED FIELDS.\ndf=train.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf.head()","38fc0eae":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf.Sex=df.Sex.map({\"female\":0,\"male\":\"1\"})\ndf.Embarked=df.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf.Name=df.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf.head()","2df0a37b":"df.isnull().sum()","c749563c":"#REPLACING ALL THE NULL VALUES.\ndf.fillna(df.Age.mean(),inplace=True)\nround(df[\"Age\"],1)\ndf.head(10)","d7c886c9":"df.isnull().sum()","cf6a23aa":"#GET SOME STATISTICS.\ndf.describe()","6cc589ea":"#THE STANDARDSCALER ASSUMES DATA IS NORMALLYDISTRIBUTED WITHIN EACH FEATURE AND SCALES THEM SUCH \n#THAT THE DISTRIBUTION CENTERED AROUND 0, WITH A STANDARD DEVIATION BY 1.\n\nfrom sklearn.preprocessing import StandardScaler\ndf[\"Age\"]=round((df.Age-df.Age.mean()\/df.Age.std()))\ndf[\"Fare\"]=round((df.Fare-df.Fare.mean()\/df.Fare.std()))\n","a8ca6761":"df.head()","992a983b":"df.head()","6d8c124f":"from sklearn.model_selection import train_test_split","b6fe138c":"x_train,x_test,y_train,y_test=train_test_split(\n     df.drop([\"Survived\"],axis=1),\n     df.Survived,test_size=0.2,\n     random_state=0,\n     stratify=df.Survived)","44695777":"def models(x_train,y_train):\n    # USE DECISION TREE CLASSIFIER.\n    from sklearn.tree import DecisionTreeClassifier\n    tree=DecisionTreeClassifier(criterion='entropy',random_state=0)\n    tree.fit(x_train,y_train)\n    \n    \n\n    \n    \n    #PRINT THE TRAINING ACCURACY FOR DECISION TREE CLASSIFIER MODEL.\n    print('Decision tree training accuracy:',tree.score(x_train,y_train))\n    \n    return tree","ff678e22":"#GET AND TRAIN THE DECISION TREE CLASSIFIER MODELS\nmodel=models(x_train,y_train)","8be00969":"title=set()\nfor name in test[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","62de457e":"titles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}\n","d686ef09":"test[\"Name\"]=test[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntest[\"Name\"]=test.Name.map(titles)\ntest.head(10)","85c4a454":"#DROP THE UNWANTED FIELDS.\ndf1=test.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf1.head()","682fcd76":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf1.Sex=df1.Sex.map({\"female\":0,\"male\":\"1\"})\ndf1.Embarked=df1.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf1.Name=df1.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf1.head()","e86541d5":"df1.isnull().sum()","bc61c32f":"#REPLACING ALL THE NULL VALUES.\ndf1.fillna(df1.Age.mean(),inplace=True)\nround(df1[\"Age\"],1)\ndf1.head(10)","793c206c":"df1.isnull().sum()","edf252d1":"#GET SOME STATISTICS.\ndf1.describe()","577264c2":"df1[\"Age\"]=round((df1.Age-df1.Age.mean()\/df1.Age.std()))\ndf1[\"Fare\"]=round((df1.Fare-df1.Fare.mean()\/df1.Fare.std()))\n","8550ce63":"df1.head()","c5d3c002":"pred=model.predict(df1)","f4825a62":"pred","bb0e5692":"# DATA MODELLING","e6e18303":"# IMPORTING PACKAGES.","99312a71":"# CLEANING THE DATASET","6eed503f":"# DATA ANALYSIS.","8b19066f":"# PRINT THE PREDICTION ON DECISION TREE CLASSIFIER MODEL","2f6bbc4f":"# CREATE A FUNCTION WITH DECISION TREE CLASSIFIER","1737cd2f":"# FEATURE SCALLING."}}