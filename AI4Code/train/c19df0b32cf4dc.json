{"cell_type":{"7eccc8a6":"code","20b2d066":"code","5df54b0d":"code","b7cfa488":"code","9423cf7f":"code","8e21a002":"code","aa43558c":"code","a82472da":"code","e16b8b5d":"code","8defb6b9":"code","da64ded3":"code","4cc2cb5c":"code","3a36f15e":"code","7104b5ba":"code","688ea6a6":"code","04e3cc10":"code","2264b847":"code","36d5195b":"code","b0a05e4b":"code","f8d086b8":"code","0bd2057a":"code","83295cc6":"code","d966bd89":"markdown","23e613a1":"markdown","df0730a1":"markdown","2816d3c2":"markdown","0a092fc7":"markdown","bd7ee047":"markdown","7c7396fc":"markdown","c12d434d":"markdown","bb2b9ab7":"markdown","fa118cc8":"markdown","2eabedfc":"markdown","b173dbb8":"markdown","a2809ed5":"markdown","0ab18d53":"markdown","736c5ac0":"markdown","5d25b627":"markdown","aeb91718":"markdown"},"source":{"7eccc8a6":"import os\nimport numpy as np\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.preprocessing.image import ImageDataGenerator as imgen\nfrom keras.models import Model, load_model\nfrom keras.layers import Dropout, Dense, Input\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler, ReduceLROnPlateau, CSVLogger\nfrom keras.optimizers import Adam\n\nfrom keras.applications.resnet_v2 import ResNet50V2\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\nfrom sklearn.metrics import classification_report, confusion_matrix","20b2d066":"IMAGE_SIZE = 224\nBATCH_SIZE = 32","5df54b0d":"traingen = imgen(rescale = 1\/255,\n                 zoom_range = 0.2,\n                 width_shift_range = 0.2,\n                 height_shift_range = 0.2,\n                 fill_mode = \"nearest\",\n                )\n\ntestgen = imgen(rescale = 1\/255,)","b7cfa488":"train_ds = traingen.flow_from_directory(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\",\n                                        target_size=(IMAGE_SIZE, IMAGE_SIZE),\n                                        seed = 123,\n                                        batch_size=BATCH_SIZE,\n                                        class_mode = \"binary\"\n                                       )\n\nval_ds  = testgen.flow_from_directory(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\",\n                                      target_size=(IMAGE_SIZE, IMAGE_SIZE),\n                                      seed = 123,\n                                      batch_size=16,\n                                      class_mode = \"binary\"\n                                     )\n\ntest_ds = testgen.flow_from_directory(\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\", \n                                      target_size=(IMAGE_SIZE, IMAGE_SIZE),\n                                      seed = 123,\n                                      batch_size=BATCH_SIZE,\n                                      shuffle = False,\n                                      class_mode = \"binary\"\n                                      )","9423cf7f":"class_names = train_ds.class_indices\nclass_names = list(class_names.keys())\nclass_names","8e21a002":"class_dist = train_ds.classes\nsns.countplot(x = class_dist);","aa43558c":"images, labels = next(val_ds)","a82472da":"def plotImages(image, label):\n    plt.figure(figsize=[22,14])\n    for i in range(16):\n        plt.subplot(4,4,i+1)\n        plt.imshow(image[i])\n        plt.title(f\"Class : {class_names[np.argmax(label[i])]}\")\n        plt.axis(\"off\")\n    plt.show()","e16b8b5d":"plotImages(images, labels)","8defb6b9":"# get the pre-trained model\nbase_model = ResNet50V2(include_top = False,\n                       weights = \"imagenet\",\n                       pooling = \"avg\")\n\nbase_model.trainable = False","da64ded3":"image_input = Input(shape = (IMAGE_SIZE, IMAGE_SIZE, 3))\nx = base_model(image_input, training = False)\nx = Dense(256, activation = \"relu\")(x)\nx = Dropout(0.5)(x)\nx = Dense(128, activation = \"relu\")(x)\nimage_output = Dense(1, activation = \"sigmoid\")(x)\n\nmodel = Model(image_input, image_output)\nmodel.summary()","4cc2cb5c":"# callbacks\ndef scheduler(epoch, lr):\n    if epoch < 5:\n        return lr\n    else:\n        return lr * tf.math.exp(-0.1)\n\nmy_callbacks = [EarlyStopping(monitor = \"val_loss\", patience = 3),\n                ModelCheckpoint(\"Pneumonia_model.h5\", verbose = 1, save_best_only = True),\n                LearningRateScheduler(scheduler),\n                CSVLogger(\"training.log\")\n               ]\n\n# compile\n\nMETRICS = [\"accuracy\", tf.keras.metrics.AUC(name = \"AUC\")]\n\nmodel.compile(optimizer = Adam(), loss = \"binary_crossentropy\",\n              metrics = METRICS\n             )\n","3a36f15e":"# before training\nmodel.evaluate(test_ds)","7104b5ba":"history = model.fit(train_ds, epochs = 20, validation_data = test_ds, callbacks = my_callbacks)","688ea6a6":"plt.figure(figsize=(15,6))\n\nplt.subplot(1,2,1)\nplt.plot(history.epoch,history.history['accuracy'],label = 'Training')\nplt.plot(history.epoch,history.history['val_accuracy'],label = 'validation')\n\nplt.title(\"Accuracy\")\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.plot(history.epoch,history.history['loss'],label = 'Training')\nplt.plot(history.epoch,history.history['val_loss'],label = 'validation')\n\nplt.title(\"Loss\")\nplt.legend()\nplt.show()","04e3cc10":"model = load_model(\".\/Pneumonia_model.h5\")","2264b847":"model.evaluate(test_ds)","36d5195b":"pred = model.predict(test_ds, verbose = 1)","b0a05e4b":"pred = [np.round(i) for i in pred]","f8d086b8":"actual = test_ds.classes","0bd2057a":"print(classification_report(actual, pred))","83295cc6":"plt.figure(figsize=[14,7])\nsns.heatmap(confusion_matrix(pred, actual), annot = True, fmt = \"d\", cmap = \"BuPu\");","d966bd89":"**Classification Report**","23e613a1":"## EDA","df0730a1":"## **Training**","2816d3c2":"## Data Preparation and Augmentation","0a092fc7":"**Confusion Matrix**","bd7ee047":"## **Defining out Model.**","7c7396fc":"## Testing","c12d434d":"- **Unbalanced.**","bb2b9ab7":"**Images\/Labels.**","fa118cc8":"**Predictions**","2eabedfc":"**Score.**","b173dbb8":"**Distribution of classes.**","a2809ed5":"**Dependencies**","0ab18d53":"## Loss, Optimizer, metrics and Checkpoints","736c5ac0":"\n### The Data\n\n![](https:\/\/i.imgur.com\/jZqpV51.png)\n\n- The dataset is organized into 3 folders (train, test, val) and contains subfolders for each image category (Pneumonia\/Normal). There are 5,863 X-Ray images (JPEG) and 2 categories (Pneumonia\/Normal).\n","5d25b627":"## **Pneumonia Detection from X-Ray Images**\n### Data Augmenatation and Transfer Learning","aeb91718":"**MODEL**"}}