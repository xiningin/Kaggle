{"cell_type":{"880b227c":"code","c9d67ca3":"code","e6403a7f":"code","0d32b13c":"code","88de1f13":"code","df162b32":"code","a7f69fef":"code","75d54cda":"code","5d8f2673":"code","cf3af3ee":"code","9720b6d7":"code","de30ba89":"code","ec948b87":"code","7103a642":"code","a461a40d":"code","8fcf2d45":"code","0d2eed02":"code","d2f84a91":"code","1e824ba9":"code","5f11d53b":"code","1c99c1ba":"code","e60a6a6e":"code","d6a7bac9":"code","ad8e29ae":"code","9ef57581":"code","7b93b9fc":"code","c47cd1cf":"code","a0760c72":"markdown","919c38bc":"markdown","8d209b7e":"markdown","2cc34382":"markdown","bbf28148":"markdown","96185474":"markdown","7ae706a9":"markdown","f9249009":"markdown","11aebcd6":"markdown","00ef0c07":"markdown","6fe1a7f5":"markdown","f2cbf4bb":"markdown","a18cb0ff":"markdown","9022faed":"markdown"},"source":{"880b227c":"from skimage import io\nimport os\nimport pandas as pd\nimport numpy as np\nimport pydicom\nfrom pydicom.data import get_testdata_files\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom PIL import Image\n\nfrom keras.models import Model, load_model\nfrom keras.layers import Input\nfrom keras.layers.core import Lambda\nfrom keras.layers.convolutional import Conv2D, Conv2DTranspose\nfrom keras.layers.pooling import MaxPooling2D\nfrom keras.layers.merge import concatenate\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import backend as K\n\nimport tensorflow as tf","c9d67ca3":"PATH = \"..\/input\"\nprint(os.listdir(PATH))","e6403a7f":"pd.read_csv(PATH+\"\/stage_1_detailed_class_info.csv\").head()","0d32b13c":"pd.read_csv(PATH+\"\/stage_1_sample_submission.csv\").head()","88de1f13":"pd.read_csv(PATH+\"\/stage_1_train_labels.csv\").head()","df162b32":"filename = pydicom.read_file(PATH+\"\/stage_1_train_images\/00436515-870c-4b36-a041-de91049b9ab4.dcm\")\nfilename.pixel_array","a7f69fef":"io.imshow(filename.pixel_array)","75d54cda":"train = pd.read_csv(PATH+\"\/stage_1_train_labels.csv\")","5d8f2673":"\ntest = pd.read_csv(PATH+\"\/stage_1_sample_submission.csv\")\ntrain[train[\"patientId\"] == \"00436515-870c-4b36-a041-de91049b9ab4\"]","cf3af3ee":"im = np.array(filename.pixel_array, dtype=np.uint8)\n\n# Create figure and axes\nfig,ax = plt.subplots(1)\n\n# Display the image\nax.imshow(im)\n\n# Create a Rectangle patch\nrect_1 = patches.Rectangle((264,152),213,379,linewidth=1,edgecolor='r',facecolor='none')\nrect_2 = patches.Rectangle((562,152),256,453,linewidth=1,edgecolor='r',facecolor='none')\n# Add the patch to the Axes\nax.add_patch(rect_1)\nax.add_patch(rect_2)\n\n\nplt.show()","9720b6d7":"# Function create by soply on GithubGist\ndef show_images(images, cols = 1, titles = None):\n    \"\"\"Display a list of images in a single figure with matplotlib.\n    \n    Parameters\n    ---------\n    images: List of np.arrays compatible with plt.imshow.\n    \n    cols (Default = 1): Number of columns in figure (number of rows is \n                        set to np.ceil(n_images\/float(cols))).\n    \n    titles: List of titles corresponding to each image. Must have\n            the same length as titles.\n    \"\"\"\n    assert((titles is None)or (len(images) == len(titles)))\n    n_images = len(images)\n    if titles is None: titles = ['Image (%d)' % i for i in range(1,n_images + 1)]\n    fig = plt.figure()\n    for n, (image, title) in enumerate(zip(images, titles)):\n        a = fig.add_subplot(cols, np.ceil(n_images\/float(cols)), n + 1)\n        if image.ndim == 2:\n            plt.gray()\n        plt.imshow(image)\n        a.set_title(title)\n    fig.set_size_inches(np.array(fig.get_size_inches()) * n_images)\nplt.show()","de30ba89":"filename_2 = pydicom.read_file(PATH+\"\/stage_1_train_images\/0004cfab-14fd-4e49-80ba-63a80b6bddd6.dcm\")\nshow_images([filename_2.pixel_array,filename.pixel_array], titles = [\"Not pneumonia\", \"pneumonia\"])","ec948b87":"X_train, y_train, train_names = [], [], []","7103a642":"IMG_SIZE = 1024\nNEW_SIZE = 128\nN = IMG_SIZE\/NEW_SIZE","a461a40d":"for i in np.unique(train[\"patientId\"]):\n    data = train[train[\"patientId\"]== i]\n    image = data[\"patientId\"].values[0]\n    new_image = Image.fromarray(pydicom.read_file(PATH+\"\/stage_1_train_images\/\"+image+\".dcm\").pixel_array).resize((NEW_SIZE,NEW_SIZE), Image.ANTIALIAS)\n    \n    X_train.append(np.array(new_image).reshape((NEW_SIZE,NEW_SIZE,1)))\n    train_names.append(data[\"patientId\"].values[0])\n    if 0 not in data[\"Target\"].values:\n        \n        new = np.zeros((NEW_SIZE,NEW_SIZE))\n        \n        for j in range(data.shape[0]):\n            x = int(data[\"x\"].values[j]\/N)\n            y = int(data[\"y\"].values[j]\/N)\n            width = int(data[\"width\"].values[j]\/N)\n            height = int(data[\"height\"].values[j]\/N)\n            new[y:y+height,x:x+width] = 1\n        \n        y_train.append(new.reshape((NEW_SIZE,NEW_SIZE,1)))\n    else:\n        new = np.zeros((NEW_SIZE,NEW_SIZE))\n        y_train.append(new.reshape((NEW_SIZE,NEW_SIZE,1)))","8fcf2d45":"X_train[9]","0d2eed02":"X_train[9].shape","d2f84a91":"show_images([X_train[71].reshape((256,256)),y_train[71].reshape((256,256))], titles=[\"Image\",\"Ground Truht\"])","1e824ba9":"filename = pydicom.read_file(PATH+\"\/stage_1_train_images\/\"+train_names[71]+\".dcm\")","5f11d53b":"train[train[\"patientId\"] == train_names[71]]","1c99c1ba":"im = np.array(filename.pixel_array, dtype=np.uint8)\n\n# Create figure and axes\nfig,ax = plt.subplots(1)\n\n# Display the image\nax.imshow(im)\n\n# Create a Rectangle patch\nrect_1 = patches.Rectangle((698,288),226,311,linewidth=1,edgecolor='r',facecolor='none')\nrect_2 = patches.Rectangle((326,212),181,275,linewidth=1,edgecolor='r',facecolor='none')\n# Add the patch to the Axes\nax.add_patch(rect_1)\nax.add_patch(rect_2)\n\n\nplt.show()","e60a6a6e":"show_images([X_train[71].reshape((256,256)),y_train[71].reshape((256,256))], titles=[\"Image\",\"Ground Truht\"])","d6a7bac9":"def mean_iou(y_true, y_pred):\n    prec = []\n    for t in np.arange(0.5, 1.0, 0.05):\n        y_pred_ = tf.to_int32(y_pred > t)\n        score, up_opt = tf.metrics.mean_iou(y_true, y_pred_, 2)\n        K.get_session().run(tf.local_variables_initializer())\n        with tf.control_dependencies([up_opt]):\n            score = tf.identity(score)\n        prec.append(score)\n    return K.mean(K.stack(prec), axis=0)","ad8e29ae":"inputs = Input((NEW_SIZE, NEW_SIZE, 1))\ns = Lambda(lambda x: x \/ 255) (inputs)\n\nc1 = Conv2D(8, (3, 3), activation='relu', padding='same') (s)\nc1 = Conv2D(8, (3, 3), activation='relu', padding='same') (c1)\np1 = MaxPooling2D((2, 2)) (c1)\n\nc2 = Conv2D(16, (3, 3), activation='relu', padding='same') (p1)\nc2 = Conv2D(16, (3, 3), activation='relu', padding='same') (c2)\np2 = MaxPooling2D((2, 2)) (c2)\n\nc3 = Conv2D(32, (3, 3), activation='relu', padding='same') (p2)\nc3 = Conv2D(32, (3, 3), activation='relu', padding='same') (c3)\np3 = MaxPooling2D((2, 2)) (c3)\n\nc4 = Conv2D(64, (3, 3), activation='relu', padding='same') (p3)\nc4 = Conv2D(64, (3, 3), activation='relu', padding='same') (c4)\np4 = MaxPooling2D(pool_size=(2, 2)) (c4)\n\nc5 = Conv2D(128, (3, 3), activation='relu', padding='same') (p4)\nc5 = Conv2D(128, (3, 3), activation='relu', padding='same') (c5)\n\nu6 = Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same') (c5)\nu6 = concatenate([u6, c4])\nc6 = Conv2D(64, (3, 3), activation='relu', padding='same') (u6)\nc6 = Conv2D(64, (3, 3), activation='relu', padding='same') (c6)\n\nu7 = Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same') (c6)\nu7 = concatenate([u7, c3])\nc7 = Conv2D(32, (3, 3), activation='relu', padding='same') (u7)\nc7 = Conv2D(32, (3, 3), activation='relu', padding='same') (c7)\n\nu8 = Conv2DTranspose(16, (2, 2), strides=(2, 2), padding='same') (c7)\nu8 = concatenate([u8, c2])\nc8 = Conv2D(16, (3, 3), activation='relu', padding='same') (u8)\nc8 = Conv2D(16, (3, 3), activation='relu', padding='same') (c8)\n\nu9 = Conv2DTranspose(8, (2, 2), strides=(2, 2), padding='same') (c8)\nu9 = concatenate([u9, c1], axis=3)\nc9 = Conv2D(8, (3, 3), activation='relu', padding='same') (u9)\nc9 = Conv2D(8, (3, 3), activation='relu', padding='same') (c9)\n\noutputs = Conv2D(1, (1, 1), activation='sigmoid') (c9)\n\nmodel = Model(inputs=[inputs], outputs=[outputs])\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=[mean_iou])\nmodel.summary()","9ef57581":"earlystopper = EarlyStopping(patience=5, verbose=1)\ncheckpointer = ModelCheckpoint('model-dsbowl2018-1.h5', verbose=1, save_best_only=True)\nresults = model.fit(np.array(X_train), np.array(y_train), validation_split=0.1, batch_size=2, epochs=10, callbacks=[earlystopper, checkpointer])","7b93b9fc":"### 2.4 Load Model","c47cd1cf":"model = load_model('model-dsbowl2018-1.h5', custom_objects={'mean_iou': mean_iou})","a0760c72":"## 2. Semantic Segmentation","919c38bc":"### 1.1 File: stage_1_detailed_class_info.csv\nProvides detailed information about the type of positive or negative class for each image.","8d209b7e":"for i in np.unique(test[\"patientId\"]):\n    data = test[test[\"patientId\"]== i]\n    image = data[\"patientId\"].values[0]\n    new_image = Image.fromarray(pydicom.read_file(PATH+\"\/stage_1_test_images\/\"+image+\".dcm\").pixel_array).resize((NEW_SIZE,NEW_SIZE), Image.ANTIALIAS)\n    \n    X_test.append(np.array(new_image).reshape((256,256,1)))\n    test_names.append(data[\"patientId\"].values[0])","2cc34382":"### 2.1 Get TRAIN data","bbf28148":"### 1.5 Class and Boxes\n* **Target = 0**  Not pneumonia\n* **Target = 1**  Pneumonia\n* **Pneumonia images** have boxes that show pneumonia location","96185474":"X_test, test_names = [], []","7ae706a9":"### 1.3 File: stage_1_train.csv \nThe training set. Contains patientIds and bounding box \/ target information.\n* **patientId:** A patientId. Each patientId corresponds to a unique image.\n* **x:** The upper-left x coordinate of the bounding box.\n* **y:** The upper-left y coordinate of the bounding box.\n* **width:** The width of the bounding box.\n* **height:** The height of the bounding box.\n* **Target:** The binary Target, indicating whether this sample has evidence of pneumonia.\n","f9249009":"### 1.4 Medical Image","11aebcd6":"# RSNA CHALLENGE","00ef0c07":"### 1.2 File: stage_1_sample_submission.csv\nA sample submission file in the correct format. Contains patientIds for the test set. Note that the sample submission contains one box per image, but there is no limit to the number of bounding boxes that can be assigned to a given image.","6fe1a7f5":"the convertionis rigth?","f2cbf4bb":"### 2.2 Get TEST data","a18cb0ff":"### 2.3 Unet Model\nTHis model is take thanks `Kjetil \u00c5mdal-S\u00e6vik` [kaggle user](https:\/\/www.kaggle.com\/keegil\/keras-u-net-starter-lb-0-277)","9022faed":"## 1. Explore Data\nFor solve the challenge the first step is explore the data of dataset"}}