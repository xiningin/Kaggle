{"cell_type":{"0579aa5f":"code","674cf41c":"code","c42c277f":"code","870c6b0c":"code","bd44e899":"code","2e16e931":"code","6b6673ba":"code","171ab6e2":"code","aa1a91bb":"code","2ada9167":"code","2fd90ac9":"code","525b1a18":"code","6f46e6cc":"code","a3178ceb":"code","9f3790cd":"code","09a8fff4":"code","aff59a89":"code","b80c6c34":"code","ab3261cf":"code","61c63d2c":"code","40303d6c":"code","abf30fbd":"code","d8a43ef1":"code","1912812d":"code","79fbbce4":"code","2cd02c3a":"code","f7104ff1":"code","4d8e0b73":"code","1bcbc546":"code","8c43bf0a":"code","f0cbac32":"code","598c0deb":"code","4549df49":"code","f21852bd":"code","c9bd5746":"code","593b9c38":"code","e895da02":"code","4bf085d7":"code","fa9a32a6":"code","a400003f":"code","26cc8a27":"code","0facbde5":"markdown","de94daf8":"markdown","34a76592":"markdown","07f7659a":"markdown","62878493":"markdown","a43083dd":"markdown","df0285be":"markdown","4d7b7d9d":"markdown","2dd4671f":"markdown","90cb1f34":"markdown","28c8b204":"markdown","a77a29a7":"markdown","209d231c":"markdown"},"source":{"0579aa5f":"import pandas as pd\nimport numpy as np\n#visualisation\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n#EDA\nfrom collections import Counter\n# data preprocessing\nfrom sklearn.preprocessing import StandardScaler\n# data splitting\nfrom sklearn.model_selection import train_test_split\n# data modeling\nfrom sklearn.metrics import confusion_matrix,accuracy_score,roc_curve,classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB","674cf41c":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.\nHeartattack = pd.read_csv('\/kaggle\/input\/heart-attack\/Heart Attack Indicators.csv')","c42c277f":"Heartattack.head()","870c6b0c":"\nHeartattack.info()","bd44e899":"Heartattack.columns","2e16e931":"\nHeartattack.describe()","6b6673ba":"sns.heatmap(Heartattack.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')\n#checking for null values","171ab6e2":"fig, ax = plt.subplots(figsize=(10,10))         \nHA = Heartattack.corr()\nsns.heatmap(HA, annot = True, cmap = 'coolwarm', ax =ax)","aa1a91bb":"sns.countplot('target', hue = 'sex', data = Heartattack)","2ada9167":"sns.displot(Heartattack['age'], kde = 'False', bins = 30)","2fd90ac9":"pd.crosstab(Heartattack.age,Heartattack.target).plot(kind=\"bar\")\nplt.title(\"Freuency of Heart Disease with Age\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Frequency\")\nplt.legend([\"No Attack\", \"Heart Attack\"], loc = \"upper right\") \nfig = plt.gcf()\nfig.set_size_inches(22, 10)","525b1a18":"sns.countplot( x ='sex', data = Heartattack, hue = \"target\", palette = \"tab10\") \nplt.legend([\"No Attack\", \"Heart Attack\"], loc = \"upper right\") \nfig = plt.gcf()\nfig.set_size_inches(8, 8)","6f46e6cc":"sns.displot(Heartattack['chol'], kde = 'False', bins = 30)","a3178ceb":"x1 = Heartattack.age[Heartattack.target==1]\nx2 = Heartattack.age[Heartattack.target==0]\ny1 = Heartattack.thalach[(Heartattack.target==1)]\ny2 = Heartattack.thalach[(Heartattack.target==0)]\nplt.scatter(x = x1 , y = y1 , c = \"blue\")\nplt.scatter(x = x2 , y = y2 , c = \"red\")\nplt.legend([\"No Attack\", \"Heart Attack\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","9f3790cd":"pd.crosstab(Heartattack.cp,Heartattack.target).plot(kind = \"bar\" , figsize=(15,6) , color = [\"#ff6600\",\"#9966cc\"])\nplt.title(\"Heart Disease Frequency  w.r.t  to Chest Pain Type\")\nplt.xlabel(\"Chest Pain Type\")\nplt.xticks(rotation = 0)\nplt.ylabel(\"Frequency of Disease\")\nplt.legend([\"No Attack\", \"Heart Attack\"], loc = \"upper right\") \nfig = plt.gcf()\nfig.set_size_inches(8, 8)","09a8fff4":"X = Heartattack.drop(['target'],axis = 1)\ny = Heartattack['target']","aff59a89":"from sklearn import preprocessing\nencoder = preprocessing.LabelEncoder()\nfor i in Heartattack.columns:\n    if isinstance(Heartattack[i][0], str):\n        Heartattack[i] = encoder.fit_transform(Heartattack[i])\n            \n            ","b80c6c34":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\nprint(y_test.unique())\nCounter(y_train)\n#checking if the data is split equally\n","ab3261cf":"from sklearn.linear_model import LogisticRegression\nlm = LogisticRegression()\nlm.fit(X_train,y_train)","61c63d2c":"pred = lm.predict(X_test)\nprint(pred)\nLR_acc_score = accuracy_score(y_test, predict)\nprint(\"Accuracy of LR model:\",LR_acc_score*100,'\\n')","40303d6c":"resultLR = pd.DataFrame(data = [pred,y_test])\nresultLR.transpose()","abf30fbd":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, pred))","d8a43ef1":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, pred)\ncm","1912812d":"from sklearn.neighbors import KNeighborsClassifier","79fbbce4":"knn = KNeighborsClassifier(n_neighbors = 1)\nknn.fit(X_train, y_train)","2cd02c3a":"predic = knn.predict(X_test)\npredic","f7104ff1":"from sklearn.metrics import classification_report, confusion_matrix\nprint(classification_report(y_test, predic))\nprint(confusion_matrix(y_test, predic))","4d8e0b73":"resultKNN = pd.DataFrame(data = [predic,y_test])\nresultKNN.transpose()","1bcbc546":"error_rate = []\n\n# Will take some time\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","8c43bf0a":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","f0cbac32":"knn = KNeighborsClassifier(n_neighbors = 24)\nknn.fit(X_train, y_train)\npredict = knn.predict(X_test)\npredict\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint(classification_report(y_test, predict))\nprint(confusion_matrix(y_test, predict))\nknn_acc_score = accuracy_score(y_test, predict)\nprint(\"Accuracy of KNN model:\",knn_acc_score*100,'\\n')\n","598c0deb":"from sklearn.metrics import confusion_matrix,accuracy_score,roc_curve,classification_report\nfrom sklearn.naive_bayes import GaussianNB\nm2 = 'Naive Bayes'\nnb = GaussianNB()\nnb.fit(X_train,y_train)\nnbpred = nb.predict(X_test)\nnb_conf_matrix = confusion_matrix(y_test, nbpred)\nnb_acc_score = accuracy_score(y_test, nbpred)\nprint(nbpred)\nprint(\"confussion matrix\")\nprint(nb_conf_matrix)\nprint(\"\\n\")\nprint(\"Accuracy of Naive Bayes model:\",nb_acc_score*100,'\\n')\nprint(classification_report(y_test,nbpred))\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, nbpred)","4549df49":"resultNB = pd.DataFrame(data = [nbpred,y_test])\nresultNB.transpose()","f21852bd":"from sklearn.ensemble import RandomForestClassifier\nm3 = 'Random Forest Classfier'\nrf = RandomForestClassifier(n_estimators=20, random_state=12,max_depth=5)\nrf.fit(X_train,y_train)\nrf_predicted = rf.predict(X_test)\nrf_conf_matrix = confusion_matrix(y_test, rf_predicted)\nrf_acc_score = accuracy_score(y_test, rf_predicted)\nprint(rf_predicted)\nprint(\"confussion matrix\")\nprint(rf_conf_matrix)\nprint(\"\\n\")\nprint(\"Accuracy of Random Forest:\",rf_acc_score*100,'\\n')\nprint(classification_report(y_test,rf_predicted))","c9bd5746":"resultRF = pd.DataFrame(data = [rf_predicted,y_test])\nresultRF.transpose()","593b9c38":"from sklearn.tree import DecisionTreeClassifier\nm6 = 'DecisionTreeClassifier'\ndt = DecisionTreeClassifier(criterion = 'entropy',random_state=0,max_depth = 6)\ndt.fit(X_train, y_train)\ndt_predicted = dt.predict(X_test)\ndt_conf_matrix = confusion_matrix(y_test, dt_predicted)\ndt_acc_score = accuracy_score(y_test, dt_predicted)\nprint(dt_predicted)\nprint(\"confussion matrix\")\nprint(dt_conf_matrix)\nprint(\"\\n\")\nprint(\"Accuracy of DecisionTreeClassifier:\",dt_acc_score*100,'\\n')\nprint(classification_report(y_test,dt_predicted))","e895da02":"resultDT = pd.DataFrame(data = [dt_predicted,y_test])\nresultDT.transpose()","4bf085d7":"from sklearn.svm import SVC\nm7 = 'Support Vector Classifier'\nsvc =  SVC(kernel='rbf', C=2)\nsvc.fit(X_train, y_train)\nsvc_predicted = svc.predict(X_test)\nsvc_conf_matrix = confusion_matrix(y_test, svc_predicted)\nsvc_acc_score = accuracy_score(y_test, svc_predicted)\nprint(svc_predicted)\nprint(\"confussion matrix\")\nprint(svc_conf_matrix)\nprint(\"\\n\")\nprint(\"Accuracy of Support Vector Classifier:\",svc_acc_score*100,'\\n')\nprint(classification_report(y_test,svc_predicted))","fa9a32a6":"resultSVC = pd.DataFrame(data = [svc_predicted,y_test])\nresultSVC.transpose()","a400003f":"model_ev = pd.DataFrame({'Model': ['Logistic Regression','Naive Bayes','Random Forest','K-Nearest Neighbour','Decision Tree','Support Vector Machine'], 'Accuracy': [LR_acc_score*100,\n                    nb_acc_score*100,rf_acc_score*100,knn_acc_score*100,dt_acc_score*100,svc_acc_score*100]})\nmodel_ev","26cc8a27":"colors = ['red','green','blue','silver','yellow','orange']\nplt.figure(figsize=(12,5))\nplt.title(\"barplot Represent Accuracy of different models\")\nplt.xlabel(\"Accuracy %\")\nplt.ylabel(\"Algorithms\")\nplt.bar(model_ev['Model'],model_ev['Accuracy'],color = colors)\nplt.show()","0facbde5":"# Naive Bayes","de94daf8":"# Model Evaluation","34a76592":"# Logistic Regression","07f7659a":"# Data Visualization","62878493":"# Loading Data","a43083dd":"# SVC","df0285be":"# KNN","4d7b7d9d":"Sources : https:\/\/www.kaggle.com\/nareshbhat\/heart-attack-prediction-using-different-ml-models","2dd4671f":"# Decision Tree","90cb1f34":"# Model Preparation","28c8b204":"# Understanding Data","a77a29a7":"# Random Forest","209d231c":"# Packages Required"}}