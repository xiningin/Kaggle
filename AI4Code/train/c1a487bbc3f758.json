{"cell_type":{"6aacabbe":"code","5f19c2b9":"code","f449b2a3":"code","c8fdf0bd":"code","26f1a1bd":"code","37f71b52":"code","3e99841e":"code","794370aa":"code","b0d37f53":"code","da57a614":"code","c10d871e":"code","b21d2a16":"code","7964a09c":"code","55e906b3":"code","4ee6bdfd":"code","9791b17f":"code","b87f1e7f":"code","2436b3d4":"code","c9631ea1":"code","e1bbdafe":"markdown","585ac27b":"markdown","b30d24a4":"markdown","a3ad3b8f":"markdown","14dba851":"markdown","4424a284":"markdown","48116066":"markdown","5be23c41":"markdown","e831c669":"markdown","61c4a7ef":"markdown","5d5cb129":"markdown","9071b30b":"markdown","8b15cf92":"markdown","ed53526d":"markdown","64e5d2f8":"markdown"},"source":{"6aacabbe":"import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity","5f19c2b9":"df = pd.read_csv('\/kaggle\/input\/top-270-rated-computer-science-programing-books\/prog_book.csv')","f449b2a3":"df.head()","c8fdf0bd":"import nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nstop = stopwords.words('english')\n\n# Set of stopwords to remove\nstop = set(stop)\n\n# Set of punctuation signs to remove\nfrom string import punctuation","26f1a1bd":"import re\n\ndef lower(text):\n    return text.lower()\n\ndef remove_punctuation(text):\n    return text.translate(str.maketrans('','', punctuation))\n\ndef remove_stopwords(text):\n    return \" \".join([word for word in str(text).split() if word not in stop])\n\n# Removing all words with digits and standalone digits\ndef remove_digits(text):\n    return re.sub(r'\\d+', '', text)\n\n# One function to clean it all\ndef clean_text(text):\n    text = lower(text)\n    text = remove_punctuation(text)\n    text = remove_stopwords(text)\n    text = remove_digits(text)\n    return text","37f71b52":"df['clean_Book_title']=df['Book_title'].apply(clean_text)\ndf.head()","3e99841e":"df['clean_Description']=df['Description'].apply(clean_text)\ndf.head()","794370aa":"# Initializing vectorizer\nvectorizer = TfidfVectorizer(analyzer='word', lowercase=False)\n\n# Applying vectorized to clean text\nX = vectorizer.fit_transform(df['clean_Book_title'])\n\n# Getting array with vectorized titles\ntitle_vectors = X.toarray()\ntitle_vectors","b0d37f53":"desc_vectorizer = TfidfVectorizer(analyzer='word', lowercase=False)\nY = desc_vectorizer.fit_transform(df['clean_Description'])\ndesc_vectors = Y.toarray()\ndesc_vectors","da57a614":"# List of titles for use\n# df['Book_title'].tolist()","c10d871e":"def get_recommendations(value_of_element, feature_locate, df, vectors_array, feature_show):\n    \"\"\"Returns DataFrame with particular feature of target and the same feature of five objects similar to it.\n\n    value_of_element     - unique value of target object\n    feature_locate       - name of the feature which this unique value belongs to\n    df                   - DataFrame with feautures\n    vectors_array        - array of vectorized text used to find similarity\n    feature_show         - feature that will be shown in final DataFrame\n    \"\"\"\n    \n    # Locating target element by its specific value\n    index_of_element = df[df[feature_locate]==value_of_element].index.values[0]\n    \n    # Finding its value to show\n    show_value_of_element = df.iloc[index_of_element][feature_show]\n\n    # Dropping target element from df\n    df_without = df.drop(index_of_element).reset_index().drop(['index'], axis=1)\n\n    # Dropping target element from vectors array\n    vectors_array = list(vectors_array)\n    target = vectors_array.pop(index_of_element).reshape(1,-1)\n    vectors_array = np.array(vectors_array)\n\n    # Finding cosine similarity between vectors\n    most_similar_sklearn = cosine_similarity(target, vectors_array)[0]\n\n    # Sorting coefs in desc order \n    idx = (-most_similar_sklearn).argsort()\n\n    # Finding features of similar objects by index\n    all_values = df_without[[feature_show]]\n    for index in idx:\n      simular = all_values.values[idx]\n     \n    recommendations_df = pd.DataFrame({feature_show: show_value_of_element,\n                                    \"rec_1\": simular[0][0],\n                                    \"rec_2\": simular[1][0],\n                                    \"rec_3\": simular[2][0],\n                                    \"rec_4\": simular[3][0],\n                                    \"rec_5\": simular[4][0]}, index=[0])\n    \n\n    return recommendations_df","b21d2a16":"get_recommendations(\"Algorithms\", 'Book_title', df, title_vectors, 'Book_title')","7964a09c":"get_recommendations(\"Algorithms\", 'Book_title', df, title_vectors, 'Price')","55e906b3":"get_recommendations(\"Algorithms\", 'Book_title', df, title_vectors, 'Rating')","4ee6bdfd":"get_recommendations(\"Algorithms\", 'Book_title', df, desc_vectors, 'Book_title')","9791b17f":"get_recommendations(\"Unity in Action\", 'Book_title', df, desc_vectors, 'Book_title')","b87f1e7f":"get_recommendations(\"Unity in Action\", 'Book_title', df, title_vectors, 'Book_title')","2436b3d4":"get_recommendations(\"1,406\", 'Reviews',  df, title_vectors, 'Book_title')","c9631ea1":"get_recommendations(\"The Information: A History, a Theory, a Flood\", 'Book_title', df, title_vectors, 'Book_title')","e1bbdafe":"Or ratings:","585ac27b":"Ok, let's find books similar to \"Algorithms\" book based on the title:","b30d24a4":"# Creating features\nNow, we need to transform text from \"Book_title\" to vectors array:","a3ad3b8f":"# Text preprocessing","14dba851":"And now we have two arrays of vectors ready for work.","4424a284":"We'll be using this small set of functions for text preprocessing:","48116066":"Let's take a look at our programming books dataset:","5be23c41":"Now, let's find books similar to \"Algorithms\" book based on the description:","e831c669":"As you can see, recommendations based on description are different from title-based recommendations in some ways.","61c4a7ef":"# Recommendation system\n","5d5cb129":"We can use \"Book_title\" and \"Description\" columns to find books similar to each other.","9071b30b":"We can also access some book by any unique value, for example, by number of reviwes (or, more logically, ID of the book, if there's some):","8b15cf92":"And then, we'll create new columns with cleaned \"Book_title\" and \"Description\" texts:","ed53526d":"We can also look at their prices:","64e5d2f8":"Let's do the same with \"Description\" column:"}}