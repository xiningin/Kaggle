{"cell_type":{"2ed34763":"code","a701cc0f":"code","9cb22f09":"code","fab23cbf":"code","8fee9f7c":"code","a4d541e0":"code","5c01c6ce":"code","64cf78ec":"code","3575647b":"code","448ed4c3":"code","aa4ac689":"code","13652f00":"code","1559d823":"code","f4c6557e":"code","8990b196":"code","0ab2d238":"code","3347de9f":"code","85ba39a7":"code","d8b64009":"code","045dc7bc":"code","0592a1cb":"code","75ecc480":"code","b48ead08":"code","a3f9a2b6":"code","f2bf694b":"code","fe93eb64":"code","4ae19cc9":"code","0d91a2ab":"code","162ef22d":"code","0a3a331e":"code","d221e03d":"code","827675e6":"code","e63ce7d3":"code","549ceecf":"code","8e9affe5":"markdown","8ecb9558":"markdown","00bb7d76":"markdown","2bd84b6e":"markdown","b0068065":"markdown","1b289c6b":"markdown","ff73b55d":"markdown","9e6f8305":"markdown","cb2a41d5":"markdown","7cf6f780":"markdown","a16fe675":"markdown","b5711692":"markdown","fcb0bdab":"markdown","0966b369":"markdown","8e9781bd":"markdown"},"source":{"2ed34763":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a701cc0f":"import re as re\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import model_selection, ensemble, linear_model, svm, tree\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBClassifier\nimport warnings\nwarnings.filterwarnings('ignore')","9cb22f09":"data_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","fab23cbf":"data_train.shape","8fee9f7c":"data_test.shape","a4d541e0":"data_train.info()","5c01c6ce":"data_test.info()","64cf78ec":"passengerid = data_test['PassengerId']","3575647b":"data_train.isnull().sum()","448ed4c3":"data_test.isnull().sum()","aa4ac689":"data_full = [data_train, data_test]","13652f00":"data_train[['Pclass','Survived']].groupby('Pclass', as_index = False).mean()","1559d823":"def get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.',name)\n    if title_search:\n        return title_search.group(1)\n    return \"\"\nfor dataset in data_full:\n    dataset['Title'] = dataset['Name'].apply(get_title)","f4c6557e":"pd.crosstab(data_train.Title, data_train.Sex)","8990b196":"pd.crosstab(data_test.Title, data_test.Sex)","0ab2d238":"for dataset in data_full:\n    dataset['Title']=dataset['Title'].replace(['Capt','Col','Countess','Don','Dona','Dr','Rev','Jonkheer','Lady','Major','Mlle','Mme','Ms','Sir'],'Rare')","3347de9f":"def simplify_age(age):\n    categorical_age = np.zeros(age.count())\n    mean_age = age.mean()\n    variance_age = age.std()\n    na_n = age.isna().sum()\n    na_list = np.random.randint(mean_age-variance_age, mean_age+variance_age, na_n)\n    age[np.isnan(age)] = na_list\n    age = age.astype('int')\n    categorical_age = pd.cut(age, bins = [-1,16,30,40,60,100])\n    return categorical_age\nfor dataset in data_full:\n    dataset['CategoricalAge']= simplify_age(dataset['Age'])","85ba39a7":"for dataset in data_full:\n    dataset['FamilySize'] = dataset['SibSp']+dataset['Parch']\n    dataset.loc[dataset.FamilySize == 0, 'Along'] = True\n    dataset.loc[dataset.FamilySize != 0,'Along'] = False","d8b64009":"for dataset in data_full:\n    dataset['Fare']=dataset['Fare'].fillna(0)\n    dataset['CategoricalFare']=pd.cut(dataset['Fare'],[-1,7.92, 14.45, 31.0, 600])","045dc7bc":"for dataset in data_full:\n    dataset['Embarked']= dataset['Embarked'].fillna('S')","0592a1cb":"drop_list = ['PassengerId','Name','Age','SibSp','Parch','Ticket','Fare','Cabin']\ndata_train = data_train.drop(drop_list,axis=1)\ndata_test = data_test.drop(drop_list,axis=1)","75ecc480":"encoder = LabelEncoder()\nCategorical_feature = ['Sex','Embarked','Title','CategoricalAge','Along','CategoricalFare']\nfor col in Categorical_feature:\n    data_train[col] = encoder.fit_transform(data_train[col])\n    data_test[col] = encoder.transform(data_test[col])","b48ead08":"plt.figure(figsize = (14,10))\nsns.heatmap(data_train.corr(), linewidth = 0.1, annot=True)","a3f9a2b6":"MLA = [\n    ensemble.AdaBoostClassifier(),\n    ensemble.ExtraTreesClassifier(),\n    ensemble.GradientBoostingClassifier(),\n    ensemble.RandomForestClassifier(),\n    svm.SVC(probability = True),\n    tree.DecisionTreeClassifier(),\n    XGBClassifier()\n]\ncv_split = model_selection.ShuffleSplit(n_splits = 10, test_size = 0.3,random_state = 2)\nMLA_columns = ['MLA Name','MLA Parameters','MLA Test Accuracy Mean','MLA Time']\nMLA_compare = pd.DataFrame(columns = MLA_columns)\ny_train = data_train['Survived']\nX_train = data_train.drop('Survived',axis = 1)\nrow_index = 0\nfor alg in MLA:\n    MLA_name = alg.__class__.__name__\n    MLA_compare.loc[row_index,'MLA Name']=MLA_name\n    MLA_compare.loc[row_index,'MLA Parameters'] = str(alg.get_params())\n    cv_results = model_selection.cross_validate(alg, X_train, y_train, cv = cv_split)\n    MLA_compare.loc[row_index,'MLA Time'] = cv_results['fit_time'].mean()\n    MLA_compare.loc[row_index,'MLA Test Accuracy Mean'] = cv_results['test_score'].mean()\n    row_index+=1","f2bf694b":"MLA_compare.sort_values(by = 'MLA Test Accuracy Mean', ascending = False,inplace = True)\nsns.barplot(x= 'MLA Test Accuracy Mean',y = 'MLA Name', data = MLA_compare)","fe93eb64":"MLA_compare.loc[MLA_compare['MLA Name']=='SVC','MLA Parameters']","4ae19cc9":"param_list = {'C':np.logspace(-2,2,10)}\nmy_model_svc = svm.SVC(probability = True)\ngrid_search_svc = GridSearchCV(my_model_svc, param_grid = param_list, cv = 5)\ngrid_search_svc.fit(X_train, y_train)","0d91a2ab":"grid_search_svc.best_score_","162ef22d":"MLA_compare.loc[MLA_compare['MLA Name']=='AdaBoostClassifier','MLA Parameters']","0a3a331e":"my_model_ada = ensemble.AdaBoostClassifier()\nparam_list = {'n_estimators':np.linspace(1,500,10).astype('int'), 'learning_rate':np.logspace(-2,2,5)}\ngrid_search_ada = GridSearchCV(my_model_ada, param_grid = param_list, cv = 5)\ngrid_search_ada.fit(X_train, y_train)","d221e03d":"grid_search_ada.best_score_","827675e6":"my_model_xgb = XGBClassifier()\nMLA_compare.loc[MLA_compare['MLA Name']=='XGBClassifier','MLA Parameters']\nparam_list = {'n_estimators':np.linspace(1,500,10).astype('int'),'max_depth':np.linspace(1,10,5).astype('int'), 'lambda':np.logspace(-2,2,5)}\ngrid_search_xgb = GridSearchCV(my_model_xgb, param_grid = param_list, cv = 5)\ngrid_search_xgb.fit(X_train, y_train)","e63ce7d3":"grid_search_xgb.best_score_","549ceecf":"best_model = grid_search_svc.best_estimator_\nX_test = data_test\npredict=best_model.predict(X_test)\nsubmittion = pd.DataFrame({'PassengerId':passengerid, 'Survived':predict})\nsubmittion.to_csv('Submittion.csv',index = False)","8e9affe5":"# Encoder","8ecb9558":"# SibSp & Parch","00bb7d76":"## AdaBoostClassifier","2bd84b6e":"## SVC","b0068065":"# Modeling","1b289c6b":"# Age","ff73b55d":"# Data Cleaning","9e6f8305":"# Tuning Hyper-parameters","cb2a41d5":"## XGBClassifier","7cf6f780":"# Visualization","a16fe675":"# Name","b5711692":"# Embarked","fcb0bdab":"# Fare","0966b369":"# Prediction","8e9781bd":"# Pclass"}}