{"cell_type":{"050a1242":"code","eb61340f":"code","7395031d":"code","24322607":"code","24872d2d":"code","1da7cd5a":"code","ff42a832":"code","c30ab398":"markdown","cd3033fc":"markdown","feabe079":"markdown","2d265f67":"markdown"},"source":{"050a1242":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n# Load other libraries\nimport bcolz\nimport random\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom mpl_toolkits.axes_grid1 import ImageGrid","eb61340f":"df_train = pd.read_csv('..\/input\/labels.csv')\ndf_train.head(10)","7395031d":"im_size = 300\nx_train_raw = bcolz.zeros((0,im_size,im_size,3),np.float32)\ny_train = []","24322607":"for i,j in tqdm(df_train.values):\n    image = load_img('..\/input\/train\/{}.jpg'.format(i), target_size=(im_size, im_size))\n    x_train_raw.append(img_to_array(image))\n    y_train.append(j)","24872d2d":"print(\"Number of images: \",len(y_train),\"\\n\",\n      \"Array shape: \",x_train_raw.shape)\nplt.imshow(x_train_raw[1]\/255)","1da7cd5a":"def img_augmentation(x_train_raw, y_train):\n    n = x_train_raw.shape[0]\n    rand = random.sample(range(0,n),2)\n    img_container = np.zeros((2,int(x_train_raw.shape[1]*0.8),int(x_train_raw.shape[2]*0.8),3),dtype=np.float32)\n    data_generator = ImageDataGenerator()\n#     plt.ion()\n    for i in range(0,len(rand)):\n    # Crop Image\n        if random.randint(1,101)<20:\n            # Top Left\n            img_container[i]=x_train_raw[rand[i],0:240,0:240,:]\n        elif random.randint(1,101)<40:\n            # Top Right\n            img_container[i]=x_train_raw[rand[i],0:240,60:300,:]\n        elif random.randint(1,101)<60:\n            # Bottom Left\n            img_container[i]=x_train_raw[rand[i],60:300,0:240,:]\n        elif random.randint(1,101)<60:\n            # Bottom Right\n            img_container[i]=x_train_raw[rand[i],60:300,60:300,:]\n        else:\n            # Center\n            img_container[i]=x_train_raw[rand[i],30:270,30:270,:]\n        # Flip Image\n        if random.randint(1,101) < 50: \n            flip_horizontal = True\n        else:\n            flip_horizontal = False\n        if random.randint(1,101) < 50: \n            flip_vertical = True\n        else:\n            flip_vertical = False\n        img_container[i] = data_generator.apply_transform(img_container[i],{\n            'flip_horizontal':flip_horizontal,\n            'flip_vertical':flip_vertical\n        })\n        print(\"Original Image:\")\n        plt.title(y_train[rand[i]])\n        plt.imshow(x_train_raw[rand[i],]\/255.0)\n        plt.show()    \n    def plotImages(images_arr, n_images=2):\n        fig, axes = plt.subplots(n_images-1, n_images, figsize=(12,12))\n        axes = axes.flatten()\n        for img, ax in zip( images_arr, axes):\n            ax.imshow(img)\n            ax.set_xticks(())\n            ax.set_yticks(())\n            plt.tight_layout()\n    plotImages(img_container[:,]\/255.)\n    ","ff42a832":"img_augmentation(x_train_raw, y_train)","c30ab398":"**Creating empty bcolz array:**","cd3033fc":"**Defining image augmentation function:**","feabe079":"**Image Summary:**","2d265f67":"**Loading image and appending to array:**"}}