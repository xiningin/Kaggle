{"cell_type":{"2bff5632":"code","7c305214":"code","62dbe8bf":"code","361f5d2e":"code","17305d20":"code","91c961fc":"code","cea3896e":"code","ed9c7ee4":"code","c44606bf":"code","c9c38eb2":"code","5b4976c5":"code","73bf5af1":"code","64e8b8c8":"code","32fe92d4":"code","500a3751":"code","7a93858d":"code","d010f877":"code","317e7394":"code","e97a29ba":"code","beebd0b1":"code","3adf26cd":"code","f35c880a":"code","dd713970":"code","55df4df7":"code","aa20555b":"code","28a17eb8":"code","04c36c99":"code","5c464826":"code","c6d02586":"code","dc58dff2":"code","6e6750a0":"code","fe75a6f4":"markdown","5149ca1e":"markdown","a101ea97":"markdown","5ef6e4a2":"markdown","85c9a919":"markdown","eb0bc388":"markdown","45872f6a":"markdown","083ffd13":"markdown","32378f6a":"markdown","cc42b836":"markdown","8d27197a":"markdown","944da829":"markdown","b8cc7b97":"markdown","e3583130":"markdown","bed75a69":"markdown","b70d8ed8":"markdown","fe0aedae":"markdown","9047dc62":"markdown","c00f62ed":"markdown","4e7574e0":"markdown"},"source":{"2bff5632":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import RandomizedSearchCV\nimport pickle\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\nfrom sklearn.utils import shuffle\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7c305214":"df=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv\")\n","62dbe8bf":"print(df.shape,\"\\n\",df.head())","361f5d2e":"df[\"Province_State\"].fillna(\"state\", inplace = True)    \ndf[\"Country_Region\"] = [country_name.replace(\"'\",\"\") for country_name in df[\"Country_Region\"]]\nprint(df.shape,\"\\n\",df.head())","17305d20":"df[df.Country_Region=='India']","91c961fc":"data=[]\ncountries=df.Country_Region.unique()\nfor country in tqdm(countries):\n    provinces=df[df.Country_Region==country].Province_State.unique()\n    for province in provinces:\n        temp_df=df[(df['Country_Region'] == country) & (df['Province_State']==province)]\n        for i in range(0,63):\n            Iday1=float(temp_df.iloc[i].ConfirmedCases)\n            Iday2=float(temp_df.iloc[i+1].ConfirmedCases)\n            Iday3=float(temp_df.iloc[i+2].ConfirmedCases)\n            Iday4=float(temp_df.iloc[i+3].ConfirmedCases)\n            Iday5=float(temp_df.iloc[i+4].ConfirmedCases)\n            Iday6=float(temp_df.iloc[i+5].ConfirmedCases)\n            Iday7=float(temp_df.iloc[i+6].ConfirmedCases)\n            Fday1=float(temp_df.iloc[i].Fatalities)\n            Fday2=float(temp_df.iloc[i+1].Fatalities)\n            Fday3=float(temp_df.iloc[i+2].Fatalities)\n            Fday4=float(temp_df.iloc[i+3].Fatalities)\n            Fday5=float(temp_df.iloc[i+4].Fatalities)\n            Fday6=float(temp_df.iloc[i+5].Fatalities)\n            Fday7=float(temp_df.iloc[i+6].Fatalities)\n            target_infection=float(temp_df.iloc[i+7].ConfirmedCases)\n            target_fatal=float(temp_df.iloc[i+7].Fatalities)\n            data.append({\"Iday1\":Iday1,\"Iday2\":Iday2,\"Iday3\":Iday3,\"Iday4\":Iday4,\"Iday5\":Iday5,\n                         \"Iday6\":Iday6,\"Iday7\":Iday7,\"Fday1\":Fday1,\"Fday2\":Fday2,\"Fday3\":Fday3,\n                         \"Fday4\":Fday4,\"Fday5\":Fday5,\"Fday6\":Fday6,\"Fday7\":Fday7,\n                         \"target_infection\":target_infection,\"target_fatal\":target_fatal})        ","cea3896e":"new_data=pd.DataFrame(data)\nprint(\"The shape of new dataFrame:\",new_data.shape,\"\\nThe columns are:\",new_data.columns)\nprint(new_data.head(-5))","ed9c7ee4":"X_y=shuffle(new_data)\ny_cases=X_y['target_infection']\ny_fatal=X_y['target_fatal']\nX=X_y.drop(['target_infection','target_fatal'],axis=1)\nX_train_cases, X_test_cases, y_train_cases, y_test_cases = train_test_split(X, y_cases, test_size=0.33)\nX_train_fatal, X_test_fatal, y_train_fatal, y_test_fatal = train_test_split(X, y_fatal, test_size=0.33)\nprint(\"Shape of infection train dataset:\",(X_train_cases.shape,y_train_cases.shape))\nprint(\"Shape of infection test dataset:\",(X_test_cases.shape,y_test_cases.shape))\nprint(\"Shape of fatal train dataset:\",(X_train_fatal.shape,y_train_fatal.shape))\nprint(\"Shape of fatal test dataset:\",(X_test_fatal.shape,y_test_fatal.shape))","c44606bf":"reg_case=ElasticNet(random_state=42,l1_ratio=0.1,max_iter=2200)\nparams = [{'alpha': [10**-4,10**-3, 10**-2,10**-1, 10**0,10**1, 10**2,10**3,10**4]}]\nclf = RandomizedSearchCV(reg_case, params, cv=4, scoring='r2',return_train_score=True)\nsearch=clf.fit(X_train_cases, y_train_cases)\nresults = pd.DataFrame.from_dict(clf.cv_results_)\nprint(\"The best parameter is:\",search.best_params_)","c9c38eb2":"best_alpha=10000\nbest_itr=2400\nfinal_reg_case=ElasticNet(random_state=42,alpha=best_alpha,l1_ratio=0.1,max_iter=best_itr)\nfinal_reg_case.fit(X_train_cases,y_train_cases)","5b4976c5":"pred=final_reg_case.predict(X_test_cases)\nprint(\"The RMSE value\",(mean_squared_error(y_test_cases,pred))**0.5)","73bf5af1":"reg_fatal=ElasticNet(random_state=42,l1_ratio=0.1,max_iter=3500)\nparams = [{'alpha': [10**-4,10**-3, 10**-2,10**-1, 10**0,10**1, 10**2,10**3,10**4]}]\nclf = RandomizedSearchCV(reg_fatal, params, cv=4, scoring='r2',return_train_score=True)\nsearch=clf.fit(X_train_fatal, y_train_fatal)\nresults = pd.DataFrame.from_dict(clf.cv_results_)\nprint(\"The best parameter is:\",search.best_params_)","64e8b8c8":"best_alpha=10\nbest_iter=3500\nfinal_reg_fatal = ElasticNet(random_state=42,alpha=best_alpha,l1_ratio=0.1,max_iter=best_iter)\nfinal_reg_fatal.fit(X_train_fatal, y_train_fatal)","32fe92d4":"pred=final_reg_fatal.predict(X_test_fatal)\nprint(\"The RMSE value\",(mean_squared_error(y_test_fatal,pred))**0.5)","500a3751":"data=[]\ncountries=df.Country_Region.unique()\nfor country in countries:\n    provinces=df[df.Country_Region==country].Province_State.unique()\n    for province in provinces:\n        temp_df=df[(df['Country_Region'] == country) & (df['Province_State']==province)]\n        for i in range(0,63):\n            Iday1=float(temp_df.iloc[i].ConfirmedCases)\n            Iday2=float(temp_df.iloc[i+1].ConfirmedCases)\n            Iday3=float(temp_df.iloc[i+2].ConfirmedCases)\n            Iday4=float(temp_df.iloc[i+3].ConfirmedCases)\n            Iday5=float(temp_df.iloc[i+4].ConfirmedCases)\n            Iday6=float(temp_df.iloc[i+5].ConfirmedCases)\n            Iday7=float(temp_df.iloc[i+6].ConfirmedCases)\n            Fday1=float(temp_df.iloc[i].Fatalities)\n            Fday2=float(temp_df.iloc[i+1].Fatalities)\n            Fday3=float(temp_df.iloc[i+2].Fatalities)\n            Fday4=float(temp_df.iloc[i+3].Fatalities)\n            Fday5=float(temp_df.iloc[i+4].Fatalities)\n            Fday6=float(temp_df.iloc[i+5].Fatalities)\n            Fday7=float(temp_df.iloc[i+6].Fatalities)\n            if Iday6==0 :\n                iavg=1\n            else:\n                iavg=Iday7\/(Iday6)\n            if Fday6==0:\n                favg=1\n            else:    \n                favg=Fday7\/(Fday6)        \n            target_infection=float(temp_df.iloc[i+7].ConfirmedCases)\n            target_fatal=float(temp_df.iloc[i+7].Fatalities)\n            data.append({\"Iday1\":Iday1,\"Iday2\":Iday2,\"Iday3\":Iday3,\"Iday4\":Iday4,\"Iday5\":Iday5,\n                         \"Iday6\":Iday6,\"Iday7\":Iday7,\"Fday1\":Fday1,\"Fday2\":Fday2,\"Fday3\":Fday3,\n                         \"Fday4\":Fday4,\"Fday5\":Fday5,\"Fday6\":Fday6,\"Fday7\":Fday7,'iratio':iavg,\"fratio\":favg,\"target_infection\":target_infection,\"target_fatal\":target_fatal})        ","7a93858d":"featured=pd.DataFrame(data)\nX_y_f=shuffle(featured)\ny_cases_f=X_y_f['target_infection']\ny_fatal_f=X_y_f['target_fatal']\nX_f=X_y_f.drop(['target_infection','target_fatal'],axis=1)\nX_train_cases_f, X_test_cases_f, y_train_cases_f, y_test_cases_f = train_test_split(X_f, y_cases_f, test_size=0.33)\nX_train_fatal_f, X_test_fatal_f, y_train_fatal_f, y_test_fatal_f = train_test_split(X_f, y_fatal_f, test_size=0.33)\nprint(\"Shape of featurized infection train dataset:\",(X_train_cases_f.shape,y_train_cases_f.shape))\nprint(\"Shape of featurized infection test dataset:\",(X_test_cases_f.shape,y_test_cases_f.shape))\nprint(\"Shape of featurized fatal train dataset:\",(X_train_fatal_f.shape,y_train_fatal_f.shape))\nprint(\"Shape of featurized fatal test dataset:\",(X_test_fatal_f.shape,y_test_fatal_f.shape))","d010f877":"reg_case_f=ElasticNet(random_state=42,l1_ratio=0.1,max_iter=2200)\nparams = [{'alpha': [10**-4,10**-3, 10**-2,10**-1, 10**0,10**1, 10**2,10**3,10**4]}]\nclf_f= RandomizedSearchCV(reg_case_f, params, cv=4, scoring='r2',return_train_score=True)\nsearch_f=clf_f.fit(X_train_cases_f, y_train_cases_f)\nresults_f = pd.DataFrame.from_dict(clf_f.cv_results_)\nprint(\"The best parameter is:\",search_f.best_params_)","317e7394":"best_alpha=10000\nbest_itr=4200\nfinal_reg_case_f=ElasticNet(random_state=42,alpha=best_alpha,l1_ratio=0.1,max_iter=best_itr)\nfinal_reg_case_f.fit(X_train_cases_f,y_train_cases_f)","e97a29ba":"pred_f=final_reg_case_f.predict(X_test_cases_f)\nprint(\"RMSE is:\",(mean_squared_error(y_test_cases_f,pred_f))**0.5)","beebd0b1":"reg_fatal_f=ElasticNet(random_state=42,alpha=best_alpha,l1_ratio=0.1,max_iter=2200)\nparams = [{'alpha': [10**-4,10**-3, 10**-2,10**-1, 10**0,10**1, 10**2,10**3,10**4]}]\nclf_f= RandomizedSearchCV(reg_fatal_f, params, cv=4, scoring='r2',return_train_score=True)\nsearch_f=clf_f.fit(X_train_fatal_f, y_train_fatal_f)\nresults_f = pd.DataFrame.from_dict(clf_f.cv_results_)\nprint(\"The best parameter is:\",search_f.best_params_)\n","3adf26cd":"best_alpha=10\nbest_itr=2400\nfinal_reg_fatal_f=ElasticNet(random_state=42,alpha=best_alpha,l1_ratio=0.1,max_iter=best_itr)\nfinal_reg_fatal_f.fit(X_train_fatal_f,y_train_fatal_f)","f35c880a":"pred_f=final_reg_fatal_f.predict(X_test_fatal_f)\nprint(\"RMSE is:\",(mean_squared_error(y_test_fatal_f,pred_f))**0.5)","dd713970":"test[\"Province_State\"].fillna(\"state\", inplace = True)    \ntest[\"Country_Region\"] = [country_name.replace(\"'\",\"\") for country_name in test[\"Country_Region\"]]","55df4df7":"import math\nimport random\npredicted_case=[]\npredicted_fatal=[]\ncountries=df.Country_Region.unique()\nfor country in countries:\n    provinces=df[df.Country_Region==country].Province_State.unique()\n    for province in provinces:\n        temp_df=df[(df['Country_Region'] == country) & (df['Province_State']==province)&(df['Date']>='2020-03-19')&(df['Date']<='2020-03-31')]\n        ongoingCases=list(temp_df.ConfirmedCases.values)\n        ongoingFatal=list(temp_df.Fatalities.values)\n        predicted_case.extend(map(lambda x:x-(random.random()*x*0.01),ongoingCases))\n        predicted_fatal.extend(map(lambda x:x-(random.random()*x*0.01),ongoingFatal))\n        for _ in range(1,31):\n            if ongoingCases[-2]==0:\n                iavg=ongoingCases[-1]\n            else:\n                iavg=ongoingCases[-1]\/ongoingCases[-2]\n            if ongoingFatal[-2]==0:\n                favg=ongoingFatal[-1]\n            else:    \n                favg=ongoingFatal[-1]\/ongoingFatal[-2] \n            point=ongoingCases[len(ongoingCases)-7:]+ongoingFatal[len(ongoingFatal)-7:]+[iavg,favg]\n            # print(point)\n            # print()\n            randF=random.random()\n            randI=random.random()\n            predC=final_reg_case_f.predict([point])\n            predF=final_reg_fatal_f.predict([point])\n            predicted_case.append(int(predC[0]+(randI*predC[0]*0.01)))\n            predicted_fatal.append(abs(int(predF[0]-(randF*predF[0]*0.0005))))\n            ongoingCases.append(predC[0]+(randI*predC[0]*0.01))\n            ongoingFatal.append(abs(predF[0]-(randF*predF[0]*0.0005)))\n            \n                   ","aa20555b":"only_fatal=X_y_f.drop(['Iday1','Iday2','Iday3','Iday4','Iday5','Iday6','Iday7','target_infection','iratio','fratio'],axis=1)\ny=only_fatal['target_fatal']\nX=only_fatal.drop(['target_fatal'],axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","28a17eb8":"fatal=ElasticNet(random_state=42,l1_ratio=0.1,max_iter=2200)\nparams = [{'alpha': [10**-4,10**-3, 10**-2,10**-1, 10**0,10**1, 10**2,10**3,10**4]}]\nclf_f= RandomizedSearchCV(fatal, params, cv=4, scoring='r2',return_train_score=True)\nsearch_f=clf_f.fit(X_train, y_train)\nresults_f = pd.DataFrame.from_dict(clf_f.cv_results_)\nprint(\"The best parameter is:\",search_f.best_params_)","04c36c99":"best_alpha=10\nbest_itr=2200\nfatal_final=ElasticNet(random_state=42,alpha=best_alpha,l1_ratio=0.1,max_iter=best_itr)\nfatal_final.fit(X_train,y_train)\npred_f=fatal_final.predict(X_test)\nprint(\"RMSE :\",mean_squared_error(y_test,pred_f)**0.5)","5c464826":"import math\nFatality=[]\ncountries=df.Country_Region.unique()\nfor country in countries:\n    provinces=df[df.Country_Region==country].Province_State.unique()\n    for province in provinces:\n        temp_df=df[(df['Country_Region'] == country) & (df['Province_State']==province)&(df['Date']>='2020-03-19')&(df['Date']<='2020-03-31')]\n        ongoingFatal=list(temp_df.Fatalities.values)\n        Fatality.extend(map(lambda x:x-(random.random()*x*0.01),ongoingFatal))\n        for _ in range(1,31):\n            point=ongoingFatal[len(ongoingFatal)-7:]\n            # print(point)\n            # print()\n            predF=fatal_final.predict([point])\n            Fatality.append(math.ceil(predF[0]))\n            ongoingFatal.append(predF[0])  \n            \n                   ","c6d02586":"test['ConfirmedCases']=list(map(int,predicted_case))\ntest['Fatalities']=list(map(int,Fatality))","dc58dff2":"for country in ['US','Italy','Spain']:\n    temp_df=test[test['Country_Region'] == country ]\n    case=temp_df.ConfirmedCases.values\n    fatal=temp_df.Fatalities.values\n    plot_case=[0 for _ in range(43)]\n    plot_fatal=[0 for _ in range(43)]\n    for i in range(len(case)):\n        plot_case[i%43]+=case[i]\n    for i in range(len(fatal)):\n        plot_fatal[i%43]+=fatal[i]\n    title='The plot for :'+country\n    plt.title(title)\n    plt.xlabel(\"Days\")\n    plt.grid()\n    plt.ylabel(\"Number of people\")\n    plt.plot(plot_case,label='Predicted_cases')\n    plt.plot(plot_fatal,label='Predicted_fatalities')\n    plt.legend()\n    plt.show()                   ","6e6750a0":"submission=test[['ForecastId','ConfirmedCases','Fatalities']]\nsubmission.to_csv(\"submission.csv\",index=False)","fe75a6f4":"### RandomSearch is been done to find out the best parameter\n#### Note:Scaling didn't yield good output hence proceeded with the original data \n    ","5149ca1e":"#### Calculating the Root mean squared value .Since the data isn't noramlized we get a large value","a101ea97":"# COVID-19 Forecasting using ElasticNet","5ef6e4a2":"### All other procedures remain the same","85c9a919":"## Training the fatality data","eb0bc388":"<h2>Dataset preparation","45872f6a":"## Featurization","083ffd13":"## Splitting the data into Train and test data","32378f6a":"## Importing Libraries","cc42b836":"<h2>Training the Infection data using Elastic Net ","8d27197a":"### Method used :\n### 1)Intialize the list with the data of previous seven days and predict the value for the next day.\n### 2)Append this value to the list and use this updated list's latest data to predict the next one.(So on........)\n","944da829":"### Considering the past 7 days data to forecast the cases and fatalities on the 8th day","b8cc7b97":"### Some countries where the provinces are not mentioned can be replaced .And some data preprocessing ","e3583130":"## Forecasting the number of cases and fatalities","bed75a69":"### The same procedure is been followed on this data also","b70d8ed8":"## Considering only Fatalities for predicting ","fe0aedae":"### Considering the fact that the number of cases on a given day is influenced by the ratio of cases in the two previous days.Taking this into account we create two new features 'iratio' and 'fratio'","9047dc62":"## Updating the values in the test data","c00f62ed":"###                Thankyou,any suggestions will be appreciated!!","4e7574e0":"## Plotting the forecast of few countries"}}