{"cell_type":{"321beb9f":"code","0fae567b":"code","051a470e":"code","b2c3cab2":"code","7b0298a2":"code","cf18c6fd":"code","b4211d61":"code","d3dff693":"code","bd0ce45b":"code","2fd54ea9":"code","dc301e4b":"code","a990b610":"code","8bcf6e42":"code","9438df13":"code","7ab6f711":"code","de83a2a2":"code","d9dced05":"code","02b0f87e":"code","60133fb5":"code","04eee893":"code","73d6a417":"code","61355cb8":"code","203612a5":"code","d122169a":"code","d4f65ccc":"markdown","5062be6a":"markdown","23eca6a3":"markdown","d62d2672":"markdown","1fb70c59":"markdown","7739e99c":"markdown","841b8d1c":"markdown","0e0f1924":"markdown","7f3097b8":"markdown","76ed554b":"markdown","05184a87":"markdown","2ae547a3":"markdown","edb5425e":"markdown","78cb5d61":"markdown","f5fac8b1":"markdown","01af3f55":"markdown","ff5de651":"markdown","687283c9":"markdown","38b94a3e":"markdown"},"source":{"321beb9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0fae567b":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nimport datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","051a470e":"import warnings\nwarnings.filterwarnings('ignore')","b2c3cab2":"matplotlib.rcParams.update({'font.size': 14})","7b0298a2":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","cf18c6fd":"train_df = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/test.csv')\nsubmission_df = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/sample_submission.csv')","b4211d61":"train_df.head()","d3dff693":"train_df.dtypes","bd0ce45b":"num_feat = list(train_df.select_dtypes(exclude='object').columns)\nobj_feat = list(train_df.select_dtypes(include='object').columns)\ntarget = 'Price'\n\nnum_feat","2fd54ea9":"train_df['Id'] = train_df['Id'].astype(str)","dc301e4b":"train_df[num_feat].hist(\n    figsize=(16,16)\n)\nplt.show()","a990b610":"train_df.describe().T","8bcf6e42":"grid = sns.jointplot(train_df['Rooms'], train_df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)","9438df13":"grid = sns.jointplot(train_df['KitchenSquare'], train_df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)","7ab6f711":"train_df_temp = train_df.loc[train_df['KitchenSquare']<250]\ngrid = sns.jointplot(train_df_temp['KitchenSquare'], train_df_temp['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)","de83a2a2":"target_mean = round(train_df['Price'].mean(), 2)\ntarget_median = train_df['Price'].median()\ntarget_mode = train_df['Price'].mode()[0]\n\nplt.figure(figsize = (16, 8))\n\nsns.distplot(train_df['Price'], bins=50)\n\ny = np.linspace(0, 0.000005, 10)\nplt.plot([target_mean] * 10, y, label='target_mean', linestyle=':',  linewidth=4)\nplt.plot([target_median] * 10, y, label='target_median', linestyle='--',  linewidth=4)\nplt.plot([target_mode] * 10, y, label='target_mode', linestyle='-.', linewidth=4)\n\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b')\nplt.legend()","d9dced05":"class Data:\n    \n    def __init__(self):\n        \"\"\"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        self.Square_min = 15\n        self.Square_max = 300\n        \n        self.LifeSquare_min = 10\n        self.LifeSquare_max = 280\n        \n        self.Rooms_min = 1\n        self.Rooms_max = 5\n        \n        self.HouseFloor_min = 1\n        self.HouseFloor_max = 50\n        \n        self.KitchenSquare_min = 3\n        self.KitchenSquare_max = 30\n        \n        self.current_year = datetime.datetime.now().year\n        \n        self.medians = None\n        self.DistrictId_value_counts = None\n        self.SquareMeterPrice_by_DistrictId = None\n        self.Healthcare_1_by_DistrictId = None\n        \n        \n    def fit(self, train_df):\n        \n        # \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n        self.medians = train_df[['LifeSquare', 'HouseFloor']].median()\n        \n        # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0440\u0430\u0439\u043e\u043d\u043e\u0432\n        self.DistrictId_value_counts = dict(train_df['DistrictId'].value_counts())\n        \n        # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0446\u0435\u043d\u044b \u0437\u0430 \u043c2 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        train_df_temp = train_df.loc[((train_df['Square'] > self.Square_min) & (train_df['Square'] < self.Square_max))]\n        train_df_temp[\"SquareMeterPrice\"] = train_df_temp[\"Price\"] \/ train_df_temp[\"Square\"]\n        self.SquareMeterPrice_by_DistrictId = train_df_temp.groupby('DistrictId', as_index=False)\\\n            .agg({'SquareMeterPrice': 'mean'})\\\n            .rename(columns={'SquareMeterPrice': 'AverageSquareMeterPrice'})\n        \n        # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Healthcare_1 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        self.Healthcare_1_by_DistrictId = train_df.groupby('DistrictId', as_index=False)\\\n            .agg({'Healthcare_1': 'mean'})\\\n            .rename(columns={'Healthcare_1': 'AverageHealthcare_1'})\n        \n        del train_df_temp\n        \n    def transform(self, train_df):\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n        train_df[['LifeSquare', 'HouseFloor']] = train_df[['LifeSquare', 'HouseFloor']].fillna(self.medians)\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n        \n        # \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n        train_df.loc[(train_df['Square'] > self.Square_max), 'Square'] = self.Square_max\n        train_df.loc[(train_df['Square'] < self.Square_min), 'Square'] = self.Square_min\n        \n        # \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n        train_df.loc[(train_df['LifeSquare'] < self.LifeSquare_min), 'LifeSquare'] = self.LifeSquare_min\n        train_df.loc[(train_df['LifeSquare'] > self.LifeSquare_max), 'LifeSquare'] = self.LifeSquare_max\n        \n        # \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n        train_df.loc[(train_df['KitchenSquare'] < self.KitchenSquare_min), 'KitchenSquare'] = self.KitchenSquare_min\n        train_df.loc[(train_df['KitchenSquare'] > self.KitchenSquare_max), 'KitchenSquare'] = self.KitchenSquare_max\n        \n        # \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n        train_df.loc[(train_df['HouseYear'] > self.current_year), 'HouseYear'] = self.current_year\n        \n        # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n        train_df.loc[(train_df['Rooms'] > self.Rooms_max), 'Rooms'] = self.Rooms_max\n        train_df.loc[(train_df['Rooms'] < self.Rooms_min), 'Rooms'] = self.Rooms_min\n        \n        # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439\n        train_df.loc[(train_df['HouseFloor'] < self.HouseFloor_min), 'HouseFloor'] = self.HouseFloor_min\n        train_df.loc[(train_df['HouseFloor'] > self.HouseFloor_max), 'HouseFloor'] = self.HouseFloor_max\n        \n        # \u0435\u0441\u043b\u0438 \u044d\u0442\u0430\u0436 \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430, \u0442\u043e \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u044d\u0442\u0430\u0436 \u043e\u0442 self.HouseFloor_min \u0434\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u0442\u0430\u0436\u0430 \u0432 \u0434\u043e\u043c\u0435\n        floor_outliers = train_df.loc[train_df['Floor'] > train_df['HouseFloor']].index\n        train_df.loc[floor_outliers, 'Floor'] = train_df.loc[floor_outliers, 'HouseFloor'].apply(lambda x: self.HouseFloor_min if (self.HouseFloor_min == x) else np.random.randint(self.HouseFloor_min, x))\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n        train_df = pd.concat([train_df, pd.get_dummies(train_df['Ecology_2'], prefix='Ecology_2', dtype='int8')], axis=1)\n        train_df = pd.concat([train_df, pd.get_dummies(train_df['Ecology_3'], prefix='Ecology_3', dtype='int8')], axis=1)\n        train_df = pd.concat([train_df, pd.get_dummies(train_df['Shops_2'], prefix='Shops_2', dtype='int8')], axis=1)\n        \n        return train_df\n    \n    def features(self, train_df):\n        \n        # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0439\u043e\u043d\u0430\n        train_df['DistrictId_counts'] = train_df['DistrictId'].map(self.DistrictId_value_counts)\n        train_df['DistrictId_counts'].fillna(train_df['DistrictId_counts'].median(), inplace=True)\n        \n        # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043c2 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        train_df = train_df.merge(self.SquareMeterPrice_by_DistrictId, on=[\"DistrictId\"], how='left')\n        train_df['AverageSquareMeterPrice'].fillna(train_df['AverageSquareMeterPrice'].median(), inplace=True)\n        \n        # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Healthcare_1 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        train_df = train_df.merge(self.Healthcare_1_by_DistrictId, on=[\"DistrictId\"], how='left')\n        train_df['AverageHealthcare_1'].fillna(train_df['AverageHealthcare_1'].median(), inplace=True)\n        \n        return train_df","02b0f87e":"data_inst = Data()\n\n# \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\ndata_inst.fit(train_df)\ntrain_df = data_inst.transform(train_df)\ntrain_df = data_inst.features(train_df)\n\n# \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\ntest_df = data_inst.transform(test_df)\ntest_df = data_inst.features(test_df)","60133fb5":"feature_names = ['AverageSquareMeterPrice', 'DistrictId_counts', 'Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor',\n                    'HouseFloor', 'HouseYear', 'Helthcare_2', 'Ecology_1', 'Social_1', 'Social_2', 'Social_3',\n                    'Shops_1', 'Ecology_2_A', 'Ecology_2_B', 'Ecology_3_A', 'Ecology_3_B', 'Shops_2_A', 'Shops_2_B',\n                    'AverageHealthcare_1']\ntarget_name = 'Price'","04eee893":"train_df = train_df[feature_names + [target_name]]\ntest_df = test_df[feature_names + ['Id']]\nX = train_df[feature_names]\ny = train_df[target_name]","73d6a417":"final_model = CatBoostRegressor(\n    silent=True,\n    learning_rate=0.1,\n    iterations=1150,\n    eval_metric='R2',\n    depth=8\n)\n\nfinal_model.fit(X, y)\n\ncv_score = cross_val_score(\n    final_model,\n    X,\n    y,\n    scoring='r2',\n    cv=KFold(\n            n_splits=5,\n            shuffle=True,\n            random_state=42\n    )\n)\n\nprint(f'R2: {round(cv_score.mean(), 3)}')","61355cb8":"feature_importances = pd.DataFrame(\n    zip(X.columns, final_model.get_feature_importance()),\n    columns=['feature_name', 'importance']\n)\n\nfeature_importances.sort_values(by='importance', ascending=False, inplace=True)\nfeature_importances.head(20)","203612a5":"preds_final = pd.DataFrame()\npreds_final['Id'] = test_df['Id'].copy()\n\ntest_df.set_index('Id', inplace=True)\ntest_df = test_df[feature_names]","d122169a":"y_pred_final = final_model.predict(test_df)\n\nsubmission_df['Price'] = y_pred_final\nsubmission_df.to_csv('.\/predictions.csv', index=False, encoding='utf-8', sep=',')\n\nsubmission_df.head()","d4f65ccc":"# \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432","5062be6a":"\u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f \u0432: HouseYear, KitchenSquare.\n\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c: HouseFloor, LifeSquare, Rooms, Square. \u0418\u0445 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c","23eca6a3":"\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 randomized_search() learning_rate=0.1 iterations=1150 depth=8","d62d2672":"# **\u041a\u043b\u0430\u0441\u0441 \u0441 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445**","1fb70c59":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430","7739e99c":"# **\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**","841b8d1c":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u043d\u0435\u0435 3 \u043a\u0432.\u043c. \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 30 \u043a\u0432.\u043c. \u0437\u0430\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430 \u0432\u044b\u0431\u0440\u043e\u0441","0e0f1924":"**\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0441 \u043f\u0435\u0440\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438**","7f3097b8":"\u041e\u0442\u0441\u0435\u0447\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u043d\u044c\u0448\u0435 1 \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 250","76ed554b":"# **\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438**","05184a87":"**\u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0446\u0435\u043d\u044b**","2ae547a3":"**\u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c**","edb5425e":"\u041f\u043e\u0438\u0441\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438","78cb5d61":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\n\n* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","f5fac8b1":"# **\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 CatBoostRegressor**","01af3f55":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 Rooms, KitchenSquare, HouseFloor \u0438\u043c\u0435\u044e\u0442 \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u0445 \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","ff5de651":"\u0414\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435","687283c9":"# **\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432**","38b94a3e":"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438"}}