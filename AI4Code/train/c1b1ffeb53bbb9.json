{"cell_type":{"5d3a3fc7":"code","1ab5ddef":"code","08d63a13":"code","0d3e91c6":"code","6e09a642":"code","785c7c7b":"code","ed17d84a":"code","837ea310":"code","d412985d":"code","e8e12543":"code","a0205c16":"code","4f9f4a89":"code","a75fb896":"code","453ba9a7":"code","b789af1b":"code","19e6cccf":"code","f301ea1c":"code","90128766":"code","36f07c63":"code","9e01c552":"code","50cc2be3":"code","72923ce2":"code","b9cd2f06":"code","0d0d1f1d":"code","207616f6":"code","05d61a6b":"code","c04415a7":"code","13395243":"code","743a0431":"code","158ed062":"code","1a84eb96":"code","269bcfb0":"code","f7a55884":"code","dfaeb8ac":"code","aba22687":"code","94a72d10":"code","74d3753c":"code","3fa9d2c6":"code","2fe3ea65":"code","051b8926":"code","37be8faf":"code","410b89da":"markdown","6d25884d":"markdown","ecf817aa":"markdown","eab028f5":"markdown","9441395f":"markdown","5fff48b2":"markdown","fa1c27e8":"markdown","7fe86af9":"markdown","e4d01234":"markdown","5539d274":"markdown","7b8f67d1":"markdown","c19bf79e":"markdown","8bf6d60e":"markdown","71124345":"markdown","5993b04e":"markdown","b145b833":"markdown","93945fb2":"markdown","561be164":"markdown","dfc29b92":"markdown","ba290c42":"markdown","0940479a":"markdown","b0a063dd":"markdown","0fc27244":"markdown","ac733d4b":"markdown","66362abe":"markdown","e7b7117f":"markdown","429a0995":"markdown","797b4aac":"markdown","5028802a":"markdown"},"source":{"5d3a3fc7":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.arima_model import ARIMA","1ab5ddef":"a1=pd.read_csv('..\/input\/airpassengers\/AirPassengers.csv')","08d63a13":"a1.head()","0d3e91c6":"a1.tail()","6e09a642":"a1.rename(columns={'#Passengers':'Passengers'},inplace=True)","785c7c7b":"a1.head()","ed17d84a":"a1.shape","837ea310":"a1.info()","d412985d":"from datetime import datetime\na1['Month']=pd.to_datetime(a1['Month'],infer_datetime_format=True)","e8e12543":"a1.info()","a0205c16":"airpass = a1.set_index('Month',inplace=False)","4f9f4a89":"airpass.head()","a75fb896":"plt.xlabel('Date')\nplt.ylabel('Number Of Air Passengers')\nplt.plot(airpass)","453ba9a7":"def test_stationarity(timeseries):\n    \n    #Determine rolling statistics\n    movingAverage = timeseries.rolling(window=12).mean()\n    movingSTD = timeseries.rolling(window=12).std()\n    \n    #Plot rolling statistics\n    plt.plot(timeseries, color='blue', label='Original')\n    plt.plot(movingAverage, color='red', label='Rolling Mean')\n    plt.plot(movingSTD, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    #Perform Dickey\u2013Fuller test:\n    print('Results of Dickey Fuller Test:')\n    airpass_test = adfuller(timeseries['Passengers'], autolag='AIC')\n    dfoutput = pd.Series(airpass_test[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in airpass_test[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)","b789af1b":"test_stationarity(airpass)","19e6cccf":"airpass_log = np.log(airpass)","f301ea1c":"plt.plot(airpass_log)","90128766":"rollmean_log = airpass_log.rolling(window=12).mean()\nrollstd_log = airpass_log.rolling(window=12).std()\n","36f07c63":"plt.plot(airpass_log, color='blue', label='Original')\nplt.plot(rollmean_log, color='red', label='Rolling Mean')\nplt.plot(rollstd_log, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation (Logarithmic Scale)')","9e01c552":"airpass_new = airpass_log - rollmean_log","50cc2be3":"airpass_new.head()","72923ce2":"airpass_new.dropna(inplace=True)","b9cd2f06":"airpass_new.head()","0d0d1f1d":"test_stationarity(airpass_new)","207616f6":"airpass_log_diff = airpass_log - airpass_log.shift()\nplt.plot(airpass_log_diff)","05d61a6b":"airpass_log_diff.dropna(inplace=True)\nplt.plot(airpass_log_diff)","c04415a7":"test_stationarity(airpass_log_diff)","13395243":"decomposition = seasonal_decompose(airpass_log)\n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\nplt.subplot(411)\nplt.plot(airpass_log, label='Original')\nplt.legend(loc='best')\n\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='best')\n\nplt.subplot(413)\nplt.plot(seasonal,label='Seasonality')\nplt.legend(loc='best')\n\nplt.subplot(414)\nplt.plot(residual, label='Residuals')\nplt.legend(loc='best')\nplt.tight_layout()","743a0431":"airpass_decompose = residual\nairpass_decompose.dropna(inplace=True)","158ed062":"rollmean_decompose = airpass_decompose.rolling(window=12).mean()\nrollstd_decompose = airpass_decompose.rolling(window=12).std()\n\nplt.plot(airpass_decompose, color='blue', label='Original')\nplt.plot(rollmean_decompose, color='red', label='Rolling Mean')\nplt.plot(rollstd_decompose, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')","1a84eb96":"lag_acf = acf(airpass_log_diff, nlags=20)\nlag_pacf = pacf(airpass_log_diff, nlags=20, method='ols')","269bcfb0":"#Plot ACF:\nplt.subplot(121)\nplt.plot(lag_acf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(airpass_log_diff)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(airpass_log_diff)), linestyle='--', color='gray')\nplt.title('Autocorrelation Function')            \n\n#Plot PACF\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(airpass_log_diff)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(airpass_log_diff)), linestyle='--', color='gray')\nplt.title('Partial Autocorrelation Function')\n            \nplt.tight_layout()","f7a55884":"model1 = ARIMA(airpass_log, order=(2,1,0))\nresults_AR = model1.fit(disp=-1)\nplt.plot(airpass_log_diff)\nplt.plot(results_AR.fittedvalues, color='red')\nplt.title('RSS: %.4f'%sum((results_AR.fittedvalues - airpass_log_diff['Passengers'])**2))\nprint('Plotting AR model')","dfaeb8ac":"model2 = ARIMA(airpass_log, order=(0,1,2))\nresults_MA = model2.fit(disp=-1)\nplt.plot(airpass_log_diff)\nplt.plot(results_MA.fittedvalues, color='red')\nplt.title('RSS: %.4f'%sum((results_MA.fittedvalues - airpass_log_diff['Passengers'])**2))\nprint('Plotting MA model')","aba22687":"model = ARIMA(airpass_log, order=(2,1,2))\nresults_ARIMA = model.fit(disp=-1)\nplt.plot(airpass_log_diff)\nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('RSS: %.4f'%sum((results_ARIMA.fittedvalues - airpass_log_diff['Passengers'])**2))\nprint('Plotting ARIMA model')","94a72d10":"predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)\npredictions_ARIMA_diff.head()","74d3753c":"predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\npredictions_ARIMA_diff_cumsum.head()","3fa9d2c6":"predictions_ARIMA_log = pd.Series(airpass_log['Passengers'].iloc[0], index=airpass_log.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum, fill_value=0)\npredictions_ARIMA_log.head()","2fe3ea65":"predictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(airpass)\nplt.plot(predictions_ARIMA)","051b8926":"airpass_log.head()","37be8faf":"results_ARIMA.plot_predict(1,264)","410b89da":"Time series analysis is a statistical method to analyse the past data within a given duration of time to forecast the future. It comprises of ordered sequence of data at equally spaced interval.To understand the time series data & the analysis let us consider an example. Consider an example of Airline Passenger data. It has the count of passenger over a period of time.","6d25884d":"Let's rename \"#Passengers\", seems really annoying the column name.","ecf817aa":"AR+I+MA = ARIMA Model\nMaking order = (2,1,2)","eab028f5":"From the ACF graph, we can see that curve touches y=0.0 line at x=2. Thus, from theory, Q = 2 From the PACF graph, we see that curve touches y=0.0 line at x=2. Thus, from theory, P = 2\n\nARIMA is AR + I + MA. Before, we see an ARIMA model, let us check the results of the individual AR & MA model. Note that, these models will give a value of RSS. Lower the RSS values indicates a better model.","9441395f":"AR Model\nMaking order = (2,1,0)","5fff48b2":"From above graph we can say that, we slightly bettered our previous results. Now, we are heading into the right direction.\n\nFrom the above graph, Time series with log scale as well as Rolling Mean(moving avg) both have the trend component. Thus subtracting one from the other should remove the trend component.\n\nR (result) = Time Series Loca Scale - Rolling Mean Log Scale -> this can be our final non trend curve","fa1c27e8":"Let us now break down the 3 components of the log scale series using a system libary function. Once, we separate our the components, we can simply ignore trend & seasonality and check on the nature of the residual part.","7fe86af9":"Plotting ACF & PACF","e4d01234":"Also, after concluding the results from ADFC test:\n\np-value has reduced from 0.99 to 0.022\nCritical values at 1%,5%,10% confidence intervals are pretty close to the Test Statistic\nSo we can now say that given series is now STATIONARY","5539d274":"Inverse of log is exp","7b8f67d1":"Loading the basic libraries","c19bf79e":"Let's determine & plot rolling statistics.","8bf6d60e":"There can be cases where an observation simply consist of trend & seasonality. In that case, there won't be any residual component & that would be a null or NaN. Hence, we also remove such cases.","71124345":"Prediction & Reverse Transformation","5993b04e":"From the above plot, we came to know that \"indeed subtracting two related series having similar trend components actually removed trend and made the dataset stationary\"","b145b833":"Now, we will need to index Month column.","93945fb2":"From the above below, we can see that there is a Trend compoenent in the series. Hence, we now check for stationarity of the data.\n\n","561be164":"Working on Rolling stats seperately (not using function) because we would need Rolling stats separately for computing","dfc29b92":"Let's plot the data","ba290c42":"From above plot, we can see that, visually this is the very best result as our series along with rolling stats values of moving avg(mean) & moving standard deviation is very much flat & stationary.\n\nBut, the ADCF test shows us that:\n\np-value of 0.07 is not as good as 0.02 of previous instance.\nTest Statistic value not as close to the critical values as that of previous instance.","0940479a":"Let's make one function consisting of stationary data checking and ADCF test working. Because we will need to repeat the steps many times, therefore, making function will become very handy","b0a063dd":"RSS value for: AR Model - 1.5023 MA Model - 1.4721\n\nARIMA Model - 1.0292\n\nBy combining AR & MA into ARIMA, we see that RSS value has decreased from either case to 1.0292, indicating ARIMA to be better than its individual component models.\n\nWith the ARIMA model built, we will now generate predictions. But, before we do any plots for predictions ,we need to reconvert the predictions back to original form. This is because, our model was built on log transformed data.\n\n","0fc27244":"MA Model\nMaking order = (0,1,2)","ac733d4b":"There are 144 records in 2 datasets and 2 columns. There are no null records present. But, look at the Month column. We need to convert them in to datetime datatype.","66362abe":"We have 144 (existing data of 12 yrs in months) data points. Now, we want to forecast for additional 10 yrs (10x12 months=120 data points).\n\n144+120 = 264 records\/data points","e7b7117f":"Time Shift Transformation","429a0995":"From above plot, we can see that our predicted forecasts are very close to the real time series values. It also indicates a fairly accurate model.","797b4aac":"From above plot, we can see that Rolling Mean itself has a trend component even though Rolling Standard Deviation is fairly constant with time.\n\nFor time series to be stationary, we need to ensure that both Rolling Mean and Rolling Standard Deviation remain fairly constant WRT time.\n\nBoth the curves needs to be parallel to X-Axis, in our case it is not so.\n\nWe've also conducted the ADCF ie Augmented Dickey Fuller Test. Having the Null Hypothesis to be Time Series is Non Stationary.","5028802a":"Data Transformation To Achieve Stationarity\nNow, we will have to perform some data transformation to achieve Stationarity. We can perform any of the transformations like taking log scale, square, square root, cube, cube root, time shift, exponential decay, etc.\n\nLet's perform Log Transformation.\n\nBasically we need to remove the trend component."}}