{"cell_type":{"b56e07d1":"code","2a3127a5":"code","57f9fb61":"code","f81c7edc":"code","db3972c8":"code","40a3d5d1":"code","5b983627":"code","9f2c20fc":"code","d5167116":"code","1f97ae50":"code","e905dada":"markdown"},"source":{"b56e07d1":"import pandas as pd\nimport numpy as np\nimport os\nimport requests\nimport json\nimport datetime\nimport time","2a3127a5":"MIN_FINAL_RATING = 1560 # top submission in a match must have reached this score\nnum_api_calls_today = 0\nNUM_TEAMS = 1\nEPISODES = 400","57f9fb61":"BUFFER = 1\n\nbase_url = \"https:\/\/www.kaggle.com\/requests\/EpisodeService\/\"\nget_url = base_url + \"GetEpisodeReplay\"\nlist_url = base_url + \"ListEpisodes\"","f81c7edc":"# inital team list\n\nr = requests.post(list_url, json = {\"teamId\":5673355}) # arbitrary ID, change to leading ID during challenge\nrj = r.json()\nteams_df = pd.DataFrame(rj['result']['teams'])","db3972c8":"teams_df.sort_values('publicLeaderboardRank', inplace = True)\n# Selecting the top 10\nteams_df = teams_df.iloc[:10,:]\nteams_df","40a3d5d1":"def getTeamEpisodes(team_id,teams_df):\n\n    r = requests.post(list_url, json = {\"teamId\":  int(team_id)})\n    rj = r.json()\n\n    # update teams list\n    # global teams_df\n    teams_df_new = pd.DataFrame(rj['result']['teams'])\n\n    if len(teams_df.columns) == len(teams_df_new.columns) and (teams_df.columns == teams_df_new.columns).all():\n        teams_df = pd.concat( (teams_df, teams_df_new.loc[[c for c in teams_df_new.index if c not in teams_df.index]] ) )\n        teams_df.sort_values('publicLeaderboardRank', inplace = True)\n    else:\n        print('teams dataframe did not match')\n\n    # make df\n    team_episodes = pd.DataFrame(rj['result']['episodes'])\n    team_episodes['avg_score'] = -1;\n\n    agents = []\n    for i in range(len(team_episodes)):\n        agents.append(team_episodes['agents'].loc[i])\n    not_none_agents = []\n    for i in range(len(agents)):\n        l = [a['updatedScore'] for a in agents[i] if a['updatedScore'] is not None]\n        if l:\n            not_none_agents.append(agents[i])\n            \n    for i in range(len(not_none_agents)):\n        agents = not_none_agents[i]\n        agent_scores = [a['updatedScore'] for a in agents if a['updatedScore'] is not None]\n        team_episodes.loc[i, 'submissionId'] = max([a['submissionId'] for a in agents])\n        team_episodes.loc[i, 'updatedScore'] = max([a['updatedScore'] for a in agents]) \n    \n    team_episodes['final_score'] = team_episodes['updatedScore']\n    team_episodes.sort_values('final_score', ascending = False, inplace=True)\n    \n    return rj, team_episodes","5b983627":"def saveEpisode(epid, rj):\n    # request\n    re = requests.post(get_url, json = {\"EpisodeId\": int(epid)})\n        \n    # save replay\n    with open('{}.json'.format(epid), 'w') as f:\n        f.write(re.json()['result']['replay'])","9f2c20fc":"global num_api_calls_today\n\npulled_teams = {}\npulled_episodes = []\nstart_time = datetime.datetime.now()\nr = BUFFER;","d5167116":"while num_api_calls_today < EPISODES:\n    # pull team\n    top_teams = [i for i in teams_df.id if i not in pulled_teams]\n    if len(top_teams) > 0:\n        team_id = top_teams[0]\n    else:\n        break;\n        \n    # get team data\n    team_json, team_df = getTeamEpisodes(team_id,teams_df); r+=1;\n    \n    num_api_calls_today+=1\n    \n    print('{} games for {}'.format(len(team_df), teams_df.loc[teams_df.id == team_id].iloc[0].teamName))\n\n    \n    team_df = team_df[  (MIN_FINAL_RATING is None or (team_df.final_score > MIN_FINAL_RATING))]\n    \n    print('   {} in score range from {} submissions'.format(len(team_df), len(team_df.submissionId.unique() ) ) )\n    \n    team_df = team_df[~team_df.id.isin(pulled_episodes)]        \n    print('      {} remain to be downloaded\\n'.format(len(team_df)))\n        \n    # pull games\n    target_team_games = int(np.ceil(EPISODES \/ NUM_TEAMS))\n    if target_team_games + len(pulled_episodes) > EPISODES:\n        target_team_games = EPISODES - len(pulled_episodes)\n     \n    pulled_teams[team_id] = 0\n    \n    i = 0\n    while i < len(team_df) and pulled_teams[team_id] < target_team_games:\n        epid = team_df.id.iloc[i]\n        if not (epid in pulled_episodes):\n            try:\n                saveEpisode(epid, team_json); r+=1;\n                num_api_calls_today+=1\n            except:\n                time.sleep(20)\n                i+=1;\n                continue;\n                \n            pulled_episodes.append(epid)\n            pulled_teams[team_id] += 1\n            try:\n                size = os.path.getsize('{}.json'.format(epid)) \/ 1e6\n                print(str(num_api_calls_today) + ': Saved Episode #{} @ {:.1f}MB'.format(epid, size))\n            except:\n                print('  file {}.json did not seem to save'.format(epid))    \n            if r > (datetime.datetime.now() - start_time).seconds:\n                time.sleep( r - (datetime.datetime.now() - start_time).seconds)\n                \n\n        i+=1;\n    print(); print()","1f97ae50":"# importing required modules \nfrom zipfile import ZipFile \nimport os \n  \ndef get_all_file_paths(directory): \n  \n    # initializing empty file paths list \n    file_paths = [] \n  \n    # crawling through directory and subdirectories \n    for root, directories, files in os.walk(directory): \n        for filename in files: \n            # join the two strings in order to form the full filepath. \n            filepath = os.path.join(root, filename) \n            file_paths.append(filepath) \n  \n    # returning all file paths \n    return file_paths         \n  \ndef zip(): \n    # path to folder which needs to be zipped \n    directory = '.\/'\n  \n    # calling function to get all file paths in the directory \n    file_paths = get_all_file_paths(directory) \n  \n    # printing the list of all files to be zipped \n    print('Following files will be zipped:') \n    for file_name in file_paths: \n        print(file_name) \n  \n    # writing files to a zipfile \n    with ZipFile('my_python_files.zip','w') as zip: \n        # writing each file one by one \n        for file in file_paths: \n            zip.write(file) \n  \n    print('All files zipped successfully!')         \n  \nzip()","e905dada":"This is a fixed version of [@felipebihaiek](https:\/\/www.kaggle.com\/felipebihaiek) [episode scraper](https:\/\/www.kaggle.com\/felipebihaiek\/google-football-episode-scraper-quick-fix), which returned a TypeError for None values.\nThe downloaded files are zipped at the end of the notebook. Make sure that you do not excess the memory limit by downloading too much files. You can change the first selected team by modifying the top_teams[i] i indice at the top of the second to last cell"}}