{"cell_type":{"65718c32":"code","edca6568":"code","d4c0aba7":"code","394c6b14":"code","fedd93dc":"code","04d21ed6":"code","2f0b31df":"code","5049b339":"code","2b87d78c":"code","1389b842":"code","6d124b33":"code","022da694":"code","1b6d91d4":"code","ed82a7bf":"markdown","7c0fbda1":"markdown","a72b540b":"markdown","75092f0e":"markdown","6925dd5d":"markdown","86b02733":"markdown","cd219442":"markdown","2838042a":"markdown","592b6a06":"markdown","66857d85":"markdown","90da06ab":"markdown","7ba096e0":"markdown","a1526016":"markdown","aa26945e":"markdown","9a6247b8":"markdown","4c3ad181":"markdown","bcb1f020":"markdown","789e4be4":"markdown","694ea6a8":"markdown","d8378265":"markdown","9362eea4":"markdown","f95850cd":"markdown","824035b2":"markdown","bf16a2c1":"markdown","a5e8ef9c":"markdown","c3fbe6e5":"markdown","9918d923":"markdown","847977f8":"markdown","a2edaf92":"markdown","fa502706":"markdown","f8491a7a":"markdown"},"source":{"65718c32":"import pandas \nnames = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']\ndf = pandas.read_csv(\"..\/input\/lab02\/iris.csv\", names=names) # Load dataset\ndf.head(3) # first three samples","edca6568":"# check the version of scikit-learn\nimport pandas\nimport sklearn\nprint('sklearn version')\nprint(sklearn.__version__)","d4c0aba7":"# Load dataset\nfile = \"..\/input\/lab02\/iris.csv\"\nnames = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']\ndf = pandas.read_csv(file, names=names)","394c6b14":"# shape\nprint(df.shape)","fedd93dc":"# head\nprint(df.head(5))\n# tail\nprint(df.tail(5))","04d21ed6":"# class distribution\nprint(df.groupby('class').size())","2f0b31df":"# Plot histograms\nimport matplotlib.pyplot as plt\ndf.hist()\nplt.show()","5049b339":"#split dataset in features and target variable\nX = df.iloc[:,0:4] # we choose all four features\n#X = df.iloc[:, 0:2] # we choose first two features as X.  \ny = df.iloc[:,4]\n#show y\nprint(y)","2b87d78c":"from sklearn.model_selection import train_test_split # Import train_test_split function\n#Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1) # 70% training and 30% test\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=10) # 50% training and 50% test with random seed = 10\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","1389b842":"from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\n# Create Decision Tree classifer object\nclf = DecisionTreeClassifier(criterion='entropy')","6d124b33":"# Train Decision Tree Classifer\nclf = clf.fit(X_train,y_train)","022da694":"from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation\n#Predict the response for test dataset\ny_pred = clf.predict(X_test)\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","1b6d91d4":"from matplotlib import pyplot as plt \nfrom sklearn import tree\nclf.fit(X, y) # classify all data\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(clf, feature_names=df.columns,class_names=['Iris-setosa','Iris-versicolor','Iris-virginica'],filled=True)","ed82a7bf":"### CRISP-DM: Phase 4\n**(4) Modeling Phase**\n* Select and apply one or more modeling techniques\n* Calibrate model settings to optimize results\n* If necessary,  additional data preparation may be required for supporting a particular technique\n\nIris project:\n* Which model? \n* How to train the model?","7c0fbda1":"### CRISP-DM: Phase 2\n(2) **Data Understanding Phase**\n* Collect data\n* Perform exploratory data analysis (EDA)\n* Assess data quality\n* Optionally, select interesting subsets\n\nIris project\n* Where to collect data?\n* Perform exploratory data analysis (EDA): draw figures for understanding the data\n* Assess data quality: is any wrong value? is there any missing value?\n","a72b540b":"## Part 2 Case Study 1\n### classifying iris flowers\nBased on the combination of four features of Iris flowers, we build a model to assign a class label for a Iris flower\n\nFour features:\n1. sepal length in cm\u00a0\n2. sepal width in cm\u00a0\n3. petal length in cm\n4. petal width in cm\n\nThree classes\n1. Setosa  \n2. Versicolour \n3. Virginica\n\nTarget variable\n* species of an iris plant (class label)\u00a0\n","75092f0e":"### CRISP-DM: Phase 6\n**(6) Deployment Phase**\n* Make use of models created\n* Simple deployment example: generate report\n* Complex deployment example: implement parallel data mining effort in another department\n* In businesses, customer often carries out deployment based on your model\n\nIris project\n* How to make use of the model? write mannual? \n* Write a techinical report?","6925dd5d":"The accucary is 95.6%. \n\nFinally we plot the decsion tree.","86b02733":"### Check the data shape \n* Check how rows and how many columns.","cd219442":"## Summary\n* In this session, we learn Cross Industry Standard Process for Data Mining, which is a standard, open, which has been widely used process for data mining.\n* We adopt CRISP-DM and apply it to our first machine learning project\n* We have learned the basic process of machine learnng for data analysis: **understand data, prepare data, build model and evaluate model**","2838042a":"### Train the model\n* Training is called fit: fit the model with the data","592b6a06":"## Learning objectives\n1. Introduce Cross Industry Standard Process for Data Mining (CRISP-DM). We follow this process to develop a data mining project\n\n2. Apply CRISP-DM to a case study. The case study is our first machine learning for data analysis project: classifying Iris flower species","66857d85":"### Iris data set \n* The data set contains 3 classes of 50 instances each (total 150), where each class refers to a type of iris plant\n* A row is called an **instance, record, sample, data point**\n* A column name is called a **feature or attribute**\n* A cell is called a **feature value of a sample**","90da06ab":"* `DecisionTreeClassifier(criterion='entropy\u2019)` return a classifier object (we name it `clf`)\n* `criterion='entropy\u2019` is a parameter","7ba096e0":"### CRISP-DM: Phase 5\n**(5) Evaluation Phase**\n* Evaluate one or more models for effectiveness \n* Determine whether defined objectives achieved\n* Establish whether some important facet of the problem has not been sufficiently accounted for\n* Make decision regarding data mining results before deploying to field\n\nIris  project\n* How to evaluate the performance of the model?\n* Does the model satisfiy the project requirement?  \n","a1526016":"### Import and check libraries\n* Import library: `pandas` for representing data; `Sklearn` for machine learning\n* Check library version. Be careful: methods may be different in different versions.","aa26945e":"### Prepare Data: training and test data  \n* We must split data into training and test data. \n* Why? \n* Assume we train a police dog for detecting drugs.\n* We train the daog with parcels with labels (with drug or without) first (training)\n* Then we test the performance of the dog on other parcels and check the accuracy of detecting drugs","9a6247b8":"## Part 1 Data Analysis Process\n### Introductory example: Iris flower classification\n\n* Iris flowers consist of three species.\n* We want to develop a computer tool which is able to classify the specie of a flower \n* How to develop this project?\n\n|![image.png](attachment:image.png)|\n|:-:|\n|[Three species of Iris flowers](https:\/\/thedatafrog.s3.amazonaws.com\/media\/images\/iris.max-1000x500.png)|","4c3ad181":"### CRISP-DM: Six Phases\nData mining projects follow iterative, adaptive life cycle consisting of six phases.\n\n|![image.png](attachment:image.png)|\n|:--:| \n|[Six phases of CRISP-DM](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/b\/b9\/CRISP-DM_Process_Diagram.png\/330px-CRISP-DM_Process_Diagram.png)|","bcb1f020":"### Exploratory data analysis\n* EDA is to visualise data for understudying data\n* Plot histograms: `df.hist()` is a data frame built-in method for plotting histograms\n* Each bin counts the number of samples, for example, the bin *petal-length =1* has about 35 samples","789e4be4":"### CRISP-DM: Phase 3\n**(3) Data Preparation Phase**\n* Prepares for modeling in subsequent phases\n* Select cases and variables appropriate for analysis\n* Cleanse and prepare data so it is ready for modeling tools\n* Perform transformation of certain variables, if needed\n\nIris project\n* Features: sepal length, width, petal length, width\n* Target: specie class\n* Do we need data cleansing for missing values or wrong values? Do we need data transformation? and how?\n","694ea6a8":"### Cross Industry Standard Process for Data Mining\n**Cross-Industry Standard Process for Data Mining** (CRISP-DM) developed in 1996\n* Fits data mining into the general problem-solving strategy of business\/research unit\n* Contributors include DaimlerChrysler, SPSS, and NCR\n* Industry, tool and application neutral\n* Non-proprietary and freely available\n\nExtension:\n* In 2015, IBM released an extension:\u00a0 **Analytics Solutions Unified Method for Data Mining\/Predictive Analytics**(ASUM-DM) ","d8378265":"### Understand data\n* Print first 5 samples\n* Print last 5 samples","9362eea4":"### Step by step Python implementation \n1. Loading the data set\n2. Understand the data \n3. Build a model \n4. Evaluate the model","f95850cd":"### Prepare Data: training and test data  \n* We split data: 70% of data as a training dataset and 30% for test\n* `train_test_split(X, y, test_size=0.3, random_state=1)`: input feature data X, and label data y\n* return four features and label data on training and test data\n* Splitting is random, relying on a parameter: random_state. We set `random_state=1` for repeating same results\n","824035b2":"### Evaluate the model\n* We apply the model to test data and make prediction of the class lable of test data\n* First we apply the model `clf` on test data `X_test`. This returns predicted labels for each sample `y_pred` on test data\n* We use `metrics.accuracy_score(y_test, y_pred))` to compare the difference between predicted labels and actual labels. It returns the percentage of correctly predicted samples, called **accuracy**","bf16a2c1":"### CRISP-DM: Phase 1\n(1) **Business\/Research Understanding Phase**\n* Define project requirements and objectives\n* Translate objectives into data mining problem definition\n* Prepare preliminary strategy to meet objectives\n\nIris project  \n* What are project requirements and objectives?\n* Translate objectives into data mining problem definition: classification, not regression, not clustering, not forecasting\n* Prepare preliminary strategy to meet objectives: select Python language,  \u2026\u2026\n","a5e8ef9c":"* `clf.fit(X_train,y_train)` is to train a classifier `cls` on training data, including both factures and labels\n* Return a trained classifier","c3fbe6e5":"### Load Data\n* Use Python library pandas to load the data.\u00a0\n* Pandas is common Python Data Analysis Library \n* `pandas.read_csv` read the CSV to a data frame (= a spread sheet)\n* If we open the spreadsheet *iris.csv*, we will find no column name. So, we add column names","9918d923":"### Build Model\n* We choose decision tree as our model. A decision tree is very intuitive can be interpreted as IF THEN rules\n\n|![image.png](attachment:image.png)|\n|:--:|\n|[Decision tree of Iris classification](https:\/\/mljar.com\/blog\/visualize-decision-tree\/output_19_0.svg)|","847977f8":"### Prepare Data: sperate features and target \n* Column 0 to 3 are features\n* Column 4 is the target (species class)\n* Slice the data frame: `df.iloc[:,0:4]` for columns 0,1,2,3 (but 4 is excluded)\n* `df.iloc[:,4]` for column 4 \n","a2edaf92":"### Follow CRISP-DM six phases\n1. Understand project business: no\u00a0business purpose; just for learning. Assign project requirements and objectives\n2. Understand data: collect Iris data; describe data, such as the number of records; range of length, etc.\n3. Prepare data for data mining: check missing data, incorrect data, repeated data\n4. Build model: select one or more classifiers; train the model on Iris dataset\n5. Evaluate model: evaluate one or more classifier for effectiveness; check predictive accuracy\n6. Deploy model: write a project report\n","fa502706":"### Check number of instances in each class\n* Count instances in each class\n* Pandas groupby function\n* `df.groupby('class').size()`: group data by the column of **class** and calculate the group size\n \n","f8491a7a":"# CRISP-DM and\u00a0Case Study 1\nCOMP20121 Machine Learning for Data Analytics\n\nAuthor: [Jun He](https:\/\/sites.google.com\/site\/hejunhomepage\/) \n "}}