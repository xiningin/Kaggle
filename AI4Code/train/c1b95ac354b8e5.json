{"cell_type":{"5d713c95":"code","8ab40271":"code","98bb2566":"code","b20a62fa":"code","4189fec5":"code","4a0fc3b3":"code","e1baf57c":"code","9bad8606":"code","f2f39b50":"code","793ba8bb":"code","8efe3fe2":"code","e385c9c8":"code","608bf63c":"code","a0f40bd0":"code","46b00782":"code","3a92fbf8":"code","4790a7c2":"code","75d768dd":"code","12ec75ea":"code","be08e907":"code","7d66c39d":"code","ba0197e3":"code","3f45d70d":"code","93108764":"code","141b1628":"code","964ca8d3":"code","28eba31a":"code","98927333":"code","eb5d8ee3":"code","4db0e0d6":"code","e17c148e":"code","ff39e707":"code","fbfcba08":"code","33d80e93":"code","eebf9b59":"code","0c2eb753":"code","763fc6fa":"code","f120b94a":"code","0a61adfd":"code","583320ad":"code","e28f596e":"markdown","f496d679":"markdown","a8ee3128":"markdown","f3db2e39":"markdown","1e27c74d":"markdown","18e114c1":"markdown","5d4a96fa":"markdown","9708c99f":"markdown","76967ff8":"markdown","9dccca61":"markdown","dcf640b4":"markdown","431f81a2":"markdown","806c89d9":"markdown","d82ed821":"markdown","43c94730":"markdown","ff6fca71":"markdown","9ee35a83":"markdown","f81cc809":"markdown","315e928b":"markdown","04d54be3":"markdown","f86a777f":"markdown","2f8431c0":"markdown","831f26ad":"markdown","609f0b59":"markdown","b0bf687c":"markdown","7ac2162a":"markdown","40f48ea5":"markdown","15a6feb9":"markdown","5309371f":"markdown","2840c258":"markdown","b30c9a31":"markdown","99745aad":"markdown","efe9fee8":"markdown"},"source":{"5d713c95":"# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport folium","8ab40271":"# importing datasets\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","98bb2566":"full_table.info()","b20a62fa":"full_table.shape","4189fec5":"full_table.count()","4a0fc3b3":"full_table.describe()","e1baf57c":"\nfull_table.isna().sum()","9bad8606":"# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values with NA\nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('NA')","f2f39b50":"# cases in the Diamond Princess cruise ship\nship = full_table[full_table['Province\/State']=='Diamond Princess cruise ship']\nfull_table = full_table[full_table['Province\/State']!='Diamond Princess cruise ship']\n\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()","793ba8bb":"full_latest_grouped.head()","8efe3fe2":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\ntemp = temp.sort_values('Date', ascending=False)\ntemp.head(1).style.background_gradient(cmap='tab20c')","e385c9c8":"temp = full_latest.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered'].max()\ntemp.style.background_gradient(cmap='ocean')","608bf63c":"temp_f = full_latest_grouped[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='magma')","a0f40bd0":"temp_f = china_latest_grouped[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Pastel1_r')","46b00782":"# World wide\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[full_latest.iloc[i]['Lat'], full_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(full_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(full_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(full_latest.iloc[i]['Recovered']),\n        radius=int(full_latest.iloc[i]['Confirmed'])).add_to(m)\nm","3a92fbf8":"# China \n\nm = folium.Map(location=[30, 116], tiles='cartodbpositron',\n               min_zoom=2, max_zoom=5, zoom_start=3)\n\nfor i in range(0, len(china_latest)):\n    folium.Circle(\n        location=[china_latest.iloc[i]['Lat'], china_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(china_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(china_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(china_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(china_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(china_latest.iloc[i]['Recovered']),\n        radius=int(china_latest.iloc[i]['Confirmed'])**1).add_to(m)\nm","4790a7c2":"fig = px.choropleth(full_latest_grouped, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", range_color=[1,500], \n                    color_continuous_scale=\"aggrnyl\", \n                    title='Countries with Confirmed Cases')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\n\n# ------------------------------------------------------------------------\n\nfig = px.choropleth(full_latest_grouped[full_latest_grouped['Deaths']>0], \n                    locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country\/Region\", \n                    range_color=[1,50], color_continuous_scale=\"agsunset\",\n                    title='Countries with Deaths Reported')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","75d768dd":"temp = full_table.groupby(['Country\/Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\n# temp.head()\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region', orientation='v', height=600,\n             title='Cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\nfig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region', orientation='v', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","12ec75ea":"formated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf = formated_gdf[formated_gdf['Country\/Region']!='China']\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(formated_gdf[formated_gdf['Country\/Region']!='China'], \n                     locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='Confirmed', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread outside China over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\n\n# -----------------------------------------------------------------------------------\n\nchina_map = china.groupby(['Date', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', \n                                                      'Lat', 'Long'].max()\nchina_map = china_map.reset_index()\nchina_map['size'] = china_map['Confirmed'].pow(0.5)\nchina_map['Date'] = pd.to_datetime(china_map['Date'])\nchina_map['Date'] = china_map['Date'].dt.strftime('%m\/%d\/%Y')\nchina_map.head()\n\nfig = px.scatter_geo(china_map, lat='Lat', lon='Long', scope='asia',\n                     color=\"size\", size='size', hover_name='Province\/State', \n                     hover_data=['Confirmed', 'Deaths', 'Recovered'],\n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread in China over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","be08e907":"temp_flg = full_latest_grouped[['Country\/Region', 'Deaths']]\ntemp_flg = temp_flg.sort_values(by='Deaths', ascending=False)\ntemp_flg = temp_flg.reset_index(drop=True)\ntemp_flg = temp_flg[temp_flg['Deaths']>0]\ntemp_flg.style.background_gradient(cmap='Pastel1_r')","7d66c39d":"# Countries with no cases recovered\ntemp = row_latest_grouped[row_latest_grouped['Recovered']==0]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1_r')","ba0197e3":"# Provinces with no cases recovered\ntemp = china_latest_grouped[china_latest_grouped['Recovered']==0]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1_r')","3f45d70d":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']+\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Blues')","93108764":"temp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Deaths']+\n                          china_latest_grouped['Recovered']]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","141b1628":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","964ca8d3":"temp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Recovered']]\ntemp = temp[['Province\/State', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","28eba31a":"# Cases in the Diamond Princess Cruise Ship\ntemp = ship.sort_values(by='Date', ascending=False).head(1)\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']].reset_index(drop=True)\ntemp.style.background_gradient(cmap='rainbow')","98927333":"temp = ship[ship['Date'] == max(ship['Date'])].reset_index()\n\nm = folium.Map(location=[35.4437, 139.638], tiles='cartodbpositron',\n               min_zoom=8, max_zoom=12, zoom_start=10)\n\nfolium.Circle(location=[temp.iloc[0]['Lat'], temp.iloc[0]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Ship : '+str(temp.iloc[0]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[0]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[0]['Deaths'])+\n                    '<li><bold>Recovered : '+str(temp.iloc[0]['Recovered']),\n        radius=int(temp.iloc[0]['Confirmed'])**1).add_to(m)\nm","eb5d8ee3":"def location(row):\n    if row['Country\/Region']=='China':\n        if row['Province\/State']=='Hubei':\n            return 'Hubei'\n        else:\n            return 'Other Chinese Provinces'\n    else:\n        return 'Rest of the World'\n\ntemp = full_latest.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp = temp.groupby('Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars='Region', value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             text='Count', title='Hubei - China - World', \n             color_discrete_sequence= ['#EF553B', '#00CC96', '#636EFA'])\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","4db0e0d6":"# In China\ntemp = china.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='Number of new cases in China everyday')\nfig.update_layout(barmode='group')\nfig.show()\n\n#-----------------------------------------------------------------------------\n\n# ROW\ntemp = row.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='Number of new cases outside China everyday')\nfig.update_layout(barmode='group')\nfig.show()","e17c148e":"gdf = gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngdf = gdf.reset_index()\n\ntemp = gdf[gdf['Country\/Region']=='China'].reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n            title='Cases in China')\nfig.show()\n\ntemp = gdf[gdf['Country\/Region']!='China'].groupby('Date').sum().reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n             title='Cases Outside China')\nfig.show()","ff39e707":"c_spread = china[china['Confirmed']!=0].groupby('Date')['Province\/State'].unique().apply(len)\nc_spread = pd.DataFrame(c_spread).reset_index()\n\nfig = px.line(c_spread, x='Date', y='Province\/State', \n              title='Number of Provinces\/States\/Regions of China to which COVID-19 spread over the time')\nfig.show()\n\n# ------------------------------------------------------------------------------------------\n\nspread = full_table[full_table['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len)\nspread = pd.DataFrame(spread).reset_index()\n\nfig = px.line(spread, x='Date', y='Country\/Region', \n              title='Number of Countries\/Regions to which COVID-19 spread over the time')\nfig.show()","fbfcba08":"temp = full_table.groupby('Date').sum().reset_index()\ntemp.head()\n\n# adding two more columns\ntemp['No. of Deaths to 100 Confirmed Cases'] = round(temp['Deaths']\/\n                                                     temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 100 Confirmed Cases'] = round(temp['Recovered']\/\n                                                        temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 1 Death Case'] = round(temp['Recovered']\/\n                                                 temp['Deaths'], 3)\n\ntemp = temp.melt(id_vars='Date', \n                 value_vars=['No. of Deaths to 100 Confirmed Cases', \n                             'No. of Recovered to 100 Confirmed Cases', \n                             'No. of Recovered to 1 Death Case'], \n                 var_name='Ratio', \n                 value_name='Value')\n\nfig = px.line(temp, x=\"Date\", y=\"Value\", color='Ratio', \n              title='Recovery and Mortality Rate Over The Time')\nfig.show()","33d80e93":"rl = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum()\nrl = rl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nrl.head().style.background_gradient(cmap='rainbow')\n\nncl = rl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Country\/Region\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             x=\"Country\/Region\", y=\"value\", color='variable', orientation='v', height=800,\n             # height=600, width=1000,\n             title='Number of Cases outside China')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()\n\n# ------------------------------------------\n\ncl = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum()\ncl = cl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\n# cl.head().style.background_gradient(cmap='rainbow')\n\nncl = cl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Province\/State\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             y=\"Province\/State\", x=\"value\", color='variable', orientation='h', height=800,\n             # height=600, width=1000,\n             title='Number of Cases in China')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","eebf9b59":"fig = px.treemap(china_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Confirmed\", \n                 title='Number of Confirmed Cases in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\nfig = px.treemap(china_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Deaths\", \n                 title='Number of Deaths Reported in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\nfig = px.treemap(china_latest.sort_values(by='Recovered', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Recovered\", \n                 title='Number of Recovered Cases in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\n# ----------------------------------------------------------------------------\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Confirmed\", \n                 title='Number of Confirmed Cases outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Deaths\", \n                 title='Number of Deaths outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Recovered\", \n                 title='Number of Recovered Cases outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()","0c2eb753":"china.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().plot()","763fc6fa":"row.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().plot()","f120b94a":"temp = full_table.groupby(['Country\/Region', 'Date'])\ntemp = temp['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\ntemp = temp[temp['Confirmed']!=0]\ntemp.head()","0a61adfd":"# Number of Countries\ntemp_c = temp.groupby('Date')['Country\/Region'].count()\ntemp_c.plot()","583320ad":"# Number of new Countries\n\ntemp_c = temp.groupby('Date')['Country\/Region'].count().diff()\ntemp_c.plot(kind='bar', title='Number of new countries')","e28f596e":"# Dataset","f496d679":"### Cleaning Data","a8ee3128":"# Number of new cases everyday","f3db2e39":"## Number of cases","1e27c74d":"### Current Stats","18e114c1":"* During the first few weeks the there were more Deaths reported per day than Recoverd cases\n* Over the time that has changed drastically\n* Although the death rate hasn't come down, the number of recovered cases has defenitly increased","5d4a96fa":"### Spread over the time","9708c99f":"### Chines Province Wise Latest Data","76967ff8":"### Countries and Provinces with no recovered cases","9dccca61":"### Diamond Princess Cruise ship Status","dcf640b4":"## Number of Places to which COVID-19 Spread","431f81a2":"### Reported cases in China","806c89d9":"## Number of new cases","d82ed821":"## Latest Data","43c94730":"## Recovery and Mortality Rate Over The Time","ff6fca71":"### Countries with deaths reported","9ee35a83":"* COVID-19 spread to all the provinces of the China really fast and early\n* Number of countries to which COVID-19 spread hasn't increased that much after first few weeks","f81cc809":"## Map","315e928b":"### From the above info, there are missing value Province\/State\n","04d54be3":"* The Diamond Princess cruise ship was carrying 3,711 passengers and crew on board\n* Ship arrived in Yokohama, near Tokyo, on February 3\n* [https:\/\/www.princess.com\/news\/notices_and_advisories\/notices\/diamond-princess-update.html](https:\/\/www.princess.com\/news\/notices_and_advisories\/notices\/diamond-princess-update.html)","f86a777f":"### Country Wise Latest Data","2f8431c0":"## Hubei - China - World","831f26ad":"## Proportion of Cases","609f0b59":"### Countries and Provinces with all the cases recovered","b0bf687c":"### Complete Data","7ac2162a":"# Libraries","40f48ea5":"### Reported cases over the world","15a6feb9":"## Number of Cases","5309371f":"# EDA","2840c258":"# Preprocessing","b30c9a31":"### Countries and Provinces with no affected case anymore","99745aad":"### Derived Tables","efe9fee8":"### Cases in differnt Countries"}}