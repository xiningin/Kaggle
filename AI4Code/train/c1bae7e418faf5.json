{"cell_type":{"b7223178":"code","f58f53f2":"code","59903f0d":"code","e42353cd":"code","db7c2e91":"code","f925b7dd":"code","1f89538e":"code","e5ccd2c7":"code","91bf8043":"code","260e02a2":"code","2228f12c":"code","e7f5ecd6":"code","5916f9d6":"code","0b7df7c4":"code","19447752":"code","b39dbebf":"code","b49fb50d":"code","6b083ca2":"code","54edd4d0":"code","f3cbd70b":"code","dc2ee10d":"code","1e00f38f":"code","2f473d59":"code","b63b3ac1":"code","257709cf":"code","5ca3fbc0":"code","69b408fc":"code","efc49168":"code","b3c31b29":"code","c09d2a55":"code","a3b79e77":"code","cb394f4c":"code","ab1dba5d":"code","75f28f65":"code","614ffac0":"code","43f90ef6":"code","0dac3fde":"code","66207006":"code","fdfd056d":"code","f4f64c60":"code","bb77b1a5":"code","798acc5b":"code","78eb00da":"code","acbe34bc":"code","6b718e84":"code","0e46746b":"code","a795c6f1":"code","3a362796":"code","6ffb06d3":"code","357cb2f6":"code","c7bc1a39":"code","b1c293ce":"code","4be60936":"code","97052edd":"code","c5fa7a49":"code","ed71d854":"code","e4968d86":"code","cdf2ddec":"code","8ad04bf7":"code","994ad98d":"code","0b4b09fa":"code","3e5ba788":"markdown","9382749b":"markdown","4c3d6e7c":"markdown","9ba1de69":"markdown","83731b18":"markdown","0e9b3cce":"markdown","1936cd8e":"markdown","45caaa5b":"markdown","7e70c8d4":"markdown","fcb6206b":"markdown","192d65ac":"markdown","f81c5cfa":"markdown","f21ad3d0":"markdown","92f06a4a":"markdown","ba802413":"markdown","3ad4c6ea":"markdown","11ed7467":"markdown","0feb96d1":"markdown","0489f8a9":"markdown","05b89683":"markdown","5a47b927":"markdown","6c58f10b":"markdown","cd84f20d":"markdown","485ae8b0":"markdown","d11d1f09":"markdown","1ec6dc68":"markdown","939b9de3":"markdown","618893c4":"markdown","3a1dfdd6":"markdown","b6e5a0e6":"markdown","24be6d23":"markdown","0cb42a36":"markdown","61f17cf1":"markdown","75bca649":"markdown","ecaa8328":"markdown","7ed9e098":"markdown","b9fd0e34":"markdown","d4168d6c":"markdown","12c82f77":"markdown","603cf793":"markdown","54255fac":"markdown","15ef0cad":"markdown","21c188b7":"markdown","23fca556":"markdown","466601ba":"markdown","961afb48":"markdown","97e3a48d":"markdown","66f55d5b":"markdown","01e07047":"markdown","13f61b89":"markdown","95dd2563":"markdown","fba450dd":"markdown","5e42b72d":"markdown"},"source":{"b7223178":"import warnings\n\nwarnings.filterwarnings('ignore')","f58f53f2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Plotly Graphing Libraries\nfrom plotly.offline import init_notebook_mode, iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\nimport plotly.graph_objs as go\nimport plotly\nimport plotly.express as px\n\n\n#SKLearn\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport xgboost\n\ninit_notebook_mode(connected=True)\npd.set_option('display.max_columns', 100)","59903f0d":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain.head(10)","e42353cd":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.head(10)","db7c2e91":"train.info()","f925b7dd":"test.info()","1f89538e":"#Checking null percent of Train\nnull_perc = train.isnull().sum()\/len(train)*100\nnull_perc.sort_values(ascending = False).head(10)","e5ccd2c7":"#Checking null percent of Test\nnull_perc = test.isnull().sum()\/len(test)*100\nnull_perc.sort_values(ascending = False).head(10)","91bf8043":"#Checking the correlation with respect to 'Survived'\ntrain.corr()['Survived']","260e02a2":"del_col = ['Ticket','Cabin', 'Name']\ntrain.drop(del_col, axis = 1, inplace = True)\ntest.drop(del_col, axis = 1, inplace = True)","2228f12c":"train.head()","e7f5ecd6":"test.head()","5916f9d6":"train.Embarked.unique()","0b7df7c4":"train.Embarked.mode()","19447752":"train.Embarked = train.Embarked.fillna('S')","b39dbebf":"train.Embarked.unique()","b49fb50d":"test.Fare = test.Fare.fillna(np.mean(test.Fare))\ntest.Fare.isnull().sum()","6b083ca2":"age_m = train.Age.mean()\nage_sd = train.Age.std()\n\ntrain.Age.fillna(np.random.randint(age_m - age_sd, age_m + age_sd), inplace=True)\ntrain.Age.isnull().sum()","54edd4d0":"age_mt = test.Age.mean()\nage_sdt = test.Age.std()\n\ntest.Age.fillna(np.random.randint(age_m - age_sd, age_m + age_sd), inplace=True)\ntest.Age.isnull().sum()","f3cbd70b":"#Creating dummies for the column Sex\ntrain['Sex'] = pd.get_dummies(train['Sex'])\ntest['Sex'] = pd.get_dummies(test['Sex'])\n\n#Enumerating the values of the column Embarked\ntrain['Embarked'] = pd.factorize(train['Embarked'])[0]\ntest['Embarked'] = pd.factorize(test['Embarked'])[0]\n\n#Converting to int datatype\ntrain['Age'] = train['Age'].astype('int32')\ntest['Age'] = test['Age'].astype('int32')\n\ntrain['Fare']=train['Fare'].astype('int32')\ntest['Fare']=test['Fare'].astype('int32')","dc2ee10d":"train.head()","1e00f38f":"train.head()","2f473d59":"#Binning of Fare at 20 percentile each\ntrain['Fare_enum'] = pd.qcut(train.Fare, q=[0, 0.2, 0.4, 0.6, 0.8, 1], labels=[0,1,2,3,4])\ntest['Fare_enum'] = pd.qcut(test.Fare, q=[0, 0.2, 0.4, 0.6, 0.8, 1], labels=[0,1,2,3,4])","b63b3ac1":"train.head()","257709cf":"#Binning of Age\ntrain['Age_range']=pd.cut(train['Age'], bins=[-1,18,25,35,60,100], labels=['Minor','Young_Adult','Adult','Middle_Age', 'Senior_Citizen'])\ntest['Age_range']=pd.cut(test['Age'], bins=[-1,18,25,35,60,100], labels=['Minor','Young_Adult','Adult','Middle_Age', 'Senior_Citizen'])","5ca3fbc0":"train['Family'] = train['Parch'] + train['SibSp']\ntest['Family'] = test['Parch'] + test['SibSp']","69b408fc":"train.head()","efc49168":"#Count of Family\ntemp = train[\"Family\"].value_counts()\ntemp.iplot(kind='bar', xTitle = 'Family', yTitle = \"Count\", title = 'Count of Family', color = '#25C5BF')","b3c31b29":"#Enumerating Family\nfor i in range(0,len(train)):\n    if train['Family'][i] == 0:\n        train['Family'][i] = 0\n    elif (train['Family'][i] >= 1) & (train['Family'][i] <=3):\n        train['Family'][i]=1\n    elif (train['Family'][i] >= 4) & (train['Family'][i] <=6):\n        train['Family'][i]=2\n    elif (train['Family'][i] >= 7) & (train['Family'][i] <=9):\n        train['Family'][i]=3\n    else:\n        train['Family'][i]=4","c09d2a55":"for i in range(0,len(test)):\n    if test['Family'][i] == 0:\n        test['Family'][i] = 0\n    elif (test['Family'][i] >= 1) & (test['Family'][i] <=3):\n        test['Family'][i]=1\n    elif (test['Family'][i] >= 4) & (test['Family'][i] <=6):\n        test['Family'][i]=2\n    elif (test['Family'][i] >= 7) & (test['Family'][i] <=9):\n        test['Family'][i]=3\n    else:\n        test['Family'][i]=4","a3b79e77":"train.head()","cb394f4c":"fig = px.box(train, y=\"Age\",title='Distribution of Age' )\nfig.show()","ab1dba5d":"fig = px.box(train, y=\"Fare\",title='Distribution of Fare' )\nfig.show()","75f28f65":"def uni(df,col,v,hue =None):\n\n    sns.set(style=\"darkgrid\")\n    \n    if v == 0:\n        fig, ax=plt.subplots(nrows =1,ncols=3,figsize=(20,8))\n        ax[0].set_title(\"Distribution Plot\")\n        sns.distplot(df[col],ax=ax[0], color=\"#4CB391\")\n        plt.yscale('log')\n        ax[1].set_title(\"Violin Plot\")\n        sns.violinplot(data =df, x=col,ax=ax[1], inner=\"quartile\", color=\"#4CB391\")\n        plt.yscale('log')\n        ax[2].set_title(\"Box Plot\")\n        sns.boxplot(data =df, x=col,ax=ax[2],orient='v', color=\"#4CB391\")\n        plt.yscale('log')\n    \n    if v == 1:\n        temp = pd.Series(data = hue)\n        fig, ax = plt.subplots()\n        width = len(df[col].unique()) + 6 + 4*len(temp.unique())\n        fig.set_size_inches(width , 7)\n        ax = sns.countplot(data = df, x= col, color=\"#4CB391\", order=df[col].value_counts().index,hue = hue) \n        if len(temp.unique()) > 0:\n            for p in ax.patches:\n                ax.annotate('{:1.1f}%'.format((p.get_height()*100)\/float(len(loan))), (p.get_x()+0.05, p.get_height()+20))  \n        else:\n            for p in ax.patches:\n                ax.annotate(p.get_height(), (p.get_x()+0.32, p.get_height()+20)) \n        del temp\n    else:\n        exit\n        \n    plt.show()","614ffac0":"uni(df=train,col='Fare',v=0)","43f90ef6":"uni(df=train,col='Age',v=0)","0dac3fde":"im = train[\"Survived\"].value_counts()\ndf = pd.DataFrame({'labels': ['No', 'Yes'],'values': im.values})\ndf.iplot(kind='pie',labels='labels',values='values', title='Survived', hole = 0.5, colors=['#FF414D','#9B116F'])","66207006":"im = train[\"Sex\"].value_counts()\ndf = pd.DataFrame({'labels': ['Male', 'Female'],'values': im.values})\ndf.iplot(kind='pie',labels='labels',values='values', title='Sex', hole = 0.5, colors=['#25C5BF','#F46F7A'])","fdfd056d":"im = train[\"Age_range\"].value_counts()\ndf = pd.DataFrame({'labels': im.index,'values': im.values})\ndf.iplot(kind='pie',labels='labels',values='values', title='Age Range', hole = 0.5, colors=['#8ACC17','#C8EC3E', '#FFF412', '#CA0772', '#800561'])","f4f64c60":"im = train[\"Embarked\"].value_counts()\ndf = pd.DataFrame({'labels': ['S', 'C', 'Q'],'values': im.values})\ndf.iplot(kind='pie',labels='labels',values='values', title='Embarked', hole = 0.5, colors=['#AEB5E7','#EEBADF', '#BBE6E1'])","bb77b1a5":"temp = train[\"Parch\"].value_counts()\ntemp.iplot(kind='bar', xTitle = 'Parch', yTitle = \"Count\", title = 'Count of Parents and Children', color = '#FF0000')","798acc5b":"temp = train[\"SibSp\"].value_counts()\ntemp.iplot(kind='bar', xTitle = 'Siblings', yTitle = \"Count\", title = 'Count of Siblings', color = '#FF8C00')","78eb00da":"im = train[\"Pclass\"].value_counts()\ndf = pd.DataFrame({'labels': im.index,'values': im.values})\ndf.iplot(kind='pie',labels='labels',values='values', title='Passenger Class', hole = 0.5, colors=['#0F0200','#FF1F32', '#FEAB20'])","acbe34bc":"ax = sns.countplot(data=train,x='Embarked',hue='Pclass', palette='viridis')\n\nplt.title('Embarked vs PClass', fontsize = 20)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n    height + 3,\n    '{:1.2f}%'.format(height\/len(train)*100),\n    ha=\"center\")\nplt.show()","6b718e84":"ax = sns.countplot(data=train,x='Pclass',hue='Survived', palette='pastel')\nplt.title('PClass vs Survived', fontsize = 20)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n    height + 3,\n    '{:1.2f}%'.format(height\/len(train)*100),\n    ha=\"center\")\nplt.show()","0e46746b":"\nax = sns.countplot(data=train,x='Embarked',hue='Survived', palette='tab20')\nplt.title('Embarked vs Survived', fontsize = 20)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n    height + 3,\n    '{:1.2f}%'.format(height\/len(train)*100),\n    ha=\"center\")\nplt.show()\n","a795c6f1":"ax = sns.countplot(data=train,x='Sex',hue='Survived', palette='BrBG')\n\nplt.title('Sex vs Survived', fontsize = 20)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n    height + 3,\n    '{:1.2f}%'.format(height\/len(train)*100),\n    ha=\"center\")\nplt.show()","3a362796":"fig = px.box(train, x=\"Survived\", y=\"Age\", color='Sex',\n                title=\"Gender wise Survived vs Age\")\n\nfig.show()","6ffb06d3":"sns.catplot(x=\"Pclass\", y=\"Fare\",  hue = \"Survived\", kind=\"swarm\", data=train, \n                                    palette=[\"#3f3e6fd1\", \"#85c6a9\"], height = 6, legend_out = False)\nplt.tight_layout()","357cb2f6":"plt.figure(figsize=(15,12))\nplt.title('Correlation of Features for Train Set')\nsns.heatmap(train.corr(),vmax=1.0,  annot=True, cmap=\"coolwarm\",\n           linewidth=0.3, cbar_kws={\"shrink\": .8})\nplt.show()","c7bc1a39":"X = train[['Sex','Pclass','Age','Parch','Family','Fare_enum','Embarked']]\ny = train[['Survived']]\ntest_pred = test[['Sex','Pclass','Age','Parch','Family','Fare_enum','Embarked']]\nX_train , X_test, y_train , y_test = train_test_split(X,y,test_size = 0.2,random_state=0)","b1c293ce":"X_train.head()","4be60936":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\n\nY_pred = logreg.predict(X_test)\nprint(confusion_matrix(y_test,Y_pred))\nprint(classification_report(y_test,Y_pred))","97052edd":"knn = KNeighborsClassifier(n_neighbors = 9) \nknn.fit(X_train, y_train)  \nY_pred = knn.predict(X_test)  \n\nprint(confusion_matrix(y_test,Y_pred))\nprint(classification_report(y_test,Y_pred))","c5fa7a49":"dtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\nY_pred = dtree.predict(X_test)\n\nprint(confusion_matrix(y_test,Y_pred))\nprint(classification_report(y_test,Y_pred))","ed71d854":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nprint(confusion_matrix(y_test,Y_pred))\nprint(classification_report(y_test,Y_pred))","e4968d86":"gaussian = GaussianNB() \ngaussian.fit(X_train, y_train)  \nY_pred = gaussian.predict(X_test)\n\nprint(confusion_matrix(y_test,Y_pred))\nprint(classification_report(y_test,Y_pred))","cdf2ddec":"gbk = GradientBoostingClassifier()\ngbk.fit(X_train, y_train)\n\nY_pred = gbk.predict(X_test)\n\nprint(confusion_matrix(y_test,Y_pred))\nprint(classification_report(y_test,Y_pred))","8ad04bf7":"perceptron = Perceptron(max_iter=5)\nperceptron.fit(X_train, y_train)\n\nY_pred = perceptron.predict(X_test)\n\nprint(confusion_matrix(y_test,Y_pred))\nprint(classification_report(y_test,Y_pred))","994ad98d":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, y_train)\n\nY_pred = linear_svc.predict(X_test)\n\nprint(confusion_matrix(y_test,Y_pred))\nprint(classification_report(y_test,Y_pred))","0b4b09fa":"#Final prediction using SVC\npred = linear_svc.predict(test_pred)\n\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': pred})\noutput.to_csv('\/kaggle\/working\/submission.csv', index=False)","3e5ba788":"## Data Visualization ","9382749b":"### Bivariate Analysis","4c3d6e7c":"### Support Vector Classifier","9ba1de69":"### Checking for Outliers","83731b18":"### Splitting the Dataset","0e9b3cce":"More than 60% of the passengers had succumbed to their deaths. ","1936cd8e":"### Decision Tree","45caaa5b":"### Logistic Regression","7e70c8d4":"#### Fare","fcb6206b":"### Enumerating and Converting","192d65ac":"### Age","f81c5cfa":"Most of the passengers preferred to travel alone. ","f21ad3d0":"More than half of the passengers travelled in third class.","92f06a4a":"## Data Cleaning ","ba802413":"## Modelling","3ad4c6ea":"### Univariate Analysis","11ed7467":"A little less than 2\/3rd of the passengers onboard were Male.","0feb96d1":"### K Nearest Neighbours","0489f8a9":"## Data Assessing","05b89683":"#### Age Range","5a47b927":"## Importing Libraries","6c58f10b":"We observe that the column Cabin contains the highest percentage of null values with 77%. Age and Embarked columns also have some null values which we will impute further.","cd84f20d":"### Gaussian Naive Bayes","485ae8b0":"With 41.8%, middle aged passengers constituted the majority onboard. ","d11d1f09":"A little less than 3\/4th of the passengers embarked from Southampton for the journey of their lives. ","1ec6dc68":"#### Embarked Ratio","939b9de3":"![download.png](attachment:download.png)","618893c4":"#### Survival Rate","3a1dfdd6":"#### Count of Parents and Children","b6e5a0e6":"## Data Gathering","24be6d23":"## Dataset Overview \n\n- survived - Survival (0 = No, 1 = Yes)\n- pclass - Ticket class (1 = 1st, 2 = 2nd, 3 = 3rd)\n- sex - Sex\t\n- Age - Age in years\t\n- sibsp\t- Number of siblings \/ spouses aboard the Titanic\t\n- parch\t- Number of parents \/ children aboard the Titanic\t\n- ticket - Ticket number\t\n- fare - Passenger fare\t\n- cabin\t- Cabin number\t\n- embarked\t- Port of Embarkation (C = Cherbourg, Q = Queenstown, S = Southampton)","0cb42a36":"#### Age","61f17cf1":"# TiPanic - Survival Prediction ","75bca649":"### Gradient Boost","ecaa8328":"## Let's get down to business.","7ed9e098":"Most of the passengers onboard had no siblings.","b9fd0e34":"#### Gender Distribution","d4168d6c":"The column Fare has several outliers.","12c82f77":"### Random Forest ","603cf793":"### Total Family onboard","54255fac":"### Multivariate Analysis","15ef0cad":"#### Fare","21c188b7":"### Fare","23fca556":"### Binning","466601ba":"#### Count of Siblings","961afb48":"We observe 1 outlier in the column Age with the value 80.","97e3a48d":"#### Passenger Class","66f55d5b":"### Perceptron","01e07047":"### Embarked","13f61b89":"#### Age","95dd2563":"### Deleting Unwanted Columns ","fba450dd":"## Introduction \nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.","5e42b72d":"We here also observe that the column Cabin contains the highest percentage of null values with 78%. Age and Fare columns also have some null values which we will impute further."}}