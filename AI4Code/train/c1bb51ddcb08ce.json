{"cell_type":{"1264947e":"code","d21edff9":"code","3dfb5e63":"code","2fca9910":"code","43d048d0":"code","17628263":"code","6f488e07":"code","5e0704d8":"code","4e919b43":"code","16c15aa6":"code","8109d83d":"code","fb708f20":"code","f6735255":"code","5e3d5a08":"code","4e8d59d8":"code","a0707ad8":"code","7145ed1a":"code","2e138024":"code","33e5e6c7":"code","99cacdd5":"code","30272044":"code","d714c852":"code","6f81a667":"code","500f88d2":"code","18003eb5":"code","74e7ac36":"code","921b61bd":"code","a932e3a9":"code","8a4bd69a":"code","708afec5":"code","2c27104e":"code","ed3eb2ac":"code","9099594a":"code","fb416904":"code","ded8b7ee":"code","3f5ab9b1":"code","597c7064":"code","27312593":"code","cb307cdb":"code","3bdd815c":"code","9792411a":"code","b920b719":"code","7db20413":"code","2bdd236d":"code","8d4f81e3":"code","4e9ef820":"code","1565e739":"code","f65ad3bf":"code","6a1a19d7":"code","07170425":"code","b7cbdf96":"code","5844d466":"code","ab1e07d8":"code","456a40ab":"code","d260be7c":"code","29789a1a":"code","a9ea6906":"code","fdec3126":"code","1a37834b":"code","9f71d423":"code","4f686a2e":"markdown","def7a36a":"markdown","6138335b":"markdown","c90d9505":"markdown","527de952":"markdown","c6addc80":"markdown","341c356c":"markdown","92fc929a":"markdown","e530be50":"markdown","5cd7d8d2":"markdown","4837f394":"markdown","c88da953":"markdown","b0a8c462":"markdown","7717c654":"markdown","7db5817c":"markdown","2e4c2621":"markdown","1f3415b5":"markdown","9d5ab049":"markdown","1fbb61f4":"markdown","48449235":"markdown","1c834c69":"markdown","47cdc536":"markdown","20559ed8":"markdown","09e6a982":"markdown","c54ea69d":"markdown","0a09c905":"markdown","ee34177a":"markdown","3f43a855":"markdown","f426388e":"markdown","2656828d":"markdown","3b573278":"markdown","a418c3a0":"markdown","7e36d448":"markdown","d343f6c1":"markdown"},"source":{"1264947e":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d21edff9":"import plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\n\ninit_notebook_mode(connected = True)\nimport plotly.graph_objs as go","3dfb5e63":"import os\nprint(os.listdir(\"..\/input\/fifa19\"))","2fca9910":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","43d048d0":"df =pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')","17628263":"df.head()","6f488e07":"df.columns","5e0704d8":"df.drop(['Unnamed: 0', 'ID', 'Photo', 'Flag', 'Club Logo', 'Special', 'Real Face','Loaned From' ,'Release Clause',\n                   'Joined', 'Contract Valid Until'],axis=1,inplace=True)","4e919b43":"df.isnull().sum()","16c15aa6":"df['Club'].fillna(value='No Club', inplace=True)","8109d83d":"df[df['Position'].isna()][['Name', 'Nationality', 'LS', 'ST','RS', 'LW', 'LF', 'CF', 'RF', 'RW',\n                              'LAM', 'CAM', 'RAM', 'LM', 'LCM','CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', \n                              'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']].head()","fb708f20":"df.drop(index=df[df['Position'].isna()].index, inplace=True)","f6735255":"df.isnull().sum()[df.isnull().sum() > 0]","5e3d5a08":"len(df[df['Position'] == 'GK'])","4e8d59d8":"df.fillna(value=0, inplace=True)","a0707ad8":"df['Nationality'].nunique()","7145ed1a":"df['Club'].nunique()","2e138024":"df.sort_values(by='Age')[['Name','Age','Club','Nationality','Position']].head(1)","33e5e6c7":"df.sort_values(by='Age',ascending = False)[['Name','Age','Club','Nationality','Position']].head(1)","99cacdd5":"\n# defining a function for cleaning the value and wage column\n\ndef extract_value_from(Value):\n    out = Value.replace('\u20ac', '')\n    if 'M' in out:\n        out = float(out.replace('M', ''))*1000000\n    elif 'K' in Value:\n        out = float(out.replace('K', ''))*1000\n    return float(out)\n\n\ndf['Value'] = df['Value'].apply(lambda x: extract_value_from(x))\ndf['Wage'] = df['Wage'].apply(lambda x: extract_value_from(x))\n","30272044":"df.sort_values(by='Value',ascending = False)[['Name','Age','Club','Nationality','Value','Position']].head()","d714c852":"df.sort_values(by='Wage',ascending = False)[['Name','Age','Club','Nationality','Wage','Position']].head()","6f81a667":"def top(x):\n    return df[df['Overall'] > x][['Name','Nationality','Club','Overall','Position']]\n\ntop(90)","500f88d2":"def Inttop(x):\n    return df[df['International Reputation'] == x][['Name','Nationality','Club','Overall','International Reputation','Position']]\n\nInttop(5)                                                   ","18003eb5":"df[(df['Skill Moves'] == 5)][['Name','Nationality','Club','Overall','Skill Moves','Position']].head(5)","74e7ac36":"pr_cols=['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\ni=0\nwhile i < len(pr_cols):\n    print('Best {0} : {1}'.format(pr_cols[i],df.loc[df[pr_cols[i]].idxmax()][0]))\n    i += 1","921b61bd":"df[df['Preferred Foot'] == 'Left'][['Name', 'Age', 'Club', 'Nationality']].head(5)","a932e3a9":"df[df['Preferred Foot'] == 'Right'][['Name', 'Age', 'Club', 'Nationality']].head(5)","8a4bd69a":"df.groupby(df['Club'])['Nationality'].nunique().sort_values(ascending = False).head(5)","708afec5":"def club(x):\n    return df[(df['Club'] == x)][['Name','Age','Nationality','Overall','Potential','Position','Value','Wage']]\n\nclub('Manchester City').head(15)","2c27104e":"def team(x):\n    return df[(df['Nationality'] == x)][['Name','Age','Club','Overall','Potential','Position','Value','Wage']]\n\nteam('Belgium').head(15)","ed3eb2ac":"df[['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',\n       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',\n       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']].head()","9099594a":"def skillConverter(val):\n    if type(val) == str:\n        s1 = val[0:2]\n        s2 = val[-1]\n        val = int(s1) + int(s2)\n        return val\n    \n    else:\n        return val","fb416904":"skill_columns = ['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',\n       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',\n       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']\n                      \nfor col in skill_columns:\n    df[col] = df[col].apply(skillConverter)","ded8b7ee":"df[['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',\n       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',\n       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']].head()","3f5ab9b1":"df[['Height', 'Weight']].head()","597c7064":"def height_converter(val):\n    f = val.split(\"'\")[0]\n    i = val.split(\"'\")[1]\n    h = (int(f) * 30.48) + (int(i)*2.54)\n    return h\n\ndef weight_converter(val):\n    w = int(val.split('lbs')[0])\n    return w","27312593":"df['Height in Cms'] = df['Height'].apply(height_converter)\ndf['Weight in Pounds'] = df['Weight'].apply(weight_converter)\n\ndf.drop(columns=['Height', 'Weight'], inplace=True)\ndf[['Height in Cms', 'Weight in Pounds']].head()","cb307cdb":"#Below is the reason for splitting the players into the above mentioned categories\nprint(df['Position'].unique())\nprint(df['Position'].nunique())","3bdd815c":"def position_simplifier(val):\n    \n    if val == 'RF' or val == 'ST' or val == 'LF' or val == 'RS' or val == 'LS' or val == 'CF' or val == 'RW' or val == 'LW':\n        val = 'F'\n        return val\n        \n    elif val == 'RCM' or val == 'LCM' or val == 'LDM' or val == 'CAM' or val == 'CDM' or val == 'RM' or val == 'LAM' or val == 'LM' or val == 'RDM' or val == 'CM' or val == 'RAM':\n        val = 'M'\n        return val\n\n    \n    elif val == 'RCB' or val == 'CB' or val == 'LCB' or val == 'LB' or val == 'RB' or val == 'RWB' or val == 'LWB':\n        val = 'D'\n        return val\n    \n    else:\n        return val","9792411a":"df['Position'] = df['Position'].apply(position_simplifier)\ndf['Position'].value_counts()","b920b719":"df[(df['Position'] == 'F') & (df['Overall'] > 90)]","7db20413":"df[(df['Position'] == 'M') & (df['Overall'] > 90)]","2bdd236d":"df[(df['Position'] == 'D') & (df['Overall'] > 90)]","8d4f81e3":"df[(df['Position'] == 'GK') & (df['Overall'] > 90)]","4e9ef820":"df[df['Age']<20].sort_values(by = 'Potential' , ascending = False).head()","1565e739":"sns.distplot(df['Age'],kde=False,bins=30)\nplt.title('Distribution of Age among players',fontsize = 15)\nplt.show()","f65ad3bf":"sns.countplot(x='Preferred Foot' , hue = 'Position' , hue_order = ('GK','D','M','F') , data = df)\nplt.title('Most Preferred Foot of the Players', fontsize = 15)\nplt.show()","6a1a19d7":"labels = df[['Name','Finishing']].head(10)\nvalues = df['Finishing'].head(10)\ncolors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.update_traces(hoverinfo='label', textinfo='percent', textfont_size=10,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title_text=\"Distribution of Finishing rating of Top 10 Players\")\nfig.show()","07170425":"fig = plt.figure(figsize = (12,8))\nsns.heatmap(df.corr(),cmap='coolwarm')\nplt.title('Fifa Correlation of variables',fontsize = 15)","b7cbdf96":"fig = plt.figure(figsize = (14,8))\nsns.boxplot(x='Age',y='Overall',data=df , palette = 'rainbow')\nplt.title('Age Vs Overall Rating distribution',fontsize = 15)","5844d466":"rating = pd.DataFrame(df.groupby(['Nationality'])['Overall'].sum().reset_index())\ncount = pd.DataFrame(rating.groupby('Nationality')['Overall'].sum().reset_index())\n\ntrace = [go.Choropleth(\n            colorscale = 'YlOrRd',\n            locationmode = 'country names',\n            locations = count['Nationality'],\n            text = count['Nationality'],\n            z = count['Overall'],\n)]\n\nlayout = go.Layout(title = '<b>Country vs Ratings<\/b>')\n\nfig = go.Figure(data = trace, layout = layout)\npy.iplot(fig)","ab1e07d8":"df_nations = df.groupby(by='Nationality').size().reset_index()\ndf_nations.columns = ['Nation', 'Count']","456a40ab":"df_nations[(df_nations['Nation'] == 'England') | (df_nations['Nation'] == 'Wales') \n           | (df_nations['Nation'] == 'Scotland') | (df_nations['Nation'] == 'Northern Ireland') ]","d260be7c":"df_temp = pd.DataFrame(data= [['United Kingdom', 2148]], columns=['Nation', 'Count'])\ndf_nations = df_nations.append(df_temp, ignore_index=True)\ndf_nations.tail()","29789a1a":"trace2 = dict(type='choropleth',\n              locations=df_nations['Nation'],\n              z=df_nations['Count'],\n              locationmode='country names',\n              colorscale='Portland'\n             )\n\nlayout = go.Layout(title='<b>Number of Players in each Country<\/b>',\n                   geo=dict(showocean=True,\n                            oceancolor='#AEDFDF',\n                            projection=dict(type='natural earth'),\n                        )\n                  )\n\nfig = go.Figure(data=[trace2], layout=layout)\npy.iplot(fig)","a9ea6906":"palette = sns.cubehelix_palette(light=.8, n_colors=6)\nsns.relplot(x = 'Weight in Pounds' , y = 'Height in Cms' , hue = 'Position',style = 'Preferred Foot', kind= 'line' , data = df ,ci = \"sd\" ,dashes = False , markers = True )\nplt.title('Height vs Weight based on Player position and Preferred Foot', fontsize = 15)\nplt.show()","fdec3126":"ndf = df[['Position' , 'Crossing' , 'Finishing' , 'SlidingTackle' , 'GKDiving' , 'HeadingAccuracy']]\ng = sns.PairGrid(ndf , hue = 'Position')\ng.map_diag(plt.hist,edgecolor = 'w')\ng.map_offdiag(plt.scatter,edgecolor = 'w')\ng.add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Special Attributes distribution of players based on their Position')","1a37834b":"g = sns.FacetGrid(df, col=\"Position\", row=\"Preferred Foot\",hue = 'International Reputation' ,margin_titles=True)\ng = (g.map(plt.scatter, \"Wage\", \"Value\").add_legend())\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Player Value and Wage distribution according to International Reputation based on players position and preferred foot')","9f71d423":"g = sns.FacetGrid(df, col=\"Position\",  row=\"Preferred Foot\",margin_titles=True , hue = 'Skill Moves')\ng = (g.map(plt.hist, \"Overall\").add_legend())\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Overall distribution according to skill moves based on players position and preferred foot')","4f686a2e":"# Players with highest International reputation","def7a36a":"# Lets see the youngest player","6138335b":"# Top 5 Right Footed players","c90d9505":"# The best in the business","527de952":"# FIFA 2019 PLAYERS DATA ANALYSIS AND VISUALIZATION","c6addc80":"# I'm a Manchester City Fan and I want the details of the players in the club","341c356c":"# Young Potential players","92fc929a":"# Money Money Money","e530be50":"# Another function to convert Height and Weight columns to numerical format","5cd7d8d2":"# Highly skilled players","4837f394":"# Top Goal Keeper","c88da953":"# And the highest earning players are","b0a8c462":"# Now to my fav International Team BELGIUM","7717c654":"# Lets write a function to covert skills column which are in the str format","7db5817c":"Adding values of England, Northern Ireland, Scotland and Wales under United Kingdom as our choropleth map considers the following countries as a whole which is included in the United Kingdom.","2e4c2621":"My recent addiction towards the beautiful game of football was the reason behind this notebook.\n\nI have tried my best to keep this notebook as simple as possible so that even a beginner can understand it easily. At the same time I have made efforts to analyse the dataset in different aspects effectively. \nHave a look into my kernel and please do upvote if you liked it :)\n\nThe notebook contains:\n\n*     Data Analysis in the first half \n*     Data Visualization in the other half\n\nI have used the following packages for visualizations:\n\n*     Matplotlib\n*     Seaborn\n*     Plotly","1f3415b5":"# Players with overall rating of 90 and above","9d5ab049":"# Total no of Internationational Teams and Clubs ","1fbb61f4":"# Now , lets see the other way - The eldest one ","48449235":"Yayyyy , we finally found England :P","1c834c69":"To be continued ...\n\n**Thanks for your time , please do upvote the kernel if you have liked it **","47cdc536":"# Dealing with missing values","20559ed8":"# Top Forward players","09e6a982":"# Lets move on to visualization","c54ea69d":"# Splitting the players into four categories namely (F - Forward , M - Midfielder , D - Defender , GK - Goal Keeper) according to their position ","0a09c905":"# Removing less significant column","ee34177a":"# Top 5 Left Footed players","3f43a855":"# Top Midfielders","f426388e":"# Now lets begin our Data Analysis ","2656828d":"# Clubs with highest number of different country players","3b573278":"# lets see the top 5 most valued players ","a418c3a0":"# Top Defender","7e36d448":"OOPS , where is England ? Check below for the magic :P","d343f6c1":"# The above features wont affect the goal keeper , so lets fill these values with 0 instead of dropping the rows"}}