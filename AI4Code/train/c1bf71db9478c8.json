{"cell_type":{"f9dcb6ee":"code","e244c81e":"code","20c43d5b":"code","2a882bf7":"code","1d4733be":"code","b78b0696":"code","1a101294":"code","533c00a6":"code","7deb9e3a":"code","609f84ef":"code","87e4fb09":"code","224629dd":"code","8f1e50ff":"markdown","149d1772":"markdown","f63f1769":"markdown","fb21cdf7":"markdown","838e4637":"markdown","d4719c90":"markdown","da8d1df7":"markdown"},"source":{"f9dcb6ee":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","e244c81e":"# Load the data\ndf = pd.read_csv('..\/input\/us-quarterly-personal-income-1948-2020\/us_quarterly_personal_income_1948_2020.csv')\ndf.shape","20c43d5b":"# Take a look at the data\ndf.head()","2a882bf7":"# Get all the rows from the original df that match the state we want\nnew_df = df[df['GeoName'] == \"California\"]\nnew_df.head()","1d4733be":"# Pick the row (category), we're interested in. In this case, we do Personal Income by using the index of 100\nnew_row = df.iloc[[100]]\nnew_row.head()","b78b0696":"# Make DF to pivot the columns into rows\nnew_df = pd.DataFrame(columns = ['year','Q1','Q2','Q3','Q4'])\n\n# Loop through the years and get the quartly values from each column\nfor year in range(1948,2020):\n    year = str(year)\n    df2 = pd.DataFrame(new_row[[year + ':Q1',year + ':Q2',year + ':Q3',year + ':Q4']].astype('float'))\n\n    df2.columns = ['Q1','Q2','Q3','Q4']\n    df2.insert(0, 'year', year)\n    new_df = pd.concat([new_df,df2], ignore_index=True, axis=0)\n    \nnew_df.head()","1a101294":"# Sum the quarterly amounts\nnew_df['total'] = new_df[['Q1','Q2','Q3','Q4']].sum(axis=1)\nnew_df.head()","533c00a6":"# Plot the Annual Personal Income by year for California\nplt.figure(figsize = (12,5))\nplot = sns.lineplot(data=new_df, x='year', y='total');\nplt.title(\"California - Annual Personal Income (in millions)\")\nplt.xticks(rotation=45)\nplt.show()","7deb9e3a":"# Get all the rows from the original df that match the state we want\nnew_df = df[df['GeoName'] == \"West Virginia\"]\nnew_df.head()","609f84ef":"# Pick the row (category), we're interested in. In this case, we do Personal Income again by using the index of 980\nnew_row = df.iloc[[980]]\nnew_row.head()","87e4fb09":"# Make DF to pivot the columns into rows .. This is the same as the previous step .. it could be a function\nnew_df = pd.DataFrame(columns = ['year','Q1','Q2','Q3','Q4'])\n\n# Loop through the years and get the quartly values from each column\nfor year in range(1948,2020):\n    year = str(year)\n    df2 = pd.DataFrame(new_row[[year + ':Q1',year + ':Q2',year + ':Q3',year + ':Q4']].astype('float'))\n\n    df2.columns = ['Q1','Q2','Q3','Q4']\n    df2.insert(0, 'year', year)\n    new_df = pd.concat([new_df,df2], ignore_index=True, axis=0)\n    \nnew_df.head()\n\n# Sum the quarterly amounts\nnew_df['total'] = new_df[['Q1','Q2','Q3','Q4']].sum(axis=1)\nnew_df.head()","224629dd":"# Plot the Annual Personal Income by year for the state of West Virginia\nplt.figure(figsize = (12,5))\nplot = sns.lineplot(data=new_df, x='year', y='total')\nplt.title(\"West Virginia - Annual Personal Income (in millions)\")\nplt.xticks(rotation=45)\nplt.show()","8f1e50ff":"- Various tables from different categories or areas can be created to do comparative analysis between areas or industry types etc.\n\n- This is a simple example but the technique can be used on most of the datasets from BEA","149d1772":"- Let's grab another state and compare. We'll use West Virginia.","f63f1769":"Now we'll sum up the columns and add a total for the year.","fb21cdf7":"### Working with BEA DATA\n\nThe Bureau of Economic Analysis (https:\/\/bea.gov) serves a ton of nice economic data for the US.\n\nTheir data usually comes with several tables crunched into one file.\n\nThis file has 1204 rows and 300 columns.\n\nThe rows represent three area categories .. United States, Region, and State.\n\nThere are 20 rows for each of the three area categories.\n\nEach row represents one of the following categories:\n- Personal income (millions of dollars, seasonally adjusted)\n- Nonfarm personal income\n- Farm income\n- Population (midperiod, persons)\n- Per capita personal income (dollars)\n- Earnings by place of work\n- Less: Contributions for government social insurance\n- Employee and self-employed contributions for government social insurance\n- Employer contributions for government social insurance\n- Plus: Adjustment for residence\n- Equals: Net earnings by place of residence\n- Plus: Dividends, interest, and rent\n- Plus: Personal current transfer receipts\n- Wages and salaries\n- Supplements to wages and salaries\n- Employer contributions for employee pension and insurance funds\n- Employer contributions for government social insurance\n- Proprietors' income\n- Farm proprietors' income\n- Nonfarm proprietors' income\n\nThe columns are:\n- GeoFIPS\n- GeoName - Geographical location (United States, Region or State)\n- Region - (1-8)\n- TableName - Original BEA table name\n- LineCode - (10-72) BEA code\n- IndustryClassification \n- Description - Describes each row\n- Unit \n- 1948:Q1 through 2020:Q4 - These are the individual quarter values","838e4637":"Looking at the first few rows, we can see that the data needs to be extracted into individual dataframes to be more usable.\n\nThe GeoName column specifies whether the row represents the United States, or a single state. Let's get some rows for California.","d4719c90":"We'll extract a single row, then convert the columns into a better DF. In this case, we'll get the Personal Income row. This represents the number of dollars in millions earned by individuals.","da8d1df7":"Now we have 72 rows and 6 columns of Quarterly Personal Income by year in California, including the yearly total."}}