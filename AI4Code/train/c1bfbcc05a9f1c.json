{"cell_type":{"9b2cfc0a":"code","2ed17f9d":"code","f19000b5":"code","bffdc9d4":"code","ec92179c":"code","872fb68a":"code","4738adab":"code","e9428867":"code","3acb97f7":"code","c7dd0bfd":"code","6da84037":"markdown","6c9ee1a8":"markdown","7137fd95":"markdown","3481cba1":"markdown","496a14f3":"markdown"},"source":{"9b2cfc0a":"# \u30c7\u30fc\u30bf\u64cd\u4f5c\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nimport pandas as pd\n\n# \u30c7\u30fc\u30bf\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","2ed17f9d":"# \u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3001\u7279\u5fb4\u91cf\u3001\u30c7\u30fc\u30bf\u578b\u306a\u3069\u3092\u78ba\u8a8d\n# object\u578b\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001category\u578b\u306b\u5f8c\u3005\u5909\u63db\u3059\u308b\ntrain.info()","f19000b5":"# \u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3001\u7279\u5fb4\u91cf\u3001\u30c7\u30fc\u30bf\u578b\u306a\u3069\u3092\u78ba\u8a8d\n# object\u578b\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001category\u578b\u306b\u5f8c\u3005\u5909\u63db\u3059\u308b\ntest.info()","bffdc9d4":"# object\u578b\u3092category\u578b\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\ndef categorize(x):\n    object_columns = x.select_dtypes(include='object').columns\n    x[object_columns] = x[object_columns].astype('category')\n    \n    print(f'complited data categorization')\n    \n\n# object\u578b\u3092category\u578b\u306b\u5909\u63db\ncategorize(train)\ncategorize(test)","ec92179c":"# \u30c7\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u3051\u308b\ntrain_x = train.drop(columns='SalePrice')\ntrain_y = train['SalePrice']\n\n# \u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u7528(tr_x, tr_y)\u3068\u8a55\u4fa1\u7528(val_x, val_y)\u306b\u5206\u3051\u308b\nfrom sklearn.model_selection import train_test_split\ntr_x, val_x = train_test_split(train_x, test_size=0.3)\ntr_y, val_y = train_test_split(train_y, test_size=0.3)","872fb68a":"# \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\nrandom_seed = 12345\nparams = {\n    # \u4e88\u6e2c\u624b\u6cd5\u3068\u3057\u3066\u56de\u5e30\u3092\u9078\u629e\n    'objective': 'regression',\n    # loss\u306flogloss\n    'metric': 'rmse',\n    # \u5b66\u7fd2\u7387\uff08\u30c7\u30d5\u30a9\u30eb\u30c80.1\uff09\n    'learning_rate': 0.05,\n    # \u6728\u306e\u6df1\u3055\u3001-1\u3060\u3068\u5236\u9650\u7121\u3057\uff08\u30c7\u30d5\u30a9\u30eb\u30c8-1\uff09\n    'max_depth': -1,\n    # \u4e71\u6570\u3092\u56fa\u5b9a\n    'random_seed': random_seed,\n    # \u5b66\u7fd2\u3059\u308b\u56de\u6570\uff08\u30c7\u30d5\u30a9\u30eb\u30c8100\uff09\n    'num_boost_round': 1000,\n    # \u7cbe\u5ea6\u304c\u4e0a\u304c\u3089\u306a\u304f\u306a\u3063\u305f\u3089\u5b66\u7fd2\u3092\u6253\u3061\u5207\u308b\n    'early_stopping_rounds': 50,\n    # \u5b66\u7fd2\u9014\u4e2d\u3092\u8868\u793a\u3059\u308b\u9593\u9694\n    'verbose_eval': 10\n}","4738adab":"# \u6a5f\u68b0\u5b66\u7fd2\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nimport lightgbm as lgb\n\n# \u30c7\u30fc\u30bf\u3092\u30e2\u30c7\u30eb\u306b\u30bb\u30c3\u30c8\ntrain_data = lgb.Dataset(tr_x, label=tr_y)\nval_data = lgb.Dataset(val_x, label=val_y, reference=train_data)\n\n# train\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\ngbm_reg = lgb.train(params, train_data, valid_sets=val_data)","e9428867":"# \u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\nval_pred = gbm_reg.predict(val_x, num_iteration=gbm_reg.best_iteration)\n\n# \u6bd4\u8f03\u306e\u305f\u3081\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\ntr_pred = gbm_reg.predict(tr_x, num_iteration=gbm_reg.best_iteration)\n\n# RMSE\u3092\u8a08\u7b97\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error\n\ndef calc_rmse(x, y):\n    mse = mean_squared_error(x, y)\n    rmse = np.sqrt(mse)\n    \n    return rmse\n\n# train\u30c7\u30fc\u30bf\u3068validation\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\nprint (f'Training RMSE:{calc_rmse(tr_y, tr_pred)}',f'Validation RMSE:{calc_rmse(val_y, val_pred)}')","3acb97f7":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\ntest_pred = gbm_reg.predict(test)\nprint(f'Test Score:{gbm_reg.predict(test)}')","c7dd0bfd":"# \u63d0\u51fa\u7528\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\nsubmission = pd.DataFrame({\n    'Id': test['Id'],\n    'SalePrice': test_pred\n})\n\n# \u63d0\u51fa\u7528csv\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\nsubmission.to_csv('submission.csv', index=False)","6da84037":"## \u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u5206\u6790\u30fb\u524d\u51e6\u7406\n- \u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u628a\u63e1\u3057\u3001\u30e2\u30c7\u30eb\u3067\u6271\u3048\u308b\u3088\u3046\u306a\u5909\u63db\u3068\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306e\u51e6\u7406\u3092\u884c\u3046\n- \u30e2\u30c7\u30eb\u8a55\u4fa1\u3067\u7cbe\u5ea6\u304c\u4f4e\u3051\u308c\u3070\u3053\u3053\u3078\u623b\u3063\u3066\u524d\u51e6\u7406\u3092\u884c\u3046","6c9ee1a8":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306e\u4e88\u6e2c\u3068\u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210","7137fd95":"### \u30e2\u30c7\u30eb\u8a55\u4fa1","3481cba1":"## \u30e2\u30c7\u30eb\u8a55\u4fa1\u306e\u6e96\u5099\uff08hold-out\u6cd5ver\uff09","496a14f3":"### \u30e2\u30c7\u30eb\u4f5c\u6210\uff08\u5b66\u7fd2\uff09"}}