{"cell_type":{"37023bd8":"code","f4ab4052":"code","096825a4":"code","5afc32d4":"code","70b898d4":"code","090371f5":"code","ef9eea54":"code","43129fc5":"code","32582e9e":"code","6364e69e":"code","3d8906aa":"code","29442fd0":"code","be1a03f8":"code","a5b46a10":"code","f575b117":"code","9865a219":"code","fe22c20c":"code","ce7c6ae0":"code","82ed6f6b":"code","7f1218f4":"code","85dc2868":"code","2923ba63":"code","97cf4bfb":"code","0525cf91":"markdown","e2e770cc":"markdown","c805a7c1":"markdown","da72165d":"markdown"},"source":{"37023bd8":"from sklearn.model_selection import train_test_split\nimport cv2\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.preprocessing.image import img_to_array","f4ab4052":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","096825a4":"train_df=pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/train.csv')\ntest_df=pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/test.csv')","5afc32d4":"train_df.head()","70b898d4":"target_df = train_df[['healthy', 'multiple_diseases', 'rust', 'scab']]\ntest_ids = test_df['image_id']","090371f5":"img_size = 300\n\ntrain_imgs = []\n\nfor name in train_df['image_id']:\n    path = '..\/input\/plant-pathology-2020-fgvc7\/images\/' + name + '.jpg'\n    img = cv2.imread(path)\n    image = cv2.resize(img,(img_size,img_size),interpolation=cv2.INTER_AREA)\n    train_imgs.append(image)","ef9eea54":"fig, ax = plt.subplots(1, 4, figsize=(15, 15))\nfor i in range(4):\n    ax[i].set_axis_off()\n    ax[i].imshow(train_imgs[i])","43129fc5":"test_imgs = []\nfor name in test_df['image_id']:\n    path = '..\/input\/plant-pathology-2020-fgvc7\/images\/' + name + '.jpg'\n    img = cv2.imread(path)\n    image = cv2.resize(img,(img_size,img_size),interpolation=cv2.INTER_AREA)\n    test_imgs.append(image)","32582e9e":"fig, ax = plt.subplots(1, 4, figsize=(15, 15))\nfor i in range(4):\n    ax[i].set_axis_off()\n    ax[i].imshow(test_imgs[i])    ","6364e69e":"X_train = np.ndarray(shape=(len(train_imgs), img_size, img_size, 3),dtype = np.float32)\n\nfor i, image in enumerate(train_imgs):\n    X_train[i] = img_to_array(image)\n    X_train[i] = train_imgs[i]\n\nX_train = X_train\/255\nprint('Train Shape: {}'.format(X_train.shape))","3d8906aa":"X_test = np.ndarray(shape=(len(test_imgs), img_size, img_size, 3),dtype = np.float32)\n\nfor i, image in enumerate(test_imgs):\n    X_test[i] = img_to_array(image)\n    X_test[i] = test_imgs[i]\n    \nX_test = X_test\/255\nprint('Test Shape: {}'.format(X_test.shape))","29442fd0":"y_train = train_df.copy()\ndel y_train['image_id']\ny_train.head()","be1a03f8":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n\nX_train.shape, X_val.shape","a5b46a10":"from keras.callbacks import ReduceLROnPlateau\nfrom keras.callbacks import EarlyStopping\nfrom keras.callbacks import ModelCheckpoint\n\nlr_reduce=ReduceLROnPlateau(monitor='val_accuracy',\n                            factor=.25,\n                            patience=3,\n                            min_lr=.000001,\n                            verbose=1)\n\nes_monitor=EarlyStopping(monitor='val_loss',\n                          patience=5)\n\nmdl_check = ModelCheckpoint('best_model.h5', \n                            monitor='accuracy', \n                            verbose=0, \n                            save_best_only=True, \n                            mode='max')","f575b117":"!pip install efficientnet","9865a219":"import efficientnet.keras as efn \nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D","fe22c20c":"net =efn.EfficientNetB3(weights='imagenet', include_top=False, input_shape=(img_size,img_size,3))\nx = net.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(128, activation=\"relu\")(x)\nx = Dense(64, activation=\"relu\")(x)\npredictions = Dense(4, activation= 'softmax')(x)\nmodel = Model(inputs = net.input, outputs = predictions)","ce7c6ae0":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","82ed6f6b":"from keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(horizontal_flip=True,\n    vertical_flip=True,\n    rotation_range=20,\n    width_shift_range=0.15,\n    height_shift_range=0.15,\n    zoom_range=.1,\n    rescale=1\/255,\n    fill_mode='nearest',\n    shear_range=0.1,\n    brightness_range=[0.5, 1.5])","7f1218f4":"history = model.fit_generator(datagen.flow(X_train, y_train, batch_size=16),\n                              epochs = 20,\n                              steps_per_epoch = X_train.shape[0] \/\/ 16,\n                              verbose = 1,\n                              callbacks = [es_monitor,lr_reduce, mdl_check],\n                              validation_data = datagen.flow(X_val, y_val,batch_size=16),\n                              validation_steps = X_val.shape[0] \/\/ 16)","85dc2868":"h = history.history\n\noffset = 5\nepochs = range(offset, len(h['loss']))\n\nplt.figure(1, figsize=(12, 12))\n\nplt.subplot(211)\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.plot(epochs, h['loss'][offset:], label='train')\nplt.plot(epochs, h['val_loss'][offset:], label='val')\nplt.legend()\n\nplt.subplot(212)\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.plot(h[f'accuracy'], label='train')\nplt.plot(h[f'val_accuracy'], label='val')\nplt.legend()\n\nplt.show()","2923ba63":"y_pred = model.predict(X_test)","97cf4bfb":"sub_df = pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv')\nsub_df.loc[:, 'healthy':] = y_pred\nsub_df.to_csv('submission.csv', index=False)\nsub_df.head()","0525cf91":"**Split training set**","e2e770cc":"**Set Callbacks**","c805a7c1":"**Image Data Augmentation and fit model**","da72165d":"**Image processing**"}}