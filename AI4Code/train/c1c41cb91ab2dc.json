{"cell_type":{"cab15cad":"code","d1b3dfdf":"code","0f304a45":"code","c32c0760":"code","e35f2991":"code","68bbd10a":"code","6a3668af":"code","c856b001":"code","07825531":"code","796ac66d":"code","27dbe97a":"code","07b4c30d":"code","0902c49e":"code","839262e6":"code","7c60534f":"code","963524d4":"code","295fcc30":"code","ff0d1877":"code","1da5f194":"code","dde0a348":"code","9c7b942c":"code","04026322":"code","b8675bef":"code","7bfed847":"code","9807932a":"code","64ec6d96":"code","d3b040d9":"code","86e9f275":"code","1e775d3e":"markdown","9b7082e2":"markdown","199ade10":"markdown"},"source":{"cab15cad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1b3dfdf":"pd.pandas.set_option('display.max_columns',None)\ndf=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ndf.head()","0f304a45":"import seaborn as sns\nimport matplotlib.pyplot as plt","c32c0760":"df.isnull().sum()","e35f2991":"catagatical=[feature for feature in df.columns if df[feature].dtypes=='O']\ncatagatical","68bbd10a":"numerical=[feature for feature in df.columns  if df[feature].dtypes!='O']\ndf[numerical].head()","6a3668af":"#chcek discrete feature\ndiscrete=[feature for feature in numerical if len(df[feature].unique())<25]\ndiscrete","c856b001":"#chrck continous features\ncontinous=[feature for feature in numerical if feature not in discrete  ]\ncontinous","07825531":"#analuze continous values by plotting hiatogram\nfor feature in continous:\n    data=df.copy()\n    data[feature].hist(bins=30)\n    plt.xlabel(feature)\n    plt.ylabel('Class')\n    plt.title(feature)\n    plt.show()\n    ","796ac66d":"import scipy.stats as stats\ndef diagnostic_plots(df, variable):\n    # function to plot a histogram and a Q-Q plot\n    # side by side, for a certain variable\n    \n    plt.figure(figsize=(15,6))\n    plt.subplot(1, 2, 1)\n    df[variable].hist()\n\n    plt.subplot(1, 2, 2)\n    stats.probplot(df[variable], dist=\"norm\", plot=plt)\n\n    plt.show()\n","27dbe97a":"for feature in continous:\n    data[feature]=np.log(data[feature]+1)\n    diagnostic_plots(data,feature)","07b4c30d":"#check outliers\nfor feature in continous:\n    data=df.copy()\n    if 0 in df[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(df[feature])\n        data.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()\n     \n   ","0902c49e":"X=df.drop(['Class'],axis=1)\nX","839262e6":"y=df['Class']\ny","7c60534f":"#check imbalalencing\nLABELS=['Normal','Fraud']\nimport matplotlib.pyplot as plt\ncount_classes = pd.value_counts(df['Class'], sort = True)\ncount_classes.plot(kind = 'bar', rot=0)\nplt.title(\"Transaction Class Distribution\")\nplt.xticks(range(2), LABELS)\nplt.xlabel(\"Class\")\nplt.ylabel(\"Frequency\")","963524d4":"#from above graph we see that data imbalencing is much more so covert them into balenced dataset\n#to check it in values use following piece of code\n\nfraud = df[df['Class']==1]\nnormal = df[df['Class']==0]\nprint(fraud.shape,normal.shape)","295fcc30":"from imblearn.combine import SMOTETomek\nfrom imblearn.under_sampling import NearMiss\n","ff0d1877":"# Implementing Oversampling for Handling Imbalanced \nsmk = SMOTETomek(random_state=42)\nX_res,y_res=smk.fit_sample(X,y)","1da5f194":"X_res.shape,y_res.shape","dde0a348":"from collections import Counter\nprint('Original dataset shape {}'.format(Counter(y)))\nprint('Resampled dataset shape {}'.format(Counter(y_res)))","9c7b942c":"count=pd.value_counts(y_res)\ncount.plot(kind='bar',rot=0,color=['violet'])\n","04026322":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test=train_test_split(X_res,y_res,test_size=0.20,random_state=0)","b8675bef":"from sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=5)\nknn","7bfed847":"knn.fit(X_train,y_train)","9807932a":"y_pred=knn.predict(X_test)\ny_pred","64ec6d96":"from sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.model_selection import cross_val_score","d3b040d9":"print(confusion_matrix(y_test,y_pred))","86e9f275":"print(classification_report(y_test,y_pred))","1e775d3e":"* Data imbalencing","9b7082e2":"**check catagarical feature**","199ade10":"*  from above histograms we see the complete skewness in the data \n* So apply logarithemic trasnformation to handle this skewness"}}