{"cell_type":{"87c1facb":"code","102ea4e2":"code","ca8ce7dc":"code","02038809":"code","d5d51fb3":"code","2fe27d05":"code","6d844ff0":"code","12b968a0":"code","ea797916":"code","d7dddc79":"code","81832e94":"code","fa933e1f":"code","204d898b":"markdown","0f4f77c1":"markdown","6b11024e":"markdown","6135265f":"markdown","6475e6f8":"markdown","e12d48d3":"markdown","ed831d3f":"markdown","901f2edb":"markdown","626f3e67":"markdown"},"source":{"87c1facb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n# import the dataset with international Results\ndf_intStats = pd.read_csv('..\/input\/international-football-results-from-1872-to-2017\/results.csv')","102ea4e2":"df_intStats.shape","ca8ce7dc":"df_intStats.head(5)","02038809":"# 1) Set Index do Date\ndf_intStats = df_intStats.set_index('date')\n# Change datatype of index from object to datetime\ndf_intStats.index = pd.to_datetime( df_intStats.index, format= '%Y.%m.%d')\n# check datatype\ndf_intStats.index","d5d51fb3":"# 2) frame the timestamp an sclice the date range\nfrom datetime import datetime\nstart = datetime(day=1, month=1, year=2017)\nend = datetime(day=13, month=6, year=2021)\ndf_intStats = df_intStats[start:end]\n\n\n# test\n# df_intStats.shape\ndf_intStats.index.min()","2fe27d05":"# 3) Reduce the DataFrame by the Teams that participate on the EU Cup 2021\n\n# create List of the teams\nteams = ['Belgium','Denmark', 'Germany', 'England', 'Finland ', 'France', 'Croatia', 'Italy', 'Netherlands', 'Austria', 'Poland', 'Portugal', 'Russia', 'Sweden', 'Switzerland', 'Spain', 'Czech Republic', 'Turkey', 'Ukraine', 'Wales', 'Northern Macedonia', 'Scotland', 'Slovakia', 'Hungary' ]\n\n# select only the rows with the which includes the teams that participate\ndf_filtered_teams = df_intStats.loc[df_intStats['home_team'].isin(teams) & df_intStats['away_team'].isin(teams)] \ndf_filtered_teams.shape\n\n# test the selection \n# df_filtered_teams['home_team'].value_counts()\n# df_filtered_teams['home_team'].value_counts().sum()\n# df_filtered_teams['away_team'].value_counts()\n","6d844ff0":"# 4 visualize the performance of winnings by the teams\n# Create Dataframe with Country names\ndf_team_score = pd.DataFrame()\n\ndf_team_score = df_filtered_teams[['home_team', 'away_team', 'home_score', 'away_score']]\n\ndf_team_score = df_team_score.groupby(['home_team']).sum()\ndf_team_score.head(30)","12b968a0":"# figure size in inches\nrcParams['figure.figsize'] = 13,4\n\ndf_team_score_home = df_team_score['home_score'].sort_values(ascending=False)\nax = df_team_score_home.plot.bar(color=\"red\")","ea797916":"# figure size in inches\nrcParams['figure.figsize'] = 13,4\n\ndf_team_score_away = df_team_score['away_score'].sort_values(ascending=False)\nax = df_team_score_away.plot.bar(color=\"green\")","d7dddc79":"df_filtered_teams.head()","81832e94":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\n\nteams_awayMax = ['France', 'Spain', 'Belgium', 'Germany','Russia']\n\n# figure size in inches\nrcParams['figure.figsize'] = 13,4\n\nfor team in teams_awayMax:\n    \n    df_team = df_filtered_teams[df_filtered_teams['away_team'].str.contains(team,case=True)]\n    GradientScore = (df_team['away_score'].sum()) \/ 2\n    sns.lineplot(data=df_team, x=\"date\", y=\"away_score\", hue='away_team', style='away_team',  markers=True, dashes=False)\n    plt.xticks(rotation=75)\n    plt.title('Top 5 teams performance in away games from 2017 to 2021')\n    plt.show()\n    print(\"Team: \" + team)\n    print(\"Gradient: \" + GradientScore.astype('str'))","fa933e1f":"teams_homeMax = ['Russia', 'Germany', 'Scotland', 'France', 'Hungary']\n\n# figure size in inches\nrcParams['figure.figsize'] = 13,4\n\nfor team in teams_homeMax:\n    \n    df_team = df_filtered_teams[df_filtered_teams['home_team'].str.contains(team,case=True)]\n    GradientScore = (df_team['home_score'].sum()) \/ 2\n    sns.lineplot(data=df_team, x=\"date\", y=\"home_score\", hue='home_team', style='home_team',  markers=True, dashes=False)\n    plt.xticks(rotation=75)\n    plt.title('Top 5 teams performance in home games from 2017 to 2021')\n    plt.show()\n    print(\"Team: \" + team)\n    print(\"Gradient: \" + GradientScore.astype('str'))","204d898b":"## Exploratory Data Analysis\nLet's have a first look in the .csv","0f4f77c1":"df_filtered_teams_france = df_filtered_teams[df_filtered_teams['home_team'].str.contains('France',case=False)]\n## First Conclusion\n\nThe first 5 teams with the top score in away games, in the last 4 years, are: \n1. France \n1. Spain \n1. Belgium  \n1. Germany\n1. Russia\n\nThe first 5 teams with the top score in home games, in the last 4 years, are: \n1. Russia\n1. Germany\n1. Scotland\n1. France \n1. Hungary","6b11024e":"## THird Analysis\n\n## Machine Learning and Prediction\n### how to predict","6135265f":"## Data Analysis II \nLets go deeper and try to answer follwing questions:\n1. How is the performance of goals of the top 5 over the last 4 years? (Lineplot)\n1. Are there interesting peaks and falls in the performance?","6475e6f8":"## Second Conclusion\nAfter Plotting the performance of the top five teams in the categorie \"home game\" and \"away game\", I select the top 2 with the highest Gradient Faktor in the last two years.\nThe Gradient is the sum of the goals over devided by the last two years.  \n\nThis is for the **home Team**:\n\n**1. Spain with a Gradient of 11.0\n2. Belgium with a Gradient of 11.0**\n\nThis is for the **away Team**:\n1. France with a Gradient of 20.5 \n2. Russia and Germnay with a Gradient of 12.5\n\nSo now I have a selection of the best performing 5 Teams from the the Teams with the most Goals.  ","e12d48d3":"## Data Preparation\nTo get an understanding of the data first the data needs to be prepared.\n\n### Steps of Data Preparation\n1. change Dataframe-index to timestamp-index \n2. Reduce the Dataframe time range from 2017 - 2021\n3. Reduce the DataFrame by the Teams that participate on the EU Cup 2021\n4. Visualize thte Performace of winnings by the teams\n","ed831d3f":"## Data Analysis I\nnow the data is in the dataframe df_filtered_teams in good format to analyse. I will do the following steps. \n\n1. visualize the goals shoot in a home play 'homescore' of the teams with a heatmap\n2. visualise the goals shoot in a outside play 'outside' of the teams with a heatmap\n3. visualize the teams with the most goals in the selcetd time range of 4 years\n4. visualize the teams timeline of by the shot goals, home and away\n\nnotes: how to analyse the relationship between teams via the score relation?","901f2edb":"# Europe Cup 2021 - Data Analysis\nThis Notebook ist about different approaches to predict the ranking of Football Teams during the Europe Cup 2021  ","626f3e67":"### First Conclussion to the Exploratory Data Analysis\nNice. There are 42105 rows content of football matches. I will narrow down my perspective a little to specify my goals and expectations:\n* Given the situation that continously change of players has an impact to the performance of the team and further to the Stats, I will reduce the timeline from now to 2017\n* The Data Set includes the Football Teams World wide, I filter out the Teams that don't participate at the Europe Cup 2021\n* To understand the Performance Data of the Teams, i will create time charts to understand the actual Performance Situation of each Team\n    * For that I have to transform the Date Colum in the index column\n    \n"}}