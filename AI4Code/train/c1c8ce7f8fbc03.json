{"cell_type":{"8ef05777":"code","a7bd47c0":"code","ba8231fd":"code","5b92f38b":"code","c3c39042":"code","ef02f8f8":"code","159f24bc":"code","f244732e":"code","a36633d1":"markdown","5ce2a977":"markdown","33aff2b0":"markdown","39423969":"markdown","314af981":"markdown","8c5a0a06":"markdown","87af5492":"markdown","2fec5744":"markdown"},"source":{"8ef05777":"from PIL import Image\nimport numpy as np\nimport os\nimport cv2\nimport keras\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout\nimport pandas as pd\n\nprint(os.listdir(\"..\/input\/men-women-classification\"))","a7bd47c0":"data=[]\nlabels=[]\n\nmen=os.listdir(\"..\/input\/men-women-classification\/data\/men\/\")\nprint(men)\nfor m in men:\n    try:\n        image=cv2.imread(\"..\/input\/men-women-classification\/data\/men\/\"+m)\n        image_from_array = Image.fromarray(image, 'RGB')\n        size_image = image_from_array.resize((200, 200))\n        data.append(np.array(size_image))\n        labels.append(0)\n    except AttributeError:\n        print(\"\")\n\nwomen=os.listdir(\"..\/input\/men-women-classification\/data\/women\/\")\nfor f in women:\n    try:\n        image=cv2.imread(\"..\/input\/men-women-classification\/data\/women\/\"+f)\n        image_from_array = Image.fromarray(image, 'RGB')\n        size_image = image_from_array.resize((200, 200))\n        data.append(np.array(size_image))\n        labels.append(1)\n    except AttributeError:\n        print(\"\")","ba8231fd":"Cells=np.array(data)\nlabels=np.array(labels)\n\nnp.save(\"Cells\",Cells)\nnp.save(\"labels\",labels)\n\nCells=np.load(\"Cells.npy\")\nlabels=np.load(\"labels.npy\")\n\ns=np.arange(Cells.shape[0])\nnp.random.shuffle(s)\nCells=Cells[s]\nlabels=labels[s]\n\nnum_classes=len(np.unique(labels))\nlen_data=len(Cells)","5b92f38b":"(x_train,x_test)=Cells[(int)(0.1*len_data):],Cells[:(int)(0.1*len_data)]\n\nx_train = x_train.astype('float32')\/255 \nx_test = x_test.astype('float32')\/255\ntrain_len=len(x_train)\ntest_len=len(x_test)\n\n(y_train,y_test)=labels[(int)(0.1*len_data):],labels[:(int)(0.1*len_data)]\n\nprint(y_train)\nprint(y_test)\nprint(x_train.shape)\nprint(y_train.shape)","c3c39042":"y_train=keras.utils.to_categorical(y_train,2)\ny_test=keras.utils.to_categorical(y_test,2)","ef02f8f8":"model=Sequential()\nmodel.add(Conv2D(filters=16,kernel_size=2,padding=\"same\",activation=\"relu\",input_shape=(200,200,3)))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=32,kernel_size=2,padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=64,kernel_size=2,padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(500,activation=\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(2,activation=\"softmax\"))\nmodel.summary()\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(x_train,y_train,batch_size=128,epochs=30)\n\n# Save the model weights:\nfrom keras.models import load_model\nmodel.save('men_women.h5')","159f24bc":"from keras.models import load_model\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom PIL import Image\nimport numpy as np\nimport os\nimport cv2\n\ndef convert_to_array(img):\n    im = cv2.imread(img)\n    cv_rgb =cv2.cvtColor(im,cv2.COLOR_BGR2RGB)\n    plt.imshow(cv_rgb)\n    plt.show()\n    img_ = Image.fromarray(im, 'RGB')\n    image = img_.resize((200, 200))\n    return np.array(image)\n\ndef get_cell_name(label):\n    if label==0:\n        return \"men\"\n    if label==1:\n        return \"women\"\n    \ndef predict_cell(file):\n    model = load_model('men_women.h5')\n    print(\"Predicting Type of people Image.................................\")\n    ar=convert_to_array(file)\n    ar=ar\/255\n    label=1\n    a=[]\n    a.append(ar)\n    a=np.array(a)\n    score=model.predict(a,verbose=1)\n    print(score)\n    label_index=np.argmax(score)\n    print(label_index)\n    acc=np.max(score)\n    Cell=get_cell_name(label_index)\n    return Cell,\"The people Cell is a \"+Cell+\" with accuracy =    \"+str(acc)\n\n# predict_cell('..\/input\/sawalee\/kiki\/01.jpg')\n# predict_cell('..\/input\/sawalee\/kiki\/02.jpg')\n# predict_cell('..\/input\/sawalee\/kiki\/03.jpg')\n# predict_cell('..\/input\/sawalee\/kiki\/04.jpg')\n# predict_cell('..\/input\/sawalee\/kiki\/05.jpg')\npredict_cell('..\/input\/sawalee\/kiki\/06.jpg')\n# predict_cell('..\/input\/sawalee\/kiki\/07.jpg')\n# predict_cell('..\/input\/sawalee\/kiki\/08.jpg')\n# predict_cell('..\/input\/sawalee\/kiki\/09.jpg')\n# predict_cell('..\/input\/sawalee\/kiki\/10.jpg')","f244732e":"#Check the accuracy on Test data:\naccuracy = model.evaluate(x_test, y_test, verbose=1)\nprint('\\n', 'Test_Accuracy:-', accuracy[1])","a36633d1":"# One hot encoding\nOne Hot Encoding \u0e04\u0e37\u0e2d \u0e01\u0e32\u0e23 Encode \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Categorical Data \u0e17\u0e35\u0e48\u0e1b\u0e01\u0e15\u0e34\u0e40\u0e01\u0e47\u0e1a\u0e40\u0e1b\u0e47\u0e19 Nomimal Number, Ordinal Number \u0e43\u0e2b\u0e49\u0e41\u0e15\u0e01\u0e40\u0e1b\u0e47\u0e19 Column \u0e22\u0e48\u0e2d\u0e22 \u0e46 \u0e41\u0e1a\u0e1a Binary 0\/1 \u0e15\u0e32\u0e21 Value \u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\n","5ce2a977":"# Data Prepearaion : \u0e01\u0e32\u0e23\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\n\n- \u0e17\u0e33\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 data \u0e41\u0e25\u0e30 labels \u0e0b\u0e36\u0e48\u0e07 data \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e \u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e41\u0e1a\u0e1a\u0e2d\u0e32\u0e23\u0e4c\u0e40\u0e23\u0e22\u0e4c \u0e41\u0e25\u0e30\u0e40\u0e0b\u0e15\u0e04\u0e48\u0e32\u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e20\u0e32\u0e1e RGB \n- \u0e17\u0e33\u0e01\u0e32\u0e23\u0e41\u0e22\u0e01 Class\n- men = Class 0\n- women = Class 1","33aff2b0":"# Test Project : \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e","39423969":"# \u0e04\u0e48\u0e32 accuracy : \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e40\u0e1b\u0e2d\u0e23\u0e4c\u0e40\u0e0b\u0e19\u0e15\u0e4c\u0e04\u0e27\u0e32\u0e21\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07","314af981":"# Create Model : \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25","8c5a0a06":"# train & test\n- \u0e01\u0e32\u0e23 train \u0e41\u0e25\u0e30 \u0e01\u0e32\u0e23 test \u0e02\u0e2d\u0e07 X , Y ","87af5492":"# Import Libraries : \u0e1b\u0e23\u0e30\u0e01\u0e32\u0e28 Libraries\n- \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e41\u0e23\u0e01 \u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e01\u0e32\u0e28 Libraries \u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19 \n- \u0e43\u0e0a\u0e49 Libraries keras \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e33 classifier\n- \u0e43\u0e0a\u0e49 Libraries numpy \u0e41\u0e25\u0e30  Libraries Image \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2d\u0e34\u0e21\u0e40\u0e21\u0e08\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e2d\u0e32\u0e23\u0e4c\u0e40\u0e23\u0e22\u0e4c","2fec5744":"## Introduction : \u0e41\u0e22\u0e01\u0e40\u0e1e\u0e28\u0e08\u0e32\u0e01\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e\n\u0e1b\u0e31\u0e08\u0e08\u0e38\u0e1a\u0e31\u0e19\u0e21\u0e19\u0e38\u0e29\u0e22\u0e4c\u0e21\u0e35\u0e40\u0e04\u0e49\u0e32\u0e42\u0e04\u0e23\u0e07\u0e02\u0e2d\u0e07\u0e23\u0e39\u0e1b\u0e2b\u0e19\u0e49\u0e32\u0e02\u0e2d\u0e07\u0e40\u0e1e\u0e28\u0e2b\u0e0d\u0e34\u0e07 \u0e41\u0e25\u0e30\u0e40\u0e1e\u0e28\u0e0a\u0e32\u0e22\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e04\u0e25\u0e49\u0e32\u0e22\u0e04\u0e25\u0e36\u0e07\u0e01\u0e31\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e21\u0e32\u0e01  \u0e23\u0e27\u0e21\u0e16\u0e36\u0e07\u0e23\u0e39\u0e1b\u0e1b\u0e23\u0e30\u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e2a\u0e31\u0e13\u0e10\u0e32\u0e19 \u0e40\u0e0a\u0e48\u0e19 \u0e17\u0e23\u0e07\u0e1c\u0e21, \u0e04\u0e34\u0e49\u0e27, \u0e08\u0e21\u0e39\u0e01 \u0e41\u0e25\u0e30\u0e1b\u0e32\u0e01 \n\u0e16\u0e49\u0e32\u0e40\u0e2b\u0e47\u0e19\u0e41\u0e04\u0e48\u0e2a\u0e48\u0e27\u0e19\u0e43\u0e14\u0e2a\u0e48\u0e27\u0e19\u0e2b\u0e19\u0e36\u0e48\u0e07\u0e01\u0e47\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e23\u0e16\u0e41\u0e22\u0e01\u0e2d\u0e2d\u0e01\u0e44\u0e14\u0e49\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e1e\u0e28\u0e44\u0e2b\u0e19 \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e17\u0e32\u0e07\u0e04\u0e13\u0e30\u0e1c\u0e39\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33\u0e40\u0e25\u0e47\u0e07\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32\u0e04\u0e27\u0e23\u0e08\u0e30\u0e21\u0e35\u0e15\u0e31\u0e27\u0e0a\u0e48\u0e27\u0e22\u0e43\u0e19\u0e01\u0e32\u0e23\u0e41\u0e22\u0e30\u0e41\u0e22\u0e30\u0e40\u0e1e\u0e28\u0e14\u0e49\u0e27\u0e22\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49\u0e04\u0e27\u0e32\u0e21\u0e23\u0e39\u0e49\u0e02\u0e2d\u0e07 \nMachine Intelligence \u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49 \u0e41\u0e25\u0e30\u0e27\u0e34\u0e40\u0e04\u0e23\u0e32\u0e30\u0e2b\u0e4c\u0e1c\u0e25"}}