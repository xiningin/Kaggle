{"cell_type":{"dcd71052":"code","ed12b346":"code","14e53271":"code","65001ce5":"code","1c27ff8c":"markdown"},"source":{"dcd71052":"import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"..\/input\/train.csv\") # Importing the Training set\n\n\n'''\n\nprint(df.shape) # Printing the shape of the dataframe\nprint(df.count())   # Printing the count of each column in the dataframe\n\nprint(df.Survived.value_counts()) # Prints the categorical data for each category\n\n'''\n\n\n\nplt.subplot2grid((2,3),(0,0))       # To set boundary subplot and specify the first graph as (0,0)\ndf.Survived.value_counts(normalize=True).plot(kind=\"bar\",alpha=0.5)       # Bar chart visualizing the survived with value counts\nplt.title(\"Survived\")\n\nplt.subplot2grid((2,3),(0,1))       # To include the graph in same boundary with (0,1)\nplt.scatter(df.Survived,df.Age,alpha=0.1)       # Displays a scatter chart for Age vs Survived\nplt.title(\"Age vs Survived\")\n\n\nplt.subplot2grid((2,3),(0,2))\ndf.Pclass.value_counts(normalize=True).plot(kind=\"bar\",alpha=0.5)       # Here, value count is Normalized for view as Percent\nplt.title(\"Pclass\")\n\n\nplt.subplot2grid((2,3),(1,0),colspan=2)     # Specify the span needed by graphs inside the subplot\nfor i in [1,2,3]:                           # In each Pclass \n    df.Age[df.Pclass == i].plot(kind=\"kde\") # Plot the Ages as Kernel Density Graph\nplt.title(\"Pclass vs Age\")\nplt.legend((\"1st\",\"2nd\",\"3rd\"))\n\nplt.subplot2grid((2,3),(1,2))\ndf.Embarked.value_counts(normalize=True).plot(kind=\"bar\",alpha=0.5)       # Here, value count is Normalized for view as Percent\nplt.title(\"Embarked\")\n\n\nplt.show()","ed12b346":"import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"..\/input\/train.csv\") # Importing the Training set\nfig = plt.figure(figsize=(18,6))    # To set the size of the figure\n\n\nplt.subplot2grid((3,4),(0,0))       # To set boundary subplot and specify the first graph as (0,0)\ndf.Survived.value_counts(normalize=True).plot(kind=\"bar\",alpha=0.5)       # Bar chart visualizing the survived with value counts\nplt.title(\"Survived\")\n\nplt.subplot2grid((3,4),(0,1))       # To set boundary subplot and specify the first graph as (0,0)\ndf.Survived[df.Sex == \"male\"].value_counts(normalize=True).plot(kind=\"bar\",alpha=0.5)       # Males survived\nplt.title(\"Men Survived\")\n\nplt.subplot2grid((3,4),(0,2))       # To set boundary subplot and specify the first graph as (0,0)\ndf.Survived[df.Sex == \"female\"].value_counts(normalize=True).plot(kind=\"bar\",alpha=0.5,color='g')       # Females survived\nplt.title(\"Women Survived\")\n\nplt.subplot2grid((3,4),(0,3))       # To set boundary subplot and specify the first graph as (0,0)\ndf.Sex[df.Survived == 1].value_counts(normalize=True).plot(kind=\"bar\",alpha=0.5,color=['g','b'])       # Sex of survived\nplt.title(\"Sex of Survived\")\n\nplt.subplot2grid((3,4),(1,0),colspan=4)     # Finding the Survived for each PClass\nfor i in [1,2,3]:           \n    df.Survived[df.Pclass == i].plot(kind=\"kde\")\nplt.title(\"Class vs Survived\")\nplt.legend((\"1st\",\"2nd\",\"3rd\"))\n\n\n# To Find the Survived Men and Women belonging to each of the Passenger classes\n\nplt.subplot2grid((3,4),(2,0))      \ndf.Survived[(df.Sex == \"male\") & (df.Pclass == 1)].value_counts(normalize=True).plot(kind=\"bar\",alpha=0.5)       # Rich Males survived\nplt.title(\"Rich Men Survived\")\n\nplt.subplot2grid((3,4),(2,1))      \ndf.Survived[(df.Sex == \"male\") & (df.Pclass == 3)].value_counts(normalize=True).plot(kind=\"bar\",alpha=0.5)       # Poor Males survived\nplt.title(\"Poor Men Survived\")\n\nplt.subplot2grid((3,4),(2,2))      \ndf.Survived[(df.Sex == \"female\") & (df.Pclass == 1)].value_counts(normalize=True).plot(kind=\"bar\",alpha=0.5,color='g')       # Rich Females survived\nplt.title(\"Rich Women Survived\")\n\nplt.subplot2grid((3,4),(2,3))      \ndf.Survived[(df.Sex == \"female\") & (df.Pclass == 3)].value_counts(normalize=True).plot(kind=\"bar\",alpha=0.5,color='g')       # Poor Males survived\nplt.title(\"Poor Women Survived\")\n\nplt.show()","14e53271":"import pandas as pd\n\ntrain = pd.read_csv(\"..\/input\/train.csv\") # Importing the Training set\n\ntrain[\"Hyp\"] = 0    # Create a new Feature called Hyp and initialize all of it to zero\ntrain.loc[train.Sex == 'female',\"Hyp\"] = 1  # To Set the data in Hyp column to 1 if Sex is Female\n\ntrain[\"Result\"] = 0   # Create a new feature called Result\ntrain.loc[train.Survived == train.Hyp,\"Result\"] = 1 # If Survived and Hyp columns have equal data, set 1\n\nprint(train[\"Result\"].value_counts(normalize=True))   # To print the count of the values in Result feature","65001ce5":"import pandas as pd\nimport os\nimport numpy as np\n#import utils    # Custom \nfrom sklearn import tree, model_selection\n\ndef clean_data(data):\n    data[\"Fare\"] = data[\"Fare\"].fillna(data[\"Fare\"].dropna().median())    # Replace all the NA with Median values\n    data[\"Age\"] = data[\"Age\"].fillna(data[\"Age\"].dropna().median())\n    \n    data.loc[data[\"Sex\"] == \"female\",\"Sex\"] = 1    # Replace the string female with 1\n    data.loc[data[\"Sex\"] == \"male\",\"Sex\"] = 0  # Replace the string male with 0\n\n    data[\"Embarked\"] = data[\"Embarked\"].fillna(\"S\") # Fill the NA with Embarked destination as Southampton\n    data.loc[data[\"Embarked\"] == \"S\",\"Embarked\"] = 0    # Replace the String data with Categorical numerical data for better understanding\n    data.loc[data[\"Embarked\"] == \"C\",\"Embarked\"] = 1\n    data.loc[data[\"Embarked\"] == \"Q\",\"Embarked\"] = 2\n\ntrain = pd.read_csv(\"..\/input\/train.csv\")\nclean_data(train)     # Cleaning the training set\n\ntest = pd.read_csv(\"..\/input\/test.csv\")\nclean_data(test)\n\ntarget = train[\"Survived\"].values       # Creating the target variable to classify\nfeatures = train[[\"Pclass\",\"Age\",\"Fare\",\"Embarked\",\"Sex\",\"SibSp\",\"Parch\"]].values     # Features used to classify\ntest_data = test[[\"Pclass\",\"Age\",\"Fare\",\"Embarked\",\"Sex\",\"SibSp\",\"Parch\"]].values\n\ndecision_model = tree.DecisionTreeClassifier(random_state=1)    # Create Decision tree model with Random state =1 \ndecision_ = decision_model.fit(features,target)     # Fit the data into the model\n\n#print(decision_.score(features,target))\n\n'''\nUsage of Decision tree is not always correct, since it tries to fit the data as much as possible, without \ntaking the notice of the degree of the polynomial. So, even though we get good accuracy, it's not the best \nmodel.\n\nTo solve this, we have to select only the necessary features for classification, hoping to get better results\n\nUse sklearn.model_selection\n\n'''\n\nscores = model_selection.cross_val_score(decision_model,features,target,scoring=\"accuracy\",cv=50)   # To Cross validate and remodel it with less features\n# cv - number of runs to find cross validated model\n#print(scores)\n#print(scores.mean())\n\n'''\nNow, we will try remodelling the Decision tree as a Generalized tree\n'''\n#print(\"Generalized Tree results\")\ngeneralized_tree = tree.DecisionTreeClassifier(random_state=1,max_depth=7,min_samples_split=2)      # Generalized tree structure\ngeneralized_tree_ = generalized_tree.fit(features,target)       # Fit data\ntest_pred = generalized_tree_.predict(test_data)\n\ngeneralized_tree_score = model_selection.cross_val_score(generalized_tree,features,target,scoring=\"accuracy\",cv=50) # Cross validation\nmy_formatted_list = [ '%.0f' % elem for elem in generalized_tree_score ]\n#print(my_formatted_list)\n#print(generalized_tree_score.mean())\n#print(generalized_tree_.score(features,target))\n#tree.export_graphviz(decision_tree_two, feature_names=feature_names, out_file=\".\/graphs\/decision_tree_two.dot\") # To Visualize Decision tree\n\nsubmission = pd.DataFrame({\"PassengerId\":test[\"PassengerId\"],\"Survived\":test_pred})\n\n#Visualize the first 5 rows\nsubmission.head()\n\nfilename = 'submission.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)\n","1c27ff8c":"> DECISION TREE CLASSIFIER"}}