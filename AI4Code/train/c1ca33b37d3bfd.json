{"cell_type":{"15342480":"code","64c1de2d":"code","f9ff876e":"code","fffff0a0":"code","c5425f1a":"code","1d1d4f46":"code","2ade30ee":"code","e7b13258":"code","3b3341c5":"code","87e1a059":"code","26eb5b0a":"code","2a2c90b0":"code","c36c2a49":"markdown","6f0dc2ac":"markdown","c5b8ba37":"markdown","5b79c7eb":"markdown","bdf6dac6":"markdown"},"source":{"15342480":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport gc\nimport pickle\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import StratifiedKFold","64c1de2d":"with open(\"..\/input\/tps-sep-cooking-data\/TPS_Sep_Dataset.txt\", 'rb') as handle: \n    data = handle.read()\n\nprocessed_data = pickle.loads(data)\ntrain_df = processed_data['train_df']\ntest_df = processed_data['test_df']\n\ndel processed_data\ngc.collect()","f9ff876e":"Xtrain = train_df.loc[:, train_df.columns != 'claim'].copy()\nYtrain = train_df['claim'].copy()\nXtest = test_df.copy()\n\nprint(f\"Xtrain: {Xtrain.shape} \\nYtrain: {Ytrain.shape} \\nXtest: {Xtest.shape}\")\n\ndel train_df, test_df\ngc.collect()","fffff0a0":"def plot_confusion_matrix(cm, classes):\n\n    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n    plt.title('Confusion matrix', fontweight='bold', pad=15)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=0)\n    plt.yticks(tick_marks, classes)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], 'd'),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label', fontweight='bold')\n    plt.xlabel('Predicted label', fontweight='bold')\n    plt.tight_layout()","c5425f1a":"def xgb_train_predict(params, train, test, true_label, FOLD=5, SEEDS=[42]):\n\n    counter = 0\n    oof_score = 0\n    y_pred_final_xgb = np.zeros((test.shape[0], len(SEEDS)))\n    y_pred_meta_xgb = np.zeros((train.shape[0], len(SEEDS)))\n\n\n    for sidx, seed in enumerate(SEEDS):\n        seed_score = 0\n\n        kfold = StratifiedKFold(n_splits=FOLD, shuffle=True, random_state=seed)\n\n        for idx, (train_idx, val_idx) in enumerate(kfold.split(train, true_label)):\n            counter += 1\n\n            train_x, train_y = train.iloc[train_idx], true_label.iloc[train_idx]\n            val_x, val_y = train.iloc[val_idx], true_label.iloc[val_idx]\n\n            params['learning_rate']=0.02\n            init_model = XGBClassifier(**params)\n\n            init_model.fit(train_x, train_y, eval_set=[(train_x, train_y), (val_x, val_y)], \n                           early_stopping_rounds=200, verbose=500)\n\n            params['learning_rate']=0.008\n            model = XGBClassifier(**params)\n\n            model.fit(train_x, train_y, eval_set=[(train_x, train_y), (val_x, val_y)], \n                      early_stopping_rounds=100, verbose=300, xgb_model=init_model)\n\n            y_pred = model.predict_proba(val_x, iteration_range=(0, model.best_iteration))[:,-1]\n            y_pred_meta_xgb[val_idx, sidx] += y_pred\n            y_pred_final_xgb[:, sidx] += model.predict_proba(test, iteration_range=(0, model.best_iteration))[:,-1]\n\n            score = roc_auc_score(val_y, y_pred)\n            oof_score += score\n            seed_score += score\n            print(\"\\nSeed-{} | Fold-{} | OOF Score: {}\\n\".format(seed, idx, score))\n\n        print(\"\\nSeed: {} | Aggregate OOF Score: {}\\n\\n\".format(seed, (seed_score \/ FOLD)))\n\n\n    y_pred_final_xgb = y_pred_final_xgb \/ float(FOLD)\n    oof_score \/= float(counter)\n    print(\"Aggregate OOF Score: {}\".format(oof_score))\n    \n    return y_pred_meta_xgb, y_pred_final_xgb, oof_score","1d1d4f46":"params1 = {\n    'objective': 'binary:logistic',\n    'eval_metric': 'auc',\n    'tree_method': 'gpu_hist',\n    'gpu_id': 0,\n    'predictor': 'gpu_predictor',\n    'n_estimators': 8000,\n    'max_depth': 4,\n    'gamma': 0.2465,\n    'subsample': 0.6423,\n    'colsample_bytree': 0.775,\n    'colsample_bylevel': 0.868,\n    'min_child_weight': 366,\n    'reg_lambda': 0.05,\n    'reg_alpha': 10,\n    'verbosity': 0,\n    'random_state': 42\n}\n\ny_pred_meta_xgb1, y_pred_final_xgb1, oof_score1 = xgb_train_predict(params1, Xtrain, Xtest, Ytrain)","2ade30ee":"params2 = {\n    'objective': 'binary:logistic',\n    'eval_metric': 'auc',\n    'tree_method': 'gpu_hist',\n    'gpu_id': 0,\n    'predictor': 'gpu_predictor',\n    'n_estimators': 8000,\n    'max_depth': 3,\n    'gamma': 0.2465,\n    'subsample': 0.5,\n    'colsample_bytree': 0.5,\n    'colsample_bylevel': 0.868,\n    'min_child_weight': 256,\n    'reg_lambda': 0.05,\n    'reg_alpha': 10,\n    'verbosity': 0,\n    'random_state': 42\n}\n\ny_pred_meta_xgb2, y_pred_final_xgb2, oof_score2 = xgb_train_predict(params2, Xtrain, Xtest, Ytrain)","e7b13258":"y_pred_meta_xgb = np.concatenate((y_pred_meta_xgb1, y_pred_meta_xgb2), axis=1)\ny_pred_final_xgb = np.concatenate((y_pred_final_xgb1, y_pred_final_xgb2), axis=1)\nprint(f\"y_pred_meta_xgb: {y_pred_meta_xgb.shape} \\ny_pred_final_xgb: {y_pred_final_xgb.shape}\")","3b3341c5":"y_pred_meta = np.mean(y_pred_meta_xgb, axis=1)\ny_pred = (y_pred_meta>0.5).astype(int)\nprint(classification_report(Ytrain, y_pred))","87e1a059":"cnf_matrix = confusion_matrix(Ytrain, y_pred, labels=[0, 1])\nnp.set_printoptions(precision=2)\nplt.figure(figsize=(12, 5))\nplot_confusion_matrix(cnf_matrix, classes=[0, 1])","26eb5b0a":"np.savez_compressed('.\/XGB_Meta_Features.npz',\n                    y_pred_meta_xgb=y_pred_meta_xgb, \n                    oof_score1=oof_score1,\n                    oof_score2=oof_score2,\n                    y_pred_final_xgb=y_pred_final_xgb)","2a2c90b0":"y_pred_final = np.mean(y_pred_final_xgb, axis=1)\nsubmit_df = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\nsubmit_df['claim'] = y_pred_final\nsubmit_df.to_csv(\"XGB_Submission.csv\", index=False)\nsubmit_df.head(10)","c36c2a49":"## Create submission file","6f0dc2ac":"## Load processed datasets","c5b8ba37":"## Import libraries","5b79c7eb":"## XGBoost Model","bdf6dac6":"## Helper Function"}}