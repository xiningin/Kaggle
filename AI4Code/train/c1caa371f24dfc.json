{"cell_type":{"bd7fa8e9":"code","b3d44baa":"code","5056f383":"code","33778e52":"code","574c73e8":"code","5758af5b":"code","b777ed23":"code","418a8022":"code","73b09ce6":"code","b4955899":"code","ad77e244":"code","7464fc46":"code","16fa9a33":"code","7fab4432":"code","ad97114d":"code","9c96fbf3":"code","ba0fc537":"code","04347913":"code","6b250a7d":"code","5e26edfd":"code","f7326a96":"markdown","c82724c1":"markdown","9cd91df9":"markdown","7ea7e26d":"markdown"},"source":{"bd7fa8e9":"# data analysis\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\n","b3d44baa":"#Reading files:\ntrain_df= pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ncombine = [train_df, test_df]","5056f383":"train_df","33778e52":"# Droped column\ntrain_df.drop(['Cabin'], axis=1, inplace=True)\ntest_df.drop(['Cabin'], axis=1, inplace=True)\ncombine = [train_df, test_df]","574c73e8":"# visualization\nsns.countplot(train_df.Survived)\nplt.show()\n\n","5758af5b":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();\n#\n#\ngrid = sns.FacetGrid(train_df, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","b777ed23":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)\n\n\nsns.countplot(train_df.Pclass)\nplt.show()\n\n\nsns.barplot(x='Pclass', y='Survived', data=train_df)\nplt.show()\n\n\nsns.countplot(train_df.Sex)\nplt.show()\n\nsns.barplot(x='Sex', y='Survived', data=train_df)\nplt.show()\n\n\nplt.hist(train_df.Age)\nplt.xlabel('Age')\nplt.ylabel('count')\nplt.show()\n\nsns.countplot(train_df.SibSp)\nplt.show()\n\nsns.barplot(x='SibSp', y='Survived', data=train_df)\nplt.show()\n\nsns.countplot(train_df.Embarked)\nplt.show()\n\nsns.barplot(x='Embarked', y='Survived', data=train_df)\nplt.show()","418a8022":"#Clining and combine DATA \nfor dataset in combine:\n        # Family: 0,1,2\n    dataset[\"Family\"] = dataset[\"Parch\"] + dataset[\"SibSp\"]\n    dataset['Family'] = dataset['Family'].astype(int)\n    dataset.loc[ dataset['Family'] >=  2, 'Family'] = 2\n    \n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\n    dataset['Embarked'] = dataset['Embarked'].astype(str)\n    \n            # Convert text to number.\n    dataset[\"Sex\"] = dataset[\"Sex\"].map({'male':0, 'female':1})\n    dataset[\"Embarked\"] = dataset[\"Embarked\"].map({'Q':0, 'S':1, \"C\":2})\n    \n    dataset.loc[(dataset['Age'] <=20), 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 20) & (dataset['Age'] <= 40), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 60), 'Age']   = 2\n    dataset.loc[ dataset['Age'] > 60, 'Age'] = 3\n    dataset['Age'] = dataset['Age'].fillna(4)\n    \n            # Fare\n    dataset.loc[(dataset['Fare'] <= 7.854), 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.854) & (dataset['Fare'] <= 10.5), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 10.5) & (dataset['Fare'] <= 21.679), 'Fare']   = 2\n    dataset.loc[(dataset['Fare'] > 21.679) & (dataset['Fare'] <= 39.688), 'Fare']   = 3\n    dataset.loc[ dataset['Fare'] > 39.688, 'Fare'] = 4\n    dataset['Fare'] = dataset['Fare'].fillna(5)\n    dataset['Fare'] = dataset['Fare'].astype(int)\ntrain_df.head()","73b09ce6":"train_df.drop(['PassengerId', 'Name', 'Ticket','Parch', 'SibSp'], axis=1, inplace=True)\ntest_df.drop([ 'Name', 'Ticket', 'Parch','SibSp'], axis=1, inplace=True)\ntrain_df.head()\ntest_df.head()","b4955899":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","ad77e244":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","7464fc46":"# Support Vector Machines\n\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","16fa9a33":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","7fab4432":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","ad97114d":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","9c96fbf3":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier(min_weight_fraction_leaf =0.0005)\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","ba0fc537":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","04347913":"models = pd.DataFrame({\n    'Model': ['Logistic Regression','Support Vector Machines', 'KNN', \n               'Naive Bayes','Linear SVC','Decision Tree','Random Forest'],\n    \n    'Score': [acc_log, \n              acc_svc,\n              acc_knn,\n              acc_gaussian,\n               acc_linear_svc,\n               acc_decision_tree,\n              acc_random_forest        ]})\nmodels.sort_values(by='Score', ascending=False)\n\n\n#submission.to_csv(\"submission.csv\", index = False)","6b250a7d":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })","5e26edfd":"submission.to_csv(\"submission.csv\", index = False)","f7326a96":"Predict","c82724c1":"#info DATA\ntrain_df.info()\nprint('_'*40)\ntest_df.info()\n","9cd91df9":"Model evaluation","7ea7e26d":"Beginner Try:("}}