{"cell_type":{"62f5743b":"code","942007b0":"code","c3a1c573":"code","73147d61":"code","4f04c7fd":"code","cc1b7d74":"code","a739be65":"code","f36227ed":"code","30bc6c1f":"code","baf74b7b":"code","27c4a011":"code","959a2c8b":"code","b271b8c0":"code","c0061f43":"code","43588f28":"code","e44ff57a":"code","27e2cd8c":"code","13cfe087":"code","0c16992a":"code","f8803703":"code","6a0331d1":"markdown","b21f5664":"markdown","1f7132ad":"markdown"},"source":{"62f5743b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","942007b0":"# Loading training data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","c3a1c573":"# Loading testing data\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","73147d61":"# Replace 'nan' values from 'Cabin' column to 0\ntrain_data[\"Cabin\"] = train_data[\"Cabin\"].fillna('0')\ntest_data[\"Cabin\"] = test_data[\"Cabin\"].fillna('0')\n\n# Replace 'Cabin' feature by just the first character\ntrain_data[\"Cabin\"] = [string[0] for string in train_data[\"Cabin\"]]\ntest_data[\"Cabin\"] = [string[0] for string in test_data[\"Cabin\"]]\n\ntrain_data[\"Deck\"] = train_data[\"Cabin\"] == '0'\ntest_data[\"Deck\"] = test_data[\"Cabin\"] == '0'\n\ntrain_data.head()","4f04c7fd":"# Check if the presumption that women survived - gender_submission.csv file - makes any sense\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\n\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","cc1b7d74":"# Check the rate of men that survived\nmen = train_data.loc[train_data.Sex == \"male\"][\"Survived\"]\n\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","a739be65":"# Check if people in cabins survived\ncabins = train_data.loc[train_data.Cabin != '0'][\"Survived\"]\n\nrate_cabins = sum(cabins)\/len(cabins)\n\nprint(\"% of people in cabins who survived:\", rate_cabins)","f36227ed":"# Check if people survive depending on the cabin they were on\ncabins = set(train_data.loc[train_data.Cabin != '0'][\"Cabin\"])\n\nfor cabin in cabins:\n    current_cabin = train_data.loc[train_data.Cabin == cabin][\"Survived\"]\n    rate_cabins = sum(current_cabin)\/len(current_cabin)\n    print(f\"% of people in cabin {cabin} who survived: {rate_cabins}\")","30bc6c1f":"# Check the age feature\n# Check for 'nan' values\ntrain_data[\"Age\"].isnull().values.any()","baf74b7b":"# Count the 'nan' \ntrain_data[\"Age\"].isnull().sum()","27c4a011":"## Dropping 'nan' age rows gives RandomForestClassifier's Accuracy:  0.8046511627906977\n# Take the rows where 'Age ' is not nan\n# train_data = train_data[train_data[\"Age\"].notna()]\n\n## Replacing 'nan' by mean value gives RandomForestClassifier's Accuracy:  0.8059701492537313\n\n# Check the mean value of age\nmean_age = round(train_data.loc[train_data.Age.notnull()][\"Age\"].mean(), 0)\n\nprint(f\"The mean age of the passegners was {mean_age}\")\n\ntrain_data[\"Age\"].loc[train_data.Age.isnull()] = mean_age\ntest_data[\"Age\"].loc[test_data.Age.isnull()] = mean_age\n\n# Check for 'nan' values\nprint(f\"Is there any 'nan' values left in the 'Age' column? {train_data['Age'].isnull().values.any()}\")\n\ntrain_data[\"Age\"]","959a2c8b":"# Preparation\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\n\n# Preparing sets\ny = train_data[\"Survived\"]\n\nfeatures = [\"Sex\", \"Pclass\", \"SibSp\", \"Parch\", \"Age\", \"Cabin\"]\n\nX = pd.get_dummies(train_data[features])\n\nX_test = pd.get_dummies(test_data[features])\n\nif \"Cabin\" in features:\n    # Add \"Cabin T\" in X_test\n    X_test[\"Cabin_T\"] = np.zeros(shape=X_test[\"Cabin_A\"].shape)\n\nX_trainset, X_testset, y_trainset, y_testset = train_test_split(X, y, test_size=0.3, random_state=3)","b271b8c0":"tree_model = DecisionTreeClassifier(criterion=\"entropy\", max_depth=4)","c0061f43":"tree_model.fit(X_trainset, y_trainset)\npredTree = tree_model.predict(X_testset)\n\nprint(\"DecisionTreeClassifier's Accuracy: \", metrics.accuracy_score(y_testset, predTree))","43588f28":"forest_model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)","e44ff57a":"# Initial evaluation with only 'train_data'\n\nforest_model.fit(X_trainset, y_trainset)\npredTree = forest_model.predict(X_testset)\n\nprint(\"RandomForestClassifier's Accuracy: \", metrics.accuracy_score(y_testset, predTree))","27e2cd8c":"from sklearn import svm\n\nclf = svm. SVC(kernel='rbf')\nclf.fit(X_trainset, y_trainset)\nyhat = clf.predict(X_testset)\n\nprint(\"SVM's Accuracy: \", metrics.accuracy_score(y_testset, yhat))","13cfe087":"X.shape","0c16992a":"X_test.shape","f8803703":"# Fitting using all data from 'train_data'\n\nforest_model.fit(X, y)\npredictions = forest_model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","6a0331d1":"# Decision Tree Classifier","b21f5664":"# Support Vector Machine","1f7132ad":"# Random Forest Classifier"}}