{"cell_type":{"2480e6af":"code","5d889660":"code","4041a3c4":"code","d80203d1":"code","2eba4e17":"code","7d94156c":"code","96676e4f":"code","4ec54184":"code","7df5aa56":"code","61d21145":"code","21c7908a":"code","df5d9b5c":"code","78eb690d":"code","468d73d0":"code","7bf18665":"code","e890e717":"code","1c84e297":"code","2c6f728b":"code","c7a407a6":"code","9a50b074":"code","effb4c07":"code","0d5656e9":"code","d494d814":"code","572596ad":"code","ddbc6ac6":"code","3b56fb26":"code","ebdee274":"code","7831549c":"code","f1b72775":"code","205adf33":"code","bdb9c7af":"code","e4142e5c":"code","7cdf15fc":"code","51f185dd":"code","6c15ce97":"code","6642c647":"code","e502150c":"code","623d0c6b":"code","45d1520c":"code","928b7095":"code","0ad99ed4":"code","884da6f9":"code","e0ed47d6":"code","71ca19c9":"code","7388afc4":"code","37512548":"code","cf1a4cf2":"code","ad783762":"code","56b2b250":"code","c75fd85a":"code","7bd97a72":"markdown","793fa1d5":"markdown","88c3c871":"markdown","7bb068f7":"markdown","d04bba63":"markdown","7d5703ac":"markdown","3cc36215":"markdown"},"source":{"2480e6af":"from kaggle.competitions import nflrush\nimport pandas as pd\nimport numpy as np\n#from sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier as RFC\nfrom tqdm import tqdm\n\nenv = nflrush.make_env()","5d889660":"from sklearn.model_selection import train_test_split","4041a3c4":"from matplotlib import pyplot as plt\n%matplotlib inline","d80203d1":"import warnings\nwarnings.simplefilter('ignore')","2eba4e17":"df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)","7d94156c":"iter_test = env.iter_test()","96676e4f":"new_df=df.groupby(['PlayId','Position']).count()","4ec54184":"position_count=new_df['GameId'].unstack().fillna(0).astype(int)","7df5aa56":"#\u30dc\u30fc\u30eb\u3092\u6301\u3063\u3066\u3044\u308b\u4eba\u306e\u30c7\u30fc\u30bf\u306e\u307f\u62bd\u51fa\nrusher_df=df[df['NflId']==df['NflIdRusher']]","61d21145":"def count_position(rusher_df):\n    rusher_df=rusher_df.merge(position_count, on='PlayId')\n    rusher_df=rusher_df.rename(columns={'S_x':'S','S_y':'S_position'})\n    return rusher_df","21c7908a":"def preprocess(df):\n    #StadiumType\u304b\u3089\u304a\u304b\u3057\u306a\u30c7\u30fc\u30bf\u3092\u524a\u9664\n    df=df[(df['StadiumType']!='Cloudy') & (df['StadiumType']!='Bowl')]\n    #StadiumType\u306e\u6587\u5b57\u5217\u3092\u5c4b\u5916\u5185\u3067\u5206\u3051\u3066\u30ea\u30b9\u30c8\u5316\n    outdoor=['Outdoor', 'Outdoors','Open','Indoor, Open Roof','Outdoor Retr Roof-Open', 'Oudoor', 'Ourdoor','Retr. Roof-Open','Outdor','Retr. Roof - Open', 'Domed, Open', 'Domed, open', 'Outside','Heinz Field']\n    indoor=['Indoors', 'RetractableRoof', 'Indoor','Retr. Roof-Closed','Dome', 'Domed, closed','Indoor, Roof Closed', 'Retr. Roof Closed','Closed Dome','Dome, closed','Domed']\n    #StadiumType\u304coutdoor\u306e\u6642\u306b\uff11\u306b\u306a\u308b\u3088\u3046\u306b\u30c0\u30df\u30fc\u5909\u6570\u5316\n    df['stadiumtype']=(df['StadiumType'].isin(outdoor)*1)\n    #\u5929\u5019\u306e\u60aa\u3044\u6642\u3060\u3051\u30ea\u30b9\u30c8\u5316\n    rain=['Light Rain', 'Showers','Cloudy with periods of rain, thunder possible. Winds shifting to WNW, 10-20 mph.','Rain', 'Heavy lake effect snow','Snow', 'Cloudy, Rain','Rain shower','Rainy']\n    #\u5929\u6c17\u304c\u60aa\u304f\u306a\u3044\u6642\u306b\uff11\u306b\u306a\u308b\u3088\u3046\u306b\u30c0\u30df\u30fc\u5909\u6570\u5316\n    df['weather']=(~df['GameWeather'].isin(rain)*1)\n    #\u8eab\u9577\u3092\u30d5\u30a3\u30fc\u30c8\u304b\u3089\u30bb\u30f3\u30c1\u306b\u5909\u63db\n    df['PlayerHeight']= df['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))\n    #\u30b2\u30fc\u30e0\u306e\u7d4c\u904e\u6642\u9593\u3092\u7b97\u51fa\n    df['gameclock']=[ pd.Timedelta(val).total_seconds() for val in df['GameClock']]\n    #Orientation\u3092\u6574\u3048\u308b\n    df.loc[df[\"Season\"]==2017, \"Orientation\"] = (df.loc[df[\"Season\"]==2017, \"Orientation\"] -90)%360\n    #\u653b\u6483\u306e\u5411\u304d\u3092\u53f3\u3092\u6b63\u3068\u3057\u3066\u63c3\u3048\u308b\n    df.loc[df['PlayDirection']=='left','Dir'] = 180 + df['Dir'] - 360\n    df.loc[df['PlayDirection']=='left','Orientation'] = 180 + df['Orientation'] - 360\n    df.loc[df['PlayDirection']=='left','X'] = 120 - df['X']\n    df.loc[df['PlayDirection']=='left','Y'] = 53.3 - df['Y']\n    #Orientation\u3092x,y\u6210\u5206\u306b\u5206\u3051\u308b\n    df['sin_Ori']=(df['Orientation']*np.pi\/180).map(np.sin) \n    df['cos_Ori']=(df['Orientation']*np.pi\/180).map(np.cos)\n    #Dir\u3092x,y\u6210\u5206\u306b\u5206\u3051\u3066\u901f\u5ea6\u3092\u304b\u3051\u308b\n    df['sin_Dir_S']=(df['Dir']*np.pi\/180).map(np.sin)*df['S']\n    df['cos_Dir_S']=(df['Dir']*np.pi\/180).map(np.cos)*df['S']\n    \n    return df","df5d9b5c":"'''def add_team_yard(rusher_df):\n    #\u30c1\u30fc\u30e0\u6bce(home\/away\u5225)\u306e\u7372\u5f97\u30e4\u30fc\u30c9\u6570\u306e\u5e73\u5747\u3092\u898b\u308b\n    team_yards_df = rusher_df.groupby(['Team','PossessionTeam']).mean()[['Yards']]\n    team_yards_df = team_yards_df.rename(columns={'Yards':'team_yards'})\n    #rusher\u306e\u307f\u306e\u30c7\u30fc\u30bf\u306b\u30c1\u30fc\u30e0\u6bce\u306e\u5e73\u5747\u7372\u5f97\u30e4\u30fc\u30c9\u6570\u3092\u52a0\u3048\u308b\n    rusher_df = rusher_df.merge(team_yards_df,on='PossessionTeam',how=\"left\")\n    return rusher_df,team_yards_df'''","78eb690d":"def add_team_score(rusher_df):\n    # \u653b\u6483\u30c1\u30fc\u30e0\u306e\u5f97\u70b9\n    rusher_df.loc[rusher_df[\"Team\"]==\"home\", \"rusherTeamScore\"] = rusher_df[\"HomeScoreBeforePlay\"]\n    rusher_df.loc[rusher_df[\"Team\"]==\"away\", \"rusherTeamScore\"] = rusher_df[\"VisitorScoreBeforePlay\"]\n\n    # \u5b88\u5099\u30c1\u30fc\u30e0\u306e\u5f97\u70b9\n    rusher_df.loc[rusher_df[\"Team\"]==\"home\", \"defenceTeamScore\"] = rusher_df[\"VisitorScoreBeforePlay\"]\n    rusher_df.loc[rusher_df[\"Team\"]==\"away\", \"defenceTeamScore\"] = rusher_df[\"HomeScoreBeforePlay\"]\n\n    # \u5f97\u70b9\u5dee\n    rusher_df.loc[:, \"diffScore\"] = rusher_df[\"rusherTeamScore\"] - rusher_df[\"defenceTeamScore\"]\n    return rusher_df","468d73d0":"def count_yard_to_touchdown(rusher_df):\n    #\u30bf\u30c3\u30c1\u30c0\u30a6\u30f3\u307e\u3067\u4f55\u30e4\u30fc\u30c9\u3042\u308b\u304b\n    rusher_df[\"yardsToTouchdown\"] = 100-rusher_df['X']\n    rusher_df[\"yardsToTouchdown\"].clip(0,100,inplace=True)\n    return rusher_df","7bf18665":"def add_personal_yard(rusher_df):\n    # \u9078\u624b\u6bce\u306e\u5e73\u5747\u7372\u5f97\u30e4\u30fc\u30c9\n    rusher_yards = rusher_df[[\"NflId\", \"Yards\"]].groupby(\"NflId\").mean()[[\"Yards\"]]\n    rusher_yards.dropna(inplace=True)\n    rusher_yards=rusher_yards.rename(columns={'Yards':'PersonalYard'})\n    rusher_df = rusher_df.merge(rusher_yards, on=\"NflId\", how=\"left\")\n    return rusher_df,rusher_yards\n","e890e717":"def add_average_data(df,rusher_df):\n    offence_position = ['WR', 'TE', 'T', 'QB', 'RB', 'G', 'C', 'FB', 'HB',  'OT', 'OG']\n    df[\"offence\"] = 0\n    df.loc[df[\"Position\"].isin(offence_position), \"offence\"] = 1\n    # \u653b\u6483,\u5b88\u5099\u30c1\u30fc\u30e0\u5e73\u5747 \u4f53\u91cd, \u8eab\u9577, S, A\uff08PlayId\u304c\u30ad\u30fc\uff09\n    offence_av = df.loc[df[\"offence\"]==1, [\"PlayerHeight\", \"PlayerWeight\", \"S\", \"A\", \"PlayId\"]].groupby(\"PlayId\").mean()\n    defence_av = df.loc[df[\"offence\"]==0, [\"PlayerHeight\", \"PlayerWeight\", \"S\", \"A\", \"PlayId\"]].groupby(\"PlayId\").mean()\n    offence_av.columns = ['PlayerHeight_offence', 'PlayerWeight_offence', 'S_offence', 'A_offence']\n    defence_av.columns = ['PlayerHeight_defence', 'PlayerWeight_defence', 'S_defence', 'A_defence']\n    rusher_df = rusher_df.merge(offence_av, on=\"PlayId\", how=\"left\").merge(defence_av, on=\"PlayId\", how=\"left\")\n    return rusher_df\n    ","1c84e297":"def feature(df):\n    features=pd.DataFrame(df,columns=['X', 'Y', 'S', 'A', 'Dis',\n       'gameclock', 'Distance','HomeScoreBeforePlay', 'VisitorScoreBeforePlay', 'DefendersInTheBox','PlayerHeight',\n       'PlayerWeight','Temperature', 'Humidity',\n        'stadiumtype', 'weather', \n        'C', 'CB', 'DB','DE', 'DL', 'DT', 'FB', 'FS', 'G', 'HB', 'ILB', 'LB', 'MLB', 'NT', 'OG','OLB', 'OT', 'QB', 'RB', 'S_position', 'SAF', 'SS', 'T', 'TE', 'WR',\n        \"yardsToTouchdown\",\n       'PersonalYard',\n       #'team_yards',\n       #\"rusherTeamScore\",\"defenceTeamScore\",\n        \"diffScore\",\n        'PlayerHeight_offence', 'PlayerWeight_offence', 'S_offence', 'A_offence',\n        'PlayerHeight_defence', 'PlayerWeight_defence', 'S_defence', 'A_defence',\n        'sin_Dir_S','cos_Dir_S','sin_Ori','cos_Ori'])\n    return features   ","2c6f728b":"rusher_df=count_position(rusher_df)","c7a407a6":"df=preprocess(df)","9a50b074":"rusher_df=preprocess(rusher_df)","effb4c07":"#rusher_df,team_yards_df=add_team_yard(rusher_df)","0d5656e9":"rusher_df=add_team_score(rusher_df)","d494d814":"rusher_df=count_yard_to_touchdown(rusher_df)","572596ad":"rusher_df,rusher_yards=add_personal_yard(rusher_df)","ddbc6ac6":"rusher_df=add_average_data(df,rusher_df)","3b56fb26":"rusher_df=rusher_df.dropna()","ebdee274":"features=feature(rusher_df)","7831549c":"train_mean=features.mean(axis=0)","f1b72775":"train_std=features.std(axis=0)","205adf33":"def normalize(features):\n    X=(features-train_mean)\/train_std\n    return X","bdb9c7af":"X=normalize(features)","e4142e5c":"target=pd.Series(rusher_df['Yards'])","7cdf15fc":"train_X,test_X,train_y,test_y=train_test_split(X,target,test_size=0.2)","51f185dd":"import optuna","6c15ce97":"'''\ndef objectives(trial):\n       \n        params = {\n            'criterion': 'entropy', #trial.suggest_categorical('criterion', ['gini', 'entropy']),\n            'n_estimators': trial.suggest_int(\"n_estimators\", 100, 500),\n            'max_depth': trial.suggest_int(\"max_depth\", 4,10),\n            'min_samples_split': trial.suggest_int(\"min_samples_split\", 2,50),\n            'min_samples_leaf': trial.suggest_int('min_samples_leaf',1,10),\n            'random_state': 0,\n            'verbose' : 0,\n            'max_features' : trial.suggest_int('max_features', 1,56)\n        }\n        \n        RFC_optuna=RFC(**params)\n        #\u8a13\u7df4\n        RFC_optuna.fit(train_X,train_y)\n        #\u691c\u8a3c\n        pred_y=RFC_optuna.predict_proba(test_X)\n        \n        #\u5b9f\u6e2c\u5024\u306e\u7d2f\u7a4d\u78ba\u7387\u306e\u30a2\u30ec\u30fc\u3092\u4f5c\u6210\n        test_y_score=np.array([(i >= test_y)*1 for i in range(-99,100)])\n        \n        #\u4e88\u6e2c\u5024\u306e\u7d2f\u7a4d\u78ba\u7387\u306e\u30a2\u30ec\u30fc\u3092\u4f5c\u6210\n        pred_prob_cdf=pd.DataFrame(pred_y,columns=[ \"Yards\"+str(i) for i in RFC_optuna.classes_])\n        pred_prob_cdf=pd.DataFrame(pred_prob_cdf,columns=[ \"Yards\"+str(i) for i in range(-99,100)])\n        pred_prob_cdf.fillna(0,inplace=True)\n        pred_prob_cdf = pred_prob_cdf.cumsum(axis=1)\n        pred_prob=np.array(pred_prob_cdf.values)\n        \n        #\u5b9f\u6e2c\u5024\u3068\u4e88\u6e2c\u5024\u306e\u8aa4\u5dee\u3067\u8a55\u4fa1\n        C=((pred_prob - test_y_score.T)**2).sum().sum()\/(199*len(pred_y))\n        \n        return C\n'''","6642c647":"'''\n# optimize\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6307\u5b9a\u3001n_trials\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8a66\u884c\u932f\u8aa4\u3059\u308b\u56de\u6570\u3092\u6307\u5b9a\nstudy = optuna.create_study()\nstudy.optimize(objectives, n_jobs=-1,n_trials=100)\n'''","e502150c":"'''\nimport plotly\nfrom optuna.visualization import is_available,plot_contour,plot_intermediate_values,plot_optimization_history,plot_parallel_coordinate\n#optuna\u306e\u53ef\u8996\u5316\u304c\u3067\u304d\u308b\u304b\u78ba\u8a8d\noptuna.visualization.is_available()\n'''","623d0c6b":"'''\n#\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u95a2\u4fc2\u6027\u3092\u7b49\u9ad8\u7dda\u56f3\u3068\u3057\u3066\u30d7\u30ed\u30c3\u30c8\noptuna.visualization.plot_contour(study,params=['n_estimators','max_depth','min_samples_split','min_samples_leaf','max_features'])\n#\u5168\u8a66\u884c\u306e\u4e2d\u9593\u5024\u3092\u30d7\u30ed\u30c3\u30c8\noptuna.visualization.plot_intermediate_values(study)\n#\u6700\u9069\u5316\u306e\u904e\u7a0b\u3092\u30d7\u30ed\u30c3\u30c8\noptuna.visualization.plot_optimization_history(study)\noptuna.visualization.plot_parallel_coordinate(study,params=['n_estimators','max_depth','min_samples_split','min_samples_leaf','max_features'])\n'''","45d1520c":"'''\n#optuna\u3067\u898b\u3064\u3051\u305f\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u51fa\u529b\n#best_params=study.best_params\nstudy.best_params\n'''","928b7095":"'''\n#\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u306e\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6 C=0.01245163097304255\nstudy.best_value\n'''","0ad99ed4":"best_params={'criterion': 'entropy',\n             'n_estimators': 421,\n             'max_depth': 10,\n             'min_samples_split': 3,\n             'min_samples_leaf': 6,\n             'max_features': 41,\n             'random_state': 0}","884da6f9":"model = RFC(**best_params)","e0ed47d6":"#\u30e2\u30c7\u30eb\u306b\u3055\u3089\u306b\u5168\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\nrfc=model.fit(X,target)","71ca19c9":"rfc.get_params","7388afc4":"feat_imp=pd.DataFrame(rfc.feature_importances_,index=X.columns)\nfeat_imp.sort_values(0,ascending=False)","37512548":"train_df=rusher_df.iloc[:0,:]","cf1a4cf2":"for (test_df, sample_prediction_df) in tqdm(iter_test):\n    new_df=test_df.groupby(['PlayId','Position']).count()\n    position_count=new_df['GameId'].unstack().fillna(0).astype(int)\n    rusher_df=test_df[test_df['NflId']==test_df['NflIdRusher']]\n    rusher_df=preprocess(rusher_df)\n    test_df=preprocess(test_df)\n    rusher_df=count_position(rusher_df)\n    #rusher_df=rusher_df.merge(rusher_yards,  on=\"NflId\", how=\"left\")\n    #rusher_df = rusher_df.merge(team_yards_df,on='PossessionTeam',how=\"left\")\n    rusher_df=add_team_score(rusher_df)\n    rusher_df=count_yard_to_touchdown(rusher_df)\n    rusher_df=add_average_data(test_df,rusher_df)\n    rusher_df=pd.concat([train_df,rusher_df],sort=False)\n    test_feature=feature(rusher_df)\n    test_feature=test_feature.fillna(0)\n    test_X=normalize(test_feature)\n    pred_prob=rfc.predict_proba(test_X)\n    pred_prob_cdf=pd.DataFrame(pred_prob,columns=[ \"Yards\"+str(i) for i in rfc.classes_])\n    pred_prob_cdf=pd.DataFrame(pred_prob_cdf, columns=[ \"Yards\"+str(i) for i in range(-99,100)])\n    pred_prob_cdf.fillna(0,inplace=True)\n    pred_prob_cdf = pred_prob_cdf.cumsum(axis=1)\n    pred_prob_cdf[pred_prob_cdf>1]=1\n    #pred_prob_cdf.loc[:, :\"Yards-6\"] = 0\n    #pred_prob_cdf.loc[:, \"Yards21\":] = 1\n    sample_prediction_df.iloc[0,:]=pred_prob_cdf.iloc[0,:]\n    env.predict(sample_prediction_df)","ad783762":"sample_prediction_df","56b2b250":"env.write_submission_file()","c75fd85a":"import os\nprint([filename for filename in os.listdir('\/kaggle\/working') if '.csv' in filename])","7bd97a72":"# \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","793fa1d5":"### \u30dd\u30b8\u30b7\u30e7\u30f3\u306e\u4eba\u6570\u3092\u6570\u3048\u308b","88c3c871":"## \u6b63\u898f\u5316","7bb068f7":"# \u30e2\u30b8\u30e5\u30fc\u30eb\u5c0e\u5165","d04bba63":"## optuna\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","7d5703ac":"# \u524d\u51e6\u7406","3cc36215":"# \u4e88\u6e2c"}}