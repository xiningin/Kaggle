{"cell_type":{"140924af":"code","da3e0392":"code","a36ebe6d":"code","8fdc4c90":"code","7e82a18b":"code","ee448edc":"code","bcfdfee4":"code","44c3f0e4":"code","cabdca8a":"code","a3d573e8":"code","03d85d6a":"code","3f1d68d8":"code","bccdf2eb":"code","5fd6b329":"code","e7773e6a":"code","df64ac96":"code","d2d2ebe9":"code","7bf88a24":"code","e903cd1e":"code","e5691772":"code","582b892d":"code","a2010fac":"code","bdcf6cd7":"code","814a6926":"code","0ab85c94":"code","e5cd7a0b":"code","5bc13fca":"code","b2a7bcb8":"code","a0836ee8":"code","c8439aa7":"code","26012bf5":"code","9c9fa003":"code","13839312":"code","a432ea4b":"code","1b586976":"code","c98fa15c":"code","7bf1b890":"code","fedf9cf1":"code","1987898c":"code","216986b8":"code","4fcb970a":"code","025dd995":"code","d6b5039a":"code","e44e47af":"code","9b69796c":"code","08c659cd":"code","d82bc7b1":"code","cc01158b":"code","5e0220fc":"code","fd0b847c":"code","338f6540":"code","3bd2c2f8":"code","bc6a4dde":"code","263052bb":"code","c18443ef":"code","2b773e83":"code","26a35d18":"code","0d2c817a":"code","1fa292f7":"code","aa29fbf6":"code","9866b2ab":"code","0dcf0ff9":"code","1705c9e0":"code","525c4644":"code","45751cda":"code","d99032a2":"code","6c78c6c4":"code","092750d8":"code","cb9c4319":"code","90829020":"code","d31d91b2":"markdown","ca73e3a5":"markdown","6fd4aa07":"markdown","e2cea3cc":"markdown","6a5e857c":"markdown","05e1f466":"markdown","a69dfdca":"markdown","8df90223":"markdown","f3a4c4fd":"markdown","675257c6":"markdown","62284ed8":"markdown","0275a708":"markdown","0e37bf59":"markdown","7d2543c1":"markdown","458dcc76":"markdown","bdf0fd03":"markdown","fd8bcdf4":"markdown","4ad6430f":"markdown","94003659":"markdown","d60a81ab":"markdown","fe63babc":"markdown","0db47486":"markdown","ac2e1590":"markdown","d7795700":"markdown","0d08ebf0":"markdown","07950330":"markdown","2bffa1ae":"markdown","9e181c0f":"markdown","45d2b625":"markdown","8a555d97":"markdown","4e584093":"markdown","3b383782":"markdown","3971de9c":"markdown"},"source":{"140924af":"!pip install nose","da3e0392":"#from google.colab import drive\n#drive.mount('\/content\/drive')","a36ebe6d":"import pickle\nfrom urllib.request import urlopen\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(42)\nnp.random.RandomState(42)\n\nimport warnings\nimport sklearn.exceptions\nwarnings.filterwarnings(\"ignore\", category=sklearn.exceptions.ConvergenceWarning)\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nimport seaborn as sns\n\n#import unittest\nfrom nose.tools import *\n\nimport time\n\nimport statsmodels.api as sm\nfrom scipy import stats\nfrom scipy.stats import norm, skew, kurtosis\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split, TimeSeriesSplit, GridSearchCV,cross_val_score \nfrom sklearn import preprocessing\nfrom sklearn.ensemble import BaggingRegressor, RandomForestRegressor, AdaBoostRegressor\nfrom xgboost.sklearn import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error,r2_score, mean_squared_log_error,mean_squared_error, make_scorer\n","8fdc4c90":"london= pd.read_csv('https:\/\/www.dropbox.com\/s\/z0twef3ygv8budm\/london_merged.csv?dl=1')\nassert_is_not_none(london)\nassert_is_instance(london, pd.DataFrame)\nassert_equal(london.shape, (17414,10))\nlondon.head()","7e82a18b":"london.dtypes","ee448edc":"london.describe()","bcfdfee4":"london.info()","44c3f0e4":"london['timestamp'] = pd.to_datetime(london['timestamp'], format =\"%Y-%m-%d %H:%M:%S\")","cabdca8a":"london['weather_code'].unique()\n#1 = Clear ; mostly clear but have some values with haze\/fog\/patches of fog\/ fog in vicinity\n#2 = scattered clouds \/ few clouds\n#3 = Broken clouds\n#4 = Cloudly\n#7 = Rain\/ light Rain shower\/ Light rain\n#10 = rain with thunderstorm\n#26 = snowfall\n#94 = Freezing Fog\n","a3d573e8":"weather_dict = {1 : 100,  2 : 100,  3 : 100,  4 : 100, \n                7 : 200, 10 : 200, 26 : 200, 94 : 200}\nlondon['weather_code']=london['weather_code'].replace(weather_dict)","03d85d6a":"london['count_log'] = np.log1p(london['cnt'])","3f1d68d8":"def plot_distribution(london,columns,**kwargs ):\n    \"\"\"\n    Function to plot a dataframe feature distribution.\n    Input: \n    df - pandas DataFrame.\n    columns - list of the df columns that should be plotted\n    Output: multiple feature histograms\n    \n    Note: String columns should be dropped before passing to the function.\n    \"\"\"\n    assert_is_not_none(london)\n    assert_is_instance(london, pd.DataFrame)\n    \n    fig, axes = plt.subplots(ncols=len(columns),figsize=(30,5))\n    for axs, col in zip(axes, columns):\n        sns.distplot(london[col], ax=axs,**kwargs)\n    fig.suptitle('Feature distribution')\n    \nplot_distribution(london,london.drop(['timestamp'],axis=1).columns, kde=False)","bccdf2eb":"london.head()","5fd6b329":"def plot_by_time(london,column,main_title,yaxis):\n    \"\"\"\n    Plot values by timestamp.\n    Input:\n    london - pandas DataFrame\n    column - name of the column to plot\n    main_title - string for title of the plot\n    yaxis -string for yaxis label\n    \n    \"\"\"\n    assert_true(column in set(london.columns))\n    \n    \n    ax = london.plot(x='timestamp',y=column, rot=90)\n    plt.title(main_title)\n    plt.ylabel(yaxis)\n    plt.show()\n\n#ax.set_xticklabels(pd.to_datetime(london.timestamp), rotation=90)\nplot_by_time(london,'t1','Temperature by date','Temperature in C')\nplot_by_time(london,'t2','Temperature \"feels like\" by date','Temperature in C')\nplot_by_time(london,'hum','humidity by date','% humidity')\nplot_by_time(london,'wind_speed','Wind speed by date','wind km\/h')\nplot_by_time(london,'cnt','Bike shares by date','count')\nplot_by_time(london,'count_log','Bike shares by date','log of count')","e7773e6a":"london_non_weekend = london[london['is_weekend'] == 0]\nlondon_non_weekend = london_non_weekend.drop(['is_holiday','is_weekend'],axis=1)\nlondon_is_weekend = london[london['is_weekend'] == 1]\nlondon_is_weekend = london_is_weekend.drop(['is_holiday','is_weekend'],axis=1)\nlondon_is_holiday = london[london['is_holiday'] == 1]\nlondon_is_holiday = london_is_holiday.drop(['is_holiday','is_weekend'],axis=1)\nlondon_non_holiday = london[london['is_holiday'] == 0]\nlondon_non_holiday = london_non_holiday.drop(['is_holiday','is_weekend'],axis=1)","df64ac96":"def hourly_plot(df,title):\n    \"\"\"\n    Function for plotting bike shares by hour.\n    input: \n    df - pandas dataframe \n    title - main title of the plot\n    \n    \"\"\"\n    assert_true('timestamp' in set(df.columns))\n    assert_true('cnt' in set(df.columns))\n    \n    df.groupby(by=df.timestamp.dt.hour)['cnt'].mean().plot()\n    plt.title(title)\n    plt.ylabel('count')\n    plt.legend(['workdays','weekend','holidays'],loc=2, fontsize = 'medium')\n    \nhourly_plot(london_non_weekend, 'Bike shares by hour')\nhourly_plot(london_is_weekend, 'Bike shares by hour')\nhourly_plot(london_is_holiday, 'Bike shares by hour')\n","d2d2ebe9":"london.corr()","7bf88a24":"london_is_weekend.corr()","e903cd1e":"london_non_weekend.corr()","e5691772":"def plot_heatmap_corr(df):\n    \"\"\"\n    Plot correlation heatmap from pandas dataframe.\n    Input:pandas dataframe\n    \n    Output: Correlation heatmap\n    \n    \"\"\"\n    assert_is_not_none(df)\n    assert_is_instance(df, pd.DataFrame)\n    \n    f, ax = plt.subplots(figsize=(8, 8))\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n    sns.heatmap(df.corr(), cmap=cmap, vmax=1.0, vmin=-1.0, center=0,\n                square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n    plt.title('Correlation matrix')\n    \nplot_heatmap_corr(london)","582b892d":"def add_non_workday(df):\n    \"\"\"\n    The function is grouping \"is_holiday\" and \"is_weekend\" columns into a new one \"is_non_workday\"\n    Input: pandas DataFrame that contains columns 'is_holiday','is_weekend'\n    \"\"\"\n    assert_true('is_holiday' in set(df.columns))\n    assert_true('is_weekend' in set(df.columns))\n    \n    df['is_non_workday'] = df['is_holiday'] + df['is_weekend']\n    df = df.drop(['is_holiday','is_weekend'],axis=1)\n    \n    assert_true('is_non_workday' in set(df.columns))\n    \n    return df","a2010fac":"def add_month(df):\n    \"\"\"\n    The function is extracting the month of a timestamp into a new column.\n    Input: pandas DataFrame that contains 'timestamp' column\n    \"\"\"\n    assert_true('timestamp' in set(df.columns))\n    \n    df['month'] = df['timestamp'].dt.month\n    \n    assert_true('month' in set(df.columns))\n    return df","bdcf6cd7":"def add_year(df):\n    \"\"\"\n    The function is extracting the year of a timestamp into a new column.\n    Input: pandas DataFrame that contains 'timestamp' column\n    \"\"\"\n    assert_true('timestamp' in set(df.columns))\n    \n    df['year'] = df['timestamp'].dt.year\n    \n    assert_true('year' in set(df.columns))\n    return df","814a6926":"def add_day_of_week(df):\n    \"\"\"\n    The function is extracting the day of the week of a timestamp into a new column.\n    Input: pandas DataFrame that contains 'timestamp' column\n    \"\"\"\n    assert_true('timestamp' in set(df.columns))\n    \n    df['day']=df['timestamp'].dt.dayofweek\n    \n    assert_true('day' in set(df.columns))\n    return df\n","0ab85c94":"def add_hour(df):\n    \"\"\"\n    The function is extracting the hour of a timestamp into a new column.\n    Input: pandas DataFrame that contains 'timestamp' column\n    \"\"\"\n    assert_true('timestamp' in set(df.columns))\n    \n    df['hour'] = df['timestamp'].dt.hour\n    \n    assert_true('hour' in set(df.columns))\n    return df","e5cd7a0b":"def add_encode(df, column, max_value):\n    \"\"\"\n    The function is encoding time series cyclical features with sin and cos.\n    Input: \n    ---------\n    df - pandas DataFrame\n    column - column name\n    max_value - column max value\n    Output: \n    -----------\n    -same dataframe with _sin and _cos columns added\n    \"\"\"\n    assert_true(column in set(df.columns))\n    \n    df[column + '_sin'] = np.sin(2 * np.pi * df[column] \/ max_value)\n    df[column + '_cos'] = np.cos(2 * np.pi * df[column] \/ max_value)\n    \n    assert_true((column + '_sin') in set(df.columns))\n    assert_true((column + '_cos') in set(df.columns))\n    return df","5bc13fca":"london=add_non_workday(london)\nadd_month(london)\nadd_day_of_week(london)\nadd_hour(london)\nadd_year(london)\nadd_encode(london,'hour',23)\nadd_encode(london,'month',12)","b2a7bcb8":"london[london['count_log']<6].groupby(by='season').count()","a0836ee8":"london[london['count_log']<6].groupby(by='day').count()","c8439aa7":"london[london['count_log']<6].groupby(by='month').count()","26012bf5":"london[london['count_log']<6].groupby(by='hour').count()","9c9fa003":"london[london['count_log']<6].groupby(by='is_non_workday').count()","13839312":"def add_night_hours(df):\n    \"\"\"\n    The function is creating a new column \"is_night\". It requires a column with hours.\n    If the hour is from 8:00 to 20:00 the data is classified as 0, if not in this interval it's 1.\n    The purpose is try to to catch the sunlight status, but it's not taking in acount the time of the year and summertime.\n    \n    Input:\n    df- pandas DataFrame, containing 'hour' column\n    Output :\n    Pandas DataFrame with added \"is_night column\"\n    \"\"\"\n    assert_true('hour' in set(df.columns))\n    \n    df['is_night'] = 0\n    df.loc[(df['hour'] < 8) | (df['hour'] > 20), 'is_night'] = 1\n    \n    assert_true('is_night' in set(df.columns))\n    return df","a432ea4b":"add_night_hours(london)\n","1b586976":"def sns_hist(data,title):\n    \"\"\"\"\n    Function to plot seaborn histogram.\n    \"\"\"\n    assert_is_not_none(data)\n    \n    sns.distplot(data, fit=norm)\n    plt.title(title)\n    plt.ylabel('Density')","c98fa15c":"sns_hist(london[london['is_night']==1]['count_log'],\"Histogram of logarithm transformed count of bike shares during the night.\")","7bf1b890":"sns_hist(london[london['is_night']==0]['count_log'],\"Histogram of logarithm transformed count of bike shares during the day.\")","fedf9cf1":"london_df = london.drop(['timestamp','cnt'],axis=1)\nX = london_df.drop(['count_log'], axis=1)\ny = london_df['count_log']\nscaler_x = preprocessing.MinMaxScaler()\nX =  pd.DataFrame(scaler_x.fit_transform(X), columns = X.columns)","1987898c":"def df_split(df,train_percent):\n    \"\"\"\n    Function to split DataFrame\/Series on percentage value.\n    Input:\n    -------\n    -df - pandas DataFrame\n    -train_percent - the percentage \/100 of the data that we want to split. value between [0,1]\n    \n    Output:\n    --------\n    -two pandas DataFrames\n    \"\"\"\n    assert_is_not_none(df)\n    assert_greater(train_percent,0)\n    assert_less(train_percent,1)\n    \n    split_index = int(train_percent * len(df))\n    train = df.iloc[:split_index]\n    test = df.iloc[split_index:]\n    return train,test","216986b8":"X_train,X_test = df_split(X,0.7)\ny_train,y_test = df_split(y,0.7)","4fcb970a":"X_train.shape","025dd995":"y_train.shape","d6b5039a":"X_test.shape","e44e47af":"y_test.shape","9b69796c":"london.shape","08c659cd":"sns_hist(pd.DataFrame(y_train),\"Histogram of logarithm transformed count of bike shares train set\")","d82bc7b1":"sns_hist(pd.DataFrame(y_test),\"Histogram of logarithm transformed count of bike shares test set\")\n#sns.distplot(pd.DataFrame(y_test), fit=norm)\n#plt.title(\"Histogram of logarithm transformed count of bike shares test set\")\n#plt.ylabel('Density')","cc01158b":"def rmsle(y, y_pred):\n    \"\"\"\n    Root squared logarithmic loss function.\n    The function is trimming the negative values and replace them with 0. After that calculates the RMSLE.\n    Input:\n    y - true values\n    y_pred - predicted values\n\n    Output: RMSLE\n    \"\"\"\n    assert(y.shape == y_pred.shape)\n    y = np.expm1(y)\n    y_pred=y_pred.clip(min=0)\n    y_pred=y_pred.clip(max=10)\n    y_pred = np.expm1(y_pred)\n    return np.sqrt(mean_squared_log_error( y, y_pred))\n\n\nrmsle_scorer = make_scorer(rmsle, greater_is_better=False)\ntscv = TimeSeriesSplit(n_splits=5)","5e0220fc":"columns = ['weather_code','season','is_non_workday']\nX_dummies = pd.get_dummies(X_train, columns=columns)\nX_dummies = X_dummies.drop(['day','year','month'],axis=1)\n","fd0b847c":"def test_algorithms():\n    \n    \"\"\"\n    A custom function designed for cross validation score on \"london bike sharing dataset\".\n    The function is comparing the following algorithms :\n    \"LinearRegression\", \"Random Forrest\", \"XGBoost\", \"SVR\" , \"AdaBoost\",\"BaggingRegressor\",\n    on \"London bicycle sharing dataset\" with mean RMSLE error, standard deviation on RMSLE and execution time. \n    The output of this function is a pandas dataframe.\n    \"\"\"\n    names = [\"LinearRegression\", \"Random Forrest\", \"XGBoost\", \"SVR\" , \"AdaBoost\",\n             \"BaggingRegressor\"]\n    \n    regressors = [\n        LinearRegression(),\n        RandomForestRegressor(random_state=42),\n        XGBRegressor(objective ='reg:squarederror',random_state=42),\n        SVR(),\n        AdaBoostRegressor(random_state=42),\n        BaggingRegressor(random_state=42)    \n        ]\n    \n    data_X = [X_dummies,X_train ,X_train ,X_dummies ,X_train ,X_train ]\n    reg_columns=['algorithm','score_rmsle_mean','score_std','time']\n    reg_performance = pd.DataFrame(columns=reg_columns)\n    print('Please wait 1-2 minutes for all algorithms to complete.')\n    for name, regressor, X_trains in zip(names, regressors,data_X):\n        time_start = time.time()\n        cv_results = cross_val_score(regressor, X_trains,y_train, cv=5 ,scoring = rmsle_scorer)\n        time_end = round(time.time() - time_start,3)\n        mean_score = round(-cv_results.mean(),4)\n        std_score = round(cv_results.std(),4)\n        t= pd.DataFrame([[name,mean_score,std_score,time_end]],columns = reg_columns)\n        reg_performance = reg_performance.append(t, ignore_index=True)\n        print(name , ' RMSLE = ',mean_score , 'with std=',std_score ,\" execution_time =  \", time_end,\"s\")\n    return reg_performance\nreg_performance = test_algorithms()\nreg_performance","338f6540":"def plot_performance(df,x,y):\n    \"\"\"\n    Function to bar plot algorithm performance.\n    Inputs\n    -------\n    - df: DataFrame generated by test_algorithms() function\n    - x: x column name, usually 'algorithm'\n    - y: y column name - 'score_rmsle_mean' or 'time'\n    \n    Returns\n    -------\n    Barplot of the performance\n    \"\"\"\n    assert_is_not_none(df)\n    assert_true(x in set(df.columns))\n    assert_true(y in set(df.columns))\n    \n    \n    sns.barplot(data=df, x=x,y=y)\n    plt.title('Performance of different algorithms')\n    plt.xticks( rotation='vertical')\n\n\nplot_performance(reg_performance, x='algorithm',y='score_rmsle_mean')\n","3bd2c2f8":"#################CAUTION LONG_RUNNING_CODE#####################################\n\n\"\"\"\nThe following code is used to optimize 3 machine learning algorithms and export\nthe trained models to a pickle file. Uncomment if needed to check the results.\n\n\"\"\"\n\n\ndef save_pickle(model):\n    \"\"\"\n    Export sklearn trained model to a file.\n    Input:\n    ----------\n    - model:sklearn trained model\n    \"\"\"\n    pickle.dump(model, open(model.__class__.__name__ + '.model', 'wb'))\n    print('Model saved as ' + model.__class__.__name__ + '.model')\n\n###############################################################################\n############################XGBoost############################################\n#grid_values = {'learning_rate': [0.001, 0.01, 0.1, 0.3],\n#               'n_estimators':[100,700,1000,1200],\n#               'max_depth': [3,5,8,10],\n#               #'min_child_weight': [1,2,3,4],\n#               #'gamma':[0, 0.1, 0.2, 0.3]\n#               #'reg_alpha': [0.1,1,200,500],#L1\n#               #'reg_lambda':[1,200,500],#L2\n#               }\n#\n#\n#\n#grid_xgb = GridSearchCV(XGBRegressor(objective = 'reg:squarederror',early_stopping_rounds=20, eval_metric=\"rmse\",random_state=42),\n#                        n_jobs=-1, param_grid = grid_values,cv=tscv,scoring = rmsle_scorer)\n#grid_xgb.fit(X_train, y_train)\n#save_pickle(grid_xgb.best_estimator_)\n#pd.DataFrame(grid_xgb.cv_results_).to_csv('XGB_cv_results.csv')\n##############################################################################\n######################RandomForrest###########################################\n#\n#grid_values_rf = {'n_estimators': [10,100,500,750,1000,1200],\n#                  'max_depth' : [5,7,8,9],\n#                  'min_samples_leaf': [5,10,25,50],\n#                #'max_features': ['auto', 'sqrt'],\n#                }\n#\n#grid_rf = GridSearchCV(RandomForestRegressor(random_state=42), param_grid = grid_values_rf,cv=tscv,scoring = rmsle_scorer)\n#grid_rf.fit(X_train, y_train)\n#save_pickle(grid_rf.best_estimator_)\n#pd.DataFrame(grid_rf.cv_results_).to_csv('RF_cs_results.csv')\n################################################################################\n########################BaggringRegressor#######################################\n#grid_values_br = {'n_estimators':[10,100,500,1000]}\n#\n#grid_br = GridSearchCV(BaggingRegressor(random_state=42) , param_grid = grid_values_br,cv=tscv,scoring = rmsle_scorer)\n#grid_br.fit(X_train, y_train)\n#\n##################save_pickle(grid_br.best_estimator_)#####skipped due very long size on disk\n#pd.DataFrame(grid_br.cv_results_).to_csv('BR_cv_results.csv')\n################################################################################\n################################################################################","bc6a4dde":"#!cp 'XGBRegressor.model' 'drive\/My Drive\/XGBRegressor.model'\n#!cp 'XGB_cv_results.csv' 'drive\/My Drive\/XGB_cv_results.csv'\n\n#!cp 'RandomForestRegressor.model' 'drive\/My Drive\/RandomForestRegressor.model'\n#!cp 'RF_cs_results.csv' 'drive\/My Drive\/RF_cs_results.csv'","263052bb":"def load_pickle(url):\n    \"\"\"\n    Funtion to load existing trained model, previously saved by pickle.\n    Inputs\n    -------\n    - url: DataFrame generated by test_algorithms() function\n    \n    Returns\n    -------\n    - sklearn trained model\n    \n    \"\"\"\n    try:\n        loaded_model = pickle.load(urlopen(url))\n        print('Model loaded.')\n        return loaded_model\n    except:\n        print('Unable to load the model from url.')\n        return 0","c18443ef":"xgb_model_url = 'https:\/\/www.dropbox.com\/s\/zihko63rehvmpb6\/XGBRegressor.model?dl=1'\nrf_model_url = 'https:\/\/www.dropbox.com\/s\/9o62bwl4d8zmqx8\/RandomForestRegressor.model?dl=1'\n\n\nxgb_results_url = 'https:\/\/www.dropbox.com\/s\/tb7125oq2g5fqt4\/XGB_cv_results.csv?dl=1'\nrf_results_url = 'https:\/\/www.dropbox.com\/s\/dluxmpewpu3fen7\/RF_cs_results.csv?dl=1'\n\n\nbr_results_url = 'https:\/\/www.dropbox.com\/s\/hkeselt1tbnsgx0\/BR_cv_results.csv?dl=1'","2b773e83":"xgb_tuned = load_pickle(xgb_model_url)\nassert_is_not_none(xgb_tuned)\nrf_tuned = load_pickle(rf_model_url)\nassert_is_not_none(rf_tuned)","26a35d18":"xgb_cv = pd.read_csv(xgb_results_url)\nrf_cv = pd.read_csv(rf_results_url)\nbr_cv = pd.read_csv(br_results_url)\n\nassert_is_not_none(xgb_cv)\nassert_is_not_none(rf_cv)\nassert_is_not_none(br_cv)\n","0d2c817a":"xgb_cv[xgb_cv['rank_test_score']<4]","1fa292f7":"rf_cv[rf_cv['rank_test_score']<4]","aa29fbf6":"br_cv[br_cv['rank_test_score']<4]","9866b2ab":"def convert_df(df,name):\n    \"\"\"\n    Function to convert the cv_result DataFrame for plotting.\n    \n    Inputs\n    -------\n    - df: DataFrame generated by GridSearchCV\n    - name: name of the algorithm tuned with GridSearchCV\n    \n    Returns\n    -------\n    - converted DataFrame suitable for barplot\n    \"\"\"\n    assert_is_not_none(df)\n    assert_is_instance(df, pd.DataFrame)\n    test_set = set(['rank_test_score','split0_test_score','split1_test_score','split2_test_score',\n                   'split3_test_score','split4_test_score'])\n    assert_true(test_set.issubset(set(df.columns)))\n\n    \n    t = df[df['rank_test_score']==1][['split0_test_score','split1_test_score','split2_test_score','split3_test_score','split4_test_score']]\n    t = -t.T\n    t=t.reset_index()\n    t.columns=['algorithm','RMSLE_score']\n    t.algorithm = name\n    return t\nclean = convert_df(xgb_cv,'XGBoost')\nclean = clean.append(convert_df(rf_cv,'RandomForest'))\nclean = clean.append(convert_df(br_cv,'BaggingRegressor'))\nclean","0dcf0ff9":"plot_performance(clean, x='algorithm',y='RMSLE_score')","1705c9e0":"def plot_importance(model):\n    \"\"\"\n    Fuction to plot variable importance from machine learning model.\n    Note: the model requires to have \"model.feature_importances_\".\n    \n    Inputs\n    -------\n    - model: a model with a object \".feature_importances_\"\n\n    Returns\n    -------\n    - feature importance plot\n    \n\n    \"\"\"\n    assert_is_not_none(model.feature_importances_)\n\n    feature_importance = model.feature_importances_\n    # make importances relative to max importance\n    feature_importance = 100.0 * (feature_importance \/ feature_importance.max())\n    sorted_idx = np.argsort(feature_importance)\n    pos = np.arange(sorted_idx.shape[0]) + .5\n    plt.barh(pos, feature_importance[sorted_idx], align='center')\n    plt.yticks(pos, X_train.columns[sorted_idx])\n    plt.xlabel('Relative Importance')\n    plt.title(f'Variable Importance {model.__class__.__name__}')\n    plt.show()\n\nplot_importance(xgb_tuned)\nplot_importance(rf_tuned)","525c4644":"def plot_scores(model,X_train,y_train):\n    \"\"\"\n    Functon to plot scores RMSE, MAE, R^2, RMSLE from model.\n    \n    Inputs\n    -------\n    - model: a trained model\n    - X_train: X_train or X_test DataFrame\/Series\n    - y_train: y_train or y_test DataFrame\/Series\n    \n    \n    \"\"\"\n\n    assert(y_train.shape[0] == X_train.shape[0])\n    \n    print(\"Model parameters \", model.__class__.__name__)\n    prediction_train = np.expm1((model.predict(X_train).clip(min=0)))\n    y_train = np.expm1(y_train)\n    print(\"Root Mean Squared Error: \" + str(np.sqrt(mean_squared_error(y_train, prediction_train))))\n    print(\"Mean Absolute Error: \" + str(mean_absolute_error(y_train, prediction_train)))\n    print(\"R^2 Coefficient of Determination: \" + str(r2_score(y_train, prediction_train)))\n    print('RMSLE:', np.sqrt(mean_squared_log_error(y_train, prediction_train)))\n    ","45751cda":"plot_scores(xgb_tuned,X_test,y_test)","d99032a2":"plot_scores(rf_tuned,X_test,y_test)","6c78c6c4":"algo_xgb = xgb_tuned.predict(X_test)\nalgo_rf = rf_tuned.predict(X_test)\nmean =  (np.expm1(algo_xgb) + np.expm1(algo_rf))\/2\nmean_log = np.log1p(mean)\nprint(\"RMSLE of combined XGBoost and Random Forrest = \",rmsle(y_test,mean_log))","092750d8":"\ndef residual_plot(y_test, y_predicted,main_title):\n    \"\"\"\n    Function to plot the residual distribution calculated from y_test and y_predicted.\n    \n    Inputs\n    -------\n    - y_test: the log transformed target values\n    - y_predicted: raw predictions from the algorithm\n    - main_title: main title of the plot\n    \n    Returns\n    -------\n    - a plot containing 3 subplots: Scatter plot, Histogram and Q-Q plot\n    \n    \n    \"\"\"\n    res =  np.expm1(y_test) - np.expm1(y_predicted)\n    fig, axs = plt.subplots(1,3, figsize=(25, 5))\n    ##D\u2019Agostino\u2019s K^2 Test\n    stat, p = stats.normaltest(res)\n    print(\"Performing a D\u2019Agostino\u2019s K^2 Test for a normal distribution of residuals.\")\n    print(\"H0 = The distribution is Gaussian.P value to reject H0 is p= 0.05 = 5%\")\n    print('Statistics=%.3f, p=%.5f' % (stat, p))\n    # interpretation of the test\n    alpha = 0.05\n    if p > alpha:\n        print(\"failed to reject H0 (H0 = The distribution is Gaussian).Can't accept any hypothesis. \")\n    else:\n        print('The distribution does not look Gaussian (H0 is rejected)')\n    #End of D\u2019Agostino\u2019s K^2 Test\n    #Begin of plotting\n    plt.suptitle(f'{main_title} ; mean_residual =  {res.mean():.1f}, std= {res.std():.1f},  skew =  {res.skew():.4f} , kurtosis= {res.kurtosis():.2f}'  )\n    axs[0].title.set_text('Scatter Plot y_test vs residuals(true-predicted)')\n    axs[0].scatter(np.expm1(y_test),res)\n    axs[1].title.set_text('Histogram of residuals')\n    sns.distplot(res, fit=norm, ax = axs[1]);\n    axs[2].title.set_text('Q-Q plot')\n    sm.qqplot(res, stats.t, distargs=(4,),line = 's', ax=axs[2])\n    plt.show()\n\nresidual_plot(y_test, xgb_tuned.predict(X_test) ,\"Residual plots of XGBoost predictions\")\nresidual_plot(y_test, rf_tuned.predict(X_test) ,\"Residual plots of RandomForrest predictions\")\n\n","cb9c4319":"print('---------Model evaluation on train set---------------')\nplot_scores(xgb_tuned,X_train,y_train)\nprint('\\n--------Model evaluation on test set---------------')\nplot_scores(xgb_tuned,X_test,y_test)\n\nprint('\\n---------Model evaluation on train set---------------')\nplot_scores(rf_tuned,X_train,y_train)\nprint('\\n--------Model evaluation on test set---------------')\nplot_scores(rf_tuned,X_test,y_test)","90829020":"target_rmsle = np.log(1.25)\ntarget_rmsle","d31d91b2":"The \"cv_results\" from the GridSearchCV are also exported and the code below shows the top 3 hyperparameter combinations, their RMSLE score and training time of every algorithm.","ca73e3a5":"## References:  \n[1] London bike sharing dataset - https:\/\/www.kaggle.com\/hmavrodiev\/london-bike-sharing-dataset  \n[2] Source of London bike usage - https:\/\/tfl.gov.uk\/info-for\/open-data-users\/our-open-data#on-this-page-5  \n[3] MSLE - https:\/\/peltarion.com\/knowledge-center\/documentation\/modeling-view\/build-an-ai-model\/loss-functions\/mean-squared-logarithmic-error  \n[4] MAE; R^2; RMSLE - https:\/\/hrngok.github.io\/posts\/metrics\/  \n[5] RMSE vs RMSLE - https:\/\/medium.com\/analytics-vidhya\/root-mean-square-log-error-rmse-vs-rmlse-935c6cc1802a  \n[6] Choosing an evaluation metric - https:\/\/towardsdatascience.com\/how-to-select-the-right-evaluation-metric-for-machine-learning-models-part-1-regrression-metrics-3606e25beae0  \n[7] Deal with highly skewed data - https:\/\/becominghuman.ai\/how-to-deal-with-skewed-dataset-in-machine-learning-afd2928011cc  \n[8] Common variance stabilizing transformations  - https:\/\/stats.stackexchange.com\/questions\/18844\/when-and-why-should-you-take-the-log-of-a-distribution-of-numbers\/18852  \n[9] London bike sharing data exploration - https:\/\/medium.com\/@AJOhrn\/data-footprint-of-bike-sharing-in-london-be9e11425248  \n[10] Bike sharing kaggle competition - https:\/\/www.kaggle.com\/c\/bike-sharing-demand  \n[11] One-hot encoder on ensemble models - https:\/\/towardsdatascience.com\/one-hot-encoding-is-making-your-tree-based-ensembles-worse-heres-why-d64b282b5769  \n[12] TimeSeriesSplit - https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.TimeSeriesSplit.html  \n[13] TimeSeries nested cross validation - https:\/\/towardsdatascience.com\/time-series-nested-cross-validation-76adba623eb9  \n[14] Avoiding data leakage in ML - https:\/\/conlanscientific.com\/posts\/category\/blog\/post\/avoiding-data-leakage-machine-learning\/  \n[15] Random Forest tuning - https:\/\/towardsdatascience.com\/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74  \n[16] Bike sharing map - https:\/\/bikesharemap.com\/london\/#\/12\/-0.0691\/51.4535\/  \n[17] Skewness and kurtosis - https:\/\/brownmath.com\/stat\/shape.htm  \n[18] Leptokurtic distribution - https:\/\/www.investopedia.com\/terms\/l\/leptokurtic.asp  \n[19] Normality test in python - QQ plot; Shapiro-Wilk Test;D\u2019Agostino\u2019s K^2 Test; Anderson-Darling Test; - https:\/\/machinelearningmastery.com\/a-gentle-introduction-to-normality-tests-in-python\/  \n[20] Q-Q plot and normality tests Medium article - https:\/\/medium.com\/@rrfd\/testing-for-normality-applications-with-python-6bf06ed646a9  \n[21] Feature importance in ensemble models - https:\/\/scikit-learn.org\/stable\/auto_examples\/ensemble\/plot_gradient_boosting_regression.html  \n[22] Comparing Regression models - https:\/\/www.kaggle.com\/ankitjha\/comparing-regression-models  \n[23] QQPLot interpretation - https:\/\/stats.stackexchange.com\/questions\/101274\/how-to-interpret-a-qq-plot\/101290#101290  \n[24] QQPlot - Spring 2016 - https:\/\/math.illinois.edu\/system\/files\/inline-files\/Proj9AY1516-report2.pdf  \n[25] https:\/\/medium.com\/data-distilled\/residual-plots-part-2-normal-qq-plots-c220ee9ed9fc  \n[26] Create a diagnostic plots - https:\/\/robert-alvarez.github.io\/2018-06-04-diagnostic_plots\/  \n[27] Interpreting residual plots to improve regression - http:\/\/docs.statwing.com\/interpreting-residual-plots-to-improve-your-regression\/#transform  \n[28] Diagnose residual plots in regression - https:\/\/www.analyticsvidhya.com\/blog\/2013\/12\/residual-plots-regression-model\/  \n[29] How to check the quality of regression model - https:\/\/towardsdatascience.com\/how-do-you-check-the-quality-of-your-regression-model-in-python-fa61759ff685  \n[30] Optimize RMSLE in XGBoost - https:\/\/www.kaggle.com\/c\/grupo-bimbo-inventory-demand\/discussion\/22759  \n[31] RMSLE interpretation - https:\/\/books.google.bg\/books?id=WaZ-DwAAQBAJ&pg=PA637&lpg=PA637&dq=rmsle+score+meaning&source=bl&ots=RuzEardmbM&sig=ACfU3U0sokwpzgXKPBjRSGEY6oORYwvsbQ&hl=en&sa=X&ved=2ahUKEwiklMiSo7TlAhXRoFwKHR-jCXcQ6AEwE3oECAkQAg#v=onepage&q=rmsle%20score%20meaning&f=false  \n[32] XGBoost docs - https:\/\/xgboost.readthedocs.io\/en\/latest\/parameter.html  \n[33] XGBoost tuning - http:\/\/www.fantasyfutopia.com\/python-for-fantasy-football-random-forest-and-xgboost-hyperparameter-tuning\/","6fd4aa07":"The grouping above shows that hourly grouping is separating the two distributions. The daylight could be a crucial factor that is creating two distributions of the data. A new column \"is_night\" is created that is approximately separating the data.","e2cea3cc":"## 1.Data Analysis and exploration\n\n### Metadata:\n\"timestamp\" - *timestamp field for grouping the data*  \n\"cnt\" - *the count of a new bike shares*  \n\"t1\" - *real temperature in C*  \n\"t2\" - *temperature in C \"feels like\"*  \n\"hum\" - *humidity in percentage*  \n\"wind_speed\" - *wind speed in km\/h*  \n\"weather_code\" - *category of the weather*  \n\"is_holiday\" - *boolean field - 1 holiday \/ 0 non holiday*  \n\"is_weekend\" - *boolean field - 1 if the day is weekend*   \n\"season\" - *category field meteorological seasons: 0-spring ; 1-summer; 2-fall; 3-winter.*  \n\n       \n       \n  \n\n\n\"weathe_code\" category description:  \n*1 = Clear ; mostly clear but have some values with haze\/fog\/patches of fog\/ fog in vicinity  \n2 = scattered clouds \/ few clouds  \n3 = Broken clouds  \n4 = Cloudy  \n7 = Rain\/ light Rain shower\/ Light rain  \n10 = rain with thunderstorm  \n26 = snowfall  \n94 = Freezing Fog*","6a5e857c":"The distribution of \"cnt\" column does not looks like Gaussian. It is more similar to \"Exponential-logarithmic distribution\" and it's highly skewed at the left. The column \"count_log\" represents the transformed of \"cnt\" column with \"log1p\" numpy function. The data contains zero values, so \"log1p\" adds 1 to the data and then calculates the natural logarithm function. There are different methods to transform the target variable to more Gaussian distribution. Some of the methods are : \"square root function\" , \"logarithmic function\", \"Box Cox transformation\". The transformation reduces the variance in the data and helps to reduce the effect of outliers in the data. If the target variable distribution is more likely to Gaussian, this will help the distribution of residuals also to be more likely to Gaussian. The distribution of \"coulnt_log\" columns looks \"Bimodal Gaussian\" (this is not confirmed by statistical test, just a visually interpretation). The distribution of other columns looks good, doesn't need any transformations. The column \"is_holiday\" looks highly imbalanced, maybe this could be grouped with \"is_weekend\" in a new column to represent a working day or not.","05e1f466":"## 3.6.Analysing residuals","a69dfdca":"## 3.4.Feature importance","8df90223":"Both algorithms performed great on the train set - low bias. The difference between train and test set scores shows high variance.","f3a4c4fd":"With the XGBoost the best achieved RMSLE score is 0.2611, converted to a standard deviation is e<sup>0.2611<\/sup> is 1.30. So the upper and lower boundary of probability interval, calculated with \u00b11standart deviation are 1.30 times greater and lesser than the actual prediction (similar example in [31] - page637). If we take the average of transformed predictions of both algorithms the RMLSE score is 0.2557. Converted this to a standard deviation is e<sup>0.2557<\/sup> is 1.29 times of a prediction.  \nThe XGBoost have overfitting problems, even overfits on test set, when the predictions on the both sets are good, but on production have poor performance.","675257c6":"# London Bike sharing demand predicton\n## Machine learning algorithms for prediction of bike sharing demand in London.\n\n\n## Author: Hristo Mavrodiev\nProject requirements - [link](https:\/\/softuni.bg\/downloads\/svn\/Data-Science\/June-2019\/09.%20Exam\/assessment-guidelines.txt)\n\n\n\n![alt text](https:\/\/imgs.xkcd.com\/comics\/timeline_of_bicycle_design.png)\n   \n   XKCD.com\n","62284ed8":"## 3.1.Train test split\nThe data should be separated to train and test sets, also the training set will be splitted for cross validation. As per [14] and to avoid \"data leakage\" - the training and testing sets are splitted by a single date. This means there there is no shuffling in the data and simulates the case when the testing set is in the future. The graphic below shows the process of splitting and cross validation used by this research. The algorithm is always trained with past data and validated with future data.","0275a708":"The XGBoost is performing better compared to the Random Forest,another possible optimization is to take the mean of the 2 algorithms. ","0e37bf59":"Please wait 1 minute for the performance tests, if you want to speed it up, just remove SVR() from **regressors** variable and the 4<sup>th<\/sup> element of **data_X** variable.","7d2543c1":"<img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAeMAAADiCAYAAAB9XK8pAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAACHEAAAjBIAAQpUAAB82gAAbysAAQeQAAA9DgAAFqK1kcDZAAAMKWlDQ1BJQ0MgUHJvZmlsZQAAWMOtV3dUk8kWn68kISGhBUKREnoTpQgEkBpaAAGpgo2QBBJKjAlBxY4sKrAWVESwoqsiiq4FkEVF7GVR7H2xoKKsi7rYUHmTBNB1z\/vjnfPuOfPNL3fu3Pu7NzNzZgDQjOVKJDmoFgC54jxpXFgQc0JKKpP0CGBAG2gAFjDi8mSSwNjYKABlqP+nvLsBEEV\/1UnhC\/xvos0XyHgAILEQp\/NlvFyIDwKAe\/Ak0jwACD1QbzkjTwIxEbIEulJIEGIrBc5UYZYCp6twlNImIY4NcRoAalQuV5oJgIaCFzOflwn9aJRB7Czmi8QQt0DsxxNy+RB\/hnhkbu40iDXtILZL\/85P5j98pg\/75HIzh7EqF6WoBYtkkhzuLPD\/ltwc+VAMS9ioQml4nCJnRd2yp0UqMBXis+L06BiIdSC+JuIr7RX4qVAenjho\/4EnY8OaAQYAKJXPDY6E2BhiC3FOdNSg3i9DFMqBGNYeTRDlcRJUc1G+dFrcoH90pkAWEj+EuVJlLIVNiTw7MXDQ50ahgDPks7lAmJCs4olezhclRUOsAfE9WXZ85KDNiwIhO3rIRiqPU3CG\/zkGMqShcSobzCpXNpQX5i0UcaIHcVSeMCFcNRebwuMquRlAnCWQTYga4skXBIeo8sIKBeLEQf5YuSQvKG7QfpskJ3bQHmsR5IQp9BYQt8vy44fm9ubBxabKFweSvNgEFTdcN4sbEavigDuAKMAGwYAJ5LClg2kgC4jaexp74C\/VSCjgAinIBALgNKgZmpGsHBHDbzwoAH9CJACy4XlBylEByIf6L8Na1dcJZChH85UzssFTiHNBJMiBv+XKWeLhaEngCdSI\/hWdB7nmwKYY+5eOqTmkI4YQg4nhxFCiPW6E++E+eBT8BsDmirNwryFe3+wJTwkdhEeE64ROwu2pokLpD8yZYBzohBxDB7NL\/z473AZ6dceDcF\/oH\/rGGbgRcMLHwEiBuD+M7Q6133OVD2f8rZaDvsjOZJSsTw4g2\/3IQMNBw33Yi6JS39dCxSt9uFrs4ZEf82B\/Vz8+7CN\/tMSWYAewM9hx7BzWgjUCJnYMa8IuYkcUeHhtPFGujaFocUo+2dCP6F\/xuIMxFVWTOdc5dzt\/HhwDeYKZeYrNwp4mmSUVZQrzmIHwtBYwOWLeqJFMV2cXeIoqzn7V0fKWoTzTEcb5b7pF5gD4zhoYGGj5pou8DMCBIwBQ7nzT2XbB7XwegLNreXJpvkqHKz4EQAGacKcYAlN4dtnBjFyBB\/ABASAERIAYkABSwBRYZyFcp1IwA8wBC0ExKAUrwBpQBTaBrWAn2AP2g0bQAo6D0+ACuAyug7twrXSBl6AXvAP9CIKQEBpCRwwRM8QacURcERbih4QgUUgckoKkIZmIGJEjc5BFSClSjlQhW5Ba5FfkMHIcOYd0ILeRh0g38gb5hGIoFdVFTVAbdDTKQgPRSDQBnYxmotPRArQIXYZWojXobrQBPY5eQK+jnehLtA8DmDrGwMwxJ4yFsbEYLBXLwKTYPKwEq8BqsHqsGf7TV7FOrAf7iBNxOs7EneB6DccTcR4+HZ+Hl+FV+E68AT+JX8Uf4r34VwKNYExwJHgTOIQJhEzCDEIxoYKwnXCIcArunS7COyKRyCDaEj3h3kshZhFnE8uIG4h7ia3EDuJjYh+JRDIkOZJ8STEkLimPVExaR9pNOka6QuoifVBTVzNTc1ULVUtVE6sVqlWo7VI7qnZF7ZlaP1mLbE32JseQ+eRZ5OXkbeRm8iVyF7mfok2xpfhSEihZlIWUSko95RTlHuWturq6hbqX+nh1kfoC9Ur1fepn1R+qf6TqUB2obOokqpy6jLqD2kq9TX1Lo9FsaAG0VFoebRmtlnaC9oD2QYOuMUqDo8HXmK9RrdGgcUXjlSZZ01ozUHOKZoFmheYBzUuaPVpkLRstthZXa55WtdZhrZtafdp0bRftGO1c7TLtXdrntJ\/rkHRsdEJ0+DpFOlt1Tug8pmN0SzqbzqMvom+jn6J36RJ1bXU5ulm6pbp7dNt1e\/V09MboJenN1KvWO6LXycAYNgwOI4exnLGfcYPxSd9EP1BfoL9Uv17\/iv57gxEGAQYCgxKDvQbXDT4ZMg1DDLMNVxo2Gt43wo0cjMYbzTDaaHTKqGeE7gifEbwRJSP2j7hjjBo7GMcZzzbeanzRuM\/E1CTMRGKyzuSESY8pwzTANMt0telR024zupmfmchstdkxsxdMPWYgM4dZyTzJ7DU3Ng83l5tvMW8377ewtUi0KLTYa3HfkmLJssywXG3ZZtlrZWY1zmqOVZ3VHWuyNctaaL3W+oz1extbm2SbxTaNNs9tDWw5tgW2dbb37Gh2\/nbT7WrsrtkT7Vn22fYb7C87oA7uDkKHaodLjqijh6PIcYNjx0jCSK+R4pE1I286UZ0CnfKd6pwejmKMihpVOKpx1KvRVqNTR68cfWb0V2d35xznbc53XXRcIlwKXZpd3rg6uPJcq12vudHcQt3muzW5vR7jOEYwZuOYW+5093Hui93b3L94eHpIPeo9uj2tPNM813veZOmyYlllrLNeBK8gr\/leLV4fvT2887z3e\/\/l4+ST7bPL5\/lY27GCsdvGPva18OX6bvHt9GP6pflt9uv0N\/fn+tf4PwqwDOAHbA94FmgfmBW4O\/BVkHOQNOhQ0Hu2N3suuzUYCw4LLgluD9EJSQypCnkQahGaGVoX2hvmHjY7rDWcEB4ZvjL8JseEw+PUcnojPCPmRpyMpEbGR1ZFPopyiJJGNY9Dx0WMWzXuXrR1tDi6MQbEcGJWxdyPtY2dHvvbeOL42PHV45\/GucTNiTsTT4+fGr8r\/l1CUMLyhLuJdonyxLYkzaRJSbVJ75ODk8uTOyeMnjB3woUUoxRRSlMqKTUpdXtq38SQiWsmdk1yn1Q86cZk28kzJ5+bYjQlZ8qRqZpTuVMPpBHSktN2pX3mxnBruH3pnPT16b08Nm8t7yU\/gL+a3y3wFZQLnmX4ZpRnPM\/0zVyV2S30F1YIe0RsUZXodVZ41qas99kx2TuyB3KSc\/bmquWm5R4W64izxSenmU6bOa1D4igplnRO956+ZnqvNFK6XYbIJsua8nThJfui3E7+k\/xhvl9+df6HGUkzDszUnimeeXGWw6yls54VhBb8MhufzZvdNsd8zsI5D+cGzt0yD5mXPq9tvuX8ovldC8IW7FxIWZi98PdC58Lywr8XJS9qLjIpWlD0+Kewn+qKNYqlxTcX+yzetARfIlrSvtRt6bqlX0v4JedLnUsrSj+X8crO\/+zyc+XPA8sylrUv91i+cQVxhXjFjZX+K3eWa5cXlD9eNW5Vw2rm6pLVf6+ZuuZcxZiKTWspa+VrOyujKpvWWa1bse5zlbDqenVQ9d71xuuXrn+\/gb\/hysaAjfWbTDaVbvq0WbT51pawLQ01NjUVW4lb87c+3Za07cwvrF9qtxttL93+ZYd4R+fOuJ0naz1ra3cZ71peh9bJ67p3T9p9eU\/wnqZ6p\/otexl7S\/eBffJ9L35N+\/XG\/sj9bQdYB+oPWh9cf4h+qKQBaZjV0NsobOxsSmnqOBxxuK3Zp\/nQb6N+29Fi3lJ9RO\/I8qOUo0VHB44VHOtrlbT2HM88\/rhtatvdExNOXDs5\/mT7qchTZ0+Hnj5xJvDMsbO+Z1vOeZ87fJ51vvGCx4WGi+4XD\/3u\/vuhdo\/2hkuel5oue11u7hjbcfSK\/5XjV4Ovnr7GuXbhevT1jhuJN27dnHSz8xb\/1vPbObdf38m\/0393wT3CvZL7WvcrHhg\/qPnD\/o+9nR6dRx4GP7z4KP7R3ce8xy+fyJ587ip6Snta8czsWe1z1+ct3aHdl19MfNH1UvKyv6f4T+0\/17+ye3Xwr4C\/LvZO6O16LX098KbsreHbHX+P+butL7bvwbvcd\/3vSz4Yftj5kfXxzKfkT8\/6Z3wmfa78Yv+l+Wvk13sDuQMDEq6Uq7wKYLChGRkAvNkBAC0FADq8Q1Amqt5mSkFU70klAv8Nq95vSvEAoB52ims4uxWAfbDZLIC+Ya+4gicEANTNbbgNiizDzVXliwpfLIQPAwNvTQAgNQPwRTow0L9hYODLNkj2NgCt01VvQoUo3qCbnRXoitmBH15mAPwHzIlypdtuukUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAGeaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA1LjQuMCI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIj4KICAgICAgICAgPGV4aWY6UGl4ZWxYRGltZW5zaW9uPjEzODA8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+NjQ2PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+Cts9cXsAAAAcaURPVAAAAAIAAAAAAAABQwAAACgAAAFDAAABQwAAialDGqIKAAAuvklEQVR4Xu3dCXwU5cEG8GdmZ+9NQkhICPclcqoIKuKBiIjFiooH0havav1qPertV5Uq9fhQ8SpSr6pFq4hWqYqCoCLKKfch9xEgkIQk5Nx7Zr73nQyttmoWWbJZ8vxx2Jl3Zld+c7zPvHMqpgAiIiJKGdX+JCIiohRhGBMREaUYw5iIiCjFGMZEREQpxjAmIiJKMYYxERFRijGMiYiIUoxhTERElGIMYyIiohRL+AlcdeFqrNrxFXZXbEM8HhElSv0IIiKiI5wp\/mgOJ3IyWqN\/l8HIDuTbY5IjoTCuCe3HnDVvw+vKRLvc7tBUl\/UPIyIiah4UGGYc+6p2Y2\/FVpzR+3wUZHeyxx26hML4y28+QF0siB5tT0RcjzKGiYio2ZHHgx2idVxUvhm1wTIM7XsJnJqrfuQhSuic8a6KLeiQ28MOYhnF7NixY8eOXfPq5B+Zg\/ktOqGiphThWJ0oT44Gw9j6n8ejIv3dVj8REVFz5nS4oJtxJHjJVUIaDGOFF2oRERF9h6kkNxsTvLWJgUx02CkqHJoGze4cjoY2TwWqym2TKBWSveUlGMZEdDgpYi9bj9Ri785dKNyxE4XbC1G8rwqK5hTj7Im+QxQaEVSW10JnHhOlPYYxUcop0BwG1s14Eb8860rcedt9uPvmO3D3rePw+dJS0WDWrLB2ebzIyMxAwO+D0+WBvm8J7rvmFVR43XA6NHgDfmu81+P6gQAnoqaKYUzUFCgmomEvzvjl3Zg+9yPMnD8LT985GB+98h62748j4Ilj3ht\/wf9c+mvcdc\/TKHMAX775IRYtmYW3Xl0Kxb0Pz991N66+5NeYPG0BYooHPIJNlD4YxkRNhQjkWCSIqrr9KCupRMGgYTgqvgVrNu3G2s\/ex7xFIYy6\/mr09lfghcc+R8dT+6FLh144cXA23n\/gedS1GYTrbhiJ7e\/MwBdrdkM0t+0fJqKmjmFM1CQZiMOL1tkKIhEdXQdfht\/fcwlyPSY0vx\/xkmrk9+iEVrlt0KlTV5x35x\/wyxFdoHi8cEdiiEbC8kS0\/VtE1NQxjImaEhGgiqpCdTjhDJZiXYmCQIYXVbtW4v2X38DU19\/F9HcXoMLtAXQdhmGIrTiCTfNm4p3X3sXUl9\/G56t2I+Z08h4IojTCMCZqKkyzPlxFjDpdOpa9+xaKA91xQu9cLH\/\/n1hR1gkP\/nUy7r3xDIT27EYwZH0FSqwE0558FxlDfo2XpjyOC0\/ORFlRjTWOiNIDw5go5UyYhopAjoZVH03CRYPOxTmimzCjGtfdORatfR4MGD4C7n3v4OzjhuLhaVvQrkMQ8UBPdG\/5DZ6buAEX3TEMMx68BgNP+R02Rqqgx+KIxU22jonSREIvipgy91Gc3HOkPUREyScPT4tOpKdpiHCWLV55uFoxoesGVPkAEFFoyoazXW6acnoDuqFA0xToccN6YK1DjJebdX0rm4iSzelw48tv\/oHzB1yNTF9Lu\/TQsGVM1CTIoBVhKoJYsq69MnUriCVDfFq7zVa5CGAxbBhivBityIu9Yro1nRwtQ5hBTJReGMZETYhs0f67swtt3x73L9+a7nvHE1FaYBgTERGlWINhLPazrb+JiIioXrIPQDUYxvIViqqiWuez6s9IERERNV+GqSf9sHJCv5edkY+ymj1wqJpdQkRE1PyoqgNVdWXwe7Pg1Nx26aFL6NamXWWbMX\/jx+jc+ljkZLSBxlAmSjnN6YAe15N+uIyIvp9uGqgWQbxpz1L0bj8AfdqfZI85dAmFsbStdB1W7ViIurB8sk\/9bRRElBqaS8OWlbvQ7qg8ON3av26JIqLDR1FUuJ1e9GzbD73an2idwk2WhMNYisRCCEeDMMF7GIlSqYU\/G6cPGYy\/PD8ZHTt2QDwet8cQ0eEir6GSh6Z97gy7JHkOKoyJqOk444wheOPvf0ebtm3sEiJKV8m+IIyIGo0Jw3o+JhGlO4YxERFRijGMiYiIUoxhTERElGIMYyIiohRjGBMREaUYw5iIiCjFGMZEREQpxjAmIiJKMYYxERFRijGMidJIYWGh3ScfWq9A0+rfoFZaWopwOGz1E1H6YRgTpZEZM2Zg9OjR2L9\/P9xuN6qqqvDII4\/g7rvvRiQSsacionTDF0UQpZFdu3ahe\/ejRRC7UFdXh6ysLJSXl+PZZ5\/F9ddfb09FROmGLWOiNNK+fXuMG3ev1SKWr02UQXziiSfiF7\/4hT0FEaUjhjFRmvnVr8YiPz\/f6ldVFVdccQVatGhhDRNRemIYE6UZ2Tq+5pprrP7u3bvj6quvtvqJKH0xjInS0M03\/x49ehyNcePGwePx2KVElK4SvoArFApj69qZ8Dur4NQU8KovaogiOkP8vbckiGkz1qG0rAYujxPHFOTjpPZt4ZSrHlek\/2KKXeR94Sg+2bQV5TU1gK7bY+rJW5pkAE+d+haGDTsLGRkZYpLvTkNEyedwODBgwAD85je\/gdPptEuTI6EwrqutxJI5T6Ig1438tkdD01zgRdjUIJHGcjUpLtqC5cuXIavjedg9fxW0PYU4aehQ+DMymcX\/QRF\/DFPHzo2bsHTZUnQbNRqZbdrAiMftKeodCORoNMogJmoEcpuLxWJYuHAh1q5di6eeeso6ZZQsDYaxHLlg1mQUZAfRuddw8Q37yDZrUUqECGSxDiNYtRWlm4pRvqwC3U47A5rPb43jevQf5DyRH2K+FK9dBV3s+B510aX1hUTUJEyaNAlFRUUYP3580lrICYSxieWz7kGf\/iPg8mSLlg73wukgiTRWNB2Ln5+K3Db9UNC713+19Oi7FFVFPBLB2o9noN91N8DfqpU9hohSTT7tTj58R4ZyslrHDV7AJffQszLccLozGcT004j9PcXpgxlxwNdC7tCxOdwQ0zDgDgRgiEA2YlG7lIiaAnmKKBQKJfWpdw2GcX21ycqTDpE8Vm19iHWJq1NirHkmZpZ96JqImg55Dll2ycJbm4iaNCYxUXPAMP5RClS3G2rADzUjIDrxGfBCdTkarCJVh5bQdNQYFDhdHgT8fmQEAqLzI+Dzwq057PENUFS4PS5oKpcmER0eDOMfJILYFcHb992JY3sPQ8\/uQ9Gzx9no0ftC3PWX5VACHjHeCdUpA1dOK\/o9IridIoQ1BdsXzsQfx81ErU+WOUTnqh\/v4CxvXAocjjr8fcKt6Hv2Oeh+5jD0GCY+R\/wK499bB6ffC4\/bBaf27+Uid6RkmdsllqWqwWfuwYO3T8L8\/WG4uPyI6DBgzfKDTJgxF86\/cxyWffEcrjllIH55y31YtnAKHrziaOzcWIhV8xdj\/te7oXh0bFi0BB9On41Fq3dAhwv5R\/XBqAuOhT9Sjc0bSrBpxSL8c\/ocbC6us54nTI3FhK77MOqGBzB\/6p9xYZdjcPUtj2D+W3\/BnRccjb3rVmDGnHlYtrkMqtspWr8qqks24\/3Zn+LjrzYiInas9pfsxJLlSzBv8RbUidYx28dElGxMhR8hL\/p1erzQsgLwe1zw+XzwZ2XB6arE0\/f+EX94\/H0sXluIxR9NxxOTpuOjWbPx6Pi\/4tO15di16gs88uhchIxtuP2aP+LhV2bhkzdewo2PzUZpxASPeDYup9uLrIAfXpdYjl4fWmRlw9i3Gk++9Bre+eBjPPHS61hWGocjVoS\/\/+XveGvBArz+4rN4au4mVJaVoKRyD1at2I468VtcdESUbAzjBpimARiG+M8UXX2\/db9XZQCj7rgJt\/52MNq1PRbjnhiHyS9NwK\/65mHH5p0wnE44NYd1tZ0z7MZl9\/wRz751H7zL1mJrbUjMeVbpjUneTqXL5Sg+5bJUHSEsnPkFjM7D8NJzj2DssV7Mm7MWlSKM1+9wY\/z9E\/DaU7fgrHat0O24ARjY83Rc99uz0Vp+3\/5NIqJkYRj\/JCKM1ZZo4RPVctxAQdd2WPX6ozim51CMnfAJgn7RmpZZKzvZuna1RkGO6Anr8EZ1xKzfYBinjHVLgo6oHsKsVx\/GMcPOw61\/nY29kRr4Wg7Cry\/LwugzBqHPZQ9iY1AsJ0Mss3gUoVBUhLn9G0REScQwToRoDcmW1b\/qYdEjW8yGISpqrQrP3HAnluRehtXr5+P5G05AtCIoM9r6npxYPmtY160v2a0qBnHq1C8H03TA48rHL26bgE3zv8CXf3sUY4ceh2jhWpR3HINV61Zh09Nn4\/HJH6BSLjexrD0+FxxcdER0GDCMG1Kfp9bD+HVdRKkMWBHEelwMixYTDD9OPLU\/lk9\/HJeMuQlvL1uHvaX7UFdnIi6\/YxiIx3Tr0Kj8Xn2\/ldTWz1NjkQEs5r9YbnGx3KJRF04+9yRUL3odPxs5Glc+\/DqKohqUeAh\/e+IWnH3JaIx8eAUuHz0QfncOerWrwBMPvYNCsclwoyGiZGv42dRi9NaFD6BL31F2SfOjKAYq91XB8PjRMtMtZloMpXuq4cnJQqbXBcRqsXnrbtREVGRl+pCZnY0MTcf+ahP5BW4UF9agZYcceBDFnl01aNEmG55mds5Y9Xux8PFX0en405HRukDslzT+o1VVsRzL91XCEchEltcJh7xSes9uFJbXwt8iD13a5UIV63vF3m3YURES47PRs0cbuEVZbUWxmM5E566treHG2JXSPB58\/drf0O\/6G5FR0NYuJaKmYPjw4Zg8eTK6du1qlxwa7uQnwDRVZOfnICfDLUJEHnbWkCcq7gy3A4Zo\/RoOH47q1RPH9zsaXbu0R6ssL9y+AAraZIiWswttOudaFbhhiv5OufDy4q2UMMRyzMnLRQuvZu1kxmMGslq3R7++vXBU25Yw43HrCEjLgq44oW9f9BNBrMmWtG7Am12A3t0LGi2Iiah5YRgnyBAVsrwS9wA5\/K9BGbSxeH0nKnR5SFpW9oY8TyyqbiMupq2f8Fv9lAryFMG3L8KSO1Mxsdxk4B6g63FEYzHERBD\/axGLlnycy46IDhOGMRERUYoxjImaNLbFiZqDBsO4\/uwmz3HSIbKP6ctDxEl869iRzZplYmYxj4maHHkqsoHrnw9Kg2FsipqzoiqCaLgSiqrZpUSJUxQVRqQWqkdHsKKcaZwARVURqq6C5vXC4XLZpUTUFNTU1MDv98Mrts9kafDWJmnhpy8hx1OKbn3PgeJwixJWppQYa00xddRVbkBlUQglC4rR+aRBcGVlWoHDRt93yfklt0hTj2PvimXQWrZC55+PrB9JRCkn77h46KGHrItB77vvPjgcCb6KtQEJhXE4XIclc\/6MTE8tWrftCpfLk9TmOR2Z5HO5TbHi7tq5GfMWLIOvYDiKl66Fr2Q3TjvrLGRmZjGM\/4M8aCAfKLN90wZ8tXQ5Oow4H4FWudZV3wfIt37JCiAWq3+wKhEdfrI+i0QiWL16tdUyfuyxx9CqVSt77KFLKIylSCSKXVvmw6vVQb6TnZUoNcRq5Ym\/S8vDmP3VVlRU1sHp1NA9Lxd98lrBybXoe8lTQ\/vF9ragcBeqg0F5P5Y9pj6Iy8rKsGfPHvTr14+BTNRIZFRqmoZevXph1KhRVn8yJRzGRNQ0rFq1CtOmTbMOlRHRkYG3NhGlmfLychQVFdlDRHQkYBgTpRl57koeriaiIwe3aCIiohRjGBMREaUYw5iIiCjFGMZEREQpxjAmIiJKMYYxERFRijGMiYiIUoxhTERElGIMYyIiohRjGBOlgerqatTW1lr9\/\/n0reLiYruPiNIVw5goDcjAvf766\/Hhhx\/C5XJZLzYvLCzEVVddhUWLFtlTEVG64lubiNLEFVdcgSlTpiA\/Px91dXVWWU5ODtauXYtAIGANE1F6YhgTpYk1a9ZgyJAh1lubDpDhPHbsWHuIiNIVD1MTpYm+ffvioosusoeA\/v37Wy85J6L0x5YxURrZsWMHunXrBl3XMXXqVIwePdoeQ0TpjGFMlGZuuu02fPbpZ5i\/YD6yfD67lIjSWcJhHAqFULRtEbxaLTSHYpcSUbKZULCvPIjZX25DRVUITpcD3VvloE9+ntj+NKxfvwFr1qzGZZddhkg0Ir\/Q7JmKgopIBIt27EKVqKtExWaPIUoOGZUOhwM9e\/bEhRdeaN3VkEwJhXE4HMTi2c8g2x9G67Zd4HS6rX8YESWf3LaKdm3Bl\/O\/RqDdCOxdshr+0iKcOuws+AMZcGpOaCKUQ+GQmNb+UjMmchiGrmP7xs2Yv\/RrdBp5Ify5rWCKMqJkisVi1oWUJSUlmDhxIvLy8uwxh67BMJYj53\/yPPIzKnDUMeeKIY074kSHmQyYYOUGlO+oQunCEnQ7\/Qw4A37ZBOT295\/kgToxU2RreM\/KZVAzW6DLeRfUjyM6DB599FHU1NTg\/vvvt1rLyZBAGJtYOvMPOGbAuXB5s2Ea3NskOuwUFYojhsXPT0Wrtv3Qulcvq\/VHP0xRVcTDEXwzcwaO++2N8OXk2mOIkkueth0zZgwmTZqEdu3a2aWHpsFbm+ROZ3aGBy53BoOYqLGYBhS3H0bEAW+LlmwNJ8A0DLgyAiKQwzBiMbuUKPm8Xi+CwSDCYl1LlgbD2Go3K7J9zIu2iBqXUv9HHrPmyeGEqHJeWcfziA4vuV1a22aS8KEfRE0eoyVR\/55TbDxQemEYpynV4YDq80HN8IsuADUg+n0uqGoDlZDYk1Pdzoano2ZOgdPlQUCsYxkBPzL8ftHvhVtL8GIVRYXb7YLG9YwoIQzjNKRqCsq2LMVvz7kEJ510MQadNAqDBl6IMy95BhsqovVh69SsQ3byohbVJYdFJwM8XoJnbn8Zi0rqRJkYFpWrNU5Mn8QjLpTWFDjUOkx78g8YdPGlGDjqUpx88SU4YfR1mPjRRmg+D1xifdEc\/64+VNUhypxwyvVJccBj7sUT41\/G0soIA5koAQzjNGTETWR36IsJU57D24+NQiDSG5P\/+QLem3QlOvli2LV1J9Ys24TKqAk9tB+rFq\/E0mXrUBERX3ZlY8QvzkCPlh7UVdWgZNcerFm5Gmu+2YGoKUKZ9SbBhGH6MOLq2\/HPZ\/+IkwIFGHnlnXjv2Yfxm7O7YH\/hVny9ah227q2BQ4SyQ+zwBauKsHjlSixbvwe6y4FgRRHmz1+Exd8UISZCm6sV0Y9jGKcpxaEhMzcH+bmZ8Hv8aJWXi6xWGdi74p8Yee7NuPvBD7GmeDNevO\/\/cOf4F\/HAPffirscWiy+W4JHf\/UW0jPfji7dewsW\/\/BP+9H+TcOMN9+HFr8pFWCfnnjlKb\/J6MU8gC3k52cjw+pDVogVa5+XDXbsBD094DH989Bnc9tjLWFsDOGPFeO2pZ3Hviy\/hf\/\/3ATy9cDN2b92MTbvX4sMPlqBcXoRm\/y4RfT+GcTrTdcR1w3piU1zeg2qYMGMK2nc+Ba9\/\/CBOa5eL\/udejo\/mvIYP3n8AyucLsVfR4PO54ZSHpevC6HzyzzBt+hQ8ftUgLJu5CDGXKLd\/npo3eauQLtYvQ3waugnVEcL8Dz+F2XsUPv7HC7jmeBc+++Qb7I\/uwLrClnj5xdcw86XbMCCzBXoPOh1Djj8Hd901Cu1M8X37N4no+zGMjyjylg4n\/L5caKgTrdyW6FgQwx2jL0a\/U+\/GglpDNHzlIpdxKw9FBtChQD4YIYK4qcIZjkNnK4Z+gKrEUReuxRdvPolTLxmLP039EnuClfBlD8SY8z244ufDMeSm51CuusWOYQzRWBThUBQix4moAQzjtCcD+Nu1nQhZ6+EsTgQLP8XvfvMGfv3CP7Di\/dvR2R1HKCLjVk5f\/z35Kj6rX7SuTaYw\/Zf6dUv+bYgdNrerNUZd9wd8Ne1NvDvpAYw9sy9ie7dD6fNLzP\/kI8y8vR8eeXYGquVjO0Xn9rrA98oQNYxhnOZMXQRsMCoqyvpKU4\/FRWskBnlg0Km1QYc2UTxw68244dF5iMTXYMO2OKKRKGJxAzHxGRHhLEM5Ho0hHInbVS+RTaxXkXAEMbGeRaNeDDrnOJQsfhtX\/M\/NuOnx17GxVoFeXYTHHrobY265DTf9dSNGntMXHncLdM4pw1+e+RB7FJUVDVEDGn42tRi9deED6NJ3lF1CTYYiWh+RamzbEUT7Hq3hEUsyXFOB3aUGOnXPgyaGK3ZtxPJN5XBl5qJdtoqWbdqjZtc+ZHXOg1FegRrTi3ZtM1Bbug9lQSc6dMyGovMMX1Og+r1Y+Nir6NR\/MDJa51vncBubQ4mjaGcpnDm5yPW7obmA4s2b8c3eSrTI64C+3dtBM3Ts2bYa64vr4HDl4aQTu8FrGtgvWswb9gB9+3WGV\/zbG2NHT\/N48PWUV9DvhlvFPGttlxIl3\/DhwzF58mR07drVLjk0DON0Jx\/i4RChLFq6ckEq1gsG5O1P9RW3qmmiRhXtElE5WhPE9fphGbjWfUymdXGOvB9Z3mdsMIibjKYQxpJ8K438fx84+uIQ65Qm1hd5OiQu1idZ6pCvdZTrk1jPYrG4dcGW6pDTmWK4fprGwDCmxpLsMObRo3QnKkgZvAcqO1NeuWoHsWTERcUYicKIik9ZSVrT6\/Wf8kpZ++oaq7JlENP3kNcVHAhiSRfrVCQqT3X8O2T1eMwqi9hBLBny0HYjBjFROmMYExERpRjDmKjJ4+XIB4\/tcUovDYZxfTXAe0+JGl\/97WfyDx8cniDrcDrrKzr85PVUDVxydVAaDGP5v6qsCSMarRH1AR+VSNQorCvlQ1DdOkKVVWKQ8dIQeRFipK4ODrcHqua0S4mSLxqNwuv1wu122yWHruGrqUU3f+ZkFGTXomufn4nhA4GcvD0CIjrAPhYlPoL712Pf1grs+7oc3QcPgcPns8bR95MPs9mzfDngz0C3Cy+yS4mS7\/HHH0dZWRkefPBBaPKOlSRoMIylULAai2Y\/iVZZJlq37Q6ny5vU5jkR1ZNRLG8ZKtq9GV8vXYmM9udiz4KVcBXvwslnDkUgq4WYgtved4g9F3mFd+GG9ViyfCU6j7oYGXn5MK2nyxElhzw6FQ6HsWTJEuzcuRNPPfUUCgoK7LGHLqEwlkLBIAo3zYPfWSv2BHjIjOhwkVvk3n1BzPhsEyoqg9CcGnrl5+K4Nq3htLdWuTcuN936x5mSKSrKslAY87btQFUoJPdo7DFEySG3N6fTiT59+mD06NHweDz2mORIOIyJqOn4euUqsVfeGu3y8+0SIkpnvLWJKA1NfW0Kvl6wwB4ionTHMCZKQ\/LwNA9qER05GMZEaUheTMLbnYiOHAxjIiKiFGMYExERpRjDmIiIKMUYxkRERCnGMCYiIkoxhjEREVGKMYyJiIhSjGFMRESUYgxjIiKiFGMYE6WJbdu2IRgMWv0Oh8PqpJKSEhQXF1v9RJSeGMZEaWLHjkKMGDECs2bNsp5LXVNTg+effx5XXnklqqqq7KmIKB3xFYpEaWTQoEFYuHCh9VxqVVWtF0Zce+21eOGFF+wpiCgdMYyJ0sjcuXMxZMgQewjIycnBokWL0K1bN7uEiNIRD1MTpZHBgwfjvPPOs4eAyy+\/nEFMdARgy5gozSxYsACnnHIKfD4fNm7ciHbt2tljiChdMYyJ0kwsFsOwYWejf\/\/jMXHiRLuUiNIZw5goDS1cuBht2rRBx47t7RIiSmcHFcahYDVURYdiDxNR41PEBqgo9Zd7GKYBcHdazBAgHjdRURVGPBaDqjngcznh05xi\/nAGfS85z8S8qYlExTyLi9kk1iX6UfIuhkAgYF04mWwJh\/GGVXNQun0O8nJccDnrHzZARNQUGCJHNmzeieemzEMd2iOyrxzHep0479RBVigzj79L7tAZYp5s2rUbbyxYBKVDZzjlfJIzkn6QDOPc3FxccMEFuPTSS63bC5MloTBev2ouKra9g34Dfw5fVgfxLU2Ucu0moqZAHqszEA+VI1i5Hv6s\/tg8\/Wt4W2Qhp\/vR0NweMZ711XeIUDENHXWl+1C8Yik6n3Me\/GJeUcPkRZN33nknLrvsMowZM8YuPXQNhrEc+9UH9+DYfichM6c7DD1qjyEiajoUVUNUBPL2lZ\/C2FuAjscPsgInwYN\/zZLD6UTV3r3YuWI5jvvN9XBnZNhj6MfIQB4\/fjyefvppq6WcDA22sRXFRKtsJwJZ7UUQx+xSIqKmxTTicPtyRaBoyD2qCwzDYBA3QI\/FkNm6NSKV+xEPhexSasjRRx+Nffv2JfUxtA2GsVyXnQ55xYg8T8wVm4iaMFlPqSocmsbqKkEOzSkaWvJCQM6wgyHPHydTQmefTa7VRJQWRF1lVVessxJn1t8hk9xsoYOUvEvBiGyqywXV5\/1W54HqbHhVUx0OMR2v1Kd0pUBzuuDzeODzeus7jxtOR6LVrAKnU4PKUGyWGMaUVKpDx\/rP5+Cl597AlFf\/gdf+OhUvPPc25i4rhqL98OomK6DynZvxxedbEBOBzPqI0osi1uEoVn\/1CZ578y288u67ePmtqZg8dTrmby770XW\/ngKHWYulC9agOKwzkJshhjEll2IiWFOD\/aU7MeWJV\/HKjNUoqahEdciA4vVDzQhA9YuWs8Mp+jNElyU6HyAqK8U0oetiOs0JJUO0qA+M94phVk7U1Ml1v7Ya+8u34\/mJL+KdpZtQWlmN2ogBnz+AjKxMZPjc9ZWuosLt8SEjU5Rl+uHWRIvaUSa+9xY2xEy4Em5N05GCS5ySyohr6H\/BJbjjgesxesgpuOTysbjvvpsx8lQnJt4zAb8aOga\/+N17qKhbj9+fOxpHdToZ5175JHbVOlGzZys+n1cIPfQNbrvmOdxx+aXo1HYAbn9pJeKKxpWVmjAThuHGyeeOwb23\/gYjjj0Bl\/3y1\/jTLdfh\/BPc+POd1+Hogedg9Ph3UeP1wadE8NEr49Dp9CHoPfxuLKitwuI5s\/Dp+g9x162votDhAE\/YNC+s3yjpjEgYCIYQjsYQlrdLGKKLR7Fz4UJ0GH0b3nj6bCx\/cyEG\/s84bN7xIUYF6jDzi7WoCVZi+\/YKmGoE6+d+hFaXPoIdn43D8nc+xaYa8Zs8dkdNmomYWPf1YBCRWAwhse7HxHq\/dPp7WJt3Fr56\/2Wc1mIr3v+iENXVK8Q6n4XZn32G6Xf1xszPduKkIWfhrGPOxbj7L0U7XYdu\/yo1DwxjaiQGHI4eOLF\/vljrAjjrphtwSmAj7rv7SUz7agdMzWE9Wk6T59ZME5mZAzBiaAegbWvkl1Zhf8yQp9WI0ogi1vk6bC\/ciU3zZ+Phl1\/G7K\/WYvnazTADHdCtfSkevu9PeHGpicuH9YWYGJqiwe1xyiPe1MwwjKnRyFvkdF3UMloIs59+GC\/OrcNpJx+HgkwNUVH+7fv2TPl4w5hoG+gGTFHOc8aUlsSOpWG2RJ9jjsUpx5+IsVddiSvP6Q2vsz0uv+EaXHL6CeipbcJtkz9FWKzk8lZf1X4JCDUvXOp0mJiIR2OIxQ88eN5ATL4dRj6dPh7EhlX7Yea0xNE9uqBbQRS7CssQCumIRuPWm4gi4aj1IHtY\/TGRyWwqUJoQiRoV637c0BHXM3DscW2soC3ICGDb+tVYUaqjfPnbuPbZr5DbpQu65OeIdTwEXXXC4whiy5a9iKhiB9T+OWoeGMaUfHL33nShz8nHom\/nlhCJLAoDOHn4AHTOdotxubjm9p+jbuUM3HTPFNS1PxrHd2+BrIKuGHJGF2jIxrDz+yFHkYemW2DoBcejtVsevq7\/eaImS+w8xg0P+p\/aH91zAoiGI+h62jkYkVuFCZNexh5XZ4w8vh1y+56Li\/I34Y8PT8AzCz145o6z4dHa4LJLe2DNJ8tQZjKMm5sEXhRhYuvCB9Cl7yi7hCgRClSvS75kFoY83Cz2+1S\/E5AtXt2EqolxXhHMFhG60ahY2UT1o4nVMSyGfRpQF5Fnmuu\/FxT9bB1TA1TNje1r\/oFMdSBcLvnO2QNHZhqTAo9Ytw2xTkflYybFuu\/xeeGU10PEowiGItBFmdfrs6+RiCNcF4K8LMLl8cDtMFFXF260f7lT\/D8Xv\/oKBvz+Nvjz8u1Sasjw4cMxefJkdO3a1S45NGwZ02FiwhCVTn0QSwYMGa7ynLEcEpWSUVNjd3UwIjGr8jKC4tPQYdSKaeWkpuwXFRODmNKGiXAobAexZCAcrENNdQ1qxE6ltQmIFnQoWCvKqlFTExRBbBWKlnQINY0YxNR0MIyJiIhSjGFMRESUYgmFsbyUgBcTEFHTJ2oqVlYHSam\/NpJngg5aMt+X3WAYy\/U6HNVh6DF7iIioaTKNGMy4bt1Gl+z3zR6p4tEIVPn+Zz7h7qDIhxTJLlka\/CX5wIV9VSoqyzZCdbpFHnOBEVFTo0B1uBCq2YN4UEHJmvWiopRlfMLzDxJ1ueZyYX\/hDvhat4YnI9MeQQ2ZN28eWot5lpMjr9hPjoRaxl2PuRirls3Hvp2LxF5npH4EEaVEMvfGjxSmGUe1aDDs270CBX3Ph+HwYeOnnyBYWSnGsgHxfYx4HMXr12H7kiXoNGQYHB6PPYZ+SDQaxQcffID7778fY8eORVZWlj3m0DV4n\/EBuwvXY+uqacgJROB2O6znOhBR47EOSpmK9QICn98Hw+ANMJKcL3JWrN9Sgqdf+gr7apxALIpBeTk4r9+x8MpDsJAPY6UD5KpkiL83l5TitcVLUevxwiFmZDLPgR6JNLEu9e3bFzfddBP69+9vlyZHwmFMRKlXF4xg3LhxmPj4BLuEiI4EPN5FlEaikRDmzJ5pDxHRkYJhTJRG5CFZeaiMiI4sDGOiNMNbdoiOPAxjIiKiFGMYExERpRjDmIiIKMUYxkRERCnGMCYiIkoxhjEREVGKMYyJiIhSjGFMRESUYgxjojTynw\/84KPliY4MDGOiJq66uhpvvvkmiouL4Xa74XK5rPI1a9Zg+vTpVj8RpTeGMVETFwgEsGDBQpx44omYMGECSkpK8NBDD2HgwIEIh8P2VESUzvgKRaI0sHLlKgwZMhiVlVV2Caxwnjt3Lrxer11CROmKLWOiNHDcccdi7NjL7aF699xzD4OY6AjBMCZKE9dddx3y8vKs\/jPPPNPqiOjIwDAmShO9e\/fGeSPPt\/qvuupq61wyER0ZDuqcsWHEYRq66ONpZqLGpcChObH+m3VWC\/nzzz+Dw+GArsvtkeinUOS9cjBEm8w0DSiqIgJBFMcN3jL3IxSHCs1Zf0dDMiUcxqXFK1C64xO4zZD8kl1KRI1F3mOsqiqikShcbjd0uWPMbZF+Irk+VUYj2FAXRCzQBrGyKrg3lKNNnR9qXKxXXLX+m9hhiQdcaHfGmeh5yrD\/uu\/\/UCQUxiUlq1C66R107DgAgezOYg9KE6VcUkSNzdr0RSCbhmENE\/1UsuoP15aibM9K1KodUDJ7I1rnFaCgTx+4vF7W8N9DbndVe4rwzZez0XbY2eh1+s\/sMYcuoTBet2Qi2rbqjBb5vWDoMVHCxURElO5UhxPhulJsWT4H2FOAzieeZh2y5s7eD3O4nKjctRtrv56L0278X3gzsuwxh6bhC7hE7rritcho2ZlBTER0BJF1usffCv4sN\/J7HCVC2GQQN0CPxpDVth20ujiMcNQuPXQNhrFYNNahMVV1WENERHQEUTQrCVTR4kvgQCkJDqcDDlMmY\/LmV4K3NslIJiIiosMRiLzPmJoNRVWhetxQvd\/q3Jq8QLIBClRnItMR0cHSnE543G54\/9W54HQkGk2K+P6RsW0yjKlZkPdQhipL8Nm7M\/DO27Pw0Qdz8O7UD\/DejFXYHzHExvxDW7MIYrMOy+euxd5g\/EemI6KDpSpxbFw2H2\/N+BjTP\/sM782ciTc\/+gwrCvdb9\/P++NamwIEg1q3cjPKYIW+ZTmsMY2oW5IYaC1bhm1Xr8PmMabj2yj\/jo2Vr8PWaXQgbYjOQrWSPE6qoAFSxp656PfWdS14rEUPR9hLU6SYg98Kt1rUYJz\/ZXCb6ieS2E8fewq1YsXo+Hrh3AibP\/BKL123Eroow3GL78ojO7TrQ8lXgdLrg9XjqW8+aE15zL57609+wqi4Od8Kt6aaJYUzNgiGCNKttD9zw8Hg8+8AYDDpmKB598kE8PG4UtKL5uOmqe3H+sHsxr2g\/Vs74G4YPvBinDB6DV+dXiQCOY8eGPQjqYSyZ9QnG3\/YILhgxGiPG3IOvS2WAM5CJDp4Jw\/TizEuvxcT7b8XIYwbiqmtvxqT7b8elpwTwyoN349TzL8dNk+Yg6PHCo8bw+bSJOOGiS3Dm5Y9hdSSIpV\/Mxbz1s\/HQ+LdRpGmipZy+GMbUbBh6HAjXobY2jFgsippYHRCJorpoM5auKcNdL9yPAf6d+OCfFZj4\/huY9fxYzLr\/DexTwli7YAP2xXSUrf0UM7doePzZJ3DVMR689OYCQLSoGcdEP4WJaDgEoy6ISDyGUCiEaCyCFe+\/i4XeAXjruQfROb4CHy3cg9qqFfhgjhOvT30TT\/4iC397fzNOOPU0nNprCG66+Vy0jseRzg+HZRhTM2fCNAPo3HEgjuvuhy93IO776\/XY9dFrmDh1CWrDEevcldMp9rrF1qLrBRg2ZBC6HdUGbfNygJ2lCKsNndsiosQo0By12LhxO4pWL8VrM2di9eqtWLxiA\/RAPvKzi\/D8n1\/CZ2Xt8b8XnyCv\/oJLcyMjwws1zW\/5YRgTycNlRhxxURHE96\/AhOsmYKtZgLYeA+WiMf3d58+aiIs9cBHL0OXDEUQQE1ESyVBVs9G+fQHyW+bjjHNH4tIzj0aG+yhcd8uVOKljHhxFX+F3kz9HVBPbppg+mc+IThXWJNTsyMf9RaLxfz3gwNB1RMWwdW3m7h1Yst7AcUMG4OzBxyAjuh279sShy0NgInzlZywun1Bkilay6I\/pVt1BRIdAbIuxaMx6+UlcD6B3nwIoGTkY2KM7wuVF2FqtoHTZW\/j9lG\/Q79RTcFrPtqgo24+4IlrGahi7d5UhqippfYSKYUzNinwFqObLw6lndIfPEDEqukBeeww8uRNUM4zM7kNx7WVu3HPVLbjxxa0Yen5H6CEPjj+jF3KdLrTpfhT6HtXS+l6rjl3R\/9jWcMQZyEQ\/mQjiuOlG7\/690SHLg1g4hp5Df4bB2hbcOO7\/sDqYi2HHtkFu73MwWJ2Pa2+9Hfd+bGLS3cPhdrbBxSPb4fO35qFUSe\/TRQ2+KEKO3rrwAXTpO8ouIUpvikOD4hb7ocEoZBtX1ZyA+M8MxWAqClSPF9DkfqoYKwM7EgVcmviMAeK78hC1GdWhuFziywbMsGhlyx8mSkOq5sH2NdOQ6TgVLme2KEnFs6kVuD0uGLEYYrq1VcLt9YjNToUpL+wKR8RWp8Irtk1N3r1g6giHwoiJSeXrRF0OE8FgpNH+5U6PB4tffRkDbrkD\/lZ5dumhYcuYmh1Tj8Owg1gyxMZuyCCWA2Ln0wgFYdTUik581oXEeF1MLzZ0UUkYUfE9EcRyWqufQUyUBCYiInDrg1gyEBHbYY3YDmtDIojlRmYaCIXqUFNbixqxXcbkjrL4XjQSRm0jBvHhwjAmIiJKMYYxERFRiiUexul\/5TgREX0vVvAHJ\/nzq8EwlheLyzcay5dQc4ERER1hjJh1PYQejh4R9+s2Bj0Wg64k92qRhlvGYtlEnVmoLt9Sf9UpA5mI6AigQFWdCNUWI1QVRfE36623m8lXjdIPEDsrDpcL+wt3IB5wweH12CMOXYO3Nkll+zag6JtX0b5dP7Ro1R2KwyUvYiMionQk21SGjmDVbpTuXY2QpydKZq1FbqAF2vbrB3dGhnVnAX2LCGL50B8ZxOu+nINuo0ah+8Ch9shDl1AYS+VlG7B324dwxarEl+xCIiJKT6IVXBmLY2Moirg3B7HqILwbKpBf4YQSE5U8w\/i\/mA4VZgsvupxzLrodf6pdmhwJh7FUP6X8iwuJiCjtidaevCZIBIHVbxH9BxELzYo1h6zHbib\/dO1BhTERERElH8\/UExERpRjDmIiIKMUYxkRERCnGMCYiIkoxhjEREVGKMYyJiIhSjGFMRESUYgxjIiKiFGMYExERpRjDmIiIKMUYxkRERCnGMCYiIkop4P8BZfm2pmXRzs8AAAAASUVORK5CYII=\" width=\"480\">","458dcc76":"This decision affects the research, so another step could be to check the results with different split by the function - train_test_split or use pandas dataframe sampling the data for different days. For the scaling of the data is used the MinMaxScaler. Another possible algorithm is RobustScaler which is reducing the effect of outliers.","bdf0fd03":"## 3.2.Choosing a scoring metric\nA custom scoring function is implemented - *Root mean squared logarithmic error* -  ***RMSLE***. The built-in function *mean_squared_log_error* can not handle negative values, also the linear regression can return very high values. The new custom function is replacing the negative values with 0 and highly positive values with 10. Prediction of 10 after transforming back e<sup>10<\/sup>=22026 shared bikes, which is far above the dataset maximum of 8000. The evaluation metric of RMSLE is chosen because the dataset contains very large and very small values [5]. With this metric the outlier will have smaller effects during the scoring and predictions are evaluated with percentage error. Another effect of this metric is that it is adding extra penalty to underestimates - see the graphic below, from [5].\n\n\n<img src=\" data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAc0AAAFBCAYAAAAVN\/S+AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAE9rSURBVHhe7d0HmBPV+gbwN8lmC7ssvfeOgFJEpAhSlGLFAipWENu9F0Wvig29drz2v+3asSEWsIAdGyKIgghK79KWDrts32T+5z07wbCysEHZlvf3PIHNzCSZmUzmm+\/MKR7HgIiIiByU1\/1fREREDkJBU0REpIgUNEVERIpIQTOKZWRkYNOmTdiwYYN9bNmyBTk5Oe7cP+zcudMut795e\/bssfPS0tLcKcDu3buxfft299n+8b02b96MjRs3YuvWrXZdwm3btm3vuq1fv94+fv\/9d+zatctdYl\/8vNTUVPfZvnjbntuWnp7uTjk0N910E0aNGuU+O7hgMGi3MRAIuFPy3XHHHbjwwgvdZ6XDl19+iW7duu3dv1lZWfY7CJeZmYkhQ4bgrbfecqccurfffhv9+\/d3nwH3338\/rrrqKuTm5rpTgKeffho9evRA9+7dMXPmzL3Tevbsic6dO+Onn36y00SKk4JmFHvggQdQt25dexLiialt27YYMGAAfv75Z3eJfCeddJJd7t5773Wn\/GHYsGF23s033+xOAS6\/\/HKccMIJyM7Odqfs64cffkCfPn3QoUOHvSfFY4891k4POfLII9G4cWO7bscdd5x9HH300Xj00UdtECzo2muvtfMLBijiybVWrVo2MPwVNWrUsO9TVKtXr0bDhg3x22+\/uVPyVa9e3e6z0iQxMRGNGjWCz+ezzydMmGC\/l\/CLIV4E\/Prrr\/YC5K\/ie8ybN899BlSrVs3uW4\/HY5\/PmjULN954I0477TSMGTMGRxxxhD0+eOFy8skn49Zbb7XHh0ixY+1ZiU5jx45l9HFMRueYjM758ccfnRYtWjht2rRxzBW\/u5TjmIDlVK5c2TFB1TFZpzvVcRYuXOiYQOJUrVrV+cc\/\/uFOdZxzzz3X6dSpk2OCpjvlD3x9cnKyc\/rppzvz58931q5d65gTsfPCCy845iTqLuXYzzOZh2MyNcdkmc66devssuGfH84ERLstM2bMcKf84frrr3fMCdkx2aw7xXFMALDbyP8PxAThffbF\/uTl5dlHQYsXL3YSEhKcOXPm2OcHex+uy\/7eh7geIYUtE47vFf4a2t+2FvZezz33nNOqVSvHZPB738dk6o65mHGeffZZ+5yvPdj+Kyj0ec8\/\/7xjLhzs3\/vz8MMPOx07dtxnGx555BHHXFw5JuN1p+yrKPsuJyfnT+vM+ft7bfhyhS0TjvPDPysc3+tg37+UDQqaUYxB02QW7rN8\/\/nPf5ykpCRnyZIl7hTH6datmzN48GDnmGOOcd566y13quPcc889jskYbVBlgAs577zzHJP12RNUQSZbsMGNAfpAKlWq5Nxxxx3us4PjZ7Vv394ZMmSIOyXfnj17bOC6\/\/777XOTOTmXXXaZYzIXp06dOvbEfc0119jlQkw2awPGY489Zv8\/6qijnDVr1jgmg97n\/RnoO3fu7JgMzQZlkxXvDZAMNnwtt7VmzZr24mLgwIF23j\/\/+U+nX79+9m\/iZzOwc334YGB6\/\/333bmO\/Wy+x4MPPmjfg3+bDNZ577333CX+bNKkSU6FChX2XijwwoTrwm0Iue666\/au09SpU+2+YGD84IMP7IUNl69du7a9KHrqqafsPu7QoYNjMkBnxIgRTv369R2TITp33323fY8DGTdunN0HDRo0cC655BLnhhtusPst5N\/\/\/rdzxhln2Astk0U6JuPcu+9OOukk59prr7XHKqebTN3p3bu3s2vXLvva++67z2nevLn9Dpo0aeI8+eSTdjqZbN9p3bq1Pa55DJuM2nn66aftvN9++82+N\/c5X3viiSc6S5cutfPotttus8c3jx1eMPKYHDRokPP777+7S+TjBQAvNPk+3Kazzz7bycrKsvN4vPH44vfFz2jXrp3z7rvv2nlSNiloRjEGzZiYGPdZPmaJPLnt2LHDneI4Xbp0sT\/8O++80+nbt6+dxpMCT1Rvv\/22nXbFFVfY6XSgoJmSkmI\/87TTTnNmzZq1T\/YXjidGZqMffvihDQA80UyYMMEGkMIwiHPdw5d57bXXnPj4eJsV07Zt22ym9PXXXzuLFi2yGSpPqjyJhzBY8oQ9dOhQZ\/r06TYDZgZx8cUX2xNvCLedjwULFji\/\/PKLzbabNm26NxP65JNPnLi4OLvu\/Kzly5fb6QxcDLAhDKI8IXNbmX0zKPn9fvvZxEyb68PMi+\/1888\/24sUbiuz7\/3hRQ+DHbeTGCj4Hjxph\/D7CwU8fjaXZyBi4Lrrrrucxo0b2++IAZcXAfzOeQHBQPr444\/bbeYFBreR21qYl156yX42gwv3FYMat5cBLoTH18knn2yzNZYmMEjywmbu3Lk28LHEgUGeF0Zcp5UrV9rXjRkzxq7nxIkT7Xq++eabdjtef\/11O58BjoG9WbNmzvjx4+1r+V4sWWEgYwCfPXu23acXXnihDX6hCyhetHG9R44c6cycOdP55ptv7Gddeumldj5xW3g8P\/TQQ\/Y9vv32W+d\/\/\/vf3mOAxwsvNLh\/uO3\/93\/\/Z0tRvvvuOztfyh4FzSjGq2+eFHiyZ9BjxlilShV7kgvHDJMnaZ6oeKJhAJo2bZoNEAyuvXr1KnLQpMmTJ9tiYJ58GRz5\/i+\/\/PI+xVfMenjy4\/vwpMMHP48ZUWFYzBwbG+s88cQT7hTHBqf+\/fu7z\/7AZRnIVq1aZU\/GzCRCxW+hoBnKZEIYNM8880z3WT5mEsuWLbMZyqeffmoD2RdffGHnMaAxyw0F7BDuq+OPP97+vWXLFvtZoSJP4n7r0aPH3qyWJ3gu88Ybb9jnxCDGzIvfQ2G4X5nBES9SePJnsTnXh9vGdfvss8\/sfAZNfheh4u9XX33VBq3wolBe4DCoDB8+3J2Sj4Fs9OjR7rN98TvlfGam4S666CKbeYUwSJ566ql7jwF+B\/zuw3EaSz1CxxWPPWbEoe+bwZ7FoMzaeUwSi\/UZNHnBF47ZacuWLW1QDRWr8qKGx92UKVPsMryoZObIYyWEQY\/HSmpqqr2IYGkC9+v+MIjzgiJ0zHK9uT8ZSAvuDyk7VBFIULFiRVsRxPyoUa9evX1qNYZwnglaMNmJrT353HPP2UpDJsjCnHTcpYrmjDPOsBVKTAZpKxfxfc2JGObE5i6RX7PXBHPMmTPHVhjhwwRtWwmkMCYI24ojJtuwz1mhyWRDMJmBfU6sYXvllVfa2pfm5GUfXN6czPbWvjUnXrsfTDZknxfGZDO28hH3gwmmMAHK1uINVZThfjG\/sX1qhBbE2rXE9wkxWaZ9Hqoow\/Xh98P9FMJlkpKSbC3XwnTp0sVWnuHnr1ixAibo28o2JsuByYjs3yZzdJfeF9edn8vvPYTb4vV6bQWucDwGwisMhePrTfYMc5HgTslngrd9v8Ls7\/NNYNtn2uLFi+33ZgKZ3V\/mIsF+r6+88oqthBXa79x3BbeT62QCqv3++VquD79D1uY2F0F2GX4eKxuZCyH7nOrXrw\/WwuZ68PX8vlnpbX\/4GawMx8pLHTt2tOvGylXmogomQLtLSVmjoBnFeFLgyXfcuHF4+OGH8fXXX9tAcckll7hL\/IEnCWKzgIceegiffPLJ3mB0oJNfYcwVuD2BsKbtxIkT7Xs98sgj7tz894w0GBMDLZsnMCh\/9NFH9nN4MgwxGa1t7vDuu+\/i+++\/t4HVZEm21mZoG\/nZFSpUsH8Xhs1fTIZq9xU\/j7U9+b4MtqH1Du2XUI3Q\/YmJibH\/F9xWnmxN1uw+y38PBqyQouxz1npms50XXnjBvheblPDEPXv2bPv9MQjzQuNACq47n\/OYCRe+XgVxeX4HBYM7t+9QjptwrOlrsmV7scJt\/N\/\/\/ocnn3wSJlOEyaDtevIY53Lh+zKEQZbLmywfzzzzjP2fNa1NFmznc\/24bQX3Aafzwffn\/MKaMvFzeUFx99134\/nnn7fr99RTT+Grr76yx6GUTQqaUY4nlRAGCmZ+zETeeecdd+q++vbti969e+OUU07ZJzsqiMGg4MmVmEEWbP9HPDEVPLHt7\/UHwxMhH7fddhteffVVG0RDgYlCzUC6du1qm37wxMbt5Uk8\/OR4sBM6t2HHjh22yQ0DD7N1Zj7MPviexPfjSfVA71WnTh17Yv3ggw\/cKfntXJmNhDKY0OsPtk4F9erVy2aATzzxhG2ywfViIP3mm2\/s55144onukn8IfQa\/C2Zx8fHx9nkI5xdcjwOtF1\/PLJMXRuEY1MK\/l0PRvn17e8wy22Mmx4sCPth8idtL+1tf6tevn82+eSxw+dBreVHB4+Jg+LthEx1mooW1W2VzKu5DZsZ839BnsAQgvNRAyhYFzSgWKgILxxMcAyMbm7PjAmJACRV1Va1aFZMnT7ZFYCE8KYQXo\/E9lyxZYotbGYTvuece26Cfr1u4cKE9cYwYMcIWq\/Fx9tln2ytvLhPC95gxYwbGjx9vswheqTMbYFvLA52kWWTJzPLDDz+02eDQoUPdOflY9Lxq1Sqb4TKYsKiYxWgMKKF9wW3lNhfEbQzth9atW+8t0nv88cdttsOMgoEylDUyGLZs2dK2M+T6MwMizg+9PzN77p\/\/\/ve\/uPrqq20mwsDGz7nmmmvsMlwvZmrh3xX3AaeFX\/QUxH3Rpk0bG8zZLpbatWtnOzBgBhpe1M33Cc\/+mjVrZjuWYHvIF1980X5v3Dbug4JZcfh+KYivueWWW+x3ye+C3yE7dgjt8xC+nu8T+vzQPgr\/rgsuw4DMdrsPPvigfe\/HHnvMtj0+\/fTTbelJCN+n4H664IILbFtgXlhw\/Zhx3nDDDbb0Y+3atXaZgp9HofUK7QN+9vTp0zFo0CB7PPG7PO+88+xvp0GDBhg7dqw91kaOHGmPdc7nxdAbb7xhXy9lj+8\/hvu3RBkGFf64Q8VRIbz\/w+I7BjdmQizqbNWqlb1yJmYI4Se80HwuTwxKzMSY1fHeDa\/oeeJmMd1ZZ51lr9DXrFlj71ey4T\/vGbHIl1lbyIIFC2wmx3uSPMHywaIzZkAM7OFZYUF169a1QZsnz3PPPXef4sMWLVrYwMF7eosWLbIZ8\/nnn28zYAYRnoh5X4snxvBiXeK2MAthAGIWzHuZvM\/K4tnKlSvj9ttvtydYZrq898uiQwbWuXPn2s\/buXOnvefK\/cPMdODAgfZ9uTwzJWaALC7m3wyyTZo0sfO5LtxPp5566t77awwC3DdcB56cC8NtZ\/bL4McAze+N3znXjR1ChPYj93VKSordZn5PvHfHLGzatGk24HFdeFzwu+b68qIhhOvG7WXA2R9mYyydYHE4v0eu8znnnGPXgxdMxOOBQZ77luvM74CBid9P6FjjNG43Xx8qheB3yYyZ68Aicl4McN0YuLiveGGxdOlSeyHIbQrh67kO3A\/cPh5vxO1nRxr8TP4+eLzxQit0DHE\/sQcrfo98LY9lvobHEreP8xmI+VvhvmXnHCyR4bHO45fHADNNviY5Odm+p5QtGhpMRESkiFQ8KyIiUkQKmiIiIkWkoCkiIlJECpoiIiJFVKYqArGnDlYBZw1H1V8SEYluodrfbEbFWtOsgX24lZmgyWDJat6s2s3uv8LbrImISPQJBU22I2Y7cLaXPdzKVKbJdnfsP5MN0hlERUQkejFoMoSxre59991n29gebmUuaLKz7eK4mhARkbKBnVewR65QByyHU5mrCKRiWRERCVecuZ9qz4qIiBSRgqaIiEgRKWiKiIgUkYKmiIhIESloioiIFJGCpoiISBFFXdDMWboU2T\/PRTAry50iIiJSNFEXNDMfux+p\/74KgfXr3CkiIiJFE3VB08lMB3bthJOb504REREpmui7pxkTww4LTfRUz0IiIhKZ6AuaXp+JlyZglp0ud0VEpJSIwqBpNplZpvqwFRGRCJVY0Jw0aRL69++Pzp0744ILLsD69evdOYeZN0ZBU0REDkmJBM2JEyfiP\/\/5D0aMGIGnn37ajo\/p8\/ncuYeXx2s+J+goaIqISMSKPWju2bMHjz76qA2aQ4YMQbt27XDWWWehTp067hKF+zsCqw2aJtO09zVFREQiUOxBc+3atVi9ejWmTJmCTp06oWXLlnZg6by8PzcBmT17NsaOHYs777wTd911F+bPnw+\/3+\/OPUQ+s8kBk2mq9qyIiESo2INmRkYGtm7dah\/Tpk3DZ599hqlTp2LChAnuEn\/GAUb\/tkFGbbZqAqZqz4qISISKPWiGilhHjRqFGjVqoG3btjj33HNtAC3o2GOPxd13322Lcu+44w60b98eubm57txDxHaaDJgqnhURkQgVe9CsXLkyqlWrts\/9ydjY2P0WzxYUCATcv\/4CWxHIvI+KZ0VEJELFHjSbNGmCrl274qWXXrKBMiUlBe+99x569+7tLnGYMVizZJY1aEVERCJQ7EHT4\/HYSj3Lly9Hjx49MHDgQFvsOmzYMHeJw8znttPUPU0REYlQsQdNYq1ZVv4ZN24cnnnmGYwfPx5JSUnu3MMshsWzuqcpIiKRK5GgSbVr10afPn3QrVs3xMfHu1OLQahHINagFRERiUCJBc0Sw9qzvKmp4lkREYlQ1AVND4tnGTAVNEVEJELRl2naikAKmiIiErnoDJqWgqaIiEQmCoOm205TMVNERCIUxfc0VXtWREQiE4WZJkdJYdBUqikiIpGJvqAZYzbZ42FHtu4EERGRoonCTDO\/IpCjoCkiIhGKwkzTBE2TaCrTFBGRSEVd0PQw02TxbN5fHJdTRESiTvRlmrGxNtF0cnLV6kRERCISnUHTZJrB3FwbPEVERIoq6oKm1wRNh8WzOTnuFBERkaKJwkwzzvzjgZOdnf9cRESkiKKvIlCs31YEcpRpiohIhKIwaMYy0QRyFTRFRCQy0Vs8q0xTREQiFKWZJoNmtpqciIhIRKIuaHqZabL2bK46NxARkchEX\/FsXP49TRXPiohIpKKweDZUe9ZkmhoeTEREIhB9QdMfZxJNdm6QbYKmO1FERKQIoi9o+nw208xvcqKoKSIiRRd99zTZRtMXk39PU8WzIiISgegLmiyc9ZpsU0FTREQiVOxBMxAI4Oabb0b37t3Ru3dv+\/\/o0aPt9GLj9+f3PaugKSIiESj2oOmYQPX999\/jqKOOwq233moD6DnnnAOvt5hWhfczY+KArAwFTRERiUiJFM\/6TabXpUsXnHjiiTj11FPRrVs3E8t4s\/HAfKzE81fxY9hW02SaDOAiIiJFVexBMxgMIjY2FnfddRfatWuHnj17YtasWe7cfS1duhSvvvoq3njjDUyYMAGrVq1CTEyMO\/dQmagZl2CCZpYyTRERiUixB01mi2PGjMHkyZPx7rvv2ozzvPPOw4YNG9wl\/rB27Vp89tlnex8pKSl\/vRiXGW1cvO171kTN\/GkiIiJFUCJBkxWAOnXqhNatW+OBBx6wRbOzZ892l\/hD\/\/79bZbJbPOVV16xxbg5f7X7u1DQZDtNxUwREYlAidzTDMfi1ipVqiA9Pd2dUjgW7f5lJmh64hOAPHVuICIikSn2oJmbm4vMzEz3GfDrr79ixYoVaNasmTvlcGPQjAcCeYqZIiISkWIPmkuWLMHxxx+PM8880zY1GTBgAC677DLbXrNYeD1Agsk02S6UgVNERKSIij1otmzZEuPGjcOgQYPQp08fvPnmm3j44YfducUh\/54mnCCcrCx3moiIyMEVe9CMi4tD3759bXZ55ZVX2qyzWJmY6Ulg0ASCGRnuRBERkYMr8YpAxc3ETHgTk2ymGdyzJ3+iiIhIEURd0CRPkgmawSAcBU0REYlA1AVNVpj1JlU0fzhw0lLzJ4qIiBRBVBbP5meaDoJFaBsqIiISEpXFs14TNB0nCKSreFZERIouOu9pxlew5bTOnjR3ioiIyMFFZdBEjM9sudcETRXPiohI0UVn0PTFmC33wUlXRSARESm6KM00\/eYRC6gikIiIRCA672n6TcD0x8DJVNAUEZGii85M0wRNjz\/OBE11oyciIkUXnUEzzgTNWJNt5qjDdhERKbroLJ6NNVmmeSA3150iIiJycNGZaZos0xvPoJmtcahFRKTIojPTjDMB0zwck2nyISIiUhTRGTTjE+zDycpW\/7MiIlJkURk0vQkJ8CYmmqCZBSdN\/c+KiEjRRGem6fXAw6CZbYKmOm0XEZEiis6KQIaXxbM2aKp4VkREiiZqgybi4oHsXBM0NdKJiIgUTfQGzYQkOAEGTfUKJCIiRRO1QdNTMRnIywPU\/6yIiBRR9GaayZWBYADIyXQniIiIHFj0ZpqVKsPDP3Jy7HMREZGDidqg6a1cBfB5EVSTExERKaLozTSrVgViYhDctVP9z4qISJGUeND87rvvcOWVV2LlypXulOLhq1ETnhg\/Att3AIE8d6qIiEjhSjRoZmZm4vrrr8ezzz6L33\/\/3Z1aPLw1asDjN5nmju1wstVpu4iIHFyJBs0nn3wSrVu3xhFHHOFOOTCv9+9bXV+FCiZoxsHZuR3IVWUgERE5uBILmiyOnTp1KkaPHg2PxwPH+fOdxc2bN2P27Nn46aefMGfOHGzbtu1vDZxISobDe5oKmiIiUgQlFjTHjRuHgQMHomPHjsgppNnH9OnTcc011+Daa6+1j3nz5sHv97tz\/wZVa8DZvdNkmiqeFRGRgyuRoDlt2jQsX74cN910k33O7HF\/wXDIkCH44YcfMGPGDFth6IQTTkB2drY796\/zVKsFsO\/ZQMCdIiIiUrgSCZqPPPIIqlWrhkmTJuH555\/Hrl27bFHtihUr3CWKh7dmTSAvVwNRi4hIkRR70AyYrK5v377277feegsfffQRdu\/ebbNJZp8Hsr\/7nn+Ft5bJNOEgsHlT\/gQREZEDKPag6fP5cN111+Gdd96xj1deeQXVq1fH2LFjMWjQIHep4uGrWw8eE4gDG9a7U0RERApXIsWzvIcZqgVboUIFXHXVVWjevLl9Xpxi6tWz2WtgwwZ3ioiISOFKJGiGYwWgW2+9tUSCpjcxyUTOOAQ3KWiKiMjBlXjQLElObHx+W82Uje4UERGRwkV10PQkVIC3SlVg11Z3ioiISOGiO2hWSISnajU4mRkIqoMDERE5iOgOmomJtuP2YGYmAhvV7ERERA4sqoOmN9YPb63aQHo68jasc6eKiIjsX1QHTfJVqQYnOxuOatCKiMhBRH3Q9FSpbttqBtUrkIiIHISCZu268PpjgNTt7hQREZH9i\/qg6a1bj90SIbB1G\/7enm1FRKS8iSho5ubm4rfffkMwGLTPU1JSsGfPHvs3cVzMr776ynbKXlbE1KsPT2ISAptTENyj0U5ERKRwEQXNTZs24ZxzzkFqaqp9fvvtt9sgGbJ9+3YMHz4cmZmZ7pTSz1elim164mzeDCctf7tERET2J6KgyU7WY2Ji4PF47HMGyfSwsSg5Pz4+fu\/8ssJbpRaCWzcDexQ0RUSkcBHf0wwFTuL\/ob+Jw36VtYBJnqYtgNSdyjRFROSAIgqaDIh5eXlIS0uzz3mPMysry07j35zOv8ta4IxpfQTgBJH7+xp3ioiIyJ9FFDRjY2OxZs0atG\/fHnXq1MHXX39tB5SuX7++fRx77LG2yDY8+ywL\/G3aMoVG7qJF7hQREZE\/iyhoVq1aFdOnT8cnn3yCjz76yFYC+vzzz+3jyy+\/xLRp0+w0BteyxFerDhCXgODSxe4UERGRP4soaPKeZceOHdGpUyf74N98NGzYEHFxcWjcuLF9XubExcNTuz6Ca5arraaIiBQqoqDJ9pePPvoofvzxR3cKMHXqVBx99NFo27YtOnfujJkzZ7pzyg6Oq+lr3BTO7h0IuvdrRURECoooaO7evRsvvvji3oo+2dnZGDVqFHr37o2lS5eif\/\/+GDNmjJ1XlngS4uFr0RzIykLuYt3XFBGR\/YsoaLKmrN\/vR5MmTexz3t9k70C33XabncZKQewlqCx1bkC8BPA3aoZgTjbyfp2fP1FERKSAiO9pMstkd3k0Y8YMVKtWbW8Q5X1Ndm5QFnlq1YEnNh7OClUGEhGR\/YsoaFavXn1vRjlhwgQ8++yzOO+889y5wKJFi2zN2bJWe5a8DRrDU60GgikbVBlIRET2K+JM8\/HHH7ftMP\/73\/9i5MiRuOaaa9y5sG04L7jgArtcWeNr3AS+WjWRt2E9Aps3u1NFRET+EFHQJHZi8Prrr2P27Nm455579skqzz77bNvxQVnki\/XDW70Wghs3IrhpoztVRETkDxEHzRDevyxo69atOPfcc\/fpxL0s8bQ+Eg77oN2ioCkiIn92yEFzf1hJiJknO3Uvi2K7dIcnxouchb\/pvqaIiPzJ3xrd2BylKAFz3rx5ePnll\/Hkk0\/ivffeQ0ZGhjunZPmPag9PQiJy5vwI5Oa5U0VERPJFFDQ5gsn8+fPtY8GCBfs8Fi9ebP\/fs2ePu\/T+seiWAXPKlCn2fe6\/\/35bAzc0ckpJ8iYmwtO4BZxF8+Hk5TerERERCfE4hvv3QW3btg3HHHOMzSYLDv\/F5+zogP8zgDLrLAw\/MvR69irEPmsZSAcOHGinFeaMM86wNXZPPvlkd8rfizsi9Y5bkPvGs6j43leIO7JsVmoSEYkmffr0sRVTe\/To4U45fCLKNNmRwaxZs2z\/st9\/\/\/0+D3Z0EJp+oIBJDJjsIIHZJUdFYRCtVKmSO\/cPnL927VqsX7\/ePpjFHs77pQzjseaiIJiTi5zp3+ZPFBERcUUUgRjsatasecAHO0AoioceeghdunSxtW0vv\/xydOvWzZ3zBw4\/dvrpp9vH4MGDbWA+3B0n+Bo1BSpVQWDeLHeKiIhIvoiKZ9lh+7Bhw2znBXwZRz1hkWzoLfg\/M0HerzxYtrlr1y7s2LHDjpjCykAPP\/ywbQMajkW37Mc2VBx8zjnn4F\/\/+hdOOukkd4m\/X2B3KnZfdCacrAxUmjAFMSa7FhGR0qvUFs+ySPXjjz\/G3Llz0aJFC3tv8cILL8T555+PoUOH2s4NzjzzzCL1CFS5cmU0bdrUZposhn3nnXfcOX9gW1Aul5ycjIoVK9osM4IYf0h8lZIR06yF7eQgb+Fv7lQREZEIg2aNGjXsPUvWdmXgnDZtmg14jO6XXnqpLWblI9L7jlu2bLFZ68Ec7oAZ4j2iPZCehuDqZe4UERGRCIMmde\/e3d6PfP\/9921R6cKFCzFkyBAMGjTIdth+MCtXrsQVV1yBZ555Bm+99Zbtq3ajyepOPfVUd4mS5+\/RC54KFZCz4BcE8w4ezEVEJDpEHDRDqlSpgo4dO+LEE09EnTp1sGTJEpsxHgyz1WbNmuHTTz\/FCy+8YItfv\/32W7Rq1cpdouTFtWkDT626yJv1HbBzuztVRESiXcRBkx0cMOCxveRpp52GiRMn2nuabG7Su3dvd6nC8f7kjTfeiA8++ABffPGF7RWI90dLm5ieJwCb1yNn+VJ3ioiIRLuIgubOnTvteJoMmBxseuzYsbjttttw3HHH2VquzDbZsUF5EH9Cf\/AWavbnn7pTREQk2kUUNJllpqam2oD5zTffYPTo0bb9ZN++fdG\/f39bm5a99rCWbVnna9QEnjoNEfhphjpvFxERK6KgyY4LfvnlF9uLD4toQ4\/PP\/\/cBlHem+RYm4e7A4Li4KtbHzFHH4PgxvXImTfPnSoiItEsoqDJDgZYPFu7dm3k5ubazgjY1pKPmJgYTJgwwTZHycrKcl9Rdnl8XsR26AwnLRW5M75yp4qISDSLuCIQs8oOHTrYbu86depk+6Jl85HOnTvj3XffxQMPPGCLb8uDmB694a1WDbk\/z0awHFwIiIjIXxNR0GSH6f\/+97\/tPUy202TQ5Mgk48ePx2uvvWa7xGOPQOVFbKtW8DZthcCcHxFYs8qdKiIi0SqioMlKQOxrln38de3a1fYXy\/ucbDbCvv\/KI\/+A04C0ncj5UR24i4hEu4iCJgMmK\/nw\/iUlJiba4cLq1q1rn5dHCf1OhJNcBdmTJrpTREQkWkUUNNkRO9thsp3m8OHDMWLECNuN3qhRo3DJJZfYLvEuuugi2zSlvPDUrgN\/rxMQWLYQ2b\/+6k4VEZFoFFHQZJd37MygZcuWaNCgAZo3b45bb70VRx11FBo2bIjGjRujUaNGtpZteeH1+xHX+wQ42dnIfk\/ZpohINItoPM2SxsGoOYoKO1EoTnnr12P3RWfAk5iESq+\/D1+lSu4cEREpaaV2PM1oFVO\/PmI6HYu8hfOR+9MP7lQREYk2CppFFD9shB0nNHPyW+pWT0QkSiloFlFsx07wtu+CwLefI7B6tTtVRESiiYJmEbFuU8L5lyC4Jw0ZE19zp4qISDRR0IyAv+tx8DVtibyvPkZeEQbcFhGR8kVBMwIxdesits8A5K1ajpzPprhTRUQkWihoRij+ghHwVqxkKwQF09LcqSIiEg0UNCPk5zBo\/U6GM38Osmd8404VEZFooKB5CCpccpn5JwlZzz2FYCDgThURkfJOQfMQ+I88Cv6BpyFv4TxkvT\/JnSoiIuWdguYhYM+68UMugKdCIrLefQPBjIz8GSIiUq4paB6iuGO7IqbXCcibPQPZX3zmThURkfJMQfMvqHDl1fAmJiHj6YcQzM52p4qISHmloPkX+Nu0Q+zQCxFcuhAZ419wp4qISHmloPkX8N5mwgUj4KnfCNkTXkTuhvX5M0REpFwqkaC5detWzJw5E1988QWWLFniTi2b\/E2aIv6cSxBYvQKZLz7jThURkfKo2IPmunXrcN555+GGG27AY489ZgeWfuCBB9y5ZVOFkVchpn1nZL\/5MrJ\/1HibIiLlVbEHzYSEBNx777345JNPMHXqVDzzzDN46KGHsHDhQneJwnk41Egp5E2IR4XRt8AJBJHx2P2qFCQiUk4Ve9CsXr06jj32WCQnJ9sgeNxxx8Hv92P79u3uEn\/Izc1FWloa0tPTkZGRYZ+X1sAZ1+8ExA0ajNwfZyLj9Zc1ULWISDlU4hWBpkyZgsTERLRs2dKd8odJkyahZ8+e6NWrl3189dVXiIuLc+eWLgzlFa67Gb6atZD17OMILF2cP0NERMqNEg2aixcvxujRo3HTTTehdu3a7tQ\/nHTSSZg8ebJ9MID26NEDOTk57tzSx9+oERKuuQXB7VuRNu4uBANBd46IiJQHJRY0N2zYgLPOOgvDhw\/HpZde6k7dF4twmzZtikYmGPFRsWJFBIOlOxAlDB2G2EGDkfftZ8h48Wl3qoiIlAclEjR5\/3LIkCE4+eSTcdddd7lTD660B0ziLdfEa2+Gt1EzZD7zKHJ+mu3OERGRsq7YgyYr9gwbNsxW7hk8eDDmzZuH77\/\/Hrt27XKXKPv8zZoh4bpbgfQ9SLt3LIJ70t05IiJSlhV70Ny0aRM2btyIvLw8XHfddRg5cqQtol2wYIG7RPmQcOpgxF18BYK\/\/Ig9d9\/mThURkbKs2IMma8n++uuvtl3m7NmzMXfuXCxbtszWji1PWJs28R\/XwtflOGRPeh3pr72cP0NERMqsEqsIFA18Vaqg4r2PwFOlGjIfuw9Zur8pIlKmKWgeZv4WLZF4zyNw0vcg45bRyFu3zp0jIiJljYJmMUgYcBLir7gOgVXLkHr9PxBITXXniIhIWaKgWUySrr0Bsaefg7zZM5B2+xgE8wLuHBERKSsUNIsJKwYl3fkA\/L1OQO6Ut7HnkXHqn1ZEpIxR0CxGvooVkXTfo\/Ad2RHZzz2G9GefUOAUESlDFDSLmb9+fVT871PwNWuJzIfuQubE19w5IiJS2ilolgB\/y1ZIvP9xeGrXR\/qdY5D5wWR3joiIlGYKmiUkrlNnJN1nAmfFZOwZ8y8FThGRMkBBswTF9+yFpP8+A0+lKki\/eRQy33vHnSMiIqWRgmYJi+\/dB0ksqk2ujD23XouMt99Q5SARkVJKQbMUiO97AhLv\/z94qlVH+h3XI+OlZxU4RURKIQXNUiK+Tz9UfPAZeOs1RMa427HniYcVOEVEShkFzVIkrms3JD32PHwtjkDWo\/cg7a7bEMzKcueKiEhJU9AsZeLaHYWkp16Gr0MXZL\/0JHaPuhyBnTvcuSIiUpIUNEuh2MZNUGn8O\/D3HYS8zz\/E7kuGInflCneuiIiUFAXNUsqXnIxKz72G2AtNprnwF6QOH4rMaV+4c0VEpCQoaJZinpgYVLrnv0i4+R44qTuRft1I7Hn6\/1RBSESkhCholgGJl16JpMdegKdKdWQ+fBdSr\/8nArt2uXNFRKS4KGiWARxWLL53P1R6cSJiju2J7HffwO4R5yBn7k\/5C4iISLFQ0CxDYpq3QKVnX0P85dcgsOBn7B55HjJeewlBRwW2IiLFQUGzjPFWTELyLXci6cFn4ImPR\/qdNyLt2quQl7LJXUJERA4XBc0yKuGMs1Hptffg794bOe9PxO6zByHjk6nuXBERORwUNMswP4trX5iAhBvvhLMnFenXjkTqDVcjsFOVhEREDgcFzTLOExuLpH9cg4ovv4uYIzog693XsOucQcj69CM1TRER+ZspaJYTcR07IfnVt5Fw9U0IbliPtKtHIPWm0chbs8ZdQkRE\/qoSC5qZmZlISUnBunXrkJOT406Vv8JXMRlJ145B8niTdXY6FjnvvI7dF5+B9DdfQ1D7WETkLyuRoJmRkYGzzjoL7du3R+PGjTFjxgx3jvxVbNMZd8yxqGQCZ8LoW+Fk5yDj1muQOvJ8ZP8wM38hERE5JCUSNH0+H6666iq88cYbaNasGZwitjP0eBgSpCi88bFIGnUtKr06Cf5BZyB35tdIu3wYUm+\/CYFt29ylREQkEiUSNOPi4nDqqaeie\/fu9u+iBk2JnL9la1R66kUkPfUaPI2bIWv8U9h5ah+kv\/YSAqlp7lIiIlIUJVoRKDs7G8Fg0H32Z5MnT0avXr3Qt29f9OvXD1999ZUNshIZ5ucJAwahyuvvIfHW+4BgABljr8Pui89CxvuT8hcSEZGDKtGgeTBdu3bFPffcg7vvvht33XUXjjzySOTl5blzJVLe5GQkXjEKlSd\/jthhIxBcsxLpN\/4DOy88C9mzZ8EJKuMXETmQUh0069atazPNHj162EfNmjURCATcuXKoYurVR\/J9j6Dis2\/A3\/8U5P3wHVIvPhOp111lgucP7lIiIlJQiQbN2NhYeL1e+P1+d8qBHagoVyJja9l26Yrkx55FxRcmwtf+aOR8\/B7SrhyG3aOvQs7SxeocQUSkgBILmmvWrMEvv\/xi22suX74cy5YtQ25urjtXios3Jgbxx\/dFlbemIvGBJ+Fr2QY5H76F1CEnIe32MciZ97O7pIiIlFjQ\/Ne\/\/oXBgwfb4DlmzBj06dMHmzZppI6SwsyzwhlDUOmlt5D0yHPw1muA7NeeReqIIdh99eXIWbQwf0ERkShWYkHz\/ffft0GSFXu2bNmC1atXo2HDhu5cKSnexEQkDD4blad+jQoPPgtfs5bI\/mgSdp\/ZD7tGXYacn2arwpCIRK0SC5oxMTH2QezsgPc3pfTwmu8k8exzUOn191DxifHwte+C3I9N8LzoDOy+\/HxkTvlA7WtFJOqUaEUgKf288fFIOOlUVHntXST9703EHN0VubO\/x57rr8DO0\/ohY\/Lb6mFIRKKGgqYUCYcgSzhxACq\/PhkVnxqP2MHnIPD7GqT\/+3LsuvAspP\/fw8hdutRdWkSkfFLQlIiwwlB8rz5IfuBxVH7nY8Rd\/A9g1zZkPHY\/dl98JnZffSWyf55jO4oXESmIN3Wc3FwE09MR3LXLnCuy82eUER6nDN2YOv3003H55Zfj5JNPdqdIaZC3eTOyJk1EzrRPEFgwx1yKeRHTpSfizxgKf\/fjEVOntrukiESDQHoGgjt3wtltHgyMabuAzAzkbduKwMZNCG7eCGfTRgTMI+HSq5B02VXuKw8NW1+w9zh2gnO4KWjK34YdwOfNmY2MCeORN+NLOJmZ8LVoBX+34xF\/zkWIbdfOXVJEyiobMAIB5KVsQt769QhuWIfgxg1wUkwg3LkVzp40BFN3w0lNzX+k74GTlQFPIM9eUHtYAZSPuAQgqRISLh+FxItG2Pc+VAqahVDQLDtyV61E5qsvIveHbxFYtsT8UHzwHXUMEi4cAX\/nY21XfiJSegRNILRBLi3NBj4nM90EPHMhvH4D8tb9juD6\/IeTsgFIMxlkbg6QFzCPPBNIPfDExQOJSfAkJcGbXAke8\/BWTAb4f4268NSpC5\/53bMNuL9ePTOvog3Af8eAjwqahVDQLHvytmxF3o\/fI2vKZOR+Nw3IyIS3cXP4ux+H2BNOQWzvPrYrRRE5\/IJZ2cgzWWFwo8kQTaYYTEkBmB2m7UJgx3YEt5vHzh1wdpmgmJYKT162yQ59f2SIFZKA6rXhrV0X3rp1EWP+95n\/vUnJcMw8b6XK8JiHt0oV86iK4hoCWUGzEAqaZZfD4hyTfWa9MwG506chsHolPD4vvA2bwn\/KWUgYeJL5uzG8aq8rEhGewB1zMepkZpj\/M4CcLAR370Le2rUIrF2DwLq1cNabx\/bN+ctkZQFZZvmcXDgmqnl8PngSEuAxWSI7N+H\/qFQFnlomK6zfAD4+GjZETN16JptMYMN6wO+3NeptMM1fjRKloFkIBc3yIbAnHTlffY6cmd8i9+vP4WzZBFSsDH+P4xF7XG\/E9OiD2MaN3KVFhPJS0xDcnILgFhP8+Ni9zd47DKZsRsD8hpg15k\/fYRY2GaI9s5t\/fCa4sYi0Wi14atSAt2Yt+GrVhM9kgkg0WWG1aiZ7NM9rmIeZ561gAmMZo6BZCAXN8oUHXnDdOmTN+AY5k99EYOkiBNP3wFe3Pnytj0TcGUMR1+04eKqYq978l4iUK\/bky3uJOTkAB6zIyzUBcIutE8AsMcgscdM6IHUHgml77D3G4B5WrMnOr1gTY7LEuLj8TDHeBLsqJijWawRvg4bwNWqMmEaN4DMBEbFcpkL+cvzfvK48UdAshIJm+ZbzyzzkfP4RcufMQt78ueYkYk4MNeoitv8piO3VBzEdOiOmRnV3aZGyw14g7txpe89ydmwHdu80QXAXAuvXIe\/3tSY4\/m5rofL+InKy7e0MBE0wjTHBrmIlc+FY1WaEvmo1zMNkiMlV4alZB5669cxFZj3ENGiQnzlGKQXNQihoRoeAuaJm1pn99TRkT3kXzoY15qTjha95K\/jbdkDMwFPtcGbeON3\/lNIlaLJFGwhXr0JgNTPFVcC2zQjuNpmiCZr5bRd32WYYnoDJLP0xJuvzAyZL9FSrDU8Dkxk2bgZfk6bwmyzRUzEZngpJ+YGzkvk7OVk90uyHgmYhFDSjjxMMIvuHWch5\/y3kLZyPvGWLbbGUt6q54u7dH\/EnnWrHAPXXVxMWObyCOXm2Vikr2SA9FcHUXSY4rkbuiuVwVq4wAXK1mc9MMcf2eGOLXf3xJuC5TTBYo7RyFRP8TNZYuz48DI6NG8PfxPxfs2apqVRTFiloFkJBM7oFzFV67rw5yJ37I7I\/\/wjO6mX2xORp1AyxR3eBr2NXxPbpZ9uAiRyqoAl6tsiUtU\/XrYHD3mt2bbc9X9mKOFu3wNm5A56cTMBnAh2bZPB+Yo268NZvaGua+ho0REytOjZDRGUTJKtXNw9zoZeU5H6K\/J0UNAuhoCnEA5YNsHOXLkHWh5MQnDvTnuRYjZ5tw7wtjkBs\/9MQd1wPeGrV1YlK9uLZjhVpkMHKNJm2TSIzxcDyZQisWAZn0+9A2i4EQ004mDH6YuBl8WlyRdtY35NsssU6DeBt0hTepi0Q27w5fCYgIiYWiIstVU0xooWCZiEUNGV\/gtk5yJn1PfLm\/4Scn35A4Jc5QHqavRfkbX8M4rr1gK9dJ\/g7d4avYkX3VVLeBXanIrCBDfnXIbglxWSH28zz9chbZ7LI9evymzplpedfhVF8BXiq14KXPde4FWy8VarDU7XG3go3PvZkw3aKUqooaBZCQVMOhllEcNNGZP84EzkffYjgst8Q3LXTnhB99evD17It\/P0GIa57d3grVTVZgd99pZQltrTBZIEee\/8wB4FNKchZtgRBky0GVi8Htmy09xyDu3bbnm3AkTS8nr1NMzzJleGp3xjeZi0Qw5KJFs1tTzY8TrwsmWBXcAqOZYaCZiEUNCVSuSnmZPrlFwjM+wG5CxeYk+pSIC\/Hdqbga98ZcbwHekR7+Fq3ga+KOWlKqcMTVCBlc36j\/h1bEdy+FbmsncoAuXIZsGm9yRgz4LDdYtAsnVDRZIzV4a1V2z7YTMNTsy48DZsgpmlT82gOX2KF\/DeXckFBsxAKmvJX5G3ZguDaNcj5eTZyPvsYwSUL8kdgSEhCTHOTcTRvBe\/R3RHft586lC8hHIc1Z9UK5C1ZjODyJba5UcAEyeCWrXD4\/86d+f2h2m7c\/EAlExybtIC3ZSv4zSOmgckekyvZbuC8VavBy2Ya7ntL+aWgWQgFTfm78KBn59SZX3yOwIwvTcayxPbAgowMeBLi4WnQFP7eJyCu5\/HwsRivQUN4y1kvKiXB7ncWme7YDid1FwJbU5Dz2wIEFi0ymeMSYEeKyRqzbQ85jscLT1KyCX6sfWqyRRMEfbUbwdPCXOC0bovYVq1sO0b2Cq7AGN0UNAuhoCmHS54JoIFFv5ngudS2C82bMzO\/d5aAA0+d+vAf2d62B\/V16IzYLl3hSzYnazkoNtPIY83UlcvgbPwdgS0pyFu3zvy9HkETMD25Jmtkh+H+WKBGPXgbN4WvWXP4WTO1ek14qtWEt04deGvXgy9O959l\/xQ0C6GgKcXBjv6QlorcxYuQPe1TBOb\/iACHUzLZkccfk5\/5NDTZznF9EHfccfDVqmuyIDPNH30ndZs5pqYCLObek4acpUuQ+9uvCC5dmN+TEzsUZ1+p2dm2v1NPUkU7fJQdNqq+CYxHtENs23aIadrMVtJBnMnyWVFHqaNEQEGzEAqaUhL4A8kxATT4y1xbhJizYD4CS361vcJwrEFv3YY2A\/UfZbLRpi0Rc1RHxFQvn33k5u3ahbxVq4Df1yCwdRMC5v+8FcsQXL0KzvYU29mE3WMVkk2GWB9e22l44\/wLizomk2zUxPaA462otrPy91HQLISCppQGAd6T27YFuctMJvrNN7ZmrmMCiJOWDsTHw1eHA\/Q2gPfIoxHb83jEtm4DT4UKQGxsmbj3xq4L2USDjf9zV602meM8BBb+BmfdKpNtb0NwO4ekSoXHLGfv\/1ZIhKdGbXhbtbPF2DEmc\/RVqWazSpis0meWETmcFDQLoaAppRF\/QHnLliFn1gwEF81H7oqlCKxaAezYmn+\/jmMZtukIf9fuiD2iLTz1GyGmSXN440u+w3mue2D7DgQ3rLeBP7B+rcmkFyBv4QLABEkGTg5X5fjj4GXD\/3r14TMPL3taatoK3iOOsBcFXnOxIFJSoiZoBgIBc04peo1EBU0pCzhKC8dBDGxcj5y5PyFv5nQEVyyCk5Fuu3HzmqyMHXXHNGoGT9sOiDXB1N\/6CHiK4UYeh5zKXbYEufN+QWDxAgQ3\/W7WcyOCKRvg7Nxu2zl62BUcOxVv2Ra+dkchru2R8Nbmfdvq8NasqUpQUuqU+6C5bds2jBo1CnPmzEGFChVw5513YvDgwe7cwiloSlnDHxdDYTAtDdlz5yB3xje2l6LAhnUImmBlu3HjIMIVK8HXpoPNRv0djobPBFZPrVqH3O1fMDsbwS1b4OzYhty1q5Ez5ycE5\/+M4PqV+ZV2WPzK7JEVmNgJQM068DZugZgjzTp06oSYOvVslkyqkyOlXbkPmpdddhk2b96MRx55BD\/88ANuvvlmfPXVV2jRooW7xP4paEp5kbt+A4Irl9ni0NyFvyJv\/jwEVy0BsjPNXA881UzAbN4CvmYt4TMZqe\/Ijog98ih4C+nJJpCaamutBpYstENU5ZlAGVi50maSoWYd7AXJ27QVYo5gG8fWtogV9RqYjLcJfEmJ7juJlD3lOmiuX78exx9\/PCZPnoz27dvbaSeccIINiMw+D+SMM87AyJEjFTSlXGHFG2dPOpy0XchetBC5M2fAWfgLAuw\/dft2O9qGt0IivFWqALXr2+7\/Yo85Nr+izo+zEVxoAu7WFDu4cTAzE55Yk0Fy7Maq1eBpYoJkp2Pg79gZ\/romSLI5R2JisRQFixSXch00586di6FDh2LWrFmoyYFXjTFjxtgi2xdffNE+D\/nyyy\/x+uuv2\/ue\/JF\/9NFHeOWVV3DiiSe6S4iUX3nmN5H7K\/vLXYzAmlW2a7nAqmXA7h35ZaahX2712vA1bYGYlq3gq98wv5i19RHwN2zoLiBSvhVn0PS6\/xeb7OxsGwTDKwBVqlQJO3fudJ\/9oU6dOujevfveR\/Xq1RFkdXiRKMC2ngl9+iLxsn8i+d6HUemFCagy6TNUev1DxF9\/JxLGPoDKkz5HlXc+RqXnXkPyXf9F4uX\/QkL\/AQqYIodJsQdNv99vA1948MvIyEDSfgYKbtOmjb3\/OWLECAwfPhzNmzdHXl6eO1ckunAUFvacE9v9OFS8ahSShl9mi11t5wGq0SpSLIo9aDJbzM3Nxa5du9wpwK+\/\/oq2bdu6zwrHJioiIiIlpdiDZpMmTdC5c2c88MADSEtLw4wZMzB79mwMGDDAXUJERKR0KvagSffddx9WrlyJnj172uLXW265BR06dHDnioiIlE4lEjRbtWqFDz\/8EO+88w6mTZuGq6++2p0jIiJSepVI0KSKFSvazgzq1avnThERESndSixoioiIlDUKmiIiIkVU5oKmuv8SEZFwxRkXylTQ5I5R0BQRkZJSouNpRoI9AbEt5\/bt29GsWbNy0dEBLwC8Xq\/9n9tTRr6KYsF9wq4WuU\/Ye5T2zR9CF488dnTc\/Fno2AkdN9o\/f+Axw33D46Y8dEnK75o+\/\/xzvPvuuxg0aJB9fjiVmaDJ1fz2229t0IyPjy8XPwR2KcgO6NPT03HVVVepi0BX6IcwduxY+yPo1auX7UVK8vG44Vi0HMzgoYcestMUGPLx2OG+GD16tG0DzpGU9LvKx2C5ZcsW3HrrrRg3bhyqVatWbnpZS01NRb9+\/VCrVi13yuFTZoJmecWTHrsUZA\/9sq+zzjrLnvgGDhzoTpGQmTNn2sHbP\/vsM3eKhOOoF\/xtHX300e4UISYdvBDlCFJs9ieRU+3ZEpaTk2NHfpE\/477hQ\/5M++bAtH\/2L7RfdM45dAqaJaxy5cq2E3v5s7p166JChQruMwnHWxTqGKRw3DexsbHuMwlhEW2DBg3svU05NCqeLWG7d++2N+SrcFR+2Qfvv7AIKSEhwZ0iIVlZWbZYv3bt2u4UCbdp0yZUrVoVcXFx7hQh3sPcvHmzPW4UOA+NgqaIiEgR6VJDRESkiBQ0RUREisj3H8P9W4oJS8Tfeust\/PrrrzjyyCPdqfn3qSZNmoRPPvnEtkts3LixOycfmxnwdStWrEDr1q0RExPjzinbuD8WLlyIqVOn2qrwrBbfsmXLve01ifd+J0yYgK+++spWDip4L+\/TTz+1+46v5eg55fl+De9JvfHGG\/juu+\/svfBoqki2fPlyfPTRR\/jiiy+wYcMGNG\/efJ\/fAY+Pt99+GykpKXYIwvDjYNWqVXjttdcwd+5c1KlTB8nJye6c8ufHH3+0jf35OwrVCVizZs3e7Wd7xkqVKtnpxNq0HKqRvyP+Hhs2bOjOkT\/hPU0pXjNmzOB9ZKdt27buFMcJBALOVVdd5XTs2NEZOXKk06RJE8cc4O5cxzE\/AKdp06bOpZde6hxzzDHOBRdc4ASDQXdu2bZx40anW7duzqmnnur885\/\/dI444ghn+PDhe7cvPT3dOeWUU5yePXs6l1xyidOsWTPn66+\/tvPokUcecczJ07niiivsa8eOHevOKX+2bt3qHH\/88c6AAQOcoUOH2u1etGiRO7d8MxdEzqBBg5z+\/fs7o0aNcjp06OAMHjzYycjIsPNfeOEF+xvhcWAuRp2rr77aTqclS5Y4Rx11lHP22Wc7J598stO1a1fn999\/d+eWL9wf5qLanmPmz59vp3Fb27VrZ\/fXaaed5hx99NHOunXr7Dy6+OKLnc6dOzsjRoywv6+JEye6c6QgBc1ilpOTYw\/cIUOGON27d3enOs6sWbMcc3XnrF271j43GaVjrpTtD4CPY4891nnxxRftvD179jj16tVzTEZqn5d1mZmZ+5zAzBWxU6NGDWf69On2+SuvvGKDYV5enn1+zz33OAMHDrR\/b9q0yV5gmAzDPv\/ll1\/svlm2bJl9Xt7wAqFPnz5798Vll11mA0E0yMrK2uc42bVrl\/2u33\/\/fXsMtWjRwvnwww\/tPB5D\/D398MMP9jmD7HnnnWf\/phNPPLHcXlzdeeedzllnnWUD54IFC+w0XkiEHydnnnmmM2bMGPv3999\/7zRq1GhvEH355Zfta3khL3+me5rF7KmnnrJFI2ecccY+DYy\/+eYbmAxyb7EI57NI0mQRtqiJRXInnHCCnZeYmIgePXrABFr7vKxjm0O2HQsxP2Bb5MbiamKxtMkubBszMhkpTFDEzp07MW\/ePDudPcBQmzZtbN\/E5mRpn5c37AHInPD37ovzzz8fv\/32m+1GrLxj85Hw44TFi2ySxOOERY9sumUuLu08HkO8vfHTTz\/Z5yzK5r4KGTZsGEywKHeN\/Hm+mDZtGv7973\/bYtbQLQ7uBxM07d900kkn4euvv7Z\/s0iWt4nq169vn\/M8w64HeVzJnyloFiOTRdr7LTfffLM9mMM7TOa88Pt0DBq858LAYDJNe5JkcAnhCWH9+vXus\/Ll8ccfh8k00bVrV\/ucbe7C7+8mJSXZ9mY84fEeZngbV\/bLyouS1atXu1PKlx07duzTvyYvsnh8bNu2zZ0SPXgPjid39k3M+5XsSzW8Mwz+nrZu3WqPE\/bvzHabIQyqvBg1Gao7pXxgd5znnnuuvdfLfcN7unv27LEPbnMIf188t9DGjRvtPd4Q7kfeBzVZvTtFwilo\/k1Yeefiiy\/GFVdcsc9jxIgRezvVZjBglsCDl1eB4ZUUGAQKVl4JBVYuG3oewiDK15R2XMcnn3wSw4cP\/9O+4f56\/\/333SXzTZ8+Hffffz8eeOABm0WwQhT3QSizotB+4H7hvPD9QtyPZWHfHIqC28ttDT9GogWzoGuvvdZ26s8TPrNN7pfw3xCPmcJ+P+Vxv3GkD15g\/uMf\/7DbygcvIonbGb5vOI\/bT\/w\/fB7\/Dp8v+9r3LC2HjEVFTZo0sQEx\/MEMiUVKLDZhbTbW6Pv555+xYMEC26NLqPiI3X4xawrhAcurQ2abzDD5PLwoiT+O4ujR\/6\/ij69mzZqF7pvwLJH75IILLsDdd9+9t5N2\/uh55cur4RBmVvxhs5s0dkOYlpbmzsnfb7yCZhd85RGPs1CGQCy2Z1YQXhOyvFu3bp3tzJ8jA1100UV2GrNK3s4IzxyZffP4YrEujxX+nkKYZbLWcXnqMYgd+Hfq1MnWjmUtYmbXLILm74OlMzxWQrivQh22cz+El1TwvMRzTVk4v5QIcwUixYA35FnrjzVAe\/fubSstxMTE2MoJO3bscL744gtb2cUczHb5UMUgczA75iRpa9qGV\/zh69988033Wdm3YsUKu40PP\/ywO+UPjz766D6VpsaPH29rP5os1Fb4qV+\/\/t6KP+vXr7eVGsyJwz4vb2666SZbiSyElT769u3rPiv\/zInfVorjfgjHGtj83n\/88Uf7nDWuWZP2008\/tc+HDRvm3HDDDfZvuvDCC21N7fKClaQuv\/xyp0ePHk6vXr3sPjIXlramPc8l559\/vq0MFcKa+qyhTqxIxYo\/fA\/iPjMXtLbCofyZgmYxCQQCtoYfa8LSM88847Rp02bvgcoDlCc\/1nBj7TVWmb\/11lvtPLr\/\/vttUGUNWja7YPXw1NRUd27ZxosCbi\/3B5vW8DFhwgRn9erVdj4DIefxJPe\/\/\/3P\/qC5j0JYg5QnCTbR4YUJgwoDanm0dOlS2yTgxhtvdB577DHHZFjOxx9\/7M4t3xgIWeuV28zjY\/LkyfY75z4hBkWTaTmvvvqqbb7EYyFUy\/jLL7+0F1cPPvigc8cdd9ga1z\/99JOdV17wXMLzC499NrGpW7euDZjE\/+vUqePcd999zn\/+8x\/7G5ozZ46dx+V5EXrOOefY8wt\/i7wYk\/1T5wbFhMWUrNwTusfAIhPedzv55JPtcxYfsYYoOzyYMWMGzjzzTDtYbMhxxx1nX\/\/hhx\/aIicTPMpNo3YWB3GbWVzE2rAcYJmPUE1YFlFz37C23\/z583HNNdfAZAruq2GLclnhg43ezcWEvSdaXkdHYVE1jwU27mcNYt7TO+WUU9y55RuLV0PHCX8nvLXBWtIs5m\/bti169+5ti+4\/+OADmAtM\/N\/\/\/d\/e44C3B1hDlPNYmYr3zEM1bcuL0PkldE+SFXlYS5a3MFgzlkW33H4W75vgubeiHZfnMcTbRqypft5559n7xZwuf6YO20VERIpIlxIiIiJFpKApIiJSRAqaIiIiRaSgKSIiUkQKmiIiIkWkoCkiIlJECppS7rG9HgflPdzYby67ACR29TZ69GjbJvBw4raxe8ay6vXXX7cDIxPb4bL9sUhppqAp5dqKFSswfvz4vUNK3XbbbbafVjZ079ixo+3DlCNk\/B2WL1+Ojz\/+2P7Nvjv5vuxw\/kAmT56MV1991X0WOfYxykbph4p99XJfcCg6dnpeFG+88YbtZOPvMHv27L0XNByZ44UXXsDKlSvtc5HSSEFTyrXnn38e3bp12zv0EXsfYo86U6ZMsfP4nCPR7G9UlEhHeWDH+qHh2xgAGFgO1uk1syuOZ3io2Fk7e5M6VBx7kZ2cs0P8pUuXulMPjCP6sCPwvwPXPbT+vLBhrzWhzFOkNFLQlHKL4wkyE2NXYuEYyNj1Grvcu\/HGG+1g3hxGikO4\/fOf\/7Rd03GQbw4\/xQ6zOEZhz5497biN4cWHDLRcloOHc8SNJUuW7O0mkdnS4MGDsWXLFvucI0yMGjXKdl3Wr18\/TJgwwXYDx6HRQt3\/cT6x+7PLL7\/cLjto0CB8++23djpt2LDBjgTTpUsXu77sjvGvdHfGot3LLrvMbtt7773nTs3HMV5Hjhxp14ND2nFdGSy5vi+\/\/DLat29vu6PjtnJg8PDRV04\/\/XQ78DOxyz8+5\/uwu7YDDRDO74oDsoeP6CNSmihoSrnF4lIOeXT00Ue7U\/L7AA71HMlMcurUqXYgZ2K29cwzz9gAeu+999r+Sq+\/\/nobKG6\/\/Xb861\/\/smOivvnmm3Z59nE7ceJEjBkzxn7GSy+9ZKcTizo5HBw\/g8GV\/XlyfdjVMwMs1+Goo46ywZl9oL744ov2\/Vmce8kll9ghqxgU+\/TpY8cdDQ04ziDGbWIgZ5Bipsg+Rw8FAzn7+B06dKjtv\/ezzz7bu284dBRH+mdQvuuuu2w2znVjcGfwY1\/Azz33HIYNG2YzVW5reLa+ePFi+1riezFYPvLII3abL7300kLv9bZr185ua\/hQcCKlivmRiJRL06dPtyNimMDlTnGc0aNHOwkJCXaINo7mwJEfQkOuXXPNNU6HDh3s38TRVTgaBkeI4Cg0HEWCQ1Jx9IycnBynY8eOdpiyEI48YgKK\/dsEETsyC4d2mzlzplOvXj0nJSXFzgt37bXX2mGqQt555x27XiZDdUzQsaNWmIBsRzQxQdcOF8cRLEJMtmdH7TgUHBJqwIAB7jPHMdmrY7JD+7fJOu227294KBPEnVtuucV9lj\/sXatWrey2hnDbC46+wn22detWxwRGZ8qUKXbaddddZx8hJpO2n\/vLL7+4U0RKF2WaUu6Z49z9Kz+7ZFHko48+amturlmzZu+A11yOo2OEcKBvZmMsKu3evbstEuV9SmamzPaYLfEeXAgHGC+Y9TGzZbEtR2vZ36g0zM7CMzQWdTIj5TrxM5nVMZPjyB6cx8GEWbQcwsG892f16tV46qmn8MQTT9jiVBZVF8Tt53s\/\/fTTNsPmoMXMnInrwKxvf6PFcH3D34\/7jdtZUGjaW2+9ZSsbMctkMS+LfUNZaEGFvZdIaaGgKeVWjRo1bDFn+Ij1DJqsFMTiVJ7EC1aiYdFsCCv1JCYm2uGUOBo+733y\/2effda+Lx8ckiyExZD7C04czis0Gn5BBYMEg2Lr1q1tjVI+eP+Pn8niUa4P359DZIWkpqbuc1EQwnVhrVq+lrV4Cy7D+Sx25j5iDVZ+Dodi4\/1TrmfNmjXt\/djwgB4u\/D4q95HJIt1nsMW4XE\/uS77eZJL23jGHfeNnscIPv4f94dBe3B+s4SxSGiloSrnVsmVLe\/IPb6PJ4FFYIOC88ODC4MVs67HHHtt7MmdFHGZxVatWtVkm5zFrYmBiUwwGUgq9Fz+LtXUZXHnPk9kcs1S+B3GsUAanULBlRRgGQr4XP4+vZ9a3fft2e++Tz1nrl4GJFWwYFEOVj8J16NDB3idlcxtWMCq4DDNKjrHIikCvvPKKfXBZBjOOWcmxKblNb7\/9tt12XngwQyQGNFZWCjVRYeBlxsqLCm4HtzMlJcUGTb4f17levXo26LOJDe9Zhi4UCu5zjpPJoFq3bl13ikjpoqAp5RazIdZUZfFkCIMNH\/vDE374PBa1svMA1qI9\/vjjMWDAAFtphgP10p133mmDIYtQr776ajs4eCgDY7Bg9sUHAyyzUxaDMhixJikDGnGwcQYjFv3edNNNtvLRuHHjbPExa+yy9iyLh1kxhkGHlYPYlpHNaFiDlcGlsO05EBbNcpvCsSiWRdcMyiz2ZcUdVgJiZSTWBGYgJ1YQYmbK4mMuw8DPgcGvvPJK9O3b1xZHsykMM1YGa64\/H\/w8VjbifgpduHCfhy4YiO1c+R5\/pRmNyOGkQailXGO2xA4M2C6TmRWDDwMa\/y6I83gyD3WEEMJMkvc+GZx4wuf80L1LZoDMuhgY+WAWycDHgMFgyHuZoSJfZmvMshgQGJQYbIi9B\/H+KZ8zuyVmapzGjIxNZELtTImfx2Ad+hy+PzPqouJPftmyZfZ9Oap\/ON6n5TYwSydm1lwXZtC8l8riY+L+4Pbwc7kefE\/WmOU+4n1hbifncXnub7YB5bryffn+3FZ+NreRuH3MvhmQmf3yPUVKIwVNKffYNIL3MMObnkjpw24IWdlp+PDh7hSR0kdBU0REpIh0T1NERKSIFDRFRESKSEFTRESkiBQ0RUREikhBU0REpIgUNEVERIpIQVNERKRIgP8HpjpTlKYRTm8AAAAASUVORK5CYII=\" width=\"448\">","fd8bcdf4":"## 3.Machine Learning","4ad6430f":"## Abstract:\nThe purpose of this research is to try a machine learning approach for predicting bike sharing demand in London by given the hour, day, and information about the weather. The research contains: Data exploration, feature engineering, choosing appropriate scoring metric, cross algorithms, cross validation, tuning the algorithms,analysis of feature importance, analysis of residuals and performance evaluation. The used dataset is from years 2015 and 2016. With XGBoost the lowest RMSLE achieved on test set is 0.2611. With Random Forest lowest RMSLE is 0.2807.\n\n\n\n","94003659":"There are different methods to perform a normal distribution test [19]. Some of them are Shapiro-Wilk Test, D\u2019Agostino\u2019s K^2 Test, Anderson-Darling Test. The Shapiro-Wilk Test requires the maximum size of the distribution to be less than 5000. The testing set is slightly bigger that this value, so for the research is performed D\u2019Agostino\u2019s K^2 Test.  \nFor further analysis 3 plots are created - scatter plot, histogram and Q-Q plot of the residuals.","d60a81ab":"## 3.5.Scoring on the testing set.","fe63babc":"If we accept a target(base) error for our predictions of 25% and convert this to RMSLE score = 0.2231.","0db47486":"The results of cross validation shows that XGBoost have the smallest RMSLE error min rmlse=0.22 and max rmsle=0.34. The next steps are feature importance analysis, to test the algorithms on the testing set and residuals analysis of XGBoost and Random Forrest. A code block from [21] is used for the feature importance graphics.","ac2e1590":"<table class=\"tg\">\n  <tr>\n    <th class=\"tg-0lax\"><\/th>\n    <th class=\"tg-0lax\">algorithm<\/th>\n    <th class=\"tg-0pky\">RMSLE score<\/th>\n    <th class=\"tg-dvpl\">difference in RMSLE(test-train score)<br><\/th>\n  <\/tr>\n  <tr>\n    <td class=\"tg-0lax\">train<\/td>\n    <td class=\"tg-0lax\">XGboost<\/td>\n    <td class=\"tg-0pky\">0.1877<\/td>\n    <td class=\"tg-0pky\" rowspan=\"2\">0.0734<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-0lax\">test<\/td>\n    <td class=\"tg-0lax\">XGboost<\/td>\n    <td class=\"tg-0pky\">0.2611<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-0lax\">train<\/td>\n    <td class=\"tg-0lax\">Random Forest<\/td>\n    <td class=\"tg-0pky\">0.2221<\/td>\n    <td class=\"tg-0pky\" rowspan=\"2\">0.0586<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-0lax\">test<\/td>\n    <td class=\"tg-0lax\">Random Forest<\/td>\n    <td class=\"tg-0pky\">0.2807<\/td>\n  <\/tr>\n<\/table>","d7795700":"## The  Datasets description\nThe following code shows the loading of the bike sharing dataset. The data is gathered from 3 sources:  \n * https:\/\/cycling.data.tfl.gov.uk\/ *'Contains OS data \u00a9 Crown copyright and database rights 2016' and Geomni UK Map data \u00a9 and database rights [2019] 'Powered by TfL Open Data'* - Bike sharing usage dataset\n * https:\/\/freemeteo.com - weather data\n * https:\/\/www.gov.uk\/bank-holidays - official bank holidays in London.\n \n \nAfter the data is grouped by hour and merged is published on \"Kaggle\" - \nhttps:\/\/www.kaggle.com\/hmavrodiev\/london-bike-sharing-dataset [1]  \n*Note*: The official data for bike sharing contains \"Start date\" and \"End Date\" columns, for the calculations the trips are grouped by \"Start date\" column for every hour.So if the sharing is the long duration and passes 1 hour it's not  counted again.\n","0d08ebf0":"## **Conclusion**:  \nThe tuned algorithms (XGBoost and Random Forest) suffer from high variance. The next possible steps are to try to reduce this affect: adding more data and increase the effect of the regularization. The bike shares during the winter are less than the rest of the year. The algorithm is trained on year and a half training data and validated on half year test set. Maybe adding more data during the winter will help of the performance during this period or use oversampling. The models that could be tied also for this dataset are ARIMA, SARIMA, Prophet.","07950330":"There are some outliers that are visible in the scatter plot and histogram, but most of the quantity of residuals are near 0. The shape of residuals on the scatter plot is affected by the RMSLE metric. Underestimates have greater penalty than overestimates and the scoring is performed on percentage error - huge difference on high value predictions are not so much penalized. This metric reduces the effect of errors generated by outliers in dataset.\nThe residuals of both models 'XGBoost' and 'Random Forest' are not normally distributed(Gaussian). The **H<sub>0<\/sub>** - *'The distribution is Gaussian'* is rejected with the D\u2019Agostino\u2019s K^2 Test with P value = 0.0000. On both models residual's mean is positive and close to 0. \n\n>\"*A distribution with kurtosis >3 (excess kurtosis >0) is called **leptokurtic**. Compared to a normal distribution, its tails are longer and fatter, and often its central peak is higher and sharper.*\" - [17]\n\n>\"*In general, leptokurtic distributions have heavier tails or a higher probability of extreme outlier values when compared to mesokurtic or platykurtic distributions.*\" - [18]  \n\n> \"*Quantile plots : This type of is to assess whether the distribution of the residual is normal or not. The graph is between the actual distribution of residual quantiles and a perfectly normal distribution residuals. If the graph is perfectly overlaying on the diagonal, the residual is normally distributed. *\"-[28]  \n\nIn the Q-Q plot the actual distribution of residuals are not well fitted to the theoretical quantiles(the red line), also the residuals are in between [-11\u03c3 ;11\u03c3] which is very big interval for a normal distribution.   \nThe Random forest residuals have positive skew and positive mean. Also with increasing of the predicting variable the residuals also increase, but only in positive direction. The variance of the residuals is increasing and there is a positive systematic error with increasing of the predicted variable.  \nThe residuals of XGBoost looks better in this terms, still there are outliers, but the mean of the residuals is closer to zero, Q-Q plot is better fitted than Random Forest.","2bffa1ae":"There are some positive outliers - values greater than 5000. The values in december\/january could be interpreted as outliers too, because of their difference compared with the other data.","9e181c0f":"## Introduction:\nThe bike sharing is one of the methods of reducing city traffic. It is also lowering the air pollution by reducing the number of cars on the roads. The hypothesis in the research is that the bike sharing are highly related with the time of the day, season and weather conditions. The research will try to predict the bike shares in the future. The predictions of future use could help for a better management of the service. Another point of view is to test the machine learning algorithms how good are at solving this problem.","45d2b625":"## 3.7.Performance evaluation","8a555d97":"The BaggringRegressor is excluded from the saved models, because of very long size on disk after tuning. With '*n_estimators*' = 1000 the size on disk is **930 MB**. With the default '*n_estimators*' = 10, the size on disk is approximately 9MB, but the RMSLE will be higher that the tuned algorithms. This algorithm achieved on **testing set** RMSLE = 0.26813.","4e584093":"## 2.Feature engineering","3b383782":"The conclusion from the graphics above is that when the data is separated by day\/night the distributions of transformed data looks more Gaussian. The next step is to implement machine learning algorithms. ","3971de9c":"## 3.3.Cross validation\nThe results from the graphic above shows that *Random Forrest, XGBoost* and *Bagging Regressor* are the top 3 algorithms that are performing well with the default settings. During this research they are tuned and evaluated with the testing set. The code requires 10-20 minutes to perform a GridSearchCV on these 3 algorithms. To save time of future use of the algorithms, the best estimators are exported with \"pickle\" to a single file. The files are uploaded on \"Dropbox\" and the links are saved below.\nFor the splitting of the data is used TimeSeriesSplit, another solution is to try kfolds split."}}