{"cell_type":{"8d8a9873":"code","987722e6":"code","65236c83":"code","822cf20c":"code","9a964498":"code","5fcacd5b":"code","b06d8adb":"code","3302be8e":"code","6ffc3022":"code","0869be6a":"code","53862db4":"code","46fa6577":"code","e6d56573":"code","41eeec81":"code","c3a791d0":"code","59cb2d29":"code","1cec5ea0":"code","a41987eb":"code","16d2aa5b":"code","8bbc7ec0":"code","f22898d6":"code","c837d3cd":"code","423ccfa8":"code","620c3d88":"code","1b171b75":"code","8176ca86":"code","495c64fb":"code","2db0d007":"code","37b9d6ac":"code","8050f703":"code","11305c3e":"code","f4e68a78":"markdown","df82b074":"markdown","e443c667":"markdown","b75b8189":"markdown","eee2c738":"markdown","45dc0edd":"markdown","4a822d9a":"markdown","d6991659":"markdown","e5076d4e":"markdown","d38c3198":"markdown"},"source":{"8d8a9873":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","987722e6":"# importing libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix","65236c83":"# reading dataset\nds = pd.read_csv('\/kaggle\/input\/housing-in-london\/housing_in_london_monthly_variables.csv')\nds.head()","822cf20c":"ds.info()","9a964498":"# checking null values\nds.isnull().sum()","5fcacd5b":"# filling null values with their corresponding mean of columns\nmean_of_hs = ds['houses_sold'].mean()        \nmean_of_noc = ds['no_of_crimes'].mean()\n\nds = ds.fillna({'houses_sold' : mean_of_hs})\nds = ds.fillna({'no_of_crimes' : mean_of_noc})","b06d8adb":"ds.isnull().sum()","3302be8e":"from sklearn.preprocessing import LabelEncoder\n\narea = LabelEncoder()\ncode = LabelEncoder()\n\nds['area_n'] = area.fit_transform(ds['area'])\nds['code_n'] = code.fit_transform(ds['code'])","6ffc3022":"ds.drop(['area','code','date'], axis = 1, inplace=True)\nds","0869be6a":"ds['borough_flag'].value_counts()","53862db4":"borough_flag_1 = ds[ds['borough_flag']==1]\nborough_flag_0 = ds[ds['borough_flag']==0]\n\nborough_flag_1.shape , borough_flag_0.shape","46fa6577":"borough_flag_1 = borough_flag_1.sample(n=borough_flag_0.shape[0])\nborough_flag_1.shape","e6d56573":"df = borough_flag_0.append(borough_flag_1, ignore_index=True)\ndf.shape","41eeec81":"df['borough_flag'].value_counts()","c3a791d0":"x = df.drop('borough_flag', axis=1)\ny = df['borough_flag']","59cb2d29":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.25)\nx_train.shape , x_test.shape","1cec5ea0":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)\n\ny_train = y_train.to_numpy()\ny_test = y_test.to_numpy()","a41987eb":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","16d2aa5b":"dt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\ndt.score(x_test,y_test)","8bbc7ec0":"rf = RandomForestClassifier()\nrf.fit(x_train,y_train)\nrf.score(x_test,y_test)","f22898d6":"xgb = XGBClassifier()\nxgb.fit(x_train,y_train)\nxgb.score(x_test,y_test)","c837d3cd":"y_pred = rf.predict(x_test)\n\ncm = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix\\n',cm)","423ccfa8":"plt.figure(figsize=(7,5))\nsns.heatmap(cm,annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('truth')","620c3d88":"x = df.drop('houses_sold',axis=1)\ny = df['houses_sold']\n\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.25)\nx_train.shape , x_test.shape","1b171b75":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)\n\ny_train = y_train.to_numpy()\ny_test = y_test.to_numpy()","8176ca86":"\nfrom xgboost import XGBRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor","495c64fb":"xgbr = XGBRegressor()\nxgbr.fit(x_train,y_train)\nxgbr.score(x_test,y_test)","2db0d007":"dtr = DecisionTreeRegressor()\ndtr.fit(x_train,y_train)\ndtr.score(x_test,y_test)","37b9d6ac":"knnr = KNeighborsRegressor()\nknnr.fit(x_train,y_train)\nknnr.score(x_test,y_test)","8050f703":"rfr = RandomForestRegressor()\nrfr.fit(x_train,y_train)\nrfr.score(x_test,y_test)","11305c3e":"y_pred2 = knnr.predict(x_test)\ny_pred2","f4e68a78":"# **ML Models for borough_flag**","df82b074":"spliting data into train and test","e443c667":"## Spliting data into train and test  ","b75b8189":"standardizing data","eee2c738":"# Balancing DataSet","45dc0edd":"# Encoding string to integar","4a822d9a":"## Confusion Matrix","d6991659":"# **ML Models for houses_sold**","e5076d4e":"# standardizing data","d38c3198":"**Preprocessing the data for removing 'nan' values**"}}