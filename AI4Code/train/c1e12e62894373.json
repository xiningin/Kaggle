{"cell_type":{"2823ba7e":"code","0f400c59":"code","deb5debf":"code","55f0a42f":"code","7a64a1a4":"code","9cf8a342":"code","37ed607b":"code","69439a2e":"code","bba408b5":"code","de33e30b":"code","b0800fb6":"code","dd9d1fa6":"code","e6fe3484":"code","be583631":"code","49503729":"code","9c23e523":"code","2031f3d8":"code","a9fec297":"code","f5cec9f3":"code","abb57f00":"code","1b5611b5":"code","cac96f1a":"code","05eb1b68":"code","61989b17":"markdown","fbe6f538":"markdown","05068c95":"markdown","97b0810b":"markdown","9a0d306e":"markdown","84009d85":"markdown","f4cbf75c":"markdown","e64d7415":"markdown","27b4097a":"markdown","039fc391":"markdown","2a41b3e1":"markdown","49b42643":"markdown","a68e5316":"markdown","4193942b":"markdown","cec84f45":"markdown","63f8f98d":"markdown","22ed18cd":"markdown","cd2cc275":"markdown","b47cdcd4":"markdown","6c359af9":"markdown","6bba2822":"markdown","d5e80504":"markdown","aeb1eac0":"markdown"},"source":{"2823ba7e":"# Adding needed libraries and reading data\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import ensemble, tree, linear_model\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.utils import shuffle\n\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","0f400c59":"train.head()","deb5debf":"#Checking for missing data\nNAs = pd.concat([train.isnull().sum(), test.isnull().sum()], axis=1, keys=['Train', 'Test'])\nNAs[NAs.sum(axis=1) > 0]","55f0a42f":"# Prints R2 and RMSE scores\ndef get_score(prediction, lables):    \n    print('R2: {}'.format(r2_score(prediction, lables)))\n    print('RMSE: {}'.format(np.sqrt(mean_squared_error(prediction, lables))))\n\n# Shows scores for train and validation sets    \ndef train_test(estimator, x_trn, x_tst, y_trn, y_tst):\n    prediction_train = estimator.predict(x_trn)\n    # Printing estimator\n    print(estimator)\n    # Printing train scores\n    get_score(prediction_train, y_trn)\n    prediction_test = estimator.predict(x_tst)\n    # Printing test scores\n    print(\"Test\")\n    get_score(prediction_test, y_tst)","7a64a1a4":"# Spliting to features and lables and deleting variable I don't need\ntrain_labels = train.pop('SalePrice')\n\nfeatures = pd.concat([train, test], keys=['train', 'test'])\n\n# I decided to get rid of features that have more than half of missing information or do not correlate to SalePrice\nfeatures.drop(['Utilities', 'RoofMatl', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'Heating', 'LowQualFinSF',\n               'BsmtFullBath', 'BsmtHalfBath', 'Functional', 'GarageYrBlt', 'GarageArea', 'GarageCond', 'WoodDeckSF',\n               'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC', 'Fence', 'MiscFeature', 'MiscVal'],\n              axis=1, inplace=True)","9cf8a342":"# MSSubClass as str\nfeatures['MSSubClass'] = features['MSSubClass'].astype(str)\n\n# MSZoning NA in pred. filling with most popular values\nfeatures['MSZoning'] = features['MSZoning'].fillna(features['MSZoning'].mode()[0])\n\n# LotFrontage  NA in all. I suppose NA means 0\nfeatures['LotFrontage'] = features['LotFrontage'].fillna(features['LotFrontage'].mean())\n\n# Alley  NA in all. NA means no access\nfeatures['Alley'] = features['Alley'].fillna('NOACCESS')\n\n# Converting OverallCond to str\nfeatures.OverallCond = features.OverallCond.astype(str)\n\n# MasVnrType NA in all. filling with most popular values\nfeatures['MasVnrType'] = features['MasVnrType'].fillna(features['MasVnrType'].mode()[0])\n\n# BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2\n# NA in all. NA means No basement\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    features[col] = features[col].fillna('NoBSMT')\n\n# TotalBsmtSF  NA in pred. I suppose NA means 0\nfeatures['TotalBsmtSF'] = features['TotalBsmtSF'].fillna(0)\n\n# Electrical NA in pred. filling with most popular values\nfeatures['Electrical'] = features['Electrical'].fillna(features['Electrical'].mode()[0])\n\n# KitchenAbvGr to categorical\nfeatures['KitchenAbvGr'] = features['KitchenAbvGr'].astype(str)\n\n# KitchenQual NA in pred. filling with most popular values\nfeatures['KitchenQual'] = features['KitchenQual'].fillna(features['KitchenQual'].mode()[0])\n\n# FireplaceQu  NA in all. NA means No Fireplace\nfeatures['FireplaceQu'] = features['FireplaceQu'].fillna('NoFP')\n\n# GarageType, GarageFinish, GarageQual  NA in all. NA means No Garage\nfor col in ('GarageType', 'GarageFinish', 'GarageQual'):\n    features[col] = features[col].fillna('NoGRG')\n\n# GarageCars  NA in pred. I suppose NA means 0\nfeatures['GarageCars'] = features['GarageCars'].fillna(0.0)\n\n# SaleType NA in pred. filling with most popular values\nfeatures['SaleType'] = features['SaleType'].fillna(features['SaleType'].mode()[0])\n\n# Year and Month to categorical\nfeatures['YrSold'] = features['YrSold'].astype(str)\nfeatures['MoSold'] = features['MoSold'].astype(str)\n\n# Adding total sqfootage feature and removing Basement, 1st and 2nd floor features\nfeatures['TotalSF'] = features['TotalBsmtSF'] + features['1stFlrSF'] + features['2ndFlrSF']\nfeatures.drop(['TotalBsmtSF', '1stFlrSF', '2ndFlrSF'], axis=1, inplace=True)","37ed607b":"# Our SalesPrice is skewed right (check plot below). I'm logtransforming it. \nax = sns.distplot(train_labels)","69439a2e":"## Log transformation of labels\ntrain_labels = np.log(train_labels)","bba408b5":"## Now it looks much better\nax = sns.distplot(train_labels)","de33e30b":"## Standardizing numeric features\nnumeric_features = features.loc[:,['LotFrontage', 'LotArea', 'GrLivArea', 'TotalSF']]\nnumeric_features_standardized = (numeric_features - numeric_features.mean())\/numeric_features.std()","b0800fb6":"ax = sns.pairplot(numeric_features_standardized)","dd9d1fa6":"# Getting Dummies from Condition1 and Condition2\nconditions = set([x for x in features['Condition1']] + [x for x in features['Condition2']])\ndummies = pd.DataFrame(data=np.zeros((len(features.index), len(conditions))),\n                       index=features.index, columns=conditions)\nfor i, cond in enumerate(zip(features['Condition1'], features['Condition2'])):\n    dummies.ix[i, cond] = 1\nfeatures = pd.concat([features, dummies.add_prefix('Condition_')], axis=1)\nfeatures.drop(['Condition1', 'Condition2'], axis=1, inplace=True)\n\n# Getting Dummies from Exterior1st and Exterior2nd\nexteriors = set([x for x in features['Exterior1st']] + [x for x in features['Exterior2nd']])\ndummies = pd.DataFrame(data=np.zeros((len(features.index), len(exteriors))),\n                       index=features.index, columns=exteriors)\nfor i, ext in enumerate(zip(features['Exterior1st'], features['Exterior2nd'])):\n    dummies.ix[i, ext] = 1\nfeatures = pd.concat([features, dummies.add_prefix('Exterior_')], axis=1)\nfeatures.drop(['Exterior1st', 'Exterior2nd', 'Exterior_nan'], axis=1, inplace=True)\n\n# Getting Dummies from all other categorical vars\nfor col in features.dtypes[features.dtypes == 'object'].index:\n    for_dummy = features.pop(col)\n    features = pd.concat([features, pd.get_dummies(for_dummy, prefix=col)], axis=1)","e6fe3484":"### Copying features\nfeatures_standardized = features.copy()\n\n### Replacing numeric features by standardized values\nfeatures_standardized.update(numeric_features_standardized)","be583631":"### Splitting features\ntrain_features = features.loc['train'].drop('Id', axis=1).select_dtypes(include=[np.number]).values\ntest_features = features.loc['test'].drop('Id', axis=1).select_dtypes(include=[np.number]).values\n\n### Splitting standardized features\ntrain_features_st = features_standardized.loc['train'].drop('Id', axis=1).select_dtypes(include=[np.number]).values\ntest_features_st = features_standardized.loc['test'].drop('Id', axis=1).select_dtypes(include=[np.number]).values","49503729":"### Shuffling train sets\ntrain_features_st, train_features, train_labels = shuffle(train_features_st, train_features, train_labels, random_state = 5)","9c23e523":"### Splitting\nx_train, x_test, y_train, y_test = train_test_split(train_features, train_labels, test_size=0.1, random_state=200)\nx_train_st, x_test_st, y_train_st, y_test_st = train_test_split(train_features_st, train_labels, test_size=0.1, random_state=200)","2031f3d8":"ENSTest = linear_model.ElasticNetCV(alphas=[0.0001, 0.0005, 0.001, 0.01, 0.1, 1, 10], l1_ratio=[.01, .1, .5, .9, .99], max_iter=5000).fit(x_train_st, y_train_st)\ntrain_test(ENSTest, x_train_st, x_test_st, y_train_st, y_test_st)","a9fec297":"# Average R2 score and standart deviation of 5-fold cross-validation\nscores = cross_val_score(ENSTest, train_features_st, train_labels, cv=5)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean(), scores.std() * 2))","f5cec9f3":"GBest = ensemble.GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=3, max_features='sqrt',\n                                               min_samples_leaf=15, min_samples_split=10, loss='huber').fit(x_train, y_train)\ntrain_test(GBest, x_train, x_test, y_train, y_test)","abb57f00":"# Average R2 score and standart deviation of 5-fold cross-validation\nscores = cross_val_score(GBest, train_features_st, train_labels, cv=5)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean(), scores.std() * 2))","1b5611b5":"# Retraining models\nGB_model = GBest.fit(train_features, train_labels)\nENST_model = ENSTest.fit(train_features_st, train_labels)","cac96f1a":"## Getting our SalePrice estimation\nFinal_labels = (np.exp(GB_model.predict(test_features)) + np.exp(ENST_model.predict(test_features_st))) \/ 2","05eb1b68":"## Saving to CSV\npd.DataFrame({'Id': test.Id, 'SalePrice': Final_labels}).to_csv('2017-02-28.csv', index =False)    ","61989b17":"### Filling NAs and converting features","fbe6f538":"We use a lot of features and have many outliers. So I'm using max_features='sqrt' to reduce overfitting of my model. I also use loss='huber' because it more tolerant to outliers. All other hyper-parameters was chosen using GridSearchCV.","05068c95":"### Log transformation","97b0810b":"## Ensembling final model","9a0d306e":"### Gradient Boosting","84009d85":"I'm using ElasticNetCV estimator to choose best alpha and l1_ratio for my Elastic Net model.","f4cbf75c":"### Checking for NAs","e64d7415":"My final ensemble model is an average of Gradient Boosting and Elastic Net predictions. But before that I retrained my models on all train data.","27b4097a":"## by Sergei Neviadomski","039fc391":"### Splitting to train and validation sets","2a41b3e1":"That's my simple ensemble model that helped me to get to top 40%. I'll try to briefly show you all steps that I made during my analysis and model building.","49b42643":"### Standardizing numeric data","a68e5316":"### Importing my functions","4193942b":"## First level models","cec84f45":"### Elastic Net","63f8f98d":"### Obtaining standardized dataset","22ed18cd":"### Importing libraries and data","cd2cc275":"### Splitting train and test features","b47cdcd4":"### Converting categorical data to dummies","6c359af9":"### I'll be glad to hear suggestions on improving my models.\n","6bba2822":"My analysis revealed that Gradient Boosting and Elastic Net (using Standardized Features) show best results.","d5e80504":"# How to get to TOP 25% with Simple Model using sklearn only","aeb1eac0":"### Splitting to features and labels and deleting variables I don't need"}}