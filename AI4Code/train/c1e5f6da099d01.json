{"cell_type":{"ee122b67":"code","f38529cf":"code","503907b2":"code","1e5c6d7f":"code","59a62bf6":"code","57b95ea4":"code","9f662f79":"code","f573c701":"code","f186c140":"code","7237d9b1":"code","8fe76506":"code","3934d219":"code","f7425cc9":"code","3c699ff3":"code","649703cf":"code","e7805b66":"code","41cbcb24":"code","d0af6f52":"code","a80ada67":"code","13dc9caa":"code","7fe4bc26":"code","67bdc4fe":"code","ddd89fb7":"code","0e301ee7":"code","7e7df142":"code","995c2aab":"code","a39d977a":"code","71b1a8a0":"code","b82144ea":"code","1fb46442":"code","60786ff4":"code","8520a7ed":"code","ce8cfbc0":"code","d7d6807b":"code","869f8ce3":"code","ca1c27dc":"code","2d8bcf62":"code","e0d9d8a0":"code","3b4a50d2":"code","984ed8ec":"code","80ca67bb":"code","206719fa":"code","219e249a":"code","22349e16":"code","af3f7cdc":"code","72dae818":"code","f8caf881":"code","b6062cf5":"code","911e38bb":"code","6e1c624f":"code","221a842b":"code","0088d046":"code","f42d60f3":"code","7cbc952f":"code","8943079d":"code","7ffdea66":"code","22b94bb6":"code","0ee3a0a6":"code","30d86605":"code","3cc0051c":"code","b6cccd0e":"code","3c40802b":"code","5c86e08b":"code","4fc1e095":"code","1c93ffc4":"code","6c036b2f":"code","2a14e2c9":"code","29d5ec4e":"code","b133b403":"code","20e7d58c":"code","a71c1d16":"code","002c6d4e":"code","e7975eaa":"code","9fe14a6b":"code","2ef21ecb":"code","a0ba64dd":"code","7cc3b8df":"code","d3813ad8":"code","27dee2ef":"code","f11792ba":"code","b3bc21f7":"code","b17c45fe":"code","5e09e8e8":"code","004e874b":"code","9b4962bc":"code","7e5ff06d":"code","54814408":"code","0624534c":"code","54d0e467":"code","f4d1eb37":"code","9f35b761":"code","90aabdcf":"code","66e2751c":"code","ed7fb9a5":"code","37a1e152":"code","5632bc78":"code","ec44b3a8":"code","1a3e6b98":"code","256a578f":"code","f34c6d52":"code","4740ed14":"code","9dd97184":"code","89b1aa3b":"code","b474098a":"code","527d9907":"code","da187a13":"code","195ef5e0":"code","ebcbd67b":"code","acdd4126":"code","68020101":"code","8771867b":"code","b908e52b":"markdown","a0235b79":"markdown","25329c58":"markdown","ebe142d3":"markdown","e134922d":"markdown","3edd11df":"markdown","59a47542":"markdown","8a8b9626":"markdown","0703a7c4":"markdown","478be894":"markdown","73a8e368":"markdown","8436d71c":"markdown","39d0300c":"markdown","30cbd82d":"markdown","cb476920":"markdown","f20e7135":"markdown","7100ef04":"markdown","99968aa7":"markdown","c92d31d2":"markdown","5bafead0":"markdown","3edcf97f":"markdown","7e6131a3":"markdown"},"source":{"ee122b67":"#Math imports\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\n\n#Visualization Imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('ggplot')\nimport plotly.plotly as py\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True) \n\n#Modeling Imports\nfrom sklearn import metrics\nfrom sklearn.feature_extraction import FeatureHasher\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler, MinMaxScaler\n\n#Text Processing Imports\nimport string\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\nfrom sklearn.decomposition import TruncatedSVD, PCA\n","f38529cf":"wine = pd.read_csv('..\/input\/winemag-data-130k-v2.csv')","503907b2":"wine.info()","1e5c6d7f":"wine.loc[wine['country']== 'US', 'country'] = 'United States of America'\ntest = wine.loc[wine['price'].isnull()]\ntrain = wine.loc[wine['price'].isnull()==False]","59a62bf6":"by_country = wine.groupby('country')","57b95ea4":"by_country = pd.concat([by_country.count()['description'],\n                        by_country.max()[['points','price']]],\n                        axis=1)\n\n","9f662f79":"by_country.columns = ['count', 'Highest Rating','Highest Price']","f573c701":"data = dict(\n        type = 'choropleth',\n        locations = by_country.index,\n        z = by_country['count'],\n        colorscale = 'Viridis',\n        locationmode = 'country names',\n        text = by_country['count'],\n        colorbar = {'title' : '# Wines by Country'},\n      ) \n\nlayout = dict(\n    title = '# Wines by Country',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'mercator'}\n    )\n)\n\nchoromap = go.Figure(data = [data],layout = layout)\n\niplot(choromap)","f186c140":"plt.figure(figsize=(16,6))\nwine['country'].value_counts().head(10).plot.bar()\nplt.title('Top 10 Producers by Country')\nplt.xlabel('Country')\nplt.ylabel('Count')","7237d9b1":"data = dict(\n        type = 'choropleth',\n        locations = by_country.index,\n        colorscale = 'Viridis',\n        z = by_country['Highest Rating'],\n        locationmode = 'country names',\n        text = by_country['count'],\n        colorbar = {'title' : 'Highest Rating'},\n      ) \n\nlayout = dict(\n    title = 'Highest rating',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'mercator'}\n    )\n)\n\nchoromap = go.Figure(data = [data],layout = layout)\n\niplot(choromap)","8fe76506":"#wine.sort_values(by='points', ascending=False)['points'].head(10)\n\nplt.figure(figsize=(16,6))\nwine[wine['points']==100]['country'].value_counts().head(10).plot.bar()\nplt.title(\"Number of 'Perfect' Wines by Country\")\nplt.xlabel('Country')\nplt.ylabel('Count')","3934d219":"data = dict(\n        type = 'choropleth',\n        locations = by_country.index,\n        colorscale = 'Viridis',\n        z = by_country['Highest Price'],\n        locationmode = 'country names',\n        text = by_country['count'],\n        colorbar = {'title' : 'Highest Price'},\n      ) \n\nlayout = dict(\n    title = 'Highest Price',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'mercator'}\n    )\n)\n\nchoromap = go.Figure(data = [data],layout = layout)\n\niplot(choromap)","f7425cc9":"plt.figure(figsize=(16,6))\nwine[wine['price']>=1000]['country'].value_counts().head(10).plot.bar()\nplt.title(\"Number of Wines over $1000 by Country\")\nplt.xlabel('Country')\nplt.ylabel('Count')","3c699ff3":"sns.jointplot(wine[wine['price']<=1000]['points'], \n              wine[wine['price']<=1000]['price'], \n              kind=\"scatter\", \n              color=\"#4CB391\",\n              size=10,\n              s=10)","649703cf":"wine.head(2)","e7805b66":"wine.drop('Unnamed: 0',inplace = True,axis = 1)","41cbcb24":"wine['country'].nunique()","d0af6f52":"sum(wine['country'].isnull())","a80ada67":"wine['country'].fillna('unknown',inplace=True)","13dc9caa":"bins = range(0,200,5)\n\nplt.figure(figsize = (16,6))\n\ncountries = wine['country'].value_counts().head(10).index\n\nfor i in countries:\n    plt.hist(train.loc[train['country']==i]['price'],\n             bins,alpha=0.5,label=i,edgecolor='white')\n\n\nplt.title('Price Distribution by Country')\nplt.xlabel('Price')\nplt.ylabel('Count')\nplt.legend()\nplt.show()","7fe4bc26":"one_hot = pd.get_dummies(wine['country'])","67bdc4fe":"pca = PCA(n_components=5)","ddd89fb7":"pca_encoded = pca.fit_transform(one_hot)","0e301ee7":"pca_df = pd.DataFrame(data=pca_encoded,columns=['country_1','country_2','country_3','country_4','country_5'])","7e7df142":"wine = pd.concat([wine,pca_df],axis=1)","995c2aab":"wine.drop('country',axis=1,inplace=True)","a39d977a":"wine_desc = wine['description']","71b1a8a0":"wine.drop('description',inplace = True, axis = 1)","b82144ea":"wine['designation'].nunique()","1fb46442":"sum(wine['designation'].isnull())","60786ff4":"bins = range(0,200,5)\n\nplt.figure(figsize = (16,6))\n\ndesignations = wine['designation'].value_counts().head(10).index\n\nfor i in designations:\n    plt.hist(train.loc[train['designation']==i]['price'],\n             bins,alpha=0.5,label=i,edgecolor='white')\n\n\nplt.title('Price Distribution by Designation')\nplt.xlabel('Price')\nplt.ylabel('Count')\nplt.legend()\nplt.show()","8520a7ed":"wine.drop('designation', inplace = True, axis = 1)","ce8cfbc0":"sum(wine['points'].isnull())","d7d6807b":"scaler = MinMaxScaler()\nwine['points'] = scaler.fit_transform(wine['points'].values.reshape(-1,1))","869f8ce3":"wine['province'].nunique()","ca1c27dc":"sum(wine['province'].isnull())","2d8bcf62":"wine['province'].fillna('unknown',inplace=True)","e0d9d8a0":"bins = range(0,200,5)\n\nplt.figure(figsize = (16,6))\n\nprovinces = wine['province'].value_counts().head(5).index\n\nfor i in provinces:\n    plt.hist(train.loc[train['province']==i]['price'],\n             bins,alpha=0.5,label=i,edgecolor='white')\n\n\nplt.title('Price Distribution by Province')\nplt.xlabel('Price')\nplt.ylabel('Count')\nplt.legend()\nplt.show()","3b4a50d2":"one_hot = pd.get_dummies(wine['province'])\npca = PCA(n_components=5)\npca_encoded = pca.fit_transform(one_hot)\npca_df = pd.DataFrame(data=pca_encoded,columns=['prov_1','prov_2','prov_3','prov_4','prov_5'])\nwine = pd.concat([wine,pca_df],axis=1)\nwine.drop('province',axis=1,inplace=True)","984ed8ec":"wine['region_1'].nunique()","80ca67bb":"sum(wine['region_1'].isnull())","206719fa":"wine['region_2'].nunique()","219e249a":"sum(wine['region_2'].isnull())","22349e16":"wine.drop(['region_1','region_2'],axis=1,inplace=True)","af3f7cdc":"wine['taster_name'].nunique()","72dae818":"sum(wine['taster_name'].isnull())","f8caf881":"wine['taster_name'].fillna('unknown',inplace=True)","b6062cf5":"tasters = wine['taster_name'].unique()\ndic = dict(zip(tasters, list(range(1,len(tasters)+1))))\nwine['taster_name'] = wine['taster_name'].apply(lambda x: str(dic[x]))","911e38bb":"plt.figure(figsize=(12,12))\nsns.boxplot(x='taster_name',y='price',data=wine,showfliers=False)\nplt.tight_layout","6e1c624f":"one_hot = pd.get_dummies(wine['taster_name'])\npca = PCA(n_components=5)\npca_encoded = pca.fit_transform(one_hot)\npca_df = pd.DataFrame(data=pca_encoded,columns=['taster_1','taster_2','taster_3','taster_4','taster_5'])\nwine = pd.concat([wine,pca_df],axis=1)\nwine.drop('taster_name',axis=1,inplace=True)","221a842b":"wine.drop(['taster_twitter_handle'],axis=1,inplace=True)","0088d046":"test = wine.loc[0,'title']","f42d60f3":"def impute_year(S):\n    year = [int(x) for x in S.split() if x.isdigit()]\n    possible_years = list(range(1950,2018,1))\n    if not year:\n        return 0\n    else:\n        for i in range(len(year)):\n            if year[i] in possible_years:\n                return year[i]","7cbc952f":"wine['year'] = wine['title'].apply(lambda x: impute_year(x))","8943079d":"wine['year'].fillna(0,inplace=True)","7ffdea66":"plt.figure(figsize=(12,6))\nplt.hist(wine['year'],\n         bins=range(1990,2020,1),\n         edgecolor='white')\nplt.show()","22b94bb6":"wine.loc[wine['year']==0,'year'] = wine.loc[wine['year']>0,'year'].mean()","0ee3a0a6":"plt.figure(figsize=(12,6))\nplt.hist(wine['year'],\n         bins=range(1990,2020,1),\n         edgecolor='white')\nplt.show()","30d86605":"wine.drop(['title'],axis=1,inplace=True)","3cc0051c":"wine['age'] = wine['year'].apply(lambda x: 2018 - x)","b6cccd0e":"wine.drop('year',axis=1,inplace=True)","3c40802b":"scaler = MinMaxScaler()\nwine['age'] = scaler.fit_transform(wine['age'].values.reshape(-1,1))","5c86e08b":"wine['variety'].nunique()","4fc1e095":"sum(wine['variety'].isnull())","1c93ffc4":"wine['variety'].fillna('unknown',inplace=True)","6c036b2f":"bins = range(0,200,5)\n\nplt.figure(figsize = (16,6))\n\nvarieties = wine['variety'].value_counts().head(5).index\n\nfor i in varieties:\n    plt.hist(train.loc[train['variety']==i]['price'],\n             bins,alpha=0.5,label=i,edgecolor='white')\n\n\nplt.title('Price Distribution by Variety')\nplt.xlabel('Price')\nplt.ylabel('Count')\nplt.legend()\nplt.show()","2a14e2c9":"one_hot = pd.get_dummies(wine['variety'])\npca = PCA(n_components=5)\npca_encoded = pca.fit_transform(one_hot)\npca_df = pd.DataFrame(data=pca_encoded,columns=['var_1','var_2','var_3','var_4','var_5'])\nwine = pd.concat([wine,pca_df],axis=1)\nwine.drop('variety',axis=1,inplace=True)","29d5ec4e":"wine['winery'].nunique()","b133b403":"sum(wine['winery'].isnull())","20e7d58c":"bins = range(0,200,5)\n\nplt.figure(figsize = (16,6))\n\nwineries = wine['winery'].value_counts().head(5).index\n\nfor i in wineries:\n    plt.hist(train.loc[train['winery']==i]['price'],\n             bins,alpha=0.5,label=i,edgecolor='white')\n\n\nplt.title('Price Distribution by Winery')\nplt.xlabel('Price')\nplt.ylabel('Count')\nplt.legend()\nplt.show()","a71c1d16":"len_features = 5\ncolumn_names=[]\n\nfor i in range(len_features):\n    column_names.append('w_'+str(i))\n\nfh = FeatureHasher(n_features=len_features, input_type='string')\nhashed_features = fh.fit_transform(wine['winery'])\nhashed_features = hashed_features.toarray()\nhashed_features = pd.DataFrame(hashed_features,columns=column_names)\nwine = pd.concat([wine,hashed_features],axis=1)\nwine.drop('winery',axis=1,inplace=True)","002c6d4e":"test = wine.loc[wine['price'].isnull()]\ntrain = wine.loc[wine['price'].isnull()==False]","e7975eaa":"outliers = train.loc[abs(zscore(train['price']))>2,:].index\ntrain.drop(outliers,inplace=True)","9fe14a6b":"X = train.drop('price',axis=1)\ny = train['price']","2ef21ecb":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)","a0ba64dd":"y_mean = y_train.mean()","7cc3b8df":"y_mean_list = [y_mean]*len(y_test)","d3813ad8":"np.sqrt(metrics.mean_squared_error(y_test, y_mean_list))","27dee2ef":"test = wine.loc[wine['price'].isnull()]\ntrain = wine.loc[wine['price'].isnull()==False]","f11792ba":"outliers = train.loc[abs(zscore(train['price']))>2,:].index\ntrain.drop(outliers,inplace=True)","b3bc21f7":"X = train.drop('price',axis=1)\ny = train['price']","b17c45fe":"#X = PolynomialFeatures(degree=2,include_bias=True).fit_transform(X).astype(float)","5e09e8e8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)","004e874b":"lm = LinearRegression()\nlm.fit(X_train,y_train)","9b4962bc":"predictions = lm.predict(X_test)","7e5ff06d":"plt.scatter(list(range(len(y_test))),y_test-predictions)","54814408":"sns.distplot((y_test-predictions),bins=50);","0624534c":"np.sqrt(metrics.mean_squared_error(y_test, predictions))","54d0e467":"wine_desc.head()","f4d1eb37":"wine_desc = pd.concat([wine_desc,wine['price']],axis=1)","9f35b761":"def text_process(mess):\n    nopunc = [char for char in mess if char not in string.punctuation]\n    nopunc = ''.join(nopunc)\n    return [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]","90aabdcf":"bow_transformer = CountVectorizer(analyzer=text_process).fit(wine_desc['description'])","66e2751c":"descriptions_bow = bow_transformer.transform(wine_desc['description'])","ed7fb9a5":"descriptions_bow.shape","37a1e152":"tfidf_transformer = TfidfTransformer().fit(descriptions_bow)","5632bc78":"descriptions_tfidf = tfidf_transformer.transform(descriptions_bow)","ec44b3a8":"print(descriptions_tfidf[0])","1a3e6b98":"train_indices = wine_desc.loc[wine_desc['price'].isnull()==False].index","256a578f":"descriptions_tfidf","f34c6d52":"y = wine_desc.loc[train_indices,'price']","4740ed14":"X = descriptions_tfidf[list(train_indices)]","9dd97184":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)","89b1aa3b":"lm = LinearRegression()\nlm.fit(X_train,y_train)","b474098a":"predictions = lm.predict(X_test)","527d9907":"np.sqrt(metrics.mean_squared_error(y_test, predictions))","da187a13":"svd = TruncatedSVD(n_components=100, n_iter=7, random_state=42)","195ef5e0":"X_svd = svd.fit_transform(X)","ebcbd67b":"X_svd.shape","acdd4126":"X_train, X_test, y_train, y_test = train_test_split(X_svd, y, test_size=0.2, random_state=100)","68020101":"lm = LinearRegression()\nlm.fit(X_train,y_train)\npredictions = lm.predict(X_test)","8771867b":"np.sqrt(metrics.mean_squared_error(y_test, predictions))","b908e52b":"### Taster Name","a0235b79":"### Description","25329c58":"### Baseline Performance","ebe142d3":"### Linear Regression","e134922d":"# Modeling","3edd11df":"### Region_1 & Region_2","59a47542":"### Dimensionality Reduction w\/ SVD","8a8b9626":"## Who produces the most expensive wine?","0703a7c4":"### Unnamed: 0","478be894":"# Variable Analysis & Feature Engineering","73a8e368":"### Province","8436d71c":"### Title","39d0300c":"## Who produces the highest rated wine?","30cbd82d":"### Variety","cb476920":"# Can NLP learn more?","f20e7135":"### Designation","7100ef04":"### Country","99968aa7":"## Which countries produce the most wine?","c92d31d2":"### Winery","5bafead0":"### Taster Twitter Handle","3edcf97f":"## Does better wine cost more?","7e6131a3":"### Points"}}