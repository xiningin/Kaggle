{"cell_type":{"ebdb1441":"code","c5028c2e":"code","baaea6dd":"code","20721625":"code","c8fcb08f":"code","9e9a414d":"code","9cf2298a":"code","bc7eb389":"code","9ee7d08e":"code","e0f539fe":"code","976cd2ac":"code","9e9477eb":"markdown","2641317b":"markdown","48511142":"markdown","c119164b":"markdown","137b95a7":"markdown","f8b99077":"markdown"},"source":{"ebdb1441":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c5028c2e":"traindf = pd.read_csv('..\/input\/titanic\/train.csv').set_index('PassengerId')\ntestdf = pd.read_csv('..\/input\/titanic\/test.csv').set_index('PassengerId')\ndf = pd.concat([traindf, testdf], axis=0, sort=False)\ndf['Title'] = df.Name.str.split(',').str[1].str.split('.').str[0].str.strip()\ndf['IsWomanOrBoy'] = ((df.Title == 'Master') | (df.Sex == 'female'))\ndf['LastName'] = df.Name.str.split(',').str[0]\nfamily = df.groupby(df.LastName).Survived\ndf['WomanOrBoyCount'] = family.transform(lambda s: s[df.IsWomanOrBoy].fillna(0).count())\ndf['WomanOrBoyCount'] = df.mask(df.IsWomanOrBoy, df.WomanOrBoyCount - 1, axis=0)\ndf['FamilySurvivedCount'] = family.transform(lambda s: s[df.IsWomanOrBoy].fillna(0).sum())\ndf['FamilySurvivedCount'] = df.mask(df.IsWomanOrBoy, df.FamilySurvivedCount - df.Survived.fillna(0), axis=0)\ndf['WomanOrBoySurvived'] = df.FamilySurvivedCount \/ df.WomanOrBoyCount.replace(0, np.nan)\ndf['Alone'] = (df.WomanOrBoyCount == 0)\ntrain_y = df.Survived.loc[traindf.index]\ndf = pd.concat([df.WomanOrBoySurvived.fillna(0), df.Alone, df.Sex.replace({'male': 0, 'female': 1})], axis=1)\n\ntest_x = df.loc[testdf.index]\n\n# The one line of the code for prediction \ntest_x['Survived'] = (((test_x.WomanOrBoySurvived <= 0.238) & (test_x.Sex > 0.5) & (test_x.Alone > 0.5)) | \\\n          ((test_x.WomanOrBoySurvived > 0.238) & \\\n           ~((test_x.WomanOrBoySurvived > 0.55) & (test_x.WomanOrBoySurvived <= 0.633))))\n\n# Saving the result\npd.DataFrame({'Survived': test_x['Survived'].astype(int)}, \\\n             index=testdf.index).reset_index().to_csv('survived.csv', index=False)","baaea6dd":"import pandas as pd\nimport numpy as np \nimport graphviz\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","20721625":"# Downloading data and preparing for prediction  \ntraindf = pd.read_csv('..\/input\/titanic\/train.csv').set_index('PassengerId')\ntestdf = pd.read_csv('..\/input\/titanic\/test.csv').set_index('PassengerId')\ndf = pd.concat([traindf, testdf], axis=0, sort=False)\n","c8fcb08f":"df['Title'] = df.Name.str.split(',').str[1].str.split('.').str[0].str.strip()\ndf['IsWomanOrBoy'] = ((df.Title == 'Master') | (df.Sex == 'female'))\ndf['LastName'] = df.Name.str.split(',').str[0]\nfamily = df.groupby(df.LastName).Survived\ndf['WomanOrBoyCount'] = family.transform(lambda s: s[df.IsWomanOrBoy].fillna(0).count())\ndf['WomanOrBoyCount'] = df.mask(df.IsWomanOrBoy, df.WomanOrBoyCount - 1, axis=0)\ndf['FamilySurvivedCount'] = family.transform(lambda s: s[df.IsWomanOrBoy].fillna(0).sum())\ndf['FamilySurvivedCount'] = df.mask(df.IsWomanOrBoy, df.FamilySurvivedCount - df.Survived.fillna(0), axis=0)\ndf['WomanOrBoySurvived'] = df.FamilySurvivedCount \/ df.WomanOrBoyCount.replace(0, np.nan)\ndf['Alone'] = (df.WomanOrBoyCount == 0)","9e9a414d":"train_y = df.Survived.loc[traindf.index]\ndata = pd.concat([df.WomanOrBoySurvived.fillna(0), df.Alone, \\\n                  df.Sex.replace({'male': 0, 'female': 1})], axis=1)\ntrain_x, test_x = data.loc[traindf.index], data.loc[testdf.index]\ntrain_x.head(5)","9cf2298a":"# Tuning the DecisionTreeClassifier by the GridSearchCV\n# our output should be the MAX_DEPTH \nparameters = {'max_depth' : np.arange(2, 9, dtype=int),\n              'min_samples_leaf' :  np.arange(1, 3, dtype=int)}\nclassifier = DecisionTreeClassifier(random_state=1000)\nmodel = GridSearchCV(estimator=classifier, param_grid=parameters, scoring='accuracy', cv=10, n_jobs=-1)\nmodel.fit(train_x, train_y)\nbest_parameters = model.best_params_\nprint(best_parameters)","bc7eb389":"model=DecisionTreeClassifier(max_depth = best_parameters['max_depth'], \n                             random_state = 1118)\nmodel.fit(train_x, train_y)","9ee7d08e":"# plot tree\ndot_data = export_graphviz(model, out_file=None, feature_names=train_x.columns, class_names=['0', '1'], \n                           filled=True, rounded=False,special_characters=True) \ngraph = graphviz.Source(dot_data)\ngraph ","e0f539fe":"test_x['Survived'] = (((test_x.WomanOrBoySurvived <= 0.238) & (test_x.Sex > 0.5) & (test_x.Alone > 0.5)) | \\\n          ((test_x.WomanOrBoySurvived > 0.238) & \\\n           ~((test_x.WomanOrBoySurvived > 0.55) & (test_x.WomanOrBoySurvived <= 0.633))))\ny_pred = test_x['Survived'].astype(int)\nprint('Mean =', y_pred.mean(), ' Std =', y_pred.std())","976cd2ac":"pd.DataFrame({'Survived': y_pred}, \n             index=testdf.index).reset_index().to_csv('submission.csv', index=False)","9e9477eb":"getting mean \/ std \nprediction ","2641317b":"**Tunning the Model**","48511142":"As you have seen there is a slight difference in std, possibly related to the fact that the rules on the decision tree are shown with rounding. this did not affect the accuracy of the solution","c119164b":"Our Model","137b95a7":"import libraries for linear algebra and data processing, csv","f8b99077":"**plot the tree **"}}