{"cell_type":{"eb9c482e":"code","ba9836ec":"code","90356afd":"code","1d53d277":"code","1c6a2f5c":"code","09ed32e9":"code","f456a822":"code","11d83484":"code","198215a4":"code","3d9ffc31":"code","cda17998":"code","94a70b17":"code","a3ce4bb1":"code","3e50d3bb":"code","515bb6e4":"code","35a186eb":"code","5719b527":"code","12af97e3":"code","adfb8510":"code","0717fec1":"code","16d9f758":"code","d4f4dfc7":"code","08cbd9a0":"code","7996e029":"code","3853802b":"code","2c925bc0":"code","4fc0e270":"code","53b081d7":"code","d316fec3":"code","40c0ce1f":"code","b1e68da0":"code","d64d6e6f":"code","4b7d3282":"code","06f2c09c":"code","6be3cf00":"code","82572b7e":"code","6d382c19":"code","8efaa12d":"markdown","ea859398":"markdown","e3f3589f":"markdown","ad4f2a03":"markdown","02ce3f76":"markdown","83c11f0b":"markdown","d086cea6":"markdown","62320d4c":"markdown","e99da2e1":"markdown","77b6ddda":"markdown","2f717482":"markdown","9515f022":"markdown","cca689fd":"markdown","0b619f7c":"markdown","521488b1":"markdown","94f72f5b":"markdown","ed88afbe":"markdown","f2123050":"markdown","b6a751e0":"markdown","bed3c754":"markdown","f229b517":"markdown","9730879c":"markdown","05b096d7":"markdown","5532559f":"markdown","e4e3c6cf":"markdown","33af51ef":"markdown","81a4cd78":"markdown","5d228882":"markdown","87bb6369":"markdown","e0c1e750":"markdown","71a946b9":"markdown","eb4e6086":"markdown","087e7084":"markdown","bd98e627":"markdown","0e15ff4a":"markdown","8cd6d7a8":"markdown","0dc1cdbb":"markdown","6b3cba69":"markdown","30971902":"markdown","53912c8e":"markdown","769057aa":"markdown","b7688565":"markdown","5d2c3f99":"markdown","b10cc4ef":"markdown","43ad1692":"markdown","cd39c983":"markdown","fdd44079":"markdown","838b06da":"markdown","83bc2c52":"markdown","eee6965e":"markdown"},"source":{"eb9c482e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ba9836ec":"import warnings # remove Warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning, module=\"torch.nn.functional\")","90356afd":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","1d53d277":"from fastai.vision import *\nfrom fastai.metrics import *","1c6a2f5c":"import numpy as np\nimport pandas as pd\n%matplotlib inline","09ed32e9":"path = '\/kaggle\/input\/digit-recognizer\/'","f456a822":"df_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_train.head()","11d83484":"df_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ndf_test.head()","198215a4":"class CustomImageList(ImageList):\n    def open(self, fn):\n        if(fn.size == 785):\n            fn = fn[1:]\n        img = fn.reshape(28,28)\n        img = np.stack((img,)*1, axis=-1)\n        return Image(pil2tensor(img, dtype=np.float32))\n    \n    @classmethod\n    def from_csv_custom(cls, path:PathOrStr, csv_name:str, imgIdx:int=1, header:str='infer', **kwargs)->'ItemList': \n        df = pd.read_csv(Path(path)\/csv_name, header=header)\n        res = super().from_df(df, path=path, cols=0, **kwargs)\n        \n        res.items = df.iloc[:,imgIdx:].apply(lambda x: x.values \/ 255.0, axis=1).values\n        \n        return res\n    \n    @classmethod\n    def from_csv_custom_test(cls, path:PathOrStr, csv_name:str, imgIdx:int=1, header:str='infer', **kwargs)->'ItemList': \n        df = pd.read_csv(Path(path)\/csv_name, header=header)\n        res = super().from_df(df, path=path, cols=0, **kwargs)\n        \n        res.items = df.iloc[:,imgIdx:].apply(lambda x: x.values \/ 255.0, axis=1).values\n        print(res)\n        return res\n    \n    \n    \n    @classmethod\n    def from_df_custom(cls, path:PathOrStr, df:DataFrame, imgIdx:int=1, header:str='', **kwargs)->'ItemList': \n        res = super().from_df(df, path=path, cols=0, **kwargs)\n        \n        res.items = df.iloc[:,imgIdx:].apply(lambda x: x.values \/ 255.0, axis=1).values\n        \n        return res","3d9ffc31":"test = CustomImageList.from_csv_custom_test(path=path, csv_name='test.csv', imgIdx=0)","cda17998":"data = (CustomImageList.from_csv_custom(path=path, csv_name='train.csv', imgIdx=1)\n                .split_by_rand_pct(.02)\n                .label_from_df(cols='label') #cols='label'\n                .add_test(test, label=0)\n                .transform(get_transforms(do_flip=False,max_rotate=15,max_warp=0.4))\n                .databunch(bs=128, num_workers=0)\n                .normalize(imagenet_stats))","94a70b17":"data.train_ds","a3ce4bb1":"data.valid_ds","3e50d3bb":"data.show_batch(rows=5, figsize=(7,7))\n","515bb6e4":"model_selected = models.resnet152","35a186eb":"learn = cnn_learner(data, model_selected, \n                    metrics=error_rate,callback_fns=ShowGraph,model_dir='\/kaggle\/working').mixup()","5719b527":"learn.lr_find()","12af97e3":"learn.recorder.plot(suggestion=True)\n","adfb8510":"min_grad_lr = learn.recorder.min_grad_lr\nmin_grad_lr","0717fec1":"learn.fit_one_cycle(30,min_grad_lr)\n","16d9f758":"learn.save('r152-fit1')","d4f4dfc7":"data = (CustomImageList.from_csv_custom(path=path, csv_name='train.csv', imgIdx=1)\n                #.split_by_rand_pct(.02) --- this split has been removed\n                .split_none()# this line replaces the previous split\n                .label_from_df(cols='label') #cols='label'\n                .add_test(test, label=0)\n                .transform(get_transforms(do_flip=False,max_rotate=15,max_warp=0.4))\n                .databunch(bs=128, num_workers=0)\n                .normalize(imagenet_stats))","08cbd9a0":"data.train_ds","7996e029":"learn.data = data","3853802b":"learn.fit_one_cycle(10,min_grad_lr)","2c925bc0":"learn.save('r152-fit2')","4fc0e270":"learn.unfreeze()","53b081d7":"learn.lr_find()","d316fec3":"learn.recorder.plot(suggestion=True)\n","40c0ce1f":"min_grad_lr = learn.recorder.min_grad_lr\nmin_grad_lr","b1e68da0":"learn.fit_one_cycle(10,min_grad_lr)\n","d64d6e6f":"data = (CustomImageList.from_csv_custom(path=path, csv_name='train.csv', imgIdx=1)\n                .split_by_rand_pct(.02)\n                .label_from_df(cols='label') #cols='label'\n                .add_test(test, label=0)\n                .transform(get_transforms(do_flip=False,max_rotate=15,max_warp=0.4))\n                .databunch(bs=128, num_workers=0)\n                .normalize(imagenet_stats))\nlearn.data = data","4b7d3282":"# get the predictions\npredictions, *_ = learn.get_preds(DatasetType.Test)\nlabels = np.argmax(predictions, 1)\n# output to a file\nsubmission_df = pd.DataFrame({'ImageId': list(range(1,len(labels)+1)), 'label': labels})\nsubmission_df.to_csv(f'submission.csv', index=False)","06f2c09c":"submission_df","6be3cf00":"interp = ClassificationInterpretation.from_learner(learn)\n","82572b7e":"interp.plot_confusion_matrix()\n","6d382c19":"interp.plot_top_losses(9,cmap='gray')\n","8efaa12d":"[Unfreeze the whole model](https:\/\/docs.fast.ai\/basic_train.html#Learner.unfreeze) in order to train all the layers","ea859398":"FastAI imports","e3f3589f":"The validation dataset contains the 2% of the training data, in total 840 images","ad4f2a03":"Fit for extra 10 epochs with the full dataset","02ce3f76":"> Thanks to this notebook \"MNIST Resnet_bigger+Mish_in_shortcut+transforms\" that was used partially arrange the dataset\n","83c11f0b":"# 5. Fit the model","d086cea6":"I suggest to experiment with the epoch number, for me 30 epochs works pretty well","62320d4c":"# 2. Quick exam of the dataset provided","e99da2e1":"plot of the learning rate with [suggested best lr](https:\/\/docs.fast.ai\/callbacks.lr_finder.html#Suggested-LR) to adopt","77b6ddda":"remember to save your job ... of course I learned the hard way","2f717482":"> This resnet18 scored 0.99014, wich is not bad.\n\n> The best score was achieved with resnet152 with a score of 0.99600.","9515f022":"We now created the databunch of 128 images to use in our model and we quickly visually examine the data","cca689fd":"Follow what we did before","0b619f7c":"Fit for an extra 10 epochs.","521488b1":"create the learner","94f72f5b":"and explore the [confusion matrix](https:\/\/docs.fast.ai\/train.html#ClassificationInterpretation.plot_confusion_matrix)","ed88afbe":"the one below is to reload the latest packages","f2123050":"# 6. Predictions","b6a751e0":"quick look at the submission format","bed3c754":"In order to keep it simple I started with the one who should give the best results","f229b517":"we replace the data in our learner with the new data","9730879c":"The test dataset contains 28000 items 1,28,28","05b096d7":"the train dataset contains 41160 images","5532559f":"for vision the [plot top losses](https:\/\/docs.fast.ai\/vision.learner.html#_cl_int_plot_top_losses) is anyway my favourite","e4e3c6cf":"this import is to avoid warnings","33af51ef":"Fit the model with the [one cycle policy](https:\/\/docs.fast.ai\/callbacks.one_cycle.html#Training-with-the-1cycle-policy)\n\nhere is the scientific [paper link](https:\/\/arxiv.org\/abs\/1803.09820) if you want to go deeper","81a4cd78":"Now the data contains all the 42000 images of the training set","5d228882":"> In order to have a correct interpretation of out data we should compare it towards our validation dataset, BUT we also trained the validation dataset this time in order to achieve the maximum score on Kaggle, so we are forced to look at our model performance through something that we trained.\n> > For this reason we recreate the dataset with the command line below.","87bb6369":"We created our data for the training","e0c1e750":"If you were so patient to read up to here I hope you found some valuable information ...","71a946b9":"set the lr suggested as lr for training","eb4e6086":"classic FastAI [learning rate finder](https:\/\/docs.fast.ai\/basic_train.html#Model-fitting-methods)\nthis is the link to the [scientific paper](https:\/\/arxiv.org\/abs\/1506.01186) if you want to go deeper","087e7084":"Now we are going to train with the full dataset removing the split, so we are going to use all the 42000 ","bd98e627":"Class created in the [\"MNIST Resnet_bigger+Mish_in_shortcut+transforms\"](https:\/\/www.kaggle.com\/rincewind007\/mnist-resnet-bigger-mish-in-shortcut-transforms\/comments) to format the data for FastAI models","0e15ff4a":"# ***... please upvote ... Thank you!!! :)))***","8cd6d7a8":"# 1. Imports  and file check","0dc1cdbb":"### Fit with the full dataset","6b3cba69":"we replace the data inside the model to retrain with those extra 840 samples","30971902":"We create the predictions and the output file","53912c8e":"#  MNIST with FastAI ","769057aa":"and save again","b7688565":"... and if you liked it ","5d2c3f99":"Create the [classification interpretation](https:\/\/docs.fast.ai\/vision.learner.html#ClassificationInterpretation) from FastAI","b10cc4ef":"# 4. Create the model","43ad1692":"Standard imports for ML","cd39c983":"quick look of train and test dataset, the only difference is the label column on the train dataset.","fdd44079":"This is the path were you find the datasets in Kaggle","838b06da":"# 3. Formatting the data for ML","83bc2c52":"We create our learner now using the data that we just formatted and chosing the model.\nHere FastAi is very flexible, I personally experimented with:\n* resnet18 \n* resnet34\n* resnet50\n* resnet101\n* resnet152\n\nYou can find more info about the models [here](https:\/\/docs.fast.ai\/vision.models.html#Computer-Vision-models-zoo)\n\nI encourage you to try and change this values in the model selection and analyze the results, you will learn a lot","eee6965e":"### Unfreeze"}}