{"cell_type":{"2af146d1":"code","22586083":"code","2db8c020":"code","79a0fdbd":"code","deb5fb3a":"code","e3cc2005":"code","a5b9e9bf":"code","cc3cecad":"code","8e669c4b":"code","5b95b5df":"code","44b8bdc9":"code","cbc8529a":"code","b12407f8":"code","601c7e69":"code","f0c80685":"code","7b2d9666":"code","947d8997":"code","a30a9204":"code","9678bcf7":"code","c1ffcbc0":"code","0ca88be6":"code","b9a6818f":"code","4002af59":"code","32aab6a8":"code","8b369564":"code","5aef6709":"code","dd1b65e0":"code","f29b1bb3":"code","98ec89bf":"code","2508dd86":"code","26d1a59d":"code","d7231cc9":"code","d919e0ac":"code","6dc48109":"code","96c9ece4":"markdown","5cbade94":"markdown","e4656749":"markdown","5a213bf3":"markdown","446d4972":"markdown","a55983be":"markdown","63a69827":"markdown","efc47468":"markdown","42666f47":"markdown","092c677a":"markdown","aab96df1":"markdown","c7bc33ea":"markdown"},"source":{"2af146d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","22586083":"# read data\ndata = pd.read_csv('..\/input\/pokemon.csv')\ndata= data.set_index(\"#\")\ndata.head()","2db8c020":"# indexing using square brackets\ndata[\"HP\"][1]","79a0fdbd":"# using column attribute and row label\ndata.HP[1]","deb5fb3a":"# using loc accessor\ndata.loc[1,[\"HP\"]]","e3cc2005":"# Selecting only some columns\ndata[[\"HP\",\"Attack\"]]","a5b9e9bf":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"HP\"]))     # series\nprint(type(data[[\"HP\"]]))   # data frames","cc3cecad":"# Slicing and indexing series\ndata.loc[1:10,\"HP\":\"Defense\"]   # 10 and \"Defense\" are inclusive","8e669c4b":"# Reverse slicing \ndata.loc[10:1:-1,\"HP\":\"Defense\"] ","5b95b5df":"# From something to end\ndata.loc[1:10,\"Speed\":] ","44b8bdc9":"# Creating boolean series\nboolean = data.HP > 200\ndata[boolean]","cbc8529a":"# Combining filters\nfirst_filter = data.HP > 150\nsecond_filter = data.Speed > 35\ndata[first_filter & second_filter]","b12407f8":"# Filtering column based others\ndata.HP[data.Speed<15]","601c7e69":"# Plain python functions\ndef div(n):\n    return n\/2\ndata.HP.apply(div)","f0c80685":"# Or we can use lambda function\ndata.HP.apply(lambda n : n\/2)","7b2d9666":"# Defining column using other columns\ndata[\"total_power\"] = data.Attack + data.Defense\ndata.head()","947d8997":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","a30a9204":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata3.index = range(100,900,1)\ndata3.head()","9678bcf7":"# We can make one of the column as index. I actually did it at the beginning of manipulating data frames with pandas section\n# It was like this\n# data= data.set_index(\"#\")\n# also you can use \n# data.index = data[\"#\"]","c1ffcbc0":"# lets read data frame one more time to start from beginning\ndata = pd.read_csv('..\/input\/pokemon.csv')\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","0ca88be6":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Type 1\",\"Type 2\"]) \ndata1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","b9a6818f":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","4002af59":"# pivoting\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","32aab6a8":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n# lets unstack it","8b369564":"# level determines indexes\ndf1.unstack(level=0)","5aef6709":"df1.unstack(level=1)","dd1b65e0":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","f29b1bb3":"df","98ec89bf":"# df.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\npd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","2508dd86":"# We will use df\ndf","26d1a59d":"# according to treatment take means of other features\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","d7231cc9":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max() ","d919e0ac":"# Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","6dc48109":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\n#df[\"gender\"] = df[\"gender\"].astype(\"category\")\n#df[\"treatment\"] = df[\"treatment\"].astype(\"category\")\n#df.info()","96c9ece4":"**HIERARCHICAL INDEXING**\n* Setting indexing","5cbade94":"**SLICING DATA FRAME**\n\n* Difference between selecting columns\n* Series and data frames\n* Slicing and indexing series\n* Reverse slicing\n* From something to end","e4656749":"**STACKING and UNSTACKING DATAFRAME**\n\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","5a213bf3":"**TRANSFORMING DATA**\n\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","446d4972":"**PIVOTING DATA FRAMES**\n\n* pivoting: reshape tool","a55983be":"**MELTING DATA FRAMES**\n* Reverse of pivoting","63a69827":"**CONCLUSION**\n\nThank you for your votes and comments !!!","efc47468":"**INDEX OBJECTS AND LABELED DATA**\n\nindex: sequence of label","42666f47":"**Data Science Tutorial For Everyone #5**\n\n**Manipulating Data Frames With Pandas:**\n\n* Indexing Data Frames\n* Slicing Data Frame\n* Filtering Data Frames\n* Transforming Data\n* Index Objects And Labeled Data\n* Hierarchical Indexing\n* Pivoting Data Frames\n* Stacking And Unstacking Dataframe\n* Melting Data Frames\n* Categoricals And Groupby\n","092c677a":"**FILTERING DATA FRAMES**\n\nCreating boolean series Combining filters Filtering column based others","aab96df1":"**INDEXING DATA FRAMES**\n\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","c7bc33ea":"**CATEGORICALS AND GROUPBY**"}}