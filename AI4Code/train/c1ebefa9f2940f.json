{"cell_type":{"a992ddff":"code","599d9510":"code","63ee332b":"code","57f5fb43":"code","c279f9f3":"code","15b63349":"code","8c18fa7d":"code","74dc4ac6":"code","cded9598":"code","78b6f83f":"code","cba15328":"code","68a29a57":"code","39384c8e":"code","5da6a8ce":"code","0272d2d4":"code","42cc4a71":"code","c9aee071":"code","f689b8ed":"code","1f963836":"code","f39d804a":"code","59668147":"code","426b01f8":"code","bbf2d379":"code","ec734e04":"code","fd1a994d":"code","d10c096b":"code","668e110a":"code","500c7450":"code","7e758e2f":"code","029bca20":"code","37750f7e":"code","9a1050d2":"code","993f1792":"code","ba50d5d2":"code","2ff001f6":"code","8b6f8846":"code","8152c124":"code","88cbad42":"code","0d80de54":"code","d258a817":"code","636869d0":"code","e267c79d":"code","f89ee153":"code","d1dd369c":"code","35b345b4":"code","944e4ec6":"code","330ddf1e":"code","4afe4cde":"code","2860421f":"code","df148a09":"code","fe91e2cc":"markdown","67c3bb8d":"markdown","3e4d785c":"markdown","a1b4e430":"markdown","239d38b8":"markdown","96867383":"markdown","ba7b4d39":"markdown","51927066":"markdown","aa5a1d40":"markdown","12aa7330":"markdown","d794b755":"markdown","e9e991e7":"markdown","15b11d3a":"markdown","7d80bb98":"markdown","0578de82":"markdown","80768a70":"markdown","fcfe4308":"markdown","a4ec8c24":"markdown","8f24a21e":"markdown","69ef3d9c":"markdown","0a07a6e6":"markdown","a819362f":"markdown","bc7f5478":"markdown","af45e3b1":"markdown","e1991a1c":"markdown","298d978d":"markdown","68c51925":"markdown","c3193068":"markdown","02a6a417":"markdown","a90e7d8a":"markdown","16a9c564":"markdown","01526833":"markdown","f1fc5f41":"markdown","769dd75f":"markdown","3c595721":"markdown","dafd843d":"markdown","400c1a92":"markdown","36f6e607":"markdown","3be7a696":"markdown","a0a04c88":"markdown","72681e9f":"markdown","510b60ff":"markdown","01563ec1":"markdown","e504fb6d":"markdown","712d4e16":"markdown","e536c8da":"markdown","0debaa17":"markdown","e385b311":"markdown","9bdf8df4":"markdown"},"source":{"a992ddff":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, mean_squared_error\n\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","599d9510":"data = pd.read_csv(\"..\/input\/bikesharing\/day.csv\")\ndata.head()","63ee332b":"data.shape","57f5fb43":"data.info()","c279f9f3":"data.describe()","15b63349":"data.isnull().sum()","8c18fa7d":"df = data.copy()\ndf.drop(\"instant\", axis =1, inplace = True)\ndf.head()","74dc4ac6":"df[\"dteday\"] = pd.to_datetime(df[\"dteday\"])","cded9598":"for i in df.columns:\n    print(df[i].value_counts())","78b6f83f":"df[\"season\"] = df[\"season\"].map({1:\"spring\", 2:\"summer\", 3:\"fall\", 4:\"winter\"})\ndf[\"weathersit\"] = df[\"weathersit\"].map({1 : \"Clear\", 2 : \"Mist\", 3 : \"Light_Snow\", 4 : \"Heavy_Rain\"})","cba15328":"cols = [\"season\", \"yr\", \"mnth\", \"holiday\", \"weekday\", \"workingday\", \"weathersit\"]\n\nfor i in cols:\n    print(df[i].value_counts())","68a29a57":"cat_columns = [\"season\", \"mnth\", \"weekday\", \"weathersit\"]\n\nfor i in cat_columns:\n    df[i] = df[i].astype(\"category\")  ","39384c8e":"print(df.casual.sum())\nprint(df.registered.sum())","5da6a8ce":"df[\"cas_reg_ratio\"] = np.round(df[\"casual\"] \/ df[\"registered\"], 4)\ndf.head()","0272d2d4":"plt.figure()\nsns.pairplot(df[[\"temp\", \"atemp\", \"hum\", \"windspeed\", \"cnt\", \"cas_reg_ratio\"]])\nplt.show()","42cc4a71":"plt.figure(figsize = (10,6))\nsns.heatmap(df[[\"temp\", \"atemp\", \"hum\", \"windspeed\", \"cnt\", \"cas_reg_ratio\"]].corr(), annot = True, cmap = \"YlGnBu\")\nplt.show()","c9aee071":"plt.figure(figsize = (16,10))\n\nplt.subplot(3,2,1)\nsns.scatterplot(x = df[\"temp\"], y = df[\"cnt\"])\n\nplt.subplot(3,2,2)\nsns.scatterplot(x = df[\"atemp\"], y = df[\"cnt\"])\n\nplt.subplot(3,2,3)\nsns.scatterplot(x = df[\"hum\"], y = df[\"cnt\"])\n\nplt.subplot(3,2,4)\nsns.scatterplot(x = df[\"windspeed\"], y = df[\"cnt\"])\n\nplt.subplot(3,2,5)\nsns.scatterplot(x = df[\"cas_reg_ratio\"], y = df[\"cnt\"])\n\nplt.show()","f689b8ed":"plt.figure(figsize = (16,14))\n\nplt.subplot(4,2,1)\nsns.boxplot(x = df[\"season\"], y = df[\"cnt\"])\n\nplt.subplot(4,2,2)\nsns.boxplot(x = df[\"yr\"], y = df[\"cnt\"])\n\nplt.subplot(4,2,3)\nsns.boxplot(x = df[\"mnth\"], y = df[\"cnt\"])\n\nplt.subplot(4,2,4)\nsns.boxplot(x = df[\"holiday\"], y = df[\"cnt\"])\n\nplt.subplot(4,2,5)\nsns.boxplot(x = df[\"weekday\"], y = df[\"cnt\"])\n\nplt.subplot(4,2,6)\nsns.boxplot(x = df[\"workingday\"], y = df[\"cnt\"])\n\nplt.subplot(4,2,7)\nsns.boxplot(x = df[\"weathersit\"], y = df[\"cnt\"])\n\nplt.show()","1f963836":"plt.figure()\nsns.distplot(df[\"cnt\"])\nplt.show()","f39d804a":"dummy_var = pd.get_dummies(df[[\"season\", \"mnth\", \"weekday\", \"weathersit\"]], drop_first = True)\ndf = pd.concat([df,dummy_var], axis = 1)","59668147":"df.drop(['dteday', 'season', 'mnth', 'weekday','weathersit', 'casual', 'registered'], axis = 1, inplace = True)\ndf.head()","426b01f8":"df_train, df_test = train_test_split(df, train_size = 0.75, test_size = 0.25, random_state = 100)\nprint(df_train.shape)\nprint(df_test.shape)","bbf2d379":"num_vars = [\"temp\", \"atemp\", \"hum\", \"windspeed\", \"cnt\", \"cas_reg_ratio\"]\n\nscaler = MinMaxScaler()\n\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])","ec734e04":"df_train.describe()","fd1a994d":"y_train = df_train.pop(\"cnt\")\nX_train = df_train","d10c096b":"lm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm,15)\nrfe = rfe.fit(X_train, y_train)\nlist(zip(X_train.columns, rfe.support_, rfe.ranking_))","668e110a":"X_train.columns[rfe.support_]","500c7450":"X_train_rfe = X_train[X_train.columns[rfe.support_]]\nX_train_sm = sm.add_constant(X_train_rfe)\nreg_1 = sm.OLS(y_train, X_train_sm).fit()\nreg_1.summary()","7e758e2f":"vif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","029bca20":"X_train_rfe = X_train_rfe.drop(\"hum\", axis = 1)\nX_train_sm = sm.add_constant(X_train_rfe)\nreg_2 = sm.OLS(y_train, X_train_sm).fit()\nreg_2.summary()","37750f7e":"vif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","9a1050d2":"X_train_rfe = X_train_rfe.drop(\"weekday_5\", axis = 1)\nX_train_sm = sm.add_constant(X_train_rfe)\nreg_3 = sm.OLS(y_train, X_train_sm).fit()\nreg_3.summary()","993f1792":"vif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","ba50d5d2":"X_train_rfe = X_train_rfe.drop(\"weekday_4\", axis = 1)\nX_train_sm = sm.add_constant(X_train_rfe)\nreg_4 = sm.OLS(y_train, X_train_sm).fit()\nreg_4.summary()","2ff001f6":"vif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","8b6f8846":"X_train_rfe = X_train_rfe.drop(\"cas_reg_ratio\", axis = 1)\nX_train_sm = sm.add_constant(X_train_rfe)\nreg_5 = sm.OLS(y_train, X_train_sm).fit()\nreg_5.summary()","8152c124":"vif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","88cbad42":"X_train_rfe = X_train_rfe.drop(\"workingday\", axis = 1)\nX_train_sm = sm.add_constant(X_train_rfe)\nreg_6 = sm.OLS(y_train, X_train_sm).fit()\nreg_6.summary()","0d80de54":"vif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","d258a817":"X_train_rfe = X_train_rfe.drop(\"windspeed\", axis = 1)\nX_train_sm = sm.add_constant(X_train_rfe)\nreg_7 = sm.OLS(y_train, X_train_sm).fit()\nreg_7.summary()","636869d0":"vif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","e267c79d":"y_pred_train = reg_7.predict(X_train_sm)\nsns.distplot(y_train - y_pred_train)\nplt.show()","f89ee153":"sns.scatterplot(x = y_pred_train, y = y_train - y_pred_train)\nplt.show()","d1dd369c":"df_test[num_vars] = scaler.transform(df_test[num_vars])","35b345b4":"df_test.describe()","944e4ec6":"y_test = df_test.pop(\"cnt\")\nX_test = df_test","330ddf1e":"X_test_rfe = X_test[X_train_rfe.columns]\nX_test_sm = sm.add_constant(X_test_rfe)\ny_pred_test = reg_7.predict(X_test_sm)","4afe4cde":"sns.scatterplot(x = y_test, y = y_pred_test, alpha = 0.5)\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predicted\")\nplt.show()","2860421f":"r2_train = r2_score(y_train, y_pred_train)\nprint(\"Train R-squared : \", np.round(r2_train,4))\nr2_test = r2_score(y_test, y_pred_test)\nprint(\"Test R-squared : \", np.round(r2_test, 4))","df148a09":"reg_7.params","fe91e2cc":"## Conclusion","67c3bb8d":"#### Checking of VIF","3e4d785c":"**cnt** = `0.063962` + `0.230484` * **yr** - `0.118132` * **holiday** + `0.546875` * **temp** +  `0.099290` * **season_summer** + `0.152734` * **season_winter** + `0.057104` * **mnth_8** + `0.121227` * **mnth_9** - `0.298331` * **weathersit_Light_Snow** - `0.080155` * **weathersit_Mist**","a1b4e430":"#### Boxplot to analyze the categorical variables","239d38b8":"**Inference:**\n- There is **linear relationship** found between the feature variables and the target variable\n- **Positive correlation** is seen for **temp, atemp, cas_reg_ratio(Casual \/ Registered) and the target variable**\n- **Negative correlation** is seen for **hum & windspeed and the target variable**","96867383":"#### Checking of VIF","ba7b4d39":"#### Checking of VIF","51927066":"#### Model 5 : Removing variable `cas_reg_ratio` due to high p-value","aa5a1d40":"## Making Predictions on the Test Set","12aa7330":"#### Results - R-squared","d794b755":"#### Model 6 : Removing variable `workingday` due to high p-value","e9e991e7":"#### Checking of VIF","15b11d3a":"**Inference :**\n- There are no null values found in the data set","7d80bb98":"#### 2. Important features derived from the final model\n- **temp** with co-efficient of 0.546875.\n    - A unit increase in temp variable can increase count of bike rentals by 0.54 units\n- **weathersit_Light_Snow** with co-efficient of -0.298331.\n    - A unit increase in weathersit_Light_Snow variable can decrease count of bike rentals by 0.29 units\n- **yr** with co-efficient of 0.230484.\n    - A unit increase in yr variable can increase count of bike rentals by 0.23 units\n- **season_winter** with co-efficient of 0.152734.\n    - A unit increase in season_winter variable can increase count of bike rentals by 0.15 units\n- **holiday** with co-efficient of -0.118132.\n    - A unit increase in holiday variable can decrease count of bike rentals by 0.11 units","0578de82":"#### Splitting the dataset into Train & Test Split","80768a70":"#### Model 3 : Removing variable `weekday_5` due to high p-value","fcfe4308":"#### Checking of VIF","a4ec8c24":"**Inference :**\n- The error terms are also randomly distributed with no pattern ","8f24a21e":"#### Creating a derived variable `cas_reg_ratio` from casual & registered count","69ef3d9c":"## Data Inspection & Preparation","0a07a6e6":"#### Scatter plot - to detect any linear trend","a819362f":"**Inference**\n- The target variable cnt is not uniformly distributed","bc7f5478":"#### Model 7 : Removing variable `windspeed` due to high VIF","af45e3b1":"#### Distribution plot on the Target Variable","e1991a1c":"**Inference**\n- **Seasonal Pattern** - The number of users using bike rental is lower in spring compared to other seasons\n- **Year Pattern** - Bike Rental Usage is higher in 2019 comaperd to 2018\n- **Monthly Pattern** - There is considerable increase in bike rentals in the middle of the year (Months - May to October)\n- **Non-holiday** days has slightly higher bike rental usage\n- **Weathersit** pertaining to **Light_Snow** shows the lowest bike rental count compared to other categories within the feature\n- Weekdays and Working Days is not showing any incraese\/decrease pattern w.r.t Bike Rental Usage\n- No **potential outliers** detected in any features.","298d978d":"#### Linear Regression Model using RFE","68c51925":"**Inference**\n- All the p-values looks to be significant\n- Although the VIF of `hum` & `temp` are beyond acceptance (>5)","c3193068":"#### Model 1 - Using Statsmodels & Important Features derived from RFE","02a6a417":"#### Checking for Residual Errors","a90e7d8a":"#### Checking of VIF","16a9c564":"#### Model 2 : Removing variable `hum` due to high VIF","01526833":"#### Feature Scaling on Test Data","f1fc5f41":"#### Correlation Matrix - Heatmap","769dd75f":"#### Scatter plot of Actual Vs Predicted","3c595721":"**Inference:**\n- Features **atemp** and **temp** are highly correlated with each other\n- Fetaures **hum** and **windspeed** are negatively correlated with the targeted variable **cnt**","dafd843d":"## EDA and Data Visualization","400c1a92":"**So reg_7 model can now be used to preict the unseen data to check how well the model has generalized on the test dataset (unseen data)**","36f6e607":"#### Dummy Variable Creation for Categorical Variables","3be7a696":"## Model Building","a0a04c88":"**Inference:**\n- No abrupt or out of range values found in any column\n- Some of the categorical variables are typecasted as integer and float variables. Hence we have to fix them.","72681e9f":"**Inference :**\n- All the feauture variables included in the model have a p-value less than 0.05\n- Also the Variance Infaltion Factor (VIF) for all the mentioned variables are low (<5) in this case","510b60ff":"#### Checking of VIF","01563ec1":"#### Feature Scaling on T'rain Data","e504fb6d":"#### Checking for Randomness in error terms","712d4e16":"#### 1. Final Equation:","e536c8da":"**Inference :**\n- The error terms are uniformally distributed with mean at around 0.","0debaa17":"#### Model 4 : Removing variable `weekday_4` due to high p-value","e385b311":"#### Pairwise Plot to check Linear Relationship","9bdf8df4":"## Importing the required libraries"}}