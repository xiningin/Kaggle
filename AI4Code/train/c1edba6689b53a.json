{"cell_type":{"544c3e94":"code","772d8c00":"code","b21beab4":"code","ee55b964":"code","5fa707a7":"code","2586db8d":"code","d810a9f4":"code","541786c2":"code","d620fb99":"code","1f9b2f36":"code","3ea22f36":"code","0a10c68f":"code","c39dae10":"code","affdf423":"code","02fbd059":"code","517247fb":"code","094d8afd":"code","9c472d4b":"code","131496d6":"code","f2979ef4":"code","ba15ba4f":"code","48a76b81":"code","5c7dc6f3":"code","8ddc4ba4":"code","57846de3":"code","df2e53e9":"code","58031f13":"code","4f8fba58":"code","3305a655":"code","6df681df":"code","f96506e7":"code","3fe58eb0":"markdown","e853d7a8":"markdown","6e76b264":"markdown","0ed42607":"markdown"},"source":{"544c3e94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Library for mathematical computations\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#Library for Modelling\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\n\n#Library for Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","772d8c00":"#Loading data as Training and Testing sets\ntrain_data=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","b21beab4":"train_data.head()","ee55b964":"test_data.head()","5fa707a7":"train_data.describe()","2586db8d":"#Checking columns with missing data\nMiss_Percent=100*(train_data.isnull().sum()\/len(train_data))\n\n#Sorting the data columns by their percentage in descending order\nMiss_Percent=Miss_Percent[Miss_Percent>0].sort_values(ascending=False).round(1)\n\n#Creating a dataframe to show percentage of missing data and its respective data column in table\nDataFrame=pd.DataFrame(Miss_Percent)\nmiss_percent_table=DataFrame.rename(columns={0:'% of Missing Values'})\nMissPercent=miss_percent_table\n\n#Displaying Missing Value table\nMissPercent","d810a9f4":"##dropping some features \ntrain_data=train_data.drop(['Id','Alley','PoolQC','MiscFeature','Fence'],axis=1)","541786c2":"train_data['FireplaceQu'].unique()\n#Replacing Null value in FirePlaceQu with None\ntrain_data['FireplaceQu']=train_data['FireplaceQu'].fillna('None')\n#Checking LotFrontage column\ntrain_data['LotFrontage'].unique()","d620fb99":"train_data['LotFrontage']=train_data['LotFrontage'].fillna(train_data['LotFrontage'].median())\n#Checking GarageCond column\ntrain_data['GarageCond'].unique()","1f9b2f36":"train_data['GarageCond']=train_data['GarageCond'].fillna('None')\ntrain_data['GarageQual'].unique()","3ea22f36":"#Replacing the null value with none in GarageQual\ntrain_data['GarageQual']=train_data['GarageQual'].fillna('None')\n#Checking GarageFinish Column\ntrain_data['GarageFinish'].unique()","0a10c68f":"train_data['GarageFinish']=train_data['GarageFinish'].fillna('None')\n#Replacing the Null Value with \ntrain_data['GarageYrBlt']=train_data['GarageYrBlt'].fillna(train_data['GarageYrBlt'].median())\ntrain_data['GarageType'].unique()","c39dae10":"#Replacing Null Value with None\ntrain_data['GarageType']=train_data['GarageType'].fillna('None')","affdf423":"train_data['BsmtFinType2']=train_data['BsmtFinType2'].fillna('None')\ntrain_data['BsmtFinType1'].unique()","02fbd059":"train_data['BsmtFinType1']=train_data['BsmtFinType1'].fillna(\"None\")","517247fb":"#Replacing null value with None\ntrain_data['BsmtExposure']=train_data['BsmtExposure'].fillna('None')\ntrain_data['BsmtCond'].unique()","094d8afd":"train_data['BsmtCond']=train_data['BsmtCond'].fillna('None')\n#Replacing Null value with None\ntrain_data['BsmtQual']=train_data['BsmtQual'].fillna('None')","9c472d4b":"#Checking MasVnrArea column\ntrain_data['MasVnrArea'].unique()","131496d6":"#Repalcing Null value with Zero(0)\ntrain_data['MasVnrArea']=train_data['MasVnrArea'].fillna(0)\n#Replacing Null value with Others as there already is a value called None\ntrain_data['MasVnrType']=train_data['MasVnrArea'].fillna(\"Others\")","f2979ef4":"#Replacing the Null value with None\ntrain_data['Electrical']=train_data['Electrical'].fillna('None')","ba15ba4f":"#Calculating Correlation \ncorrelation=train_data.corr()\nPositive_Related=correlation.index[abs(correlation[\"SalePrice\"])>0.4]\n\n#Plotting the Correlation in HeatMap for the data columns which has correlation value more than 0.4\nplt.figure(figsize=(12,12))\nCorr_Heatmap=sns.heatmap(train_data[Positive_Related].corr(),annot=True,cmap=\"YlGnBu\")","48a76b81":"#BoxPlot for OverallQual Column\nsns.set(rc={'figure.figsize':(10,8)})\nsns.boxplot(x='OverallQual',y='SalePrice',data=train_data)","5c7dc6f3":"#Deleting Outliers\ntrain_data=train_data.drop(train_data[(train_data['GrLivArea']>4000)&(train_data['SalePrice']>300000)].index)","8ddc4ba4":"\ntest_id=test_data['Id']\ntest_data=test_data.drop(['Id','Alley','PoolQC','MiscFeature','Fence'],axis=1)","57846de3":"#Converting String into Number\nnew_train_data=train_data.apply(lambda x:pd.factorize(x)[0])\ntest_data=test_data.apply(lambda x:pd.factorize(x)[0])","df2e53e9":"X_train=new_train_data.drop('SalePrice',axis=1)\nY_train=train_data['SalePrice']\nX_test=test_data\nX_train.shape, Y_train.shape, X_test.shape","58031f13":"#Building the Model in Lasso Regression Model\nlasso_model=Lasso(alpha=1.0)\nlasso_model.fit(X_train,Y_train)\n\n#Testing the Model\nlasso_predict=lasso_model.predict(X_test)\n\n#Creating dataframe to store ID with prediction\nlasso_output=pd.DataFrame({'Id':test_id,'SalePrice':lasso_predict})\nprint(lasso_output)","4f8fba58":"print(lasso_model.score(X_train,Y_train))","3305a655":"#Building the model in Ridge Regression Model\nr_model=Ridge(alpha=1.0)\nr_model.fit(X_train,Y_train)\n\n#Testing the model\nr_predict=r_model.predict(X_test)\n\n#Creating dataframe to store ID with prediction\nr_output=pd.DataFrame({'Id':test_id,'SalePrice':r_predict})\nprint(r_output)","6df681df":"print(r_model.score(X_train,Y_train))","f96506e7":"output.to_csv(\"House_Price_Prediction2.csv\",index=False)\nprint(\"Completed\")","3fe58eb0":"**finding corelation**","e853d7a8":"**checking for outliers**","6e76b264":"**Preparing Training Data**","0ed42607":"**Preparing For Modelling**"}}