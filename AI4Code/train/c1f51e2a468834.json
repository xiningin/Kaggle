{"cell_type":{"1bf9508d":"code","75c14765":"code","e01e2812":"code","5d9c47b0":"code","c6bfad4d":"code","2f33516f":"code","3d90a133":"code","88c113d9":"code","2ccbcbdb":"code","dfbdb6f9":"code","2a24d6e2":"code","d9084f87":"code","be4f587c":"code","3a620865":"code","e6921476":"code","72501a3b":"code","f1359eb5":"code","9adbba17":"code","c302d293":"markdown","7e4a2ae5":"markdown","9a1d4d4c":"markdown","636c2c9e":"markdown","24076dec":"markdown","3358b08c":"markdown","90aaa1f4":"markdown","a7204fae":"markdown","7790fe7f":"markdown","d963b02e":"markdown","df405ccd":"markdown","bfc51f8b":"markdown","c4fa5cba":"markdown","33ccd664":"markdown","93f447db":"markdown","ef3be294":"markdown","c924decf":"markdown"},"source":{"1bf9508d":"#Importing Pytorch\nimport torch\n#Imporitng Numpy Library\nimport numpy as np","75c14765":"#List data\ndata = [[1, 2], [3, 4]]\n# Converting list into tensor\nx_data = torch.tensor(data)\n\nprint(type(data))\nprint(type(x_data))\nprint(x_data)","e01e2812":"#Converting data into numpy array\nnp_array = np.array(data)\n#Converting numpy array into tensor\nx_np = torch.from_numpy(np_array)","5d9c47b0":"x_ones = torch.ones_like(x_data) # retains the properties of x_data\nprint(f\"Ones Tensor: \\n {x_ones} \\n\")\nprint(type(x_ones))\nprint(x_ones.size())\nprint(\"\\n\")\n\nx_rand = torch.rand_like(x_data, dtype=torch.float) # overrides the datatype of x_data\nprint(f\"Random Tensor: \\n {x_rand} \\n\")\nprint(type(x_rand))\nprint(x_rand.size())","c6bfad4d":"shape = (2,3,)\nrand_tensor = torch.rand(shape)\nones_tensor = torch.ones(shape)\nzeros_tensor = torch.zeros(shape)\n\nprint(f\"Random Tensor: \\n {rand_tensor} \\n\")\nprint(f\"Ones Tensor: \\n {ones_tensor} \\n\")\nprint(f\"Zeros Tensor: \\n {zeros_tensor}\")\nprint(zeros_tensor.size())","2f33516f":"tensor = torch.rand(3,4)\n\nprint(tensor)\nprint(f\"Shape of tensor: {tensor.shape}\")\nprint(f\"Datatype of tensor: {tensor.dtype}\")\nprint(f\"Device tensor is stored on: {tensor.device}\")","3d90a133":"# We move our tensor to the GPU if available\nif torch.cuda.is_available():\n    tensor = tensor.to('cuda')","88c113d9":"tensor = torch.ones(4, 4)\nprint('First row: ', tensor[0])\nprint('First column: ', tensor[:, 0])\nprint('Last column:', tensor[..., -1])\ntensor[:,1] = 0 # Replacing second columns elements with 0\nprint(tensor)","2ccbcbdb":"t1 = torch.cat([tensor, tensor, tensor], dim=1) # Concatination along column (dim 1)\nprint(t1)","dfbdb6f9":"t1 = torch.cat([tensor, tensor, tensor], dim=0)  # Concatination along row (dim 0)\nprint(t1)","2a24d6e2":"# This computes the matrix multiplication between two tensors. y1, y2, y3 will have the same value\ny1 = tensor @ tensor.T\ny2 = tensor.matmul(tensor.T)\n\ny3 = torch.rand_like(tensor)\ntorch.matmul(tensor, tensor.T, out=y3)\n\nprint(tensor)\nprint(y1)\nprint(y2)\nprint(y3)","d9084f87":"# This computes the element-wise product. z1, z2, z3 will have the same value\nz1 = tensor * tensor\nz2 = tensor.mul(tensor)\n\nz3 = torch.rand_like(tensor)\ntorch.mul(tensor, tensor, out=z3)\n\nprint(tensor)\nprint(z1)\nprint(z2)\nprint(z3)","be4f587c":"agg = tensor.sum()\nagg_item = agg.item()\nprint(agg_item, type(agg_item))","3a620865":"print(tensor, \"\\n\")\ntensor.add_(5)\nprint(tensor)","e6921476":"t = torch.ones(5)\nprint(f\"t: {t}\")\nn = t.numpy()\nprint(f\"n: {n}\")","72501a3b":"t.add_(1)\nprint(f\"t: {t}\")\nprint(f\"n: {n}\")","f1359eb5":"n = np.ones(5)\nt = torch.from_numpy(n)","9adbba17":"np.add(n, 1, out=n)\nprint(f\"t: {t}\")\nprint(f\"n: {n}\")","c302d293":"## References\n\n1) https:\/\/pytorch.org\/tutorials\/beginner\/basics\/tensorqs_tutorial.html","7e4a2ae5":"### With random or constant values:\n\nshape is a tuple of tensor dimensions. In the functions below, it determines the dimensionality of the output tensor.","9a1d4d4c":"## Operations on Tensors\nOver 100 tensor operations, including arithmetic, linear algebra, matrix manipulation (transposing, indexing, slicing), sampling and more are comprehensively described here.\n\nEach of these operations can be run on the GPU (at typically higher speeds than on a CPU). If you\u2019re using Colab, allocate a GPU by going to Runtime > Change runtime type > GPU.\n\nBy default, tensors are created on the CPU. We need to explicitly move tensors to the GPU using .to method (after checking for GPU availability). Keep in mind that copying large tensors across devices can be expensive in terms of time and memory!","636c2c9e":"## Intializing the tensor\n### Directly from data\n\nTensors can be created directly from data. The data type is automatically inferred.","24076dec":"### Bridge with NumPy\nTensors on the CPU and NumPy arrays can share their underlying memory locations, and changing one will change the other.\n\n### Tensor to NumPy array","3358b08c":"### Arithmetic operations","90aaa1f4":"Changes in the NumPy array reflects in the tensor.","a7204fae":"### From another tensor\n\nThe new tensor retains the properties (shape, datatype) of the argument tensor, unless explicitly overridden.","7790fe7f":"### Standard numpy-like indexing and slicing:","d963b02e":"# Tensors\n\nTensors are a specialized data structure that are very similar to arrays and matrices. In PyTorch, we use tensors to encode the inputs and outputs of a model, as well as the model\u2019s parameters.\n\nTensors are similar to NumPy\u2019s ndarrays, except that tensors can run on GPUs or other hardware accelerators. In fact, tensors and NumPy arrays can often share the same underlying memory, eliminating the need to copy data (see Bridge with NumPy). Tensors are also optimized for automatic differentiation (we\u2019ll see more about that later in the Autograd section). If you\u2019re familiar with ndarrays, you\u2019ll be right at home with the Tensor API. If not, follow along!","df405ccd":"### In-place operations \nOperations that store the result into the operand are called in-place. They are denoted by a _ suffix. For example: x.copy_(y), x.t_(), will change x.\n\nNOTE: In-place operations save some memory, but can be problematic when computing derivatives because of an immediate loss of history. Hence, their use is discouraged.","bfc51f8b":"### NumPy array to Tensor","c4fa5cba":"### From a NumPy array\n\nTensors can be created from NumPy arrays (and vice versa - see Bridge with NumPy).","33ccd664":"### Attributes of a Tensor\n\nTensor attributes describe their shape, datatype, and the device on which they are stored.","93f447db":"### Single-element tensors \nIf you have a one-element tensor, for example by aggregating all values of a tensor into one value, you can convert it to a Python numerical value using item():","ef3be294":"A change in the tensor reflects in the NumPy array.","c924decf":"### Joining tensors \nYou can use torch.cat to concatenate a sequence of tensors along a given dimension. See also torch.stack, another tensor joining op that is subtly different from torch.cat."}}