{"cell_type":{"b7255d5e":"code","18332b96":"code","157132f1":"code","be9f4ebe":"code","f5fe1c53":"code","89431427":"code","59b2906b":"code","709fa794":"code","7ebaf668":"code","e6a561d9":"code","474d88a9":"code","1d59cc66":"code","dc471e40":"code","6f0f9acf":"code","a53ee9ac":"code","0a9e6302":"code","787c93ef":"code","6b23dd21":"code","dd544821":"code","b18a4703":"code","305c3274":"code","f7a0c7e3":"code","9f016e2f":"code","ffad991b":"code","eee89392":"code","2ba8ba09":"code","d9b366d9":"code","44859560":"code","bd3b69f1":"code","ad9915c6":"code","0cb3eddf":"code","c500eb9c":"markdown","23185dc6":"markdown","35a6a995":"markdown","79569e71":"markdown","5366e7fb":"markdown","35277320":"markdown","75dc165b":"markdown","18f66d49":"markdown","ee86f509":"markdown","c0a52b96":"markdown","93e4c7ea":"markdown","b28f5d17":"markdown","7d1bbd82":"markdown","578505d0":"markdown","20e2c51c":"markdown","1946467c":"markdown","c0e87e07":"markdown","f9682d0d":"markdown","f9ff1c1c":"markdown","223db291":"markdown","67cb2e64":"markdown","1016b805":"markdown","555b8c54":"markdown","8ce4cd79":"markdown","7cc58ab2":"markdown","f62ccc0b":"markdown","1106478a":"markdown","c8c5f32d":"markdown","d05564fe":"markdown","f6904383":"markdown","53ceac5f":"markdown","3abc9fed":"markdown","9ffe768e":"markdown","20416e8c":"markdown","18d2aab6":"markdown","9ca8d1d0":"markdown","c4f6e1d0":"markdown","885eadca":"markdown","1dde583b":"markdown","292830e9":"markdown"},"source":{"b7255d5e":"#pip install numpy==1.20.1","18332b96":"#pip install pylibjpeg pylibjpeg-libjpeg pydicom GDCM","157132f1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport ast\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\nimport pydicom as dicom\nimport cv2\n%matplotlib inline","be9f4ebe":"path = '\/kaggle\/input\/siim-covid19-detection\/'","f5fe1c53":"image_df = pd.read_csv(path + 'train_image_level.csv')\nstudy_df = pd.read_csv(path + 'train_study_level.csv')","89431427":"image_df.head()","59b2906b":"study_df.head()","709fa794":"image_df.info()","7ebaf668":"study_df.info()","e6a561d9":"print(f\"Number of records provided in image level csv is {len(image_df)}\")\nprint(f\"Number of records provided in study level csv is {len(study_df)}\")","474d88a9":"len(image_df.StudyInstanceUID.unique())","1d59cc66":"len(study_df.id.unique())","dc471e40":"dup_df = image_df[image_df.duplicated(['StudyInstanceUID'])==True]\nprint(f\"Number of duplicate rows are {len(dup_df)}\")","6f0f9acf":"dup_df.info()","a53ee9ac":"dup_df[dup_df.boxes.isnull() == True]['label'].value_counts()","0a9e6302":"len(study_df[(study_df.T == 0).all()])","787c93ef":"study_df['id'] = study_df['id'].str.split('_').apply(lambda x : x[0])\nstudy_df = study_df.rename({'id':'StudyInstanceUID'}, axis=1)\ntrain_df = pd.merge(image_df, study_df, on='StudyInstanceUID') \ntrain_df = train_df.sort_values(by=['StudyInstanceUID'])\ntrain_df = train_df.reset_index(drop=True)\ntrain_df.head()","6b23dd21":"train_df['Opacity'] = train_df['label'].str.count('opacity')","dd544821":"train_df.head()","b18a4703":"train_df['Opacity'].value_counts()","305c3274":"Opacity_Count = sorted(list(train_df['Opacity'].value_counts().index))\nfor count in Opacity_Count:\n    print('Opacity Count = {}\\n------------------------------'.format(count))\n    print(train_df[train_df['Opacity'] == count].iloc[:,4:8].sum())\n    print(' ')","f7a0c7e3":"for count in Opacity_Count:\n    Count_Series = train_df[train_df['Opacity'] == count].iloc[:,4:8].sum()\n    fig = plt.figure(figsize=(12,3))\n    sns.barplot(x=Count_Series.index, y=Count_Series.values\/sum(train_df['Opacity']==count))\n    plt.title('OpacityCount : {} '.format(count))\n    plt.plot();","9f016e2f":"def display_image(image_name, image_id, bounding_box, palet):\n    image_path = path + 'train\/' + image_name\n    img_id = image_id.replace('_image','.dcm')\n    for (dirpath, dirnames,filenames) in os.walk(image_path):\n        if os.path.exists(dirpath+'\/'+img_id) == True:\n            data_file = dicom.dcmread(dirpath+'\/'+img_id)\n            img = data_file.pixel_array\n            fig, ax = plt.subplots(1,1, figsize=(8,4))\n            if pd.isnull(bounding_box) == False:\n                boxes = ast.literal_eval(bounding_box)\n                for box in boxes:\n                    p = matplotlib.patches.Rectangle((box['x'], box['y']),\n                                                      box['width'], box['height'],\n                                                      ec=palet, fc='none', lw=1.5)\n                    ax.add_patch(p)\n            ax.set_title(image_id) \n            ax.imshow(img, cmap='gray')\n            plt.show()","ffad991b":"len(train_df[(train_df['Negative for Pneumonia']==1) & (train_df['boxes'].isnull() == False)])","eee89392":"temp_df  = train_df[(train_df['Typical Appearance']==1) & \n         (train_df.duplicated(['StudyInstanceUID'], keep=False))].sort_values(by=['StudyInstanceUID'])\nser1 = temp_df['StudyInstanceUID'].value_counts()\nnum_records = 0\nfor idx in ser1.index:\n    count = len(temp_df[(temp_df['StudyInstanceUID'] == idx) & (temp_df['boxes'].isnull() == False)])\n    if count > 1:\n        num_records = num_records + 1\nprint(f\"Number of Study instances with more than one image classified as Typical Appearance is {num_records}.\")\n        ","2ba8ba09":"temp_df  = train_df[(train_df['Indeterminate Appearance']==1) & \n         (train_df.duplicated(['StudyInstanceUID'], keep=False))].sort_values(by=['StudyInstanceUID'])\nser1 = temp_df['StudyInstanceUID'].value_counts()\nnum_records = 0\nfor idx in ser1.index:\n    count = len(temp_df[(temp_df['StudyInstanceUID'] == idx) & (temp_df['boxes'].isnull() == False)])\n    if count > 1:\n        num_records = num_records + 1\nprint(f\"Number of Study instances with more than one image classified as Indeterminate Appearance is {num_records}.\")\n        ","d9b366d9":"temp_df  = train_df[(train_df['Atypical Appearance']==1) & \n         (train_df.duplicated(['StudyInstanceUID'], keep=False))].sort_values(by=['StudyInstanceUID'])\nser1 = temp_df['StudyInstanceUID'].value_counts()\nnum_records = 0\nfor idx in ser1.index:\n    count = len(temp_df[(temp_df['StudyInstanceUID'] == idx) & (temp_df['boxes'].isnull() == False)])\n    if count > 1:\n        num_records = num_records + 1\nprint(f\"Number of Study instances with more than one image classified as Atypical Appearance is {num_records}.\")","44859560":"temp_df = train_df[(train_df['Negative for Pneumonia']==1)].sample(n=5)\nids = temp_df.id.to_list()\nnames = temp_df.StudyInstanceUID.to_list()\nboxes = temp_df.boxes.to_list()\npalet = 'r'\nfor image_name, image_id, box in zip(names, ids, boxes):\n    display_image(image_name, image_id, box, palet)","bd3b69f1":"temp_df = train_df[(train_df['Typical Appearance']==1) & (train_df['boxes'].isnull()==False)].sample(n=5)\nids = temp_df.id.to_list()\nnames = temp_df.StudyInstanceUID.to_list()\nboxes = temp_df.boxes.to_list()\npalet = 'b'\nfor image_name, image_id, box in zip(names, ids, boxes):\n    display_image(image_name, image_id, box, palet)","ad9915c6":"temp_df = train_df[(train_df['Indeterminate Appearance']==1) & (train_df['boxes'].isnull()==False)].sample(n=5)\nids = temp_df.id.to_list()\nnames = temp_df.StudyInstanceUID.to_list()\nboxes = temp_df.boxes.to_list()\npalet = 'g'\nfor image_name, image_id, box in zip(names, ids, boxes):\n    display_image(image_name, image_id, box, palet)","0cb3eddf":"temp_df = train_df[(train_df['Atypical Appearance']==1) & (train_df['boxes'].isnull()==False)].sample(n=5)\nids = temp_df.id.to_list()\nnames = temp_df.StudyInstanceUID.to_list()\nboxes = temp_df.boxes.to_list()\npalet = 'y'\nfor image_name, image_id, box in zip(names, ids, boxes):\n    display_image(image_name, image_id, box, palet)","c500eb9c":"The boxes column seems to have null values.","23185dc6":"# IMPORTS","35a6a995":"From the above results it seems that the image level csv has more rows than study level csv. This indicates chances of duplicates in the image_df. Let's explore this more by finding out the unique values under StudyInstanceUID column of the image_df.","79569e71":"Let's display the first 5 rows of both image_df and study_df.","5366e7fb":"# CONCLUSION\n\nFrom the above analysis following points can be concluded:-\n\n* **If, a study don't have opacity count 0 then it doesn't get classified as Negative for Pneumonia. In other words opacity count higher that 0 tells that the study has some conditions for pneumonia.**\n* **A study can have more than one image but it can be classified for a condition of pneumonia if it has atleast one image which has been clasified for that condition for pneumonia.**\n* **If no images in a study has bounding box then it is classified as Negative for Pneumonia.**","35277320":"Next, let's look at some images with Indeterminate Appearance.","75dc165b":"# ABOUT SIIM\n\n![image.png](attachment:d72d6dd9-7d44-4887-95f4-9f39975c84aa.png)\n\nSociety for Imaging Informatics in Medicine (SIIM) is the leading healthcare professional organization for those interested in the current and future use of informatics in medical imaging. The society's mission is to advance medical imaging informatics across the enterprise through education, research, and innovation in a multi-disciplinary community.","18f66d49":"Let's first define the input path.","ee86f509":"All, the necessary imports were made in the below cell.","c0a52b96":"Next let's merge the study_df and image_df by the **StudyInstanceUID** column. For this following steps needs to be performed:-\n* The value in the id column of study_df would be split by underscore and we will only keep the part of the value before the underscore.\n* The id column in the study_df would next be renamed as StudyInstanceUID.\n* Next the two dataframes will be merged by the column StudyInstanceUID.\n* Lastly the resultant dataframe will be sorted by StudyInstanceUID.\n","93e4c7ea":"So, from the above result it can be concluded that even in rows with duplicated StudyInstanceUID there is only one image which was classified as Indeterminate Appearance and that drove the decision behind classifying that study as Indeterminate Appearance.","b28f5d17":"From the above results it can be concluded that other than opacity 0 none of the other opacity classes have samples belonging to **Negative for Pneumonia**.","7d1bbd82":"Next let's try to find out how many duplicated StudyInstanceUID rows classified as Typical Appearance has more than one findings with positive for Typical Appearance.","578505d0":"Next, display the images which had Atypical Appearance.","20e2c51c":"So, from the above results the unique values in the StudyInstanceUID matches the number of unique values in the id column of the study_df. So, it indicates some of the ids in the image_df has the same StudyInstanceUID. Let's explore this more by finding out the duplicate rows in the image_df.","1946467c":"# ABOUT THE DATA\n\nIn this competition, we are identifying and localizing COVID-19 abnormalities on chest radiographs. This is an object detection and classification problem.\n\nA chest radiograph, called a chest X-ray, or chest film, is a projection radiograph of the chest used to diagnose conditions affecting the chest, its contents, and nearby structures. Chest radiographs are the most common film taken in medicine. \n\n<img align=\"centre\" src=\"https:\/\/post.healthline.com\/wp-content\/uploads\/2020\/08\/chest-x-ray_thumb-1-732x549.jpg\">\n\n## What is opacities in chest X-ray?\n\nOn a chest x-ray lung abnormalities will either present as areas of increased density or as areas of decreased density. Lung abnormalities with an increased density - also called opacities - are the most common.\n\n<img align=\"centre\" src=\"https:\/\/prod-images-static.radiopaedia.org\/images\/130233\/8a64788a65af3e40cfcadc3ff9125a_gallery.jpg\">","c0e87e07":"So, from the above results it can be concluded that the study_df doesnot contain the information of the x-ray scans with no findings.","f9682d0d":"Before staring the imports uncomment the below lines and run the for smooth execution of the script.","f9ff1c1c":"So, it seems all the rows in dup_df which has boxes as null have labels of none type. The images corresponding to those rows don't have any findings and don't have any conditions of covid pneumonia. This proves our assumption was true.","223db291":"Next, let's read the train_image_level and train_study_level csv in two dataframes.","67cb2e64":"Next let's display the value counts of the opacity column.","1016b805":"So, it seems the images which are marked as Negative for Pneumonia don't have bounding boxes. Now, let's see some images which were diagonosed with Negative for Pneumonia.","555b8c54":"# EXPLORATORY DATA ANALYSIS","8ce4cd79":"Let's try to do the same test for Indeterminate Appearance.","7cc58ab2":"Next let's make visualization of the above information.","f62ccc0b":"So, from the above results we can see the boxes has only 89 non-null values. The boxes column contains the bounding box information of the annomalies found in the chest xray scans. A null value here kind of hints that the images corresponding to that rows  may not have any conditions of covid pneumonia. ","1106478a":"So, from the above result it can be concluded that even in rows with duplicated StudyInstanceUID there is only one image which was classified as Typical Appearance and that drove the decision behind classifying that study as Typical Appearance.","c8c5f32d":"There are no columns with null values in the study_df. Next let's display the number records in both the dataframes.","d05564fe":"# LOAD DATA","f6904383":"Next, let's try the same test for  Atypical Appearance.","53ceac5f":"Next, lets look at some images which had Typical Appearance.","3abc9fed":"Next let's display the dataframe info for both the dataframes.","9ffe768e":"So, from the above result it can be concluded that even in rows with duplicated StudyInstanceUID there is only one image which was classified as Atypical Appearance and that drove the decision behind classifying that study as Atypical Appearance.","20416e8c":"Next let's see what more information the column named label under the image_df has to offer. Many of the labels has the word opacity in it. Let's get the count of the word opacity for each record and make a separate column to store the information.","18d2aab6":"So, there are 280 duplicate rows. Let's display the dup_df info to see if we can find some more information about the duplicates.","9ca8d1d0":"Next let's display some images of each category of findings. For this we will write a function which can extract the bounding boxes of the images from the boxes column of the train_df and draw boxes on the image. The colors used to draw the bounding box for each category is given below:-\n\n* 'r' ---> Negative for Pneumonia\n* 'b' ---> Typical Appearance\n* 'g' ---> Indeterminate Appearance\n* 'y' ---> Atypical Appearance","c4f6e1d0":"Next, let's find out the distribution of the findings for each opacity group.","885eadca":"The dataframe now looks as below.","1dde583b":"Next let's check if the study_df has any row with 0 in all the columns:- **Negative for Pneumonia, Typical Appearance, Indeterminate Appearance and Atypical Appearance**.","292830e9":"Before using this function to display some images, let's check if whether the images which are Negative for Pneumonia have bounding boxes."}}