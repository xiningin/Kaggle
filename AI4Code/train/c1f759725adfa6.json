{"cell_type":{"2ddbaa14":"code","95fe1808":"code","d254a8bd":"code","03f7f26b":"code","85454d20":"code","f9c94717":"code","9eb93f16":"code","0597a5c5":"code","64f5bdb5":"code","456d15d0":"code","9a237c90":"code","577f3eb3":"code","c687aa57":"code","e44dda7d":"code","8fff292d":"code","7a7f26ae":"code","0ea44ddb":"code","94bf13b3":"code","73721fec":"code","ea689e92":"code","904efaf9":"code","15b48e01":"code","cc282187":"code","c36b50f5":"code","15b6d029":"code","367d83fb":"code","b1c0bebc":"code","d4ca5a71":"code","c8dc2383":"code","56636cbd":"code","13f6928e":"code","87ba4873":"code","4c3c06e4":"code","51002a72":"markdown","d231cbf7":"markdown","37995328":"markdown","609f570a":"markdown","ef5cab47":"markdown","f5715ae8":"markdown","4165eaee":"markdown","df8bf35c":"markdown","d073f9f2":"markdown","d0996e82":"markdown","f7656857":"markdown"},"source":{"2ddbaa14":"import os\nimport time\nimport random\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_palette('Set1')\nplt.rcParams['figure.figsize'] = (20, 8)\nplt.rcParams['figure.dpi'] = 200\n\nimport warnings\nwarnings.filterwarnings('ignore')","95fe1808":"DATA_DIR = '..\/input\/titanic\/'\nos.listdir(DATA_DIR)\n\ntrain_df = pd.read_csv(DATA_DIR + 'train.csv')\ntest_df = pd.read_csv(DATA_DIR + 'test.csv')\nsub_df = pd.read_csv(DATA_DIR + 'gender_submission.csv')\n\nprint(' Train:', train_df.shape, ' Test:', test_df.shape, ' Sub:', sub_df.shape)","d254a8bd":"fig = sns.heatmap(train_df.isnull(), cbar=False, cmap='hot_r', yticklabels=[]).set_title('Missing Values', fontsize=24);","03f7f26b":"cols = ['Survived', 'Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked']\n\nn_rows, n_cols = 2, 3\nfig, axs = plt.subplots(n_rows, n_cols, figsize=(n_cols*6, n_rows*5))\nfig.suptitle('Count Plots', fontsize=26, y=1.05)\n\nsns.countplot(train_df['Survived'], ax=axs[0][0]).set_title('Survived count', fontsize=20)\nfor r in range(n_rows):\n    for c in range(n_cols):\n        if r!=0 or c!=0:\n            i = r*n_cols+c\n            ax = axs[r][c]\n            sns.countplot(train_df[cols[i]], hue=train_df['Survived'], ax=ax)\n            ax.set_title(cols[i]+' count', fontsize=20)\n            ax.legend(title='Survived', loc='upper right')\nplt.tight_layout()","85454d20":"fig, ax = plt.subplots(1, 2)\nfig.suptitle('Age Distribution', fontsize=26)\n\nf = sns.distplot(train_df['Age'], color='g', bins=40, ax=ax[0])\n\ng = sns.kdeplot(train_df['Age'].loc[train_df['Survived'] == 0], \n                shade=True, ax=ax[1], label='Not Survived')\ng = sns.kdeplot(train_df['Age'].loc[train_df['Survived'] == 1], \n                shade=True, ax=ax[1], label='Survived').set_xlabel('Age')","f9c94717":"fig, ax = plt.subplots(1, 2)\nfig.suptitle('Fare Distribution', fontsize=26)\n\nf = sns.distplot(train_df['Fare'], color='g', bins=40, ax=ax[0])\n\ng = sns.kdeplot(train_df['Fare'].loc[train_df['Survived'] == 0], \n                shade=True, ax=ax[1], label='Not Survived')\ng = sns.kdeplot(train_df['Fare'].loc[train_df['Survived'] == 1], \n                shade=True, ax=ax[1], label='Survived').set_xlabel('Fare')","9eb93f16":"sns.heatmap(train_df.corr(), annot=True, cmap='RdBu_r',\n            center=0, vmin=-1, vmax=1, linewidth=2, annot_kws={\"fontsize\":12},\n            square=False, cbar=True).set_title('Correlation matrix', fontsize=24);\nplt.yticks(rotation=0);","0597a5c5":"!pip install pycaret -q","64f5bdb5":"from pycaret.utils import version\nfrom pycaret.classification import *\nprint('Pycaret Verion:', version())","456d15d0":"clf = setup(train_df, target='Survived', session_id=42, log_experiment=True, experiment_name='titanic', silent=True)","9a237c90":"models = compare_models(n_select=25)","577f3eb3":"#### hacky\n\nplot_types = ['auc', 'threshold', 'pr', 'confusion_matrix', 'error', 'class_report', 'boundary', \n              'learning', 'calibration', 'vc', 'feature', 'gain'] # 'lift', 'rfe'\n\n# to plot same plots for different models\ndef plot_util(models, plot, title='Comparison plot'):\n    imgs = []\n    for model in models:\n        try: imgs.append(plt.imread(plot_model(model, plot=plot, save=True)))\n        except: imgs.append(np.ones((1100, 1600, 4)))\n\n    n_rows, n_cols = len(imgs)\/\/2, 2\n    fig, axs = plt.subplots(n_rows, n_cols, figsize=(n_cols*4, n_rows*3))\n    fig.suptitle(title, fontsize=12, y=0.89)\n    \n    for r in range(n_rows):\n        for c in range(n_cols):\n            i = r*n_cols+c\n            plt.subplot(n_rows, n_cols, i+1)\n            plt.imshow(imgs[i])\n            plt.axis('off')\n    fig.subplots_adjust(wspace=0, hspace=0)\n    \n# to plot all plots for same model\ndef model_all_plots(model, title='Model plot'):\n    imgs = []\n    for plot in plot_types:\n        try: imgs.append(plt.imread(plot_model(model, plot=plot, save=True)))\n        except: imgs.append(np.ones((1100, 1600, 4)))\n    \n    n_rows, n_cols = len(imgs)\/\/2, 2\n    fig, axs = plt.subplots(n_rows, n_cols, figsize=(n_cols*4, n_rows*3))\n    fig.suptitle(title, fontsize=12, y=0.89)\n\n    for r in range(n_rows):\n        for c in range(n_cols):\n            i = r*n_cols+c\n            plt.subplot(n_rows, n_cols, i+1)\n            plt.imshow(imgs[i])\n            plt.axis('off')\n    fig.subplots_adjust(wspace=0, hspace=0)","c687aa57":"# test plot\n\nplot_model(models[0], plot='dimension')\n\n# plot params\n\nsns.set_palette('Set1')\nplt.rcParams['axes.titlesize'] = 18\nplt.rcParams['savefig.dpi'] = 200\nplt.rcParams['savefig.bbox'] = 'tight'\nplt.rcParams['savefig.pad_inches'] = 0.3","e44dda7d":"plot_util(models, 'auc', 'ROC Curves Comparison Plot')","8fff292d":"plot_util(models, 'threshold', 'Thresholds Comparison Plot')","7a7f26ae":"plot_util(models, 'pr', 'Precision-Recall Curve Comparison Plot')","0ea44ddb":"plot_util(models, 'confusion_matrix', 'Confusion Matrix Comparison Plot')","94bf13b3":"plot_util(models, 'error', 'Class Prediction Error Comparison Plot')","73721fec":"plot_util(models, 'class_report', 'Classification Error Comparison')","ea689e92":"plot_util(models, 'boundary', 'Boundaries Comparison Plot')","904efaf9":"plot_util(models, 'learning', 'Learning Curve Comparison Plot')","15b48e01":"plot_util(models, 'calibration', 'Calibration Comparasion Plot')","cc282187":"plot_util(models, 'vc', 'Validation Curve Comparison Plot')","c36b50f5":"plot_util(models, 'feature', 'Feature Importance Comparison Plot')","15b6d029":"plot_util(models, 'lift', 'Lift Curve Comparison Plot')","367d83fb":"plot_util(models, 'gain', 'Cumulative Gain Curve Comparison Plot')","b1c0bebc":"plot_model(models[0], plot='manifold')","d4ca5a71":"plot_model(models[0], plot='dimension')","c8dc2383":"final_model = models[0]","56636cbd":"model_all_plots(final_model, 'Final Model Plots')","13f6928e":"interpret_model(final_model, plot='summary')","87ba4873":"predictions = predict_model(final_model, data=test_df)","4c3c06e4":"submission = predictions[['PassengerId', 'Label']].rename(columns={'Label': 'Survived'})\nsubmission.to_csv('submission.csv', index=False)\nprint('Saved submission.csv')\nsubmission.head()","51002a72":"---","d231cbf7":"Install the necessary libraries and setup the environment","37995328":"# Multi Model Benchmark","609f570a":"Various analytical plots of models from best to worst. <br\/>\n> If a metric\/plot is not possible for a particular model, it's left blank.","ef5cab47":"### Load Data","f5715ae8":"### Make predictions","4165eaee":"# Basic EDA","df8bf35c":"## The Best Model","d073f9f2":"# Titanic Models Benchmark<br\/><sup>Classification<\/sup>\n\n### **Dataset:**  [titanic](https:\/\/www.kaggle.com\/c\/titanic\/data)\n#### Regression Benchmark: [House Prices Models Benchmark](https:\/\/www.kaggle.com\/aravrs\/house-prices-models-benchmark)\n\n<sup style=\"color:red;\">Work in progess.<\/sup><br\/>\n\n---","d0996e82":"Compare various models and find the best model","f7656857":"## Analyse all models"}}