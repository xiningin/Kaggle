{"cell_type":{"9249bc53":"code","731fd7c4":"code","edc28839":"code","0a5007e2":"code","ae8a27c2":"code","80a18b77":"code","212c2ef0":"code","6784b49a":"code","4401df35":"code","8fd04bde":"code","4d98c630":"code","cb750487":"code","f9a18b21":"code","0ac67111":"code","3ec0272e":"code","06906658":"code","4b67e736":"code","a7dcfe8f":"markdown","402957c4":"markdown","2bce8108":"markdown"},"source":{"9249bc53":"import pandas as pd\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport sklearn \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","731fd7c4":"#kaggle\ntest = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/test_data.csv\", na_values = \"?\")\n\ntest = test.drop(columns = ['fnlwgt'])\ntest.head()","edc28839":"test.shape","0a5007e2":"#kaggle\ntrain = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/train_data.csv\", sep=r'\\s*,\\s*',engine='python', na_values=\"?\")\n\ntrain = train.drop(columns = ['Id', 'fnlwgt'])\ntrain.head()","ae8a27c2":"train.shape","80a18b77":"train.describe(exclude = [np.number])","212c2ef0":"train.describe()","6784b49a":"# dados faltantes por coluna\ntrain.isna().sum()","4401df35":"# distribui\u00e7\u00e3o de adultos por classe de atributo\nfig = make_subplots(rows=4, cols=2, subplot_titles = (\"Adults per Age\", \"% Adults per Workclass\", \"% Adults per Education\", \"% Adults per Marriage Status\", \"% Adults per Race\", \"% Adults per Sex\",  \"% Adults per Occupation\", \"% Adults per Relationship Status\"))\n\nfig.add_trace( \n    go.Histogram(x = train['age']),\n    row = 1, col = 1)\n\nfig.add_trace( \n    go.Histogram(x = train['workclass'], histnorm='percent'),\n    row = 1, col = 2).update_xaxes(categoryorder='total descending')\n\nfig.add_trace( \n    go.Histogram(x = train['education'], histnorm='percent'),\n    row = 2, col = 1).update_xaxes(categoryorder='total descending')\n\nfig.add_trace( \n    go.Histogram(x = train['marital.status'], histnorm='percent'),\n    row = 2, col = 2).update_xaxes(categoryorder='total descending')\n\nfig.add_trace( \n    go.Histogram(x = train['race'], histnorm='percent'),\n    row = 3, col = 1)\n\nfig.add_trace( \n    go.Histogram(x = train['sex'], histnorm='percent'),\n    row = 3, col = 2)\n\nfig.add_trace( \n    go.Histogram(x = train['occupation'], histnorm='percent'),\n    row = 4, col = 1)\n\nfig.add_trace( \n    go.Histogram(x = train['relationship'], histnorm='percent'),\n    row = 4, col = 2)\n\nfig.update_layout(height=1000, width=950, showlegend=False)\nfig.show()","8fd04bde":"# n\u00famero de adultos por pa\u00eds\ntrain[\"native.country\"].value_counts()","4d98c630":"#percentual de adultos por income\ntrain[\"income\"].value_counts(normalize = True)","cb750487":"from sklearn import preprocessing\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV","f9a18b21":"Xtrain2 = train.drop(columns = ['workclass', 'occupation', 'native.country']) \nYtrain2 = train.income\n\nXtrain2 = Xtrain2.apply(preprocessing.LabelEncoder().fit_transform)","0ac67111":"Xtest2 = test.drop(columns = ['workclass', 'occupation', 'native.country']) \n\nXtest2  = Xtest2.apply(preprocessing.LabelEncoder().fit_transform)","3ec0272e":"#definindo modelo\nknn = KNeighborsClassifier()\n\n# ajustando par\u00e2metros de Cross Validation e K's para teste\ngs = GridSearchCV(estimator = knn, param_grid = {'n_neighbors':[*range(10, 40)]}, cv=5)\n\n# aplicando dados de treino\ngs.fit(Xtrain2,Ytrain2)\n\n# evaluating model\ngs.best_score_ ","06906658":"gs.best_params_","4b67e736":"output = pd.DataFrame(Xtest2.index, columns = ['id'])\npredict = gs.predict(Xtest2)\noutput['income'] = predict\noutput.to_csv('submission.csv',index = False) ","a7dcfe8f":"# An\u00e1lise Explorat\u00f3ria","402957c4":"### Tratando dados categ\u00f3ricos","2bce8108":"#### PMR3508 - Aprendizado de M\u00e1quina e Reconhecimento de Padr\u00f5es\n\n#### Testando kNN com a base adult obtida no UCI repository. Iniciando com carregamento da base e com an\u00e1lise b\u00e1sica da base e dos atributos.\n\n#### Hash Code: PMR3508-2021-55"}}