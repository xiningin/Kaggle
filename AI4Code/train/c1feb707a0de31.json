{"cell_type":{"de4edcb1":"code","dc4d2f82":"code","5ffd250e":"code","c0673a88":"code","023149a9":"code","e4091953":"code","04cc0ec4":"code","f2159f25":"code","8943e9c8":"code","99e36253":"code","27b05ec0":"code","f5f65d7f":"code","1ffd8b69":"code","8847a9ec":"code","eab63b1e":"code","7aa87b06":"code","9dd17ef4":"code","a6fdf403":"code","aa64b443":"code","0b8d7f87":"code","247d3ae9":"code","e42aad7c":"code","7a25adf7":"code","0efb7194":"code","17ff34ba":"code","8b0057d9":"code","8a8bee8d":"code","6d7804cd":"code","93bb7801":"code","8a9fc7ef":"code","007b400b":"code","33c3e5fa":"markdown","1866adec":"markdown","96902218":"markdown","f7596c2d":"markdown","41a84e62":"markdown","67e70393":"markdown","6784f415":"markdown","3fa7bea9":"markdown","ee7c2c73":"markdown","6c8f43f9":"markdown","5526a6f6":"markdown","c268b680":"markdown","b7256455":"markdown","7589bedb":"markdown","846b9262":"markdown","4b426465":"markdown","b0489c44":"markdown","42ed122e":"markdown","88789550":"markdown","8be4fff7":"markdown","7c1a8b0e":"markdown","3c3423b5":"markdown","bcb65594":"markdown","cf24c162":"markdown","a959762a":"markdown","cfd5b550":"markdown","e8a607c1":"markdown","9624057c":"markdown","b10b609e":"markdown","c979cc39":"markdown","ebd23a54":"markdown"},"source":{"de4edcb1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport folium\nimport folium.plugins\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nimport plotly.plotly as py\nfrom sklearn.cluster import KMeans\nimport pylab as pl\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom bubbly.bubbly import bubbleplot \nfrom plotly.graph_objs import Scatter, Figure, Layout\nfrom __future__ import division\nimport datetime","dc4d2f82":"data = pd.read_csv(\"..\/input\/Crimes_2001_to_present_sample.csv\")","5ffd250e":"data.head()","c0673a88":"data.drop(['X Coordinate', 'Y Coordinate', 'Updated On', 'Location', 'Beat'], axis=1, inplace=True)","023149a9":"data['Date'] = pd.to_datetime(data.Date) \ndata['date'] = [d.date() for d in data['Date']]\ndata['time'] = [d.time() for d in data['Date']]\n\ndata['time'] = data['time'].astype(str)\nempty_list = []\nfor timestr in data['time'].tolist():\n    ftr = [3600,60,1]\n    var = sum([a*b for a,b in zip(ftr, map(int,timestr.split(':')))])\n    empty_list.append(var)\n    \ndata['seconds'] = empty_list","e4091953":"sub_data = data[['Ward', 'IUCR', 'District']]\nsub_data = sub_data.apply(lambda x:x.fillna(x.value_counts().index[0]))\nsub_data['IUCR'] = sub_data.IUCR.str.extract('(\\d+)', expand=True).astype(int)\nsub_data.head()","04cc0ec4":"N = range(1, 20)\nkmeans = [KMeans(n_clusters=i) for i in N]\nkmeans\nscore = [kmeans[i].fit(sub_data).score(sub_data) for i in range(len(kmeans))]\nscore\npl.plot(N,score)\npl.xlabel('Number of Clusters')\npl.ylabel('Score')\npl.title('Elbow Curve')\npl.show() ","f2159f25":"km = KMeans(n_clusters=4)\nkm.fit(sub_data)\ny = km.predict(sub_data)\nlabels = km.labels_\nsub_data['Cluster'] = y","8943e9c8":"fig = plt.figure(figsize=(12,10))\nax = fig.add_subplot(111, projection='3d')\nx = np.array(sub_data['Ward'])\ny = np.array(sub_data['IUCR'])\nz = np.array(sub_data['District'])\n\nax.set_xlabel('Ward')\nax.set_ylabel('IUCR')\nax.set_zlabel('District')\n\nax.scatter(x,y,z, marker=\"o\", c = sub_data[\"Cluster\"], s=60, cmap=\"jet\")\nax.view_init(azim=0)\n#print(ax.azim)\nplt.show()","99e36253":"sub_data['IUCR'] = (sub_data['IUCR'] - sub_data['IUCR'].min())\/(sub_data['IUCR'].max()-sub_data['IUCR'].min())\nsub_data['Ward'] = (sub_data['Ward'] - sub_data['Ward'].min())\/(sub_data['Ward'].max()-sub_data['Ward'].min())\nsub_data['District'] = (sub_data['District'] - sub_data['District'].min())\/(sub_data['District'].max()-sub_data['District'].min())","27b05ec0":"N = range(1, 20)\nkmeans = [KMeans(n_clusters=i) for i in N]\nkmeans\nscore = [kmeans[i].fit(sub_data).score(sub_data) for i in range(len(kmeans))]\nscore\npl.plot(N,score)\npl.xlabel('Number of Clusters')\npl.ylabel('Score')\npl.title('Elbow Curve')\npl.show()\n\ndel sub_data['Cluster']","f5f65d7f":"km = KMeans(n_clusters=3)\nkm.fit(sub_data)\ny = km.predict(sub_data)\nlabels = km.labels_\nsub_data['Clusters'] = y","1ffd8b69":"fig = plt.figure(figsize=(12,10))\nax = fig.add_subplot(111, projection='3d')\nx = np.array(sub_data['Ward'])\ny = np.array(sub_data['IUCR'])\nz = np.array(sub_data['District'])\n\nax.set_xlabel('Ward')\nax.set_ylabel('IUCR')\nax.set_zlabel('District')\n\nax.scatter(x,y,z, marker=\"o\", c = sub_data[\"Clusters\"], s=60, cmap=\"winter\")\nax.view_init(azim=0)\n#print(ax.azim)\nplt.show()","8847a9ec":"data['IUCR'] = data.IUCR.str.extract('(\\d+)', expand=True).astype(int)\nfigure = bubbleplot(dataset=data, x_column='Latitude', y_column='Longitude', \n    bubble_column='Primary Type', time_column='Year',size_column='IUCR',color_column='District', \n    x_title=\"Latitude\", y_title=\"Longitude\", title='District wise distribution of Crime types in Chicago',\n    x_logscale=False)\n\niplot(figure, config={'scrollzoom': True})","eab63b1e":"#Normalizing the time to be between 0 and 1, this way lower values would indicate midnight to early morning\n#medium values would indicate the afternoon sessions, and high values would indicate evening and night time\n#also kmeans then won't cluster just based on the time as the range of euclidean distances in time column will be very high without scaling\ndata['Normalized_time'] = (data['seconds'] - data['seconds'].min())\/(data['seconds'].max()-data['seconds'].min())","7aa87b06":"sub_data1 = data[['IUCR', 'Normalized_time', 'District']]\n#sub_data1['IUCR'] = sub_data1.IUCR.str.extract('(\\d+)', expand=True).astype(int)\nsub_data1['IUCR'] = (sub_data1['IUCR'] - sub_data1['IUCR'].min())\/(sub_data1['IUCR'].max()-sub_data1['IUCR'].min())\nsub_data1['District'] = (sub_data1['District'] - sub_data1['District'].min())\/(sub_data1['District'].max()-sub_data1['District'].min())\nsub_data1.head()","9dd17ef4":"N = range(1, 20)\nkmeans = [KMeans(n_clusters=i) for i in N]\nkmeans\nscore = [kmeans[i].fit(sub_data1).score(sub_data1) for i in range(len(kmeans))]\nscore\npl.plot(N,score)\npl.xlabel('Number of Clusters')\npl.ylabel('Score')\npl.title('Elbow Curve')\npl.show()","a6fdf403":"km = KMeans(n_clusters=4)\nkm.fit(sub_data1)\ny = km.predict(sub_data1)\nlabels = km.labels_\nsub_data1['Clusters'] = y\nsub_data1.head()","aa64b443":"fig = plt.figure(figsize=(12,10))\nax = fig.add_subplot(111, projection='3d')\nx = np.array(sub_data1['Normalized_time'])\ny = np.array(sub_data1['IUCR'])\nz = np.array(sub_data1['District'])\n\nax.set_xlabel('Time')\nax.set_ylabel('IUCR')\nax.set_zlabel('District')\n\nax.scatter(x,y,z, marker=\"o\", c = sub_data1[\"Clusters\"], s=60, cmap=\"jet\")\nax.view_init(azim=-20)\n#print(ax.azim)\nplt.show()","0b8d7f87":"km = KMeans(n_clusters=5)\nkm.fit(sub_data1)\ny = km.predict(sub_data1)\nlabels = km.labels_\nsub_data1['Clusters'] = y\nsub_data1.head()","247d3ae9":"#Plotting the results of 5 clusters\nfig = plt.figure(figsize=(12,10))\nax = fig.add_subplot(111, projection='3d')\nx = np.array(sub_data1['Normalized_time'])\ny = np.array(sub_data1['IUCR'])\nz = np.array(sub_data1['District'])\n\nax.set_xlabel('Time')\nax.set_ylabel('IUCR')\nax.set_zlabel('District')\n\nax.scatter(x,y,z, marker=\"o\", c = sub_data1[\"Clusters\"], s=60, cmap=\"jet\")\nax.view_init(azim=-20)\n#print(ax.azim)\nplt.show()","e42aad7c":"# convert dates to pandas datetime format\ndata.Date = pd.to_datetime(data.Date, format='%m\/%d\/%Y %I:%M:%S %p')\n# setting the index to be the date will help us a lot later on\ndata.index = pd.DatetimeIndex(data.Date)","7a25adf7":"plt.figure(figsize=(11,6))\ndata.resample('BM').size().plot(legend=False)\nplt.title('Number of crimes per month (2001 - 2016)')\nplt.xlabel('Months')\nplt.ylabel('Number of crimes')\nplt.show()","0efb7194":"crimes_count_date = data.pivot_table('ID', aggfunc=np.size, columns='Primary Type', index=data.index.date, fill_value=0)\ncrimes_count_date.index = pd.DatetimeIndex(crimes_count_date.index)\nplo = crimes_count_date.rolling(365).sum().plot(figsize=(30, 30), subplots=True, layout=(-1, 3), sharex=False, sharey=False)","17ff34ba":"days = ['Monday','Tuesday','Wednesday',  'Thursday', 'Friday', 'Saturday', 'Sunday']\ndata.groupby([data.index.dayofweek]).size().plot(kind='barh', figsize=(5, 6))\nplt.ylabel('Days of the week')\nplt.yticks(np.arange(7), days)\nplt.xlabel('Number of crimes')\nplt.title('Number of crimes by day of the week')\nplt.show()","8b0057d9":"plt.figure(figsize=(8,10))\ndata.groupby([data['Primary Type']]).size().sort_values(ascending=True).plot(kind='barh')\nplt.title('Number of crimes by type')\nplt.ylabel('Crime Type')\nplt.xlabel('Number of crimes')\nplt.show()","8a8bee8d":"hour_by_location = data.pivot_table(values='ID', index='Location Description', columns=data.index.hour, aggfunc=np.size).fillna(0)\nhour_by_type     = data.pivot_table(values='ID', index='Primary Type', columns=data.index.hour, aggfunc=np.size).fillna(0)\ndayofweek_by_type = data.pivot_table(values='ID', index='Primary Type', columns=data.index.dayofweek, aggfunc=np.size).fillna(0)\nlocation_by_type  = data.pivot_table(values='ID', index='Location Description', columns='Primary Type', aggfunc=np.size).fillna(0)","6d7804cd":"from sklearn.cluster import AgglomerativeClustering as AC\n\ndef scale_df(df,axis=0):\n    return (df - df.mean(axis=axis)) \/ df.std(axis=axis)\n\n\ndef plot_hmap(df, ix=None, cmap='PuRd'):\n    if ix is None:\n        ix = np.arange(df.shape[0])\n    plt.imshow(df.iloc[ix,:], cmap=cmap)\n    plt.colorbar(fraction=0.03)\n    plt.yticks(np.arange(df.shape[0]), df.index[ix])\n    plt.xticks(np.arange(df.shape[1]))\n    plt.grid(False)\n    plt.show()\n    \ndef scale_and_plot(df, ix = None):\n    df_marginal_scaled = scale_df(df.T).T\n    if ix is None:\n        ix = AC(4).fit(df_marginal_scaled).labels_.argsort()\n    cap = np.min([np.max(df_marginal_scaled.as_matrix()), np.abs(np.min(df_marginal_scaled.as_matrix()))])\n    df_marginal_scaled = np.clip(df_marginal_scaled, -1*cap, cap)\n    plot_hmap(df_marginal_scaled, ix=ix)","93bb7801":"#CMAP = 'PuRd'\nplt.figure(figsize=(60,30))\nscale_and_plot(hour_by_location)","8a9fc7ef":"#CMAP = 'OrRd'\nplt.figure(figsize=(20, 10))\nscale_and_plot(hour_by_type)","007b400b":"def normalize(df):\n    result = df.copy()\n    for feature_name in df.columns:\n        max_value = df[feature_name].max()\n        min_value = df[feature_name].min()\n        result[feature_name] = (df[feature_name] - min_value) \/ (max_value - min_value)\n    return result\n\ndf = normalize(location_by_type)\nix = AC(3).fit(df.T).labels_.argsort() \nplt.figure(figsize=(27, 12))\nplt.imshow(df.T.iloc[ix,:], cmap='Blues')\nplt.colorbar(fraction=0.03)\nplt.xticks(np.arange(df.shape[0]), df.index, rotation='vertical')\nplt.yticks(np.arange(df.shape[1]), df.columns)\nplt.title('Normalized location frequency for each crime')\nplt.grid(False)\nplt.show()","33c3e5fa":"**Doing some date time preprocessing**","1866adec":"**Creating a subset of our dataset with IUCR codes , District codes and Ward codes**\n**IUCR stands for Illinois Uniform Crime Reporting, it encodes different nature of crime using a specific code table; the list of IUCR codes for different crimes can be found [here](https:\/\/data.cityofchicago.org\/Public-Safety\/Chicago-Police-Department-Illinois-Uniform-Crime-R\/c7ck-438e\/data). The District codes and Ward codes can be found [here](https:\/\/www.cityofchicago.org\/city\/en\/about\/wards.html) and [here](https:\/\/home.chicagopolice.org\/community\/districts\/)**","96902218":"**Now let's plot some more interesting graphs to get  further insights into the data we have in hand. After that we will move on to the date time serializing process and clustering them on that basis. Hopefully after that we will be able to predict crimes by either of the two approaches:**\n1. **Minimizing the distance between a crime occurrence and the centroid of a cluster**\n2. **Performing regression analysis on the identified clusters and fitting crimes to the best fit line**\n","f7596c2d":"**From the looks of it, the overall crime scene seems to be decreasing from 2001 onwards, as the graph consistently follows a periodic and decreasing pattern. However, this does'nt provide the entire picture and to get a general idea its always better to plot individual crime patterns and then investigate as to what has decreased or increased over the years.**","41a84e62":"**Before getting into clustering, some things to note: For finding the optimal number of clusters, I will go with the elbow rule, which basically states that on the curve of score vs number of clusters, the optimal point is that where the first bend(or elbow) occurs primarily because after that the the score eventually decreases to zero implying each point starts behaving as its own cluster. However for the purpose of KMeans we will have to normalize the data first as without it, KMeans will simply cluster the data based on the euclidean distances of IUCR code as it has a larger range of values than District or Ward codes. I will show both the clusters with and without normalization, so that you can see the results for yourself**","67e70393":"**Ok, so without normalizing the data, the best number of cluster is around 4, so let's try that out**","6784f415":"![](http:\/\/freechicagowalkingtours.com\/wp-content\/uploads\/2016\/09\/Crime-Scene-Banner-Size-1024x397.jpg)","3fa7bea9":"**The optimal number of clusters seem to be around 4-5, let's try it out with 4 first, and then we will plot the clusters on a 3d plot for 5 clusters as well and see how it turns out.**","ee7c2c73":"**Seems like Theft and Battery charges outnumbers the rest in Chicago, however it will not be 100% correct to comment that these are the only two major crimes that plague the city of Chicago as most crime incidents go unreported or unheard of , or probably some incidents got left out in the process of data collection, we will never know!**","6c8f43f9":"**The clustering does'nt seems to be based solely on the euclidean distances of IUCR codes now, which is good! Next up, lets check out the distribution of crime type district wise using an animated bubble chart which can be easily plotted using the package bubbly. More of bubbly's use [in this kernel](https:\/\/www.kaggle.com\/aashita\/guide-to-animated-bubble-charts-using-plotly).Click on autoscale in case the data is not properly distributed**","5526a6f6":"**Let's find the optimum clusters again**","c268b680":"**The trends are getting pretty boring and repetitive or predictable, we all know that all crimes are not the same, some have a higher chance of occuring or be more frequent in occurence like theft\/robbery than murder or homicide, it would be really cool if we could visualize some of the answers to questions like: Is theft or burglary is more likely to occur at a weekday compared to a weekend? Are they more likely to happen in the morning vs evening or late night ? are they more likely to occur in a street vs a bar? We will get to work on it with the pivot function of pandas.\n**","b7256455":"**So much of clustering going on, what do these clusters even indicate??? Hopefully we will get to know that in the next section!**\n![](https:\/\/thumb1.shutterstock.com\/display_pic_with_logo\/173932116\/739897180\/stock-vector-confused-kid-face-expression-cute-cartoon-girl-illustration-739897180.jpg)","7589bedb":"**In this kernel we will try and exploit the information made available to kagglers regarding crimes in Chicago. The dataset contains records from 2001 to present day, however it only has 65-66k records compared to the original dataset which has around 6.6M records. If anyone is interested in analyzing the original dataset, it can be found [here](https:\/\/data.cityofchicago.org\/Public-Safety\/Crimes-2001-to-present\/ijzp-q8t2). Nonetheless, 65k instances should be a fair amount of information to give us some good insights into the crime scene in Chicago, so let's get started by importing the necessary libraries first.**","846b9262":"**Let's do the clustering now based on Time, District and Primary Type(as per IUCR codes). Here also we will scale the time in seconds to be between 1 and 0, with 0.5 representing the time 12:00 noon(else clusters will only be based on time segments), that way the clusters will be divided into sections of morning, afternoon and night.**","4b426465":"**For the purpose of clustering, we will be doing a kmeans clustering on:**\n1. **First, we will cluster the data according to the District, Ward and Primary Type(as per IUCR code), i feel it will help us identify which portions of the city experience criminal attacks of which type.**\n2. **Then we shall cluster it on the basis of Time, District and Primary Type(as per IUCR code), it should help us classify which districts are more prone to what sort of attacks at what time etc.**                                                                                                                                                                                                                                                                                      \n3.**At last we will cluster according to the Time, Date and Primary Type(as per IUCR code) which should help us answer questions like which sort of attacks the city are most prone to, say on New Year's Eve and at what time.**\n**The KMeans problem is solved using Lloyd's algorithm. In practice, the k-means algorithm is very fast (one of the fastest clustering algorithms available), but it falls in local minima. That\u2019s why it can be useful to restart it several times.**\n\n**If you want to know more about KMeans and Lloyd's algorithms, go here [KMeans](https:\/\/en.wikipedia.org\/wiki\/K-means_clustering) and here [Lloyd](https:\/\/en.wikipedia.org\/wiki\/Lloyd%27s_algorithm)**","b0489c44":"![](https:\/\/img.ifun01.com\/images\/2016\/12\/31\/18\/2414_afxSAU_zvZ7fg.jpg!r800x0.jpg)","42ed122e":"**As expected, KMeans simply clusters the data based on the euclidean distances of the IUCR codes. So let's fix that by normalizing the data**","88789550":"**Let's check out the clustering by setting n_clusters=5**","8be4fff7":"**From the plot above, we can see that places like Police Facility or vehicle parking lots experience attacks mostly during the early morning(like around 3-5am, indicated by the dark purple coloring of the plot), Government buildings, Schools, College\/University campus, Hospitals  all come under attack mostly during the midday timings(mostly 9-14). Fitting a regression line on such clusters would prove to be quite useful in predicting the next crime about to take place in such sites!**","7c1a8b0e":"**Well I guess nothing special out here, almost all the days experience the same number of crimes, the Friday count being slightly higher than the others, but still nothing significant to come to any conclusion.**","3c3423b5":"Notebook to be updated!","bcb65594":"**Let's run  KMeans on the above data now! Like before we shall start off by plotting the elbow curve to find the optimal number of clusters**","cf24c162":"**The elbow seems more close to being 3 now! Let's run KMeans again on the normalized data.**","a959762a":"**For the purpose of plotting the heatmaps we will first do an AgglomerativeClustering on our dataset in order to group the rows in to meaningful clusters and the use those labels for the purpose of plotting our heatmaps. We will also scale the row values(z-scale) to have a mean of zero and unit variance and then use it for plotting our heatmaps.**","cfd5b550":"**Dropping some unnecessary or redundant columns**","e8a607c1":"**From the plots above, Battery charges were at it's least in 2016, Weapons Violation also decreased in 2016, although it did started rising after that, Theft was at it's lowest too in 2016, Stalking charges were very high though, Public Peace Violation was decreasing etc. Overall, positive takeaway is that most of the criminal charges were decreasing as 2016 approached compared to the previous years, although a few did rise significantly, like Stalking, Sex offences, Offences involving children, Interference with Public Officers etc. Seems like as the years advanced, victims were mostly from the feminine side or children side, maybe because as law enforcements cracked down severely on HVT's, these people became soft\/easy targets for the offenders.**","9624057c":"**Loading the data now! Plus a quick peek into the first few instances to see what it looks like**","b10b609e":"![](https:\/\/www.robotlab.com\/hs-fs\/hub\/314265\/file-2565558338-jpg\/images\/Blog\/MathJoke.jpg?t=1532994469695&width=650&name=MathJoke.jpg)","c979cc39":"**Observations:**\n1. **To be added soon, have to make sure first whether the clusters are ok or flawed; any inputs from your side would surely be appreciated.**","ebd23a54":"**Domestic violence, offense involving children, sex offense etc are all likely to occur late night at around 12 -14, burglary, theft mostly occuring early morning to mid day at around 8-12, probably because people are in their offices, children at school and broaddaylight is the least time someone would expect their house to get robbed, Homicide occuring mostly early in the morning like at around 2-3AM, probably because there wont be much people hanging around on the streets or whatever place it is at that time, leaving little to no witnesses. Next up, we will try and visualize what sort of crimes mostly occur in which places.**"}}