{"cell_type":{"0aec2be7":"code","66e5277b":"code","8c4dd5c4":"code","35606192":"code","9d334ab2":"code","d00743b0":"code","157a21dc":"code","c88f6956":"code","24e068d1":"code","923ee155":"code","8040157a":"code","fb31ca63":"code","9fc28679":"code","927cc517":"code","d8964eb8":"code","d7b98570":"code","683bd5a1":"code","265fa5cf":"code","ed31c76c":"code","da027a2f":"code","9b4c550f":"code","691a5d9e":"code","a1f01b22":"code","a066851e":"code","7b2dd980":"code","35d3d317":"code","a8e78451":"code","60f6b57b":"code","f8cf2da8":"code","0727f4bc":"code","4790a531":"code","349ed3aa":"code","07e23905":"code","ea3fe898":"code","335f64fe":"code","a44862c4":"code","bbeb958e":"code","1a8d6cfd":"code","3fdc1a96":"code","200852d1":"markdown","e761f00c":"markdown","f805e37d":"markdown","27735f2b":"markdown","1997f7b0":"markdown","4c320414":"markdown","2d39b378":"markdown","3eca513c":"markdown","6e980cf6":"markdown"},"source":{"0aec2be7":"%matplotlib inline","66e5277b":"!pip install --upgrade xgboost\nimport xgboost as xgb\nxgb.__version__\n","8c4dd5c4":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\nimport gc\nimport matplotlib.pyplot as plt\nimport shap\n\n# load JS visualization code to notebook\nshap.initjs()","35606192":"\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d334ab2":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest  = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv')","d00743b0":"test.shape","157a21dc":"columns = test.columns[1:]\ntarget = train['target'].values","c88f6956":"train_oof = np.zeros((300000,))\ntest_preds = 0\ntrain_oof.shape","24e068d1":"## Best hyperparameters from the following notebook: https:\/\/www.kaggle.com\/hamzaghanmi\/xgboost-hyperparameter-tuning-using-optuna\n\nBest_trial= {'lambda': 0.0030282073258141168, \n             'alpha': 0.01563845128469084, \n             'colsample_bytree': 0.55,\n             'subsample': 0.7,\n             # 'n_estimators': 4000, \n             'learning_rate': 0.01,\n             'max_depth': 15,\n             'random_state': 2020, \n             'min_child_weight': 257,\n             'tree_method':'gpu_hist',\n             'predictor': 'gpu_predictor'}","923ee155":"test = xgb.DMatrix(test[columns])","8040157a":"NUM_FOLDS = 8\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train, target))):\n        #print(f'Fold {f}')\n        train_df, val_df = train.iloc[train_ind][columns], train.iloc[val_ind][columns]\n        train_target, val_target = target[train_ind], target[val_ind]\n        \n        train_df = xgb.DMatrix(train_df, label=train_target)\n        val_df = xgb.DMatrix(val_df, label=val_target)\n        \n        model =  xgb.train(Best_trial, train_df, 1500)\n        temp_oof = model.predict(val_df)\n        temp_test = model.predict(test)\n\n        train_oof[val_ind] = temp_oof\n        test_preds += temp_test\/NUM_FOLDS\n        \n        print(mean_squared_error(temp_oof, val_target, squared=False))","fb31ca63":"0.6959799893005467\n","9fc28679":"mean_squared_error(train_oof, target, squared=False)\n","927cc517":"np.save('train_oof', train_oof)\nnp.save('test_preds', test_preds)","d8964eb8":"%%time\nshap_preds = model.predict(test, pred_contribs=True)","d7b98570":"test  = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')\n","683bd5a1":"# summarize the effects of all the features\nshap.summary_plot(shap_preds[:,:-1], test[columns])\n","265fa5cf":"shap.summary_plot(shap_preds[:,:-1], test[columns], plot_type=\"bar\")\n","ed31c76c":"test = xgb.DMatrix(test[columns])","da027a2f":"%%time\nshap_interactions = model.predict(test, pred_interactions=True)","9b4c550f":"def plot_top_k_interactions(feature_names, shap_interactions, k):\n    # Get the mean absolute contribution for each feature interaction\n    aggregate_interactions = np.mean(np.abs(shap_interactions[:, :-1, :-1]), axis=0)\n    interactions = []\n    for i in range(aggregate_interactions.shape[0]):\n        for j in range(aggregate_interactions.shape[1]):\n            if j < i:\n                interactions.append(\n                    (feature_names[i] + \"-\" + feature_names[j], aggregate_interactions[i][j] * 2))\n    # sort by magnitude\n    interactions.sort(key=lambda x: x[1], reverse=True)\n    interaction_features, interaction_values = map(tuple, zip(*interactions))\n    plt.bar(interaction_features[:k], interaction_values[:k])\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.show()","691a5d9e":"plot_top_k_interactions(columns, shap_interactions, 10)\n","a1f01b22":"del shap_interactions, shap_preds\ngc.collect()\ngc.collect()","a066851e":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest  = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv')","7b2dd980":"train['cont13_cont4'] = train['cont13']*train['cont4']\ntrain['cont13_cont11'] = train['cont13']*train['cont11']\ntrain['cont13_cont7'] = train['cont13']*train['cont7']\ntrain['cont13_cont2'] = train['cont13']*train['cont2']\ntrain['cont13_cont10'] = train['cont13']*train['cont10']\n\ntest['cont13_cont4'] = test['cont13']*test['cont4']\ntest['cont13_cont11'] = test['cont13']*test['cont11']\ntest['cont13_cont7'] = test['cont13']*test['cont7']\ntest['cont13_cont2'] = test['cont13']*test['cont2']\ntest['cont13_cont10'] = test['cont13']*test['cont10']","35d3d317":"train.shape","a8e78451":"columns = test.columns[1:]\ntarget = train['target'].values","60f6b57b":"train_oof_2 = np.zeros((300000,))\ntest_preds_2 = 0\ntrain_oof_2.shape","f8cf2da8":"test = xgb.DMatrix(test[columns])","0727f4bc":"Best_trial= {'lambda': 0.0030282073258141168, \n             'alpha': 0.01563845128469084, \n             'colsample_bytree': 0.55,\n             'subsample': 0.7,\n             # 'n_estimators': 4000, \n             'learning_rate': 0.01,\n             'max_depth': 15,\n             'random_state': 2020, \n             'min_child_weight': 257,\n             'tree_method':'gpu_hist',\n             'predictor': 'gpu_predictor'}","4790a531":"kf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train, target))):\n        #print(f'Fold {f}')\n        train_df, val_df = train.iloc[train_ind][columns], train.iloc[val_ind][columns]\n        train_target, val_target = target[train_ind], target[val_ind]\n        \n        train_df = xgb.DMatrix(train_df, label=train_target)\n        val_df = xgb.DMatrix(val_df, label=val_target)\n        \n        model =  xgb.train(Best_trial, train_df, 1600)\n        temp_oof = model.predict(val_df)\n        temp_test = model.predict(test)\n\n        train_oof_2[val_ind] = temp_oof\n        test_preds_2 += temp_test\/NUM_FOLDS\n        \n        print(mean_squared_error(temp_oof, val_target, squared=False))","349ed3aa":"0.6961520115102843","07e23905":"mean_squared_error(train_oof_2, target, squared=False)\n","ea3fe898":"mean_squared_error(0.6*train_oof+0.4*train_oof_2, target, squared=False)\n","335f64fe":"np.save('train_oof_2', train_oof_2)\nnp.save('test_preds_2', test_preds_2)","a44862c4":"0.6959956268557288","bbeb958e":"sub['target'] = test_preds\nsub.to_csv('submission.csv', index=False)","1a8d6cfd":"sub['target'] = test_preds_2\nsub.to_csv('submission_2.csv', index=False)","3fdc1a96":"sub['target'] = 0.6*test_preds+0.4*test_preds_2\nsub.to_csv('submission_average.csv', index=False)","200852d1":"It took less than 10 minutes to calculate these values. On CPU this woudl take a few days to compute.\n\nNow let's take a look at what are the top interactions in this dataset.","e761f00c":"Next, we calculate the SHAP values for the test set.","f805e37d":"Next, we'll calculate SHAP values for featue interactions. There will be 15x15x200,000 + 200,000 numbers that need to be computed. ","27735f2b":"Now let's do some plots of these values.","1997f7b0":"As you can see, it only took less than two minutes to calcualte these values. On the CPU in Kaggle environment it would take many hours. ","4c320414":"Interesting, it seems that the cont13 feature interacts a lot with the others in the dataset.\n\n","2d39b378":"We'll now try to create additional features on teh basis of these featue interactions, and see how well the new model performs.","3eca513c":"At this point the Kaaggle Docker environment does not support XGBoost 1.3+, so we'll have to install it manually.","6e980cf6":"In this notebook we'll explore feature importance using SHAP values. SHAP values are the most mathematically consistent way for getting feature importances, and they work particulalry nicely with the tree-based models. Unfortunately, calculating SHAP values is an **extremely** resource intensive process. However, starting with XGBoost 1.3 it is possible to calcualte these values on GPUs, whcih speeds up the process by a factor of 20X - 50X compared to calculating the same on a CPU. Furthermore, it is also possible to calculate SHAP values for feature interactions. The GPU speedup for those is even more dramatic - it takes a few minutes, as opposed to days or even longer on a CPU."}}