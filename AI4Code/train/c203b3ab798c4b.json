{"cell_type":{"8f35e7c0":"code","d57e9a11":"code","27e51a1e":"code","25c72d35":"code","5977cb59":"code","095a2aa4":"code","404c1252":"code","f1122dfb":"code","4536a25d":"code","dd39d289":"code","f4210356":"code","50749082":"code","857fdcc5":"code","539a23f2":"code","43cb0b53":"code","b6c16f1f":"code","5f5266d5":"code","0596e2c4":"code","62f8d666":"code","ae24fc69":"code","da375f8d":"code","153d3047":"code","90c08adf":"code","c5007b0f":"code","eba980d3":"code","ad8e0aa0":"code","64c7e18b":"code","bea57004":"code","cc67774a":"code","9d58ff8b":"code","53aae374":"code","60ed6e4d":"code","d66bfdda":"code","0ff85c3f":"code","94636b24":"code","a0a0934c":"code","f7153537":"code","f0e63e4c":"code","1973d880":"code","3629f678":"code","642e7db5":"code","5ca0a878":"code","51aec7f5":"code","abde40f8":"code","0619bf20":"code","db17943c":"code","8af4ac11":"code","75d19f4a":"code","b33ec00b":"code","6c089615":"code","eca3e8f6":"code","6a625896":"code","6da55fde":"code","88384c7c":"code","9a8f25db":"code","a5c9e2d6":"code","ef70d742":"code","efcdd3d6":"code","059de337":"code","7f988313":"code","c7d12851":"code","27f86381":"code","c5e09efd":"code","b8b9189e":"code","35a65989":"code","66c9e16d":"code","5ba5f2e7":"code","0cdfb2ea":"code","ff2a8ed6":"code","7d5c0bc2":"code","9faf0ca7":"code","ad4a9815":"code","a256dd6b":"code","0c2b190f":"code","eda0d880":"markdown","c4c03a76":"markdown","123be0db":"markdown","e2a5eaf8":"markdown","9c599230":"markdown"},"source":{"8f35e7c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d57e9a11":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nimport xgboost\nimport pickle\nfrom sklearn.model_selection import RandomizedSearchCV","27e51a1e":"df = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')","25c72d35":"ds = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')","5977cb59":"kk = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')","095a2aa4":"df.head()","404c1252":"df.isnull().sum()","f1122dfb":"df.shape","4536a25d":"sns.heatmap(df.isnull(), yticklabels=False, cbar=False)","dd39d289":"for i in range(80):\n    if (df.isnull().sum()[i] > 1000):\n        print('Columns with missing values are: {}' .format(df.columns[i]))","f4210356":"df.info()","50749082":"df['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].mean())","857fdcc5":"df['LotFrontage'].isnull().sum()","539a23f2":"df.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)","43cb0b53":"df['MSZoning'].value_counts()","b6c16f1f":"df['MSZoning'] = df['MSZoning'].fillna(df['MSZoning'].mode()[0])","5f5266d5":"sns.heatmap(df.isnull(), yticklabels=False, cbar=False)","0596e2c4":"def cat_data(column):\n    column = column.fillna(column.mode()[0])","62f8d666":"df['BsmtCond'] = df['BsmtCond'].fillna(df['BsmtCond'].mode()[0])","ae24fc69":"df['FireplaceQu'].isnull().sum()","da375f8d":"df['BsmtQual'] = df['BsmtQual'].fillna(df['BsmtQual'].mode()[0])","153d3047":"df['GarageType'] = df['GarageType'].fillna(df['GarageType'].mode()[0])\ndf['GarageFinish'] = df['GarageFinish'].fillna(df['GarageFinish'].mode()[0])\ndf['GarageQual'] = df['GarageQual'].fillna(df['GarageQual'].mode()[0])\ndf['GarageCond'] = df['GarageCond'].fillna(df['GarageCond'].mode()[0])","90c08adf":"df['BsmtExposure'] = df['BsmtExposure'].fillna(df['BsmtExposure'].mode()[0])\ndf['BsmtFinType1'] = df['BsmtFinType1'].fillna(df['BsmtFinType1'].mode()[0])\ndf['BsmtFinType2'] = df['BsmtFinType2'].fillna(df['BsmtFinType2'].mode()[0])","c5007b0f":"df['MasVnrType'] = df['MasVnrType'].fillna(df['MasVnrType'].mode()[0])\ndf['MasVnrArea'] = df['MasVnrArea'].fillna(df['MasVnrArea'].mode()[0])","eba980d3":"df.drop(['PoolArea'], axis = 1, inplace = True)","ad8e0aa0":"df.drop(['LotArea'], axis = 1, inplace = True)","64c7e18b":"df.drop(['Id'], axis = 1, inplace = True)","bea57004":"df.drop(['GarageYrBlt'], axis=1, inplace = True)","cc67774a":"df.drop(['FireplaceQu'], axis=1, inplace = True)","9d58ff8b":"sns.relplot(x=\"PoolArea\", y=\"SalePrice\", data=df)","53aae374":"for i in range(df.shape[1]):\n    if (df.isnull().sum()[i] > 100):\n        print('Columns with missing values are: {}' .format(df.columns[i]))","60ed6e4d":"sns.heatmap(t.isnull(), yticklabels=False, cbar=False)","d66bfdda":"df.shape","0ff85c3f":"df.dropna(inplace=True)","94636b24":"#mputing values\nmy_imputer = SimpleImputer()\nimputed_train = pd.DataFrame(my_imputer.fit_transform(df))\n\nimputed_train.columns = df.columns","a0a0934c":"columns = ['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical','KitchenQual','Functional','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','SaleType','SaleCondition']","f7153537":"for i in range(df.shape[1]):\n    if (df.dtypes[i] == object):\n        print('{}' .format(df.columns[i]))","f0e63e4c":"main_df = df.copy()","1973d880":"ds['LotFrontage'] = ds['LotFrontage'].fillna(ds['LotFrontage'].mean())\nds.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)\nds['MSZoning'] = ds['MSZoning'].fillna(ds['MSZoning'].mode()[0])\nds['BsmtCond'] = ds['BsmtCond'].fillna(ds['BsmtCond'].mode()[0])\nds['BsmtQual'] = ds['BsmtQual'].fillna(ds['BsmtQual'].mode()[0])\nds['GarageType'] = ds['GarageType'].fillna(ds['GarageType'].mode()[0])\nds['GarageFinish'] = ds['GarageFinish'].fillna(ds['GarageFinish'].mode()[0])\nds['GarageQual'] = ds['GarageQual'].fillna(ds['GarageQual'].mode()[0])\nds['GarageCond'] = ds['GarageCond'].fillna(ds['GarageCond'].mode()[0])\nds['BsmtExposure'] = ds['BsmtExposure'].fillna(ds['BsmtExposure'].mode()[0])\nds['BsmtFinType1'] = ds['BsmtFinType1'].fillna(ds['BsmtFinType1'].mode()[0])\nds['BsmtFinType2'] = ds['BsmtFinType2'].fillna(ds['BsmtFinType2'].mode()[0])\nds['MasVnrType'] = ds['MasVnrType'].fillna(ds['MasVnrType'].mode()[0])\nds['MasVnrArea'] = ds['MasVnrArea'].fillna(ds['MasVnrArea'].mode()[0])\nds.drop(['PoolArea'], axis = 1, inplace = True)\nds.drop(['LotArea'], axis = 1, inplace = True)\nds.drop(['Id'], axis = 1, inplace = True)\nds.drop(['GarageYrBlt'], axis=1, inplace = True)","3629f678":"ds.drop(['FireplaceQu'], axis=1, inplace = True)","642e7db5":"t = ds.fillna(method='bfill', axis=0).fillna(0)","5ca0a878":"sum(t.isnull().sum())","51aec7f5":"t.shape","abde40f8":"ds.to_csv('updated_test.csv', index=False)","0619bf20":"dt = pd.read_csv('updated_test.csv')","db17943c":"main_df.shape","8af4ac11":"main_df = main_df.drop(['SalePrice'], axis=1)","75d19f4a":"dt.dropna(inplace=True)","b33ec00b":"final_df = pd.concat([main_df,t], axis=0)","6c089615":"final_df.shape","eca3e8f6":"OH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(final_df[columns]))","6a625896":"OH_cols_train.index = final_df.index","6da55fde":"afinal_df = final_df.drop(columns, axis=1)","88384c7c":"OH_X_train = pd.concat([afinal_df, OH_cols_train], axis=1)","9a8f25db":"X_train  = OH_X_train.head(1459)","a5c9e2d6":"X_test = OH_X_train.tail(OH_X_train.shape[0]-1459)","ef70d742":"X_test.shape","efcdd3d6":"classifier = xgboost.XGBRegressor()\nclassifier.fit(X_train, df['SalePrice'])","059de337":"filename = 'finalized_model.pkl'\npickle.dump(classifier, open(filename, 'wb'))","7f988313":"y_test = classifier.predict(X_test)","c7d12851":"y_test","27f86381":"kk['Id']","c5e09efd":"my_submission = pd.DataFrame({'Id': kk['Id'], 'SalePrice': y_test})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","b8b9189e":"my_submission.head()","35a65989":"regressor = xgboost.XGBRegressor()","66c9e16d":"base_score=[0.25,0.5,0.75,1]","5ba5f2e7":"## Hyper parameter Optimization\n\nn_estimators = [100,500,900,1100,1500]\nmax_depth = [2,3,5,10,15]\nbooster=['gbtree', 'gblinear']\nlearning_rate = [0.05,0.1,0.15,0.20]\nmin_child_weight = [1,2,3,4]\n\nhyperparameter_grid = {\n    'n_estimators' : n_estimators,\n    'max_depth' : max_depth,\n    'learning_rate' : learning_rate,\n    'min_child_weight' : min_child_weight,\n    'booster' : booster,\n    'base_score' : base_score\n}","0cdfb2ea":"random_cv = RandomizedSearchCV(estimator=regressor,\n                              param_distributions=hyperparameter_grid,\n                              cv=5,n_iter=50,\n                               scoring= 'neg_mean_absolute_error', n_jobs = 4,\n                               verbose =5,\n                               return_train_score = True,\n                               random_state = 42)","ff2a8ed6":"random_cv.fit(X_train, df['SalePrice'])","7d5c0bc2":"random_cv.best_estimator_","9faf0ca7":"regressor = xgboost.XGBRegressor(base_score=0.25, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.1, max_delta_step=0, max_depth=2,\n             min_child_weight=1, monotone_constraints='()',\n             n_estimators=900, n_jobs=0, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)","ad4a9815":"regressor.fit(X_train,df['SalePrice'])","a256dd6b":"y_pred = regressor.predict(X_test)","0c2b190f":"my_submission = pd.DataFrame({'Id': kk['Id'], 'SalePrice': y_pred})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission2.csv', index=False)","eda0d880":"* **Now, concatenation will be done.**","c4c03a76":"Combining updated_test to train data for OneHotEncoding","123be0db":"Preparing model for prediction..","e2a5eaf8":"***Apply all the steps for the test data as well***","9c599230":"To know which features have lot of missing values.."}}