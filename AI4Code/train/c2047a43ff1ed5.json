{"cell_type":{"2f10294f":"code","c5134e5e":"code","2e242823":"code","a893bbb9":"code","f5e2142f":"code","c565f56b":"code","d7352ffb":"code","8aa85536":"code","1f62c10a":"code","c7622ef6":"code","583d5223":"code","3afb805b":"code","e615cc56":"code","c84b0d1d":"markdown","235b9d6e":"markdown","b1d7e5c0":"markdown","520e4a82":"markdown","fbb4a2f5":"markdown","8b0f7a77":"markdown","348c99f1":"markdown"},"source":{"2f10294f":"! ls -l \/kaggle\/input\/house-prices-advanced-regression-techniques\n! pip list | grep -E \"lightning|torch\"","c5134e5e":"! pip uninstall -y torchtext fastai\n# ! pip install -q pytorch-lightning lightning-flash[tabular] -U\n# this is just temporal bypass till the improvemnt is merged and released\n! pip install -q 'https:\/\/github.com\/PyTorchLightning\/lightning-flash\/archive\/refs\/heads\/master.zip#egg=lightning-flash[tabular]'\n# ! pip install -q icevision[all]\n! pip install --upgrade pandas --force-reinstall\n! pip list | grep -E \"lightning|torch|tab\"","2e242823":"import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nPATH_DATASET = \"\/kaggle\/input\/house-prices-advanced-regression-techniques\"\nCSV_TABLE_TRAIN = os.path.join(PATH_DATASET, \"train.csv\")\nCSV_TABLE_TEST = os.path.join(PATH_DATASET, \"test.csv\")\n\ndf = pd.read_csv(CSV_TABLE_TRAIN, index_col=\"Id\")\ndisplay(df.head())\n\nax = df[\"SalePrice\"].plot.hist(bins=50)\n_= plt.xticks(rotation=45)","a893bbb9":"import seaborn as sns\nsns.set()\n\ncorr = df.corr()\nplt.subplots(figsize=(15, 12))\nsns.heatmap(corr, vmax=0.9, square=True)","f5e2142f":"# drop the target column\ndel df[\"SalePrice\"]\n# get column types\ncol_counts = dict(df.count(axis=0))\ncol_types = {c: d for c, d in dict(df.dtypes).items() if col_counts[c] > 1000}\n_is_num = lambda x: x in (int, float)\n# separate them\ncols_numerical = [col for col, dtp in col_types.items() if _is_num(dtp)]\ncols_string = [col for col, dtp in col_types.items() if not _is_num(dtp)]\nprint(f\"NUMERICAL: {cols_numerical}\")\nprint(f\"CATEGORICAL: {cols_string}\")","c565f56b":"import flash\nfrom flash.tabular import TabularRegressionData, TabularRegressor","d7352ffb":"datamodule = TabularRegressionData.from_csv(\n    categorical_fields=cols_string,\n    numerical_fields=cols_numerical,\n    target_fields=\"SalePrice\",\n    train_file=CSV_TABLE_TRAIN,\n    val_split=0.1,\n    batch_size=64,\n)","8aa85536":"model = TabularRegressor.from_data(\n    datamodule,\n    learning_rate=0.7,\n    optimizer=\"Adam\",\n    lr_scheduler=(\"StepLR\", {\"step_size\": 100}),\n    n_a=64,\n    gamma=0.1,\n)","1f62c10a":"import torch\nfrom pytorch_lightning import seed_everything\nfrom pytorch_lightning.loggers import CSVLogger\nfrom pytorch_lightning.callbacks import StochasticWeightAveraging\n\nseed_everything(42)\nswa = StochasticWeightAveraging(swa_epoch_start=0.6)\nlogger = CSVLogger(save_dir='logs\/')\ntrainer = flash.Trainer(\n    max_epochs=150,\n    gpus=torch.cuda.device_count(),\n    logger=logger,\n    callbacks=[swa],\n    accumulate_grad_batches=4,\n    gradient_clip_val=0.1,\n    auto_lr_find=True,\n)\n\n# ==============================\n\n# trainer.tune(model, datamodule=datamodule, lr_find_kwargs=dict(min_lr=2e-4, max_lr=1, num_training=65),)\n# print(f\"Learning Rate: {model.learning_rate}\")\n\n# ==============================\n\ntrainer.fit(model, datamodule=datamodule)","c7622ef6":"metrics = pd.read_csv(f'{trainer.logger.log_dir}\/metrics.csv')\ndisplay(metrics.head())\nmetrics.set_index(\"step\", inplace=True)\ndel metrics[\"epoch\"]\ng = sns.relplot(data=metrics, kind=\"line\")\ng.set(yscale=\"log\")\nplt.gcf().set_size_inches(10, 5)","583d5223":"predictions = model.predict(CSV_TABLE_TEST)\n# show prediction prices histogram\n\ndf = pd.read_csv(CSV_TABLE_TRAIN, index_col=\"Id\")\nax = df[\"SalePrice\"].plot.hist(bins=50)\npd.Series(predictions.tolist()).plot.hist(ax=ax, bins=50, figsize=(8, 3), alpha=0.7)\n_= plt.xticks(rotation=45)","3afb805b":"df = pd.read_csv(CSV_TABLE_TEST, index_col=\"Id\")\ndf[\"SalePrice\"] = predictions.tolist()\ndf[\"SalePrice\"].to_csv(\"submission.csv\")","e615cc56":"! head submission.csv","c84b0d1d":"## Browsing dataset","235b9d6e":"# House \ud83c\udfe0 prices predictions with Lightning\u26a1Flash\n\n[Flash](https:\/\/lightning-flash.readthedocs.io\/en\/stable) makes complex AI recipes for over 15 tasks across 7 data domains accessible to all.\n\nIn a nutshell, Flash is the production grade research framework you always dreamed of but didn't have time to build.","b1d7e5c0":"### 3. Create the trainer and train the mode","520e4a82":"### 4. Generate predictions from a CSV","fbb4a2f5":"## Training with Flash Lightning","8b0f7a77":"### 2. Build the task","348c99f1":"### 1. Create the DataModule"}}