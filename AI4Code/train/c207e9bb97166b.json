{"cell_type":{"602b62d1":"code","7da6ca82":"code","00278e35":"code","d667e786":"code","fc14d240":"code","6f7c3fcb":"code","3132c944":"code","f3f9373d":"code","292c657c":"code","395e3ee8":"code","70add3db":"code","711ab15e":"code","8e6ed830":"code","e0dc6462":"code","a7714fda":"code","0b159839":"code","a85f6291":"code","9e0fc4a0":"code","b8c9b383":"code","78ecd206":"code","eb45c4e0":"code","3b443282":"markdown","d46d608c":"markdown","f0336dfd":"markdown","575375fa":"markdown","13b659a4":"markdown","6fcda1ca":"markdown","8ff962e4":"markdown","b8c177c3":"markdown","d7c28ebd":"markdown","f4a7c149":"markdown","d046d34f":"markdown"},"source":{"602b62d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt \nplt.style.use('seaborn-whitegrid')\nimport seaborn as sns\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7da6ca82":"test_df = pd.read_csv(\"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv\")\ntrain_df = pd.read_csv(\"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv\")\n","00278e35":"train_df.columns","d667e786":"train_df.head()    #first 5 sample","fc14d240":"train_df.describe()    #Numerical samples's describe","6f7c3fcb":"train_df.info()","3132c944":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"gender\"\n    output: bar plot\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    \n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, varValue))","f3f9373d":"category1 = [\"city\", \"gender\", \"relevent_experience\", \"enrolled_university\", \"education_level\", \"major_discipline\", \"experience\", \"company_type\", \"last_new_job\", \"target\",\"company_size\"]\nfor c in category1:\n    bar_plot(c)","292c657c":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable)),\n    plt.show()","395e3ee8":"numericVar = [\"enrollee_id\", \"training_hours\",\"city_development_index\"]\nfor n in numericVar:\n    plot_hist(n)","70add3db":"# gender vs training_hours\ntrain_df[[\"gender\",\"training_hours\"]].groupby([\"gender\"], as_index = False).mean().sort_values(by=\"training_hours\", ascending= False)","711ab15e":"# experience vs training_hours  \ntrain_df[[\"experience\",\"training_hours\"]].groupby([\"experience\"], as_index = False).mean().sort_values(by=\"training_hours\", ascending= False)","8e6ed830":"# enrolled_university vs training_hours  \ntrain_df[[\"enrolled_university\",\"training_hours\"]].groupby([\"enrolled_university\"], as_index = False).mean().sort_values(by=\"training_hours\", ascending= False)","e0dc6462":"# target vs training_hours  \ntrain_df[[\"target\",\"training_hours\"]].groupby([\"target\"], as_index = False).mean().sort_values(by=\"training_hours\", ascending= False)","a7714fda":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        \n        Q1 = np.percentile(df[c],25)\n        \n        Q3 = np.percentile(df[c],75)\n        \n        IQR = Q3 - Q1\n        \n        outlier_step = IQR + 1.5\n        \n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        \n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list( i for i, v in outlier_indices.items() if v>2 ) # extract sample, if there have outlier more than 1 \n        \n    return multiple_outliers","0b159839":"train_df.loc[detect_outliers(train_df, [\"city_development_index\",\"training_hours\",\"target\"])]","a85f6291":"train_df.isnull().sum()","9e0fc4a0":"train_df[train_df[\"enrolled_university\"].isnull()]","b8c9b383":"train_df.boxplot(column = \"training_hours\", by = \"enrolled_university\")\nplt.show()","78ecd206":"train_df[\"enrolled_university\"] = train_df[\"enrolled_university\"].fillna(\"Part time course enrolled_university\")","eb45c4e0":"train_df[train_df[\"enrolled_university\"].isnull()]","3b443282":"<a id = \"3\"><\/a>\n# Univariate Variable Analysis\n* Categorical Variable: city, gender, relevent_experience, enrolled_university, education_level, major_discipline, experience, , company_type, last_new_job, target,company_size\n* Numerical Variable: enrollee_id, training_hours,city_development_index","d46d608c":"<a id = \"5\"><\/a>\n## Numerical Variable Analysis","f0336dfd":"# Introduction\n\nA company wants to hire data scientists. This scientist have to pass some courses about data science.\n\n\n\n<font color = \"pink\">\nContent:\n    \n1. [Load and Check Data](#1)\n    \n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)    \n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Fill Missing Value](#8)\n ","575375fa":"For categorical variable analysis,  we'll use bar_plot in matplotlib.pylot library.","13b659a4":"<a id = \"8\"><\/a>\n# Fill Missing Value\n \n* enrolled_university has 386 null values","6fcda1ca":"<a id = \"1\"><\/a>\n# Load and Check Data","8ff962e4":"<a id = \"6\"><\/a>\n# Basic Data Analysis\n* gender-training_hours\n* experience-training_hours  \n* enrolled_university-training_hours\n* target-training_hours","b8c177c3":"<a id = \"4\"><\/a>\n## Categorical Variable Analysis","d7c28ebd":"<a id = \"7\"><\/a>\n# Outlier Detection","f4a7c149":"<a id = \"2\"><\/a>\n# Variable Description\n1.  enrollee_id: Unique Id for each candidate\n1. city: City Codes\n1. city_development_index: Developement index of the city (scaled)\n1. gender: Gender of candidate\n1. relevent_experience: Experience of candidate(relevent)\n1. enrolled_university: Enrolled university type\n1. education_level: Education level of each candidate\n1. major_discipline: Education major discipline of candidate\n1. exprerience: Total experience of candidate\n1. company_size: Employees in employer's company\n1. company_type: Type of employees\n1. last_new_job: Difference in years between previous job and current job\n1. training_hours: Completed training hours\n1. target: Job change(0-not looking, 1-looking)","d046d34f":"* int64(2): enrollee_id, training_hours\n* object(10): city, gender, relevent_experience, enrolled_university, education_level, major_discipline, experience, company_size, company_type, last_new_job\n* float64(2): city_development_index, target"}}