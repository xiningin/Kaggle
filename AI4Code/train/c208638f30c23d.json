{"cell_type":{"695c5b30":"code","87342470":"code","cadeba5a":"code","439635b8":"code","5c89f5bd":"code","5a6f22ac":"code","96953977":"code","4c0a813d":"code","e9a57a8b":"code","f6cf9139":"code","83eabafe":"code","2342cdb8":"code","6611c3af":"code","1f694fe9":"code","e04e8df6":"code","436b8819":"code","ce0f4739":"code","a8f110e4":"code","0271a7b4":"code","55cdbc37":"code","6310bcbd":"code","27479ede":"code","73d6d213":"code","ed21c56d":"code","e22eb7a3":"code","268e2a80":"code","7add464d":"code","b44c5294":"code","153b4110":"code","668cc822":"code","a26b8ecb":"code","ca4146fb":"code","9213e58a":"markdown","3c99488f":"markdown","ae8802e8":"markdown","74cd44a4":"markdown","dedb3ba5":"markdown","20cee0f4":"markdown","b2664da2":"markdown","f5850654":"markdown","b1a739a8":"markdown","80bd7b2a":"markdown","bf9f9599":"markdown","6b3a6f9c":"markdown","eaddde3e":"markdown","03617b97":"markdown","79b3e23f":"markdown","0c87ec22":"markdown","c93aabfd":"markdown","1236cdd5":"markdown"},"source":{"695c5b30":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87342470":"# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\n","cadeba5a":"train_df =  pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df =  pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","439635b8":"train_df.info()","5c89f5bd":"train_df","5a6f22ac":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","96953977":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","4c0a813d":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","e9a57a8b":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","f6cf9139":"train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","83eabafe":"grid = sns.FacetGrid(train_df, row='Survived', col='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","2342cdb8":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Sex', alpha=.5, bins=20)\ngrid.add_legend()\n","6611c3af":"\ng = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","1f694fe9":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Sex', bins=20)","e04e8df6":"grid = sns.FacetGrid(train_df, col='Survived', row='Embarked', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Pclass', alpha=.5, bins=20)\ngrid.add_legend()","436b8819":"train_df1 = train_df.copy()\ntrain_df1['AgeBand'] = pd.cut(train_df1['Age'], 5).astype(str)\ntrain_df1[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='Survived', ascending=True)\n","ce0f4739":"train_df['Sex_Pclass'] = train_df['Sex'].astype(str) + train_df['Pclass'].astype(str)","a8f110e4":"y = train_df[\"Survived\"]\nx = train_df.drop([\"Survived\",\"Name\",\"PassengerId\"],axis=1)","0271a7b4":"x.isnull().sum().sort_values(ascending = False)","55cdbc37":"x[\"Age\"] = x[\"Age\"].fillna(x.Age.mean())\nx[\"Embarked\"] = x[\"Embarked\"].fillna(\"missing\")\nx[\"Cabin\"] = x[\"Cabin\"].fillna(\"missing\")\n\n","6310bcbd":"x.isnull().sum().sort_values(ascending = False)","27479ede":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\nx['Ticket'] = le.fit_transform(x['Ticket'])\nx['Cabin'] = le.fit_transform(x['Cabin'])\nx['Embarked'] = le.fit_transform(x['Embarked'])\nx['Sex_Pclass'] = le.fit_transform(x['Sex_Pclass'])\n\n\n\nx = pd.get_dummies(x)\n","73d6d213":"# Split the data into train and test\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(x, y , test_size = 0.20, random_state = 10)","ed21c56d":"# Logistic Regression\n\nlogreg = LogisticRegression(solver='liblinear')\nlogreg.fit(X_train, y_train)\nY_pred = logreg.predict(X_valid)\n\nscore = accuracy_score(y_valid,Y_pred)\nprint(\"Accuracy score : \",score)\n\n","e22eb7a3":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, y_train)\nY_pred1 = linear_svc.predict(X_valid)\n\nacc_linear_svc = accuracy_score(y_valid,Y_pred1)\nacc_linear_svc","268e2a80":"# Gaussian Naive Bayes\n\n# gaussian = GaussianNB()\n# gaussian.fit(X_train, y_train)\n# Y_pred = gaussian.predict(X_valid)\n# acc_gaussian = round(gaussian.score(X_train, y_train) * 100, 2)\n# acc_gaussian\n# score = accuracy_score(y_valid,Y_pred)\n# score","7add464d":"test_df['Sex_Pclass'] = test_df['Sex'].astype(str) + test_df['Pclass'].astype(str)\n# test_df['Embarked_Pclass'] = test_df['Pclass'].astype(str) + test_df['Embarked'].astype(str)\n","b44c5294":"x_test = test_df.drop([\"Name\",\"PassengerId\"],axis=1)\nx_test[\"Age\"] = x_test[\"Age\"].fillna(x_test.Age.mean())\nx_test[\"Embarked\"] = x_test[\"Embarked\"].fillna(\"missing\")\nx_test[\"Cabin\"] = x_test[\"Cabin\"].fillna(\"missing\")\nx_test[\"Fare\"] = x_test[\"Fare\"].fillna(x_test.Fare.mean())\n\n","153b4110":"x_test['Ticket'] = le.fit_transform(x_test['Ticket'])\nx_test['Cabin'] = le.fit_transform(x_test['Cabin'])\nx_test['Embarked'] = le.fit_transform(x_test['Embarked'])\n\n\nx_test['Sex_Pclass'] = le.fit_transform(x_test['Sex_Pclass'])\n\n# x_test['Embarked_Pclass'] = le.fit_transform(x_test['Embarked_Pclass'])\n\n\nx_test = pd.get_dummies(x_test)\n","668cc822":"test_predictions = logreg.predict(x_test)\n\ntitanic_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\nsubmission_df = pd.DataFrame({\n        \"PassengerId\": titanic_test[\"PassengerId\"],\n        \"Survived\": test_predictions\n    })\n","a26b8ecb":"submission_df.info()","ca4146fb":"submission_df.to_csv(\"submit.csv\", index = False)","9213e58a":"*** try to create new feature and see if accuracy will change ***","3c99488f":"* **we can see here range of age thay servived**","ae8802e8":"# Display information of train data","74cd44a4":"we can see here the percent of serviverd people in every class","dedb3ba5":" * **Let us create Age bands and determine correlations with Survived.**","20cee0f4":"# Analyze by visualizing data","b2664da2":"* **Female passengers had much better survival rate than males**","f5850654":"# Encodding the Catregorical columns to Numerical columns","b1a739a8":"# Make some Analyze for features","80bd7b2a":"# Fill null values ","bf9f9599":"# Import Libraries","6b3a6f9c":"# submission","eaddde3e":"also here we can see the percent of male and female survived","03617b97":"# Reading the file","79b3e23f":"# Split the data into train and test","0c87ec22":"# Test data","c93aabfd":"* **we want to see the range of person age that servived**\n* **as we see Pclass=3 had most passengers, however most did not survive**\n* **Most passengers in Pclass=1 survived**","1236cdd5":"# Fitting the model"}}