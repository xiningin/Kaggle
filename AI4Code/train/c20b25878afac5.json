{"cell_type":{"42e8cbc5":"code","d41e357e":"code","9a5b02d7":"code","de10fea8":"code","478b9695":"code","66bcd840":"code","b3aee77a":"code","e400f8f5":"code","1df61e0c":"code","e6ee7ef5":"code","e4ffc810":"code","54b3b05b":"code","d8ac87af":"code","a0ef4db4":"code","0b5c39ec":"code","ffe335f6":"markdown","260a53de":"markdown","3c937c87":"markdown","f7a11ffc":"markdown","c0938027":"markdown","e5c00b6e":"markdown","467c3199":"markdown","d57e57e9":"markdown","76570050":"markdown","7a3e9f8e":"markdown","5ecf48fa":"markdown","64518ba5":"markdown","cd52356b":"markdown","e18b98e0":"markdown","90c8f802":"markdown","45c05a35":"markdown"},"source":{"42e8cbc5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nimport os\nwarnings.filterwarnings('ignore')\n# Add the complete dataset to the repository. The data is added to ..\/input\/ directory\n!ls ..\/input\/\n\n#Read the first 5 headers of the dataset \ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","d41e357e":"train.head()","9a5b02d7":"test.head()","de10fea8":"NanExist = False\nif train.count().min() == train.shape[0] and test.count().min() == test.shape[0] :\n    print('There is no missing data!') \nelse:\n    NanExist = True\n    print('we have NAN!!!')\nif NanExist == True:\n    NumOfNan = pd.concat([train.isnull().sum(), test.isnull().sum()], axis=1, keys=['Train Data', 'Test Data']) \n    print(NumOfNan[NumOfNan.sum(axis=1) > 0])","478b9695":"title_train = (train['Name'].str.split(',').str[1]).str.split('.').str[0]\ntitle_test = (test['Name'].str.split(',').str[1]).str.split('.').str[0]","66bcd840":"for i in range(0,len(title_train)): #both have same dimension\n    if np.isnan(train['Age'][i]) == True:\n        if 'Miss' in title_train[i] or 'Master' in title_train[i]:\n            train['Age'][i] = 0\n        else:train['Age'][i] = 18\nfor i in range(0,len(title_test)): \n    if np.isnan(test['Age'][i]) == True:\n        if 'Miss' in title_test[i] or 'Master' in title_test[i]:\n            test['Age'][i] = 0\n        else:test['Age'][i] = 18\nsum(train[\"Age\"].isna()) # checking train\ntrain_orig = train.copy() # save the original data \nsum(test[\"Age\"].isna())  #checking test","b3aee77a":"train['Sex'] = train['Sex'].replace('male', 1)\ntrain['Sex'] = train['Sex'].replace('female', 2)\n\ntest['Sex'] = test['Sex'].replace('male', 1)\ntest['Sex'] = test['Sex'].replace('female', 2)","e400f8f5":"fp = train['Embarked'].dropna().mode()[0]\ntrain['Embarked'] = train['Embarked'].fillna(fp)","1df61e0c":"train['Embarked'] = train['Embarked'].map({'S': 0, 'C':1,'Q':2}).astype(int)\ntest['Embarked'] = test['Embarked'].map({'S': 0, 'C':1,'Q':2}).astype(int)","e6ee7ef5":"#Converting Pandas DataFrame to numpy arrays so that they can be used in sklearn\ntrain_feature = train[['Sex','Age','Pclass','SibSp','Parch','Embarked']].values\ntrain_class = train['Survived'].values\nfeature_names = ['Sex','Age','Pclass','SibSp','Parch','Embarked']\ntest_feature = test[['Sex','Age','Pclass','SibSp','Parch','Embarked']].values","e4ffc810":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression()\nclf.fit(train_feature,train_class) # This is applying the fitting\n\ntest_predict = clf.predict(test_feature) # this is the predicted RESULT\ncv_score = clf.score(\n    train_feature,train_class)\ncv_score\n","54b3b05b":"from sklearn import preprocessing\npoly = preprocessing.PolynomialFeatures(degree=2)\npoly_train_feature = poly.fit_transform(train_feature)\npoly_test_feature = poly.fit_transform(test_feature)\nclassfier = LogisticRegression()\nclassifier_ = classfier.fit(poly_train_feature, train_class)\npoly_test_predict = classifier_.predict(poly_test_feature)\nprint(classifier_.score(poly_train_feature, train_class))\n#print(classifier_.score(poly_test_feature,poly_test_predict))\n","d8ac87af":"LogReg_TestResult= pd.DataFrame({'PassengerId':test['PassengerId'], 'Survived':poly_test_predict})\nLogReg_TestResult.head()\nLogReg_TestResult.to_csv('PLogReg_TestResult.csv',index=False)","a0ef4db4":"from sklearn.ensemble import RandomForestClassifier\n#This has to be improved\nrclf = RandomForestClassifier(criterion='gini',n_estimators=1000,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)\nseed= 42\nrclf =RandomForestClassifier(n_estimators=1000, criterion='entropy', max_depth=5, min_samples_split=2,\n                           min_samples_leaf=1, max_features='auto',    bootstrap=False, oob_score=False, \n                           n_jobs=1, random_state=seed,verbose=0)\nrclf.fit(train_feature,train_class)\ntest_predict = rclf.predict(test_feature)\nprint(rclf.score(train_feature, train_class))\n#cv_score = rclf.score(test_feature,test_predict)\n","0b5c39ec":"RandForst_TestResult= pd.DataFrame({'PassengerId':test['PassengerId'], 'Survived':test_predict})\nRandForst_TestResult.head()\nRandForst_TestResult.to_csv('RandForst_Test.csv',index=False)","ffe335f6":"Here in this array  \"**Sex**\" and \"**Embarked**\" are categorical features and have strings instead of numeric values. We need to encode these strings into numeric data, so the algorithm can perform its calculations.","260a53de":"# **Logistic regression**","3c937c87":"# 2: Random Forest","f7a11ffc":"Now we want to create array of the train and test data with the features only which we want to work with. Here **Age** is also one of the important parameter for prediction. It is very important to fix the missing values in **Age**. As mentioned above, it is not advicable to just replace the **Age** with 0 because large number (177) of **Age** values are missing and it will effect the Survival prediction. Here, we are going to use the **Name** where the title are giving some clue about the **Age**. For this first we need to extract title from the **Name** column. ","c0938027":"Mapping the values for Embarked","e5c00b6e":"# 3: Apply Classifier","467c3199":"Try with polynomial fitting","d57e57e9":"looking at the data files:","76570050":"Now the data is resonably cleaned. Here, we are not using **Cabin** data so we can leave this column as it is.\nNext is to convert the DataFrames into array","7a3e9f8e":"# 2: Data cleaning","5ecf48fa":" # Titanic: Machine Learning from Disaster\n**Start here! Predict survival on the Titanic and get familiar with ML basics**\n Overview\n The data has been split into two groups:\n\n training set (train.csv)\n test set (test.csv)\n The training set should be used to build your machine learning models. For the training set, we provide the outcome (also known as the \u201cground truth\u201d) for each passenger. Your model will be based on \u201cfeatures\u201d like passengers\u2019 gender and class. You can also use feature engineering to create new features.\n\n The test set should be used to see how well your model performs on unseen data. For the test set, we do not provide the ground truth for each passenger. It is your job to predict these outcomes. For each passenger in the test set, use the model you trained to predict whether or not they survived the sinking of the Titanic.\n\n We also include gender_submission.csv, a set of predictions that assume all and only female passengers survive, as an example of what a submission file should look like.","64518ba5":"# Step 1: Let's start by importing the data files and take a look at it","cd52356b":"Looking at the dataset, we need to think about the features which could be useful to predict the survival. For this one can start by thinking about how the features are correlated with the survival. This can be done during data cleaning.","e18b98e0":"Similarly for **Embarked**, there are 2 missing values. Here, there are 3 categories in **Embarked**, so best is to fill in wiht the frequent port. ","90c8f802":"Based on the title the easiest way is to replace the missing  value of **Age** for  title with **Miss** and **Master** with 0 and rest of the title with 18","45c05a35":"Evaluate if the data needs cleaning. First, checking if there are any missing values in the data"}}