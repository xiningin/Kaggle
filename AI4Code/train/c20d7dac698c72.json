{"cell_type":{"6c93fa9f":"code","e17ab3f7":"code","130589d9":"code","aeb4ecb2":"code","df757fdb":"code","da4aa732":"code","221a27cb":"code","72cb0c72":"code","866740a4":"code","214741d2":"code","fde0b14c":"code","87f7330c":"code","8da26d20":"code","6b341a33":"code","3c48f75d":"markdown","7b2aa88e":"markdown","dd5a429e":"markdown","abcfe9bf":"markdown","73d7694d":"markdown"},"source":{"6c93fa9f":"import numpy as np\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.tokenize import RegexpTokenizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import plot_confusion_matrix\n\nnp.set_printoptions(precision=2)","e17ab3f7":"# \/kaggle\/input\/60k-stack-overflow-questions-with-quality-rate\/valid.csv\n# \/kaggle\/input\/60k-stack-overflow-questions-with-quality-rate\/train.csv\n\ndata = pd.read_csv('\/kaggle\/input\/60k-stack-overflow-questions-with-quality-rate\/train.csv')\ndata.head()","130589d9":"data.isna().sum()","aeb4ecb2":"token = RegexpTokenizer(r'[a-zA-Z]+')\ncv = CountVectorizer(\n    lowercase=True, \n    stop_words='english', \n    ngram_range = (1,1), \n    tokenizer = token.tokenize,\n    max_features=2000\n)\ntext_counts = cv.fit_transform(data['Body'])","df757fdb":"text_counts","da4aa732":"X_train, X_test, y_train, y_test = train_test_split(text_counts, data['Y'], test_size=0.3, random_state=1)","221a27cb":"multinomialNB = MultinomialNB().fit(X_train, y_train)\nmultinomialNB_predicted = multinomialNB.predict(X_test)","72cb0c72":"gnb_model = GaussianNB().fit(X_train.toarray(), y_train)\ngnb_model_predicted = gnb_model.predict(X_test.toarray())","866740a4":"from sklearn.ensemble import RandomForestClassifier\n    \nrfmodel = RandomForestClassifier()\nrfmodel.fit(X_train, y_train)\nrfmodel_predicted = rfmodel.predict(X_test)","214741d2":"print(\"MultinomialNB Accuracy:\",metrics.accuracy_score(y_test, multinomialNB_predicted))\nprint(\"GaussianNB Accuracy:\",metrics.accuracy_score(y_test, gnb_model_predicted))\nprint(\"Random Forest Accuracy :\", rfmodel.score(X_test, y_test))","fde0b14c":"target_names = ['HQ', 'LQ_CLOSE', 'LQ_EDIT']\nprint('MultinomialNB')\nprint(classification_report(y_test, multinomialNB_predicted, target_names=target_names))\nprint('GaussianNB')\nprint(classification_report(y_test, gnb_model_predicted, target_names=target_names))\nprint('Random Forest')\nprint(classification_report(y_test, rfmodel_predicted, target_names=target_names))","87f7330c":"print('MultinomialNB')\ndisp = plot_confusion_matrix(\n    multinomialNB, \n    X_test, \n    y_test, \n    display_labels=target_names, \n    normalize=None\n)\nplt.show()\nprint('GaussianNB')\ndisp = plot_confusion_matrix(\n    gnb_model, \n    X_test.toarray(), \n    y_test, \n    display_labels=target_names, \n    normalize=None\n)\nplt.show()\nprint('Random Forest')\ndisp = plot_confusion_matrix(\n    rfmodel, \n    X_test, \n    y_test, \n    display_labels=target_names, \n    normalize=None\n)\nplt.show()","8da26d20":"def CheckQuestion(text_to_predict):\n    text_to_predict_transformed = cv.transform([text_to_predict])\n    print(rfmodel.predict(text_to_predict_transformed))","6b341a33":"CheckQuestion('This is a low quality question question, needs some edit')","3c48f75d":"## 2.Limpieza y preparaci\u00f3n del dataset","7b2aa88e":"## 7. Implemente una funci\u00f3n llamada CheckQuestion que reciba como par\u00e1metro un texto (la pregunta) y returne la predicci\u00f3n","dd5a429e":"## 1. An\u00e1lisis de datos","abcfe9bf":"## 5. Eval\u00fae cada modelo utilizando el accuracy y una matriz de confusi\u00f3n","73d7694d":"## 3. Ajuste al menos dos modelos diferentes"}}