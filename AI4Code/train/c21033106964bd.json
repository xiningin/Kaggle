{"cell_type":{"1b253a3a":"code","d57d206b":"code","608be18b":"code","83585d04":"code","717c8c59":"code","99c522f9":"code","a4422c1b":"code","92aaf99d":"code","dc5712da":"code","74aed9a0":"code","2e16d8e0":"code","0ecd4135":"code","e51b8798":"code","46080586":"code","2099851d":"code","3e40ed52":"code","58e747cb":"code","e81868a9":"code","c9798aba":"code","edcf9968":"code","7f4ed149":"code","68005b25":"code","9c4e7122":"code","75fa4966":"code","7b41a3cc":"code","11ea7105":"code","8a19b057":"code","149adc36":"code","fb030645":"code","ac376c1d":"code","138121aa":"code","a14c2d1d":"code","af677b9c":"code","cfa14f75":"code","a42ddbde":"code","71072ddd":"code","c24a97ec":"code","f39db2fe":"code","10a0d85c":"code","06b7da60":"code","9f73c781":"code","ffe6e0b7":"code","aba5673b":"code","8e437b8a":"code","761b462e":"code","b14ecda7":"code","70f8b6f0":"code","e716bfa7":"code","98db2ab2":"code","654d033a":"code","1d0ac7c3":"code","bd9d67ab":"markdown","ed46fa2e":"markdown","2a99719f":"markdown","64c3d977":"markdown","104ad92e":"markdown","81b772f0":"markdown"},"source":{"1b253a3a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import RidgeCV\nimport matplotlib as plt\nimport seaborn as sns\nimport patsy\nimport scipy.stats as stats\n\nfrom sklearn import preprocessing\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport time, os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","d57d206b":"# **Reading Riyadh Real Estate Dataset** ","608be18b":"columns =['neighborhood', 'regions', 'city', 'RealEstateType', 'square_meters', 'rooms_number', 'baths_number','prices']\ndf = pd.read_csv(r\"..\/input\/riyadh-real-estates\/realstate.csv\",sep=',',header = 0,names=columns)\n","83585d04":"df.shape","717c8c59":"df.head()","99c522f9":"df.dropna(inplace=True)","a4422c1b":"# Drop unnessery data \ndf.drop(columns='city', inplace=True)","92aaf99d":"df.shape","dc5712da":"df[\"prices\"]=[i.replace(',','') for i in df[\"prices\"]]\n","74aed9a0":"df[\"square_meters\"]=[i.replace(',','') for i in df[\"square_meters\"]]","2e16d8e0":"df[\"square_meters\"]=df[\"square_meters\"].astype('int64')","0ecd4135":"df[\"rooms_number\"]=df[\"rooms_number\"].astype('int64')\ndf[\"baths_number\"]=df[\"baths_number\"].astype('int64')\ndf[\"prices\"]=df[\"prices\"].astype('float64')","e51b8798":"de= df[\"square_meters\"].describe()\nmean = de[1]\nstd= de[2]\nmedian = de[5]\nprint('mean= ',mean, 'std= ',std,'median= ', median)\nq1=de[4]\nq2=de[5]\nq3=de[6]\nprint ('q1= ',q1,'q2= ',q2,'q3= ',q3)\nIQR=q3-q1\nlower_bound= q1-1.5*IQR\nupper_bound= q3+1.5*IQR\nprint(\"Anything outside this range is an outlier:(\",lower_bound,\",\",upper_bound,\")\")\ndf[df[\"square_meters\"]<lower_bound][\"square_meters\"]\nprint('outliers',df[(df[\"square_meters\"]< lower_bound)|(df[\"square_meters\"]>upper_bound)][\"square_meters\"].values)","46080586":"df_cleaned =df[(df[\"square_meters\"]< lower_bound)|(df[\"square_meters\"]>upper_bound)==False]\nprint('dataset befor remove outliers ',df.shape)\nprint('dataset after remove outliers ',df_cleaned.shape)","2099851d":"de= df_cleaned[\"prices\"].describe()\nmean = de[1]\nstd= de[2]\nmedian = de[5]\nprint('mean= ',mean, 'std= ',std,'median= ', median)\nq1=de[4]\nq2=de[5]\nq3=de[6]\nprint ('q1= ',q1,'q2= ',q2,'q3= ',q3)\nIQR=q3-q1\nlower_bound= q1-1.5*IQR\nupper_bound= q3+1.5*IQR\nprint(\"Anything outside this range is an outlier:(\",lower_bound,\",\",upper_bound,\")\")\ndf_cleaned[df_cleaned[\"prices\"]<lower_bound][\"prices\"]\nprint('outliers',df_cleaned[(df_cleaned[\"prices\"]< lower_bound)|(df_cleaned[\"prices\"]>upper_bound)][\"prices\"].values)","3e40ed52":"df_cleaned1 =df_cleaned[(df_cleaned[\"prices\"]< lower_bound)|(df_cleaned[\"prices\"]>upper_bound)==False]\nprint('dataset befor remove outliers ',df_cleaned.shape)\nprint('dataset after remove outliers ',df_cleaned1.shape)","58e747cb":"#plt.figure(figsize=(5,7))\nboxplot=df_cleaned1.boxplot(column='prices')\n#plt.show()\nboxplot","e81868a9":"sns_plot=df_cleaned1['square_meters'].plot(kind='line');\nsns.despine()\nfig = sns_plot.get_figure()\nfig.savefig(\"rosm.png\")","c9798aba":"df_cleaned1.head()","edcf9968":"df_cleaned1.info()","7f4ed149":"from sqlalchemy import create_engine\nengine = create_engine('sqlite:\/\/', echo=False)\ndf_cleaned1.to_sql(\"dfc_t\", con=engine)","68005b25":"dfc_data=pd.read_sql('SELECT regions, count(regions) FROM dfc_t group by regions order by count(regions) desc  ', engine)\ndfc_data","9c4e7122":"dfc_data.plot(kind='bar', color=['pink']);\n","75fa4966":"df_cleaned1['regions' ].value_counts()","7b41a3cc":"sns_plot=df_cleaned1['regions'].value_counts().plot(kind='bar', color=['yellowgreen','mediumorchid','sandybrown','steelblue','yellow','pink']);\nfig = sns_plot.get_figure()\nfig.savefig(\"regions.png\")","11ea7105":"df_cleaned1['RealEstateType'].value_counts()","8a19b057":"\nsns_plot=df_cleaned1['RealEstateType'].value_counts().plot(kind='bar', color=['yellowgreen','mediumorchid','sandybrown','steelblue']);\nsns.despine()\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nfig = sns_plot.get_figure()\nsns.despine()\nfig.savefig(\"types.png\")                   ","149adc36":"df_cleaned1['RealEstateTypeCode']=pd.factorize(df_cleaned1['RealEstateType'])[0]","fb030645":"df_cleaned1['RegionsCode']=pd.factorize(df_cleaned1['regions'])[0]","ac376c1d":"df_cleaned1","138121aa":"df_cleaned1.columns","a14c2d1d":"sns.heatmap(df_cleaned1.corr(),annot=True)","af677b9c":"sns.pairplot(df_cleaned1, plot_kws=dict(alpha=.1, edgecolor='none'))\n","cfa14f75":"from joblib import dump","a42ddbde":"df_cleaned1['predict']=fit.predict(X)\ndf_cleaned1['resid']=df_cleaned1.prices -df_cleaned1.predict","71072ddd":"results.resid.plot(style='o',figsize=(12,8));","c24a97ec":"stats.probplot(df_cleaned1['resid'], dist=\"norm\", plot=plt)\nplt.title(\"Normal Q-Q plot\")\nplt.show()","f39db2fe":"import statsmodels.api as sm\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge #ordinary linear regression + w\/ ridge regularization\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures","10a0d85c":"X=df_cleaned1.loc[:,[ 'square_meters','rooms_number', 'baths_number', 'RealEstateTypeCode','RegionsCode']]\ny=df_cleaned1['prices']\n\n#X, X_test, y, y_test = train_test_split(X, y, test_size=.2, random_state=10)","06b7da60":"lm = LinearRegression() # construct LinearRegression model object\nfit=lm.fit(X, y)\nprint(np.mean(cross_val_score(lm, X, y, cv=5, scoring='r2')))","9f73c781":"poly = PolynomialFeatures(degree=2) \n\nX_Cross_poly = poly.fit_transform(X.values)\nX_test_poly = poly.transform(X_test.values)\n\nlm_poly = LinearRegression() # construct LinearRegression model object\nlm_poly.fit(X_Cross_poly, y)\nprint(np.mean(cross_val_score(lm_poly, X, y, cv=5, scoring='r2')))","ffe6e0b7":"preds = lm.predict(X) # generate predictions (on training data) using fit model\n\nsns.jointplot(x=preds,y=y, kind='reg')","aba5673b":"model=sm.OLS(y,X,data=df_cleaned1)\nresults=model.fit()\nresults.summary()","8e437b8a":"# try to improve our model using LASSO\nc=[ 'square_meters','rooms_number', 'baths_number', 'RealEstateTypeCode','RegionsCode']\nlasso_model = Lasso(alpha = 100000) # this is a VERY HIGH regularization strength!, wouldn't usually be used\nlasso_model.fit(X.loc[:,c], y)\nlist(zip(c, lasso_model.coef_))","761b462e":"X1=df_cleaned1.loc[:,[ 'square_meters', 'baths_number','RegionsCode']]\ny1=df_cleaned1['prices']\n\nX1, X_test1, y1, y_test1 = train_test_split(X1, y1, test_size=.2, random_state=10)","b14ecda7":"lm1 = LinearRegression() # construct LinearRegression model object\nlm1.fit(X1, y1)\nprint(np.mean(cross_val_score(lm1, X1, y1, cv=5, scoring='r2')))","70f8b6f0":"preds1 = lm1.predict(X1) # generate predictions (on training data) using fit model\n\nsns.jointplot(x=preds1,y=y1, kind='reg')","e716bfa7":"# try to improve our model using RIDGE\nX_train_collinear = X.loc[:,c]\n\nX_train_collinear.corr()\nlr_model_ridge = Ridge(alpha = 10000000)\nlr_model_ridge.fit(X_train_collinear, y)\n\nlist(zip(X_train_collinear.columns, lr_model_ridge.coef_))","98db2ab2":"X2=df_cleaned1.loc[:,[ 'square_meters','rooms_number', 'baths_number']]\ny=df_cleaned1['prices']\nlm2 = LinearRegression() # construct LinearRegression model object\nlm2.fit(X2, y)\nprint(np.mean(cross_val_score(lm2, X2, y, cv=5, scoring='r2')))","654d033a":"preds2 = lm2.predict(X2) # generate predictions (on training data) using fit model\n\nsns.jointplot(x=preds2,y=y, kind='reg')","1d0ac7c3":"print(f'Linear Regression test R^2: {lm.score(X_test, y_test):.3f}')","bd9d67ab":"# Baseline model","ed46fa2e":"# Data Cleaning and Convert Strings to int and float","2a99719f":"# Testing our model","64c3d977":"# improveing our model ","104ad92e":"# linear Regression","81b772f0":"# EDA"}}