{"cell_type":{"668e768a":"code","0386704d":"code","3ee11e8d":"code","5e773578":"code","7d3c8b22":"code","801ac578":"code","9bdfbf0f":"code","6464ab8e":"code","bf728e6f":"code","b658ef1b":"code","652a43a8":"code","8c018b65":"code","c3fc301a":"code","788d0e5f":"code","8ed86615":"code","e3b1482e":"code","a18db684":"code","07c17b6b":"code","9a9f4225":"code","300f34e5":"markdown","7c00ae2b":"markdown","bfcf38b7":"markdown","21b44068":"markdown"},"source":{"668e768a":"import numpy as np \nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nsns.set(rc={'figure.figsize':(7 ,5)})","0386704d":"train_df = pd.read_csv(\"..\/input\/train.csv\")\nmerchants_df = pd.read_csv(\"..\/input\/merchants.csv\")\nhistorical_transactions_df = pd.read_csv(\"..\/input\/historical_transactions.csv\")\nnew_merchant_transactions_df = pd.read_csv(\"..\/input\/new_merchant_transactions.csv\")","3ee11e8d":"print(train_df.shape)\ntrain_df.head()","5e773578":"train_df.describe()","7d3c8b22":"#There are some obvious outliers in 'target'\nsns.distplot(train_df.target.values, kde=False)\nprint (f'{train_df[train_df.target < -10].target.shape[0]} outliers')","801ac578":"train_df = train_df[train_df.target > -10]\nsns.pairplot(train_df[['feature_1', 'feature_2', 'feature_3', 'target']])","9bdfbf0f":"print(merchants_df.shape)\nmerchants_df.head()","6464ab8e":"#There are some NaN values\nmerchants_df.isna().sum()","bf728e6f":"merchants_df.dropna(inplace=True)\nnumerical_cols = ['numerical_1', 'numerical_2', 'avg_sales_lag3',\n                  'avg_purchases_lag3','active_months_lag3',\n                  'avg_sales_lag6', 'avg_purchases_lag6',\n                  'active_months_lag6', 'avg_sales_lag12', \n                  'avg_purchases_lag12', 'active_months_lag12']\n\nmerchants_df[numerical_cols].describe()","b658ef1b":"cat_cols = [ 'category_1', 'category_2',  'category_4', \n          'most_recent_purchases_range', 'most_recent_sales_range',\n           'merchant_group_id', 'merchant_category_id', 'subsector_id']\n\nfor col in cat_cols:\n    cat_num = merchants_df[col].value_counts().index.shape[0]\n    print(f'{cat_num} unique values in {col}')","652a43a8":"print('Almost 14% of values  belong to merchant group #35')\nrows = merchants_df.shape[0]\nmerchants_df.merchant_group_id.value_counts()[:5]\/rows*100","8c018b65":"#Missing values\nhistorical_transactions_df.isna().sum()","c3fc301a":"print(historical_transactions_df.shape)\nhistorical_transactions_df.head()","788d0e5f":"cat_cols = [ 'authorized_flag', 'card_id', 'city_id', 'category_1', \n             'category_3', 'merchant_category_id', 'merchant_id', \n             'category_2', 'state_id', 'subsector_id']\n\nfor col in cat_cols:\n    cat_num = historical_transactions_df[col].value_counts().index.shape[0]\n    print(f'{cat_num} unique values in {col}')","8ed86615":"#example of continuous data on single card_id\nidx = np.random.choice(historical_transactions_df.card_id)\ndf = historical_transactions_df[historical_transactions_df.card_id == idx]\nsns.pairplot(df[['month_lag', 'purchase_amount']])","e3b1482e":"print(new_merchant_transactions_df.shape)\nnew_merchant_transactions_df.head()","a18db684":"new_merchant_transactions_df.isna().sum()","07c17b6b":"cat_cols = [ 'authorized_flag', 'card_id', 'city_id', 'category_1', \n             'category_3', 'merchant_category_id', 'merchant_id', \n             'category_2', 'state_id', 'subsector_id']\n\nfor col in cat_cols:\n    cat_num = new_merchant_transactions_df[col].value_counts().index.shape[0]\n    print(f'{cat_num} unique values in {col}')","9a9f4225":"#example of continuous data on single card_id\nidx = np.random.choice(new_merchant_transactions_df.card_id)\ndf = new_merchant_transactions_df[new_merchant_transactions_df.card_id == idx]\nsns.pairplot(df[['month_lag', 'purchase_amount']])","300f34e5":"# Train","7c00ae2b":"# New Merchant Transactions\n\n**historical_transactions.csv** and **new_merchant_transactions.csv** are designed to be joined with **train.csv**, ** test.csv**, and **merchants.csv**. They contain information about transactions for each card.","bfcf38b7":"# Merchants\n\nmerchants can be joined with the transaction sets to provide additional merchant-level information.","21b44068":"# Transactions\n\n**historical_transactions.csv**  - up to 3 months' worth of historical transactions for each card_id"}}