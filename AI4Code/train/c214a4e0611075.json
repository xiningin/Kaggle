{"cell_type":{"e8251d3b":"code","799206bb":"code","88cfb2a0":"code","98752f32":"code","c09c91d5":"code","0afd3c32":"code","c94f7701":"code","c39143b9":"code","2dd8ed76":"code","274fb9ba":"code","058b0248":"code","18dce26e":"code","fb04aa0e":"code","0708f380":"code","e175842c":"code","142a65e7":"code","45bcc4e0":"code","beac4ab2":"code","d2713dd7":"code","ba583485":"code","340ba8e4":"code","3625ea96":"code","0eb526e5":"code","39119b06":"code","e833d685":"code","72d8f368":"code","0023caca":"code","7456e9e7":"markdown","e357f4f1":"markdown","5e94eeaa":"markdown","77a935e4":"markdown","d4bfed8c":"markdown","3d8a08cb":"markdown","7ff75ee6":"markdown","eaa7a610":"markdown","cb817842":"markdown","123f3659":"markdown","e87a9b67":"markdown"},"source":{"e8251d3b":"import pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n\n# \ub178\ud2b8\ubd81 \uc548\uc5d0 \uadf8\ub798\ud504\ub97c \uadf8\ub9ac\uae30 \uc704\ud574\n%matplotlib inline\n\n# \uadf8\ub798\ud504\uc5d0\uc11c \uaca9\uc790\ub85c \uc22b\uc790 \ubc94\uc704\uac00 \ub208\uc5d0 \uc798 \ub744\ub3c4\ub85d ggplot \uc2a4\ud0c0\uc77c\uc744 \uc0ac\uc6a9\nplt.style.use('ggplot')\n\n# \uadf8\ub798\ud504\uc5d0\uc11c \ub9c8\uc774\ub108\uc2a4 \ud3f0\ud2b8 \uae68\uc9c0\ub294 \ubb38\uc81c\uc5d0 \ub300\ud55c \ub300\ucc98\nmpl.rcParams['axes.unicode_minus'] = True","799206bb":"print ('\ubc84\uc804: ', mpl.__version__)\nprint ('\uc124\uce58 \uc704\uce58: ', mpl.__file__)\nprint ('\uc124\uc815 \uc704\uce58: ', mpl.get_configdir())\nprint ('\uce90\uc2dc \uc704\uce58: ', mpl.get_cachedir())","88cfb2a0":"\nimport matplotlib.font_manager as fm\n","98752f32":"font_list = fm.findSystemFonts(fontpaths=None, fontext='ttf')\n\n# ttf \ud3f0\ud2b8 \uc804\uccb4\uac2f\uc218\nprint(len(font_list)) ","c09c91d5":"font_list[0:]","0afd3c32":"# OSX \uc758 \uc124\uce58 \ub41c \ud3f0\ud2b8\ub97c \uac00\uc838\uc624\ub294 \ud568\uc218\nfont_list_mac = fm.OSXInstalledFonts()\nprint(len(font_list_mac))","c94f7701":"train = pd.read_csv(\"..\/input\/train.csv\", parse_dates=[\"datetime\"],encoding=\"ISO-8859-1\")\ntrain.shape\n#\ubcf4\ud3b8\uc801 \uc778\ucf54\ub529","c39143b9":"# train.columns\n# train.dtypes\ntrain.info()\n#\ub370\uc774\ud130 \uc815\ubcf4","2dd8ed76":"train.head()","274fb9ba":"train.temp.describe()","058b0248":"train.isnull().sum()\n#null\uac12 \uac2f\uc218 \ud655\uc778","18dce26e":"import missingno as msno\n\nmsno.matrix(train, figsize=(12,5))","fb04aa0e":"train[\"year\"] = train[\"datetime\"].dt.year\ntrain[\"month\"] = train[\"datetime\"].dt.month\ntrain[\"day\"] = train[\"datetime\"].dt.day\ntrain[\"hour\"] = train[\"datetime\"].dt.hour\ntrain[\"minute\"] = train[\"datetime\"].dt.minute\ntrain[\"second\"] = train[\"datetime\"].dt.second\ntrain.shape","0708f380":"train.head()","e175842c":"figure, ((ax1,ax2,ax3), (ax4,ax5,ax6)) = plt.subplots(nrows=2, ncols=3)\nfigure.set_size_inches(18,8)\n#\uadf8\ub798\ud504 \uad6c\uc131 \uc124\uc815\nsns.barplot(data=train, x=\"year\", y=\"count\", ax=ax1)\nsns.barplot(data=train, x=\"month\", y=\"count\", ax=ax2)\nsns.barplot(data=train, x=\"day\", y=\"count\", ax=ax3)\nsns.barplot(data=train, x=\"hour\", y=\"count\", ax=ax4)\nsns.barplot(data=train, x=\"minute\", y=\"count\", ax=ax5)\nsns.barplot(data=train, x=\"second\", y=\"count\", ax=ax6)\n\nax1.set(ylabel='Count',title=\"\uc5f0\ub3c4\ubcc4 \ub300\uc5ec\ub7c9\")\nax2.set(xlabel='month',title=\"\uc6d4\ubcc4 \ub300\uc5ec\ub7c9\")\nax3.set(xlabel='day', title=\"\uc77c\ubcc4 \ub300\uc5ec\ub7c9\")\nax4.set(xlabel='hour', title=\"\uc2dc\uac04\ubcc4 \ub300\uc5ec\ub7c9\")","142a65e7":"fig, axes = plt.subplots(nrows=2,ncols=2)\nfig.set_size_inches(12, 10)\nsns.boxplot(data=train,y=\"count\",orient=\"v\",ax=axes[0][0])\nsns.boxplot(data=train,y=\"count\",x=\"season\",orient=\"v\",ax=axes[0][1])\nsns.boxplot(data=train,y=\"count\",x=\"hour\",orient=\"v\",ax=axes[1][0])\nsns.boxplot(data=train,y=\"count\",x=\"workingday\",orient=\"v\",ax=axes[1][1])\n\naxes[0][0].set(ylabel='Count',title=\"\ub300\uc5ec\ub7c9\")\naxes[0][1].set(xlabel='Season', ylabel='Count',title=\"\uacc4\uc808\ubcc4 \ub300\uc5ec\ub7c9\")\naxes[1][0].set(xlabel='Hour Of The Day', ylabel='Count',title=\"\uc2dc\uac04\ubcc4 \ub300\uc5ec\ub7c9\")\naxes[1][1].set(xlabel='Working Day', ylabel='Count',title=\"\uadfc\ubb34\uc77c \uc5ec\ubd80\uc5d0 \ub530\ub978 \ub300\uc5ec\ub7c9\")","45bcc4e0":"train[\"dayofweek\"] = train[\"datetime\"].dt.dayofweek\ntrain.shape","beac4ab2":"train[\"dayofweek\"].value_counts()","d2713dd7":"fig,(ax1,ax2,ax3,ax4,ax5)= plt.subplots(nrows=5)\nfig.set_size_inches(18,25)\n\nsns.pointplot(data=train, x=\"hour\", y=\"count\", ax=ax1)\n\nsns.pointplot(data=train, x=\"hour\", y=\"count\", hue=\"workingday\", ax=ax2)\n\nsns.pointplot(data=train, x=\"hour\", y=\"count\", hue=\"dayofweek\", ax=ax3)\n\nsns.pointplot(data=train, x=\"hour\", y=\"count\", hue=\"weather\", ax=ax4)\n\nsns.pointplot(data=train, x=\"hour\", y=\"count\", hue=\"season\", ax=ax5)","ba583485":"corrMatt = train[[\"temp\", \"atemp\", \"casual\", \"registered\", \"humidity\", \"windspeed\", \"count\"]]\ncorrMatt = corrMatt.corr()\nprint(corrMatt)\n\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False","340ba8e4":"fig, ax = plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(corrMatt, mask=mask,vmax=.8, square=True,annot=True)","3625ea96":"fig,(ax1,ax2,ax3) = plt.subplots(ncols=3)\nfig.set_size_inches(12, 5)\nsns.regplot(x=\"temp\", y=\"count\", data=train,ax=ax1)\nsns.regplot(x=\"windspeed\", y=\"count\", data=train,ax=ax2)\nsns.regplot(x=\"humidity\", y=\"count\", data=train,ax=ax3)","0eb526e5":"#Null\ub300\uc2e0 0\uc73c\ub85c \uae30\ub85d","39119b06":"def concatenate_year_month(datetime):\n    return \"{0}-{1}\".format(datetime.year, datetime.month)\n#\ub144-\uc6d4 \ud615\ud0dc\ub85c \ubcc0\ud658\ntrain[\"year_month\"] = train[\"datetime\"].apply(concatenate_year_month)\n\nprint(train.shape)\ntrain[[\"datetime\", \"year_month\"]].head()","e833d685":"fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2)\nfig.set_size_inches(18, 4)\n\nsns.barplot(data=train, x=\"year\", y=\"count\", ax=ax1)\nsns.barplot(data=train, x=\"month\", y=\"count\", ax=ax2)\n\nfig, ax3 = plt.subplots(nrows=1, ncols=1)\nfig.set_size_inches(18, 4)\n\nsns.barplot(data=train, x=\"year_month\", y=\"count\", ax=ax3)","72d8f368":"# trainWithoutOutliers\ntrainWithoutOutliers = train[np.abs(train[\"count\"] - train[\"count\"].mean()) <= (3*train[\"count\"].std())]\n#3\ud45c\uc900\ud3b8\ucc28\ub97c \ub118\ub294 \uac12\uac12\uc740 \uc81c\uc678\nprint(train.shape)\nprint(trainWithoutOutliers.shape)","0023caca":"# count\uac12\uc758 \ub370\uc774\ud130 \ubd84\ud3ec\ub3c4\ub97c \ud30c\uc545\n\nfigure, axes = plt.subplots(ncols=2, nrows=2)\nfigure.set_size_inches(12, 10)\n\nsns.distplot(train[\"count\"], ax=axes[0][0])\nstats.probplot(train[\"count\"], dist='norm', fit=True, plot=axes[0][1])\nsns.distplot(np.log(trainWithoutOutliers[\"count\"]), ax=axes[1][0])\nstats.probplot(np.log1p(trainWithoutOutliers[\"count\"]), dist='norm', fit=True, plot=axes[1][1])","7456e9e7":"\ud655\ub960 \uadf8\ub9bc\uc744 \ud1b5\ud574 \uc815\uaddc\uc131 \ud655\uc778\n\uc774\uc0c1\uce58\ub97c \ube7c\uba74 \uc815\uaddc\ubd84\ud3ec\ub97c \uc880\ub354 \ub530\ub984","e357f4f1":"* \ud48d\uc18d\uc758 \uacbd\uc6b0 0\uc5d0 \uc22b\uc790\uac00 \ubab0\ub824 \uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc778\ub2e4. \uc544\ub9c8\ub3c4 \uad00\uce21\ub418\uc9c0 \uc54a\uc740 \uc218\uce58\uc5d0 \ub300\ud574 0\uc73c\ub85c \uae30\ub85d\ub41c \uac83\uc774 \uc544\ub2d0\uae4c \ucd94\uce21\ud574 \ubcf8\ub2e4.","5e94eeaa":"* \uc5f0\ub3c4\ubcc4 \ub300\uc5ec\ub7c9\uc740 2011\ub144 \ubcf4\ub2e4 2012\ub144\uc774 \ub354 \ub9ce\ub2e4.\n* \uc6d4\ubcc4 \ub300\uc5ec\ub7c9\uc740 6\uc6d4\uc5d0 \uac00\uc7a5 \ub9ce\uace0 7~10\uc6d4\ub3c4 \ub300\uc5ec\ub7c9\uc774 \ub9ce\ub2e4. \uadf8\ub9ac\uace0 1\uc6d4\uc5d0 \uac00\uc7a5 \uc801\ub2e4.\n* \uc77c\ubcc4\ub300\uc5ec\ub7c9\uc740 1\uc77c\ubd80\ud130 19\uc77c\uae4c\uc9c0\ub9cc \uc788\uace0 \ub098\uba38\uc9c0 \ub0a0\uc9dc\ub294 test.csv\uc5d0 \uc788\ub2e4. \uadf8\ub798\uc11c \uc774 \ub370\uc774\ud130\ub294 \ud53c\ucc98\ub85c \uc0ac\uc6a9\ud558\uba74 \uc548 \ub41c\ub2e4.\n* \uc2dc\uac04 \ub300 \ub300\uc5ec\ub7c9\uc744 \ubcf4\uba74 \ucd9c\ud1f4\uadfc \uc2dc\uac04\uc5d0 \ub300\uc5ec\ub7c9\uc774 \ub9ce\uc740 \uac83 \uac19\ub2e4. \ud558\uc9c0\ub9cc \uc8fc\ub9d0\uacfc \ub098\ub204\uc5b4 \ubcfc \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4.\n* \ubd84, \ucd08\ub3c4 \ub2e4 0\uc774\uae30 \ub54c\ubb38\uc5d0 \uc758\ubbf8\uac00 \uc5c6\ub2e4.","77a935e4":"\ub370\uc774\ud130\ub97c \ub144\/\uc6d4\/\uc77c\/\uc2dc\/\ubd84\/\ucd08 \ub2e8\uc704\ub85c \uc790\ub984","d4bfed8c":"\ucc38\uace0 : [EDA & Ensemble Model (Top 10 Percentile) | Kaggle](https:\/\/www.kaggle.com\/viveksrinivasan\/eda-ensemble-model-top-10-percentile)","3d8a08cb":"count\ubcc0\uc218\uac00 \uc624\ub978\ucabd\uc5d0 \uce58\uc6b0\uccd0\uc838 \uc788\ub2e4. \ub300\ubd80\ubd84\uc758 \uae30\uacc4\ud559\uc2b5\uc740 \uc885\uc18d\ubcc0\uc218\uac00 normal \uc774\uc5b4\uc57c \ud558\uae30\uc5d0 \uc815\uaddc\ubd84\ud3ec\ub97c \uac16\ub294 \uac83\uc774 \ubc14\ub78c\uc9c1\ud558\ub2e4. \ub300\uc548\uc73c\ub85c outlier data\ub97c \uc81c\uac70\ud558\uace0 \"count\"\ubcc0\uc218\uc5d0 \ub85c\uadf8\ub97c \uc50c\uc6cc \ubcc0\uacbd\ud574 \ubd10\ub3c4 \uc815\uaddc\ubd84\ud3ec\ub97c \ub530\ub974\uc9c0\ub294 \uc54a\uc9c0\ub9cc \uc774\uc804 \uadf8\ub798\ud504\ubcf4\ub2e4\ub294 \uc880 \ub354 \uc790\uc138\ud788 \ud45c\ud604\ud558\uace0 \uc788\ub2e4.","7ff75ee6":"Null \uac12\uc73c \uc5c6\uc74c","eaa7a610":"* 2011\ub144\ubcf4\ub2e4 2012\ub144\uc758 \ub300\uc5ec\ub7c9\uc774 \ub354 \ub9ce\ub2e4.\n* \uaca8\uc6b8\ubcf4\ub2e4\ub294 \uc5ec\ub984\uc5d0 \ub300\uc5ec\ub7c9\uc774 \ub9ce\ub2e4.\n* 2011\ub144\uacfc 2012\ub144\uc758 \uc6d4\ubcc4 \ub370\uc774\ud130\ub97c \uc774\uc5b4\ubcf4\uba74 \uc804\uccb4\uc801\uc73c\ub85c \uc99d\uac00\ud558\ub294 \ucd94\uc138\uc774\ub2e4.","cb817842":"* \uc628\ub3c4, \uc2b5\ub3c4, \ud48d\uc18d\uc740 \uac70\uc758 \uc5f0\uad00\uad00\uacc4\uac00 \uc5c6\ub2e4. \n* \ub300\uc5ec\ub7c9\uacfc \uac00\uc7a5 \uc5f0\uad00\uc774 \ub192\uc740 \uac74 registered \ub85c \ub4f1\ub85d \ub41c \ub300\uc5ec\uc790\uac00 \ub9ce\uc9c0\ub9cc, test \ub370\uc774\ud130\uc5d0\ub294 \uc774 \uac12\uc774 \uc5c6\ub2e4.\n* atemp\uc640 temp\ub294 0.98\ub85c \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc9c0\ub9cc \uc628\ub3c4\uc640 \uccb4\uac10\uc628\ub3c4\ub85c \ud53c\ucc98\ub85c \uc0ac\uc6a9\ud558\uae30\uc5d0 \uc801\ud569\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4.","123f3659":"![bike-img](https:\/\/kaggle2.blob.core.windows.net\/competitions\/kaggle\/3948\/logos\/front_page.png)\nData Fields\nfrom [Bike Sharing Demand | Kaggle](https:\/\/www.kaggle.com\/c\/bike-sharing-demand\/data)\n\n\n### Description\n* datetime - hourly date + timestamp  \n* season -  1 = spring, 2 = summer, 3 = fall, 4 = winter \n* holiday - whether the day is considered a holiday\n* workingday - whether the day is neither a weekend nor holiday\n* weather \n    - 1: Clear, Few clouds, Partly cloudy, Partly cloudy \n    - 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist \n    - 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds \n    - 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \n* temp - temperature in Celsius\n* atemp - \"feels like\" temperature in Celsius\n* humidity - relative humidity\n* windspeed - wind speed\n* casual - number of non-registered user rentals initiated\n* registered - number of registered user rentals initiated\n* count - number of total rentals\n\n### Evaluation\nSubmissions are evaluated one the Root Mean Squared Logarithmic Error (RMSLE). ","e87a9b67":"\ubd84\ub958\uc640 \ud68c\uadc0\uc911 \ud68c\uadc0\uc640 \uad00\ub828 \ub41c \ubb38\uc81c\n=> \uc790\uc804\uac70 \ub300\uc5ec\ub7c9\uc744 \uc608\uce21\ud558\ub294 \ubb38\uc81c\uc774\uae30 \ub54c\ubb38\uc5d0"}}