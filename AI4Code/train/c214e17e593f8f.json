{"cell_type":{"7bb794a2":"code","b64e62ca":"code","4e4a531d":"code","c91b5f0c":"code","3ababbc1":"code","208ea2f0":"code","fb4040af":"code","5b584c3d":"code","5f274b71":"code","9a39c7c7":"code","1cb4f491":"code","84ef79d0":"code","4a69e02b":"code","62d0e8ec":"code","68135a1e":"code","d376fa05":"code","d05b1c11":"code","ad33a706":"code","5dda97a9":"code","bf3db1a4":"code","c4f7bb1b":"code","471ac42e":"code","eec1e26c":"markdown","33511ff4":"markdown","3ad0fda3":"markdown","33ec03f7":"markdown","a462e2fd":"markdown","01e7e34a":"markdown","71d498d9":"markdown","716147e8":"markdown","1866b088":"markdown"},"source":{"7bb794a2":"pd.get_dummies(df,drop_first=True).head()","b64e62ca":"# KDD cup orange challenge\n# Take the most frequent categories","4e4a531d":"# X1 is feature name\ndf.X1.value_counts().sort_values(ascending=False).head(10)","c91b5f0c":"lst_10=df.X1.value_counts().sort_values(ascending=False).head(10).index\nlst_10=list(lst_10)","3ababbc1":"for categories in lst_10:\n    df[categories]=np.where(df['X1']==categories,1,0)","208ea2f0":"# Creating a df\ndays=[today_date-datetime.timedelta(x) for x in range(0,15)]\n\ndata=pd.DataFrame(days)\ndata.columns=[\"Day\"]\n\ndata['weekday']=data['Day'].dt.weekday_name","fb4040af":"dictionary={'Monday':1,'Tuesday':2,'Wednesday':3,'Thursday':4,'Friday':5,'Saturday':6,'Sunday':7}\n\ndata['weekday_ordinal']=data['weekday'].map(dictionary)","5b584c3d":"# Prining no. of unique categories in each feature\n\nfor feature in train_set.columns[:]:\n    print(feature,\":\",len(train_set[feature].unique()),'labels')","5f274b71":"# replace category by their value counts\n\ncountry_map=train_set['Country'].value_counts().to_dict()\n\ntrain_set['Country']=train_set['Country'].map(country_map)","9a39c7c7":"df['Cabin'].fillna('Missing',inplace=True)\n\ndf['Cabin']=df['Cabin'].astype(str).str[0]","1cb4f491":"df.groupby(['Cabin'])['Survived'].mean()\n\nordinal_labels=df.groupby(['Cabin'])['Survived'].mean().sort_values().index","84ef79d0":"ordinal_labels2={k:i for i,k in enumerate(ordinal_labels,0)}\nordinal_labels2","4a69e02b":"df['Cabin_ordinal_labels']=df['Cabin'].map(ordinal_labels2)","62d0e8ec":"mean_ordinal=df.groupby(['Cabin'])['Survived'].mean().to_dict()","68135a1e":"f['mean_ordinal_encode']=df['Cabin'].map(mean_ordinal)\ndf.head()","d376fa05":"### Replacing\ndf['Cabin'].fillna('Missing',inplace=True)","d05b1c11":"df['Cabin']=df['Cabin'].astype(str).str[0]","ad33a706":"prob_df=df.groupby(['Cabin'])['Survived'].mean()\n\nprob_df=pd.DataFrame(prob_df)","5dda97a9":"prob_df['Died']=1-prob_df['Survived']","bf3db1a4":"prob_df['Probability_ratio']=prob_df['Survived']\/prob_df['Died']","c4f7bb1b":"probability_encoded=prob_df['Probability_ratio'].to_dict()","471ac42e":"df['Cabin_encoded']=df['Cabin'].map(probability_encoded)","eec1e26c":"### Probability Ratio Encoding\nProbability of Survived based on Cabin--- Categorical Feature\n\nProbability of Not Survived---1-pr(Survived)\n\npr(Survived)\/pr(Not Survived)\n\nDictonary to map cabin with probability\n\nreplace with the categorical feature","33511ff4":"### Count Or Frequency Encoding","3ad0fda3":"**Advantages**\n\nEasy To Use\n\nNot increasing feature space  \n\n**Disadvantages**\n\nIt will provide same weight if the frequencies are same","33ec03f7":"### Mean Encoding\n\nProvide Monotonic relationship variable and target","a462e2fd":"#### One Hot Encoding","01e7e34a":"### Target Guided Ordinal Encoding\n\nOrdering the labels according to the target\n\nReplace the labels by the joint probability of being 1 or 0","71d498d9":"##### Onehotencoding with many categories in a feature","716147e8":"## Handle Categorical Features\n\nVarious Encoding techniques","1866b088":"#### Ordinal Number Encoding"}}