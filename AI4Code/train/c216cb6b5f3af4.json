{"cell_type":{"015b88a5":"code","c416fdad":"code","3a2397d5":"code","bc965366":"code","7ea17fb7":"code","28efbf60":"code","372348c2":"code","34dde9ce":"code","175d8674":"code","0374d675":"code","79456373":"code","7635904d":"code","3d920422":"code","4b7bcb6d":"markdown"},"source":{"015b88a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c416fdad":"import keras\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Dense, Flatten, Dropout, BatchNormalization\nfrom keras.models import Sequential\nfrom sklearn.model_selection import train_test_split","3a2397d5":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntrain.head()","bc965366":"test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ntest.head()","7ea17fb7":"X = train.iloc[:,1:]\ny = train.iloc[:,0]","28efbf60":"# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=10, stratify=y)","372348c2":"# Reshape data\nX_train = X_train.values.reshape(X_train.shape[0], 28, 28, 1)\nX_test = X_test.values.reshape(X_test.shape[0], 28, 28, 1)\n\ntest = test.values.reshape(test.shape[0], 28, 28, 1)","34dde9ce":"# Normalization\nX_train = X_train \/ 255\nX_test = X_test \/ 255\n\ntest = test \/ 255","175d8674":"# One Hot Encoding\ny_train = keras.utils.to_categorical(y_train, 10)\ny_test = keras.utils.to_categorical(y_test, 10)","0374d675":"# CNN Network\nmodel = Sequential()\n\nmodel.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, kernel_size=(5, 5), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(120, activation='relu'))\nmodel.add(Dense(84, activation='relu'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(loss=keras.metrics.categorical_crossentropy, optimizer=keras.optimizers.Adam(), metrics=['accuracy'])","79456373":"model.summary()","7635904d":"model.fit(X_train, y_train, batch_size=128, epochs=20, verbose=1, validation_data=(X_test, y_test))\nscore = model.evaluate(X_test, y_test)\nprint('Test Loss:', score[0])\nprint('Test accuracy:', score[1])","3d920422":"sub = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\n\ntest_pred = model.predict_classes(test)\n\nsub['Label'] = test_pred\n\nsub.to_csv(\"submission_v0.csv\", index=False)\n\nsub.head()","4b7bcb6d":"<font color='blue'> <b><i>Here, I have impplemented CNN architecture using Keras API. Please upvote if you found it helpful. :) <\/i><\/b><\/font>"}}