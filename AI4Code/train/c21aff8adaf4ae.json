{"cell_type":{"d2e87b4e":"code","29946ffe":"code","cdeafe98":"code","ce86c061":"code","f0f06ad9":"code","14c6d205":"code","4f7477f3":"code","d49ad410":"code","eeca0c3c":"code","78d4cb47":"code","8590357a":"code","704e9b40":"code","b05a3ae5":"code","90066a9e":"code","666e270c":"code","4e0bc9d1":"code","e70c3616":"code","127741da":"code","8d9ef1a3":"code","046dbe37":"code","6882c3ab":"code","60242ddc":"code","996af939":"code","36476f93":"code","86de0767":"code","0a4cb9d2":"code","01873bba":"code","be3d10c1":"code","39008cab":"code","65f7dee7":"code","79085427":"code","b407cf80":"markdown","6d475af8":"markdown","37fa34de":"markdown","87bf7096":"markdown","a670ed6d":"markdown","14e6c5a2":"markdown","1be73e46":"markdown","bf9af6dc":"markdown","c24789c2":"markdown","43635946":"markdown","3e426556":"markdown","fea30e89":"markdown","197abc5b":"markdown","8db0291a":"markdown","67e39d61":"markdown","95faff63":"markdown"},"source":{"d2e87b4e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","29946ffe":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objects as go\ninit_notebook_mode(connected=True)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","cdeafe98":"movie = pd.read_csv('\/kaggle\/input\/movies-dataset-for-feature-extracion-prediction\/movies.csv')\nmovie.head()","ce86c061":"import pandasql as psql # using sql for some exploration\n\nQ1 = \"\"\"  \n    with temp as (select cast(replace(VOTES,\",\",\"\") as integer) as VOTES from movie)\n    \n    select MOVIES, YEAR, GENRE,RATING, cast(replace(VOTES,\",\",\"\") as integer) as VOTES\n    from movie \n    where RATING >= (select avg(RATING) as avr_rating from movie)\n    and VOTES >= (select avg(VOTES) from temp)\n    order by RATING desc, VOTES desc\n    limit 20\n    \"\"\"\npsql.sqldf(Q1)","f0f06ad9":"Q2 = \"\"\"\n     select GENRE, max(RATING) as highest_rate\n     from movie  \n     group by GENRE\n     order by highest_rate desc\n     limit 10\n     \"\"\"\npsql.sqldf(Q2)","14c6d205":"# Checking for Missing Values\nmovie.isna().sum()","4f7477f3":"print(\"Missing Values:\\n\")\nfor col in movie.columns:\n    missing = movie[col].isna().sum()\n    percent = missing \/ movie.shape[0] * 100\n    print(\"%s: %.2f%% (%d)\" % (col,percent,missing))","d49ad410":"movie.info()","eeca0c3c":"# Removing \"\\n\" from GENRE, ONE-LINE, and STARS columns\nfor col in ['GENRE','ONE-LINE','STARS']:\n    movie[col] = movie[col].str.replace(\"\\n\",\"\").str.strip()\n\nmovie.head()","78d4cb47":"# Creating New Column Director and Stars by extracting Director(s) and Stars from orignial STARS column\ndef extract_director(direc):\n    if 'Director' in direc or 'Directors' in direc:\n        director = direc.strip().split(\"|\")[0] # The Second Half is the stars\n        return director.split(\":\")[1] # Return the Director name\n    else:\n        return ''\n\ndef extract_stars(stars):\n    if 'Star' not in stars or 'Stars' not in stars:\n        return ''\n    else:\n        return stars.split(\":\")[-1] # last value in this list will be the stars\n\nmovie['Director'] = movie['STARS'].apply(lambda d: extract_director(d))\nmovie['Stars'] = movie['STARS'].apply(lambda s: extract_stars(s))\n\n# View head of these columns\nmovie[['STARS','Director','Stars']].head()","8590357a":"# Extracting Year from original YEARS column\n\nmovie['Year'] = movie['YEAR'].str.extract(r'([0-9]{4}\u2013.*|[0-9]{4})')\nmovie['Year'] = movie['Year'].str.strip().replace(\")\",\"\")\n\ndef extract_year(year):\n    if year[-3:] == '\u2013 )':\n        return year.replace('\u2013 )',\"\u2013\")\n    else:\n        return year.replace(')',\"\")\n\nmovie['Year'] = movie['Year'].fillna('Unknown')\nmovie['Year'] = movie['Year'].apply(lambda y: extract_year(y))\n    \nyear_count = movie[movie['Year'] != 'Unknown']['Year'].value_counts().reset_index().rename(columns = {'Year':'Count','index':'Year'})\nyear_count.head()","704e9b40":"colors = ['paleturquoise'] * 10\ncolors[0],colors[2],colors[4],colors[-1] = 'darkcyan','darkcyan','darkcyan','darkcyan'\n\nfig = px.bar(data_frame = year_count.head(10),\n             x = 'Year', y = 'Count')\n\nfig.update_traces(marker_color = colors)\n\nfig.update_layout(title = 'Year(s) Distribution')\n\nfig.show()","b05a3ae5":"print(\"Statistical value of [{}]\".format('Rating'))\n\n# Average Rating \nprint(\"Mean:\", round(movie['RATING'].mean(),2))\n\n# Median Rating\nprint(\"Median:\", movie['RATING'].median())\n\n# Max Rating\nprint(\"Max:\", movie['RATING'].max())","90066a9e":"fig = px.bar(data_frame = movie['RATING'].value_counts().reset_index().head(10),\n             x = 'index', y = 'RATING',\n             title = 'Rating Distribution')\n\nfig.update_yaxes(title = 'Count')\n\nfig.update_xaxes(type ='category',\n                 title = 'Rating (out of 10)')\n\nfig.show()","666e270c":"fig = px.bar(data_frame = movie['RunTime'].value_counts().reset_index().head(10),\n             x = 'index', y = 'RunTime',\n             title = 'Runtime Distribution')\n\nfig.update_yaxes(title = 'Count')\n\nfig.update_xaxes(type ='category',\n                 title = 'Runtime (mins)')\n\nfig.show()","4e0bc9d1":"movie.info()","e70c3616":"movie['VOTES'] = movie['VOTES'].str.replace(\",\",\"\")\nmovie['VOTES'] ","127741da":"movie['VOTES'] = movie['VOTES'].fillna(0)\nmovie['VOTES'] = movie['VOTES'].astype(int)\nmovie['VOTES'].sort_values(ascending = False)","8d9ef1a3":"movie_genre = movie['GENRE'].value_counts().reset_index().rename(columns={'GENRE':'Count','index':'Genre'})\n\nfig = px.bar(data_frame = movie_genre.sort_values(by='Count',ascending = False).head(10),\n             x = 'Genre', y = 'Count')\n\nfig.update_layout(title = 'Top 10 Genre Combination')\n\nfig.show()","046dbe37":"# Count number of Genre\nfrom collections import Counter\n\ngenre_raw = movie['GENRE'].dropna().to_list()\ngenre_list = list()\n\nfor genres in genre_raw:\n    genres = genres.split(\", \")\n    for g in genres:\n        genre_list.append(g)\n        \ngenre_df = pd.DataFrame.from_dict(Counter(genre_list), orient = 'index').rename(columns = {0:'Count'})\ngenre_df.head()","6882c3ab":"# Genre Count Ditribution\nfig = px.pie(data_frame = genre_df,\n             values = 'Count',\n             names = genre_df.index,\n             color_discrete_sequence = px.colors.qualitative.Safe)\n\nfig.update_traces(textposition = 'inside',\n                  textinfo = 'label+percent',\n                  pull = [0.05] * len(genre_df.index.to_list()))\n\nfig.update_layout(title = {'text':'Genre Distribution'},\n                  legend_title = 'Gender',\n                  uniformtext_minsize=13,\n                  uniformtext_mode='hide',\n                  font = dict(\n                      family = \"Courier New, monospace\",\n                      size = 18,\n                      color = 'black'\n                  ))\n\n\nfig.show()","60242ddc":"fig = px.bar(data_frame = movie[~(movie['Director'] == \"\")]['Director'].value_counts().reset_index().head(10),\n             x = 'index', y = 'Director')\n\nfig.update_layout(title = 'Director(s) Distribution',\n                  xaxis_title = 'Director(s)',\n                  yaxis_title = 'Count')\n\nfig.show()\n\n","996af939":"stars_list = list()\n\nfor stars in movie[movie['Stars'] != \"\"]['Stars'].to_list():\n    stars = stars.split(\", \")\n    for s in stars:\n        stars_list.append(s)\n\nstars_df = pd.DataFrame.from_dict(Counter(stars_list), orient = 'index').rename(columns = {0:'Count'})\nstars_df = stars_df.sort_values(by='Count',ascending = False)\n\nfig = px.bar(data_frame = stars_df.head(10),\n             x = stars_df.head(10).index, y = 'Count')\n\nfig.update_layout(title = 'Top 10 Stars that appeared the most',\n                  xaxis_title = 'Stars',\n                  yaxis_title = 'Count')\n\n\nfig.show()","36476f93":"gross_df = movie[~movie['Gross'].isna()] # New Dataframe with no NaN in Gross column\n\n# Extract the numerical value\ndef extract_gross(gross):\n    return float(gross.replace(\"$\",\"\").replace(\"M\",\"\"))\n\n# Unit is Million US Dollar\ngross_df['Gross'] = gross_df['Gross'].apply(lambda g: extract_gross(g))\n\n# Highest Gross Movie\nprint(\"Highest Gross movie:\",gross_df.iloc[gross_df['Gross'].argmax()]['MOVIES'])","86de0767":"fig = px.bar(data_frame = gross_df.sort_values(by='Gross', ascending = False).head(10),\n             x = 'MOVIES', y = 'Gross',\n             title = 'Top 10 Gross Movie')\nfig.update_layout(yaxis_title = 'Million US Dollar')\nfig.show()","0a4cb9d2":"# Features  using GENRE, RATING??, ONE-LINE, RunTime??, Director, Stars\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nfeatures = ['GENRE','ONE-LINE','Director','Stars']\n\n# Filling in missing values with Blank String\nfor feature in features:\n    movie[feature] = movie[feature].fillna(\"\")\n\nmovie['combined_features'] = movie['GENRE'] + \" \" + movie['ONE-LINE'] + \" \" + movie['Director'] + \" \" + movie['Stars'] \ncv = CountVectorizer()\ncount_matrix = cv.fit_transform(movie['combined_features'])\ncosine_sim = cosine_similarity(count_matrix)","01873bba":"# Function for movie recommendation\ndef movie_recommendation(mov,sim_num = 5):\n\n    user_choice = mov\n    \n    try:\n        ref_index = movie[movie['MOVIES'].str.contains(user_choice, case = False)].index[0]\n\n        similar_movies = list(enumerate(cosine_sim[ref_index]))\n\n        sorted_simmilar_movies = sorted(similar_movies, key = lambda x: x[1], reverse = True)[1:]\n\n        print('\\nRecomended Movies for [{}]'.format(user_choice))\n        print('-'*(24 + len(user_choice)))\n\n        for i, element in enumerate(sorted_simmilar_movies):\n            similar_movie_id = element[0]\n            similar_movie_title = movie['MOVIES'].iloc[similar_movie_id]\n            s_score = element[1]\n            print('{:40} -> {:.3f}'.format(similar_movie_title, s_score))\n\n            if i > sim_num:\n                break\n    except IndexError:\n        print(\"\\n[{}] is not in our database!\".format(user_choice))\n        print(\"We couldn't recommend anyting...Sorry...\")","be3d10c1":"# Search for movie with the keyword\ndef movie_available(key):\n    \n    keyword = key\n    \n    print(\"Movie with keyword: [{}]\".format(keyword))\n    \n    for i, mov in enumerate(movie[movie['MOVIES'].str.contains(keyword)]['MOVIES'].to_list()):\n        print(\"{}) {} \".format(i+1,mov))","39008cab":"# Running the Function\nmovie_available(\"Spider\")","65f7dee7":"# Running the Function \nmovie_recommendation(\"Spider-Man: Far from home\")","79085427":"# Running the Function with argument\nmovie_recommendation(\"Spider-Man: Far from home\",10)","b407cf80":"### Context for each columns\n* MOVIES: Movie name\n* YEAR: The year of movie or tv shows telecast for audience\n* GENRE: Genre of the Movie\/ TV Shows\n* RATING: The audience thought about movie or tv show given\n* ONE-LINE: The short description about movie or tv show for audience first impression\n* STARS: The casting \n* VOTES: The audience express their view\n* RunTime: The duration of running time \n* Gross: Global earning for the movie\/ tv shows","6d475af8":"### RunTime","37fa34de":"<h4 style = \"font-family:courier;font-size:20px\">This reccomendation might not be the same as to what you might find on the internet because not all the movies are recorded in this dataset.<h4>\n<h3 style = \"font-family:courier;font-size:40px;text-align:center\">Thank you for checking out my work!<\/h3>","87bf7096":"### Cleaning some of the features","a670ed6d":"<h3 style = \"text-align:center;font-size:30px;font-family:courier\">Exploratory Data Analysis and Data Cleaning<\/h3>","14e6c5a2":"### Looking at Individual Genre","1be73e46":"### Director","bf9af6dc":"### Voting","c24789c2":"### Rating","43635946":"### Genre","3e426556":"### Stars","fea30e89":"<h3  style = \"text-align:center;font-size:40px;font-family:courier\">Movie Visualization &<br>Recommendation System<\/h3>","197abc5b":"<h3 style = \"text-align:center;font-size:30px;font-family:courier\">Content-based Filtering Movie Recommendation System<\/h3>","8db0291a":"<h3 style = \"text-align:center;font-size:30px;font-family:courier\">Data Visualization<\/h3>","67e39d61":"### Years","95faff63":"### Gross"}}