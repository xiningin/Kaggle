{"cell_type":{"50be05e9":"code","9d1df847":"code","3c0b0044":"code","bba8427d":"code","a1fbd513":"code","760571e7":"code","a0777649":"code","fb3a62b1":"code","506fdfb4":"code","07fde5f4":"code","fa1980c6":"code","74f57d97":"code","97e80874":"code","48a9ae26":"code","e750d998":"code","1d97932b":"code","694d9785":"code","b44d2dde":"code","facdf6d1":"code","c439d380":"code","7c03b7bf":"code","d60f03b2":"code","e99805ca":"code","ee134b40":"code","b96ed6c5":"code","ec0224fd":"code","8ba66184":"code","19c2cbe7":"code","6ca5556e":"code","cd9e2e14":"code","54b58e39":"code","9180c37b":"code","fbcaf8f2":"code","16513da1":"code","503cce11":"code","ed7377a8":"code","c93ab5f2":"code","3472b599":"code","280a9269":"code","672d1395":"code","26855e4a":"code","8aaa70ae":"markdown","c8fce061":"markdown","32594ca7":"markdown","4c385af9":"markdown","9207de1b":"markdown","8f0c9926":"markdown","34c76e24":"markdown","a04050a9":"markdown","e7dd129e":"markdown","0c760bdf":"markdown","a5d3a4a2":"markdown","1ebd6820":"markdown","142d2926":"markdown","7228397f":"markdown","721c7657":"markdown","11c0051e":"markdown","5b2eaec1":"markdown","4065efbf":"markdown","76e84509":"markdown","757e769d":"markdown","de3a996c":"markdown","c7abd741":"markdown","6ed70751":"markdown","2da32d98":"markdown"},"source":{"50be05e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d1df847":"from os import listdir\nfrom glob import glob\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n#plotly\n!pip install chart_studio\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\n\n\n#pydicom\nimport pydicom\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Settings for pretty nice plots\nplt.style.use('fivethirtyeight')\nplt.show()\n","3c0b0044":"# Defining data path\nIMAGE_PATH = \"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/\"\n\ndata_path = '\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train\/'\n\ntrain_df = pd.read_csv('\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/test.csv')\n\n\n#Training data\nprint('Training data shape: ', train_df.shape)\ntrain_df.head(5)","bba8427d":"# Null values and Data types\nprint('Train Set')\nprint(train_df.info())\nprint('-------------')\nprint('Test Set')\nprint(test_df.info())","a1fbd513":"# Total number of Patients in the dataset(train+test)\nprint(\"Total Patients in Train set: \",train_df['Patient'].count())\nprint(\"Total Patients in Test set: \",test_df['Patient'].count())","760571e7":"print(f\"The total patient ids are {train_df['Patient'].count()}, from those the unique ids are {train_df['Patient'].value_counts().shape[0]} \")","a0777649":"columns = train_df.keys()\ncolumns = list(columns)\nprint(columns)","fb3a62b1":"train_df.dtypes","506fdfb4":"trace0 = go.Box(y=train_df[\"Age\"],name=\"Age\")\ntrace1 = go.Box(y=train_df[\"Percent\"],name=\"Percent\")\n\n\ndata = [trace0,  trace1]\niplot(data)","07fde5f4":"trace0 = go.Box(y=train_df[\"FVC\"],name=\"FVC\")\n\ndata = [trace0]\niplot(data)","fa1980c6":"train_df['SmokingStatus'].value_counts(normalize=True).iplot(kind='bar',\n                                                      yTitle='Percentage', \n                                                      linecolor='black', \n                                                      opacity=0.7,\n                                                      color='red',\n                                                      theme='pearl',\n                                                      bargap=0.8,\n                                                      gridcolor='white',                                                     \n                                                      title='Distribution of the SmokingStatus column in the training set')","74f57d97":"train_df['Sex'].value_counts(normalize=True)","97e80874":"train_df['Sex'].value_counts(normalize=True).iplot(kind='bar',\n                                                      yTitle='Percentage', \n                                                      linecolor='black', \n                                                      opacity=0.7,\n                                                      color='green',\n                                                      theme='pearl',\n                                                      bargap=0.8,\n                                                      gridcolor='white',                                                     \n                                                      title='Distribution of the Sex column in the training set')","48a9ae26":"z=train_df.groupby(['SmokingStatus','Sex'])['Patient'].count().to_frame().reset_index()\nz.style.background_gradient(cmap='Reds')","e750d998":"sns.catplot(x='SmokingStatus',y='Patient', hue='Sex',data=z,kind='bar')\nplt.ylabel('Count')\nplt.xlabel('SmokingStatus')","1d97932b":"ax = sns.violinplot(x=\"SmokingStatus\", y=\"Age\", data=train_df,size=8)","694d9785":"ax = sns.violinplot(x=\"SmokingStatus\", y=\"FVC\", data=train_df,size=8)","b44d2dde":"ax = sns.violinplot(x=\"SmokingStatus\", y=\"Percent\", data=train_df,size=8)","facdf6d1":"sns.pairplot(train_df, hue='SmokingStatus', height=3)","c439d380":"fig, axes = plt.subplots(1, 2, figsize=(14, 7))\np = sns.boxplot(x='Sex', y='Age', hue='SmokingStatus', data=train_df, ax=axes[0])\n_ = p.set_title('With train')\n\np = sns.boxplot(x='Sex', y='Age', hue='SmokingStatus', data=test_df, ax=axes[1])\n_ = p.set_title('With test')","7c03b7bf":"train_df['Percent'].iplot(kind='hist',bins=30,color='Red',xTitle='Percent distribution',yTitle='Count')","d60f03b2":"train_df['Age'].iplot(kind='hist',bins=30,color='Green',xTitle='Age distribution',yTitle='Count')","e99805ca":"train_df['FVC'].iplot(kind='hist',bins=30,color='Orange',xTitle='FVC distribution',yTitle='Count')","ee134b40":"# Extract patient id's for the training set\nids_train = train_df.Patient.values\n# Extract patient id's for the validation set\nids_test = test_df.Patient.values\n\n# Create a \"set\" datastructure of the training set id's to identify unique id's\nids_train_set = set(ids_train)\nprint(f'There are {len(ids_train_set)} unique Patient IDs in the training set')\n# Create a \"set\" datastructure of the validation set id's to identify unique id's\nids_test_set = set(ids_test)\nprint(f'There are {len(ids_test_set)} unique Patient IDs in the training set')\n\n# Identify patient overlap by looking at the intersection between the sets\npatient_overlap = list(ids_train_set.intersection(ids_test_set))\nn_overlap = len(patient_overlap)\nprint(f'There are {n_overlap} Patient IDs in both the training and test sets')\nprint('')\nprint(f'These patients are in both the training and test datasets:')\nprint(f'{patient_overlap}')\n","b96ed6c5":"train_df.columns","ec0224fd":"def show_dcm_info(dataset):\n    print(\"Filename.........:\", file_path)\n\n#     print(dataset)\n\n    pat_name = dataset.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    print(\"Patient's name......:\", display_name)\n    print(\"Patient id..........:\", dataset.PatientID)\n#     print(\"Patient's Age.......:\", dataset.PatientAge)\n    print(\"Patient's Sex.......:\", dataset.PatientSex)\n    print(\"Modality............:\", dataset.Modality)\n    print(\"Body Part Examined..:\", dataset.BodyPartExamined)\n#     print(\"View Position.......:\", dataset.ViewPosition)\n    \n    if 'PixelData' in dataset:\n        rows = int(dataset.Rows)\n        cols = int(dataset.Columns)\n        print(\"Image size.......: {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(dataset.PixelData)))\n        if 'PixelSpacing' in dataset:\n            print(\"Pixel spacing....:\", dataset.PixelSpacing)\n","8ba66184":"def plot_pixel_array(dataset, figsize=(10,10)):\n    plt.figure(figsize=figsize)\n    plt.imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    plt.show()","19c2cbe7":"i = 1\n\nnum_to_plot = 1\nfor folder_name in os.listdir('\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train\/'):\n    patient_path = os.path.join('..\/input\/osic-pulmonary-fibrosis-progression\/train\/',folder_name)\n    file_path = os.path.join(patient_path, str(i) + '.dcm')\n    dataset = pydicom.dcmread(file_path)\n    show_dcm_info(dataset)\n    plot_pixel_array(dataset)\n    \n    if i >= num_to_plot:\n        break\n    \n    i += 1","6ca5556e":"#Top 10 patients by frequency\ntrain_df['Patient'].value_counts().head(10)","cd9e2e14":"#sample patient - ID00228637202259965313869\npatient = train_df[train_df.Patient == 'ID00228637202259965313869']\npatient","54b58e39":"patient.plot(kind='line',x='Weeks',y='FVC',color='red')\nplt.ylabel('FVC')\nplt.show()","9180c37b":"patient.plot(kind='line',x='Weeks',y='Percent', color='c')\nplt.ylabel('Percent')\nplt.show()","fbcaf8f2":"patient_list = train_df.Patient.unique()\nprint(\"The total unique patients are : \",len(patient_list) )\npatient = pd.DataFrame()\npid = []\ncount = []\npath = []\nfor pat in patient_list: \n    g = glob(data_path +pat +'\/*.dcm')\n    pid.append(pat)\n    path.append(g)\n    count.append(len(g))\npatient['pid'] = pid\npatient['scan_count'] = count\npatient['path'] = path\npatient = patient.sort_values('scan_count', ascending=False)\nfig = px.bar(patient, x = 'pid',  y = 'scan_count')\nfig.update_traces(marker_color='green')\nfig.show()","16513da1":"top_5_patients_scanned =  patient.sort_values('scan_count', ascending=False).head(5)\n#select top 5 patients distribution based on the scanned count values \ntrain_df_top5_patients = train_df[train_df['Patient'].isin(top_5_patients_scanned['pid'].values)]\ntrain_df_top5_patients.head()","503cce11":"def plot_fvc(df, patient):\n        \n    df[['Weeks', 'FVC']].set_index('Weeks').plot(figsize=(30, 6), label='_nolegend_')\n    \n    plt.tick_params(axis='x', labelsize=20)\n    plt.tick_params(axis='y', labelsize=20)\n    plt.xlabel('')\n    plt.ylabel('')\n    plt.title(f'Patient: {patient} - {df[\"Age\"].tolist()[0]} - {df[\"Sex\"].tolist()[0]} - {df[\"SmokingStatus\"].tolist()[0]} ({len(df)} Measurements in {(df[\"Weeks\"].max() - df[\"Weeks\"].min())} Weeks Period)', size=25, pad=25)\n    plt.legend().set_visible(False)\n    plt.show()\n\nfor patient, df in list(train_df_top5_patients.groupby('Patient')):\n    \n    df['FVC_diff-1'] = np.abs(df['FVC'].diff(-1))\n    \n    print(f'Patient: {patient} FVC Statistical Summary\\n{\"-\" * 58}')\n    print(f'Mean: {df[\"FVC\"].mean():.6}  -  Median: {df[\"FVC\"].median():.6}  -  Std: {df[\"FVC\"].std():.6}')\n    print(f'Min: {df[\"FVC\"].min()} -  Max: {df[\"FVC\"].max()}')\n    print(f'Skew: {df[\"FVC\"].skew():.6}  -  Kurtosis: {df[\"FVC\"].kurtosis():.6}')\n    print(f'Change Mean: {df[\"FVC_diff-1\"].mean():.6}  - Change Median: {df[\"FVC_diff-1\"].median():.6}  - Change Std: {df[\"FVC_diff-1\"].std():.6}')\n    print(f'Change Min: {df[\"FVC_diff-1\"].min()} -  Change Max: {df[\"FVC_diff-1\"].max()}')\n    print(f'Change Skew: {df[\"FVC_diff-1\"].skew():.6} -  Change Kurtosis: {df[\"FVC_diff-1\"].kurtosis():.6}')\n    \n    plot_fvc(df, patient)","ed7377a8":"!pip install sweetviz","c93ab5f2":"# importing sweetviz\nimport sweetviz as sv\n\n#analyzing the dataset\ntrain_df_report = sv.analyze([train_df, \"Train\"])\n\n#display the report\ntrain_df_report.show_html('train_df_report.html')","3472b599":"#analyzing the dataset\ntest_df_report = sv.analyze([test_df, \"Test\"])\n\n#display the report\ntest_df_report.show_html('test_df_report.html')\n","280a9269":"import pandas_profiling as pdp\n\nprofile_train_df = pdp.ProfileReport(train_df)\n\nprofile_train_df","672d1395":"profile_test_df = pdp.ProfileReport(test_df)\nprofile_test_df","26855e4a":"#credits:\n# https:\/\/www.kaggle.com\/schlerp\/getting-to-know-dicom-and-the-data\n# https:\/\/www.kaggle.com\/parulpandey\/melanoma-classification-eda-starter","8aaa70ae":"![fib_2.JPG](attachment:fib_2.JPG)","c8fce061":"![fib_3.JPG](attachment:fib_3.JPG)","32594ca7":"#### Gender wise distribution","4c385af9":"### Unique IDs","9207de1b":"![fib_4.JPG](attachment:fib_4.JPG)","8f0c9926":"#### Gender vs SmokingStatus","34c76e24":"The number of unique patients is less than the total number of patients. This means that, patients have multiple records.","a04050a9":"## 4. Patient Overlap","e7dd129e":"![fib_1.JPG](attachment:fib_1.JPG)","0c760bdf":"### Missing Values","a5d3a4a2":"## 1. Importing the necessary libraries","1ebd6820":"There are NO missing values in the columns. ","142d2926":"## TO BE CONTINUED ....................","7228397f":"### Total Number of Patients","721c7657":"## 3. Data Exploration","11c0051e":"FVC measurement shows the amount of air a person can forcefully and quickly exhale after taking a deep breath. It is defined as the recorded lung capacity in ml under the Data tab. The change in FVC over the course of weeks is used for predicting the patients' lung function decline.","5b2eaec1":"## 6.Observation of Patient Journey","4065efbf":"## 2. Reading the datasets","76e84509":"## 8.Pandas Profiling - Visualization","757e769d":"#### Exploration of each columns","de3a996c":"## 5.Visualising Images : DECOM files","c7abd741":"**Credits**: Really liked this idea\nhttps:\/\/www.kaggle.com\/gunesevitan\/osic-pulmonary-fibrosis-progression-eda\n","6ed70751":"## 7.SweetViz - Visualization","2da32d98":"#### Top 5 Patients - FVC (Forced Vital Capacity) - Observations"}}