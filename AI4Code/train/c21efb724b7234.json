{"cell_type":{"90308d0f":"code","c4c139be":"code","3f5a1e10":"code","ea152aa4":"code","c25d1b2a":"code","c4f2a999":"code","9ec4f41f":"code","4a5179f7":"code","d04be044":"code","73ea95d9":"code","4c28e41b":"code","9bc22955":"code","ebbb1bb0":"code","e5991e12":"code","6cb9ca91":"code","7431283b":"code","bf3a76cd":"code","b8dba17d":"code","a17bf861":"code","1bb2cd8c":"code","cd013341":"code","c06583e3":"code","bdce8ecf":"code","89661210":"code","22c2ff10":"markdown","c9da2499":"markdown","ef5ca822":"markdown","de6e75a3":"markdown","6290b9e6":"markdown","c7601326":"markdown"},"source":{"90308d0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4c139be":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3f5a1e10":"from fbprophet import Prophet","ea152aa4":"covid_df = pd.read_csv('..\/input\/daily-covid-cases-india\/datasets_549966_1364659_nation_level_daily.csv')","c25d1b2a":"covid_df.head()","c4f2a999":"covid_df.info()","9ec4f41f":"covid_df.Date\n","4a5179f7":"covid_df['Date'] = '2019 ' + covid_df['Date'].astype('str')","d04be044":"covid_df.Date","73ea95d9":"covid_df['Date'] = covid_df['Date'].str.replace(\"January\",\"01\")\ncovid_df['Date'] = covid_df['Date'].str.replace(\"February\",\"02\")\ncovid_df['Date'] = covid_df['Date'].str.replace(\"March\",\"03\")\ncovid_df['Date'] = covid_df['Date'].str.replace(\"April\",\"04\")\ncovid_df['Date'] = covid_df['Date'].str.replace(\"May\",\"05\")\ncovid_df['Date'] = covid_df['Date'].str.replace(\"June\",\"06\")\ncovid_df['Date'] = covid_df['Date'].str.replace(\"July\",\"07\")","4c28e41b":"covid_df['Date'] = covid_df['Date'].apply(lambda x : x.split(\" \")[0] +\"-\"+ x.split(\" \")[2] + \"-\" + x.split(\" \")[1])","9bc22955":"covid_df.Date","ebbb1bb0":"prophet_covid_df1 = covid_df[['Date','Daily Confirmed']]\nprophet_covid_df2 = covid_df[['Date','Daily Recovered']]","e5991e12":"prophet_covid_df1.tail()","6cb9ca91":"prophet_covid_df1 = prophet_covid_df1.rename(columns={'Date':'ds','Daily Confirmed' : 'y'})","7431283b":"prophet_covid_df1.head()","bf3a76cd":"prophet_covid_df1 = prophet_covid_df1.drop([30]) #30th row gave a parse error","b8dba17d":"pr = Prophet()","a17bf861":"pr.fit(prophet_covid_df1)","1bb2cd8c":"future = pr.make_future_dataframe(periods = 153)#For the next 153 days of the dataset","cd013341":"forecast = pr.predict(future)","c06583e3":"forecast[forecast['ds']=='2019-09-15']","bdce8ecf":"figure = pr.plot(forecast)\nplt.xlabel('Date')\nplt.ylabel('Confirmed COVID cases')","89661210":"figure = pr.plot_components(forecast)","22c2ff10":"So now we have converted the date into std. date time format","c9da2499":"**Applying Prophet!**","ef5ca822":"**Great! Done.**","de6e75a3":"**Lets Visualise the forecast!**","6290b9e6":"We would be using Facebook's open source library published that is based on decomposable (trend+seasonality+holidays) models.","c7601326":"Now we can predict the daily confirmed cases for any date till the last date of forecast!"}}