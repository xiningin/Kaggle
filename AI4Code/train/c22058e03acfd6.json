{"cell_type":{"3e792159":"code","babb4683":"code","3450963b":"code","85364fd5":"code","111e93c3":"code","f7ff98a4":"code","6691c4d9":"code","eb2157b0":"code","70fccdce":"code","d11fcb16":"code","3a99268e":"code","89fa6dbd":"code","d0fb0736":"code","8d8f8e71":"code","6c3b3d49":"code","a483dee7":"code","e31cfbdd":"code","a2f43ac9":"code","ae45cf18":"code","9af99230":"code","c70940e2":"code","e97c2175":"code","63755624":"code","a589e3c3":"code","c8075dd5":"markdown","7ffe0d3b":"markdown"},"source":{"3e792159":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","babb4683":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","3450963b":"df = pd.read_csv('..\/input\/iris\/Iris.csv')","85364fd5":"df.head()","111e93c3":"df.info()","f7ff98a4":"df.head()","6691c4d9":"df['Species'].unique()","eb2157b0":"sns.scatterplot('SepalLengthCm','SepalWidthCm',hue='Species',data=df)","70fccdce":"sns.scatterplot('SepalLengthCm','PetalLengthCm',hue='Species',data=df)","d11fcb16":"sns.scatterplot('SepalWidthCm','PetalLengthCm',hue='Species',data=df)","3a99268e":"df['Species'] = df['Species'].map({'Iris-setosa':0,'Iris-versicolor':1,'Iris-virginica':2})","89fa6dbd":"df.isnull().sum()","d0fb0736":"df.columns","8d8f8e71":"X = df[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]\ny = df['Species']","6c3b3d49":"from sklearn.preprocessing import StandardScaler\nstd = StandardScaler()\nX_scales = std.fit_transform(X)","a483dee7":"X.corr()","e31cfbdd":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size =0.2,random_state = 42 )","a2f43ac9":"from sklearn.cluster import KMeans\n","ae45cf18":"error = []\nfor k in range(1,40):\n    model = KMeans(n_clusters=k)\n    model.fit(X_train)\n    error.append(model.inertia_)\n    \nplt.plot(range(1,40),error,)\nplt.xlabel('Number of K values')\nplt.ylabel('wcss')\nplt.show()\n    ","9af99230":"#Hence using k=3 as final.\nmodel = KMeans(n_clusters=3)\nmodel.fit(X_train)\nresult = model.predict(X_test)\n\n    \n","c70940e2":"prediction = pd.DataFrame({'Prediction':result,'True Values':y_test})","e97c2175":"prediction","63755624":"from sklearn.metrics import confusion_matrix,classification_report\nprint(confusion_matrix(result,y_test))","a589e3c3":"print(classification_report(result,y_test))","c8075dd5":"With 97% accuracy we concludes our model.","7ffe0d3b":"We can see that from elbow method at approx k =3 the error decreases slowly."}}