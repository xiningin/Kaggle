{"cell_type":{"4d0b2e56":"code","d1512b00":"code","3b5508ea":"code","64bd3ff9":"code","e937f68b":"code","47fea1e5":"code","b36b4848":"code","829fd974":"code","f27f7d9a":"code","57377133":"code","66b7cbc9":"code","2c4b0a66":"code","68780038":"code","6b8fc79f":"code","4aaf3db0":"markdown","e134d2ad":"markdown","376ec6ed":"markdown","28d8eb09":"markdown","cc9f32e7":"markdown","86d1103a":"markdown","541d297c":"markdown","5fba12ce":"markdown"},"source":{"4d0b2e56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d1512b00":"%env CUDA_DEVICE_ORDER=PCI_BUS_ID\n%env CUDA_VISIBLE_DEVICES=1","3b5508ea":"import tensorflow as tf\ngpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.25)\nsess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))","64bd3ff9":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom keras.utils import to_categorical\nfrom keras.datasets import cifar10\n\nfrom PIL import Image\n\nfrom keras.models import Model, Sequential\nfrom keras.layers import Flatten, Dense, Dropout\nfrom keras.layers import Convolution2D, MaxPooling2D\nfrom keras.layers import BatchNormalization, GlobalAveragePooling2D\nfrom keras.utils import to_categorical\nfrom keras.optimizers import Adam\n\n\n# Get Inception architecture from keras.applications\nfrom keras.applications.inception_v3 import InceptionV3","e937f68b":"def load_cifar10(resize=False):\n    train = np.load('..\/input\/cifar-traintest\/cifar_train.npz')\n    x_train = train['data']\n    y_train = train['labels']\n  \n    test = np.load('..\/input\/cifar-traintest\/cifar_test.npz')\n    x_test = test['data']\n    y_test = test['labels']\n    \n    if resize:\n        x_train=resize_all(x_train, resize)\n        x_test=resize_all(x_test, resize)\n    \n    x_train = x_train.astype('float32')\/255.\n    x_test = x_test.astype('float32')\/255.\n    \n    return(x_train, y_train, x_test, y_test)\n\n\ndef resize(p, size):\n    return Image.fromarray(p).resize(size=(size,size))\n\ndef resize_all(arr, size):\n    t = []\n    for i in range(arr.shape[0]):\n        t.append(np.array(resize(arr[i], size)))\n        \n#     t = np.array(t, dtype='float32')\n#     t \/= 255.\n\n    return(np.array(t))","47fea1e5":"batch_size = 64\nnb_classes = 10\n\nimg_rows, img_cols = 32, 32    # input image dimensions\nimg_channels = 3               # The CIFAR10 images are RGB.","b36b4848":"x_train, train_labels, x_test, test_labels = load_cifar10()\n\n\ny_train = to_categorical(train_labels, nb_classes)\ny_test = to_categorical(test_labels, nb_classes)","829fd974":"plt.figure(figsize=(20,10))\nfor i in range(5):\n    plt.subplot(1,5,i+1)\n    plt.imshow(x_train[i])\n    plt.axis('off')","f27f7d9a":"def custom_convnet(nb_classes, learn_rate, inp_shape):\n    model = Sequential()\n    model.add(Convolution2D(filters=32, kernel_size=(3, 3), padding='same', # valid\n                            input_shape=inp_shape, \n                            activation='relu'))\n    model.add(Convolution2D(filters=32, kernel_size=(3, 3), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Convolution2D(filters=64, kernel_size=(3, 3), padding='same', \n                            activation='relu'))\n    model.add(Convolution2D(filters=64, kernel_size=(3, 3), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Flatten())\n    model.add(Dense(512, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(nb_classes, activation='softmax'))\n    \n    adam = Adam(lr=learn_rate)\n    model.compile(loss='categorical_crossentropy',\n                  metrics=['accuracy'],optimizer=adam)\n    \n    return(model)\n","57377133":"model = custom_convnet(nb_classes=10, learn_rate=0.001, \n                       inp_shape=(img_rows,img_cols,img_channels))\nmodel.fit(x_train[:50000], y_train[:50000],\n          validation_data=(x_test, y_test),\n          batch_size=batch_size,\n          epochs=4)\n\nmodel.save('cifar10_savedmodel.h5')          # Saves the weights along with the graph\n# model.save_weights('cifar10_savedmodel.h5')  # Saves the weights only","66b7cbc9":"model = custom_convnet(nb_classes=10, learn_rate=0.002, inp_shape=(img_rows,img_cols,img_channels))\nmodel.fit(x_train[:5000], y_train[:5000],\n          validation_data=(x_test, y_test),\n          batch_size=batch_size,\n          epochs=15)","2c4b0a66":"(x_train, train_labels), (x_test, test_labels) = cifar10.load_data()\nsize=224\nx_train=resize_all(x_train, size)\nx_test=resize_all(x_test, size)\n\nx_train = x_train.astype('float32')\/255.\nx_test = x_test.astype('float32')\/255.\n\ny_train = to_categorical(train_labels, nb_classes)\ny_test = to_categorical(test_labels, nb_classes)","68780038":"def inception_tl(nb_classes, freez_wts=True, learn_rate=0.001):\n    trained_model = InceptionV3(include_top=False,weights='imagenet')\n    x = trained_model.output\n    x = GlobalAveragePooling2D()(x)\n    pred_inception= Dense(nb_classes,activation='softmax')(x)\n    model = Model(inputs=trained_model.input,outputs=pred_inception)\n    \n    for layer in trained_model.layers:\n        layer.trainable=(1-freez_wts)\n    \n    adam = Adam(lr=learn_rate)\n    model.compile(loss='categorical_crossentropy',\n                  metrics=['accuracy'],optimizer=adam)\n    \n    return(model)","6b8fc79f":"model = inception_tl(nb_classes=nb_classes, freez_wts=True)\nmodel.fit(x_train[:5000], y_train[:5000],\n          validation_data=(x_test, y_test),\n          batch_size=batch_size,\n          epochs=5)","4aaf3db0":"## Custom Network","e134d2ad":"## Import modules","376ec6ed":"## Plot a few train images","28d8eb09":"With limited samples","cc9f32e7":"## Reading data","86d1103a":"Resize all the images ","541d297c":"With a lot of samples","5fba12ce":"## Pre-Trained Network"}}