{"cell_type":{"6825631e":"code","3b979e5f":"code","bcce3bcb":"code","258b75b6":"code","2136ba9a":"code","68f0c39d":"code","27b17ca2":"code","7ecb56af":"code","a74f0071":"code","52cc136d":"code","d6dcbad0":"code","a9d4deed":"code","313e8b3b":"code","98d761a6":"code","2bda571f":"code","07b0b426":"code","90c9ac94":"code","1ffba4ef":"code","af8dc9bd":"code","236c23da":"code","f585ccd3":"code","9096e06c":"markdown","3fbf7050":"markdown","679ac06e":"markdown","70fe3b30":"markdown","9fcd974b":"markdown","8ff20f80":"markdown","2fdc443a":"markdown","15644495":"markdown","9d7b4af8":"markdown","d9034ac4":"markdown"},"source":{"6825631e":"!pip install imutils\n","3b979e5f":"import numpy as np \nimport pandas as pd \nimport os\nfrom os import listdir\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport imutils    \n\nfrom tensorflow.keras.models import Model,load_model\nfrom tensorflow.keras.layers import Conv2D,Input,ZeroPadding2D,BatchNormalization,Flatten,Activation,Dense,MaxPooling2D\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle #shuffling the data improves the model\n","bcce3bcb":"image_dir=\"..\/input\/brain-mri-images-for-brain-tumor-detection\/\"","258b75b6":"\nos.makedirs('..\/output\/kaggle\/working\/augmented-images')\nos.makedirs('..\/output\/kaggle\/working\/augmented-images\/yes')\nos.makedirs('..\/output\/kaggle\/working\/augmented-images\/no')","2136ba9a":"def augment_data(file_dir, n_generated_samples, save_to_dir):\n    data_gen = ImageDataGenerator(rotation_range=10, \n                                  width_shift_range=0.1, \n                                  height_shift_range=0.1, \n                                  shear_range=0.1, \n                                  brightness_range=(0.3, 1.0),\n                                  horizontal_flip=True, \n                                  vertical_flip=True, \n                                  fill_mode='nearest'\n                                 )\n\n    for filename in listdir(file_dir):\n        image = cv2.imread(file_dir + '\/' + filename)\n        # reshape the image\n        image = image.reshape((1,)+image.shape)\n        save_prefix = 'aug_' + filename[:-4]\n        i=0\n        for batch in data_gen.flow(x=image, batch_size=1, save_to_dir=save_to_dir,save_prefix=save_prefix, save_format='jpg'):\n                i += 1\n                if i > n_generated_samples:\n                    break","68f0c39d":"augmented_data_path ='..\/output\/kaggle\/working\/augmented-images\/'\n# augment data for the examples with label equal to 'yes' representing tumurous examples\naugment_data(file_dir=image_dir+'yes',n_generated_samples=6, save_to_dir=augmented_data_path+'yes')\n# augment data for the examples with label equal to 'no' representing non-tumurous examples\naugment_data(file_dir=image_dir+'no', n_generated_samples=9, save_to_dir=augmented_data_path+'no')","27b17ca2":"def crop_brain_contour(image, plot=False):\n    \n    # Convert the image to grayscale, and blur it slightly\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    gray = cv2.GaussianBlur(gray, (5, 5), 0)\n    \n    thresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1]\n    thresh = cv2.erode(thresh, None, iterations=2)\n    thresh = cv2.dilate(thresh, None, iterations=2)\n\n    # Find contours in thresholded image, then grab the largest one\n    cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    cnts = imutils.grab_contours(cnts)\n    c = max(cnts, key=cv2.contourArea)\n    # extreme points\n    extLeft = tuple(c[c[:, :, 0].argmin()][0])\n    extRight = tuple(c[c[:, :, 0].argmax()][0])\n    extTop = tuple(c[c[:, :, 1].argmin()][0])\n    extBot = tuple(c[c[:, :, 1].argmax()][0])\n    \n    # crop new image out of the original image using the four extreme points (left, right, top, bottom)\n    new_image = image[extTop[1]:extBot[1], extLeft[0]:extRight[0]]            \n\n    if plot:\n        plt.figure()\n        plt.subplot(1, 2, 1)\n        plt.imshow(image)\n        plt.tick_params(axis='both', which='both', top=False, bottom=False, left=False, right=False,labelbottom=False, labeltop=False, labelleft=False, labelright=False)\n        plt.title('Original Image')\n        plt.subplot(1, 2, 2)\n        plt.imshow(new_image)\n        plt.tick_params(axis='both', which='both',top=False, bottom=False, left=False, right=False,labelbottom=False, labeltop=False, labelleft=False, labelright=False)\n        plt.title('Cropped Image')\n        plt.show()\n    \n    return new_image","7ecb56af":"ex_img = cv2.imread(image_dir+'yes\/Y107.jpg')\nex_crop_img = crop_brain_contour(ex_img, True)","a74f0071":"def load_data(dir_list, image_size):\n\n    # load all images in a directory\n    X = []\n    y = []\n    image_width, image_height = image_size\n    \n    for directory in dir_list:\n        for filename in listdir(directory):\n            image = cv2.imread(directory+'\/'+filename)\n            image = crop_brain_contour(image, plot=False)\n            image = cv2.resize(image, dsize=(image_width, image_height), interpolation=cv2.INTER_CUBIC)\n            # normalize values\n            image = image \/ 255.\n            # convert image to numpy array and append it to X\n            X.append(image)\n            # append a value of 1 to the target array if the image\n            # is in the folder named 'yes', otherwise append 0.\n            if directory[-3:] == 'yes':\n                y.append([1])\n            else:\n                y.append([0])\n                \n    X = np.array(X)\n    y = np.array(y)\n    \n    # Shuffle the data\n    X, y = shuffle(X, y)\n    \n    print(f'Number of examples is: {len(X)}')\n    print(f'X shape is: {X.shape}')\n    print(f'y shape is: {y.shape}')\n    \n    return X, y","52cc136d":"augmented_yes =augmented_data_path+'yes'\naugmented_no = augmented_data_path+'no'\n\nIMG_WIDTH, IMG_HEIGHT = (240, 240)\n\nX, y = load_data([augmented_yes, augmented_no], (IMG_WIDTH, IMG_HEIGHT))","d6dcbad0":"def plot_sample_images(X, y, n=40):\n    for label in [0,1]:\n        # grab the first n images with the corresponding y values equal to label\n        images = X[np.argwhere(y == label)]\n        n_images = images[:n]\n        \n        columns_n = 10\n        rows_n = int(n\/ columns_n)\n\n        plt.figure(figsize=(10, 8))\n        \n        i = 1 # current plot        \n        for image in n_images:\n            plt.subplot(rows_n, columns_n, i)\n            plt.imshow(image[0])\n            \n            # remove ticks\n            plt.tick_params(axis='both', which='both', \n                            top=False, bottom=False, left=False, right=False,\n                           labelbottom=False, labeltop=False, labelleft=False, labelright=False)\n            \n            i += 1\n        \n        label_to_str = lambda label: \"Yes\" if label == 1 else \"No\"\n        plt.suptitle(f\"Brain Tumor: {label_to_str(label)}\")\n        plt.show()","a9d4deed":"plot_sample_images(X, y)","313e8b3b":"def split_data(X, y, test_size=0.2):\n       \n    X_train, X_test_val, y_train, y_test_val = train_test_split(X, y, test_size=test_size)\n    X_test, X_val, y_test, y_val = train_test_split(X_test_val, y_test_val, test_size=0.5)\n    \n    return X_train, y_train, X_val, y_val, X_test, y_test","98d761a6":"X_train, y_train, X_val, y_val, X_test, y_test = split_data(X, y, test_size=0.3)","2bda571f":"print (\"number of training examples = \" + str(X_train.shape[0]))\nprint (\"number of validation examples = \" + str(X_val.shape[0]))\nprint (\"number of test examples = \" + str(X_test.shape[0]))","07b0b426":"def build_model(input_shape):\n    X_input = Input(input_shape) \n    X = ZeroPadding2D((2, 2))(X_input) \n    \n    X = Conv2D(32, (7, 7), strides = (1, 1))(X)\n    X = BatchNormalization(axis = 3, name = 'bn0')(X)\n    X = Activation('relu')(X) \n    \n    X = MaxPooling2D((4, 4))(X) \n    X = MaxPooling2D((4, 4))(X) \n    X = Flatten()(X) \n    X = Dense(1, activation='sigmoid')(X) \n    model = Model(inputs = X_input, outputs = X)\n    \n    return model","90c9ac94":"IMG_SHAPE = (IMG_WIDTH, IMG_HEIGHT, 3)\nmodel=build_model(IMG_SHAPE)\nmodel.summary()","1ffba4ef":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(x=X_train, y=y_train, batch_size=32, epochs=22, validation_data=(X_val, y_val))","af8dc9bd":"history = model.history.history","236c23da":"def plot_metrics(history):\n    \n    train_loss = history['loss']\n    val_loss = history['val_loss']\n    train_acc = history['accuracy']\n    val_acc = history['val_accuracy']\n    \n    # Loss\n    plt.figure()\n    plt.plot(train_loss, label='Training Loss')\n    plt.plot(val_loss, label='Validation Loss')\n    plt.title('Loss')\n    plt.legend()\n    plt.show()\n    \n    # Accuracy\n    plt.figure()\n    plt.plot(train_acc, label='Training Accuracy')\n    plt.plot(val_acc, label='Validation Accuracy')\n    plt.title('Accuracy')\n    plt.legend()\n    plt.show()","f585ccd3":"plot_metrics(history)","9096e06c":"## Visualization of data","3fbf7050":"## After applying the cropping function","679ac06e":"### Helper Functions","70fe3b30":"**A directory is formed using os.makedirs() function for augmented images(yes\/ no). Note- custom directory is obtained in outputs folder.**","9fcd974b":"## Preprocessing the data\n\nIn order to crop the specific part of the image containing tumour,cropping technique via OpenCv is used, the details can be found here.[How to find extreme points in OpenCv?](https:\/\/www.pyimagesearch.com\/2016\/04\/11\/finding-extreme-points-in-contours-with-opencv\/)","8ff20f80":"### Installing dependencies for preprocessing of images ","2fdc443a":"### Plotting of aaccuracy","15644495":"### Loading Images","9d7b4af8":"### Making directory for augmented images","d9034ac4":"## Augmentation of images \n**About the data:\nThe dataset contains 2 folders: yes and no which contains 253 Brain MRI Images. The folder yes contains 155 Brain MRI Images that are tumorous andno contains 98 Brain MRI Images that are non-tumorous.**"}}