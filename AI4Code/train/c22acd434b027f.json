{"cell_type":{"8831ccae":"code","0efa4d17":"code","201880fa":"code","01679f53":"code","c9add8b5":"code","ae88f24d":"code","58282c07":"code","f9894434":"code","72c9b72e":"code","8586c45b":"code","7f3153ae":"code","7f4e01b6":"code","941510e6":"code","6fd5fccd":"code","e9965d74":"code","0215a0c1":"code","b5c279df":"code","6269e86e":"code","5ff9adbf":"markdown","4f1be46e":"markdown","f2d20644":"markdown","5a1ba502":"markdown","2eaafd99":"markdown","cc44475b":"markdown","b9bb1f2f":"markdown","c9c76130":"markdown","46f6dcf1":"markdown","403b9e63":"markdown","c5793db9":"markdown","60b942fc":"markdown","d04963fc":"markdown","0ed7c684":"markdown","ee351e29":"markdown","afdc5216":"markdown","88f35f3c":"markdown","b80b0ce8":"markdown"},"source":{"8831ccae":"import numpy as np \nimport pandas as pd\n\n#### Libraries that we are going to use\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport matplotlib.image as mpimg\nfrom matplotlib.offsetbox import (OffsetImage,AnnotationBbox)\nimport seaborn as sns\nimport matplotlib.patches as mpatches\nfrom IPython.display import Image\nfrom math import pi\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0efa4d17":"%%bash\npip install openpyxl","201880fa":"df_athletes = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Athletes.xlsx\")\ndf_coaches = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Coaches.xlsx\")\ndf_entries_gender = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/EntriesGender.xlsx\")\ndf_medals = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Medals.xlsx\")\ndf_teams = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Teams.xlsx\")","01679f53":"datasets = {'df_athletes':df_athletes,\n            'df_coaches':df_coaches,\n            'df_entries_gender':df_entries_gender,\n            'df_medals':df_medals,\n            'df_teams':df_teams}\n\nfor d in datasets:\n    print('************ '+d+' ************')\n    print('shape of the dataset '+str(datasets.get(d).shape))\n    print('\\nNull values')\n    print(datasets.get(d).isna().sum())\n    print('\\nDuplicated values')\n    print(datasets.get(d).duplicated().sum())\n    print('\\nSample of dataset')\n    print(datasets.get(d).head(3))\n    print('\\nBasic Information')\n    print(datasets.get(d).describe())\n    print('\\n\\n');","c9add8b5":"df_athletes = df_athletes.drop_duplicates().reset_index(drop=True)\ndf_coaches = df_coaches.drop_duplicates().reset_index(drop=True)\ndf_coaches= df_coaches.drop(columns=['Event'], axis=1)","ae88f24d":"df_entries_gender['check'] = (df_entries_gender['Female'] + df_entries_gender['Male']) - df_entries_gender['Total']\nprint(df_entries_gender['check'].sum())\ndf_entries_gender = df_entries_gender.drop(columns=['check'])","58282c07":"df_medals['check'] = (df_medals['Gold'] + df_medals['Silver'] + df_medals['Bronze']) - df_medals['Total']\nprint(df_medals['check'].sum())\ndf_medals = df_medals.drop(columns=['check'])","f9894434":"plt.figure(figsize=(12,5))\nax = sns.countplot('NOC',\n                   data = df_athletes,\n                   order=df_athletes.NOC.value_counts(ascending=False).iloc[:10].index,\n                   palette=\"Greens_d\")\nplt.xticks(rotation=90)\nplt.ylabel('Athletes by Nationality')\nplt.show()","72c9b72e":"plt.figure(figsize=(12,5))\nax = sns.countplot('Discipline',\n                   data = df_athletes,\n                   order=df_athletes.Discipline.value_counts(ascending=False).iloc[:10].index,\n                   palette=\"Greens_d\")\nplt.xticks(rotation=90)\nplt.ylabel('Discipline')\nplt.show()","8586c45b":"print('Total disciplines: ' + str(len(df_athletes.groupby(by='Discipline')['NOC'].count())))\ndf_coaches.groupby(by='Discipline', as_index=False)['Name'].count()\n","7f3153ae":"df_entries_gender.head()","7f4e01b6":"plt.figure(figsize=(12,8))\ngender_plot = df_entries_gender.sort_values(by='Total', ascending= False).reset_index(drop=True).head(10)\n\npx.bar(gender_plot, x ='Discipline',\n        y=['Female','Male'],\n        color_discrete_sequence =['#b5ffb9','#f9bc86'],\n        title = \"Distribution of genders across Discipline\")\n","941510e6":"px.pie(data_frame=df_entries_gender,\n      names = ['Female','Male'],\n      values=[df_entries_gender['Female'].sum(),df_entries_gender['Male'].sum()],\n      color_discrete_sequence=['#f9bc86','#b5ffb9'],\n      title = \"Distribution of genders across olimpics\")","6fd5fccd":"plt.figure(figsize=(12,5))\nax = sns.barplot(x='Team\/NOC',\n                 y='Total',\n                 data= df_medals.sort_values(by='Total', ascending=False).head(10),\n                 palette=\"Greens_d\")\nplt.xticks(rotation=90)\nplt.title('Top 10 medals across country')\nplt.ylabel('Athletes by Nationality')\nplt.show()","e9965d74":"plot_medals = df_medals.sort_values(by='Total', ascending= False).reset_index(drop=True).head(10)\n\npx.bar(plot_medals, x ='Team\/NOC',\n        y=['Gold','Silver','Bronze'],\n        color_discrete_sequence =['#83580b', '#e3e3e3', '#f6e4ad'],\n        title = \"Distribution of medals across countries\")","0215a0c1":"def spider_plot(row):\n    \n    row = row-1\n    \n    categories_graph = ['Gold','Silver', 'Bronze']\n    valuesUseGraph = [df_medals.Gold[row],\n                      df_medals.Silver[row],\n                      df_medals.Bronze[row],\n                      df_medals.Gold[row]] \n\n    N = len(categories_graph)\n\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    ax = plt.subplot(111, projection='polar')\n    ax.set_theta_offset(pi \/ 2)\n    ax.set_theta_direction(-1)\n    plt.xticks(angles[:-1], categories_graph, color= 'black', size=12)\n    ax.set_rlabel_position(0)\n    plt.yticks([10,20,30,40], [\"10\",\"20\",\"30\",\"40\"], size= 10)\n    plt.ylim(0,45)\n    plt.title(df_medals.loc[row,'Team\/NOC'])\n    ax.plot(angles, valuesUseGraph, linewidth=1, linestyle='solid')\n    \n    print('Gold: ' + str(valuesUseGraph[0]))\n    print('Silver: '+ str(valuesUseGraph[1]))\n    print('Silver: '+ str(valuesUseGraph[2]))","b5c279df":"#Insert the a place you want to know\nspider_plot(1)","6269e86e":"#P(A)\nPA=df_medals[df_medals['Silver']>0]['Silver'].count()\/df_medals['Silver'].sum()\n#P(A,B)\nPAB=df_medals[(df_medals['Silver']>0) & (df_medals['Gold']>0)]['Gold'].count()\\\n    \/df_medals[(df_medals['Silver']>0) & (df_medals['Gold']>0)]['Gold'].sum()\n#P(B|A) = PAB\/PA\nPBA = PAB\/PA\nprint('The probability of winning a gold medal after winning at least one silver is: ' + str(round(PBA,2)*100) +'%')","5ff9adbf":"<div style=\"font-weight: bold;font-size:40px;background-color: #F0F8FF;padding:0 5%; color:#2F4F4F\">2021 Olympics in Tokyo \ud83c\uddef\ud83c\uddf5 - EDA with visualisation and some basic probability<\/div>\n\n<center><img src=\"https:\/\/triathlon-images.imgix.net\/news_thumbs\/Olympic_Rings_OlymTAB_1.jpg?w=900&h=506&auto=format&fit=fill&fill=blur\" width=500><\/center>\n\n<div>\n<ul style=\"font-size:16px;\">\n\nThe modern\u00a0<b>Olympic Games<\/b>\u00a0or\u00a0<b>Olympics<\/b>\u00a0are leading international sporting events featuring summer and winter sports competitions in which thousands of\u00a0atheletes from around the world participate in a\u00a0variety of competitions. The Olympic Games are considered the world's foremost sports competition with more than 200 nations participating.\nThe Olympic Games are normally held every\u00a0four years, alternating between the\u00a0Summer\u00a0and\u00a0Winter Olympics\u00a0every two years in the four-year period. [[1]](https:\/\/en.wikipedia.org\/wiki\/Olympic_Games)\n\nThe 2020 Summer Olympics was developed from 23 July to 8 August 2021 in Tokyo, Japan, with some preliminary events that began on 21 July. Due to the COVID 19 pandemic, most of the games took place in a closed-door context. \ud83d\udc89\n \nWhat you are going to find in this notebook?\n\n<br>\n\u2705 Data QA\n<li>Dimensional analysis<\/li>\n<li>Nulls and duplicated values<\/li>\n<li>Inconsistences<\/li>\n<li>Data QA conclusions<\/li>\n\n<br>\n\ud83d\udcca Reporting\n<li>Plots that help you understand how the Olympics unfolded<\/li>\n<li>Reporting conclusions<\/li>\n\n<br>\n\ud83d\uddd2\ufe0f Contional probability\n<\/br>\n\n<br>\nIf you like this project, please <b>UPVOTE<\/b>, it helps me stay motivated \ud83d\ude03","4f1be46e":"Top 10 Total medals by country","f2d20644":"<div style=\"font-weight: bold;font-size:20px;background-color: #F0F8FF;padding:0 1%; color:#2F4F4F\">EDA Conclusions<\/div>\n<br>\n<li>USA was the one with the most athletes, followed by Japan (2nd) and Australia (3rd).<\/li>\n<li>Athletics was the discipline that concentrated most of the athletes in these Olympics.Followed by Swimming and Football<\/li>\n<li>Something strange in dataset df_coaches: Although 46 disciplines were contested, only 8 have coaches.<\/li>\n<li>These Olympic games had almost the same number of women and men in competition.<\/li>\n<li>USA was the leader in medals ranking, followed by China (2nd) and almost ROC(3rd).<\/li>\n<li>As an example, the probability of winning a gold medal after having won at least one silver is 80%!!!<\/li>\n","5a1ba502":"* USA is the country with the highest amount of athletes\n* Athletics is the discipline with the largest number of competitors","2eaafd99":"<b>Imports<\/b>","cc44475b":"Data cleaning","b9bb1f2f":"Although 46 disciplines were contested, only 8 have coaches.","c9c76130":"[Conditional probability](https:\/\/en.wikipedia.org\/wiki\/Conditional_probability)is a measure of the probability of an event occurring, given that another event (by assumption, presumption, assertion or evidence) has already occurred. If the event of interest is A and the event B is known or assumed to have occurred, \"the conditional probability of A given B\", or \"the probability of A under the condition B\", is usually written as P(A|B).\n\nAs an example of how powerfull conditional probability is, let's see an example.\nFirst of all, of course, to win a gold medal it is not mandatory to win a silver one, but this is a false assumption only as part of this exercise.\n\n\"Which is the probability of a team who wins a medal gold, after winning a silver medal?\"\n\n* P(A) : Probability of wining at least one silver.\n* P(A,B) : Probability of winning at least both silver and gold. \n* P(B|A) : Probability of winning a gold medal after winning silver\n\nThe conditional probability formula is the next one:\n\nP(B|A) = P(A) \/ P(A,B)","46f6dcf1":"**df_coaches**","403b9e63":"<b>df_athlets<\/b>\n\nTOP 10 of most athletes by country","c5793db9":"Data QA conclusions\n\n<br>\n<b>df_athletes<\/b>\n<li>Nulls values: not contain<\/li>\n<li>Duplicated values: 1 row<\/li>\n<li>Inconsistences: not contain<\/li>\n<br>\n<b>df_coaches<\/b>\n<li>Nulls values: 135 in Event attribute<\/li>\n<li>Duplicated values: 1 row<\/li>\n<li>Inconsistences: not contain<\/li>\n<br>\n<b>df_entries_gender<\/b>\n<li>Nulls values: not contain<\/li>\n<li>Duplicated values: not contain<\/li>\n<li>Inconsistences: not contain<\/li>\n<br>\n<b>df_medals<\/b>\n<li>Nulls values: not contain<\/li>\n<li>Duplicated values: not contain<\/li>\n<li>Inconsistences: not contain<\/li>\n<br>\n<b>df_teams<\/b>\n<li>Nulls values: not contain<\/li>\n<li>Duplicated values: not contain<\/li>\n<li>Inconsistences: not contain<\/li>","60b942fc":"<div style=\"font-weight: bold;font-size:20px;background-color: #F0F8FF;padding:0 1%; color:#2F4F4F\">Reporting<\/div> ","d04963fc":"<div style=\"font-weight: bold;font-size:20px;background-color: #F0F8FF;padding:0 1%; color:#2F4F4F\">Data QA<\/div>","0ed7c684":"<b>Spider plot<\/b>\n<br>\nIn case you want to play with this plot, you can change the number of the ranking number of the country you want to know the amount of each medal that had won.","ee351e29":"**df_entries_gender**","afdc5216":"<div style=\"font-weight: bold;font-size:20px;background-color: #F0F8FF;padding:0 1%; color:#2F4F4F\">Conditional probability<\/div>","88f35f3c":"Inconsistences","b80b0ce8":"<b>Load datasets<\/b>"}}