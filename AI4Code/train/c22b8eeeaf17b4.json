{"cell_type":{"56071371":"code","c0deaccd":"code","9471973c":"code","f662ff2b":"code","5ddaf6fe":"code","feafc04c":"code","4357f0dc":"code","739a1c02":"code","2c750799":"code","40ebec76":"code","f629a06e":"code","bb5d577b":"code","1c0f44a5":"code","a5781319":"code","014c739c":"code","523298f5":"code","524851f9":"code","ed9c65c0":"code","a4ae1984":"code","1b67b1e6":"code","07ccfcaa":"code","288e1f7d":"code","e40db2b7":"code","a9be21ef":"code","179c692d":"code","074fa0a6":"code","9e0cd8b4":"code","1e8389b2":"code","cd2ebf0f":"code","c84ac10c":"code","68d24bed":"code","bb233888":"code","76194f0e":"code","92500452":"code","8604288e":"code","9673ccb2":"code","6db430d0":"code","4e13fbd5":"code","4f06f567":"code","92321d15":"code","eef6a3a8":"code","24e9f063":"code","036c9324":"code","c70dc24e":"code","fb30d468":"markdown","ddb76b72":"markdown","bf7e74e1":"markdown","21eb826a":"markdown","056a18da":"markdown","0af5cbc9":"markdown","c1011640":"markdown","eae1a899":"markdown","dde86cf3":"markdown","b982ef1c":"markdown","011dbd0b":"markdown","4d739af8":"markdown","7328b693":"markdown","b789d784":"markdown","53c0b435":"markdown","c0607603":"markdown","43ad4d6d":"markdown","5f2e439e":"markdown","8815bb84":"markdown","e26cc792":"markdown","c4e6e952":"markdown","f011b1db":"markdown","e672bcb9":"markdown","3f705bf1":"markdown","ce1eaa85":"markdown"},"source":{"56071371":"%config InlineBackend.figure_format = 'png'\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#Importing libraries\nimport numpy as np\nimport pandas as pd\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport altair as alt\nimport statsmodels.api as sm\nimport math\nimport seaborn as sns\n\n!pip install openpyxl","c0deaccd":"#Combining data from all sheets into one \ndf = pd.concat(pd.read_excel(\"..\/input\/umd-alumni-data\/UMD Alumni Association Dataset.xlsx\", sheet_name=None), ignore_index=True)\ndf['Event Date'] = pd.to_datetime(df[\"Event Date\"])","9471973c":"#Viiew the last 5 rows \ndf.tail()","f662ff2b":"# Remove spaces in location and group description to make them uniform \ndf['Location Description'] = df['Location Description'].apply(lambda x: x.replace(\" \", \"\"))\ndf['Group Description'] = df['Group Description'].apply(lambda x: x.replace(\" \", \"\"))\ndf.loc[df['Location Description'] == 'CPNorhteast-NewYork', 'Location Description'] = 'CPNortheast-NewYork' #Correct spelling ","5ddaf6fe":"#Creating a data frame for first time attendees grouped by location \nftalocation_df = df.groupby('Location Description')['First Time Attendees'].sum().reset_index()\nftalocation_df = ftalocation_df.sort_values('First Time Attendees', ascending=False)[:10]\nftalocation_df","feafc04c":"#Creating the bars for the bar chart using Altair library\nbars = alt.Chart(ftalocation_df, title=\"Top 10 Locations by First Time Attendees\").mark_bar().encode(\n    y=alt.Y('Location Description',sort='-x'), x=alt.X('First Time Attendees', title='First Time Attendees'), \n    color = alt.condition(alt.datum['First Time Attendees'] > 3000,  #Highlighting the bar in green\n    alt.value('green'), alt.value('steelblue')))\n#Adding data labels to the bars\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(text='First Time Attendees')\n(bars + text).properties(height = 300)","4357f0dc":"#Creating a data frame for major prospects grouped by location \nmplocation_df = df.groupby('Location Description')['Major Prospects'].sum().reset_index()\nmplocation_df = mplocation_df.sort_values('Major Prospects', ascending=False)[:10]\nmplocation_df","739a1c02":"#Creating the bars for the bar chart \nbars = alt.Chart(mplocation_df, title=\"Top 10 Locations by Major Prospects\").mark_bar().encode(\n    y=alt.Y('Location Description',sort='-x'), x=alt.X('Major Prospects', title='Major Prospects'),\n    color = alt.condition(alt.datum['Major Prospects'] > 1000,   #Highlighting the bar in green\n    alt.value('green'), alt.value('steelblue')))\n#Adding data labels to the bars\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(text='Major Prospects')\n(bars + text).properties(height = 300)","2c750799":"#Creating a data frame for first time attendees grouped by group name\nftagroup_df = df.groupby('Group Description')['First Time Attendees'].sum().reset_index()\nftagroup_df = ftagroup_df.sort_values('First Time Attendees', ascending=False)[:10]\nftagroup_df","40ebec76":"#Creating the bars for the bar chart \nbars = alt.Chart(ftagroup_df, title=\"Top 10 Groups by First Time Attendees\").mark_bar().encode(\n    y=alt.Y('Group Description',sort='-x'), x=alt.X('First Time Attendees', title='First Time Attendees'),\n    color = alt.condition(alt.datum['First Time Attendees'] > 1000,   #Highlighting the bars in orange \n    alt.value('orange'), alt.value('steelblue')))\n#Adding data labels to the bars\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(text='First Time Attendees')\n(bars + text).properties(height = 300)\n","f629a06e":"#Creating data frame for major prospects grouped by group name\nmpgroup_df = df.groupby('Group Description')['Major Prospects'].sum().reset_index()\nmpgroup_df = mpgroup_df.sort_values('Major Prospects', ascending=False)[:10]\nmpgroup_df","bb5d577b":"#Creating the bars for the bar chart \nbars = alt.Chart(mpgroup_df, title=\"Top 10 Groups by Major Prospects\").mark_bar().encode(\n    y=alt.Y('Group Description',sort='-x'), x=alt.X('Major Prospects', title='Major Prospects'),\n    color = alt.condition(alt.datum['Major Prospects'] > 900,  #Highlighting the bars in orange\n    alt.value('orange'), alt.value('steelblue')))\n#Adding data labels to the bars\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(text='Major Prospects')\n(bars + text).properties(height = 300)","1c0f44a5":"#Creating a data frame for average first time attendees grouped by event name and location \nftaevent_df = df.groupby(['Event Name','Location Description'])['First Time Attendees'].mean().reset_index()\nftaevent_df = ftaevent_df.sort_values('First Time Attendees', ascending=False)[:10]\nftaevent_df","a5781319":"#Creating bars for the bar chart \nbars = alt.Chart(ftaevent_df, title=\"Top 10 Events by Average First Time Attendees\").mark_bar().encode(\n    y=alt.Y('Event Name',sort='-x'), x=alt.X('First Time Attendees', title='Average First Time Attendees'),\n    color = alt.condition(alt.datum['First Time Attendees'] > 500,  #Highlighting the bars in gold\n    alt.value('gold'), alt.value('steelblue')))\n#Adding data labels to the bars \ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(text='First Time Attendees')\n(bars + text).properties(height = 300)","014c739c":"#Creating data frame for average major prospects grouped by event name and location\nmpevent_df = df.groupby(['Event Name','Location Description'])['Major Prospects'].mean().reset_index()\nmpevent_df = mpevent_df.sort_values('Major Prospects', ascending=False)[:10]\nmpevent_df","523298f5":"#Creating bars for the bar chart\nbars = alt.Chart(mpevent_df, title=\"Top 10 Events by Average Major Prospects\").mark_bar().encode(\n    y=alt.Y('Event Name',sort='-x'), x=alt.X('Major Prospects', title='Average Major Prospects'),\n    color = alt.condition(alt.datum['Major Prospects'] > 95,    #Highlighting the bars in gold \n    alt.value('gold'), alt.value('steelblue')))\n#Adding data labels to the bars\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(text='Major Prospects')\n(bars + text).properties(height = 300)","524851f9":"#Creating a column to check if day is a weekday or weekend\ndf['Is Weekend?'] = df['Event Date'].dt.weekday.isin([4,5,6]).astype(int)   #Checking if day is Friday, Saturday or Sunday\n#Creating a column to store the month of the date\ndf['Month'] = df['Event Date'].dt.month","ed9c65c0":"#Creating a data frame for Average Participated grouped by Weekend\nweekend_df = df.groupby('Is Weekend?')['Participated'].mean().reset_index()\nweekend_df = weekend_df.round(2)\nweekend_df","a4ae1984":"#Bar plot \nplt.bar(weekend_df['Is Weekend?'],weekend_df['Participated'],width=0.5)\nplt.xticks(ticks=[0,1])\nplt.xlabel('Is Weekend?')\nplt.ylabel('Average Participants')\nplt.title(\"Average Participants by Day of Week\")\n#Data labels \nfor i in range(len(weekend_df['Is Weekend?'].unique())):\n  plt.text(i,weekend_df['Participated'][i],weekend_df['Participated'][i], ha=\"center\", va=\"bottom\")","1b67b1e6":"#Creating data frame for average percentage first time attendees grouped by Weekend \nftaweekend_df = df.groupby('Is Weekend?')['Percentage First Time Attendees'].mean().reset_index()\nftaweekend_df = ftaweekend_df.round(2)\nftaweekend_df","07ccfcaa":"#Bar plot \nplt.bar(ftaweekend_df['Is Weekend?'],ftaweekend_df['Percentage First Time Attendees'], width=0.5)\nplt.xticks(ticks=[0,1])\nplt.xlabel('Is Weekend?')\nplt.ylabel('Average % First Time Attendees')\nplt.title(\"Average Percentage First Time Attendees by Day of Week\")\n#Data labels \nfor i in range(len(ftaweekend_df['Is Weekend?'].unique())):\n  plt.text(i,ftaweekend_df['Percentage First Time Attendees'][i],ftaweekend_df['Percentage First Time Attendees'][i], ha=\"center\", va=\"bottom\")","288e1f7d":"#Creating data frame for average percentage major prospects grouped by Weekend \nmpweekend_df = df.groupby('Is Weekend?')['Percentage Major Prospect'].mean().reset_index()\nmpweekend_df = mpweekend_df.round(2)\nmpweekend_df","e40db2b7":"#Bar plot\nplt.bar(mpweekend_df['Is Weekend?'],mpweekend_df['Percentage Major Prospect'], width=0.5)\nplt.xticks(ticks=[0,1])\nplt.xlabel('Is Weekend?')\nplt.ylabel('Average % Major Prospects')\nplt.title(\"Average Percentage Major Prospects by Day of Week\")\n#Data labels\nfor i in range(len(mpweekend_df['Is Weekend?'].unique())):\n  plt.text(i,mpweekend_df['Percentage Major Prospect'][i],mpweekend_df['Percentage Major Prospect'][i], ha=\"center\", va=\"bottom\")","a9be21ef":"#Creating data frame for average participated grouped by month\nmonth_df = df.groupby('Month')['Participated'].mean().reset_index()\nmonth_df = month_df.sort_values('Participated', ascending=False)[:4]\nmonth_df = month_df.round(2)\nmonth_df","179c692d":"#Creating data frame for average first time attendees grouped by month\nftamonth_df = df.groupby('Month')['First Time Attendees'].mean().reset_index()\nftamonth_df = ftamonth_df.sort_values('First Time Attendees', ascending=False)[:4]\nftamonth_df = pd.merge(ftamonth_df, month_df, on=\"Month\")   #Merging two data frames with common month\nftamonth_df = ftamonth_df.round(2)\nftamonth_df","074fa0a6":"#Bar plot\nindex = np.arange(4)\nwidth = 0.35\nfig, ax = plt.subplots(figsize=(9, 6))\nrects1 = ax.bar(index - width \/ 2, ftamonth_df['First Time Attendees'], width, color='#1f77b4', alpha=0.5)\nrects2 = ax.bar(index + width \/ 2, ftamonth_df['Participated'], width, color='#1f77b4')\nplt.xticks(index, ftamonth_df['Month'])\nplt.xlabel('Month')\nplt.legend((rects1[0], rects2[0]), ('Average First Time Attendees', 'Average Participants'))\nplt.title(\"Top 4 Months by Average First Time Attendees and Average Participants\")\n#Data labels\n#ax.bar_label(rects1, padding=3)\n#ax.bar_label(rects2, padding=3)\nfig.tight_layout()\nplt.show()","9e0cd8b4":"#Creating data frame for average major prospects grouped by month\nmpmonth_df = df.groupby('Month')['Major Prospects'].mean().reset_index()\nmpmonth_df = mpmonth_df.sort_values('Major Prospects', ascending=False)[:5]\nmpmonth_df = pd.merge(mpmonth_df, month_df, on=\"Month\")       #Merging two data frames with common month column \nmpmonth_df = mpmonth_df.round(2)\nmpmonth_df","1e8389b2":"#Bar plots\nindex = np.arange(4)\nwidth = 0.35\nfig, ax = plt.subplots(figsize=(9, 6))\nrects1 = ax.bar(index - width \/ 2, mpmonth_df['Major Prospects'], width, color='#1f77b4', alpha=0.5)\nrects2 = ax.bar(index + width \/ 2, mpmonth_df['Participated'], width, color='#1f77b4')\nplt.xticks(index, mpmonth_df['Month'])\nplt.xlabel('Month')\nplt.legend((rects1[0], rects2[0]), ('Average Major Prospects', 'Average Participants'))\nplt.title(\"Top 4 Months by Average Major Prospects and Average Participants\")\n#Data labels\n#ax.bar_label(rects1, padding=3)\n#ax.bar_label(rects2, padding=3)\nfig.tight_layout()\nplt.show()","cd2ebf0f":"#Creating data frame for average first time attendees grouped by average age\nAgefta_df = df.groupby('Average Age')['First Time Attendees'].mean().reset_index()\nAgefta_df = Agefta_df.sort_values('First Time Attendees', ascending=False)\nAgefta_df = Agefta_df.round(2)\nAgefta_df","c84ac10c":"#Plotting histogram\nplt.hist(Agefta_df['Average Age'], weights=Agefta_df['First Time Attendees'], bins=5)\nplt.xlabel('Average Age')\nplt.ylabel('Average First Time Attendees')\nplt.title(\"Average Age vs Average First Time Attendees\")\nplt.show()","68d24bed":"#Creating data frame for average first time attendees and average age grouped by event name\nAge30fta_df = df.groupby(['Event Name'])['First Time Attendees', 'Average Age'].mean().reset_index()\nAge30fta_df = Age30fta_df.sort_values('First Time Attendees', ascending=False)\nAge30fta_df = Age30fta_df[Age30fta_df['Average Age'] <= 30][:10]\nAge30fta_df = Age30fta_df.round(2)\nAge30fta_df","bb233888":"#Creating bars for bar chart\nbars = alt.Chart(Age30fta_df, title=\"Top 10 Events by Average First Time Attendees Aged 30 and below\").mark_bar().encode(\n    y=alt.Y('Event Name',sort='-x'), x=alt.X('First Time Attendees', title='Average First Time Attendees'),\n    color = alt.condition(alt.datum['First Time Attendees'] > 95,    #Highlighting bars in purple \n    alt.value('purple'), alt.value('steelblue')))\n#Adding data labels to the bars\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(text='First Time Attendees')\n(bars + text).properties(height = 300)","76194f0e":"#Creating data frame for average major prospects grouped by average age\nAgemp_df = df.groupby('Average Age')['Major Prospects'].mean().reset_index()\nAgemp_df = Agemp_df.sort_values('Major Prospects', ascending=False)\nAgemp_df = Agemp_df.round(2)\nAgemp_df","92500452":"#Histogram plot \nplt.hist(Agemp_df['Average Age'], weights=Agemp_df['Major Prospects'], bins=5)\nplt.xlabel('Average Age')\nplt.ylabel('Average Major Prospects')\nplt.title(\"Average Age vs Average Major Prospects\")\nplt.show()","8604288e":"#Creating data frame for average major prospects and average age grouped by event name\nAge40mp_df = df.groupby(['Event Name'])['Major Prospects', 'Average Age'].mean().reset_index()\nAge40mp_df = Age40mp_df.sort_values('Major Prospects', ascending=False)\nAge40mp_df = Age40mp_df[Age40mp_df['Average Age'] >= 40][:10]\nAge40mp_df = Age40mp_df.round(2)\nAge40mp_df","9673ccb2":"#Creating bars for the bar chart\nbars = alt.Chart(Age40mp_df, title=\"Top 10 Events by Average Major Prospects Aged 40 and above\").mark_bar().encode(\n    y=alt.Y('Event Name',sort='-x'), x=alt.X('Major Prospects', title='Average Major Prospects'), \n    color = alt.condition(alt.datum['Major Prospects'] >= 80,     #Highlighting the bars in green\n    alt.value('darkgreen'), alt.value('steelblue')))\n#Adding data labels to the bars\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(text='Major Prospects')\n(bars + text).properties(height = 300)","6db430d0":"df['Quarter'] = df['Month'].apply(lambda x: math.ceil(x \/ 3)) # calculate quarter \ndf['Year'] = df['Event Date'].apply(lambda x: str(x)[:4])    # split year from date\ndf['YearMonth'] = df['Event Date'].apply(lambda x: str(x)[:7]) # split year-month from date\n\nplt.rcParams['figure.facecolor'] = 'white' # set face color\nplt.figure(figsize=(10,5))\ndf.groupby('YearMonth')['Percentage First Time Attendees'].mean().plot() # plot mean across month\nplt.ylabel('Percentage First Time Attendees')\nplt.title('Percentage First Time Attendees')\nplt.show()","4e13fbd5":"plt.figure(figsize=(10,5))\ndf.groupby('YearMonth')['First Time Attendees'].mean().plot() # plot mean across month\nplt.ylabel('First Time Attendees')\nplt.title('First Time Attendees') # set title\nplt.show()","4f06f567":"x = df[['Is Weekend?' , 'Average Age', 'Quarter', 'Year']]\ny = df['Percentage First Time Attendees']\nx_train = pd.concat((x,\n         pd.get_dummies(x['Quarter'], drop_first=True, prefix='Quarter'), # convert categorical variables into dummies\n         pd.get_dummies(x['Year'], drop_first=True, prefix='Year'),\n), axis=1)\nx_train.drop(['Quarter','Year'], axis=1, inplace=True)\nx_train","92321d15":"plt.rcParams['figure.facecolor'] = 'white' # change background color\nplt.figure(figsize=(3,3))\nsns.lmplot(x=\"Average Age\", y=\"Percentage First Time Attendees\",\n           hue=\"Quarter\", col=\"Quarter\", col_wrap=2,   # use facet to display quarter\n           data=df ,lowess=True).set(\n    title = 'Average Age VS Percentage of First Time Attendees',\n    xlabel='Average Age', \n    ylabel='Percentage First Time Attendees')","eef6a3a8":"plt.figure(figsize=(3,3)) # change figure size\nsns.lmplot(x=\"Average Age\", y=\"Percentage Major Prospect\",\n           hue=\"Quarter\", col=\"Quarter\", col_wrap=2,  # use facet to display quarter\n           data=df ,lowess=False).set(\n    title='Average Age VS Percentage of Major Prospect',\n    xlabel='Average Age', \n    ylabel='Percentage Major Prospect')","24e9f063":"mod = sm.OLS(y, x_train) # linear regression\nres = mod.fit() # fit the model\nprint(res.summary()) # print regression result","036c9324":"corr = df[['Participated','Average Age', 'First Time Attendees', 'Major Prospects']]\ncorr = corr.corr()\ncorr","c70dc24e":"cmap = sns.heatmap(corr,cmap='Blues', # set color map to blues\n        xticklabels=corr.columns,\n        yticklabels=corr.columns, annot=True)\ncmap.set_title(\"Correlation Map\") # set main title","fb30d468":"# Analysis by Event","ddb76b72":"# Analysis by Age","bf7e74e1":"AVERAGE PARTICIPANTS BY DAY OF WEEK","21eb826a":"TOP 10 GROUPS BY MAJOR PROSPECTS","056a18da":"# Regression Analysis","0af5cbc9":"Top 10 Events by Average First Time Attendees Aged 30 and below","c1011640":"# Analysis by Location","eae1a899":"AVERAGE PERCENTAGE MAJOR PROSPECTS BY DAY OF WEEK","dde86cf3":"# Time Series Plots","b982ef1c":"# Correlation Map","011dbd0b":"# Analysis by Group","4d739af8":"TOP 10 EVENTS BY AVERAGE MAJOR PROSPECTS","7328b693":"TOP 4 MONTHS BY AVERAGE PARTICIPATED","b789d784":"TOP 4 MONTHS BY AVERAGE FIRST TIME ATTENDEES AND AVERAGE PARTICIPANTS","53c0b435":"TOP 4 MONTHS BY AVERAGE MAJOR PROSPECTS AND AVERAGE PARTICIPANTS","c0607603":"# Analysis by Date","43ad4d6d":"TOP 10 GROUPS BY FIRST TIME ATTENDEES","5f2e439e":"Top 10 Events by Average Major Prospects Aged 40 and above","8815bb84":"TOP 10 LOCATIONS BY FIRST TIME ATTENDEES","e26cc792":"# Setup","c4e6e952":"AVERAGE PERCENTAGE FIRST TIME ATTENDEES BY DAY OF WEEK","f011b1db":"AVERAGE AGE vs AVERAGE MAJOR PROSPECTS","e672bcb9":"TOP 10 LOCATIONS BY MAJOR PROSPECTS","3f705bf1":"AVERAGE AGE vs AVERAGE FIRST TIME ATTENDEES","ce1eaa85":"TOP 10 EVENTS BY AVERAGE FIRST TIME ATTENDEES"}}