{"cell_type":{"779a52bb":"code","46fb67f1":"code","be494a91":"code","5ec4ad98":"code","5187e92d":"code","88b1aec8":"code","47284f29":"code","e20cc4a3":"code","656ae09a":"code","822201b7":"code","039c502b":"code","e39f9233":"code","3bae8f02":"code","52bab802":"code","5b95c17a":"markdown","be9ed4b4":"markdown","32c93f28":"markdown"},"source":{"779a52bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46fb67f1":"data = pd.read_csv('..\/input\/voicegender\/voice.csv')","be494a91":"data.info()","5ec4ad98":"label_encoder = LabelEncoder()","5187e92d":"data['label'] = label_encoder.fit_transform(data['label'])","88b1aec8":"dict(enumerate(label_encoder.classes_))","47284f29":"y = data['label'].copy()\nX = data.drop('label', axis=1).copy()","e20cc4a3":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","656ae09a":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, random_state=42)","822201b7":"X.shape","039c502b":"inputs = tf.keras.Input(shape=(X.shape[1],))\n\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\n\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs, outputs)","e39f9233":"model.summary()","3bae8f02":"model.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[\n        'accuracy',\n        tf.keras.metrics.AUC(name='auc')\n    ]\n)\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=32,\n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=3,\n            restore_best_weights=True\n        )\n    ]\n)","52bab802":"model.evaluate(X_test, y_test)","5b95c17a":"# Splitting and Scaling","be9ed4b4":"# Encoding Labels","32c93f28":"# Modeling and Training"}}