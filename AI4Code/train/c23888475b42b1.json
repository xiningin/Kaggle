{"cell_type":{"f0f0e98f":"code","b62d7e81":"code","e51d37e3":"code","2dddbfa8":"code","2145187a":"code","7efe8c65":"code","5150f0a3":"code","00d376c0":"code","deb0ad69":"code","2e42772d":"code","9846ad49":"code","dfb14ba5":"code","be79e5e2":"code","8c03d7de":"code","cdf95462":"code","cd6ef92b":"code","583dcdf4":"markdown","68d8f9b7":"markdown","c0f3b0c0":"markdown","86b9b6e4":"markdown","42e1baca":"markdown","d423ec9d":"markdown","84000ff4":"markdown","17888f98":"markdown","c77463c6":"markdown","ef549872":"markdown"},"source":{"f0f0e98f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib_venn as venn\nfrom pandas.tools.plotting import parallel_coordinates\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b62d7e81":"iris = pd.read_csv('..\/input\/Iris.csv')","e51d37e3":"iris.info()","2dddbfa8":"iris = iris.drop(['Id'],axis=1)","2145187a":"new_iris = iris.iloc[:,:3]\nnew_iris.SepalLengthCm[np.arange(1,150,10)] = np.nan\nnew_iris.PetalLengthCm[np.arange(25,120,7)] = np.nan\nnew_iris","7efe8c65":"# import missingno library\nimport missingno as msno\n\nmsno.matrix(new_iris)\nplt.show()","5150f0a3":"# Make the plot\nplt.figure(figsize=(15,10))\nparallel_coordinates(iris, 'Species', colormap=plt.get_cmap(\"Set2\"))\nplt.title(\"Iris data class visualization according to features (setosa, versicolor, virginica)\")\nplt.xlabel(\"Features of data set\")\nplt.ylabel(\"cm\")\nplt.savefig('graph.png')\nplt.show()","00d376c0":"# Display positive and negative correlation between columns\niris.corr()","deb0ad69":"#sorts all correlations with ascending sort.\niris.corr().unstack().sort_values().drop_duplicates()","2e42772d":"iris.corr().stack().reset_index()","9846ad49":"# import networkx library\nimport networkx as nx\n\n# Transform it in a links data frame (3 columns only):\nlinks = iris.corr().stack().reset_index()\nlinks.columns = ['var1', 'var2','value']\n\n# correlation\nthreshold = -1\n\n# Keep only correlation over a threshold and remove self correlation (cor(A,A)=1)\nlinks_filtered=links.loc[ (links['value'] >= threshold ) & (links['var1'] != links['var2']) ]\n \n# Build your graph\nG=nx.from_pandas_edgelist(links_filtered, 'var1', 'var2')\n \n# Plot the network\nnx.draw_circular(G, with_labels=True, node_color='green', node_size=1000, edge_color='cyan', linewidths=3, font_size=12)\n","dfb14ba5":"# venn2\nfrom matplotlib_venn import venn2\ndata_1 = len(iris.SepalLengthCm)\ndata_2 = len(iris.SepalWidthCm)\ndata_3 = len(iris[(iris.SepalLengthCm==iris.SepalWidthCm)]) # =0\n\n# First way to call the 2 group Venn diagram\nvenn2(subsets = (data_1, data_2, data_3), set_labels = ('SepalLengthCm', 'SepalWidthCm'))\nplt.show()","be79e5e2":"# donut plot\nfeature_names = \"sepal_length\",\"sepal_width\",\"petal_length\",\"petal_width\"\nfeature_size = [len(iris.SepalLengthCm),len(iris.SepalWidthCm),len(iris.PetalLengthCm),len(iris.PetalWidthCm)]\n# create a circle for the center of plot\ncircle = plt.Circle((0,0),0.5,color = \"white\") #(0,0) coordinate\nplt.pie(feature_size, labels = feature_names, colors = [\"black\",\"green\",\"blue\",\"cyan\"] )\np = plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Number of Each Features\")\nplt.show()","8c03d7de":"# spider graph\ncategories = list(iris)[:4]\nN = len(categories)\nangles = [ n \/ float(N)*2*pi for n in range(N)]\nangles = angles + angles[:1]\nplt.figure(figsize = (10,10))\nax = plt.subplot(111,polar = True)\nax.set_theta_offset(pi\/2)\nax.set_theta_direction(-1)\nplt.xticks(angles[:-1],categories)\nax.set_rlabel_position(0)\nplt.yticks([0,2,4,6],[\"0\",\"2\",\"4\",\"6\"],color= \"red\", size = 7)\nplt.ylim(0,6)\n\nvalues = iris.loc[0].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"setosa\" )\nax.fill(angles,values,\"b\",alpha=0.1)\n\nvalues = iris.loc[1].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"versicolor\" )\nax.fill(angles,values,\"orange\",alpha=0.1)\nplt.legend(loc = \"upper left\",bbox_to_anchor = (0.1,0.1))\nplt.show()","cdf95462":"# trace1 is line plot\n# go: graph object\ntrace1 = go.Scatter(\n    x=iris.index,\n    y=iris.SepalLengthCm,\n    mode = \"markers\",\n    xaxis='x2',\n    yaxis='y2',\n    name = \"SepalLengthCm\",\n    marker = dict(color = 'rgba(76, 120, 213, 0.8)'),\n)\n\n# trace2 is histogram\ntrace2 = go.Histogram(\n    x=iris.SepalLengthCm,\n    opacity=0.75,\n    name = \"Sepal Length(Cm)\",\n    marker=dict(color='rgba(120, 5, 125, 0.6)'))\n\n# add trace1 and trace2\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.7, 1],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = ' Sepal Length(Cm) Histogram and Scatter Plot'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cd6ef92b":"# import data again\niris = pd.read_csv('..\/input\/Iris.csv')\n# data of iris setosa\niris_setosa = iris[iris.Species == \"Iris-setosa\"]\n# data of iris virginica\niris_virginica = iris[iris.Species == \"Iris-virginica\"]\n# data of iris virginica\niris_versicolor = iris[iris.Species == \"Iris-versicolor\"]\n\n# trace1 =  iris setosa\ntrace1 = go.Scatter3d(\n    x=iris_setosa.SepalLengthCm,\n    y=iris_setosa.SepalWidthCm,\n    z=iris_setosa.PetalLengthCm,\n    mode='markers',\n    name = \"iris_setosa\",\n    marker=dict(\n        color='rgb(217, 100, 100)',\n        size=12,\n        line=dict(\n            color='rgb(0, 0, 0)',\n            width=0.1\n        )\n    )\n)\n# trace2 =  iris virginica\ntrace2 = go.Scatter3d(\n    x=iris_virginica.SepalLengthCm,\n    y=iris_virginica.SepalWidthCm,\n    z=iris_virginica.PetalLengthCm,\n    mode='markers',\n    name = \"iris_virginica\",\n    marker=dict(\n        color='rgb(54, 170, 127)',\n        size=12,\n        line=dict(\n            color='rgb(0, 0, 0)',\n            width=0.1\n        )\n    )\n)\n# trace3 =  iris versicolor\ntrace3 = go.Scatter3d(\n    x=iris_versicolor.SepalLengthCm,\n    y=iris_versicolor.SepalWidthCm,\n    z=iris_versicolor.PetalLengthCm,\n    mode='markers',\n    name = \"iris_setosa\",\n    marker=dict(\n        color='rgb(100, 150, 145)',\n        size=12,\n        line=dict(\n            color='rgb(0, 0, 0)',\n            width=0.1\n        )\n    )\n)\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n    title = ' 3D iris_setosa and iris_virginica',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","583dcdf4":" <a id=\"5\"><\/a> <br>\n## Donut (Matplotlib)\n* A donut chart is a pie chart with an area of the center cut out. ","68d8f9b7":"<a id=\"9\"><\/a> <br>\n# Conclusion\n* If you like it, thank you for you upvotes.\n* If you have any question, I will happy to hear it","c0f3b0c0":"<a id=\"7\"><\/a> <br>\n## Inset Plots (Plotly)\n* If you do not understand the code check my plotly tutorial.","86b9b6e4":" <a id=\"6\"><\/a> <br>\n## Spider Chart (Matplotlib)\n* A spider(radar) plot  is a graphical method of displaying multivariate data in the form of a two-dimensional chart of three or more quantitative variables.","42e1baca":"<a id=\"8\"><\/a> <br>\n## Basic 3D Scatter Plot (Plotly)\n* import data again to avoid confusion\n* go.Scatter3d: 3D scatter\n* We will plot iris setosa and iris virginica classes according to their Sepal Length(x), Sepal Width(y), and Petal Length(z).","d423ec9d":"# INTRODUCTION\n* In this kernel, we will learn Rare Visualization Tools.\n\n<br>Content:\n* [Matrix and Box Plots (Missingno)](#1)\n* [Parallel Plots (Pandas)](#2)\n* [Network Charts (Networkx)](#3)\n* [Venn (Matplotlib)](#4)\n* [Donut (Matplotlib)](#5)\n* [Spider Chart (Matplotlib)](#6) \n* [Inset Plots (Plotly)](#7) \n* [Basic 3D Scatter Plot (Plotly)](#8) \n\n* [Conclusion](#9) ","84000ff4":"<a id=\"3\"><\/a> <br>\n## Network Charts (Networkx)\n* We will use iris data that we import at previous part( parallel plot)\n* Network charts are related with correlation network.\n* It can be used instead of heatmaps in seaborn library.\n* At first look at correlation between features.\n    * corr(): gives correlation between features\n    * As you can see from table below, petal length is positively correlated with sepal length and petal width. Also, petal length is negatively correlated with sepal width.\n* We have 4 individuals(features), and know how close they are related to each other (above correlation table).\n* It is possible to represent these relationships in a network\n* Each individual called as a node. If 2 individuals(features like sepal length and sepal width) are close enough (threshold), then they are linked by a line.\n    * threshold: threshold of the correlation. For example, if we say that threshold = 0.5, network will be established between the nodes that have higher correlation than 0.5\n* I will put -1 that is default threshold value. min(cor(A,B))= -1 so all nodes are connected with each other.\n* You can try threshold = 0.9, you will see that petal length and width are connected with each other.\n* It is alternative to heatmap.\n* As a final words of network charts, they can be used in data sets that are related with populations and their habits. Maybe,we can observe populations are clearly split in X groups according to their habits.\n* Now lets look at our code with iris datasets.","17888f98":"<a id=\"4\"><\/a> <br>\n## Venn (Matplotlib)\n* You can use venn diagram to visualize the size of groups and their intersection.","c77463c6":"<a id=\"1\"><\/a> <br>\n## Matrix and Bar Plots (Missingno)\n* In data analysis, one of the first steps is cleaning messy datasets and missing values.\n* In order to explore whether data has missign value or not, I always use .info() method from pandas library. It gives a lot of information.\n* Visualization is always attractive for people. Therefore, if we can visualize missign values, it can be better understandable.\n* In order to visualize missign data, we can use missigno package.\n* Lets create pandas dataframe that includes missign values (NaN) and visualize it.\n    * Dictionary: One of the methods of creating data frame is first creating dictionary then put it into pd.DataFrame\n    * data_missingno: Data frame that we will use in this example\n    * import missingno as msno: import missingno library and define as msno (shortcut)\n    * matrix(): Create matrix. Number of rows is number of sample and number of columns is number of features(column1, column2, column3) in data_missingno.\n    * show(): shows the plot\n* The sparkline at right summarizes the general shape of the data completeness and points out the maximum and minimum rows.\n* Missign values are white and non missign values are black in plot.\n* It can be seen from plot column1 does not have missign value. Column2 has five missign values and column3 has three missign values.","ef549872":"<a id=\"2\"><\/a> <br>\n## Parallel Plots (Pandas)\n* In order to learn parallel plots, we will use famous iris data set from sklearn library\n* Parallel plot allow to compare the feature of several individual observations on a set of numerical variables.\n* Each vertical bar represents a feature(column or variable) like petal length (cm).\n* Values are then plotted as series of lines connected across each axis.\n* Different colors shows different classes like setosa.\n* Parallel plot allow to detect interesting patterns. For example as you can see we can easily classify *setosa* according to *petal width (cm)* feature.\n* Lets look at code.\n    * Load iris data into data frame\n    * parallel_coordinates: we import parallel_coordinates from pandas library\n    * colormap: color map that paints classes with different colors"}}