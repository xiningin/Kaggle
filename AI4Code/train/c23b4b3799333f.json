{"cell_type":{"1359b666":"code","7607c474":"code","2557d84a":"code","224c5e96":"markdown","6dce3f1d":"markdown","afcc7439":"markdown","97d2c9f0":"markdown","d68b651e":"markdown"},"source":{"1359b666":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport glob\nimport re\n%matplotlib inline","7607c474":"def Extract_Job_Info(job_bulletin):\n    \n    # read file as a pandas dataframe\n    file = pd.read_table(job_bulletin, sep='\\n', header = None, nrows=10)\n    \n    # extract job_title by cleaning the txt file name\n    \n    job_title = pd.Series(job_bulletin)\n    job_title = job_title.str.replace(input_dir, '') # remove dir name\n    job_title = job_title.str.replace('\\\\', '')      # remove \\\\ \n    job_title = job_title.str.replace('.txt','')     # remove file ext\n    job_title = job_title.str.replace(r'\\d+', '')    # remove all numbers \n    job_title = job_title.str.replace('rev', '', flags = re.IGNORECASE) \n    job_title = job_title.str.replace(r\"\\s+\\(.*\\)\",\"\")[0]   # remove all symbols\n    \n    # if the job title (in caps) occupies 2 lines \n    # drop that line and reset the index for the next steps\n    if file.iloc[1][0].isupper() == True:                                 \n        file = file.drop(file.index[1]).reset_index()                  \n\n    # extract class_code from second line of the file\n    class_code = file.iloc[1].str.replace(r'\\D+', '')[0]                \n\n    # extract open_date from thrid line of the file\n    open_date = file.iloc[2].str.replace(r'\\D+', '')[0] \n    \n    # adjust the format to DD-MM-YY\n    if len(open_date) < 6:\n        open_date = '0'+ open_date                                      \n    if len(open_date) > 6:\n        open_date = open_date.replace(open_date[-4:],open_date[-2:])      \n    \n    # introduce dashes to set a pretty format like dd-mm-yy format\n    open_date = '-'.join([open_date[:2], open_date[2:4], open_date[4:]])\n\n    # extract minimum and max salary \n    # add exception to set 'NaN' forjobs with no salary info\n    \n    try:   \n        # find the line before the one containing salary info\n        # clean the line to obtain only the numbers\n        # find the max and min value\n        \n        for lines in file.iterrows():\n            if lines[1][0][:6] == 'ANNUAL': \n                possible_salaries = file.iloc[lines[0] + 1].str.replace(r',', '').str.replace(r'\\D+',' ')\n\n        salary_max = np.array(possible_salaries[0].split()).astype(int).max() # finds the max value inline \n        salary_min = np.array(possible_salaries[0].split()).astype(int).min() # finds the min value inline\n\n    except:                                                                \n        # set max and min salary to NaN if no information is given\n        salary_max = np.nan\n        salary_min = np.nan\n\n    return pd.Series(data = [job_title, open_date, salary_min, salary_max, class_code])","2557d84a":"# read folder containing the txt files\ninput_dir = \"..\/input\/cityofla\/CityofLA\/Job Bulletins\/\"\njob_bulletins_list = glob.glob(os.path.join(input_dir,'*txt')) # a list containing all the txt files\n\n# apply the function to each job file in the folder\n# save all info as a Pandas dataframe\nJob_Info_Table = pd.DataFrame([Extract_Job_Info(job) for job in job_bulletins_list])\nJob_Info_Table.columns = ['Job Title','Open Date','Salary Min ($)','Salary Max ($)', 'Class Code']\nJob_Info_Table.sort_values('Job Title')","224c5e96":"**Build a Function to Extract Info from each Job Bulletin** <br>\nThis function extracts job title, open date, min and max salaries and the class code <br>\nusing simple pandas commands. This function can then be applied to each file in the dir","6dce3f1d":"> **Import the Basics**","afcc7439":"**Apply Extract_Job_Info Function**","97d2c9f0":"**Now ... some cool plots comming ...** ","d68b651e":"# Exploring Jobs in the City of LA\n**\u201c Hello World! \u201c**  \u2026 and new rookie appears! <br>\nAs my first Kernel, I aimed to build a simple and clean function to extract basic information from the text files using only Pandas. <br>\nThis dataset seemed like a good chance to explore the flexibility of Pandas, even if it is not the best strategy for some tasks.\n"}}