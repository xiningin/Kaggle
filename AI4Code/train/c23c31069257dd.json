{"cell_type":{"8fc5aa7c":"code","34dae742":"code","6d66d489":"code","08af4be5":"code","df280580":"code","d02909b1":"code","a6fbce8f":"code","882f2454":"code","45a4af03":"code","e4d9db61":"code","38e79865":"code","5b1ab1d5":"code","63ae1495":"code","5cac187a":"code","8cc28ad9":"markdown","1457f8c6":"markdown","91ced8ab":"markdown","fa9cd619":"markdown"},"source":{"8fc5aa7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom itertools import cycle, islice\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import parallel_coordinates\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34dae742":"data = pd.read_csv(\"\/kaggle\/input\/wine-dataset-for-clustering\/wine-clustering.csv\")\ndata","6d66d489":"data.columns","08af4be5":"data.info()","df280580":"data.describe().transpose()","d02909b1":"X = StandardScaler().fit_transform(data)\nX","a6fbce8f":"kmeans = KMeans(n_clusters = 10)\nmodel = kmeans.fit(X)\nmodel","882f2454":"centers = model.cluster_centers_\ncenters","45a4af03":"# create DataFrame with a column for cluster number\ndef pd_centers(featuresUsed, centers):\n    col_names = list(featuresUsed)\n    col_names.append(\"prediction\")\n    \n#     Zip with a column called \"prediction\" (index)\n    Z = [np.append(A, index) for index, A in enumerate(centers)]\n#     print(Z)\n    \n#     Convert to pandas DataFrame for plotting\n    P = pd.DataFrame(Z, columns = col_names)\n    P[\"prediction\"] = P[\"prediction\"].astype(int)\n    return P","e4d9db61":"# function that creates Paralell Plots\ndef parallel_plot(data):\n    my_colours = list(islice(cycle(['b', 'r', 'g', 'y', 'k']), None,len(data)))\n    plt.figure(figsize=(15,8)).gca().axes.set_ylim([-5,+5])\n    parallel_coordinates(data, \"prediction\", color = my_colours, marker = \"o\")","38e79865":"P = pd_centers(data.columns, centers)\nP","5b1ab1d5":"# Plotting for strong wine\nparallel_plot(P[P[\"Alcohol\"] > 0.5])","63ae1495":"# Plotting for strong color instensity\nparallel_plot(P[P[\"Color_Intensity\"] > 0.5])","5cac187a":"# Plotting for strong ash level\nparallel_plot(P[P[\"Ash\"] > 0.5])","8cc28ad9":"# **Scale data using StandardScaler**","1457f8c6":"# **Explore the data**","91ced8ab":"# **Function for DataFrame and fucntion for plotting**","fa9cd619":"# **Use k-Means clustering**"}}