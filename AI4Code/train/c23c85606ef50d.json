{"cell_type":{"9a802320":"code","b3dfb050":"code","686d2224":"code","268008ee":"code","3c27b04b":"code","0cfc9618":"code","e578d87d":"code","f964f824":"code","aa1c8940":"code","91271134":"code","4f436375":"code","48f00203":"code","d0f25b02":"code","156d9739":"code","5612da31":"code","33cc06aa":"code","76a8f5d3":"code","c111553b":"code","f1cd8144":"code","ad195339":"code","c6138998":"code","f1adf587":"code","cf1e6a83":"code","ed48bcf1":"code","033f082a":"code","7893b655":"code","041cc54e":"code","dcc68ac2":"code","75232c7e":"code","626f816a":"code","8c4d3fb8":"code","8a342840":"code","c6e203bf":"code","ccde43a8":"code","4238ce03":"code","833a14e3":"code","a0ead7c4":"code","badfeb1c":"code","897a3017":"code","f6a06cab":"code","b7483981":"code","a326088a":"code","f8292063":"code","b7848ed7":"code","44ccfc08":"code","2b6fa076":"code","74a50e3e":"code","0b789836":"code","e2b9e6c7":"code","f5e050f9":"code","5c54b538":"code","821541b1":"code","19b23eb1":"code","539efffd":"code","f96eed89":"code","fcc4f0bc":"code","afbb30a9":"code","9c871462":"code","cc042365":"code","91084b88":"code","7e0bf7c4":"code","ec7fee16":"code","98e8dafa":"code","b7716d79":"code","879896b3":"code","6301e988":"code","55b55c88":"code","31183435":"code","f45b38af":"code","98a49e77":"code","f8a1cf5d":"code","daa350b0":"code","2734fb80":"code","84ed31bf":"code","fa045ac8":"code","b0e26c44":"code","6a30c70a":"code","a4e09818":"code","56d63475":"code","5a592486":"code","8caed461":"code","ee860471":"markdown","8c297f12":"markdown","4eaba754":"markdown","370c6a1c":"markdown","301c98a8":"markdown","d7265a04":"markdown","9c9e008f":"markdown"},"source":{"9a802320":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')","b3dfb050":"gender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","686d2224":"train.head()","268008ee":"gender_submission.head()","3c27b04b":"sns.heatmap(train.isnull(),yticklabels=False,cmap='magma')","0cfc9618":"train.drop(['Cabin','Ticket'],axis=1,inplace=True)","e578d87d":"train.info()","f964f824":"# Lets check the correlation\ntrain.corr()","aa1c8940":"# lets do some visualization\nsns.countplot(train['Survived'])","91271134":"sns.countplot(train['Sex'])","4f436375":"sns.countplot(train['Survived'],hue=train['Sex'])","48f00203":"sns.countplot(train['Pclass'])","d0f25b02":"sns.countplot(train['Survived'],hue=train['Pclass'])","156d9739":"sns.countplot(train['Parch'])","5612da31":"sns.countplot(train['Survived'],hue=train['Parch'])","33cc06aa":"sns.countplot(train['SibSp'])","76a8f5d3":"sns.countplot(train['Survived'],hue=train['SibSp'])\nplt.legend(loc='upper right')","c111553b":"sns.distplot(train['Fare'],bins=50)","f1cd8144":"sns.pairplot(train)","ad195339":"def impute_age(cols):\n    age=cols[0]\n    pclass=cols[1]\n    sibsp=cols[2]\n    parch=cols[3]\n    \n    age_t=train[(train['Pclass']==pclass)&(train['SibSp']==sibsp)&(train['Parch']==parch)]['Age'].median()\n    age_s=train[(train['Pclass']==pclass)]['Age'].median()\n    if pd.isnull(age):\n        if pd.isnull(age_t):\n            age=age_s\n        else:\n            age=age_t\n    else:\n        age=age\n    return age","c6138998":"train['Age']=train[['Age','Pclass','SibSp','Parch']].apply(impute_age,axis=1)","f1adf587":"train.info()","cf1e6a83":"train['Embarked'].fillna(train['Embarked'].mode()[0],inplace=True)","ed48bcf1":"train.info()","033f082a":"sns.boxplot(train['Age'])","7893b655":"sns.boxplot(train['Fare'])","041cc54e":"from collections import Counter","dcc68ac2":"Counter([1,1,1,3,3,2,3,2,5,2,3,2,2,3])","75232c7e":"def detect_outliers(df,n,features):\n    outlier_indices=[]\n    \n    for col in features:\n        Q1=np.percentile(df[col],25)\n        Q3=np.percentile(df[col],75)\n        IQR=Q3-Q1\n        outlier_step=IQR*1.5\n        outlier_list_col=df[(df[col]<Q1-outlier_step)|(df[col]>Q3+outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices=Counter(outlier_indices)\n    multiple_outliers=[k for k,v in outlier_indices.items() if v>n]\n    return multiple_outliers","626f816a":"outliers_to_drop=detect_outliers(train,1,['Age','SibSp','Parch','Fare'])","8c4d3fb8":"len(outliers_to_drop)","8a342840":"train.loc[outliers_to_drop]","c6e203bf":"train.drop(outliers_to_drop,inplace=True)\ntrain.reset_index(drop=True,inplace=True)\ntrain.info()","ccde43a8":"sns.distplot(train['Fare'],bins=40)","4238ce03":"train['Fare']=train['Fare'].apply(lambda x:np.log(x) if x>0 else 0)","833a14e3":"sns.distplot(train['Fare'],bins=40)","a0ead7c4":"train['title']=train['Name'].apply(lambda x: x.split(',')[1].strip().split('.')[0])","badfeb1c":"train['title'].unique()","897a3017":"plt.figure(figsize=(20,10))\nsns.countplot('title',hue='Survived',data=train)","f6a06cab":"train['title']=train['title'].replace(['Don','Rev','Dr','Mme','Ms','Major','Lady','Sir','Mlle','Col','Capt','the Countess','Jonkheer'],'Rare')","b7483981":"train['title']=train['title'].map({'Mr':0,'Mrs':1,'Miss':1,'Master':2,'Rare':3})","a326088a":"train['Embarked']=pd.get_dummies(train['Embarked'],drop_first=True)","f8292063":"train['Sex']=pd.get_dummies(train['Sex'],drop_first=True)","b7848ed7":"train.head()","44ccfc08":"train.drop('Name',axis=1,inplace=True)","2b6fa076":"train.head()","74a50e3e":"x=train.drop(['PassengerId','Survived'],axis=1)\ny=train['Survived']","0b789836":"from sklearn.model_selection import train_test_split","e2b9e6c7":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=101)","f5e050f9":"from sklearn.linear_model import LogisticRegression","5c54b538":"lg=LogisticRegression()","821541b1":"lg.fit(x_train,y_train)","19b23eb1":"predictions=lg.predict(x_test)","539efffd":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score","f96eed89":"print(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))\nprint(accuracy_score(y_test,predictions))","fcc4f0bc":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import cross_val_score","afbb30a9":"mns=[]\nstds=[]\nclfs=[KNeighborsClassifier(),SVC(),DecisionTreeClassifier(),RandomForestClassifier(),ExtraTreesClassifier(),AdaBoostClassifier(),MultinomialNB()]\nfor i in clfs:\n    cvs=cross_val_score(i,x,y,scoring='accuracy',cv=5,n_jobs=-1,verbose=1)\n    mns.append(cvs.mean())\n    stds.append(cvs.std())","9c871462":"for i in range(7):\n    print(clfs[i].__class__.__name__,':',mns[i]*100)","cc042365":"rfc=RandomForestClassifier(n_estimators=100)","91084b88":"rfc.fit(x_train,y_train) #training the model\nfeatures=x.columns\nimportances = rfc.feature_importances_ #taking the feature importance values into the a variable\nindices = np.argsort(importances)\nplt.figure(figsize=(10,10)) #plotting these in to a horizontal barplot\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), features[indices])\nplt.xlabel('Relative Importance')","7e0bf7c4":"predictions=rfc.predict(x_test)","ec7fee16":"print(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","98e8dafa":"train['Survived'].value_counts()","b7716d79":"from xgboost import XGBClassifier","879896b3":"xgbc=XGBClassifier()","6301e988":"xgbc.fit(x_train,y_train)","55b55c88":"predictions=xgbc.predict(x_test)","31183435":"print(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","f45b38af":"test['title']=test['Name'].apply(lambda x: x.split(',')[1].strip().split('.')[0])","98a49e77":"test['title']=test['title'].replace(['Don','Rev','Dr','Mme','Ms','Major','Lady','Sir','Mlle','Col','Capt','the Countess','Jonkheer'],'Rare')","f8a1cf5d":"test['title']=test['title'].map({'Mr':0,'Mrs':1,'Miss':1,'Master':2,'Rare':3})","daa350b0":"test['Embarked']=pd.get_dummies(test['Embarked'],drop_first=True)","2734fb80":"test['Sex']=pd.get_dummies(test['Sex'],drop_first=True)","84ed31bf":"test.drop(['Name','Cabin','PassengerId','Ticket'],axis=1,inplace=True)","fa045ac8":"test.head()","b0e26c44":"test_predictions=xgbc.predict(test)","6a30c70a":"df= pd.read_csv(\"..\/input\/titanic\/test.csv\")","a4e09818":"Submission=df[['PassengerId','Fare']]","56d63475":"Submission['Survived']=test_predictions","5a592486":"Submission.drop('Fare',axis=1,inplace=True)\nSubmission.head()","8caed461":"Submission.to_csv('Submission_titanic.csv',index=False)","ee860471":"# Lets fill those null values","8c297f12":"**EDA**","4eaba754":"# New Feature imputing","370c6a1c":"# Cross Validation","301c98a8":"# Lets check for the outliers","d7265a04":"# Assigning inputs and output","9c9e008f":"As there are too many null values in the cabin column we are going to drop this column"}}