{"cell_type":{"f908cdbe":"code","79af38cd":"code","d63d198b":"code","eb294cac":"code","572b3404":"code","bafe1873":"code","62d56c61":"code","2c35057a":"code","4e01ea59":"code","42702503":"code","af64c85a":"code","c95f18e8":"code","8e59ab11":"code","56d66eb6":"code","99a987b8":"markdown","ed30caf0":"markdown","9d971371":"markdown"},"source":{"f908cdbe":"import pandas as pd       \nimport matplotlib as mat\nimport matplotlib.pyplot as plt    \nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\n\nimport pandas_profiling as pp\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import OrdinalEncoder\n\nfrom sklearn.metrics import mean_squared_error\n\nfrom xgboost import XGBRegressor","79af38cd":"train = pd.read_csv('..\/input\/30-days-of-ml\/train.csv', index_col = 'id')\ntest = pd.read_csv('..\/input\/30-days-of-ml\/test.csv', index_col = 'id')\nsubmission = pd.read_csv('..\/input\/30-days-of-ml\/sample_submission.csv')","d63d198b":"train","eb294cac":"train.isnull().sum()","572b3404":"train.info()","bafe1873":"test","62d56c61":"test.isnull().sum()","2c35057a":"pp.ProfileReport(train)","4e01ea59":"X_train = train.copy().drop('target', axis = 1)\ny_train = train['target'].copy()","42702503":"# List of categorical columns\nobject_cols = [col for col in X_train.columns if 'cat' in col]\n\n# ordinal-encode categorical columns\nordinal_encoder = OrdinalEncoder()\nX_train[object_cols] = ordinal_encoder.fit_transform(X_train[object_cols])\nX_test[object_cols] = ordinal_encoder.transform(X_test[object_cols])","af64c85a":"def cv_function (model, param, list):\n    \n    kfold = KFold(n_splits = 10)\n    search_model = model\n    print ('Hyperparameter: ', param)\n    \n    for i in list:\n        param_dict = {param : i}\n        search_model.set_params(**param_dict)    \n        cv_score = cross_val_score(search_model, X_train, y_train, cv=kfold, scoring='neg_root_mean_squared_error')\n        print(\"Parameter: {0:0.2f} - RMSE(SD): {1:0.4f} ({2:0.4f})\". format(i, cv_score.mean(), cv_score.std()))","c95f18e8":"xgb_model = XGBRegressor(learning_rate = 0.03, random_state = 42, tree_method = 'gpu_hist', reg_alpha = 10)\n\nparams_xgb_list = [1000,1150,1300,1500,1750,2000]\nparam_xgb = 'n_estimators'\ncv_function(xgb_model, param_xgb, params_xgb_list)","8e59ab11":"xgb_final = XGBRegressor(n_estimators = 1500, learning_rate = 0.03 ,random_state = 42, tree_method = 'gpu_hist', reg_alpha = 10)\n\nxgb_final.fit(X_train, y_train)\npredictions = xgb_final.predict(X_test)","56d66eb6":"submission['target'] = predictions\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission","99a987b8":"# CV and Model","ed30caf0":"# Predictions","9d971371":"# EDA"}}