{"cell_type":{"3cefb20b":"code","4a216fa8":"code","57410155":"code","d7473e23":"code","da50a66b":"code","31c0cc8b":"code","0b5303f1":"code","35451c0d":"code","4223ce1f":"code","bc0095bd":"code","b982fad8":"markdown","f85fe991":"markdown","140e759a":"markdown","01bb0447":"markdown","5c149535":"markdown"},"source":{"3cefb20b":"import nltk\nfrom nltk.corpus import opinion_lexicon\nfrom nltk.tokenize import TreebankWordTokenizer\ntokenizer = nltk.TreebankWordTokenizer()\npos_list=set(opinion_lexicon.positive())\nneg_list=set(opinion_lexicon.negative())","4a216fa8":"sentence = 'I am a good girl.'\n\n# tokenization\nwords = [word.lower() for word in tokenizer.tokenize(sentence)]\n\nfor word in words:\n    if word in pos_list:\n        print('positive')\n    elif word in neg_list:\n        print('negative')","57410155":"!pip install vaderSentiment","d7473e23":"from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n# Create a SentimentIntensityAnalyzer object.\nsid_obj = SentimentIntensityAnalyzer()\n\nsentence = \"I am a bad girl.\"\n\n# polarity_scores method of SentimentIntensityAnalyzer\n# object gives a sentiment dictionary.\n# which contains pos, neg, neu, and compound scores.\nsentiment_dict = sid_obj.polarity_scores(sentence)\n\n\n# decide sentiment as positive, negative and neutral\nif sentiment_dict['compound'] >= 0.05 :\n    print(\"Positive\")\nelif sentiment_dict['compound'] <= - 0.05 :\n    print(\"Negative\")\nelse:\n    print(\"Neutral\")","da50a66b":"!pip install gTTS","31c0cc8b":"from gtts import gTTS\nimport IPython.display as ipd\npath = \"tp.mp3\"\n\nte = '\u092d\u093e\u0930\u0924-\u0938\u093e\u0909\u0925 \u0905\u092b\u094d\u0930\u0940\u0915\u093e \u0915\u0947 \u092c\u0940\u091a \u0924\u0940\u0938\u0930\u093e \u0935\u0928\u0921\u0947 \u0916\u0947\u0932\u093e \u091c\u093e\u090f\u0917\u093e\u0964 \u092d\u093e\u0930\u0924 \u0938\u0940\u0930\u0940\u091c \u092e\u0947\u0902 2-0 \u0938\u0947 \u092a\u0940\u091b\u0947 \u0939\u0948\u0964'\nte2 = '\uc548\ub155\ud558\uc138\uc694.'\nte3 = 'The truth is my light pronunciation. The truth is my light'\n\ntts = gTTS(te3)\ntts.save(path)\nipd.Audio(path)","0b5303f1":"import speech_recognition as sr\nsample_rate = 48000\nchunk_size = 2048\nr = sr.Recognizer()\ntranslator = Translator()\ndevice_id = 5 #change with your device\ndef stt():\n    with sr.Microphone(device_index = device_id, sample_rate = sample_rate, \n                            chunk_size = chunk_size) as source:\n        r.adjust_for_ambient_noise(source) \n        print(\"Say Something\")\n        audio = r.listen(source) \n        try: \n            text = r.recognize_google(audio) \n            print(\"you said: \" + text)\n            return text\n        except sr.UnknownValueError: \n            print(\"Google Speech Recognition could not understand audio\") \n        except sr.RequestError as e: \n            print(\"Could not request results from Google Speech Recognition service; {0}\".format(e))","35451c0d":"from googleapiclient.discovery import build\nservice = build(\"customsearch\", \"v1\",developerKey='AIzaSyAkVwSL9_mktZKSzXHwXRQRn1P3sqlaXs0')","4223ce1f":"def get_images(keywords,num=10):\n    \"\"\"serch images on internet\"\"\"\n    res = service.cse().list(\n        q=keywords,\n        cx='010391312327351182751:xfplqghuzlm',\n        searchType='image',\n        num=num,\n    ).execute()\n    urls=list(map(lambda x:x['link'], res['items']))\n    titles=list(map(lambda x:x['title'], res['items']))\n    data=[{'title':title,\n            'url':url}\n          for title,url in zip(titles,urls)]\n    return data","bc0095bd":"maxResults = 1\nQuestion = \"cricket\"\nimg = get_images(Question,maxResults)\nimg","b982fad8":"# 1.3 text to image","f85fe991":"# speech recognition","140e759a":"**using VADAR**\n","01bb0447":"## 1.2 text to speech\n","5c149535":"## 1.1 Sentiment Analysis\n\n**used - lexicon method and nltk library**"}}