{"cell_type":{"89686014":"code","0f0bf205":"code","7e6afb6d":"code","d8eaf2aa":"code","3f0b9dc1":"code","9e1d5b3e":"code","db30e80e":"code","78ed419a":"markdown","37c063bb":"markdown","9bf854bd":"markdown","7d7d0c56":"markdown","865d3c21":"markdown"},"source":{"89686014":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\n\nfilename = '\/kaggle\/input\/israeli-elections-2015-2013\/votes per booth 2020.csv'\nencoding = 'iso_8859_8'\n\ndf_raw = pd.read_csv(filename, encoding=encoding)\ndf_raw.dropna(axis=1, how='all', inplace=True)\ndf_raw.head()","0f0bf205":"df = df_raw.copy()\n\noversight_columns = ['\u05e1\u05de\u05dc \u05d5\u05e2\u05d3\u05d4', '\u05d1\u05e8\u05d6\u05dc', '\u05e9\u05d5\u05e4\u05d8', '\u05e8\u05d9\u05db\u05d5\u05d6']\ndf.drop(oversight_columns, axis=1, inplace=True)\n\nindex_columns = ['\u05e9\u05dd \u05d9\u05e9\u05d5\u05d1', '\u05e1\u05de\u05dc \u05d9\u05e9\u05d5\u05d1', '\u05e7\u05dc\u05e4\u05d9']\nmetadata_columns = ['\u05d1\u05d6\u05d1', '\u05de\u05e6\u05d1\u05d9\u05e2\u05d9\u05dd', '\u05e4\u05e1\u05d5\u05dc\u05d9\u05dd', '\u05db\u05e9\u05e8\u05d9\u05dd']\n\nparty_columns = df.columns.difference(pd.Index(index_columns+metadata_columns))\npd.testing.assert_series_equal(df['\u05db\u05e9\u05e8\u05d9\u05dd'], df[party_columns].sum(axis=1).rename('\u05db\u05e9\u05e8\u05d9\u05dd'))\n#df.set_index(index_columns, inplace=True) - will set index after feature engineering\ndf.head()","7e6afb6d":"df['turnout'] = (df['\u05de\u05e6\u05d1\u05d9\u05e2\u05d9\u05dd'] \/ df['\u05d1\u05d6\u05d1']).replace(np.inf, -1)\ndf['percent_invalid'] = df['\u05e4\u05e1\u05d5\u05dc\u05d9\u05dd'] \/ df['\u05de\u05e6\u05d1\u05d9\u05e2\u05d9\u05dd']\n\ndf[\"total_voting_booths\"] = df.groupby([\"\u05e1\u05de\u05dc \u05d9\u05e9\u05d5\u05d1\"])[\"\u05e7\u05dc\u05e4\u05d9\"].transform(\"size\")\ndf[\"booth_per_capita\"] = df[\"total_voting_booths\"].div(df[\"\u05d1\u05d6\u05d1\"]).replace(np.inf, -1)\n\ndf[\"max_party_vote\"] = df[party_columns].max(axis=1)\ndf[\"max_party_ratio\"] =df['max_party_vote'].div(df['\u05db\u05e9\u05e8\u05d9\u05dd'], axis=0)\n\ndf[party_columns] = df[party_columns].div(df[\"\u05db\u05e9\u05e8\u05d9\u05dd\"], axis=0)\n\ndf.set_index(index_columns, inplace=True)\n\nassert(not(df.replace([np.inf, -np.inf], np.nan).isna().any().any()))\ndf.head()","d8eaf2aa":"party_votes = df[party_columns].mul(df['\u05db\u05e9\u05e8\u05d9\u05dd'], axis=0).sum() \/ df['\u05db\u05e9\u05e8\u05d9\u05dd'].sum()\nparty_votes.sort_values(ascending=False)\nthreshold = 0.001\nmajor_parties = party_votes[party_votes >= threshold].index\nminor_parties = party_votes[party_votes < threshold].index\nprint('the major parties (those with >{} of votes) are'.format(threshold))\nprint(major_parties.to_list())\ndf.drop(minor_parties, inplace=True, axis=1)","3f0b9dc1":"model = IsolationForest(n_estimators=140,max_samples=600).fit(df)\npredictions = pd.Series(index=df.index, data=model.decision_function(df), name='anomaly score').sort_values(ascending=False)\npredictions.to_frame()","9e1d5b3e":"predictions.tail(10)","db30e80e":"# Saving the results for further use\n\ndf_raw.set_index(index_columns).join(predictions).to_csv('anomalous_booths_2020_2.csv', encoding=encoding)","78ed419a":"## Feature engineering\n\n(Pretty self-explanatory)","37c063bb":"## Input data and minor pre-processing\nThe data is uploaded as given from the central elections committee. \n1. Column names are not translated from Hebrew, because their alphabetical order matters (for example, a common human error is to type a number in the wrong column).\n2. Columns that represent additional oversight measures (i.e. \u05d1\u05e8\u05d6\u05dc, \u05e1\u05de\u05dc \u05d5\u05e2\u05d3\u05d4, \u05e8\u05d9\u05db\u05d5\u05d6, \u05e9\u05d5\u05e4\u05d8) are dropped, as I don't really know how to account for them. \n3. Index columns (i.e. \u05e9\u05dd \u05d9\u05e9\u05d5\u05d1, \u05e1\u05de\u05dc \u05d9\u05e9\u05d5\u05d1, \u05e7\u05dc\u05e4\u05d9) are exactly just indices, and can be dropped (or used as index).\n4. The following columns are: \u05d1\u05d6\u05d1 (eligible voters), \u05de\u05e6\u05d1\u05d9\u05e2\u05d9\u05dd (votes cast), \u05e4\u05e1\u05d5\u05dc\u05d9\u05dd (invalid votes) and \u05db\u05e9\u05e8\u05d9\u05dd (valid votes). These are metadata columns that can be manipulated (i.e. dividing \u05de\u05e6\u05d1\u05d9\u05e2\u05d9\u05dd by \u05d1\u05d6\u05d1 yields the voter turnout)\n5. The columns after \u05db\u05e9\u05e8\u05d9\u05dd are the number of votes per party.","9bf854bd":"## Model\n\nAfter engineering our features, and making sure there are no nan's \/ inf's in our dataset, we can fit out Isolation Forest model for anomaly detection (Low score = more anomalous).\n\nTo learn more on [Isolation Forest](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.IsolationForest.html) for anomaly detection, visit [Dan Ofer's Notebook](https:\/\/www.kaggle.com\/danofer\/anomaly-detection-for-feature-engineering-v2) on the [Credit Card Fraud Detection dataset](https:\/\/www.kaggle.com\/mlg-ulb\/creditcardfraud)\n\n","7d7d0c56":"# Introduction\n\n## Introduction\nIn this notebook, we will look for anomalous results in polls in the 2020 (aka 2019c) elections for the Israeli Parliament (Knesset).\n \nSuch anomalies can be the result of human error (most likely), fraud, or reflect real drastic changes (least likely) \n\nthe data is as downloaded from the Central Elections Committee. It was downloaded at 05\/03\/2020 08:10, and is up to date for 04\/03\/2020 21:38 according to the committee's website. It is not final, both due to the counting process itself (71% votes counted) and both due to the time it takes to check the results for correctness (one might hope\/expect that some of the anomalies found here will be corrected by the due date, 10\/03\/2020).\n\n## Method\nWe'll look for anomalies using the methods in [Dan Ofer's notebook](https:\/\/www.kaggle.com\/danofer\/israel-election-anomalies-starter) from the anomaly detection competition from April 2019 (aka 2019a) elections.","865d3c21":"# Conclusions\nThis notebook allows us to point out suspicious booths. The suspicious ones will have to be checked manually: For example, the second most anomalous booth is in the [Arab al-Na'im (\u05e2\u05e8\u05d1 \u05d0\u05dc \u05e0\u05e2\u05d9\u05dd)](https:\/\/en.wikipedia.org\/wiki\/Arab_al-Na%27im) village in the Galillee, an unrecognized Bedouin village, with a surprising support for the right-wing [Likud](https:\/\/en.wikipedia.org\/wiki\/Likud) party currently in charge. Again, this might reflect a genuine shift in support, or something else (see [this article](https:\/\/www.haaretz.co.il\/news\/elections\/.premium-1.2595935) in the Haaretz newspaper's website). "}}