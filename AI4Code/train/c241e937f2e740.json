{"cell_type":{"b8d72e12":"code","8cc6dbc1":"code","9a2fbac9":"code","2b7ba40d":"code","e30c8f63":"code","c95b7b7e":"code","124f1254":"code","a61bb5e1":"code","f0f1f52f":"code","3ce8c6c8":"code","bd98dba0":"code","bf8e491a":"code","8f118677":"code","eafed29e":"code","56cefb50":"markdown","1f7abaec":"markdown"},"source":{"b8d72e12":"# common imports\nimport os\nimport numpy as np\nimport matplotlib.pylab as plt\nimport pandas as pd\nfrom glob import glob\nfrom pathlib import Path\nfrom functools import partial\n\nfrom sklearn.model_selection import train_test_split\n\nos.environ[\"TF_CPP_MIN_LOG_LEVEL\"] = \"2\"\n# prevent VRAM occupied\nos.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'\n\n# TensorFlow \u22652.0 is required\nimport tensorflow as tf\nfrom tensorflow import keras\nassert tf.__version__ >= \"2.0\"\n\nfrom keras.applications.resnet_v2 import preprocess_input\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Import functions for trianing the model\n#%load_ext autoreload\n#%autoreload 2\n#import src.models.train_model as train_model\n\n# load tensorboard extension\n%reload_ext tensorboard","8cc6dbc1":"# Constants\nSEED =42\nIMAGE_SIZE = (224,224)\nIMAGE_SHAPE = (224,224,3)\nBATCH_SIZE = 20\nSHUFFLE = True\nTARGET_WIDTH= 224\nTARGET_HEGIHT =224\nNUM_CLASSES = 3 # number of ClassesNUM\nNUM_EPOCHS = 20\nlearning_rate = 0.001    #initial training learning rate is moderately fast\nft_learning_rate = 1e-5 #fine tuning learning rate is slower\nlog_folder = 'logs' # logs folder","9a2fbac9":"covid_image_train_data_gen = ImageDataGenerator(\n    preprocessing_function= preprocess_input,\n    validation_split=0.2,\n    featurewise_center=False,  # set input mean to 0 over the dataset\n    samplewise_center=True, #Boolean. Set each sample mean to 0.\n    samplewise_std_normalization = False, #Boolean. Divide each input by its std.\n    featurewise_std_normalization=False, # divide inputs by std of the dataset\n    horizontal_flip = True, #Boolean. Randomly flip inputs horizontally.\n    vertical_flip = False,  #Boolean. Randomly flip inputs vertically.\n    zca_whitening=False,  # apply ZCA whitening\n    height_shift_range= 0.05, #float: fraction of total height, if < 1, or pixels if >= 1.\n    width_shift_range=0.1,  #float: fraction of total height, if < 1, or pixels if >= 1.\n    rotation_range=20, #Int. Degree range for random rotations. 0 -180 degrees\n    shear_range = 0.1, #Float. Shear Intensity (Shear angle in counter-clockwise direction in degrees)\n    fill_mode = 'nearest', #One of {\"constant\", \"nearest\", \"reflect\" or \"wrap\"}. Default is 'nearest'. \n    zoom_range=0.15) #Float or [lower, upper]. Range for random zoom. If a float, [lower, upper] = [1-zoom_range, 1+zoom_range]\n\ncovid_train_generator = covid_image_train_data_gen.flow_from_directory(\n  '..\/input\/covid19-customized-xray-dataset\/COVID19 CUSTOMIZED X-RAY DATASET',\n  subset=\"training\",\n  class_mode='categorical',\n  classes=['COVID19', 'NORMAL', 'PNEUMONIA'],\n  seed=SEED,\n  target_size=IMAGE_SIZE,\n  batch_size=BATCH_SIZE)\n\ncovid_valid_generator = covid_image_train_data_gen.flow_from_directory(\n  '..\/input\/covid19-customized-xray-dataset\/COVID19 CUSTOMIZED X-RAY DATASET',\n  subset=\"validation\",\n  classes=['COVID19', 'NORMAL', 'PNEUMONIA'],\n  class_mode='categorical',\n  seed=SEED,\n  target_size=IMAGE_SIZE,\n  batch_size=BATCH_SIZE)","2b7ba40d":"#callback setup\nfrom tensorflow.keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, ReduceLROnPlateau\n\n#checkpoint_path = 'models\/xray_class_weights.best.hdf5'\n#checkpoint = ModelCheckpoint(checkpoint_path, monitor='val_loss', verbose=1,\n#                             save_best_only=True, mode='min', save_weights_only = True)\n\nearly = EarlyStopping(monitor=\"val_loss\", min_delta = 1e-4, patience = 10, mode = 'min',\n                    restore_best_weights = True, verbose = 1)\n\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience = 3, min_delta=1e-4, min_lr=1e-6)#, verbose = 1,\n                            #    min_delta = 1e-4, min_lr = 1e-6, mode = 'min', cooldown=1)\n\ncallbacks = [early, reduce_lr]","e30c8f63":"base_model2 = tf.keras.applications.ResNet50V2(input_shape=IMAGE_SHAPE,\n                                               include_top=False,\n                                               weights='imagenet')\nfor layer in base_model2.layers:\n            layer.trainable = False","c95b7b7e":"#base_model.summary() #showed all layers frozen - check\n#len(base_model.layers) #190 layers\nhead_model = base_model2.output\nhead_model = keras.layers.Flatten(name=\"flatten\")(head_model)\n#head_model = keras.layers.Dense(64, activation='relu')(head_model)   #Added Starts Here\n#head_model = keras.layers.BatchNormalization()(head_model)\n#head_model = keras.layers.Dropout(rate=0.3)(head_model)\n#head_model = keras.layers.Dense(64, activation='relu')(head_model)\n#head_model = keras.layers.BatchNormalization()(head_model)\n#head_model = keras.layers.Dropout(rate=0.3)(head_model)\n#head_model = keras.layers.Dense(32, activation='relu')(head_model)\n#head_model = keras.layers.BatchNormalization()(head_model)\n#head_model = keras.layers.Dropout(rate=0.3)(head_model)\n#head_model = keras.layers.Dense(32, activation='relu')(head_model)\n#head_model = keras.layers.BatchNormalization()(head_model)\n#head_model = keras.layers.Dropout(rate=0.3)(head_model)                    #Added Ends Here\nhead_model = keras.layers.Dense(NUM_CLASSES,activation='softmax')(head_model)\nmodel2 = keras.Model(inputs=base_model2.input, outputs=head_model)","124f1254":"#len(model.layers) #204\nmodel2.summary()","a61bb5e1":"optimizer=tf.keras.optimizers.Adam(\n            learning_rate=learning_rate,\n            beta_1=0.9,\n            beta_2=0.999,\n            epsilon=1e-07,\n            amsgrad=True,\n            name=\"Adam\"\n            )\nloss = tf.keras.losses.CategoricalCrossentropy()\nmetrics = ['accuracy']\nmodel2.compile(optimizer=optimizer, loss = loss, metrics = metrics)","f0f1f52f":"history = model2.fit(covid_train_generator,\n                    epochs=NUM_EPOCHS,\n                    validation_data=covid_train_generator,\n                    steps_per_epoch = len(covid_train_generator)\/\/BATCH_SIZE,#steps_per_epoch = 100,\n                    validation_steps=len(covid_valid_generator)\/\/BATCH_SIZE, #validation_steps= 25,\n                    callbacks=callbacks)","3ce8c6c8":"for layer in base_model2.layers[186:]:\n            layer.trainable = True","bd98dba0":"optimizer=tf.keras.optimizers.Adam(\n            learning_rate=ft_learning_rate,\n            beta_1=0.9,\n            beta_2=0.999,\n            epsilon=1e-07,\n            amsgrad=True,\n            name=\"Adam\"\n            )\nmodel2.compile(optimizer=optimizer, loss = loss, metrics = metrics)\n\nhistory_ft =  model2.fit(covid_train_generator,\n                    epochs=10,\n                    validation_data=covid_train_generator,\n                    steps_per_epoch = len(covid_train_generator)\/\/BATCH_SIZE,#steps_per_epoch = 100,\n                    validation_steps=len(covid_valid_generator)\/\/BATCH_SIZE, #validation_steps= 25,\n                    callbacks=callbacks)","bf8e491a":"def plot_accuracy_and_loss(history):\n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n\n    plt.figure(figsize=(8, 8))\n    plt.subplot(2, 1, 1)\n    plt.plot(acc, label='Training Accuracy')\n    plt.plot(val_acc, label='Validation Accuracy')\n    plt.legend(loc='lower right')\n    plt.ylabel('Accuracy')\n    plt.ylim([min(plt.ylim()),1])\n    plt.title('Training and Validation Accuracy')\n\n    plt.subplot(2, 1, 2)\n    plt.plot(loss, label='Training Loss')\n    plt.plot(val_loss, label='Validation Loss')\n    plt.legend(loc='upper right')\n    plt.ylabel('Cross Entropy')\n    plt.ylim([0,max(plt.ylim())])\n    plt.title('Training and Validation Loss')\n    plt.xlabel('epoch')\n    plt.show()","8f118677":"plot_accuracy_and_loss(history)","eafed29e":"plot_accuracy_and_loss(history_ft)","56cefb50":"**Build Model Using Transfer Learning**","1f7abaec":"**Experimental NB to train a DNN to classify Covid Images**"}}