{"cell_type":{"a096709a":"code","7cddf0ae":"code","23566fd5":"code","c92ead94":"code","d1508fe2":"code","db29a8c9":"code","bd81567b":"code","2a1aee1e":"code","f7116315":"code","1aef45c1":"code","c9e02ea2":"code","58956a9b":"code","8d72e631":"code","e8f393de":"code","d37d35e2":"code","67195608":"code","c6b19671":"code","e6cdaa09":"code","4bb42d63":"code","4d231728":"code","f2c02046":"code","4ebe07a1":"code","0983343d":"code","036fa982":"code","9d62696c":"code","443e292f":"code","ad525675":"code","ee3a29c8":"code","f6ea6b89":"code","960d881c":"code","d81d58db":"code","0fd94bb3":"code","f0e24f50":"code","3a1782d0":"code","ca053da8":"code","c5f18439":"code","fc5f3b63":"code","f9d5375b":"code","a15ec2b6":"code","a305d7c1":"code","3aa37385":"code","5eab19ab":"code","02971bf0":"code","7a2a9b2a":"code","f48c514f":"code","eb2abbb4":"code","ba629953":"code","590548d4":"code","b9cc973a":"code","1fcfca63":"code","dc253676":"code","1a2a088a":"code","10f8f6b2":"code","550d43b7":"code","4eadd8e5":"code","761f4d66":"code","771781af":"code","19abb2f7":"code","1d14b701":"code","ac097d18":"code","93d76513":"code","d14a55b8":"code","10bcc7fd":"code","5ca5eb63":"code","5ea52a62":"code","8e396cb8":"code","e1b2865d":"code","c0fb681e":"code","d08f9281":"code","ca23d87f":"code","2bdf0c1d":"code","17b433b6":"code","4bdf3eeb":"code","dae28132":"code","0ad1e417":"code","dda52930":"code","fd0cabfe":"code","addb7fdd":"code","accdc901":"code","6d5c81cb":"code","89329994":"code","e21361e4":"code","316a095d":"markdown","b29ae1ea":"markdown","e2778780":"markdown","e1235b45":"markdown","63968862":"markdown","31e612e7":"markdown","be4fad08":"markdown","ebd0e72c":"markdown","9ace47a5":"markdown","247ee2f9":"markdown","7bec3ece":"markdown","c36bdb08":"markdown","54c6527f":"markdown","4a7b34b2":"markdown","5e1835f5":"markdown","c3633ae5":"markdown","1f3fcc1e":"markdown","9a25b5ab":"markdown","ecf39818":"markdown","25deb3ea":"markdown","2e3b4d4c":"markdown","5502ec96":"markdown","578dbc7d":"markdown","2c7f124d":"markdown","46491f9a":"markdown","28cbbb77":"markdown","b8b982c9":"markdown","c5b96888":"markdown","bd82c6a0":"markdown","fa61822b":"markdown","d9ee7ad0":"markdown","324dcf26":"markdown","addc12b3":"markdown","ed8883ee":"markdown","edf858bf":"markdown","a8357714":"markdown","a73c3100":"markdown","d652d928":"markdown","42cc3e58":"markdown","e709e470":"markdown","be954aa6":"markdown","f54e868f":"markdown","5e220111":"markdown","daee9b7d":"markdown","9bfb1195":"markdown","40319df8":"markdown","8bf20287":"markdown","2ad996d7":"markdown","ff772159":"markdown","f8e7624a":"markdown","f2a25697":"markdown","a781556d":"markdown","a1d79083":"markdown"},"source":{"a096709a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n%matplotlib inline","7cddf0ae":"train=pd.read_csv(\"..\/input\/bigmart-sales-data\/Train.csv\")\ntest=pd.read_csv(\"..\/input\/bigmart-sales-data\/Test.csv\")","23566fd5":"def show_head(dataframe):\n    return dataframe.head()","c92ead94":"def shape(dataframe):\n    print(f\"The dataset have {dataframe.shape[0]} rows and {dataframe.shape[1]} columns.\")","d1508fe2":"shape(train)\nshow_head(train)","db29a8c9":"shape(test)\nshow_head(test)","bd81567b":"def cat(dataframe):\n    categorical_features=[feature for feature in dataframe.columns if dataframe[feature].dtypes == 'O']\n    print(\"No. of Categorical feature : \",len(categorical_features))\n    print(categorical_features)","2a1aee1e":"cat(train)","f7116315":"cat(test)","1aef45c1":"def num(dataframe):\n    numerical_features=[feature for feature in dataframe.columns if dataframe[feature].dtypes != 'O']\n    print(\"No. of Numerical feature : \",len(numerical_features),\"\\n\")\n    discrete_features=[feature for feature in numerical_features if dataframe[feature].nunique() <25 ]\n    continous_features=[feature for feature in numerical_features if feature not in discrete_features]\n    print(\"No. of Discrete feature : \",len(discrete_features))\n    print(discrete_features,'\\n')\n    print(\"No. of Continous feature : \",len(continous_features))\n    print(continous_features)","c9e02ea2":"num(train)","58956a9b":"num(test)","8d72e631":"def describe_num(dataframe):\n    return dataframe.describe()\ndef describe_cat(dataframe):\n    return dataframe.describe(include='O')","e8f393de":"describe_num(train)","d37d35e2":"describe_cat(train)","67195608":"describe_num(test)","c6b19671":"describe_cat(test)","e6cdaa09":"#Dropping the identifiers\ntrain.drop(['Item_Identifier', 'Outlet_Identifier'], axis=1, inplace=True)\ntest.drop(['Item_Identifier', 'Outlet_Identifier'], axis=1, inplace=True)","4bb42d63":"def percent_null(dataframe):\n    return dataframe.isnull().sum()\/dataframe.shape[0]*100\ndef null_map(dataframe):\n    plt.figure(figsize=(12,12))\n    sns.heatmap(dataframe.isnull(),cmap='magma',yticklabels=False,cbar=False)","4d231728":"percent_null(train)","f2c02046":"null_map(train)","4ebe07a1":"percent_null(test)","0983343d":"null_map(test)","036fa982":"import plotly.express as px","9d62696c":"def distribution_plot(dataframe):\n    print(\"Mean = \",dataframe[\"Item_Weight\"].mean(),\"; Median = \",dataframe[\"Item_Weight\"].median(),\"; Mode = \",dataframe[\"Item_Weight\"].mode()[0])\n    IQR=np.nanquantile(dataframe[\"Item_Weight\"],.75)-np.nanquantile(dataframe[\"Item_Weight\"],.25)\n    right_whisker=1.5*IQR+np.nanquantile(dataframe[\"Item_Weight\"],.75)\n    left_whisker=np.nanquantile(dataframe[\"Item_Weight\"],.25)-1.5*IQR\n    outlier_count=(dataframe[\"Item_Weight\"]>right_whisker).sum() + (dataframe[\"Item_Weight\"]<left_whisker).sum()\n    print(f\"Number of Outlier in the column is {outlier_count}\")\n    fig = px.histogram(dataframe,\n                       x='Item_Weight',\n                       marginal='box',\n                       title='Distribution of Weight')\n    fig.update_layout(bargap=0.1)\n    fig.show()","443e292f":"distribution_plot(train)","ad525675":"distribution_plot(test)","ee3a29c8":"train['Item_Weight']= train['Item_Weight'].fillna(train['Item_Weight'].mean())\ntest['Item_Weight']= test['Item_Weight'].fillna(test['Item_Weight'].mean())","f6ea6b89":"def barplot_null(dataframe):\n    dataframe[\"Outlet_Size_Null\"]=np.where(dataframe[\"Outlet_Size\"].isnull(),\"Null\",dataframe[\"Outlet_Size\"])\n    numerical_features=[feature for feature in dataframe.columns if dataframe[feature].dtypes != 'O']\n    discrete_features=[feature for feature in numerical_features if dataframe[feature].nunique() <25 ]\n    continous_features=[feature for feature in numerical_features if feature not in discrete_features]\n    for feature in continous_features[1:]:\n        plt.figure(figsize=(12,6))\n        sns.barplot(data=train,\n                    x=\"Outlet_Size_Null\",\n                    y=feature,\n                    palette=\"rainbow\",\n                    order= dataframe.groupby([\"Outlet_Size_Null\"])[feature].mean().sort_values().index)\n        plt.show()","960d881c":"barplot_null(train)\ntrain.drop('Outlet_Size_Null',axis=1,inplace=True)","d81d58db":"train[\"Outlet_Size\"].value_counts()","0fd94bb3":"test[\"Outlet_Size\"].value_counts()","f0e24f50":"train['Outlet_Size']= train['Outlet_Size'].fillna('Small')\ntest['Outlet_Size']= test['Outlet_Size'].fillna(\"Small\")","3a1782d0":"train.isnull().sum()","ca053da8":"test.isnull().sum()","c5f18439":"train[\"Item_Fat_Content\"].value_counts()","fc5f3b63":"test[\"Item_Fat_Content\"].value_counts()","f9d5375b":"train[\"Item_Fat_Content\"]=np.where((train[\"Item_Fat_Content\"] == 'Low Fat')|(train[\"Item_Fat_Content\"] == 'LF')|(train[\"Item_Fat_Content\"] == 'low fat'),\"Low Fat\",\"Regular\")\ntrain['Outlet_Age']=(2021-train['Outlet_Establishment_Year']).astype('str')","a15ec2b6":"test[\"Item_Fat_Content\"]=np.where((test[\"Item_Fat_Content\"] == 'Low Fat')|(test[\"Item_Fat_Content\"] == 'LF')|(test[\"Item_Fat_Content\"] == 'low fat'),\"Low Fat\",\"Regular\")\ntest['Outlet_Age']=(2021-test['Outlet_Establishment_Year']).astype('str')","a305d7c1":"train.drop(\"Outlet_Establishment_Year\",axis=1,inplace=True)\ntest.drop(\"Outlet_Establishment_Year\",axis=1,inplace=True)","3aa37385":"plt.figure(figsize=(8,5))\nsns.countplot(y=\"Item_Fat_Content\",data=train,palette='Set1',\n              order=train.groupby(\"Item_Fat_Content\")[\"Item_Outlet_Sales\"].count().sort_values().index)\nplt.tight_layout() \nplt.show()","5eab19ab":"plt.figure(figsize=(8,5))\nsns.countplot(y=\"Item_Type\",data=train,palette='twilight',\n                           order=train.groupby(\"Item_Type\")[\"Item_Outlet_Sales\"].count().sort_values().index)\nplt.tight_layout()\nplt.show()","02971bf0":"plt.figure(figsize=(8,5))\nsns.countplot(y=\"Outlet_Size\",data=train,palette='Set2',\n                order=train.groupby(\"Outlet_Size\")[\"Item_Outlet_Sales\"].count().sort_values().index)\nplt.tight_layout()\nplt.show()","7a2a9b2a":"plt.figure(figsize=(8,5))\nsns.countplot(y=\"Outlet_Location_Type\",data=train,palette='ocean',\n              order=train.groupby(\"Outlet_Location_Type\")[\"Item_Outlet_Sales\"].count().sort_values().index)\n\nplt.tight_layout()\nplt.show()","f48c514f":"plt.figure(figsize=(8,5))\nsns.countplot(y=\"Outlet_Type\",data=train,palette='Set1',\n                order=train.groupby(\"Outlet_Type\")[\"Item_Outlet_Sales\"].count().sort_values().index)\n\nplt.tight_layout()\nplt.show()","eb2abbb4":"plt.figure(figsize=(8,5))\nsns.countplot(y=\"Outlet_Age\",data=train,palette='spring',\n               order=train.groupby(\"Outlet_Age\")[\"Item_Outlet_Sales\"].count().sort_values().index)\n\nplt.tight_layout()\nplt.show()","ba629953":"plt.figure(figsize=(8,5))\nsns.barplot(data=train,y=\"Item_Fat_Content\",x=\"Item_Outlet_Sales\",\n            palette=\"Set1\",\n            order=train.groupby(\"Item_Fat_Content\")[\"Item_Outlet_Sales\"].mean().sort_values().index)\nplt.tight_layout()\nplt.show()","590548d4":"plt.figure(figsize=(8,5))\nsns.barplot(data=train,y=\"Item_Type\",x=\"Item_Outlet_Sales\",\n           palette='twilight',\n            order=train.groupby(\"Item_Type\")[\"Item_Outlet_Sales\"].mean().sort_values().index)\nplt.tight_layout()\nplt.show()","b9cc973a":"plt.figure(figsize=(8,5))\nsns.barplot(data=train,y=\"Outlet_Size\",x=\"Item_Outlet_Sales\",\n            palette='Set2',\n                order=train.groupby(\"Outlet_Size\")[\"Item_Outlet_Sales\"].mean().sort_values().index)\nplt.tight_layout()\nplt.show()","1fcfca63":"plt.figure(figsize=(8,5))\nsns.barplot(data=train,y=\"Outlet_Location_Type\",x=\"Item_Outlet_Sales\",\n            palette='ocean',\n              order=train.groupby(\"Outlet_Location_Type\")[\"Item_Outlet_Sales\"].mean().sort_values().index)\n\nplt.tight_layout()\nplt.show()","dc253676":"plt.figure(figsize=(8,5))\nsns.barplot(data=train,y=\"Outlet_Type\",x=\"Item_Outlet_Sales\",\n            palette='Set1',\n                order=train.groupby(\"Outlet_Type\")[\"Item_Outlet_Sales\"].mean().sort_values().index)\n\nplt.tight_layout()\nplt.show()","1a2a088a":"plt.figure(figsize=(8,5))\nsns.barplot(data=train,y=\"Outlet_Age\",x=\"Item_Outlet_Sales\",\n            palette='spring',\n               order=train.groupby(\"Outlet_Age\")[\"Item_Outlet_Sales\"].mean().sort_values().index)\n\nplt.tight_layout()\nplt.show()","10f8f6b2":"plt.figure(figsize=(8,6))\nsns.scatterplot(x=\"Item_MRP\",y='Item_Outlet_Sales',data=train)\nplt.show()","550d43b7":"plt.figure(figsize=(8,6))\nsns.scatterplot(x=\"Item_Visibility\",y='Item_Outlet_Sales',data=train)\nplt.show()","4eadd8e5":"numerical_features=[feature for feature in train.columns if train[feature].dtypes != 'O']\ndiscrete_features=[feature for feature in numerical_features if train[feature].nunique() <25 ]\ncontinous_features=[feature for feature in numerical_features if feature not in discrete_features]\nfor feature in continous_features:\n    plt.figure(figsize=(12,6))\n    sns.histplot(data=train,x=feature,kde=True,color='red')\n    plt.show()\n    print(\"Mean = \",train[feature].mean(),\"; Median = \",train[feature].median(),\"; Mode = \",train[feature].mode()[0])","761f4d66":"numerical_features=[feature for feature in train.columns if train[feature].dtypes != 'O']\ndiscrete_features=[feature for feature in numerical_features if train[feature].nunique() <25 ]\ncontinous_features=[feature for feature in numerical_features if feature not in discrete_features]\nfor feature in continous_features:\n    IQR=np.nanquantile(train[feature],.75)-np.nanquantile(train[feature],.25)\n    right_whisker=1.5*IQR+np.nanquantile(train[feature],.75)\n    left_whisker=np.nanquantile(train[feature],.25)-1.5*IQR\n    outlier_count=(train[feature]>right_whisker).sum() + (train[feature]<left_whisker).sum()\n    print(f\"Number of Outlier in the column {feature} is {outlier_count}\")\n    plt.figure(figsize=(15,6))\n    sns.boxplot(data=train,x=feature,palette=\"viridis\")\n    plt.show()","771781af":"numerical_features=[feature for feature in test.columns if test[feature].dtypes != 'O']\ndiscrete_features=[feature for feature in numerical_features if test[feature].nunique() <25 ]\ncontinous_features=[feature for feature in numerical_features if feature not in discrete_features]\nfor feature in continous_features:\n    IQR=np.nanquantile(test[feature],.75)-np.nanquantile(test[feature],.25)\n    right_whisker=1.5*IQR+np.nanquantile(test[feature],.75)\n    left_whisker=np.nanquantile(test[feature],.25)-1.5*IQR\n    outlier_count=(test[feature]>right_whisker).sum() + (test[feature]<left_whisker).sum()\n    print(f\"Number of Outlier in the column {feature} is {outlier_count}\")\n    plt.figure(figsize=(15,6))\n    sns.boxplot(data=train,x=feature,palette=\"viridis\")\n    plt.show()","19abb2f7":"z1 = np.abs(stats.zscore(train[\"Item_Outlet_Sales\"]))\nfor i in (np.where(z1>3)):\n    train.drop(i,inplace=True)\ntrain.set_index( np.arange(8433),inplace=True )\nz2 = np.abs(stats.zscore(train[\"Item_Visibility\"]))\nfor i in (np.where(z2>3)):\n    train.drop(i,inplace=True)\ntrain.set_index( np.arange(8338),inplace=True )","1d14b701":"z3 = np.abs(stats.zscore(test[\"Item_Visibility\"]))\nfor x in (np.where(z3>3)):\n    test.drop(x,inplace=True)\ntest.set_index( np.arange(5600),inplace=True )","ac097d18":"train2 = train.drop(columns='Item_Outlet_Sales')","93d76513":"train2.corrwith(train['Item_Outlet_Sales']).plot.bar(figsize=(8,5), title='Correlated with SalePrice')","d14a55b8":"plt.figure(figsize=(9, 9))\nax = sns.heatmap(data=train.corr(), cmap='coolwarm', annot=True, linewidths=2)","10bcc7fd":"y_train = train['Item_Outlet_Sales'].to_frame(name='Target')\nx_train = train.drop('Item_Outlet_Sales', axis=1)\nx_test = test.copy()","5ca5eb63":"dummy_train = pd.get_dummies(x_train, drop_first=True)\ndummy_train.head()","5ea52a62":"dummy_test = pd.get_dummies(x_test, drop_first=True)\ndummy_test.head()","8e396cb8":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\ndef minmax(train,test):\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    x_train_scaled = scaler.fit_transform(train)\n    X_train = pd.DataFrame(data=x_train_scaled, columns = list(train.columns))\n    x_test_scaled = scaler.fit_transform(dummy_test)\n    X_test = pd.DataFrame(data=x_train_scaled, columns = list(dummy_test.columns))\n    return X_train,X_test\ndef standard(train,test):\n    scaler = StandardScaler()\n    x_train_scaled = scaler.fit_transform(train)\n    X_train = pd.DataFrame(data=x_train_scaled, columns = list(train.columns))\n    x_test_scaled = scaler.fit_transform(dummy_test)\n    X_test = pd.DataFrame(data=x_train_scaled, columns = list(dummy_test.columns))\n    return X_train,X_test","e1b2865d":"from sklearn.model_selection import train_test_split as tts\nX_train_nor,X_test_nor=minmax(dummy_train,dummy_test)\nX_train_std,X_test_std=standard(dummy_train,dummy_test)\nx_tr, x_valid, y_tr, y_valid = tts(X_train_nor, y_train, train_size=0.7, random_state=1)\n#x_tr, x_valid, y_tr, y_valid = tts(X_train_std, y_train, train_size=0.7, random_state=1)","c0fb681e":"#import required packages\nfrom sklearn.neighbors import KNeighborsRegressor as KNR\nfrom sklearn.metrics import mean_squared_error \nfrom math import sqrt","d08f9281":"rmse_val_list = [] #to store rmse values for different k\n\nfor i in range(1,round(sqrt(x_tr.shape[0]))):\n    model = KNR(n_neighbors = i)\n\n    model.fit(x_tr, y_tr)  #fit the model\n    y_pred = model.predict(x_valid) #make prediction on test set\n    error = sqrt(mean_squared_error(y_valid, y_pred)) #calculate rmse\n    #print('RMSE value for k= ' , i , 'is:', error)\n    \n    rmse_val_list.append(error) #store rmse values\n    \nprint(\"The minimum error we get is \", min(rmse_val_list))\nprint(\"The corresponding K value is \", 1+rmse_val_list.index(min(rmse_val_list)))\n","ca23d87f":"import matplotlib.pyplot as plt\n%matplotlib inline","2bdf0c1d":"curve=pd.DataFrame(rmse_val_list)\ncurve.plot() # Elbow curve\n#curve = pd.DataFrame(rmse_val_df).set_index('K')\n#curve.plot()","17b433b6":"from sklearn import metrics\nsorted(metrics.SCORERS.keys())","4bdf3eeb":"knn = KNR()\n\nfrom sklearn.model_selection import cross_validate as cv\n\ncv_results = cv(knn, X_train_nor,y_train,\n                scoring = ('neg_mean_squared_error','neg_root_mean_squared_error'),\n                cv=5, return_train_score = True)","dae28132":"print(sorted(cv_results.keys()))\nprint(cv_results['train_neg_root_mean_squared_error'])\nprint(cv_results['test_neg_root_mean_squared_error'])","0ad1e417":"# One may run this if they want to do grid search to find the best model\n# It takes long time to run, so put \n'''\nfrom sklearn.model_selection import GridSearchCV\n\nnumber_of_neighbors = range(1,200)\n#number_of_neighbors = range(1,iter_size)\ncvals = 5\n\nparams = {'n_neighbors':number_of_neighbors}\n\nmodel = GridSearchCV(knn, params, cv=cvals)\nmodel.fit(X_train_nor,y_train)\n'''","dda52930":"#print(model.best_params_)","fd0cabfe":"#print(model)","addb7fdd":"model = KNR(n_neighbors=7)\nmodel.fit(X_train_nor,y_train)","accdc901":"Y_pred = model.predict(X_test_nor) #make prediction on test set","6d5c81cb":"Y_pred.mean()","89329994":"y_train.mean()","e21361e4":"#Only KNN Classification algorithm has been used\n#Other algorithms will be added in the subsequent updates","316a095d":"## Distribution Plot","b29ae1ea":"Observation: Supermarket Type 3 has more revenue generation power although we have maximum number ot outlet of type 1.","e2778780":"Observation: People prefer to buy from smal and medium sized outlet (Count of small outlet size is more because of null value substitution)","e1235b45":"## Impute the missing values","63968862":"### Plotting the Values","31e612e7":"### Doing a Grid Search","be4fad08":"# Stores Sales Prediction\n\nThe objective of this notebook is to follow a step-by-step workflow, explaining each step and rationale for every decision we take during solution development.\n\n## Workflow stages\n\nThe competition solution workflow goes through seven stages described in the Data Science Solutions book.\n\n    1.Question or problem definition.\n    2.Acquire training and testing data.\n    3.Wrangle, prepare, cleanse the data.\n    4.Analyze, identify patterns, and explore the data.\n    5.Model, predict and solve the problem.\n    6.Visualize, report, and present the problem solving steps and final solution.\n    7.Supply or submit the results.\n\nThe workflow indicates general sequence of how each stage may follow the other. However there are use cases with exceptions.\n\n    1.We may combine mulitple workflow stages. We may analyze by visualizing data.\n    2.Perform a stage earlier than indicated. We may analyze data before and after wrangling.\n    3.Perform a stage multiple times in our workflow. Visualize stage may be used multiple times.\n    4.Drop a stage altogether. We may not need supply stage to productize or service enable our dataset for a competition.\n\n\n## Introduction\n\nThis notebook analyzes customer behavior for that we have BigMarts Sales data collected in 2013 which is bifurcated in train (8523 records & 12 attributes) and test (5681 records & 11 attributes) data set, train data set has both independant and dependant variable(s) given below\n\n    Item_Identifier: Product ID\n    Item_Weight: Weight of Product\n    Item_Fat_Content: Fat content of Product- Low\/Regular\n    Item_Visibility: Parameter to know the visiblity\/reach of product\n    Item_Type: Category of Product\n    Item_MRP: Maximum Retail Price of the Product\n    Outlet_Identifier: Store ID\n    Outlet_Establishment_Year: The Year in which store is established\n    Outlet_Size: Areawise distribution of Stores- Low\/Medium\/High\n    Outlet_Location_Type: Type of city in which outlet is located\n    Outlet_Type: Type of outlet - Grocery store or supermarket\n    Item_Outlet_Sales: Sale price of product - The dependant variable to be predicted\n\n### The Hypothesis\n\n    Locality: Outlet in populated locality should generate more revenue\n\n    Spending Capacity: Tier 1 should have more spending capacity than tier 2 and tier 3\n\n    Product Selection: Tier 1 should prefer low fat content food as they tend to be more aware of their health\n\n    Item Visiblity: More visible Item should have more revenue generating power\n\n    Area: Stores which have early establishment could have higher outlet size\n\n    MRP: Consumers prefer reasonable product or Branded products\n\n### Problem Statment\n\nWe need to analyse the dataset and come up with more insights and our main objective is to predict the Sales figure for the test dataset\nApproach\n\n    By applying Exploratory Data Analysis we will identify the relation between different attributes and evaluate meaningful information\n\n    By applying different supervised machine learning algorithms we will predict the sales for test dataset\n\n### Aim of the Project\n\nThe main objective is to find the sales per product for each store and evaluate meaningful insights. Using this model, BigMart will try to understand different attributes of the product and apply them to increase their overall sales\n","ebd0e72c":"Observation: Here we have intresting ovservation, where the visiblity of Items is Zero, which suggest those items kept behind in shelf and amlost have no visiblity can also be sold. This show Consumer tend to search for their own products","9ace47a5":"There are no anomallies in the column Item_Weight; Also the distribution is almost normal so the null value can be substituted with mean.","247ee2f9":"Observation : People bought more Low Fat Product","7bec3ece":"## Describing Data","c36bdb08":"**Item Type**","54c6527f":"Observation: Low Fat and Regular both are contributing equally to the revenue generation","4a7b34b2":"**Item Visiblity to Item Outlet Sales**","5e1835f5":"Observation: Tier 2 & 3 have more revenue generation power although we have maximum number ot outlet in Tier 3 cities so it justify the number","c3633ae5":"**Outlet Size**","1f3fcc1e":"## **Which features contain blank, null or empty values?**","9a25b5ab":"### Dealing with Outliers","ecf39818":"Observation: Although Fruits and Vegetables unit sold are high, however revenue generated by Seafood is much higher, so we have to focus more on such products","25deb3ea":"# Explaratory Data Analysis","2e3b4d4c":"Outlet with age 23 has less revenue generation power.","5502ec96":"Observation: People bought more Fruits and Vegetables","578dbc7d":"## A)Univariate Analysis","2c7f124d":"**Cleaning the Data**","46491f9a":"Mean > Median > Mode means the distribution is positively skewed ( Right Skewed ).\n\nThe difference is not much so it can be said that the distribution is close to normal distribution ( Skewness is less )","28cbbb77":"**Item Fat Content**","b8b982c9":"### Running the Algorithm","c5b96888":" **Item Type to Item Outlet Sales**","bd82c6a0":"## Bivariate Analysis","fa61822b":"Observation: Maximum outlets in Tier 3 cities","d9ee7ad0":"**Which features are categorical?**\n\nThese values classify the samples into sets of similar samples. Within categorical features are the values nominal, ordinal, ratio, or interval based? Among other things this helps us select the appropriate plots for visualization.","324dcf26":"Observation: Maximum supermarket are of Type 1","addc12b3":"## Outlier","ed8883ee":"**Which features are numerical?**\n\nWhich features are numerical? These values change from sample to sample. Within numerical features are the values discrete, continuous, or timeseries based? Among other things this helps us select the appropriate plots for visualization.","edf858bf":"**Item Fat Content to Item Outlet Sales**","a8357714":"**Outlet Type to Item Outlet Sales**","a73c3100":"## Correlation Matrix","d652d928":"**Outlet Type**","42cc3e58":"**Outlet Size to Item Outlet Sales**","e709e470":"**Outlet Location Type**","be954aa6":"## Acquire Dataset","f54e868f":"Observation: Medium and High size outlet have maximum revenue generation power","5e220111":"## Dealing with the Categorical Variables\n","daee9b7d":"**Outlet Location to Item Outlet Sales**","9bfb1195":"**Outlet Age to Item Outlet Sales**","40319df8":"## Import Libraries\n","8bf20287":"Null Value is similar to small outlet.","2ad996d7":"We can substitute null with mode i.e medium \n\nBut since the null has similar feature\/relation as small we are going to substitute it as small.","ff772159":"**Outlet Age**","f8e7624a":"Observation: Most Outlet are of 36 year old","f2a25697":"## Create the Training & Testing Sets","a781556d":"**Item MRP to Item Outlet Sales**","a1d79083":"### Feature Scaling"}}