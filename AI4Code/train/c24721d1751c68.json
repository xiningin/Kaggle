{"cell_type":{"35dc36d8":"code","101ed7dc":"code","fa07490c":"code","6efc0096":"code","2f1f6d4c":"code","7f46a916":"code","5d075fea":"code","ce55c0db":"code","13247563":"markdown","21ced29c":"markdown","eb6e802c":"markdown","bdc0cfa2":"markdown","8e8dce7b":"markdown","0f21c900":"markdown","5f3d08c6":"markdown","9ec7340a":"markdown","9a78df96":"markdown","1fd7501a":"markdown"},"source":{"35dc36d8":"import tensorflow as tf\nfrom tensorflow.keras.models import  load_model\nimport numpy as np\nimport pandas as pd\nimport cv2 as cv2\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nimport os\nimport logging\nlogging.getLogger(\"tensorflow\").setLevel(logging.ERROR)","101ed7dc":"def predictor(sdir, csv_path,  model_path, averaged=True, verbose=True):    \n    # read in the csv file\n    class_df=pd.read_csv(csv_path) \n    class_count=len(class_df['class'].unique())\n    img_height=int(class_df['height'].iloc[0])\n    img_width =int(class_df['width'].iloc[0])\n    img_size=(img_width, img_height)    \n    scale=class_df['scale by'].iloc[0] \n    image_list=[]\n    # determine value to scale image pixels by\n    try: \n        s=int(scale)\n        s2=1\n        s1=0\n    except:\n        split=scale.split('-')\n        s1=float(split[1])\n        s2=float(split[0].split('*')[1]) \n        print (s1,s2)\n    path_list=[]\n    paths=os.listdir(sdir)    \n    for f in paths:\n        path_list.append(os.path.join(sdir,f))\n    if verbose:\n        print (' Model is being loaded- this will take about 10 seconds')\n    model=load_model(model_path)\n    image_count=len(path_list) \n    image_list=[]\n    file_list=[]\n    good_image_count=0\n    for i in range (image_count):        \n        try:\n            img=cv2.imread(path_list[i])\n            img=cv2.resize(img, img_size)\n            img=cv2.cvtColor(img, cv2.COLOR_BGR2RGB)             \n            good_image_count +=1 \n            img=img*s2 - s1 \n            image_list.append(img)\n            file_name=os.path.split(path_list[i])[1]\n            file_list.append(file_name)\n        except:\n            if verbose:\n                print ( path_list[i], ' is an invalid image file') \n    if good_image_count == 1:\n        averaged=True\n    image_array=np.array(image_list) \n    # make predictions on images, sum the probabilities of each class then find class index with\n    # highest probability\n    preds=model.predict(image_array)\n    if averaged:\n        tsum=[]    \n        for i in range (class_count): # create all 0 values list\n            tsum.append(0)\n        for p in preds:\n            tsum =list( map(lambda x, y: x + y, tsum, p)) \n        index=np.argmax(tsum) # find the class index with the highest probability sum\n        klass=class_df['class'].iloc[index] # get the class name that corresponds to the index\n        prob=tsum[index]\/good_image_count  # get the probability average \n        # to show the correct image run predict again and select first image that has same index\n        for img in image_array:  #iterate through the images    \n            test_img=np.expand_dims(img, axis=0) # since it is a single image expand dimensions \n            test_index=np.argmax(model.predict(test_img)) # for this image find the class index with highest probability\n            if test_index== index: # see if this image has the same index as was selected previously\n                if verbose: # show image and print result if verbose=1\n                    plt.axis('off')\n                    plt.imshow(img) # show the image\n                    print (f'predicted species is {klass} with a probability of {prob*100:6.2f} % ')\n                break # found an image that represents the predicted class      \n        return klass, prob, img, None\n    else: # create individual predictions for each image\n        pred_class=[]\n        prob_list=[]\n        for i, p in enumerate(preds):\n            index=np.argmax(p) # find the class index with the highest probability sum\n            klass=class_df['class'].iloc[index] # get the class name that corresponds to the index\n            image_file= file_list[i]\n            pred_class.append(klass)\n            prob_list.append(p[index]* 100)            \n        Fseries=pd.Series(file_list, name='image file')\n        Lseries=pd.Series(pred_class, name= 'species')\n        Pseries=pd.Series(prob_list, name='probability')\n        df=pd.concat([Fseries, Lseries, Pseries], axis=1)\n        if verbose:\n            length= len(df)\n            print (df.head(length))\n        return None, None, None, df","fa07490c":"sdir=r'..\/input\/100-bird-species\/images to test' # path to images directory\ncsv_path=r'..\/input\/100-bird-species\/class_dict.csv' # path to models csv file\nmodel_path=r'..\/input\/100-bird-species\/EfficientNetB3-BIRDS-99.13.h5' # path to trained model\nverbose=True # function will print out results and show image of predicted class\naveraged=True # average the predictions to select the class\nklass, prob, image, df=predictor(sdir, csv_path,  model_path, averaged=averaged, verbose=verbose)\n","6efc0096":"verbose=False\nklass, prob, image, df=predictor(sdir, csv_path,  model_path, averaged=averaged, verbose=verbose)","2f1f6d4c":"plt.axis('off')\nplt.imshow(image) # show the image\nprint (f'predicted species is {klass} with a probability of {prob*100:6.2f} % ')","7f46a916":"verbose=True\naveraged=False\nklass, prob, image, df=predictor(sdir, csv_path,  model_path, averaged=averaged, verbose=verbose)","5d075fea":"verbose=False\naveraged=False\nklass, prob, image, df=predictor(sdir, csv_path,  model_path, averaged=averaged, verbose=verbose)\nlength=len(df)\nprint (df.head(length))","ce55c0db":"sdir=r'..\/input\/100-bird-species\/one image to test' # directory has 1 image\nverbose=True\naveraged=False# note if there is only 1 image in the directory the parameter average is set internally\nklass, prob, image, df=predictor(sdir, csv_path,  model_path, averaged=averaged, verbose=verbose)\n","13247563":"### print the results returned by the function and show the image","21ced29c":"### The Predictor kernel is used in association with the trained model EfficientNetB3-BIRDS-99.13.h3. It requires use of the\n### file class_dict.csv which contains information on the trained model like image size and pixel scale value.\n\n### The Predictor call is off the form predictor(sdir, csv_path,  model_path, averaged=True, verbose=True) where:\n\n- __sdir__ is the path to the directory that contains one or more images to be predicted\n- __csv_path__ is the path to the class_dict csv file \n- __model_path__ is the path to the trained model\n- __averaged__ is a boolean that selects the mode of operation of the kernel.\n    if averaged=True then it is assumed the images to be predicted are images of the SAME bird. That is,\n    if you see a bird you want to classify it is best to take several images of the bird. Then place them\n    into a directory(sdir). It is best to crop the images so that the bird takes up a high percentage of the \n    pixels in the image. Then resize the images to 224 X 224. See the images in the test directory for \n    examples of proper images to use for predictions.\n    If averaged=False it is assumed that the images in the sdir are of various birds and you wish to obtain an\n    individual prediction for EACH image. In this case the kernel returns a dataframe of the form\n    image file  species probabilty. The dataframe as as many rows as there are images in the sdir. \n    The data belowshows the data frame returned for the images in the images to test directory\n    with verbose= True and average=False\n              image file                species  probability\n         0      5.jpg     AFRICAN CROWNED CRANE    99.994695\n         1      1.jpg      AFRICAN FIREFINCH       99.913812\n         2      7.jpg                ANTBIRD       99.874401\n         3      4.jpg  AFRICAN CROWNED CRANE       99.994004\n         4      3.jpg  AFRICAN CROWNED CRANE       99.992073\n         5     14.jpg  AFRICAN CROWNED CRANE       99.983764\n         6      2.jpg  AFRICAN CROWNED CRANE       99.975902\n      \n- __verbose__ is a boolean. If set to True the kernel prints the results of the predictions. In the case where\n     average=True it will also show the image of the predicted class. If averaged=False the kernel prints out\n     the content of the dataframe\n     \n\n","eb6e802c":"### test on a multiple images with verbose=0 - function does not print results or show the class image\n### returns the klass, its probability and an associated image of the class","bdc0cfa2":"### demonstrate use on a single image with verbose=True","8e8dce7b":"### predictor function","0f21c900":"### now demonstrate where images are assumed to be of various birds and you want to get the\n### individual results for each image. With verbose=True function prints out the results\n### the data is returned as the dataframe df","5f3d08c6":"### test on multiple images to get an averaged prediction with verbose=True\n### Note the images to test directory contains 7 images, 5 are of African Crowned Crane,\n### ","9ec7340a":"### Note the returned prediction is of the class African Crowned Crane because there are 5 crane images\n### and 2 non crane images so the class with the highest averaged probability is selected and displayed","9a78df96":"### now run function with verbose=False\n### the returned datafame df can then be used to print the results\n","1fd7501a":"### Make required imports"}}