{"cell_type":{"18ea8186":"code","b4ba800d":"code","1d6a2421":"code","fa27a8e3":"code","bb36c1dc":"code","5cefbf0f":"code","6b537885":"code","3bc8a3fe":"code","e0c69e61":"code","f5ab92fb":"code","6394fb04":"code","261577cb":"code","f5aab06f":"code","7c315242":"code","91dbbfd7":"code","47e007d3":"code","2028e820":"code","389c42ad":"code","fdddd97f":"code","e1d5e677":"code","a7a23ae8":"markdown","7606d964":"markdown","c73c8667":"markdown","581cfc74":"markdown","8cf38019":"markdown","f90fa7ae":"markdown","6d5278b8":"markdown","24c55cc5":"markdown","550576c1":"markdown","2175d432":"markdown","a38dae6e":"markdown","20068001":"markdown","64484d00":"markdown","8a7a30a3":"markdown","b1ac4f33":"markdown","bb7d3834":"markdown","027a51a4":"markdown","b6d96362":"markdown","3641844b":"markdown"},"source":{"18ea8186":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\ntrain_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')","b4ba800d":"train_data.head()","1d6a2421":"train_data.isna().sum()","fa27a8e3":"train_data['Age'].fillna(train_data['Age'].median(), inplace=True)\ntest_data['Age'].fillna(test_data['Age'].median(), inplace=True)\ntrain_data['Embarked'].fillna('S', inplace=True)\ntest_data['Embarked'].fillna('S', inplace=True)\ntest_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)","bb36c1dc":"train_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\ntest_data.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)","5cefbf0f":"train_data.describe()","6b537885":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043f\u043e\u043b \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u043f\u043e\u0432\u043b\u0438\u044f\u043b \u043d\u0430 \u0435\u0433\u043e \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u0435\nsns.barplot(x='Sex', y='Survived',data=train_data)","3bc8a3fe":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0430\u043c \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\nsns.catplot(x='Pclass', y='Survived',  kind='bar', data=train_data)","e0c69e61":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043d\u0430 \u0448\u0430\u043d\u0441\u044b \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c \u043c\u043e\u0433\u043b\u043e \u043f\u043e\u0432\u043b\u0438\u044f\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u043e\u0432 \u043d\u0430 \u0431\u043e\u0440\u0442\u0443\ndata = [train_data,test_data]\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n\nsns.barplot(x='relatives', y='Survived', data=train_data)","f5ab92fb":"train_data.head(10)","6394fb04":"from sklearn.preprocessing import LabelEncoder\ndef encode_features(data, features):\n    for feature in features:\n        le = LabelEncoder()\n        le.fit(data[feature])\n        encoded_column = le.transform(data[feature])\n        data[feature] = encoded_column\n    return data\n\nto_encode = ['Sex', 'Embarked']\ntrain_data = encode_features(train_data, to_encode)\ntest_data = encode_features(test_data, to_encode)\ntrain_data.head()","261577cb":"sex_binaries = pd.get_dummies(train_data['Sex'], prefix='Sex_')\nembark_binaries = pd.get_dummies(train_data['Embarked'], prefix='Embarked_')\ntrain_data = pd.concat([train_data, sex_binaries, embark_binaries], axis=1)\n\nsex_binaries = pd.get_dummies(test_data['Sex'], prefix='Sex_')\nembark_binaries = pd.get_dummies(test_data['Embarked'], prefix='Embarked_')\ntest_data = pd.concat([test_data, sex_binaries, embark_binaries], axis=1)\n\ntest_data.head(10)","f5aab06f":"train_data.drop(['Sex', 'SibSp', 'Parch', 'Embarked'], axis=1, inplace=True)\ntest_data.drop(['Sex', 'SibSp', 'Parch', 'Embarked'], axis=1, inplace=True)\n\ntest_data.head(10)","7c315242":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\n\nX = train_data.drop(['Survived'], axis=1)\ny = train_data['Survived']\n\nskf = list(StratifiedKFold(n_splits = 4, shuffle=True, random_state=177).split(X, y))","91dbbfd7":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\ncvs = cross_val_score(tree, X, y, scoring='roc_auc', cv=skf)\nprint(\"Score of Decision Tree: {}\" .format(cvs.mean()))","47e007d3":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=6, n_jobs=12)\ncvs = cross_val_score(knn, X, y, scoring='roc_auc', cv=skf)\nprint(\"Score of KNN: {}\" .format(cvs.mean()))","2028e820":"from sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier(random_state=177, n_estimators=100, min_samples_split=6, min_samples_leaf=2)\ncvs = cross_val_score(forest, X, y, scoring='roc_auc', cv=skf)\nprint(\"Score of Random Forest: {}\" .format(cvs.mean()))","389c42ad":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(solver='liblinear')\ncvs = cross_val_score(logreg, X, y, scoring='roc_auc', cv=skf)\nprint(\"Score of Logistic Regression: {}\" .format(cvs.mean()))","fdddd97f":"forest.fit(X, y)\nprediction = forest.predict(test_data.drop(['PassengerId'], axis=1))\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_data[\"PassengerId\"],\n        \"Survived\": prediction \n    })\nsubmission.to_csv(\"submission.csv\", index=False)","e1d5e677":"submission.head()","a7a23ae8":"# Titanic ML","7606d964":"## \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c EDA","c73c8667":"## Logistic Regression","581cfc74":"## \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043b\u0438\u0441\u044c, \u0437\u0430\u043e\u0434\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043e\u043d\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442","8cf38019":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043f\u043e\u043b \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u043f\u043e\u0432\u043b\u0438\u044f\u043b \u043d\u0430 \u0435\u0433\u043e \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u0435","f90fa7ae":"### \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0441 \u043a\u043e\u0440\u0430\u0431\u043b\u044f \u0441\u043f\u0430\u0441\u043b\u043e\u0441\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0436\u0435\u043d\u0449\u0438\u043d, \u0447\u0435\u043c \u043c\u0443\u0436\u0447\u0438\u043d. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0438\u0445 \u0441\u0430\u0436\u0430\u043b\u0438 \u043d\u0430 \u0448\u043b\u044e\u043f\u043a\u0438 \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","6d5278b8":"## \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439","24c55cc5":"## Decision Tree","550576c1":"### \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0447\u0435\u043c \"\u044d\u043b\u0438\u0442\u043d\u0435\u0435\" \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0435\u0433\u043e \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u044f.","2175d432":"## \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0444\u043e\u043b\u0434\u044b","a38dae6e":"### \u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u043e\u0432 \u043d\u0430 \u0431\u043e\u0440\u0442\u0443 \u0431\u043e\u043b\u044c\u0448\u0435\u043c 3, \u0448\u0430\u043d\u0441\u044b \u043d\u0430 \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0430\u0434\u0430\u044e\u0442.","20068001":"## Random Forest","64484d00":"## \u0423\u0431\u0435\u0440\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438-\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 Cabin, \u0442.\u043a. \u043e\u043a\u043e\u043b\u043e 80% \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e","8a7a30a3":"   ## \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 Age \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u043f\u0443\u0441\u0442\u044b\u0435 \u044f\u0447\u0435\u0439\u043a\u0438 Embarked \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 'S'","b1ac4f33":"## \u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438","bb7d3834":"## \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0435","027a51a4":"## KNN (6 neighbors)","b6d96362":"## \u0417\u0430\u0442\u0435\u043c \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u043c \u0438\u0445, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043a \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438","3641844b":"## \u041b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043b Random Forest, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0435\u0433\u043e"}}