{"cell_type":{"8f140817":"code","ce541e0f":"code","221b824e":"code","e0dd883c":"code","61e661c8":"code","5b256002":"code","c4a58266":"code","3456665b":"code","7625a14d":"code","b612ed91":"code","03303e0c":"code","17b809b8":"code","f5421f36":"code","7cb1eff8":"code","1e0f84f2":"code","2ff1916c":"code","cb35d112":"code","615bf41d":"code","cc9e73fb":"code","904cc4c0":"code","717cb448":"markdown"},"source":{"8f140817":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression\n\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')","ce541e0f":"train_df = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\")\nsample_df = pd.read_csv(\"..\/input\/30-days-of-ml\/sample_submission.csv\")","221b824e":"print(\"Training Data Shape .................\",train_df.shape,'\\n','Testing Data ...............',test_df.shape)","e0dd883c":"train_df.describe()","61e661c8":"train_df.isnull().sum()","5b256002":"#categorical features\ncategorical = train_df.select_dtypes(include =[np.object])\nprint(\"Categorical Features in Train Set:\",categorical.shape[1])\n\n#numerical features\nnumerical= train_df.select_dtypes(include =[np.float64,np.int64])\nprint(\"Numerical Features in Train Set:\",numerical.shape[1])","c4a58266":"#categorical features\ncategorical = test_df.select_dtypes(include =[np.object])\nprint(\"Categorical Features in Test Set:\",categorical.shape[1])\n\n#numerical features\nnumerical= test_df.select_dtypes(include =[np.float64,np.int64])\nprint(\"Numerical Features in Test Set:\",numerical.shape[1])","3456665b":"train_df.isnull().sum()","7625a14d":"test_df.isnull().sum()","b612ed91":"train_df['cat0'].value_counts()","03303e0c":"# Labelencoding\nle = LabelEncoder()\nvar_mod = train_df.select_dtypes(include='object').columns\nfor i in var_mod:\n    train_df[i] = le.fit_transform(train_df[i])\n    \nfor i in var_mod:\n    test_df[i] = le.fit_transform(test_df[i])","17b809b8":"train_df.columns","f5421f36":"# Seperate Features and Target\nX= train_df.drop(columns = ['target'], axis=1)\ny= train_df['target']","7cb1eff8":"from sklearn.model_selection import train_test_split\nX_train,X_valid,y_train,y_valid = train_test_split(X,y,test_size=0.2,random_state=22)","1e0f84f2":"from sklearn.linear_model import LinearRegression\n# Model building\nfeatures = X.columns\nLR = LinearRegression(normalize=True)\nLR.fit(X_train,y_train)\ny_pred = LR.predict(X_valid)\ncoef = pd.Series(LR.coef_,features).sort_values()","2ff1916c":"# Barplot for coefficients\nplt.figure(figsize=(8,5))\nsns.barplot(LR.coef_,features)","cb35d112":"MSE= metrics.mean_squared_error(y_valid,y_pred)\nfrom math import sqrt\nrmse = sqrt(MSE)\nprint(\"Root Mean Squared Error:\",rmse)","615bf41d":"\nfinal_predictions = LR.predict(test_df)\nsample_df['target'] = final_predictions","cc9e73fb":"sample_df['target'].apply(lambda x: 0 if x<0 else x)","904cc4c0":"\n#only positive predictions for the target variable\nsample_df['target'] = sample_df['target'].apply(lambda x: 0 if x<0 else x)\nsample_df.to_csv('my_submission.csv', index=False)","717cb448":"# Data Cleaning"}}