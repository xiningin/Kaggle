{"cell_type":{"133f236a":"code","c1f7db09":"code","83ba3ab6":"code","d936a1d9":"code","e1b2afdb":"code","2407076b":"code","51c24ac8":"code","e8e15d39":"code","f705ccbc":"code","592fba76":"code","e7e2b3f4":"code","9cfe9be9":"code","841f747d":"code","3dcf19b4":"code","150ad7fd":"code","ee0f239d":"code","31ae7504":"code","705db3c3":"code","7d1e92dd":"code","b2d92b25":"code","7bdbe6e7":"code","1e8cacde":"code","9edf2572":"code","47d4d776":"code","49442566":"code","efacf7da":"code","03da0bff":"code","e9902d86":"code","b7fcfd4e":"code","78df1aef":"code","b08f7a6e":"code","e6cc6e2f":"code","11f226e1":"code","368a8cd2":"markdown","71d23b3a":"markdown","5b611268":"markdown","c21b5805":"markdown","dd71148e":"markdown","32f73c6e":"markdown","1fe23966":"markdown","d5ef49b0":"markdown","ce16815f":"markdown","e32824e8":"markdown","3c01b056":"markdown","14d282e6":"markdown","1d9be4e9":"markdown","68d3ce0e":"markdown","078a73da":"markdown","ce8f91ef":"markdown","b9be5713":"markdown","efcd00ed":"markdown","b4394fff":"markdown","51a0e738":"markdown","3da264ae":"markdown","f102e1c4":"markdown","8cd83f7d":"markdown","1627edfd":"markdown","a3637771":"markdown"},"source":{"133f236a":"# library & dataset\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n \n# left\nsns.pairplot(df, kind=\"scatter\", hue=\"species\", markers=[\"o\", \"s\", \"D\"], palette=\"Set2\")\nplt.show()","c1f7db09":"!pip install wikipedia\n\n# Libraries\nimport numpy as np\nimport pandas as pd\nfrom bokeh.plotting import figure, show\nfrom bokeh.io import output_notebook\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import axes3d\nimport seaborn as sns\nfrom math import pi\nimport squarify\nfrom matplotlib_venn import venn3\nfrom mpl_toolkits.mplot3d import Axes3D\nimport wikipedia\nfrom wordcloud import WordCloud, STOPWORDS\n\n\n# Call once to configure Bokeh to display plots inline in the notebook.\noutput_notebook()","83ba3ab6":"df1 = wikipedia.page('Michael Jordan')\ndf1_content = df1.content\ndf1.content","d936a1d9":"plt.figure(figsize = (20,20)) \nwc = WordCloud(max_words = 500 , width = 1600 , height = 800 , stopwords = STOPWORDS)\nwc.generate(df1_content) # Generating WordCloud\nplt.imshow(wc , interpolation = 'bilinear')","e1b2afdb":"df2 = pd.read_csv('..\/input\/us-elections-dataset\/2012_US_elect_county.csv')\ndf2.head(5)","2407076b":"plt.style.use('seaborn')\nx  = [(i+1) for i in range(10)]\ny1 = df2['Obama vote'][1:11]\ny2 = df2['Romney vote'][1:11]\n\nplt.plot(x, y1, label=\"Obama vote\", color = '#FF3600')\nplt.plot(x, y2, label=\"Romney vote\", color = '#0082FF')\nplt.plot()\n\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\nplt.title(\"Line Graph Example\")\nplt.legend()\nplt.show()","51c24ac8":"import matplotlib.pyplot as plt\nimport numpy as np\n\nys = 200 + np.random.randn(100)\nx = [x for x in range(len(ys))]\n\nplt.plot(x, ys, '-')\nplt.fill_between(x, ys, 195, where=(ys > 195), facecolor='#00FF86', alpha=0.6)\n\nplt.title(\"Fills and Alpha Example\")\nplt.show()","e8e15d39":"df3 = pd.read_csv(\"..\/input\/mobile-price-classification\/train.csv\")\ndf3.head()","f705ccbc":"# Look at index 4 and 6, which demonstrate overlapping cases.\nx1  = [(i+1) for i in range(5)]\ny1 = df3['sc_w'][:5]\n\nx2  = [(i+1) for i in range(5, 10)]\ny2 = df3['sc_w'][5:10]\n\nplt.bar(x1, y1, label=\"Blue Bar\", color='#00B8FF')\nplt.bar(x2, y2, label=\"Green Bar\", color='#00FF86')\nplt.plot()\n\nplt.xlabel(\"bar number\")\nplt.ylabel(\"bar height\")\nplt.title(\"Bar Chart Example\")\nplt.legend()\nplt.show()","592fba76":"df4 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\")\ndf4.head()","e7e2b3f4":"# Use numpy to generate a bunch of random data in a bell curve around 5.\nn = 5 + df4['AMBIENT_TEMPERATURE'][:300]\n\nm = [m for m in range(len(n))]\nplt.bar(m, n, color = '#FFA600')\nplt.title(\"Raw Data\")\nplt.show()\n\nplt.hist(n, bins=20, color='#00FF86')\nplt.title(\"Histogram\")\nplt.show()","9cfe9be9":"# Import library and dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n \n# Method 1: on the same Axis\nsns.distplot( df[\"sepal_length\"] , color=\"skyblue\", label=\"Sepal Length\")\nsns.distplot( df[\"sepal_width\"] , color=\"red\", label=\"Sepal Width\")\n \n#sns.plt.show()","841f747d":"df5 = pd.read_csv(\"..\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv\")\ndf5.head()","3dcf19b4":"x1 = df5['City_Code_Hospital'][:10]\ny1 = df5['Hospital_code'][:10]\n\nx2 = df5['case_id'][:10]\ny2 = df5['City_Code_Hospital'][:10]\n\n# Markers: https:\/\/matplotlib.org\/api\/markers_api.html\n\nplt.scatter(x1, y1, marker='v', color='#0082FF')\nplt.scatter(x2, y2, marker='o', color='#FF3600')\nplt.title('Scatter Plot Example')\nplt.show()","150ad7fd":"fig = plt.figure()\nax = fig.add_subplot(111, projection = '3d')\n\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = np.random.randint(10, size=10)\nz1 = np.random.randint(10, size=10)\n\nx2 = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\ny2 = np.random.randint(-10, 0, size=10)\nz2 = np.random.randint(10, size=10)\n\nax.scatter(x1, y1, z1, c='b', marker='o', label='blue')\nax.scatter(x2, y2, z2, c='g', marker='D', label='green')\n\nax.set_xlabel('x axis')\nax.set_ylabel('y axis')\nax.set_zlabel('z axis')\nplt.title(\"3D Scatter Plot Example\")\nplt.legend()\nplt.tight_layout()\nplt.show()","ee0f239d":"df6 = pd.read_csv('..\/input\/summer-products-and-sales-in-ecommerce-wish\/summer-products-with-rating-and-performance_2020-08.csv')\ndf6.head()","31ae7504":"import matplotlib.pyplot as plt\n\nidxes = [(i+1) for i in range(10)]\narr1  = df6['uses_ad_boosts'][:10]\narr2  = df6['rating'][:10]\narr3  = df6['price'][:10]\n\n# Adding legend for stack plots is tricky.\nplt.plot([], [], color='#FF4500', label = 'D 1')\nplt.plot([], [], color='#00EB42', label = 'D 2')\nplt.plot([], [], color='#00D3FF', label = 'D 3')\n\nplt.stackplot(idxes, arr1, arr2, arr3, colors= ['#FF4500', '#00EB42', '#00D3FF'])\nplt.title('Stack Plot Example')\nplt.legend()\nplt.show()","705db3c3":"df5['Department'].value_counts()","7d1e92dd":"labels = 'S1', 'S2', 'S3', 'S4'\nsections = df5['Department'].value_counts()[1:]\ncolors = ['#FFE300', '#00ACFF', '#00FF8D', '#FF4900']\n\nplt.pie(sections, labels=labels, colors=colors,\n        startangle=90,\n        explode = (0, 0, 0.1, 0),\n        autopct = '%1.2f%%')\n        \nplt.axis('equal') # Try commenting this out.\nplt.title('Pie Chart Example')\nplt.show()","b2d92b25":"# create data\nnames='groupA', 'groupB', 'groupC', 'groupD',\nsize=[12,11,3,30]\n \n# Create a circle for the center of the plot\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\n\n# Give color names\nplt.pie(size, labels=names, colors=['red','green','blue','skyblue'])\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","7bdbe6e7":"def random_plots():\n  xs = []\n  ys = []\n  \n  for i in range(20):\n    x = i\n    y = np.random.randint(10)\n    \n    xs.append(x)\n    ys.append(y)\n  \n  return xs, ys\n\nfig = plt.figure()\nax1 = plt.subplot2grid((5, 2), (0, 0), rowspan=1, colspan=2)\nax2 = plt.subplot2grid((5, 2), (1, 0), rowspan=3, colspan=2)\nax3 = plt.subplot2grid((5, 2), (4, 0), rowspan=1, colspan=1)\nax4 = plt.subplot2grid((5, 2), (4, 1), rowspan=1, colspan=1)\n\nx, y = random_plots()\nax1.plot(x, y)\n\nx, y = random_plots()\nax2.plot(x, y)\n\nx, y = random_plots()\nax3.plot(x, y)\n\nx, y = random_plots()\nax4.plot(x, y)\n\nplt.tight_layout()\nplt.show()","1e8cacde":"fig = plt.figure()\nax = fig.add_subplot(111, projection = '3d')\n\nx, y, z = axes3d.get_test_data()\n\nax.plot_wireframe(x, y, z, rstride = 3, cstride = 3, color='#000000')\n\nplt.title(\"Wireframe Plot Example\")\nplt.tight_layout()\nplt.show()","9edf2572":"# Generate some random data\nnum_points = 20\n# x will be 5, 6, 7... but also twiddled randomly\nx = 5 + np.arange(num_points) + np.random.randn(num_points)\n# y will be 10, 11, 12... but twiddled even more randomly\ny = 10 + np.arange(num_points) + 5 * np.random.randn(num_points)\nsns.regplot(x, y, color='#FE4C84')\nplt.show()","47d4d776":"# Make a 10 x 10 heatmap of some random data\nside_length = 10\n# Start with a 10 x 10 matrix with values randomized around 5\ndata = 5 + np.random.randn(side_length, side_length)\n# The next two lines make the values larger as we get closer to (9, 9)\ndata += np.arange(side_length)\ndata += np.reshape(np.arange(side_length), (side_length, 1))\n# Generate the heatmap\nsns.heatmap(data)\nplt.show()","49442566":"df = sns.load_dataset('iris')\n \n# Custom the inside plot: options are: \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d\nsns.jointplot(x=df[\"sepal_length\"], y=df[\"sepal_width\"], kind='hex')\nsns.jointplot(x=df[\"sepal_length\"], y=df[\"sepal_width\"], kind='kde')","efacf7da":"df = sns.load_dataset('iris')\n \n# plot\nsns.violinplot(x='species', y='sepal_length', data=df, order=[ \"versicolor\", \"virginica\", \"setosa\"])","03da0bff":"df = sns.load_dataset('iris')\n \n# Change line width\nsns.boxplot( x=df[\"species\"], y=df[\"sepal_length\"], linewidth=5)\n#sns.plt.show()\n","e9902d86":"# create data\nx = np.random.rand(15)\ny = x+np.random.rand(15)\nz = x+np.random.rand(15)\nz=z*z\n \n# Change color with c and alpha. I map the color to the X axis value.\nplt.scatter(x, y, s=z*2000, c=x, cmap=\"Blues\", alpha=0.4, edgecolors=\"grey\", linewidth=2)\n \n# Add titles (main and on axis)\nplt.xlabel(\"the X axis\")\nplt.ylabel(\"the Y axis\")\nplt.title(\"A colored bubble plot\")\n \nplt.show()","b7fcfd4e":"N = 4000\nx = np.random.random(size=N) * 100\ny = np.random.random(size=N) * 100\nradii = np.random.random(size=N) * 1.5\ncolors = [\"#%02x%02x%02x\" % (r, g, 150) for r, g in zip(np.floor(50+2*x).astype(int), np.floor(30+2*y).astype(int))]\n\np = figure()\np.circle(x, y, radius=radii, fill_color=colors, fill_alpha=0.6, line_color=None)\nshow(p)","78df1aef":"# Set data\ndf = pd.DataFrame({\n'group': ['A','B','C','D'],\n'var1': [38, 1.5, 30, 4],\n'var2': [29, 10, 9, 34],\n'var3': [8, 39, 23, 24],\n'var4': [7, 31, 33, 14],\n'var5': [28, 15, 32, 14]\n})\n  \n# ------- PART 1: Create background\n \n# number of variable\ncategories=list(df)[1:]\nN = len(categories)\n \n# What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\nangles = [n \/ float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n \n# Initialise the spider plot\nax = plt.subplot(111, polar=True)\n \n# If you want the first axis to be on top:\nax.set_theta_offset(pi \/ 2)\nax.set_theta_direction(-1)\n \n# Draw one axe per variable + add labels labels yet\nplt.xticks(angles[:-1], categories)\n \n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([10,20,30], [\"10\",\"20\",\"30\"], color=\"grey\", size=7)\nplt.ylim(0,40)\n \n \n# ------- PART 2: Add plots\n \n# Plot each individual = each line of the data\n# I don't do a loop, because plotting more than 3 groups makes the chart unreadable\n \n# Ind1\nvalues=df.loc[0].drop('group').values.flatten().tolist()\nvalues += values[:1]\nax.plot(angles, values, linewidth=1, linestyle='solid', label=\"group A\")\nax.fill(angles, values, 'b', alpha=0.1)\n \n# Ind2\nvalues=df.loc[1].drop('group').values.flatten().tolist()\nvalues += values[:1]\nax.plot(angles, values, linewidth=1, linestyle='solid', label=\"group B\")\nax.fill(angles, values, 'r', alpha=0.1)\n \n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n","b08f7a6e":"# Change color\nsquarify.plot(sizes=[13,22,35,5], label=[\"group A\", \"group B\", \"group C\", \"group D\"], color=[\"red\",\"green\",\"blue\", \"grey\"], alpha=.4 )\nplt.axis('off')\nplt.show()","e6cc6e2f":"# Line style: can be 'dashed' or 'dotted' for example\nv=venn3(subsets = (10, 8, 22, 6,9,4,2), set_labels = ('Group A', 'Group B', 'Group C'))\nplt.show()\n\n# Color\nv.get_patch_by_id('100').set_alpha(1.0)\nv.get_patch_by_id('100').set_color('white')\nplt.show()","11f226e1":"# Get the data (csv file is hosted on the web)\nurl = 'https:\/\/python-graph-gallery.com\/wp-content\/uploads\/volcano.csv'\ndata = pd.read_csv(url)\n \n# Transform it to a long format\ndf=data.unstack().reset_index()\ndf.columns=[\"X\",\"Y\",\"Z\"]\n \n# And transform the old column name in something numeric\ndf['X']=pd.Categorical(df['X'])\ndf['X']=df['X'].cat.codes\n \n# Make the plot\nfig = plt.figure()\nax = fig.gca(projection='3d')\nax.plot_trisurf(df['Y'], df['X'], df['Z'], cmap=plt.cm.viridis, linewidth=0.2)\nplt.show()\n \n# to Add a color bar which maps values to colors.\nsurf=ax.plot_trisurf(df['Y'], df['X'], df['Z'], cmap=plt.cm.viridis, linewidth=0.2)\nfig.colorbar( surf, shrink=0.5, aspect=5)\nplt.show()\n \n# Rotate it\nax.view_init(30, 45)\nplt.show()\n \n# Other palette\nax.plot_trisurf(df['Y'], df['X'], df['Z'], cmap=plt.cm.jet, linewidth=0.01)\nplt.show()","368a8cd2":"# [3D Bar Plot](http:\/\/)","71d23b3a":"# [Sub-plots](http:\/\/)","5b611268":"# [Pie Chart](http:\/\/)\n**It is a circular plot which is divided into slices to illustrate numerical proportion. The slice of a pie chart is to show the proportion of parts out of a whole.**\n## When to use: \n**Pie chart should be used seldom used as It is difficult to compare sections of the chart. Bar plot is used instead as comparing sections is easy.**","c21b5805":"# [Venn Diagram](http:\/\/)","dd71148e":"# [Histogram](http:\/\/)\n**A histogram takes in a series of data and divides the data into a number of bins. It then plots the frequency data points in each bin (i.e. the interval of points). It is useful in understanding the count of data ranges.**\n## When to use: \n**We should use histogram when we need the count of the variable in a plot.**","32f73c6e":"# [Web Plot](http:\/\/)","1fe23966":"# [Bubbleplot](http:\/\/)\n**A bubble plot is a scatterplot where a third dimension is added: the value of an additional numeric variable is represented through the size of the dots. You need 3 numerical variables as input: one is represented by the X axis, one by the Y axis, and one by the dot size.**\n## When to use: \n**It should be used when we require to use the overall statistical information on the distribution of the data. It can be used to detect outliers in the data.**","d5ef49b0":"# [Join Plots](http:\/\/)","ce16815f":"# [3D Scatter Plot](http:\/\/)","e32824e8":"### Visualizations are the easiest way to analyze and absorb information. Visuals help to easily understand the complex problem. They help in identifying patterns, relationships, and outliers in data. It helps in understanding business problems better and quickly. It helps to build a compelling story based on visuals. Insights gathered from the visuals help in building strategies for businesses. It is also a precursor to many high-level data analysis for Exploratory Data Analysis(EDA) and Machine Learning(ML).","3c01b056":"# [Word Cloud](http:\/\/)\n**Word Cloud is a data visualization technique used for representing text data in which the size of each word indicates its frequency or importance. Significant textual data points can be highlighted using a word cloud.**\n## When to use: \n**Word clouds are widely used for analyzing data from social network websites.**","14d282e6":"## Importing the necessary libraries:","1d9be4e9":"# [Tree Plot](http:\/\/)","68d3ce0e":"import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection = '3d')\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = np.random.randint(10, size=10)\nz = np.zeros(10)\n\ndx = np.ones(10)\ndy = np.ones(10)\ndz = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nax.bar3d(x, y, z, dx, dy, dz, color='#0072FF')\n\nax.set_xlabel('x axis')\nax.set_ylabel('y axis')\nax.set_zlabel('z axis')\nplt.title(\"3D Bar Chart Example\")\nplt.tight_layout()\nplt.show()","078a73da":"## Thank you very much for your attention. Kindly upvote if you like my work.\ud83d\ude0a","ce8f91ef":"# [Heatmap](http:\/\/)\n**A heatmap is a graphical representation of data that uses a system of color-coding to represent different values. Heatmaps are used in various forms of analytics but are most commonly used to show user behaviour on specific webpages or webpage templates. Heatmaps can be used to show where users have clicked on a page, how far they have scrolled down a page, or used to display the results of eye-tracking tests.**\n## When to use: \n**Heatmaps are a lot more visual than standard analytics reports, which can make them easier to analyse at a glance. This makes them more accessible, particularly to people who are not accustomed to analysing large amounts of data.**","b9be5713":"# [Stack Plot](http:\/\/)\n**Stack plot visualizes data in stacks and shows the distribution of data over time.**\n## When to use: \n**It is used for checking multiple variable area plots in a single plot.**","efcd00ed":"# [Bar Plot](http:\/\/)\n**Bar Plot shows the distribution of data over several groups. It is commonly confused with a histogram which only takes numerical data for plotting. It helps in comparing multiple numeric values.**\n## When to use: \n**It is used when to compare between several groups.**","b4394fff":"# Why are visualizations important?","51a0e738":"# [Violin plot](http:\/\/)\n**Violin plot is a better chart than boxplot as it gives a much broader understanding of the distribution. It resembles a violin and dense areas point the more distribution of data otherwise hidden by box plots**\n## When to use: \n**Its an extension to boxplot. It should be used when we require a better intuitive understanding of data.**","3da264ae":"![](https:\/\/blog.edugrad.com\/wp-content\/uploads\/2019\/12\/Data-Visualization-in-Python.png)","f102e1c4":"# [Boxplot](http:\/\/)\n**Boxplot gives a nice summary of the data. It helps in understanding our distribution better.**\n## When to use: \n**It should be used when we require to use the overall statistical information on the distribution of the data. It can be used to detect outliers in the data.**","8cd83f7d":"# [Wireframe](http:\/\/)\n**It takes a grid of values and projects it onto the specified three-dimensional surface, and can make the resulting three-dimensional forms quite easy to visualize. Here's an example of using a wireframe:**","1627edfd":"# [Line plot](http:\/\/)\n**A line plot is basically connecting data points with a straight line. It is useful in understanding the trend over time. It can explain the correlation between points by the trend. An upward trend means positive correlation and downward trend means a negative correlation.**\n## When to use: \n**Line plots can be used to create time-series plots.**","a3637771":"# [Scatter Plot](http:\/\/)\n**Scatter plot helps in visualizing 2 numeric variables. It helps in identifying the relationship of the data with each variable i.e correlation or trend patterns. It also helps in detecting outliers in the plot.**\n## When to use: \n**It is used in Machine learning concepts like regression, where x and y are continuous variables. It is also used in clustering scatters or outlier detection.**"}}