{"cell_type":{"c087ffcc":"code","13966e61":"code","b4d052f5":"code","07896967":"code","34a498d3":"code","01c61ede":"code","77a7358e":"code","285ddb34":"code","55728ed9":"code","e987ee15":"code","8b7f6fdd":"code","8f3d521a":"code","0b89ed2a":"code","4e7f92ec":"markdown"},"source":{"c087ffcc":"#importing modules\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport random\n\n#pulling in data\ndf = pd.read_csv('..\/input\/Uber_Ride_Reviews.csv')\ndf.drop(['sentiment'],axis = 1)\ndf.head()","13966e61":"#seperating by groups\ngroups = df.groupby('ride_rating').count()\nValues = groups.ride_review\ncolors = ['r', 'g', 'b', 'c', 'm']\n#making bar plot\nplt.bar(([1,2,3,4,5]), Values, color= colors)\nplt.title('Rating Distribution')\nplt.xlabel('Rating')\nplt.ylabel('Review Quantity')\nplt.show()","b4d052f5":"#checking for nulls\nnull_count = df.isnull().sum()\nnull_count","07896967":"#deleting all instances with ride_rating = 3\ndf = df[df.ride_rating != 3]\n\n#seperating by groups\ngroups = df.groupby('ride_rating').count()\nValues = groups.ride_review\ncolors = ['r', 'g', 'b', 'c']\n\n#making bar plot\nplt.bar(([1,2,4,5]), Values, color= colors)\nplt.title('Rating Distribution')\nplt.xlabel('Rating')\nplt.ylabel('Review Quantity')\nplt.show()","34a498d3":"#creating new binary_class column\ndf['binary_class'] = np.where(df['ride_rating'] > 3, 1, 0)\ndf","01c61ede":"#splitting into train and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df['ride_review'], df['binary_class'], random_state = 0)\n\n#setting random number between 1 and 1000\nnumber = random.randint(1,1000)\n\n#printing random training text and X_train shape\nprint ('Random Review:')\nprint(' ')\nprint(X_train[number])\nprint(' ')\nprint('X_train shape: ' + str(X_train.shape))","77a7358e":"#importing countvectorizer\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n#creating variable which assigns X_train to numbers\nvect = CountVectorizer().fit(X_train)\n\n#translates numbers back to text\nvect.get_feature_names()[1:10]","285ddb34":"#length of total words\nlen(vect.get_feature_names())","55728ed9":"#creating matrix array for logistic regression\nX_train_vectorized = vect.transform(X_train)\nprint (X_train_vectorized.toarray())","e987ee15":"#creating log regression\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train_vectorized, y_train)","8b7f6fdd":"#calculating AUC\nfrom sklearn.metrics import roc_auc_score\npredictions = model.predict(vect.transform(X_test))\nprint('AUC: ', roc_auc_score(y_test, predictions))","8f3d521a":"#creating array variable of all the words\nfeature_names = np.array(vect.get_feature_names())\n\n#creating array of all the regression coefficients per word\ncoef_index = model.coef_[0]\n\n#creating df with both arrays in it\ndf = pd.DataFrame({'Word':feature_names, 'Coef': coef_index})\n\n#sorting by coefficient\ndf.sort_values('Coef')","0b89ed2a":"print(model.predict(vect.transform(['abandoned great'])))\nprint(model.predict(vect.transform(['great she the best'])))\nprint(model.predict(vect.transform(['charged slow horrible'])))\nprint(model.predict(vect.transform(['it was as average as a trip could be'])))\nprint(model.predict(vect.transform(['my family felt safe we got to our destination with ease'])))\nprint(model.predict(vect.transform(['i got to my destination quickly and affordably i had a smile on my face from start to finish'])))","4e7f92ec":"**Exploratory Analysis, Bag of Words, Logistic Regression for Uber text reviews!**\n\nI have another version on Towards Data Science with more explanation here: https:\/\/towardsdatascience.com\/uber-reviews-text-analysis-11613675046d\nPlease upvote and subscribe!"}}