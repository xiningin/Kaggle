{"cell_type":{"f9c60b5a":"code","1921a16a":"code","f9f58a96":"code","40696a63":"code","cf210925":"code","699aecc6":"code","e229d4c7":"code","7a01f52e":"code","2cf8ec76":"code","e236b9dd":"code","975950e3":"code","e5a82146":"markdown","6f7d49f9":"markdown","cfa9f8ae":"markdown","e9bef366":"markdown","857aab4b":"markdown","5aeae568":"markdown"},"source":{"f9c60b5a":"import numpy as np\nimport pandas as pd\nimport os\nimport shutil                     # File_Operation Library\nimport cv2\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import GlobalMaxPooling2D, Dense, Flatten, GlobalAveragePooling2D, Dropout, Input, Concatenate, BatchNormalization\nfrom tensorflow.keras.regularizers import l1_l2\n\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.applications import InceptionV3","1921a16a":"train_df = pd.read_csv(\"..\/input\/dog-breeds\/labels.csv\")\ntrain_df['id'] = train_df['id']+'.jpg'\nprint(train_df)\nprint(\"\\nNumber of breeds: \",len(pd.unique(train_df['breed'])))","f9f58a96":"train_datagen = ImageDataGenerator(rescale = 1.\/255, \n                                   horizontal_flip = True,\n                                   zoom_range=0.2,\n                                   brightness_range=[0.6,1.4],\n                                   validation_split = 0.2)\n\ntrain_generator = train_datagen.flow_from_dataframe(train_df,\n                                                    directory='..\/input\/dog-breeds\/train\/',\n                                                    x_col='id',\n                                                    y_col='breed',\n                                                    target_size = (210, 210), \n                                                    class_mode = 'categorical',\n                                                    batch_size = 280,\n                                                    shuffle = True,\n                                                    subset = 'training')\n\nval_generator = train_datagen.flow_from_dataframe(train_df,\n                                                  directory='..\/input\/dog-breeds\/train\/',\n                                                  x_col='id',\n                                                  y_col='breed',\n                                                  target_size = (210, 210),\n                                                  class_mode = 'categorical',\n                                                  batch_size = 280,\n                                                  shuffle = True,\n                                                  subset = 'validation')","40696a63":"a_dict = train_generator.class_indices\nreversed_dict = {value : key for (key, value) in a_dict.items()}","cf210925":"inputs = Input((210, 210, 3))\npretrained_model= InceptionV3(include_top= False)\nx = pretrained_model(inputs)\noutput1 = GlobalMaxPooling2D()(x)\noutput2 = GlobalAveragePooling2D()(x)\noutput3 = Flatten()(x)\n\noutputs = Concatenate(axis=-1)([output1, output2, output3])\noutputs = Dropout(0.5)(outputs)\noutputs = BatchNormalization()(outputs)\noutput = Dense(120, activation= 'softmax', kernel_regularizer= 'l1_l2', bias_regularizer='l1_l2')(outputs)\n\nmodel = Model(inputs, output)","699aecc6":"from keras.callbacks import ModelCheckpoint, EarlyStopping, Callback\n\n\nbest_model = ModelCheckpoint(\"model\", monitor='val_accuracy', mode='max',verbose=1, save_best_only=True)\n\nearlystop = EarlyStopping(monitor = 'val_accuracy',\n                          patience = 5,\n                          mode = 'auto',\n                          verbose = 1,\n                          restore_best_weights = True)\n\nacc_thresh = 0.975\n\nclass myCallback(Callback): \n    def on_epoch_end(self, epoch, logs={}): \n        if(logs.get('accuracy') > acc_thresh):   \n          print(\"\\nWe have reached %2.2f%% accuracy, so we will stopping training.\" %(acc_thresh*100))   \n          self.model.stop_training = True\n\ncallbacks = [myCallback(), best_model, earlystop]","e229d4c7":"model.compile(optimizer='Adam', loss= 'categorical_crossentropy', metrics= ['accuracy'])\nhistory = model.fit_generator(train_generator,\n                              epochs = 50,\n                              steps_per_epoch = len(train_generator),\n                              validation_data = val_generator,\n                              validation_steps = len(val_generator),\n                              callbacks = callbacks,\n                              verbose= 1)","7a01f52e":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='best')\nplt.show()","2cf8ec76":"def predict(path):\n    img = cv2.imread(str(path))\n    img = cv2.resize(img, (210,210))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    img = np.reshape(img,(1,210,210,3))\n    return model.predict(img)","e236b9dd":"test_df = pd.read_csv('..\/input\/dog-breeds\/sample_submission.csv')\n\nfor i,f in enumerate(test_df.values):\n    prediction = predict('..\/input\/dog-breeds\/test\/'+ f[0] +'.jpg')\n    test_df.loc[i,1:] =  prediction[0]\n    \ntest_df.to_csv('submission.csv')","975950e3":"shutil.make_archive('model','zip','\/kaggle\/working\/model')","e5a82146":"## Importing Libraries","6f7d49f9":"## Training","cfa9f8ae":"## Prediction","e9bef366":"## Model","857aab4b":"## Dataset","5aeae568":"## Plotting"}}