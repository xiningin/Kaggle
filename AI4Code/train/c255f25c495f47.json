{"cell_type":{"9188ac68":"code","2b1c6157":"code","f5a4cabc":"code","8162bc3c":"code","db31e7c2":"code","10bec6ef":"code","cedb149d":"code","67b48940":"code","4f91551f":"code","e8ea4c8c":"code","7ebf0a3d":"code","bae36850":"code","0d1354ae":"code","e6874c51":"code","a8dead48":"code","5ff0aaf0":"code","eae890ff":"code","5f71e037":"code","59486c3c":"code","31e7d653":"code","bcb91bf1":"code","5e56f228":"code","c6533eca":"code","a90a1b43":"code","5370c2e3":"code","02c253c9":"code","8d4ad860":"code","8c8eece3":"code","845e51de":"code","0edafc0b":"code","43f0ebe6":"code","f8020696":"code","cf9cf7fb":"code","5a02e177":"code","793ade1e":"code","36f35b84":"markdown","c3432ca6":"markdown","a31f5c39":"markdown","0c805693":"markdown","00f3db7a":"markdown","708f92d7":"markdown","820a4691":"markdown"},"source":{"9188ac68":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom PIL import Image\nfrom glob import glob\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b1c6157":"!pip install keras","f5a4cabc":"def plotImages(artist,directory):\n    print(artist)\n    multipleImages = glob(directory)\n    plt.rcParams['figure.figsize'] = (15, 15)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    i_ = 0\n    for l in multipleImages[:25]:\n        im = cv2.imread(l)\n        im = cv2.resize(im, (128, 128)) \n        plt.subplot(5, 5, i_+1) #.set_title(l)\n        plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n        i_ += 1\n        \n        \nplotImages(\"Ricky Drawing in Gray Scale\",\"..\/input\/gorickyourself\/Ricks\/**\")","8162bc3c":"from torch.utils.data import DataLoader\nfrom torchvision.datasets import ImageFolder\nimport torchvision.transforms as tt\nimport torch\nimport torch.nn as nn\nimport cv2\nfrom tqdm.notebook import tqdm\nimport torch.nn.functional as F\nfrom torchvision.utils import save_image\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\n%matplotlib inline","db31e7c2":"dir = '..\/input\/gorickyourself'\nprint(os.listdir(dir))","10bec6ef":"##printing first 20 image names\nprint(os.listdir(dir+'\/Ricks')[:20])","cedb149d":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\nimage_size = 64\nbatch_size = 128\nstats = (0.5, 0.5, 0.5), (0.5, 0.5, 0.5)\n\ntrain_ds = ImageFolder(dir, transform=tt.Compose([ tt.Resize(image_size),\n                                                        tt.CenterCrop(image_size),\n                                                        tt.ToTensor(),\n                                                        tt.Normalize(*stats)]))\n\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=3, pin_memory=True)","67b48940":"def denorm(img_tensors):\n    return img_tensors * stats[1][0] + stats[0][0]","4f91551f":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\ndef show_images(images, nmax=64):\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.set_xticks([]); ax.set_yticks([])\n    ax.imshow(make_grid(denorm(images.detach()[:nmax]), nrow=8).permute(1, 2, 0))\n\ndef show_batch(dl, nmax=64):\n    for images, _ in dl:\n        show_images(images, nmax)\n        break","e8ea4c8c":"show_batch(train_dl)","7ebf0a3d":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\ndef is_cuda_available():\n    if torch.cuda.is_available():\n        print(\"CUDA available. Training on GPU!\")\n        return torch.device('cuda')\n    else:\n        print(\"CUDA not available. Training on CPU!\")\n        return torch.device('cpu')","bae36850":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","0d1354ae":"is_cuda_available()","e6874c51":"device=is_cuda_available()\ntrain_dl = DeviceDataLoader(train_dl, device)","a8dead48":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\n#basic cnn with convolutional layers and leaky relu as activation fn\ndiscriminator = nn.Sequential(\n    # in: 3 x 64 x 64\n\n    nn.Conv2d(3, 64, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(64),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 64 x 32 x 32\n\n    nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(128),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 128 x 16 x 16\n\n    nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(256),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 256 x 8 x 8\n\n    nn.Conv2d(256, 512, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(512),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 512 x 4 x 4\n\n    nn.Conv2d(512, 1, kernel_size=4, stride=1, padding=0, bias=False),\n    # out: 1 x 1 x 1\n\n    nn.Flatten(),\n    nn.Sigmoid())","5ff0aaf0":"discriminator = to_device(discriminator, device)","eae890ff":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\nlatent_size = 128\ngenerator = nn.Sequential(\n    # in: latent_size x 1 x 1\n\n    nn.ConvTranspose2d(latent_size, 512, kernel_size=4, stride=1, padding=0, bias=False),\n    nn.BatchNorm2d(512),\n    nn.ReLU(True),\n    # out: 512 x 4 x 4\n\n    nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(256),\n    nn.ReLU(True),\n    # out: 256 x 8 x 8\n\n    nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(128),\n    nn.ReLU(True),\n    # out: 128 x 16 x 16\n\n    nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(64),\n    nn.ReLU(True),\n    # out: 64 x 32 x 32\n\n    nn.ConvTranspose2d(64, 3, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.Tanh()\n    # out: 3 x 64 x 64\n)","5f71e037":"xb = torch.randn(batch_size, latent_size, 1, 1) # random latent tensors\nfake_images = generator(xb)\nprint(fake_images.shape)\nshow_images(fake_images)","59486c3c":"generator = to_device(generator, device)","31e7d653":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\ndef train_discriminator(real_images, opt_d):\n    # Clear discriminator gradients\n    opt_d.zero_grad()\n\n    # Pass real images through discriminator\n    real_preds = discriminator(real_images)\n    real_targets = torch.ones(real_images.size(0), 1, device=device)\n    real_loss = F.binary_cross_entropy(real_preds, real_targets)\n    real_score = torch.mean(real_preds).item()\n    \n    # Generate fake images\n    latent = torch.randn(batch_size, latent_size, 1, 1, device=device)\n    fake_images = generator(latent)\n\n    # Pass fake images through discriminator\n    fake_targets = torch.zeros(fake_images.size(0), 1, device=device)\n    fake_preds = discriminator(fake_images)\n    fake_loss = F.binary_cross_entropy(fake_preds, fake_targets)\n    fake_score = torch.mean(fake_preds).item()\n\n    # Update discriminator weights\n    loss = real_loss + fake_loss\n    loss.backward()\n    opt_d.step()\n    return loss.item(), real_score, fake_score","bcb91bf1":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\ndef train_generator(opt_g):\n    # Clear generator gradients\n    opt_g.zero_grad()\n    \n    # Generate fake images\n    latent = torch.randn(batch_size, latent_size, 1, 1, device=device)\n    fake_images = generator(latent)\n    \n    # Try to fool the discriminator\n    preds = discriminator(fake_images)\n    targets = torch.ones(batch_size, 1, device=device)\n    loss = F.binary_cross_entropy(preds, targets)\n    \n    # Update generator weights\n    loss.backward()\n    opt_g.step()\n    \n    return loss.item()","5e56f228":"sample_dir = 'generated'\nos.makedirs(sample_dir, exist_ok=True)","c6533eca":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\ndef save_samples(index, latent_tensors, show=True):\n    fake_images = generator(latent_tensors)\n    fake_fname = 'generated-images-{0:0=4d}.png'.format(index)\n    save_image(denorm(fake_images), os.path.join(sample_dir, fake_fname), nrow=8)\n    print('Saving', fake_fname)\n    if show:\n        fig, ax = plt.subplots(figsize=(8, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(fake_images.cpu().detach(), nrow=8).permute(1, 2, 0))","a90a1b43":"fixed_latent = torch.randn(64, latent_size, 1, 1, device=device)","5370c2e3":"save_samples(0, fixed_latent)","02c253c9":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\ndef fit(epochs, lr, start_idx=1):\n    torch.cuda.empty_cache()\n    \n    # Losses & scores\n    losses_g = []\n    losses_d = []\n    real_scores = []\n    fake_scores = []\n    \n    # Create optimizers\n    opt_d = torch.optim.Adam(discriminator.parameters(), lr=lr, betas=(0.5, 0.999))\n    opt_g = torch.optim.Adam(generator.parameters(), lr=lr, betas=(0.5, 0.999))\n    \n    for epoch in range(epochs):\n        for real_images, _ in tqdm(train_dl):\n            # Train discriminator\n            loss_d, real_score, fake_score = train_discriminator(real_images, opt_d)\n            # Train generator\n            loss_g = train_generator(opt_g)\n            \n        # Record losses & scores\n        losses_g.append(loss_g)\n        losses_d.append(loss_d)\n        real_scores.append(real_score)\n        fake_scores.append(fake_score)\n        \n        # Log losses & scores (last batch)\n        print(\"Epoch [{}\/{}], loss_g: {:.4f}, loss_d: {:.4f}, real_score: {:.4f}, fake_score: {:.4f}\".format(\n            epoch+1, epochs, loss_g, loss_d, real_score, fake_score))\n    \n        # Save generated images\n        save_samples(epoch+start_idx, fixed_latent, show=False)\n    \n    return losses_g, losses_d, real_scores, fake_scores","8d4ad860":"lr = 0.0003\nepochs = 2 #Original code was 60 then my Notebook stopped.","8c8eece3":"history=fit(epochs,lr)","845e51de":"losses_g, losses_d, real_scores, fake_scores = history","0edafc0b":"from IPython.display import Image","43f0ebe6":"#Image('.\/generated\/rick (1006).png')  Original it was something like that\n\nImage('\/kaggle\/input\/gorickyourself\/Ricks\/rick (1006).png')","f8020696":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\nvid_fname = 'gans_training.avi'\n\nfiles = [os.path.join(sample_dir, f) for f in os.listdir(sample_dir) if 'generated' in f]\nfiles.sort()\n\nout = cv2.VideoWriter(vid_fname,cv2.VideoWriter_fourcc(*'MP4V'), 1, (530,530))\n[out.write(cv2.imread(fname)) for fname in files]\nout.release()","cf9cf7fb":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\nplt.plot(losses_d, '-')\nplt.plot(losses_g, '-')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['Discriminator', 'Generator'])\nplt.title('Losses');","5a02e177":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/gans-for-cats\/notebook\n\nplt.plot(real_scores, '-')\nplt.plot(fake_scores, '-')\nplt.xlabel('epoch')\nplt.ylabel('score')\nplt.legend(['Real', 'Fake'])\nplt.title('Scores');","793ade1e":"save_samples(0, fixed_latent)","36f35b84":"#They don't seem the usual Ricky.","c3432ca6":"#Where are my Rickys???","a31f5c39":"#One Fake generated image.","0c805693":"#More than ten minutes for just one Epoch. More ","00f3db7a":"#Epochs always take a time that I don't like to lose. I should had written above epochs 10.\n\nLet's try only 2:D","708f92d7":"![](https:\/\/media3.giphy.com\/media\/jsN192JGdyWvS1gqTb\/200w.webp?cid=ecf05e478z4g5kypiwujkhjv4ekydbz70g8rbcopp5tw78lh&rid=200w.webp&ct=g)https:\/\/giphy.com\/search\/picle-rick","820a4691":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRF2pxpSBScDcSxUvuU0LYetEljCuIDy5XQTtjQOpPLeuVCKxFyV0BREAti2u5JNxRZO0c&usqp=CAU)reddit.com"}}