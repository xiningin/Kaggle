{"cell_type":{"c9aeda5b":"code","66b2d789":"code","a83b85bc":"code","0d967def":"code","eda4a500":"code","e7fc4df6":"code","6fc70cad":"code","9ef9a0ba":"code","4c59d330":"code","98880298":"code","4733920e":"code","69e6d9e6":"code","79bb97f8":"code","17ebdb29":"code","3b9b2afd":"code","e0317d5d":"code","613d6b11":"code","4d26da0a":"code","7eb9be4a":"code","83f23a19":"code","4514ad23":"code","d81088ee":"code","6c4018e7":"code","8dd214a0":"code","5ee4d654":"code","de9fa26a":"code","7b552274":"code","8ec3658f":"code","93637c6c":"code","7cfe5896":"markdown","e338937a":"markdown","8cfde3f1":"markdown","d5f73af4":"markdown","bf27bd0c":"markdown","60da5744":"markdown","83a0e275":"markdown","09c85f03":"markdown","89a7f461":"markdown","973ac24a":"markdown"},"source":{"c9aeda5b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","66b2d789":"df = pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')\n# Number of missing values in each column of training data\nmissing_val_count_by_column = (df.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0], len(df))","a83b85bc":"cols_with_missing = ['agent', 'company', 'country']\n\n# Drop columns in training and validation data\nreduced_df = df.drop(cols_with_missing, axis=1)\nreduced_df.describe()","0d967def":"d = {'January':1, 'February':2, 'March':3, 'April':4, 'May':5, 'June':6, 'July':7, 'August':8, 'September':9, 'October':10, 'November':11, 'December':12}\nreduced_df.arrival_date_month = reduced_df.arrival_date_month.map(d)","eda4a500":"assigned_df = reduced_df.assign(arrival_date = reduced_df['arrival_date_year'].map(str) + '-' + reduced_df['arrival_date_month'].map(str) + '-' + reduced_df['arrival_date_day_of_month'].map(str)\n                 ,length_of_stay = reduced_df.stays_in_weekend_nights+reduced_df.stays_in_week_nights )","e7fc4df6":"assigned_df['reservation_status_date'] = pd.to_datetime(assigned_df['reservation_status_date'])\nassigned_df['arrival_date'] = pd.to_datetime(assigned_df['arrival_date'])\ntemp = assigned_df['length_of_stay'].apply(np.ceil).apply(lambda x: pd.Timedelta(x, unit='D'))\nassigned_df['leaving_date'] = assigned_df['arrival_date'] + temp\n","6fc70cad":"# dropping ALL duplicte values \nassigned_df.drop_duplicates(subset =['hotel', 'is_canceled', 'lead_time', 'arrival_date_year',\n       'arrival_date_month', 'arrival_date_week_number',\n       'arrival_date_day_of_month', 'stays_in_weekend_nights',\n       'stays_in_week_nights', 'babies', 'meal', 'market_segment',\n       'distribution_channel', 'is_repeated_guest', 'previous_cancellations',\n       'previous_bookings_not_canceled', 'reserved_room_type',\n       'assigned_room_type', 'booking_changes', 'deposit_type',\n       'days_in_waiting_list', 'customer_type', 'adr',\n       'required_car_parking_spaces', 'total_of_special_requests',\n       'reservation_status', 'reservation_status_date', 'arrival_date', 'length_of_stay', 'leaving_date'], \n                     keep = False, inplace = True) \n","9ef9a0ba":"assigned_df['cus_id'] = pd.factorize(assigned_df.apply(tuple, axis=1))[0] + 1\nassigned_df.shape","4c59d330":"stayed_dt = pd.concat([pd.Series(r.cus_id, pd.date_range(r.arrival_date, r.leaving_date, freq='D'))\n                      for r in assigned_df.itertuples()]).reset_index()\nstayed_dt.columns = ['stay_date', 'cus_id']\nprint(stayed_dt)","98880298":"stayed_df = pd.merge(stayed_dt, assigned_df[['hotel', 'cus_id', 'assigned_room_type', 'is_canceled']], left_on=['cus_id'], right_on=['cus_id'], how='left')\nstayed_df.tail(10)","4733920e":"city_max = stayed_df[stayed_df['is_canceled']==0][stayed_df['hotel']=='City Hotel'].groupby(['stay_date','hotel','assigned_room_type']).count().max(level=2).sum()['cus_id']\nresort_max = stayed_df[stayed_df['is_canceled']==0][stayed_df['hotel']=='Resort Hotel'].groupby(['stay_date','hotel','assigned_room_type']).count().max(level=2).sum()['cus_id']\ncity_max_by_day = stayed_df[stayed_df['is_canceled']==0][stayed_df['hotel']=='City Hotel'].groupby(['stay_date']).count().max()['cus_id']\nresort_max_by_day = stayed_df[stayed_df['is_canceled']==0][stayed_df['hotel']=='Resort Hotel'].groupby(['stay_date']).count().max()['cus_id']\nprint(\"City Hotel's number of rooms by room type\", stayed_df[stayed_df['is_canceled']==0][stayed_df['hotel']=='City Hotel'].groupby(['stay_date','hotel','assigned_room_type']).count().max(level=2)['cus_id'])\nprint(\"City Hotel's total number of rooms\", city_max)\nprint(\"Resort Hotel's number of rooms by room type\",stayed_df[stayed_df['is_canceled']==0][stayed_df['hotel']=='Resort Hotel'].groupby(['stay_date','hotel','assigned_room_type']).count().max(level=2)['cus_id'])\nprint(\"Resort Hotel's total number of rooms\", resort_max)\nprint(\"City Hotel's maximum number of rooms without consideration of room type : \", city_max_by_day)\nprint(\"Resort Hotel's maximum number of rooms without consideration of room type : \",\n      resort_max_by_day)","69e6d9e6":"import matplotlib.pyplot as plt\npd.plotting.register_matplotlib_converters()\nfig, ax = plt.subplots(figsize=(15,7))\nstayed_df.groupby(['stay_date','hotel']).count()['cus_id'].unstack().plot(ax=ax)","79bb97f8":"fig, ax = plt.subplots(2, figsize=(15,7))\nstayed_df[stayed_df['hotel']=='City Hotel'].groupby(['stay_date','is_canceled']).count()['cus_id'].unstack().plot(ax=ax[0])\nax[0].set_title('City Hotel Cancellation Y\/N')\nstayed_df[stayed_df['hotel']=='Resort Hotel'].groupby(['stay_date','is_canceled']).count()['cus_id'].unstack().plot(ax=ax[1])\nax[1].set_title('Resort Hotel Cancellation Y\/N')","17ebdb29":"from fbprophet import Prophet\n\ncity_booking = pd.DataFrame(stayed_df[stayed_df['hotel']=='City Hotel'].groupby(['stay_date']).count()['is_canceled'].reset_index())\ncity_booking.columns = ['ds', 'y']\n\nresort_booking = pd.DataFrame(stayed_df[stayed_df['hotel']=='Resort Hotel'].groupby(['stay_date']).count()['is_canceled'].reset_index())\nresort_booking.columns = ['ds', 'y']","3b9b2afd":"c = Prophet()\nc.fit(city_booking)\nfuture_c = c.make_future_dataframe(periods=365, freq='D')\nforecast_c = c.predict(future_c)\nforecast_c","e0317d5d":"r = Prophet()\nr.fit(resort_booking)\nfuture_r = r.make_future_dataframe(periods=365, freq='D')\nforecast_r = r.predict(future_r)\nforecast_r","613d6b11":"import plotly.offline as py\nimport plotly.graph_objs as go\npy.iplot([\n    go.Scatter(x=city_booking['ds'], y=city_booking['y'], name='y'),\n    go.Scatter(x=forecast_c['ds'], y=forecast_c['yhat'], name='yhat'),\n    go.Scatter(x=forecast_c['ds'], y=forecast_c['yhat_upper'], fill='tonexty', mode='none', name='upper'),\n    go.Scatter(x=forecast_c['ds'], y=forecast_c['yhat_lower'], fill='tonexty', mode='none', name='lower'),\n    go.Scatter(x=forecast_c['ds'], y=forecast_c['trend'], name='Trend')\n])\n\npy.iplot([\n    go.Scatter(x=resort_booking['ds'], y=resort_booking['y'], name='y'),\n    go.Scatter(x=forecast_r['ds'], y=forecast_r['yhat'], name='yhat'),\n    go.Scatter(x=forecast_r['ds'], y=forecast_r['yhat_upper'], fill='tonexty', mode='none', name='upper'),\n    go.Scatter(x=forecast_r['ds'], y=forecast_r['yhat_lower'], fill='tonexty', mode='none', name='lower'),\n    go.Scatter(x=forecast_r['ds'], y=forecast_r['trend'], name='Trend')\n])\n","4d26da0a":"print(len(city_booking), len(resort_booking))","7eb9be4a":"# Calculate root mean squared error.\nprint('RMSE for City: %f' % np.sqrt(np.mean((forecast_c.loc[:804, 'yhat']-city_booking['y'])**2)) )\nprint('RMSE for Resort: %f' % np.sqrt(np.mean((forecast_r.loc[:807, 'yhat']-city_booking['y'])**2)) )","83f23a19":"city_booking_c = pd.DataFrame(stayed_df[stayed_df['hotel']=='City Hotel'][stayed_df['is_canceled']==0].groupby(['stay_date']).count()['cus_id'].reset_index())\ncity_booking_c.columns = ['ds', 'y']\n\nresort_booking_c = pd.DataFrame(stayed_df[stayed_df['hotel']=='Resort Hotel'][stayed_df['is_canceled']==0].groupby(['stay_date']).count()['cus_id'].reset_index())\nresort_booking_c.columns = ['ds', 'y']","4514ad23":"c_c = Prophet()\nc_c.fit(city_booking_c)\nfuture_city_cc = c_c.make_future_dataframe(periods=365, freq='D')\nforecast_city_cc = c_c.predict(future_city_cc)\nforecast_city_cc","d81088ee":"r_c = Prophet()\nr_c.fit(resort_booking_c)\nfuture_resort_cc = r_c.make_future_dataframe(periods=365, freq='D')\nforecast_resort_cc = r_c.predict(future_resort_cc)\nforecast_resort_cc","6c4018e7":"py.iplot([\n    go.Scatter(x=city_booking_c['ds'], y=city_booking_c['y'], name='y'),\n    go.Scatter(x=forecast_city_cc['ds'], y=forecast_city_cc['yhat'], name='yhat'),\n    go.Scatter(x=forecast_city_cc['ds'], y=forecast_city_cc['yhat_upper'], fill='tonexty', mode='none', name='upper'),\n    go.Scatter(x=forecast_city_cc['ds'], y=forecast_city_cc['yhat_lower'], fill='tonexty', mode='none', name='lower'),\n    go.Scatter(x=forecast_city_cc['ds'], y=forecast_city_cc['trend'], name='Trend')\n])\n\npy.iplot([\n    go.Scatter(x=resort_booking_c['ds'], y=resort_booking_c['y'], name='y'),\n    go.Scatter(x=forecast_resort_cc['ds'], y=forecast_resort_cc['yhat'], name='yhat'),\n    go.Scatter(x=forecast_resort_cc['ds'], y=forecast_resort_cc['yhat_upper'], fill='tonexty', mode='none', name='upper'),\n    go.Scatter(x=forecast_resort_cc['ds'], y=forecast_resort_cc['yhat_lower'], fill='tonexty', mode='none', name='lower'),\n    go.Scatter(x=forecast_resort_cc['ds'], y=forecast_resort_cc['trend'], name='Trend')\n])\n","8dd214a0":"print(len(city_booking_c), len(resort_booking_c))","5ee4d654":"print('RMSE for City: %f' % np.sqrt(np.mean((forecast_city_cc.loc[:800, 'yhat']-city_booking_c['y'])**2)) )\nprint('RMSE for Resort: %f' % np.sqrt(np.mean((forecast_resort_cc.loc[:807, 'yhat']-city_booking_c['y'])**2)) )","de9fa26a":"difference_city = pd.merge(forecast_c, forecast_city_cc, left_on=['ds'], right_on=['ds'], how='left')\ndifference_resort = pd.merge(forecast_r, forecast_resort_cc, left_on=['ds'], right_on=['ds'], how='left')\ncity_exp = difference_city[(difference_city['ds']>'2017-09-12') & (difference_city['ds']<='2018-09-11')]\nresort_exp = difference_resort[(difference_resort['ds']>'2017-09-12') & (difference_city['ds']<='2018-09-11')]\ncity_exp = city_exp.assign(exp = city_exp.yhat_x - city_exp.yhat_y\n                 ,min_exp = city_exp.yhat_lower_x - city_exp.yhat_upper_y\n                 ,max_exp = city_exp.yhat_upper_x - city_exp.yhat_lower_y)\ncity_exp['last_min_booking_yn1']=city_exp['max_exp'].apply(lambda x: 0 if x < city_max else 1)\ncity_exp['last_min_booking_yn2']=city_exp['max_exp'].apply(lambda x: 0 if x < city_max_by_day else 1)\nresort_exp = resort_exp.assign(exp = resort_exp.yhat_x - resort_exp.yhat_y\n                 ,min_exp = resort_exp.yhat_lower_x - resort_exp.yhat_upper_y\n                 ,max_exp = resort_exp.yhat_upper_x - resort_exp.yhat_lower_y)\nresort_exp['last_min_booking_yn1']=city_exp['max_exp'].apply(lambda x: 0 if x < resort_max else 1)\nresort_exp['last_min_booking_yn2']=city_exp['max_exp'].apply(lambda x: 0 if x < resort_max_by_day else 1)","7b552274":"city_exp.head(100)","8ec3658f":"py.iplot([\n    go.Scatter(x=city_exp['ds'], y=city_exp['exp'], name='yhat'),\n    go.Scatter(x=city_exp['ds'], y=city_exp['min_exp'], fill='tonexty', mode='none', name='upper'),\n    go.Scatter(x=city_exp['ds'], y=city_exp['max_exp'], fill='tonexty', mode='none', name='lower'),\n    go.Scatter(x=city_exp['ds'],   y=[city_max]*len(city_exp), mode='lines', name = 'total no. of rooms (room type-considered)'),\n    go.Scatter(x=city_exp['ds'],   y=[city_max_by_day]*len(city_exp), mode='lines', name = 'total no. of rooms (room type-not considered)')\n])\n\npy.iplot([\n    go.Scatter(x=resort_exp['ds'], y=resort_exp['exp'], name='yhat'),\n    go.Scatter(x=resort_exp['ds'], y=resort_exp['min_exp'], fill='tonexty', mode='none', name='upper'),\n    go.Scatter(x=resort_exp['ds'], y=resort_exp['max_exp'], fill='tonexty', mode='none', name='lower'),\n    go.Scatter(x=resort_exp['ds'],   y=[resort_max]*len(resort_exp), mode='lines', name = 'total no. of rooms (room type-considered)'),\n    go.Scatter(x=resort_exp['ds'],   y=[resort_max_by_day]*len(resort_exp), mode='lines', name = 'total no. of rooms (room type-not considered)')\n])\n","93637c6c":"final_result = pd.merge(city_exp[['ds', 'last_min_booking_yn2']], resort_exp[['ds', 'last_min_booking_yn2']], left_on=['ds'], right_on=['ds'], how='outer')\nfinal_result.columns =['date','City Hotel', 'Resort Hotel']\n# 0: Available for booking at the last minute 1: Not available for booking at the last minute\nfinal_result[final_result['Resort Hotel']==1]","7cfe5896":"## 3. The number of daily cancellation for each hotel","e338937a":"Please feel free to give me the feedback!","8cfde3f1":"I'd like to drop agent, company, and country columns as they have many missing values and do not give much additional value to predict the number of bookings for each day.","d5f73af4":"As we don't know the exact capacity of each hotel, we'd like to use two different estimates for each hotel's capacity: 1) historic maximum number of rooms occupied, 2) historic maximum number of each room type occupied ","bf27bd0c":"The number of booking for each date at each hotel shows there is a seasonality on weekends and weeks but no incremental\/decremental trend for each year.","60da5744":"Here we will model the number of booking that is not cancelled and then will tell whether it's beyond each hotel's capacity or not for each date.\n\n1. Estimating the hotel's capacity\n2. The number of daily booking for each hotel \n3. The number of daily cancellation for each hotel\n4. Availability of booking by comparing (hotel's capacity estimates) - (the number of maximum booking for each hotel - the number of minimum cancellation for each hotel)\n\n(I didn't fully understand the task how to check the each hotel's booking availability without other factors considered - e.g. number of guests, date of booking, date of arrival, etc.\nSo I would consider the minimum number of extra factor - date of arrival - for checking the possibility of booking at each hotel at the last minute of each day.)","83a0e275":"## 2. The number of daily booking for each hotel ","09c85f03":"If we use the total number of rooms (room type-not considered), then the check-ins are always below the capacity. Therefore we'd like to submit the result with the hotel capacity with room type not considered.","89a7f461":"## 4. Availability of booking by comparing (hotel's capacity estimates) - (the number of maximum booking for each hotel - the number of minimum cancellation for each hotel)","973ac24a":"## 1. Estimating the hotel's capacity"}}