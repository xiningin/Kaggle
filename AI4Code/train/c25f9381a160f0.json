{"cell_type":{"e364344d":"code","80566d97":"code","3e3e3692":"code","ccb2d3aa":"code","1762be9d":"code","8a401ef9":"code","55d974cd":"code","d25bcecc":"code","10147755":"code","8718d7d6":"code","c831999f":"code","2170dec2":"code","150d6a09":"code","239e8422":"code","112922fe":"code","cd69327e":"code","c876cf1b":"code","c12cba60":"code","dd5b1635":"code","a1945a09":"code","6b7684b5":"code","8fbebacf":"code","846c5556":"code","6aee9d7d":"code","15d2ead0":"code","67f7841d":"code","ac072867":"code","3d700a1c":"code","9c2bf58d":"code","3ac3be3d":"code","a6c27dab":"code","c8e18ecb":"code","9af5baa9":"code","39c1f149":"code","1e5a0854":"code","9ed90b97":"code","8ac5562b":"code","1d29b95f":"code","9334981d":"code","d5e5d4b4":"markdown","bbe0e2e8":"markdown","1ed9f2d4":"markdown","e2616c9b":"markdown","4cc82985":"markdown","1910ab12":"markdown","7f5d75bf":"markdown","286ee3c2":"markdown","4e609c70":"markdown","f026e5bf":"markdown","b43821e7":"markdown","1a892d47":"markdown","adf78a7a":"markdown","7574bb0e":"markdown","0b29666d":"markdown","931f5a57":"markdown","8036f94c":"markdown","11b073cb":"markdown","f744a14f":"markdown","cbe06073":"markdown","f605608d":"markdown","895547ca":"markdown","6176e52c":"markdown","a9771f75":"markdown","14a570c1":"markdown","7ffe3425":"markdown","69a4fe12":"markdown","67b69350":"markdown"},"source":{"e364344d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nimport matplotlib.pyplot as plt\nimport missingno as msno\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, StackingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom collections import Counter\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.manifold import TSNE\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","80566d97":"train_data = pd.read_csv(\"\/kaggle\/input\/mymusicalprefrences\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/mymusicalprefrences\/test.csv\")\ncm = ['#BDBAB4', '#FF6766', '#97CE68', '#6BCBCA', '#FF9900']","3e3e3692":"df = pd.concat([train_data,test_data], axis=0, ignore_index = True)","ccb2d3aa":"temp =[]\nfor i in df.columns:\n    temp.append(i)\ntemp","1762be9d":"df = df.rename(columns = {'Vocal ':'Vocal'})\ntemp =[]\nfor i in df.columns:\n    temp.append(i)","8a401ef9":"msno.bar(df, color=cm)","55d974cd":"df.loc[df['Artists'].isna()==True]","d25bcecc":"df = df.drop([661])\ndf.loc[df['Artists'].isna()==True]\ndf = df.reset_index(drop=True)","10147755":"df.loc[df['Album'].isna()==True]","8718d7d6":"df[\"Album\"].replace(np.nan, \"None\", inplace=True)\ndf.loc[df['Album'].isna()==True]","c831999f":"msno.bar(df, color = cm)","2170dec2":"df.loc[df['Vocal'].isna()==True]","150d6a09":"df[\"Vocal\"].replace(np.nan, \"None\", inplace=True)","239e8422":"msno.bar(df, color = cm)","112922fe":"df[\"Country\"].replace(np.nan, \"None\", inplace=True)","cd69327e":"msno.bar(df, color=cm)","c876cf1b":"df.loc[df['Labels'].isna()]","c12cba60":"df[\"Labels\"].replace(np.nan, 'None', inplace=True)\ndf.loc[df['Labels'].isna()]","dd5b1635":"msno.bar(df, color=cm)","a1945a09":"val_mask = ~df.Category.isna()","6b7684b5":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0442\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 \"|\" \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0438\u043a\u0430\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043d\u0443\u043b\u0435\u0439 \u0438 \u0435\u0434\u0438\u043d\u0438\u0447\u0435\u043a. \n#\u0412 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0432\u0435\u0440\u0441\u0438\u044f\u0445 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u043e\u0432 \u0443 \u043c\u0435\u043d\u044f \u0431\u044b\u043b\u0430 \u0441\u0432\u043e\u044f \u0442\u0430\u043a\u0430\u044f, \u043d\u043e \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u041a\u0430\u043a \u0443\u0432\u0438\u0434\u0435\u043b \u044d\u0442\u0443, \u0440\u0435\u0448\u0438\u043b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f.\ndef split_to_onehot(df, col):\n    \"\"\"\n    This method converts features separated by '|' into one-hot vectors.\n    Additionally it drops unnecessary values, which present only in\n    test set \/ train set or have only one value.\n    \"\"\"\n    # Getting all unique ganres values.\n    unique = []\n    for i in df.index:\n        unique.extend(df.loc[i, col].split(\"|\"))\n    if \"\" in unique:\n        unique.remove(\"\")\n    unique = list(set(unique))\n\n    # Putting values into binary form\n    onehot = df.loc[:, [\"Category\"]]\n    onehot[unique] = np.zeros((len(unique),), dtype=np.int8)\n    for i in df.index:\n        g = set(df.loc[i, col].split(\"|\"))\n        for j in g:\n            if j != \"\":\n                onehot.loc[i, j] = 1\n\n    # Dropping unnecessary values\n    _a = onehot.groupby(\"Category\").sum()\n    only_one = list(_a.sum()[_a.sum() == 1].index)\n    only_train = list(_a.loc[\"none\"][_a.loc[\"none\"] == 0].index)\n    only_test = list(_a.loc[[\"like\", 'dislike']].sum()[_a.loc[[\"like\", 'dislike']].sum() == 0].index)\n    _a = set(only_one + only_train + only_test)\n    onehot = onehot.drop(_a, axis=1)\n\n    return onehot\n\n\n#\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0441\u043d\u0438\u0436\u0430\u044f \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c tsne\ndef onehot_to_tsne2(df, title):\n    \"\"\"\n    This method converts one-hot representation into two tsne values.\n    Such operation is needed to shrink the dimentionality of the dataset\n    \"\"\"\n    onehot = df.drop(\"Category\", axis=1)\n    embedding = TSNE(n_components=2, init=\"pca\")\n    embedded = embedding.fit_transform(onehot)\n    embedded = pd.DataFrame(embedded, columns=[f\"{title}_tsne1\", f\"{title}_tsne2\"])\n    return embedded","8fbebacf":"df[\"Category\"] = df[\"Category\"].fillna(\"none\").replace({0:\"dislike\",1:\"like\"}) ","846c5556":"df[\"Year_category\"] = 0\nfor i in df.index:\n    if df['Release_year'][i] in range(2020, 2022):\n        df.loc[i, \"Year_category\"] = 2020\n    if df['Release_year'][i] in range(2010, 2020):\n        df.loc[i, \"Year_category\"] = 2010\n    if df['Release_year'][i] in range(2000, 2010):\n        df.loc[i, \"Year_category\"] = 2000\n    if df['Release_year'][i] in range(1990, 2000):\n        df.loc[i, \"Year_category\"] = 1990\n    if df['Release_year'][i] in range(1990):\n        df.loc[i, \"Year_category\"] = 1980","6aee9d7d":"genres_onehot = split_to_onehot(df, \"Artists_Genres\")\ngenres_embedded = onehot_to_tsne2(genres_onehot, \"Genres\")\ndf = pd.concat([df,genres_embedded], axis=1)\ndf = df.drop(\"Artists_Genres\", axis=1)","15d2ead0":"df[['Energy', 'Happiness', 'Dancebility','BPM']] = df[['Energy', 'Happiness', 'Dancebility','BPM']].fillna(0)\ndf[['Energy%', 'Happiness%', 'Dancebility%']] = df[['Energy', 'Happiness', 'Dancebility']].apply(lambda x: x\/sum(x), axis=1)\ndf[['Energy%', 'Happiness%', 'Dancebility%']] = df[['Energy%', 'Happiness%', 'Dancebility%']].fillna(0)","67f7841d":"labels_onehot = split_to_onehot(df, \"Labels\")\nlabels_embedded = onehot_to_tsne2(labels_onehot, \"Labels\")\ndf = pd.concat([df,labels_embedded[[\"Labels_tsne1\",\"Labels_tsne2\"]]], axis=1)\ndf = df.drop(\"Labels\", axis=1)","ac072867":"df.Artists = df.Artists.fillna(\"NA\")\nallstars = []\nfor i in df.index:\n    allstars.extend(df.loc[i, \"Artists\"].split(\"|\"))\n# We will put some threshold, not to put some rare artists into one-hot vector.\nthreshold = 3\nothers = Counter(allstars)\nothers = [k for k in others if others[k]<=threshold]\nin_train, in_test = [], []\nfor i in df.loc[val_mask].index:\n    in_train.extend(df.loc[i, \"Artists\"].split(\"|\"))\nfor i in df.loc[~val_mask].index:\n    in_test.extend(df.loc[i, \"Artists\"].split(\"|\"))\n\nonly_test = set(in_test) - set(in_train)\nonly_train = set(in_train) - set(in_test)\nallstars = list(set(allstars) - set(others) - only_test - only_train)\nothers = set(others) | only_test | only_train\n\nres = []\ndef prune(x):\n    vector = np.zeros(len(allstars)+1) #for others\n    x = [i for i in x.split(\"|\")]\n    for i in range(len(allstars)):\n        vector[i]=1 if allstars[i] in x else 0\n    if len(x)>sum(vector):\n        vector[-1]=1\n    res.append(vector)\n\ndf[\"Artists\"].apply(prune)\nonehot_artists = pd.DataFrame(res, columns = allstars+[\"Others\"], index=df.index)\n\ndf[\"Other_Artists\"] = onehot_artists[\"Others\"]\nonehot_artists = onehot_artists.drop(\"Others\", axis=1)\nonehot_artists[\"Category\"] = df[\"Category\"]\n\nartists_embedded = onehot_to_tsne2(onehot_artists, \"Artists\")\n\ndf = pd.concat([df,artists_embedded[[\"Artists_tsne1\",\"Artists_tsne2\"]]], axis=1)\ndf = df.drop(\"Artists\", axis=1)","3d700a1c":"df[\"Version\"] = df[\"Version\"].fillna(\"NA\")\nversions = set(df[\"Version\"])\ndf[list(versions)] = OneHotEncoder().fit_transform(df[[\"Version\"]]).toarray()\ndf = df.drop([\"Version\",\"NA\"], axis=1)","9c2bf58d":"onehot = np.zeros((len(df),2))\nfor i in range(len(df)):\n    v = df.iloc[i][\"Vocal\"]\n    if v == 'F':\n        onehot[i] = [1,0]\n    elif v == 'M':\n        onehot[i] = [0,1]\n    elif v == 'F|M':\n        onehot[i] = [1,1]\ndf[[\"Female\",\"Male\"]] = onehot\ndf = df.drop(\"Vocal\",axis=1)\n","3ac3be3d":"artists_encoder = LabelEncoder()\ndf[\"Track\"] = artists_encoder.fit_transform(df[\"Track\"])","a6c27dab":"df[\"Country\"] = df[\"Country\"].fillna(\"NA\")\ncountry_onehot = split_to_onehot(df, \"Country\")\ncountry_onehot = country_onehot.drop(\"Category\", axis=1)\ndf = pd.concat([df,country_onehot], axis=1)\ndf = df.drop(\"Country\", axis=1)","c8e18ecb":"df[\"Album\"] = df[\"Album\"].fillna(\"NA\")\nalbum_onehot = split_to_onehot(df, \"Album\")\nalbum_embedded = onehot_to_tsne2(album_onehot, \"Album\")\ndf = pd.concat([df,album_embedded[[\"Album_tsne1\",\"Album_tsne2\"]]], axis=1)\ndf = df.drop(\"Album\", axis=1)","9af5baa9":"df[\"Album_type\"] = df[\"Album_type\"].fillna(\"NA\")\nversions = set(df[\"Album_type\"])\ndf[list(versions)] = OneHotEncoder().fit_transform(df[[\"Album_type\"]]).toarray()\ndf = df.drop([\"Album_type\",\"NA\"], axis=1)","39c1f149":"df[\"isMajor\"], df[\"Key\"] = df[\"Key\"].apply(lambda x: x.split(\" \")[1]), df[\"Key\"].apply(lambda x: x.split(\" \")[0])\ndf.loc[:,\"Key\"] = df[\"Key\"].replace({\"D\u266d\": \"C#\", \"E\u266d\": \"D#\", \"G\u266d\": \"F#\", \"A\u266d\": \"G#\",\"B\u266d\":\"A#\"})\ndf.loc[:,\"isMajor\"] = (df[\"isMajor\"]==\"Major\").astype(int)\ndf[list(set(df[\"Key\"].values))] = OneHotEncoder().fit_transform(df[[\"Key\"]]).toarray()\ndf = df.drop(\"Key\", axis=1)","1e5a0854":"df.columns","9ed90b97":"df = df.drop([\"Track\", \"Release_year\", \"BPM\", \"Energy\", \"Dancebility\", \"Happiness\"], axis=1)\ndf.info()","8ac5562b":"features = df.columns[2:]\ndummies = pd.get_dummies(df[features])\nx = dummies[:-370]\nx_acc = dummies[-370:-300]\nx_test = dummies[-300:]\n\ntrain_data = df[:-370]\ny = train_data['Category']\ntrain_data_acc = df[-370:-300]\ny_test = train_data_acc[\"Category\"]","1d29b95f":"model = RandomForestClassifier(n_estimators = 100, max_depth = 10, random_state = 1)\nmodel.fit(x, y)\npredictions = model.predict(x_acc)\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy with Random forest is: ', accuracy)\n\nmodel = AdaBoostClassifier(n_estimators = 100)\nmodel.fit(x, y)\npredictions = model.predict(x_acc)\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy with AdaBoost is: ', accuracy)\n\nmodel = GradientBoostingClassifier(n_estimators = 100)\nmodel.fit(x, y)\npredictions = model.predict(x_acc)\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy with GradientBoosting is: ', accuracy)\n\nmodel = DecisionTreeClassifier(random_state = 1)\nmodel.fit(x, y)\npredictions = model.predict(x_acc)\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy with Decision Tree is: ', accuracy)\n\nmodel = LinearDiscriminantAnalysis()\nmodel.fit(x, y)\npredictions = model.predict(x_acc)\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy with linear Discriminant is: ', accuracy)\n\nestimators = [\n    ('RF', RandomForestClassifier(n_estimators = 100, max_depth = 100, random_state = 1)),\n    ('tre', AdaBoostClassifier(n_estimators = 100)),\n    #('GradBoost', GradientBoostingClassifier(n_estimators = 100)),\n    #('Tree', DecisionTreeClassifier(random_state = 1)),\n    #('Linear', LinearDiscriminantAnalysis())\n]\n#model = StackingClassifier(estimators = estimators, final_estimator=LogisticRegression())\nmodel = RandomForestClassifier(n_estimators = 100, max_depth = 100, random_state = 1)\nmodel.fit(x, y)\n\npredictions = model.predict(x_acc)\n\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy is : ', accuracy)","9334981d":"dummies = pd.get_dummies(df[features])\nx = dummies[:-300]\nx_test = dummies[-300:]\n\ntrain_data = df[:-300]\ny = train_data['Category']\n\nfinal_model = model\nfinal_model.fit(x, y)\n\n#\u0417\u0430\u043f\u0438\u0448\u0435\u043c \u0432 \u0444\u0430\u0439\u043b\nsample = pd.read_csv(\"..\/input\/mymusicalprefrences\/sample_submition.csv\")\nsample[\"Category\"] = final_model.predict(x_test)\nsample[\"Category\"] = (sample[\"Category\"]==\"like\").astype(int)\nsample.to_csv(\".\/result.csv\", index=False)","d5e5d4b4":"Tsne \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a \u0430\u043b\u044c\u0431\u043e\u043c\u0430\u043c.","bbe0e2e8":"\u041f\u043e\u043b \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u0442\u0430\u043a \u0436\u0435 \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043d\u0430 \u043c\u0443\u0436\/\u0436\u0435\u043d.","1ed9f2d4":"\u0414\u0430 \u0438 \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c\u0438 \u0442\u043e\u0436\u0435.","e2616c9b":"\u041a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u0442\u0440\u0435\u043a\u0430 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435 \u0442\u0435\u043c \u0436\u0435 one hot'\u043e\u043c","4cc82985":"\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u0440\u0435\u043a\u043e\u0432 \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u0432\u044b\u0447\u043d\u044b\u0435 \u043b\u0430\u0439\u043a\\\u0434\u0438\u0437\u043b\u0430\u0439\u043a.","1910ab12":"Random Forest \u0441\u043d\u043e\u0432\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0435\u0431\u044f \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0445. \u0415\u0433\u043e \u0438 \u0432\u043e\u0437\u044c\u043c\u0435\u043c.\n\u0412\u0435\u0440\u043d\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u0431\u0443\u0447\u0438\u043c \u0443\u0436\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u043c train \u0441\u0435\u0442\u0435.","7f5d75bf":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c train\/test \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c. \u0417\u0430\u043e\u0434\u043d\u043e \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u0446\u0432\u0435\u0442\u043e\u0432\u0443\u044e \u0433\u0430\u043c\u043c\u0443 \u043d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430\u0445.","286ee3c2":"\u0421 \u043b\u0435\u0439\u0431\u043b\u0430\u043c\u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0432\u0441\u0435 \u0442\u043e\u0442 \u0436\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c tsna","4e609c70":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438 \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0443 Vocal \u0432 \u043a\u043e\u043d\u0446\u0435 \u043f\u0440\u043e\u0431\u0435\u043b. \u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c..","f026e5bf":"\u0414\u0435\u043b\u0430\u0435\u043c one hot \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u043d","b43821e7":"Id \u0438 Category \u043d\u0430\u043c \u043d\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b \u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438, \u0442\u0430\u043a \u0447\u0442\u043e \u0431\u0435\u0440\u0435\u043c \u0432\u0441\u0435 \u0444\u0438\u0447\u0438, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0439.\n\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043f\u043b\u0438\u0442 train \u0434\u0430\u0442\u044b \u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442","1a892d47":"\u0412\u0438\u0434\u0438\u043c 6 \u0442\u0440\u0435\u043a\u043e\u0432 \u0431\u0435\u0437 \u043b\u0435\u0439\u0431\u043b\u043e\u0432. \u0421\u043c\u0435\u043b\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043b\u0435\u0439\u0431\u043b\u044b \u043d\u0430 None.","adf78a7a":"C \u0430\u0432\u0442\u043e\u0440\u0430\u043c\u0438 \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043c \u0432\u0441\u0435 \u043f\u043e \u0442\u043e\u043c\u0443 \u0436\u0435 tsne, \u043d\u043e \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u044f \u043d\u0435\u043e\u0441\u043e\u0431\u043e \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f train\/test \u0432\u044b\u0431\u043e\u0440\u043a\u0443.","7574bb0e":"\u041c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0431 \u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c 5 \u0432\u0438\u0434\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432:\nLinearDiscriminantAnalysis\nDecisionTreeClassifier\nGradientBoostingClassifier\nAdaBoostClassifier\nRandomForestClassifier\n\n\u0410 \u0442\u0430\u043a \u0436\u0435 \u043f\u043e\u0438\u0433\u0440\u0430\u0435\u043c\u0441\u044f \u0441 \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0435\u043c \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 (\u0434\u0435\u043b\u0430\u043b \u043f\u0440\u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0435 \u0432 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u0438 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0434\u0435\u0441\u044f\u0442\u043a\u0430\u0445 \u0435\u0433\u043e \u0432\u0435\u0440\u0441\u0438\u0439).\n\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f accuracy, \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u043c \u0432\u044b\u0448\u0435 \"\u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c\" \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435, \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f\u043c\u0438.","0b29666d":"\u0418\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u0445 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0442\u0440\u0435\u043a\u043e\u0432. \u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0445.","931f5a57":"\u0422\u0438\u043f\u043e\u0432 \u0430\u043b\u044c\u0431\u043e\u043c\u043e\u0432 \u0443 \u043d\u0430\u0441 \u043d\u0435 \u0442\u0430\u043a \u043c\u043d\u043e\u0433\u043e, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f onehotencoder'\u043e\u043c.","8036f94c":"\u0421\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c, \u0447\u0442\u043e\u0431\u044b \u043b\u0435\u0433\u0447\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c.","11b073cb":"\u0421 \u0432\u043e\u043a\u0430\u043b\u043e\u043c \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043c \u0442\u0430\u043a \u0436\u0435.","f744a14f":"\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0430\u043b\u044c\u0431\u043e\u043c \u043d\u0430 None.","cbe06073":"\u0420\u0430\u0441\u0441\u043f\u043b\u0438\u0442\u0438\u043c Key, \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u0432 major \u0438 minor (\u044f \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0437\u043d\u0430\u044e \u043e\u0431 \u044d\u0442\u043e\u043c)","f605608d":"\u041f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u0447\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0440\u0435\u043a\u043e\u0432 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435.","895547ca":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u0442\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043d\u0430\u0447\u043d\u0435\u043c \u0441 \u044d\u0442\u0438\u043c \u0447\u0442\u043e-\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c.","6176e52c":"\u0422\u0430\u043a \u0436\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0430\u043b\u044c\u0431\u043e\u043c\u044b","a9771f75":"\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0447\u0443\u0434\u043e-\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 tsne \u0441\u043d\u0438\u0437\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u043d\u0430 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0443 \u0442\u0440\u0435\u043a\u0430 \u043a \u0442\u0435\u043c \u0438\u043b\u0438 \u0438\u043d\u044b\u043c \u0436\u0430\u043d\u0440\u0430\u043c.","14a570c1":"\u0418 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0443\u0431\u0435\u0440\u0435\u043c \u0438\u0437 \u043d\u0435\u0433\u043e, \u0434\u0430\u0431\u044b \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0434\u0430\u0442\u044c \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435.","7ffe3425":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0444\u0438\u0447\u0438 \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435","69a4fe12":"\u0422\u0440\u0435\u043a \u0441 \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u043e\u043c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043f\u043b\u044e\u0441 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 train \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u041f\u0440\u043e\u0441\u0442\u043e \u0443\u0434\u0430\u043b\u0438\u043c \u0435\u0433\u043e","67b69350":"\u041f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0442\u0440\u0435\u043a\u0443 \u0434\u0435\u0441\u044f\u0442\u0438\u043b\u0435\u0442\u0438\u0435 \u0435\u0433\u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0430."}}