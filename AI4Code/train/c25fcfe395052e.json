{"cell_type":{"3ba2e69d":"code","6cd14b34":"code","599211bd":"code","b9efa859":"code","612f0791":"code","97f08cdb":"code","a80373bc":"code","e073986c":"code","c904383a":"code","9ecec270":"code","9a840096":"code","b1e64d58":"code","0be52bde":"code","f7b779d5":"code","4f8ccc22":"code","8caa99ee":"code","59bbae47":"code","ccd3d592":"code","cd00dace":"code","b72cb7ef":"code","65f8bfd9":"code","372abb18":"code","b9efe639":"code","358a55da":"code","f26a0923":"code","745367a6":"code","fb0649b7":"code","276b384e":"code","8e001a75":"code","2022a54a":"code","fc1f36b2":"code","1350b3c2":"code","1274e853":"code","b4ee23c7":"code","de42cd68":"code","8417fad3":"code","1a59285f":"code","eefa4f77":"code","8c1bee84":"code","0687e8c6":"code","6fe10c63":"code","1421b203":"code","5d308ce4":"code","73a83a65":"code","35740305":"code","ac8d7a85":"code","b78daecc":"code","ad707da5":"code","e268e11a":"code","c903df1f":"code","5e2a1fe0":"code","4f258cbb":"code","2e0d7372":"code","cf3283da":"code","0ebba7d9":"code","266f1440":"code","62291c7f":"code","2fd15260":"code","0e0b74e1":"code","41efe381":"code","7feea185":"code","6310e013":"code","9e0042a0":"code","f21c428b":"code","e99853ad":"code","5521e1b3":"code","33ad4a1f":"code","634f3766":"code","6ca82ee1":"code","abf84632":"code","ece7ed02":"code","b01f7e4a":"code","8e2174ae":"code","dd73378e":"code","d9bdb06d":"code","2fb83d51":"code","a0b9827d":"code","250f15ca":"code","42b1b657":"code","13d96b9c":"markdown","29402dde":"markdown","17c1ef73":"markdown","71ae6366":"markdown","439adecb":"markdown","3d75be7f":"markdown","f7861930":"markdown","572a9777":"markdown","76a934d3":"markdown","7748f3c9":"markdown"},"source":{"3ba2e69d":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\ndf=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/train.csv\")\ndf1=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/test.csv\")","6cd14b34":"train_original=df.copy()\ntest_original=df1.copy()","599211bd":"df.head(10)","b9efa859":"#COUNT THE NUMBER OF ROWS AND COLUMNS IN THE DATA SET.","612f0791":"df.shape","97f08cdb":"df1.shape","a80373bc":"#GET SOME STATISTICS","e073986c":"df.describe()","c904383a":"df.info()","9ecec270":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf.isnull().sum()","9a840096":"#VIEWING THE TEST DATASET\n\n\ndf1.head()","b1e64d58":"df1.info()","0be52bde":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf1.isnull().sum()","f7b779d5":"data=[df,df1]\nfor dataset in data:\n    #FILTER CATEGORICAL VARIABLES\n    categorical_columns=[x for x in dataset.dtypes.index if dataset.dtypes[x]=='object']\n    #EXCLUDE ID COLS AND SOURCE:\n    categorical_columns =[x for x in categorical_columns if x not in['Loan_ID']]\n    \n    \n    #PRINT FREQUENCY OF CATEGORIES\nfor col in categorical_columns:\n    print('\\nFrequency of categories for variable %s'%col)\n    print(df[col].value_counts())\n    \n    ","4f8ccc22":"#GENDER\n\nsns.countplot(df['Gender'])","8caa99ee":"pd.crosstab(df.Gender, df.Loan_Status, margins=True)","59bbae47":"#DEPENDENDANTS\n\nplt.figure(figsize=(6,6))\nlabels=['0','1','2','3+']\nexplode=(0.05,0,0,0)\nsize=[345,102,101,51]\nplt.pie(size,explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nplt.axis('equal')\nplt.show()","ccd3d592":"#GET THE COUNT OF THE NUMBER OF DEPENDENTS\n\ndf.Dependents.value_counts()","cd00dace":"pd.crosstab(df.Dependents,df.Loan_Status,margins=True)","b72cb7ef":"#CREDIT HISTORY\n\nsns.countplot(df['Credit_History'])","65f8bfd9":"pd.crosstab(df.Credit_History,df.Loan_Status, margins=True)","372abb18":"#SELF EMPLOYED\n\nsns.countplot(df['Self_Employed'])","b9efe639":"pd.crosstab(df.Self_Employed, df.Loan_Status, margins=True)","358a55da":"#MARRIED\n\nsns.countplot(df.Married)","f26a0923":"pd.crosstab(df.Married, df.Loan_Status, margins=True)","745367a6":"#LOAN AMOUNT \n\nsns.displot(df['LoanAmount'])","fb0649b7":"#EDUCATION\n\nsns.countplot(df.Education)","276b384e":"#PROPERTY AREA\n\n\nsns.countplot(df.Property_Area)","8e001a75":"# APPLICANT INCOME\n\ndf['ApplicantIncome'].hist(bins=50)","2022a54a":"df.boxplot(column='ApplicantIncome')","fc1f36b2":"# APPLICANT INCOME AND EDUCATION\n\ndf.boxplot(column='ApplicantIncome',by='Education')\n","1350b3c2":"temp1=df['Credit_History'].value_counts(ascending=True)\ntemp2=df.pivot_table(values='Loan_Status',index=['Credit_History'],aggfunc= lambda x: x.map({'Y':1,'N':0}).mean())\nprint('Frequency Table for Credit History:')\nprint(temp1)\nprint('\\n probability of getting loan for each credit history class:')\nprint(temp2)","1274e853":"import matplotlib.pyplot as plt\nfig=plt.figure(figsize=(8,4))\nax1=fig.add_subplot(121)\nax1.set_xlabel('Credit_History')\nax1.set_ylabel('Count of applicants')\nax1.set_title(\"Applicants by credit_History\")\ntemp1.plot(kind='bar')\nax2=fig.add_subplot(122)\ntemp2.plot(kind='bar')\nax2.set_xlabel('Credit_History')\nax2.set_ylabel('Probability of getting loan')\nax2.set_title(\"Probability of getting loan by credit history\")","b4ee23c7":"temp3=pd.crosstab(df['Credit_History'],df['Loan_Status'])\ntemp3.plot(kind='bar',stacked=True, color=['red','blue'],grid=False)","de42cd68":"df.apply(lambda x: sum(x.isnull()),axis=0)","8417fad3":"df['LoanAmount'].fillna(df['LoanAmount'].mean(),inplace=True)","1a59285f":"df[\"Self_Employed\"].value_counts()","eefa4f77":"# HEATMAP REPRESENTATION OF THE CORRELATION\n\nmatrix=df.corr()\nf,ax=plt.subplots(figsize=(9,6))\nsns.heatmap(matrix,vmax=.8,square=True,cmap=\"BuPu\")","8c1bee84":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf.isnull().sum()","0687e8c6":"df.head()","6fe10c63":"#CONVERTING STRING VALUES(CATEGORICAL VALUES) TO INTEGER\n\ndf.Gender=df.Gender.map({\"Female\":0,\"Male\":1})\ndf.Married=df.Married.map({\"No\":0,\"Yes\":1})\ndf.Self_Employed=df.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf.Education=df.Education.map({\"Not\":1,\"Graduate\":0})\ndf.Property_Area=df.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf.Loan_Status=df.Loan_Status.map({\"N\":0,\"Y\":1})\ndf.Dependents=df.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","1421b203":"df.head()","5d308ce4":"#CONVERTING STRING VALUES(CATEGORICAL VALUES)TO INTEGER\n\ndf1.Gender=df1.Gender.map({\"Female\":0,\"Male\":1})\ndf1.Married=df1.Married.map({\"No\":0,\"Yes\":1})\ndf1.Self_Employed=df1.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf1.Education=df1.Education.map({\"Not\":1,\"Graduate\":0})\ndf1.Property_Area=df1.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf1.Dependents=df1.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","73a83a65":"df1.head()","35740305":"df[\"Gender\"].fillna(df[\"Gender\"].mode()[0],inplace=True)\ndf[\"Married\"].fillna(df[\"Married\"].mode()[0],inplace=True)\ndf[\"Dependents\"].fillna(df[\"Dependents\"].mode()[0],inplace=True)\ndf[\"Self_Employed\"].fillna(df[\"Self_Employed\"].mode()[0],inplace=True)\ndf[\"Credit_History\"].fillna(df[\"Credit_History\"].mode()[0],inplace=True)\ndf[\"Education\"].fillna(df[\"Education\"].mode()[0],inplace=True)\ndf[\"Property_Area\"].fillna(df[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","ac8d7a85":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\n\ndf[\"Loan_Amount_Term\"].value_counts()","b78daecc":"df[\"Loan_Amount_Term\"].fillna(df[\"Loan_Amount_Term\"].mode()[0],inplace=True)","ad707da5":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf[\"LoanAmount\"].fillna(df[\"LoanAmount\"].median(),inplace=True)","e268e11a":"df.isnull().sum()","c903df1f":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf1.isnull().sum()","5e2a1fe0":"df1[\"Gender\"].fillna(df1[\"Gender\"].mode()[0],inplace=True)\ndf1[\"Married\"].fillna(df1[\"Married\"].mode()[0],inplace=True)\ndf1[\"Dependents\"].fillna(df1[\"Dependents\"].mode()[0],inplace=True)\ndf1[\"Self_Employed\"].fillna(df1[\"Self_Employed\"].mode()[0],inplace=True)\ndf1[\"Credit_History\"].fillna(df1[\"Credit_History\"].mode()[0],inplace=True)\ndf1[\"Education\"].fillna(df1[\"Education\"].mode()[0],inplace=True)\ndf1[\"Property_Area\"].fillna(df1[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","4f258cbb":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\ndf1[\"Loan_Amount_Term\"].value_counts()","2e0d7372":"df1[\"Loan_Amount_Term\"].fillna(df1[\"Loan_Amount_Term\"].mode()[0],inplace=True)","cf3283da":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf1[\"LoanAmount\"].fillna(df1[\"LoanAmount\"].median(),inplace=True)","0ebba7d9":"\n\ndf1.isnull().sum()","266f1440":"df['Total_Income']=df[\"ApplicantIncome\"]+df['CoapplicantIncome']\ndf1['Total_Income']=df1[\"ApplicantIncome\"]+df1['CoapplicantIncome']","62291c7f":"sns.displot(df[\"Total_Income\"])","2fd15260":"df['Total_Income_log']=np.log(df[\"Total_Income\"])\ndf1['Total_Income_log']=np.log(df1[\"Total_Income\"])","0e0b74e1":"sns.displot(df1[\"Total_Income_log\"])","41efe381":"df['EMI']=df[\"LoanAmount\"]\/df['Loan_Amount_Term']\ndf1['EMI']=df1[\"LoanAmount\"]\/df1['Loan_Amount_Term']","7feea185":"sns.displot(df[\"EMI\"])","6310e013":"sns.displot(df[\"EMI\"])","9e0042a0":"#MULTIPLYING BY 1000 TO MAKE THE UITS EQUAL\n\ndf['Balance Income']=df[\"Total_Income\"]-(df['EMI']*1000)\ndf1['Balance Income']=df1[\"Total_Income\"]-(df1['EMI']*1000)","f21c428b":"sns.displot(df[\"Balance Income\"])","e99853ad":"sns.displot(df[\"Balance Income\"])","5521e1b3":"df=df.drop([\"Loan_ID\",\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\ndf","33ad4a1f":"#LOOK AT THE DATA TYPES\n\ndf.dtypes","634f3766":"df1=df1.drop([\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\n","6ca82ee1":"df1=df1.drop(\"Loan_ID\",axis=1)\ndf1","abf84632":"#LOOK AT THE DATA TYPES\ndf1.dtypes","ece7ed02":"#LETS PREPARE THE DATA FOR FEEDING IN TO THE MODELS\n#SAVE THE TARGET VARIABLE IN SEPARATE\n\nx=df.drop(\"Loan_Status\",1)\ny=df.Loan_Status","b01f7e4a":"x=pd.get_dummies(x)\ndf=pd.get_dummies(df)","8e2174ae":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=102)","dd73378e":"#USE SVM\n\nfrom sklearn.svm import SVC\nsvc=SVC()\nsvc.fit(x_train,y_train)\npred_svm=svc.predict(x_test)\nacc_svm=accuracy_score(y_test,pred_svm)*100\nacc_svm\n\n","d9bdb06d":"pred_test=svc.predict(df1)","2fb83d51":"loancsv=pd.DataFrame({\"Loan_ID\":test_original[\"Loan_ID\"],\"Loan_Status\":pred_test})","a0b9827d":"loancsv","250f15ca":"loancsv[\"Loan_Status\"].replace(0,\"N\",inplace=True)\nloancsv[\"Loan_Status\"].replace(1,\"Y\",inplace=True)","42b1b657":"loancsv","13d96b9c":"# READING THE DATA","29402dde":"# FILLING MISSING VALUES\n","17c1ef73":"# REPLACING THE CATEGORICAL VALUES","71ae6366":"# CORRELATION BETWEEN ALL THE NUMERICAL VARIABLES\n","439adecb":"# DROPPING THE VARIABLES","3d75be7f":"# FEATURE ENGINEERING","f7861930":"# FILLING MISSING VALUES IN TEST DATA","572a9777":"# EXPLORING AND PREPARING THE DATA","76a934d3":"# IMPORTING PACKAGES","7748f3c9":"#  SUPPORT VECTOR MACHINE"}}