{"cell_type":{"3dcfdc78":"code","5f5b83e2":"code","bbc0c4b5":"code","d32749f0":"code","62754712":"code","66c73045":"code","f8ff9e88":"code","32db50b4":"code","17310b19":"code","fd4521fb":"code","208320cf":"code","a0b88877":"code","a9eb4499":"code","27c758e3":"code","c244589a":"code","e3120a41":"code","ca6c5398":"code","9cbe2ec4":"code","3dc03f29":"code","9e52ea1d":"code","ed83911f":"code","62096cf3":"code","0b2f7c76":"code","15ec9907":"code","0146bf10":"code","9158a974":"code","7a89b6f7":"code","abdb8ceb":"code","ccc738f2":"code","14d78e18":"code","f17ef551":"code","ec6a924d":"code","db11f948":"code","c08153c2":"markdown","c1f207c4":"markdown","a2e71cb3":"markdown","cc2d0555":"markdown","a723d11b":"markdown","6df5d2f9":"markdown","0448ed41":"markdown","397dfc14":"markdown","5a3466d3":"markdown","284fcdea":"markdown","26120e39":"markdown","00e70972":"markdown","7214b7b6":"markdown","ea8d3e0d":"markdown","0cfe642b":"markdown","09ed5f9f":"markdown","e11449c3":"markdown","f51678df":"markdown","18d730ea":"markdown","9dd32ee5":"markdown","be7a83ed":"markdown","ef697969":"markdown","5e4e8fa3":"markdown","9f8d73c6":"markdown","5772623d":"markdown","5e0c0e82":"markdown","14ad2981":"markdown","d847f003":"markdown","1849330b":"markdown","87d9ba06":"markdown","8d571ecc":"markdown","5aa7fbe3":"markdown","d574e55e":"markdown","b6470984":"markdown","4b3de69e":"markdown","9dcb6163":"markdown","31403746":"markdown","c20fea09":"markdown","142f80ef":"markdown","53684467":"markdown","aa2ce698":"markdown","299cd0bd":"markdown","e82a0714":"markdown","94e8c555":"markdown","f1bb2ca2":"markdown","9e85c414":"markdown","a3d82740":"markdown","195d373e":"markdown","8527f4c5":"markdown","b63b08b6":"markdown","bb05e292":"markdown"},"source":{"3dcfdc78":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","5f5b83e2":"prices = pd.read_excel(\"..\/input\/worldwide-mobile-data-pricing\/global-mobile-data-price-comparison-2020.xlsx\", index_col=0)\nprices.head()","bbc0c4b5":"usd_to_eur = 0.85 # 25 ago. 8:45 UTC\nprices = prices[[\"Name\", \"Continental region\", \"Average price of 1GB (USD)\", \"Cheapest 1GB for 30 days (USD)\", \"Most expensive 1GB (USD)\"]]\nprices.rename(columns={\"Average price of 1GB (USD)\": \"Average price\", \"Cheapest 1GB for 30 days (USD)\": \"Cheapest\", \"Most expensive 1GB (USD)\": \"Most expensive\"}, inplace=True)\nprices[\"Average price\"] *=  usd_to_eur \nprices[\"Cheapest\"] *= usd_to_eur\nprices[\"Most expensive\"] *= usd_to_eur\nprices.head()","d32749f0":"prices.groupby('Continental region')['Continental region'].count()","62754712":"prices.dtypes","66c73045":"prices2019 = pd.read_excel(\"..\/input\/worldwide-mobile-data-pricing\/global-mobile-data-price-comparison-2020.xlsx\", \n                           sheet_name=\"Previous year's data (2019)\", \n                           index_col=0)\nusd_to_eur = 0.85 # 25 ago. 8:45 UTC\nprices2019 = prices2019[[\"Name\", \"Continental region\", \"Average price of 1GB (USD)\", \"Cheapest 1GB (USD)\", \"Most expensive 1GB (USD)\"]]\nprices2019.rename(columns={\"Average price of 1GB (USD)\": \"Average price 2019\", \"Cheapest 1GB (USD)\": \"Cheapest\", \"Most expensive 1GB (USD)\": \"Most expensive\"}, inplace=True)\nprices2019[\"Average price 2019\"] *=  usd_to_eur \nprices2019[\"Cheapest\"] *= usd_to_eur\nprices2019[\"Most expensive\"] *= usd_to_eur\nprices2019.head()","f8ff9e88":"prices[prices['Average price'] == min(prices['Average price'])] ","32db50b4":"prices[prices['Average price'] == max(prices['Average price'])] ","17310b19":"prices.head(10)","fd4521fb":"#Calculate top10 cheapest\ntop10cheap = prices.head(10)\ntop10cheap.set_index('Name', inplace=True)\ntop10cheap = top10cheap[['Average price']]\ntop10cheap.sort_values(['Average price'], ascending=False, axis=0, inplace=True)\n\n#Print a barh\ntop10cheap.plot(kind='barh', alpha=0.7, figsize=(16, 12)) \nplt.xlabel('Average price')\nplt.ylabel('Country')\nplt.title('Top 10 Cheapest countries - 1GB data mobile')\nfor index,value in enumerate(top10cheap['Average price']): \n    label = str(round(value,2)) \n    plt.annotate(label+'\u20ac', xy=(value-0.025, index-0.05), color='white')\nplt.show()","208320cf":"prices.head(10).groupby('Continental region')['Continental region'].count().sort_values(ascending=False)","a0b88877":"prices.sort_values(\"Average price\", ascending=False).head(10)","a9eb4499":"#Calculate top10 most expensive\ntop10exp = prices.tail(10)\ntop10exp.set_index('Name', inplace=True)\ntop10exp = top10exp[['Average price']]\ntop10exp.sort_values(['Average price'], ascending=True, axis=0, inplace=True)\n\n#Print a barh\ntop10exp.plot(kind='barh', alpha=0.7, figsize=(16, 12)) \nplt.xlabel('Average price')\nplt.ylabel('Country')\nplt.title('Top 10 Most expensive countries - 1GB data mobile')\nfor index,value in enumerate(top10exp['Average price']): \n    label = str(round(value,2)) \n    plt.annotate(label+'\u20ac', xy=(value-2.2, index-0.05), color='white')\nplt.show()","27c758e3":"prices.tail(10).groupby('Continental region')['Continental region'].count().sort_values(ascending=False)","c244589a":"# Define x-axis, in 0.5\u20ac steps\nsegments = int(prices['Average price'].max() \/\/ 0.5) + 1\nbin_edges = []\nfor i in range(segments+1):\n    bin_edges.append(0.5*i)\n\n# Plots the histogram\nprices['Average price'].plot(kind='hist', \n                             figsize=(18, 12), \n                             bins=len(bin_edges), \n                             alpha=0.6, \n                             xticks=bin_edges,\n                             rot=90)\nplt.title('Histogram: Average price of 1GB data connection - Worldwide') \nplt.ylabel('Number of Countries') \nplt.xlabel('Average Price (EUR)') \n\n# Annotate arrow for worldwide average\nplt.annotate('Average',                      \n             xy=(prices['Average price'].mean(), 12.2),             \n             xytext=(3.35, 20),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\n# Annotate arrow for 50% countries\nw50pc = prices['Average price'].iloc[prices['Name'].count() \/\/ 2]\nplt.annotate('50% countries',                      \n             xy=(w50pc, 17.2),             \n             xytext=(1.1, 25),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\nplt.show()","e3120a41":"# Create a new dataframe for the pie chart representation\nprice_steps, steps_count = [1,2,3,5,10], []\nsteps_names = ['Less than 1\u20ac', 'Between 1 and 2\u20ac', 'Between 2 and 3\u20ac', 'Between 3 and 5\u20ac', 'Between 5 and 10\u20ac', 'More than 10\u20ac']\nfor i,val in enumerate(price_steps):\n    count = (prices['Name'][prices['Average price'] < val]).count()\n    count -= sum(steps_count)\n    steps_count.append(count)\n    if i == (len(price_steps)-1):\n        steps_count.append((prices['Name'].count())-sum(steps_count))\npie_data = pd.DataFrame(list(zip(steps_names, steps_count)), columns=['Group',' '])\npie_data.set_index('Group', inplace=True)\n\n# Plot data\ncolors_list = ['palegreen', 'yellowgreen', 'gold', 'orange', 'pink', 'lightcoral']\nexplode = [0, 0.1, 0, 0, 0, 0]\npie_data[' '].plot(kind='pie',\n                            figsize=(15, 6),\n                            autopct='%1.1f%%', \n                            startangle=90,\n                            counterclock=False,\n                            shadow=True,   \n                            explode=explode,\n                            colors=colors_list\n                            )\n\nplt.title('Average price 1GB Data mobile - Worldwide', y=1.12) \nplt.axis('equal')  \nplt.show()","ca6c5398":"prices['Average price'].plot(kind='box', figsize=(10, 10))\nplt.title('1GB Data mobile prices - Worldwide')\nplt.ylabel('Price (EUR)')\nplt.show()","9cbe2ec4":"prices[['Average price']].describe()","3dc03f29":"prices[prices['Name'] == 'Spain']","9e52ea1d":"europe = prices[(prices['Continental region'] == 'WESTERN EUROPE') | \n               (prices['Continental region'] == 'BALTICS') | \n               (prices['Continental region'] == 'EASTERN EUROPE')]\neurope","ed83911f":"# Create the new rank\neurope = europe.assign(Eur_rank=pd.Series(europe['Average price'].rank(ascending=True)))\n# Calculate differential\nspa_price = europe['Average price'][europe['Name'] == 'Spain'].iloc[0]\neurope = europe.assign(Differential=pd.Series(europe['Average price'] - spa_price))\neurope = europe.assign(Percent=pd.Series(((europe['Average price']*100)\/spa_price)-100))\n# Rename and correct types\neurope.rename(columns={'Rank': 'World rank', 'Eur_rank': 'Eur rank', 'Diffential': 'Differential SPA', 'Percent': '%Diff SPA'}, inplace=True)\neurope = europe.astype({'Eur rank': int, '%Diff SPA':int})\neurope.set_index('Eur rank', inplace=True)\neurope = europe[['Name', 'Continental region', 'Average price', 'Cheapest', 'Most expensive', 'Differential', '%Diff SPA']]\neurope","62096cf3":"# Define x-axis, in 0.5 steps\nsegments = int(europe['Average price'].max() \/\/ 0.5) + 1\nbin_edges = []\nfor i in range(segments+1):\n    bin_edges.append(0.5 * i)\n\n# Plots the histogram\neurope['Average price'].plot(kind='hist', \n                             figsize=(12, 7), \n                             bins=len(bin_edges), \n                             alpha=0.6, \n                             xticks=bin_edges)\nplt.title('Histogram: Average price of 1GB data mobile - Europe') \nplt.ylabel('Number of Countries') \nplt.xlabel('Average Price (EUR)') \n\n# Annotate arrow for Spain position\nplt.annotate('Spain',                      \n             xy=(spa_price, 6.2),             \n             xytext=(1.31, 8),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\n# Annotate arrow for EUR average\nplt.annotate('EUR average',                      \n             xy=(europe['Average price'].mean(), 1.25),             \n             xytext=(2.15, 10),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\n# Annotate arrow for 50% countries\neur_50pc = europe['Average price'].iloc[europe['Name'].count() \/\/ 2]\nplt.annotate('50% countries',                      \n             xy=(eur_50pc, 5.2),             \n             xytext=(1.3, 9),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\nplt.show()","0b2f7c76":"# Create a new dataframe for the pie chart representation\nprice_steps, steps_count_w, steps_count_eur = [1,2,3,5,10], [], []\nsteps_names = ['Less than 1\u20ac', 'Between 1 and 2\u20ac', 'Between 2 and 3\u20ac', 'Between 3 and 5\u20ac', 'Between 5 and 10\u20ac', 'More than 10\u20ac']\nfor i,val in enumerate(price_steps):\n    count_w = (prices['Name'][prices['Average price'] < val]).count()\n    count_w -= sum(steps_count_w)\n    count_eur = (europe['Name'][europe['Average price'] < val]).count()\n    count_eur -= sum(steps_count_eur)\n    steps_count_w.append(count_w)\n    steps_count_eur.append(count_eur)\n    if i == (len(price_steps)-1):\n        steps_count_w.append((prices['Name'].count())-sum(steps_count_w))\n        steps_count_eur.append((europe['Name'].count())-sum(steps_count_eur))\npie_data = pd.DataFrame(list(zip(steps_names, steps_count_w, steps_count_eur)), columns=['Group','',' '])\npie_data.set_index('Group', inplace=True)\n\n# Plot data\ncolors_list = ['palegreen', 'yellowgreen', 'gold', 'orange', 'pink', 'lightcoral']\nexplode = [0, 0.1, 0, 0, 0, 0]\npie_data[['',' ']].plot(kind='pie',\n                                      figsize=(14, 8),\n                                      labels=steps_names,\n                                      autopct='%1.1f%%', \n                                      startangle=90,\n                                      counterclock=False,\n                                      shadow=True,   \n                                      explode=explode,\n                                      colors=colors_list,\n                                      pctdistance=0.8,\n                                      subplots=True,\n                                      legend=False\n                                      )\n\nplt.title('Average price 1GB Data mobile - Worldwide vs. Europe', x=-0.6, y=1, fontdict={'fontsize':22}) \nplt.annotate('Worldwide', xy=(-1,0), xytext=(-4.4,-1.1), fontsize=20)\nplt.annotate('Europe', xy=(-1,0), xytext=(1,-1.1), fontsize=20)\nplt.show()","15ec9907":"europe['Average price'].plot(kind='box', figsize=(14, 14))\nplt.title('1GB Data mobile prices - Europe')\nplt.ylabel('Price (EUR)')\nplt.show()","0146bf10":"europe[['Average price']].describe()","9158a974":"prices[prices['Name'] == 'United States']","7a89b6f7":"# Define x-axis, in 0.5\u20ac steps\nsegments = int(prices['Average price'].max() \/\/ 0.5) + 1\nbin_edges = []\nfor i in range(segments+1):\n    bin_edges.append(0.5*i)\n\n# Plots the histogram\nprices['Average price'].plot(kind='hist', \n                             figsize=(18, 12), \n                             bins=len(bin_edges), \n                             alpha=0.6, \n                             xticks=bin_edges,\n                             rot=90)\nplt.title('Histogram: Average price of 1GB data mobile - Worldwide') \nplt.ylabel('Number of Countries') \nplt.xlabel('Average Price (EUR)') \n\n# Annotate arrow for Spain position\nplt.annotate('Spain',                      \n             xy=(spa_price, 24),             \n             xytext=(0.85, 29),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\n# Annotate arrow for worldwide average\nplt.annotate('Average',                      \n             xy=(prices['Average price'].mean(), 12.2),             \n             xytext=(3.35, 20),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\n# Annotate arrow for 50% countries\nw50pc = prices['Average price'].iloc[prices['Name'].count() \/\/ 2]\nplt.annotate('50% countries',                      \n             xy=(w50pc, 17.2),             \n             xytext=(1.05, 22.5),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\n# Annotate arrow for USA\nusa_price = prices['Average price'][prices['Name'] == 'United States'].iloc[0]\nw50pc = prices['Average price'].iloc[prices['Name'].count() \/\/ 2]\nplt.annotate('USA',                      \n             xy=(usa_price, 4),             \n             xytext=(6.3, 10),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\nplt.show()","abdb8ceb":"compare = pd.merge(left=prices2019[['Name','Average price 2019']], \n                   right=prices[['Name','Average price']], \n                   left_on='Name', \n                   right_on='Name')\ncompare = compare.assign(Differential=pd.Series(compare['Average price'] - compare['Average price 2019']))\ncompare.rename(columns={'Average price': 'Average price 2020'}, inplace=True)\ncompare.head()","ccc738f2":"countries_num = compare['Name'].count()\ndrop = compare['Name'][compare['Differential'] < 0].count()\nrise = compare['Name'][compare['Differential'] > 0].count()\nequal = compare['Name'][compare['Differential'] == 0].iloc[0]\nmean2019 = compare['Average price 2019'].mean()\nmean2020 = compare['Average price 2020'].mean()\nmax_drop = compare['Differential'].min()\nmax_drop_country = compare['Name'][compare['Differential'] == max_drop].iloc[0]\nmax_rise = compare['Differential'].max()\nmax_rise_country = compare['Name'][compare['Differential'] == max_rise].iloc[0]\nspa_price2019 = compare['Average price 2019'][compare['Name'] == 'Spain'].iloc[0]\nprint('Prices decreased in {} countries and raised in {}'.format(drop, rise))\nprint('{} is the only country with no price changes'.format(equal))\nprint('The average price in 2019 was {:.2f}\u20ac, meanwhile in 2020 it is {:.2f}\u20ac. Prices drop by {:.2f}\u20ac'.format(mean2019, mean2020, mean2019-mean2020))\nprint('The country with the biggest drop in prices has been {}, where prices drop by {:.2f}\u20ac'.format(max_drop_country, max_drop))\nprint('The country with the highest price increase has been {}, where prices rising by {:.2f}\u20ac'.format(max_rise_country, max_rise))\nprint('The price in Spain dropped from {:.2f}\u20ac to {:.2f}\u20ac, a {:.1f}%'.format(spa_price2019, spa_price, ((spa_price-spa_price2019)\/spa_price2019)*100))","14d78e18":"compare[['Average price 2019']].describe()","f17ef551":"compare[compare['Differential'] > 0].sort_values('Differential', ascending=False)","ec6a924d":"# Define x-axis, in 0.5\u20ac steps\nsegments = int(compare['Average price 2019'].max() \/\/ 0.5) + 1\nbin_edges = []\nfor i in range(segments+1):\n    bin_edges.append(0.5*i)\n\n# Plots the histogram\ncompare[['Average price 2019', 'Average price 2020']].plot(kind='hist', \n                             figsize=(18, 12), \n                             bins=len(bin_edges), \n                             alpha=0.5, \n                             xticks=bin_edges,\n                             rot=90)\nplt.title('Histogram: Average price of 1GB data mobile - Worldwide 2019 vs. 2020') \nplt.ylabel('Number of Countries') \nplt.xlabel('Average Price (EUR)') \n\n# Annotate arrow for worldwide average\nplt.annotate('Average 2020',                      \n             xy=(compare['Average price 2020'].mean(), 16),             \n             xytext=(3, 30),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\n# Annotate arrow for 50% countries\nplt.annotate('50% countries 2020',                      \n             xy=(w50pc, 16),             \n             xytext=(-0.35, 35),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\n# Annotate arrow for worldwide average\nplt.annotate('Average 2019',                      \n             xy=(compare['Average price 2019'].mean(), 5.2),             \n             xytext=(4.8, 13),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\n\n# Annotate arrow for 50% countries\nw50pc2019 = compare['Average price 2019'].iloc[compare['Name'].count() \/\/ 2]\nplt.annotate('50% countries 2019',                      \n             xy=(w50pc2019, 16),             \n             xytext=(6, 26),         \n             xycoords='data',         \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='red', alpha=0.4, lw=2)\n            )\nplt.show()","db11f948":"# Create a new dataframe for the pie chart representation\nprice_steps, steps_count2019, steps_count2020 = [1,2,3,5,10], [], []\nsteps_names = ['Less than 1\u20ac', 'Between 1 and 2\u20ac', 'Between 2 and 3\u20ac', 'Between 3 and 5\u20ac', 'Between 5 and 10\u20ac', 'More than 10\u20ac']\nfor i,val in enumerate(price_steps):\n    count2019 = (compare['Name'][compare['Average price 2019'] < val]).count()\n    count2019 -= sum(steps_count2019)\n    count2020 = (compare['Name'][compare['Average price 2020'] < val]).count()\n    count2020 -= sum(steps_count2020)\n    steps_count2019.append(count2019)\n    steps_count2020.append(count2020)\n    if i == (len(price_steps)-1):\n        steps_count2019.append((compare['Name'].count())-sum(steps_count2019))\n        steps_count2020.append((compare['Name'].count())-sum(steps_count2020))\npie_data = pd.DataFrame(list(zip(steps_names, steps_count2019, steps_count2020)), columns=['Group','', ' '])\npie_data.set_index('Group', inplace=True)\n\n# Plot data\ncolors_list = ['palegreen', 'yellowgreen', 'gold', 'orange', 'pink', 'lightcoral']\nexplode = [0.1, 0, 0, 0, 0, 0]\npie_data[['',' ']].plot(kind='pie',\n                                figsize=(16, 8),\n                                autopct='%1.1f%%', \n                                startangle=90,\n                                counterclock=False,\n                                shadow=True,   \n                                explode=explode,\n                                colors=colors_list, \n                                pctdistance=0.7,\n                                subplots=True,\n                                legend=False\n                                )\n\nplt.title('Average price 1GB Data - 2019 vs. 2020', x=-0.8, y=1, fontdict={'fontsize':22})  \nplt.annotate('2019', xy=(-1,0), xytext=(-4.4,-1.1), fontsize=20)\nplt.annotate('2020', xy=(-1,0), xytext=(1,-1.1), fontsize=20)\nplt.show()","c08153c2":"## 2.2 Most expensive country <a id=\"10\"><\/a>","c1f207c4":"## 2.6 Spain <a id=\"18\"><\/a>","a2e71cb3":"The first important point of the data collected by Cable.co.uk is the great prices disparity that exists worldwide for the same service, ranging from a few euro cents to the maximum ceiling of 45\u20ac. In this sense, the infrastructures of each country play a fundamental and influential role in the final price.\n\nIn general terms, the average prices in Europe are lower than in the rest of the world, although they do not predominate in the first positions of the cheapest countries.\n\nSpain, without becoming a country that stands out in the most economic positions, is positioned in a relatively low price range and with a clear downward trend, with a decrease of approximately 50% in the last year.","cc2d0555":"Grouping regions, the former Soviet countries are predominant in this ranking, followed by Asian ones. Note that there is only one country in Western Europe and no one in North America.","a723d11b":"The following list includes the 10 countries with the most expensive price","6df5d2f9":"We are going to do the first checks to get quick conclusions:","0448ed41":"Although the prices are all normalized to the same currency, the relationship with the GDP per capita of each of the countries has not been taken into account. Nevertheless some of the prices may seem low in absolute values, depending on the country's economy, they may be expensive.\n\nSince only data from the last 2 years are available, there is not enough data to be able to carry out a future predictions of what the price may be in the next few years in each country. It is clear that they will continue to going down, but the future value cannot be quantified.","397dfc14":"__Saint Helena__ is the country with the highest price. It is an African island located in the Atlantic Ocean, at 1,800 km. off the coast of Angola (+info: https:\/\/en.wikipedia.org\/wiki\/Saint_Helena).","5a3466d3":"As we did with 2020 data, we are going to read and format the original data.","284fcdea":"# 1. Exploring datasets <a id=\"0\"><\/a>","26120e39":"## 2.8 USA<a id=\"22\"><\/a>","00e70972":"Grouping the number of countries in more generic price ranges, we can also obtain the following distribution (the group of Spain is highlighted):","7214b7b6":"Grouping prices in bands of 0.5 Euros, the number of countries in each band is as follows:","ea8d3e0d":"Below is a visual comparison of the price groups between 2019 and 2020. The cheapest range is highlighted, in order to facilitate the visualization of the significant increase.","0cfe642b":"We can also draw some conclusions using the _describe_ method.","09ed5f9f":"## 2.4 Top 10 most expensive countries<a id=\"14\"><\/a>","e11449c3":"Now it is easier to draw conclusions from the list, such as that Spain is ranked 20th out of 47 countries, that the difference with Italy is more than one euro or that the price in German is double that of Spanish (+124%).\n\nTrying to simplify the analysis even more, we can visualize the average price of all European countries in a histogram.","f51678df":"The following list includes the 10 cheapest countries in terms of cost per GB.","18d730ea":"# 2. Data analysis <a id=\"6\"><\/a>","9dd32ee5":"Where the data considered are the following. Note that Spain is located between 25 and 50%, in addition to below the average.","be7a83ed":"Finally, let's check that the data types of each column are correct.","ef697969":"## 2.7 Europe<a id=\"20\"><\/a>","5e4e8fa3":"We can get more data from the countries where prices have risen. Many of them correspond to countries where telecommunications infrastructures are not yet widely deployed, although others such as the Czech Republic, Finland and Canada are a surprise.","9f8d73c6":"What about the United States? We have visualized worldwide and European data and their comparisons with Spain, but in none of the queries we have come across this country. Let's see what position it occupies in the world ranking.","5772623d":"<h1 align=center><font size = 5>Data mobile price<\/font><\/h1>","5e0c0e82":"# 5. Future improvements<a id=\"28\"><\/a>","14ad2981":"## 2.5 Price distribution<a id=\"16\"><\/a>","d847f003":"## 2.1 Cheapest country <a id=\"8\"><\/a>","1849330b":"## 2.3 Top 10 cheapest countries<a id=\"12\"><\/a>","87d9ba06":"The target of this notebook is compare the price of 1GB of data mobile worldwide, and especially analyze how Spain is positioned in the global rank and european countries.\n\nThe analysis is based on the data provided by www.cable.co.uk, who in the month of May published the comparison of 228 countries. For futher details, the following information is avaiable for your consultation:\n<ul>\n\n<li type=\"disc\"><a href=\"https:\/\/s3-eu-west-1.amazonaws.com\/assets.cable.co.uk\/mobile-data-cost\/global-mobile-data-price-comparison-2020.xlsx\">Original dataset<\/a><\/il>\n\n<li type=\"disc\"><a href=\"https:\/\/s3-eu-west-1.amazonaws.com\/assets.cable.co.uk\/mobile-data-cost\/1gb-mobile-data-research-press-release.pdf\">Cable.co.uk analysis<\/a><\/il>\n\n<li type=\"disc\"><a href=\"https:\/\/s3-eu-west-1.amazonaws.com\/assets.cable.co.uk\/mobile-data-cost\/global-broadband-pricing-study-2020-methodology.pdf\">Cable.co.uk methodology<\/a><\/il>\n\n<\/ul>\n\nIn addition, this notebook will be compared with 2019 data, obtained from the Kaggle website through <a href=\"https:\/\/www.kaggle.com\/nulldata\/worldwide-mobile-data-pricing\">this link<\/a>.","8d571ecc":"Mostly islands or sparsely populated countries, grouped by region, the African countries stand out.","5aa7fbe3":"The last year's price drop can be easily visualized by means of a histogram that compares both values. As can be seen, in 2020 prices are more grouped in low quantities and part of the highest values disappear.","d574e55e":"## Table of Contents\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n\n1. [Exploring datasets](#0)<br>\n1.1. [2020 data](#2)<br>\n1.2. [2019 data](#4)<br>\n2. [Data analysis](#6)<br>\n2.1. [Cheapest country](#8)<br>\n2.2. [Most expensive country](#10)<br>\n2.3. [Top 10 cheapest countries](#12)<br>\n2.4. [Top 10 most expensive countries](#14)<br>\n2.5. [Price distribution](#16)<br>\n2.6. [Spain](#18)<br>\n2.7. [Europe](#20)<br>\n2.8. [USA](#22)<br>     \n3. [2019 comparasion](#24) <br>\n4. [Conclusions](#26) <br>\n5. [Future improvements](#28) <br>\n<\/div>\n<hr>","b6470984":"In the previous representation, the values are the following:","4b3de69e":"As in the case of the worldwide analysis, we can visualize the percentages of each price group. As you can see in the comparison, the change is quite significant, especially due to the drastic reduction in high prices.\n\nNow, the group from Spain (highlighted) is the largest.","9dcb6163":"The _Continental region_ column seems to contain a lot of zones. Let's check all this values. \n\nNo grouping task will be carried out, because in some cases it would be necessary to carry out almost a detailed evaluation to make the right decision.","31403746":"The position in the ranking is low, __188th__ of 228 (82% of countries have a lower price), and the average price is __6.8\u20ac__, compared to, for example, 2.7\u20ac on average for European countries. We can get a better idea visualizing it on the histogram.","c20fea09":"# 4. Conclusions<a id=\"26\"><\/a>","142f80ef":"Spain is the __75th__ cheapest country in 1GB data mobile price. The average cost is __1.54\u20ac__","53684467":"__India__ is the country with the lowest average price per GB. If we do not trust the ranking, we can check it by ourselves.","aa2ce698":"## 1.1 2020 data <a id=\"2\"><\/a>","299cd0bd":"To compare, we can merge the 2019 and 2020 data:","e82a0714":"# 3. 2019 comparison<a id=\"24\"><\/a>","94e8c555":"__Note:__ Although the data used came from Cable.co.uk, the analysis tasks for this notebook have been carried out entirely by __Alejandro Vel\u00e1zquez Portas__ (<a href=\"https:\/\/www.linkedin.com\/in\/alexvelazquezp\/\">LinkedIn profile<\/a>). Take this into account when reproducing or citing its content.","f1bb2ca2":"The data has already been previously checked by Cable.co.uk, so this time there is not necessary to perform data cleaning operations.\n\nAlso remark that within the imported data, these are already sorted as a ranking according to the average price of 1GB data mobile in ascending order (_Average price of 1GB (USD)_ column).\n\nHowever, we can still do some tasks to make the handling easier, such as delete not relevant columns, simplifying names and converting the prices to Euro.","9e85c414":"Below is the list of European countries, including the regions of Western Europe, the Baltic countries and Eastern Europe.","a3d82740":"If we represent worldwide values on a box plot, we find that many of the high values are considered outliers.","195d373e":"If we represent European values on a box plot, we have far fewer outliers than in the worldwide case.","8527f4c5":"We start importing the data from the last year:","b63b08b6":"## 1.2 2019 data <a id=\"4\"><\/a>","bb05e292":"Although the list is somewhat complex to follow, Spain is in the middle of the list. We are going to carry out some operations to simplify this list, such as redoing the ranking for Europe and calculating the differentials with respect to the Spanish price."}}