{"cell_type":{"25a9a8ad":"code","25eacb26":"code","ac969387":"code","ab043202":"code","19b80fc7":"code","dce58858":"code","ba5dcf6c":"code","d6cb744f":"code","226380d8":"code","24447bcf":"code","233f590b":"code","dc3eea8f":"code","6fc407a8":"code","7d71ea17":"markdown","80668c3f":"markdown","4e83dfdf":"markdown","1de806de":"markdown"},"source":{"25a9a8ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25eacb26":"!pip install python-vivid","ac969387":"# Dataset tools\nfrom sklearn.datasets import make_classification\n\n# Sklearn Metrics \nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\nfrom sklearn.model_selection import train_test_split\n\n# SKModels\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom vivid.utils import timer, get_logger","ab043202":"logger = get_logger(__name__)","19b80fc7":"def calculate_score(y_true, y_pred):\n    \n    _functions = [\n        accuracy_score,\n        f1_score,\n        precision_score,\n        recall_score\n    ]\n    \n    score_map = {}\n    \n    for func in _functions:\n        score_map[func.__name__] = func(y_true, y_pred)\n        \n    return score_map","dce58858":"X, y = make_classification(n_samples = int(2e2), n_features = 10,)","ba5dcf6c":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.5, shuffle = True)","d6cb744f":"logger.info(f'train: {X_train.shape[0]}, features: {X_train.shape[1]}')","226380d8":"# SVC\nwith timer(logger, prefix = '\\ntime taken for svc : '):\n    \n    svc_model = SVC()\n    \n    svc_model.fit(X_train, y_train)\n    y_pred = svc_model.predict(X_test)\n    \n    score = calculate_score(y_test, y_pred)\n    \n    logger.info(score)","24447bcf":"# Random Classifier\nwith timer(logger, prefix = '\\ntime taken for RandomClassifier: '):\n    \n    r_forest_model = RandomForestClassifier()\n    \n    r_forest_model.fit(X_train, y_train)\n    y_pred = r_forest_model.predict(X_test)\n    \n    score = calculate_score(y_test, y_pred)\n    \n    logger.info(score)","233f590b":"with timer(logger, prefix = '\\ntime taken for KNN: '):\n    \n    knn_model = KNeighborsClassifier()\n    \n    knn_model.fit(X_train, y_train)\n    y_pred = knn_model.predict(X_test)\n    \n    score = calculate_score(y_test, y_pred)\n    \n    logger.info(score)","dc3eea8f":"# Logistic Regression\n\nwith timer(logger, prefix = '\\n time taken for Logistic Regression: '):\n    \n    logreg_model = LogisticRegression()\n    \n    logreg_model.fit(X_train, y_train)\n    y_pred = logreg_model.predict(X_test)\n    \n    score = calculate_score(y_test, y_pred)\n    \n    logger.info(score)","6fc407a8":"# Gaussian NB\n\nwith timer(logger, prefix = '\\n time taken for Gaussian NB: '):\n    \n    gnb_model = GaussianNB()\n    \n    gnb_model.fit(X_train, y_train)\n    y_pred = gnb_model.predict(X_test)\n    \n    score = calculate_score(y_test, y_pred)\n    \n    logger.info(score)","7d71ea17":"![Vividly](https:\/\/www.liberaldictionary.com\/wp-content\/uploads\/2018\/11\/vividly.png)","80668c3f":"To Do:\n\n* Explore python-vivid methods and experiment here\n* Add more documentation","4e83dfdf":"## What is Python-vivid?\n\nIt is a simple supporting tool for our regular Machine Learning work. \n\nFor more information about python-vivid check these links: \n* https:\/\/lucid-lumiere-9b9b91.netlify.app\/\n* https:\/\/pypi.org\/project\/python-vivid\/\n\n\n**Note:**\n\nI didn't focus optimization or any other production ready code here. These codes used only for education purpose which might lack some ML standards.","1de806de":"### How to install python-vivid?\n\n!pip install python-vivid"}}