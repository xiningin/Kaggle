{"cell_type":{"8824da80":"code","607a78cc":"code","0bb4a12a":"code","21cfc3f0":"code","c33ff4da":"code","f67cf965":"code","8cc1202b":"code","4bae348f":"code","4c7aa480":"code","50cefe79":"code","63c6b5dd":"code","081ae455":"code","08533a93":"code","0e54c4f1":"code","a8be53b4":"code","d5722ac3":"code","7478f56d":"code","d96041a1":"code","f5a92a41":"code","92971957":"code","36b96410":"code","f66deb15":"code","3b1bab82":"code","eacceb7e":"code","25d7f308":"code","a2feab86":"markdown","c32d59ec":"markdown","ba57f82f":"markdown","95fb6162":"markdown","a6928669":"markdown","bf94effc":"markdown","87368236":"markdown","fb9dfe49":"markdown","d222768e":"markdown","20212d76":"markdown","f14a960b":"markdown","9f485ef6":"markdown","00967e67":"markdown","bb5bcca8":"markdown","84bef0f8":"markdown","072844bd":"markdown","4b510dfd":"markdown","2e273061":"markdown","3479e7ed":"markdown","89a7eeef":"markdown","c975c277":"markdown","39dbc337":"markdown","09c009c7":"markdown","f3e9d54b":"markdown","0819fc96":"markdown","d6accbf8":"markdown","7a6099f4":"markdown","4308f2f4":"markdown","d345ab01":"markdown","6be7cf70":"markdown"},"source":{"8824da80":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import train_test_split","607a78cc":"dataset_dir = '\/kaggle\/input\/covid19-worldometer-snapshots-since-april-18\/'\nworldometer_df = pd.read_csv(os.path.join(dataset_dir, 'worldometers_snapshots_April18_to_September20.csv'))\nworldometer_df.head(11)","0bb4a12a":"country_name = 'USA'\n\ncountry_df = worldometer_df.loc[worldometer_df['Country'] == country_name, :]\ncountry_df = country_df.reset_index(drop=True)\n\ncountry_df.head(7).append(country_df.tail(7))","21cfc3f0":"selected_date = datetime.strptime('01\/07\/2020', '%d\/%m\/%Y')\n\nselected_date_df = worldometer_df.loc[worldometer_df['Date'] == selected_date.strftime('%Y-%m-%d'), :]\nselected_date_df = selected_date_df.reset_index(drop=True)\nselected_date_df.head(11)","c33ff4da":"last_date = datetime.strptime('20\/09\/2020', '%d\/%m\/%Y')\n\nlast_date_df = worldometer_df.loc[worldometer_df['Date'] == last_date.strftime('%Y-%m-%d'), :]\nlast_date_df = last_date_df.reset_index(drop=True)\nlast_date_df.head(26)","f67cf965":"# remove china as clear outlier and highly suspect reporting\nlast_date_df = last_date_df.drop(np.nonzero(np.array(last_date_df.loc[:,'Country'] == 'China'))[0], axis=0).reset_index(drop=True)","8cc1202b":"last_date_df['Case Fatality Ratio'] = last_date_df['Total Deaths'] \/ last_date_df['Total Cases']\n\nbins = np.arange(13)\ncounts, _ = np.histogram(100 * np.array(last_date_df['Case Fatality Ratio']), bins=bins)\n\nplt.figure(figsize=(12,8))\nplt.bar(bins[:-1], counts, facecolor='blue', edgecolor='black')\nplt.xlabel('Death Rate (%)', fontsize=16)\nplt.ylabel('Number of Countries in each bin', fontsize=16)\nplt.title('Histogram of Death Rates for various Countries', fontsize=18);","4bae348f":"min_number_of_cases = 10000\n\ngreatly_affected_df = last_date_df.loc[last_date_df['Total Cases'] > min_number_of_cases,:]\n\nbins = np.arange(13)\ncounts, _ = np.histogram(100 * np.array(greatly_affected_df['Case Fatality Ratio']), bins=bins)\n\nplt.figure(figsize=(12,8))\nplt.bar(bins[:-1], counts, facecolor='blue', edgecolor='black')\nplt.xlabel('Death Rate (%)', fontsize=16)\nplt.ylabel('Number of Countries in each bin', fontsize=16)\nplt.title('Histogram of Death Rates for various Countries', fontsize=18);","4c7aa480":"last_date_df['Num Tests per Positive Case'] = last_date_df['Total Tests'] \/ last_date_df['Total Cases']\n\ngreatly_affected_df = last_date_df.loc[last_date_df['Total Cases'] > min_number_of_cases,:]\n\n# limit the x-axis so that the scatter plot will not be empty on the right side\nx_axis_limit = 75\nrandom_limit_vec = x_axis_limit + 15 * np.random.rand(greatly_affected_df.shape[0])\n\ndeath_rate_percent = 100 * np.array(greatly_affected_df['Case Fatality Ratio'])\nnum_test_per_positive = np.array(greatly_affected_df['Num Tests per Positive Case'])\nnum_test_per_positive[num_test_per_positive > random_limit_vec] = random_limit_vec[num_test_per_positive > random_limit_vec]\ntotal_num_deaths = np.array(greatly_affected_df['Total Deaths'])\npopulation = np.array(greatly_affected_df['Population'])\n\nplt.figure(figsize=(16,12))\nplt.scatter(x=num_test_per_positive, y=death_rate_percent, \n            s=0.5*np.power(np.log(1+population),2), \n            c=np.log10(1+total_num_deaths))\nplt.colorbar()\nplt.ylabel('Death Rate (%)', fontsize=16)\nplt.xlabel('Number of Tests per Positive Case', fontsize=16)\nplt.title('Death Rate as function of Testing Quality', fontsize=18)\nplt.xlim(-2, x_axis_limit + 30)\nplt.ylim(-0.2,13)\n\n# plot on top of the figure the names of the\n#countries_to_display = greatly_affected_df['Country'].unique().tolist()\n\ncountries_to_display = ['USA', 'Brazil', 'Russia', 'Spain', 'UK', 'Italy', 'France',\n                        'Germany', 'India', 'Iran', 'Canada', 'Mexico', 'Norway',\n                        'Belgium', 'Pakistan', 'Netherlands', 'Qatar', 'Ecuador', \n                        'Sweden', 'Singapore', 'Portugal', 'UAE', 'Ireland', 'Malaysia',\n                        'South Africa', 'Poland', 'Kuwait', 'Ukraine', 'Venezuela',\n                        'Romania', 'Egypt', 'Israel', 'Japan', 'Austria', 'Philippines', \n                        'Denmark', 'S. Korea', 'Serbia', 'Afghanistan', 'Ethiopia',\n                        'Bahrain', 'Czechia', 'Kazakhstan','Nepal', 'Uzbekistan','Greece',\n                        'Algeria', 'Australia', 'Moldova', 'Ghana', 'Bulgaria',\n                        'Armenia', 'Bolivia', 'Cameroon', 'Iraq', 'Azerbaijan','Morocco']\n\nfor country_name in countries_to_display:\n    country_index = greatly_affected_df.index[greatly_affected_df['Country'] == country_name]\n    plt.text(x=num_test_per_positive[country_index] + 0.5,\n             y=death_rate_percent[country_index] + 0.2,\n             s=country_name, fontsize=10);","50cefe79":"tests_per_positive_bins = [[0,30], [30,60], [60,400]]\n\ndeath_rate_percent    = 100 * np.array(greatly_affected_df['Case Fatality Ratio'])\nnum_test_per_positive = np.array(greatly_affected_df['Num Tests per Positive Case'])\ntotal_num_deaths      = np.array(greatly_affected_df['Total Deaths'])\ntotal_num_cases       = np.array(greatly_affected_df['Total Cases'])\n\ndeath_rate_average = []\ndeath_rate_variability = []\ndeath_rate_standard_error = []\nfor tests_bin in tests_per_positive_bins:\n    countries_in_bin = np.logical_and(num_test_per_positive > tests_bin[0], num_test_per_positive <= tests_bin[1])\n    \n    death_rates_in_bin = death_rate_percent[countries_in_bin]\n    death_rate_average.append(death_rates_in_bin.mean())\n    death_rate_variability.append(death_rates_in_bin.std())\n    death_rate_standard_error.append(death_rates_in_bin.std()\/np.sqrt(len(death_rates_in_bin)))\n\nbins_locs = range(len(tests_per_positive_bins))\nplt.figure(figsize=(8,8))\nplt.bar(bins_locs, death_rate_average, yerr=death_rate_standard_error, \n        facecolor='blue', edgecolor='black')\nplt.xticks(bins_locs, [str(x) for x in tests_per_positive_bins])\nplt.title('Death Rate as function of Testing Quality', fontsize=18)\nplt.ylabel('Death Rate (%)', fontsize=16)\nplt.xlabel('Number of Tests per Positive Case', fontsize=16);","63c6b5dd":"good_testing_threshold = 60\ngood_testing_df = greatly_affected_df.loc[greatly_affected_df['Num Tests per Positive Case'] > good_testing_threshold,:]\ngood_testing_df = good_testing_df.reset_index(drop=True)\ngood_testing_df","081ae455":"estimated_death_rate_percent = 100 * good_testing_df['Total Deaths'].sum() \/ good_testing_df['Total Cases'].sum()\n\nprint('Death Rate only for \"good testing countries\" is %.2f%s' %(estimated_death_rate_percent,'%'))","08533a93":"population_age_df = pd.read_csv(os.path.join(dataset_dir, 'population_structure_by_age_per_contry.csv'))\npopulation_age_df.head(11)","0e54c4f1":"pop_older_df = population_age_df.loc[:,['Country','Fraction age 65+ years']]\n\ngreatly_affected_age_df = greatly_affected_df.merge(pop_older_df, on='Country')\ngreatly_affected_age_df.head(16)","a8be53b4":"death_rate_percent = 100 * np.array(greatly_affected_age_df['Case Fatality Ratio'])\npercent_older = 100 * np.array(greatly_affected_age_df['Fraction age 65+ years'])\ntotal_num_deaths = np.array(greatly_affected_age_df['Total Deaths'])\npopulation = np.array(greatly_affected_age_df['Population'])\n\nplt.figure(figsize=(16,12))\nplt.scatter(x=percent_older, y=death_rate_percent, \n            s=0.5*np.power(np.log(1+population),2), \n            c=np.log10(1+total_num_deaths))\nplt.colorbar()\nplt.ylabel('Death Rate (%)', fontsize=16)\nplt.xlabel('Percent of population 65 years or older', fontsize=16)\nplt.title('Death Rate as function of Fraction of Older Population', fontsize=18)\nplt.ylim(-0.2,13)\nplt.xlim(-0.2,31)\n\n# plot on top of the figure the names of the\n#countries_to_display = greatly_affected_df['Country'].unique().tolist()\ncountries_to_display = ['USA', 'Brazil', 'Russia', 'Spain', 'UK', 'Italy', 'France',\n                        'Germany', 'India', 'Iran', 'Canada', 'Mexico', \n                        'Belgium', 'Pakistan', 'Netherlands', 'Qatar', 'Ecuador', \n                        'Belarus', 'Sweden', 'Singapore', 'Portugal', 'UAE', 'Ireland', \n                        'South Africa', 'Poland', 'Kuwait', 'Colombia', 'Ukraine', 'Venezuela',\n                        'Romania', 'Egypt', 'Israel', 'Japan', 'Austria', 'Philippines', \n                        'Argentina', 'Denmark', 'S. Korea', 'Serbia', 'Ethiopia',\n                        'Bahrain', 'Czechia', 'Kazakhstan','Nepal',\n                        'Algeria', 'Australia', 'Moldova', 'Ghana', 'Bulgaria',\n                        'Armenia', 'Cameroon', 'Iraq', 'Azerbaijan', 'Morocco']\n\nfor country_name in countries_to_display:\n    country_index = greatly_affected_df.index[greatly_affected_age_df['Country'] == country_name]\n    plt.text(x=percent_older[country_index] + 0.25,\n             y=death_rate_percent[country_index] + 0.02,\n             s=country_name, fontsize=10)","d5722ac3":"good_testing_age_df = good_testing_df.merge(pop_older_df, on='Country')\ngood_testing_age_df","7478f56d":"fraction_older_at_IFR = sum(good_testing_age_df['Total Deaths'] * good_testing_age_df['Fraction age 65+ years']) \/ sum(good_testing_age_df['Total Deaths'])\nestimated_IFR = good_testing_age_df['Total Deaths'].sum() \/ good_testing_age_df['Total Cases'].sum()\n\nprint('Estimtaed IFR for a country with %.1f%s of population older than 65 years old is %.2f%s' %(100 * fraction_older_at_IFR,'%',100 * estimated_IFR,'%'))","d96041a1":"all_countries_age_df = last_date_df.merge(pop_older_df, on='Country')\nall_countries_age_df['Estimated Infection Fatality Ratio'] = (all_countries_age_df['Fraction age 65+ years'] \/ fraction_older_at_IFR) * estimated_IFR\n#all_countries_age_df.head(11)","f5a92a41":"all_countries_age_df['Total Infected'] = all_countries_age_df['Total Deaths'] \/ all_countries_age_df['Estimated Infection Fatality Ratio']\nall_countries_age_df['Total Infected'] = all_countries_age_df[['Total Infected','Total Cases']].max(axis=1)\n\nnon_nan_cols = np.logical_not(np.isnan(all_countries_age_df['Total Infected']))\nall_countries_age_df.loc[non_nan_cols,'Total Infected'] = all_countries_age_df.loc[non_nan_cols,'Total Infected'].astype(int)\n#all_countries_age_df.head(11)","92971957":"all_countries_age_df['Percent Infected'] = 100 * all_countries_age_df['Total Infected'] \/ all_countries_age_df['Population']\n\ncols_to_use = ['Country', 'Population', 'Total Infected', 'Total Deaths', 'Estimated Infection Fatality Ratio', 'Fraction age 65+ years', 'Num Tests per Positive Case', 'Percent Infected']\n\nmin_population_to_display = 1000000\n\nall_countries_sorted_df = all_countries_age_df.sort_values(by=['Percent Infected'], ascending=False)[cols_to_use]\nall_countries_sorted_df = all_countries_sorted_df[all_countries_sorted_df['Population'] > min_population_to_display].reset_index(drop=True)\n#all_countries_sorted_df.head(22)","36b96410":"all_countries_sorted_clean_df = all_countries_sorted_df.copy()\n\nall_countries_sorted_clean_df['Population (M)']          = all_countries_sorted_df['Population'] \/ 1000000\nall_countries_sorted_clean_df['Total Infected (K)']      = all_countries_sorted_df['Total Infected'] \/ 1000\nall_countries_sorted_clean_df['Total Deaths (K)']        = all_countries_sorted_df['Total Deaths'] \/ 1000\nall_countries_sorted_clean_df['Estimated IFR (%)']       = 100 * all_countries_sorted_df['Estimated Infection Fatality Ratio']\nall_countries_sorted_clean_df['Age 65+ years (%)']       = 100 * all_countries_sorted_df['Fraction age 65+ years']\nall_countries_sorted_clean_df['Population Infected (%)'] = all_countries_sorted_df['Percent Infected']\n\nnum_decimals_to_show = {'Population (M)': 2, 'Total Infected (K)': 2, \n                         'Total Deaths (K)': 2, 'Estimated IFR (%)': 2,\n                         'Age 65+ years (%)': 2, 'Num Tests per Positive Case': 2,\n                         'Population Infected (%)': 2}\n\ncols_to_display = ['Country', 'Population (M)', 'Total Infected (K)', 'Total Deaths (K)', 'Estimated IFR (%)', 'Age 65+ years (%)', 'Num Tests per Positive Case', 'Population Infected (%)']\n\nall_countries_sorted_clean_df = all_countries_sorted_clean_df.round(num_decimals_to_show)[cols_to_display]\n\n#all_countries_sorted_clean_df.head(31).style.background_gradient(subset=['Total Infected (K)', 'Total Deaths (K)', 'Population Infected (%)'], cmap='jet')\nall_countries_sorted_clean_df.head(31).style.background_gradient(subset=['Population Infected (%)'], cmap='jet')","f66deb15":"countries_to_plot = ['Australia', 'Japan', 'Israel', 'India', 'USA', 'Uzbekistan', 'Spain','France']\nnum_countries = len(countries_to_plot)\n\nplt.figure(figsize=(20,30))\nplt.subplots_adjust(left=0.05, right=0.95, top=0.95, bottom=0.05, hspace=0.15)\nfor k, country_name in enumerate(countries_to_plot):\n\n    country_df = worldometer_df.loc[worldometer_df['Country'] == country_name, :]\n    country_df = country_df.reset_index(drop=True)\n\n    daily_cases = country_df['Total Cases'].diff()\n    daily_cases[daily_cases < 1] = 1\n    \n    plt.subplot(num_countries,1,k+1); plt.bar(country_df['Date'], daily_cases)\n    plt.title(country_name, fontsize=20)\n    if k < num_countries-1:\n        plt.xticks([], [])\n    else:\n        plt.xticks(rotation=90)\n    plt.ylabel('daily new cases')","3b1bab82":"min_number_of_cases = 10000\ngreatly_affected_df = last_date_df.loc[last_date_df['Total Cases'] > min_number_of_cases,:]\n\nlist_of_all_countries = greatly_affected_df['Country'].unique().tolist()\nlist_of_all_dates = worldometer_df['Date'].unique().tolist()\n\ntests_matrix = np.zeros((len(list_of_all_countries), len(list_of_all_dates)))\ncases_matrix = np.zeros((len(list_of_all_countries), len(list_of_all_dates)))\ndeaths_matrix = np.zeros((len(list_of_all_countries), len(list_of_all_dates)))\n\nfor k, country_name in enumerate(list_of_all_countries):\n\n    country_df = worldometer_df.loc[worldometer_df['Country'] == country_name, :]\n    country_df = country_df.reset_index(drop=True)\n    \n    tests_matrix[k,:]  = country_df['Total Tests']\n    cases_matrix[k,:]  = country_df['Total Cases']\n    deaths_matrix[k,:] = country_df['Total Deaths']\n    \ntests_matrix[np.isnan(tests_matrix)] = 0\ncases_matrix[np.isnan(cases_matrix)] = 0\ndeaths_matrix[np.isnan(deaths_matrix)] = 0\n\n#print(list_of_all_countries)","eacceb7e":"tests_matrix_norm  = tests_matrix  \/ np.tile(np.maximum(100, tests_matrix.max(axis=1, keepdims=True)), (1, tests_matrix.shape[1]))\ncases_matrix_norm  = cases_matrix  \/ np.tile(np.maximum(100, cases_matrix.max(axis=1, keepdims=True)), (1, cases_matrix.shape[1]))\ndeaths_matrix_norm = deaths_matrix \/ np.tile(np.maximum(100, deaths_matrix.max(axis=1, keepdims=True)), (1, deaths_matrix.shape[1]))\n\ndaily_tests_matrix_norm = np.diff(tests_matrix_norm, axis=1)\ndaily_cases_matrix_norm = np.diff(cases_matrix_norm, axis=1)\ndaily_deaths_matrix_norm = np.diff(deaths_matrix_norm, axis=1)\n\nfrom scipy import signal\n\nwindow_std = 4\nwindow_size = 11\nfiltering_window_tests = signal.gaussian(window_size, std=window_std)[np.newaxis]\nfiltering_window_tests \/= filtering_window_tests.sum()\n\nwindow_std = 2.5\nwindow_size = 11\nfiltering_window = signal.gaussian(window_size, std=window_std)[np.newaxis]\nfiltering_window \/= filtering_window.sum()\n\n\ndaily_tests_matrix_norm_smoothed = signal.fftconvolve(daily_tests_matrix_norm, filtering_window_tests, mode='valid')\ndaily_cases_matrix_norm_smoothed = signal.fftconvolve(daily_cases_matrix_norm, filtering_window, mode='valid')\ndaily_deaths_matrix_norm_smoothed = signal.fftconvolve(daily_deaths_matrix_norm, filtering_window, mode='valid')\n\ndaily_tests_matrix_norm_smoothed[daily_tests_matrix_norm_smoothed > 0.04] = 0.04\ndaily_cases_matrix_norm_smoothed[daily_cases_matrix_norm_smoothed > 0.04] = 0.04\ndaily_deaths_matrix_norm_smoothed[daily_deaths_matrix_norm_smoothed > 0.04] = 0.04\n\ndaily_tests_matrix_norm_smoothed[daily_tests_matrix_norm_smoothed < 0] = 0\ndaily_cases_matrix_norm_smoothed[daily_cases_matrix_norm_smoothed < 0] = 0\ndaily_deaths_matrix_norm_smoothed[daily_deaths_matrix_norm_smoothed < 0] = 0\n\nplt.figure(figsize=(15,15));\nplt.subplot(3,1,1); plt.plot(daily_tests_matrix_norm_smoothed.T); plt.title('tests', fontsize=20);\nplt.subplot(3,1,2); plt.plot(daily_cases_matrix_norm_smoothed.T); plt.title('cases', fontsize=20);\nplt.subplot(3,1,3); plt.plot(daily_deaths_matrix_norm_smoothed.T); plt.title('deaths', fontsize=20);","25d7f308":"plt.figure(figsize=(15,50));\n\nfor k in range(15):\n    plt.subplot(15, 1, k + 1); plt.title(list_of_all_countries[k], fontsize=20)\n    plt.plot(daily_tests_matrix_norm_smoothed[k,:].T, color='g');\n    plt.plot(daily_cases_matrix_norm_smoothed[k,:].T, color='orange');\n    plt.plot(daily_deaths_matrix_norm_smoothed[k,:].T, color='r');\n    plt.legend(['tests','cases','deaths'])\n    ","a2feab86":"# Build a country X time matrix for cases, deaths and tests ","c32d59ec":"### First, calculate the mean fraction of 65+ years old peope for our estimated IFR","ba57f82f":"## Merge the two tables","95fb6162":"## Lets take the last available date and continue our analysis on it","a6928669":"## Display a sub-table of a specific country (first and last dates available)","bf94effc":"### Remove China from dataset\nChina had suspect reporting issues from the get go of this pandemic","87368236":"# Lets calculate the Death Rate for those countries","fb9dfe49":"## Look at data from best testing countries\nLets decide that the cutoff for \"good testing country\" is 55 tests per positive case (less than 2% positivity rate)","d222768e":"# Estimating COVID-19 True Death and Infection Rates\n\nIn this notebook we try to estimate the true death and true infection rate for each country of COVID-19.  \nWe will attempt to do this **based only on reported number of cases, deaths and tests by each country** and also utilize data about the population age distribution of each country.  \n\nFor this purpose we will use a [worldometer snapshots dataset](https:\/\/www.kaggle.com\/selfishgene\/covid19-worldometer-snapshots-since-april-18) I've collected in the past several months that contains, among other things, the most credible and extensive data (that I know of) about testing in all countries\n\n![image](https:\/\/i.ibb.co\/hfSkvhX\/worldometer-snapshot-sorted-by-total-deaths.png)\n\nFollowing this analsysis we ask wheather the COVID-19 pandemic is over, and for this purpose we utilize the full [Johns Hopkings dataset](https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset) (uploaded by [SRK](https:\/\/www.kaggle.com\/sudalairajkumar) here on kaggle)\n\n\nThe logical path we will take for the purpose of **estimating true death and infection rates** is:\n* Some countries conduct large amounts of tests and some countries conduct a small amount of tests\n* We will assume that countries that conduct many tests (compared to the number of actual cases they have) are very close to discovering almost all of the infected people among them\n* We will then calculate the CFR for those countries (CFR - case fatality ratio) and just assert that it's close to the true IFR (IFR - infection fatality ratio) for those countries\n* We will average the IFR for the \"good testing countries\" and is the true IFR of COVID-19\n* We will then assume that the IFR is country depended only through the age distribution of that country\n* Based on population structure of each country (fraction of the population that is older than 65 years old) we will calculate the estimated country specific IFR (e.g. we expect a country with younger population to have a smaller infection fatality rate than a country with a very old population)  \n* We then use that number to lower bound the actual infection in a country (e.g. if IFR is 1% for a given country with a given age structure, and the number of confirmed deaths in that country is 3,456, then we will assume that the total number of infected people in that country is at least 3456*100 = 345,600, even if that country has only reported 56,789 cases)\n* We then divide the resulting number with the population to get the true Infection Rate for each country","20212d76":"## Group contriues into testing quality bins and show mean +\/- stdev","f14a960b":"We can see that the spread is somewhat reduced, but is still large and un accounted for","9f485ef6":"### Display the normalized daily tests, cases, deaths for majorly affected countries","00967e67":"## Lets now examine relationship with age\nWe know COVID-19 is especially dengeruous for the older population, let's look if this relationship is repersented in the data","bb5bcca8":"## Display the countries with largest estimated percent of the population that were infected\n#### NOTE: these are lower bounds, true numbers are likely substantially higher in most countries","84bef0f8":"## Show scatter plot of Death Rate vs Fraction 65+ yo population in each country","072844bd":"## Show normalized (test, cases, deaths) per country","4b510dfd":"# Is COVID-19 pandemic over?\nFor anwering this question, we use also the [dataset](https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset) by Johns Hopkins University uploaded by [SRK](https:\/\/www.kaggle.com\/sudalairajkumar) as it contains all data since the begining of the pandemic and not only since mid april as we have in this dataset","2e273061":"# Estimate the infection fatality rate (IFR) for each country  \nFor this we will assume that for good testing contries the case fatality rate (CFR) is similar to the infection fatality rate (IFR)  \nWe've already verified that there is great dependece of CFR due to age of the population, so we will calibrate each countrie's IFR based on the fraction of people older than 65 years old, e.g. we expect the IFR of a country with 5% 65+ year old population to be 4 times smaller than a country with 20% 65+ year old population  \n  \nNOTE: this calibration assumes that only people older than 65 years old are dying from the disease, which is only an approximation, but it's not a bad one (it is estimated that only 5% of COVID-19 deaths are of people younger than 65 years)","3479e7ed":"# Note that this value correponds well to the estimated IFR in New York City\nNYC, up to now, is the hardest hit place in the world with COVID-19.  \nApprixmatley 20% of the population in NYC were estimated to be infected (had COVID-19 antibodies in their blood based on a sersurvey conducetd in late April)  \n\nNOTE: Most widely used antibody tests have high false positive rates (~1%), and therefore they will result in wrong conclutions if applied to areas with low infection rates. \nAs NYC was the hardest hit place, it's likely to assume this NYC serosurvey is one of the best for the purpuse of IFR estimation\n\nfull details can be found here:\n[https:\/\/www.worldometers.info\/coronavirus\/coronavirus-death-rate\/](https:\/\/www.worldometers.info\/coronavirus\/coronavirus-death-rate\/)","89a7eeef":"# Filter out countries with small amount of cases\nmaybe the spread is due to small samples sizes for countries with small amounts of cases","c975c277":"## First, calculate the naive death rate for each country and show histogram","39dbc337":"## Load the main data table and display it","09c009c7":"## Estimate the true infection rate for each country\nbased on country sepecific IFR estimation we can put up a tighter lower bound on the true number of infected people solely based on the reported number of deaths for that country","f3e9d54b":"We can see that the better the testing, the lower the variability of the the death between the different countries  \nThe color represents the total number of deaths (on a log scale)\n\nNOTE: countries with more than 75 cases per positive have been clipped in order to be properly displayied on the same graph","0819fc96":"## Plot scatter of death rate as function of testing quality\nWe know some countries were more responsible regarding their testing strategy and some were less so\nlet's plot the death rate as function of testing quality (as mesured by number of tests performed per every positive case)","d6accbf8":"## Note that many countries have macroscopic infection rates\nIn Peru for example, at least 1 of every 12 people was infected, and at least 1 of every 200 people has died\nIn Belgium for example, at least 1 of every 22 people was infected, and at least 1 of every 1200 people has died","7a6099f4":"## It does appear there is correlation with age as well\n\n**Disclaimer**: much of this correlation might just be a consequence of the simple fact that most european countries have been hit first and responded slowly, and that they also happen to have a very old population. Also, the fraction of older population is an indication of a developed country which is a possible confounder in addition to western countries being hit first by the virus","4308f2f4":"## Display a sub-table of a specific date","d345ab01":"### We see a large spread of death rates between countries\nThis shouldn't be the case normally, as humans are humans and are likely affected similarly by the disease in various regions of the world  \n### The question arises: **what can explain this spread?**","6be7cf70":"### Fist, Plot the daily cases for several selected countries "}}