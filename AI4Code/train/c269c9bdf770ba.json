{"cell_type":{"19bee140":"code","e402f5a6":"code","f27a1b66":"code","d082510f":"code","48236a12":"code","d267e5f2":"code","a5b20d16":"code","6996aeed":"code","624c2340":"code","f1d995bf":"code","bf9148d7":"markdown"},"source":{"19bee140":"\nimport matplotlib.pyplot as plt\nimport random\nimport time\nimport os\n\nimport numpy as np\nfrom sklearn.pipeline import make_pipeline\n# Binary Relevance\nfrom sklearn.multiclass import OneVsRestClassifier\n\n# Performance metric\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.metrics import hamming_loss\nfrom sklearn.metrics import label_ranking_average_precision_score\nfrom sklearn.metrics import multilabel_confusion_matrix\nfrom sklearn.metrics import classification_report\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n\nfrom sklearn.model_selection import cross_val_score","e402f5a6":"ACTIONS = [\"kiri\", \"maju\",\"idle\",\"kanan\"]\nreshape = (-1,8, 60)\n","f27a1b66":"def create_data(starting_dir=\"..\/input\/eeg8chanel\/data8\"):\n    training_data = {}\n    for action in ACTIONS:\n        if action not in training_data:\n            training_data[action] = []\n        data_dir = os.path.join(starting_dir,action)\n        for item in os.listdir(data_dir):\n            data = np.load(os.path.join(data_dir, item))\n            for item in data:\n                training_data[action].append(item)\n\n    lengths = [len(training_data[action]) for action in ACTIONS]\n    print(lengths)\n\n    for action in ACTIONS:\n        np.random.shuffle(training_data[action])  \n        training_data[action] = training_data[action][:min(lengths)]\n\n    lengths = [len(training_data[action]) for action in ACTIONS]\n    print(lengths)\n    combined_data = []\n    for action in ACTIONS:\n        for data in training_data[action]:\n            if action == \"kiri\":\n                combined_data.append([data, [1, 0, 0,0]])\n            elif action == \"maju\":\n                combined_data.append([data, [0, 1, 0, 0]])\n            elif action == \"idle\":\n                combined_data.append([data, [0, 0, 1, 0]])\n            elif action == \"kanan\":\n                combined_data.append([data, [0, 0, 0, 1]])\n\n    np.random.shuffle(combined_data)\n    print(\"length:\",len(combined_data))\n    return combined_data\n","d082510f":"print(\"creating training data\")\ntraindata = create_data(starting_dir=\"..\/input\/eeg8chanel\/data8\")\ntrain_X = []\ntrain_y = []\n\nfor X, y in traindata:\n    train_X.append(X)\n    train_y.append(y)\n    \n\n","48236a12":"train_X = np.array(train_X).reshape(1000,480)\ntrain_y = np.array(train_y)\ntrain_X.shape,train_y.shape\n","d267e5f2":"x_train,x_test,y_train,y_test=train_test_split(train_X,train_y,test_size=0.2 )\nx_train.shape,y_train.shape, x_test.shape , y_test.shape","a5b20d16":"y_tn=np.argmax(y_train, axis=1)\ny_tt=np.argmax(y_test, axis=1)","6996aeed":"\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","624c2340":"\npipeline_lr=Pipeline([('scalar1',StandardScaler()),\n                     ('pca1',PCA(n_components=2)),                     \n                     ('lr_classifier',RandomForestClassifier(n_estimators=50, random_state=1))])\nmodel = pipeline_lr.fit(x_train, y_tn)\nY_pred = model.predict(x_test)\nprint(classification_report(y_tt, Y_pred))\nmodel.score(x_test,y_tt)","f1d995bf":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n\n\npipeline_rf=Pipeline([('scalar1',StandardScaler()),\n                     ('pca1',PCA(n_components=8)), \n                     ('lr_classifier',RandomForestClassifier())])\n\npipeline_lr=Pipeline([('scalar1',StandardScaler()),\n                     ('pca1',PCA(n_components=8)), \n                     ('lr_classifier',LogisticRegression())])\n\npipeline_dt=Pipeline([('scalar2',StandardScaler()),\n                     ('pca2',PCA(n_components=8)),\n                     ('dt_classifier',DecisionTreeClassifier())])\n\npipeline_svm = Pipeline([('scalar3', StandardScaler()),\n                      ('pca3', PCA(n_components=8)),\n                      ('clf', svm.SVC())])\n\npipeline_knn=Pipeline([('scalar4',StandardScaler()),\n                     ('pca4',PCA(n_components=8)),\n                     ('knn_classifier',KNeighborsClassifier())])\n\npipeline_sgd=Pipeline([('scalar1',StandardScaler()),\n                     ('pca1',PCA(n_components=8)), \n                     ('lr_classifier',SGDClassifier())])\n\npipeline_lda=Pipeline([('scalar1',StandardScaler()),\n                     ('pca1',PCA(n_components=8)), \n                     ('lr_classifier',LinearDiscriminantAnalysis())])\n\npipeline_ada=Pipeline([('scalar1',StandardScaler()),\n                     ('pca1',PCA(n_components=8)), \n                     ('lr_classifier',AdaBoostClassifier())])\n\npipeline_gb=Pipeline([('scalar1',StandardScaler()),\n                     ('pca1',PCA(n_components=8)), \n                     ('lr_classifier',GaussianNB())])\n\n\n\npipelines = [pipeline_lr, pipeline_dt,pipeline_svm, pipeline_knn,pipeline_rf,\n             pipeline_sgd,pipeline_lda,pipeline_ada,pipeline_gb]\npipe_dict = {0: 'Logistic Regression',\n             1: 'Decision Tree',\n             2: 'Support Vector Machine',\n             3:'K Nearest Neighbor',\n             4:'RandomForestr',\n             5:'SGDClassifier',\n             6:'LinearDiscriminantAnalysis',\n             7:'AdaBoostClassifier',\n             8:'GaussianNB',\n            }\nfor pipe in pipelines:\n  pipe.fit(x_train, y_tn)\nfor i,model in enumerate(pipelines):\n    print(\"{} Test Accuracy:{}\".format(pipe_dict[i],model.score(x_test,y_tt)))","bf9148d7":"# DATA"}}