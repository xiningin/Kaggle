{"cell_type":{"138c005d":"code","85fd4427":"code","12badbf5":"code","dfeaaa6e":"code","89279d22":"code","447f1464":"code","19ed34b6":"code","7332d637":"code","11ca312c":"code","48c9021c":"code","538b1d50":"code","76c6cde1":"code","352ef210":"code","698bdf8a":"code","bf9c7046":"code","4e4a8fec":"code","96ced93b":"code","16224af6":"code","a54388f9":"code","b3c26325":"code","de9d9fa8":"code","d206567d":"code","1a279d20":"code","1c664b22":"code","eb4ef49f":"code","e0d0b3ae":"code","77975417":"code","680161dd":"markdown","e2a5878a":"markdown","43c3b274":"markdown","29348763":"markdown","4e78b8c9":"markdown","67530b8e":"markdown","ba0073ff":"markdown","1becc952":"markdown","0e3d2e80":"markdown","fe56e6c5":"markdown","9c9a0736":"markdown","eb5215a0":"markdown","1dbfb110":"markdown","58d92bc3":"markdown","1ba781cb":"markdown","298ccb6a":"markdown","1bc0c20c":"markdown","a92f6545":"markdown","f006d7c3":"markdown","326fb289":"markdown","ecc5d5cd":"markdown"},"source":{"138c005d":"# Data Manipulation \nimport numpy as np\nimport pandas as pd\n\n# Visualization \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Feature Selection and Encoding\nfrom sklearn.feature_selection import RFE, RFECV\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder,StandardScaler\n\n# Machine learning \nfrom sklearn import model_selection,preprocessing, metrics, linear_model\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, Ridge, Lasso\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,BaggingClassifier,AdaBoostClassifier,GradientBoostingClassifier\n\n# Grid and Random Search\nimport scipy.stats as st\nfrom scipy.stats import randint as sp_randint\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Metrics\nfrom sklearn.metrics import precision_recall_fscore_support, roc_curve, auc\n\n# Managing Warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Plot the Figures Inline\n%matplotlib inline","85fd4427":"df_train=pd.read_csv('..\/input\/human-activity-recognition-with-smartphones\/train.csv')\ndf_train.head()","12badbf5":"shape= df_train.shape\nprint(shape)","dfeaaa6e":"df_train.info()","89279d22":"df_train['Activity'].value_counts().plot(kind='bar')\nplt.legend()","447f1464":"df_train=df_train.drop('subject',axis=1)","19ed34b6":"X=df_train.iloc[:,0:len(df_train.columns)-1]\ny=df_train.iloc[:,-1]","7332d637":"le=LabelEncoder()\ny=le.fit_transform(y)","11ca312c":"le_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\nprint(le_name_mapping)","48c9021c":"sc=StandardScaler()\nX=sc.fit_transform(X)","538b1d50":"x=pd.DataFrame(X)\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nvif = [variance_inflation_factor(x.values,i) \nfor i in range(x.shape[1])]\nM=pd.DataFrame({'vif':vif},index=x.columns)\nprint(M)","76c6cde1":"pca =PCA(0.95) #95% variance\nX_pca=pca.fit_transform(X) #for training data\n","352ef210":"print(pca.n_components_)","698bdf8a":"models=[]\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append((\"RF\",RandomForestClassifier(n_estimators=100)))\nmodels.append((\"AB\",AdaBoostClassifier(LogisticRegression())))\n","bf9c7046":"results = []\nnames = []\nfor name,model in models:\n    skf  = model_selection.StratifiedKFold(shuffle=True,n_splits=15,random_state=0)\n    cv_results =model_selection.cross_val_score(model,X_pca,y,cv=skf,scoring='f1_weighted')\n    print(cv_results)\n    results.append(cv_results)\n    names.append(name)\n    #print(\"%s: %f (%f)\" % (name, np.mean(cv_results),np.var(cv_results,ddof=1)))\n    print()\n    print('F1SCORE WEIGHTED:',name,':',np.mean(cv_results))\n    print('BIAS ERROR OF',name,':',1-np.mean(cv_results))\n    print('VARIANCE ERROR OF',name,':',np.var(cv_results,ddof=1))\n    print('------------------------------------------------------------------------------------------------------------')","4e4a8fec":"from sklearn.model_selection import GridSearchCV \n  \n# Creating the hyperparameter grid \nparam_grid = {'penalty':['l1','l2']} \n  \n# Instantiating logistic regression classifier \nlr = LogisticRegression() \n  \n# Instantiating the GridSearchCV object \nlr_cv = GridSearchCV(lr, param_grid, cv = 5) \n  \nlr_cv.fit(X_pca,y) \n  \n# Print the tuned parameters and score \nprint(\"Tuned Logistic Regression Parameters: {}\".format(lr_cv.best_params_))  \nprint(\"Best score is {}\".format(lr_cv.best_score_)) ","96ced93b":"skf=model_selection.StratifiedKFold(shuffle=True,n_splits=15,random_state=0)\nLR=LogisticRegression(penalty='l1')\nresults=model_selection.cross_val_score(LR,X_pca,y,cv=skf,scoring='f1_weighted')\nprint('F1SCORE WEIGHTED:',':',np.mean(results))\nprint('BIAS ERROR OF',':',1-np.mean(results))\nprint('VARIANCE ERROR OF',':',np.var(results,ddof=1))","16224af6":"df_test=pd.read_csv('..\/input\/human-activity-recognition-with-smartphones\/test.csv')","a54388f9":"df_test.head()","b3c26325":"df_test=df_test.drop('subject',axis=1)","de9d9fa8":"X_test=df_test.iloc[:,0:len(df_test.columns)-1]\n\ny_test=df_test.iloc[:,-1]","d206567d":"y_test=le.transform(y_test)","1a279d20":"X_test =sc.transform(X_test)","1c664b22":"X_test = pca.transform(X_test)","eb4ef49f":"model=LogisticRegression(penalty='l1')\nmodel.fit(X_pca,y)","e0d0b3ae":"y_pred=model.predict(X_test)","77975417":"from sklearn.metrics import classification_report,accuracy_score\nprint(classification_report(y_test,y_pred))\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred)*100)","680161dd":"**STANDARD SCALER TRANSFORMATION FOR TEST DATA**","e2a5878a":"**APPLYING PRINCIPAL COMPONENENT ANALYSIS(PCA)**","43c3b274":"**IMPORTING LIBRARIES**","29348763":"**SCALING FEATURES**","4e78b8c9":"**COUNTPLOT OF TARGET COLUMN**","67530b8e":"**DATA TYPE OF ATRIBUTES**","ba0073ff":"**READ THE TRAIN DATA**","1becc952":"**APPLYING LABEL ENCODER**","0e3d2e80":"**READING TEST DATA**","fe56e6c5":"**MODEL BUILDING**","9c9a0736":"**SPLITING FEATURES AND TARGET FOR TRAIN DATA**","eb5215a0":"**PCA TRANSFORMATION FOR TEST DATA**","1dbfb110":"**VIF VALUE IS HIGH SO APPLYING PCA**","58d92bc3":"**LABEL ENCODING TRANSFORMATION FOR TEST DATA**","1ba781cb":"HYPERPARAMETER TUNING FOR LOGISTIC REGRESSION","298ccb6a":"**CHECKING MULTICOLLINEARITY AMONG FEATURES USING VARIANCE INFLATION FACTOR**","1bc0c20c":"CHOOSING BEST MODEL FROM THE ABOVE RESULTS:\n1. LOGISTIC REGRESSION MODEL HAS A LOW BIAS AND VARIANCE ERROR\n2. LOGISTIC REGRESSION MODEL HAS HIGH F1SCORE.","a92f6545":"**MODEL EVALUATION**","f006d7c3":"**SPLIT TARGET AND FEATURE FOR TEST DATA**","326fb289":"**DIMENSION OF THE DATA**","ecc5d5cd":"**MODEL BUILDING AFTER HYPERPARAMETER TUNING**"}}