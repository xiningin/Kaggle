{"cell_type":{"0c5e38c0":"code","17afd02c":"code","a216d13e":"code","52a0fae5":"code","b8dc95b8":"code","6e3cd876":"code","eb8f25c5":"code","1a2a3c9d":"code","6f175390":"code","d693228a":"code","066a3cb7":"code","a81d90b7":"code","b555baa7":"code","53419f8c":"code","1a03193f":"code","cad21225":"markdown","e8fa97a9":"markdown","501407ca":"markdown","e75abf3d":"markdown","8dbf0759":"markdown","e9ab08a0":"markdown","c84f1929":"markdown"},"source":{"0c5e38c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","17afd02c":"trainingdata_filepath=\"..\/input\/trainingdata\/trainingdata.csv\"\ntrainingdata = pd.read_csv(trainingdata_filepath)","a216d13e":"trainingdata.describe()","52a0fae5":"trainingdata.columns","b8dc95b8":"y = trainingdata.hip","6e3cd876":"trainingdata_features=['age', 'weight', 'height', 'BMI', 'waist','energy','alcoholgv']\nX=trainingdata[trainingdata_features]\nX.describe()","eb8f25c5":"from sklearn.model_selection import train_test_split\n\n# split data into training and validation data, for both features and target\n# The split is based on a random number generator. Supplying a numeric value to\n# the random_state argument guarantees we get the same split every time we\n# run this script.\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)","1a2a3c9d":"train_X.describe()","6f175390":"val_X.describe()","d693228a":"train_y.describe()","066a3cb7":"val_y.describe()","a81d90b7":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\nforest_model = RandomForestRegressor(random_state=1)\nforest_model.fit(train_X, train_y)\nhip_preds = forest_model.predict(val_X)\nprint(mean_absolute_error(val_y, hip_preds))","b555baa7":"hip_preds","53419f8c":"val_y.head()","1a03193f":"val_X.head()","cad21225":"\u8bbe\u5b9a\u7528\u4e8e\u9884\u6d4b\u7684\u7279\u5f81\u5e76\u8fdb\u884c\u63cf\u8ff0\u6027\u7edf\u8ba1","e8fa97a9":"\u9996\u5148\u8bfb\u53d6\u4e00\u4e9b\u5fc5\u8981\u7684\u6a21\u5757","501407ca":"\u8bbe\u5b9a\u81c0\u56f4\u662f\u8981\u9884\u6d4b\u7684\u53d8\u91cf","e75abf3d":"\u5bf9\u6570\u636e\u8fdb\u884c\u63cf\u8ff0","8dbf0759":"\u8bbe\u5b9a\u6570\u636e\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u7528pd\u8bfb\u53d6","e9ab08a0":"\u5c06\u6570\u636e\u5206\u4e3a\u6d4b\u8bd5\u96c6\u548c\u9a8c\u8bc1\u96c6","c84f1929":"\u770b\u4e00\u770b\u5404\u4e2a\u53d8\u91cf\u7684\u540d\u79f0"}}