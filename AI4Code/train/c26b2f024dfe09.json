{"cell_type":{"e89cb8c9":"code","ba271cf0":"code","0f84dad0":"code","db9c6926":"code","4ac09813":"code","a1ec69fe":"code","eb615153":"code","7f3d9766":"code","8cfcde8f":"code","3787c2da":"code","8fff8c61":"code","32b5b20b":"code","01936bac":"code","20803898":"code","ecd9fd67":"code","b0915c6b":"code","3c837267":"code","77dd3393":"code","d8418cbb":"code","ff775074":"code","1cea91f1":"code","bc487908":"code","7babf4f2":"code","20d12aa8":"code","7dfd76c7":"code","3c8bc086":"code","6f2e4d1a":"code","bb09850f":"code","00525484":"code","8847c45d":"code","e137b371":"code","113cc904":"code","5c884e83":"code","c00550ab":"code","d4d758bd":"code","bfa05dee":"code","1711ddd5":"code","843f6847":"markdown","63c6aa74":"markdown","c3549a2b":"markdown","ce7fa81f":"markdown","2d7ee531":"markdown","1db85f30":"markdown","1aae9e58":"markdown","5a22fa6e":"markdown","89372fb1":"markdown","6c69d787":"markdown","89d7dc08":"markdown","94cc9cab":"markdown","bbe4663c":"markdown","16be943d":"markdown","6aea63ec":"markdown","e3db8dac":"markdown","636be9a4":"markdown"},"source":{"e89cb8c9":"import numpy as np \nimport pandas as pd\nimport math\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, accuracy_score, roc_auc_score, ConfusionMatrixDisplay, confusion_matrix\nfrom sklearn.model_selection import train_test_split, RepeatedStratifiedKFold, RandomizedSearchCV, GridSearchCV, StratifiedKFold, RepeatedStratifiedKFold, RandomizedSearchCV, GridSearchCV","ba271cf0":"train_T = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv')\ntrain_I = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_identity.csv')\ntest_T = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv')\ntest_I = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_identity.csv')","0f84dad0":"test_I.columns=train_I.columns","db9c6926":"train_T = train_T.apply(pd.to_numeric, errors='coerce')","4ac09813":"train_I = train_I.apply(pd.to_numeric, errors='coerce')","a1ec69fe":"test_T = test_T.apply(pd.to_numeric, errors='coerce')","eb615153":"test_I = test_I.apply(pd.to_numeric, errors='coerce')","7f3d9766":"mergedtestset = test_T.merge(test_I, how= 'left').replace([np.inf, -np.inf], np.nan)","8cfcde8f":"mergedset = train_T.merge(train_I, how= 'left')","3787c2da":"mergedtestset.fillna(0,inplace= True)","8fff8c61":"mergedset.fillna(0,inplace= True)","32b5b20b":"points = mergedset.loc[:,(mergedset.columns != 'TransactionID') & (mergedset.columns !=  'isFraud')]","01936bac":"labels = mergedset['isFraud']","20803898":"featurelist= points.columns","ecd9fd67":"points.shape","b0915c6b":"labels.shape","3c837267":"# params = {\n#         'C': [0,1, 0.5, 2]\n#         }","77dd3393":"# LR =  LogisticRegression(solver='liblinear',random_state = 1 )","d8418cbb":"# folds = 2\n# param_comb = 1\n\n# skf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 1001)\n\n# random_search = RandomizedSearchCV(LR, param_distributions=params, n_iter=param_comb, scoring='roc_auc', n_jobs=4, cv=skf.split(points,labels), verbose=3, random_state=1001 )\n\n# random_search.fit(points, labels)","ff775074":"#print('\\n All results:')\n#print(random_search.cv_results_)\n# print('\\n Best estimator:')\n# print(random_search.best_estimator_)\n# print('\\n Best score:')\n# print(random_search.best_score_ )\n# print('\\n Best hyperparameters:')\n# print(random_search.best_params_)","1cea91f1":"X_train, X_test, y_train, y_test = train_test_split(points, labels, test_size=0.5 ,random_state = 1)","bc487908":"X_train.shape","7babf4f2":"y_train.shape","20d12aa8":"X_test.shape","7dfd76c7":"y_test.shape","3c8bc086":"model = LogisticRegression(C=0.5,solver='liblinear',random_state = 1 )","6f2e4d1a":"model.fit(X_train, y_train)","bb09850f":"accuracy_score(y_test, model.predict( X_test))","00525484":"roc_auc_score(y_test, model.predict_proba(X_test)[:,1])","8847c45d":"print(classification_report(y_test, model.predict(X_test)))","e137b371":"y_test= model.predict_proba(mergedtestset.loc[:, (mergedtestset.columns != 'TransactionID')])[:,1]\nfinalpredLR = mergedtestset.drop(featurelist,axis=1)\nfinalpredLR['isFraud']= y_test\nprint(finalpredLR.shape)\nfinalpredLR.to_csv(\"prediccionLR.csv\",index=False)","113cc904":"features = pd.DataFrame(featurelist.values,columns = ['feature'])","5c884e83":"features['importance'] = model.coef_[0]","c00550ab":"features.set_index('feature',inplace= True)","d4d758bd":"features.loc[features.importance > 0,].sort_values(by= 'importance',ascending=True).plot(kind = 'barh',figsize = (10,40), title = 'Feature Importance class 1')                                                                                                    ","bfa05dee":"(features.loc[features.importance < 0,]*(-1)).sort_values(by= 'importance',ascending=True).plot(kind = 'barh',figsize = (10,30),title = 'Feature Importance class 0')","1711ddd5":"features.loc[features.importance == 0,]","843f6847":"# Al predecir con este modelo para la competencia, \u00bfC\u00faal es el score obtenido? (guardar el csv con predicciones para entregarlo despu\u00e9s)","63c6aa74":"Hubo un score anterior mas alto de 0.745214, pero para ese solo entrene con el set de Transactions ( es decir no con todos los features) ","c3549a2b":"# \u00bfCu\u00e1l es el mejor score de validaci\u00f3n obtenido? (\u00bfC\u00f3mo conviene obtener el dataset para validar?)","ce7fa81f":"## El mejor test de validacion fue: ","2d7ee531":"# Genero Train y Test Sets del set de entrenamiento","1db85f30":"# Importance 0","1aae9e58":"### 0.6484813436281216","5a22fa6e":"# Genero Prediccion de la competencia","89372fb1":"La busqueda de hiperparametros la hice corriendo en una computadora ya que Kaggle se quedaba sin ram","6c69d787":"# Feature Importance","89d7dc08":"# Importance for Class 1","94cc9cab":"# Encoding","bbe4663c":"# \u00bfQu\u00e9 features son los m\u00e1s importantes para predecir con el mejor modelo? Graficar.","16be943d":"### 0.717802","6aea63ec":"# Random\/Grid Search","e3db8dac":"## El Score obtnido fue: ","636be9a4":"# Importance for Class 0"}}