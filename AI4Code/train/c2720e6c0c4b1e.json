{"cell_type":{"b5ceea33":"code","a6bdd0f6":"code","57b4b2d3":"code","07ca06a2":"code","96184861":"code","0b84d7eb":"code","0c63aa69":"code","50b18628":"markdown","acdbac2f":"markdown","fa9f1ee5":"markdown","c5da6287":"markdown","134bb253":"markdown","146c5f80":"markdown"},"source":{"b5ceea33":"# ConnectX environment was defined in v0.1.6\n!pip install 'kaggle-environments>=0.1.6'","a6bdd0f6":"import os\nimport random\n\nfrom kaggle_environments import make, evaluate\nfrom kaggle_environments import agent as utils","57b4b2d3":"def encode_line(a,b,c,d) :\n    return int(a + b*1e2 + c*1e4 + d*1e6)\n\ndef create_lines_by_index():\n    lines_by_index = {}\n    for i in range(42):\n        lines_by_index[i] = []\n    for r in range(6):\n        for c in range(7):\n            for direction in [ (0, 1), (1,1), (1,0), (1,-1) ]:\n                dx,dy = direction\n                for start in [-3, -2, -1, 0]:\n                    line = []\n                    for l in range(4):\n                        _r = r + (start+l) * dy\n                        _c = c + (start+l) * dx\n                        if _r > -1 and _r < 6 and _c > -1 and _c < 7:\n                            line.append( _r * 7 + _c)\n                    if len(line) == 4:\n                        encoded_line = encode_line(*sorted(line))\n                        for idx in line:\n                            if not encoded_line in lines_by_index[idx]:\n                                lines_by_index[idx].append(encoded_line)                      \n    return lines_by_index\n\ndef create_count_by_line(lines_by_index):\n    lines = sorted({x for v in lines_by_index.values() for x in v})\n    return dict(zip(lines , [0] * len(lines)))\n    \ndef  update_count_by_line(count_by_lines, lines_by_index, idx, color):\n    for encoded_line in lines_by_index[idx] :\n        if encoded_line in count_by_lines :\n            if color * count_by_lines[encoded_line] >= 0 : \n                count_by_lines[encoded_line] = count_by_lines[encoded_line] + color\n            else :\n                count_by_lines.pop(encoded_line, None)\n    return count_by_lines\n\ndef compute_count_by_line(count_by_lines, lines_by_index, board):\n    for idx in reversed(range(42)):\n        if board[idx] != 0 :\n            count_by_lines = update_count_by_line(count_by_lines, lines_by_index, idx, 1 if  board[idx] == 1 else -1)\n    return count_by_lines","07ca06a2":"def get_heuristic_score(count_by_lines) :\n    scores = { -3 : -50, -2 : -10, -1 : -1, 0: 0, 1 : 1, 2 : 10, 3 : 50  }\n    return sum( scores[x] for x in count_by_lines.values())\n\ndef get_winner(count_by_lines):\n    return 1 if count_by_lines and max(count_by_lines.values()) == 4 else -1 if count_by_lines and min(count_by_lines.values()) == -4 else 0\n    \ndef get_free_row(board, col):\n    for row in reversed(range(6)) :\n        if  board[row*7 + col] == 0:\n            return row\n    return -1\n\ndef get_valid_moves(board):\n    return [ (get_free_row(board, col), col) for col in range(7) if get_free_row(board, col) != -1 ]\n    \ndef make_move(board, moves, color, r, c):\n    new_moves = moves.copy()\n    new_moves.append(c)\n    new_board = board.copy()\n    new_board[r*7+c] = color\n    return new_board, new_moves","96184861":"def estimate_depth(board, default_depth):\n    depth = default_depth\n    move_cnt = sum(x != 0 for x in board)\n    if move_cnt > 25:\n        depth = depth +  int((move_cnt-25) \/ 5)\n    open_row_cnt = len(get_valid_moves(board))\n    depth = depth + (7 - open_row_cnt)\n    depth = min(42 - move_cnt, depth)\n    return depth","0b84d7eb":"def lookahead(board, lines_by_index, count_by_lines, search_max, depth, side, moves) :\n    if depth == 0:\n        return moves, get_heuristic_score(count_by_lines)\n    color = 1 if search_max else -1\n    best_score, best_moves = -1e16 if search_max else 1e16, []\n    for r,c in get_valid_moves(board):\n        new_board, new_moves = make_move(board, moves, color, r, c)\n        new_count_by_lines = update_count_by_line(count_by_lines.copy(), lines_by_index, r*7 + c, color)\n        if get_winner(new_count_by_lines) == color:\n            score = (1e8-len(new_moves)) * color \n        else :\n            new_moves, score = lookahead(new_board, lines_by_index, new_count_by_lines, \n                not search_max, depth-1, side, new_moves)\n        if  (search_max and  score > best_score) or  (not search_max and score < best_score):\n            best_score, best_moves  = score, new_moves\n    #print(\"LEVEL = \" + str(depth) + \" return \" + str(best_moves) + \" with score \" + str(best_score))\n    return best_moves, best_score         \n\ndef lookahead_agent(obs, config, depth=3):\n    depth = estimate_depth(obs.board, depth)\n    if sum(x != 0 for x in obs.board) < 2:\n        return 3\n    lines_by_index = create_lines_by_index()\n    count_by_line = create_count_by_line(lines_by_index)\n    count_by_line = compute_count_by_line(count_by_line, lines_by_index, obs.board)    \n    moves, score  = lookahead(obs.board.copy(), lines_by_index, count_by_line, \n        True if obs.mark == 1 else False, depth , 1 if obs.mark == 1 else -1, [])       \n    return moves[0]\n\ndef agent_depth6(obs, config):\n    return lookahead_agent(obs, config, 6)\ndef agent_depth5(obs, config):\n    return lookahead_agent(obs, config, 5)\ndef agent_depth3(obs, config):\n    return lookahead_agent(obs, config, 3)\ndef agent_depth1(obs, config):\n    return lookahead_agent(obs, config, 1)\n","0c63aa69":"env =  make(\"connectx\", debug=True)\n\nenv.reset()\n# Play as the first agent against default \"random\" agent.\n#env.run([lookahead_agent, \"negamax\"])\nenv.run([ agent_depth5, agent_depth3 ])\nenv.render(mode=\"ipython\", width=500, height=450)\n\nenv.reset()\nenv.play([agent_depth5, None ], width=500, height=450)\n","50b18628":"# How deep can you calculate?\nIf you take too long to make a move you will get a timeout. So we make a estimation how deep we can go.\nWe start with a base depth and go deeper\n* as the game progesses\n* as columns are closed (hence less possible moves)\nThe method is just pure guess and can be definetely be improved.\nThe search depth is also limited by the number of open spots on the board.","acdbac2f":"# The MinMax algorithm\n\n* Player 1 searches for the max, Player2 for the min\n* Data structures are set up in the beginning and passed in the search \n* the search is done via recursive calls (depth first search)\n* Color is the disc that is played, and will change, side will not change\n* the search default depth of 5 produces reasonable results, in the end game the depth will go up to 15","fa9f1ee5":"# Try out the agent","c5da6287":"# Data Structure\nKeep track of all possible winning lines and update with each move. Since we cannot pass easily data between moves, this feature is mainly used for the positions created in the seatch tree.\nThe connect4 board is a list of 42 integers, a line is list of 4 integers (e.g. 35,36,37,38 = the line on the bottom left), and we encode that line to 35363738.\n\nlines_by_index: key is the position (e.g. 36), values are encoded lines that contain the position 36. This data will never change and can be computed once.\n\ncount_by_line: key = line, value = how many discs of a color are in the row. e.g. if 35363738 has a value of -2, it means that 2 discs of player2 (= -1) are i that line. If a line has contains discs of both players it gets irrelevant for connecting 4, and is hence dropped. \ncount_by_line is updated with every move.\n","134bb253":"# Some helper methods\nthe heuristic method assigns point values to lines, the more of your color are in the line, the more points you get. The heuristic will select moves that create possible 4connects for you and limit the possibilites for the opponent.","146c5f80":"# Conventional Agent with MinMax Algorithm\nMy baseline for future agents that work with networks.\nFeatures:\n* Use a data structure to keep track of the possible 4-connected lines. Hopefully this reduces computation effort and allows higher search depth with MinMax.\n* Variable depth search - as the game progesses you need to compute less and hence search deeper\n* Hard-coded the default connect4 board sizes, but this should be easy to overcome.\n* Player1 is 1, Player2 is -1 (as opposed to 2 in the obs), to make computations easier.\n\nScore is currently somewhere between 1150 and 1200 and can surely be improved.\n"}}