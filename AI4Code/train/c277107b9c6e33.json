{"cell_type":{"bb216841":"code","73d9a233":"code","b8a0aca5":"code","db3a61dc":"code","fc2d7703":"code","9f7aa57f":"code","e74f8629":"code","2f6ddb4a":"code","f13ecbfc":"code","56427c0b":"code","d4e0ece2":"code","529e748d":"code","288be19c":"code","586872c0":"code","13fa9cef":"code","e3b168e7":"code","3a65c399":"code","049f0ea0":"code","b8a8b2d7":"code","c5525ade":"code","9e8cc924":"code","62f94088":"code","1958f7cc":"code","dc72fbd1":"code","fbc96a91":"code","acf5661a":"code","7ca6029d":"markdown","3dd892bc":"markdown","c4b2039c":"markdown","2a8c21b7":"markdown","1c3d771b":"markdown","00940183":"markdown","b4c2375c":"markdown","7b25ad76":"markdown","25226084":"markdown","fb22e2cb":"markdown","1b033727":"markdown","4f51fc0f":"markdown","73470491":"markdown","8cdc5f3b":"markdown","f6170c12":"markdown","0b173810":"markdown","6732e7e4":"markdown","6ebefac7":"markdown","b96a4280":"markdown","9d4a09bf":"markdown","23fef83a":"markdown","527123f7":"markdown","79388766":"markdown","1791c267":"markdown","c0667118":"markdown","fbc7a4dc":"markdown","edb27cc9":"markdown","ab7f13c6":"markdown","96581299":"markdown"},"source":{"bb216841":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","73d9a233":"# \u6570\u636e\u6574\u7406\u548c\u5206\u6790\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# \u53ef\u89c6\u5316\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# \u673a\u5668\u5b66\u4e60\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedShuffleSplit\n\nfrom sklearn.linear_model.logistic import LogisticRegression\nfrom sklearn import tree  ","b8a0aca5":"train_df = pd.read_csv('..\/input\/give-me-some-credit-dataset\/cs-training.csv')\ntest_df = pd.read_csv('..\/input\/give-me-some-credit-dataset\/cs-test.csv')\ncombine = [train_df, test_df]","db3a61dc":"train_df.head()","fc2d7703":"train_df.tail()","9f7aa57f":"train_df.info()\nprint('_'*40)\ntest_df.info()","e74f8629":"train_df['SeriousDlqin2yrs'].value_counts()","2f6ddb4a":"train_df['SeriousDlqin2yrs'].value_counts(normalize=True)","f13ecbfc":"train_df.isnull().sum()","56427c0b":"test_df.isnull().sum()","d4e0ece2":"train_df.describe()","529e748d":"for data in combine:\n    data[\"MonthlyIncome\"].fillna(data[\"MonthlyIncome\"].mean(), inplace=True)\n    data[\"NumberOfDependents\"].fillna(data[\"NumberOfDependents\"].mode()[0], inplace=True)\ntrain_df.info()","288be19c":"plt.figure(figsize=[10, 8])\nplt.subplot(221)\nsns.boxplot(data= train_df['age'])\nplt.ylabel('age')\nplt.subplot(222)\nsns.histplot(train_df['age']) \nplt.xlabel('age')","586872c0":"x1=train_df['NumberOfTime30-59DaysPastDueNotWorse']\nx2=train_df['NumberOfTime60-89DaysPastDueNotWorse']\nx3=train_df['NumberOfTimes90DaysLate']\nfig=plt.figure(figsize=(20,15))\nax=fig.add_subplot(221)\nax.boxplot([x1,x2,x3])\nax.set_xticklabels([\"30-59d num\",\"60-89d num\",\"90+d num\"], fontsize=20)","13fa9cef":"t1=train_df[train_df['NumberOfTime30-59DaysPastDueNotWorse']>80]\nt1['NumberOfTime30-59DaysPastDueNotWorse'].value_counts()","e3b168e7":"t2=train_df[train_df['NumberOfTime60-89DaysPastDueNotWorse'] >= 80]\nt2['NumberOfTime60-89DaysPastDueNotWorse'].value_counts()","3a65c399":"t3=train_df[train_df['NumberOfTimes90DaysLate'] >= 80]\nt3['NumberOfTimes90DaysLate'].value_counts()","049f0ea0":"corr_matrix = train_df.corr()\nprint(corr_matrix[\"SeriousDlqin2yrs\"].sort_values(ascending=False))","b8a8b2d7":"fig, ax = plt.subplots(figsize=(12,12))\nsns.heatmap(corr_matrix,xticklabels=corr_matrix.columns,yticklabels=corr_matrix.columns,cmap='Blues',annot=True)","c5525ade":"for data in combine:\n    data[\"CombinedDefaulted\"] = data[\"NumberOfTimes90DaysLate\"] + data[\"NumberOfTime60-89DaysPastDueNotWorse\"] + data[\"NumberOfTime30-59DaysPastDueNotWorse\"]\n    data.loc[(data[\"CombinedDefaulted\"] >= 1), \"CombinedDefaulted\"] = 1\n    data[\"CombinedCreditLoans\"] = data[\"NumberOfOpenCreditLinesAndLoans\"] + data[\"NumberRealEstateLoansOrLines\"]\n\n    data[\"CombinedCreditLoans\"] = data[\"NumberOfOpenCreditLinesAndLoans\"] + data[\"NumberRealEstateLoansOrLines\"]\n    data.loc[(data[\"CombinedCreditLoans\"] <= 5), \"CombinedCreditLoans\"] = 0\n    data.loc[(data[\"CombinedCreditLoans\"] > 5), \"CombinedCreditLoans\"] = 1\n\n","9e8cc924":"train_df.corr()[\"SeriousDlqin2yrs\"][[\"CombinedDefaulted\", \"CombinedCreditLoans\"]]","62f94088":"attributes=[\"SeriousDlqin2yrs\", 'age','NumberOfTime30-59DaysPastDueNotWorse','NumberOfDependents','MonthlyIncome',\"CombinedDefaulted\",\"CombinedCreditLoans\"]\nsol=['SeriousDlqin2yrs']\n\nattributes2 = [\"Unnamed: 0\", 'age','NumberOfTime30-59DaysPastDueNotWorse','NumberOfDependents','MonthlyIncome',\"CombinedDefaulted\",\"CombinedCreditLoans\"]\nsol=['SeriousDlqin2yrs']\n\ntrain_df = train_df[attributes]\ntest_df = test_df[attributes2]","1958f7cc":"import time\nimport os\nfrom sklearn.model_selection import cross_validate\n\nclass Tester():\n    def __init__(self, target):\n        self.target = target\n        self.datasets = {}\n        self.models = {}\n        self.cache = {} # \u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u7f13\u5b58\u6765\u52a0\u5feb\u901f\u5ea6\n\n    def addDataset(self, name, df):\n        self.datasets[name] = df.copy()\n\n    def addModel(self, name, model):\n        self.models[name] = model\n        \n    def clearModels(self):\n        self.models = {}\n\n    def clearCache(self):\n        self.cache = {}\n    \n    def testModelWithDataset(self, m_name, df_name, sample_len, cv):\n        if (m_name, df_name, sample_len, cv) in self.cache:\n            return self.cache[(m_name, df_name, sample_len, cv)]\n\n        clf = self.models[m_name]\n        \n        if not sample_len: \n            sample = self.datasets[df_name]\n        else: sample = self.datasets[df_name].sample(sample_len)\n            \n        X = sample.drop([self.target], axis=1)\n        Y = sample[self.target]\n\n        s = cross_validate(clf, X, Y, scoring=['roc_auc'], cv=cv, n_jobs=-1)\n        self.cache[(m_name, df_name, sample_len, cv)] = s\n\n        return s\n\n    def runTests(self, sample_len=80000, cv=4):\n        # \u5728\u6240\u6709\u6dfb\u52a0\u7684\u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5\u6dfb\u52a0\u7684\u6a21\u578b\n        scores = {}\n        for m_name in self.models:\n            for df_name in self.datasets:\n                # print('Testing %s' % str((m_name, df_name)), end='')\n                start = time.time()\n\n                score = self.testModelWithDataset(m_name, df_name, sample_len, cv)\n                scores[(m_name, df_name)] = score\n                \n                end = time.time()\n                \n                # print(' -- %0.2fs ' % (end - start))\n\n        print('--- Top 10 Results ---')\n        for score in sorted(scores.items(), key=lambda x: -1 * x[1]['test_roc_auc'].mean())[:10]:\n            auc = score[1]['test_roc_auc']\n            print(\"%s --> AUC: %0.4f (+\/- %0.4f)\" % (str(score[0]), auc.mean(), auc.std()))","dc72fbd1":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n\n# \u6211\u4eec\u5c06\u5728\u6240\u6709\u6a21\u578b\u4e2d\u4f7f\u7528\u6d4b\u8bd5\u5bf9\u8c61\ntester = Tester('SeriousDlqin2yrs')\n\n# \u6dfb\u52a0\u6570\u636e\u96c6\ntester.addDataset('Drop Missing', train_df.dropna())\n\n# \u6dfb\u52a0\u6a21\u578b\nrfc = RandomForestClassifier(n_estimators=15, max_depth = 6, random_state=0)\nlog = LogisticRegression()\ntester.addModel('Simple Random Forest', rfc)\ntester.addModel('Simple Logistic Regression', log)\n\n# \u6d4b\u8bd5\ntester.runTests()","fbc96a91":"X_train = train_df.drop(['SeriousDlqin2yrs'], axis=1)\nY_train = train_df['SeriousDlqin2yrs']\n\nX_test = test_df.drop([\"Unnamed: 0\"], axis=1)\nrfc.fit(X_train, Y_train)\nY_pred = rfc.predict_proba(X_test)","acf5661a":"submission = pd.DataFrame({\n        \"Id\": test_df[\"Unnamed: 0\"],\n        \"Probability\": pd.DataFrame(Y_pred)[1]\n    })\n\nsubmission.to_csv('submission2.csv', index=False)","7ca6029d":"\u67e5\u770b\u65b0\u7279\u5f81\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u76f8\u5173\u6027\uff1a","3dd892bc":"**\u7f3a\u5931\u503c\u5904\u7406**\n\n\u89c2\u5bdf\u5230\uff1a\n* \u201dNumberOfDependents\u201c75%\u767e\u5206\u4f4d\u70b9\u662f1\uff0c\u4e5f\u5c31\u662f\u8bf4\u5927\u90e8\u5206\u4eba\u90fd\u6ca1\u6709\u5bb6\u5c5e\uff0c\u9009\u62e9\u7528\u4f17\u6570\u586b\u5145\u5bb6\u5c5e\u6570\u5b57\u6bb5\u7684\u7f3a\u5931\u503c\n* \u5bf9\u4e8e\u201cMonthlyIncome\u201d\u6708\u6536\u5165\u7684\u7f3a\u5931\u503c\uff0c\u9009\u62e9\u4f7f\u7528\u6708\u6536\u5165\u7684\u5747\u503c\u8fdb\u884c\u586b\u5145","c4b2039c":"\u7ed3\u5408\u6570\u636e\u5b57\u5178\u5e76\u4f7f\u7528train_df.head()\u67e5\u770b\u524d5\u884c\u6570\u636e\uff0ctrain_df.tail()\u67e5\u770b\u540e5\u884c\u6570\u636e\uff0c\u89c2\u5bdf\u6570\u636e\u7279\u5f81\uff0c\u53ef\u4ee5\u770b\u5230\u5168\u90e8\u7279\u5f81\u90fd\u662f\u6570\u503c\u578b\u7684","2a8c21b7":"**\u7f3a\u5931\u503c**","1c3d771b":"## 3.1 \u57fa\u672c\u6570\u636e\u5206\u6790","00940183":"\u4e3a\u4e86\u5feb\u901f\u6d4b\u8bd5\uff0c\u5199\u4e86\u4e00\u4e2a\u7c7b\uff0c\u5bf9\u8f93\u5165\u7684\u6240\u6709\u6a21\u578b\u8fdb\u884ck\u6298\u4ea4\u53c9\u9a8c\u8bc1","b4c2375c":"**\u5404\u4e2a\u7279\u5f81\u7684\u6570\u636e\u7c7b\u578b**\n* \u56db\u4e2a\u7279\u5f81\u662f\u6d6e\u70b9\u578b\n* \u516b\u4e2a\u7279\u5f81\u662f\u6574\u578b","7b25ad76":"\u53ef\u4ee5\u770b\u5230\u6240\u6709\u7684\u7f3a\u5931\u503c\u5df2\u7ecf\u88ab\u66ff\u6362\u4e86","25226084":"**\u8bad\u7ec3\u96c6\u8fdd\u7ea6\u5386\u53f2\u8bb0\u5f55**\n\n\u8bad\u7ec3\u96c6\u7684150000\u6761\u501f\u6b3e\u4eba\u7684\u5386\u53f2\u6570\u636e\u4e2d\uff0c\u672a\u8fdd\u7ea6\u6837\u672c139974\u6761\uff0c\u5360\u6837\u672c\u603b\u91cf\u768493.316%\uff0c\u8fdd\u7ea6\u6837\u672c10026\u6761\uff0c\u5360\u6837\u672c\u603b\u91cf\u76846.684%\uff0c\u8d37\u6b3e\u8fdd\u7ea6\u7387\u4e3a6.684%\u3002\u53ef\u4ee5\u770b\u51fa\u8be5\u6570\u636e\u96c6\u662f\u4e00\u4e2a\u9ad8\u5ea6\u4e0d\u5e73\u8861\u7684\u6570\u636e\u3002","fb22e2cb":"\u5bfc\u5165\u6570\u636e\u96c6\u540e\u9996\u8981\u4efb\u52a1\u7684\u662f\u4e86\u89e3\u6570\u636e\u96c6\uff0c\u9010\u4e00\u56de\u7b54\u5982\u4e0b\u95ee\u9898\uff1a\n\n1. \u6570\u636e\u96c6\u5305\u542b\u54ea\u4e9b\u7279\u5f81\n2. \u54ea\u4e9b\u7279\u5f81\u662f\u5206\u7c7b\u578b(Categorical)\u7279\u5f81\uff0c\u54ea\u4e9b\u662f\u6570\u503c\u578b(numeric)\u7279\u5f81\n3. \u5206\u7c7b\u578b\u7279\u5f81\u91cc\u54ea\u4e9b\u5c5e\u4e8e\u6807\u79f0\u578b(\u679a\u4e3e\u578b)\uff0c\u54ea\u4e9b\u662f\u5e8f\u6570\u578b\n4. \u6570\u503c\u578b\u7279\u5f81\u91cc\u54ea\u4e9b\u5c5e\u4e8e\u533a\u95f4\u6807\u5ea6\uff0c\u54ea\u4e9b\u5c5e\u4e8e\u6bd4\u7387\u6807\u5ea6\n5. \u6570\u503c\u578b\u7279\u5f81\u91cc\u54ea\u4e9b\u662f\u8fde\u7eed\u7684\uff0c\u54ea\u4e9b\u662f\u79bb\u6563\u7684\n6. \u54ea\u4e9b\u7279\u5f81\u7684\u53d6\u503c\u4e0d\u89c4\u8303\n7. \u54ea\u4e9b\u7279\u5f81\u6709\u7f3a\u5931\u503c\n8. \u54ea\u4e9b\u7279\u5f81\u6709\u79bb\u7fa4\u503c(\u5f02\u5e38\u503c\u3001\u566a\u58f0)\n9. \u5b58\u50a8\u8fd9\u4e9b\u7279\u5f81\u7684\u6570\u636e\u7c7b\u578b\u662f\u5426\u5408\u9002\n10. \u6570\u636e\u96c6\u4e2d\u662f\u5426\u6709\u91cd\u590d\u7684\u6837\u672c\n11. \u6570\u636e\u96c6\u4e2d\u5404\u4e2a\u7279\u5f81\u7684\u5206\u5e03\u5982\u4f55\uff0c\u662f\u5426\u7c7b\u522b\u4e0d\u5e73\u8861","1b033727":"\u4ece\u7ed3\u679c\u53ef\u4ee5\u770b\u5230\u903e\u671f39-59\uff0c60-89\uff0c90\u5929\u8bb0\u5f55\u7684\u7279\u5f81\u4e0e\u76ee\u6807\u503c\u76f8\u5173\u6027\u5f88\u5927\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709\u8fc7\u8fdd\u7ea6\u8bb0\u5f55\u7684\u4eba\u5f88\u53ef\u80fd\u4f1a\u53d1\u751f\u903e\u671f90\u5929\u4ee5\u4e0a\u4e0d\u6362\u6b3e\u7684\u8fdd\u7ea6\u884c\u4e3a\uff0c\u8fd9\u4e0e\u6211\u4eec\u7684\u5e38\u8bc6\u4e5f\u662f\u4e00\u81f4\u7684\u3002","4f51fc0f":"**\u7279\u5f81\u7684\u5206\u5e03\uff1a**\n\n\u7531\u4e8e\u5168\u90e8\u90fd\u662f\u6570\u503c\u578b\u7279\u5f81\uff0c\u4f7f\u7528describe\uff08\uff09\u67e5\u770b\u7279\u5f81\u5206\u5e03","73470491":"\u4ece\u70ed\u529b\u56fe\u4e0a\u53ef\u4ee5\u770b\u5230\uff0c\u989c\u8272\u8f83\u6df1\u7684\u4e09\u4e2a\u5757\u6570\u503c\u4e3a0.99\u30010.99\u30010.98\uff0c\u4ed6\u4eec\u5206\u522b\u4e3a\u903e\u671f30-59\u7b14\u6570\u4e0e\u903e\u671f90\u5929\u7b14\u6570\u7684\u76f8\u5173\u7cfb\u6570\u3001\u903e\u671f60-89\u7b14\u6570\u4e0e\u903e\u671f90\u5929\u7b14\u6570\u7684\u76f8\u5173\u7cfb\u6570\u3001\u903e\u671f60-89\u7b14\u6570\u4e0e\u903e\u671f90\u5929\u7b14\u6570\u7684\u76f8\u5173\u7cfb\u6570\uff0c\u76f8\u5173\u7cfb\u6570\u63a5\u8fd11\u3002","8cdc5f3b":"**\u4e09\u79cd\u8fdd\u7ea6\u60c5\u51b5\u5206\u6790**\n\n\u4ece\u7279\u5f81\u5206\u5e03\u4e2d\u53ef\u4ee5\u770b\u5230\u903e\u671f30-59\u7b14\u6570\u3001\u903e\u671f60-89\u7b14\u6570\u3001\u903e\u671f90\u5929\u7b14\u6570\u7684\u6700\u5927\u503c\u90fd\u662f98\uff0c\u663e\u7136\u8fd9\u662f\u5f02\u5e38\u60c5\u51b5\uff0c\u6ca1\u6709\u4eba\u80fd\u591f\u6709\u8fd9\u4e48\u591a\u8d37\u6b3e\u3002\u753b\u51fa\u4e09\u8005\u7684\u7bb1\u56fe\uff0c\u53ef\u4ee5\u770b\u5230\u90fd\u5b58\u572880\u4ee5\u4e0a\u7684\u6570\u636e\u3002\u7edf\u8ba1\u4e09\u8005\u7684\u60c5\u51b5\uff0c\u90fd\u5305\u542b\u5c11\u91cf96\uff0c98\u6570\u503c\uff0c\u6211\u5c06\u8fd9\u4e9b\u6570\u636e\u5220\u9664\u5904\u7406\u3002","f6170c12":"## 3.2 \u76f8\u5173\u6027\u5206\u6790","0b173810":"\u5207\u5206\u6570\u636e\u96c6\uff1f","6732e7e4":"# 3. \u6570\u636e\u5206\u6790","6ebefac7":"**\u67e5\u770b\u5404\u4e2a\u7279\u5f81\u4e0e\u76ee\u6807\u503cSeriousDlqin2yrs\u7684\u76f8\u5173\u6027**","b96a4280":"**\u903b\u8f91\u56de\u5f52**","9d4a09bf":"# 1. \u5b9a\u4e49\u95ee\u9898\n\n**\u6bd4\u8d5b\u63cf\u8ff0\uff1a**\n\u94f6\u884c\u5728\u5e02\u573a\u7ecf\u6d4e\u4e2d\u8d77\u7740\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\u3002\u4ed6\u4eec\u51b3\u5b9a\u8c01\u80fd\u83b7\u5f97\u8d44\u91d1\uff0c\u5728\u4ec0\u4e48\u6761\u4ef6\u4e0b\u83b7\u5f97\u8d44\u91d1\uff0c\u5e76\u51b3\u5b9a\u662f\u5426\u505a\u51fa\u6295\u8d44\u51b3\u5b9a\u3002\u4e3a\u4e86\u8ba9\u5e02\u573a\u548c\u793e\u4f1a\u6b63\u5e38\u8fd0\u8f6c\uff0c\u4e2a\u4eba\u548c\u4f01\u4e1a\u9700\u8981\u83b7\u5f97\u4fe1\u8d37\u3002\n\u4fe1\u7528\u8bc4\u5206\u7b97\u6cd5\u5bf9\u8fdd\u7ea6\u6982\u7387\u8fdb\u884c\u731c\u6d4b\uff0c\u662f\u94f6\u884c\u7528\u6765\u51b3\u5b9a\u662f\u5426\u53d1\u653e\u8d37\u6b3e\u7684\u65b9\u6cd5\u3002\u8fd9\u9879\u6bd4\u8d5b\u8981\u6c42\u53c2\u8d5b\u8005\u901a\u8fc7\u9884\u6d4b\u67d0\u4eba\u5728\u672a\u6765\u4e24\u5e74\u5185\u906d\u9047\u8d22\u52a1\u56f0\u5883\u7684\u53ef\u80fd\u6027\uff0c\u6765\u63d0\u9ad8\u4fe1\u7528\u8bc4\u5206\u7684\u6280\u672f\u6c34\u5e73\u3002\n\u8fd9\u4e2a\u7ade\u8d5b\u7684\u76ee\u6807\u662f\u5efa\u7acb\u4e00\u4e2a\u6a21\u578b\uff0c\u501f\u6b3e\u8005\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6a21\u578b\u6765\u5e2e\u52a9\u505a\u51fa\u6700\u4f73\u7684\u8d22\u52a1\u51b3\u7b56\u3002\n\n**\u6bd4\u8d5b\u76ee\u6807\uff1a**\n\u8bad\u7ec3\u96c6\u5305\u542b\u4e00\u4e9b\u501f\u6b3e\u4eba\u7684\u5386\u53f2\u6570\u636e\u5e76\u7ed9\u51fa\u4e86\u662f\u5426\u6709\u8d85\u8fc790\u5929\u672a\u8fd8\u6b3e\u7684\u4e0d\u826f\u884c\u4e3a\uff08\u76ee\u6807\u503c\uff09\u6807\u8bb0\uff0c\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\u5224\u65ad\u6d4b\u8bd5\u96c6\u4e2d\u7684\u4eba\u53d1\u751f\u8d85\u8fc790\u5929\u672a\u8fd8\u6b3e\u7684\u4e0d\u826f\u884c\u4e3a\u7684\u53ef\u80fd\u6027\u3002\n","23fef83a":"**\u5bfc\u5305**","527123f7":"# 4\u3001\u6a21\u578b\u548c\u9884\u6d4b","79388766":"**\u6570\u636e\u96c6\u7684\u5e74\u9f84\u5206\u5e03\u60c5\u51b5**\n\n\u4ece\u7bb1\u56fe\u548c\u6761\u5f62\u56fe\u53ef\u4ee5\u770b\u5230\u5e74\u9f84\u5206\u5e03\u60c5\u51b5\uff0c\u7bb1\u56fe\u91cc\u663e\u793a\u5e74\u9f84\u67090\u503c\uff0c\u663e\u7136\u662f\u5f02\u5e38\u503c\uff0c\u6570\u636e\u5904\u7406\u7684\u65f6\u5019\u5c06\u5904\u7406\u4e3aNaN\u3002","1791c267":"# 2. \u83b7\u53d6\u6570\u636e","c0667118":"## 3.3\u6784\u9020\u65b0\u7279\u5f81","fbc7a4dc":"| \u5b57\u6bb5\u540d | \u63cf\u8ff0                                 | \u7c7b\u578b                                            |\n|----------|--------------------------------------------|------------------------------------------------|\n| SeriousDlqin2yrs\uff08\u76ee\u6807\u503c\uff09|\u662f\u5426\u6709\u8d85\u8fc790\u5929\u6216\u66f4\u957f\u65f6\u95f4\u903e\u671f\u672a\u8fd8\u7684\u4e0d\u826f\u884c\u4e3a|Y\/N\uff081\/0\uff09\n| RevolvingUtilizationOfUnsecuredLines | \u53ef\u7528\u989d\u5ea6\u6bd4\u503c                                   | percentage                                |\n| age   | \u5e74\u9f84                               | integer                      |\n| NumberOfTime30-59DaysPastDueNotWorse | \u903e\u671f30-59\u5929\u7b14\u6570|integer\n| DebtRatio      | \u8fd8\u6b3e\u7387(\u6bcf\u6708\u507f\u8fd8\u503a\u52a1\uff0c\u8d61\u517b\u8d39\uff0c\u751f\u6d3b\u8d39\u7528)                                |  percentage                                              |\n| MonthlyIncome      | \u6708\u6536\u5165                       |       real                                         |\n| NumberOfOpenCreditLinesAndLoans    | \u4fe1\u8d37\u6570\u91cf                      |integer\n| NumberOfTimes90DaysLate    | \u903e\u671f90\u5929\u7b14\u6570 |                          integer                      |\n| NumberRealEstateLoansOrLines   | \u56fa\u5b9a\u8d44\u4ea7\u8d37\u6b3e\u6570\u91cf                              |             integer                                   |\n| NumberOfTime60-89DaysPastDueNotWorse     | \u903e\u671f60-89\u5929\u7b14\u6570                             |      integer                                          |\n| NumberOfDependents | \u5bb6\u5c5e\u6570\u91cf                        | integer |","edb27cc9":"**\u5404\u4e2a\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u5173\u6027**\n\n\u753b\u51fa\u76f8\u5173\u6027\u70ed\u529b\u56fe","ab7f13c6":"\u8bad\u7ec3\u96c6\uff1aMonthlyIncome\u670929731\u4e2a\u7f3a\u5931\u503c\uff0cNumberOfDependents\u67093924\u4e2a\u7f3a\u5931\u503c\n\n\u6d4b\u8bd5\u96c6\uff1aMonthlyIncome\u670920103\u4e2a\u7f3a\u5931\u503c\uff0cNumberOfDependents\u67092626\u4e2a\u7f3a\u5931\u503c\n\n\u6708\u6536\u5165\u7684\u7f3a\u5931\u91cf\u975e\u5e38\u5927\u3002","96581299":"**\u6570\u636e\u96c6\u7684\u7279\u5f81**\n\n\u6570\u636e\u96c6\u4e2d\u5305\u62ec\u4e86\u501f\u6b3e\u4eba\u7684\u5e74\u9f84\u3001\u6536\u5165\u3001\u5bb6\u5ead\u7b49\u60c5\u51b5\u548c\u8d37\u6b3e\u60c5\u51b5\uff0c\u517111\u4e2a\u53d8\u91cf\uff0c\u5176\u4e2dSeriousDlqin2yrs\u662flabel\u6807\u7b7e\uff0c\u53e6\u591610\u4e2a\u53d8\u91cf\u4e3a\u9884\u6d4b\u7279\u5f81\u3002\u63d0\u4f9b\u7684\u6570\u636e\u5b57\u5178\u5217\u51fa\u4e86\u53d8\u91cf\u540d\u79f0\u53ca\u6570\u636e\u7c7b\u578b\u60c5\u51b5\uff1a"}}