{"cell_type":{"90dfd99f":"code","e9fbe3cd":"code","2bd87cfe":"code","f911c55a":"code","dab075c1":"code","524ab53f":"code","1ee22aa8":"code","a2a5032e":"code","7215d19b":"code","a60af847":"code","9bbdbe1c":"code","7cdd459e":"code","b9725e6a":"code","082d3753":"code","7068fe3d":"code","cd2b7ae6":"code","97eaccbd":"code","d8692baf":"code","2c0d35e5":"code","e4e69081":"code","e236f749":"code","251c0049":"code","cef0b062":"code","0a10c518":"code","80b4712f":"code","30a51b31":"code","229fd3f5":"code","a1bc838b":"code","5065c17b":"code","1e7d1661":"code","84692d78":"code","3b188d2e":"code","58c43b8e":"code","ca6421d5":"code","855d8e90":"code","88a9bccc":"code","032d6f01":"code","7a2e7c44":"code","539611f4":"code","8b76ac97":"code","4a473ee9":"code","1b70b42c":"code","f4041319":"code","d0affec2":"code","63a93c82":"code","ad420d8c":"code","ec6cae9d":"code","7a8b11b9":"code","24c8fc3f":"code","99d1cd0b":"code","f0a9463d":"code","4f0b3822":"code","0f2944aa":"code","f9cbc510":"code","1664e46e":"markdown","4343a589":"markdown","84685840":"markdown","d6311189":"markdown"},"source":{"90dfd99f":"\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.subplots import make_subplots\nimport pandas as pd","e9fbe3cd":"# To print multiple output in a cell\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'","2bd87cfe":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f911c55a":"train = pd.read_csv('\/kaggle\/input\/customer-sgmentation\/Coustomer_sgmentation\/Train_aBjfeNk.csv')\ntest = pd.read_csv('\/kaggle\/input\/customer-sgmentation\/Coustomer_sgmentation\/Test_LqhgPWU.csv')","dab075c1":"print(train.shape)\ntrain.head()","524ab53f":"print(test.shape)\ntest.head()","1ee22aa8":"train['Segmentation'].value_counts()","a2a5032e":"trace1 = go.Pie(values = train['Segmentation'].value_counts(),labels = train['Segmentation'].unique(),textinfo='percent',insidetextorientation='radial',legendgroup='show')\ntrace2 = go.Histogram(x = train['Segmentation'],marker=dict(color='red'))\n#data = [trace1,trace2]\n#layout = go.Layout(title = 'Customer Segmentation')\n#fig = go.Figure(data = data, layout = layout)\nfig = make_subplots(rows=1, cols=2,subplot_titles=('Pie chart','Bar chart'),specs=[[{\"type\": \"pie\"}, {\"type\": \"histogram\"}]])  \n\n                          \nfig.append_trace(trace1,1,1)\nfig.append_trace(trace2,1,2)\nfig['layout'].update(title='Customer Segmentation')\nfig.show();","7215d19b":"train.describe()","a60af847":"train.dtypes","9bbdbe1c":"cat_cols = ['Gender','Ever_Married','Graduated','Profession','Spending_Score','Var_1']\nnom_cols = ['Age','Work_Experience','Family_Size']\ntag = 'Segmentation'","7cdd459e":"colors = ['blue','hotpink']\ndata = [go.Bar(x = train['Gender'].unique(), y = train['Gender'].value_counts(), marker_color=colors,text=train['Gender'].value_counts(),textposition='auto')]\nlayout = go.Layout(title = 'Gender')\nfig = go.Figure(data = data, layout = layout)\nfig.show()","b9725e6a":"colors = ['red','green']\ndata = [go.Bar(x = train['Ever_Married'].unique(), y = train['Ever_Married'].value_counts(),marker_color=colors)]\nlayout = go.Layout(title = 'Is She\/He Married?')\nfig = go.Figure(data = data, layout = layout)\nfig.show()","082d3753":"colors = ['red','green']\ndata = [go.Bar(x = train['Graduated'].unique(), y = train['Graduated'].value_counts(),marker_color=colors,opacity=0.7)]\nlayout = go.Layout(title = 'Is She\/He Graduated?')\nfig = go.Figure(data = data, layout = layout)\nfig.show()\n","7068fe3d":"#colors = ['lightskyblue','lightyellow']\ndata = [go.Bar(x = train['Profession'].unique(), y = train['Profession'].value_counts(),marker={'color': train['Profession'].value_counts(),'colorscale': 'Viridis'})]\nlayout = go.Layout(title = 'Profession')\nfig = go.Figure(data = data, layout = layout)\nfig.show()","cd2b7ae6":"colors = ['black','red','white']\ndata = [go.Bar(x = train['Spending_Score'].unique(), y = train['Spending_Score'].value_counts(),marker_color = colors)]\nlayout = go.Layout(title = 'Spendings')\nfig = go.Figure(data = data, layout = layout)\nfig.show()","97eaccbd":"\ndata = [go.Bar(x = train['Var_1'].unique(), y = train['Var_1'].value_counts(),\n               marker={'color': train['Profession'].value_counts(),'colorscale': 'Inferno'})]\nlayout = go.Layout(title = 'Anonymous')\nfig = go.Figure(data = data, layout = layout)\nfig.show()","d8692baf":"for col in nom_cols:\n    data = [go.Scatter(x=train[col], y =train.index, mode = 'markers')]\n    layout = go.Layout(title= col)\n    fig = go.Figure(data = data, layout = layout)\n    fig.show()","2c0d35e5":"for col in nom_cols:\n    data = [go.Box(x=train[col]),]\n    layout = go.Layout(title= col)\n    fig = go.Figure(data = data, layout = layout)\n    fig.show()","e4e69081":"for col in cat_cols:\n    ct=pd.crosstab(train[col],train[tag]) \n    #print(ct.index)\n    #print(ct.columns)\n    data = []\n    for s in ct.columns:\n        #print(s)\n        trace1 = go.Bar(x=ct.index.unique(),y=ct[s],name = s)\n        data.append(trace1)\n    layout = go.Layout(title = col+' wise Segment')\n    fig = go.Figure(data = data, layout = layout)\n    fig.show()","e236f749":"for col in nom_cols:\n    ct=pd.crosstab(train[col],train[tag]) \n    #print(ct.index)\n    #print(ct.columns)\n    data = []\n    for s in ct.columns:\n        #print(s)\n        trace1 = go.Bar(x=ct.index.unique(),y=ct[s],name = s)\n        data.append(trace1)\n    layout = go.Layout(title = col+' wise Segment')\n    fig = go.Figure(data = data, layout = layout)\n    fig.show()","251c0049":"train[tag].replace('A', 0,inplace=True) \ntrain[tag].replace('B', 1,inplace=True)\ntrain[tag].replace('C', 2,inplace=True) \ntrain[tag].replace('D', 3,inplace=True)","cef0b062":"train.isnull().sum()","0a10c518":"test.isnull().sum()","80b4712f":"import matplotlib.pyplot as plt\nbins=[18,25,30,40,90] \n\ntrain['Age_bin']=pd.cut(train['Age'],bins)\nLoanAmount_bin=pd.crosstab(train['Age_bin'],train['Ever_Married']) \nLoanAmount_bin.div(LoanAmount_bin.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True) \nplt.xlabel('Age') \nP = plt.ylabel('Percentage')","30a51b31":"train[train['Ever_Married'].isnull()]","229fd3f5":"train.loc[(train['Ever_Married'].isnull())&(train['Age']>30),'Ever_Married']='Yes'\ntrain.loc[(train['Ever_Married'].isnull())&(train['Age']<=30),'Ever_Married']='No'\n\ntest.loc[(test['Ever_Married'].isnull())&(test['Age']>30),'Ever_Married']='Yes'\ntest.loc[(test['Ever_Married'].isnull())&(test['Age']<=30),'Ever_Married']='No'","a1bc838b":"bins=[18,30,40,90] \nlabels = ['below30','30-40','40+']\ntrain['Age_bin']=pd.cut(train['Age'],bins,labels=labels)\n\nct_bin=pd.crosstab(train['Age_bin'],train['Graduated']) \n#print(ct_bin)\n#ct_bin.div(LoanAmount_bin.sum(1).astype(float), axis=0).plot(kind=\"bar\") \ndata =[]\nfor s in ct_bin:\n    #print(s)\n    trace1 = go.Scatter(x=ct_bin.index.unique(),y=ct_bin[s],name = s)\n    data.append(trace1)\nlayout = go.Layout(title = 'Graduated')\nfig = go.Figure(data = data, layout = layout)\nfig.show()","5065c17b":"train.loc[(train['Graduated'].isnull())&(train['Age']>30),'Graduated']='Yes'\ntrain.loc[(train['Graduated'].isnull())&(train['Age']<=30),'Graduated']='No'\n\ntest.loc[(test['Graduated'].isnull())&(test['Age']>30),'Graduated']='Yes'\ntest.loc[(test['Graduated'].isnull())&(test['Age']<=30),'Graduated']='No'","1e7d1661":"train['Profession'].fillna(train['Profession'].mode()[0], inplace=True) \ntrain['Work_Experience'].fillna(train['Work_Experience'].median(), inplace=True) \ntrain['Family_Size'].fillna(train['Family_Size'].median(), inplace=True)\ntrain['Var_1'].fillna(train['Var_1'].mode()[0], inplace=True)\n\ntest['Profession'].fillna(test['Profession'].mode()[0], inplace=True) \ntest['Work_Experience'].fillna(test['Work_Experience'].median(), inplace=True) \ntest['Family_Size'].fillna(test['Family_Size'].median(), inplace=True)\ntest['Var_1'].fillna(test['Var_1'].mode()[0], inplace=True)","84692d78":"def text_to_numerical(data):\n    for c in cat_cols:\n        print(c)\n        i = 0\n        for u in data[c].unique():\n            data[c].replace(u,i,inplace=True)\n            i += 1\n    return data","3b188d2e":"train = text_to_numerical(train)\ntest = text_to_numerical(test)","58c43b8e":"matrix = train.corr()\n#print(matrix)\nxcols = nom_cols+[tag]\ndata = go.Heatmap(z=matrix,x = nom_cols,y = nom_cols,text = matrix,visible= True)\nfig = go.Figure(data)\nfig.show()","ca6421d5":"import numpy as np\nfor col in nom_cols:\n    print(col)\n    train[col] = np.sqrt(train[col])\n    test[col] = np.sqrt(test[col])","855d8e90":"train","88a9bccc":"train=train.drop('ID',axis=1)\ntrain= train.drop('Age_bin',axis = 1)\ntrain= train.drop('Work_Experience',axis = 1)\n\ntest=test.drop('ID',axis=1)\ntest=test.drop('Work_Experience',axis=1)","032d6f01":"test","7a2e7c44":"X = train.drop(tag,1) \ny = train[tag]","539611f4":"X=pd.get_dummies(X) \ntrain=pd.get_dummies(train) \ntest=pd.get_dummies(test)","8b76ac97":"from sklearn.model_selection import train_test_split\nx_train, x_cv, y_train, y_cv = train_test_split(X,y, test_size =0.15)","4a473ee9":"test","1b70b42c":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV\nimport lightgbm as lgb","f4041319":"\ni=1 \nkf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True) \nfor train_index,test_index in kf.split(X,y):     \n    print('\\n{} of kfold {}'.format(i,kf.n_splits))     \n    xtr,xvl = X.loc[train_index],X.loc[test_index]     \n    ytr,yvl = y[train_index],y[test_index]         \n    model = RandomForestClassifier(random_state=1, max_depth=7,n_estimators=181)     \n    model.fit(xtr, ytr)     \n    pred_test = model.predict(xvl)     \n    score = accuracy_score(yvl,pred_test)     \n    print('accuracy_score',score)     \n    i+=1 \n\n    pred_test = model.predict(test)","d0affec2":"submission=pd.read_csv(\"\/kaggle\/input\/customer-sgmentation\/Coustomer_sgmentation\/sample_submission_wyi0h0z.csv\")\nsubmission[tag]=pred_test \n#submission['Loan_ID']=test_original['Loan_ID']\nsubmission[tag].replace(0, 'A',inplace=True) \nsubmission[tag].replace(1, 'B',inplace=True)\nsubmission[tag].replace(2, 'C',inplace=True) \nsubmission[tag].replace(3, 'D',inplace=True)\nsubmission.to_csv('lgb81sqrt.csv',index = False)","63a93c82":"\n# Provide range for max_depth from 1 to 20 with an interval of 2 and from 1 to 200 with an interval of 20 for n_estimators \nparamgrid = {'max_depth': list(range(1, 20, 2)), 'n_estimators': list(range(1, 200, 20))}\ngrid_search=GridSearchCV(lgb.LGBMClassifier(),paramgrid)","ad420d8c":"from sklearn.model_selection import train_test_split \nx_train, x_cv, y_train, y_cv = train_test_split(X,y, test_size =0.3, random_state=1)\n# Fit the grid search model \ngrid_search.fit(x_train,y_train)","ec6cae9d":"# Estimating the optimized value \ngrid_search.best_estimator_","7a8b11b9":"\ni=1 \nkf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True) \nfor train_index,test_index in kf.split(X,y):     \n    print('\\n{} of kfold {}'.format(i,kf.n_splits))     \n    xtr,xvl = X.loc[train_index],X.loc[test_index]     \n    ytr,yvl = y[train_index],y[test_index]         \n    model = XGBClassifier(n_estimators=121, max_depth=7,random_state = 1)     \n    model.fit(xtr, ytr)     \n    pred_test = model.predict(xvl)     \n    score = accuracy_score(yvl,pred_test)     \n    print('accuracy_score',score)     \n    i+=1 \n    pred_test = model.predict(test) \n    pred3=model.predict_proba(test)[:,1]","24c8fc3f":"\nclf = lgb.LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n               importance_type='split', learning_rate=0.1, max_depth=5,\n               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n               n_estimators=81, n_jobs=-1, num_leaves=31, objective=None,\n               random_state=1, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\nclf.fit(x_train, y_train)\n# predict the results\ny_pred=clf.predict(x_cv)\naccuracy=accuracy_score(y_pred, y_cv)\nprint('LightGBM Model accuracy score: {0:0.4f}'.format(accuracy_score(y_cv, y_pred)))","99d1cd0b":"print('Training set score: {:.4f}'.format(clf.score(x_train, y_train)))\n\nprint('Test set score: {:.4f}'.format(clf.score(x_cv, y_cv)))","f0a9463d":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_cv, y_pred)\nprint('Confusion matrix\\n\\n', cm)\nprint('\\nTrue Positives(TP) = ', cm[0,0])\nprint('\\nTrue Negatives(TN) = ', cm[1,1])\nprint('\\nFalse Positives(FP) = ', cm[0,1])\nprint('\\nFalse Negatives(FN) = ', cm[1,0])","4f0b3822":"from sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier(leaf_size = 1, n_neighbors = 3,p = 1)\nclf.fit(x_train, y_train)\n# predict the results\ny_pred=clf.predict(x_cv)\naccuracy=accuracy_score(y_pred, y_cv)\naccuracy","0f2944aa":"accuracy","f9cbc510":"from sklearn.cluster import KMeans\n\nclf = KMeans(n_clusters=4)\nclf.fit(x_train,y_train)\ny_pred=clf.predict(x_cv)\naccuracy=accuracy_score(y_pred, y_cv)\naccuracy","1664e46e":"#### Univariant Analysis","4343a589":"Seems like a well balanced dataset","84685840":"Seems Blues are little more than pinks","d6311189":"# Bivariate Analysis"}}