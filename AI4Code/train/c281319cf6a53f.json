{"cell_type":{"25f78189":"code","03595e2d":"code","55e65d8c":"code","4015c7cb":"code","a3f9a15e":"code","391fcf17":"code","3ce5d525":"code","dd2ce73d":"code","26ea25f2":"code","57e38234":"code","423b9f48":"code","60dcd048":"code","888db9d0":"code","972c18fd":"code","e3ace53e":"code","712a765b":"code","521f5fbd":"code","4e36f3e3":"code","beb8c57a":"code","13ee7be5":"code","f9a0b802":"markdown","419af0ae":"markdown"},"source":{"25f78189":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True)\n\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n\nimport cufflinks as cf\ncf.go_offline()\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","03595e2d":"df = pd.read_csv(\"..\/\/input\/StudentsPerformance.csv\")","55e65d8c":"df.info()","4015c7cb":"df.head()","a3f9a15e":"df.describe()","391fcf17":"df.iloc[:,:5].describe()","3ce5d525":"layout = dict(title = \"Stacked Count\", xaxis = dict(title = 'Type'), yaxis = dict(title = 'Count'),\n              barmode='stack')\ntrace= []\nfor each in df.select_dtypes(include=['object']).columns:\n    df2 = df[each].value_counts()\n    for i, each2 in enumerate(df2.index):\n        trace.append(go.Bar(x = [each], y =[df2.values[i]],name=each2,legendgroup= each))\n\nfig = go.Figure(data= trace, layout=layout)\npy.offline.iplot(fig)","dd2ce73d":"py.offline.iplot([go.Parcats({'dimensions':[{'label': each, 'values':df[each].values} for each in df.select_dtypes(include=['object']).columns]})])","26ea25f2":"fig = ff.create_distplot(hist_data=[df[each] for each in df.select_dtypes(include=['int64']).columns], group_labels=df.select_dtypes(include=['int64']).columns,\n                        curve_type='normal',histnorm='probability')\nfig['layout'].update(title='Distribution Plot of Scores')\npy.offline.iplot(fig)","57e38234":"layout = dict(title = \"Cumulative Distribution of Scores\",xaxis = dict(title = 'Score'), yaxis = dict(title = '%'))\ntrace= []\nfor each in df.select_dtypes(include=['int64']).columns:\n    trace.append(go.Histogram(x = df[each], cumulative=dict(enabled=True),histnorm='percent',name=each))\n\nfig = go.Figure(data= trace, layout=layout)\npy.offline.iplot(fig)","423b9f48":"layout = dict(title = \"Box Plot of Scores\",xaxis = dict(title = 'Score Type'), yaxis = dict(title = 'Score'))\ntrace= []\nfor each in df.select_dtypes(include=['int64']).columns:\n    trace.append(go.Box(y = df[each],orientation='v', name=each))\n\nfig = go.Figure(data= trace, layout=layout)\npy.offline.iplot(fig)","60dcd048":"layout = dict(title = \"Histogram of Scores\",xaxis = dict(title = 'Score'), yaxis = dict(title = 'Count'))\ntrace= []\nfor each in df.select_dtypes(include=['int64']).columns:\n    trace.append(go.Histogram(x = df[each],name=each))\n\nfig = go.Figure(data= trace, layout=layout)\npy.offline.iplot(fig)","888db9d0":"fig, ax = plt.subplots(figsize=(8,6))\nsns.heatmap(df.corr(method='spearman'),\n                       ax=ax,cmap='coolwarm',\n                       annot=True)","972c18fd":"for typ in df.select_dtypes(include=['object']).columns:\n    for score_typ in df.select_dtypes(include=['Int64']).columns:\n        trace= []\n        for uniq_typ in df[typ].unique():\n            layout = dict(title = \"Cumulative Distribution of \" + score_typ +  \" by \" + typ ,xaxis = dict(title = 'Score'), yaxis = dict(title = '%'))\n            trace.append(go.Histogram(x = df[df[typ] == uniq_typ][score_typ], cumulative=dict(enabled=True),histnorm='percent',name=uniq_typ))\n        fig = go.Figure(data= trace, layout=layout)\n        py.offline.iplot(fig)","e3ace53e":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators=500)","712a765b":"X = pd.concat([pd.get_dummies(df.select_dtypes(include=['object']),prefix=df.select_dtypes(include=['object']).columns, prefix_sep='_')], axis=1)","521f5fbd":"layout = dict(title = \"Feature Importance\", yaxis = dict(title = '%'),\n              barmode='stack')\ntrace= []\nfor each in df.select_dtypes(include=['int64']).columns:\n    rf.fit(X, df[each])\n    d = dict(zip(X.columns, rf.feature_importances_*100))\n    trace.append(go.Bar(x = list(d.keys()), y =list(d.values()),name=each))\nfig = go.Figure(data= trace, layout=layout)\npy.offline.iplot(fig)","4e36f3e3":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","beb8c57a":"df2 = pd.DataFrame([le.fit_transform(df[each]) for each in df.select_dtypes(include=['object']).columns]).T\ndf2.columns = df.select_dtypes(include=['object']).columns","13ee7be5":"layout = dict(title = \"Feature Importance\", yaxis = dict(title = '%'),\n              barmode='stack')\ntrace= []\nfor each in df.select_dtypes(include=['int64']).columns:\n    rf.fit(df2, df[each])\n    d = dict(zip(df2.columns, rf.feature_importances_*100))\n    trace.append(go.Bar(x = list(d.keys()), y =list(d.values()),name=each))\nfig = go.Figure(data= trace, layout=layout)\npy.offline.iplot(fig)","f9a0b802":"Observations from the cumulative plots\n* Boys performed better in maths while girls were better in language\n* Race E performed better than any other race\n* Parents' education has high influence on the scores. \n             % of Students with Maths score more than 70 - \n                     Children of High school educated - 27%, \n                     Children of Master\u2019s degree holders - 53% \n* Rich students scored better\n* Test preparation course is highly influential in obtaining good scores, especially for writing test","419af0ae":"**Feature Importance Analysis**"}}