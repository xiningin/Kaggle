{"cell_type":{"f9c471db":"code","bb4d9e0a":"code","57270075":"code","92408478":"code","70d3cee5":"code","856f3102":"code","8fc5bd63":"code","b7bd8334":"code","612941c4":"code","8e44ac92":"code","0cf72b44":"code","fbeff680":"markdown","e54ecd35":"markdown","267e5b7c":"markdown","3bab389e":"markdown","f5297238":"markdown","0e3e3dd1":"markdown","547a8520":"markdown","bea06d9c":"markdown","f663206e":"markdown"},"source":{"f9c471db":"#Import packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","bb4d9e0a":"#Load in NYSE data\ndata = pd.read_csv('\/kaggle\/input\/nyse\/prices-split-adjusted.csv', parse_dates = True)\ndata.tail()","57270075":"#Pick two stocks for 2016: ZBH (Zimmer Biomet) & WLTW (Willis Towers Watson)\nWLTW = data.loc[(data.symbol == 'WLTW') & (data.date >= '2016-01-05') & (data.date <= '2016-12-31')]\nZBH = data.loc[(data.symbol == 'ZBH') & (data.date >= '2016-01-05') & (data.date <= '2016-12-31')]\n\nWLTW.reset_index(inplace = True)\nZBH.reset_index(inplace = True)\n\nWLTW = WLTW.drop('index', axis = 1)\nZBH = ZBH.drop('index', axis = 1)","92408478":"#Invest $100 in each stock on Jan 5th and hold until Dec 30th - how do they move (close price)?\nWLTW['daily_close_return'] = WLTW.close.pct_change()\nZBH['daily_close_return'] = ZBH.close.pct_change()\n\nWLTW.dropna(inplace = True)\nZBH.dropna(inplace = True)\n\nWLTW['returns_100'] = 100 * np.cumprod(WLTW.daily_close_return + 1)\nZBH['returns_100'] = 100 * np.cumprod(ZBH.daily_close_return + 1)\n\nplt.plot(WLTW.date, WLTW.returns_100)\nplt.plot(ZBH.date, ZBH.returns_100)\nplt.legend(['WLTW', 'ZBH'])\nplt.xticks([])\nplt.title('Value of Investments Through 2016')\nplt.xlabel('Time Through 2016')\nplt.ylabel('Value')\nplt.show()","70d3cee5":"#Mean and standard deviation of both\nprint(('Mean of WLTW: ' + str(round((WLTW.returns_100.values[-1] - 100) \/ 100, 2))))\nprint('Standard Deviation of WLTW: ' + str(round(np.std(WLTW.daily_close_return) * np.sqrt(len(WLTW.daily_close_return)), 2)))\n\nprint(('Mean of ZBH: ' + str(round((ZBH.returns_100.values[-1] - 100) \/ 100, 2))))\nprint('Standard Deviation of ZBH: ' + str(round(np.std(ZBH.daily_close_return) * np.sqrt(len(ZBH.daily_close_return)), 2)))","856f3102":"#50% weighting to each stock\ndf_WLTW_ZBH = pd.concat([WLTW[['date', 'close']], ZBH.close], axis = 1)\ndf_WLTW_ZBH.columns = ['date', 'WLTW', 'ZBH']\ndf_WLTW_ZBH.WLTW = df_WLTW_ZBH.WLTW.pct_change()\ndf_WLTW_ZBH.ZBH = df_WLTW_ZBH.ZBH.pct_change()\ndf_WLTW_ZBH = df_WLTW_ZBH.dropna()\ndf_WLTW_ZBH['port_return'] = 0.5 * df_WLTW_ZBH.WLTW + 0.5 * df_WLTW_ZBH.ZBH\ndf_WLTW_ZBH['port_return_100'] = 100 * np.cumprod(df_WLTW_ZBH.port_return + 1)\nplt.plot(df_WLTW_ZBH.date, df_WLTW_ZBH.port_return_100)\nplt.plot(WLTW.returns_100)\nplt.plot(ZBH.returns_100)\nplt.legend(['50% Each Portfolio', 'WLTW', 'ZBH'])\nplt.xticks([])\nplt.title('Value of Investments Through 2016')\nplt.xlabel('Time Through 2016')\nplt.ylabel('Value')\nplt.show()","8fc5bd63":"#By diversifying, not only did we have a positive return, but we also had lower risk than both stocks\nprint(('Mean of Portfolio: ' + str(round((df_WLTW_ZBH.port_return_100.values[-1] - 100) \/ 100, 2))))\nprint('Standard Deviation of Portfolio: ' + str(round(np.std(df_WLTW_ZBH.port_return) * np.sqrt(len(df_WLTW_ZBH.port_return)), 2)))","b7bd8334":"#Install PyPortfolioOpt\n! pip install PyPortfolioOpt","612941c4":"#Generate efficient frontier\nfrom pypfopt.expected_returns import mean_historical_return\nfrom pypfopt.risk_models import sample_cov\nfrom pypfopt.efficient_frontier import EfficientFrontier\nfrom pypfopt import plotting\n\ndf_WLTW_ZBH = pd.concat([WLTW[['close']], ZBH.close], axis = 1)\ndf_WLTW_ZBH.columns = ['WLTW', 'ZBH']\nmu = mean_historical_return(df_WLTW_ZBH)\nS = sample_cov(df_WLTW_ZBH)\n\nef = EfficientFrontier(mu, S)\nplotting.plot_efficient_frontier(ef)\nplt.title('Efficient Frontier for Two Stock Portfolio')\nplt.show()","8e44ac92":"#Pick 50 different stocks\nnp.random.seed(777)\n\nstocks_random = np.random.choice(data.loc[(data.date >= '2016-01-05') & (data.date <= '2016-12-31')].symbol.unique(), 50)\n\nstocks_50 = data.loc[data.symbol.isin(stocks_random)]\n\nstocks_50_wide = stocks_50[['date', 'symbol', 'close']].pivot_table(index = 'date',\n                                           columns = 'symbol',\n                                           values = 'close')\n\nstocks_50_wide = stocks_50_wide.loc[(stocks_50_wide.index >= '2016-01-05') & (stocks_50_wide.index <= '2016-12-31')]\n\nmu = mean_historical_return(stocks_50_wide)\nS = sample_cov(stocks_50_wide)\n\nef = EfficientFrontier(mu, S)\nplotting.plot_efficient_frontier(ef)\nplt.title('Efficient Frontier for 100 Stock Portfolio')\nplt.show()","0cf72b44":"#Pretty it up for full clarification from pyportfolioopt package documentation\nmu = mean_historical_return(stocks_50_wide)\nS = sample_cov(stocks_50_wide)\n\nef = EfficientFrontier(mu, S)\n\nfig, ax = plt.subplots()\nplotting.plot_efficient_frontier(ef, ax=ax, show_assets = False)\n\n# Find the tangency portfolio\nef.max_sharpe()\nret_tangent, std_tangent, _ = ef.portfolio_performance()\nax.scatter(std_tangent, ret_tangent, marker=\"*\", s=100, c=\"r\", label=\"Max Sharpe\")\n\n# Generate random portfolios\nn_samples = 10000\nw = np.random.dirichlet(np.ones(len(mu)), n_samples)\nrets = w.dot(mu)\nstds = np.sqrt(np.diag(w @ S @ w.T))\nsharpes = rets \/ stds\nax.scatter(stds, rets, marker=\".\", c=sharpes, cmap=\"viridis_r\")\n\n# Output\nax.set_title(\"Efficient Frontier with Max Sharpe Portfolio\")\nplt.xlim([0.09, 0.25])\nax.legend()\nplt.tight_layout()\nplt.show()","fbeff680":"While we calculated *realized* return and standard deviation, we can generalize more with *expected* return and standard deviation to show how diversification can imply similar returns with less risk. Formulas are below. I will not go into great detail, but if you are curious I encourage you to explore further. There are some excellent videos and readings that go into more depth.\n\nWhile a portfolio's expected return is pretty intuitive, the standard deviation is not since you need to take into account the correlation between the two stocks.\n\nw = weight\n\nr = expected return\n\n\u03c3 = standard deviation\n\n\u03c1 = correlation coefficient\n\nExpected Return: uP = wA * rA + wB * rB\n\nStandard Deviation: \u03c3P = \u221a(wA^2 * \u03c3A^2 + wB^2 * \u03c3B^2 + 2 * wA * wB * \u03c3A * \u03c3B * \u03c1AB)\n\nSo what if we assume in the next year that the expected returns of the two stocks we looked at are going to be the realized return we calculated? How should we weight each stock in order to get the most \"bang for our buck\" (best risk to reward ratio) in our portfolio besides just doing a 50\/50 split? \n\nThis is where we can use the pyportfolioopt package to generate something called the efficient frontier, which is weighting assets within a portfolio in a way to give us the greatest return for a certain level of risk (standard deviation).","e54ecd35":"I hope this notebook gave you some important insight into the power of diversification and portfolio optimization that can be demonstrated through Python. While there are many headlines that mention how someone got rich off of investing in bitcoin or Tesla, it is important to point out that this does not usually happen, and it is not a time tested strategy for successful investing. Plus, it is not highlighting the people that tried this on another stock (like a penny stock) and lost a lot of money, just like what might have happened to some with the large bitcoin plunge. \n\nSo the next time there is a \"hot\" or \"trendy\" stock that everyone is investing in, make sure to take a step back, remember your overall investing goals and risk appetite, and come to a fair assessment of how you would like to proceed.","267e5b7c":"From the above plot, we can see they ended up in about the same spot. ZBH was doing fantastic until a huge drop hit later in the year to put them both in line.\n\nWhat are the returns and standard deviations (risk)? These can be seen below.","3bab389e":"Both had negative returns and fairly high standard deviations (which is to be expected when investing in single stocks). What would happen if we invested fifty dollars in each stock within a hundred dollar portfolio?\n\nWe will plot this portfolio in addition to the ones above.","f5297238":"Since we only have two assets, it is a bit difficult to interpret, but essentially what this is saying is that we can weight these two assets in ways that put us along the blue line. So if we would like to generate the least amount of risk (volatility), our expected return would be around 0.005. If we would like to generate the highest return and still be most efficient, we would invest in WLTW 100%.\n\nAnother interesting thing to note is that just investing in ZBH is inefficient. If we wanted to be less risky and still generate more returns, we would just invest in WLTW (assuming our expected return and standard deviation hold true into the future).\n\nSo how can we make this a more interesting and challenging problem? Let's test out this same approach but with many different assets besides just two and see the results, still assuming our expected returns are the realized returns over 2016.","0e3e3dd1":"With the cryptocurrency tumble that happened recently, the finance knowledge in me was screaming to pick a dataset and show the importance of diversification, especially after reading some articles that discussed how people went \"all-in\" on crypto...\n\nThis notebook walks through the importance of diversification by first looking at realized returns from NYSE data when just investing in a single stock and when investing in two stocks within a portfolio. Then, it leads to generalizing the concept of portfolio optimization by walking through an example with the PyPortfolioOpt package.","547a8520":"Comparing this plot to our two stock plot, one can notice that we can achieve better returns for less risk, a very important point about diversification (you might recall the phrase \"Don't put all of your eggs in one basket\" which is very relevant here). As we continue adding stocks that are not perfectly correlated with our portfolio, we can reduce risk and maintain a desired return level. However, it is worth it to point out that it is nearly impossible to get positive returns with zero risk. If this opportunity is present, there are (most likely) people that will find it immediately and exploit it, taking profits until the opportunity is no longer there.\n\nLet's look at one last plot that mirrors an excellent example from the PyPortfolioOpt documentation. It has a couple additional items to better illustrate certain points. First, it has many different portfolios below the efficient frontier. In essence, these are all inefficient since they do not fall on the efficient frontier. However, as the points get more blue (closer to the efficient frontier), it shows that they are more efficient. Also, the plot below has a star on it to indicate the optimal portfolio indicated by the maximum sharpe ratio. While I will not go into depth on this, one can think of it as the most \"bang for your buck\" that we originally set out to answer.","bea06d9c":"For the most part, we see returns that are in between the returns generated from the two assets separately. However, this changes near the end when ZBH has a massive drop. Essentially, by diversifying our portfolio, we are being less risky since these two assets are not perfectly correlated (they do not move in the same direction every day). As a result, we end up better off at the end of 2016 than if we invested in just one of the stocks. More specifically, we can see the realized return and standard deviation below.","f663206e":"For the first part of this analysis, we will pick two stocks and assume we invest a hundred dollars in them at the start of 2016 and hold until the end of 2016. How will they do?"}}