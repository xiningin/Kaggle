{"cell_type":{"51b435bd":"code","068daded":"code","0b1bbc5d":"code","35edc808":"code","56bf84c8":"code","5d089233":"code","e7a666e8":"code","b3b24a1d":"code","bfc260f2":"code","258951cc":"code","c7ee0046":"code","e48cb9b8":"code","58579b9c":"code","3dfa6c41":"code","fd618165":"code","ce3e138e":"code","c5daeb42":"code","2bf88c10":"code","3f6eeba3":"code","6cf773dc":"code","707b1584":"code","cebe2612":"code","ea83d6a7":"code","ff5c7bfa":"code","4b06c68e":"code","ca462def":"code","0e06ba79":"code","53d81d65":"code","baed7235":"code","74be1b33":"code","0d7436c3":"code","3297514c":"code","cf8890ba":"code","92f1410e":"code","76c445ca":"code","5939a8dd":"code","82c58cd0":"code","7ec06cfb":"code","7233e7a1":"code","83956b14":"code","a44e17aa":"code","097ba15c":"code","e83c2d0a":"code","e67eb27d":"code","d61abbe7":"code","bd58fab7":"code","06747bea":"code","80332aad":"code","c4f0a0bc":"code","d8d06557":"code","29d8bcb2":"code","d2806093":"code","402f8468":"code","8a6259d4":"code","9fa715c9":"code","759e6aca":"code","353879ee":"code","dc346619":"code","c04f0d90":"code","8c83a1c6":"code","e3c7e3d0":"code","ba840fed":"code","8f2cc93a":"code","8caf0d87":"code","60af75d2":"code","99327606":"code","524779aa":"code","621448c5":"code","c54c870b":"code","181cb10b":"code","c553ac14":"code","cf69fb51":"code","9b84b022":"code","e5efe143":"code","f490c1ae":"code","e7bc335f":"code","0829646c":"code","3284df31":"code","cbfdc677":"code","0927cb70":"code","3109a18c":"code","5df330c5":"code","610a35cd":"code","7cdd5ae5":"code","5a2f1945":"code","c988ac5d":"code","b2beb77e":"code","5e069df1":"code","e4a4c9e9":"code","0a4d4b97":"code","82239b65":"code","2ee25b24":"code","52df8952":"code","4e187d8b":"code","973aa0c3":"code","68753e97":"code","ff5ffb54":"code","05541507":"code","f5228431":"markdown","0ef261eb":"markdown","65c89adc":"markdown","d388be61":"markdown","4f5fcc90":"markdown","b6ac7c91":"markdown","1e02fa64":"markdown","67655107":"markdown","6fd2062d":"markdown","a18abfec":"markdown","95e59938":"markdown","8c212cdb":"markdown"},"source":{"51b435bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","068daded":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","0b1bbc5d":"train_df.columns","35edc808":"train_columns = train_df.columns\ntest_columns = test_df.columns\nnp.setdiff1d(train_columns,test_columns)","56bf84c8":"train_df.head()","5d089233":"train_df.describe()","e7a666e8":"train_df.info()","b3b24a1d":"def bar_plot(variable):\n    \"\"\"\n    input: variable(ex:\"sex\")\n    output:bar plot&value count\n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    #count number of categorical variables(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","bfc260f2":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","258951cc":"train_df[\"Age\"].value_counts()","c7ee0046":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n \".format(train_df[c].value_counts()))","e48cb9b8":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable])\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","58579b9c":"numericVal = [\"Fare\",\"Age\",\"PassengerId\"]\nfor num in numericVal:\n    plot_hist(num)","3dfa6c41":"train_df[[\"Pclass\",\"Survived\"]]","fd618165":"#Pclass-Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean()","ce3e138e":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)\n","c5daeb42":"#Sex-Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","2bf88c10":"train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False).mean()","3f6eeba3":"#SibSp-Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","6cf773dc":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index = False).mean()\n","707b1584":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","cebe2612":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]\n","ea83d6a7":"train_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)\n#drop outliers","ff5c7bfa":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","4b06c68e":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","ca462def":"train_df.info()","0e06ba79":"train_df.columns[train_df.isnull().any()]","53d81d65":"train_df.isnull().sum()","baed7235":"train_df[train_df[\"Embarked\"].isnull()]","74be1b33":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","0d7436c3":"train_df[\"Embarked\"]= train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","3297514c":"train_df[train_df[\"Fare\"].isnull()]","cf8890ba":"np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"])","92f1410e":"train_df[train_df[\"Pclass\"]==3]","76c445ca":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","5939a8dd":"train_df[train_df[\"Fare\"].isnull()]\n","82c58cd0":"train_df[train_df[\"Age\"].isnull()]\n","7ec06cfb":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show() #Sex is not informative for age prediction, age distribution seems to be same.\n","7233e7a1":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","83956b14":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","a44e17aa":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","097ba15c":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","e83c2d0a":"train_df[\"Age\"][train_df[\"Age\"].isnull()].index","e67eb27d":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","d61abbe7":"train_df[train_df[\"Age\"].isnull()]\n","bd58fab7":"train_df[\"Name\"]","06747bea":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split('.')[0].split(',')[-1].strip() for i in name]","80332aad":"train_df[\"Title\"]","c4f0a0bc":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","d8d06557":"train_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\n","29d8bcb2":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","d2806093":"# convert to categorical\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","402f8468":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","8a6259d4":"g = sns.factorplot(x=\"Title\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","9fa715c9":"train_df.drop(labels = [\"Name\"],axis = 1, inplace = True)","759e6aca":"train_df.head()","353879ee":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","dc346619":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","c04f0d90":"train_df.head()","8c83a1c6":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","e3c7e3d0":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","ba840fed":"train_df.head(10)\n","8f2cc93a":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","8caf0d87":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","60af75d2":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","99327606":"train_df[\"Embarked\"].head()","524779aa":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","621448c5":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","c54c870b":"train_df[\"Ticket\"].head(20)","181cb10b":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","c553ac14":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else :\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","cf69fb51":"train_df[\"Ticket\"].head(20)\n","9b84b022":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","e5efe143":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","f490c1ae":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df.head()","e7bc335f":"train_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","0829646c":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","3284df31":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","cbfdc677":"train_df.columns\n","0927cb70":"test_df","3109a18c":"train_df_len\n","5df330c5":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","610a35cd":"test = train_df[train_df_len : ]\ntest.drop(labels = \"Survived\", axis = 1, inplace = True)","7cdd5ae5":"test.head()","5a2f1945":"train = train_df[: train_df_len]","c988ac5d":"X_train = train.drop(labels = [\"Survived\"],axis = 1)\ny_train = train[\"Survived\"]","b2beb77e":"X_train,X_test,y_train,y_test = train_test_split(X_train,y_train,test_size = 0.33,random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","5e069df1":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train = round(logreg.score(X_train,y_train)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train)) ","e4a4c9e9":"acc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))\n","0a4d4b97":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]","82239b65":"dt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}","2ee25b24":"classifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","52df8952":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])\n#njobs -1 parelel cal\u0131smas\u0131 , verbose 1 cal\u0131s\u0131rken ad\u0131mlar\u0131 ekrana yazmas\u0131","4e187d8b":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()","973aa0c3":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\n","68753e97":"X_pred = votingC.predict(X_test)\nprint(accuracy_score(X_pred,y_test))","ff5ffb54":"test_df.head()","05541507":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","f5228431":"<a id=\"5\"> <\/a>\n# Numverical Variable","0ef261eb":"<a id=\"4\"> <\/a>\n# Categorical Variables","65c89adc":"<a id=\"2\"> <\/a>\n# Variable Description\n\n1. PassengerId : unique id number of to each passenger\n1. Survived : passenger survive(1) or died(0)\n1. Pclass : passenger class\n1. Name: passenger name\n1. Sex : gender of passenger\n1. Age : age of passenger\n1. SibSp : number of siblings\/spouses\n1. Parch : number of parents\/children\n1. Ticket : ticket number\n1. Fare : amount of money spent on ticket\n1. Cabin : cabin category\n1. Embarked : port where passenger embarked (C:Cherbourg , Q:Queenstown , S:Southampton)","d388be61":"# Introduction\nThe sinkng of Titanic isone of the most notorious shipwredcks is the history. In 1912,during her voyage,the titanic sank after colliding with and iceberg. killing 1502 out of 2224 passengers and crew.\n\n<font color='blue'>\n    \nContent : \n    \n    \n1 .[Load And Check Data](#1)\n   \n2 .[Variable Description](#2)    \n* [Univarite Variable](#3)    \n    * [Categorical](#4)\n    * [Numerical](#5)\n    \n    \n3. [Basic Data Analysis](#6)\n    \n4. [Outlier Detetction](#7)\n\n5 .[Missing Values](#8)    \n* [Find Missing Value](#9)    \n* [Fill Missing Value](#10)    \n       \n    ","4f5fcc90":"<a id=\"10\"> <\/a>\n\nFill Missing Value\n* Embarked has 2 missing values\n* Fare has only 1","b6ac7c91":"\n<a id=\"6\"> <\/a>\n# Basic Data Analysis\n* Pclass-Survived\n* Sex-Survived\n* SibSp-Survived\n* Parch-Survived","1e02fa64":"<a id=\"8\"> <\/a>\n\n# Missing Value","67655107":"<a id=\"9\"> <\/a>\n\nFind Missing Value","6fd2062d":"* float64(2) :  Fare and Age\n* int64(5) : Pclas,sibsp,parch,passengerId and survived\n* object(5) : cabin,embarked,ticket,name and sex","a18abfec":"<a id=\"1\"> <\/a>\n# Load And Check Data","95e59938":"<a id=\"3\"> <\/a>\n# Univariate Variable\n* Categorical Variables : Survived, Sex, Pclass,Embarked,Cabin,Name,Ticket,Sibsp and Parch\n* Numerical Variables : Fare,Age and PassengerId","8c212cdb":"<a id=\"7\"> <\/a>\n# Outlier Detection"}}