{"cell_type":{"fd2ccf74":"code","cc77e4c1":"code","3e48c1d1":"code","4a3e6011":"code","66bfad27":"code","8067cc9e":"code","305152d7":"code","ee0a285f":"code","efe39440":"code","b3306148":"code","56241c07":"markdown","59fd9cd7":"markdown","9c706d2e":"markdown","ed869423":"markdown"},"source":{"fd2ccf74":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport tensorflow.keras.layers as L\nfrom tensorflow.keras import Model\nfrom sklearn.metrics import f1_score\nfrom tensorflow.keras import callbacks","cc77e4c1":"train = pd.read_csv(\"..\/input\/liverpool-ion-switching\/train.csv\")\ntest = pd.read_csv(\"..\/input\/liverpool-ion-switching\/test.csv\")\nsub = pd.read_csv(\"..\/input\/liverpool-ion-switching\/sample_submission.csv\", dtype=dict(time=str))","3e48c1d1":"n_classes = train.open_channels.unique().shape[0]","4a3e6011":"seq_len = 1000\n\nX = train.signal.values.reshape(-1, seq_len, 1)\ny = train.open_channels.values.reshape(-1, seq_len, 1)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2)\n\nX_test = test.signal.values.reshape(-1, seq_len, 1)","66bfad27":"def build_model(n_classes, seq_len=500, n_units=256):\n    inputs = L.Input(shape=(seq_len, 1))\n    x = L.Dense(n_units, activation='linear')(inputs)\n    \n    x = L.Bidirectional(L.GRU(n_units, return_sequences=True))(x)\n    x = L.Bidirectional(L.GRU(n_units, return_sequences=True))(x)\n    x = L.Dense(n_classes, activation='softmax')(x)\n    \n    model = Model(inputs=inputs, outputs=x)\n    model.compile('adam', loss='sparse_categorical_crossentropy')\n    \n    return model","8067cc9e":"model = build_model(n_classes, seq_len)\nmodel.summary()","305152d7":"class F1Callback(callbacks.Callback):\n    def __init__(self, X_val, y_val):\n        super().__init__()\n        self.X = X_val\n        self.y = y_val.reshape(-1)\n    def on_epoch_begin(self, epoch, logs=None):\n        if epoch == 0:\n            return\n        pred = (\n            model\n            .predict(self.X, batch_size=64)\n            .argmax(axis=-1)\n            .reshape(-1)\n        )\n        \n        score = f1_score(self.y, pred, average='macro')\n        \n        print(f\"val_f1_macro: {score:.4f}\")","ee0a285f":"model.fit(\n    X_train, y_train, \n    batch_size=64,\n    epochs=30,\n    callbacks=[\n        callbacks.ReduceLROnPlateau(),\n        F1Callback(X_valid, y_valid),\n        callbacks.ModelCheckpoint('model.h5')\n    ],\n    validation_data=(X_valid, y_valid)\n)","efe39440":"model.load_weights('model.h5')\nvalid_pred = model.predict(X_valid, batch_size=64).argmax(axis=-1)\nf1_score(y_valid.reshape(-1), valid_pred.reshape(-1), average='macro')","b3306148":"test_pred = model.predict(X_test, batch_size=64).argmax(axis=-1)\nsub.open_channels = test_pred.reshape(-1)\nsub.to_csv('submission.csv', index=False)","56241c07":"# Modelling","59fd9cd7":"# Submit","9c706d2e":"# Load and process data","ed869423":"# Evaluate"}}