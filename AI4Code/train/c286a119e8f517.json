{"cell_type":{"907ef0f5":"code","240820ad":"code","2ec0d72b":"code","05644002":"code","be739934":"code","8b5a0b6f":"code","d4865502":"code","f7ae0cfa":"code","7cc60a67":"code","471e4381":"code","ec13c337":"code","4a99690c":"code","21e8b85e":"code","746ce96e":"code","5b32ba72":"code","2c3d6636":"code","1d72edba":"code","c6db118a":"code","3d9d0ec3":"code","97d9567d":"markdown","6f6acd4f":"markdown","7c75c9fc":"markdown","16487248":"markdown","45f3b9a7":"markdown","82287ed0":"markdown","73c93007":"markdown","9e48f2d5":"markdown","c06fc3e6":"markdown","2a4933c3":"markdown","6c06295b":"markdown","e9d8bcff":"markdown","4431804f":"markdown","17b5dc9a":"markdown","dc960f64":"markdown","e13c983f":"markdown","85768ce5":"markdown"},"source":{"907ef0f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","240820ad":"#%%  Read both csv files\n## Reading csv files and adding them\nfilepath1 = os.path.join(dirname, filenames[0])\nfilepath2 = os.path.join(dirname, filenames[1])\ndf1 = pd.read_csv(filepath1)\ndf2 = pd.read_csv(filepath1)\nprint(df1.shape)\nprint(df2.shape)\ndf = pd.concat([df1, df2], ignore_index=True)\nprint(df.info())\ndel(df1)\ndel(df2)\nseed = 1001","2ec0d72b":"column1 = ['DAY_OF_MONTH', 'DAY_OF_WEEK','OP_CARRIER_AIRLINE_ID', 'TAIL_NUM','OP_CARRIER_FL_NUM',\n 'DEST','DEP_TIME','DEP_DEL15', 'ARR_TIME', 'ARR_DEL15', \n 'CANCELLED','DIVERTED', 'DISTANCE']\n\n\ndf = df[column1]\n\n# Drops rows with na values from dataframe.\ndf.dropna(inplace=True)","05644002":"## Data set has a class imbalance.  There are 921482 flights that weren't delayed, however \n## there were only 210444 flights that were delayed.  I have tried to add more balance by downsampling the \n## number of not delayed classes.\n\nnot_delay = df[df['ARR_DEL15']==0]\ndelay = df[df['ARR_DEL15']==1]\n\nprint(len(not_delay))\nprint(len(delay))","be739934":"df2 = df[['TAIL_NUM', 'ARR_DEL15']]\ndf2 = df2.groupby(['TAIL_NUM']).sum()\ndf2 = df2.sort_values(by=['ARR_DEL15'], ascending=False)\ndf2.columns = ['tail_delay']","8b5a0b6f":"import matplotlib.pyplot as plt\nplt.hist(df2['tail_delay'], 8, facecolor='green', alpha=0.75)\nplt.xlabel('Number of Flight Delays')\nplt.ylabel('Counts')\nplt.title(r'Histogram of flight delays a plane has')","d4865502":"## Converts TAIL_NUM into a category from 1-6 based on the amount of delays the plane has\ndf2['tail_delay'] = np.floor(df2['tail_delay']\/20)\ndf = pd.merge(df, df2, on='TAIL_NUM')\ndel(df2)\ndf.drop(columns = ['TAIL_NUM'], inplace=True)\n\n## rounds departure time down to the nearest hour. Example 6:15 or 6:45 would be both be rounded to 6.\ndf['DEP_TIME'] = round((df['DEP_TIME']\/100), 0)\ndf['DEP_TIME']  = df['DEP_TIME'].astype(int)\ndf['ARR_TIME'] = round((df['ARR_TIME']\/100), 0)\ndf['ARR_TIME']  = df['ARR_TIME'].astype(int)  ","f7ae0cfa":"import matplotlib.pyplot as plt\ncolumn = 'DEST'\ndf2 = df[[column, 'ARR_DEL15']]\ndf2 = df2.groupby(column).sum()\ndf2 = df2.sort_values(by=['ARR_DEL15'], ascending=False)\ndf2.columns = ['city_delay']\n\n##plt.boxplot(df2['delay_counts'], notch=True)\nplt.hist(df2['city_delay'], 8, facecolor='green', alpha=0.75)\nplt.xlabel('Number of Flight Delays')\nplt.ylabel('Counts')\nplt.title(r'Histogram of Flight Delays based on Destination Airport')","7cc60a67":"df2['city_delay'] = np.floor(df2['city_delay']\/1000)\ndf = pd.merge(df, df2, on=column)\ndel(df2)\ndf.drop(columns = column, inplace=True)","471e4381":"from sklearn import preprocessing\nfrom sklearn.preprocessing import OneHotEncoder\n\ncolumn2 = ['OP_CARRIER_AIRLINE_ID', 'tail_delay', 'city_delay']\n\nfor col in column2:\n    enc = OneHotEncoder(sparse = False, handle_unknown='ignore')\n    encoded_frame = enc.fit_transform(np.array(df[col]).reshape(-1,1))\n    column_name = enc.get_feature_names()\n    column_name = col + column_name\n    one_hot_encoded_frame =  pd.DataFrame(encoded_frame, columns= column_name)\n    \n    df = pd.concat([df, one_hot_encoded_frame], axis=1)\n    del(encoded_frame)\n    del(one_hot_encoded_frame)\n    df.drop(columns = col, inplace=True)\n","ec13c337":"#%%    splitting data into training and test sets.\n## 80\/20 split for training and evaluation\nsplit   = 0.8 \nx_train = df.sample(frac=split, random_state=seed) \nx_test  = df.drop(x_train.index)\nprint(x_train.shape, x_test.shape)\n\n# Extract and remove the label (to be predicted) set\ny_train = x_train.pop('ARR_DEL15')\ny_test  = x_test.pop('ARR_DEL15')\nprint(y_train.shape, y_test.shape)","4a99690c":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state = 0)\nclf.fit(x_train, y_train) ","21e8b85e":"!pip install pydotplus","746ce96e":"from sklearn.tree import export_graphviz\nfrom sklearn import tree\nfrom sklearn.externals.six import StringIO  \nimport pydotplus\nfrom IPython.display import Image \ndot_data = StringIO()\nfrom sklearn import tree\n\ntree.export_graphviz(clf, max_depth = 3, feature_names=x_test.columns, out_file= dot_data)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue()) \ngraph.write_png('tree.png')","5b32ba72":"Image(graph.create_png())","2c3d6636":"from sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report \n  \ny_predict = clf.predict(x_test)\ncmatrix = confusion_matrix(y_test, y_predict) \naccuracy = accuracy_score(y_test, y_predict) \nclassification_report = classification_report(y_test, y_predict) \n\nprint(cmatrix)\nprint(classification_report)","1d72edba":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_validate\n\nx_test2 = df\ny_test2 = x_test2.pop('ARR_DEL15')\nscoring='f1_macro'\nscores = cross_validate(clf, x_test2, y_test2, cv=5, scoring = ['accuracy', 'f1'])\nresults = list()\nresults.append([scores['test_accuracy'].mean(), scores['test_f1'].mean()])\nprint('The average accuracy is %f and the average F1 score is %f' %((results[0][0]),(results[0][1])))","c6db118a":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\nprobs = clf.predict_proba(x_test)\nprobs = probs[:, 1]\nauc = roc_auc_score(y_test, probs)\nprint('AUC: %.2f' % auc)\nfpr, tpr, thresholds = roc_curve(y_test, probs)","3d9d0ec3":"import matplotlib.pyplot as plt\n\nplt.plot(fpr, tpr, color='orange', label='ROC')\nplt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend()\nplt.show()","97d9567d":"###### ROC Curve\nReciever Operator Curves are a good way to illustrate a classification model, and plots the true positive rate against the false positive rate. The closer the graph is to the top and left-hand borders, the more accurate the test. The output was not the probabilities beween 0 and 1, so the ROC curvve isn't as smooth as compared to other models. The greater the area under the curve the more accurate the model is, with a uppder limit of 1, and .5 meaning it doesn'treally predict anything. The area under the curve is .96 which is good.","6f6acd4f":"## Picking relevant columns\nI want do drop some columns from the data frame as many columns are redundant.  Here are some of the columns\/notes\n- 'OP_UNIQUE_CARRIER' and 'OP_CARRIER' are redundant were eliminated.\n- 'ORIGIN_AIRPORT_ID', 'ORIGIN_AIRPORT_SEQ_ID' are redundant and mean the same thing, used Origin instead.\n- 'DEST_AIRPORT_ID', 'DEST_AIRPORT_SEQ_ID' are redundant used 'DEST' insead\n- Did not use 'DEP_TIME_BLK', instead rounded the departure times and arrival times down in a further section.\n- 'Unnamed: 21' not used and removed","7c75c9fc":"![image.png](attachment:image.png)","16487248":"##Cross Validation to find true accuracy of model\n\nI Used cross validation package from sk-learn to run k-fold cross validation for 5 folds and append the scores to list results.  It will test the model several times across a subset of data, however I specified 5 subsets.","45f3b9a7":"## Training Decision Tree Model\nDecision trees are a good model to use because they are easy to implement and understand the results.  They work by splitting\/partitioning the data based on features that have the lowest misclassification rate of the predicted value.\nOnce the data is split enough, it will make a final decision based on the rules and probabilities given by the tree.","82287ed0":"## Encoding for Column Tail Number\nI assume TAIL_Num is the number to label a plane.  I wanted to break down planes based on the amount of delays they had.","73c93007":"## splitting data into training and test sets.\nUsed 80\/20 split for training and evaluation","9e48f2d5":"Based on the tree below, the most important feature is if the plane departed late 'DEP_DEL15'.  After that split is made, the airline '19393' was probably an airline which had a lot of delays.  Then the features that split with lowest misclassification, was the day of the month and distance of the flight. ","c06fc3e6":"## Graphing Decision Tree\nI used GraphViz package to plot the Decision tree as it seemed cleaner and neater than just plotting through matplotlib.  If running on your local machine you would need to pip install the GraphViz library and add to your PATH variable on Windows. I also set a max-depth to 3 for simplicity, so it doesn't show the entire tree, just the first three splits on the tree.  \n","2a4933c3":"In Conclusion this is my notebook on using a Decision Tree approach to the Flight Prediction Dataset. You could get higher accuracy using Random Forest models and boosted tree algorithms> However Decision Tree algorithms are a good way to start to visualize and interpret which variables that are important. I got a somewhat higher accuracy running my code on the kaggle than I did on my local machine. I cannot explain why.\n\nThis is my first Kaggle notebook, so I welcome any feedback or suggestions. Thanks for reading!","6c06295b":"## One Hot Encoding Code\nThe column 'OP_CARRIER_AIRLINE_ID' is a categorical columns.  I chose to use one hot encoding to convert the columns\nin a usable format. Label encoding assigns a number value to each value in the column. For example one airline ID '20363' would have a value of 1\nand airline id '19805' would have a value of 2.  However the issue is that the model may infer a numerical relationship between \nthese values so it is easier to use One Hot Encoding to convert each variable into a feature\/column. column2 is a list containing the names of all the columns to convert using one hot encoding.","e9d8bcff":"Based on the histogram, I decided to create a column tail_delay which groups the planes on how many delays they had. I split into 7 columns, where 6 is a high number of delays and 0 is low number of delays.  ALso I rounded the columns DEP_TIME and ARR_TIME.","4431804f":"## Plots histogram of the amount of delays each plane has experienced.","17b5dc9a":"## Model Evaluation\nFrom sklearn I am using a confusion matrix, which helps to evaluate the performance of classification models.  Notes are below\n* Positive (P) : Observation is positive, flight was delayed on arrival\n* Negative (N) : Observation is not positive, flight was not delayed on arrival\n* recall - ratio of correctly classified positive examples over total number of positive examples. recall = TP\/(TP + FN)\n* precision \u2013 ratio of correctly classified positive examples over total number of predicted positive examples. \n* Precision = TP(TP + FP).\n* accuracy - ratio of correctly classified predictions over all of the predictions.  accuracy = (TP + TN)\/(TP+TN+FP+FN)\n* F1 score \u2013 helps measure both precision and recall at the same time.  \n* F-measure = (2*recall * precision)\/(recall + precision)\n","dc960f64":"## January Flight Delays - Decision Tree Models\nThis notebook is an early analysis of the January Flight Delay Prediction.  I used a Decision Tree Analysis to build a predictive model to predict the amount of delays on the arrival destination.  Some parts may run slow, due to one hot encoding of a very large dataset.  Feel free to add any comments or issues. ","e13c983f":"## Encoding for Column DEST\nWanted to do a similar strategy for the column DEST which is the departure city.","85768ce5":"Data set has a slight class imbalance, as there are less delays than not delays, however I think a model can still run and predict well. "}}