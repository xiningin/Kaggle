{"cell_type":{"c73b1bea":"code","7f9dee97":"markdown"},"source":{"c73b1bea":"\"\"\"Simple travelling salesman problem between cities.\"\"\"\n\nfrom __future__ import print_function\nfrom ortools.constraint_solver import routing_enums_pb2\nfrom ortools.constraint_solver import pywrapcp\n\n\n\ndef create_data_model():\n    \"\"\"Stores the data for the problem.\"\"\"\n    data = {}\n    data['distance_matrix'] =[\n    [  0, 290, 250,  230,  190,  334, 365,   40], # Dhaka\n    [290,   0, 337,  453,  396,  560, 581,  244], # Syhlet\n    [250, 337,   0,  495,  396,  540, 120,  240], # Chittagonj\n    [230, 453, 495,    0,  360,  150, 595,  242], # Rajshahi\n    [190, 396, 396,  360,    0,  356, 496,  253], # Jossore\n    [334, 560, 540,  150,  356,    0, 674,  275], # Dinajpur\n    [365, 581, 120,  595,  496,  674,   0,  397], # Coxsbazar\n    [40,  244, 240,  242,  253,  275, 397,    0]] # Narsingdi\n# distance between Dhaka to Syhlet is 290kms and so on\n    data['num_vehicles'] = 1\n    data['depot'] = 0\n    return data\n\n\ndef print_solution(manager, routing, assignment):\n    \"\"\"Prints assignment on console.\"\"\"\n    print('Objective Distance: {} miles'.format(assignment.ObjectiveValue()))\n    index = routing.Start(0)\n    plan_output = 'Route for vehicle 0:\\n'\n    route_distance = 0\n    while not routing.IsEnd(index):\n        plan_output += ' {} ->'.format(manager.IndexToNode(index))\n        previous_index = index\n        index = assignment.Value(routing.NextVar(index))\n        route_distance += routing.GetArcCostForVehicle(previous_index, index, 0)\n    plan_output += ' {}\\n'.format(manager.IndexToNode(index))\n    print(plan_output)\n    plan_output += 'Route distance: {}miles\\n'.format(route_distance)\n\n\ndef main():\n    \"\"\"Entry point of the program.\"\"\"\n    # Instantiate the data problem.\n    data = create_data_model()\n\n    # Create the routing index manager.\n    manager = pywrapcp.RoutingIndexManager(\n        len(data['distance_matrix']), data['num_vehicles'], data['depot'])\n\n    # Create Routing Model.\n    routing = pywrapcp.RoutingModel(manager)\n\n\n    def distance_callback(from_index, to_index):\n        \"\"\"Returns the distance between the two nodes.\"\"\"\n        # Convert from routing variable Index to distance matrix NodeIndex.\n        from_node = manager.IndexToNode(from_index)\n        to_node = manager.IndexToNode(to_index)\n        return data['distance_matrix'][from_node][to_node]\n\n    transit_callback_index = routing.RegisterTransitCallback(distance_callback)\n\n    # Define cost of each arc.\n    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n\n    # Setting first solution heuristic.\n    search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n    search_parameters.first_solution_strategy = (\n        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\n\n    # Solve the problem.\n    assignment = routing.SolveWithParameters(search_parameters)\n\n    # Print solution on console.\n    if assignment:\n        print_solution(manager, routing, assignment)\n\n\nif __name__ == '__main__':\n    main()\n\n\n# Source code: https:\/\/developers.google.com\/optimization\/routing\/tsp","7f9dee97":"# **Traveling Salesman Problem**\n![Imgur](https:\/\/i.imgur.com\/hNt9SAB.png)"}}