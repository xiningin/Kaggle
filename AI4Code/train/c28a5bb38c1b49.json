{"cell_type":{"c52ed7e7":"code","9cd7ea53":"code","11af23a2":"code","c6ed4926":"code","74f2c1b1":"code","d9099a7a":"code","9e98ecd1":"code","9b7193b9":"code","20bd2fb1":"code","7d1e8ac8":"code","13f5dd33":"code","7f9671d1":"code","1bb28cc4":"code","d126aaa5":"code","a107549f":"code","84b253c9":"code","b0a14755":"code","4b974563":"code","420e8faf":"code","a2518151":"code","1d68d5ce":"code","25d7ec94":"code","51d9ae35":"code","1046edcd":"code","3f57cca8":"code","05e310c8":"code","269fb88a":"code","c3e3eeeb":"code","2f61d9dd":"markdown","9de605db":"markdown","f01a9871":"markdown","f55daf6c":"markdown","d8f5c943":"markdown","e1f09e70":"markdown","2e101b2c":"markdown","5c7c8af5":"markdown","67ad9177":"markdown","ce4c051d":"markdown"},"source":{"c52ed7e7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","9cd7ea53":"df_train = pd.read_csv(\"\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv\",index_col=0)\ndf_test = pd.read_csv(\"\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/test_data.csv\",index_col=0)\nprint(df_train.shape)\nprint(df_test.shape)","11af23a2":"df_train.head()","c6ed4926":"df_train.Stay.unique()","74f2c1b1":"def Convert_to_Num(df):\n    dept_lst = df[\"Department\"].unique()\n    dept_lst.sort()\n    dept_dict = dict(zip(dept_lst, range(len(dept_lst))))\n    df.Department.replace(dept_dict, inplace=True)\n    print(dept_dict)\n    \n    HRC_lst = df[\"Hospital_region_code\"].unique()\n    HRC_lst.sort()\n    HRC_dict = dict(zip(HRC_lst, range(len(HRC_lst))))\n    df.Hospital_region_code.replace(HRC_dict, inplace=True)\n    print(HRC_dict)\n    \n    ward_lst = df[\"Ward_Type\"].unique()\n    ward_lst.sort()\n    ward_dict = dict(zip(ward_lst, range(len(ward_lst))))\n    df.Ward_Type.replace(ward_dict, inplace=True)\n    print(ward_dict)\n    \n    WFC_lst = df[\"Ward_Facility_Code\"].unique()\n    WFC_lst.sort()\n    WFC_dict = dict(zip(WFC_lst, range(len(WFC_lst))))\n    df.Ward_Facility_Code.replace(WFC_dict, inplace=True)\n    print(WFC_dict)\n    \n    TOA_lst = df[\"Type of Admission\"].unique()\n    TOA_lst.sort()\n    TOA_dict = dict(zip(TOA_lst, range(len(TOA_lst))))\n    df[\"Type of Admission\"].replace(TOA_dict, inplace=True)\n    print(TOA_dict)\n   \n    SOI_lst = df[\"Severity of Illness\"].unique()\n    SOI_lst.sort()\n    SOI_dict = dict(zip(SOI_lst, range(len(SOI_lst))))\n    df[\"Severity of Illness\"].replace(SOI_dict, inplace=True)\n    print(SOI_dict)\n    \n    age_lst = df[\"Age\"].unique()\n    age_lst.sort()\n    age_dict = dict(zip(age_lst, range(len(age_lst))))\n    df[\"Age\"].replace(age_dict, inplace=True)\n    print(age_dict)\n    \n    HTC_lst = df[\"Hospital_type_code\"].unique()\n    HTC_lst.sort()\n    HTC_dict = dict(zip(HTC_lst, range(len(HTC_lst))))\n    df[\"Hospital_type_code\"].replace(HTC_dict, inplace=True)\n    print(HTC_dict)\n    \nConvert_to_Num(df_train)\nstay_list = df_train[\"Stay\"].unique()\nstay_list.sort()\ndept_Stay = dict(zip(stay_list, range(len(stay_list))))\ndf_train[\"Stay\"].replace(dept_Stay, inplace=True)\nprint(dept_Stay)","d9099a7a":"df_train.head()","9e98ecd1":"df_train.info()","9b7193b9":"df_train[\"Bed Grade\"].unique()","20bd2fb1":"df_train[\"Bed Grade\"] = df_train[\"Bed Grade\"].fillna(2)\n# df_train[\"Bed Grade\"] = df_train[\"Bed Grade\"].fillna(2)\ndf_train[\"Bed Grade\"].unique()","7d1e8ac8":"df_train.isnull().sum()","13f5dd33":"df_train.describe().T","7f9671d1":"y = df_train.Stay\nx = df_train.drop(columns=[\"Stay\", \"City_Code_Patient\", \"patientid\"])","1bb28cc4":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","d126aaa5":"from catboost import CatBoostClassifier, Pool\nfrom catboost.utils import get_confusion_matrix\n\neval_dataset = Pool(x_test,\n                    y_test)\n\nmodel = CatBoostClassifier(iterations=1000,\n                           learning_rate=0.03,\n                           depth=10,\n                           l2_leaf_reg = 3,\n                           loss_function='MultiClass',\n                           eval_metric='MultiClass')\n\nmodel.fit(x_train,\n          y_train,\n          eval_set=eval_dataset,\n          verbose=True)\n\nprint(model.get_best_score())\ncm = get_confusion_matrix(model, eval_dataset)\nprint(cm)\npredict_accuracy_on_test_set = (cm[0,0] + cm[1,1])\/(cm[0,0] + cm[1,1]+cm[1,0] + cm[0,1])\nax = sns.heatmap(cm, linewidth=1)\nplt.show()\nprint(\"catboost Acc : \", predict_accuracy_on_test_set)","a107549f":"print(cm)","84b253c9":"import catboost\npred = model.predict(\n                 eval_dataset, \n                 verbose=True)","b0a14755":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, pred)","4b974563":"df_test.head()","420e8faf":"Convert_to_Num(df_test)\ndf_test = df_test.drop(columns=[\"City_Code_Patient\", \"patientid\"])\ndf_test.head()","a2518151":"eval_dt = Pool(df_test)\neval_dt","1d68d5ce":"preds_class = model.predict(eval_dt)\npreds_class.shape","25d7ec94":"df_sub = pd.DataFrame(index=df_test.index)\ndf_sub[\"Stay\"] = preds_class\nswap_dict_Stay = dict([(value, key) for key, value in dept_Stay.items()])\ndf_sub[\"Stay\"].replace(swap_dict_Stay, inplace=True)\ndf_sub.head()","51d9ae35":"from sklearn.model_selection import RandomizedSearchCV\nparameter_space = {\n    'hidden_layer_sizes': [(1024), (50,), (50,100, 50), (48,), (48, 48, 48), (96,), (144,), (192,), (96, 144, 192), (240,), (144, 192, 240)],\n    'activation': ['tanh', 'logistic', 'relu'],\n    'solver': ['adam', 'lbfgs', 'sgd'],\n    'alpha': [0.0001, 0.001, 0.05, 0.1, 1],\n    'beta_1': [0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99],\n    'beta_2': [0.990, 0.991, 0.992, 0.993, 0.994, 0.995, 0.996, 0.997, 0.998, 0.999],\n    'learning_rate': ['constant','adaptive'],\n                }","1046edcd":"from sklearn.neural_network import MLPClassifier\nmlp = MLPClassifier(max_iter=1000, random_state=42)","3f57cca8":"import sklearn\n# score = ['accuracy']\nscorer = sklearn.metrics.make_scorer(sklearn.metrics.f1_score, average = 'weighted')\nclf = RandomizedSearchCV(mlp, parameter_space, n_jobs = -1, n_iter = 10,  cv=3, refit='precision', scoring=scorer, random_state=0)","05e310c8":"clf.fit(x_train, y_train)\nscore = clf.score(x_test, y_test)\nprint(\"Validation Accuracy\",score*100,\"%\")","269fb88a":"plot_confusion_matrix(clf, x_test, y_test)","c3e3eeeb":"df_sub.to_csv(\"Submission.csv\")","2f61d9dd":"## Cleaning and Rearranging data","9de605db":"### Fill empty records","f01a9871":"# Predict how long patient can stay in the hospital.\n* Cleaning and Rearranging data\n* Feature Selection\n* Model Selection and Training\n* Catboost - 42.96%\n* Submit","f55daf6c":"## Model Selection","d8f5c943":"### Convert Healthcare data to numerical format","e1f09e70":"### Create dataset to confirm Accuracy","2e101b2c":"# Please UPVOTE if you like the notebook.","5c7c8af5":"## Feature Selection\nAs city code patient records has lot of NaN and I think these records are not so important I am removing it.","67ad9177":"### Test Actual dataset","ce4c051d":"### Submit"}}