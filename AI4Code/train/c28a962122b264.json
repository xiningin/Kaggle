{"cell_type":{"41d9e6e1":"code","19137c1c":"code","dcd126ae":"code","80f4ad36":"code","dafdf2ff":"code","cd73e540":"code","9efc1a84":"code","2604d2e8":"code","5887aa31":"code","cbbcff73":"code","50cb7f33":"code","bcff9f8b":"markdown","3cd46238":"markdown","ef507695":"markdown","e884ad69":"markdown","013ae595":"markdown","c1d6b8e2":"markdown","160446bc":"markdown","c718b882":"markdown","e57bd911":"markdown","9cd8f071":"markdown","da459415":"markdown","8c65c869":"markdown","c3006930":"markdown","080334df":"markdown","73a9d34e":"markdown","a0e90573":"markdown","d0588483":"markdown","59b5d05d":"markdown","ff86d401":"markdown","2da7825a":"markdown"},"source":{"41d9e6e1":"### IMPORT USEFUL PACKAGES ###\nimport pandas as pd\nimport glob\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\n\nfrom collections import Counter\nfrom scipy.stats.stats import pearsonr\nfrom string import ascii_letters\n\n# Some helper functions to make our plots cleaner with Plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\ninit_notebook_mode(connected=True)\n\npd.set_option('display.max_columns', 500)\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\ndef correction(x):\n    '''\n    Columns value corrections\n    '''\n    if type(x)==str:\n        x=x.replace('$','')\n        x=x.replace(',','')\n        x=float(x)    \n    return (x)\n\ndef correction2(x):\n    '''\n    Columns value corrections\n    '''\n    if type(x)==str:\n        x=x.replace('%','')\n        x=float(x)\/100.0\n    return (x)\n\ndef to_int(x):\n    '''\n    Columns value corrections\n    '''\n    if x=='f':\n        x=x.replace('f','0')\n    elif x=='t':\n        x=x.replace('t','1')\n    else:\n        x= '0'\n    return int(x)\n\ndef changeTime(x):\n    '''\n    change host_response_time columns from string into numerical.\n    '''\n    if x == 'within an hour':\n        x='1'\n    elif x == 'within a few hours':\n        x='4'\n    elif x == 'within a day':\n        x='24'\n    elif x == 'a few days or more':\n        x='48'\n    else:\n        x='96'\n        \n    return x\n\n\ndef changeStr(x):\n    '''\n    change back the host_response_time from the numerical into strings\n    '''\n    if x == 1:\n        x='within an hour'\n    elif x == 4:\n        x='within a few hours'\n    elif x == 24:\n        x='within a day'\n    elif x == 48:\n        x= 'a few days or more'\n    elif x == 96:\n        x= 'Not Response'\n        \n    return x\n\ndef createAmenities(x):\n    '''\n    Convert the Amenities column into more analytical words\n    '''\n    val = x.replace('{','').replace('}','').replace('\"','').replace(' ','_').replace(',',' ')\n    val = val.split()\n    return val\n\n\ndef rangeScore(x):\n    '''\n    Set the bins for the score-range.\n    '''\n    value = ''\n    if (x>= 0 and x < 10):\n        value = '0-10'\n    elif (x>= 10 and x < 20):\n        value = '10-20'\n    elif (x>= 20 and x < 30):\n        value = '20-30'\n    elif (x>= 30.0 and x < 40.0):\n        value = '30-40'\n    elif (x>= 40 and x < 50):\n        value = '40-50'\n    elif (x>= 50 and x < 60):\n        value = '50-60'\n    elif (x>= 60 and x < 70):\n        value = '60-70'        \n    elif (x>= 70 and x < 80):\n        value = '70-80'\n    elif (x>= 80 and x < 90):\n        value = '80-90'\n    elif (x>= 90 and x < 100):\n        value = '90-100'\n    elif x>= 100:\n        value = '100+'\n        \n    return value\n\n\n'''\n    ### VIZ FUNCTIONS ###\n    this functions actually using the functions from\n    https:\/\/www.kaggle.com\/andresionek\/what-makes-a-kaggler-valuable\/notebook\n'''\n\ndef gen_xaxis(title):\n    \"\"\"\n    Creates the X Axis layout and title\n    \"\"\"\n    xaxis = dict(\n            title=title,\n            titlefont=dict(\n                color='#AAAAAA'\n            ),\n            showgrid=False,\n            color='#AAAAAA',\n            )\n    return xaxis\n\n\ndef gen_yaxis(title):\n    \"\"\"\n    Creates the Y Axis layout and title\n    \"\"\"\n    yaxis=dict(\n            title=title,\n            titlefont=dict(\n                color='#AAAAAA'\n            ),\n            showgrid=False,\n            color='#AAAAAA',\n            )\n    return yaxis\n\n\ndef gen_layout(charttitle, xtitle, ytitle, lmarg, h, annotations=None):  \n    \"\"\"\n    Creates whole layout, with both axis, annotations, size and margin\n    \"\"\"\n    return go.Layout(title=charttitle, \n                     height=h, \n                     width=800,\n                     showlegend=False,\n                     xaxis=gen_xaxis(xtitle), \n                     yaxis=gen_yaxis(ytitle),\n                     annotations = annotations,\n                     margin=dict(l=lmarg),\n                    )\n\n\ndef gen_bars(data, color, orient):\n    \"\"\"\n    Generates the bars for plotting, with their color and orient\n    \"\"\"\n    bars = []\n    for label, label_df in data.groupby(color):\n        if orient == 'h':\n            label_df = label_df.sort_values(by='x', ascending=True)\n        if label == 'a':\n            label = 'lightgray'\n        bars.append(go.Bar(x=label_df.x,\n                           y=label_df.y,\n                           name=label,\n                           marker={'color': label},\n                           orientation = orient\n                          )\n                   )\n    return bars\n\n\ndef gen_annotations(annot):\n    \"\"\"\n    Generates annotations to insert in the chart\n    \"\"\"\n    if annot is None:\n        return []\n    \n    annotations = []\n    # Adding labels\n    for d in annot:\n        annotations.append(dict(xref='paper', x=d['x'], y=d['y'],\n                           xanchor='left', yanchor='bottom',\n                           text= d['text'],\n                           font=dict(size=13,\n                           color=d['color']),\n                           showarrow=False))\n    return annotations\n\n\ndef generate_barplot(text, annot_dict, orient='v', lmarg=120, h=400):\n    \"\"\"\n    Generate the barplot with all data, using previous helper functions\n    \"\"\"\n    layout = gen_layout(text[0], text[1], text[2], lmarg, h, gen_annotations(annot_dict))\n    fig = go.Figure(data=gen_bars(barplot, 'color', orient=orient), layout=layout)\n    return iplot(fig)","19137c1c":"### import files ###\n\ncsvs = glob.glob('..\/input\/*.csv')\nbase= pd.read_csv(csvs[0])\nlistings_df= base.copy()\nlistings_df.head(2)\n\n    ### create a new metrics ###\n\nlistings_df['new_score_reviews2'] = listings_df['reviews_per_month'] * listings_df['review_scores_rating'] \/ 10\nlistings_df['new_score_reviews2'].fillna(0, inplace = True)","dcd126ae":"'''\nthe definition and print the value.\n'''\ntop90flag = listings_df['new_score_reviews2'].quantile(0.9)\nupto25flag = listings_df['new_score_reviews2'].quantile(0.25)\n\nlistings_df['top90'] = listings_df.new_score_reviews2 >= top90flag\nlistings_df['upto25'] = listings_df.new_score_reviews2 <= upto25flag\n\nprint('The boundaries of top performer listings:',top90flag)\nprint('The boundaries of low performer listings:',upto25flag)","80f4ad36":"### Create a table for the visualization essentials ###\n### Generate score bins, creating new tables for the class colors, and count distributions of each bins. ###\n# a columns of bins.\nlistings_df['score_ranges'] = listings_df['new_score_reviews2'].apply(rangeScore)\n\n# table coloring purpose.\ntop90 = listings_df.groupby('score_ranges', as_index = False)['top90'].max(key = 'count').rename(columns={'score_ranges':'Score'})\nupto25 = listings_df.groupby('score_ranges', as_index = False)['upto25'].max(key = 'count').rename(columns={'score_ranges':'Score'})\n\n# count distributions of score bins.\nbarplot = listings_df[['id','new_score_reviews2']]\nbarplot['Qty'] = barplot['new_score_reviews2'].apply(rangeScore)\nbarplot = barplot.Qty.value_counts(sort=True).to_frame().reset_index()\nbarplot = barplot.rename(columns={'index': 'Score'})\n\n# merging color flag.\nbarplot = barplot.merge(top90, on = 'Score')\nbarplot = barplot.merge(upto25)\n# creating color for the vis.\nbarplot['color'] = barplot.top90.apply(lambda x: 'mediumaquamarine' if x else 'lightgray')\n# manually change the color of the first index become crimson, to indicate the class of low performer listings.\nbarplot.iloc[0,4] = 'crimson'\n\n# change Score column and Qty column into x and y for the vis purpose.\nbarplot = barplot.rename(columns={'Score':'x','Qty':'y'})\n\n# Some of the annotations for the vis.\ntitle_text = ['<b>Comparison Listings Performance between Top Performer and Low Performer<\/b>', 'Reviews per Month x Review Score Ratings \/ 10', 'Quantity of Listings']\nannotations = [{'x': 0.03, 'y': 1900, 'text': 'Low Performer Had Score Up to 25 Percentile','color': 'gray'},\n              {'x': 0.39, 'y': 300, 'text': 'Top Performer Had Score above 90 Percentile','color': 'mediumaquamarine'}]\n\ngenerate_barplot(title_text, annotations)","dafdf2ff":"#some useless columns: url, and unique value all of the rows. \nunique_value_columns=[]\nurl_columns=[]\n\nfor i in listings_df.columns:\n    \n    if len((listings_df[i]).unique())==1:\n        print ('a un-used column because same value:', i, (listings_df[i]).unique())\n        unique_value_columns=unique_value_columns+[i]\n    if 'url' in i:\n        url_columns=url_columns+[i]\n        \n# url columns.\n# print ('\\n''url columns:\\n\\n', url_columns)\n# unique value columns.\n# print ('\\n''unique value columns:\\n\\n', unique_value_columns)\n\n# Drop it.\nlistings_df = listings_df.drop(url_columns+unique_value_columns, axis = 1)","cd73e540":"# Change the string of boolean (t \/ f) into int of boolean (1\/0)\nfor i in listings_df.columns:\n    \n    if set(listings_df[i])=={'t','f'}:\n        listings_df[i]=listings_df[i].apply(to_int)\n        \n    elif set(listings_df[i]) == {'t','f',np.nan}:\n        listings_df[i]=listings_df[i].apply(to_int)\n        \n# Dollar corrections.\nlistings_df['price']=listings_df['price'].map(lambda x: correction(x))\nlistings_df['weekly_price'] = listings_df['weekly_price'].map(lambda x: correction(x))\nlistings_df['monthly_price'] = listings_df['monthly_price'].map(lambda x: correction(x))\nlistings_df['security_deposit'] = listings_df['security_deposit'].map(lambda x: correction(x))\nlistings_df['cleaning_fee'] = listings_df['cleaning_fee'].map(lambda x: correction(x))\nlistings_df['extra_people'] = listings_df['extra_people'].map(lambda x: correction(x))\n\n# Change the rate percentage.\nlistings_df['host_response_rate'] = listings_df['host_response_rate'].fillna('0%').apply(correction2)\nlistings_df['host_acceptance_rate'] = listings_df['host_acceptance_rate'].fillna('0%').apply(correction2)\n\n# Change time indicators\nlistings_df['host_response_time'] = listings_df['host_response_time'].apply(changeTime).astype(int)\n\n# Amenities change into reproduceable column.\nlistings_df['amenities']= base['amenities']\nlistings_df['array_amenities'] = listings_df['amenities'].apply(lambda x: createAmenities(x))\nlistings_df['len_amenities'] = listings_df['amenities'].apply(lambda x: len(createAmenities(x)))\n\n# filling some null value.\nlistings_df['security_deposit'].fillna(0, inplace = True)\nlistings_df['cleaning_fee'].fillna(0, inplace = True)\n\n# Pick onlly the relevant columns\n# relevant_columns = list(listings_df.columns)\n\n# Some irrelevant columns personally\nirrelevant_colmuns = ['id','host_id','host_listings_count','host_total_listings_count','latitude','longitude','is_location_exact','square_feet','price','weekly_price','monthly_price','minimum_nights','maximum_nights','availability_30','availability_60','availability_90','number_of_reviews','review_scores_rating','review_scores_accuracy','review_scores_cleanliness','review_scores_checkin','review_scores_checkin','review_scores_communication','review_scores_location','review_scores_value','calculated_host_listings_count','reviews_per_month','require_guest_profile_picture','require_guest_phone_verification']\nrelevant_df = listings_df.drop(irrelevant_colmuns, axis = 1)\n\n# pick only numerical columns\n# listings_df= listings_df.select_dtypes(np.number)","9efc1a84":"sns.set(style=\"white\")\n\n# Compute the correlation matrix 'top90', 'upto25', .drop(['scrape_id', 'license'], axis=1)\ncorr = relevant_df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","2604d2e8":"A=relevant_df.corr().unstack().sort_values(ascending=False)\nprint('The correlation of the new_score_reviews against all:', A['new_score_reviews2'][1:-1])","5887aa31":"### defide them into 2 dataframe class ###\n\ntop_listings = listings_df[listings_df['new_score_reviews2'] >= np.percentile(listings_df['new_score_reviews2'],90)]\nlow_listings = listings_df[listings_df['new_score_reviews2'] <= np.percentile(listings_df['new_score_reviews2'],25)]\n\n### Host Acceptance Rate DataFrame ###\n\nhostAR_top_performer = pd.DataFrame(top_listings['host_acceptance_rate'].reset_index(drop = True))\nhostAR_top_performer['status'] = 'Top Performer'\n\nhostAR_low_performer = pd.DataFrame(low_listings['host_acceptance_rate'].reset_index(drop = True))\nhostAR_low_performer['status'] = 'Low Performer'\n\nhostAR = hostAR_low_performer.append(hostAR_top_performer).sample(frac=1)\n\n### Identity verified.\n\nidentify_verified_top = pd.DataFrame(top_listings['host_identity_verified'].reset_index(drop = True))\nidentify_verified_top['status'] = 'Top Performer'\n\nidentify_verified_low = pd.DataFrame(low_listings['host_identity_verified'].reset_index(drop = True))\nidentify_verified_low['status'] = 'Low Performer'\n\nidentify_verified = identify_verified_low.append(identify_verified_top).sample(frac=1)\n\n### Host is Superhost DataFrame\n\nsuperhost_top_performer = pd.DataFrame(top_listings['host_is_superhost'].reset_index(drop = True))\nsuperhost_top_performer['status'] = 'Top Performer'\n\nsuperhost_low_performer = pd.DataFrame(low_listings['host_is_superhost'].reset_index(drop = True))\nsuperhost_low_performer['status'] = 'Low Performer'\n\nsuperhost = superhost_top_performer.append(superhost_low_performer).sample(frac=1)\n\n### instant bookable\n\ninstantBookable_top_performer = pd.DataFrame(top_listings['instant_bookable'].reset_index(drop = True))\ninstantBookable_top_performer['status'] = 'Top Performer'\n\ninstantBookable_low_performer = pd.DataFrame(low_listings['instant_bookable'].reset_index(drop = True))\ninstantBookable_low_performer['status'] = 'Low Performer'\n\nhost_bookable = instantBookable_low_performer.append(instantBookable_top_performer).sample(frac=1)\n\n### Host response Rate.\n\ntop_listings['host_response_time_str'] = top_listings['host_response_time'].apply(changeStr)\nlow_listings['host_response_time_str'] = low_listings['host_response_time'].apply(changeStr)\n\nhost_response_top = pd.DataFrame(top_listings['host_response_time_str'].reset_index(drop = True))\nhost_response_top['status'] = 'Top Performer'\n\nhost_response_low = pd.DataFrame(low_listings['host_response_time_str'].reset_index(drop = True))\nhost_response_low['status'] = 'Low Performer'\n\nhost_response = host_response_low.append(host_response_top).sample(frac=1)\n\n### **Host Response time.**\n\nhost_responserate_top_performer = pd.DataFrame(top_listings['host_response_rate'].reset_index(drop = True))\nhost_responserate_top_performer['status'] = 'Top Performer'\n\nhost_responserate_low_performer = pd.DataFrame(low_listings['host_response_rate'].reset_index(drop = True))\nhost_responserate_low_performer['status'] = 'Low Performer'\n\nhost_responserate = host_responserate_low_performer.append(host_responserate_top_performer).sample(frac=1)\n# ---\npercentage_low = list(host_responserate[host_responserate['status'] == 'Low Performer']['host_response_rate'].unique())\npercentage_low.sort(reverse = True)\npercentage_top = list(host_responserate[host_responserate['status'] == 'Top Performer']['host_response_rate'].unique())\npercentage_top.sort(reverse = True)\nhost_responserate_fig = host_responserate[host_responserate['host_response_rate'].isin([1.0, 0.99, 0.96, 0.95, 0.94, 0.0])]\n\n### collecting data into one array ###\ndata= []\ndata.append(hostAR)\ndata.append(identify_verified)\ndata.append(superhost)\ndata.append(host_bookable)\ndata.append(host_response)\ndata.append(host_responserate_fig)","cbbcff73":"### Vis ###\n\nfig, ax = plt.subplots(figsize=(15,20), nrows=3, ncols=2)\nx_data= ['host_acceptance_rate','host_identity_verified','host_is_superhost','instant_bookable','host_response_time_str','host_response_rate']\ntitle= ['Acceptance Rate','# of identified listings','Superhost Listings', 'Instant Bookable Feature', 'How long hosts will respond?' , 'Responses Probability']\n\nx_axis= ['Percentage','Activate\/Not','True\/Not','Activate\/Not', 'Respond Time', 'Respond Rate']\ny_axis= ['Count']\ncnt=0\n\nfor x in range(3):\n    for y in range(2):\n        \n        ax[x][y].set_title(title[cnt], fontsize=12)\n        sns.countplot(x=x_data[cnt], hue='status', data=data[cnt], palette='GnBu_d', orient='h', ax=ax[x][y])\n        plt.setp(ax[x][y].get_legend().get_texts(), fontsize='8') # for legend text\n        plt.setp(ax[x][y].get_legend().get_title(), fontsize='10') # for legend title\n        plt.xticks(fontsize=8, rotation=45)\n        plt.yticks(fontsize=8)\n        plt.xlabel(x_axis[cnt], fontsize=13)\n        p=plt.ylabel(y_axis[0], fontsize=13)\n        \n        cnt+=1","50cb7f33":"### table preparations\n\nviz1 = top_listings[['len_amenities','id']].groupby(['len_amenities']).count().sort_values(by='id', ascending=False).head(7)\nviz1['percentage'] = viz1['id'] \/ viz1['id'].sum()\nviz2 = low_listings[['len_amenities','id']].groupby(['len_amenities']).count().sort_values(by='id', ascending=False).head(7)\nviz2['percentage'] = viz2['id'] \/ viz2['id'].sum()\n\nids = [room for room in top_listings['id']]\nviz_base1 = listings_df[listings_df['id'].isin(ids)].reset_index(drop = True)\narr = []\nfor row in range(viz_base1.shape[0]):\n    arr = arr+viz_base1['array_amenities'][row]\n    \ntest3 = Counter(arr)\nviz3 = test3.most_common(10)\nviz3 = pd.DataFrame(viz3).rename(columns={0:'name',1:'frequency'})\nviz3['percentage'] = viz3['frequency'] \/ viz_base1.shape[0]\nviz3.index = viz3['name']\nviz3 = viz3.drop('name', axis = 1)\n\nids = [room for room in low_listings['id']]\nviz_base2 = listings_df[listings_df['id'].isin(ids)].reset_index(drop = True)\narr = []\nfor row in range(viz_base2.shape[0]):\n    arr = arr+viz_base2['array_amenities'][row]\n    \ntest4 = Counter(arr)\n\nviz4 = test4.most_common(10)\nviz4 = pd.DataFrame(viz4).rename(columns={0:'name',1:'frequency'})\nviz4['percentage'] = viz4['frequency'] \/ viz_base2.shape[0]\nviz4.index = viz4['name']\nviz4 = viz4.drop('name', axis = 1)\n\n### visualization\n\nfig, ax= plt.subplots(figsize= (30,17), nrows=2, ncols= 2)\nsns.barplot(y=viz2.index.astype(str) + '_types',x=viz2['id'], ax=ax[0][0]).set_title('How much amenities does top 10% provide in every service', fontsize=11)\nsns.barplot(y=viz1.index.astype(str) + '_types',x=viz1['id'], ax=ax[0][1]).set_title('How much amenities does Low Performer provide in every service', fontsize=11)\nsns.barplot(y=viz4.index,x=viz4[\"percentage\"], ax=ax[1][0]).set_title('The top miscellaneous provided by hosts (Low-Performancer Listings)', fontsize=11)\nsns.barplot(y=viz3.index,x=viz3[\"percentage\"], ax=ax[1][1]).set_title('The top miscellaneous provided by hosts (Top-Performer Listings)', fontsize=11)","bcff9f8b":"**Visualize the defined class**  ","3cd46238":"On the line above there are several metrics that have (not so) strong correlation, it's quite enough as the feature that we can scrutinize and study between listings characteristics that we have defined. The main features are `host_acceptance_rate`, `host_is_superhost`,  `host_response_rate`,  `instant_bookable`, `host_identity_verified`, `len_amenities`, and `host_response_time`.","ef507695":"## Correlation between all reasonable features and the new_score_reviews2.","e884ad69":"Codes for **Some of useful packages**, **self-buildfunctions**, and **plotly functions**.","013ae595":"**Decide the threshold** of Top Performer and Low Performer listings. I defined the first threshold based on the 1st quartile of *new_score_review* so the listings that score less than the 1st threshold will be classified as the low performer and for the classification of top performer I defined whom listings' score more than 90% quartile.","c1d6b8e2":"In the most real world cases, there are definitely exists inequality between entities. Such as big companies and small companies, diligent people and not so diligent people, poors and richs, high achievers and lazy people. These kind of contrasts is fascinating to see and we can deep dig into their characteristics and know them better based on how they behave (as long as we got the data). In this Airbnb Seattle case we have listings data all over the city and we want to make an advantage of it. One of my objective here is to do simple comparison between top performer's acts ( the ones that have more bookings and great listing's rating ) and low performer ( the contrary ). Furthermore, in Airbnb's side they can give some recommendations to hosts and develops a new \"premium feature\" that can help some host to get more of their earnings or get more bookings.","160446bc":"In this phase, we **excluded the useless columns**, **tidying some columns**, **change some dtypes**, **fill the null numbers**, and **select only numberic number that usefull for our correlations point**.","c718b882":"**A new feature creations.** new_score_reviews creations from number of score  x frequency feature.","e57bd911":"**Major Preprocessing Data,** using self-built functions, fill the null number, etc.","9cd8f071":"**Correlation Plots,** present the correlation figures.","da459415":"*Therefore,* to conclude the analysis there are several points that low-performer could do to increase their probability to get more bookings, reviews, and higher number of reviews; \n\n1. **Increase the acceptance rate of the rental.** Top performer almost never reject the orders, not like low performers around 45% of the listings that did not accept any bookings. Although we do not know the reason why the hosts did not accept the orders;\n2. **Be responsive** most of the top performer hosts always giving response within an hour about 80% of all the time.\n3. **Be a superhost.** It\u2019s the status and the recognition from the Airbnb because they provide amazing experience and great example for other hosts.\n4. **Always response the conversations.** More responsive the hosts, more better the score it would be. Top performers always response to every conversation. \n5. **Activate the instant bookable features;** They give better experience to the future guests.\n6. **Make your account verified by Airbnb.** Many of low performer accounts have not verified by Airbnb more than the high performer by 25%.\n\n*Future development plan: *This new comprehensive recommendations feature, could be attached in every page of User Interface that have Informations about those variables, notifications, or other forms of reminders to the eligible hosts. Hosts that subscribe this feature could be charge in reasonable price.!","8c65c869":"**Insights** of features comparison (from top to bottom):\n\n* Acceptance Rate:\n    - TP: Almost all of the top listings always accepts bookings.\n    - LP: Almost half of them never really accept the bookings.\n* Host Identity Verified:\n    - TP: Almost 90% of the host\u2019s listings has been identified by Airbnb.\n    - LP: 38% of host\u2019s listings hasn't been identified by Airbnb.\n* Superhost:\n    - TP: 40% Top listings have Superhost Predicate.\n    - LP: Most of the low performers are not superhosts.\n* Instant Booking Feature:\n    - TP: Eventhough, have big contribution on the score most of the top listings don\u2019t activate their instant_booking by ~62%\n    - LP: More than 90% they turn off the instant bookable.\n* Respond Time:\n    - TP: ~78% of top listings\u2019 hosts always response conversations immediately.\n    - LP: Many of host of low performer listings respond the conversation longer than top-performer listings.\n* Respond the Conversations: \n    - TP: Most of the top listings in Seattle always response conversations.\n    - LP: A lot of low performer never response the conversation.\n* Amenities:\n    - TP & LP: They serve assorted miscellaneous in the top listings; most of them provide wireless internet, heating, essentials, smoke detector, shampoo, etc. There are not much difference between low performer and top performer listings about the amenities.\n    \n    *TP: topperformer | LP: lowperformer*","c3006930":"# Figures Interpretation.","080334df":"\n## Comparations Graphs.","73a9d34e":"As we want to make recommendations for the low earner hosts and make their listings more profitable and gain more revenue than before. This notebook do features comparison between listings that have high earning versus low earning listings (in term of # of reviews and rating of reviews). The features will be chosen based on their several top-rank correlation of a new feature called new_score_review. **New_score_review** is a feature of the multiplication of **reviews_per_month** and **review_scores_rating** and **divided by 100** (for the sake of simplicity). The creation of the new feature is intended as a approach to know which listings have more completed orders than someone else and great reviews from Guests as well since we dont have any number of completed order. Therefore, we could know what makes the top performer become top performer, and how the low performer one could adapt the behavior.","a0e90573":"On the bar chat above the red bar one is the low performer it represents under percentile 0.25 of the score and the aquamarine one is the high performer it has score more than 90 percentile of the distributions.","d0588483":"# How's the plan?","59b5d05d":"![\"Source From Wikipedia\"](https:\/\/cdn.pbrd.co\/images\/HRHar3o.jpg)","ff86d401":"# Problem Statement.","2da7825a":"# Suggestions for Hosts."}}