{"cell_type":{"bde61781":"code","861d83be":"code","ce18666c":"code","737df16d":"code","5034d80f":"code","1cbfb403":"code","8952fd87":"code","7b8df54a":"code","14cb6f41":"code","8d4a286a":"markdown","463b8352":"markdown","aaa91e16":"markdown","b93a590d":"markdown","c964a2d3":"markdown","75e5d7b6":"markdown","9dc2e014":"markdown","e6d1daf3":"markdown","40ec1493":"markdown","f7a08b84":"markdown","a9f215e1":"markdown","e0a78ee0":"markdown","8771a860":"markdown","f8586181":"markdown","3a5fc788":"markdown","cc3a0f93":"markdown","90bc0f95":"markdown","b9cc90c7":"markdown","a0ba6600":"markdown","24fa2981":"markdown","0f377930":"markdown","39ccc2eb":"markdown","f131617c":"markdown","5894165e":"markdown"},"source":{"bde61781":"import numpy as np\nimport pandas as pd\nimport itertools\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import PassiveAggressiveClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix","861d83be":"fake_news_data = pd.read_csv('..\/input\/textdb3\/fake_or_real_news.csv')\n\nprint(fake_news_data.shape)\nfake_news_data.head()","ce18666c":"fake_news_data['label'].value_counts()","737df16d":"labels = fake_news_data.label","5034d80f":"# The column \"text\" is used to X and labels used to y\nX_train, X_test, y_train, y_test = train_test_split(fake_news_data['text'], labels, test_size=0.2, random_state=42)","1cbfb403":"# For more information about TfidVectorizer parameters, check the \"references\" section\ntfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)\n\n# Fit and transform train data and transform test data\ntfidf_train = tfidf_vectorizer.fit_transform(X_train)\ntfidf_test = tfidf_vectorizer.transform(X_test)","8952fd87":"# Passive Agressive Classifier\npa_clf = PassiveAggressiveClassifier(max_iter=50)\n\n# Fit the classifier\npa_clf.fit(tfidf_train, y_train)\n\n# Make predictions with test data\npreds = pa_clf.predict(tfidf_test)","7b8df54a":"# Accuracy\nscore = accuracy_score(y_test, preds)\n\n# Print accuracy\nprint('Accuracy = {}%'.format(round(score * 100, 2)))","14cb6f41":"confusion_matrix(y_test, preds)","8d4a286a":"Passive-Aggressive algorithms are called so because :\n\n\n- Passive: If the prediction is correct, keep the model and do not make any changes. i.e., the data in the example is not enough to cause any changes in the model. \n- Aggressive: If the prediction is incorrect, make changes to the model. i.e., some change to the model may correct it.","463b8352":"# Introduction","aaa91e16":"# Read the data","b93a590d":"### Tfidf vectorizer","c964a2d3":"# Modeling","75e5d7b6":"The dataset columns are very intuitive:\n- **title**: title of news\n- **text**: text of news\n- **label**: the news is real or fake\n\nThe column **Unnamed: 0** doesn't interest us.","9dc2e014":"### Select labels","e6d1daf3":"### Score","40ec1493":"### Passive Agressive Classifier","f7a08b84":"I hope you enjoyed this simple tutorial.","a9f215e1":"# Evaluate","e0a78ee0":"# References","8771a860":"To understand what it is **TFIDFVECTORIZER**, you need to understand two important concepts:\n- **Term Frequency (TF)** - Term frequency (TF) often used in Text Mining, NLP and Information Retrieval tells you how frequently a term occurs in a document. In the context natural language, terms correspond to words or phrases. Since every document is different in length, it is possible that a term would appear more often in longer documents than shorter ones. Thus, term frequency is often divided by the  the total number of terms in the document as a way of normalization. \n\n> TF(t) = (Number of times term t appears in a document) \/ (Total number of terms in the document).\n\n- **Inverse Document Frequency (IDF)** - Inverse Document Frequency (IDF) is a weight indicating how commonly a word is used. The more frequent its usage across documents, the lower its score. The lower the score, the less important the word becomes. For example, the word \"the\" appears in almost all English texts and would thus have a very low IDF score as it carries very little topic information. In contrast, if you take the word \"coffee\", while it is common, it\u2019s not used as widely as the word \"the\". Thus, \"coffee\" would have a higher IDF score than \"the\".\n\nThe TfidfVectorizer converts a collection of raw documents into a matrix of TF-IDF features.","f8586181":"### Separation between training and testing","3a5fc788":"### Create Passive Aggressive model","cc3a0f93":"- [What is Term-Frequency?](https:\/\/kavita-ganesan.com\/what-is-term-frequency\/#.Xb2W0pNKjm0)\n- [What is Inverse Document Frequency (IDF)?](https:\/\/kavita-ganesan.com\/what-is-inverse-document-frequency\/)\n- [Passive Aggressive Classifiers](https:\/\/www.geeksforgeeks.org\/passive-aggressive-classifiers\/)","90bc0f95":"### TFIDF Vectorizer","b9cc90c7":"WOW, 93.69% accuracy until it is a good result for such a simple model!","a0ba6600":"# Import libs","24fa2981":"For more information on the topics covered above, see the \"references\" section of this notebook, where you will find several useful links.","0f377930":"It's a small, but well-balanced dataset, with almost the same numbers of fake and non-fake news","39ccc2eb":"### Confusion Matrix","f131617c":"This project aims to predict whether a news item is fake or not, and for that I will use two important things: **TFIDFVECTORIZER** and **PASSIVE AGGRESSIVE CLASSIFIER**","5894165e":"### Important"}}