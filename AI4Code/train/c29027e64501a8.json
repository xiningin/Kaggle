{"cell_type":{"24c2a6e9":"code","a10a35b5":"code","f4130f5d":"code","b0caf518":"code","9d28648c":"code","f4637e09":"code","eea356e9":"code","d4612cb2":"code","b06fbe95":"code","f2be2732":"code","d211755a":"code","43f86773":"markdown","2e264655":"markdown"},"source":{"24c2a6e9":"\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style(style='whitegrid')\nsns.set(font_scale=1.5);\nimport re\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a10a35b5":"df = pd.read_csv('..\/input\/clinvar-conflicting\/clinvar_conflicting.csv', dtype={0: object, 38: str, 40: object})\nprint(df.columns)\nprint(df.shape)\n\n","f4130f5d":"ax = sns.countplot(x=\"CLASS\", data=df)\nax.set(xlabel='CLASS', ylabel='Number of Variants');","b0caf518":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\n","9d28648c":"X = df.drop('CLASS',axis = 1)\ny = df['CLASS']\ncategorical_features = [col for c, col in enumerate(X.columns) \\\n                        if not ( np.issubdtype(X.dtypes[c], np.number )  )  ]\n\nlen(categorical_features), X.shape, y.shape, y.mean() ","f4637e09":"for f in categorical_features:\n    X[f] = X[f].astype('category')\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state = 0, stratify = y  )\nprint(X_train.shape, X_test.shape)","eea356e9":"# technical things: transform data into internal lightgbm format\ntrain_data = lgb.Dataset(X_train, label=y_train , categorical_feature=categorical_features)\ntest_data = lgb.Dataset(X_test, label=y_test, categorical_feature=categorical_features)","d4612cb2":"# Create lightgbm model builder.\n# I found params by tuning 'num_leaves': 500, 'learning_rate': 0.0015, \n\nparameters = {\n    'application': 'binary',\n    'objective': 'binary',\n    'metric': 'auc',\n    'is_unbalance': 'true',\n    'boosting': 'gbdt',\n    'num_leaves': 500,\n    'feature_fraction': 0.5,\n    'bagging_fraction': 0.5,\n    'bagging_freq': 20,\n    'learning_rate': 0.0015,\n    'verbose': 0\n}\n\nmodel = lgb.train(parameters,\n                       train_data,\n                       valid_sets=test_data,\n                       num_boost_round=5000,\n                       early_stopping_rounds=100)","b06fbe95":"p = model.predict(X_test)\nprint('Test roc_auc_score = ', roc_auc_score(y_test, p ))    ","f2be2732":"#ax = plt.figure(figsize = (20,5))\nfig, ax = plt.subplots(figsize=(20, 15))\nlgb.plot_importance(model,ax.axes,  height = 1.6)\nplt.show()","d211755a":"pd.Series(index = X.columns, data = model.feature_importance() , name = 'Importance').sort_values(ascending = False)","43f86773":"CLASS is target variable \n\nThe CLASS distribution is skewed a bit to the 0 class, meaning there are fewer variants with conflicting submissions.\n","2e264655":"Lightgbm model - roc_auc 0.815 , feature importance visualization \n"}}