{"cell_type":{"900ed201":"code","bad8d8f2":"code","12d63346":"code","4f428214":"code","86403cbb":"code","1e721862":"code","d71be932":"code","96111f85":"code","b7fbbafb":"code","ef1fab08":"code","a8639319":"code","81fc832e":"code","a0494711":"code","b0ca772f":"code","c36e3fef":"code","1abb0095":"code","c9303162":"code","56575b5c":"code","eb62ce80":"code","a3e63f92":"code","54ee6d13":"code","f40de001":"code","abf45b8e":"code","ebb08047":"code","eb7b9bf3":"code","de87613f":"code","9cd99531":"markdown","3c408c07":"markdown","bce1c244":"markdown","ed589e20":"markdown","7ba2d5a9":"markdown","515f3276":"markdown","31199c3d":"markdown","2d6ffb3d":"markdown","2f5b6d99":"markdown","a275699c":"markdown","d6aa3eb3":"markdown","bd63dbbf":"markdown","e9c464fb":"markdown","ccae87af":"markdown","99378dba":"markdown","12de10d8":"markdown","4f13d358":"markdown","4917c29c":"markdown","70825521":"markdown"},"source":{"900ed201":"import matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.covariance import EllipticEnvelope\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.metrics import mean_absolute_error\nimport seaborn as sns\nimport plotly as py","bad8d8f2":"import warnings\nwarnings.filterwarnings('ignore')","12d63346":"air_data = \"..\/input\/air-quality-data\/fin_data.csv\"\ndf= pd.read_csv(air_data)\ndf = df.drop([\"pm2_5\"], axis=1)\nprint(\"Dataset obtained: \\n\")\ndf.head()","4f428214":"df.describe()","86403cbb":"print(\"Missing values per column:\")\nprint(\"So2  :\",df[\"so2\"].isnull().sum())\nprint(\"No2  :\",df[\"no2\"].isnull().sum())\nprint(\"RSPM :\",df[\"rspm\"].isnull().sum())\nprint(\"\\nTotal number of missing values: \")\nprint(df[\"so2\"].isnull().sum() + df[\"no2\"].isnull().sum() + df[\"rspm\"].isnull().sum())","1e721862":"import missingno as msn\nfig = msn.matrix(df)\nfig","d71be932":"msn.heatmap(df)","96111f85":"msn.dendrogram(df)","b7fbbafb":"x=df.iloc[:,8:10]\ny=df.iloc[:,10]\nprint(\"X data: \\n\",x[:5])\nprint(\"\\nY data: \\n\",y[:5])","ef1fab08":"mice_imputer=IterativeImputer()\nx=mice_imputer.fit_transform(x)\nprint(\"X after imputation: \\n\",x[:5])\ny=mice_imputer.fit_transform(y.values.reshape(-1,1))\nprint(\"\\nY after imputation:\\n \",y[:5])\n\nprint(\"\\nData sucessfully imputed.\")","a8639319":"loc=df.iloc[:,5]\nlati=df.iloc[:,3]\nlongi=df.iloc[:,4]\ndata = df.iloc[:,8:10]\n    \ndata['date'] = df.iloc[:,-2]\ndata['state'] = df.iloc[:,2]\ndata['so2']=x[:,0]\ndata['no2']=x[:,1]\ndata['rspm']=y\ndata.to_csv(\"processed_data.csv\")\n\nprint(\"Preprocessed data sucessfully writen to another file.\")","81fc832e":"data['date'] = pd.to_datetime(data['date'],format='%m-%d-%Y') # date parse\ndata['year'] = data['date'].dt.year # year\ndata['year'] = data['year'].fillna(0.0).astype(int)\ndata = data[(data['year']>0)]","a0494711":"data.head()","b0ca772f":"print(\"Missing values per column:\")\nprint(\"So2  :\",data[\"so2\"].isnull().sum())\nprint(\"No2  :\",data[\"no2\"].isnull().sum())\nprint(\"RSPM :\",data[\"rspm\"].isnull().sum())\nprint(\"\\nTotal number of missing values: \")\nprint(data[\"so2\"].isnull().sum() + data[\"no2\"].isnull().sum() + data[\"rspm\"].isnull().sum())","c36e3fef":"temp = df.iloc[:,8:10]\ntemp[\"so2\"] = df[\"so2\"]\ntemp[\"no2\"] = df[\"no2\"]\ntemp[\"date\"] = df[\"date\"]\ntemp[\"state\"] = df[\"state\"]\ntemp[\"rspm\"] = df['rspm']\ntemp[\"year\"] = df[\"year\"]\ntemp.head()","1abb0095":"msn.matrix(temp,figsize=(8,5))\nmsn.matrix(data,figsize=(8,5))","c9303162":"msn.heatmap(temp,figsize=(8,5))\nmsn.heatmap(data,figsize=(8,5))","56575b5c":"msn.dendrogram(temp,figsize=(8,5))\nmsn.dendrogram(data,figsize=(8,5))","eb62ce80":"msn.bar(temp,figsize=(8,5), color=\"r\")\nplt.figure()\nmsn.bar(data,figsize=(8,5), color=\"g\")","a3e63f92":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=1)\nprint(\"X_train.shape = \",X_train.shape, \"\\ny_train.shape = \",y_train.shape)\nplt.scatter(x[:,0],x[:,1], label=\"RSMP: So2 vs No2\")\nplt.xlabel(\"So2\")\nplt.ylabel(\"No2\") \nplt.title(\"So2 vs No2\")\nplt.legend()\nplt.show()","54ee6d13":"ee = EllipticEnvelope(contamination=0.0003)\nyhat = ee.fit_predict(x)\nmask1 = yhat == -1\nvalues = x[mask1]\nprint(\"MCD sucessfully applied for data\")","f40de001":"plt.scatter(x[:,0], x[:,1], label=\"RSMP: So2 vs No2\")\nplt.scatter(values[:,0],values[:,1], color='r', label=\"Outliers Detected\")\nplt.xlabel(\"So2\")\nplt.ylabel(\"No2\") \nplt.title(\"So2 vs No2\")\nplt.legend()\nplt.show()","abf45b8e":"ypred = ee.fit_predict(X_train)\nmask = ypred != -1\nX_train, y_train = X_train[mask, :], y_train[mask]\nprint(\"Shape of dataset after MCD:\")\nprint(\"X_train.shape = \",X_train.shape, \"\\ny_train.shape = \",y_train.shape)\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\nypred = model.predict(X_test)\nmae = mean_absolute_error(y_test, ypred)\nprint('\\nMAE of MCD: ',mae) ","ebb08047":"f, ax = plt.subplots(figsize=(15,15))\nax.set_title('{} by state and year'.format('rspm'))\nsns.heatmap(data.pivot_table('rspm', index='state',\n                             columns=['year'],aggfunc='median',margins=True),\n            annot=True,cmap=\"BuPu\", linewidths=.5, ax=ax,cbar_kws={'label': 'Annual Average'})","eb7b9bf3":"data[['rspm','state']].groupby([\"state\"]).median().sort_values(by='rspm',\n                                                               ascending=False).head(34).plot.bar(color='b')\nplt.show()","de87613f":"temp = data[['rspm','year','state']].groupby([\"year\"]).median().reset_index().sort_values(by='year',\n                                                                                          ascending=False)\nf,ax=plt.subplots(figsize=(15,5))\nsns.pointplot(x='year', y='rspm', data=temp)","9cd99531":"This notebook was created to:\n1. impute the missing values using MICE (Multi-variate Imputation by Chained Equation) technique\n2. identify and eliminate the outliers using the Minimum Covariance Determinant (MCD) method\n3. visually represent the processed data\n4. analyze the data and draw conclusions.","3c408c07":"### 6.1. Splitting Data into Train and Test Data","bce1c244":"### 5.1.  Number of Missing Values","ed589e20":"# 1. Importing packages","7ba2d5a9":"# 5. Preprocessed Data Visualization","515f3276":"### 5.2. Visualization","31199c3d":"### 3.1.  Number of Missing Values","2d6ffb3d":"# 2. Data Importation","2f5b6d99":"### 4.1. Selecting the required columns","a275699c":"# 4. Data Preprocessing","d6aa3eb3":"### 6.5. Visualization After Oultier Detection","bd63dbbf":"### 4.2. Applying Multivariate Imputation by Chained Equations - MICE","e9c464fb":"### 6.2. Minimum Covariance Determinant","ccae87af":"# 3. Missing Value Visualization","99378dba":"### 3.2. Visualization","12de10d8":"### 6.4. Predicting and Fitting Data ","4f13d358":"### 4.3. Exporting Preprocessed Data into Excel","4917c29c":"### 6.3. Outliers Found Using MCD ","70825521":"# 6. Outlier Detection"}}