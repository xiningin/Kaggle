{"cell_type":{"51f45f9c":"code","7f765113":"code","717058c2":"code","7e2e7560":"code","3f974355":"code","fc118edb":"code","6ee3f54c":"code","9fd3bffe":"code","2fd9527e":"code","17e4ed95":"code","0bb47412":"code","9c234d6c":"code","6418ebac":"code","e753d67d":"code","13c27ed0":"code","eb77d762":"code","d3a21b1b":"code","328da7b4":"code","bbb58369":"code","2ffb08e4":"code","8aa13e6b":"code","45fa09fb":"code","7f00d8ca":"code","0ea40307":"code","2953e8c1":"code","afa44a89":"code","8638034c":"code","f41a43c9":"code","2e3acc29":"code","6f656f9c":"code","084c205d":"code","3d88a8e5":"markdown","0e4d885c":"markdown","1110f605":"markdown","2413b0bc":"markdown","51bab154":"markdown","aa828566":"markdown","598fdb77":"markdown"},"source":{"51f45f9c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f765113":"import matplotlib\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nsns.set(color_codes = True)\n%matplotlib inline\npd.pandas.set_option('display.max_columns', None)","717058c2":"df = pd.read_csv(\"\/kaggle\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv\")\ndf.head()","7e2e7560":"# Check NAN Values\nfor i in df.columns:\n    print (i+\": \"+str(df[i].isna().sum()))","3f974355":"df.rename(columns = {'default.payment.next.month':'Default payment'},inplace=True)","fc118edb":"df= df.drop('ID',axis=1)","6ee3f54c":"df.describe()","9fd3bffe":"corr = df.corr()\n\nplt.figure(figsize = (20,9))\nsns.heatmap(corr,annot = True,cmap = 'rocket')","2fd9527e":"ax = sns.countplot(x = 'Default payment',data = df,palette = 'crest_r')","17e4ed95":"ax = sns.barplot(x='Default payment',y = 'LIMIT_BAL',data = df)","0bb47412":"sns.pairplot(df,palette = 'rocket')","9c234d6c":"plt.subplots(figsize=(20,10))\n\nplt.subplot(231)\nax = sns.barplot(x=\"SEX\", y=\"BILL_AMT1\", data=df)\n\nplt.subplot(232)\nax = sns.barplot(x='Default payment',y = 'LIMIT_BAL',data = df)\n\n","6418ebac":"plt.subplots(figsize=(20,10))\n\nplt.subplot(231)\nplt.scatter(x=df.PAY_AMT1, y=df.BILL_AMT1, c='r', s=1)\n\nplt.subplot(232)\nplt.scatter(x=df.PAY_AMT2, y=df.BILL_AMT2, c='b', s=1)\n\nplt.subplot(233)\nplt.scatter(x=df.PAY_AMT3, y=df.BILL_AMT3, c='g', s=1)\n\nplt.subplot(234)\nplt.scatter(x=df.PAY_AMT4, y=df.BILL_AMT4, c='c', s=1)\nplt.ylabel(\"Bill Amount in past 6 months\", fontsize=25)\n\nplt.subplot(235)\nplt.scatter(x=df.PAY_AMT5, y=df.BILL_AMT5, c='y', s=1)\nplt.xlabel(\"Payment in past 6 months\", fontsize=25)\n\nplt.subplot(236)\nplt.scatter(x=df.PAY_AMT6, y=df.BILL_AMT6, c='m', s=1)\n\nplt.show()","e753d67d":"df.head()","13c27ed0":"sns.barplot(x='SEX',y='LIMIT_BAL',data = df)","eb77d762":"plt.figure(figsize=(20,4))\nplt.subplot(131)\nsns.boxplot(x = 'SEX',y='AGE',data = df)\nsns.stripplot(x = 'SEX',y='AGE',data = df,linewidth = 1)\n\nplt.subplot(132)\nsns.boxplot(x = 'EDUCATION',y = 'LIMIT_BAL',data = df)\nsns.stripplot(x = 'EDUCATION',y = 'LIMIT_BAL',data = df,linewidth = 1)","d3a21b1b":"bill_total = pd.DataFrame(df['BILL_AMT1']+df['BILL_AMT2']+df['BILL_AMT3']+df['BILL_AMT4']+df['BILL_AMT5']+df['BILL_AMT6'],columns=['bill_total'])\npay_amt_total = pd.DataFrame(df['PAY_AMT1']+df['PAY_AMT2']+df['PAY_AMT3']+df['PAY_AMT4']+df['PAY_AMT5']+df['PAY_AMT6'],columns=['pay_amt_total'])\n","328da7b4":"total = [pay_amt_total,bill_total]\n\ntotal = pd.concat(total,axis = 1)\ntotal","bbb58369":"remaining_pay_balance =pd.DataFrame(total['bill_total']-total['pay_amt_total'],columns = ['remaining_pay_balance'])\ntop_ten_def_payment = remaining_pay_balance.sort_values(by ='remaining_pay_balance',ascending = False).reset_index().head(10)\n\ntop_ten_def_payment","2ffb08e4":"plt.figure(figsize = (20,9))\nax = sns.barplot(x=\"index\", y=\"remaining_pay_balance\", data=top_ten_def_payment,palette = 'rocket')","8aa13e6b":"payment = [remaining_pay_balance,df['Default payment']]\ndef_pay = pd.concat(payment,axis = 1)\ndef_pay","45fa09fb":"x = df.iloc[:,:-1]\ny = df.iloc[:,-1]","7f00d8ca":"from sklearn.preprocessing import StandardScaler\nstd = StandardScaler()\nstd_x = std.fit_transform(x)\n","0ea40307":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.21,random_state = 41)\n\nprint(\"Training data:{}\".format(x_train.shape))\nprint(\"Test data:{}\".format(x_test.shape))","2953e8c1":"from sklearn.linear_model import SGDClassifier\n\nclf = SGDClassifier()","afa44a89":"from sklearn.model_selection import RandomizedSearchCV\n#Randomized Search CV\n\n\nloss = ['hinge', 'log', 'modified_huber','squared_hinge', 'perceptron','squared_loss']\n\npenalty = ['l2', 'l1']\n\nalpha = [0.001,0.0001,0.00025,0.0000025,2,5,10,20]\n\nmax_iter = [10000,10000,20000,55000,40000]\n\n#learning_rate = ['constant','optimal','invscaling','adaptive']\n","8638034c":"# Create the random grid\nrandom_grid = {'loss': loss,\n               'penalty': penalty,\n               'alpha': alpha,\n               'max_iter': max_iter}\n\nprint(random_grid)\n","f41a43c9":"\n# Random search of parameters, using 3 fold cross validation, \n# search across 50 different combinations\nrf_random = RandomizedSearchCV(estimator = clf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = 1)\nrf_random.fit(x_train,y_train)\n","2e3acc29":"print(rf_random.best_params_)","6f656f9c":"clf = SGDClassifier(penalty ='l1', max_iter= 40000, loss = 'log', alpha = 0.001)\n\nclf.fit(x_train,y_train)\n\nscore =  clf.score(x_test,y_test)\ny_predicted = clf.predict(x_test)\nprint(score)","084c205d":"from sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(y_test, y_predicted)\nnp.set_printoptions(precision=2)\ncnf_matrix","3d88a8e5":"<a id=\"3\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>DATA_VISUALIZATION<\/center><\/h1># 3.Data Visualization","0e4d885c":"<a id=\"1\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>LIBRARIES<\/center><\/h1>","1110f605":"<a id=\"2\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>IMPORT_DATA<\/center><\/h1>","2413b0bc":"<a id=\"5\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>MODEL_BUILDING & HYPERPARAMETER<\/center><\/h1>","51bab154":"This data is from taiwan where they give independent and  dependent feature for building model accordingly, we have to predict weather person will do a payment? \nFirstly we will see each feature meaning following are the features\n\n- 1.ID: ID of each client\n- 2.LIMIT_BAL: Amount of given credit in NT dollars (includes individual and family\/supplementary credit\n- 3.SEX: Gender (1=male, 2=female)\n- 4.EDUCATION: (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown)\n- 5.MARRIAGE: Marital status (1=married, 2=single, 3=others)\n- 6.AGE: Age in years\n- 7.PAY_0: Repayment status in September, 2005 (-1=pay duly, 1=payment delay for one month, 2=payment delay for two  \n- 8.months, \u2026 8=payment delay for eight months, 9=payment delay for nine months and above)\n- 9.PAY_2: Repayment status in August, 2005 (scale same as above)\n- 10.PAY_3: Repayment status in July, 2005 (scale same as above)\n- 11.PAY_4: Repayment status in June, 2005 (scale same as above)\n- 12.PAY_5: Repayment status in May, 2005 (scale same as above)\n- 13.PAY_6: Repayment status in April, 2005 (scale same as above)\n- 14.BILL_AMT1: Amount of bill statement in September, 2005 (NT dollar)\n- 15.BILL_AMT2: Amount of bill statement in August, 2005 (NT dollar)\n- 16.BILL_AMT3: Amount of bill statement in July, 2005 (NT dollar)\n- 17.BILL_AMT4: Amount of bill statement in June, 2005 (NT dollar)\n- 18.BILL_AMT5: Amount of bill statement in May, 2005 (NT dollar)\n- 19.BILL_AMT6: Amount of bill statement in April, 2005 (NT dollar)\n- 20.PAY_AMT1: Amount of previous payment in September, 2005 (NT dollar)\n- 21.PAY_AMT2: Amount of previous payment in August, 2005 (NT dollar)\n- 22.PAY_AMT3: Amount of previous payment in July, 2005 (NT dollar)\n- 23.PAY_AMT4: Amount of previous payment in June, 2005 (NT dollar)\n- 24.PAY_AMT5: Amount of previous payment in May, 2005 (NT dollar)\n- 25.PAY_AMT6: Amount of previous payment in April, 2005 (NT dollar)\n- 26.default.payment.next.month: Default payment (1=yes, 0=no)\n\n\n- from above data biling amount for 6 months and amount which is payed by person given by pay_amount for 6 months. ","aa828566":"<a id=\"4\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>DATA_PREPROCESSING<\/center><\/h1>","598fdb77":"<a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h1 style='background:#a9a799; border:0; color:black'><center>INDEX<\/center><\/h1>"}}