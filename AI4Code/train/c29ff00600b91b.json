{"cell_type":{"01045142":"code","a2c0baa7":"code","6aefaaf3":"code","e11d12d0":"code","33af38bf":"code","b7d45d0c":"code","9333fed3":"code","d2a7d87d":"code","cf756ae0":"code","b2498302":"code","c134c1ac":"code","3b4b3a43":"code","ff069765":"code","257a87cc":"code","fbd1a94d":"code","7b264172":"markdown","595f21a6":"markdown","cd01529f":"markdown","415876a3":"markdown","6f4e3d47":"markdown","06a33daf":"markdown","ec23f4db":"markdown","4a099d0f":"markdown","5561de32":"markdown"},"source":{"01045142":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score, log_loss, roc_auc_score\n","a2c0baa7":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-sep-2021\/test.csv\")","6aefaaf3":"train.pop(\"id\")\ntest_ids = test.pop(\"id\")\ntrain_targets = train.pop(\"claim\")\ntrain_targets.head()","e11d12d0":"for data in [train, test]:\n    data['n_nans'] = data.isnull().sum(axis=1)\n    data['std'] = data.std(axis=1)\n    data['var'] = data.var(axis=1)\n    data['abs_sum'] = data.abs().sum(axis=1)\n    data['sem'] = data.sem(axis=1)\n    data['avg'] = data.mean(axis=1)\n    data['max'] = data.max(axis=1)\n    data['min'] = data.min(axis=1)","33af38bf":"features = []\nfor feature in train.columns:\n    features.append(feature)\nprint(features)","b7d45d0c":"train['missing'] = train[features].isna().sum(axis=1)\ntest['missing'] = test[features].isna().sum(axis=1)","9333fed3":"from sklearn.impute import SimpleImputer\nss = SimpleImputer(missing_values=np.nan, strategy='mean')\ntrain[features] = ss.fit_transform(train[features])\ntest[features] = ss.transform(test[features])","d2a7d87d":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\ntrain[features] = scale.fit_transform(train[features])\ntest[features] = scale.transform(test[features])","cf756ae0":"for item in train.columns:\n    if item == \"n_nans\" or item == \"std\" or item == \"var\" or item == \"abs_sum\" or item == \"sem\" or item == \"avg\" or item == \"min\" or item == \"max\":\n        continue\n    #if abs(train[item].max()) \/ (abs(train[item].min()) + 10e-10) > 10:\n    #    train[item] = np.sign(train[item]) * np.log2(np.abs(train[item]) + 1)\n    #    test[item] = np.sign(test[item]) * np.log2(np.abs(test[item]) + 1)\n    train_mean = train[item].mean()\n    train_std = train[item].std()\n    train[item] = (train[item] - train_mean) \/ train_std\n    test[item] = (test[item] - train_mean) \/ train_std\n    # Missing Value Imputation seems to have a bad effect to final results\n    #train[item].replace(np.NAN, train[item].mean(), inplace=True)\n    #test[item].replace(np.NAN, test[item].mean(), inplace=True)\n","b2498302":"train_features, valid_features, train_targets, valid_targets = train_test_split(train, train_targets, test_size=0.2, random_state=np.random.randint(1000))\ntrain_features.shape, train_targets.shape, valid_features.shape, valid_targets.shape","c134c1ac":"def evaluate(valid_targets, probs, name):\n    y_pred = np.array(probs > 0.5, dtype=int)\n    acc = accuracy_score(valid_targets, y_pred)\n    loss = log_loss(valid_targets, y_pred)\n    auc = roc_auc_score(valid_targets, probs)\n    print(\"Accuracy score: %.2f\"%(acc))\n    print(\"Log loss: %.2f\"%(loss))\n    print(\"AUC score:\", auc)\n    print(\"Classification report:\")\n    print(classification_report(valid_targets, y_pred))\n    return {\n        \"name\": name, \n        \"accuracy_score\": acc, \n        \"log_loss\": loss, \n        \"auc\": auc\n    }","3b4b3a43":"cat_params = {\n    'iterations': 15000, \n    'loss_function': 'Logloss', \n    'depth': 3, \n    'task_type' : 'GPU',\n    'use_best_model': True,\n    'eval_metric': 'AUC',\n    'early_stopping_rounds': 1000,\n    'learning_rate': 0.0337852,\n    'border_count': 32,\n    #'l2_leaf_reg': 3,\n    \"verbose\": 1000,\n    'bootstrap_type':'Poisson',\n    'reg_lambda': 0.32796141625302366,\n}\ncat = CatBoostClassifier(**cat_params)\ncat.fit(train_features, train_targets, eval_set=[(valid_features, valid_targets)])","ff069765":"probs = cat.predict_proba(valid_features)[:, 1]\nprobs[:10]","257a87cc":"result_cat = evaluate(valid_targets, probs, \"catboost\")\nresult_cat","fbd1a94d":"claim = cat.predict_proba(test)[:, 1]\nsubmission = pd.DataFrame({\"id\": list(test_ids), \"claim\": claim.reshape(-1)})\nsubmission.to_csv(\"submission.csv\", index=False)","7b264172":"### Introducing new features","595f21a6":"## Feature Scaling","cd01529f":"## Submisssion","415876a3":"## Using CatBoost","6f4e3d47":"## Import datasets","06a33daf":"## Model Development & Evaluation\n","ec23f4db":"### Evaluation Method","4a099d0f":"## Import Packages","5561de32":"### Train Validation Split"}}