{"cell_type":{"f1380007":"code","8323e6aa":"code","df148199":"code","68e53bbe":"code","6aa36256":"code","f3a1c626":"code","8a44f8c8":"code","88e079b1":"code","eebf6841":"code","8165b525":"code","b3669aaf":"code","fa8a720d":"code","5c1cd464":"code","fb45153b":"code","bf8f7e6f":"code","ca1d91fe":"code","c0d051f5":"code","b98c72f4":"code","bc6064a5":"code","a4ac5c42":"code","ec38d80d":"code","fa496a88":"code","b8c97bd8":"code","ab79997c":"code","3e372726":"code","7eed80f8":"code","e9ddd6ae":"code","582fe166":"code","d67967ea":"code","0a3c6afd":"code","d5aa1f06":"code","ab394141":"code","284f506c":"code","a417bd2a":"code","fc189a44":"code","27f89f19":"code","51b3a2f1":"markdown","a68ab990":"markdown","d6e1abc7":"markdown","085a3e9c":"markdown","6df2906f":"markdown","4dd83cc0":"markdown","beff38e2":"markdown","b9f9e48a":"markdown","fda30361":"markdown","0e2ee2bb":"markdown","474b07c4":"markdown","60dcffb3":"markdown","3c795bf8":"markdown","424d3a0b":"markdown","69e4559b":"markdown","81917019":"markdown","2d7febcf":"markdown","83795d1e":"markdown","25a22083":"markdown","32f03635":"markdown"},"source":{"f1380007":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\nimport cv2\nimport seaborn\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8323e6aa":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import train_test_split\n\n\nfrom scipy.stats import skew\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.style.use('ggplot')","df148199":"df = pd.read_csv('\/kaggle\/input\/ai4all-project\/results\/classifier\/lasso_s5\/lassoRandomForest_probs.csv')\ndf.head()","68e53bbe":"# categorical features\ncategorical_feat = [feature for feature in df.columns if df[feature].dtypes=='O']\nprint('Total categorical features: ', len(categorical_feat))\nprint('\\n',categorical_feat)","6aa36256":"#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","f3a1c626":"from sklearn.model_selection import train_test_split\n# Hot-Encode Categorical features\ndf = pd.get_dummies(df) \n\n# Splitting dataset back into X and test data\nX = df[:len(df)]\ntest = df[len(df):]\n\nX.shape","8a44f8c8":"# Save target value for later\ny = df.COVID19.values\n\n# In order to make imputing easier, we combine train and test data\ndf.drop(['COVID19'], axis=1, inplace=True)\ndf = pd.concat((df, test)).reset_index(drop=True)","88e079b1":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=0)","eebf6841":"from sklearn.model_selection import KFold\n# Indicate number of folds for cross validation\nkfolds = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Parameters for models\ne_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\ne_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]\nalphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]\nalphas2 = [0.00005, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]","8165b525":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LassoCV\n# Lasso Model\nlasso = make_pipeline(RobustScaler(), LassoCV(max_iter=1e7, alphas = alphas2, random_state = 42, cv=kfolds))\n\n# Printing Lasso Score with Cross-Validation\nlasso_score = cross_val_score(lasso, X, y, cv=kfolds, scoring='neg_mean_squared_error')\nlasso_rmse = np.sqrt(-lasso_score.mean())\nprint(\"LASSO RMSE: \", lasso_rmse)\nprint(\"LASSO STD: \", lasso_score.std())","b3669aaf":"# Training Model for later\nlasso.fit(X_train, y_train)","fa8a720d":"from PIL import Image\nim = Image.open(\"..\/input\/ai4all-project\/figures\/classifier\/lassoRandomForest_5gene_roc.png\")\n#tlabel = np.asarray(Image.open(\"..\/input\/train_label\/170908_061523257_Camera_5_instanceIds.png\")) \/\/ 1000\n#tlabel[tlabel != 0] = 255\n# plt.imshow(Image.blend(im, Image.fromarray(tlabel).convert('RGB'), alpha=0.4))\nplt.imshow(im)\ndisplay(plt.show())","5c1cd464":"df1 = pd.read_csv('\/kaggle\/input\/ai4all-project\/results\/classifier\/lasso_s10\/lassoRandomForest_probs.csv')\ndf1.head()","fb45153b":"train = '..\/input\/ai4all-project\/results\/classifier\/lasso_s10\/lassoRandomForest_probs.csv'\ntest = '..\/input\/ai4all-project\/results\/classifier\/lasso_s10\/lassoRandomForest_probs.csv'\n\ndf_train = pd.read_csv(train)\ndf_test = pd.read_csv(test)","bf8f7e6f":"def is_outlier(points, thresh = 3.5):\n    if len(points.shape) == 1:\n        points = points[:,None]\n    median = np.median(points, axis=0)\n    diff = np.sum((points - median)**2, axis=-1)\n    diff = np.sqrt(diff)\n    med_abs_deviation = np.median(diff)\n\n    modified_z_score = 0.6745 * diff \/ med_abs_deviation\n\n    return modified_z_score > thresh","ca1d91fe":"#plt.style.use('dark_background')\ntarget = df_train[df_train.columns.values[-1]]\ntarget_log = np.log(target)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.distplot(target, bins=50)\nplt.title('Covid-19 CZB')\nplt.xlabel('COVID19')\n\nplt.subplot(1,2,2)\nsns.distplot(target_log, bins=50)\nplt.title('Natural Log of Covid19 CZB')\nplt.xlabel('Natural Log of COVID19')\nplt.tight_layout()","c0d051f5":"df_train = df_train[df_train.columns.values[:-1]]\ndf = df_train.append(df_test, ignore_index = True)","b98c72f4":"cats = []\nfor col in df.columns.values:\n    if df[col].dtype == 'object':\n        cats.append(col)","bc6064a5":"df_cont = df.drop(cats, axis=1)\ndf_cat = df[cats]","a4ac5c42":"for col in df_cont.columns.values:\n    if np.sum(df_cont[col].isnull()) > 50:\n        df_cont = df_cont.drop(col, axis = 1)\n    elif np.sum(df_cont[col].isnull()) > 0:\n        median = df_cont[col].median()\n        idx = np.where(df_cont[col].isnull())[0]\n        df_cont[col].iloc[idx] = median\n\n        outliers = np.where(is_outlier(df_cont[col]))\n        df_cont[col].iloc[outliers] = median\n        \n        if skew(df_cont[col]) > 0.75:\n            df_cont[col] = np.log(df_cont[col])\n            df_cont[col] = df_cont[col].apply(lambda x: 0 if x == -np.inf else x)\n        \n        df_cont[col] = Normalizer().fit_transform(df_cont[col].reshape(1,-1))[0]","ec38d80d":"for col in df_cont.columns.values:\n    if np.sum(df_cont[col].isnull()) > 50:\n        df_cont = df_cont.drop(col, axis = 1)\n    elif np.sum(df_cont[col].isnull()) > 0:\n        median = df_cont[col].median()\n        idx = np.where(df_cont[col].isnull())[0]\n        df_cont[col].iloc[idx] = median\n\n        outliers = np.where(is_outlier(df_cont[col]))\n        df_cont[col].iloc[outliers] = median\n        \n        if skew(df_cont[col]) > 0.75:\n            df_cont[col] = np.log(df_cont[col])\n            df_cont[col] = df_cont[col].apply(lambda x: 0 if x == -np.inf else x)\n        \n        df_cont[col] = Normalizer().fit_transform(df_cont[col].reshape(1,-1))[0]","fa496a88":"df_new = df_cont.join(df_cat)\n\ndf_train = df_new.iloc[:len(df_train) - 1]\ndf_train = df_train.join(target_log)\n\ndf_test = df_new.iloc[len(df_train) + 1:]\n\nX_train = df_train[df_train.columns.values[1:-1]]\ny_train = df_train[df_train.columns.values[-1]]\n\nX_test = df_test[df_test.columns.values[1:]]","b8c97bd8":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import make_scorer, mean_squared_error\nscorer = make_scorer(mean_squared_error, False)\n\nclf = RandomForestRegressor(n_estimators=500, n_jobs=-1)\ncv_score = np.sqrt(-cross_val_score(estimator=clf, X=X_train, y=y_train, cv=15, scoring = scorer))\n\nplt.figure(figsize=(10,5))\nplt.bar(range(len(cv_score)), cv_score)\nplt.title('Cross Validation Score')\nplt.ylabel('RMSE')\nplt.xlabel('Iteration')\n\nplt.plot(range(len(cv_score) + 1), [cv_score.mean()] * (len(cv_score) + 1))\nplt.tight_layout()","ab79997c":"df_dummies = pd.get_dummies(df_train['CZB_ID'])\ndf_dummies.head()","3e372726":"from sklearn import preprocessing\nencoder = preprocessing.LabelEncoder()\ndf_train[\"CZB_ID\"] = encoder.fit_transform(df_train[\"CZB_ID\"].fillna('Nan'))\n#df_train[\"category_name\"] = encoder.fit_transform(df_train[\"category_name\"].fillna('Nan'))\ndf_train.head()","7eed80f8":"a = \"'92.345'\\r\\n\\r\\n\"\nx = float(a[1:6])","e9ddd6ae":"unicode_value = u'\"0.5\"'\n\nstring_value = str(unicode_value)\n\nfloat_value = float(string_value.strip('\"'))\n\nprint ('float_value')","582fe166":"# Extract the training and test data\ndata = df.values\nX = data[:, 1:]  # all rows, no label\ny = data[:, 0]  # all rows, label only\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","d67967ea":"from sklearn.preprocessing import StandardScaler\n# Scale the data to be between -1 and 1\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","0a3c6afd":"# Establish model\nmodel = RandomForestRegressor(n_jobs=-1)","d5aa1f06":"df1.isna().sum()","ab394141":"# Try different numbers of n_estimators - this will take a minute or so\nestimators = np.arange(10, 200, 10)\nscores = []\nfor n in estimators:\n    model.set_params(n_estimators=n)\n    model.fit(X_train, y_train)\n    scores.append(model.score(X_test, y_test))\nplt.title(\"Effect of n_estimators\")\nplt.xlabel(\"n_estimator\")\nplt.ylabel(\"score\")\nplt.plot(estimators, scores)","284f506c":"scores","a417bd2a":"from PIL import Image\nim = Image.open(\"..\/input\/ai4all-project\/figures\/classifier\/lassoRandomForest_10gene_roc.png\")\n#tlabel = np.asarray(Image.open(\"..\/input\/train_label\/170908_061523257_Camera_5_instanceIds.png\")) \/\/ 1000\n#tlabel[tlabel != 0] = 255\n# plt.imshow(Image.blend(im, Image.fromarray(tlabel).convert('RGB'), alpha=0.4))\nplt.imshow(im)\ndisplay(plt.show())","fc189a44":"plt.style.use('dark_background')\ndef plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set2')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","27f89f19":"plot_count(\"COVID19\", \"COVID19\", df,4)","51b3a2f1":"#Trying to convert string to float. And didn't work.","a68ab990":"#Lasso and COVID-19 (It's a different Lasso)\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRRNX-_bewbUpevAxUzm7ltUdIIwG2YkZSonw&usqp=CAU)facebook.com","d6e1abc7":"#Codes from Danai Avgerinou  https:\/\/www.kaggle.com\/comments\/notebook\/notebook?sortBy=relevance&group=everyone&search=label+encoding&page=1&pageSize=20","085a3e9c":"#Find all categorical data","6df2906f":"#There is no missing values, though I copied the snippets in case I may need it in the future","4dd83cc0":"#Codes from BradenFitz-Gerald https:\/\/www.kaggle.com\/dfitzgerald3\/randomforestregressor\/notebook#Remove-Skew-from-SalesPrice-data","beff38e2":"#Handle Missing Data for continuous data","b9f9e48a":"#Create separate datasets for Continuous vs Categorical","fda30361":"#Handle Missing Data for Categorical Data","0e2ee2bb":"#Codes from Nick Rose https:\/\/www.kaggle.com\/nsrose7224\/random-forest-regressor-accuracy-0-91","474b07c4":"Das War's Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwoke","60dcffb3":"#Lasso","3c795bf8":"#Define Median Absolute Deviation Function","424d3a0b":"#Create Estimator and Apply Cross Validation","69e4559b":"#Label Encoder","81917019":"#Merge Numeric and Categorical Datasets and Create Training and Testing Data","2d7febcf":"#Remove Skew from COVID19 data","83795d1e":"#Evaluate Feature Significance","25a22083":"#I gave up from here since there is no missing Values. I made many encoding.My RF Regressor didn't work.","32f03635":"#Merge Train and Test to evaluate ranges and missing values"}}