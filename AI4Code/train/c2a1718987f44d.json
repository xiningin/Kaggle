{"cell_type":{"c750a8ca":"code","f335e69d":"code","086a8637":"code","5a0422e9":"code","2daaaacd":"code","ad6009ff":"code","a0a49214":"code","dfc3ee56":"code","a386de2c":"code","b79ecc1f":"code","b773e3fc":"code","a09ffb0e":"code","386781c0":"code","8bffd64d":"code","17803df7":"code","d9f6de52":"code","c1b56f3f":"code","68a5f1f2":"code","cd3d4c35":"code","dc1a08ae":"code","b7a0ba8e":"code","77688bb1":"code","5ce35710":"code","c8d6afae":"code","d3a385c3":"code","9d67ef9c":"code","3c4aabf2":"code","93825e31":"code","f5601a87":"code","02d86bbf":"code","e5eba98d":"code","d3e84fae":"code","92f62122":"code","68740d89":"code","3fab3569":"markdown","fec38943":"markdown","69a5ac74":"markdown","42360b66":"markdown","f770d55d":"markdown","f3abad5c":"markdown","1299704d":"markdown","0327f17c":"markdown"},"source":{"c750a8ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f335e69d":"import tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport pandas as pd\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","086a8637":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","5a0422e9":"test.shape","2daaaacd":"test_X = []\n# test_Y = []\n\nfor i in test.values:\n    test_X.append(i.reshape(28,28))\n       \ntest_X = np.array(test_X)\n# test_Y = np.array(test_Y)","ad6009ff":"test_X[0].shape","a0a49214":"test_X = test_X \/ 256\n","dfc3ee56":"test_X[0]","a386de2c":"test_X = test_X.reshape(-1,28,28,1)","b79ecc1f":"test_X.shape","b773e3fc":"train.shape","a09ffb0e":"train.head()","386781c0":"# To show a image\ndef image(t_image,label,index):\n    image_reshaped = t_image.values.reshape(28,28)\n    plt.subplot(3,6,index+1)\n    plt.imshow(image_reshaped,cmap= plt.cm.gray)\n    plt.title(label)\n    \n\nplt.figure(figsize=(18,8))\nsample = train.sample(18).reset_index(drop=True)\n\nfor i,row in sample.iterrows():\n    label = row[\"label\"]\n    img = row.drop(\"label\")\n    image(img,label,i)\n    \n    \nplt.tight_layout()","8bffd64d":"X = []\nY = []\n\nfor i in train.values:\n    X.append(i[1:].reshape(28,28))\n    Y.append(i[0])\n    \nX = np.array(X)\nY = np.array(Y)\n","17803df7":"\nX.shape","d9f6de52":"from sklearn.model_selection import train_test_split \n\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,random_state=42)","c1b56f3f":"X_train = X_train \/ 255\nX_test = X_test \/ 255","68a5f1f2":"X_train.shape","cd3d4c35":"X_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1) ","dc1a08ae":"X_train.shape","b7a0ba8e":"model = keras.Sequential()\n\nmodel.add(keras.layers.Conv2D(input_shape=(28,28,1),filters=16,kernel_size=(5,5)))\nmodel.add(keras.layers.MaxPool2D((2,2)))\nmodel.add(keras.layers.Conv2D(filters=32,kernel_size=(5,5),padding = 'same',activation='relu'))\nmodel.add(keras.layers.MaxPool2D((2,2)))\nmodel.add(keras.layers.Conv2D(filters=32,kernel_size=(5,5),padding = 'same',activation='relu'))\nmodel.add(keras.layers.MaxPool2D((2,2)))\nmodel.add(keras.layers.Dropout(0.25))\n\nmodel.add(keras.layers.Conv2D(filters=64 ,kernel_size=(3,3),padding = 'same',activation='relu'))\nmodel.add(keras.layers.MaxPool2D((2,2)))\nmodel.add(keras.layers.Dropout(0.25))\n          \nmodel.add(keras.layers.Flatten())\n\nmodel.add(keras.layers.Dense(300,activation= keras.activations.relu))\nmodel.add(keras.layers.Dropout(0.10))\nmodel.add(keras.layers.Dense(100,activation= keras.activations.relu))\nmodel.add(keras.layers.Dropout(0.15))\nmodel.add(keras.layers.Dense(10,activation= keras.activations.softmax))","77688bb1":"model.compile(optimizer=keras.optimizers.Adam(lr = 0.001),loss=keras.losses.sparse_categorical_crossentropy,metrics=[\"accuracy\"])\n\nhistory = model.fit(X_train,Y_train,batch_size=250,epochs=10)","5ce35710":"pd.DataFrame(history.history).plot(figsize=(8, 5))\nplt.grid(True)\nplt.gca().set_ylim(0, 1) # set the vertical range to [0-1]\nplt.show()","c8d6afae":"prob =model.evaluate(X_test,Y_test)","d3a385c3":" model.save(\"first.h5\")","9d67ef9c":"from sklearn.metrics import confusion_matrix\n\nt_pred = model.predict(X_test)\nt_pred_classes = np.argmax(t_pred,axis=1)\nt_pred_classes[:5]\nY_test[:5]  \ncon_matrix = confusion_matrix(Y_test,t_pred_classes)","3c4aabf2":"import seaborn as sns\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(con_matrix, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","93825e31":"pred = model.predict(test_X)\npred_classes = np.argmax(pred,axis=1)\n","f5601a87":"res = pd.Series(pred_classes,name=\"Label\")\nres.shape","02d86bbf":"ingId = pd.Series(range(1,28001),name=\"ImageId\")\ningId.shape","e5eba98d":"submission = pd.concat([ingId,res],axis=1)\n","d3e84fae":"submission.info()","92f62122":"submission.head(5)","68740d89":"submission.to_csv(\"submission.csv\",index=False)","3fab3569":"# Feature Scale","fec38943":"## Reshaping test csv","69a5ac74":"# **Import**","42360b66":"## Scaling Test csv","f770d55d":"## Pre Processing Test CSV","f3abad5c":"# Visualise","1299704d":"# Importing dataset from Kaggle","0327f17c":"# Reshaping to numpy array"}}