{"cell_type":{"e50de102":"code","1593765b":"code","0251cb0f":"code","6d8433d2":"code","366ad5c6":"code","fbda6541":"code","b2e6fe65":"code","398125bd":"code","3a4b0ce1":"code","d849b400":"code","7d4c6124":"code","0d7de357":"code","3c6c8661":"code","113f0f79":"code","ccf5e85e":"code","8c4fa878":"code","a5997847":"code","243b5c82":"code","4ce29adf":"code","ed672798":"code","d6558c29":"code","767abe21":"code","14a79737":"code","e3b2592f":"code","03754685":"code","b77e61b0":"code","b17dabd8":"code","64b2a32d":"code","c5552bd5":"code","38329eff":"code","b2879d56":"code","faf8ecc7":"code","6421e2eb":"code","961d686b":"code","6079b6d5":"code","299012d6":"code","e42e8268":"code","03510eac":"code","717d843f":"markdown","fa7e24c9":"markdown","3825b96c":"markdown"},"source":{"e50de102":"import os\nprint(os.listdir(\"..\/input\/ckplus\/ck\/CK+48\"))","1593765b":"\nimageSize=80\ntest_dir = '..\/input\/ckplus\/ck\/CK+48\/'\n\n# ['DME', 'CNV', 'NORMAL', '.DS_Store', 'DRUSEN']\nfrom tqdm import tqdm\ndef get_data(folder):\n    \"\"\"\n    Load the data and labels from the given folder.\n    \"\"\"\n    X = []\n    y = []\n    for folderName in os.listdir(folder):\n        if not folderName.startswith('.'):\n            if folderName in ['disgust']:\n                label = 0\n            elif folderName in ['anger']:\n                label = 1\n            elif folderName in ['sadness']:\n                label = 2\n            elif folderName in ['surprise']:\n                label = 3\n            elif folderName in ['contempt']:\n                label = 4\n            elif folderName in ['fear']:\n                label = 5\n            elif folderName in ['fear']:\n                 label = 6\n            else:\n                label = 7\n\n            for image_filename in tqdm(os.listdir(folder + folderName)):\n                img_file = cv2.imread(folder + folderName + '\/' + image_filename)\n                if img_file is not None:\n                    img_file = skimage.transform.resize(img_file, (imageSize, imageSize, 1))\n                    img_arr = np.asarray(img_file)\n                    X.append(img_arr)\n                    y.append(label)\n    X = np.asarray(X) # Keras only accepts data as numpy arrays \n    y = np.asarray(y)\n    return X,y\nX_test, y_test = get_data(test_dir) # Un-comment to use full dataset: Step 1 of 2\n#X_test, y_test= get_data(train_dir)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_test, y_test, test_size=0.2) # comment this ligne  to use full dataset: Step 2 of 2\n","0251cb0f":"y_train.shape","6d8433d2":"import os\nfrom glob import glob\nimport matplotlib.pyplot as plt\nimport random\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport zlib\nimport itertools\nimport sklearn\nimport itertools\nimport scipy\nimport skimage\nfrom skimage.transform import resize\nimport csv\nfrom tqdm import tqdm\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split, learning_curve,KFold,cross_val_score,StratifiedKFold\nfrom sklearn.utils import class_weight\nfrom sklearn.metrics import confusion_matrix\nimport keras\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D, Lambda, MaxPool2D, BatchNormalization\nfrom keras.utils import np_utils\nfrom keras.utils.np_utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import models, layers, optimizers\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.utils import class_weight\nfrom keras.optimizers import SGD, RMSprop, Adam, Adagrad, Adadelta, RMSprop\nfrom keras.models import Sequential, model_from_json\nfrom keras.layers import Activation,Dense, Dropout, Flatten, Conv2D, MaxPool2D,MaxPooling2D,AveragePooling2D, BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau, ModelCheckpoint\nfrom keras import backend as K\nfrom keras.applications.vgg16 import VGG16\nfrom keras.models import Model\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.applications.resnet50 import ResNet50\n\n","366ad5c6":"data_path = '..\/input\/ckplus\/ck\/CK+48'\nlabels = os.listdir('..\/input\/ckplus\/ck\/CK+48')\ntrain_datagen = ImageDataGenerator(samplewise_center=True, \n                              samplewise_std_normalization=True, \n                              horizontal_flip = True, \n                              vertical_flip = False, \n                              height_shift_range= 0.05, \n                              width_shift_range=0.1, \n                              rotation_range=15, \n                              zoom_range=0.15,\n                              validation_split=0.1)\n","fbda6541":"IMG_SIZE = 224\nbatch_size = 36\ntrain_data_dir = '..\/input\/ckplus\/ck\/CK+48'\nvalidation_data_dir = '..\/input\/ckplus\/ck\/CK+48'\ntrain_generator = train_datagen.flow_from_directory(\n    train_data_dir,\n    target_size=(IMG_SIZE , IMG_SIZE),\n    batch_size=36,\n    subset='training',\n    class_mode='categorical')\nvalid_X, valid_Y = next(train_datagen.flow_from_directory(\n    train_data_dir,\n    target_size=(IMG_SIZE , IMG_SIZE),\n    batch_size=94,\n    subset='validation',\n    class_mode='categorical'))","b2e6fe65":"t_x, t_y = next(train_generator)\nfig, m_axs = plt.subplots(4, 4, figsize = (16, 16))\nfor (c_x, c_y, c_ax) in zip(t_x, t_y, m_axs.flatten()):\n    c_ax.imshow(c_x[:,:,0], cmap = 'bone')\n    c_ax.set_title(', '.join([n_class for n_class, n_score in zip(labels, c_y) \n                             if n_score>0.5]))\n    c_ax.axis('off')","398125bd":"input_shape=( 224, 224, 3)\n\n\n\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (5, 5), input_shape=input_shape, padding='same', activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(4, 4)))\n\nmodel.add(Conv2D(412, (5, 5), padding='same', activation = 'relu'))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\n\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(7, activation = 'softmax'))\n\n\n# Classification\n# model.add(Flatten())\n# model.add(Dense(64))\n# model.add(Activation('relu'))\n# model.add(Dropout(0.5))\n# model.add(Dense(num_classes))\n# model.add(Activation('softmax'))\n\n#Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam',metrics=[\"accuracy\"])","3a4b0ce1":"history = model.fit_generator(train_generator, \n                                  steps_per_epoch=887\/36,\n                                  validation_data = (valid_X,valid_Y), \n                                  epochs = 50\n                                  )","d849b400":"score = model.evaluate(valid_X,valid_Y, verbose=0)\nprint('\\n Model accuracy ON TEST SET :', score[1], '\\n')\n ","7d4c6124":"labelsFaces =['disgust', 'anger', 'sadness', 'surprise', 'contempt', 'fear', 'happy']\n\n\npredictedExpression = model.predict(valid_X)\n\nfigure = plt.figure(figsize=(20, 8))\n\nfor i, index in enumerate(np.random.choice(valid_X.shape[0], size=25, replace=False)):\n    ax = figure.add_subplot(5, 5, i + 1, xticks=[], yticks=[])\n    # Display each image\n    ax.imshow(np.squeeze(valid_X[index]))\n    predict_index = np.argmax(predictedExpression[index])\n    true_index = np.argmax(valid_Y[index])\n    # Set the title for each image\n    ax.set_title(\"{} ({})\".format(labelsFaces[predict_index], \n                                  labelsFaces[true_index]),\n                                  color=(\"green\" if predict_index == true_index else \"red\"))\nplt.show()\n","0d7de357":"print(os.listdir(\"..\/input\/jaffefacialexpression\/jaffe\/jaffe\"))","3c6c8661":"data_path = '..\/input\/jaffefacialexpression\/jaffe\/jaffe'\ndata_dir_list = os.listdir(data_path)\n\nimg_rows=256\nimg_cols=256\nnum_channel=1\n\nnum_epoch=10\n\nimg_data_list=[]\n\n\nfor dataset in data_dir_list:\n    img_list=os.listdir(data_path+'\/'+ dataset)\n    print ('Loaded the images of dataset-'+'{}\\n'.format(dataset))\n    for img in img_list:\n        input_img=cv2.imread(data_path + '\/'+ dataset + '\/'+ img )\n        #input_img=cv2.cvtColor(input_img, cv2.COLOR_BGR2GRAY)\n        input_img_resize=cv2.resize(input_img,(224,224))\n        img_data_list.append(input_img_resize)\n        \nimg_data = np.array(img_data_list)\nimg_data = img_data.astype('float32')\nimg_data = img_data\/255\nimg_data.shape","113f0f79":"num_classes = 7\n\nnum_of_samples = img_data.shape[0]\nlabels = np.ones((num_of_samples,),dtype='int64')\n\nlabels[0:29]=0 #30\nlabels[30:58]=1 #29\nlabels[59:90]=2 #32\nlabels[91:121]=3 #31\nlabels[122:151]=4 #30\nlabels[152:182]=5 #31\nlabels[183:]=6 #30\n\nnames = ['ANGRY','DISGUST','FEAR','HAPPY','NEUTRAL','SAD','SURPRISE']\n\ndef getLabel(id):\n    return ['ANGRY','DISGUST','FEAR','HAPPY','NEUTRAL','SAD','SURPRISE'][id]","ccf5e85e":"Y = np_utils.to_categorical(labels, num_classes)\nfrom sklearn.utils import shuffle\n\n#Shuffle the dataset\nx,y = shuffle(img_data,Y, random_state=2)\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=2)\nx_test=X_test\n#X_train=X_train.reshape(X_train.shape[0],128,128,1)\n#X_test=X_test.reshape(X_test.shape[0],128,128,1)","8c4fa878":"X_train.shape","a5997847":"from keras.models import Sequential\nfrom keras.layers import Dense , Activation , Dropout ,Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.metrics import categorical_accuracy\nfrom keras.models import model_from_json\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.optimizers import *\nfrom keras.layers.normalization import BatchNormalization","243b5c82":"input_shape=(224,224,3)\n\nmodel = Sequential()\n\nmodel.add(Conv2D(6, (5, 5), input_shape=input_shape, padding='same', activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(258, activation = 'relu'))\nmodel.add(Dense(128, activation = 'relu'))\n\nmodel.add(Dropout(0.6))\nmodel.add(Dense(7, activation = 'softmax'))\n\n \n#Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop',metrics=[\"accuracy\"])\nmodel.summary()\nmodel.get_config()\nmodel.layers[0].get_config()\nmodel.layers[0].input_shape\nmodel.layers[0].output_shape\nmodel.layers[0].get_weights()\nnp.shape(model.layers[0].get_weights()[0])\nmodel.layers[0].trainable","4ce29adf":"from keras import callbacks\nfilename='model1_train_new.csv'\nfilepath=\"Best-weights-my_model-{epoch:03d}-{loss:.4f}-{acc:.4f}.hdf5\"\n\ncsv_log=callbacks.CSVLogger(filename, separator=',', append=False)\ncheckpoint = callbacks.ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\ncallbacks_list = [csv_log,checkpoint]\ncallbacks_list = [csv_log]","ed672798":"hist = model.fit(X_train, y_train, batch_size=4, epochs=50, verbose=1, validation_data=(X_test, y_test),callbacks=callbacks_list)","d6558c29":"# visualizing losses and accuracy\n%matplotlib inline\n\ntrain_loss=hist.history['loss']\nval_loss=hist.history['val_loss']\ntrain_acc=hist.history['acc']\nval_acc=hist.history['val_acc']\n\nepochs = range(len(train_acc))\n\nplt.plot(epochs,train_loss,'r', label='train_loss')\nplt.plot(epochs,val_loss,'b', label='val_loss')\nplt.title('train_loss vs val_loss')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs,train_acc,'r', label='train_acc')\nplt.plot(epochs,val_acc,'b', label='val_acc')\nplt.title('train_acc vs val_acc')\nplt.legend()\nplt.figure()","767abe21":"input_shape=(224,224,3)\n\nmodel = Sequential()\n\nmodel.add(Conv2D(6, (5, 5), input_shape=input_shape, padding='same', activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(16, (5, 5), padding='same', activation = 'relu'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dropout(0.6))\nmodel.add(Dense(7, activation = 'softmax'))\n\n\n \nmodel.compile(loss='categorical_crossentropy', optimizer='adam',metrics=[\"accuracy\"])","14a79737":"model.summary()\nmodel.get_config()\nmodel.layers[0].get_config()\nmodel.layers[0].input_shape\nmodel.layers[0].output_shape\nmodel.layers[0].get_weights()\nnp.shape(model.layers[0].get_weights()[0])\nmodel.layers[0].trainable","e3b2592f":"from keras import callbacks\nfilename='model_train_new.csv'\nfilepath=\"Best-weights-my_model-{epoch:03d}-{loss:.4f}-{acc:.4f}.hdf5\"\n\ncsv_log=callbacks.CSVLogger(filename, separator=',', append=False)\ncheckpoint = callbacks.ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\ncallbacks_list = [csv_log,checkpoint]\ncallbacks_list = [csv_log]","03754685":"hist = model.fit(X_train, y_train, batch_size=4, epochs=50, verbose=1, validation_data=(X_test, y_test),callbacks=callbacks_list)","b77e61b0":"#Model Save\nmodel.save_weights('model_weights.h5')\nmodel.save('model_keras.h5')\n\n","b17dabd8":"# visualizing losses and accuracy\n%matplotlib inline\n\ntrain_loss=hist.history['loss']\nval_loss=hist.history['val_loss']\ntrain_acc=hist.history['acc']\nval_acc=hist.history['val_acc']\n\nepochs = range(len(train_acc))\n\nplt.plot(epochs,train_loss,'r', label='train_loss')\nplt.plot(epochs,val_loss,'b', label='val_loss')\nplt.title('train_loss vs val_loss')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs,train_acc,'r', label='train_acc')\nplt.plot(epochs,val_acc,'b', label='val_acc')\nplt.title('train_acc vs val_acc')\nplt.legend()\nplt.figure()","64b2a32d":"# Evaluating the model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test Loss:', score[0])\nprint('Test accuracy:', score[1])\n\ntest_image = X_test[0:1]\nprint (test_image.shape)\n\nprint(model.predict(test_image))\nprint(model.predict_classes(test_image))\nprint(y_test[0:1])\n\nres = model.predict_classes(X_test[9:18])\nplt.figure(figsize=(10, 10))\n\nfor i in range(0, 9):\n    plt.subplot(330 + 1 + i)\n    plt.imshow(x_test[i],cmap=plt.get_cmap('gray'))\n    plt.gca().get_xaxis().set_ticks([])\n    plt.gca().get_yaxis().set_ticks([])\n    plt.ylabel('prediction = %s' % getLabel(res[i]), fontsize=14)\n# show the plot\nplt.show()","c5552bd5":"from sklearn.metrics import confusion_matrix\nresults = model.predict_classes(X_test)\ncm = confusion_matrix(np.where(y_test == 1)[1], results)\nplt.matshow(cm)\nplt.title('Confusion Matrix')\nplt.colorbar()\nplt.ylabel('True Label')\nplt.xlabel('Predicted Label')\nplt.show()","38329eff":"x_test.shape","b2879d56":"m_samples = X_train.shape[0]\nm_samplesTest = X_test.shape[0]\nX_train1 = X_train.reshape(m_samples, -1)\nX_test1 = X_test.reshape(m_samplesTest, -1)\n ","faf8ecc7":"print('Xtest shape',X_test1.shape)\nprint('X_train1 shape',X_train1.shape)\nprint('y_train shape',y_train.shape)\nprint('y_test shape',y_test.shape)\n\n\n","6421e2eb":"from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\n# Create Decision Tree classifer object\nclf = DecisionTreeClassifier()\n\n# Train Decision Tree Classifer\nclf = clf.fit(X_train1,y_train)\n\n# Model Accuracy, how often is the classifier correct?\ny_pred = clf.predict(X_test1)\nfrom sklearn import metrics #Import scikit-learn metrics module for accuracy calculation\n\n","961d686b":"from sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nprint(\"Decision tree Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint('F1 score : ',f1_score(y_test,y_pred,average=\"weighted\"))\nprint('recall_score : ',recall_score(y_test,y_pred,average=\"weighted\"))\nprint('precision_score : ',precision_score(y_test,y_pred,average=\"weighted\"))","6079b6d5":"from xgboost import XGBClassifier\nclassifierG = XGBClassifier()\nclassifierG.fit(X_train1,y_train)\n# Predicting the Test set results\ny_predXG = classifierG.predict(X_test1)\n\n","299012d6":"from sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nprint(\"XGBOOST  Accuracy ON JAFFE data:\",metrics.accuracy_score(y_test, y_pred))\nprint('F1 score : ',f1_score(y_test,y_pred,average=\"weighted\"))\nprint('recall_score : ',recall_score(y_test,y_pred,average=\"weighted\"))\nprint('precision_score : ',precision_score(y_test,y_pred,average=\"weighted\"))","e42e8268":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train1,y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test1)\n","03510eac":"from sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nprint(\"SVM  Accuracy ON JAFFE data:\",metrics.accuracy_score(y_test, y_pred))\nprint('F1 score : ',f1_score(y_test,y_pred,average=\"weighted\"))\nprint('recall_score : ',recall_score(y_test,y_pred,average=\"weighted\"))\nprint('precision_score : ',precision_score(y_test,y_pred,average=\"weighted\"))","717d843f":"**Second architecture**","fa7e24c9":"Existing model is forked From [https:\/\/github.com\/ashishpatel26\/Facial-Expression-Recognization-using-JAFFE](http:\/\/) . But I have removed the labeling error and changed the CNN Model .  I have also updated the existing model that gives better accuracy than previous.","3825b96c":"Data augmentation experiment"}}