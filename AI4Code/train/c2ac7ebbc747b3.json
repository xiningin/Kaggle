{"cell_type":{"bb73a487":"code","4d47067c":"code","04d94948":"code","0780ab14":"code","3bc21664":"code","76f8bb8f":"code","710b6f48":"code","d093891b":"code","b2e05494":"code","77763e27":"code","bd028cfb":"code","d7a53a4f":"code","cecdf28f":"code","84c1795f":"code","5a858fc4":"code","c49cb499":"code","f78f9570":"code","b46e463c":"code","bad011d6":"code","a4448409":"code","699ad73d":"code","917c7c7d":"code","65cb99d4":"code","5c50c5ea":"code","8cef4086":"code","9a273117":"code","02222199":"code","12829fed":"code","0ce95a35":"code","58732eb7":"code","d6672f28":"code","9bf407a0":"code","df786223":"code","41ac9247":"code","bef524e3":"code","42f860a7":"code","a4543065":"code","a3f2df78":"code","34b66ad4":"code","84ea679f":"code","03633ae6":"code","b7597bf8":"code","27a16503":"code","6b011dcf":"code","057d70eb":"code","305eadf5":"code","b91971eb":"code","1a298178":"code","60805eab":"code","c07d43e6":"code","4b352581":"code","7f102a1a":"code","d81b3467":"code","2d035b5c":"code","b4af7636":"code","c67d67d9":"code","28109738":"code","c7f6a1c7":"code","11da6b42":"code","d1f986ff":"code","71dc4526":"code","8880dbf1":"code","a56a13cd":"code","8c9a6ac1":"code","3ce00e86":"code","6e5ba2fc":"code","41bcf24c":"code","87feb5eb":"code","d1c74886":"code","e1b2ba51":"code","f728e7a7":"code","a72f5647":"code","c6179236":"code","a6dad41d":"code","c40b337e":"code","38732712":"code","1c0d6c74":"code","df8f5b88":"code","d2c89a0b":"code","660a1b22":"code","b2a08202":"code","d25689c2":"code","68920d1c":"code","7b607f69":"code","c86f68dd":"code","26679a26":"code","65f2a6f8":"code","a0f26aff":"code","2927c7d5":"code","710f048a":"code","43b14a81":"code","353b578f":"code","2d253778":"code","84b84d99":"code","57228319":"code","32ef3bdf":"markdown","c542a4bd":"markdown","434e2ff8":"markdown","4ba1ab17":"markdown","582c88cc":"markdown","59dc7708":"markdown","2e6799b2":"markdown","3fb1cd69":"markdown","ce6e233c":"markdown","406161d3":"markdown","68812f27":"markdown","e04fc747":"markdown","992e0669":"markdown","32ee253f":"markdown","c503cac4":"markdown","34fc6e7e":"markdown","721e946b":"markdown","ae258c7d":"markdown","b788a136":"markdown","31ea3cd8":"markdown","cf5b1bfa":"markdown","2d329bcc":"markdown","97bb2d91":"markdown","1ef3b20a":"markdown","af38508e":"markdown","f457f2a2":"markdown","f52b0a60":"markdown","71d547ee":"markdown","d4d82421":"markdown","27f6dfeb":"markdown","7805f4bd":"markdown","c25ead92":"markdown","54690440":"markdown","dadbb135":"markdown","8ff1a5ec":"markdown","b1c3f846":"markdown","96bfd9c6":"markdown","ed5c8b08":"markdown","5a07b5cf":"markdown","a71fda56":"markdown","679cd1df":"markdown","2d57685e":"markdown","74e1f4b0":"markdown"},"source":{"bb73a487":"import gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm.notebook import tqdm\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nfrom scipy import integrate, optimize\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n\n","4d47067c":"covid_19_india = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\ncovid_19_india.head()","04d94948":"covid_19_india['Date'] = pd.to_datetime(covid_19_india['Date'], dayfirst=True)\nCS_covid = covid_19_india[['Date','State\/UnionTerritory','Cured','Deaths','Confirmed']]\nCS_covid = CS_covid.groupby('Date')[['Confirmed', 'Cured','Deaths']].sum().reset_index()\nCS_covid.tail()","0780ab14":"CS_covid['Active'] = CS_covid['Confirmed'] - CS_covid['Cured'] - CS_covid['Deaths']\nCS_covid['new_case\/day'] = CS_covid['Confirmed'] - CS_covid['Confirmed'].shift(1)\nCS_covid['growth_ratio'] = CS_covid['new_case\/day'] \/ CS_covid['new_case\/day'].shift(1)\nCS_covid['new_case\/day'] = CS_covid['new_case\/day'].replace(np.nan,'0.0')\nCS_covid['growth_ratio'] = CS_covid['growth_ratio'].replace(np.nan,'0.0')","3bc21664":"CS_covid_melt_df = pd.melt(CS_covid, id_vars=['Date'], value_vars=['Confirmed','Active','Cured','new_case\/day','Deaths'])","76f8bb8f":"target_date = CS_covid_melt_df['Date'].max()\nfig = px.line(CS_covid_melt_df, x=\"Date\", y=\"value\", color='variable', \n              title=f'All-India Cases as of {target_date}')\nfig.show()","710b6f48":"fig = px.line(CS_covid_melt_df, x=\"Date\", y=\"value\", color='variable',\n              title=\"All-India Cases Over Time (Log scale)\",\n             log_y=True)\nfig.show()","d093891b":"CS_covid['mortality'] = CS_covid['Deaths'] \/ CS_covid['Confirmed']\n\nfig = px.line(CS_covid, x=\"Date\", y=\"mortality\", \n              title=\"All-India Mortality Rate Over Time\")\nfig.show()","b2e05494":"fig = px.line(CS_covid, x=\"Date\", y=\"growth_ratio\", \n              title=\"All India Growth Factor Over Time\")\nfig.add_trace(go.Scatter(x=[CS_covid['Date'].min(), CS_covid['Date'].max()], y=[1., 1.], name='Growth factor=1.', line=dict(dash='dash', color=('rgb(255, 0, 0)'))))\nfig.update_yaxes(range=[0., 4.])\nfig.show()","77763e27":"covid_19_state = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\ncovid_19_state['Date'] = pd.to_datetime(covid_19_state['Date'], dayfirst=True)\ncovid_19_state = covid_19_state.drop('Sno',axis=1)","bd028cfb":"states = covid_19_state['State\/UnionTerritory'].unique()\nprint(f'There are {len(states)} states data present \\nwhich are as follows: {states}')\n","d7a53a4f":"covid_19_state = covid_19_state.groupby(['Date','State\/UnionTerritory'])[['Confirmed', 'Cured','Deaths']].sum().reset_index()\ncovid_19_state.tail()","cecdf28f":"target_date = covid_19_state['Date'].max()\n\nprint('As per Date:', target_date)\nfor i in [1, 10, 100, 1000, 10000,25000,35000,57000]:\n    n_states = len(covid_19_state.query('(Date == @target_date) & Confirmed > @i'))\n    print(f'{n_states} states have more than {i} confirmed cases')","84c1795f":"top_states_df = covid_19_state.query('(Date == @target_date) & (Confirmed > 35000)').sort_values('Confirmed', ascending=False)\ntop_states_df['Active'] = top_states_df['Confirmed'] - top_states_df['Cured'] - top_states_df['Deaths']\ntop_states_melt_df = pd.melt(top_states_df, id_vars='State\/UnionTerritory', value_vars=['Confirmed','Active', 'Cured','Deaths'])","5a858fc4":"fig = px.bar(top_states_melt_df.iloc[::-1],\n             x='value', y='State\/UnionTerritory', color='variable', barmode='group',\n             title=f'Confirmed\/Cured\/Deaths as on {target_date}', text='value', height=800, orientation='h')\nfig.show()","c49cb499":"top_state_df = covid_19_state.query('(Date == @target_date) & (Confirmed > 35000)')\ntop_state_df['mortality_rate'] = covid_19_state['Deaths'] \/ covid_19_state['Confirmed']\ntop_state_df = top_state_df.sort_values('mortality_rate', ascending=False)","f78f9570":"fig = px.bar(top_state_df[:].iloc[::-1],\n             x='mortality_rate', y='State\/UnionTerritory',\n             title=f'Mortality rate HIGH as on {target_date}', text='mortality_rate', height=500, orientation='h')\nfig.show()","b46e463c":"fig = px.bar(top_state_df[::].iloc[::],\n             x='mortality_rate', y='State\/UnionTerritory',\n             title=f'Lowest Mortality rate states on {target_date}', text='mortality_rate', height=500, orientation='h')\nfig.show()","bad011d6":"covid_19_state_ = covid_19_state.query('Date > \"2020-01-01\"')\ncovid_19_state_['prev_confirmed'] = covid_19_state_.groupby('State\/UnionTerritory')['Confirmed'].shift(1)\ncovid_19_state_['new_case'] = covid_19_state_['Confirmed'] - covid_19_state_['prev_confirmed']\ncovid_19_state_['new_case'].fillna(0, inplace=True)","a4448409":"covid_19_state_['prev_new_case'] = covid_19_state_.groupby('State\/UnionTerritory')['new_case'].shift(1)\ncovid_19_state_['growth_factor'] = covid_19_state_['new_case'] \/ covid_19_state_['prev_new_case']\ncovid_19_state_['growth_factor'].fillna(0, inplace=True)\n","699ad73d":"def find_daily_cases(state):\n    df_cases_state=covid_19_state_[covid_19_state_['State\/UnionTerritory']== state].groupby('Date').sum()\n    daily_cases=[df_cases_state['Confirmed'].iloc[0]]\n    for i in range(1,len(df_cases_state)):\n        daily_cases.append(df_cases_state['Confirmed'].iloc[i]-df_cases_state['Confirmed'].iloc[i-1])\n    df_cases_state['new_case']=daily_cases\n    return df_cases_state","917c7c7d":"def state_wise_patients(name,df):\n    data = df.loc[df['State\/UnionTerritory']==name]\n    df = data[['Confirmed','Cured','new_case','growth_factor','Date','State\/UnionTerritory']]\n#     data = df.groupby('Date')['Confirmed'].nunique()\n    data = data.reset_index()\n    data['Date']=pd.to_datetime(data['Date'],format = '%d\/%m\/%Y')\n    data = data.sort_values(by=['Date'], ascending=True)\n#     data['id'] = data.id.cumsum()\n    return data","65cb99d4":"collection = {}\nfor i in covid_19_state_['State\/UnionTerritory'].unique():\n    collection['patients in '+ str(i)] = state_wise_patients(i,covid_19_state_)","5c50c5ea":"keys = list(collection.keys())","8cef4086":"visible_True=[]\nfor i in range(len(keys)):\n    visible_True.append(True)\ndef t2f(i):\n    visible = []\n    for a in range(len(keys)):\n        if a == i:\n            visible.append(True)\n        else:\n            visible.append(False)\n    return visible","9a273117":"def create_buttons(keys,title):\n    l=[dict(label = 'All',\n                  method = 'update',\n                  args = [{'visible': visible_True},\n                          {'title': title+' India',\n                           'showlegend':True}])]\n    for i in range(len(keys)):\n        l.append(dict(label = keys[i],\n                  method = 'update',\n                  args = [{'visible': t2f(i)}, # the index of True aligns with the indices of plot traces\n                          {'title': title+keys[i].split('in')[1],\n                           'showlegend':True}]))\n    return l","02222199":"\nfig = go.Figure()\nkeys = list(collection.keys())\nfor column in collection:\n    fig.add_trace(\n        go.Line(\n            x = collection[column].Date,\n            y = collection[column].Confirmed,\n            name = column\n        )\n    )\n    \nfig.update_layout(updatemenus=[go.layout.Updatemenu( active=0,buttons=list(create_buttons(keys,'Confirmed Cases:')))])\n\nfig.show()","12829fed":"covid_19_india = pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\")\ndf = covid_19_india\ndf_top_states = df[(df['State\/UnionTerritory']=='Delhi') | (df['State\/UnionTerritory']=='Maharashtra') | (df['State\/UnionTerritory']=='Gujarat') | (df['State\/UnionTerritory']=='Uttar Pradesh') | (df['State\/UnionTerritory']=='Tamil Nadu')]\n\n\ndf_test = pd.read_csv(\"..\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")\ndf_top_states_test=df_test[(df_test['State']=='Delhi') | (df_test['State']=='Maharashtra') | (df_test['State']=='Gujarat') | (df_test['State']=='Uttar Pradesh') | (df_test['State']=='Tamil Nadu')]\n","0ce95a35":"df = df_top_states\ndf_delhi = df[(df['State\/UnionTerritory']=='Delhi')]\nplt.figure(figsize=(8,8))\nplt.plot(df_delhi['Date'],df_delhi['Confirmed'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Confirmed Cases')\nplt.title('Dates V\/S Confirmed Cases')\nax.annotate('Lockdown1', xy =('23\/03\/20',29), xytext=('23\/03\/20',15000),ha='center',\n                arrowprops = dict(facecolor ='Green',shrink = 10.05),) \nax.annotate('Lockdown 2', xy =('15\/04\/20',1561), xytext=('15\/04\/20',25000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('04\/05\/20',4549), xytext=('04\/05\/20',35000),ha='center', \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('18\/05\/20',10054), xytext=('18\/05\/20',45000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('08\/06\/20',27654), xytext=('08\/06\/20',5000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),)\n\n\ndf_test = df_top_states_test\ndf_delhi_test=df_test[(df_test['State']=='Delhi')]\nplt.figure(figsize=(8,8))\nplt.plot(df_delhi_test['Date'],df_delhi_test['TotalSamples'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Total Samples')\nplt.title('Dates V\/S Total Samples')\nax.annotate('Lockdown 2', xy =('2020-04-15',16605), xytext=('2020-04-15',55000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('2020-05-04',64108), xytext=('2020-05-04',15000),ha='center', \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('2020-05-18',139727), xytext=('2020-05-18',185000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('2020-06-08',255615), xytext=('2020-06-08',200000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),) ","58732eb7":"fig = go.Figure()\nkeys = list(collection.keys())\nfor column in collection:\n    fig.add_trace(\n        go.Line(\n            x = collection[column].Date,\n            y = collection[column].Deaths,\n            name = column\n        )\n    )\n    \nfig.update_layout(updatemenus=[go.layout.Updatemenu( active=0,buttons=list(create_buttons(keys,'Death Cases: ')))])\n\n\nfig.show()","d6672f28":"fig = go.Figure()\nkeys = list(collection.keys())\nfor column in collection:\n    fig.add_trace(\n        go.Line(\n            x = collection[column].Date,\n            y = collection[column].Cured,\n            name = column\n        )\n    )\n    \nfig.update_layout(updatemenus=[go.layout.Updatemenu( active=0,buttons=list(create_buttons(keys,'Cured Cases:')))])\n\n\nfig.show()","9bf407a0":"fig = go.Figure()\nkeys = list(collection.keys())\nfor column in collection:\n    fig.add_trace(\n        go.Line(\n            x = collection[column].Date,\n            y = collection[column].new_case,\n            name = column\n        )\n    )\n    \nfig.update_layout(updatemenus=[go.layout.Updatemenu( active=0,buttons=list(create_buttons(keys,'New case per Day:')))])\n\n\nfig.show()","df786223":"fig = px.line(covid_19_state_,\n              x='Date', y='growth_factor', color='State\/UnionTerritory',\n              title=f'Growth factor by state in INDIA')\nfig.add_trace(go.Scatter(x=[covid_19_state_['Date'].min(), covid_19_state_['Date'].max()], y=[1., 1.],\n                         name='Growth factor=1.', line=dict(dash='dash', color=('rgb(255, 0, 0)'))))\nfig.update_yaxes(range=[0., 15.])\nfig.show()","41ac9247":"df1 = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\ndf1","bef524e3":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = df1.AgeGroup\nvalues = df1.TotalCases\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'xy'}, {'type':'domain'}]])\nfig.add_trace(go.Bar(x=labels, y=values, name=\"bar\",marker = dict(color = 'rgba(0, 174, 174, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = labels),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=values, name=\"patients\"),\n              1, 2)\n\n\nfig.update_layout(\n    title_text=\"Covid-19 Age group details \")\nfig.show()","42f860a7":"df_indi = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')\ndf_indi.dropna(subset=['current_status', 'age'], inplace=True)\ndf_indi.reset_index(drop=True, inplace=True)","a4543065":"df_indi['current_status'].unique(), df_indi.shape","a3f2df78":"df1_indians = df_indi[df_indi['current_status'] == 'Deceased']\ndf2_indians = df_indi[df_indi['current_status'] == 'Hospitalized']\ndf3_indians = df_indi[df_indi['current_status'] == 'Recovered']\n\nfig = go.Figure()\nfig.add_trace(go.Box(y=df1_indians['age'], name=\"Deceased Patients\"))\nfig.add_trace(go.Box(y=df2_indians['age'], name=\"Hospitalized Patients\"))\nfig.add_trace(go.Box(y=df3_indians['age'], name=\"Recovered Patients\"))\nfig.update_layout(title_text='Indian COVID-19 Patients Outcome Age-Wise')\nfig.show()","34b66ad4":"testingIndia = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\n# testingIndia.dtypes","84ea679f":"testingIndia['Date'] = pd.to_datetime(testingIndia['Date'])\n# testingIndia['Negative'] = pd.to_numeric(testingIndia['Negative'],errors='ignore')","03633ae6":"testingIndia_ = testingIndia.groupby(['Date']).sum().reset_index()\ntestingIndia_","b7597bf8":"testingIndia_melt_df = pd.melt(testingIndia_, id_vars=['Date'], value_vars=['TotalSamples','Positive'])","27a16503":"target_date = testingIndia_melt_df['Date'].max()\nfig = px.line(testingIndia_melt_df, x=\"Date\", y=\"value\", color='variable', \n              title=f'All-India testing Over Time {target_date}')\nfig.update_layout(yaxis_type=\"log\")\nfig.show()","6b011dcf":"testingIndia_state = testingIndia.groupby(['Date','State'])['TotalSamples','Positive'].sum().reset_index()\ntestingIndia_state.tail()\n\ntestingIndia_state_ = testingIndia_state.query('Date > \"2020-01-01\"')\nfig = px.line(testingIndia_state_,\n              x='Date', y='TotalSamples', color='State',\n              title=f'TotalSamples by state in INDIA, as of {target_date}')\nfig.show()","057d70eb":"df = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\ndf =df.fillna(0)\ndf['total_Beds'] = df['NumUrbanBeds_NHP18'] + df['NumRuralBeds_NHP18'] + df['NumPublicBeds_HMIS'] \ndf['total_Hospitals'] = df['NumUrbanHospitals_NHP18'] + df['NumRuralHospitals_NHP18'] + df['NumSubDistrictHospitals_HMIS'] + df['NumDistrictHospitals_HMIS']\ndf.index=df['State\/UT']\ndf = df.drop(columns=['Sno','State\/UT'])","305eadf5":"df1 = pd.read_csv('..\/input\/covid19-in-india\/population_india_census2011.csv')\ndf1 = df1.sort_values(by='State \/ Union Territory')\ndf1 = df1.reset_index()\ndf1.index = df1['State \/ Union Territory']\ndf1 = df1.drop(columns=['index','Sno','State \/ Union Territory'])\nfrom IPython.display import display, HTML\n# display(HTML(df1.to_html()))","b91971eb":"df.index.values[0] = df1.index.values[0]\ndf.index.values[-5] = df1.index.values[-5]\ndf.index.values[14] = df1.index.values[13]","1a298178":"df['Population'] = df1['Population']\ndf['Rural population'] = df1['Rural population']\ndf['Urban population'] = df1['Urban population']\ndf = df.drop(['Dadra & Nagar Haveli','Daman & Diu'],axis=0)","60805eab":"df['NumPrimaryHealthCenters_HMIS'] = pd.to_numeric(df['NumPrimaryHealthCenters_HMIS'],errors='coerce')\ndf['NumCommunityHealthCenters_HMIS'] = pd.to_numeric(df['NumCommunityHealthCenters_HMIS'],errors='coerce')\ndf['TotalPublicHealthFacilities_HMIS'] = pd.to_numeric(df['TotalPublicHealthFacilities_HMIS'],errors='coerce')","c07d43e6":"df['total_Rural_Hospitals'] = df['NumRuralHospitals_NHP18'] + df['NumSubDistrictHospitals_HMIS'] + df['NumDistrictHospitals_HMIS'] \ndf['total_Rural_Beds'] = df['NumRuralBeds_NHP18'] + df['NumPublicBeds_HMIS'] \ndf['total_Urban_Hospitals'] =  df['NumUrbanHospitals_NHP18'] + df['NumSubDistrictHospitals_HMIS'] + df['NumDistrictHospitals_HMIS']\ndf['total_Urban_Beds'] = df['NumUrbanBeds_NHP18'] + df['NumPublicBeds_HMIS'] \ndf['total_medical_centres'] = df['NumPrimaryHealthCenters_HMIS'] + df['NumCommunityHealthCenters_HMIS'] + df['TotalPublicHealthFacilities_HMIS']","4b352581":"df[\"Hospitals (per 100000)\"]= np.round(100000*df[\"total_Hospitals\"]\/df[\"Population\"],2)\ndf[\"Beds (per 100000)\"]= np.round(100000*df[\"total_Beds\"]\/df[\"Population\"],2)\ndf[\"rural Hospitals (per 100000)\"]= np.round(100000*df[\"total_Rural_Hospitals\"]\/df[\"Rural population\"],2)\ndf[\"rural Beds (per 100000)\"]= np.round(100000*df[\"total_Rural_Beds\"]\/df[\"Rural population\"],2)\ndf[\"Urban Hospitals (per 100000)\"]= np.round(100000*df[\"total_Urban_Hospitals\"]\/df[\"Urban population\"],2)\ndf[\"Urban Beds (per 100000)\"]= np.round(100000*df[\"total_Urban_Beds\"]\/df[\"Urban population\"],2)","7f102a1a":"df = df[['total_Rural_Beds','total_Urban_Hospitals','total_Urban_Beds','total_medical_centres','Hospitals (per 100000)','Beds (per 100000)'\n    ,'rural Hospitals (per 100000)','rural Beds (per 100000)','Urban Hospitals (per 100000)','Urban Beds (per 100000)']]","d81b3467":"df_india = covid_19_india.sort_index()\ndf_india","2d035b5c":"df_india = df_india.groupby('State\/UnionTerritory').sum()","b4af7636":"df['confirmed'] = df_india['Confirmed']\ndf['recovered'] = df_india['Cured']\ndf['deaths'] = df_india['Deaths']","c67d67d9":"df = df.sort_values('confirmed',ascending=False)","28109738":"df.style.background_gradient(cmap='Blues',subset=[\"Beds (per 100000)\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Urban Hospitals (per 100000)\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"rural Hospitals (per 100000)\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"rural Beds (per 100000)\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Urban Beds (per 100000)\"])\\\n                        .background_gradient(cmap='Oranges',subset=[\"Hospitals (per 100000)\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"confirmed\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"deaths\"])\\\n                        .background_gradient(cmap='Oranges',subset=[\"recovered\"])\\","c7f6a1c7":"import plotly.graph_objects as go\n\n\nfig = go.Figure(data=go.Heatmap(\n                   z=df.corr(),\n                   x=df.columns.values,\n                   y=df.columns.values,\n                   hoverongaps = False),\n               layout=go.Layout(height=600, width=900))\nfig.show()","11da6b42":"covid_19_ = covid_19_state.copy()\ncovid_19_.rename(columns = {'State\/UnionTerritory':'State_name'}, inplace = True)\ncolumns = covid_19_.sort_values('Confirmed', ascending=False).iloc[:]['State_name'].unique()[:5]","d1f986ff":"def sigmoid(t, M, beta, alpha, offset=0):\n    alpha += offset\n    return M \/ (1 + np.exp(-beta * (t - alpha)))\n\ndef error(x, y, params):\n    M, beta, alpha = params\n    y_pred = sigmoid(x, M, beta, alpha)\n\n    # apply weight, latest number is more important than past.\n    weight = np.arange(len(y_pred)) ** 2\n    loss_mse = np.mean((y_pred - y) ** 2 * weight)\n    return loss_mse\n\ndef gen_random_color(min_value=0, max_value=256) -> str:\n    \"\"\"Generate random color for plotly\"\"\"\n    r, g, b = np.random.randint(min_value, max_value, 3)\n    return f'rgb({r},{g},{b})'","71dc4526":"def fit_sigmoid(exclude_days=0):\n    target_country_df_list = []\n    pred_df_list = []\n    for target_country in columns:\n        print('target_country', target_country)\n        # --- Train ---\n        target_country_df = covid_19_.query('State_name == @target_country')\n\n        #train_start_date = target_country_df['date'].min()\n        train_start_date = target_country_df.query('Confirmed > 1')['Date'].min()\n        train_end_date = pd.to_datetime(target_date) - pd.Timedelta(f'{exclude_days} days')\n#         print(train_start_date)\n#         print(train_end_date)\n        target_date_df = target_country_df.query('(Date >= @train_start_date) & (Date <= @train_end_date)')\n        if len(target_date_df) <= 7:\n            print('WARNING: the data is not enough, use 7 more days...')\n            train_start_date -= pd.Timedelta('7 days')\n            target_date_df = target_country_df.query('(Date >= @train_start_date) & (Date <= @train_end_date)')\n\n        confirmed = target_date_df['Confirmed'].values\n        x = np.arange(len(confirmed))\n\n        lossfun = lambda params: error(x, confirmed, params)\n        res = sp.optimize.minimize(lossfun, x0=[np.max(confirmed) * 5, 0.04, 2 * len(confirmed) \/ 3.], method='nelder-mead')\n        M, beta, alpha = res.x\n#         sigmoid_models[key] = (M, beta, alpha)\n#         np.clip(sigmoid(list(range(len(data), len(data) + steps)), M, beta, alpha), 0, None).astype(int)\n\n        # --- Pred ---\n        pred_start_date = target_country_df['Date'].min()\n        pred_end_date = pd.to_datetime('2020-10-01')\n        days = int((pred_end_date - pred_start_date) \/ pd.Timedelta('1 days'))\n        print('pred start', pred_start_date, 'end', pred_end_date, 'days', days)\n\n        x = np.arange(days)\n        offset = (train_start_date - pred_start_date) \/ pd.Timedelta('1 days')\n        print('train_start_date', train_start_date, 'offset', offset, 'params', M, beta, alpha)\n        y_pred = sigmoid(x, M, beta, alpha, offset=offset)\n#         print(y_pred)\n#         target_country_df['confirmed_pred'] = y_pred\n\n        all_dates = [pred_start_date + np.timedelta64(x, 'D') for x in range(days)]\n        pred_df = pd.DataFrame({\n            'date': all_dates,\n            'country': target_country,\n            'confirmed_pred': y_pred,\n        })\n\n        target_country_df_list.append(target_country_df)\n        pred_df_list.append(pred_df)\n#         print('*fineshed*')\n    return target_country_df_list, pred_df_list","8880dbf1":"def plot_sigmoid_fitting(target_country_df_list, pred_df_list, title=''):\n    n_countries = len(columns)\n\n    # --- Plot ---\n    fig = go.Figure()\n\n    for i in range(n_countries):\n        target_country = columns[i]\n        target_country_df = target_country_df_list[i]\n        pred_df = pred_df_list[i]\n        color = gen_random_color(min_value=20)\n        # Prediction\n        fig.add_trace(go.Scatter(\n            x=pred_df['date'], y=pred_df['confirmed_pred'],\n            name=f'{target_country}_pred',\n            line=dict(color=color, dash='dash')\n        ))\n\n        # Ground truth\n        fig.add_trace(go.Scatter(\n            x=target_country_df['Date'], y=target_country_df['Confirmed'],\n            mode='markers', name=f'{target_country}_actual',\n            line=dict(color=color),\n        ))\n    fig.update_layout(\n        title=title, xaxis_title='Date', yaxis_title='Confirmed cases')\n    fig.show()","a56a13cd":"target_states_df_list, pred_df_list = fit_sigmoid(exclude_days=0)","8c9a6ac1":"plot_sigmoid_fitting(target_states_df_list, pred_df_list, title='Sigmoid fitting with all latest data')","3ce00e86":"target_states_df_list, pred_df_list = fit_sigmoid(exclude_days=14)","6e5ba2fc":"plot_sigmoid_fitting(target_states_df_list, pred_df_list, title='Sigmoid fitting without last 14days data')","41bcf24c":"import pandas as pd\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import minimize\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.metrics import accuracy_score","87feb5eb":"df_india = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\n","d1c74886":"# df_IndividualDetails = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')\n# df_IndividualDetails","e1b2ba51":"df_india['Date'] = pd.to_datetime(df_india['Date'], dayfirst=True)\ndf_india = df_india[['Date','State\/UnionTerritory','Cured','Deaths','Confirmed']]\ndf_india = df_india.groupby('Date')[['Confirmed', 'Cured','Deaths']].sum().reset_index()\ndf_india.tail()","f728e7a7":"df_india['Active Cases'] = df_india['Confirmed'] - df_india['Cured'] - df_india['Deaths']\ndf_india['Recovered'] = df_india['Cured'] + df_india['Deaths']\ndf_india.tail(3)","a72f5647":"dbd_prelockdown = df_india[(df_india['Date']>'2020-03-2') & (df_india['Date']<'2020-03-25')].reset_index(drop=True) # considering pre lockdown period\ndbd_prelockdown.head(2)","c6179236":"dbd_from_lockdown = df_india[(df_india['Date']>='2020-03-25') & (df_india['Date']<='2020-05-31')].reset_index(drop=True) # considering from lockdown date\ndbd_from_lockdown = dbd_from_lockdown[:-1]\ndbd_from_lockdown.head(2)","a6dad41d":"dbd_from_lockdown.tail(2)","c40b337e":"dbd_after_lockdown = df_india[(df_india['Date'] > '2020-05-31')].reset_index(drop=True) # considering after lockdown date\ndbd_after_lockdown = dbd_after_lockdown[:-1]\ndbd_after_lockdown.head(2)","38732712":"data = dbd_prelockdown.set_index('Date')['Active Cases']\ninfected = dbd_prelockdown.set_index('Date')['Confirmed']\nrecovered = dbd_prelockdown.set_index('Date')['Recovered']","1c0d6c74":"s_0 = 150000\ni_0 = 6\nr_0 = 3","df8f5b88":"def loss(point, data, recovered, s_0, i_0, r_0):\n    size = len(data)\n    beta, gamma = point\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    solution = solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1), vectorized=True)\n    l1 = np.sqrt(np.mean((solution.y[1] - data)**2))\n    l2 = np.sqrt(np.mean((solution.y[2] - recovered)**2))\n    alpha = 0.1\n    return alpha * l1 + (1 - alpha) * l2","d2c89a0b":"def predict(beta, gamma, data, recovered, s_0, i_0, r_0):\n    new_index = list(data.index.values)\n    size = len(new_index)\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))\n    extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))\n    return new_index, extended_actual, extended_recovered, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))","660a1b22":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","b2a08202":"def train(recovered, infected, data):\n    recovered = recovered\n    infected = infected\n    data = data\n\n    optimal = minimize(loss, [0.001, 0.001], args=(data, recovered, s_0, i_0, r_0), method='L-BFGS-B', bounds=[(0.00000001, 2), (0.00000001, 0.4)])\n    print(optimal)\n    beta, gamma = optimal.x\n    new_index, extended_actual, extended_recovered, prediction = predict(beta, gamma, data, recovered, s_0, i_0, r_0)\n    df = pd.DataFrame({'Actual Infected': extended_actual, 'Actual Recovered': extended_recovered, 'Susceptible': prediction.y[0], 'Predicted Infected': prediction.y[1], 'Predicted Recovered': prediction.y[2]}, index=new_index)\n#     print(df)\n    MAE = mean_absolute_error(df['Actual Infected'], df['Predicted Infected'])\n    MSE = mean_squared_error(df['Actual Infected'], df['Predicted Infected'])\n    R_2 = r2_score(df['Actual Infected'], df['Predicted Infected'])\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.set_title('Estimating Beta and Gamma for India during pre-lockdown')\n    df.plot(ax=ax)\n    print(f\"country=India, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta\/gamma):.8f},MSE:{MSE:.8f},MAE:{MAE:.8f},R_2:{R_2:.8f}\")","d25689c2":"train(recovered, infected, data)","68920d1c":"data = dbd_from_lockdown.set_index('Date')['Active Cases']\ninfected = dbd_from_lockdown.set_index('Date')['Confirmed']\nrecovered = dbd_from_lockdown.set_index('Date')['Recovered']","7b607f69":"s_0 = 750000 \ni_0 = 606\nr_0 = 43","c86f68dd":"def loss(point, data, recovered, s_0, i_0, r_0):\n    size = len(data)\n    beta, gamma = point\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    solution = solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1), vectorized=True)\n    l1 = np.sqrt(np.mean((solution.y[1] - data)**2))\n    l2 = np.sqrt(np.mean((solution.y[2] - recovered)**2))\n    alpha = 0.1\n    return alpha * l1 + (1 - alpha) * l2","26679a26":"def predict(beta, gamma, data, recovered, s_0, i_0, r_0):\n    new_index = list(data.index.values)\n    size = len(new_index)\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))\n    extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))\n    return new_index, extended_actual, extended_recovered, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))","65f2a6f8":"def train(recovered, infected, data):\n    recovered = recovered\n    infected = infected\n    data = data\n\n    optimal = minimize(loss, [0.001, 0.001], args=(data, recovered, s_0, i_0, r_0), method='L-BFGS-B', bounds=[(0.000001, 0.5), (0.00000001, 0.4)])\n    print(optimal)\n    beta, gamma = optimal.x\n    new_index, extended_actual, extended_recovered, prediction = predict(beta, gamma, data, recovered, s_0, i_0, r_0)\n    df = pd.DataFrame({'Actual Infected': extended_actual, 'Actual Recovered': extended_recovered, 'Susceptible': prediction.y[0], 'Predicted Infected': prediction.y[1], 'Predicted Recovered': prediction.y[2]}, index=new_index)\n    MAE = mean_absolute_error(df['Actual Infected'], df['Predicted Infected'])\n    MSE = mean_squared_error(df['Actual Infected'], df['Predicted Infected'])\n    R_2 = r2_score(df['Actual Infected'], df['Predicted Infected'])\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.set_title('COVID19 India Scenario during lockdown phase')\n    df.plot(ax=ax)\n    print(f\"country=India, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta\/gamma):.8f},MSE:{MSE:.8f},MAE:{MAE:.8f},R_2:{R_2:.8f}\")","a0f26aff":"train(recovered, infected, data)","2927c7d5":"data = dbd_after_lockdown.set_index('Date')['Active Cases']\ninfected = dbd_after_lockdown.set_index('Date')['Confirmed']\nrecovered = dbd_after_lockdown.set_index('Date')['Recovered']","710f048a":"s_0 = 750000 \ni_0 = 190535\nr_0 = 91819","43b14a81":"def loss(point, data, recovered, s_0, i_0, r_0):\n    size = len(data)\n    beta, gamma = point\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    solution = solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1), vectorized=True)\n    l1 = np.sqrt(np.mean((solution.y[1] - data)**2))\n    l2 = np.sqrt(np.mean((solution.y[2] - recovered)**2))\n    alpha = 0.1\n    return alpha * l1 + (1 - alpha) * l2","353b578f":"pres_fut = np.array(list(data.index.values)+ list((np.array(pd.date_range(df_india['Date'].max(), periods=180))))) #  months from df_india['Date'].max()","2d253778":"def predict(beta, gamma, data, recovered, s_0, i_0, r_0):\n    new_index = pres_fut\n    size = len(new_index)\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))\n    extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))\n    return new_index, extended_actual, extended_recovered, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))","84b84d99":"def train(recovered, infected, data):\n    recovered = recovered\n    infected = infected\n    data = data\n\n    optimal = minimize(loss, [0.001, 0.001], args=(data, recovered, s_0, i_0, r_0), method='L-BFGS-B', bounds=[(0.000001, 0.5), (0.00000001, 0.4)])\n    print(optimal)\n    beta, gamma = optimal.x\n    new_index, extended_actual, extended_recovered, prediction = predict(beta, gamma, data, recovered, s_0, i_0, r_0)\n    df = pd.DataFrame({'Actual Infected': extended_actual, 'Actual Recovered': extended_recovered, 'Susceptible': prediction.y[0], 'Predicted Infected': prediction.y[1], 'Predicted Recovered': prediction.y[2]}, index=new_index)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.set_title('Possible COVID19 India Scenario next 6 months after lockdown')\n    df.plot(ax=ax)\n    print(f\"country=India, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta\/gamma):.8f}\")","57228319":"train(recovered, infected, data)","32ef3bdf":"# Affect of Lockdown\n\n* Beta reduced from 0.22861345 to 0.14658033 \n* R_0 reduced from 11.57259201 to 2.31412054 ","c542a4bd":"\n\nAssumptions taken:\n* An initial population of 150000 could have been potentially exposed to COVID-19 as of 3rd March","434e2ff8":"# DAILY New Confirmed cases by states in INDIA","4ba1ab17":"\n* From march 3rd till April 5th, growth ratio was very high\n* We can see some few instance where growth ratio drops i.e cases where decreasing.\n* we can see that from May 22, growth ratio is around one i.e cases are not increasing yet not descreasing.","582c88cc":"# Let's see if we can estimate the Beta & Gamma parameter with splitting the dataset into train and validation considering the lockdown","59dc7708":"# Testing All-India ","2e6799b2":"# Time Series Analysis: Country Level","3fb1cd69":"* As we can see the cases have been rising eversince the first lockdown and event though the lockdowns helped in keeping the rate of increase in check,after the unlock as we can see in the graph the rate has increased a lot\n\n* The testing has also seen a great amount of increase in Delhi but compared to the cases ,it is a bit underwhelming and also a fact to look at is the testing started around lockdown 2.the rate as we can see has a constant rate of increase ulike the cases graph but we can observe after the unlock the rate at which testing is done has seen a massive increase","ce6e233c":"* Total samples tested are increased in a exponancial way.\n* Though the testing rate is increasing but still number of tests are very low in comparison to the 10% population of india\n* You can witness how is the increase in TotalSample leads to increase in Total+ve cases in a same manner leading us to infer that more and more testing should be done","406161d3":"# Mortality rate HIGH","68812f27":"# Cured by states in India","e04fc747":"* Hospitals(per 100000) have a correlation of -.35 with confirmed cases and -.27 with deaths\n* Urban_beds(per 100000) have a correlation values of -.33 with active cases\n* Beds(per 100000) has a -ve correlation value with Mortality Rate","992e0669":"# Analysis\n\n*     we can see that number cases increase exponentially after 12th of april. \n*     New cases are not increasing exponentially which is a good sign.\n*     From 29th May we can see that numbder of cured patients were increasing and there is very less difference between active and cured patients from 30th may to 10th June.\n*     After 10th june, number of cured cased got increased. **#Need to check the reason behind this behaviour (check testing curve between this range)**\n*     There is no exponential growth in deaths which is also a good sign.\n","32ee253f":"# Lowest Mortality rate states","c503cac4":"***The growth ratio on day N is the number of confirmed cases on day N divided by the number of confirmed cases on day N-1***","34fc6e7e":"# Lockdown Period (25th Mar - 31st May)","721e946b":"* As you can see the patients are most in the region of 20-29,30-39 age group\n* 20-29 region comprises of 24.9% of the people that are infected while 30-39 capture 21.1% shows that people in the these 2 regions are more infected but nothing much can be said as age group data is less avialable\n","ae258c7d":"* Despite of having more confirmed cases, Tamil Nadu has less deaths as compared to Delhi. **#Need to check: Can we have that if testing in tamil nadu is going on a fater rate then probably we can diagnose the disease in the early stages**\n* Despite of having less confirmed cases, West bengal has more deaths as compared to others. ","b788a136":"# Pre-Lockdown Period (2nd March-25th March)","31ea3cd8":"# Analysis on age groups ","cf5b1bfa":"# Time Series Analysis: States having confirmed cases more than 35000","2d329bcc":"# After Lockdown (1st June - )","97bb2d91":"# Logistic Growth Model","1ef3b20a":"# **Predictions**","af38508e":"# Medical Facilities","f457f2a2":"# Deaths by states in INDIA","f52b0a60":"We can see after ginoring last two weeks of data, our model tends to have be underfitting. ","71d547ee":"\nAssumptions taken:\n\n* An initial population of 750000 could have been potentially exposed to COVID-19 as of 1st June","d4d82421":"* We have 9 states as of 17th July which are having more than 35000 confirmed cases.\n","27f6dfeb":"# Growth factor by state in INDIA","7805f4bd":"**Beta and Gamma are estimated in the following way:**\n\n* Validation data used is from 3rd Mar to 24th Mar (pre-lockdown period), 25th Mar to 31st May (lockdown period) and 1 june to till date\n* Forward prediction of 180 days have been done from current date considering parameter values derived during lockdown period\n* Define y(t) for the SIR model, and then use RMSE as the loss function, and used L-BFGS-B gradient descent optimization to minimise the loss function","c25ead92":"# Confirmed\/Cured\/Deaths in states","54690440":"# Confirmed cases by state in INDIA","dadbb135":"* In Maharastra the daily increase in number of patients were 117 till 8 April but the sudden increase is noted on april 9 and april 13\n* Thought uttar pradesh saw a spike on april 4 and after 11 we see peaks on 13 april(75) and 14 april(102)\n* Well in rajasthan we see spike on 5 april but latter we saw spikes on 9 and after this day we saw sudden growth of 317 in number of patients\n* Tamil Nadu see unprecedental increase on 1 April around 100 patients +ve in a single day explains why 29 - 5 April period in tamil nadu was severe\n* Though Delhi has seen up and down in the daily rate of +ve cases but 13 april saw 356 patients in a day","8ff1a5ec":"*    we can see that after march 1, 2020, growth of confirmed cases increased and after April 12. growth increase more rapidly \n*    Despite of having lockdown1.0, we can see positive growth in number of new cases of corona.","b1c3f846":"Assumptions taken:\n* An initial population of 750000 could have been potentially exposed to COVID-19 as of 25th March","96bfd9c6":"# Indian COVID-19 Patients Outcome Age-Wise","ed5c8b08":"* As you have seen in maharasshtra the situation started getting bad in the period of 29 - 3 april and then their is near exponancial growth shows that their might had been an outbreak or a system failure\n* Though the condition is uttar pradesh was not that harsh as it was in maharashtra but the conditions goes out of handle in the period of 29 - 5 april when cluster spreading starts\n* In rajasthan Same period of 29 - 5 april is time when it starts to grow in an exponancial manner\n* Okay see again the time bound of 29 - 5 april here we se a sudden growth 30 March(67) - 5 april(571) 9x time growth\n* Delhi is too different as the period was 1-5 april when the outbreak happens","5a07b5cf":"* States like Andaman and Nicobar Islands ,Sikkim ,Tripura,Himachal Pradesh has a very good number in Urban_beds per 100000 as compared to other states but keeping in mind these states has low population as compared to Uttar pradesh, Maharashtra etc.\n* Chandigrah has around 13000 rural beds for every 100000 which very good as compared to other region,Delhi also has around 5000 rural beds per 100000 which is also very good this might be a reason that delhi has such low mortality rate\n* Rajasthan , Tamil nadu ,Uttar pradesh has very low beds per person but still they have very low mortality rate which is good leading us to think that the government of these states has done some good work on social distancing\n* Madhya pradesh and Maharashtra has high mortality rate also they have low bed and hospitals per 100000 in all aspects","a71fda56":"# - Estimating Beta and Gamma during lockdown period","679cd1df":"# COVID-19 Analysis Using SIR MODEL","2d57685e":"\n*  We can a see a jump on 14th march and this might be a reason to announce Janta curphew on 22nd march. \n*  we can see mortality is highest on 13th april and continues to be high and after 6th may we can see drop of mortality. may be this because of advancements of medical facilities\n*  On 17th april mortality rate shoot up once again it is because of relaxation given by the govt\n*  from 17th Jun mortality rate is continously decreasing by time **#Need to check the no of testing happening per day as testing is somehow related to mortality.**","74e1f4b0":"# Time Series Analysis: State Level"}}