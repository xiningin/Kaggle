{"cell_type":{"c4f0b21c":"code","5452d6be":"code","b43fdf11":"code","a576f83a":"code","654a399e":"code","b9253e70":"code","04a03efd":"code","082970c7":"code","162314a8":"code","849ccda0":"code","f6c1d256":"code","e49e42dd":"code","efad2355":"code","be198a10":"code","e89d61cd":"code","60c0a88a":"code","551468aa":"code","496cc269":"code","cd509341":"code","7f2b8d79":"code","e58724bc":"code","1239de12":"code","69368285":"code","bfca2d30":"code","1c749cc1":"code","1cfc9600":"code","fbeb2229":"code","6eb77e35":"code","7a028f74":"code","31fe2fe2":"code","0a4bdbf7":"code","d9bcd768":"code","66a2c9b9":"code","ec0e07b8":"code","76d9c9aa":"code","01e315b8":"code","85739a51":"code","ea177a1b":"code","5bc7a9fd":"code","f8f06b99":"code","97fa5432":"code","90787a18":"code","4a9284c1":"code","2bf8f3b8":"code","d06b34d9":"code","b74a3f19":"code","d01d8d9a":"code","ef34a99b":"code","8c30a81c":"code","739734a2":"code","42848c2b":"code","b591f370":"code","fb68ef34":"code","5f07f846":"code","10fd764f":"code","05c2e3df":"code","7c720227":"code","b03ffee8":"code","8a21f535":"code","e6913632":"code","8067befe":"code","f6f5f87f":"code","9bc4aafc":"code","646d876e":"code","c68a099d":"code","28650c78":"code","d1952169":"code","50a891b6":"code","7cfa986b":"code","40e74d20":"code","f9159ad5":"code","2bfa7547":"code","aac420ba":"code","8dabd3fc":"code","6bf64dd7":"code","35c2b113":"code","a69646d8":"code","35b9bbec":"code","bff70b55":"code","683408eb":"code","f02e1888":"code","db214dd5":"code","bc1cd667":"code","07408918":"markdown","f5c3491d":"markdown","d0c398cd":"markdown","4f7105ba":"markdown","8dfd9575":"markdown","f939e764":"markdown","f8369937":"markdown","57cd98cb":"markdown","609cf3df":"markdown","14e561a8":"markdown","81b6ed02":"markdown","19c116f3":"markdown","5d7b04cb":"markdown","79de1a9f":"markdown","eaf69ccb":"markdown","553d6da8":"markdown","fccc7214":"markdown","99306926":"markdown","8bffc989":"markdown","3997b2e5":"markdown","439aa30e":"markdown","6895f219":"markdown","3e985101":"markdown","3e669d49":"markdown","945bdf8e":"markdown","d62eb105":"markdown"},"source":{"c4f0b21c":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5452d6be":"train = pd.read_csv('..\/input\/hackerearth-ml-challenge-pet-adoption\/train.csv')\nprint(train.shape)\ntrain.head()","b43fdf11":"test = pd.read_csv('..\/input\/hackerearth-ml-challenge-pet-adoption\/test.csv')\nprint(test.shape)\ntest.head()","a576f83a":"train.isnull().mean()","654a399e":"test.isnull().mean()","b9253e70":"print(train['condition'].unique())\nprint(test['condition'].unique())","04a03efd":"train.fillna(999,inplace = True)","082970c7":"# doing the same for test data\ntest.fillna(999,inplace = True)","162314a8":"train.groupby('condition')['breed_category'].value_counts()","849ccda0":"train.groupby('condition')['pet_category'].value_counts()","f6c1d256":"train.head()","e49e42dd":"train['pet_id'].nunique()","efad2355":"train['id_nums'] = train['pet_id'].map(lambda x:x[5:7])","be198a10":"test['id_nums'] = test['pet_id'].map(lambda x:x[5:7])","e89d61cd":"train.groupby('id_nums')['breed_category'].value_counts()","60c0a88a":"train.groupby('id_nums')['pet_category'].value_counts()","551468aa":"train.dtypes","496cc269":"train['issue_date'] = train['issue_date'].map(lambda x:x[:11])\ntrain['listing_date'] = train['listing_date'].map(lambda x:x[:11])","cd509341":"test['issue_date'] = test['issue_date'].map(lambda x:x[:11])\ntest['listing_date'] = test['listing_date'].map(lambda x:x[:11])","7f2b8d79":"train.head()","e58724bc":"train['issue_year'] = train['issue_date'].map(lambda x:x[:4])\ntrain['listing_year'] = train['listing_date'].map(lambda x:x[:4])","1239de12":"test['issue_year'] = test['issue_date'].map(lambda x:x[:4])\ntest['listing_year'] = test['listing_date'].map(lambda x:x[:4])","69368285":"train.head()","bfca2d30":"# lets see how the target depends on year\ntrain.groupby('issue_year')['breed_category'].value_counts()","1c749cc1":"train.groupby('listing_year')['breed_category'].value_counts().plot.bar()","1cfc9600":"train['issue_month'] = train['issue_date'].map(lambda x:x[5:7])\ntrain['listing_month'] = train['listing_date'].map(lambda x:x[5:7])","fbeb2229":"test['issue_month'] = test['issue_date'].map(lambda x:x[5:7])\ntest['listing_month'] = test['listing_date'].map(lambda x:x[5:7])","6eb77e35":"train.head()","7a028f74":"train.groupby('listing_month')['breed_category'].value_counts()","31fe2fe2":"train.groupby('listing_month')['pet_category'].value_counts()","0a4bdbf7":"train.dtypes","d9bcd768":"# lets change the datatypes of the newly created cols to int\ntrain['id_nums'] = train['id_nums'].astype('int')\ntrain['issue_year'] = train['issue_year'].astype('int')\ntrain['issue_month'] = train['issue_month'].astype('int')\ntrain['listing_month'] = train['listing_month'].astype('int')\ntrain['listing_year'] = train['listing_year'].astype('int')","66a2c9b9":"test['id_nums'] = test['id_nums'].astype('int')\ntest['issue_year'] = test['issue_year'].astype('int')\ntest['issue_month'] = test['issue_month'].astype('int')\ntest['listing_month'] =test['listing_month'].astype('int')\ntest['listing_year'] = test['listing_year'].astype('int')","ec0e07b8":"train.dtypes","76d9c9aa":"#now lets see whether the target variables are realated to the amount of years it has between issue and listing\ntrain['difference_years'] = train['listing_year'] - train['issue_year']\ntrain.groupby('difference_years')['breed_category'].value_counts()","01e315b8":"test['difference_years'] = test['listing_year'] - test['issue_year']\n","85739a51":"train.groupby('difference_years')['pet_category'].value_counts()","ea177a1b":"# drop the isuue data and listing data col now\ntrain.drop(['issue_date','listing_date'],axis = 1,inplace = True)","5bc7a9fd":"test.drop(['issue_date','listing_date'],axis = 1,inplace = True)","f8f06b99":"train.head()","97fa5432":"train['color_type'].nunique()\n# there are 56 different types of colors","90787a18":"train['color_type'].unique()","4a9284c1":"train['color_tabby'] = train['color_type'].map(lambda x: 1 if ('Tabby' in x) else 0)\n#fig,(ax1,ax2) = plt.subplots(1,2,figsize = (16,4))\nprint(train.groupby('color_tabby')['breed_category'].value_counts())\nprint(train.groupby('color_tabby')['pet_category'].value_counts()) # it gives much information about pet_category","2bf8f3b8":"test['color_tabby'] = test['color_type'].map(lambda x: 1 if ('Tabby' in x) else 0)\n","d06b34d9":"for specific_word in ['Brindle','Tick','Point','Cream','Merle','Tiger','Smoke']:\n    train['color ' + str(specific_word)] = train['color_type'].map(lambda x: 1 if (specific_word in x) else 0)\n    print(specific_word)\n    print(train.groupby('color '+ str(specific_word))['pet_category'].value_counts()) # it gives much information about pet_category\n\n    ","b74a3f19":"for specific_word in ['Brindle','Tick','Point','Cream','Merle','Tiger','Smoke']:\n    test['color ' + str(specific_word)] = test['color_type'].map(lambda x: 1 if (specific_word in x) else 0)\n#     print(specific_word)\n#     print(train.groupby('color '+ str(specific_word))['pet_category'].value_counts()) # it gives much information about pet_category\n\n    ","d01d8d9a":"train['color_cat_1'] = train['color_tabby'] + train['color Point'] + train['color Smoke']\ntrain['color_cat_1'].value_counts()","ef34a99b":"test['color_cat_1'] = test['color_tabby'] + test['color Point'] + test['color Smoke']\n# train['color_cat_1'].value_counts()","8c30a81c":"train['color_cat_2'] = train['color Brindle'] + train['color Tick'] + train['color Point']\nprint(train['color_cat_2'].value_counts())","739734a2":"test['color_cat_2'] = test['color Brindle'] + test['color Tick'] + test['color Point']\n","42848c2b":"train.drop(['color_tabby', 'color Brindle', 'color Tick',\n       'color Point', 'color Cream', 'color Merle', 'color Tiger',\n       'color Smoke'],axis = 1,inplace = True)","b591f370":"test.drop(['color_tabby', 'color Brindle', 'color Tick',\n       'color Point', 'color Cream', 'color Merle', 'color Tiger',\n       'color Smoke'],axis = 1,inplace = True)","fb68ef34":"print(train.shape)\ntrain.head()","5f07f846":"#lets look at test data\ntest.head()","10fd764f":"plt.figure(figsize = (15,6))\ntemp_df = pd.Series(train['color_type'].value_counts() \/ len(train) )\ntemp_df.sort_values(ascending=False).plot.bar()","05c2e3df":"# for encoding it, i am going to first use rare category for the cols that \ndef find_non_rare_labels(df, variable, tolerance):\n    \n    temp = df.groupby([variable])[variable].count() \/ len(df)\n    \n    non_rare = [x for x in temp.loc[temp>tolerance].index.values]\n    \n    return non_rare","7c720227":"frequent_cols = find_non_rare_labels(train,'color_type',0.02)\nfrequent_cols","b03ffee8":"#encoding the variables\ntrain['color_encoded'] = np.where(train['color_type'].isin(frequent_cols),train['color_type'],'Rare')","8a21f535":"test['color_encoded'] = np.where(test['color_type'].isin(frequent_cols),test['color_type'],'Rare')","e6913632":"train.head()","8067befe":"train['color_encoded'].value_counts()","f6f5f87f":"from sklearn.preprocessing import OneHotEncoder\nimport pandas as pd\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\n\nclass Myencoder(BaseEstimator, TransformerMixin):\n   \n    def __init__(self,drop = 'first',sparse=False):\n        self.encoder = OneHotEncoder(drop = drop,sparse = sparse)\n        self.drop = True if drop == 'first' else False\n        self.features_to_encode = []\n        self.columns = []\n    \n    def fit(self,X_train,features_to_encode):\n        \n        data = X_train.copy()\n        self.features_to_encode = features_to_encode\n        data_to_encode = data[self.features_to_encode]\n        self.columns = pd.get_dummies(data_to_encode,drop_first = self.drop).columns\n        self.encoder.fit(data_to_encode)\n        return self.encoder\n    \n    def transform(self,X_test):\n        \n        data = X_test.copy()\n        data.reset_index(drop = True,inplace =True)\n        data_to_encode = data[self.features_to_encode]\n        data_left = data.drop(self.features_to_encode,axis = 1)\n        \n        data_encoded = pd.DataFrame(self.encoder.transform(data_to_encode),columns = self.columns)\n        \n        return pd.concat([data_left,data_encoded],axis = 1)","9bc4aafc":"my_encoder = Myencoder(drop = None)\nmy_encoder.fit(train,['color_encoded'])\nlen(my_encoder.columns)","646d876e":"train = my_encoder.transform(train)","c68a099d":"test = my_encoder.transform(test)","28650c78":"train.head()","d1952169":"train['length(cm)'] = train['length(m)']*100\ntrain.drop('length(m)',axis = 1,inplace = True)","50a891b6":"test['length(cm)'] = test['length(m)']*100\ntest.drop('length(m)',axis = 1,inplace = True)","7cfa986b":"fig,((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2,figsize = (16,16))\nsns.violinplot(train['breed_category'],train['length(cm)'],ax = ax1)\nsns.violinplot(train['pet_category'],train['length(cm)'],ax = ax2)\nsns.violinplot(train['breed_category'],train['height(cm)'],ax = ax3)\nsns.violinplot(train['pet_category'],train['height(cm)'],ax = ax4)","40e74d20":"fig,(ax1,ax2) = plt.subplots(1,2,figsize = (16,6))\nsns.violinplot(train['breed_category'],(train['length(cm)']*train['height(cm)']) \/ 100,ax = ax1)\nsns.violinplot(train['pet_category'],(train['length(cm)']*train['height(cm)'] \/ 100),ax = ax2)","f9159ad5":"#there are some obs for which value of length is 0\ntemp = train[train['length(cm)'] == 0]\ntemp.shape","2bfa7547":"#lets see this data for which len if 0\nfig,(ax1,ax2) = plt.subplots(1,2,figsize = (14,4))\ntrain['breed_category'].value_counts().plot.bar(ax = ax1)\ntrain['pet_category'].value_counts().plot.bar(ax = ax2)","aac420ba":"fig,((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2,figsize = (16,16))\nsns.violinplot(train['breed_category'],train['X1'],ax = ax1)\nsns.violinplot(train['pet_category'],train['X1'],ax = ax2)\nsns.violinplot(train['breed_category'],train['X2'],ax = ax3)\nsns.violinplot(train['pet_category'],train['X2'],ax = ax4)","8dabd3fc":"fig,(ax1,ax2) = plt.subplots(1,2,figsize = (16,6))\nsns.violinplot(train['breed_category'],(train['X1']*train['X2']),ax = ax1)\nsns.violinplot(train['pet_category'],(train['X1']*train['X2'] ),ax = ax2)","6bf64dd7":"train['lh'] = (train['length(cm)']*train['height(cm)']) \/ 100\ntrain['X1_X2'] = train['X1']*train['X2']\ntrain['l_zero'] = np.where(train['length(cm)'] == 0,1,0) # where length == 0","35c2b113":"test['lh'] = (test['length(cm)']*test['height(cm)']) \/ 100\ntest['X1_X2'] = test['X1']*test['X2']\ntest['l_zero'] = np.where(test['length(cm)'] == 0,1,0)","a69646d8":"train.shape","35b9bbec":"train.head()","bff70b55":"#drop some unnecessay features\ntrain.drop('color_type',axis = 1,inplace = True)","683408eb":"test.drop('color_type',axis = 1,inplace = True)","f02e1888":"print(len(train.columns))\ntrain.columns","db214dd5":"print(len(test.columns))\ntest.columns","bc1cd667":"train.to_csv('train_processed.csv')\ntest.to_csv('test_processed.csv')","07408918":"Lets now do the same for months","f5c3491d":"what's interesting is that both of the train and test data have same % of null values, around 7.6-5.8","d0c398cd":"Lets look for null values","4f7105ba":"lets impute this nan values, to see how it is related to the target cols","8dfd9575":"### can we get something out of pet id??","f939e764":"# hackerearth challenge - Adopt a buddy","f8369937":"would be interseting to look how this is related to the target variables, but first lets see what does this col, condition look like","57cd98cb":"## looking from the above few values, it doesn't look like so. ","609cf3df":"There's nothing really clear abou the pet category, but look in the breed category, all the values having null values for condition belonged \nto breed category 2. That's a hell lot of an information\nAlso, for all condition value = 1, the breed category is 0. ","14e561a8":"Output\n","81b6ed02":"dist of height and weight is uniform","19c116f3":"breaking the dates into year and month","5d7b04cb":"## X1 and X2","79de1a9f":"# Adding new features","eaf69ccb":"length is in m and height in cm, its better if we have both in one sale\n","553d6da8":"Now, we are done with null values","fccc7214":"## Now' lets look at the date cols","99306926":"they are of object type, so we can treat them like strings and get the required information. \nIt doesn;t seem like time would be much of importance here. So, lets drop time","8bffc989":"# Exploratory data analysis","3997b2e5":"I don;t think isuue month is really that significant, so, dropping it, but keeping listing months as of now. \n","439aa30e":"## now,using one hot encoding","6895f219":"lets combine tabby, point and smoke, as they give pet category 1 \nand brindle, tick and tiger as they give pet category 2","3e985101":"## color type","3e669d49":"# length and height","945bdf8e":"## encoding of color_type","d62eb105":"Lets now move forward"}}