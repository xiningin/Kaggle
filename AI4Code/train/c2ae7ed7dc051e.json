{"cell_type":{"0b73a1ab":"code","aef6852d":"code","fca8d561":"code","d8b97195":"code","497f924a":"code","f0ef7122":"code","8b9801ea":"code","bffcbcf9":"code","e354ce60":"code","af7e541f":"code","87e26928":"code","38fdf5f3":"code","def94fae":"markdown","d743387c":"markdown"},"source":{"0b73a1ab":"import numpy as np # linear algebra\nimport pandas as pd# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # plot\n%matplotlib inline\nimport seaborn as sns # plot\nimport pandas_profiling as pdp # data profiling\nfrom collections import OrderedDict # data structure\n\n# Input data files are available in the \"..\/input\/\" directory.\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","aef6852d":"# load the data\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","fca8d561":"train.head()","d8b97195":"# show column names\ntrain.columns","497f924a":"# a function which plots survival rate about a peculiar column\ndef survived_rate_plot(column, str_option=True):\n    \"\"\"a function which returns survived rate of a peculiar column\"\"\"\n    def return_index(lst, item):\n        for i in range(len(lst)):\n            if lst[i] == item:\n                return i\n        return None\n    \n    # by_column : total count grouped by \"column\"\n    by_column = np.array(train[column].value_counts())\n    by_column_index =  train[column].value_counts().index\n    by_column_dict = dict(zip(by_column_index, by_column))\n\n    # survived_by_column : survival count grouped by \"column\"\n    survived_by_column = list(train[train['Survived'] == 1][column].value_counts())\n    survived_by_column_index =  train[train['Survived'] == 1][column].value_counts().index\n    temp_dict = dict(zip(survived_by_column_index, survived_by_column))\n    survived_by_column_dict = OrderedDict()\n    for key in by_column_dict.keys():\n        if key in survived_by_column_index:\n            survived_by_column_dict[key] = temp_dict[key]\n        else:\n            survived_by_column_dict[key] = 0\n    temp = survived_by_column_dict.items()\n    survived_by_column = np.array([t[1] for t in temp])\n\n    # dead_by_column: dead count grouped by \"column\"\n    dead_by_column = by_column - survived_by_column\n    \n    # survival_rate\n    survival_rate = ((survived_by_column \/ by_column) * 100).astype(int)\n\n    # option: if str_option is true (default), it translates int to str\n    if str_option:\n        left = by_column_index.astype(str)\n    else:\n        left = by_column_index\n    \n    # plotting\n    plt.figure(figsize=(12,6))\n    plt.bar(left, survived_by_column, color=\"limegreen\", label='alive')\n    plt.bar(left, dead_by_column, bottom=survived_by_column, color=\"orangered\", label='dead')\n    plt.title(f'dead or alive grouped by {column}', fontsize=20)\n    plt.legend()\n    \n    # write down numbers in bar plots\n    for x, y in zip(left, survival_rate):\n        try:\n            plt.text(x, by_column_dict[x], y, ha='center', va='bottom')\n        except:\n            x = int(x)\n            plt.text(x, by_column_dict[x], y, ha='center', va='bottom')\n    ","f0ef7122":"# ceil values of \"Age\" to get more concise in data plot\ntrain['Age'] = np.ceil(train['Age'])\nsurvived_rate_plot('Age', str_option=False)","8b9801ea":"survived_rate_plot('Pclass')","bffcbcf9":"survived_rate_plot('Sex')","e354ce60":"survived_rate_plot('SibSp')","af7e541f":"survived_rate_plot('Parch')","87e26928":"# classify \"Cabin\" based on its capital letter\ntrain['Cabin'] = [item[0] if type(item) == str else item for item in train['Cabin']]\nsurvived_rate_plot('Cabin')","38fdf5f3":"survived_rate_plot('Embarked')","def94fae":"Thank you! Why not try in your EDA!?","d743387c":"> ## We Focused on ... \n- Male or Female\n- Age (Children or Adult or Elder)\n- English-speaking or not\n- Pclass (Passenger class)\n\nSo, we built a function which plots survival rate about a peculiar column\nto get to know better about these columns.\n\nI believe which helps your EDA (Exploratory Data Analysis) !"}}