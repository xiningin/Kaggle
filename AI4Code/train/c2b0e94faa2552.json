{"cell_type":{"083a0b1f":"code","9321ce96":"code","adec94c2":"code","adaec0b5":"code","13f52a40":"code","05538a8d":"code","b485ec44":"code","52b03107":"code","ae35043d":"code","d4472844":"code","413b294c":"code","67a5f437":"code","bc0adcf5":"code","adecb6ad":"code","de33b8fb":"code","ff8950f5":"markdown","8544322e":"markdown","6af32671":"markdown","7bf537e8":"markdown","e6c50e5d":"markdown","2f492e95":"markdown","97c32a6c":"markdown","e08e6123":"markdown","b59484c2":"markdown","8b708cad":"markdown","bd2d7635":"markdown"},"source":{"083a0b1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9321ce96":"#pip install pycaret","adec94c2":"import pandas as pd\nimport numpy as np\n\nfrom pycaret.regression import setup, compare_models, create_model, blend_models, \\\ntune_model, finalize_model, predict_model, plot_model\n\nimport warnings\nwarnings.filterwarnings('ignore')","adaec0b5":"dataset = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\nsub_sample = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","13f52a40":"dataset['date_time'] = pd.to_datetime(dataset['date_time'])\ndataset['year'] = dataset['date_time'].dt.year\ndataset['month'] = dataset['date_time'].dt.month\ndataset['day'] = dataset['date_time'].dt.day\ndataset['dayofweek'] = dataset['date_time'].dt.dayofweek\ndataset['hour'] = dataset['date_time'].dt.hour\ndataset['date_time'] = dataset['date_time'].apply(lambda x:pd.Timestamp(x).value)\n\ntest['date_time'] = pd.to_datetime(test['date_time'])\ntest['year'] = test['date_time'].dt.year\ntest['month'] = test['date_time'].dt.month\ntest['day'] = test['date_time'].dt.day\ntest['dayofweek'] = test['date_time'].dt.dayofweek\ntest['hour'] = test['date_time'].dt.hour\ntest['date_time'] = test['date_time'].apply(lambda x:pd.Timestamp(x).value)","05538a8d":"print(dataset.shape, test.shape)","b485ec44":"t3 = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']\ntarget_drop_4_cm = ['target_benzene', 'target_nitrogen_oxides']\ntarget_drop_4_b = ['target_carbon_monoxide', 'target_nitrogen_oxides']\ntarget_drop_4_no = ['target_carbon_monoxide', 'target_benzene']\nX_cm = dataset.drop(target_drop_4_cm,axis=1)\nX_b = dataset.drop(target_drop_4_b,axis=1)\nX_no = dataset.drop(target_drop_4_no,axis=1)","52b03107":"def pycaret_predict(x, y, seed, test):\n\n    ''' setup() - Initialize the environment in pycaret and creates the transformation pipeline for data modeling and deployment. It prints the information grid which contain details of dataset like shape,missing values, numeric \/ categoric features. '''\n    \n    setup(data=x, target=y, session_id=seed, silent=True, verbose=False, profile=True,normalize = True, normalize_method='robust', fold_strategy='timeseries', fold=7, fold_shuffle=True)\n    \n    \n    ''' compare_models() - Comparing all the models, train and scores using k-fold validation.Output score grid shows average of MAE, MSE, RMSE, R2, RMSLE and MAPE. It returns the best performing model, can be customized with the help of n_select param to return a list of additional models which helps in case of blend or stack. '''\n    \n    top3 = compare_models(n_select=3, verbose=False)\n    \n\n    ''' blend_model() - Ensembling can be done using blend model. Voting Regressor helps intern to return the best model for predicting the data. '''\n        \n    blended_model = blend_models(top3, verbose=False)\n    \n    print(blended_model.estimators_)\n    \n    ''' create_model() - Creates the specific model by passing the ID of the model from the Pycaret library of models, can be identified using the 'models()' function which list all the models available. eg : CatBosst Regressor - 'catboost' '''\n\n    #cboost = create_model('catboost', verbose=False)\n    \n    model = create_model(blended_model, verbose=False)\n    \n    ''' tune_model() - Create model uses default hyperparameter to train a model. In order to further tune the model for better results tune_model() is used, it uses Random Grid Search to evaluate hyperparameter. '''\n    \n    tuned_model = tune_model(model, verbose=False)\n    \n    ''' finalize_model() - Last step in freezing the model, this will fit the entire dataset into the model and train it. '''\n\n    final_model = finalize_model(tuned_model)\n    \n    ''' predict_model() - Predict the training \/ test data. As it holds entire dataset of training, we can simply call by passing the finalize model object for training the dataset. Test \/ Unseen data can be predicted by using the parameter 'data'. '''\n    \n    # predict the training data\n    predict_model(final_model)\n    \n    # predict the test data\n    return final_model, predict_model(final_model, data=test)","ae35043d":"cm_model, cm_pred = pycaret_predict(X_cm, t3[0], 123, test)","d4472844":"# Residual plot for Carbon Monoxide\n\nplot_model(cm_model)","413b294c":"b_model, b_pred = pycaret_predict(X_b, t3[1], 123, test)","67a5f437":"# Residual plot for Benzene\n\nplot_model(b_model)","bc0adcf5":"no_model, no_pred = pycaret_predict(X_no, t3[2], 123, test)","adecb6ad":"# Residual plot for Nitrogen Oxide\n\nplot_model(no_model)","de33b8fb":"frames = [pd.DataFrame({'CM':cm_pred['Label']}), pd.DataFrame({'B':b_pred['Label']}), pd.DataFrame({'NO':no_pred['Label']})]\ntarget = pd.concat(frames, ignore_index = False, axis = 1)\n\n#target\n#sub_sample.head()\nsub_sample.iloc[:, 1:] = target\nsub_sample.head()\nsub_sample.to_csv('pycaret_blend.csv', index=False)","ff8950f5":"<h1 id='process'>\nProcessing\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/jagunn\/pycaret-tbs-july\/notebook#process\">\u00b6<\/a>\n<\/h1>\n\n* _No null values found in dataset._\n* _Date time variable - New features added_","8544322e":"<h1 id='dataload'>\nData Loading\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/jagunn\/pycaret-tbs-july\/notebook#dataload\">\u00b6<\/a>\n<\/h1>","6af32671":"<h1 id='s'>\nSubmission\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/jagunn\/pycaret-tbs-july\/notebook#s\">\u00b6<\/a>\n<\/h1>\n\n_Target variable creation and submission by combining all the predictions._","7bf537e8":"<h1 id='p'>\nPrediction\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/jagunn\/pycaret-tbs-july\/notebook#p\">\u00b6<\/a>\n<\/h1>\n\n\n_Prediction for target - **Carbon Monoxide**_","e6c50e5d":"_Three seperate features and target variable for intial setup of Pycaret._","2f492e95":"<h1 id='ms'>\nPycaret - model selection\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/jagunn\/pycaret-tbs-july\/notebook#ms\">\u00b6<\/a>\n<\/h1>\n\n_Clubbed individual steps of Pycaret into a utility function,verbose level set to 'false' as to avoid the tabular columns showing the metrics from each step to keep the notebook simpler._","97c32a6c":"_Prediction for target - **Benzene**_","e08e6123":"<h1 id='library'>\nLibraries\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/jagunn\/pycaret-tbs-july\/notebook#library\">\u00b6<\/a>\n<\/h1>","b59484c2":"### **Reference**\n\nInstallation : https:\/\/pycaret.readthedocs.io\/en\/latest\/installation.html\n\nTutorial : https:\/\/pycaret.readthedocs.io\/en\/latest\/tutorials.html","8b708cad":"**Pycaret** - It's a low code machine learning library that automates workflow, which helps in replacing multiple lines of code with few lines. It further speeds up the training, execution in a fast and efficient way.","bd2d7635":"_Prediction for target - **Nitrogen Oxide**_"}}