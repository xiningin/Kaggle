{"cell_type":{"364f1e50":"code","45f7a90e":"code","ee391743":"code","7e6d7fee":"code","848a519f":"code","0e9c9f16":"code","4ce97c98":"code","d46068d4":"code","8fadcdcb":"code","8b8d457a":"code","43d58a67":"code","2940456e":"code","9a2f7df8":"code","70985294":"code","78979d98":"code","e4b30280":"code","9dab049a":"code","bf6cfe59":"code","098d79d7":"code","30f6bf72":"code","e664cce8":"code","8f3b88ba":"code","751636ac":"code","e6f72222":"code","fbcbc350":"markdown"},"source":{"364f1e50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45f7a90e":"# Import appropriate libraries\nimport pandas as pd\nimport numpy as np\nimport datetime as dt\nimport plotly_express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","ee391743":"# Read the dataset\ndf_train = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndf_train.head()","7e6d7fee":"df_train.rename(columns={'ObservationDate':'Date', 'Province\/State': 'Province_State', 'Country\/Region':'Country_Region', \n                   'Last Update':'Last_Update','Deaths':'Fatalities'}, inplace=True)","848a519f":"df_train.columns","0e9c9f16":"# Check the dataset\ndisplay(df_train.head())\ndisplay(df_train.describe())\ndisplay(df_train.info())","4ce97c98":"df_train.columns","d46068d4":"df = df_train[['Date','Province_State','Country_Region','Last_Update','Confirmed','Fatalities','Recovered']]","8fadcdcb":"df.head()","8b8d457a":"df.plot()","43d58a67":"# number of Fatalities country wise\nx=df.groupby(['Country_Region']).count()\nx=x.sort_values(by='Fatalities',ascending=False)\nx=x.iloc[0:10].reset_index()\nx\n# #plot\nplt.figure(figsize=(10,6))\nax= sns.barplot(x.Country_Region, x.Confirmed, alpha=0.8)\nplt.title(\"Fatalities per Country_Region\")\nplt.ylabel('# of Fatalities', fontsize=12)\nplt.xlabel('Country_Region', fontsize=12)\nplt.show()","2940456e":"# Plot to show Fatalities\ndf['Fatalities'].plot(legend=True,figsize=(10,4))\nplt.show()","9a2f7df8":"# Plot to show Country_wise Recovered\ndf['Recovered'].plot(legend=True,figsize=(10,4))\nplt.show()","70985294":"# Plot to show Confirmed\ndf['Confirmed'].plot(legend=True,figsize=(10,4))\nplt.show()","78979d98":"# Plot to check Status of the different columns\ndf.plot(legend=True,figsize=(15,5))\nplt.show()","e4b30280":"# number of Confirmed cases per Country\nx=df.groupby(['Country_Region', 'Province_State']).count()\nx=x.sort_values(by='Confirmed',ascending=False)\nx=x.iloc[0:200].reset_index()\nx\n# #plot\nplt.figure(figsize=(16,8))\nax= sns.barplot(x.Country_Region, x.Fatalities, alpha=0.8)\nplt.title(\"ConfirmedCases Country Wise\")\nplt.xlabel('# of Confirmed Cases', fontsize=12)\nplt.ylabel('Country', fontsize=12)\nplt.show()","9dab049a":"# number of Confirmed cases per Country\nx=df.groupby(['Country_Region', 'Fatalities']).count()\nx=x.sort_values(by='Country_Region',ascending=False)\nx=x.iloc[0:100].reset_index()\nx\n# #plot\nplt.figure(figsize=(12,6))\nax= sns.barplot(x.Confirmed, x.Fatalities, alpha=0.8)\nplt.title(\"ConfirmedCases Country Wise\")\nplt.xlabel('# of Confirmed Cases', fontsize=12)\nplt.ylabel('Country', fontsize=12)\nplt.show()","bf6cfe59":"# number of Recovered cases per Country\nx=df.groupby(['Country_Region', 'Recovered']).count()\nx=x.sort_values(by='Confirmed',ascending=False)\nx=x.iloc[0:10].reset_index()\nx\n# #plot\nplt.figure(figsize=(12,6))\nax= sns.barplot(x.Recovered, x.Country_Region, alpha=0.8)\nplt.title(\"ConfirmedCases Country Wise\")\nplt.xlabel('# of Recovered', fontsize=12)\nplt.ylabel('Country', fontsize=12)\nplt.show()","098d79d7":"# How many countries affected \ncountries = df['Country_Region'].unique()\nprint(f'{len(countries)} countries are in dataset:\\n{countries}')","30f6bf72":"# number of Confirmed cases \nx=df.groupby(['Country_Region']).count()\nx=x.sort_values(by='Confirmed',ascending=False)\nx=x.iloc[0:10].reset_index()\nx\n# #plot\nplt.figure(figsize=(8,4))\nax= sns.barplot(x.Confirmed, x.Fatalities, alpha=0.8)\nplt.title(\"Infections Country wise\")\nplt.ylabel('Country', fontsize=12)\nplt.xlabel('Confirmed', fontsize=12)\nplt.show()","e664cce8":"# number based on Province and Fatalities\nx=df.groupby(['Province_State']).count()\nx=x.sort_values(by='Fatalities',ascending=False)\nx=x.iloc[0:100].reset_index()\nx\n# #plot\nplt.figure(figsize=(8,4))\nax= sns.barplot(x.Confirmed, x.Recovered, alpha=0.8)\nplt.title(\"Province State wise\")\nplt.ylabel('Recovered', fontsize=12)\nplt.xlabel('Confirmed', fontsize=12)\nplt.show()","8f3b88ba":"# number based on County wise and Confirmed cases\nx=df.groupby(['Country_Region']).count()\nx=x.sort_values(by='Confirmed',ascending=False)\nx=x.iloc[0:10].reset_index()\nx\n# #plot\nplt.figure(figsize=(8,4))\nax= sns.barplot(x.Confirmed, x.Fatalities, alpha=0.8)\nplt.title(\"County wise Fatalities\")\nplt.ylabel('Fatalities', fontsize=12)\nplt.xlabel('Confirmed', fontsize=12)\nplt.show()","751636ac":"# Plot to check Confirmed cases by Country \ndf.Country_Region.value_counts().nlargest(20).plot(kind='bar', figsize=(10,5))\nplt.title(\"Covid19 ConfirmedCases - Country_Region wise\")\nplt.ylabel(\"ConfirmedCases\")\nplt.xlabel(\"Ratio\");","e6f72222":"# Plot to check Confirmed cases \ndf.Confirmed.value_counts().nlargest(20).plot(kind='bar', figsize=(10,5))\nplt.title(\"Covid19 ConfirmedCases\")\nplt.ylabel(\"ConfirmedCases\")\nplt.xlabel(\"Ratio\");","fbcbc350":"# Exploratory Data Analysis\n\nlet's analyze the latest dataset in order to get a better understanding of the data and how COVID19 is affecting the world.\n\nWe will explore at how COVID19 has been growing throughout the world Since 22nd january 2020. We will be using various visualization tehniques to show the share of COVID19 Cases worldwide and explore the impact of virus.\n"}}