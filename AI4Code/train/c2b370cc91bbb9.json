{"cell_type":{"6bd24837":"code","0481460d":"code","f6054d6f":"code","2b57786c":"code","5a1919f3":"code","ed8784e8":"code","ac06d6c7":"code","cade26bc":"code","edc9e4d2":"code","8b833462":"code","0f588252":"code","11497010":"markdown"},"source":{"6bd24837":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.ticker import PercentFormatter \n\nraw = pd.read_csv(\"..\/input\/ipl\/deliveries.csv\")\n\ndef renaming(df):\n    return df.replace({\n        \"Deccan Chargers\" : \"Sunrisers Hyderabad\",\n        \"Rising Pune Supergiants\": \"Chennai Super Kings\",\n        \"Rising Pune Supergiant\" : \"Chennai Super Kings\",\n        \"Gujarat Lions\" : \"Rajasthan Royals\",\n        \"Pune Warriors\" : \"Others\",\n        \"Kochi Tuskers Kerala\" : \"Others\",\n        \"\" : \"Others\"\n        })\n\nraw[\"batting_team\"] = renaming(raw[\"batting_team\"])\nraw[\"bowling_team\"] = renaming(raw[\"bowling_team\"])\n\nraw.head()\n","0481460d":"#1\nsns.set()\n\nbatsman = raw.groupby(\"batsman\")[\"batsman_runs\"].sum().sort_values(ascending=False).head(15).reset_index()\nplt.figure(figsize = (12,6))\nsns.barplot(\"batsman\",\"batsman_runs\",data = batsman)\nplt.xticks(rotation='vertical')\nplt.xlabel(\"Batsman\")\nplt.ylabel(\"Total Runs Scored\")\nplt.title(\"Top 15 Batsman with highest runs scored\")\nplt.show()\n","f6054d6f":"#2\nbowler = raw.groupby(\"bowler\")[\"total_runs\"].sum().sort_values(ascending=False).head(15).reset_index()\nplt.figure(figsize = (12,6))\nsns.barplot(\"bowler\",\"total_runs\",data = bowler)\nplt.xticks(rotation='vertical')\nplt.xlabel(\"Bowler\")\nplt.ylabel(\"Total Runs Given\")\nplt.title(\"Top 15 Bowlers who gave highest runs\")\nplt.show()\n","2b57786c":"#3\n    \nw_types = raw[\"dismissal_kind\"].unique()\nw = [1,2,8] + list(range(4,7))\nw_types = [w_types[x] for x in w]\n\ntemp = raw.loc[raw[\"dismissal_kind\"].isin(w_types)].reset_index(drop=True).groupby(['bowler','dismissal_kind']).dismissal_kind.count().unstack(level=1, fill_value = 0)\ntemp[\"total\"] = temp.sum(axis =1)\nrunsgiven = temp.sort_values(\"total\", ascending = False).head(10).drop(\"total\", axis = 1)\nrunsgiven.columns = map(lambda x:x.upper(), list(runsgiven.columns))\n\nrunsgiven.plot(kind = \"bar\", figsize = (12,6), stacked = True)\nplt.xlabel(\"Bowler\")\nplt.ylabel(\"Total Wickets Taken\")\nplt.legend()\nplt.title(\"Top 10 Highest Wicket-Takers categorized by Type of Wicket Taken\")\n","5a1919f3":"\n#4 \n\nteam_avg = raw.groupby([\"batting_team\",\"match_id\"])[\"total_runs\"].aggregate(\"sum\").reset_index()\\\n.groupby(\"batting_team\")[\"total_runs\"].agg(average=\"mean\", n=\"count\")\\\n.reset_index().sort_values(\"average\", ascending = False).reset_index(drop = True)\n\nplt.figure(figsize = (12,6))\nsns.pointplot(\"batting_team\",\"average\",\"batting_team\", data = team_avg)\nplt.xticks(rotation = \"vertical\")\nplt.legend(\"\")\nplt.ylabel(\"Average Score\")\nplt.xlabel(\"Batting Team\")\nplt.title(\"Averags Scores of each Team\")\nplt.ylim(135,165)\nplt.show()\n","ed8784e8":"\n# 5\n\nsr = lambda x: x.mean()*100\n\ntemp = raw.groupby(\"batsman\")[\"batsman_runs\"].agg(rate=sr,n=\"count\").reset_index()\nstrike = temp[temp[\"n\"]>500].sort_values(\"rate\", ascending = False).reset_index(drop = True)[:10]\n\nplt.figure(figsize = (12,6))\nsns.pointplot(\"batsman\",\"rate\",\"batsman\", data = strike)\nplt.xticks(rotation = \"vertical\")\nplt.legend(\"\")\nplt.ylabel(\"Strike Rate\")\nplt.xlabel(\"Batsman\")\nplt.title(\"Batsmen with Highest S\/R (Balls Played > 500)\")\nplt.ylim(125,175)\nplt.show()\n","ac06d6c7":"#6\n\ndf1 = raw.groupby([\"match_id\",\"inning\",\"batting_team\"])[\"total_runs\"].sum().reset_index().pivot(\"match_id\",\"inning\",\"batting_team\").reset_index(drop = True)\ndf2 = raw.groupby([\"match_id\",\"inning\",\"batting_team\"])[\"total_runs\"].sum().reset_index().pivot(\"match_id\",\"inning\",\"total_runs\").reset_index(drop = True)\n\n#Matches with super overs\ndf2.loc[df2[1]==df2[2]]\n\n#Removing matches with super overs then joining\ndf1 = df1.loc[df2[1]!=df2[2]][[1,2]]\ndf2 = df2.loc[df2[1]!=df2[2]][[1,2]]\n\ndf1.columns = [\"t1\",\"t2\"]\nmatch = pd.concat([df1, df2], axis=1, join='inner')\nmatch[\"Won\"] = np.where(match[1]>match[2], match[\"t1\"], match[\"t2\"])\nmatch[\"Lost\"] = np.where(match[1]>match[2], match[\"t2\"], match[\"t1\"])\nmatch.reset_index(inplace = True)\n\n\ndf = pd.melt(match, value_vars=['Won', 'Lost'], id_vars = \"index\").groupby([\"variable\",\"value\"]).count().reset_index().sort_values([\"variable\",\"index\"], ascending = False)\n\nplt.figure(figsize = (12,6))\nsns.barplot(\"value\",\"index\",\"variable\", data = df)\nplt.xticks(rotation = \"vertical\")\nplt.xlabel(\"Teams\")\nplt.ylabel(\"No. of Wins(blue) and Losses(orange)\")\nplt.title(\"No. of Wins and Loses Per Team\")\n","cade26bc":"#7\n    \nbatsman = raw.groupby([\"batting_team\",\"batsman\"])[\"batsman_runs\"].agg(\"sum\").reset_index().sort_values([\"batting_team\",\"batsman_runs\"], ascending = False).groupby(\"batting_team\").head(1).sort_values(\"batsman_runs\", ascending = False).reset_index(drop = True)\nbatsman[\"team_player\"] = batsman[\"batting_team\"] + \"\\n\" + batsman[\"batsman\"]\n\nplt.figure(figsize=(12,6))\nsns.barplot(\"team_player\",\"batsman_runs\", data=batsman.loc[batsman[\"batting_team\"]!=\"Others\",:])\nplt.xticks(rotation = \"vertical\")\nplt.ylabel(\"Runs Scored\")\nplt.xlabel(\"Team and Best Batsman\")\nplt.title(\"Getting Best Batsman of all the Teams\")\n\n","edc9e4d2":"\n#8\n\nbowler = raw.loc[raw[\"dismissal_kind\"].isin(w_types)].reset_index(drop=True).groupby(['bowling_team','bowler']).dismissal_kind.count().reset_index().sort_values([\"bowling_team\",\"dismissal_kind\"], ascending = False).groupby(\"bowling_team\").head(1).sort_values(\"dismissal_kind\", ascending = False).reset_index(drop = True)\nbowler[\"team_player\"] = bowler[\"bowling_team\"] + \"\\n\" + bowler[\"bowler\"]\n\nplt.figure(figsize=(12,6))\nsns.barplot(\"team_player\",\"dismissal_kind\", data=bowler.loc[bowler[\"bowling_team\"]!=\"Others\",:])\nplt.xticks(rotation = \"vertical\")\nplt.ylabel(\"Wickets Take\")\nplt.xlabel(\"Team and Best Bowler\")\nplt.title(\"Getting Best Bowlers of all the Teams\")\n","8b833462":"#9\n#Bowled most overs and Batted most balls\n\nbowler = raw.groupby([\"bowler\",\"total_runs\"])[\"total_runs\"].agg(n = \"count\").unstack(fill_value = 0)    \nbowler[\"total\"] = np.floor(bowler.sum(axis=1)\/6)\nbowler = bowler.sort_values(\"total\",ascending = False)[:12].drop(\"total\", axis = 1)\nbowler.columns = list(map(str,(list(range(0,8)))))\nbowler.plot(kind = \"bar\", figsize = (12,6), stacked = True)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', title = \"Runs Given\")\nplt.title(\"Bowlers with Highest # of Balls and Runs composition of total balls bowled\")\n\n\nbatsman = raw.groupby(\"batsman\")[\"batsman\"].agg(n = \"count\").reset_index().sort_values(\"n\",ascending = False)[:12]\nplt.figure(figsize = (12,6))\nsns.barplot(\"batsman\",\"n\", data = batsman)\nplt.xticks(rotation = \"vertical\")\nplt.ylabel(\"No. of balls played\")\nplt.title(\"Batsman with most number of balls played\")\n\nplt.show()\n\n","0f588252":"\n#10\n\nnp.random.seed(22)\nprop= pd.melt(match, value_vars=['Won', 'Lost'], id_vars = \"index\").groupby(\"value\").apply(lambda x:x.sample(25)).reset_index(drop = True).groupby([\"variable\",\"value\"]).count().reset_index().sort_values([\"variable\",\"index\"], ascending = False).pivot(\"value\",\"variable\").reset_index()\nprop[\"total\"] = prop[\"index\"].sum(axis=1)\nprop[\"prob\"] = prop[\"index\"][\"Won\"]\/prop[\"total\"]\nprop[\"up\"] = prop[\"prob\"] + 1.96*np.sqrt(prop[\"prob\"]*(1-prop[\"prob\"])\/prop[\"total\"])\nprop[\"down\"] = prop[\"prob\"] - 1.96*np.sqrt(prop[\"prob\"]*(1-prop[\"prob\"])\/prop[\"total\"])\nprop.sort_values(\"prob\", inplace=True)\n\nplt.figure(figsize = (12,6))\nsns.pointplot(\"value\",\"prob\", hue = \"value\", data=prop, join = False)\nsns.pointplot(\"value\",\"up\", color = \"black\", data=prop, join = False)\nsns.pointplot(\"value\",\"down\", color = \"black\", data=prop, join = False)\nplt.legend(\"\")\nplt.xlabel(\"Team\")\nplt.ylabel(\"Win Percentage\")\nplt.gca().yaxis.set_major_formatter(PercentFormatter(1.0))\nplt.xticks(rotation = \"vertical\")\nplt.title(\"Winning Percentages of all the teams with Sample Confidence Intervals\")\n\nplt.show()\n\n","11497010":"Hello Everyone,\nThis Notebook is an follow up to the notebook I made last week using R (IPL Analysis with Statistical Confidence Intervals)\n\nhttps:\/\/www.kaggle.com\/priyeshmehta\/ipl-analysis-with-statistical-confidence-intervals\n\nThis notebook is created majorly to reproduce much of the Exploratory Analysis I was able to do easily in R using Python. I am a beginner, so not much of my code might look \"Pythonic\". But Let's focus on the results :) \n"}}