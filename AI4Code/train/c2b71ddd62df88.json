{"cell_type":{"377aabb8":"code","5721928f":"code","4da14db9":"code","6fec081b":"code","8c87e60d":"code","351c3b64":"code","0412f454":"code","84bc306f":"code","69d08d83":"code","709a417c":"code","6c0cb6de":"code","e7db1cef":"code","4eec9038":"code","8bcd638a":"code","bc87e68d":"code","1b0705ae":"code","72115008":"code","45c5f859":"code","d253d433":"code","1546fd99":"code","d78f2230":"code","bbbfe1d4":"code","2029bdbc":"code","026b1fb2":"code","d6d11d6c":"markdown","ad3ba5bb":"markdown","f0cb3840":"markdown","801c7de2":"markdown","bb316f8e":"markdown","57911f47":"markdown","e6521b58":"markdown","aac7f49b":"markdown"},"source":{"377aabb8":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","5721928f":"df = pd.read_csv('..\/input\/water-potability\/water_potability.csv')","4da14db9":"df.head()","6fec081b":"df.shape","8c87e60d":"df.isnull().sum() \/ df.shape[0] * 100","351c3b64":"df.dropna(inplace=True)","0412f454":"df.shape","84bc306f":"df.describe()","69d08d83":"background_color = '#F8EDF4'\ncolor_palette = ['#F3AA51', '#FCF695', '#CEE5D5', '#B7D3E9', '#567ACE', '#BBB0DC', '#DB706C', '#F1C3AA','#A7E0E1', 'D9598C']","709a417c":"fig = plt.figure(figsize=(14, 8))\ngs = fig.add_gridspec(1, 2)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\n\n\n# Title\nax0.text(0.5, 0.5, 'Countplot of the Potability\\n _______________',\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontfamily='serif', fontweight='bold')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['bottom'].set_visible(False)\n\n\n# Graph\ng = ax1.pie(df['Potability'].value_counts(),\n       autopct=lambda p : '{:.2f}%'.format(p),\n       colors=color_palette,\n       explode=(0, 0.05),\n       shadow=True,\n       textprops={'fontsize': 18})\nplt.legend(g[0], [0, 1], loc='upper right', fontsize='large')\n\n\nfig.patch.set_facecolor(background_color)\naxes = [ax0, ax1]\n\nax0.set_facecolor(background_color)\nfor s in ['top', 'right', 'left']:\n    ax0.spines[s].set_visible(False)","6c0cb6de":"fig = plt.figure(figsize=(18, 15))\ngs = fig.add_gridspec(3, 3)\ngs.update(wspace=0.3, hspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\nax3 = fig.add_subplot(gs[1, 0])\nax4 = fig.add_subplot(gs[1, 1])\nax5 = fig.add_subplot(gs[1, 2])\nax6 = fig.add_subplot(gs[2, 0])\nax7 = fig.add_subplot(gs[2, 1])\nax8 = fig.add_subplot(gs[2, 2])\naxes = [ax0, ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8]\n\nfig.patch.set_facecolor(background_color)\n\n# Title\nax1.text(0, 400, 'Boxenplot of Continuous Feature',\n        fontsize=18, fontfamily='serif', fontweight='bold',\n        horizontalalignment='center',\n        verticalalignment='center')\n\n\n# Graphs\nfor i, ax in enumerate(axes):\n    ax.set_facecolor(background_color)\n    ax.set_title(df.columns[i], fontsize=14, fontfamily='serif', fontweight='bold')\n    ax.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\n    \n    sns.boxenplot(y=df.columns[i], data=df, ax=ax, palette=[color_palette[i]], width=0.5)\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    \n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)","e7db1cef":"fig = plt.figure(figsize=(18, 15))\ngs = fig.add_gridspec(3, 3)\ngs.update(wspace=0.3, hspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\nax3 = fig.add_subplot(gs[1, 0])\nax4 = fig.add_subplot(gs[1, 1])\nax5 = fig.add_subplot(gs[1, 2])\nax6 = fig.add_subplot(gs[2, 0])\nax7 = fig.add_subplot(gs[2, 1])\nax8 = fig.add_subplot(gs[2, 2])\naxes = [ax0, ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8]\n\nkde_palette = ['#F3AA51', '#567ACE']\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax1.text(200, 0.011, 'Distribution of Continuous Feature by Potability',\n        fontsize=18, fontfamily='serif', fontweight='bold',\n        horizontalalignment='center',\n        verticalalignment='center')\n\n\n# Graphs\nfor i, ax in enumerate(axes):\n    dp_legend = False\n    if i in [2, 5, 8]:\n        dp_legend = True\n        \n    ax.set_facecolor(background_color)\n    ax.set_title(df.columns[i], fontsize=14, fontfamily='serif', fontweight='bold')\n    ax.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\n    \n    sns.kdeplot(x=df.columns[i], hue='Potability', data=df, fill=True, ax=ax, palette=kde_palette, legend=dp_legend)\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    \n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)","4eec9038":"df.corr()","8bcd638a":"f, ax = plt.subplots(1, 1, figsize=(10, 10))\n\nmask = np.triu(np.ones_like(df.corr()))\nax.text(2.5, -0.1, 'Correlation Matrix', fontsize=18, fontweight='bold', fontfamily='serif')\nsns.heatmap(df.corr(), annot=True, fmt='.2f', cmap='RdBu', square=True, mask=mask, linewidth=0.7, ax=ax)","bc87e68d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score","1b0705ae":"X = df.drop('Potability', axis=1)\ny = df['Potability']\n\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","72115008":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nscore_logreg = accuracy_score(y_pred, y_test)\n\nprint('Accuracy Score of Logistic Regression :', score_logreg)","45c5f859":"rf = RandomForestClassifier(n_estimators=1000)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nscore_rf = accuracy_score(y_pred, y_test)\n\nprint('Accuracy Score of Random Forest Classifier :', score_rf)","d253d433":"gbc = GradientBoostingClassifier()\ngbc.fit(X_train, y_train)\ny_pred = gbc.predict(X_test)\nscore_gbc = accuracy_score(y_pred, y_test)\n\nprint('Accuracy Score of Gradient Boosting Classifier :', score_gbc)","1546fd99":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\nscore_dt = accuracy_score(y_pred, y_test)\n\nprint('Accuracy Score of Decision Tree Classifier :', score_dt)","d78f2230":"# Find n_neighbors for best score\naccuracy = []\n\nfor i in range(1, 11):\n    model = KNeighborsClassifier(n_neighbors = i)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    accuracy.append(model.score(X_test, y_test))\n\nscore_knn = max(accuracy)\nprint('Accuracy Score of K-Nearest Neighbors Classifier : ', score_knn)\n\nplt.figure(figsize=(7, 4))\nplt.plot(range(1,11), accuracy, linestyle='dashed', marker='o', color='blue',\n        markersize=7, markerfacecolor='red')\nplt.xlabel('n_neighbors')\nplt.ylabel('Accuracy')\nplt.show()","bbbfe1d4":"svm = SVC()\nsvm.fit(X_train, y_train)\ny_pred = svm.predict(X_test)\nscore_svm = accuracy_score(y_pred, y_test)\n\nprint('Accuracy Score of Support Vector Classifier :', score_svm)","2029bdbc":"df_result = pd.DataFrame({'Model' : ['Logistic Regression', 'RandomForest', 'Gradient Boosting', \n                         'Decision Tree', 'K-Nearest Neighbors', 'Support Vector'],\n                         'Score' : [score_logreg, score_rf, score_gbc, score_dt, score_knn, score_svm]})\n\ndf_result.sort_values(by='Score', ascending=False, inplace=True)","026b1fb2":"fig = plt.figure(figsize=(15, 6))\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.25)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\n\n# Title\nax0.text(0.5, 0.5, 'Accuracy Score of Model\\n ___________________',\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontfamily='serif', fontweight='bold')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['left'].set_visible(False)\n\n\n# Graph\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nsns.barplot(x='Score', y='Model', data=df_result, palette=color_palette, ax=ax1)\nax1.set_xlabel('')\nax1.set_ylabel('')\n\n\nfig.patch.set_facecolor(background_color)\naxes = [ax0, ax1]\n\nfor ax in axes:\n    ax.set_facecolor(background_color)\n    for s in ['top', 'right', 'bottom']:\n        ax.spines[s].set_visible(False)","d6d11d6c":"Drop the rows with Null values and check the shape of data frame after drop.","ad3ba5bb":"## Pleas Upvote if you like my notebook. \n## Thank you!","f0cb3840":"### Check Null Value","801c7de2":"# EDA","bb316f8e":"## Correlation Matrix","57911f47":"**14.99** % of **'ph'** values are Null values.\n\n**23.84** % of **'Sulfate'** values are Null values.\n\n**4.95** % of **'Trihalomethanes'** values are Null values.","e6521b58":"# Result","aac7f49b":"# Modeling"}}