{"cell_type":{"f340deb3":"code","8648efab":"code","208bf7b6":"code","43becafa":"code","757071fe":"code","4f6e0516":"code","32bbf9b6":"code","989ac803":"code","20b4e3c9":"code","85e43752":"code","548dcc57":"code","f4a7c9a9":"code","9c76981d":"code","5d29d6fe":"code","97163aa8":"code","0845db97":"code","d0d7ac88":"code","c4ee5a04":"code","0c64bd66":"code","d9f18762":"code","d27d26ff":"code","2ddd51db":"code","5e4decd6":"code","ff478cb1":"code","2f4d6fd4":"code","b236635b":"code","2d01ef98":"code","5fb3392a":"code","637ff33c":"code","ccea1bc1":"code","9fc65876":"code","7e6fee64":"code","1095442c":"code","28202c85":"code","aef17e73":"code","496b61a1":"code","e899a3ae":"code","b8810e9e":"code","54dde815":"code","dbc37b6d":"code","80de760d":"code","2d13e296":"code","8b2bee17":"code","6809a20e":"code","8b2f737a":"code","d8d6d0d7":"code","d3875951":"code","c06f8cf1":"markdown","569f28ba":"markdown","beebb727":"markdown","a9472332":"markdown","a42ad1d4":"markdown"},"source":{"f340deb3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8648efab":"# analysis of kaggle data science compettition - National Football League\n# https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/data\n# first we import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport os\nimport sys\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.cm as cm\nfrom  matplotlib.colors import rgb2hex\nfrom matplotlib.colors import Normalize\nimport matplotlib as mpl\nplt.style.use('fivethirtyeight')","208bf7b6":"players = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/players.csv\")","43becafa":"players.head(n=5)","757071fe":"# players data description\nplayers.describe()\nplayers.info()\nplayers.shape \nplayers.columns\nplayers.dtypes\nplayers.isnull().sum()","4f6e0516":"players[\"birthYear\"] = 0\nplayers[\"birthMonth\"] = 0\n#There are NA values in birthDate so that we should drop them\nplayers.dropna(subset=[\"birthDate\"], inplace=True)\nfor idx, row in players.iterrows():\n    if len(row['birthDate'].split('\/')) == 3: # 05\/17\/1994 \n        players.loc[idx, 'birthYear'] = row['birthDate'].split('\/')[2]\n        players.loc[idx, 'birthMonth'] = row['birthDate'].split('\/')[0]\n        \n    elif len(row['birthDate'].split('-')) == 3: # 1995-05-05\n        players.loc[idx, 'birthYear'] = row['birthDate'].split('-')[0]\n        players.loc[idx, 'birthMonth'] = row['birthDate'].split('-')[1]","32bbf9b6":"players.isnull().sum()","989ac803":"players.tail(n=5)","20b4e3c9":"players.head()","85e43752":"# lets create a new column for age\nplayers['age'] = 0\nfor idx, row in players.iterrows():\n    players.loc[idx, 'age'] = 2020 - int(row['birthYear'])","548dcc57":"players.head()","f4a7c9a9":"# convert heights to cm and weights to kg\nplayers_heights = players[\"height\"] # Get the Height data from DataFrame\nplayers_heights = players_heights.apply(lambda x: x.split(\"-\")) # Split the heights by hyphen (\"-\")\n\n# Convert Heights to Centimeters and add them to DataFrame\nplayers[\"height\"] = players_heights.apply(lambda x: int(x[0]) * 12 + int(x[1]) if len(x) == 2 else int(x[0])) * 2.54\n\n# Convert Weights to Kilograms and them to DataFrame\nplayers[\"weight\"] = round(players.weight * 0.453592, 2)\n\n","9c76981d":"players","5d29d6fe":"players","97163aa8":"#height distribution plot \nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nax.set_title('Players Height Distribution')\nax.set_xlabel('Height')\nax.set_ylabel('Frequency')\n\nplayers.height.hist(bins=50, ax=ax)\nplt.show();\n","0845db97":"# weight distribution plot \nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nax.set_title('Players Weight Distribution')\nax.set_xlabel('Weight')\nax.set_ylabel('Frequency')\n\nplayers.weight.hist(bins=50, ax=ax)\nplt.show();","d0d7ac88":"#Visualization of the players data \n# position vs height\nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nax.set_title('Players Height vs Position')\nax.set_xlabel('Height in cm')\nax.set_ylabel('Position')\nax.set_ylim(0, 100)\n\nplayers.height.hist(bins=50, ax=ax)\nplt.show()\n","c4ee5a04":"# position vs weight\nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nax.set_title('Players Weight vs Position')\nax.set_xlabel('Weight in kg')\nax.set_ylabel('Position')\nax.set_ylim(0, 100)\n\nplayers.weight.hist(bins=50, ax=ax)\nplt.show()","0c64bd66":"# top 10 Position played by players\ntop_10 = players.groupby(['Position'])['Position'].count().sort_values(ascending=False).head(10)\ntop_10.plot(kind='bar', figsize=(10, 6))\nplt.show()\n","d9f18762":"# player height vs weight\nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nsns.regplot(x='weight', y='height', data=players, fit_reg=False, scatter_kws={'s': 80})\nplt.show();","d27d26ff":"# college with most players (Top 10 college team)  visualization\n# top 10 college team\ntop_10 = players.groupby(['collegeName'])['collegeName'].count().sort_values(ascending=False).head(10)\ntop_10.plot(kind='bar', figsize=(10, 6))\nplt.show();\n","2ddd51db":"#players count with age visualization\nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nax.set_title('Players Age vs Position')\nax.set_xlabel('Age')\nax.set_ylabel('Position')\nax.set_ylim(0, 100)\n\nplayers.age.hist(bins=50, ax=ax)\nplt.show();","5e4decd6":"# games data \ngames = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')","ff478cb1":"games.head(n=5)","2f4d6fd4":"#games data description\ngames.describe()\ngames.info()\ngames.shape\ngames.columns\ngames.dtypes\ngames.isnull().sum()\ngames.isnull().sum().sum()","b236635b":"# add column month of year and day of week\ngames['month'] = pd.to_datetime(games['gameDate']).dt.month_name()\ngames['day_of_week'] = pd.to_datetime(games['gameDate']).dt.day_name()\ngames['day'] = games['gameDate'].apply(lambda x: int(x.split('\/')[1]))\ngames.head()","2d01ef98":"#writing function for perentage  at the top of bar \ndef write_percentage(ax,total_size):\n    for p in ax.patches:\n        x=p.get_x()+p.get_width()\/2\n        y=p.get_y()+p.get_height()\n        val=int(p.get_height()\/total_size*100)\n        ax.annotate('{}%'.format(val), (x,y), ha='center', va='bottom', fontsize=10)","5fb3392a":" #games data visulaization count per season with perentage at top of bar \nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nwrite_percentage(sns.countplot(x='season', data=games , palette='Set2', order=games.season.unique()),games.season.count())","637ff33c":"# games data visulaization Number of games per month with percentage at top of bar \nmpl.rc('font', size=15)\nplt.figure(figsize=(8, 6))\nax=(sns.countplot(x='month', data=games , palette='Set2', order=games.month.unique()))\nwrite_percentage(ax,games.month.count())\nax.set_title('Number of games per month')\nplt.show()\n","ccea1bc1":"#games data visulaization Number of games per day with percentage at top of bar with title number of games per day\nmpl.rc('font', size=15)\nplt.figure(figsize=(8, 6))\nax= sns.countplot(x='day_of_week', data=games , palette='Set2', order=games.day_of_week.unique())\nwrite_percentage(ax,games.day_of_week.count())\nax.set_title('Number of games per day')\nplt.show();","9fc65876":"# games data visulaization count per week\nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nsns.countplot(x='week', data=games , palette='Set2', order=games.week.unique())\nplt.show();","7e6fee64":"#Number of games per day with percentage at top of bar with title number of games per day\nmpl.rc('figure', figsize=(10, 6))\nplt.figure(figsize=(15, 7))\nax =sns.countplot(x='day', data=games , palette='Set2', order=games.day.unique())\nwrite_percentage(ax,games.day.count())\nax.set_title('Number of games per day')\nplt.show();","1095442c":"#Number of games for gameTimeEastern and gameTimeLocal in ascending order with percentage at top of bar with title number of games per gameTimeEastern\nmpl.rc('figure', figsize=(10, 6))\nplt.figure(figsize=(15, 7))\nax=sns.countplot(x='gameTimeEastern', data=games , palette='Set2', order=games.gameTimeEastern.unique())\nwrite_percentage(ax,games.gameTimeEastern.count())\nax.set_title('Number of games per gameTimeEastern')\nax.tick_params('x', labelrotation=30)\nplt.show();","28202c85":"#Plotting Number of Games played in each month for each season\nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 2, box.height * 2])\n\nax.set_title('Number of Games played in each month for each season')\nax.set_xlabel('Season')\nax.set_ylabel('Number of Games')\n\nax=sns.countplot(x='season', hue='month', data=games, palette='Set2', order=games.season.unique())\n\nplt.show();","aef17e73":"plays= pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/plays.csv\")","496b61a1":"plays.head(n=5)","e899a3ae":"plays.info()\nplays.isnull().sum()","b8810e9e":"plays['specialTeamsPlayType'].value_counts().to_frame()","54dde815":"# plays data visulaization count per quarter\nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nsns.countplot(x='quarter', data=plays , palette='Set2', order=plays.quarter.unique())\nplt.show();","dbc37b6d":"#play result distribution for each quarter with bar plot\nmpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\nsns.countplot(x='playResult', hue='quarter', data=plays , palette='Set2', order=plays.quarter.unique())\nplt.show()","80de760d":"#preSnapHomeScore with distribution plot with bins=12\nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nsns.distplot(plays.preSnapHomeScore, bins=12)\nplt.show();\n","2d13e296":"#Number of plays with down \nsns.set_style('whitegrid')\nsns.set_context('notebook', font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\nsns.countplot(x='down', data=plays , palette='Set2', order=plays.down.unique())\nplt.show();","8b2bee17":"#Number of plays with yardsToGo\nmpl.rc('font', size=12) \nplt.figure(figsize=(12, 6))\n\nax = sns.countplot(x='yardsToGo', data=plays)\nax.set_title('Number of plays for every yards to go category');","6809a20e":"tracking2020 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv\")","8b2f737a":"tracking2020.head(n=5)","d8d6d0d7":"tracking2020.info()\ntracking2020.describe()\ntracking2020.shape\ntracking2020.columns\ntracking2020.dtypes\ntracking2020.isnull().sum()","d3875951":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2020.query('gameId == 2021010300 and playId == 40').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","c06f8cf1":"#                      Tracking Data****","569f28ba":"# #  **Players Data**","beebb727":"# # ****Plays Data info**** ","a9472332":"# players birth year distribution plot with sns displot\nmpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(players['birthYear'], bins=25)\nax.set_title('Players birth year Distribution');","a42ad1d4":"# # ****Games Data****"}}