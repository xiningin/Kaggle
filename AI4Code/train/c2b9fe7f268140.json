{"cell_type":{"90e0ddad":"code","8293c348":"code","c0cb207b":"code","f0bff015":"code","01ee5494":"code","9ba55031":"code","a341f5b0":"code","799190cb":"code","5ee7bbaa":"code","054f412e":"code","54b90746":"code","17534a3c":"code","e8814d64":"code","d931dadb":"code","354d1060":"code","f544254c":"code","f354ee8d":"code","b334bcc1":"code","50649cb2":"markdown","c21b83ad":"markdown","eb2261cc":"markdown","8a553c66":"markdown","c669323d":"markdown","38a2e582":"markdown","bb8e66a0":"markdown"},"source":{"90e0ddad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\nimport math\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8293c348":"# Read dataset\nall_df = pd.read_csv('\/kaggle\/input\/coronavirus-2019ncov\/covid-19-all.csv', names=['Country', 'Province', 'Lat', 'Long', 'Confirmed', 'Recovered', 'Deaths', 'Date'], header=0)\n#all_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv',names=['Country', 'Province', 'Lat', 'Long', 'Confirmed', 'Recovered', 'Deaths', 'Date'], header=0)\n#all_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', names=['SNo', 'Date', 'Province', 'Country', 'Last update','Confirmed', 'Deaths', 'Recovered'], header=0)\n#all_df = pd.read_csv('..\/input\/covid19-by-country-with-government-response\/covid19_by_country.csv')\n\n#all_df = all_df.drop(['recoveries','confirmed_inc','deaths_inc','recoveries_inc','ECR','CountryAlpha3Code','GRTStringencyIndex','DaysSince100Cases','DaysSince1Cases','confirmed_PopPct','deaths_PopPct','recoveries_PopPct'], axis=1)\n#all_df = all_df.rename(columns={'Country': 'Country', 'Date': 'Date','confirmed':'Confirmed','deaths':'Deaths'})\nprint(all_df.tail())\n#country_data = country_data.drop(['SNo','Province\/State', 'Last Update'], axis=1)\n#all_df.drop(['Lat', 'Long'], inplace = True, axis=1)\n#all_df.drop(['SNo'], inplace = True, axis=1)\n# Convert Date to datetime object\nall_df['Date'] = all_df['Date'].apply(pd.Timestamp)\n# Sum all provinces\n#country_data = pd.pivot_table(all_df, values=['Confirmed', 'Recovered','Deaths'], index=['Date'], aggfunc=np.sum)\nall_df = all_df.groupby(['Country', 'Date']).sum().reset_index()","c0cb207b":"#all_df.sample(5)\nall_df.tail()","f0bff015":"def logistic(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1","01ee5494":"country = 'Sweden'\n\ndf = all_df[all_df['Country'] == country]\nprint(df.head())\ndf['Confirmed'] = df['Confirmed'] - 70000\ndf = df[153:-1]\nprint(df.head())\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","9ba55031":"p0 = [100000, 0.2, 125] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","a341f5b0":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","799190cb":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","5ee7bbaa":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","054f412e":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","54b90746":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","17534a3c":"country = 'Mexico'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","e8814d64":"p0 = [735000, 0.2, 90] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","d931dadb":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","354d1060":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","f544254c":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","f354ee8d":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","b334bcc1":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","50649cb2":"## Fitting the logistic function on the data\nWe used some initialisation for the parameters as follows:\n* L (the maximum number of confirmed cases) = 80000 taken from the China example\n* k (growth rate) = 0.2 approximated value from most of the countries\n* x0 (the day of the inflexion) = 50 approximated","c21b83ad":"# Sweden","eb2261cc":"## Disclaimer I am not a trained healthcare nor forecasting professional and this is a hobby prediction.\n## This is a forked version of work done by attribution Oriana Oniciuc orianao with notice changed countries. Please see original code here:\nhttps:\/\/www.kaggle.com\/orianao\/covid-19-logistic-curve-prediction","8a553c66":"## Introduction\n\nLet's try to fit a logistic curve over the cases of COVID-19 in different countries. Idea: https:\/\/www.youtube.com\/watch?v=Kas0tIxDvrg","c669323d":"## Data preparation\n\nAdding the needed packages, reading the data and creating some basic aggregations.","38a2e582":"# Mexico","bb8e66a0":"### Defining the logistic function"}}