{"cell_type":{"ab2c9ce1":"code","bbf982d1":"code","7085e2c4":"code","c6956faf":"code","6afd5e4c":"code","cbfa28ee":"code","066e6d89":"code","bf3901c1":"markdown","ca92bd92":"markdown","03822f20":"markdown","fb42d04b":"markdown","0c49750e":"markdown","d7cb7fbd":"markdown"},"source":{"ab2c9ce1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bbf982d1":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","7085e2c4":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","c6956faf":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","6afd5e4c":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","cbfa28ee":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])","066e6d89":"model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","bf3901c1":"<h2> Builiding a Random forest model <\/h2>\n\nFollowing the notebook of Alexis Cook, we will build a random forest model. \n\nWe'll build what's known as a random forest model. This model is constructed of several \"trees\" that will individually consider each passenger's data and vote on whether the individual survived. Then, the random forest model makes a democratic decision: the outcome with the most votes wins!","ca92bd92":"From this you can see that almost 75% of the women on board survived, whereas only 19% of the men lived to tell about it. Since gender seems to be such a strong indicator of survival, the submission file in **gender_submission.csv** is not a bad first guess!","03822f20":"Explore a pattern\u00b6\nRemember that the sample submission file in **gender_submission.csv** assumes that all female passengers survived (and all male passengers died).\n\nIs this a reasonable first guess? We'll check if this pattern holds true in the data (in train.csv).\n\nRunning the below cells to find this out. ","fb42d04b":"This is my first exporation in Kaggle and learning to make submission in Kaggle. Thank you Alexis Cook for the Notebook https:\/\/www.kaggle.com\/alexisbcook\/titanic-tutorial","0c49750e":"The code cell below looks for patterns in four different columns (\"Pclass\", \"Sex\", \"SibSp\", and \"Parch\") of the data. It constructs the trees in the random forest model based on patterns in the **train.csv** file, before generating predictions for the passengers in **test.csv**. The code also saves these new predictions in a CSV file **submission.csv**.","d7cb7fbd":"Pandas module enables us to handle large data sets containing a considerably huge amount of data for processing altogether.\n\nThis is when Python loc() function comes into the picture. The loc() function helps us to retrieve data values from a dataset at an ease.\n\nUsing the loc() function, we can access the data values fitted in the particular row or column based on the index value passed to the function.\n\n**Syntax:**\n> pandas.DataFrame.loc[index label]\n\nSource:https:\/\/www.askpython.com\/python-modules\/pandas\/python-loc-function"}}