{"cell_type":{"79e7c73f":"code","e9ccf2d7":"code","0115c8c6":"code","b73a5d50":"code","513ef7a4":"code","a1ed9d86":"code","75ae40fa":"code","931578d6":"code","2680fb2b":"code","c7c4f1ce":"code","f9b1da51":"code","a8a4bee2":"code","87163f2d":"code","a0d9519a":"code","362cb6e3":"code","0e2c0218":"code","0070e002":"code","34bd53bd":"code","bdfda363":"code","488a415b":"code","484d7431":"markdown","c2418b03":"markdown"},"source":{"79e7c73f":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\n\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","e9ccf2d7":"data0 = pd.read_csv(\"..\/input\/us-gasoline-and-diesel-retail-prices-19952021\/PET_PRI_GND_DCUS_NUS_W.csv\")\ndata0[0:2].T","0115c8c6":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=data0['Date'],y=data0['A1'],name=\"A1\"),secondary_y=False,)\nfig.add_trace(go.Scatter(x=data0['Date'],y=data0['D1'],name=\"D1\"),secondary_y=False,)\nfig.update_layout(autosize=False,width=700,height=500,title_text=\"Gasoline Diesel Price Change\")\nfig.update_xaxes(title_text=\"Date\")\nfig.update_yaxes(title_text=\"Price\",secondary_y=False)\nfig.show()","b73a5d50":"trainy=data0['D1']\ntrain=data0.drop(['D1','Date'],axis=1)\ntrain[0:2].T","513ef7a4":"df_columns=train.columns.to_list()\nprint(df_columns)","a1ed9d86":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)","75ae40fa":"train_df.columns=df_columns\n#test_df.columns=df_columns","931578d6":"def create_numeric_feature(input_df):\n    use_columns = df_columns\n    return input_df[use_columns].copy()","2680fb2b":"create_numeric_feature(train_df)","c7c4f1ce":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","f9b1da51":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","a8a4bee2":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","87163f2d":"train_feat_df.head().T","a0d9519a":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, \n             y, \n             cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","362cb6e3":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n}","0e2c0218":"y = trainy","0070e002":"from sklearn.model_selection import KFold\n\nfold = KFold(n_splits=5, shuffle=True, random_state=71)\ncv = list(fold.split(train_feat_df, y))\noof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)","34bd53bd":"fig,ax = plt.subplots(figsize=(8,8))\nax.set_xlabel('oof',fontsize=20)\nax.set_ylabel('train_y',fontsize=20)\nax.scatter(oof,y)","bdfda363":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    return fig, ax\n\nfig, ax = visualize_importance(models, train_feat_df)","488a415b":"fig,ax = plt.subplots(figsize=(8,8))\nax.set_xlabel('P2',fontsize=20)\nax.set_ylabel('D1',fontsize=20)\nax.scatter(train['P2'],y)","484d7431":"### 'P2'(Premium Conventional Retail Gasoline Prices) is the most important factor for 'D1'(No 2 Diesel Retail Prices).","c2418b03":"The data contains the following information:\n\n* A1: Weekly U.S. All Grades All Formulations Retail Gasoline Prices (Dollars per Gallon)\n* A2: Weekly U.S. All Grades Conventional Retail Gasoline Prices (Dollars per Gallon)\n* A3: Weekly U.S. All Grades Reformulated Retail Gasoline Prices (Dollars per Gallon)\n* R1: Weekly U.S. Regular All Formulations Retail Gasoline Prices (Dollars per Gallon)\n* R2: Weekly U.S. Regular Conventional Retail Gasoline Prices (Dollars per Gallon)\n* R3: Weekly U.S. Regular Reformulated Retail Gasoline Prices (Dollars per Gallon)\n* M1: Weekly U.S. Midgrade All Formulations Retail Gasoline Prices (Dollars per Gallon)\n* M2: Weekly U.S. Midgrade Conventional Retail Gasoline Prices (Dollars per Gallon)\n* M3: Weekly U.S. Midgrade Reformulated Retail Gasoline Prices (Dollars per Gallon)\n* P1: Weekly U.S. Premium All Formulations Retail Gasoline Prices (Dollars per Gallon)\n* P2: Weekly U.S. Premium Conventional Retail Gasoline Prices (Dollars per Gallon)\n* P3: Weekly U.S. Premium Reformulated Retail Gasoline Prices (Dollars per Gallon)\n* D1: Weekly U.S. No 2 Diesel Retail Prices (Dollars per Gallon)"}}