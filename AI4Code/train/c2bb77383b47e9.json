{"cell_type":{"3af2f6b6":"code","c110c2f8":"code","20f3da64":"code","7101bf40":"code","e320e97c":"code","5af8b3ce":"code","d5f8a448":"code","6c1699de":"code","d77b07ef":"code","e46ed128":"code","80206098":"code","f1f1f2f8":"code","4671379e":"code","5057e7e6":"code","6c2644a9":"code","e4e07033":"code","e0af8d8f":"code","e6eced4b":"code","e6cde8dc":"code","da479c32":"code","85d784c8":"code","dffbcd9b":"code","cab5f740":"code","03199f85":"code","14bb6de1":"code","bc383970":"code","06965e27":"code","575d39f1":"code","ba7c2c03":"code","5a0129a1":"code","ba7803e2":"code","b08f564c":"code","c93aa17b":"code","0767f9cb":"code","6fa0ed1c":"code","5077a893":"code","143d70d4":"code","55309b2b":"code","68a7a373":"code","b85ad6dd":"code","a18e42be":"code","6d62327f":"code","0017a016":"code","65b7aa8d":"code","ff5f3436":"code","2cdbc401":"code","0e013d6d":"code","39d1580f":"code","96e227b7":"code","b10e138d":"code","75da9696":"code","24beae1c":"code","64dc0abe":"code","22623c33":"code","19f059da":"code","287ee1c4":"code","a3ff5676":"code","842f0f27":"code","eaee621b":"code","9bf7cfa2":"code","ae9cd072":"code","8cb62a53":"code","84f089dd":"code","c8220dff":"code","08bc4b55":"code","cc88d312":"markdown","6fd664ed":"markdown","7ea34d08":"markdown","4f9b3e93":"markdown","130480b4":"markdown","a2d534e5":"markdown","a9b31798":"markdown","05226a4a":"markdown","0d2b51bd":"markdown","cbbafd6e":"markdown","2576e8cd":"markdown","6b2752a0":"markdown","08b72119":"markdown","d8e07cfb":"markdown","a5b8f0d2":"markdown","356005ad":"markdown","6cead5d9":"markdown","d203ce36":"markdown","6ac00187":"markdown","3312336c":"markdown","d8a1c6bf":"markdown","98238f84":"markdown","16d8b833":"markdown","e9f4144f":"markdown","7bc4c85b":"markdown","9065f51f":"markdown","80e33ab7":"markdown","603cda9a":"markdown","0cf78ba5":"markdown"},"source":{"3af2f6b6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport lightgbm as lgb\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom scipy.stats import uniform, randint\nimport sklearn.metrics as skm\nimport sklearn.model_selection as skms\nimport sklearn.preprocessing as skp\nfrom sklearn.linear_model import LogisticRegression\nimport sklearn.ensemble as ske\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom pprint import pprint\nimport random\nimport librosa, IPython\nimport librosa.display as lplt\nseed = 12\nnp.random.seed(seed)","c110c2f8":"df = pd.read_csv('\/kaggle\/input\/gtzan-dataset-music-genre-classification\/Data\/features_3_sec.csv')\ndf.head()","20f3da64":"print(\"Dataset has\",df.shape)\nprint(\"Count of Positive and Negative samples\")\ndf.label.value_counts().reset_index()","7101bf40":"audio_fp = '\/kaggle\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/blues\/blues.00000.wav'\naudio_data, sr = librosa.load(audio_fp)\naudio_data, _ = librosa.effects.trim(audio_data)","e320e97c":"# play sample file\nIPython.display.Audio(audio_data, rate=sr)","5af8b3ce":"# plot sample file\nplt.figure(figsize=(15,5))\nlplt.waveplot(audio_data)\nplt.show()","d5f8a448":"# Default FFT window size\nn_fft = 2048 # window size\nhop_length = 512 # window hop length for STFT\n\nstft = librosa.stft(audio_data, n_fft=n_fft, hop_length=hop_length)\nstft_db = librosa.amplitude_to_db(stft, ref=np.max)\n\nplt.figure(figsize=(12,4))\nlplt.specshow(stft, sr=sr, x_axis='time', y_axis='hz')\nplt.colorbar()\nplt.title(\"Spectrogram with amplitude\")\nplt.show()\n\nplt.figure(figsize=(12,4))\nlplt.specshow(stft_db, sr=sr, x_axis='time', y_axis='log', cmap='cool')\nplt.colorbar()\nplt.title(\"Spectrogram with decibel log\")\nplt.show()","6c1699de":"# plot zoomed audio wave \nstart = 1000\nend = 1200\nplt.figure(figsize=(16,4))\nplt.plot(audio_data[start:end])\nplt.show()","d77b07ef":"mel_spec = librosa.feature.melspectrogram(audio_data, sr=sr)\nmel_spec_db = librosa.amplitude_to_db(mel_spec, ref=np.max)\nplt.figure(figsize=(16,6))\nlplt.specshow(mel_spec_db, sr=sr, hop_length=hop_length, x_axis='time', y_axis='log', cmap='cool')\nplt.colorbar()\nplt.title(\"Mel Spectrogram\")\nplt.show()","e46ed128":"chroma = librosa.feature.chroma_stft(audio_data, sr=sr)\nplt.figure(figsize=(16,6))\nlplt.specshow(chroma, sr=sr, x_axis='time', y_axis='chroma', cmap='coolwarm')\nplt.colorbar()\nplt.title(\"Chroma Features\")\nplt.show()","80206098":"# Computing the Correlation Matrix\nspike_cols = [col for col in df.columns if 'mean' in col]\ncorr = df[spike_cols].corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(16, 11));\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(0, 25, as_cmap=True, s = 90, l = 45, n = 5)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n\nplt.title('Correlation Heatmap (MEAN variables)', fontsize = 20)\nplt.xticks(fontsize = 10)\nplt.yticks(fontsize = 10);\nplt.savefig(\"Corr_Heatmap.png\")","f1f1f2f8":"x = df[[\"label\", \"tempo\"]]\n\nfig, ax = plt.subplots(figsize=(16, 8));\nsns.boxplot(x = \"label\", y = \"tempo\", data = x, palette = 'husl');\n\nplt.title('BPM Boxplot for Genres', fontsize = 20)\nplt.xticks(fontsize = 14)\nplt.yticks(fontsize = 10);\nplt.xlabel(\"Genre\", fontsize = 15)\nplt.ylabel(\"BPM\", fontsize = 15)\nplt.savefig(\"BPM_Boxplot.png\")","4671379e":"data = df.iloc[0:, 1:]\ny = data['label']\nX = data.loc[:, data.columns != 'label']\n\n# normalize\ncols = X.columns\nmin_max_scaler = skp.MinMaxScaler()\nnp_scaled = min_max_scaler.fit_transform(X)\nX = pd.DataFrame(np_scaled, columns = cols)\n\n# Top 2 pca components\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(X)\nprincipalDf = pd.DataFrame(data = principalComponents, columns = ['pc1', 'pc2'])\n\n# concatenate with target label\nfinalDf = pd.concat([principalDf, y], axis = 1)\n\nplt.figure(figsize = (16, 9))\nsns.scatterplot(x = \"pc1\", y = \"pc2\", data = finalDf, hue = \"label\", alpha = 0.7, s = 100);\n\nplt.title('PCA on Genres', fontsize = 20)\nplt.xticks(fontsize = 14)\nplt.yticks(fontsize = 10);\nplt.xlabel(\"Principal Component 1\", fontsize = 15)\nplt.ylabel(\"Principal Component 2\", fontsize = 15)\nplt.savefig(\"PCA_Scattert.png\")","5057e7e6":"# find all columns with any NA values\nprint(\"Columns with NA values are\",list(df.columns[df.isnull().any()]))","6c2644a9":"# map labels to index\nlabel_index = dict()\nindex_label = dict()\nfor i, x in enumerate(df.label.unique()):\n    label_index[x] = i\n    index_label[i] = x\nprint(label_index)\nprint(index_label)","e4e07033":"# update labels in df to index\ndf.label = [label_index[l] for l in df.label]","e0af8d8f":"# shuffle samples\ndf_shuffle = df.sample(frac=1, random_state=seed).reset_index(drop=True)","e6eced4b":"# remove irrelevant columns\ndf_shuffle.drop(['filename', 'length'], axis=1, inplace=True)\ndf_y = df_shuffle.pop('label')\ndf_X = df_shuffle\n\n# split into train dev and test\nX_train, df_test_valid_X, y_train, df_test_valid_y = skms.train_test_split(df_X, df_y, train_size=0.7, random_state=seed, stratify=df_y)\nX_dev, X_test, y_dev, y_test = skms.train_test_split(df_test_valid_X, df_test_valid_y, train_size=0.66, random_state=seed, stratify=df_test_valid_y)","e6cde8dc":"print(f\"Train set has {X_train.shape[0]} records out of {len(df_shuffle)} which is {round(X_train.shape[0]\/len(df_shuffle)*100)}%\")\nprint(f\"Dev set has {X_dev.shape[0]} records out of {len(df_shuffle)} which is {round(X_dev.shape[0]\/len(df_shuffle)*100)}%\")\nprint(f\"Test set has {X_test.shape[0]} records out of {len(df_shuffle)} which is {round(X_test.shape[0]\/len(df_shuffle)*100)}%\")","da479c32":"print(y_train.value_counts()[0]\/y_train.shape[0]*100)\nprint(y_dev.value_counts()[0]\/y_dev.shape[0]*100)\nprint(y_test.value_counts()[0]\/y_test.shape[0]*100)","85d784c8":"X_train[:5]","dffbcd9b":"scaler = skp.StandardScaler()\nX_train = pd.DataFrame(scaler.fit_transform(X_train), columns=X_train.columns)\nX_dev = pd.DataFrame(scaler.transform(X_dev), columns=X_train.columns)\nX_test = pd.DataFrame(scaler.transform(X_test), columns=X_train.columns)","cab5f740":"X_test[:5]","03199f85":"def predictProba(clf, X, dev=False):\n    y_true = y_train\n    if dev:\n        X = X_dev[X.columns]\n        y_true = y_dev\n    y_pred_proba_X = clf.predict_proba(X)\n    y_pred_X = clf.predict(X)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    skm.plot_confusion_matrix(clf, X, y_true, display_labels=X.columns, cmap=plt.cm.Blues, xticks_rotation=90, ax=ax)\n    plt.show()\n    print(skm.classification_report(y_true, y_pred_X, digits=3))\n    print(\"=====================================================\")","14bb6de1":"lr = LogisticRegression(random_state=seed)\nlr.fit(X_train,y_train)\npredictProba(lr, X_train)\npredictProba(lr, X_train, dev=True)","bc383970":"perm = PermutationImportance(lr, random_state=seed).fit(X_train, y_train, n_iter=10)\nprint(\"Feature Importances using Permutation Importance\")\neli5.show_weights(perm, feature_names = X_dev.columns.tolist())","06965e27":"# plot the permutation importances\nperm_indices = np.argsort(perm.feature_importances_)[::-1]\nperm_features = [X_dev.columns.tolist()[xx] for xx in perm_indices]\nplt.figure(figsize=(14, 14))\nplt.title(\"Logistic Regression feature importance via permutation importance\")\nplt.barh(range(X_dev.shape[1]), perm.feature_importances_[perm_indices])\nplt.yticks(range(X_dev.shape[1]), perm_features)\nplt.ylim([X_dev.shape[1], -1])\nplt.show()","575d39f1":"# build model using perm selected top 30 features\nlr = LogisticRegression()\nX_train_perm = X_train[perm_features[:30]]\nX_train_rfe = X_train_perm\nlr.fit(X_train_perm,y_train)\npredictProba(lr, X_train_perm)\npredictProba(lr, X_train_perm, dev=True)","ba7c2c03":"# plot correlation among top 30 selected featuers\nplt.figure(figsize = (18, 10))\nsns.heatmap(X_train_perm.corr(method='spearman'), annot = True, linewidths=.2, cmap=sns.diverging_palette(220, 10, as_cmap=True))\nplt.show()","5a0129a1":"lr = LogisticRegression()\nlr.fit(X_train_rfe,y_train)\npredictProba(lr, X_train_rfe)","ba7803e2":"predictProba(lr, X_train_rfe, True)","b08f564c":"rfc = ske.RandomForestClassifier(random_state=seed, n_jobs=-1)\nrfc.fit(X_train_rfe, y_train)\npredictProba(rfc, X_train_rfe)","c93aa17b":"predictProba(rfc, X_train_rfe, True)","0767f9cb":"abc = ske.AdaBoostClassifier(n_estimators=100, random_state=seed)\nabc.fit(X_train_rfe, y_train)\npredictProba(abc, X_train_rfe)","6fa0ed1c":"predictProba(abc, X_train_rfe, True)","5077a893":"gbc = ske.GradientBoostingClassifier(n_estimators=100, random_state=seed)\ngbc.fit(X_train_rfe, y_train)\npredictProba(gbc, X_train_rfe)","143d70d4":"predictProba(gbc, X_train_rfe, True)","55309b2b":"X_train_rfe.shape","68a7a373":"train_data = lgb.Dataset(X_train_rfe, label=y_train)","b85ad6dd":"param = {'num_leaves': 31, 'objective': 'multiclass','num_class':10}","a18e42be":"#gbc = ske.GradientBoostingClassifier(n_estimators=100, random_state=seed)\nlgbm = lgb.train(param, train_data, 20)\n#lgbm.fit(X_train_rfe, y_train)\n#predictProba(gbc, X_train_rfe)","6d62327f":"preds = lgbm.predict(X_train_rfe)","0017a016":"pred_labels = [np.argmax(pred) for pred in preds]","65b7aa8d":"pred_labels[:5], y_train[:5]","ff5f3436":"def predictProbaForLightGMB(model, X, dev=False):\n    y_true = y_train\n    if dev:\n        X = X_dev[X.columns]\n        y_true = y_dev\n    y_pred_proba_X = model.predict(X)\n    y_pred_X = np.array([np.argmax(pred) for pred in model.predict(X)])\n    #fig, ax = plt.subplots(figsize=(6, 6))\n    #skm.plot_confusion_matrix(model, X, y_true, display_labels=X.columns, cmap=plt.cm.Blues, xticks_rotation=90, ax=ax)\n    #plt.show()\n    print(skm.classification_report(y_true, y_pred_X, digits=3))\n    print(\"=====================================================\")","2cdbc401":"predictProbaForLightGMB(lgbm,X_train_rfe)","0e013d6d":"import xgboost as xgb\nprint(xgb.__version__)","39d1580f":"xgbc = xgb.XGBClassifier(n_estimators=100, random_state=seed)\nxgbc.fit(X_train_rfe, y_train)\npredictProba(xgbc, X_train_rfe)","96e227b7":"predictProba(xgbc, X_train_rfe, True)","b10e138d":"import catboost as cb\nprint(cb.__version__)","75da9696":"cbc = cb.CatBoostClassifier(random_state=seed, verbose=0, eval_metric='Accuracy', loss_function='MultiClass')\ncbc.fit(X_train_rfe, y_train)\npredictProba(cbc, X_train_rfe)","24beae1c":"predictProba(cbc, X_train_rfe, True)","64dc0abe":"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 10, stop = 400, num = 4)]\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(1, 60, num = 5)]\n# Minimum number of samples required to split a node\nmin_samples_split = [5, 10, 15]\n\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split}\n\npprint(random_grid)","22623c33":"# Use grid search to find best hyperparameters\nrfc_n = ske.RandomForestClassifier(random_state=seed, n_jobs=-1)\nrf_random = skms.GridSearchCV(estimator = rfc_n, param_grid=random_grid, cv = 5, verbose=2, n_jobs = -1, scoring='f1_weighted')\n# Fit the random search model\nrf_random.fit(X_train_rfe, y_train)","19f059da":"# best random model \nprint(rf_random.best_estimator_)","287ee1c4":"# Performance metrics\npredictProba(rf_random.best_estimator_, X_train_rfe)","a3ff5676":"predictProba(rf_random.best_estimator_, X_train_rfe, True)","842f0f27":"xgb_model = xgb.XGBClassifier(n_estimators=100, random_state=seed)\n\nxgb_params = {\n    \"colsample_bytree\": uniform(0.7, 0.3),\n    \"gamma\": uniform(0, 0.5),\n    \"learning_rate\": uniform(0.03, 0.3), # default 0.1 \n    \"max_depth\": randint(2, 6), # default 3\n    \"n_estimators\": randint(100, 150), # default 100\n    \"subsample\": uniform(0.6, 0.4)\n}","eaee621b":"# Use the random grid to search for best hyperparameters\nxgb_random = skms.RandomizedSearchCV(estimator = xgb_model, param_distributions=xgb_params, n_iter=20, cv = 3, verbose=2, n_jobs = -1, random_state=seed, scoring='f1_weighted', return_train_score=True)\n# Fit the random search model\nxgb_random.fit(X_train_rfe, y_train)","9bf7cfa2":"# best xgb_random model \nprint(xgb_random.best_estimator_)","ae9cd072":"# Performance metrics\npredictProba(xgb_random.best_estimator_, X_train_rfe)","8cb62a53":"predictProba(xgb_random.best_estimator_, X_train_rfe, True)","84f089dd":"y_pred_X = rf_random.best_estimator_.predict(X_test[X_train_rfe.columns])\nprint(skm.classification_report(y_test, y_pred_X, digits=3))\nprint(\"RF Test Accuracy -\",skm.accuracy_score(y_test, y_pred_X)*100)","c8220dff":"y_pred_X = xgb_random.best_estimator_.predict(X_test[X_train_rfe.columns])\nprint(skm.classification_report(y_test, y_pred_X, digits=3))\nprint(\"XGB Test Accuracy -\",skm.accuracy_score(y_test, y_pred_X)*100)","08bc4b55":"y_pred_X = cbc.predict(X_test[X_train_rfe.columns])\nprint(skm.classification_report(y_test, y_pred_X, digits=3))\nprint(\"CatBoost Test Accuracy -\",skm.accuracy_score(y_test, y_pred_X)*100)","cc88d312":"## About dataset","6fd664ed":"## XGB Model HP Tuning","7ea34d08":"# GTZAN - ML Ensembles (RF\/AdaBoost\/GBM\/XGB\/CatBoost)\n\n`Music Genre Classification Problem`. Experts have been trying for a long time to understand sound & what differentiates one from another. How to visualize sound. What makes one tone different from another.\n\nWe are going to analyze the features extracted from the GTZAN dataset and build different type of ensemble models to see how better we can differentiate one genre from another.\n\nOur Datasets contains 10 genres:-\n- Blues\n- Classical\n- Country\n- Disco\n- Hiphop\n- Jazz\n- Metal\n- Pop\n- Reggae\n- Rock\n\nWe will be applying following Ensemble Algorithms:-\n\n- Random Forest (RF)\n- AdaBoost\n- Gradient Boosting Machine (GBM)\n- Extreme Gradient Boosting (XGB)\n- CatBoost","4f9b3e93":"#### Model Score using Permutation Importances","130480b4":"# Model Tuning\n\nTuning selected models which performed good as base models.","a2d534e5":"## Encode Genre Label","a9b31798":"## Loading Dataset","05226a4a":"# Model Evaluation","0d2b51bd":"## Sample Logistic Regression Model\n\nBuilding model with all the available features.","cbbafd6e":"# Split Train Dev & Test Sets","2576e8cd":"## Random Forest","6b2752a0":"## CatBoost","08b72119":"# Feature Selection","d8e07cfb":"# Data Visualization","a5b8f0d2":"# Model Building\n\n## Logistic Regression","356005ad":"## AdaBoost","6cead5d9":"## Correlation Heatmap","d203ce36":"`No null values in the dataset`\n\n\n\n`There are no categorical variable as such. Hence, Dummy variable creation is not needed.`","6ac00187":"# Data Preparation\n\n- Treat missing values.\n- Outlier Treatment\n- Define dummy variables for categorical variables.","3312336c":"## GBM","d8a1c6bf":"# Reading & Understanding Data\n## Importing Libraries","98238f84":"## RF Model HP Tuning","16d8b833":"#### Plot Permutation Importances","e9f4144f":"`Here, we had CatBoost as the best model among all ensemble techniques without any HP tuning on the same.`","7bc4c85b":"## Permutation Importance Feature Selection","9065f51f":"# LightGBM","80e33ab7":"## Scale the Features","603cda9a":"## XGBoost","0cf78ba5":"## Missing Value Treatment"}}