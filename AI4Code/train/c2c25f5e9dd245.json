{"cell_type":{"d90fd100":"code","ce45d2f6":"code","7dedf897":"code","1a92a735":"code","302b6eb2":"code","76f286c8":"code","3bcd367f":"code","601fd3f9":"code","b382b192":"code","42953111":"code","ee550eee":"code","3859cfd4":"code","7c6facc2":"code","1046fef5":"code","d945df69":"code","265cbfee":"code","4ac17ae9":"code","2c964525":"code","21fa918f":"markdown","ccf831df":"markdown","fc99e23d":"markdown"},"source":{"d90fd100":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce45d2f6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats  \nfrom sklearn.preprocessing import StandardScaler\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\n##Data visualisation packages\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n## Model packagesL\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.model_selection import KFold ,GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model  import Ridge,Lasso,RidgeCV, LassoCV, ElasticNet, ElasticNetCV, LinearRegression\nfrom sklearn.feature_selection import RFE, f_regression\nfrom sklearn import preprocessing\nimport xgboost as xgb\nfrom sklearn.preprocessing import StandardScaler \nimport statsmodels.api as sm ","7dedf897":"mkt = pd.read_csv('..\/input\/marketing-linear-multiple-regression\/Marketing_Data.csv')\nmkt.head()","1a92a735":"mkt.info()\nmkt.describe().T","302b6eb2":"mkt.isnull().sum()","76f286c8":"1. Univariate Analysis","3bcd367f":"sns.boxplot(mkt['youtube'])","601fd3f9":"for i in mkt.columns:\n    sns.boxplot(mkt[i])\n    plt.show()\n    ","b382b192":"for i in mkt.columns:\n    sns.distplot(mkt[i])\n    plt.show()","42953111":"sns.scatterplot(data=mkt, x=\"youtube\", y=\"sales\")\nplt.show()\n\n","ee550eee":"fig, axs = plt.subplots(1, 3, sharey=True)\nmkt.plot(kind='scatter', x='youtube', y='sales', ax=axs[0], figsize=(16, 8))\nmkt.plot(kind='scatter', x='facebook', y='sales', ax=axs[1])\nmkt.plot(kind='scatter', x='newspaper', y='sales', ax=axs[2])","3859cfd4":"sns.heatmap(mkt.corr(), annot=True)\n","7c6facc2":"feature_cols = ['youtube', 'facebook', 'newspaper']\nX = mkt[feature_cols]\ny = mkt.sales\nscaler =StandardScaler()\n\nX_scaled = scaler.fit_transform(X)\nX = preprocessing.normalize(X_scaled)\nx_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=10)\nprint (\"Training shape:\",x_train.shape)\nprint (\"Testing shape:\",x_test.shape)\nprint(\"Training shape:\",y_train.shape)\nprint(\"Testing shape:\",y_test.shape)","1046fef5":"lm = LinearRegression()\nlm.fit(X, y)\n\n# print coefficients\nprint(feature_cols, lm.coef_)","d945df69":"lm.score(x_train,y_train)","265cbfee":"pred = lm.predict(x_test)\nprint(\"Predicted medv for test:\")\npred","4ac17ae9":"lm.score(x_test,y_test)","2c964525":"print(\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test,pred)))\nprint(\"MAE:\",metrics.mean_absolute_error(y_test,pred))","21fa918f":"2. Bivariate analysis","ccf831df":"**So the model performs very well**","fc99e23d":"# Exploratory Data Analysis"}}