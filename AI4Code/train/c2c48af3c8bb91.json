{"cell_type":{"6d8c4da8":"code","aac3a4ca":"code","60d8409e":"code","f493dac1":"code","37876cde":"code","24e11980":"code","160ae656":"code","3d3ccad1":"code","b52cb961":"code","9077744e":"code","bace4a9e":"code","c985fda3":"code","212744e5":"code","93ca2292":"code","6be12b65":"code","62101eb3":"code","717fad00":"code","ced7999d":"code","fb861cc9":"code","7ff21da8":"code","9d02000f":"code","73256d04":"code","72c471f2":"code","6c9f6387":"code","53292d49":"markdown","27d8dff9":"markdown","ba5bc58d":"markdown","235175bb":"markdown","4ba909d4":"markdown","fcdc1789":"markdown","67de6cc9":"markdown","e5e33f48":"markdown","0845cbf8":"markdown","222c5e22":"markdown","9ec3f9d8":"markdown","76063d17":"markdown","3801919c":"markdown","9c065029":"markdown","e8bebe6d":"markdown","88e94317":"markdown","61ca12a5":"markdown","fac60df0":"markdown","5bdbce55":"markdown","a2662d9f":"markdown","4dc774f9":"markdown"},"source":{"6d8c4da8":"import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\n\nimport lightgbm as lgbm\nimport plotly.tools as tls\n","aac3a4ca":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_score, roc_auc_score, recall_score, confusion_matrix, roc_curve, precision_recall_curve, accuracy_score\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import recall_score, confusion_matrix, precision_score, f1_score, accuracy_score, classification_report","60d8409e":"df = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")","f493dac1":"df.head()","37876cde":"df.shape","24e11980":"df.info()","160ae656":"df.isnull().sum()\/len(df)","3d3ccad1":"colors_blue = [\"#132C33\", \"#264D58\", '#17869E', '#51C4D3', '#B4DBE9']\ncolors_dark = [\"#1F1F1F\", \"#313131\", '#636363', '#AEAEAE', '#DADADA']\ncolors_green = ['#01411C','#4B6F44','#4F7942','#74C365','#D0F0C0']\nsns.palplot(colors_blue)\nsns.palplot(colors_green)\nsns.palplot(colors_dark)","b52cb961":"d= pd.DataFrame(df['Potability'].value_counts())\nfig = px.pie(d,values='Potability',names=['Not Potable','Potable'],hole=0.4,opacity=0.6,\n            color_discrete_sequence=[colors_green[1],colors_blue[2]],\n             labels={'label':'Potability','Potability':'No. Of Samples'})\n\n\nfig.add_annotation(text='Need to resample the data<br> to get a balanced dataset',\n                   x=1.2,y=0.9,showarrow=False,font_size=12,opacity=0.7,font_family='arial')\nfig.add_annotation(text='Potability proportion',\n                   x=0.5,y=0.5,showarrow=False,font_size=12,opacity=0.7,font_family='arial')\n\nfig.update_layout(\n    font_family='arial',\n    title=dict(text='Samples of potable water',x=0.47,y=0.98,\n               font=dict(color=colors_dark[2],size=20)),\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\n\nfig.update_traces(textposition='outside', textinfo='percent+label')","9077744e":"fig = px.histogram(df,x='Solids',y=Counter(df['Solids']),color='Potability',\n                  marginal='violin',opacity=0.7,nbins=100,color_discrete_sequence=[colors_green[1],colors_blue[2]],\n                  barmode='relative',histfunc='count',histnorm='density')\n\nfig.add_vline(x=1200,line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\nfig.add_annotation(text='Recommended values',x=0.1,y=0.1,showarrow=False,font_size=12)\n#fig.add_annotation(text='pH >7 basic solution',x=11,y=350,showarrow=False,font_size=12)\n\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='Solids Distribution',\n               font=dict(color=colors_dark[2],size=22)),\n    xaxis_title_text='Solids (mg\/L)',\n    yaxis_title_text='Count',\n    legend=dict(x=1,y=0.96,bordercolor=colors_dark[4],borderwidth=0,tracegroupgap=5),\n    bargap=0.3,\n)\nfig.show()","bace4a9e":"fig = px.histogram(df,x='Chloramines',y=Counter(df['Chloramines']),color='Potability',\n                  marginal='violin',opacity=0.7,nbins=100,color_discrete_sequence=[colors_green[1],colors_blue[2]],\n                  barmode='relative',histfunc='count',histnorm='density')\n\nfig.add_vline(x=6.5, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\n\nfig.add_annotation(text='Standard water (recommended values)',x=2,y=350,showarrow=False,font_size=12)\n#fig.add_annotation(text='pH >7 basic solution',x=11,y=350,showarrow=False,font_size=12)\n\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='Chloramines Distribution',\n               font=dict(color=colors_dark[2],size=22)),\n    xaxis_title_text='Chloramines (mg\/L)',\n    yaxis_title_text='Count',\n    legend=dict(x=1,y=0.96,bordercolor=colors_dark[4],borderwidth=0,tracegroupgap=5),\n    bargap=0.3,\n)\nfig.show()","c985fda3":"fig = px.histogram(df,x='Sulfate',y=Counter(df['Sulfate']),color='Potability',\n                  marginal='violin',opacity=0.7,nbins=100,color_discrete_sequence=[colors_green[1],colors_blue[2]],\n                  barmode='relative',histfunc='count',histnorm='density')\n\nfig.add_vline(x=190, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\nfig.add_vline(x=500, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\n\nfig.add_annotation(text=' Standard water (Recommended values) ',x=250,y=25,showarrow=False,font_size=12)\n#fig.add_annotation(text='pH >7 basic solution',x=11,y=350,showarrow=False,font_size=12)\n\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='Sulfate Distribution',\n               font=dict(color=colors_dark[2],size=22)),\n    xaxis_title_text='Sulfate (mg\/L)',\n    yaxis_title_text='Count',\n    legend=dict(x=1,y=0.96,bordercolor=colors_dark[4],borderwidth=0,tracegroupgap=5),\n    bargap=0.3,\n)\nfig.show()","212744e5":"fig = px.histogram(df,x='Organic_carbon',y=Counter(df['Organic_carbon']),color='Potability',\n                  marginal='violin',opacity=0.7,nbins=100,color_discrete_sequence=[colors_green[1],colors_blue[2]],\n                  barmode='relative',histfunc='count',histnorm='density')\n\nfig.add_vline(x=30, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\nfig.add_vline(x=4, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\n\nfig.add_annotation(text='Standard water (Recommended values)',x=20,y=350,showarrow=False,font_size=12)\n#fig.add_annotation(text='pH >7 basic solution',x=11,y=350,showarrow=False,font_size=12)\n\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='Organic carbon Distribution',\n               font=dict(color=colors_dark[2],size=22)),\n    xaxis_title_text='Organic carbon (mg\/L)',\n    yaxis_title_text='Count',\n    legend=dict(x=1,y=0.96,bordercolor=colors_dark[4],borderwidth=0,tracegroupgap=5),\n    bargap=0.3,\n)\nfig.show()","93ca2292":"fig = px.histogram(df,x='Trihalomethanes',y=Counter(df['Trihalomethanes']),color='Potability',\n                  marginal='violin',opacity=0.7,nbins=100,color_discrete_sequence=[colors_green[1],colors_blue[2]],\n                  barmode='relative',histfunc='count',histnorm='density')\n\nfig.add_vline(x=0, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\nfig.add_vline(x=80, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\n\nfig.add_annotation(text='Stardand water (recommended values)',x=20,y=50,showarrow=False,font_size=12)\n#fig.add_annotation(text='pH >7 basic solution',x=11,y=350,showarrow=False,font_size=12)\n\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='Trihalomethanes Distribution',\n               font=dict(color=colors_dark[2],size=22)),\n    xaxis_title_text='Trihalomethanes (mg\/L)',\n    yaxis_title_text='Count',\n    legend=dict(x=1,y=0.96,bordercolor=colors_dark[4],borderwidth=0,tracegroupgap=5),\n    bargap=0.3,\n)\nfig.show()","6be12b65":"fig = px.histogram(df,x='Turbidity',y=Counter(df['Turbidity']),color='Potability',\n                  marginal='violin',opacity=0.7,nbins=100,color_discrete_sequence=[colors_green[1],colors_blue[2]],\n                  barmode='relative',histfunc='count',histnorm='density')\n\nfig.add_vline(x=5, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\nfig.add_vline(x=0, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\n\nfig.add_annotation(text=' Stardard water (Recommended values) ',x=2,y=1350,showarrow=False,font_size=12)\n#fig.add_annotation(text='pH >7 basic solution',x=11,y=350,showarrow=False,font_size=12)\n\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='Turbidity Distribution',\n               font=dict(color=colors_dark[2],size=22)),\n    xaxis_title_text='Turbidity (mg\/L)',\n    yaxis_title_text='Count',\n    legend=dict(x=1,y=0.96,bordercolor=colors_dark[4],borderwidth=0,tracegroupgap=5),\n    bargap=0.3,\n)\nfig.show()","62101eb3":"fig = px.histogram(df,x='ph',y=Counter(df['ph']),color='Potability',\n                  marginal='violin',opacity=0.7,nbins=100,color_discrete_sequence=[colors_green[1],colors_blue[2]],\n                  barmode='relative',histfunc='count',histnorm='density')\n\nfig.add_vline(x=6.5, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\nfig.add_vline(x=8.5, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\n\nfig.add_annotation(text='pH <7 acide solution ',x=2,y=350,showarrow=False,font_size=12)\nfig.add_annotation(text='pH >7 basic solution',x=11,y=350,showarrow=False,font_size=12)\nfig.add_annotation(text='Recommended values',x=7.5,y=950,showarrow=False,font_size=12)\n\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='pH Distribution',\n               font=dict(color=colors_dark[2],size=22)),\n    xaxis_title_text='Hardness (mg\/L)',\n    yaxis_title_text='Count',\n    legend=dict(x=1,y=0.96,bordercolor=colors_dark[4],borderwidth=0,tracegroupgap=5),\n    bargap=0.3,\n)\nfig.show()","717fad00":"fig = px.histogram(df,x='Conductivity',y=Counter(df['Conductivity']),color='Potability',\n                  marginal='violin',opacity=0.7,nbins=100,color_discrete_sequence=[colors_green[1],colors_blue[2]],\n                  barmode='relative',histfunc='count',histnorm='density')\n\nfig.add_vline(x=0, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\nfig.add_vline(x=400, line_width=2, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\n\n\nfig.add_annotation(text='Stardard water (Recommended values)',x=175,y=10,showarrow=False,font_size=12)\n\n\n\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='Conductivity Distribution',\n               font=dict(color=colors_dark[2],size=22)),\n    xaxis_title_text='Conductivity (\u03bcS\/cm)',\n    yaxis_title_text='Count',\n    legend=dict(x=1,y=0.96,bordercolor=colors_dark[4],borderwidth=0,tracegroupgap=5),\n    bargap=0.3,\n)\nfig.show()","ced7999d":"fig = px.histogram(df,x='Hardness',y=Counter(df['Hardness']),color='Potability',\n                  marginal='violin',opacity=0.7,nbins=100,color_discrete_sequence=[colors_green[1],colors_blue[2]],\n                  barmode='relative',histfunc='count',histnorm='density')\n\nfig.add_vline(x=151, line_width=1, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\nfig.add_vline(x=301, line_width=1, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\nfig.add_vline(x=76, line_width=1, line_color=colors_dark[1],line_dash='dot',opacity=0.7)\n\nfig.add_annotation(text='<60 mg\/L is<br> soft',x=40,y=50,showarrow=False,font_size=12)\nfig.add_annotation(text='Between 76 and 150<br> (mg\/L) is<br>moderately hard',x=113,y=50,showarrow=False,font_size=12)\nfig.add_annotation(text='Between 151 and 300 (mg\/L)<br> hard',x=250,y=50,showarrow=False,font_size=12)\nfig.add_annotation(text='>300 mg\/L is<br> very hard',x=340,y=50,showarrow=False,font_size=12)\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='Hardness Distribution',\n               font=dict(color=colors_dark[2],size=22)),\n    xaxis_title_text='Hardness (mg\/L)',\n    yaxis_title_text='Count',\n    legend=dict(x=1,y=0.96,bordercolor=colors_dark[4],borderwidth=0,tracegroupgap=5),\n    bargap=0.3,\n)\nfig.show()","fb861cc9":"cols = df.columns\nfrom sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors=4, weights=\"uniform\")\narray = imputer.fit_transform(df)\ndf_imputed = pd.DataFrame(array,columns=cols)\nrandom_state = 42\n\nX = df_imputed.drop('Potability',axis=1)   \n# normalize dataset for easier parameter selection\nX = StandardScaler().fit_transform(X)\ny = df_imputed[\"Potability\"]\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = random_state)\n\nfrom imblearn.over_sampling import SMOTE\nsm = SMOTE()\nX_res, y_res = sm.fit_resample(X_train,y_train)\n\nprint(\"Before OverSampling, counts of label '1': {}\".format(sum(y==1)))\nprint(\"Before OverSampling, counts of label '0': {} \\n\".format(sum(y==0)))\n\nprint('After OverSampling, the shape of train_X: {}'.format(X_res.shape))\nprint('After OverSampling, the shape of train_y: {} \\n'.format(y_res.shape))\n\nprint(\"After OverSampling, counts of label '1': {}\".format(sum(y_res==1)))\nprint(\"After OverSampling, counts of label '0': {}\".format(sum(y_res==0)))","7ff21da8":"features=df.drop('Potability',axis=1).columns\nprint(features)\nfrom matplotlib.offsetbox import AnchoredText\ncorrelation_table = []\nfor cols in features:\n    y = df_imputed[\"Potability\"]\n    x = df_imputed[cols]\n    corr = np.corrcoef(x, y)[1][0]\n    dict_ ={\n        'Features': cols,\n        'Correlation coefficient' : corr,\n        'Feat_type': 'numerical'}\n    correlation_table.append(dict_)\ndF1 = pd.DataFrame(correlation_table)\nfig = plt.figure(figsize=(10,6), facecolor='#EAECEE')\nax = sns.barplot(x=\"Correlation coefficient\", y=\"Features\", \n                     data=dF1.sort_values(\"Correlation coefficient\", ascending=False),\n                     palette='viridis', alpha=0.75)\nax.grid()\n#ax.set_title(\"Correlation of numerical features with Target\", fontsize=20, y=1.05)\n\ntitle =  'Correlation features with target'\nsub_title = 'In comparison with categorical features \\\n\\nnumericals are less correlated with target.'\n\nplt.gcf().text(0.05, 1.02, title, fontsize=24)\n#plt.gcf().text(0.05, 0.9, sub_title, fontsize=14)\n\nat1 = AnchoredText(sub_title,\n                   loc='lower left', frameon=True,\n                   bbox_to_anchor=(-0.1, 1.01),\n                   bbox_transform=ax.transAxes,\n                   #prop=dict(size=8),\n                   )\nat1.patch.set_boxstyle(\"round,pad=0.,rounding_size=0.2\")\nax.add_artist(at1)\n","9d02000f":"plt.figure(figsize=(16,8))\nsns.heatmap(df.corr(),cmap=\"Blues\");","73256d04":"data = X\n%time\nlgbm_clf = lgbm.LGBMClassifier(n_estimators=100, random_state = 42)\nlgbm_clf.fit(X_res, y_res)\ny_pred = lgbm_clf.predict(X_test)\ny_score = lgbm_clf.predict_proba(X_test)[:,1]","72c471f2":"def model_performance(model) : \n    #Conf matrix\n    conf_matrix = confusion_matrix(y_test, y_pred)\n    \n    \n    z = conf_matrix\n    x = ['Not potable (Pred)', 'Potable (Pred)']\n    y = ['Not potable (True)', 'Potable (True)']\n    # change each element of z to type string for annotations\n    z_text = [[str(y) for y in x] for x in z]\n\n    # set up figure \n    trace1 = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='deep')\n    \n\n    # adjust margins to make room for yaxis title\n    trace1.update_layout(margin={'t':50, 'l':20},width=750,height=750)\n    \n    #trace1 = go.Heatmap(z = conf_matrix  ,x = [\"0 (pred)\",\"1 (pred)\"],\n                       # y = [\"0 (true)\",\"1 (true)\"],xgap = 2, ygap = 2, \n                        #colorscale = 'Viridis', showscale  = False)\n\n    #Show metrics\n    tp = conf_matrix[1,1]\n    fn = conf_matrix[1,0]\n    fp = conf_matrix[0,1]\n    tn = conf_matrix[0,0]\n    Accuracy  =  ((tp+tn)\/(tp+tn+fp+fn))\n    Precision =  (tp\/(tp+fp))\n    Recall    =  (tp\/(tp+fn))\n    F1_score  =  (2*(((tp\/(tp+fp))*(tp\/(tp+fn)))\/((tp\/(tp+fp))+(tp\/(tp+fn)))))\n\n    show_metrics = pd.DataFrame(data=[[Accuracy , Precision, Recall, F1_score]])\n    show_metrics = show_metrics.T\n\n    colors = ['gold', 'lightgreen', 'lightcoral', 'lightskyblue']\n    trace2 = go.Bar(x = (show_metrics[0].values), \n                   y = ['Accuracy', 'Precision', 'Recall', 'F1_score'], text = np.round_(show_metrics[0].values,4),\n                    textposition = 'auto',\n                   orientation = 'h', opacity = 0.8,marker=dict(\n            color=colors,\n            line=dict(color='#000000',width=1.5)))\n    \n    #Roc curve\n    model_roc_auc = round(roc_auc_score(y_test, y_score) , 3)\n    fpr, tpr, t = roc_curve(y_test, y_score)\n    trace3 = go.Scatter(x = fpr,y = tpr,\n                        name = \"Roc : \" + str(model_roc_auc),\n                        line = dict(color = ('rgb(22, 96, 167)'),width = 2), fill='tozeroy')\n    trace4 = go.Scatter(x = [0,1],y = [0,1],\n                        line = dict(color = ('black'),width = 1.5,\n                        dash = 'dot'))\n    \n    # Precision-recall curve\n    precision, recall, thresholds = precision_recall_curve(y_test, y_score)\n    trace5 = go.Scatter(x = recall, y = precision,\n                        name = \"Precision\" + str(precision),\n                        line = dict(color = ('lightcoral'),width = 2), fill='tozeroy')\n    \n    #Feature importance\n    coefficients  = pd.DataFrame(eval(model).feature_importances_)\n    column_data  = pd.DataFrame(list(features))\n    coef_sumry    = (pd.merge(coefficients,column_data,left_index= True,\n                              right_index= True, how = \"left\"))\n    coef_sumry.columns = [\"coefficients\",\"features\"]\n    coef_sumry = coef_sumry.sort_values(by = \"coefficients\",ascending = False)\n    coef_sumry = coef_sumry[coef_sumry[\"coefficients\"] !=0]\n    trace6 = go.Bar(x = coef_sumry[\"features\"],y = coef_sumry[\"coefficients\"],\n                    name = \"coefficients\",\n                    marker = dict(color = coef_sumry[\"coefficients\"],\n                                  colorscale = \"Viridis\",\n                                  line = dict(width = .6,color = \"black\")))\n    \n    #Cumulative gain\n    pos = pd.get_dummies(y_test).to_numpy()\n    pos = pos[:,1] \n    npos = np.sum(pos)\n    index = np.argsort(y_score) \n    index = index[::-1] \n    sort_pos = pos[index]\n    #cumulative sum\n    cpos = np.cumsum(sort_pos) \n    #recall\n    recall = cpos\/npos \n    #size obs test\n    n = y_test.shape[0] \n    size = np.arange(start=1,stop=369,step=1) \n    #proportion\n    size = size \/ n \n    #plots\n    model = model\n    trace7 = go.Scatter(x = size,y = recall,\n                        name = \"Lift curve\",\n                        line = dict(color = ('gold'),width = 2), fill='tozeroy') \n    \n    #Subplots\n    fig = tls.make_subplots(rows=4, cols=2, print_grid=False, \n                          specs=[[{}, {}], \n                                 [{}, {}],\n                                 [{'colspan': 2}, None],\n                                 [{'colspan': 2}, None]],\n                          subplot_titles=('Confusion Matrix',\n                                        'Metrics',\n                                        'ROC curve'+\" \"+ '('+ str(model_roc_auc)+')',\n                                        'Precision - Recall curve',\n                                        'Cumulative gains curve',\n                                        'Feature importance',\n                                        ))\n    \n    fig.append_trace(trace1.data[0],1,1)\n    fig.append_trace(trace2,1,2)\n    fig.append_trace(trace3,2,1)\n    fig.append_trace(trace4,2,1)\n    fig.append_trace(trace5,2,2)\n    fig.append_trace(trace6,4,1)\n    fig.append_trace(trace7,3,1)\n    \n    fig['layout'].update(showlegend = False, title = '<b>Model performance report<\/b><br>'+str(model),\n                        autosize = False, height = 1500,width = 1030,\n                        plot_bgcolor = 'rgba(240,240,240, 0.95)',\n                        paper_bgcolor = 'rgba(240,240,240, 0.95)',\n                        margin = dict(b = 195))\n    #fig[\"layout\"][\"xaxis2\"].update((dict(range=[0, 1])))\n    fig[\"layout\"][\"xaxis3\"].update(dict(title = \"false positive rate\"))\n    fig[\"layout\"][\"yaxis3\"].update(dict(title = \"true positive rate\"))\n    fig[\"layout\"][\"xaxis4\"].update(dict(title = \"recall\"), range = [0,1.05])\n    fig[\"layout\"][\"yaxis4\"].update(dict(title = \"precision\"), range = [0,1.05])\n    fig[\"layout\"][\"xaxis5\"].update(dict(title = \"Percentage contacted\"))\n    fig[\"layout\"][\"yaxis5\"].update(dict(title = \"Percentage positive targeted\"))\n    fig.layout.titlefont.size = 14\n    \n\n    py.iplot(fig)","6c9f6387":"model_performance('lgbm_clf')","53292d49":"<h2 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; color: navy; background-color: #rfffff;\">TABLE OF CONTENTS<\/h2>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#intro\">I&nbsp;&nbsp;&nbsp;&nbsp;Introduction<\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#background_motivation\">II&nbsp;&nbsp;&nbsp;&nbsp;Background and motivation<\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#package\">III&nbsp;&nbsp;&nbsp;&nbsp;Package<\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#firstlook\">IV&nbsp;&nbsp;&nbsp;&nbsp;First look on the data<\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#EDA\">V&nbsp;&nbsp;&nbsp;&nbsp;Exploratory data analasis<\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#feature_to_target\">VI&nbsp;&nbsp;&nbsp;&nbsp;Feature correlation to target and Pre-processing <\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#modeling\">VII&nbsp;&nbsp;&nbsp;&nbsp;Model Reporting<\/a><\/h3>\n\n---\n\n","27d8dff9":"<h1 class=\"list-group-item list-group-item-action active\" id=\"package\">III&nbsp;&nbsp;Packages<\/h1>","ba5bc58d":" <div class=\"alert alert-success\" role=\"alert\">\n  <p>\ud83d\udca1 The turbidity of water depends on the quantity of solid matter present in the suspended state. It is a measure of light emitting properties of water and the test is used to indicate the quality of waste discharge with respect to colloidal matter. The mean turbidity value obtained for Wondo Genet Campus (0.98 NTU) is lower than the WHO recommended value of 5.00 NTU.<\/p>\n  <hr>\n<\/div>\n\n\n\n\n\n\n\n","235175bb":" <div class=\"alert alert-success\" role=\"alert\">\n  <p>\ud83d\udca1 Total Organic Carbon (TOC) in source waters comes from decaying natural organic matter (NOM) as well as synthetic sources. TOC is a measure of the total amount of carbon in organic compounds in pure water. According to US EPA < 2 mg\/L as TOC in treated \/ drinking water, and < 4 mg\/Lit in source water which is use for treatment.<\/p>\n  <hr>\n<\/div>\n\n\n\n","4ba909d4":"<div class=\"jumbotron\">\n  <h1 class=\"display-4\">Thank you for watching this notebook<\/h1>\n  <p class=\"lead\"> I hope you enjoyed the work presented and that learned some great stuff. Please do not hesitate to ask questions or provide suggestions. Stay safe and drink some good water \ud83d\ude04\ud83d\ude09 !<\/p>\n  <hr class=\"my-4\">\n  <p>Arthors: Rachid Zeghlache.<\/p>\n<\/div>","fcdc1789":"**Composition of stardard water**        |  **Why is potable water so important**\n:-------------------------:|:-------------------------:\n![](https:\/\/cdn.shopify.com\/s\/files\/1\/0169\/7704\/files\/Mineral_Water_Brands.jpg?495)  |  ![](https:\/\/fitnessatdaybreak.files.wordpress.com\/2018\/01\/top-10-benefits-of-drinking-water.jpg?w=640)","67de6cc9":"<h1 class=\"list-group-item list-group-item-action active\" id=\"Modeling\">VII&nbsp;&nbsp;Model reporting<\/h1>","e5e33f48":" <div class=\"alert alert-success\" role=\"alert\">\n  <p>\ud83d\udca1 Water has the ability to dissolve a wide range of inorganic and some organic minerals or salts such as potassium, calcium, sodium, bicarbonates, chlorides, magnesium, sulfates etc. These minerals produced un-wanted taste and diluted color in appearance of water. This is the important parameter for the use of water. The water with high TDS value indicates that water is highly mineralized. Desirable limit for TDS is 500 mg\/l and maximum limit is 1000 mg\/l which prescribed for drinking purpose <\/p>\n  <hr>\n<\/div>\n\n\n\n\n","0845cbf8":"<h1 class=\"list-group-item list-group-item-action active\" id=\"intro\">I&nbsp;&nbsp;Introduction<\/h1>","222c5e22":" <div class=\"alert alert-success\" role=\"alert\">\n  <p>\ud83d\udca1 \nTHMs are chemicals which may be found in water treated with chlorine. The concentration of THMs in drinking water varies according to the level of organic material in the water, the amount of chlorine required to treat the water, and the temperature of the water that is being treated. THM levels up to 80 ppm is considered safe in drinking water.<\/p>\n  <hr>\n<\/div>\n\n\n\n\n\n","9ec3f9d8":"<h1 class=\"list-group-item list-group-item-action active\" id=\"feature_to_target\">VI&nbsp;&nbsp;Feature correlation to target and Pre-processing<\/h1>","76063d17":" <div class=\"alert alert-success\" role=\"alert\">\n  <p>\ud83d\udca1 Chlorine and chloramine are the major disinfectants used in public water systems. Chloramines are most commonly formed when ammonia is added to chlorine to treat drinking water. Chlorine levels up to 4 milligrams per liter (mg\/L or 4 parts per million (ppm)) are considered safe in drinking water.<\/p>\n  <hr>\n<\/div>\n","3801919c":"<h1 class=\"list-group-item list-group-item-action active\" id=\"firstlook\">IV&nbsp;&nbsp;First look on the data<\/h1>","9c065029":" <div class=\"alert alert-success\" role=\"alert\">\n  <p>\ud83d\udca1 pH is an important parameter in evaluating the acid\u2013base balance of water. It is also the indicator of acidic or alkaline condition of water status. WHO has recommended maximum permissible limit of pH from 6.5 to 8.5. The current investigation ranges were 6.52\u20136.83 which are in the range of WHO standards<\/p>\n  <hr>\n<\/div>","e8bebe6d":" <div class=\"alert alert-success\" role=\"alert\">\n  <p>\ud83d\udca1 Sulfates are naturally occurring substances that are found in minerals, soil, and rocks. They are present in ambient air, groundwater, plants, and food. The principal commercial use of sulfate is in the chemical industry. Sulfate concentration in seawater is about 2,700 milligrams per liter (mg\/L). It ranges from 3 to 30 mg\/L in most freshwater supplies, although much higher concentrations (1000 mg\/L) are found in some geographic locations.<\/p>\n  <hr>\n<\/div>\n\n","88e94317":"![](https:\/\/media.giphy.com\/media\/3otPoNMCHgEfLaO1NK\/giphy.gif)","61ca12a5":"- Background: **Access to safe drinking-water is essential to health, a basic human right and a component of effective policy for health protection. This is important as a health and development issue at a national, regional and local level. In some regions, it has been shown that investments in water supply and sanitation can yield a net economic benefit, since the reductions in adverse health effects and health care costs outweigh the costs of undertaking the interventions**\n\n- Motivation : **Our objective is to understand what are the reasons that cause water to not drinkable and see if we can succefully detect stroke on some features using ML technics**","fac60df0":" <div class=\"alert alert-success\" role=\"alert\">\n  <p>\ud83d\udca1 Hardness is mainly caused by calcium and magnesium salts. These salts are dissolved from geologic deposits through which water travels. The length of time water is in contact with hardness producing material helps determine how much hardness there is in raw water. Hardness was originally defined as the capacity of water to precipitate soap caused by Calcium and Magnesium.<\/p>\n  <hr>\n<\/div>\n\n","5bdbce55":"<h1 class=\"list-group-item list-group-item-action active\" id=\"EDA\">V&nbsp;&nbsp;Exploratory data analysis<\/h1>","a2662d9f":" <div class=\"alert alert-success\" role=\"alert\">\n  <p>\ud83d\udca1 Pure water is not a good conductor of electric current rather\u2019s a good insulator. Increase in ions concentration enhances the electrical conductivity of water. Generally, the amount of dissolved solids in water determines the electrical conductivity. Electrical conductivity (EC) actually measures the ionic process of a solution that enables it to transmit current. According to WHO standards, EC value should not exceeded 400 \u03bcS\/cm.<\/p>\n  <hr>\n<\/div>","4dc774f9":"<h1 class=\"list-group-item list-group-item-action active\" id=\"background_motivation\">II&nbsp;&nbsp;Background and Motivation<\/h1>"}}