{"cell_type":{"5e8e4d16":"code","09ef1da5":"code","9379755a":"code","8ccdbaf2":"code","1bcb42a0":"code","920b011c":"code","8f1ad856":"code","d9f54c42":"code","46869c34":"code","2cc88c3f":"code","4ee64964":"code","212a2e71":"markdown","7dbe6eb8":"markdown","6d5fbcad":"markdown","4ecc8211":"markdown","6fda0f6f":"markdown","3254176d":"markdown","9d90479e":"markdown"},"source":{"5e8e4d16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","09ef1da5":"import pandas as pd\nitem_categories = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nitems = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/items.csv\")\ntrain  = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\nsample_submission = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv\")\nshops = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\ntest = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/test.csv\")","9379755a":"num_month = train['date_block_num'].max()\nmonth_list=[i for i in range(num_month+1)]\nshop = []\nfor i in range(num_month+1):\n    shop.append(5)\nitem = []\nfor i in range(num_month+1):\n    item.append(5037)\nmonths_full = pd.DataFrame({'shop_id':shop, 'item_id':item,'date_block_num':month_list})\nmonths_full","8ccdbaf2":"train_clean = train.drop(labels = ['date', 'item_price'], axis = 1)\n# change the item count per day to item count per month by using group\ntrain_clean = train_clean.groupby([\"item_id\",\"shop_id\",\"date_block_num\"]).sum().reset_index()\ntrain_clean = train_clean.rename(index=str, columns = {\"item_cnt_day\":\"item_cnt_month\"})\ntrain_clean = train_clean[[\"item_id\",\"shop_id\",\"date_block_num\",\"item_cnt_month\"]]\ntrain_clean","1bcb42a0":"clean= pd.merge(train_clean, train, how='right', on=['shop_id','item_id','date_block_num'])\nclean = clean.sort_values(by=['date_block_num'])\nclean.fillna(0.00,inplace=True)\nclean","920b011c":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\nX_full = clean.copy()\nX_test_full = clean.copy()\n\n# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['item_cnt_month'], inplace=True)\ny = X_full.item_cnt_month\nX_full.drop(['item_cnt_month'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","8f1ad856":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Define model\nmodel = RandomForestRegressor(n_estimators=100, random_state=0)\n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', model)\n                     ])\n\n# Preprocessing of training data, fit model \nclf.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = clf.predict(X_valid)\n\nprint(f'Model test accuracy: {clf.score(X_valid, y_valid)*100:.3f}%')","d9f54c42":"# Add nan-values in the end of 'item_cnt_month', since there isnt as many rows in 'item_cnt_month'as in pred\nsample_submission['item_cnt_month'] = pd.Series(preds)\nsample_submission.apply(lambda col: col.drop_duplicates().reset_index(drop=True))","46869c34":"#filling the missin nan-values with mean-values\nsample_submission['item_cnt_month'].fillna(sample_submission['item_cnt_month'].median(), inplace = True)","2cc88c3f":"#make .csv file\nsample_submission.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","4ee64964":"if len(sample_submission) == len(test):\n    print(\"Submission dataframe is the same length as test ({} rows).\".format(len(sample_submission)))\nelse:\n    print(\"Dataframes mismatched, won't be able to submit to Kaggle.\")","212a2e71":"# Loading data","7dbe6eb8":"![image.png](attachment:image.png)","6d5fbcad":"# Pipeline\/Model\/Predict","4ecc8211":"# Disclaimer! This kernel is only for educational purposes and made for fun therefor the content of the kernel should not be taken to seriously!","6fda0f6f":"# Model prep","3254176d":"# Submissing","9d90479e":"# Training data prep"}}