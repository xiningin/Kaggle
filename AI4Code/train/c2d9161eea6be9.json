{"cell_type":{"249b4a24":"code","7f394f1f":"code","4fc4cb69":"code","38b9173d":"code","bda6fcff":"code","8364fd36":"code","84a941fb":"code","6d8818a5":"code","d4ee28a5":"code","24587b29":"code","fb30122e":"markdown","84a796d4":"markdown"},"source":{"249b4a24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt  # for visualization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))\nbike_data_df = pd.read_csv(\"..\/input\/bike_share.csv\")\n\n# Any results you write to the current directory are saved as output.","7f394f1f":"bike_data_df.head()","4fc4cb69":"bike_data_df.info()","38b9173d":"bike_data_df.columns","bda6fcff":"%matplotlib inline\nimport seaborn as sns\nsns.pairplot(bike_data_df)","8364fd36":"num_cols = bike_data_df.select_dtypes(include=np.number).columns\nnum_cols","84a941fb":"non_num_cols = bike_data_df.select_dtypes(exclude=np.number).columns\nnon_num_cols","6d8818a5":"#find correlation after encoding\nbike_data_df.corr()","d4ee28a5":"def evaluate_linear_regression_model(bike_data_df,independent_variable):\n    y=bike_data_df['count']\n    x=bike_data_df.drop(columns='count')\n    train_X,test_X,train_y,test_y=train_test_split(x,y,test_size=0.3,random_state=0)\n    \n    model = LinearRegression()\n    model.fit(train_X,train_y)\n    \n    print(\"Intercept : \", model.intercept_)\n    print(\"Slope : \", model.coef_)\n    \n    #Predicting TEST & TRAIN DATA\n    train_predict = model.predict(train_X)\n    test_predict = model.predict(test_X)\n    \n    print(\"MAE\")\n    print(\"Train : \",mean_absolute_error(train_y,train_predict))\n    print(\"Test  : \",mean_absolute_error(test_y,test_predict))\n    print(\"====================================\")\n    \n    print(\"MSE\")\n    print(\"Train : \",mean_squared_error(train_y,train_predict))\n    print(\"Test  : \",mean_squared_error(test_y,test_predict))\n    print(\"====================================\")\n    \n    print(\"RMSE\")\n    print(\"Train : \",np.sqrt(mean_squared_error(train_y,train_predict)))\n    print(\"Test  : \",np.sqrt(mean_squared_error(test_y,test_predict)))\n    print(\"====================================\")\n    \n    print(\"R2 SCORE\")\n    print(\"Train : \",r2_score(train_y,train_predict))\n    print(\"Test  : \",r2_score(test_y,test_predict))  \n    print(\"====================================\")\n    \n    print(\"MAPE - Mean Absolute Percentage Error\")\n    train_y, train_predict = np.array(train_y), np.array(train_predict)\n    print(np.mean(np.abs((train_y - train_predict) \/ train_y)) * 100)\n    print(\"Mape - Train:\" , np.mean(np.abs((train_y,train_predict))))\n    print(\"Mape - Test:\" ,np.mean(np.abs((test_y,test_predict))))\n    \n    #Plot actual vs predicted value\n    plt.figure(figsize=(10,7))\n    plt.title(\"Actual vs. predicted\",fontsize=25)\n    plt.xlabel(\"Actual\",fontsize=18)\n    plt.ylabel(\"Predicted\", fontsize=18)\n    plt.scatter(x=test_y,y=test_predict)","24587b29":"# Evaluate Linear Regression Prediction Model\nfrom sklearn.linear_model import LinearRegression  #Import Linear regression model\nfrom sklearn.model_selection import train_test_split  #To split the dataset into Train and test randomly\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, mean_squared_log_error, r2_score\n\nindependent_variable = 'count'\nevaluate_linear_regression_model(bike_data_df,independent_variable)","fb30122e":"**Check the first 5 rows of the given Dataset******","84a796d4":"Find the dimension of given data"}}