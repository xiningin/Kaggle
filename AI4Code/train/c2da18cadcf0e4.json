{"cell_type":{"48216110":"code","6ee06056":"code","687eb5e5":"code","5ef7fcff":"code","cddb7e39":"code","090d7db0":"code","ab029cdf":"code","9ad52b2f":"code","a56a47d6":"code","c5f21927":"markdown","5b99280e":"markdown","508791f5":"markdown","fe7d303a":"markdown"},"source":{"48216110":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport seaborn as sns","6ee06056":"train = pd.read_csv(\"..\/input\/human-activity-recognition-with-smartphones\/train.csv\")\ntest = pd.read_csv(\"..\/input\/human-activity-recognition-with-smartphones\/test.csv\")","687eb5e5":"def numbering(act):\n    if act == \"WALKING\":\n        n = 1\n    elif act == \"WALKING_UPSTAIRS\":\n        n = 2\n    elif act == \"WALKING_DOWNSTAIRS\":\n        n = 3\n    elif act == \"SITTING\":\n        n = 4\n    elif act == \"STANDING\":\n        n = 5\n    elif act == \"LAYING\":\n        n = 6\n    return n\n\ntrain['Activity_num'] = train['Activity'].apply(lambda x : numbering(x))\ntest['Activity_num'] = test['Activity'].apply(lambda x : numbering(x))","5ef7fcff":"y_train = train['Activity']\nx_train = train.drop(['Activity', 'subject', 'Activity_num'], axis=1)\ny_test = test['Activity']\nx_test = test.drop(['Activity', 'subject', 'Activity_num'], axis=1)","cddb7e39":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","090d7db0":"'''\n1 WALKING\n2 WALKING_UPSTAIRS\n3 WALKING_DOWNSTAIRS\n4 SITTING\n5 STANDING\n6 LAYING\n'''\ny_train.value_counts().sort_index(axis=0)","ab029cdf":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\n\nclassifiers = [GaussianNB(), DecisionTreeClassifier(), KNeighborsClassifier(7),\n                SVC(), RandomForestClassifier(n_estimators=100)]\nclf_names = []\nscores = []\nconf_matrices = []\n\nfor clf in classifiers:\n    clf = clf.fit(x_train, y_train)\n    pred = clf.predict(x_test)\n    \n    clf_names.append(clf.__class__.__name__)\n    scores.append(accuracy_score(y_test, pred))\n    conf_matrices.append(confusion_matrix(y_test, pred))","9ad52b2f":"result = pd.DataFrame({'Classifier': clf_names, 'Score': scores}) \\\n            .sort_values(by=['Score'], axis=0, ascending=False)\nresult","a56a47d6":"htmap = pd.DataFrame(conf_matrices[3])\nsns.heatmap(htmap, annot=True, fmt='d')","c5f21927":"# DataSet\n\n## Human Activity Recognition Using Smartphones Dataset\n\n### explanation\n\n- Each person performed six activities (WALKING, WALKING_UPSTAIRS, WALKING_DOWNSTAIRS, SITTING, STANDING, LAYING) \n- we captured 3-axial linear acceleration and 3-axial angular velocity \n- 70% of the volunteers was selected for generating the training data and 30% the test data.\n\n### given feature\n\n- Triaxial acceleration, estimated body acceleration.\n- Triaxial Angular velocity.\n- A 561-feature vector with time and frequency domain variables. \n- Its activity label. \n- An identifier of the subject.\n\n### notes\n\n- Features are normalized and bounded within [-1,1].\n- Each feature vector is a row on the text file.\n- 'g's (gravity of earth -> 9.80665 m\/seg2).\n- The gyroscope units are rad\/seg.\n\n\n# Code\n","5b99280e":"## Classifier\n\n- \ucd1d 6\uac00\uc9c0 \ub3d9\uc791\uc744 \ubd84\ub958\ud574\uc57c \ud568\n- 5\uac00\uc9c0 \ubd84\ub958\uae30 \uc0ac\uc6a9(\ub098\uc774\ube0c \ubca0\uc774\uc988, \uacb0\uc815 \ud2b8\ub9ac, K-\ucd5c\uadfc\uc811\uc774\uc6c3, \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8, SVM)\n- \ub370\uc774\ud130\ub294 \uc804\ucc98\ub9ac\uac00 \ub418\uc5b4 \uc788\uc74c(Features are normalized and bounded within [-1,1])","508791f5":"### Conclusion\n\n- 5\uac1c\uc758 \ubd84\ub958\uae30 \uc911 SVM\uc774 \uac00\uc7a5 \ub192\uc740 \uc131\ub2a5\uc744 \ubcf4\uc784(95.04%)","fe7d303a":"- SVM\uc73c\ub85c \ud559\uc2b5\ud558\uc5ec \ub098\uc628 \uacb0\uacfc\uc758 confusion matrix"}}