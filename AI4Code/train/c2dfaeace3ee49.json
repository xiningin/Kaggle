{"cell_type":{"3035c382":"code","e22563d6":"code","e81a1e2e":"code","9fe72279":"code","1f93f332":"code","776b7a2a":"code","dd9d2320":"code","e2900ed1":"code","1f54868e":"code","22de816a":"code","3ef95d78":"code","e7be962d":"code","32f14f76":"code","0deccff5":"code","9480be42":"code","48c82cbf":"code","c6d29b56":"code","40edbc8d":"code","3377477a":"code","d61993d5":"code","0fa802fd":"code","74d75503":"code","1aafc759":"code","c89d560e":"code","24934a05":"code","f3705d81":"code","ea5a2953":"code","1b3d035e":"code","7a39539b":"code","c2508a65":"code","91edc737":"code","c925e820":"code","79395ab1":"code","d4392991":"code","2af54afc":"code","3bf99449":"code","f34bd8fb":"code","ea4df34c":"code","406ae54b":"code","4a84f114":"code","6db2bbb7":"code","cf5ee569":"code","c63d243b":"code","538334a0":"code","47108701":"code","dfd44fba":"code","97d1d647":"code","9d3963a8":"code","0335d16e":"code","a63f16d6":"code","34234901":"code","0a3607f8":"code","fcd6a9d8":"code","cbedb96a":"code","5ec382df":"code","39f650b8":"code","b96cb6e6":"code","72506f99":"code","f2db9a77":"code","15a21ba0":"code","6759964b":"code","53a4fa64":"code","1a10f80e":"code","ba1c3c55":"code","3c4ee7e4":"code","18d33571":"code","5388554c":"code","fd413d50":"code","b0808f11":"code","4c04b88a":"code","2ada31f9":"code","4afc5580":"code","1af88684":"code","2e9ee018":"code","21b9c467":"code","52fbd049":"code","90cad4e9":"code","6a06eeeb":"code","4edff082":"code","8b9fdfe9":"code","9dbfd659":"code","cd176813":"code","ddcbb82e":"code","31cf5c61":"code","9d3a0de6":"code","1cd2f889":"code","2a889827":"code","38751450":"code","d769bcc7":"code","0f0f288e":"code","0536ed98":"code","1671034f":"code","4a076cc4":"code","249e5891":"code","62710cce":"code","8f832b28":"code","abcb840f":"code","760ed65a":"code","52d945ee":"code","bb68632f":"code","e2859050":"code","88d19aec":"code","44df13da":"code","87eec2a1":"code","a62011fb":"code","3fd14f31":"code","db5ed7a9":"code","9a56bfa3":"markdown","89c483d6":"markdown","cfd6c476":"markdown","acfb28a0":"markdown","4beec6e7":"markdown","4672f2c6":"markdown","4fa45250":"markdown","cdb6a1b0":"markdown","137b8e4a":"markdown","e857ed61":"markdown","714e4330":"markdown","4c085bfe":"markdown","83563aaf":"markdown","1c969769":"markdown","4489bc28":"markdown","fad99169":"markdown","dd7ff54c":"markdown","a7708e30":"markdown","377ee424":"markdown","861ae40e":"markdown","cd7d593c":"markdown","147e6cf1":"markdown","81107806":"markdown","5fb6d4c6":"markdown","e7112ae8":"markdown","ca44afbf":"markdown","fcc0ebb9":"markdown","eae60bf0":"markdown","83fc9a58":"markdown","25082190":"markdown","11404408":"markdown","609e6c33":"markdown","5d37b6bb":"markdown","66137713":"markdown","9ef24bd8":"markdown","1cfe977a":"markdown","0486a31d":"markdown","3330110c":"markdown","0deaee40":"markdown","b9b04814":"markdown","d163afc1":"markdown","3166bf0e":"markdown","25d34de0":"markdown","101ee694":"markdown","eae6cd77":"markdown","3acf5df0":"markdown","dabe99cf":"markdown","1066946f":"markdown","3efbb894":"markdown","20ab8f35":"markdown","539621f9":"markdown","9efb710c":"markdown","c78ae0ad":"markdown","f1cb5d9d":"markdown","6ff545cd":"markdown","e40316a0":"markdown","b636a1de":"markdown"},"source":{"3035c382":"!pip install validators pandarallel","e22563d6":"import math\nimport numbers\nimport datetime as dt\nimport regex\nimport validators\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom pandarallel import pandarallel\nimport multiprocessing\n\nimport urllib3\nimport requests\n\nimport matplotlib.pyplot as plt","e81a1e2e":"!pip freeze > requirements.txt","9fe72279":"pd.set_option('display.encoding', \"UTF-8\")\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\n\npd.set_option('display.html.border', 2)\npd.set_option('display.html.table_schema', True)","1f93f332":"from IPython.core.display import display, HTML\n\n\ndef css_border(x):\n    return [\"border-left: 2px solid black\" if (i % 2 == 0) else \"border-left: 2px solid black\" for i, col in enumerate(x)]\n\n\ndef pd_html(df: pd.DataFrame):\n    return HTML(( df.style.apply(css_border, axis=1).render() ))\n\n\ndef display_pd_html(df: pd.DataFrame):\n    return display(pd_html(df))","776b7a2a":"tqdm.pandas()\npandarallel.initialize(progress_bar=False)\n\nCPU_COUNT = multiprocessing.cpu_count()\nprint(f\"Number of CPUs: {CPU_COUNT}\")","dd9d2320":"import sys\nimport logging\nfrom typing import Optional, Dict\n\nfrom colorama import Fore, Back, Style\n\n\nclass ColoredFormatter(logging.Formatter):\n    \"\"\"Colored log formatter.\"\"\"\n\n    def __init__(self, *args, colors: Optional[Dict[str, str]]=None, **kwargs) -> None:\n        \"\"\"Initialize the formatter with specified format strings.\"\"\"\n\n        super().__init__(*args, **kwargs)\n\n        self.colors = colors if colors else {}\n\n    def format(self, record) -> str:\n        \"\"\"Format the specified record as text.\"\"\"\n\n        record.color = self.colors.get(record.levelname, '')\n        record.reset = Style.RESET_ALL\n\n        return super().format(record)\n\n\nformatter = ColoredFormatter(\n    '{asctime} |{color} {levelname:8} {reset}| {name} | {message}',\n    style='{', datefmt='%Y-%m-%d %H:%M:%S',\n    colors={\n        'DEBUG': Fore.CYAN,\n        'INFO': Fore.GREEN,\n        'WARNING': Fore.YELLOW,\n        'ERROR': Fore.RED,\n        'CRITICAL': Fore.RED + Back.WHITE + Style.BRIGHT,\n    }\n)\n\nhandler = logging.StreamHandler(sys.stdout)\nhandler.setFormatter(formatter)\n\nLOGGER = logging.getLogger()\nLOGGER.handlers[:] = []\nLOGGER.addHandler(handler)\nLOGGER.setLevel(logging.DEBUG)\n\nLOGGER.info(\"This is a test log message.\")","e2900ed1":"train_data = pd.read_csv('\/kaggle\/input\/sf-dst-restaurant-rating\/main_task.csv')","1f54868e":"display_pd_html(train_data.sample(5))","22de816a":"test_data = pd.read_csv('\/kaggle\/input\/sf-dst-restaurant-rating\/kaggle_task.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/sf-dst-restaurant-rating\/sample_submission.csv')","3ef95d78":"train_data[\"sample\"] = 1\ntest_data[\"sample\"] = 0\ntest_data[\"Rating\"] = 0\n\ndata = test_data.append(train_data, sort=False).reset_index(drop=True)","e7be962d":"data.info(verbose=True, null_counts=True)","32f14f76":"display_pd_html(data.sample(5))","0deccff5":"raw_world_cities = pd.read_csv('\/kaggle\/input\/world-cities\/worldcities.csv')","9480be42":"raw_world_cities2 = pd.read_csv('\/kaggle\/input\/world-cities-database\/worldcitiespop.csv', low_memory=False)","48c82cbf":"STRING_REGEX_PRICE_RANGE = \"\\${1,4}\\s*-\\s*\\${1,4}\"\nSTRING_REGEX_PRICE_LEFT_RANGE_VALUE = \"^\\${1,4}(?=\\s*-)\"\nSTRING_REGEX_PRICE_RIGHT_RANGE_VALUE = \"(?<=-\\s*)\\${1,4}$\"\n\nSTRING_REGEX_PRICE_SINGLE = \"\\${1,4}\"\n\nREGEX_PRICE_RANGE = regex.compile(STRING_REGEX_PRICE_RANGE)\nREGEX_PRICE_LEFT_RANGE_VALUE = regex.compile(STRING_REGEX_PRICE_LEFT_RANGE_VALUE)\nREGEX_PRICE_RIGHT_RANGE_VALUE = regex.compile(STRING_REGEX_PRICE_RIGHT_RANGE_VALUE)\nREGEX_PRICE_SINGLE = regex.compile(STRING_REGEX_PRICE_SINGLE)","c6d29b56":"DICTIONARY_PRICE_RANGE_TO_INTEGER = {\n    None:         np.nan,\n    math.nan:     np.nan,\n    np.nan:       np.nan,\n    \"$\":          1,\n    \"$$ - $$$\":   2,\n    \"$$$$\":       3\n}","40edbc8d":"STRING_REGEX_SEPARATOR = \"[,;]\"\nSTRING_REGEX_SEPARATOR_SQUARE = \"[,;\\]]\"\nSTRING_REGEX_QUOTES = \"\"\"['\"]\"\"\"\nSTRING_REGEX_SYMBOLS = \"\"\"\\p{IsLatin}\\p{Other_Letter}\\p{Mark}\\p{Digit}\\p{Currency_Symbol}\\p{Math_Symbol}\\p{Initial_Punctuation}\\p{Final_Punctuation}\\p{Dash_Punctuation}\\p{Connector_Punctuation}\\p{Other_Symbol}\\p{Separator}\\p{Space_Separator}\\p{Line_Separator}p{Enclosing_Mark}&\\.!\\?\\\\\\\/\\s\"\"\"\nSTRING_REGEX_COMMON_SYMBOLS = f\"\"\"{STRING_REGEX_SYMBOLS}\\\"\\'\"\"\"\n\nSTRING_REGEX_LIST_ITEM = f\"\"\"[{STRING_REGEX_COMMON_SYMBOLS}]*\"\"\"\nSTRING_REGEX_LIST_ITEM_QUOTED = f\"\"\"{STRING_REGEX_QUOTES}{STRING_REGEX_LIST_ITEM}{STRING_REGEX_QUOTES}\"\"\"\nSTRING_REGEX_LIST_COMMA_WITH_BRACKETS_SQUARE = f\"\"\"\\s*\\[\\s*({STRING_REGEX_LIST_ITEM_QUOTED}\\s*{STRING_REGEX_SEPARATOR}\\s*)*({STRING_REGEX_LIST_ITEM_QUOTED})?\\s*\\]\\s*\"\"\"\nSTRING_REGEX_LIST_OF_LISTS_COMMA_WITH_BRACKETS_SQUARE = f\"\"\"\\s*\\[\\s*({STRING_REGEX_LIST_COMMA_WITH_BRACKETS_SQUARE}\\s*{STRING_REGEX_SEPARATOR}\\s*)*({STRING_REGEX_LIST_COMMA_WITH_BRACKETS_SQUARE})?\\s*\\]\\s*\"\"\"\n\nREGEX_LIST_COMMA_WITH_BRACKETS_SQUARE = regex.compile(STRING_REGEX_LIST_COMMA_WITH_BRACKETS_SQUARE)\nREGEX_LIST_ITEM_COMMA_WITH_BRACKETS_SQUARE = regex.compile(f\"\"\"(?<={STRING_REGEX_QUOTES}){STRING_REGEX_LIST_ITEM}(?={STRING_REGEX_QUOTES}\\s*{STRING_REGEX_SEPARATOR_SQUARE})\"\"\")\nREGEX_LIST_OF_LISTS_COMMA_WITH_BRACKETS_SQUARE = regex.compile(STRING_REGEX_LIST_OF_LISTS_COMMA_WITH_BRACKETS_SQUARE)\nREGEX_LIST_ITEM_OF_LISTS_COMMA_WITH_BRACKETS_SQUARE = regex.compile(f\"\"\"\\[[{STRING_REGEX_COMMON_SYMBOLS},;]*\\]\"\"\")\n\n# Additional regular expressions to clean the values up\nSTRING_REGEX_SEPARATOR_INSIDE = f\"\"\"(?<=[{STRING_REGEX_SYMBOLS}]+){STRING_REGEX_SEPARATOR}(?=[{STRING_REGEX_SYMBOLS}]+)\"\"\"\nSTRING_REGEX_QUOTES_DOUBLED = f\"\"\"\\\"{{2,}}|\\'{{2,}}\"\"\"\nSTRING_REGEX_QUOTES_SPACE_SIDE = f\"\"\"(^['\"\\s]+|['\"\\s]+$)\"\"\"\nREGEX_SEPARATOR_INSIDE = regex.compile(STRING_REGEX_SEPARATOR_INSIDE)\nREGEX_QUOTES_DOUBLED = regex.compile(STRING_REGEX_QUOTES_DOUBLED)\nREGEX_QUOTES_SPACE_SIDE = regex.compile(STRING_REGEX_QUOTES_SPACE_SIDE)","3377477a":"def string_to_list_of_strings(string_list):\n    \"\"\"Converts a string list surrounded with square brackets to a list of strings.\n    \"\"\"\n    if isinstance(string_list, list):\n        return string_list\n    if isinstance(string_list, str):\n        if not string_list:\n            return None\n        elif REGEX_LIST_COMMA_WITH_BRACKETS_SQUARE.match(string_list):\n            new_list = list(\n                map(lambda value: regex.sub(REGEX_QUOTES_SPACE_SIDE, \"\", value),\n                    filter(lambda value: bool(value.strip()), REGEX_LIST_ITEM_COMMA_WITH_BRACKETS_SQUARE.findall(\n                        regex.sub(REGEX_QUOTES_DOUBLED, \"\\\"\", regex.sub(\n                            REGEX_SEPARATOR_INSIDE, \"\", string_list))\n                    )\n                )))\n            return new_list if new_list else None\n        else:\n            raise Exception(f\"Wrong string list: \\\"{string_list}\\\"\")\n    else:\n        if isinstance(string_list, numbers.Number):\n            if np.isnan(string_list):\n                return None\n            else:\n                raise Exception(f\"Wrong string list: \\\"{string_list}\\\"\")\n        else:\n            raise Exception(f\"Wrong string list: \\\"{string_list}\\\"\")\n\n\ndef string_to_list_of_lists(string_list):\n    \"\"\"Converts a string list surrounded with square brackets to a list of lists of strings.\n    \"\"\"\n    if isinstance(string_list, str):\n        if not string_list:\n            return None\n        elif REGEX_LIST_OF_LISTS_COMMA_WITH_BRACKETS_SQUARE.match(string_list):\n            list_strings = REGEX_LIST_ITEM_OF_LISTS_COMMA_WITH_BRACKETS_SQUARE.findall(\n                string_list)\n            list_of_lists = list(map(lambda list_of_strings: string_to_list_of_strings(\n                list_of_strings), list_strings))\n            if not list_of_lists:\n                return None\n            else:\n                return list_of_lists\n    else:\n        if isinstance(string_list, numbers.Number):\n            if np.isnan(string_list):\n                return None\n            else:\n                raise Exception(f\"Wrong string list: \\\"{string_list}\\\"\")\n        else:\n            raise Exception(f\"Wrong string list: \\\"{string_list}\\\"\")\n\n\ndef interpret_list_of_lists_as_comments(list_of_lists: list):\n    if not list_of_lists:\n        return None\n    assert len(list_of_lists) == 2, f\"The list cannot beinterpreted as a list of comments: \" + str(list_of_lists)\n    list_comments = list_of_lists[0]\n    list_dates = list_of_lists[1]\n\n    date_format = \"%m\/%d\/%Y\"\n    comments = list()\n    if list_comments and list_dates:\n        assert len(list_comments) == len(list_dates)\n        for i in range(0, len(list_comments)):\n            comment_text = list_comments[i]\n            comment_date = dt.datetime.strptime(list_dates[i], date_format)\n            comments.append((comment_text, comment_date))\n    else:\n        if list_comments and not list_dates:\n            for i in range(0, len(list_comments)):\n                comment_text = list_comments[i]\n                comment_date = None\n                comments.append((comment_text, comment_date))\n        elif not list_comments and list_dates:\n            for i in range(0, len(list_dates)):\n                comment_text = None\n                comment_date = dt.datetime.strptime(list_dates[i], date_format)\n                comments.append((comment_text, comment_date))\n\n    return comments if comments else None","d61993d5":"URL_WEB_SITE = \"https:\/\/www.tripadvisor.com\"\n\n\ndef relative_uri_to_full_url(uri_relative: str, url_web_site: str):\n    assert uri_relative, f\"Got empty or None relative URI: {uri_relative}\"\n    assert url_web_site, f\"Got empty or None website URL: {url_web_site}\"\n    full_url_string = f\"{url_web_site}{uri_relative if uri_relative.startswith('\/') else '\/' + uri_relative}\"\n    assert validators.url(full_url_string), \"Invalid URL {full_url_string}, check the domain and the relarive path.\"\n    if not uri_relative:\n        return None\n    return urllib3.util.parse_url(full_url_string)","0fa802fd":"pre_data = pd.DataFrame(data)","74d75503":"pre_data.replace({\"Price Range\": DICTIONARY_PRICE_RANGE_TO_INTEGER}, inplace=True)","1aafc759":"display_pd_html(pre_data.sample(5))","c89d560e":"pre_data[\"Cuisine Style\"] = pre_data[\"Cuisine Style\"].apply(string_to_list_of_strings)","24934a05":"def convert_restaurant_comments_to_list(restaurant_row: pd.Series):\n    restaurant_reviews = restaurant_row[\"Reviews\"]\n    restaurant = restaurant_row.copy()\n    restaurant_reviews_list = string_to_list_of_lists(restaurant_reviews)\n    restaurant_comments = interpret_list_of_lists_as_comments(restaurant_reviews_list)\n    restaurant[\"Reviews\"] = restaurant_comments\n    return restaurant\n\n\npre_data[[\"Reviews\"]] = pre_data[[\"Reviews\"]].apply(convert_restaurant_comments_to_list, axis=1)","f3705d81":"pre_data.sample(2)","ea5a2953":"def fill_restaurant_urls(restaurant_row: pd.Series):\n    restaurant = restaurant_row.copy()\n    restaurant_relative_url_string = restaurant[\"URL_TA\"]\n    if isinstance(restaurant_relative_url_string, str):\n        restaurant_url = relative_uri_to_full_url(restaurant_relative_url_string, URL_WEB_SITE)\n        restaurant[\"URL_TA\"] = restaurant_url\n    else:\n        if isinstance(restaurant_relative_url_string, numbers.Number):\n            if np.isnan(restaurant_relative_url_string):\n                restaurant[\"URL_TA\"] = np.nan\n            else:\n                raise Exception(f\"Wrong URL_TA: {restaurant_relative_url_string}\")\n        else:\n            raise Exception(f\"Wrong URL_TA: {restaurant_relative_url_string}\")\n\n    return restaurant\n\n\npre_data[[\"URL_TA\"]] = pre_data[[\"URL_TA\"]].apply(fill_restaurant_urls, axis=1)\nrestaurant_url_column = pre_data.pop(\"URL_TA\")\npre_data.insert(len(pre_data.columns), \"URL_TA\", restaurant_url_column)","1b3d035e":"pre_data.sample(2)","7a39539b":"pre_data.drop([\"ID_TA\"], axis=1, inplace=True)","c2508a65":"pre_data.insert(len(pre_data.columns) - 1, \"Reviews\", pre_data.pop(\"Reviews\"))\npre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 1, \"City\", pre_data.pop(\"City\"))\npre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 2, \"Cuisine Style\", pre_data.pop(\"Cuisine Style\"))\npre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 3, \"URL_TA\", pre_data.pop(\"URL_TA\"))\n\npre_data.insert(pre_data.columns.get_loc(\"Restaurant_id\") + 1, \"Rating\", pre_data.pop(\"Rating\"))","91edc737":"pre_data.sample(2)","c925e820":"gaps = pd.DataFrame(data={\n    \"\u041a\u043e\u043b\u043e\u043d\u043a\u0430\": [\"Rating\", \"Ranking\", \"Price Range\", \"Number of Reviews\", \"City\", \"Cuisine Style\", \"Reviews\", \"URL_TA\"],\n    \"\u0427\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\": [\n        pre_data[\"Rating\"].isna().sum(),\n        pre_data[\"Ranking\"].isna().sum(),\n        pre_data[\"Price Range\"].isna().sum(),\n        pre_data[\"Number of Reviews\"].isna().sum(),\n        pre_data[\"City\"].isna().sum(),\n        pre_data[\"Cuisine Style\"].isna().sum(),\n        pre_data[\"Reviews\"].isna().sum(),\n        pre_data[\"URL_TA\"].isna().sum()\n    ]\n})\ndisplay_pd_html(gaps)","79395ab1":"MONTH_SEASONS = [(month%12 + 3)\/\/3 for month in range(1, 13)]\n\n\ndef month_to_season(month: numbers.Number):\n    assert 1 <= month <= 12, f\"Invalid month number: {month}\"\n    return MONTH_SEASONS[month - 1]\n\n\ndef day_to_weekend(day: numbers.Number):\n    return 1.0 if day == 5 or day == 6 else 0.0\n\n\ndef last_review_date_columns(restaurant_row: pd.Series):\n    restaurant_reviews = restaurant_row[\"Reviews\"]\n    restaurant_review_dates = map(lambda review: review[1], restaurant_reviews) if restaurant_reviews else None\n    last_review_date = max(restaurant_review_dates) if restaurant_review_dates else None\n\n    restaurant = restaurant_row.copy()\n    if last_review_date:\n        restaurant[\"Last Review Year\"] = last_review_date.year\n        restaurant[\"Last Review Season\"] = month_to_season(last_review_date.month)\n        restaurant[\"Last Review Month\"] = last_review_date.month\n        restaurant[\"Last Review Day\"] = last_review_date.day\n        restaurant[\"Last Review Is Weekend\"] = day_to_weekend(last_review_date.weekday())\n    else:\n        restaurant[\"Last Review Year\"] = np.nan\n        restaurant[\"Last Review Season\"] = np.nan\n        restaurant[\"Last Review Month\"] = np.nan\n        restaurant[\"Last Review Day\"] = np.nan\n        restaurant[\"Last Review Is Weekend\"] = np.nan\n    \n    return restaurant\n\n\npre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 1, \"Last Review Year\", np.nan)\npre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 2, \"Last Review Season\", np.nan)\npre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 3, \"Last Review Month\", np.nan)\npre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 4, \"Last Review Day\", np.nan)\npre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 5, \"Last Review Is Weekend\", np.nan)\n\n\nreview_columns = [\"Reviews\", \"Last Review Year\", \"Last Review Season\", \"Last Review Month\", \"Last Review Day\", \"Last Review Is Weekend\"]\npre_data[review_columns] = pre_data[review_columns].apply(last_review_date_columns, axis=1)\npre_data.drop([\"Reviews\"], axis=1, inplace=True)","d4392991":"display_pd_html(pre_data.sample(5))","2af54afc":"pre_data.insert(pre_data.columns.get_loc(\"Last Review Is Weekend\") + 1, \"URL_TA\", pre_data.pop(\"URL_TA\"))\ndisplay_pd_html(pre_data.sample(2))","3bf99449":"SEASON_DICTIONARY = {\n    None: np.nan,\n    np.nan: np.nan,\n    math.nan: np.nan,\n    1: \"Winter\",\n    2: \"Spring\",\n    3: \"Summer\",\n    4: \"Autumn\"\n}\n\nSEASON_NAMES = list(filter(lambda value: isinstance(value, str), SEASON_DICTIONARY.values()))\nSEASON_COLUMN_PREFIX = \"LR_Season\"\nSEASON_COLUMN_NAMES = [f\"{SEASON_COLUMN_PREFIX}_{season}\" for season in SEASON_NAMES] + [f\"{SEASON_COLUMN_PREFIX}_nan\"]\n\npre_data.replace({ \"Last Review Season\": SEASON_DICTIONARY }, inplace=True)\npre_data = pd.concat([pre_data, pd.get_dummies(pre_data[\"Last Review Season\"], prefix=SEASON_COLUMN_PREFIX, dummy_na=True)], axis=1)\npre_data.drop([\"Last Review Season\"], axis=1, inplace=True)\n\nfor season_index, season_column in enumerate(SEASON_COLUMN_NAMES):\n    pre_data.insert(pre_data.columns.get_loc(\"Last Review Is Weekend\") + (season_index + 1), season_column, pre_data.pop(season_column))","f34bd8fb":"display_pd_html(pre_data.sample(2))","ea4df34c":"CITY_NAMES = sorted(pre_data[\"City\"].unique())\nCITY_COLUMN_PREFIX = \"City\"\nCITY_COLUMN_NAMES = [f\"{CITY_COLUMN_PREFIX}_{city_name}\" for city_name in CITY_NAMES]\n\npre_data = pd.concat([pre_data, pd.get_dummies(pre_data[\"City\"], prefix=CITY_COLUMN_PREFIX)], axis=1)\npre_data.drop([\"City\"], axis=1, inplace=True)","406ae54b":"display_pd_html(pre_data.sample(2))","4a84f114":"import requests\nfrom bs4 import BeautifulSoup\nfrom lxml import html\nfrom lxml.etree import tostring","6db2bbb7":"gaps = pd.DataFrame(data={\n    \"\u041a\u043e\u043b\u043e\u043d\u043a\u0430\": [\"Price Range\", \"Number of Reviews\",\n                \"Last Review Year\", \"Last Review Month\", \"Last Review Day\", \"Last Review Is Weekend\",\n                \"LR_Season_Winter\", \"LR_Season_Spring\", \"LR_Season_Summer\", \"LR_Season_Autumn\", \"LR_Season_nan\",\n                \"Cuisine Style\"],\n    \"\u0427\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\": [\n        pre_data[\"Price Range\"].isna().sum(),\n        pre_data[\"Number of Reviews\"].isna().sum(),\n        pre_data[\"Last Review Year\"].isna().sum(),\n        pre_data[\"Last Review Month\"].isna().sum(),\n        pre_data[\"Last Review Day\"].isna().sum(),\n        pre_data[\"Last Review Is Weekend\"].isna().sum(),\n        pre_data[\"LR_Season_Winter\"].isna().sum(),\n        pre_data[\"LR_Season_Spring\"].isna().sum(),\n        pre_data[\"LR_Season_Summer\"].isna().sum(),\n        pre_data[\"LR_Season_Autumn\"].isna().sum(),\n        pre_data[\"LR_Season_nan\"].sum(),\n        pre_data[\"Cuisine Style\"].isna().sum()\n    ]\n})\ndisplay_pd_html(gaps)\nprint(f\"\u041e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439: {len(pre_data)}\")","cf5ee569":"LOGGER.setLevel(logging.INFO)\n\n\ndef get_element_text_by_xpath(xpath_string: str, url: urllib3.util.Url):\n    page_content=requests.get( url.url, headers={\"Accept-Language\": \"en\"} )\n    tree = html.fromstring(page_content.content)\n    result = tree.xpath(xpath_string)\n    return result\n\n\ndef get_contents_text_by_xpath(xpath_strings: dict, url: urllib3.util.Url):\n    page_content=requests.get( url.url, headers={\"Accept-Language\": \"en\"} )\n    tree = html.fromstring(page_content.content)\n    results = dict()\n\n    for xpath_string in xpath_strings.items():\n        result = tree.xpath(xpath_string[1])\n        results[xpath_string[0]] = result\n\n    return results","c63d243b":"# CUISINE_COLUMN_NAMES = list()\n# CUISINE_NAMES = list()\n\n\n# CUISINE_NAMES_SET = set()\n# for index, entry_cuisine_list in pre_data[\"Cuisine Style\"].iteritems():\n#     for cuisine in entry_cuisine_list:\n#         CUISINE_NAMES_SET.add(cuisine)\n# CUISINE_NAMES = sorted(cuisine_style_set)\n# print(f\"Cuisine names: {CUISINE_NAMES}\")\n\n\n# def fill_cuisine_style_columns_each_row(restaurant_row: pd.Series):\n#     restaurant = restaurant_row.copy()\n#     for cuisine_style in restaurant[\"Cuisine Style\"]:\n#         restaurant[f\"Cuisine_{cuisine_style}\"] = 1\n#     return restaurant","538334a0":"# from tqdm import tqdm\n\n# tqdm.pandas()\n\n# from pandarallel import pandarallel\n# pandarallel.initialize(progress_bar=False)\n\n# -----------\n\nFAILED_GAPS = list()\n\n\ndef fill_restaurant_data_from_Internet(restaurant_row: pd.Series):\n    number_of_reviews = restaurant_row[\"Number of Reviews\"]\n    price_range = restaurant_row[\"Price Range\"]\n    cuisine_style = restaurant_row[\"Cuisine Style\"]\n    last_review_year = restaurant_row[\"Last Review Year\"]\n\n    restaurant_url = restaurant_row[\"URL_TA\"]\n    if (not number_of_reviews or np.isnan(number_of_reviews)) \\\n        or (not price_range or np.isnan(price_range)) \\\n        or (not cuisine_style) \\\n        or (not last_review_year or np.isnan(last_review_year)):\n        website_data = get_contents_text_by_xpath(\n            {\n                \"Number of Reviews\": \"\"\"\/\/div[@data-tab = \"TABS_OVERVIEW\"]\/div[1]\/div[1]\/div[1]\/div[1]\/div[1]\/a[@href = \"#REVIEWS\"]\/text()\"\"\",\n                \"Price Range\": \"\"\"\/\/div[@data-test-target = \"restaurant-detail-info\"]\/div[2]\/span[3]\/a[1]\/text()\"\"\",\n                \"Cuisine Style\": \"\"\"\/\/div[h2[text() = \"Details\"]]\/following-sibling::div[1]\/div\/div[text() = \"CUISINES\"]\/following-sibling::div\/text()\"\"\",\n                \"Last Review Date\": \"\"\"(\/\/span[@class=\"ratingDate\"]\/@title)[1]\"\"\",\n                \"Center Distance\": \"\"\"\/\/div[@data-tab = \"TABS_OVERVIEW\"]\/div[1]\/div[3]\/div[1]\/div[1]\/div[2]\/span[2]\/div[2]\/b[1]\/text()\"\"\",\n                \"Travelers' Choice\": \"\"\"\/\/span[contains(text(), \"Travelers' Choice\")]\/text()\"\"\",\n                \"MICHELIN\": \"\"\"(\/\/div[contains(text(), \"MICHELIN\")]\/text())[1]\"\"\"\n            },\n            restaurant_url\n        )\n        if not all([website_data[\"Number of Reviews\"], website_data[\"Price Range\"], website_data[\"Cuisine Style\"], website_data[\"Last Review Date\"]]):\n            FAILED_GAPS.append({\n                \"URL\": restaurant_url.url,\n                \"Number of Reviews\": website_data[\"Number of Reviews\"],\n                \"Price Range\": website_data[\"Price Range\"],\n                \"Cuisine Style\": website_data[\"Cuisine Style\"],\n                \"Last Review Date\": website_data[\"Last Review Date\"]\n            })\n\n        restaurant = restaurant_row.copy()\n\n        if (np.isnan(number_of_reviews)) and website_data[\"Number of Reviews\"]:\n            web_number_of_reviews = int(website_data[\"Number of Reviews\"][0].split(\" \")[0])\n            restaurant[\"Number of Reviews\"] = web_number_of_reviews\n        if (np.isnan(price_range)) and website_data[\"Price Range\"]:\n            if REGEX_PRICE_RANGE.match(website_data[\"Price Range\"][0]) \\\n                or REGEX_PRICE_SINGLE.match(website_data[\"Price Range\"][0]):\n                web_price_range = DICTIONARY_PRICE_RANGE_TO_INTEGER[website_data[\"Price Range\"][0]]\n                restaurant[\"Price Range\"] = web_price_range\n\n        if (not cuisine_style) and website_data[\"Cuisine Style\"]:\n            web_cuisine_style = website_data[\"Cuisine Style\"][0]\n            web_cuisine_style = f\"\"\"[\\\"{web_cuisine_style}\\\"]\"\"\".replace(\",\", \"\\\",\\\"\" )\n            restaurant[\"Cuisine Style\"] = string_to_list_of_strings(web_cuisine_style)\n        elif not isinstance(cuisine_style, list):\n            if isinstance(cuisine_style, numbers.Number):\n                if np.isnan(cuisine_style) and website_data[\"Cuisine Style\"]:\n                    web_cuisine_style = website_data[\"Cuisine Style\"][0]\n                    web_cuisine_style = f\"\"\"[\\\"{web_cuisine_style}\\\"]\"\"\".replace(\",\", \"\\\",\\\"\" )\n                    restaurant[\"Cuisine Style\"] = string_to_list_of_strings(web_cuisine_style)\n\n        if (np.isnan(last_review_year) or np.isnan(number_of_reviews)) and website_data[\"Last Review Date\"]:\n            web_last_review_date =  website_data[\"Last Review Date\"][0]\n            web_last_review_date = dt.datetime.strptime(web_last_review_date, \"%B %d, %Y\")\n            restaurant[\"Last Review Year\"] = web_last_review_date.year\n            restaurant[\"Last Review Month\"] = web_last_review_date.month\n            restaurant[\"Last Review Day\"] = web_last_review_date.day\n            restaurant[\"Last Review Is Weekend\"] = day_to_weekend(web_last_review_date.dayofweek)\n\n            season = SEASON_DICTIONARY[month_to_season(web_last_review_date.month)]\n            if isinstance(season, str) and season:\n                season_column = f\"{SEASON_COLUMN_PREFIX}_{season}\"\n                restaurant[season_column] = 1\n                restaurant[\"LR_Season_nan\"] = 0\n            else:\n                restaurant[\"LR_Season_nan\"] = 1\n            \n            web_number_of_reviews = int(website_data[\"Number of Reviews\"][0].split(\" \")[0].replace(\",\", \"\"))\n            restaurant[\"Number of Reviews\"] = web_number_of_reviews\n        \n        # In miles\n        if website_data[\"Center Distance\"]:\n            web_center_distance = float(website_data[\"Center Distance\"][0].split(\" \")[0])\n            restaurant[\"Center Distance\"] = web_center_distance\n        if website_data[\"Travelers' Choice\"]:\n            web_travelers_choice = 1.0 if website_data[\"Travelers' Choice\"][0] else 0.0\n            restaurant[\"Travelers' Choice\"] = web_travelers_choice\n        if website_data[\"MICHELIN\"]:\n            web_michelin_guide = 1.0 if website_data[\"MICHELIN\"][0] else 0.0\n            restaurant[\"MICHELIN\"] = web_michelin_guide\n    \n        return restaurant\n    else:\n        website_data = get_contents_text_by_xpath(\n            {\n                \"Center Distance\": \"\"\"\/\/div[@data-tab = \"TABS_OVERVIEW\"]\/div[1]\/div[3]\/div[1]\/div[1]\/div[2]\/span[2]\/div[2]\/b[1]\/text()\"\"\",\n                \"Travelers' Choice\": \"\"\"\/\/span[contains(text(), \"Travelers' Choice\")]\/text()\"\"\",\n                \"MICHELIN\": \"\"\"(\/\/div[contains(text(), \"MICHELIN\")]\/text())[1]\"\"\"\n            },\n            restaurant_url\n        )\n\n        restaurant = restaurant_row.copy()\n\n        # In miles\n        if website_data[\"Center Distance\"]:\n            web_center_distance = float(website_data[\"Center Distance\"][0].split(\" \")[0])\n            restaurant[\"Center Distance\"] = web_center_distance\n        if website_data[\"Travelers' Choice\"]:\n            web_travelers_choice = 1.0 if website_data[\"Travelers' Choice\"][0] else 0.0\n            restaurant[\"Travelers' Choice\"] = web_travelers_choice\n        if website_data[\"MICHELIN\"]:\n            web_michelin_guide = 1.0 if website_data[\"MICHELIN\"][0] else 0.0\n            restaurant[\"MICHELIN\"] = web_michelin_guide\n        return restaurant","47108701":"# from tqdm import tqdm\n\n# tqdm.pandas()\n\n# from pandarallel import pandarallel\n# pandarallel.initialize(progress_bar=False)\n\n# if not (\"Center Distance\" in pre_data.columns):\n#     pre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 1, \"Center Distance\", np.nan)\n# if not (\"Travelers' Choice\" in pre_data.columns):\n#     pre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 2, \"Travelers' Choice\", np.nan)\n# if not (\"MICHELIN\" in pre_data.columns):\n#     pre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 3, \"MICHELIN\", np.nan)\n\n# data_columns = [\n#     \"Number of Reviews\",\n#     \"Price Range\",\n#     \"Cuisine Style\",\n#     \"Last Review Year\",\n#     \"Last Review Month\",\n#     \"Last Review Day\",\n#     \"Last Review Is Weekend\",\n#     \"LR_Season_Winter\", \"LR_Season_Spring\", \"LR_Season_Summer\", \"LR_Season_Autumn\", \"LR_Season_nan\",\n#     \"Center Distance\",\n#     \"Travelers' Choice\",\n#     \"MICHELIN\",\n#     \"URL_TA\"\n# ]\n\n# pre_data[data_columns] = pre_data[data_columns].parallel_apply(fill_restaurant_data_from_Internet, axis=1)","dfd44fba":"# pre_data.to_csv(\"kaggle\/output\/intermediate_data\/pre_data.csv\")","97d1d647":"# # pre_data_sample = pd.DataFrame(pre_data[pre_data[\"Restaurant_id\"] == \"id_13936\"])\n# pre_data_sample = pd.DataFrame(pre_data.sample(100))\n\n# if not (\"Center Distance\" in pre_data_sample.columns):\n#     pre_data_sample.insert(pre_data_sample.columns.get_loc(\"Number of Reviews\") + 1, \"Center Distance\", np.nan)\n# if not (\"Travelers' Choice\" in pre_data.columns):\n#     pre_data_sample.insert(pre_data_sample.columns.get_loc(\"Number of Reviews\") + 2, \"Travelers' Choice\", np.nan)\n# if not (\"MICHELIN\" in pre_data.columns):\n#     pre_data_sample.insert(pre_data_sample.columns.get_loc(\"Number of Reviews\") + 3, \"MICHELIN\", np.nan)\n\n# data_columns = [\n#     \"Number of Reviews\",\n#     \"Price Range\",\n#     \"Cuisine Style\",\n#     \"Last Review Year\",\n#     \"Last Review Month\",\n#     \"Last Review Day\",\n#     \"Last Review Is Weekend\",\n#     \"LR_Season_Winter\", \"LR_Season_Spring\", \"LR_Season_Summer\", \"LR_Season_Autumn\", \"LR_Season_nan\",\n#     \"Center Distance\",\n#     \"Travelers' Choice\",\n#     \"MICHELIN\",\n#     \"URL_TA\"\n# ]\n\n# pre_data_sample[data_columns] = pre_data_sample[data_columns].apply(fill_restaurant_data_from_Internet, axis=1)\n# pre_data_sample","9d3963a8":"display_pd_html(pre_data.sample(5))","0335d16e":"number_of_reviews_typical = pre_data[~pre_data[\"Number of Reviews\"].isna()][\"Number of Reviews\"].mean()\npre_data[\"Number of Reviews\"].fillna(number_of_reviews_typical, inplace=True)\npre_data[\"Number of Reviews\"].isna().sum()","a63f16d6":"price_range_typical = pre_data[~pre_data[\"Price Range\"].isna()][\"Price Range\"].mean()\npre_data[\"Price Range\"].fillna(price_range_typical, inplace=True)\npre_data[\"Price Range\"].isna().sum()","34234901":"# If an entry in the column pre_data[\"Last Review Year\"] is NaN\n# other entries in the same row are NaN too in the columns\n# \"Last Review Season\", \"Last Review Month\", \"Last Review Day\" \u0438 \"Last Review Weekend Day\".\nSTRING_DATE_FORMAT = \"%Y\/%m\/%d\"\n\nrestaurants_region = pre_data[~pre_data[\"Last Review Year\"].isna()]\n\nregion_max_review_year = restaurants_region[\"Last Review Year\"].value_counts().index[0]\nregion_max_review_month = restaurants_region[\n    restaurants_region[\"Last Review Year\"] == region_max_review_year\n][\"Last Review Month\"].value_counts().index[0]\nregion_max_review_day = restaurants_region[\n    (restaurants_region[\"Last Review Year\"] == region_max_review_year)&(restaurants_region[\"Last Review Month\"] == region_max_review_month)\n][\"Last Review Day\"].value_counts().index[0]\nregion_max_review_date = pd.to_datetime(dt.datetime(int(region_max_review_year), int(region_max_review_month), int(region_max_review_day)))\n\nLOGGER.info(f\"Most probable date of a review of a restaurant visitor in the region of Europe: {region_max_review_date.strftime(STRING_DATE_FORMAT)}\")\n\ncity_max_review_dates = dict()\n\nfor index, restaurant in pre_data[pre_data[\"Last Review Year\"].isna()].iterrows():\n    restaurant_city_data = restaurant[CITY_COLUMN_NAMES]\n    restaurant_city = restaurant_city_data[restaurant_city_data == 1].index[0]\n\n    city_max_review_date = None\n    if restaurant_city in city_max_review_dates:\n        city_max_review_date = city_max_review_dates[restaurant_city]\n    else:\n        restaurants_same_city = pre_data[(pre_data[restaurant_city] == 1)&(~pre_data[\"Last Review Year\"].isna())]\n        if len(restaurants_same_city) > 0:\n            city_max_review_year = restaurants_same_city[\"Last Review Year\"].value_counts().index[0]\n            city_max_review_month = restaurants_same_city[\n                restaurants_same_city[\"Last Review Year\"] == city_max_review_year\n            ][\"Last Review Month\"].value_counts().index[0]\n            city_max_review_day = restaurants_same_city[\n                (restaurants_same_city[\"Last Review Year\"] == city_max_review_year)&(restaurants_same_city[\"Last Review Month\"] == city_max_review_month)\n            ][\"Last Review Day\"].value_counts().index[0]\n            city_max_review_date = pd.to_datetime(dt.datetime(int(city_max_review_year), int(city_max_review_month), int(city_max_review_day)))\n\n            city_max_review_dates[restaurant_city] = city_max_review_date\n        else:\n            LOGGER.error(f\"The restaurant with ID {restaurant['Restaurant_id']} in the city {restaurant_city} has no other sibling restaurants. Will use the common European date from the dataset: {region_max_review_date.strftime(STRING_DATE_FORMAT)}\")\n            city_max_review_date = region_max_review_date\n            break\n\n    pre_data.at[index, \"Review Last Date\"] = city_max_review_date\n    pre_data.at[index, \"Last Review Year\"] = city_max_review_date.year\n    pre_data.at[index, \"Last Review Month\"] = city_max_review_date.month\n    pre_data.at[index, \"Last Review Day\"] = city_max_review_date.day\n    pre_data.at[index, \"Last Review Is Weekend\"] = day_to_weekend(city_max_review_date.dayofweek)\n    \n    season = SEASON_DICTIONARY[month_to_season(int(city_max_review_date.month))]\n    season_column = f\"{SEASON_COLUMN_PREFIX}_{season}\"\n    pre_data.at[index, season_column] = 1.0\n    pre_data.at[index, f\"{SEASON_COLUMN_PREFIX}_nan\"] = 0.0","0a3607f8":"gaps = pd.DataFrame(data={\n    \"\u041a\u043e\u043b\u043e\u043d\u043a\u0430\": [\"Price Range\", \"Number of Reviews\",\n                \"Last Review Year\", \"Last Review Month\", \"Last Review Day\", \"Last Review Is Weekend\",\n                \"LR_Season_Winter\", \"LR_Season_Spring\", \"LR_Season_Summer\", \"LR_Season_Autumn\", \"LR_Season_nan\",\n                \"Cuisine Style\"],\n    \"\u0427\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\": [\n        pre_data[\"Price Range\"].isna().sum(),\n        pre_data[\"Number of Reviews\"].isna().sum(),\n        pre_data[\"Last Review Year\"].isna().sum(),\n        pre_data[\"Last Review Month\"].isna().sum(),\n        pre_data[\"Last Review Day\"].isna().sum(),\n        pre_data[\"Last Review Is Weekend\"].isna().sum(),\n        pre_data[\"LR_Season_Winter\"].isna().sum(),\n        pre_data[\"LR_Season_Spring\"].isna().sum(),\n        pre_data[\"LR_Season_Summer\"].isna().sum(),\n        pre_data[\"LR_Season_Autumn\"].isna().sum(),\n        pre_data[\"LR_Season_nan\"].sum(),\n        pre_data[\"Cuisine Style\"].isna().sum()\n    ]\n})\ndisplay_pd_html(gaps)\nprint(f\"\u041e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439: {len(pre_data)}\")","fcd6a9d8":"CUISINE_COUNTER = 0\n\n\ndef fill_restaurant_cuisines_from_Internet(restaurant_row: pd.Series):\n    global CUISINE_COUNTER\n    cuisine_style = restaurant_row[\"Cuisine Style\"]\n    restaurant_url = restaurant_row[\"URL_TA\"]\n    if not cuisine_style or cuisine_style == None:\n        website_data = get_contents_text_by_xpath(\n            {\n               \"Cuisine Style\": \"\"\"\/\/div[h2[text() = \"Details\"]]\/following-sibling::div[1]\/div\/div[text() = \"CUISINES\"]\/following-sibling::div\/text()\"\"\",\n            },\n            restaurant_url\n        )\n        restaurant = restaurant_row.copy()\n        if website_data[\"Cuisine Style\"]:\n            web_cuisine_style = website_data[\"Cuisine Style\"][0]\n            web_cuisine_style = f\"\"\"[\\\"{web_cuisine_style}\\\"]\"\"\".replace(\",\", \"\\\",\\\"\" )\n            web_cuisine_style_list = string_to_list_of_strings(web_cuisine_style)\n            CUISINE_COUNTER = CUISINE_COUNTER + 1\n            LOGGER.info(f\"Cuisines-{CUISINE_COUNTER*CPU_COUNT}: {web_cuisine_style_list}\")\n            restaurant[\"Cuisine Style\"] = web_cuisine_style_list\n        return restaurant\n    return restaurant_row","cbedb96a":"# \u041f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043b\u0438 \u043d\u0435\u0442 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 (\u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438)\nDO_WEB_SCRAPPING = False","5ec382df":"data_columns = [\n    \"Cuisine Style\",\n    \"URL_TA\"\n]\n\nif DO_WEB_SCRAPPING:\n    pre_data[data_columns] = pre_data[data_columns].parallel_apply(fill_restaurant_cuisines_from_Internet, axis=1)","39f650b8":"if DO_WEB_SCRAPPING:\n    pre_data.to_csv(\"\/kaggle\/input\/pre-datarestaurant-ratingsweb-scrapping-cuisines\/pre_data-restaurant_ratings-web_scrapping_cuisines.csv\", index=False)","b96cb6e6":"pre_data = pd.read_csv('\/kaggle\/input\/pre-datarestaurant-ratingsweb-scrapping-cuisines\/pre_data-restaurant_ratings-web_scrapping_cuisines.csv')","72506f99":"gaps = pd.DataFrame(data={\n    \"\u041a\u043e\u043b\u043e\u043d\u043a\u0430\": [\"Cuisine Style\"],\n    \"\u0427\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\": [\n        pre_data[\"Cuisine Style\"].isna().sum()\n    ]\n})\ndisplay_pd_html(gaps)\nprint(f\"\u041e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439: {len(pre_data)}\")","f2db9a77":"pre_data.sample(5)","15a21ba0":"if not \"Cuisine_nan\" in pre_data.columns:\n    pre_data.insert(pre_data.columns.get_loc(\"Cuisine Style\"), \"Cuisine_nan\", 0.0)\n\n\ndef fillna_cuisines(restaurant_row: pd.Series):\n    restaurant_cuisine = restaurant_row[\"Cuisine Style\"]\n    if not restaurant_cuisine or restaurant_cuisine == None:\n        restaurant = restaurant_row.copy()\n        restaurant[\"Cuisine_nan\"] = 1.0\n        restaurant[\"Cuisine Style\"] = []\n        return restaurant\n    elif isinstance(restaurant_cuisine, numbers.Number):\n        if np.isnan(restaurant_cuisine):\n            restaurant = restaurant_row.copy()\n            restaurant[\"Cuisine_nan\"] = 1.0\n            restaurant[\"Cuisine Style\"] = []\n            return restaurant\n    else:\n        return restaurant_row\n\ndata_columns = [\"Cuisine_nan\", \"Cuisine Style\"]\npre_data[data_columns] = pre_data[data_columns].apply(fillna_cuisines, axis=1)","6759964b":"gaps = pd.DataFrame(data={\n    \"\u041a\u043e\u043b\u043e\u043d\u043a\u0430\": [\"Cuisine Style\"],\n    \"\u0427\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\": [\n        pre_data[\"Cuisine Style\"].isna().sum()\n    ]\n})\ndisplay_pd_html(gaps)\nprint(f\"\u041e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439: {len(pre_data)}\")","53a4fa64":"pre_data[\"Cuisine Style\"] = pre_data[\"Cuisine Style\"].apply(string_to_list_of_strings)","1a10f80e":"CUISINE_NAME_SET = set()\nfor index, entry_cuisine_list in pre_data[\"Cuisine Style\"].iteritems():\n    for cuisine in entry_cuisine_list:\n        CUISINE_NAME_SET.add(cuisine)\n\nCUISINE_NAMES = sorted(CUISINE_NAME_SET)\nprint(f\"Unique cuisine names: {CUISINE_NAMES}\")","ba1c3c55":"CUISINE_COLUMN_PREFIX = \"Cuisine\"\nCUISINE_COLUMN_NAMES = []\n\nfor index, cuisine_name in enumerate(CUISINE_NAMES):\n    cuisine_column_name = f\"{CUISINE_COLUMN_PREFIX}_{cuisine_name}\"\n    CUISINE_COLUMN_NAMES.append(cuisine_column_name)\n    if not cuisine_column_name in pre_data.columns:\n        pre_data.insert(pre_data.columns.get_loc(\"Cuisine Style\") + (index + 1), cuisine_column_name, 0.0)\n\n\ndef fill_cuisine_style_columns_each_row(restaurant_row: pd.Series):\n    restaurant = restaurant_row.copy()\n    for cuisine_style in restaurant[\"Cuisine Style\"]:\n        restaurant[f\"{CUISINE_COLUMN_PREFIX}_{cuisine_style}\"] = 1.0\n    return restaurant\n\n\npre_data[[\"Cuisine Style\"] + CUISINE_COLUMN_NAMES] = pre_data[[\"Cuisine Style\"] + CUISINE_COLUMN_NAMES].apply(fill_cuisine_style_columns_each_row, axis=1)\nprint(\"------------------------------\")\nprint(\"Visual Test:\")\nprint(pre_data.iloc[12][[\"Restaurant_id\", \"Cuisine Style\", \"Cuisine_Greek\", \"Cuisine_Xinjiang\"]])\nprint(\"---------------\")\nprint(pre_data.iloc[80][[\"Restaurant_id\", \"Cuisine Style\", 'Cuisine_French', 'Cuisine_Asian', 'Cuisine_European', 'Cuisine_Gluten Free Options', 'Cuisine_Vegetarian Friendly', 'Cuisine_Vegan Options', \"Cuisine_Xinjiang\"]])\nprint(\"------------------------------\")","3c4ee7e4":"if \"Review Last Date\" in pre_data.columns:\n    pre_data.drop(\"Review Last Date\", axis=1, inplace=True)\nif \"Cuisine Style\" in pre_data.columns:\n    pre_data.drop(\"Cuisine Style\", axis=1, inplace=True)\ndisplay_pd_html(pre_data.sample(5))","18d33571":"world_cities = raw_world_cities.copy()\nworld_cities.drop([\"city\", \"lat\", \"lng\", \"iso2\", \"iso3\", \"admin_name\", \"id\"], axis=1, inplace=True)\nworld_cities.rename(columns={\"city_ascii\": \"city\"}, inplace=True)\nworld_cities[\"capital\"] = world_cities[\"capital\"].apply(lambda status: 1 if status == \"primary\" else 0)\ndisplay_pd_html(world_cities[world_cities[\"capital\"] == 1].sample(3))\ndisplay_pd_html(world_cities[world_cities[\"capital\"] == 0].sample(3))","5388554c":"not_found_cities_set1 = [city for city in CITY_NAMES if city not in world_cities[\"city\"].unique()]\nnot_found_cities_set1","fd413d50":"world_cities2 = raw_world_cities2.copy()\nworld_cities2.drop([\"Latitude\", \"Longitude\", \"Region\", \"City\"], axis=1, inplace=True)\nworld_cities2.rename(columns={\"AccentCity\": \"city\", \"Country\": \"country\", \"Population\": \"population\"}, inplace=True)\ndisplay_pd_html(world_cities2.sample(3))","b0808f11":"not_european_country = [\n    \"Venezuela\",\n    \"Canada\",\n    \"United States\"\n]\n\nrestaurant_cities = world_cities[\n    (world_cities[\"city\"].isin(CITY_NAMES))&(~world_cities[\"country\"].isin(not_european_country))\n].sort_values(by=[\"country\", \"city\"])\nfor not_found_city in not_found_cities_set1:\n    city_entry = world_cities2[world_cities2[\"city\"] == not_found_city].iloc[0]\n    restaurant_cities = restaurant_cities.append({\n        \"city\": city_entry[\"city\"],\n        \"country\": city_entry[\"country\"],\n        \"capital\": 0,\n        \"population\": city_entry[\"population\"]\n    }, ignore_index=True)\n\nrestaurant_cities.loc[\n    restaurant_cities[\"city\"] == \"Copenhagen\", [\"country\", \"capital\"]\n] = [\"Denmark\", 1]\nrestaurant_cities.loc[\n    restaurant_cities[\"city\"] == \"Oporto\", [\"country\", \"capital\", \"population\"]\n] = [\"Portugal\", 0, 237559.0]\nrestaurant_cities = restaurant_cities.sort_values(by=[\"country\", \"city\"])\nrestaurant_cities","4c04b88a":"if not \"City Is a Capital\" in pre_data.columns:\n    pre_data.insert(pre_data.columns.get_loc(\"Number of Reviews\") + 1, \"City Is a Capital\", np.nan)\nif not \"City Population\" in pre_data.columns:\n    pre_data.insert(pre_data.columns.get_loc(\"City Is a Capital\") + 1, \"City Population\", np.nan)\n\n\ndef apply_city_data(restaurant_row: pd.Series):\n    restaurant_city_data = restaurant_row[CITY_COLUMN_NAMES]\n    restaurant_city = restaurant_city_data[restaurant_city_data == 1].index[0]\n    restaurant_city = restaurant_city.replace(f\"{CITY_COLUMN_PREFIX}_\", \"\")\n    \n    restaurant = restaurant_row.copy()\n    restaurant_city_entry = restaurant_cities[restaurant_cities[\"city\"] == restaurant_city]\n    restaurant[\"City Is a Capital\"] = int(restaurant_city_entry[\"capital\"].values[0])\n    restaurant[\"City Population\"] = float(restaurant_city_entry[\"population\"])\n    return restaurant\n\n\ndata_columns = [\"City Is a Capital\", \"City Population\"] + CITY_COLUMN_NAMES\npre_data[data_columns] = pre_data[data_columns].parallel_apply(apply_city_data, axis=1)","2ada31f9":"display_pd_html(pre_data.sample(5))","4afc5580":"if not \"Cuisine Number\" in pre_data.columns:\n    pre_data.insert(pre_data.columns.get_loc(\"Ranking\") + 1, \"Cuisine Number\", 0)\n\n\ndef fill_cuisine_number(restaurant_row: pd.Series):\n    cuisine_data = restaurant_row[CUISINE_COLUMN_NAMES]\n    cuisine_number = cuisine_data.sum()\n    restaurant = restaurant_row.copy()\n    restaurant[\"Cuisine Number\"] = cuisine_number\n    return restaurant\n    \n\ndata_columns = [\"Cuisine Number\"] + CUISINE_COLUMN_NAMES\npre_data[data_columns] = pre_data[data_columns].parallel_apply(fill_cuisine_number, axis=1)","1af88684":"display_pd_html(pre_data.sample(5))","2e9ee018":"np.sqrt(pre_data[\"Ranking\"][(pre_data[\"Rating\"] > 4)&(pre_data[\"Rating\"] <= 5)]).hist(bins=100)","21b9c467":"np.sqrt(pre_data[\"Ranking\"][(pre_data[\"Rating\"] > 3)&(pre_data[\"Rating\"] <= 4)]).hist(bins=100)","52fbd049":"np.sqrt(pre_data[\"Ranking\"][(pre_data[\"Rating\"] > 2)&(pre_data[\"Rating\"] <= 3)]).hist(bins=100)","90cad4e9":"np.sqrt(pre_data[\"Ranking\"][(pre_data[\"Rating\"] > 1)&(pre_data[\"Rating\"] <= 2)]).hist(bins=100)","6a06eeeb":"np.sqrt(pre_data[\"Ranking\"][pre_data[\"Rating\"] <= 1]).hist(bins=100)","4edff082":"if not \"sqrt(Ranking)\" in pre_data.columns:\n    pre_data.insert(pre_data.columns.get_loc(\"Ranking\") + 1, \"sqrt(Ranking)\", np.nan)\n\npre_data[\"sqrt(Ranking)\"] = pre_data[\"Ranking\"].apply(np.sqrt)\npre_data.drop(\"Ranking\", axis=1, inplace=True)","8b9fdfe9":"pre_data.sample(3)","9dbfd659":"if not \"sqrt_Ranking_1\" in pre_data.columns:\n    pre_data.insert(pre_data.columns.get_loc(\"sqrt(Ranking)\") + 1, \"sqrt_Ranking_1\", 0)\nif not \"sqrt_Ranking_2\" in pre_data.columns:\n    pre_data.insert(pre_data.columns.get_loc(\"sqrt(Ranking)\") + 2, \"sqrt_Ranking_2\", 0)\nif not \"sqrt_Ranking_3\" in pre_data.columns:\n    pre_data.insert(pre_data.columns.get_loc(\"sqrt(Ranking)\") + 3, \"sqrt_Ranking_3\", 0)\n\n\ndef fill_rank_parameters(restaurant_row: pd.Series):\n    ranking = restaurant_row[\"sqrt(Ranking)\"]\n    restaurant = restaurant_row.copy()\n    restaurant[\"sqrt_Ranking_1\"] = 1.0 if ranking < 65 else 0.0\n    restaurant[\"sqrt_Ranking_2\"] = 1.0 if 65 <= ranking < 95 else 0.0\n    restaurant[\"sqrt_Ranking_3\"] = 1.0 if ranking >= 95 else 0.0\n    return restaurant\n\n\ndata_columns = [\"sqrt(Ranking)\", \"sqrt_Ranking_1\", \"sqrt_Ranking_2\", \"sqrt_Ranking_3\"]\npre_data[data_columns] = pre_data[data_columns].apply(fill_rank_parameters, axis=1)","cd176813":"pre_data.sample(3)","ddcbb82e":"pre_data[\"City Population\"].hist(bins=100)","31cf5c61":"np.log10(pre_data[\"City Population\"]).hist(bins=100)","9d3a0de6":"len(pre_data[\"City Population\"][pre_data[\"City Population\"] <= 0])","1cd2f889":"pre_data.sample(2)","2a889827":"if not \"log10(City Population)\" in pre_data.columns:\n    pre_data.insert(pre_data.columns.get_loc(\"City Population\") + 1, \"log10(City Population)\", np.nan)\n\npre_data[\"log10(City Population)\"] = pre_data[\"City Population\"].apply(np.log10)\npre_data.drop(\"City Population\", axis=1, inplace=True)","38751450":"pre_data.sample(2)","d769bcc7":"pre_data[[\n    \"Rating\",\n    \"sqrt(Ranking)\",\n    \"Cuisine Number\",\n    \"Price Range\",\n    \"Number of Reviews\",\n    \"City Is a Capital\",\n    \"log10(City Population)\",\n    \"Last Review Year\",\n    \"Last Review Month\",\n    \"Last Review Is Weekend\"\n]].corr()","0f0f288e":"from sklearn.preprocessing import PolynomialFeatures\n\npf = PolynomialFeatures(2)\nranking_population = pf.fit_transform(pre_data[[\"sqrt(Ranking)\", \"log10(City Population)\"]])\nranking_population_list = [features[4] for features in ranking_population]\n\nif not \"sqrt(Ranking)_x_log10(City Population))\" in pre_data.columns:\n    pre_data.insert(pre_data.columns.get_loc(\"sqrt(Ranking)\") + 1, \"sqrt(Ranking)_x_log10(City Population)\", np.nan)\n\npre_data[\"sqrt(Ranking)_x_log10(City Population)\"] = ranking_population_list","0536ed98":"pre_data.sample(5)","1671034f":"pre_data[[\n    \"Rating\",\n    \"sqrt(Ranking)\",\n    \"sqrt(Ranking)_x_log10(City Population)\",\n    \"Cuisine Number\",\n    \"Price Range\",\n    \"Number of Reviews\",\n    \"City Is a Capital\",\n    \"log10(City Population)\",\n    \"Last Review Year\",\n    \"Last Review Month\",\n    \"Last Review Is Weekend\"\n]].corr()","4a076cc4":"dataset = pre_data[[\n    \"sample\",\n    \"Rating\",\n    \"sqrt(Ranking)\",\n    \"sqrt_Ranking_1\",\n    \"sqrt_Ranking_2\",\n    \"sqrt_Ranking_3\",\n    \"sqrt(Ranking)_x_log10(City Population)\",\n    \"Cuisine Number\",\n    \"Price Range\",\n    \"Number of Reviews\",\n    \"City Is a Capital\",\n    \"log10(City Population)\",\n    \"Last Review Year\",\n    \"Last Review Month\",\n    \"Last Review Is Weekend\"\n] + CITY_COLUMN_NAMES + CUISINE_COLUMN_NAMES]","249e5891":"display_pd_html(dataset.sample(10))","62710cce":"dataset.info(verbose=True, null_counts=True)","8f832b28":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\ndataset_train = dataset.query(\"sample == 1\").drop([\"sample\"], axis=1)\n\ny = dataset_train.Rating.values\nX = dataset_train.drop([\"Rating\"], axis = 1)\n\nRANDOM_SEED = 42","abcb840f":"dataset_train.shape, X.shape, y.shape,","760ed65a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","52d945ee":"dataset_train.shape, X.shape, y.shape, X_train.shape, X_test.shape","bb68632f":"model = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n\nmodel.fit(X_train, y_train)\n\ny_predicted = model.predict(X_test)","e2859050":"print(\"Mean Absolute Error (MAE):\", metrics.mean_absolute_error(y_test, y_predicted))","88d19aec":"plt.rcParams[\"figure.figsize\"] = (10, 5)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(20).plot(kind=\"barh\")","44df13da":"test_data = dataset.query(\"sample == 0\").drop([\"sample\"], axis=1)\ntest_data = test_data.drop([\"Rating\"], axis = 1)","87eec2a1":"display_pd_html(test_data.sample(10))","a62011fb":"test_data.shape","3fd14f31":"predict_submission = model.predict(test_data)","db5ed7a9":"sample_submission[\"Rating\"] = predict_submission\nsample_submission.to_csv(\"submission.csv\", index=False)\nsample_submission.head()","9a56bfa3":"### 7.4 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 dummy \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \"City\"","89c483d6":"#### 3.2.1 \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \"Price Range\"","cfd6c476":"# \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432 \u0435\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432","acfb28a0":"### 7.3 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 dummy \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \"Last Review Season\"","4beec6e7":"### 2.2 \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u044b\/\u0441\u043f\u0438\u0441\u043a\u0438","4672f2c6":"### 0.1 \u041e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u0435","4fa45250":"### 8.11 \u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \"sqrt(Ranking)\" \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \"log10(City Population)\"","cdb6a1b0":"### 8.8 \u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435","137b8e4a":"### 8.9 \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 Ranking","e857ed61":"### 4.1 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \"ID_TA\"","714e4330":"## 9. \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","4c085bfe":"## 6. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","83563aaf":"## 7. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","1c969769":"### 8.10 \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u0430 - log10","4489bc28":"## 8 \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","fad99169":"#### 3.3.2 \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \"Reviews\" \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438","dd7ff54c":"### 8.2 \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 TripAdvisor:\n\u041a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0438\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0438\u0445 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u044f:\n- \"Number Of Reviews\";\n- \"Price Range\";\n- \"Cuisine Style\";\n- \"Last Review Date\";\n\n<div style=\"color: gray\">\n\n\u041d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445:\n- \"Center Distance\" - \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043e \u0443\u0441\u043b\u043e\u0432\u043d\u043e\u0433\u043e \u0446\u0435\u043d\u0442\u0440\u0430 \u0433\u043e\u0440\u043e\u0434\u0430;\n- \"Travelers' Choice\" - \u043f\u043e\u043c\u0435\u0442\u043a\u0430 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \"\u0412\u044b\u0431\u043e\u0440 \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u043e\u0432\";\n- \"MICHELIN\" - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u041c\u0438\u0448\u043b\u0435\u043d (\u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0432\u0435\u0437\u0434\u044b \u041c\u0438\u0448\u043b\u0435\u043d).\n\n<\/div>\n\u261d\ufe0f<br \/>\n<span style=\"color: red\">\u041f\u043e \u0444\u0430\u043a\u0442\u0443 \u043f\u043e\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c.<br \/>\n\u0412\u0440\u0435\u043c\u044f \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u043a\u0438 50000 \u0441\u0442\u0440\u043e\u043a \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043c.<br \/>\n\u041b\u0438\u0431\u043e \u044d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0430\u0434\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435 XPath \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f,\n\u043b\u0438\u0431\u043e \u043e\u0442\u043b\u0430\u0434\u0438\u0442\u044c \u0438\u043d\u0434\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430 \u0438 \u0436\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f.<br \/>\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0447\u0442\u043e \u0441\u0430\u0439\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0437\u0430\u043c\u0435\u0447\u0430\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c, \u0438\u043b\u0438 \u043d\u0430 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043e\u043b\u0433\u043e \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442.<br \/>\n\u041d\u0430\u0434\u043e \u043f\u043e\u0434\u043e\u0436\u0434\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0435\u0439 \u0432\u043d\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.<\/span>","a7708e30":"### 3.1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043f\u0438\u0438 \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","377ee424":"### 8.1 \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 HTML","861ae40e":"### 8.4 \u0423\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \"Price Range\"","cd7d593c":"#### 8.6.1 \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"Cuisine Style\" \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 dummy \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n\u041f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u0437\u0430\u043d\u043e\u0432\u043e \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u0438 \u043a\u0443\u0445\u043e\u043d\u044c \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.","147e6cf1":"### 0.3 \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439\n\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u043a\u043e\u0434\u0430 \u043d\u0438\u0436\u0435 \u043f\u043e\u0437\u0430\u0438\u043c\u0441\u0442\u0432\u043e\u0432\u0430\u043d \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435: [Colour Logging - Works in Jupyter Lab\/Notebook](https:\/\/gist.github.com\/joshbode\/58fac7ababc700f51e2a9ecdebe563ad)","81107806":"## 3. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","5fb6d4c6":"### 8.6 \u0423\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \"Cuisine Style\"","e7112ae8":"### 3.2 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435\/\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","ca44afbf":"### 7.2 \u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \"URL_TA\"","fcc0ebb9":"#### 2.2.1 \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f","eae60bf0":"### 8.5 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 \"Last Review Year\", \"Last Review Month\", \"Last Review Day\", \"Last Review Weekend Day\", \"LR_Season_Winter\", \"LR_Season_Spring\", \"LR_Season_Summer\", \"LR_Season_Autumn\", \"LR_Season_nan\"\n\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 \"Last Review Year\", \"Last Review Season\", \"Last Review Month\", \"Last Review Day\" \u0438 \"Last Review Weekend Day\"<br \/>\n\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0442\u043e\u043c\u0443 \u0433\u043e\u0434\u0443, \u043c\u0435\u0441\u044f\u0446\u0443 \u0438 \u0434\u043d\u044e, \u043a\u043e\u0433\u0434\u0430 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u044d\u0442\u043e\u0442 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d, \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432.<br \/>\n\u0415\u0441\u043b\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u0434\u0438\u043d, \u0442\u043e \u043c\u044b \u0441\u043c\u043e\u0442\u0440\u0438\u043c<br \/>\n\u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u044b\u0435 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u0435\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043d\u0430\u0431\u043e\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0446\u0435\u043b\u043e\u043c, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0442\u0437\u044b\u0432\u044b \u043f\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0443 \"\u0415\u0432\u0440\u043e\u043f\u0430\".<br \/>\n\u041f\u043e\u0437\u0434\u043d\u0435\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u044b\u0442\u044b \u043f\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c, \u0441\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0432 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 TripAdvisor.<br \/>\n\n(\u041c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0435\u0449\u0451 \u043f\u043e\u043c\u0438\u043c\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u043f\u043e\u0445\u043e\u0436\u0435\u0439 \u043a\u0443\u0445\u043d\u0435\u0439 (\u043f\u043e \u0434\u043b\u0438\u043d\u0435 \u0432\u0435\u0440\u0442\u043e\u0440\u0430 dummy \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c).)","83fc9a58":"## 10. \u0412\u044b\u0432\u043e\u0434\u044b\n\u041c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0435\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043c\u0435\u0442\u043e\u0434\u043e\u043c RandomForestRegressor:<br \/>\n1. `sqrt(Ranking)_x_log10(City Population)` - \u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u044f Ranking \u0438 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u0430.\n2. `sqrt(Ranking)` - \u041a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0439 \u043a\u043e\u0440\u0435\u043d\u044c Ranking (\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430). \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0435\u0433\u043e \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 `sqrt(Ranking)_x_log10(City Population)`, \u043d\u043e \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u044d\u0442\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043d\u0435 \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 MAE.\n3. `log10(City Population)` - \u0414\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0439 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u0430. \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u043a\u043e\u0432 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0447\u0438\u0441\u043b\u0430 \u043b\u044e\u0434\u0435\u0439 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435.\n4. `Number of Reviews` - \u0427\u0438\u0441\u043b\u043e \u043e\u0431\u0437\u043e\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438 \u043b\u044e\u0434\u0438 \u043f\u0440\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e webs-crapping \u044d\u0442\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u0441\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435\u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c, \u0432\u043c\u0435\u0441\u0442\u043e \u0437\u0430\u043c\u0435\u043d\u044b \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u043d\u044b\u0439 web-scapping \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445 \u0438 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\n\u041d\u0430 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u0442\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u043e \u0442\u0438\u043f\u0430\u043c \u043a\u0443\u0445\u043e\u043d\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u0442\u043e\u0438\u0442 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0432\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u0430\u043d\u044b\/\u0440\u0435\u0433\u0438\u043e\u043d\u044b \u0434\u043b\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0440\u0435\u0433\u0438\u043e\u043d\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c, \u0447\u0442\u043e\u0431\u044b \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0442\u0438\u043f\u044b \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u043e\u0445\u043e\u0436\u0438 \u0438 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439,\n\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \"Italian\"-\"Pizza\", \"Japaneze\"-\"Sushi\" \u0438 \u0442.\u0434.","25082190":"### 7.1 \u041a\u043e\u043b\u043e\u043d\u043a\u0438 \"Last Review Year\", \"Last Review Season\", \"Last Review Month\", \"Last Review Day\", \"Last Review Is Weekend\"\n\u0421\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 Reviews. \u0421\u0430\u043c\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0430 Reviews \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f.","11404408":"### 0.2 \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","609e6c33":"### 2.1 \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 \u0446\u0435\u043d\u044b \u0447\u0435\u043a\u0430 \u0437\u0430 \u0437\u0430\u043a\u0430\u0437 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435","5d37b6bb":"## 4. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a","66137713":"#### 3.3.1 \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \"Cuisine Style\" \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0441\u043f\u0438\u0441\u043a\u0430","9ef24bd8":"### 1.1 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432","1cfe977a":"#### 2.1.2 \u0424\u0443\u043d\u043a\u0446\u0438\u0438\/\u0441\u043b\u043e\u0432\u0430\u0440\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044f\u0447\u0435\u0439\u043a\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0446\u0435\u043d\u043d\u0438\u043a\u0430 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435","0486a31d":"### 8.3 \u0423\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \"Number of Reviews\"","3330110c":"### 1.3 \u0420\u0430\u0437\u043c\u0435\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430","0deaee40":"### 8.7 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0438 \u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0435 \u0441\u0442\u043e\u043b\u0438\u0446\u044b","b9b04814":"## 1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","d163afc1":"## 11. Submission","3166bf0e":"### 8.1 \u0415\u0449\u0451 \u0440\u0430\u0437 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445","25d34de0":"### 1.2 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f kaggle submission","101ee694":"#### 2.1.1 \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f","eae6cd77":"## 2. \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445","3acf5df0":"### 9.1 \u0414\u0430\u0442\u0430\u0441\u0435\u0442","dabe99cf":"#### 3.3.3 \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 URL_TA \u0441 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 URLs \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043f\u043e\u043b\u043d\u044b\u0435 URLs \u0442\u0438\u043f\u0430 `urllib3.util.url.Url`","1066946f":"### 8.0 \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0441\u0430\u0439\u0442\u043e\u0432","3efbb894":"### 9.2 \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b","20ab8f35":"### 3.3 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435\/\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","539621f9":"## 5. \u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043a\u043e\u043b\u043e\u043d\u043e\u043a","9efb710c":"## 0. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438","c78ae0ad":"\u041f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u044f \u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043d\u0435 \u044d\u043a\u0441\u0442\u0440\u0435\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u0438\u043c\u0438 \u0438\u043b\u0438 \u043d\u0438\u0437\u043a\u0438\u043c\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\u043c\u0438 \u043e\u0442 1 \u0434\u043e 4 \u043f\u043e\u043a\u0430\u0437\u0430\u0437\u0430\u043b\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 3-\u0445 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u0441 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 65 \u0438 95 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u044f \u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0440\u0430\u043d\u0433\u0430 \"Ranking\".","f1cb5d9d":"#### 8.6.1 \u041f\u0440\u043e\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0435\u0431-\u0441\u043a\u0440\u0430\u043f\u0438\u043d\u0433\u043e\u043c \u0435\u0434\u0438\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","6ff545cd":"### 1.4 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u043c\u0438\u0440\u0430","e40316a0":"#### 2.2.2 \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u044f\u0447\u0435\u0435\u043a \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u0438\u043b\u0438 \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u043c\u0438","b636a1de":"### 2.3 \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 URIs \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 TripAdvisor \u0432 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0435 URIs\/URLs"}}