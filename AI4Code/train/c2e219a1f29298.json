{"cell_type":{"3c23ec94":"code","f776c920":"code","ac9d7230":"code","4ad13612":"code","a5c6a9d2":"code","2c509b0c":"code","3c8bea75":"code","b4c8a120":"code","c908566f":"code","ab1b301b":"code","0feb2384":"code","e43d449f":"code","33e6ad25":"code","2627c8b1":"code","3765a23e":"code","edd3588a":"code","ffa65a46":"code","fc095afd":"markdown","5e73db12":"markdown","ae187cd7":"markdown","f49dfbc8":"markdown","234ce6c0":"markdown","f2071b08":"markdown"},"source":{"3c23ec94":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#plotting libraries\nimport plotly.express as px \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n#sampling library\nfrom imblearn.over_sampling import ADASYN\n#normalising data library\nfrom sklearn.preprocessing import StandardScaler\n#splitting data library\nfrom sklearn.model_selection import train_test_split\n#classifiers libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import r2_score,accuracy_score,mean_squared_error\n#skewed data libraries\nfrom scipy.stats import norm, skew, boxcox\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f776c920":"df=pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndf","ac9d7230":"df.info() #checking data types","4ad13612":"df.describe() #looking for missing data","a5c6a9d2":"df.duplicated().sum() #checking for duplicated rows","2c509b0c":"df.isnull().sum() #checking for missing values","3c8bea75":"def plotting(col): #function to plot data\n    plt.figure(figsize=(5, 3))\n    sns.distplot(df[col])\n\nfor col in df:\n    plotting(col)","b4c8a120":"skewed_values = pd.DataFrame({'Skewed Values': df.apply(lambda x: skew(x)).sort_values(ascending=False)}) #checking for skewed values\nskewed_values","c908566f":"df['creatinine_phosphokinase']=boxcox(df['creatinine_phosphokinase'])[0]\ndf['serum_creatinine']=boxcox(df['serum_creatinine'])[0]\nfor col in ['creatinine_phosphokinase','serum_creatinine']:\n    plotting(col)","ab1b301b":"X=df.drop([\"time\",\"DEATH_EVENT\"],axis=1) #dropping target column and time column which cannot be used for prediction\ny=df[[\"DEATH_EVENT\"]]","0feb2384":"model = ExtraTreesClassifier() #determining feature importance\nmodel.fit(X,y)\nprint(model.feature_importances_) \nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(12).plot(kind='barh')\nplt.show()","e43d449f":"#checking for highly collinear variables\nplt.figure(figsize=(12,4))\nsns.heatmap(data=df.corr().drop('DEATH_EVENT'), cmap='coolwarm', annot=True)","33e6ad25":"X=df[[\"ejection_fraction\",\"serum_creatinine\",\"age\"]] #dropping columns to avoid overfitting\ny=df[[\"DEATH_EVENT\"]]\n\n\nprint(df[\"DEATH_EVENT\"].value_counts())\nlabels=['dead','alive']\nsizes = df[\"DEATH_EVENT\"].value_counts()\nfig1, ax1 = plt.subplots(figsize=(10,5))\nax1.pie(sizes, explode=None, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title(\"Deaths distribution\")\nplt.show()\n\nresample = ADASYN(sampling_strategy='all')\nX, y = resample.fit_resample(X,y)\nprint(y.value_counts())\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)","2627c8b1":"#normalising data\nscaler=StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","3765a23e":"#RandomForestClassifier\nrandomforest_classifier=RandomForestClassifier()\nrandomforest_classifier.fit(X_train,y_train)\npred=randomforest_classifier.predict(X_test)\nprint(accuracy_score(y_test, pred))","edd3588a":"logistic_regressor = LogisticRegression() #initialising logistic regression\nlogistic_regressor.fit(X_train,y_train) #fitting the data\ny_pred = logistic_regressor.predict(X_test) #predict the result\n\n#the accuracy score\naccuracy = accuracy_score(y_test, y_pred)\naccuracy_perc = round(100*accuracy, 2)\nprint(f'The accuracy of the model is {accuracy_perc} %')","ffa65a46":"kneighbors_classifier = KNeighborsClassifier() #initialising the kneighbors algorithm\nkneighbors_classifier.fit(X_train, y_train) #fitting the data\nprint(\"Training accuracy:\",kneighbors_classifier.score(X_train, y_train)) \nprint(\"Testing accuracy:\",kneighbors_classifier.score(X_test, y_test))\ny_pred_test = kneighbors_classifier.predict(X_test)\ny_pred_train = kneighbors_classifier.predict(X_train)","fc095afd":"\n# **This notebook contains ideas from other notebooks that i checked out before building my model.**","5e73db12":"\n<h1><center>Heart Failure Prediction using LogisticRegression, RandomForestClassifier and KNeighborsClassifier<\/center><\/h1>","ae187cd7":"<h3><center>Data imbalance fixed with ADASYN<\/center><\/h3>","f49dfbc8":"<h3><center>Skewed Data fixed with boxcox<\/center><\/h3>","234ce6c0":"<h1><center>Thanks for checking my notebook and comment if you found it helpful!<\/center><\/h1>","f2071b08":"<div style=\"width:100%;text-align: center;\">\n<img src=\"https:\/\/www.healthy-heart.org\/wp-content\/uploads\/2019\/07\/xheart-rx.jpg.pagespeed.ic.AfoNyycQXP.jpg\" width=\"800\">\n <\/div>"}}