{"cell_type":{"6bc78c96":"code","018f99f5":"code","4139ef1c":"code","c2b2d8d8":"code","a4b707b2":"code","5305e613":"code","2e3d2e7f":"code","a718891e":"code","af35a685":"code","095845bf":"code","688444d5":"code","7479c8fe":"code","e3268ab8":"code","e1f6506d":"code","e78a3f95":"code","5484b205":"code","68611345":"markdown","7f659a2d":"markdown","848899a1":"markdown"},"source":{"6bc78c96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom pathlib import Path\n\nfrom sklearn.cluster import KMeans\n\nfrom tqdm.notebook import tqdm\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","018f99f5":"KAGGLE_PATH = Path('\/kaggle\/input\/trends-assessment-prediction')\n\n# subject-levels\n#SCN - Sub-cortical Network\n#ADN - Auditory Network\n#SMN - Sensorimotor Network\n#VSN - Visual Network\n#CON - Cognitive-control Network\n#DMN - Default-mode Network\n#CBN - Cerebellar Network\nSL = ['SCN','ADN','SMN','VSN','CON','DMN','CBN']","4139ef1c":"sfnc = pd.read_csv(KAGGLE_PATH\/'fnc.csv') #.drop('Id',axis=1)\n\nsfnc_group_clusters = pd.DataFrame(sfnc.pop('Id'))\n\ncols = sfnc.columns\n\nsfnc.shape","c2b2d8d8":"group_columns={}\n\nfor c in cols:\n    groupkey = c.split('(')[0] + '_' + c.split('(')[1].split('_',-1)[2]\n    \n    group_col_list = group_columns.get(groupkey)\n    \n    if group_col_list == None:\n        group_col_list = [c]\n    else:\n        group_col_list += [c] \n    \n    group_columns[groupkey] = group_col_list\n\n# test\ngroup_columns['SCN_SCN']","a4b707b2":"from sklearn.metrics import silhouette_score\n\n#https:\/\/medium.com\/analytics-vidhya\/how-to-determine-the-optimal-k-for-k-means-708505d204eb\n\n\nfor gc in tqdm(group_columns):\n\n    # TODO find optimal cluster number\n    #n_clusters = 3\n    \n    X = sfnc[group_columns[gc]].values\n    \n    \n    sil = []\n    kmax = 5\n\n    # dissimilarity would not be defined for a single cluster, thus, minimum number of clusters should be 2\n    for k in range(2, kmax+1):\n        kmeans = KMeans(n_clusters = k).fit(X)\n        labels = kmeans.labels_\n        sil.append(silhouette_score(X, labels, metric = 'euclidean'))\n        \n    \n    n_clusters = np.argmax(sil) + 2 #index starts from zero and cluster start from 2 thus index 0 means 2 \n    \n    print(n_clusters)\n    \n    #break\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=2020).fit(X)\n    sfnc_group_clusters[gc] = kmeans.labels_\n\n    #preds = kmeans.predict(sfnc[group_columns[gc]].head().values)  # ==> same as kmeans.labels\n    #kmeans.cluster_centers_,\n\nsfnc_group_clusters","5305e613":"sfnc_group_clusters.to_csv('sfnc_group_clusters.csv',index=False)","2e3d2e7f":"sil","a718891e":"np.argmax(sil) +2","af35a685":"X","095845bf":"kmeans = KMeans(n_clusters = 1).fit(X)","688444d5":"def calculate_WSS(points = X, kmax = 10):\n    sse = []\n    for k in range(1, kmax+1):\n        kmeans = KMeans(n_clusters = k).fit(points)\n        centroids = kmeans.cluster_centers_\n        pred_clusters = kmeans.predict(points)\n        curr_sse = 0\n    \n    # calculate square of Euclidean distance of each point from its cluster center and add to current WSS\n        for i in range(len(points)):\n            curr_center = centroids[pred_clusters[i]]\n            curr_sse += (points[i, 0] - curr_center[0]) ** 2 + (points[i, 1] - curr_center[1]) ** 2\n    \n        sse.append(curr_sse)\n    \n    return sse","7479c8fe":"SSE = calculate_WSS(points = X, kmax = 10)","e3268ab8":"import matplotlib.pyplot as plt","e1f6506d":"plt.plot(SSE)","e78a3f95":"SSE","5484b205":"sfnc_group_clusters.columns","68611345":"Grouping column names to group pairs","7f659a2d":"# Build cluster","848899a1":"## References\n\nCluster building idea from https:\/\/trendscenter.org\/wp\/wp-content\/uploads\/2019\/09\/frontiers_pub_pic.jpg\n\n## Todos\n- deal with site 2 bias\n- find the best cluster number\n"}}