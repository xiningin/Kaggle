{"cell_type":{"5a5e9b17":"code","35675403":"code","ce904f53":"code","ceb3ff20":"code","4b17a602":"code","076fb610":"code","7869bca6":"code","a9cf39ce":"code","78f5e910":"code","6c9734fe":"code","fb764397":"code","29cc261b":"code","d27c19d6":"code","a301cc3a":"code","6b6486e4":"code","f5baabea":"code","477e1582":"code","6df85fba":"code","dcff5003":"code","1312cfb6":"code","e3d93337":"code","49a87a8d":"code","3b947b96":"code","a98dd3e5":"code","9f2521bb":"code","1847bfc3":"code","996df092":"code","95f65e9e":"code","e993cfd6":"code","d505d229":"code","613a49d2":"code","9f023538":"code","3cd43e0b":"code","b56e2f48":"code","47e5ac67":"code","ee2328ed":"code","8780ebf7":"code","1e71b3e7":"code","fc3f48ff":"code","938cc6f3":"code","72f3b073":"code","e3583c58":"code","081fa1f7":"code","3b7f010f":"code","8dcda744":"code","57a948d4":"code","79b20042":"code","a3165972":"code","c2ac0707":"code","385e51ec":"code","839d3934":"code","a55489f8":"code","a8813c46":"code","4179eecb":"code","1525f5f7":"markdown","42aeaf8b":"markdown","abc4bb72":"markdown","f3873ec5":"markdown","7eddb2a1":"markdown","4fe2603b":"markdown","0a5ebe0a":"markdown","af9a96b8":"markdown","31211199":"markdown","ac0beb59":"markdown","3a94a046":"markdown","c34f8f68":"markdown","166261b0":"markdown","016d34f1":"markdown","9eb54dc9":"markdown","49b15f40":"markdown","a66476d2":"markdown"},"source":{"5a5e9b17":"import numpy as np\nimport pandas as pd\n\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nfrom scipy.optimize import curve_fit\nfrom sympy.solvers import solve\nfrom sympy import Symbol\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_rows', None)\n\nfrom plotly.offline import iplot, init_notebook_mode # Using plotly + cufflinks in offline mode\nimport cufflinks as cf\ncf.go_offline(connected=True)\ninit_notebook_mode(connected=True)\n\n# cf.getThemes()\n# ['ggplot', 'pearl', 'solar', 'space', 'white', 'polar', 'henanigans']\ncf.set_config_file(theme='space')","35675403":"# Data taken from Johns Hopkins CSSE - https:\/\/github.com\/CSSEGISandData\/COVID-19\n\ndf_confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndf_deaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\ndf_recovered = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')","ce904f53":"df_confirmed.head(n=10)","ceb3ff20":"df = df_confirmed.copy()\ndf.rename(columns={'Country\/Region':'Country'}, inplace=True)\ndf = df.groupby(['Country']).sum().reset_index()\ndf = df.drop(['Lat', 'Long'], axis=1)\ndf_confirmed = df.copy()\n\ndf = df_deaths.copy()\ndf.rename(columns={'Country\/Region':'Country'}, inplace=True)\ndf = df.groupby(['Country']).sum().reset_index()\ndf = df.drop(['Lat', 'Long'], axis=1)\ndf_deaths = df.copy()\n\ndf = df_recovered.copy()\ndf.rename(columns={'Country\/Region':'Country'}, inplace=True)\ndf = df.groupby(['Country']).sum().reset_index()\ndf = df.drop(['Lat', 'Long'], axis=1)\ndf_recovered = df.copy()","4b17a602":"df_confirmed = df_confirmed.melt(id_vars=['Country'],\n                                 var_name='Date',\n                                 value_name='Confirmed')\n\ndf_deaths = df_deaths.melt(id_vars=['Country'],\n                           var_name='Date',\n                           value_name='Deaths')\n\ndf_recovered = df_recovered.melt(id_vars=['Country'],\n                                 var_name='Date',\n                                 value_name='Recovered')\n\ndf_all = df_confirmed.copy()\ndf_all['Deaths'] = df_deaths['Deaths']\ndf_all['Recovered'] = df_recovered['Recovered']\ndf_all['Date'] = pd.to_datetime(df_all['Date'])\n# df_all['Country'] = df_all['Country'].replace('Mainland China', 'China')\ndf_all['Country'] = df_all['Country'].replace('Holy See', 'Vatican City')\ndf_all['Country'] = df_all['Country'].replace('Korea, South', 'South Korea')\n\ndf_all = df_all.reset_index(drop=True)","076fb610":"df_all['Country'].unique()","7869bca6":"df_diamondprincess = df_all[df_all['Country'] == 'Diamond Princess']\n\ndf_usa = df_all[(df_all['Country'] == 'US')]\n\ndf_china = df_all[df_all['Country'] == 'China']\ndf_nochina = df_all[df_all['Country'] != 'China']\ndf_italy = df_all[df_all['Country'] == 'Italy']\ndf_spain = df_all[df_all['Country'] == 'Spain']\ndf_uk = df_all[df_all['Country'] == 'United Kingdom']\ndf_southkorea = df_all[df_all['Country'] == 'South Korea']\ndf_india = df_all[df_all['Country'] == 'India']\ndf_iran = df_all[df_all['Country'] == 'Iran']\ndf_europe = df_all[(df_all['Country'] == 'France') |\n                   (df_all['Country'] == 'Germany') |\n                   (df_all['Country'] == 'Finland') |\n                   (df_all['Country'] == 'Italy') |\n                   (df_all['Country'] == 'United Kingdom') |\n                   (df_all['Country'] == 'Sweden') |\n                   (df_all['Country'] == 'Spain') |\n                   (df_all['Country'] == 'Belgium') |\n                   (df_all['Country'] == 'Croatia') |\n                   (df_all['Country'] == 'Switzerland') |\n                   (df_all['Country'] == 'Austria') |\n                   (df_all['Country'] == 'Greece') |\n                   (df_all['Country'] == 'North Macedonia') |\n                   (df_all['Country'] == 'Norway') |\n                   (df_all['Country'] == 'Denmark') |\n                   (df_all['Country'] == 'Estonia') |\n                   (df_all['Country'] == 'Netherlands') |\n                   (df_all['Country'] == 'San Marino') |\n                   (df_all['Country'] == 'Belarus') |\n                   (df_all['Country'] == 'Lithuania') |\n                   (df_all['Country'] == 'Ireland') |\n                   (df_all['Country'] == 'Luxembourg') |\n                   (df_all['Country'] == 'Monaco') |\n                   (df_all['Country'] == 'Czech Republic') |\n                   (df_all['Country'] == 'Portugal') |\n                   (df_all['Country'] == 'Andorra') |\n                   (df_all['Country'] == 'Latvia') |\n                   (df_all['Country'] == 'Ukraine') |\n                   (df_all['Country'] == 'Hungary') |\n                   (df_all['Country'] == 'Gibraltar') |\n                   (df_all['Country'] == 'Liechtenstein') |\n                   (df_all['Country'] == 'Poland') |\n                   (df_all['Country'] == 'Bosnia and Herzegovina') |\n                   (df_all['Country'] == 'Slovenia') |\n                   (df_all['Country'] == 'Serbia') |\n                   (df_all['Country'] == 'Slovakia') |\n                   (df_all['Country'] == 'Bulgaria') |\n                   (df_all['Country'] == 'Malta') |\n                   (df_all['Country'] == 'Ireland') |\n                   (df_all['Country'] == 'Moldova') |\n                   (df_all['Country'] == 'Vatican City')]","a9cf39ce":"print(f'Data current as of {df_all.Date.dt.date.max()}.')","78f5e910":"df = df_all.copy()\ndf = df[df['Date'] == max(df['Date'])].reset_index(drop=True)\ndf['Region'] = 'World'\ndf = df.groupby(['Region']).sum()\n\ndf2 = df_nochina.copy()\ndf2 = df2[df2['Date'] == max(df2['Date'])].reset_index(drop=True)\ndf2['Region'] = 'World (-China)'\ndf2 = df2.groupby(['Region']).sum()\ndf = df.append(df2, sort=False)\n\ndf2 = df_europe.copy()\ndf2 = df2[df2['Date'] == max(df2['Date'])].reset_index(drop=True)\ndf2['Region'] = 'Europe'\ndf2 = df2.groupby(['Region']).sum()\ndf = df.append(df2, sort=False)\n\ndf2 = df_usa.copy()\ndf2 = df2[df2['Date'] == max(df2['Date'])].reset_index(drop=True)\ndf2['Region'] = 'USA'\ndf2 = df2.groupby(['Region']).sum()\ndf = df.append(df2, sort=False)\n\ndf2 = df_diamondprincess.copy()\ndf2 = df2[df2['Date'] == max(df2['Date'])].reset_index(drop=True)\ndf2['Region'] = 'Diamond Princess'\ndf2 = df2.groupby(['Region']).sum()\ndf = df.append(df2, sort=False)\n\n\ndf['Active'] = df['Confirmed'] - df['Deaths'] - df['Recovered']\n\ndf['cCFR [%]'] = df['Deaths'] \/ df['Confirmed'] * 100\ndf['cCFR [%]'] = round(df['cCFR [%]'], 2)\n\n\ndf = df.reset_index()\ndf = df.sort_values('Confirmed', axis=0, ascending=False)\n\ndf.style.background_gradient(subset=['Confirmed'], cmap='Blues', axis=None)\\\n        .background_gradient(subset=['Deaths'], cmap='Reds', axis=None)\\\n        .background_gradient(subset=['Recovered'], cmap='Greens', axis=None)\\\n        .background_gradient(subset=['Active'], cmap='Greys', axis=None)\\\n        .background_gradient(subset=['cCFR [%]'], cmap='Purples', axis=None)","6c9734fe":"df = df_all.copy()\ndf = df[df['Date'] == max(df['Date'])].reset_index(drop=True)\n#df = df.groupby(['Country'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\n#df['Country'].replace(to_replace='Others', value='Diamond Princess', inplace=True)\ndf = df[df.Country != 'Others'].reset_index(drop=True)\n\n\ndf['Active'] = df['Confirmed'] - df['Deaths'] - df['Recovered']\n\ndf['cCFR [%]'] = df['Deaths'] \/ df['Confirmed'] * 100\ndf['cCFR [%]'] = round(df['cCFR [%]'], 2)\n\ndf = df.drop('Date', axis=1)\n\ndf = df.sort_values('Confirmed', axis=0, ascending=False).reset_index(drop=True)\n\ndf.style.background_gradient(subset=['Confirmed'], cmap='Blues', axis=None)\\\n        .background_gradient(subset=['Deaths'], cmap='Reds', axis=None)\\\n        .background_gradient(subset=['Recovered'], cmap='Greens', axis=None)\\\n        .background_gradient(subset=['Active'], cmap='Greys', axis=None)\\\n        .background_gradient(subset=['cCFR [%]'], cmap='Purples', axis=None)","fb764397":"df = df_all.copy()\ndf = df[df['Date'] == max(df['Date'])].reset_index()\ndf = df.groupby(['Country'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nfig = px.choropleth(df,\n                    locations='Country',\n                    locationmode='country names',\n                    color='Confirmed',\n                    hover_name='Country',\n                    hover_data=['Confirmed', 'Deaths', 'Recovered'],\n                    color_continuous_scale='Burg')\n                    #color_continuous_scale=px.colors.sequential.thermal_r)\nfig.show()\n\nprint('You can double-click on any country in the legend to see just its plot.')\n\ndf = df_nochina.copy()\ndf = df.groupby(['Date', 'Country'])['Confirmed'].sum().reset_index()\ndf = df.pivot(index='Date', columns='Country', values='Confirmed').reset_index()\ndf.iplot(kind='bar', barmode='stack', x='Date', xTitle='Date', yTitle='Confirmed', title='World (-China) - Total Confirmed Cases', colorscale='blues', width=20)\n\n\ndf = df_nochina.copy()\ndf = df.groupby(['Date', 'Country'])['Deaths'].sum().reset_index()\ndf = df.pivot(index='Date', columns='Country', values='Deaths').reset_index()\ndf.iplot(kind='bar', barmode='stack', x='Date', xTitle='Date', yTitle='Deaths', title='World (-China) - Total Deaths', colorscale='reds')\n\n\ndf = df_nochina.copy()\ndf = df.groupby(['Date', 'Country'])['Recovered'].sum().reset_index()\ndf = df.pivot(index='Date', columns='Country', values='Recovered').reset_index()\ndf.iplot(kind='bar', barmode='stack', x='Date', xTitle='Date', yTitle='Recovered', title='World (-China) - Total Recovered', colorscale='greens')\n\n\ndf = df_nochina.copy()\ndf = df.groupby(['Date', 'Country'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ndf['Active'] = df.Confirmed - df.Deaths - df.Recovered\ndf = df.groupby(['Date', 'Country'])['Active'].sum().reset_index()\ndf = df.pivot(index='Date', columns='Country', values='Active').reset_index()\ndf.iplot(kind='bar', barmode='stack', x='Date', xTitle='Date', yTitle='Active', title='World (-China) - Number of Active Cases', colorscale='purples')","29cc261b":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_nochina.copy()\ndf = df.groupby(['Date'])['Confirmed'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Confirmed', 'yTitle':'Confirmed', 'title':'World (-China) - Model Fitting, Confirmed Cases', 'kind':'scatter', 'mode':'markers', 'color':'polarbluelight', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","d27c19d6":"df = df_nochina.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","a301cc3a":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_nochina.copy()\ndf = df.groupby(['Date'])['Deaths'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Deaths'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Deaths', 'yTitle':'Deaths', 'title':'World (-China) - Model Fitting, Deaths', 'kind':'scatter', 'mode':'markers', 'color':'polarred', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","6b6486e4":"df = df_nochina.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Deaths.diff()[-5:] \/ df.Deaths[-5:])\nprint(f'Average daily growth rate of deaths over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Deaths double every: {t_d[0]:0.3} days.')","f5baabea":"df = df_usa.groupby(['Date'])['Confirmed'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Confirmed', title='USA - Total Confirmed Cases', color='polarbluelight')\n\ndf = df_usa.groupby(['Date'])['Deaths'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Deaths', title='USA - Total Deaths', color='polarred')\n\n\ndf = df_usa.groupby(['Date'])['Recovered'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Recovered', title='USA - Total Recovered', color='polargreen')\n\n\ndf = df_usa.copy()\ndf['Active'] = df.Confirmed - df.Deaths - df.Recovered\ndf = df.groupby(['Date'])['Active'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Active', title='USA - Number of Active Cases', color='polarpurple')","477e1582":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_usa.copy()\ndf = df.groupby(['Date'])['Confirmed'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Confirmed', 'yTitle':'Confirmed', 'title':'USA - Model Fitting, Confirmed Cases', 'kind':'scatter', 'mode':'markers', 'color':'polarbluelight', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","6df85fba":"df = df_usa.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","dcff5003":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_usa.copy()\ndf = df.groupby(['Date'])['Deaths'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Deaths'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Deaths', 'yTitle':'Deaths', 'title':'USA - Model Fitting, Deaths', 'kind':'scatter', 'mode':'markers', 'color':'polarred', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","1312cfb6":"df = df_usa.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Deaths.diff()[-5:] \/ df.Deaths[-5:])\nprint(f'Average daily growth rate of deaths over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Deaths double every: {t_d[0]:0.3} days.')","e3d93337":"print('You can double-click on any country in the legend to see just its plot.')\n\ndf = df_europe.copy()\ndf = df.groupby(['Date', 'Country'])['Confirmed'].sum().reset_index()\ndf = df.pivot(index='Date', columns='Country', values='Confirmed').reset_index()\ndf.iplot(kind='bar', barmode='stack', x='Date', xTitle='Date', yTitle='Confirmed', title='Europe - Total Confirmed Cases', colorscale='blues')\n\n\ndf = df_europe.copy()\ndf = df.groupby(['Date', 'Country'])['Deaths'].sum().reset_index()\ndf = df.pivot(index='Date', columns='Country', values='Deaths').reset_index()\ndf.iplot(kind='bar', barmode='stack', x='Date', xTitle='Date', yTitle='Deaths', title='Europe - Total Deaths', colorscale='reds')\n\n\ndf = df_europe.copy()\ndf = df.groupby(['Date', 'Country'])['Recovered'].sum().reset_index()\ndf = df.pivot(index='Date', columns='Country', values='Recovered').reset_index()\ndf.iplot(kind='bar', barmode='stack', x='Date', xTitle='Date', yTitle='Recovered', title='Europe - Total Recovered', colorscale='greens')\n\n\ndf = df_europe.copy()\ndf = df.groupby(['Date', 'Country'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ndf['Active'] = df.Confirmed - df.Deaths - df.Recovered\ndf = df.groupby(['Date', 'Country'])['Active'].sum().reset_index()\ndf = df.pivot(index='Date', columns='Country', values='Active').reset_index()\ndf.iplot(kind='bar', barmode='stack', x='Date', xTitle='Date', yTitle='Active', title='Europe - Number of Active Cases', colorscale='purples')","49a87a8d":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_europe.copy()\ndf = df.groupby(['Date'])['Confirmed'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Confirmed', 'yTitle':'Confirmed', 'title':'Europe - Model Fitting, Confirmed Cases', 'kind':'scatter', 'mode':'markers', 'color':'polarbluelight', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","3b947b96":"df = df_europe.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","a98dd3e5":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_europe.copy()\ndf = df.groupby(['Date'])['Deaths'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Deaths'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Deaths', 'yTitle':'Deaths', 'title':'Europe - Model Fitting, Deaths', 'kind':'scatter', 'mode':'markers', 'color':'polarred', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","9f2521bb":"df = df_europe.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Deaths.diff()[-5:] \/ df.Deaths[-5:])\nprint(f'Average daily growth rate of deaths over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Deaths double every: {t_d[0]:0.3} days.')","1847bfc3":"df = df_italy.groupby(['Date'])['Confirmed'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Confirmed', title='Italy - Total Confirmed Cases', color='polarbluelight')\n\ndf = df_italy.groupby(['Date'])['Deaths'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Deaths', title='Italy - Total Deaths', color='polarred')\n\n\ndf = df_italy.groupby(['Date'])['Recovered'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Recovered', title='Italy - Total Recovered', color='polargreen')\n\n\ndf = df_italy.copy()\ndf['Active'] = df.Confirmed - df.Deaths - df.Recovered\ndf = df.groupby(['Date'])['Active'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Active', title='Italy - Number of Active Cases', color='polarpurple')","996df092":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_italy.copy()\ndf = df.groupby(['Date'])['Confirmed'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index[:53], df['Confirmed'].values[:53], maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\ndf.Model[df['Model'] > 150000] = False\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Confirmed', 'yTitle':'Confirmed', 'title':'Italy - Model Fitting, Confirmed Cases', 'kind':'scatter', 'mode':'markers', 'color':'polarbluelight', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","95f65e9e":"df = df_italy.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\n#print(f'Confirmed cases double every: {t_d[0]:0.3} days.')","e993cfd6":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_italy.copy()\ndf = df.groupby(['Date'])['Deaths'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Deaths'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Deaths', 'yTitle':'Deaths', 'title':'Italy - Model Fitting, Deaths', 'kind':'scatter', 'mode':'markers', 'color':'polarred', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","d505d229":"df = df_usa.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Deaths.diff()[-5:] \/ df.Deaths[-5:])\nprint(f'Average daily growth rate of deaths over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Deaths double every: {t_d[0]:0.3} days.')","613a49d2":"df = df_spain.groupby(['Date'])['Confirmed'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Confirmed', title='Spain - Total Confirmed Cases', color='polarbluelight')\n\ndf = df_spain.groupby(['Date'])['Deaths'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Deaths', title='Spain - Total Deaths', color='polarred')\n\n\ndf = df_spain.groupby(['Date'])['Recovered'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Recovered', title='Spain - Total Recovered', color='polargreen')\n\n\ndf = df_spain.copy()\ndf['Active'] = df.Confirmed - df.Deaths - df.Recovered\ndf = df.groupby(['Date'])['Active'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Active', title='Spain - Number of Active Cases', color='polarpurple')","9f023538":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_spain.copy()\ndf = df.groupby(['Date'])['Confirmed'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Confirmed', 'yTitle':'Confirmed', 'title':'Spain - Model Fitting, Confirmed Cases', 'kind':'scatter', 'mode':'markers', 'color':'polarbluelight', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","3cd43e0b":"df = df_spain.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","b56e2f48":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_spain.copy()\ndf = df.groupby(['Date'])['Deaths'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Deaths'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Deaths', 'yTitle':'Deaths', 'title':'Spain - Model Fitting, Deaths', 'kind':'scatter', 'mode':'markers', 'color':'polarred', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","47e5ac67":"df = df_spain.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Deaths.diff()[-5:] \/ df.Deaths[-5:])\nprint(f'Average daily growth rate of deaths over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Deaths double every: {t_d[0]:0.3} days.')","ee2328ed":"df = df_uk.groupby(['Date'])['Confirmed'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Confirmed', title='UK - Total Confirmed Cases', color='polarbluelight')\n\ndf = df_uk.groupby(['Date'])['Deaths'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Deaths', title='UK - Total Deaths', color='polarred')\n\n\ndf = df_uk.groupby(['Date'])['Recovered'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Recovered', title='UK - Total Recovered', color='polargreen')\n\n\ndf = df_uk.copy()\ndf['Active'] = df.Confirmed - df.Deaths - df.Recovered\ndf = df.groupby(['Date'])['Active'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Active', title='UK - Number of Active Cases', color='polarpurple')","8780ebf7":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_uk.copy()\ndf = df.groupby(['Date'])['Confirmed'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Confirmed', 'yTitle':'Confirmed', 'title':'UK - Model Fitting, Confirmed Cases', 'kind':'scatter', 'mode':'markers', 'color':'polarbluelight', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","1e71b3e7":"df = df_uk.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","fc3f48ff":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_uk.copy()\ndf = df.groupby(['Date'])['Deaths'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Deaths'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Deaths', 'yTitle':'Deaths', 'title':'UK - Model Fitting, Deaths', 'kind':'scatter', 'mode':'markers', 'color':'polarred', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","938cc6f3":"df = df_uk.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Deaths.diff()[-5:] \/ df.Deaths[-5:])\nprint(f'Average daily growth rate of deaths over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Deaths double every: {t_d[0]:0.3} days.')","72f3b073":"df = df_iran.groupby(['Date'])['Confirmed'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Confirmed', title='Iran - Total Confirmed Cases', color='polarbluelight')\n\n\ndf = df_iran.groupby(['Date'])['Deaths'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Deaths', title='Iran - Total Deaths', color='polarred')\n\n\ndf = df_iran.groupby(['Date'])['Recovered'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Recovered', title='Iran - Total Recovered', color='polargreen')\n\n\ndf = df_iran.copy()\ndf['Active'] = df.Confirmed - df.Deaths - df.Recovered\ndf = df.groupby(['Date'])['Active'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Active', title='Iran - Number of Active Cases', color='polarpurple')","e3583c58":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_iran.copy()\ndf = df.groupby(['Date'])['Confirmed'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index[:49], df['Confirmed'].values[:49], maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\ndf.Model[df['Model'] > 50000] = False\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Confirmed', 'yTitle':'Confirmed', 'title':'Iran - Model Fitting, Confirmed Cases', 'kind':'scatter', 'mode':'markers', 'color':'polarbluelight', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","081fa1f7":"df = df_iran.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\n#t_d\n#print(f'Confirmed cases double every: {t_d[0]:0.3} days.')","3b7f010f":"df = df_southkorea.groupby(['Date'])['Confirmed'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Confirmed', title='South Korea - Total Confirmed Cases', color='polarbluelight')\n\n\ndf = df_southkorea.groupby(['Date'])['Deaths'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Deaths', title='South Korea - Total Deaths', color='polarred')\n\n\ndf = df_southkorea.groupby(['Date'])['Recovered'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Recovered', title='South Korea - Total Recovered', color='polargreen')\n\n\ndf = df_southkorea.copy()\ndf['Active'] = df.Confirmed - df.Deaths - df.Recovered\ndf = df.groupby(['Date'])['Active'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Active', title='South Korea - Number of Active Cases', color='polarpurple')","8dcda744":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_southkorea.copy()\ndf = df.groupby(['Date'])['Confirmed'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index[:43], df['Confirmed'].values[:43], maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\ndf.Model[df['Model'] > 25000] = False\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Confirmed', 'yTitle':'Confirmed', 'title':'South Korea - Model Fitting, Confirmed Cases', 'kind':'scatter', 'mode':'markers', 'color':'polarbluelight', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","57a948d4":"df = df_southkorea.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\n# x = Symbol('x')\n# t_d = solve((1 + growth)**x - 2 , x)\n# print(f'Confirmed cases double every: {t_d[0]:0.3} days.')","79b20042":"df = df_india.groupby(['Date'])['Confirmed'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Confirmed', title='India - Total Confirmed Cases', color='polarbluelight')\n\n\ndf = df_india.groupby(['Date'])['Deaths'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Deaths', title='India - Total Deaths', color='polarred')\n\n\ndf = df_india.groupby(['Date'])['Recovered'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Recovered', title='India - Total Recovered', color='polargreen')\n\n\ndf = df_india.copy()\ndf['Active'] = df.Confirmed - df.Deaths - df.Recovered\ndf = df.groupby(['Date'])['Active'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Active', title='India - Number of Active Cases', color='polarpurple')","a3165972":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_india.copy()\ndf = df.groupby(['Date'])['Confirmed'].sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\n\nfig=cf.tools.figures(df,[{'x':'Date', 'y':'Model', 'kind':'lines', 'color':'ghostwhite', 'dash':'dash'},\n                         {'x':'Date', 'y':'Confirmed', 'yTitle':'Confirmed', 'title':'India - Model Fitting, Confirmed Cases', 'kind':'scatter', 'mode':'markers', 'color':'polarbluelight', 'size':7}])\ncf.iplot(fig)\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","c2ac0707":"df = df_india.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","385e51ec":"df = df_china.groupby(['Date'])['Confirmed'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Confirmed', title='China - Total Confirmed Cases', color='polarbluelight')\n\n\ndf = df_china.groupby(['Date'])['Deaths'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Deaths', title='China - Total Deaths', color='polarred')\n\n\ndf = df_china.groupby(['Date'])['Recovered'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Recovered', title='China - Total Recovered', color='polargreen')\n\n\ndf = df_china.copy()\ndf['Active'] = df.Confirmed - df.Deaths - df.Recovered\ndf = df.groupby(['Date'])['Active'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Active', title='China - Number of Active Cases', color='polarpurple')","839d3934":"df = df_china.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\n# x = Symbol('x')\n# t_d = solve((1 + growth)**x - 2 , x)\n# print(f'Confirmed cases double every: {t_d[0]:0.3} days.')","a55489f8":"df = df_all.groupby(['Date'])['Confirmed'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Confirmed', title='World - Total Confirmed Cases', color='polarbluelight')\n\n\ndf = df_all.groupby(['Date'])['Deaths'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Deaths', title='World - Total Deaths', color='polarred')\n\n\ndf = df_all.groupby(['Date'])['Recovered'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Recovered', title='World - Total Recovered', color='polargreen')\n\n\ndf = df_all.copy()\ndf['Active'] = df.Confirmed - df.Deaths - df.Recovered\ndf = df.groupby(['Date'])['Active'].sum().reset_index()\ndf.iplot(kind='bar', x='Date', xTitle='Date', yTitle='Active', title='World - Number of Active Cases', color='polarpurple')","a8813c46":"df = df_all.copy()\n\ndf = df[df['Date'] == max(df['Date'])].reset_index()\ndf = df.groupby(['Country'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ndf['Active'] = df['Confirmed'] - df['Deaths'] - df['Recovered']\n\nfig = px.treemap(df,\n                 path=['Country'],\n                 values=df['Active'],\n                 title='World - Active Cases per Country',\n                 hover_data=['Confirmed', 'Deaths', 'Recovered', 'Active'],\n                 color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","4179eecb":"df = df_all.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\n# x = Symbol('x')\n# t_d = solve((1 + growth)**x - 2 , x)\n# print(f'Confirmed cases double every: {t_d[0]:0.3} days.')","1525f5f7":"# China","42aeaf8b":"# World (-China)","abc4bb72":"## Global - Case Fatality Rate for Confirmed Cases","f3873ec5":"# USA","7eddb2a1":"## By Country - Case Fatality Rate for Confirmed Cases","4fe2603b":"# Spain","0a5ebe0a":"# India","af9a96b8":"Here are some visualizations for the COVID-19 pandemic, tracking the growth rate for confirmed cases and deaths for various regions.","31211199":"## Data Import and Preparation","ac0beb59":"# Table: Case Fatality Rates","3a94a046":"Obviously these aren't meant to represent the true case fatality rate (CFR) of the virus. South Korea's 0.6% (now over 1%) seems like a pretty solid lower bound for now, though, given the amount of testing they've done and that very few of their cases are resolved. Likewise, the CFR of those infected on the Diamond Princess is now above 1%, and while that population skews older, they also received very good medical care.\n\ncCFR = Deaths \/ Confirmed","c34f8f68":"# South Korea","166261b0":"# United Kingdom","016d34f1":"# Iran","9eb54dc9":"# Europe","49b15f40":"# World","a66476d2":"# Italy"}}