{"cell_type":{"ecd4bec5":"code","9f322e78":"code","3d6cba75":"code","88faea90":"code","d463bcc5":"code","1056d962":"code","f9f519f1":"code","539fc8ff":"code","75f1ee94":"code","d353b9d3":"code","c0e9002f":"code","f77329ec":"code","765924c3":"code","eb412ebe":"code","7b3da79e":"code","4bb4b98b":"code","a0cb9c6b":"code","a72c7d40":"code","2f80f728":"code","e1d4eb2a":"code","6cf29942":"code","caffbe20":"code","9b4cf012":"code","7028bb90":"code","b33d1b91":"code","a3806e1b":"code","731432be":"code","23f2919f":"code","8cfb00a5":"code","0029e463":"code","edd82042":"code","81de801d":"code","aa36af21":"code","2f145be9":"code","6099ce48":"code","c5d5296c":"code","f7eb8d93":"code","fb32faa7":"code","ad71e0d3":"code","9f56b224":"code","a6c74805":"code","88d745b4":"code","44cc2cea":"code","1d6c7a96":"code","bdb666d0":"code","bdc771a4":"markdown","b6d43fc0":"markdown","e61a31c4":"markdown","485c3cff":"markdown","97809710":"markdown","3ebcb132":"markdown","4268f03f":"markdown","2ae3b29c":"markdown","00e8857a":"markdown","7b59096f":"markdown","40eecc1c":"markdown","a655dfb9":"markdown","ef8d59d7":"markdown","2ba79426":"markdown","2929f5f9":"markdown","f2ada23c":"markdown","866267e5":"markdown","d174849b":"markdown","9662ff68":"markdown","9b6b9539":"markdown","f1edd001":"markdown"},"source":{"ecd4bec5":"import numpy as np \nimport pandas as pd \nfrom statistics import mean\nimport os\n\n#For Visualization\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport seaborn as sns\n#from matplotlib import pyplot\n\n#Sci-kit Learn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.utils import shuffle\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import KFold,cross_val_score\nfrom sklearn import linear_model\nfrom sklearn.datasets import make_regression\n\n#TenserFlow - Keras\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.train import latest_checkpoint\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.callbacks import EarlyStopping\n\n%matplotlib inline\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9f322e78":"money_df = pd.read_csv('\/kaggle\/input\/\/privatedatset\/forex_usd_data.csv')\ncovid_df = pd.read_csv('\/kaggle\/input\/\/privatedatset\/data.csv')\n","3d6cba75":"def normalize(df,column):\n  df[column]=((df[column]-df[column].min())\/\n                       (df[column].max()-df[column].min()))\n","88faea90":"covid_df = covid_df[49:518] \n\nnormalize(covid_df,\"Confirmed\") \nnormalize(covid_df,\"Deaths\") \nnormalize(covid_df,\"Active\") \nnormalize(covid_df,\"Recovered\") \n\ncovid_df","d463bcc5":"money_df = money_df[3357:]\nmoney_df = money_df[[\"date(y-m-d)\",\"Euro\",\"Turkish Lira\",\"British Pound\"]]\nmoney_df[\"British Pound\"] = money_df[\"Turkish Lira\"] \/money_df[\"British Pound\"]\nmoney_df[\"Euro\"] = money_df[\"Turkish Lira\"] \/money_df[\"Euro\"]\nmoney_df.rename(columns={\"Turkish Lira\": \"USD\",\"date(y-m-d)\":\"Date\"},inplace=True)\n\nmoney_df\n","1056d962":"money_df.isnull().mean() * 100","f9f519f1":"covid_df.isnull().mean() * 100","539fc8ff":"import plotly.express as px\nfig = px.line(covid_df, x=\"Date\", y=covid_df.columns,\n              title='Covid-19 Patient Types in Turkey')\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\",\n    ticklabelmode=\"period\")\nfig.show()","75f1ee94":"import plotly.express as px\nfig = px.line(money_df, x=\"Date\", y=money_df.columns,\n              title='Exhchenge rate of currencies to Turkish Lira')\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\",\n    ticklabelmode=\"period\")\nfig.show()","d353b9d3":"\nfig = go.Figure()\nfig.add_trace(go.Scatter( x=covid_df[\"Confirmed\"],y=money_df[\"USD\"],\n                    mode='lines',marker_color='blue',name='Total Cases'))\nfig.update_layout(title_text='Confirmed Covid19 Patients - USD\/Turkish Lira', template='ggplot2')\nfig.show()\n\n\n","c0e9002f":"temp_covid = covid_df.sort_values(by=['Active'])\n\n\ntemp_money = money_df.set_index('Date')\ntemp_money = temp_money.reindex(index=covid_df['Date'])\ntemp_money = temp_money.reset_index()\n \n\nfig = go.Figure()\nfig.add_trace(go.Scatter( x=temp_covid[\"Active\"],y=temp_money[\"USD\"],\n                    mode='lines',marker_color='gold',name='Total Cases'))\nfig.update_layout(title_text='Confirmed Covid19 Patients - USD\/Turkish Lira', template='plotly_dark')\nfig.show()\n\n\n","f77329ec":"left = money_df[[\"Date\",\"USD\"]]\nright = covid_df\ndf = pd.merge(left, right, on=\"Date\")\ndf","765924c3":"corr = df.corr()\nx = corr[['USD']]\nsns.heatmap(x, annot = True, vmin=0, vmax=1)","eb412ebe":"from fbprophet import Prophet\n\nconfirmed = df[[\"Date\",\"Deaths\"]]\nconfirmed['Date'] = pd.to_datetime(confirmed['Date'],errors='coerce')\nconfirmed.rename(columns={\"Deaths\": \"y\",\"Date\":\"ds\"},inplace=True)\n\ntemp = Prophet(interval_width=0.95)\ntemp.fit(confirmed)\nfuture = temp.make_future_dataframe(periods=120)\nfuture_confirmed = future.copy() # for non-baseline predictions later on\n","7b3da79e":"forecast = temp.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","4bb4b98b":"forecast_components = temp.plot_components(forecast)\n","a0cb9c6b":"forecast","a72c7d40":"test = forecast[469:]\ntest = test[[\"yhat\"]]\ntest.rename(columns= {\"yhat\": \"Deaths\"},inplace=True)","2f80f728":"from fbprophet import Prophet\n\nconfirmed = df[[\"Date\",\"Recovered\"]]\nconfirmed['Date'] = pd.to_datetime(confirmed['Date'],errors='coerce')\nconfirmed.rename(columns={\"Recovered\": \"y\",\"Date\":\"ds\"},inplace=True)\n\ntemp = Prophet(interval_width=0.95)\ntemp.fit(confirmed)\nfuture = temp.make_future_dataframe(periods=120)\nfuture_confirmed = future.copy() # for non-baseline predictions later on\n","e1d4eb2a":"forecast = temp.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","6cf29942":"forecast_components = temp.plot_components(forecast)","caffbe20":"forecast","9b4cf012":"recovered_test = forecast[469:]\ntest[\"Recovered\"] = recovered_test[\"yhat\"]\ntest","7028bb90":"confirmed = df[[\"Date\",\"Confirmed\"]]\nconfirmed['Date'] = pd.to_datetime(confirmed['Date'],errors='coerce')\nconfirmed.rename(columns={\"Confirmed\": \"y\",\"Date\":\"ds\"},inplace=True)\n\ntemp = Prophet(interval_width=0.95)\ntemp.fit(confirmed)\nfuture = temp.make_future_dataframe(periods=120)\nfuture_confirmed = future.copy() # for non-baseline predictions later on\n","b33d1b91":"forecast = temp.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","a3806e1b":"forecast_components = temp.plot_components(forecast)","731432be":"forecast['new']=forecast['yhat']+forecast['yhat_lower']\nforecast","23f2919f":"confirm_test = forecast[469:]\ntest[\"Confirmed\"] = confirm_test[\"yhat\"]\ntest","8cfb00a5":"confirmed = df[[\"Date\",\"USD\"]]\nconfirmed['Date'] = pd.to_datetime(confirmed['Date'],errors='coerce')\nconfirmed.rename(columns={\"USD\": \"y\",\"Date\":\"ds\"},inplace=True)\n\ntemp = Prophet(interval_width=0.95)\ntemp.fit(confirmed)\nfuture = temp.make_future_dataframe(periods=120)\nfuture_confirmed = future.copy() # for non-baseline predictions later on\n","0029e463":"forecast = temp.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","edd82042":"forecast_components = temp.plot_components(forecast)","81de801d":"forecast_usd = forecast[469:]\nforecast_usd = forecast_usd[[\"yhat\"]]","aa36af21":"dates = forecast[469:]\ndates = dates[[\"ds\"]]","2f145be9":"x = df[[\"Deaths\",\"Recovered\",\"Confirmed\"]]\ny = df.pop(\"USD\")\n\ndf_empty = pd.DataFrame(0, index=range(120), columns=[\"linear\"])\n\n\nfolds = KFold(n_splits = 5)\nscores = []\nlin_model = LinearRegression()\nfor n_fold, (train_index, valid_index) in enumerate(folds.split(x,y)):   \n    x_train, x_val = x.iloc[list(train_index)], x.iloc[list(valid_index)]\n    y_train, y_val = y.iloc[list(train_index)], y.iloc[list(valid_index)]\n    \n    lin_model.fit(x_train, y_train)\n    y_pred = lin_model.predict(x_val)\n    rmse = mean_squared_error(y_val, y_pred, squared=False)\n    pred_test = lin_model.predict(test)\n    df_empty[\"linear\"] += pred_test\n    scores.append(rmse)\ndf_empty[\"linear\"] = df_empty[\"linear\"]\/5\n\nprint(df_empty[\"linear\"])\nprint(mean(scores))\n","6099ce48":"rms = mean_squared_error(forecast_usd, df_empty[\"linear\"], squared=False)\nrms","c5d5296c":"NN_model = Sequential()\n\n# The Input Layer :\nNN_model.add(Dense(128, kernel_initializer='normal',input_dim = x.shape[1], activation='relu'))\n\n# The Hidden Layers :\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\nNN_model.add(Dropout(0.1))\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\nNN_model.add(Dropout(0.1))\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\nNN_model.add(Dropout(0.1))\n\n# The Output Layer :\nNN_model.add(Dense(1, kernel_initializer='normal',activation='relu'))\n\n# Compile the network :\nNN_model.compile(loss='mean_squared_error', optimizer='adam')\nNN_model.summary()\n","f7eb8d93":"checkpoint_name = 'training_2\/cp-{epoch:04d}.ckpt' \ncheckpoint_dir = os.path.dirname(checkpoint_name)\ncheckpoint = ModelCheckpoint(checkpoint_name, monitor='val_loss',verbose = 1, save_weights_only = True,save_freq=1, mode ='auto')\nearly_stop = EarlyStopping(monitor='val_loss' \n                                 ,patience=10 \n                                 ,verbose=1\n                                 ,mode='auto' \n                                 ,restore_best_weights=True)\ncallbacks_list = [checkpoint,early_stop]\nNN_model.save_weights(checkpoint_name.format(epoch=0))\nNN_model.fit(x, y, epochs=300, batch_size=32, validation_split = 0.2,  callbacks=callbacks_list)\n","fb32faa7":"os.listdir(checkpoint_dir)","ad71e0d3":"latest = tf.train.latest_checkpoint(checkpoint_dir)\nprint(latest)","9f56b224":"wights_file = latest # choose the best checkpoint \nNN_model.load_weights(wights_file) # load it\nNN_model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_squared_error'])\n","a6c74805":"predictions = NN_model.predict(test)\npredict = pd.DataFrame(predictions, columns = ['USD'])\npredict","88d745b4":"forecast_usd.rename(columns={\"yhat\":\"Forecasted USD\"},inplace=True)\nforecast_usd","44cc2cea":"rms = mean_squared_error(forecast_usd, predictions, squared=False)\nrms","1d6c7a96":"forecast_usd[\"Predicted USD\"] = predictions\nforecast_usd[\"Date\"] = dates\n\n\nforecast_usd","bdb666d0":"fig = px.line(forecast_usd, x=\"Date\", y=forecast_usd.columns,\n              title='Forecasted USD vs Predicted USD')\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\",\n    ticklabelmode=\"period\")\nfig.show()","bdc771a4":"### Forecasting Confirmed","b6d43fc0":"I found the best-obtained result and used it.","e61a31c4":"## Linear Regression\n","485c3cff":"### Forecasting Deaths","97809710":"## Preprocessing Data","3ebcb132":"## Predicted USD to TL exhange rates","4268f03f":"Then find the mean squared error between them.","2ae3b29c":"## Merge Two Dataset","00e8857a":"I split the data according to first seen Covid-19 case in Turkey.\n\nI dropped some dates because other data which is we are going to use have not got that dates.\n\n","7b59096f":"## Correlation","40eecc1c":"## Visualizing the Relationships Between Patient Types and USD\/TL","a655dfb9":"I changed the selected currencies to Turkish lira.","ef8d59d7":"## DNN","2ba79426":"### Forecasting Recovered","2929f5f9":"###  Forecasting USD","f2ada23c":"## Libraries\n","866267e5":"Normalized the columns of Covid-19 data.","d174849b":"## Forecasting","9662ff68":"Also,showed the forecasted USD to TL exhange rates.","9b6b9539":"# Covid-19's impact on USD to Turkish Lira exchange rate\n\n\n\n\n","f1edd001":"Checked that are there any null values \u200b\u200binside data frames or not"}}