{"cell_type":{"1ee4f520":"code","8804a67e":"code","dd8d6fce":"code","3917dde6":"code","722d16a7":"code","73f0d4d1":"code","a5db6763":"code","340c43d6":"code","13a1ec39":"code","b82bfff9":"code","f84cb411":"code","1d74ca28":"code","163afa80":"code","febdb1c1":"code","ef519f40":"code","b44f5c65":"code","b6df0cd5":"code","687bd953":"code","e370cb0e":"code","8586dc79":"code","cbe8aa74":"code","b8c09ba3":"code","ce538bdf":"code","89df7938":"markdown","3403147f":"markdown","72a8a876":"markdown"},"source":{"1ee4f520":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#Matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n#Plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport seaborn as sns\n\nfrom wordcloud import WordCloud\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom collections import Counter\n\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8804a67e":"data = pd.read_csv('..\/input\/kc_house_data.csv')\ndata.head()","dd8d6fce":"data.info()","3917dde6":"plt.subplots(figsize=(17,14))\nsns.heatmap(data.corr(),annot=True,linewidths=0.5,linecolor=\"Black\",fmt=\"1.1f\")\nplt.title(\"Data Correlation\",fontsize=50)\nplt.show()","722d16a7":"#Null Values\ndata.isnull().sum()","73f0d4d1":"data.grade.value_counts().head(10)","a5db6763":"data.yr_built.value_counts().head(10)","340c43d6":"hist1 = [go.Histogram(x=data.grade,marker=dict(color='rgb(102, 0, 102)'))]\n\nhistlayout1 = go.Layout(title=\"Grade Counts\",xaxis=dict(title=\"Grades\"),yaxis=dict(title=\"Counts\"))\n\nhistfig1 = go.Figure(data=hist1,layout=histlayout1)\n\niplot(histfig1)","13a1ec39":"hist2 = [go.Histogram(x=data.yr_built,xbins=dict(start=np.min(data.yr_built),size=1,end=np.max(data.yr_built)),marker=dict(color='rgb(0,102,0)'))]\n\nhistlayout2 = go.Layout(title=\"Built Year Counts\",xaxis=dict(title=\"Years\"),yaxis=dict(title=\"Built Counts\"))\n\nhistfig2 = go.Figure(data=hist2,layout=histlayout2)\n\niplot(histfig2)","b82bfff9":"v1 = [go.Box(y=data.price,name=\"Price\",marker=dict(color=\"rgba(64,64,64,0.9)\"),hoverinfo=\"name+y\")]\n\nlayout1 = go.Layout(title=\"Price\")\n\nfig1 = go.Figure(data=v1,layout=layout1)\niplot(fig1)","f84cb411":"v21 = [go.Box(y=data.bedrooms,name=\"Bedrooms\",marker=dict(color=\"rgba(51,0,0,0.9)\"),hoverinfo=\"name+y\")]\nv22 = [go.Box(y=data.bathrooms,name=\"Bathrooms\",marker=dict(color=\"rgba(0,102,102,0.9)\"),hoverinfo=\"name+y\")]\nv23 = [go.Box(y=data.floors,name=\"Floors\",marker=dict(color=\"rgba(204,0,102,0.9)\"),hoverinfo=\"name+y\")]\n\nlayout2 = go.Layout(title=\"Bedrooms,Bathrooms and Floors\",yaxis=dict(range=[0,13])) #I hate 33 bedroom\n\nfig2 = go.Figure(data=v21+v22+v23,layout=layout2)\niplot(fig2)","1d74ca28":"bdata2014 = data[data.yr_built == 2014]\n\nbubble1 = go.Scatter(x=bdata2014.grade,y=bdata2014.bedrooms,name=\"Bedroom 2014\",mode=\"markers\",marker=dict(size=bdata2014.floors*5,color=\"rgba(0,0,0,1)\"))\nbubble2 = go.Scatter(x=bdata2014.grade,y=bdata2014.bathrooms,name=\"Bathroom 2014\",mode=\"markers\",marker=dict(size=bdata2014.floors*5,color=\"rgba(255,0,255,1)\"))\n\nbubbledata = [bubble1,bubble2]\n\nlayoutbubble = go.Layout(title=\"Bedroom vs Bathroom with Floors(Size) 2014\",xaxis=dict(title=\"Grades\"),yaxis=dict(title=\"Bedrooms & Bathrooms\"))\n\nbubblefig = go.Figure(data=bubbledata,layout=layoutbubble)\n\niplot(bubblefig)","163afa80":"bdata2015 = data[data.yr_built == 2015]\n\nbubble1 = go.Scatter(x=bdata2015.grade,y=bdata2015.bedrooms,name=\"Bedroom 2015\",mode=\"markers\",marker=dict(size=bdata2015.floors*5,color=\"rgba(0,0,0,1)\"))\nbubble2 = go.Scatter(x=bdata2015.grade,y=bdata2015.bathrooms,name=\"Bathroom 2015\",mode=\"markers\",marker=dict(size=bdata2015.floors*5,color=\"rgba(255,0,255,1)\"))\n\nbubbledata = [bubble1,bubble2]\n\nlayoutbubble = go.Layout(title=\"Bedroom vs Bathroom with Floors(Size) 2015\",xaxis=dict(title=\"Grades\"),yaxis=dict(title=\"Bedrooms & Bathrooms\"))\n\nbubblefig = go.Figure(data=bubbledata,layout=layoutbubble)\n\niplot(bubblefig)","febdb1c1":"data2015 = data[data.yr_built == 2015]\ndata2015.head()","ef519f40":"#normalize 2015 data prices\nfrom sklearn.preprocessing import MinMaxScaler\nnormalizeprice2015 = (MinMaxScaler().fit_transform(data2015.iloc[:,2:3]))*50\nnormalizeprice2015","b44f5c65":"s1 = [go.Scatter3d(x=data2015.bedrooms,y=data2015.bathrooms,z=data2015.floors,mode=\"markers\",marker=dict(size=normalizeprice2015,color=\"rgba(255,0,0,0.8)\"),hoverinfo =\"text\",text=\" Bedroom(s):\"+data.bedrooms.apply(str)+\" Bathroom(s):\"+data.bathrooms.apply(str)+\" Floor(s):\"+data.floors.apply(str)+\" ID: \"+data.id.apply(str))]\n\nlayout3 = go.Layout(title=\"Bedrooms vs Bathrooms vs Floors with Price 2015\",margin=dict(l=0,b=0,t=0,r=0))\n\nfig3 = go.Figure(data=s1,layout=layout3)\n\niplot(fig3)","b6df0cd5":"#Create Grade Frame\ngradeframe = pd.DataFrame({\"Grades\":data.grade.value_counts().index,\"House_Grade\":data.grade.value_counts().values})\ngradeframe[\"Grades\"] = gradeframe[\"Grades\"].apply(lambda x : \"Grade \" + str(x))\ngradeframe.set_index(\"Grades\",inplace=True)\ngradeframe","687bd953":"p1 = [go.Pie(labels = gradeframe.index,values = gradeframe.House_Grade,hoverinfo=\"percent+label+value\",hole=0.1,marker=dict(line=dict(color=\"#000000\",width=2)))]\n\nlayout4 = go.Layout(title=\"Grade Pie Chart\")\n\nfig4 = go.Figure(data=p1,layout=layout4)\n\niplot(fig4)\n","e370cb0e":"builtyear = pd.DataFrame({\"Years\":data.yr_built})\nbuiltyear[\"Years\"] = builtyear[\"Years\"].apply(lambda x: \"y\" + str(x)) #I can't use wordcloud with integers so I put y on head\nbuiltyear[\"Years\"].head()","8586dc79":"plt.subplots(figsize=(10,10))\nwcloud  = WordCloud(background_color=\"white\",width=500,height=500).generate(\",\".join(builtyear[\"Years\"]))\nplt.imshow(wcloud)\nplt.title(\"Years for Most Built Homes\",fontsize=40)\nplt.axis(\"off\")\nplt.show()","cbe8aa74":"#set colors\ndata[\"color\"] = \"\"\ndata.color[data.grade == 1] = \"rgb(255,255,255)\"\ndata.color[data.grade == 2] = \"rgb(220,220,220)\"\ndata.color[data.grade == 3] = \"rgb(242, 177, 172)\"\ndata.color[data.grade == 4] = \"rgb(255,133,27)\"\ndata.color[data.grade == 5] = \"rgb(255,255,204)\"\ndata.color[data.grade == 6] = \"rgb(255,65,54)\"\ndata.color[data.grade == 7] = \"rgb(178,37,188)\"\ndata.color[data.grade == 8] = \"rgb(51,51,0)\"\ndata.color[data.grade == 9] = \"rgb(37,188,127)\"\ndata.color[data.grade == 10] = \"rgb(26,51,176)\"\ndata.color[data.grade == 11] = \"rgb(132,10,10)\"\ndata.color[data.grade == 12] = \"rgb(82,80,80)\"\ndata.color[data.grade == 13] = \"rgb(0,0,0)\"","b8c09ba3":"#slice +7 grade\ndataplus = data[np.logical_and(data.grade >= 7,data.yr_built >= 2000)] \n#list lat and long\nlats = list(dataplus.lat.values)\nlongs = list(dataplus.long.values)","ce538bdf":"mapbox_access_token = 'pk.eyJ1IjoiZGFya2NvcmUiLCJhIjoiY2pscGFheHA1MXdqdjNwbmR3c290MTZ6dCJ9.K1FMv_q3ZVlKP13RrjFkjg'\n\nmapp = [go.Scattermapbox(lat=lats,lon=longs,mode=\"markers\",marker=dict(size=4.5,color=dataplus[\"color\"]) ,hoverinfo=\"text\",text=\"Grade:\"+dataplus.grade.apply(str)+\" Built Year:\"+dataplus.yr_built.apply(str)+\" Price:\"+dataplus.price.apply(str))]\n\nlayout5 = dict(title=\"Grade(+7) - Built Year(+2000) Map\",width=800,height=750,hovermode=\"closest\",mapbox=dict(bearing=0,pitch=0,zoom=9,center=dict(lat=47.5,lon=-122.161),accesstoken=mapbox_access_token))\n\nfig5 = go.Figure(data=mapp,layout=layout5)\n\niplot(fig5)","89df7938":"<font size=5>**Data Visualization**<\/font>","3403147f":"<font size=5>**Map Visualization**<\/font>","72a8a876":"# Load Data"}}