{"cell_type":{"308d192b":"code","07068314":"code","763bf2c1":"code","d3a566ac":"code","1916bfff":"code","d7746ec2":"code","bd5e9e16":"code","f7951a03":"code","176fbb67":"code","81da2585":"code","60569cdc":"code","45ce5d6a":"code","8d3917a2":"code","a7ea23fa":"code","e58fd1c9":"code","9e8fb557":"code","a7aebe7e":"code","05552887":"code","999737ec":"code","2add6df9":"code","428602fd":"code","f8f7022b":"code","a6118995":"markdown","f5bd4c73":"markdown","050f0c2e":"markdown","cb9e9eea":"markdown","816dad47":"markdown","5b3d46a2":"markdown"},"source":{"308d192b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07068314":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport sklearn\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.metrics import silhouette_samples\n","763bf2c1":"data=pd.read_csv('\/kaggle\/input\/mall-customers\/Mall_Customers.csv')","d3a566ac":"data.head()","1916bfff":"data.info()","d7746ec2":"data.describe()","bd5e9e16":"data[data.duplicated()]\ndata.duplicated().sum()","f7951a03":"data.isnull().sum()","176fbb67":"data.drop('CustomerID',axis=1,inplace=True)","81da2585":"l=LabelEncoder()\ndata['Genre']=l.fit_transform(data['Genre'])","60569cdc":"mypip=Pipeline([('scaler', StandardScaler())])\n_=mypip.fit_transform(data)","45ce5d6a":"pca=PCA(n_components = 2)\ndr=pca.fit_transform(data)\npca.components_\nvisualize_pca=pd.DataFrame(dr,columns=['PCA1','PCA2'])\n_=sns.scatterplot(x='PCA1',y='PCA2',data=visualize_pca)","8d3917a2":"fig=plt.figure(figsize=(15,15))\nnumber=1\nfor i in data.columns:\n    ax=plt.subplot(4,4,number)\n    sns.histplot(data[i],kde=True)\n    plt.xlabel(i)\n    number += 1\n    \nplt.show()  ","a7ea23fa":"fig=plt.figure(figsize=(15,15))\nnumber=1\nfor i in data.columns:\n    ax=plt.subplot(4,4,number)\n    sns.boxplot(data[i])\n    plt.xlabel(i)\n    number += 1\n    \nplt.show() ","e58fd1c9":"_=sns.pairplot(data,hue='Genre')  \n","9e8fb557":"_=sns.heatmap(data.corr(),annot=True,cmap='YlOrRd')","a7aebe7e":"distortions=[]\nsilhouette=[]\nK=np.arange(2,10,1)\nfig=plt.figure(figsize = (20, 15))\nfig.tight_layout()\nsns.set(style=\"darkgrid\")\nnumber=1\nfor i in K:\n    km=KMeans(n_clusters=i,random_state=4,init='k-means++')\n    km.fit_predict(data)\n    distortions.append(km.inertia_)\n    visualize_pca['pred']=km.fit_predict(data)\n    \n    ax=plt.subplot(4,4,number)\n    sns.scatterplot(x='PCA1',y='PCA2', hue='pred',data=visualize_pca,palette='Paired')\n    plt.xlabel('k=' +str(i))\n    number += 1\n    silhouette.append(silhouette_score(data,km.labels_, metric='euclidean'))\n    \nplt.show()","05552887":"plt.figure(figsize=(16,8))\nplt.plot(K, distortions, 'bx-',marker='o',\n         markerfacecolor='red', markersize=10)\nplt.xlabel('k')\nplt.ylabel('Distortion')\nplt.title('The Elbow Method showing the optimal k')\nplt.show()","999737ec":"plt.figure(figsize=(16,8))\nplt.plot(K, silhouette, 'bx-',marker='*', markerfacecolor='red', markersize=10)\nplt.xlabel('k')\nplt.ylabel('SilhouetteScore')\nplt.show()","2add6df9":"plt.figure(figsize=(10,10))\nkm=KMeans(n_clusters=5,random_state=4,init='k-means++')\nvisualize_pca['pred']=km.fit_predict(data)\nsns.scatterplot(x='PCA1',y='PCA2', hue='pred',data=visualize_pca,palette='Paired')\n\nplt.show()","428602fd":"visualize_pca['silhouetteSample']=silhouette_samples(data,km.labels_)\nplt.figure(figsize=(10,10))\nplt.scatter(x='PCA1',y='PCA2',data=visualize_pca[visualize_pca['silhouetteSample']>=0], c=\"blue\")\nplt.scatter(x='PCA1',y='PCA2',data=visualize_pca[visualize_pca['silhouetteSample']<0], c=\"red\")\nplt.title(\"Lable based on Silhouette Sample\")\nplt.xlabel(\"PCA1\")\nplt.ylabel(\"PCA2\")\nplt.legend(['Positive Silhouette Sample','Negative Silhouette Sample'])\nplt.show()","f8f7022b":"eps_list=np.arange(start=11.5, stop=12.1, step=0.1)\nmin_sample_list=np.arange(start=4, stop=7, step=1)\nsilhouette_scores_data=pd.DataFrame()\nparams={\n 'eps': eps_list,\n \n 'metric': 'euclidean',\n\n 'min_samples':min_sample_list,\n }\n\nfig=plt.figure(figsize = (20, 20))\nsns.set(style=\"darkgrid\")\n\nnumber=1\nfor e in eps_list:\n    for min_sample in min_sample_list:\n        \n        dbscan=DBSCAN(eps=e,min_samples=min_sample)\n   \n        if(len(np.unique(dbscan.fit_predict(data)))>1):\n            sil_score=silhouette_score(data, dbscan.fit_predict(data))\n        else:\n            continue\n        trial_parameters=\"eps:\" + str(e.round(1)) +\" min_sample :\" + str(min_sample)\n        \n        silhouette_scores_data=silhouette_scores_data.append(pd.DataFrame(data=[[sil_score,trial_parameters]], columns=[\"score\", \"parameters\"]))\n        visualize_pca['pred-dbscan']=dbscan.fit_predict(data)\n    \n        ax=plt.subplot(7,3,number)\n        sns.scatterplot(x='PCA1',y='PCA2', hue='pred-dbscan',data=visualize_pca,palette='Paired')\n        plt.title('eps=' +str(e),loc='center')\n        plt.tight_layout(pad=2.5)\n        number += 1\nplt.show()\nsilhouette_scores_data.sort_values(by='score', ascending=False).head(1)","a6118995":"EDA","f5bd4c73":"silhouette samples","050f0c2e":"Load and Prepare Data","cb9e9eea":"Strorytelling - Visualization","816dad47":"DBSCAN","5b3d46a2":"Data Preprocessing"}}