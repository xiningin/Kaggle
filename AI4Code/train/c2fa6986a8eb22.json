{"cell_type":{"7507d795":"code","43f58926":"code","29fe23df":"code","cb558884":"code","bd616cc4":"code","b88f8ea2":"code","8d8646c3":"code","558afd4a":"code","b329a031":"code","9850a2cf":"code","5ac40f70":"code","d718380a":"markdown","1de4c47a":"markdown","3aa953a5":"markdown","db78484e":"markdown","063999bc":"markdown","f307bda6":"markdown","64ea7edb":"markdown","7853583b":"markdown","60e11831":"markdown"},"source":{"7507d795":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","43f58926":"# Importing all libraries required in this notebook\nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics ","29fe23df":"# Reading data from remote link\nurl =  '..\/input\/student-study-hour-v2\/Student Study Hour V2.csv'\nstudent_data = pd.read_csv(url)\nStudy_Hours=np.asarray(student_data['Hours'])\nStudent_Scores=np.asarray(student_data['Scores'])\nprint(student_data)\n","cb558884":"x = student_data.iloc[:, :-1].values  \ny = student_data.iloc[:, 1].values ","bd616cc4":"# plotting the distribution of Scores\nplt.plot(x,y,'r*')\nplt.xlabel('Study Hours')\nplt.ylabel('Student Scores')\nplt.title('Scores vs Hours')\nplt.legend('Scores')\nplt.grid(alpha=0.3)\nplt.show()","b88f8ea2":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=5)\nlg=linear_model.LinearRegression()\nlg.fit(x_train,y_train)\nprint('Training Done')","8d8646c3":"# Plotting the regression line\nd=x*lg.coef_+lg.intercept_\n# Plotting for the test data\nplt.plot(x,y,'r*')\nplt.xlabel('Study Hours')\nplt.ylabel('Student Scores')\nplt.title('Scores vs Hours')\nplt.grid(alpha=0.3)\nplt.plot(x,d)\nplt.show()","558afd4a":"print(x_test)  # Testing data - In Hours\ny_pred = lg.predict(x_test) # Predicting the scores","b329a031":"# Comparing Actual vs Predicted Scores\ndifference = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  \nprint(difference)","9850a2cf":"# Testing our own data\nHrs=9.25\nPredicted_Score = lg.predict([[Hrs]])\nprint(\"No of Hours = {}\".format(Hrs))\nprint(\"Predicted Score = {}\".format(Predicted_Score[0]))","5ac40f70":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root mean squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","d718380a":"**Step 3: Data Visualization**\n\nPlotting data points on 2-D graph to observe our dataset and see if we can manually find any relationship between the data. We can create the plot with the following script:","1de4c47a":"**Step 2: Preparing the data**\n\nThe next step is to divide the data into \"attributes\" (inputs) and \"labels\"(outputs).","3aa953a5":"**Plotting the Line of Regression**","db78484e":"From the graph above, we can clearly see that there is a positive linear relation between the number Study hours and Student Scores.","063999bc":"**Step 4: Algorithm Training**\n\nSplitting the data into training data-set and test data-set. Then, starting of training the algorithm.","f307bda6":"**Step 1: Reading data from online source**","64ea7edb":"**Prediction Using Supervised ML**\n\n\nIn this task, we will predict the scores that a student is expected to get based upon the number of hours they have studied. This task is based on simple linear regression model as it involves just two variables.","7853583b":"**Step 5: Making Predictions**\n\nNow that we have trained our algorithm, it's time to make some predictions.","60e11831":"**Step 6: Evaluating the model**\n\nThe final step is to evaluate the performance of algorithm. This step is particularly important to compare how well different algorithms perform on a particular dataset. Here, we have chosen the mean absolute error, mean squared error, root mean squared error. There are many such metrics."}}