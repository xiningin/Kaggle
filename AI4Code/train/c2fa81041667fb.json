{"cell_type":{"8f00a0be":"code","cfec1771":"code","700fac2c":"code","66a433d3":"code","82793b19":"code","768e1b6f":"code","1922a7e3":"code","fdaf72cb":"code","ef0fb208":"code","fb5fb02b":"markdown","906b7cbf":"markdown","e98dda7c":"markdown","2d9e60c1":"markdown"},"source":{"8f00a0be":"import kmapper as km\nfrom kmapper import Cover, jupyter\nimport numpy as np, pandas as pd\n\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD, LatentDirichletAllocation\nfrom sklearn.manifold import Isomap\nfrom sklearn import cluster\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler","cfec1771":"n_sample = 3000\ntrain = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\")\ntrain_id = np.array(train[\"comment_id\"][:n_sample])\ntrain = np.array(train[\"text\"][:n_sample])","700fac2c":"train[0]","66a433d3":"train[2]","82793b19":"mapper = km.KeplerMapper(verbose = 1)\n\nprojected_X = mapper.fit_transform(train,\n                                   projection = [TfidfVectorizer(analyzer = \"char\",\n                                                               ngram_range = (1,6),\n                                                               max_df = 0.90,\n                                                               min_df = 0.05),\n                                               TruncatedSVD(n_components = 50,\n                                                            random_state = 2048),\n                                               Isomap(n_components = 2,\n                                                      n_jobs = -1)],\n                                   scaler = [None, None, MinMaxScaler()])\n\n\ngraph = mapper.map(projected_X,\n                   X = None,\n                   clusterer = cluster.AgglomerativeClustering(n_clusters = 5,\n                                                             linkage = \"complete\",\n                                                             affinity = \"cosine\"),\n                   cover = Cover(n_cubes = 10, perc_overlap = 0.33))","768e1b6f":"vec = TfidfVectorizer(analyzer = \"word\",\n                      strip_accents = \"unicode\",\n                      stop_words = \"english\",\n                      ngram_range = (1,3),\n                      max_df = 0.90,\n                      min_df = 0.10)\n\ninterpretable_inverse_X = vec.fit_transform(train).toarray()\ninterpretable_inverse_X_names = vec.get_feature_names()","1922a7e3":"n_topics = 8\nlda_model = LatentDirichletAllocation(n_components = n_topics, \n                                      learning_method = \"online\",\n                                      batch_size = 128,\n                                      evaluate_every = -1,\n                                      max_iter = 20,\n                                      random_state = 32,\n                                      n_jobs = -1)\n\ncomment_topics = lda_model.fit_transform(interpretable_inverse_X)","fdaf72cb":"comment_topics = np.matrix(comment_topics)\ndoc_topics = comment_topics\/comment_topics.sum(axis = 1)\n\nlda_keys = []\nfor i, tweet in enumerate(train):\n    lda_keys += [doc_topics[i].argmax()]","ef0fb208":"_ = mapper.visualize(graph,\n                     X = interpretable_inverse_X,\n                     X_names = interpretable_inverse_X_names,\n                     path_html = \".\/toxic_comments.html\",\n                     lens = projected_X,\n                     lens_names = [\"ISOMAP1\", \"ISOMAP2\"],\n                     title = \"Latent Semantic Char-gram Analysis with Isometric Embedding\",\n                     custom_tooltips = train_id,\n                     color_values = lda_keys,\n                     color_function_name = 'topic')\n\njupyter.display(\".\/toxic_comments.html\")","fb5fb02b":"## Reference\n* [Kepler Mapper](https:\/\/kepler-mapper.scikit-tda.org\/en\/latest\/notebooks\/KeplerMapper-Newsgroup20-Pipeline.html)\n* [Topological Methods for the Analysis of High Dimensional\nData Sets and 3D Object Recognition](https:\/\/research.math.osu.edu\/tgda\/mapperPBG.pdf)\n* [Cover](https:\/\/arxiv.org\/pdf\/1706.00204.pdf)\n* [Latent Dirichlet Allocation](https:\/\/www.jmlr.org\/papers\/volume3\/blei03a\/blei03a.pdf?TB_iframe=true&width=370.8&height=658.8)\n* [Agglomerative Clustering](https:\/\/link.springer.com\/article\/10.1007\/s00453-012-9717-4)","906b7cbf":"## Latent Dirichlet Allocation","e98dda7c":"## Tf-Idf ","2d9e60c1":"## Kepler Mapper Algorithm"}}