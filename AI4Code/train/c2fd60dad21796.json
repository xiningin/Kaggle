{"cell_type":{"7f7962e2":"code","b2608a4c":"code","cc4a4ed9":"code","97d89055":"code","b25396a8":"code","e761faed":"code","e92ca5f2":"code","90dc3248":"code","af846842":"code","f067a637":"code","5e3d5f92":"code","e05615d2":"code","a4f27d62":"code","ae400208":"markdown","2322eaf8":"markdown","d16970d1":"markdown","a39e9241":"markdown","83f0c4c9":"markdown","65869f12":"markdown"},"source":{"7f7962e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2608a4c":"import pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nfrom sklearn.model_selection import train_test_split","cc4a4ed9":"df=pd.read_csv('\/kaggle\/input\/breastcancer\/breastcancer.csv')","97d89055":"df.head(3)","b25396a8":"X=df.iloc[:,1:10]\ny=df.iloc[:,10]\nfrom sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\nencoder.fit(y)\nencoded_y = encoder.transform(y)\nfrom sklearn import preprocessing\nX_scaled = preprocessing.scale(X)","e761faed":"X_train, X_test, y_train, y_test = train_test_split( X_scaled, encoded_y, test_size=0.2, random_state=12)","e92ca5f2":"model = keras.models.Sequential()\nmodel.add(keras.layers.Dense(20,input_dim=9, activation=\"relu\"))\nmodel.add(keras.layers.Dense(8, activation=\"relu\"))\n#model.add(keras.layers.Dense(25, activation=\"relu\"))\nmodel.add(keras.layers.Dense(1, activation=\"sigmoid\"))","90dc3248":"from keras.utils.vis_utils import plot_model\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","af846842":"model.compile(loss=\"binary_crossentropy\",optimizer=\"sgd\",metrics=[\"accuracy\"])","f067a637":"history = model.fit(X_train, y_train, epochs=100)","5e3d5f92":"import pandas as pd\nimport matplotlib.pyplot as plt\npd.DataFrame(history.history).plot(figsize=(8, 5))\nplt.grid(True)\nplt.gca().set_ylim(0, 1) # set the vertical range to [0-1]\nplt.show()","e05615d2":"model.summary()","a4f27d62":"model.evaluate(X_test, y_test)","ae400208":"## Question 1: Whether to use sci-kit?\n## Question 2: Fitting the model\n## Question 3: Predicting and inspecting the model.\n## Question 4: Loss function for classifers","2322eaf8":"* If there are 10 classes last layer will be model.add(keras.layers.Dense(10, activation=\"softmax\"))","d16970d1":"![image.png](attachment:image.png)","a39e9241":"![image.png](attachment:image.png)","83f0c4c9":"![image.png](attachment:image.png)\n* Geron","65869f12":"* Binary Crossentropy:  When there are two classes\n* CategoricalCrossentropy : When more than two classes and classes are used as one hot encoding\n* SparseCategoricalCrossentropy: When more than two classes and class labels are provided as integers\n* Some other optimizers are RMSprop, Adam etc."}}