{"cell_type":{"7c762249":"code","c965550c":"code","66f95f87":"code","5f40b5a1":"code","e8b67eef":"code","e5c43e0b":"code","7b431d49":"code","1a5006e3":"code","2ab2d6aa":"code","323f6641":"code","c456f2ab":"code","4088a75b":"code","6db2e320":"code","f03d99f2":"code","9b057aef":"code","2199c750":"code","b69e4d1d":"code","5b636e77":"code","c265aabd":"code","9b262e43":"code","462ff000":"code","302120a3":"markdown","e4eb7e1c":"markdown","b7eb4cd7":"markdown","b179e44d":"markdown","4f1733a2":"markdown","ba800f5a":"markdown","2d8e2a2d":"markdown","5c420458":"markdown","172acd71":"markdown","aebbfb3d":"markdown","e26ebca4":"markdown","fa252055":"markdown","54f2befd":"markdown","83eaad23":"markdown","d3403677":"markdown","baa2a086":"markdown","9c072370":"markdown","aef6fe0d":"markdown","7577038e":"markdown","196c7004":"markdown"},"source":{"7c762249":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","c965550c":"df = pd.read_csv('..\/input\/adult-income-dataset\/adult.csv')\ndf.head(5)","66f95f87":"df.info()","5f40b5a1":"print(f\"dataset records: {len(df)}\")\nprint(f\"Percentage of recored with undefined workclass: {df['workclass'].value_counts()['?'] \/ len(df)}\")\nprint(f\"Percentage of recored with undefined occupation: {df['occupation'].value_counts()['?']\/len(df)}\")\nprint(f\"Percentage of recored with undefined Native Country: {df['native-country'].value_counts()['?']\/len(df)}\")","e8b67eef":"df.rename(columns={'native-country':\"nativeCountry\"},inplace=True)\ndf = df.query(\"workclass != '?' and occupation !='?' and nativeCountry !='?'\")\nprint(f\"dataset records: {len(df)}\")","e5c43e0b":"def precent_plot(df,col,ax):\n    ax = sns.countplot(data=df, x=col,order=df[col].value_counts().index)\n    for p in ax.patches:\n            percentage = '{:.1f}%'.format(100 * p.get_height()\/len(df))\n            x = p.get_x() + p.get_width()*0.4\n            y = p.get_y()  + p.get_height()\n            ax.annotate(percentage, (x, y))\n    plt.show()","7b431d49":"fig = plt.figure()\nax_1 = fig.add_subplot(121)\nplt.title('Gender Number Representation')\nprecent_plot(df,'gender',ax_1)","1a5006e3":"\nfig = plt.figure(figsize=(14,8))\n\nax_1 = fig.add_subplot(211)\nsns.countplot(x='education',hue='gender',palette='tab10',order=df['education'].value_counts().index,data=df,ax=ax_1)\nplt.xticks(rotation=45)\n\nfig.tight_layout(pad=3.0)\n\nax_2 = fig.add_subplot(212)\nsns.countplot(x='education',hue='income',palette='tab10',order=df['education'].value_counts().index,data=df,ax=ax_2)\nplt.xticks(rotation=45);","2ab2d6aa":"fig = plt.figure(figsize=(14,8))\n\nax_1 = fig.add_subplot(211)\nsns.countplot(x='occupation',hue='gender',palette='tab10',order=df['occupation'].value_counts().index,data=df,ax=ax_1)\nplt.xticks(rotation=45)\n\nfig.tight_layout(pad=3.0)\n\nax_2 = fig.add_subplot(212)\nsns.countplot(x='occupation',hue='income',palette='tab10',order=df['occupation'].value_counts().index,data=df,ax=ax_2)\nplt.xticks(rotation=45);","323f6641":"sns.boxenplot(x='gender',y='hours-per-week',data=df)\nplt.title(\"Work Hours per Week\",fontsize=16);","c456f2ab":"fig = plt.figure()\nax_1 = fig.add_subplot(121)\nplt.xticks(rotation=90)\nplt.title('Race Number Representation',fontsize=16)\nprecent_plot(df,'race',ax_1)","4088a75b":"quantitative = ['age', 'fnlwgt', 'educational-num','capital-gain', 'capital-loss', 'hours-per-week']\nfig, axes = plt.subplots(nrows=2,ncols=3,figsize=(14,10))\nfig.suptitle('Features Distribution',fontsize=16,fontweight='bold')\nfor i, ax in enumerate(axes.flat):\n    sns.histplot(df[quantitative].iloc[:,i],kde=True,ax=ax)\n","6db2e320":"fig = plt.figure(figsize=(10,4))\nax_1 = fig.add_subplot(121)\nax_2 = fig.add_subplot(122)\n\nsns.histplot(df['fnlwgt'],kde=True,ax = ax_1)\nsns.boxplot(data=df,x='income',y='fnlwgt',ax = ax_2);","f03d99f2":"from collections import defaultdict\nfrom sklearn.preprocessing import LabelEncoder\n\nd = defaultdict(LabelEncoder)\n\ndef encode(col):\n    if col.dtype == 'object':\n        return d[str(col)].fit_transform(col)\n    else:\n        return col \n    \ndf = df.apply(encode)","9b057aef":"from sklearn.feature_selection import mutual_info_regression\n\ndef mutual_info_scores(X, y, discrete_features):\n    mi_scores = mutual_info_regression(X, y, discrete_features)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\ndef plot_mi_scores(scores):\n    scores = scores.sort_values(ascending=True)\n    width = np.arange(len(scores))\n    ticks = list(scores.index)\n    plt.barh(width, scores)\n    plt.yticks(width, ticks)\n    plt.title(\"Mutual Information Scores\")","2199c750":"mi_scores = mutual_info_scores(df.drop(columns=['income']), df['income'], discrete_features=False)\nplt.figure(dpi=100, figsize=(10, 5))\nplot_mi_scores(mi_scores)","b69e4d1d":"from imblearn.over_sampling import SMOTE \nsmote = SMOTE()\nX_balanced, y_balanced = smote.fit_resample(df.drop(['income','fnlwgt'],axis=1),df['income'])\n# print(y_balanced.value_counts())","5b636e77":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,classification_report\n\nX_train,X_test,y_train,y_test = train_test_split(X_balanced, y_balanced,test_size=0.2,random_state=42)\n\ntree = DecisionTreeClassifier(criterion='entropy',max_depth=12,random_state=42)\ntree.fit(X_train,y_train)\n\nprint(f'train accuracy: {accuracy_score(y_train,tree.predict(X_train))}')\nprint(f'test accuracy:  {accuracy_score(y_test,tree.predict(X_test))}')\nprint(classification_report(y_test,tree.predict(X_test)))","c265aabd":"from sklearn.ensemble import BaggingClassifier\n\nbagg = BaggingClassifier(max_samples=0.2,random_state=42)\nbagg.fit(X_train,y_train)\n\nprint(f'train accuracy: {accuracy_score(y_train,bagg.predict(X_train))}')\nprint(f'test accuracy:  {accuracy_score(y_test,bagg.predict(X_test))}')\nprint(classification_report(y_test,bagg.predict(X_test)))","9b262e43":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=100,max_depth=3,random_state=42)\nmodel.fit(X_train,y_train)\n\nprint(f'train accuracy: {accuracy_score(y_train,model.predict(X_train))}')\nprint(f'test accuracy:  {accuracy_score(y_test,model.predict(X_test))}')\nprint(classification_report(y_test,model.predict(X_test)))","462ff000":"from catboost import CatBoostClassifier\n\nclf = CatBoostClassifier(\n    iterations=400,\n    max_depth=3,\n    random_seed=42,\n    learning_rate=0.5,\n    custom_loss=['AUC', 'Accuracy'])\n\nclf.fit(\n    X_train, y_train,\n    eval_set=(X_test, y_test),\n    verbose=False)\n\nprint(f'train accuracy: {accuracy_score(y_train,clf.predict(X_train))}')\nprint(f'test accuracy:  {accuracy_score(y_test,clf.predict(X_test))}')\nprint(classification_report(y_test,clf.predict(X_test)))","302120a3":"## **2. BaggingClassifier**","e4eb7e1c":"### 3. Work Hours","b7eb4cd7":"### fnlwgt importance","b179e44d":"It seems that no variation shown above between fnlwgt median value for both target categories.","4f1733a2":"## Race Representation","ba800f5a":"## **Encoding Categorical Features**","2d8e2a2d":"## **1. DecisionTreeClassifier**","5c420458":"### Gender Number Representation","172acd71":"# **Modeling**","aebbfb3d":"## Gender Equality","e26ebca4":"## **Target imbalance**","fa252055":"## **Quantitative Distribution**","54f2befd":"## **4. CatBoostClassifier**","83eaad23":"# **Exploratonunique Data Analysis**","d3403677":"# **Data Wrangling**","baa2a086":"### 2. Occupation","9c072370":"## Mutual information\n","aef6fe0d":"**Percentage of recored with undefined values are too small and droping them will not affect the model prediction.**","7577038e":"## **3. RandomForestClassifier**","196c7004":"### 1 . Education"}}