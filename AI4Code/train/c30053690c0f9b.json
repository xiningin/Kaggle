{"cell_type":{"aca3cfb0":"code","0af75616":"code","af720d89":"code","32804eb9":"code","c37deb88":"code","f131fbee":"code","8d93c370":"code","6bbc4713":"code","85491bdf":"code","f5bb99d2":"code","4636b2d0":"code","553da793":"code","fc2238fc":"markdown","3d4ebe56":"markdown","7b69e639":"markdown","d37f537c":"markdown","4f7a273d":"markdown","c6bc6068":"markdown","eb630173":"markdown"},"source":{"aca3cfb0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\n","0af75616":"# Importing Keras library\nfrom PIL import Image\nimport cv2\n\n#importing the keres libraries\nfrom keras.models import Model, Sequential\nfrom keras.layers import Flatten, Dense, Dropout\nfrom keras.layers import Convolution2D, MaxPooling2D\nfrom keras.layers import BatchNormalization, GlobalAveragePooling2D\nfrom keras.utils import to_categorical\nfrom keras.optimizers import Adam\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","af720d89":"DATA_DIR=\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/\"\nSIZE=64\ndataset=[]\nlabel=[]\n","32804eb9":"parasitized_images=os.listdir(DATA_DIR + 'Parasitized\/')\nfor i,image_name in enumerate(parasitized_images):\n    try:\n        if (image_name.split('.')[1]==\"png\"):\n            image=cv2.imread(DATA_DIR + 'Parasitized\/' + image_name)\n            image=Image.fromarray(image,\"RGB\")\n            image=image.resize((64,64))\n            dataset.append(np.array(image))\n            label.append(0)\n    except Exception:\n        None\n        ","c37deb88":"uninfected_images=os.listdir(DATA_DIR + 'Uninfected\/')\nfor i,image_name in enumerate(uninfected_images):\n    try:\n        if (image_name.split('.')[1]==\"png\"):\n            image=cv2.imread(DATA_DIR + 'Uninfected\/' + image_name)\n            image=Image.fromarray(image,\"RGB\")\n            image=image.resize((64,64))\n            dataset.append(np.array(image))\n            label.append(1)\n    except Exception:\n        None","f131fbee":"#visualizing the Parasitized images. \nplt.figure(figsize=(18,12))\nfor index,image_index in enumerate(np.random.randint(len(parasitized_images),size=5)):\n    plt.subplot(1,5,index+1)\n    plt.imshow(dataset[image_index])","8d93c370":"#visualizing the uninfected images.\nplt.figure(figsize=(18,12))\nfor index,image_index in enumerate(np.random.randint(len(uninfected_images),size=5)):\n    plt.subplot(1,5,index+1)\n    plt.imshow(dataset[len(parasitized_images)+image_index])","6bbc4713":"#splitting the data into train and test\nfrom sklearn.model_selection import train_test_split\ntrain_X,test_X,train_y,test_y=train_test_split(dataset,to_categorical(np.array(label)),test_size=0.30,random_state=123)","85491bdf":"from keras.preprocessing.image import ImageDataGenerator\ntrain_generator = ImageDataGenerator(rescale = 1\/255,\n                                     zoom_range = 0.3,\n                                     horizontal_flip = True,\n                                     rotation_range = 30)\n\ntest_generator = ImageDataGenerator(rescale = 1\/255)\n\ntrain_generator = train_generator.flow(np.array(train_X),\n                                       train_y,\n                                       batch_size = 64,\n                                       shuffle = False)\n\ntest_generator = test_generator.flow(np.array(test_X),\n                                     test_y,\n                                     batch_size = 64,\n                                     shuffle = False)","f5bb99d2":"model = Sequential()\nmodel.add(Convolution2D(32, (3, 3), input_shape = (SIZE, SIZE, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2), data_format=\"channels_last\"))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.2))\n\nmodel.add(Convolution2D(32, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2), data_format=\"channels_last\"))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\n\nmodel.add(Dense(activation = 'relu', units=512))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(activation = 'relu', units=256))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(activation = 'sigmoid', units=2))\nmodel.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])","4636b2d0":"history=model.fit(train_generator,validation_data=test_generator,epochs=10,verbose=1,shuffle=False)","553da793":"#Plotiing the Loss and Accuracy of our Model.\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\n\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.plot(train_loss)\nplt.plot(val_loss)\n\nplt.subplot(1,2,2)\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.plot(train_acc)\nplt.plot(val_acc)","fc2238fc":"**Importing the Dataset**","3d4ebe56":"**Reading Uninfected images**","7b69e639":"**Reading Parasitized images**","d37f537c":"**Splitting the Data**","4f7a273d":"**Data Augmentation**\n\n Used ImageDataGenerator to generate more image data and then train the model on the same.","c6bc6068":"Applying  CNN MODEL","eb630173":"**Importing Libraries**"}}