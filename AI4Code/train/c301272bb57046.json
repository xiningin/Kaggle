{"cell_type":{"fb97ffd1":"code","c531aa44":"code","d05f634d":"code","21cca6c4":"code","ceecf869":"code","f990143d":"code","ad54ea24":"code","f28fadbb":"code","d0e5afef":"code","3da4166f":"code","256505ae":"code","fab3b333":"code","a4dd89ec":"code","bebd9c42":"code","a19052e0":"code","30dc4dec":"code","91944747":"markdown","1922bcd2":"markdown","c7cc31eb":"markdown","f47b01f9":"markdown","f465df3e":"markdown","90b9054a":"markdown","44aaab27":"markdown","f9a3c746":"markdown","3009deb9":"markdown","a9432cbf":"markdown","14e93cd1":"markdown","9cd438db":"markdown","ea28fde0":"markdown","b9eda58f":"markdown","688d04c3":"markdown","a56aca7b":"markdown"},"source":{"fb97ffd1":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","c531aa44":"# Ploting and visualisations \nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.express as px \nfrom plotly.offline import download_plotlyjs,init_notebook_mode, iplot\nimport plotly.tools as tls \nimport plotly.figure_factory as ff \npy.init_notebook_mode(connected=True)\n# ----------------------- #\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","d05f634d":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# elections.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/elections.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'elections.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","21cca6c4":"display(df1.head(5),df1.tail(5))","ceecf869":"import missingno as msno \n  \n\nmsno.bar(df1,color='Orange') ","f990143d":"df1['Early Aug'] = pd.to_numeric(df1['Early Aug'], errors='coerce')\ndf1['Late Aug'] = pd.to_numeric(df1['Late Aug'], errors='coerce')\ndf1['Early Sep'] = pd.to_numeric(df1['Early Sep'], errors='coerce')\ndf1['Late Sep'] = pd.to_numeric(df1['Late Sep'], errors='coerce')\ndf1['Early Oct'] = pd.to_numeric(df1['Early Oct'], errors='coerce')\ndf1['Late Oct'] = pd.to_numeric(df1['Late Oct'], errors='coerce')","ad54ea24":"# First extract all the numerical data from the cell \ndf1['House Seats to Defend'] = df1['House Seats to Defend'].str.extract('(\\d+)')\n\ndf1['House Seats to Defend'] = pd.to_numeric(df1['House Seats to Defend'], errors='coerce')","f28fadbb":"msno.bar(df1,color='Orange') ","d0e5afef":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (4 * nGraphPerRow, 6 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar(color='Orange')\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","3da4166f":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","256505ae":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","fab3b333":"plotPerColumnDistribution(df1[['President']], 3, 3)","a4dd89ec":"colors = ['red','blue']\ndef target_count(data,column,height):\n    trace = go.Bar( x = data[column].value_counts().values.tolist(),\n    y = data[column].unique(),\n    orientation = 'h',\n    text = data[column].value_counts().values.tolist(),\n    textfont=dict(size=20),\n    textposition = 'auto',\n    opacity = 0.5,marker=dict(color=['blue','red'],\n            line=dict(color='#000000',width=1.5))\n    )\n    layout = (dict(title= \"EDA of {} column\".format(column),\n                  autosize=True,height=height,))\n    fig = dict(data = [trace], layout=layout)\n    \n    py.iplot(fig)\n    \n# --------------- donut chart to show there percentage -------------------- # \n\ndef target_pie(data,column):\n    trace = go.Pie(labels=data[column].unique(),values=data[column].value_counts(),\n                  textfont=dict(size=10),\n                   opacity = 0.5,marker=dict(\n                   colorssrc='tealrose',line=dict(color='#000000', width=1.5)),\n                   hole=0.6)\n                  \n    layout = dict(title=\"Dounat chart to see %age \")\n    fig = dict(data=[trace],layout=layout)\n    py.iplot(fig)","bebd9c42":"target_count(df1,'Presidents Party',300)\ntarget_pie(df1,'Presidents Party')","a19052e0":"plotCorrelationMatrix(df1, 8)","30dc4dec":"plotScatterMatrix(df1, 12, 10)","91944747":"## Missing Data","1922bcd2":"## Let's See which person got how many times elected.","c7cc31eb":"### Let's check again what changes have happend.","f47b01f9":"## Exploratory Analysis\n\nLet's dig deep into the dataset and look at some of it aspects. ","f465df3e":"Now you're ready to read in the data and use the plotting functions to visualize the data.","90b9054a":"![Who-Will-Win-The-2016-USA-Presidential-Election.png](attachment:Who-Will-Win-The-2016-USA-Presidential-Election.png)","44aaab27":"### But note there were columns with missing data, So lets convert them into null values","f9a3c746":"## Conclusion\n\n### This concludes your starter analysis! To go forward from here, click the blue \"Edit Notebook\" button at the top of the kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. \n### There can be n number of analysis one can do so go ahead and Happy Kaggling. \n### Please UpVote the Dataset and do try your own analysis on it.Thank You. <br>Link- https:\/\/www.kaggle.com\/achintyatripathi\/american-elections","3009deb9":"## Let's also check whether Democrats or Republican's have more chances of being in the majority. ","a9432cbf":"## Presidential candidates from Democrats won more times than Republicans.  ","14e93cd1":"## So you can see that the dataset has data from 1934 Franklin D. Roosevelt to 2018\tDonald J. Trump.\n## Also note:- Year 1934,1938 were the forming years for America and much importance was given to development and nation building so data is collected wasn't of great quality. But I have tried to retain as much as I could. ","9cd438db":"## Scatter and density plots:","ea28fde0":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","b9eda58f":"## <font color='Orange'>Introduction <\/font>\n### <font color='Dark Orange'> Hi everyone. This notebook is a beginners guide to <i> \"The American Presidency\"<\/i> Dataset.<br>It contains some insites that about the dataset and what all could be done with it. <br>Hope you would enjoy using it. <u><b> Please do comment about the dataset as it is my first time uploading\/sharing one. <\/b><\/u><\/font> \n\n### <font color='Blue'>Do UpVote the Dataset.Thank You\ud83d\ude4f\ud83d\ude03. <\/font>\n### Link- https:\/\/www.kaggle.com\/achintyatripathi\/american-elections ","688d04c3":"## Feature extraction: House Seats to Defend \n### We need to first remove \\r\\n elements form that columns and then check if it contains any missing values. ","a56aca7b":"## Correlation matrix:"}}