{"cell_type":{"2199c92b":"code","ce337000":"code","b1dcf6fc":"code","25e5b3a5":"code","3a88d7d4":"code","c680fc86":"code","01dd11d5":"code","a4e4f34e":"code","0dff41e6":"markdown","e382af83":"markdown","deaa7b11":"markdown","6d919a8a":"markdown","f93e4b5e":"markdown","5980791f":"markdown"},"source":{"2199c92b":"#Import relevant modules\nimport pandas as pd\nfrom sklearn import tree\nimport numpy as np\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import preprocessing\nfrom sklearn import tree\nimport graphviz\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime","ce337000":"data = pd.read_csv('..\/input\/weatherAUS.csv')\nprint (data.head(10))","b1dcf6fc":"print (data.shape)","25e5b3a5":"#Drop column RISK_MM\ndata = data.drop([\"RISK_MM\"],axis =1)\n\n#transform categorical data to integers.\nle = preprocessing.LabelEncoder()\n#Convert the columns returning errors to strings\ndata['WindGustDir']=data['WindGustDir'].astype(str)\ndata['WindDir9am']=data['WindDir9am'].astype(str)\ndata['WindDir3pm']=data['WindDir3pm'].astype(str)\ndata['RainToday']=data['RainToday'].astype(str)\ndata['RainTomorrow'] = data['RainTomorrow'].replace({\"No\":0, \"Yes\":1})\n\n#Transform the other columns while leaving the date column the same\ndata.loc[:,'Location':'RainToday'] = data.loc[:,'Location':'RainToday'].apply(le.fit_transform)\ntransf_data = data\n#test = test.apply(le.fit_transform)\nprint (transf_data.head())","3a88d7d4":"#Group data by Date and Location and aggregate the other columns accordingly\ntransf_data = (transf_data.groupby(['Date']).agg({'MinTemp':'mean', 'MaxTemp': 'mean','Rainfall': 'mean','Evaporation': 'mean','Sunshine': 'mean','WindGustDir': 'mean','WindGustSpeed': 'mean','WindDir9am': 'mean','WindDir3pm': 'mean',\n                                              'WindSpeed9am': 'mean','WindSpeed3pm': 'mean','Humidity9am': 'mean','Humidity3pm': 'mean','Pressure9am': 'mean','Pressure3pm': 'mean','Cloud9am': 'mean','Cloud3pm': 'mean',\n                                                'Temp9am': 'mean','Temp3pm': 'mean','RainToday': lambda x: x.mode()[0],'RainTomorrow': lambda x: x.mode()[0]}))\nprint (transf_data.head())","c680fc86":"#Separate the label\/class from the features\nfeatures = transf_data.drop(['RainTomorrow'], axis =1)\nlabel = transf_data['RainTomorrow']\n#split the data into training and testing components\nfeatures_train, features_test, label_train, label_test = train_test_split(\nfeatures, label, test_size=0.33, random_state=42)\nprint (features_test.head())","01dd11d5":" #Set up the Adaboost Classifier model\nabc = AdaBoostClassifier(base_estimator=None, n_estimators=300, learning_rate=1.0,  random_state=None)\nabc = abc.fit(features_train,label_train)\naccuracy = abc.score(features_test, label_test)\nmse = mean_squared_error(label_test, abc.predict(features_test)) \nprint ('The accuracy level is', accuracy.round(2))\nprint ('The mean square error is', mse.round(2))","a4e4f34e":"#Extract current day features\ncurrent_feat = features[-1:]\npredict = abc.predict(current_feat)\nprint (\"Will it rain in any part of Australia tomorrow?\")\nif predict == 0:\n    print ('No')\nelse:\n    print ('Yes')","0dff41e6":"**Download and explore data**","e382af83":"**Predict if it will rain next day**","deaa7b11":"**Next Day Rain Prediction Using Australian Data-Benjamin Umeh**","6d919a8a":"**Preprocess data**","f93e4b5e":"**Train an AdaBoost Classification Model on the Data**","5980791f":"Import Relevant Libraries"}}