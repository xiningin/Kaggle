{"cell_type":{"7987aefe":"code","053d5ec0":"code","7eccc247":"code","88fad35a":"code","5eb2817b":"code","b4a5eb11":"code","0a0c9f6b":"code","2cb9ccc0":"code","f1afc603":"code","70c7fd63":"code","77a4fb23":"code","7816aaa2":"code","4b265d17":"code","c55d1cfe":"code","0abbcc77":"code","552d9f51":"code","db14d873":"code","a972af48":"code","1e926460":"code","34317918":"code","9886e8f4":"code","bd6ee16b":"code","6c8cde18":"code","052c8326":"code","ba6b8481":"code","e0568e43":"code","9b641d34":"code","1fb3bcf3":"code","2857fc30":"markdown","d41d3b9e":"markdown","f21bd424":"markdown","636f46d0":"markdown","b432513e":"markdown","cb5f23d7":"markdown","5726f6df":"markdown","b76ca8ac":"markdown","645075d0":"markdown","999bef1e":"markdown","d2848d0f":"markdown","690e66e5":"markdown","6b09de75":"markdown","316072a2":"markdown","a1d118c9":"markdown","a7b0591b":"markdown","4d67cada":"markdown","6ab8ebe7":"markdown","91e9744c":"markdown","c78ada59":"markdown","b0be912c":"markdown"},"source":{"7987aefe":"%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsal = pd.read_csv(\"..\/input\/Salaries.csv\")\n\nsal.head()","053d5ec0":"sal.dtypes","7eccc247":"sal['Year'].value_counts()","88fad35a":"sal['Notes'].value_counts()","5eb2817b":"sal['Agency'].value_counts()","b4a5eb11":"sal['Status'].value_counts()","0a0c9f6b":"sal = sal.drop([148646, 148650 , 148651 , 148652])  ## All rows which contain 'NOT Provided' will be droped ","2cb9ccc0":"sal = sal.drop(columns = ['Notes'])","f1afc603":"sal['Benefits'] = sal['Benefits'].fillna(0)  ","70c7fd63":"## JTTO = Job Title Transit Operator\n\nJTTO = sal.loc[sal['JobTitle'] == 'Transit Operator']\n\n## Total no. FT status for transit operator\n\nStatus_FT = JTTO.loc[JTTO['Status'] == 'FT']\n\n## Mean value of Base Pay associated with FT \nMean_FT= Status_FT['BasePay'].astype('Float64').mean()\nprint(\"Mean_of_FT=\", Mean_FT)\n\n## Total no. NaN status for transit operator\nStatus_NaN = JTTO[JTTO['Status'].isna()]\n\n## Variable a contains basepay associated with NaN Status \na = Status_NaN['BasePay'].astype('Float64')\n\n## Variable b contain NaN Status\nb = Status_NaN['Status']\n","77a4fb23":"for i in range(0, len(a.index)):\n    \n    if (a.iloc[i] > Mean_FT):\n        b.iloc[i] = 'FT'\n    else:\n        b.iloc[i] = 'PT'","7816aaa2":"New_df= pd.DataFrame(Status_NaN['Status'])\n\nJTTO.update(New_df)","4b265d17":"JTTO['Status'].value_counts()","c55d1cfe":"JTTO.head()","0abbcc77":"data_FT = JTTO[JTTO['Status'] == 'FT']\ndata_PT = JTTO[JTTO['Status'] == 'PT']\n\nfig = plt.figure(figsize=(8, 8))\nax = sns.kdeplot(data_PT['TotalPayBenefits'], color = 'Orange', label='Part Time Employees', shade=True)\nax = sns.kdeplot(data_FT['TotalPayBenefits'], color = 'Green', label='Full Time Employees', shade=True)\nplt.yticks([])\n\nplt.title('Part Time Employees vs. Full Time Employees')\nplt.ylabel('Density of Employees')\nplt.xlabel('Total Pay + Benefits ($)')\nplt.xlim(0, 200000)\nplt.show()","552d9f51":"ax = plt.scatter(JTTO['BasePay'], JTTO['Benefits'])\nplt.ylabel('Benefits')\nplt.xlabel('BasePay')","db14d873":"def fill_status(X):\n    Status_FT = sal.loc[sal['Status'] == 'FT']\n    Mean_FT= Status_FT['BasePay'].astype('Float64').mean()              ## Mean value of Base Pay associated with FT\n    print(\"Mean_of_FT=\", Mean_FT)\n    Status_NaN = sal[sal['Status'].isna()]                                ## NaN status\n    a = Status_NaN['BasePay'].astype('Float64')                         ## Variable a contains basepay associated with NaN Status \n    b = Status_NaN['Status']                                            ## Variable b contain NaN Status\n    for i in range(0, len(a.index)):\n        if (a.iloc[i] > Mean_FT):\n            b.iloc[i] = 'FT'\n        else:\n            b.iloc[i] = 'PT'","a972af48":"JobTitle = sal.groupby('JobTitle')       ## Group by job title ","1e926460":"TotalPayMean = JobTitle.mean()['TotalPay']  ## take a mean of grouped job titles for TotalPay columns\nTotalPayMean.head()","34317918":"NaN_Status = sal[sal['Status'].isna()]      ## Get a NaN status by isna() method\nNaN_Status['Status']","9886e8f4":"def fill_status(X):\n    job_title = X[2]                             ## X[2] is index column 2 which is job title\n    totle_Pay = X[7]                             ## X[7] is index column 7 which is Total Pay\n    mean = TotalPayMean[job_title]               ## mean of perticular job title (mean will change as job title changes)\n    \n    if (totle_Pay > mean):                       ## Value in total pay is being comparing with mean value of perticular job title\n        return \"FT\"                              ## if greater it will retuns FT in Status column\n    else:\n        return \"PT\"\n    \nNaN_Status.iloc[:110531,-1] = NaN_Status.iloc[:110531,].apply(fill_status, axis = 1)     ## 110531 is the lenght, -1 is last column\n                                                                                         ## here we pass a function fill_status","bd6ee16b":"NaN_Status['Status']","6c8cde18":"new_df = pd.DataFrame(NaN_Status['Status'])","052c8326":"sal.update(new_df )\nsal['Status'].value_counts()","ba6b8481":"sal","e0568e43":"data_FT = sal[sal['Status'] == 'FT']\ndata_PT = sal[sal['Status'] == 'PT']\n\nfig = plt.figure(figsize=(8, 8))\nax = sns.kdeplot(data_PT['TotalPayBenefits'], color = 'Orange', label='Part Time Employees', shade=True)\nax = sns.kdeplot(data_FT['TotalPayBenefits'], color = 'Green', label='Full Time Employees', shade=True)\nplt.yticks([])\n\nplt.title('Part Time Employees vs. Full Time Employees')\nplt.ylabel('Density of Employees')\nplt.xlabel('Total Pay + Benefits ($)')\nplt.xlim(0, 600000)\nplt.show()","9b641d34":"sal.corr()","1fb3bcf3":"ax = plt.scatter(sal['TotalPay'], sal['TotalPayBenefits'])\nplt.ylabel('TotalPayBenefits')\nplt.xlabel('TotalPay')\nplt.show()","2857fc30":"## Let's take a look at other columns using 'value_counts()' method-","d41d3b9e":"## Libraries Import -","f21bd424":"# For All Job Titles: \n\n## Method:1 = using for loop","636f46d0":"# Salaries_Data_Analysis","b432513e":" This method is very time consuming. Let's do it by other method \n \n ## Method 2 ","cb5f23d7":"## Before to do anything with dataframe, simply explore the data a bit. Lets, have a look at the datatypes of each columns-","5726f6df":"##  We can visualize relationship between BasePay and Benefits column using a scatter plot.","b76ca8ac":"### Lastly, let's drop the Notes columns as it does not provide any information.","645075d0":"### Create a New Dataframe called New_df which has updated NaN_Status.\n### Lastly, update a JTTO column ","999bef1e":"### Not everyone will recieve benefits for their job, so it makes more sense to fill in the null values for Benefits with zeroes.","d2848d0f":"# Now, Task is to fill up the NaN in Status column by PT and FT appropriately.\n\n## Lets consider, Job Title = Transit Operator. ","690e66e5":"From the scatter plot above it observes that Total Pay is possitively correlated with total pay benefits.(Fair enough employess total pay benefits are based on percentage of Total Pay). ","6b09de75":" ## Full Time Employee vs Part Time Employee for all Job Titles","316072a2":"We can see that total pay and totalpaybenefits columns are nearly correlated that we can visualize over scatter plot.","a1d118c9":" Lets check NaN_Status are filled --","a7b0591b":"Now need to update existed dataframe of sal with new data frame which has filled NaN_Status ","4d67cada":"Base pay and benefits are positively corelated, because an employee's benefits is based on a percentage of their base pay ","6ab8ebe7":"Lets check correlation of sal dataframe","91e9744c":"## Dealing with non numeric value\n\n### Dropping down the rows which has no information. drop by index method is used","c78ada59":"# Data Visualization\n\n## Full Time vs Part Time employee","b0be912c":"##  len(a.index) = it will show a length of a's Index ('a' contains data of basepay associated with NaN Status) and ('b' contain NaN Status) \n## here for instance, if 0th location of 'a' is greater than mean of basepay for FT then 0th location of 'b' will be filled by FT else PT\n"}}