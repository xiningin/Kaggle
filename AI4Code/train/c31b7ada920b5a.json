{"cell_type":{"849c6084":"code","ba54a895":"code","d5ef895f":"code","536ee953":"code","4745f602":"code","42610865":"code","824d601d":"code","acccc5b1":"code","667a0d37":"code","871f81f2":"code","1575e7ce":"code","5becfff5":"code","da605132":"code","2ed7a273":"code","3c3afa0e":"code","489048fc":"code","9f688414":"code","82984316":"code","41c4e30b":"code","2c0a39ba":"code","d12059aa":"code","a44c7786":"code","9c67cbe2":"markdown","6697b05e":"markdown","73ab0045":"markdown","b8dfdd00":"markdown","0d174240":"markdown","7ddc6ac9":"markdown","83dc4000":"markdown"},"source":{"849c6084":"#Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#Importing the String module\nimport string\nfrom nltk import FreqDist\nfrom nltk.corpus import stopwords","ba54a895":"#To ignore warning messages\nimport warnings\nwarnings.filterwarnings('ignore')","d5ef895f":"#To display the full text column instead of truncating one\npd.set_option('display.max_colwidth', -1)","536ee953":"#Reading the train file\ndf = pd.read_csv(\"\/kaggle\/input\/spooky-author-identification\/train.zip\")","4745f602":"#Head of the dataframe\ndf.head()","42610865":"#Dimension of the dataframe\ndf.shape","824d601d":"#Python provides a constant called string.punctuation that provides a great list of punctuation characters. \nprint(string.punctuation)","acccc5b1":"def remove_punctuations(input_col):\n    \"\"\"To remove all the punctuations present in the text.Input the text column\"\"\"\n    table = str.maketrans('','',string.punctuation)\n    return input_col.translate(table)","667a0d37":"#Applying the remove_punctuation function\ndf['text'] = df['text'].apply(remove_punctuations)","871f81f2":"def build_corpus(text_col):\n    \"\"\"To build a text corpus by stitching all the records together.Input the text column\"\"\"\n    corpus = \"\"\n    for sent in text_col:\n        corpus += sent\n    return corpus","1575e7ce":"#Building the corpus\ncorpus = build_corpus(df['text'])","5becfff5":"#Converting all the words into lowercase\ncorpus = corpus.lower()","da605132":"#Some part of the Text Corpus\ncorpus[:1000]","2ed7a273":"#Splitting the entire corpus\ncorpus = corpus.split()","3c3afa0e":"#Observing the first few words\nprint(corpus[:50])","489048fc":"def plot_word_frequency(words,top_n=10):\n    \"\"\"Function to plot the word frequencies\"\"\"\n    word_freq = FreqDist(words)\n    labels = [element[0] for element in word_freq.most_common(top_n)]\n    counts = [element[1] for element in word_freq.most_common(top_n)]\n    plt.figure(figsize=(15,5))\n    plt.title(\"Most Frequent Words in the Corpus - Including STOPWORDS\")\n    plt.ylabel(\"Count\")\n    plt.xlabel(\"Word\")\n    plot = sns.barplot(labels,counts)\n    return plot","9f688414":"plot_word_frequency(corpus,20)","82984316":"corpus_without_stop = [word for word in corpus if word not in stopwords.words(\"english\")]","41c4e30b":"plot_word_frequency(corpus_without_stop,20)","2c0a39ba":"#Creating a FreqDist object\nfd=FreqDist()","d12059aa":"#Creating ranks and frequencies\nranks = []\nfreqs = []\nfor i in corpus:\n    fd[i] +=1\nfor rank,word in enumerate(fd):\n    ranks.append(rank+1)\n    freqs.append(fd[word])","a44c7786":"#Plotting the distribution\nplt.figure(figsize=(20,7))\nplt.loglog(freqs,ranks)\nplt.xlabel('Rank')\nplt.ylabel('Frequency')\nplt.title(\"Zipf's Distribution\")\nplt.show()","9c67cbe2":"## ZIPF'S LAW VALIDATION BY PLOTTING WORD FREQUENCY <BR>\n<font color=red>Word Frequency distribution can be considered as one of the basic statistical analysis that can be done on text data.<BR>\nZipf's Law is a discrete probability distribution for the frequency of the words in the corpus or in other terms probability of encountering a word in the corpus. Ranking is done in such a way that, rank 1 is given to the most frequent word, rank 2 to the next frequent, and so on. This also indicates that Zipf's law follows power-law distribution. <\/font>\n![ZIPF's%20law.PNG](attachment:ZIPF's%20law.PNG)    \n    \nAs you an see from the plot above, the Language Builder words (For Example: is,an,the) or words that can be called as STOPWORDS would be the most frequent words in your dataset and the least significant words, since they do not add any useful information.\n<HR>\nIn this notebook we can validate Zipf's law, whether it holds true with our corpus by plotting the word frequencies.\n    <\/hr>","6697b05e":"### LOG-LOG PLOT for Frequency vs Rank","73ab0045":"From the first few columns, we can see that there are many punctuations present in the text data like `Comma` which we will clean before creating the text corpus, so that it wont impact the final words.","b8dfdd00":"We can now see the most frequent words of the corpus after removing stopwords.These are just 20 most frquent words, but there are many others too and these words would be the words with most significance in our corpus and which lies in the middle range of the Zip's Law distribution. ","0d174240":"If you skim through the Corpus, you can find that we are having a clean text corpus as of now. We will go ahead and create a word list now.","7ddc6ac9":"There are 19579 excerpts in our train set.","83dc4000":"You can find that, most of the words present over here in the top occuring list are STOPWORDS and the most frequenct word here is `the` and that is obvious. <br>\nThis is in line with what we were expecting - The most frequent words in the corpus are Language Builders.\nWe can remove the stopwords and try plotting again to find out the most occuring words in the corpus"}}