{"cell_type":{"85896321":"code","596e2017":"code","0640c355":"code","1251ec0e":"code","1190136f":"code","1823933a":"code","79e83cc3":"code","98f291d7":"code","9c2c79cc":"code","54ea2dbc":"code","3753fe21":"code","584bb91e":"code","c9a456c9":"code","85e1fa5e":"code","e65e95ad":"code","9e630f5d":"code","4ea3b0c8":"code","268cf9a1":"code","eba181c2":"code","392f63ea":"code","3e398012":"code","f3097a19":"code","f1687ad5":"code","1cd251bd":"code","e32ea3e2":"code","d75e86f9":"code","82935071":"code","d6b0d495":"code","b6848332":"code","0e85c453":"code","143b199d":"code","da6d30bd":"code","ead5c94c":"code","1cf6ed94":"code","04ab0502":"code","e04dc390":"code","e7cb80b9":"code","4a5f8c38":"code","4478ea72":"code","d7f4d7a0":"code","0ff6182d":"code","964a71d4":"code","f44dbbc8":"code","5bad2ccd":"code","4ecf460f":"code","a393d611":"code","783c502d":"markdown","84dedfca":"markdown","87c01440":"markdown","7d774e2c":"markdown","1c73c151":"markdown","7c7fb988":"markdown","b60594eb":"markdown","e40b82aa":"markdown","18b8212e":"markdown","87cdaafb":"markdown","f949b855":"markdown","63c02f9f":"markdown","e192e7e3":"markdown","35c514c4":"markdown","6ecce93d":"markdown","f9ceecd0":"markdown","507bc305":"markdown","8f617365":"markdown","cf0d945d":"markdown","e7b27e13":"markdown","298a2919":"markdown","7b2c2ebb":"markdown","5e05e241":"markdown","24ce9c73":"markdown","7bdac7d5":"markdown","d2d70a8d":"markdown","6c87a200":"markdown","f92c13f5":"markdown","f26f66ab":"markdown","fb6f767b":"markdown","19975c98":"markdown","a1eb9956":"markdown"},"source":{"85896321":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nfrom scipy import stats\n\n# seaborn \ub77c\uc774\ube0c\ub7ec\ub9ac \uc138\ud305\nplt.style.use('ggplot')    # matplot \uae30\ubcf8 \uadf8\ub9bc \ub9d0\uace0 \uaca9\uc790\ub85c \uc22b\uc790 \ubc94\uc704\uac00 \ub208\uc5d0 \uc798 \ub6f0\ub3c4\ub85d ggplot\uc2a4\ud0c0\uc77c \uc0ac\uc6a9\nsns.set(font_scale=2.5)    # \ud3f0\ud2b8 \uc0ac\uc774\uc988 2.5\ub85c \uace0\uc815\n\n# null \ub370\uc774\ud130\ub97c \uc2dc\uac01\ud654\ud558\uc5ec \ubcf4\uc5ec\uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport missingno as msno   \n\n# \uc624\ub958 \ubb34\uc2dc\ud558\ub294 \ucf54\ub4dc \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# matplot \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9\ud574 \uc2dc\uac01\ud654\ud55c \ub4a4 show\ud588\uc744 \ub54c \uc0c8\ub85c\uc6b4 \ucc3d\uc774 \uc544\ub2cc \ub178\ud2b8\ubd81\uc5d0\uc11c \ubc14\ub85c \ud655\uc778 \uac00\ub2a5\ud558\ub3c4\ub85d\n%matplotlib inline\n\n# \uadf8\ub798\ud504\uc5d0\uc11c \ub9c8\uc774\ub108\uc2a4 \ud3f0\ud2b8 \uae68\uc9c0\ub294 \ubb38\uc81c\uc5d0 \ub300\ud55c \ub300\ucc98\nmpl.rcParams['axes.unicode_minus'] = False","596e2017":"train = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv',parse_dates=['datetime'])\ntest = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv',parse_dates=['datetime'])","0640c355":"copy_train = train.copy()\ncopy_test = test.copy()","1251ec0e":"copy_train.head()\n# windspeed\ub294 \ub300\ubd80\ubd84\uc774 0\uc73c\ub85c \ub418\uc5b4\uc788\ub294\ub370 \uc774\ub294 \ub370\uc774\ud130\uac00 \uc5c6\ub294 \ubd80\ubd84\uc744 0\uc73c\ub85c \ucc44\uc6b4 \uac83 \uac19\uc74c -> \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \ud544\uc694","1190136f":"copy_train.shape","1823933a":"copy_train.info()","79e83cc3":"copy_train.isnull().sum()","98f291d7":"copy_train['year']=copy_train['datetime'].dt.year\ncopy_train['month']=copy_train['datetime'].dt.month\ncopy_train['day']=copy_train['datetime'].dt.day\ncopy_train['hour']=copy_train['datetime'].dt.hour\ncopy_train['minute']=copy_train['datetime'].dt.minute\ncopy_train['second']=copy_train['datetime'].dt.second","9c2c79cc":"copy_test['year']=copy_test['datetime'].dt.year\ncopy_test['month']=copy_test['datetime'].dt.month\ncopy_test['day']=copy_test['datetime'].dt.day\ncopy_test['hour']=copy_test['datetime'].dt.hour\ncopy_test['minute']=copy_test['datetime'].dt.minute\ncopy_test['second']=copy_test['datetime'].dt.second","54ea2dbc":"copy_train.head()","3753fe21":"copy_test.head()","584bb91e":"# (ax1,ax2,ax3), (ax4,ax5,ax6)\ub85c alias \uc9c0\uc815\ud558\uc5ec \uc2dc\uac01\ud654\nfigure, ((ax1,ax2,ax3), (ax4,ax5,ax6)) = plt.subplots(nrows=2, ncols=3)\nfigure.set_size_inches(18,8)\n\nsns.barplot(data=copy_train, x=\"year\", y=\"count\", ax=ax1)\nsns.barplot(data=copy_train, x=\"month\", y=\"count\", ax=ax2)\nsns.barplot(data=copy_train, x=\"day\", y=\"count\", ax=ax3)\nsns.barplot(data=copy_train, x=\"hour\", y=\"count\", ax=ax4)\nsns.barplot(data=copy_train, x=\"minute\", y=\"count\", ax=ax5)\nsns.barplot(data=copy_train, x=\"second\", y=\"count\", ax=ax6)\n\nax1.set(ylabel='Count',title=\"\uc5f0\ub3c4\ubcc4 \ub300\uc5ec\ub7c9\")\nax2.set(xlabel='month',title=\"\uc6d4\ubcc4 \ub300\uc5ec\ub7c9\")\nax3.set(xlabel='day', title=\"\uc77c\ubcc4 \ub300\uc5ec\ub7c9\")\nax4.set(xlabel='hour', title=\"\uc2dc\uac04\ubcc4 \ub300\uc5ec\ub7c9\")\n\n# \uc5f0\ub3c4\ubcc4 \ub300\uc5ec\ub7c9\uc740 2011\ub144 \ubcf4\ub2e4 2012\ub144\uc774 \ub354 \ub9ce\uc74c\n# \uc6d4\ubcc4 \ub300\uc5ec\ub7c9\uc740 6\uc6d4\uc5d0 \uac00\uc7a5 \ub9ce\uace0 7~10\uc6d4\ub3c4 \ub300\uc5ec\ub7c9\uc774 \ub9ce\uc74c. \uadf8\ub9ac\uace0 1\uc6d4\uc5d0 \uac00\uc7a5 \uc801\uc74c\n# \uc77c\ubcc4 \ub300\uc5ec\ub7c9\uc740 1\uc77c\ubd80\ud130 19\uc77c\uae4c\uc9c0\ub9cc \uc788\uace0 \ub098\uba38\uc9c0 \ub0a0\uc9dc\ub294 test.csv\uc5d0 \uc788\uc74c. \uadf8\ub798\uc11c \uc774 \ub370\uc774\ud130\ub294 \ud53c\ucc98\ub85c \uc0ac\uc6a9\ud558\uba74 \uc548\ub428\n# \uc2dc\uac04\ubcc4 \ub300\uc5ec\ub7c9\uc744 \ubcf4\uba74 \ucd9c\ud1f4\uadfc \uc2dc\uac04\uc5d0 \ub300\uc5ec\ub7c9\uc774 \ub9ce\uc740 \uac83 \uac19\uc74c. \ud558\uc9c0\ub9cc \uc8fc\ub9d0\uacfc \ub098\ub204\uc5b4 \ubcfc \ud544\uc694\uac00 \uc788\uc74c\n# \ubd84, \ucd08\ub3c4 \ub2e4 0\uc774\uae30 \ub54c\ubb38\uc5d0 \uc758\ubbf8\uac00 \uc5c6\uc74c","c9a456c9":"fig, axes = plt.subplots(nrows=2,ncols=2)\nfig.set_size_inches(12, 10)\n\nsns.boxplot(data=copy_train,y=\"count\",orient=\"v\",ax=axes[0][0])\nsns.boxplot(data=copy_train,y=\"count\",x=\"season\",orient=\"v\",ax=axes[0][1])\nsns.boxplot(data=copy_train,y=\"count\",x=\"hour\",orient=\"v\",ax=axes[1][0])\nsns.boxplot(data=copy_train,y=\"count\",x=\"workingday\",orient=\"v\",ax=axes[1][1])\n\naxes[0][0].set(ylabel='Count',title=\"\ub300\uc5ec\ub7c9\")\naxes[0][1].set(xlabel='Season', ylabel='Count',title=\"\uacc4\uc808\ubcc4 \ub300\uc5ec\ub7c9\")\naxes[1][0].set(xlabel='Hour Of The Day', ylabel='Count',title=\"\uc2dc\uac04\ubcc4 \ub300\uc5ec\ub7c9\")\naxes[1][1].set(xlabel='Working Day', ylabel='Count',title=\"\uadfc\ubb34\uc77c \uc5ec\ubd80\uc5d0 \ub530\ub978 \ub300\uc5ec\ub7c9\")\n\n# \ub300\uc5ec\ub7c9\ub9cc \ubcf4\uba74 \ud2b9\uc815 \uad6c\uac04\uc5d0 \ubab0\ub824\uc788\uc74c\n# \uacc4\uc808\ubcc4 \ub300\uc5ec\ub7c9\uc744 \ubcf4\uba74 \ubd04\uc774 \uac00\uc7a5 \uc801\uace0, \uc5ec\ub984\uacfc \uac00\uc744\uc774 \uac00\uc7a5 \ub9ce\uc74c\n# \uc2dc\uac04\ubcc4 \ub300\uc5ec\ub7c9\uc740 \uc704\uc5d0\uc11c \uadf8\ub9b0 \ub0b4\uc6a9\uacfc \uac19\uc74c\n# \uadfc\ubb34\uc77c \uc5ec\ubd80\uc5d0 \ub530\ub978 \ud070 \ucc28\uc774\ub294 \uc5c6\uc74c","85e1fa5e":"copy_train[\"dayofweek\"] = copy_train[\"datetime\"].dt.dayofweek","e65e95ad":"copy_test[\"dayofweek\"] = copy_test[\"datetime\"].dt.dayofweek","9e630f5d":"copy_train[\"dayofweek\"].value_counts()\n# \uc694\uc77c\uc740 0~6\uae4c\uc9c0 \uace8\uace0\ub8e8 \ubd84\ud3ec\ud568\uc744 \uc54c \uc218 \uc788\uc74c","4ea3b0c8":"fig,(ax1,ax2,ax3,ax4,ax5)= plt.subplots(nrows=5)\nfig.set_size_inches(18,25)\n\nsns.pointplot(data=copy_train, x=\"hour\", y=\"count\", ax=ax1)   # \ucd9c\ud1f4\uadfc\uc2dc\uac04\uc5d0 \ub9ce\uc774 \ub300\uc5ec\ud568\nsns.pointplot(data=copy_train, x=\"hour\", y=\"count\", hue=\"workingday\", ax=ax2)  # workingday\ub85c \uad6c\ubd84\ud574\uc11c \ubcf4\uba74 \ucd9c\ud1f4\uadfc\uc2dc\uac04 \ubfd0\ub9cc \uc544\ub2c8\ub77c \ud734\uc77c\uc5d0\ub294 \uc810\uc2ec,\uc624\ud6c4\uc5d0\ub3c4 \ub9ce\uc774 \ub300\uc5ec \nsns.pointplot(data=copy_train, x=\"hour\", y=\"count\", hue=\"dayofweek\", ax=ax3)   # 5,6\uc778 \ud1a0,\uc77c\uc758 \ub300\uc5ec\uac00 \ub9ce\uc74c\nsns.pointplot(data=copy_train, x=\"hour\", y=\"count\", hue=\"weather\", ax=ax4)     # \ub0a0\uc528\uc88b\uc744 \ub54c \ub9ce\uc774 \ube4c\ub9bc\nsns.pointplot(data=copy_train, x=\"hour\", y=\"count\", hue=\"season\", ax=ax5)      # \ubd04\uc5d0 \uac00\uc7a5 \uc801\uac8c \ube4c\ub9bc","268cf9a1":"corrMatt = copy_train[[\"temp\", \"atemp\", \"casual\", \"registered\", \"humidity\", \"windspeed\", \"count\"]]\ncorrMatt = corrMatt.corr()\nprint(corrMatt)\n\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False","eba181c2":"fig, ax = plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(corrMatt, mask=mask,vmax=.8, square=True,annot=True)\n\n# \uc628\ub3c4, \uc2b5\ub3c4, \ud48d\uc18d\uc740 \uac70\uc758 \uc5f0\uad00\uad00\uacc4\uac00 \uc5c6\uc74c\n# \ub300\uc5ec\ub7c9\uacfc \uac00\uc7a5 \uc5f0\uad00\uc774 \ub192\uc740 \uac74 \ub4f1\ub85d\ub41c \uc0ac\uc6a9\uc790 registered, \ud48d\uc18d\uacfc \uc5f0\uad00\uc774 \ub192\uc740 \uac74 \ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \uc0ac\uc6a9\uc790 casual\uc774\uc9c0\ub9cc test\ub370\uc774\ud130\uc5d0\ub294 \ub450 \uce7c\ub7fc\uc774 \ud53c\ucc98\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc74c\n# atemp\uc640 temp\ub294 \uccb4\uac10\uc628\ub3c4\uc640 \uc628\ub3c4\ub85c 0.98\ub85c \uc0c1\uad00\uad00\uacc4\uac00 \ub108\ubb34 \ub192\uc544 \ud53c\ucc98\ub85c \uc0ac\uc6a9\ud558\uae30\uc5d0 \uc801\ud569\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\uc74c -> \ud68c\uadc0 \uacc4\uc218\ub294 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc73c\uba74 \ubd84\uc0b0\uc774 \ucee4\uc838 \uc624\ub958\uc5d0 \ubbfc\uac10(\ub2e4\uc911\uacf5\uc120\uc131)","392f63ea":"fig,(ax1,ax2,ax3) = plt.subplots(ncols=3)\nfig.set_size_inches(12, 5)\n\nsns.regplot(x=\"temp\", y=\"count\", data=copy_train,ax=ax1)\nsns.regplot(x=\"windspeed\", y=\"count\", data=copy_train,ax=ax2)\nsns.regplot(x=\"humidity\", y=\"count\", data=copy_train,ax=ax3)\n\n# \ud48d\uc18d\uc758 \uacbd\uc6b0 0\uc5d0 \uc22b\uc790\uac00 \ub9ce\uc774 \ubab0\ub824 \uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc784. \uc544\ub9c8\ub3c4 \uad00\uce21\ub418\uc9c0 \uc54a\uc740 \uc218\uce58\uc5d0 \ub300\ud574 0\uc73c\ub85c \uae30\ub85d\ud55c \uac83 \uac19\uc74c\n# \uc2b5\ub3c4\ub3c4 0\uacfc 100\uc5d0 \ubab0\ub824\uc788\uc74c","3e398012":"fig, axes = plt.subplots(nrows=2)\nfig.set_size_inches(18,10)\n\n# train\nplt.sca(axes[0])\nplt.xticks(rotation=30, ha='right')\naxes[0].set(ylabel='Count',title=\"train windspeed\")\nsns.countplot(data=copy_train, x=\"windspeed\", ax=axes[0])\n\n# test\nplt.sca(axes[1])\nplt.xticks(rotation=30, ha='right')\naxes[1].set(ylabel='Count',title=\"test windspeed\")\nsns.countplot(data=copy_test, x=\"windspeed\", ax=axes[1])","f3097a19":"copy_train.loc[copy_train[\"windspeed\"] == 0, \"windspeed\"] = copy_train[\"windspeed\"].mean()\ncopy_test.loc[copy_test[\"windspeed\"] == 0, \"windspeed\"] = copy_test[\"windspeed\"].mean()","f1687ad5":"fig, axes = plt.subplots(nrows=2)\nfig.set_size_inches(18,10)\n\n# train\nplt.sca(axes[0])\nplt.xticks(rotation=30, ha='right')\naxes[0].set(ylabel='Count',title=\"train windspeed\")\nsns.countplot(data=copy_train, x=\"windspeed\", ax=axes[0])\n\n# test\nplt.sca(axes[1])\nplt.xticks(rotation=30, ha='right')\naxes[1].set(ylabel='Count',title=\"test windspeed\")\nsns.countplot(data=copy_test, x=\"windspeed\", ax=axes[1])","1cd251bd":"feature_names = [\"season\", \"weather\", \"temp\", \"atemp\", \"humidity\", \"windspeed\", \"year\", \"hour\", \"dayofweek\", \"holiday\", \"workingday\"]\nfeature_names","e32ea3e2":"copy_train = copy_train[feature_names]\ncopy_test = copy_test[feature_names]","d75e86f9":"copy_train","82935071":"copy_test","d6b0d495":"X = copy_train            # count\uc5c6\ub294 \ud53c\ucc98\ub4e4\nY = train['count']        # count\ub9cc \uc788\ub294 \ud53c\ucc98","b6848332":"X","0e85c453":"Y","143b199d":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, Y, test_size=0.2, random_state=13)","da6d30bd":"from sklearn.metrics import make_scorer\n\ndef rmsle(predicted_values, actual_values, convertExp=True):\n\n    if convertExp:\n        predicted_values = np.exp(predicted_values),\n        actual_values = np.exp(actual_values)\n        \n    # \ub118\ud30c\uc774\ub85c \ubc30\uc5f4 \ud615\ud0dc\ub85c \ubc14\uafd4\uc90c\n    predicted_values = np.array(predicted_values)\n    actual_values = np.array(actual_values)\n    \n    # \uc608\uce21\uac12\uacfc \uc2e4\uc81c \uac12\uc5d0 1\uc744 \ub354\ud558\uace0 \ub85c\uadf8\ub97c \uc50c\uc6cc\uc90c\n    # \uac12\uc774 0\uc77c \uc218\ub3c4 \uc788\uc5b4\uc11c \ub85c\uadf8\ub97c \ucde8\ud588\uc744 \ub54c \ub9c8\uc774\ub108\uc2a4 \ubb34\ud55c\ub300\uac00 \ub420 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 1\uc744 \ub354\ud574 \uc90c\n    # \ub85c\uadf8\ub97c \uc50c\uc6cc\uc8fc\ub294 \uac83\uc740 \uc815\uaddc\ubd84\ud3ec\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uae30 \uc704\ud574\n    log_predict = np.log(predicted_values + 1)\n    log_actual = np.log(actual_values + 1)\n    \n    # \uc704\uc5d0\uc11c \uacc4\uc0b0\ud55c \uc608\uce21\uac12\uc5d0\uc11c \uc2e4\uc81c\uac12\uc744 \ube7c\uc8fc\uace0 \uc81c\uacf1\n    difference = log_predict - log_actual\n    difference = np.square(difference)\n    \n    # \ud3c9\uade0\n    mean_difference = difference.mean()\n    \n    # \ub2e4\uc2dc \ub8e8\ud2b8\ub97c \uc50c\uc6c0\n    score = np.sqrt(mean_difference)\n    \n    return score","ead5c94c":"from sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\nimport warnings\npd.options.mode.chained_assignment = None\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\nlr = LinearRegression()  \n\n# count\uac12\uc758 \ucd5c\uc800 \uac12\uacfc \ucd5c\uace0 \uac12\uc758 \ub099\ud3ed\uc774 \ub108\ubb34 \ucee4\uc11c log\ub97c \ucde8\ud558\uc9c0 \uc54a\uc73c\uba74 inf\ub85c \uacb0\uacfc\uac00 \ub098\uc634\n# np.log1p\ub294 np.log(1+x)\uc640 \ub3d9\uc77c\n# \ub9cc\uc57d \uc5b4\ub5a4 x\uac12\uc774 0\uc778\ub370 \uc774\ub97c log\ud558\uac8c\ub418\uba74 (-)\ubb34\ud55c\ub300\ub85c \uc218\ub834\ud558\uae30 \ub54c\ubb38\uc5d0 np.log1p\ub97c \uc0ac\uc6a9\"\"\"\ny_train_log = np.log1p(y_train)\n\n# \ud559\uc2b5\nlr.fit(X_train, y_train_log)\n\n# \uc608\uce21\nlr_pred = lr.predict(X_train)\n\n# \ud3c9\uac00\n# np.exp: pred\ub85c \ub098\uc628 \uac12\uc740 \uc774\ubbf8 log\ub97c \ud55c \uac12\uc774\ub77c \uc6d0\ub798 \ubaa8\ub378\uc5d0\ub294 log\ub97c \ud558\uc9c0 \uc54a\uc740 \uc6d0\ub798\uc758 \uac12\uc744 \ub123\uae30 \uc704\ud568\nprint (\"RMSLE : \", rmsle(np.exp(y_train_log),np.exp(lr_pred), False))  ","1cf6ed94":"print('\uc808\ud3b8 \uac12:',lr.intercept_) \nprint('\ud68c\uadc0 \uacc4\uc218\uac12:', np.round(lr.coef_, 1)) ","04ab0502":"# lr.coef_\ub294 \ud68c\uadc0 \uacc4\uc218 \uac12\ub9cc \ub098\uc624\ubbc0\ub85c \ud53c\ucc98\ubcc4 \ud68c\uadc0 \uacc4\uc218 \uac12\uc73c\ub85c \ub2e4\uc2dc \ub9e4\ud551\ncoef = pd.Series(data=np.round(lr.coef_, 1), index=X.columns )  # \ub370\uc774\ud130\ub294 \ud68c\uadc0 \uacc4\uc218 \uac12, \uc778\ub371\uc2a4\ub294 X\uc758 \uce7c\ub7fc\uba85\ncoef.sort_values(ascending=False)  # \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c","e04dc390":"ridge = Ridge()\nparameters = {'max_iter':[3000],'alpha':[0.001,0.01,0.1,1,10,100,1000]}\nrmsle_scorer = metrics.make_scorer(rmsle,greater_is_better=False)\ngrid_ridge = GridSearchCV(ridge,parameters,scoring=rmsle_scorer,cv=5)\n\ngrid_ridge.fit(X_train,y_train_log)\npred = grid_ridge.predict(X_train)\nprint(grid_ridge.best_params_)\nprint('RMSLE Value for Ridge Regression {}'.format(rmsle(np.exp(y_train_log),np.exp(pred),False)))","e7cb80b9":"df = pd.DataFrame(grid_ridge.cv_results_)\ndf.head()","4a5f8c38":"lasso = Lasso()\nparameters = {'max_iter':[3000],'alpha':[0.1, 1, 2, 3, 4, 10, 30,100,200,300,400,800,900,1000]}\n\ngrid_lasso = GridSearchCV(lasso,parameters,scoring = rmsle_scorer,cv=5)\ny_train_log = np.log1p(y_train)\ngrid_lasso.fit( X_train , y_train_log )\npred = grid_lasso.predict(X_train)\nprint (grid_lasso.best_params_)\nprint (\"RMSLE : \",rmsle(np.exp(y_train_log),np.exp(pred),False))","4478ea72":"df = pd.DataFrame(grid_lasso.cv_results_)\ndf.head()","d7f4d7a0":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators=100)\n\ny_train_log = np.log1p(y_train)\nrf.fit(X_train, y_train_log)\n\npred = rf.predict(X_train)\nscore = rmsle(np.exp(y_train_log),np.exp(pred),False)\nprint (\"RMSLE Value For Random Forest: \",score)","0ff6182d":"from sklearn.ensemble import GradientBoostingRegressor\ngbm = GradientBoostingRegressor(n_estimators=4000, alpha=0.01);\n\ny_train_log = np.log1p(y_train)\ngbm.fit(X_train, y_train_log)\n\npred = gbm.predict(X_train)\nscore = rmsle(np.exp(y_train_log),np.exp(pred),False)\nprint (\"RMSLE Value For Gradient Boost: \", score)","964a71d4":"submission = pd.read_csv(\"..\/input\/bike-sharing-demand\/sampleSubmission.csv\")\nsubmission","f44dbbc8":"prediction = gbm.predict(copy_test)  # \uc2e4\uc81c \uc608\uce21\nprediction","5bad2ccd":"submission['count'] = np.exp(prediction)  # count\uc5d0 \ub0b4\uac00 \uc2e4\uc81c\ub85c \uc608\uce21\ud55c\uac78 \uc800\uc7a5","4ecf460f":"submission.head()","a393d611":"submission.to_csv('submission.csv', index = False)  # \uce90\uae00 \ucee4\ub110 \uc11c\ubc84\uc5d0 csv\ud30c\uc77c \uc800\uc7a5","783c502d":"## 5. \ubaa8\ub378\ub9c1\uacfc \ud3c9\uac00","84dedfca":"#### dayofweek \ucd94\uac00\ud558\uc5ec \uc2dc\uac04\ub300\ubcc4 \ub300\uc5ec\ub7c9\uc744 4\uac1c \uae30\uc900\uc5d0 \ub530\ub77c \uc2dc\uac01\ud654","87c01440":"## 7. \uacb0\uacfc","7d774e2c":"#### \uc808\ud3b8\uacfc \ud68c\uadc0\uacc4\uc218 \ud655\uc778","1c73c151":"### 5.2 \ub9bf\uc9c0 \ud68c\uadc0\n- \uac00\uc911\uce58(w)\uc758 \ubaa8\ub4e0 \uc6d0\uc18c\uac00 0\uc5d0 \uac00\uae5d\uac8c \ub9cc\ub4e4\uc5b4 \ubaa8\ub4e0 \ud53c\ucc98\uac00 \uc8fc\ub294 \uc601\ud5a5\uc744 \ucd5c\uc18c\ud654(\uae30\uc6b8\uae30\ub97c \uc791\uac8c \ub9cc\ub4e6)\n- \ud68c\uadc0 \uacc4\uc218 \ud06c\uae30\ub97c \uac10\uc18c\uc2dc\ud0a4\uc9c0\ub9cc 0\uc73c\ub85c \ub9cc\ub4e4\uc9c0\ub294 \uc54a\uc74c","7c7fb988":"#### GridSearchCV \ubcc0\ud654\uac12 \ud655\uc778","b60594eb":"## 6. \uc608\uce21 \uacb0\uacfc \uc81c\ucd9c","e40b82aa":"https:\/\/www.youtube.com\/watch?v=Q_MbN-vu_2w&t=2s\uc758 \ucf54\ub4dc\ub97c \ucc38\uace0\ud558\uc5ec \uc791\uc131\ud558\uc600\uc2b5\ub2c8\ub2e4.","18b8212e":"#### \uc628\ub3c4, \ud48d\uc18d, \uc2b5\ub3c4\uc5d0 \ub530\ub978 \uc0b0\uc810\ub3c4","87cdaafb":"#### GridSearchCV \ubcc0\ud654\uac12 \ud655\uc778","f949b855":"#### train\ub370\uc774\ud130\uc640 val\ub370\uc774\ud130 \ub098\ub204\uae30","63c02f9f":"#### \ud48d\uc18d \uc2dc\uac01\ud654\n- widspeed \ud48d\uc18d\uc5d0 0 \uac12\uc774 \uac00\uc7a5 \ub9ce\uc74c \n","e192e7e3":"#### \uac12 \ubcf4\uc815\ud6c4 \uc7ac \uc2dc\uac01\ud654","35c514c4":"\n## count\ub77c\ub294 \ub808\uc774\ube14\uc774 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc9c0\ub3c4\ud559\uc2b5\n## \uc790\uc804\uac70 \ub300\uc5ec\ub7c9\uc744 \uc608\uce21\ud558\ub294 \ubb38\uc81c\uc774\ubbc0\ub85c \ud68c\uadc0","6ecce93d":"#### \uacc4\uc808, \uc2dc\uac04, \uadfc\ubb34\uc77c\ubcc4 \ub300\uc5ec\ub7c9 \uc2dc\uac01\ud654","f9ceecd0":"#### \uc628\ub3c4, \uc2b5\ub3c4, \ud48d\uc18d\ubcc4 \uc0c1\uad00\uad00\uacc4","507bc305":"### Score : 0.38045\n### Top 3%  (112\/3242)","8f617365":"### 5.5 GBM","cf0d945d":"## 3. \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","e7b27e13":"#### RMSLE\n- \uacfc\ub300\ud3c9\uac00 \ub41c \ud56d\ubaa9\ubcf4\ub2e4\ub294 \uacfc\uc18c\ud3c9\uac00 \ub41c \ud56d\ubaa9\uc5d0 \ud398\ub110\ud2f0\ub97c \uc8fc\ub294 \ubc29\uc2dd\n- \uc624\ucc28\ub97c \uc81c\uacf1\ud558\uc5ec \ud3c9\uade0\ud55c \uac12\uc758 \uc81c\uacf1\uadfc\uc73c\ub85c \uac12\uc774 \uc791\uc544\uc9c8 \uc218\ub85d \uc815\ubc00\ub3c4\uac00 \ub192\uc74c\n- 0\uc5d0 \uac00\uae4c\uc6b4 \uac12\uc774 \ub098\uc62c \uc218\ub85d \uc815\ubc00\ub3c4\uac00 \ub192\uc74c","298a2919":"#### GridSearch CV\ub85c \ucd5c\uc801 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \uc801\uc6a9\ud558\uc5ec \ub77c\uc3d8 \ud68c\uadc0 \uc218\ud589","7b2c2ebb":"### 5.4 \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8","5e05e241":"## 1. \ub370\uc774\ud130 \uc14b \ud655\uc778\n","24ce9c73":"### 5.1 \uc120\ud615 \ud68c\uadc0\n- \uc608\uce21\uac12\uacfc \uc2e4\uc81c\uac12\uc758 \ucc28\uc774\ub97c \ucd5c\uc18c\ud654\uc2dc\ud0b4\n- \ub9e4\uac1c\ubcc0\uc218\uac00 \uc5c6\ub294 \uac83\uc774 \uc7a5\uc810\uc774\uc9c0\ub9cc, \ubaa8\ub378\uc758 \ubcf5\uc7a1\ub3c4\ub97c \uc81c\uc5b4\ud560 \uc218 \uc5c6\ub2e4\ub294 \ub2e8\uc810","7bdac7d5":"#### dayofweek \uce7c\ub7fc \ucd94\uac00","d2d70a8d":"## 4. \ud53c\ucc98 \uc120\ud0dd\n- \uc2e0\ud638\uc640 \uc7a1\uc74c\uc744 \uad6c\ubd84\ud574\uc57c \ud568\n- \ud53c\ucc98\uac00 \ub9ce\ub2e4\uace0 \ud574\uc11c \ubb34\uc870\uac74 \uc88b\uc740 \uc131\ub2a5\uc744 \ub0b4\uc9c0 \uc54a\uc74c\n- \ud53c\ucc98\ub97c \ud558\ub098\uc529 \ucd94\uac00\ud558\uace0 \ubcc0\uacbd\ud574 \uac00\uba74\uc11c \uc131\ub2a5\uc774 \uc88b\uc9c0 \uc54a\uc740 \ud53c\ucc98\ub294 \uc81c\uac70\ud558\ub3c4\ub85d \ud568","6c87a200":"#### datetime\uc744 \uc2dc\uac01\ud654\ud558\uc5ec \ubd84\uc11d\ud558\uae30 \uc27d\ub3c4\ub85d \ub098\ub214\n- datatime \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub0a0\uc9dc\uc640 \uc2dc\uac04\uc744 \ud568\uaed8 \uc800\uc7a5\ud558\ub294 \ud074\ub798\uc2a4","f92c13f5":"#### datetime\ubcc4 \ub300\uc5ec\ub7c9 \uc2dc\uac01\ud654","f26f66ab":"### 5.3 \ub77c\uc3d8 \ud68c\uadc0\n- \ubd88\ud544\uc694\ud55c \ud68c\uadc0 \uacc4\uc218\ub97c 0\uc73c\ub85c \ub9cc\ub4e4\uace0 \uc81c\uac70\n- \uc6b0\ub4f1\uc0dd \ud53c\ucc98\ub9cc \ud68c\uadc0\uc5d0 \ud3ec\ud568\uc2dc\ud0b4","fb6f767b":"## 2. \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d\n","19975c98":"#### \ud48d\uc18d\uc774 0\uc778 \ubd80\ubd84\uc744 \ud3c9\uade0\uc73c\ub85c \ucc44\uc6cc\uc90c","a1eb9956":"#### GridSearch CV\ub85c \ucd5c\uc801 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \uc801\uc6a9\ud558\uc5ec \ub9bf\uc9c0 \ud68c\uadc0 \uc218\ud589"}}