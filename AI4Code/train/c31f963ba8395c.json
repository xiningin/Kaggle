{"cell_type":{"ca80032d":"code","3ac98ace":"code","22433354":"code","2c00fea1":"code","2b04505e":"code","8a611df3":"code","f772e803":"code","dcae9bae":"code","cc302f1a":"markdown","2a78f42d":"markdown","3edc01f7":"markdown","5be119a8":"markdown","3dc9e845":"markdown","4507d2ba":"markdown","8d2cba47":"markdown"},"source":{"ca80032d":"## FILE tsp_5opt.py\n\nimport pickle as p\nimport math\nimport random","3ac98ace":"def load_tour(filename):\n    tour = []\n    with open(filename) as stream:\n        for i, line in enumerate(stream.readlines()):\n            if i == 0: continue\n            city = int(line)\n            tour.append(city)\n    assert (tour[0] == 0) and (tour[-1] == 0)\n    return tour\n\ndef load_pickle(filename):\n    with open(filename, \"rb\") as stream:\n        return p.load(stream)\n    \npopmusic = load_pickle('..\/input\/travelingsantainputdata\/popmusic.pickle')\ntour = load_tour('..\/input\/travelingsantainputdata\/tour-1516254.csv')\nprint('LKH output tour & neighbor list successfully imported.')","22433354":"def shuffle(l):\n    l = list(l)\n    random.shuffle(l)\n    return iter(l)\n\nclass World:\n    def __init__(self, filename):\n        cities_x, cities_y, n = World._read_cities(filename)\n        self.cities_x = tuple(cities_x)\n        self.cities_y = tuple(cities_y)\n        self.n = n\n        primes = World._prime_sieve(self.n)\n        self.non_primes = tuple(1 - p for p in primes)\n\n    # Read cities from CSV file\n    @staticmethod\n    def _read_cities(filename):\n        cities_x, cities_y = [], []\n        with open(filename) as s:\n            for i, line in enumerate(s.readlines()):\n                if i == 0: continue\n                _, x, y = line.strip().split(',')\n                cities_x.append(float(x))\n                cities_y.append(float(y))\n        assert len(cities_x) == i and len(cities_y) == i\n        return cities_x, cities_y, i\n\n    # Sieve of Eratosthenes\n    @staticmethod\n    def _prime_sieve(n):\n        assert n >= 2\n        primes = [False, False] + [True] * (n - 2)\n        for i in range(2, n):\n            if primes[i]:\n                for j in range(2 * i, n, i):\n                    primes[j] = False\n        return primes\n\n    # Slow score, for reference only!\n    def score(self, tour, percent=0.1):\n        distances = []\n        for i in range(1, len(tour)):\n            x = self.cities_x[tour[i]] - self.cities_x[tour[i-1]]\n            y = self.cities_y[tour[i]] - self.cities_y[tour[i-1]]\n            distances.append(math.sqrt((x * x) + (y * y)))\n        penalties = []\n        for i in range(9, len(distances), 10):\n            penalties.append(self.non_primes[tour[i]] * distances[i])\n        return sum(distances) + percent * sum(penalties)\n\nclass Tour:\n    # Read CSV submission\n    @staticmethod\n    def load_csv(filename):\n        tour = []\n        with open(filename) as stream:\n            for i, line in enumerate(stream.readlines()):\n                if i == 0: continue\n                city = int(line)\n                tour.append(city)\n        assert (tour[0] == 0) and (tour[-1] == 0)\n        return tour\n\n    # Write CSV submission\n    @staticmethod\n    def save_csv(tour, filename):\n        with open(filename, \"w\") as s:\n            s.write(\"Path\\n\")\n            for city in tour:\n                s.write(\"%d\\n\" % city)\n\nclass Builder:\n    def noop(self):\n        self.add_forward(0, -1)\n        return self\n\n    def forward_2opt(self, a, b):\n        self.add_forward(0, a)\n        self.add_backward(a + 1, b)\n        self.add_forward(b + 1, -1)\n        return self\n\n    def forward_3opt(self, a, b, c):\n        self.add_forward(0, a)\n        self.add_forward(b + 1, c)\n        self.add_forward(a + 1, b)\n        self.add_forward(c + 1, -1)\n        return self\n\n    def forward_2x_bridge(self, a, b, c, d):\n        self.add_forward(0, a)\n        self.add_forward(c + 1, d)\n        self.add_forward(b + 1, c)\n        self.add_forward(a + 1, b)\n        self.add_forward(d + 1, -1)\n        return self\n\nclass Candidates:\n\n    @staticmethod\n    def tour_inverse(tour):\n        tour_inverse = [0] * len(tour)\n        for i, j in enumerate(tour):\n            tour_inverse[j] = i\n        return tour_inverse\n\n    # Find pairs a, b such that a < b\n    # and b \u2208 N(a) and b+1 \u2208 N(a+1)\n    @staticmethod\n    def pairs_2opt(tour, neighbors):\n        tour_inverse = Candidates.tour_inverse(tour)\n        def n(x):\n            for y in neighbors[tour[x]]: yield tour_inverse[y]\n        for a0 in shuffle(range(len(tour) - 1)):\n            a1 = a0 + 1\n            for b0 in n(a0):\n                b1 = b0 + 1\n                if a0 < b0 and b1 in n(a1):\n                    yield a0, b0\n  \n    # Find triples a, b, c such that a < b < c and\n    # b+1 \u2208 N(a) and c+1 \u2208 N(b) and a+1 \u2208 N(c)\n    @staticmethod\n    def triples_3opt(tour, neighbors):\n        tour_inverse = Candidates.tour_inverse(tour)\n        def n(x):\n            for y in neighbors[tour[x]]: yield tour_inverse[y]\n        for a0 in shuffle(range(len(tour))):\n            a1 = a0 + 1\n            for b1 in n(a0):\n                b0 = b1 - 1\n                if a0 < b0:\n                    for c1 in n(b0):\n                        c0 = c1 - 1\n                        if b0 < c0 and a1 in n(c0):\n                            yield a0, b0, c0\n\n    # Find quads a, b, c, d such that a < b < c < d and\n    # c+1 \u2208 N(a) and c \u2208 N(a+1) and and d+1 \u2208 N(b) and d \u2208 N(b+1)\n    @staticmethod\n    def quads_2x_bridge(tour, neighbors):\n        tour_inverse = Candidates.tour_inverse(tour)\n        def n(x):\n            for y in neighbors[tour[x]]: yield tour_inverse[y]\n        pairs = []\n        for a0 in range(len(tour) - 1):\n            a1 = a0 + 1\n            for b1 in n(a0):\n                b0 = b1 - 1\n                if a0 < b0 and b0 in n(a1):\n                    pairs.append((a0, b0))\n        for i in shuffle(range(len(pairs))):\n            a, c = pairs[i]\n            quads = []\n            for j in range(i + 1, len(pairs)):\n                b, d = pairs[j]\n                if not a < b: continue\n                if not b < c: break\n                if c < d: quads.append((a, b, c, d))\n            for quad in shuffle(quads):\n                yield quad\n\nclass Scorer:\n    def __init__(self, tour, world, percent=0.1):\n        self.tour = tour\n        self.world = world\n        self.percent = percent\n        self.forward_scores = self._preprocess(tour)\n        self.backward_scores = self._preprocess(tour[::-1])\n\n    # Cumulative sum of the scores for 10 prime offsets\n    def _preprocess(self, tour):\n        distances = []\n        for i in range(1, len(tour)):\n            x = self.world.cities_x[tour[i]] - self.world.cities_x[tour[i-1]]\n            y = self.world.cities_y[tour[i]] - self.world.cities_y[tour[i-1]]\n            distances.append(math.sqrt((x * x) + (y * y)))\n        scores = []\n        for j in range(10):\n            penalties = [0] * len(distances)\n            for k in range(j, len(distances), 10):\n                penalties[k] = self.percent * self.world.non_primes[tour[k]] * distances[k]\n            cumsum = []\n            cumsum.append(distances[0] + penalties[0])\n            for k in range(1, len(distances)):\n                cumsum.append(cumsum[-1] + distances[k] + penalties[k])\n            scores.append(cumsum)\n        return scores\n\n    # Score a segment between indices a and b included\n    # starting at a new index and in the original direction\n    def score_forward(self, a, b, new_start):\n        assert b >= a\n        offset = (a - new_start + 9) % 10\n        distance = self.forward_scores[offset][b - 1]\n        if a > 0: distance -= self.forward_scores[offset][a - 1]\n        return distance\n\n    # Score an edge between cities i and j not necessarily in the tour\n    def score_edge(self, i, j, edge_index):\n        assert i != j\n        x = self.world.cities_x[j] - self.world.cities_x[i]\n        y = self.world.cities_y[j] - self.world.cities_y[i]\n        distance = math.sqrt(x * x + y * y)\n        if edge_index % 10 == 9 and self.world.non_primes[i]:\n            distance *= (1 + self.percent)\n        return distance\n\n# Score a modified tour without creating it\nclass ScoreBuilder(Builder):\n    def __init__(self, scorer):\n        self.scorer = scorer\n        self.score = 0.0\n        self.tour_length = 0\n        self.last_city = None\n\n    # Add a segment in the original direction\n    def add_forward(self, a, b):\n        if b == -1: b = len(self.scorer.tour) - 1\n        assert b >= a\n        # Add an edge between the last city of the tour\n        # and the first city of the new segment\n        if self.tour_length > 0:\n            self.score += self.scorer.score_edge(\n                self.last_city,\n                self.scorer.tour[a],\n                self.tour_length - 1)\n        # Add the new segment\n        if b > a:\n            self.score += self.scorer.score_forward(\n                a, b, self.tour_length)\n        # Maintain the tour info\n        self.tour_length += b - a + 1\n        self.last_city = self.scorer.tour[b]\n\n    def out(self):\n        return self.score\n\n# Create a modified tour\nclass TourBuilder(Builder):\n    def __init__(self, tour):\n        self.tour = tour\n        self.new_tour = []\n\n    # Add a segment in the original direction\n    def add_forward(self, a, b):\n        if b == -1: b = len(self.tour) - 1\n        assert b >= a\n        self.new_tour.extend(self.tour[a:b+1])\n\n    def out(self):\n        return self.new_tour\n\nclass Neighbors:\n\n    @staticmethod\n    def load_pickle(filename, limit=None):\n        with open(filename, \"rb\") as stream:\n            neighbors = p.load(stream)\n        if limit is not None:\n            for i in range(len(neighbors)):\n                neighbors[i] = neighbors[i][:limit]\n            for i in range(len(neighbors)):\n                for j in neighbors[i]:\n                    if i not in neighbors[j]:\n                        neighbors[j].append(i)\n        return neighbors\n\nclass Move:\n    def __init__(self, name, candidates, score_forward, tour_forward):\n        self.name = name\n        self.candidates = candidates\n        self.score_forward = score_forward\n        self.tour_forward = tour_forward\n\nmove_3opt = Move(\n    name=\"3-OPT\",\n    candidates=lambda t: Candidates.triples_3opt(t, popmusic),\n    score_forward=lambda s, c: ScoreBuilder(s).forward_3opt(*c).out(),\n    tour_forward=lambda t, c: TourBuilder(t).forward_3opt(*c).out(),\n    )\n\nmove_2x_bridge = Move(\n    name=\"DOUBLE BRIDGE\",\n    candidates=lambda t: Candidates.quads_2x_bridge(t, popmusic),\n    score_forward=lambda s, c: ScoreBuilder(s).forward_2x_bridge(*c).out(),\n    tour_forward=lambda t, c: TourBuilder(t).forward_2x_bridge(*c).out(),\n    )\n\n\ndef progress_one(tour, world, move, percent=0.1, epsilon=1e-3):\n    scorer = Scorer(tour, world, percent)\n    base_score = ScoreBuilder(scorer).noop().out()\n    for candidate in move.candidates(tour):\n        # Forward\n        score = move.score_forward(scorer, candidate)\n        if score < base_score - epsilon:\n            return move.tour_forward(tour, candidate)\n      \ndef progress_many(tour, world, move, percent=0.1, epsilon=1e-3, limit=None, verbose=5):\n    counter = 0\n    while True:\n        counter += 1\n        if limit is not None and counter > limit: return tour\n        if verbose is not None:\n            if counter % verbose == 0: print(counter, world.score(tour, percent))\n        previous_tour = tour\n        tour = progress_one(previous_tour, world, move, percent, epsilon)\n        if tour is None:\n            return previous_tour\n\ndef progress_all(tour, world, moves, percent=0.1, epsilon=1e-3, verbose=20):\n    counter = 0\n    while True:\n        for move in moves:\n            previous_tour = tour\n            tour = progress_many(tour, world, move, percent, epsilon, verbose=verbose)\n            counter = 0 if tour != previous_tour else counter + 1\n            if counter == len(moves) - 1:\n                return tour\n\ndef kick(tour, world, move):\n    limit = int(random.uniform(50,100)) # 50 - 500\n    epsilon = - random.uniform(0.1, 0.5) # 0.1 - 0.5\n    penalty = 0.1\n    print(\"Begin kicking... epsilon =\", epsilon, ', number of kicks =', limit, ', kick penalty =', penalty)\n    return progress_many(tour, world, move, percent=penalty, epsilon=epsilon, limit=limit, verbose=None)\n    \nprint('Successfully importing custom library')","2c00fea1":"VERBOSE = 5\n\nworld = World('..\/input\/traveling-santa-2018-prime-paths\/cities.csv')\nprint('INPUT SCORE:', world.score(tour))\n\nfor penalty in [0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1]:\n    for epsilon in [0]:\n        print('Penalty:', penalty, '. Epsilon:', epsilon)\n        tour = progress_all(tour, world, (move_2x_bridge, move_3opt), percent=penalty, epsilon=epsilon, verbose=VERBOSE)\n\nprint('SCORE AFTER OPTIMIZATION:', world.score(tour))\n","2b04505e":"nb_kicks = 10\nverbose = 1\nkick_move = move_2x_bridge\nreoptimize_moves = (move_3opt , move_2x_bridge)\n\ncnt_success = 0\ncnt_fail = 0\n\nfor k in range(nb_kicks):\n    input_score =  world.score(tour)\n    print('Kick', k ,'INPUT SCORE:', input_score)\n\n    broken_tour = kick(tour, world, kick_move)\n    broken_score = world.score(broken_tour)\n    print(\"Kicked. Score increase\",  broken_score - input_score, '(', broken_score ,')')\n    \n    print(\"Now fixing...\")\n    fixed_tour = progress_all(broken_tour, world, reoptimize_moves)\n    score = world.score(fixed_tour)\n\n    if score < input_score:\n        cnt_success += 1\n        print('KICK SUCCESSFUL! New score:', score)\n        filename = \"tour-\" + \"%.2f\" % score + \".csv\"\n        Tour.save_csv(tour, filename)\n        tour = fixed_tour\n    else: \n        print('KICK FAILED!')\n        cnt_fail += 1\n    print('Success count:', cnt_success, 'Fail count:', cnt_fail)","8a611df3":"import math\nimport pickle as p\n\n\nclass World:\n\n    def __init__(self, filename):\n        cities_x, cities_y, n = World._read_cities(filename)\n        self.cities_x = tuple(cities_x)\n        self.cities_y = tuple(cities_y)\n        self.n = n\n        primes = World._prime_sieve(self.n)\n        self.non_primes = tuple(1 - p for p in primes)\n\n    # Reads cities from CSV file.\n    @staticmethod\n    def _read_cities(filename):\n        cities_x, cities_y = [], []\n        with open(filename) as s:\n            for i, line in enumerate(s.readlines()):\n                if i == 0: continue\n                _, x, y = line.strip().split(',')\n                cities_x.append(float(x))\n                cities_y.append(float(y))\n        assert len(cities_x) == i and len(cities_y) == i\n        return cities_x, cities_y, i\n\n    # Sieve of Eratosthenes.\n    @staticmethod\n    def _prime_sieve(n):\n        assert n >= 2\n        primes = [False, False] + [True] * (n - 2)\n        for i in range(2, n):\n            if primes[i]:\n                for j in range(2 * i, n, i):\n                    primes[j] = False\n        return primes\n\n    # Distance between 2 cities.\n    def distance(self, i, j):\n        x = self.cities_x[i] - self.cities_x[j]\n        y = self.cities_y[i] - self.cities_y[j]\n        return math.sqrt((x * x) + (y * y))\n\n    # Tour score.\n    def score(self, tour, percent=0.1):\n        distances = []\n        for i in range(1, len(tour)):\n            distances.append(self.distance(tour[i], tour[i-1]))\n        penalties = []\n        for i in range(9, len(tour) - 1, 10):\n            penalties.append(self.non_primes[tour[i]] * distances[i])\n        return sum(distances) + percent * sum(penalties)\n\n# Class used as namespace.\nclass Tour:\n\n    # Reads CSV submission.\n    @staticmethod\n    def load_csv(filename):\n        tour = []\n        with open(filename) as stream:\n            for i, line in enumerate(stream.readlines()):\n                if i == 0: continue\n                city = int(line)\n                tour.append(city)\n        assert (tour[0] == 0) and (tour[-1] == 0)\n        return tour\n\n    # Writes CSV submission.\n    @staticmethod\n    def save_csv(tour, filename):\n        with open(filename, \"w\") as s:\n            s.write(\"Path\\n\")\n            for city in tour:\n                s.write(\"%d\\n\" % city)\n\n    # Number of non-common edges between 2 tours.\n    @staticmethod\n    def edge_distance(tour1, tour2):\n        assert len(tour1) == len(tour2)\n        def edges(tour):\n            for i in range(len(tour) - 1):\n                yield tuple(sorted((tour[i], tour[i + 1])))\n        edges2 = set(edges(tour2))\n        distance = 0\n        for edge in edges(tour1):\n            if edge not in edges2:\n                distance += 1\n        return distance\n\n    # Number of non-common placed primes between 2 tours.\n    def prime_distance(tour1, tour2):\n        assert len(tour1) == len(tour2)\n        primes = World._prime_sieve(len(tour1))\n        def placed_primes(tour):\n            for i in range(9, len(tour) - 1, 10):\n                if primes[tour[i]]: yield tour[i]\n        primes1 = set(placed_primes(tour1))\n        primes2 = set(placed_primes(tour2))\n        return len(primes1 | primes2) - len(primes1 & primes2)\n\n    @staticmethod\n    def distance(tour1, tour2):\n        return (\n            Tour.edge_distance(tour1, tour2),\n            Tour.prime_distance(tour1, tour2))\n\n# Class used as namespace.\nclass Neighbors:\n\n    # Loads pickled neighbors list.\n    @staticmethod\n    def load_pickle(filename):\n        with open(filename, \"rb\") as stream:\n            return p.load(stream)\n        ","f772e803":"# FILE kopt_5opt.py\n\nimport random\nimport math\n\n#cities_x, cities_y = [], []\n#with open(\"cities.csv\") as s:\n#    for i, line in enumerate(s.readlines()):\n#        if i == 0: continue\n#        _, x, y = line.strip().split(',')\n#        cities_x.append(float(x))\n#        cities_y.append(float(y))\n\ndef shuffle(l):\n    l = list(l)\n    random.shuffle(l)\n    return iter(l)\n\n# Finds candidates for k-opt moves. Class used as namepace.\nclass Candidates:\n\n    # Precomputation to find the position\n    # of a city in the tour in constant time.\n    @staticmethod\n    def tour_inverse(tour, start, stop):\n        tour_inverse = [-1] * len(tour)\n        for i in range(start, stop - 1):\n            tour_inverse[tour[i]] = i\n        return tour_inverse\n\n    # Finds pairs a, b such that a < b and b \u2208 N(a) and b+1 \u2208 N(a+1).\n    @staticmethod\n    def pairs_2opt(tour, neighbors, start, stop):\n        tour_inverse = Candidates.tour_inverse(tour, start, stop)\n        def n(x):\n            for y in neighbors[tour[x]]:\n                z = tour_inverse[y]\n                if z != -1: yield z\n        for a0 in shuffle(range(start, stop - 1)):\n            a1 = a0 + 1\n            for b0 in n(a0):\n                b1 = b0 + 1\n                if a0 < b0 and b1 in n(a1):\n                    yield a0, b0\n\n    # Finds triples a, b, c such that a < b < c and\n    # b+1 \u2208 N(a) and c+1 \u2208 N(b) and a+1 \u2208 N(c).\n    @staticmethod\n    def triples_3opt(tour, neighbors, start, stop):\n        tour_inverse = Candidates.tour_inverse(tour, start, stop)\n        def n(x):\n            for y in neighbors[tour[x]]:\n                z = tour_inverse[y]\n                if z != -1: yield z\n        for a0 in shuffle(range(start, stop - 1)):\n            a1 = a0 + 1\n            for b1 in n(a0):\n                b0 = b1 - 1\n                if a0 < b0:\n                    for c1 in n(b0):\n                        c0 = c1 - 1\n                        if b0 < c0 and a1 in n(c0):\n                            yield a0, b0, c0\n\n    # Finds quads a, b, c, d such that a < b < c < d and\n    # c+1 \u2208 N(a) and c \u2208 N(a+1) and and d+1 \u2208 N(b) and d \u2208 N(b+1).\n    @staticmethod\n    def quads_4opt(tour, neighbors, start, stop):\n        tour_inverse = Candidates.tour_inverse(tour, start, stop)\n        def n(x):\n            for y in neighbors[tour[x]]:\n                z = tour_inverse[y]\n                if z != -1: yield z\n        pairs = []\n        for a0 in range(start, stop - 1):\n            a1 = a0 + 1\n            for b1 in n(a0):\n                b0 = b1 - 1\n                if a0 < b0 and b0 in n(a1):\n                    pairs.append((a0, b0))\n        for i in shuffle(range(len(pairs))):\n            a, c = pairs[i]\n            quads = []\n            for j in range(i + 1, len(pairs)):\n                b, d = pairs[j]\n                if not a < b: continue\n                if not b < c: break\n                if c < d: quads.append((a, b, c, d))\n            for quad in shuffle(quads):\n                yield quad\n\n    @staticmethod\n    def five_opt_candidates(tour, nearest_neighbors, start, stop):\n        for c, tourOrder in LK_5Move(tour, nearest_neighbors, start, stop):\n            if not allUnique(c): continue\n            tour_inverse = [0] * len(tour)\n            for i, j in enumerate(tour):\n                tour_inverse[j] = i\n            tourPos = [tour_inverse[j] for j in c]\n            yield c, tourOrder, tourPos\n\n    @staticmethod\n    def four_opt_candidates(tour, nearest_neighbors, start, stop):\n        for c, tourOrder, valid_4opt_flag, G4a in LK_4Move(tour, nearest_neighbors, start, stop):\n            if valid_4opt_flag: \n               if not allUnique(c): continue\n               tour_inverse = [0] * len(tour)\n               for i, j in enumerate(tour):\n                  tour_inverse[j] = i\n               tourPos = [tour_inverse[j] for j in c]\n               yield c, tourOrder, tourPos    \n\n# Abstract class defining the segment operations for the\n# k-opt moves. Implementations: ScoreBuilder and TourBuilder.\nclass Builder:\n\n    def noop(self):\n        self.add_forward(0, -1)\n        return self\n\n    # 2-opt move.\n    # From  0 .. a a+1 ..  b  b+1 .. 0\n    # To    0 .. a  b  .. a+1 b+1 .. 0\n\n    def forward_2opt(self, a, b):\n        self.add_forward(0, a)\n        self.add_backward(a + 1, b)\n        self.add_forward(b + 1, -1)\n        return self\n\n    def backward_2opt(self, a, b):\n        self.add_backward(b + 1, -1)\n        self.add_forward(a + 1, b)\n        self.add_backward(0, a)\n        return self\n\n    # 3-opt move (3x 2-opt moves).\n    # From 0 .. a a+1 .. b b+1 .. c c+1 .. 0\n    # To   0 .. a b+1 .. c a+1 .. b c+1 .. 0\n\n    def forward_3opt(self, a, b, c):\n        self.add_forward(0, a)\n        self.add_forward(b + 1, c)\n        self.add_forward(a + 1, b)\n        self.add_forward(c + 1, -1)\n        return self\n\n    def backward_3opt(self, a, b, c):\n        self.add_backward(c + 1, -1)\n        self.add_backward(a + 1, b)\n        self.add_backward(b + 1, c)\n        self.add_backward(0, a)\n        return self\n\n    # 4-opt move (double bridge move).\n    # From  0 .. a a+1 .. b b+1 .. c c+1 .. d d+1 .. 0\n    # To    0 .. a c+1 .. d b+1 .. c a+1 .. b d+1 .. 0\n\n    def forward_4opt(self, a, b, c, d):\n        self.add_forward(0, a)\n        self.add_forward(c + 1, d)\n        self.add_forward(b + 1, c)\n        self.add_forward(a + 1, b)\n        self.add_forward(d + 1, -1)\n        return self\n\n    def backward_4opt(self, a, b, c, d):\n        self.add_backward(d + 1, -1)\n        self.add_backward(a + 1, b)\n        self.add_backward(b + 1, c)\n        self.add_backward(c + 1, d)\n        self.add_backward(0, a)\n        return self\n\n    def forward_5opt_sequential(self, tencities, tourOrder, tourPosition):\n        ## c = [c1, c2, ..., c9, cA]: city name, not position index! \n        ## tourOrder = '129A347856': cyclic order of [c1, c2..., cA]\n        ## tourPosition = [p1,p2,...,pA]: position index of [c1,c2,...,cA]\n        # Step 1: Search for city with minimum index (nearest to city 0)\n        #print(tencities)\n        #print(tourOrder)\n        ten_order = parse_tourOrder_5opt(tencities, tourOrder)\n        ind_1 = min(tourPosition)\n        city_ind_1 = tencities[tourPosition.index(ind_1)]\n        self.add_forward(0, ind_1)\n        # Step 2: Get neighbor of city_ind_1, that is right next to c_i if i odd, or left next to c_i if i even\n        for count in range(4):\n            city_ind_2 = get_nn_quintuple(city_ind_1, tencities)\n            ind_2 = tourPosition[tencities.index(city_ind_2)]\n            city_ind_3, fw = get_segment_quintuple(city_ind_2, ten_order)\n            ind_3  = tourPosition[tencities.index(city_ind_3)]\n            if ind_2 < ind_3: self.add_forward(ind_2, ind_3)\n            else: self.add_backward(ind_3, ind_2)\n            # update for next loop\n            city_ind_1 = city_ind_3\n        # close the tour, finish\n        city_ind_2 = get_nn_quintuple(city_ind_1, tencities)\n        ind_2 = tourPosition[tencities.index(city_ind_2)]\n        self.add_forward(ind_2, -1)\n        return self\n\n\n    def backward_5opt_sequential(self, tencities, tourOrder, tourPosition):\n        ## c = [c1, c2, ..., c9, cA]: city name, not position index! \n        ## tourOrder = '129A347856': cyclic order of [c1, c2..., cA]\n        ## tourPosition = [p1,p2,...,pA]: position index of [c1,c2,...,cA]\n        # Step 1: Search for city with maximum index (nearest to city 0)\n        ten_order = parse_tourOrder_5opt(tencities, tourOrder)\n        ind_1 = max(tourPosition)\n        city_ind_1 = tencities[tourPosition.index(ind_1)]\n        self.add_backward(ind_1, -1)\n        # Step 2: Get neighbor of city_ind_1, that is right next to c_i if i odd, or left next to c_i if i even\n        for count in range(4):\n            city_ind_2 = get_nn_quintuple(city_ind_1, tencities)\n            ind_2 = tourPosition[tencities.index(city_ind_2)]\n            city_ind_3, fw = get_segment_quintuple(city_ind_2, ten_order)\n            ind_3  = tourPosition[tencities.index(city_ind_3)]\n            if ind_2 < ind_3: self.add_backward(ind_2, ind_3)\n            else: self.add_forward(ind_3, ind_2)\n\n            # update for next loop\n            city_ind_1 = city_ind_3\n\n        # close the tour, finish\n        city_ind_2 = get_nn_quintuple(city_ind_1, tencities)\n        ind_2 = tourPosition[tencities.index(city_ind_2)]\n        self.add_backward(0, ind_2)\n        return self\n\n\n    def forward_4opt_sequential(self, eightcities, tourOrder, tourPosition):\n        eight_order = parse_tourOrder_4opt(eightcities, tourOrder)\n        ind_1 = min(tourPosition)\n        city_ind_1 = eightcities[tourPosition.index(ind_1)]\n        self.add_forward(0, ind_1)\n        for count in range(3):\n            city_ind_2 = get_nn_quadtuple(city_ind_1, eightcities)\n            ind_2 = tourPosition[eightcities.index(city_ind_2)]\n            city_ind_3, fw = get_segment_quadtuple(city_ind_2, eight_order)\n            ind_3  = tourPosition[eightcities.index(city_ind_3)]\n            if ind_2 < ind_3: self.add_forward(ind_2, ind_3)\n            else: self.add_backward(ind_3, ind_2)\n            # update for next loop\n            city_ind_1 = city_ind_3\n        # close the tour, finish\n        city_ind_2 = get_nn_quadtuple(city_ind_1, eightcities)\n        ind_2 = tourPosition[eightcities.index(city_ind_2)]\n        self.add_forward(ind_2, -1)\n        return self\n\n\n    def backward_4opt_sequential(self, eightcities, tourOrder, tourPosition):\n        eight_order = parse_tourOrder_4opt(eightcities, tourOrder)\n        ind_1 = max(tourPosition)\n        city_ind_1 = eightcities[tourPosition.index(ind_1)]\n        self.add_backward(ind_1, -1)\n        for count in range(3):\n            city_ind_2 = get_nn_quadtuple(city_ind_1, eightcities)\n            ind_2 = tourPosition[eightcities.index(city_ind_2)]\n            city_ind_3, fw = get_segment_quadtuple(city_ind_2, eight_order)\n            ind_3  = tourPosition[eightcities.index(city_ind_3)]\n            if ind_2 < ind_3: self.add_backward(ind_2, ind_3)\n            else: self.add_forward(ind_3, ind_2)\n            # update for next loop\n            city_ind_1 = city_ind_3\n        # close the tour, finish\n        city_ind_2 = get_nn_quadtuple(city_ind_1, eightcities)\n        ind_2 = tourPosition[eightcities.index(city_ind_2)]\n        self.add_backward(0, ind_2)\n        return self\n\ndef parse_tourOrder_5opt(tencities, tourOrder):\n    # Example: tencities = [10,20,30,40,50,60,70,80,90,100], tourOrder =  = '124356A987' \n    #            -> output=[10,20,40,30,50,60,100,90,80,70]\n    tenorder = []\n    for char in tourOrder[3:]:\n        if char=='A': tenorder.append(tencities[9])\n        else: tenorder.append(tencities[int(char)-1])\n    return tenorder\n\ndef parse_tourOrder_4opt(eightcities, tourOrder):\n    eightorder = []\n    for char in tourOrder[3:]:\n        eightorder.append(eightcities[int(char)-1])\n    return eightorder\n\n\ndef get_nn_quintuple(city, tencities):\n    # if city = c1, output = cA (vice versa), or if city = c6, output = c7...\n    ind_city = tencities.index(city)\n    if ind_city == 0: return tencities[9]\n    if ind_city == 1: return tencities[2]\n    if ind_city == 2: return tencities[1]\n    if ind_city == 3: return tencities[4]\n    if ind_city == 4: return tencities[3]\n    if ind_city == 5: return tencities[6]\n    if ind_city == 6: return tencities[5]\n    if ind_city == 7: return tencities[8]\n    if ind_city == 8: return tencities[7]\n    if ind_city == 9: return tencities[0]\n\ndef get_nn_quadtuple(city, eightcities):\n    # if city = c1, output = cA (vice versa), or if city = c6, output = c7...\n    ind_city = eightcities.index(city)\n    if ind_city == 0: return eightcities[7]\n    if ind_city == 1: return eightcities[2]\n    if ind_city == 2: return eightcities[1]\n    if ind_city == 3: return eightcities[4]\n    if ind_city == 4: return eightcities[3]\n    if ind_city == 5: return eightcities[6]\n    if ind_city == 6: return eightcities[5]\n    if ind_city == 7: return eightcities[0]\n\ndef get_segment_quintuple(city, tenorder): # return city of the same segment\n    ind_city = tenorder.index(city)\n    if ind_city == 0: return tenorder[9], 0\n    if ind_city == 1: return tenorder[2], 1\n    if ind_city == 2: return tenorder[1], 0\n    if ind_city == 3: return tenorder[4], 1\n    if ind_city == 4: return tenorder[3], 0\n    if ind_city == 5: return tenorder[6], 1\n    if ind_city == 6: return tenorder[5], 0\n    if ind_city == 7: return tenorder[8], 1\n    if ind_city == 8: return tenorder[7], 0\n    if ind_city == 9: return tenorder[0], 1\n\ndef get_segment_quadtuple(city, eightorder): # return city of the same segment\n    ind_city = eightorder.index(city)\n    if ind_city == 0: return eightorder[7], 0\n    if ind_city == 1: return eightorder[2], 1\n    if ind_city == 2: return eightorder[1], 0\n    if ind_city == 3: return eightorder[4], 1\n    if ind_city == 4: return eightorder[3], 0\n    if ind_city == 5: return eightorder[6], 1\n    if ind_city == 6: return eightorder[5], 0\n    if ind_city == 7: return eightorder[0], 1\n\ndef allUnique(x):\n    seen = set()\n    return not any(i in seen or seen.add(i) for i in x)\n\n# Precomputations to score k-opt moves faster.\nclass Scorer:\n\n    def __init__(self, tour, world, percent=0.1):\n        self.tour = tour\n        self.world = world\n        self.percent = percent\n        self.forward_scores = self._preprocess(tour)\n        self.backward_scores = self._preprocess(tour[::-1])\n\n    # Cumulative sum of the scores at each city for the 10 penaly offsets.\n    def _preprocess(self, tour):\n        distances = []\n        for i in range(1, len(tour)):\n            distance = self.world.distance(tour[i], tour[i - 1])\n            distances.append(distance)\n        scores = []\n        for j in range(10):\n            penalties = [0] * len(distances)\n            for k in range(j, len(distances), 10):\n                p = self.world.non_primes[tour[k]] * distances[k]\n                penalties[k] = self.percent * p\n            cumsum = []\n            cumsum.append(distances[0] + penalties[0])\n            for k in range(1, len(distances)):\n                cumsum.append(cumsum[-1] + distances[k] + penalties[k])\n            scores.append(cumsum)\n        return scores\n\n    # Scores a segment between indices a and b included\n    # starting at a new index and in the original direction.\n    def score_forward(self, a, b, new_start):\n        assert b >= a\n        offset = (a - new_start + 9) % 10\n        distance = self.forward_scores[offset][b - 1]\n        if a > 0: distance -= self.forward_scores[offset][a - 1]\n        return distance\n\n    # Scores a segment between indices a and b included\n    # starting at a new index and in the reverse direction.\n    def score_backward(self, a, b, new_start):\n        assert b >= a\n        inv = lambda i: len(self.tour) - 1 - i\n        offset = (inv(b) - new_start + 9) % 10\n        distance = self.backward_scores[offset][inv(a) - 1]\n        if inv(b) > 0: distance -= self.backward_scores[offset][inv(b) - 1]\n        return distance\n\n    # Scores an edge between cities i and j not necessarily in the tour.\n    def score_edge(self, i, j, edge_index):\n        assert i != j\n        distance = self.world.distance(i, j)\n        if edge_index % 10 == 9 and self.world.non_primes[i]:\n            distance *= (1 + self.percent)\n        return distance\n\n# Scores a modified tour without creating it.\nclass ScoreBuilder(Builder):\n\n    def __init__(self, scorer):\n        self.scorer = scorer\n        self.score = 0.0\n        self.tour_length = 0\n        self.last_city = None\n\n    # Adds a segment in the original direction.\n    def add_forward(self, a, b):\n        if b == -1: b = len(self.scorer.tour) - 1\n        assert b >= a\n        # Add an edge between the last city of the tour\n        # and the first city of the new segment\n        if self.tour_length > 0:\n            self.score += self.scorer.score_edge(\n                self.last_city,\n                self.scorer.tour[a],\n                self.tour_length - 1)\n        # Add the new segment\n        if b > a:\n            self.score += self.scorer.score_forward(\n                a, b, self.tour_length)\n        # Maintain the tour info\n        self.tour_length += b - a + 1\n        self.last_city = self.scorer.tour[b]\n\n    # Adds a segment in the reverse direction.\n    def add_backward(self, a, b):\n        if b == -1: b = len(self.scorer.tour) - 1\n        assert b >= a\n        # Add an edge between the last city of the tour\n        # and the first city of the new segment\n        if self.tour_length > 0:\n            self.score += self.scorer.score_edge(\n                self.last_city,\n                self.scorer.tour[b],\n                self.tour_length - 1)\n        # Add the new segment\n        if b > a:\n            self.score += self.scorer.score_backward(\n                a, b, self.tour_length)\n        # Maintain the tour info\n        self.tour_length += b - a + 1\n        self.last_city = self.scorer.tour[a]\n\n    def out(self):\n        return self.score\n\n# Creates a modified tour.\nclass TourBuilder(Builder):\n\n    def __init__(self, tour):\n        self.tour = tour\n        self.new_tour = []\n\n    # Adds a segment in the original direction.\n    def add_forward(self, a, b):\n        if b == -1: b = len(self.tour) - 1\n        assert b >= a\n        self.new_tour.extend(self.tour[a:b+1])\n\n    # Adds a segment in the reverse direction.\n    def add_backward(self, a, b):\n        if b == -1: b = len(self.tour) - 1\n        assert b >= a\n        self.new_tour.extend(self.tour[a:b+1][::-1])\n\n    def out(self):\n        return self.new_tour\n\n# Move abstraction for convenience.\nclass Move:\n\n    def __init__(\n            self, name, candidates,\n            score_forward, score_backward,\n            tour_forward, tour_backward, limit):\n        self.name = name\n        self.candidates = candidates\n        self.score_forward = score_forward\n        self.score_backward = score_backward\n        self.tour_forward = tour_forward\n        self.tour_backward = tour_backward\n        self.limit = limit\n\n    @staticmethod\n    def move_2opt(neighbors):\n        return Move(\n            name=\"2-opt\",\n            candidates=lambda t, i, j: Candidates.pairs_2opt(t, neighbors, i, j),\n            score_forward=lambda s, c: ScoreBuilder(s).forward_2opt(*c).out(),\n            score_backward=lambda s, c: ScoreBuilder(s).backward_2opt(*c).out(),\n            tour_forward=lambda t, c: TourBuilder(t).forward_2opt(*c).out(),\n            tour_backward=lambda t, c: TourBuilder(t).backward_2opt(*c).out(),\n            limit = None\n            )\n\n    @staticmethod\n    def move_3opt(neighbors):\n        return Move(\n            name=\"3-opt (3x 2-opt)\",\n            candidates=lambda t, i, j: Candidates.triples_3opt(t, neighbors, i, j),\n            score_forward=lambda s, c: ScoreBuilder(s).forward_3opt(*c).out(),\n            score_backward=lambda s, c: ScoreBuilder(s).backward_3opt(*c).out(),\n            tour_forward=lambda t, c: TourBuilder(t).forward_3opt(*c).out(),\n            tour_backward=lambda t, c: TourBuilder(t).backward_3opt(*c).out(),\n            limit = None\n            )\n\n    @staticmethod\n    def move_4opt(neighbors):\n        return Move(\n            name=\"4-opt (double bridge)\",\n            candidates=lambda t, i, j: Candidates.quads_4opt(t, neighbors, i, j),\n            score_forward=lambda s, c: ScoreBuilder(s).forward_4opt(*c).out(),\n            score_backward=lambda s, c: ScoreBuilder(s).backward_4opt(*c).out(),\n            tour_forward=lambda t, c: TourBuilder(t).forward_4opt(*c).out(),\n            tour_backward=lambda t, c: TourBuilder(t).backward_4opt(*c).out(),\n            limit = None\n            )\n\n\n    @staticmethod\n    def move_4opt_sequential(neighbors):\n        return Move(\n            name=\"4-opt sequential\",\n            candidates=lambda t, i, j: Candidates.four_opt_candidates(t, neighbors, i, j),\n            score_forward=lambda s, c: ScoreBuilder(s).forward_4opt_sequential(*c).out(),\n            score_backward=lambda s, c: ScoreBuilder(s).backward_4opt_sequential(*c).out(),\n            tour_forward=lambda t, c: TourBuilder(t).forward_4opt_sequential(*c).out(),\n            tour_backward=lambda t, c: TourBuilder(t).backward_4opt_sequential(*c).out(),\n            limit = 50000\n            )\n\n    @staticmethod\n    def move_5opt_sequential(neighbors):\n        return Move(\n            name=\"5-opt sequential\",\n            candidates=lambda t, i, j: Candidates.five_opt_candidates(t, neighbors, i, j),\n            score_forward=lambda s, c: ScoreBuilder(s).forward_5opt_sequential(*c).out(),\n            score_backward=lambda s, c: ScoreBuilder(s).backward_5opt_sequential(*c).out(),\n            tour_forward=lambda t, c: TourBuilder(t).forward_5opt_sequential(*c).out(),\n            tour_backward=lambda t, c: TourBuilder(t).backward_5opt_sequential(*c).out(),\n            limit = 50000\n            )\n\n# Class used as namespace.\nclass Optimizer:\n\n    # Returns a tour after applying a single improving move,\n    # or None if there is no such move.\n    @staticmethod\n    def optimize_one(\n            tour, world, move, percent=0.1,\n            min_gain=1e-3, start=None, stop=None):\n        if start is None: start = 0\n        if stop is None: stop = len(tour)\n        scorer = Scorer(tour, world, percent)\n        score = ScoreBuilder(scorer).noop().out()\n        #print(score)\n        count = 0\n        max_score = score - min_gain\n        for candidate in move.candidates(tour, start, stop):\n            if move.limit is not None:\n                count += 1\n                if count > move.limit: return None\n            score = move.score_forward(scorer, candidate)\n            if score < max_score:\n                new_tour = move.tour_forward(tour, candidate)\n                if len(new_tour) == 197770: return new_tour # because 4-opt and 5-opt sequential have a bug that may cause the bad tourlength\n\n\n    # Returns a tour after applying all the improving moves,\n    @staticmethod\n    def optimize_move(\n            tour, world, move, percent=0.1,\n            min_gain=1e-3, start=None, stop=None):\n        if start is None: start = 0\n        if stop is None: stop = len(tour)\n        #print(move.name, \"[%d:%d]\" % (start, stop))\n        while True:\n            new_tour = Optimizer.optimize_one(\n                tour, world, move, percent=percent,\n                min_gain=min_gain, start=start, stop=stop)\n            if new_tour is None:\n                return tour\n            tour = new_tour\n\n    # Returns a tour after applying all the improving moves.\n    # Successively applies different types of moves.\n    @staticmethod\n    def optimize_moves(\n            tour, world, moves, percent=0.1,\n            min_gain=1e-3, start=None, stop=None):\n        if start is None: start = 0\n        if stop is None: stop = len(tour)\n        stall_counter = -1\n        while True:\n            for move in moves:\n                new_tour = Optimizer.optimize_move(\n                    tour, world, move, percent=percent,\n                    min_gain=min_gain, start=start, stop=stop)\n                if new_tour == tour: stall_counter += 1\n                else: stall_counter = 0\n                tour = new_tour\n                if stall_counter == len(moves) - 1:\n                    return tour\n\n#########################################################\n#############   5-OPT LIBRARY    ######################\ndef t_pred(city, tour): ## returns the predecessor city for given position \n    return tour[(N + tour.index(city) -1) % N] \n\ndef t_succ(city, tour): ## returns the successor city for given city \n    return tour[(tour.index(city)+1) % N] \n\ndef Between(city_A, city_X, city_C, tour):\n  ## Returns true if `x` is between `a` and `c` in tour\n  ## with established direction (ascending position numbers)\n  ## That is: when one begins a forward traversal of tour\n  ## at city `a', then city `x` is reached before city `c'.\n  ## Returns true if and only if:\n  ##   a <= x <= c  or  c < a <= x  or  x <= c < a\n  pA = tour.index(city_A)\n  pX = tour.index(city_X)\n  pC = tour.index(city_C)\n  if pA <= pC:\n    return (pX >= pA) and (pX <= pC)\n  else:\n    return (pX >= pA) or  (pX <= pC)\n\n\ndef inOrder(city_A, city_B, city_C, fwd, tour):\n    if fwd:\n        return Between(city_A, city_B, city_C, tour)\n    else:\n        return Between(city_C, city_B, city_A, tour)\n\ndef distance(i, j):\n    x = cities_x[i] - cities_x[j]\n    y = cities_y[i] - cities_y[j]\n    return math.sqrt((x * x) + (y * y))\n\ndef LK_1Move(tour, nearest_neighbors, start, stop):\n    for i in shuffle(range(start+1, stop-1)):\n        #if i % 100 == 0: print(i)\n        c1 = tour[i]\n        c1_succ = t_succ(c1,tour)\n        c1_pred = t_pred(c1,tour)\n        for c2 in [c1_succ, c1_pred]:\n            G1a = distance(c1, c2)\n            yield c1, c2, G1a\n\ndef LK_2Move(tour,  nearest_neighbors, start, stop):\n    #http:\/\/tsp-basics.blogspot.com\/2017\/06\/lin-kernighan-algorithm-basics-part-2.html\n    nb_nn_2opt = 5\n    for c1, c2, G1a in LK_1Move(tour, nearest_neighbors, start, stop):\n        fwd = (c2 == t_succ(c1, tour))\n        c2_succ = t_succ(c2,tour)\n        c2_pred = t_pred(c2,tour)\n        for c3 in nearest_neighbors[c2][:nb_nn_2opt]: \n            if (c3 == c2_succ) or (c3 == c2_pred): continue\n            G1 = G1a - distance(c2, c3)\n            if G1 <= 0: break\n            c3_succ = t_succ(c3, tour)\n            c3_pred = t_pred(c3, tour)          \n            for c4 in [c3_pred, c3_succ]:\n                G2a = G1 + distance(c3, c4)\n                if (fwd and (c4 == c3_succ))  or (not fwd and (c4 == c3_pred)):\n                    yield (c1, c2, c3, c4), TO_1234, G2a\n                else:\n                    yield (c1, c2, c3, c4), TO_1243, G2a\n\n\ndef LK_3Move(tour,  nearest_neighbors, start, stop):\n#http:\/\/tsp-basics.blogspot.com\/2017\/06\/lin-kernighan-algorithm-basics-part-3.html\n    nb_nn_3opt = 5\n    for (c1, c2, c3, c4), tourOrderPrev, G2a in LK_2Move(tour, nearest_neighbors, start, stop):\n        fwd = (c2 == t_succ(c1, tour))\n        c4_succ = t_succ(c4, tour)\n        c4_pred = t_pred(c4, tour)\n        for c5 in nearest_neighbors[c4][:nb_nn_3opt]:\n            if (c5 == c4_succ) or (c5 == c4_pred): continue\n            G2 = G2a - distance(c4, c5)\n            if G2  <= 0: break\n            c5_succ = t_succ(c5, tour)\n            c5_pred = t_pred(c5, tour)\n            for c6 in [c5_succ, c5_pred]:\n                G3a = G2 + distance(c5, c6)\n                if tourOrderPrev == TO_1234:\n                    if inOrder(c4, c5, c1, fwd, tour):\n                        if (c6 == c2):  continue\n                        if inOrder(c4, c5, c6, fwd, tour): yield (c1, c2, c3, c4, c5, c6), TO_123456, G3a  # disconnecting, but starts 5-opt\n                        else: yield (c1, c2, c3, c4, c5, c6), TO_123465, G3a  # disconnecting, but starts 4-opt\n                    else:\n                        if (c6 == c1): continue\n                        if inOrder(c2, c6, c5, fwd, tour): yield (c1, c2, c3, c4, c5, c6), TO_126534, G3a \n                        else: yield (c1, c2, c3, c4, c5, c6), TO_125634, G3a \n\n                if tourOrderPrev == TO_1243:\n                    if inOrder(c3, c5, c1, fwd, tour):\n                        if inOrder(c3, c5, c6, fwd, tour):\n                            if (c5 == c1): continue\n                            if (c6 == c2): continue\n                            if (c5 == c2): continue \n                            if (c6 == c1): continue\n                            yield (c1, c2, c3, c4, c5, c6), TO_124356, G3a  # disconnecting, but starts 4-opt\n                        else: yield (c1, c2, c3, c4, c5, c6), TO_124365, G3a \n                    else:\n                        if inOrder(c2, c5, c6, fwd, tour):\n                            if (c5 == c1): continue\n                            if (c6 == c2): continue\n                            if (c5 == c2): continue\n                            if (c6 == c1): continue\n                            yield (c1, c2, c3, c4, c5, c6), TO_125643, G3a \n                        else: yield (c1, c2, c3, c4, c5, c6), TO_126543, G3a  # disconnecting, but starts 4-opt\n                \n                else: continue # no more possibilities\n\n\ndef LK_4Move(tour,  nearest_neighbors, start, stop): # return 8 cities, tourOrder, and binary flag (True if valid 4 opt move)\n    # http:\/\/tsp-basics.blogspot.com\/2017\/06\/lin-kernighan-algorithm-basics-part-5.html\n  nb_nn_4opt = 5\n  for (c1, c2, c3, c4, c5, c6) ,tourOrderPrev, G3a in LK_3Move(tour,  nearest_neighbors, start, stop):\n    fwd = (c2 == t_succ(c1, tour))\n    c6_succ = t_succ(c6, tour)\n    c6_pred = t_pred(c6, tour)\n\n    for c7 in nearest_neighbors[c6][:nb_nn_4opt]:\n      if (c7 == c6_succ):continue\n      if (c7 == c6_pred):continue\n      if (c6 == c2): continue\n      if (c7 == c3): continue\n      if (c6 == c3): continue\n      if (c7 == c2): continue\n\n      G3 = G3a - distance(c6, c7)\n      if G3  <= 0: break\n\n      c7_succ = t_succ(c7, tour)\n      c7_pred = t_pred(c7, tour)\n      for c8 in [c7_succ, c7_pred]:\n        if (c7 == c1):continue \n        if (c8 == c2):continue \n        if (c7 == c2):continue \n        if (c8 == c1):continue\n        if (c7 == c3):continue \n        if (c8 == c4):continue\n        if (c7 == c4):continue\n        if (c8 == c3):continue\n\n        G4a = G3 + distance(c7, c8)\n        if tourOrderPrev == TO_126534:\n          if inOrder(c4, c7, c1, fwd, tour):\n             if inOrder(c4, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12653478,  False, G4a # disconnecting, starts 5-opt\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12653487, True, G4a\n          elif inOrder(c5, c7, c3, fwd, tour):\n             if inOrder(c5, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12657834,  True, G4a\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12658734, False, G4a # disconnecting, starts 5-opt\n          else: #  inOrder(c2, c7, c6, fwd):\n             if inOrder(c2, c7, c8, fwd, tour):yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12786534,  True, G4a\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12876534, False, G4a # disconnecting, starts 5-opt\n\n\n        if tourOrderPrev == TO_125634:\n          if inOrder(c4, c7, c1, fwd, tour):\n             if inOrder(c4, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12563478, False, G4a # disconnecting, starts 5-opt\n             else:yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12563487, True, G4a\n          elif inOrder(c6, c7, c3, fwd, tour):\n             if inOrder(c6, c7, c8, fwd, tour):yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12567834, False, G4a # disconnecting, starts 5-opt\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12568734, True, G4a\n          else: #  inOrder(c2, c7, c5, fwd):\n             if inOrder(c2, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12785634, False, G4a # disconnecting, starts 5-opt\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12875634, True, G4a\n\n        if tourOrderPrev == TO_123456:\n            if inOrder(c6, c7, c1, fwd, tour): continue\n            elif inOrder(c4, c7, c5, fwd, tour):\n               if inOrder(c4, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12347856, False, G4a # disconnecting, starts 5-opt\n               else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12348756, False, G4a # disconnecting, starts 5-opt\n            else: #  inOrder(c2, c7, c3, fwd):\n               if inOrder(c2, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12783456, False, G4a # disconnecting, starts 5-opt\n               else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12873456, False, G4a # disconnecting, starts 5-opt\n\n        if tourOrderPrev == TO_125643:\n          if inOrder(c3, c7, c1, fwd, tour):\n             if inOrder(c3, c7, c8, fwd, tour):\n                  yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12564378, False, G4a # disconnecting, starts 5-opt\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12564387, True, G4a\n          elif inOrder(c6, c7, c4, fwd, tour):\n             if inOrder(c6, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12567843, False, G4a # disconnecting, starts 5-opt\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12568743, True, G4a\n          else: #  inOrder(c2, c7, c5, fwd):\n             if inOrder(c2, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12785643, True, G4a\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12875643, False, G4a # disconnecting, starts 5-opt\n\n        if tourOrderPrev == TO_124365:\n          if inOrder(c5, c7, c1, fwd, tour):\n             if inOrder(c5, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12436578, False, G4a # disconnecting, starts 5-op\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12436587, True, G4a\n          elif inOrder(c3, c7, c6, fwd, tour):\n             if inOrder(c3, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12437865, True, G4a\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12438765, False, G4a # disconnecting, starts 5-opt\n\n          else: #  inOrder(c2, c7, c4, fwd):\n             if inOrder(c2, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12784365, False, G4a # disconnecting, starts 5-opt\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12874365, True, G4a\n\n        if tourOrderPrev == TO_123465:\n          if inOrder(c5, c7, c1, fwd, tour):          \n             if inOrder(c5, c7, c8, fwd, tour): continue\n             else:yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12346587, False, G4a # disconnecting, starts 5-opt\n          elif inOrder(c4, c7, c6, fwd, tour):\n             if inOrder(c4, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12347865, False, G4a # disconnecting, starts 5-opt\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12348765, False, G4a # disconnecting, starts 5-opt\n\n          else: #  inOrder(c2, c7, c3, fwd):\n             if inOrder(c2, c7, c8, fwd, tour): yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12783465, True, G4a\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12873465, True, G4a\n\n        if tourOrderPrev == TO_126543:\n          if inOrder(c3, c7, c1, fwd, tour):\n               if inOrder(c3, c7, c8, fwd, tour):continue\n               else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12654387, False, G4a # disconnecting, starts 5-opt\n\n          elif inOrder(c5, c7, c4, fwd, tour):\n             if inOrder(c5, c7, c8, fwd, tour):yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12657843, True, G4a\n             else:yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12658743, True, G4a\n          else: #  inOrder(c2, c7, c6, fwd):\n             if inOrder(c2, c7, c8, fwd, tour):yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12786543, False, G4a # disconnecting, starts 5-opt\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12876543, False, G4a # disconnecting, starts 5-opt\n\n\n        if tourOrderPrev == TO_124356:\n          if inOrder(c6, c7, c1, fwd, tour):\n             if inOrder(c6, c7, c8, fwd, tour): continue\n             else: yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12435687, False, G4a # disconnecting, starts 5-opt\n          elif inOrder(c3, c7, c5, fwd, tour):\n             if inOrder(c3, c7, c8, fwd, tour):yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12437856, True, G4a\n             else:yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12438756, True, G4a\n          else: #  inOrder(c2, c7, c4, fwd):\n             if inOrder(c2, c7, c8, fwd, tour):yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12784356, True, G4a\n             else:yield [c1,c2,c3,c4,c5,c6,c7,c8], TO_12874356, True, G4a\n        else: continue\n\n\n   \n\ndef LK_5Move(tour, nearest_neighbors, start, stop):\n    # Source: http:\/\/tsp-basics.blogspot.com\/2017\/07\/extending-lk-5-opt-move-part-1.html\n  nb_nn_5opt = 5\n  for [c1, c2, c3, c4, c5, c6, c7, c8], tourOrderPrev, valid_4_opt_flag, G4a in LK_4Move(tour, nearest_neighbors, start, stop):\n    fwd = (c2 == t_succ(c1, tour))\n    #goodSufficesList = []  # empty list (sequence)\n    c8_succ = t_succ(c8, tour)\n    c8_pred = t_pred(c8, tour)\n    for c9 in nearest_neighbors[c8][:nb_nn_5opt]:\n        #if tried_c9 >= 2*Max_Breadth_4:\n        #break find_promising_moves\n        if (c9 == c8_succ): continue\n        if (c9 == c8_pred): continue\n        if (c8 == c2): continue\n        if (c9 == c3): continue\n        if (c8 == c3): continue\n        if (c9 == c2): continue\n        if (c8 == c4): continue\n        if (c9 == c5): continue\n        if (c8 == c5): continue\n        if (c9 == c4): continue\n        if (c9 == c1): continue\n\n        G4 = G4a - distance(c8, c9)\n        if G4 < 0: break\n\n        c9_succ = t_succ(c9, tour)\n        c9_pred = t_pred(c9, tour)\n\n        for c10 in [c9_succ, c9_pred]:\n            if (c10 == c1): continue\n            if (c9 == c3): continue\n            if (c10 == c4) : continue\n            if (c9 == c4): continue\n            if (c10 == c3): continue\n            if (c9 == c5): continue \n            if (c10 == c6): continue\n            if (c9 == c6): continue \n            if (c10 == c5): continue\n\n            if tourOrderPrev == TO_12347856:\n                if inOrder(c2, c9, c3, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A347856\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9347856\n\n            if tourOrderPrev == TO_12348756:\n                if inOrder(c2, c9, c3, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A348756\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9348756\n\n            if tourOrderPrev == TO_12783456:\n                if inOrder(c4, c9, c5, fwd, tour):\n                    if inOrder(c4, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278349A56\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_127834A956\n\n            if tourOrderPrev == TO_12873456:\n                if inOrder(c4, c9, c5, fwd, tour):\n                    if inOrder(c4, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1287349A56\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_128734A956\n\n            if tourOrderPrev == TO_12346587:\n                if inOrder(c2, c9, c3, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A346587\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9346587\n\n            if tourOrderPrev == TO_12347865:\n                if inOrder(c2, c9, c3, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A347865\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9347865\n\n            if tourOrderPrev == TO_12783465:\n                if inOrder(c5, c9, c1, fwd, tour):\n                    if inOrder(c5, c10, c9, fwd, tour):\n                       yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12783465A9\n                elif inOrder(c4, c9, c6, fwd, tour):\n                    if inOrder(c4, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278349A65\n                elif inOrder(c8, c9, c3, fwd, tour):\n                    if inOrder(c8, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278A93465\n                else: #  inOrder(c2, c9, c7, fwd, tour)\n                    if inOrder(c2, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9783465\n\n            if tourOrderPrev == TO_12873465:\n                if inOrder(c5, c9, c1, fwd, tour):\n                    if inOrder(c5, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12873465A9\n                elif inOrder(c4, c9, c6, fwd, tour):\n                    if inOrder(c4, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1287349A65\n                elif inOrder(c7, c9, c3, fwd, tour):\n                    if inOrder(c7, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12879A3465\n                else: #  inOrder(c2, c9, c8, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A873465\n\n            if tourOrderPrev == TO_12563478:\n                if inOrder(c4, c9, c7, fwd, tour):\n                    if inOrder(c4, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1256349A78\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_125634A978\n                elif inOrder(c6, c9, c3, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12569A3478\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1256A93478\n                elif inOrder(c2, c9, c5, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A563478\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9563478\n\n            if tourOrderPrev == TO_12563487:\n                if inOrder(c7, c9, c1, fwd, tour):\n                    if inOrder(c7, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12563487A9\n                elif inOrder(c4, c9, c8, fwd, tour):\n                    if inOrder(c4, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1256349A87\n                elif inOrder(c6, c9, c3, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12569A3487\n                else: #  inOrder(c2, c9, c5, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A563487\n\n            if tourOrderPrev == TO_12785634:\n                if inOrder(c6, c9, c3, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278569A34\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_127856A934\n                elif inOrder(c2, c9, c7, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A785634\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9785634\n\n            if tourOrderPrev == TO_12875634:\n                if inOrder(c4, c9, c1, fwd, tour):\n                    if inOrder(c4, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12875634A9\n                elif inOrder(c6, c9, c3, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1287569A34\n                elif inOrder(c7, c9, c5, fwd, tour):\n                    if inOrder(c7, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1287A95634\n                else: #  inOrder(c2, c9, c8, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A875634\n\n            if tourOrderPrev == TO_12567834:\n                if inOrder(c6, c9, c7, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12569A7834\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1256A97834\n\n            if tourOrderPrev == TO_12568734:\n                if inOrder(c4, c9, c1, fwd, tour):\n                    if inOrder(c4, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12568734A9\n                elif inOrder(c7, c9, c3, fwd, tour):\n                    if inOrder(c7, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_125687A934\n                elif inOrder(c6, c9, c8, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12569A8734\n                else: #  inOrder(c2, c9, c5, fwd, tour)\n                    if inOrder(c2, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9568734\n\n            if tourOrderPrev == TO_12653478:\n                if inOrder(c4, c9, c7, fwd, tour):\n                    if inOrder(c4, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1265349A78\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_126534A978\n                elif inOrder(c5, c9, c3, fwd, tour):\n                    if inOrder(c5, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12659A3478\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1265A93478\n                elif inOrder(c2, c9, c6, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A653478\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9653478\n\n            if tourOrderPrev == TO_12653487:\n                if inOrder(c7, c9, c1, fwd, tour):\n                    if inOrder(c7, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12653487A9\n                elif inOrder(c4, c9, c8, fwd, tour):\n                    if inOrder(c4, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1265349A87\n                elif inOrder(c5, c9, c3, fwd, tour):\n                    if inOrder(c5, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1265A93487\n                else: #  inOrder(c2, c9, c6, fwd, tour)\n                    if inOrder(c2, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9653487\n\n            if tourOrderPrev == TO_12657834:\n                if inOrder(c4, c9, c1, fwd, tour):\n                    if inOrder(c4, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12657834A9\n                elif inOrder(c8, c9, c3, fwd, tour):\n                    if inOrder(c8, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_126578A934\n                elif inOrder(c5, c9, c7, fwd, tour):\n                    if inOrder(c5, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12659A7834\n                else: #  inOrder(c2, c9, c6, fwd, tour)\n                    if inOrder(c2, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9657834\n\n            if tourOrderPrev == TO_12658734:\n                if inOrder(c7, c9, c3, fwd, tour):\n                    if inOrder(c7, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1265879A34\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_126587A934\n                elif inOrder(c2, c9, c6, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A658734\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9658734\n\n            if tourOrderPrev == TO_12786534:\n                if inOrder(c4, c9, c1, fwd, tour):\n                    if inOrder(c4, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12786534A9\n                elif inOrder(c5, c9, c3, fwd, tour):\n                    if inOrder(c5, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278659A34\n                elif inOrder(c8, c9, c6, fwd, tour):\n                    if inOrder(c8, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278A96534\n                else: #  inOrder(c2, c9, c7, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A786534\n\n            if tourOrderPrev == TO_12876534:\n                if inOrder(c7, c9, c6, fwd, tour):\n                    if inOrder(c7, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12879A6534\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1287A96534\n\n            if tourOrderPrev == TO_12435687:\n                if inOrder(c3, c9, c5, fwd, tour):\n                    if inOrder(c3, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12439A5687\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1243A95687\n                elif inOrder(c2, c9, c4, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A435687\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9435687\n\n            if tourOrderPrev == TO_12437856:\n                if inOrder(c6, c9, c1, fwd, tour):\n                    if inOrder(c6, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12437856A9\n                elif inOrder(c8, c9, c5, fwd, tour):\n                    if inOrder(c8, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_124378A956\n                elif inOrder(c3, c9, c7, fwd, tour):\n                    if inOrder(c3, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1243A97856\n                else: #  inOrder(c2, c9, c4, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A437856\n\n            if tourOrderPrev == TO_12438756:\n                if inOrder(c6, c9, c1, fwd, tour):\n                    if inOrder(c6, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12438756A9\n                elif inOrder(c7, c9, c5, fwd, tour):\n                    if inOrder(c7, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1243879A56\n                elif inOrder(c3, c9, c8, fwd, tour):\n                    if inOrder(c3, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12439A8756\n                else: #  inOrder(c2, c9, c4, fwd, tour)\n                    if inOrder(c2, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9438756\n\n            if tourOrderPrev == TO_12784356:\n                if inOrder(c6, c9, c1, fwd, tour):\n                    if inOrder(c6, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12784356A9\n                elif inOrder(c3, c9, c5, fwd, tour):\n                    if inOrder(c3, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278439A56\n                elif inOrder(c8, c9, c4, fwd, tour):\n                    if inOrder(c8, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278A94356\n                else: #  inOrder(c2, c9, c7, fwd, tour)\n                    if inOrder(c2, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9784356\n\n            if tourOrderPrev == TO_12874356:\n                if inOrder(c6, c9, c1, fwd, tour):\n                    if inOrder(c6, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12874356A9\n                elif inOrder(c3, c9, c5, fwd, tour):\n                    if inOrder(c3, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_128743A956\n                elif inOrder(c7, c9, c4, fwd, tour):\n                    if inOrder(c7, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12879A4356\n                else: #  inOrder(c2, c9, c8, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A874356\n\n            if tourOrderPrev == TO_12436578:\n                if inOrder(c5, c9, c7, fwd, tour):\n                    if inOrder(c5, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1243659A78\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_124365A978\n                elif inOrder(c3, c9, c6, fwd, tour):\n                    if inOrder(c3, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12439A6578\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1243A96578\n                elif inOrder(c2, c9, c4, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A436578\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9436578\n\n            if tourOrderPrev == TO_12436587:\n                if inOrder(c7, c9, c1, fwd, tour):\n                    if inOrder(c7, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12436587A9\n                elif inOrder(c5, c9, c8, fwd, tour):\n                    if inOrder(c5, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1243659A87\n                elif inOrder(c3, c9, c6, fwd, tour):\n                    if inOrder(c3, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1243A96587\n                else: #  inOrder(c2, c9, c4, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A436587\n\n            if tourOrderPrev == TO_12437865:\n                if inOrder(c5, c9, c1, fwd, tour):\n                    if inOrder(c5, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12437865A9\n                elif inOrder(c8, c9, c6, fwd, tour):\n                    if inOrder(c8, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_124378A965\n                elif inOrder(c3, c9, c7, fwd, tour):\n                    if inOrder(c3, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12439A7865\n                else: #  inOrder(c2, c9, c4, fwd, tour)\n                    if inOrder(c2, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9437865\n\n            if tourOrderPrev == TO_12438765:\n                if inOrder(c7, c9, c6, fwd, tour):\n                    if inOrder(c7, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1243879A65\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_124387A965\n\n            if tourOrderPrev == TO_12784365:\n                if inOrder(c3, c9, c6, fwd, tour):\n                    if inOrder(c3, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278439A65\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_127843A965\n                elif inOrder(c2, c9, c7, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A784365\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9784365\n\n            if tourOrderPrev == TO_12874365:\n                if inOrder(c5, c9, c1, fwd, tour):\n                    if inOrder(c5, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12874365A9\n                elif inOrder(c3, c9, c6, fwd, tour):\n                    if inOrder(c3, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_128743A965\n                elif inOrder(c7, c9, c4, fwd, tour):\n                    if inOrder(c7, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1287A94365\n                else: #  inOrder(c2, c9, c8, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A874365\n\n            if tourOrderPrev == TO_12564378:\n                if inOrder(c3, c9, c7, fwd, tour):\n                    if inOrder(c3, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1256439A78\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_125643A978\n                elif inOrder(c6, c9, c4, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12569A4378\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1256A94378\n                elif inOrder(c2, c9, c5, fwd, tour):\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A564378\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9564378\n\n            if tourOrderPrev == TO_12564387:\n                if inOrder(c7, c9, c1, fwd, tour):\n                    if inOrder(c7, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12564387A9\n                elif inOrder(c3, c9, c8, fwd, tour):\n                    if inOrder(c3, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1256439A87\n                elif inOrder(c6, c9, c4, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12569A4387\n                else: #  inOrder(c2, c9, c5, fwd, tour)\n                    if inOrder(c2, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12A9564387\n\n            if tourOrderPrev == TO_12567843:\n                if inOrder(c6, c9, c7, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12569A7843\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1256A97843\n\n            if tourOrderPrev == TO_12568743:\n                if inOrder(c3, c9, c1, fwd, tour):\n                    if inOrder(c3, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12568743A9\n                elif inOrder(c7, c9, c4, fwd, tour):\n                    if inOrder(c7, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_125687A943\n                elif inOrder(c6, c9, c8, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12569A8743\n                else: #  inOrder(c2, c9, c5, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A568743\n\n            if tourOrderPrev == TO_12785643:\n                if inOrder(c3, c9, c1, fwd, tour):\n                    if inOrder(c3, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12785643A9\n                elif inOrder(c6, c9, c4, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278569A43\n                elif inOrder(c8, c9, c5, fwd, tour):\n                    if inOrder(c8, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278A95643\n                else: #  inOrder(c2, c9, c7, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A785643\n\n            if tourOrderPrev == TO_12875643:\n                if inOrder(c6, c9, c4, fwd, tour):\n                    if inOrder(c6, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1287569A43\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_128756A943\n                elif inOrder(c7, c9, c5, fwd, tour):\n                    if inOrder(c7, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12879A5643\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1287A95643\n\n            if tourOrderPrev == TO_12654387:\n                if inOrder(c5, c9, c4, fwd, tour):\n                    if inOrder(c5, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12659A4387\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1265A94387\n\n            if tourOrderPrev == TO_12657843:\n                if inOrder(c3, c9, c1, fwd, tour):\n                    if inOrder(c3, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12657843A9\n                elif inOrder(c8, c9, c4, fwd, tour):\n                    if inOrder(c8, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_126578A943\n                elif inOrder(c5, c9, c7, fwd, tour):\n                    if inOrder(c5, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1265A97843\n                else: #  inOrder(c2, c9, c6, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A657843\n\n            if tourOrderPrev == TO_12658743:\n                if inOrder(c3, c9, c1, fwd, tour):\n                    if inOrder(c3, c10, c9, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12658743A9\n                elif inOrder(c7, c9, c4, fwd, tour):\n                    if inOrder(c7, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1265879A43\n                elif inOrder(c5, c9, c8, fwd, tour):\n                    if inOrder(c5, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_12659A8743\n                else: #  inOrder(c2, c9, c6, fwd, tour)\n                    if inOrder(c2, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_129A658743\n\n            if tourOrderPrev == TO_12786543:\n                if inOrder(c5, c9, c4, fwd, tour):\n                    if inOrder(c5, c9, c10, fwd, tour):\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_1278659A43\n                    else:\n                        yield [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10], TO_127865A943\n            else: continue # inspect next c10\n\nN = 197769\n\nTO_00 = 0  # unknown or unmaintained sequence\nTO_1234 = 1\nTO_1243 = 2  # 2-opt\n# descendants of TO_1234\nTO_123456 = 3\nTO_123465 = 4\nTO_125634 = 5  # 3-opt\nTO_126534 = 6  # 3-opt\n# descendants of TO_1243\nTO_124356 = 7\nTO_124365 = 8  # 3-opt\nTO_125643 = 9  # 3-opt\nTO_126543 = 10\n\nTO_12874356 = 'TO_12874356'\n# descendants of TO_123456\nTO_12345678 = 'TO_12345678'\nTO_12345687 = 'TO_12345687'\nTO_12347856 = 'TO_12347856'\nTO_12348756 = 'TO_12348756'\nTO_12783456 = 'TO_12783456'\nTO_12873456 = 'TO_12873456'\n# descendants of TO_123465\nTO_12346578 = 'TO_12346578'\nTO_12346587 = 'TO_12346587'\nTO_12347865 = 'TO_12347865'\nTO_12348765 = 'TO_12348765'\nTO_12783465 = 'TO_12783465'  # 4-opt 1\nTO_12873465 = 'TO_12873465'  # 4-opt 2\n# descendants of TO_125634\nTO_12563478 = 'TO_12563478'\nTO_12563487 = 'TO_12563487'  # 4-opt 3\nTO_12785634 = 'TO_12785634'\nTO_12875634 = 'TO_12875634'  # 4-opt 4\nTO_12567834 = 'TO_12567834'\nTO_12568734 = 'TO_12568734'  # 4-opt 5\n# descendants of TO_126534\nTO_12653478 = 'TO_12653478'\nTO_12653487 = 'TO_12653487'  # 4-opt 6\nTO_12657834 = 'TO_12657834'  # 4-opt 7\nTO_12658734 = 'TO_12658734'\nTO_12786534 = 'TO_12786534'  # 4-opt 8\nTO_12876534 = 'TO_12876534'\n# descendants of TO_124356\nTO_12435678 = 'TO_12435678'\nTO_12435687 = 'TO_12435687'\nTO_12437856 = 'TO_12437856'  # 4-opt 9\nTO_12438756 = 'TO_12438756'  # 4-opt 10\nTO_12784356 = 'TO_12784356'  # 4-opt 11\nTO_12874356 = 'TO_12874356'  # 4-opt 12\n# descendants of TO_124365\nTO_12436578 = 'TO_12436578'\nTO_12436587 = 'TO_12436587'  # 4-opt 13 \nTO_12437865 = 'TO_12437865'  # 4-opt 14\nTO_12438765 = 'TO_12438765'\nTO_12784365 = 'TO_12784365'\nTO_12874365 = 'TO_12874365'  # 4-opt 15\n# descendants of TO_125643\nTO_12564378 = 'TO_12564378'\nTO_12564387 = 'TO_12564387'  # 4-opt 16 \nTO_12567843 = 'TO_12567843'\nTO_12568743 = 'TO_12568743'  # 4-opt 17\nTO_12785643 = 'TO_12785643'  # 4-opt 18\nTO_12875643 = 'TO_12875643'\n# descendants of TO_126543\nTO_12654378 = 'TO_12654378'\nTO_12654387 = 'TO_12654387'\nTO_12657843 = 'TO_12657843'  # 4-opt 19\nTO_12658743 = 'TO_12658743'  # 4-opt 20\nTO_12786543 = 'TO_12786543'\nTO_12876543 = 'TO_12876543'\n\nVALID_4_OPT = [TO_12783465,TO_12873465,TO_12563487,TO_12875634,TO_12568734,TO_12653487,TO_12657834,TO_12786534,\nTO_12437856,TO_12438756,TO_12784356,TO_12874356,TO_12436587,TO_12437865,TO_12874365,TO_12564387,TO_12568743,TO_12785643,TO_12657843,TO_12658743]\n\n\n# descendants of TO_12345678\nTO_123456789A = 'TO_123456789A'\nTO_12345678A9 = 'TO_12345678A9'\nTO_1234569A78 = 'TO_1234569A78'\nTO_123456A978 = 'TO_123456A978'\nTO_12349A5678 = 'TO_12349A5678'\nTO_1234A95678 = 'TO_1234A95678'\nTO_129A345678 = 'TO_129A345678'\nTO_12A9345678 = 'TO_12A9345678'\n# descendants of TO_12345687\nTO_123456879A = 'TO_123456879A'\nTO_12345687A9 = 'TO_12345687A9'\nTO_1234569A87 = 'TO_1234569A87'\nTO_123456A987 = 'TO_123456A987'\nTO_12349A5687 = 'TO_12349A5687'\nTO_1234A95687 = 'TO_1234A95687'\nTO_129A345687 = 'TO_129A345687'\nTO_12A9345687 = 'TO_12A9345687'\n# descendants of TO_12347856\nTO_123478569A = 'TO_123478569A'\nTO_12347856A9 = 'TO_12347856A9'\nTO_1234789A56 = 'TO_1234789A56'\nTO_123478A956 = 'TO_123478A956'\nTO_12349A7856 = 'TO_12349A7856'\nTO_1234A97856 = 'TO_1234A97856'\nTO_129A347856 = 'TO_129A347856'  # 5-opt\nTO_12A9347856 = 'TO_12A9347856'  # 5-opt\n# descendants of TO_12348756\nTO_123487569A = 'TO_123487569A'\nTO_12348756A9 = 'TO_12348756A9'\nTO_1234879A56 = 'TO_1234879A56'\nTO_123487A956 = 'TO_123487A956'\nTO_12349A8756 = 'TO_12349A8756'\nTO_1234A98756 = 'TO_1234A98756'\nTO_129A348756 = 'TO_129A348756'  # 5-opt\nTO_12A9348756 = 'TO_12A9348756'  # 5-opt\n# descendants of TO_12783456\nTO_127834569A = 'TO_127834569A'\nTO_12783456A9 = 'TO_12783456A9'\nTO_1278349A56 = 'TO_1278349A56'  # 5-opt\nTO_127834A956 =   'TO_127834A956'# 5-opt\nTO_12789A3456 = 'TO_12789A3456'\nTO_1278A93456 = 'TO_1278A93456'\nTO_129A783456 = 'TO_129A783456'\nTO_12A9783456 = 'TO_12A9783456'\n# descendants of TO_12873456\nTO_128734569A = 'TO_128734569A'\nTO_12873456A9 = 'TO_12873456A9'\nTO_1287349A56 =   'TO_1287349A56'# 5-opt\nTO_128734A956 = 'TO_128734A956'  # 5-opt\nTO_12879A3456 = 'TO_12879A3456'\nTO_1287A93456 = 'TO_1287A93456'\nTO_129A873456 = 'TO_129A873456'\nTO_12A9873456 = 'TO_12A9873456'\n  # descendants of TO_12346578\nTO_123465789A = 'TO_123465789A'\nTO_12346578A9 = 'TO_12346578A9'\nTO_1234659A78 = 'TO_1234659A78'\nTO_123465A978 = 'TO_123465A978'\nTO_12349A6578 = 'TO_12349A6578'\nTO_1234A96578 = 'TO_1234A96578'\nTO_129A346578 = 'TO_129A346578'\nTO_12A9346578 = 'TO_12A9346578'\n  # descendants of TO_12346587\nTO_123465879A = 'TO_123465879A'\nTO_12346587A9 = 'TO_12346587A9'\nTO_1234659A87 = 'TO_1234659A87'\nTO_123465A987 = 'TO_123465A987'\nTO_12349A6587 = 'TO_12349A6587'\nTO_1234A96587 = 'TO_1234A96587'\nTO_129A346587 = 'TO_129A346587'  # 5-opt\nTO_12A9346587 =  'TO_12A9346587' # 5-opt\n  # descendants of TO_12347865\nTO_123478659A = 'TO_123478659A'\nTO_12347865A9 = 'TO_12347865A9'\nTO_1234789A65 = 'TO_1234789A65'\nTO_123478A965 = 'TO_123478A965'\nTO_12349A7865 = 'TO_12349A7865'\nTO_1234A97865 = 'TO_1234A97865'\nTO_129A347865 = 'TO_129A347865'  # 5-opt\nTO_12A9347865 = 'TO_12A9347865'  # 5-opt\n# descendants of TO_12348765\nTO_123487659A = 'TO_123487659A'\nTO_12348765A9 = 'TO_12348765A9'\nTO_1234879A65 = 'TO_1234879A65'\nTO_123487A965 = 'TO_123487A965'\nTO_12349A8765 = 'TO_12349A8765'\nTO_1234A98765 = 'TO_1234A98765'\nTO_129A348765 = 'TO_129A348765'\nTO_12A9348765 = 'TO_12A9348765'\n # descendants of TO_12783465\nTO_127834659A = 'TO_127834659A'\nTO_12783465A9 = 'TO_12783465A9'  # 5-opt\nTO_1278349A65 = 'TO_1278349A65'  # 5-opt\nTO_127834A965 = 'TO_127834A965'\nTO_12789A3465 = 'TO_12789A3465'\nTO_1278A93465 = 'TO_1278A93465'  # 5-opt\nTO_129A783465 = 'TO_129A783465' \nTO_12A9783465 = 'TO_12A9783465'  # 5-opt\n# descendants of TO_12873465\nTO_128734659A = 'TO_128734659A'\nTO_12873465A9 = 'TO_12873465A9'  # 5-opt\nTO_1287349A65 =  'TO_1287349A65' # 5-opt\nTO_128734A965 = 'TO_128734A965'\nTO_12879A3465 = 'TO_12879A3465'  # 5-opt\nTO_1287A93465 = 'TO_1287A93465'\nTO_129A873465 =  'TO_129A873465' # 5-opt\nTO_12A9873465 = 'TO_12A9873465'\n# descendants of TO_12563478\nTO_125634789A = 'TO_125634789A'\nTO_12563478A9 = 'TO_12563478A9'\nTO_1256349A78 = 'TO_1256349A78'  # 5-opt\nTO_125634A978 = 'TO_125634A978'  # 5-opt\nTO_12569A3478 = 'TO_12569A3478'  # 5-opt\nTO_1256A93478 = 'TO_1256A93478'  # 5-opt\nTO_129A563478 = 'TO_129A563478'  # 5-opt\nTO_12A9563478 = 'TO_12A9563478'  # 5-opt\n# descendants of TO_12563487\nTO_125634879A = 'TO_125634879A'\nTO_12563487A9 = 'TO_12563487A9'  # 5-opt\nTO_1256349A87 = 'TO_1256349A87'  # 5-opt\nTO_125634A987 = 'TO_125634A987'\nTO_12569A3487 = 'TO_12569A3487'  # 5-opt\nTO_1256A93487 = 'TO_1256A93487' \nTO_129A563487 =  'TO_129A563487' # 5-opt\nTO_12A9563487 = 'TO_12A9563487'\n# descendants of TO_12785634\nTO_127856349A = 'TO_127856349A'\nTO_12785634A9 = 'TO_12785634A9'\nTO_1278569A34 = 'TO_1278569A34'  # 5-opt\nTO_127856A934 = 'TO_127856A934'  # 5-opt\nTO_12789A5634 = 'TO_12789A5634'\nTO_1278A95634 = 'TO_1278A95634'\nTO_129A785634 = 'TO_129A785634'  # 5-opt\nTO_12A9785634 = 'TO_12A9785634'  # 5-opt\n# descendants of TO_12875634\nTO_128756349A = 'TO_128756349A'\nTO_12875634A9 =  'TO_12875634A9' # 5-opt\nTO_1287569A34 =  'TO_1287569A34' # 5-opt\nTO_128756A934 = 'TO_128756A934'\nTO_12879A5634 = 'TO_12879A5634'\nTO_1287A95634 = 'TO_1287A95634'  # 5-opt\nTO_129A875634 =   'TO_129A875634'# 5-opt\nTO_12A9875634 = 'TO_12A9875634'\n# descendants of TO_12567834\nTO_125678349A = 'TO_125678349A'\nTO_12567834A9 = 'TO_12567834A9'\nTO_1256789A34 = 'TO_1256789A34'\nTO_125678A934 = 'TO_125678A934'\nTO_12569A7834 =  'TO_12569A7834' # 5-opt\nTO_1256A97834 = 'TO_1256A97834'  # 5-opt\nTO_129A567834 = 'TO_129A567834'\nTO_12A9567834 = 'TO_12A9567834'\n# descendants of TO_12568734\nTO_125687349A = 'TO_125687349A'\nTO_12568734A9 = 'TO_12568734A9'  # 5-opt\nTO_1256879A34 = 'TO_1256879A34'\nTO_125687A934 = 'TO_125687A934'  # 5-opt\nTO_12569A8734 = 'TO_12569A8734'  # 5-opt\nTO_1256A98734 = 'TO_1256A98734'\nTO_129A568734 = 'TO_129A568734'\nTO_12A9568734 = 'TO_12A9568734'  # 5-opt\n# descendants of TO_12653478\nTO_126534789A = 'TO_126534789A'\nTO_12653478A9 = 'TO_12653478A9'\nTO_1265349A78 = 'TO_1265349A78'  # 5-opt\nTO_126534A978 = 'TO_126534A978'  # 5-opt\nTO_12659A3478 =  'TO_12659A3478' # 5-opt\nTO_1265A93478 = 'TO_1265A93478'  # 5-opt\nTO_129A653478 = 'TO_129A653478'  # 5-opt\nTO_12A9653478 = 'TO_12A9653478'  # 5-opt\n# descendants of TO_12653487\nTO_126534879A = 'TO_126534879A'\nTO_12653487A9 = 'TO_12653487A9'  # 5-opt\nTO_1265349A87 = 'TO_1265349A87'  # 5-opt\nTO_126534A987 = 'TO_126534A987'\nTO_12659A3487 = 'TO_12659A3487'\nTO_1265A93487 =  'TO_1265A93487' # 5-opt\nTO_129A653487 = 'TO_129A653487'\nTO_12A9653487 = 'TO_12A9653487'  # 5-opt\n# descendants of TO_12657834\nTO_126578349A = 'TO_126578349A'\nTO_12657834A9 = 'TO_12657834A9'  # 5-opt\nTO_1265789A34 = 'TO_1265789A34'\nTO_126578A934 =  'TO_126578A934' # 5-opt\nTO_12659A7834 =   'TO_12659A7834'# 5-opt\nTO_1265A97834 = 'TO_1265A97834'\nTO_129A657834 = 'TO_129A657834'\nTO_12A9657834 = 'TO_12A9657834'  # 5-opt\n# descendants of TO_12658734\nTO_126587349A = 'TO_126587349A'\nTO_12658734A9 = 'TO_12658734A9'\nTO_1265879A34 = 'TO_1265879A34'  # 5-opt\nTO_126587A934 =  'TO_126587A934' # 5-opt\nTO_12659A8734 = 'TO_12659A8734'\nTO_1265A98734 = 'TO_1265A98734'\nTO_129A658734 = 'TO_129A658734'  # 5-opt\nTO_12A9658734 = 'TO_12A9658734'  # 5-opt\n# descendants of TO_12786534\nTO_127865349A = 'TO_127865349A'\nTO_12786534A9 = 'TO_12786534A9'  # 5-opt\nTO_1278659A34 = 'TO_1278659A34'  # 5-opt\nTO_127865A934 = 'TO_127865A934'\nTO_12789A6534 = 'TO_12789A6534'\nTO_1278A96534 = 'TO_1278A96534'  # 5-opt\nTO_129A786534 = 'TO_129A786534'  # 5-opt\nTO_12A9786534 = 'TO_12A9786534'\n# descendants of TO_12876534\nTO_128765349A = 'TO_128765349A'\nTO_12876534A9 = 'TO_12876534A9'\nTO_1287659A34 = 'TO_1287659A34'\nTO_128765A934 = 'TO_128765A934'\nTO_12879A6534 = 'TO_12879A6534'  # 5-opt\nTO_1287A96534 = 'TO_1287A96534'  # 5-opt\nTO_129A876534 = 'TO_129A876534'\nTO_12A9876534 = 'TO_12A9876534'\n# descendants of TO_12435678\nTO_124356789A = 'TO_124356789A'\nTO_12435678A9 = 'TO_12435678A9'\nTO_1243569A78 = 'TO_1243569A78'\nTO_124356A978 = 'TO_124356A978'\nTO_12439A5678 = 'TO_12439A5678'\nTO_1243A95678 = 'TO_1243A95678'\nTO_129A435678 = 'TO_129A435678'\nTO_12A9435678 = 'TO_12A9435678'\n# descendants of TO_12435687\nTO_124356879A = 'TO_124356879A'\nTO_12435687A9 = 'TO_12435687A9'\nTO_1243569A87 = 'TO_1243569A87'\nTO_124356A987 = 'TO_124356A987'\nTO_12439A5687 = 'TO_12439A5687'  # 5-opt\nTO_1243A95687 = 'TO_1243A95687'  # 5-opt\nTO_129A435687 = 'TO_129A435687'  # 5-opt\nTO_12A9435687 = 'TO_12A9435687'  # 5-opt\n# descendants of TO_12437856\nTO_124378569A = 'TO_124378569A'\nTO_12437856A9 = 'TO_12437856A9'  # 5-opt\nTO_1243789A56 = 'TO_1243789A56'\nTO_124378A956 = 'TO_124378A956'  # 5-opt\nTO_12439A7856 = 'TO_12439A7856'\nTO_1243A97856 = 'TO_1243A97856'  # 5-opt\nTO_129A437856 = 'TO_129A437856'  # 5-opt\nTO_12A9437856 = 'TO_12A9437856'\n# descendants of TO_12438756\nTO_124387569A = 'TO_124387569A'\nTO_12438756A9 = 'TO_12438756A9'  # 5-opt\nTO_1243879A56 = 'TO_1243879A56'  # 5-opt\nTO_124387A956 = 'TO_1243879A56'\nTO_12439A8756 = 'TO_1243879A56'  # 5-opt\nTO_1243A98756 = 'TO_1243A98756'\nTO_129A438756 = 'TO_129A438756'\nTO_12A9438756 = 'TO_12A9438756'  # 5-opt\n# descendants of TO_12784356\nTO_127843569A = 'TO_127843569A'\nTO_12784356A9 = 'TO_12784356A9'  # 5-opt\nTO_1278439A56 =  'TO_1278439A56' # 5-opt\nTO_127843A956 = 'TO_127843A956'\nTO_12789A4356 = 'TO_12789A4356'\nTO_1278A94356 =  'TO_1278A94356' # 5-opt\nTO_129A784356 ='TO_129A784356' \nTO_12A9784356 = 'TO_12A9784356'  # 5-opt\n# descendants of TO_12874356\nTO_128743569A = 'TO_128743569A'\nTO_12874356A9 =  'TO_12874356A9' # 5-opt\nTO_1287439A56 ='TO_1287439A56' \nTO_128743A956 = 'TO_128743A956'  # 5-opt\nTO_12879A4356 = 'TO_12879A4356'  # 5-opt\nTO_1287A94356 = 'TO_1287A94356'\nTO_129A874356 =  'TO_129A874356' # 5-opt\nTO_12A9874356 = 'TO_12A9874356'\n# descendants of TO_12436578\nTO_124365789A = 'TO_124365789A'\nTO_12436578A9 = 'TO_12436578A9'\nTO_1243659A78 = 'TO_1243659A78'  # 5-opt\nTO_124365A978 = 'TO_124365A978'  # 5-opt\nTO_12439A6578 = 'TO_12439A6578'  # 5-opt\nTO_1243A96578 =  'TO_1243A96578' # 5-opt\nTO_129A436578 =  'TO_129A436578' # 5-opt\nTO_12A9436578 = 'TO_12A9436578'  # 5-opt\n# descendants of TO_12436587\nTO_124365879A = 'TO_124365879A'\nTO_12436587A9 = 'TO_12436587A9'  # 5-opt\nTO_1243659A87 =  'TO_1243659A87' # 5-opt\nTO_124365A987 = 'TO_124365A987'\nTO_12439A6587 = 'TO_12439A6587'\nTO_1243A96587 = 'TO_1243A96587'  # 5-opt\nTO_129A436587 =  'TO_129A436587' # 5-opt\nTO_12A9436587 = 'TO_12A9436587'\n# descendants of TO_12437865\nTO_124378659A = 'TO_124378659A'\nTO_12437865A9 = 'TO_12437865A9'  # 5-opt\nTO_1243789A65 = 'TO_1243789A65'\nTO_124378A965 = 'TO_124378A965'  # 5-opt\nTO_12439A7865 = 'TO_12439A7865'  # 5-opt\nTO_1243A97865 = 'TO_1243A97865'\nTO_129A437865 = 'TO_129A437865'\nTO_12A9437865 = 'TO_12A9437865'  # 5-opt\n# descendants of TO_12438765\nTO_124387659A = 'TO_124387659A'\nTO_12438765A9 = 'TO_12438765A9'\nTO_1243879A65 = 'TO_1243879A65'  # 5-opt\nTO_124387A965 = 'TO_124387A965'  # 5-opt\nTO_12439A8765 = 'TO_12439A8765'\nTO_1243A98765 = 'TO_1243A98765'\nTO_129A438765 = 'TO_129A438765'\nTO_12A9438765 = 'TO_12A9438765'\n# descendants of TO_12784365\nTO_127843659A = 'TO_127843659A'\nTO_12784365A9 = 'TO_12784365A9'\nTO_1278439A65 = 'TO_1278439A65'  # 5-opt\nTO_127843A965 = 'TO_127843A965'  # 5-opt\nTO_12789A4365 = 'TO_12789A4365'\nTO_1278A94365 = 'TO_1278A94365'\nTO_129A784365 = 'TO_129A784365'  # 5-opt\nTO_12A9784365 = 'TO_12A9784365'  # 5-opt\n# descendants of TO_12874365\nTO_128743659A = 'TO_128743659A'\nTO_12874365A9 = 'TO_12874365A9'  # 5-opt\nTO_1287439A65 = 'TO_1287439A65'\nTO_128743A965 = 'TO_128743A965'  # 5-opt\nTO_12879A4365 = 'TO_12879A4365'\nTO_1287A94365 = 'TO_1287A94365'  # 5-opt\nTO_129A874365 = 'TO_129A874365'  # 5-opt\nTO_12A9874365 = 'TO_12A9874365'\n# descendants of TO_12564378\nTO_125643789A = 'TO_125643789A'\nTO_12564378A9 = 'TO_12564378A9'\nTO_1256439A78 = 'TO_1256439A78'  # 5-opt\nTO_125643A978 = 'TO_125643A978'  # 5-opt\nTO_12569A4378 = 'TO_12569A4378'  # 5-opt\nTO_1256A94378 = 'TO_1256A94378'  # 5-opt\nTO_129A564378 = 'TO_129A564378'  # 5-opt\nTO_12A9564378 = 'TO_12A9564378'  # 5-opt\n# descendants of TO_12564387\nTO_125643879A = 'TO_125643879A'\nTO_12564387A9 = 'TO_12564387A9'  # 5-opt\nTO_1256439A87 = 'TO_1256439A87'  # 5-opt\nTO_125643A987 = 'TO_125643A987'\nTO_12569A4387 = 'TO_12569A4387'  # 5-opt\nTO_1256A94387 = 'TO_1256A94387'\nTO_129A564387 = 'TO_129A564387'\nTO_12A9564387 =  'TO_12A9564387' # 5-opt\n# descendants of TO_12567843\nTO_125678439A = 'TO_125678439A'\nTO_12567843A9 = 'TO_12567843A9'\nTO_1256789A43 = 'TO_1256789A43'\nTO_125678A943 = 'TO_125678A943'\nTO_12569A7843 = 'TO_12569A7843'  # 5-opt\nTO_1256A97843 = 'TO_1256A97843'  # 5-opt\nTO_129A567843 = 'TO_129A567843'\nTO_12A9567843 = 'TO_12A9567843'\n# descendants of TO_12568743\nTO_125687439A = 'TO_125687439A'\nTO_12568743A9 = 'TO_12568743A9'  # 5-opt\nTO_1256879A43 = 'TO_1256879A43'\nTO_125687A943 = 'TO_125687A943'  # 5-opt\nTO_12569A8743 =  'TO_12569A8743' # 5-opt\nTO_1256A98743 = 'TO_1256A98743'\nTO_129A568743 = 'TO_129A568743'  # 5-opt\nTO_12A9568743 = 'TO_12A9568743'\n# descendants of TO_12785643\nTO_127856439A = 'TO_127856439A'\nTO_12785643A9 = 'TO_12785643A9'  # 5-opt\nTO_1278569A43 = 'TO_1278569A43'  # 5-opt\nTO_127856A943 = 'TO_127856A943'\nTO_12789A5643 = 'TO_12789A5643'\nTO_1278A95643 = 'TO_1278A95643'  # 5-opt\nTO_129A785643 = 'TO_129A785643'  # 5-opt\nTO_12A9785643 = 'TO_12A9785643'\n# descendants of TO_12875643\nTO_128756439A = 'TO_128756439A'\nTO_12875643A9 = 'TO_12875643A9'\nTO_1287569A43 = 'TO_1287569A43'  # 5-opt\nTO_128756A943 = 'TO_128756A943'  # 5-opt\nTO_12879A5643 = 'TO_12879A5643'  # 5-opt\nTO_1287A95643 = 'TO_1287A95643'  # 5-opt\nTO_129A875643 = 'TO_129A875643'\nTO_12A9875643 = 'TO_12A9875643'\n# descendants of TO_12654378\nTO_126543789A = 'TO_126543789A'\nTO_12654378A9 = 'TO_12654378A9'\nTO_1265439A78 = 'TO_1265439A78'\nTO_126543A978 = 'TO_126543A978'\nTO_12659A4378 = 'TO_12659A4378'\nTO_1265A94378 = 'TO_1265A94378'\nTO_129A654378 = 'TO_129A654378'\nTO_12A9654378 = 'TO_12A9654378'\n# descendants of TO_12654387\nTO_126543879A = 'TO_126543879A'\nTO_12654387A9 = 'TO_12654387A9'\nTO_1265439A87 = 'TO_1265439A87'\nTO_126543A987 = 'TO_126543A987'\nTO_12659A4387 =   'TO_12659A4387'# 5-opt\nTO_1265A94387 =   'TO_1265A94387'# 5-opt\nTO_129A654387 = 'TO_129A654387'\nTO_12A9654387 = 'TO_12A9654387'\n# descendants of TO_12657843\nTO_126578439A = 'TO_126578439A'\nTO_12657843A9 =   'TO_12657843A9'# 5-opt\nTO_1265789A43 = 'TO_1265789A43'\nTO_126578A943 =   'TO_126578A943'# 5-opt\nTO_12659A7843 = 'TO_12659A7843'\nTO_1265A97843 =   'TO_1265A97843'# 5-opt\nTO_129A657843 =   'TO_129A657843'# 5-opt\nTO_12A9657843 = 'TO_12A9657843'\n# descendants of TO_12658743\nTO_126587439A = 'TO_126587439A'\nTO_12658743A9 = 'TO_12658743A9'  # 5-opt\nTO_1265879A43 =   'TO_1265879A43'# 5-opt\nTO_126587A943 = 'TO_126587A943'\nTO_12659A8743 =   'TO_12659A8743'# 5-opt\nTO_1265A98743 = 'TO_1265A98743'\nTO_129A658743 =   'TO_129A658743'# 5-opt\nTO_12A9658743 = 'TO_12A9658743'\n# descendants of TO_12786543\nTO_127865439A = 'TO_127865439A'\nTO_12786543A9 = 'TO_12786543A9'\nTO_1278659A43 = 'TO_1278659A43'  # 5-opt\nTO_127865A943 = 'TO_127865A943'  # 5-opt\nTO_12789A6543 = 'TO_12789A6543'\nTO_1278A96543 = 'TO_1278A96543'\nTO_129A786543 = 'TO_129A786543'\nTO_12A9786543 = 'TO_12A9786543'\n# descendants of TO_12876543\nTO_128765439A = 'TO_128765439A'\nTO_12876543A9 = 'TO_12876543A9'\nTO_1287659A43 = 'TO_1287659A43'\nTO_128765A943 = 'TO_128765A943'\nTO_12879A6543 = 'TO_12879A6543'\nTO_1287A96543 = 'TO_1287A96543'\nTO_129A876543 = 'TO_129A876543'\nTO_12A9876543 = 'TO_12A9876543'","dcae9bae":"import random\n\n# Like a regular dict, except we can also get\n# a random key in (amortized) constant time.\nclass Dict:\n\n    # The keys and values are stored as lists. An index\n    # associates the key to the position of the keys\/values.\n    def __init__(self):\n        self.index = dict()\n        self.keys = list()\n        self.values = list()\n\n    def __contains__(self, key):\n        return key in self.index\n\n    def __len__(self):\n        return len(self.keys)\n\n    # Inserts the new key\/value at the end of the lists.\n    def __setitem__(self, key, value):\n        assert key not in self\n        self.index[key] = len(self.keys)\n        self.keys.append(key)\n        self.values.append(value)\n\n    def __getitem__(self, key):\n        return self.values[self.index[key]]\n\n    # Overwrites the key\/value to be deleted by the last\n    # key\/value in the lists, then shrinks the lists.\n    def __delitem__(self, key):\n        assert key in self\n        i = self.index[key]\n        k = self.keys[-1]\n        v = self.values[-1]\n        self.index[k] = i\n        self.keys[i] = k\n        self.values[i] = v\n        del self.index[key]\n        del self.keys[-1]\n        del self.values[-1]\n\n    def random_key(self):\n        return random.choice(self.keys)\n\n# An undirected graph. Might contain redundant edges.\nclass Graph:\n\n    # A dictionary associates each vertex\n    # to the list of vertices it is adjacent to.\n    def __init__(self):\n        self.edges = Dict()\n\n    def empty(self):\n        return len(self.edges) == 0\n\n    def add_edge(self, v0, v1):\n        # Forward\n        if v0 not in self.edges:\n            self.edges[v0] = list()\n        self.edges[v0].append(v1)\n        # Backward\n        if v1 not in self.edges:\n            self.edges[v1] = list()\n        self.edges[v1].append(v0)\n\n    def remove_edge(self, v0, v1):\n        # Forward\n        self.edges[v0].remove(v1)\n        if len(self.edges[v0]) == 0:\n            del self.edges[v0]\n        # Backward\n        self.edges[v1].remove(v0)\n        if len(self.edges[v1]) == 0:\n            del self.edges[v1]\n\n    # Returns a random vertex from the graph.\n    def random_vertex(self):\n        assert not self.empty()\n        return self.edges.random_key()\n\n    # Returns a random vertex adjacent to the one specified.\n    def random_adjacent(self, v):\n        assert v in self.edges\n        return random.choice(self.edges[v])\n\n    # Creates a graph from subtours.\n    @staticmethod\n    def from_subtours(subtours):\n        graph = Graph()\n        for subtour in subtours:\n            assert subtour[0] == subtour[-1]\n            for i in range(len(subtour) - 1):\n                v0, v1 = subtour[i], subtour[i + 1]\n                graph.add_edge(v0, v1)\n        return graph\n\n    # Creates subtours from a graph.\n    def to_subtours(self, v=0):\n        while not self.empty():\n            # Prefer to start from v\n            if v not in self.edges:\n                v = self.random_vertex()\n            subtour = [v]\n            while True:\n                v0 = subtour[-1]\n                if v0 not in self.edges: break\n                v1 = self.random_adjacent(v0)\n                self.remove_edge(v0, v1)\n                subtour.append(v1)\n            assert subtour[0] == subtour[-1]\n            yield subtour\n\n# AB-cycles decomposition. Class used as namespace.\nclass AB_Cycles:\n\n    # Checks for an even-length cycle at the end of the path.\n    # Returns the index of its first vertex.\n    @staticmethod\n    def _find_cycle(path):\n        assert len(path) > 0\n        last_vertex = path[-1]\n        for index in range(len(path) - 3, -1, -2):\n            if path[index] == last_vertex:\n                return index\n\n    # Checks for an AB-cycle at the end of the path. Removes\n    # it from the path. Returns the pruned path and the cycle.\n    @staticmethod\n    def _remove_cycle(path):\n        index = AB_Cycles._find_cycle(path)\n        if index is not None:\n            path, cycle = path[:(index + 1)], path[index:]\n            # Convert from BA-cycle to AB-cycle if required\n            if len(path) & 1 == 0: cycle = cycle[1:] + [cycle[1]]\n            # Clean up the path if it does not contain a full edge\n            if len(path) == 1: path = []\n        else: cycle = None\n        return path, cycle\n\n    # Decomposes 2 tours into AB-cycles. Creates a path alternately\n    # picking edges from A and B until all the edges are used. Removes\n    # the AB-cycles from the path when they appear.\n    @staticmethod\n    def ab_cycles(tour_a, tour_b):\n        assert len(tour_a) == len(tour_b)\n        path = list()\n        graphs = (\n            Graph.from_subtours([tour_a]),\n            Graph.from_subtours([tour_b]))\n        while True:\n            # If the path is empty\n            if len(path) == 0:\n                # Terminate if appropriate\n                if graphs[0].empty(): break\n                # Add a first vertex otherwise\n                vertex = graphs[0].random_vertex()\n                path.append(vertex)\n            # Alternately pick edges from A and B\n            ab = 1 - (len(path) & 1)\n            # Move an edge from A or B to the path\n            v0 = path[-1]\n            v1 = graphs[ab].random_adjacent(v0)\n            graphs[ab].remove_edge(v0, v1)\n            path.append(v1)\n            # Remove and yield an eventual AB-cycle\n            path, cycle = AB_Cycles._remove_cycle(path)\n            if cycle is not None: yield cycle\n        # Final checks\n        assert graphs[0].empty()\n        assert graphs[1].empty()\n        assert len(path) == 0\n\n# EAX child construction. Class used as namespace.\nclass EAX:\n\n    # E-set for EAX(rand).\n    @staticmethod\n    def _eset_rand(ab_cycles):\n        for ab_cycle in ab_cycles:\n            if len(ab_cycle) > 3 and random.uniform(0, 1) > 0.5:\n                yield ab_cycle\n\n    # Generates the intermediate solution. Takes A, removes\n    # the E-set edges coming from A, adds those coming from B.\n    # Returns a graph of the resulting disjoint subtours.\n    @staticmethod\n    def _intermediate_solution(tour_a, eset):\n        # Create a graph from A\n        graph = Graph.from_subtours([tour_a])\n        # Add the E-set edges from A, remove those from B\n        for ab_cycle in eset:\n            ab = 0\n            for i in range(len(ab_cycle) - 1):\n                v0, v1 = ab_cycle[i], ab_cycle[i + 1]\n                if ab == 0: graph.remove_edge(v0, v1)\n                else: graph.add_edge(v0, v1)\n                ab = 1 - ab\n        return graph\n\n    # Separates the shortest subtour from the others.\n    @staticmethod\n    def _shortest_subtour(subtours):\n        lengths = [len(subtour) for subtour in subtours]\n        i = lengths.index(min(lengths))\n        shortest = subtours[i]\n        others = subtours[:i] + subtours[(i + 1):]\n        return shortest, others\n\n    # Finds quads v0, v1, v2, v3 such that (v0, v1) is an edge\n    # of the shortest subtour, (v2, v3) is an edge of any other\n    # subtour, v2 \u2208 N(v0), and v3 \u2208 N(v0).\n    @staticmethod\n    def _quads(subtours, neighbors):\n        # Separate the shortest subtour\n        shortest, others = EAX._shortest_subtour(subtours)\n        # List of edges from the shortest subtour\n        x = list()\n        for i in range(len(shortest) - 1):\n            v0, v1 = shortest[i], shortest[i + 1]\n            x.append((v0, v1))\n        # Set of edges from the other subtours\n        y = set()\n        for subtour in others:\n            for i in range(len(subtour) - 1):\n                v0, v1 = subtour[i], subtour[i + 1]\n                y.add((v0, v1))\n                y.add((v1, v0))\n        # Find quads\n        for v0, v1 in x:\n            for v2 in neighbors[v0]:\n                for v3 in neighbors[v1]:\n                    if (v2, v3) in y:\n                        yield v0, v1, v2, v3\n\n    # Finds the quad v0, v1, v2, v3 which merges the shortest subtour\n    # and another while minimizing the total distance when we remove\n    # (v0, v1) and (v2, v3) and add (v0, v2) and (v1, v3).\n    @staticmethod\n    def _min_quad(subtours, world, neighbors):\n        min_distance = None\n        min_quad = None\n        for v0, v1, v2, v3 in EAX._quads(subtours, neighbors):\n            removed = world.distance(v0, v1) + world.distance(v2, v3)\n            for (v2, v3) in ((v2, v3), (v3, v2)):\n                added = world.distance(v0, v2) + world.distance(v1, v3)\n                distance = added - removed\n                if min_distance is None or distance < min_distance:\n                    min_distance = distance\n                    min_quad = v0, v1, v2, v3\n        return min_quad\n\n    # Generates the offspring solution from the intermediate one.\n    # Greedily merges the subtours until only one remains.\n    def _offspring_solution(graph, world, neighbors):\n        while True:\n            subtours = tuple(graph.to_subtours())\n            if len(subtours) == 1: return subtours[0]\n            print(\"subtours\", len(subtours))\n            v0, v1, v2, v3 = EAX._min_quad(subtours, world, neighbors)\n            graph = Graph.from_subtours(subtours)\n            graph.remove_edge(v0, v1)\n            graph.remove_edge(v2, v3)\n            graph.add_edge(v0, v2)\n            graph.add_edge(v1, v3)\n\n    # Generates the EAX offspring. Pieces everything together.\n    @staticmethod\n    def eax(tour_a, tour_b, world, neighbors):\n        ab_cycles = AB_Cycles.ab_cycles(tour_a, tour_b)\n        eset = EAX._eset_rand(ab_cycles)\n        intermediate = EAX._intermediate_solution(tour_a, eset)\n        return EAX._offspring_solution(intermediate, world, neighbors)\n\n\n#if __name__ == \"__main__\":\n\n #   # Simple tests for Dict.\n\n#    d = Dict()\n #   d[7] = \"abc\"\n#    assert d[7] == \"abc\"\n#    d[12] = \"def\"\n#    assert d[12] == \"def\"\n#    assert len(d) == 2\n#    assert 7 in d\n#    assert 12 in d\n#    assert 123 not in d\n#    del d[7]\n #   assert len(d) == 1\n #   assert 7 not in d\n #   assert 12 in d\n #   assert d.random_key() == 12\n #   assert d[12] == \"def\"\n #   del d\n\n    # Simple tests for Graph.\n\n#    g = Graph.from_subtours([[0, 1, 2, 3, 0]])\n #   assert not g.empty()\n#    assert g.random_vertex() in [0, 1, 2, 3]\n#    assert g.random_adjacent(0) in [1, 3]\n#    g.remove_edge(0, 1)\n#    g.remove_edge(1, 2)\n#    g.remove_edge(3, 0)\n#    assert g.random_vertex() in [2, 3]\n#    assert g.random_adjacent(2) == 3\n #   g.remove_edge(2, 3)\n #   assert g.empty()\n #   del g\n\n#    # Simple tests for AB_Cycles.\n\n #   n = 100\n#    tour1 = list(range(1, n))\n #   random.shuffle(tour1)\n #   tour1 = [0] + tour1 + [0]\n #   tour2 = list(range(1, n))\n #   random.shuffle(tour2)\n #   tour2 = [0] + tour2 + [0]\n #   counter = 0\n#    for cycle in AB_Cycles.ab_cycles(tour1, tour2):\n   #     assert cycle[0] == cycle[-1]\n #       counter += len(cycle) - 1\n #   assert counter == 2 * n\n#    del tour1, tour2, counter\n\n  #  # Real-world test for EAX.\n\n   # import tsp\n\n #   world = tsp.World(\"world\/cities.csv\")\n#    popmusic = tsp.Neighbors.load_pickle(\"world\/newpopmusic.pickle\")\n\n#    a = tsp.Tour.load_csv(\"raw_tours\/raw1502605.csv\")\n #   b = tsp.Tour.load_csv(\"raw_tours\/raw1502650.csv\")\n#    c = EAX.eax(a, b, world, popmusic)\n\n#    print(\"A\", world.score(a, 0))\n #   print(\"B\", world.score(b, 0))\n#    print(\"C\", world.score(c, 0))\n#    print(\"distance(A, B)\", tsp.Tour.distance(a, b))\n#    print(\"distance(C, A)\", tsp.Tour.distance(c, a))\n#    print(\"distance(C, B)\", tsp.Tour.distance(c, b))\n\n#    tsp.Tour.save_csv(c, 'merged_tour.csv')","cc302f1a":"**POST-PROCESSING: \"KICK AND FIX\" THE TOUR ITERATIVELY**","2a78f42d":"**CUMSUM: THE EXTREMELY FAST SCORING ROUTINE**\n\nIn this kernel, I would like to show a cool cumsum trick that deals with the scoring function. Basically we don't need any GPU, and we must exclude all numpy commands. We did so because we would like to used pypy3 to run locally, since it is much faster than python3. \n\n*It can take down the score from 15162xx to 15149xx in just 30 minutes on pypy3.* The moves to reach that are just 1 type of 3-opt (with no flipped segment) and 1 type of non-sequential 4-opt with no flipped segment (aka double-bridge).\n\nOur full method is described here https:\/\/www.kaggle.com\/c\/traveling-santa-2018-prime-paths\/discussion\/77257. \n\nOur full code is here https:\/\/github.com\/voanhkha\/Traveling-Santa-2018-Kaggle\n\nThe below notebook is a demo short and fast code. For quick view of  full code (4-opt, 5-opt sequential\/non-sequential,  and EAX algorithm), please unhide the section at the end. For better forking the full code with all features (including permutation with lower bound estimation) please check out github here https:\/\/github.com\/voanhkha\/Traveling-Santa-2018-Kaggle\n\nTeam [Zidmie | Kha | Marc | Simon]","3edc01f7":"**EAX ALGORITHM TO COMBINE TOURS** (please unhide)","5be119a8":"**FULL CODE: K-OPT SEQUENTIAL and NON-SEQUENTIAL using CUMSUM TRICK *(please unhide the section)\nThis code may not be aligned with the above demo code. This is the full code.** \n\nFor a full code in better shape with clear instruction, please refer here: https:\/\/github.com\/voanhkha\/Traveling-Santa-2018-Kaggle","3dc9e845":"**IMPORT INPUT LKH TOUR (1516254, PURE 1502605), AND LKH POPMUSIC NEIGHBOR LIST**","4507d2ba":"**OPTIMIZATION USING CUMSUM TRICK WITH 1 TYPE OF 3-OPT AND 1 TYPE OF 4-OPT (DOUBLE BRIDGE)**","8d2cba47":"**CUSTOM LIBRARY:  1 TYPE OF 3-OPT AND 1 TYPE OF 4-OPT USING CUMSUM TRICK**"}}