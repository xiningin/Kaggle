{"cell_type":{"8ccd3fdd":"code","e72cde17":"code","1aa9473a":"code","e3bd5086":"code","c5555b69":"code","c65abf16":"code","2e30b2dc":"code","53bac3ab":"code","d08a5dd6":"code","7076cc29":"code","aa224603":"code","8355e5f1":"code","d0bee5b3":"code","c6e54209":"code","962c1306":"code","a0b98d8c":"code","8c85c4ee":"code","eb6e3bd3":"code","7b514bbe":"code","6ebc139d":"code","7fe2f49c":"code","197d9f61":"code","2fd4d8b9":"code","01c3d9f1":"code","6de51b62":"code","9baf73c7":"code","c0dc93d8":"code","f4ce95aa":"code","33585386":"code","91ba9ddd":"code","1bd648aa":"code","2f507fdb":"code","606837f4":"code","38978412":"code","d6bacc06":"code","dadf2cd2":"code","64a723d7":"code","7460a53d":"code","10c91f55":"code","2333649f":"code","a5921d82":"code","abc1e6cf":"code","92fd1c48":"code","90f18886":"code","b5b6ce2f":"code","f1464d5a":"code","a14c2dd2":"code","4ed94805":"code","f6e9c1b6":"markdown","9cbb8365":"markdown","7f2fa73e":"markdown","2e2d2329":"markdown"},"source":{"8ccd3fdd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e72cde17":"TRAIN_FILEPATH = '..\/input\/30-days-of-ml\/train.csv'\nTEST_FILEPATH = '..\/input\/30-days-of-ml\/test.csv'\n\ntrain = pd.read_csv(TRAIN_FILEPATH)\ntest = pd.read_csv(TEST_FILEPATH)","1aa9473a":"from pandas_summary import DataFrameSummary\n\ndfs = DataFrameSummary(train)\n\nprint(dfs.columns_types)\nprint('\\n\\n')\n\nprint(dfs.columns_stats)","e3bd5086":"dfs['cont0']","c5555b69":"dfs['cont1']","c65abf16":"dfs['cat0']","2e30b2dc":"dfs['cat1']","53bac3ab":"dfs['cat2']","d08a5dd6":"dfs['cat3']","7076cc29":"dfs['cat4']","aa224603":"dfs['cat5']","8355e5f1":"dfs['cat6']","d0bee5b3":"dfs['cat7']","c6e54209":"dfs['cat8']","962c1306":"dfs['cat9']","a0b98d8c":"dfs['cont0']","8c85c4ee":"dfs['cont1']","eb6e3bd3":"dfs['cont2']","7b514bbe":"dfs['cont3']","6ebc139d":"dfs['cont4']","7fe2f49c":"dfs['cont5']","197d9f61":"dfs['cont6']","2fd4d8b9":"dfs['cont7']","01c3d9f1":"dfs['cont8']","6de51b62":"dfs['cont9']","9baf73c7":"dfs['cont10']","c0dc93d8":"dfs['cont11']","f4ce95aa":"dfs['cont12']","33585386":"dfs['cont13']","91ba9ddd":"dfs['cont1']","1bd648aa":"dfs['cont1']","2f507fdb":"from pandas_profiling import ProfileReport\n\nprofile = ProfileReport(train, explorative=True)\nprofile","606837f4":"!pip install xlrd\n!pip install autoviz\n\nfrom autoviz.AutoViz_Class import AutoViz_Class\n\nAV = AutoViz_Class()\ndft = AV.AutoViz(TRAIN_FILEPATH)","38978412":"!pip install speedml\n\nfrom speedml import Speedml\n\nsml = Speedml(TRAIN_FILEPATH, TEST_FILEPATH, target='target', uid='id')\nsml.plot.correlate()\nsml.eda()","d6bacc06":"!pip install sweetviz\n\nimport sweetviz as sv\n\nmy_report = sv.analyze(train)\nmy_report.show_notebook()","dadf2cd2":"!pip install dataprep\n\nfrom dataprep.eda import create_report\n\ncreate_report(train).show_browser()","64a723d7":"import numpy as np\nimport pandas as pd\ntrain = pd.read_csv(TRAIN_FILEPATH, index_col=0)\ntest = pd.read_csv(TEST, index_col=0)\nsample_submission = pd.read_csv('..\/input\/30-days-of-ml\/sample_submission.csv', index_col=0)","7460a53d":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfig, axes = plt.subplots(1, 2, figsize=(18, 8))\naxes[0].set_title('train')\naxes[1].set_title('test')\nheatmap_params = {'vmax':1, 'vmin':-1, 'center':0, 'cmap':'seismic', 'annot':True, 'fmt':'.1f',\n                  'linewidth':.1, 'cbar':False, 'square':True}\nsns.heatmap(train.corr(), **heatmap_params, mask=np.triu(np.ones_like(train.corr())), ax=axes[0])\nsns.heatmap(test.corr(), **heatmap_params, mask=np.triu(np.ones_like(test.corr())), ax=axes[1])","10c91f55":"import math\nimport seaborn as sns\nsturges = lambda x: math.ceil(math.log2(x*2))\n#sns.displot(train['target', bins=sturges(len(train.target)), aspect=2)\nsns.displot(train['target'], bins=sturges(len(train.target))*2, aspect=2)\nsns.displot(train['cont13'], bins=sturges(len(train.target))*2, aspect=2)","2333649f":"sns.scatterplot(train['cont13'], train['target'])","a5921d82":"#y = train['target']\nif 'target' in train.columns: train.drop('target', axis=1, inplace=True)\nnum_colnames = [col for col in train.columns if train[col].dtype!='object']\nall_data = pd.concat([train[num_colnames], test[num_colnames]], axis=0)\nfeatures_min = all_data.min()\nfeatures_max = all_data.max()\n\nncols = 3\nnrows = len(num_colnames)\/\/ncols +1\nfig, axes = plt.subplots(nrows, ncols, figsize=(18,18))\nbins = sturges(len(all_data))*2\nfor i in range(ncols*nrows):\n    r = i\/\/ncols\n    c = i%ncols\n    if len(num_colnames)<=i:\n        axes[r,c].axis('off')\n        continue\n    axes[r,c].hist(\n        train[num_colnames[i]], bins=bins, range=(features_min[i], features_max[i]),\n        color='b', edgecolor='white', alpha=0.5, label='Train'\n    )\n    axes[r,c].hist(\n        test[num_colnames[i]], bins=bins, range=(features_min[i], features_max[i]),\n        color='r', edgecolor='white', alpha=0.5, label='Test'\n    )\n    axes[r,c].set_title(num_colnames[i], fontsize=14, pad=5)\n    axes[r,c].set_facecolor('white')\n    axes[r,c].set_xticks([])\n    axes[r,c].set_yticks([])\n    axes[r,c].legend()\nplt.show()","abc1e6cf":"# https:\/\/umap-learn.readthedocs.io\/en\/latest\/performance.html\n# time required: multicore tsne > opentsne > sklearn.manifold.tsne > isomap > umap > pca","92fd1c48":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.decomposition.PCA.html\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndef plot_pca(x, y, title=''):\n    try:\n        plt.figure(figsize=(8,8))   \n        pca = PCA(n_components=2, random_state=0)\n        x_embedded = pca.fit_transform(x)\n        plt.scatter(x_embedded[:,0], x_embedded[:,1], c=y, cmap=plt.cm.Paired)\n        plt.colorbar()\n        plt.title(title)\n        plt.show()\n    except:\n        pass","90f18886":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.manifold.Isomap.html\nfrom sklearn.manifold import Isomap\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndef plot_isomap(x, y, title=''):\n    try:\n        plt.figure(figsize=(8,8))   \n        isomap = Isomap(n_components=2, n_jobs=-1)\n        x_embedded = isomap.fit_transform(x)\n        plt.scatter(x_embedded[:,0], x_embedded[:,1], c=y, cmap=plt.cm.Paired)\n        plt.colorbar()\n        plt.title(title)\n        plt.show()\n    except:\n        pass","b5b6ce2f":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.manifold.TSNE.html\n# https:\/\/github.com\/DmitryUlyanov\/Multicore-TSNE\n!pip install MulticoreTSNE\nfrom MulticoreTSNE import MulticoreTSNE as TSNE\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndef plot_tsne(x, y, title=''):\n    try:\n        plt.figure(figsize=(8,8))\n        tsne = TSNE(n_components=2, random_state=0, n_jobs=-1)\n        x_embedded = tsne.fit_transform(x)\n        plt.scatter(x_embedded[:,0], x_embedded[:,1], c=y, cmap=plt.cm.Paired)\n        plt.colorbar()\n        plt.title(title)\n        plt.show()\n    except:\n        pass","f1464d5a":"#https:\/\/github.com\/rapidsai\/cuml","a14c2dd2":"# https:\/\/github.com\/lmcinnes\/umap\nfrom umap import UMAP\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndef plot_umap(x, y, title='', densmap=True):\n    try:\n        plt.figure(figsize=(8,8))\n        umap = UMAP(n_components=2, random_state=0, densmap=densmap, n_jobs=-1)\n        x_embedded = umap.fit_transform(x)\n        plt.scatter(x_embedded[:,0], x_embedded[:,1], c=y, cmap=plt.cm.Paired)\n        plt.colorbar()\n        plt.title(title)\n        plt.show()\n    except:\n        pass","4ed94805":"train = pd.read_csv(TRAIN_FILEPATH, index_col=0)\nnum_features = [col for col in train.columns if train[col].dtype!='object']\nsampled = train.sample(n=10000)\nplot_pca(sampled[num_features], sampled['target'])\nplot_isomap(sampled[num_features], sampled['target'])\nplot_tsne(sampled[num_features], sampled['target'])\nplot_umap(sampled[num_features], sampled['target'])","f6e9c1b6":"# Automatic EDA","9cbb8365":"Draw graphs on the disturibution of features on the train and test data.","7f2fa73e":"# Setup","2e2d2329":"# Manual EDA"}}