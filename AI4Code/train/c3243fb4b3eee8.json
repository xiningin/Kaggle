{"cell_type":{"67094f84":"code","f3a43b5d":"code","fe53a473":"code","7c1e6694":"code","37c4c6f0":"code","5641725d":"markdown","44b6cf26":"markdown","98065790":"markdown"},"source":{"67094f84":"def _run_it_all():\n    !python tf_rmse.py\n    !python tf_rmsse.py\n    !python tf_wrmsse.py\n    !python torch_rmse.py\n    !python torch_rmsse.py\n    !python torch_wrmsse.py","f3a43b5d":"%%writefile tf_rmse.py \nimport tensorflow as tf\ndef rmse(predictions, targets):\n    return tf.keras.backend.mean(tf.math.sqrt((tf.convert_to_tensor((predictions - targets) ** 2))))","fe53a473":"%%writefile torch_rmse.py    \nimport torch\ndef rmse(predictions, targets):\n    return torch.mean(torch.sqrt((torch.from_numpy((predictions - targets) ** 2))))","7c1e6694":"%%writefile tf_rmsse.py \nimport tensorflow as tf\ndef rmsse(self, valid_preds: pd.DataFrame, lv: int):\n    score = tf.convert_to_tensor(np.array((valid_y - valid_preds) ** 2))\n    scale = getattr(self, f'lv{lv}_scale')\n    return (score \/ scale).map(tf.sqrt)","37c4c6f0":"%%writefile torch_rmsse.py \nimport torch\ndef rmsse(self, valid_preds: pd.DataFrame, lv: int):\n    score = torch.from_numpy(np.array((valid_y - valid_preds) ** 2))\n    scale = lv\n    return (score \/ scale).map(torch.sqrt)","5641725d":"# RMSSE","44b6cf26":"# (NN) Custom Loss Evaluators\n\nThese custom loss evaluators are devoloped for NNs in TF and PyTorch. These are all the loss functions available:-\n* RMSE\n* RMSSE\n\nI will be updating more. \n\n### How to use?\n\nI have also created a dataset containing all the scripts outputted. You can call:\n\n`!python ..\/input\/m5-los-functions\/rmsse.py`\n\nas an example.","98065790":"# RMSE"}}