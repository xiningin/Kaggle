{"cell_type":{"57e87983":"code","d1d5297a":"code","61c13b4a":"code","082c26c5":"code","d2568255":"code","1363d9bf":"code","728a200b":"code","13328f62":"code","4de3446c":"code","4e72e2bb":"code","a807b9a9":"code","791d39eb":"code","06dcdf8c":"code","523c6ca8":"code","d1e6ca34":"code","79369df9":"code","c600a0ab":"code","5ed6ca75":"code","896793f5":"code","03c06e17":"code","a7457df0":"code","599825d1":"code","348e1896":"code","387477b7":"code","ff435cb6":"code","177034f4":"code","ed19d741":"code","939fedac":"code","b35b3f54":"code","303a4dff":"code","cd43d82a":"code","7caff54a":"code","2684b208":"code","d6430cee":"code","1cb8326e":"markdown","c73fc301":"markdown","9a83e824":"markdown","39892358":"markdown","4dd7acd4":"markdown","b72f8461":"markdown","a0a6c0b4":"markdown","1a602791":"markdown","9aab33d0":"markdown"},"source":{"57e87983":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\n# Model evaluations\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import f1_score, classification_report\n\n# Models\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier","d1d5297a":"df= pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\n\ndf.tail()","61c13b4a":"df.dtypes","082c26c5":"print(\"Nan Values: \" + str(df.isna().sum()))","d2568255":"avg= df[\"bmi\"].median()\nprint(\"Average:\" + str(avg))","1363d9bf":"# Fill the `NaN` values with the average\n\ndf[\"bmi\"]= df[\"bmi\"].fillna(avg)","728a200b":"df.head()","13328f62":"df[\"gender\"].value_counts().plot(kind=\"bar\", color=[\"red\", \"blue\"],\n                                 xlabel= \"Gender\", ylabel=\"Value_Counts\")","4de3446c":"df[\"stroke\"].value_counts().plot(kind=\"bar\",\n                                 color=[\"blue\", \"red\"])","4e72e2bb":"pd.crosstab(df[\"gender\"], df[\"stroke\"]).plot(\n                                             kind=\"bar\", \n                                             color=[\"orange\", \"blue\"])\n\nplt.legend([\"not stroke\", \"stroke\"])","a807b9a9":"df[\"age\"].hist()","791d39eb":"pd.crosstab(df[\"age\"], df[\"stroke\"]).hist()","06dcdf8c":"pd.crosstab(df[\"hypertension\"], df[\"stroke\"]).plot(kind=\"bar\")\n\nplt.legend([\"Not stroke\", \"Stroke\"])\n\nplt.xlabel(\"Hypertension 0-> Not 1-> Yes\")\n\n","523c6ca8":"pd.crosstab(df[\"heart_disease\"], df[\"stroke\"]).plot(kind=\"bar\")\n\nplt.legend([\"Not stroke\", \"stroke\"])\n\nplt.xlabel(\"Heart Disease (0->No, 1-> Yes)\")","d1e6ca34":"df[\"work_type\"].value_counts().plot(kind=\"pie\",\n                                    autopct=\"%1.1f%%\",\n                                    figsize=(10, 10))","79369df9":"df[\"ever_married\"].value_counts().plot(kind=\"pie\",\n                                       autopct=\"%1.1f%%\",\n                                       figsize=(10, 6))","c600a0ab":"pd.crosstab(df[\"work_type\"], df[\"stroke\"]).plot(kind=\"bar\",\n                                                figsize=(10, 6))\n\nplt.legend([\"Not stroke\", \"stroke\"])","5ed6ca75":"pd.crosstab(df[\"Residence_type\"], df[\"work_type\"]).plot(kind=\"bar\",\n                                                                  figsize=(10, 6))","896793f5":"pd.crosstab(df[\"smoking_status\"], df[\"stroke\"]).plot(kind=\"bar\", \n                                                    figsize=(10, 6))","03c06e17":"df[\"avg_glucose_level\"].plot(kind=\"hist\",\n                             figsize=(10, 6))","a7457df0":"df.dtypes","599825d1":"print(\"gender values: \" + str(df[\"gender\"].unique()))\n\nprint(\"ever_married unique values: \" + str(df[\"ever_married\"].unique()))\n\nprint(\"work_type types: \" +str(df[\"work_type\"].unique()))\n\nprint(\"Residence_type values: \" +str(df[\"Residence_type\"].unique()))\n\nprint(\"smoking_status values: \" + str(df[\"smoking_status\"].unique()))","348e1896":"genderMap= {\"Male\": 0, \n            \"Female\": 1,\n            \"Other\": 2}\n\never_marriedMap= {\"Yes\": 0,\n                \"No\": 1}\n\nwork_typeMap= {\"Private\": 0,\n               \"Self-employed\": 1,\n               \"Govt_job\": 2,\n               \"children\": 3,\n               \"Never_worked\": 4}\n\nResidence_typeMap= {\"Urban\": 0,\n                    \"Rural\": 1}\n\nsmoking_statusMap= {\"formerly smoked\": 0,\n                 \"never smoked\": 1,\n                 \"smokes\": 2,\n                 \"Unknown\": 3}","387477b7":"def changeValues(col, colMap):\n    \n    df[col] = df[col].map(colMap).astype(int)\n        \n    return \"Done with \" + str(col)","ff435cb6":"changeValues(col= \"gender\", colMap = genderMap)\n\nchangeValues(col= \"ever_married\", colMap= ever_marriedMap)\n\nchangeValues(col= \"work_type\", colMap= work_typeMap)\n\nchangeValues(col= \"Residence_type\", colMap= Residence_typeMap)\n\nchangeValues(col= \"smoking_status\", colMap= smoking_statusMap)","177034f4":"df.head()","ed19d741":"# age -> int\n# glucose, bmi -> round int\n\ndf[\"age\"]= df[\"age\"].astype(int)\n\ndf[\"avg_glucose_level\"]= round(df[\"avg_glucose_level\"]).astype(int)\n\ndf[\"bmi\"]= round(df[\"bmi\"]).astype(int)","939fedac":"df.dtypes","b35b3f54":"# Split the dataframe to `80%` train `20%` test\n\nsplitNumber= int(5110 * (0.7))\n\ndf_train = df.iloc[:splitNumber, :]\ndf_test= df.iloc[(splitNumber + 1):, :]\n\nX = df_train.drop([\"stroke\"], axis=1)\ny= df_train[\"stroke\"]\n\nX_train, X_test, y_train, y_test= train_test_split(X, \n                                                   y,\n                                                   random_state=42)\n\n# See the shapes\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","303a4dff":"models= {\"RandomForestClassifier\": RandomForestClassifier(),\n         \"DecisionTreeClassifier\": DecisionTreeClassifier(),\n         \"KNeighborsClassifier\" : KNeighborsClassifier()}\n\ndef fitNScore(models, X_train, X_test, y_train, y_test):\n    \n    np.random.seed(42)\n    scores={}\n    \n    for name, model in models.items():\n        \n        model.fit(X_train, y_train)\n        scores[name]= model.score(X_test, y_test)\n        \n    return scores","cd43d82a":"fitNScore(models= models, X_train= X_train,\n          y_train= y_train, X_test= X_test,\n          y_test= y_test)","7caff54a":"mod= RandomForestClassifier(n_jobs=3,\n                            random_state=42,\n                            criterion=\"entropy\")\n\nmod.fit(X_train, y_train)\n\npreds= mod.predict(X_test)\n\nprint(classification_report(y_test, preds))","2684b208":"rfGrid= {\"n_estimators\": np.arange(10, 100, 1000),\n         \"max_depth\": [6, 8, 10],\n         \"min_samples_leaf\": [4, 6, 8],\n         \"max_features\": [\"auto\", \"sqrt\", \"log2\"]}\n\nrsModel= RandomizedSearchCV(mod, \n                            param_distributions= rfGrid,\n                            cv=5\n                            )\n\nrsModel.fit(X_train, y_train)","d6430cee":"preds= rsModel.predict(X_test)\n\nprint(classification_report(y_test, preds))","1cb8326e":"### Model Creation","c73fc301":"#### Categorical Features Transformation","9a83e824":"### Data cleaning","39892358":"### Stroke Prediction","4dd7acd4":"#### 1) Import our tools","b72f8461":"### Transform the data types","a0a6c0b4":"### EDA","1a602791":"### Numerical Features Transformation","9aab33d0":"### From the dataset\n\n   * We have 12 columns with 5109 rows\n    \n   * We have multiple data types and `NaN` values"}}