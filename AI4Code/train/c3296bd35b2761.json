{"cell_type":{"8ffd8362":"code","7b3cab7f":"code","7bf9c783":"code","fab4eec3":"code","c2f28a9b":"code","9c54dd25":"code","7a0d64a7":"code","9c3e15d6":"code","af11eb3a":"code","8731632b":"code","38e096ea":"code","616e8c98":"code","3193a92f":"code","204f2a52":"code","77593e72":"code","b124be29":"code","42e60cad":"code","76016590":"code","27556707":"code","ab992d3b":"code","8e031640":"code","5a85a2e3":"code","dc8b9e44":"code","90a671c8":"code","c953597a":"code","3e229d54":"code","4a7fc2a9":"code","9a74e50c":"code","3713ca00":"code","c871342e":"code","16f339b7":"code","f8be55e9":"code","a0648499":"code","e8805663":"code","170cc56d":"code","313e97e7":"code","596b213e":"code","4c94e6aa":"code","c99ca1f9":"code","2e930dfc":"code","3d7f47af":"code","fb4ba1a8":"code","307d11d4":"code","0e6cc53e":"code","24ed9035":"code","01078ef9":"code","90a51139":"code","0fd2b1ca":"code","14082356":"code","5d4d1d3f":"code","a6be0903":"code","f84bea52":"code","57e588d7":"code","3bc6cd25":"code","099ab676":"code","7479a3d6":"code","76927c98":"code","8acd2c17":"code","8867e0db":"code","5fc425dd":"code","c1ceb084":"code","3b84f338":"code","aa083366":"code","f8f0ebe7":"code","55c7158d":"code","1924df1f":"code","1b211d17":"code","db6f3563":"code","57eb510a":"code","bf638c42":"code","92d745c8":"code","265a3153":"code","8ef880ba":"code","d9d34acb":"code","625c7bcd":"code","3b8b44b4":"code","635623fa":"code","399247c5":"code","1d79a4f3":"code","ff621997":"code","2253d342":"code","01966f38":"code","b6c29067":"code","d1f6992b":"code","90aae6d0":"code","4f03748f":"code","9662a6cb":"code","a214ac8d":"code","6facc0e6":"code","9bc00910":"code","8a712ef2":"code","530a6185":"code","2fb89e77":"code","1ccf0e7a":"code","34a00724":"code","e59d5235":"code","8159be13":"markdown","f1e9ae44":"markdown","09781654":"markdown","55cba474":"markdown","0e9c66ab":"markdown","9d9d3c95":"markdown","7e8b6d86":"markdown","64a78c1f":"markdown","8fc160cc":"markdown","5b9dd167":"markdown","26a35097":"markdown","1e07464d":"markdown","eed7ef6a":"markdown","bfe803f5":"markdown","18e6135a":"markdown","95cbaeec":"markdown"},"source":{"8ffd8362":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","7b3cab7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename),'--',filename)\n\n# Any results you write to the current directory are saved as output.","7bf9c783":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","fab4eec3":"train_df.head()","c2f28a9b":"train_df.shape","9c54dd25":"train_df.info()","7a0d64a7":"train_df.isna().sum() ","9c3e15d6":"train_df.Ticket.value_counts() ","af11eb3a":"train_df['Pclass'].unique()","8731632b":"train_df.Age.fillna(value=0,inplace=True)","38e096ea":"titanic_train_df = train_df.drop('Cabin',axis=1)","616e8c98":"f, axes = plt.subplots(5, 2, figsize=(8, 10))\n\nsns.distplot(titanic_train_df.Age,ax=axes[0,0])\nsns.boxplot(titanic_train_df.Age,ax=axes[0,1])\nsns.distplot(titanic_train_df.Fare,ax=axes[1,0])\nsns.boxplot(titanic_train_df.Fare,ax=axes[1,1])\nsns.countplot(titanic_train_df.Survived,ax=axes[2,0])\nsns.countplot(x=titanic_train_df.Sex,ax=axes[2,1])\nsns.countplot(titanic_train_df.Pclass,ax=axes[3,0])\nsns.countplot(x=titanic_train_df.SibSp,ax=axes[3,1])\nsns.countplot(x=titanic_train_df.Parch,ax=axes[4,0])\nsns.countplot(x=titanic_train_df.Embarked,ax=axes[4,1])\nplt.setp(axes, yticks=[])\nplt.tight_layout()","3193a92f":"titanic_train_df[titanic_train_df['Age'] > 75]","204f2a52":"q1Age,q3Age = np.quantile(titanic_train_df.Age,[.25,.75])\nIQRAge = q3Age - q1Age\nminAge = q1Age - 1.5 * IQRAge\nmaxAge = q3Age + 1.5 * IQRAge\nprint(minAge,maxAge)","77593e72":"titanic_train_df.Age.loc[titanic_train_df.Age > maxAge]= maxAge","b124be29":"q1Fare,q3Fare = np.quantile(titanic_train_df.Fare,[.25,.75])\nIQRFare = q3Fare - q1Fare\nminFare = q1Fare - 3 * IQRFare\nmaxFare = q3Fare + 3 * IQRFare\nprint(minFare,maxFare)","42e60cad":"titanic_train_df[titanic_train_df.Fare > maxFare]","76016590":"titanic_train_df[titanic_train_df.Fare > maxFare]","27556707":"titanic_train_df[(titanic_train_df.Fare > maxFare) & (titanic_train_df['SibSp'] == 0.0) & (titanic_train_df['Parch'] == 0.0)]","ab992d3b":"titanic_train_df.Fare.loc[(titanic_train_df.Fare > maxFare)] = maxFare\n","8e031640":"titanic_train_df[(titanic_train_df.Fare > maxFare) ]","5a85a2e3":"def ageToRange(age):\n    if(age >= 0. and age <= 20.):\n        return \"0-20\"\n    elif(age >21. and age <=40.):\n        return \"21-40\"\n    return \">40\"\ntitanic_train_df['ageRange']=titanic_train_df.Age.apply(lambda x: ageToRange(x))","dc8b9e44":"titanic_train_df = titanic_train_df.drop('Age',axis=1)","90a671c8":"titanic_train_df.head()","c953597a":"titanic_train_df[titanic_train_df.Embarked.isna()==True]","3e229d54":"titanic_train_df.groupby([titanic_train_df.Embarked,'Sex','ageRange'])['Pclass'].count()","4a7fc2a9":"titanic_train_df.Embarked.loc[titanic_train_df.Embarked.isna()==True] = 'S'","9a74e50c":"titanic_segment_analysis = titanic_train_df.groupby([titanic_train_df.Embarked,'Sex','ageRange','Survived'])['Survived'].count()","3713ca00":"titanic_segment_analysis = titanic_segment_analysis.unstack(level=2).reset_index()","c871342e":"titanic_segment_analysis.head()","16f339b7":"sns.catplot(y='0-20',x='Sex',hue='Survived',data=titanic_segment_analysis.fillna(0),kind='bar')\nsns.catplot(y='21-40',x='Sex',hue='Survived',data=titanic_segment_analysis.fillna(0),kind='bar', palette=\"muted\")","f8be55e9":"titanic_train_df.columns","a0648499":"titanic_train_trans = pd.get_dummies(data=titanic_train_df,columns=['Pclass','ageRange','Sex','SibSp', 'Parch','Embarked'],drop_first=True)","e8805663":"titanic_train_trans = titanic_train_trans.drop(columns=['PassengerId','Name','Ticket'],axis=0)","170cc56d":"plt.figure(figsize = (20,10))        # Size of the figure\nsns.heatmap(titanic_train_trans.corr(),annot = True)\nplt.show()\n","313e97e7":"titanic_train_trans.columns","596b213e":"test_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","4c94e6aa":"test_df.head()","c99ca1f9":"test_df.shape","2e930dfc":"test_df.isna().sum()","3d7f47af":"titanic_test_df = test_df.drop(columns=['PassengerId','Name','Ticket','Cabin'],axis=0)","fb4ba1a8":"titanic_test_df.Age.fillna(value=0,inplace=True)\ntitanic_test_df.Age.loc[titanic_test_df.Age > maxAge]= maxAge\ntitanic_test_df['ageRange']=titanic_test_df.Age.apply(lambda x: ageToRange(x))\ntitanic_test_df = titanic_test_df.drop('Age',axis=1)","307d11d4":"titanic_test_df.Fare.loc[(titanic_test_df.Fare > maxFare) & (titanic_test_df['SibSp'] == 0.0) & (titanic_test_df['Parch'] == 0.0)]= maxFare\ntitanic_test_df.Fare.loc[titanic_test_df.Fare > maxFare] = maxFare\ntitanic_test_df.Fare.loc[titanic_test_df.Fare.isna()]= maxFare","0e6cc53e":"titanic_test_df = pd.get_dummies(data=titanic_test_df,columns=['Pclass','ageRange','Sex','SibSp', 'Parch','Embarked'],drop_first=True)","24ed9035":"titanic_test_df.columns","01078ef9":"from sklearn.preprocessing import StandardScaler","90a51139":"std_scalar = StandardScaler()","0fd2b1ca":"titanic_train_trans[['Fare']] = std_scalar.fit_transform(titanic_train_trans[['Fare']])","14082356":"titanic_train_trans.head()","5d4d1d3f":"x_train = titanic_train_trans.drop('Survived',axis=1)","a6be0903":"y_train = titanic_train_trans.Survived","f84bea52":"titanic_test_df[['Fare']] = std_scalar.fit_transform(titanic_test_df[['Fare']])","57e588d7":"x_test = titanic_test_df","3bc6cd25":"models = []\nscores = []","099ab676":"from sklearn.model_selection import train_test_split","7479a3d6":"x_train, x_val, y_train, y_val = train_test_split(x_train,y_train,test_size=.3,random_state=40)","76927c98":"from sklearn.linear_model import LogisticRegression","8acd2c17":"logModel = LogisticRegression()","8867e0db":"from sklearn.metrics import accuracy_score,confusion_matrix,precision_recall_curve,roc_curve,roc_auc_score","5fc425dd":"logModel.fit(x_train,y_train)","c1ceb084":"y_val_predict = logModel.predict(x_val)","3b84f338":"score = accuracy_score(y_val,y_val_predict)\nprint('Accuracy for base Logistic Regression: ',score)\nmodels.append('Base Logistic');\nscores.append(score)","aa083366":"print('Confusion Matrix for Base Logistic Regression')\nsns.heatmap(confusion_matrix(y_val,y_val_predict),annot=True,fmt=\"d\")","f8f0ebe7":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = roc_curve( actual, probs,\n                                               )\n    auc_score = roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","55c7158d":"draw_roc(y_val,y_val_predict)","1924df1f":"logModel = LogisticRegression()","1b211d17":"from sklearn.feature_selection import RFE","db6f3563":"rfe = RFE(logModel,14)","57eb510a":"rfe = rfe.fit(x_train,y_train)","bf638c42":"rfe.support_","92d745c8":"list(zip(x_train.columns, rfe.support_, rfe.ranking_))","265a3153":"col = x_train.columns[rfe.support_]","8ef880ba":"logModel.fit(x_train[col],y_train)","d9d34acb":"y_val_predict_1 = logModel.predict(x_val[col])","625c7bcd":"score = accuracy_score(y_val,y_val_predict_1)\nprint('Accuracy for RFE Logistic Regression: ',score)\nmodels.append('RFE Logistic');\nscores.append(score)","3b8b44b4":"from statsmodels.stats.outliers_influence import variance_inflation_factor","635623fa":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = x_train[col].columns\nvif['VIF'] = [variance_inflation_factor(x_train[col].values, i) for i in range(x_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\n\nprint('Below VIF shows all the fatures are independent and values are < 5')\nvif","399247c5":"sns.heatmap(confusion_matrix(y_val,y_val_predict_1),annot=True,fmt=\"d\")","1d79a4f3":"draw_roc(y_val,y_val_predict_1)","ff621997":"y_test = logModel.predict(x_test[col])","2253d342":"from sklearn.svm import SVC","01966f38":"baseSVC = SVC()","b6c29067":"baseSVC.fit(x_train,y_train)","d1f6992b":"y_pred_svc_base = baseSVC.predict(x_val)","90aae6d0":"score = accuracy_score(y_val,y_pred_svc_base)\nprint('Accuracy for Base SVC: ',score)\nmodels.append('Base SVC');\nscores.append(score)","4f03748f":"from sklearn.model_selection import GridSearchCV\nimport time","9662a6cb":"param_grid = [\n  {'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n \n ]\nsvc = SVC()\ngrd_SVC = GridSearchCV(estimator=svc,param_grid=param_grid,cv=5,scoring='accuracy')\nstart_time = time.time()\ngrid_result = grd_SVC.fit(x_train, y_train)\n# Summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nprint(\"Execution time: \" + str((time.time() - start_time)) + ' ms')\nsvc = SVC()\nsvc.fit(x_train, y_train)\nrbf_val = svc.predict(x_val)\naccuracy_score(y_val,rbf_val)","a214ac8d":"score = accuracy_score(y_val,rbf_val)\nprint('Accuracy for Grid CV SVC Linear: ',score)\nmodels.append('SVC CV Linear');\nscores.append(score)","6facc0e6":" param_grid = [\n  {'C': [1, 10, 100, 1000], 'gamma': [.01,0.001, 0.0001], 'kernel': ['rbf']},\n \n ]\nsvc = SVC()\ngrd_SVC = GridSearchCV(estimator=svc,param_grid=param_grid,cv=3,scoring='accuracy')\nstart_time = time.time()\ngrid_result = grd_SVC.fit(x_train, y_train)\n# Summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nprint(\"Execution time: \" + str((time.time() - start_time)) + ' ms')\nsvc = SVC()\nsvc.fit(x_train, y_train)\nrbf_val = svc.predict(x_val)\n#accuracy_score(y_val,rbf_val)\nscore = accuracy_score(y_val,rbf_val)\nprint('Accuracy for Grid CV SVC Linear: ',score)\nmodels.append('SVC CV RBF');\nscores.append(score)","9bc00910":"from sklearn.ensemble import RandomForestClassifier","8a712ef2":"baseRF = RandomForestClassifier(n_estimators=14)\nbaseRF.fit(x_train, y_train)\nbaseRF_val = baseRF.predict(x_val)\n#accuracy_score(y_val,baseRF_val)\nscore = accuracy_score(y_val,baseRF_val)\nprint('Accuracy for Base RandomForest: ',score)\nmodels.append('Base RandomForest');\nscores.append(score)","530a6185":"rf_param_grid = {\n    'n_estimators':range(10,20,3),\n    'max_depth':[2,5,10,12],\n    'min_samples_split':[3,5,8,12],\n    'max_features':[8,10,12,14],\n    'max_leaf_nodes':[2,5,7,8,10,12]\n}\ngrd_rf = GridSearchCV(estimator=RandomForestClassifier(),param_grid=rf_param_grid,cv=3,scoring='accuracy')\ngrd_rf_results = grd_rf.fit(x_train,y_train)\nprint(grd_rf_results.best_score_,grd_rf_results.best_params_)\n","2fb89e77":"baseRF = RandomForestClassifier(n_estimators=19,max_depth=12,max_features=10,max_leaf_nodes=10,min_samples_split=5)\nbaseRF.fit(x_train, y_train)\nbaseRF_val = baseRF.predict(x_val)\nimport pandas as pd\nfeature_importances = pd.DataFrame(baseRF.feature_importances_,\n                                   index = x_train.columns,\n                                    columns=['importance']).sort_values('importance', ascending=False)\nscore = accuracy_score(y_val,baseRF_val)\nprint('Accuracy for Grid RandomForest: ',score)\nmodels.append('Grid CV RandomForest');\nscores.append(score)\naccuracy_score(y_val,baseRF_val)\nfeature_importances","1ccf0e7a":"pd.DataFrame(data={'Models':models,'score':scores})","34a00724":"d = pd.DataFrame()\nd['PassengerId'] = test_df['PassengerId']\nd['Survived'] = y_test\nd.head()","e59d5235":"d.to_csv('submission.csv',index=False)","8159be13":"**selected Features**","f1e9ae44":"Model accuracy was improved from .81 to .82\n\nMost important features are : **'Pclass_2',\n                                'Pclass_3',\n                                'ageRange_>40',\n                                'Sex_male',\n                                'SibSp_1',\n                                'SibSp_2',\n                                'SibSp_3',\n                                'SibSp_4',\n                                'SibSp_8',\n                                'Parch_1',\n                                'Parch_2',\n                                'Parch_4',\n                                'Parch_5',\n                                'Embarked_S'**","09781654":"filling the empty age with **0**","55cba474":"Cabing has more null values, cannot imput so dropping the \"Cabin\" column ","0e9c66ab":"**Univariate Analysis**","9d9d3c95":"**Lets try the SVM classifier**","7e8b6d86":"**Lets handle the outlier for Age**","64a78c1f":"creating Submission file","8fc160cc":"* **Over all winner is  Logistic Regression**\n* Features explianed by both Logistic Regression and RandomForest are mostly same\n* SVM overfits","5b9dd167":"**Finding the IQR Range**","26a35097":"**using RFE + VIF for feature selection**","1e07464d":"**Replace the age with maxAge whose age is more than MaxAge **","eed7ef6a":"*Below Fare shows that they travelled with more than 1 or family or with parent\/child\/siblings or brought ticket in last minute so more price*\nif we remove these records we may loose the important information Just to replace with MaxFare value","bfe803f5":"**Above info show \"s\" has max female occurancess so assign s to Embarked**","18e6135a":"Now ready for Prediction","95cbaeec":"**Let's see the fare**"}}