{"cell_type":{"54f70c27":"code","4b409104":"code","2a614126":"code","0f807b2d":"code","52045405":"code","8ae4ee75":"code","53924184":"code","e570d0f1":"code","08778a92":"code","53c3e804":"code","521a2b7a":"code","22741770":"code","83c962d6":"code","ad1dde14":"code","d75ec7cd":"code","db19e57d":"code","290bc7cd":"code","f2ff0aea":"code","3d3f5313":"code","6ccdfcb6":"code","e93349aa":"code","0d374d0c":"code","510e8043":"code","70684c7e":"code","a0f6f4d3":"code","1da27a4f":"code","b225effb":"markdown","a111f7a0":"markdown","07feee58":"markdown","45746047":"markdown","b5e84d8a":"markdown","3dd0bcc2":"markdown","c3297392":"markdown","bb225b70":"markdown","72d23027":"markdown","b8a7321a":"markdown","c9f9f0f2":"markdown","2d6d2be8":"markdown","1e97667a":"markdown","e0772abd":"markdown","5080948f":"markdown","398a6374":"markdown"},"source":{"54f70c27":"from datetime import date\ndate.today()","4b409104":"import pandas as pd\nimport numpy as np\nimport math\nfrom datetime import date\nfrom copy import deepcopy\nfrom pyproj import Transformer\n\nfrom bokeh.models import ColumnDataSource, GMapOptions, CDSView\nfrom bokeh.models import CustomJS, Slider, DatetimeTickFormatter, Panel\nfrom bokeh.models.filters import CustomJSFilter\nfrom bokeh.models.widgets import DateSlider, Tabs\n\nfrom bokeh.tile_providers import get_provider, Vendors\nfrom bokeh.plotting import ColumnDataSource, figure, output_file, show, reset_output\nfrom bokeh.layouts import column, row\nfrom bokeh.io import output_notebook","2a614126":"casesDf=pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')","0f807b2d":"casesDf.head()","52045405":"casesDf.shape","8ae4ee75":"casesDf['Date']=casesDf['Date'].apply(lambda x: date(int(x.split('-')[0]),int(x.split('-')[1]),int(x.split('-')[2])))","53924184":"casesDf.fillna(value={'Province\/State':'No state or province'},inplace=True)","e570d0f1":"casesDf.head()","08778a92":"transformer = Transformer.from_crs(\"epsg:4326\", \"epsg:3857\", always_xy=True)\ncasesDf['merLon'],casesDf['merLat']=transformer.transform(casesDf['Long'].values, casesDf['Lat'].values)","53c3e804":"casesDf['Active']=casesDf['Active'].apply(lambda x: max(x,0)) # sanitize values to be >= 0\ncasesDf['size']=casesDf['Active'].apply(lambda x: math.log(x+1)*4)","521a2b7a":"casesDf.sort_values(['Province\/State', 'Country\/Region','Date'], ascending=[True, True,True],inplace=True)\ncasesDf.reset_index(drop=True,inplace=True)\n\ncolors=[]\ncasesDf.loc[0, 'color']='green'\nfor i in range(1, len(casesDf)):\n    if(casesDf.loc[i-1,'Province\/State']==casesDf.loc[i,'Province\/State']\n       and casesDf.loc[i-1,'Country\/Region']==casesDf.loc[i,'Country\/Region']):\n        \n        if(casesDf.loc[i-1,'Active']>=casesDf.loc[i,'Active']):\n            casesDf.loc[i, 'color'] = 'green'\n        else:\n            casesDf.loc[i, 'color'] = 'red'\n    else:\n        casesDf.loc[i, 'color']='green'","22741770":"casesDf.head()","83c962d6":"activePerCountry=casesDf[['Country\/Region','Date','Active']].groupby(['Country\/Region','Date'],as_index=False).sum()\nactivePerCountry.head()","ad1dde14":"countriesPop=pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\ncountriesPop.rename({'Country (or dependency)':'Country\/Region'},axis=1,inplace=True)","d75ec7cd":"countriesPop.head()","db19e57d":"countriesContinent=pd.read_csv('..\/input\/country-to-continent\/countryContinent.csv',encoding='latin-1')\ncountriesContinent.rename({'country':'Country\/Region'},axis=1,inplace=True)","290bc7cd":"countriesContinent.head()","f2ff0aea":"mergedDf=activePerCountry.merge(countriesPop)\nmergedDf=mergedDf.merge(countriesContinent)\nmergedDf.rename({'Country\/Region':'country'},axis=1,inplace=True)\nmergedDf=mergedDf[['country','continent', 'Date', 'Active', 'Population (2020)', 'sub_region']]\n\nmergedDf=mergedDf[mergedDf['Population (2020)']>100000]\nmergedDf=mergedDf[mergedDf['country']!='Qatar']\nmergedDf=mergedDf[mergedDf['country']!='Luxembourg']\nmergedDf['casesPer100k'] = 100000. * mergedDf['Active']\/mergedDf['Population (2020)']\n\ncontinents=mergedDf.continent.unique()\ncolors=['green','blue','black','red','yellow']\ncontinentColors=dict(zip(continents,colors))\nprint(continentColors)\nprint()\nmergedDf['color']=mergedDf['continent'].apply(lambda x: continentColors[x])\nmergedDf['dateStr']=mergedDf['Date'].apply(lambda x: str(x))\n\nmergedDf.head(3)","3d3f5313":"continentDf=mergedDf\\\n    .groupby(['continent','Date'])\\\n    .agg({'Active': \"sum\", 'Population (2020)': \"sum\"})\\\n    .reset_index()\ncontinentDf['casesPer100k']= 100000 * continentDf['Active']\/continentDf['Population (2020)']\ncontinentDf['dateStr']=continentDf['Date'].apply(lambda x: str(x))\ncontinentDf['country']=continentDf['Date'].apply(lambda x: \"All\")\ncontinentDf=continentDf[['country', 'continent', 'Date', 'casesPer100k', 'dateStr']]\ncontinentDf.head(3)","6ccdfcb6":"regionDf=mergedDf\\\n    .groupby(['continent', 'sub_region', 'Date'])\\\n    .agg({'Active': \"sum\", 'Population (2020)': \"sum\"})\\\n    .reset_index()\nregionDf['casesPer100k']= 100000 * regionDf['Active']\/regionDf['Population (2020)']\nregionDf['dateStr']=regionDf['Date'].apply(lambda x: str(x))\nregionDf['country']=regionDf['sub_region']\nregionDf=regionDf[['country', 'continent', 'Date', 'casesPer100k', 'dateStr']]\nregionDf.head(3)","e93349aa":"source = ColumnDataSource(data=dict(merLon=casesDf['merLon'], merLat=casesDf['merLat'], size=casesDf['size'],date=casesDf['Date'],\n                                    Country=casesDf['Country\/Region'],Confirmed=casesDf['Confirmed'],Deaths=casesDf['Deaths'],Recovered=casesDf['Recovered'],\n                                    Active=casesDf['Active'],province=casesDf['Province\/State'],color=casesDf['color']))\n\ntile_provider = get_provider(Vendors.CARTODBPOSITRON)\n\nTOOLTIPS = [\n    (\"Country\", \"@Country\"),\n    (\"Province\/state\", \"@province\"),\n    (\"Active\", \"@Active\"),\n    (\"Confirmed\", \"@Confirmed\"),\n    (\"Deaths\", \"@Deaths\"),\n    (\"Recovered\", \"@Recovered\")\n]\n\nmapChart = figure(x_range=(-1.5e7, 1.8e7), y_range=(-5e6, 1e7),\n           title = 'COVID-19 Cases Per Country\/Region. Move slider to change date.',\n           x_axis_type=\"mercator\", y_axis_type=\"mercator\", \n           plot_width=800, plot_height=450, tooltips=TOOLTIPS)\n\nmapChart.add_tile(tile_provider)\n\ndate_range_slider = DateSlider(title=\"Date Range: \", start=min(casesDf['Date']), \n                               end=max(casesDf['Date']), value=max(casesDf['Date']))\n\n# this filter selects rows of data source that satisfy the constraint\ncustom_filter = CustomJSFilter(args=dict(slider=date_range_slider), code=\"\"\"\n    function roundDate(timeStamp){\n        timeStamp -= timeStamp % (24 * 60 * 60 * 1000);\/\/subtract amount of time since midnight\n        return timeStamp;\n    }\n    \n    const indices = []\n    for (var i = 0; i < source.get_length(); i++) {\n        if (source.data['date'][i] == roundDate(slider.value)) {\n            indices.push(true)\n        } else {\n            indices.push(false)\n        }\n    }\n    return indices\n\"\"\")\n\nview = CDSView(source=source, filters=[custom_filter])\n\n# re-render\ndate_range_slider.js_on_change('value', CustomJS(args=dict(source=source), code=\"\"\"\n   source.change.emit()\n\"\"\"))\n\nmapChart.circle(x=\"merLon\", y=\"merLat\", size='size', fill_color=\"color\", \n                fill_alpha=0.8, source=source,view=view)","0d374d0c":"TOOLTIPS = [(\"Date\", \"@dateStr\"), (\"Cases per 100.000\", \"@casesPer100k\"),\\\n        (\"Region\", \"@country\"), (\"Continent\", \"@continent\")]\n\nlineChart = figure(plot_width=800, plot_height=350, tooltips=TOOLTIPS, \n    title = 'COVID-19 Cases Per 100.000 People, Continents and Regions, Linear Scale. Click legend items to mute.',\n    x_axis_label = 'Date', y_axis_label = 'Cases per 100.000 (linear scale)')\n\nfor cont, c in zip(continents, colors):\n    dfC = continentDf[continentDf['continent']==cont]\n    sourceC = ColumnDataSource(dfC)\n    lineChart.line(x='Date', y='casesPer100k',color=c,alpha=0.9,\n                   muted_color=c, muted_alpha=0.1,\n                   line_width=2,source=sourceC,legend_label=cont)\n\n    regions = regionDf[regionDf['continent']==cont].country.unique()\n    for reg in regions:\n        dfR = regionDf[regionDf['country']==reg]\n        sourceR = ColumnDataSource(dfR)\n        lineChart.line(x='Date', y='casesPer100k',color=c,\n                       muted_color=c, muted_alpha=0.2,\n                       line_width=0.5,source=sourceR,legend_label=cont)\n\nlineChart.legend.location = \"top_left\"\nlineChart.legend.click_policy = \"mute\"\n\nlineChart.xaxis.formatter=DatetimeTickFormatter(hours=[\"%d %B %Y\"],\n            days=[\"%d %B %Y\"],  months=[\"%d %B %Y\"], years=[\"%d %B %Y\"])","510e8043":"TOOLTIPS2 = [(\"Date\", \"@dateStr\"), (\"Cases per 100.000\", \"@casesPer100k\"),\n        (\"Country\", \"@country\"), (\"Continent\", \"@continent\")]\n\nlineChart2 = figure(plot_width=800, plot_height=450, tooltips=TOOLTIPS2, y_axis_type=\"log\", \n    title = 'COVID-19 Cases Per 100.000 People, Continents and Countries, Logarithmic Scale. Click legend items to hide.',\n    x_axis_label = 'Date', y_axis_label = 'Cases per 100.000 (log scale)')\n\nfor cont, c in zip(continents, colors):\n    dfC2 = continentDf[continentDf['continent']==cont]\n    sourceC2 = ColumnDataSource(dfC2)\n    lineChart2.line(x='Date', y='casesPer100k',color=c,alpha=0.9,\n                                   line_width=2.5,source=sourceC2,legend_label=cont)\n\n    countries = mergedDf[mergedDf['continent']==cont].country.unique()\n    for country in countries:\n        dfR2 = mergedDf[mergedDf['country']==country]\n        sourceR2 = ColumnDataSource(dfR2)\n        lineChart2.line(x='Date', y='casesPer100k',color=c,alpha=0.7,\n                       line_width=0.5,source=sourceR2,legend_label=cont)\n\nlineChart2.legend.location = \"top_left\"\nlineChart2.legend.click_policy = \"hide\"\nlineChart2.xaxis.formatter=DatetimeTickFormatter(hours=[\"%d %B %Y\"],\n            days=[\"%d %B %Y\"],  months=[\"%d %B %Y\"], years=[\"%d %B %Y\"])","70684c7e":"source2 = ColumnDataSource(mergedDf)\n\nTOOLTIPS = [\n    (\"Date\", \"@dateStr\"),\n    (\"Cases per 100.000\", \"@casesPer100k\"),\n    (\"Country\", \"@country\"),\n    (\"Continent\", \"@continent\"),\n]\nscatterChart = figure(plot_width=800, plot_height=450,tooltips=TOOLTIPS,\n                    title = 'COVID-19 Cases Per 100.000 People, Countries',\n                    x_axis_label = 'Date', y_axis_label = 'Cases per 100.000')\nscatterChart.circle(x='Date', y='casesPer100k',color='color',source=source2,fill_color=\"white\")\nscatterChart.xaxis.formatter=DatetimeTickFormatter(\n        hours=[\"%d %B %Y\"],\n        days=[\"%d %B %Y\"],\n        months=[\"%d %B %Y\"],\n        years=[\"%d %B %Y\"],\n    )","a0f6f4d3":"output_notebook()","1da27a4f":"layout = row( column(date_range_slider,mapChart,lineChart,lineChart2,scatterChart) )\nshow (layout)","b225effb":"**We compute size attribute for the points on out map by applying a log on active cases, so the big points don't cover too much area**","a111f7a0":"**Replace missing provinces with a info message for easier data handling**","07feee58":"**We convert date field to a dedicated format**","45746047":"### Loading and preprocessing of datasets","b5e84d8a":"**We create another dataframe for our second chart. This plot is grouped by countries.**","3dd0bcc2":"**Line plot creation**","c3297392":"**Conversion of coordinates to mercator format used in the map**","bb225b70":"**Dataset containing population of countries - we rename a column so we can join them**","72d23027":"**Scatter plot creation**","b8a7321a":"**Map chart creation**","c9f9f0f2":"**We join the 3 dataframes. Tiny countries and other 2 outliers are removed. We compute the number of cases per 100k persons in the countries and assign a color according to its continent.**","2d6d2be8":"### Plot interpretation\n#### Map\n* We can use the date slider to see the spatial development of the pandemic over time. \n* Circle size represents number of active cases on the day, logarithmic scale is used so the most impacted countries do not cover too much area.\n* The color is red in case there was an increase in the number of cases compared to the previous day, otherwise it is green. Because of this, we can easily see when certain areas hit peak of the pandemic, also we can notice which countries lifted the restrictions too early in case the decline is not stable (colors keep changing as we move the slider).\n* We can see which parts of the world are not stable yet in terms of the number of cases.\n\n#### Lineplots and Scatterplot\n* A different point of view on the pandemic's waves and its spatial development. \n* X axis represents time, Y axis represents number of cases per 100.000 persons in the country, so we can compare the intensities of the pandemic more fairly. Color represents the continent (Asia: green, Africa: black, Europe: blue, Americas: red, Oceania: yellow).\n* Wawes in the Americas are clearly still rising, some of them in a very steep way.\n* We can see the very first wawe of the pandemic which was in china was not that strong compared to other countries later.\n* We can see the wawes in the European countries are slowly ending, some where very steep some rather flat.\n* In the bottom right we can notice some African countries starting to rise, which might be another part of the world where will the pandemic beccome very strong.\n* The first line plot shows continent and subregion aggregates with linear y scale.\n* The second line plot shows all countries grouped per continent with logarithmic y scale.\n* The scatter plot shows all countries with linear y scale.","1e97667a":"**Dataset containing continent of countries - we rename a column so we can join them**","e0772abd":"**We add a color attribute for the map plot. The color is green if the number of active cases in the country did not increase compared to previous day, otherwise it's red**","5080948f":"# Information visualization UE SS 2020 - Exercise 4\n## Covid 19 pandemic - analysis\n### Marek Furka, Marko Spegel-Gr\u00fcnberger\n\n\n\n**Data sources:**\n* Development of cases per country over time - https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report\n* Country vs. continent relation - https:\/\/www.kaggle.com\/statchaitya\/country-to-continent\n* Population of countries - https:\/\/www.kaggle.com\/tanuprabhu\/population-by-country-2020","398a6374":"**We create aggregates for continents and regions.**"}}