{"cell_type":{"453ac953":"code","8ed5c1cf":"code","9625e660":"code","4fbca8ee":"code","9587c004":"code","bf0c828b":"code","18859a34":"code","fc56452f":"code","4c480759":"code","8edaaf8c":"code","1294fb3e":"code","804fb842":"code","31dd4d6e":"code","3e78acdd":"code","db7678ce":"code","da6491af":"code","69640c33":"code","ee3a3402":"code","beeaf3eb":"code","39efdbb3":"code","7456bb3d":"code","aff031a6":"code","7a79292c":"markdown","19432bec":"markdown","f863ef2b":"markdown","45f02ac5":"markdown","0f71f3bc":"markdown","4f5b6eb3":"markdown","567c1529":"markdown","266af6df":"markdown"},"source":{"453ac953":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sklearn\nimport sklearn.preprocessing as pp\nimport sklearn.model_selection as ms\nimport sklearn.metrics as metrics\nimport json","8ed5c1cf":"import os\nos.listdir('..\/input')","9625e660":"df = pd.read_csv('..\/input\/train.csv')\nsdf = pd.read_csv('..\/input\/test.csv')\nsample = pd.read_csv('..\/input\/sample_submission.csv')\ndf = df.set_index('Id')\nsdf = sdf.set_index('Id')\ndf.head()\n","4fbca8ee":"price = df.SalePrice\nprint(\"Average sale price: \" + \"${:,.0f}\".format(price.mean()))","9587c004":"df = df.drop('SalePrice', axis=1)\nall_df = df.append(sdf)\nall_df.shape\n","bf0c828b":"all_features = 'MSSubClass,MSZoning,LotFrontage,LotArea,Street,Alley,LotShape,LandContour,Utilities,LotConfig,LandSlope,Neighborhood,Condition1,Condition2,BldgType,HouseStyle,OverallQual,OverallCond,YearBuilt,YearRemodAdd,RoofStyle,RoofMatl,Exterior1st,Exterior2nd,MasVnrType,MasVnrArea,ExterQual,ExterCond,Foundation,BsmtQual,BsmtCond,BsmtExposure,BsmtFinType1,BsmtFinSF1,BsmtFinType2,BsmtFinSF2,BsmtUnfSF,TotalBsmtSF,Heating,HeatingQC,CentralAir,Electrical,1stFlrSF,2ndFlrSF,LowQualFinSF,GrLivArea,BsmtFullBath,BsmtHalfBath,FullBath,HalfBath,BedroomAbvGr,KitchenAbvGr,KitchenQual,TotRmsAbvGrd,Functional,Fireplaces,FireplaceQu,GarageType,GarageYrBlt,GarageFinish,GarageCars,GarageArea,GarageQual,GarageCond,PavedDrive,WoodDeckSF,OpenPorchSF,EnclosedPorch,3SsnPorch,ScreenPorch,PoolArea,PoolQC,Fence,MiscFeature,MiscVal,MoSold,YrSold,SaleType,SaleCondition'.split(',')\nnumeric_features = ['LotFrontage', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','LowQualFinSF','GrLivArea','BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr','TotRmsAbvGrd','TotalBsmtSF','Fireplaces', 'GarageCars', 'GarageArea','WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal']\ncategorical_features = [f for f in all_features if not(f in numeric_features)]\n\n(len(all_features), len(categorical_features), len(numeric_features))\n","18859a34":"numeric_df = all_df[numeric_features]\nnumeric_df.shape\n","fc56452f":"X = numeric_df.as_matrix()\n\n# Impute missing\n\nimp = pp.Imputer(missing_values='NaN', strategy='most_frequent', axis=0)\nimp = imp.fit(X)\nX = imp.transform(X)\nX.shape","4c480759":"scaler = pp.StandardScaler()\nscaler.fit(X)\nX = scaler.transform(X)\nX[0, :]","8edaaf8c":"def process_categorical(ndf, df, categorical_features):\n    for f in categorical_features:\n        new_cols = pd.DataFrame(pd.get_dummies(df[f]))\n        new_cols.index = df.index\n        ndf = pd.merge(ndf, new_cols, how = 'inner', left_index=True, right_index=True)\n    return ndf\n\nnumeric_df = pd.DataFrame(X)\nnumeric_df.index = all_df.index\ncombined_df = process_categorical(numeric_df, all_df, categorical_features)\ncombined_df.head()\n\n","1294fb3e":"\n\nX = combined_df.values\nX.shape\n\n","804fb842":"#PCA\nfrom sklearn.decomposition import PCA\n\ntest_n = df.shape[0]\nprint(test_n)\npca = PCA()\npca.fit(X[:test_n,:], price)\nX = pca.transform(X)\nX.shape","31dd4d6e":"X_train = X[:test_n,:]\nX_train, X_val, y_train, y_val = ms.train_test_split(X_train, price, test_size=0.3, random_state=0)\nX_test = X[test_n:,:]\n\n(X_train.shape, X_val.shape, X_test.shape)","3e78acdd":"from sklearn import linear_model\n\nlr = linear_model.LinearRegression()\nlr.fit(X_train, y_train)\n\ndef print_score(alg, score, params):\n    print('%s score is %f with params %s' % (alg, score, json.dumps(params)))\n","db7678ce":"for a in np.arange(151., 152., 0.1):\n    lasso = linear_model.Lasso(alpha=a, max_iter=2000)\n    lasso.fit(X_train, y_train)\n    print_score('Lasso', lasso.score(X_val, y_val), {'alpha': a})\n\n","da6491af":"lasso = linear_model.Lasso(alpha=151.7, max_iter=2000)\nlasso.fit(X_train, y_train)","69640c33":"for a in np.arange(25., 26., 0.05):\n    ridge = linear_model.Ridge(alpha=a, max_iter=2000)\n    ridge.fit(X_train, y_train)\n    print_score('Lasso', ridge.score(X_val, y_val), {'alpha': a})","ee3a3402":"ridge = linear_model.Ridge(alpha=25.5, max_iter=2000)\nridge.fit(X_train, y_train)","beeaf3eb":"import xgboost as xgb\nparams = {'eval_metric':'rmse'}\nxm = xgb.DMatrix(X_train, label=y_train)\nxmodel = xgb.train(params, xm)\nxg_y_pred = xmodel.predict(xgb.DMatrix(X_val))","39efdbb3":"print('XGBoost score is %f' % metrics.r2_score(y_val, xg_y_pred))\nprint('Ridge score is %f' % ridge.score(X_val, y_val))\nprint('Lasso score is %f' % lasso.score(X_val, y_val))\nprint('Linear Regression score is %f' % lr.score(X_val, y_val))\n\nbest = ridge","7456bb3d":"best.fit(X[:test_n, :], price)\ny_submit = best.predict(X_test)\ny_submit[y_submit < 0] = 1.\nsdf['SalePrice'] = y_submit\nsdf.to_csv('submission1.csv', columns = ['SalePrice'])\n\nxmodel = xgb.train(params, xgb.DMatrix(X[:test_n, :], label=price))\ny_submit = xmodel.predict(xgb.DMatrix(X_test))\ny_submit[y_submit < 0] = 1.\nsdf['SalePrice'] = y_submit\nsdf.to_csv('submission2.csv', columns = ['SalePrice'])","aff031a6":"X_train.shape","7a79292c":"### Ridge Regression\n","19432bec":"### Expand Categorical Cols","f863ef2b":"### Linear Regression Model","45f02ac5":"### Load Dataset","0f71f3bc":"### Lasso Regression","4f5b6eb3":"### \n- Impute Only impute for numeric variables, categorical will have a NA column\n","567c1529":"### Combine test and train for preprocessing","266af6df":"### Gradient Boosting\n"}}