{"cell_type":{"f209373d":"code","4c02231c":"code","dfe76463":"code","e0dcf954":"code","5e552432":"code","a79fdf04":"code","ed4c9d1c":"code","617ea76b":"code","9c6e5a9e":"code","15a6ed33":"code","54fbb49f":"code","9aa150e6":"code","18740bb4":"code","735e59e1":"code","eeffa1d0":"code","78bce8f3":"code","db51f824":"code","05bcf4b6":"code","8d6ac64c":"code","5e4f9da2":"code","ca3fe2c9":"code","8bb22fcc":"code","fcdbac4f":"code","64e41893":"code","3a3e284a":"code","e44efdec":"code","54c6cbdb":"code","28a61786":"markdown","7bf591e6":"markdown","f2dfb2cb":"markdown","b59a75d0":"markdown","b66b7fab":"markdown","50cc74d7":"markdown","3a8fa4f2":"markdown","71056be2":"markdown","6a0bb15c":"markdown","556a4c9c":"markdown","61d554ca":"markdown","68cec4a4":"markdown","ac3bd523":"markdown","e621e6e4":"markdown","a24cc980":"markdown","81c4ac6a":"markdown","9ed5ba84":"markdown","46e4ca24":"markdown"},"source":{"f209373d":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\n\n# For import data\nimport os\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Modeling and Prediction\nfrom fbprophet import Prophet\nfrom sklearn.metrics import r2_score\n\nimport warnings\nwarnings.simplefilter('ignore')","4c02231c":"# Import files with data from Kaggle dataset\ndataset_files = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        dataset_files.append(os.path.join(dirname, filename))\ndataset_files","dfe76463":"# Selection Air Quality station 0, 1, ... 4\nstation_num = 1  # Vinnytsia city, 3rd Chekhova Passage, 21","e0dcf954":"# Data download\ndata = pd.read_csv(dataset_files[station_num], sep=',', header=0)\ndata","5e552432":"# All phenomenon (\u043f\u043e\u043a\u0430\u0437\u043d\u0438\u043a \u044f\u043a\u043e\u0441\u0442\u0456 \u0430\u0442\u043c\u043e\u0441\u0444\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u0456\u0442\u0440\u044f)\nphenomenon_list = data['phenomenon'].unique().tolist()\nphenomenon_list","a79fdf04":"# Selection phenomenon (\u043f\u043e\u043a\u0430\u0437\u043d\u0438\u043a \u044f\u043a\u043e\u0441\u0442\u0456 \u0430\u0442\u043c\u043e\u0441\u0444\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u0456\u0442\u0440\u044f)\nnum_phenomenon = 0\nphenomenon_name = phenomenon_list[num_phenomenon]\nphenomenon_name","ed4c9d1c":"# Selection phenomenon in dataset\ndf = data[data['phenomenon']==phenomenon_name]\ndf","617ea76b":"# Selection data for forecasting \ndf = df[['logged_at', 'value']].reset_index(drop=True)\ndf.columns = ['ds', 'y']\ndf","9c6e5a9e":"# Set date as date & time \ndf['ds'] = pd.to_datetime(df['ds'], format='%Y-%m-%d %H:%M:%S', errors='ignore')\n\n# Remove rows with y = NA\ndf = df.dropna()\ndf['y'] = df['y'].astype('float')\ndf","15a6ed33":"df.info()","54fbb49f":"df.index = df['ds']\ndf = df.drop(columns=['ds'])\ndf","9aa150e6":"df = df.resample('1D').mean()\ndf = df.dropna()","18740bb4":"# Transform to Prophet file format\ndf = df.reset_index(drop=False)\ndf.tail(5)","735e59e1":"# Build the plot\ndf['y'] = df['y'].astype('float')\ndf['y'].plot()","eeffa1d0":"# Find anomalous data\nthreshold_min = 0.975\ndf.describe([threshold_min])","78bce8f3":"# Get anomalous data\ndf_abnorm = df[(df['y'] >= np.quantile(df['y'], threshold_min))]\ndf_abnorm","db51f824":"# Get dates of anomalous data\nanomalous_dates = df_abnorm['ds'].astype('str').tolist()\nanomalous_dates","05bcf4b6":"anomalous = pd.DataFrame({\n  'holiday': 'anomalous',\n  'ds': pd.to_datetime(anomalous_dates),\n  'lower_window': 0,\n  'upper_window': 0,\n  'prior_scale': 20,\n})\nanomalous","8d6ac64c":"def plot_with_anomalies(df, cols_y_list, cols_y_list_name, dates_x, anomalous_dates, log_y=False):\n    # Thanks to https:\/\/www.kaggle.com\/vbmokin\/covid-in-ua-prophet-with-4-nd-seasonality\n    # Draws a plot with title - the features cols_y_list (y) and dates_x (x) from the dataframe df\n    # and with vertical lines in the dates from the list anomalous_dates\n    # with the length between the minimum and maximum of feature cols_y_list[0]\n    # with log_y = False or True\n    # cols_y_list - dictionary of the names of cols from cols_y_list (keys - name of feature, value - it's name for the plot legend), \n    # name of cols_y_list[0] is the title of the all plot\n    \n    fig = px.line(df, x=dates_x, y=cols_y_list[0], title=cols_y_list_name[cols_y_list[0]], log_y=log_y, template='gridon',width=800, height=600)\n    y_max = df[cols_y_list[0]].max()\n    for i in range(len(cols_y_list)-1):\n        fig.add_trace(go.Scatter(x=df[dates_x], y=df[cols_y_list[i+1]], mode='lines', name=cols_y_list_name[cols_y_list[i+1]]))\n        max_i = df[cols_y_list[i+1]].max()\n        y_max = max_i if max_i > y_max else y_max\n    \n    y_min = min(df[cols_y_list[0]].min(),0)\n    for i in range(len(anomalous_dates)):\n        anomal_date = anomalous_dates[i]\n        #print(anomal_date, y_min, y_max)\n        fig.add_shape(dict(type=\"line\", x0=anomal_date, y0=y_min, x1=anomal_date, y1=y_max, line=dict(color=\"red\", width=1)))\n    fig.show()","5e4f9da2":"plot_with_anomalies(df, [\"y\"], {\"y\" : f\"Anomalous dates with data of {phenomenon_name}\"}, 'ds', anomalous_dates, False)","ca3fe2c9":"# Build Prophet model with parameters and structure \nmodel = Prophet(daily_seasonality=False, weekly_seasonality=True, yearly_seasonality=False, \n                changepoint_range=1, changepoint_prior_scale = 0.5, \n                holidays=anomalous, seasonality_mode = 'multiplicative')\nmodel.add_seasonality(name='2_weeks', period=14, fourier_order=10, \n                      mode = 'multiplicative', prior_scale = 0.5)\nmodel.add_seasonality(name='month', period=365.25\/12, fourier_order=6, \n                      mode = 'multiplicative', prior_scale = 0.3)\nmodel.add_seasonality(name='quarter', period=365.25\/4, fourier_order=3, \n                      mode = 'multiplicative', prior_scale = 0.15)\n\n# Training model for df\nmodel.fit(df)","8bb22fcc":"# Make a forecast\nforecasting_period = 14  # 14 days\nfuture = model.make_future_dataframe(periods = forecasting_period)\nforecast = model.predict(future)","fcdbac4f":"# Draw plot of the values with forecasting data\nfigure = model.plot(forecast, xlabel = 'Date', ylabel = phenomenon_name)","64e41893":"# Draw plot with the components (trend and seasonalities) of the forecasts\nfigure_component = model.plot_components(forecast)","3a3e284a":"# Ouput the prediction for the next time\nforecast[['yhat_lower', 'yhat', 'yhat_upper']] = forecast[['yhat_lower', 'yhat', 'yhat_upper']].round(2)\nforecast[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(10)","e44efdec":"# Calculation training data by the model\ny_pred = forecast['yhat'][:-forecasting_period]\ny_pred","54c6cbdb":"# Calculation r2_score (accuracy of prediction for training data)\nprint(\"R2_score =\", round(r2_score(df['y'], y_pred)*100,2))","28a61786":"## 4. Modeling<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","7bf591e6":"# Dataset [Air Quality Monitoring](https:\/\/www.kaggle.com\/vbmokin\/air-quality-monitoring)","f2dfb2cb":"**TASK:** Try to change 'prior_scale': 1, 5, 10, 15, 30","b59a75d0":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [EDA & FE](#3)\n1. [Modeling](#4)\n1. [Prediction & Visualization](#5)","b66b7fab":"**TASK:** Try to change to forecasting_period (duration of the forecast period in days)","50cc74d7":"### Get anomalous data","3a8fa4f2":"## 5. Prediction & Visualization<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","71056be2":"**TASK:** Try to make a prediction for another value of num_phenomenon.","6a0bb15c":"## 3. EDA & FE<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","556a4c9c":"**TASK:** Try to aggregate data, i.e. go from every second data to total or average data per day or hour.","61d554ca":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","68cec4a4":"# Air Quality Station Forecasting by Prophet - Daily Forecasting","ac3bd523":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","e621e6e4":"## Acknowledgements\n\n### Notebooks:\n* [Air Quality Station Forecasting - Prophet](https:\/\/www.kaggle.com\/vbmokin\/air-quality-station-forecasting-prophet) (forecasting with seconds frequence)\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)\n* [EDA for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/eda-for-tabular-data-advanced-techniques)\n* [COVID in UA: Prophet with 4, Nd seasonality](https:\/\/www.kaggle.com\/vbmokin\/covid-in-ua-prophet-with-4-nd-seasonality)\n* [AI-ML-DS Training. L1T : COVID in UA - Prophet](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-l1t-covid-in-ua-prophet?scriptVersionId=63736090)\n\n### Libraries from GitHub:\n- https:\/\/facebook.github.io\/prophet\/\n- https:\/\/facebook.github.io\/prophet\/docs\/\n- https:\/\/github.com\/facebook\/prophet","a24cc980":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","81c4ac6a":"**ADDITIONAL TASK:** Try changing the parameters of the Prophet model and evaluate how this will affect the shape of the curve and the accuracy of the simulation","9ed5ba84":"As you can see there is a problem with '2.6200' in the column 'phenomenon'.","46e4ca24":"**TASK:** Try to change threshold_min."}}