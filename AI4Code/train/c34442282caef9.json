{"cell_type":{"5d83c5e0":"code","16673f8f":"code","7307e098":"code","7cfb0fb8":"code","0d837a8e":"code","48d40a76":"code","adeb5df4":"code","8a50a295":"code","3dc14c13":"code","dda042c5":"code","9034abef":"code","3092615c":"code","94a25457":"code","b2c47f0f":"code","0a6beb91":"code","ca386448":"code","c92d9b96":"code","a39b1a80":"code","2003f22b":"code","8079f6b4":"code","6c4530d9":"code","8e56ee23":"code","f3906300":"code","fed0bbcd":"code","439bb326":"code","b7b6bea4":"code","173b2415":"code","9e9938fe":"code","a6c7beba":"code","1f542fc0":"code","b8984819":"code","13c22650":"code","c0b15fc1":"code","48f15986":"markdown"},"source":{"5d83c5e0":"import numpy as np\nimport pandas as pd\nimport os\nimport time\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom keras import regularizers\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout\nfrom keras.layers import LSTM\n\nfrom sklearn.preprocessing import StandardScaler","16673f8f":"INPUT_DIR = '..\/input\/'","7307e098":"nRows = 430039\nnGiven = 10\nnPredict = 15\nnFeature = 7","7cfb0fb8":"filename = os.path.join(INPUT_DIR, 'train_data.csv')\ntrain_csv = pd.read_csv(filename)\ntimestamp = []\nfor i in range(nRows):\n    dt = time.strptime(train_csv['Date'][i] + ' ' + train_csv['Time'][i], \"%Y-%m-%d %H:%M:%S\")\n    dt_new = time.mktime(dt)\n    timestamp.append(dt_new)","0d837a8e":"index = ['MidPrice','LastPrice','Volume','BidPrice1','BidVolume1','AskPrice1','AskVolume1']\ntrain_ds = train_csv[index]","48d40a76":"mid_price = np.array(train_csv['MidPrice']).astype(np.float64)","adeb5df4":"x_raw = np.array(train_ds.values).astype(np.float64)","8a50a295":"X = []\ny = []\n\nfake_point = 0\nvolume_sum = 0\nvolume_len = 0\n\nnoise_flag = True\n\nfor k in range(nRows - nGiven - nPredict):\n    if k%10000==0:\n        print(k,end = '\\r')\n    x_cur = x_raw[k:k+nGiven].copy()\n    last_mp = x_cur[nGiven-1,0]\n    for axis in [0,1,3,5]: # MidPrice, LastPrice, BidPrice1, AskPrice1\n        x_cur[:,axis] -= last_mp\n        x_cur[:,axis] \/= last_mp\n\n    for i in range(9,0,-1):\n        x_cur[i,2]-=x_cur[i-1,2]\n        volume_sum+=x_cur[i,2]\n        volume_len+=1\n    x_cur[0,2]=volume_sum\/volume_len\n    \n    if noise_flag:\n        x_cur*=(1 + 0.001*(np.random.rand(10,nFeature) - 0.5)*2)\n    \n    if timestamp[k+nGiven+nPredict] - timestamp[k]> (3*(nGiven+nPredict)): \n        fake_point+=1\n    else:\n        token = True\n        for i in range(nGiven+nPredict-1):\n            if timestamp[k+1+i] - timestamp[k+i] != 3:\n                token = False\n                break\n        if token:\n            X.append(x_cur)\n            y.append((sum(mid_price[k+nGiven:k+nGiven+nPredict])\/nPredict-\n                         mid_price[k+nGiven-1])\/mid_price[k+nGiven-1])\n        else:\n            fake_point+=1\nprint()\nprint(fake_point)","3dc14c13":"X = np.array(X).astype(np.float64)\ny = np.array(y).astype(np.float64)\ny = y.reshape((-1,1))","dda042c5":"X_tmp = X.reshape(-1,nFeature)","9034abef":"x_scaler = StandardScaler().fit(X_tmp)\nX_tmp_norm = x_scaler.transform(X_tmp)","3092615c":"X_norm = X_tmp_norm.reshape(-1,nGiven,nFeature)","94a25457":"if not noise_flag:\n    assert(X_norm[0][1][1]==X_norm[0][2][1])","b2c47f0f":"y_std = np.std(y)\ny_mean = np.mean(y)","0a6beb91":"y_norm = (y-y_mean)\/y_std","ca386448":"from sklearn.model_selection import train_test_split\nX_train, X_dev, y_train, y_dev = train_test_split(X_norm, y_norm, test_size=0.05, random_state=42)\nprint(X_train.shape)\nprint(y_train.shape)","c92d9b96":"model = Sequential()\nmodel.add(LSTM(input_shape=(None, nFeature),activation='softsign',dropout=0.5, units=256, return_sequences=True))\nmodel.add(LSTM(units=256,activation='softsign',dropout=0.5, return_sequences=False))\nmodel.add(Dense(64,kernel_initializer=\"glorot_normal\",activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1,kernel_initializer=\"uniform\",activation='linear'))\nmodel.compile(loss='mean_squared_error', optimizer='Adam')","a39b1a80":"batch_size = 128\nepochs = 12","2003f22b":"hists = []\nhist = model.fit(X_train, y_train, \n                 epochs = epochs,\n                 batch_size = batch_size,\n                 validation_data=(X_dev,y_dev))\nhists.append(hist)","8079f6b4":"hist_df = pd.concat([pd.DataFrame(hist.history) for hist in hists], sort=True)\nhist_df.index = np.arange(1, len(hist_df)+1)\nfig, axs = plt.subplots(nrows=1, sharex=True, figsize=(16, 10))\naxs.plot(hist_df['val_loss'], lw=5, label='Validation MSELoss')\naxs.plot(hist_df['loss'], lw=5, label='Training MSELoss')\naxs.set_ylabel('MSELoss')\naxs.set_xlabel('Epoch')\naxs.grid()\naxs.legend(loc=0)\nfig.savefig('hist.png', dpi=300)\nplt.show();","6c4530d9":"filename = os.path.join(INPUT_DIR, 'test_data.csv')\ntest_csv = pd.read_csv(filename)","8e56ee23":"nRows_test = 10000","f3906300":"index = ['MidPrice','LastPrice','Volume','BidPrice1','BidVolume1','AskPrice1','AskVolume1']\ntest_ds = test_csv[index]\nmid_price_test = np.array(test_csv['MidPrice']).astype(np.float64)\nx_test_raw = np.array(test_ds.values).astype(np.float64)","fed0bbcd":"X_test = []\nmid_price_batch_test = []\nvolume_sum_test = 0\nvolume_len_test = 0\nfor k in range(int(nRows_test\/nGiven)):\n    x_cur = x_test_raw[k*nGiven:k*nGiven+nGiven].copy()\n    last_mp = x_cur[nGiven-1,0]\n    for axis in [0,1,3,5]: # MidPrice, LastPrice, BidPrice1, AskPrice1\n        x_cur[:,axis] -= last_mp\n        x_cur[:,axis] \/= last_mp\n\n    for i in range(9,0,-1):\n        x_cur[i,2]-=x_cur[i-1,2]\n        volume_sum_test+=x_cur[i,2]\n        volume_len_test+=1\n    x_cur[0,2]=volume_sum_test\/volume_len_test\n    \n    X_test.append(x_cur)\n    mid_price_batch_test.append(mid_price_test[k*10+nGiven-1])","439bb326":"X_test = np.array(X_test).astype(np.float64)\nX_test = X_test.reshape(-1,nGiven,nFeature)\nmid_price_batch_test = np.array(mid_price_batch_test).astype(np.float64).reshape(-1,1)","b7b6bea4":"X_tmp_test = X_test.reshape(-1,nFeature)\nX_tmp_norm_test = x_scaler.transform(X_tmp_test)\nX_norm_test = X_tmp_norm_test.reshape(-1,nGiven,nFeature)","173b2415":"y_test_pred = model.predict(X_norm_test)","9e9938fe":"y_test_pred = y_test_pred.reshape(-1,1)","a6c7beba":"result = y_test_pred * mid_price_batch_test * y_std + y_mean + mid_price_batch_test","1f542fc0":"offset = 142","b8984819":"result_offset = result[offset:int(nRows_test\/10)]","13c22650":"submission = pd.DataFrame({'caseid':list(range(offset+1,1001)),'midprice':result_offset.reshape(-1,)})","c0b15fc1":"submission.to_csv('submission', index=False)\nsubmission.head()","48f15986":"* FAT: Forget about time\n* Delta: Predict (x\\* - last MidPrice) rather than x\\*"}}