{"cell_type":{"83bbb1a2":"code","a4a2896e":"code","075d1826":"code","5bc2fc4f":"code","cac5c7d9":"code","25b984d5":"code","548908e5":"code","3731b7b9":"code","f3eb6417":"code","5b8c7ffb":"code","3eb79f65":"code","bfdc1d5e":"code","cd791f4b":"code","578c9b5d":"code","1434f50a":"code","053b1a56":"code","d3e1eba5":"code","1b87fbe3":"code","48a96eb7":"code","14d3dcba":"code","71e7d7f1":"code","9dde2726":"code","3e92f2d2":"code","70fa3afe":"code","e46b77ba":"code","abdd90d9":"code","473f91de":"markdown","9f6fe4f8":"markdown","50b5c5e3":"markdown","1ddf419b":"markdown","aedf9d68":"markdown","81b79bb3":"markdown","90b11c0e":"markdown","5ab46eb0":"markdown","fc98e2bf":"markdown","04aa60d6":"markdown","5244983a":"markdown","84013859":"markdown","2bb44945":"markdown","03d5d3a2":"markdown","f1dac83d":"markdown","4864878e":"markdown","f7ea11f0":"markdown","af9796da":"markdown","c2c749e7":"markdown","395c8ea3":"markdown","711c42ea":"markdown","5d1d1cbe":"markdown","cb8af315":"markdown","7e01d0b5":"markdown","e60c60af":"markdown"},"source":{"83bbb1a2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","a4a2896e":"x = np.linspace(1,100,100,dtype=\"int8\")\ny1 = np.random.randint(1,100,100)\ny2 = np.random.randint(1,100,100)","075d1826":"plt.figure(figsize=(16,4))\nplt.plot(x,y1)","5bc2fc4f":"plt.figure(figsize=(16,4))\nplt.scatter(x,y1,alpha=.7,color=\"red\") # alpha is for transparency","cac5c7d9":"plt.figure(figsize=(16,4))\nfor idx in range(len(x)):\n    plt.scatter(x[idx],y1[idx],alpha=.2,color=\"red\",s=.08*np.pi*y1[idx]**2) # s = size","25b984d5":"plt.figure(figsize=(16,4))\nplt.bar(x[:10],y1[:10],width=.7,color=\"red\")","548908e5":"plt.figure(figsize=(16,4))\nplt.barh(x[:10],y1[:10],color=\"orange\")","3731b7b9":"y3 = np.random.randint(1,100,100)\nplt.figure(figsize=(16,4))\nplt.bar(x[:20],y1[:20],width=.8)\nplt.bar(x[:20],y2[:20],width=.8,bottom=y1[:20])\nplt.bar(x[:20],y3[:20],width=.8,bottom=y1[:20]+y2[:20])","f3eb6417":"y3 = np.random.randint(1,100,100)\nplt.figure(figsize=(16,4))\nfor id in range(len(x[:20])):    \n    plt.bar(x[:20][id],y1[:20][id],width=.8)\n    plt.text(x[:20][id],y1[:20][id],y1[:20][id])\n    \n    plt.bar(x[:20][id],y2[:20][id],width=.8,bottom=y1[:20][id])\n    plt.text(x[:20][id],y1[:20][id]+y2[:20][id],y2[:20][id])\n    \n    plt.bar(x[:20][id],y3[:20][id],width=.8,bottom=y1[:20][id]+y2[:20][id])\n    plt.text(x[:20][id],y1[:20][id]+y2[:20][id]+y3[:20][id],y3[:20][id])\nplt.xticks(range(1,21)) # fix the x-axis values\nplt.yticks(range(1,300,25)) # fix the y-axis values\nplt.show()","5b8c7ffb":"plt.figure(figsize=(16,4))\nplt.hist(y1,rwidth=.9,bins=10,color=\"blue\",align=\"mid\")","3eb79f65":"plt.figure(figsize=(5,5))\ny = [5,7,3,8,3,9,3,1]\nplt.pie(y,shadow=True,labels=y,labeldistance=.8,center=(1,2),explode=[0,0,0,.1,0,0,.1,0])\nplt.show()","bfdc1d5e":"plt.figure(figsize=(16,4))\nplt.stem(x,y1)","cd791f4b":"plt.figure(figsize=(16,4))\nplt.figure(figsize=(16,4))\nfor idx in range(len(x)):\n    plt.scatter(x[idx],y1[idx],alpha=.8,color=\"green\",s=.03*np.pi*y1[idx]**2)\nplt.bar(x,y1,width=.2,alpha=.2) # Change the width of bar to make lolipop graph","578c9b5d":"plt.figure(figsize=(16,4))\nplt.fill_between(x,y1)\nplt.show()","1434f50a":"plt.figure(figsize=(16,4))\nplt.scatter(x,y1)\nplt.plot(x,y1)\nplt.stem(x,y1)\nplt.show()","053b1a56":"from scipy.interpolate import spline # Required for smooth plot\nplt.figure(figsize=(16,4))\n\nxnew = np.linspace(x.min(),x.max(),600)\npower_smooth = spline(x,y1,xnew)\nplt.plot(x,y1,label=\"Original\")\nplt.plot(xnew,power_smooth,label=\"Smooth\")\nplt.legend()\nplt.show()","d3e1eba5":"plt.figure(figsize=(16,4))\ndelta = 0.025\n\ndef f(x, y):\n    return np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)\n\nx1 = np.arange(-3.0, 3.0, delta)\ny1 = np.arange(-2.0, 2.0, delta)\nX,Y = np.meshgrid(x1,y1)\nZ = f(X,Y)\nCS = plt.contour(X, Y, Z,color=\"black\")\nplt.clabel(CS, inline=1, fontsize=10)\n# CS = plt.contourf(x1,x2,Z) # to fill the area\n# plt.clabel(CS, inline=1, fontsize=10)\nplt.colorbar()\n","1b87fbe3":"plt.figure(figsize=(16,4))\nim = np.random.randint(1,100,64).reshape(4,16)\ny_axis = [0,1,2,3]\nplt.yticks([0,1,2,3])\nplt.imshow(im)\nfor i in range(4):\n#     print(im[i])\n    for j in range(16):\n        if im[i][j]>60:\n            plt.text(j,i,im[i][j],color=\"red\")\n        else:\n            plt.text(j,i,im[i][j],color=\"yellow\")\nplt.colorbar()\nplt.xticks(range(0,16))\nplt.show()","48a96eb7":"plt.figure(figsize=(16,4))\nx = np.linspace(1,100,100,dtype=\"int8\")\nt1 = np.random.randint(1,100,100)\n\nfor idx in range(len(x)):\n    if t1[idx] >70:\n        plt.scatter(x[idx],t1[idx],alpha=.2,color=\"red\",s=.03*np.pi*t1[idx]**2)\n    elif t1[idx] <70 and t1[idx] >50 :\n        plt.scatter(x[idx],t1[idx],alpha=.2,color=\"blue\",s=.03*np.pi*t1[idx]**2,marker=\"^\")\n    elif t1[idx] <50 and t1[idx] >30 :\n        plt.scatter(x[idx],t1[idx],alpha=.6,color=\"orange\",s=.03*np.pi*t1[idx]**2,marker=\"v\")\n    else:\n        plt.scatter(x[idx],t1[idx],alpha=.9,color=\"cyan\",s=.03*np.pi*t1[idx]**2,marker=\"*\")\n    plt.text(x[idx],t1[idx],t1[idx])\nplt.xlabel(\"X-Axis\")\nplt.ylabel(\"Y-Axis\")\nplt.xticks(range(0,len(t1),2))\nplt.yticks(range(0,max(t1),5))\nplt.title(\"Scatter Plot\")\nplt.show()","14d3dcba":"plt.figure(figsize=(16,4))\nx = np.linspace(1,100,100,dtype=\"int8\")\nt1 = np.random.randint(1,100,100)\nplt.plot(x,t1)\nplt.axhline(40,linewidth=4,color=\"red\")\nplt.axvline(40,linewidth=12,color=\"orange\",alpha=.4)\nplt.text(40,95,\"This is Vertical Line\")\n\n# another way to add text\nplt.annotate('This is Horizontal Line', xy=(15, 40), xytext=(20, 85),arrowprops=dict(facecolor='black', shrink=-0.02))\nplt.annotate('This is Vertical Line', xy=(40, 60), xytext=(35, 85),arrowprops=dict(facecolor='green', shrink=-0.02))\n\nplt.show()","71e7d7f1":"plt.figure(figsize=(16,4))\nx = np.linspace(1,100,100,dtype=\"int8\")\nt1 = np.random.randint(1,100,100)\nt2 = np.random.randint(1,100,100)\nt3 = np.random.randint(1,100,100)\nt4 = np.random.randint(1,100,100)\nt5 = np.random.randint(1,100,100)\nt6 = np.random.randint(1,100,100)\nt7 = np.random.randint(1,100,100)\nt8 = np.random.randint(1,100,100)\nt9 = np.random.randint(1,100,100)\nplt.subplot(3,3,1)\nplt.plot(x,t1)\nplt.subplot(3,3,2)\nplt.scatter(x,t2)\nplt.subplot(3,3,3)\nplt.bar(x,t3)\nplt.subplot(3,3,4)\nplt.hist(t4)\nplt.subplot(3,3,5)\nplt.pie(t5)\nplt.subplot(3,3,6)\nplt.barh(x,t6)\nplt.subplot(3,3,7)\nplt.stem(x,t7)\nplt.subplot(3,3,8)\nplt.scatter(x,t8,marker=\"*\",color=\"red\")\nplt.subplot(3,3,9)\nplt.plot(x,t9,\"^b\")\nplt.plot(x,t9,color=\"orange\")\nplt.show()","9dde2726":"plt.figure(figsize=(16,4))\nx = np.linspace(1,100,100,dtype=\"int8\")\nt1 = np.random.randint(1,100,100)\nt2 = np.random.randint(1,100,100)\nt3 = np.random.randint(1,100,100)\nt4 = np.random.randint(1,100,100)\nf,ax_arr=plt.subplots(2,2,sharex=True)\nax_arr[0][0].plot(x,t1)\nax_arr[0][1].scatter(x,t2)\nax_arr[1][0].bar(x,t3)\nax_arr[1][1].hist(t4)\nplt.show()","3e92f2d2":"plt.figure(figsize=(16,4))\nx = np.linspace(1,100,100,dtype=\"int8\")\nt1 = np.random.randint(1,100,100)\nt2 = np.random.randint(1,100,100)\nt3 = np.random.randint(1,100,100)\nt4 = np.random.randint(1,100,100)\nf,ax_arr=plt.subplots(2,2,sharey=True,sharex=True)\nax_arr[0][0].plot(x,t1)\nax_arr[0][1].scatter(x,t2)\nax_arr[1][0].bar(x,t3)\nax_arr[1][1].hist(t4)\nplt.show()","70fa3afe":"from mpl_toolkits.mplot3d import Axes3D","e46b77ba":"# %matplotlib notebook\n# plt.figure(figsize=(10,6))\nx = np.linspace(1,100,100,dtype=\"int8\")\nxs = np.random.randint(1,100,100)\nys = np.random.randint(1,100,100)\nzs = xs**2\/ys**.2\n# ax = fig.add_subplot(111, projection='3d')\nax = plt.subplot(1,1,1, projection='3d')\nax.scatter(xs, ys, zs,s=80,alpha=.5)\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\nplt.show()","abdd90d9":"plt.figure(figsize=(16,4))\nx = np.linspace(1,100,100,dtype=\"int8\")\nt1 = np.random.randint(1,100,100)\nt2 = np.random.randint(1,100,100)\nplt.plot(x,t1,label=\"1st-Y-axis-data\")\nplt.plot(x,t2,\"--r\",label=\"2nd-Y-axis-data\")\nplt.legend(loc=2) # Location 0 to 10 can be used\nplt.twinx()\nplt.show()","473f91de":"## Stacked Bar plot","9f6fe4f8":"## Subplot with shared Y- axis and X- axis","50b5c5e3":"## Area plot","1ddf419b":"## Bar-Horizontal plot","aedf9d68":"###### Lets have some X-axis value and random values for Y-axis","81b79bb3":"## Lolipop","90b11c0e":"## Subplot and resizing","5ab46eb0":"## Pie","fc98e2bf":"## Mixed plot","04aa60d6":"## Smooth Plot","5244983a":"# Editing property of Plots","84013859":"## Bar plot (Default is vertical plot)","2bb44945":"## Bubble plot","03d5d3a2":"## Scatter plot","f1dac83d":"## Draw Horizontal or vertical line in plot","4864878e":"## Line plot","f7ea11f0":"## Stacked Bar plot with labels","af9796da":"## Stem","c2c749e7":"## Dual axis plot","395c8ea3":"## Histogram","711c42ea":"# Various graphs using Matplotlib library:\n- Line; scatter; Bubble; Bar (Horizontal and Vertical); Stacked bar plot\n- Histogram; Pie; Stem; Lolipop; Area\n- Mixed plot; smooth plot; contour plot; Image plot\n- Editing property of Plots\n- Draw Horizontal or Vertical Line in plot\n- Write some text in middle of plot\n- Subplotting and resizing plot size\n- 3D plot\n- Dual axis plot\n\n","5d1d1cbe":"## Contour Plot","cb8af315":"## Subplot with shared X- axis","7e01d0b5":"\n## Image Plot (Can be used for HeatMap)","e60c60af":"# 3D plot"}}