{"cell_type":{"79190146":"code","0d04455b":"code","bee62944":"code","ac4a007e":"code","a80701a7":"code","43a164e1":"code","8e87a4cb":"markdown","4b5ea570":"markdown"},"source":{"79190146":"def function(x):\n     y = (2 * x) + (x - 1)\n     return y\nfunction(18.0)","0d04455b":"import tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\n\nmodel = tf.keras.Sequential([keras.layers.Dense(units=1, input_shape=[1])])\nmodel.compile(optimizer='sgd', loss='mean_squared_error')\nx = np.array([-1.0,  0.0, 1.0, 2.0, 3.0, 4.0, 5.0], dtype=float)\ny = np.array([-4.0, -1.0, 2.0, 5.0, 8.0, 11.0,14.0 ], dtype=float)\nmodel.fit(x, y, epochs=500)","bee62944":"model.predict([18.0])","ac4a007e":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx = np.array([[4642146.0, 3519515.0, 1728786.0, 1708590.0, 1534749.0]], dtype=float)\ny = np.array([[10062.83, 7407.06, 3815.79, 3960.27, 3486.05]], dtype=float)\nn = np.array([[5642146.0, 4519515.0, 2728786.0, 2708590.0, 2534749.0]], dtype=float)\n\nreg = LinearRegression()","a80701a7":"reg.fit(x, y)\n","43a164e1":"reg.predict([[45.0]])","8e87a4cb":"# Machine Learning","4b5ea570":"# Traditional Computer Programming"}}