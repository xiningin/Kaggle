{"cell_type":{"8833c84f":"code","0e299bf8":"code","6a8c22e2":"code","21809c64":"code","11e46ac9":"code","40db0624":"code","ffcc1d79":"code","867f06e1":"code","4f2d411c":"code","31e8f6a8":"code","49882cec":"code","75c56aab":"code","29d85afd":"code","a9289b4a":"code","cb457960":"code","625dcd44":"markdown","01505584":"markdown","905c65d2":"markdown","be3658cc":"markdown","1833c9e9":"markdown","076f713b":"markdown","de8bf1c4":"markdown","fbb06ba4":"markdown","e6e518db":"markdown","a69445be":"markdown"},"source":{"8833c84f":"import pandas as pd\nimport matplotlib.pyplot as plt","0e299bf8":"class KaggleSurvey2020:\n    \"\"\"\n    This class helps us analyze the Kaggle Survey 2020 with ease.\n    See https:\/\/www.kaggle.com\/c\/kaggle-survey-2020\n    Args:\n        csv_file (str): Specify the file path of kaggle_survey_2020_responses.csv.\n    \"\"\"\n    def __init__(self, csv_file):\n        self._csv_file = csv_file\n        # import survey responses\n        survey_response = pd.read_csv(self._csv_file, skiprows=[1])\n        survey_response = survey_response.drop('Time from Start to Finish (seconds)', axis=1)\n        # import survey questions\n        first_2_rows = pd.read_csv(self._csv_file, nrows=1)\n        question_desc = first_2_rows.values.ravel()[1:]\n        question_index = first_2_rows.columns[1:]\n        questions_ser = pd.Series(question_desc, index=question_index)\n        self._survey_response = survey_response\n        self._questions_ser = questions_ser\n    def generate_questions(self):\n        \"\"\"\n        This function returns the DataFrame of questions.\n        \"\"\"\n        question_indices = [l[0] + l[1] if len(l) > 1 else l[0] for l in self._questions_ser.index.str.split(\"_\")]\n        question_indices = [s.replace('Part', '') if 'Part' in s else s for s in question_indices]\n        question_indices = [s.replace('OTHER', '') if 'OTHER' in s else s for s in question_indices]\n        questions = pd.DataFrame()\n        questions['question_index'] = question_indices\n        questions['question_desc'] = self._questions_ser.values\n        return questions\n    def generate_unique_questions(self):\n        \"\"\"\n        This function returns the DataFrame of unique questions.\n        \"\"\"\n        questions = self.generate_questions()\n        question_indices = questions['question_index'].values\n        question_descs = [l[0] for l in self._questions_ser.str.split(' - ')]\n        # Collecting unique questions indices and descriptions\n        unique_question_indices = []\n        unique_question_descs = []\n        for qi, qd in zip(question_indices, question_descs):\n            if qi not in unique_question_indices:\n                unique_question_indices.append(qi)\n            if qd not in unique_question_descs:\n                unique_question_descs.append(qd)\n        # Categorizing question type\n        question_types = ['multiple selection' if 'Select all that apply' in s else 'multiple choice' for s in unique_question_descs]\n        unique_questions = pd.DataFrame()\n        unique_questions['question_index'] = unique_question_indices\n        unique_questions['question_desc'] = unique_question_descs\n        unique_questions['question_type'] = question_types\n        return unique_questions\n    def summarize_response(self, question_index):\n        \"\"\"\n        This function returns the summary of a given question.\n        Args:\n            question_index (str): Specify the question, e.g. 'Q1' for Question 1, 'Q26A' for Question 26-A.\n        \"\"\"\n        questions = self.generate_questions()\n        column_iloc = questions[questions['question_index'] == question_index].index\n        ith_question = self._survey_response.iloc[:, column_iloc]\n        unique_questions = self.generate_unique_questions()\n        ith_unique_question = unique_questions[unique_questions['question_index'] == question_index]\n        question_desc = ith_unique_question['question_desc'].values[0]\n        print(question_desc)\n        # Use simple value_counts for multiple choice questions\n        if column_iloc.size == 1:\n            summary = ith_question[question_index].value_counts(normalize=True).sort_values()\n        # Use iteration for multiple selection questions\n        else:\n            freq_counts = dict()\n            for col in ith_question.columns:\n                ser = ith_question[col]\n                ser_value_counts = ser.value_counts()\n                k, v = ser_value_counts.index[0], ser_value_counts.values[0]\n                freq_counts[k] = v\n            summary = pd.Series(freq_counts).sort_values()\n        return summary\n    def plot_summary(self, question_index):\n        \"\"\"\n        This function plots the bar plot of a given question.\n        Args:\n            question_index (str): Specify the question, e.g. 'Q1' for Question 1, 'Q26A' for Question 26-A.\n        \"\"\"\n        fig = plt.figure()\n        axes = plt.axes()\n        response_ser = self.summarize_response(question_index)\n        # Showing only top 10 categories if there are too many.\n        if response_ser.size > 10:\n            print(\"Too many categories, only showing the top 10.\")\n            top_ten = response_ser[-10:]\n            y = top_ten.index\n            width = top_ten.values\n        else:\n            y = response_ser.index\n            width = response_ser.values\n        # Highlight top 3 with red\n        colors = ['c' for _ in range(y.size)]\n        colors[-3:] = ['r', 'r', 'r']\n        axes.barh(y, width, color=colors)\n        axes.spines['right'].set_visible(False)\n        axes.spines['top'].set_visible(False)\n        axes.tick_params(length=0)\n        unique_questions = self.generate_unique_questions()\n        ith_unique_question = unique_questions[unique_questions['question_index'] == question_index]\n        question_desc = ith_unique_question['question_desc'].values[0]\n        axes.set_title(question_desc)\n        plt.show()","6a8c22e2":"csv_file = '\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv'\nks = KaggleSurvey2020(csv_file)\nunique_questions = ks.generate_unique_questions()\nunique_questions.head()","21809c64":"unique_questions.tail()","11e46ac9":"n_questions = unique_questions.shape[0]\nquestion_summary = unique_questions['question_type'].value_counts()\nn_multiple_choice = question_summary['multiple choice']\nn_multiple_selection = question_summary['multiple selection']\nprint(question_summary)","40db0624":"print(\"There are {} multiple choices and {} multiple selections among {} questions.\".format(n_multiple_choice, n_multiple_selection, n_questions))","ffcc1d79":"# Select the title most similar to your current role (or most recent title if retired):\nks.summarize_response('Q5')","867f06e1":"# What programming language would you recommend an aspiring data scientist to learn first?\nks.summarize_response('Q8')","4f2d411c":"# What programming languages do you use on a regular basis? (Select all that apply)\nks.summarize_response('Q7')","31e8f6a8":"# Which of the following integrated development environments (IDE's) do you use on a regular basis? (Select all that apply)\nks.summarize_response('Q9')","49882cec":"ks.plot_summary('Q7')","75c56aab":"ks.plot_summary('Q23')","29d85afd":"ks.plot_summary('Q29A')","a9289b4a":"from shutil import copyfile\n\ncopyfile(src = \"..\/input\/ks2020\/ks2020.py\", dst = \"..\/working\/ks2020.py\")","cb457960":"from ks2020 import KaggleSurvey2020\n\ncsv_file = '\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv'\nks = KaggleSurvey2020(csv_file)\ntype(ks)","625dcd44":"## Plotting survey responses\n\nBesides showing a series of percentages\/value counts, we can also plot a horizontal bar plot based on the series by calling the `plot_summary(question_index)` method. If there are too many categories, this method only shows the top 10 most categories.","01505584":"## Pain point\n\nThe original Kaggle Survey 2020 data contains 354 columns with 47 questions combined with multiple choice and multiple selection questions. It is definitely painful and tedious to explore without the aids of re-usable codes like functions or classes.","905c65d2":"## Summarizing survey responses\n\nWe are able to summarize each question (no matter it is a multiple choice or a multiple selection) with the method `summarize_response(question_index)`. Take 2 multiple choice questions as examples, we can summarize the responses with a series of percentages.","be3658cc":"## Conclusion\n\nThe notebook users have long been criticized for not writing re-usable codes. In this notebook, we incorporate object-oriented programming. We are able to demonstrate how to conduct reproducible exploratory analysis with summaries of percentage\/value counts and plots by instantiating the `KaggleSurvey2020` class. If you also find it convenient, it is time to add some OO flavor into your own notebook!\n\nThe `KaggleSurvey2020` class can be imported from `ks2020.py` via the following codes.","1833c9e9":"## The `KaggleSurvey2020` class\n\nWe will define 3 major methods of `KaggleSurvey2020` to analyze both survey responses and questions.\n\n1. The `generate_unique_questions` method: Returns a dataframe that maps question numbers to their descriptions and questions types.\n2. The `summarize_response(question_index)` method: Returns an aggregation summary of a given question. For a multiple choice problem (only a single choice can be selected) this method returns a series of percentages. As for a multiple selection problem (multiple choices can be selected) this method return a series of value counts.\n3. The `plot_summary(question_index)` method: Plots a horizontal bar plot that illustrates the aggregation summary of a given question.","076f713b":"# Analyzing Kaggle Survey 2020 in a structured way\n\nYao-Jen Kuo <yaojenkuo@datainpoint.com> ","de8bf1c4":"Take other 2 multiple selection questions as examples, we can summarize the responses with a series of value counts.","fbb06ba4":"## Summarizing survey questions\n\nThe Kaggle Survey 2020 contains two types of question: multiple choice questions (only a single choice can be selected) and multiple selection questions (multiple choices can be selected). We can generate an overview of Kaggle Survey 2020 questions with our pre-defined class.","e6e518db":"## TL; DR\n\nIn this notebook, we define a class `KaggleSurvey2020` that is able to help us analyze the Kaggle Survey 2020 in a more structured way and shows how to conduct data analysis with OOP besides using the traditional procedural programming way.","a69445be":"## Prerequisite libraries"}}