{"cell_type":{"b90ffc0a":"code","b5b97cb1":"code","350615d0":"code","a7f1cd1b":"code","c0ac15f1":"code","69f02dcf":"code","d4939a39":"code","246b370c":"code","a4f5c6e2":"code","dca93edf":"code","3dfd4ea0":"code","b84e0bdf":"code","4759aab5":"code","0d8055c5":"code","a49ed35e":"code","9bf2e131":"code","367b2e9a":"code","d0d9b0e2":"code","e1e31e71":"code","160fc1a1":"code","7fc15431":"code","7659c29c":"code","8f1601ad":"code","b2202c0d":"code","42226652":"code","23049787":"code","d47352cb":"code","4b905495":"code","40c63332":"code","aca503df":"code","4f470cc2":"code","42e7bf8b":"code","fee0dcdb":"code","f6400e33":"code","7d8fc448":"code","f531e35d":"code","3393b658":"code","0b3236a1":"markdown","39f3a351":"markdown","70b4bb98":"markdown","9b0755d6":"markdown","c93405b3":"markdown","6b125664":"markdown","026a1092":"markdown","e92cb6ea":"markdown","55fc224d":"markdown","5f8b088f":"markdown","171b258c":"markdown","f6bbebe1":"markdown","03779325":"markdown","4758ca08":"markdown","5b469b2f":"markdown","c62c8ea4":"markdown","4c52bfb3":"markdown","c5c248f3":"markdown","6892f35a":"markdown","b8f3505c":"markdown"},"source":{"b90ffc0a":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import AgglomerativeClustering\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","b5b97cb1":"data_path = '..\/input\/zoo-animal-classification\/zoo.csv'\nzoo_data = pd.read_csv(data_path)\n#Copy of original dataframe\nzoo_data_orig = zoo_data.copy()\nprint('Data imported')","350615d0":"#Check values on each column\nzoo_data.head()","a7f1cd1b":"# Drop class_type column and animal_name - not needed for the model\nzoo_data.drop(columns=['class_type'], inplace=True)\nzoo_data.drop(columns=['animal_name'], inplace=True)","c0ac15f1":"#Total rows and columns\ndata_shape = zoo_data.shape\n#Total of nulls per column\ntotal_nulls = zoo_data.isnull().sum()\n#Data types per column\ncolumns_types = zoo_data.dtypes\n\nprint('Rows: ', data_shape[0],', Columns: ', data_shape[1])\n\nprint('\\nTotal nulls per column:\\n', total_nulls)\n\nprint('\\nData types per column:\\n', columns_types)","69f02dcf":"#General description of data\nzoo_data.describe()","d4939a39":"kmeans_model = KMeans(n_clusters=7)\nkmeans_model.fit(zoo_data)\npredict = kmeans_model.predict(zoo_data)\ncentroids = kmeans_model.cluster_centers_\n\nprint(centroids)","246b370c":"#Original classes\norig_class = zoo_data_orig[\"class_type\"].copy()","a4f5c6e2":"#Histogram for original class type\nfig = px.histogram(orig_class)\nfig.show()","dca93edf":"#Histogram for predicted class type\nfig = px.histogram(x=predict)\nfig.show()","3dfd4ea0":"#Count data on each category\npredict_count = []\norigclass_count =  []\n\n#Convert to list\npredict_list = predict.tolist()\norig_class_list =  orig_class.tolist()\n\nfor i in range(7):\n    predict_count.append(predict_list.count(i))\n    origclass_count.append(orig_class_list.count(i+1))\n\n#Sort to compare the total of data for each class\n#since the class number may be different is not relevant compare original column 1 with column 1 of predict\n\npredict_count.sort()\norigclass_count.sort()\n\n\nprint(predict_count)\nprint(origclass_count)","b84e0bdf":"#Define PCA\npca = PCA(n_components=3) #Plot will be 3D\npca.fit(zoo_data)\nX_pca = pca.transform(zoo_data)","4759aab5":"#Check components\nzoo_pca = pd.DataFrame(\n    data    = pca.components_,\n    columns = zoo_data.columns,\n    index   = ['PC1', 'PC2', 'PC3']\n)\nzoo_pca","0d8055c5":"#Plot clusters\nfig_kmeans = px.scatter_3d(x=X_pca[:, 0], y=X_pca[:, 1], z=X_pca[:, 2], color=predict)\nfig_kmeans.show()","a49ed35e":"data_path = '..\/input\/cars-germany\/autoscout24-germany-dataset.csv'\ncars_data = pd.read_csv(data_path)\n#Copy of original dataframe\ncars_data_orig = cars_data.copy()\nprint('Data imported')","9bf2e131":"#Check values on each column\ncars_data.head()","367b2e9a":"# Drop make and model - not needed for the classification\ncars_data.drop(columns=['make'], inplace=True)\ncars_data.drop(columns=['model'], inplace=True)","d0d9b0e2":"#Total rows and columns\ndata_shape = cars_data.shape\n#Total of nulls per column\ntotal_nulls = cars_data.isnull().sum()\n#Data types per column\ncolumns_types = cars_data.dtypes\n\nprint('Rows: ', data_shape[0],', Columns: ', data_shape[1])\n\nprint('\\nTotal nulls per column:\\n', total_nulls)\n\nprint('\\nData types per column:\\n', columns_types)","e1e31e71":"#Drop rows with nulls\ncars_data.dropna(inplace=True)","160fc1a1":"#Get object type columns\nobjecttype_columns = cars_data.select_dtypes(include=[object]).columns   #Object type columns\ndata_objecttype = cars_data[objecttype_columns]   #Copy data object type\nprint(objecttype_columns)\n\n#Encode categorical data\ncars_data[objecttype_columns] = cars_data[objecttype_columns].astype('category')","7fc15431":"#Encoder - Ordinal Encoder\nencoder = OrdinalEncoder()\nencoder.fit(cars_data[objecttype_columns])\ncars_data[objecttype_columns] = encoder.transform(cars_data[objecttype_columns])\n\ncars_data.head(10)","7659c29c":"#Total rows and columns after encoder and delete nulls\ndata_shape = cars_data.shape\nprint('Rows: ', data_shape[0],', Columns: ', data_shape[1])","8f1601ad":"#Check for outliers in the following columns - not needed for the others\ncol_outval = ['mileage','price','hp','year']\n\ncars_data.describe()","b2202c0d":"#Histograms plots\n\ncolumns_number = 2\nrows_number = 2\n\nfig = make_subplots(\n    rows=rows_number, \n    cols=columns_number, \n    subplot_titles=col_outval\n)\n\nfig.update_layout(showlegend=False)\n\nfor i, col in enumerate(col_outval):\n    fig.append_trace(go.Histogram(x=cars_data[col],name=col), row=(i\/\/columns_number)+1, col=(i%columns_number)+1)\n\nfig.show()","42226652":"#Delete outliers\n\nlimit = np.percentile(cars_data.hp,1)\ncars_data = cars_data[cars_data['hp'] > limit]\n\nlimit = np.percentile(cars_data.mileage,99)\ncars_data = cars_data[cars_data['mileage'] < limit]\n\nlimit = np.percentile(cars_data.price,99)\ncars_data = cars_data[cars_data['price'] < limit]","23049787":"cars_data.describe()","d47352cb":"#Total rows and columns after delete outliers\ndata_shape = cars_data.shape\nprint('Rows: ', data_shape[0],', Columns: ', data_shape[1])","4b905495":"clustering = AgglomerativeClustering(n_clusters=5).fit(cars_data)\nclustering.labels_","40c63332":"print(len(clustering.labels_))","aca503df":"#cars data with class\ncars_data_class = cars_data.copy()\ncars_data_class[\"class\"] = clustering.labels_","4f470cc2":"correlation_mat = cars_data_class.corr()\n\nsns.heatmap(correlation_mat, annot = True)\nsns.set(rc={'figure.figsize':(10,10)})\nplt.title(\"Correlation Matrix\")\n\nplt.show()","42e7bf8b":"#plot class vs other columns\nfig1 = px.scatter(cars_data_class, x=\"year\", y=\"mileage\", color=\"class\", symbol=\"class\")\nfig1.show()","fee0dcdb":"fig2 = px.scatter_3d(cars_data_class, x='year', y='mileage', z='fuel',\n              color='class')\nfig2.show()","f6400e33":"#plot class against other columns\nfig3 = px.scatter(cars_data_class, x=\"class\", y=\"price\")\nfig3.show()","7d8fc448":"#Define PCA\npca2 = PCA(n_components=3)\npca2.fit(cars_data)\nX_pca2 = pca2.transform(cars_data)","f531e35d":"#Check components\ncars_pca = pd.DataFrame(\n    data    = pca2.components_,\n    columns = cars_data.columns,\n    index   = ['PC1', 'PC2', 'PC3']\n)\ncars_pca","3393b658":"#Plot clusters\nfig_hcluster = px.scatter_3d(x=X_pca2[:, 0], y=X_pca2[:, 1], z=X_pca2[:, 2], color=cars_data_class[\"class\"])\nfig_hcluster.show()","0b3236a1":"# Visualizaci\u00f3n\n\nUsar PCA para reducir dimensiones y poder graficar.","39f3a351":"# Comparar con las clases originales","70b4bb98":"# Importar Datos","9b0755d6":"# Modelo de Agrupaci\u00f3n Jer\u00e1rquica (Hierarchical Clustering)","c93405b3":"# Importar Datos","6b125664":"# Codificar Datos Categ\u00f3ricos","026a1092":"No hay nulos ni tampoco necesidad de codificar ninguna columna a tipo entero.","e92cb6ea":"# Manejo de Nulos\n\nDado que la cantidad de nulos es mucho menor que el total de datos se va a eliminar los que tengan nulos.","55fc224d":"Para columnas **mileage** y **price** se van a tomar los datos hasta percentil 99. Para columna **hp** se utilizar\u00e1n los datos mayores a percentil 1.","5f8b088f":"# Parte 2: Clasificaci\u00f3n de Carros con Agrupaci\u00f3n Jer\u00e1rquica (Hierarchical Clustering)","171b258c":"# Valores At\u00edpicos","f6bbebe1":"# Parte 1: Clasificaci\u00f3n de animales con K-Means","03779325":"Dada  la comparaci\u00f3n de cantidad de datos por clase, las clases predichas no son exactamente las mismas que las originales.","4758ca08":"# Modelo K-Means","5b469b2f":"Como las columnas son boleanas o tienen un rango definido, no hay valores at\u00edpicos.","c62c8ea4":"# Visualizaci\u00f3n\n\nSe usa PCA para reducir dimensiones y graficar todas las caracter\u00edsticas.","4c52bfb3":"# Machine Learning Aplicado\n\nTarea 8\n\nC\u00e9sar Jim\u00e9nez Mena","c5c248f3":"# An\u00e1lisis de Datos","6892f35a":"# Importart Bibliotecas","b8f3505c":"Los grupos est\u00e1n basados principalmente en el a\u00f1o y la cantidad de millas. Es de esperar que estas dos columnas tambi\u00e9n tengan relaci\u00f3n entre s\u00ed, ya que en general a mayor cantidad de a\u00f1os m\u00e1s distancia recorrida."}}