{"cell_type":{"fc6faa8f":"code","f8d43573":"code","99b6c070":"code","cce5d943":"code","8ad5b962":"code","c4f99edf":"code","4e247cfe":"code","f31e1358":"code","c94bae82":"code","8f2510d7":"code","d104e663":"code","2b3d0d4c":"code","02129aed":"code","5d66a4f5":"code","bfd6cb67":"code","6c53b6ea":"code","27de5ecb":"code","f5aa036f":"code","32693a05":"code","491940c1":"code","db84e8ba":"code","73edc6e4":"code","c61216e0":"code","5e8977a1":"code","7eea75c2":"code","c70accd4":"code","87a1d543":"code","b60b6936":"code","1b59e5c2":"code","f01827a2":"code","9da41374":"code","84f98ab1":"code","517164e1":"code","a2b4594f":"code","3952fc4e":"code","1b8c928e":"code","6d796973":"code","8d762671":"code","863a3f93":"code","4913d075":"code","364ed942":"code","afbb60c6":"code","72c53044":"code","3e50a191":"code","7f7eda60":"code","45af9641":"code","c4286265":"code","153e3a7b":"code","a06984c7":"code","b7b96d1f":"markdown","4a81409f":"markdown","1a76286b":"markdown","a2592c61":"markdown","3cde39e4":"markdown","35b3b0e2":"markdown","251e975d":"markdown","aa52493d":"markdown","49316894":"markdown"},"source":{"fc6faa8f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f8d43573":"df=pd.read_csv('..\/input\/mobile-price-classification\/train.csv')","99b6c070":"df.head()","cce5d943":"df.tail()","8ad5b962":"df.shape","c4f99edf":"df.describe()","4e247cfe":"df.info()","f31e1358":"df.isna()","c94bae82":"df.isnull().sum()","8f2510d7":"Q1=df.quantile(0.25)\nQ3=df.quantile(0.75)\nIQR=Q3-Q1\nprint(IQR)","d104e663":"print(df<(Q1-1.5*IQR)) | (df<(Q3-1.5*IQR))","2b3d0d4c":"corr=df.corr()\nplt.figure(figsize=(12,8))\nheatmap=sns.heatmap(corr,cmap=\"YlGnBu\")\nheatmap.set_title('Correlation Heatmap')","02129aed":"corr.sort_values(by=['price_range'],ascending=False)['price_range']","5d66a4f5":"import plotly.express as px","bfd6cb67":"fig = px.scatter(df, x='price_range',y='ram',size='price_range')\nfig.show()\n                 ","6c53b6ea":"fig = px.scatter(df, x=\"ram\", y=\"battery_power\", title='Relation between ram and battery_power')\nfig.show()","27de5ecb":"from sklearn.tree import DecisionTreeClassifier  \nfrom sklearn.model_selection import  train_test_split\nfrom sklearn import metrics","f5aa036f":"df.columns","32693a05":"feature_cols=['battery_power','dual_sim','fc', 'four_g','int_memory','pc', 'px_height',\n       'px_width', 'ram', 'sc_h', 'sc_w','three_g','touch_screen', 'wifi']\nX=df[feature_cols]\ny=df.price_range","491940c1":"X_train,X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=1)\nclf=DecisionTreeClassifier()\nclf=clf.fit(X_train,y_train)\ny_predict=clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_predict))","db84e8ba":"clf=DecisionTreeClassifier(criterion='gini',max_depth=3)\nclf=clf.fit(X_train,y_train)\ny_pred=clf.predict(X_test)\nprint('Accuracy:',metrics.accuracy_score(y_test,y_predict))","73edc6e4":"X = df.iloc[:, :-1].values\ny = df.iloc[:,-1].values","c61216e0":"X.shape","5e8977a1":"y.shape","7eea75c2":"from sklearn.ensemble import ExtraTreesRegressor\nmodel=ExtraTreesRegressor()\nmodel.fit(X,y)","c70accd4":"print(model.feature_importances_)","87a1d543":"feature_importances= pd.Series(model.feature_importances_)\nfeature_importances.nlargest(20).plot(kind='barh')\nplt.show()","b60b6936":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.2)","1b59e5c2":"X_train.shape","f01827a2":"X_test.shape","9da41374":"y_train.shape","84f98ab1":"y_test.shape","517164e1":"from sklearn.ensemble import RandomForestRegressor\nrf_random = RandomForestRegressor()\nfrom sklearn.model_selection import RandomizedSearchCV","a2b4594f":"n_estimators=[int(x) for x in np.linspace(start=100,stop=1200,num=12)]\nmax_features=['auto','sqrt']\nmax_depth=[int(x) for x in np.linspace(5,30,num=6)]\nmin_samples_split=[2,5,10,15,100]\nmin_samples_leaf=[1,2,5,10]","3952fc4e":"random_grid={'n_estimators': n_estimators,\n           'max_features': max_features,\n           'max_depth': max_depth,\n           \"min_samples_split\": min_samples_split,\n           'min_samples_leaf': min_samples_leaf}\nprint(random_grid)","1b8c928e":"rf=RandomForestRegressor()","6d796973":"rf_random=RandomizedSearchCV(estimator=rf,param_distributions=random_grid,scoring='neg_mean_squared_error',n_iter=10,cv=5,verbose=2,random_state=42,n_jobs=1)","8d762671":"rf_random.fit(X_train,y_train)","863a3f93":"predictions=rf_random.predict(X_test)\npredictions","4913d075":"sns.displot(y_test-predictions)","364ed942":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nclassifier = RandomForestClassifier(n_estimators=100)\nclassifier.fit(X_train, y_train)","afbb60c6":"y_pred = classifier.predict(X_test)","72c53044":"print(\"Accuracy:\", accuracy_score(y_test, y_pred))","3e50a191":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report\nX = df.drop('price_range',axis=1)\nY = df['price_range']","7f7eda60":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=101)","45af9641":"knn = KNeighborsClassifier(n_neighbors=10)\nknn.fit(X_train,y_train)","c4286265":"knn.score(X_test,y_test)","153e3a7b":"pred = knn.predict(X_test)","a06984c7":"print(classification_report(y_test,pred))","b7b96d1f":"By this it's conformed that there are no outliers in dataset.So, we can move ahead with EDA.","4a81409f":"# DATA VISUALIZATION","1a76286b":"# DATA CLEANING","a2592c61":"NULL VALUES:Its very clear that the data is already cleaned because there is NULL values in this dataset.","3cde39e4":"# Various Machine Learning Models","35b3b0e2":"# DECISION TREE","251e975d":"# KNN","aa52493d":"# Random Forest ","49316894":"CONCLUSION: I performed various algorithms to find which perform best. As you can see that the accuracy keeps on increasing in various models. In this it's very clear that KNN performs good,if you find good algo where accuracy is more,I would be happy to know that. "}}