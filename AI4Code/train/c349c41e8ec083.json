{"cell_type":{"1e8bd203":"code","842f67a8":"code","ba0f1bbf":"code","fac019e8":"code","9603d9de":"code","a291bd0a":"code","0097e420":"code","9223021a":"code","e9f784d2":"code","1200beaf":"code","a854c5b8":"code","a12b6d51":"code","cf6152ae":"code","68f98454":"code","af754710":"code","d224b81b":"code","f2545165":"code","60c9bc8e":"code","8ac5728e":"code","cc39a3a5":"code","deefc630":"code","9cf4327d":"code","ba47da9c":"code","3ed1efc6":"code","727f3f9e":"code","aec4a8c8":"code","a8048f4a":"code","e01b357a":"code","77e143e7":"code","620187c9":"code","8420592b":"code","ca86efc1":"code","c9edf70c":"code","8433e875":"code","3d065acd":"code","7381bf9f":"code","053b919b":"code","b4291592":"code","76598030":"code","5e7a0759":"code","471a4a7b":"code","6c780b7f":"code","851b4e6b":"code","f755fac0":"code","53d167af":"code","735bf37a":"code","4fa48147":"code","81105a90":"code","20322031":"code","4b27d873":"code","b00fc23a":"code","0a829b21":"code","ee170257":"code","071e0686":"code","c3fffd1c":"code","8bcab7e3":"code","2df66c7b":"markdown","aa912820":"markdown","feeb7b83":"markdown","aac7b2c2":"markdown","16abb4ee":"markdown","dd5466f7":"markdown","abb78411":"markdown","65bcc95d":"markdown","597b02a7":"markdown","53703f7b":"markdown","c3c4ec59":"markdown","59f21069":"markdown","8fcb2b9c":"markdown","e13a8ec6":"markdown","aa76c750":"markdown","6dd213ee":"markdown","726c35ef":"markdown","bfc00556":"markdown","5ca5866e":"markdown","8a8167f0":"markdown","a5d0ca34":"markdown","b03294d3":"markdown","ca3b0e01":"markdown"},"source":{"1e8bd203":"import numpy as np\nimport pandas as pd","842f67a8":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ba0f1bbf":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fac019e8":"df = pd.read_csv('..\/input\/water-potability\/water_potability.csv')","9603d9de":"df.head()","a291bd0a":"# Shape of the dataframe\nprint(df.shape)\n# Find the number of rows within a dataframe\nprint(len(df))\n# Extracting information from the shape tuple\nprint(f'Number of rows: {df.shape[0]} \\nNumber of columns: {df.shape[1]}')","0097e420":"df.info()","9223021a":"df.columns","e9f784d2":"df.describe()","1200beaf":"sns.heatmap(df.isnull(),yticklabels=False,cbar=True)","a854c5b8":"# Apply mean value to the missing values\ndf['ph'].fillna(df['ph'].mean(), inplace=True)\ndf['Sulfate'].fillna(df['Sulfate'].mean(), inplace=True)\ndf['Trihalomethanes'].fillna(df['Trihalomethanes'].mean(), inplace=True)","a12b6d51":"df.isnull().sum()","cf6152ae":"sns.heatmap(df.isnull(),yticklabels=False,cbar=True)","68f98454":"df.info()","af754710":"sns.countplot(df.Potability);\nsns.despine(bottom=False,left=False);","d224b81b":"sns.pairplot(df);\nsns.despine(bottom=True,left=True);","f2545165":"plt.subplots(figsize=(20,10));\nsns.heatmap(df.corr(),cbar=False,annot=True,linewidth=.1);","60c9bc8e":"corr = df.corr()\ncorr[\"Potability\"].sort_values(ascending=False)","8ac5728e":"g = sns.FacetGrid(df, col='Potability')\ng.map(plt.hist, 'Solids', bins=25)","cc39a3a5":"from sklearn.model_selection import train_test_split as tts\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report","deefc630":"x = df.drop(['Potability'],axis=True)\ny = df['Potability']","9cf4327d":"x_train,x_test,y_train,y_test = tts(x,y,test_size=0.33, random_state = 101)","ba47da9c":"logmodel = LogisticRegression()\nlogmodel.fit(x_train,y_train)","3ed1efc6":"predictions = logmodel.predict(x_test)","727f3f9e":"Acc= accuracy_score(y_test,predictions)\nprint( Acc)","aec4a8c8":"print(classification_report(y_test,predictions))","a8048f4a":"dtree = DecisionTreeClassifier()","e01b357a":"dtree.fit(x_train,y_train)","77e143e7":"predictions = dtree.predict(x_test)","620187c9":"Acc_dt= accuracy_score(y_test,predictions)\nprint( Acc_dt)","8420592b":"print(classification_report(y_test,predictions))","ca86efc1":"print(confusion_matrix(y_test,predictions))","c9edf70c":"cmd= confusion_matrix(y_test,predictions)\nsns.heatmap(cmd\/np.sum(cmd), annot= True, fmt= '0.2%', cmap= 'twilight_shifted')","8433e875":"# the number of trees you want to build before taking the maximum voting or averages of predictions.\n# Higher number of trees give you better performance but makes your code slower.\nrfc = RandomForestClassifier(n_estimators = 600)","3d065acd":"rfc.fit(x_train,y_train)","7381bf9f":"prediction = rfc.predict(x_test)","053b919b":"Acc_rfc= accuracy_score(y_test,prediction)\nprint( Acc_rfc)","b4291592":"print(classification_report(y_test,predictions))","76598030":"print(confusion_matrix(y_test,predictions))","5e7a0759":"cmr= confusion_matrix(y_test,predictions)\nsns.heatmap(cmr\/np.sum(cmr), annot= True, fmt= '0.2%', cmap= 'coolwarm')","471a4a7b":"knn = KNeighborsClassifier(n_neighbors = 1)","6c780b7f":"knn.fit(x_train,y_train)","851b4e6b":"pred = knn.predict(x_test)","f755fac0":"Knn_ACC = accuracy_score(y_test,pred)\nprint(Knn_ACC)","53d167af":"print(classification_report(y_test,pred))","735bf37a":"print(confusion_matrix(y_test,pred))","4fa48147":"cmk = confusion_matrix(y_test,pred)\nsns.heatmap(cmk\/np.sum(cmk), annot= True, fmt= '0.2%', cmap= 'Blues')","81105a90":"Xgb = XGBClassifier(max_depth= 8,n_estimators= 125, random_state= 0, learning_rate= 0.03, n_jobs= 5)\nXgb.fit(x_train,y_train)\npred_Xgb =Xgb.predict(x_test)","20322031":"Xgb_ACC = accuracy_score(y_test,pred_Xgb)\nprint(Xgb_ACC)","4b27d873":"print(classification_report(y_test, pred_Xgb))","b00fc23a":"print(confusion_matrix(y_test, pred_Xgb))","0a829b21":"cmx = confusion_matrix(y_test,pred_Xgb)\nsns.heatmap(cmx\/np.sum(cmx), annot= True, fmt= '0.2%', cmap= 'Reds')","ee170257":"models = pd.DataFrame({\"Model\":['Logistic','Random Forest','Decision Tree','XGBoost','KNeighbours'],\n           \"Accuracy\":[Acc,Acc_rfc,Acc_dt,Xgb_ACC,Knn_ACC]})#Creat Data.....\nmodels.sort_values(by='Accuracy', ascending=False)#Show the Higher to lower value order....","071e0686":"output = pd.DataFrame({\"Model\":['Logistic','Random Forest','Decision Tree','XGBoost','KNeighbours'],\n           \"Accuracy\":[Acc,Acc_rfc,Acc_dt,Xgb_ACC,Knn_ACC]})\noutput.to_csv('Water Quality EDA & Prediction', index= False)# Save My Output........","c3fffd1c":"output.head()","8bcab7e3":"sns.barplot(x ='Model', y ='Accuracy', data = models,palette = 'coolwarm')","2df66c7b":"## Apply ML Alogrithm","aa912820":"**Classification Report and confusion Matrix**","feeb7b83":"** Create a confusion matrix and classification report.**","aac7b2c2":"**Fit this KNN model to the training data.**","16abb4ee":"**Classification_report and Confusion Matrix**","dd5466f7":"## Random Forest Model","abb78411":"### **Prediction and Evaluations**","65bcc95d":"### **Prediction and Evaluations***","597b02a7":"## Decision Tree","53703f7b":"**Create a KNN model instance with n_neighbors=1**","c3c4ec59":"### Split and Train the Data","59f21069":"**Classification Report and Confusion Matrix**","8fcb2b9c":"# The Best Model We Can Apply is Random Forest","e13a8ec6":"### **Prediction and Evaluations**","aa76c750":"### Predict If water is safe for Human Consumption","6dd213ee":"# Exploratory Data Analysis\n\n## Missing Data","726c35ef":"# Water Quality \n","bfc00556":"### **Prediction and Evaluations***","5ca5866e":"## XGBoost Classifier","8a8167f0":"## Logistic Regression","a5d0ca34":"**Solids has the highest correlation**","b03294d3":"**Use the predict method to predict values using your KNN model and X_test.**","ca3b0e01":"# Final Report "}}