{"cell_type":{"0ea80fcc":"code","c15160dc":"code","3fd24637":"code","57da35c7":"code","6f8541ba":"code","7d9a3eff":"code","8c32e5fd":"code","e5643653":"code","04a7c837":"code","455fb32b":"code","74d362f2":"code","8319d0e7":"code","15ab29e1":"code","8db46c93":"code","6c26841c":"code","e9068730":"code","5bae5fe2":"code","616228e6":"code","046d080c":"code","bdca45e1":"code","a8e0bf4b":"code","53f6a466":"code","8eb4994c":"code","b09f484f":"code","00b8c50d":"markdown","340bc293":"markdown","81af05fd":"markdown","409b8525":"markdown","716749d7":"markdown","a5676edd":"markdown","a7776cf2":"markdown","013c1018":"markdown","5d586095":"markdown","d9dfc8fc":"markdown","f9169f54":"markdown","c4497cff":"markdown","842aeb94":"markdown","6e3a2e49":"markdown","3079d58b":"markdown","a0fd879b":"markdown","6241ae7e":"markdown","65e703c9":"markdown","32fe4a0c":"markdown","f15c683f":"markdown","8c3472b4":"markdown","d2f4bfd2":"markdown","7d7153a4":"markdown","1ac313b3":"markdown","1e1443b9":"markdown","28fc9e1b":"markdown","f7faa9fd":"markdown","7d5beee0":"markdown","575076d8":"markdown","7bf0da67":"markdown"},"source":{"0ea80fcc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c15160dc":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","3fd24637":"train.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)","57da35c7":"train.isnull().sum()","6f8541ba":"train['Embarked'].fillna(train['Embarked'].mode()[0],inplace=True)\ntrain['Age'].fillna(train['Age'].median(), inplace = True)\ntrain.drop(['Cabin'],axis=1,inplace=True)\ntrain.isnull().sum().sum()","7d9a3eff":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(train['Survived'])","8c32e5fd":"sns.countplot(x='Embarked',hue='Survived',data=train)","e5643653":"sns.countplot(x='Sex',hue='Survived',data=train)","04a7c837":"train['Age'].hist()","455fb32b":"sns.kdeplot(train[train['Survived']==0]['Age'],shade=True)\nsns.kdeplot(train[train['Survived']==1]['Age'],shade=True)\nplt.legend(['Not S','S'])","74d362f2":"train['SibSp'].value_counts().plot(kind='bar')","8319d0e7":"sns.barplot(train['SibSp'],y='Survived',data=train)","15ab29e1":"train['Parch'].value_counts().plot(kind='bar')","8db46c93":"sns.barplot(x=train['Parch'],y='Survived',data=train)","6c26841c":"train['Fare'].hist()","e9068730":"train['Age'].describe()\ndef binning(x):\n    if x>=0 and x<22:\n        return 0\n    elif x>=22 and x<28:\n        return 1\n    elif x>=28 and x<35:\n        return 2\n    else:\n        return 3\ntrain['Age']=train['Age'].map(binning)   ","5bae5fe2":"train['Fare']=train['Fare'].astype('int64')\ntrain['Fare'].describe()\ndef bin(x):\n    if x>=0 and x<7:\n        return 0\n    elif x>=7 and x<14:\n        return 1\n    elif x>=14 and x<31:\n        return 2\n    else:\n        return 3\ntrain['Fare']=train['Fare'].map(bin)   ","616228e6":"from sklearn.preprocessing import LabelEncoder\nlc=LabelEncoder()\ntrain['Sex']=lc.fit_transform(train['Sex'])\ntrain['Embarked']=lc.fit_transform(train['Embarked'])","046d080c":"train.head()","bdca45e1":"Y=train['Survived']\nX=train.drop(['Survived'],axis=1)\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=0)","a8e0bf4b":"import tensorflow as tf\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout\ninput_dimension=X.shape[1]\n\nmodel=Sequential()\n","53f6a466":"model.add(Dense(4,input_dim=input_dimension,activation='relu',kernel_initializer=\"uniform\"))\nmodel.add(Dense(2,activation='relu',kernel_initializer=\"uniform\"))\nmodel.add(Dense(1,activation='sigmoid',kernel_initializer=\"uniform\"))\n#model.summary()\nmodel.compile(optimizer='Adam',loss='binary_crossentropy',metrics=['Accuracy'])\nmodel_history=model.fit(X_train,Y_train,batch_size=9,epochs=100,validation_data=(X_test,Y_test))","8eb4994c":"plt.plot(model_history.history['loss'])\nplt.plot(model_history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","b09f484f":"y_pred = model.predict(X_test)\ny_pred = (y_pred > 0.5)\n\n# Calculate the Accuracy\nfrom sklearn.metrics import accuracy_score\nscore=accuracy_score(y_pred,Y_test)\nscore","00b8c50d":"# SibSp","340bc293":"Parch vs Survived.As shown below people having 3 children survived the most.","81af05fd":"Now we are adding layers to our model.First an input layer,one hidden layer and output layer.Finally compiling the model with adam optimizer and fitting the data with 100 epochs and a batch size of 9.","409b8525":"# Visualisations","716749d7":"# Embarked","a5676edd":"# Model ","a7776cf2":"# Fare","013c1018":"Importing necessary libraries and staring sequential model.The sequential API allows you to create models layer-by-layer for most problems.","5d586095":"Age is continuous faeture,so i used histogram for plotting.As shown below most people age is between 18 and 32.","d9dfc8fc":"Age vs Survived.Below i used kde plot,as shown below most people not survived are b\/w 20 and 40 years.","f9169f54":"As shown below females survived most than males.","c4497cff":"# Plotting the loss over the epochs","842aeb94":"# Sex","6e3a2e49":"# Parch","3079d58b":"Parch-no of parents\/children,As shown below most of couples has zero children.","a0fd879b":"# Converting age and fare faetures into bins","6241ae7e":"# Null values","65e703c9":"First visualising survived feature,as shown below most no of people are not survived.","32fe4a0c":"Droping unnessary features from the dataset.","f15c683f":"Fare-By using histogram we can see that fare is 0-50.","8c3472b4":"# Encoding categorical features.","d2f4bfd2":"# Please upvote if you like,any suggestions or mistakes put it in comments,Thank you.","7d7153a4":"# Splitting the data into train,test.","1ac313b3":"# Age","1e1443b9":"Now Embarked vs survived,as shown below most people are embarked from S,where as C has more survived people than not survived ones.","28fc9e1b":"SibSp vs Survived.As shown below people having 1 or 2 sibsp are survived most.","f7faa9fd":"SibSp-Number of siblings\/spouses,as shown below most people has zero sibsp.","7d5beee0":"As shown above Age,Cabin and Embarked have missing values.Embarked is a categorical feature so replacing missing values with mode.For age we use median imputation and dropping cabin as it consists of several missing values.","575076d8":"# Finding Accuracy","7bf0da67":"# Survived"}}