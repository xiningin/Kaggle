{"cell_type":{"ba782e36":"code","5ebcd08b":"code","81c5b74d":"code","da4b987e":"code","09f0961e":"code","4f7aa38b":"code","918e02dd":"code","e2c8397d":"code","50f20a66":"code","a0cf4e2c":"code","8ae5df54":"code","d6026436":"code","92337104":"code","61f9d0a8":"code","1dc729c6":"code","512432bf":"code","20067056":"code","2d2b4407":"code","2c962e5b":"code","e0456fce":"code","ff3c69f7":"code","bf563c3a":"code","ed102aa9":"code","ddd4f778":"code","77368490":"code","2a76effd":"code","100d6e1c":"code","f36616fe":"code","084b380e":"code","85f625d4":"code","f0507180":"code","462a8295":"code","7c80ce67":"code","ade1257d":"code","a67f446c":"code","d0b8a7da":"code","606fb549":"code","42b8e307":"code","bfd5ecf6":"code","17aa72b0":"code","e72ee2b6":"markdown","74a2f0ae":"markdown","8a85334e":"markdown","21980f00":"markdown","1f5ffed6":"markdown","3b5ef033":"markdown","59822631":"markdown","0c2ac2d8":"markdown","32fe2884":"markdown","f3435013":"markdown","e4ffa086":"markdown","996564ec":"markdown","b746c7d1":"markdown","38fd6baf":"markdown","bf84f64c":"markdown","bac298e7":"markdown"},"source":{"ba782e36":"import numpy as np\n\noneDim = np.array([1.0,2,3,4,5])   # a 1-dimensional array (vector)\nprint(oneDim)\nprint(\"#Dimensions =\", oneDim.ndim)\nprint(\"Dimension =\", oneDim.shape)\nprint(\"Size =\", oneDim.size)\nprint(\"Array type =\", oneDim.dtype)\n\ntwoDim = np.array([[1,2],[3,4],[5,6],[7,8]])  # a two-dimensional array (matrix)\nprint(twoDim)\nprint(\"#Dimensions =\", twoDim.ndim)\nprint(\"Dimension =\", twoDim.shape)\nprint(\"Size =\", twoDim.size)\nprint(\"Array type =\", twoDim.dtype)\n\narrFromTuple = np.array([(1,'a',3.0),(2,'b',3.5)])  # create ndarray from tuple\nprint(arrFromTuple)\nprint(\"#Dimensions =\", arrFromTuple.ndim)\nprint(\"Dimension =\", arrFromTuple.shape)\nprint(\"Size =\", arrFromTuple.size)","5ebcd08b":"print(np.random.rand(5))      # random numbers from a uniform distribution between [0,1]\nprint(np.random.randn(5))     # random numbers from a normal distribution\nprint(np.arange(-10,10,2))    # similar to range, but returns ndarray instead of list\nprint(np.arange(12).reshape(3,4))  # reshape to a matrix\nprint(np.linspace(0,1,10))    # split interval [0,1] into 10 equally separated values\nprint(np.logspace(-3,3,7))    # create ndarray with values from 10^-3 to 10^3","81c5b74d":"print(np.zeros((2,3)))        # a matrix of zeros\nprint(np.ones((3,2)))         # a matrix of ones\nprint(np.eye(3))              # a 3 x 3 identity matrix","da4b987e":"x = np.array([1,2,3,4,5])\n\nprint(x + 1)      # addition\nprint(x - 1)      # subtraction\nprint(x * 2)      # multiplication\nprint(x \/\/ 2)     # integer division\nprint(x ** 2)     # square\nprint(x % 2)      # modulo  \nprint(1 \/ x)      # division","09f0961e":"x = np.array([2,4,6,8,10])\ny = np.array([1,2,3,4,5])\n\nprint(x + y)\nprint(x - y)\nprint(x * y)\nprint(x \/ y)\nprint(x \/\/ y)\nprint(x ** y)","4f7aa38b":"x = np.arange(-5,5)\nprint(x)\n\ny = x[3:5]     # y is a slice, i.e., pointer to a subarray in x\nprint(y)\ny[:] = 1000    # modifying the value of y will change x\nprint(y)\nprint(x)\n\nz = x[3:5].copy()   # makes a copy of the subarray\nprint(z)\nz[:] = 500          # modifying the value of z will not affect x\nprint(z)\nprint(x)","918e02dd":"my2dlist = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]   # a 2-dim list\nprint(my2dlist)\nprint(my2dlist[2])        # access the third sublist\nprint(my2dlist[:][2])     # can't access third element of each sublist\n# print(my2dlist[:,2])    # this will cause syntax error\n\nmy2darr = np.array(my2dlist)\nprint(my2darr)\nprint(my2darr[2][:])      # access the third row\nprint(my2darr[2,:])       # access the third row\nprint(my2darr[:][2])      # access the third row (similar to 2d list)\nprint(my2darr[:,2])       # access the third column\nprint(my2darr[:2,2:])     # access the first two rows & last two columns","e2c8397d":"my2darr = np.arange(1,13,1).reshape(3,4)\nprint(my2darr)\n\ndivBy3 = my2darr[my2darr % 3 == 0]\nprint(divBy3, type(divBy3))\n\ndivBy3LastRow = my2darr[2:, my2darr[2,:] % 3 == 0]\nprint(divBy3LastRow)","50f20a66":"my2darr = np.arange(1,13,1).reshape(4,3)\nprint(my2darr)\n\nindices = [2,1,0,3]    # selected row indices\nprint(my2darr[indices,:])\n\nrowIndex = [0,0,1,2,3]     # row index into my2darr\ncolumnIndex = [0,2,0,1,2]  # column index into my2darr\nprint(my2darr[rowIndex,columnIndex])","a0cf4e2c":"y = np.array([-1.4, 0.4, -3.2, 2.5, 3.4])    # generate a random vector\nprint(y)\n\nprint(np.abs(y))          # convert to absolute values\nprint(np.sqrt(abs(y)))    # apply square root to each element\nprint(np.sign(y))         # get the sign of each element\nprint(np.exp(y))          # apply exponentiation\nprint(np.sort(y))         # sort array","8ae5df54":"x = np.arange(-2,3)\ny = np.random.randn(5)\nprint(x)\nprint(y)\n\nprint(np.add(x,y))           # element-wise addition       x + y\nprint(np.subtract(x,y))      # element-wise subtraction    x - y\nprint(np.multiply(x,y))      # element-wise multiplication x * y\nprint(np.divide(x,y))        # element-wise division       x \/ y\nprint(np.maximum(x,y))       # element-wise maximum        max(x,y)","d6026436":"y = np.array([-3.2, -1.4, 0.4, 2.5, 3.4])    # generate a random vector\nprint(y)\n\nprint(\"Min =\", np.min(y))             # min \nprint(\"Max =\", np.max(y))             # max \nprint(\"Average =\", np.mean(y))        # mean\/average\nprint(\"Std deviation =\", np.std(y))   # standard deviation\nprint(\"Sum =\", np.sum(y))             # sum ","92337104":"X = np.random.randn(2,3)    # create a 2 x 3 random matrix\nprint(X)\nprint(X.T)             # matrix transpose operation X^T\n\ny = np.random.randn(3) # random vector \nprint(y)\nprint(X.dot(y))        # matrix-vector multiplication  X * y\nprint(X.dot(X.T))      # matrix-matrix multiplication  X * X^T\nprint(X.T.dot(X))      # matrix-matrix multiplication  X^T * X","61f9d0a8":"X = np.random.randn(5,3)\nprint(X)\n\nC = X.T.dot(X)               # C = X^T * X is a square matrix\n\ninvC = np.linalg.inv(C)      # inverse of a square matrix\nprint(invC)\ndetC = np.linalg.det(C)      # determinant of a square matrix\nprint(detC)\nS, U = np.linalg.eig(C)      # eigenvalue S and eigenvector U of a square matrix\nprint(S)\nprint(U)","1dc729c6":"from pandas import Series\n\ns = Series([3.1, 2.4, -1.7, 0.2, -2.9, 4.5])   # creating a series from a list\nprint(s)\nprint('Values=', s.values)     # display values of the Series\nprint('Index=', s.index)       # display indices of the Series","512432bf":"import numpy as np\n\ns2 = Series(np.random.randn(6))  # creating a series from a numpy ndarray\nprint(s2)\nprint('Values=', s2.values)   # display values of the Series\nprint('Index=', s2.index)     # display indices of the Series","20067056":"s3 = Series([1.2,2.5,-2.2,3.1,-0.8,-3.2], \n            index = ['Jan 1','Jan 2','Jan 3','Jan 4','Jan 5','Jan 6',])\nprint(s3)\nprint('Values=', s3.values)   # display values of the Series\nprint('Index=', s3.index)     # display indices of the Series","2d2b4407":"capitals = {'MI': 'Lansing', 'CA': 'Sacramento', 'TX': 'Austin', 'MN': 'St Paul'}\n\ns4 = Series(capitals)   # creating a series from dictionary object\nprint(s4)\nprint('Values=', s4.values)   # display values of the Series\nprint('Index=', s4.index)     # display indices of the Series","2c962e5b":"s3 = Series([1.2,2.5,-2.2,3.1,-0.8,-3.2], \n            index = ['Jan 1','Jan 2','Jan 3','Jan 4','Jan 5','Jan 6',])\nprint(s3)\n\n# Accessing elements of a Series\n\nprint('\\ns3[2]=', s3[2])        # display third element of the Series\nprint('s3[\\'Jan 3\\']=', s3['Jan 3'])   # indexing element of a Series \n\nprint('\\ns3[1:3]=')             # display a slice of the Series\nprint(s3[1:3])\nprint('s3.iloc([1:3])=')      # display a slice of the Series\nprint(s3.iloc[1:3])","e0456fce":"print('shape =', s3.shape)  # get the dimension of the Series\nprint('size =', s3.size)    # get the # of elements of the Series","ff3c69f7":"print(s3[s3 > 0])   # applying filter to select elements of the Series","bf563c3a":"print(s3 + 4)       # applying scalar operation on a numeric Series\nprint(s3 \/ 4)    ","ed102aa9":"print(np.log(s3 + 4))    # applying numpy math functions to a numeric Series","ddd4f778":"from pandas import DataFrame\n\ncars = {'make': ['Ford', 'Honda', 'Toyota', 'Tesla'],\n       'model': ['Taurus', 'Accord', 'Camry', 'Model S'],\n       'MSRP': [27595, 23570, 23495, 68000]}          \ncarData = DataFrame(cars)   # creating DataFrame from dictionary\ncarData                     # display the table","77368490":"print(carData.index)       # print the row indices\nprint(carData.columns)     # print the column indices","2a76effd":"carData2 = DataFrame(cars, index = [1,2,3,4])  # change the row index\ncarData2['year'] = 2018    # add column with same value\ncarData2['dealership'] = ['Courtesy Ford','Capital Honda','Spartan Toyota','N\/A']\ncarData2                   # display table","100d6e1c":"tuplelist = [(2011,45.1,32.4),(2012,42.4,34.5),(2013,47.2,39.2),\n              (2014,44.2,31.4),(2015,39.9,29.8),(2016,41.5,36.7)]\ncolumnNames = ['year','temp','precip']\nweatherData = DataFrame(tuplelist, columns=columnNames)\nweatherData","f36616fe":"import numpy as np\n\nnpdata = np.random.randn(5,3)  # create a 5 by 3 random matrix\ncolumnNames = ['x1','x2','x3']\ndata = DataFrame(npdata, columns=columnNames)\ndata","084b380e":"# accessing an entire column will return a Series object\n\nprint(data['x2'])\nprint(type(data['x2']))","85f625d4":"# accessing an entire row will return a Series object\n\nprint('Row 3 of data table:')\nprint(data.iloc[2])       # returns the 3rd row of DataFrame\nprint(type(data.iloc[2]))\nprint('\\nRow 3 of car data table:')\nprint(carData2.iloc[2])   # row contains objects of different types","f0507180":"# accessing a specific element of the DataFrame\n\nprint(carData2.iloc[1,2])      # retrieving second row, third column\nprint(carData2.loc[1,'model']) # retrieving second row, column named 'model'\n\n# accessing a slice of the DataFrame\n\nprint('carData2.iloc[1:3,1:3]=')\nprint(carData2.iloc[1:3,1:3])","462a8295":"print('carData2.shape =', carData2.shape)\nprint('carData2.size =', carData2.size)","7c80ce67":"# selection and filtering\n\nprint('carData2[carData2.MSRP > 25000]')  \nprint(carData2[carData2.MSRP > 25000])","ade1257d":"print(data)\n\nprint('Data transpose operation:')\nprint(data.T)    # transpose operation\n\nprint('Addition:')\nprint(data + 4)    # addition operation\n\nprint('Multiplication:')\nprint(data * 10)   # multiplication operation","a67f446c":"print('data =')\nprint(data)\n\ncolumnNames = ['x1','x2','x3']\ndata2 = DataFrame(np.random.randn(5,3), columns=columnNames)\nprint('\\ndata2 =')\nprint(data2)\n\nprint('\\ndata + data2 = ')\nprint(data.add(data2))\n\nprint('\\ndata * data2 = ')\nprint(data.mul(data2))","d0b8a7da":"print(data.abs())    # get the absolute value for each element\n\nprint('\\nMaximum value per column:')\nprint(data.max())    # get maximum value for each column\n\nprint('\\nMinimum value per row:')\nprint(data.min(axis=1))    # get minimum value for each row\n\nprint('\\nSum of values per column:')\nprint(data.sum())    # get sum of values for each column\n\nprint('\\nAverage value per row:')\nprint(data.mean(axis=1))    # get average value for each row\n\nprint('\\nCalculate max - min per column')\nf = lambda x: x.max() - x.min()\nprint(data.apply(f))\n\nprint('\\nCalculate max - min per row')\nf = lambda x: x.max() - x.min()\nprint(data.apply(f, axis=1))","606fb549":"%matplotlib inline\n\ns3 = Series([1.2,2.5,-2.2,3.1,-0.8,-3.2,1.4], \n            index = ['Jan 1','Jan 2','Jan 3','Jan 4','Jan 5','Jan 6','Jan 7'])\ns3.plot(kind='line', title='Line plot')","42b8e307":"s3.plot(kind='bar', title='Bar plot')","bfd5ecf6":"s3.plot(kind='hist', title = 'Histogram')","17aa72b0":"tuplelist = [(2011,45.1,32.4),(2012,42.4,34.5),(2013,47.2,39.2),\n              (2014,44.2,31.4),(2015,39.9,29.8),(2016,41.5,36.7)]\ncolumnNames = ['year','temp','precip']\nweatherData = DataFrame(tuplelist, columns=columnNames)\nweatherData[['temp','precip']].plot(kind='box', title='Box plot')","e72ee2b6":"### 2.2.2 DataFrame\n\nA DataFrame object is a tabular, spreadsheet-like data structure containing a collection of columns, each of which can be of different types (numeric, string, boolean, etc). Unlike Series, a DataFrame has distinct row and column indices. There are many ways to create a DataFrame object (e.g., from a dictionary, list of tuples, or even numpy's ndarrays).","74a2f0ae":"## 2.1.4 Numpy Arithmetic and Statistical Functions\n\nThere are many built-in mathematical functions available for manipulating elements of nd-array.","8a85334e":"More indexing examples.","21980f00":"Creating DataFrame from numpy ndarray","1f5ffed6":"## 2.1.5 Numpy linear algebra\n\nNumpy provides many functions to support linear algebra operations.","3b5ef033":"## 2.1.2 Element-wise Operations\n\nYou can apply standard operators such as addition and multiplication on each element of the ndarray.","59822631":"# Module 2: Introduction to Numpy and Pandas\n\nThe following tutorial contains examples of using the numpy and pandas library modules. The notebook can be downloaded from http:\/\/www.cse.msu.edu\/~ptan\/dmbook\/tutorials\/tutorial2\/tutorial2.ipynb. Read the step-by-step instructions below carefully. To execute the code, click on the cell and press the SHIFT-ENTER keys simultaneously.","0c2ac2d8":"There are several built-in functions in numpy that can be used to create ndarrays","32fe2884":"## 2.1.3 Indexing and Slicing\n\nThere are various ways to select certain elements with an ndarray.","f3435013":"## 2.1 Introduction to Numpy\n\nNumpy, which stands for numerical Python, is a Python library package to support numerical computations. The basic data structure in numpy is a multi-dimensional array object called ndarray. Numpy provides a suite of functions that can efficiently manipulate elements of the ndarray. \n\n### 2.1.1 Creating ndarray\n\nAn ndarray can be created from a list or tuple object.","e4ffa086":"### 2.2.4 Plotting Series and DataFrame\n\nThere are built-in functions you can use to plot the data stored in a Series or a DataFrame.","996564ec":"## 2.2 Introduction to Pandas\n\nPandas provide two convenient data structures for storing and manipulating data--Series and DataFrame. A Series is similar to a one-dimensional array whereas a DataFrame is more similar to representing a matrix or a spreadsheet table.  \n\n### 2.2.1 Series\n\nA Series object consists of a one-dimensional array of values, whose elements can be referenced using an index array. A Series object can be created from a list, a numpy array, or a Python dictionary. You can apply most of the numpy functions on the Series object.\n","b746c7d1":"### 2.2.3 Arithmetic Operations","38fd6baf":"ndarray also supports boolean indexing.","bf84f64c":"The elements of a DataFrame can be accessed in many ways.","bac298e7":"Creating DataFrame from a list of tuples."}}