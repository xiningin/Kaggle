{"cell_type":{"9cf5d5b2":"code","d561dc57":"code","6dcb8942":"code","d6b49807":"code","8966c8d7":"code","a776ee6d":"code","58821d29":"code","b0802b77":"code","24cb4e3e":"code","69ca5051":"code","3f70135a":"code","8cdb12bb":"code","0be1ab24":"code","ea688b81":"code","3ed7e188":"code","f65e8aa9":"code","5322b50f":"code","60d7591e":"code","124477a4":"code","c0e557a5":"code","9f5809f4":"code","902448b8":"code","e80f7778":"code","7fd81e6f":"code","ec22810d":"code","1566a6a2":"code","addf9721":"code","af7268a1":"code","29b9b114":"code","f7b76518":"code","43fa86ca":"code","b9a9cba4":"code","55dc4c38":"code","28e1d6eb":"code","01f321f7":"code","370d9090":"code","0ca54a80":"code","889df1f5":"code","cdb4a025":"code","ff96819d":"code","9f848ab7":"code","ccde79ad":"code","311b5c9b":"code","9d2da2dc":"code","67c41c6b":"code","d515dc98":"code","66c3cafb":"code","881d791d":"code","e2c257b9":"code","21145ec6":"code","74b33a61":"code","8f6cf06a":"code","41bdb3d3":"code","8d2f7dcd":"code","20cf8ebd":"code","3650f5de":"code","a6522087":"code","094bb095":"code","582c550a":"code","d31a2f49":"code","0e2f3e51":"code","cdb4ee10":"code","6f3efcb9":"code","17f88bbc":"code","695a72dc":"code","883531ef":"code","0caf71d0":"code","33ce7489":"code","494dab77":"code","7787fa9b":"code","1fd74024":"code","9eefa9df":"code","584a254f":"code","43fd77e5":"code","50860520":"code","d95a0e9b":"code","48e435ed":"code","95b1e4df":"code","d62359ca":"code","afcb5715":"code","9c272fbd":"code","e0e9d2ae":"code","b6abf222":"code","f14b2b69":"code","cc17739d":"code","5d0a7ea2":"code","5d58e303":"code","2a4e2e01":"code","f15f38dd":"code","0b0b2221":"code","a1422cab":"code","116fcb61":"code","4d26378a":"code","04a40393":"code","99df6874":"code","7e580e2d":"code","7f01e311":"code","847e20ff":"code","54ff24ef":"code","29af762d":"code","f690c44b":"code","eceb4614":"code","59d35d83":"code","04372735":"code","5b4559b8":"code","790cd31d":"code","e7eb8c45":"code","f05b8ee1":"code","4e374e3c":"code","69d98d05":"code","21d4ec78":"code","3f349766":"code","2acd73f0":"code","9c8a3ce0":"code","91864768":"code","d18e865e":"code","c17e1201":"code","b066a281":"code","566f85f8":"code","3037975d":"code","9bacc2e9":"code","6e5fe131":"code","379d45e8":"code","3f022b24":"code","1989cb4c":"code","37829611":"code","cc302c77":"code","d608c451":"code","cf22c3cf":"code","c83a544a":"code","6d06ef44":"code","17ce5e5f":"code","349e1e08":"code","de597187":"code","c99b6a1d":"code","94c9f735":"code","03204638":"code","385a4797":"code","c0fe2582":"code","15714146":"code","1e33df4b":"code","857856e9":"code","b8c02945":"code","bf0a62b4":"code","14da228e":"code","44caa85b":"code","6a353e10":"code","c67bdf25":"code","7337e85e":"code","54cf3603":"code","4cec531d":"code","13839680":"code","29769f27":"code","8c2259b4":"code","db592b06":"code","2e1a600e":"code","6d1c6d97":"code","ed8d5752":"code","838fff3f":"code","f0076a9b":"code","478c8c67":"code","f5637000":"code","678aaf46":"code","505b2944":"code","3add1b7e":"code","a8457441":"code","d20cf7ee":"code","d4e5bcad":"code","f7086f35":"code","91129396":"code","2f34a98a":"code","384b929e":"code","80cb9b29":"code","09371934":"code","59c7882e":"code","5adc1c02":"code","02d77573":"code","d29be46d":"code","3ff9bb09":"code","74fdb607":"code","27284a08":"code","d0804d19":"code","be36e76d":"code","29a179d8":"code","e9ea4ca9":"code","69307d70":"code","770cf132":"code","cb359c61":"code","ffe9070b":"code","3f5c36ef":"code","dd726f1a":"code","ea064c7f":"code","d8bac4da":"code","dd440b03":"code","da139186":"code","61ed4eb0":"code","83c2da8f":"code","9c0ba97e":"code","92d45954":"code","17433ab4":"code","61601c5d":"code","98c24aa8":"code","a0bd933e":"code","0498d832":"code","c419c472":"code","944115c6":"code","ab9d0b16":"code","21e33bb9":"code","b7b8ce0c":"code","62c57c13":"code","568a318d":"code","2bb78f02":"code","ab7f0665":"code","3b93c831":"code","1e9d17f5":"code","7828c9f2":"code","66ba2b37":"code","2a26560f":"code","8470f1e7":"code","c74be830":"code","a4cdbdf7":"code","5730cf3f":"code","6c0e44ec":"code","fa6f9a5d":"code","dc9270bb":"code","4e4ef1fd":"code","b78b8591":"code","3a6ccd1d":"code","094ff361":"code","0a30e64d":"markdown","f4c3fdc9":"markdown","ca8469a0":"markdown","6ae83abb":"markdown","7956990d":"markdown","6585dd59":"markdown","9491a104":"markdown","a8d0e59e":"markdown","20d27661":"markdown","537e97b4":"markdown","fbac5a2f":"markdown","2c40120b":"markdown","1d1acc44":"markdown","45cbd6ca":"markdown","4fa8e9fc":"markdown","17baa01d":"markdown","b6da5ff6":"markdown","eedf9f89":"markdown","b08974a0":"markdown","7a8a44da":"markdown","bb49f60e":"markdown","603653a7":"markdown","3f0ebe8a":"markdown","de908c7e":"markdown","7a84da26":"markdown","8c9cfd19":"markdown","d7d31222":"markdown","c03f54f4":"markdown","a2b3cefa":"markdown","ae741c07":"markdown","a7a8947f":"markdown","d22ee20e":"markdown","2e3afb3e":"markdown","e2777006":"markdown","73b2e882":"markdown","dd0abc05":"markdown","4527d648":"markdown","6d5aba7d":"markdown","05a6e6ef":"markdown","ae3ae213":"markdown","7e5510c5":"markdown","72a01cd8":"markdown","bc8ef7f8":"markdown","e58c9ccd":"markdown","c11fca41":"markdown","493bde86":"markdown","52166847":"markdown","fbc71df7":"markdown","4f758eaf":"markdown","d023279e":"markdown","44bdbd2b":"markdown","b078645c":"markdown","4a413d7e":"markdown","58dd1a69":"markdown","3ac1f038":"markdown","058694e3":"markdown","88243f9a":"markdown","78c7d2df":"markdown","da938e75":"markdown","c47f1737":"markdown","3121ff78":"markdown","fc58c217":"markdown","a3644c83":"markdown","330c1b35":"markdown","08c6e1ab":"markdown","02cf29a9":"markdown","e7750013":"markdown","8b105db7":"markdown","a2239ced":"markdown","3045c9d7":"markdown","8f9572b4":"markdown","1191325b":"markdown","5cb54930":"markdown","29b5dfcc":"markdown","312a8591":"markdown","2cfd7884":"markdown","cd989360":"markdown","05e1c0f4":"markdown","9edac39e":"markdown","06b54bdd":"markdown","833a0dd3":"markdown","b265ff74":"markdown","8baeeb34":"markdown","ea2be7f2":"markdown","e8c16c1a":"markdown","0a2c8c67":"markdown","0d67f3f8":"markdown","1b4594e2":"markdown","f9813b99":"markdown","471566e3":"markdown","a12f3ad6":"markdown","822a8bb2":"markdown","e37002d4":"markdown","fe06483f":"markdown","058481b5":"markdown","b831daf1":"markdown","830df3aa":"markdown","e419fc5e":"markdown","938f8c25":"markdown","9649e384":"markdown","2ffa10f7":"markdown","bb9bd1e9":"markdown","7a3c2923":"markdown","06130657":"markdown","3d380d00":"markdown","74c1709a":"markdown","c2706af0":"markdown","3b9663bc":"markdown","42b5c353":"markdown","f32730a4":"markdown","f8eaacee":"markdown","70dc261f":"markdown","077ef85b":"markdown","c4564dc3":"markdown","9b3c21be":"markdown","a17a215b":"markdown","274181b8":"markdown","ee5c029a":"markdown","f97ff736":"markdown","140fa7ea":"markdown","5718d03c":"markdown","d0b5ff9a":"markdown","ee261bfe":"markdown","20f4ebae":"markdown","5364ea3a":"markdown","917175ba":"markdown","077e24cc":"markdown","c294fbab":"markdown","4b889590":"markdown","48c070f2":"markdown","48ec9ec8":"markdown","48f70b0e":"markdown","18f56ed1":"markdown","df59f12f":"markdown","1779caa9":"markdown"},"source":{"9cf5d5b2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gc\n\nfrom sklearn.preprocessing import LabelBinarizer,PolynomialFeatures\nfrom sklearn.metrics import roc_auc_score, roc_curve,auc\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\n%matplotlib inline\nplt.style.use('ggplot')\nseed =420\npd.options.display.max_rows = 100","d561dc57":"nrows = 100000\n#nrows =None\npath = '..\/input\/'\n#path = 'dataset\/'\napp_train = pd.read_csv(path+'application_train.csv', nrows= nrows)\napp_test = pd.read_csv(path+'application_test.csv', nrows= None)\nbureau_balance = pd.read_csv(path+'bureau_balance.csv', nrows=nrows)\nbureau = pd.read_csv(path+'bureau.csv', nrows=nrows)\ninstallments_payments = pd.read_csv(path+ 'installments_payments.csv', nrows= nrows)\nPOS_CASH_balance = pd.read_csv(path+ 'POS_CASH_balance.csv', nrows= nrows)\ncredit_card_balance = pd.read_csv(path+'credit_card_balance.csv',nrows=nrows)\nprevious_application = pd.read_csv(path+ 'previous_application.csv', nrows= nrows)\ngc.collect()\n\ntest_index = app_test['SK_ID_CURR'] # Store test index","6dcb8942":"# Reduce memory of dataset\ndef reduce_memory_usage(df):\n    \"\"\" The function will reduce memory of dataframe \"\"\"\n    intial_memory = df.memory_usage().sum()\/1024**2\n    print('Intial memory usage:',intial_memory,'MB')\n    for col in df.columns:\n        mn = df[col].min()\n        mx = df[col].max()\n        if df[col].dtype != object:            \n            if df[col].dtype == int:\n                if mn >=0:\n                    if mx < np.iinfo(np.uint8).max:\n                        df[col] = df[col].astype(np.uint8)\n                    elif mx < np.iinfo(np.uint16).max:\n                        df[col] = df[col].astype(np.uint16)\n                    elif mx < np.iinfo(np.uint32).max:\n                        df[col] = df[col].astype(np.uint32)\n                    elif mx < np.iinfo(np.uint64).max:\n                        df[col] = df[col].astype(np.uint64)\n                else:\n                    if mn > np.iinfo(np.int8).min and mx < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif mn > np.iinfo(np.int16).min and mx < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif mn > np.iinfo(np.int32).min and mx < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif mn > np.iinfo(np.int64).min and mx < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)\n            if df[col].dtype == float:\n                df[col] =df[col].astype(np.float32)\n    \n    red_memory = df.memory_usage().sum()\/1024**2\n    print('Memory usage after complition: ',red_memory,'MB')","d6b49807":"def basic_details(df):\n    \"\"\" Returns basic detials of features in dataset\"\"\"\n    k = pd.DataFrame()\n    k['missing_value'] = df.isnull().sum()\n    k['%missing_value'] = round(df.isnull().sum()*100\/df.shape[0],2)\n    k['dtypes'] = df.dtypes\n    k['N unique'] = df.nunique()\n    #k['mean'] = df.mean()\n    return k","8966c8d7":"# Fill missing value with mode\ndef missing_value_fill(df ,columns, mean_or_mode='mode'):\n    \"\"\" Fill missing value with\n        mode: for categorical variable\n        mean: for numerical variable\"\"\"\n    for i in columns:\n        if (df[i].isnull().sum()>0) and (mean_or_mode =='mode'):\n            df[i].fillna(df[i].mode()[0], inplace=True)\n        elif (df[i].isnull().sum()>0) and (mean_or_mode =='mean'):\n            df[i].fillna(df[i].mean(), inplace=True)","a776ee6d":"# Replace missing value np.nan\ndef replace_XNA_XAP(df):\n    \"Replace XNA,XAP\"\n    df.replace(to_replace = {'XNA':np.nan,'XAP':np.nan},inplace=True,value= None)\n    return df","58821d29":"def one_hot_encoding(df,columns,nan_as_category = True):\n    \"\"\" One hot encoding of categorical variable\"\"\"\n    print('*'*5,'One hot encoding of categorical variable','*'*5)\n    print('Original shape',df.shape)\n    original_columns = df.columns\n    # One hot encoding using get dummies function\n    df = pd.get_dummies(df, columns= columns,drop_first=True,dummy_na=nan_as_category)\n    new_columns = [i for i in df.columns if i not in original_columns]\n    print('After OHE',df.shape)\n    return df,new_columns","b0802b77":"def descriptive_stat_feat(df,columns):\n    \"\"\" Descriptive statistics feature\n    genarating function: Mean,Median,Q1,Q3\"\"\"\n    print('*'*5,'Descriptive statistics feature','*'*5)\n    print('Before',df.shape)\n    mean = df[columns].mean()\n    median = df[columns].median()\n    Q1 = np.percentile(df[columns], 25, axis=0)\n    Q3 = np.percentile(df[columns], 75, axis=0)\n    for i,j in enumerate(columns):\n        df['mean_'+j] = (df[j] < mean[i]).astype('int8')\n        df['median_'+j] = (df[j] > median[i]).astype('int8')\n        df['Q1'+j] = (df[j] < Q1[i]).astype('int8')\n        df['Q3'+j] = (df[j] > Q3[i]).astype('int8')\n    print('After ',df.shape)","24cb4e3e":"def binary_encoding(df,columns):\n    \"\"\"Binary encoding\"\"\"\n    print('*'*5,'Binary encoding','*'*5)\n    lb = LabelBinarizer()\n    print('Original shape:',df.shape)\n    original_col = df.columns\n    #columns = [i for i in columns if df[columns].nunique()>2]\n    for i in columns:\n        if df[i].nunique() >2:\n            result = lb.fit_transform(df[i].fillna(df[i].mode()[0],axis=0))\n            col = ['BIN_'+ str(i)+'_'+str(c) for c in lb.classes_]\n            result1 = pd.DataFrame(result, columns=col)\n            df = df.join(result1)\n    print('After:',df.shape)\n    new_col = [c for c in df.columns if c not in original_col]\n    return df, new_col","69ca5051":"def dist_box__plot_with_log(df,column,ncols=2,Trans_func= None):\n    \"\"\"Plot distribution plot with log on diffirent target value\n    Can be used for train\/ test dataset\n    Trans_fucn: log, log1p, exp, sqrt, expm1...\n    \"\"\"\n    # Apply natural log on total income\n    fig,a = plt.subplots(nrows=1,ncols=ncols,figsize=(14,4))\n    # Box plot\n    ax = plt.subplot(1,ncols,1)    \n    sns.boxplot(x ='TARGET', y=column, data=df,ax=ax,palette='RdYlGn_r')\n    plt.title('Boxplot')\n    \n    tmp_0 = df[df['TARGET']==1][column].dropna()\n    tmp_1 = df[df['TARGET']==0][column].dropna()\n    # Distribution plot    \n    ax = plt.subplot(1,ncols,2)    \n    sns.distplot(tmp_0,ax=ax,color='orange',label='Target=1',hist=False)\n    sns.distplot(tmp_1,ax=ax,color='green',label='Target=0',hist=False)\n    ax.set_title('Distribution plot')\n    \n    # Distribution plot with log(x+1) on column\n    if Trans_func !=None:\n        ax = plt.subplot(1,ncols,3)\n        tmp_0 = df[df['TARGET']==1][column].dropna().apply(Trans_func)\n        tmp_1 = df[df['TARGET']==0][column].dropna().apply(Trans_func)\n        sns.distplot(np.log1p(tmp_0), ax=ax,color='orange',label='Target=1',hist=False)\n        sns.distplot(np.log1p(tmp_1), ax=ax,color='green',label='Target=0',hist=False)\n        ax.set_title('${}$'.format(Trans_func))\n    \n    plt.tight_layout()\n    plt.legend()","3f70135a":"def box_dist_plot_with_trans(df,column,nrows=1,ncols=2,Trans_func=None):\n    \"\"\"Dirtibution plot and Box plot \n    log,log1p,exp,sqrt,expm1.. numpy function\n    \"\"\"\n    fig,ax = plt.subplots(nrows=nrows,ncols=ncols,figsize=(14,4*nrows))\n    \n    # Box plot\n    ax = plt.subplot(nrows,ncols,1)\n    sns.boxplot(x =column, data=df,ax=ax)\n    ax.set_title('Box plot')\n    \n    # Distribution plot\n    ax = plt.subplot(nrows,ncols,2)\n    sns.distplot(df[column].dropna(),ax=ax,color='blue',bins=30)\n    ax.set_title('Distribution plot')\n    \n    # Transformation plot\n    if Trans_func !=None:\n        tmp = df[column].dropna().apply(Trans_func)\n        ax = plt.subplot(nrows,ncols,3)\n        sns.distplot(tmp,ax=ax,color='red',bins=30)\n        ax.set_title('${}$'.format(Trans_func))\n      \n    plt.tight_layout()","8cdb12bb":"print('Number of rows and columns in train dataset: ',app_train.shape)\napp_train.head()","0be1ab24":"print('Number of rows and columns in test dataset: ',app_test.shape)\napp_test.head()","ea688b81":"pd.read_csv(path+'sample_submission.csv').head()","3ed7e188":"app_train.columns.values","f65e8aa9":"#sns.scatterplot(range(app_train.shape[0]),app_train['SK_ID_CURR'].sort_values())\n#sns.scatterplot(range(app_test.shape[0]),app_test['SK_ID_CURR'].sort_values())","5322b50f":"test_index = app_test['SK_ID_CURR']\napp_train_col_drop = [] # Drop the columns, which have least importance","60d7591e":"print('Count\\n',app_train['TARGET'].value_counts())\nprint('%\\n',app_train['TARGET'].value_counts()*100\/app_train.shape[0])","124477a4":"f =plt.figure(figsize=(14,6))\nax= f.add_subplot(221)\nsns.countplot(app_train['NAME_CONTRACT_TYPE'])\nax=f.add_subplot(222)\nsns.countplot(app_train['CODE_GENDER'])\nax=f.add_subplot(223)\nsns.countplot(app_train['FLAG_OWN_CAR'])\nax=f.add_subplot(224)\nsns.countplot(app_train['FLAG_OWN_REALTY'])\nplt.tight_layout()","c0e557a5":"# convert to categorical type\napp_train[['NAME_CONTRACT_TYPE', 'CODE_GENDER','FLAG_OWN_CAR', 'FLAG_OWN_REALTY']] =   app_train[\n    ['NAME_CONTRACT_TYPE', 'CODE_GENDER','FLAG_OWN_CAR', 'FLAG_OWN_REALTY']].astype('object')\napp_test[['NAME_CONTRACT_TYPE', 'CODE_GENDER','FLAG_OWN_CAR', 'FLAG_OWN_REALTY']] =   app_test[\n    ['NAME_CONTRACT_TYPE', 'CODE_GENDER','FLAG_OWN_CAR', 'FLAG_OWN_REALTY']].astype('object')\n","9f5809f4":"#plt.figure(figsize=(14,4))\n#sns.countplot(app_train['CNT_CHILDREN'])\ntmp = app_train['CNT_CHILDREN'].value_counts().to_frame()\ntmp['%'] = (app_train['CNT_CHILDREN'].value_counts() *100 \/ app_train.shape[0])\ntmp","902448b8":"# convert to categorical type\napp_train['CNT_CHILDREN'] = app_train['CNT_CHILDREN'].astype('object')\napp_test['CNT_CHILDREN'] = app_test['CNT_CHILDREN'].astype('object')","e80f7778":"app_train[['AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE',]].describe()","7fd81e6f":"dist_box__plot_with_log(app_train,column='AMT_INCOME_TOTAL',ncols=3,Trans_func='log')","ec22810d":"print('Default',app_train[app_train['AMT_INCOME_TOTAL'] >0.2e8]['AMT_INCOME_TOTAL'])\n\n# apply log on feature \napp_train['AMT_INCOME_TOTAL'] = np.log(app_train['AMT_INCOME_TOTAL'])\napp_test['AMT_INCOME_TOTAL'] = np.log(app_test['AMT_INCOME_TOTAL'])","1566a6a2":"dist_box__plot_with_log(app_train,column='AMT_CREDIT',ncols=3,Trans_func='sqrt')","addf9721":"# apply square root on feature\napp_train['AMT_CREDIT'] = np.sqrt(app_train['AMT_CREDIT'])\napp_test['AMT_CREDIT'] = np.sqrt(app_test['AMT_CREDIT'])","af7268a1":"dist_box__plot_with_log(app_train,column='AMT_ANNUITY',ncols=3,Trans_func='log')","29b9b114":"# apply log on feature\napp_train['AMT_ANNUITY'] = np.log(app_train['AMT_ANNUITY'])\napp_test['AMT_ANNUITY'] = np.log(app_test['AMT_ANNUITY'])","f7b76518":"dist_box__plot_with_log(app_train,column='AMT_GOODS_PRICE',ncols=3,Trans_func='log1p')","43fa86ca":"f = plt.figure(figsize= (14,12))\n#plt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('cool'))\n\nax= f.add_subplot(321)\ntmp = app_train['NAME_TYPE_SUITE'].value_counts()\nsns.barplot(tmp.values,tmp.index,palette='cool')\nfor i, v in enumerate(tmp.values):\n    ax.text(0.8,i,v,color='k',fontsize=10)\nax.set_title('Relationship type')\n\nax = f.add_subplot(322)\ntmp = app_train['NAME_INCOME_TYPE'].value_counts()\nsns.barplot(tmp.values,tmp.index,palette='Wistia')\nfor i, v in enumerate(tmp.values):\n    ax.text(0.8,i,v,color='k',fontsize=10)\nax.set_title('Employment type')\n\nax = f.add_subplot(323)\ntmp = app_train['NAME_EDUCATION_TYPE'].value_counts()\nsns.barplot(tmp.values,tmp.index,palette='Wistia')\nfor i, v in enumerate(tmp.values):\n    ax.text(0.8,i,v,color='k',fontsize=10)\nax.set_title('Education type')\n\nax = f.add_subplot(324)\ntmp = app_train['NAME_FAMILY_STATUS'].value_counts()\nsns.barplot(tmp.values,tmp.index,palette='cool')\nfor i, v in enumerate(tmp.values):\n    ax.text(0.8,i,v,color='k',fontsize=10)\nax.set_title('Family status')\n\nax = f.add_subplot(325)\ntmp = app_train['NAME_HOUSING_TYPE'].value_counts()\nsns.barplot(tmp.values,tmp.index,palette='cool')\nfor i, v in enumerate(tmp.values):\n    ax.text(0.8,i,v,color='k',fontsize=10)\nax.set_title('House type')\n\nplt.subplots_adjust(wspace=0.4)","b9a9cba4":"# convert to categorical type\napp_train[['NAME_TYPE_SUITE', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE', 'NAME_FAMILY_STATUS', \n           'NAME_HOUSING_TYPE']] = app_train[['NAME_TYPE_SUITE', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE',\n       'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE']].astype('object')\n\napp_test[['NAME_TYPE_SUITE', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE', 'NAME_FAMILY_STATUS', \n           'NAME_HOUSING_TYPE']] = app_test[['NAME_TYPE_SUITE', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE',\n       'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE']].astype('object')","55dc4c38":"dist_box__plot_with_log(app_train,column='REGION_POPULATION_RELATIVE', ncols=2)","28e1d6eb":"(app_train['DAYS_BIRTH']\/-365).describe()","01f321f7":"tmp = app_train[['TARGET','DAYS_BIRTH']]\ntmp['DAYS_BIRTH'] = tmp['DAYS_BIRTH']\/-365\ndist_box__plot_with_log(tmp,'DAYS_BIRTH')","370d9090":"print('missing value:',app_train['DAYS_EMPLOYED'].isnull().sum())\n(app_train['DAYS_EMPLOYED']\/-365).describe()","0ca54a80":"((app_train['DAYS_EMPLOYED']\/-365)[(app_train['DAYS_EMPLOYED']\/-365)<0][:5],\napp_train['DAYS_EMPLOYED'][app_train['DAYS_EMPLOYED']>0][:5],\napp_test['DAYS_EMPLOYED'][app_test['DAYS_EMPLOYED']>0][:5])","889df1f5":"# fill missing value\napp_train['DAYS_EMPLOYED'].replace({365243:np.nan},inplace=True)\napp_test['DAYS_EMPLOYED'].replace({365243:np.nan},inplace=True)","cdb4a025":"tmp = app_train[['TARGET','DAYS_EMPLOYED']]\ntmp['DAYS_EMPLOYED'] = tmp['DAYS_EMPLOYED']\/-365\ndist_box__plot_with_log(tmp,'DAYS_EMPLOYED')","ff96819d":"(app_train['DAYS_REGISTRATION']\/-365).describe()","9f848ab7":"tmp = app_train[['TARGET','DAYS_REGISTRATION']]\ntmp['DAYS_REGISTRATION'] = tmp['DAYS_REGISTRATION']\/-365\ndist_box__plot_with_log(tmp,'DAYS_REGISTRATION')","ccde79ad":"(app_train['DAYS_ID_PUBLISH']\/-365).describe()","311b5c9b":"tmp = app_train[['TARGET','DAYS_ID_PUBLISH']]\ntmp['DAYS_ID_PUBLISH'] = tmp['DAYS_ID_PUBLISH']\/-365\ndist_box__plot_with_log(tmp,'DAYS_ID_PUBLISH')","9d2da2dc":"plt.figure(figsize= (14,3))\nsns.countplot(app_train['OWN_CAR_AGE'])\n#plt.title('Count plot of Own car age')\nplt.xticks(rotation=90);","67c41c6b":"app_train['OWN_CAR_AGE'] = app_train['OWN_CAR_AGE'].astype('object')\napp_test['OWN_CAR_AGE'] = app_test['OWN_CAR_AGE'].astype('object')","d515dc98":"f = plt.figure(figsize= (14,6))\n\nax= f.add_subplot(231)\ntmp = app_train['FLAG_MOBIL'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('cool'))\nax.set_title('Mobile available')\n\nax = f.add_subplot(232)\ntmp = app_train['FLAG_EMP_PHONE'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('Wistia'))\nax.set_title('Mobile emp availablity')\n\nax = f.add_subplot(233)\ntmp = app_train['FLAG_WORK_PHONE'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('cool'))\nax.set_title('Work Phone availablity')\n\nax = f.add_subplot(234)\ntmp = app_train['FLAG_CONT_MOBILE'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('Wistia'))\nax.set_title('Mobile count')\n\nax = f.add_subplot(235)\ntmp = app_train['FLAG_PHONE'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('cool'))\nax.set_title('Phone availablity')\n\nax = f.add_subplot(236)\ntmp = app_train['FLAG_EMAIL'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('coolwarm'))\nax.set_title('Email availablity')\n\nplt.subplots_adjust(wspace=0.4)","66c3cafb":"# drop few columns\napp_train_col_drop.append('FLAG_MOBIL')\napp_train_col_drop.append('FLAG_CONT_MOBILE')\napp_train_col_drop.append('FLAG_EMAIL')\n\n# convert to category\napp_train[['FLAG_EMP_PHONE','FLAG_WORK_PHONE','FLAG_PHONE']] = app_train[[\n    'FLAG_EMP_PHONE','FLAG_WORK_PHONE','FLAG_PHONE']].astype('object')\napp_test[['FLAG_EMP_PHONE','FLAG_WORK_PHONE','FLAG_PHONE']] = app_test[[\n    'FLAG_EMP_PHONE','FLAG_WORK_PHONE','FLAG_PHONE']].astype('object')","881d791d":"plt.figure(figsize= (14,3))\nsns.countplot(app_train['CNT_FAM_MEMBERS'])\nplt.title('Count plot of Family members')\nplt.xticks(rotation=90);","e2c257b9":"# convert to category\napp_train['CNT_FAM_MEMBERS'] = app_train['CNT_FAM_MEMBERS'].astype('object')\napp_test['CNT_FAM_MEMBERS'] = app_test['CNT_FAM_MEMBERS'].astype('object')","21145ec6":"f = plt.figure(figsize= (14,3))\n\nax = f.add_subplot(121)\ntmp = app_train['REGION_RATING_CLIENT'].value_counts()\nax.pie(tmp.values, labels= tmp.index, autopct= '%1.2f%%',colors=sns.color_palette('coolwarm'))\nax.set_title('Region rating client')\n\nax = f.add_subplot(122)\ntmp = app_train['REGION_RATING_CLIENT_W_CITY'].value_counts()\nax.pie(tmp.values, labels= tmp.index, autopct= '%1.2f%%',colors=sns.color_palette('Spectral'))\nax.set_title('Region rating client with city');","74b33a61":"# convert to category\napp_train[['REGION_RATING_CLIENT','REGION_RATING_CLIENT_W_CITY']] = app_train[[\n    'REGION_RATING_CLIENT','REGION_RATING_CLIENT_W_CITY']].astype('object')\n\napp_test[['REGION_RATING_CLIENT','REGION_RATING_CLIENT_W_CITY']] = app_test[[\n    'REGION_RATING_CLIENT','REGION_RATING_CLIENT_W_CITY']].astype('object')","8f6cf06a":"plt.figure(figsize= (14,3))\nsns.countplot(app_train['WEEKDAY_APPR_PROCESS_START'],\n              order=['SUNDAY','MONDAY','TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY','SATURDAY', ])\n#plt.title('Count plot of Own car age')\nplt.xticks(rotation=90);","41bdb3d3":"# convert to category\napp_train['WEEKDAY_APPR_PROCESS_START'] = app_train['WEEKDAY_APPR_PROCESS_START'].astype('object')\napp_test['WEEKDAY_APPR_PROCESS_START'] = app_test['WEEKDAY_APPR_PROCESS_START'].astype('object')","8d2f7dcd":"plt.figure(figsize= (14,3))\nsns.countplot(app_train['HOUR_APPR_PROCESS_START'])\n#plt.title('Count plot of Own car age')\nplt.xticks(rotation=90);","20cf8ebd":"# convert to category\napp_train['HOUR_APPR_PROCESS_START'] = app_train['HOUR_APPR_PROCESS_START'].astype('object')\napp_test['HOUR_APPR_PROCESS_START'] = app_test['HOUR_APPR_PROCESS_START'].astype('object')","3650f5de":"f = plt.figure(figsize= (14,6))\n\nax= f.add_subplot(231)\ntmp = app_train['REG_REGION_NOT_LIVE_REGION'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('cool'))\nax.set_title('REG_REGION_NOT_LIVE_REGION')\n\nax = f.add_subplot(232)\ntmp = app_train['REG_REGION_NOT_WORK_REGION'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('Wistia'))\nax.set_title('REG_REGION_NOT_WORK_REGION')\n\nax = f.add_subplot(233)\ntmp = app_train['LIVE_REGION_NOT_WORK_REGION'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('cool'))\nax.set_title('LIVE_REGION_NOT_WORK_REGION')\n\nax = f.add_subplot(234)\ntmp = app_train['REG_CITY_NOT_LIVE_CITY'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('Wistia'))\nax.set_title('REG_CITY_NOT_LIVE_CITY')\n\nax = f.add_subplot(235)\ntmp = app_train['REG_CITY_NOT_WORK_CITY'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('cool'))\nax.set_title('REG_CITY_NOT_WORK_CITY')\n\nax = f.add_subplot(236)\ntmp = app_train['LIVE_CITY_NOT_WORK_CITY'].value_counts()\nplt.pie(tmp.values,labels=tmp.index,autopct='%1.1f%%',colors=sns.color_palette('coolwarm'))\nax.set_title('LIVE_CITY_NOT_WORK_CITY')\n\nplt.subplots_adjust(wspace=0.4)","a6522087":"# drop a feature\napp_train_col_drop.append('REG_REGION_NOT_LIVE_REGION')\n\n# convert to category\napp_train[['REG_REGION_NOT_WORK_REGION','LIVE_REGION_NOT_WORK_REGION', 'REG_CITY_NOT_LIVE_CITY',\n       'REG_CITY_NOT_WORK_CITY', 'LIVE_CITY_NOT_WORK_CITY']] = app_train[['REG_REGION_NOT_WORK_REGION','LIVE_REGION_NOT_WORK_REGION', 'REG_CITY_NOT_LIVE_CITY',\n       'REG_CITY_NOT_WORK_CITY', 'LIVE_CITY_NOT_WORK_CITY']].astype('object')\n\napp_test[['REG_REGION_NOT_WORK_REGION','LIVE_REGION_NOT_WORK_REGION', 'REG_CITY_NOT_LIVE_CITY',\n       'REG_CITY_NOT_WORK_CITY', 'LIVE_CITY_NOT_WORK_CITY']] = app_test[['REG_REGION_NOT_WORK_REGION','LIVE_REGION_NOT_WORK_REGION', 'REG_CITY_NOT_LIVE_CITY',\n       'REG_CITY_NOT_WORK_CITY', 'LIVE_CITY_NOT_WORK_CITY']].astype('object')","094bb095":"plt.figure(figsize=(14,8))\ntmp = app_train['ORGANIZATION_TYPE'].value_counts()[:20]\nsns.barplot(tmp.values, tmp.index, palette='coolwarm')\nplt.title('Organization type')\nfor i,v in enumerate(tmp.values):\n    plt.text(1,i,v,fontsize=8,color='k')","582c550a":"# XNA is missing value in dataset\napp_train['ORGANIZATION_TYPE'].replace('XNA',np.nan,inplace=True)\napp_test['ORGANIZATION_TYPE'].replace('XNA',np.nan,inplace=True)\n\n# convert to category\napp_train['ORGANIZATION_TYPE'] = app_train['ORGANIZATION_TYPE'].astype('object')\napp_test['ORGANIZATION_TYPE'] = app_test['ORGANIZATION_TYPE'].astype('object')","d31a2f49":"basic_details(app_train[['EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3']])","0e2f3e51":"#g = sns.pairplot(app_train,vars =['EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3'],\n#               palette='magma',hue='TARGET',kind='reg',aspect=1.5)\n","cdb4ee10":"F = plt.figure(figsize=(14,4))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3']].plot(kind='kde',ax=ax)\n\nax = F.add_subplot(122)\nplt.title('Information adout buliding where client lives')\napp_train[['EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3']].plot(kind='box',ax=ax)","6f3efcb9":"basic_details(app_test[['APARTMENTS_AVG','BASEMENTAREA_AVG', 'YEARS_BEGINEXPLUATATION_AVG','YEARS_BUILD_AVG', \n           'COMMONAREA_AVG', 'ELEVATORS_AVG','ENTRANCES_AVG', 'FLOORSMAX_AVG', 'FLOORSMIN_AVG', 'LANDAREA_AVG',\n       'LIVINGAPARTMENTS_AVG', 'LIVINGAREA_AVG','NONLIVINGAPARTMENTS_AVG', 'NONLIVINGAREA_AVG']]\n)","17f88bbc":"F = plt.figure(figsize=(14,4))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['APARTMENTS_AVG','BASEMENTAREA_AVG', 'YEARS_BEGINEXPLUATATION_AVG','YEARS_BUILD_AVG']].plot(kind='kde',ax=ax)\n\nax = F.add_subplot(122)\nplt.title('Information adout buliding where client lives')\napp_train[['APARTMENTS_AVG','BASEMENTAREA_AVG', 'YEARS_BEGINEXPLUATATION_AVG','YEARS_BUILD_AVG']].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","695a72dc":"F = plt.figure(figsize=(14,5))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['COMMONAREA_AVG', 'ELEVATORS_AVG','ENTRANCES_AVG',]].plot(kind='kde',ax=ax)\n\nax = F.add_subplot(122)\nplt.title('Information adout buliding where client lives')\napp_train[['COMMONAREA_AVG', 'ELEVATORS_AVG','ENTRANCES_AVG',]].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","883531ef":"F = plt.figure(figsize=(14,4))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['FLOORSMAX_AVG', 'FLOORSMIN_AVG', 'LANDAREA_AVG']].plot(kind='kde',ax=ax)\nax = F.add_subplot(122)\n\nplt.title('Information adout buliding where client lives')\napp_train[['FLOORSMAX_AVG', 'FLOORSMIN_AVG', 'LANDAREA_AVG']].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","0caf71d0":"F = plt.figure(figsize=(14,5))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['LIVINGAPARTMENTS_AVG', 'LIVINGAREA_AVG','NONLIVINGAPARTMENTS_AVG', 'NONLIVINGAREA_AVG']].plot(kind='kde',ax=ax)\n\nax = F.add_subplot(122)\nplt.title('Information adout buliding where client lives')\napp_train[['LIVINGAPARTMENTS_AVG', 'LIVINGAREA_AVG','NONLIVINGAPARTMENTS_AVG', 'NONLIVINGAREA_AVG']].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","33ce7489":"plt.figure(figsize= (14,8))\nplt.title('Correlation matrix')\nsns.heatmap(app_train[['APARTMENTS_AVG','BASEMENTAREA_AVG', 'YEARS_BEGINEXPLUATATION_AVG','YEARS_BUILD_AVG', \n           'COMMONAREA_AVG', 'ELEVATORS_AVG','ENTRANCES_AVG', 'FLOORSMAX_AVG', 'FLOORSMIN_AVG', 'LANDAREA_AVG',\n       'LIVINGAPARTMENTS_AVG', 'LIVINGAREA_AVG','NONLIVINGAPARTMENTS_AVG', 'NONLIVINGAREA_AVG']].corr(),\n           annot=True, cmap = 'coolwarm');","494dab77":"(app_train[['APARTMENTS_AVG','BASEMENTAREA_AVG', 'YEARS_BEGINEXPLUATATION_AVG','YEARS_BUILD_AVG', \n           'COMMONAREA_AVG', 'ELEVATORS_AVG','ENTRANCES_AVG', 'FLOORSMAX_AVG', 'FLOORSMIN_AVG', 'LANDAREA_AVG',\n       'LIVINGAPARTMENTS_AVG', 'LIVINGAREA_AVG','NONLIVINGAPARTMENTS_AVG', 'NONLIVINGAREA_AVG']]\n.plot(kind='box',figsize=(14,4)))\nplt.xticks(rotation=90);","7787fa9b":"F = plt.figure(figsize=(14,4))\nax = F.add_subplot(121)\napp_train[['APARTMENTS_MODE', 'BASEMENTAREA_MODE',\n       'YEARS_BEGINEXPLUATATION_MODE', 'YEARS_BUILD_MODE']].plot(kind='kde',ax=ax)\nax = F.add_subplot(122)\napp_train[['APARTMENTS_MODE', 'BASEMENTAREA_MODE',\n       'YEARS_BEGINEXPLUATATION_MODE', 'YEARS_BUILD_MODE']].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","1fd74024":"F = plt.figure(figsize=(14, 4))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['COMMONAREA_MODE', 'ELEVATORS_MODE', 'ENTRANCES_MODE',]].plot(kind='kde',ax=ax)\n\nax = F.add_subplot(122)\nplt.title('Information adout buliding where client lives')\napp_train[['COMMONAREA_MODE', 'ELEVATORS_MODE', 'ENTRANCES_MODE',]].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","9eefa9df":"F = plt.figure(figsize=(14, 4))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['COMMONAREA_MODE', 'ELEVATORS_MODE', 'ENTRANCES_MODE',]].plot(kind='kde',ax=ax)\n\nax = F.add_subplot(122)\nplt.title('Information adout buliding where client lives')\napp_train[['COMMONAREA_MODE', 'ELEVATORS_MODE', 'ENTRANCES_MODE',]].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","584a254f":"F = plt.figure(figsize=(14, 4))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['LIVINGAPARTMENTS_MODE', 'LIVINGAREA_MODE',\n       'NONLIVINGAPARTMENTS_MODE', 'NONLIVINGAREA_MODE']].plot(kind='kde',ax=ax)\n\nax = F.add_subplot(122)\nplt.title('Information adout buliding where client lives')\napp_train[['LIVINGAPARTMENTS_MODE', 'LIVINGAREA_MODE',\n       'NONLIVINGAPARTMENTS_MODE', 'NONLIVINGAREA_MODE']].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","43fd77e5":"plt.figure(figsize= (14,8))\nplt.title('Correlation matrix')\nsns.heatmap(app_train[['APARTMENTS_MODE', 'BASEMENTAREA_MODE','YEARS_BEGINEXPLUATATION_MODE', 'YEARS_BUILD_MODE',\n       'COMMONAREA_MODE', 'ELEVATORS_MODE', 'ENTRANCES_MODE','FLOORSMAX_MODE', 'FLOORSMIN_MODE', 'LANDAREA_MODE',\n       'LIVINGAPARTMENTS_MODE', 'LIVINGAREA_MODE', 'NONLIVINGAPARTMENTS_MODE', 'NONLIVINGAREA_MODE']].corr(),\n           annot=True, cmap = 'coolwarm');","50860520":"F = plt.figure(figsize=(14, 4))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['APARTMENTS_MEDI','BASEMENTAREA_MEDI', 'YEARS_BEGINEXPLUATATION_MEDI',\n       'YEARS_BUILD_MEDI',]].plot(kind='kde',ax=ax)\n\nax = F.add_subplot(122)\nplt.title('Information adout buliding where client lives')\napp_train[['APARTMENTS_MEDI','BASEMENTAREA_MEDI', 'YEARS_BEGINEXPLUATATION_MEDI',\n       'YEARS_BUILD_MEDI']].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","d95a0e9b":"F = plt.figure(figsize=(14, 4))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['COMMONAREA_MEDI', 'ELEVATORS_MEDI', 'ENTRANCES_MEDI',]].plot(kind='kde',ax=ax)\n\nax = F.add_subplot(122)\nplt.title('Information adout buliding where client lives')\napp_train[['COMMONAREA_MEDI', 'ELEVATORS_MEDI', 'ENTRANCES_MEDI']].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","48e435ed":"F = plt.figure(figsize=(14, 4))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['FLOORSMAX_MEDI', 'FLOORSMIN_MEDI','LANDAREA_MEDI',]].plot(kind='kde',ax=ax)\n\nax = F.add_subplot(122)\nplt.title('Information adout buliding where client lives')\napp_train[['FLOORSMAX_MEDI', 'FLOORSMIN_MEDI','LANDAREA_MEDI',]].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","95b1e4df":"F = plt.figure(figsize=(14, 4))\nax = F.add_subplot(121)\nplt.title('Information adout buliding where client lives')\napp_train[['LIVINGAPARTMENTS_MEDI', 'LIVINGAREA_MEDI',\n       'NONLIVINGAPARTMENTS_MEDI', 'NONLIVINGAREA_MEDI']].plot(kind='kde',ax=ax)\n\nax = F.add_subplot(122)\nplt.title('Information adout buliding where client lives')\napp_train[['LIVINGAPARTMENTS_MEDI', 'LIVINGAREA_MEDI',\n       'NONLIVINGAPARTMENTS_MEDI', 'NONLIVINGAREA_MEDI']].plot(kind='box',ax=ax)\nplt.xticks(rotation=90);","d62359ca":"plt.figure(figsize= (14,8))\nplt.title('Correlation matrix')\nsns.heatmap(app_train[['APARTMENTS_MEDI','BASEMENTAREA_MEDI', 'YEARS_BEGINEXPLUATATION_MEDI',\n       'YEARS_BUILD_MEDI', 'COMMONAREA_MEDI', 'ELEVATORS_MEDI','ENTRANCES_MEDI', \n        'FLOORSMAX_MEDI', 'FLOORSMIN_MEDI','LANDAREA_MEDI', 'LIVINGAPARTMENTS_MEDI', \n        'LIVINGAREA_MEDI', 'NONLIVINGAPARTMENTS_MEDI', 'NONLIVINGAREA_MEDI',]].corr(),\n           annot=True, cmap = 'coolwarm');","afcb5715":"dist_box__plot_with_log(app_train,column='TOTALAREA_MODE',ncols=2)","9c272fbd":"basic_details(app_train[['FONDKAPREMONT_MODE', 'HOUSETYPE_MODE',\n       'WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE']])","e0e9d2ae":"f = plt.figure(figsize= (14,8))\nax = f.add_subplot(221)\nsns.countplot(app_train['FONDKAPREMONT_MODE'],ax=ax)\nplt.xticks(rotation=90)\n#plt.title('FONDKAPREMONT_MODE')\n\nax = f.add_subplot(222)\nsns.countplot(app_train['HOUSETYPE_MODE'],ax=ax)\nplt.xticks(rotation=90)\n#plt.title('HOUSETYPE_MODE')\n\nax = f.add_subplot(223)\nsns.countplot(app_train['WALLSMATERIAL_MODE'],ax=ax)\nplt.xticks(rotation=90)\n#plt.title('WALLSMATERIAL_MODE')\n\nax = f.add_subplot(224)\nsns.countplot(app_train['EMERGENCYSTATE_MODE'],ax=ax)\nplt.xticks(rotation=90)\n#plt.title('EMERGENCYSTATE_MODE')\n\nplt.tight_layout()","b6abf222":"app_train[['FONDKAPREMONT_MODE', 'HOUSETYPE_MODE', 'WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE']] = app_train[['FONDKAPREMONT_MODE', 'HOUSETYPE_MODE',\n       'WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE']].astype('object')\n\napp_test[['FONDKAPREMONT_MODE', 'HOUSETYPE_MODE', 'WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE']] = app_test[['FONDKAPREMONT_MODE', 'HOUSETYPE_MODE',\n       'WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE']].astype('object')","f14b2b69":"basic_details(app_train[['OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE',\n       'OBS_60_CNT_SOCIAL_CIRCLE', 'DEF_60_CNT_SOCIAL_CIRCLE','DAYS_LAST_PHONE_CHANGE',]])","cc17739d":"f = plt.figure(figsize= (14,8))\nax = f.add_subplot(221)\nsns.countplot(app_train['OBS_30_CNT_SOCIAL_CIRCLE'], ax=ax)\n\nax = f.add_subplot(222)\nsns.countplot(app_train['DEF_30_CNT_SOCIAL_CIRCLE'], ax=ax)\n\nax = f.add_subplot(223)\nsns.countplot(app_train['OBS_60_CNT_SOCIAL_CIRCLE'], ax=ax)\n\nax = f.add_subplot(224)\nsns.countplot(app_train['DEF_60_CNT_SOCIAL_CIRCLE'], ax=ax)","5d0a7ea2":"# convert to category\napp_train[['OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE',\n       'OBS_60_CNT_SOCIAL_CIRCLE', 'DEF_60_CNT_SOCIAL_CIRCLE',]] = app_train[['OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE',\n       'OBS_60_CNT_SOCIAL_CIRCLE', 'DEF_60_CNT_SOCIAL_CIRCLE',]].astype('object')\n\napp_test[['OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE',\n       'OBS_60_CNT_SOCIAL_CIRCLE', 'DEF_60_CNT_SOCIAL_CIRCLE',]] = app_test[['OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE',\n       'OBS_60_CNT_SOCIAL_CIRCLE', 'DEF_60_CNT_SOCIAL_CIRCLE',]].astype('object')","5d58e303":"dist_box__plot_with_log(app_train,column='DAYS_LAST_PHONE_CHANGE',ncols=2)","2a4e2e01":"flag_col = ['FLAG_DOCUMENT_2', 'FLAG_DOCUMENT_3','FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_5', 'FLAG_DOCUMENT_6',\n       'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_8', 'FLAG_DOCUMENT_9', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_11',\n        'FLAG_DOCUMENT_12','FLAG_DOCUMENT_13', 'FLAG_DOCUMENT_14', 'FLAG_DOCUMENT_15','FLAG_DOCUMENT_16', \n        'FLAG_DOCUMENT_17', 'FLAG_DOCUMENT_18','FLAG_DOCUMENT_19', 'FLAG_DOCUMENT_20', 'FLAG_DOCUMENT_21',]\n\nfig, ax = plt.subplots(4,5, figsize=(14,8),sharey=False)\naxs = ax.ravel()\nfor i,c in enumerate(flag_col):\n    sns.countplot(app_train[c],ax = axs[i],palette='cool')\n    #axs[i].set_title(c)\n    axs[i].set_ylabel('')\nplt.tight_layout()","f15f38dd":"# we will keep FLAG_DOCUMENT_3,FLAG_DOCUMENT_6, FLAG_DOCUMENT_8\napp_train[['FLAG_DOCUMENT_2', 'FLAG_DOCUMENT_3','FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_5', 'FLAG_DOCUMENT_6',\n       'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_8', 'FLAG_DOCUMENT_9', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_11',\n        'FLAG_DOCUMENT_12','FLAG_DOCUMENT_13', 'FLAG_DOCUMENT_14', 'FLAG_DOCUMENT_15','FLAG_DOCUMENT_16', \n        'FLAG_DOCUMENT_17', 'FLAG_DOCUMENT_18','FLAG_DOCUMENT_19', 'FLAG_DOCUMENT_20', 'FLAG_DOCUMENT_21',]]  = app_train[['FLAG_DOCUMENT_2', 'FLAG_DOCUMENT_3','FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_5', 'FLAG_DOCUMENT_6',\n       'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_8', 'FLAG_DOCUMENT_9', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_11',\n        'FLAG_DOCUMENT_12','FLAG_DOCUMENT_13', 'FLAG_DOCUMENT_14', 'FLAG_DOCUMENT_15','FLAG_DOCUMENT_16', \n        'FLAG_DOCUMENT_17', 'FLAG_DOCUMENT_18','FLAG_DOCUMENT_19', 'FLAG_DOCUMENT_20', 'FLAG_DOCUMENT_21',]].astype('object')\n\napp_test[['FLAG_DOCUMENT_2', 'FLAG_DOCUMENT_3','FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_5', 'FLAG_DOCUMENT_6',\n       'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_8', 'FLAG_DOCUMENT_9', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_11',\n        'FLAG_DOCUMENT_12','FLAG_DOCUMENT_13', 'FLAG_DOCUMENT_14', 'FLAG_DOCUMENT_15','FLAG_DOCUMENT_16', \n        'FLAG_DOCUMENT_17', 'FLAG_DOCUMENT_18','FLAG_DOCUMENT_19', 'FLAG_DOCUMENT_20', 'FLAG_DOCUMENT_21',]]  = app_test[['FLAG_DOCUMENT_2', 'FLAG_DOCUMENT_3','FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_5', 'FLAG_DOCUMENT_6',\n       'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_8', 'FLAG_DOCUMENT_9', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_11',\n        'FLAG_DOCUMENT_12','FLAG_DOCUMENT_13', 'FLAG_DOCUMENT_14', 'FLAG_DOCUMENT_15','FLAG_DOCUMENT_16', \n        'FLAG_DOCUMENT_17', 'FLAG_DOCUMENT_18','FLAG_DOCUMENT_19', 'FLAG_DOCUMENT_20', 'FLAG_DOCUMENT_21',]].astype('object')\n\n\napp_train_col_drop.extend(['FLAG_DOCUMENT_2', 'FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_5', 'FLAG_DOCUMENT_7',  'FLAG_DOCUMENT_9',\n        'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_11', 'FLAG_DOCUMENT_12','FLAG_DOCUMENT_13', 'FLAG_DOCUMENT_14', \n        'FLAG_DOCUMENT_15', 'FLAG_DOCUMENT_16', 'FLAG_DOCUMENT_17', 'FLAG_DOCUMENT_18',\n       'FLAG_DOCUMENT_19', 'FLAG_DOCUMENT_20', 'FLAG_DOCUMENT_21'])","0b0b2221":"basic_details(app_train[['AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_DAY',\n       'AMT_REQ_CREDIT_BUREAU_WEEK', 'AMT_REQ_CREDIT_BUREAU_MON',\n       'AMT_REQ_CREDIT_BUREAU_QRT', 'AMT_REQ_CREDIT_BUREAU_YEAR']])","a1422cab":"flag_col = ['AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_DAY',\n       'AMT_REQ_CREDIT_BUREAU_WEEK', 'AMT_REQ_CREDIT_BUREAU_MON',\n       'AMT_REQ_CREDIT_BUREAU_QRT', 'AMT_REQ_CREDIT_BUREAU_YEAR',]\n\nfig, ax = plt.subplots(2,3, figsize=(14,6),sharey=False)\naxs = ax.ravel()\nfor i,c in enumerate(flag_col):\n    sns.countplot(app_train[c],ax = axs[i],palette='magma')\n    #axs[i].set_title(c)\n    axs[i].set_ylabel('')\nplt.tight_layout()","116fcb61":"app_train[['AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_DAY','AMT_REQ_CREDIT_BUREAU_WEEK', \n    'AMT_REQ_CREDIT_BUREAU_MON','AMT_REQ_CREDIT_BUREAU_QRT', 'AMT_REQ_CREDIT_BUREAU_YEAR',]] = app_train[['AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_DAY','AMT_REQ_CREDIT_BUREAU_WEEK', \n    'AMT_REQ_CREDIT_BUREAU_MON','AMT_REQ_CREDIT_BUREAU_QRT', 'AMT_REQ_CREDIT_BUREAU_YEAR',]].astype('object')\n\napp_test[['AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_DAY','AMT_REQ_CREDIT_BUREAU_WEEK',\n    'AMT_REQ_CREDIT_BUREAU_MON','AMT_REQ_CREDIT_BUREAU_QRT', 'AMT_REQ_CREDIT_BUREAU_YEAR',]] = app_test[['AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_DAY','AMT_REQ_CREDIT_BUREAU_WEEK', \n    'AMT_REQ_CREDIT_BUREAU_MON','AMT_REQ_CREDIT_BUREAU_QRT', 'AMT_REQ_CREDIT_BUREAU_YEAR',]].astype('object')\n","4d26378a":"gc.collect()","04a40393":"#app_train['is_train'] = 'Yes'\n#app_test['is_train'] = 'No'\ntrain_test = pd.concat([app_train,app_test],axis=0)\nprint('Number of rows and columns in train dataset: ',app_train.shape)\nprint('Number of rows and columns in test dataset: ',app_test.shape)\nprint('Number of rows and columns in train + test dataset: ',train_test.shape)\ngc.collect()","99df6874":"# drop columns least significant\ntrain_test = train_test.drop(list(set(app_train_col_drop)), axis=1)\n\ncategorical_col = train_test.select_dtypes('object').columns\nnumeric_col = train_test.select_dtypes('number').columns\n\n# Int type\nnumeric_col = numeric_col.drop('TARGET') # Our dependent variable\ngc.collect()","7e580e2d":"# Check basic details\nbasic_details(train_test[categorical_col])","7f01e311":"# Check missing value\nbasic_details(train_test[numeric_col])","847e20ff":"# Replace XNA, XPA as np.nan\ntrain_test = replace_XNA_XAP(train_test)\n# Replace 365243 with missing value\n#train_test['DAYS_EMPLOYED'].replace({365243:np.nan}, inplace=True)\n\n# Fill missing value \n#missing_value_fill(train_test, categorical_col, mean_or_mode='mode')\n#missing_value_fill(train_test, numeric_col, mean_or_mode='mode') \n\n# Binary encoding\ntrain_test,_ = binary_encoding(train_test, categorical_col)\n\n# One hot encoding\ntrain_test,_ = one_hot_encoding(train_test,categorical_col,nan_as_category=True)\n#train_test,cat_cols = one_hot_encoder(train_test,nan_as_category=True)\n\n#Descriptive statistics feature\ndescriptive_stat_feat(train_test,numeric_col)\ndel app_train,app_test\n\n# Reduce memory usage train_test dataset\nreduce_memory_usage(train_test)\ngc.collect()","54ff24ef":"print('Number of rows and columns in bureau dataset: ',bureau_balance.shape)\nbureau_balance.head()","29af762d":"basic_details(bureau_balance)","f690c44b":"box_dist_plot_with_trans(bureau_balance,column='MONTHS_BALANCE',ncols=2)","eceb4614":"sns.countplot(bureau_balance['STATUS'])","59d35d83":"# Replace XNA, XAP as np.nan\nbureau_balance = replace_XNA_XAP(bureau_balance)\n\n# binary encoding\nbb_bin =[]\n#bureau_balance,bb_bin = binary_encoding(bureau_balance,['STATUS'])\n\n# one hot encoding\nbureau_balance, bb_cat = one_hot_encoding(bureau_balance,['STATUS'],nan_as_category=False)\n\n# aggregate\nbb_aggregations = {'MONTHS_BALANCE':['min','max','mean']}\n\nfor col in bb_cat+bb_bin:\n    bb_aggregations[col] =['sum','mean']\n\nbb_agg = bureau_balance.groupby('SK_ID_BUREAU').agg(bb_aggregations)\nbb_agg.columns = [e[0]+ \"_\" +e[1].upper() for e in bb_agg.columns.tolist()]\nbb_agg.head(2)","04372735":"print('Number of rows and columns in bureau dataset: ',bureau.shape)\nbureau.head()","5b4559b8":"basic_details(bureau)","790cd31d":"bureau_drop_col = [] # drop columns list\nbureau.columns","e7eb8c45":"f = plt.figure(figsize= (14,4))\nax = f.add_subplot(121)\nsns.countplot(bureau['CREDIT_ACTIVE'], ax =ax)\n\nax = f.add_subplot(122)\nsns.countplot(bureau['CREDIT_CURRENCY'], ax =ax)","f05b8ee1":"bureau.columns","4e374e3c":"bureau[['DAYS_CREDIT', 'CREDIT_DAY_OVERDUE','DAYS_CREDIT_ENDDATE','DAYS_ENDDATE_FACT']].describe()","69d98d05":"box_dist_plot_with_trans(bureau,column='DAYS_CREDIT',)","21d4ec78":"box_dist_plot_with_trans(bureau,column='CREDIT_DAY_OVERDUE',Trans_func='log1p',ncols=3)","3f349766":"# Drop credit day overdue\n#bureau_drop_col.append('CREDIT_DAY_OVERDUE')","2acd73f0":"box_dist_plot_with_trans(bureau,column='DAYS_CREDIT_ENDDATE',ncols=2)","9c8a3ce0":"box_dist_plot_with_trans(bureau,column='DAYS_ENDDATE_FACT',ncols=2)","91864768":"box_dist_plot_with_trans(bureau,column='DAYS_CREDIT_UPDATE',ncols=2)","d18e865e":"f = plt.figure(figsize= (14,4))\nax = f.add_subplot(121)\nsns.countplot(bureau['CREDIT_TYPE'],palette='rainbow', ax = ax)\nplt.xticks(rotation=90)\n\nax = f.add_subplot(122)\nsns.countplot(bureau['CNT_CREDIT_PROLONG'])","c17e1201":"bureau[['CREDIT_TYPE','CNT_CREDIT_PROLONG']] = bureau[['CREDIT_TYPE','CNT_CREDIT_PROLONG']].astype('object')\n\n# Drop credit day overdue\n#bureau_drop_col.append('CNT_CREDIT_PROLONG')","b066a281":"bureau[['AMT_CREDIT_MAX_OVERDUE','AMT_CREDIT_SUM', 'AMT_CREDIT_SUM_DEBT', \n        'AMT_CREDIT_SUM_LIMIT', 'AMT_CREDIT_SUM_OVERDUE', 'AMT_ANNUITY']].describe()","566f85f8":"box_dist_plot_with_trans(bureau,column='AMT_CREDIT_MAX_OVERDUE',ncols=3,Trans_func='log1p')","3037975d":"box_dist_plot_with_trans(bureau,column='AMT_CREDIT_SUM',ncols=3,Trans_func='log1p')","9bacc2e9":"# apply lo(x+1) Amount credit sum\nbureau['AMT_CREDIT_SUM'] = bureau['AMT_CREDIT_SUM'].apply(np.log1p)","6e5fe131":"box_dist_plot_with_trans(bureau,column='AMT_CREDIT_SUM_DEBT',ncols=2,Trans_func=None)","379d45e8":"# apply\nbureau['AMT_CREDIT_SUM_DEBT'] = np.log1p(bureau['AMT_CREDIT_SUM_DEBT'])","3f022b24":"box_dist_plot_with_trans(bureau,column='AMT_CREDIT_SUM_LIMIT',ncols=2)","1989cb4c":"box_dist_plot_with_trans(bureau,column='AMT_CREDIT_SUM_OVERDUE',ncols=3,Trans_func='log1p')","37829611":"box_dist_plot_with_trans(bureau,column='AMT_ANNUITY',ncols=3,Trans_func='log1p')","cc302c77":"# apply log\nbureau['AMT_ANNUITY'] = np.log1p(bureau['AMT_ANNUITY'])","d608c451":"plt.figure(figsize= (14,6))\nsns.heatmap(bureau[['AMT_CREDIT_MAX_OVERDUE', 'CNT_CREDIT_PROLONG','AMT_CREDIT_SUM', 'AMT_CREDIT_SUM_DEBT', \n        'AMT_CREDIT_SUM_LIMIT', 'AMT_CREDIT_SUM_OVERDUE', 'AMT_ANNUITY']].corr(), \n            cmap='viridis', annot=True)","cf22c3cf":"# drop features\nbureau = bureau.drop(bureau_drop_col, axis=1)\n\n# Replace XNA XAP\nbureau = replace_XNA_XAP(bureau)\n\n# columns segrigation\nbureau_cat_col = bureau.select_dtypes('object').columns\nbureau_numeric_col = bureau.select_dtypes('number').columns\nbureau_numeric_col = bureau_numeric_col.drop(['SK_ID_CURR', 'SK_ID_BUREAU'])\n\n## binary encoding\nbureau_bin =[]\nbureau, bureau_bin = binary_encoding(bureau, bureau_cat_col)\n\n### one hot encoding\nbureau,bureau_cat = one_hot_encoding(bureau,bureau_cat_col,nan_as_category=False)\n\n# join bb_agg\nbureau = bureau.join(bb_agg,how='left',on ='SK_ID_BUREAU')\nbureau.drop('SK_ID_BUREAU',axis = 1,inplace=True)\n\n# bureau and bureau_balance numeric feature\nnum_aggregators = {\n    'DAYS_CREDIT': ['min','max','var'],\n    'DAYS_CREDIT_ENDDATE': ['min','max','mean'],\n    'DAYS_ENDDATE_FACT': ['mean'],\n    'CREDIT_DAY_OVERDUE':['max','mean'],\n    'AMT_CREDIT_SUM':['mean','sum'],\n    'AMT_CREDIT_SUM_DEBT':['sum','max','mean'],\n    'AMT_CREDIT_SUM_LIMIT':['sum','mean'],\n    'AMT_CREDIT_SUM_OVERDUE':['mean'],\n    'AMT_ANNUITY':['mean','max'],\n    'MONTHS_BALANCE_MIN':['min'],\n    'MONTHS_BALANCE_MAX':['max'],\n    'MONTHS_BALANCE_MEAN':['mean']\n}\n\n#bureau and bueau_balance categorical feature\ncat_aggregates = {}\nfor col in bureau_cat+bureau_bin:\n    cat_aggregates[col] = ['sum','mean']\nfor col in bb_cat:\n    cat_aggregates[col+'_MEAN'] = ['mean']\n    cat_aggregates[col+'_SUM'] = ['sum']\n\nbureau_agg = bureau.groupby('SK_ID_CURR').agg({**num_aggregators, **cat_aggregates})\nbureau_agg.columns = pd.Index(['BUREAU_'+e[0]+'_'+e[1].upper() for e in bureau_agg.columns.tolist()])\n\n# Bureau active credict using numerical columns\n# Credit active status active\n# Has one hot encoding removed active column so closed ==0 means active\nbureau_agg = bureau_agg.reset_index()\nactive = bureau[bureau['CREDIT_ACTIVE_Closed'] ==0] \nactive_agg = active.groupby('SK_ID_CURR').agg(num_aggregators)\nactive_agg.columns = pd.Index(['ACTIVE_'+ e[0]+'_'+e[1].upper() for e in active_agg.columns.tolist()])\nbureau_agg = bureau_agg.join(active_agg, on ='SK_ID_CURR', how='left')\ndel active, active_agg\n\n# Credit active status closed\nclosed = bureau[bureau['CREDIT_ACTIVE_Closed'] ==1]\nclosed_agg = bureau.groupby('SK_ID_CURR').agg(num_aggregators)\nclosed_agg.columns = pd.Index(['CLOSED_'+ e[0]+'_'+e[1].upper()for e in closed_agg.columns.tolist()])\nbureau_agg = bureau_agg.join(closed_agg, on = 'SK_ID_CURR', how='left')\ndel closed_agg, closed\ndel bureau,bureau_balance,bb_agg\ngc.collect()\nbureau_agg = bureau_agg.set_index('SK_ID_CURR')\nbureau_agg.head()","c83a544a":"reduce_memory_usage(bureau_agg)","6d06ef44":"POS_CASH_balance.head()","17ce5e5f":"basic_details(POS_CASH_balance)","349e1e08":"box_dist_plot_with_trans(POS_CASH_balance,column='MONTHS_BALANCE',)","de597187":"box_dist_plot_with_trans(POS_CASH_balance,column='CNT_INSTALMENT',)","c99b6a1d":"box_dist_plot_with_trans(POS_CASH_balance, column='CNT_INSTALMENT_FUTURE', )","94c9f735":"sns.countplot(POS_CASH_balance['NAME_CONTRACT_STATUS'])","03204638":"box_dist_plot_with_trans(POS_CASH_balance, 'SK_DPD')","385a4797":"box_dist_plot_with_trans(POS_CASH_balance,'SK_DPD_DEF')","c0fe2582":"# Replace XNA, XAP with np.nan\nPOS_CASH_balance = replace_XNA_XAP(POS_CASH_balance)\n# Binary encoding\npos_bin =[]\nPOS_CASH_balance,pos_bin = binary_encoding(POS_CASH_balance,columns=['NAME_CONTRACT_STATUS'])\n\n# One hot encoding\nPOS_CASH_balance,pos_cat = one_hot_encoding(POS_CASH_balance,columns=['NAME_CONTRACT_STATUS'], nan_as_category=True)\n\n# Aggregate\npos_aggregate ={\n    'MONTHS_BALANCE':['mean','min','max'],\n    'CNT_INSTALMENT':['mean','min','max'],\n    'CNT_INSTALMENT_FUTURE':['mean','min','max'],\n    'SK_DPD':['min','max','mean'],\n    'SK_DPD_DEF':['min','max','mean']\n}\nfor col in pos_cat+pos_bin:\n    pos_aggregate[col] =['sum','mean']\npos_agg = POS_CASH_balance.groupby('SK_ID_CURR').agg(pos_aggregate)\npos_agg.columns = pd.Index(['POS_'+ e[0]+ '_'+ e[1].upper() for e in pos_agg.columns.tolist()])\n# Count pos transcations\npos_agg['POS_COUNT'] = POS_CASH_balance.groupby('SK_ID_CURR').size()\ndel POS_CASH_balance\npos_agg.head(2)","15714146":"gc.collect()\nreduce_memory_usage(pos_agg)","1e33df4b":"print('Number of rows and columns in dataset:',credit_card_balance.shape)\ncredit_card_balance.head()","857856e9":"basic_details(credit_card_balance)","b8c02945":"credit_card_balance.columns","bf0a62b4":"box_dist_plot_with_trans(credit_card_balance, 'MONTHS_BALANCE')","14da228e":"box_dist_plot_with_trans(credit_card_balance,'AMT_BALANCE')","44caa85b":"box_dist_plot_with_trans(credit_card_balance, 'AMT_DRAWINGS_CURRENT')","6a353e10":"box_dist_plot_with_trans(credit_card_balance, 'AMT_CREDIT_LIMIT_ACTUAL',ncols=3,Trans_func='sqrt')","c67bdf25":"# apply sqrt\ncredit_card_balance['AMT_CREDIT_LIMIT_ACTUAL'] = np.sqrt(credit_card_balance['AMT_CREDIT_LIMIT_ACTUAL'])","7337e85e":"box_dist_plot_with_trans(credit_card_balance, 'AMT_DRAWINGS_OTHER_CURRENT', ncols=3, Trans_func='log1p')","54cf3603":"box_dist_plot_with_trans(credit_card_balance, 'AMT_DRAWINGS_ATM_CURRENT', ncols=2)","4cec531d":"box_dist_plot_with_trans(credit_card_balance, 'AMT_DRAWINGS_POS_CURRENT', ncols=2,)","13839680":"box_dist_plot_with_trans(credit_card_balance, 'AMT_INST_MIN_REGULARITY')","29769f27":"box_dist_plot_with_trans(credit_card_balance, 'AMT_PAYMENT_CURRENT',)","8c2259b4":"box_dist_plot_with_trans(credit_card_balance, 'AMT_RECEIVABLE_PRINCIPAL')","db592b06":"box_dist_plot_with_trans(credit_card_balance, 'AMT_RECIVABLE')","2e1a600e":"box_dist_plot_with_trans(credit_card_balance, 'AMT_TOTAL_RECEIVABLE', )","6d1c6d97":"box_dist_plot_with_trans(credit_card_balance, 'CNT_DRAWINGS_CURRENT', ncols=3, Trans_func='sqrt')","ed8d5752":"credit_card_balance['CNT_DRAWINGS_CURRENT'] = np.sqrt(credit_card_balance['CNT_DRAWINGS_CURRENT'])","838fff3f":"box_dist_plot_with_trans(credit_card_balance, 'CNT_DRAWINGS_ATM_CURRENT',)","f0076a9b":"plt.figure(figsize=(14,4))\nsns.countplot(credit_card_balance['CNT_DRAWINGS_OTHER_CURRENT'],palette='magma')","478c8c67":"# convert ot category\ncredit_card_balance['CNT_DRAWINGS_OTHER_CURRENT'] = credit_card_balance['CNT_DRAWINGS_OTHER_CURRENT'].astype('object')","f5637000":"box_dist_plot_with_trans(credit_card_balance, 'CNT_DRAWINGS_POS_CURRENT', Trans_func='sqrt', ncols=3)","678aaf46":"# Apply square root\ncredit_card_balance['CNT_DRAWINGS_POS_CURRENT'] = np.sqrt(credit_card_balance['CNT_DRAWINGS_POS_CURRENT'])","505b2944":"box_dist_plot_with_trans(credit_card_balance, 'CNT_INSTALMENT_MATURE_CUM')","3add1b7e":"# Apply square root\ncredit_card_balance['CNT_INS'] = np.sqrt(credit_card_balance['CNT_INSTALMENT_MATURE_CUM'])","a8457441":"box_dist_plot_with_trans(credit_card_balance, 'SK_DPD')","d20cf7ee":"box_dist_plot_with_trans(credit_card_balance, 'SK_DPD_DEF')","d4e5bcad":"plt.figure(figsize=(14,4))\nsns.countplot(credit_card_balance['NAME_CONTRACT_STATUS'],palette='magma')","f7086f35":"credit_card_balance['NAME_CONTRACT_STATUS'] = credit_card_balance['NAME_CONTRACT_STATUS'].astype('object')","91129396":"# Replace XNA, XAP\ncredit_card_balance = replace_XNA_XAP(credit_card_balance)\n\n# Column segrigation\ncredit_object_col = credit_card_balance.select_dtypes('object').columns\n\n# Binary encoding \ncredit_bin =[]\ncredit_card_balance,credit_bin = binary_encoding(credit_card_balance,credit_object_col)\n\n## One hot encoding\ncredit_card_balance,credit_cat = one_hot_encoding(credit_card_balance,credit_object_col, nan_as_category=False)\n\n# General aggregation\ncredit_aggregation = {\n    'MONTHS_BALANCE':['mean','min','max'],\n    'AMT_BALANCE':['mean','min'],\n    'AMT_CREDIT_LIMIT_ACTUAL':['mean','min'], \n    'AMT_DRAWINGS_ATM_CURRENT':['mean','min','max'],\n    'AMT_DRAWINGS_CURRENT':['mean','min','max'], \n    'AMT_DRAWINGS_OTHER_CURRENT':['mean','min','max'],\n    'AMT_DRAWINGS_POS_CURRENT':['mean','min','max'], \n    'AMT_INST_MIN_REGULARITY':['mean','min','max'],\n    'AMT_PAYMENT_CURRENT':['mean','min','max'], \n    'AMT_PAYMENT_TOTAL_CURRENT':['mean','min','max'],\n    'AMT_RECEIVABLE_PRINCIPAL':['mean','min','max'], \n    'AMT_RECIVABLE':['mean','min','max'], \n    'AMT_TOTAL_RECEIVABLE':['mean','min','max'],\n    'CNT_DRAWINGS_ATM_CURRENT':['mean','min','max'], \n    'CNT_DRAWINGS_CURRENT':['mean','min','max'],\n    'CNT_DRAWINGS_POS_CURRENT':['mean','min','max'],\n    'CNT_INSTALMENT_MATURE_CUM':['mean','min','max'], \n    'SK_DPD':['mean','min','max'],\n    'SK_DPD_DEF':['mean','min','max'],\n    }\n\nfor col in credit_cat+credit_bin:\n    credit_aggregation[col] = ['mean','sum']\n\n#Credit_card_balance.drop('SK_ID_PREV',axis=1,inplace=True)\ncredit_agg = credit_card_balance.groupby('SK_ID_CURR').agg(credit_aggregation)\ncredit_agg.columns = pd.Index(['CREDIT_'+e[0]+'_'+ e[1].upper() for e in credit_agg.columns.tolist()])\n# Count credit card transactions\ncredit_agg['CREDIT_COUNT'] = credit_card_balance.groupby('SK_ID_CURR').size()\ndel credit_card_balance\n\ncredit_agg.head(2)","2f34a98a":"previous_application.head()","384b929e":"prev_cat_col = previous_application.select_dtypes(include='object').columns\nint_col = [i for i in previous_application.columns.values if i not in prev_cat_col]","80cb9b29":"basic_details(previous_application[prev_cat_col])","09371934":"basic_details(previous_application[int_col])","59c7882e":"previous_application.columns","5adc1c02":"f = plt.figure(figsize=(14,4))\nax = f.add_subplot(121)\nsns.countplot(previous_application['NAME_CONTRACT_TYPE'], ax= ax)","02d77573":"box_dist_plot_with_trans(previous_application,'AMT_ANNUITY', ncols=3,Trans_func='log1p')","d29be46d":"# apply log on both side\nprevious_application['AMT_ANNUITY'] = np.log1p(previous_application['AMT_ANNUITY'])","3ff9bb09":"box_dist_plot_with_trans(previous_application,'AMT_APPLICATION',Trans_func='sqrt', ncols=3)","74fdb607":"# apply sqrt\nprevious_application['AMT_APPLICATION'] = np.sqrt(previous_application['AMT_APPLICATION'])","27284a08":"box_dist_plot_with_trans(previous_application, 'AMT_CREDIT', ncols=3,Trans_func='sqrt')","d0804d19":"# apply sqrt\nprevious_application['AMT_CREDIT'] = np.sqrt(previous_application['AMT_CREDIT'])","be36e76d":"box_dist_plot_with_trans(previous_application, 'AMT_DOWN_PAYMENT', ncols=3,Trans_func='log1p')","29a179d8":"# apply log1p\nprevious_application['AMT_DOWN_PAYMENT'] = np.log1p(previous_application['AMT_DOWN_PAYMENT'])","e9ea4ca9":"box_dist_plot_with_trans(previous_application, 'AMT_GOODS_PRICE',ncols=3,Trans_func='log1p')","69307d70":"# apply sqrt\nprevious_application['AMT_GOODS_PRICE'] = np.log1p(previous_application['AMT_GOODS_PRICE'])","770cf132":"f = plt.figure(figsize=(14,8))\nax = f.add_subplot(221)\nsns.countplot(previous_application['WEEKDAY_APPR_PROCESS_START'], ax =ax)\nplt.xticks(rotation=90)\n\nax = f.add_subplot(222)\nsns.countplot(previous_application['HOUR_APPR_PROCESS_START'], ax =ax)\n\nax = f.add_subplot(223)\nsns.countplot(previous_application['FLAG_LAST_APPL_PER_CONTRACT'], ax =ax)\n\nax = f.add_subplot(224)\nsns.countplot(previous_application['NFLAG_INSURED_ON_APPROVAL'], ax =ax)\n\nplt.tight_layout()","cb359c61":"# convert to object\nprevious_application[['HOUR_APPR_PROCESS_START','NFLAG_INSURED_ON_APPROVAL']] = previous_application[['HOUR_APPR_PROCESS_START','NFLAG_INSURED_ON_APPROVAL']].astype('object')","ffe9070b":"box_dist_plot_with_trans(previous_application, 'RATE_DOWN_PAYMENT')","3f5c36ef":"box_dist_plot_with_trans(previous_application, 'RATE_INTEREST_PRIMARY',)","dd726f1a":"box_dist_plot_with_trans(previous_application, 'RATE_INTEREST_PRIVILEGED')","ea064c7f":"box_dist_plot_with_trans(previous_application,'DAYS_DECISION')","d8bac4da":"f = plt.figure(figsize=(14,8))\nax = f.add_subplot(221)\nsns.countplot(previous_application['CODE_REJECT_REASON'], ax =ax)\n\nax = f.add_subplot(222)\nsns.countplot(previous_application['NAME_CONTRACT_STATUS'], ax =ax)\n\nax = f.add_subplot(223)\nsns.countplot(previous_application['NAME_PAYMENT_TYPE'], ax =ax)\nplt.xticks(rotation=90)\n\nax = f.add_subplot(224)\nsns.countplot(previous_application['NAME_CASH_LOAN_PURPOSE'], ax =ax)\nplt.xticks(rotation=90)\n\nplt.tight_layout()","dd440b03":"f = plt.figure(figsize=(14,8))\nax = f.add_subplot(221)\nsns.countplot(previous_application['NAME_PORTFOLIO'], ax =ax)\n\nax = f.add_subplot(222)\nsns.countplot(previous_application['NAME_CLIENT_TYPE'], ax =ax)\n\nax = f.add_subplot(223)\nsns.countplot(previous_application['NAME_GOODS_CATEGORY'], ax =ax)\nplt.xticks(rotation=90)\n\nax = f.add_subplot(224)\nsns.countplot(previous_application['NAME_TYPE_SUITE'], ax =ax)\nplt.xticks(rotation=90)\n\nplt.tight_layout()","da139186":"f = plt.figure(figsize=(14,8))\nax = f.add_subplot(221)\nsns.countplot(previous_application['NAME_PRODUCT_TYPE'], ax =ax)\n\nax = f.add_subplot(222)\nsns.countplot(previous_application['NAME_YIELD_GROUP'], ax =ax)\n\nax = f.add_subplot(223)\nsns.countplot(previous_application['CHANNEL_TYPE'], ax =ax)\nplt.xticks(rotation=90)\n\nax = f.add_subplot(224)\nsns.countplot(previous_application['NAME_SELLER_INDUSTRY'], ax =ax)\nplt.xticks(rotation=90)\n\nplt.tight_layout()","61ed4eb0":"box_dist_plot_with_trans(previous_application, 'SELLERPLACE_AREA',)","83c2da8f":"previous_application[previous_application['SELLERPLACE_AREA']>500000]","9c0ba97e":"plt.figure(figsize=(14,4))\nsns.countplot(previous_application['CNT_PAYMENT'])\nplt.xticks(rotation=90);","92d45954":"plt.figure(figsize=(14,4))\nsns.countplot(previous_application['PRODUCT_COMBINATION'])\nplt.xticks(rotation=90);","17433ab4":"previous_application[['DAYS_FIRST_DRAWING', 'DAYS_FIRST_DUE', 'DAYS_LAST_DUE_1ST_VERSION',\n       'DAYS_LAST_DUE', 'DAYS_TERMINATION']].describe()","61601c5d":"## Fill missing value\nprevious_application['DAYS_FIRST_DRAWING'].replace({365243:np.nan},inplace=True)\nprevious_application['DAYS_FIRST_DUE'].replace({365243:np.nan},inplace=True)\nprevious_application['DAYS_LAST_DUE_1ST_VERSION'].replace({365243:np.nan},inplace=True)\nprevious_application['DAYS_LAST_DUE'].replace({365243:np.nan},inplace=True)\nprevious_application['DAYS_TERMINATION'].replace({365243:np.nan},inplace=True)\n","98c24aa8":"box_dist_plot_with_trans(previous_application,'DAYS_FIRST_DRAWING',)","a0bd933e":"box_dist_plot_with_trans(previous_application,'DAYS_FIRST_DUE')","0498d832":"box_dist_plot_with_trans(previous_application,'DAYS_LAST_DUE_1ST_VERSION')","c419c472":"box_dist_plot_with_trans(previous_application,'DAYS_LAST_DUE',)","944115c6":"box_dist_plot_with_trans(previous_application, 'DAYS_TERMINATION')","ab9d0b16":"sns.countplot(previous_application['NFLAG_INSURED_ON_APPROVAL'])","21e33bb9":"# Replace XNA XAP\nprevious_application = replace_XNA_XAP(previous_application)\n\n# Binary encoding\nprev_bin =[]\nprevious_application,prev_bin = binary_encoding(previous_application,prev_cat_col)\n\n# One hot encoding\nprevious_application,prev_cat = one_hot_encoding(previous_application,columns= prev_cat_col,nan_as_category=True)\n\nprev_aggregate = {\n    'AMT_ANNUITY':['mean','sum','min'],\n    'AMT_APPLICATION':['mean'],\n    'AMT_CREDIT':['mean','min','max'],\n    'AMT_DOWN_PAYMENT':['mean','min'],\n    'AMT_GOODS_PRICE':['mean','sum','max'],\n    'HOUR_APPR_PROCESS_START':['mean','min'],\n     'NFLAG_LAST_APPL_IN_DAY': ['mean'],\n     'RATE_DOWN_PAYMENT': ['mean'],\n     'RATE_INTEREST_PRIMARY':['mean','min','max'],\n     'RATE_INTEREST_PRIVILEGED':['mean','min'],\n     'DAYS_DECISION':['mean'],\n     'SELLERPLACE_AREA':['mean'],\n     'CNT_PAYMENT':['mean','sum'],\n     'DAYS_FIRST_DRAWING':['mean','min'],\n     'DAYS_FIRST_DUE':['mean','min'],\n     'DAYS_LAST_DUE_1ST_VERSION':['mean','min'],\n     'DAYS_LAST_DUE':['mean','max'],\n     'DAYS_TERMINATION':['mean','max'],\n     'NFLAG_INSURED_ON_APPROVAL' : ['mean'],\n}\n\ncat_prev_aggregate = {}\nfor col in prev_cat+prev_bin:\n    cat_prev_aggregate[col] =['mean','sum']\n\nprev_agg = previous_application.groupby('SK_ID_CURR').agg({**prev_aggregate,**cat_prev_aggregate})\nprev_agg.columns = pd.Index(['PREV_'+e[0]+ '_'+ e[1].upper() for e in prev_agg.columns.tolist()])\n\n# Prevoius application \n# Previous application refused\nprev_agg = prev_agg.reset_index()\nrefused = previous_application[previous_application['NAME_CONTRACT_STATUS_Refused'] ==1]\nrefused_agg = refused.groupby('SK_ID_CURR').agg(prev_aggregate)\nrefused_agg.columns = pd.Index(['REFUSE_'+e[0]+'_'+ e[1].upper() for e in refused_agg.columns.tolist()])\nprev_agg = prev_agg.join(refused_agg, on='SK_ID_CURR', how='left')\ndel refused, refused_agg\n\n# Previous application canceled\ncanceled = previous_application[previous_application['NAME_CONTRACT_STATUS_Canceled']==1]\ncanceled_agg = canceled.groupby('SK_ID_CURR').agg(prev_aggregate)\ncanceled_agg.columns = pd.Index(['CANC_'+ e[0]+ '_'+ e[1].upper() for e in canceled_agg.columns.tolist()])\nprev_agg = prev_agg.join(canceled_agg, on='SK_ID_CURR', how='left')\ndel canceled, canceled_agg\n\n# Previous application unused\n#unused = previous_application[previous_application['NAME_CONTRACT_STATUS_Unused']==1]\n#unused_agg = canceled.groupby('SK_ID_CURR').agg(prev_aggregate)\n#unused_agg.columns = pd.Index(['UNUSE_'+ e[0]+ '_'+ e[1].upper() for e in unused_agg.columns.tolist()])\n#prev_agg = prev_agg.join(unused_agg, on='SK_ID_CURR', how='left')\n# Count prevoius application\nprev_agg['PREV_COUNT'] = previous_application.groupby('SK_ID_CURR').size()\n#del unused, unused_agg\nprev_agg = prev_agg.set_index('SK_ID_CURR')\ndel previous_application\nprev_agg.head()","b7b8ce0c":"installments_payments.head()","62c57c13":"basic_details(installments_payments)","568a318d":"box_dist_plot_with_trans(installments_payments, 'NUM_INSTALMENT_VERSION', ncols=3, Trans_func='sqrt')","2bb78f02":"box_dist_plot_with_trans(installments_payments,'NUM_INSTALMENT_NUMBER', Trans_func='sqrt', ncols=3)","ab7f0665":"box_dist_plot_with_trans(installments_payments,'AMT_INSTALMENT', Trans_func='sqrt',ncols=3)","3b93c831":"box_dist_plot_with_trans(installments_payments, 'AMT_PAYMENT', Trans_func='sqrt', ncols=3)","1e9d17f5":"box_dist_plot_with_trans(installments_payments,'DAYS_INSTALMENT',)","7828c9f2":"box_dist_plot_with_trans(installments_payments,'DAYS_ENTRY_PAYMENT')","66ba2b37":"plt.figure(figsize= (14,4))\nsns.heatmap(installments_payments.corr(), cmap = 'magma',annot=True)","2a26560f":"# aggregate numeric variable\ninst_aggregator = {\n    'NUM_INSTALMENT_VERSION':['mean'],\n    'NUM_INSTALMENT_NUMBER':['mean','max'],\n    'DAYS_INSTALMENT':['min','mean'],\n    'AMT_INSTALMENT':['mean'],\n    'AMT_PAYMENT':['mean']\n}\n\ninst_agg = installments_payments.groupby('SK_ID_CURR').agg(inst_aggregator)\ninst_agg.columns = pd.Index(['INST_'+e[0]+ '_'+ e[1].upper() for e in inst_agg.columns.tolist()])\n# Count instalment\ninst_agg['INST_COUNT'] = installments_payments.groupby('SK_ID_CURR').size()\ndel installments_payments\ninst_agg.head()","8470f1e7":"# Join all aggregated df with train_test\ntrain_test = train_test.join(bureau_agg,how='left',on='SK_ID_CURR') # bureau\ndel bureau_agg\ntrain_test = train_test.join(pos_agg, how='left',on='SK_ID_CURR') # POS_CASH\ndel pos_agg\ntrain_test = train_test.join(inst_agg,how='left',on='SK_ID_CURR') # install\ndel inst_agg\ntrain_test = train_test.join(credit_agg, how='left',on='SK_ID_CURR') # credit card\ndel credit_agg\ntrain_test = train_test.join(prev_agg, how='left',on='SK_ID_CURR') # previous\ndel prev_agg\nreduce_memory_usage(train_test)","c74be830":"train_test.head(3)","a4cdbdf7":"# Select columns whose variance > 0\ncol = train_test.columns\nfeat = train_test.columns[train_test.var() >0]\ntrain_test = train_test[feat]\nprint('Number of columns generated:',len(col))\nprint('Number of columns removed')\nlen(feat) - len(col)","5730cf3f":"#from sklearn.model_selection import train_test_split\ncol_drop = ['TARGET','SK_ID_CURR']\nX = train_test[train_test['TARGET'].notnull()].drop(col_drop, axis=1)\ny = train_test[train_test['TARGET'].notnull()]['TARGET']\ntest_new = train_test[train_test['TARGET'].isnull()].drop(col_drop, axis=1)\n\n#X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, random_state=seed)","6c0e44ec":"# Lightgbm\n\ndef model(X_train, X_valid, y_train, y_valid,test_new,random_seed):\n    \n    lg_param = {}\n    lg_param['learning_rate'] = 0.02\n    lg_param['n_estimators'] = 10000\n    lg_param['max_depth'] = 8\n    lg_param['num_leaves'] = 34\n    lg_param['boosting_type'] = 'gbdt'\n    lg_param['feature_fraction'] = 0.9\n    lg_param['bagging_fraction'] = 0.9\n    lg_param['min_child_samples'] = 30\n    lg_param['lambda_l1'] = 0.04\n    lg_param['lambda_l2'] = 0.08\n    lg_param['silent'] = -1\n    lg_param['verbose'] = -1\n    lg_param['nthread'] = 4\n    lg_param['seed'] = random_seed\n    \n    lgb_model = lgb.LGBMClassifier(**lg_param)\n    print('-'*10,'*'*20,'-'*10)\n    lgb_model.fit(X_train,y_train,eval_set=[(X_train,y_train),(X_valid,y_valid)], \n                 eval_metric ='auc', verbose =100, early_stopping_rounds=200)\n    y_pred = lgb_model.predict_proba(X_valid)[:,1]\n    print('roc_auc_score',roc_auc_score(y_valid,y_pred),'-'*30,i+1)\n    y_pred_new = lgb_model.predict_proba(test_new)[:,1]\n    return y_pred,y_pred_new,lgb_model","fa6f9a5d":"# KFold cross validation\nkf = KFold(n_splits=3, shuffle=True, random_state=seed)\n\n#y_pred = 0\ny_pred_new = 0\n\nfor i,(train_index, valid_index) in enumerate(kf.split(X,y)):    \n    X_train, X_valid = X.loc[train_index], X.loc[valid_index]\n    y_train, y_valid = y[train_index], y[valid_index]\n    print('\\n{} fold of {} KFold'.format(i+1,kf.n_splits))\n    y_pred,y_pred2,lgb_model = model(X_train, X_valid, y_train, y_valid,test_new,random_seed = i)\n    #y_pred += y_pred1\n    y_pred_new += y_pred2\n","dc9270bb":"lgb.plot_importance(lgb_model,max_num_features=20)","4e4ef1fd":"feat_impo = pd.DataFrame({'Columns':X.columns,'Importance':lgb_model.feature_importances_})\nfeat_impo.sort_values('Importance',ascending=False).head()\nfeat_impo.to_csv('feat_impo.csv',index=False)","b78b8591":"feat_impo.sort_values('Importance',ascending=True).head()         ","3a6ccd1d":"fpr,tpr,threshold =roc_curve(y_valid, y_pred)\nplt.figure(figsize= (10,6))\nauc_value = round(auc(fpr,tpr),4)\nplt.text(0.9,0,'AUC:'+str(auc_value),color='r')\nplt.plot(fpr,tpr, 'r-.',label='roc')\nplt.plot([0,1],[0,1],'b-')\nplt.xlabel('True positive rate')\nplt.ylabel('False positive rate')\nplt.title('Reciver Operating Characteristics')","094ff361":"submit  = pd.DataFrame({'SK_ID_CURR':test_index,'TARGET':y_pred_new\/kf.n_splits})\nsubmit.to_csv('home_credit.csv',index=False)\nsubmit.head()","0a30e64d":"### 2.7 Credit amount","f4c3fdc9":"### 7.19 Name contract status","ca8469a0":"### 5.4 Day credit end date\nRemaining duration of CB credit (in days) at the time of application in Home Credit","6ae83abb":"### Submision","7956990d":"### 7.12 Count drawing","6585dd59":"### 9.3 Amount instalment","9491a104":"### 6.5 SK DPD\nDPD (Days past due) during the month on the previous credit","a8d0e59e":"### 5.6 Days credit update\nHow many days before loan application did last information about the Credit Bureau credit come","20d27661":"### 2.28 Days last phone change\nHow many days before application did client change phone","537e97b4":"### 7.20 Data preprocessing","fbac5a2f":"### 2.5 Number of Children \nNumber of children the client has","2c40120b":"### 5.5 Days endate fact\nDays since CB credit ended at the time of application in Home Credit (only for closed credit)","1d1acc44":"### 7.1 Months balance","45cbd6ca":"### 9.2 Number of instalment number","4fa8e9fc":"### 2.8 Annuity amount\nAn annuity loan is paid back in instalments of the same size consisting of a loan repayment portion and an interest portion. The size of the instalment changes in line with changes in interest rates, but the loan period remains unchanged.","17baa01d":"### 1.5 Fill missing value function","b6da5ff6":"## 9.0 installments_payments","eedf9f89":"## Model building","b08974a0":"* **What is a 'Credit Bureau'?**\n\nA credit bureau is an agency that collects and researches individual credit information and sells it for a fee to creditors so they can make a decision on granting loans.","7a8a44da":"### 8.1 Name contract type","bb49f60e":"### 2.16 Own car age\nAge of client's car","603653a7":"***\n***\n***\n## 4.0 Bureau Balance and Bureau dataset\n### 4.1 Glimpse Bureau balance dataset","3f0ebe8a":"### 7.5 Amount drawing other current","de908c7e":"### 5.7 Credit type, Count credit prolong","7a84da26":"### 7.13 Count drawing atm current","8c9cfd19":"### 2.21 Hour at loan apply start\nApproximately at what hour did the client apply for the loan","d7d31222":"### 2.22 Region type\nFlag if client's permanent address does not match contact address (1=different, 0=same, at region level)","c03f54f4":"### 6.1 Months balance\nMonth of balance relative to application date (-1 means the information to the freshest monthly snapshot, 0 means the information at application - often it will be the same as -1 as many banks are not updating the information to Credit Bureau regularly )","a2b3cefa":"### 2.17 Communication availablity","ae741c07":"### 7.6 Amount drawing pos current","a7a8947f":"\n### 3.3 Basic details","d22ee20e":"### 7.15 Count drawing POS current","2e3afb3e":"### 8.16 Product combination","e2777006":"### 2.23 Organization type","73b2e882":"## Model selection","dd0abc05":"### 2.12 Birth days","4527d648":"## 6.0 POS CASH balance","6d5aba7d":"### 2.11 Region population","05a6e6ef":"### 7.8 Amount payment current","ae3ae213":"### 8.17 Days first drawing","7e5510c5":"### 8.15 Sellerplace area","72a01cd8":"### 2.18 Family members count\nHow many family members does client have","bc8ef7f8":"### 2.19 Region rating client\nOur rating of the region where client lives (1,2,3)","e58c9ccd":"### 5.10 Amount credit sum limit","c11fca41":"### 2.6 Total income amount","493bde86":"### 3.2 Column type segregation","52166847":"### 8.21 Day termination","fbc71df7":"### 4.2 Months balance\nMonth of balance relative to application date (-1 means the freshest balance date)","4f758eaf":"### 2.3 Target","d023279e":"### 2.27 Observation of client social surrroundings","44bdbd2b":"### 5.9 Amount credit sum debit","b078645c":"### Feature Importance","4a413d7e":"### 1.6 One hot encoding function","58dd1a69":"### 1.4 Basic details function","3ac1f038":"### 8.13 Name Portfolio","058694e3":"## 8.0 previous_application","88243f9a":"### 6.6 SK DPD DEF\nDPD (Days past due) during the month with tolerance (debts with low loan amounts are ignored) of the previous credit","78c7d2df":"### 2.30 Number of enquiries to Credit Bureau about the client","da938e75":"### 2.10 Personal information","c47f1737":"### 9.7 Data preprocessing","3121ff78":"### 8.14 Name product type","fc58c217":"### 9.1 Number of instalment version","a3644c83":"### 1.2 Load dataset","330c1b35":"### 5.3 Credit day overdue","08c6e1ab":"### 8.9 Rate interest primary","02cf29a9":"### Join","e7750013":"\n### 8.12 Name contract status","8b105db7":"### 7.6 Amount drawing atm current","a2239ced":"Thier is perfect correlation between days instalment and days payment","3045c9d7":"### 7.11 Amount total receivable","8f9572b4":"***\n***\n***\n## 5.0 Bureau dataset\nAll client's previous credits provided by other financial institutions that were reported to Credit Bureau (for clients who have a loan in our sample).\nFor every loan in our sample, there are as many rows as number of credits the client had in Credit Bureau before the application date.","1191325b":"### 2.15 Publish id days\nHow many days before the application did client change the identity document with which he applied for the loan","5cb54930":"### 7.3 Amount drawing current","29b5dfcc":"### 9.6 Day entry payment","312a8591":"### 8.18 Days first due","2cfd7884":"### 4.3 Status\nStatus of Credit Bureau loan during the month (active, closed, DPD0-30,\ufffd [C means closed, X means status unknown, 0 means no DPD, 1 means maximal did during month between 1-30, 2 means DPD 31-60,\ufffd 5 means DPD 120+ or sold or written off ] )","cd989360":"### 5.11 Annuity of the Credit Bureau credit","05e1c0f4":"### 2.4 Binary feature\n* NAME_CONTRACT_TYPE: Identification if loan is cash or revolving\n* FLAG_OWN_REALTY: Flag if client owns a house or flat","9edac39e":"### 6.3 Count instalment future\nInstallments left to pay on the previous credit","06b54bdd":"### 2.26 Total area\nNormalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor.","833a0dd3":"### 7.9 Amount Receivable principle","b265ff74":"### 7.10 Amount recivable","8baeeb34":"### 8.3 Amount application","ea2be7f2":"### 8.7 Time of application process starts","e8c16c1a":"Their are many high income peolple's loans are not payed in time ","0a2c8c67":"### 3.4 Data preprocessing","0d67f3f8":"### 2.20 Weekday apply for loan\nOn which day of the week did the client apply for the loan","1b4594e2":"\n### 8.10 Rate interest privileged","f9813b99":"### 8.19 Day last due 1st","471566e3":"### 2.25 Information adout buliding in client lives\nNormalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor","a12f3ad6":"### 4.4 Data preprosessing","822a8bb2":"### 7.18 SK DPD DEF\nDPD (Days past due) during the month with tolerance (debts with low loan amounts are ignored) of the previous credit","e37002d4":"### 2.29 Flag document","fe06483f":"### 5.1 Credit status\n* Credict active: Status of the Credit Bureau (CB) reported credits\n* Credit currency: Recoded currency of the Credit Bureau credit\n\nClosed: If you find a date adjacent to the 'Closed' field in your account section, this means that that loan account has been closed by the lender. In other words, it means you have paid off your loan in full and the bank has reported this account as \"Closed\" to CREDIT ACTIVE.\n\nActive: Loan is still pending.","058481b5":"### 2.9 Goods price amount\nFor consumer loans it is the price of the goods for which the loan is given","b831daf1":"### 2.14 Redistration days\nHow many days before the application did client change his registration","830df3aa":"### 5.2 Days credit\nThe number days before current application did client apply for Credit Bureau credit","e419fc5e":"\n\n### 8.20 Days last due","938f8c25":"### 8.8 Rate down payment","9649e384":"### 5.8 Amount credit max overdue","2ffa10f7":"### 8.2 Amount annuity","bb9bd1e9":"### 8.4 Amount credit","7a3c2923":"## 2 Application train\/test dataset\n### 2.0 Glimpse Application train \/ test dataset","06130657":"***\n***\n***\n## 3.0 Application train & application test data preprocessing\n### 3.1 Merge application train and application test","3d380d00":"### 5.12 Data preprocessing","74c1709a":"### 7.4 Amount credit limit actual","c2706af0":"### 8.5 Amount down payment","3b9663bc":"The 0 stands for loan repayment on time, 1 stands for loan repayment not done on time, so only 8% of loan repayment happens late.","42b5c353":"### 7.16 Count instalment mature come","f32730a4":"### 2.1 Columns","f8eaacee":"### 6.6 Data Preprocessing","70dc261f":"The dataset does not contain missing value, all variables as interge or float type, so one hot encoding is not required.","077ef85b":"### 6.2 Count instalment\nTerm of previous credit (can change over time)","c4564dc3":"### 8.16 Count payment","9b3c21be":"### 8.30 Data preprocessing","a17a215b":"### 5.10 Amount credit  sum overdue","274181b8":"### 1.1 Import library","ee5c029a":"### 9.5 Day instalment","f97ff736":"### 7.14 Count drawing other current","140fa7ea":"### 8.6 Amount good price","5718d03c":"### 1.3 Reduce memory of dataset function","d0b5ff9a":"### 2.13 Number of days employed\nHow many days before the application the person started current employment","ee261bfe":"### 7.2 Amount balance","20f4ebae":"### 8.21 Nflag insured on approval","5364ea3a":"### 6.4 Name contract status\nContract status during the month","917175ba":"### 8.11 Day decision","077e24cc":"### 2.24 External data source\nNormalized score from external data source","c294fbab":"## 7.0 Credit card balance\nGlimpse data set","4b889590":"### 5.9 Amount credit sum","48c070f2":"### 9.4 Amount payment","48ec9ec8":"### 2.2 Current id","48f70b0e":"### 7.17 SK DPD\nDPD (Days past due) during the month on the previous credit","18f56ed1":"### 7.7 Amount instalment min regularity","df59f12f":"# Thank you","1779caa9":"# Home credit default risk\n<a href=\"http:\/\/www.homecredit.net\/\">Home Credit<\/a> is a non-banking financial institution, founded in 1997 in the Czech Republic.\n\nThe company operates in 14 countries (including United States, Russia, Kazahstan, Belarus, China, India) and focuses on lending primarily to people with little or no credit history which will either not obtain loans or became victims of untrustworthly lenders.\n\nHome Credit group has over 29 million customers, total assests of 21 billions Euro, over 160 millions loans, with the majority in Asia and and almost half of them in China (as of 19-05-2018). \n\nThe company uses of a variety of alternative data - including telco and transactional information - to predict their clients' repayment abilities.\n\nThey made available their data to the Kaggle community and are challenging Kagglers to help them unlock the full potential of their data."}}