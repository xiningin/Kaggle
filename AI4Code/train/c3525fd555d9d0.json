{"cell_type":{"a7346e76":"code","3ab85586":"code","a700a4f9":"code","e07f1c65":"code","95f690fb":"code","c31e3bbb":"code","64aae7ab":"code","a56d5118":"markdown"},"source":{"a7346e76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ab85586":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py\n!pip install sentencepiece","a700a4f9":"%%time\nimport tensorflow_hub as hub \nimport tokenization","e07f1c65":"# !pip install sentencepiece\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow_hub as hub\nimport itertools\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\nclass Blender():\n    def __init__(self, tweet_len=50, module_url=None):\n        # The length of tweets we utilizing\n        self.tweet_len = tweet_len\n        self.module_url = module_url\n\n    def load_data(self):\n        self.train = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\n        self.test = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\n        self.sub = pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')\n        print(\"Data loaded\")\n    \n    def get_bert_layer(self):\n        self.bert_layer = hub.KerasLayer(self.module_url, trainable=True)\n        vocab_file = self.bert_layer.resolved_object.vocab_file.asset_path.numpy()\n        do_lower_case = self.bert_layer.resolved_object.do_lower_case.numpy()\n        self.tokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)\n        print(\"Bert layer added\")\n\n    def bert_encode(self, texts):\n        all_tokens = []\n        all_masks = []\n        all_segments = []\n        max_len = self.tweet_len\n        \n        for text in texts:\n            text = self.tokenizer.tokenize(text)\n                \n            text = text[:max_len-2]\n            input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n            pad_len = max_len - len(input_sequence)\n            \n            tokens = self.tokenizer.convert_tokens_to_ids(input_sequence) + [0] * pad_len\n            pad_masks = [1] * len(input_sequence) + [0] * pad_len\n            segment_ids = [0] * max_len\n            \n            all_tokens.append(tokens)\n            all_masks.append(pad_masks)\n            all_segments.append(segment_ids)\n        \n        return np.array(all_tokens), np.array(all_masks), np.array(all_segments)\n\n    def build_model(self):\n        max_len = self.tweet_len\n        input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n        input_mask = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n        segment_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n        pooled_output, sequence_output = self.bert_layer([input_word_ids, input_mask, segment_ids])\n        clf_output = sequence_output[:, 0, :]\n        net = tf.keras.layers.Dense(64, activation='relu')(clf_output)\n        net = tf.keras.layers.Dropout(0.2)(net)\n        net = tf.keras.layers.Dense(32, activation='relu')(net)\n        net = tf.keras.layers.Dropout(0.2)(net)\n        out = tf.keras.layers.Dense(1, activation='sigmoid')(net)\n        \n        model = tf.keras.models.Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n        model.compile(tf.keras.optimizers.Adam(lr=1e-5), loss='binary_crossentropy', metrics=['accuracy'])\n        \n        print(\"Model built\")\n        return model\n    \n    def run(self):\n        train_input = self.bert_encode(self.train.text.values)\n        test_input = self.bert_encode(self.test.text.values)\n        train_labels = self.train.target.values\n\n        model = self.build_model()\n\n        checkpoint = tf.keras.callbacks.ModelCheckpoint('model.h5', monitor='val_accuracy', save_best_only=True, verbose=1)\n        earlystopping = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=5, verbose=1)\n\n        train_history = model.fit(\n            train_input, train_labels, \n            validation_split=0.1,\n            epochs=30,\n            callbacks=[checkpoint, earlystopping],\n            batch_size=16,\n            verbose=1\n        )\n\n        print(\"Train completed.\")\n        \n        model.load_weights('model.h5')\n        test_pred = model.predict(test_input)\n        self.sub['target'] = test_pred.round().astype(int)\n        export_file = 'predictions_' + '_'.join(self.module_url.split('\/')[-2:]) + '_' + str(self.tweet_len) + '.csv'\n        self.sub.to_csv(export_file, index=False)\n        \n        print(f\"Predictions exported to {export_file}.\")\n","95f690fb":"%%time\ntweet_lens = [100, 120, 140, 160]\nmodule_urls = ['https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1',\n               'https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-12_H-768_A-12\/2']\n\n# tweet_lens = [50]\n# module_urls = ['https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-12_H-768_A-12\/2']\n\nfor tl, mu in itertools.product(tweet_lens, module_urls):\n    try:\n        b = Blender(tl, mu)\n        b.load_data()\n        b.get_bert_layer()\n        b.run()\n    except Exception as e:\n        print(e)\n        ","c31e3bbb":"import os \ndef blender(threshold=0.5):\n    preds = []\n    basedir = '.'\n    for f in os.listdir(f'{basedir}\/'):\n        if not (f.startswith(\"predictions\") and f.endswith(\".csv\")): continue\n        if len(preds) == 0:\n            preds = pd.read_csv(f\"{basedir}\/{f}\").target \n        else:\n            preds += pd.read_csv(f\"{basedir}\/{f}\").target \n    \n    preds = (preds >= max(preds) * threshold).astype(int)\n    \n    blended = pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')\n    blended['target'] = preds\n    os.system('rm submission.csv')\n    blended.to_csv('submission.csv', index=False)\n    print(\"Export done.\")\n\n    return preds\n\nblender()","64aae7ab":"!head -n 20 submission.csv","a56d5118":"Now blend previous predictions into one file\n"}}