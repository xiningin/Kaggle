{"cell_type":{"3e2b1a5a":"code","cced9f81":"code","f0c4f4fb":"code","d89a5416":"code","d0535a95":"code","d8e7d020":"code","c121a907":"code","8ba8cf53":"code","28bb937b":"code","bc742e69":"code","ae2e6cea":"code","d9554569":"code","3222c1cc":"code","da93accd":"code","5ecfeabf":"code","535c6091":"code","f098d8bb":"code","86fdcb15":"code","8e7a4e5c":"code","bca83da4":"code","fb194336":"code","aa23bfa7":"code","8233c187":"code","328cf8b5":"code","01c14186":"code","f8e7c7db":"code","0faa4831":"code","35dadfce":"code","66dcd2d0":"code","84562a46":"code","58ab7485":"code","10155769":"code","07ac5340":"code","7d39d200":"code","1a512299":"code","faba070f":"code","6f8fdfe0":"code","c5041044":"code","e262f8a2":"code","2a2d5137":"code","e52dded2":"code","80e634b1":"markdown","8e412cfd":"markdown","05d27b0d":"markdown","7e00bd17":"markdown","3b456652":"markdown","0cbd06f7":"markdown","1286d68a":"markdown","e581f0f9":"markdown","ac413607":"markdown","3b16692c":"markdown","86850500":"markdown","d9b34dd3":"markdown","3cf8bdd5":"markdown","0458ec2b":"markdown","23771a70":"markdown","be64041a":"markdown","afdf28b3":"markdown","d3d33a32":"markdown","a629b30a":"markdown","2680fa1b":"markdown","d3e8ea03":"markdown","28a4a4f7":"markdown","2f453ea0":"markdown","8d088c53":"markdown","2568127e":"markdown","02905a98":"markdown","effeb518":"markdown","d78d76b2":"markdown","61802512":"markdown","b8390f66":"markdown","056db16e":"markdown","aeb51c3a":"markdown","ef10b809":"markdown","00282246":"markdown","8df3f091":"markdown","da257623":"markdown","901a1151":"markdown","78873ad1":"markdown","7216684b":"markdown","e5b2d5ed":"markdown"},"source":{"3e2b1a5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n#import numpy as np # linear algebra\n#import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cced9f81":"import pandas as pd                    # For Data Exploration\nimport numpy as np                     # For mathematical calculations \nimport seaborn as sns                  # For data visualization \nimport matplotlib.pyplot as plt        # For plotting graphs \n%matplotlib inline \nimport warnings                        # To ignore any warnings \nwarnings.filterwarnings(\"ignore\")","f0c4f4fb":"train_df = pd.read_csv('..\/input\/train.csv')\ntrain_df.columns","d89a5416":"train_df.head(5)","d0535a95":"test_df = pd.read_csv('..\/input\/test.csv')\ntest_df.columns","d8e7d020":"test_df.head(5)","c121a907":"train_original = train_df.copy()\ntest_original = test_df.copy()","8ba8cf53":"train_df.dtypes","28bb937b":"train_df.shape, test_df.shape","bc742e69":"train_df.isnull().sum()","ae2e6cea":"train_df['Age'].fillna(train_df['Age'].mean(),inplace = True)","d9554569":"train_df['Cabin'].fillna(train_df['Cabin'].mode()[0], inplace = True)","3222c1cc":"train_df['Embarked'].fillna(train_df['Embarked'].mode()[0], inplace = True)","da93accd":"test_df.isnull().sum()","5ecfeabf":"test_df['Age'].fillna(test_df['Age'].mean(),inplace = True)\ntest_df['Cabin'].fillna(test_df['Cabin'].mode()[0], inplace = True)","535c6091":"train_df['Survived'].value_counts(normalize = True)","f098d8bb":"train_df['Survived'].value_counts(normalize = True).plot.bar(title = \"Survival %\")","86fdcb15":"train_df['Pclass'].value_counts(normalize =  True)","8e7a4e5c":"train_df['Sex'].value_counts(normalize= True)","bca83da4":"train_df['Embarked'].value_counts()","fb194336":"train_df['SibSp'].value_counts()","aa23bfa7":"train_df['Parch'].value_counts()","8233c187":"plt.figure(1)\nplt.subplot(121) \nsns.distplot(train_df['PassengerId']); \nplt.subplot(122) \ntrain_df['PassengerId'].plot.box(figsize=(16,5)) \nplt.show()","328cf8b5":"plt.figure(2)\nplt.subplot(221)\ndf = train_df.dropna()\nsns.distplot(df['Age']);\nplt.subplot(222)\ndf['Age'].plot.box(figsize = (16,5))\nplt.show()","01c14186":"plt.figure(3)\nplt.subplot(321)\nsns.distplot(train_df['Fare']);\nplt.subplot(322)\ntrain_df['Fare'].plot.box(figsize=(16,5))\nplt.show()","f8e7c7db":"Ticket_Class=pd.crosstab(train_df['Pclass'],train_df['Survived'])\nSex=pd.crosstab(train_df['Sex'],train_df['Survived'])\nSiblings=pd.crosstab(train_df['SibSp'],train_df['Survived'])\nParents=pd.crosstab(train_df['Parch'],train_df['Survived'])\nEmbarked=pd.crosstab(train_df['Embarked'],train_df['Survived'])","0faa4831":"Ticket_Class.div(Ticket_Class.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize=(4,4))\nplt.show() \nSex.div(Sex.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize=(4,4))\nplt.show() \nSiblings.div(Siblings.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize=(4,4))\nplt.show() \nParents.div(Parents.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize=(4,4))\nplt.show() \nEmbarked.div(Embarked.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize=(4,4))\nplt.show() ","35dadfce":"train_df.groupby('Survived')['PassengerId'].mean().plot.bar()\nplt.show()","66dcd2d0":"bins=[0,12,20,60,80] \ngroup=['Children','Teenage','Adult', 'Senior Citizen'] \ntrain_df['Age_bin']=pd.cut(df['Age'],bins,labels=group)\nAge_bin=pd.crosstab(train_df['Age_bin'],train_df['Survived']) \nAge_bin.div(Age_bin.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True) \nplt.xlabel('Age') \nP = plt.ylabel('Percentage')\nplt.show()","84562a46":"matrix = train_df.corr() \nfax = plt.subplots(figsize=(9, 6)) \nsns.heatmap(matrix, vmax=.8, square=True, cmap=\"BuPu\");","58ab7485":"train = train_df.drop(['PassengerId','Name','Ticket','Fare','Cabin','Age_bin'], axis =1)\ntest = test_df.drop(['PassengerId','Name','Ticket','Fare','Cabin'], axis =1)","10155769":"X = train.drop('Survived',1)\ny = train.Survived","07ac5340":"X=pd.get_dummies(X) \ntrain=pd.get_dummies(train) \ntest=pd.get_dummies(test)","7d39d200":"from sklearn.model_selection import train_test_split\nx_train, x_cv, y_train, y_cv = train_test_split(X,y, test_size =0.3)","1a512299":"from sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import accuracy_score\nmodel = LogisticRegression() \nmodel.fit(x_train, y_train)","faba070f":"pred_cv = model.predict(x_cv)","6f8fdfe0":"accuracy_score(y_cv,pred_cv)","c5041044":"pred_test = model.predict(test)","e262f8a2":"Passenger_Id = test_df['PassengerId'].values","2a2d5137":"gender_submission = pd.DataFrame({'PassengerId': Passenger_Id, 'Survived': pred_test}, columns=['PassengerId', 'Survived'])","e52dded2":"gender_submission.to_csv('gender_submission.csv', index = False)","80e634b1":"678 passengers were travelling without parent\/children","8e412cfd":"**Bar Plot of Dependent\/Target Variable**","05d27b0d":"**Prediciting Loan status for Test data set**","7e00bd17":"**Taking PassengerId into a numpy array from test dataset**","3b456652":"**Importing the packages**","0cbd06f7":"**Displaying top 5 records of test dataset**","1286d68a":"Passenger Id doesnot seem to have much impact on survival","e581f0f9":"**Dropping Target variable from Train dataset and putting it into another dataset**","ac413607":"**Calculate Accuracy**","3b16692c":"**Prediciting the Loan Status for Validation set**","86850500":"608 passengers were travelling without any sibling, spouse","d9b34dd3":"**Creating Dummy variables for Categorical Features**","3cf8bdd5":"**Building the Model**","0458ec2b":"**Reading the test dataset and displaying its columns**","23771a70":"**Hypothesis for survival**\n1. Passengers belonging to Upper class had higher chances of survival\n2. Women, Children Passengers had higher chances of survival\n3. Passengers who boarded as a Family had higher chances of survival","be64041a":"**Saving the output**","afdf28b3":"**Frequency Table of Dependent\/Target Variable**","d3d33a32":"Passengers from Age 0-60 had a higher survial rate. Mostly childrens and teenage","a629b30a":"**Fitting into Logistic Regression**","2680fa1b":"**Frequency table for Independent Categorical Features**","d3e8ea03":"**Heat Map to find Co-relation with numerial features and target variable**","28a4a4f7":"**Making copy of the dataset**","2f453ea0":"1. 644 passengers embarked on Titanic from Southampton\n2. 168 passengers embarked on Titanic from Cherbourg\n3. 77 passengers embarked on Titanic from Queenstown","8d088c53":"**Plot of Independent Numerical variable**","2568127e":"1. Survival rate was high for Passengers travelling in 1st and 2nd Class \n2. Female passengers had a higher survival rate\n3. Passengers travelling with 1 or 2 siblings\/spouse had a higher survival rate\n4. Passengers travelling with 3 parents\/children had a higher survival rate\n5. Passengers who boarded from Cherbourg survived more\n\nFrom point 3 and 4, it can be inferred that, passengers who were travelling as family with parents\/children\/spouse\/sibilings had a higher survival rate compared to that of lone passengers.\n\n","02905a98":"**Bi-Variate Analysis between each feature and target variable**","effeb518":"**Univariate Analysis of each features**","d78d76b2":"**Reading the train dataset and displaying its columns**","61802512":"1. 24% passengers belonged Upper or 1st class\n2. 20% passengers belonged Middle or 2nd class\n3. 55% passengers belonged Lower or 3rd class","b8390f66":"1. 65% passengers were male\n2. 35% passengers were female\n","056db16e":"**To check shape of the train and test dataset**","aeb51c3a":"**Dropping the columns which has no impact **","ef10b809":"1. SibSp and Parch are highly co-related as both indicates family members and its count\n2. Fare and Survived are also highly co-related","00282246":"**Combining 2 numpy array into Panda dataframe**","8df3f091":"**Finding Missing Values in the test dataset**","da257623":"**Finding Missing Values in the train dataset**","901a1151":"38% of Passengers in Train dataset survived","78873ad1":"**Displaying top 5 records of train dataset**","7216684b":"**Checking of datatypes of columns**","e5b2d5ed":"**Splitting Train dataset into Train and Validation set**"}}