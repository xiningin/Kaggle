{"cell_type":{"a5023408":"code","a2e4fcb1":"code","9b1a4a0a":"code","7ca54075":"code","4de21686":"code","bf8a82e3":"code","a5937901":"code","06352a67":"code","40210218":"code","f5e79308":"code","b1b690ba":"code","b289774f":"code","083c4825":"code","5c1e0ced":"code","dbc711c5":"code","ead92d93":"code","0c8fa1da":"code","a8254f94":"markdown","8b7a890a":"markdown","ebd31312":"markdown","e57183c7":"markdown","f3143775":"markdown","f5e18fea":"markdown","edda2403":"markdown","64992972":"markdown","44cb3a56":"markdown","205ecafe":"markdown","683711d4":"markdown","fa9ba674":"markdown","2ad74d2a":"markdown","781b5893":"markdown"},"source":{"a5023408":"import pandas as pd\nimport os","a2e4fcb1":"data_df = pd.read_csv(\"\/kaggle\/input\/railways-accidents-in-europe\/railways_accidents_eu.csv\")\ncountry_codes_df = pd.read_csv(\"\/kaggle\/input\/iso-country-codes-global\/wikipedia-iso-country-codes.csv\")","9b1a4a0a":"data_df.info()","7ca54075":"country_codes_df.info()","4de21686":"data_df.head()","bf8a82e3":"country_codes_df.head()","a5937901":"cc_df = country_codes_df[['English short name lower case','Alpha-2 code','Alpha-3 code']]\ncc_df.columns = ['geography_name', 'geography', 'geography_3']\ndata_c_df = data_df.merge(cc_df, how='left')\nprint(data_df.shape, data_c_df.shape)\ndata_c_df.head()","06352a67":"agg_df = data_c_df.groupby(['geography', 'geography_name'])['value'].sum().reset_index()\nagg_df.sort_values([\"value\"], inplace=True, ascending=False)\nagg_df.head(10)","40210218":"top_10_accidents = agg_df.head(10).geography_name.values","f5e79308":"import plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ndef genSankey(df,cat_cols=[],value_cols='',title='Sankey Diagram',param={\"height\":1000}):\n    # maximum of 6 value cols -> 6 colors\n    colorPalette = ['#4B8BBE', '#AF2346','#32CD32','#8B008B','#FFD43B','#646464']\n    labelList = []\n    colorNumList = []\n    for catCol in cat_cols:\n        labelListTemp =  list(set(df[catCol].values))\n        colorNumList.append(len(labelListTemp))\n        labelList = labelList + labelListTemp\n        \n    # remove duplicates from labelList\n    labelList = list(dict.fromkeys(labelList))\n    \n    # define colors based on number of levels\n    colorList = []\n    for idx, colorNum in enumerate(colorNumList):\n        colorList = colorList + [colorPalette[idx]]*colorNum\n       \n    # transform df into a source-target pair\n    for i in range(len(cat_cols)-1):\n        if i==0:\n            sourceTargetDf = df[[cat_cols[i],cat_cols[i+1],value_cols]]\n            sourceTargetDf.columns = ['source','target','count']\n        else:\n            tempDf = df[[cat_cols[i],cat_cols[i+1],value_cols]]\n            tempDf.columns = ['source','target','count']\n            sourceTargetDf = pd.concat([sourceTargetDf,tempDf])\n        sourceTargetDf = sourceTargetDf.groupby(['source','target']).agg({'count':'sum'}).reset_index()\n        \n    # add index for source-target pair\n    sourceTargetDf['sourceID'] = sourceTargetDf['source'].apply(lambda x: labelList.index(x))\n    sourceTargetDf['targetID'] = sourceTargetDf['target'].apply(lambda x: labelList.index(x))\n    \n    # creating the sankey diagram\n    data = dict(\n        type='sankey',\n        node = dict(\n          pad = 15,\n          thickness = 20,\n          line = dict(\n            color = \"black\",\n            width = 0.25\n          ),\n          label = labelList,\n          color = colorList\n        ),\n        link = dict(\n          source = sourceTargetDf['sourceID'],\n          target = sourceTargetDf['targetID'],\n          value = sourceTargetDf['count'],\n        )\n      )\n    \n    layout =  dict(\n        title = title,\n        font = dict(\n          size = 10\n        ),\n        height=param[\"height\"]\n    )\n       \n    fig = dict(data=[data], layout=layout)\n    return fig","b1b690ba":"agg_df = data_c_df.groupby(['accident', 'geography_name'])['value'].sum().reset_index()\nagg_df.columns = [\"accident\", \"country\", \"total\"]\nagg_df.sort_values([\"total\"], inplace=True, ascending=False)\nprint(f\"All combinations: {agg_df.shape[0]}\")\nagg_df.head(10)","b289774f":"data_agg = agg_df\nfig = genSankey(data_agg,cat_cols=['country', 'accident'],\\\n                value_cols='total',\n                title='Sankey Diagram for railways accidents: {country -> accident type}')\niplot(fig, validate=False)","083c4825":"data_agg = agg_df.loc[agg_df.accident != \"TOTAL\"]\nfig = genSankey(data_agg,cat_cols=['country', 'accident'],\\\n                value_cols='total',\n                title='Sankey Diagram for railways accidents: {country -> accident type}')\niplot(fig, validate=False)","5c1e0ced":"agg_df = data_c_df.groupby(['accident', 'date', 'geography_name'])['value'].sum().reset_index()\nagg_df.columns = [\"accident\", \"year\", \"country\", \"total\"]\nagg_df.sort_values([\"total\"], inplace=True, ascending=False)\nprint(f\"All combinations: {agg_df.shape[0]}\")\nagg_df.head(10)","dbc711c5":"data_agg = agg_df.loc[agg_df.accident != \"TOTAL\"]\nfig = genSankey(data_agg,cat_cols=['country', 'year', 'accident'],\\\n                value_cols='total',\n                title='Sankey Diagram for railways accidents: {country -> year -> accident type}')\niplot(fig, validate=False)","ead92d93":"import matplotlib.pyplot as plt\nimport seaborn as sns \ndef plot_time_variation(df, c='geography_name', y='value', is_log=False, title=\"\"):\n    f, ax = plt.subplots(1,1, figsize=(16,12))\n    countries = df[c].unique()\n    for country in countries:\n        df_ = df[(df[c]==country)] \n        df_[y] = df_[y] + 1\n        g = sns.lineplot(x=\"date\", y=y, data=df_,  label=country)  \n        ax.text(max(df_['date']), (df_.loc[df_['date']==max(df_['date']), y]), str(country))\n    plt.xticks(rotation=90)\n    plt.title(f'Total {title}, grouped by country\/year')\n    ax.text(max(df_['date']), (df_.loc[df_['date']==max(df_['date']), y]), str(country))\n    plt.legend(loc=\"upper left\", bbox_to_anchor=(1,1))\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show()  ","0c8fa1da":"filter_df = data_c_df\nfilter_df = filter_df.groupby(['geography_name', 'date'])['value'].sum().reset_index()\nplot_time_variation(filter_df,is_log=True,title=\"railways accidents (per country)\")","a8254f94":"## Sankey Diagram for country, accident type and year\n\nLet's now show also the year.\nWe remove as well TOTAL type of accident.","8b7a890a":"# Data exploration\n\n## Glimpse the data","ebd31312":"## Load data","e57183c7":"## Merge accidents data and country data","f3143775":"### Sankey diagram with type of accidents and country","f5e18fea":"### Visualization function using Sankey diagram","edda2403":"## Time evolution of railways accidents\n\nWe will look now to the trends of railways accidents.","64992972":"Let's remove TOTAL.","44cb3a56":"## Top 10 countries with accidents","205ecafe":"# Introduction\n\nWe analyze the railways accidents data. \nWe load also the ISO country codes data, as auxiliary data.  \nUse of Sankey diagrams allows us to show in a single graph the distribution of accidents per types and per countries.","683711d4":"### ","fa9ba674":"## Sankey diagram\n","2ad74d2a":"The country codes used in the asylum dataset correspond to the Alpha-2 codes in the ISO country code data. We will merge twice the two datasets to get as well the English short name countries names.","781b5893":"# Analysis preparation\n\n## Load packages"}}