{"cell_type":{"683c2bce":"code","0cf7d010":"code","2fa33129":"code","eb733532":"code","cdc94a1a":"code","595426f9":"code","f7b5c76c":"code","abcc6f8e":"code","98912598":"code","125450e8":"code","c27d98ad":"markdown","9cbf3dcb":"markdown","d35e79a7":"markdown","aa71b1f5":"markdown","9bfe2256":"markdown","6b03b744":"markdown"},"source":{"683c2bce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n#from sklearn.datasets import  load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0cf7d010":"cancer=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\ncancer.head()","2fa33129":"print(cancer.shape)","eb733532":"#Mapping categorical data to  numerical data\ncancer['diagnosis']=cancer['diagnosis'].map({'M':1,'B':0})\n\ny = cancer.diagnosis \n\nl= ['Unnamed: 32','id','diagnosis']\nX = cancer.drop(l,axis=1)#remove the unwanted column and target column\nX.head()\nprint(y)","cdc94a1a":"X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=0)","595426f9":"print(X_train.shape)\nprint(X_test.shape)","f7b5c76c":"clf = SVC(C=10).fit(X_train, y_train)\nprint(clf.score(X_train, y_train))\nprint(clf.score(X_test, y_test))","abcc6f8e":"scaler=MinMaxScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\nclf = SVC(C=10).fit(X_train, y_train)\nprint(clf.score(X_train_scaled, y_train))\nprint(clf.score(X_test_scaled, y_test))","98912598":"from sklearn.model_selection import GridSearchCV\ntuned_parameters = [{'kernel': ['rbf'], 'gamma': [0.001,0.0001],\n                     'C': [1, 10, 100, 1000]},\n                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\ngrid=GridSearchCV(SVC(),tuned_parameters,cv=5)\ngrid.fit(X_train_scaled,y_train)\ngrid.best_params_","125450e8":"grid.best_score_","c27d98ad":"*score is improved i.e 0.63 to 0.98*","9cbf3dcb":"**Use Grid search to select the best parameter**","d35e79a7":"1. training score is 1.0* \n2. test score is 0.63\n3. using point 1 and 2, we can say that overfitting is occured ","aa71b1f5":"*scalling remove the overfitting but still test score is not improved*","9bfe2256":"**using Scalling**","6b03b744":"without using Scalling"}}