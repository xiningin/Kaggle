{"cell_type":{"0baa115e":"code","a68dd11c":"code","ff373ed1":"code","950cdfa7":"code","447c3969":"code","840b7b77":"code","f40159cb":"code","4b318609":"code","83b85093":"code","da6896b7":"code","1ceef3b9":"code","ed04a274":"code","7ebcbbe0":"code","2cee1735":"code","a9e20954":"code","dbb3567a":"code","9f27ecc1":"code","87eeed1f":"code","d7eb19f5":"code","34659dc6":"markdown","727277f6":"markdown","17582bb3":"markdown","d7b9d0cc":"markdown","ee7dc631":"markdown","ae6e1e66":"markdown","73d11074":"markdown","6a518afb":"markdown","fc49f334":"markdown","13084f4e":"markdown","0ac0fa23":"markdown","6c19f525":"markdown","e2cd0dc0":"markdown","b1254b2b":"markdown","c1ff0eed":"markdown","661c851c":"markdown","ee57f918":"markdown","9f81861d":"markdown","3a1e420d":"markdown","33280663":"markdown"},"source":{"0baa115e":"import pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt","a68dd11c":"covid_19_data =  pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')","ff373ed1":"covid_19_data.head()","950cdfa7":"south_korea_data = covid_19_data[covid_19_data['Country\/Region']=='South Korea']\nsouth_korea_data.head()","447c3969":"south_korea_data_groupped = south_korea_data.groupby(['ObservationDate','Country\/Region']).agg({'Confirmed':sum,\n                                                                'Deaths':sum,\n                                                                'Recovered':sum})\nsouth_korea_data_groupped.head(15)","840b7b77":"south_korea_data_groupped = south_korea_data_groupped.reset_index()\nsouth_korea_data_groupped.head()","f40159cb":"fig, ax1 = plt.subplots()\nax1.bar(south_korea_data_groupped['ObservationDate'], south_korea_data_groupped['Confirmed'])\nax1.bar(south_korea_data_groupped['ObservationDate'], south_korea_data_groupped['Deaths'])\nplt.show()","4b318609":"import datetime\nsouth_korea_data_groupped['ObservationDate'] = south_korea_data_groupped['ObservationDate'].apply(lambda row: datetime.datetime.strptime(row,\"%m\/%d\/%Y\").date())\nsouth_korea_data_groupped.head()","83b85093":"from pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport matplotlib.dates as mdates\nfig, ax1 = plt.subplots()\nformatter = mdates.DateFormatter(\"%Y-%m-%d\")\nax1.xaxis.set_major_formatter(formatter)   \ndates_list = list(south_korea_data_groupped['ObservationDate'].unique())\nax1.bar(dates_list, south_korea_data_groupped['Confirmed'])\nax1.bar(dates_list, south_korea_data_groupped['Deaths'])\nax1.tick_params(axis='y')\nplt.show()","da6896b7":"fig, ax1 = plt.subplots(figsize=(10,5))\nfig.autofmt_xdate()\nformatter = mdates.DateFormatter(\"%Y-%m-%d\")\nax1.xaxis.set_major_formatter(formatter)   \ndates_list = list(south_korea_data_groupped['ObservationDate'].unique())\nax1.bar(dates_list, south_korea_data_groupped['Confirmed'])\nax1.bar(dates_list, south_korea_data_groupped['Deaths'])\nax1.tick_params(axis='y')\nplt.show()","1ceef3b9":"fig, ax1 = plt.subplots()\nax1.set(xlabel='Dates', ylabel='Number of cases', title='South Korea')\nformatter = mdates.DateFormatter(\"%Y-%m-%d\")\nax1.xaxis.set_major_formatter(formatter)   \ndates_list = list(south_korea_data_groupped['ObservationDate'].unique())\nax1.bar(dates_list, south_korea_data_groupped['Confirmed'], label='Confirmed')\nax1.bar(dates_list, south_korea_data_groupped['Deaths'], label='Deaths')\nax1.tick_params(axis='y')\nplt.xticks(rotation=45)\nplt.legend()\nplt.show()","ed04a274":"skdg = south_korea_data_groupped\n#skdg['Deaths_yesterday'] = skdg.groupby(['Country\/Region'])['Deaths'].shift(1)\nskdg['Deaths_yesterday'] = skdg['Deaths'].shift(1)\nskdg['Deaths_per_day'] = skdg['Deaths']- skdg['Deaths_yesterday']\n#skdg['Confirmed_yesterday'] = skdg.groupby(['Country\/Region'])['Confirmed'].shift(1)\nskdg['Confirmed_yesterday'] = skdg['Confirmed'].shift(1)\nskdg['Confirmed_per_day'] = skdg['Confirmed']- skdg['Confirmed_yesterday']\nskdg['Death_rate']=skdg['Deaths']\/skdg['Confirmed']\nskdg['Death_rate_ended']=skdg['Deaths']\/(skdg['Deaths']+skdg['Recovered'])","7ebcbbe0":"skdg.head()","2cee1735":"fig, ax1 = plt.subplots()\nax1.set(xlabel='Dates', ylabel='Number of cases', title='South Korea')\nformatter = mdates.DateFormatter(\"%Y-%m-%d\")\nax1.xaxis.set_major_formatter(formatter)   \ndates_list = list(skdg['ObservationDate'].unique())\nax1.bar(dates_list, skdg['Confirmed'], label='Confirmed')\nax1.bar(dates_list, skdg['Deaths'], label='Deaths')\nax1.plot(dates_list , skdg['Death_rate_ended'], label = 'Death rate closed cases')\nax1.plot(dates_list , skdg['Death_rate'], label = 'Death rate')\nax1.tick_params(axis='y')\nplt.xticks(rotation=45)\nplt.legend()\nplt.show()","a9e20954":"fig, ax1 = plt.subplots()\nax1.set(xlabel='Dates', ylabel='Number of cases', title='South Korea')\nformatter = mdates.DateFormatter(\"%Y-%m-%d\")\nax1.xaxis.set_major_formatter(formatter)\nplt.xticks(rotation=45)\nax2 = ax1.twinx() \ndates_list = list(skdg['ObservationDate'].unique())\nb1 = ax1.bar(dates_list, skdg['Confirmed'], label='Confirmed')\nb2 = ax1.bar(dates_list, skdg['Deaths'], label='Deaths')\nl1 = ax2.plot(dates_list , skdg['Death_rate_ended'], label = 'Death rate closed cases')\nl2 = ax2.plot(dates_list , skdg['Death_rate'], label = 'Death rate')\nax1.tick_params(axis='y')\n#plt.legend()\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2)\nplt.show()","dbb3567a":"from bokeh import palettes as bh\ncolors = bh.all_palettes['PiYG'][4]\nfig, ax1 = plt.subplots()\nax1.set(xlabel='Dates', ylabel='Number of cases', title='South Korea')\nformatter = mdates.DateFormatter(\"%Y-%m-%d\")\nax1.xaxis.set_major_formatter(formatter)\nplt.xticks(rotation=45)\nax2 = ax1.twinx() \ndates_list = list(skdg['ObservationDate'].unique())\nb1 = ax1.bar(dates_list, skdg['Confirmed'], label='Confirmed', color = colors[1])\nb2 = ax1.bar(dates_list, skdg['Deaths'], label='Deaths', color = colors[2])\nl1 = ax2.plot(dates_list , skdg['Death_rate_ended'], label = 'Death rate closed cases', color = colors[0])\nl2 = ax2.plot(dates_list , skdg['Death_rate'], label = 'Death rate', color = colors[3])\nax1.tick_params(axis='y')\n\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2)\nplt.show()","9f27ecc1":"import matplotlib.ticker as mtick\nplt.style.use('bmh')\nfig, ax1 = plt.subplots(figsize=(10,5))\nax1.set(xlabel='Dates', ylabel='Number of cases', title='South Korea')\n\nformatter = mdates.DateFormatter(\"%Y-%m-%d\")\nax1.xaxis.set_major_formatter(formatter)\nplt.xticks(rotation=45)\nax2 = ax1.twinx() \nax2.yaxis.set_major_formatter(mtick.PercentFormatter(1))\ndates_list = list(skdg['ObservationDate'].unique())\nb1 = ax1.bar(dates_list, skdg['Confirmed'], label='Confirmed', color = colors[1])\nb2 = ax1.bar(dates_list, skdg['Deaths'], label='Deaths', color = colors[2])\nl1 = ax2.plot(dates_list , skdg['Death_rate_ended'], label = 'Death rate closed cases', color = colors[0])\nl2 = ax2.plot(dates_list , skdg['Death_rate'], label = 'Death rate', color = colors[3])\nax1.tick_params(axis='y')\n\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2,loc=2)\nax1.set_ylim(0,10000)\nax2.set_ylim(0,0.5)\nplt.show()","87eeed1f":"skdg_50 = skdg[skdg['Confirmed']>=50]\nskdg_50[\"date_int\"] = skdg_50[\"ObservationDate\"].apply(lambda row: int(row.strftime(\"%Y%m%d%H%M%S\")))\nskdg_50[\"day_no\"] = skdg_50.groupby(\"Country\/Region\")[\"date_int\"].rank(\"dense\", ascending=True)","d7eb19f5":"plt.style.use('seaborn-whitegrid')\np = ['#b50007','#ffb42b','#5d3baf','#35B778']\nfig, ax1 = plt.subplots(figsize=(10, 5))\nax1.set(xlabel='Day since patient 50th', ylabel='Death rate',\n       title='South Korea') \nax2.yaxis.set_major_formatter(mtick.PercentFormatter(1))\nx_values = list(skdg_50['day_no'].astype(int).unique())\nax2 = ax1.twinx() \nax2.yaxis.set_major_formatter(mtick.PercentFormatter(1))\nax2.plot(x_values , skdg_50['Death_rate_ended'],  color=p[1],\n         linewidth=2, label = 'Death rate closed cases')\nax2.plot(x_values , skdg_50['Death_rate'],  color=p[3],\n         linewidth=2, label = 'Death rate')\nax1.bar(x_values, skdg_50['Confirmed'], label='Confirmed',  color=p[2])\nax1.bar(x_values, skdg_50['Deaths'], label='Deaths',  color=p[0])\nax1.tick_params(axis='y')\nax1.set_ylim(0,10000)\nax2.set_ylim(0,0.5)\nax1.tick_params(axis='y')\n\nax1.legend(bbox_to_anchor=(0.16, 0.89))\nax2.legend(bbox_to_anchor=(0.27, 1))\n#fig.savefig(\"South Korea.png\")\nplt.show()","34659dc6":"To change the xaxis to nice dates we use **mdates**. ","727277f6":"Let's start with simple graph. ","17582bb3":"## Death rate\nLet's now add two lines, which are showing the proporcion of deaths to all confirmed cases, or deaths to death + recovered","d7b9d0cc":"## Step by step","ee7dc631":"Now we can also change the style of the graph by simple adding of the style. \nhttps:\/\/matplotlib.org\/3.1.0\/gallery\/style_sheets\/style_sheets_reference.html","ae6e1e66":"I already know, that we don't have data for the Province\/State in South Korea, so we have only one record per day. But if we have data from different Provinces we would need to group the data before we will work with them further.","73d11074":"Death_rate_1 = $\\frac{deaths}{confirmed} $ ","6a518afb":"And some other version of the graph. ","fc49f334":"Now, let's add the title and X-axis and Y-axis names and legend. ","13084f4e":"To add the lines we simple use plot function. ","0ac0fa23":"We see that number of confirmed cases is increasing, all metrcis: Confirmed, Deaths, Recovered are cumulated metrics. We will need to calculate the metrics per day later. ","6c19f525":"We need to calculate now the metrics per day: confirmed and deaths. To make the next part simpler I renamed the dataset to skdg. ","e2cd0dc0":"## South Korea\nIn begin we want to use only South Korea data. ","b1254b2b":"Now, the lines are visible, but we have blue line on blue graph. We will use bokeh library to get some nice palettes. ","c1ff0eed":"Few days ago I wrote article about mortality rate in South Korea, China and Italy, Today I presented how I prepared graphs. So I decided to share it also here. ","661c851c":"We see in legend that the lines should be added. But they are not visible. It's because the death rate is very smal, between 0 and 1, so it's not visible in the current version of Y-axis. We will add the second axis. Please remeber to be careful with it, it shhould be used only when there is no risk of mixing the dataset and axis. ","ee57f918":"We see that dates are still overlaping, let's fix it by rotation. ","9f81861d":"# South Korea case, and few other mortality rates","3a1e420d":"Death_rate_2 = $\\frac{deaths}{deaths + recovered}$","33280663":"We see that something wrong happened with x-axis. Let's fix it. \nTo do it we need to change ObservationDate column to the date format. We currently have American format of date (mm\/dd\/yyyy), which is treated as string. We need to tell Python what is the format od the date and it will be converted by function strptime. "}}