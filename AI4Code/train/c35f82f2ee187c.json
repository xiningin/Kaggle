{"cell_type":{"9bce9e23":"code","c621a656":"code","8a8ba125":"code","6cdc372c":"code","03844650":"code","c06cb108":"code","35294cdf":"code","b0e27800":"code","f83c64c3":"code","2fe4a7c0":"code","3c730f9e":"code","8d7ac2d0":"code","ef9bfbc3":"code","ea982dae":"code","3889b112":"code","3a35c9b6":"code","695b5782":"code","3f4d78a2":"code","0db38a66":"code","e165a03c":"code","662bbc03":"code","8d445e9f":"code","214f0384":"code","8843a811":"code","e3894cf6":"code","37ec58ce":"code","2ede9c21":"code","f8610e6d":"code","98b89153":"code","9b44b992":"code","18baf0ee":"code","35dc7fbc":"code","7d2da995":"code","26fd080c":"code","ad9e264b":"markdown","2a8e1ed4":"markdown","10f36b45":"markdown","76994a88":"markdown","0691818d":"markdown","2f783054":"markdown","81a3ec63":"markdown","fc5e3fda":"markdown","42d5afc7":"markdown","5a12ac09":"markdown","ecff4648":"markdown","a4012a4b":"markdown","d4de3b54":"markdown","7017dc4d":"markdown","ee764fc0":"markdown","bf93e8d4":"markdown","7e48710e":"markdown","8fabfec5":"markdown","eacbfea4":"markdown","7ee52ad7":"markdown"},"source":{"9bce9e23":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c621a656":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8a8ba125":"# Local\n# df = pd.read_csv('Data\/Stars.csv')\n\n# Kaggle\ndf = pd.read_csv('\/kaggle\/input\/star-type-classification\/Stars.csv')\ndf.head()","6cdc372c":"df","03844650":"df.info()","c06cb108":"df.isnull().sum()","35294cdf":"plt.figure(figsize=(20,10))\nplt.title('Value Count of Type')\nsns.countplot(data=df, x='Type');","b0e27800":"plt.figure(figsize=(20,10))\nplt.title('Value Count of Spectral_Class')\nsns.countplot(data=df, x='Spectral_Class');","f83c64c3":"plt.figure(figsize=(20,10))\nplt.title('Value Count of Color')\nplt.xticks(rotation=90)\nsns.countplot(data=df, x='Color');","2fe4a7c0":"sns.pairplot(data=df, hue='Type');","3c730f9e":"plt.figure(figsize=(20,10))\nplt.title('Temperature vs L vs Color')\nsns.scatterplot(data=df, x='Temperature', y='L', hue='Color', s=150);","8d7ac2d0":"plt.figure(figsize=(20,20))\nplt.title('Heatmap of Pearson corrlation')\nsns.heatmap(data=round((pd.get_dummies(df)).corr(),2),annot=True);","ef9bfbc3":"X = df.drop('Type', axis = 1)\nX = pd.get_dummies(X, drop_first = True)\ny = df['Type']","ea982dae":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","3889b112":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","3a35c9b6":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","695b5782":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom xgboost import XGBClassifier, XGBRFClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier","3f4d78a2":"from warnings import filterwarnings","0db38a66":"filterwarnings('ignore')","e165a03c":"def fit_and_score(models, X_train, X_test, y_train, y_test):\n    np.random.seed(42)\n    \n    model_scores = {}\n    \n    for name, model in models.items():\n        model.fit(X_train,y_train)\n        model_scores[name] = model.score(X_test,y_test)\n\n    model_scores = pd.DataFrame(model_scores, index=['Score']).transpose()\n    model_scores = model_scores.sort_values('Score')\n        \n    return model_scores","662bbc03":"models = {'LogisticRegression': LogisticRegression(max_iter=10000),\n          'KNeighborsClassifier': KNeighborsClassifier(),\n          'SVC': SVC(),\n          'DecisionTreeClassifier': DecisionTreeClassifier(),\n          'RandomForestClassifier': RandomForestClassifier(),\n          'AdaBoostClassifier': AdaBoostClassifier(),\n          'GradientBoostingClassifier': GradientBoostingClassifier(),\n          'XGBClassifier': XGBClassifier(),\n          'XGBRFClassifier': XGBRFClassifier(),\n          'LGBMClassifier':LGBMClassifier()}","8d445e9f":"baseline_model_scores = fit_and_score(models, X_train, X_test, y_train, y_test)","214f0384":"baseline_model_scores","8843a811":"plt.figure(figsize=(20,10))\nsns.barplot(data=baseline_model_scores.sort_values('Score').T)\nplt.title('Baseline Model Precision Score')\nplt.xticks(rotation=90);","e3894cf6":"from sklearn.metrics import classification_report, plot_confusion_matrix, plot_roc_curve\nfrom sklearn.model_selection import cross_val_score","37ec58ce":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\ny_preds = model.predict(X_test)","2ede9c21":"print(classification_report(y_test,y_preds))","f8610e6d":"plot_confusion_matrix(model,X_test,y_test)","98b89153":"def get_cv_score(model, X, y, cv=5):\n    \n    np.random.seed(42)\n    cv_accuracy = cross_val_score(model,X,y,cv=cv,\n                         scoring='accuracy')\n    print(f'Cross Validaion accuracy Scores: {cv_accuracy}')\n    print(f'Cross Validation accuracy Mean Score: {cv_accuracy.mean()}')\n      \n    \n    cv_merics = pd.DataFrame({'Accuracy': cv_accuracy.mean()},index=[0])\n    \n    return cv_merics","9b44b992":"cv_merics = get_cv_score(model, X_train, y_train, cv=10)","18baf0ee":"cv_merics","35dc7fbc":"feat_importances = pd.DataFrame(model.coef_[1], index=X.columns)","7d2da995":"feat_importances","26fd080c":"plt.figure(figsize=(20,10))\nplt.xticks(rotation=90)\nplt.title('Feature Importances')\nsns.barplot(data= feat_importances.sort_values(0).T);","ad9e264b":"With a Logistic Regression we have a score of 100%\n\nwith a Cross Validation accuracy Mean Score: 0.99375","2a8e1ed4":"# Star Type Classification\n\nGoing to take the following approach:\n\n1. Problem definition\n2. Data\n3. Evaluation\n4. Features\n5. Modelling\n6. Model Evaluation\n7. Experientmetion \/ Improvements","10f36b45":"## Standard Import","76994a88":"## Reading the Dataset","0691818d":"# 4. Features\n\n## inputs \/ features\n    1. Temperature -- K\n    2. L -- L\/Lo\n    3. R -- R\/Ro\n    4. AM -- Mv\n    5. Color -- General Color of Spectrum\n    6. Spectral_Class -- O,B,A,F,G,K,M \/ SMASS - https:\/\/en.wikipedia.org\/wiki\/Asteroid_spectral_types\n    7. Type -- Red Dwarf, Brown Dwarf, White Dwarf, Main Sequence , Super Giants, Hyper Giants\n\n## Output \/ label\n    8. Type    \n        Red Dwarf - 0\n        Brown Dwarf - 1\n        White Dwarf - 2\n        Main Sequence - 3\n        Super Giants - 4\n        Hyper Giants - 5\n\n### Math\n\nLo = 3.828 x 10^26 Watts\n(Avg Luminosity of Sun)\n\nRo = 6.9551 x 10^8 m\n(Avg Radius of Sun)","2f783054":"## Model Imports","81a3ec63":"# 3. Evaluation\n\nAs this is a classification problem, we will use the classification metics for evauluting the model","fc5e3fda":"# 5. Modelling","42d5afc7":"# 2. Data\n\nData from: https:\/\/www.kaggle.com\/brsdincer\/star-type-classification","5a12ac09":"## LogisticRegression","ecff4648":"### Confustion Matrix","a4012a4b":"## Baseline Model Scores","d4de3b54":"# 1. Problem Definition\n\nHow we can use various python based Machine Learning Model and the given parameters to predict if we can predict the Star Type Classification?","7017dc4d":"## Data Exporation","ee764fc0":"Label is very well balanced.","bf93e8d4":"# 6. Model Evalution","7e48710e":"Since a lot models is performing so well, we will try out with the LogisticRegression as that is a simpler model to work with","8fabfec5":"### Feature Importances","eacbfea4":"### Classification Report","7ee52ad7":"### Evalution using cross-validation"}}