{"cell_type":{"be53c73e":"code","ce9a63da":"code","f16e133f":"code","3a64d508":"code","750d1e99":"code","a404b198":"code","34ad4e48":"code","624b3cbc":"code","fb3ee2e7":"code","b44ceaef":"code","46e7258c":"code","0dc99911":"code","12146855":"code","88ab9253":"code","836608db":"code","293b3a62":"code","9470cd60":"code","738d05fe":"code","a132c5bd":"code","e9fad06c":"code","a139c883":"code","1dc999e5":"code","fc809051":"code","f32e79ee":"code","3a004f9d":"code","e07eeaf5":"code","6980fa7b":"code","84b61810":"code","fd5d359f":"code","3c08de44":"code","96fec3c8":"code","a1d2c888":"code","cf924802":"code","b34b58c5":"code","e17840e3":"code","d9fffaba":"code","5d6a20e7":"markdown","9e88b7ed":"markdown","01bc0e10":"markdown","55415fb3":"markdown","ad17abe6":"markdown","863ea840":"markdown","425096be":"markdown"},"source":{"be53c73e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce9a63da":"import matplotlib.pyplot as plt","f16e133f":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","3a64d508":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","750d1e99":"football","a404b198":"edu = pd.read_csv('\/kaggle\/input\/ense3-ict\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])","34ad4e48":"edu","624b3cbc":"edu.tail()","fb3ee2e7":"edu.head()","b44ceaef":"edu.describe()","46e7258c":"edu['Value']","0dc99911":"edu[10:14]","12146855":"edu.iloc[90:94][['TIME','GEO']]","88ab9253":"edu[edu['Value'] > 6.5].tail()","836608db":"edu[edu[\"Value\"].isnull()].head()","293b3a62":"edu.max(axis = 0)","9470cd60":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","738d05fe":"s = edu[\"Value\"]\/100\ns.head()","a132c5bd":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","e9fad06c":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","a139c883":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","1dc999e5":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","fc809051":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","f32e79ee":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","3a004f9d":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","e07eeaf5":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","6980fa7b":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","84b61810":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","fd5d359f":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","3c08de44":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","96fec3c8":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","a1d2c888":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","cf924802":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","b34b58c5":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","e17840e3":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","d9fffaba":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","5d6a20e7":"5.What does this index return? What does the first index represent? And the second one?\n\nIndex return is used to display specific subset of rows and columns using the labels as our references instead of the positions. first index [90:94] represents rows that we want to see and second index [time.go] represents the column.","9e88b7ed":"7.What do you observe regarding the parameter ascending=False?\n\nThe parameter ascending=False do not sort the values in ascending order.","01bc0e10":"1.Which is the size of the edu DataFrame (rows x columns)?\n\n384rows and 3 columns.\nsize of edu DataFRame is 1152 (384x3).","55415fb3":"4.Which measures does the result show? It seems that it shows some default values, can you guess which ones?\n\nWe have count (number of values), mean, std, minimum, maximum, quarter1, half and quarter3.","ad17abe6":"6. What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\n\nThe command uses the result of a Boolean operation over the data, returning a mask with True or False for each row. The rows marked True in the mask will be selected. \n\nIn this case, the command will select the rows where the Value is more than 6.5 and it produces a new DataFrame.","863ea840":"2.What happens if we give a number as argument to the method head()?\n\nhead() function will display the first 5 rows by default.","425096be":"3.What does the method tail()return?\n\ntail() function will display last 5 rows by default."}}