{"cell_type":{"8b355ab3":"code","1fefb07b":"code","885658d8":"code","a5f0cb80":"code","dac2ef0c":"code","8e46970a":"code","e885aff2":"code","cad7163a":"code","f5882bba":"code","1663fa80":"code","076e9003":"code","8586de3a":"code","8c06f1fe":"code","c4069bcd":"code","7b9d3568":"code","5f3b4c46":"code","44d56fdd":"code","b795480a":"code","cb7686da":"code","9d148411":"code","5fb38cf7":"code","1a71d005":"code","ae3980c5":"code","2e1c1742":"code","86f84f72":"code","4776056f":"code","51184c32":"code","1f7332d2":"code","afe0ab02":"code","f8c2526b":"code","2ced4b72":"code","9beb49e7":"code","3bc8a8e1":"code","8764ae9e":"code","95d098e2":"code","90d2a4a7":"code","73dadc77":"markdown","f5ac3e41":"markdown","df1f2f8e":"markdown","e701c636":"markdown","f2dcbd3f":"markdown","1be78393":"markdown","b0176ab5":"markdown","48beeec1":"markdown","33f2502d":"markdown","c5233226":"markdown","1b42eae4":"markdown"},"source":{"8b355ab3":"our_string = \"Hello World!\"","1fefb07b":"our_string","885658d8":"\"I said: \" + our_string","a5f0cb80":"our_string * 3","dac2ef0c":"our_string[2:5]","8e46970a":"our_string[-5:-2]","e885aff2":"our_string[1:]","cad7163a":"our_string[:-1]\n","f5882bba":"our_string[:5] = 'Howdy'","1663fa80":"our_string[1]","076e9003":"our_string[0]","8586de3a":"our_string[1]","8c06f1fe":"our_string[2]","c4069bcd":"our_string[3]","7b9d3568":"our_string[4]","5f3b4c46":"our_string[-1]","44d56fdd":"our_string.upper()","b795480a":"our_string.lower()","cb7686da":"our_string.startswith('Hello')","9d148411":"our_string.endswith('World!')","5fb38cf7":"our_string.endswith('world!')  # Python is case-sensitive","1a71d005":"our_string.replace('World', 'there')","ae3980c5":"our_string.replace('o', '@', 1)   # only replace one o","2e1c1742":"'  hello 123  '.lstrip()    # left strip","86f84f72":"'  hello 123  '.rstrip()    # right strip","4776056f":"'  hello 123  '.strip()     # strip from both sides","51184c32":"'  hello abc'.rstrip('cb')  # strip c's and b's from right","1f7332d2":"our_string.ljust(30, '-')","afe0ab02":"our_string.rjust(30, '-')","f8c2526b":"our_string.center(30, '-')","2ced4b72":"our_string.count('o')   # it contains two o's","9beb49e7":"our_string.index('o')   # the first o is our_string[4]","3bc8a8e1":"our_string.rindex('o')  # the last o is our_string[7]","8764ae9e":"'-'.join(['hello', 'world', 'test'])","95d098e2":"'hello-world-test'.split('-')","90d2a4a7":"our_string.upper()[3:].startswith('LO WOR')  # combining multiple things","73dadc77":"So the syntax is like `some_string[start:end]`.\n\nThis picture explains how the slicing works:\n\n![image.png](attachment:image.png)\n\nBut what happens if we slice with negative values?","f5ac3e41":"So far we know how to add them together.","df1f2f8e":"Remember that strings can't be changed in-place.","e701c636":"We got the last character.\n\nBut why didn't that start at zero? `our_string[-1]` is the last\ncharacter, but `our_string[1]` is not the first character!\n\nThat's because 0 and -0 are equal, so indexing with -0 would do the same\nthing as indexing with 0.\n\nIndexing with negative values works like this:\n\n![Indexing with negative values](..\/images\/indexing2.png)\n\n## String methods\n\nPython's strings have many useful methods.\n[The official documentation](https:\/\/docs.python.org\/3\/library\/stdtypes.html#string-methods)\ncovers them all, but I'm going to just show some of the most commonly\nused ones briefly. Python also comes with built-in documentation about\nthe string methods and we can run `help(str)` to read it. We can also\nget help about one string method at a time, like `help(str.upper)`.\n\nAgain, nothing can modify strings in-place. Most string methods\nreturn a new string, but things like `our_string = our_string.upper()`\nstill work because the new string is assigned to the old variable.\n\nAlso note that all of these methods are used like `our_string.stuff()`,\nnot like `stuff(our_string)`. The idea with that is that our string\nknows how to do all these things, like `our_string.stuff()`, we don't\nneed a separate function that does these things like `stuff(our_string)`.\nWe'll learn more about methods [later](classes.md).\n\nHere's an example with some of the most commonly used string methods:","f2dcbd3f":"Python strings are [immutable](https:\/\/docs.python.org\/3\/glossary.html#term-immutable).\nThat's just a fancy way to say that\nthey cannot be changed in-place, and we need to create a new string to\nchange them. Even `some_string += another_string` creates a new string.\nPython will treat that as `some_string = some_string + another_string`,\nso it creates a new string but it puts it back to the same variable.\n\n`+` and `*` are nice, but what else can we do with strings?\n\n## Slicing\n\nSlicing is really simple. It just means getting a part of the string.\nFor example, to get all characters between the second place between the\ncharacters and the fifth place between the characters, we can do this:","1be78393":"So string indexes work like this:\n\n![image.png](attachment:image.png)\n\nHow about negative values?","b0176ab5":"We also know how to repeat them multiple times.","48beeec1":"It turns out that slicing with negative values simply starts counting\nfrom the end of the string.\n\n![Slicing with negative values](..\/images\/slicing2.png)\n\nIf we don't specify the beginning it defaults to 0, and if we don't\nspecify the end it defaults to the length of the string. For example, we\ncan get everything except the first or last character like this:","33f2502d":"That's interesting. We got a string that is only one character long. But\nthe first character of `Hello World!` should be `H`, not `e`, so why did\nwe get an e?\n\nProgramming starts at zero. Indexing strings also starts at zero. The\nfirst character is `our_string[0]`, the second character is\n`our_string[1]`, and so on.","c5233226":"There's also a step argument we can give to our slices, but I'm not\ngoing to talk about it now.\n\n## Indexing\n\nSo now we know how slicing works. But what happens if we forget the `:`?","1b42eae4":"# Strings\n\nPython strings are just pieces of text."}}