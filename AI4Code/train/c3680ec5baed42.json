{"cell_type":{"019ebc41":"code","314202bd":"code","52f04ba2":"code","f8fc408d":"code","7397d6f5":"code","3bcdb8ed":"code","30d2bba3":"code","048e93d7":"code","6cd23f6a":"code","3445962f":"code","4124191a":"code","dfc2826c":"code","10dee677":"code","7abd2ef6":"code","e78634c8":"code","166caabc":"code","72b37acf":"code","1b5afe92":"code","c82dbfa6":"code","a4a2a719":"code","d9c9a5e6":"code","a6af9d00":"code","00d02c3e":"markdown","deb6bd9e":"markdown","dcf10824":"markdown","909960ec":"markdown"},"source":{"019ebc41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","314202bd":"df = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')","52f04ba2":"df.shape","f8fc408d":"df.dtypes","7397d6f5":"for col in df.columns :\n    print('Column Name : ' +str(col))\n    print(df[col].value_counts())\n    print('***************')\n    ","3bcdb8ed":"for col in df.columns :\n    index = np.array(df[col].value_counts().index)\n    index = index.astype('str')\n    if(len(np.where(index == '?')[0])>0):\n        print('Missing Values in : '+col)\n    ","30d2bba3":"df['class'] = df['class'].replace({'p':1,'e':0})","048e93d7":"df['stalk-root'] = df['stalk-root'].replace({'?':np.NAN})","6cd23f6a":"df.dropna(inplace = True)","3445962f":"def OneHotEncodeing (columns) :\n try :\n    global df\n    df_tempp = pd.DataFrame()\n    df_temp = pd.DataFrame()\n    flag = False\n    for col in columns :\n      if(not(flag)):\n        df_tempp = pd.get_dummies(df[str(col)], prefix= str(col))\n        flag = True\n      else :\n        df_temp = pd.get_dummies(df[str(col)], prefix= str(col))\n        df_tempp = pd.concat([df_tempp,df_temp],axis = 1 )\n      df.drop(columns= str(col),axis = 'columns',inplace = True)\n    df = pd.concat([df_tempp,df],axis = 1 )\n except :\n   print('Error at : ',col)","4124191a":"OneHotEncodeing (['cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor',\n       'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',\n       'stalk-shape', 'stalk-root', 'stalk-surface-above-ring',\n       'stalk-surface-below-ring', 'stalk-color-above-ring',\n       'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number',\n       'ring-type', 'spore-print-color', 'population', 'habitat'])","dfc2826c":"df_corr_mat = df.corr()['class']","10dee677":"feature_lst = []\ncorrleation_val = 0.3\nfor index in df_corr_mat.index :\n  if((df_corr_mat[index]>=corrleation_val) or (df_corr_mat[index] <= -corrleation_val)):\n    if(index != 'class') :\n      feature_lst.append(index)","7abd2ef6":"figure = plt.figure(figsize= (10,8))\nax = figure.add_subplot(111)\ndf_corr_mat[feature_lst].plot(kind = 'bar',ax=ax)","e78634c8":"train, validate, test = np.split(df.sample(frac=1), [int(.6*len(df)), int(.8*len(df))])","166caabc":"X_train = train[feature_lst]\nX_val = validate[feature_lst]\nX_test = test[feature_lst]\nY_train = train['class']\nY_val = validate['class']\nY_test = test['class']","72b37acf":"c = 100\nlist = []\nwhile c >=0.0001:\n    list.append(c\/2)\n    c = c-c\/2\n    \nscore_list_val = []\nscore_list_train = []\nC_list = []\nfor param in list :\n    clf = LinearSVC(loss =\"hinge\", C=param,max_iter=10000)\n    clf.fit(X_train,Y_train)\n    Y_predict_val = clf.predict(X_val)\n    score_list_val.append(f1_score(Y_val,Y_predict_val))\n    \n    Y_predict_train = clf.predict(X_train)\n    score_list_train.append(f1_score(Y_train,Y_predict_train))\n    C_list.append(str(param))\n    \n    \ndf_train_score =  pd.DataFrame(data = score_list_train,index = C_list,columns = ['Train_F1_Score'])\ndf_val_score =  pd.DataFrame(data = score_list_val,index = C_list,columns = ['Validation_F1_Score'])","1b5afe92":"df_train_score.reset_index(inplace = True)\ndf_val_score.reset_index(inplace = True)","c82dbfa6":"figure = plt.figure(figsize= (18,5))\nax = figure.add_subplot(111)\ndf_val_score.plot(ax= ax,x='index',y='Validation_F1_Score',marker = 'o')\ndf_train_score.plot(ax= ax,x='index',y='Train_F1_Score',marker = 'o')\nax.set_xlabel(\"C parameter Values\")\nax.set_title(\"F1_score VS parameter C\")","a4a2a719":"df_val_score","d9c9a5e6":"C = 0.09765625\n\nclf = LinearSVC(loss =\"hinge\", C=C,max_iter=10000)\nclf.fit(X_train,Y_train)\nY_predict = clf.predict(X_test)","a6af9d00":"print('recall_score is : ' +str(recall_score(Y_test,Y_predict)))\nprint('precision_score is : ' +str(precision_score(Y_test,Y_predict)))\nprint('f1_score is : ' +str(f1_score(Y_test,Y_predict)))\ncnf_matrix_val = confusion_matrix(Y_test,Y_predict)\nsns.heatmap(pd.DataFrame(cnf_matrix_val), annot=True, cmap=\"YlGnBu\" ,fmt='g')","00d02c3e":"# Data Set Information:\n\n**This data set includes descriptions of hypothetical samples corresponding to 23 species of gilled mushrooms in the Agaricus and Lepiota Family (pp. 500-525). Each species is identified as definitely edible, definitely poisonous, or of unknown edibility and not recommended. This latter class was combined with the poisonous one. The Guide clearly states that there is no simple rule for determining the edibility of a mushroom; no rule like ``leaflets three, let it be'' for Poisonous Oak and Ivy.**","deb6bd9e":"F1 score varying with C (regularization parameter in SVM)","dcf10824":"# Attribute Information:\n\n1. cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n2. cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n3. cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r, pink=p,purple=u,red=e,white=w,yellow=y\n4. bruises?: bruises=t,no=f\n5. odor: almond=a,anise=l,creosote=c,fishy=y,foul=f, musty=m,none=n,pungent=p,spicy=s\n6. gill-attachment: attached=a,descending=d,free=f,notched=n\n7. gill-spacing: close=c,crowded=w,distant=d\n8. gill-size: broad=b,narrow=n\n9. gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e, white=w,yellow=y\n10. stalk-shape: enlarging=e,tapering=t\n11. stalk-root: bulbous=b,club=c,cup=u,equal=e, rhizomorphs=z,rooted=r,missing=?\n12. stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n13. stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n14. stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n15. stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n16. veil-type: partial=p,universal=u\n17. veil-color: brown=n,orange=o,white=w,yellow=y\n18. ring-number: none=n,one=o,two=t\n19. ring-type: cobwebby=c,evanescent=e,flaring=f,large=l, none=n,pendant=p,sheathing=s,zone=z\n20. spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r, orange=o,purple=u,white=w,yellow=y\n21. population: abundant=a,clustered=c,numerous=n, scattered=s,several=v,solitary=y\n22. habitat: grasses=g,leaves=l,meadows=m,paths=p, urban=u,waste=w,woods=d\n\n","909960ec":"# Thank You"}}