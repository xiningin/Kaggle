{"cell_type":{"13059440":"code","a8f92524":"code","8398b404":"code","00be16a1":"code","c585ba6a":"code","a21629e0":"code","8b55ea72":"code","3586f791":"code","e1a2029e":"code","66496b0f":"code","1962c802":"code","bbb93872":"code","4e66e777":"code","2017e993":"code","f21099ef":"code","8f6671c4":"code","3132fe7b":"markdown","9306a166":"markdown","7fba8aa7":"markdown","1a386791":"markdown","495a22d9":"markdown","00064839":"markdown","b489dfb9":"markdown","674eec51":"markdown","1aa52637":"markdown","1c8f4bdf":"markdown","b79a55a8":"markdown","1b42df95":"markdown","cb8193b0":"markdown","c435565c":"markdown","a2b140cd":"markdown"},"source":{"13059440":"from IPython.core.interactiveshell import InteractiveShell  \nInteractiveShell.ast_node_interactivity = \"all\"","a8f92524":"sentence = 'algorithm'\nsentence.center(15,'#')","8398b404":"sentence = 'She sells seashells by the seashore. The shells she sells are surely seashells'\nsentence.count('seashells')\nsentence.count('seashells',9,25)","00be16a1":"sentence = 'She sells seashells by the seashore. The shells she sells are surely seashells'\nsentence.find('seashells')\nsentence.find('seashells',0,9)\nsentence.find('s',5,10)\nsentence.rfind('seashells')","c585ba6a":"sentence = 'Queue IS another FUNDAMENTAL data STRucture AND IS a close COUSIN of the STACK'\nsentence.swapcase()","a21629e0":"#string.startswith()\n\nsentence = 'Binary Search is a classic recursive algorithm'\nsentence.startswith(\"Binary\")\nsentence.startswith(\"Search\",7,20)","8b55ea72":"#string.split()\n\nfruits = 'apples, mangoes, bananas, grapes'\nfruits.split()\nfruits.split(\",\",maxsplit = 2)","3586f791":"#string.rsplit()\nfruits.rsplit(\",\",maxsplit = 1)","e1a2029e":"\"san francisco\".capitalize()","66496b0f":"\"san francisco\".upper()","1962c802":"\"san francisco\".title()","bbb93872":"#str.rjust\ntext = 'Binary Search'\nprint(text.rjust(25),\"is a classic recursive algorithm\")","4e66e777":"#str.ljust\ntext = 'Binary Search'\nprint(text.ljust(25),\"is a classic recursive algorithm\")","2017e993":"#str.strip\nstring = '#.......Section 3.2.1 Issue #32......'\nstring.strip('.#!')","f21099ef":"#str.rstrip\nstring.rstrip('.#!')\nstring.lstrip('.#!')","8f6671c4":"'7'.zfill(3)\n'-21'.zfill(5)\n'Python'.zfill(10)\n'Python'.zfill(3)","3132fe7b":"## 2. count(\u00a0)\n\nThe `count()` method returns the count or the number of times a particular value appears in a string.\n\n### Syntax\n```\nstr.count(value, start, end), where\u00a0:\n```\n* **value** is the substring which is to be searched in the string [_Required_]\n* **start** is the starting index within the string where the search for the specified value starts [_Optional_]\n* **end** is the ending index within the string where the search for the specified value ends [_Optional_]","9306a166":"## 9. strip(\u00a0)\u00a0\n\nThe **strip()** method returns a copy of the string with the leading and trailing characters removed. Default character to be removed is whitespace.\n\n### Syntax\n```\nstring.strip(character)\n```\n* **character**: set of characters to be removed **[Optional]**\n\n### Versions\n```\nrstrip(): strips characters from the right of a string.\nlstrip(): strips characters from the left of a string.\n```","7fba8aa7":"## 7.String Capitalization\n\n### 1. capitalize()\n\nThe **capitalize()** method capitalizes only the first character of the given string.\n\n### Syntax\n```\nstring.capitalize()\n```","1a386791":"## 4. swapcase( )\nThe `swapcase()` method returns a copy of the string with all its uppercase letters converted into lower case and vice versa.\n\n### Syntax\n```\nstring.swapcase()\n```","495a22d9":"## 5. startswith( ) and endswith( )\n\nThe `startswith()` method returns True if the string starts with the specified value, otherwise it returns False.\nThe `endswith()` function, on the other hand, returns True if the string endswith the specified value, else it returns False.\n\n### Syntax\n```\nstring.startswith(value, start, end)\nstring.endsswith(value, start, end)\n```\n* **value** is the string to look for in the string _[Required]_\n* **start** is the starting index within the string where the search for the specified value starts _[Optional]_\n* **end** is the ending index within the string where the search for the specified value ends _[Optional]_","00064839":"### 3. string.title( )\n\nThe **title()** method capitalizes all the first letters of the string.\n\n### Syntax\n```\nstring.title()\n```","b489dfb9":"## 10. zfill(\u00a0)\n\nThe **zfill()** method adds zeros(0) at the beginning of the string. The length of the returned string depends on the width provided.\n\n### Syntax\n```\nstring.zfill(width)\n```\n**width**: specifies the length of the returned string. However, no zeros are added if the width parameter is less than the length of the original string.","674eec51":"## 8. ljust( ) and rjust(\u00a0)\n\nThe **ljust()** method returns a left-justified version of the given string using a specified character, whitespace being default. The **rjust()** methods aligns the string to the right.\n\n### Syntax\n```\nstring.rjust\/ljust(length, character)\n```\n* **length**: length of the string which is to be returned _[Required]_\n* **character**: Character used for filling in the missing space where whitespace is default _[Optional]_","1aa52637":"### 3. find(\u00a0)\u00a0\n\nThe `find()` method returns the lowest index of a particular substring in a string. If the substring is not found, -1 is returned.\u00a0\n\n### Syntax\n\n```\nstr.count(value, start, end), where\u00a0:\n```\n* **value** or substring which is to be searched in the string [_Required_]\n* **start** is the starting index within the string where the search for the specified value starts [_Optional_]\n* **end** is the ending index within the string where the search for the specified value ends [_Optional_]\n\n### Types\n**rfind()**\u00a0: The rfind() method is similar to find() except that it returns the highest index value of the substring","1c8f4bdf":"#string.endswith()\nsentence.endswith('classic')","b79a55a8":"## 6. split(\u00a0)\u00a0\n\nThe `split()` method returns a list of words in a string where default separator is any whitespace.\n\n### Syntax\n```\nstring.split(sep, maxsplit)`\n```\n* **sep**: The separator to be used for splitting the string. if nothing is specified, whitespace is the default separator[Optional]\n* **maxsplit**: denotes the number of splits. Default is -1 which means \"all occurrences\"[Optional]\n\n### Version\n**rsplit()**: splits a string from the right.","1b42df95":"## Let's learn about some of Python's built-in methods that can be used on\u00a0strings\n\n![](https:\/\/miro.medium.com\/max\/1000\/1*wq7EYmhv-6Mwi0IlOWVZSw.jpeg)\n\nA string is a sequence of characters. The built-in string class in Python represents strings based upon the Unicode international character set. Strings implement the common sequence of operations available in Python along with some of the additional methods which are exclusive to them. The figure below shows all of these available methods :\n\n![](https:\/\/miro.medium.com\/max\/473\/1*b0qeZYW-2MeEbG-lSbDogA.gif)\n","cb8193b0":"### 2. upper(\u00a0)\n\nThe **upper()** method only capitalizes the first letter of the string.\n\n### Syntax\n```\nstring.upper()\n```           \n","c435565c":"## 1. center(\u00a0)\n\nThe `center()` method center aligns a string. The alignment is done using a specified character (whitespace is default)\n\n### Syntax\n```\nstr.center(length, fillchar), where\u00a0:\n```\n* **length** is the length of the string [_Required_]\n* **fillchar** is the character which specifies the alignment [_Optional_]\n\n","a2b140cd":"## Conclusion\nThese were some of the useful built-in string methods in Python. There are others which are not mentioned in the article but are equally important. The Python documentation is an excellent resource if you are thinking to go deeper into the details.\n\nP.S : This notebook is also avaailable in the form of a blog here : [Useful String Methods in Python](Useful String Methods in Python)"}}