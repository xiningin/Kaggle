{"cell_type":{"a06772ec":"code","088d3c56":"code","bf5f8b61":"code","0e93d7ff":"code","36ed3e9a":"code","65a87616":"code","c18300c2":"code","e686994e":"code","d7f827dd":"code","e7360d1f":"code","ac9f1f90":"code","26b7c27e":"code","aecd5be0":"code","f3ec8ab9":"code","d7121ca3":"code","a5929528":"markdown","b5a2b026":"markdown","62636069":"markdown","f51624cc":"markdown","2268e40a":"markdown","32917728":"markdown","a6134ed7":"markdown","84143433":"markdown","cd15d07d":"markdown","c2c21fd5":"markdown","293a9553":"markdown"},"source":{"a06772ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","088d3c56":"data_train = pd.read_csv('..\/input\/train.csv')\ndata_test = pd.read_csv('..\/input\/test.csv')\ndata_train.head()","bf5f8b61":"data_train.describe().T","0e93d7ff":"data_train.info()","36ed3e9a":"sns.set_style('darkgrid')\nsns.countplot(data=data_train, x='Survived', hue='Sex')","65a87616":"sns.countplot(data=data_train, x='Survived',hue='Pclass')","c18300c2":"sns.distplot(data_train['Age'].dropna(), bins=30)","e686994e":"figure = plt.figure(figsize=(10,6))\nsns.boxplot(data=data_train, x='Pclass', y='Age')","d7f827dd":"first_mean = round(data_train[data_train['Pclass'] == 1]['Age'].dropna().mean())\nsecond_mean = round(data_train[data_train['Pclass'] == 2]['Age'].dropna().mean())\nthird_mean = round(data_train[data_train['Pclass'] == 3]['Age'].dropna().mean())\n\n# creating function to fill missing age\ndef filling(col):\n    Age = col[0]\n    Pclass = col[1]\n    if pd.isnull(Age):\n        if Pclass == 1:\n            return first_mean\n        elif Pclass == 2:\n            return second_mean\n        else:\n            return third_mean\n    else:\n        return Age\n\ndata_train['Age'] = data_train[['Age', 'Pclass']].apply(filling, axis=1)","e7360d1f":"sex = pd.get_dummies(data_train['Sex'],drop_first=True)\nembarked = pd.get_dummies(data_train['Embarked'],drop_first=True)","ac9f1f90":"X_train = pd.concat([data_train[['Age', 'SibSp', 'Parch']], sex, embarked], axis=1)\ny_train = data_train['Survived']","26b7c27e":"data_test['Age'] = data_test[['Age', 'Pclass']].apply(filling, axis=1)\nsex = pd.get_dummies(data_test['Sex'],drop_first=True)\nembarked = pd.get_dummies(data_test['Embarked'],drop_first=True)\nX_test = pd.concat([data_test[['Age', 'SibSp', 'Parch']], sex, embarked], axis=1)","aecd5be0":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)\nmodel.score(X_train, y_train)","f3ec8ab9":"predictions = model.predict(X_test)\ndata_test['Survived'] = predictions","d7121ca3":"submit = data_test[['PassengerId', 'Survived']]\nsubmit.to_csv('submission.csv', index=False)","a5929528":"We want to fill the missing value in Age. Looking at the boxplot above we can say that older person is more likely to afford higher class ticket. So based off this interpretation we will fill the missing value with age's average based on passenger class.","b5a2b026":"We see that there are some missing value in 'Age' column, we will deal with it later. For now we will continue on our exploration of datasets.","62636069":"### Next we will repeat the same process as above on our test data so we can use it for our prediction later.","f51624cc":"## Data Processing ","2268e40a":"Based off passenger class there is more likely the passenger with higher class tend to survive.","32917728":"# Predicting Titanic Survival","a6134ed7":"Finally we've got our X_train and y_train","84143433":"## Exploratory Data Analysis","cd15d07d":"Since Sex and Embarked columns are categorical data, we will use dummy variables to get their values for our machine learning model.","c2c21fd5":"We can see that there is more female that survive than male.","293a9553":"## Machine Learning Using Random Forest"}}