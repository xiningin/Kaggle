{"cell_type":{"7633a687":"code","b6b5c618":"code","fb9b95a2":"code","3ca1cddc":"code","466871f0":"code","974eb375":"code","54fee91a":"code","fff5649c":"code","934b686f":"code","f8443f55":"code","d0c8cbff":"code","80e6aadb":"code","33359719":"code","fcef739e":"code","1f5fa9c0":"code","d0de0482":"code","a8faf00c":"code","fe2cdfe5":"code","1a2f2b14":"code","2d4edb9e":"markdown","8b69e1a0":"markdown","686ed952":"markdown","31148dea":"markdown"},"source":{"7633a687":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6b5c618":"#import another useful lib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport pandas_profiling as pp\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\n\n","fb9b95a2":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","3ca1cddc":"#Dataset info using Pandas Profiling\npp.ProfileReport(train_df, title = 'Pandas Profiling of Train.csv')","466871f0":"#Data that have >50% unique data kinda useless, so we drop them\ncol_to_drop = [\"PassengerId\", \"Ticket\", \"Cabin\", \"Name\"]\ntrain_df.drop(col_to_drop, axis=1, inplace=True)\ntrain_df","974eb375":"#fill null values in \"Age\" with random values \nmean = train_df['Age'].mean()\nstd = train_df['Age'].std()\nempty = train_df['Age'].isnull().sum()\n\nrand_age = np.random.randint(mean - std, mean + std, size = empty)\nage_slice = train_df['Age'].copy()\nage_slice[np.isnan(age_slice)] = rand_age\ntrain_df['Age'] = age_slice\ntrain_df.isnull().sum()","54fee91a":"#fill embarked values with \"S\" since it was the value that occurs most often \nmodus = 'S'\ntrain_df['Embarked'] = train_df['Embarked'].fillna(modus)\ntrain_df.isnull().sum()","fff5649c":"train_df.info()","934b686f":"#normalize \"Sex\" and \"Embarked\" column\nle = preprocessing.LabelEncoder()\ntrain_df['Sex']= le.fit_transform(train_df['Sex'])\ntrain_df['Embarked']= le.fit_transform(train_df['Embarked'])\ntrain_df","f8443f55":"#Train variable column\ntrain_df_x = train_df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\n\n# Target variable column\ntrain_df_y = train_df[['Survived']]\n\nx_train, x_test, y_train, y_test = train_test_split(train_df_x, train_df_y, test_size=0.20, random_state=42)","d0c8cbff":"clf = RandomForestClassifier()\nclf.fit(x_train, y_train)\nrfc_y_pred = clf.predict(x_test)\nrfc_accuracy = accuracy_score(y_test,rfc_y_pred) * 100\nprint(\"accuracy=\",rfc_accuracy)","80e6aadb":"test_df0 = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_df0.info()","33359719":"test_df0.isnull().sum()","fcef739e":"#copying DF\ntest_df = test_df0.copy()\ntest_df","1f5fa9c0":"#data cleaning in test.csv\ncol_to_drop = [\"PassengerId\", \"Ticket\", \"Cabin\", \"Name\"]\ntest_df.drop(col_to_drop, axis=1, inplace=True)\n\nmean = test_df['Age'].mean()\nstd = test_df['Age'].std()\nempty = test_df['Age'].isnull().sum()\n\nrand_age = np.random.randint(mean - std, mean + std, size = empty)\nage_slice = test_df['Age'].copy()\nage_slice[np.isnan(age_slice)] = rand_age\ntest_df['Age'] = age_slice\ntest_df.isnull().sum()","d0de0482":"#test data has 1 missing value\ntest_df['Fare'].fillna(test_df['Fare'].mean(), inplace=True)\ntest_df.isnull().sum()","a8faf00c":"#normalize \"Sex\" and \"Embarked\" column\nle = preprocessing.LabelEncoder()\ntest_df['Sex']= le.fit_transform(test_df['Sex'])\ntest_df['Embarked']= le.fit_transform(test_df['Embarked'])\ntest_df","fe2cdfe5":"x_test = test_df\ny_pred = clf.predict(x_test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_df0[\"PassengerId\"],\n        \"Survived\": y_pred\n    })\nsubmission.head()","1a2f2b14":"submission.to_csv('submission2.csv', index=False)\nprint(\"Your submission was successfully saved!\")","2d4edb9e":"usefull insight: \n* PassegerID column and Name column have 100% unique value\n* Age column have 19,9% data missing and 12,3% unique.\n* Cabin column have 77,1% data missing and 72,2% unique.\n* Ticket has 76,4% unique data.\n* Fare has 27,8% or 248 unique data.\n* Embarked column have 0,2% or 2 data missing.\n\n","8b69e1a0":"# Submission","686ed952":"# Data Cleaning","31148dea":"# Getting to know your data"}}