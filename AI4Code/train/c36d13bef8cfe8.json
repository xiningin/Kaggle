{"cell_type":{"a9e542f7":"code","871f854b":"code","0d42ac61":"code","c45b8a4c":"code","b963f7a9":"code","40b926c4":"code","c0ddd51a":"code","ee13ed1c":"code","bfd30e4e":"code","1dc1781b":"code","71d5be85":"code","d961dae9":"code","22b3cbe0":"code","5b049a50":"code","66690ac1":"code","6d2b54a4":"code","9de613f5":"code","ce2a9431":"code","a60448b3":"code","68162797":"code","29c60ef7":"code","17753e35":"code","d5fc2e3f":"code","43349119":"code","e28b6019":"code","e180ca14":"code","fc7bc03f":"code","49d2aeee":"code","cb006b68":"code","aeabebc9":"code","8350a037":"code","6f07ceaa":"markdown","11830825":"markdown","f009e637":"markdown","d10becfe":"markdown","28161595":"markdown","afc3ff19":"markdown","54444bac":"markdown","4e4dad4f":"markdown","b74b23d8":"markdown","5efafbdc":"markdown","16d9a62d":"markdown","69834e61":"markdown","ac562d0d":"markdown","fdea604e":"markdown","a7071dc0":"markdown","3b11d075":"markdown","a57909d6":"markdown","a2bb5c5d":"markdown","6abb6569":"markdown","e95d6213":"markdown","3360977a":"markdown","c14ecfd5":"markdown","dfdd9037":"markdown","c42bf7f6":"markdown","7ce0eab9":"markdown","8f21cd79":"markdown","af4e6e73":"markdown","50354637":"markdown","664c7f0f":"markdown","e90bc18a":"markdown","25108228":"markdown","9e20435a":"markdown","df2e7eac":"markdown","00bcc280":"markdown","717401aa":"markdown","cd8c1eb4":"markdown","02a9f619":"markdown","d77b81aa":"markdown","ece5e53a":"markdown","88c8cb24":"markdown","38b94bba":"markdown","cfec8197":"markdown","479c3e2f":"markdown","a97173a4":"markdown","08e62a7e":"markdown","cf0fa8e3":"markdown","68e97315":"markdown","d46d57d2":"markdown","2dd9465d":"markdown","88c69973":"markdown","f593bf83":"markdown","8599fe6d":"markdown","e93f9d38":"markdown"},"source":{"a9e542f7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.image as mpimg\nimport folium\nimport os\nimport warnings","871f854b":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf = pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\")\ndf.head()","0d42ac61":"df.columns","c45b8a4c":"features = df.drop(columns=[\"Unnamed: 0\", \"ID\", \"Photo\", \"Flag\", \"Potential\", \"Club Logo\", \"Special\", \"Preferred Foot\", \"International Reputation\", \"Weak Foot\", \"Skill Moves\", \"Work Rate\", \"Body Type\", \"Real Face\", \"Jersey Number\",\"Height\", \"Weight\", \"LS\", \"ST\", \"RS\", \"LW\", \"LF\", \"CF\", \"RF\", \"RW\", \"LAM\", \"CAM\", \"RAM\", \"LM\", \"LCM\", \"CM\", \"RCM\", \"RM\", \"LWB\", \"LDM\", \"CDM\", \"RDM\", \"RWB\", \"LB\", \"LCB\", \"CB\", \"RCB\", \"RB\"], inplace=False)\nfeatures.head()","b963f7a9":"def clean_currency(x):\n    \"\"\"If the value is in thousands or millions, clear the \"K\" or \"M\", respectively, and add the corresponding zeros\n    \"\"\"\n    if x.find(\"K\") > -1 and x.find(\".\") == -1:\n        return x.replace(\"K\",\"000\").replace(\"\u20ac\",\"\")\n    elif x.find(\"K\") > -1 and x.find(\".\") > -1:\n        return x.replace(\"K\",\"00\").replace(\".\",\"\").replace(\"\u20ac\",\"\")\n    elif x.find(\"M\") > -1 and x.find(\".\") == -1:\n        return x.replace(\"M\",\"000000\").replace(\"\u20ac\",\"\")\n    elif x.find(\"M\") > -1 and x.find(\".\") > -1:\n        return x.replace(\"M\",\"00000\").replace(\".\",\"\").replace(\"\u20ac\",\"\")\n    else:\n        return x.replace(\"\u20ac\",\"\")\n    return(x)\n","40b926c4":"columns_in_euros = [\"Value\", \"Wage\", \"Release Clause\"]\nfor column in columns_in_euros:\n    features[column] = features[column].astype(\"str\")\n    features[column] = features[column].apply(clean_currency).astype(\"float64\")\nfeatures.head()","c0ddd51a":"missing_lst = []\nfor col in features.columns:\n    column_name = col\n    missing_values = int(features[col].isnull().sum())\n    missing_lst.append([column_name,missing_values])\nmissing_df = pd.DataFrame(missing_lst,columns=[\"Column name\",\"Missing values\"])\nmissing_df.sort_values(\"Missing values\",ascending=False).head()","ee13ed1c":"features = features.dropna(subset=[\"Joined\",\"Release Clause\"])","bfd30e4e":"missing_lst = []\nfor col in features.columns:\n    column_name = col\n    missing_values = int(features[col].isnull().sum())\n    missing_lst.append([column_name,missing_values])\nmissing_df = pd.DataFrame(missing_lst,columns=[\"Column name\",\"Missing values\"])\nmissing_df.sort_values(\"Missing values\",ascending=False).head()","1dc1781b":"features[\"Joined\"] = features[\"Joined\"].astype(\"datetime64[ns]\")\nfeatures[\"Contract Valid Until\"] = features[\"Contract Valid Until\"].astype(\"datetime64[ns]\")","71d5be85":"for column in features.columns[11:-1]:\n    features[column] = features[column].astype(\"int64\")","d961dae9":"features.head()","22b3cbe0":"features[\"Position\"].unique()","5b049a50":"# goalkeeping positions\ngoal_pos = [\"GK\"]\n# defensive positions\ndef_pos = [\"CB\", \"LB\", \"RB\", \"LWB\", \"RWB\", \"RCB\", \"LCB\"]\n# midfield positions\nmid_pos = [\"CDM\", \"RDM\", \"LDM\", \"CAM\", \"LAM\", \"RAM\", \"CM\", \"LM\", \"RM\", \"RW\", \"LW\", \"RCM\", \"LCM\"]\n# attacking positions\natt_pos = [\"CF\", \"ST\", \"LF\", \"RF\", \"LS\", \"RS\"]","66690ac1":"def graph_top_by_position(position, column1, column2, num_of_players):\n    \"\"\"Graph the top players by position.\n        Variable position must be a list and num_players must be an integer\"\"\"\n    # create a dictionary to retrive the corresponding value from position argument\n    lists = {\"goalkeepers\":goal_pos, \"defenders\":def_pos, \"midfielders\":mid_pos, \"attackers\":att_pos}\n    # DataFrame of top players\n    top_players = features[features[\"Position\"].isin(lists.get(position))].head(num_of_players)\n    # DataFrame columns converted to lists\n    names = top_players[\"Name\"].to_list()\n    rating = top_players[column1].to_list()\n    value = top_players[column2].to_list()\n    names.reverse()\n    rating.reverse()\n    value.reverse()\n    # Plotting\n    fig, axs = plt.subplots(2)\n    fig.suptitle(\"Top \"+str(num_of_players)+\" \"+position)\n    axs[0].set_ylabel(\"Overall rating\")\n    axs[0].set_xlabel(\"Player name\")\n    axs[1].set_ylabel(\"Market value (by hundreds of millions)\")\n    axs[1].set_xlabel(\"Player name\")\n    ax1 = axs[0].barh(names, width=rating)\n    ax2 = axs[1].barh(names, width=value)\n    colors = ['#80ffaa', '#4dff88', '#1aff66', '#00cc44', '#009933']\n    for x in range(5):\n        ax1[x].set_color(colors[x])\n        ax2[x].set_color(colors[x])\n    plt.show()","6d2b54a4":"graph_top_by_position(\"goalkeepers\",\"Overall\", \"Value\", 5)","9de613f5":"graph_top_by_position(\"defenders\",\"Overall\",\"Value\",5)","ce2a9431":"graph_top_by_position(\"midfielders\",\"Overall\",\"Value\",5)","a60448b3":"graph_top_by_position(\"attackers\",\"Overall\",\"Value\",5)","68162797":"# Create a new DataFrame of top clubs with the best average overall ratings\ntop_clubs_overall = features.groupby(\"Club\",as_index=False)[\"Overall\"].mean().sort_values(\"Overall\", ascending=False).head(10)\n# Plotting\ncolors = [\"#003606\",\"#003B06\",\"#00610A\",\"#00790D\",\"#008C0E\",\"#00A411\",\"#00C915\",\"#00ED19\",\"#16FB2D\",\"#5EFE6F\"]\nplt.barh(\"Club\",width=\"Overall\",height=0.5, data=top_clubs_overall,align=\"edge\", color=colors)\nplt.gca().invert_yaxis()\nplt.title(\"Clubs with the best average overall ratings\")\nplt.ylabel(\"Clubs\")\nplt.xlabel(\"Average overall rating\");","29c60ef7":"# Create a new DataFrame of top clubs with most expensive players\ntop_clubs_expensive = features.groupby(\"Club\",as_index=False)[\"Value\"].sum().sort_values(\"Value\", ascending=False).head(10)\n# Plotting\ncolors = [\"#003606\",\"#003B06\",\"#00610A\",\"#00790D\",\"#008C0E\",\"#00A411\",\"#00C915\",\"#00ED19\",\"#16FB2D\",\"#5EFE6F\"]\nplt.barh(\"Club\",width=\"Value\",height=0.4, data=top_clubs_expensive,align=\"edge\", color=colors)\nplt.gca().invert_yaxis()\nplt.title(\"Most expensive clubs\")\nplt.ylabel(\"Clubs\")\nplt.xlabel(\"Values in hundreds of millions of Euros\");","17753e35":"# Create a new DataFrame of top clubs with the most expensive release clauses\ntop_clubs_clauses = features.groupby(\"Club\",as_index=False)[\"Release Clause\"].sum().sort_values(\"Release Clause\", ascending=False).head(10)\n# Plotting\ncolors = [\"#003606\",\"#003B06\",\"#00610A\",\"#00790D\",\"#008C0E\",\"#00A411\",\"#00C915\",\"#00ED19\",\"#16FB2D\",\"#5EFE6F\"]\nplt.barh(\"Club\",width=\"Release Clause\",height=0.4, data=top_clubs_clauses,align=\"edge\", color=colors)\nplt.gca().invert_yaxis()\nplt.title(\"Clubs with most expensive clauses\")\nplt.ylabel(\"Clubs\")\nplt.xlabel(\"Values in billions of Euros\");","d5fc2e3f":"# New dataframe consisting of player market values, ratings, age and wage\nfeatures_col = features.loc[:,[\"Value\",\"Overall\",\"Age\",\"Wage\"]]\n# Plotting\nsns.scatterplot(features_col[\"Value\"], features_col[\"Overall\"], hue=features_col[\"Age\"],palette=\"YlGn\",size=features[\"Wage\"],sizes=(40,400));\nfig = plt.gcf()\n# Change fig size\nfig.set_size_inches(12, 8)\n# Change axis labels\nplt.xlabel(\"Market Value in Hundreds of millions of Euros\");\nplt.ylabel(\"Overall ratings\");\nplt.show()","43349119":"def plot_avg_worldmap(by_column):\n    # New dataframe consisting of top countries by market value\n    fil_features = features.loc[:,[\"Nationality\",by_column]]\n    top_countries = fil_features.groupby(\"Nationality\",as_index=False)[by_column].mean().sort_values(by_column, ascending=False)\n    # Map plotting\n    m = folium.Map(location=[0,0], zoom_start=1.5)\n    legend = {\"Overall\":\"Overall mean rating by country\",\"Value\":\"Mean market values of players by country\"}\n    folium.Choropleth(\n        geo_data=\"\/kaggle\/input\/geojson\/custom.geo.json\",\n        name='choropleth',\n        data=top_countries,\n        columns=['Nationality', by_column],\n        key_on='feature.properties.sovereignt',\n        fill_color='YlGn',\n        fill_opacity=0.9,\n        line_opacity=0.2,\n        legend_name=legend.get(by_column)\n    ).add_to(m)\n\n    folium.LayerControl().add_to(m)\n\n    return m","e28b6019":"plot_avg_worldmap(\"Value\")","e180ca14":"plot_avg_worldmap(\"Overall\")","fc7bc03f":"def dream_team(formation):\n    \"\"\"Creates a scatter map that assembles a football pitch and plots the dream team for the determined formation. The argument \"formation\" can only accept one the following values: 4-4-2, 4-3-3, 4-2-3-1\"\"\"\n    lst = []\n    # create a base dataframe consisting of top players by position attribute\n    for p in features[\"Position\"].unique():\n        top_gk = features[features[\"Position\"].isin([p])].sort_values(\"Overall\", ascending=False).head(1)\n        gk = top_gk[\"Name\"].astype(\"str\").tolist()\n        pos = p\n        gk.append(pos)\n        lst.append(gk)\n    players = pd.DataFrame(lst, columns=[\"Player\", \"Position\"])\n    # include only relevant players in 4-4-2 and modify dataframe axis values\n    if formation==\"4-4-2\":\n        filters = [\"GK\",\"RCB\",\"LCB\",\"RB\",\"LB\",\"RDM\",\"LDM\",\"RAM\",\"LAM\",\"RF\",\"LF\"]\n        df_team = players[players[\"Position\"].isin(filters)]\n        df_team[\"Y\"] = [1.5,2,2.5,1.5,2.5,2.5,3.5,1.5,0.5,0.5,3.5]\n        df_team[\"Position\"] = df_team[\"Position\"].apply(lambda x: 0.2 if x==\"GK\" else 0.8 if x in [\"RCB\",\"LCB\"] else 0.9 if x in [\"RB\",\"LB\"] else 2 if x in [\"RDM\",\"LDM\"] else 2.1 if x in [\"RAM\",\"LAM\"] else 3.2)\n    # include only relevant players in 4-4-3 and modify dataframe axis values\n    elif formation==\"4-3-3\":\n        filters = [\"GK\",\"RCB\",\"LCB\",\"RB\",\"LB\",\"RCM\",\"LCM\",\"CM\",\"RW\",\"LW\",\"ST\"]\n        df_team = players[players[\"Position\"].isin(filters)]\n        df_team[\"Y\"] = [2,3.5,2,0.5,1.5,3.5,2.5,3.5,0.5,2,0.5]\n        df_team[\"Position\"] = df_team[\"Position\"].apply(lambda x: 0.2 if x==\"GK\" else 0.8 if x in [\"RCB\",\"LCB\"] else 0.9 if x in [\"RB\",\"LB\"] else 2 if x in [\"RCM\",\"LCM\",\"CM\"] else 3.0 if x in [\"RW\",\"LW\"] else 3.2)\n        df_team\n    # include only relevant players in 4-2-3-1 and modify dataframe axis values\n    elif formation==\"4-2-3-1\":\n        filters = [\"GK\",\"RCB\",\"LCB\",\"RB\",\"LB\",\"RDM\",\"LDM\",\"CAM\",\"RM\",\"LM\",\"CF\"]\n        df_team = players[players[\"Position\"].isin(filters)]\n        df_team[\"Y\"] = [2,1.5,2.5,2,2.5,0.7,3.3,3.5,1.5,0.5,2]\n        df_team[\"Position\"] = df_team[\"Position\"].apply(lambda x: 0.2 if x==\"GK\" else 0.8 if x in [\"RCB\",\"LCB\"] else 0.9 if x in [\"RB\",\"LB\"] else 1.5 if x in [\"RDM\",\"LDM\"] else 2.3 if x in [\"CAM\"] else 2.7 if x in [\"RM\",\"LM\"] else 3.2)\n    # Plotting\n    img = mpimg.imread(\"\/kaggle\/input\/imagefile\/pitch1.png\")\n    fig, ax = plt.subplots()\n    ax.grid()\n    ax.scatter(\"Position\",\"Y\", data=df_team)\n    ax.set_title(\"Dream team \"+formation)\n    ax.set_ylabel(\"Clubs\")\n    ax.axis(\"off\")\n    axes = plt.gca()\n    axes.set_ylim(bottom=0, top=4.3)\n    axes.set_xlim(left=0, right=4)\n    fig.figimage(img, 0,-10, resize=False, alpha=0.3)\n    # Create a list of coordinates\n    x = df_team[\"Position\"].tolist()\n    y = df_team[\"Y\"].tolist()\n    labels = df_team[\"Player\"].tolist()\n    coord = []\n    for ele in range(11):\n        coord.append((x[ele],y[ele]))\n    # Use the list of coordinates to generate labels\n    for i, label in enumerate(labels):\n        x, y = coord[i]\n        ax.annotate(label, xy=(x,y), xytext= (30,7),textcoords = \"offset points\", ha='right', va='bottom')\n    plt.show()","49d2aeee":"warnings.filterwarnings(\"ignore\")\ndream_team(\"4-4-2\")","cb006b68":"dream_team(\"4-3-3\")","aeabebc9":"dream_team(\"4-2-3-1\")","8350a037":"heatmap_df = features.loc[:,['Name','Overall','Crossing',\n       'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n       'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes']].sort_values(\"Overall\",ascending=False).set_index(\"Name\").head(20)\nplt.title(\"Top 20 players attribute map\")\nsns.heatmap(heatmap_df, fmt=\"d\", annot=True, cmap=\"Greens\");\nfig = plt.gcf()\n# Change fig size\nfig.set_size_inches(12, 8)","6f07ceaa":"### 4.4. Which teams had the most expensive release clause values?","11830825":"### 4.6 Which national teams had the most expensive players","f009e637":"Missing values in the column \"Loaned from\" mean that a player wasn't loaned, so there's no need to replace or drop NaN values in this column. These values won't be considered when analyzing loan data.\n\nCount missing data value:","d10becfe":"#### Basic and detailed player data are in this dataset. The relevant features are:\n- *Name, Age, Nationality*: player's name, age and nationality, respectively.\n- *Overall*: overall rating for the player\n- *Club*: player's club\n- *Value*: market value of the player\n- *Wage*: player's wage in a monthly basis\n- *Position*: natural position of the player\n- *Crossing, Finishing, HeadingAccuracy, ShortPassing, Volleys*: attacking attributes\n- *Dribbling, Curve, FKAccuracy, LongPassing, BallControl*: skill attributes\n- *Acceleration, SprintSpeed, Agility, Reactions, Balance*: movement attributes\n- *ShotPower, Jumping, Stamina, Strength, LongShots*: power attributes\n- *Aggression, Interceptions, Positioning, Vision, Penalties, Composure*: mentality attributes\n- *Marking, StandingTackle, SlidingTackle*: defending attributes\n- *GKDiving, GKHandling, GKKicking, GKPositioning, GKReflexes*: goalkeeping attributes","28161595":"### 4.3. What were the most expensive teams?","afc3ff19":"## 3. Data cleaning","54444bac":"Define a new function to replace monetary value with integers numbers:","4e4dad4f":"Defining a plotting function:","b74b23d8":"By looking at the figure above, we can conclude the following:\n- Youngest players are more valued in the market than older players,\n- Older players present better overall rating values than younger players, and\n- Higher market value players have higher wages compared to players with lower market value.","5efafbdc":"When total market value of the players is evaluated, spanish clubs Real Madrid and Barcelona lead the rank, while Juventus is the only italian club to be featured in the top 10.","16d9a62d":"### 4.2. Which teams had best average overall stats?","69834e61":"## 2. Feature selection","ac562d0d":"Converting all of the player's attributes from float to integer data type:","fdea604e":"Some underrepresented national teams may have overevaluated players, like Gabon with P. Aubameyang (Arsenal) and Egypt with M. Salah (Liverpool), which might explain why these countries are green in the map","a7071dc0":"Printing the cleaned dataset:","3b11d075":"Plotting the dream team in a 4-3-3 formation:","a57909d6":"We'll drop irrelevant features and create a new dataframe named features:","a2bb5c5d":"By changing the formation, only the defensive positions remained intact, implying higher rotativity in the midfield and attacking positions.","6abb6569":"L. Suarez, a center foward player, has a surprisingly good goalkeeping stats. Top defenders are very well at jumping, agression, interceptions, heading accuracy and sliding tackle attributes. Also, top offensive midfielder are particularly good at short passing","e95d6213":"Load data into dataframe \"df\"","3360977a":"To understand the dataset, a few questions arrives, all of which will be be answered by using descriptive analysis:\n\n 1. What were the top players for each position?\n 2. Which teams had best average overall stats?\n 3. What were the most expensive clubs?\n 4. Which teams had the most expensive release clause values\n 5. What is the relation between market value, age, wage and player ratings?\n 6. Which national teams had the most expensive players?\n 7. Which national teams had the best overall players?\n 8. What was the dream team for each of the common formations: 4-4-2, 4-3-3, 4-2-3-1?\n 9. What are the main attributes of the top 20 players?","c14ecfd5":"Converting columns \"Joined\" and \"Contract Valid Until\" to datetime formats:","dfdd9037":"Plotting the dream team in a 4-2-3-1 formation:","c42bf7f6":"Retrieving data columns:","7ce0eab9":"Scanning and counting missing data values (only 5 columns with the most missing values):","8f21cd79":"The rank regarding total release clause values is similar to the rank of expensive clubs, which implies a close relation between players market value and release clause values.","af4e6e73":"Defining goalkeeping, defending, midfield and attacking positions:","50354637":"## 5. Final remarks\nThe analysis has successfully answered all the questions and has provided a basic but well rounded insight about the data. It should give orientation for a more indepth analysis, possibly by employing machine learning algorithms to identify predictive patterns in data and predict match results just like the algorithms inside FIFA 19.","664c7f0f":"Plotting top 5 defenders by overall rating and market value:","e90bc18a":"Drop rows with missing data in columns \"Joined\" and \"Release Clause\", since these have the highest number of missing values after \"Loaned From\" columns:","25108228":"Defining a function to plot dream team formations:","9e20435a":"By the map above, North African, South American and European national teams have the best players by overall ratings.","df2e7eac":"Italians clubs lead the rank by average overall ratings, followed by two of the most powerful spanish clubs. Italians clubs are the most featured in the top 10.","00bcc280":"Printing the possible position attributes:","717401aa":"Ploting top players attributes heatmap:","cd8c1eb4":"Defining a function to plot world map:","02a9f619":"Plotting the map:","d77b81aa":"## 1. Importing the necessary libraries","ece5e53a":"### 4.1. What were the top players for each position?","88c8cb24":"### 4.9 What are the main attributes of the top 20 players?","38b94bba":"### 4.5 What is the relation between market value, age, wage and player ratings?","cfec8197":"<div class=\"alert alert-success\" role=\"alert\">\n  <h1 class=\"alert-heading\">Working with FIFA 19 dataset*<\/h1>\n  <p><i>*By Kauvin Lucas, original submission in the references<\/i><\/p>\n  <p>FIFA 19 is a football simultator developed by Electronic Arts as part of it's FIFA series, made available for a variety of gaming platforms and consoles such as Playstation 4 and Xbox 360.<\/p>\n  <hr>\n  <p class=\"mb-0\">The related dataset was originally found in Kaggle, and it's scrapped from the SoFIFA, a FIFA player ratings website, coresponding to the FIFA 19.\n   <\/p>\n<\/div>","479c3e2f":"Plotting the dream team in a 4-4-2 formation:","a97173a4":"Plotting the map:","08e62a7e":"### 4.7 Which national teams had the best overall players","cf0fa8e3":"## 6. References\n- Raw dataset: https:\/\/github.com\/4m4n5\/fifa18-all-player-statistics\/blob\/master\/2019\/data.csv\n- SoFIFA website: https:\/\/sofifa.com\/players\n- Original submission: https:\/\/jovian.ml\/kauvinlucas\/final-project","68e97315":"Plotting top 5 midfielders by overall rating and market value:","d46d57d2":"Plotting top 5 goalkeepers by overall rating and market value:","2dd9465d":"From the visualizations above, we can conclude the following:\n- **M. Neuer**, **G. Chiellini**, **L. Modric** and **Cristiano Ronaldo** are some of the most underestimated top players, and\n- **M. Hummels**, **Marcelo** and **E. Hazard** are some of the most overestimated top players.","88c69973":"## 4. Data analysis","f593bf83":"Plotting top 5 attackers by overall rating and market value:","8599fe6d":"Apply the newly defined function to the columns containing monetary values, and convert column data to float type:","e93f9d38":"### 4.8. What was the dream team for each of the common formations: 4-4-2, 4-3-3, 4-2-3-1?\n\n"}}