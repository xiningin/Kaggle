{"cell_type":{"261e5ddd":"code","c0786bd1":"code","54eefbcd":"code","b1ccfeff":"code","97bcbae4":"code","30f9bf21":"code","efdeb791":"code","b48af07c":"code","bc6e34a5":"code","ea0534a6":"code","28d60979":"code","6918c490":"code","92b99a91":"code","2563bf6d":"code","d5c61edf":"code","fd23006b":"code","99aeb5e4":"code","72db341c":"code","99d35240":"code","aba02827":"code","83d24538":"code","55fe4fd4":"code","a269a025":"code","6e360c3a":"code","bd946d7c":"code","81794b3e":"code","9d323291":"code","ba86644a":"code","0fa8942d":"code","ee8565fc":"code","84037e4d":"code","8e9d9426":"code","c216b2f0":"code","d448863a":"code","2092bcdd":"code","850c4135":"markdown","31ddf953":"markdown","baea855c":"markdown"},"source":{"261e5ddd":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","c0786bd1":"from keras.datasets import mnist\n\nfrom keras.models import Sequential, load_model\n\nfrom keras.layers import Dense, Dropout, Flatten\n\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nfrom keras.utils.np_utils import to_categorical","54eefbcd":"df=pd.read_csv('..\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_RGB.csv')","b1ccfeff":"df.head()","97bcbae4":"df.label.value_counts()","30f9bf21":"labels = ['akiec','bcc','bkl','df','mel','nv','vasc']\nnum_classes = 7\nprint(labels)","efdeb791":"n_samples = len(df.index)\nimages = np.array(df.drop(['label'],axis=1))\nimages = images.reshape(n_samples,28,28,3)","b48af07c":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(labels[df.label[i]])","bc6e34a5":"y = df['label']\nX = df.drop(['label'] , axis=1)","ea0534a6":"X = X\/255","28d60979":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","6918c490":"from sklearn.neural_network import MLPClassifier\nmlp = MLPClassifier(hidden_layer_sizes=(200,60))\nmlp.fit(X_train,y_train)\ny_mlp = mlp.predict(X_test)","92b99a91":"mlp_score = accuracy_score(y_test, y_mlp)\nprint(mlp_score)","2563bf6d":"from keras.utils.np_utils import to_categorical","d5c61edf":"print(y[0])\ny_cat = to_categorical(y)\nprint(y_cat[0])","fd23006b":"num_classes = y_cat.shape[1]\nprint(num_classes)","99aeb5e4":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y_cat, test_size=0.2, random_state=1)","72db341c":"X_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","99d35240":"from keras.models import Sequential\nfrom keras.layers import Dense","aba02827":"model = Sequential()\nmodel.add(Dense(200, activation='relu'))\nmodel.add(Dense(60, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))","83d24538":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","55fe4fd4":"train = model.fit(X_train , y_train , validation_data=(X_test,y_test), epochs=30, verbose=1)","a269a025":"model.evaluate(X_test,y_test)","6e360c3a":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","bd946d7c":"plot_scores(train)","81794b3e":"%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","9d323291":"from keras.datasets import mnist\n\nfrom keras.models import Sequential, load_model\n\nfrom keras.layers import Dense, Dropout, Flatten\n\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nfrom keras.utils.np_utils import to_categorical","ba86644a":"X_train.shape","0fa8942d":"X_train = X_train \/ 255\nX_test = X_test \/ 255","ee8565fc":"y_train1 = to_categorical(y_train)\ny_test1 = to_categorical(y_test)","84037e4d":"y_test1","8e9d9426":"# R\u00e9seau convolutionnel simple\nmodel = Sequential()\nmodel.add(Conv2D(28, (3, 3), input_shape=(28, 28, 3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","c216b2f0":"model.summary()","d448863a":"train = model.fit(X_train, y_train1, validation_data=(X_test, y_test1), epochs=20, batch_size=200, verbose=1)","2092bcdd":"# Test\nscores = model.evaluate(X_test, y_test1, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","850c4135":"## Une couche convolutionnelle","31ddf953":"## Keras","baea855c":"## SKLearn"}}