{"cell_type":{"b6497482":"code","49b80015":"code","be904c95":"code","15f22e5a":"code","45455618":"code","547771b7":"code","52fa2c22":"code","c90d9f5b":"code","7b506382":"markdown","4b660e74":"markdown","2221e241":"markdown","41568288":"markdown"},"source":{"b6497482":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49b80015":"# import general toolkits\nimport json\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np \nimport random\nfrom tqdm import tqdm\nimport os ","be904c95":"\n!pip install --upgrade pip\n!pip install rna-tools\n!conda install -y -c bioconda forgi \n!conda install -y -c bioconda viennarna\n!pip install nglview","15f22e5a":"# important sequence toolkits \nimport forgi.visual.mplotlib as fvm\nimport forgi\nimport nglview\nfrom rna_tools import Seq\nfrom rna_tools import SecondaryStructure\nimport rna_tools.Seq as Seq","45455618":"\npath = '..\/input\/stanford-covid-vaccine\/'\n\ntrain = pd.read_json(path + 'train.json', lines = True)\ntest = pd.read_json(path + 'test.json', lines = True)\nsample_df = pd.read_csv(path + 'sample_submission.csv')\n","547771b7":"free_energy = np.zeros((1,len(train.sequence)))\nfor sample in range(len(train.sequence)):\n    seq = Seq.RNASequence(train.sequence[sample])\n    free_energy[0, sample] = seq.predict_ss(\"RNAfold\", constraints = train.structure[sample])[-7:-1]\n    \nfree_energy_ts = np.zeros((1,len(test.sequence)))\nfor sample in range(len(test.sequence)):\n    seq = Seq.RNASequence(test.sequence[sample])\n    free_energy_ts[0, sample] = seq.predict_ss(\"RNAfold\", constraints = test.structure[sample])[-7:-1]\n    \n    ","52fa2c22":"plt.figure(figsize = (15,5))\n\nplt.subplot(1,2,1)\nx1 = np.linspace(0,2400, 2400)\nplt.scatter(x1, free_energy, alpha = 0.3, color = 'b', label = 'train samples')\nplt.xlabel('RNA ID')\nplt.ylabel('Free Energy')\n\n\n\nplt.subplot(1,2,2)\nx2 = np.linspace(0,len(test.sequence), len(test.sequence))\nplt.scatter(x2, free_energy_ts, alpha = 0.3, color = 'r', label = 'test sample')\nplt.xlabel('RNA ID')\nplt.ylabel('Free Energy')\nplt.show()","c90d9f5b":"free_energy_df = pd.DataFrame(free_energy[0,:], columns = ['Fenergy'])\nfree_energy_ts_df = pd.DataFrame(free_energy_ts[0,:], columns = ['Fenergy'])\nfree_energy_df.head(), free_energy_ts_df.head()\n\n\ntrain_df = pd.concat([train,free_energy_df], axis = 1)\ntest_df = pd.concat([test,free_energy_ts_df], axis = 1)\n\ndisplay(train_df.head())\ndisplay(test_df.head())","7b506382":"## Compute free energy with the primary and secondary structure RNA data","4b660e74":"## Plot the new feature data ","2221e241":"Concatenate the new features (free energy) to the training and testing dataframes ...","41568288":"## Load the data"}}