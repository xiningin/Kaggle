{"cell_type":{"c195568c":"code","ec20f0ab":"code","a6136e81":"code","f88a9a99":"code","03ff1214":"code","1836063f":"code","94bf4004":"code","bd0c7453":"code","1e4d91dd":"code","a29119e1":"code","e09dc685":"code","6c1ce1f0":"code","ee2b963a":"code","823f1384":"code","5a803d7e":"code","d6a84251":"code","5ea8dd9f":"code","a167991d":"code","a6b3562f":"code","94486b4f":"code","b52786f4":"code","74d6af83":"code","6155b28e":"markdown","774687b1":"markdown","fa8c6700":"markdown","67e09ed9":"markdown","4d8948e3":"markdown","d99f0bb7":"markdown","dbbd262d":"markdown","c695b3ec":"markdown"},"source":{"c195568c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nmyStop = 0\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        myStop += 1\n        print(os.path.join(dirname, filename))\n        if myStop==20:\n            break\n        \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec20f0ab":"from PIL import Image\nfrom tqdm import tqdm\nimport glob\nimport gc\nimport matplotlib.pyplot as plt\n%matplotlib inline","a6136e81":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom random import random\nfrom sklearn import metrics","f88a9a99":"train_df = pd.read_csv(\"\/kaggle\/input\/garage-detection-unofficial-ssl-challenge\/image_labels_train.csv\")\ntrain_df.head()","03ff1214":"Image.open(\"\/kaggle\/input\/garage-detection-unofficial-ssl-challenge\/GarageImages\/GarageImages\/image1607.jpg\")","1836063f":"np.array(Image.open(\"\/kaggle\/input\/garage-detection-unofficial-ssl-challenge\/GarageImages\/GarageImages\/image1607.jpg\")).shape","94bf4004":"np.array(Image.open(\"\/kaggle\/input\/garage-detection-unofficial-ssl-challenge\/GarageImages\/GarageImages\/image1607.jpg\").resize((224, 224)))[:,:,0].flatten().shape","bd0c7453":"(224, )*2","1e4d91dd":"224*224","a29119e1":"def preprocess_image(image_path, desired_size=224):\n    im = Image.open(image_path)\n    im = im.resize((desired_size, )*2, resample=Image.LANCZOS)\n    im = np.array(im)\n    if len(im.shape)==3:\n        im = im[:,:,0]\n    im = im.flatten()\n    return im","e09dc685":"# get the number of training images from the target\\id dataset\nN = train_df.shape[0]\n# create an empty matrix for storing the images\nx_train = np.empty((N, 50176), dtype=np.uint8)\n\n# loop through the images from the images ids from the target\\id dataset\n# then grab the cooresponding image from disk, pre-process, and store in matrix in memory\nfor i, image_id in enumerate(tqdm(train_df['ID'])):\n    x_train[i, :] = preprocess_image(\n        f'\/kaggle\/input\/garage-detection-unofficial-ssl-challenge\/GarageImages\/GarageImages\/image{image_id}.jpg'\n    )","6c1ce1f0":"holdout_df = pd.read_csv(\"\/kaggle\/input\/garage-detection-unofficial-ssl-challenge\/image_labels_holdout.csv\")\nholdout_df.head()","ee2b963a":"# get the number of training images from the target\\id dataset\nN = holdout_df.shape[0]\n# create an empty matrix for storing the images\nx_holdout = np.empty((N, 50176), dtype=np.uint8)\n\n# loop through the images from the images ids from the target\\id dataset\n# then grab the cooresponding image from disk, pre-process, and store in matrix in memory\nfor i, image_id in enumerate(tqdm(holdout_df['ID'])):\n    x_holdout[i, :] = preprocess_image(\n        f'\/kaggle\/input\/garage-detection-unofficial-ssl-challenge\/GarageImages\/GarageImages\/image{image_id}.jpg'\n    )","823f1384":"unlabeledIDs = []\nlabeledIDs = holdout_df['ID'].tolist() + train_df['ID'].tolist()\nfor file in tqdm(glob.glob('\/kaggle\/input\/garage-detection-unofficial-ssl-challenge\/GarageImages\/GarageImages\/*.jpg')):\n    myStart = file.find('\/image')\n    myEnd = file.find('.jpg')\n    myID = file[myStart+6:myEnd]\n    if int(myID) not in labeledIDs:\n        unlabeledIDs.append(myID)","5a803d7e":"# get the number of training images from the target\\id dataset\nN = len(unlabeledIDs)\n# create an empty matrix for storing the images\nx_unlabeled = np.empty((N, 50176), dtype=np.uint8)\n\n# loop through the images from the images ids from the target\\id dataset\n# then grab the cooresponding image from disk, pre-process, and store in matrix in memory\nfor i, image_id in enumerate(tqdm(unlabeledIDs)):\n    x_unlabeled[i, :] = preprocess_image(\n        f'\/kaggle\/input\/garage-detection-unofficial-ssl-challenge\/GarageImages\/GarageImages\/image{image_id}.jpg'\n    )","d6a84251":"x_train, x_test, y_train, y_test = train_test_split(x_train, \n                                                    train_df['GarageDoorEntranceIndicator'], \n                                                    test_size=0.50, \n                                                    random_state=42, \n                                                    stratify=train_df.GarageDoorEntranceIndicator)","5ea8dd9f":"print(\"train total 1s: \", sum(y_train))\nprint(\"test total 1s: \", sum(y_test))","a167991d":"def get_auc(X,Y):\n    probabilityOf1 = model.predict_proba(X)[:,1]\n    fpr, tpr, thresholds = metrics.roc_curve(Y, probabilityOf1, pos_label=1)\n    return metrics.auc(fpr, tpr)","a6b3562f":"sslRounds = 4\nx_train_ssl = np.concatenate((x_train, x_unlabeled), axis=0)\ntestAUCs = []\ntrainAUCs = []\nfor sslRound in range(sslRounds):\n    # define model\n    #model = GaussianNB()\n    #model = LogisticRegression()\n    model = MultinomialNB()\n    # fit model\n    if sslRound==0:\n        # first round, fit on just labeled data\n        model.fit(x_train, y_train)\n    else:\n        # all other rounds, fit on all data\n        model.fit(x_train_ssl, y_train_ssl)\n    # score unlabeled data\n    predictions = model.predict_proba(x_unlabeled)[:,1]\n    # set random threshold\n    threshold = random()\n    # print(\"threshold selected: \", threshold)\n    # create pseudo lables based on threshold\n    pseudoLabels = np.where(predictions>threshold,1,0)\n    # add pseudo labels to next round of training \n    y_train_ssl = np.concatenate((y_train, pseudoLabels), axis=0)\n    # get performance metrics\n    testAUC = get_auc(x_test,y_test)\n    testAUCs.append(testAUC)\n    # print performance on test\n    print(\"round {} test auc: {}\".format(sslRound,testAUC))\n    # clean up\n    if sslRound<(sslRounds-1):\n        del model\n        gc.collect()","94486b4f":"histdf = pd.DataFrame()\nhistdf['test auc'] = testAUCs\nhistdf[['test auc']].plot()","b52786f4":"# holdout auc with 1 round:  0.5356561380657766","74d6af83":"holdoutPreds = model.predict_proba(x_holdout)[:,1] \nfpr, tpr, thresholds = metrics.roc_curve(holdout_df['GarageDoorEntranceIndicator'], holdoutPreds, pos_label=1)\nprint(\"final holdout auc: \", metrics.auc(fpr, tpr))","6155b28e":"# Resources\n\nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.auc.html\n\nhttps:\/\/stackoverflow.com\/questions\/36967920\/numpy-flatten-rgb-image-array\n\nhttps:\/\/scikit-learn.org\/stable\/modules\/naive_bayes.html\n\nhttps:\/\/stackoverflow.com\/questions\/3964681\/find-all-files-in-a-directory-with-extension-txt-in-python?rq=1\n\nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.train_test_split.html","774687b1":"# Imports","fa8c6700":"# EDA","67e09ed9":"# Image Processing","4d8948e3":"# Training Plots","d99f0bb7":"# Notes\n\n* In this notebook we're going to flatten the images and run a simple base Niave Bayes Regression model.  \n* We'll use a modified version of EM + Niave Bayes approach inspired by https:\/\/www.cs.cmu.edu\/~tom\/pubs\/NigamEtAl-bookChapter.pdf","dbbd262d":"# Score Holdout","c695b3ec":"# Training"}}