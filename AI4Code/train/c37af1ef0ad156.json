{"cell_type":{"b91699f9":"code","2fef8247":"code","9bf67d0b":"code","046493b6":"code","5b12ecf2":"code","23997baa":"code","d6059ed8":"code","2132ba78":"code","678dde72":"code","6de6ecaf":"code","fac18cb0":"code","84a2bf6f":"code","0a26042a":"code","bf924423":"code","e7bc6d9a":"code","c3d52a2d":"code","d9546410":"code","6939f820":"code","beccc638":"code","da13112a":"code","544aaab7":"code","e2763b1b":"code","2dd0e463":"code","cc51d018":"code","0ac42eac":"code","64651aa2":"code","e30b293b":"code","c2535d4d":"code","742a05a7":"code","a1db87ca":"code","c3a0849b":"code","3c4476c1":"code","f64f7272":"code","e63f7010":"code","6316d645":"code","9270868c":"code","fb860aac":"code","ceff54ee":"code","0c105740":"code","315cf9a8":"code","a6a4a0e8":"code","40d7e4d4":"code","fc550dd1":"code","9bcffa7c":"code","313eae74":"code","28623594":"code","ec13e04a":"code","1f3fb056":"code","1e1284fe":"code","e9da0317":"code","742801a3":"code","50e77645":"code","9ff2bea5":"code","7a8f0679":"code","b7d9b0cf":"code","4e5db75f":"code","9b0e8293":"code","13141eba":"code","9dcda0cd":"code","5153ad4e":"code","233ed0a3":"code","46068348":"code","f44a2cdb":"code","65adf393":"code","fb821e9f":"code","b143c58b":"code","deea8b95":"code","b6de35c1":"code","b0cd0a98":"code","5fddfdda":"code","d63b5105":"code","c6529fb8":"code","2eee0f03":"code","4612b9f7":"code","eb0e5926":"code","b2be1080":"code","abec350a":"code","459b2c59":"code","5c8181a1":"code","fc215244":"code","0ec4a82b":"code","e4dae566":"code","b0337e2a":"code","7c86408f":"code","a8bf6cc0":"code","4621297b":"code","8d85a334":"code","a7100c85":"code","7fdbc9b4":"code","2fafe45c":"code","3ad6c904":"markdown","e8579b3e":"markdown","d555dd82":"markdown","49493853":"markdown","6d44b621":"markdown","020e51ea":"markdown","02b264b8":"markdown","92a91392":"markdown","57aea008":"markdown","e2ad5c53":"markdown","b40feebe":"markdown","0342023b":"markdown","980fb440":"markdown"},"source":{"b91699f9":"import pandas as pd # Data Analytical library\nimport numpy as np # Fast Linear Alegbra \nimport matplotlib.pyplot as plt # Visulizations\nimport seaborn as sns # Statistical Viz","2fef8247":"data=pd.read_csv('..\/input\/ml-lab-exam\/traindata_SJC.csv')\ndata.head()","9bf67d0b":"data.tail()","046493b6":"data.shape","5b12ecf2":"data.describe()","23997baa":"data.columns","d6059ed8":"data.nunique()","2132ba78":"data['Gender'].unique()","678dde72":"data.isnull().sum()","6de6ecaf":"data = data.drop(['ClaimNumber','ClaimDescription'],axis=1)\ndata.head()","fac18cb0":"data['UltimateIncurredClaimCost'].hist()","84a2bf6f":"data =data.dropna()","0a26042a":"data.head()","bf924423":"data.isnull().sum()","e7bc6d9a":"data['gender'] = pd.factorize(data.Gender)[0]","c3d52a2d":"data.Gender.value_counts()","d9546410":"data.gender.value_counts()","6939f820":"data['maritalstatus'] = pd.factorize(data.MaritalStatus)[0]\ndata.MaritalStatus.value_counts()","beccc638":"data.maritalstatus.value_counts()","da13112a":"data['parttimefulltime'] = pd.factorize(data.PartTimeFullTime)[0]\ndata.PartTimeFullTime.value_counts()","544aaab7":"data.parttimefulltime.value_counts()","e2763b1b":"data.head()","2dd0e463":"data['DateTimeOfAccident'] = pd.to_datetime(data['DateTimeOfAccident'], \n format = '%Y-%m-%dT%H:%M:%SZ', \n errors = 'coerce')\ndata['DateReported'] = pd.to_datetime(data['DateReported'], \n format = '%Y-%m-%dT%H:%M:%SZ', \n errors = 'coerce')","cc51d018":"data['DateTimeOfAccidentyear'] = data['DateTimeOfAccident'].dt.year\ndata['DateTimeOfAccidentmonth'] = data['DateTimeOfAccident'].dt.month\ndata['DateTimeOfAccidentday'] = data['DateTimeOfAccident'].dt.day\ndata['DateTimeOfAccidenthour'] = data['DateTimeOfAccident'].dt.hour\n\n","0ac42eac":"data['DateReportedyear'] = data['DateReported'].dt.year\ndata['DateReportedmonth'] = data['DateReported'].dt.month\ndata['DateReportedday'] = data['DateReported'].dt.day\n","64651aa2":"data.head()","e30b293b":"df = data.drop(['Gender','MaritalStatus','PartTimeFullTime','DateTimeOfAccident','DateReported','DateReportedday','DateReportedmonth','DateTimeOfAccidentday','DaysWorkedPerWeek','HoursWorkedPerWeek'],axis=1)\ndf.head()","c2535d4d":"df.shape","742a05a7":"corelation = df.corr()","a1db87ca":"df.corr ","c3a0849b":"corrmat = df.corr()\nf, ax = plt.subplots(figsize=(20, 9))\nsns.heatmap(corrmat, vmax=.8, annot=True);","3c4476c1":"sns.pairplot(df)","f64f7272":"sns.relplot(x= 'InitialIncurredCalimsCost', y= 'UltimateIncurredClaimCost', hue='WeeklyWages', data=data )","e63f7010":"sns.relplot(x= 'InitialIncurredCalimsCost', y= 'UltimateIncurredClaimCost', hue='Gender', data=data )","6316d645":"sns.relplot(x= 'WeeklyWages', y= 'UltimateIncurredClaimCost', hue='Gender', data=data )","9270868c":"sns.relplot(x= 'DaysWorkedPerWeek', y= 'UltimateIncurredClaimCost', hue='Gender', data=data )","fb860aac":"sns.distplot(data['WeeklyWages'])","ceff54ee":"sns.distplot(data['DaysWorkedPerWeek'], bins=5)","0c105740":"sns.catplot(x='UltimateIncurredClaimCost',kind='box', data=data)","315cf9a8":"sns.catplot(x='InitialIncurredCalimsCost',kind='box', data=data)","a6a4a0e8":"df.head()","40d7e4d4":"df.info()","fc550dd1":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","9bcffa7c":"x, y=(df.drop(['UltimateIncurredClaimCost'],axis = 1), df.UltimateIncurredClaimCost)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size =\n0.3, random_state=0)\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","313eae74":"x.head()","28623594":"x.shape","ec13e04a":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(x_train)\nx_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)","1f3fb056":"from sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score","1e1284fe":"def cross_val(model):\n    pred = cross_val_score(model, x, y, cv=10)\n    return pred.mean()","e9da0317":"def print_evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)\n    print('__________________________________')","742801a3":"def evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    return mae, mse, rmse, r2_square","50e77645":"x","9ff2bea5":"x.isnull().sum()","7a8f0679":"lin_reg = LinearRegression(normalize=True)\nlin_reg.fit(x_train,y_train)","b7d9b0cf":"pred = lin_reg.predict(x_test)","4e5db75f":"test_pred = lin_reg.predict(x_test)\ntrain_pred = lin_reg.predict(x_train)","9b0e8293":"print('Test set evalation:')\nprint_evaluate(y_test, test_pred)\nprint('Train set evaluation:')\nprint_evaluate(y_train, train_pred)","13141eba":"from sklearn.datasets import make_regression\nfrom sklearn.ensemble import GradientBoostingRegressor\ngradient=GradientBoostingRegressor(random_state=0)\ngradient.fit(x_train,y_train)","9dcda0cd":"test_pred2 = gradient.predict(x_test)\ntrain_pred2 = gradient.predict(x_train)","5153ad4e":"print('Test set evalation:')\nprint_evaluate(y_test, test_pred2)\nprint('Train set evaluation:')\nprint_evaluate(y_train, train_pred2)","233ed0a3":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.datasets import make_regression\n\nregr = RandomForestRegressor( random_state=0)\nregr.fit(x_train,y_train)\n\n","46068348":"test_pred3 = regr.predict(x_test)\ntrain_pred3 = regr.predict(x_train)","f44a2cdb":"print('Test set evalation:')\nprint_evaluate(y_test, test_pred3)\nprint('Train set evaluation:')\nprint_evaluate(y_train, train_pred3)","65adf393":"datatest=pd.read_csv('..\/input\/ml-lab-exam\/testdata_SJC.csv')\ndatatest.head()","fb821e9f":"datatest.shape","b143c58b":"datatest.isnull().sum()","deea8b95":"#datatest = datatest.dropna()","b6de35c1":"datatest = datatest.drop([ 'ClaimDescription','ClaimNumber'], axis=1 )","b0cd0a98":"datatest.head()","5fddfdda":"datatest['gender'] = pd.factorize(datatest.Gender)[0]","d63b5105":"datatest.gender.value_counts()","c6529fb8":"datatest['maritalstatus'] = pd.factorize(datatest.MaritalStatus)[0]\ndatatest.MaritalStatus.value_counts()","2eee0f03":"datatest['parttimefulltime'] = pd.factorize(datatest.PartTimeFullTime)[0]\ndatatest.PartTimeFullTime.value_counts()","4612b9f7":"datatest['DateTimeOfAccident'] = pd.to_datetime(datatest['DateTimeOfAccident'], \n format = '%Y-%m-%dT%H:%M:%SZ', \n errors = 'coerce')\ndatatest['DateReported'] = pd.to_datetime(datatest['DateReported'], \n format = '%Y-%m-%dT%H:%M:%SZ', \n errors = 'coerce')","eb0e5926":"datatest['DateTimeOfAccidentyear'] = datatest['DateTimeOfAccident'].dt.year\ndatatest['DateTimeOfAccidentmonth'] = datatest['DateTimeOfAccident'].dt.month\ndatatest['DateTimeOfAccidentday'] = datatest['DateTimeOfAccident'].dt.day\ndatatest['DateTimeOfAccidenthour'] = datatest['DateTimeOfAccident'].dt.hour\n","b2be1080":"datatest['DateReportedyear'] = datatest['DateReported'].dt.year\ndatatest['DateReportedmonth'] = datatest['DateReported'].dt.month\ndatatest['DateReportedday'] = datatest['DateReported'].dt.day\n","abec350a":"df1 = datatest.drop(['Gender','MaritalStatus','PartTimeFullTime','DateTimeOfAccident','DateReported',],axis=1)\ndf1.head()","459b2c59":"df1 = df1.drop(['DateReportedday','DateReportedmonth','DateTimeOfAccidentday','DaysWorkedPerWeek','HoursWorkedPerWeek'],axis=1)\ndf1.head()","5c8181a1":"df1.shape","fc215244":"df1 = scaler.transform(df1)","0ec4a82b":"linear1 = lin_reg.predict(df1)","e4dae566":"linear1","b0337e2a":"regr1=regr.predict(df1)","7c86408f":"regr1","a8bf6cc0":"gradient1 = gradient.predict(df1)","4621297b":"gradient1","8d85a334":"csv = pd.read_csv(\"..\/input\/ml-lab-exam\/sample_submission_csv.csv\")\ncsv[\"UltimateIncurredClaimCost\"]= gradient1","a7100c85":"csv.to_csv('grad.csv')","7fdbc9b4":"csv = pd.read_csv(\"..\/input\/ml-lab-exam\/sample_submission_csv.csv\")\ncsv[\"UltimateIncurredClaimCost\"]= regr1","2fafe45c":"csv.to_csv('regr.csv')","3ad6c904":"histogram target variabale","e8579b3e":"# model test file","d555dd82":"# Gradient boost","49493853":"# Relationship analysis","6d44b621":"# Test file","020e51ea":"#  Hackathon 2021","02b264b8":"# Cleaning the data","92a91392":"# Randomforest regressor","57aea008":"'DateReported','DateReportedday','DateReportedmonth','DateTimeOfAccidentday','DaysWorkedPerWeek','HoursWorkedPerWeek']\nremoved after checking coorrealtion","e2ad5c53":"random forest regressor","b40feebe":"linear","0342023b":"# Gradient boost\n ","980fb440":"# linear"}}