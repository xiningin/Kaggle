{"cell_type":{"059258f6":"code","61234039":"code","2ca4b77b":"code","c974da01":"code","4ab7ff17":"code","dd52dc10":"code","705e4af4":"code","a3d2d3ac":"code","5f09aa8f":"code","209dac6a":"code","99a2ae6c":"code","76c98fa3":"code","44a1b994":"markdown","312328df":"markdown","b725de39":"markdown","89254f58":"markdown"},"source":{"059258f6":"import re\nimport json\nimport dask\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom dask.distributed import Client, wait, LocalCluster","61234039":"BASE = '..\/input\/coleridgeinitiative-show-us-the-data'\n\nPARAMS = {\n    'base_path': {BASE},\n    'labels_file': f'{BASE}\/train.csv',\n    'train_folder': f'{BASE}\/train',\n#     'labels_file': f'{BASE}\/sample_submission.csv',\n#     'publications_path': f'{BASE}\/test',\n}","2ca4b77b":"def clean_text(input_words):\n    return re.sub('[^A-Za-z0-9\\[\\]]+', ' ', str(input_words).lower()).strip()","c974da01":"train_df = pd.read_csv(PARAMS['labels_file'])\ndisplay(train_df)","4ab7ff17":"train_files = train_df['Id'].unique()\nprint('unique files: {}'.format(len(train_files)))","dd52dc10":"%%time\nfutures = []\nfor file in tqdm(train_files):\n\n    file_dfs = []\n    section = {}\n    \n    with open(PARAMS['train_folder']+'\/'+ file +'.json', 'r') as f:\n        paper = json.load(f)\n\n    dfs = []    \n    len_paper = len(paper)\n        \n    for section_index in range (0, len_paper):\n        section_sentences = paper[section_index].get('text')\n        \n        section['file'] = file\n        section['orig_sentence'] = section_sentences\n        \n        df = pd.DataFrame.from_dict(section, orient = 'index').T\n        dfs.append(df)\n        \n        file_df = pd.concat(dfs)\n               \n    file_dfs.append(file_df)\n    file_df = pd.concat(file_dfs)\n    \n    futures.append(file_df)","705e4af4":"sentences_df = pd.concat(futures).reset_index(drop=True)\ndisplay(sentences_df)","a3d2d3ac":"# set n_workers to number of cores\nclient = Client(n_workers=4, threads_per_worker=4)\nclient","5f09aa8f":"def extract_text_from_pub(file):\n\n    file_dfs = []\n    section = {}\n    \n    with open(PARAMS['train_folder']+'\/'+ file +'.json', 'r') as f:\n        paper = json.load(f)\n\n    dfs = []    \n    len_paper = len(paper)\n        \n    for section_index in range (0, len_paper):\n        section_sentences = paper[section_index].get('text')\n        \n        section['file'] = file\n        section['orig_sentence'] = section_sentences\n        \n        df = pd.DataFrame.from_dict(section, orient = 'index').T\n        dfs.append(df)\n        \n        file_df = pd.concat(dfs)\n               \n    file_dfs.append(file_df)\n    file_df = pd.concat(file_dfs)\n    \n    return file_df","209dac6a":"%%time\n# you will notice that the kernel CPU usage are close to 400% while this is running\n\nfutures = [] # save the future since dask is lazy, otherwise nothing is executed.\nfor file in tqdm(train_files):\n    f = client.submit(extract_text_from_pub,file) # pass the function to be executed and the file id\n    futures.append(f)\n_ = wait(futures)","99a2ae6c":"%%time\nparagraphs = []\nfor f in tqdm(futures):\n    p = f.result()\n    paragraphs.append(p)","76c98fa3":"sentences_df = pd.concat(paragraphs).reset_index(drop=True)\ndisplay(sentences_df)","44a1b994":"NOTE: tqdm bar won't work properly here, it will only show the time it took to send the parameters to dask, so it will reach 100% much faster than the cell is going to finish","312328df":"# Without dask","b725de39":"## Start a local cluster on the machine\n\nworkers = 4 means that we are going to use all 4 cores to process","89254f58":"# Reading .json files using DASK\n\nI'm creating this notebook to show you guys how i managed to speed up the read process of the .json files, i came across a few methods on other people's notebooks and it was taking around 13 minutes to read all 14k train files, a few months ago i came across a notebook that was loading many files at once using dask, so i tried to do something similar here, using dask the time to read was reduced to 4 minutes (on my 8 core machine), the upside of using this is that you will be able to run the same code in a personal laptop or a several-cores server, just adjusting the number of workers.\n\nDask can process cpu tasks in parallel, so the same method can be adapted to process any cpu intensive tasks that you might be using."}}