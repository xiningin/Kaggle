{"cell_type":{"10a8e768":"code","2ff40d4e":"code","be89d618":"code","f2f1866f":"code","be4f611b":"code","c74bc2a2":"code","3a0a2780":"code","5c5240b2":"code","d267fb9c":"code","ed7f7c34":"code","7b182cff":"code","676f6654":"code","da2d218a":"code","d1daa225":"code","19de0e8e":"code","1f984eb2":"code","648647b4":"code","7dac09ab":"code","5487a01b":"code","a0f13a5e":"code","faed629c":"code","3d344bee":"code","262507d5":"code","d6428d9b":"markdown","89718bf4":"markdown","07d6126c":"markdown","1e08d8a6":"markdown","92922fc5":"markdown","0b2f8d71":"markdown"},"source":{"10a8e768":"import matplotlib.pyplot as plt\nfrom matplotlib import style\nimport pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.linear_model import LinearRegression\n%matplotlib inline\nfrom mlxtend.plotting import plot_linear_regression\nimport seaborn as sns","2ff40d4e":"\ns_data = pd.read_csv('..\/input\/student-dataset\/student_scores%20-%20student_scores.csv')\nprint(\"Data imported successfully\")\n\ns_data.head(25)","be89d618":"x = np.array(s_data['Hours']).reshape((-1, 1))\ny = np.array(s_data['Scores'])\nprint(x)\nprint(y)","f2f1866f":"model = LinearRegression()\nmodel.fit(x, y)\nmodel = LinearRegression().fit(x, y)\nr_sq = model.score(x, y)\nprint('coefficient of determination:', r_sq)","be4f611b":"print('intercept:', model.intercept_)\nprint('slope:', model.coef_)\n","c74bc2a2":"new_model = LinearRegression().fit(x, y.reshape((-1, 1)))\nprint('intercept:', new_model.intercept_)\nprint('slope:', new_model.coef_)","3a0a2780":"y_pred = model.predict(x)\nprint('predicted response:', y_pred, sep='\\n')","5c5240b2":"y_pred = model.intercept_ + model.coef_ * x\nprint('predicted response:', y_pred, sep='\\n')","d267fb9c":"x_new = np.arange(5).reshape((-1, 1))\nprint(x_new)\ny_new = model.predict(x_new)\nprint(y_new)","ed7f7c34":"plt.scatter(x , y, color = \"red\")\nplt.plot(x, model.predict(x), color = \"green\")\nplt.title(\"Scores vs Hours (Training set)\")\nplt.xlabel(\"Hours of study\")\nplt.ylabel(\"Scores\")\nplt.show()","7b182cff":"## setting plot style \nplt.style.use('fivethirtyeight') \n  \n## plotting residual errors in training data \nplt.scatter(model.predict(x), model.predict(x) - y, \n            color = \"green\", s = 10, label = 'Train data') \n  \n## plotting residual errors in test data \nplt.scatter(model.predict(x), model.predict(x) - y, \n            color = \"blue\", s = 10, label = 'Test data') \n  \n## plotting line for zero residual error \nplt.hlines(y = 0, xmin = 0, xmax = 50, linewidth = 2) \n  \n## plotting legend \nplt.legend(loc = 'upper right') \n  \n## plot title \nplt.title(\"Residual errors\") \n  \n## function to show plot \nplt.show() ","676f6654":"from sklearn.linear_model import LinearRegression\nRegressor = LinearRegression()\nRegressor.fit(x,y)\n# Visualize the Data for Multiple Linear Regression\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\nfig = plt.figure(figsize=(25,10))\n### Set figure size\nax = fig.add_subplot(111, projection='3d')\nax.scatter(s_data['Hours'],s_data['Scores'],c='red', marker='o', alpha=0.5)\nax.plot_surface(x ,y, y_pred , color='b', alpha=0.3)\nax.set_xlabel('Hours')\nax.set_ylabel('Scores')\nax.set_zlabel('Adjusted')\nplt.show()","da2d218a":"sns.boxplot(x = 'Hours' , y = 'Scores' , data=s_data)","d1daa225":"s_data.describe(include = 'all')","19de0e8e":"sns.pairplot(s_data)","1f984eb2":"corr=s_data.corr()\ncorr","648647b4":"s_data.hist(figsize=(10,10))","7dac09ab":"sns.distplot(s_data['Hours'],bins=1)\nsns.distplot(s_data['Scores'],bins=1)","5487a01b":"sns.heatmap(corr , annot=True)","a0f13a5e":"s_data.plot.bar() \n\n# plot between 2 attributes \nplt.bar(s_data['Hours'], s_data['Scores']) \nplt.xlabel(\"Hours\") \nplt.ylabel(\"Scores\") \nplt.show() ","faed629c":"plt.pie(s_data['Hours'],autopct ='% 1.1f %%', shadow = True)  \nplt.pie(s_data['Scores'],autopct ='% 1.1f %%', shadow = True)  \nplt.show() ","3d344bee":"sns.lmplot(x='Hours',y='Scores',data=s_data,legend=True,palette='red')","262507d5":"sns.countplot(x='Hours',data=s_data)\nsns.countplot(x='Scores',data=s_data)","d6428d9b":"**CREATE A MODEL AND FIT IT**","89718bf4":"**PLOTTING THE DATASET IN ALL POSSIBLE WAYS FOR BETTER UNDERSTANDING**","07d6126c":"**IMPORTING THE DATASET**","1e08d8a6":"**SIMPLE LINEAR REGRESSION**","92922fc5":"**PREDICTING THE RESPONSE**","0b2f8d71":"**PROOF OF THE DATASET TO BE A LINEAR DATASET**"}}