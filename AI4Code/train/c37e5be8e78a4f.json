{"cell_type":{"602e1e38":"code","82bc41a4":"code","84ce8816":"code","8310b0ea":"code","0cd1f2eb":"code","e465cbdb":"code","0e79b405":"code","c30f9d10":"code","65a0f47a":"code","46822cca":"code","c4c1fd0f":"code","6a956093":"code","ed092780":"code","a46e3a61":"code","fe7be127":"code","f13ea15f":"code","530a3882":"markdown","26b83d81":"markdown","dd7fce6f":"markdown","1fe0328c":"markdown","f4a8a241":"markdown","d945d264":"markdown","c7af876c":"markdown","5c2aa222":"markdown","8b2e0e99":"markdown","ab671e20":"markdown","432b318b":"markdown","adf5aa37":"markdown","90012e0f":"markdown","44f885e2":"markdown","36273ec6":"markdown"},"source":{"602e1e38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n#import numpy as np # linear algebra\n#import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n'''import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))'''\n\n# Any results you write to the current directory are saved as output.","82bc41a4":"import tensorflow\nimport keras\nimport pandas as pd\nimport numpy as np\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, GlobalAveragePooling2D\nfrom sklearn.datasets import load_files","84ce8816":"train_dir='\/kaggle\/input\/withwithout-mask\/maskdata\/maskdata\/train\/'\ntest_dir='\/kaggle\/input\/withwithout-mask\/maskdata\/maskdata\/test\/'","8310b0ea":"def load_dataset(path):\n    data = load_files(path) #load all files from the path\n    files = np.array(data['filenames']) #get the file  \n    targets = np.array(data['target'])#get the the classification labels as integer index\n    target_labels = np.array(data['target_names'])#get the the classification labels \n    return files,targets,target_labels\n    \nx_train, y_train,target_labels = load_dataset(train_dir)\nx_test, y_test,_ = load_dataset(test_dir)\n\nprint('Training set size : ' , x_train.shape[0])\nprint('Testing set size : ', x_test.shape[0])","0cd1f2eb":"num_classes = 2","e465cbdb":"resnet_weights_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'","0e79b405":"my_new_model = Sequential()\nmy_new_model.add(ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path))\nmy_new_model.add(Dense(num_classes, activation='softmax'))\n\nmy_new_model.layers[0].trainable = False","c30f9d10":"my_new_model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])","65a0f47a":"from keras.applications.resnet50 import ResNet50\nfrom keras.preprocessing import image\nfrom keras.applications.resnet50 import preprocess_input, decode_predictions\nfrom keras_preprocessing.image import ImageDataGenerator\nimport numpy as np\n\n\nimage_size = 224\ndata_generator = ImageDataGenerator(preprocessing_function=preprocess_input,horizontal_flip=True,\n                                   width_shift_range = 0.2,\n                                   height_shift_range = 0.2)\n\n\ntrain_generator = data_generator.flow_from_directory(\n        train_dir,\n        target_size=(image_size, image_size),\n        batch_size=50,\n        class_mode='categorical')\n\nvalidation_generator = data_generator.flow_from_directory(test_dir,target_size=(image_size, image_size),\n        class_mode='categorical')\n\nhistory=my_new_model.fit_generator(\n        train_generator,\n        steps_per_epoch=4,epochs=3,\n        validation_data=validation_generator,\n        validation_steps=1)","46822cca":"import matplotlib.pyplot as plt\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","c4c1fd0f":"import pickle\n\npickle_out = open(\"resnet50_history.pickle\",\"wb\")\npickle.dump(history.history, pickle_out)\npickle_out.close()","6a956093":"pickle_in = open(\"resnet50_history.pickle\",\"rb\")\nsaved_history = pickle.load(pickle_in)\nprint(saved_history)","ed092780":"import random\nimport cv2\n\ndef image_show(image,title):\n    print(image)\n    img = cv2.imread(image)\n    plt.imshow(img)\n    plt.title(title)\n    plt.show()","a46e3a61":"test_gen1=data_generator.flow_from_directory('\/kaggle\/input\/test-data\/test\/',target_size=(image_size, image_size),\n        class_mode='categorical',shuffle=False)\n\ntest_gen1.filenames","fe7be127":"predictions_test=my_new_model.predict_generator(test_gen1)\nlen(predictions_test)\nres_test=[]\nfor i in predictions_test:\n    if i[0]<0.5:\n        res_test.append(\"Not Wearing mask\")\n    else:\n        res_test.append(\"Wearing mask\")","f13ea15f":"image_show('\/kaggle\/input\/test-data\/test\/1\/464-with-mask.jpg',res_test[5])","530a3882":"![Individual wearing a mask](https:\/\/media.giphy.com\/media\/LM2BXEQUepvjLEgt1N\/giphy.gif)","26b83d81":"Preprocessing the data via ImageDataGenerator.The data here is categorical as it is divided into two categories namely With Mask and Without Mask.","dd7fce6f":"# **Further applications:**\n\nA mask detector like this one can be used in security cameras and only allow entry of those individuals who have a mask on. It will be extremely beneficial and can even lessen the transmission rate.\nAnother application can be identifying the people wearing masks and not wearing masks in an epicentre of corona virus so as to examine the circumstances and analyse if wearing a mask is really beneficial or not.","1fe0328c":"Importing resnet weights for importing the pretrained model. Resnet50 is used here because it proves to substantially reduce the number of parameters.","f4a8a241":"Importing small dataset of 8 files for custom testing.","d945d264":"More stats for nerds!","c7af876c":"##Architecture of ResNet50\n\n![Arch](https:\/\/www.researchgate.net\/publication\/338603223\/figure\/fig1\/AS:847598516711425@1579094642237\/ResNet-50-architecture-26-shown-with-the-residual-units-the-size-of-the-filters-and.png)","5c2aa222":"The implementation ends here. Below is just a custom testing model that is created for validation and checking if the model predicts correctly for some new data.","8b2e0e99":"Creating the model and removing its first layer as we wish to train it and not use the pre-trained first layer.","ab671e20":"Also, please take the following measures if you step out:\n* Cover mouth and nose with mask and make sure there are no gaps between your face and the mask.\n* Avoid touching the mask while using it; if you do, clean your hands with alcohol-based hand rub or soap and water.\n* Replace the mask with a new one as soon as it is damp and do not re-use single-use masks.\n* To remove the mask: remove it from behind (do not touch the front of mask); discard immediately in a closed bin; clean hands with alcohol-based hand rub or soap and water.","432b318b":"# **MASK DETECTION IN IMAGES USING RESNET50**#  ","adf5aa37":"Importing the training and testing data from respective directories and splitting it into categories for validation using load_files.","90012e0f":"![Masks are important!](https:\/\/forthebadge.com\/images\/badges\/check-it-out.svg)\n\n\nWearing masks in the midst of the rising corona virus(COVID-19) is made mandatory by a lot of cities. This is a basic resnet implementation that performs binary classification of images and identifies images where the individual is wearing a mask or not.","44f885e2":"This is a basic implementation using the ResNet50 model. I am a beginner so please feel free to offer corrections and suggestions.","36273ec6":"Plotting accuracies for training and testing."}}