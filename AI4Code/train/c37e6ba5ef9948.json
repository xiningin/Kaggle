{"cell_type":{"b7a54265":"code","9fe87fce":"code","95c08b1b":"code","92bad25c":"code","ab6099b3":"code","616bfdf8":"code","46d17f50":"code","668451a2":"code","40a9caf5":"code","5d779ae5":"code","e2602c1b":"code","8ed62a3c":"code","2ab5ae8e":"code","438fa999":"code","72936db7":"code","77452603":"code","0c47ffe4":"code","15079a16":"code","05621701":"code","27338eef":"markdown","23e9ec90":"markdown","19b0ec67":"markdown","543b39d7":"markdown"},"source":{"b7a54265":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n%matplotlib inline\nprint(os.listdir(\"..\/input\"))","9fe87fce":"heart = pd.read_csv('..\/input\/heart.csv')\nprint(\"Shape of this data {} \\n{} is no of row and {} is no of column.\"\n      .format(heart.shape, heart.shape[0], heart.shape[1]))\nheart.head()","95c08b1b":"heart.info()","92bad25c":"#Check null value in this data \nprint(list(heart.isnull().any()))","ab6099b3":"#counting target variable\nsb.countplot(x='target', data=heart)\nplt.xlabel(\"Target ({} for Non-disease, {} for disease)\".format(0, 1))\nplt.show()\nheart.target.value_counts()","616bfdf8":"len_No_Disease, len_Disease = (len(heart[heart.target == 0]), len(heart[heart.target == 1]))\nlen_heart = heart.shape[0]\nprint(\"Patients which havn't heart disease: {:.2f}%\".format(len_No_Disease\/(len_heart)*100))\nprint(\"Patients which have heart disease: {:.2f}%\".format(len_Disease\/(len_heart)*100))","46d17f50":"#Counting about sex\nsb.countplot(x='sex', data=heart)\nplt.xlabel(\"Sex - {} for female and {} for male\".format(0, 1))\nplt.show()","668451a2":"heart.hist(figsize=(18, 12))\nplt.show()","40a9caf5":"col = ['age', 'sex', 'cp', 'fbs', 'restecg', 'trestbps',\n       'exang', 'oldpeak', 'slope', 'ca', 'thal']","5d779ae5":"plt.style.use('ggplot')\nfor item in col:\n    pd.crosstab(heart[item], heart.target).plot(kind='bar', figsize=(15, 7))\n    plt.title(\"{} with target\".format(str(item)))\n    plt.legend([\"non disease\", \"disease\"])\n    plt.ylabel(\"Frequency\")\nplt.show()","e2602c1b":"plt.style.use('ggplot')\nleft_col = ['chol', 'trestbps', 'thalach']\nfor col in left_col:\n    plt.figure(figsize=(12, 7))\n    plt.title(\"{} with target\".format(col))\n    sb.boxplot(x=heart.target, y=heart[col])\nplt.show()","8ed62a3c":"plt.subplots(figsize=(20,7))\nsb.heatmap(heart.corr(), annot=True, cmap='coolwarm')\nplt.show()","2ab5ae8e":"f, axes = plt.subplots(4,4, figsize=(20, 15))\nsb.distplot( heart[\"age\"], ax=axes[0,0])\nsb.distplot( heart[\"sex\"], ax=axes[0,1])\nsb.distplot( heart[\"cp\"], ax=axes[0,2])\nsb.distplot( heart[\"trestbps\"], ax=axes[0,3])\nsb.distplot( heart[\"chol\"], ax=axes[1,0])\nsb.distplot( heart[\"fbs\"], ax=axes[1,1])\nsb.distplot( heart[\"restecg\"], ax=axes[1,2])\nsb.distplot( heart[\"thalach\"], ax=axes[1,3])\nsb.distplot( heart[\"exang\"], ax=axes[2,0])\nsb.distplot( heart[\"oldpeak\"], ax=axes[2,1])\nsb.distplot( heart[\"slope\"], ax=axes[2,2])\nsb.distplot( heart[\"ca\"], ax=axes[2,3])\nsb.distplot( heart[\"thal\"], ax=axes[3,0])\nsb.distplot( heart[\"target\"], ax=axes[3,1])\nplt.show()","438fa999":"cols = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak','target']\nsb.set_style('whitegrid')\nsb.pairplot(heart[cols], height=3, hue='target')\nplt.show()","72936db7":"y = heart.target\nX = heart.drop(['target'], axis=1).values","77452603":"# Split data into train and test formate\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","0c47ffe4":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import roc_curve, auc","15079a16":"algo = {'Logistic Regression': LogisticRegression(solver='liblinear'), \n        'Decision Tree':DecisionTreeClassifier(), \n        'Random Forest':RandomForestClassifier(n_estimators=10, random_state=0), \n        'SVM':SVC(gamma=0.01, kernel='linear'),\n        'Gradient Boosting' :GradientBoostingClassifier(max_features=1, learning_rate=0.05)\n       }\npredict_value = {}\nplt.figure(figsize=(10, 5))\nfor k, v in algo.items():\n    model = v\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    false_positive_rate, true_positive_rate, threshold = roc_curve(y_test, y_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    predict_value[k] = model.score(X_test, y_test)*100\n    print('Acurracy of ' + k + ' is {0:.2f}'.format(model.score(X_test, y_test)*100))\n    print('AUC-ROC Curve of ' + k + ' is {0:.2f}\\n'.format(roc_auc*100))\n    \n    # plot the roc curve for the model\n    plt.plot([0, 1], [0, 1], linestyle='--')\n    plt.plot(false_positive_rate, true_positive_rate, marker='*', label=k)\n    plt.legend(loc='lower right')\n    \nplt.show()","05621701":"plt.style.use('ggplot')\nplt.figure(figsize=(12, 7))\nsb.barplot(x=list(predict_value.keys()), y=list(predict_value.values()))\nplt.yticks(np.arange(0,100,10))\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Modals\")\nplt.show()","27338eef":"#### So, There is no any null value in this dataset","23e9ec90":"## ** *Information about some attributes as follow :-* **\n### Sex\n    Female  - 0\n    Male    - 1\n### Chest Pain Type\n    typical angina    - 0\n    atypical angina   - 1\n    non-anginal pain  - 2\n    asymptomatic      - 3\n### Blood Pressure\n    Normally resting blood pressure is aprox 120 millimetres of mercury systolic and 80 millimetres \n    of mercury diastolic. where we are usally say 120\/80.\n    \n    * High Blood Pressure - If systolic blood pressure greater than 130 mm Hg and diastolic blood\n    pressure greater than 90 mm Hg.\n    * Low Blood Pressure - If systolic blood pressure lower than 90 mm Hg and diastolic blood\n    pressure lower than 60 mm Hg\n### Cholestoral\n    If cholestoral get too high in blood then it could become a heart attack.\n    Type of cholestoral is :-\n        1. low-density lipoproteins (LDL), or \"bad\" cholesterol - It should be less than 100 mg\/dl.\n                100-129 mg\/dl is acceptable for people\n                130 and above is bad for people\n        2. high-density lipoproteins (HDL), or \"good\" cholesterol - It should be at least 40 mg\/dl \n                and it is as good as it is.\n        3. triglycerides cholestrol - It should be less than 150 mg\/dl.\n       \n       * Serum Cholestrol = Addtion of LDL, HDL and 20% of triglycerides.\n               less than 200 mg\/dl --- Good\n               200-239 mg\/dl --- Borderline High\n               240 mg\/dl --- High\n#### Fasting blood suger\n    Normaly fasting blood suger should be 70 to 130 mg\/dl.\n    \n        \n    ","19b0ec67":"# **Train Modal** \n    1. Logistic Regression\n    2. Decision Tree Classificion\n    3. Random Forest Classificion\n    4. Support Vector Machine","543b39d7":"Attribute Information:\n> 1. age\n> 2. sex\n> 3. chest pain type (4 values)\n> 4. resting blood pressure\n> 5. serum cholestoral in mg\/dl\n> 6. fasting blood sugar > 120 mg\/dl\n> 7. resting electrocardiographic results (values 0,1,2)\n> 8. maximum heart rate achieved\n> 9. exercise induced angina\n> 10. oldpeak = ST depression induced by exercise relative to rest\n> 11. the slope of the peak exercise ST segment\n> 12. number of major vessels (0-3) colored by flourosopy\n> 13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect"}}