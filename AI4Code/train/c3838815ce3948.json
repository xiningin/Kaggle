{"cell_type":{"21717c12":"code","1cad40a1":"code","136f0c98":"code","4ce6b370":"code","f0c60620":"code","f115052d":"code","dfa5ae50":"code","a05ff214":"code","ce76d0a7":"code","59eada05":"code","cc9fabb6":"code","21e6bb5a":"code","538b79c9":"code","3d8aa189":"code","14cb184f":"code","3b743241":"code","0c9e2621":"code","9f4fc269":"code","c7552d43":"code","587858d4":"code","f8a39f5f":"code","12fa2320":"code","352989a6":"code","40499987":"code","b6f6e0ab":"code","3f6d8758":"code","1959fcfb":"code","84f3fb05":"code","92902b36":"code","4f1a9334":"code","c94bf6c5":"code","9427e611":"code","ccb6d6b7":"code","b91d32d8":"code","0cfdc55e":"code","17dc6674":"code","245b020a":"code","8cfa4012":"code","eea3a49f":"code","1e0fbea7":"code","1afb97b7":"code","ef293ef0":"code","06d4827f":"code","bab24ee4":"code","0579431b":"code","6e4ab7d8":"code","4abb9bc7":"code","30e02366":"code","c117c123":"code","b76e7365":"code","262f4c83":"code","8aa48eed":"code","23424a66":"code","2dce1eae":"code","f17bb577":"code","e60a0703":"code","e12acd1f":"code","962e9051":"code","faab9bcb":"code","2585fadc":"code","b218e2f0":"code","e5a7a653":"code","cab8c2d8":"code","687b492e":"code","3b43f377":"code","a91f0406":"code","f6dc5572":"code","164ac000":"code","794d27e5":"code","9f7c47e6":"code","45256d2a":"code","94e33b08":"code","d546cd8b":"code","77a53f76":"code","9f4a1c41":"code","1c47f765":"code","1247f326":"code","d480c177":"code","627c3574":"code","0ddf51e0":"code","4e93fc7f":"code","e9d94983":"code","c5bde0ef":"code","2fad5076":"code","301e2bc8":"code","2fc02772":"code","7e04b77a":"code","299a9b9e":"code","42014d76":"code","9ba0f1ab":"code","806a11f2":"code","8a2fa4b7":"code","b1a3f7c1":"code","e9796774":"code","6e2fe565":"code","93f1be86":"code","c46f1c3f":"code","af745c02":"code","c4d920db":"code","8133bdd5":"code","0ab295ef":"code","c8ea28a9":"code","055b93aa":"code","89654ed1":"code","6a6c56c9":"code","7695e996":"code","3b1c042d":"code","2b025fd7":"code","5b1b2627":"code","4ad99319":"code","71e5208f":"markdown","088a2283":"markdown","e788f774":"markdown","6f591144":"markdown","310c5dee":"markdown","fd4a273d":"markdown","34056f19":"markdown","41a5906d":"markdown","f3827071":"markdown","3581d831":"markdown","0b7db8e6":"markdown","699c8ab7":"markdown","e862e065":"markdown","7c9e7167":"markdown","89e9f708":"markdown","3da86a3a":"markdown","c1d49c3c":"markdown","a3e91ddd":"markdown","72ce3bf7":"markdown","5fbc7573":"markdown","40a8622f":"markdown","75692c34":"markdown","42bd048a":"markdown","85a9a7bd":"markdown","7ef35661":"markdown","e46af8fb":"markdown","7f7a01d2":"markdown","d7d0f7eb":"markdown","061cb7f4":"markdown","55cae408":"markdown","d40a1bcd":"markdown","ae774ae0":"markdown","2fb3b250":"markdown","842a7055":"markdown","1b648e6a":"markdown","bbbda773":"markdown","fb1a0c5c":"markdown","950e7f9d":"markdown","5fb2d9a8":"markdown","02265ea1":"markdown","b901143c":"markdown","e5997be4":"markdown","afd6b917":"markdown","9e8fdf9e":"markdown","1d669ce9":"markdown","53beadf5":"markdown","873164bf":"markdown","a7d00226":"markdown","d9794667":"markdown","4faf15ab":"markdown"},"source":{"21717c12":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nplt.rcParams[\"figure.figsize\"] = (8, 6)\n\nimport warnings\nwarnings.filterwarnings('ignore')","1cad40a1":"train = pd.read_csv(\"..\/input\/kakr-4th-competition\/train.csv\")\ntest = pd.read_csv(\"..\/input\/kakr-4th-competition\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/kakr-4th-competition\/sample_submission.csv\")\n\nprint('train shape: ', train.shape)\nprint('test shape: ', test.shape)\nprint('submission shape: ', submission.shape)","136f0c98":"train.head()","4ce6b370":"# EDA\uc640 Feature Engineering\uc744 \uc704\ud574\uc11c\ub294 \ubcf5\uc0ac\ubcf8\uc744 \uc4f0\ub294 \uac83\uc774 \uc88b\ub2e4\uace0 \ud55c\ub2e4..\ntmp_train = train.copy()","f0c60620":"tmp_train.info()","f115052d":"# \ubcc0\uc218\uba85 \ubcc0\ud654\ntmp_train['income'] = tmp_train['income'].map(lambda x: 1 if x == '>50K' else 0)","dfa5ae50":"tmp_train['income'].value_counts()","a05ff214":"sns.countplot('income', data=tmp_train);","ce76d0a7":"plt.figure(figsize=(12, 8))\n\ntmp_train.loc[tmp_train['income'] == 0, 'fnlwgt'].plot(kind='kde', alpha=0.5, label='income == 0')\ntmp_train.loc[tmp_train['income'] == 1, 'fnlwgt'].plot(kind='kde', alpha=0.5, label='income == 1')\n\nplt.legend()\nplt.show()","59eada05":"print('\ucd5c\uc18c \uc5f0\ub839: ', tmp_train['age'].min())\nprint('\ucd5c\uace0 \uc5f0\ub839: ', tmp_train['age'].max())\nprint('\ud3c9\uade0 \uc5f0\ub839: {:.2f}'.format(tmp_train['age'].mean()))","cc9fabb6":"# \uc18c\ub4dd\uc5d0 \ub530\ub978 \uc5f0\ub839 \uad6c\ubd84\n\nplt.figure(figsize=(12, 8))\n\ntmp_train.loc[tmp_train['income'] == 0, 'age'].plot(kind='kde', label='income == 0')\ntmp_train.loc[tmp_train['income'] == 1, 'age'].plot(kind='kde', label='income == 1')\n\nplt.title('Distribution of ages \\nby income')\nplt.xticks(range(0, 100, 5))\nplt.legend()\nplt.show()","21e6bb5a":"def make_age_band(df):\n    df['age_band'] = 0\n    df.loc[df['age'] < 20, 'age_band'] = 10\n    df.loc[(df['age'] >= 20) & (df['age'] < 30), 'age_band'] = 20\n    df.loc[(df['age'] >= 30) & (df['age'] < 40), 'age_band'] = 30\n    df.loc[(df['age'] >= 40) & (df['age'] < 50), 'age_band'] = 40\n    df.loc[(df['age'] >= 50) & (df['age'] < 60), 'age_band'] = 50\n    df.loc[(df['age'] >= 60) & (df['age'] < 70), 'age_band'] = 60\n    df.loc[(df['age'] >= 70) & (df['age'] < 80), 'age_band'] = 70\n    df.loc[(df['age'] >= 80) & (df['age'] < 90), 'age_band'] = 80\n    df.loc[(df['age'] >= 90), 'age_band'] = 90\n    \n    return df\n\ntmp_train = make_age_band(tmp_train)","538b79c9":"tmp_train['age_band'].value_counts()","3d8aa189":"fig, ax = plt.subplots(1, 2, figsize=(16, 8))\n\nsns.distplot(tmp_train['capital_gain'],kde=False, ax=ax[0])\nsns.distplot(tmp_train['capital_loss'],kde=False, ax=ax[1])\n\nplt.show()","14cb184f":"# capital_gain\uacfc capital_loss \uac12\uc774 0\uc774 \uc544\ub2cc \ub370\uc774\ud130 \ud655\uc778\n\ncapital_gain_value = tmp_train.loc[tmp_train['capital_gain'] != 0, 'capital_gain']\ncapital_loss_value = tmp_train.loc[tmp_train['capital_loss'] != 0, 'capital_loss']\n\nprint('capital_gain: {}\\t{:.2f}%'.format(len(capital_gain_value), len(capital_gain_value) \/ len(tmp_train) * 100))\nprint('capital_loss: {}\\t{:.2f}%'.format(len(capital_gain_value), len(capital_loss_value) \/ len(tmp_train) * 100))","3b743241":"fig, ax = plt.subplots(1, 2, figsize=(16, 8))\nplt.suptitle('capital with not 0')\n\ntmp_train.loc[tmp_train['capital_gain'] != 0, 'capital_gain'].plot(kind='hist', ax=ax[0])\nax[0].set_xlabel('capital_gain'); ax[0].set_ylabel('')\n\ntmp_train.loc[tmp_train['capital_loss'] != 0, 'capital_loss'].plot(kind='hist', ax=ax[1])\nax[1].set_xlabel('capital_loss'); ax[1].set_ylabel('')\n\nplt.show()","0c9e2621":"fig, ax = plt.subplots(1, 2, figsize=(24, 8))\n\n# capital_gain\uc774 0\uc774 \uc544\ub2cc \ub370\uc774\ud130\uc5d0 \ub300\ud55c income \ube44\uad50\ntmp_train.loc[(tmp_train['capital_gain'] != 0) & (tmp_train['income'] == 0), 'capital_gain'].plot(kind='kde', label='capital_gain with income == 0', ax=ax[0])\ntmp_train.loc[(tmp_train['capital_gain'] != 0) & (tmp_train['income'] == 1), 'capital_gain'].plot(kind='kde', label='capital_gain with income == 1', ax=ax[0])\n\nax[0].set_title('Distribution of income \\nwith capital_gain != 0')\nax[0].set_ylabel('')\nax[0].legend()\n\n\n# capital_loss\uac00 0\uc774 \uc544\ub2cc \ub370\uc774\ud130\uc5d0 \ub300\ud55c income \ube44\uad50\ntmp_train.loc[(tmp_train['capital_loss'] != 0) & (tmp_train['income'] == 0), 'capital_loss'].plot(kind='kde', label='capital_loss with income == 0', ax=ax[1])\ntmp_train.loc[(tmp_train['capital_loss'] != 0) & (tmp_train['income'] == 1), 'capital_loss'].plot(kind='kde', label='capital_loss with income == 1', ax=ax[1])\n\nax[1].set_title('Distribution of income \\nwith capital_loss != 0')\nax[1].set_ylabel('')\nax[1].legend()\n\nplt.show()","9f4fc269":"tmp_train[(tmp_train['capital_gain'] != 0) & (tmp_train['capital_loss'] != 0)]","c7552d43":"# \uac01 \ubcc0\uc218\uc758 \ub85c\uadf8 \ubcc0\uc218 \uc0dd\uc131\ntmp_train['capital_gain_log'] = 0\ntmp_train['capital_loss_log'] = 0\n\n# log\uac12 \uad6c\ud558\uae30\ntmp_train['capital_gain_log'] = tmp_train['capital_gain'].map(lambda x: np.log1p(x))\ntmp_train['capital_loss_log'] = tmp_train['capital_loss'].map(lambda x: (-1) * np.log1p(x)) # loss\ub294 \uc74c\uc218\ub85c \ucc98\ub9ac\n\n\n# capital_log \ubcc0\uc218 \uc0dd\uc131\ntmp_train['capital_log'] = 0\n\n# capital_loss_log\uc5d0\ub294 \uc74c\uc218 \uac12\uc73c\ub85c \uc801\uc6a9\ud574\uc900\ub2e4\ntmp_train['capital_log'] = tmp_train['capital_gain_log'] + tmp_train['capital_loss_log']","587858d4":"# \ubd84\ud3ec \ud655\uc778\nsns.distplot(tmp_train['capital_log'], kde=False);","f8a39f5f":"# log \ub370\uc774\ud130 \uc0ad\uc81c\ntmp_train = tmp_train.drop(columns=['capital_gain_log', 'capital_loss_log'])","12fa2320":"tmp_train[['education', 'education_num']].value_counts()","352989a6":"# education_num \uc0ad\uc81c\ntmp_train = tmp_train.drop('education_num', axis=1)","40499987":"# education \ubd84\ud3ec \ud655\uc778\nfig, ax = plt.subplots(1, 2, figsize=(24, 6))\n\ntmp_train['education'].value_counts().plot(kind='bar', ax=ax[0])\n\nsns.countplot(x='education', hue='income', data=tmp_train, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=90)\nax[1].legend(loc='upper right')\nax[1].set_ylabel('')\n\nplt.show()","b6f6e0ab":"train.marital_status.value_counts()","3f6d8758":"train.relationship.value_counts()","1959fcfb":"fig, ax = plt.subplots(1, 2, figsize=(24, 6))\n\nsns.countplot(x='marital_status', hue='income', data=tmp_train, ax=ax[0])\nax[0].tick_params(axis='x', labelrotation=45)\nax[0].legend()\nax[0].set_ylabel('')\n\nsns.countplot(x='relationship', hue='income', data=tmp_train, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=45)\nax[1].legend()\nax[1].set_ylabel('')\n\nplt.show()","84f3fb05":"tmp_train['race'].value_counts()","92902b36":"tmp_train['native_country'].value_counts()","4f1a9334":"fig, ax = plt.subplots(1, 2, figsize=(24, 6))\n\nsns.countplot(x='race', hue='income', data=tmp_train, ax=ax[0])\nax[0].tick_params(axis='x', labelrotation=45)\nax[0].legend()\nax[0].set_ylabel('')\n\nsns.countplot(x='native_country', hue='income', data=tmp_train, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=45)\nax[1].legend()\nax[1].set_ylabel('')\n\nplt.show()","c94bf6c5":"# native_country\uc5d0\uc11c United-States\uac00 \uc544\ub2cc \uad6d\uac00 \ud655\uc778\n# \uac12\uc774 \ub108\ubb34 \uc791\ub2e4\nsns.countplot(x='native_country', hue='income', data=train[train['native_country'] != 'United-States']);","9427e611":"# native_country \uac12 \ubcc0\uacbd\ntmp_train['native_country_bin'] = tmp_train['native_country'].map(lambda x: 1 if x == 'United-States' else 0)","ccb6d6b7":"# \ubbf8\ubbf8\ud560 \uac83 \uac19\ub2e4 (\ub0b4 \uc0dd\uac01)\ntmp_train['native_country_bin'].value_counts()","b91d32d8":"tmp_train['workclass'].value_counts()","0cfdc55e":"tmp_train['occupation'].value_counts()","17dc6674":"# workclass\uc640 occupation \ub370\uc774\ud130 \ubd84\ud3ec \ud655\uc778\n\nfig, ax = plt.subplots(1, 2, figsize=(24, 8))\n\nsns.countplot('workclass', hue='income', data=tmp_train, ax=ax[0])\nax[0].tick_params(axis='x', labelrotation=60)\nax[0].set_ylabel('')\nax[0].legend(loc='upper right')\n\nsns.countplot('occupation', hue='income', data=tmp_train, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=60)\nax[1].set_ylabel('')\nax[1].legend(loc='upper right')\n\nplt.show()","245b020a":"# \ub450 \ubcc0\uc218 \ubaa8\ub450 '?' \uac12\uc774 \uc788\ub294\ub370 `occupation`\uc5d0 6\uac1c\uac00 \ub354 \ub9ce\ub2e4.\n# workclass \uc640 occupation\uc758 '?'\uac12\uc744 \uac00\uc9c0\ub294 \ub370\uc774\ud130\uac00 \uac19\uc740\uc9c0 \ud655\uc778 => \uac19\ub2e4.\ntrain[(train['workclass'] == '?') & (train['occupation'] == '?')].shape[0] == train[train['workclass'] == '?'].shape[0]","8cfa4012":"# workclass\ub294 '?'\uac00 \uc544\ub2c8\uc9c0\ub9cc occupation\ub9cc '?'\ub97c \uac00\uc9c0\ub294 \ub370\uc774\ud130 \ud655\uc778\ntrain[(train['workclass'] != '?') & (train['occupation'] == '?')][['workclass', 'occupation']]","eea3a49f":"sns.distplot(tmp_train['hours_per_week'], kde=False);","1e0fbea7":"plt.figure(figsize=(12, 8))\n\ntmp_train[tmp_train['income'] == 0]['hours_per_week'].plot(kind='kde', alpha=0.5, color='red', label='income==0')\ntmp_train[tmp_train['income'] == 1]['hours_per_week'].plot(kind='kde', alpha=0.5, color='blue', label='income==1')\n\nplt.title('Distribution of hours_per_week \\nwith income')\nplt.legend()\nplt.show()","1afb97b7":"fig, ax = plt.subplots(1, 2, figsize=(24, 8))\n\nsns.boxplot(x='workclass', y='hours_per_week', data=tmp_train, ax=ax[0])\nax[0].tick_params(axis='x', labelrotation=60)\n\nsns.boxplot(x='occupation', y='hours_per_week', data=tmp_train, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=60)\n\nplt.show()","ef293ef0":"fig, ax = plt.subplots(1, 2, figsize=(24, 8))\n\nsns.violinplot(x='workclass', y='hours_per_week', hue='sex', data=tmp_train, split=True, ax=ax[0])\nax[0].tick_params(axis='x', labelrotation=60)\n\nsns.violinplot(x='occupation', y='hours_per_week', hue='sex', data=tmp_train, split=True, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=60)\n\nplt.show()","06d4827f":"# test\uc5d0\ub3c4 '?'\uac00 \uc788\uc744\uae4c? -> \uac19\uc740 \ubcc0\uc218\uc5d0 \uc788\ub124\nfor col in test.columns:\n    if '?' in test[col].values:\n        print(col)","bab24ee4":"tmp_df = train[(train['occupation'] == '?') & (train['workclass'] == '?')]\n\ntmp_df['income'].value_counts()","0579431b":"tmp_train['sex'].value_counts()","6e4ab7d8":"sns.countplot(x='sex', hue='income', data=tmp_train);","4abb9bc7":"# Feature Engineering \uc774\ud6c4 \ubd84\ub9ac\ud560 \uc778\ub371\uc2a4\nidx = len(train)\n\n# train\uacfc test set \ud569\uccd0\uc11c \ud55c\ubc88\uc5d0 \uc9c4\ud589\ndf = pd.concat([train, test])","30e02366":"# age_band\ndf = make_age_band(df)","c117c123":"# test\ub3c4 train\uc5d0\uc11c \ucc98\ub7fc capital_gain\uacfc capital_loss \uac12\uc744 \ub3d9\uc2dc\uc5d0 \uac00\uc9c0\ub294 \ub370\uc774\ud130\uac00 \uc5c6\ub294\uc9c0 \ud655\uc778 -> \uc5c6\uc73c\ub2c8 \uadf8\ub300\ub85c \uc9c4\ud589\ntest[(test.capital_gain != 0) & (test.capital_loss != 0)]","b76e7365":"# log\uac12 \uad6c\ud558\uae30\n# df['capital_gain_log'] = df['capital_gain'].map(lambda x: np.log1p(x))\n# df['capital_loss_log'] = df['capital_loss'].map(lambda x: (-1) * np.log1p(x)) # loss\ub294 \uc74c\uc218\ub85c \ucc98\ub9ac\n\n# capital_loss_log\uc5d0\ub294 \uc74c\uc218 \uac12\uc73c\ub85c \uc801\uc6a9\ud574\uc900\ub2e4\ndf['capital_log'] = df['capital_gain_log'] + df['capital_loss_log']","262f4c83":"# native_country\ndf['native_country_bin'] = df['native_country'].map(lambda x: 1 if x == 'United-States' else 0)","8aa48eed":"# df['marital_status_with_relationship'] = df['marital_status'] + ' \/\/ ' + df['relationship']\n# df['marital_status_with_relationship'].value_counts()","23424a66":"null_col = [col for col in df.columns if '?' in df[col].values]\nprint(null_col)","2dce1eae":"for col in null_col:\n    print(f\"{col}: {len(df[df[col] == '?'][col])}\")","f17bb577":"df[(df['workclass'] != '?') & (df['occupation'] == '?')][['workclass', 'occupation']]","e60a0703":"# workclass\ub294 '?'\uac00 \uc544\ub2c8\uc9c0\ub9cc occupation\uc740 '?'\uc778 \uac12\uc5d0 \ub300\ud574\uc11c \uac19\uc740 \uac12\uc73c\ub85c \ubcc0\uacbd\ud574\uc900\ub2e4.\ndf[(df['workclass'] != '?') & (df['occupation'] == '?')]['occupation'] = 'Never-worked'","e12acd1f":"# # native_country\ub294 \ucd5c\ube48\uac12\uc73c\ub85c \n# df.loc[df['native_country'] == '?', 'native_country'] = 'United-States'\n\n# # workclass \/ occupation\uc740 \ubc15\uc2a4 \ud50c\ub86f\uc5d0\uc11c 'hours_per_week'\uc640 \ubd84\ud3ec\uac00 \ube44\uc2b7\ud55c \ubcc0\uc218\ub85c\n# df.loc[df['workclass'] == '?', 'workclass'] = 'Never-worked'\n# df.loc[df['occupation'] == '?', 'occupation'] = 'Priv-house-serv'","962e9051":"for col in null_col:\n    print(f\"{col}: {len(df[df[col] == '?'][col])}\")","faab9bcb":"df.columns","2585fadc":"drop_col = ['id', 'age', 'education_num', 'capital_gain', 'capital_loss', 'native_country']\n\ndf = df.drop(columns=drop_col)","b218e2f0":"label_col = [col for col in df.columns if df[col].dtypes == 'object' and col != 'income']\nlabel_col.append('age_band')","e5a7a653":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\nfor col in label_col:\n    df[col] = le.fit_transform(df[col])","cab8c2d8":"df.head()","687b492e":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\ndf['fnlwgt_scale'] = scaler.fit_transform(df['fnlwgt'].to_numpy().reshape(-1, 1))","3b43f377":"df = df.drop('fnlwgt', axis=1)","a91f0406":"train_fe = df.iloc[:idx, :]\ntest_fe = df.iloc[idx:, :].drop('income', axis=1)","f6dc5572":"train_fe = train_fe.drop('capital_log', axis=1)","164ac000":"test_fe = test_fe.drop('capital_log', axis=1)","794d27e5":"train_fe['income'] = train_fe['income'].map(lambda x: 1 if x == '>50K' else 0)","9f7c47e6":"from sklearn.model_selection import train_test_split\n\nX = train_fe.drop('income', axis=1)\ny = train_fe['income']\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=3)","45256d2a":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC # Support Vector Machine\nfrom sklearn.ensemble import RandomForestClassifier # Random Forest\nfrom lightgbm import LGBMClassifier # LightGBM\nfrom catboost import CatBoostClassifier # CatBoost\nfrom sklearn.linear_model import LogisticRegression # Logistic Regression\n\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix, accuracy_score, roc_auc_score # Classification \uad00\ub828 metrics (\ub300\ud68c metric\uc740 f1_score)\n\n\n# random_state\nseed = 3","94e33b08":"def get_clf_eval(y_test, pred=None, pred_proba=None):\n    confusion = confusion_matrix(y_test, pred)\n    accuracy = accuracy_score(y_test, pred)\n    precision = precision_score(y_test, pred)\n    recall = recall_score(y_test, pred)\n    f1 = f1_score(y_test, pred)\n    roc_auc = roc_auc_score(y_test, pred_proba)\n\n    print('\uc624\ucc28 \ud589\ub82c')\n    print(confusion)\n    print(f'\uc815\ud655\ub3c4: {accuracy:.4f}, \uc815\ubc00\ub3c4: {precision:.4f}, \uc7ac\ud604\uc728: {recall:.4f}, F1: {f1:.4f}, AUC: {roc_auc:.4f}')","d546cd8b":"rf = RandomForestClassifier(n_jobs=-1, random_state=seed)\n\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_valid)\ny_pred_proba = rf.predict_proba(X_valid)\n\nrf_score = f1_score(y_valid, y_pred)\nprint(\"RF \uae30\ubcf8 \uc131\ub2a5 \ud655\uc778 \uc2a4\ucf54\uc5b4: {:.4f}\".format(rf_score))","77a53f76":"get_clf_eval(y_valid, y_pred, y_pred_proba[:, 1])","9f4a1c41":"lgbm = LGBMClassifier(n_jobs=-1, random_state=seed)\n\nlgbm.fit(X_train, y_train)\ny_pred_lgbm = lgbm.predict(X_valid)\ny_pred_proba_lgbm = lgbm.predict_proba(X_valid)[:, 1]\n\nget_clf_eval(y_valid, y_pred_lgbm, y_pred_proba_lgbm)","1c47f765":"cb = CatBoostClassifier(random_seed=seed, verbose=0)\n\ncb.fit(X_train, y_train)\ny_pred_cb = cb.predict(X_valid)\ny_pred_proba_cb = cb.predict_proba(X_valid)[:, 1]","1247f326":"get_clf_eval(y_valid, y_pred_cb, y_pred_proba_cb)","d480c177":"lgbm = LGBMClassifier(random_state=seed)\n\nparams = {\n    'boosting_type': ['gbdt', 'dart'], # defalt 'gbdt'\n    'num_leaves': [20, 31, 50, 70], # default 31\n    'max_depth': [-1, 5, 7, 10, 15, 20, 30], # default -1. \ub05d\uae4c\uc9c0 \ub9cc\ub4dc\ub294 \uac83\n    'learning_rate': [0.001, 0.01, 0.05, 0.1], # defaut 0.1\n}\n\nlgbm_grid_cv = GridSearchCV(lgbm, param_grid=params, scoring='f1', n_jobs=-1, cv=5, verbose=1)\nlgbm_grid_cv.fit(X, y)","627c3574":"print('GridSearchCV \ucd5c\uace0 \ud3c9\uade0 \uc815\ud655\ub3c4 \uc218\uce58: {:.4f}'.format(lgbm_grid_cv.best_score_))\nprint('GridSearchCv \ucd5c\uc801 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130: ', lgbm_grid_cv.best_params_)","0ddf51e0":"# # drop 'race', 'native_country_bin' \ud655\uc778 -> 0.87308(gridcv\ubcf4\ub2e4 \ud558\ub77d)\n# lgbm = LGBMClassifier(random_state=seed)\n\n# lgbm.fit(X.drop(columns=['race', 'native_country_bin']), y)\n# y_pred = lgbm.predict(test_fe.drop(columns=['race', 'native_country_bin']))\n# submission_lgbm = submission.copy()\n# submission_lgbm['prediction'] = y_pred\n# submission_lgbm.to_csv('.\/lgbm_drop_race_nativeCountry.csv', index=False)","4e93fc7f":"best_lgbm = lgbm_grid_cv.best_estimator_\nlgbm_pred = best_lgbm.predict(test_fe)","e9d94983":"submission_lgbm = submission.copy()\nsubmission_lgbm['prediction'] = lgbm_pred","c5bde0ef":"submission_lgbm.to_csv('.\/lgbm_gridCV_ver4.csv', index=False)","2fad5076":"ftr_importances_values = best_lgbm.feature_importances_\n\n# Top \uc911\uc694\ub3c4\ub85c \uc815\ub82c\uc744 \uc27d\uac8c \ud558\uace0, Seaborn\uc758 \ub9c9\ub300\uadf8\ub798\ud504\ub85c \uc27d\uac8c \ud45c\ud604\ud558\uae30 \uc704\ud574 Series \ubcc0\ud658\nftr_importances = pd.Series(ftr_importances_values, index=X.columns)\n\n# \uc911\uc694\ub3c4 \uac12 \uc21c\uc73c\ub85c Series\ub97c \uc815\ub82c\nftr_top = ftr_importances.sort_values(ascending=False)\n\nplt.figure(figsize=(8, 6))\nsns.barplot(x=ftr_top, y=ftr_top.index, orient='h')\nplt.title('Feature importances')\nplt.show()","301e2bc8":"rf = RandomForestClassifier(random_state=seed)\n\nrf_params = {\n    'n_estimators': [100, 200, 300, 500, 1000],\n    'max_depth': [None, 50, 70, 100],\n    'min_samples_leaf': [1, 2, 3],\n    'min_samples_split': [2, 5, 7],\n}\n\nrf_grid_cv = GridSearchCV(rf, param_grid=rf_params, scoring='f1', n_jobs=-1, cv=5, verbose=1)\nrf_grid_cv.fit(X, y)","2fc02772":"print('GridSearchCV \ucd5c\uace0 \ud3c9\uade0 \uc815\ud655\ub3c4 \uc218\uce58: {:.4f}'.format(rf_grid_cv.best_score_))\nprint('GridSearchCv \ucd5c\uc801 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130: ', rf_grid_cv.best_params_)","7e04b77a":"best_rf = rf_grid_cv.best_estimator_\nrf_pred = best_rf.predict(test_fe)\n\nsubmission_rf = submission.copy()\nsubmission_rf['prediction'] = rf_pred\n\nsubmission_rf.to_csv('.\/rf_gridCV_ver4.csv', index=False)","299a9b9e":"ftr_importances_values = best_rf.feature_importances_\n\n# Top \uc911\uc694\ub3c4\ub85c \uc815\ub82c\uc744 \uc27d\uac8c \ud558\uace0, Seaborn\uc758 \ub9c9\ub300\uadf8\ub798\ud504\ub85c \uc27d\uac8c \ud45c\ud604\ud558\uae30 \uc704\ud574 Series \ubcc0\ud658\nftr_importances = pd.Series(ftr_importances_values, index=X.columns)\n\n# \uc911\uc694\ub3c4 \uac12 \uc21c\uc73c\ub85c Series\ub97c \uc815\ub82c\nftr_top = ftr_importances.sort_values(ascending=False)\n\nplt.figure(figsize=(8, 6))\nsns.barplot(x=ftr_top, y=ftr_top.index, orient='h')\nplt.title('Feature importances of Random Forest')\nplt.show()","42014d76":"cb = CatBoostClassifier(random_state=seed, verbose=0)\n\nlr_final = LogisticRegression(C=10)","9ba0f1ab":"cb.fit(X, y)\ncb_pred = cb.predict(test_fe)","806a11f2":"# \uac1c\ubcc4 \uc54c\uace0\ub9ac\uc998\uc73c\ub85c\ubd80\ud130 \uc608\uce21\ub41c \uc608\uce21\uac12\uc744 \uceec\ub7fc \ub808\ubca8\ub85c \uc606\uc73c\ub85c \ubd99\uc5ec\uc11c \ud53c\ucc98 \uac12\uc744 \ub9cc\ub4e4\uc5b4 \ucd5c\uc885 \uba54\ud0c0 \ubaa8\ub378\uc778 \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\uc5d0\uc11c \ud559\uc2b5 \ub370\uc774\ud130\ub85c \uc0ac\uc6a9\npred = np.array([rf_pred, lgbm_pred, cb_pred])\nprint(pred.shape)\n\n# transpose\ub97c \uc774\uc6a9\ud574 \ud589\uacfc \uc5f4\uc758 \uc704\uce58 \uad50\ud658. \uceec\ub7fc \ub808\ubca8\ub85c \uac01 \uc54c\uace0\ub9ac\uc998\uc758 \uc608\uce21 \uacb0\uacfc\ub97c \ud53c\ucc98\ub85c \ub9cc\ub4e6\npred = np.transpose(pred)\nprint(pred.shape)","8a2fa4b7":"6512 * 3","b1a3f7c1":"X.shape, y.shape, pred.shape, test_fe.shape","e9796774":"lr_final.fit(pred, y)","6e2fe565":"# # default\ub85c \uc801\uc6a9\ud574\ubcf4\uc790\n# knn = KNeighborsClassifier()\n# svc = SVC(random_state=seed)\n# rf = RandomForestClassifier(random_state=seed)\n# lgbm = LGBMClassifier(random_state=seed)\ncb = CatBoostClassifier(random_state=seed, verbose=0)\n\n# \uc2a4\ud0dc\ud0b9\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \ud559\uc2b5, \uc608\uce21\ud560 \ucd5c\uc885 \ubaa8\ub378\nlr_final = LogisticRegression(C=10)","93f1be86":"# # knn.fit(X_train, y_train)\n# # svc.fit(X_train, y_train)\n# # rf.fit(X_train, y_train)\n# # lgbm.fit(X_train, y_train)\n# cb.fit(X_train, y_train)","c46f1c3f":"knn_pred = knn.predict(X_valid)\nsvc_pred = svc.predict(X_valid)\nrf_pred = rf.predict(X_valid)\nlgbm_pred = lgbm.predict(X_valid)\ncb_pred = cb.predict(X_valid)\n\nprint('knn f1 \uc2a4\ucf54\uc5b4: {:.4f}'.format(f1_score(y_valid, knn_pred)))\nprint('svc f1 \uc2a4\ucf54\uc5b4: {:.4f}'.format(f1_score(y_valid, svc_pred)))\nprint('rf f1 \uc2a4\ucf54\uc5b4: {:.4f}'.format(f1_score(y_valid, rf_pred)))\nprint('lgbm f1 \uc2a4\ucf54\uc5b4: {:.4f}'.format(f1_score(y_valid, lgbm_pred)))\nprint('cb f1 \uc2a4\ucf54\uc5b4: {:.4f}'.format(f1_score(y_valid, cb_pred)))","af745c02":"rf.fit(X_train, y_train)\nlgbm.fit(X_train, y_train)\ncb.fit(X_train, y_train)","c4d920db":"cb_pred = cb.predict(X_valid)","8133bdd5":"# \uac1c\ubcc4 \uc54c\uace0\ub9ac\uc998\uc73c\ub85c\ubd80\ud130 \uc608\uce21\ub41c \uc608\uce21\uac12\uc744 \uceec\ub7fc \ub808\ubca8\ub85c \uc606\uc73c\ub85c \ubd99\uc5ec\uc11c \ud53c\ucc98 \uac12\uc744 \ub9cc\ub4e4\uc5b4 \ucd5c\uc885 \uba54\ud0c0 \ubaa8\ub378\uc778 \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\uc5d0\uc11c \ud559\uc2b5 \ub370\uc774\ud130\ub85c \uc0ac\uc6a9\npred = np.array([rf_pred, lgbm_pred, cb_pred])\nprint(pred.shape)\n\n# transpose\ub97c \uc774\uc6a9\ud574 \ud589\uacfc \uc5f4\uc758 \uc704\uce58 \uad50\ud658. \uceec\ub7fc \ub808\ubca8\ub85c \uac01 \uc54c\uace0\ub9ac\uc998\uc758 \uc608\uce21 \uacb0\uacfc\ub97c \ud53c\ucc98\ub85c \ub9cc\ub4e6\npred = np.transpose(pred)\nprint(pred.shape)","0ab295ef":"pred","c8ea28a9":"test_fe.shape","055b93aa":"train_fe.shape","89654ed1":"# \uc608\uce21 \ub370\uc774\ud130\ub85c \uc0dd\uc131\ub41c \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uae30\ubc18\uc73c\ub85c \ucd5c\uc885 \uba54\ud0c0 \ubaa8\ub378\uc778 \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0 \ud559\uc2b5\nlr_final.fit(pred, y_valid)\nfinal = lr_final.predict(test_fe)","6a6c56c9":"from sklearn.model_selection import KFold\n\n# \uac1c\ubcc4 \uae30\ubc18 \ubaa8\ub378\uc5d0\uc11c \ucd5c\uc885 \uba54\ud0c0 \ubaa8\ub378\uc774 \uc0ac\uc6a9\ud560 \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \ud568\uc218.\ndef get_stacking_base_datasets(model, X_train_n, y_train_n, X_test_n, n_folds):\n    # \uc9c0\uc815\ub41c n_fodls \uac12\uc73c\ub85c KFold \uc0dd\uc131\n    kf = KFold(n_splits=n_folds, shuffle=False, random_state=seed)\n\n    # \ucd94\ud6c4\uc5d0 \uba54\ud0c0 \ubaa8\ub378\uc774 \uc0ac\uc6a9\ud560 \ud559\uc2b5 \ub370\uc774\ud130 \ubc18\ud658\uc744 \uc704\ud55c \ub118\ud30c\uc774 \ubc30\uc5f4 \ucd08\uae30\ud654\n    train_fold_pred = np.zeros((X_train_n.shape[0], 1))\n    test_pred = np.zeros((X_test_n.shape[0], n_folds))\n    print(model.__class__.__name__, ' model \uc2dc\uc791 ')\n    print('')\n\n    for folder_counter, (train_index, valid_index) in enumerate(kf.split(X_train_n)):\n        # \uc785\ub825\ub41c \ud559\uc2b5 \ub370\uc774\ud130\uc5d0\uc11c \uae30\ubc18 \ubaa8\ub378\uc774 \ud559\uc2b5\/\uc608\uce21\ud560 \ud3f4\ub4dc \ub370\uc774\ud130 \uc138\ud2b8 \ucd94\ucd9c\n        print(\"\\t \ud3f4\ub4dc \uc138\ud2b8: \", folder_counter, ' \uc2dc\uc791 ')\n        X_tr = X_train_n.iloc[train_index]\n        y_tr = y_train_n.iloc[train_index]\n        X_te = X_train_n.iloc[valid_index]\n\n        # \ud3f4\ub4dc \uc138\ud2b8 \ub0b4\ubd80\uc5d0\uc11c \ub2e4\uc2dc \ub9cc\ub4e4\uc5b4\uc9c4 \ud559\uc2b5 \ub370\uc774\ud130\ub85c \uae30\ubc18 \ubaa8\ub378\uc758 \ud559\uc2b5 \uc218\ud589\n        model.fit(X_tr, y_tr)\n\n        # \ud3f4\ub4dc \uc138\ud2b8 \ub0b4\ubd80\uc5d0\uc11c \ub2e4\uc2dc \ub9cc\ub4e4\uc5b4\uc9c4 \uac80\uc99d \ub370\uc774\ud130\ub85c \uae30\ubc18 \ubaa8\ub378 \uc608\uce21 \ud6c4 \ub370\uc774\ud130 \uc800\uc7a5\n        train_fold_pred[valid_index, :] = model.predict(X_te).reshape(-1, 1)\n\n        # \uc785\ub825\ub41c \uc6d0\ubcf8 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \ud3f4\ub4dc \uc138\ud2b8\ub0b4 \ud559\uc2b5\ub41c \uae30\ubc18 \ubaa8\ub378\uc5d0\uc11c \uc608\uce21 \ud6c4 \ub370\uc774\ud130 \uc800\uc7a5\n        test_pred[:, folder_counter] = model.predict(X_test_n)\n\n    # \ud3f4\ub4dc \uc138\ud2b8 \ub0b4\uc5d0\uc11c \uc6d0\ubcf8 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc608\uce21\ud55c \ub370\uc774\ud130\ub97c \ud3c9\uade0\ud558\uc5ec \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \uc800\uc7a5\n    test_pred_mean = np.mean(test_pred, axis=1).reshape(-1, 1)\n\n    # train_fold_pred\ub294 \ucd5c\uc885 \uba54\ud0c0 \ubaa8\ub378\uc774 \uc0ac\uc6a9\ud558\ub294 \ud559\uc2b5 \ub370\uc774\ud130, test_pred_mean\uc740 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\n    return train_fold_pred, test_pred_mean","7695e996":"rf_train, rf_valid = get_stacking_base_datasets(best_rf, X, y, test_fe, 5)\nlgbm_train, lgbm_valid = get_stacking_base_datasets(best_lgbm, X, y, test_fe, 5)\ncb_train, cb_valid = get_stacking_base_datasets(cb, X, y, test_fe, 5)","3b1c042d":"# step 2 \uad6c\ud604\n\nstack_final_X_train = np.concatenate((rf_train, lgbm_train, cb_train), axis=1)\nstack_final_X_test = np.concatenate((rf_valid, lgbm_valid, cb_valid), axis=1)\n\nprint('\uc6d0\ubcf8 \ud559\uc2b5 \ud53c\ucc98 \ub370\uc774\ud130 Shape: ', X_train.shape, '\uc6d0\ubcf8 \ud14c\uc2a4\ud2b8 \ud53c\ucc98 Shape: ', test_fe.shape)\nprint('\uc2a4\ud0dc\ud0b9 \ud559\uc2b5 \ud53c\ucc98 \ub370\uc774\ud130 Shape: ', stack_final_X_train.shape, '\uc2a4\ud0dc\ud0b9 \ud14c\uc2a4\ud2b8 \ud53c\ucc98 \ub370\uc774\ud130 Shape: ', stack_final_X_test.shape)","2b025fd7":"lr_final.fit(stack_final_X_train, y)\nstack_final = lr_final.predict(stack_final_X_test)","5b1b2627":"stack_final.shape","4ad99319":"submission_stacking = submission.copy()\nsubmission_stacking['prediction'] = stack_final\n\nsubmission_rf.to_csv('.\/Stack_ver4.csv', index=False)","71e5208f":"knn, svc\ub294 \ubabb \uc4f8 \uc815\ub3c4\ub2c8\uae50 tree \uacc4\uc5f4\ub9cc \uc0ac\uc6a9\ud558\uc790","088a2283":"\uc774\uac78\ub85c '?'\ub97c \uc720\ucd94\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc9c0\ub294 \uc54a\uc544 \ubcf4\uc774\ub294\ub370...","e788f774":"### native_country","6f591144":"`capital_log` \uc0dd\uc131\ud55c \uac70\ub791 \uc544\ubb34\ub7f0 \uc190\ub3c4 \uc548\ub304 `fnlwgt`\uc774 \uac00\uc7a5 feature importance\uac00 \ub192\uac8c \ub098\uc654\ub2e4!","310c5dee":"### age\n\n* \ub0ae\uc740 \uc5f0\ub839\ub300\uba74 Target\uc774 0, \ub192\uc740 \uc5f0\ub839\ub300\uba74 Target\uc774 1\uc778 \uacbd\ud5a5\uc744 \ubcf4\uc778\ub2e4.\n* `Titanic\uc5d0\uc11c \ud558\ub4ef\uc774 `age_band` \ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5b4 \uc5f0\ub839\ub300 \ubc94\uc704\ub97c \ub098\ub220\uc8fc\uc790`","fd4a273d":"### age_band","34056f19":"11.27 '?'\ub294 \ucc98\ub9ac\ud558\uc9c0 \ub9d0\uace0 \ub450\uc790","41a5906d":"## train income \ubcc0\ud658","f3827071":"### sex\n\n* `\uadf8\ub0e5 \uc0ac\uc6a9\ud558\uba74 \ub420\ub4ef`","3581d831":"\ud560 \uc77c: \ub370\uc774\ud130 \ud45c\uc900\ud654, '?' \ucc98\ub9ac, Stacking \uc801\uc6a9","0b7db8e6":"### education & education_num\n\n* (\uc740\uc131) education\uacfc education_num \uc740 \uac19\uc740 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. -> \ud558\ub098\ub9cc \uac00\uc9c0\uace0 \ucc98\ub9ac\ud558\uc790\n* `education_num`\uc744 \ub0a0\ub9ac\uace0 `education`\uc740 \uc0b4\ub824\ub454\ub2e4. (\ub098\uc911\uc5d0 LabelEncoding \ud558\ub354\ub77c\ub3c4 EDA\uc2dc \ub2e4\ub978 \ubcc0\uc218\uc640 \uc758\ubbf8\ub97c \ube44\uad50\ud574\ubcf4\uae30 \uc704\ud574\uc11c)\n* `Feature Engineering\uc744 \ud574\uc8fc\ub294 \uac83\uc774 \uc5b4\ub5a4 \uc758\ubbf8\uac00 \uc788\uc744\uc9c0\ub294 \ubaa8\ub974\uac9f\uc74c -> \uadf8\ub300\ub85c \uc9c4\ud589\ud558\uc790`","699c8ab7":"## Drop columns","e862e065":"### Random Forest \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd","7c9e7167":"### capital_log","89e9f708":"### LightGBM","3da86a3a":"# Import Libraries","c1d49c3c":"## Stacking \uc5f0\uc2b5\n\n* \ucc45 \ub0b4\uc6a9 \uc798 \uc774\ud574\ub97c \ubabb\ud558\uace0 \ud558\ub2e4\ubcf4\ub2c8\uae50 \uae30\ubcf8 \ubaa8\ub378\ub4e4 \uc608\uce21\uac12\uc73c\ub85c \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \ub9cc\ub4e4\uc5b4\uc11c \uc801\uc6a9\ud55c\ub2e4\ub294 \uac1c\ub150\uc774 \uc774\ud574\uac00 \uc548\ub410\uc74c... \uc5b4\ub5bb\uac8c \uc801\uc6a9\uc744 \ud574\uc57c\ud560\uc9c0?\n* https:\/\/lsjsj92.tistory.com\/558 \uc2a4\ud0dc\ud0b9 \uac1c\ub150 \ube14\ub85c\uadf8","a3e91ddd":"### Random Forest","72ce3bf7":"### marital_status + relationship\n\n* (\uc601\ud6a8) \ubcc0\uc218\ub97c \uc5c6\uc564\ub2e4\uace0 \ubcfc \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \uc88b\uc744 \uac83 \uac19\ub2e4.","5fbc7573":"\uac12\uc758 \ucc28\uc774\uac00 \uad49\uc7a5\ud574 \ubcf4\uc778\ub2e4. 0\uc744 \uac00\uc9c0\ub294 \uac12\uacfc \uc544\ub2cc \uac12\uc73c\ub85c \ud655\uc778\ud574\ubcf4\uc790","40a8622f":"### race & native_country\n\n* `race`\ub294 \ud06c\uac8c \uc2e0\uacbd \uc548\uc368\ub3c4 \ub420 \uac83 \uac19\uc9c0\ub9cc, `native_country`\ub294 \ubcc0\uc218\uac00 \ub108\ubb34 \ub9ce\uace0 \ud55c\ucabd\uc73c\ub85c \uce58\uc911\ub418\uc5b4 \uc788\ub2e4. \uc774 \uad6d\uac00\ub97c 0\uacfc 1\ub85c \ub098\ub220\uc11c \uc0ac\uc6a9\ud574\ubcf4\uc790","75692c34":"lgbm\uc774 \uc131\ub2a5\uc774 \uc798 \ub098\uc624\ub2c8\uae50 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\ub9cc \uc57d\uac04 \ud574\uc11c \uc81c\ucd9c\ud574\ubcf4\uc790","42bd048a":"### hours_per_week -> '?' \uad00\ub828","85a9a7bd":"# Modeling","7ef35661":"## Target Check\n\n* 25%\uc758 \ube44\uc728\uc744 \ucc28\uc9c0\ud558\uace0 \uc788\ub294\ub370 \uc774\uc815\ub3c4\ub294 `\uadf8\ub300\ub85c \uc0ac\uc6a9`\ud574\ub3c4 \uad1c\ucc2e\ub2e4.","e46af8fb":"### Scaling","7f7a01d2":"## train test \ud569\uce58\uae30\n\n* \ud6a8\uc728\uc801\uc778 Feature Engineering\uc744 \uc704\ud568","d7d0f7eb":"## train valid split","061cb7f4":"### martial_status & relationship\n\n* \uc800\ubc88\uc5d0 \ubb50\ub77c\uace0 \uc598\uae30 \ud588\ub358\uac70 \uac19\uc740\ub370 \uc798 \uae30\uc5b5\uc774 \uc548\ub0a8... \ub098\ub294 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud558\uaca0\uc74c","55cae408":"* `income`\n* `age_band` \ubcc0\uc218\n* `education_num` \uc0ad\uc81c\n* `capital_log` \ubcc0\uc218\n* `native_country_bin` \ubcc0\uc218\n* LabelEncoding - `workclass`, `education`, `marital_status`, `occupation`, `relationship`, `race`\n\n---11.26 \ucd94\uac00---\n* marital_status + relationship -> \ud569\uce58\ub294 \uac83\uc740 \uacb0\uad6d \ubcc0\uc218\ub97c \uc5c6\uc560\uace0 \uc784\uc758\ub85c \ub9cc\ub4dc\ub294 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \uc6d0\ub798\ub300\ub85c \ub450\uace0 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc744 \uac83 \uac19\ub2e4.\n* Scaling - `fnlwgt`\n* '?' \ubcc0\uc218 \ucc98\ub9ac","d40a1bcd":"## \ubcc0\uc218 \uac12 \uc801\uc6a9","ae774ae0":"\ub85c\uadf8 \ucde8\ud574\uc11c \uc0dd\uc131\ud574\ub3c4 \uc774\ub807\uac8c \ub098\uc624\ub124.. \uc758\ubbf8\uac00 \uc5bc\ub9c8\ub098 \uc788\uc744\uc9c0\ub294 \ubaa8\ub974\uaca0\ub2e4","2fb3b250":"### workclass & occupation\n\n* '?' \uac12\uc744 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud560 \uac83\uc778\uc9c0\uac00 \uac00\uc7a5 \ud070 \ubb38\uc81c\uc77c\ub4ef\ud558\ub2e4. (Idea\uac00 \uc548\ub5a0\uc624\ub984...)","842a7055":"(\ubcd1\ud604) capital \uac12\uc774 \uc788\ub294 \uc0ac\ub78c\uc758 \uacbd\uc6b0 capital_gain \ub610\ub294 capital_loss\uc5d0\ub9cc \uac12\uc774 \uc788\uc5c8\ub2e4. -> \ud655\uc778\ud574\ubcf4\uc790  \n\uc5c6\uc73c\ub2c8\uae50 `capital_log` \ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5b4 \uac01 \ubcc0\uc218\uc758 \ub85c\uadf8 \uac12\uc5d0 gain\/loss\uc5d0 \ub530\ub77c \ubd80\ud638\ub97c \ucde8\ud574\uc8fc\uc790","1b648e6a":"# EDA","bbbda773":"`workclass`\uc5d0\uc11c \uac12\uc774 'Never-worked'\uc778 \uac83\uc740 \ubaa8\ub450 6\uac1c\uac00 \uc788\ub294\ub370 `occupation`\uc758 '?'\uc640 \ub9e4\uce6d\ub41c\ub2e4. -> \uac19\uc740 \uac12\uc73c\ub85c \ucc98\ub9ac\ud558\uc790","fb1a0c5c":"## Random Forest & LightGBM\n\n* \uac00\uc7a5 \uae30\ubcf8\uc801\uc778 setting\uc73c\ub85c \ud559\uc2b5 \ud6c4 score\ub97c \uce21\uc815\n* \ud6c4\uc5d0 Stacking\uc744 \uc0ac\uc6a9\ud574\ubcfc \uc608\uc815","950e7f9d":"### fnlwgt\n\n* \ubb34\uc2a8 \ubcc0\uc218\uc77c\uae4c? (https:\/\/www.kaggle.com\/c\/kakr-4th-competition\/discussion\/191173)\n* \uc804\uccb4 \ubcc0\uc218\uc5d0 \ub530\ub978 \uac00\uc911\uce58\ub77c\uace0 \ud55c\ub2e4. (e.g., \ub300\uc878\uc774\uace0, \uacb0\ud63c\ud588\uace0,,... \uc774\ub7ec\uba74 fnlwgt\uac00 \ub192\uc74c)\n* `Target\uc5d0 \ub530\ub77c \ud070 \ucc28\uc774\uac00 \uc5c6\uc74c -> \uadf8\ub0e5 \uc0ac\uc6a9\ud558\uc790`","5fb2d9a8":"### capital_gain & capital_loss (\uc591\ub3c4 \uc18c\ub4dd, \uc591\ub3c4 \uc190\uc2e4)\n\n\ubd84\ud3ec\uac00 \ud2b9\uc774\ud574\ubcf4\uc778\ub2e4.\n\n* **capital_gain**(\uc591\ub3c4 \uc18c\ub4dd)\uc774\ub780\n    * \uac1c\uc778\uc774 \ud1a0\uc9c0, \uac74\ubb3c \ub4f1 \ubd80\ub3d9\uc0b0\uc774\ub098 \uc8fc\uc2dd \ub4f1\uacfc \ud30c\uc0dd\uc0c1\ud488\uc758 \uc591\ub3c4 \ub610\ub294 \ubd84\uc591\uad8c\uacfc \uac19\uc740 \ubd80\ub3d9\uc0b0\uc5d0 \uad00\ud55c \uad8c\ub9ac\ub97c \uc591\ub3c4\ud568\uc73c\ub85c \uc778\ud558\uc5ec \ubc1c\uc0dd\ud558\ub294 \uc774\uc775(\uc18c\ub4dd)\uc744 \uacfc\uc138\ub300\uc0c1\uc73c\ub85c \ud558\uc5ec \ubd80\uacfc\ud558\ub294 \uc138\uae08\n    \n    \n* **capital_loss**(\uc591\ub3c4 \uc190\uc2e4)\n    * \ud22c\uc790 \ub610\ub294 \ubd80\ub3d9\uc0b0\uacfc \uac19\uc740 \uc790\ubcf8 \uc790\uc0b0\uc758 \uac00\uce58\uac00 \uac10\uc18c\ud560 \ub54c \ubc1c\uc0dd\ud558\ub294 \uc190\uc2e4\n    \n\n* \uc591\ub3c4 \uc18c\ub4dd, \uc190\uc2e4\uc774 \uc788\uace0, \uc5c6\uace0\ub85c \uad6c\ubd84\ud574\uc11c \ud655\uc778\ud574\ub3c4 \uad1c\ucc2e\uc744\ub4ef?\n\n\n* `**capital gain\/loss\uac00 \uc788\uc744 \ub54c Target\uc774 1\uc778 \ube44\uc911\uc774 \ub192\uc558\uc73c\ubbc0\ub85c \uadf8\ub300\ub85c \uc0ac\uc6a9\ud574\ub3c4 \ub420 \uac83 \uac19\ub2e4. \ub2e4\ub9cc, \uac12\uc774 \ub108\ubb34 \ud06c\ubbc0\ub85c \ub85c\uadf8 \ubcc0\ud658\ub9cc \uc801\uc6a9\ud574\uc8fc\uc790**`","02265ea1":"workclass\uc640 occupation\uacfc \uc5f0\uad00\uc774 \uc788\uc744\uae4c?","b901143c":"# Feature Engineering","e5997be4":"## train \/ test \ubd84\ub9ac","afd6b917":"### LGBM \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd - GridSearchCV (0.87353)\n\nhttps:\/\/lightgbm.readthedocs.io\/en\/latest\/Parameters-Tuning.html (\uacf5\uc2dd \ubb38\uc11c \ucc38\uc870)\n\n* `num_leaves`: \uac00\uc7a5 \uba54\uc778 \ud30c\ub77c\ubbf8\ud130 (\uc77c\ubc18\uc801\uc73c\ub85c `num_leaves = 2^(max_depth)`\ub85c \uae4a\uc774\ubcc4 \ud2b8\ub9ac\uc640 \ub3d9\uc77c\ud55c \uc218\uc758 \uc78e\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4. **\uc2e4\uc81c\ub85c\ub294 `num_leaves < 2^(max_depth)` \uc774\ub807\uac8c \ub450\uc5b4\uc57c\ud568**. leaf-wise tree \uc774\uae30 \ub54c\ubb38)\n* `min_data_in_leaf`: overfitting \ubc29\uc9c0 \ub9e4\uac1c\ubcc0\uc218. \ucd5c\uc801\uac12\uc740 \ud6c8\ub828 \uc0d8\ud50c \uc218\uc640 `num_leaves`\uc5d0 \ub530\ub77c \ub2e4\ub978\ub370, \ub300\uaddc\ubaa8 \ub370\uc774\ud130\uc5d0\uc11c \uc218\ubc31 ~ \uc218\ucc9c\uc73c\ub85c \ub450\uba74 \ucda9\ubd84\ud558\ub2e4.\n* `max_depth`: \ud2b8\ub9ac \uae4a\uc774 \uc870\uc808\n\n\n<\uc815\ud655\ub3c4\ub97c \uc704\ud55c \ubcc0\uc218>\n\n* `max_bin`: \ud06c\uac8c \uc801\uc6a9(\uc18d\ub3c4\ub294 \ub290\ub824\uc9c4\ub2e4.)\n* \uc791\uc740 `learning_rate`, \ud070 `num_iterations`\n* \ud070 `num_leaves` (overfitting\uc774 \uc77c\uc5b4\ub0a0 \uc218 \uc788\ub2e4.)\n* \ub370\uc774\ud130 \uc138\ud2b8 \ub298\ub9ac\uae30\n* `boosting_type` \uc744 `dart`(Dropouts meet Multiple Additive Regression Trees)\ub85c \uc801\uc6a9 (defalt: 'gbdt'(gradient boosting decision tree))","9e8fdf9e":"\ud45c\uba74\uc0c1\uc73c\ub85c \ub4dc\ub7ec\ub098\ub294 Null \uac12\uc740 \uc5c6\ub2e4.  \n`workclass`, `occupation`, `native_country`\ubcc0\uc218\uac00 '?' \uac12\uc744 \uac00\uc9c0\uace0 Null \uac12\uc73c\ub85c \uc758\uc2ec\ub41c\ub2e4.","1d669ce9":"### CatBoost","53beadf5":"### CV \uae30\ubc18 \uc2a4\ud0dc\ud0b9","873164bf":"### '?' \ucc98\ub9ac -> \ucd5c\ube48\uac12","a7d00226":"# Load Data & Check","d9794667":"## Label Encoding","4faf15ab":"??? default \uac12\uc774 \uac00\uc7a5 \ub192\ub124?\u314b\u314b\u314b\u314b\u314b\u314b\u314b -> X\n`max_depth` == 7 \uc77c \ub54c\n\n---11.26---  \n\ub370\uc774\ud130 \ubcc0\uacbd \ubc0f \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ub298\ub9bc -> \ud559\uc2b5 \uc2dc\uac04\ub9cc \ub298\uc5b4\ub098\uace0 \uc131\ub2a5\uc740 \uc800\ud558\ub428(overfitting \ub418\uc11c \uadf8\ub7ac\uaca0\uc9c0)"}}