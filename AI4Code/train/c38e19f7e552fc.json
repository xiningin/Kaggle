{"cell_type":{"b98865a2":"code","dd49e74d":"code","2196d6cb":"code","661a236b":"code","0e3306bb":"code","4c1ca627":"code","6ffc6343":"code","29210a48":"code","0bba4265":"code","364438eb":"code","54013b47":"code","b15814f5":"code","fd63d73d":"code","709c95c4":"code","da42dee6":"code","32038e09":"code","25a05405":"code","40e27317":"code","6d24cd17":"code","392fdb0e":"code","782d09ac":"code","27da5881":"code","e2907a95":"code","543524f8":"code","9c6b4c68":"code","022b7178":"code","b61db342":"code","ae8723c4":"code","4e5998bb":"code","afd9cece":"code","561c31cc":"code","c4a06705":"code","40351f9c":"code","8f204dfa":"code","f4c17924":"code","c4ee5cbe":"code","1b18ac89":"code","b261bfae":"code","98de5b39":"code","db82cb6c":"code","02297641":"code","3670be4a":"code","0a2595ad":"code","edadb61e":"code","f0b7946b":"code","6a418de7":"code","d9070270":"code","fb0a454b":"code","d75b89af":"code","4ff23675":"code","b60dd269":"code","2597e82b":"code","0e006923":"code","bdf2769f":"code","ca7ded3e":"code","694048b6":"code","ea9fd596":"code","13b2c94e":"code","0629184f":"code","24f626e5":"code","b3090b91":"code","fc2c4fed":"code","3b9ddafd":"code","5b189a9f":"code","5cee750a":"code","49183951":"code","f3dd4532":"code","56717f84":"code","ad4b45de":"code","41d5dd98":"code","0119d1ed":"code","56a3717c":"code","94361bfe":"code","2cc13a42":"code","0254c1a2":"code","8674c345":"code","e1998889":"code","cfbb459b":"markdown","2b9291d1":"markdown","885fd2c5":"markdown","fa3e4882":"markdown","5777f178":"markdown","deff43e9":"markdown"},"source":{"b98865a2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot  as plt\n","dd49e74d":"df = pd.read_csv('..\/input\/best-shopping\/sale.csv')","2196d6cb":"df.head()","661a236b":"df.info()","0e3306bb":"df.dropna(inplace=True)","4c1ca627":"def delet(x):\n    if 'Quantity Ordered' in x :\n         return np.nan\n    else:\n        return x","6ffc6343":"df['Quantity Ordered'] = df['Quantity Ordered'].apply(delet)","29210a48":"df['Quantity Ordered'].isnull().value_counts()","0bba4265":"df.dropna(inplace=True)","364438eb":"df['total'] = df['Quantity Ordered'].astype('int') * df['Price Each'].astype('float')","54013b47":"df.drop(['Quantity Ordered', 'Price Each'], inplace=True, axis=1)","b15814f5":"def sep_addres(address):\n    city = address.split(',')[1]\n    pre_city = address.split(',')[2][:4]\n    return city + pre_city\n    ","fd63d73d":"df['Purchase Address'] = df['Purchase Address'].apply(sep_addres)","709c95c4":"df['Order Date'] = pd.to_datetime(df['Order Date'])","da42dee6":"def sep_month(time):\n    return time.strftime('%m')","32038e09":"df['month'] = df['Order Date'].apply(sep_month)","25a05405":"def sep_year(time):\n    return time.strftime('%Y')","40e27317":"df['year'] = df['Order Date'].apply(sep_year)","6d24cd17":"def sep_time(time):\n    return time.strftime('%H')","392fdb0e":"df['hour'] = df['Order Date'].apply(sep_time)","782d09ac":"df.drop('Order Date', axis=1, inplace=True)","27da5881":"df","e2907a95":"import seaborn as sns","543524f8":"df['total'].value_counts()","9c6b4c68":"df['hour'].value_counts()","022b7178":"g_h_t = df.pivot_table(index = 'hour', values='total', aggfunc='count')","b61db342":"g_h_t","ae8723c4":"g_h_t.plot(kind='bar', ylabel='count')","4e5998bb":"g_m_t = df.pivot_table(index = 'month', values='total', aggfunc='count')","afd9cece":"g_m_t.sort_values(by='total', ascending=False)","561c31cc":"df['month'].value_counts()","c4a06705":"df['Purchase Address'].unique()","40351f9c":"df['Product'].unique()","8f204dfa":"h_t_p = df.pivot_table(index = 'hour', values='total',columns='Product' ,aggfunc='count')","f4c17924":"h_t_p","c4ee5cbe":"df","1b18ac89":"df['Order ID'].is_unique","b261bfae":"df['order_product'] = df.groupby(['Order ID'])['Product'].transform(lambda x: ','.join(x))","98de5b39":"df1 = df[['Order ID', 'order_product']].drop_duplicates()","db82cb6c":"from itertools import combinations\nfrom collections import Counter\ncount = Counter()\nfor row in df1['order_product']:\n    #print(row)\n    row_list = row.split(',')\n    #print(row_list)\n    count.update(Counter(combinations(row_list, 3)))\nfor key, value in count.most_common(10):\n    print(key, value)","02297641":"df['Product'].values == 'iphone'","3670be4a":"def most_iphone(x):\n        if 'iPhone' in x :\n            return x\n        else:\n            return np.nan","0a2595ad":"df['iphone'] = df['Product'].apply(most_iphone)","edadb61e":"df['iphone'].isnull().value_counts()","f0b7946b":"df_iphone = df.drop(columns=['order_product', 'Product'])","6a418de7":"df_iphone = df_iphone.dropna()","d9070270":"df_iphone","fb0a454b":"df_iphone['Purchase Address'].value_counts()","d75b89af":"most_iphone_sale = df_iphone.pivot_table(index='Purchase Address', columns='hour',values='total',aggfunc='count')","4ff23675":"most_iphone_sale","b60dd269":"most_iphone_sale.max(axis='columns')","2597e82b":"most_iphone_sale.max(axis= 'columns').plot(kind='bar', figsize=(20,10))","0e006923":"df.drop(columns=['iphone', 'order_product'], inplace=True)","bdf2769f":"df['Order ID'].unique()\n#df['Order ID'].shape","ca7ded3e":"df_multi_product = df\ndf_multi_product['order_id'] = df['Order ID'].duplicated()","694048b6":"df_multi_product['order_id'] = df_multi_product['order_id'].astype('object')","ea9fd596":"def return_duplicate(x):\n    if x:\n        return 1\n    else:\n        return np.nan","13b2c94e":"df_multi_product['order_id'] = df_multi_product['order_id'].apply(return_duplicate)","0629184f":"df_multi_product = df_multi_product.dropna()","24f626e5":"df_multi_product.drop('order_id',axis='columns' ,inplace=True)","b3090b91":"most_product_sale = df_multi_product.pivot_table(index='Product', columns='Purchase Address', values='total', aggfunc='count')","fc2c4fed":"most_product_sale.max(axis='columns').plot(kind='bar')","3b9ddafd":"df['hour'].value_counts()","5b189a9f":"total_19 = df[ df['hour'] == '19' ] ['total']\ntotal_18 = df[ df['hour'] == '13' ] ['total']","5cee750a":"total_19.mean() - total_18.mean()","49183951":"np.append(np.zeros(len(total_19)), np.ones(len(total_18)))","f3dd4532":"sales = np.array([\n    np.append(np.zeros(len(total_19)), np.ones(len(total_18))),\n    np.append(total_18, total_19)\n])","56717f84":"sale_t = sales.T\nnp.random.shuffle(sale_t)","ad4b45de":"ex = np.random.randint(0, 2, len(sale_t))","41d5dd98":"ex_data = np.array([\n    ex, \n    sale_t[:, 1]\n])","0119d1ed":"ex_data = ex_data.T","56a3717c":"print(ex_data[ex_data[:, 0] == 0 ][: ,1].mean())\nprint(ex_data[ex_data[:, 0] == 1 ][: ,1].mean())\n","94361bfe":"def sh_exp(n):\n    ex_dif_mean = np.empty([n, 1])\n    for time in np.arange(n):\n        ex = np.random.randint(0, 2, len(sale_t))\n        ex_data = np.array([\n        ex, \n        sale_t[:, 1]]).T\n        ex_dif_mean[time] = ex_data[ex_data[:, 0] == 1 ][: ,1].mean() - ex_data[ex_data[:, 0] == 0 ][: ,1].mean()\n    return ex_dif_mean\n\n\n        ","2cc13a42":"e = sh_exp(1000)","0254c1a2":"len(e[e >= 9.271544781382346])","8674c345":"17 \/ 1000 ","e1998889":"import seaborn as sns\nsns.distplot(e, bins=100)","cfbb459b":"b ehtemal %1 mobtani bar shanse bode\nva 99% bar asas manadari bode\n\n\np_value = 0.1 \nso reject h0 \n","2b9291d1":"* with combination , combine 3 time then count the number of repetated time\n\n* Counter count most repetative\n","885fd2c5":"# You Can See Below The USB_C ,LIGHTING_CHARGING And Wired_Headphone Are Most Common Product Pepople Buy Together With Other Product","fa3e4882":"## Visualize:","5777f178":"# How Many order_id It's Not Have 1 Purchase:\n# And Which Product Are More Use Fore Second Purchase ","deff43e9":"repeat 1000 time and see how many time we reach the 9.27 mean"}}