{"cell_type":{"86ac02dd":"code","b539d0e7":"code","56be8b52":"code","572bd21e":"code","69651362":"code","dd2cc947":"code","42872584":"code","2aa75f2b":"code","0536a56b":"code","01377344":"code","5a55a7ad":"code","0396630f":"code","d005e41f":"code","0a92cc09":"code","0541243b":"code","020cd6d6":"code","2772f87b":"code","76e35bb9":"code","e5465e0b":"code","287ef65a":"code","06d97d49":"code","a8c53163":"code","9a783864":"code","7dc32413":"code","52c437d4":"code","3766f8a7":"code","6f89ae33":"code","0eff1bbf":"code","6351c180":"code","67dc21eb":"markdown","45131055":"markdown","6e561639":"markdown","def4566b":"markdown","904ac75e":"markdown","e01bff5d":"markdown","cef7050a":"markdown","2b4a4b2c":"markdown","d64cbfb9":"markdown","28f4a568":"markdown","01fc71cb":"markdown","f83f0bed":"markdown","22fc44a0":"markdown","834d5c5e":"markdown","01b5d883":"markdown","946f54c7":"markdown"},"source":{"86ac02dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nimport matplotlib\n\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b539d0e7":"matches_csv = '\/kaggle\/input\/ipl\/matches.csv'\ndeliveries_csv = '\/kaggle\/input\/ipl\/deliveries.csv'\n\nmatches_df = pd.read_csv(matches_csv)\ndeliveries_df = pd.read_csv(deliveries_csv) ","56be8b52":"matches_df.info()","572bd21e":"column = 'umpire3'\nmatches_df = matches_df.drop(columns= column)","69651362":"column = 'winner'\nmatches_df[matches_df[column].isnull()]","dd2cc947":"column = 'winner'\nmatches_df[column] = matches_df[column].fillna('Undeclared')\ncolumn = 'player_of_match'\nmatches_df[column] = matches_df[column].fillna('Undeclared')","42872584":"column = 'umpire1'\nmatches_df[matches_df[column].isnull()]","2aa75f2b":"column = 'umpire1'\nmatches_df[column] = matches_df[column].fillna('Unknown')\n\ncolumn = 'umpire2'\nmatches_df[column] = matches_df[column].fillna('Unknown')","0536a56b":"column = 'city'\nmatches_df[matches_df[column].isnull()]","01377344":"column = 'city'\nmatches_df[column] = matches_df[column].fillna('Dubai')","5a55a7ad":"matches_df.info()","0396630f":"deliveries_df.info()","d005e41f":"deliveries_df.head()","0a92cc09":"columns = ['player_dismissed', 'dismissal_kind', 'fielder']\n\nfor column in columns:\n    deliveries_df[column] = deliveries_df[column].fillna(0)","0541243b":"deliveries_df.info()","020cd6d6":"#source : https:\/\/www.schemecolor.com\/ipl-cricket-team-color-codes.php\nteam_colors = {\n    'MI'  : '#004BA0',\n#     'CSK' : '#FFFF3C',\n    'CSK' : '#E1AD01',\n    'SRH' : '#FF822A',\n    'KKR' : '#2E0854',\n#     'RCB' : '#EC1C24',\n    'RCB' : '#8B0000',\n    'RR'  : '#254AA5',\n    'KXIP': '#ED1B24',\n    'GL'  : '#8C411E',\n    'DC'  : '#366293',\n    'RPS' : '#2C04A2',\n    'PW'  : 'black',\n    'KTK' : 'gray',\n    'DD'  : '#00008B',\n    'Undeclared': 'white'\n}\n\ndef drawCountOnBar(axes, orient = \"v\"):\n    for p in axes.patches:\n        if orient == \"v\":\n            height = p.get_height()\n            axes.text(x = p.get_x()+p.get_width()\/2., y = height + 1 ,s = height ,ha=\"center\")\n        else:\n            width = p.get_width()\n            axes.text(x = p.get_x() + width, y = p.get_y() + p.get_height()\/2 ,s = width ,ha=\"left\")\n\ndef autopct_format(values):\n    def my_format(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{v:d}'.format(v=val)\n    return my_format\n\ndef drawPieChart(axes, values, top = 5, title ='Top 5', colors = None):\n    \n    # axes : axes object of matplotlib\n    # values : Pandas Series\n    # top : to filter top values for charting\n    color_map = colors\n    if colors == True:\n        color_map = []\n        for team in values.index:\n            color_map.append(team_colors[team])\n        \n    explode = (0.2, ) + (0.02,) * (top - 1)\n    axes.pie(x = count_values[:top], explode = explode, labels = count_values[:top].index ,\n            autopct=autopct_format(count_values[:top]),\n            colors = color_map,\n            shadow=True, startangle=0)\n    axes.set_title(title,fontsize=16 )\n    axes.axis('equal')\n    \n    return axes","2772f87b":"teams = ['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant']\nteam_abbrevations = ['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW','RPS']\n\nmatches_df.replace(teams,team_abbrevations,inplace=True)\ndeliveries_df.replace(teams,team_abbrevations,inplace=True)","76e35bb9":"matches_df.columns","e5465e0b":"column = 'toss_winner'\n\n# fig=plt.figure(figsize=(15,5))\n\n# axes = sns.countplot(x=column, data=matches_df, \n#                      order=matches_df[column].value_counts().sort_values(ascending = False).index,\n#                     palette=\"rocket\")\n# axes.set_title('Toss winners count across all seasons (By Matches)')\n# axes.set_xlabel('Teams')\n# axes.set_ylabel('Count')\n# drawCountOnBar(axes, orient = \"v\")\n\ncount_values = matches_df[column].value_counts().sort_values(ascending = False)\n\nfig1, (ax1, ax2) = plt.subplots(nrows=1, ncols=2,figsize=(20, 7))\nfig1.suptitle('Toss winners count across all seasons (By Matches)', fontsize=16)\nax1 = drawPieChart(ax1, count_values, colors = True)\n\nax2.bar(x = count_values.index, height =count_values)\nfor index, team in enumerate(count_values.index):\n    ax2.get_children()[index].set_color(team_colors[team]) \n\nax2.set_title(\"All Teams\")\ndrawCountOnBar(ax2, orient = \"v\")\nplt.show()\n","287ef65a":"column = 'toss_winner'\nwinner_seasons = matches_df.groupby('season')[column].value_counts()\n\n\nseason_start = 2008\nseason_end = 2016\nrows = 3\ncols = 3\nfig1, axes = plt.subplots(nrows= rows, ncols= cols,figsize=(18, 15))\nfig1.suptitle('Toss winners (Top 5)', fontsize=16)\n\nfor season in range(season_end, season_start -1 , -1):\n    count_values = winner_seasons[season]\n    row = (season_end - season) \/\/ cols\n    col = (season_end - season) % cols\n    axes[row][col] = drawPieChart(axes[row][col], count_values, title = season, colors=True)\nplt.show()","06d97d49":"column = 'winner'\n\ncount_values = matches_df[column].value_counts().sort_values(ascending = False)\n\nfig1, (ax1, ax2) = plt.subplots(nrows=1, ncols=2,figsize=(20, 7))\nfig1.suptitle('Winners count across all seasons (By Matches)', fontsize=16)\n\nax1 = drawPieChart(ax1, count_values, colors = True)\n\nax2.bar(x = count_values.index, height =count_values)\nfor index, team in enumerate(count_values.index):\n    ax2.get_children()[index].set_color(team_colors[team]) \n\nax2.set_title(\"All Teams\")\ndrawCountOnBar(ax2, orient = \"v\")\nplt.show()","a8c53163":"column = 'winner'\nwinner_seasons = matches_df.groupby('season')[column].value_counts()\n\n\nseason_start = 2008\nseason_end = 2016\nrows = 3\ncols = 3\nfig1, axes = plt.subplots(nrows= rows, ncols= cols,figsize=(18, 15))\nfig1.suptitle('Most Match Winners (Top 5)', fontsize=16)\n\nfor season in range(season_end, season_start -1 , -1):\n    count_values = winner_seasons[season]\n    row = (season_end - season) \/\/ cols\n    col = (season_end - season) % cols\n    axes[row][col] = drawPieChart(axes[row][col], count_values, title = season, colors=True)\nplt.show()","9a783864":"column = 'player_of_match'\n\nfig=plt.figure(figsize=(20, 10))\n\naxes = sns.countplot(y=column, data=matches_df, \n                     order=matches_df[column].value_counts()[:20].sort_values(ascending = False).index,\n                    palette=\"rocket\", orient = \"h\")\naxes.set_title('Player of match across all seasons (By Matches)')\naxes.set_xlabel('Matches')\naxes.set_ylabel('Playet')\ndrawCountOnBar(axes, orient = \"h\")","7dc32413":"#install Bar chart package\n!pip install bar-chart-race\n!apt install ffmpeg","52c437d4":"column = 'player_of_match'\n# print(len(matches_df[column].unique()))\n\npre_bar_race_df = matches_df[['date', 'winner', 'season','player_of_match']]\npre_bar_race_df = pre_bar_race_df.sort_values(by=['season'], ignore_index=True, ascending = True)\n\nplayers = matches_df[column].unique().tolist()\ncolumns = ['season'] + players\n\nbar_race_df = pd.DataFrame(columns = columns)\n\nrow_dict = dict.fromkeys(columns, 0)\n\nfor index in range(len(pre_bar_race_df)):\n    counts = pre_bar_race_df[: index + 1]['player_of_match'].value_counts()\n    row_dict['season'] = pre_bar_race_df['season'][index]\n    for player in counts.index:\n        row_dict[player] = counts[player]\n    \n#     print(index,bar_race_df)\n    bar_race_df = bar_race_df.append(row_dict, ignore_index=True)\n\nbar_race_df.index = bar_race_df['season']\nbar_race_df = bar_race_df.drop(columns = 'season')\nbar_race_df = bar_race_df.apply(pd.to_numeric)\n\n\n### Uncomment to create bar chart again\n\n# import bar_chart_race as bcr\n\n# bcr.bar_chart_race(\n#     df=bar_race_df,\n#     filename='horiz.mp4',\n#     orientation='h',\n#     sort='desc',\n#     n_bars=8,\n#     fixed_order=False,\n#     fixed_max=False,\n#     steps_per_period=50,\n#     interpolate_period=False,\n#     label_bars=True,\n#     bar_size=.95,\n#     period_label={'x': .99, 'y': .25, 'ha': 'right', 'va': 'center'},\n#     period_fmt='Season {x:.0f}',\n#     period_summary_func=lambda v, r: {'x': .99, 'y': .18,\n#                                       's': f'Total Matches: {v.sum():,.0f}',\n#                                       'ha': 'right', 'size': 8, 'family': 'Courier New'},\n# #     perpendicular_bar_func='median',\n# #     period_length=500,\n#     figsize=(5, 3),\n#     dpi=144,\n#     cmap='dark12',\n#     title='Player of the Match',\n#     title_size='',\n#     bar_label_size=7,\n#     tick_label_size=7,\n#     shared_fontdict={'family' : 'Helvetica', 'color' : '.1'},\n#     scale='linear',\n#     writer=None,\n#     fig=None,\n#     bar_kwargs={'alpha': .7},)","3766f8a7":"bcr.bar_chart_race(\n    df=bar_race_df.head(10),\n    filename='horiz.mp4',\n    orientation='h',\n    sort='desc',\n    n_bars=8,\n    fixed_order=False,\n    fixed_max=True,\n    steps_per_period=10,\n    interpolate_period=False,\n    label_bars=True,\n    bar_size=.95,\n    period_label={'x': .99, 'y': .25, 'ha': 'right', 'va': 'center'},\n    period_fmt='%B %d, %Y',\n    period_summary_func=lambda v, r: {'x': .99, 'y': .18,\n                                      's': f'Total Matches: {v.nlargest(6).sum():,.0f}',\n                                      'ha': 'right', 'size': 8, 'family': 'Courier New'},\n#     perpendicular_bar_func='median',\n#     period_length=500,\n    figsize=(5, 3),\n    dpi=144,\n    cmap='dark12',\n    title='COVID-19 Deaths by Country',\n    title_size='',\n    bar_label_size=7,\n    tick_label_size=7,\n    shared_fontdict={'family' : 'Helvetica', 'color' : '.1'},\n    scale='linear',\n    writer=None,\n    fig=None,\n    bar_kwargs={'alpha': .7},)","6f89ae33":"!ls '\/kaggle\/working\/horiz.mp4'","0eff1bbf":"pwd","6351c180":"!'\/kaggle\/working\/horiz.mp4'","67dc21eb":"## Read","45131055":"### Toss Winners","6e561639":"## Begin EDA","def4566b":"### Matches","904ac75e":"#### Winners","e01bff5d":"#### Player of the Match","cef7050a":"umpire3 has no values, let's drop it","2b4a4b2c":"Let's make a bar chart race for 'Player of Match'","d64cbfb9":"<video controls  width=\"99%\" height=\"480\">\n    <source url = '\/kaggle\/working\/horiz.mp4'>\n  <\/video>","28f4a568":"### Matches","01fc71cb":"As all deliveries may not have values for 'player_dismissed', 'dismissal_kind', 'fielder'. We 'll assume all of it 0 (no 'player_dismissed')","f83f0bed":"## Data Source\n[Indian Premier League (Cricket)](https:\/\/www.kaggle.com\/manasgarg\/ipl)","22fc44a0":"### Helper Functions","834d5c5e":"## Handling Missing Values","01b5d883":" Replacing the Team Names with their abbreviations","946f54c7":"For all matches in Dubai International Cricket Stadium, city is marked as NaN. So let's replace it with Dubai"}}