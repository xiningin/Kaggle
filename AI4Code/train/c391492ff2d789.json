{"cell_type":{"dd1452d9":"code","daa3c52e":"code","445115d6":"code","88c11ff6":"code","64668092":"code","4328c0ee":"code","e9792fbf":"code","80faeb8c":"code","34bc069e":"code","fb24f42f":"code","865a46d2":"code","46aab937":"code","fb130799":"code","297d3f72":"code","277a3150":"code","5760eb04":"code","b1e9acda":"code","8f130a31":"code","34cf50dc":"code","757c090b":"code","d4de48e8":"code","ca089a08":"code","d283219e":"markdown","16ebadc9":"markdown","ed74b8ab":"markdown","987484e4":"markdown"},"source":{"dd1452d9":"import os\nimport cv2\nimport string\nfrom pathlib import Path\nimport numpy as np\nimport pandas as pd\nimport random\nimport tensorflow as tf\nimport keras\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras import layers\nfrom keras.models import Model\n","daa3c52e":"im_height = 50\nim_width = 200","445115d6":"data_path = '\/kaggle\/input\/captchadataset\/captcha_images_v2'\ndataset = os.listdir(data_path)\nrandom.seed(42)\nrandom.shuffle(dataset)\nprint(\"DataSet Size ={}\".format(len(dataset)))","88c11ff6":"#split under image and label header\nimages  = []\nlabels= []\n\nfor i,data in enumerate(dataset):\n    image_path = os.path.join(data_path,data)\n    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    image = image \/ 255.0\n    \n    #print(image.shape)\n    images.append(image)\n    label = str(data).split('.')[0]\n    #print(label)\n    labels.append(label)\n    \nprint(\"Data&Label List Created\")\nprint(\"Data Size : {}\\nLabel Size : {}\".format(len(images),len(labels)))","64668092":"#training with only characters in the data set \n\"\"\"\ncharacters = set(char for label in labels for char in label)\nnum_char = len(characters)\nprint(\"Numbers of Characters : {}\\nCharacters : {}\".format(num_char,characters),'\\n')\n\ncharacters = sorted(characters)\nchar_label = {char:index for index,char in enumerate(characters)}\nprint(char_label)\n\"\"\"\n#training with all characters\n\ncharacters = string.ascii_lowercase +\"0123456789\"\nnum_char = len(characters)\n\nprint(\"Numbers of Characters : {} \\nCharacters : {}\".format(num_char,characters),'\\n')\ncharacters = sorted(characters)\nchar_label = {char:index for index,char in enumerate(characters)}\nprint(char_label)\n","4328c0ee":"#convert labels values to onehot labels\ny = np.zeros((5,len(labels),num_char))\nfor i,label in enumerate(labels):\n    onehot = np.zeros((5,num_char))\n    new_label = []\n    for j,idx in enumerate(label):\n        \n        ind = char_label.get(idx)\n        #print(\"\u0130ndis : {}, Target : {}\\n\".format(idx,ind))\n        onehot[j,ind] = 1\n        new_label.append(onehot)\n    \n    #labels[i] = onehot\n    y[:,i] = onehot\n    ","e9792fbf":"images = np.array(images)\n#labels = np.array(labels)\nprint(\"\u0130mages Shape: {} - Labels Shape : {}\".format(images.shape,y.shape))","80faeb8c":"#vis captcha & captcha label\nplt.imshow(images[0])\nprint(y[0])","34bc069e":"X = images\nX_train, y_train = X[:800], y[:,:800]\nX_test, y_test = X[800:], y[:,800:]\nprint(f'X_train Shape : {X_train.shape} \\ny_train Shape : {y_train.shape}')","fb24f42f":"\ninput = layers.Input(shape=(im_height,im_width,1))\n\nconv_1 = layers.Conv2D(16,(3,3),activation = 'relu',padding = 'same')(input)\nmaxpool_1 = layers.MaxPool2D(padding = 'same')(conv_1)\n\nconv_2 = layers.Conv2D(32,(3,3),activation = 'relu',padding = 'same')(maxpool_1)\nmaxpool_2 = layers.MaxPool2D(padding='same')(conv_2)\n\nconv_3 = layers.Conv2D(64,(3,3),activation = 'relu',padding = 'same')(maxpool_2)\nbatch_normal1 = layers.BatchNormalization()(conv_3)\nmaxpool_3 = layers.MaxPool2D(padding='same')(batch_normal1)\n\nflatten = layers.Flatten()(maxpool_3)\n\noutput = []\nfor i in range(5):\n    #dense0 = layers.Dense(1024, activation='relu')(flatten)\n    #drop00 = layers.Dropout(0.9)(dense0)\n    #dense00 = layers.Dense(128,activation='relu')(drop00)\n    #drop0 = layers.Dropout(0.7)(dense00)\n    \n    dense1 = layers.Dense(64, activation='relu')(flatten)\n    drop1 = layers.Dropout(0.5)(dense1)\n    output_layer = layers.Dense(num_char,activation='sigmoid',name =f'Dense_{i+1}')(drop1)\n    \n    output.append(output_layer)\n    \nmodel = Model(input,output)\n","865a46d2":"model.summary()","46aab937":"#model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=[\"accuracy\"])\nmodel.compile(loss='categorical_crossentropy', optimizer=keras.optimizers.Adam(learning_rate=0.00005) ,metrics=[\"accuracy\"])","fb130799":"history = model.fit(X_train, [y_train[0], y_train[1], y_train[2], y_train[3], y_train[4]], \n                 batch_size=32, \n                 epochs=500,\n                 verbose=1, \n                 validation_split=0.2)","297d3f72":"model.evaluate(X_test,[y_test[0], y_test[1], y_test[2], y_test[3], y_test[4]],verbose=1)","277a3150":"model.save('capctha_recognition_cnn_model.h5')","5760eb04":"plt.figure(figsize = (20,20))\nplt.subplot(2,1,2)\nplt.plot(history.history['loss'], marker='x')\nplt.plot(history.history['val_loss'],marker = 'o')\nplt.xlabel('Epochs')\nplt.ylabel('Losses')\nplt.legend(['train loss','val loss'])\nplt.title('Loss function & epochs')","b1e9acda":"plt.figure(figsize = (20,20))\nplt.subplot(2,1,2)\nplt.plot(history.history['Dense_1_accuracy'])\nplt.plot(history.history['val_Dense_1_accuracy'])\nplt.plot(history.history['Dense_2_accuracy'])\nplt.plot(history.history['val_Dense_2_accuracy'])\nplt.plot(history.history['Dense_3_accuracy'])\nplt.plot(history.history['val_Dense_3_accuracy'])\nplt.plot(history.history['Dense_4_accuracy'])\nplt.plot(history.history['val_Dense_4_accuracy'])\nplt.plot(history.history['Dense_5_accuracy'])\n\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(['Dense1_acc' , 'val_Dense1_acc','Dense2_acc','val_Dense2_acc','Dense3_acc' , 'val_Dense3_acc','Dense4_acc','val_Dense4_acc','Dense5_acc','val_Dense5_acc'])\nplt.title('Model accuracy & Epoch')","8f130a31":"def get_label(result):\n    l_ind = []\n    probs = []\n    for a in result:\n        l_ind.append(np.argmax(a))\n        #probs.append(np.max(a))\n\n    capt = ''\n    for l in l_ind:\n        capt += characters[l] #sum(probs)\/5\n\n    return capt","34cf50dc":"def model_predict(img):\n    \n    img = np.reshape(img,(1,im_height,im_width,1))\n    result = np.array(model.predict(img))\n    result = np.reshape(result,(5,num_char))\n\n    capt = get_label(result)\n    return capt","757c090b":"fig = plt.figure(figsize = (20,10))\ncol, row = 3,3\nfor i in range(1, col*row + 1):\n    img = X_test[i+11]\n    fig.add_subplot(row,col,i)\n    result = model_predict(img)\n    plt.title(\"Prediction Result:\" + result, fontsize=20)\n    plt.imshow(img)\nplt.show()","d4de48e8":"step_value = 11  #for pretiction random image\nfig = plt.figure(figsize = (20,10))\ncol, row = 1,1\nfor i in range(1, col*row + 1):\n    img = X_test[i+step_value]\n    onehot_arr = y_test[:,(i+step_value)-1:i+step_value] \n    real_label = get_label(onehot_arr) #image label onehot arr convert to real label\n    fig.add_subplot(row,col,i)\n    result = model_predict(img)\n    plt.title(\"Prediction Result:\" + result, fontsize=20)\n    plt.imshow(img)\nplt.show()","ca089a08":"#load model\nmodel = tf.keras.models.load_model(\".\/capctha_recognition_cnn_model.h5\")\nmodel","d283219e":"## Preprocess Data","16ebadc9":"# Captcha Recognition with CNN\n","ed74b8ab":"## Definition the Model","987484e4":"## Import Libraries"}}