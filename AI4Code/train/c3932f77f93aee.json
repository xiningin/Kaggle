{"cell_type":{"97ad9021":"code","b99bd330":"code","19f770c4":"code","7b5c2f81":"code","9e5ad34e":"code","c7b46aef":"code","1cdadc02":"code","ff6e00bd":"code","285b6619":"code","21eb41f7":"code","3687c551":"code","12ead639":"code","4e4a03e4":"code","82945f5f":"code","d7456a6b":"code","36819c27":"code","382a0f79":"code","18193f8a":"code","074b322d":"code","2fc7e805":"code","5f35f372":"code","ae4ae1a0":"code","bcc48924":"code","82d84507":"code","1c9d3bab":"code","f90b5bfc":"code","28cacdc2":"code","604581fd":"markdown","81a4981c":"markdown","fcb82bcc":"markdown","704ccbbd":"markdown","2a42a03e":"markdown","5b67ad5e":"markdown","36e28040":"markdown","951d1189":"markdown","71c777fb":"markdown","a596292b":"markdown","172adf76":"markdown","9c5682f1":"markdown","5f0e160d":"markdown","f649e169":"markdown","335fb75e":"markdown","6c32ce97":"markdown","1015fac7":"markdown","9e354208":"markdown","e02f5afe":"markdown","c80aeb8a":"markdown","3cab0eca":"markdown","148ea292":"markdown","5ad66574":"markdown","58970ab7":"markdown","00950fcc":"markdown","523b396c":"markdown","9678281a":"markdown","5cc6b17d":"markdown","8e09db44":"markdown"},"source":{"97ad9021":"import math, os, re, warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# kaggle_datasets\uac00 \ubb50\uc600\ub294\uc9c0 youtube\uc5d0\uc11c \uc124\uba85\ud574\uc92c\ub294\ub370 \uae30\uc5b5\uc774 \uc548\ub09c\ub2e4\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.utils import class_weight\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nimport tensorflow as tf\nfrom tensorflow.keras import optimizers, applications, Sequential, layers\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler\n\n# \ub79c\ub364\uc2dc\ub4dc\ub97c \ud2b9\uc815 \uac12\uc73c\ub85c \uace0\uc815\uc2dc\ucf1c\uc8fc\ub294 \ubd80\ubd84\ndef seed_everything(seed=0):\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    os.environ['TF_DETERMINISSTIC_OPS'] = '1'\n    \nseed = 0\nseed_everything(seed)\nwarnings.filterwarnings(\"ignore\")","b99bd330":"# TPU, GPU \ud558\ub4dc\uc6e8\uc5b4\ub97c \ucc3e\ub294\ub2e4\n# \uc801\uc808\ud55c distribution strategy\ub97c \ub9ac\ud134\ud55c\ub2e4\uace0 \ud558\ub294\ub370\n# tpu\uc778\uc9c0 gpu\uc778\uc9c0 \uc124\uc815\ud55c\ub2e4\ub294 \uc18c\ub9ac\uaca0\uc9c0\n\ntry :\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU', tpu.master())\nexcept ValueError:\n    tpu = None\n\n# TPU\uac00 \uc7a1\ud78c\ub2e4\uba74\nif tpu :\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse :\n    strategy = tf.distribute.get_strategy()\n    \nprint('RELICAS :', strategy.num_replicas_in_sync)","19f770c4":"BATCH_SIZE = 16 * strategy.num_replicas_in_sync\nWARMUP_EPOCHS = 3\nWARMUP_LEARNING_RATE = 1e-4 * strategy.num_replicas_in_sync\nEPOCHS = 20\nLEARNING_RATE = 3e-5 * strategy.num_replicas_in_sync\nHEIGHT = 512\nWIDTH = 512\nCHANNELS = 3\nN_CLASSES = 104\nES_PATIENCE = 6\nRLROP_PATIENCE = 3\nDECAY_DROP = 0.3\n\nmodel_path = 'DenseNet201_%sx%s.h5'%(HEIGHT, WIDTH)\n\nGCS_PATH =  KaggleDatasets().get_gcs_path() + '\/tfrecords-jpeg-%sx%s'%(HEIGHT, WIDTH)\n\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec')\n\n# \uc774\uc815\ub3c4 \ub418\ub294 \ud074\ub798\uc2a4\ub4e4\uc774\uba74 \ud30c\uc77c\ub85c \uc804\ub2ec\ud574\uc918\ub3c4 \uc88b\uc558\uc744 \ud150\ub370\nCLASSES = [\n    'pink primrose', 'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea', \n    'wild geranium', 'tiger lily', 'moon orchid', 'bird of paradise', 'monkshood', \n    'globe thistle', 'snapdragon', \"colt's foot\", 'king protea', 'spear thistle', \n    'yellow iris', 'globe-flower', 'purple coneflower', 'peruvian lily', \n    'balloon flower', 'giant white arum lily', 'fire lily', 'pincushion flower', \n    'fritillary', 'red ginger', 'grape hyacinth', 'corn poppy', \n    'prince of wales feathers', 'stemless gentian', 'artichoke', 'sweet william', \n    'carnation', 'garden phlox', 'love in the mist', 'cosmos',  'alpine sea holly', \n    'ruby-lipped cattleya', 'cape flower', 'great masterwort',  'siam tulip', \n    'lenten rose', 'barberton daisy', 'daffodil',  'sword lily', 'poinsettia', \n    'bolero deep blue',  'wallflower', 'marigold', 'buttercup', 'daisy', \n    'common dandelion', 'petunia', 'wild pansy', 'primula',  'sunflower', \n    'lilac hibiscus', 'bishop of llandaff', 'gaura',  'geranium', 'orange dahlia', \n    'pink-yellow dahlia', 'cautleya spicata',  'japanese anemone', 'black-eyed susan', \n    'silverbush', 'californian poppy',  'osteospermum', 'spring crocus', 'iris', \n    'windflower',  'tree poppy', 'gazania', 'azalea', 'water lily',  'rose', \n    'thorn apple', 'morning glory', 'passion flower',  'lotus', 'toad lily', \n    'anthurium', 'frangipani',  'clematis', 'hibiscus', 'columbine', 'desert-rose', \n    'tree mallow', 'magnolia', 'cyclamen ', 'watercress',  'canna lily', \n    'hippeastrum ', 'bee balm', 'pink quill',  'foxglove', 'bougainvillea', \n    'camellia', 'mallow',  'mexican petunia',  'bromelia', 'blanket flower', \n    'trumpet creeper',  'blackberry lily', 'common tulip', 'wild rose']","7b5c2f81":"# Datasets utility functions\nAUTO = tf.data.experimental.AUTOTUNE # instructs the API to read from multiple files if available.\n\ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.reshape(image, [HEIGHT, WIDTH, 3])\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    image = tf.image.random_flip_left_right(image, seed=seed)\n    image = tf.image.random_flip_up_down(image, seed=seed)\n    image = tf.image.random_saturation(image, lower=0, upper=2, seed=seed)\n#     image = tf.image.random_contrast(image, lower=.8, upper=2, seed=seed)\n#     image = tf.image.random_brightness(image, max_delta=.2, seed=seed)\n    image = tf.image.random_crop(image, size=[int(HEIGHT*.8), int(WIDTH*.8), CHANNELS], seed=seed)\n\n    return image, label\n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_training_dataset_preview(ordered=True):\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)","9e5ad34e":"# Visualization utility functions\nnp.set_printoptions(threshold=15, linewidth=80)\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n\ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()\n    \n# Visualize model predictions\ndef dataset_to_numpy_util(dataset, N):\n    dataset = dataset.unbatch().batch(N)\n    for images, labels in dataset:\n        numpy_images = images.numpy()\n        numpy_labels = labels.numpy()\n        break;  \n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    label = np.argmax(label, axis=-1)\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], str(correct), ', shoud be ' if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower_eval(image, title, subplot, red=False):\n    plt.subplot(subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    plt.title(title, fontsize=14, color='red' if red else 'black')\n    return subplot+1\n\ndef display_9_images_with_predictions(images, predictions, labels):\n    subplot=331\n    plt.figure(figsize=(13,13))\n    for i, image in enumerate(images):\n        title, correct = title_from_label_and_target(predictions[i], labels[i])\n        subplot = display_one_flower_eval(image, title, subplot, not correct)\n        if i >= 8:\n            break;\n              \n    plt.tight_layout()\n    plt.subplots_adjust(wspace=0.1, hspace=0.1)\n    plt.show()","c7b46aef":"NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\ntrain_dataset = get_training_dataset_preview(ordered=True)\ny_train = next(iter(train_dataset.unbatch().map(lambda image, label: label).batch(NUM_TRAINING_IMAGES))).numpy()\nprint('Number of training images %d' % NUM_TRAINING_IMAGES)\n\n# Validation data\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nvalid_dataset = get_validation_dataset(ordered=True)\ny_valid = next(iter(valid_dataset.unbatch().map(lambda image, label: label).batch(NUM_VALIDATION_IMAGES))).numpy()\nprint('Number of validation images %d' % NUM_VALIDATION_IMAGES)\n\n# Test data\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nprint('Number of test images %d' % NUM_TEST_IMAGES)\ntest_dataset = get_test_dataset(ordered=True)","1cdadc02":"display_batch_of_images(next(iter(train_dataset.unbatch().batch(20))))","ff6e00bd":"display_batch_of_images(next(iter(valid_dataset.unbatch().batch(20))))","285b6619":"display_batch_of_images(next(iter(test_dataset.unbatch().batch(20))))","21eb41f7":"train_agg = np.asarray([[label, (y_train == index).sum()] for index, label in enumerate(CLASSES)])\nvalid_agg = np.asarray([[label, (y_valid == index).sum()] for index, label in enumerate(CLASSES)])\n\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(24, 64))\n\nax1 = sns.barplot(x=train_agg[...,1], y=train_agg[...,0], order=CLASSES, ax=ax1)\nax1.set_title('Train', fontsize=30)\nax1.tick_params(labelsize=16)\n\nax2 = sns.barplot(x=valid_agg[...,1], y=valid_agg[...,0], order=CLASSES, ax=ax2)\nax2.set_title('Validation', fontsize=30)\nax2.tick_params(labelsize=16)\n\nplt.show()","3687c551":"def create_model(input_shape, N_CLASSES) :\n    base_model = applications.DenseNet201(weights='imagenet',\n                                         include_top=False,\n                                         input_shape=input_shape)\n    \n    base_model.trainable = False  # Freeze layers\n    model = tf.keras.Sequential([\n        base_model,\n        layers.GlobalAveragePooling2D(),\n        layers.Dense(N_CLASSES, activation='softmax')\n    ])\n    \n    return model","12ead639":"with strategy.scope():\n    model = create_model((None, None, CHANNELS), N_CLASSES)\n    \nmetric_list = ['sparse_categorical_accuracy']\n\noptimizer = optimizers.Adam(lr=WARMUP_LEARNING_RATE)\nmodel.compile(optimizer=optimizer,\n             loss = 'sparse_categorical_crossentropy',\n             metrics=metric_list)\nmodel.summary()","4e4a03e4":"STEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nwarmup_history = model.fit(x=get_training_dataset(),\n                           steps_per_epoch = STEPS_PER_EPOCH,\n                           validation_data = get_validation_dataset(),\n                           epochs=WARMUP_EPOCHS,\n                           verbose=2).history","82945f5f":"LR_START = 0.00000001\nLR_MIN = 0.000001\nLR_MAX = LEARNING_RATE\nLR_RAMPUP_EPOCHS = 3\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch) :\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    \n    return lr\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\n\nsns.set(style='whitegrid')\nfig, ax = plt.subplots(figsize=(20, 6))\nplt.plot(rng, y)\nprint(\"Learning rate shcedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","d7456a6b":"# \ubaa8\ub378\uc758 \ubaa8\ub4e0 layer\ub4e4\uc744 \uac1d\ucc44\ub85c \ud558\ub098\uc529 \ubc18\ubcf5\ubb38\uc73c\ub85c \ub3cc\ub9b0\ub2e4\nfor layer in model.layers:\n    layer.trainable = True # Unfreeze layers\n\ncheckpoint = ModelCheckpoint(model_path, monitor='val_loss', mode='min', save_best_only=True)\nes = EarlyStopping(monitor='val_loss', mode='min', patience=ES_PATIENCE, \n                   restore_best_weights=True, verbose=1)\nlr_callback = LearningRateScheduler(lrfn, verbose=1)\n\ncallback_list = [checkpoint, es, lr_callback]\n\noptimizer = optimizers.Adam(lr=LEARNING_RATE)\nmodel.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=metric_list)\nmodel.summary()","36819c27":"history = model.fit(x=get_training_dataset(), \n                    steps_per_epoch=STEPS_PER_EPOCH, \n                    validation_data=get_validation_dataset(),\n                    callbacks=callback_list,\n                    epochs=EPOCHS, \n                    verbose=2).history","382a0f79":"def plot_metrics(history, metric_list):\n    fig, axes = plt.subplots(len(metric_list), 1, sharex='col', figsize=(24, 12))\n    axes = axes.flatten()\n    \n    for index, metric in enumerate(metric_list):\n        axes[index].plot(history[metric], label='Train %s' % metric)\n        axes[index].plot(history['val_%s' % metric], label='Validation %s' % metric)\n        axes[index].legend(loc='best', fontsize=16)\n        axes[index].set_title(metric)\n\n    plt.xlabel('Epochs', fontsize=16)\n    sns.despine()\n    plt.show()\n\nplot_metrics(history, metric_list=['loss', 'sparse_categorical_accuracy'])","18193f8a":"x_train = train_dataset.map(lambda image, label : image)\ntrain_preds = model.predict(x_train)\ntrain_preds = np.argmax(train_preds, axis=-1)\n\nprint(classification_report(y_train, train_preds, target_names=CLASSES))","074b322d":"x_valid = valid_dataset.map(lambda image, label : image)\nvalid_preds = model.predict(x_valid)\nvalid_preds = np.argmax(valid_preds, axis=-1)\n\nprint(classification_report(y_valid, valid_preds, target_names=CLASSES))","2fc7e805":"fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(24, 45))\n\ntrain_cfn_matrix = confusion_matrix(y_train, train_preds, labels=range(len(CLASSES)))\ntrain_cfn_matrix = (train_cfn_matrix.T \/ train_cfn_matrix.sum(axis=1)).T\n\ntrain_df_cm1 = pd.DataFrame(train_cfn_matrix[:34], index=CLASSES[:34], columns=CLASSES)\ntrain_df_cm2 = pd.DataFrame(train_cfn_matrix[34:68], index=CLASSES[34:68], columns=CLASSES)\ntrain_df_cm3 = pd.DataFrame(train_cfn_matrix[68:], index=CLASSES[68:], columns=CLASSES)\n\nsns.heatmap(train_df_cm1, cmap=\"Blues\", ax=ax1).set_title('Train (1:35)', fontsize=30)\nsns.heatmap(train_df_cm2, cmap=\"Blues\", ax=ax2).set_title('Train (35:69)', fontsize=30)\nsns.heatmap(train_df_cm3, cmap=\"Blues\", ax=ax3).set_title('Train (69:)', fontsize=30)\nplt.show()","5f35f372":"fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(24, 45))\n\nvalid_cfn_matrix = confusion_matrix(y_valid, valid_preds, labels=range(len(CLASSES)))\nvalid_cfn_matrix = (valid_cfn_matrix.T \/ valid_cfn_matrix.sum(axis=1)).T\n\nvalid_df_cm1 = pd.DataFrame(valid_cfn_matrix[:34], index=CLASSES[:34], columns=CLASSES)\nvalid_df_cm2 = pd.DataFrame(valid_cfn_matrix[34:68], index=CLASSES[34:68], columns=CLASSES)\nvalid_df_cm3 = pd.DataFrame(valid_cfn_matrix[68:], index=CLASSES[68:], columns=CLASSES)\n\nsns.heatmap(valid_df_cm1, cmap=sns.cubehelix_palette(8), ax=ax1).set_title('Validation (1:35)', fontsize=30)\nsns.heatmap(valid_df_cm2, cmap=sns.cubehelix_palette(8), ax=ax2).set_title('Validation (35:69)', fontsize=30)\nsns.heatmap(valid_df_cm3, cmap=sns.cubehelix_palette(8), ax=ax3).set_title('Validation (69:)', fontsize=30)\nplt.show()","ae4ae1a0":"x_train_samp, y_train_samp = dataset_to_numpy_util(train_dataset, 9)\ntrain_samp_preds = model.predict(x_train_samp, batch_size=9)\ndisplay_9_images_with_predictions(x_train_samp, train_samp_preds, y_train_samp)","bcc48924":"x_valid_samp, y_valid_samp = dataset_to_numpy_util(valid_dataset, 9)\nvalid_samp_preds = model.predict(x_valid_samp, batch_size=9)\ndisplay_9_images_with_predictions(x_valid_samp, valid_samp_preds, y_valid_samp)","82d84507":"x_test = test_dataset.map(lambda image, idnum: image)\ntest_preds = model.predict(x_test)\ntest_preds = np.argmax(test_preds, axis=-1)","1c9d3bab":"test_ids_ds = test_dataset.map(lambda image, idnum:idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U')\n\nsubmission = pd.DataFrame(test_ids, columns=['id'])\nsubmission['label'] = test_preds\nsubmission.to_csv('submission.csv', index=False)\ndisplay(submission.head(10))","f90b5bfc":"!rm Den* ","28cacdc2":"!ls","604581fd":"## Validation set","81a4981c":"https:\/\/www.kaggle.com\/dimitreoliveira\/flower-classification-with-tpus-eda-and-baseline\/notebook\n\n\uc774 \ubca0\uc774\uc2a4\ub77c\uc778\uc744 \ub530\ub77c\uc11c \ud574\ubcf4\uc790","fcb82bcc":"TPU\uac00 \uc2e4\ud589\ud558\uae30\uc804 CPU\uc758 \uc0ac\uc6a9\ub7c9\uc774 100\ud37c\uc13c\ud2b8\uac00 \ub418\uace0, \uadf8\ub7ec\uace0 \uc7a0\uc2dc\ud6c4 CPU \uc0ac\uc6a9\ub7c9\uc774 \uc904\uc5b4\ub4e4\uba74\uc11c TPU\ub97c \uc0ac\uc6a9\ud558\uae30 \uc2dc\uc791  \n\uadf8\ub7f0\ub370 TPU\uae4c\uc9c0 \uc62c\ub9ac\uae30\uae4c\uc9c0\ub294 CPU\ub97c \uc0ac\uc6a9\ud574\uc11c \uc62c\ub9ac\ub294 \uac74\uac00.. TPU\uc744 \ubc14\ub85c \uc0ac\uc6a9\ud558\uc9c4 \uc54a\uace0 \uc0ac\uc6a9 \uc804\uc5d0 \ub300\uae30 \uc2dc\uac04\uc774 \uc0c1\ub2f9\ud788 \uae38\ub2e4  \n> \ud070 \uc0ac\uc774\uc988\uc758 \ub370\uc774\ud130\ub97c \ud559\uc2b5 \ud558\uace0, \uc774\ub7ec\ud55c \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ud559\uc2b5\uc740 \ube60\ub974\uc9c0\ub9cc(x) \ud559\uc2b5\uc744 \uc2dc\uc791\ud558\uae30 \uc804\uae4c\uc9c0 \uc2dc\uac04\uc774 \ub9ce\uc774 \uac78\ub9b0\ub2e4  \n> \uc9c0\uae08\ubcf4\ub2c8\uae4c \ud559\uc2b5\uc790\uccb4\ub3c4 \ube60\ub978\uac70\ub294 \uc544\ub2cc \uac83 \uac19\ub2e4. \uc5c4\uccad \ud070 \ub370\uc774\ud130\ub97c \ud1b5\uc9f8\ub85c \ub123\uc5b4\uc11c \ud559\uc2b5\ud560\ubfd0...20\uc5d0\ud3ed\uc744 \ub3cc\ub9ac\ub294\ub370\ub3c4 \uc2dc\uac04\uc740 \uaf64 \uac78\ub9b0\ub2e4  \n> MXU : ?? , TPU \uc0ac\uc6a9\ub7c9\uc744 \ud37c\uc13c\ud2b8\ub85c \ud45c\ud604\ud558\ub294 \uac83 \uac19\uc740\ub370 10\ud37c\uc13c\ud2b8\ub97c \ub118\uc9c0 \uc54a\uc74c, \ubcf4\ub2e4 \ud070 \ub370\uc774\ud130\ub3c4 \uac00\ub2a5\ud558\ub2e4\ub294 \uc18c\ub9ac\uc77c \uac70 \uac19\ub2e4.  \n\n- 5\ubc88\uc9f8 \uc5d0\ud3ed\ubd80\ud130 accuracy\ub294 90\uc774 \ub118\uac8c \ucd9c\ub825, \uc2dc\uc791\uc740 50\n- \ud559\uc2b5\uc744 \uc798 \ub418\ub294 \uac83 \uac19\ub2e4. val_loss\ub97c \ubd10\ub3c4 \uc624\ubc84\ud53c\ud305 \ub418\ub294 \ud604\uc0c1\uc740 \uc5c6\uc74c.","704ccbbd":"# Test Set Predictions","2a42a03e":"# Model parameter","5b67ad5e":"### Model Loss Graph","36e28040":"## About the datasets","951d1189":"## Visualize Predictions","71c777fb":"### Validation Set","a596292b":"# Dependencies","172adf76":"### Train\n- confusion matrix\ub294 3\uac1c\uc758 \ubd80\ubd84\uc73c\ub85c \ub098\ub234\ub2e4\uace0 \ud55c\ub2e4.\n- \ud074\ub798\uc2a4\ub4e4\uc744 1~34, 35~69, \uadf8\ub9ac\uace0 \ub098\uba38\uc9c0\uc758 \ubd80\ubd84\uc73c\ub85c","9c5682f1":"## Fine-tune all layers\n- Fine tuing\uc744 \ud558\ub294 \ubd80\ubd84\uc778\ub370 \ubb34\uc5c7\uc744 \uac74\ub4dc\ub9b4\uae4c\n- freeze \ud588\ub358 layer\ub4e4\uc744 unfreeze\uc2dc\ud0a4\uace0\n- LearnigRateScheduler, EarlyStopping \ub4f1 \ucf5c\ubc31\ud568\uc218 \uc0ac\uc6a9","5f0e160d":"### Label distribution","f649e169":"![image](https:\/\/user-images.githubusercontent.com\/48716219\/93314461-b9fc3680-f844-11ea-8d80-b9afde171905.png)\nTPU\uac00 \uc77c\uc744 \ud558\uace0 \uc788\ub2e4. \uc2e0\uae30\ud558\ub2e4.","335fb75e":"### Validation","6c32ce97":"### Validation samples","1015fac7":"# Model\n- \uc0ac\uc804\ud559\uc2b5\ubaa8\ub378 DenseNet201\uc744 \uc0ac\uc6a9\n- classification\ud558\ub294 \ubd80\ubd84\uc740 \ub530\ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc0ac\uc6a9 (```include_top=False```)\n- \ubaa8\ub378\uc758 \uac00\uc911\uce58\ub294 freeze (```trainable=False```)","9e354208":"### Train Set","e02f5afe":"# Model Evaluation","c80aeb8a":"## First let's look at some samples from each set","3cab0eca":"## Train set","148ea292":"\ub370\uc774\ud130\uc14b\uc758 \ubd84\ud3ec\ub294 \ub9ce\uc774 \ubd88\uade0\ud615\uc2a4\ub7fd\uc9c0\ub9cc, train\uacfc validation\uc0ac\uc774\uc5d0\uc11c\ub294 \ube44\uc2b7\ud55c \ubd84\ud3ec\ub97c \ubcf4\uc774\uace0 \uc788\ub2e4.","5ad66574":"### Train samples","58970ab7":"\uc0ac\uc9c4\uc758 \ud004\ub9ac\ud2f0\uac00 \ub9e4\uc6b0 \ub192\ub2e4.\n\uc774\ub7ec\ud55c \uc0ac\uc9c4\uc744 \ubaa8\ub378\uc5d0 \uc785\ub825\uc744 \ud558\uba74 \uc77c\ubc18\ud654\ud558\uae30 \uc27d\uace0, \ubb34\ud2bc \ub354 \uc88b\ub2e4.\nTPU\uc758 \uc7a5\uc810\uc774\ub77c\uace0 \ubcfc \uc218 \uc788\uaca0\ub2e4.","00950fcc":"## Warmup top layers","523b396c":"### Learning rate schedule\n- \ud559\uc2b5\ub960 \uc870\uc815\ud558\ub294 \ubd80\ubd84","9678281a":"## Confusion Matrix","5cc6b17d":"# EDA","8e09db44":"### Test samples"}}