{"cell_type":{"ca13771b":"code","a86d0444":"code","53233c9e":"code","d599818a":"code","0ee79f06":"code","7d478b06":"code","72b816d8":"code","44d88235":"code","f2722563":"code","d5e831c2":"code","89eee1b3":"code","5e112752":"code","851dd54f":"code","825f41cd":"code","4ca9071c":"code","dd8df819":"code","b18e8522":"code","cba57c75":"code","2f44e1fe":"code","984488ff":"code","6b0b7e03":"code","28b70ccd":"markdown","0e007384":"markdown","d3d0d1f7":"markdown","ba59b0fc":"markdown","0b5af40a":"markdown","fefe2916":"markdown","2d5709b3":"markdown","739ee7d2":"markdown","5028dc27":"markdown","e15bc1fe":"markdown","f0e86b99":"markdown"},"source":{"ca13771b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import MinMaxScaler\nfrom xgboost import XGBRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a86d0444":"# print all the outputs in a cell\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","53233c9e":"df=pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv', parse_dates=True)\ndf.head()","d599818a":"df.info()","0ee79f06":"df.describe()","7d478b06":"df2=df.copy()\ndf2 = df2.sample(n = len(df2), random_state = 42)\ndf_valid = df2.sample(frac = 0.3, random_state = 42)\ndf_train = df2.drop(df_valid.index)\ncol_2_use=['deg_C','relative_humidity','absolute_humidity','sensor_1','sensor_2','sensor_3','sensor_4','sensor_5']\n","72b816d8":"X_train = df_train[col_2_use]\nX_valid = df_valid[col_2_use]\ny_train_all = df_train[['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']]\ny_valid_all = df_valid[['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']]\nprint('Training shapes:',X_train.shape, y_train_all.shape)\nprint('Validation shapes:',X_valid.shape, y_valid_all.shape)","44d88235":"rf_all=RandomForestRegressor(max_depth = 5, n_estimators=100, random_state = 42)\nrf_all.fit(X_train, y_train_all)\npredict_rf=rf_all.predict(X_valid)\nrf_all.score(X_valid,y_valid_all)\nrf_all.score(X_train, y_train_all)","f2722563":"rmse_rf=np.sqrt(mean_squared_error(y_valid_all,predict_rf))\nprint(rmse_rf)","d5e831c2":"xg_all=XGBRegressor(max_depth = 5, n_estimators=100, random_state = 42)\nwrapper = MultiOutputRegressor(xg_all)\n\nwrapper.fit(X_train, y_train_all)\npredict_xg=wrapper.predict(X_valid)","89eee1b3":"wrapper.score(X_valid,y_valid_all)\nwrapper.score(X_train, y_train_all)","5e112752":"rmse_xg=np.sqrt(mean_squared_error(y_valid_all,predict_xg))\nprint(rmse_xg)","851dd54f":"# fit scaler on training data\nnorm = MinMaxScaler().fit(X_train)\n\n# transform training data\nX_train_norm = norm.transform(X_train)\n\n# transform testing dataabs\nX_valid_norm = norm.transform(X_valid)","825f41cd":"trainX = [X_train, X_train_norm]\ntestX = [X_valid, X_valid_norm]","4ca9071c":"# knn \n# model fitting and measuring RMSE\nrmse = []\nfor i in range(len(trainX)):\n    knn = KNeighborsRegressor(n_neighbors=7)\n    # fit\n    knn.fit(trainX[i],y_train_all)\n    # predict\n    pred = knn.predict(testX[i])\n    print(knn.score(testX[i], y_valid_all))\n    # RMSE\n    rmse.append(np.sqrt(mean_squared_error(y_valid_all,pred)))\n\nprint(rmse)\n","dd8df819":"# visualizing the result\ndf_knn = pd.DataFrame({'RMSE':rmse},index=['Original','Normalized'])\ndf_knn","b18e8522":"knn = KNeighborsRegressor(n_neighbors=7)\n# fit\nknn.fit(trainX[1],y_train_all)\n# predict\npred = knn.predict(testX[1])\nprint(knn.score(testX[1], y_valid_all))","cba57c75":"df_test=pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv', parse_dates=True)\ndf_test.head()","2f44e1fe":"df_submission=pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv', parse_dates=True)\ndf_submission","984488ff":"X_test = df_test[col_2_use]\nX_test_norm = norm.transform(X_test)\npred_test = knn.predict(X_test_norm)\nsubmission = pd.DataFrame(pred_test, columns=[\"target_carbon_monoxide\",\"target_benzene\",\"target_nitrogen_oxides\"], index=df_test['date_time'])","6b0b7e03":"submission.to_csv('\/kaggle\/working\/submission.csv')","28b70ccd":"#### Please provide valuable feedback, comments and guidance that can help me improve my approach and skills.","0e007384":"#### Data Summary Statistics","d3d0d1f7":"#### Prediction and submission","ba59b0fc":"#### Normalising for KNN","0b5af40a":"Sampling into train and validation set","fefe2916":"Splitting target variables and features","2d5709b3":"#### 1. RandomForestRegressor","739ee7d2":"### Modeling ","5028dc27":"#### 2. XGBRegressor","e15bc1fe":"#### 3. KNN","f0e86b99":"## Tabular Playground July 2021"}}