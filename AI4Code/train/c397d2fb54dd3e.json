{"cell_type":{"019ed725":"code","42a8173f":"code","6327c8be":"code","0a40a098":"code","ed36b602":"code","7bac169a":"code","14d925ba":"code","e4255919":"code","edf2efda":"code","a46b75da":"code","c613e482":"code","e397010b":"code","a59b592c":"code","eb7e4c1a":"code","54d74c4e":"code","ce7be23a":"code","1e100ef4":"code","ae7429ba":"code","3ac0d658":"code","148722d1":"code","0c07519d":"code","87585c0b":"code","7c6ab31c":"code","7c82b80e":"code","8dd28d37":"code","b4a73b4d":"code","2697c39f":"code","9779c057":"code","0be4d74f":"code","d31c84ce":"code","4ae1aaeb":"code","e0f5aef2":"code","c624f3c0":"code","5b15c8ed":"markdown","fed7798b":"markdown","f099a216":"markdown","453b6828":"markdown","6f771831":"markdown","d7c62bac":"markdown","a18f4210":"markdown","69700352":"markdown","bbd5ac00":"markdown","ae86cf70":"markdown","29c89607":"markdown","3f15218b":"markdown","1c9291c9":"markdown","dcf98512":"markdown","46d9eba4":"markdown","676b726b":"markdown","de7b3831":"markdown","c75bafe9":"markdown","b152fa86":"markdown","b09e6081":"markdown","3c1834be":"markdown","c7f5d047":"markdown","3a7c9da4":"markdown","df8c65c3":"markdown","412cbc6a":"markdown","44044f10":"markdown","63adde07":"markdown"},"source":{"019ed725":"import os\nfrom sklearn.metrics import classification_report, confusion_matrix\ntry:\n  # The %tensorflow_version magic only works in colab.\n  %tensorflow_version 2.x\nexcept Exception:\n  pass\nimport tensorflow as tf\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","42a8173f":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\nimport itertools\nimport matplotlib.image as mpimg\n%matplotlib inline\n \n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n#preprocess.\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#dl libraraies\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\n\n# specifically for cnn\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\n \nimport tensorflow as tf\nimport random as rn\n\n# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nfrom tqdm import tqdm\nimport os                   \nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image","6327c8be":"X=[]\nZ=[]\nIMG_SIZE=150\nwithmask='..\/input\/inidata\/dataset\/with_mask'\nwithoutmask='..\/input\/inidata\/dataset\/without_mask'","0a40a098":"def assign_label(img,Mask_type):\n    return Mask_type","ed36b602":"def make_train_data(Mask_type,DIR):\n    for img in tqdm(os.listdir(DIR)):\n        label=assign_label(img,Mask_type)\n        path = os.path.join(DIR,img)\n        img = cv2.imread(path,cv2.IMREAD_COLOR)\n        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n        \n        X.append(np.array(img))\n        Z.append(str(label))","7bac169a":"make_train_data('withmask',withmask)\nprint(len(X))\n\nmake_train_data('withoutmask',withoutmask)\nprint(len(X))","14d925ba":"fig,ax=plt.subplots(12,2)\nfig.set_size_inches(15,15)\nfor i in range(12):\n    for j in range (2):\n        l=rn.randint(0,len(Z))\n        ax[i,j].imshow(X[l])\n        ax[i,j].set_title('Mask: '+Z[l])\n        \nplt.tight_layout()","e4255919":"le=LabelEncoder()\nY=le.fit_transform(Z)\nY=to_categorical(Y,17)\nX=np.array(X)\nX=X\/255","edf2efda":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=42)","a46b75da":"np.random.seed(42)\nrn.seed(42)\ntf.random.set_seed(42)","c613e482":"# # modelling starts using a CNN.\n\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (17,17),padding = 'Same',activation ='relu', input_shape = (150,150,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n \n\nmodel.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation('relu'))\nmodel.add(Dense(17, activation = \"softmax\"))","e397010b":"from keras.callbacks import ReduceLROnPlateau\nred_lr= ReduceLROnPlateau(monitor='val_acc',patience=3,verbose=1,factor=0.1)","a59b592c":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\ndatagen.fit(x_train)","eb7e4c1a":"model.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])","54d74c4e":"batch = 150\nepoch = 50\nstep = np.ceil(x_train.shape[0] \/ batch)\n\nHistory = model.fit_generator(\n    datagen.flow(x_train,y_train, batch_size = batch),\n    epochs = epoch,\n    validation_data = (x_test,y_test),\n    verbose = 1,\n    steps_per_epoch = step\n)","ce7be23a":"model.save('\/kaggle\/working\/deteksimasker.h5')","1e100ef4":"saved_model_dir = '\/kaggle\/working\/'\ntf.saved_model.save(model, saved_model_dir)\n\nconverter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir)\ntflite_model = converter.convert()\n\nwith open('model.tflite', 'wb') as f:\n  f.write(tflite_model)\n\ntarget_names = ['withmask','withoutmask']\nlabels = '\\n'.join(target_names)\n\nwith open('labels.txt', 'w') as f:\n  f.write(labels)","ae7429ba":"model.summary()","3ac0d658":"validation_generator = datagen.flow_from_directory(directory='..\/input\/inidata\/dataset', target_size=(IMG_SIZE, IMG_SIZE), batch_size=batch)","148722d1":"Y_pred = model.predict_generator(validation_generator, validation_generator.n \/\/ batch+1)\ny_pred = np.argmax(Y_pred, axis=1)\n# print(Y_pred)\nprint('Confusion Matrix')\ncm = confusion_matrix(validation_generator.classes, y_pred)\nprint(cm)\nprint('Classification Report')\ntarget_names = ['withmask','withoutmask']\nprint(classification_report(validation_generator.classes, y_pred, target_names=target_names))","0c07519d":"#print(classification_report(y_test, y_pred, target_names=target_names))","87585c0b":"def plot_confusion_matrix(cm, classes, normalize=True, title='Confusion matrix', cmap=plt.cm.Blues):\n\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n\n    plt.figure(figsize=(10,10))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        cm = np.around(cm, decimals=1)\n        cm[np.isnan(cm)] = 0.0\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n    thresh = cm.max() \/ 2.\n\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","7c6ab31c":"plot_confusion_matrix(cm, target_names, title='Confusion Matrix')","7c82b80e":"new_model = tf.keras.models.load_model('\/kaggle\/working\/deteksimasker.h5')","8dd28d37":"new_model.summary()","b4a73b4d":"plt.plot(History.history['loss'])\nplt.plot(History.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","2697c39f":"plt.plot(History.history['accuracy'])\nplt.plot(History.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","9779c057":"pred=model.predict(x_test)\npred_digits=np.argmax(pred,axis=1)","0be4d74f":"i=0\nprop_class=[]\nmis_class=[]\n\nfor i in range(len(y_test)):\n    if(np.argmax(y_test[i])==pred_digits[i]):\n        prop_class.append(i)\n    if(len(prop_class)==8):\n        break\n\ni=0\nfor i in range(len(y_test)):\n    if(not np.argmax(y_test[i])==pred_digits[i]):\n        mis_class.append(i)\n    if(len(mis_class)==8):\n        break","d31c84ce":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(20,20)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[prop_class[count]])\n      \n        count+=1","4ae1aaeb":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(20,20)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[prop_class[count]])\n        ax[i,j].set_title(\" Maskdata: \"+str(le.inverse_transform([pred_digits[prop_class[count]]])))\n        plt.tight_layout()\n        count+=1","e0f5aef2":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(20,20)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[mis_class[count]])\n        #ax[i,j].set_title(\" Maskdata : \"+str(le.inverse_transform([pred_digits[mis_class[count]]]))+\"\\n\"+\"Actual Maskdata : \"+str(le.inverse_transform(np.argmax([y_test[mis_class[count]]]))))\n        plt.tight_layout()\n        count+=1","c624f3c0":"new_model.fit(x_train,y_train,epochs=epoch,batch_size=batch,validation_data = (x_test,y_test))","5b15c8ed":"**Membuat variabel yang berfungsi untuk menyatukan data (path) dan memberikan label (nama)**","fed7798b":"**Memanggil dan mengetes gambar**","f099a216":"**Memberikan keteranagn loss akurasi dan matrik akurasi**","453b6828":"**Perintah untuk perulangan if else**","6f771831":"**Memanggil data dan menjalankan perintah variabel yang sudah ada diatas tadi**","d7c62bac":"**Memanggil dan mengetes gambar**","a18f4210":"**Menjalankan epoch data serta memberikan loss data**","69700352":"**Membuat nama dari isi tabel yang digunakn untuk test dan train**","bbd5ac00":"**Membuat dan memanggil variabel baru yang berisikan data h5 yang kita simpan tadi**","ae86cf70":"**Membuat panggilan singkatan untuk variabel**","29c89607":"**Menampilkan patch dan label yang sudah dibuat tadi beserta namanya**","3f15218b":"**Memasang slot import yang akan digunakan untuk algoritma**","1c9291c9":"**Membuat variabel baru yang berisikan dibawah**","dcf98512":"**Memanggil sequential tabel**","46d9eba4":"**Memanggil data dan menjalankan perintah variabel yang sudah ada diatas tadi juga**","676b726b":"**Memulai mebuat model data CNN untuk sequential tabel atau summary data**","de7b3831":"**Membuat nilai atau value akurasi pada saat epoch data**","c75bafe9":"**Membuat dan memanggil data h5 untuk dirubah dalam bentuk sequential tabel**","b152fa86":"**Memanggil dan menggabungkan semua data dibawah menjadi tabel grafik**","b09e6081":"**Memanggil dan menggabungkan semua data dibawah menjadi tabel grafik**","3c1834be":"**Menyimpan data dalam bentuk h5**","c7f5d047":"**Mmembuat variabel baru**","3a7c9da4":"**Membuat variabel baru untuk perintah prediksi**","df8c65c3":"**Memanggil sequential tabel**","412cbc6a":"**Membuat bingkai gambar dan membaca lokasi data yang akan digunakan**","44044f10":"Membuat fungsi atau variabel","63adde07":"**Membuat fungsi untuk mengambil data secara acak yang digunakan train dan test data**"}}