{"cell_type":{"2dae01ff":"code","d45452c1":"code","de0313b0":"code","8d1022df":"code","90812494":"code","c27b6858":"code","f0a1bf6c":"code","09542ca5":"code","37b7ffc7":"code","e08e00f5":"code","cd30bbf8":"code","5d142615":"code","6da184ec":"code","0f8e23ec":"code","965abbe5":"code","84e9f33d":"code","cf7f3fac":"code","e3aa0ca0":"code","3657e131":"code","524afee1":"code","de257b46":"code","47596af1":"code","df01bb82":"code","579dbfe5":"code","c1ae24f3":"code","40b4cc08":"code","4d134b72":"code","6b0b8d25":"markdown"},"source":{"2dae01ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d45452c1":"import pandas as pd\nimport numpy as np","de0313b0":"house = pd.read_csv(\"..\/input\/house-price-tehran-iran\/housePrice.csv\")","8d1022df":"house.head()","90812494":"house.drop(\"Price\", inplace=True, axis = 1)","c27b6858":"house.head()","f0a1bf6c":"house[\"Parking\"].value_counts()","09542ca5":"\nhouse[\"Parking\"] = house['Parking'].astype('int')\n\nhouse[\"Warehouse\"] = house['Warehouse'].astype('int')\n\nhouse[\"Elevator\"] = house['Elevator'].astype('int')\n\nhouse[\"Area\"] = house[\"Area\"].str.replace(',', '').astype(int)","37b7ffc7":"house.info()","e08e00f5":"house.head()","cd30bbf8":"house[\"Address\"].unique()","5d142615":"house.isnull().sum()","6da184ec":"house.dropna(inplace=True)","0f8e23ec":"house.isnull().sum()","965abbe5":"house.shape","84e9f33d":"house_mapping = house[\"Address\"].value_counts().to_dict()\nhouse[\"Address\"] = house[\"Address\"].map(house_mapping)","cf7f3fac":"house.head()","e3aa0ca0":"X = house.drop(\"Price(USD)\", axis = 1)\nX","3657e131":"y = house[\"Price(USD)\"]","524afee1":"from sklearn.model_selection import train_test_split","de257b46":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2)","47596af1":"from xgboost import XGBRegressor","df01bb82":"model = XGBRegressor()","579dbfe5":"model.fit(X_train, y_train)","c1ae24f3":"model.predict(X_test)","40b4cc08":"model.score(X_train, y_train)","4d134b72":"model.score(X_test, y_test)","6b0b8d25":"## Accuracy is this low beacause of Address Frequency Encoding in future i ll be doing Address Encoding more Efficiently which will increase the Accuracy. beacuse of no of categorical values is high we cannot use one hot encoding which will lead to Curse of Dimensionality. More the Columns More The Accuracy will Get Reduced."}}