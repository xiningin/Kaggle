{"cell_type":{"047f509f":"code","a3849e9c":"code","f7f3876f":"code","5c186e88":"code","41a8c00f":"code","7fbd3261":"code","442dd52e":"code","dcf265e9":"code","a544dc35":"code","3f9a20e9":"code","e03ea3c8":"code","17f9be93":"markdown"},"source":{"047f509f":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam\nfrom keras.utils.np_utils import to_categorical\nfrom keras.layers import Dropout, Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nimport cv2\nfrom sklearn.model_selection import train_test_split\nimport pickle\nimport os\nimport pandas as pd\nimport random\nfrom keras.preprocessing.image import ImageDataGenerator","a3849e9c":"veri = \"..\/input\/my-data\/3232\/\"\n# \u0130\u00e7erisinde modeli e\u011fitmek i\u00e7in kullanaca\u011f\u0131m\u0131z veriyi i\u00e7eren klas\u00f6r\u00fcn konumu\n\ns\u0131n\u0131f_listesi = '..\/input\/labels\/labels.csv'\n# Kare, \u00fc\u00e7gen, daire ve y\u0131ld\u0131z \u015feklinde ayr\u0131lm\u0131\u015f olan s\u0131n\u0131flar\u0131 i\u00e7eren csv dosyas\u0131\n\nbatch_miktar\u0131 = 50\n# Her forward ve back propagation i\u015fleminde tek seferde 50 resim kullanmay\u0131 se\u00e7iyoruz.\n\nad\u0131m_ba\u015f\u0131_epoch = 2000\nepochs = 3\n\n# Elimizdeki verileri se\u00e7ti\u011fimiz batch ve ad\u0131m_ba\u015f\u0131_epoch de\u011ferleri miktar\u0131nda e\u011fitiyoruz.\n# E\u011fitimi her bir sefer tamamlad\u0131\u011f\u0131m\u0131zda bu i\u015flem bir epoch etmi\u015f oluyor.\n# Modelimizi daha iyi e\u011fitmek istersek epoch de\u011ferini y\u00fckseltebilir ve daha kesin sonu\u00e7lar elde edebiliriz.\n\nresimlerin_ebat\u0131 = (32, 32, 3)\n# Modeli e\u011fitmek i\u00e7in kullan\u0131lan verilerin boyutlar\u0131.\n\ntest_oran\u0131 = 0.2\n# Bulunan verilerin %20'lik k\u0131sm\u0131 test i\u00e7in ayr\u0131l\u0131yor.\n\ndo\u011frulama_oran\u0131 = 0.2\n# Ayn\u0131 \u015fekilde modelin cevaplar\u0131n\u0131n do\u011frulu\u011funun tespiti i\u00e7in de verinin bir k\u0131sm\u0131n\u0131n ayr\u0131lmas\u0131 gerekiyor.\n# %20'si test i\u00e7in ayr\u0131lm\u0131\u015f olan b\u00fcy\u00fck verinin kalan k\u0131sm\u0131n\u0131n %20'si de bu k\u0131s\u0131m i\u00e7in ayr\u0131l\u0131r.","f7f3876f":"#K\u00fct\u00fcphane","5c186e88":"say\u0131 = 0\nresimler = []\nklas\u00f6r_numaras\u0131 = []\nlistem = os.listdir(veri)\n# os.listdir ile listem de\u011fi\u015fkeni i\u00e7erisine veri olarak adland\u0131rd\u0131\u011f\u0131m\u0131z dosya yolu aktar\u0131l\u0131yor.\nprint(\"Toplam klas\u00f6r say\u0131s\u0131:\", len(listem))\n# len(listem) ile listem de\u011fi\u015fkenin sahip oldu\u011fu say\u0131 de\u011ferini elde edip print ile yazd\u0131r\u0131yoruz.\nklas\u00f6r_say\u0131s\u0131=len(listem)\n# Ayn\u0131 \u015fekilde bu say\u0131 de\u011feri klas\u00f6r_say\u0131s\u0131 de\u011fi\u015fkenine atan\u0131yor.\nprint(\"Klas\u00f6rler s\u0131n\u0131flanm\u0131\u015f olarak s\u0131rayla import ediliyor...\")\nfor x in range (0,len(listem)):\n# for d\u00f6ng\u00fcs\u00fc kullan\u0131larak range() ile s\u0131f\u0131rdan sahip olunan klas\u00f6r say\u0131s\u0131na kadar olan say\u0131 dizini x de\u011fi\u015fkeni\n# i\u00e7erisine aktar\u0131l\u0131yor.\n\n    resim_listesi = os.listdir(veri+\"\/\"+str(say\u0131))\n    # os.listdir ile train4 klas\u00f6r\u00fc i\u00e7erisindeki 0, 1, 2 ve 3 klas\u00f6rlerinin i\u00e7erisine s\u0131rayla ula\u015f\u0131yoruz.\n    for y in resim_listesi:\n        taranan_resimler = cv2.imread(veri+\"\/\"+str(say\u0131)+\"\/\"+y)\n        # cv2 k\u00fct\u00fcphanesi ile .imread komutunu kullan\u0131larak i\u00e7erisinde bulunulan klas\u00f6rdeki resimler bilgisayar taraf\u0131ndan\n        # s\u0131rayla okunuyor.\n        resimler.append(taranan_resimler)\n        # daha sonra bu okunan resimlerin her biri ba\u015fta i\u00e7erisi bo\u015f olan 'resimler' i\u00e7erisine append ile ekleniyor.\n        klas\u00f6r_numaras\u0131.append(say\u0131)\n        # klas\u00f6r numaras\u0131 i\u00e7ine de d\u00f6ng\u00fc ba\u015f\u0131na 1'er 1'er artan 'say\u0131' de\u011fi\u015fkeni aktar\u0131l\u0131yor.\n    print(say\u0131, end =\" \")\n    # end=\" \" ile normalde alt alta yaz\u0131lacak olan klas\u00f6r isimleri yan yana olacak \u015fekilde terminal ekran\u0131na yans\u0131t\u0131l\u0131yor.\n    say\u0131 +=1\n    # 0, 1, 2 ve 3 isimli klas\u00f6rlere s\u0131rayla ge\u00e7i\u015f yap\u0131lma olay\u0131 say\u0131n\u0131n her d\u00f6ng\u00fcde 1 artt\u0131r\u0131lmas\u0131 ile ger\u00e7ekle\u015fiyor.\nprint(\" \")\n","41a8c00f":"resimler = np.array(resimler)\n# de\u011fi\u015fkeni matris haline getirmek i\u00e7in np.array komutunu kullan\u0131yoruz.\nklas\u00f6r_numaras\u0131 = np.array(klas\u00f6r_numaras\u0131)\n# de\u011fi\u015fkeni matris haline getirmek i\u00e7in np.array komutunu kullan\u0131yoruz.\n\nX_train, X_test, y_train, y_test = train_test_split(resimler, klas\u00f6r_numaras\u0131, test_size=test_oran\u0131)\n# Yukar\u0131da test ve do\u011frulama i\u00e7in belirlenilen oranlarda verinin b\u00f6l\u00fcnme i\u015flemi burada ger\u00e7ekle\u015fiyor.\n# X_train ile modelimizi olu\u015ftururken validation ile e\u011fitilen modelin do\u011fru e\u011fitilip e\u011fitilmedi\u011fini g\u00f6r\u00fcyoruz.\n# daha sonra do\u011fru e\u011fitilmi\u015f modeli ger\u00e7ek hayat durumlar\u0131nda test edebilmek i\u00e7in test k\u0131sm\u0131n\u0131 kullan\u0131yoruz.\nX_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size=do\u011frulama_oran\u0131)\n# test_size k\u0131sm\u0131nda verinin hangi oranda b\u00f6l\u00fcnece\u011fi belirtiliyor.\n\n\n\n\n\nprint(\"Test ve do\u011frulama i\u00e7in ayr\u0131lm\u0131\u015f verinin bilgileri...\")\nprint(\"Train\",end = \"\");print(X_train.shape,y_train.shape)\nprint(\"Validation\",end = \"\");print(X_validation.shape,y_validation.shape)\nprint(\"Test\",end = \"\");print(X_test.shape,y_test.shape)\n\nassert(X_train.shape[0]==y_train.shape[0]), \"The number of images in not equal to the number of lables in training set\"\nassert(X_validation.shape[0]==y_validation.shape[0]), \"The number of images in not equal to the number of lables in validation set\"\nassert(X_test.shape[0]==y_test.shape[0]), \"The number of images in not equal to the number of lables in test set\"\nassert(X_train.shape[1:]==(resimlerin_ebat\u0131)),\" The dimesions of the Training images are wrong \"\nassert(X_validation.shape[1:]==(resimlerin_ebat\u0131)),\" The dimesionas of the Validation images are wrong \"\nassert(X_test.shape[1:]==(resimlerin_ebat\u0131)),\" The dimesionas of the Test images are wrong\"","7fbd3261":"data=pd.read_csv(s\u0131n\u0131f_listesi)\n# Pandas k\u00fct\u00fcphanesi yard\u0131m\u0131 ile pd.read_csv sayesinde csv dosyas\u0131 okutuluyor.\nprint(\"data shape \",data.shape,type(data))\n# Sonra da data de\u011fi\u015fkeni i\u00e7ine atanan csv verisinin bigileri yazd\u0131r\u0131l\u0131yor.\n\ndef grayscale(img):\n    img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n    return img\ndef equalize(img):\n    img =cv2.equalizeHist(img)\n    return img\ndef preprocessing(img):\n    img = grayscale(img) # Resimlerin sahip oldu\u011fu renkleri cv2 ile siyah beyaz hale getirmek i\u00e7in\n    img = equalize(img)  # B\u00fct\u00fcn resimlerin parlakl\u0131\u011f\u0131n\u0131 standarda oturtmak i\u00e7in\n    img = img\/255        # Neural Network daha h\u0131zl\u0131 \u00e7al\u0131\u015fs\u0131n ve resimler normalize edilsin diye 255'e b\u00f6l\u00fcm ger\u00e7ekle\u015fir\n    return img\n\n\n\nX_train=np.array(list(map(preprocessing,X_train)))\nX_validation=np.array(list(map(preprocessing,X_validation)))\nX_test=np.array(list(map(preprocessing,X_test)))\n# \u0130lk k\u0131s\u0131mlarda oldu\u011fu gibi np.array 'i bu sefer i\u015flem g\u00f6rm\u00fc\u015f resimler \u00fczerinde X_train, X_validation ve X_test i\u00e7in\n# kullan\u0131l\u0131yor.\n\nX_train=X_train.reshape(X_train.shape[0],X_train.shape[1],X_train.shape[2],1)\nX_validation=X_validation.reshape(X_validation.shape[0],X_validation.shape[1],X_validation.shape[2],1)\nX_test=X_test.reshape(X_test.shape[0],X_test.shape[1],X_test.shape[2],1)\n\n# Kerasta e\u011fitim ger\u00e7ekle\u015ftirmek i\u00e7in verilerin 3D matris hale getirilmesi gerekir.\n# Yani resimlerin tamam\u0131n\u0131n boyutunu cv2 ile 32x32 hale getirdikten sonra e\u011fitimin ger\u00e7ekle\u015fmesi i\u00e7in  bir de\n# 32x32x1 \u015feklinde 3D matris haline getirmek zorunday\u0131z.","442dd52e":"dataGen= ImageDataGenerator(width_shift_range=0.1,   # geni\u015fli\u011fi belirtilen y\u00fczdede sa\u011fa \t\t\t\t\t\t\t\tsola kayd\u0131rmak i\u00e7in\n                            height_shift_range=0.1,  # y\u00fcksekli\u011fi belirtilen y\u00fczdede sa\u011fa \t\t\t\t\t\t\t\tsola kayd\u0131rmak i\u00e7in\n                            zoom_range=0.2,          # zoom yap\u0131lmas\u0131 i\u00e7in\n                            shear_range=0.1,         # k\u0131rpma yap\u0131lmas\u0131 i\u00e7in\n                            rotation_range=10)       # resmin d\u00f6nd\u00fcr\u00fclece\u011fi de\u011fer i\u00e7in\n\n# Bu k\u0131s\u0131mda e\u011fitimde overfitting probleminin \u00e7\u00f6z\u00fclmesi i\u00e7in elimizde varolan resimler \u00fczerinde k\u00fc\u00e7\u00fck oynamalar yaparak\n# onlar\u0131 tekrar olu\u015fturup e\u011fitimde kullan\u0131yoruz. Bunun sayesinde hem sahip olunan veri zenginle\u015fiyor hem de bilgisayar\u0131n\n# \u00f6\u011frendi\u011fi \u015feyi farkl\u0131 a\u00e7\u0131 ve boyutlarda g\u00f6rmesi durumunda bile sonu\u00e7 daha iyi hale geliyor.\n\ndataGen.fit(X_train)\nbatches= dataGen.flow(X_train,y_train,batch_size=20)\nX_batch,y_batch = next(batches)\n# dataGen de\u011fi\u015fkeninde ger\u00e7ekle\u015fen i\u015flemleri .fit komutu ile X_train'e uyguluyoruz.\n\ny_train = to_categorical(y_train, klas\u00f6r_say\u0131s\u0131)\ny_validation = to_categorical(y_validation,klas\u00f6r_say\u0131s\u0131)\ny_test = to_categorical(y_test,klas\u00f6r_say\u0131s\u0131)","dcf265e9":"def myModel():\n    filtre_say\u0131s\u0131 = 60\n    filtre_boyutu = (5, 5)\n    filtre_boyutu_2 = (3, 3)\n    pool_boyutu=(2, 2)  # overfitting(ezberleme) miktar\u0131n\u0131 azaltmak i\u00e7in\n    d\u00fc\u011f\u00fcm_say\u0131s\u0131 = 500  # Gizli katmandaki d\u00fc\u011f\u00fcm say\u0131s\u0131\n    model = Sequential()\n    # Modelimizi olu\u015ftururken Sequential metodunu kullan\u0131yoruz.\n\n    model.add((Conv2D(filtre_say\u0131s\u0131, filtre_boyutu, input_shape=(resimlerin_ebat\u0131[0], resimlerin_ebat\u0131[1], 1), activation = 'relu')))\n    # Genel olarak ne kadar filtre eklersek o kadar do\u011fru sonu\u00e7lar elde edece\u011fimizden tek filtre yerine birka\u00e7 filtre\n    # birden kullan\u0131yoruz.\n\n    model.add((Conv2D(filtre_say\u0131s\u0131, filtre_boyutu, activation='relu')))\n    model.add(MaxPooling2D(pool_size=pool_boyutu))\n    # overfitting(ezberleme) miktar\u0131n\u0131 azaltmak i\u00e7in MaxPooling i\u015flemi ger\u00e7ekle\u015ftiriliyor.\n\n    model.add((Conv2D(filtre_say\u0131s\u0131\/\/2, filtre_boyutu_2, activation='relu')))\n    # relu aktivasyon fonksiyonunu kullanarak karma\u015f\u0131kl\u0131\u011f\u0131 artt\u0131r\u0131yoruz.\n    model.add((Conv2D(filtre_say\u0131s\u0131 \/\/ 2, filtre_boyutu_2, activation='relu')))\n    model.add(MaxPooling2D(pool_size=pool_boyutu))\n    model.add(Dropout(0.5))\n    # forward propogation yaparken rastgele n\u00f6ronlar se\u00e7iliyor ve devre d\u0131\u015f\u0131 b\u0131rak\u0131l\u0131yor. Bu metoda Dropout metodu denir\n    # Devre d\u0131\u015f\u0131 b\u0131rak\u0131lacak n\u00f6ronlar belirlenmi\u015f threshold de\u011ferinin alt\u0131nda de\u011fere sahip n\u00f6ronlard\u0131r.\n    # Bu metodun kullan\u0131m\u0131 da overfitting yani ezberleme olay\u0131n\u0131 azaltma konusunda yard\u0131mc\u0131 bir rol oynar.\n\n    model.add(Flatten())\n    # Filtreleme ve eleme i\u015flemlerinin tamamlanmas\u0131 sonras\u0131ndan art\u0131k artificial neural network kullanaca\u011f\u0131m\u0131z i\u00e7in\n    # Flatten i\u015flemi ger\u00e7ekle\u015ftirilmelidir. Artificial neural network i\u00e7erisinde matrisi kullanabilmek i\u00e7in\n    # mesela 3,3 l\u00fck matrisi 9,1 'lik \u015fekilde Flatten ile d\u00fczle\u015ftirmeliyiz.\n    model.add(Dense(d\u00fc\u011f\u00fcm_say\u0131s\u0131, activation='relu'))\n    # Bu k\u0131s\u0131mda Gizli Katman ekleniyor.\n    model.add(Dropout(0.5))\n    model.add(Dense(klas\u00f6r_say\u0131s\u0131, activation='softmax'))  # \u00c7\u0131k\u0131\u015f Filtresi\n    # \u00c7oklu s\u0131n\u0131f ayr\u0131m\u0131 yapt\u0131\u011f\u0131m\u0131z i\u00e7in sigmoid fonksiyonunun daha genelle\u015ftirilmi\u015f bir hali olan softmax aktivasyon\n    # fonksiyonunu kullanarak \u00e7\u0131k\u0131\u015f filtresini ekliyoruz.\n\n    # Modelin Compile Edilmesi\n    model.compile(Adam(lr=0.001), loss='categorical_crossentropy', metrics=['accuracy'])\n    # Adam = adaptive momentum optimizer , lr = learning rate\n    # Optimizer kullan\u0131m\u0131n\u0131n sebebi e\u011fitim ger\u00e7ekle\u015firken en iyi performans\u0131n sa\u011flanmas\u0131 ad\u0131na learning rate'in\n    # ayarlanmas\u0131 yani gereken miktarda artt\u0131r\u0131lmas\u0131.\n    # loss fonksiyonu ise sinir a\u011f\u0131n\u0131n cevab\u0131n\u0131n hata oran\u0131 azalana dek weight de\u011ferlerinin g\u00fcncellenmesini sa\u011flar.\n    return model","a544dc35":"model = myModel()\nprint(model.summary())\n# Model hakk\u0131ndaki bilgilerin terminale yans\u0131t\u0131lmas\u0131 i\u015flemi\nhistory = model.fit_generator(dataGen.flow(X_train, y_train, batch_size=batch_miktar\u0131), steps_per_epoch=ad\u0131m_ba\u015f\u0131_epoch, epochs=epochs, validation_data=(X_validation, y_validation), shuffle=1)\n# Keras'\u0131n .fit_generator komutu ile haz\u0131rl\u0131\u011f\u0131 tamamlanm\u0131\u015f modelin e\u011fitimi ba\u015flat\u0131l\u0131yor.\n","3f9a20e9":"plt.figure(1)\n# \u0130lk grafik\nplt.plot(history.history['loss'])\n# E\u011fitilmi\u015f modelimizin de\u011ferlerini grafikteki de\u011ferlere aktar\u0131yoruz ki grafikte g\u00f6sterebilelim\nplt.plot(history.history['val_loss'])\nplt.legend(['training', 'validation'])\nplt.title('loss')\n# Grafi\u011fin ba\u015fl\u0131\u011f\u0131\nplt.xlabel('epoch')\n# x ekseninde yaz\u0131lacak olan k\u0131s\u0131m yani 'epoch'\nplt.figure(2)\n# 2. Grafik\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.legend(['training', 'validation'])\n# Grafi\u011fin k\u00f6\u015fe k\u0131sm\u0131nda training ve validation yaz\u0131l\u0131 k\u00fc\u00e7\u00fck bir tablo olu\u015fmas\u0131n\u0131 sa\u011flar.\nplt.title('Acurracy')\nplt.xlabel('epoch')\nplt.show()\n# Grafi\u011fi olu\u015fturmam\u0131z\u0131 sa\u011flayan matplotlib k\u00fct\u00fcphanesinin yine farkl\u0131 bir komutu olan plt.show() ile haz\u0131rlanm\u0131\u015f olan grafikler s\u0131rayla ekranda g\u00f6steriliyor.\nscore = model.evaluate(X_test,y_test,verbose=0)\nprint('Test Score:',score[0])\nprint('Test Accuracy:',score[1])","e03ea3c8":"pickle_out= open(\"eniyisi.p\", \"wb\") \npickle.dump(model,pickle_out)\npickle_out.close()\ncv2.waitKey(0)\n\n# Son olarak e\u011fitimi tamamlanm\u0131\u015f olan modeli bir pickle objesine kaydediyoruz.\n# Bunun sebebi bu modeli daha sonra ger\u00e7ek zamanl\u0131 olarak opencv fonksiyonu i\u00e7erisinde kullanacak olmam\u0131z","17f9be93":"# 1. K\u00fct\u00fcphanelerin import edilme i\u015flemi tamamland\u0131."}}