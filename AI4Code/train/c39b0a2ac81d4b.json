{"cell_type":{"7f1b4a82":"code","0c8cb3f3":"code","b131d9d5":"code","066e569d":"code","fbf4fd8a":"code","bfcda075":"code","cf06b1ed":"code","976fd2dc":"code","c330d1c3":"code","0261592a":"code","f17e66a6":"code","8966ba2e":"code","33c07917":"code","10db809f":"code","1bf00687":"code","debc32b5":"code","234c75b9":"code","7a4a756b":"code","7b2838c4":"code","f4fc49ec":"code","bad59083":"code","7613a96e":"code","66946bb5":"code","e28d2e02":"code","09a577f1":"code","6d07eb9a":"code","35980c93":"code","9817141f":"code","1f6645c5":"code","ecda46d7":"code","1d762db6":"code","79f6e1fd":"code","15c27555":"code","2addfa9a":"code","d097be1f":"code","b9d671a2":"markdown","f1532ad9":"markdown","f7f48205":"markdown","09041296":"markdown","450c2767":"markdown","46203810":"markdown","67986633":"markdown","a38f5202":"markdown","f7e89ad7":"markdown","3a23769a":"markdown","63924705":"markdown","f98f78f0":"markdown","651ec063":"markdown"},"source":{"7f1b4a82":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c8cb3f3":"import matplotlib.pyplot as plt\nfrom statsmodels.tsa.vector_ar.var_model import VAR\nimport seaborn as sns\nimport sklearn\nfrom sklearn.metrics import r2_score","b131d9d5":"data= pd.read_csv('..\/input\/google-stock-prediction\/GOOG.csv')","066e569d":"data.shape","fbf4fd8a":"data.isnull().sum()","bfcda075":"data.info()","cf06b1ed":"data.head(10)","976fd2dc":"data['data']= pd.to_datetime(data['date'])\n","c330d1c3":"dates=[]\nfor i in range(len(data)):\n    dates.append(data['date'].iloc[i][0:10]) ","0261592a":"data","f17e66a6":"data.drop(['symbol'], axis= 1, inplace= True)","8966ba2e":"data['date']= pd.to_datetime(dates)\n","33c07917":"data['date'].duplicated().sum()\n","10db809f":"r = pd.date_range(start=data.date.min(), end=data.date.max())\ndata= data.set_index('date').reindex(r).fillna(np.nan).rename_axis('date').reset_index()","1bf00687":"data.head(10)","debc32b5":"data.drop(['date', 'data'], axis=1, inplace= True)\ncl_names= list(data.columns)","234c75b9":"cl_names","7a4a756b":"for i in cl_names:\n    data[i]= data[i].interpolate()","7b2838c4":"data.head(10)","f4fc49ec":"corr = data.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0)","bad59083":"from statsmodels.tsa.stattools import adfuller\nseries1= data['open']\nresult = adfuller(series1)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nprint('Critical Values:')\nfor key, value in result[4].items():\n    print('\\t%s: %.3f' % (key, value))\n \nprint('**********************')\nseries2= data['close']\nresult = adfuller(series2)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nprint('Critical Values:')\nfor key, value in result[4].items():\n    print('\\t%s: %.3f' % (key, value))\n\n    ","7613a96e":"# I am visualizing the target values \nplt.figure(figsize=(15, 5))\nplt.subplot(1,2,1)\nplt.plot(data['close']) \nplt.title('close values')\nplt.xlabel('close')\nplt.subplot(1,2,2)\nplt.plot(data['open'])\nplt.title('open values')\nplt.xlabel('open')","66946bb5":"train = data.iloc[0:int(0.8*len(data)), :]\ntest= data.iloc[int(0.8*len(data)):, :]\n","e28d2e02":"test.shape","09a577f1":"test","6d07eb9a":"# Droping the constant values as they will be trouble some for Var modeling \ntrain.drop(['divCash', 'splitFactor'], axis=1, inplace= True)\ntest.drop(['divCash', 'splitFactor'], axis=1, inplace= True)\n\n","35980c93":"def VarForecasting(Actual):\n        model = VAR(Actual)\n        model_fit = model.fit()\n        prediction = model_fit.forecast(model_fit.y, steps=10) # predicting all the next 10 values at each step\n        return np.array(prediction)","9817141f":"data.drop(['divCash', 'splitFactor'], axis=1, inplace= True)","1f6645c5":"close_predictions=[]\nopen_predictions=[]\nfor timepoint in range(0, len(test)):\n    Actual_train = data.iloc[timepoint:timepoint + len(train)]\n    Prediction = VarForecasting(Actual_train)\n    close_predictions.append(Prediction[:,0])\n    open_predictions.append(Prediction[:,3])\n\n\n","ecda46d7":"close_predictions[0]","1d762db6":"np.array(close_predictions).shape","79f6e1fd":"test.shape","15c27555":"# at each step, the te\np_close= [close_predictions[i][0] for i in range(len(close_predictions))]\np_open= [open_predictions[i][0] for i in range(len(open_predictions))]","2addfa9a":"plt.figure(figsize=(15, 5))\nplt.subplot(1,2,1)\nplt.plot(np.array(test['close'])[0:100])\nplt.plot(p_close[0:100],'r')\nplt.title('close values')\nplt.xlabel('close')\nplt.subplot(1,2,2)\nplt.plot(np.array(test['open'])[0:100])\nplt.plot(p_open[0:100], 'r' )\nplt.title('open values')\nplt.xlabel('open')","d097be1f":"from sklearn.metrics import mean_squared_error\nimport math \nprint(math.sqrt(mean_squared_error(np.array(test['open']),p_open )))\nprint(math.sqrt(mean_squared_error(np.array(test['close']),p_close )))\n\n## R2 score:\nprint('R2 score of the Close series',r2_score(np.array(test['close']),p_close ))\nprint('R2 score of the open series',r2_score(np.array(test['open']),p_close ))","b9d671a2":"<h3> Data Visualization: <\\3h>","f1532ad9":"## checking the duplicated stime stamps:","f7f48205":"The results of test shows that data is non-stationary.","09041296":"<h3 style=\"text-align: center;\"> Time series analysis and prediction <\/h3>\n<img src=\"https:\/\/www.seebiz.eu\/img\/394f9846c06e08fbb7e116315e63f909.jpg\" width=\"400\" height= \"400\"> ","450c2767":"## Interpolating the NAN values:","46203810":"<h3>Data investigation<\/h3>  ","67986633":"## Model definition and Training:","a38f5202":"## Prediction visualization and evaluation ","f7e89ad7":"## Finding missting time stamps and filling them using interpolation:","3a23769a":"### Correlation:","63924705":"### train- test split:","f98f78f0":"One chunck of actual data and corresponding model prediction is plotted to visualize the model performance.","651ec063":"## Stationary check:\nstationay check is done using Dicky fuller test."}}