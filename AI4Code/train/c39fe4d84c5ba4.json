{"cell_type":{"f46c4876":"code","ebbf2aad":"code","658c32fe":"code","801298a1":"code","6cdd105c":"code","bc12813b":"code","5329f088":"code","a96722f7":"code","e4607988":"code","bc5b3012":"code","3bd42c2a":"code","e01af71b":"code","9eb43126":"code","035fc0eb":"code","8d2bf7d1":"code","e35d917f":"code","1ea07857":"code","64649233":"code","9e15bb8c":"code","e691589e":"code","39f84546":"code","0c6c14a2":"code","a19f9b75":"code","b2aa9499":"code","d3afe09a":"code","d14a88d0":"code","db0dadb2":"code","be1a6c17":"code","c825b9e0":"code","f52f93fd":"code","89ac2c41":"code","3e9ef29c":"code","c3ad27c9":"code","99ddde08":"code","94bc53e1":"markdown","3dddce6d":"markdown","57623adf":"markdown","7b7d2239":"markdown","ebdcd6b1":"markdown","34454e78":"markdown","8fb39388":"markdown","7348460f":"markdown","d1e7a373":"markdown","00fe1f48":"markdown","c76e3960":"markdown","35a60611":"markdown","b1c7b8ba":"markdown","00842e84":"markdown","724fe61c":"markdown","b96b5957":"markdown","5ed22915":"markdown"},"source":{"f46c4876":"import numpy as np\nimport pandas as pd\nimport keras\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport codecs\nimport unidecode\nimport re\nimport spacy\nfrom nltk.corpus import stopwords\nfrom time import time\n\nfrom keras import backend as K\nfrom keras.engine.topology import Layer\nfrom keras import initializers, regularizers, constraints, optimizers, layers\nfrom keras.models import Model\nfrom keras.layers import Dense, Embedding, Dropout, Bidirectional, CuDNNGRU, GlobalMaxPool1D, Input\n\n\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")","ebbf2aad":"df = pd.read_csv(\"..\/input\/train.csv\")\nprint(\"Number of texts: \", df.shape[0])","658c32fe":"for i in range(5):\n    print(df['question_text'][df.index[i]])","801298a1":"from nltk import WordNetLemmatizer\n\nwnl = WordNetLemmatizer()\n\ncontraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"can't've\": \"cannot have\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"couldn't've\": \"could not have\",\"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hadn't've\": \"had not have\", \"hasn't\": \"has not\", \"haven't\": \"have not\",  \"he'd\": \"he would\", \"he'd've\": \"he would have\", \"he'll\": \"he will\", \"he'll've\": \"he will have\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\", \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\",\"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\",\"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\",\"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\", \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\" } \n\nstop_words = set(stopwords.words('english'))","6cdd105c":"def treat_text(text):\n    # Decoding\n    try:\n        decoded = unidecode.unidecode(codecs.decode(text, 'unicode_escape'))\n    except:\n        decoded = unidecode.unidecode(text)\n        \n    # Handling Apostrophes\n    apostrophe_handled = re.sub(\"\u2019\", \"'\", decoded)\n    text = ' '.join([contraction_mapping[t] if t in contraction_mapping else t for t in apostrophe_handled.split(\" \")])\n    \n    # Keeping letters + lowerring\n    text = re.findall(r\"[a-zA-Z]+\", text.lower())\n    \n    # Removing stopwords\n    text = [word for word in text if (word not in stop_words and len(word)>2)]\n    \n    # Lemming\n    text = [wnl.lemmatize(word) for word in text]\n    \n    # Removing repetitions\n    text = re.sub(r'(.)\\1+', r'\\1\\1', ' '.join(text))\n    \n    return text","bc12813b":"t0 = time()\nprint('Cleaning data ... ')\ndf['treated_text'] = df['question_text'].transform(treat_text)\nprint(f\"Data cleaned in {round(time() - t0, 1)} seconds\")","5329f088":"for i in range(5):\n    print(df['treated_text'][df.index[i]])","a96722f7":"df['length'] = df['question_text'].transform(lambda x: len(x.split(' ')) \/\/ 5 * 5)\ndf['treated_length'] = df['treated_text'].transform(lambda x: len(x.split(' ')) \/\/ 5 * 5)","e4607988":"plt.figure(figsize=(12,8))\nsns.countplot(df['length'])\nplt.title('Length repartiton (rounded down to the 5)')\nplt.yscale('log')\nplt.show()","bc5b3012":"plt.figure(figsize=(12,8))\nsns.countplot(df['treated_length'])\nplt.title('Length repartiton (rounded down to the 5)')\nplt.yscale('log')\nplt.show()","3bd42c2a":"max_len = 70\nmax_len_treated = 40","e01af71b":"def make_tokenizer(texts, len_voc):\n    from keras.preprocessing.text import Tokenizer\n    t = Tokenizer(num_words=len_voc)\n    t.fit_on_texts(texts)\n    return t","9eb43126":"len_voc = 50000","035fc0eb":"tokenizer = make_tokenizer(df['question_text'], len_voc)\ntokenizer_treated = make_tokenizer(df['treated_text'], len_voc)","8d2bf7d1":"from sklearn.model_selection import train_test_split\n\ndf_train, df_test = train_test_split(df, test_size=0.1)","e35d917f":"X_train = tokenizer.texts_to_sequences(df_train['question_text'])\nX_test = tokenizer.texts_to_sequences(df_test['question_text'])","1ea07857":"X_train_treated = tokenizer_treated.texts_to_sequences(df_train['treated_text'])\nX_test_treated = tokenizer_treated.texts_to_sequences(df_test['treated_text'])","64649233":"from keras.preprocessing.sequence import pad_sequences\n\nX_train = pad_sequences(X_train, maxlen=max_len)\nX_test = pad_sequences(X_test, maxlen=max_len)\n\nX_train_treated = pad_sequences(X_train_treated, maxlen=max_len_treated)\nX_test_treated = pad_sequences(X_test_treated, maxlen=max_len_treated)","9e15bb8c":"y_train = df_train['target'].values\ny_test = df_test['target'].values","e691589e":"def get_coefs(word,*arr): \n    return word, np.asarray(arr, dtype='float32')\n\ndef load_embedding(file):\n    if file == '..\/input\/embeddings\/wiki-news-300d-1M\/wiki-news-300d-1M.vec':\n        embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file) if len(o)>100)\n    else:\n        embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file, encoding='latin'))\n    return embeddings_index","39f84546":"def make_embedding_matrix(embedding, tokenizer, len_voc):\n    all_embs = np.stack(embedding.values())\n    emb_mean,emb_std = all_embs.mean(), all_embs.std()\n    embed_size = all_embs.shape[1]\n    word_index = tokenizer.word_index\n    embedding_matrix = np.random.normal(emb_mean, emb_std, (len_voc, embed_size))\n    \n    for word, i in word_index.items():\n        if i >= len_voc:\n            continue\n        embedding_vector = embedding.get(word)\n        if embedding_vector is not None: \n            embedding_matrix[i] = embedding_vector\n    \n    return embedding_matrix","0c6c14a2":"glove = load_embedding('..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt')","a19f9b75":"embed_mat = make_embedding_matrix(glove, tokenizer, len_voc)\nembed_mat_treated = make_embedding_matrix(glove, tokenizer_treated, len_voc)","b2aa9499":"class Attention(Layer):\n    def __init__(self, step_dim, W_regularizer=None, b_regularizer=None, W_constraint=None, b_constraint=None, bias=True, **kwargs):\n        self.supports_masking = True\n        self.init = initializers.get('glorot_uniform')\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n        self.W_constraint = constraints.get(W_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n        self.bias = bias\n        self.step_dim = step_dim\n        self.features_dim = 0\n        super(Attention, self).__init__(**kwargs)\n        \n    def build(self, input_shape):\n        assert len(input_shape) == 3\n        self.W = self.add_weight((input_shape[-1],), initializer=self.init, name='{}_W'.format(self.name), regularizer=self.W_regularizer, constraint=self.W_constraint)\n        self.features_dim = input_shape[-1]\n        if self.bias:\n            self.b = self.add_weight((input_shape[1],), initializer='zero', name='{}_b'.format(self.name), regularizer=self.b_regularizer, constraint=self.b_constraint)\n        else:\n            self.b = None\n        self.built = True\n\n    def compute_mask(self, input, input_mask=None):\n        return None\n\n    def call(self, x, mask=None):\n        features_dim = self.features_dim\n        step_dim = self.step_dim\n        eij = K.reshape(K.dot(K.reshape(x, (-1, features_dim)), K.reshape(self.W, (features_dim, 1))), (-1, step_dim))\n        if self.bias: eij += self.b\n        eij = K.tanh(eij)\n        a = K.exp(eij)\n        if mask is not None: a *= K.cast(mask, K.floatx())\n        a \/= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n        a = K.expand_dims(a)\n        weighted_input = x * a\n        return K.sum(weighted_input, axis=1)\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0],  self.features_dim","d3afe09a":"def make_model(embedding_matrix, max_len, len_voc=50000, embed_size=300):\n    inp = Input(shape=(max_len,))\n    x = Embedding(len_voc, embed_size, weights=[embedding_matrix], trainable=False)(inp)\n    x = Bidirectional(CuDNNGRU(64, return_sequences=True))(x)\n    x = Attention(max_len)(x)\n    x = Dense(1, activation=\"sigmoid\")(x)\n    model = Model(inputs=inp, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","d14a88d0":"model = make_model(embed_mat, max_len)\nmodel_treated = make_model(embed_mat_treated, max_len_treated)","db0dadb2":"model.summary()","be1a6c17":"model.fit(X_train, y_train, batch_size=1024, epochs=3, validation_data=[X_test, y_test])","c825b9e0":"model_treated.fit(X_train_treated, y_train, batch_size=1024, epochs=3, validation_data=[X_test_treated, y_test])","f52f93fd":"pred_train = model.predict([X_train], batch_size=256, verbose=1)\npred_test = model.predict([X_test], batch_size=256, verbose=1)","89ac2c41":"pred_train_treated = model_treated.predict([X_train_treated], batch_size=256, verbose=1)\npred_test_treated = model_treated.predict([X_test_treated], batch_size=256, verbose=1)","3e9ef29c":"def tweak_threshold(pred, truth):\n    from sklearn.metrics import f1_score\n    scores = []\n    for thresh in np.arange(0.1, 0.501, 0.01):\n        thresh = np.round(thresh, 2)\n        score = f1_score(truth, (pred>thresh).astype(int))\n        scores.append(score)\n    return round(np.max(scores), 4)","c3ad27c9":"print(f\"Scored {tweak_threshold(pred_train, y_train)} without text treatment on train data\")\nprint(f\"Scored {tweak_threshold(pred_test, y_test)} without text treatment on test data\")","99ddde08":"print(f\"Scored {tweak_threshold(pred_train_treated, y_train)} with text treatment on train data\")\nprint(f\"Scored {tweak_threshold(pred_test_treated, y_test)} with text treatment on test data\")","94bc53e1":"## Loading pre-trained word vectors","3dddce6d":"## Tokenizer","57623adf":"Treating text lowers the length of texts, and therefore allows us to make a model with less parameters and a shorter training time.","7b7d2239":"## Text lengths","ebdcd6b1":"## Treating Texts","34454e78":"## Loading data","8fb39388":"### Predictions","7348460f":"** So far, texts look quite complicated, I'm going to apply some usual text processing techniques to simplify them **\n* Dealing with contractions ('t, 've and other stuff)\n* Removing numbers and special characters\n* Lowering letters\n* Removing Stopwords\n* Lemmatization (keeping only the simple form of the word)","d1e7a373":"## Data for the Network","00fe1f48":"** The model without treatment appears to significantly outperform the other one **\n\n  I do believe that it is because GloVe Word Vectors are able to capture the information better when the words are not processed.\n  \n  In fact, word vectors are able to deal with number, most of special characters, words starting with an upper case letter (etc ...)\n  \n  Moreover, Keras' Tokenizer does the most basic preprocessing steps (lowercasing \/ punctuation removal)\n   \n## Conclusion : Text cleaning is a waste of time\n### Well,  at least, the steps I chose are ...\nOne should focus on optimizing the model instead, and perhaps doing some data augmentation.\n ","c76e3960":"### Fitting","35a60611":" # Should you Clean your Data ? \n\n### A question that has appeared is whether or not one should apply preprocessing to the text. In fact, most popular kernels appear not to have done a lot, and still reached good scores (0.68-ish)\n\n** In this kernel, I will use a simple Deep Learning model and compare its performance on pre-processed texts with usual methods and on raw texts. **\n\n#### The model is the following one :\n* GloVe Embedding\n* Bidirectional GRU\n* Attention \n* Dense \n\nI did not bother tunning it because it is good enough to highlight the point I'm trying to make\n\n\n#### Feel free to give any feedback, it is always appreciated. (plz upvote !)","b1c7b8ba":" ## Attention Layer\n> Code from Khoi Ngyuen, check here : https:\/\/www.kaggle.com\/suicaokhoailang\/lstm-attention-baseline-0-652-lb","00842e84":"Harder to understand, but much simpler !","724fe61c":"## Train\/Test split","b96b5957":"## Making model","5ed22915":"### Tweaking threshold"}}