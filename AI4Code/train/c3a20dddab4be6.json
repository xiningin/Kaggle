{"cell_type":{"0f1b7c8a":"code","2bc7a93c":"code","d02755a6":"code","dfb3a2cf":"code","d829f9b7":"code","77bfc16e":"code","7884831c":"code","1b81e0d2":"code","9e792ccf":"code","9ccfb3da":"code","ad789354":"code","760f8e62":"code","1ee6be91":"code","4bce19de":"code","6024b216":"code","63f6a95e":"code","098bc715":"code","5d21d96e":"code","ea928035":"code","392409bf":"code","203ba047":"code","47573af7":"code","bdfa02f7":"code","b68070a0":"code","17610d42":"code","2193709c":"code","c941d0e8":"code","afcec929":"code","a43e3cae":"code","7bf56b24":"code","5f45181f":"code","89da85ed":"markdown","1df00dfe":"markdown","bacfacf6":"markdown","4dd6dd01":"markdown","7dfe6a8f":"markdown","226e9ace":"markdown","ec515b88":"markdown","767a4e05":"markdown","03b460af":"markdown","75491628":"markdown","fe112b19":"markdown","07203f12":"markdown","07995993":"markdown","4226cdf5":"markdown","f62bcce5":"markdown","e4794229":"markdown","15a495a6":"markdown"},"source":{"0f1b7c8a":"import pandas as pd\nimport pydicom as dicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom ast import literal_eval\nimport os\nimport glob\nimport seaborn as sns\nsns.set_style(\"whitegrid\")","2bc7a93c":"voi_lut=True\nfix_monochrome=True\n\ndef dicom_dataset_to_dict(filename):\n    \"\"\"Credit: https:\/\/github.com\/pydicom\/pydicom\/issues\/319\n               https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n    \"\"\"\n    \n    dicom_header = dicom.dcmread(filename) \n    \n    #====== DICOM FILE DATA ======\n    dicom_dict = {}\n    repr(dicom_header)\n    for dicom_value in dicom_header.values():\n        if dicom_value.tag == (0x7fe0, 0x0010):\n            #discard pixel data\n            continue\n        if type(dicom_value.value) == dicom.dataset.Dataset:\n            dicom_dict[dicom_value.name] = dicom_dataset_to_dict(dicom_value.value)\n        else:\n            v = _convert_value(dicom_value.value)\n            dicom_dict[dicom_value.name] = v\n      \n    del dicom_dict['Pixel Representation']\n    \n    #====== DICOM IMAGE DATA ======\n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom_header.pixel_array, dicom_header)\n    else:\n        data = dicom_header.pixel_array\n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom_header.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    modified_image_data = (data * 255).astype(np.uint8)\n    \n    return dicom_dict, modified_image_data\n\ndef _sanitise_unicode(s):\n    return s.replace(u\"\\u0000\", \"\").strip()\n\ndef _convert_value(v):\n    t = type(v)\n    if t in (list, int, float):\n        cv = v\n    elif t == str:\n        cv = _sanitise_unicode(v)\n    elif t == bytes:\n        s = v.decode('ascii', 'replace')\n        cv = _sanitise_unicode(s)\n    elif t == dicom.valuerep.DSfloat:\n        cv = float(v)\n    elif t == dicom.valuerep.IS:\n        cv = int(v)\n    else:\n        cv = repr(v)\n    return cv","d02755a6":"train_image_level = pd.read_csv('..\/input\/siim-covid19-detection\/train_image_level.csv')\ntrain_study_level =  pd.read_csv('..\/input\/siim-covid19-detection\/train_study_level.csv')","dfb3a2cf":"train_image_level.head()","d829f9b7":"train_study_level.head()","77bfc16e":"train_image_level.isna().sum()","7884831c":"train_study_level.isna().sum()","1b81e0d2":"train_study_level['StudyInstanceUID'] = train_study_level['id'].apply(lambda x : x.split('_')[0])\ntrain_study_level = train_study_level.drop('id',axis=1)","9e792ccf":"result = pd.merge(train_image_level, train_study_level, on=\"StudyInstanceUID\")","9ccfb3da":"result.head()","ad789354":"labels = result[['Negative for Pneumonia', 'Typical Appearance',\n                 'Indeterminate Appearance', 'Atypical Appearance']]\n\nresult['category'] = labels.apply(lambda x: x[x==1].index.values[0], axis=1)\n\nresult.drop(['Negative for Pneumonia', 'Typical Appearance',\n             'Indeterminate Appearance', 'Atypical Appearance','label'],\n           axis=1, inplace=True)","760f8e62":"result['boxes'] = result['boxes'].fillna(0)","1ee6be91":"nans = result[result['boxes']==0]","4bce19de":"result['boxes'] = result['boxes'].apply(lambda x: literal_eval(x) if x != 0 else [{'x':0,'y':0,'width':0,'height':0}])","6024b216":"fig, ax = plt.subplots(figsize=(10,4))\nsns.countplot(x='category', data=nans, ax=ax)\nax.set_title('Total Count of NaN per Category')\nplt.show()","63f6a95e":"training_paths = []\ntrain_directory = '..\/input\/siim-covid19-detection\/train'\n\nfor UID in result['StudyInstanceUID']:\n    training_paths.append(glob.glob(os.path.join(train_directory, UID +\"\/*\/*\"))[0])\n\nresult['path'] = training_paths","098bc715":"result.head()","5d21d96e":"fig, ax = plt.subplots(figsize=(10,4))\nsns.countplot(x='category', data=result, ax=ax)\nax.set_title('Total Count of Categories')\nplt.show()","ea928035":"def visualize_image(sample):\n\n    df, img_array = dicom_dataset_to_dict(sample['path'])\n\n    fig, ax = plt.subplots(figsize=(8,8))\n    ax.imshow(img_array, cmap='jet')\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n    for i,location in enumerate(sample.boxes):\n\n        rect = patches.Rectangle((location['x'], location['y']),\n                                 location['width'], location['height'],\n                                 linewidth=1, edgecolor='k',\n                                 facecolor='none')\n        ax.add_patch(rect)\n    \n    ax.set_title(f'ID: {sample.id} Label: {sample.category}')\n    plt.show()\n    ","392409bf":"sample = result.iloc[1]\nvisualize_image(sample)","203ba047":"sample = result.iloc[6]\nvisualize_image(sample)","47573af7":"sample = result.iloc[27]\nvisualize_image(sample)","bdfa02f7":"sample = result.iloc[0]\nvisualize_image(sample)","b68070a0":"sample = result.iloc[2]\nvisualize_image(sample)","17610d42":"sample = result.iloc[4]\nvisualize_image(sample)","2193709c":"sample = result.iloc[5]\nvisualize_image(sample)","c941d0e8":"sample = result.iloc[18]\nvisualize_image(sample)","afcec929":"sample = result.iloc[40]\nvisualize_image(sample)","a43e3cae":"sample = result.iloc[3]\nvisualize_image(sample)","7bf56b24":"sample = result.iloc[46]\nvisualize_image(sample)","5f45181f":"sample = result.iloc[53]\nvisualize_image(sample)","89da85ed":"## Checking for NaN","1df00dfe":"## Get Image Directory","bacfacf6":"## Indeterminate Appearance","4dd6dd01":"## Atypical Appearance","7dfe6a8f":"## Creating a Categorical Column","226e9ace":"## Fill NaN","ec515b88":"## Merge ","767a4e05":"## Typical Appearance","03b460af":"# EDA","75491628":"## Categories","fe112b19":"**Work in Progress**","07203f12":"## Negative for Pneumonia","07995993":"# Load data","4226cdf5":"## Visualizations","f62bcce5":"Need to deal with unbalanced dataset","e4794229":"**In this competition, we are identifying and localizing COVID-19 abnormalities on chest radiographs. This is an object detection and classification problem.**","15a495a6":"# SIIM-FISABIO-RSNA COVID-19 Detection\n### Identify and localize COVID-19 abnormalities on chest radiographs"}}