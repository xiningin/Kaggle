{"cell_type":{"3a9055b6":"code","bbebd3a1":"code","d16d70a9":"code","459c9fc0":"code","19ad9f11":"code","16f721f2":"code","6bfbf6dc":"code","dfeb5610":"code","48ad36a0":"code","e2f62576":"code","cac988c1":"code","74cdea9f":"code","4bb3b791":"code","fb7913a5":"code","76e355d6":"code","b0fb69eb":"code","ab37bc93":"code","09eecf1d":"code","87c0ef18":"code","3742fc0c":"code","b2f695ba":"code","dd20d143":"code","58c41714":"code","962c9db8":"code","90ac33bd":"code","1ddc797c":"code","949fcdfd":"code","b15314c9":"code","93287072":"code","8bc0b189":"code","79fa8792":"code","8894f27b":"code","eb840696":"code","0492c0d0":"code","6f95fc8e":"code","30684653":"code","8b0c393e":"code","32a9bb9f":"markdown","8de2eab0":"markdown","bd47d2ec":"markdown","96b40d05":"markdown","595914db":"markdown","dc72b4b6":"markdown","129cff10":"markdown","80c748d0":"markdown","defe52f6":"markdown","52f31135":"markdown"},"source":{"3a9055b6":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","bbebd3a1":"import numpy as np\nimport pandas as pd\nimport os\n\nfrom fastai.conv_learner import *","d16d70a9":"# make sure CUDA is available and enabled\nprint(torch.cuda.is_available(), torch.backends.cudnn.enabled)","459c9fc0":"comp_name = \"dog_breed\"\ninput_path = \"..\/input\/\"\nwd = \"\/kaggle\/working\/\"","19ad9f11":"def create_symlnk(src_dir, src_name, dst_name, dst_dir=wd, target_is_dir=False):\n    \"\"\"\n    If symbolic link does not already exist, create it by pointing dst_dir\/lnk_name to src_dir\/lnk_name\n    \"\"\"\n    if not os.path.exists(dst_dir + dst_name):\n        os.symlink(src=src_dir + src_name, dst = dst_dir + dst_name, target_is_directory=target_is_dir)","16f721f2":"def clean_up(wd=wd):\n    \"\"\"\n    Delete all temporary directories and symlinks in working directory (wd)\n    \"\"\"\n    for root, dirs, files in os.walk(wd):\n        try:\n            for d in dirs:\n                if os.path.islink(d):\n                    os.unlink(d)\n                else:\n                    shutil.rmtree(d)\n            for f in files:\n                if os.path.islink(f):\n                    os.unlink(f)\n                else:\n                    print(f)\n        except FileNotFoundError as e:\n            print(e)","6bfbf6dc":"create_symlnk(input_path, \"train\", \"train\", target_is_dir=True)\ncreate_symlnk(input_path, \"test\", \"test\", target_is_dir=True)\ncreate_symlnk(input_path, \"labels.csv\", \"labels.csv\")","dfeb5610":"# perform sanity check\n!ls -alh","48ad36a0":"label_df = pd.read_csv(f\"{wd}labels.csv\")","e2f62576":"label_df.head()","cac988c1":"label_df.shape","74cdea9f":"label_df.pivot_table(index=\"breed\", aggfunc=len).sort_values(\"id\", ascending=False)","4bb3b791":"# create validation dataset\nval_idxs = get_cv_idxs(label_df.shape[0])","fb7913a5":"# define architecture\narch = resnet34\nsz = 224\nbs = 64","76e355d6":"# load data\ntfms = tfms_from_model(arch, sz, aug_tfms=transforms_side_on, max_zoom=1.1)\ndata = ImageClassifierData.from_csv(path=wd, folder=\"train\", csv_fname=f\"{wd}labels.csv\", tfms=tfms, val_idxs=val_idxs, suffix=\".jpg\", test_name=\"test\")","b0fb69eb":"[print(len(e)) for e in [data.trn_ds, data.val_ds, data.test_ds]]","ab37bc93":"# look at an actual image\nfn = wd + data.trn_ds.fnames[-1]\nimg = PIL.Image.open(fn); img","09eecf1d":"img.size","87c0ef18":"def get_data(sz=sz, bs=bs, data=data):\n    \"\"\"\n    Load images via fastai's ImageClassifierData.from_csv() object defined as 'data' before\n    Return images if size bigger than 300 pixels, else resize to 340 pixels\n    \"\"\"\n    return data if sz > 300 else data.resize(340, new_path=wd)","3742fc0c":"data = get_data()","b2f695ba":"learn = ConvLearner.pretrained(arch, data, precompute=True)","dd20d143":"lrf = learn.lr_find()","58c41714":"learn.sched.plot()","962c9db8":"# fit baseline model without data augmentation\nlearn.fit(1e-1, 2)","90ac33bd":"# disable precompute and fit model with data augmentation\nlearn.precompute=False\nlearn.fit(1e-1, 5, cycle_len=1)","1ddc797c":"#learn.save(\"224_pre\")","949fcdfd":"#learn.load(\"224_pre\")","b15314c9":"learn.set_data(get_data(299, bs))","93287072":"learn.fit(1e-1, 3, cycle_len=1)","8bc0b189":"from sklearn.metrics import log_loss\n\nlog_preds, y = learn.TTA()\nprobs = np.mean(np.exp(log_preds), 0)\naccuracy_np(probs, y), log_loss(y, probs)","79fa8792":"#learn.save(\"299_pre\")","8894f27b":"#learn.load(\"299_pre\")","eb840696":"log_preds_test, y_test = learn.TTA(is_test=True)\nprobs_test = np.mean(np.exp(log_preds_test), 0)","0492c0d0":"df = pd.DataFrame(probs_test)\ndf.columns = data.classes","6f95fc8e":"# insert clean ids - without folder prefix and .jpg suffix - of images as first column\ndf.insert(0, \"id\", [e[5:-4] for e in data.test_ds.fnames])","30684653":"df.to_csv(f\"sub_{comp_name}_{str(arch.__name__)}.csv\", index=False)","8b0c393e":"clean_up()","32a9bb9f":"# About\nThis kernel applies the techniques from [fastai's deep learning for coders](http:\/\/course.fast.ai) course to the dogbreed dataset\n\nThe resulting Kaggle score is 0.34460 which translates to roughly 531th position on the leaderboard.","8de2eab0":"# Exploration","bd47d2ec":"# Setup","96b40d05":"## Prediction on test set","595914db":"## Helper functions to deal with Kaggle's file system limitations","dc72b4b6":"## Baseline","129cff10":"# Submission","80c748d0":"# Preprocess data","defe52f6":"# Model","52f31135":"## Model with increased image size"}}