{"cell_type":{"8ae16ce2":"code","7dc12d64":"code","599aaeda":"code","a7cfa088":"code","58ef34cd":"code","c698f20f":"code","8cdf0ae3":"code","99901d20":"code","b92bfe44":"code","21a3354c":"code","59f8e759":"code","64876cf1":"markdown","550a3cfa":"markdown","3d28222b":"markdown","b1844aa7":"markdown","430d20fe":"markdown","3185f8a5":"markdown","8c5c4dcc":"markdown"},"source":{"8ae16ce2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7dc12d64":"import torch\nimport torch.nn as nn\nimport pandas as pd\nimport numpy as np\nimport random\nimport math\nfrom sklearn.preprocessing import MinMaxScaler\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nif device == 'cuda':\n  torch.cuda.manual_seed_all(111)","599aaeda":"train = pd.read_csv('..\/input\/fired-area-prediction\/forestfires_train.csv')\n\ntrain","a7cfa088":"train.drop('rain', axis=1, inplace=True) #delete rain column\n\ntrain","58ef34cd":"xtrain = train.loc[:, [i for i in train.keys()[4:-1]]]\nytrain = train[train.keys()[-1]]\n\nxtrain = np.array(xtrain)\nytrain = np.array(ytrain).reshape(-1,1)\n\nscaler = MinMaxScaler()\nxtrain = scaler.fit_transform(xtrain) #normalization\n\nxtrain = torch.FloatTensor(xtrain).to(device)\nytrain = torch.FloatTensor(ytrain).to(device)","c698f20f":"xtrain #scaler result","8cdf0ae3":"ytrain.min()","99901d20":"ytrain.max()","b92bfe44":"for i in range(len(ytrain)): #area <- ln(x+1) transform\n  ytrain[i] = math.log(ytrain[i]+1)\n\nytrain #ln(x+1) transform result","21a3354c":"#random seed\ntorch.manual_seed(1)\nrandom.seed(1)\n\n#hidden layer\nlin1 = nn.Linear(7,4)\nlin2 = nn.Linear(4,1)\n\nnn.init.xavier_uniform_(lin1.weight)\nnn.init.xavier_uniform_(lin2.weight)\n\nrelu = nn.ReLU()\ndropout = nn.Dropout(p = 0.3) #prevent overfitting\n\n#model\nmodel = nn.Sequential(lin1, relu, dropout,\n                      lin2).to(device)\n\nepochs = 15000\nlr = 1e-4\n\nloss = nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr = lr)\n\nfor epoch in range(epochs+1):\n  H = model(xtrain)\n  cost = loss(H, ytrain)\n\n  optimizer.zero_grad()\n  cost.backward()\n  optimizer.step()\n\n  if epoch % 1000 == 0:\n    print('Epoch:', '%05d'%epoch, 'Cost: {:.5f}'.format(cost.item()))\n\nprint('Finished')","59f8e759":"test = pd.read_csv('..\/input\/fired-area-prediction\/forestfires_test.csv')\ntest.drop('rain', axis=1, inplace=True) #delete rain column\n\nxtest = test.loc[:, [i for i in test.keys()[4:]]]\nxtest = np.array(xtest)\n\nxtest = scaler.transform(xtest)\nxtest = torch.from_numpy(xtest).float().to(device)\n\nH = model(xtest)\n\n#inverse ln(x+1) transform\nfor i in range(len(H)):\n  H[i] = torch.exp(H[i]) - 1\n\npredic = H.cpu().detach().numpy().reshape(-1,1)\n\nsubmit = pd.read_csv('..\/input\/fired-area-prediction\/forestfires_submission.csv')\nfor i in range(len(submit)):\n  submit['prediction'][i] = predic[i]\n\nsubmit","64876cf1":"\ud559\uc2b5 \ucd08\ubc18\uc5d0 \ub85c\uadf8 \ubcc0\ud658\ud588\uae30 \ub54c\ubb38\uc5d0 \ud559\uc2b5 \uc774\ud6c4\uc5d0\ub294 \uc608\uce21\uac12\uc744 \uc5ed\ub85c\uadf8 \ubcc0\ud658\ud574\uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\ntrain \ub370\uc774\ud130\ub97c \ub85c\uadf8 \ubcc0\ud658\ud558\uc9c0 \uc54a\uc558\uc744 \uacbd\uc6b0\uc5d0\ub294 cost\uc758 \uac12\uc774 \uc57d 20\uc774\uc5c8\ub294\ub370, \uc801\uc6a9\ud55c \uc774\ud6c4\uc5d0\ub294 \uc57d 1.9\uc815\ub3c4\ub85c \uc544\uc8fc \uc791\uc544\uc9c4 \uac83\uc744 \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4.","550a3cfa":"\ub610\ud55c ytrain, \uc989 area\uc758 \ub370\uc774\ud130 \ucd5c\uc19f\uac12\uc740 0, \ucd5c\ub313\uac12\uc740 1090\uc73c\ub85c \ubd84\ud3ec\uac00 \ub113\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc815\ub9ac\ud558\uae30 \uc704\ud574 \ub85c\uadf8 \ubcc0\ud658\uc744 \ud574\uc8fc\uaca0\uc2b5\ub2c8\ub2e4.","3d28222b":"\ucd1d 499\uac1c\uc758 \ub370\uc774\ud130\uc774\uba70 \ub204\ub77d\ub41c \uc815\ubcf4\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.\n\nfeature\uc758 \uac12\uc758 \ubd84\ud3ec\uac00 \ub2e4\uc591\ud55c \uac83\uc73c\ub85c \ubcf4\uc544 \ub370\uc774\ud130 \uc815\uaddc\ud654\uac00 \ud544\uc694\ud568\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\nX,Y(\ud654\uc7ac \uc704\uce58)\uc640 \ub354\ubd88\uc5b4 month, day(\ud654\uc7ac \ubc1c\uc0dd \uc6d4,\uc77c)\ub294 \uc18c\uc2e4 \uba74\uc801\uacfc \uad00\ub828\uc774 \uc5c6\uc744 \uac83\uc73c\ub85c \uc0dd\uac01\ub418\uc5b4 \ud559\uc2b5\uc5d0\uc11c \uc81c\uc678\ud569\ub2c8\ub2e4.","b1844aa7":"\ub370\uc774\ud130\uc758 \uc591\uc774 \uc801\uc740 \ud3b8\uc774\uae30 \ub54c\ubb38\uc5d0 \uacfc\uc801\ud569\uc758 \uc704\ud5d8\uc774 \ud07d\ub2c8\ub2e4. \ub530\ub77c\uc11c hidden layer\uc758 \uc218\ub97c \uc904\uc774\uace0 dropout\ub3c4 \uc801\uc6a9\ud569\ub2c8\ub2e4.","430d20fe":"\uc704\uc5d0\uc11c \uc5b8\uae09\ud588\ub4ef\uc774 xtrain\uc744 \uc815\uaddc\ud654\ud569\ub2c8\ub2e4.","3185f8a5":"rain\uc5f4\uc758 \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubcf4\uc558\uc744 \ub54c, \ub300\ubd80\ubd84\uc758 \uac12\uc774 0\uc778 \uac83\uc744 \ud655\uc778\ud588\uace0 \ud559\uc2b5\uc5d0 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \ubabb \ud560\uac70\ub77c \ud310\ub2e8\ub418\uc5b4 \uc774 \uc5ed\uc2dc \ud559\uc2b5\uc5d0\uc11c \uc81c\uc678\ud569\ub2c8\ub2e4.","8c5c4dcc":"-------------------------------------------------------------------------------------"}}