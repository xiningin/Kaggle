{"cell_type":{"b9b561a7":"code","ee7cb96f":"code","3c2a2ca7":"code","d5d0bb83":"code","c51547a0":"code","7e228db0":"code","d7316b76":"code","88c3b5dd":"code","26d7147e":"code","78db1a56":"code","cd96f0b2":"code","c1d60c5e":"markdown","18b78c13":"markdown","f28d1993":"markdown"},"source":{"b9b561a7":"import pandas as pd\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom lightgbm import LGBMClassifier\n\nfrom sklearn.metrics import roc_auc_score","ee7cb96f":"data_train = pd.read_csv('..\/input\/ozonmasters-ml2-2020-c1\/1_data\/train_data.csv')\ntarget_train = pd.read_csv('..\/input\/ozonmasters-ml2-2020-c1\/1_data\/train_target.csv')\ndata_train['target'] = target_train\n\ndata_test = pd.read_csv('..\/input\/ozonmasters-ml2-2020-c1\/1_data\/test_data.csv')","3c2a2ca7":"def add_features(data_train, data_test):\n    for data in [data_train, data_test]:\n        data['is_dist'] = (data['dist'] == -1).astype(float)\n        \n        # add tmp features\n        data.loc[:,'time_as_str'] = data['due'].apply(lambda x: x[x.find(' ') + 1:-4])\n        data.loc[:, 'date_as_str'] = data['due'].apply(lambda x: x[:x.find(' ')])\n        \n        # add date features\n        data_date_structure = pd.to_datetime(data['date_as_str'])\n        data.loc[:, 'week_day'] = data_date_structure.dt.dayofweek\n        \n        # add time features\n        data.loc[:, 'time_in_seconds'] = pd.to_timedelta(data['time_as_str']).dt.total_seconds()\n        data.loc[:, 'time_in_minutes'] = data['time_in_seconds'] \/\/ 60\n        data.loc[:, 'time_in_hours'] = data['time_in_minutes'] \/\/ 60\n        \n        # fillna for cat features\n        data.fillna({\n            'f_class': 'unknown_f',\n            's_class': 'unknown_s',\n            't_class': 'unknown_t',\n        }, inplace=True)\n        \n        # drop tmp features\n        data.drop(['due', 'time_as_str', 'date_as_str'], axis=1, inplace=True)\n    \n    for column in ['f_class', 's_class', 't_class', 'week_day']:\n        data_train[column] = data_train[column].astype('category')\n        data_test[column] = data_test[column].astype('category')\n        data_test[column] = (\n            data_test[column]\n            .cat\n            .set_categories(data_train[column].cat.categories)\n        )\n    \n    data_train = pd.get_dummies(data_train)\n    data_test = pd.get_dummies(data_test)\n    \n    return data_train, data_test","d5d0bb83":"data_train, data_test = add_features(data_train, data_test)","c51547a0":"data_train.head()","7e228db0":"data_test.head()","d7316b76":"feature_columns = data_train.columns.tolist()\nfeature_columns.pop(feature_columns.index('target'))\n\ntarget_column = ['target']","88c3b5dd":"data_train[feature_columns].dtypes","26d7147e":"clf = LGBMClassifier(n_estimators=1577, learning_rate=0.05, num_leaves=63, max_depth=5)\nclf.fit(\n    data_train[feature_columns], data_train[target_column].values.ravel(),\n    eval_metric='auc',\n    verbose=True,\n)\n\npredictions = clf.predict_proba(data_test[feature_columns])","78db1a56":"prediction_df = pd.DataFrame(predictions[:, 1], columns=['target'])\nprediction_df = prediction_df.reset_index()","cd96f0b2":"prediction_df.to_csv('first_baseline.csv', index=0)","c1d60c5e":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\n    \n* \u0434\u0435\u043b\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438\n* \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","18b78c13":"\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435:","f28d1993":"# BASELINE 1\n"}}