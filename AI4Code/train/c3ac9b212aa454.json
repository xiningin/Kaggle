{"cell_type":{"03d7cc23":"code","ff98dd1e":"code","64776ee4":"code","0e465109":"code","26b9dc8b":"code","f6eab785":"code","0de66a63":"code","51d117a3":"code","610481c8":"code","5e43149d":"code","47efb5e6":"code","12c2bcf4":"code","c6714360":"code","908bb1ab":"code","426db275":"code","e2d54049":"code","10c07e37":"code","02b7263c":"code","2941be69":"markdown","848595a6":"markdown","9122e58a":"markdown","0fa08896":"markdown"},"source":{"03d7cc23":"# Importing packages\n\nimport numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom urllib.request import urlopen\nfrom PIL import Image\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ff98dd1e":"# Reading data\ndata = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv')\n\n# First 5 rows\ndata.head().style.applymap(lambda x : \"background-color: #bff9ff\")\\\n.set_table_styles([{'selector' : '', 'props' : [('border', '2px solid black')]}])","64776ee4":"# Dropping column row_id\ndata = data.drop('row_id', axis=1)\ndata.head()\n\n# Changing data to datetime datatype\ndata.date = pd.to_datetime(data.date)\ndata.date.dtype","0e465109":"img = Image.open(urlopen(\"https:\/\/i.postimg.cc\/T12gm2B5\/g-crypto-analysis.png\"))\nimg","26b9dc8b":"def EDA(df):\n    \n    print('\\033[1m' +'EXPLORATORY DATA ANALYSIS :'+ '\\033[0m\\n')\n    print('\\033[1m' + 'Shape of the data (rows, columns):' + '\\033[0m')\n    print(df.shape, \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'All columns from the dataframe :' + '\\033[0m')\n    print(df.columns, \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'Datatpes and Missing values:' + '\\033[0m')\n    print(df.info(), \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    for col in df.columns:\n        if df[col].dtype == 'object':\n            print('\\033[1m' + 'Total Unique values in {} :'.format(col) + '\\033[0m',len(data[col].unique()))\n            print('\\t\\033[1m' + 'Categories in {} :'.format(col) + '\\033[0m', data[col].unique())\n    print('\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'Summary statistics for the data :' + '\\033[0m')\n    print(df.describe(include='all'), \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n        \n    print('\\033[1m' + 'Memory used by the data :' + '\\033[0m')\n    print(df.memory_usage(), \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'Number of duplicate values :' + '\\033[0m')\n    print(df.duplicated().sum())\n          \nEDA(data)","f6eab785":"img = Image.open(urlopen(\"https:\/\/i.postimg.cc\/jSR2Sk0C\/g-crypto-analysis-1.png\"))\nimg","0de66a63":"prop = pd.DataFrame(data.groupby('product')['num_sold'].sum()).reset_index()\n\nprop.num_sold = prop.num_sold\/prop.num_sold.sum()\nprop.style.applymap(lambda x : \"background-color: #bff9ff\")\\\n.set_table_styles([{'selector' : '', 'props' : [('border', '2px solid black')]}])\n","51d117a3":"fig = go.Figure()\n\nfig.add_trace(go.Pie(\n             values = prop['num_sold'],\n             labels = prop['product'],\n             title = dict(text = 'Distribution of<br>Kaggle Products<br>Sales',\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',))\n\nfig.update_traces(hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Blues').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/Yq0yfkFY\/k-1.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.82, y=0.9,\n        sizex=0.3, sizey=0.3,\n        xanchor=\"left\", yanchor=\"top\"\n    )\n)\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/NFpSGjHf\/k.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.05, y=0.9,\n        sizex=0.3, sizey=0.3,\n        xanchor=\"left\", yanchor=\"top\"\n    )\n)\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/P583942q\/k-2.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.255, y=0.05,\n        sizex=0.3, sizey=0.3,\n        xanchor=\"center\", yanchor=\"top\"\n    )\n)\n              \n\n#fig.update_layout(margin=dict(t=0, b=0, l=0, r=0))\n\nfig.show()","610481c8":"img = Image.open(urlopen(\"https:\/\/i.postimg.cc\/c4bksP8B\/g-crypto-analysis-2.png\"))\nimg","5e43149d":"norway  = data[data.country == 'Norway']\nnorway  = pd.DataFrame(norway.groupby('product')['num_sold'].sum()).reset_index()\n\nfinland = data[data.country == 'Finland']\nfinland = pd.DataFrame(finland.groupby('product')['num_sold'].sum()).reset_index()\n\nsweden  = data[data.country == 'Sweden']\nsweden  = pd.DataFrame(sweden.groupby('product')['num_sold'].sum()).reset_index()","47efb5e6":"display('Sweden', sweden.style.applymap(lambda x : \"background-color: #bff9ff\")\\\n.set_table_styles([{'selector' : '', 'props' : [('border', '2px solid black')]}]))\n\ndisplay('Norway', norway.style.applymap(lambda x : \"background-color: #bff9ff\")\\\n.set_table_styles([{'selector' : '', 'props' : [('border', '2px solid black')]}]))\n\ndisplay('Finland', finland.style.applymap(lambda x : \"background-color: #bff9ff\")\\\n.set_table_styles([{'selector' : '', 'props' : [('border', '2px solid black')]}]))","12c2bcf4":"fig = make_subplots(rows=3, cols=1,\n                    specs=[[{'type':'domain'}],[{'type':'domain'}],[{'type':'domain'}]],\n                    vertical_spacing = 0.1)\n\nfig.add_trace(go.Pie(\n             values = norway['num_sold'],\n             labels = norway['product'],\n             title = dict(text = 'Distribution of<br>Kaggle Products<br>sales in Norway',\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),1,1)\n\nfig.add_trace(go.Pie(\n             values = finland['num_sold'],\n             labels = finland['product'],\n             title = dict(text = 'Distribution of<br>Kaggle Products<br>sales in Finland',\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),2,1)\n\nfig.add_trace(go.Pie(\n             values = sweden['num_sold'],\n             labels = sweden['product'],\n             title = dict(text = 'Distribution of<br>Kaggle Products<br>sales in Sweden',\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),3,1)\n\nfig.update_traces(row=1, col=1, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Reds').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.update_traces(row=2, col=1, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Blues').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.update_traces(row=3, col=1, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Wistia').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/mZ8B9tGT\/image.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.05, y=0.92, opacity = 0.8,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"left\", yanchor=\"top\"\n    )\n)\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/wv9Yydft\/image.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.05, y=0.55, opacity = 0.8,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"left\", yanchor=\"top\"\n    )\n)\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/T27vwFrw\/image.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.05, y=0.18, opacity = 0.8,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"left\", yanchor=\"top\"\n    )\n)\n\nfig.update_layout(margin=dict(t=0, b=0, l=0, r=0),\n                  paper_bgcolor = '#d5eff0',\n                  height = 1200,\n                  font_family   = 'monospace',)","c6714360":"img = Image.open(urlopen(\"https:\/\/i.postimg.cc\/NfsLgzwF\/g-crypto-analysis-3.png\"))\nimg","908bb1ab":"sold = pd.DataFrame(data.groupby('country')['num_sold'].sum()).reset_index()\n\nsold.style.applymap(lambda x : \"background-color: #bff9ff\")\\\n.set_table_styles([{'selector' : '', 'props' : [('border', '2px solid black')]}])","426db275":"fig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = sold['country'],\n    y = sold['num_sold'],\n    text = sold['num_sold'],\n    textposition = 'outside',\n    marker_color= ['#2d8fb5', '#eb8f8f', '#ebe88f'],\n))\n\nfig.update_xaxes(\n        tickfont = dict(size=15),\n        tickmode = 'array',\n        ticklen = 6,\n        showline = False,\n        showgrid = False,\n        ticks = 'outside')\n\nfig.update_yaxes(showgrid=False,\n                 categoryorder='total ascending',\n                 showline=False)\n\nfig.update_layout(\n                  font_family   = 'monospace',\n                  title         = dict(text = 'Total units sold by Country', x = 0.525),\n                  margin        = dict(t=80, b=0, l=70, r=40),\n                  plot_bgcolor  = '#d5eff0',\n                  paper_bgcolor = '#d5eff0',\n                  font          = dict(color='black'),\n                  showlegend    = False)\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/mZ8B9tGT\/image.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.465, y=0.1, opacity = 0.3,\n        sizex=0.1, sizey=0.1,\n        xanchor=\"left\", yanchor=\"top\"\n    )\n)\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/wv9Yydft\/image.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.1, y=0.1, opacity = 0.3,\n        sizex=0.12, sizey=0.1,\n        xanchor=\"left\", yanchor=\"top\"\n    )\n)\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/T27vwFrw\/image.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.78, y=0.1, opacity = 0.3,\n        sizex=0.1, sizey=0.1,\n        xanchor=\"left\", yanchor=\"top\"\n    )\n)\n\nfig.show()","e2d54049":"norway  = data[data.country == 'Norway']\nfinland = data[data.country == 'Finland']\nsweden  = data[data.country == 'Sweden']\ndf_list = [norway, finland, sweden]\n\ncountry_names = ['Norway', 'Finland', 'Sweden']\nproduct_names = ['Hat', 'Mug', 'Sticker']","10c07e37":"date_buttons = [\n{'count':  4, 'step': \"year\", 'stepmode': \"todate\", 'label': \"Year\"},\n{'count':  6, 'step': \"month\", 'stepmode': \"todate\", 'label': \"Month\"},\n{'count': 60, 'step': \"day\", 'stepmode': \"todate\", 'label': \"Week\"},\n{'count': 20, 'step': \"day\", 'stepmode': \"todate\", 'label': \"Day\"},\n               ]\n\n\nbuttons = []\ni = 0\nvis = [False] * 3\n\nfor df in df_list:\n    vis[i] = True\n    buttons.append({ 'label' : country_names[i],\n                     'method' : 'update',\n                     'args'   : [{'visible' : vis},\n                                 {'title'  : country_names[i] + ' sales'}] })\n    i+=1\n    vis = [False] * 3\n\nfig = make_subplots(rows=3, cols=1, shared_xaxes=True, \n                    vertical_spacing=0.02, subplot_titles=('Hat', 'Mug', 'Sticker'),\n                    row_width=[0.34, 0.33, 0.33])\n\nfor df in df_list:\n    fig.add_trace(go.Scatter(x = df[df['product'] == 'Kaggle Hat']['date'],\n                             y = df[df['product'] == 'Kaggle Hat']['num_sold'],\n                             name = 'Kaggle Hat',\n                             mode = 'lines',\n                             marker =  dict(color = '#5d755d')), row=1, col=1)\n    \n\n    fig.add_trace(go.Scatter(x = df[df['product'] == 'Kaggle Mug']['date'],\n                             y = df[df['product'] == 'Kaggle Mug']['num_sold'],\n                             name = 'Kaggle Mug',\n                             mode = 'lines',\n                             marker =  dict(color = '#c7847f')), row=2, col=1)\n    \n  \n    fig.add_trace(go.Scatter(x = df[df['product'] == 'Kaggle Sticker']['date'],\n                             y = df[df['product'] == 'Kaggle Sticker']['num_sold'],\n                             name = 'Kaggle Sticker',\n                             mode = 'lines',\n                             marker =  dict(color = '#2d8fb5')), row=3, col=1)\n    \nfig.update_xaxes(\n        tickfont = dict(size=15),\n        tickmode = 'array',\n        ticklen = 6,\n        showline = False,\n        showgrid = False,\n        ticks = 'outside')\n\nfig.update_yaxes(showgrid=False,\n                 showline=False)\n\nfig.update_layout(showlegend = True,\n                  height = 900,\n                  font_family   = 'monospace',\n                  xaxis         = dict(rangeselector = dict(buttons = date_buttons)),\n                  updatemenus   = [dict(type = 'dropdown',\n                                        x = 0.9,\n                                        y = 1.1,\n                                        showactive = True,\n                                        active = 0,\n                                        buttons = buttons)],\n                  title         = dict(text = 'Product sales over Countries', \n                                       x = 0.5),\n                  plot_bgcolor  = '#d5eff0',\n                  paper_bgcolor = '#d5eff0',\n                  annotations   = [dict(text = \"<---Choose Country\",\n                                        font = dict(size = 15, color='#ff665e'),\n                                        showarrow=False,\n                                        x = 1, y = 1.07,\n                                        xref = 'paper', yref = \"paper\",\n                                        align = \"left\"),\n                                  dict(text = \"Choose time rage :\",\n                                        font = dict(size = 15, color='#ff665e'),\n                                        showarrow=False,\n                                        x = 0.1, y = 1.05,\n                                        xref = 'paper', yref = \"paper\",\n                                        align = \"left\")])\n\nfor i in range(0,9):\n    fig.data[i].visible = False\n\nfig.data[0].visible = True\nfig.data[1].visible = True\nfig.data[2].visible = True\n\nfig.show()","02b7263c":"img = Image.open(urlopen(\"https:\/\/i.postimg.cc\/gk7wNHf0\/g-crypto-analysis-4.png\"))\nimg","2941be69":"***Sales by time***","848595a6":"<div align=\"center\">\n  <img width=\"1080\"  src=\"https:\/\/i.postimg.cc\/fRcWc117\/g-crypto-analysis.gif\">\n<\/div>","9122e58a":"***About the data***\n\n| Column      | Description |\n| ----------- | ----------- |\n| row_id | unique id for rows |\n| date | date for the row |\n| country | Country among ['Finland' 'Norway' 'Sweden'] |\n| store | ['KaggleMart' 'KaggleRama'] |\n| product | ['Kaggle Mug' 'Kaggle Hat' 'Kaggle Sticker'] |\n| num_sold | Units sold for the product |","0fa08896":" ***Part 2*** : Predictive analysis :  LSTM PyTorch\n  [https:\/\/www.kaggle.com\/toomuchsauce\/tps-jan-part-2-lstm-pytorch] "}}