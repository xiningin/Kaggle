{"cell_type":{"fddf9cc4":"code","28fa7301":"code","9f0f7b68":"code","9a65e389":"code","a682a146":"code","bd327a55":"code","21bd2731":"code","e07b4bad":"code","8dd7b884":"code","1e982a47":"code","474fdccc":"code","2ec958cf":"code","ed6cb967":"code","eaef354b":"code","7db9c473":"code","de23b3ae":"code","a5ca8af6":"code","a447b200":"code","6698643b":"code","0599f581":"code","cf837f00":"code","9160d40b":"code","d388eccd":"code","b11411cd":"code","248ac3d1":"code","cc08ce31":"code","7e05d802":"code","67fcdb58":"code","0a16c5e1":"code","3d89401e":"markdown","92fff1c6":"markdown","c1c4fc4c":"markdown","38175bcb":"markdown","261ac8a3":"markdown","f6e6e591":"markdown"},"source":{"fddf9cc4":"# Imports\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.offline.init_notebook_mode(connected=True)\n\nimport os\ndebug = False \nif debug : \n    for dirname, _, filenames in os.walk('\/kaggle\/input'):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))\n\n#sns.set(style=\"darkgrid\")","28fa7301":"infected = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_casos_long.csv')\nuci_beds = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_camas_uci_2017.csv')\nrecovered = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_altas_long.csv')\ndeath = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_fallecidos_long.csv')\nhospitalized = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_hospitalizados_long.csv')\nmasks = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_mascarillas.csv')\nuci = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_uci_long.csv')\nnational = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/nacional_covid19.csv')\nage_range = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/nacional_covid19_rango_edad.csv')\n\ndebug = False\nif debug : \n print(infected)\n print(recovered)\n print(death)\n print(hospitalized)\n print(uci)","9f0f7b68":"\ndef get_location_list():\n    \"\"\"Return the list of the 19 spain regions (also called comunidades autonomas). \n    We remove the totals (last element [:-1])\"\"\"\n    return pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_casos_long.csv').CCAA.unique()[:-1]\n\ndef load_location_data(location):\n    \"\"\"Return the dataframe for a given region\"\"\"\n\n    total_df = pd.DataFrame()\n\n    infected = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_casos_long.csv')\n    infected = infected[(infected['CCAA'] == location)][['fecha','total']].sort_values(by='fecha')\n    infected.rename(columns={'fecha':'date','Total':'total' }, inplace=True)\n    infected.set_index('date', inplace=True)\n    total_df['infected'] = infected['total']\n\n    recovered = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_altas_long.csv')\n    recovered.rename(columns={'fecha':'date','Total':'total' }, inplace=True)\n    recovered = recovered[(recovered['CCAA'] == location)][['date','total']].sort_values(by='date')\n    recovered.set_index('date', inplace=True)\n    total_df['recovered'] = recovered['total']\n\n    death = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_fallecidos_long.csv')\n    death.rename(columns={'fecha':'date','Total':'total' }, inplace=True)\n    death = death[(death['CCAA'] == location)][['date','total']].sort_values(by='date')\n    death.set_index('date', inplace=True)\n    total_df['death'] = death['total']\n\n    hospitalized = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_hospitalizados_long.csv')\n    hospitalized.rename(columns={'fecha':'date','Total':'total' }, inplace=True)\n    hospitalized = hospitalized[(hospitalized['CCAA'] == location)][['date','total']].sort_values(by='date')\n    hospitalized.set_index('date', inplace=True)\n    total_df['hospitalized'] = hospitalized['total']\n\n    uci = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_uci_long.csv')\n    uci.rename(columns={'fecha':'date','Total':'total' }, inplace=True)\n    uci = uci[(uci['CCAA'] == location)][['date','total']].sort_values(by='date')\n    uci.set_index('date', inplace=True)\n    total_df['intensive care unit'] = uci['total']\n    \n    total_df['location'] = location\n\n    return total_df\n\n","9a65e389":"df = load_location_data('Madrid')\ndf.tail()","a682a146":"debug = False\nif debug : print(get_location_list()) ","bd327a55":"# Functions for data wrangling\n\nimport numpy as np\n    \ndef enrich_data(df):\n    \"\"\"Add daily increases , porcentage, derived and other columns\"\"\"\n    \n    if 'date' in df.columns :\n        df.set_index('date', inplace=True) \n\t\n    # Headers \n    #infected\trecovered\tdeath\thospitalized\tuci\tlocation\n\n    # Death : daily increase, daily porcentage and daily derived \n    df['death daily increase'] = df['death'] - df['death'].shift(1)\n    df['death daily increase percentage'] = df['death daily increase']  \/ df['death'] \n    df['death daily increase derived'] = df['death daily increase'] - df['death daily increase'].shift(1)\n\n\n    # Infected : daily increase, daily porcentage and daily derived \n    df['infected daily increase'] = df['infected'] - df['infected'].shift(1)\n    df['infected daily increase percentage'] = df['infected daily increase']  \/ df['infected'] \n    df['infected daily increase derived'] = df['infected daily increase'] - df['infected daily increase'].shift(1)\n\n    # Recovered : daily increase, daily porcentage and daily derived \n    df['recovered daily increase'] = df['recovered'] - df['recovered'].shift(1)\n    df['recovered daily increase percentage'] = df['recovered daily increase']  \/ df['recovered'] \n    df['recovered daily increase derived'] = df['recovered daily increase'] - df['recovered daily increase'].shift(1)\n\n    # hospitalized : daily increase, daily porcentage and daily derived \n    df['hospitalized daily increase'] = df['hospitalized'] - df['hospitalized'].shift(1)\n\n                                                                                                     \n\n    # Other columns    \n    df['recovered \/ infected rate'] = df['recovered'] \/ df['infected'] \n    df['infected non recovered yet'] = df['infected'] - df['recovered']   - df['death']\n    df['death rate'] = df['death'] \/ df['infected'] \n    \n    # convert to integer\n    CONVERT_INT_COLUMNS = ['infected daily increase',\n        'infected daily increase derived',\n       'death daily increase',\n       'death daily increase derived', 'recovered daily increase',\n       'recovered daily increase derived', \n       'infected non recovered yet', 'intensive care unit',\n       'hospitalized', 'hospitalized daily increase']\n    for column in CONVERT_INT_COLUMNS :\n        df[column] = df[column].fillna(0)\n        df[column] = df[column].astype(np.int64)\n  \n    # order columns\n    columnsTitles = ['location', \n                     'infected','infected daily increase'         , 'infected daily increase derived'      , 'infected daily increase percentage', \n                     'death','death daily increase'         , 'death daily increase derived'      , 'death daily increase percentage', \n                     'recovered','recovered daily increase'         , 'recovered daily increase derived'      , 'recovered daily increase percentage', \n                     'death rate', \n                     'recovered \/ infected rate',    'infected non recovered yet',\n                     'intensive care unit',  \n                     'hospitalized', 'hospitalized daily increase']\n    df = df.reindex(columns=columnsTitles)\n    df = df.sort_values(by=['date'], ascending=False)\n    df = df.rename(columns = {'CCAA':'Lugar'})\n\n    return df\n\ndef get_location(location):\n    \"\"\"Load data for a given location\"\"\"\n    df = load_location_data(location)\n    df = enrich_data(df)\n    return df\n\ndef get_dimension(dimension, debug = False):\n    \"\"\" Return a given dimension for all location. \n    We only count those days with > 100 infected, so every location start at the same time\"\"\"\n    dimension_df = pd.DataFrame()\n    LOCATION_LIST=get_location_list()\n    for location in LOCATION_LIST:\n        if debug: print (location)\n        df = pd.DataFrame()\n        df = get_location(location)\n        df = df.sort_values(by='date')\n        df = df.reset_index() # Resets the index, makes factor a column    \n        df = df[df[\"infected\"] >= 100] \n        if debug: print (df[dimension])\n\n        dimension_df[location] = df[dimension]\n    return dimension_df ","21bd2731":"df = get_location(\"Madrid\")\ndf.head()","e07b4bad":"get_dimension(\"infected\")\n","8dd7b884":"# Functions for : Single dimension report\nfrom IPython.display import display, HTML\nimport pandas as pd\nfrom matplotlib import pyplot as plt    \n\n\ndef compare_charts_median(Dimension,df): \n    short_df = df.tail(1)\n    short_df = short_df.T\n    short_df.columns = [Dimension]\n    short_df\n\n    mean_y = short_df.median(axis=1)[0]\n    x = short_df.index\n    y = short_df[Dimension]\n\n    plt.figure(figsize = (10, 5))\n    plt.scatter(x, y, c= \"red\", alpha = 0.5)\n    plt.title(Dimension + \" by region\")\n    color = 'blue'\n    plt.xticks(rotation=90)\n    plt.axhline(mean_y, c = color, alpha = 0.5, lw = 1)\n    plt.annotate('Median ' + Dimension+  ' is {}'.format(round(mean_y, 2)),\n            xy=(12, mean_y),\n            xycoords='data',\n            xytext=(50, 50), \n            textcoords='offset points',\n            arrowprops=dict(arrowstyle=\"->\", color = \"k\", alpha = 0.5),\n            color = color)\n    return\n\ndef compare_charts_time(Dimension,df):\n    fig = plt.figure(figsize=(8, 6), dpi=80)\n    for ca in df.columns:\n        plt.plot(df[ca])\n    plt.legend(df.columns)\n    fig.suptitle('Comparing : '+Dimension+', starting at 100 cases', fontsize=15)\n    plt.show()\n    return \n\ndef report_single_dimension_comparative(dimension):\n    \"\"\" Report, show a dataframe, and two charts, 1) comparing all location, 2) median value \"\"\"\n    # Ger Data\n    display(HTML(f\"<h2>Comparative of : {dimension}<h2>\"))\n    df = get_dimension(dimension)\n    # Compare chart\n    display(HTML(f\"<h3>Evolution of : {dimension}<h3>\"))\n    compare_charts_time(dimension,df)\n\n    compare_charts_median(dimension,df)\n    display(HTML(f\"<h3>Raw data : {dimension}<h3>\"))\n    with pd.option_context(\"display.max_rows\", 1000):\n        display(HTML(df.to_html()))\n    # Compare median chart\n    display(HTML(f\"<h3>Median chart of : {dimension}<h3>\"))\n    return ","1e982a47":"report_single_dimension_comparative('infected')\n","474fdccc":"report_single_dimension_comparative('infected daily increase derived')\n","2ec958cf":"report_single_dimension_comparative('infected')\n\n","ed6cb967":"report_single_dimension_comparative('infected daily increase')\n","eaef354b":"report_single_dimension_comparative('death')\n","7db9c473":"report_single_dimension_comparative('death daily increase')\n","de23b3ae":"report_single_dimension_comparative('death rate')\n","a5ca8af6":"report_single_dimension_comparative('recovered')\n","a447b200":"report_single_dimension_comparative('recovered \/ infected rate')","6698643b":"# # Functions for : two  dimensions report\nimport pandas as pd\n\n\ndef get_dimensions_all_locations(attributes, debug = False):\n    array = []\n    LOCATION_LIST=get_location_list()\n    for location in LOCATION_LIST:\n        if debug: print (location)\n        comunidad = get_location(location).head(1)\n        comunidad = comunidad.reset_index() # Resets the index, makes factor a column\n        temp_dict = {}\n        temp_dict['Lugar'] = location\n        for attr in attributes:\n            temp_dict[attr] = comunidad[attr].iloc[0]\n        array.append(temp_dict)\n\n    return pd.DataFrame.from_records(array)\n\ndef print_two_cordinates_CCAA(df):\n    fig,ax = plt.subplots()\n    fig.set_figheight(8) \n    fig.set_figwidth(8)\n    ax.axhline(y=0, color='blue')\n    ax.axvline(x=0, color='blue')\n    for k,d in df.groupby('Lugar'):\n        ax.scatter(d[df.columns[1]], d[df.columns[2]], label=k)\n\n    plt.legend(bbox_to_anchor=(0, 1), loc='upper left', ncol=1)\n\n    ax.set_xlabel(df.columns[1])\n    ax.set_ylabel(df.columns[2])\n    ax.set_title(df.columns[1]+ ' VS. ' + df.columns[2])\n    return plt\n\n\ndef report_two_dimension_comparative(attributes):\n    \"\"\" Report, for two attributes \n    df with the two dimensions, and a chart comparing it \"\"\"\n\n    df = get_dimensions_all_locations(attributes)\n    display(HTML(f\"<h2>Analysis of : {attributes[0]} Vs {attributes[1]}<\/h2>\"))\n                \n    # Compare 2d chart\n    plt = print_two_cordinates_CCAA(df)\n    plt.show()\n \n              \n    # show raw data\n    display(HTML(f\"<h3>Raw data : {attributes[0]} Vs {attributes[1]}<h3>\"))\n    df = df.append(df.sum(numeric_only=True), ignore_index=True)\n    df.iat[-1, 0] = \"Total\"\n\n    display(HTML(df.sort_values(by=[df.columns[1],df.columns[2]]).to_html()))\n \n    return ","0599f581":"report_two_dimension_comparative(['infected', 'death'] )   ","cf837f00":"report_two_dimension_comparative(['infected', 'death'] )   ","9160d40b":"report_two_dimension_comparative(['infected daily increase', 'death daily increase'] ) ","d388eccd":"report_two_dimension_comparative(['infected daily increase derived', 'death daily increase derived'] )   ","b11411cd":"report_two_dimension_comparative(['infected', 'recovered'] ) ","248ac3d1":"def report_single_location_single_dimension(location,dimension):\n    \"\"\" Report, for two attributes \n    df with the two dimensions, and a chart comparing it \"\"\"\n\n    MOVING_AVERAGE_WINDOW = 4\n    df_location = get_location(location)\n    df_location = df_location.sort_values(by=['date'], ascending=True)\n\n    df = pd.DataFrame()\n    df[dimension] = df_location[dimension]\n    df_location['Moving Average ' + dimension] = df_location[dimension].rolling(window=4).mean()\n    df['Moving Average ' + dimension] = df_location['Moving Average ' + dimension]\n    \n    display(HTML(f\"<h2>Analysis of : {dimension} for COVID-19 in {location}<\/h2>\"))\n\n\n    fig = plt.figure(figsize=(8, 6), dpi=80)\n    plt.plot(df, marker='o') \n    plt.xticks(rotation=90)\n\n    plt.legend(df.columns)\n    fig.suptitle( dimension + ' in ' + location, fontsize=20)\n    display(HTML(f\"<h3>Raw data : {dimension} in {location}<h3>\"))\n\n    display(HTML(pd.DataFrame(df).to_html()))\n    display(HTML(f\"<h3>Analysis of : {dimension} in {location}<\/h3>\"))\n    display(HTML(f\" with moving average window = {MOVING_AVERAGE_WINDOW}\"))\n    return \n\n\n \n","cc08ce31":"report_single_location_single_dimension('Madrid','death daily increase')","7e05d802":"report_single_location_single_dimension('Catalu\u00f1a','death daily increase')","67fcdb58":"report_single_location_single_dimension('Madrid','infected daily increase')","0a16c5e1":"report_single_location_single_dimension('Catalu\u00f1a','infected daily increase')","3d89401e":"Do we have reached the peak of death in Madrid and Catalu\u00f1a ? ","92fff1c6":"This is the kernel I use for analysis of the daily data for COVID-19 in Spain.\n\nAs I am living in Madrid region, by using this data, I try to find and avoid the peak of the epidemic curve.\nThe goal here, is to the find the safest days for going outside and shopping for food and medicines. \n\nI hope you might find it useful too.\n\nAny feedback is welcome. Please, keep yourself healthy. \nKind regards\n","c1c4fc4c":"It seems that, regarding the number of death, we have NOT reached the peak of the curve.\n\nLet's try the same comparation for infection","38175bcb":"We prepare two reports, comparing all locations, for. \n - Single dimension report,\n - Two dimension reports","261ac8a3":"It seems that the amount of infected people could have peaked, altough the numbers are definitely NOT reliable, due to lack of enough tests to check people with mild symptoms.   ","f6e6e591":"Some functions to load and enrich data"}}