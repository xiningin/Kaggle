{"cell_type":{"b9868280":"code","2e7a7e64":"code","c100da74":"code","85751739":"code","22e57418":"code","fa72906c":"code","d9945af1":"code","9965bfe8":"code","afdad6d4":"code","162cc117":"code","b49b2fc7":"code","c2d7b61e":"code","17ca9929":"code","a2314e6b":"code","dc68cac9":"code","10ac1234":"code","ef04d67d":"code","7917bc6c":"markdown","516752a1":"markdown","22a45be6":"markdown","d5d722a2":"markdown","9b9a79ba":"markdown","8416dbcd":"markdown","a7cf1ecd":"markdown","77192975":"markdown","8db39d7f":"markdown","e0e7f3a9":"markdown","0eb60bdf":"markdown","d6c9e41e":"markdown","a3269e36":"markdown","d69f0b9c":"markdown"},"source":{"b9868280":"import pandas as pd\nimport numpy as np\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tools\nimport matplotlib.pyplot as plt\nimport colorlover as cl\nfrom IPython.display import HTML\nimport calendar\nimport datetime\nfrom datetime import datetime, timedelta\ninit_notebook_mode(connected=True)\n","2e7a7e64":"playstore_df = pd.read_csv('..\/input\/googleplaystore.csv')\nplaystore_reviews_df = pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')\nplaystore_df.head()","c100da74":"playstore_reviews_df.head()","85751739":"playstore_df.dropna(inplace=True)","22e57418":"playstore_df = playstore_df[playstore_df.Installs != 'Free']\ncategory_install_df = pd.DataFrame(playstore_df, columns=['Category','Installs'])\ncategory_install_df['Installs'] = category_install_df.Installs.apply(lambda x: x.replace('+','')).apply( lambda x: float(x.replace(',','')))\ncategory_install_df = category_install_df.groupby('Category').sum().sort_values(by='Installs', ascending=False)\ncategory_install_df.head()","fa72906c":"colors_scale = cl.scales['10']['div']['RdYlGn']\ncolors = cl.interp( colors_scale, 40 ) \n\ntrace = go.Bar(\n    x = category_install_df.index,\n    y = category_install_df['Installs'],\n    name = 'Installs by Categories',\n    marker={'color': cl.to_rgb( colors )}\n   \n)\n\ndata = [trace]\nlayout = go.Layout(\n    title='<b>Installs by Categories<b>',\n     margin=go.layout.Margin(\n        l=173,\n        r=80,\n        t=100,\n        b=200,\n        pad=4\n    ),\n    xaxis=dict(\n        title='<b>Category<b>',\n        tickangle=-45,\n        titlefont=dict(\n            size=14,\n            color='rgb(107,107,107)'\n        ),\n    ),\n    yaxis=dict(\n        title='<b>Installs<b>',\n        titlefont=dict(\n            size=14,\n            color='rgb(107,107,107)'\n        ),\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","d9945af1":"totalapp_free_df = (playstore_df[playstore_df.Type == 'Free'].count().iloc[0] \/ playstore_df['App'].count() * 100).round()\ntotalapp_paid_df = (playstore_df[playstore_df.Type == 'Paid'].count().iloc[0] \/ playstore_df['App'].count() * 100).round()","9965bfe8":"labels = ['Free','Paid']\nvalues = [totalapp_free_df, totalapp_paid_df]\n\ntrace = go.Pie(\n    labels=labels, \n    values=values,\n    hoverinfo='label+percent', textinfo='percent', \n    textfont=dict(size=20, color='white')\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    title='<b>Distribution by App Type <b>',\n     margin=go.layout.Margin(\n        l=173,\n        r=80,\n        t=100,\n        b=80,\n        pad=4\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","afdad6d4":"android_versions = playstore_df.groupby(by='Android Ver').size().reset_index(name='total').sort_values(by='total', ascending=True)","162cc117":"colors_scale = cl.scales['7']['seq']['YlGnBu']\ncolors = cl.interp( colors_scale, 40 ) \n\ntrace = go.Bar(\n    x = android_versions.total,\n    y = android_versions['Android Ver'],\n    orientation = 'h',\n    marker={'color': cl.to_rgb( colors )}\n)\n\ndata = [trace]\nlayout = go.Layout(\n    title='<b>App by Android Version<b>',\n    xaxis=dict(\n        title='<b>Total<b>',\n        titlefont=dict(\n            size=14,\n            color='rgb(107,107,107)'\n        )\n    ),\n    yaxis=dict(\n        title='<b>Versions<b>',\n        titlefont=dict(\n            size=14,\n            color='rgb(107,107,107)'\n        )\n    ),\n    margin=dict(\n        l=173,\n        r=80,\n        t=100,\n        b=80,\n        pad=4\n\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","b49b2fc7":"def getTotalDays(date):\n    datetime_obj = datetime.strptime(date, '%B %d, %Y')\n    days = datetime_obj - datetime.now() \n    return abs(days.days)\n","c2d7b61e":"app_lastudpate_df = playstore_df.loc[:,['App','Type','Last Updated']]\napp_lastudpate_df['day'] = app_lastudpate_df['Last Updated'].apply(lambda x: datetime.strptime(x, '%B %d, %Y').day)\napp_lastudpate_df['month'] = app_lastudpate_df['Last Updated'].apply(lambda x: datetime.strptime(x, '%B %d, %Y').month)\napp_lastudpate_df['year'] = app_lastudpate_df['Last Updated'].apply(lambda x: datetime.strptime(x, '%B %d, %Y').year)\napp_lastudpate_df['total_days'] = app_lastudpate_df['Last Updated'].apply(lambda x: getTotalDays(x))\napp_lastudpate_df.sort_values(by='total_days', ascending=False)\nno_updates_df = app_lastudpate_df.loc[:,['App','Type','Last Updated','year','total_days']]\nno_updates_df = no_updates_df.sort_values(by='total_days', ascending=False)\napps_updated_by_year_df = no_updates_df.groupby(by=['Type','year']).size().reset_index(name='total').sort_values(by='year', ascending=True)","17ca9929":"trace_free = go.Bar(\n    x = apps_updated_by_year_df[apps_updated_by_year_df.Type == 'Free'].year,\n    y = apps_updated_by_year_df[apps_updated_by_year_df.Type == 'Free'].total,\n    name = 'Free'\n)\n\ntrace_paid = go.Bar(\n    x = apps_updated_by_year_df[apps_updated_by_year_df.Type == 'Paid'].year,\n    y = apps_updated_by_year_df[apps_updated_by_year_df.Type == 'Paid'].total,\n    name = 'Paid'\n)\n\nlayout = go.Layout(\n    title='Total Apps Last update by Year',\n    barmode='group',\n    xaxis=dict(\n        title='Years',\n        titlefont=dict(\n            size=14,\n            color='rgb(107,107,107)'\n        )\n    ),\n    yaxis=dict(\n        title='Total Apps Last Updated',\n        titlefont=dict(\n            size=14,\n            color='rgb(107,107,107)'\n        )\n    )\n)\n\ndata = [trace_free, trace_paid]\n\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","a2314e6b":"category_rating_df = playstore_df.groupby(by=['Category','Rating']).size().reset_index(name='total').sort_values(by='Rating', ascending=False)\ncategory_rating_5_stars = category_rating_df[category_rating_df.Rating == 5]\ncategory_rating_4_stars = category_rating_df[category_rating_df.Rating == 4]\ncategory_rating_3_stars = category_rating_df[category_rating_df.Rating == 3]\ncategory_rating_2_stars = category_rating_df[category_rating_df.Rating == 2]\ncategory_rating_1_stars = category_rating_df[category_rating_df.Rating == 1]","dc68cac9":"trace_5_stars = go.Bar(\n    x = category_rating_5_stars.Category,\n    y = category_rating_5_stars.total,\n    name = 'Rating 5 Stars',\n    marker=dict(\n        color='rgba(102.0, 194.0, 165.0, 0.7)',\n        line=dict(\n            color='rgba(102.0, 194.0, 165.0, 1.0)',\n        )\n    )\n)\n\ntrace_4_stars = go.Bar(\n    x = category_rating_4_stars.Category,\n    y = category_rating_4_stars.total,\n    name = 'Rating 4 Stars',\n    marker=dict(\n       color='rgba(252.0, 141.0, 98.0, 0.7)',\n       line=dict(\n           color='rgba(252.0, 141.0, 98.0, 1.0)',\n       )\n    )\n)\n\ntrace_3_stars = go.Bar(\n    x = category_rating_3_stars.Category,\n    y = category_rating_3_stars.total,\n    name = 'Rating 3 Stars',\n    marker=dict(\n       color='rgba(141.0, 160.0, 203.0)',\n       line=dict(\n           color='rgba(141.0, 160.0, 203.0)',\n       )\n    )\n)\n\ntrace_2_stars = go.Bar(\n    x = category_rating_2_stars.Category,\n    y = category_rating_2_stars.total,\n    name = 'Rating 2 Stars',\n    marker=dict(\n       color='rgba(231.0, 138.0, 195.0)',\n       line=dict(\n           color='rgba(231.0, 138.0, 195.0)',\n       )\n    )\n)\n\ntrace_1_stars = go.Bar(\n    x = category_rating_1_stars.Category,\n    y = category_rating_1_stars.total,\n    name = 'Rating 1 Stars',\n    marker=dict(\n        color='rgba(166.0, 216.0, 84.0, 0.7)',\n        line=dict(\n            color='rgba(166.0, 216.0, 84.0, 1.0)',\n        )\n    )\n)\n\n\nlayout = go.Layout(\n    title='<b>Rating by Categories<b>',\n    barmode='stack',\n    xaxis=dict(\n        title='<b>Category<b>',\n        tickangle=-45,\n        titlefont=dict(\n            size=14,\n            color='rgb(107,107,107)'\n        )\n    ),\n    yaxis=dict(\n        title='<b>Total<b>',\n        titlefont=dict(\n            size=14,\n            color='rgb(107,107,107)'\n        )\n    ),\n    margin=dict(\n        l=173,\n        r=80,\n        t=100,\n        b=200,\n        pad=4\n\n    )\n)\n\ndata = [trace_5_stars, trace_4_stars, trace_3_stars, trace_2_stars, trace_1_stars]\n\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","10ac1234":"positive_review_df = (playstore_reviews_df[playstore_reviews_df.Sentiment == 'Positive'].count().iloc[0] \/ playstore_reviews_df['Sentiment'].count() * 100).round()\nnegative_review_df = (playstore_reviews_df[playstore_reviews_df.Sentiment == 'Negative'].count().iloc[0] \/ playstore_reviews_df['Sentiment'].count() * 100).round()\nneutral_review_df = (playstore_reviews_df[playstore_reviews_df.Sentiment == 'Neutral'].count().iloc[0] \/ playstore_reviews_df['Sentiment'].count() * 100).round()","ef04d67d":"colors = cl.scales['3']['qual']['Paired']\n\nlabels = ['Positive','Negative','Neutral']\nvalues = [positive_review_df, negative_review_df, neutral_review_df]\n\ntrace = go.Pie(\n    labels=labels, \n    values=values,\n    hoverinfo='label+percent', textinfo='percent', \n    textfont=dict(size=20, color='white'),\n    marker=dict(colors=cl.to_rgb( colors ))\n    \n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    title='<b>Distribution by Sentiment <b>',\n     margin=go.layout.Margin(\n        l=173,\n        r=80,\n        t=100,\n        b=80,\n        pad=4\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","7917bc6c":"<a id=\"0\"><\/a> <br>\n## Questions","516752a1":"<a id=\"6\"><\/a> <br>\n## 1-6 What are the percentages of positives, negative and neutral reviews ?","22a45be6":"<a id=\"5\"><\/a> <br>\n## 1-5 What is the total rating by category ?","d5d722a2":"<a id=\"2\"><\/a> <br>\n## 1-2 What is the percentage of Free and Payments applications ?","9b9a79ba":"### Removing N\/A values","8416dbcd":" <a id=\"0\"><\/a>\n 1. [Questions](#0) <br>\n     1.1 [ What is the Category of applications with the Largest numver of  installations ?](#1)<br>\n     1.2[ What is the percentage of Free and Payments applications ?](#2)<br>\n     1.3[ What is the total number of installations by Android version ?](#3)<br>\n     1.4[ What is the total number of applications that are without updates ?](#4)<br>\n     1.5[ What is the total rating by category ?](#5)<br>\n     1.6[ What are the percentages of positives, negative and neutral reviews ?](#6)\n\n","a7cf1ecd":"### Loading DataSet","77192975":"<a id=\"4\"><\/a> <br>\n## 1-4 What is the total number of applications that are without updates ?","8db39d7f":"<a id=\"3\"><\/a> <br>\n## 1-3 What is the total number of installations by Android version ?","e0e7f3a9":"# Exploratory Data Analysis with Python\n\n","0eb60bdf":"# Conclusion\nI hope you find this kernel helpful and some **Upvotes** would be very much appreciated.<br>\nThank you for your time in viewing my kernel, so the comments e suggestions is very welcomes!\n\n\n","d6c9e41e":"### Loading Packages\n","a3269e36":"### Introduction\nThis script is about Exploratory Data Analysis with Python of Google Play Store Dataset. I will explore the data and answer some questions with some visualizations.","d69f0b9c":"<a id=\"1\"><\/a> <br>\n### 1-1 What is the Category of applications with the Largest numver of  installations ?\n"}}