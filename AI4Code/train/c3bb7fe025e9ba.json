{"cell_type":{"d835817c":"code","4a21dbfa":"code","6ee68e51":"code","29344ecf":"code","00be7882":"code","8545bbb2":"code","f6061d18":"code","edc2226a":"code","ce23b928":"code","b4db9c9b":"code","a5c1ba41":"code","b28a095e":"code","35c3e8ec":"code","51f5458e":"code","830984ab":"code","0ac3f350":"code","85ba7ba8":"code","ad95750f":"code","d9d8991d":"code","654d30d7":"code","3bdc9f8e":"code","e992513d":"code","5abff267":"code","e92aa3b1":"code","cc36a12b":"code","e2cb484c":"code","8d1dcb5e":"code","2ebd976f":"code","d67df3ee":"code","0cb87d90":"code","75f44926":"markdown","b21c8f6e":"markdown","40287f43":"markdown","7af965c6":"markdown","2c338aca":"markdown","1d22a33f":"markdown","d782be70":"markdown","111b771e":"markdown","12a7a850":"markdown"},"source":{"d835817c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a21dbfa":"import numpy as np\nimport pandas as pd\nimport math\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nimport matplotlib.pyplot as plt ","6ee68e51":"# Applying gini\ndef gini(samples):\n    sum_of_samples = sum(samples)\n    probs = []\n    score = 0\n    for sample in samples:\n        proba = sample \/ sum_of_samples\n        probs.append(proba)\n    for proba in probs:\n        score += proba * (1 - proba)\n    return score\n        ","29344ecf":"# Applying entropy\ndef entropy(samples):\n    sum_of_samples = sum(samples)\n    probs = []\n    score = 0\n    for sample in samples:\n        proba = sample \/ sum_of_samples\n        probs.append(proba)\n    for proba in probs:\n        score += proba * math.log(proba)\n    return score\n        ","00be7882":"x = [100, 75, 125]\nprint(gini(x))\nprint(entropy(x))","8545bbb2":"import numpy as np\nimport pandas as pd","f6061d18":"file_path = '..\/input\/titanic\/train.csv'\ndata = pd.read_csv(file_path)\n# dataset dimensions\ndata.shape","edc2226a":"# columns of the datset\nfor feature in data.columns:\n    print(feature)","ce23b928":"# first 5 dataset\ndata.head()","b4db9c9b":"# description of the dataset\ndata.describe()","a5c1ba41":"# extract features from the dataset\ndata = data[['Survived', 'Pclass', 'Sex']]\ndata","b28a095e":"# mapping the SEX feature\nsex_mapping = {\n    'female' : 0,\n    'male' : 1\n}\ndata.Sex = data.Sex.map(sex_mapping)\ndata","35c3e8ec":"# samples in class0(w0) & class(w1)\nprint(data.Survived.value_counts())","51f5458e":"# samples in each feature\nprint(data.Pclass.value_counts())\nprint(data.Sex.value_counts())","830984ab":"# Impurity in classes(survived)\ngini([549, 342])","0ac3f350":"# filter the feature(x0 <= 1.5)\nx = data[data.Pclass <= 1.5] # Pclass == 1 \nprint(x.shape)\nprint(x.Survived.value_counts()) # x0 <= 1.5 >>> w0 = 0 or w0 = 1(Survived or not)","85ba7ba8":"gini([80, 136])","ad95750f":"# filter the feature(x0 > 1.5)\nx = data[data.Pclass > 1.5] # Pclass == 1\nprint(x.shape)\nprint(x.Survived.value_counts()) # x0 > 1.5 >>> w0 = 0 or w0 = 1(Survived or not)","d9d8991d":"gini([469, 206])","654d30d7":"x = data[data.Pclass <= 2.5] \nprint(x.shape)\nprint(x.Survived.value_counts())","3bdc9f8e":"gini([177, 223])","e992513d":"x = data[data.Pclass > 2.5]\nprint(x.shape)\nprint(x.Survived.value_counts())","5abff267":"gini([372, 119])","e92aa3b1":"x = data[data.Sex < 0.5]\nprint(x.shape)\nprint(x.Survived.value_counts())","cc36a12b":"gini([81, 233])","e2cb484c":"x = data[data.Sex > 0.5]\nprint(x.shape)\nprint(x.Survived.value_counts())","8d1dcb5e":"gini([468, 109])","2ebd976f":"features = [\"Pclass\", \"Sex\"]\nmodel = DecisionTreeClassifier() # when dnt specify any argumnet here >> Default == gini\nmodel.fit(data[features], data.Survived)","d67df3ee":"plt.figure(figsize=(20, 10))\nplot_tree(model, feature_names=features)\nplt.show()","0cb87d90":"print(\"Making predictions for the following 5 people\")\nprint(data.head())\nprint(\"Predictions are : \")\nprint(model.predict(data[[\"Pclass\", \"Sex\"]].head()))","75f44926":"# Checking the DecisionTree","b21c8f6e":"Survived :\n0  1\nPclass :\n1  2  3\nSex :\n0  1","40287f43":"* # x1 > 2.5","7af965c6":"* # x0 <= 1.5 \/ x0 > 1.5","2c338aca":"* # x0 <= 2.5 \/ x0 > 2.5","1d22a33f":"* # x1 < 0.5","d782be70":"# Sex tree","111b771e":"# Finding Impurity in a dataset\n1. gini\n2. entropy","12a7a850":"# Pclass Trees (x0)\n* x0 <= 1.5 \/ x0 > 1.5\n* x0 <= 2.5 \/ x0 > 2.5"}}