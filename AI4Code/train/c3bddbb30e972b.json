{"cell_type":{"3131c2dc":"code","c7d4e8af":"code","4cb7bc61":"code","df6fe810":"code","73c1346e":"code","948552f1":"code","6e296b6b":"code","76d637c1":"code","a1eb575d":"code","8162ce9b":"code","426b2403":"code","aead17b8":"code","9d21a1a0":"code","1668521f":"code","9a1078a5":"code","cf9e8117":"code","d9ea75bc":"code","c0ca302f":"code","34e4fe92":"code","3afa3918":"code","839e33c6":"code","1fe04980":"code","a8863dbb":"code","a91499e8":"code","642ee239":"code","963560bd":"code","8ce2b9bd":"code","a8befcec":"code","cd00cd46":"code","30a02d10":"code","de12c3cf":"code","5726272a":"code","1d552f39":"code","1db023ac":"code","a61e42a2":"code","802fa4e7":"code","1cb60b2f":"code","886acfa1":"code","9d8b12ab":"code","86c1f4c2":"code","09386dee":"code","909802a3":"code","eaa82cf5":"code","50b2d643":"code","253a6ac9":"code","a9c22a55":"code","c3e01b7f":"code","edc7ef1e":"code","5ed69c60":"code","833cc04f":"code","116ca6e4":"code","7135ee69":"code","4ce6caba":"code","6230bc43":"code","720776ea":"code","4bf8db48":"code","c97b5f90":"code","0ba52e0c":"code","a9dc1b3e":"code","ebeaffd8":"code","78cc949b":"code","f8dc81e1":"code","b30ecf08":"code","dd9b6204":"code","8de2b5b5":"code","c1d40ba4":"code","3eafefee":"code","92e5aed6":"code","bc6a05d9":"code","04e451d1":"code","ba71e9eb":"code","611b9826":"code","f54600ee":"code","2a7fd961":"code","11130cdf":"code","e2d5eb08":"code","b4c428b2":"code","44c5ce2b":"code","c96f038e":"code","6a57bb81":"code","b12d2940":"code","b891c51e":"code","4cdde758":"code","a92fd75b":"code","386eb0f3":"code","a051548c":"code","2e8d49c7":"markdown","40f75858":"markdown","3637213d":"markdown","bfbdd5e9":"markdown","18315194":"markdown","83100f37":"markdown","56a2ea18":"markdown","803c88e9":"markdown","310a28da":"markdown","f81d7d05":"markdown","869c08b0":"markdown","8c77f53c":"markdown","8d150e99":"markdown","16e9905a":"markdown","b46d67a7":"markdown","29de738a":"markdown","aadcf958":"markdown","667c47bf":"markdown","cda6d5e1":"markdown","956a1bb8":"markdown","944236b0":"markdown","45e28cb7":"markdown","97fbab8e":"markdown","8aaf3d6e":"markdown","9fe1448d":"markdown","c10394a4":"markdown","98607e28":"markdown","37715593":"markdown","16281d36":"markdown","ddf6ac23":"markdown","3b605f07":"markdown","423bae77":"markdown","7e6e03e7":"markdown","bd5a8a17":"markdown","36a5813c":"markdown","5d1775c6":"markdown","c7e995e8":"markdown","4b1b1b15":"markdown","5ef796ef":"markdown","0ef2f195":"markdown"},"source":{"3131c2dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c7d4e8af":"data_women = pd.read_csv(\"..\/input\/percent-bachelors-degrees-women-usa-csv\/percent-bachelors-degrees-women-usa.csv\")","4cb7bc61":"data_women.head()","df6fe810":"data_women.keys()","73c1346e":"year = np.array(data_women[\"Year\"])","948552f1":"year","6e296b6b":"physical_sciences = np.array(data_women[\"Physical Sciences\"])","76d637c1":"physical_sciences","a1eb575d":"computer_science = np.array(data_women[\"Computer Science\"])","8162ce9b":"computer_science","426b2403":"import matplotlib.pyplot as plt\n%matplotlib inline \n","aead17b8":"plt.plot(year,physical_sciences, color='blue')\nplt.plot(year,computer_science, color='red')\nplt.show()","9d21a1a0":"# Create plot axes for the first line plot\nplt.axes([0.05,0.05,0.425,0.9])\n\n# Plot in blue the % of degrees awarded to women in the Physical Sciences\nplt.plot(year, physical_sciences, color='blue')\n\n# Create plot axes for the second line plot\nplt.axes([0.525,0.05,0.425,0.9])\n\n\n# Plot in red the % of degrees awarded to women in Computer Science\nplt.plot(year, computer_science, color='red')\n\n# Display the plot\nplt.show()","1668521f":"# Create a figure with 1x2 subplot and make the left subplot active\nplt.subplot(1,2,1) # last 1 is to make the first subplot active\n\n# Plot in blue the % of degrees awarded to women in the Physical Sciences\nplt.plot(year, physical_sciences, color='blue')\nplt.title('Physical Sciences')\n\n# Make the right subplot active in the current 1x2 subplot grid\nplt.subplot(1,2,2) # last 2 is to make the second subplot active\n\n\n# Plot in red the % of degrees awarded to women in Computer Science\nplt.plot(year, computer_science, color='red')\nplt.title('Computer Science')\n\n# Use plt.tight_layout() to improve the spacing between subplots\nplt.tight_layout()\nplt.show()\n","9a1078a5":"health = np.array(data_women[\"Health Professions\"])","cf9e8117":"health","d9ea75bc":"education = np.array(data_women[\"Education\"])","c0ca302f":"education","34e4fe92":"# Create a figure with 2x2 subplot layout and make the top left subplot active\nplt.subplot(2,2,1)\n\n# Plot in blue the % of degrees awarded to women in the Physical Sciences\nplt.plot(year, physical_sciences, color='blue')\nplt.title('Physical Sciences')\n\n# Make the top right subplot active in the current 2x2 subplot grid \nplt.subplot(2,2,2)\n\n\n# Plot in red the % of degrees awarded to women in Computer Science\nplt.plot(year, computer_science, color='red')\nplt.title('Computer Science')\n\n# Make the bottom left subplot active in the current 2x2 subplot grid\nplt.subplot(2,2,3)\n\n\n# Plot in green the % of degrees awarded to women in Health Professions\nplt.plot(year, health, color='green')\nplt.title('Health Professions')\n\n# Make the bottom right subplot active in the current 2x2 subplot grid\nplt.subplot(2,2,4)\n\n\n# Plot in yellow the % of degrees awarded to women in Education\nplt.plot(year, education, color='yellow')\nplt.title('Education')\n\n# Improve the spacing between subplots and display them\nplt.tight_layout()\nplt.show()\n","3afa3918":"# Plot the % of degrees awarded to women in Computer Science and the Physical Sciences\nplt.plot(year,computer_science, color='red') \nplt.plot(year, physical_sciences, color='blue')\n\n# Add the axis labels\nplt.xlabel('Year')\nplt.ylabel('Degrees awarded to women (%)')\n\n# Set the x-axis range\nplt.xlim((1990,2010))\n\n# Set the y-axis range\nplt.ylim(0,50)\n\n# Add a title and display the plot\nplt.title('Degrees awarded to women (1990-2010)\\nComputer Science (red)\\nPhysical Sciences (blue)')\nplt.show()\n\n# Save the image as 'xlim_and_ylim.png'\n#plt.savefig('xlim_and_ylim.png')\n","839e33c6":"# Plot in blue the % of degrees awarded to women in Computer Science\nplt.plot(year,computer_science, color='blue')\n\n# Plot in red the % of degrees awarded to women in the Physical Sciences\nplt.plot(year, physical_sciences,color='red')\n\n# Set the x-axis and y-axis limits\nplt.axis((1990,2010,0,50))\n\n# Show the figure\nplt.show()\n\n# Save the figure as 'axis_limits.png'\n#plt.savefig('axis_limits.png')\n","1fe04980":"# Specify the label 'Computer Science'\nplt.plot(year, computer_science, color='red', label='Computer Science') \n\n# Specify the label 'Physical Sciences' \nplt.plot(year, physical_sciences, color='blue', label='Physical Sciences')\n\n# Add a legend at the lower center\nplt.legend(loc='lower center')\n\n# Add axis labels and title\nplt.xlabel('Year')\nplt.ylabel('Enrollment (%)')\nplt.title('Undergraduate enrollment of women')\nplt.show()\n","a8863dbb":"# Plot with legend as before\nplt.plot(year, computer_science, color='red', label='Computer Science') \nplt.plot(year, physical_sciences, color='blue', label='Physical Sciences')\nplt.legend(loc='lower right')\n\n# Compute the maximum enrollment of women in Computer Science: cs_max\ncs_max = computer_science.max()\n\n# Calculate the year in which there was maximum enrollment of women in Computer Science: yr_max\nyr_max = year[computer_science.argmax()]\n\n# Add a black arrow annotation\nplt.annotate('Maximum',xy=(yr_max,cs_max), xytext=(yr_max+5, cs_max+5),arrowprops=dict(facecolor='black')) # Shortcut for 'black' is 'k'\n\n# Add axis labels and title\nplt.xlabel('Year')\nplt.ylabel('Enrollment (%)')\nplt.title('Undergraduate enrollment of women')\nplt.show()\n","a91499e8":"\n\n# Set the style to 'ggplot'\nplt.style.use('ggplot')\n\n# Create a figure with 2x2 subplot layout\nplt.subplot(2, 2, 1) \n\n# Plot the enrollment % of women in the Physical Sciences\nplt.plot(year, physical_sciences, color='blue')\nplt.title('Physical Sciences')\n\n# Plot the enrollment % of women in Computer Science\nplt.subplot(2, 2, 2)\nplt.plot(year, computer_science, color='red')\nplt.title('Computer Science')\n\n# Add annotation\ncs_max = computer_science.max()\nyr_max = year[computer_science.argmax()]\nplt.annotate('Maximum', xy=(yr_max, cs_max), xytext=(yr_max-1, cs_max-10), arrowprops=dict(facecolor='black'))\n\n# Plot the enrollmment % of women in Health professions\nplt.subplot(2, 2, 3)\nplt.plot(year, health, color='green')\nplt.title('Health Professions')\n\n# Plot the enrollment % of women in Education\nplt.subplot(2, 2, 4)\nplt.plot(year, education, color='yellow')\nplt.title('Education')\n\n# Improve spacing between subplots and display them\nplt.tight_layout()\nplt.show()","642ee239":"\n# Generate two 1-D arrays: u, v\nu = np.linspace(-2, 2, 41)\nv = np.linspace(-1, 1, 21)\n\n# Generate 2-D arrays from u and v: X, Y\nX,Y = np.meshgrid(u,v)\n\n# Compute Z based on X and Y\nZ = np.sin(3*np.sqrt(X**2 + Y**2)) \n\n# Display the resulting image with pcolor()\nplt.pcolor(Z)\nplt.show()\n\n# Save the figure to 'sine_mesh.png'\nplt.savefig('sine_mesh.png')\n","963560bd":"u","8ce2b9bd":"# Generate a default contour map of the array Z\nplt.subplot(2,2,1)\nplt.contour(X,Y,Z,loc=\"upper left \")\n\n# Generate a contour map with 20 contours\nplt.subplot(2,2,2)\nplt.contour(X,Y,Z,20,loc=\"upper right\")\n\n\n# Generate a default filled contour map of the array Z\nplt.subplot(2,2,3)\nplt.contourf(X,Y,Z,loc=\"lower left\")\n\n\n# Generate a default filled contour map with 20 contours\nplt.subplot(2,2,4)\nplt.contourf(X,Y,Z,20,loc=\"lower right\")\n\n\n# Improve the spacing between subplots\nplt.tight_layout()\n\n# Display the figure\nplt.show()\n","a8befcec":"# Create a filled contour plot with a color map of 'viridis'\nplt.subplot(2,2,1)\nplt.contourf(X,Y,Z,20, cmap='viridis')\nplt.colorbar()\nplt.title('Viridis')\n\n# Create a filled contour plot with a color map of 'gray'\nplt.subplot(2,2,2)\nplt.contourf(X,Y,Z,20, cmap='gray')\nplt.colorbar()\nplt.title('Gray')\n\n# Create a filled contour plot with a color map of 'autumn'\nplt.subplot(2,2,3)\nplt.contourf(X,Y,Z,20, cmap='autumn')\nplt.colorbar()\nplt.title('Autumn')\n\n# Create a filled contour plot with a color map of 'winter'\nplt.subplot(2,2,4)\nplt.contourf(X,Y,Z,20, cmap='winter')\nplt.colorbar()\nplt.title('Winter')\n\n# Improve the spacing between subplots and display them\nplt.tight_layout()\nplt.show()\n","cd00cd46":"data_auto = pd.read_csv(\"..\/input\/auto-mpg\/auto.csv\")","30a02d10":"data_auto.head()","de12c3cf":"mpg = np.array(data_auto[\"mpg\"])","5726272a":"hp = np.array(data_auto[\"hp\"])","1d552f39":"# Generate a 2-D histogram\nplt.hist2d(hp,mpg, bins=(20,20),range=((40,235),(8,48))) # first bin are range are for hp\n\n# Add a color bar to the histogram\nplt.colorbar()\n\n# Add labels, title, and display the plot\nplt.xlabel('Horse power [hp]')\nplt.ylabel('Miles per gallon [mpg]')\nplt.title('hist2d() plot')\nplt.show()","1db023ac":"# Generate a 2d histogram with hexagonal bins\n# extent=(xmin, xmax, ymin, ymax)\nplt.hexbin(hp,mpg,gridsize=(15,12),extent=(40 , 235,8 , 48))\n\n           \n# Add a color bar to the histogram\nplt.colorbar()\n\n# Add labels, title, and display the plot\nplt.xlabel('Horse power [hp]')\nplt.ylabel('Miles per gallon [mpg]')\nplt.title('hexbin() plot')\nplt.show()\n","a61e42a2":"# Load the image into an array\n# Source = https:\/\/en.wikipedia.org\/wiki\/File:Astronaut-EVA.jpg\nimg = plt.imread(\"..\/input\/astronaut\/480px-Astronaut-EVA.jpg\")","802fa4e7":"# Print the shape of the image\nprint(img.shape)\n\n# Display the image\nplt.imshow(img)\n\n# Hide the axes\nplt.axis('off')\nplt.show()","1cb60b2f":"# Print the shape of the image\nprint(img.shape)\n\n# Compute the sum of the red, green and blue channels\nintensity = img.sum(axis=2)\n\n# Print the shape of the intensity\nprint(intensity.shape)\n\n# Display the intensity with a colormap of 'gray'\nplt.imshow(intensity,cmap='gray')\n\n# Add a colorbar\nplt.colorbar()\n\n# Hide the axes and show the figure\nplt.axis('off')\nplt.show()\n","886acfa1":"\n# Specify the extent and aspect ratio of the top left subplot\nplt.subplot(2,2,1)\nplt.title('extent=(-1,1,-1,1),\\naspect=0.5')\nplt.xticks([-1,0,1])\nplt.yticks([-1,0,1])\nplt.imshow(img, extent=(-1,1,-1,1), aspect=0.5)\n\n# Specify the extent and aspect ratio of the top right subplot\nplt.subplot(2,2,2)\nplt.title('extent=(-1,1,-1,1),\\naspect=1')\nplt.xticks([-1,0,1])\nplt.yticks([-1,0,1])\nplt.imshow(img, extent=(-1,1,-1,1), aspect=1)\n\n# Specify the extent and aspect ratio of the bottom left subplot\nplt.subplot(2,2,3)\nplt.title('extent=(-1,1,-1,1),\\naspect=2')\nplt.xticks([-1,0,1])\nplt.yticks([-1,0,1])\nplt.imshow(img, extent=(-1,1,-1,1), aspect=2)\n\n# Specify the extent and aspect ratio of the bottom right subplot\nplt.subplot(2,2,4)\nplt.title('extent=(-2,2,-1,1),\\naspect=2')\nplt.xticks([-2,-1,0,1,2])\nplt.yticks([-1,0,1])\nplt.imshow(img, extent=(-2,2,-1,1), aspect=2)\n\n# Improve spacing and display the figure\nplt.tight_layout()\nplt.show()","9d8b12ab":"# Load the image into an array\n# Source = https:\/\/commons.wikimedia.org\/wiki\/File:Unequalized_Hawkes_Bay_NZ.jpg\nimage = plt.imread('..\/input\/unequalized\/640px-Unequalized_Hawkes_Bay_NZ.jpg')","86c1f4c2":"# Extract minimum and maximum values from the image: pmin, pmax\npmin, pmax = image.min(), image.max()\nprint(\"The smallest & largest pixel intensities are %d & %d.\" % (pmin, pmax))\n\n# Rescale the pixels: rescaled_image\nrescaled_image = 256*(image-pmin)\/(pmax-pmin)\nprint(\"The rescaled smallest & largest pixel intensities are %.1f & %.1f.\" % \n      (rescaled_image.min(), rescaled_image.max()))\n\n# Display the original image in the top subplot\nplt.subplot(2,1,1)\nplt.title('original image')\nplt.axis('off')\nplt.imshow(image)\n\n# Display the rescaled image in the bottom subplot\nplt.subplot(2,1,2)\nplt.title('rescaled image')\nplt.axis('off')\nplt.imshow(rescaled_image)\n\nplt.show()","09386dee":"import seaborn as sns\n\n# Plot a linear regression between 'weight' and 'hp'\nsns.lmplot(x='weight', y='hp', data=data_auto)\n\n# Display the plot\nplt.show()","909802a3":"# Generate a green residual plot of the regression between 'hp' and 'mpg'\nsns.residplot(x='hp', y='mpg', data=data_auto, color='green')\n\n# Display the plot\nplt.show()","eaa82cf5":"# Generate a scatter plot of 'weight' and 'mpg' using red circles\nplt.scatter(data_auto['weight'], data_auto['mpg'], label='data', color='red', marker='o')\n\n# Plot in blue a linear regression of order 1 between 'weight' and 'mpg'\nsns.regplot(x='weight', y='mpg', data=data_auto, scatter=None, color='blue', label='order 1')\n\n# Plot in green a linear regression of order 2 between 'weight' and 'mpg'\nsns.regplot(x='weight', y='mpg', data=data_auto, scatter=None, order=2, color='green', label='order 2')\n\n# Add a legend and display the plot\nplt.legend(loc='upper right')\nplt.show()","50b2d643":"# Plot a linear regression between 'weight' and 'hp', with a hue of 'origin' and palette of 'Set1'\nsns.lmplot(x='weight',y='hp',data=data_auto, hue = 'origin',palette='Set1')\n\n# Display the plot\nplt.show()\n","253a6ac9":"# Plot linear regressions between 'weight' and 'hp' grouped row-wise by 'origin'\nsns.lmplot(x='weight',y='hp',row='origin',data=data_auto)\n\n# Display the plot\nplt.show()\n","a9c22a55":"# Make a strip plot of 'hp' grouped by 'cyl'\nplt.subplot(2,1,1)\nsns.stripplot(x='cyl', y='hp', data=data_auto)\n\n# Make the strip plot again using jitter and a smaller point size\n# jitter=True helps spread out overlapping points\nplt.subplot(2,1,2)\nsns.stripplot(x='cyl', y='hp', data=data_auto,jitter=True,size=3)\n\n# Display the plot\nplt.show()\n","c3e01b7f":"plt.subplot(2,1,1)\nplt.show()","edc7ef1e":"# In the first row of subplots\n# Generate a swarm plot of 'hp' grouped horizontally by 'cyl'  \nplt.subplot(2,1,1)\nsns.swarmplot(x='cyl',y='hp',data=data_auto)\n\n# In the second row of subplots\n# Generate a swarm plot of 'hp' grouped vertically by 'cyl' with a hue of 'origin'\n# The orientation can be set explicitly using orient='h' (horizontal) or orient='v' (vertical).\nplt.subplot(2,1,2)\nsns.swarmplot(x='hp',y='cyl',data=data_auto,hue='origin',orient='h')\n\n# Display the plot\nplt.show()\n","5ed69c60":"# Generate a violin plot of 'hp' grouped horizontally by 'cyl'\nplt.subplot(2,1,1)\nsns.violinplot(x='cyl', y='hp', data=data_auto)\n\n# Generate the same violin plot again with a color of 'lightgray' and without inner annotations\nplt.subplot(2,1,2)\nsns.violinplot(x='cyl', y='hp', data=data_auto,color='lightgray',inner=None)\n\n# Overlay a strip plot on the violin plot\nsns.stripplot(x='cyl', y='hp', data=data_auto,jitter=True,size=1.5)\n\n# Display the plot\nplt.show()","833cc04f":"# Generate a joint plot of 'hp' and 'mpg'\nsns.jointplot(x='hp',y='mpg',data=data_auto)\n\n# Display the plot\nplt.show()\n","116ca6e4":"# Parameter \"kind\" to specify how to visualize the joint variation of two continuous random variables\n# kind='scatter' uses a scatter plot of the data points\n# kind='reg' uses a regression plot (default order 1)\n# kind='resid' uses a residual plot\n# kind='kde' uses a kernel density estimate of the joint distribution\n# kind='hex' uses a hexbin plot of the joint distribution\n\n# Generate a joint plot of 'hp' and 'mpg' using a hexbin plot\nsns.jointplot(x='hp',y='mpg',data=data_auto, kind='hex')\n\n# Display the plot\nplt.show()\n","7135ee69":"# Print the first 5 rows of the DataFrame\nprint(data_auto.head())\n\n# Plot the pairwise joint distributions from the DataFrame \nsns.pairplot(data_auto)\n\n# Display the plot\nplt.show()\n","4ce6caba":"# Print the first 5 rows of the DataFrame\nprint(data_auto.head())\n\n# Plot the pairwise joint distributions grouped by 'origin' along with regression lines\n# 'reg' means 'regression'\nsns.pairplot(data=data_auto,hue='origin',kind='reg')\n\n# Display the plot\nplt.show()\n","6230bc43":"# covariance matrix between the continuous variables in the auto-mpg dataset.\ncov_matrix = data_auto.drop([ 'cyl','yr','size'], axis=1).corr(method='spearman')","720776ea":"cov_matrix","4bf8db48":"# Visualize the covariance matrix using a heatmap\nsns.heatmap(cov_matrix)\n\n# Display the heatmap\nplt.show()","c97b5f90":"data_stocks = pd.read_csv('..\/input\/stocks\/stocks.csv')","0ba52e0c":"data_stocks.head()","a9dc1b3e":"# Convert data_stocks['Date'] from string to datetime\ndata_stocks['Date'] = pd.to_datetime(data_stocks['Date'])","ebeaffd8":"# Set data_stocks['Date'] as the index and delete the column\ndata_stocks.index = data_stocks['Date']\ndel data_stocks['Date']","78cc949b":"# Check if the index changed\ntype(data_stocks.index) # Yeap!","f8dc81e1":"# Create pandas series for Apple stocks with date index\naapl = data_stocks.AAPL","b30ecf08":"aapl.head()","dd9b6204":"type(aapl)","8de2b5b5":"# Create pandas series for IBM, CSCO and MSFT stocks with date index\nibm = data_stocks.IBM\ncsco = data_stocks.CSCO\nmsft = data_stocks.MSFT","c1d40ba4":"data_stocks.head()","3eafefee":"\n# Plot the aapl time series in blue\nplt.plot(aapl, color='blue', label='AAPL')\n\n# Plot the ibm time series in green\nplt.plot(ibm, color='green', label='IBM')\n\n# Plot the csco time series in red\nplt.plot(csco, color='red', label='CSCO')\n\n# Plot the msft time series in magenta\nplt.plot(msft, color='magenta', label='MSFT')\n\n\n# Add a legend in the top left corner of the plot\nplt.legend(loc='upper left')\n\n# Specify the orientation of the xticks\nplt.xticks(rotation=60)\n\n# Display the plot\nplt.show()\n","92e5aed6":"# Plot the series in the top subplot in blue\nplt.subplot(2,1,1)\nplt.xticks(rotation=45)\nplt.title('AAPL: 2001 to 2011')\nplt.plot(aapl, color='blue')\n\n# Slice aapl from '2007' to '2008' inclusive: view\nview = aapl['2007':'2008']\n\n# Plot the sliced data in the bottom subplot in black\nplt.subplot(2,1,2)\nplt.xticks(rotation=45)\nplt.title('AAPL: 2007 to 2008')\nplt.plot(view, color='black')\nplt.tight_layout()\nplt.show()\n","bc6a05d9":"# Slice aapl from Nov. 2007 to Apr. 2008 inclusive: view\nview = aapl['2007-11':'2008-04']\n\n# Plot the sliced series in the top subplot in red\nplt.subplot(2,1,1)\nplt.plot(view, color='red')\nplt.title('AAPL: Nov. 2007 to Apr. 2008')\nplt.xticks(rotation=45)\n\n# Reassign the series by slicing the month January 2008\nview = aapl['2008-01']\n\n# Plot the sliced series in the bottom subplot in green\nplt.subplot(2,1,2)\nplt.plot(view, color='green')\nplt.title('AAPL: Jan. 2008')\nplt.xticks(rotation=45)\n\n\n# Improve spacing and display the plot\nplt.tight_layout()\nplt.show()\n","04e451d1":"# Slice aapl from Nov. 2007 to Apr. 2008 inclusive: view\nview = aapl['2007-11':'2008-04']\n\n# Plot the entire series \nplt.plot(aapl)\nplt.xticks(rotation=45)\nplt.title('AAPL: 2001-2011')\n\n# Specify the axes\nplt.axes([0.25, 0.5, 0.35, 0.35])\n\n# Plot the sliced series in red using the current axes\nplt.plot(view,color='red')\nplt.xticks(rotation=45)\nplt.title('2007\/11-2008\/04')\nplt.show()\n","ba71e9eb":"# Windowed averages of the series aapl Computed over windows of width 30 days\nmean_30 = aapl.rolling(window=30).mean()","611b9826":"mean_30.head()","f54600ee":"mean_30[-5:]","2a7fd961":"# Windowed averages of the series aapl Computed over windows of width 75, 125, and 250 days\nmean_75 = aapl.rolling(window=75).mean()\nmean_125 = aapl.rolling(window=125).mean()\nmean_250 = aapl.rolling(window=250).mean()","11130cdf":"# Plot the 30-day moving average in the top left subplot in green\nplt.subplot(2, 2, 1)\nplt.plot(mean_30, 'green')\nplt.plot(aapl, 'k-.')\nplt.xticks(rotation=60)\nplt.title('30d averages')\n\n# Plot the 75-day moving average in the top right subplot in red\nplt.subplot(2, 2, 2)\nplt.plot(mean_75, 'red')\nplt.plot(aapl, 'k-.')\nplt.xticks(rotation=60)\nplt.title('75d averages')\n\n# Plot the 125-day moving average in the bottom left subplot in magenta\nplt.subplot(2, 2, 3)\nplt.plot(mean_125, 'magenta')\nplt.plot(aapl, 'k-.')\nplt.xticks(rotation=60)\nplt.title('125d averages')\n\n# Plot the 250-day moving average in the bottom right subplot in cyan\nplt.subplot(2,2,4)\nplt.plot(mean_250,'cyan')\nplt.plot(aapl, 'k-.')\nplt.xticks(rotation=60)\nplt.title('250d averages')\n\n# Display the plot\nplt.show()\n","e2d5eb08":"# Windowed standard deviations of the series aapl computed over windows of width 30, 75, 125, and 250 days \nstd_30 = aapl.rolling(window=30).std()\nstd_75 = aapl.rolling(window=75).std()\nstd_125 = aapl.rolling(window=125).std()\nstd_250 = aapl.rolling(window=250).std()","b4c428b2":"# Plot std_30 in red\nplt.plot(std_30, 'red', label='30d')\n\n# Plot std_75 in cyan\nplt.plot(std_75, 'cyan', label='75d')\n\n# Plot std_125 in green\nplt.plot(std_125,'green',label='125d')\n\n# Plot std_250 in magenta\nplt.plot(std_250,'magenta',label='250d')\n\n# Add a legend to the upper left\nplt.legend(loc='upper left')\n\n# Add a title\nplt.title('Moving standard deviations')\n\n# Display the plot\nplt.show()\n","44c5ce2b":"image","c96f038e":"plt.imshow(image)","6a57bb81":"# We have already loaded the image into an array\nimage","b12d2940":"# Display image in top subplot using color map 'gray'\nplt.subplot(2,1,1)\nplt.title('Original image')\nplt.axis('off')\nplt.imshow(image,cmap='gray')\n\n# Flatten the image into 1 dimension: pixels\npixels = image.flatten()\n\n# Display a histogram of the pixels in the bottom subplot\nplt.subplot(2,1,2)\nplt.xlim((0,255))\nplt.title('Normalized histogram')\nplt.hist(pixels,bins=64,color='red',alpha=0.4,range=(0,256),normed=True)\n\n# Display the plot\nplt.show()","b891c51e":"\n# Display image in top subplot using color map 'gray'\nplt.subplot(2,1,1)\nplt.imshow(image, cmap='gray')\nplt.title('Original image')\nplt.axis('off')\n\n# Flatten the image into 1 dimension: pixels\npixels = image.flatten()\n\n# Display a histogram of the pixels in the bottom subplot\n# Probability Distribution Function = PDF, a histogram of a continuous random variable\nplt.subplot(2,1,2)\npdf = plt.hist(pixels, bins=64, range=(0,256), normed=False,\n               color='red', alpha=0.4)\nplt.grid('off')\n\n# Use plt.twinx() to overlay the CDF in the bottom subplot\n# Allows two plots to be overlayed sharing the x-axis but with different scales on the y-axis.\nplt.twinx() \n\n# Display a cumulative histogram of the pixels\n# Cumulative Distribution Function = CDF ,quantifies the probability of observing certain pixel intensities.\n# cumulative=True permits viewing the CDF instead of the PDF\ncdf = plt.hist(pixels, bins=64, range=(0,256),\n               normed=True, cumulative=True,\n               color='blue', alpha=0.4)\n               \n# Specify x-axis range, hide axes, add title and display plot\nplt.xlim((0,256))\nplt.grid('off') # Switches off distracting grid lines\nplt.title('PDF & CDF (original image)')\n\nplt.show()\n\n","4cdde758":"\n# Flatten the image into 1 dimension: pixels\npixels = image.flatten()\n\n# Generate a cumulative histogram\ncdf, bins, patches = plt.hist(pixels, bins=256, range=(0,256), normed=True, cumulative=True)\nnew_pixels = np.interp(pixels, bins[:-1], cdf*255)\n\n# Reshape new_pixels as a 2-D array: new_image\nnew_image = new_pixels.reshape(image.shape)\n\n# Display the new image with 'gray' color map\nplt.subplot(2,1,1)\nplt.title('Equalized image')\nplt.axis('off')\nplt.imshow(new_image,cmap='gray')\n\n# Generate a histogram of the new pixels\nplt.subplot(2,1,2)\npdf = plt.hist(new_pixels, bins=64, range=(0,256), normed=False,\n               color='red', alpha=0.4)\nplt.grid('off')\n\n# Use plt.twinx() to overlay the CDF in the bottom subplot\nplt.twinx()\nplt.xlim((0,256))\nplt.grid('off')\n\n# Add title\nplt.title('PDF & CDF (equalized image)')\n\n# Generate a cumulative histogram of the new pixels\ncdf = plt.hist(new_pixels, bins=64, range=(0,256),\n               cumulative=True, normed=True,\n               color='blue', alpha=0.4)\nplt.show()\n","a92fd75b":"# Source = http:\/\/imgsrc.hubblesite.org\/hu\/db\/images\/hs-2004-32-b-small_web.jpg\nimage_nebula = plt.imread('..\/input\/nebula\/hs-2004-32-b-small_web.jpg')","386eb0f3":"\n# Display image in top subplot\nplt.subplot(2,1,1)\nplt.title('Original image')\nplt.axis('off')\nplt.imshow(image_nebula)\n\n# Extract 2-D arrays of the RGB channels: red, blue, green\nred, green, blue = image_nebula[:,:,0], image_nebula[:,:,1], image_nebula[:,:,2]\n\n# Flatten the 2-D arrays of the RGB channels into 1-D\nred_pixels = red.flatten()\nblue_pixels = blue.flatten()\ngreen_pixels = green.flatten()\n\n# Overlay histograms of the pixels of each color in the bottom subplot\nplt.subplot(2,1,2)\nplt.title('Histograms from color image')\nplt.xlim((0,256))\nplt.hist(red_pixels, bins=64, normed=True, color='red', alpha=0.2)\nplt.hist(blue_pixels, bins=64, normed=True, color='blue', alpha=0.2)\nplt.hist(green_pixels, bins=64, normed=True, color='green', alpha=0.2)\n\n# Display the plot\nplt.show()\n","a051548c":"\n# Extract RGB channels and flatten into 1-D array\nred, blue, green = image_nebula[:,:,0], image_nebula[:,:,1], image_nebula[:,:,2]\nred_pixels = red.flatten()\nblue_pixels = blue.flatten()\ngreen_pixels = green.flatten()\n\n# Generate a 2-D histogram of the red and green pixels\nplt.subplot(2,2,1)\nplt.grid('off') \nplt.xticks(rotation=60)\nplt.xlabel('red')\nplt.ylabel('green')\nplt.hist2d(red_pixels, green_pixels, bins=(32,32))\n\n# Generate a 2-D histogram of the green and blue pixels\nplt.subplot(2,2,2)\nplt.grid('off')\nplt.xticks(rotation=60)\nplt.xlabel('green')\nplt.ylabel('blue')\nplt.hist2d(green_pixels, blue_pixels, bins=(32, 32))\n\n# Generate a 2-D histogram of the blue and red pixels\nplt.subplot(2,2,3)\nplt.grid('off')\nplt.xticks(rotation=60)\nplt.xlabel('blue')\nplt.ylabel('red')\nplt.hist2d(blue_pixels, red_pixels, bins=(32, 32))\n\n# Display the plot\nplt.show()\n","2e8d49c7":"# You can use this approach to create subplots in any layout of your choice.","40f75858":"#  plt.axis() allows you to set limits for both axes at once, as opposed to setting them individually with plt.xlim() and plt.ylim()","3637213d":"# Seaborn makes it very easy to quickly plot the residuals of regressions, as shown here.","bfbdd5e9":"# It seems like a regression of order 2 is necessary to properly capture the relationship between 'weight' and 'mpg'.","18315194":"# For analyzing time series, we need to change index","83100f37":"# It is easier to make sense of the three regression lines now that they each have their own subplot.","56a2ea18":"# Choosing a good color map can make it significantly easier to quickly understand the structure of your data.","803c88e9":"# Seaborn's pairplots are an excellent way of visualizing the relationship between all continuous variables in a dataset.","310a28da":"# Wider moving windows(250d) admit greater variability!\n#  That most consistently produces the greatest variance (standard deviation) in the AAPL stock price over the time interval shown","f81d7d05":"# Notice how the array is now 2D.","869c08b0":"# The function sns.jointplot() is restricted to representing joint variation between only two quantities (i.e., two columns of a DataFrame). Visualizing multivariate relationships is trickier.  The function sns.pairplot() constructs a grid of all joint plots pairwise from all pairs of (non-categorical) columns in a DataFrame. ","8c77f53c":"# The 'ggplot' style is a popular one.","8d150e99":"# Typical joint plot","16e9905a":"# Using just one command, you're able to quickly extract a lot of valuable insight from a dataset.","b46d67a7":"# 'hp' is the continuous variable, and 'cyl' is the categorical variable. The strip plot shows that automobiles with more cylinders tend to have higher horsepower.","29de738a":"# Using subplots like this is a better alternative to using plt.axes()","aadcf958":"# It looks like US automobiles tend to have higher hp(horsepower).","667c47bf":"\n# ___ THE END \n","cda6d5e1":"# Histogram equalization can help make an image sharper.","956a1bb8":"# The histogram is not well centered over the range of possible pixel intensies. The CDF rises sharply near the middle (that relates to the overall grayness of the image).","944236b0":"# This image is represented as a 3D array. As you can see in the IPython Shell, its shape is (480, 480, 3)","45e28cb7":"# Violin plots are a nice way of visualizing the relationship between a continuous variable and a categorical variable.","97fbab8e":"# Not only are there now two separate plots with their own axes, but the axes for each plot are slightly different.","8aaf3d6e":"# Unsurprisingly, there is a strong correlation between 'hp' and 'weight', and a linear regression is easily able to capture this trend.","9fe1448d":"# See how the histogram generated from this color image differs from the histogram I generated earlier from a grayscale image.","c10394a4":"#  Inset views are a useful way of comparing time series data.","98607e28":"# 'AAPL' has done particularly well in recent years!","37715593":"# hexbin plot of the joint distribution","16281d36":"# This plot effectively captures the difference in trends between 1990 and 2010.","ddf6ac23":"# The rescaled image has pixel intensities in between 0 and 256.","3b605f07":"# Always use axes labels and legends to help make your plots more readable.\n","423bae77":"# Annotations are extremely useful to help make more complicated plots easier to understand.","7e6e03e7":"# When pair plot starts to become visually overwhelming, heat maps are a great alternative.","bd5a8a17":"#  The bottom two contour plots are filled, because you used plt.contourf() instead of plt.contour().","36a5813c":"#  Image histograms are an important component of many image processing algorithms.","5d1775c6":"# Cars with higher hp have lower mpg.","c7e995e8":"# For the last 25 years or so, more women have been awarded undergraduate degrees in the Physical Sciences than in Computer Science.","4b1b1b15":"#  Plotting time series at different intervals can provide you with deeper insight into your data.","5ef796ef":"# Swarm plots are generally easier to understand than strip plots because they spread out the points to avoid overlap.","0ef2f195":"> # Plotting 2D arrays\n\n"}}