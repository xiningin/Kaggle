{"cell_type":{"c5bb1d5a":"code","f2d4ce48":"code","d7f10c00":"code","2601f027":"code","80fe3f40":"code","66449d1e":"code","733d1f46":"code","5713a9d3":"code","8ccca200":"code","7fd19eea":"code","81f301c2":"code","a3d0a679":"code","e1910677":"markdown","191ab612":"markdown","9eb331eb":"markdown","0db0f799":"markdown"},"source":{"c5bb1d5a":"from sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks import ReduceLROnPlateau\nimport matplotlib.pyplot as plt\n\nimport random\nimport time\nimport os\n\n\nfrom scipy import signal\nfrom scipy.fft import fftshift\nimport numpy as np\n\n\n\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import hamming_loss\nfrom sklearn.metrics import label_ranking_average_precision_score\nfrom sklearn.metrics import multilabel_confusion_matrix\n\n\n# Binary Relevance\nfrom sklearn.multiclass import OneVsRestClassifier\n\n# Performance metric\nfrom sklearn.metrics import f1_score\n\nfrom sklearn.model_selection import cross_val_score\n#from sklearn.metrics import multilabel_confusion_matrix\n#from mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","f2d4ce48":"ACTIONS = [\"kiri\", \"maju\",\"idle\",\"kanan\"]\nreshape = (-1,8, 60)\n","d7f10c00":"def create_data(starting_dir=\"..\/input\/eeg8chanel\/data8\"):\n    training_data = {}\n    for action in ACTIONS:\n        if action not in training_data:\n            training_data[action] = []\n        data_dir = os.path.join(starting_dir,action)\n        for item in os.listdir(data_dir):\n            data = np.load(os.path.join(data_dir, item))\n            for item in data:\n                training_data[action].append(item)\n\n    lengths = [len(training_data[action]) for action in ACTIONS]\n    print(lengths)\n\n    for action in ACTIONS:\n        np.random.shuffle(training_data[action])  \n        training_data[action] = training_data[action][:min(lengths)]\n\n    lengths = [len(training_data[action]) for action in ACTIONS]\n    print(lengths)\n    combined_data = []\n    for action in ACTIONS:\n        for data in training_data[action]:\n            if action == \"kiri\":\n                combined_data.append([data, [1, 0, 0,0]])\n            elif action == \"maju\":\n                combined_data.append([data, [0, 1, 0, 0]])\n            elif action == \"idle\":\n                combined_data.append([data, [0, 0, 1, 0]])\n            elif action == \"kanan\":\n                combined_data.append([data, [0, 0, 0, 1]])\n\n    np.random.shuffle(combined_data)\n    print(\"length:\",len(combined_data))\n    return combined_data\n","2601f027":"print(\"creating training data\")\ntraindata = create_data(starting_dir=\"..\/input\/eeg8chanel\/data8\")\ntrain_X = []\ntrain_y = []\n\nfor X, y in traindata:\n    train_X.append(X)\n    train_y.append(y)\n\n","80fe3f40":"train_X = np.array(train_X).reshape(reshape)\ntrain_y = np.array(train_y)\n\n\nx_train,x_test,y_train,y_test=train_test_split(train_X,train_y,test_size=0.2,random_state = np.random.randint(1,1000, 1)[0] )\nx_train = np.asarray(x_train)\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n\nx_train = [np.concatenate(i) for i in x_train]\nx_test = [np.concatenate(i) for i in x_test]","66449d1e":"sgd = SGDClassifier()\nlr = LogisticRegression()\nrf = RandomForestClassifier()\nld = LinearDiscriminantAnalysis()\nsv = SVC()\nada= AdaBoostClassifier()\nkn = KNeighborsClassifier()\nGU = GaussianNB()\nDT = DecisionTreeClassifier()\n\n\nclf1 =OneVsRestClassifier(sgd)\nclf2 =OneVsRestClassifier(lr)\nclf3 =OneVsRestClassifier(rf)\nclf4 =OneVsRestClassifier(ld)\nclf5 =OneVsRestClassifier(sv)  \nclf6 =OneVsRestClassifier(ada) \nclf7 =OneVsRestClassifier(kn) \nclf8 =OneVsRestClassifier(GU) \nclf9 =OneVsRestClassifier(DT) \n\n\nclf1.fit(x_train,y_train)\nclf2.fit(x_train,y_train)\nclf3.fit(x_train,y_train)\nclf4.fit(x_train,y_train)\nclf5.fit(x_train,y_train)\nclf6.fit(x_train,y_train)\nclf7.fit(x_train,y_train)\nclf8.fit(x_train,y_train)\nclf9.fit(x_train,y_train)\n\npredictions1 = clf1.predict(x_test)\npredictions2 = clf2.predict(x_test)\npredictions3 = clf3.predict(x_test)\npredictions4 = clf4.predict(x_test)\npredictions5 = clf5.predict(x_test)\npredictions6 = clf6.predict(x_test)\npredictions7 = clf7.predict(x_test)\npredictions8 = clf8.predict(x_test)\npredictions9 = clf9.predict(x_test)\n\n\n# accuracy\n\nprint( \"SGD\")\nprint(\"Accuracy = \",accuracy_score(y_test,predictions1))\nprint(\"Hamming Loss = \",hamming_loss(y_test,predictions1))\nprint(\"label_ranking_average_precision_score\",label_ranking_average_precision_score(y_test,predictions1))\nprint(classification_report(y_test,predictions1))\n\n# accuracy\n\nprint( \"LR\")\nprint(\"Accuracy = \",accuracy_score(y_test,predictions2))\nprint(\"Hamming Loss = \",hamming_loss(y_test,predictions2))\nprint(\"label_ranking_average_precision_score\",label_ranking_average_precision_score(y_test,predictions2))\nprint(classification_report(y_test,predictions2))\n\n# accuracy\n\nprint( \"RF\")\nprint(\"Accuracy = \",accuracy_score(y_test,predictions3))\nprint(\"Hamming Loss = \",hamming_loss(y_test,predictions3))\nprint(\"label_ranking_average_precision_score\",label_ranking_average_precision_score(y_test,predictions3))\nprint(classification_report(y_test,predictions3))\n\n# accuracy\n\nprint( \"LD\")\nprint(\"Accuracy = \",accuracy_score(y_test,predictions4))\nprint(\"Hamming Loss = \",hamming_loss(y_test,predictions4))\nprint(\"label_ranking_average_precision_score\",label_ranking_average_precision_score(y_test,predictions4))\nprint(classification_report(y_test,predictions4))\n\n# accuracy\n\nprint( \"SV\")\nprint(\"Accuracy = \",accuracy_score(y_test,predictions5))\nprint(\"Hamming Loss = \",hamming_loss(y_test,predictions5))\nprint(\"label_ranking_average_precision_score\",label_ranking_average_precision_score(y_test,predictions5))\nprint(classification_report(y_test,predictions5))\n\n# accuracy\n\nprint( \"AD\")\nprint(\"Accuracy = \",accuracy_score(y_test,predictions6))\nprint(\"Hamming Loss = \",hamming_loss(y_test,predictions6))\nprint(\"label_ranking_average_precision_score\",label_ranking_average_precision_score(y_test,predictions6))\nprint(classification_report(y_test,predictions6))\n# accuracy\n\nprint( \"KN\")\nprint(\"Accuracy = \",accuracy_score(y_test,predictions7))\nprint(\"Hamming Loss = \",hamming_loss(y_test,predictions7))\nprint(\"label_ranking_average_precision_score\",label_ranking_average_precision_score(y_test,predictions7))\nprint(classification_report(y_test,predictions7))\n# accuracy\n\nprint( \"GU\")\nprint(\"Accuracy = \",accuracy_score(y_test,predictions8))\nprint(\"Hamming Loss = \",hamming_loss(y_test,predictions8))\nprint(\"label_ranking_average_precision_score\",label_ranking_average_precision_score(y_test,predictions8))\nprint(classification_report(y_test,predictions8))\n         \nprint( \"DT\")\nprint(\"Accuracy = \",accuracy_score(y_test,predictions9))\nprint(\"Hamming Loss = \",hamming_loss(y_test,predictions9))\nprint(\"label_ranking_average_precision_score\",label_ranking_average_precision_score(y_test,predictions9))\nprint(classification_report(y_test,predictions9))         \n\n#print('training time taken: ',round(time.time()-start,0),'seconds')\n","733d1f46":"#cross validasi\nscores1 = cross_val_score( clf1, x_train,y_train, cv=5, scoring='f1_macro')\nscores2 = cross_val_score( clf2, x_train,y_train, cv=5, scoring='f1_macro')\nscores3 = cross_val_score( clf3, x_train,y_train, cv=5, scoring='f1_macro')\nscores4 = cross_val_score( clf4, x_train,y_train, cv=5, scoring='f1_macro')\nscores5 = cross_val_score( clf5, x_train,y_train, cv=5, scoring='f1_macro')\nscores6 = cross_val_score( clf6, x_train,y_train, cv=5, scoring='f1_macro')\nscores7 = cross_val_score( clf7, x_train,y_train, cv=5, scoring='f1_macro')\nscores8 = cross_val_score( clf8, x_train,y_train, cv=5, scoring='f1_macro')\nscores9 = cross_val_score( clf9, x_train,y_train, cv=5, scoring='f1_macro')\n\nprint (\"sgd\",scores1)\nprint (\"lr\",scores2)\nprint (\"rf\",scores3)\nprint (\"ld\",scores4)\nprint (\"sv\",scores5)\nprint (\"ad\",scores6)\nprint (\"kn\",scores7)\nprint (\"gu\",scores8)\nprint (\"dt\",scores9)","5713a9d3":"import matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n\ndata = {'SGD': accuracy_score(y_test,predictions1), 'LR': accuracy_score(y_test,predictions2), \n        'RF': accuracy_score(y_test,predictions3), 'LDA': accuracy_score(y_test,predictions4),\n        'SVM': accuracy_score(y_test,predictions5),'AD': accuracy_score(y_test,predictions6),\n        'KNN': accuracy_score(y_test,predictions7),'GU': accuracy_score(y_test,predictions8),\n        'Dt': accuracy_score(y_test,predictions9),}\nnames = list(data.keys())\nvalues = list(data.values())\nprint(names)\nprint(values)\nplt.figure(figsize=(15, 6))\nplt.bar(names,values)\n\n","8ccca200":"from sklearn.metrics import roc_curve, auc\ny_score = clf3.predict(x_test)\n#y_score = clf.predict(xval)\n\n# Compute ROC curve and ROC area for each class\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\nfor i in range(4):\n    fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_score[:, i])\n    roc_auc[i] = auc(fpr[i], tpr[i])\nACTIONS =  [\"idle\",\"maju\",\"kiri\", \"kanan\"]\n# Plot of a ROC curve for a specific class\nfor i in range(4):\n    plt.figure()\n    plt.plot(fpr[i], tpr[i], label='ROC curve (area = %0.2f)' % roc_auc[i])\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([-0.05, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    #plt.title('Receiver operating characteristic example')\n    plt.title('%s RF (area = %0.2f)' % (ACTIONS[i],roc_auc[i]))\n    plt.legend(loc=\"lower right\")\n    plt.show()","7fd19eea":"\ncm=multilabel_confusion_matrix(y_test, predictions3)\nprint(cm)\n\nf, axes = plt.subplots(1, 4, figsize=(25, 15))\naxes = axes.ravel()\n\nfor i in range(4):\n    disp = ConfusionMatrixDisplay(confusion_matrix(y_test[:, i],\n                                                   predictions3[:, i]),\n                                  display_labels=[0, i])\n    disp.plot(ax=axes[i], values_format='.4g')\n    disp.ax_.set_title(f'class {i}')\n    \n    if i<10:\n        disp.ax_.set_xlabel('')\n    if i%5!=0:\n        disp.ax_.set_ylabel('')\n    disp.im_.colorbar.remove()\n\nplt.subplots_adjust(wspace=0.10, hspace=0.1)\nf.colorbar(disp.im_, ax=axes)\nplt.show()\n\n\n\n","81f301c2":"from sklearn.metrics import roc_curve, auc\ny_score = clf7.predict(x_test)\n#y_score = clf.predict(xval)\n\n# Compute ROC curve and ROC area for each class\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\nfor i in range(4):\n    fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_score[:, i])\n    roc_auc[i] = auc(fpr[i], tpr[i])\nACTIONS =  [\"idle\",\"maju\",\"kiri\", \"kanan\"]\n# Plot of a ROC curve for a specific class\nfor i in range(4):\n    plt.figure()\n    plt.plot(fpr[i], tpr[i], label='ROC curve (area = %0.2f)' % roc_auc[i])\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([-0.05, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    #plt.title('Receiver operating characteristic example')\n    plt.title('%s KNN (area = %0.2f)' % (ACTIONS[i],roc_auc[i]))\n    plt.legend(loc=\"lower right\")\n    plt.show()","a3d0a679":"\ncm2=multilabel_confusion_matrix(y_test, predictions7)\n\n\nprint(cm)\n\nf, axes = plt.subplots(1, 4, figsize=(25, 15))\naxes = axes.ravel()\n\nfor i in range(4):\n    disp = ConfusionMatrixDisplay(confusion_matrix(y_test[:, i],\n                                                   predictions7[:, i]),\n                                  display_labels=[0, i])\n    disp.plot(ax=axes[i], values_format='.4g')\n    disp.ax_.set_title(f'class {i}')\n    \n    if i<10:\n        disp.ax_.set_xlabel('')\n    if i%5!=0:\n        disp.ax_.set_ylabel('')\n    disp.im_.colorbar.remove()\n\nplt.subplots_adjust(wspace=0.10, hspace=0.1)\nf.colorbar(disp.im_, ax=axes)\nplt.show()\n\n","e1910677":"#KNN","191ab612":"#RF","9eb331eb":"#ML","0db0f799":"# DATA"}}