{"cell_type":{"1206405a":"code","da42656a":"code","d19579cb":"code","20597907":"code","9358add9":"code","cb343e24":"code","d5bdf7e5":"code","89eab224":"code","f26cb35b":"code","944b1f50":"code","379f99b7":"code","1f2eb5e4":"code","0b9ec074":"code","a31e10d0":"code","08c476f2":"markdown","46726fd1":"markdown","7e481642":"markdown","e999d93b":"markdown"},"source":{"1206405a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","da42656a":"data = pd.read_csv(\"\/kaggle\/input\/performance-prediction\/summary.csv\")\ndata.head()","d19579cb":"#check for missing values\ndata.isna().sum()","20597907":"#fill in the missing values with mode\ndata[\"3PointPercent\"].fillna(data[\"3PointPercent\"].mean(),inplace=True)\ndata.isna().sum()","9358add9":"#perform EDA to check linear relationships \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nX=data.iloc[:,:20]\ny=data[\"Target\"]\n#check for multi-collinearity\ncorr=X.corr()\ncorr.style.background_gradient(cmap='coolwarm')","cb343e24":"from sklearn.decomposition import PCA\npca = PCA().fit(X.iloc[:,1:])\nplt.grid(True)\nplt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.xlabel('number of components')\nplt.ylabel('cumulative explained variance');","d5bdf7e5":"import sklearn.metrics\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42,shuffle=True)","89eab224":"pca = PCA(n_components=5)\nX_train_pca=X_train.drop('Name',axis=1)\nX_test_pca=X_test.drop('Name',axis=1)\ntrain_pca = pca.fit_transform(X_train_pca)\ntest_pca = pca.fit_transform(X_test_pca)\ntrain_pca.shape,test_pca.shape","f26cb35b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import accuracy_score,classification_report\nlr = LogisticRegression(max_iter=100,random_state=10)\nlr.fit(train_pca,y_train)\nlr_predictions = lr.predict(test_pca)\nscore = accuracy_score(y_test,lr_predictions) \nprint(\"This is the accuracy of our Logistic Regression Model is\",round(score*100))\nrep = classification_report(y_test,lr_predictions)\nprint(\"This is the Classification-Report : \\n\", rep)","944b1f50":"#Support-Vector Machine\nsvc = SVC(random_state=10,C=2.1)\nsvc.fit(train_pca,y_train)\nsvc_predictions = svc.predict(test_pca)\nscore = accuracy_score(y_test,svc_predictions) \nprint(\"This is the accuracy of our SVC Model is :\",round(score*100))\nrep = classification_report(y_test,svc_predictions)\nprint(\"This is the Classification-Report : \\n\", rep)","379f99b7":"nb = GaussianNB()\nnb.fit(train_pca,y_train)\nnb_predictions = nb.predict(test_pca)\nscore = accuracy_score(y_test,nb_predictions) \nprint(\"This is the accuracy of our Naive Bayes Model is:\",round(score*100))\nrep = classification_report(y_test,nb_predictions)\nprint(\"This is the Classification-Report : \\n\", rep)","1f2eb5e4":"ld = LinearDiscriminantAnalysis(solver='eigen',shrinkage='auto')\nld.fit(train_pca,y_train)\nld_predictions = ld.predict(test_pca)\nscore = accuracy_score(y_test,ld_predictions) \nprint(\"This is the accuracy of our LDA Model is:\",round(score*100))\nrep = classification_report(y_test,ld_predictions)\nprint(\"This is the Classification-Report : \\n\", rep)","0b9ec074":"#Create a  DataFrame with the passengers ids and our prediction regarding whether they survived or not\nsubmission = pd.DataFrame({'Names':X_test['Name'],'Target':svc_predictions})\n\n#Visualize the first 5 rows\nsubmission.head()","a31e10d0":"#Convert DataFrame to a csv file that can be uploaded\n#This is saved in the same directory as your notebook\nfilename = 'BasketBall Player Prediction.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","08c476f2":"**As we see, the feature variables show high multicollinearity and this can effect our linear classifier. to eliminate multicollinearity, we use PCA(Principal Component Analysis)**","46726fd1":"**First, Thank you for reading my Notebook. I would like to give a summary of the steps I followd:**\n* I filled the missing values with mean in 3pointerpercent Column.\n* Checked for Multi-collinearity and performed PCA to eliminate multicollinearity\n* Determined the Number of Components\n* Model Fitting: The best model was SVC with C=2.1(constant or penalty) which is a square of l2-regularization.\n* You can find other projects that I have done related to : Regression, NLP, Computer Vision, Web-Applications, Time-series, Data Visualization. on  [MyGithubRepo](http:\/\/github.com\/shouryasimha)","7e481642":"**The only column that has missing values is 3pointPercent**","e999d93b":"**We can see that the 5 compnents give us approximately close to 99% of variance in the data.**"}}