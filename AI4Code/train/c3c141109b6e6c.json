{"cell_type":{"a237991b":"code","90de652e":"code","4aaba9d0":"code","5dd663bb":"code","6fb8cab5":"code","ccf7624a":"code","8d1b6ae0":"code","b180c861":"code","bbb44381":"code","9c3fe0af":"code","7d9acfea":"code","de0c8d35":"code","740deb35":"code","bba3c48a":"code","b9734304":"markdown","6dcaf3ff":"markdown","01934081":"markdown","a5729f2b":"markdown","61e3d6dc":"markdown","1fceaf64":"markdown","56ee6817":"markdown"},"source":{"a237991b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90de652e":"#importing required modules\nfrom keras.applications import VGG16\n#loading the saved model\n#we are using the complete architecture thus include_top=True\nmodel = VGG16(weights='imagenet',include_top=True)\n#show the summary of model\nmodel.summary()","4aaba9d0":"#creating a mapping of layer name ot layer details \n#we will create a dictionary layers_info which maps a layer name to its charcteristics\nlayers_info = {}\nfor i in model.layers:\n    layers_info[i.name] = i.get_config()\n\n#here the layer_weights dictionary will map every layer_name to its corresponding weights\nlayer_weights = {}\nfor i in model.layers:\n    layer_weights[i.name] = i.get_weights()\n\nprint(layers_info['block5_conv1'])","5dd663bb":"!pip install keras-vis","6fb8cab5":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport theano\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom scipy import signal\nfrom skimage import filters\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2 as cv\nimport matplotlib.pyplot as plt\nfrom skimage.io import imread, imshow\nfrom theano import tensor as T\nimg = cv.imread('..\/input\/foto-102\/190312276012.jpg')\nimport numpy as np\nfrom subprocess import check_output#importing the required modules\n#from vis.visualization import visualize_activation\n#from vis.utils import utils\nfrom keras import activations\nfrom keras import applications\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (18,6)","ccf7624a":"img = cv.imread('..\/input\/foto-102\/190312276012.jpg')","8d1b6ae0":"layers = model.layers\nlayer_ids = [1,4,7,11,15]\n#plot the filters\nfig,ax = plt.subplots(nrows=1,ncols=5)\nfor i in range(5):\n    ax[i].imshow(layers[layer_ids[i]].get_weights()[0][:,:,:,0][:,:,0],cmap='gray')\n    ax[i].set_title('block'+str(i+1))\n    ax[i].set_xticks([])\n    ax[i].set_yticks([])","b180c861":"#importing the required modules\n#from vis.visualization import visualize_activation\n#from vis.utils import utils\nfrom keras import activations\nfrom keras import applications\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (18,6)\n#creating a VGG16 model using fully connected layers also because then we can \n#visualize the patterns for individual category\nfrom keras.applications import VGG16\nmodel = VGG16(weights='imagenet',include_top=True)\n\n#finding out the layer index using layer name\n#the find_layer_idx function accepts the model and name of layer as parameters and return the index of respective layer\n#layer_idx = utils.find_layer_idx(model,'predictions')\n#changing the activation of the layer to linear\n#model.layers[layer_idx].activation = activations.linear\n#applying modifications to the model\n#model = utils.apply_modifications(model)\n#Indian elephant\n#img3 = visualize_activation(model,layer_idx,filter_indices=385,max_iter=5000,verbose=True)\n#plt.imshow(img3)","bbb44381":"import numpy as np\n\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Activation, Conv2D, MaxPooling2D\nfrom keras.optimizers import Adam\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.activations import relu\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\ndef iter_occlusion(image, size=8):\n\n    occlusion = np.full((size * 5, size * 5, 1), [0.5], np.float32)\n    occlusion_center = np.full((size, size, 1), [0.5], np.float32)\n    occlusion_padding = size * 2\n\n    # print('padding...')\n    image_padded = np.pad(image, ( \\\n                        (occlusion_padding, occlusion_padding), (occlusion_padding, occlusion_padding), (0, 0) \\\n                        ), 'constant', constant_values = 0.0)\n\n    for y in range(occlusion_padding, image.shape[0] + occlusion_padding, size):\n\n        for x in range(occlusion_padding, image.shape[1] + occlusion_padding, size):\n            tmp = image_padded.copy()\n\n            tmp[y - occlusion_padding:y + occlusion_center.shape[0] + occlusion_padding, \\\n                x - occlusion_padding:x + occlusion_center.shape[1] + occlusion_padding] \\\n                = occlusion\n\n            tmp[y:y + occlusion_center.shape[0], x:x + occlusion_center.shape[1]] = occlusion_center\n\n            yield x - occlusion_padding, y - occlusion_padding, \\\n                  tmp[occlusion_padding:tmp.shape[0] - occlusion_padding, occlusion_padding:tmp.shape[1] - occlusion_padding]\n","9c3fe0af":"\nfrom keras.preprocessing.image import load_img\n# load an image from file\nimage = load_img('..\/input\/foto-102\/190312276012.jpg', target_size=(224, 224))\nplt.imshow(image)\nplt.title('ORIGINAL IMAGE')","7d9acfea":"from keras.preprocessing.image import img_to_array\nfrom keras.applications.vgg16 import preprocess_input\n# convert the image pixels to a numpy array\nimage = img_to_array(image)\n# reshape data for the model\nimage = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))\n# prepare the image for the VGG model\nimage = preprocess_input(image)\n# predict the probability across all output classes\nyhat = model.predict(image)\ntemp = image[0]\nprint(temp.shape)\nheatmap = np.zeros((224,224))\ncorrect_class = np.argmax(yhat)\nfor n,(x,y,image) in enumerate(iter_occlusion(temp,14)):\n    heatmap[x:x+14,y:y+14] = model.predict(image.reshape((1, image.shape[0], image.shape[1], image.shape[2])))[0][correct_class]\n    print(x,y,n,' - ',image.shape)\nheatmap1 = heatmap\/heatmap.max()\nplt.imshow(heatmap)","de0c8d35":"import skimage.io as io\n#creating mask from the standardised heatmap probabilities\nmask = heatmap1 < 0.85\nmask1 = mask *256\nmask = mask.astype(int)\nio.imshow(mask,cmap='gray')","740deb35":"import cv2\n#read the image\nimage = cv2.imread('..\/input\/foto-102\/190312276012.jpg')\nimage = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n#resize image to appropriate dimensions\nimage = cv2.resize(image,(224,224))\nmask = mask.astype('uint8')\n#apply the mask to the image\nfinal = cv2.bitwise_and(image,image,mask = mask)\nfinal = cv2.cvtColor(final,cv2.COLOR_BGR2RGB)\n#plot the final image\nplt.imshow(final)","bba3c48a":"#importing required libraries and functions\nfrom keras.models import Model\n#defining names of layers from which we will take the output\nlayer_names = ['block1_conv1','block2_conv1','block3_conv1','block4_conv2']\noutputs = []\nimage = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))\n#extracting the output and appending to outputs\nfor layer_name in layer_names:\n    intermediate_layer_model = Model(inputs=model.input,outputs=model.get_layer(layer_name).output)\n    intermediate_output = intermediate_layer_model.predict(image)\n    outputs.append(intermediate_output)\n#plotting the outputs\nfig,ax = plt.subplots(nrows=4,ncols=5,figsize=(20,20))\n\nfor i in range(4):\n    for z in range(5):\n        ax[i][z].imshow(outputs[i][0,:,:,z])\n        ax[i][z].set_title(layer_names[i])\n        ax[i][z].set_xticks([])\n        ax[i][z].set_yticks([])\nplt.savefig('layerwise_output.jpg')","b9734304":"Finally, we will impose the mask on our input image and plot that as well:\n\n","6dcaf3ff":"Here, we assign the probability as pixel values for every part of the image and then standardize them to generate a heatmap:","01934081":"  Really interesting. We will now create a mask using the standardized heatmap probabilities and plot it:\n\n","a5729f2b":"Now, we\u2019ll follow three steps:\n\nPreprocess this image\nCalculate the probabilities for different masked portions\nPlot the heatmap","61e3d6dc":"The above code defines a function iter_occlusion that returns an image with different masked portions.\n\nNow, let\u2019s import the image and plot it:","1fceaf64":"Visualizing the Process \u2013 Layerwise Output Visualization\nThe starting layers of a CNN generally look for low-level features like edges. The features change as we go deeper into the model.\n\nVisualizing the output at different layers of the model helps us see what features of the image are highlighted at the respective layer. This step is particularly important to fine-tune an architecture for our problems. Why? Because we can see which layers give what kind of features and then decide which layers we want to use in our model.\n\nFor example, visualizing layer outputs can help us compare the performance of different layers in the neural style transfer problem.\n\nLet\u2019s see how we can get the output at different layers of a VGG16 model:","56ee6817":"Really interesting. We will now create a mask using the standardized heatmap probabilities and plot it:\n\n"}}