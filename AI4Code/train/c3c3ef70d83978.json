{"cell_type":{"c98ff6d3":"code","25e3b174":"code","1ea3c16c":"code","e2ef9fdb":"code","b9db093e":"code","fa7ce1a6":"code","1fe19df9":"code","0d290c94":"code","45e901d9":"code","93974974":"code","9ced3241":"code","3eecf2db":"code","2a681ce8":"code","211d2b66":"code","718bdc60":"code","873cfdac":"code","fe47acf7":"code","d69742fb":"code","de264ebe":"markdown","6bc8662b":"markdown","703eec2b":"markdown","17bd286a":"markdown","8e9524aa":"markdown","5d4c479c":"markdown","52e24b1d":"markdown","a927ea56":"markdown","f40fd9df":"markdown","0e9c5877":"markdown","be51c283":"markdown","b1a0ae06":"markdown","12fe0a5d":"markdown"},"source":{"c98ff6d3":"from fuzzywuzzy import fuzz\nfrom fuzzywuzzy import process\n\nimport re\nimport nltk\nfrom nltk.util import ngrams\nfrom nltk.collocations import BigramCollocationFinder\nfrom nltk.metrics import BigramAssocMeasures\nfrom nltk.stem.porter import *\nfrom nltk.corpus import stopwords\n\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\n\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nfrom matplotlib import pyplot as plt\nplt.style.use('ggplot')\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","25e3b174":"accidents_df = pd.read_csv('\/kaggle\/input\/airplane-crashes-since-1908\/Airplane_Crashes_and_Fatalities_Since_1908.csv')\naccidents_df['Date'] = pd.to_datetime(accidents_df['Date'])\n\n\naccidents_df = accidents_df[~accidents_df.Type.isna()]\naccidents_df['Type'] = accidents_df.Type.str.lower()\naccidents_df = accidents_df[~accidents_df.Location.isna()]\n\naccidents_df['Location'] =accidents_df.apply(lambda r: r['Location'].replace('AtlantiOcean', 'Atlantic Ocean'), axis=1)\naccidents_df['Location'] =accidents_df.apply(lambda r: r['Location'].replace('PacifiOcean', 'Pacific Ocean'), axis=1)\n\n\naircraft_data = pd.read_csv('..\/input\/aircraft-production-data\/aircraft_data.csv', index_col='Unnamed: 0')\naircraft_data['aircraft'] = aircraft_data.aircraft.str.lower()","1ea3c16c":"aircraft_names = aircraft_data.aircraft.to_list()","e2ef9fdb":"def get_similar_name(string, references=aircraft_names):\n    max_ref = ''\n    max_sim = 0\n    \n    for i, item in enumerate(references):\n        sim = fuzz.ratio(item, string)\n        if sim >= max_sim:\n            max_ref = item\n            max_sim = sim\n    \n    if max_sim < 50:\n        return None, 0\n    return max_ref, max_sim","b9db093e":"get_similar_name('lockheed hercules')","fa7ce1a6":"#This is expensive (O(n^2))\naccidents_df['MostSimilar'] = accidents_df.apply(lambda r: get_similar_name(r['Type'])[0], axis=1)","1fe19df9":"accidents_df.sort_values(by='Date').head(9)","0d290c94":"accidents_df =  accidents_df[accidents_df['Date'] > '1950-01-01']\naccidents_df = accidents_df[(~accidents_df.MostSimilar.isna()) & ~accidents_df.Operator.isna()].reset_index(drop=True)\n\naccidents_df = accidents_df[~accidents_df.Operator.str.contains('Military')]","45e901d9":"merged = pd.merge(accidents_df, aircraft_data, left_on='MostSimilar', right_on='aircraft', how='left')","93974974":"accident_counts = merged.groupby('MostSimilar').agg(count=('MostSimilar', 'count')).sort_values(by='count', ascending=False).reset_index()\naccident_counts.head(15)","9ced3241":"accident_counts = merged.groupby('MostSimilar').agg(count=('MostSimilar', 'count'), built=('nbBuilt', 'mean')).sort_values(by='count', ascending=False).reset_index()\naccident_counts['accidentRatio'] = accident_counts['count'] \/ accident_counts['built']\n\naccident_counts = accident_counts[(accident_counts['built'] > accident_counts['count']) & (accident_counts['built'] > 50)]\n\naccident_counts.sort_values(by='accidentRatio', ascending=False).head(30)","3eecf2db":"stemmer = PorterStemmer()\nSTOPWORDS = stopwords.words('english') + ['aircraft', 'plane']","2a681ce8":"def plot_common_words(dataframe):\n    \n    summaries = stemmer.stem(' '.join(dataframe.Summary.dropna().to_list())).replace('.','').replace(',','').split()\n    summaries = [word for word in summaries if word not in STOPWORDS]\n    \n    word_fd = nltk.FreqDist(summaries)\n    bigram_fd = nltk.FreqDist(nltk.bigrams(summaries))\n    \n    fig, ax = plt.subplots(1,2, figsize=(22,10))\n\n    common = word_fd.most_common()[:20]\n    ax[0].barh([i[0] for i in common], [i[1] for i in common])\n    ax[0].invert_yaxis()\n\n    common = bigram_fd.most_common()[:20]\n    ax[1].barh([i[0][0] + ' ' + i[0][1] for i in common], [i[1] for i in common])\n    ax[1].invert_yaxis()\n\n    return fig","211d2b66":"@interact(airplane_name=accident_counts.sort_values(by='accidentRatio', ascending=False).head(30).MostSimilar.to_list())\ndef plot_causes_airplane(airplane_name):\n    fig = plot_common_words(merged[merged.aircraft == airplane_name])\n    fig.suptitle(airplane_name)\n    fig.show()   ","718bdc60":"# Or scatic version for kernel view-mode\ntop_names = accident_counts.sort_values(by='accidentRatio', ascending=False).head(30).MostSimilar.to_list()\nfor name in top_names[:3]:\n    fig = plot_common_words(merged[merged.aircraft == name])\n    fig.suptitle(name)\n    fig.show()","873cfdac":"# This is expensive (the requests to the service take time, around 1h) so I saved the result in a CSV to save time\nif False:\n    import geopy\n    from time import sleep\n    from tqdm import tqdm\n    from geopy.geocoders import Nominatim\n\n    geolocator = Nominatim(user_agent=\"aircraftaccidents\")\n\n    locations = []\n    locnames = merged.Location.unique().tolist()\n\n    with tqdm(total=len(locnames)) as pbar:\n        for i, item in enumerate(locnames):\n            loc = geolocator.geocode(item)\n            if loc is not None:\n                locations.append((loc.latitude, loc.longitude))\n            else:\n                locations.append((None, None))\n\n            sleep(1)\n            pbar.update(1)\n    locs_df = pd.DataFrame(locations, columns=['lat', 'lon'])\n    locs_df['name'] = locnames\n    locs_df.to_csv('..\/input\/locationcoordinates\/locations.csv')\nelse:\n    locs_df = pd.read_csv('..\/input\/locationcoordinates\/locations.csv')","fe47acf7":"merged = pd.merge(merged, locs_df, left_on='Location', right_on='name')","d69742fb":"df = merged[merged.aircraft.isin(accident_counts.sort_values(by='accidentRatio', ascending=False).head(10).MostSimilar)]\n\nfig = px.scatter_geo(df, \n                     lat=\"lat\",\n                     lon=\"lon\",\n                     color='aircraft',\n                     text='Location'\n                     )\n\nfig.update_layout(\n    title = 'Most dangerous aircraft crashes',\n)\n\nfig.show()","de264ebe":"We should relate number of accidents with the amount of units built.","6bc8662b":"Here is an interactive viz of the keywords of the top 30 dangerous planes.","703eec2b":"Looks like the area of Venezuela, Colombia, Ecuador and Mexico had a great concentration of old plane crashes (and also southern Asia). A reason might be that they operate older aircraft and also the regulations there (maintainance requirements) may be lighter (their aeronautical industry is less developed).","17bd286a":"It seems that the DC-3 had a lot of accidents... However, it was a very popular airplane after the war (the C-47 was the military version used to deploy airborne troops). ![](https:\/\/i.pinimg.com\/564x\/7a\/7a\/9c\/7a7a9cc871ba895bb33c2ee89d1afdf5.jpg)","8e9524aa":"# Quick airplane crash analysis\n\n<img src=\"https:\/\/www.ecestaticos.com\/imagestatic\/clipping\/26c\/263\/26c263aeec9919161e445381d663a994\/por-que-se-dice-mayday-en-los-aviones-cuando-hay-situaciones-de-emergencia.jpg?mtime=1593014689\" alt=\"drawing\" style=\"align:center; width:700px;\"\/>\n\n<br>\n<br>\n\nRecently I came across with this [dataset](https:\/\/www.kaggle.com\/saurograndi\/airplane-crashes-since-1908) and I was curious to know about what aircraft has been historically more dangerous, so here is a simple notebook with what I found.","5d4c479c":"I gathered some data about the production of lots of aircraft and published it as a dataset in case you're interested in using it (https:\/\/www.kaggle.com\/alvaroibrain\/aircraft-production-data). \n\nHere, I load the datasets and replace some typos I found (AtlantiOcean and PacifiOcean). Also, in order to later merging the two datasets I normalize the aircraft names by transforming them to lowercase.","52e24b1d":"Early airplanes (which weren't mass produced) dont seem to be in the airplane list, so I will filter the accidents since the air traveling  was more common (after WWII).","a927ea56":"**What are common accident factors given an aircraft model?**\n\nWe can use the accident descriptions to extract common keywords which give us an intuition about how each model tended to crash.","f40fd9df":"If we don't have the exact model designation, we match it with the most similar For example: ","0e9c5877":"Looks like like old airplanes (like dc3 or trislander) tend to crash en route with terrain while more modern planes (747) have more trobules landing\/during approach.","be51c283":"Although the DC-3 seem to be the absolute more risky plane to fly with, the top changes a little. We also can see \"modern\" aircraft like the 747-8. Let's take a look at what common factors the same-model crashes have.","b1a0ae06":"**Find out the most dangerous places to fly**\n\nAircraft mantainance and operator policies have a big stake on the chances of failures of an aircraft. Expecially at the beginning of aviation, there wasn't very solid legislations and expertise and all was more \"artesanal\". The location of the crash (flight) can be very involved with this.","12fe0a5d":"There are instances where the same model have different names (for example, Lockheed C-130 hercules vs Lockheed C-130). So using levehnstein distance I get the most similar plane and join them."}}