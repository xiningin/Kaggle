{"cell_type":{"569a1398":"code","23f7792c":"code","d94f519b":"code","bcef3874":"code","6e683fcc":"code","d190102b":"code","43ecde94":"code","1b4d8874":"code","49ef9adf":"code","8132cc8e":"code","02c831a3":"code","5c3be62e":"code","94c02e21":"code","2493ccd0":"code","7e5fb208":"code","881f774d":"code","94cd7ff0":"code","51cb933b":"code","260cb623":"code","890563b3":"code","eb04e01c":"code","c63b344d":"code","f7d4befe":"code","4e02fe25":"code","93156a69":"code","68b2de16":"code","20806641":"code","170abb20":"code","7b3b56b8":"code","7b6991ec":"code","ebf97b9a":"code","c910d5fd":"code","2b9a31af":"code","b4a09c69":"code","b5788f47":"code","0169e5b8":"code","bb133b11":"code","eec8a17f":"code","b3765ae4":"code","fc1aca77":"code","3eb899fa":"code","dbf345bb":"code","cf986760":"code","e72302ad":"code","b9c21534":"code","a1ef84ba":"code","b868ece5":"code","f6af39e8":"code","c51153e3":"markdown","f52699a3":"markdown","3d331a8a":"markdown"},"source":{"569a1398":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing","23f7792c":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nsubmisssion = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","d94f519b":"train.head()","bcef3874":"train.groupby(\"Survived\")['Survived'].count().plot.bar()","6e683fcc":"sns.countplot('Survived',data = train)","d190102b":"train.groupby([\"Sex\",'Survived'])[\"Survived\"].count()","43ecde94":"train[train['Survived'] == 1 ].Pclass.value_counts(normalize = True)","1b4d8874":"train.groupby(['Pclass','Survived'])['Survived'].count()","49ef9adf":"train.Pclass.value_counts().plot.bar()","8132cc8e":"sns.countplot('Pclass',data = train,hue = \"Survived\")","02c831a3":"## max age\nprint(train.Age.max())\nprint(train.Age.min())\nprint(train.Age.mean())","5c3be62e":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\",split = True, data=train,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=train,split = True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","94c02e21":"## Filling na values\n## first we are taking intials from name\ntrain.Name","2493ccd0":"train['Initial']=0\nfor i in train:\n    train['Initial']=train.Name.str.extract('([A-Za-z]+)\\.')","7e5fb208":"train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)","881f774d":"test['Initial']=0\nfor i in test:\n    test['Initial']=test.Name.str.extract('([A-Za-z]+)\\.')","94cd7ff0":"test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don','Dona'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr','Other'],inplace=True)","51cb933b":"train.groupby(\"Initial\")['Age'].mean()","260cb623":"## Assigning the NaN Values with the Ceil values of the mean ages\ntrain.loc[(train.Age.isnull())&(train.Initial=='Mr'),'Age']=33\ntrain.loc[(train.Age.isnull())&(train.Initial=='Mrs'),'Age']=36\ntrain.loc[(train.Age.isnull())&(train.Initial=='Master'),'Age']=5\ntrain.loc[(train.Age.isnull())&(train.Initial=='Miss'),'Age']=22\ntrain.loc[(train.Age.isnull())&(train.Initial=='Other'),'Age']=46","890563b3":"## Assigning the NaN Values with the Ceil values of the mean ages\ntest.loc[(test.Age.isnull())&(test.Initial=='Mr'),'Age']=33\ntest.loc[(test.Age.isnull())&(test.Initial=='Mrs'),'Age']=36\ntest.loc[(test.Age.isnull())&(test.Initial=='Master'),'Age']=5\ntest.loc[(test.Age.isnull())&(test.Initial=='Miss'),'Age']=22\ntest.loc[(test.Age.isnull())&(test.Initial=='Other'),'Age']=46","eb04e01c":"test.isna().sum()","c63b344d":"test['Age'].min()","f7d4befe":"train.Age.isna().sum()","4e02fe25":"train[train['Sex']=='male'].Survived.value_counts(normalize= True)","93156a69":"train[train['Sex']=='female'].Survived.value_counts(normalize= True)","68b2de16":"train.Embarked.value_counts()","20806641":"train.groupby(['Embarked','Pclass','Survived'])['Survived'].count()","170abb20":"train['Embarked'].fillna('S',inplace=True)","7b3b56b8":"test['Embarked'].fillna('S',inplace=True)","7b6991ec":"train.Embarked.isnull().any()","ebf97b9a":"sns.heatmap(train.corr(),annot=True,cmap='RdYlGn',linewidths=0.2) #data.corr()-->correlation matrix\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.show()","c910d5fd":"train['Sex'].replace(['male','female'],[0,1],inplace=True)\ntrain['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)\ntrain['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)","2b9a31af":"test['Sex'].replace(['male','female'],[0,1],inplace=True)\ntest['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)\ntest['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)","b4a09c69":"a = train.Age.values.reshape(1,-1)\na","b5788f47":"train['Age']=  preprocessing.normalize(a).reshape(-1,1)\ntrain['Age']","0169e5b8":"c = test.Age.values.reshape(1,-1)\nc","bb133b11":"test['Age']=  preprocessing.normalize(c).reshape(-1,1)\ntest['Age']","eec8a17f":"train.drop(['Name','Age','Ticket','Fare','Cabin','PassengerId'],axis=1,inplace=True)\nsns.heatmap(train.corr(),annot=True,cmap='RdYlGn',linewidths=0.2,annot_kws={'size':20})\nfig=plt.gcf()\nfig.set_size_inches(18,15)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show() ","b3765ae4":"test.drop(['Name','Age','Ticket','Fare','Cabin','PassengerId'],axis=1,inplace=True)\nsns.heatmap(train.corr(),annot=True,cmap='RdYlGn',linewidths=0.2,annot_kws={'size':20})\nfig=plt.gcf()\nfig.set_size_inches(18,15)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show() ","fc1aca77":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics","3eb899fa":"X_train = train.drop(\"Survived\", axis=1)\nY_train = train[\"Survived\"]\nX_test  = test\nX_train.shape, Y_train.shape, X_test.shape","dbf345bb":"model = RandomForestClassifier(n_estimators= 100)\nmodel.fit(X_train,Y_train)\nprediction = model.predict(X_test)\nprint(model.score(X_train, Y_train))","cf986760":"prediction","e72302ad":"test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","b9c21534":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })","a1ef84ba":"submission.to_csv('submission.csv', index=False)","b868ece5":"submission.head()","f6af39e8":"### 1. which class people survived max? pclass\n### 2. male or female survived max?\n### 3. age group people -5years age group?\n### 4. port of embarkation?\n","c51153e3":"## Sex - Categorical Feature","f52699a3":"### Port of embarkation","3d331a8a":"### Age\n"}}