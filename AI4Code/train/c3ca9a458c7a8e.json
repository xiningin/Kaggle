{"cell_type":{"4ea78c36":"code","4109828d":"code","46de1bb8":"code","5d32a5cc":"code","cce2fc7e":"code","801a80d6":"code","02090145":"code","d865d304":"code","58ed26e8":"code","52314239":"code","0665df29":"code","aa487952":"code","b2236f44":"code","5b9a28c0":"markdown","1eed5185":"markdown","606200c3":"markdown","5fa92bfc":"markdown","0affa684":"markdown","8a0bf4ac":"markdown","a944b139":"markdown"},"source":{"4ea78c36":"%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nfrom skimage.util import montage as montage2d\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom glob import glob\nfrom skimage.io import imread\nplt.rcParams[\"figure.figsize\"] = (8, 8)\nplt.rcParams[\"figure.dpi\"] = 125\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})","4109828d":"from multiprocessing.pool import ThreadPool\nimport dask\nimport dask.array as da\nimport dask.dataframe as ddf\nimport dask.bag as dbag","46de1bb8":"# for progress bars, debugging and visualization\nimport dask.diagnostics as diag\nfrom bokeh.io import output_notebook\nfrom bokeh.resources import CDN\noutput_notebook(CDN, hide_banner=True)","5d32a5cc":"image_bag = dbag.from_sequence(glob('..\/input\/BBBC010_v1_images\/*_w1_*.tif'))\nimage_bag","cce2fc7e":"def _get_light_path(in_path):\n    \"\"\"Convert the tif path into a light-field path\"\"\"\n    w2_path='_w2_'.join(in_path.split('_w1_'))\n    glob_str='_'.join(w2_path.split('_')[:-1]+['*.tif'])\n    m_files=glob(glob_str)\n    if len(m_files)>0:\n        return m_files[0]\n    else:\n        return None\nimage_df = image_bag.map(lambda f: {'gfp_path': f, 'light_path': _get_light_path(f)}).to_dataframe()\nimage_df","801a80d6":"image_df=image_df.dropna()\nimage_df['base_name']=image_df['gfp_path'].map(lambda x: os.path.splitext(os.path.basename(x))[0], meta=('base_name', 'str'))\nimage_df['plate_rc']=image_df['base_name'].map(lambda x: x.split('_')[6], meta=('plate_rc', 'str'))\nimage_df['row']=image_df['plate_rc'].map(lambda x: x[0:1], meta=('row', 'str'))\nimage_df['column']=image_df['plate_rc'].map(lambda x: int(x[1:]), meta=('column', 'int'))\nimage_df['treated']=image_df['column'].map(lambda x: 'ampicillin' if x<13 else 'negative control', meta=('treated', 'str'))\nimage_df['wavelength']=image_df['base_name'].map(lambda x: x.split('_')[7], meta=('wavelength', 'str'))\n\nimage_df['mask_path']=image_df['plate_rc'].map(lambda x: '..\/input\/BBBC010_v1_foreground\/{}_binary.png'.format(x))\nprint('Loaded',image_df.shape[0],'datasets')\nimage_df","02090145":"with diag.ProgressBar(), diag.Profiler() as prof, diag.ResourceProfiler(0.5) as rprof:\n    with dask.config.set(pool = ThreadPool(4)):\n        print('Loaded',image_df.shape[0].compute(),'datasets')","d865d304":"# show the first row\nimage_df.head(1)","58ed26e8":"from skimage.measure import label\nfrom skimage.measure import regionprops\nimage_df['worm_image']=image_df['mask_path'].map(lambda x: imread(x)[:,:,0]>0, meta=('worm_image', np.object))\nimage_df['worm_labels']=image_df['worm_image'].map(lambda x: label(x), meta=('worm_labels', np.object))\nimage_df['worm_regions']=image_df['worm_labels'].map(lambda x: regionprops(x), meta=('worm_regions', np.object))\nimage_df['worm_volume_fraction']=image_df['worm_image'].map(lambda x: np.mean(x), meta=('worm_volume_fraction', 'float'))\nimage_df['worm_nsegments']=image_df['worm_labels'].map(lambda x: np.max(x), meta=('worm_nsegments', 'int'))\nimage_df['worm_p2a_ratio']=image_df['worm_regions'].map(lambda x: np.mean([rp.perimeter\/rp.area for rp in x]), meta=('worm_p2a_ratio', 'float'))\nimage_df","52314239":"with diag.ProgressBar(), diag.Profiler() as prof, diag.ResourceProfiler(0.5) as rprof:\n    with dask.config.set(pool = ThreadPool(4)):\n        collected_df = image_df.drop(['column'],1).compute()","0665df29":"diag.visualize([prof, rprof])","aa487952":"collected_df.sample(3)","b2236f44":"sns.pairplot(collected_df,hue='treated')","5b9a28c0":"## Collect (Reduce) all results to one table\n","1eed5185":"# Compute the Relevant Features\nWe use map on the various rows to load each image and calculate the features","606200c3":"1. Add the light-field path using a simple rule\n2. Convert the bag into a dask-dataframe","5fa92bfc":"## Dask Imports","0affa684":"# Showing Correlations\nHere we can see correlations for the dataset and it is very evident that the GFP signal quite strongly separates living from dead worms","8a0bf4ac":"A quick look at a few basic shape analysis parameters for analyzing images of segmented worms. Here we compare the results of the shape analysis to the biological status (treated or not)","a944b139":"## Load Data\nHere we have to load the data a bit differently since we want to load the images in a distributed parallel way. We create a 'bag' in dask using the `from_sequence` approach. This turns our python list into a distributed bag"}}