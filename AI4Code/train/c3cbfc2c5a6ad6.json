{"cell_type":{"b3d2b1c8":"code","e53780b7":"code","2c58ed3f":"code","9f9b7c66":"code","d584509b":"code","fdd93768":"code","2569e39e":"code","43e0f244":"code","c5cc1ec1":"code","e529fb3c":"code","9e302a38":"code","89eeca13":"code","e3bfe663":"code","a601a945":"code","15708475":"code","340d20bb":"code","532cba92":"code","81a27614":"code","ecec215b":"code","6da1b9aa":"code","1c8fead3":"code","58894a95":"code","e9cf9aa6":"code","01271f53":"code","b3eb8743":"code","ce120904":"code","6f4dc384":"code","21ca83e1":"code","129d7af7":"code","a113683b":"code","57d78f8d":"code","af34b1f6":"code","6fc02e1d":"code","f0c2a0d9":"code","6d5213f7":"code","2e8da285":"code","4d2b1402":"code","62af7ba4":"code","1d70fb8c":"code","f12ac166":"code","505306b8":"code","64cdc18f":"code","5ecb0f2c":"code","4c2b60cf":"code","8988683f":"code","3e1d01f4":"code","090b418d":"code","de73d4e5":"code","7c146d1a":"code","55d9bbed":"code","3d0b62ec":"code","6a95f6ce":"code","2e0f3f43":"code","c37ac72d":"code","fe378b88":"code","6da9fb48":"code","08ce9c34":"code","3dfc3d37":"code","4fcce4c3":"code","be03a582":"code","74cebd64":"code","f97ac478":"code","680959af":"code","e7ea4289":"code","3e886d12":"code","4900881d":"code","8c2164c1":"code","dc36e576":"code","edc1de39":"code","acbfb6a4":"code","d23f7dc6":"code","33ea904f":"code","1d59da1c":"code","3c389138":"code","94a33f95":"code","b016e779":"code","1e05eb1c":"code","bbebbc6e":"code","da60a74d":"code","596d4d59":"code","9c8cc388":"code","e2cf7a06":"code","3d5e6a5a":"code","bb255d99":"code","ed5d01e0":"code","d49fc988":"code","684bb267":"code","06dab112":"code","54d9c04b":"code","0de6378f":"code","fc852d29":"code","f7caed81":"code","4a87e6e8":"code","83d5ee3a":"code","c41a246d":"code","4f293ab0":"code","c788e69a":"code","0fb0f6dd":"code","0c447eb0":"code","48a85ecf":"code","4b29c559":"code","5d92a698":"code","c1541b67":"code","6d449032":"code","5525a7c8":"code","528a1dc8":"code","1177d81a":"code","c6204cda":"code","58e17b52":"code","2aa6a78d":"code","750e2d87":"code","f75501f8":"code","f5b9aa28":"code","5b03bb33":"code","693f0968":"code","0a15657e":"code","5a598053":"code","fdc047b1":"code","9d1caed2":"code","eb17ddfe":"code","da00eb21":"markdown","9c157c4e":"markdown","f561002a":"markdown","cc289f9f":"markdown","b5286462":"markdown","113b137c":"markdown","b0ffb255":"markdown","a0697eca":"markdown","24f0bae5":"markdown","b3862e9f":"markdown","d9a8a261":"markdown","b37535ed":"markdown","31b4a67b":"markdown","c0827d25":"markdown","834a6e28":"markdown","3fc05d42":"markdown","de640024":"markdown","9f59e845":"markdown","0204d9ad":"markdown","4b32f66a":"markdown","70415284":"markdown","48e0d7b7":"markdown","caf5c3bf":"markdown","e03c4812":"markdown","706e9721":"markdown","8c73a93e":"markdown","14a6b680":"markdown","e703f982":"markdown","ff402c6f":"markdown","2ca4b502":"markdown","590f9949":"markdown","710f7307":"markdown","0c34143a":"markdown","42ad738c":"markdown","849e1b2b":"markdown","707f43b2":"markdown","f837b22b":"markdown","2773b654":"markdown","2a66fc1d":"markdown","7dff6394":"markdown","377a9b6e":"markdown","dd6b7d5c":"markdown","9d96f552":"markdown","f74409da":"markdown","25742b14":"markdown","4ff29b70":"markdown","645386f7":"markdown","69e3aa23":"markdown","04397873":"markdown","134dd05b":"markdown","fc09c7a4":"markdown","e9dbbcf3":"markdown","a7a10d50":"markdown","912465fb":"markdown","0fc5a043":"markdown","4d12dcdc":"markdown","2723b71b":"markdown","102f8d46":"markdown","f7c75fe8":"markdown","733bc3c9":"markdown","62796880":"markdown","b91a1092":"markdown","c9c85f9d":"markdown","5024953b":"markdown","02a013e5":"markdown","617c8726":"markdown","3e5e0e78":"markdown","ceb56a5b":"markdown","b3ab4504":"markdown","a54ea2e6":"markdown","ad3fe190":"markdown","ce1ec3ba":"markdown","b1d7ecce":"markdown","d4b187fe":"markdown","63a7ee3e":"markdown","91ec43c1":"markdown","75ed3613":"markdown","46c6655a":"markdown","81577ad7":"markdown","5766a198":"markdown","6a5fa884":"markdown","a8b58b41":"markdown","5de0ab8f":"markdown","eb73f78a":"markdown","5a2b3747":"markdown","c8ad11fc":"markdown","b4f6fa82":"markdown","96dc3eab":"markdown","2e0b81ed":"markdown","aaab360e":"markdown","d81bc37d":"markdown","9588d30c":"markdown","ebe5f7c2":"markdown","2ca0be76":"markdown","ea284b64":"markdown","a28d6300":"markdown","39e11295":"markdown","cfa7b707":"markdown","ea3d1fdc":"markdown","85bb8ac7":"markdown","0b22c710":"markdown","baa9658d":"markdown","4f875b0b":"markdown","d8f18acd":"markdown","a76f1578":"markdown","88714b29":"markdown","8a85b59e":"markdown","2c9787c3":"markdown","015b977f":"markdown","8dbf222b":"markdown","53ca199c":"markdown","4199e446":"markdown"},"source":{"b3d2b1c8":"import numpy as np\nimport pandas as pd","e53780b7":"import os\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2c58ed3f":"import io","9f9b7c66":"import plotly.offline as py\nimport plotly.tools as tls\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport matplotlib.pyplot as plt\nfrom PIL import  Image\n%matplotlib inline\nimport seaborn as sns\npy.init_notebook_mode(connected=True)\nimport itertools\n","d584509b":"tel=pd.read_csv(r\"..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\n","fdd93768":"tel.head()","2569e39e":"tel.info()","43e0f244":"tel.shape[0]","c5cc1ec1":"tel.shape[1]","e529fb3c":"tel.columns.tolist()","9e302a38":"tel.isnull().sum()","89eeca13":"tel.nunique()","e3bfe663":"tel.describe()","a601a945":"tel.describe(include='O')","15708475":"tel['TotalCharges']=tel['TotalCharges'].replace(\" \",np.nan)\ntel.TotalCharges.isnull().sum()","340d20bb":"tel=tel[tel[\"TotalCharges\"].notnull()]","532cba92":"tel=tel.reset_index()[tel.columns]","81a27614":"tel['TotalCharges']=tel['TotalCharges'].astype(float)","ecec215b":"replace_cols=['OnlineSecurity', 'OnlineBackup', 'DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\nfor i in replace_cols:\n    tel[i]=tel[i].replace({'No internet service': 'No'})","6da1b9aa":"tel['SeniorCitizen']=tel['SeniorCitizen'].replace({1:\"Yes\",0:'No'})","1c8fead3":"def lab(tel):\n    if tel['tenure']<=12:\n        return 'Tenure_0-12'\n    elif (tel['tenure']>12)&(tel['tenure']<=24):\n        return 'Tenure_12-24'\n    elif (tel['tenure']>24)&(tel['tenure']<=48):\n        return 'Tenure_24-48'\n    elif (tel['tenure']>48)&(tel['tenure']<=60):\n        return \"Tenure_48-60\"\n    elif tel[\"tenure\"]>60:\n        return 'Tenure_gt_60'","58894a95":"tel['tenure_group']=tel.apply(lambda tel:lab(tel),axis=1)","e9cf9aa6":"churn=tel[tel['Churn']=='Yes']\nnot_churn=tel[tel['Churn']=='No']","01271f53":"Id_col=['customerID']\ntarget_col=['Churn']","b3eb8743":"cat_cols=tel.nunique()[tel.nunique()<6].keys().tolist()","ce120904":"cat_cols=[x for x in cat_cols if x not in target_col]\nnum_cols   = [x for x in tel.columns if x not in cat_cols + target_col + Id_col]","6f4dc384":"lab=tel['Churn'].value_counts().keys().tolist()","21ca83e1":"val=tel['Churn'].value_counts().values.tolist()","129d7af7":"trace=go.Pie(labels=lab, values=val,\n             marker=dict(colors=['royalblue','lime'],\n                         line= dict(color=\"white\",\n                                    width=1.3)\n                         ),\n             rotation=90,\n             hoverinfo=\"label+value+text\",\n             \n             hole=.5\n            )","a113683b":"layout=go.Layout(dict(title=\"Customer attrition in data\",\n                     plot_bgcolor='rgb(243,243,243)',\n                      paper_bgcolor='rgb(243,243,243)',\n                    \n                     \n                     ))","57d78f8d":"data=[trace]","af34b1f6":"fig=go.Figure(data=data,layout=layout)\npy.iplot(fig)","6fc02e1d":"def plot_pie(column) :\n    \n    trace1 = go.Pie(values  = churn[column].value_counts().values.tolist(),\n                    labels  = churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    domain  = dict(x = [0,.48]),\n                    name    = \"Churn Customers\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    hole    = .6\n                   )\n    trace2 = go.Pie(values  = not_churn[column].value_counts().values.tolist(),\n                    labels  = not_churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    domain  = dict(x = [.52,1]),\n                    hole    = .6,\n                    name    = \"Non churn customers\" \n                   )\n\n\n    layout = go.Layout(dict(title = column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            annotations = [dict(text = \"churn customers\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .15, y = .5),\n                                           dict(text = \"Non churn customers\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .88,y = .5\n                                               )\n                                          ]\n                           )\n                      )\n    data = [trace1,trace2]\n    fig  = go.Figure(data = data,layout = layout)\n    py.iplot(fig)\n","f0c2a0d9":"def histogram(column) :\n    trace1 = go.Histogram(x  = churn[column],\n                          histnorm= \"percent\",\n                          name = \"Churn Customers\",\n                          marker = dict(line = dict(width = .5,\n                                                    color = \"black\"\n                                                    )\n                                        ),\n                         opacity = .9 \n                         ) \n    \n    trace2 = go.Histogram(x  = not_churn[column],\n                          histnorm = \"percent\",\n                          name = \"Non churn customers\",\n                          marker = dict(line = dict(width = .5,\n                                              color = \"black\"\n                                             )\n                                 ),\n                          opacity = .9\n                         )\n    \n    data = [trace1,trace2]\n    layout = go.Layout(dict(title =column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = column,\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = \"percent\",\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                           )\n                      )\n    fig  = go.Figure(data=data,layout=layout)\n    \n    py.iplot(fig)","6d5213f7":"def scatter_matrix(df)  :\n    \n    df  = df.sort_values(by = \"Churn\" ,ascending = True)\n    classes = df[\"Churn\"].unique().tolist()\n    classes\n    \n    class_code  = {classes[k] : k for k in range(2)}\n    class_code\n\n    color_vals = [class_code[cl] for cl in df[\"Churn\"]]\n    color_vals\n\n    pl_colorscale = \"Portland\"\n\n    pl_colorscale\n\n    text = [df.loc[k,\"Churn\"] for k in range(len(df))]\n    text\n\n    trace = go.Splom(dimensions = [dict(label  = \"tenure\",\n                                       values = df[\"tenure\"]),\n                                  dict(label  = 'MonthlyCharges',\n                                       values = df['MonthlyCharges']),\n                                  dict(label  = 'TotalCharges',\n                                       values = df['TotalCharges'])],\n                     text = text,\n                     marker = dict(color = color_vals,\n                                   colorscale = pl_colorscale,\n                                   size = 3,\n                                   showscale = False,\n                                   line = dict(width = .1,\n                                               color='rgb(230,230,230)'\n                                              )\n                                  )\n                    )\n    axis = dict(showline  = True,\n                zeroline  = False,\n                gridcolor = \"#fff\",\n                ticklen   = 4\n               )\n    \n    layout = go.Layout(dict(title  = \n                            \"Scatter plot matrix for Numerical columns for customer attrition\",\n                            autosize = False,\n                            height = 800,\n                            width  = 800,\n                            dragmode = \"select\",\n                            hovermode = \"closest\",\n                            plot_bgcolor  = 'rgba(240,240,240, 0.95)',\n                            xaxis1 = dict(axis),\n                            yaxis1 = dict(axis),\n                            xaxis2 = dict(axis),\n                            yaxis2 = dict(axis),\n                            xaxis3 = dict(axis),\n                            yaxis3 = dict(axis),\n                           )\n                      )\n    data   = [trace]\n    fig = go.Figure(data = data,layout = layout )\n    py.iplot(fig)\n","2e8da285":"for i in cat_cols:\n    plot_pie(i)\nfor i in num_cols:\n    histogram(i)\nscatter_matrix(tel)","4d2b1402":"tg_ch=churn['tenure_group'].value_counts().reset_index()\ntg_nch=not_churn['tenure_group'].value_counts().reset_index()","62af7ba4":"tg_ch.columns=['tenure_group','count']\ntg_nch.columns=['tenure_group','count']","1d70fb8c":"trace1=go.Bar(x=tg_ch['tenure_group'], y=tg_ch['count'],\n             name='Churn Customers',\n             marker=dict(line=dict(width=.5,color='black')),\n             opacity=.9)","f12ac166":"trace2 = go.Bar(x = tg_nch[\"tenure_group\"] , y = tg_nch[\"count\"],\n                name = \"Non Churn Customers\",\n                marker = dict(line = dict(width = .5,color = \"black\")),\n                opacity = .9)","505306b8":"layout=go.Layout(dict(title='Customer attrition in tenure groups',\n                     plot_bgcolor='rgb(243,243,243)',\n                     paper_bgcolor='rgb(243,243,243)',\n                     xaxis=dict(gridcolor='rgb(255,255,255)',\n                               title='tenure group',\n                               zerolinewidth=1,\n                               ticklen=5,\n                               gridwidth=2),\n                     yaxis=dict(gridcolor='rgb(255,255,255)',\n                               title='count',\n                               zerolinewidth=1,ticklen=5,gridwidth=2),\n                     )\n                )\ndata=[trace1,trace2]\nfig=go.Figure(data=data,layout=layout)\npy.iplot(fig)","64cdc18f":"def plot_tenure_scatter(tenure_group,color) :\n    tracer = go.Scatter(x = tel[tel[\"tenure_group\"] == tenure_group][\"MonthlyCharges\"],\n                        y = tel[tel[\"tenure_group\"] == tenure_group][\"TotalCharges\"],\n                        mode = \"markers\",marker = dict(line = dict(color = \"black\",\n                                                                   width = .2),\n                                                       size = 4 , color = color,\n                                                       symbol = \"diamond-dot\",\n                                                      ),\n                        name = tenure_group,\n                        opacity = .9\n                       )\n    return tracer\n\ndef plot_churncharges_scatter(churn,color) :\n    tracer = go.Scatter(x = tel[tel[\"Churn\"] == churn][\"MonthlyCharges\"],\n                        y = tel[tel[\"Churn\"] == churn][\"TotalCharges\"],\n                        mode = \"markers\",marker = dict(line = dict(color = \"black\",\n                                                                   width = .2),\n                                                       size = 4 , color = color,\n                                                       symbol = \"diamond-dot\",\n                                                      ),\n                        name = \"Churn - \" + churn,\n                        opacity = .9\n                       )\n    return tracer\n\ntrace1 = plot_tenure_scatter(\"Tenure_0-12\",\"#FF3300\")\ntrace2 = plot_tenure_scatter(\"Tenure_12-24\",\"#6666FF\")\ntrace3 = plot_tenure_scatter(\"Tenure_24-48\",\"#99FF00\")\ntrace4 = plot_tenure_scatter(\"Tenure_48-60\",\"#996600\")\ntrace5 = plot_tenure_scatter(\"Tenure_gt_60\",\"grey\")\ntrace6 = plot_churncharges_scatter(\"Yes\",\"red\")\ntrace7 = plot_churncharges_scatter(\"No\",\"blue\")\n\ndata1   = [trace1,trace2,trace3,trace4,trace5] \ndata2   = [trace7,trace6]","5ecb0f2c":"def layout_title(title) :\n    layout = go.Layout(dict(title = title,\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                         title = \"Monthly charges\",\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                         title = \"Total Charges\",\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                            height = 600\n                           )\n                      )\n    return layout\n\nlayout1  = layout_title(\"Monthly Charges & Total Charges by Tenure group\")\nlayout2  = layout_title(\"Monthly Charges & Total Charges by Churn group\")\nfig1 = go.Figure(data = data1,layout = layout1)\nfig2 = go.Figure(data = data2,layout = layout2)\npy.iplot(fig1)\npy.iplot(fig2)","4c2b60cf":"avg_tgc = tel.groupby([\"tenure_group\",\"Churn\"])[[\"MonthlyCharges\",\n                                                    \"TotalCharges\"]].mean().reset_index()\n\nno=tel.groupby([\"tenure_group\",\"Churn\"])[[\"MonthlyCharges\",\n                                                    \"TotalCharges\"]].mean()","8988683f":"avg_tgc","3e1d01f4":"no","090b418d":"def mean_charges(column,aggregate) :\n    tracer = go.Bar(x = avg_tgc[avg_tgc[\"Churn\"] == aggregate][\"tenure_group\"],\n                    y = avg_tgc[avg_tgc[\"Churn\"] == aggregate][column],\n                    name = aggregate,marker = dict(line = dict(width = 1)),\n                    text = \"Churn\"\n                   )\n    return tracer","de73d4e5":"def layout_plot(title,xaxis_lab,yaxis_lab) :\n    layout = go.Layout(dict(title = title,\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = xaxis_lab,\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = yaxis_lab,\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                           )\n                      )\n    return layout","7c146d1a":"trace1  = mean_charges(\"MonthlyCharges\",\"Yes\")\ntrace2  = mean_charges(\"MonthlyCharges\",\"No\")\nlayout1 = layout_plot(\"Average Monthly Charges by Tenure groups\",\n                      \"Tenure group\",\"Monthly Charges\")\ndata1   = [trace1,trace2]\nfig1    = go.Figure(data=data1,layout=layout1)\n\n\ntrace3  = mean_charges(\"TotalCharges\",\"Yes\")\ntrace4  = mean_charges(\"TotalCharges\",\"No\")\nlayout2 = layout_plot(\"Average Total Charges by Tenure groups\",\n                      \"Tenure group\",\"Total Charges\")\ndata2   = [trace3,trace4]\nfig2    = go.Figure(data=data2,layout=layout2)\n\npy.iplot(fig1)\npy.iplot(fig2)","55d9bbed":"tel_df=tel.copy()","3d0b62ec":"tel=tel.drop('tenure_group',axis=1)","6a95f6ce":"trace1 = go.Scatter3d(x = churn[\"MonthlyCharges\"],\n                      y = churn[\"TotalCharges\"],\n                      z = churn[\"tenure\"],\n                      mode = \"markers\",\n                      name = \"Churn customers\",\n                      text = \"Id : \" + churn[\"customerID\"],\n                      marker = dict(size = 1,color = \"red\")\n                     )\ntrace2 = go.Scatter3d(x = not_churn[\"MonthlyCharges\"],\n                      y = not_churn[\"TotalCharges\"],\n                      z = not_churn[\"tenure\"],\n                      name = \"Non churn customers\",\n                      text = \"Id : \" + not_churn[\"customerID\"],\n                      mode = \"markers\",\n                      marker = dict(size = 1,color= \"green\")\n                     )\n\n\n\nlayout = go.Layout(dict(title = \"Monthly charges,total charges & tenure in customer attrition\",\n                        scene = dict(camera = dict(up=dict(x= 0 , y=0, z=0),\n                                                   center=dict(x=0, y=0, z=0),\n                                                   eye=dict(x=1.25, y=1.25, z=1.25)),\n                                     xaxis  = dict(title = \"monthly charges\",\n                                                   gridcolor='rgb(255, 255, 255)',\n                                                   zerolinecolor='rgb(255, 255, 255)',\n                                                   showbackground=True,\n                                                   backgroundcolor='rgb(230, 230,230)'),\n                                     yaxis  = dict(title = \"total charges\",\n                                                   gridcolor='rgb(255, 255, 255)',\n                                                   zerolinecolor='rgb(255, 255, 255)',\n                                                   showbackground=True,\n                                                   backgroundcolor='rgb(230, 230,230)'\n                                                  ),\n                                     zaxis  = dict(title = \"tenure\",\n                                                   gridcolor='rgb(255, 255, 255)',\n                                                   zerolinecolor='rgb(255, 255, 255)',\n                                                   showbackground=True,\n                                                   backgroundcolor='rgb(230, 230,230)'\n                                                  )\n                                    ),\n                        height = 700,\n                       )\n                  )\n                  \n\ndata = [trace1,trace2]\nfig  = go.Figure(data = data,layout = layout)\npy.iplot(fig)","2e0f3f43":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler","c37ac72d":"Id_col=['customerID']\ntarget_col=['Churn']\ncat_cols   = tel.nunique()[tel.nunique() < 6].keys().tolist()\ncat_cols   = [x for x in cat_cols if x not in target_col]\nnum_cols   = [x for x in tel.columns if x not in cat_cols + target_col + Id_col]\nbin_cols   = tel.nunique()[tel.nunique() == 2].keys().tolist()\nmulti_cols = [i for i in cat_cols if i not in bin_cols]\n\n","fe378b88":"le = LabelEncoder()\nfor i in bin_cols :\n    tel[i] = le.fit_transform(tel[i])","6da9fb48":"tel=pd.get_dummies(data=tel, columns=multi_cols)","08ce9c34":"std = StandardScaler()\nscaled=std.fit_transform(tel[num_cols])\nscaled=pd.DataFrame(scaled,columns=num_cols)","3dfc3d37":"df_tel_og=tel.copy()\ntel=tel.drop(columns=num_cols,axis=1)\ntel=tel.merge(scaled,left_index=True,right_index=True, how='left')","4fcce4c3":"summary = (df_tel_og[[i for i in df_tel_og.columns if i not in Id_col]].\n           describe().transpose().reset_index())\n","be03a582":"summary","74cebd64":"summary=summary.rename(columns={'index':'feature'})","f97ac478":"summary=np.around(summary,3)","680959af":"summary","e7ea4289":"val_lst = [summary['feature'], summary['count'],\n           summary['mean'],summary['std'],\n           summary['min'], summary['25%'],\n           summary['50%'], summary['75%'], summary['max']]\n\ntrace  = go.Table(header = dict(values = summary.columns.tolist(),\n                                line = dict(color = ['#506784']),\n                                fill = dict(color = ['#119DFF']),\n                               ),\n                  cells  = dict(values = val_lst,\n                                line = dict(color = ['#506784']),\n                                fill = dict(color = [\"lightgrey\",'#F5F8FF'])\n                               ),\n                  columnwidth = [200,60,100,100,60,60,80,80,80])\nlayout = go.Layout(dict(title = \"Variable Summary\"))\nfigure = go.Figure(data=[trace],layout=layout)\npy.iplot(figure)","3e886d12":"correlation=tel.corr()\ncorrelation","4900881d":"matrix_cols = correlation.columns.tolist()\n","8c2164c1":"corr_array=np.array(correlation)\ncorr_array","dc36e576":"trace = go.Heatmap(z = corr_array,\n                   x = matrix_cols,\n                   y = matrix_cols,\n                   colorscale = \"Viridis\",\n                   colorbar   = dict(title = \"Pearson Correlation coefficient\",\n                                     titleside = \"right\"\n                                    ) ,\n                  )\nlayout = go.Layout(dict(title = \"Correlation Matrix for variables\",\n                        autosize = False,\n                        height  = 720,\n                        width   = 800,\n                        margin  = dict(r = 0 ,l = 210,\n                                       t = 25,b = 210,\n                                      ),\n                        yaxis   = dict(tickfont = dict(size = 9)),\n                        xaxis   = dict(tickfont = dict(size = 9))\n                       )\n                  )\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig)","edc1de39":"from sklearn.decomposition import PCA\n\npca=PCA(n_components=2)","acbfb6a4":"X = tel[[i for i in tel.columns if i not in Id_col + target_col]]\nY = tel[target_col + Id_col]","d23f7dc6":"principal_components = pca.fit_transform(X)\nprincipal_components","33ea904f":"pca_data = pd.DataFrame(principal_components,columns = [\"PC1\",\"PC2\"])\npca_data = pca_data.merge(Y,left_index=True,right_index=True,how=\"left\")\npca_data[\"Churn\"] = pca_data[\"Churn\"].replace({1:\"Churn\",0:\"Not Churn\"})","1d59da1c":"def pca_scatter(target,color) :\n    tracer = go.Scatter(x = pca_data[pca_data[\"Churn\"] == target][\"PC1\"] ,\n                        y = pca_data[pca_data[\"Churn\"] == target][\"PC2\"],\n                        name = target,mode = \"markers\",\n                        marker = dict(color = color,\n                                      line = dict(width = .5),\n                                      symbol =  \"diamond-open\"),\n                        text = (\"Customer Id : \" + \n                                pca_data[pca_data[\"Churn\"] == target]['customerID'])\n                       )\n    return tracer\n\nlayout = go.Layout(dict(title = \"Visualising data with principal components\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                        xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"principal component 1\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"principal component 2\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        height = 600\n                       )\n                  )\ntrace1 = pca_scatter(\"Churn\",'red')\ntrace2 = pca_scatter(\"Not Churn\",'royalblue')\ndata = [trace2,trace1]\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig)","3c389138":"bi_cs=tel.nunique()[tel.nunique()==2].keys()\ndat_rad=tel[bi_cs]","94a33f95":"def plot_radar(df,aggregate,title) :\n    data_frame = df[df[\"Churn\"] == aggregate] \n    data_frame_x = data_frame[bi_cs].sum().reset_index()\n    data_frame_x.columns  = [\"feature\",\"yes\"]\n    data_frame_x[\"no\"]    = data_frame.shape[0]  - data_frame_x[\"yes\"]\n    data_frame_x  = data_frame_x[data_frame_x[\"feature\"] != \"Churn\"]\n    \n    #count of 1's(yes)\n    trace1 = go.Scatterpolar(r = data_frame_x[\"yes\"].values.tolist(),\n                             theta = data_frame_x[\"feature\"].tolist(),\n                             fill  = \"toself\",name = \"count of 1's\",\n                             mode = \"markers+lines\",\n                             marker = dict(size = 5)\n                            )\n    #count of 0's(No)\n    trace2 = go.Scatterpolar(r = data_frame_x[\"no\"].values.tolist(),\n                             theta = data_frame_x[\"feature\"].tolist(),\n                             fill  = \"toself\",name = \"count of 0's\",\n                             mode = \"markers+lines\",\n                             marker = dict(size = 5)\n                            ) \n    layout = go.Layout(dict(polar = dict(radialaxis = dict(visible = True,\n                                                           side = \"counterclockwise\",\n                                                           showline = True,\n                                                           linewidth = 2,\n                                                           tickwidth = 2,\n                                                           gridcolor = \"white\",\n                                                           gridwidth = 2),\n                                         angularaxis = dict(tickfont = dict(size = 10),\n                                                            layer = \"below traces\"\n                                                           ),\n                                         bgcolor  = \"rgb(243,243,243)\",\n                                        ),\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            title = title,height = 700))\n    \n    data = [trace2,trace1]\n    fig = go.Figure(data=data,layout=layout)\n    py.iplot(fig)\nplot_radar(dat_rad,1,\"Churn -  Customers\")\nplot_radar(dat_rad,0,\"Non Churn - Customers\")","b016e779":"data_frame=tel[tel['Churn']==1]\ndata_frame","1e05eb1c":"data_frame_x=data_frame[bi_cs].sum().reset_index()\ndata_frame_x","bbebbc6e":"data_frame_x.columns=['feature','yes']","da60a74d":"data_frame_x['no']=data_frame.shape[0]-data_frame_x['yes']\ndata_frame_x['no']","596d4d59":"data_frame_x=data_frame_x[data_frame_x['feature']!='Churn']\ndata_frame_x","9c8cc388":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve,scorer\nfrom sklearn.metrics import f1_score\nimport statsmodels.api as sm\nfrom sklearn.metrics import precision_score,recall_score\nfrom yellowbrick.classifier import DiscriminationThreshold","e2cf7a06":"train,test=train_test_split(tel,test_size=.25, random_state=111)","3d5e6a5a":"cols=[i for i in tel.columns if i not in Id_col + target_col]\ntrain_X=train[cols]\ntrain_Y=train[target_col]\ntest_X=test[cols]\ntest_Y=test[target_col]","bb255d99":"cols    = [i for i in tel.columns if i not in Id_col + target_col]\ntrain_X = train[cols]\ntrain_Y = train[target_col]\ntest_X  = test[cols]\ntest_Y  = test[target_col]\n\n#Function attributes\n#dataframe     - processed dataframe\n#Algorithm     - Algorithm used \n#training_x    - predictor variables dataframe(training)\n#testing_x     - predictor variables dataframe(testing)\n#training_y    - target variable(training)\n#training_y    - target variable(testing)\n#cf - [\"coefficients\",\"features\"](cooefficients for logistic \n                                 #regression,features for tree based models)\n\n#threshold_plot - if True returns threshold plot for model\n    \ndef telecom_churn_prediction(algorithm,training_x,testing_x,\n                             training_y,testing_y,cols,cf,threshold_plot) :\n    \n    #model\n    algorithm.fit(training_x,training_y)\n    predictions   = algorithm.predict(testing_x)\n    probabilities = algorithm.predict_proba(testing_x)\n    #coeffs\n    if   cf == \"coefficients\" :\n        coefficients  = pd.DataFrame(algorithm.coef_.ravel())\n    elif cf == \"features\" :\n        coefficients  = pd.DataFrame(algorithm.feature_importances_)\n        \n    column_df     = pd.DataFrame(cols)\n    coef_sumry    = (pd.merge(coefficients,column_df,left_index= True,\n                              right_index= True, how = \"left\"))\n    coef_sumry.columns = [\"coefficients\",\"features\"]\n    coef_sumry    = coef_sumry.sort_values(by = \"coefficients\",ascending = False)\n    \n    print (algorithm)\n    print (\"\\n Classification report : \\n\",classification_report(testing_y,predictions))\n    print (\"Accuracy   Score : \",accuracy_score(testing_y,predictions))\n    #confusion matrix\n    conf_matrix = confusion_matrix(testing_y,predictions)\n    #roc_auc_score\n    model_roc_auc = roc_auc_score(testing_y,predictions) \n    print (\"Area under curve : \",model_roc_auc,\"\\n\")\n    fpr,tpr,thresholds = roc_curve(testing_y,probabilities[:,1])\n    \n    #plot confusion matrix\n    trace1 = go.Heatmap(z = conf_matrix ,\n                        x = [\"Not churn\",\"Churn\"],\n                        y = [\"Not churn\",\"Churn\"],\n                        showscale  = False,colorscale = \"Picnic\",\n                        name = \"matrix\")\n    \n    #plot roc curve\n    trace2 = go.Scatter(x = fpr,y = tpr,\n                        name = \"Roc : \" + str(model_roc_auc),\n                        line = dict(color = ('rgb(22, 96, 167)'),width = 2))\n    trace3 = go.Scatter(x = [0,1],y=[0,1],\n                        line = dict(color = ('rgb(205, 12, 24)'),width = 2,\n                        dash = 'dot'))\n    \n    #plot coeffs\n    trace4 = go.Bar(x = coef_sumry[\"features\"],y = coef_sumry[\"coefficients\"],\n                    name = \"coefficients\",\n                    marker = dict(color = coef_sumry[\"coefficients\"],\n                                  colorscale = \"Picnic\",\n                                  line = dict(width = .6,color = \"black\")))\n    \n    #subplots\n    fig = tls.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                            subplot_titles=('Confusion Matrix',\n                                            'Receiver operating characteristic',\n                                            'Feature Importances'))\n    \n    fig.append_trace(trace1,1,1)\n    fig.append_trace(trace2,1,2)\n    fig.append_trace(trace3,1,2)\n    fig.append_trace(trace4,2,1)\n    \n    fig['layout'].update(showlegend=False, title=\"Model performance\" ,\n                         autosize = False,height = 900,width = 800,\n                         plot_bgcolor = 'rgba(240,240,240, 0.95)',\n                         paper_bgcolor = 'rgba(240,240,240, 0.95)',\n                         margin = dict(b = 195))\n    fig[\"layout\"][\"xaxis2\"].update(dict(title = \"false positive rate\"))\n    fig[\"layout\"][\"yaxis2\"].update(dict(title = \"true positive rate\"))\n    fig[\"layout\"][\"xaxis3\"].update(dict(showgrid = True,tickfont = dict(size = 10),\n                                        tickangle = 90))\n    py.iplot(fig)\n    \n    if threshold_plot == True : \n        visualizer = DiscriminationThreshold(algorithm)\n        visualizer.fit(training_x,training_y)\n        visualizer.poof()","ed5d01e0":"logit  = LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)\n\ntelecom_churn_prediction(logit,train_X,test_X,train_Y,test_Y,\n                         cols,\"coefficients\",threshold_plot = True)","d49fc988":"from imblearn.over_sampling import SMOTE\n\ncols    = [i for i in tel.columns if i not in Id_col+target_col]\n\nsmote_X = tel[cols]\nsmote_Y = tel[target_col]\n\n#Split train and test data\nsmote_train_X,smote_test_X,smote_train_Y,smote_test_Y = train_test_split(smote_X,smote_Y,\n                                                                         test_size = .25 ,\n                                                                         random_state = 111)\n\n#oversampling minority class using smote\nos = SMOTE(random_state = 0)\nos_smote_X,os_smote_Y = os.fit_sample(smote_train_X,smote_train_Y)\nos_smote_X = pd.DataFrame(data = os_smote_X,columns=cols)\nos_smote_Y = pd.DataFrame(data = os_smote_Y,columns=target_col)\n\nlogit_smote = LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)\n\ntelecom_churn_prediction(logit_smote,os_smote_X,test_X,os_smote_Y,test_Y,\n                         cols,\"coefficients\",threshold_plot = True)","684bb267":"from sklearn.feature_selection import RFE\n\nlogit = LogisticRegression()\n\nrfe = RFE(logit,10)\nrfe = rfe.fit(os_smote_X,os_smote_Y.values.ravel())","06dab112":"idc_rfe = pd.DataFrame({\"rfe_support\" :rfe.support_,\n                       \"columns\" : [i for i in tel.columns if i not in Id_col + target_col],\n                       \"ranking\" : rfe.ranking_,\n                      })\ncols = idc_rfe[idc_rfe[\"rfe_support\"] == True][\"columns\"].tolist()","54d9c04b":"rfe.support_","0de6378f":"rfe.ranking_","fc852d29":"cols = idc_rfe[idc_rfe[\"rfe_support\"] == True][\"columns\"].tolist()\ncols","f7caed81":"#separating train and test data\ntrain_rf_X = os_smote_X[cols]\ntrain_rf_Y = os_smote_Y\ntest_rf_X  = test[cols]\ntest_rf_Y  = test[target_col]\n\nlogit_rfe = LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)\n#applying model\ntelecom_churn_prediction(logit_rfe,train_rf_X,test_rf_X,train_rf_Y,test_rf_Y,\n                         cols,\"coefficients\",threshold_plot = True)\n\ntab_rk = ff.create_table(idc_rfe)\npy.iplot(tab_rk)","4a87e6e8":"from sklearn.feature_selection import chi2\nfrom sklearn.feature_selection import SelectKBest\n\n#select columns\ncols = [i for i in tel.columns if i not in Id_col + target_col ]\n\n#dataframe with non negative values\ndf_x = df_tel_og[cols]\ndf_y = df_tel_og[target_col]","83d5ee3a":"select = SelectKBest(score_func = chi2,k = 3)\nfit    = select.fit(df_x,df_y)","c41a246d":"print (\"scores\")\nprint (fit.scores_)\nprint (\"P - Values\")\nprint (fit.pvalues_)","4f293ab0":"score = pd.DataFrame({\"features\":cols,\"scores\":fit.scores_,\"p_values\":fit.pvalues_ })\nscore = score.sort_values(by = \"scores\" ,ascending =False)","c788e69a":"score[\"feature_type\"] = np.where(score[\"features\"].isin(num_cols),\"Numerical\",\"Categorical\")","0fb0f6dd":"trace  = go.Scatter(x = score[score[\"feature_type\"] == \"Categorical\"][\"features\"],\n                    y = score[score[\"feature_type\"] == \"Categorical\"][\"scores\"],\n                    name = \"Categorial\",mode = \"lines+markers\",\n                    marker = dict(color = \"red\",\n                                  line = dict(width =1))\n                   )\n\ntrace1 = go.Bar(x = score[score[\"feature_type\"] == \"Numerical\"][\"features\"],\n                y = score[score[\"feature_type\"] == \"Numerical\"][\"scores\"],name = \"Numerical\",\n                marker = dict(color = \"royalblue\",\n                              line = dict(width =1)),\n                xaxis = \"x2\",yaxis = \"y2\"\n               )\nlayout = go.Layout(dict(title = \"Scores for Categorical & Numerical features\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                        xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     tickfont = dict(size =10),\n                                     domain=[0, 0.7],\n                                     tickangle = 90,zerolinewidth=1,\n                                     ticklen=5,gridwidth=2),\n                        yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"scores\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        margin = dict(b=200),\n                        xaxis2=dict(domain=[0.8, 1],tickangle = 90,\n                                    gridcolor = 'rgb(255, 255, 255)'),\n                        yaxis2=dict(anchor='x2',gridcolor = 'rgb(255, 255, 255)')\n                        )\n                  )\n\ndata=[trace,trace1]\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig)","0c447eb0":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz\nfrom sklearn import tree\nfrom graphviz import Source\nfrom IPython.display import SVG,display\n\nfeatures_cat  = score[score[\"feature_type\"] == \"Categorical\"][\"features\"][:3].tolist()\n\n#top 3 numerical features\nfeatures_num  = score[score[\"feature_type\"] == \"Numerical\"][\"features\"][:3].tolist()\n","48a85ecf":"def plot_decision_tree(columns,maximum_depth,criterion_type,\n                       split_type,model_performance = None) :\n    \n    #separating dependent and in dependent variables\n    dtc_x = df_x[columns]\n    dtc_y = df_y[target_col]\n    \n    #model\n    dt_classifier = DecisionTreeClassifier(max_depth = maximum_depth,\n                                           splitter  = split_type,\n                                           criterion = criterion_type,\n                                          )\n    dt_classifier.fit(dtc_x,dtc_y)\n    \n    #plot decision tree\n    graph = Source(tree.export_graphviz(dt_classifier,out_file=None,\n                                        rounded=True,proportion = False,\n                                        feature_names = columns, \n                                        precision  = 2,\n                                        class_names=[\"Not churn\",\"Churn\"],\n                                        filled = True                         \n                                       )\n                  )\n    \n    #model performance\n    if model_performance == True :\n        telecom_churn_prediction(dt_classifier,\n                                 dtc_x,test_X[columns],\n                                 dtc_y,test_Y,\n                                 columns,\"features\",threshold_plot = True)\n    display(graph)\n    \nplot_decision_tree(features_num,3,\"gini\",\"best\")","4b29c559":"plot_decision_tree(features_cat,3,\"entropy\",\"best\",\n                   model_performance = True )","5d92a698":"columns = ['tenure','Contract_Month-to-month', 'PaperlessBilling',\n           'Contract_One year', 'Contract_Two year']\n\nplot_decision_tree(columns,3,\"gini\",\"best\",model_performance= True)","c1541b67":"def telecom_churn_prediction_alg(algorithm,training_x,testing_x,\n                                 training_y,testing_y,threshold_plot = True) :\n    \n    #model\n    algorithm.fit(training_x,training_y)\n    predictions   = algorithm.predict(testing_x)\n    probabilities = algorithm.predict_proba(testing_x)\n    \n    print (algorithm)\n    print (\"\\n Classification report : \\n\",classification_report(testing_y,predictions))\n    print (\"Accuracy Score   : \",accuracy_score(testing_y,predictions))\n    #confusion matrix\n    conf_matrix = confusion_matrix(testing_y,predictions)\n    #roc_auc_score\n    model_roc_auc = roc_auc_score(testing_y,predictions) \n    print (\"Area under curve : \",model_roc_auc)\n    fpr,tpr,thresholds = roc_curve(testing_y,probabilities[:,1])\n     \n    #plot roc curve\n    trace1 = go.Scatter(x = fpr,y = tpr,\n                        name = \"Roc : \" + str(model_roc_auc),\n                        line = dict(color = ('rgb(22, 96, 167)'),width = 2),\n                       )\n    trace2 = go.Scatter(x = [0,1],y=[0,1],\n                        line = dict(color = ('rgb(205, 12, 24)'),width = 2,\n                        dash = 'dot'))\n    \n    #plot confusion matrix\n    trace3 = go.Heatmap(z = conf_matrix ,x = [\"Not churn\",\"Churn\"],\n                        y = [\"Not churn\",\"Churn\"],\n                        showscale  = False,colorscale = \"Blues\",name = \"matrix\",\n                        xaxis = \"x2\",yaxis = \"y2\"\n                       )\n    \n    layout = go.Layout(dict(title=\"Model performance\" ,\n                            autosize = False,height = 500,width = 800,\n                            showlegend = False,\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(title = \"false positive rate\",\n                                         gridcolor = 'rgb(255, 255, 255)',\n                                         domain=[0, 0.6],\n                                         ticklen=5,gridwidth=2),\n                            yaxis = dict(title = \"true positive rate\",\n                                         gridcolor = 'rgb(255, 255, 255)',\n                                         zerolinewidth=1,\n                                         ticklen=5,gridwidth=2),\n                            margin = dict(b=200),\n                            xaxis2=dict(domain=[0.7, 1],tickangle = 90,\n                                        gridcolor = 'rgb(255, 255, 255)'),\n                            yaxis2=dict(anchor='x2',gridcolor = 'rgb(255, 255, 255)')\n                           )\n                  )\n    data = [trace1,trace2,trace3]\n    fig = go.Figure(data=data,layout=layout)\n    \n    py.iplot(fig)\n    \n    if threshold_plot == True : \n        visualizer = DiscriminationThreshold(algorithm)\n        visualizer.fit(training_x,training_y)\n        visualizer.poof()\n","6d449032":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n           metric_params=None, n_jobs=1, n_neighbors=5, p=2,\n           weights='uniform')\ntelecom_churn_prediction_alg(knn,os_smote_X,test_X,\n                             os_smote_Y,test_Y,threshold_plot = True)","5525a7c8":"from sklearn.ensemble import RandomForestClassifier","528a1dc8":"def plot_tree_randomforest(columns,nf_estimators,\n                           estimated_tree,maximum_depth,\n                           criterion_type,model_performance = None) :\n    \n    dataframe = df_tel_og[columns + target_col].copy()\n    \n    #train and test datasets\n    rf_x     = dataframe[[i for i in columns if i not in target_col]]\n    rf_y     = dataframe[target_col]\n    \n    #random forest classifier\n    rfc   = RandomForestClassifier(n_estimators = nf_estimators,\n                                   max_depth = maximum_depth,\n                                   criterion = criterion_type,\n                                  )\n    rfc.fit(rf_x,rf_y)\n    \n    estimated_tree = rfc.estimators_[estimated_tree]\n    \n    graph = Source(tree.export_graphviz(estimated_tree,out_file=None,\n                                        rounded=True,proportion = False,\n                            feature_names = columns, \n                            precision  = 2,\n                            class_names=[\"Not churn\",\"Churn\"],\n                            filled = True))\n    display(graph)\n    \n    #model performance\n    if model_performance == True :\n        telecom_churn_prediction(rfc,\n                                 rf_x,test_X[columns],\n                                 rf_y,test_Y,\n                                 columns,\"features\",threshold_plot = True)","1177d81a":"cols1 = [ i for i in train_X.columns if i not in target_col + Id_col] \nplot_tree_randomforest(cols1,100,99,3,\"entropy\",True)","c6204cda":"n = np.arange(0,10).tolist()\ncols1 = [ i for i in train_X.columns if i not in target_col + Id_col] \nfor i in n :\n    plot_tree_randomforest(cols1,10,i,3,\"entropy\",model_performance=False)","58e17b52":"n = np.arange(0,10).tolist()\ncols = idc_rfe[idc_rfe[\"rfe_support\"] == True][\"columns\"].tolist() \nfor i in n :\n    plot_tree_randomforest(cols,10,i,3,\"gini\",model_performance=False)","2aa6a78d":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB(priors=None)\n\ntelecom_churn_prediction_alg(gnb,os_smote_X,test_X,os_smote_Y,test_Y)","750e2d87":"from sklearn.svm import SVC","f75501f8":"svc_lin  = SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n               decision_function_shape='ovr', degree=3, gamma=1.0, kernel='linear',\n               max_iter=-1, probability=True, random_state=None, shrinking=True,\n               tol=0.001, verbose=False)\n\ncols = [i for i in tel.columns if i not in Id_col + target_col]\ntelecom_churn_prediction(svc_lin,os_smote_X,test_X,os_smote_Y,test_Y,\n                         cols,\"coefficients\",threshold_plot = False)","f5b9aa28":"svc_rbf  = SVC(C=1.0, kernel='rbf', \n               degree= 3, gamma=1.0, \n               coef0=0.0, shrinking=True,\n               probability=True,tol=0.001,\n               cache_size=200, class_weight=None,\n               verbose=False,max_iter= -1,\n               random_state=None)\n\ntelecom_churn_prediction_alg(svc_rbf,os_smote_X,test_X,os_smote_Y,test_Y,threshold_plot = False)","5b03bb33":"from lightgbm import LGBMClassifier","693f0968":"lgbm_c = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n                        learning_rate=0.5, max_depth=7, min_child_samples=20,\n                        min_child_weight=0.001, min_split_gain=0.0, n_estimators=100,\n                        n_jobs=-1, num_leaves=500, objective='binary', random_state=None,\n                        reg_alpha=0.0, reg_lambda=0.0, silent=True, subsample=1.0,\n                        subsample_for_bin=200000, subsample_freq=0)\n\ncols = [i for i in telcom.columns if i not in Id_col + target_col]\ntelecom_churn_prediction(lgbm_c,os_smote_X,test_X,os_smote_Y,test_Y,\n                         cols,\"features\",threshold_plot = True)","0a15657e":"from xgboost import XGBClassifier\n\nxgc = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n                    colsample_bytree=1, gamma=0, learning_rate=0.9, max_delta_step=0,\n                    max_depth = 7, min_child_weight=1, missing=None, n_estimators=100,\n                    n_jobs=1, nthread=None, objective='binary:logistic', random_state=0,\n                    reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n                    silent=True, subsample=1)\n\n\ntelecom_churn_prediction(xgc,os_smote_X,test_X,os_smote_Y,test_Y,\n                         cols,\"features\",threshold_plot = True)","5a598053":"from sklearn.metrics import f1_score\nfrom sklearn.metrics import cohen_kappa_score\n\n#gives model report in dataframe\ndef model_report(model,training_x,testing_x,training_y,testing_y,name) :\n    model.fit(training_x,training_y)\n    predictions  = model.predict(testing_x)\n    accuracy     = accuracy_score(testing_y,predictions)\n    recallscore  = recall_score(testing_y,predictions)\n    precision    = precision_score(testing_y,predictions)\n    roc_auc      = roc_auc_score(testing_y,predictions)\n    f1score      = f1_score(testing_y,predictions) \n    kappa_metric = cohen_kappa_score(testing_y,predictions)\n    \n    df = pd.DataFrame({\"Model\"           : [name],\n                       \"Accuracy_score\"  : [accuracy],\n                       \"Recall_score\"    : [recallscore],\n                       \"Precision\"       : [precision],\n                       \"f1_score\"        : [f1score],\n                       \"Area_under_curve\": [roc_auc],\n                       \"Kappa_metric\"    : [kappa_metric],\n                      })\n    return df\n\n#outputs for every model\nmodel1 = model_report(logit,train_X,test_X,train_Y,test_Y,\n                      \"Logistic Regression(Baseline_model)\")\nmodel2 = model_report(logit_smote,os_smote_X,test_X,os_smote_Y,test_Y,\n                      \"Logistic Regression(SMOTE)\")\nmodel3 = model_report(logit_rfe,train_rf_X,test_rf_X,train_rf_Y,test_rf_Y,\n                      \"Logistic Regression(RFE)\")\ndecision_tree = DecisionTreeClassifier(max_depth = 9,\n                                       random_state = 123,\n                                       splitter  = \"best\",\n                                       criterion = \"gini\",\n                                      )\nmodel4 = model_report(decision_tree,train_X,test_X,train_Y,test_Y,\n                      \"Decision Tree\")\nmodel5 = model_report(knn,os_smote_X,test_X,os_smote_Y,test_Y,\n                      \"KNN Classifier\")\nrfc = RandomForestClassifier(n_estimators = 1000,\n                             random_state = 123,\n                             max_depth = 9,\n                             criterion = \"gini\")\nmodel6 = model_report(rfc,train_X,test_X,train_Y,test_Y,\n                      \"Random Forest Classifier\")\nmodel7 = model_report(gnb,os_smote_X,test_X,os_smote_Y,test_Y,\n                      \"Naive Bayes\")\nmodel8 = model_report(svc_lin,os_smote_X,test_X,os_smote_Y,test_Y,\n                      \"SVM Classifier Linear\")\nmodel9 = model_report(svc_rbf,os_smote_X,test_X,os_smote_Y,test_Y,\n                      \"SVM Classifier RBF\")\nmodel10 = model_report(lgbm_c,os_smote_X,test_X,os_smote_Y,test_Y,\n                      \"LGBM Classifier\")\nmodel11 = model_report(xgc,os_smote_X,test_X,os_smote_Y,test_Y,\n                      \"XGBoost Classifier\")\n\n#concat all models\nmodel_performances = pd.concat([model1,model2,model3,\n                                model4,model5,model6,\n                                model7,model8,model9,\n                                model10,model11],axis = 0).reset_index()\n\nmodel_performances = model_performances.drop(columns = \"index\",axis =1)\n\ntable  = ff.create_table(np.round(model_performances,4))\n\npy.iplot(table)","fdc047b1":"def output_tracer(metric,color) :\n    tracer = go.Bar(y = model_performances[\"Model\"] ,\n                    x = model_performances[metric],\n                    orientation = \"h\",name = metric ,\n                    marker = dict(line = dict(width =.7),\n                                  color = color)\n                   )\n    return tracer\n\nlayout = go.Layout(dict(title = \"Model performances\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                        xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"metric\",\n                                     zerolinewidth=1,\n                                     ticklen=5,gridwidth=2),\n                        yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        margin = dict(l = 250),\n                        height = 780\n                       )\n                  )\n\n\ntrace1  = output_tracer(\"Accuracy_score\",\"#6699FF\")\ntrace2  = output_tracer('Recall_score',\"red\")\ntrace3  = output_tracer('Precision',\"#33CC99\")\ntrace4  = output_tracer('f1_score',\"lightgrey\")\ntrace5  = output_tracer('Kappa_metric',\"#FFCC99\")\n\ndata = [trace1,trace2,trace3,trace4,trace5]\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig)","9d1caed2":"lst    = [logit,logit_smote,decision_tree,knn,rfc,\n          gnb,svc_lin,svc_rbf,lgbm_c,xgc]\n\nlength = len(lst)\n\nmods   = ['Logistic Regression(Baseline_model)','Logistic Regression(SMOTE)',\n          'Decision Tree','KNN Classifier','Random Forest Classifier',\"Naive Bayes\",\n          'SVM Classifier Linear','SVM Classifier RBF', 'LGBM Classifier',\n          'XGBoost Classifier']\n\nfig = plt.figure(figsize=(13,15))\nfig.set_facecolor(\"#F3F3F3\")\nfor i,j,k in itertools.zip_longest(lst,range(length),mods) :\n    plt.subplot(4,3,j+1)\n    predictions = i.predict(test_X)\n    conf_matrix = confusion_matrix(predictions,test_Y)\n    sns.heatmap(conf_matrix,annot=True,fmt = \"d\",square = True,\n                xticklabels=[\"not churn\",\"churn\"],\n                yticklabels=[\"not churn\",\"churn\"],\n                linewidths = 2,linecolor = \"w\",cmap = \"Set1\")\n    plt.title(k,color = \"b\")\n    plt.subplots_adjust(wspace = .3,hspace = .3)","eb17ddfe":"lst    = [logit,logit_smote,decision_tree,knn,rfc,\n          gnb,svc_lin,svc_rbf,lgbm_c,xgc]\n\nlength = len(lst)\n\nmods   = ['Logistic Regression(Baseline_model)','Logistic Regression(SMOTE)',\n          'Decision Tree','KNN Classifier','Random Forest Classifier',\"Naive Bayes\",\n          'SVM Classifier Linear','SVM Classifier RBF', 'LGBM Classifier',\n          'XGBoost Classifier']\n\nplt.style.use(\"dark_background\")\nfig = plt.figure(figsize=(12,16))\nfig.set_facecolor(\"#F3F3F3\")\nfor i,j,k in itertools.zip_longest(lst,range(length),mods) :\n    qx = plt.subplot(4,3,j+1)\n    probabilities = i.predict_proba(test_X)\n    predictions   = i.predict(test_X)\n    fpr,tpr,thresholds = roc_curve(test_Y,probabilities[:,1])\n    plt.plot(fpr,tpr,linestyle = \"dotted\",\n             color = \"royalblue\",linewidth = 2,\n             label = \"AUC = \" + str(np.around(roc_auc_score(test_Y,predictions),3)))\n    plt.plot([0,1],[0,1],linestyle = \"dashed\",\n             color = \"orangered\",linewidth = 1.5)\n    plt.fill_between(fpr,tpr,alpha = .4)\n    plt.fill_between([0,1],[0,1],color = \"k\")\n    plt.legend(loc = \"lower right\",\n               prop = {\"size\" : 12})\n    qx.set_facecolor(\"k\")\n    plt.grid(True,alpha = .15)\n    plt.title(k,color = \"b\")\n    plt.xticks(np.arange(0,1,.3))\n    plt.yticks(np.arange(0,1,.3))","da00eb21":"tel\uc758 'TotalCarges'\ub77c\ub294 \uc5f4(\ud639\uc740 feature)\uc5d0 \uc811\uadfc\uc744 \ud568. \uc704\uc5d0\uc11c\ub3c4 \uc124\uba85 \ud588\ub4ef\uc774 .\uc744 \ucc0d\uc5b4\uc11c(tel.TotalCharges) tel\uc758 \ud558\uc704\uc5d0 \uc788\ub294 TotalCarges\uc5d0 \uc811\uadfc\uc744 \ud560 \uc218\ub3c4 \uc788\uc74c.\nreplace\ud568\uc218\ub97c \uc368\uc11c replace(\ub2f9\ud558\ub294 \uc544\uc774, \ubc14\ub014\uc544\uc774)\ub85c \ud574\uc904 \uc218 \uc788\uc74c. \ud574\uc11d\ud558\uc790\uba74 tel\uc758 TotalCarges\uc758 \" \"(\ube48\uce78) \uc598\ub97c np.nan(\uacb0\uce21\uac12)\uc73c\ub85c \ubc14\uafd4\ub77c \ub77c\ub294 \ub73b. np\ub294 numpy\ub97c \ub73b\ud568.","9c157c4e":"\ub3c8\uc744 \ub0b8, \uacc4\uc57d \uad00\ub828 feature\ub4e4\uc744 \ubf51\uc544\uc918\uc11c \ub123\uc5c8\uc744 \ub54c.","f561002a":"\uc5ec\uae30\uc5d4 \ub9e4\uac1c\ubcc0\uc218 df\uac00 \uc544\ub2c8\ub77c \uc6b0\ub9ac\uac00 \uc9c1\uc811\uc801\uc73c\ub85c \uc4f8 tel\uc744 \ub123\uc5b4\uc92c\ub2e4.\n\uadf8\ub9ac\uace0 Churn\uacfc \uac19\uc740 \uac12\uc744 \uc9c0\ub2d0 aggregate\uc548\uc5d0 \ub4e4\uc5b4\uac08 \uc22b\uc790\uac00 1\uc778 \uce5c\uad6c\ub4e4\uc744 \ub098\ud0c0\ub0b8 \uac83\uc774\ub2e4.","cc289f9f":"\uc774\uc81c \uae30\ubcf8\uc801\uc778 Logistic Regression\uc5d0\uc11c \ubc97\uc5b4\ub098 \uc880 \ub354 \uc2ec\ud654\ub41c \uacfc\uc815\uc744 \uc4f4\ub2e4. \n~~~\nfrom imblearn.over_sampling import SMOTE\n~~~\n\uba3c\uc800 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc624\ub294\ub370 SMOTE\uc774\ub77c\uace0 \uc368\uc838\uc788\ub294 \uce5c\uad6c\uc784.\n\n\uc704\uc5d0\ub3c4 \uc368\uc838\uc788\uc9c0\ub9cc SMOTE\uc740 Synthetic Minority Oversampling TEchnique\uc744 \ub73b\ud568.\n\n\uc65c \uc624\ubc84\uc0d8\ud50c\ub9c1\uc744 \ud558\ub294\uac00?\ub294 \uc6b0\ub9ac\uac00 \ub9cc\uc57d\uc5d0 10000\uba85\uc774 \uc788\ub294 \uc9d1\ub2e8\uc774 \uc788\uace0 10\uba85\uc774 \ub0a8\uc790\ub77c \ud558\uc790. \n\ucef4\ud4e8\ud130\uc5d0\uac8c \uc774\ub4e4\uc758 \uc815\ubcf4\ub97c \uc8fc\uace0 \ubd84\ub958\ud574\ub0b4\ub77c \ud558\uba74 \ub2e4 \uc5ec\uc790\ub85c \ubd84\ub958\ud560 \uac83\uc784. \ub0a8\ub140\ub97c \uad6c\ubcc4\ud560 \uc5c4\uccad \ud2b9\uc9d5\uc801\uc778 FEATURE\ub97c \uc8fc\uc9c0 \uc54a\ub294 \uc774\uc0c1. \ubaa8\ub450 \uc5ec\uc790\ub85c \ubd84\ub958\ud574\ub3c4 \ubb34\ub824 99.9%\uc758 \uc815\ud655\ub3c4\ub97c \uac00\uc9c0\uace0 \uc788\uc74c \ucef4\ud4e8\ud130\ub294. \n\n\uadf9\ub2e8\uc801\uc778 \uc608\uc600\uc9c0\ub9cc, \ud55c\ucabd\uc73c\ub85c \uc608\uce21\ud558\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uace0 \uc608\uce21\ub960\uc744 \ub192\uc774\uae30 \uc704\ud55c \ud558\ub098\uc758 \ubc29\ubc95\uc73c\ub85c \uc624\ubc84 \uc0d8\ud50c\ub9c1\uc744 \ud55c\ub2e4. \ub9c8\uad6c\uc7a1\uc774\ub85c \uc624\ubc84\uc0d8\ud50c\ub9c1\uc744 \ud558\uac8c \ub418\uba74 \uc911\ubcf5\ub41c \uac12\uc774 \ub9ce\uc544\uc9c0\uace0 \uc88b\uc9c0 \ubabb\ud55c\ub370\uc774\ud130\uac00 \ub41c\ub2e4. \uadf8\ub798\uc11c \uc624\ubc84\uc0d8\ud50c\ub9c1\uc758 \ubc29\ubc95 \uc911 \ud558\ub098\uc778 SMOTE\ub97c \ud558\ub294 \uac83. \n\nSMOTE\uc744 \uc124\uba85\ud558\uae30 \uc704\ud574 \uc6b0\ub9ac\ub294 KNN\uc774\ub77c\ub294 k-Nearest-Neighber\ub97c \uba3c\uc800 \uc54c\uc544\ubcf4\uc790. \n\nk-\ucd5c\uadfc\uc811 \uc774\uc6c3\uc774\ub77c\uace0\ub3c4 \ud558\ub294\ub370 \uc774 \uce5c\uad6c\ub294 \ub4a4\uc5d0\uc11c\ub3c4 \ub098\uc62c\uac70\uc9c0\ub9cc \uc815\ub9d0 \ub2e8\uc21c\ud55c \uc54c\uace0\ub9ac\uc998\uc774\ub2e4.\n\n\ube14\ub85c\uadf8\uc758 \ub0b4\uc6a9\uc744 \uc870\uae08 \ubca0\uaef4\uc624\uc790\uba74, \n\n![knn](https:\/\/img1.daumcdn.net\/thumb\/R960x0\/?fname=http%3A%2F%2Fcfile28.uf.tistory.com%2Fimage%2F23227D4358C791081D4555)\n![knn1](https:\/\/img1.daumcdn.net\/thumb\/R960x0\/?fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F2539894358C791092FA552)\n\n\uc774\ub7f0 \ub370\uc774\ud130\uac00 \uc788\ub2e4\uace0 \uce58\uc790. A~F\uae4c\uc9c0\uc758 \ub370\uc774\ud130\uac00 \uc6d0\ub798 \uc788\uc5c8\uace0 \uadf8\ub8f9(class)\uc774 O\uc640 \u25b2\ub85c \ub098\ub258\uc5b4\uc838 \uc788\uc5c8\ub2e4. \uac70\uae30\uc11c \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\uc778 N\uc774\ub77c\ub294 \uce5c\uad6c\uac00 \ub4e4\uc5b4\uc628 \uac83\uc774\ub2e4.\n\n![KKN](https:\/\/img1.daumcdn.net\/thumb\/R960x0\/?fname=http%3A%2F%2Fcfile1.uf.tistory.com%2Fimage%2F216CEE4358C791092166EE)\n\uc5ec\uae30\uc11c k\uac12\uc774 \ub4e4\uc5b4\uac04\ub2e4. k\uac12\uc774 1\uc774\uba74 1-Nearest-Neighber\ub85c \ud558\ub098\uc758 \uac70\ub9ac\uac00 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uce5c\uad6c\ub97c \ucc3e\uace0,\uadf8 \uce5c\uad6c\uc758 \uadf8\ub8f9\uc5d0 \ub4e4\uc5b4\uac00\uac8c \ub41c\ub2e4. \n\n\uac70\ub9ac\ub97c \uad6c\ud558\ub294 \uac83\uc740 \uc544\uc8fc \uc27d\ub2e4. \uc810 \uc0ac\uc774\uc758 \uac70\ub9ac. \uc5ec\uae30\uc120 X\uc640 Y\uac00 FEATURE\uac00 \ub418\ub294 \uac83\uc774\uace0, \uc774 FEATURE\ub4e4\ub85c \uac70\ub9ac\ub97c \uad6c\ud558\ub294 \uac83\uc774\ub2e4. \n\n\ud558\uc9c0\ub9cc \uac70\ub9ac\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc5d0\ub294 \uc5ec\ub7ec\uac00\uc9c0\uac00 \uc788\ub2e4. \uc774\ub294 \uc548\ubd10\ub3c4 \uc88b\uc740 \ub0b4\uc6a9\uc774\uace0 \ud63c\uc790\uc758 \uacf5\ubd80\ub97c \uc704\ud574\uc11c \ubc11\uc5d0\uc11c \uc815\ub9ac\ud558\ub358\uac00 \uc0dd\ub7b5\ud558\ub358\uac00 \ud560 \uac83.\n\n\uc704\uc758 \uadf8\ub9bc\uc5d0\uc11c, N\uc740 C\ub791 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc0ac\uc774\uc774\uba74\uc11c, O\ub85c \ubd84\ub958\uac00 \ub418\uac8c \ub41c\ub2e4.\n\n![knn2](https:\/\/img1.daumcdn.net\/thumb\/R960x0\/?fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F2749594358C7910A067786)\n\ud55c\ubc88 \ub354. \uc5ec\uae30\uc11c k\uac00 3\uc774\uba74 3-Nearest-Neighber\ub85c \uc138\ubc88\uc9f8\uae4c\uc9c0 \uac00\uae4c\uc6b4 \uce5c\uad6c\ub4e4\uc744 \ucc3e\uace0, \ub2e4\uc218\uacb0\uc5d0 \uc758\ud574 \ud310\ub2e8\uc744 \ud55c\ub2e4. \n\n\uc704\uc758 \uadf8\ub9bc\ucc98\ub7fc \ub41c\ub2e4\uba74 \uc0c8\ub85c\ub4e4\uc5b4\uc628 N\uc740 \u25b2\ub85c \ubd84\ub958\uac00 \ub41c\ub2e4.\n\n![SMOTE](https:\/\/camo.githubusercontent.com\/1e85918f840fd9c5cbe78b0fcf0a40377f08dd96\/687474703a2f2f692e696d6775722e636f6d2f55515a30354e302e6a7067)\n\uc704\uc758 \uadf8\ub9bc\uc740 SMOTE\uc744 \uadf8\ub9bc\uc73c\ub85c \uadf8\ub824\uc92c\ub2e4.\n\n\uc544\uae4c \uc124\uba85\ud588\ub358 \uc608\ub85c \uc124\uba85\uc744 \uc880 \ub354 \ud558\uc790\uba74, \uccab\ubc88\uc9f8\ub85c \ub300\ub2e4\uc218\ub97c \ucc28\uc9c0\ud558\ub294 \uc5ec\uc790\ub97c \uc9c0\uc6cc\ubc84\ub9b0\ub2e4. \uadf8\ub9ac\uace0 \uc124\uc815\uc5d0 \ub530\ub77c \uba87\uac1c\uc758 \uac00\uae4c\uc6b4 \uc774\uc6c3\ub4e4\uc744 \ucc3e\uc544\uc8fc\uace0, \uc774 \uc774\uc6c3\ub4e4 \uc0ac\uc774\uc5d0 \uc704\uce58\ud560 \uc218 \uc788\ub294 \uac12\ub4e4\uc744 \uac00\uc9c4 \ub0a8\uc790\ub4e4\uc744 \ub298\ub824\uc900\ub2e4.\n\n\ucf54\ub4dc\ub97c \ubcf4\uc790. \n\n~~~\ncols    = [i for i in tel.columns if i not in Id_col+target_col]\n\nsmote_X = tel[cols]\nsmote_Y = tel[target_col]\n\n#Split train and test data\nsmote_train_X,smote_test_X,smote_train_Y,smote_test_Y = train_test_split(smote_X,smote_Y,\n                                                                         test_size = .25 ,\n                                                                         random_state = 111)\n~~~\n\uc5ec\uae30\uae4c\uc9c0\ub294 \ube44\uc2b7\ud55c \ub0b4\uc6a9\uc774\ub2e4. \ub2e8\uc9c0 train_X,train_Y\uc5d0\uc11c smote_train_X,smote_train_Y \uc774\ub7f0\uc2dd\uc73c\ub85c \ubc14\uafd4\uc900 \uac83 \ubfd0\uc774\ub2e4.\n\n~~~\nos = SMOTE(random_state = 0)\nos_smote_X,os_smote_Y = os.fit_sample(smote_train_X,smote_train_Y)\nos_smote_X = pd.DataFrame(data = os_smote_X,columns=cols)\nos_smote_Y = pd.DataFrame(data = os_smote_Y,columns=target_col)\n~~~\nSMOTE\uc744 \uc801\uc6a9\uc2dc\ucf1c\uc8fc\ub294 \uacfc\uc815\uc774\ub2e4. default\ub85c \uc774\uc6c3\uc740 5\uac1c\ub85c \uc124\uc815\ub418\uc5b4\uc838 \uc788\uace0, \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc740 \uc790\ub3d9, random_state\ub294 \ud56d\uc0c1 \uac19\uc740 \uc624\ubc84\uc0d8\ud50c\ub9c1\uc744 \ud574\uc8fc\uae30 \uc704\ud568\uc774\ub2e4. \uc774\uc678 \uc5ec\ub7ec \uc635\uc158\ub4e4\uc774 \uc788\uc9c0\ub9cc \ub098\uba38\uc9c4 default\uac12\uc73c\ub85c \ud588\ub2e4.\n\n\uc801\uc6a9\uc2dc\ud0a4\uace0 \ub370\uc774\ud130\ud504\ub808\uc784\ud654 \uc2dc\ucf1c\uc8fc\uc5c8\ub2e4.\n\n~~~\nlogit_smote = LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)\n\ntelecom_churn_prediction(logit_smote,os_smote_X,test_X,os_smote_Y,test_Y,\n                         cols,\"coefficients\",threshold_plot = True)\n~~~\n\n\ub2e4\uc2dc\ub9d0\ud558\uc9c0\ub9cc \uc774\ub294 \ub85c\uc9c0\uc2a4\ud2f1\uc758 \uc2ec\ud654\uacfc\uc815\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4. \ub370\uc774\ud130 \uad6c\uc870\ub97c \ubc14\uafb8\uae30 \uc704\ud574 SMOTE\ud574\uc8fc\uace0 \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\ubd84\uc11d\uc5d0 \ub123\uc5b4\uc92c\ub2e4.\n\n##5.3. Recursive Feature Elimination","b5286462":"layout\ub3c4 \uc774\uc804\uacfc \ube44\uc2b7","113b137c":"describe() \uad04\ud638\uc548\uc5d0 include=\ud558\uace0 \uc870\uac74\uc744 \ub123\uc744 \uc218 \uc788\ub294\ub370, 'O'\ub97c \ub123\uc73c\uba74 \ubc94\uc8fc\ud615 \ubcc0\uc218\uc758 \ub300\ub7b5\uc801\uc778 \uc815\ubcf4\ub97c \uc54c \uc218 \uc788\ub2e4.\n\uc218\uce58\ud615\ubcc0\uc218(numeric)\ub780 \ubcf4\ud1b5 \uc22b\uc790\ub85c \ud45c\ud604\ub41c \uc544\uc774. \uc218\ud559\uc810\uc218 \uac19\uc740 \uac83? \ubc94\uc8fc\ud615\ubcc0\uc218\ub780 class\ub97c \uad6c\ubcc4\ud574 \uc904 \uc218\uc788\ub294 \uce5c\uad6c\ub4e4 \ubc18\uc774 1\ubc18 2\ubc18 3\ubc18 \uc774\ub7f0\uc2dd\uc73c\ub85c \uad6c\ubcc4\ud574\uc904 \uc218 \uc788\ub294.\n\n#2. Data Manipulation","b0ffb255":"\ub4dc\ub514\uc5b4 Decision Tree\uac00 \ub098\uc654\ub2e4. \ud55c\uad6d\uc5b4\ub85c \uc758\uc0ac\uacb0\uc815 \ub098\ubb34\ub77c\uace0 \ud55c\ub2e4.\n\n\uc774 \uce5c\uad6c\ub294 \uc6b0\ub9ac\uac00 \uc4f8 \ub9ce\uc740 \ubaa8\ub378\ub4e4\uc758 \uc5b4\uba38\ub2c8\uc640 \uac19\uc740 \uc874\uc7ac\ub784\uae4c?\n\n![decision2](https:\/\/thebook.io\/img\/006723\/480.jpg)\n![decision](https:\/\/mblogthumb-phinf.pstatic.net\/20160128_264\/2011topcit_1453956712931ERjYE_JPEG\/%BB%FD%B0%A2%C6%AE%B8%AE1.jpg?type=w2)\n\n\uc774\ub7f0 \ub290\ub08c\uc73c\ub85c \uc544\ub798\ub85c \ub0b4\ub824\uac00\ub294 \uce5c\uad6c\uc778\ub370 \ub098\ubb34\uc640 \uac19\uc740 \ubaa8\uc591\uc744 \ud558\uace0 \uc788\uc5b4\uc11c \uc758\uc0ac\uacb0\uc815\ub098\ubb34\ub77c\uace0 \ud55c\ub2e4.\n\n\ubcf4\ub294\ub300\ub85c \uae30\uc900\uc744 \uc0bc\uace0, \uadf8 \uae30\uc900\uc5d0 \ub530\ub77c \uac00\uc9c0\ub97c \ubed7\uc5b4\ub098\uac04\ub2e4. \n\n\uc608, \uc544\ub2c8\uc694\ub85c\ub3c4 \ub098\uac08\uc218 \uc788\uc9c0\ub9cc \uc5ec\ub7ec \uac00\uc9c0\ub4e4\ub85c\ub3c4 \ubed7\uc5b4\ub098\uac08 \uc218 \uc788\ub2e4. \uc57d\uac04 \uc2a4\ubb34\uace0\uac1c \ub290\ub08c\ub3c4 \ub09c\ub2e4.\n\n\ubd88\uc21c\ub3c4\ub77c\ub294 \uce5c\uad6c\uac00 \uc5ec\uae30\uc11c \ub098\uc624\uac8c \ub418\ub294\ub370, \ud55c \uacf5\uac04\uc5d0 \ub0a8\uc790, \uc5ec\uc790\uac00 \uc874\uc7ac\ud560\ub54c 50:50\uc73c\ub85c \uc788\ub2e4\uba74 \ubd88\uc21c\ud558\ub2e4\uace0 \ud45c\ud604\ud55c\ub2e4.\n![GINI](https:\/\/mblogthumb-phinf.pstatic.net\/20160128_125\/2011topcit_1453956726357KboxY_JPEG\/%BB%FD%B0%A2%C6%AE%B8%AE2.jpg?type=w2)\n\uc6b0\ub9ac\ub294 \uae30\uc900\uc744 \uc7a1\uc544 \ub0a8\uc790, \uc5ec\uc790\ub85c \uae54\ub054\ud558\uac8c \ubd84\ub958\ud574\uc57c \ud558\ub294\ub370, \ubd88\uc21c\ub3c4\ub97c \ucd5c\ub300\ud55c \uc904\uc774\ub294 \ubc29\ud5a5\uc73c\ub85c \uacc4\uc0b0\ud574 \ub098\uac00\uc57c\ud55c\ub2e4.\n\n\uc774\ub54c \uc4f0\ub294 \uce5c\uad6c\ub4e4\uc774 'entropy. \uc5d4\ud2b8\ub85c\ud53c'\ub77c\ub294 \uce5c\uad6c\uc640 'gini, \uc9c0\ub2c8'\ub77c\ub294 \uce5c\uad6c\ub2e4.\n\n\uc6b0\ub9ac \ud06c\ub864\ub9c1 \uc138\ubbf8\ub098\ub85c \uc608\ub97c \ub4e4\uc5b4\ubcf4\uc790.\n\n\ub0a8\ub140 \ud2b9\uc9d5\uc801\uc778\uac78\ub85c \ubd84\ub958\ud558\uc9c0 \uc54a\ub294\ub2e4\uace0 \uc0dd\uac01\ud588\uc744 \ub54c,\n\n\ud30c\uc8fc\uc5d0 \uc0ac\ub294\uac00?\ub85c \ubd84\ub958\ud574\ub0b4\uba74 \uc608->\uc5ec1, \uc544\ub2c8\uc694->\ub0a83,\uc5ec3\uc774\ub2e4. \n\n\ud558\uc9c0\ub9cc 96\uc778\uac00? \ub85c \ubd84\ub958\ud574\ub0b4\uba74 \uc608->\uc5ec2, \uc544\ub2c8\uc694->\ub0a83,\uc5ec2\uc774\ub2e4.\n\n\ubd88\uc21c\ub3c4\ub294 '\ud30c\uc8fc'\ubcf4\ub2e4 '96'\uc774\ub77c\ub294 \uae30\uc900\uc774 \uc870\uae08 \ub354 \uc798 \ubd84\ub958\ub97c \ud574\ub0c8\ub2e4. \n\n\uae30\ubcf8\uc801\uc73c\ub85c \uc704\uc5d0\uc11c \ubd88\uc21c\ub3c4\ub97c \uc904\uc5ec\ub098\uac00\ub294 \uac83\uc774 \uc88b\uc740 \uac83\uc774\ub2e4. \uacc4\uc0b0\uc2dd\uc774 \ucc28\uc774\uac00 \uc788\uc5b4 \uc0c1\ud669\uc5d0 \ub530\ub77c \uac12\uc774 \uc0b4\uc9dd \ub2e4\ub974\uac8c \ubd84\ub958\ud574\ub098\uac08 \ubfd0\uc774\ub2e4.\n\n\ubd84\ub958\uae30\uc900\uc774 \uc801\uace0 \uc815\ud655\ud558\uac8c \ubd84\ub958\ud574\ub0bc\uc218\ub85d \uc88b\uc740 \ubaa8\ub378\uc774\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ud55c\uba85\ud55c\uba85\uc758 \ud2b9\uc9d5\uc801\uc778 \uac83\uc744 \uac00\uc838\ub2e4\uac00 \ubd84\ub958\ud574\ub0b4\uba74 \uc758\ubbf8\uac00 \uc5c6\ub2e4. \n\n\ud06c\ub864\ub9c1\uc138\ubbf8\ub098 \uc0ac\ub78c\ub4e4\ub85c TRAIN\uc744 \uc2dc\ud0a4\uace0, \ub2e4\ub978 \uc0ac\ub78c\uc744 TEST\ub85c \uc0bc\uc544 \ubd84\ub958\ud574 \ub0b8\ub2e4\uba74 \uc774\uc804\uae4c\uc9c0 \uac00\uc9c0\uace0 \uc788\ub358 \ud55c\uba85\ud55c\uba85\uc758 \ud2b9\uc9d5\ub4e4\uc740 \ubd84\ub958\uae30\uc900\uc774 \ub420 \uc218\uc5c6\ub2e4.\n\n\ub370\uc774\ud130\uac00 \ubb34\uc218\ud788 \ub9ce\uc544 \ubaa8\ub4e0 \uac83\uc744 \uc608\uce21\ud588\uc73c\uba74 \uc88b\uaca0\uc9c0\ub9cc, \ub370\uc774\ud130\ub294 \uc2a4\ubb34\uace0\uac1c\ub97c \ud558\ub294 \ub9c8\ub0e5 \ud55c\uc815\uc801\uc774\uace0 \ubaa8\ub4e0 \uac83\uc744 \uc815\ud655\ud558\uac8c \uc608\uce21\ud558\uace0 \ubd84\ub958\ud560 \uc218\ub294 \uc5c6\ub2e4.\n\n\uadf8\ub798\uc11c \ubd84\ub958\uae30\uc900\uc774 \uc801\uace0 \uc815\ud655\ud558\uac8c \ubd84\ub958\ud574\ub0bc\uc218\ub85d \uc88b\uc740 \ubaa8\ub378\uc774\ub2e4.\n\n\uc5ec\uae30\uae4c\uc9c0\uac00 \uc758\uc0ac\uacb0\uc815\ub098\ubb34\uc758 \uc5b4\ub290\uc815\ub3c4 \uc124\uba85\uc774\uace0 \uc774\uc81c \ucf54\ub4dc\ub97c \uc124\uba85\ud558\uc790\uba74,\n~~~\nfeatures_cat  = score[score[\"feature_type\"] == \"Categorical\"][\"features\"][:3].tolist()\n\n#top 3 numerical features\nfeatures_num  = score[score[\"feature_type\"] == \"Numerical\"][\"features\"][:3].tolist()\n~~~\nfeatures_cat\uc5d4 score\uc5d0\uc11c\/ feature_type\uc774 == Categorical\uc778 \uc560\ub4e4\uc911([score[\"feature_type\"] == \"Categorical\"]) \/feature\ub4e4 \uc911\uc5d0([\"features\"]) \/[:3] \uc138\uac1c\ub97c \ubf51\uc544\uc8fc\uace0\/ \ub9ac\uc2a4\ud2b8 \ud615\uc2dd\uc73c\ub85c \ubc14\uafd4\uc92c\ub2e4.  (.tolist())\n\n[:3]\uc774 \ucc98\uc74c \ub098\uc654\ub294\ub370, \uc774\ub294 \ud30c\uc774\uc36c\uc5d0\uc11c \ub9ac\uc2a4\ud2b8\ub97c \uc798\ub77c\uc8fc\ub294 \ubc29\uc2dd(\uc778\ub371\uc2f1)\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4. \n\n[\uc885\uad6d,\ubcf4\ubbf8,\uc724\uc2dd,\uc720\uc120,\ud61c\uc778] \uc774\ub7f0 \uce5c\uad6c\uac00 \uc788\ub2e4\uace0 \uce58\uc790. \ud30c\uc774\uc36c\uc5d0\uc11c \uc885\uad6d\uc740 0, \ubcf4\ubbf8\ub294 1, \uc724\uc2dd\uc740 2 \uc774\ub7f0\uc2dd\uc73c\ub85c \ud560\ub2f9\ub41c\ub2e4.\n\n\uc81c\uc77c \ucc98\uc74c\uc774 0\uc774\ub2e4! \uc598\ub124\ub97c \uc798\ub77c\uc11c \ubcf4\uace0\uc2f6\ub2e4. \uadf8\ub7ec\uba74 [ : ]\uc694\ub7f0 \uce5c\uad6c\ub97c \uc4f0\uac8c\ub418\ub294\ub370 : \uc55e\ub4a4\ub85c \uc22b\uc790\ub97c \ub123\uac70\ub098 \ube44\uc6cc\ub454\ub2e4.  \n\n\uc544\uae4c \ub9d0\ud588\ub4ef\uc774 \uc885\uad6d\uc740 0\uc774\ub2e4. \ud558\uc9c0\ub9cc \ucc98\uc74c\ubd80\ud130\ub97c \ubcf4\uc5ec\uc8fc\uace0 \uc2f6\uc73c\uba74 \uc55e\uc744 \ube44\uc6cc\ub450\uba74 \ub41c\ub2e4. \uc724\uc2dd\uae4c\uc9c0\ub97c \ubcf4\uace0 \uc2f6\ub2e4\uba74 [:2]\uac00 \uc544\ub2c8\ub77c, [:3]\uc744 \ub123\uc5b4\uc57c\ud55c\ub2e4. \n\n\uc774\uc720\ub294 \uc55e\uc740 \uc774\uc0c1\uc774\uace0, \ub4a4\ub294 \ubbf8\ub9cc\uac19\uc740 \ub290\ub08c\uc774\ub2e4. [:2]\uba74 \uc885\uad6d,\ubcf4\ubbf8\ub9cc \uc120\ud0dd\uc774 \ub418\uace0 [:3]\uc774\uba74 \uc885\uad6d,\ubcf4\ubbf8,\uc724\uc2dd\uae4c\uc9c0 \uc120\ud0dd\ub41c\ub2e4.\n\n\ub610, [1:] \uc774\ub7f0\uc2dd\uc73c\ub85c \ub4a4\ub97c \ube44\uc6cc\ub450\uba74 1\ubd80\ud130 \ub05d\uae4c\uc9c0 \uac19\uc740 \ub290\ub08c\uc73c\ub85c, \ubcf4\ubbf8,\uc724\uc2dd,\uc720\uc120,\ud61c\uc778\uc774 \ud574\ub2f9\ub41c\ub2e4.\n\n\uc74c\uc218\ub85c\ub3c4 \ud45c\ud604\ud560 \uc218 \uc788\ub294\ub370 0\uc774 \uc885\uad6d\uc774\ub2c8\uae4c -1\uc740 \ud61c\uc778\uc774\ub2e4. \uac70\uafb8\ub85c \uac00\ub294 \ub290\ub08c. \n\nfeature_num\ub3c4 \ub611\uac19\uc740 \ub140\uc11d\uc774\ub2e4. 2\uc2dc\uac00 \ub118\uc5c8\uc73c\ub2c8 \ub0b4\uc77c\ud560\uaebc\n","a0697eca":"np.where\ub780 \uce5c\uad6c\uac00 \uc788\ub294\ub370, (\uc870\uac74, \uc870\uac74\uac12\uc744 \ub9cc\uc871\ud588\uc744 \ub54c \ubc18\ud658\uac12, \uc870\uac74\uc744 \ub9cc\uc871 \ubabb\ud588\uc744 \ub54c \ubc18\ud658\uac12) \uc744 \ub123\uc5b4 \uc8fc\ub294 \ud568\uc218\uc774\ub2e4.\n\ub9d0\uc774 \uc880 \uc5b4\ub824\uc6b4\ub370, if \ub791 \ube44\uc2b7\ud55c \ub290\ub08c\uc774\ub2e4. \uc5d1\uc140 if\ubb38\uc774\ub791 \ube44\uc2b7\ud568.\n\n\uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c \uc870\uac74\uc740 score['features']\uc5d0 .isin\uc774\ub780 \ud568\uc218\ub97c \uc37c\ub294\ub370 .isin\uc740 ()\uc548\uc5d0 \uc788\ub294 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba74 True, \uc544\ub2c8\uba74 False\ub97c \ubc18\ud658\ud55c\ub2e4. \n\nnum_cols\ub77c\uace0 \uc774\uc774\uc774\uc804\uc5d0 \uc124\uc815\ud574 \ub193\uc740 \uc560\uc788\uc74c. \uc598\ub294 \uc218\uce58\ud615 \ubcc0\uc218\ub4e4\uc744 \ubaa8\uc544\ub193\uc740 \uce5c\uad6c\uc784.\n\n\uc815\ub9ac\ud558\uc790\uba74 score['features']\uc5d0\/ .isin(num_cols) \uc218\uce58\ud615 \ubcc0\uc218\ub77c\uba74\/ 'Numerical'\uc774\ub77c\uace0\/ \uc544\ub2c8\uba74 'Categorical'\uc774\ub77c\uace0 \ubcc0\ud658\ud574 \uc918\ub77c. \uc774\ub7f0 \ub0b4\uc6a9\uc784.","24f0bae5":"\uc598\uac00 reset_index()\ub97c \ube80\uc560\uc784. ","b3862e9f":"shape[0]\uc740 \ud589\uc744 \ub73b\ud558\uace0, yes\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0\ub4e4\uc744 \ubd88\ub7ec\uc640\uc11c no\ub85c \uc9c0\uc815\ud574\uc92c\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \ub428.","d9a8a261":"\uc774\uc81c scatter \uc0b0\uc810\ub3c4\ub97c \uadf8\ub9ac\uace0 \uc2f6\uc74c.\n\nscatter\ub294 \uc218\uce58\ud615\uacfc \uc218\uce58\ud615\uc758 \uad00\uacc4\ub97c \uc54c\uace0 \uc2f6\uc740\uac70\uc784.\n~~~\ndf  = df.sort_values(by = \"Churn\" ,ascending = True)\n~~~\ndf\ub77c\ub294 \uac1d\uccb4\uc5d0 sort_values\ub77c\ub294 \ud568\uc218\ub97c \uc4f0\uba74 \ub0b4\ub9bc\ucc28\uc21c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc124\uc815\ud560 \uc218 \uc788\uc74c. ascending=\uc73c\ub85c \uc124\uc815\ud560 \uc218 \uc788\ub294\ub370 False\ub294 \ub0b4\ub9bc\ucc28\uc21c True\ub294 \uc624\ub984\ucc28\uc21c.\n\n~~~\nclasses = df[\"Churn\"].unique().tolist()\n~~~\n\nclasses\ub77c\ub294 \uac1d\uccb4\uc5d0 df['Churn']\uc758 .unique() \uace0\uc720 \uac12\ub4e4\uc744 .tolist() \ub9ac\uc2a4\ud2b8\ud654 \ud55c\ub2e4.\n\n\n\nclass_code\ub77c\ub294 \uac1d\uccb4\uc548\uc5d0 classes\uc758 \uac12\ub4e4\uc5d0 for\ubb38\uc73c\ub85c range(2) \ubc94\uc704 0,1\uc548\uc5d0\uc11c \ud55c\ubc88\uc529 \ub123\uc5b4\uc8fc\ub294\uac70\uc784. \uadf8\ub798\uc11c No\uc5d0\ub294 0\uc774, Yes\uc5d4 1\uc774 \ud560\ub2f9\ub428. \n\n~~~\ncolor_vals = [class_code[cl] for cl in df[\"Churn\"]]\n~~~\ncolor_vals\ub77c\ub294 \uac1d\uccb4\uc548\uc5d0 class_code\ub97c df['Churn']\uc758 Yes, No\uc5d0 \ub9de\uac8c 0\uacfc 1\uc744 \ub123\uc5b4\uc90c.\n\n~~~\n  pl_colorscale = \"Portland\"\n~~~\npl_colorscale \uc0c9\uc0c1 \uc18d\uc131\uc911\uc5d0 Portland\ub77c\ub294 \ud14c\ub9c8\uac00 \uc788\ub098\ubd04. \uc774\ub530\uac00 \uc500.\n\n~~~\ntext = [df.loc[k,\"Churn\"] for k in range(len(df))]\n~~~\nloc\ub77c\ub294 \ud568\uc218\ub294 \uc6d0\ud558\ub294 \uc790\ub8cc\ub97c \uc798\ub77c\ub0bc \uc218 \uc788\ub294 \ud568\uc218. loc[\ud589,\uc5f4]\uc744 \uc9c0\ubaa9\ud574\uc11c \uc798\ub77c\ub0b8\ub2e4.\n\n\ub4a4\uc5d0 for\ubb38\uc744 \uc368\uc918\uc11c k\ub9cc\ud07c len(df)\ubc88 \uc9d1\uc5b4\ub123\ub294\uac74\ub370. len\uc740 \uae38\uc774\ub97c \ub098\ud0c0\ub0b4\ub294 \ud568\uc218\uace0 \uc5ec\uae30\uc11c\ub294 df\uc758 \ud589\uae38\uc774\ub97c \uc758\ubbf8\ud55c\ub2e4.\n\n\ub2e4\uc2dc\uc4f0\uc790\uba74, text\ub780 \uac1d\uccb4\uc5d0 df\ub97c \uc798\ub77c\ub0b4\ub294\ub370 [k\ud589, 'Churn'\uc5f4]\uc744 k\ubc88(\ud589\uae38\uc774->len(df)) \ub9cc\ud07c \uc9d1\uc5b4\ub123\ub294 \uac83. \uadf8\ub0e5 text\ub780 \uac1d\uccb4 \uc548\uc5d0 df['Churn']\uc744 \uc9d1\uc5b4\ub123\ub294 \uac83.\n\n~~~\ntrace = go.Splom(dimensions = [dict(label  = \"tenure\",\n                                       values = df[\"tenure\"]),\n                                  dict(label  = 'MonthlyCharges',\n                                       values = df['MonthlyCharges']),\n                                  dict(label  = 'TotalCharges',\n                                       values = df['TotalCharges'])],\n                     text = text,\n                     marker = dict(color = color_vals,\n                                   colorscale = pl_colorscale,\n                                   size = 3,\n                                   showscale = False,\n                                   line = dict(width = .1,\n                                               color='rgb(230,230,230)'\n                                              )\n                                  )\n                    )\n    axis = dict(showline  = True,\n                zeroline  = False,\n                gridcolor = \"#fff\",\n                ticklen   = 4\n               )\n~~~\ntrace\uad6c\uc131\uc740 \uc544\uae4c\uc640 \ube44\uc2b7\ud568. Splom\uc774\ub780 \ud568\uc218\ub294 Scatter Plot Matrix\uc758 \uc900\ub9d0. \uc774\ud6c4 \ub098\uc624\uac8c \ub420 \uadf8\ub9bc\uc744 \ubcf4\uba74 \uc544 \uc774\uac8c \uadf8\uac70\uad6c\ub098 \uc54c\uac8c \ub420\uac70\uc784.\n\n\ub2e4\uc74c\uc744 \ubcf4\uba74 dimensions\uac00 \ub098\uc624\uace0, \uc6b0\ub9ac\uac00 \ubcf4\uace0\uc2f6\uc740 \uc218\uce58\ud615 \ubcc0\uc218\ub4e4\uc744 \uc9d1\uc5b4\ub123\uc5b4 \uc904\uac70\uc784. \ub77c\ubca8\uc5d0 \uc774\ub984\uc744 \uc9c0\uc815\ud574\uc8fc\uace0, value\uc5d0 \uc218\uce58\ud615\ubcc0\uc218\ub97c \uc9d1\uc5b4\ub123\uc5b4 \uc900\ub2e4. \n\ntext=text\ub77c\uace0 \ud558\ub294\ub370 \uc544\uae4c \uc9c0\uc815\ud574\uc92c\ub358 text\ub97c \ubd88\ub7ec\uc624\ub294 \uac83.\n\nmaker\ub294 \uc544\uae4c \ud588\ub4ef\uc774 \uc0c9\uc0c1\uc774\ub098 \uc5ec\ub7ec \uc870\uac74\uac12\uc744 \uc9c0\uc815\ud574\uc8fc\ub294\ub370 \uc774\uac70 \uc774\uc81c \ub118\uc5b4\uac00\uc790..\nhttps:\/\/plot.ly\/python\/reference\/ \uc5ec\uae30 \ub4e4\uc5b4\uac00\uc11c ctrl+f \ud574\uc11c \ucc3e\uc7c8..\n\n\ubc11\uc758 axis\ub294 \ucd95\uc124\uc815\uc784. \uc774\uac83\ub3c4 \uc804\uc5d0 \ud588\ub358 \uac83.\n~~~\n layout = go.Layout(dict(title  = \n                            \"Scatter plot matrix for Numerical columns for customer attrition\",\n                            autosize = False,\n                            height = 800,\n                            width  = 800,\n                            dragmode = \"select\",\n                            hovermode = \"closest\",\n                            plot_bgcolor  = 'rgba(240,240,240, 0.95)'\n~~~\nlayout\uc124\uc815\uc740 \uc774\uc804\uc5d0 \ud588\uace0 \ub2e4\ub978\uc810\uc740 dragmode\ub098 hovermode\ub294 \uadf8\ub0e5 \ubcf4\ub294 \ubc29\uc2dd\uc124\uc815.\n\nrgba\ub294 \uae30\uc874 \uc0c9\uc0c1 rgb\uc5d0 a\uac00 \ubd99\uc5b4\uc11c \uc54c\ud30c\ub85c \ud22c\uba85\ub3c4 \uc870\uc808.\n\n\n","b37535ed":"sklearn\ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 KNN\uc744 \ub370\ub824\uc654\ub2e4.\n\n\ub0b4\ubd80\ub97c \ubcf4\uba74 algorithm\uc740 \uba87\uac00\uc9c0 \ubc29\uc2dd\uc774 \uc788\ub294\ub370 auto\ub294 \uc54c\uc544\uc11c \uc801\uc808\ud55c \ubc29\ubc95\uc744 \uc801\uc6a9 \uc2dc\ucf1c\uc900\ub2e4\uace0 \ud55c\ub2e4.\n\nleaf_size\ub294 \uc18d\ub3c4\uc640 \uba54\ubaa8\ub9ac \uad00\ub828 \ub0b4\uc6a9\uc778\ub370 \uc5ec\uae30\uc120 \uadf8\ub0e5 default\uc778 30\uc744 \uadf8\ub300\ub85c \uc368\uc92c\ub2e4. \n\nmetric\uc740 \uac70\ub9ac \uacc4\uc0b0 \ubc29\uc2dd\uc744 \ub73b\ud558\ub294\ub370 default\ub294 minkowski\ubc29\uc2dd\uc774\ub2e4. \uc774\uc804\uc5d0 \ud55c\ubc88 \uc5b8\uae09\ud588\uace0, \uacc4\uc0b0\ubc29\uc2dd\uc774 \uc870\uae08 \ub2e4\ub974\ub2e4. \uc544\ub798 \uc774\ubbf8\uc9c0 \ucc38\uc870.\n\np\ub97c \uac19\uc774 \uc124\uba85\uc744 \ud574\uc57c\ud560 \uac83 \uac19\ub2e4. p\uac12\uc5d0 2 \uac00\ub4e4\uc5b4\uac00\uba74 \uc720\ud074\ub9ac\ub4dc\uac70\ub9ac\uac00 \ub41c\ub2e4. 1\uc774\uba74 \ub9e8\ud558\ud0c4 \uac70\ub9ac. \uc544\ub798 \uadf8\ub9bc\uc758 q\uac00 p\ub2e4. \uc218\ud559\uc801\uc778\uac8c \uadc0\ucc2e\ub2e4\uba74 pass.\n\n![1](https:\/\/www.saedsayad.com\/images\/KNN_similarity.png)\n\nmetric_params\ub294 None\uac12. default\uac12\uc774\ub2e4. \ubb54\uc9c0\ub294 \uc798 \ubaa8\ub974\uaca0\ub2e4. \uc544\ub9c8 \uacc4\uc0b0\uc5d0 \uac00\uc911\uce58? \uc8fc\ub294\ud615\uc2dd\uc774 \uc544\ub2d0\uae4c \uc2f6\uc740\ub370 \uc815\ud655\ud558\uc9c4 \uc54a\ub2e4.\n\nweight\ub294 \uadfc\uc811 \uc774\uc6c3\uc5d0 \ub300\ud55c \uac00\uc911\uce58\ub2e4. \uc635\uc158\uc778 uniform\uc740 \uac00\uc911\uce58\ub97c \ubaa8\ub4e0 \uacf3\uc5d0 \ub3d9\ub4f1\ud558\uac8c \uc8fc\ub294 \uce5c\uad6c. \uac70\ub9ac\uac00 \uba40 \uc218\ub85d \uac00\uc911\uce58\ub97c \ub354 \ud558\ub294 \ubc29\ubc95\uc740 distance\ub97c \uc4f0\uba74 \ub41c\ub2e4.\n\n\ub098\uba38\uc9c0\ub294 \uc774\uc804\ucc98\ub7fc \uadf8\ub9bc\uadf8\ub9ac\ub294 \uce5c\uad6c.\n\n##5.7. Vizualising a decision tree from random forest classifier","31b4a67b":"\ub4dc\ub514\uc5b4 \ubaa8\ub378\uc758 \ub9c8\uc9c0\ub9c9\uc778 XGB\uc784.\n\nXGBClassifier\ub97c \uc37c\uace0 base_socre\ub294 \ubaa8\ub4e0 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \ucd5c\ucd08 \uc608\uce21 score\ub97c \ub098\ud0c0\ub0b8 \uac83. default\ub294 0.5\uace0 \ub9ce\uc740 \uc2dc\ud589\uc774 \uc9c0\ub09c \ud6c4\uc5d0\ub294 \ubcc4 \uc758\ubbf8\uac00 \uc5c6\uc5b4\uc9c4\ub2e4.\n\ncolsample_bytree\ub294 \uac01\uac01\uc758 tree\ub97c \uad6c\uc131\ud560 \ub54c feature\ub4e4\uc758 \ube44\uc728\uc744 \ub098\ud0c0\ub0c4. 1\uc740 \ubaa8\ub450\ub97c \ub73b\ud55c\ub2e4.\n\ngamma\ub294 lightGBM\uc5d0\uc11c\uc758 min_split_gain\uacfc \uac19\ub2e4. \uc544\ub798\ub85c \ub0b4\ub824\uac08 \uc218\ub85d \uc880 \ub354 \uc88b\uc740 \ubaa8\ub378\uc774 \ub418\uc5b4\uc57c \ud558\ub294\ub370 loss\ub97c \uc904\uc774\ub294 \ubc29\ud5a5\uc73c\ub85c \uac00\uc57c\ud568. \uadf8 \ucd5c\uc18c\uac12\uc744 \uc598\uae30\ud55c\ub2e4. default\ub294 0.\n\nmax_delta_step\uc740 \ub300\uac8c \uc4f0\uc774\uc9c0 \uc54a\ub294 \uce5c\uad6c default\uac12\uc774 0\uc774\ub2e4 \ud558\uc9c0\ub9cc \uacfc\ub3c4\ud558\uac8c \ubd88\uade0\ud615\uc77c \uacbd\uc6b0 \uc4f0\uc774\uac8c \ub41c\ub2e4. \ubd88\uade0\ud615\uc77c \uacbd\uc6b0, \uac00\uc911\uce58\uac00 \uac70\uc758 \ubb34\ud55c\uc5d0 \uac00\uae4c\uc6cc\uc9c0\uae30 \ub54c\ubb38\uc5d0 \ud45c\uc900\ud654\ub97c \ud1b5\ud558\uc5ec \uc774\ub7f0 \ubb38\uc81c\uc810\uc744 \ud574\uacb0\ud560 \uc218 \uc788\ub2e4. \uc774 \uc77c\uc744 \ud574\uc8fc\ub294\uac8c max_delta_step.\n\nscale_pos_weight\uc740 \uae0d\uc815\uacfc \ubd80\uc815\uc758 \uac00\uc911\uce58\ub4e4\uc744 \ubc38\ub7f0\uc2a4 \uc7a1\uc544\uc8fc\ub294 \uc5ed\ud560\uc744 \ud55c\ub2e4. default\ub294 1\n\nseed\ub294 random number seed. random_state\uc640 \uac19\uc740 \uac83\uc73c\ub85c \ubcf4\uc5ec\uc9c4\ub2e4.\n\n\ub098\uba38\uc9c0\ub294 LightGBM\uacfc \ub611\uac19\ub2e4.\n\n##6.Model Performences","c0827d25":"\uce7c\ub7fc \uba85 \uc124\uc815","834a6e28":"pca\ub97c \uadf8\ub9ac\ub294 \uacfc\uc815\uacfc \uadf8\ub798\ud504.\n\n##3.10. Binary variables distribution in customer attrition(Radar Chart)","3fc05d42":"\ub098\uba38\uc9c4 \uac19\uc740\ub370 \uc0b0\uc810\ub3c4\ub97c \uadf8\ub9b4\ub54c \n~~~\nx = tel[tel[\"tenure_group\"] == tenure_group][\"MonthlyCharges\"]\uc5ec\uae38 \ubcf4\uba74 \n~~~\n\uc774 \ucf54\ub4dc\ub294 x\ucd95\uc5d0 tel\/\uc5d0 \/[tel['tenure_group']\/\uc758 \uac12\uc774 \/== tenure_group\/  tenure_group\uac12\uacfc \uac19\uc744 \ub54c\uc758  [''MonthlyCharges\"]\ub97c \ubd88\ub7ec\uc640\ub77c. \uc784. tel['tenure_group']==tenure_group\uc740 \uc870\uac74\uc774\uace0, \uad81\uadf9\uc801\uc73c\ub85c \uac00\uc838\uc624\uace0 \uc2f6\uc740\uc560\ub294  [''MonthlyCharges\"] \uc598\uc784.\n~~~\ndef plot_tenure_scatter(tenure_group,color) :\n~~~\n\uc704\uc5d4 \ud568\uc218\uc758 \uc815\uc758\uace0 \ubc11\uc5d0\uc11c \n~~~\ntrace1 = plot_tenure_scatter(\"Tenure_0-12\",\"#FF3300\")\ub97c \ubcf4\uba74. \n~~~\n\ntrace1\uc774\ub77c\ub294 \uac1d\uccb4\uc5d0 \ud568\uc218\uc778 plot_tenure_sctter\ub97c \ud638\ucd9c\ud558\uace0 \uac70\uae30\uc5d0 ('Tenure_0-12'<- tenure_group\uc774\uace0 ,'#FF3300'<-color\ub2e4.)","de640024":"def\ub294 \ud568\uc218\ub97c \ub9cc\ub4e4\uae30 \uc704\ud55c \uba85\ub839\uc5b4?\uc784.  lab()\uc774\ub780 \uc774\ub984\uc73c\ub85c \ud568\uc218\ub97c \uc815\uc758 \uad04\ud638\uc548\uc5d0 \uc788\ub294 tel\uc740 \ub9e4\uac1c\ubcc0\uc218 \ub77c\ub294 \uc5ed\ud560\uc744 \ud558\ub294\ub370.\n\n\uc0ac\uc2e4 \uc774 tel\uc740 \uc704\uc5d0 \uc801\ud78c tel\uacfc \ub2e4\ub978\uc544\uc774\uc784. \uadf8\ub0e5 \ud568\uc218 \uc815\uc758\ud560 \ub54c \ubc11\uc5d0 tel\uc744 \uc4f0\ub824\uace0 \ub123\ub294 \uc544\uc774\uc784. \ud5f7\uac08\ub9ac\uc9c0 \uc54a\uac8c \uc4f4\ub2e4\uace0 \uc0dd\uac01\ud558\uc790.\n\ntenure\uac00 \uc9c0\uc18d \uacc4\uc57d\uae30\uac04? \uac19\uc740\uac74\ub370 tel['tenure']\uc758 \uac12\uc774 12\uac1c\uc6d4 \uc774\ud558\ub97c Tenure_0-12\ub85c \ubcc0\ud658\uc2dc\ud0a8\ub2e4 ~ \ub77c\ub294 \ud568\uc218\uc784\n","9f59e845":"copy\ub294 \ub9d0 \uadf8\ub300\ub85c \ubcf5\uc0ac\uc784. \uc6d0\ubcf8\uc758 \ub370\uc774\ud130\ub97c \ud5e4\uce58\uc9c0 \uc54a\uc73c\ub824\uace0 \ubcf5\uc0ac\ud574\uc11c \uc500.","0204d9ad":"1\uc744 Yes\ub85c 0\uc744 No\ub85c","4b32f66a":"columns \uc5f4(\ubcf4\ud1b5 feature, \ub3c5\ub9bd\ubcc0\uc218, \uc18d\uc131)\uc744 \ubd88\ub7ec\uc624\ub294 \uac83. tel.columns\ub294 \uc5f4\uc744 \ubd88\ub7ec\uc628 \ub4a4 .tolist()\ub97c \ud574\uc918\uc11c \uc774\ub97c \ub9ac\uc2a4\ud2b8 \ud615\uc2dd\uc73c\ub85c \ubf51\uc544\ub0b8\uac83.\n\ud55c\ubc88 \uc2e4\ud589\ud574\ubcf4\uba74 \uc54c\uc544\ubcfc \uc218 \uc788\uc744\uac70\uc57c. \uc5f4\uc774 \uc5b4\ub5a4\uac83\ub4e4\uc774 \uc788\ub294\uc9c0 \uc0dd\uac01\ud574\uc8fc\uba74 \uc88b\uc74c.\n\ub3c5\ub9bd, \uc885\uc18d\uc774\ub77c\uace0 \ud558\uba74 \uc880 \uc5b4\ub824\uc6b4\ub370 \uc77c\uc815 '\uc870\uac74'(\ub3c5\ub9bd \ud639\uc740 \uc6b0\ub9b0\ubcf4\ud1b5 feature\ub77c \uce6d\ud568) \ub4e4\uc744 \uac00\uc9c0\uace0 '\uacb0\uacfc'(\uc885\uc18d)\ub97c \uc608\uce21 \ud55c\ub2e4\uace0 \ud558\uba74 \uc26c\uc6b0\ub824\ub098","70415284":"layout\uacfc \uc0b0\uc810\ub3c4.\n\n##3.5. Average Charges by tenure groups","48e0d7b7":"\ubaa9\ucc28\ub97c \ub9cc\ub4e4\uace0 \uc2f6\uc5c8\ub294\ub370 \ubabb\ub9cc\ub4e4\uc5c8\uc74c. \uc5f4\uc2ec\ud788 \uc2a4\ud06c\ub864\ud558\uae30 \ubc14\ub77c.\n\n\uc6b0\ub9ac\uac00 \ud558\uace0\uc2f6\uc740 \uc77c, \uad81\uadf9\uc801\uc778 \ubaa9\ud45c\ub294 \uc5ec\ub7ec\uc5ec\ub7ec \uc694\uc18c\ub4e4(\uc6b0\ub9b0 \ubcf4\ud1b5 Feature\ub77c \uce6d\ud558\uace0 \uc774\uc678\uc5d0 \ub3c5\ub9bd\ubcc0\uc218 \ub4f1\ub4f1 \ub77c\uace0 \uce6d\ud568.)\uc744 \uac00\uc9c0\uace0 Churn(Target, \uc885\uc18d\ubcc0\uc218)\uc774\ub77c\ub294 \uace0\uac1d\uc774\ud0c8\uc744 \uc54c\uace0 \uc2f6\uc740\uac70\uc784.\n\n\uc608\ub97c \ub4e4\uc790\uba74 \ud55c \uc720\uc800\uac00 \uc788\uc73c\uba74 \uc774 \uc0ac\ub78c\uc774 \ud55c\ub2ec\uc5d0 \ud1b5\ud654\ub97c \uc5bc\ub9c8\ub098 \ud588\ub294\uc9c0, \ud55c\ub2ec\uc5d0 \uc694\uae08\uc740 \uc5bc\ub9c8\ub098 \ub0c8\ub294\uc9c0\ub294 feature\ub4e4\uc774\uace0, \uace0\uac1d\uc774\ud0c8\uc740 target\uc784.\n\n\ub2e4\uc2dc\ud55c\ubc88 \ub9d0\ud558\uc790\uba74, \uc6b0\ub9ac\ub294 \ucef4\ud4e8\ud130\uc5d0\uac8c feature\ub4e4\uc744 \uc785\ub825\uc2dc\ucf1c\uc11c target\uc744 \uc608\uce21\ud558\uace0 \uc2f6\uc740\uac70\uc784.\n\n\uadf8\ub0e5 \uc774 feature\ub4e4\uc744 \uc785\ub825\uc2dc\ucf1c \ucef4\ud4e8\ud130\uac00 \uc54c\uc544\uc11c \ub531 \uacc4\uc0b0\uc744 \ud574\uc92c\uc73c\uba74 \uc88b\uaca0\uc9c0\ub9cc, \uadf8\ub807\uc9c0\uc54a\uc74c.  \uadf8\uc804\uc5d0 \ud574\uc57c\ud560 \uacfc\uc815\uc774 \uc788\uc74c.\n\n\uadf8 \uacfc\uc815\ub4e4\uc744 \uc6b0\ub9ac\uac00 \uccab\ub0a0\uc5d0 \uc870\uc0ac\ub97c \ud588\uc74c.\n\n\uba58\ud1a0\ub2d8\uc774 \ubcf4\ub0b4\uc8fc\uc2e0 \uce90\uae00\uc790\ub8cc\uc758 \uacfc\uc815\uc740\n\n1. Data\n\n2. Data Manipulation\n\n3. Exploratory Data Analysis\n\n4. Data preprocessing\n\n5. Model Building\n\n6. Model Performances\n\n\uc774\ub7f0 \ud750\ub984\ub300\ub85c \ud758\ub7ec\uac00\uace0, \ub300\ubd80\ubd84\uc758 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\uace0 \uc608\uce21\ud560 \ub54c \uc774\ub7f0 \uacfc\uc815\uc73c\ub85c \uac70\uccd0\uac10.\n\n1.Data\ubd80\ud130 \ubcf4\uc790\uba74 \ub370\uc774\ud130\ub97c \ub4e4\uc5ec\ub2e4 \ubcf4\ub294 \uacfc\uc815\uc784.\n\n\uc804\uccb4\uc801\uc778 \ub370\uc774\ud130\uac00 \uc5b4\ub5bb\uac8c \uc0dd\uaca8\uba39\uc5c8\uace0, \uc5b4\ub5a4 \uce5c\uad6c\ub4e4\uc774 feature\ub85c \uc874\uc7ac\ud558\uace0, \uacb0\uce21\uce58(\uc785\ub825\uc774 \uc5c6\ub294 \uac12)\uc740 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\ub294 \uc2dc\uac04\uc784. \uc815\ub9d0 \uc804\uccb4\uc801\uc73c\ub85c \uc5b4\ub5bb\uac8c \uc0dd\uaca8\uba39\uc5c8\uad6c\ub098~ \uc54c\ub824\uace0 \ud558\ub294 \uacfc\uc815.\n\n2.Data Manipulation\uc774 \uce5c\uad6c\ub294 \ub4e4\uc5ec\ub2e4 \ubd24\ub358 \uce5c\uad6c\ub4e4\uc744 \ub9cc\uc838\uc8fc\ub294 \uacfc\uc815\uc784 \ub370\uc774\ud130 \ubd84\uc11d\ud6c4\uc5d0 \ud558\uae30\ub3c4 \ud558\uc9c0\ub9cc, \uc5ec\uae30\uc11c\ub294 \uba3c\uc800 \ub9cc\uc838\uc8fc\ub294 \ubc29\uc2dd\uc744 \ud0dd\ud588\uc74c. \n\n\ub54c\uc5d0 \ub530\ub77c \ub2e4\ub978\ub370 \uc774 \uc0ac\ub78c\uc740 \uc815\ud655\ud788 \uc774 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \uc54c\uace0 \uc788\ub294 \uc0ac\ub78c\uc774\ub77c \uba3c\uc800 \ub9cc\uc838\uc8fc\uace0 \ubd84\uc11d\uc744 \ud55c \uac83\uac19\uc74c.\n\n\uc65c \ub370\uc774\ud130\ub97c \ub9cc\uc838\uc8fc\ub0d0? \ub77c\ub294 \uc758\ubb38\uc774 \uc0dd\uae30\ub294\ub370 \uc6b0\ub9ac\uac00 feature\ub4e4\uc744 \ucef4\ud4e8\ud130\uc5d0\uac8c \uc8fc\uace0 target\uc744 \uc54c\uc544\uc11c \uc608\uce21\ud574\ub77c! \ud558\uace0 \uc2f6\uc9c0\ub9cc \ucef4\ud4e8\ud130\ub294 \uc9d1\uc5b4\ub123\uc740\ub300\ub85c\ub9cc \ubc1b\uc544\ub4e4\uc784. \uc608\uce21\ub825\uc774 \ub5a8\uc5b4\uc9c0\uac70\ub098 \uc544\uc608 \uc758\ubbf8\uc5c6\ub294 \uacb0\uacfc\uac12\uc774 \ub9cc\ub4e4\uc5b4\uc9c0\uae30\ub3c4 \ud568. \n\n\uadf8\ub798\uc11c \uc608\uce21\ub825\uc744 \uc62c\ub9ac\ub824\uba74 \ucc3e\uc558\ub358 \uacb0\uce21\uce58\ub97c \ucc44\uc6cc\uc8fc\uace0, \ub370\uc774\ud130 \ud615\uc2dd\uc744 \ubc14\uafd4\uc8fc\uace0(\ub4a4\uc5d0\uc11c \uc124\uba85) \ub4f1\ub4f1\uc73c\ub85c \ub370\uc774\ud130\ub97c \ucef4\ud4e8\ud130\uac00 \uc54c\uc544\uba39\uac8c \uc608\uc058\uac8c \ub370\uc774\ud130\ub97c \ub2e4\ub4ec\uc5b4\uc918\uc57c\ud568.\n\n3.Exploratory Data Analysis \ud0d0\uc0c9\uc801\uc790\ub8cc\ubd84\uc11d\uc774\ub77c\uace0 \ud558\ub358 \uadf8\ub188\uc758 EDA\uc784.\n\nChurn\uacfc \uad00\ub828\ud574\uc11c \ud558\ub098\uc758 feature\ub9c8\ub2e4 \ud639\uc740 \uc5ec\ub7ec\uac1c\uc758 feature\ub4e4\uacfc\uc758 \uad00\uacc4\ub97c \ucc3e\uc544\ub0b4\ub294 \uacfc\uc815. \uc880 \ub354 \uad00\uacc4 \ub192\uc740 feature\ub97c \ucc3e\uc544\ub0b4\uace0 \uc800\uc5b4\uc5b8\ud600 \uc5f0\uad00\uc131 \uc5c6\ub294\uc9c0 \ubb50 \uadf8\ub7f0\uac78 \ubcf4\uace0\uc2f6\uc5b4\uc11c \uc774\ub7f0\uac78 \ud568. \n\n\uc2dc\uac01\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \uc918\uc11c \uc880 \uc788\uc5b4\ubcf4\uc784.\uc774\uac78 \ud558\uace0 2.Data Manipulation\ub85c \ub3cc\uc544\uac00\uc11c \ub370\uc774\ud130\ub97c \ub2e4\uc2dc \ub9cc\uc838\uc8fc\uae30\ub3c4 \ud568. feature\uac00 target\uacfc \uae4a\uc740 \uad00\uacc4\ub85c \ub9cc\ub4e4\uc5b4 \uc8fc\uae30 \uc704\ud574\uc11c. \ucef4\ud4e8\ud130\uac00 \ub354 \uc608\uce21\uc744 \uc798\ud558\uae30 \uc704\ud574\uc11c.\n\n4.Data preprocessing \uc774\uac83\ub3c4 \ub370\uc774\ud130\ub97c \ub9cc\uc838\uc8fc\ub294 \uc5ed\ud560\uc784.\n\n\uadfc\ub370 \uc774 \uce5c\uad6c\ub294 \uc880 \ub354 \uc804\ubb38\uc801\uc73c\ub85c \ub9cc\uc9c4\ub2e4\uace0 \ud574\uc57c\ud558\ub098? \uc9c1\uc811\uc801\uc73c\ub85c \ucef4\ud4e8\ud130\uac00 \uc54c\uc544\uba39\uc744 \uc218 \uc788\ub3c4\ub85d \ubc14\uafd4\uc8fc\ub294 \uc5ed\ud560\uc784. \n\n\ucef4\ud4e8\ud130\ub294 \uae00\uc790\ub85c \uc9d1\uc5b4\ub123\uc73c\uba74 \ubabb\uc54c\uc544\uba39\uace0 \uc22b\uc790\ub85c \ub123\uc5b4\uc918\uc57c\ud558\uace0, \uc774 \uc22b\uc790\ub3c4 \ub108\ubb34 \ucee4\ubc84\ub9ac\uba74 \ucef4\ud4e8\ud130\uac00 \uc598\ub124\ud55c\ud14c \uad00\uc2ec\uc744 \ubaa8\ub450 \uc3df\uc544\ubc84\ub9bc. \n\n\uadf8\ub7f0\uac78 \ud574\uacb0\ud558\ub294 \uacfc\uc815\uc778\ub370, \uc774 \uc678\uc5d0\ub3c4 \ub2e4\ub978 \uacfc\uc815\uc774 \uc788\uc9c0\ub9cc \uc9c0\uae08 \ub9d0\ud558\ub294 \uac83 \ubcf4\ub2e4 \ubc11\uc5d0\uc11c \uc124\uba85\ub418\uc5b4 \uc788\uc74c. \ub300\uac15 \uc774\ub7f0\uac70\uad6c\ub098 ~ \ub118\uc5b4\uac00\uc790.\n\n5.Model Building\n\n6.Model Performances\n\n5\uc640 6\uc740 \ud55c\uaebc\ubc88\uc5d0 \ubcf4\ub294\uac8c \uc88b\uc744\uac83 \uac19\uc544\uc11c. 5\ubc88\uc740 \ubaa8\ub378\uc744 \ub9cc\ub4dc\ub294 \uacfc\uc815\uc774\uace0 6\ubc88\uc740 \uc774 \ubaa8\ub378\uc744 \ud3c9\uac00\ud558\ub294 \uacfc\uc815\uc784. \n\n\uc5ec\uae30\uc11c \ub9d0\ud558\ub294 \ubaa8\ub378\uc774\ub780, feature\ub4e4\uc744 \uc9d1\uc5b4 \ub123\uc5b4\uc11c target\uc73c\ub85c \uc608\uce21\ud558\uac8c \ub9cc\ub4dc\ub294 \ub3c4\uad6c\uc815\ub3c4\ub85c \uc0dd\uac01\ud558\uba74 \uc88b\uc74c. \n\n\uc774 \ub3c4\uad6c\ub4e4\uc774 \uad49\uc7a5\ud788 \ub9ce\uc740\ub370 \ucef4\ud4e8\ud130\ub294 \uc5f0\uc0b0\uc744 \ud558\uc796\uc544? feature\ub4e4\uc744 \uc5f0\uc0b0\ud574\uc11c target\uc73c\ub85c \uc608\uce21\ud558\ub294 \uacfc\uc815\uc774 \uc218\ud559\uc801\uc73c\ub85c,\ub610 \ubc29\uc2dd\uc801\uc73c\ub85c \ub2ec\ub77c\uc11c \ubaa8\ub378\uc774 \ub9ce\uc740\uac70. \ud558\ub098\ud558\ub098 \ubc11\uc5d0\uc11c \ub2e4\uc2dc \uc124\uba85\ud560 \uc608\uc815\uc784. \n\n\ub610 Performances\ub97c \uce21\uc815\ud558\ub294 \ubc29\uc2dd\ub3c4 \ub9ce\uc74c. \uc774\uac83\ub3c4 \ubc11\uc5d0\uc11c \uc124\uba85.\n\n\uc774\uac8c \uc804\uccb4\uc801\uc778 \ubd84\uc11d, \uc608\uce21\uc758 \uacfc\uc815\uc774\uace0 \uc0ac\ub78c\ub9c8\ub2e4 \uc870\uae08\uc529 \ub2e4\ub974\ub2e4.\n\n\uc774\uc81c \ucf54\ub4dc\ub97c \ubcf4\uba74\uc11c \ud558\ub098\ud558\ub098 \uc0b4\ud3b4\ubcfc\uac70\uc784. \n","caf5c3bf":"\uad49\uc7a5\ud788 \uae38\uc5b4\ubcf4\uc774\uace0 \ubcf5\uc7a1\ud574 \ubcf4\uc774\uc9c0\ub9cc \uc704\uc5d0\uc788\ub294 \uac83\ub4e4\uc744 \ubc18\ubcf5\ud55c \uac83 \ubfd0\uc784.\n\uac81\uba39\uc9c0 \ub9d0\uace0 \ucc9c\ucc9c\ud788 \uc0b4\ud3b4\ubcf4\uc790.\n\n\n\ub2e8\uc9c0 \uc6b0\ub9ac\uac00 \uac01 \uc18d\uc131\ub4e4\uc5d0 \ub300\ud55c churn\uacfc No churn\uc77c\ub54c \uc5b4\ub290\uc815\ub3c4 \ucc28\uc9c0\ud558\ub294\uc9c0 \ubcf4\uace0\uc2f6\uc740\uac74\ub370,\n\ucf54\ub4dc\ub97c \uac01 \uc18d\uc131\ub9c8\ub2e4 \ud558\ub098\ud558\ub098 \uc4f0\uba74 \uadc0\ucc2e\uc73c\ub2c8 plot_pie\ub780 \ud568\uc218\ub97c \uc9c0\uc815\ud574 \ub193\uace0 \uc27d\uac8c \ubd88\ub7ec\uc640\uc8fc\uace0 \uc2f6\uc740\uac70\uc784.\n\n\uc608\ub97c\ub4e4\uc5b4 \uc778\ud130\ub137 \uc11c\ube44\uc2a4\ub97c \uc774\uc6a9\ud558\ub294\uc9c0\uc5d0 \ub530\ub978 churn\uc77c\ub54c \ube44\uc728, no churn\uc77c\ub54c \ube44\uc728, \n\ub098\uc774\uac00 \ub9ce\uc744\ub54c churn \ube44\uc728, no churn\uc77c\ub54c \ube44\uc728\ub4f1\ub4f1. \n\n\ndef\ubc14\ub85c \ubc11\uc904\ubd80\ud130 \ubcf4\uba74 trace1\ubd80\ud130, trace2, layout \ud574\uc11c \ub611\uac19\uc740 \ucf54\ub4dc\uac00 \ubc18\ubcf5\ub418\uace0 \uc788\uc74c.\ntrace1\uc5d4 churn\uc744, trace2\uc5d4 No churn\uc744 \uc124\uc815\ud574\uc11c \ub450\uac1c\uc758 \ucc28\ud2b8\ub97c \ud55c\ubc88\uc5d0 \ubcfc \uc218 \uc788\uac8c \ud574\uc900\uac83. \n\n\n\uc774\uc804\uc5d4 value\uc640 label\uc744 \ub530\ub85c \n~~~\nval=tel['Churn'].value_counts().values.tolist()<-\uc774\ub7f0\uc2dd\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc11c\n\n\ntrace=go.Pie(labels=lab, values=val, <-\uc774\ub807\uac8c \ub123\uc5b4\uc92c\ub294\ub370\n~~~\ndef \uc774\ud558\uc5d0\uc120 \n~~~\ntrace1=go.Pie(values=churn[column].value_counts().values.tolist(),\n\nlabels=churn[column].value_counts().keys().tolist()\n~~~\nChurn \uac1d\uccb4\uc758 ['column']\uc744 \ubd88\ub7ec\uc624\uac8c \ud588\uc74c. \n\n\n\n\uc774\uc804\uc758 trace\uc640 layout\uacfc \ucd94\uac00\ub41c \ucf54\ub4dc\ub97c \ubcf4\uc790\uba74 \uba3c\uc800 trace\uc5d0\uc11c \ndomain\uc740 \uc2e4\ud5d8\ud574 \ubd24\ub294\ub370 \uc704\uce58\ub97c \uc124\uc815\ud574\uc90c. name\uc740 \uadf8\ub0e5 \uc774\ub984\uc124\uc815(\ub531\ud788 \ubcc0\ud558\ub294 \uac74 \ub208\uc5d0 \uc548\ubcf4\uc784).\n~~~\n+domain=dict(x=[0,.48]) \n~~~\n\uc5d0\uc11c \ubd24\uc744\ub54c dict\ub294 \uc0bd\uc785, (x=['\uc218\ud3c9\uc704\uce58','\uc218\uc9c1\uc704\uce58'])\uc774\uace0, \uac01 \uc704\uce58\uac12\uc740 0~1\uc0ac\uc774 \uac12\uc744 \uac00\uc9c4\ub2e4.\n\n\ub2e4\uc74c\uc5d4 layout\uc744 \ubcf4\uba74 \n~~~\n    layout = go.Layout(dict(title = column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            annotations = [dict(text = \"churn customers\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .15, y = .5)\n~~~                                            \nannotation\uc774\ub780 \uce5c\uad6c\uac00 \uc788\uc74c. dict\ub97c \ud574\uc11c \uc0bd\uc785\uc744 \ud574\uc8fc\ub294\ub370, \ub4e4\uc5ec\ub2e4\ubcf4\uba74\n\ntext, font, showarrow, x, y\uac19\uc740\uac8c \ub4e4\uc5b4\uac00 \uc788\uc74c.\n\ntext\ub294 \uc774 \uadf8\ub798\ud504\uac00 \ub204\uad6c\uc5d0\uc694~ \uc54c\ub824\uc8fc\ub294 \uce5c\uad6c\uc784. \uadf8\ub798\ud504\uc758 \ubcf4\uc5ec\uc9c0\ub294 \uc774\ub984 \uc124\uc815\uac19\uc740\uac70. font\ub294 \uc5b8\uc81c\ub098 \uadf8\ub807\ub4ef \uae00\uc790\ud06c\uae30 \ub4f1\uc744 \uc870\uc808\ud560 \uc218 \uc788\uac8c\ud574\uc90c.  \n\nshowarrow\uac00 \ubb58\uae4c \uad81\uae08\ud588\ub294\ub370 \uc2e4\ud5d8\ud574\ubcf4\ub2c8\uae4c \uc598\uac00 \uac54\uc5d0\uc694 \ud558\uba74\uc11c \ud654\uc0b4\ud45c\ub85c \ud45c\uc2dc\ud574\uc90c \u314b\u314b\u314b \uadfc\ub370 \uae30\ubcf8\uac12\uc740 True\uace0 False\ub85c \uc124\uc815\ud574\uc8fc\uba74 \ud654\uc0b4\ud45c\uac00 \uc5c6\uc74c\nx,y\ub294 \uc774 text\uc758 \uc704\uce58\ub97c \uc9c0\uc815\ud574\uc900\ub2e4.\n\n\n\n\n","e03c4812":"\ucf54\ub4dc \uc9dc\ub2e4\ubcf4\uba74 \uacbd\uace0\ubb38\uc790 \ub728\ub294\ub370 \uadf8\uac78 \uc548\ub098\uc624\uac8c \ud574\uc90c.\n","706e9721":"rename\uc740 \uc774\ub984\uc744 \ub2e4\uc2dc \uc124\uc815\ud558\ub294 \uac83. \uc5f4\uc5d0\uc11c 'index'\ub780 \uce5c\uad6c\ub97c 'feature'\ub85c \ubc14\uafd4\ub77c.","8c73a93e":"cat_cols\ub77c\ub294 \uac1d\uccb4\uc5d0 tel\uc758 nunique()\uc5d0\uc11c tel.nunique\uac00 6\uac1c \ubbf8\ub9cc\uc778 \uce5c\uad6c\ub4e4\uc744 \ubf51\uc544\ub0b4\uc11c list\ub85c \uc815\ub9ac.\n\nnunique()\ub780 \uace0\uc720\uac12 \uac2f\uc218\ub97c \uc138\uc8fc\ub294 \uce5c\uad6c. \uc704\uc5d0 \uc788\ub2e4.\n\n\uc815\ub9ac\ud558\uc790\uba74 cat_cols\ub77c\ub294 \uac1d\uccb4\uc5d0 \uace0\uc720\uac12\uc758 \uac2f\uc218\uac00 6\uac1c \ubbf8\ub9cc\uc778 feature\ub97c \ubf51\uc544\ub0b8\uac83.\n","14a6b680":"\uacc4\uc18d\ud558\ub358 \uc5f4 \uc124\uc815.","e703f982":"socres\ub97c \ub098\uc624\uac8c \ud574\uc92c\uace0, P-Value\uac12\uc744 \ub098\uc624\uac8c \ud574\uc92c\ub2e4.","ff402c6f":"\ub808\uc774\uc544\uc6c3 \uc124\uc815 title, \uc0c9\uc0c1\ub4e4 \uc124\uc815\ud574\uc8fc\ub294 \uce5c\uad6c\n\nplot_bgcolor\ub294 \uc5b4\ub514\uc11c \ubcc0\ud558\ub294\uc9c0 \ubaa8\ub974\uaca0\ub124 \npaper\ub294 \ubc30\uacbd\uc0c9\uae54\uc774 \ubcc0\ud568. \ubc14\uafd4\ubcf4\uba74","2ca4b502":"describe()\uc740 \uc218\uce58\ud615\ubcc0\uc218\uc758 \ub300\ub7b5\uc801\uc778 \uc218\uce58\uac12(\ud3c9\uade0, \uc911\uc704\uc218 \ub4f1)\ub4e4\uc744 \ubcfc \uc218 \uc788\uac8c \ud574\uc900\ub2e4.","590f9949":"\ucf54\ub4dc\ub294 \uc774\uc804\uacfc \ube44\uc2b7\ud558\ub2e4. sklearn\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 RandomForestClassifier\ub97c \uc0ac\uc6a9\ud558\uc600\uace0, \ub370\uc774\ud130\ub97c x\uc640 y\ub85c \ub098\ub204\ub294 \uacfc\uc815\ub3c4 \uac19\ub2e4.\n\n\uc774\uc81c \ub0b4\ubd80\uc758 \uc124\uc815 \uac12\ub4e4\uc744 \ubcf4\uc790\uba74,\n\n~~~\n    rfc   = RandomForestClassifier(n_estimators = nf_estimators,\n                                   max_depth = maximum_depth,\n                                   criterion = criterion_type\n~~~\nn_estimators\ub780 \ubaa8\ub378\uc758 \uac2f\uc218\ub97c \uc758\ubbf8\ud55c\ub2e4. \uc758\uc0ac\uacb0\uc815\ub098\ubb34\uac00 \uba87\uac1c\ub97c \ub9cc\ub4e4\uace0 \ud569\uce60 \uac83\uc778\uc9c0 \uacb0\uc815\ud55c\ub2e4.\n\n\ub098\uba38\uc9c4 \uc758\uc0ac\uacb0\uc815\ub098\ubb34\uc640 \uac19\ub2e4.\n\n~~~\nestimated_tree = rfc.estimators_[estimated_tree]\n~~~\nestimated_tree\ub294 \ubcf4\uc5ec\uc904 \ud2b8\ub9ac\uc758 \uac2f\uc218. estimators_\ub294 \uadf8 \uc544\uc774\ub4e4\uc744 \ud569\uccd0\ub193\uc740 \uce5c\uad6c.\n\n\n\ub098\uba38\uc9c4 \ub2e4\ub978\uc810\uc774 \uc5c6\ub2e4\n","710f7307":"\ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ub123\uc5b4\uc92c\uace0. Univariate Selection\uc774\ub780 \uce5c\uad6c\ub97c \ud574\uc904\uac70\uc784. \uc544\ub798\uc640 \uac19\uc740 \uc124\uba85\uc774 \uc368\uc838\uc788\ub2e4.\n\nFeature Extraction with Univariate Statistical Tests (Chi-squared for classification)\n\nuses the chi squared (chi^2) statistical test for non-negative features to select the best features\n\n\uce74\uc774\uc81c\uacf1 \uac80\uc815\uc744 \ud1b5\ud574\uc11c \ud558\ub294\ub370 \uc218\ud559\uc801\uc778\uac70 \uc81c\uccd0\ub450\uace0 p-value\uac12\uc774 0.05\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc720\uc758\ud558\ub2e4 !!! \uc774\uc815\ub3c4\ub9cc \uae30\uc5b5\ud558\uba74 \uc88b\uc744\ub4ef.\n\n\uc544\ubb34\ud2bc \uc704\uc5d0 \ucf54\ub4dc\ub4e4\uc740 \ud3c9\uc0c1\uc2dc \ud574\uc8fc\ub358 \uce5c\uad6c\ub4e4\uacfc \ud06c\uac8c \ub2e4\ub974\uc9c0 \uc54a\uc74c. x(feature)\uc640 y(target)\ub85c \ub098\ub214.","0c34143a":"groupby\ub780 \ud568\uc218\uac00 \ucc98\uc74c \ub098\uc654\ub294\ub370 \uc774 \uce5c\uad6c\ub294 \uc598\ub124 \uae30\uc900\uc73c\ub85c \ubb36\uc5b4\uc8fc\ub77c\ub294 \uac70\uc784.\n\n(['tenure_group',\"Churn'])\uc744 \uae30\uc900\uc73c\ub85c \ubb36\uc5b4\ub193\uc740\uac70\uc5d0\uc11c,\n\n[['MonthlyCharges','TotalCharges']]\ub97c \ubf51\uc544\ub0b4\uc11c\n\n.mean() \ud3c9\uade0\uc744 \ub0b4\uace0\n\n.reset_index()\ub97c \ud574\uc918\ub77c.\uc778\ub370 reset_index\ub97c \uc548\ud574\uc8fc\uba74 \uc870\uae08 \ub2e4\ub978\ud615\ud0dc\ub85c \uc9c0\uc800\ubd84\ud558\uac8c \ub098\uc634.\n\uc9c0\uc6cc\uace0 \ucc28\uc774\uc810\uc744 \ubcf4\uba74 \uc88b\uc744\ub4ef?\n\n\uadf8\ub798\uc11c \ube44\uad50\ud558\ub824\uace0 no\ub77c\ub294 \uc560\ub97c \ub9cc\ub4e4\uc5b4 \uc918\ubd24\uc74c.\n","42ad738c":"\ub370\uc774\ud130 \ud504\ub85c\uc138\uc2f1\uc744 \uc704\ud55c \ub3c4\uad6c\ub4e4\uc784. sklearn\uc5d0 \uc788\ub294 LabelEncoder\uc640 StandardScaler\ub97c \uc500.","849e1b2b":"\uad49\uc7a5\ud788 \ucf54\ub4dc\uac00 \uae38\ub2e4. \n\n\uc54c\uace0\ub9ac\uc998\uc744 \ud3c9\uac00\ud558\uae30 \uc704\ud55c \ucf54\ub4dc+ \uadf8 \ud3c9\uac00\ub97c \uc2dc\uac01\ud654\ub97c \uc704\ud55c \ucf54\ub4dc\ub2e4. \uc5ec\ub7ec\uc5ec\ub7ec \ud3c9\uac00\uc9c0\ud45c\uac00 \uc788\ub294\ub370, \ucf54\ub4dc\ub97c \ubcf4\uba74\uc11c \ud558\ub098\uc529 \ub4e4\uc5ec\ub2e4\ubcf4\uc790.\n\n~~~\ndef telecom_churn_prediction(algorithm,training_x,testing_x,\n                             training_y,testing_y,cols,cf,threshold_plot):\n~~~\n\ud568\uc218 \uc815\uc758\ub9cc \ubd10\ub3c4 \uad49\uc7a5\ud788 \ub9ce\uc740 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc774 \ub4e4\uc5b4\uac00 \uc788\ub2e4. \ub098\uc62c\ub54c\ub9c8\ub2e4 \ud558\ub098\uc529 \uc124\uba85.\n\n~~~\n    algorithm.fit(training_x,training_y)\n~~~\n\uc544\uae4c \uc608\uce21\ud558\uae30 \uc704\ud55c \uc5ec\ub7ec \ubaa8\ub378\ub4e4\uc744 \uc54c\uace0\ub9ac\uc998\uc774\ub77c\uace0 \uc5ec\uae30\uc11c \ud45c\ud604\ud588\ub2e4. \uc774 \uc54c\uace0\ub9ac\uc998\uc744 \uc801\uc6a9\uc2dc\ud0a4\ub294 \uac78 fit\uc774\ub77c\ud558\uace0 \uad04\ud638 \uc548\uc5d0\ub294 train_x, train_y\uac00 \ub4e4\uc5b4\uac04\ub2e4. .fit\uc740 training_x\uc640 training_y\ub85c \uacf5\ubd80\ub97c \uc2dc\ud0a8\ub2e4.  \uc815\ub3c4\ub85c \uc0dd\uac01\ud558\uba74 \uc88b\ub2e4.\n\n~~~\n    predictions = algorithm.predict(testing_x)\n    probabilities = algorithm.predict_proba(testing_x)\n~~~\n\uc2dc\ud5d8\uacf5\ubd80\ub97c \ud588\uc73c\ub2c8 \uc218\ub2a5\uc744 \uce60 \ucc28\ub840. \uc801\uc6a9\uc2dc\ud0a8 \uc54c\uace0\ub9ac\uc998\uc73c\ub85c testing_x\ub97c \uc608\uce21 \ud55c\ub2e4.\nprediction\uc740 \uacb0\uacfc\uac12, proba\ub97c \ubd99\uc774\uba74 \uba87%\ub85c \uc608\uce21\ud588\ub294\uc9c0 \ub098\uc628\ub2e4.\n\n~~~\nif   cf == \"coefficients\" :\n        coefficients  = pd.DataFrame(algorithm.coef_.ravel())\n    elif cf == \"features\" :\n        coefficients  = pd.DataFrame(algorithm.feature_importances_)\n~~~\n\uc774\uac74 feature\ub4e4\uc774 \uc5bc\ub9c8\ub098 \ub192\uc740 \uc911\uc694\ub3c4\ub97c \uac00\uc9c0\uace0 \uc788\ub294\uc9c0 \ubcf4\uace0\uc2f6\uc740 \uac70\ub2e4.\n\n\uc911\uc694\ub3c4\ub780 \ubd84\ub958\ud560 \ub54c feature\uac00 \uac00\uc9c0\ub294 \uc601\ud5a5\ub825\uc744 \ub07c\uce58\ub294\uc9c0\ub97c \ub9d0\ud55c\ub2e4.\n\uc5ec\uae30\uc11c\ub294 \uace0\uac1d\uc774\ud0c8\uc5d0 \uc601\ud5a5\uc744 \ub07c\uce58\ub294 \uc815\ub3c4.\n\nlogistic\ubaa8\ub378\uc5d0\uc120 coefficients\ub85c \uc911\uc694\ub3c4 \ud45c\ud604\uc744 \ud558\uace0, feature_importances_\ub294 tree\ubaa8\ub378\ub4e4\uc774 \uac16\ub294 \uc911\uc694\ub3c4 \uc774\ub984\uc774\ub2e4. \ubaa8\ub378\ub4e4\uc5d0 \ub300\ud574\uc120 \ub098\uc911\uc5d0 \uc124\uba85.\n\n\ub098\uc628 \ucf54\ub4dc\uc911 .ravel()\uc740 \ub2e4\ucc28\uc6d0\uc744 \ud3c9\ud3c9\ud558\uac8c \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \uc5ed\ud560\uc744 \ud558\ub294\ub370 [[1,1],[2,2]]\uc694\ub7f0\uc2dd\uc73c\ub85c \ub418\uc5b4\uc788\ub294 \uc560\ub4e4\uc744 [1,1,2,2]\uc774\ub807\uac8c \ub9cc\ub4e4\uc5b4\uc900\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4.\n\n~~~\n    column_df     = pd.DataFrame(cols)\n    coef_sumry    = (pd.merge(coefficients,column_df,left_index= True,\n                              right_index= True, how = \"left\"))\n    coef_sumry.columns = [\"coefficients\",\"features\"]\n    coef_sumry    = coef_sumry.sort_values(by = \"coefficients\",ascending = False)\n~~~\n\uc774\uc804\uc5d0 \ub2e4 \uc124\uba85\ud588\ub358 \ub0b4\uc6a9\ub4e4\uc774\ubbc0\ub85c \ud328\uc2a4.\n\n~~~\n    print (algorithm)\n    print (\"\\n Classification report : \\n\",classification_report(testing_y,predictions))\n    print (\"Accuracy   Score : \",accuracy_score(testing_y,predictions))\n    #confusion matrix\n    conf_matrix = confusion_matrix(testing_y,predictions)\n    #roc_auc_score\n    model_roc_auc = roc_auc_score(testing_y,predictions) \n    print (\"Area under curve : \",model_roc_auc,\"\\n\")\n    fpr,tpr,thresholds = roc_curve(testing_y,probabilities[:,1])\n~~~\nprint\ud568\uc218\ub294 \ub2e4 \uc54c\ud14c\uace0 \\n\uac19\uc740 \uacbd\uc6b0\uc5d4 \uc904\ubc14\uafc8 \ucf54\ub4dc\uc774\ub2e4.\n\nclassification_report(testing_y<-\uc2e4\uc81c target\uac12, prediction<-test_x\ub97c \ud1b5\ud574 \uc608\uce21\ud55c \uac12)\uc774\ub780 precision , recall, f1-score, support \uac12\uc744 \ubcf4\uc5ec\uc900\ub2e4. \uc544\ub798\uc758 \uadf8\ub9bc\ucc98\ub7fc \ub098\uc624\ub294 \uce5c\uad6c\uac00 classification_report.\n![2](https:\/\/i2.wp.com\/kgracia44.github.io\/images\/project_5\/mod2_classReport.png?w=696)\n![11](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*Z54JgbS4DUwWSknhDCvNTQ.png)\n\n\uc704\uc758 \uadf8\ub9bc\uc740 confusion matrix\ub77c\ub294 \uce5c\uad6c\ub85c \uc124\uba85\uc744 \uc704\ud574 \uac00\uc838\uc654\ub2e4.\n\nprecision(\uc815\ud655\ub3c4)\ub294 TP\/(TP+FP)\ub97c \ub73b\ud558\uace0 \uae0d\uc815\uc774\ub77c\uace0 \uc608\uce21\ud55c \uac12 \uc911 \uc2e4\uc81c\ub85c \uae0d\uc815\uc778 \uac12.\n\nrecall\ub294 TP\/(TP+FN)\uc744 \ub73b\ud558\uace0 \uc2e4\uc81c \uae0d\uc815 \uac12\ub4e4 \uc911 \uae0d\uc815\uc774\ub77c\uace0 \uc608\uce21\ud55c \uac12\uc774\ub2e4. \n\nf1-score\ub294 \uc880 \ub354 \ubcf5\uc7a1\ud55c\ub370, F1=2*(precision * recall)\/(precision+recall)\uc744 \ub73b\ud55c\ub2e4.\n\nsupport\ub294 \uc2e4\uc81c \uac12\ub4e4\uc758 \uc22b\uc790\ub2e4. \uc704\uc5d0\uc120 \uc2e4\uc81c\ub85c 0\uc774 543\uac1c, 1\uc774 342\uac1c \uc788\ub2e4\ub294 \uc18c\ub9ac\ub2e4.\n\nmicro, macro, weighted avg\uac00 \ub098\uc624\uae34 \ud558\ub294\ub370 \ud06c\uac8c \uc911\uc694\ud55c\uac00..? \uc2f6\uc740\ub370 \uc54c\uace0 \uc2f6\ub2e4\uba74 \ubb3c\uc5b4\ubcfc \uac83.\n\n~~~\nprint (\"Accuracy   Score : \",accuracy_score(testing_y,predictions))\n~~~\naccuracy_score\ub294 \uac04\ub2e8\ud558\ub2e4. \uc2e4\uc81c\uac12\uacfc \uc608\uce21\uac12\uc744 \ub2e8\uc21c\ud788 \ube44\uad50\ud55c \uac12. \uc804\uccb4 \uac1c\uc218\uc911 \uc2e4\uc81c\ub85c \ub9de\ucd98 \uac1c\uc218.\n\uc704\uc758 confusion matrix\ub85c \ubcf8\ub2e4\uba74 (tp+tn)\/\uc804\uccb4\uac1c\uc218.\n\nconfusion_matrix\ub294 \ud328\uc2a4\n\n~~~\nmodel_roc_auc = roc_auc_score(testing_y,predictions) \n    print (\"Area under curve : \",model_roc_auc,\"\\n\")\n~~~\nroc_auc_socre\ub294 roc\ucee4\ube0c\uc758 \uac1c\ub150\uc744 \uc54c\uc544\uc57c \ud55c\ub2e4.\nFPR\uacfc TPR\uc744 \uac01\uac01 x,y\ucd95\uc73c\ub85c \ub193\uc740 \uadf8\ub798\ud504\ub97c ROC\ucee4\ube0c\ub77c\uace0 \ud558\ub294\ub370, \n\n\uc5ec\uae30\uc11c TPR\uc740 \ub9ce\uc740 \uc6a9\uc5b4\ub85c \ud45c\uc2dc\ub41c\ub2e4. \ubbfc\uac10\ub3c4, Sensitive, \uc7ac\ud604\ub960\uc73c\ub85c \ud45c\uae30\ub41c\ub2e4. \uadf8\ub798\uc11c \ub9e8\ub0a0 \ud5f7\uac08\ub838\ub294\ub370, \uc544\uae4c \ub9d0\ud588\ub358 classification_report\uc5d0\uc11c\uc758 recall(\uc7ac\ud604\ub960)\uc774\uace0 \uc2e4\uc81c\ub85c \uae0d\uc815\uac12 \uc911 \uae0d\uc815\uc73c\ub85c \uc608\uce21\ud55c \uac12\uc744 \ub9d0\ud55c\ub2e4.  \n\nFPR\uc740 1-\ud2b9\uc774\ub3c4(Specificity)\ub97c \ub73b\ud558\uace0 \uc5ec\uae30\uc11c \ud2b9\uc774\ub3c4(Specificity)\ub780 \uc2e4\uc81c \ubd80\uc815\uac12 \uc911 \ubd80\uc815\uc73c\ub85c \uc608\uce21\ud55c \uac12\uc744 \ub73b\ud558\uace0, confusion matrix\uc5d0\uc11c \ubcf4\uba74 TN\/(TN+FP), FPR\uc740 \uadf8\ub798\uc11c \uc2e4\uc81c \ubd80\uc815\uac12 \uc911 \uae0d\uc815\uc73c\ub85c \uc608\uce21\ud55c \uac12\uc744 \ub9d0\ud55c\ub2e4 FP\/(TN+FP).\n\nFPR\uc774\ub780 \uc798\ubabb\ub41c \uae0d\uc815 \uc608\uce21\ube44\uc728, TPR\uc740 \uc2e4\uc81c \uae0d\uc815 \uc608\uce21\ube44\uc728 \uc815\ub3c4\ub85c \uc0dd\uac01\ud558\uba74 \uc88b\uaca0\ub2e4. \n\n![ROC](https:\/\/t1.daumcdn.net\/cfile\/tistory\/262E8E3F544837AD27)\n\n![ROC2](http:\/\/www.cbgstat.com\/method_ROC_curve\/images\/ROC_curve_Snap8.gif)\n\uc774\uac8c ROC\ucee4\ube0c \uadf8\ub798\ud504\uc774\uace0, FPR\uc774 \ub0ae\uace0 TPR\uc774 \ub192\uc744 \ub54c  \uc989 \uadf8\ub798\ud504\uac00 \uc67c\ucabd\uc704\ub85c \ud5a5\ud560 \uc218\ub85d, \uc88b\uc740 \ubaa8\ub378\uc774\ub2e4. \n\n\ub2e4\uc2dc \uc124\uba85\ud558\uc790\uba74, reference Line\uc744 \ubcfc \uc218 \uc788\ub294\ub370 \uc6b0\ub9ac\uac00 \ub3d9\uc804\uc744 \ub208\uac10\uace0 \ub358\uc9c0\uba74 50:50\uc73c\ub85c \uc55e\ub4b7\uba74\uc774 \ub098\uc62c \uac83\uc774\ub2e4. TPR\uacfc FPR\uc774 \ubc18\ubc18.  \n\n\uadf8 \ub77c\uc778\uc774 reference\uc774\uace0, \uc6b0\ub9ac\ub294 TPR\uc774 FPR\ubcf4\ub2e4 \ub354 \uc88b\uac8c \ub098\uc654\uc73c\uba74 \ud558\ub294\uac70\ub2e4. \uc608\uce21\ub960\uc774 \ub192\ub2e4\ub294 \uac70\ub2c8\uae4c. \n\n\uadf8\ub798\uc11c \uc67c\ucabd\uc704\ub85c \ub192\uac8c \uc62c\ub77c\uac04 \uadf8\ub798\ud504\uac00 \uc88b\uc740 \uc608\uce21\ubaa8\ub378\uc774\uba70, reference line\ubcf4\ub2e4 \ub354 \uc544\ub798\ub85c \uac04\uac74 \uc758\ubbf8\uac00 \uc5c6\ub2e4\uace0 \ud558\ub294 \uac83.\n\n\ub2e4\uc2dc \ubcf8\ub860\uc73c\ub85c \ub4e4\uc5b4\uc640\uc11c, roc_auc_score\ub294 \uc774 roc\ucee4\ube0c\uc5d0\uc11c \ucee4\ube0c \uc544\ub798, \uc989 \uba74\uc801\uc744 \ud3c9\uac00\ud55c \uac83\uc774\uba70 \uc774 \uba74\uc801\uc744 AUC(The Area Under an ROC CURVE)\ub77c\uace0 \ud55c\ub2e4. \n\n\uba74\uc801\uc774 \ub192\uc744 \uc218\ub85d \ub354 \uc88b\uc740 \ubaa8\ub378\uc774\uace0, ROC\ucee4\ube0c\ub97c \uc0dd\uac01\ud574 \ubcf4\uba74 \uc67c\ucabd\uc704\ub85c \uc62c\ub77c\uac08 \uc218\ub85d \ub354 \ub113\uc740 \uba74\uc801\uc744 \ub098\ud0c0\ub0b8\ub2e4.\n\n\uc704\uc758 \uadf8\ub798\ud504\ub4e4\uc740 \uae54\ub054\ud558\uac8c \uadf8\ub824\uc838\uc788\uc9c0\ub9cc \uc5ec\ub7ec \ubaa8\ub378\uc744 \uc4f0\ub2e4\ubcf4\uba74 \uc544\ub798\uc758 \uadf8\ub798\ud504\ub9c8\ub0e5 \uad49\uc7a5\ud788 \ucee4\ube0c\uac00 \uc694\uc0c1\ud558\uac8c \uadf8\ub824\uc838\uc11c \ube44\uad50\ud560\ub54c \uba74\uc801\uc744 \uc4f4\ub2e4.\n\n![ROC4](https:\/\/t1.daumcdn.net\/cfile\/tistory\/99ABC43359E629C83C)\n\n~~~\nfpr,tpr,thresholds = roc_curve(testing_y,probabilities[:,1])\n~~~\nsckitlearn\uc758 \ud568\uc218\uc5d0 roc_curve\ub77c\ub294 \uce5c\uad6c\uac00 \uc788\ub2e4. \uc598\ub294 \uc2e4\uc81c\uac12\uacfc \uc608\uce21\uac12\uc758 \ud655\ub960\uac12\uc744 \ube44\uad50\ud558\uc5ec fpr\uacfc tpr, thresholds\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4. \uadf8 \uac12\ub4e4\uc744 \uac01\uac01 \uac1d\uccb4\uc5d0 \ub123\uc5b4\uc8fc\uaca0\ub2e4\ub294 \uac83.\n\nfpr\uacfc tpr\uc740 \uc704\uc5d0\uc11c \uc124\uba85\ud588\uace0 thresholds\ub294 \uc784\uacc4\uac12\uc778\ub370, \uc6b0\ub9ac\uac00 \uc2e4\uc81c\uac12\uacfc \uc608\uce21\uac12\uc758 \ud655\ub960\uac12\uc73c\ub85c ROC\ucee4\ube0c\ub97c \uadf8\ub838\uc796\uc74c? \uadf8\ub798\uc11c \uadf8 \ud655\ub960\uac12\uc73c\ub85c \uc608\uce21\uc744 \uae0d\uc815\uc73c\ub85c \ubd84\ub958\ud560\uc9c0 \ubd80\uc815\uc73c\ub85c \ubd84\ub958\ud560\uc9c0\uc758 \uae30\uc900\uac12\uc784. \n\n\uc774 \uc784\uacc4\uac12\uc774 \uc791\uc544\uc9c0\uba74 \uae0d\uc815\uc73c\ub85c \ubd84\ub958\ud558\ub294\uac8c \ub9ce\uc544\uc9d0. \uadf8\ub798\uc11c \uc804\uccb4 \uae0d\uc815\uc774\ub77c\uace0 \ubd84\ub958\ud558\ub294\uac74 \ub192\uc544\uc9c8\ud150\ub370, TPR \uc2e4\uc81c \uae0d\uc815 \uc608\uce21\ube44\uc728\uc774 \uc62c\ub77c\uac08\ud14c\uace0, FPR \uc798\ubabb\ub41c \uae0d\uc815 \uc608\uce21\ube44\uc728 \ub610\ud55c \uc62c\ub77c\uac08\uac70\uc784.\n\n\uc774\uc81c\ubd80\ud130 ROC\ucee4\ube0c \ubc11 \ubd80\ubd84\uc740 \ub2e4 \uc0b0\uc810\ub3c4\ub97c \uadf8\ub9ac\uae30 \uc704\ud568\uc774\uace0, \uac12\uc744 \ub123\uc740 \uce5c\uad6c\ub4e4\uc744 \ubcf4\uba74 trace1\uc740 confusion_matrix, trace2\ub294 ROC\ucee4\ube0c trace3\uc740 ROC\ucee4\ube0c\uc758 [0,0]\uacfc [1,1]\uac12\uc744 \ucc0d\uc5b4\uc8fc\uae30 \uc704\ud55c \ub140\uc11d(ROC\ucee4\ube0c\ubcf4\uba74 0,0\uacfc 1,1\uc5d0 \uc810\uc774 \ucc0d\ud600\uc788\uc74c.), trace4\ub294 feature \uc911\uc694\ub3c4\uc774\ub2e4. \n\n\n~~~\nfig.append_trace(trace1,1,1)\nfig.append_trace(trace2,1,2)\nfig.append_trace(trace3,1,2)\nfig.append_trace(trace4,2,1)\n~~~\n\uc744 \ubcf4\uba74 fig\uc5d0 trace\ub97c \uc785\ub825\ud574 \uc8fc\uace0 \ub4a4\uc5d0 \uc788\ub294 \uc22b\uc790\ub4e4\uc740 (trace1<-trace(\ub098\ud0c0\ub0bc \uadf8\ub798\ud504),1<-\ud589 \uc704\uce58\uac12,1<-\uc5f4 \uc704\uce58\uac12) \uc774\ub7f0 \ud615\uc2dd\uc774\ub2e4.\n\n~~~\nfig['layout'].update(showlegend=False, title=\"Model performance\" ,\n                         autosize = False,height = 900,width = 800,\n                         plot_bgcolor = 'rgba(240,240,240, 0.95)',\n                         paper_bgcolor = 'rgba(240,240,240, 0.95)',\n                         margin = dict(b = 195))\n    fig[\"layout\"][\"xaxis2\"].update(dict(title = \"false positive rate\"))\n    fig[\"layout\"][\"yaxis2\"].update(dict(title = \"true positive rate\"))\n    fig[\"layout\"][\"xaxis3\"].update(dict(showgrid = True,tickfont = dict(size = 10),\n                                        tickangle = 90))\n~~~\nlayout \uc124\uc815. update\ub294 \uc0c8\ub85c\uc6b4 \uc815\ubcf4\ub97c \uc785\ub825\ud574 \uc8fc\ub294 \uac83. showlegend\ub294 \ubc94\ub840 \ud45c\uc2dc\ub97c \ud560 \uac83\uc778\uc9c0.  \ub098\uba38\uc9c4 \uc774\uc804 \ub0b4\uc6a9\uacfc \ub2e4 \uac19\ub2e4.\n\n~~~\npy.iplot(fig)\n~~~\n\uadf8\ub9bc \ub744\uc6b0\ub294 \uce5c\uad6c.\n\n~~~\nif threshold_plot == True : \n    visualizer = DiscriminationThreshold(algorithm)\n    visualizer.fit(training_x,training_y)\n    visualizer.poof()\n        \n~~~\n\n~~~\ndef telecom_churn_prediction(algorithm,training_x,testing_x,\n                             training_y,testing_y,cols,cf,threshold_plot):\n~~~\nthreshold_plot\uc774\ub780 \ubaa8\ub378\ub9c8\ub2e4 threshhold_plot\uc774 \uc874\uc7ac\ud558\uae30\ub3c4 \uc548\ud558\uae30\ub3c4 \ud558\ub294\ub370, threshold_plot == True\ub294 \uc874\uc7ac\ud560 \ub54c\ub97c \uc758\ubbf8\ud55c\ub2e4.\n\n\uc874\uc7ac\ud55c\ub2e4\uba74 Discrimination Threshold\ub77c\ub294 \ud568\uc218\ub97c \uc4f8 \uc218 \uc788\ub294\ub370 \uc774 \ud568\uc218\uc758 \uc8fc\uc758\uc810\uc740 binary\uc77c\ub54c\ub9cc \uc4f0\ub294 \uce5c\uad6c\ub2e4. \n\nprecision,recall,f1 score, threshold\ub97c \ubcf4\uc5ec\uc900\ub2e4.\n\npoof()\ub294 \uadf8\ub9bc\uc744 \uadf8\ub824\uc8fc\ub294 \uce5c\uad6c. \uc774\ubbf8\uc9c0 \ub744\uc6b0\ub294 \uc560.","707f43b2":"\uc704\uc5d0\uc11c \uc124\uba85\ud588\uc73c\ub2c8 \uc0dd\ub7b5.","f837b22b":"X\ub77c\ub294 \ubcc0\uc218\ub97c pca \uc801\uc6a9\uc2dc\ud0a4\uace0 \ubcc0\ud658\uc2dc\ud0a4\ub294 \uac70\uc784.","2773b654":"\ucef4\ud4e8\ud130\uac00 \uc54c\uc544\uba39\uac8c \ud558\uae30 \uc704\ud574\uc11c \ubc94\uc8fc\ud615 \uce5c\uad6c\ub4e4\uc744 \uc218\uce58\ud654\ud574\uc11c \ud45c\ud604\ud574\uc57c\ud568. LabelEncoder\ub780 \uce5c\uad6c\ub97c \uc368\uc11c bin_cols \uce5c\uad6c\ub4e4\uc744 \uc218\uce58\ud654\ud574\uc900\uac70\uc784.","2a66fc1d":"\ub4dc\ub514\uc5b4 \ucf54\ub4dc\uc2e4\ud589!! \ub450\ub465 \uc544\uae4c \uc5f4\uc2ec\ud788 \uadf8\ub838\ub358 \uadf8\ub798\ud504\ub97c \n\uc6b0\ub9ac\uac00 \uc9c0\uc815\ud574\ub454 \ud568\uc218\ub97c \uc368\uc11c for\ubb38\uc744 \uc368\uc11c \uc5ec\ub7ec\uac1c\ub97c \ud55c\uaebc\ubc88\uc5d0, \uc0b0\uc810\ub3c4\ub294 \ud55c\ubc29\uc5d0 \ub123\uc5b4\uc90c.\n\n\ucf54\ub4dc\ub294 \ub744\uc5b4\uc4f0\uae30\ub791 \uad04\ud638\ub791 \ud56d\uc0c1 \uc8fc\uc758\ud560 \uac83... \uc5d0\ub7ec\ub5b4\uc74c \u3142\u3137\n\n##3.3. Customer attrition in tenure groups","7dff6394":"pandas\uc5d0 read_csv\ub77c\ub294 \ud568\uc218\ub97c \uc4f0\uba74 csv\ud30c\uc77c\uc744 \ubd88\ub7ec\uc62c \uc218 \uc788\uc74c.\n.\uc744 \ucc0d\uc73c\uba74 \ud558\uc704\uc18d\uc131\uc73c\ub85c \ub4e4\uc5b4\uac04\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \uc88b\uc74c. \uc704\uc758 pd.read_csv\ub294 pd(pandas\ub77c\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc548\uc758 read_csv\ub77c\ub294 \ud568\uc218\ub97c \uc500\n\n##1.1. Data Overview","377a9b6e":"churn\uc774\ub77c\ub294 \uac1d\uccb4\uc5d0 tel\uc5d0\/ tel\uc5d0\uc788\ub294 Churn \uac12\uc774 'Yes'\uc778 \uce5c\uad6c\ub4e4\ub9cc \ubf51\uc544\ub0b4\uc11c \uc800\uc7a5\nnot_churn\uc774\ub77c\ub294 \uac1d\uccb4\uc5d0 ~~","dd6b7d5c":"\ubaa8\ub378\ud37c\ud3ec\uba3c\uc2a4\ub97c \ube44\uad50\ud558\ub294 \ucf54\ub4dc\ub4e4\uc740 \uc774\uc804\uae4c\uc9c0\uc758 \uce5c\uad6c\ub4e4\uacfc \ud06c\uac8c \ub2e4\ub974\uc9c0 \uc54a\ub2e4. \uadf8\ub798\uc11c \uc815\ub9ac\ub97c \uadf8\ub9cc \ud558\ub824\uace0 \ud55c\ub2e4. \n\ncohen-kappa score\uc815\ub3c4\ub9cc \uc544\ub798 \uadf8\ub9bc \uc21c\uc11c\ub530\ub77c\uac00\uba74 \uc544 \uc800\uac8c \uc800\uac70\uad6c\ub098 \ud558\uace0 \uc54c\uba74 \ub41c\ub2e4. \uadf8\ub7fc \uc774\uc81c \uc815\ub9d0 \ub05d.\n\n![cohen1](https:\/\/mblogthumb-phinf.pstatic.net\/20160411_75\/y4769_1460381253680MoJRG_PNG\/%BD%BD%B6%F3%C0%CC%B5%E55.PNG?type=w800)\n\n![cohen2](https:\/\/mblogthumb-phinf.pstatic.net\/20160411_79\/y4769_1460381253931jgpaU_PNG\/%BD%BD%B6%F3%C0%CC%B5%E56.PNG?type=w800)\n\n![cohen3](https:\/\/mblogthumb-phinf.pstatic.net\/20160411_187\/y4769_1460381254179HpXkX_PNG\/%BD%BD%B6%F3%C0%CC%B5%E57.PNG?type=w800)\n\n![cohen4](https:\/\/mblogthumb-phinf.pstatic.net\/20160411_49\/y4769_1460381254397pTUCg_PNG\/%BD%BD%B6%F3%C0%CC%B5%E58.PNG?type=w800)\n\n![cohen5](https:\/\/mblogthumb-phinf.pstatic.net\/20160411_268\/y4769_1460381254594IAO71_PNG\/%BD%BD%B6%F3%C0%CC%B5%E59.PNG?type=w800)","9d96f552":"LogisticRegression\uc740 \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\ubd84\uc11d\uc774\ub2e4. Churn\uacfc No Churn\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud55c \uccab \ubaa8\ub378\uc778\ub370, \uc774\ub97c \uc54c\ub824\uba74 \uc120\ud615\ud68c\uadc0\ubd84\uc11d\ubd80\ud130 \uc54c\uc544\uc57c \ud55c\ub2e4.\n\n\uc120\ud615\ud68c\uadc0\ubd84\uc11d\uc740 \ubaa8\ub450\uac00 \ubd24\ub4ef\uc774 y=ax+b\uc758 \ubaa8\uc591\uc744 \uac00\uc9c4\ub2e4. \ud754\ud788\ub4e4 \uc544\ub294 \uc77c\ucc28\ud568\uc218\uc758 \ubaa8\ud615\uc774\uace0, \uc9c1\uc120\uc744 \uc758\ubbf8\ud55c\ub2e4. \n\n\ub85c\uc9c0\uc2a4\ud2f1\uc740 \uc774\uac78 y\uac12\uc744 \ud655\ub960\ub85c \ubcc0\ud658\ud558\uc5ec \uc0dd\uac01\ud55c\ub2e4.  A\uc640 B\ub85c \ubd84\ub958\ub97c \ud55c\ub2e4\uba74 0.5\uc774\uc0c1\uc740 A, 0.5\uc774\ud558\uba74 B\ub85c \ubd84\ub958\ud558\uac8c \ub9cc\ub4e0\ub2e4. \n\n![logistic](http:\/\/www.jidum.com\/upload\/ckeditor\/2018\/01\/20180123111132718.png)\n\uc5ec\ub7ec\uc5ec\ub7ec \uacfc\uc815\uc744 \ud1b5\ud574 \uc704\uc758 \uadf8\ub798\ud504\uc5d0 \uc368\uc9c4 E(y)\ucc98\ub7fc y\ub97c \ud655\ub960\uac12\uc73c\ub85c \ubc14\uafd4\uc8fc\ub294\ub370, \uc790\uc138\ud788 \uc54c\uc544\ub3c4 \uc4f8\ubaa8 \uc5c6\ub2e4\uace0 \uc0dd\uac01\ud558\uc5ec \ub300\uac15\uc758 \ud750\ub984\ub9cc \ud30c\uc545\ud558\uace0 \uc0dd\ub7b5\ud55c\ub2e4.\n\n\uc774\uc81c \ucf54\ub4dc\ub97c \ub4e4\uc5ec\ub2e4\ubcf4\uc790\uba74, \n~~~\nlogit  = LogisticRegression(C=1.0,\n~~~\nC\ub294 \uc815\uaddc\ud654\uc758 \uac15\ub3c4\uc815\ub3c4\ub97c \uc598\uae30\ud55c\ub2e4. \uc624\ubc84\ud53c\ud305(Overfitting)\uc744 \ub9c9\uae30\uc704\ud574 \uc815\uaddc\ud654\ub97c \ud560 \ub54c \uc4f0\ub294 \uac12\uc73c\ub85c DEFAULT\uac12\uc740 1\uc774\uace0, \uac12\uc774 \uc801\uc744\uc218\ub85d \uac15\ud55c \uc815\uaddc\ud654\ub97c \ud55c\ub2e4\uace0 \ud568. \n\n\ucc98\uc74c\uc5d0 \ub9d0\ud588\ub4ef\uc774, \ud070 \uac12\uc774 \uc788\uc73c\uba74 \ucef4\ud4e8\ud130\ub294 \uac70\uae30\uc5d0 \uad00\uc2ec\uc774 \uc3e0\ub9ac\uac8c \ub418\uc5b4\uc788\ub2e4. \uadf8\ub798\uc11c \uacfc\ub3c4\ud558\uac8c \uadf8\ucabd\uc73c\ub85c \ud3b8\uc911\ub41c \uacb0\uacfc\uac12\uc774 \ub098\uc624\uace0, \uc774\uac74 \uc88b\uc9c0 \ubabb\ud55c \ubaa8\ub378\uc774\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4.\n\n\uc5ec\uae30\uc11c \uc624\ubc84\ud53c\ud305\uc774\ub780 \uacfc\uc801\ud569\uc774\ub77c\uace0\ub3c4 \ud558\ub294\ub370, \uba38\uc2e0\ub7ec\ub2dd \uc608\uce21\uc5d0 \uad00\ud574\uc11c \uad49\uc7a5\ud788 \uc911\uc694\ud55c \uc694\uc18c\uc774\ub2e4.\n\n![overfitting](https:\/\/i.stack.imgur.com\/t0zit.png)\n\uc704\uc758 \uadf8\ub9bc\uc744 \ubcf4\uba74 \uc5b8\ub354\ud53c\ud305, \uc801\uc808\ud55c \ubaa8\uc591, \uc624\ubc84\ud53c\ud305\uc5d0 \ub300\ud574\uc11c \ub098\uc640\uc788\ub2e4. \n\n\uc6b0\ub9ac\uac00 train\uacfc test\uc14b\uc73c\ub85c \ub098\ub204\ub294 \uc774\uc720\ub3c4 \uc5ec\uae30\uc11c \ucc3e\uc744 \uc218 \uc788\ub2e4.\n\n\uc608\uce21\ubaa8\ub378\uc774 \uacfc\ub3c4\ud558\uac8c \ub2f5\uc744 \ucc3e\uc544\ubc84\ub9ac\uba74, \uc0c8\ub85c\uc6b4 \ubb38\uc81c\uac00 \ub4e4\uc5b4\uc640 \ubc84\ub838\uc744 \ub550 \ud574\uacb0\ud558\uc9c0 \ubabb\ud55c\ub2e4. \n\ub9c8\uce58 \uc6b0\ub9ac\uac00 \ub2f5\uc744 \uc678\uc6b0\uace0 \uacf5\ubd80\ub97c \ud558\uba74 \uc5b4\ub290\uc815\ub3c8 \uc131\uc801\uc774 \ub098\uc624\uc9c0\ub9cc \ucc98\uc74c\ubcf4\ub294 \uc720\ud615\uc5d4 \ub300\ucc98\ub97c \ubabb\ud558\ub294 \uac70 \ucc98\ub7fc.\n\n\uc5b8\ub354\ud53c\ud305\uc740 \ub370\uc774\ud130\uac00 \uc801\uac70\ub098 feature\uac00 \uc801\uc744 \ub54c \ub098\uc62c \uc218 \uc788\ub294 \ud604\uc0c1\uc774\ub2e4. \ub2f5\uc744 \ucc3e\uc544\uac00\uc9c0 \ubabb\ud55c\ub2e4.\n\ubc18\uba74 \uc624\ubc84\ud53c\ud305\uc740 \uacfc\ub3c4\ud558\uac8c \ub2f5\uc744 \ucc3e\uc544\uac04\ub2e4.\n\n\uc5b8\ub354\ud53c\ud305\uc740 feature\uc218\ub97c \ub298\ub9ac\uace0 \ub370\uc774\ud130\ub97c \ub298\ub9ac\uace0 \ud558\ub294 \ud574\uacb0\ubc29\ubc95 \uc624\ubc84\ud53c\ud305\uc740 \uc815\uaddc\ud654\ub098 feature\uc218\ub97c \uc904\uc5ec\uc8fc\uac70\ub098 \ub4f1\ub4f1\uc758 \ubc29\ubc95\uc744 \ud0dd\ud55c\ub2e4.\n\n~~~\n, class_weight=None\n~~~\n\uc774\uac74 \uac01 \ud074\ub798\uc2a4(\uc5ec\uae30\uc120 Churn\uacfc No Chrun\uc744 \ud074\ub798\uc2a4\ub77c \uc9c0\uce6d\ud55c\ub2e4)\ub9c8\ub2e4 weight(\uac00\uc911\uce58)\ub97c \uc124\uc815\ud574\uc918\uc11c \ud074\ub798\uc2a4\ub97c \ub354 \uac15\uc870\ud558\ub294 \uc5ed\ud560\uc744 \ud558\ub294\ub370 defualt\uac12\uc740 None\uc774\uace0 \uc774\ub54c \ubaa8\ub4e0 \ud074\ub798\uc2a4\ub294 \ud558\ub098\uc758 weight\uac12\uc744 \uac00\uc9c4\ub2e4. \n\n\ub4a4\uc5d0\ub3c4 \ub2e4 \uc218\uc2dd\uc801\uc778 \ub0b4\uc6a9\uc774\uace0 \ubcf5\uc7a1\ud558\ub2c8\uae4c \ud328\uc2a4\ud568. \uc124\uc815\ud574\uc8fc\uace0 \uc218\ud559\uc801\uc73c\ub85c \ub611\ub611\ud574\uc9c8\uc21c \uc788\ub294\ub370, \ubcf4\ud1b5 \uacc4\uc0b0\uc744 \ucef4\ud4e8\ud130\uc5d0\uac8c \ub2e4 \ub9e1\uae38 \uc218 \uc788\uc74c. \uc6b0\ub9ac\uac00 \uc190\uc73c\ub85c \ucc3e\uc744 \ud544\uc694\uc5c6\uc774. \uac04\ub7b5\ud55c \uc124\uba85\ub9cc \ub0a8\uae30\uace0 \ub118\uc5b4\uac00\uaca0\uc74c.\n\n~~~\ndual=False, fit_intercept=True,intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n   penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False\n~~~\n\ub300\ubd80\ubd84 \uc218\ud559\uc801\uc778 \uce5c\uad6c\ub4e4\uc774\uace0 \ud558\uba74\uc11c \ub290\ub07c\ub294\uac74\ub370 \uc774 \uc0ac\ub78c\uc740 \uc815\ub9d0 \ubcf4\uc5ec\uc8fc\ub294\uac78 \uc88b\uc544\ud568. \n\ndefault\uac12\uc744 \uadf8\ub0e5 \uc368\uc900 \uc815\ub3c4 \ubc16\uc5d0 \uc548\ub41c\ub2e4. \ubaa8\ub450 \uc548\uc368\ub3c4 \ub3cc\uc544\uac00\ub294 \uce5c\uad6c\ub4e4. \n\n\uadf8\ub098\ub9c8 default\uac00 \uc544\ub2cc\uce5c\uad6c\ub4e4\uc744 \ubcf4\uc790\uba74 n_jobs\uc778\ub370 \uc774\uac74 \ub0b4 \ucef4\ud4e8\ud130\uc758 cpu core\ub97c \uc5bc\ub9c8\ub098 \uc4f8\uac74\uc9c0\uace0, -1\uc774\uba74 \ubaa8\ub4e0 \ud504\ub85c\uc138\uc11c\ub97c \ub2e4 \uc4f4\ub2e4\ub294 \ub73b.  \n\n~~~\ntelecom_churn_prediction(logit,train_X,test_X,train_Y,test_Y,\n                         cols,\"coefficients\",threshold_plot = True)\n~~~\n\uc544\uae4c \uc124\uc815\ud574\uc900 \ud568\uc218\ub97c \uc4f4 \uac83. \n\n##5.2. Synthetic Minority Oversampling TEchnique (SMOTE)","f74409da":"replace_cols\ub77c\ub294 \uc0c8\ub85c\uc6b4 \uac1d\uccb4\ub97c \uc124\uc815\ud574\uc92c\uc74c. \uadfc\ub370 \uc598\ub124\ub97c \ubcf4\uba74 tel\uc548\uc5d0 \uc788\ub294 \uc5f4\ub4e4\uc774\uace0, \uc774 \uc5f4\uc758 \uac12\ub4e4\uc5d4 Yes,No, No internet service\uac00 \uc788\uc74c.\n\n\uc598\ub124\ub97c for\ubb38\uc744 \uc368\uc11c \ud55c\uaebc\ubc88\uc5d0 No internet service\ub97c No\ub85c \uac04\ub2e8\ud558\uac8c \ubc14\uafd4\uc8fc\uace0 \uc2f6\uc740\uac70\uc784.\n\nfor\ubb38 \uc124\uba85 \ud55c\ubc88\ub9cc. for i in replace_cols\/ replace_cols\uc548\uc5d0 \uc788\ub294 \uce5c\uad6c(i)\ub4e4\uc744 \ud55c\ubc88\uc529 \ubd88\ub7ec\uc624\ub294 \uac70\uc784.\n\n\uccab\ubc88\uc9f8\ub85c tel['OnlineSecurity']=tel['OnlineSecurity'].replace({'No internet service':'No'})\uac00 \ub418\ub294\uac74\ub370 \ub098\uba38\uc9c4 replace\uc124\uba85\uc774\ub791 \uac19\uc74c\n\n{\ub2f9\ud558\ub294\uc560:\ubc14\ub014\uac12} \ub300\uad04\ud638\uce58\uace0 \uc774\ub7f0\uc2dd\uc73c\ub85c \ud574\ub3c4 \ub611\uac19\uc74c. No internet service\ub97c No\ub85c. \uc8fc\uc758\ud560 \uc810\uc774 \uc22b\uc790\ub294 \uadf8\ub0e5 \uc801\uc5b4\ub3c4 \ub418\ub294\ub370 \ubb38\uc790\ub294 \ub530\uc634\ud45c(\uc791\uc740,\ud070\ub2e4\ub428)\uc744 \uc801\uc5b4\uc57c\ud568.\n","25742b14":"\ub370\uc774\ud130\uc758 \ubaa8\uc591\uc744 \ud655\uc778\ud558\ub294 \uac74\ub370 0\uc740 \ud589\uc744 \uc758\ubbf8\ud55c\ub2e4. - \ud589\uac2f\uc218 \ud655\uc778","4ff29b70":"\uc598\ub294 \ud30c\uc774\ucc28\ud2b8\ub97c \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \uce5c\uad6c\uc784 trace\ub780 \uac1d\uccb4\uc5d0 go\ub77c\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc548\uc758 Pie\ub97c \ubd88\ub7ec\uc634\n\nlabels\uc5d0 \uc544\uae4c \uc9c0\uc815\ud574\uc900 lab\uc744 \uc785\ub825, values\uc5d0 val\uc744 \ub123\uc5b4\uc90c. \n\nmarker\ub85c dict\ub294 \uc9d1\uc5b4 \ub123\ub294 \uce5c\uad6c\uc778\ub370 \uc5ec\uae30\uc5d0 colors\uc640 line\uc744 \uc774\uc6a9\ud574\uc11c \uc0c9\uacfc \uc120 \uc18d\uc131\uc744 \uc9c0\uc815\ud574\uc900\uac70\uc784.\n\n\uc0c9\uc740 \ub85c\uc584\ube14\ub8e8, \ub77c\uc784\uc0c9. \ub77c\uc778\uc740 \ud770\uc0c9\uc5d0 \ub450\uaed8\ub294 1.3 \uc774\ub7f0\ub290\ub08c\n\n\uc2e4\ud5d8\ud574\ubd24\ub294\ub370 rotation\uc740 \ub2e4\ub978\uc18d\uc131(\uc5ec\uae30\uc120 Yes)\uac00 \uba87\ub3c4 \uc815\ub3c4\uc5d0 \uc704\uce58\ud574 \uc788\uc744\uc9c0\ub97c \ubcf4\uc5ec\uc90c. \uc6d0 \uac01\ub3c4\ub77c\uace0 \uc0dd\uac01.\n\nhole\uc740 \uac00\uc6b4\ub370 \uc788\ub294(\ube48\uacf5\uac04)\uc6d0\uc758 \ud06c\uae30\ub97c \ubcf4\uc5ec\uc90c.\n\nhoverinfo\ub294 \uc5b4\ub518\uac00\uc5d0 \uc704\uce58\ud574\uc788\uc744\ud150\ub370 \uc544\uc9c1 \ubabb\ucc3e\uc74c..","645386f7":"LGBMClassifier\ub85c lightGBM\uc744 \ub9d0\ud55c\ub2e4.\n\nboosting_type\uc740 4\uac00\uc9c0\uac00 \uc874\uc7ac, gbdt \uc804\ud1b5\uc801\uc778 \uadf8\ub798\ub514\uc5b8\ud2b8 \ubd80\uc2a4\ud305 \ub514\uc2dc\uc804\ud2b8\ub9ac\ub97c \uc758\ubbf8.\nrf\ub294 \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8,\ndart\ub294 dropouts meet multiple additive regression trees\ub85c \ub4dc\ub78d\uc544\uc6c3 \ubc29\uc2dd\uc744 \uc11e\uc740 \uce5c\uad6c\uc778\uac00\ubcf4\ub2e4.\ngoss\ub294 Gradient-based One-Side Sampling\uc774\ub77c\uace0 \ud55c\ub2e4.\n\n![dropout](https:\/\/t1.daumcdn.net\/cfile\/tistory\/2237423D57A0299F2A)\n![goss](https:\/\/www.msra.cn\/wp-content\/uploads\/2017\/12\/nips17-20171219-14.jpg)\n\n\ud558\ub098\ub294 \ub4dc\ub78d\uc544\uc6c3\uc5d0 \uad00\ub828\ub41c \ub0b4\uc6a9\uc774\uace0, \ud558\ub098\ub294 goss\uc5d0 \uad00\ub828\ub41c \ub0b4\uc6a9\uc774\ub2e4.\n\n\ub4dc\ub78d\uc544\uc6c3\uc774\ub780, \uc804\uccb4 weight\ub97c \uacc4\uc0b0\uc5d0 \ucc38\uc5ec\uc2dc\ud0a4\ub294\uac8c \uc544\ub2c8\ub77c layer\uc5d0 \ud3ec\ud568\ub41c weight\uc911\uc5d0\uc11c \uc77c\ubd80\ub9cc \ucc38\uc5ec\ub97c \uc2dc\ud0a8\ub2e4.\n\ub274\ub7f0\uc744 \uc81c\uc678\ud558\ub294\uac8c \uc544\ub2cc 0\uc73c\ub85c \ub9cc\ub4e0\ub2e4.\n\ngoss\ub294 \uc77c\ubd80\ub9cc \ub79c\ub364\ud558\uac8c \uc0d8\ud50c\ub9c1 \ud558\uc5ec \uc9c4\ud589\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4.\n\nclass_weight\ub294 \uac00\uc911\uce58 \uac12\uc778\ub370, None\uc740 \ubaa8\ub4e0 \ud074\ub798\uc2a4\uc5d0 \ud558\ub098\uc758 \uac00\uc911\uce58\ub97c \uac16\uac8c\ud558\ub294 \uac83\uc774\ub2e4. balanced\ub294 \uc790\ub3d9\uc801\uc73c\ub85c \ud074\ub798\uc2a4\uc758 \ube48\ub3c4\uc218\uc5d0 \ub530\ub77c weight\ub97c \uacb0\uc815\ud574 \uc900\ub2e4.\n\ncolsample_bytree\uc740 \uac01\uac01\uc758 \ud2b8\ub9ac\ub97c \ub9cc\ub4e4\ub54c feature\uc758 \ube44\uc728\uc744 \ub73b\ud55c\ub2e4. default\ub85c 1\uc774\ub2e4.\n\n![learning rate](http:\/\/postfiles7.naver.net\/20160507_70\/cattree_studio_1462571290485RH6Lx_GIF\/17fig06.gif?type=w773)\nlearning rate\ub294 Gradient Decent \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c Cost\uac00 \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uac00\ub294 \ub3c4\uc911 \uc218\ud589\uc744 \ubc18\ubcf5\ud560 \uc2dc, \uc774\ub3d9\ud558\ub294 \uc815\ub3c4\ub97c \ub9d0\ud55c\ub2e4.\n\uc704\uc758 \uadf8\ub9bc\uc5d0\uc11c Iteration\uc774 \uc9c4\ud589\ub420 \ub54c \uc5b4\ub290\uc815\ub3c4\ub85c \uc6c0\uc9c1\uc774\ub0d0\ub97c \uacb0\uc815\ud574 \uc8fc\ub294 \uac83. \n\nmax_depth\ub294 \uc774\uc804\uc5d0 \uc124\uba85\ud588\ub2e4.\n\nmin_child_samples\ub294 \ub098\ubb34\uac00 \ub0b4\ub824\uac08\ub54c leaf(child)\uac00 \uc0dd\uc131\ub418\ub294 \ucd5c\uc18c\ud55c\uc758 \ub370\uc774\ud130\ub97c \uc758\ubbf8\ud55c\ub2e4. \n\nmin_child_weight\ub294 leaf(child)\uc5d0 \ud544\uc694\ud55c \ucd5c\uc18c\ud55c\uc758 \uac00\uc911\uce58\uc758 \ud569. \uc774 \uac00\uc911\uce58\uc758 \ud569 \uae30\uc900\ubcf4\ub2e4 \uc801\ub2e4\uba74, child\ub97c \uc0dd\uc131\ud558\uc9c0 \uc54a\ub294\ub2e4.\n\nmin_split_gain\ub294 \uc544\ub798\ub85c \ub0b4\ub824\uac08 \uc218\ub85d \uc880 \ub354 \uc88b\uc740 \ubaa8\ub378\uc774 \ub418\uc5b4\uc57c \ud558\ub294\ub370 loss\ub97c \uc904\uc774\ub294 \ubc29\ud5a5\uc73c\ub85c \uac00\uc57c\ud568. \uadf8 \ucd5c\uc18c\uac12\uc744 \uc598\uae30\ud55c\ub2e4.\n\nn_estimators, n_jobs \ubaa8\ub450 \uc124\uba85\ud568.\n\nnum_leaves\ub294 \ud2b8\ub9ac leaves\uc758 \ucd5c\ub300\uac12\uc744 \ub9d0\ud55c\ub2e4.\n\nobjective\ub294 \uc6b0\ub9ac\uac00 \ubd84\ub958\ud560 class \uac1c\uc218. \n\nrandom_state\ub294 \uc124\uba85\ud588\ub2e4.\n\nreg_alpha, reg_lambda\ub294 \uac01\uac01 L1,L2 \uc815\uaddc\ud654\uc5d0 \uc4f0\uc774\ub294 \ud328\ub110\ud2f0 \uac12. \uc5ec\uae30\uc11c L1\uc740 \uac00\uc911\uce58\uc758 \uc808\ub300\uac12\uc5d0, L2\ub294 \uac00\uc911\uce58\uc758 \uc81c\uacf1\uac12\uc5d0 \ud328\ub110\ud2f0\ub97c \uc900\ub2e4.   \n\nsilent \ubd80\uc2a4\ud305\uc774 \uc9c4\ud589\ub418\ub294 \ub3d9\uc548 \uba54\uc2dc\uc9c0\ub97c \ub744\uc6b8\uc9c0 \ub9d0\uc9c0.\n\nsubsample\uc740 training \uc14b\uc758 \ub370\uc774\ud130 \uc0d8\ud50c \ube44\uc728\n\nsubsample_for_bin\ub294 bins\ub97c \uad6c\uc131\ud558\uae30 \uc704\ud55c \uc0d8\ud50c \uc22b\uc790\uc778\ub370 bins\uac00 \ubb54\uc9c0 \uc815\ud655\ud788 \ubaa8\ub974\uaca0\uc74c. \ucd94\uce21\ud558\uae30\uc5d4 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc704\ud55c \ub370\uc774\ud130 \uc0d8\ud50c\ub9c1\uc758 \uc9d1\ud569? \uac19\uc740\uac70 \uac19\uc740\ub370.. \uc815\ud655\ud788 \ubaa8\ub974\uaca0\ub2e4. \n\nsubsample_freq\ub294 subsample\uc758 \ube48\ub3c4\ub97c \ub9d0\ud558\ub294\ub370, dafault\ub294 0\uc774\ub2e4. \uc774\uac83\ub3c4 \uc815\ud655\ud788 \uc798 \ubaa8\ub974\uaca0\uc74c.\n\n##5.13.XGBoost Classifier\n","69e3aa23":"\uc774\uc804\uacfc \uac19\uc740 \uadf8\ub9bc \uadf8\ub824\uc8fc\ub294 \ucf54\ub4dc\n\n##5.5. Decision Tree Visualization","04397873":"\uc124\uc815\uc744 \ubc14\uafd4\uc11c \ub3cc\ub9b0 \ubc84\uc804\uc778\ub370 kernel\uc744 rbf\ub85c \ubc14\uafe8\uc74c.\n\n##5.12 LightGBMClassifier","134dd05b":"5.4\uc5d0\uc11c RFE\ub85c \uc5bb\uc740 feature\ub4e4\uc744 \ubf51\uc544 randomforest\ub97c \ub3cc\ub824\uc900\ub2e4.\n\n##5.9. Gaussian Naive Bayes.","fc09c7a4":"tel\uc5d0 \uc5c6\ub294 \uc5f4\uc744 \uc0dd\uc131\ud560 \uc218 \uc788\uc74c. tel['\uc5f4\uc758 \uc774\ub984']= \uc774\ub7f0\uc2dd\uc73c\ub85c \uc0dd\uc131\ud558\uba74\ub428.\n\n\uc5ec\uae30\uc11c\ub294 tel\uc5d0 .apply\ud568\uc218\ub97c \uc37c\uc74c. \uac12\uc744 \uc9d1\uc5b4\ub123\uc5b4\uc8fc\ub294 \uce5c\uad6c\uc778\ub370 \uad04\ud638\uc548\uc758 lambda\ub294 \ud615\uc2dd\uc801\uc73c\ub85c \uc368\uc900\ub2e4\uace0 \uadf8\ub0e5 \uc0dd\uac01.\n\ntel:lab(tel) \ud568\uc218lab\uc744 tel\uc5d0 \uc801\uc6a9\uc2dc\ud0a4\ub294 \uac70\ub77c\uace0 \uc0dd\uac01\ud558\uba74\ub428. axis=1\uc740 \uc5f4. \uc124\uba85\uc774 \uc5b4\ub835\ub2e4.. \uadf8\ub0e5 \ub118\uc5b4\uac00\ub3c4 \ud615\uc2dd\ub9cc \uae30\uc5b5\ud558\uba74 \ub420\ub4ef \uc368\ubcf4\uba74 \uc54e\n\n\uacb0\uacfc\uc801\uc73c\ub860 tel\uc758 tenure\ub97c lab\ud568\uc218\ub97c \uc801\uc6a9, \ubcc0\ud658\uc2dc\ucf1c\uc11c tenure_group\uc5d0 \uc0bd\uc785\ud55c\ub2e4.\n","e9dbbcf3":"C\ub294 \ud328\ub110\ud2f0\ub97c \uc758\ubbf8 1 \uc740 default\uac12\n\ncache_size\ub294 kernel\uc758 cache\uac12\uc744 \uc9c0\uc815, \ucef4\ud4e8\ud130 \uc6a9\ub7c9\uad00\ub828 \ub0b4\uc6a9\uc778\uac70 \uac19\uc74c.\n\nclass Weight\ub294 C\uc55e\uc5d0 \ubd99\uc5ec\uc904 \uac00\uc911\uce58 \uac12\uc744 \uc598\uae30\ud558\ub294\ub370, \ub9cc\uc57d None\uc774\uba74 \ubaa8\ub4e0 \ud074\ub798\uc2a4\ub294 \uac00\uc911\uce58\uac00 \ud558\ub098 \uc8fc\uc5b4\uc9d0.\nbalanced\ub97c \uc904 \uacbd\uc6b0 \uc790\ub3d9\uc801\uc73c\ub85c \uc6e8\uc774\ud2b8 \uac12\uc774 \uc870\uc815\ub41c\ub2e4\uace0\ud568. class\ube48\ub3c4\uc218\uc5d0 \ub530\ub77c\uc11c.\n\nkernel\uc740 \ud615\uc2dd \uc5ec\uae30\uc120 linear\ud615\uc2dd\uc744 \uc37c\ub294\ub370, rbf\uac00 default\ub77c\uace0\ud568. \uba3c\uc800 \ucee4\ub110\ub9e4\ud2b8\ub9ad\uc2a4\ub97c \uacc4\uc0b0\ud558\ub294 \ubc29\uc2dd\uc774\ub77c\uace0 \ud55c\ub2e4.\n\nmax_iter\uc740 \uba87\ubc88 \uc218\ud589\ud560 \uac83\uc778\uc9c0 \uc815\ud558\ub294\uac74\ub370 -1\uc774 default\uace0 \uc81c\ud55c\uc5c6\uc774 \ud558\ub294 \uac83.\n\ndicision_function_shape\uc740 one vs rest\ud615\uc2dd ovr\ub610\ub294 one vs one\uc778 ovo\ub85c \ud55c\ub2e4\uace0 \ud55c\ub2e4. ovr\n\n\uc54c\uc544\ub4e3\uae30 \ud798\ub4e4\ub2e4.. \ub098\uba38\uc9c4 \ub2e4 default\uac12\uc774\ub77c \uadf8\ub0e5 \uc548\uc4f8\ub798 \ubb50\uac00\ubb54\uc9c0\ub3c4 \uc194\uc9c1\ud788 \uc798 \ubaa8\ub974\uaca0\uc74c.\n\nsvm\uc798 \uc548\uc4f0\uae30\ub3c4 \ud558\uace0..\n\n##5.11 Tuning parameters for support vector machine","a7a10d50":"train\uacfc test\ub97c \ub098\ub220\uc92c\uace0, cols\uc5d0 target(churn),\uacfc id\ub97c \ube80 feature\ub97c \ub123\uc5b4\uc92c\ub2e4.\n\nID\ub97c \ube7c\ub294 \uc774\uc720\ub294 \uc608\uce21\ud560 \ub54c \uc5b4\ub5a0\ud55c \uc758\ubbf8\ub3c4 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38.\n'2057'\uc774\ub780 \uc22b\uc790ID\ub9cc \ubcf4\uace0 \uc774 \uc0ac\ub78c\uc774 \uc5b4\ub5a4\uac78 \ud560 \uac83\uc774\ub2e4 \uc608\uce21\uc740 \ubd88\uac00\ub2a5.\n\ntrain_X, test_X\uc5d0 cols\ub97c, train_Y, test_Y\uc5d0 target_col\uc744 \ub123\uc5b4\uc900\ub2e4.\n\n\uc2dc\ud5d8\uc744 \uc608\ub85c \ub4e4\uc790\uba74 train\uc740 \ubaa8\uc758\uace0\uc0ac\uc784. \ubaa8\uc758\uace0\uc0ac\ub97c train_X(feature\ub4e4)\ub85c \uc2dc\ud5d8 \ubb38\uc81c\ub97c \ud480\uace0 train_Y(target)\ub294 \ub2f5\uc744 \ub9de\ucd94\ub294 \uac83.  \n\nX\ub294 FEATURE\uace0, Y\ub294 TARGET\uc784. \n\n\uc774\uc81c \ubaa8\uc758\uace0\uc0ac\ub97c \ubd24\uc73c\uba74 \uc218\ub2a5\uc744 \ubd10\uc57c\ud568. \uadf8\uac74 test\uc784. \n\ntest_X\ub85c \uc2dc\ud5d8\ubb38\uc81c\ub97c \ud480\uace0 test_Y\ub85c \ub2f5\uc744 \ub9de\ucd94\ub294 \uac83.","912465fb":"\ub808\uc774\ub354 \ucf54\ub4dc \uc9dc\ub294 \uacfc\uc815\uc778\ub370.\n\ud568\uc218\uc778 plot_radar\uc5d0 \ub9e4\uac1c\ubcc0\uc218 df, aggregate, title\uc744 \uc500.\n\n\ub2e4\uc2dc\ud55c\ubc88 \ub9d0\ud558\uc9c0\ub9cc \uc598\ub128 \ub098\uc911\uc5d0 plot_radar\ud568\uc218\ub97c \ubd88\ub7ec\uc624\uba74 (df, aggregate, title)\uc21c\uc73c\ub85c \uc9d1\uc5b4\ub123\uc5b4\uc11c \ud568\uc218\ub97c \uc2e4\ud589\uc2dc\ud0a4\ub294 \uac70\uc784.\n\n\ucf54\ub4dc\ub97c \uc880 \ub354 \uc54c\uae30 \uc27d\uac8c \ub72f\uc5b4\ubcf4\uc790.","0fc5a043":"drop\uc774 \ub098\uc624\ub294\ub370 \ud589 \ud639\uc740 \uc5f4\uc744 \ub4dc\ub78d\ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc120 axis=\uac12\uc73c\ub85c 0\uc740 \ud589, 1\uc740 \uc5f4. \n\n'tenure_group'\uc5f4\uc744 \uc5c6\uc564\uac70\uc784.","4d12dcdc":"\ube44\uc2b7\ube44\uc2b7 \ncat_cols\ub294 \ubc94\uc8fc\ud615, num_cols\ub294 \uc218\uce58\ud615, bin_cols\ub294 \ub3c5\ub9bd\ub41c \uac12\uc774 0\uacfc 1 \uc774\ub7f0\uc2dd\uc73c\ub85c \ub450\uac1c \ubc16\uc5d0 \uc5c6\ub294 \uce5c\uad6c\ub4e4\uc744 \ubf51\uc544\ub0b8 \uac83.","2723b71b":"\uadf8\ub9ac\uba74 \uc694\ub7f0\uc2dd\uc73c\ub85c \ub098\uc628\ub2e4.\n\n##3.6. Monthly charges,total charges and tenure in customer attrition","102f8d46":"astype\uc740 \uc5f4\uc758 \uc18d\uc131\uc744 \ubc14\uafd4\uc8fc\ub294 \uac83. ()\uad04\ud638\uc548\uc758 \uc18d\uc131\uc73c\ub85c \ubc14\uafbc\ub2e4.\n\n\uc704\uc5d0 \uc815\ubcf4\ub97c \ubcf4\uba74 TotalCarges\ub294 \uc6d0\ub798 object\ub85c \ubd84\ub958\ub418\uc5b4 \uc788\uc5c8\uc74c. \uc544\uae4c \ube48\uacf5\uac04 \" \"\uc774 \uce5c\uad6c \ub54c\ubb38\uc5d0.\n\n\uadf8\ub798\uc11c \ubc94\uc8fc\ud615(object)\ub97c \uc218\uce58\ud615(float, int \ub4f1)\uc73c\ub85c \ubc14\uafd4\uc900\uac70\uc784.","f7c75fe8":"\ub098\uc774\ube0c \ubca0\uc774\uc988 \ubaa8\ud615 \uc911 GaussianNB(\uac00\uc6b0\uc2dc\uc548 \uc815\uaddc\ubd84\ud3ec \ub098\uc774\ube0c \ubca0\uc774\uc988)\ub97c \uc37c\ub2e4.\n\n\ub098\uc774\ube0c \ubca0\uc774\uc988\ub294 \uc870\uac74\ubd80 \ud655\ub960 \ubaa8\ub378\ub85c, \ubd84\ub958\ub420 \uce5c\uad6c\ub4e4\uc740 n\uac1c\uc758 feature\ub97c \ub098\ud0c0\ub0b4\ub294 \ubca1\ud130 x1,x2\ub4f1\uc73c\ub85c \ud45c\ud604\ub418\uba70, \uc774 \ubca1\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \ud074\ub798\uc2a4\ub97c \uc544\ub798\uc640 \uac19\uc774 \ud560\ub2f9\ud55c\ub2e4.\n\n![naive](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/6add9e9bd1434964d43c21b91e028802fc062873)\n\n\uc544\ub798\uc758 \uc2dd\uc73c\ub85c \ud074\ub798\uc2a4\ub97c \ubd84\ub958\ud55c\ub2e4.\n![naive2](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/ed400a98da3c68951dfa9befb07c5268f30c9c7b)\n\n\uac00\uc6b0\uc2dc\uc548, \ub2e4\ud56d\ubd84\ud3ec, \ubca0\ub974\ub204\uc774 \ub098\uc774\ube0c\ubca0\uc774\uc988\uac00 \uc788\uc73c\uba70 \uac01\uac01 \uc218\uc2dd\uc774 \ub2e4\ub974\ub2e4. \n\n\uc544\ubb34\ud2bc, \ub098\uc774\ube0c\ubca0\uc774\uc988 \ubc29\uc2dd\uc73c\ub85c \ubd84\ub958\ud55c \ubaa8\uc2b5\uc774\ub2e4.\n\n##5.10. Support Vector Machine","733bc3c9":"Heatmap\uc774\ub780 \uce5c\uad6c\ub97c \uadf8\ub824\uc904\uac70\uc784. x\ucd95, y\ucd95, z\ucd95\uc5d0 \uac01\uac01 \uac12\uc774 \ub4e4\uc5b4\uac14\uace0,\n\ncolorscale\uc740 \uc0c9 \ud615\uc2dd\uc774\uace0 colorbar\ub294 \uc0c9\uc0c1\uc774 \uc758\ubbf8\ud558\ub294 \ubc14\ub97c \ubcf4\uc5ec\uc8fc\ub294 \ubc14\uc784. \u314e\u314e\n\ubcf4\uba74 \uc54c\uac70\uc784. \uae00\uc528\ub791 \ubc14\uac00 \uc624\ub978\ucabd\uc5d0 \uc704\uce58\ud574\uc788\uc74c. \n\n\ub098\uba38\uc9c4 \uadf8\ub0e5 layout\uacfc \uadf8\ub9bc\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud55c \uacfc\uc815\ub4e4.\n\n##3.9. Visualising data with principal components\n","62796880":"\uadf8\ub9bc\uc744 \uadf8\ub824\uc900\ub2e4.\n\n##5.8A random forest classifier\n","b91a1092":"\ub370\uc774\ud130 \uc815\uc81c, \ud504\ub808\uc784\ub9cc\ub4dc\ub294 \uce5c\uad6c\ub4e4\n","c9c85f9d":"\uc774\uc804\uc5d0 \ud588\ub358 \ub370\uc774\ud130 \ud504\ub808\uc784 \ub9cc\ub4dc\ub294 \uacfc\uc815\uacfc \ub0b4\ub9bc\ucc28\uc21c \ubc29\ubc95.","5024953b":"#\uc598\ub294 val\uc774\ub780 \uac1d\uccb4\uc5d0 tel['Churn']\uc758 \ud56d\ubaa9\ubcc4 \uac2f\uc218\ub97c \uc13c\ud6c4\uc5d0, values\ub780 \uc22b\uc790\uc784 yes \uba87\uac1c, no \uba87\uac1c\ub77c \ud558\uba74,\n#\uba87\uac1c\ub97c \ubf51\uc544\uc8fc\ub294 \uce5c\uad6c. \uc774\uac78 \ub9ac\uc2a4\ud2b8 \ud615\uc2dd\uc73c\ub85c \ubc14\uafc8.","02a013e5":"\uc608\uc804\uc5d0 \uc815\uc758\ud574\uc92c\ub358 \uce5c\uad6c\ub4e4\uc744 \ub2e4\uc2dc \uc815\uc758\ud574\uc900\ub2e4. \ubaa8\ub378 \ud3c9\uac00\ub97c \uc704\ud55c \uadf8\ub9bc \uadf8\ub9ac\ub294 \uacfc\uc815. \n\n\uc544\ub9c8 \ub0b4\uc6a9\uc774 \uc0b4\uc9dd \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0 \uadf8\ub7f4\ud150\ub370, \ub300\uccb4\ub85c \ube44\uc2b7\ud55c \ub0b4\uc6a9\uc774\ub77c \ud328\uc2a4\ud55c\ub2e4.\n\n##5.6 KNN Clssifier","617c8726":"reset_index()\ub780 \uc778\ub371\uc2a4\uac12\uc744 \ub2e4\uc2dc \uc9c0\uc815\ud574\uc8fc\ub780\uac70\uc784. \uc2e4\ud589\ud574 \ubcf4\uba74 \uc54c\uaca0\uc9c0\ub9cc tel\uc744 \ubd88\ub7ec\uc624\uba74 \ub9e8 \uc67c\ucabd\uc5d0 \uc606\uc5d0 \uc22b\uc790 \uce5c\uad6c\ub4e4\uc774 \uc788\uc74c.\n\ud558\uc9c0\ub9cc \uc6b0\ub9ac\ub294 \uacb0\uce21\uce58\ub97c \uc5c6\uc574\uc796\uc74c? \uadf8\ub798\uc11c \ube48 \uacf5\uac04\uc774 \uc0dd\uae40. \uc911\uac04\uc5d0 \ub4ec\uc131\ub4ec\uc131\ud558\uac8c \ubc88\ud638\uac00 \ubd99\uc5ec\uc838\uc788\uc74c. \uc598\ub124\ub97c \ub2e4\uc2dc 0\ubd80\ud130 \uc21c\uc11c\ub300\ub85c \uc9c0\uc815\ud574\uc90c.\n\ub9e8\ub4a4\uc5d0 [tel.columns]\uac00 \uc65c\ubd99\ub098 \ud574\ubd24\ub354\ub2c8 \uadf8\ub0e5 reset_index()\ub97c \ud558\uba74 \uc0c8\ub85c\uc6b4 index\ub77c\ub294 \uc5f4\uc774 \uc0dd\uae30\ub354\ub77c. \ubaa8\ub4e0\uc5f4\uc5d0 \ub300\ud574 reset_index\ud558\ub098\ubcf4\ub2e4 \uc2f6\uc5b4.","3e5e0e78":"\uc598\ub124\ub97c Figure\ub77c\ub294 \ud568\uc218\uc5d0 \uc9d1\uc5b4\ub123\uc5b4\uc11c \ud615\uc0c1\ud654\ub97c \ud574\uc8fc\ub294\uac70\uc784. \uc5ec\ud0dc \uc704\uc5d0\uc11c trace\uc640 layout\uc740 \uc774\ub7f0\ud615\uc2dd\uc73c\ub85c \ub9cc\ub4e4\uaebc\uc784! \uc774\ub77c\uace0 \uc9c0\uc815\ud574 \uc92c\ub2e4\uba74 Figure\ub294 \uc598\ub124\ub97c \uc885\ud569\ud574\uc11c \uadf8\ub9bc\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc90c.\n\n\uc774\uac78 \uc6b0\ub9ac\uac00 \ub208\uc73c\ub85c \ubcfc \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \uce5c\uad6c\ub294 py.iplot(fig)\uac00 \ud574\uc90c.\n\n##3.2. Varibles distribution in customer attrition\n","ceb56a5b":"\uc774\uc81c \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\ubd84\uc11d\uc5d0 \uc9c4\uc9dc\ub85c \ub123\uc5b4\uc8fc\ub294 \uc791\uc5c5\uc744 \ud55c\ub2e4. \n\n\ub611\uac19\ub2e4. train, test\ub85c \ub098\ub220\uc8fc\ub294 \uc791\uc5c5, Logistic Regressor\uc5d0 \ub123\uc5b4\uc8fc\ub294 \uc791\uc5c5. \n\n\ub2e4\ub9cc \ud558\ub098 \ub2e4\ub978\uc810\uc774 \uc788\ub2e4\uba74\n~~~\ntab_rk = ff.create_table(idc_rfe)\npy.iplot(tab_rk)\n~~~\n\uc774\ub7f0 \uce5c\uad6c\ub97c \uc2dc\uac01\ud654 \ud574\uc92c\ub2e4\ub294\uac74\ub370, \uc544\ub798\uc758 \ucf54\ub4dc\ub294 \uadf8\ub0e5 \uc2dc\uac01\ud654\ub97c \uc704\ud568\uc774\uace0\n\uac1d\uccb4 tab_rk\ub77c\ub294 \uacf3\uc5d0 ff\ub77c\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc640 create_table\ub85c \ud14c\uc774\ube14\uc744 \ub9cc\ub4e4\uc5c8\ub2e4.\n\n\uc704\uc758 \uc2dc\uac01\ud654 \uc790\ub8cc\uc911\uc5d0 \ucc98\uc74c\ubcf4\ub294 \ud14c\uc774\ube14\uc774 \uc788\ub294\uac78 \uc54c \uc218 \uc788\ub2e4. \n\n##5.4 Univariate Selection","b3ab4504":"\uc544\uae4c\uc640 \ube44\uc2b7\ud55c \ud568\uc218\ub97c \uc815\uc758, \uc368\uc8fc\uace0","a54ea2e6":"~~~\ndef plot_decision_tree(columns,maximum_depth,criterion_type,\n                       split_type,model_performance = None) :\n~~~\n\uae30\uc874 \uce5c\uad6c\ub4e4\uacfc \ub611\uac19\uc740 \ud615\uc2dd. \ub9e4\uac1c\ubcc0\uc218 \uce5c\uad6c\ub4e4\uc774 \ub9ce\uc740\ub370 columns\ub294 \uc5f4\uc744 \uc120\ud0dd\ud558\ub294 \uac83,\n\nmaximum_depth\ub294 \ud2b8\ub9ac\uc758 max_depth\ub97c \uc758\ubbf8\ud558\ub294\ub370 \uc704\uc5d0\uc11c \ub0b4\ub824\uc624\uba74\uc11c \uae30\uc900\uc744 \uba87\uac1c\ub97c \uc0bc\uace0 \uc5b4\ub514\uae4c\uc9c0 \ubed7\uc5b4\ub098\uac08\uc9c0 \uc815\ud558\ub294 \uac83. \uc544\ubb34\uac83\ub3c4 \uc801\uc9c0 \uc54a\ub294\ub2e4\uba74 \ubd84\ub958\uae30\uc900\uc744 \ubaa8\ub450 \ub123\uc5b4 \ub05d\uae4c\uc9c0 \ub098\ub220\uc900\ub2e4.(\ub300\uc2e0 FEATURE\uac00 \ub9ce\uc744 \uacbd\uc6b0\uc5d0 \uc624\ubc84\ud53c\ud305\uc5d0 \uc8fc\uc758)\n\ncriterion_type\uc740 \uc544\uae4c \ub9d0\ud588\ub358 \ubd88\uc21c\ub3c4 \uacc4\uc0b0\ubc29\uc2dd(gini,entropy)\uc744 \uc120\ud0dd\ud558\ub294 \uac83.\n\nsplit_type\uc740 best\uc640 random\uc774 \uc788\ub294\ub370 \ubaa8\ub4e0 feature\ub4e4\uc744 \uacc4\uc0b0\ud558\uc5ec \ubd88\uc21c\ub3c4\ub97c \ub0ae\ucdb0 \ub0b4\ub824\uac00\ub294 \ubc29\uc2dd\uc744 \ud0dd\ud55c \uac83\uc774 best, random\uc740 feature\ub4e4\uc744 random\ud558\uac8c \uc120\ud0dd\ud558\uc5ec \ub098\ub204\ub294 \ubc29\uc2dd. \n\nmodel performance\ub294 True\uac12\uc744 \uc92c\uc744\uc2dc performance\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\n\n~~~\n    dtc_x = df_x[columns]\n    dtc_y = df_y[target_col]\n    \n    #model\n    dt_classifier = DecisionTreeClassifier(max_depth = maximum_depth,\n                                           splitter  = split_type,\n                                           criterion = criterion_type,\n                                          )\n~~~\n\ub2e4\uc2dc\ud55c\ubc88 x(features)\uc640 y(target)\ub85c \ub098\ub220\uc8fc\ub294 \uc791\uc5c5\uc744 \ud588\uace0 \uc758\uc0ac\uacb0\uc815\ub098\ubb34\ub97c \uc124\uc815\ud574\uc92c\ub2e4. DecisionTreeClassifier\ub294 sklearn\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc758\uc0ac\uacb0\uc815\ub098\ubb34 \ubaa8\ub378\uc774\ub2e4.\n\nmax_depth,splitter,criterion\uc740 def\uc5d0\uc11c \uc815\uc758\ub41c \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc744 \ub123\uc5b4\uc92c\ub2e4.\n\n~~~\n    dt_classifier.fit(dtc_x,dtc_y)\n~~~\n\uc758\uc0ac\uacb0\uc815 \ub098\ubb34\ub97c x,y\uac12\uc744 \ub123\uc5b4\uc918 \uc801\uc6a9\uc2dc\ucf30\ub2e4.\n\n~~~\n    graph = Source(tree.export_graphviz(dt_classifier,out_file=None,\n                                        rounded=True,proportion = False,\n                                        feature_names = columns, \n                                        precision  = 2,\n                                        class_names=[\"Not churn\",\"Churn\"],\n                                        filled = True                         \n                                       )\n                  )\n~~~\n\ngraphviz\ub77c\ub294 \uce5c\uad6c\uac00 \uc788\ub2e4. \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778\ub370 \uc5ec\uae30\uc758 Source\ub77c\ub294 \uce5c\uad6c\ub97c \ubd88\ub7ec\uc640\uc8fc\uace0, tree.exprot_graphviz\ub77c\ub294 \uce5c\uad6c\ub97c \uc18c\ud658\ud574 \uc900\ub2e4. \n\n\ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \ubd88\ub7ec\uc628 \uc758\uc0ac\uacb0\uc815\ub098\ubb34\ub97c \uadf8\ub9bc\uc73c\ub85c \ud45c\ud604\ud574\uc8fc\uae30 \uc704\ud55c \uce5c\uad6c\ub4e4\uc774\ub2e4.\n\nout_file\uc740 output\ud30c\uc77c\uc758 \uc774\ub984\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. default\ub294 None\uc778\ub370 \uadf8\ub0e5 \uc774\ub984\uc774 \ud45c\ucd9c\ub41c\ub2e4.\n\nrounded\ub294 \uadf8\ub0e5 \ubc15\uc2a4\uc758 \uac01\uc744 \ub3d9\uadf8\ub797\uac8c \ub9cc\ub4e4\uc5b4\uc8fc\uace0 \uc2f6\uc740\uac83..\n\nprecision\uc740 \ubd88\uc21c\ub3c4\uc758 \uacc4\uc0b0 \uac12\uc774 \uc18c\uc218 \uba87\uc9f8\uae4c\uc9c0 \ub098\uc624\ub294\uc9c0 \uc54c\ub824\uace0 \ud558\ub294\uac83.\n\nfilled=True\uc77c \ub54c \ub354 \uc911\uc694\ud55c \uce5c\uad6c\uc5d0\uac8c \uc0c9\uc744 \uce60\ud574\uc900\ub2e4\uace0 \ud55c\ub2e4.\n\n~~~\n    if model_performance == True :\n        telecom_churn_prediction(dt_classifier,\n                                 dtc_x,test_X[columns],\n                                 dtc_y,test_Y,\n                                 columns,\"features\",threshold_plot = True)\n    display(graph)\n~~~\n\n\uc774\uc804\uc5d0 \ubcf4\uc5ec\uc92c\ub358 model \ud3c9\uac00 \uc9c0\ud45c\ub4e4\uc744 \ub208\uc73c\ub85c \ubcf4\uc5ec\uc8fc\uac8c \ud55c\ub2e4.\n\n~~~\nplot_decision_tree(features_num,3,\"gini\",\"best\")\n~~~\n\uc218\uce58\ud615 \ubcc0\uc218 \uce5c\uad6c\ub4e4\uc744 \ub123\uc5b4\uc92c\uc744\ub54c.\n","ad3fe190":"3d\ub85c \ud55c\ubc88 \uad6c\ud604\ud574\ubcf8\uac83.  \ucf54\ub4dc\ub294 \uc774\uc804\uacfc \ube44\uc2b7 3d\ub85c \uad6c\ud604\ud558\ub294 \ud568\uc218\uc778 Scatter3d\uc778\uac70 \uc774\uc678\uc5d4 \uc5c6\ub2e4.\n\n#4. Data preprocessing","ce1ec3ba":"SVM\uc774\ub77c\ub294 \uce5c\uad6c\ub97c \ud574\uc904\uac70\uc784.\n\n![svm](http:\/\/i.imgur.com\/7TNlFVd.png)\n\n\uadf8\ub9bc\ucc98\ub7fc \ub2e4\ub978 \ud074\ub798\uc2a4\uc640 \uac70\ub9ac\uac00 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uce5c\uad6c\ub97c \uc11c\ud3ec\ud2b8 \ubca1\ud130\ub77c\uace0 \ud558\uace0 \ub458 \uc0ac\uc774\uc758 \uac70\ub9ac\ub97c \ub9c8\uc9c4\uc774\ub77c\uace0 \ud55c\ub2e4.\n\n\uc6b0\ub9ac\uc758 \ubaa9\ud45c\ub294 \ub9c8\uc9c4\uc744 \uac00\uc7a5 \ud06c\uac8c \ub9cc\ub4dc\ub294 \uce5c\uad6c\uc774\ub2e4. \uc774\uac8c \uc120\ud615\uc77c\ub550 \uc774\ub807\uac8c \ubcf4\uc774\ub294\ub370 \uc544\ub798\uc758 \uadf8\ub9bc\ucc98\ub7fc\n\n![SVM2](https:\/\/wikidocs.net\/images\/page\/5719\/noname01_1uOrfWW.png)\n\uc774\ub7f0 \uc2dd\uc73c\ub85c \ub458\ub7ec\uc313\uc5ec\uc838 \uc788\ub294 \uacbd\uc6b0, \uc120\ud615\uc73c\ub85c \uad6c\ubd84\uc774 \ud798\ub4e4\uacbd\uc6b0\uc5d4 \ucee4\ub110\ud2b8\ub9ad\uc774\ub780 \ubc29\ubc95\uc744 \uc368\uc11c \ucc28\uc6d0\uc744 \ubc14\uafd4\uc900\ub2e4.\n\n\uadf8\ub798\uc11c \ub9c8\uc9c4\uc744 \ub298\ub9ac\ub294 \ud615\uc2dd\uc744 \ub9d0\ud55c\ub2e4.","b1d7ecce":"\uc774\ubc88\uc5d4 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \uadf8\ub824\uc8fc\uace0 \uc2f6\uc74c.\n\n\uc774\uc804\uae4c\uc9c0\ub294 yes,no \uac19\uc740\uac78\ub85c \ubd84\ub958\ub418\ub294 \ubc94\uc8fc\ud615 \uce5c\uad6c\ub4e4\uc774\uc5c8\ub2e4\uba74,  \uc774\uc820 \uc218\uce58\ud615 \uce5c\uad6c\ub4e4\uc744 \uadf8\ub798\ud504\ub85c \ub098\ud0c0\ub0b4\uc8fc\uace0 \uc2f6\uc74c.\n\n\uadf8\ub7f4\ub824\uba74 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \uadf8\ub824\uc918\uc57c\ud568.\n\n\uc544\uae4c\ub791 \uad6c\uc131\uc740 \ube44\uc2b7\ud568. def histogram\uc73c\ub85c \ud568\uc218\ub97c \uc815\uc758\ud574\uc8fc\uace0 trace1, trace2, layout\uc740 \uadf8\ub300\ub85c \uc720\uc9c0.\n\nx=churn[column]-> x\ucd95\uc5d4 \uc218\uce58\ud615\uc758 column\uc774 \ub4e4\uc5b4\uac04\ub2e4. y\ucd95\uc740 histnorm='percent'\uc774\ub77c\ub294 \ub140\uc11d\uc774 \ub4e4\uc5b4\uac00\ub294\ub370, \uc774\uac8c \ubb54\uac00 \uac80\uc0c9\ud574\ubd24\ub354\ub2c8 \uc5ec\ub7ec\uc218\uce58\ub85c \ud45c\uc2dc\ud560 \uc218 \uc788\uc74c(percent\uc678\uc5d0 probability, density\ub4f1). \n\n\uc6b0\ub9ac\ub294 x\ucd95\uc5d0 \ub530\ub77c \uc804\uccb4\uc758 \uba87 %\ub97c \ucc28\uc9c0\ud558\uace0 \uc788\ub294\uc9c0\ub97c \ud45c\uc2dc\ud560 \uac70\uc784.(\ubc11\uc5d0 \uadf8\ub9bc\uc744 \ubcf4\uba74 \uc774\ud574\ud558\uae30 \uc27d\ub2e4.)\n\nname\uc740 \uc606\uc5d0 \ud45c\uc2dc\ub418\ub294 \uc0c9\uc778? \uc815\ub3c4\ub85c \uc778\uc2dd\ud558\uba74 \uc88b\ub2e4. \uadf8\ub9bc \uc67c\ucabd\uc5d0 \ud45c\uc2dc.\n\nmarker\ub294 \uc774\uc804\uacfc \uac19\uc74c.\n\nopacity\ub294 \uadf8\ub798\ud504 \ubd88\ud22c\uba85\ub3c4.\n\n\nlayout\uc744 \ubcf4\uba74 \n\n~~~\nxaxis= dict(gridcolor='rgb(255,255,255)',\n                     title=column,\n                     zerolinewidth=1,\n                     ticklen=5,\n                     gridwidth=2)\n~~~                                  \n\uc774\ub7f0 \uce5c\uad6c\uac00 \uc788\ub294\ub370 x\ucd95\uc758 \uc124\uc815\uc744 \ud574\uc8fc\ub294\uac83. \n\nx\ucd95 \uc0c9\uae54\uacfc \uc774\ub984, zeroline\uc740 \ub9d0\uadf8\ub300\ub85c \ub9e8\ubc11\uc5d0 \uc788\ub294 0\uc758 \ub77c\uc778\uc784. \ub450\uaed8\uc124\uc815.\n\nticklen\uc740 0,5,10 \uac19\uc774 \ub2e8\uc704 \uad6c\ubd84\ud588\uc744 \ub54c \uc67c\ucabd\uc5d0 - \uc694\ub7f0\uac70 \ub098\uc640\uc788\ub294 \uce5c\uad6c \uae38\uc774, \n\ngridwidth\ub294 \uac00\uc6b4\ub370 \uc788\ub294 \uad6c\ubd84\uc120 \ub450\uaed8! \ub77c\uace0 \ud558\uace0\uc2f6\uc740\ub370 \ubcf4\uba74 \uc54e. \ubb3c\uc5b4\ubd10\n\ny\ucd95\ub3c4 \uac19\uc74c.\n","d4b187fe":"\uc598\ub294 \uc6d0\ubcf8\uc774\uace0\n","63a7ee3e":"\uc9c0\uc800\ubd84 \ud558\ub2c8\uae4c \uc18c\uc218\uc810 \uc138\ubc88\uc9f8 \uc790\ub9ac\uae4c\uc9c0 \ud45c\ud604.","91ec43c1":"\uc704\uc758 \uc5f4 \uba85\uc744 index\ub294 feature\ub85c 0\uc740 yes\ub85c \ubc14\uafbc \uac83. ","75ed3613":"n\uc774\ub77c\ub294 \uac1d\uccb4\uc5d0 0\ubd80\ud130 9\uae4c\uc9c0 \ub123\uc5b4\uc918\uc11c \ub9ac\uc2a4\ud2b8 \ud615\uc2dd\uc73c\ub85c \ubc14\uafe8\ub2e4.\n\ncol1\uc5d0 feature\ub4e4\uc744 \ub123\uc5b4\uc8fc\uace0,\n\n~~~\nfor i in n :\n    plot_tree_randomforest(cols1,10,i,3,\"entropy\",model_performance=False)\n~~~\nfor\ubb38\uc73c\ub85c \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\ub97c \ub3cc\ub824\uc92c\ub294\ub370 \uc6b0\ub9ac\uac00 \ubcf4\uace0\uc2f6\uc740\uac74 0\ubd80\ud130 9\uae4c\uc9c0 \ucd1d 10\uac1c\uc758 \uadf8\ub9bc\uc744 \ubcf4\uace0\uc2f6\uc740 \uac83. \n\ni\ub294 estimated_tree\ub97c \uc758\ubbf8\ud55c\ub2e4. \uadf8\ub798\uc11c 0\ubd80\ud130 9\uae4c\uc9c0 \uc9d1\uc5b4\ub123\uace0 0\ubd80\ud130 9\uae4c\uc9c0\uc758 plot\uc744 \ub744\uc6b0\uace0\uc2f6\uc740 \uac83.\n","46c6655a":"\uc0c8\ub85c\uc6b4 \uac1d\uccb4 Id_col\uacfc target_col\uc5d0 \uac01\uac01 customerID\uc640 Churn\uc744 \uc9d1\uc5b4\ub123\uc74c.","81577ad7":"\uc5f4\uc744 \ubf51\uc544\ub0b4\uc11c list\ud615\uc2dd\uc73c\ub85c \uc800\uc7a5.","5766a198":"\uc6d0\ub798\uc788\ub358 \ub188\uc744 \ubcf5\uc0ac\ud574\uc8fc\uace0, num_cols(\uc218\uce58\ud615\ubcc0\uc218)\ub4e4\uc744 \uc81c\uac70\ud574\uc900\ub4a4\nmerge\ud568\uc218\ub97c \uc368\uc11c \uc2a4\ucf00\uc77c\ub9c1 \ub41c \uce5c\uad6c\ub4e4\uc744 \ud569\uccd0\uc900\ub2e4.\n\n\n\nmerge\ud568\uc218\ub294 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ud569\uce58\ub294 \uce5c\uad6c\ub85c \uc5b8\uc81c\ubd10\ub3c4 \ud5f7\uac08\ub9ac\ub294\ub370, \n\nleft_index, right_index\ub294 \ud569\uce60\ub54c\uc758 \uae30\uc900\uc744 \uc67c\ucabd\uc5d0 \uc788\ub294 \uce5c\uad6c\uc758 index\ub97c \uae30\uc900\uc744 \uc0bc\uc744 \uac83\uc778\uc9c0, right_index\ub97c \uae30\uc900\uc0bc\uc744\uc9c0 \ud574\uc8fc\ub294 \uac83. \n\nhow\ub294 left, right, outer, inner\uc758 \uc18d\uc131\uc744 \uac16\uace0 \uc788\ub2e4. default\ub294 inner\ub2e4.\n\n\uc5ec\uae30\uc120 left\uac00 \uc4f0\uc600\ub294\ub370 \uc67c\ucabd\uce5c\uad6c\uac00 key\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \ub54c\ub97c \ub73b\ud55c\ub2e4.\nright\uc740 \uc624\ub978\ucabd.\n\nouter\ub294 \ud0a4\ub97c \ub458\ub2e4 \uac00\uc9c0\uace0 \uc788\uc744 \ub54c.  \ninner\ub294 \uacf5\ud1b5\ub41c \ud0a4\uac00 \uc788\uc744 \ub54c.\n\n\uae30\uc5b5\ud558\uae30 \uc2eb\uaca0\uc9c0\ub9cc \uc815\ubd84\uc124 key\ub97c \uc0dd\uac01\ud574\ubcf4\uba74..\u314e\u314e..\n\n\n##3.7. Variable Summary","6a5fa884":"\ub370\uc774\ud130\ub77c\ub294 \uac1d\uccb4\uc5d0 trace\ub97c \ub123\uc5b4\uc90c","a8b58b41":"\ub9c9\ub300 \uadf8\ub798\ud504\ub97c \ub9cc\ub4e4\uc5b4\uc8fc\uae30 \uc704\ud55c \uc124\uc815. x \ub294 x\ucd95 y\ub294 y\ucd95.","5de0ab8f":"\uc880 \uc788\uc5b4\ubcf4\uc774\uac8c \uc4f4\uac70 \uac19\uc740\ub370 cat_cols\ub77c\ub294 \uac1d\uccb4\ub97c \ub36e\uc5b4\uc4f0\ub294\uac70\uc784.\n\nfor\ubb38 \uc544\ub798\uc5d0 if\ubb38\uc774 \uc788\uace0 target_col\uc774 Churn\uc778\ub370 Churn \ube7c\uace0 \ubaa8\ub4e0 cat_cols\uc758 \uce5c\uad6c\ub4e4\uc744 \ub2e4 \ub123\uc740\uac70.\n\n#3. Exploratory Data Analysis\n##3.1. Customer attrition in data","eb73f78a":"PCA\ub77c\ub294 \uce5c\uad6c\ub97c \ud574\uc904\uac70\uc784 sklearn\uc5d0\uc11c \ud560 \uc218 \uc788\ub3c4\ub85d \uc81c\uacf5\ud574\uc8fc\uace0 \uc788\uc74c.\n\nPCA\ub780 N(feature \uac2f\uc218)\ucc28\uc6d0\uc758 \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\ub294 \uacf5\uac04 \uc0c1\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uac00\uc7a5 \uc798 \ud45c\ud604\ud560 \uc218 \uc788\ub294 \uae30\uc800(\uc120)\uc744 \ucc3e\ub294 \uac83. \uc774\ub77c\uace0 \ud568.\n\n\uc804\uccb4 \ub370\uc774\ud130\ub97c \ud30c\uc545\ud558\uae30 \uc5b4\ub824\uc6b4 \uc0c1\ud669\uc5d0 \uc788\uac70\ub098 \ud55c\uacc4\uc5d0 \uc774\ub97c \ub54c,\n\uc5b4\ub5a4 \ubcc0\uc218\uac00 \uc804\uccb4 \ub370\uc774\ud130\uc5d0\uc11c \ub9ce\uc740 \u2018\ube44\uc911\u2019\uc744 \ucc28\uc9c0\ud558\uace0 \uc788\ub294\uc9c0 \uc54c\uace0 \uc2f6\uac70\ub098,\n\ubcc0\uc218\uac00 \ub108\ubb34 \ub9ce\uc544\uc11c \uc120\ud0dd(FEATURE SELECTION)\uc744 \ud1b5\ud574 \uc904\uc774\uace0 \uc2f6\uc744 \ub54c,\nPCA\ub97c \uc0ac\uc6a9\ud558\uba74 \ub370\uc774\ud130\uc758 \uc190\uc2e4\uc744 \ucd5c\ub300\ud55c \uc904\uc77c \uc218 \uc788\ub2e4.\nPCA\ub294 \uc218\uce58\ud615\ubcc0\uc218 \uce5c\uad6c\ub4e4\uc744 \uacc4\uc0b0\ud574\uc8fc\ub294 \uce5c\uad6c\uc774\ub2e4.\n\nPCA\uc790\uccb4\ub294 FEATURE EXTRACTION\uc774\ub2e4. \uc5ec\ub7ec \ubcc0\uc218\ub4e4\uc744 \uc870\ud569\ud574\uc11c \uc798 \uc124\uba85\ud558\ub294 \uc0c8\ub85c\uc6b4 \ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5b4 \ub0b4\ub294\uac83. \ud558\uc9c0\ub9cc FEATURE SELECTION\uc5d0\ub3c4 \uc4f0\uc77c \uc218 \uc788\ub2e4. \ube44\uc911\uc774 \ub354 \ub192\uc740 \ubcc0\uc218\ub97c \ucc3e\uc744 \uc218\ub3c4 \uc788\uace0 \ub354 \ub9ce\uc740 \uc218\ud559\uc801 \uc791\uc5c5\uc744 \ud1b5\ud574 \uad6c\ud560 \uc218 \uc788\ub2e4\uace0 \ud55c\ub2e4. \ud558\uc9c0\ub9cc \ubcf4\ud1b5\uc740 \uadf8\ub807\uac8c\uae4c\uc9c0 \ud558\uc9c4 \uc54a\uace0, \uc5b4\ub5a4 \uad00\uacc4\uac00 \uc5b4\ub5bb\uace0 \uc124\uba85\ud558\ub294\uac74 \ub9e4\uc6b0 \ub09c\ud574\ud558\uace0 \ud798\ub4e4\ub2e4\uace0 \ud55c\ub2e4. \n\uc774\ub7f0 \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\uc5d0\uc11c \ubcf4\uc5ec\uc8fc\ub294\uac74 \uc815\ub9d0 \ubcf4\uc5ec\uc8fc\uae30 \uc2dd\uc774 \uc544\ub2cc\uac00 \uc2f6\ub2e4.\n\n\ubcf4\ud1b5 \ubcc0\uc218(FEATURE)\uac00 \ub9e4\uc560\uc560\uc560\uc6b0 \ub9ce\uc740 \uc774\ubbf8\uc9c0 \ucc98\ub9ac\uc5d0 \uad00\ud574 \uc124\uba85\uc774 \ub9ce\ub2e4.\n\n\uc880 \ub354 \uc608\ub97c \ub4e4\uc5b4 \uc124\uba85\ud55c\ub2e4.\n\n100\uac1c\uc758 FEATURE\uac00 \uc788\ub2e4\uace0 \uce58\uba74, \uc6b0\ub9ac\uac00 100\uac1c\ub97c \ub2e4 \ub300\uc870\ud558\uace0, \ub458\uc529 \uc9dd\uc9c0\uc5b4 \uc0b0\uc810\ub3c4\ub97c \uadf8\ub9b0\ub2e4\uba74 100(100-1)\/2\ub85c 4950\uac1c\uc758 \uc0b0\uc810\ub3c4\ub97c \ubd10\uc57c\ud558\ub294\ub370, \ud604\uc2e4\uc801\uc73c\ub85c \uadf8\ub7ec\uae30\uac00 \ud798\ub4e4\ub2e4.\n\uadf8\ub798\uc11c, PCA\ub97c \ud558\uc5ec \ucc28\uc6d0\uc744 \uc904\uc5ec\uc8fc\uba74 \uc774\ub7f4 \ud544\uc694\uac00 \uc5c6\ub2e4\uace0 \ud55c\ub2e4. \n\n\uc790\uc138\ud55c \uba74\uba74\uc744 \ub4e4\uc5ec\ub2e4 \ubcf4\ub824\uba74 \n\n\ucf54\ub4dc\ub97c \ubcf4\uba74, pca\ub780 \uac1d\uccb4\uc5d0 n_components=2\ub294 \ub370\uc774\ud130\ub97c \uac00\uc7a5 \uc798 \ud45c\ud604\ud560 \uc218 \uc788\ub294 \uc120\uc744 \ub450\uac1c\ub97c \ubcf4\uaca0\ub2e4\ub294 \uac83.","5a2b3747":"\ub808\uc774\ub354\ucc28\ud2b8\ub97c \ub9cc\ub4e4\uae30 \uc704\ud55c \uacfc\uc815\uc774\ub2e4. \nbinary \ubcc0\uc218\ub4e4\uc744 \ubf51\uc544\ub2e4\uac00 dat_rad \uac1d\uccb4\uc5d0 \ub123\uc5c8\ub2e4.","c8ad11fc":"\uc774\uc81c \uc559\uc0c1\ube14(Ensemble)\uc774\ub780 \uce5c\uad6c\ub97c \ud574\uc904\uaebc\ub2e4.\n\n\uc559\uc0c1\ube14\uc774\ub780? \ud504\ub791\uc2a4\uc5b4\ub85c \uc5ec\ub7ec\uac1c\ub97c \ud569\uce5c\ub2e4\uac00 \uae30\ubcf8\uc801\uc778 \ub0b4\uc6a9\uc774\uace0. \uba38\uc2e0\ub7ec\ub2dd\uc5d0\uc120 \uc5ec\ub7ec\uac1c\uc758 \ubaa8\ub378\uc744 \uc870\ud569\ud558\uc5ec \ucd5c\uc885 \uc608\uce21\ubaa8\ub378\uc744 \ub9cc\ub4dc\ub294 \uae30\ubc95\uc744 \uc758\ubbf8\ud55c\ub2e4.\n\n\uc6b0\ub9ac\uac00 \ucd5c\ucd08\ub85c \ub2e4\ub8f0 \uce5c\uad6c\ub294 \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8(RandomForest)\ub77c\ub294 \uce5c\uad6c\ub2e4.\n\n\ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\ub97c \uc54c\ub824\uba74 \ubc30\uae45(Bagging)\uc774\ub77c\ub294 \uce5c\uad6c\ub97c \uba3c\uc800 \uc54c\uc544\uc57c\ud55c\ub2e4.\n\n\ubc30\uae45\uc774\ub780 Boostrap aggregating\uc758 \uc904\uc784\ub9d0\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc911\ubcf5\ub79c\ub364\uc0d8\ud50c\ub9c1(Boostrap)\ud55c \ub4a4 \ubaa8\ub378(Decision Tree)\uc744 \ub9cc\ub4e4\uace0,\n\ub2e4\uc2dc \uc774\ub4e4\uc744 \ubaa8\uc544 \ubaa8\ub378\ub9c1 \ud55c \uac83.(Aggregating)\n\n\uc608\uce21 \uac12\uc774 \uc5f0\uc18d\ud615\uc77c \ub54c\ub294 \ud3c9\uade0\uac12\uc744 \ub530\ub974\uace0, \ubc94\uc8fc\ud615\uc77c \ub54c\ub294 \ud22c\ud45c\ud615\uc2dd\uc744 \ub530\ub77c \ubd84\ub958\ud55c\ub2e4.\n\n\uc758\uc0ac\uacb0\uc815\ub098\ubb34 \ud558\ub098\ub9cc \uc788\ub294 \uac83 \ubcf4\ub2e4 \uc5ec\ub7ec\uac1c\uc758 \uacb0\uacfc\ub97c \ud569\uccd0\ubcf4\uba74 \uc880 \ub354 \uc88b\uc740 \uacb0\uacfc\uac12\uc744 \uac00\uc9c0\uac8c \ub418\uc5b4\uc788\ub2e4.\n\n![random](http:\/\/www.birc.co.kr\/wp-content\/uploads\/2017\/02\/randomforest-2-1024x380.png)\n\n\uc704\uc758 \uadf8\ub9bc\uc740 \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\uc640 \ubc30\uae45\uc758 \ubaa8\uc2b5\uc73c\ub85c \ubcf4\uba74 \ub418\ub294\ub370,\ubc30\uae45\uacfc \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\uc758 \ub2e4\ub978 \uc810\uc740 \ubc30\uae45\uc740 \ubaa8\ub4e0 feature\ub4e4\uc744 \ubd84\ub958\uc5d0 \uc368\uc11c \ubaa8\ub378\ub4e4\uc774 \ud55c\ucabd\uc73c\ub85c \uc3e0\ub9b4 \uc218 \uc788\uc9c0\ub9cc \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\ub294 feature\ub97c \ub79c\ub364\ud558\uac8c \uc120\ud0dd\ud558\uace0 \uc0ac\uc6a9\ud574 \ud55c\ucabd\uc73c\ub85c \uc3e0\ub9bc\uc744 \ubc29\uc9c0\ud55c\ub2e4.","b4f6fa82":"\uc2dc\uac01\ud654\ub97c \uc704\ud55c \uc790\ub8cc\ub4e4.\nimport '\ub77c\uc774\ube0c\ub7ec\ub9ac' as '\uc9c0\uce6d\uc6a9\uc5b4'\ub97c \ud574\uc8fc\uba74 \uc774\ud6c4 \uc9c0\uce6d\uc6a9\uc5b4\ub85c \ubd88\ub7ec\uc62c \uc218 \uc788\ub2e4.\n\npy.init_notebook_mode~\ub97c \ud574\uc8fc\uba74 \uc6d0\ub798\ub294 \uc6f9\uc5d0\uc11c \uadf8\ub9bc\uc744 \ub744\uc6b0\ub294\uac8c \ub418\ub294\uac74\ub370 \uc5ec\uae30 \uc548\uc5d0\uc11c\ub3c4 \uc2e4\ud589\ud558\uc5ec \ubcfc \uc218 \uc788\uac8c\ud574\uc8fc\ub294\uac70\uc784.\n\nimport pandas as pd\uba74 \uc774\ud6c4 pandas\ub97c pd\ub85c \ubd88\ub7ec\uc62c \uc218 \uc788\ub2e4.\n\ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4 \ud544\uc694\ud55c \ud568\uc218\ub97c \uc4f8 \uc218 \uc788\uac8c \ud574\uc900\ub2e4.\n\n#1.Data","96dc3eab":"\ub118\uc5b4\uac04\ub2e4~~ \n\n##3.4. Monthly Charges and Total Charges by Tenure and Churn groups","2e0b81ed":"RFE\ub780 \uc704\uc5d0\uc11c \uc368\uc838\uc788\ub4ef\uc774 Recursive Feature Elimination\uc778\ub370, \uc7ac\uadc0\uc801 ..? \ud2b9\uc131.. \uc81c\uac70..? \uc601\uc5b4\uac00 \uc9e7\uc544\uc11c \uc798 \ubaa8\ub974\uaca0\ub2e4.\n\n\uac1c\ub150\uc801\uc778 \ubd80\ubd84\uc740 \uc6b0\ub9ac\uc758 \ub9ce\ub358 Feature\ub97c \ucef4\ud4e8\ud130\ub2d8\uc774 \uc54c\uc544\uc11c \uc904\uc5ec\uc8fc\uc2e0\ub2e4\ub294\ub370\uc5d0 \uc788\ub2e4.\n\nlogistic \ucc98\uc74c\uc5d0 \uad6c\ud588\ub358 \ud2b9\uc131 \uc911\uc694\ub3c4(coefficient or feature importance)\uac00 \ud070 \uc21c\uc73c\ub85c \ubf51\uc544\ub0b4\uace0 \uc601\ud5a5\uc774 \ubbf8\ube44\ud55c \uce5c\uad6c\ub4e4\uc740 \uc9c0\uc6cc\ubc84\ub824\uc11c \uc624\ubc84\ud53c\ud305\uc744 \ub9c9\uace0 \uc815\ud655\ub3c4\ub97c \uc62c\ub9ac\uae30 \uc704\ud568\uc774\ub2e4.\n\n\ucf54\ub4dc\ub85c \ubcf4\uc790\uba74,\n\n~~~\nfrom sklearn.feature_selection import RFE\n\nlogit = LogisticRegression()\n~~~\n\uc77c\ub2e8 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc640\uc900 \ud6c4, \ubaa8\ub378\uc778 \ub85c\uc9c0\uc2a4\ud2f1 \ub9ac\uadf8\ub808\uc158\uc740 logit\uc774\ub780 \uac1d\uccb4\uc5d0 \ub123\uc5b4\uc8fc\uc5c8\ub2e4.\n\n~~~\nrfe = RFE(logit,10)\n~~~\nrfe\ub780 \uac1d\uccb4\uc5d0 RFE\ud568\uc218\ub97c \ubd88\ub7ec\uc640\uc92c\uace0, logit(Logistic Regression)\uc73c\ub85c \ud2b9\uc131 \uc911\uc694\ub3c4\ub97c \uacc4\uc0b0\ud574\uc11c feature 10\uac1c\ub97c \ubf51\uc544\ub0b4\ub77c. \ub77c\ub294 \ub9d0\uc784. \n\n10\uc774\ub780 \uc22b\uc790\ub97c \uc801\uc9c0 \uc54a\ub294\ub2e4\uba74, \uc804\uccb4 feature\ub97c \ubc18\uc73c\ub85c \uc904\uc5ec\uc900\ub2e4\uace0 \ud55c\ub2e4.\n\n~~~\nrfe = rfe.fit(os_smote_X,os_smote_Y.values.ravel())\n~~~\nfit\uc744 \uc2dc\ucf1c\uc8fc\ub294\ub370, \uc544\uae4c \uc624\ubc84\uc0d8\ud50c\ub9c1 \ud588\ub358 \uac12\ub4e4\uc744 \ub123\uc5b4\uc900\ub2e4. \n\n\uc65c Y\uc758 \uacbd\uc6b0 os_smote_Y.values.ravel()\ub85c \ud558\ub098 \uad81\uae08\ud574\uc11c \uadf8\ub0e5 \ub3cc\ub824\ubd24\ub354\ub2c8 warning\uc774 \ub728\uba74\uc11c \ucc28\uc6d0\uc744 \ud3c9\ud3c9\ud558\uac8c \ub9cc\ub4e4\uc5b4\uc8fc\ub77c\uace0 \ud55c\ub2e4. \n\n\uadf8\ub798\uc11c Y\uc758 \uacbd\uc6b0 .values\ub97c \uc368\uc11c \uac12\ub4e4\uc744 \uaebc\ub0b4\uc900\ub4a4 ravle()\ub85c \ucc28\uc6d0\uc744 \ud3c9\ud3c9\ud558\uac8c \ud574\uc900\ub2e4.(\uc774\uc804\uc5d0 \uc124\uba85\ud588\uc74c)\n\n\uc548\ud574\ub3c4 \uc0c1\uad00\uc5c6\uc774 \ub3cc\uc544\uac00\uae34 \ud55c\ub2e4.","aaab360e":"\uc598\ub97c \ubcf4\uba74 \uc804\uccb4\uc801\uc778 \ub370\uc774\ud130 \uc22b\uc790, \ub370\uc774\ud130 \ud615\ud0dc \ub4f1\uc744 \uc54c \uc218 \uc788\ub2e4.","d81bc37d":"\uc774\uc81c \uc0c8\ub85c\uc6b4 \ubd80\uc2a4\ud305\uc774\ub780 \uce5c\uad6c\ub97c \ud560\uac70\uc784.\n\n\ubd80\uc2a4\ud305\uc774\ub780, \uc758\uc0ac\uacb0\uc815\ub098\ubb34\uc758 \uc559\uc0c1\ube14 \ubc84\uc83c \uc911 \ud558\ub098.\n\n\uac04\ub2e8\ud788 \ub9d0\ud558\uba74 \ubd84\ub958\ub97c \uc798 \ubabb\ud558\ub294 \ubd84\ub958\uae30\ub97c \ubaa8\uc544 \uac00\uc911\uce58\ub97c \ub354\ud574\uc900 \ub4a4\uc5d0 \ucd5c\uc885 \ubaa8\ub378\uc744 \ub9cc\ub4dc\ub294 \uce5c\uad6c. \n\n![boost](http:\/\/www.birc.co.kr\/wp-content\/uploads\/2017\/02\/boosting.png)\n\n\uc774\ub7f0 \uce5c\uad6c\ub2e4. \n\n\ubd80\uc2a4\ud305\uc5d4 \uac00\uc911\uce58\ub97c \uc8fc\ub294 \ubc29\uc2dd\uc5d0 \ub530\ub77c \uc5ec\ub7ec \ubc29\uc2dd\uc774 \uc874\uc7ac\ud55c\ub2e4.\n\n![boost](https:\/\/image.slidesharecdn.com\/mlstudyboostingv0-171128021615\/95\/boosting-bagging-vs-boosting-14-638.jpg?cb=1511939004)\n\n\uc774\ub7f0 \ub140\uc11d\ub4e4\uc774 \uc874\uc7ac\ud55c\ub2e4.\n\n","9588d30c":"\uc598\ub124\ub97c \uad6c\uc6b0\uc6b0\uc6b7\uc774 \ud14c\uc774\ube14 \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\uc744 \ud574\uc8fc\uc2dc\uace0 \uc2f6\uc73c\uc2dc\ub300.. \n\n\ud14c\uc774\ube14\uc744 \ubd88\ub7ec\uc640\uc11c \ud568\uc218\ub3c4 \ub531\ud788 \uc5b4\ub824\uc6b4\uac74 \uc5c6\uc5b4\ubcf4\uc774\uace0 \uc77d\uc5b4\ubcf4\uba74 \ubb54\uc9c0 \uc54c\uac70\uc784. \n\n##3.8. Correlation Matrix","ebe5f7c2":"1\uc740 \uc5f4. \uc5f4\uac2f\uc218 \ud655\uc778","2ca0be76":"tel\uc774\ub77c\ub294 \uac1d\uccb4\uc5d0 isnull()\uc774\ub77c\ub294 \ud568\uc218\ub97c \uc801\uc6a9\uc2dc\ucf30\ub294\ub370 \uc774\uac74 \uacb0\uce21\uce58\ub97c \uc54c\uc544\ubcf4\uae30 \uc704\ud568.\n\uacb0\uce21\uce58\ub780 \ube44\uc5b4\uc788\ub294 \ud56d\ubaa9 \uc815\ub3c4\ub85c \uc0dd\uac01\ud574\uc8fc\uba74 \uc88b\uc74c.\nisnull()\uc744 \uc801\uc6a9\ud558\uba74 \uacb0\uce21\uce58\uc778 \ud56d\ubaa9\uc5d4 TRUE, \ucc44\uc6cc\uc838 \uc788\uc73c\uba74 FALSE\ub85c \ubcf4\uc5ec\uc90c.\n\ub4a4\uc5d0 .sum()\uc740 tel.isnull()\uc758 TRUE\uac12\uc744 \uc138\ub77c\ub294 \uc758\ubbf8.","ea284b64":"\uc774\uc81c \ubaa8\ub378\ub9c1\uc744 \ud560\uaebc\uc784. \uc5ec\uae30\uc11c \ubaa8\ub378\uc774\ub780, \ubd84\uc11d\ud558\uace0 \uc608\uce21\uc744 \ud574\uc8fc\ub294 \uce5c\uad6c\ub97c \ub9d0\ud568. \n\n\uc6b0\ub9ac\uac00 \uc5ec\ud0dc \ud588\ub358 \uc791\uc5c5\ub4e4\uc740 \uace0\uac1d\uc774\ud0c8\uc5d0 \uad00\ub828\ub41c \uc790\ub8cc\ub4e4\uc744 \ubd24\uc5c8\ub294\ub370, \uadf8 \uce5c\uad6c\ub4e4(feature)\ub4e4\uc744 \ubaa8\uc544\uc11c \ud2b9\uc815\ud55c \uacc4\uc0b0\uacfc \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud558\uc5ec \uace0\uac1d\uc774\ud0c8(target)\uc744 \uc608\uce21\ud558\ub294 \uac83\uc784.\n\n\uadf8 \ud2b9\uc815\ud55c \uacc4\uc0b0\uc774\ub098 \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \uc5ec\ub7ec \ubaa8\ub378\ub4e4\uc774 \uc788\ub294\ub370 \uc774\uac83\ub4e4\uc744 \ud558\ub098\ud558\ub098 \ube44\uad50\ud574\uac00\uba74\uc11c \uace0\uac1d\uc774\ud0c8\uc744 \uc81c\uc77c \uc798\ud558\ub294 \uce5c\uad6c\ub97c \ucc3e\ub294\uac70\uc784.\n\n\uc704\uc758 from import\uac19\uc740 \uac83\ub4e4\uc740 \ubaa8\ub378\ub9c1 \uc791\uc5c5\uc744 \uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc628 \uac83. ","a28d6300":"array\ud615\uc2dd\uc73c\ub85c \uc800\uc7a5\ud574\uc90c \uc2dc\uac01\ud654\ub97c \uc704\ud574 \uc774\ub7f0\uc9d3\uc744 \ud558\uace0 \uc788\ub294\ub370 array\ub294 \uc544\uae4c\uac19\uc774 \uae54\ub054\ud55c \ud45c\uac19\uc740 \ubaa8\uc591\uc5d0\uc11c \uc704\uc758 \ubaa8\ud615\ucc98\ub7fc \uc0dd\uae34\uac8c array\uc784.","39e11295":"nunique()\ub294 \ub3c5\ub9bd\uc801\uc778 \uac12\ub4e4\uc744 \uc758\ubbf8\ud568. unique\ud55c \uac12\uc774\ub77c\uace0 \ud574\uc57c\ud558\ub098 \uc608\ub97c \ub4e4\uc5b4 1,1,1,1 \uc774\ub7f0\uc2dd\uc73c\ub85c \uc788\uc73c\uba74 \ud55c\uac1c\ub9cc \uc788\ub2e4\uace0\ud568.  ","cfa7b707":"\ubc94\uc8fc\ud615 \ubcc0\uc218\ub4e4\ub9cc \ub123\uc5b4\uc92c\uc744\ub54c.","ea3d1fdc":"get_dummies\ud568\uc218\uac00 \uc4f0\uc784. \uc598\ub294 \ub610 \ub2e4\ub978 \ubc94\uc8fc\ud615\uc744 \uc218\uce58\ud654 \uc2dc\ucf1c\uc8fc\ub294 \uce5c\uad6c\uc784\n\nmulti_cols\uc560\ub4e4\uc744 \uc218\uce58\ud654 \ud574\uc8fc\uc5c8\ub294\ub370, \uc65c \ub611\uac19\uc740 LabelEncoder()\ub97c \uc4f0\uc9c0 \uc54a\uc558\ub098 \uac80\uc0c9\uc744 \ud574\ubd24\ub354\ub2c8, \n\nLabelEncoder\ub97c \uc4f0\uba74 \uc885\uc124=['\uc885\uad6d','\uc724\uc2dd','\ubcf4\ubbf8','\uc720\uc120','\ud61c\uc778'] \uc774\ub7f0\uc2dd\uc73c\ub85c \uc788\uc744\ub54c [0,1,2,3,4]\uc774\ub7f0 \uc2dd\uc73c\ub85c \ubcc0\ud658\uc744 \uc2dc\ucf1c\uc90c. \n\n\ud558\uc9c0\ub9cc get_dummies\ub97c \uc4f0\uba74 '\uc885\uc124_ \uc885\uad6d' '\uc885\uc124_ \uc724\uc2dd' '\uc885\uc124_ \ubcf4\ubbf8' '\uc885\uc124_ \uc720\uc120' '\uc885\uc124_\ud61c\uc778' \uc774\ub7f0\uc2dd\uc73c\ub85c \uc5f4\uc774 \ud558\ub098\uc529 \ub9cc\ub4e4\uc5b4\uc9c0\uace0 0\uacfc 1 \ub85c\ub9cc \ud45c\ud604\uc774 \ub428. \n\n\uc885\uad6d\uc744 \ucc3e\uace0 \uc2f6\ub2e4\uba74 '\uc885\uc124_\uc885\uad6d'\uc5d4 1, \ub098\uba38\uc9c4 0\uc774\uba74 \uc885\uad6d\uc774\ub77c\ub294\uac78 \uc54c \uc218 \uc788\ub3c4\ub85d. \n\n\uc5b4\ub5a4 \ucc28\uc774\uc810\uc774 \uc788\ub294\uac00 \ud588\ub354\ub2c8 LabelEncoder\ub294 \uacf5\uac04\uc744 \uc904\uc5ec\uc8fc\uba74\uc11c \uad6c\ubcc4\uc774 \uac00\ub2a5\ud558\uac8c \ub9cc\ub4e4\uc5b4 \uc90c.\n\nget_dummies\ub294 \uc5f4\uc744 \uc5ec\ub7ec\uac1c \uc0dd\uc131\ud558\ub2c8 \ub9ce\uc544\uc9d0. \n\n\ud558\uc9c0\ub9cc, \ucef4\ud4e8\ud130\uac00 \uc77d\uae30\uc5d0 LabelEncoder\ub97c \uc4f0\uba74 0,1,2,3,4\ub77c\uace0 \uc788\uc73c\uba74 \uc880 \ub354 \ud070 \uac12\uc5d0 \ub354 \ub9ce\uc740 \uac00\uc911\uce58\ub97c \uc904 \uac83\uc774\ub2e4. \ub77c\uace0 \ud574\uc11c get_dummies\ub97c \uc4f4\ub2e4\ud568.\n\n\uadf8\ub798\uc11c bin_cols\ub294 \ub450\uac1c\uc774\uae30\uc5d0 0,1\ub85c \ud45c\ud604 \uac00\ub2a5\ud558\ub2c8 Lable\uc744, multi\ub294 get_dummies\ub97c \uc4f4 \uac83\uc73c\ub85c \ubcf4\uc5ec\uc9d0.","85bb8ac7":"\uc0c1\uad00\ubd84\uc11d\uc744 \ud558\uae30\uc704\ud574\uc11c. \uac01 \ubcc0\uc218(feature)\ub4e4 \uc0ac\uc774\uc758 \uc0c1\uad00\uacc4\uc218\ub97c \uad6c\ud574\uc8fc\ub294\uac8c corr\uc784.","0b22c710":"\uc774\uc81c \uc21c\uc704\ub97c \ub9e4\uae34 feature \uce5c\uad6c\ub4e4\ub9cc \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\ubd84\uc11d\uc5d0 \ub123\uace0\uc790 \ud55c\ub2e4.\n\nidc_rfe\uc5d4 rfe.support_\ub294 \uc704\uc5d0 \ub098\uc628 \uce5c\uad6c\ub4e4\ucc98\ub7fc 10\uac1c \uc911 \ubf51\ud614\ub294\uc9c0 \ubf51\ud788\uc9c0 \uc54a\uc558\ub294\uc9c0\ub97c True\uc640 False\ub85c \ud45c\ud604\ud55c\ub2e4.\n\nrfe.ranking_\uc740 \uc21c\uc704\ub97c \ub098\ud0c0\ub0b4\uba70, \ubf51\ud78c \uce5c\uad6c\ub4e4\uc740 \ubaa8\ub450 1\ub85c \ud45c\ud604\ub41c\ub2e4.\n\n\uacb0\uad6d \ubf51\uc740 \uce5c\uad6c\ub4e4\uc744 \uc5f4\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \ucf54\ub4dc\ub294 \uc544\ub798\uc640 \uac19\ub2e4.\n~~~\ncols = idc_rfe[idc_rfe[\"rfe_support\"] == True][\"columns\"].tolist()\n~~~\n\uc0c8\ub85c\ub9cc\ub4e0 idc_rfe\ub77c\ub294 \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 rfe_support\uac00 True\uac12\uc744 \uac00\uc9c4\uc560\ub4e4\uc744 columns\uc5d0\uc11c \ub370\ub824\uc640 \ub9ac\uc2a4\ud2b8 \ud615\uc2dd\uc73c\ub85c \ubc14\uafd4\uc900 \uac83\uc774\ub2e4. \n\n\ubaa8\ub450 \uc5b4\ub5a4 \uce5c\uad6c\ub4e4\uc778\uc9c0 \uc2e4\ud589\ud574\ub194\uc11c \uc124\uba85\uacfc \uac19\uc774 \ubcf4\uba74 \uc54c\uae30 \uc26c\uc6b8\ub4ef.","baa9658d":"tel\uc744\/ tel\uc5d0\uc11c\/ tel[\"Totalcarges\"]\uac00 \/notnull()\uc740 \uacb0\uce21\uac12\uc774 \uc544\ub2cc \uce5c\uad6c\ub4e4\ub85c\ub9cc \ubf51\uc544\ub77c. \ub77c\ub294 \ub73b\uc784.\n\ub300\uad04\ud638\ub098 \uc810\uc774 \uc788\uc73c\uba74 \uc548\uc73c\ub85c \ub4e4\uc5b4\uac04\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \ud3b8\ud560\uac70\uc784.","4f875b0b":"StandardScaler\ub294 \uc2a4\ucf00\uc77c\ub9c1\uc744 \ud574\uc8fc\uae30 \uc704\ud55c \ub3c4\uad6c\ub85c, \uadf8\ub0e5 \ub450\uba74 \uc22b\uc790\uac00 \ub108\ubb34 \ucee4\uc9c0\ub2c8 \uc774\ub97c \uc880 \ub354 \uc791\uac8c \ud45c\ud604\ud558\uc5ec \ub9e4\uc6b0 \ud070 \uc22b\uc790\uc5d0 \uac00\uc911\uce58\ub97c \uc904\uc5ec\uc8fc\uace0 \uc11c\ub85c \ub2e4\ub978 \ub370\uc774\ud130\ub97c \ube44\uad50\ud558\uae30 \uc27d\uac8c \ud574\uc90c.\n\n\ud45c\uc900\ud654\uc758 \uc2dd\uc740 z=(x-u)\/s\ub85c, (\uac12-\ud3c9\uade0)\/\ud45c\uc900\ud3b8\ucc28 \uc774\ub2e4.","d8f18acd":"lab\uc774\ub780 \uac1d\uccb4\uc5d0 tel['Churn']\/ value_counts()\ub294 \ud56d\ubaa9\ubcc4 \uac2f\uc218\ub97c \uc138\uc5b4\uc90c. yes \uba87\uac1c, no \uba87\uac1c \uc774\ub7f0\uc2dd.\n\nkeys\ub294 \uc5ec\uae30\uc5d0 \uc788\ub294 yes\uc640 no\ub97c \ubf51\uc544\uc90c. tolist\ub294 \uc774\uac78 \ub9ac\uc2a4\ud2b8 \ud615\uc2dd\uc73c\ub85c \ub098\uc5f4\ud574\uc8fc\ub294\uac83 ['No','Yes']\uc774\ub7f0\uc2dd","a76f1578":"\uc0b4\ud3b4\ubcf4\uc790\uba74, \uac01 \uc5f4\ub9c8\ub2e4 0\uacfc 1\ub85c \ud45c\uc2dc\ub418\uc5b4 \uc788\ub294\uac74 \uc54c \uc218 \uc788\ub294\ub370, \uc774\uac78 sum\ud568\uc218\ub97c \ucde8\ud574\uc918\uc11c \uac01 \uc5f4\uc758 \ud569\uc744 \uad6c\ud55c\uac83. \uc989 1\uc758 \uac2f\uc218\ub97c \uad6c\ud55c \uac83\uacfc \uac19\ub2e4.","88714b29":"select\ub780 \uac1d\uccb4\uc5d0 SelectKBest\ub780 \ud568\uc218\ub97c \uc4f4\ub2e4. score_func\uc740 \uc810\uc218\ub97c \ub9e4\uae38\ub54c \uc5b4\ub5a4 \uce5c\uad6c\ub97c \uc0ac\uc6a9\ud560 \uac74\uc9c0\uace0, \uc5ec\uae30\uc120 chi2\ub85c \uce74\uc774\uc81c\uacf1\uc744 \uc37c\ub2e4. k=3\uc740 \uc774\ub4e4 \uc911 \ub192\uc740 \uac83 \uc138\uac1c\ub97c \ubf51\uc544\ub0b4\uaca0\ub2e4\ub294 \ub73b.\n\nfit\uc73c\ub85c \uc801\uc6a9\uc2dc\ucf1c\uc900\ub2e4.\n","8a85b59e":"head\ub294 \ub370\uc774\ud130 \uc0c1\ub2e8\uc758 \uce5c\uad6c\ub4e4\uc744 \ub744\uc6b8 \uc218 \uc788\ub2e4. \uad04\ud638\uc548\uc758 \uc22b\uc790\ub97c \ub123\uc73c\uba74 \uc22b\uc790\ub9cc\ud07c \ubd88\ub7ec\uc62c \uc218 \uc788\uc74c. \uae30\ubcf8\uc73c\ub85c 5\uac1c\n","2c9787c3":"\uc598 \ubb50\ub0d0??","015b977f":"\uc804\uccb4 \ub370\uc774\ud130 \uc790\ub8cc\ub97c train, test\uc14b\uc73c\ub85c \ub098\ub20c\uac70\uc784. \uc65c \uc774\ub7f0\uc9d3\uc744 \ud558\ub0d0\uba74 \uc6b0\ub9ac\uac00 \ubaa9\ud45c\ub85c \ud558\ub294\uac74 \uace0\uac1d\uc774\ud0c8\uc744 \uc608\uce21\ud558\ub294 \uac83\uc778\ub370, \n\n\uc5b4\ub5a4 \uce5c\uad6c\ub4e4\uc774 \uace0\uac1d\uc774\ud0c8\uc744 \ud558\ub294\uc9c0 \ubbf8\ub9ac \uc54c\uace0 \ubd84\ub958\ub97c \ud558\uba74 \ub9e4\uc6b0 \uc26c\uc6b8 \uac83. \ub2f5\uc744 \uc54c\uace0 \ubb38\uc81c\ub97c \ud478\ub294 \uac83\uc774\ub098 \uac19\uc740 \uac83.\n\n\uadf8\ub798\uc11c \uc6b0\ub9ac\ub294 train\uc14b\uacfc test\uc14b\uc73c\ub85c \ub098\ub220 train\uce5c\uad6c\ub294 \uace0\uac1d\uc774\ud0c8 \uc608\uce21\uc744 \ud559\uc2b5\uc744 \uc2dc\ud0a4\ub294 \uc6a9\ub3c4(\uacf5\ubd80\uc6a9)\uc774\uace0 test\uc14b\uc740 \ube14\ub77c\uc778\ub4dc\ub85c \uac00\uc9c0\uace0 \uc788\ub2e4\uac00 \uc2dc\ud5d8\uc744 \uce58\ub294 \uc6a9\ub3c4.\n\n\uc704 \ucf54\ub4dc\ub97c \ubcf4\uba74 train, test\ub780 \uac1d\uccb4 \uc548\uc5d0 train_test_split\uc774\ub780 \ud568\uc218\ub97c \uc368\uc11c \ntel<- \ucc98\uc74c\uc5d0 \uc9c0\uc815\ud574\ub193\uc740 \uc804\uccb4 \ub370\uc774\ud130\ub97c \uc598\uae30\ud55c\ub2e4.\n\ntest_size=.25<- \ud14c\uc2a4\ud2b8\uc14b\uc758 \ud06c\uae30\uc784. \uadf8\ub7ec\uba74 train\uc14b\uc740 \uc790\ub3d9\uc73c\ub85c \ub098\ub268. 25%\ub97c \ud14c\uc2a4\ud2b8\uc14b\uc73c\ub85c, 75%\ub97c train\uc14b\uc73c\ub85c \uac00\uc838\uac14\ub2e4. train_size\ub85c \ub098\ub220\ub3c4 \ub428. \n\nrandom_state\ub294 \uc774 train_test_split\uc774\ub780 \uce5c\uad6c\ub294 \ub79c\ub364\ud558\uac8c \uc804\uccb4\ub370\uc774\ud130\ub97c \ub098\ub204\ub294\uac74\ub370 \ubc88\ud638\ub97c \uc785\ub825\ud574\uc918\uc11c \ud558\ub098\uc758 \uc0c1\ud669\uc744 \uc9c0\uc815\ud574\uc92c\ub2e4.\n\n\uc774\uac78 \uc9c0\uc815\ud574\uc8fc\uc9c0 \uc54a\uc73c\uba74 \ub9e4\ubc88 train_test \uc14b\uc774 \ubc14\ub00c\uc5b4\uc11c \uc815\ud655\ub3c4\ub098 \uc5ec\ub7ec \uc218\uce58\ub4e4\uc774 \ub9e4\ubc88 \ub2e4\ub974\uac8c \ub098\uc628\ub2e4.\n\n","8dbf222b":"\uac11\uc790\uae30 \ub2e4\uc2dc \ub370\uc774\ud130\ub97c \ub9cc\uc9c0\ub2e4\uac00 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\ub824\uace0 \uc634.\n\ndf_tel_og\uc5d0\uc11c\uc758 \uce7c\ub7fc\uc744 Id\ube7c\uace0 \ub2e4 \ub123\uc5b4\uc11c describe\ud574\uc8fc\uace0, transpose()\uac00 \ubb54\uac00 \ud588\ub354\ub2c8 \uc5f4\uacfc \ud589\uc758 \uc704\uce58\ub97c \ub4a4\ubc14\uafc8.\n\nreset_index()\ub85c \ubcf4\uae30 \uae54\ub054\ud558\uac8c \ud574\uc90c.","53ca199c":"pca_data\uc5d0\ub2e4\uac00 DataFrame\ud615\uc2dd\uc73c\ub85c \uc704\uc758 principa_components\ub97c \ub123\uc5b4\uc8fc\uace0 \uc5f4\uc744 PC1, PC2\ub77c \ud55c\ub2e4. \n\n","4199e446":"\uadf8\ub0e5 Churn\uc744 \uc5c6\uc560\uc8fc\uae30 \uc704\ud55c \uc791\uc5c5\uc778\ub370, \uc65c \uc800\ub807\uac8c \uc801\uc5c8\ub294\uc9c0 \ubaa8\ub974\uaca0\uc74c.\nfeature\ub4e4 \uc911\uc5d0 Churn\uc774 \uc544\ub2cc \uc560\ub4e4\ub9cc \ub0a8\uaca8\ub193\uc74c.\n\n\ub098\uba38\uc9c4 \uacc4\uc18d\ud558\ub358 trace\uc640 layout, \uadf8\ub9bc\uc73c\ub85c \ud615\uc0c1\ud654 \ud574\uc8fc\ub294 \uc791\uc5c5\uc774\ub2c8 pass\n\n#5. Model Building\n##5.1. Baseline Model"}}