{"cell_type":{"16d540b3":"code","3ab80ad5":"code","b60733b5":"code","78775ebd":"code","f9064f4b":"code","a88456b6":"code","520b6942":"code","a1cdd123":"code","c31366b0":"code","89f2e6e6":"code","b5e4e9df":"code","aca9f0e7":"code","dd1b17a7":"code","a10f908d":"markdown","a6a5867a":"markdown","ca8b9b01":"markdown","50b358b9":"markdown","07eb861b":"markdown","09c6d37f":"markdown","33245c78":"markdown","74a3b004":"markdown","56605a1d":"markdown","2f117753":"markdown","0c457cb2":"markdown"},"source":{"16d540b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ab80ad5":"df = pd.read_csv('..\/input\/focusing-on-mobile-app-or-website\/Ecommerce Customers')\ndf.head()","b60733b5":"df.info()\n# Since we do not have any empty data in our datasets, we can move on to analyse our data. ","78775ebd":"df.describe()","f9064f4b":"df_copy = df.drop(['Email', 'Address', 'Avatar'], axis = 1).copy()\ndf_copy.head()","a88456b6":"# Looking at how the data correlate to one another \ndf_copy.corr()","520b6942":"# Importing matplotlib and seaborn which I will use to plot the data\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n# Correlation plot of the data\nsns.heatmap(df_copy.corr(), annot = True);","a1cdd123":"\nsns.pairplot(df_copy)\nplt.show;","c31366b0":"\nX = df_copy.drop(['Yearly Amount Spent'], axis = 1)\ny = df_copy['Yearly Amount Spent']\nprint(X.shape, y.shape)","89f2e6e6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X, y, random_state = 0)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","b5e4e9df":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\n# Fitting the machine learning model\nlr_fit = lr.fit(X_train, y_train)","aca9f0e7":"lr_predict = lr.predict(X_test)\nlr_predict","dd1b17a7":"print(lr.score(X_train, y_train))\nprint(lr.score(X_test, y_test))","a10f908d":"# Pairplot of the datasets","a6a5867a":"# Checking the description of the data","ca8b9b01":"# Checking the data info ","50b358b9":"# Creating a copy of the data \n# Dropping parts of the data that will not be needed for the analysis ","07eb861b":"# Building the machine learning model","09c6d37f":"# Splitting the datasets into training and test data","33245c78":"# Predicting the dependent variable using only the datasets from the independent variables","74a3b004":"# With an R squared score of 98.51% it can be assumed that the model can be conveniently used to predict the yearly amount spent by the users\/members of the app","56605a1d":"# Reading the datasets ","2f117753":"# Comparing the model predicted values with the original value to see how well the model performed","0c457cb2":"# Identifying the dependent variable and the independent variables"}}