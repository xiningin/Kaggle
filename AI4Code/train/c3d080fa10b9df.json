{"cell_type":{"636d10db":"code","10eb0436":"code","060233e4":"code","03d044c1":"code","4e871345":"code","4ff77a4f":"code","b90e1b0b":"code","0f70d440":"code","44bad753":"code","abdda1e0":"code","e79a3bd2":"code","af93dd8b":"code","f0650411":"code","3acba037":"code","124d711f":"code","b22eb827":"code","40590c9b":"markdown","29cd530b":"markdown","2d52e3e7":"markdown","126cfd99":"markdown","1896e204":"markdown","3c98e009":"markdown"},"source":{"636d10db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom nltk.stem import PorterStemmer\nfrom sklearn.ensemble import AdaBoostRegressor\nimport numpy as np # linear algebra\nfrom sklearn.cluster import KMeans\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom wordcloud import WordCloud,STOPWORDS\nimport matplotlib.pyplot as plt\nimport nltk\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10eb0436":"df = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/train.csv\")","060233e4":"df.columns","03d044c1":"df.sample(n = 10)","4e871345":"df.isnull().sum()","4ff77a4f":"df = df.drop([\"url_legal\",'license','id','excerpt'],axis = 1)","b90e1b0b":"\ndf.head()","0f70d440":"kmeans = KMeans(n_clusters = 4).fit(df)\ndf['kmeans'] = kmeans.predict(df)\nx = df.drop(\"target\",axis = 1)\ny = df['target']","44bad753":"X_train,X_test,  y_train,y_test = train_test_split(\n    x, y, test_size=0.3, random_state=42)\n","abdda1e0":"list1 = [50,60,70,80,90,100,200,300,400]\nfor i in list1:\n    print(\"C = \",i)\n    neigh =  RandomForestRegressor(n_estimators = i)\n    neigh.fit(X_train, y_train)\n    pred_train = list(neigh.predict(X_train))\n    pred_test  = list(neigh.predict(X_test))\n\n    # mean square for train data\n    y_train=list(y_train)\n    act = mean_squared_error(y_train,pred_train)\n    #mean square for test data\n    acs = mean_squared_error(y_test,pred_test)    \n    print(f\"Accuracy for train data {act}\")\n    print(f\"Accuracy for test data {acs}\")    ","e79a3bd2":"list1 = [0.001,0.01,0.1,1,10,100,1000]\nfor i in list1:\n    print(\"C = \",i)\n    neigh =  SVR(C = i)\n    neigh.fit(X_train, y_train)\n    pred_train = list(neigh.predict(X_train))\n    pred_test  = list(neigh.predict(X_test))\n\n    # mean square for train data\n    y_train=list(y_train)\n    act = mean_squared_error(y_train,pred_train)\n    #mean square for test data\n    acs = mean_squared_error(y_test,pred_test)    \n    print(f\"Accuracy for train data {act}\")\n    print(f\"Accuracy for test data {acs}\")    ","af93dd8b":"list1 = [0.001,0.01,0.1,1,10,100,1000]\nfor i in list1:\n    print(\"C = \",i)\n    neigh =  SVR(C = i)\n    neigh.fit(X_train, y_train)\n    pred_train = list(neigh.predict(X_train))\n    pred_test  = list(neigh.predict(X_test))\n\n    # mean square for train data\n    y_train=list(y_train)\n    act = mean_squared_error(y_train,pred_train)\n    #mean square for test data\n    acs = mean_squared_error(y_test,pred_test)    \n    print(f\"Accuracy for train data {act}\")\n    print(f\"Accuracy for test data {acs}\")    ","f0650411":"\nfor i in range(5,30,2):\n    print(\"k = \",i)\n    neigh =  KNeighborsRegressor(n_neighbors = i)\n    neigh.fit(X_train, y_train)\n    pred_train = list(neigh.predict(X_train))\n    pred_test  = list(neigh.predict(X_test))\n\n    # mean square for train data\n    y_train=list(y_train)\n    act = mean_squared_error(y_train,pred_train)\n    #mean square for test data\n    acs = mean_squared_error(y_test,pred_test)    \n    print(f\"Accuracy for train data {act}\")\n    print(f\"Accuracy for test data {acs}\")    ","3acba037":"list1 = [50,60,70,80,90,100,200,300,400]\nfor i in list1:\n    print(\"C = \",i)\n    neigh =  AdaBoostRegressor(n_estimators = i)\n    neigh.fit(X_train, y_train)\n    pred_train = list(neigh.predict(X_train))\n    pred_test  = list(neigh.predict(X_test))\n\n    # mean square for train data\n    y_train=list(y_train)\n    act = mean_squared_error(y_train,pred_train)\n    #mean square for test data\n    acs = mean_squared_error(y_test,pred_test)    \n    print(f\"Accuracy for train data {act}\")\n    print(f\"Accuracy for test data {acs}\")    ","124d711f":"neigh =  LinearRegression()\nneigh.fit(X_train, y_train)\npred_train = list(neigh.predict(X_train))\npred_test  = list(neigh.predict(X_test))\n\n# mean square for train data\ny_train=list(y_train)\nact = mean_squared_error(y_train,pred_train)\n#mean square for test data\nacs = mean_squared_error(y_test,pred_test)    \nprint(f\"Accuracy for train data {act}\")\nprint(f\"Accuracy for test data {acs}\")    ","b22eb827":"\ntest =pd.DataFrame()\ntest['standard_error'] = df['standard_error']\n\ntest['kmeans'] = df['kmeans']\n\nneigh =  SVR(C = 100)\nneigh.fit(X_train, y_train)\npred_train = list(neigh.predict(X_train))\npred_test  = list(neigh.predict(X_test))\n\n\ntest['target'] = pred_train+pred_test\ntest.to_csv(\"submission.csv\",index = False)","40590c9b":"# ***watching some data***","29cd530b":"# ***What are the columns?***","2d52e3e7":"# ***train_test_split***","126cfd99":"# ***random forest***","1896e204":"# ***dropping data***","3c98e009":"# ***Reading the data***"}}