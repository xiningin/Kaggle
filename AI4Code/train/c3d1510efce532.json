{"cell_type":{"a70b341b":"code","472892ce":"code","24b22711":"code","cf825286":"code","ad0addc8":"code","4e6a4002":"code","6832f86a":"code","2a3e9e79":"code","8c393dff":"code","19ce11e6":"code","7a6aecf3":"code","4e2b6a38":"code","4d2945c3":"code","ef88fffc":"code","791f785f":"markdown","a1b3ae6a":"markdown","36866b86":"markdown","3b804b4b":"markdown"},"source":{"a70b341b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nAvocado = pd.read_csv('..\/input\/avocado.csv')\n\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n#print(os.listdir(\"..\/input\/avocado.csv\"))\n\n# Any results you write to the current directory are saved as output.","472892ce":"Avocado.head()","24b22711":"Avocado.info()","cf825286":"Avocado.describe()","ad0addc8":"sns.heatmap(Avocado.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","4e6a4002":"regions = Avocado['region'].unique()\ntot_vol_by_region = {}\nfor region in regions:\n    if region != 'TotalUS':\n        avg_vol = sum(Avocado[Avocado['region']==region]['Total Volume'])\/list(Avocado['region']==region).count(True)\n        tot_vol_by_region[region] = avg_vol \ntot_vol_by_region\n\nAvg_vol = pd.DataFrame({'Region':list(tot_vol_by_region),'avg_vol':list(tot_vol_by_region.values())})\nAvg_vol.sort_values(by = 'avg_vol',inplace = True,ascending=False)","6832f86a":"plt.figure(figsize=(12,10))\nsns.barplot(y= 'avg_vol',x='Region',data=Avg_vol,palette='pastel')\nplt.tight_layout()\nplt.xticks(rotation='vertical')\nplt.xlabel('Region',{'fontsize' : 'large'})\nplt.ylabel('Average Volume',{'fontsize':'large'})\nplt.title(\"Average Volume in Each Region\",{'fontsize':20})","2a3e9e79":"regions = Avocado['region'].unique()\navg_price_by_region = {}\nfor region in regions:\n    if region != 'TotalUS':\n        avg_price = sum(Avocado[Avocado['region']==region]['AveragePrice'])\/list(Avocado['region']==region).count(True)\n        avg_price_by_region[region] = avg_price #.append({region: avg_vol})\navg_price_by_region\n\nAvg_price = pd.DataFrame({'Region':list(avg_price_by_region.keys()),'avg_price':list(avg_price_by_region.values())})#,columns=['a','b'])\nAvg_price.sort_values(by = 'avg_price',inplace = True,ascending=False)","8c393dff":"plt.figure(figsize=(12,10))\nsns.barplot(y= 'avg_price',x='Region',data=Avg_price,palette='Set2')\nplt.xticks(rotation='vertical')\nplt.xlabel('Region',{'fontsize' : 'large'})\nplt.ylabel('Average Price',{'fontsize':'large'})\nplt.title(\"Average Price in Each Region\",{'fontsize':20})","19ce11e6":"plt.figure(figsize=(12,10))\nsns.set_style('whitegrid')\nsns.pointplot(x='AveragePrice',y='region',data=Avocado, hue='year',join=False)\nplt.xticks(np.linspace(1,2,5))\nplt.xlabel('Region',{'fontsize' : 'large'})\nplt.ylabel('Average Price',{'fontsize':'large'})\nplt.title(\"Yearly Average Price in Each Region\",{'fontsize':20})","7a6aecf3":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\nimport plotly.plotly as py","4e2b6a38":"import cufflinks as cf\ninit_notebook_mode(connected=True)\ncf.go_offline()","4d2945c3":"trace0 = go.Box(y=Avocado[Avocado['type']=='conventional']['AveragePrice'],name='Converntional')\ntrace1 = go.Box(y=Avocado[Avocado['type']=='organic']['AveragePrice'],name='Organic')\ndata = [trace0, trace1]\nlayout = go.Layout(title = 'Average Price by Type', xaxis = dict(title='Type',titlefont=dict(size=20,color='black'))\n                  , yaxis = dict(title = 'Average Price',titlefont=dict(size=20,color='black')))\n\nfig = go.Figure(data=data,layout=layout)\n#py.iplot(fig)\niplot(fig)","ef88fffc":"New_Dict = {}\nfor region in regions:\n    Avg_Price_by_Type = Avocado[(Avocado['region'] == region) & (Avocado['type']=='organic')]\n    New_Dict[region] = Avg_Price_by_Type['AveragePrice'].mean()\n\nOrganic_region = pd.DataFrame({'Region':list(New_Dict.keys()),'avg_price':list(New_Dict.values())})\n\ntrace0 = go.Scatter(\n    x = Organic_region['Region'],\n    y = Organic_region['avg_price'],\n    name = 'Organic'\n)\n\nNew_Dict1 = {}\nfor region in regions:\n    Avg_Price_by_Type = Avocado[(Avocado['region'] == region) & (Avocado['type']=='conventional')]\n    New_Dict1[region] = Avg_Price_by_Type['AveragePrice'].mean()\n\nCon_region = pd.DataFrame({'Region':list(New_Dict1.keys()),'avg_price':list(New_Dict1.values())})\n    \ntrace1 = go.Scatter(\n    x = Con_region['Region'],\n    y = Con_region['avg_price'],\n    name = 'Conventional'\n)\n\nlayout = go.Layout(title = 'Average Price by Type in Each Region',\n                   xaxis = dict(title='Region',titlefont=dict(size=20,color='black')),\n                   yaxis = dict(title = 'Average Price',titlefont=dict(size=20,color='black')),\n                   )\n\ndata = [trace0,trace1]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)\n\n","791f785f":"After importing the dataset as Avocado, I read the top five rows","a1b3ae6a":"###","36866b86":"This line gives mathematical information about the dataset ","3b804b4b":"Avocado.isnull() returns boolean values of the dataframe. Therefore, if there were any null value in the dataframe, it would return False values and make differences on the heatmap. "}}