{"cell_type":{"6725ddb8":"code","03d4801d":"code","70f3a3c0":"code","dd0c21f9":"code","6e9175c4":"code","9fa6593d":"code","e18e5792":"code","b3f946c8":"code","a77797e8":"code","95d7c21b":"code","fb3ced60":"code","26ac5f61":"markdown","950f5382":"markdown","b10a85db":"markdown","8780dcfc":"markdown","ad819c0c":"markdown","3621e7b5":"markdown","79c5a581":"markdown","9d13da0d":"markdown","ba913b2f":"markdown","bea6efa4":"markdown","77e6c957":"markdown","399c4581":"markdown","c3fd0998":"markdown"},"source":{"6725ddb8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_colwidth', -1)\nimport os","03d4801d":"data=pd.read_csv('..\/input\/widsdatathon2021\/TrainingWiDS2021.csv',index_col=0)\ndata.head()","70f3a3c0":"pd.set_option('display.max_rows', 200)\ndf_dict=pd.read_csv('..\/input\/widsdatathon2021\/DataDictionaryWiDS2021.csv')\ndf_dict\n\n#Checking if all columns in dictionary exist in data\nset(df_dict['Variable Name'])-set(data.columns)\n\n#This appears to be an extra column. Lets remove it from the dictionary.\n\ndf_dict=df_dict[df_dict['Variable Name'].isin(data.columns)]\ndf_dict.shape\n\ndata.shape\n#This is aligned now\n\n# Typecasting variables according to data dictionary\n\n#Notice how the intended Datatype has been given. Let's look at how many variables are there of each type and then typecast accordingly.\n\n\ndf_dict['Data Type'].value_counts()\n\n#Binary variables are interesting. let's see which ones are these\ndf_dict[df_dict['Data Type']=='binary']\n\n#Let's create a new mapping for columns\ndatatypes_dict={\n'numeric':float,\n'binary':int,\n'string':str,\n'integer':int\n}\n\ndf_dict['Data Type_edited']=df_dict['Data Type'].map(datatypes_dict)\ndf_dict['Data Type_edited'].value_counts()\n\n\n#This looks more workable. Now let's create a dictionary and use it to change datatypes of all columns at once.\n\ndatatype_edited_dict=dict(zip(df_dict['Variable Name'],df_dict['Data Type_edited']))\ndatatype_edited_dict\n\ndata=data.fillna(-999).astype(datatype_edited_dict)","dd0c21f9":"((data[data['diabetes_mellitus']==0].mean()-data[data['diabetes_mellitus']==1].mean())\/data[data['diabetes_mellitus']==0].mean()).sort_values(ascending=False)","6e9175c4":"min_feat=[x for x in data.columns if '_min' in x]\nmax_feat=[x for x in data.columns if '_max' in x]","9fa6593d":"len(min_feat)\nlen(max_feat)","e18e5792":"#let's create _diff and ratio values\nfor i in min_feat:\n    a=i\n    b = i.replace('_min','_max')\n#     print(a,b)\n    new_col=(str(i).replace('_min',''))+'_diff'\n    data[new_col]=data[b]-data[a]\n    data[new_col+\"flag\"]=np.where(data[a]!=data[b],1,0)\n    new_col_ratio=(str(i).replace('_min',''))+'_ratio'\n    data[new_col_ratio]=data[b]\/data[a]","b3f946c8":"#seeing new added columns. This increases the feature size to above 300.\ndata.head()","a77797e8":"data['glucose_apache'].describe()","95d7c21b":"#putting it on minimum since on an average glucose levels for a diabetic are higher than a non-diabetic\ndata['d1_glucose_min_flag']=np.where(data['d1_glucose_min']>(120*.0555),1,0)\ndata.groupby(['diabetes_mellitus'])['d1_glucose_min_flag'].mean()","fb3ced60":"data['age_type'] = data.age.fillna(0).apply(lambda x: 10 * (round(int(x)\/10)))\ndata['apache_2_diagnosis_split1'] = np.where(data['apache_2_diagnosis'].isna() , np.nan , data['apache_2_diagnosis'].apply(lambda x : x % 10)  )\ndata['apache_2_diagnosis_type'] = data.apache_2_diagnosis.round(-1).fillna(-100).astype('int32')\ndata['apache_2_diagnosis_x'] = data['apache_2_diagnosis'].astype('str').str.split('.',n=1,expand=True)[0]\ndata['apache_3j_diagnosis_split1'] = np.where(data['apache_3j_diagnosis'].isna() , np.nan , data['apache_3j_diagnosis'].astype('str').str.split('.',n=1,expand=True)[1]  )\ndata['apache_3j_diagnosis_type'] = data.apache_3j_diagnosis.round(-2).fillna(-100).astype('int32')\ndata['apache_3j_diagnosis_x'] = data['apache_3j_diagnosis'].astype('str').str.split('.',n=1,expand=True)[0]\ndata['bmi_type'] = data.bmi.fillna(0).apply(lambda x: 5 * (round(int(x)\/5)))\ndata['comorbidity_score'] = data['aids'].values * 23 + data['cirrhosis'] * 4  + data['hepatic_failure'] * 16 + data['immunosuppression'] * 10 + data['leukemia'] * 10 + data['lymphoma'] * 13 + data['solid_tumor_with_metastasis'] * 11\ndata['comorbidity_score'] = data['comorbidity_score'].fillna(0)\ndata['gcs_sum'] = data['gcs_eyes_apache']+data['gcs_motor_apache']+data['gcs_verbal_apache']\ndata['gcs_sum'] = data['gcs_sum'].fillna(0)\ndata['gcs_sum_type'] = data.gcs_sum.fillna(0).apply(lambda x: 2.5 * (round(int(x)\/2.5))).divide(2.5)\ndata['height_type'] = data.height.fillna(0).apply(lambda x: 5 * (round(int(x)\/5)))\ndata['weight_type'] = data.weight.fillna(0).apply(lambda x: 5 * (round(int(x)\/5)))","26ac5f61":"<h1>Visualizing features that differ most for people diagnosed and not diagnosed<\/h1>","950f5382":"Hi,\nThis is my second notebook in this series. The first one is an exploratory analysis which forms the basis of this notebook here:\nhttps:\/\/www.kaggle.com\/kritidoneria\/beginner-automl-wids21-eda-starter\n\nThe problem statement at hand here is:\n\nThis year's challenge will focus on models to determine whether a patient admitted to an ICU has been diagnosed with a particular type of diabetes, Diabetes Mellitus. **Using data from the first 24 hours of intensive care** , individuals and teams will explore labeled training data for model development.\n\nFeature engineering is what separates Top ranking Kaggle users from the others,among other things. Hence it is importnat to talk to our data in a language that it is intended.\nHere, I shall be creating some features ,from Domain knowledge ( as I have work experience in Healthcare) and using insights from my EDA.I wont be using auto feature generation at this stage.\n\n\n**If you fork it or find this useful, Please upvote the notebook and leave comments**","b10a85db":"# Diabetes Classification\n\n<h2> Type 1 <\/h2>is a chronic condition when the body doesnt produce enough insulin. Diagn\n<h2> Type 2 <\/h2>is a chronic condition that disrupts the way a body uses insulin\n<h2> Type 3 <\/h2>is when blood sugar spikes during pregnancy.","8780dcfc":"<h1> Creating features from min and max<\/h1>\n\nThere are many columns that have min, max values. It indicates the number of times a reading has been taken,but we can use these to create our own features.\nThe difference gives us a range,and the ratio gives us the jump.\nIn healthcare,measurements are often taken more than once for precision, so I'll also create flags if the measurement is taken more than once.","ad819c0c":"<h1> Creating flags for High values of certain markers <\/h1>\n\nA quick Google search shows People without diabetes rarely have blood sugar levels over 140 mg\/dL after a meal, unless it\u2019s really large. Now blood sugar tests are measures as fasting and after meals,hence the range becomes important.\n\n*Remember while dealing with healthcare data, UNITS ARE IMPORTANT!!*\n\n(1 mg\/dL = 0.0555 mmol\/L)","3621e7b5":"Similar flags can be created for creatinin and albumin,two proteins which are widely used in kidney disease analysis and Diabetes is one of the leading causes of Kidney disease.","79c5a581":"# Reading the data dictionary and typecasting the data accordingly","9d13da0d":"<div align=\"center\">\n    <h1> Diabetes Mellitus Prediction <\/h1>\n<\/div>","ba913b2f":"Hello. Here, I'll use some features created in an awesome notebook I came across (mentioned in references)","bea6efa4":"# Reading the Data","77e6c957":"# References\n1. https:\/\/www.kaggle.com\/kritidoneria\/beginner-automl-wids21-eda-starter\n2. https:\/\/www.kaggle.com\/learn\/feature-engineering\n3. https:\/\/www.endocrineweb.com\/conditions\/type-1-diabetes\/type-1-diabetes#:~:text=The%20primary%20screening%20test%20for,hemoglobin%20test%2C%20or%20A1C%20test.\n4. https:\/\/www.kaggle.com\/muhammadmelsherbini\/jane-street-extensive-eda-pca-starter#PCA-&-Clustering\n5. https:\/\/www.webmd.com\/diabetes\/guide\/diabetes-hyperglycemia#:~:text=High%20blood%20sugar%2C%20or%20hyperglycemia,for%20at%20least%208%20hours.\n6. https:\/\/www.kaggle.com\/siavrez\/2020fatures","399c4581":"# Next steps\n\n**The next steps are selecting features from the ones generated above.\nI will update this notebook soon with the same.**","c3fd0998":"# THANKS!!"}}