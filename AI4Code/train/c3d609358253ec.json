{"cell_type":{"b9db214b":"code","3258f95e":"code","c4143a8a":"code","1565e02d":"code","552cad71":"code","8be65959":"code","f5815fe5":"code","8339413a":"code","6034462b":"code","84817cd0":"code","e286aadb":"code","56fe8a72":"code","03f40ac0":"code","da9ca799":"code","01da3d03":"code","3a7a8c27":"code","c0b65b60":"code","1ea55272":"code","f865262b":"code","fd428c61":"code","ba9b4b21":"code","e2e89d89":"code","1809b6a6":"code","ef8db033":"markdown","b429a5f5":"markdown","374bde7c":"markdown","c6ed7e95":"markdown","b5ba3a38":"markdown","b4473142":"markdown","e45476b4":"markdown","f4125e20":"markdown","3a770b7b":"markdown","5fce64fb":"markdown","5c02e294":"markdown","b61d7909":"markdown","432d0f77":"markdown","3dfee45b":"markdown","d1769e37":"markdown"},"source":{"b9db214b":"import pandas as pd\nimport os\nimport xml.etree.ElementTree as Xet\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn import preprocessing\n%matplotlib inline","3258f95e":"dataset_path = '\/kaggle\/input\/car-crashes-severity-prediction\/'\n\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\ndf_test = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\n\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\n\ndf.head()","c4143a8a":"df.drop(columns='ID').describe()","1565e02d":"cat_list = [\"Crossing\", \"Junction\", \"Railway\", \"Stop\", \"Amenity\"]\ndf[cat_list] = df[cat_list].astype(int)\ndf_test[cat_list] = df_test[cat_list].astype(int)\ndf.head()","552cad71":"df = pd.concat([df, pd.DataFrame(df[\"timestamp\"].str.split(\" \").tolist(), columns=[\"Date\", \"Time\"])], axis=1)\ndf = df.drop(columns=\"timestamp\")\n\ndf = df.drop(columns=[\"Bump\", \"Give_Way\", \"No_Exit\", \"Roundabout\"])\ndf.head()\n\ndf_test = pd.concat([df_test, pd.DataFrame(df_test[\"timestamp\"].str.split(\" \").tolist(), columns=[\"Date\", \"Time\"])], axis=1)\ndf_test = df_test.drop(columns=\"timestamp\")\n\ndf_test = df_test.drop(columns=[\"Bump\", \"Give_Way\", \"No_Exit\", \"Roundabout\"])\ndf.head()","8be65959":"df[\"Hour\"] = [int(i[0]) for i in df[\"Time\"].str.split(\":\").tolist()]\ndf_test[\"Hour\"] = [int(i[0]) for i in df_test[\"Time\"].str.split(\":\").tolist()]\n\ndf.head()","f5815fe5":"def Pad(o, padLen):\n    if len(o) < padLen:\n        o = '0' * (padLen - len(o)) + o\n    return o","8339413a":"weather_df = pd.read_csv(os.path.join(dataset_path, 'weather-sfcsv.csv'))\n\nprint(\"The shape of the dataset is {}.\\n\\n\".format(weather_df.shape))\n\nweather_df[[\"Year\", \"Month\", \"Day\"]] = weather_df[[\"Year\", \"Month\", \"Day\"]].astype(str)\nweather_df[\"Date\"] = weather_df[\"Year\"] + \"-\" + weather_df[\"Month\"].map(lambda x: Pad(x, 2)) + \"-\" + weather_df[\"Day\"].map(lambda x: Pad(x, 2))\n\nweather_df = weather_df.drop_duplicates(subset=[\"Year\", \"Day\", \"Month\", \"Hour\"])\nweather_df = weather_df.drop(columns=[\"Selected\"])\nweather_df = weather_df.drop(columns=[\"Precipitation(in)\"])\nweather_df = weather_df.drop(columns=\"Wind_Chill(F)\")\n\nweather_df = weather_df.drop(columns=[\"Year\", \"Temperature(F)\", \"Humidity(%)\"])\n\nweather_df[\"Wind_Speed(mph)\"] = weather_df['Wind_Speed(mph)'].fillna(weather_df['Wind_Speed(mph)'].median())\n\nweather_df[\"weather\"] = weather_df[\"Weather_Condition\"].astype(\"category\").cat.codes * 100 \n\nweather_df.head()","6034462b":"df = pd.merge(df, weather_df, on=[\"Date\", \"Hour\"], how=\"left\")\ndf = df.dropna()\n\ndf_test = pd.merge(df_test, weather_df, on=[\"Date\", \"Hour\"], how=\"left\")\ndf_test = df_test.dropna()\ndf.shape","84817cd0":"df[\"Side\"] = (df[\"Side\"] == \"R\").astype(int)\ndf_test[\"Side\"] = (df_test[\"Side\"] == \"R\").astype(int)\n\ndf.head()","e286aadb":"df[\"weekday\"] = pd.to_datetime(df[\"Date\"]).dt.weekday\ndf_test[\"weekday\"] = pd.to_datetime(df_test[\"Date\"]).dt.weekday\n\ndf.head()","56fe8a72":"cols = [\"Date\", \"description\"]\nrows = []\n  \n# Parsing the XML file\nxmlparse = Xet.parse(os.path.join(dataset_path, 'holidays.xml'))\nroot = xmlparse.getroot()\nfor i in root:\n    date = i.find(\"date\").text\n    description = i.find(\"description\").text\n  \n    rows.append({\"Date\": date,\n                 \"description\": description})\n  \nholidays_df = pd.DataFrame(rows, columns=cols)","03f40ac0":"holidays_df[\"desc_encoded\"] = holidays_df[\"description\"].astype(\"category\").cat.codes + 1\nholidays_df = holidays_df.drop(columns=\"description\")\nholidays_df.head()","da9ca799":"df[\"is_weekend\"] = (df[\"weekday\"] == 5) | (df[\"weekday\"] == 6)\ndf.head()\nprint(df[\"is_weekend\"].sum())\n\ndf = pd.merge(df, holidays_df, on=\"Date\", how=\"left\")\ndf = df.fillna(0)\ndf[\"is_weekend\"] = ((df[\"desc_encoded\"] > 0) | df[\"is_weekend\"]).astype(int)\n\ndf[\"is_weekend\"].sum()\n\ndf_test[\"is_weekend\"] = (df_test[\"weekday\"] == 5) | (df_test[\"weekday\"] == 6)\ndf_test.head()\nprint(df[\"is_weekend\"].sum())\n\ndf_test = pd.merge(df_test, holidays_df, on=\"Date\", how=\"left\")\ndf_test = df_test.fillna(0)\ndf_test[\"is_weekend\"] = ((df_test[\"desc_encoded\"] > 0) | df_test[\"is_weekend\"]).astype(int)\n\ndf_test[\"is_weekend\"].sum()","01da3d03":"# df[\"light_cycle\"] = 1\n# df[\"light_cycle\"] = df[\"Hour\"].replace(list(np.arange(5, 18)), 0)","3a7a8c27":"# def checkInterval(x, groups):\n#     for i in range(len(groups) - 1):\n#         if x < groups[i] and x > groups[i + 1]:\n#             return i\n#     return len(groups) - 2\n\n# lat_std = df[\"Lat\"].std()\n# lat_mean = df[\"Lat\"].mean()\n# ranges = [lat_mean - lat_std*i for i in range(-3, 4, 1)]\n\n# print(ranges)\n\n# df[\"Lat_encoded\"] = df[\"Lat\"].map(lambda x: checkInterval(x, ranges))\n\n# df[\"Lat_encoded\"].head()","c0b65b60":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(df, test_size=0.2, random_state=42, stratify=df[\"Severity\"]) # Try adding `stratify` here\n\nX_train = train_df.drop(columns=['ID', 'Severity', \"Date\", \"Time\", \"Weather_Condition\"])\ny_train = train_df['Severity']\n\nX_val = val_df.drop(columns=['ID', 'Severity', \"Date\", \"Time\", \"Weather_Condition\"])\ny_val = val_df['Severity']\n","1ea55272":"# This cell is used to select the numerical features. IT SHOULD BE REMOVED AS YOU DO YOUR WORK.\n#X_train = X_train[['Lat', 'Lng', 'Distance(mi)']]\n#X_val = X_val[['Lat', 'Lng', 'Distance(mi)']]","f865262b":"from sklearn.ensemble import RandomForestClassifier\n\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=0)\n\n# Train the classifier\nclassifier = classifier.fit(X_train, y_train)","fd428c61":"print(\"The accuracy of the classifier on the validation set is \", (classifier.score(X_val, y_val)))","ba9b4b21":"# test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\n# test_df.head()","e2e89d89":"X_test = df_test.drop(columns=['ID', \"Date\", \"Time\", \"Weather_Condition\"])\n\n# You should update\/remove the next line once you change the features used for training\n# X_test = X_test[['Lat', 'Lng', 'Distance(mi)']]\n\ny_test_predicted = classifier.predict(X_test)\n\ndf_test['Severity'] = y_test_predicted\n\ndf_test.head()","1809b6a6":"df_test[['ID', 'Severity']].to_csv('\/kaggle\/working\/submission.csv', index=False)","ef8db033":"The output shows desciptive statistics for the numerical features, `Lat`, `Lng`, `Distance(mi)`, and `Severity`. I'll use the numerical features to demonstrate how to train the model and make submissions. **However you shouldn't use the numerical features only to make the final submission if you want to make it to the top of the leaderboard.**","b429a5f5":"Well. That's a good start, right? A classifier that predicts all examples' `Severity` as 2 will get around 0.63. You should get better score as you add more features and do better data preprocessing.","374bde7c":"Now let's test our classifier on the validation dataset and see the accuracy.","c6ed7e95":"## Import the libraries\n\nWe'll use `pandas` to load and manipulate the data. Other libraries will be imported in the relevant sections.","b5ba3a38":"## Submission File Generation\n\nWe have built a model and we'd like to submit our predictions on the test set! In order to do that, we'll load the test set, predict the class and save the submission file. \n\nFirst, we'll load the data.","b4473142":"## Data Splitting\n\nNow it's time to split the dataset for the training step. Typically the dataset is split into 3 subsets, namely, the training, validation and test sets. In our case, the test set is already predefined. So we'll split the \"training\" set into training and validation sets with 0.8:0.2 ratio. \n\n*Note: a good way to generate reproducible results is to set the seed to the algorithms that depends on randomization. This is done with the argument `random_state` in the following command* ","e45476b4":"Now we're ready to generate the submission file. The submission file needs the columns `ID` and `Severity` only.","f4125e20":"As pointed out eariler, I'll use the numerical features to train the classifier. **However, you shouldn't use the numerical features only to make the final submission if you want to make it to the top of the leaderboard.** ","3a770b7b":"## You're here! \nWelcome to your first competition in the [ITI's AI Pro training program](https:\/\/ai.iti.gov.eg\/epita\/ai-engineer\/)! We hope you enjoy and learn as much as we did prepairing this competition.\n\n\n## Introduction\n\nIn the competition, it's required to predict the `Severity` of a car crash given info about the crash, e.g., location.\n\nThis is the getting started notebook. Things are kept simple so that it's easier to understand the steps and modify it.\n\nFeel free to `Fork` this notebook and share it with your modifications **OR** use it to create your submissions.\n\n### Prerequisites\nYou should know how to use python and a little bit of Machine Learning. You can apply the techniques you learned in the training program and submit the new solutions! \n\n### Checklist\nYou can participate in this competition the way you perefer. However, I recommend following these steps if this is your first time joining a competition on Kaggle.\n\n* Fork this notebook and run the cells in order.\n* Submit this solution.\n* Make changes to the data processing step as you see fit.\n* Submit the new solutions.\n\n*You can submit up to 5 submissions per day. You can select only one of the submission you make to be considered in the final ranking.*\n\n\nDon't hesitate to leave a comment or contact me if you have any question!","5fce64fb":"## Exploratory Data Analysis\nIn this step, one should load the data and analyze it. However, I'll load the data and do minimal analysis. You are encouraged to do thorough analysis!\n\nLet's load the data using `pandas` and have a look at the generated `DataFrame`.","5c02e294":"The remaining steps is to submit the generated file and are as follows. \n\n1. Press `Save Version` on the upper right corner of this notebook.\n2. Write a `Version Name` of your choice and choose `Save & Run All (Commit)` then click `Save`.\n3. Wait for the saved notebook to finish running the go to the saved notebook.\n4. Scroll down until you see the output files then select the `submission.csv` file and click `Submit`.\n\nNow your submission will be evaluated and your score will be updated on the leaderboard! CONGRATULATIONS!!","b61d7909":"We've got 6407 examples in the dataset with 14 featues, 1 ID, and the `Severity` of the crash.\n\nBy looking at the features and a sample from the data, the features look of numerical and catogerical types. What about some descriptive statistics?","432d0f77":"## Conclusion\n\nIn this notebook, we have demonstrated the essential steps that one should do in order to get \"slightly\" familiar with the data and the submission process. We chose not to go into details in each step to keep the welcoming notebook simple and make a room for improvement.\n\nYou're encourged to `Fork` the notebook, edit it, add your insights and use it to create your submission.","3dfee45b":"Note that the test set has the same features and doesn't have the `Severity` column.\nAt this stage one must **NOT** forget to apply the same processing done on the training set on the features of the test set.\n\nNow we'll add `Severity` column to the test `DataFrame` and add the values of the predicted class to it.\n\n**I'll select the numerical features here as I did in the training set. DO NOT forget to change this step as you change the preprocessing of the training data.**","d1769e37":"## Model Training\n\nLet's train a model with the data! We'll train a Random Forest Classifier to demonstrate the process of making submissions. "}}