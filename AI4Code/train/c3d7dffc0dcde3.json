{"cell_type":{"df031f69":"code","036a1d51":"code","8e49d325":"code","6fac63de":"code","9f870e6c":"code","823d926e":"code","3256b39b":"code","bdad86ac":"code","f691fa0b":"code","b8a19860":"code","6e3f07f8":"code","140a47be":"code","a571431e":"code","4dadc72d":"code","06e2caeb":"code","9d461160":"code","cd7dd1ff":"code","a3b617da":"code","64b700be":"code","e1908c65":"markdown","2926aa10":"markdown","cde19818":"markdown","a9b0af60":"markdown","21d10aad":"markdown","a5726770":"markdown","bb6cb43c":"markdown","85108186":"markdown","00d5a512":"markdown","159af45d":"markdown","1fd6486b":"markdown","3a7508b3":"markdown"},"source":{"df031f69":"# To prevent the annoying warning from scikit learn package\nimport warnings  \nwarnings.filterwarnings('ignore')","036a1d51":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('darkgrid')\ncmap = sns.cm.mako_r\n\n%matplotlib inline","8e49d325":"stroke = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","6fac63de":"stroke.head()","9f870e6c":"stroke.info()","823d926e":"stroke.drop(columns=['id']).describe()","3256b39b":"# Round off Age\nstroke['age'] = stroke['age'].apply(lambda x : round(x))\n\n# BMI to NaN\nstroke['bmi'] = stroke['bmi'].apply(lambda bmi_value: bmi_value if 12 < bmi_value < 60 else np.nan)\n\n# Sorting DataFrame based on Gender then on Age and using Forward Fill-ffill() to fill NaN value for BMI\nstroke.sort_values(['gender', 'age'], inplace=True) \nstroke.reset_index(drop=True, inplace=True)\nstroke['bmi'].ffill(inplace=True)","bdad86ac":"stroke.info()","f691fa0b":"# Checking if Data is balanced\nxs = stroke['stroke'].value_counts().index\nys = stroke['stroke'].value_counts().values\n\nax = sns.barplot(xs, ys)\nax.set_xlabel(\"Stroke\")\nplt.show()","b8a19860":"# Age vs BMI with hue = stroke\nplt.figure(figsize=(12,8))\nax = sns.scatterplot(x=\"bmi\", y=\"age\", alpha=0.4, data=stroke[stroke['stroke'] == 0])\nsns.scatterplot(x=\"bmi\", y=\"age\", alpha=1, data=stroke[stroke['stroke'] == 1], ax=ax)\nplt.show()","6e3f07f8":"# Age vs BMI with hue = stroke\nplt.figure(figsize=(12,8))\nax = sns.scatterplot(x=\"bmi\", y=\"avg_glucose_level\", alpha=0.4, data=stroke[stroke['stroke'] == 0])\nsns.scatterplot(x=\"bmi\", y=\"avg_glucose_level\", alpha=1, data=stroke[stroke['stroke'] == 1], ax=ax)\nplt.show()","140a47be":"# Percentage of People\ndef plot_percent_of_stroke_in_each_category(df, column, axis):\n    x_axis = []\n    y_axis = []\n    \n    unique_values = df[column].unique()\n    \n    for value in unique_values:\n        stroke_yes = len(df[(df[column] == value) & (df['stroke'] == 1)])\n        total = len(df[df[column] == value])\n        percentage = (stroke_yes\/total) * 100\n        x_axis.append(value)\n        y_axis.append(percentage)\n    \n    sns.barplot(x_axis, y_axis, ax=axis)\n    \ncolumns = ['gender', 'hypertension', 'heart_disease', 'ever_married', \n           'work_type', 'Residence_type', 'smoking_status']\n\nfig, axes = plt.subplots(4, 2, figsize=(16, 18))\naxes[3, 1].remove()\n\nplot_percent_of_stroke_in_each_category(stroke, 'gender', axes[0,0])\naxes[0,0].set_xlabel(\"Gender\")\naxes[0,0].set_ylabel(\"Percentage\")\n\nplot_percent_of_stroke_in_each_category(stroke, 'hypertension', axes[0,1])\naxes[0,1].set_xlabel(\"Hypertension\")\n\nplot_percent_of_stroke_in_each_category(stroke, 'heart_disease', axes[1,0])\naxes[1,0].set_xlabel(\"Heart Disease\")\naxes[1,0].set_ylabel(\"Percentage\")\n\nplot_percent_of_stroke_in_each_category(stroke, 'ever_married', axes[1,1])\naxes[1,1].set_xlabel(\"Ever Married\")\n\n\nplot_percent_of_stroke_in_each_category(stroke, 'work_type', axes[2,0])\naxes[2,0].set_xlabel(\"Work Type\")\naxes[2,0].set_ylabel(\"Percentage\")\n\nplot_percent_of_stroke_in_each_category(stroke, 'Residence_type', axes[2,1])\naxes[2,1].set_xlabel(\"Residence Type\")\n\nplot_percent_of_stroke_in_each_category(stroke, 'smoking_status', axes[3,0])\naxes[3,0].set_xlabel(\"Smoking Status\")\naxes[3,0].set_ylabel(\"Percentage\")\n\nplt.show()","a571431e":"#Converting Categorical Data to Numerical\ngender_dict = {'Male': 0, 'Female': 1, 'Other': 2}\never_married_dict = {'No': 0, 'Yes': 1}\nwork_type_dict = {'children': 0, 'Never_worked': 1, 'Govt_job': 2, 'Private': 3, 'Self-employed': 4}\nresidence_type_dict = {'Rural': 0, 'Urban': 1}\nsmoking_status_dict = {'Unknown': 0, 'never smoked': 1, 'formerly smoked':2, 'smokes': 3}\n\nstroke['gender'] = stroke['gender'].map(gender_dict)\nstroke['ever_married'] = stroke['ever_married'].map(ever_married_dict)\nstroke['work_type'] = stroke['work_type'].map(work_type_dict)\nstroke['Residence_type'] = stroke['Residence_type'].map(residence_type_dict)\nstroke['smoking_status'] = stroke['smoking_status'].map(smoking_status_dict)","4dadc72d":"# Splitting into features and value to be predicted\nX = stroke.drop(columns=['id', 'stroke'])\ny = stroke['stroke']","06e2caeb":"fig, (ax1, ax2) = plt.subplots(1, 2)\n\nsns.barplot(x=['0', '1'], y =[sum(y == 0), sum(y == 1)], ax = ax1)\nax1.set_title(\"Before Oversampling\")\nax1.set_xlabel('Stroke')\n\n#Using SMOTE to balance the Data\nfrom imblearn.over_sampling import SMOTE\n\nsm = SMOTE(random_state = 2) \nX, y = sm.fit_resample(X, y) \n\nsns.barplot(x=['0', '1'], y =[sum(y == 0), sum(y == 1)], ax = ax2)\nax2.set_title(\"After Oversampling\")\nax2.set_xlabel('Stroke')\n\nplt.tight_layout()\nplt.show()","9d461160":"# Spliting the Data into Train and Test\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=40)","cd7dd1ff":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report, plot_confusion_matrix\n\npipeline = make_pipeline(StandardScaler(), RandomForestClassifier())\npipeline.fit(X_train, y_train)\nprediction = pipeline.predict(X_test)\n\nprint(f\"Accuracy Score : {round(accuracy_score(y_test, prediction) * 100, 2)}%\")","a3b617da":"print(classification_report(y_test, prediction))","64b700be":"plot_confusion_matrix(pipeline, X_test, y_test, cmap=cmap)\nplt.grid(False)\nplt.show()","e1908c65":"As we can see from the above plot that the Data is not balanced which will result in a bad model. To resolve this issue we can use SMOTE to balance the Data. This is will done before fitting our data to the model.\n\n---","2926aa10":"---\n**1. Importing the necessary libraries**","cde19818":"* # Stroke Prediction","a9b0af60":"From the above <strong>Age vs BMI<\/strong> plot we can clearly see that when people attain an age of <strong>40<\/strong> or greater the chances of getting a stroke increases and after <strong>60+<\/strong> it tends to increase even more. Also, people with a BMI of <strong>25+<\/strong> have shown a higher chances of encountering a stroke. \n\nSo, people with 40+ years and BMI of 25+ have a greater probability of encountering a stroke.\n\n---","21d10aad":"---\n\n**5. Preparing the Data for Prediction**\n\n<ol>\n    <li>Converting the Categorical Columns into Numerical by Mapping each category to an integer value using <strong>map()<\/strong> on pandas series object<\/li><br>\n    <li>As we saw earlier that data is <strong>Imbalanced<\/strong>. To make it balanced we use a technique called as <strong>SMOTE (Synthetic Minority Oversampling Technique)<\/strong>. There are other techniques like NearMiss Algorithm. But I prefer SMOTE. The major difference between SMOTE and NMA is that SMOTE increases number of sample of minority classes by linear interpolation. Whereas the later one randomly eliminates majority class examples. When instances of two different classes are very close to each other.<\/li><br>  \n    <li>Spliting the Data in Training and Testing Samples<\/li>\n<\/ol>","a5726770":"**6. Creating a Model for Stroke Prediction**","bb6cb43c":"---","85108186":"Now we have <strong>Age<\/strong> Column as <em style='color:blue'>int64<\/em> and no missing values in <strong>Bmi<\/strong> Column\n\n---","00d5a512":"**Insights drawn from the above plot with respect to the Stroke Data**\n\n<ol>\n    <li>Both the Genders have arround 5% chance.<\/li><br>\n    <li>People with history of Hypertension and Heart Disease have shown an increased in percentage of Stroke with around 12.5% and 16.5% respectively.<\/li><br>\n    <li>Married\/Divorced people have a 6.5% chance of stroke. No wonder why people these days choose to stay single.<\/li><br>\n    <li>Self Employed people have a higher chance compared to Private and Govt Jobs.<\/li><br>\n    <li>Rural and Urban doesn't show much difference.<\/li><br>\n    <li>For some reason people who once used to smoke have higher chance compared to people who are still smoking. If you have already started smoking, don't stop. JK, do as you wish. <\/li>\n<\/ol>\n\n---","159af45d":"---\n**3. Preprocessing Data before Exploratory Data Analysis**\n<ol>\n    <li>Using <strong>round()<\/strong> to round off Age.<\/li><br>\n    <li>Setting values to <strong>NaN<\/strong> where BMI is less than <strong>12<\/strong> and greater than <strong>60<\/strong>. Found out from google search that these can be considered as outliers<\/li><br>\n    <li>We will sort the DataFrame first based on <strong>Gender<\/strong> then on <strong>Age<\/strong> and use <strong>Forward Filling<\/strong> to fill those missing BMI values<\/li>\n<\/ol>","1fd6486b":"---\n# Thanks a lot for showing your Interest ","3a7508b3":"**2. Importing the Data using Pandas read_csv(). And calling head() and info() on the DataFrame**"}}