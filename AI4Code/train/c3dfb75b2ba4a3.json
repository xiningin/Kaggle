{"cell_type":{"564f5dcc":"code","d162b1b8":"code","51f0844f":"code","27fd1371":"code","4a02bf9f":"code","a339aef9":"code","abc2ebdb":"code","fa06e387":"code","88cc7c78":"code","61c33b4b":"code","b6fa4bba":"code","5bf45d6a":"code","2a4531a2":"code","7589b192":"code","56c9cbd8":"code","e4d0ea77":"code","0cf7e653":"code","3dad3b97":"code","194464ea":"code","1c4d2df7":"code","5ce52d7e":"code","0b6a09f2":"code","f70983a8":"code","d270304c":"code","c9024878":"code","243e4952":"code","8ec82d92":"code","3692c492":"code","cc649dcb":"code","7a797c5f":"markdown","48f34f1c":"markdown","7cdd16e6":"markdown","1f91d529":"markdown","89c769d7":"markdown","0e8027c9":"markdown","737e207e":"markdown","b1fb5e01":"markdown"},"source":{"564f5dcc":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nfrom statsmodels.graphics.mosaicplot import mosaic\n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport time\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d162b1b8":"# import data\nt1 = time.time()\ndf_train = pd.read_csv('..\/input\/contradictory-my-dear-watson\/train.csv')\ndf_test = pd.read_csv('..\/input\/contradictory-my-dear-watson\/test.csv')\nt2 = time.time()\nprint(t2-t1)","51f0844f":"df_train.head()","27fd1371":"print('Dim of training set: ', df_train.shape)\nprint('Dim of test:          ', df_test.shape)","4a02bf9f":"df_train.label.value_counts().plot(kind='bar')\nplt.title('Distribution of labels - Training')\nplt.grid()\nplt.show()","a339aef9":"foo = df_train.language.value_counts()\ndata = {'language':foo.index.to_list(), 'count':foo.values}\ndf_plot = pd.DataFrame(data)\nfig = px.bar(df_plot, x='language', y='count')\nfig.update_layout(title='Languages - Training')\nfig.show()","abc2ebdb":"foo = df_test.language.value_counts()\ndata = {'language':foo.index.to_list(), 'count':foo.values}\ndf_plot = pd.DataFrame(data)\nfig = px.bar(df_plot, x='language', y='count')\nfig.update_layout(title='Languages - Test')\nfig.show()","fa06e387":"# show exampe of text pairs\nmy_index = 20\nprint('Premise:    ', df_train.premise[my_index])\nprint('Hypothesis: ', df_train.hypothesis[my_index])","88cc7c78":"# show another exampe of text pairs (not English)\nmy_index = 2\nprint('Premise:    ', df_train.premise[my_index])\nprint('Hypothesis: ', df_train.hypothesis[my_index])","61c33b4b":"df_train_en = df_train.loc[df_train.language=='English'].copy()\ndf_train_en.shape","b6fa4bba":"# plot wordcloud for premise (training)\ntext = \" \".join(txt for txt in df_train_en.premise)\nstopwords = set(STOPWORDS)\n\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","5bf45d6a":"# plot wordcloud for hypothesis (training)\ntext = \" \".join(txt for txt in df_train_en.hypothesis)\nstopwords = set(STOPWORDS)\n\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","2a4531a2":"df_train_en['premise_len'] = pd.to_numeric(list(map(len, df_train_en.premise)))\ndf_train_en['hypothesis_len'] = pd.to_numeric(list(map(len, df_train_en.hypothesis)))","7589b192":"df_train_en.premise_len.describe()","56c9cbd8":"df_train_en.hypothesis_len.describe()","e4d0ea77":"df_train_en.premise_len.plot(kind='hist')\nplt.title('Length of premise - Training (English)')\nplt.grid()\nplt.show()","0cf7e653":"df_train_en.hypothesis_len.plot(kind='hist')\nplt.title('Length of hypothesis - Training (English)')\nplt.grid()\nplt.show()","3dad3b97":"# interactive scatter plot - display label using color\nfig = px.scatter(x=df_train_en.premise_len, y=df_train_en.hypothesis_len, color=df_train_en.label, opacity=0.5)\nfig.update_layout(title='Compare lengths - Training (English)',\n                  xaxis_title='Length of premise',  \n                  yaxis_title='Length of hypothesis')\nfig.update_traces(marker_coloraxis=None) # hide colorbar\nfig.show()","194464ea":"# smoothed plot using Seaborn\nsns.jointplot(df_train_en.premise_len, df_train_en.hypothesis_len, kind='kde')\nplt.title('Compare lengths - Training (English)')\nplt.grid()","1c4d2df7":"# create some features first\n\ndf_train['premise_len'] = pd.to_numeric(list(map(len, df_train.premise)))\ndf_train['hypothesis_len'] = pd.to_numeric(list(map(len, df_train.hypothesis)))\n\n# same for test set\ndf_test['premise_len'] = pd.to_numeric(list(map(len, df_test.premise)))\ndf_test['hypothesis_len'] = pd.to_numeric(list(map(len, df_test.hypothesis)))\n\n# ratios\ndf_train['len_ratio'] = df_train['hypothesis_len'] \/ df_train['premise_len']\ndf_test['len_ratio'] = df_test['hypothesis_len'] \/ df_test['premise_len']","5ce52d7e":"df_train.len_ratio.plot(kind='hist')\nplt.grid()\nplt.show()","0b6a09f2":"df_test.len_ratio.plot(kind='hist')\nplt.grid()\nplt.show()","f70983a8":"plt.rcParams['figure.figsize']=(20,6)\nmosaic(df_train, ['lang_abv','label'])\nplt.show()","d270304c":"# bin in equal size buckets using quantile based cut\ndf_train['premise_len_binned'] = pd.qcut(df_train.premise_len,q=10)\ndf_train['hypothesis_len_binned'] = pd.qcut(df_train.hypothesis_len,q=10)\n\nplt.rcParams['figure.figsize']=(10,6)\ndf_train.premise_len_binned.value_counts().plot(kind='bar')\nplt.grid()\nplt.show()","c9024878":"plt.rcParams['figure.figsize']=(20,6)\nmosaic(df_train, ['premise_len_binned','label'])\nplt.show()","243e4952":"plt.rcParams['figure.figsize']=(20,6)\nmosaic(df_train, ['hypothesis_len_binned','label'])\nplt.show()","8ec82d92":"# bin in equal size buckets using quantile based cut\ndf_train['len_ratio'] = pd.qcut(df_train.len_ratio,q=10)","3692c492":"plt.rcParams['figure.figsize']=(20,6)\nmosaic(df_train, ['len_ratio','label'])\nplt.show()","cc649dcb":"df_train.to_csv('df_train.csv')\ndf_test.to_csv('df_test.csv')","7a797c5f":"# Check impact of features on target (label)","48f34f1c":"# Some basic explorations including length of texts","7cdd16e6":"# Focus on English texts","1f91d529":"### Analyse length [characters] of texts (English only)","89c769d7":"#### Nicely balanced labels!","0e8027c9":"# Basic explorations","737e207e":"#### Ok, this looks pretty significant: For high ratios (right-most stacked bar) the label 1 is much more likely than for very low ratios (left-most stacked bar).","b1fb5e01":"# Make enhanced data available for download"}}