{"cell_type":{"333d7e65":"code","188cf2d0":"code","734b9310":"code","988cde8a":"code","79eca92e":"code","34913482":"code","1f898225":"code","a51b893e":"code","f2e0e4b1":"code","e25fa683":"code","75d4bb51":"code","b2261f02":"code","5c305257":"code","f40fe705":"code","5b89d757":"code","811eb003":"code","091ba319":"code","928dac24":"code","86e961b9":"code","b58259e9":"code","b4b0247f":"code","5c7e444b":"code","91c6118f":"code","bdb0bb2c":"code","72ec8e20":"code","8760b734":"markdown","b8590fbc":"markdown","ac7bfa4b":"markdown","1864efc1":"markdown","bd108823":"markdown","ff26cb5b":"markdown","532af965":"markdown"},"source":{"333d7e65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","188cf2d0":"x = 10, 20\nprint(x)","734b9310":"x,y = 10, 20\nprint(x)\nprint(y)","988cde8a":"# Please notice * is there with y variable, hence X will take one value and remaining will be there with y\nx, *y = 10, 20, 30,78,99\nprint(x)\nprint(y)","79eca92e":"# Please notice * is there with x variable, hence y will take one value and remaining will be there with x\n*x, y = 10, 20, 30,78,99\nprint(x)\nprint(y)","34913482":"x,*y,z = 10, 20, 30, 40, 50\nprint(x)\nprint(y)\nprint(z)","1f898225":"# Take two dictionaries\n\na = {'first': 1, 'second': 2}\nb = {'third':3, 'forth':4}\n\n#Now merging two these dictionaries\na.update(b)\na","a51b893e":"a","f2e0e4b1":"# Single expression is used to merge two dictionaries and stored in a third dictionary. \n# The single expression is **. This does not affect the other two dictionaries\na = {'first': 1, 'second': 2}\nb = {'third':3, 'forth':4}\n{**a, **b}","e25fa683":"a","75d4bb51":"b","b2261f02":"c = {**a, **b}\nc","5c305257":"# SET in python is unordered collections of unique element\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9] \ntype(data)","f40fe705":"data.append(10)","5b89d757":"data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9] \nfdata = frozenset(data)\ntype(fdata)","811eb003":"# This will not work and give error message\nfdata.append(10)","091ba319":"if x >= 0 and x <= 10:\n    print(x)","928dac24":"if(0 <= x <= 10):\n    print(x)","86e961b9":"def add(x, y):\n    return x + y\nadd(5, 4)","b58259e9":"ladd = lambda x, y : x + y\nladd(5,4)","b4b0247f":"(lambda x, y: x + y)(5, 4)","5c7e444b":"for i in range(-5,6):\n    print(i)","91c6118f":"sorted(range(-5, 6))","bdb0bb2c":"sorted(range(-5, 6),key = lambda x: x ** 2 )","72ec8e20":"[x for x in range(16) if x % 2 == 0]","8760b734":"## Five interesting features in Python, you might have not used :)\n\n### 1. Variable Assignment\n### 2. Merge Two Dictionaries\n### 3. Frozensets\n### 4. Multiple Conditionals\n### 5. Lambda in Python\n\n","b8590fbc":"# Frozensets\n### The frozenset() is an inbuilt function is Python which takes an iterable object as input and makes them immutable.","ac7bfa4b":"# Variable Assignment","1864efc1":"# Lambda in Python","bd108823":"# Thank you, please share your valuable Feedback, comment and Vote.","ff26cb5b":"# Merge Two Dictionaries","532af965":"# Multiple Conditionals"}}