{"cell_type":{"c4c86dfa":"code","cbaeb959":"code","6b0ce00a":"code","5c521f32":"code","60361ed8":"code","de8e4315":"code","82b3d6de":"code","4d9c921e":"code","8b6bb4ac":"code","191dd1fb":"code","f2613241":"code","acb6c95b":"code","6251a7c2":"code","818c44d4":"code","35922e19":"code","031f7b28":"code","9b660d0b":"code","33ad90a7":"code","284f3caa":"code","0718a865":"code","effea8db":"markdown","39f5c2cc":"markdown","daa2f58e":"markdown","17e19b7e":"markdown","c1e96b3a":"markdown","4568e0df":"markdown","2e6d0a55":"markdown","8ac95a07":"markdown","b161a4c9":"markdown","dbfa5e78":"markdown","0dade235":"markdown","a9264cfe":"markdown","1b102dc5":"markdown","aa384e16":"markdown","dc326d94":"markdown"},"source":{"c4c86dfa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cbaeb959":"import pandas as pd\n\ntrain_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()\n","6b0ce00a":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","5c521f32":"train_data.describe()","60361ed8":"train_data.info()","de8e4315":"test_data.info()","82b3d6de":"import matplotlib.pyplot as plt\n\ntrain_data.hist(bins=5, figsize=(20,15))\nplt.show()","4d9c921e":"print(train_data.Sex.value_counts())\nprint()\nprint(train_data.SibSp.value_counts())\nprint()\nprint(train_data.Embarked.value_counts())","8b6bb4ac":"plt.plot(train_data.Sex, train_data.Survived)\nplt.show()","191dd1fb":"female = train_data[train_data.Sex == 'female']\npercent_female_survived = sum(female['Survived']) \/ len(female['Survived'])\nprint(percent_female_survived)\n\nmale = train_data[train_data.Sex == 'male']\npercent_male_survived = sum(male['Survived']) \/ len(male['Survived'])\nprint(percent_male_survived)","f2613241":"female.hist(figsize=(20,15))\nplt.show()","acb6c95b":"male.hist(figsize=(20,15))\nplt.show()","6251a7c2":"corr_matrix = train_data.corr()\nprint(corr_matrix['Survived'].sort_values(ascending=False))","818c44d4":"print('Missing training data:')\nprint(train_data.isna().sum())","35922e19":"print('Missing test data:')\nprint(test_data.isna().sum())","031f7b28":"train_data['Age'] = train_data['Age'].fillna(train_data['Age'].mean())\ntest_data['Age'] = test_data['Age'].fillna(test_data['Age'].mean())\n\ntrain_data.drop(columns=['Ticket', 'Name', 'PassengerId', 'Cabin'], inplace=True)\ntest_data.drop(columns=['Cabin'], inplace=True)\n\ntrain_data['Pclass'] = train_data['Pclass'].apply(str)\ntest_data['Pclass'] = test_data['Pclass'].apply(str)\n\ntrain_data['Embarked'] = train_data['Embarked'].fillna(train_data['Embarked'].mode()[0])\n\ntest_data['Fare'] = test_data['Fare'].fillna(test_data['Fare'].mean())","9b660d0b":"train_data = pd.get_dummies(train_data, columns=['Sex', 'Pclass', 'Embarked'], drop_first=True)\ntest_data = pd.get_dummies(test_data, columns=['Sex', 'Pclass', 'Embarked'], drop_first=True)","33ad90a7":"from sklearn.linear_model import SGDClassifier, LinearRegression \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.metrics import precision_score, accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\n\nX_train, X_test, y_train, y_test  = train_test_split(train_data[['Embarked_S', 'Embarked_Q', 'Pclass_3', 'Pclass_2', 'Sex_male', 'Age', 'Fare']], train_data['Survived'], test_size=0.1, random_state=1111)\n\nmodels = [SGDClassifier(), KNeighborsClassifier(n_neighbors=5), DecisionTreeClassifier()]\ntrain_scores = []\ntest_scores = []\n\nfor model in models:\n    model.fit(X_train, y_train)\n    train_predictions = model.predict(X_train)\n    test_predictions = model.predict(X_test)\n    train_scores.append(accuracy_score(y_train, train_predictions))\n    test_scores.append(accuracy_score(y_test, test_predictions))","284f3caa":"print('Key: [SGD, KNeighbors, DecisionTreeClassifier, LinearRegression]')\nprint(\"Training scores : {}\".format(train_scores))\nprint(\"Testing scores : {}\".format(test_scores))","0718a865":"dtc = DecisionTreeClassifier()\nX_test = test_data[['Embarked_S', 'Embarked_Q', 'Pclass_3', 'Pclass_2', 'Sex_male', 'Age', 'Fare']]\ndtc.fit(X_train, y_train)\npredictions = dtc.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)","effea8db":"Calculating the percentage of female survivors and male survivors to look for a trend.","39f5c2cc":"# Building the models:\n\nThe data is now ready to be trained and entered into a classification machine learning algorithm. I will use 4 different models to find the best method for predicting survival rate. After fitting the data for each model, I will comprise a score that will be used to find the submission model.","daa2f58e":"From the scores above, it can be concluded that DecisionTreeClassifier is the best model to use. ","17e19b7e":"Now, handle the missing data by filling it with the mean for numeric data and the mode for catagorical data. Also, drop the columns that seem unimportant to predicting survival.","c1e96b3a":"Reiterating what I found earier when using .info() to inspect the datasets, below is the number of null data rows in each feature. ","4568e0df":"From this, I can conclude that many more people died than survived on the titanic. In addition, a majority of passengers had a Pclass of 3. Finally, the majority of passengers we in the age range of 20 - 30 years of age.","2e6d0a55":"# Exploratory Data Analysis:\n\nFirst, I inspect common statistics for each feature to look for any trends.","8ac95a07":"Inspecting more common info about the data","b161a4c9":"Now, I will encode the features that are comprised of objects using OneHotEncoding.","dbfa5e78":"From this, I can conclude that there are null rows for the 'Age', 'Cabin', and 'Embarked' features due to having less non-null count from the dataset's max. In addition, it is important to note the Dtypes to know how to operate on each feature.\n\nNext, inspect the test data to find null rows","0dade235":"From this, I can conclude that there are null rows for the 'Age', 'Cabin', and 'Fare' features. This means I will need to handle the null data later along with the training data.\n\nNow, I will plot a histogram to view a bar chart for each feature representing each value on the x axis and the frequency of these values on the y axis.","a9264cfe":"# Loading the data:\n\nFirst, read in the training and test data and inspect the first few rows.","1b102dc5":"Looking for features with strong correlation to surviving","aa384e16":"# Generating the submission data:","dc326d94":"# Evaluating the models:\n\nIn the above code segment, I created the test scores sequentially for each model per the for loop. These scores can be seen below."}}