{"cell_type":{"7f103536":"code","2efac96d":"code","e2aeb664":"code","878cb212":"code","415388c6":"code","8ee28fa5":"code","305c7a45":"code","fa1a26fc":"code","1fa980e7":"code","8c9a005c":"code","36e5e6ff":"code","6c0a1c24":"code","aa5c6a6f":"code","1eefd848":"code","210759e2":"code","06d321ee":"code","c7008c8c":"code","35d8c72b":"code","c1cea525":"code","f5c012b3":"code","4f214bdc":"code","267ba09b":"code","25dcb61f":"code","0b361231":"code","d2c8d7de":"code","b68616b8":"code","ca4f71aa":"code","6905ffab":"code","3beebcfd":"markdown","cb6071c7":"markdown","46eb99c2":"markdown","afda3803":"markdown","16e6f7ce":"markdown","18d76620":"markdown","bf6c00e4":"markdown","e98ac318":"markdown","30307a66":"markdown","bdb2d3ca":"markdown","04c3590e":"markdown","ef84e0a7":"markdown","9d38f612":"markdown","e663ccdf":"markdown","8d80cfca":"markdown","df7732e5":"markdown","27345295":"markdown","861969dd":"markdown","ad719df0":"markdown","88868bf5":"markdown"},"source":{"7f103536":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n# Importing libs\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.dates as mdates\nimport matplotlib.pyplot as plt\nfrom textwrap import wrap\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly as py\nimport plotly.graph_objs as go\nimport os\npy.offline.init_notebook_mode(connected = True)\n#print(os.listdir(\"..\/input\"))\nimport datetime as dt\n\nimport geopandas\nimport matplotlib.colors\nimport pycountry \n\n# formats\n\nbackground_color = '#3B5782'\nother = '#144082'\nCOLOR = 'white'\nplt.rcParams['text.color'] = COLOR\nplt.rcParams['axes.labelcolor'] = COLOR\nplt.rcParams['xtick.color'] = COLOR\nplt.rcParams['ytick.color'] = COLOR\nplt.rcParams[\"font.family\"] = \"monospace\"\n\n# No scientific notations\n# https:\/\/stackoverflow.com\/questions\/21137150\/format-suppress-scientific-notation-from-python-pandas-aggregation-results\npd.options.display.float_format = '{:.2f}'.format\n# Number with comma seperation\npd.options.display.float_format = '{:,}'.format\n\nfrom matplotlib.offsetbox import AnnotationBbox, OffsetImage\ndef offset_png(x, y, path, ax, zoom, offset):\n    '''For adding  .png images to the graph.\n    source: https:\/\/stackoverflow.com\/questions\/61971090\/how-can-i-add-images-to-bars-in-axes-matplotlib'''\n    \n    img = plt.imread(path)\n    im = OffsetImage(img, zoom=zoom)\n    im.image.axes = ax\n    x_offset = offset\n    ab = AnnotationBbox(im, (x, y), xybox=(x_offset, 0), frameon=False,\n                        xycoords='data', boxcoords=\"offset points\", pad=0)\n    ax.add_artist(ab)","2efac96d":"df = pd.read_csv('\/kaggle\/input\/gold-prices\/monthly_csv.csv')\noil = pd.read_csv('\/kaggle\/input\/brent-oil-prices\/BrentOilPrices.csv')\n\n# format date correctly & get month & year\ndf['Date'] = pd.to_datetime(df['Date'], format = '%Y-%m-%d')\ndf['Year'], df['Month'], = df['Date'].dt.year, df['Date'].dt.month\n\noil['Date'] = pd.to_datetime(oil['Date'])\noil['Year'], oil['Month'], = oil['Date'].dt.year, oil['Date'].dt.month\n\n# Get % change (note: defaults to 1 period)\n#https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.pct_change.html\ndf['% Change'] = df['Price'].pct_change()\noil['% Change'] = oil['Price'].pct_change()","e2aeb664":"fig = plt.figure(figsize=(6, 4), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\n\nfor s in [\"right\", \"top\",\"bottom\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n\nfor s in [\"left\",\"bottom\"]:\n    ax0.spines[s].set_color('white')\n    \nax0.tick_params(axis = \"both\", which = \"both\", left=False, bottom=False)\nax0.axes.get_xaxis().set_visible(False)\nax0.axes.get_yaxis().set_visible(False)\n\nax0.text(0.5,0.8,\"Gold\",fontsize=40,color='gold', ha='center')\n\nax0.text(0.5,0.5,\"'Nobody really understands gold prices,\\nand I don\u2019t pretend to understand them either',\\n\\nBen Bernanke\", ha='center')\n\n# Picture\npath='..\/input\/gold-rocket-icon\/free-rocket-icon-1206-thumb.png'\noffset_png(x=0.5, y=0.1, path=path, ax=ax0, zoom=0.23, offset=0)\n\nax0.text(0.5,-0.45,\"is gold a one-way ticket to wealth?\\n\\n\\n\", ha='center')\n\n\nplt.show()","878cb212":"fig = plt.figure(figsize=(10, 4), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\n\nsns.lineplot(x='Year',y='Price',data=df,color='gold', ax=ax0)\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0.set_ylim([0,2000])\nax0.set_xlim(1950,2021)\nax0.set_ylabel(\"Gold Prices\",fontsize=8,loc='top', fontfamily='monospace')\nax0.set_xlabel(\" \",fontsize=8,loc='left', fontfamily='arial')\nax0.tick_params(axis = \"both\", which = \"both\", left=False, bottom=False)\nax0.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nfor s in [\"left\",\"bottom\"]:\n    ax0.spines[s].set_color('white')\n\nax0.axvspan(1950, 1970, facecolor='#09305E',alpha=0.3)\n    \nax0.text(1950, 2100, 'The price of',fontsize=20, fontweight='bold')\nax0.text(1969.5, 2100, 'Gold',color='gold',fontsize=20, fontweight='bold')\n\n# Picture\npath='..\/input\/gold-rocket-icon\/free-rocket-icon-1206-thumb.png'\noffset_png(x=2000, y=1000, path=path, ax=ax0, zoom=0.23, offset=0)\n\n# Ball\nax0.plot(2020,df['Price'].max()-130, 'ko', markersize=7, fillstyle='full',color='gold', markeredgewidth=1.5)\n\nax0.text(1953,400,\n'''\nThe abondonment of the\nBretton Woods system in\nthe 1970s was a turning\npoint''', fontsize=8)\n\nplt.show()","415388c6":"df1970 = df[df['Year']>=1970]\n\nfig = plt.figure(figsize=(10, 4), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\n\nsns.lineplot(x='Year',y='Price',data=df1970,color='gold', ax=ax0)\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0.set_ylim([0,2000])\nax0.set_xlim(1970,2021)\nax0.set_ylabel(\"Gold Prices\",fontsize=8,loc='top', fontfamily='monospace')\nax0.set_xlabel(\" \",fontsize=8,loc='left', fontfamily='arial')\nax0.tick_params(axis = \"both\", which = \"both\", left=False, bottom=False)\nax0.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nfor s in [\"left\",\"bottom\"]:\n    ax0.spines[s].set_color('white')\n\n    \nax0.text(1970, 2100, 'The price of',fontsize=20, fontweight='bold')\nax0.text(1984, 2100, 'Gold',color='gold',fontsize=20, fontweight='bold')\n\n# Ball\nax0.plot(2020,df['Price'].max()-130, 'ko', markersize=7, fillstyle='full',color='gold', markeredgewidth=1.5)\n\n# highlights\n\nax0.axvline(x=1979, ymin=0, ymax=0.5, color='lightgray',linewidth=0.7)\nax0.plot(1979,1000, 'ko', markersize=7, fillstyle='full',color='gold', markeredgewidth=1.5)\nax0.text(1978.5,780,'Iranian Hostage\\ncrisis',ha='right',fontsize=8)\n\n\nax0.axvline(x=2001, ymin=0, ymax=0.74, color='lightgray',linewidth=0.7)\nax0.plot(2001,1500, 'ko', markersize=7, fillstyle='full',color='gold', markeredgewidth=1.5)\nax0.text(2000.5,1280,'September 11th\\n2001',ha='right',fontsize=8)\n\n\nax0.axvline(x=1990, ymin=0, ymax=0.365, color='lightgray',linewidth=0.7)\nax0.plot(1990,750, 'ko', markersize=7, fillstyle='full',color='gold', markeredgewidth=1.5)\nax0.text(1990.5,600,'Iraq invades Iran',ha='left',fontsize=8)\n\n\nplt.show()","8ee28fa5":"year_temp = df1970.groupby('Year')['% Change'].mean().reset_index()\n\nfig = plt.figure(figsize=(10, 4), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nfor s in [\"left\",\"bottom\"]:\n    ax0.spines[s].set_color('white')\n\n# for colouring negatives differently\nyear_temp['positive'] = year_temp['% Change'] > 0\n\nsns.barplot(x='Year',y='% Change',data=year_temp,palette=year_temp['positive'].map({True: 'gold', False: '#FFE44D'}),ec='black',linewidth=0.5,ci=None,ax=ax0)\n    \nax0.set_ylabel(\"Monthy % Change\",fontsize=8,loc='top', fontfamily='monospace')\nax0.set_xlabel(\" \",fontsize=8,loc='left', fontfamily='arial')\nax0.tick_params(axis = \"both\", which = \"both\", left=False, bottom=False)\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0.set_ylim([-0.04,0.08])\nax0.xaxis.set_ticks(np.arange(-1, 55,5))\nax0.set_xlim([-1,49.5])\n\nplt.xticks(rotation=90)\n\n#for bar in ax0.patches:\n #   if bar.get_height() > 0.06:\n  #      bar.set_color('red')    \n   # else:\n    #    bar.set_color('grey')\n\n#highlights\n\nfor i in [9,32]:\n    ax0.patches[i].set_color('white')\n    ax0.patches[i].set_edgecolor('black')  \n    ax0.patches[i].set_linewidth(1)\n\n#ax0.text(14,0.066,'Iraq invades Iran',ha='left',fontsize=8)\n\nplt.annotate('Iraq Invades Iran', xy=(9.5, 0.066), xytext=(14, 0.066),\n             arrowprops=dict(facecolor='steelblue',arrowstyle=\"->\",connectionstyle=\"arc3,rad=.5\",color='white'), fontsize=8,fontfamily='monospace',ha='left', color='white')\n\nplt.annotate('September 11th 2001', xy=(31.5, 0.01), xytext=(24, 0.036),\n             arrowprops=dict(facecolor='steelblue',arrowstyle=\"->\",connectionstyle=\"arc3,rad=.5\",color='white'), fontsize=8,fontfamily='monospace',ha='left', color='white')\n\nax0.text(-1, 0.09, 'The price of',fontsize=20, fontweight='bold')\nax0.text(13, 0.09, 'Gold',color='gold',fontsize=20, fontweight='bold')\n\nplt.show()","305c7a45":"import fbprophet\nfrom fbprophet import Prophet","fa1a26fc":"df_prophet = df1970[['Date', 'Price']]\n# Prophet needs columns named 'ds' & 'y', so I'll make those changes too\ndf_prophet.columns = ['ds','y']","1fa980e7":"split_date = df_prophet.index.max()-36\ntrain_df = df_prophet.loc[df_prophet.index <= split_date].copy()\ntest_df = df_prophet.loc[df_prophet.index > split_date].copy()\ntest_df.set_index('ds',inplace=True)\ntrain_df.set_index('ds',inplace=True)","8c9a005c":"fig = plt.figure(figsize=(10, 4), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\n\nsns.lineplot(ax=ax0, x=train_df.index, y='y', data=train_df,color='lightgray')\nsns.lineplot(ax=ax0, x=test_df.index, y='y', data=test_df,color='gold')\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\n#ax0.set_ylim([0,2000])\n#ax0.set_xlim(1970,2025)\nax0.set_ylabel(\"Gold Prices\",fontsize=8,loc='top', fontfamily='monospace')\nax0.set_xlabel(\" \",fontsize=8,loc='left', fontfamily='arial')\nax0.tick_params(axis = \"both\", which = \"both\", left=False, bottom=False)\nax0.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nfor s in [\"left\",\"bottom\"]:\n    ax0.spines[s].set_color('white')\n\n    \nax0.text(Xstart, 2100, 'Split data into Train & ',fontsize=20, fontweight='bold')\nax0.text(Xstart+10700, 2100, 'Test',color='gold',fontsize=20, fontweight='bold')\n\n\nplt.xticks(rotation=0)\n\nplt.show()","36e5e6ff":"train_df.reset_index(inplace=True)","6c0a1c24":"model = Prophet()\nmodel.fit(train_df)","aa5c6a6f":"# Predict on test set \ntest_preds = model.predict(df=test_df.reset_index())","1eefd848":"train_df.set_index('ds', inplace=True)\ntest_preds.set_index('ds', inplace=True)\ntrain_test_combined_df = train_df.join(test_preds[['yhat', 'yhat_lower','yhat_upper']], how = 'outer')","210759e2":"fig = plt.figure(figsize=(10, 4), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\n\ntrain_test_combined_df[['y','yhat']].plot(ax=ax0, color=['lightgray','gold'],legend=False)\nax0.fill_between(train_test_combined_df.index, train_test_combined_df['yhat_upper'], train_test_combined_df['yhat_lower'], alpha=0.5, color='lightgray')\nax0.scatter(test_df.index, test_df['y'], color='#FF240D',ec='white', linewidth=0.5, s=15)\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\n#ax0.set_ylim([0,2000])\n#ax0.set_xlim(1970,2025)\nax0.set_ylabel(\"Gold Prices\",fontsize=8,loc='top', fontfamily='monospace')\nax0.set_xlabel(\" \",fontsize=8,loc='left', fontfamily='arial')\nax0.tick_params(axis = \"both\", which = \"both\", left=False, bottom=False)\nax0.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nfor s in [\"left\",\"bottom\"]:\n    ax0.spines[s].set_color('white')\n\n    \nax0.text(Xstart, 2300, 'Actual Prices and',fontsize=20, fontweight='bold')\nax0.text(Xstart+240, 2300, 'Predictions',color='gold',fontsize=20, fontweight='bold')\n\n#plt.plot([],[], marker=\"o\", ms=10, ls=\"\", mec=None, color='#FF240D', label=\"Actual Test Values\")\n#L = ax0.legend(frameon=False,loc=\"upper center\", bbox_to_anchor=(1.15, 0.6), ncol= 1)\n#plt.setp(L.texts, family='monospace',fontsize=8)\n#L.get_frame().set_facecolor('none')\n#L.get_texts()[0].set_text('Previous Values')\n#L.get_texts()[1].set_text('Predictions')\n\nplt.annotate('Forecast', xy=(600, 1900), xytext=(600, 2200),\n             arrowprops=dict(facecolor='steelblue',arrowstyle=\"->\",connectionstyle=\"arc3,rad=.5\",color='gold'), fontsize=8,fontfamily='monospace',ha='left', color='white')\nplt.annotate('Actual', xy=(600, 1250), xytext=(600, 600),\n             arrowprops=dict(facecolor='steelblue',arrowstyle=\"->\",connectionstyle=\"arc3,rad=.5\",color='#FF240D'), fontsize=8,fontfamily='monospace',ha='left', color='white')\n\n\nplt.xticks(rotation=0)\n\nplt.show()","06d321ee":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\n\nprint('Our error metrics: ')\nmae = mean_absolute_error(y_true=test_df['y'], y_pred=test_preds['yhat'])\nprint(f'MSE: {mae}')\n\nmse = mean_squared_error(y_true=test_df['y'], y_pred=test_preds['yhat'])\nrmse = sqrt(mse)\nprint(f'RMSE: {rmse}')","c7008c8c":"# fit the model on the whole dataset\nmodel = Prophet()\nmodel.fit(df_prophet)","35d8c72b":"# Choose forecast window, in this case, 60 months\nfuture = model.make_future_dataframe(periods=60, freq='m')","c1cea525":"forecast = model.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","f5c012b3":"df_prophet.set_index('ds', inplace=True)\nforecast.set_index('ds', inplace=True)","4f214bdc":"combined_df = df_prophet.join(forecast[['yhat', 'yhat_lower','yhat_upper']], how = 'outer')\ncombined_df.reset_index()['ds']","267ba09b":"fig = plt.figure(figsize=(10, 4), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\n\ncombined_df[['y','yhat']].plot(ax=ax0, color=['gray','gold'],legend=False)\nax0.fill_between(combined_df.index, combined_df['yhat_upper'], combined_df['yhat_lower'], alpha=0.5, color='lightgray')\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0.set_ylim([0,2000])\n#ax0.set_xlim(1970,2025)\nax0.set_ylabel(\"Gold Prices\",fontsize=8,loc='top', fontfamily='monospace')\nax0.set_xlabel(\" \",fontsize=8,loc='left', fontfamily='arial')\nax0.tick_params(axis = \"both\", which = \"both\", left=False, bottom=False)\nax0.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nfor s in [\"left\",\"bottom\"]:\n    ax0.spines[s].set_color('white')\n\n    \nax0.text(Xstart, 2100, 'The price of',fontsize=20, fontweight='bold')\nax0.text(Xstart+6000, 2100, 'Gold: Forecasts',color='gold',fontsize=20, fontweight='bold')\n\n#L = ax0.legend(frameon=False,loc=\"upper center\", bbox_to_anchor=(1.15, 0.7), ncol= 1)\n#plt.setp(L.texts, family='monospace')\n#L.get_frame().set_facecolor('none')\n#L.get_texts()[0].set_text('Actual Value')\n#L.get_texts()[1].set_text('Predictions')\n\n\nplt.xticks(rotation=0)\n\nplt.show()","25dcb61f":"df1970.set_index('Date',inplace=True)\ndf1970.index = pd.to_datetime(df1970.index) \nconnect_date = df1970.index[-2] \nmask = (forecast.index > connect_date)\npredict_df = forecast.loc[mask]\npreds_df = df1970.join(predict_df[['yhat', 'yhat_lower','yhat_upper']], how = 'outer')","0b361231":"fig = plt.figure(figsize=(10, 4), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\n\n\n\nax0.plot(preds_df['Price'], color='lightgray')\nax0.plot(preds_df['yhat'], color='gold', linestyle=':')\nax0.fill_between(preds_df.index, preds_df['yhat_upper'], preds_df['yhat_lower'], alpha=0.5, color='lightgray')\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0.set_ylim([0,2000])\n#ax0.set_xlim(1970,2025)\nax0.set_ylabel(\"Gold Prices\",fontsize=8,loc='top', fontfamily='monospace')\nax0.set_xlabel(\" \",fontsize=8,loc='left', fontfamily='arial')\nax0.tick_params(axis = \"both\", which = \"both\", left=False, bottom=False)\nax0.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nfor s in [\"left\",\"bottom\"]:\n    ax0.spines[s].set_color('white')\n\n    \nax0.text(Xstart, 2100, 'The price of',fontsize=20, fontweight='bold')\nax0.text(Xstart+6000, 2100, 'Gold: Forecasts',color='gold',fontsize=20, fontweight='bold')\n\n\nplt.xticks(rotation=0)\n\nplt.show()","d2c8d7de":"df1970 = df[df['Year']>=1987]\n\nfig = plt.figure(figsize=(10, 4), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\n\nsns.lineplot(x='Year',y='Price',data=df1970,color='gold', ax=ax0)\n\nax1 = plt.twinx()\nsns.lineplot(x='Year',y='Price',data=oil,color='black', ax=ax1)\n\nfor s in [ \"top\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n\nfor s in [\"left\",\"right\",\"bottom\"]:\n    ax0.spines[s].set_color('white')\n    ax1.spines[s].set_color('white')\n\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0.set_ylim([0,2000])\nax1.set_ylim([0,140])\n\nax0.set_xlim(1987,2022)\nax0.set_ylabel(\"Gold Prices\",fontsize=8,loc='top', fontfamily='monospace')\nax1.set_ylabel(\"Oil Prices\",fontsize=8,loc='top', fontfamily='monospace')\n\nax0.set_xlabel(\" \",fontsize=8,loc='left', fontfamily='arial')\n\n\nax0.tick_params(axis = \"both\", which = \"both\", left=False, bottom=False)\nax1.tick_params(axis = \"both\", which = \"both\", left=False, bottom=False, right=False)\n\nax0.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n\n    \nax0.text(1987, 2100, 'The price of',fontsize=20, fontweight='bold')\nax0.text(1997, 2100, 'Gold',color='gold',fontsize=20, fontweight='bold')\nax0.text(2000.75, 2100, '&',fontsize=20, fontweight='bold')\nax0.text(2002.5, 2100, 'Oil',color='black',fontsize=20, fontweight='bold')\n\n\n# Ball\nax0.plot(2020,df['Price'].max()-130, 'ko', markersize=7, fillstyle='full',color='gold', markeredgewidth=1.5)\nax1.plot(2021,oil['Price'][-1:], 'ko', markersize=7, fillstyle='full',color='black', markeredgewidth=1.5)\n\n# highlights\n\nax0.axvline(x=2001, ymin=0, ymax=0.74, color='lightgray',linewidth=0.7)\nax0.plot(2001,1500, 'ko', markersize=7, fillstyle='full',color='gold', markeredgewidth=1.5)\nax0.text(2000.5,1280,'September 11th\\n2001',ha='right',fontsize=8)\n\n\nax0.axvline(x=1990, ymin=0, ymax=0.365, color='lightgray',linewidth=0.7)\nax0.plot(1990,750, 'ko', markersize=7, fillstyle='full',color='gold', markeredgewidth=1.5)\nax0.text(1990.5,600,'Iraq invades Iran',ha='left',fontsize=8)\n\nax0.axvline(x=2008, ymin=0, ymax=0.88, color='lightgray',linewidth=0.7)\nax0.plot(2008,1800, 'ko', markersize=7, fillstyle='full',color='gold', markeredgewidth=1.5)\nax0.text(2007.5,1600,'2008 Financial\\nCrisis',ha='right',fontsize=8)\n\n\nplt.show()","b68616b8":"df1970['M_Yr'] = df1970['Date'].dt.to_period('Y')\noil['M_Yr'] = oil['Date'].dt.to_period('Y')\n\noil_mean_m_yr = oil.groupby('M_Yr')['Price'].mean()\ngold_mean_m_yr = df1970.groupby('M_Yr')['Price'].mean()\n\ngold_oil_df = pd.merge(left=gold_mean_m_yr, right=oil_mean_m_yr, left_on='M_Yr', right_on='M_Yr')\n\ngold_oil_df.columns = [['Gold', 'Oil']]","ca4f71aa":"fig = plt.figure(figsize=(5,5),dpi=150)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.05, hspace=0.27)\nax0 = fig.add_subplot(gs[0, 0])\n\n\nfig.patch.set_facecolor(background_color)\nax0.set_facecolor(background_color) \n\nc1 = 'Gold'\nc2 = 'Oil'\n\n# filtet dates\ngold_oil_df = gold_oil_df.loc['2002-01-01':'2008-01-01']\n\nplt.plot(gold_oil_df[c1], gold_oil_df[c2], '-', marker='o',color='gold')\n\nfor line in range(0, gold_oil_df.shape[0], 1):\n     plt.annotate(\n          gold_oil_df.index[line], \n          (gold_oil_df[c1].iloc[line], gold_oil_df[c2].iloc[line]+0.025) ,\n          va='bottom',\n          ha='center',fontfamily='monospace'\n     )\n        \n\nfor s in ['top','right']:\n    ax0.spines[s].set_visible(False)\n    \n#ax0.xaxis.set_ticks(np.arange(1, 10, 1))\nax0.set_ylabel(f\"{c2}\",fontfamily='monospace',loc='top',color='gray')\nax0.set_xlabel(f\"{c1}\",fontfamily='monospace',loc='left',color='gray')\nax0.tick_params(axis = 'both', which = 'major', labelsize = 10)\n    \n\nax0.tick_params(axis='both', which='both',left=False, bottom=False,labelbottom=True) \n\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0.text(Xstart, Yend+8, 'The price of',fontsize=20, fontweight='bold')\nax0.text(Xstart+340, Yend+8, 'Gold',color='gold',fontsize=20, fontweight='bold')\nax0.text(Xstart+460, Yend+8, '&',fontsize=20, fontweight='bold')\nax0.text(Xstart+500, Yend+8, 'Oil',color='black',fontsize=20, fontweight='bold')\n\n\nax0.text(Xstart, Yend+3, '2002 - 2008',fontsize=15, fontweight='bold')\n\n\n\nax0.set_xlabel(\"Gold Prices\",fontsize=8,loc='left',color='gold', fontfamily='monospace')\nax0.set_ylabel(\"Oil Prices\",fontsize=8,loc='top',color='black', fontfamily='monospace')\n\nplt.show()","6905ffab":"fig = plt.figure(figsize=(5,5),dpi=150)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.05, hspace=0.27)\nax0 = fig.add_subplot(gs[0, 0])\n\n\nfig.patch.set_facecolor(background_color)\nax0.set_facecolor(background_color) \n\nc1 = 'Gold'\nc2 = 'Oil'\n\ngold_oil_df = pd.merge(left=gold_mean_m_yr, right=oil_mean_m_yr, left_on='M_Yr', right_on='M_Yr')\ngold_oil_df.columns = [['Gold', 'Oil']]\ngold_oil_df = gold_oil_df.loc['2002-01-01':]\n\nplt.plot(gold_oil_df[c1], gold_oil_df[c2], '-', marker='o',color='gold')\n\nfor line in range(0, gold_oil_df.shape[0], 2):\n     plt.annotate(\n          gold_oil_df.index[line], \n          (gold_oil_df[c1].iloc[line], gold_oil_df[c2].iloc[line]+0.025) ,\n          va='bottom',\n          ha='center',fontfamily='monospace'\n     )\n        \n\nfor s in ['top','right']:\n    ax0.spines[s].set_visible(False)\n    \n#ax0.xaxis.set_ticks(np.arange(1, 10, 1))\nax0.set_ylabel(f\"{c2}\",fontfamily='monospace',loc='top',color='gray')\nax0.set_xlabel(f\"{c1}\",fontfamily='monospace',loc='left',color='gray')\nax0.tick_params(axis = 'both', which = 'major', labelsize = 10)\n    \n\nax0.tick_params(axis='both', which='both',left=False, bottom=False,labelbottom=True) \n\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0.text(Xstart, Yend+8, 'The price of',fontsize=20, fontweight='bold')\nax0.text(Xstart+820, Yend+8, 'Gold',color='gold',fontsize=20, fontweight='bold')\nax0.text(Xstart+1150, Yend+8, '&',fontsize=20, fontweight='bold')\nax0.text(Xstart+1300, Yend+8, 'Oil',color='black',fontsize=20, fontweight='bold')\n\n\nax0.text(Xstart, Yend+3, '2002 - 2020',fontsize=15, fontweight='bold')\n\n\n\nax0.set_xlabel(\"Gold Prices\",fontsize=8,loc='left',color='gold', fontfamily='monospace')\nax0.set_ylabel(\"Oil Prices\",fontsize=8,loc='top',color='black', fontfamily='monospace')\n\nplt.show()","3beebcfd":"Here the observation is clear, Oil & Gold increase in almost perfect unison between 2002 & 2008. \n\nWhat if we **extend our view to the present?** It certainly appears that **Oil gets more volatile** after 2008","cb6071c7":"# How do our predictions perform?","46eb99c2":"We now have our **forecast clearly highlighted**\n\nWe can see that the predictions follow the general trend of the data, despite not following directly on from the current price.\n\n# Black Gold\n\nThere is another eartlhy product that also has power all over the world, and it is also known as **Black Gold**... yes, that's right, **Oil**\n\n**Have the prices of Gold & Oil tracked through the years?**","afda3803":"Fit model on the training set only","16e6f7ce":"While we can't say that these events directly effected the price of gold, they certainly might have!\n\nAs Ben Bernake said, \"**Nobody really understands gold prices...**\"\n\n**but can we predict them?**","18d76620":"So our model did't do terribly. It forecasted the upwards trend, and ended up close to the maximum price acheived. However, it wasn't great. \n\n**I'll now do a forecast ahead of where we are at present**.\n\n# Forecast\n\nFor this, I will choose 60 months, or **5 years**. Of course, this is way in to the future, and the further out we go from the present, the less reliable our predictions become. \n\nI just want to show the functionality.","bf6c00e4":"# Gold\n\nGold has an allure all over the world. \n\nThis notebook is a brief look at how prices of gold have changed since 1950.\n\n**What can we learn?**","e98ac318":"# How has the price of gold changed over the years?","30307a66":"# Conclusions\n\nSo what conclusions can we draw?\n\nWell, gold has consistently risen in price since 1970. There have been years where gold has decreased in price, but the overall trend can firmly be said to be an upward one. \n\nWe used Prophet to try to predict the price of gold. A notoriously difficult task. \n\nOur model didn't do brilliantly at predicting exact movements, but it did pick up overall trends quite well.\n\nSo if history, and our model, are anything to go by, gold prices are - generally speaking - heading **up!**\n\n\n# Resources\n\nSome resources & references I found useful for this notebook:\n\n* https:\/\/nextjournal.com\/eric-brown\/forecasting-with-prophet-part-3\n\n* https:\/\/machinelearningmastery.com\/time-series-forecasting-with-prophet-in-python\/\n\n* https:\/\/www.kaggle.com\/robikscube\/time-series-forecasting-with-prophet#Train\/Test-Split","bdb2d3ca":"We now see that the close **relationship is not as strong** in the years following 2008. \n\nThis, of course, was the year of the global financial crisis, and perhaps oil was hit harder than gold.\n\nSo although the two remain closely linked, the relationship is not as strong as it was in the past.","04c3590e":"At first glance, these events may not show much impact. \n\nHowever, when we zoom in and focus on percentage change, we do see that these and other events **may cause fluctuations in the price of gold**","ef84e0a7":"We've now produced our predictions.\n\nLet's join them with our original dataframe so we can **plot them together...**","9d38f612":"We see above that our **predictions actually did quite well.** \n\nThey didn't predict every movement, far from it, however the **general trends** over the years were picked up. \n\nThe prediction 3 years in to the future is showing a consistent trend. Let's focus on our future predictions specifically...","e663ccdf":"We see that the abandonment of the Bretton Woods system in the 1970's was the start of the wild-ride that gold prices would go on.\n\nHowever, it was in the 2000's gold prices really **took off!**","8d80cfca":"# 1970 Onwards\n\nFor the purposes of our visualisations, we will focus our attention after 1970. \n\nDo key events cause fluctuations?\n\n[inspired by: https:\/\/www.economist.com\/graphic-detail\/2020\/01\/06\/the-killing-of-qassem-suleimani-sends-gold-to-a-seven-year-high]","df7732e5":"Now we can **make our predictions**","27345295":"The prices of Gold & Oil, while on different scales, have **tracked closely together** for many years. \n\nIt could be said that **oil prices seem a bit more volatile** than gold, but largely, the two remain closely aligned.\n\n\nWe can also plot the price of Oil and the price of Gold temporally. With the price of each on an axis, and the years plotted, showing how each changed.\n\n**I'll focus on the period after 2002 when both Oil & Gold appear to increase together**","861969dd":"# let's do it properly: Splitting our data\n\nAs for any predictive task, we should keep some data separate so that we can put our predictions to the test.\n\nHere, I'll hold out 36 rows, or in other words, 36 months (3 years)","ad719df0":"# Next we call & fit the model","88868bf5":"# Prophet\n\nI will try to forecast gold prices using Facebook's **Prophet**. This tool specializes in **univariate time-series forecasting**. So let's put it to the test.\n\nAs above, I will use **only records post-1970.**\n\nNote that in Prophet, we need to have our columns names 'ds' (dates) and 'y' (the variable we want to predict)."}}