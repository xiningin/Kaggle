{"cell_type":{"80754fc1":"code","1bf94c15":"code","fd7ee195":"code","c88b817c":"code","05d4d7b9":"code","67b8c8f8":"code","96338671":"code","7a02d53f":"code","a207f14f":"code","74534276":"code","6f9ab6c5":"code","6377f0fa":"code","7a22a4fe":"code","48940ef3":"code","14c2ba56":"code","73d0351d":"code","1cc49c1c":"code","f0a1d07c":"code","de94e581":"code","47176f9d":"code","9908dd31":"code","d4b7cd2e":"code","0d867842":"code","6f5227d0":"code","99f3a211":"code","3fa6d11e":"code","0c6c86b8":"code","9d4d16ce":"code","d66d99d6":"code","b2ebf117":"code","a75159b2":"code","f4ae431f":"code","50819c3d":"code","ca78903d":"code","e8b6acd8":"code","08fbf8e2":"code","87a677d1":"code","db4849cb":"code","a56b4bf5":"code","006da01c":"code","9c1aacc1":"code","23a89d10":"code","d9a3b769":"code","caee7d5b":"code","23ecf6ab":"code","43809adc":"code","2e1357e5":"code","a5273352":"code","e8c2fac8":"code","7a6f46d5":"code","521755c8":"code","06236646":"code","184e811e":"code","d84bad9d":"code","b49535f6":"code","045fb46c":"code","2bc67db7":"code","166b283b":"code","7fb5aba5":"code","f229d9bb":"code","5e34f4b4":"code","ad90952c":"code","f00faa56":"code","19f62e9e":"code","bfe21e96":"code","eeb743b0":"code","e73047d5":"code","7bdcc34a":"code","37304f98":"code","6a140c78":"code","36d588e1":"code","5fc49eb6":"code","6f6ac1c7":"code","853cc655":"code","05363cf3":"code","1b15fd64":"code","9dd43bf1":"code","5cdc0cec":"code","dfe05aef":"code","fd99749d":"code","471e8d4f":"code","8988b3ee":"code","7a610297":"code","0fae1183":"code","ccad4b3f":"code","7635f11d":"code","36b006e7":"code","844fff01":"code","2eda5ec1":"code","398e1a3f":"code","ea1ac369":"code","5de05dbc":"code","77bb631a":"code","ad8e3adc":"code","d8112d07":"code","a4b30f4d":"markdown","75377ab3":"markdown","c8a0453f":"markdown","b0861c4c":"markdown","8fc2084f":"markdown","c1d41f44":"markdown","86e1749a":"markdown","246dbc79":"markdown","f8cad64f":"markdown","f6c336b4":"markdown","83d4ec06":"markdown"},"source":{"80754fc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","1bf94c15":"dt_test = pd.read_csv('..\/input\/test.csv')\ndt_train = pd.read_csv('..\/input\/train.csv')","fd7ee195":"dt_train.info()","c88b817c":"dt_train.head()","05d4d7b9":"dt_train.tail()","67b8c8f8":"dt_train.columns","96338671":"dt_train.corr()","7a02d53f":"f,ax = plt.subplots(figsize=(20,20))\nsns.heatmap(dt_train.corr(), annot = True,linewidths=.4, fmt='.1f', ax=ax)\nplt.show()","a207f14f":"dt_train.describe()","74534276":"#descriptive statistics summary\ndt_train['SalePrice'].describe()","6f9ab6c5":"dt_train.shape","6377f0fa":"#histogram\nsns.distplot(dt_train['SalePrice']);","7a22a4fe":"# Scatter Plot \n# x = SalePrice, y = YearBuilt\ndt_train.plot(kind='scatter',x = 'SalePrice', y = 'YearBuilt', alpha=0.5, color='b')\nplt.xlabel('SalePrice')\nplt.ylabel('YearBuilt')\nplt.title('SalePrince or YearBuilt')\ndt_train.plot(kind='scatter',x = 'SalePrice', y = 'YearRemodAdd', alpha=0.5, color='r')\nplt.xlabel('SalePrice')\nplt.ylabel('YearRemodAdd')\nplt.title('SalePrince or YearRemodAdd')\n","48940ef3":"# Line Plot\ndt_train.SalePrice.plot(kind = 'line', color = 'g',label = 'SalePrice',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndt_train.LotArea.plot(color = 'r',label = 'LotArea',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              \nplt.ylabel('y axis')\nplt.title('SalePrice or LotArea')           \nplt.show()\n","14c2ba56":"# let's look at the average sales price\nsale_mean=np.mean(dt_train['SalePrice'])\nprint(\"sale_mean:\",sale_mean)\n# let's look at the average Total rooms above grade\nroom_mean=np.mean(dt_train['TotRmsAbvGrd'])\nprint(\"room_mean:\",room_mean)","73d0351d":"# Now, let's find the Houses under the average price and the number of rooms above the average.\n# Filtering pandas with logical_and\nfilt1=dt_train[np.logical_and(dt_train['SalePrice']<sale_mean,dt_train['TotRmsAbvGrd']>room_mean)]\nfilt1.head()","1cc49c1c":"# example of what we learn above\ndef tuble_ex():\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","f0a1d07c":"# Older than 2006\nseries_year = dt_train['YrSold']\nx=2006\ndef f():\n    x=series_year>2006\n    return x\nprint(x)\nprint(f())\n    ","de94e581":"# let's look at unit area prices and mean\nseries_lvarea=dt_train['GrLivArea']\nseries_sale=dt_train['SalePrice']\ndef f():\n    y=series_sale\/series_lvarea\n    return y\nprint(f())\narea_saleprice=np.mean(f())\nprint('mean_area_saleprice:',area_saleprice)","47176f9d":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","9908dd31":"#nested function\ndef square():\n    def add():\n        x=5\n        y=20\n        z=y-x\n        return z\n    return add()**2\nprint(square())\n        ","d4b7cd2e":"# quarter prices of houses\ndef f(series_sale,b=2,c=2):\n    y=series_sale\/(b+c)\n    return y\nprint(f(series_sale))\n","0d867842":"# flexi arguments args and kwargs\ndef f(*args):\n    for i in args:\n            print(i)\nf(series_year)\nprint(\"\")\ndef f(**kwargs):\n    for key,value in kwargs.items():\n        print(key,\"\",value)\nf(year='series_year',sale='series_sale',yes='no')\n        ","6f5227d0":"square= lambda x: x**2\nprint(square(5))\ntot= lambda x,y,z: x+y-z\nprint(tot(15,62,25))","99f3a211":"year1 = map(lambda x:x<2007,series_year)\n# print(list(year1))","3fa6d11e":"name=\"levent\"\nit = iter(name)\nprint(next(it))\nprint(next(it))\nprint(*it)","0c6c86b8":"# year and sale price\nlist_year = list(series_year)\nlist_sale1 = list(series_sale)\nprint(type(list_year))\nprint(type(list_sale1))\nz = zip(list_year,list_sale1)\n# print(z)\nz_list = list(z)\n# print(z_list)","9d4d16ce":"un_zip = zip(*z_list)\nun_list1,un_list2=list(un_zip)\n# print(un_list1)\n# print(un_list2)\nprint(type(un_list2))","d66d99d6":"# house year mean\n# list comprehension\nhouse_year = [2018-i for i in list_year]\n# print(house_year)\nnp.mean(house_year)","b2ebf117":"# Conditionals on iterable\nnum1 = [23,7,15,6,-20]\nnum2 = [i**2 if i==7 else i+7 if i>0 else i+50 for i in num1]\nprint(num2)","a75159b2":"dt_train.head()","f4ae431f":"# assessment by number of rooms\nrooms = sum(dt_train.TotRmsAbvGrd)\/len(dt_train.TotRmsAbvGrd)\ndt_train[\"rooms_level\"] = [\"roomy\" if i > rooms else \"scant\" for i in dt_train.TotRmsAbvGrd]\ndt_train.loc[:10, [\"TotRmsAbvGrd\",\"rooms_level\"]]","50819c3d":"dt_test.tail()","ca78903d":"# dt_test or dt_train columns\ndt_test.columns\nprint(\"test:\",dt_test.shape)\nprint(\"train:\",dt_train.shape)","e8b6acd8":"# verbose info evaluation\ndt_train.info(verbose=True)","08fbf8e2":"# for example let's look at the wall coverings of the houses\nprint(dt_train['MasVnrType'].value_counts(dropna=False))\n# and let's look Overall condition rating houses\nprint(dt_train['OverallCond'].value_counts(dropna=False)) # 10   Very Excellent no house, houses in general 5,6,7 category","87a677d1":"dt_train.describe()","db4849cb":"# let's find out if the house prices are contradictory\ndt_train.boxplot(column='SalePrice')\nplt.show()","a56b4bf5":"# for example new data\ndata_new = dt_train.head()\ndata_new","006da01c":"# Rooms level melted\nmelted = pd.melt(frame=data_new, id_vars='YearBuilt', value_vars=['SalePrice','TotalBsmtSF','rooms_level','TotRmsAbvGrd'])\nmelted","9c1aacc1":"# we have created new data with significant values compared to the year of home construction.\nmelted.pivot(index='YearBuilt',columns='variable',values='value')","23a89d10":"data1 = dt_train.head()\ndata2 =dt_train.tail()\nconc_data = pd.concat([data1,data2], axis=0, ignore_index=True)\nconc_data","d9a3b769":"data3=dt_train['RoofStyle'].head(7)\ndata4=dt_train['Foundation'].head(7)\nconc_data_col = pd.concat([data3,data4], axis=1)\nconc_data_col","caee7d5b":"melted.dtypes","23ecf6ab":"melted['value']=melted['value'].astype('bool')\nmelted['YearBuilt']=melted['YearBuilt'].astype('float')\nmelted.dtypes","43809adc":"# dt_train.info()\ndt_train['Alley'].value_counts(dropna=False)","2e1357e5":"# assert statement\ndt1=dt_train\ndt1['Alley'].dropna(inplace=True)\nassert 1==1 # return nothing because it is true","a5273352":"dt1['Alley'].value_counts(dropna=False) # no NaN","e8c2fac8":"assert dt_train['Alley'].notnull().all()\ndt_train['Alley'].head()","7a6f46d5":"dt_train.head()","521755c8":"# mssubclass and saleprice new dataframe\nclass1 = list(dt_train['MSSubClass'])\nprice1 = list(dt_train['SalePrice'])\nlist_label = [\"class1\",\"price1\"]\nlist_col = [class1,price1]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf.head()","06236646":"df[\"yearsold\"] = 0\ndf.head()","184e811e":"dt1 = dt_train.loc[:,[\"GarageArea\",\"GrLivArea\",\"LotArea\"]]\ndt1.plot()","d84bad9d":"dt1.plot(subplots=True)\nplt.show()","b49535f6":"dt1.plot(kind=\"scatter\", x=\"GarageArea\", y=\"GrLivArea\")\nplt.show()","045fb46c":"dt1.plot(kind=\"hist\", y=\"GarageArea\", bins=100, range=(0,1000))\nplt.show()","2bc67db7":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndt1.plot(kind=\"hist\",y=\"GarageArea\", bins=100, range=(0,1000), normed=True, ax=axes[0])\ndt1.plot(kind=\"hist\",y=\"GarageArea\", bins=100, range=(0,1000), normed=True, ax=axes[1], cumulative=True)\nplt.savefig('graph.png')\nplt.show()\n# savefig problem ???","166b283b":"dt_train.describe()\n","7fb5aba5":"time_list=[\"1999-12-24\",\"1999-08-11\"]\nprint(type(time_list))\nprint(type(time_list[1]))\ndatetime_object=pd.to_datetime(time_list)\nprint(type(datetime_object))\ndatetime_object","f229d9bb":"import warnings\nwarnings.filterwarnings(\"ignore\")\n# time columns\ndata2=dt_train.head()\ndata_list=[\"2016-10-12\",\"2016-10-05\",\"2016-09-15\",\"2015-02-25\",\"2015-03-07\"]\ndatatime_object=pd.to_datetime(data_list)\ndata2[\"date\"]=datatime_object\ndata2=data2.set_index(\"date\")\ndata2","5e34f4b4":"print(data2.loc[\"2015-02-25\"])\nprint(data2.loc[\"2015-02-25\":\"2016-09-15\"])","ad90952c":"# year select mean\ndata2.resample(\"A\").mean()","f00faa56":"# monts select mean\ndata2.resample(\"M\").mean()","19f62e9e":"# NaN input linear\ndata2.resample(\"M\").first().interpolate(\"linear\")","bfe21e96":"data2.resample(\"M\").mean().interpolate(\"linear\")","eeb743b0":"# read data\ndata=pd.read_csv('..\/input\/train.csv')\ndata=data.set_index(\"Id\")\ndata.head()","e73047d5":"data[\"LotArea\"][2]","7bdcc34a":"data.LotArea[2]","37304f98":"data.loc[1,[\"LotArea\"]]","6a140c78":"data.loc[1:10,[\"LotArea\",\"YearBuilt\",\"SalePrice\"]]","36d588e1":"data.loc[10:1:-1,\"MSSubClass\":\"Street\"]","5fc49eb6":"data.loc[1:10,\"MoSold\":]","6f6ac1c7":"boolean = data.LotArea>50000\ndata[boolean]","853cc655":"first_filter=data.LotArea>50000\nsecond_filter=data.MSSubClass>50\ndata[first_filter&second_filter]","05363cf3":"data.MSSubClass[data.BsmtFinSF1>2000]","1b15fd64":"def div(n):\n    return n\/2\ndata.BsmtFinSF1.apply(div)","9dd43bf1":"data.BsmtFinSF1.apply(lambda n:n+n\/2)","5cdc0cec":"data[\"total_area\"]=data.LotArea+data.GrLivArea+data.GarageArea\ndata.head()","dfe05aef":"print(data.index.name)\n# lets change it\ndata.index.name= \"index_name\"\ndata.head()","fd99749d":"data.head()\ndata3=data.copy()\ndata3.index.name = range(100,300,10)\ndata3.head()\n","471e8d4f":"data = pd.read_csv('..\/input\/test.csv')\ndata.head()","8988b3ee":"data1=data.set_index([\"MSZoning\",\"LotConfig\"])\ndata1.head(50)","7a610297":"dic = {\"tream\":[\"a\",\"b\",\"a\",\"b\"],\"gender\":[\"f\",\"m\",\"f\",\"m\"],\"response\":[\"10\",\"21\",\"61\",\"11\"],\"age\":[\"12\",\"17\",\"25\",\"32\"]}\ndf=pd.DataFrame(dic)\ndf","0fae1183":"df.pivot(index=\"age\",columns=\"gender\",values=\"response\")","ccad4b3f":"df7=df.set_index([\"tream\",\"gender\"])\ndf7","7635f11d":"# df7.unstack(level=0)","36b006e7":"# df1.unstack(level=1)","844fff01":"df2=df7.swaplevel(0,1)\ndf2","2eda5ec1":"# MELTING DATA FRAMES\ndf\n","398e1a3f":"pd.melt(df,id_vars=\"tream\", value_vars=[\"age\",\"response\"])\n","ea1ac369":"# CATEGORICALS AND GROUPBY\ndf","5de05dbc":"df.groupby(\"tream\").mean()","77bb631a":"df.groupby(\"tream\").age.max()","ad8e3adc":"df.groupby(\"tream\")[[\"age\",\"response\"]].min()","d8112d07":"df.info()","a4b30f4d":"**HIERARCHICAL INDEXING**\nSetting indexing","75377ab3":"<a id=\"2\"><\/a> <br>\n**VISUAL EXPLORATORY DATA ANALYSIS**\n\n-Plot\n\n-Subplot\n\n-Histogram:\n","c8a0453f":"Very well... We can think about home prices, and also create important graphic formats by using a parameter.","b0861c4c":"**F\u0130LTER\u0130NG DATA FRAMES**","8fc2084f":"<a id=\"4\"><\/a> <br>\n**TRANSFORMING DATA**","c1d41f44":"<a id=\"3\"><\/a> <br>\n**MANIPULATING DATA FRAMES WITH PANDAS**","86e1749a":"<a id=\"1\"><\/a> <br>\n#**2.Pandas**","246dbc79":"This table is also divided into opposite proportional sections","f8cad64f":"Thank you for datai team","f6c336b4":"STACKING and UNSTACKING DATAFRAME\n","83d4ec06":"#****House Prices data analysis**\n\nAnalyzing data is not easy. When evaluating the data, they can capture important points and learn a lot of information. When learning software languages, the first sentence is very important and beautiful \"Hello World\"\n\n> [**1. Introduction** (#1)](http:\/\/)\nLet's write briefly what to do while evaluating the data.\n\na. Let's get to know data; columns, variable, index, info\n1. bb(concent)\n> 1.2.AAa(#2)\n> *3.BBb(#3)\n>  * 4.CCc(#4)"}}