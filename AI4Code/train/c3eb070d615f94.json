{"cell_type":{"3b63a0aa":"code","c1c8aad4":"code","ddc65042":"code","c37364c9":"code","3f970756":"code","1a3d3cd3":"code","8d0e049f":"code","df76782b":"code","db54bc61":"code","8a03befb":"code","33054ca7":"code","59da8735":"code","4001a307":"code","12c2b3d8":"code","c0206446":"code","ac276e8c":"code","365d7a50":"code","72f58286":"code","9c05a7cf":"code","a454443a":"code","c30d294c":"code","7d3a31e7":"code","494e3afc":"code","699ee6dc":"code","07f5710e":"code","821473fe":"code","f720c52b":"code","c8d60863":"markdown","410bc971":"markdown","99b1883c":"markdown","a143fe0d":"markdown","c2401464":"markdown","87fcf6eb":"markdown","d1ffacaa":"markdown","439973e0":"markdown","72b3aef6":"markdown","68b9fc6a":"markdown","dfae6bc6":"markdown"},"source":{"3b63a0aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c1c8aad4":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np\nimport pandas as pd\nimport sklearn\nfrom scipy import stats\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() # for plot styling\nfrom sklearn.datasets.samples_generator import make_blobs\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import pairwise_distances_argmin\nfrom sklearn.cluster import MiniBatchKMeans","ddc65042":"import time\nimport warnings\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn import cluster, datasets\nfrom sklearn.preprocessing import StandardScaler\nfrom itertools import cycle, islice","c37364c9":"df_train_path = '\/kaggle\/input\/eval-lab-3-f464\/train.csv'\ndf_test_path = '\/kaggle\/input\/eval-lab-3-f464\/test.csv'\ndf_tr = pd.read_csv(df_train_path)\ndf_te = pd.read_csv(df_test_path)\nprint(df_tr.info())\nprint(df_te.info())","3f970756":"#Number of unique values in different columns\nprint(\"Gender =\",df_tr['gender'].nunique())\nprint(\"SeniorCitizen =\",df_tr['SeniorCitizen'].nunique())\nprint(\"Married =\",df_tr['Married'].nunique())\nprint(\"Children =\",df_tr['Children'].nunique())\nprint(\"TVConnection =\",df_tr['TVConnection'].nunique())\nprint(\"Channel1 =\",df_tr['Channel1'].nunique())\nprint(\"Channel2 =\",df_tr['Channel2'].nunique())\nprint(\"Channel3 =\",df_tr['Channel3'].nunique())\nprint(\"Channel4 =\",df_tr['Channel4'].nunique())\nprint(\"Channel5 =\",df_tr['Channel5'].nunique())\nprint(\"Channel6 =\",df_tr['Channel6'].nunique())\nprint(\"Internet =\",df_tr['Internet'].nunique())\nprint(\"HighSpeed =\",df_tr['HighSpeed'].nunique())\nprint(\"AddedServices =\",df_tr['AddedServices'].nunique())\nprint(\"Subscription =\",df_tr['Subscription'].nunique())\nprint(\"PaymentMethod =\",df_tr['PaymentMethod'].nunique())","1a3d3cd3":"#Value_Counts of different columns\nprint(df_tr['gender'].value_counts())\nprint(df_tr['SeniorCitizen'].value_counts())\nprint(df_tr['Married'].value_counts())\nprint(df_tr['Children'].value_counts())\nprint(df_tr['TVConnection'].value_counts())\nprint(df_tr['Channel1'].value_counts())\nprint(df_tr['Channel2'].value_counts())\nprint(df_tr['Channel3'].value_counts())\nprint(df_tr['Channel4'].value_counts())\nprint(df_tr['Channel5'].value_counts())\nprint(df_tr['Channel6'].value_counts())\nprint(df_tr['Internet'].value_counts())\nprint(df_tr['HighSpeed'].value_counts())\nprint(df_tr['AddedServices'].value_counts())\nprint(df_tr['Subscription'].value_counts())\nprint(df_tr['PaymentMethod'].value_counts())","8d0e049f":"def onezeroconv(row):\n    #GENDER\n    if row.gender == 'Female':\n        row.gender = 0\n    elif row.gender == 'Male':\n        row.gender = 1\n        \n    #MARRIED\n    if row.Married == 'No':\n        row.Married = 0\n    elif row.Married == 'Yes':\n        row.Married = 1\n        \n    #CHILDREN\n    if row.Children == 'No':\n        row.Children = 0\n    elif row.Children == 'Yes':\n        row.Children = 1\n        \n    #TVCONNECTION\n    if row.TVConnection == 'No':\n        row.TVConnection = 0\n    elif row.TVConnection == 'Cable':\n        row.TVConnection = 1\n    elif row.TVConnection == 'DTH':\n        row.TVConnection = 2\n    \n    #CHANNEL1\n    if row.Channel1 == 'No':\n        row.Channel1 = 0\n    elif row.Channel1 == 'Yes':\n        row.Channel1 = 1\n    elif row.Channel1 == 'No tv connection':\n        row.Channel1 = 2\n        \n    #CHANNEL2\n    if row.Channel2 == 'No':\n        row.Channel2 = 0\n    elif row.Channel2 == 'Yes':\n        row.Channel2 = 1\n    elif row.Channel2 == 'No tv connection':\n        row.Channel2 = 2\n        \n    #CHANNEL3\n    if row.Channel3 == 'No':\n        row.Channel3 = 0\n    elif row.Channel3 == 'Yes':\n        row.Channel3 = 1\n    elif row.Channel3 == 'No tv connection':\n        row.Channel3 = 2\n        \n    #CHANNEL4\n    if row.Channel4 == 'No':\n        row.Channel4 = 0\n    elif row.Channel4 == 'Yes':\n        row.Channel4 = 1\n    elif row.Channel4 == 'No tv connection':\n        row.Channel4 = 2\n        \n    #CHANNEL5\n    if row.Channel5 == 'No':\n        row.Channel5 = 0\n    elif row.Channel5 == 'Yes':\n        row.Channel5 = 1\n    elif row.Channel5 == 'No tv connection':\n        row.Channel5 = 2\n        \n    #CHANNEL6\n    if row.Channel6 == 'No':\n        row.Channel6 = 0\n    elif row.Channel6 == 'Yes':\n        row.Channel6 = 1\n    elif row.Channel6 == 'No tv connection':\n        row.Channel6 = 2\n        \n    #INTERNET\n    if row.Internet == 'No':\n        row.Internet = 0\n    elif row.Internet == 'Yes':\n        row.Internet = 1\n    \n    #HIGHSPEED\n    if row.HighSpeed == 'No':\n        row.HighSpeed = 0\n    elif row.HighSpeed == 'Yes':\n        row.HighSpeed = 1\n    elif row.HighSpeed == 'No internet':\n        row.HighSpeed = 2\n        \n    #ADDEDSERVICES\n    if row.AddedServices == 'No':\n        row.AddedServices = 0\n    elif row.AddedServices == 'Yes':\n        row.AddedServices = 1\n        \n    #SUBSCRIPTION\n    if row.Subscription == 'Monthly':\n        row.Subscription = 0\n    elif row.Subscription == 'Biannually':\n        row.Subscription = 1\n    elif row.Subscription == 'Annually':\n        row.Subscription = 2\n    \n    #PAYMENTMETHOD\n    if row.PaymentMethod == 'Net Banking':\n        row.PaymentMethod = 0\n    elif row.PaymentMethod == 'Cash':\n        row.PaymentMethod = 1\n    elif row.PaymentMethod == 'Bank transfer':\n        row.PaymentMethod = 2\n    elif row.PaymentMethod == 'Credit card':\n        row.PaymentMethod = 3\n    return row","df76782b":"df_tr = df_tr.apply((lambda x: onezeroconv(x)), axis = 1)\ndf_te = df_te.apply((lambda x: onezeroconv(x)), axis = 1)","db54bc61":"def onehot(row):\n    #GENDER\n    if row.gender == 'Female':\n        row.gender = 0\n    elif row.gender == 'Male':\n        row.gender = 1\n        \n    #MARRIED\n    if row.Married == 'No':\n        row.Married = 0\n    elif row.Married == 'Yes':\n        row.Married = 1\n        \n    #CHILDREN\n    if row.Children == 'No':\n        row.Children = 0\n    elif row.Children == 'Yes':\n        row.Children = 1\n        \n    #TVCONNECTION 'Cable', 'DTH'\n    if row.TVConnection == 1:\n        row['Cable'] = 1\n        row['DTH'] = 0\n    elif row.TVConnection == 2:\n        row['Cable'] = 0\n        row['DTH'] = 1\n        row.TVConnection = 1\n    elif row.TVConnection == 0:\n        row['Cable'] = 0\n        row['DTH'] = 0\n    \n    #CHANNEL1\n    if row.Channel1 == 2:\n        row.Channel1 = 1\n        \n    #CHANNEL2\n    if row.Channel2 == 2:\n        row.Channel2 = 1\n        \n    #CHANNEL3\n    if row.Channel3 == 2:\n        row.Channel3 = 1\n        \n    #CHANNEL4\n    if row.Channel4 == 2:\n        row.Channel4 = 1\n        \n    #CHANNEL5\n    if row.Channel5 == 2:\n        row.Channel5 = 1\n        \n    #CHANNEL6\n    if row.Channel6 == 2:\n        row.Channel6 = 1\n        \n    #INTERNET\n    if row.Internet == 'No':\n        row.Internet = 0\n    elif row.Internet == 'Yes':\n        row.Internet = 1\n    \n    #HIGHSPEED\n    if row.HighSpeed == 2:\n        row.HighSpeed = 1\n        \n    #ADDEDSERVICES\n    if row.AddedServices == 'No':\n        row.AddedServices = 0\n    elif row.AddedServices == 'Yes':\n        row.AddedServices = 1\n        \n    #SUBSCRIPTION 'Monthly','Biannually','Annually'\n    if row.Subscription == 0:\n        row['Monthly'] = 1\n        row['Binannually'] = 0\n        row['Annually'] = 0\n    elif row.Subscription == 1:\n        row['Monthly'] = 0\n        row['Binannually'] = 1\n        row['Annually'] = 0\n    elif row.Subscription == 2:\n        row['Monthly'] = 0\n        row['Binannually'] = 0\n        row['Annually'] = 1\n    \n    #PAYMENTMETHOD 'Net Banking', 'Cash', 'Bank transfer', 'Credit card'\n    if row.PaymentMethod == 0:\n        row['Net Banking'] = 1\n        row['Cash'] = 0\n        row['Bank transfer'] = 0\n        row['Credit card'] = 0\n    elif row.PaymentMethod == 1:\n        row['Net Banking'] = 0\n        row['Cash'] = 1\n        row['Bank transfer'] = 0\n        row['Credit card'] = 0\n    elif row.PaymentMethod == 2:\n        row['Net Banking'] = 0\n        row['Cash'] = 0\n        row['Bank transfer'] = 1\n        row['Credit card'] = 0\n    elif row.PaymentMethod == 3:\n        row['Net Banking'] = 0\n        row['Cash'] = 0\n        row['Bank transfer'] = 1\n        row['Credit card'] = 1\n    \n    return row ","8a03befb":"df_tr = df_tr.apply((lambda x: onehot(x)), axis = 1)\ndf_te = df_te.apply((lambda x: onehot(x)), axis = 1)","33054ca7":"x_tr = 0\ncount_tr = 0\nfor index,row in df_tr.iterrows():\n    if row['TotalCharges'] != \" \":\n        x_tr += float(row['TotalCharges'])\n        count_tr += 1\nmtc_tr = float(x_tr\/count_tr)\n\nx_te = 0\ncount_te = 0\nfor index,row in df_te.iterrows():\n    if row['TotalCharges'] != \" \":\n        x_te += float(row['TotalCharges'])\n        count_te += 1\nmtc_te = float(x_te\/count_te)","59da8735":"def repmean(row,mtc):\n    if row.TotalCharges == \" \":\n        row.TotalCharges = mtc\n    return row\n\ndf_tr = df_tr.apply((lambda x: repmean(x,mtc_tr)), axis = 1)\ndf_te = df_te.apply((lambda x: repmean(x,mtc_te)), axis = 1)","4001a307":"sns.boxplot(x=\"Satisfied\", y=\"MonthlyCharges\", data=df_tr)","12c2b3d8":"sns.boxplot(x=\"Satisfied\", y=\"tenure\", data=df_tr)","c0206446":"df_tr['TotalCharges'] = pd.to_numeric(df_tr['TotalCharges'])\nsns.boxplot(x=\"Satisfied\", y=\"MonthlyCharges\", data=df_tr)","ac276e8c":"cat_feat = ['gender','SeniorCitizen','Married','Children','TVConnection','Channel1','Channel2','Channel3','Channel4','Channel5','Channel6','Internet','HighSpeed','AddedServices','Annually','Binannually','Monthly','Net Banking','Cash','Credit card','Bank transfer','Cable','DTH','Satisfied']\ncat_feat_corr = df_tr[cat_feat].apply(lambda x : pd.factorize(x)[0]).corr(method='pearson', min_periods=1).copy()","365d7a50":"cat_feat_corr['Satisfied'].sort_values()","72f58286":"#So here itself we declare 3 feature sets : cat_feat1 (All), cat_feat2 (>0.1 and <-0.1), cat_feat3 (>0.15 and <-0.1)\ncat_feat1 = cat_feat.copy()\ncat_feat2 = ['Net Banking','SeniorCitizen','Channel1','Channel2','Credit card','Married','Children','Annually','AddedServices','Bank transfer','TVConnection','Channel3','Channel4','Channel5','Channel6','Binannually','Monthly']\ncat_feat3 = ['Net Banking','Married','Children','Annually','AddedServices','Bank transfer','TVConnection','Channel3','Channel4','Channel5','Channel6','Binannually','Monthly']","9c05a7cf":"cat_feat1.append('tenure')\ncat_feat1.append('MonthlyCharges')\ncat_feat1.append('TotalCharges')\n\ncat_feat2.append('tenure')\ncat_feat2.append('MonthlyCharges')\ncat_feat2.append('TotalCharges')\n\ncat_feat3.append('tenure')\ncat_feat3.append('MonthlyCharges')\ncat_feat3.append('TotalCharges')","a454443a":"x1 = df_tr[cat_feat1].copy()\nx2 = df_tr[cat_feat2].copy()\nx3 = df_tr[cat_feat3].copy()\n\ncat_feat1_te = ['gender','SeniorCitizen','Married','Children','TVConnection','Channel1','Channel2','Channel3','Channel4','Channel5','Channel6','Internet','HighSpeed','AddedServices','Annually','Binannually','Monthly','Net Banking','Cash','Credit card','Bank transfer','Cable','DTH','MonthlyCharges','TotalCharges','tenure']\n\ny1 = df_te[cat_feat1_te].copy()\ny2 = df_te[cat_feat2].copy()\ny3 = df_te[cat_feat3].copy()","c30d294c":"from sklearn.preprocessing import RobustScaler\nscaler1 = RobustScaler()\nscaler2 = RobustScaler()\nscaler3 = RobustScaler()\nnum_feat = ['MonthlyCharges','TotalCharges','tenure']\n\nx1[num_feat] = scaler1.fit_transform(x1[num_feat])\ny1[num_feat] = scaler1.transform(y1[num_feat])\n\nx2[num_feat] = scaler2.fit_transform(x2[num_feat])\ny2[num_feat] = scaler2.transform(y2[num_feat])\n\nx3[num_feat] = scaler3.fit_transform(x3[num_feat])\ny3[num_feat] = scaler3.transform(y3[num_feat])","7d3a31e7":"### K-MEANS, cat_feat1\nkmeans1 = KMeans(n_clusters=2)\nkmeans1.fit_predict(x1[cat_feat1_te])\nx1_kmeans1 = kmeans1.predict(x1[cat_feat1_te])\ny1_kmeans1 = kmeans1.predict(y1)","494e3afc":"cust_id_km1 = df_te['custId'].copy()\noutput_km1 = pd.DataFrame(columns=['custId','Satisfied'])\noutput_km1['custId'] = cust_id_km1\noutput_km1['Satisfied'] = y1_kmeans1","699ee6dc":"output_km1.to_csv(\"km1.csv\",index=False)","07f5710e":"### K-MEANS, cat_feat2\nkmeans3 = KMeans(n_clusters=2)\nkmeans3.fit_predict(x3)\nx3_kmeans3 = kmeans3.predict(x3)\ny3_kmeans3 = kmeans3.predict(y3)","821473fe":"cust_id_km3 = df_te['custId'].copy()\noutput_km3 = pd.DataFrame(columns=['custId','Satisfied'])\noutput_km3['custId'] = cust_id_km3\noutput_km3['Satisfied'] = y3_kmeans3","f720c52b":"output_km3.to_csv(\"km3.csv\",index=False)","c8d60863":"## 6.2 Feature Scaling","410bc971":"# 4. DATA WRANGLING","99b1883c":"# Data Visualization","a143fe0d":"## 5.2 Target VS Categorical Variables","c2401464":"#### KM 3","87fcf6eb":"#### KM 1","d1ffacaa":"### 4.1. YES or NO to 0 and 1 converter","439973e0":"# 6.Models","72b3aef6":"## 6.1 K-MEANS","68b9fc6a":"## 4.2 One Hot Encoding","dfae6bc6":"## 4.3 MISSING VALUE IMPUTATION"}}