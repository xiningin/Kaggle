{"cell_type":{"379e9057":"code","be048a00":"code","a2f52435":"code","d6dd153b":"code","e638705b":"code","750ae6c7":"code","e5cdf3c3":"code","b34caefd":"code","4fe74322":"code","bf23b50c":"code","bad23120":"code","6073b225":"code","0da16030":"code","db64e0b4":"code","411e3074":"markdown","1b58b4fb":"markdown","439849d5":"markdown","54522aa6":"markdown","ce481a48":"markdown"},"source":{"379e9057":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression","be048a00":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nfull = train.append(test, ignore_index=True)","a2f52435":"full.describe()     # the information of only numbers\nfull.info()         # the information of all variables","d6dd153b":"full['Age'] = full['Age'].fillna(full['Age'].mean())\nfull['Fare'] = full['Fare'].fillna(full['Fare'].mean())\nfull['Embarked'] = full['Embarked'].fillna('S')\nfull['Cabin'] = full['Cabin'].fillna('U')       # \"Unknown\"","e638705b":"sex_mapDict = {'male': 1, 'female': 0}\nfull['Sex'] = full['Sex'].map(sex_mapDict)","750ae6c7":"embarkedDF = pd.get_dummies(full['Embarked'], prefix='Embarked')\nembarkedDF['PassengerId'] = full['PassengerId']\nfull = pd.merge(full, embarkedDF, on='PassengerId')","e5cdf3c3":"PclassDF = pd.get_dummies(full['Pclass'], prefix='Pclass')\nPclassDF['PassengerId'] = full['PassengerId']\nfull = pd.merge(full, PclassDF, on='PassengerId')","b34caefd":"def getTitle(name):\n    str1 = name.split(',')[1]\n    str2 = str1.split('.')[0]\n    str3 = str2.strip()\n    return str3\n\ntitleDF = pd.DataFrame()\ntitleDF['Title'] = full['Name'].map(getTitle)\ntitle_mapDict = {\"Capt\":         \"Officer\",\n                 \"Col\":          \"Officer\",\n                 \"Major\":        \"Officer\",\n                 \"Jonkheer\":     \"Royalty\",\n                 \"Don\":          \"Royalty\",\n                 \"Sir\":          \"Royalty\",\n                 \"Dr\":           \"Officer\",\n                 \"Rev\":          \"Officer\",\n                 \"the Countess\": \"Royalty\",\n                 \"Dona\":         \"Royalty\",\n                 \"Mme\":          \"Mrs\",\n                 \"Mlle\":         \"Miss\",\n                 \"Ms\":           \"Mrs\",\n                 \"Mr\":           \"Mr\",\n                 \"Mrs\":          \"Mrs\",\n                 \"Miss\":         \"Miss\",\n                 \"Master\":       \"Master\",\n                 \"Lady\":         \"Royalty\"}\ntitleDF['Title'] = titleDF['Title'].map(title_mapDict)\ntitleDF = pd.get_dummies(titleDF['Title'])\ntitleDF['PassengerId'] = full['PassengerId']\nfull = pd.merge(full, titleDF, on='PassengerId')","4fe74322":"cabinDF = pd.DataFrame()\ncabinDF['Cabin'] = full['Cabin'].map(lambda c: c[0])\ncabinDF = pd.get_dummies(cabinDF['Cabin'], prefix='Cabin')\ncabinDF['PassengerId'] = full['PassengerId']\nfull = pd.merge(full, cabinDF, on='PassengerId')","bf23b50c":"familyDF = pd.DataFrame()\nfamilyDF['FamilySize'] = full['Parch'] + full['SibSp'] + 1\nfamilyDF['Family_Single'] = familyDF['FamilySize'].map(lambda s: 1 if (s == 1) else 0)\nfamilyDF['Family_Small'] = familyDF['FamilySize'].map(lambda s: 1 if (2 <= s <= 4) else 0)\nfamilyDF['Family_Large'] = familyDF['FamilySize'].map(lambda s: 1 if (s >= 5) else 0)\nfamilyDF['PassengerId'] = full['PassengerId']\nfull = pd.merge(full, familyDF, on='PassengerId')","bad23120":"corrDF = full.corr()\nprint(corrDF['Survived'].sort_values(ascending=False))\nfull_X = full[['Mrs', 'Miss', 'Pclass_1', 'Family_Small', 'Fare', 'Family_Single', 'Pclass_3', 'Sex', 'Mr']]","6073b225":"sourceRow = full['Survived'].count()\nsource_X = full_X.loc[0:sourceRow-1, :]\nsource_y = full.loc[0:sourceRow-1, 'Survived']\npredict_X = full_X.loc[sourceRow:, :]","0da16030":"train_X, test_X, train_y, test_y = train_test_split(source_X, source_y, train_size=.8)\nmodel = LogisticRegression(solver='lbfgs', max_iter=1000)\nmodel.fit(train_X, train_y)\nprint(model.score(test_X, test_y))","db64e0b4":"predict_y = model.predict(predict_X).astype(int)\npassenger_Id = full.loc[sourceRow:, 'PassengerId']\npredictDF = pd.DataFrame({'PassengerId': passenger_Id,\n                          'Survived': predict_y})\npredictDF.to_csv('prediction.csv', index=False)","411e3074":"# 1. Data Cleaning\n    Use the mean value to deal with missing numbers\n    Use the most frequent value to deal with other missing variables","1b58b4fb":"# 4. Prediction","439849d5":"# 3. Establish Model","54522aa6":"# 2. Feature Engineering\n# 2.1 Establish Dummy Variables\n    \u521b\u5efa\u865a\u62df\u53d8\u91cf\uff1aon-hot\u7f16\u7801","ce481a48":"# 2.2 Variable Choosing"}}