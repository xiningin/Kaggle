{"cell_type":{"0bdc6314":"code","16c80830":"code","3f25f742":"code","f1154f97":"code","b3d13ae6":"code","a5e0a384":"code","261e4d61":"code","5fb03151":"code","9ea2efc7":"code","ad846ab6":"code","47f75259":"code","704a15f2":"code","fe37e05e":"code","f729368a":"code","c4c7ae62":"code","528e7e9c":"code","8063cfbb":"code","24206ed4":"code","d81e021d":"code","a316a115":"code","78da47c6":"code","87b7026c":"code","ca4b96af":"code","60650ca4":"code","a2b6d4a5":"code","c880d760":"code","3384dbfa":"code","edbf4032":"code","450becaf":"code","34efbd05":"code","4963c335":"code","bf275254":"code","120c05c9":"code","01fae3ed":"code","5063a071":"code","66fd86a9":"code","c09f4fa1":"code","f44a7833":"code","cfd6b203":"code","68b25a53":"code","fd1e8c42":"code","2bc93185":"code","194c7e5b":"code","05c3eaae":"code","d0e90e32":"code","2d75646d":"code","313fd2f6":"code","472523d6":"code","bd94f234":"code","0febf056":"code","7b7d3a23":"code","414088be":"code","ec0bac97":"code","b0d5678f":"code","a7e70dcf":"code","5441674f":"code","cca039ef":"code","73fb1f83":"code","7928ab41":"code","4c394884":"code","71b83d33":"code","a57c2843":"code","80676850":"code","7c07c120":"code","2667e3bd":"code","6c959259":"code","ae6dc385":"code","a9ad95da":"code","46696808":"markdown","4d638d9d":"markdown","cd0b16a7":"markdown","ff788815":"markdown","855d2a92":"markdown","c918e890":"markdown"},"source":{"0bdc6314":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nfrom sklearn.linear_model import Ridge,Lasso\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error ,r2_score\nfrom math import sqrt\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import KFold,GridSearchCV,RandomizedSearchCV\nfrom prettytable import PrettyTable\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\n!pip install openpyxl","16c80830":"data=pd.read_excel(\"\/kaggle\/input\/flight-fare-prediction-mh\/Data_Train.xlsx\")","3f25f742":"data.head(10)","f1154f97":" data.columns","b3d13ae6":"data.shape","a5e0a384":"data.describe()","261e4d61":"data.info()","5fb03151":"data.isnull().sum()","9ea2efc7":"data.dropna(inplace=True)","ad846ab6":"data[data.duplicated()]","47f75259":"data.drop_duplicates(keep=\"first\",inplace=True)","704a15f2":"data.head()","fe37e05e":"data.shape","f729368a":"values=data[\"Airline\"].value_counts().values\nlabels=data[\"Airline\"].value_counts().index\ncolor=data[\"Airline\"]\nfig=go.Figure(go.Pie(labels=labels,values=values,textinfo=\"label+percent\",marker=dict(colors=color)))\nfig.show()","c4c7ae62":"values=data[\"Additional_Info\"].value_counts().values\nlabels=data[\"Additional_Info\"].value_counts().index\ncolor=data[\"Additional_Info\"]\nfig=go.Figure(go.Pie(labels=labels,values=values,textinfo=\"label+percent\",marker=dict(colors=color)))\nfig.show()","528e7e9c":"data[\"Airline\"].unique()","8063cfbb":"data[\"Route\"].unique()","24206ed4":"test_data=pd.read_excel(\"\/kaggle\/input\/flight-fare-prediction-mh\/Test_set.xlsx\")","d81e021d":"test_data.head()","a316a115":"test_data.info()","78da47c6":"test_data.shape","87b7026c":"test_data.describe()","ca4b96af":"test_data.isnull().sum()","60650ca4":"sns.catplot(y=\"Price\",x=\"Airline\",data=data.sort_values(\"Price\",ascending=False),kind=\"boxen\",height=8,aspect=3)\nplt.show()","a2b6d4a5":"sns.catplot(y=\"Price\",x=\"Source\",data=data.sort_values(\"Price\",ascending=False),kind=\"violin\",height=8,aspect=3)\nplt.show()","c880d760":"sns.catplot(y=\"Price\",x=\"Destination\",data=data.sort_values(\"Price\",ascending=False),kind=\"box\",height=8,aspect=3)\nplt.show()","3384dbfa":"data.head()","edbf4032":"data[\"Duration\"]=data[\"Duration\"].str.replace(\"h\",\"*60\").str.replace(\" \",\"+\").str.replace(\"m\",\"*1\").apply(eval)\ntest_data[\"Duration\"]=test_data[\"Duration\"].str.replace(\"h\",\"*60\").str.replace(\" \",\"+\").str.replace(\"m\",\"*1\").apply(eval)","450becaf":"data.head()","34efbd05":"data[\"Journey_day\"] = data['Date_of_Journey'].str.split('\/').str[0].astype(int)\ndata[\"Journey_month\"] = data['Date_of_Journey'].str.split('\/').str[1].astype(int)\ndata.drop([\"Date_of_Journey\"], axis = 1, inplace = True)\n\n# Dep_Time\ndata[\"Dep_hour\"] = pd.to_datetime(data[\"Dep_Time\"]).dt.hour\ndata[\"Dep_min\"] = pd.to_datetime(data[\"Dep_Time\"]).dt.minute\ndata.drop([\"Dep_Time\"], axis = 1, inplace = True)\n\n# Arrival_Time\ndata[\"Arrival_hour\"] = pd.to_datetime(data.Arrival_Time).dt.hour\ndata[\"Arrival_min\"] = pd.to_datetime(data.Arrival_Time).dt.minute\ndata.drop([\"Arrival_Time\"], axis = 1, inplace = True)","4963c335":"data.head()","bf275254":"test_data[\"Journey_day\"] = test_data['Date_of_Journey'].str.split('\/').str[0].astype(int)\ntest_data[\"Journey_month\"] = test_data['Date_of_Journey'].str.split('\/').str[1].astype(int)\ntest_data.drop([\"Date_of_Journey\"], axis = 1, inplace = True)\n\n# Dep_Time\ntest_data[\"Dep_hour\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.hour\ntest_data[\"Dep_min\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.minute\ntest_data.drop([\"Dep_Time\"], axis = 1, inplace = True)\n\n# Arrival_Time\ntest_data[\"Arrival_hour\"] = pd.to_datetime(test_data.Arrival_Time).dt.hour\ntest_data[\"Arrival_min\"] = pd.to_datetime(test_data.Arrival_Time).dt.minute\ntest_data.drop([\"Arrival_Time\"], axis = 1, inplace = True)","120c05c9":"test_data.head()","01fae3ed":"plt.figure(figsize = (20, 8))\nplt.title('Count of flights month wise')\nax=sns.countplot(x = 'Journey_month', data = data)\nplt.xlabel('Month')\nplt.ylabel('Count of flights')\nfor p in ax.patches:\n    ax.annotate(int(p.get_height()), (p.get_x()+0.25, p.get_height()+1), va='bottom', color= 'black')","5063a071":"plt.figure(figsize = (20,5))\nplt.title('Count of flights with different Airlines')\nax=sns.countplot(x = 'Airline', data =data)\nplt.xlabel('Airline')\nplt.ylabel('Count of flights')\nplt.xticks(rotation = 45)\nfor p in ax.patches:\n    ax.annotate(int(p.get_height()), (p.get_x()+0.25, p.get_height()+1), va='bottom', color= 'black')","66fd86a9":"plt.figure(figsize = (15,4))\nplt.title('Price VS Airlines')\nplt.scatter(data['Airline'], data['Price'])\nplt.xticks\nplt.xlabel('Airline')\nplt.ylabel('Price of ticket')\nplt.xticks(rotation = 90)","c09f4fa1":"plt.figure(figsize=(17,17))\nsns.heatmap(data.corr(),annot=True,cmap=\"coolwarm\")\nplt.show()","f44a7833":"df=data.drop([\"Price\"],axis=1)\ntrain_categorical=df.select_dtypes(exclude=[\"int64\",\"float\",\"int32\"])\ntrain_numerical=df.select_dtypes(include=[\"int64\",\"float\",\"int32\"])\n\ntest_categorical=test_data.select_dtypes(exclude=[\"int64\",\"float\",\"int32\"])\ntest_numerical=test_data.select_dtypes(include=[\"int64\",\"float\",\"int32\"])","cfd6b203":"train_categorical","68b25a53":"le=LabelEncoder()\ntrain_categorical=train_categorical.apply(le.fit_transform)\ntest_categorical=test_categorical.apply(le.fit_transform)","fd1e8c42":"train_categorical","2bc93185":"train_numerical","194c7e5b":"x=pd.concat([train_categorical,train_numerical],axis=1)\ny=data[\"Price\"]\ntest_set=pd.concat([test_categorical,test_numerical],axis=1)","05c3eaae":"x.head()","d0e90e32":"y.head()","2d75646d":"test_set.head()","313fd2f6":"def percentage_error(y_true,y_pred):\n    y_true,y_pred=np.array(y_true),np.array(y_pred)\n    return np.mean(np.abs((y_true-y_pred)\/y_true))*100","472523d6":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)","bd94f234":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","0febf056":"params = {'alpha' : [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000]}\nridge_regressor = GridSearchCV(Ridge(), params, cv = 5, scoring = 'neg_mean_absolute_error', n_jobs = -1)\nridge_regressor.fit(x_train, y_train)","7b7d3a23":"y_train_pred = ridge_regressor.predict(x_train)\ny_test_pred = ridge_regressor.predict(x_test)","414088be":"print(\"Train Results for Ridge Regressor Model:\")\nprint(\"Root Mean Squared Error: \", sqrt(mean_squared_error(y_train.values, y_train_pred)))\nprint(\"Mean Absolute % Error: \", round(percentage_error(y_train.values, y_train_pred)))\nprint(\"R-Squared: \", r2_score(y_train.values, y_train_pred))","ec0bac97":"print(\"Test Results for Ridge Regressor Model:\")\nprint(\"Root Mean Squared Error: \", sqrt(mean_squared_error(y_test, y_test_pred)))\nprint(\"Mean Absolute % Error: \", round(percentage_error(y_test, y_test_pred)))\nprint(\"R-Squared: \", r2_score(y_test, y_test_pred))","b0d5678f":"params = {'alpha' : [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000]}\nlasso_regressor = GridSearchCV(Lasso(), params ,cv = 15,scoring = 'neg_mean_absolute_error', n_jobs = -1)\nlasso_regressor.fit(x_train, y_train)","a7e70dcf":"y_train_pred = lasso_regressor.predict(x_train)\ny_test_pred = lasso_regressor.predict(x_test)","5441674f":"print(\"Train Results for Lasso Regressor Model:\")\nprint(\"Root Mean Squared Error: \", sqrt(mean_squared_error(y_train.values, y_train_pred)))\nprint(\"Mean Absolute % Error: \", round(percentage_error(y_train.values, y_train_pred)))\nprint(\"R-Squared: \", r2_score(y_train.values, y_train_pred))","cca039ef":"print(\"Test Results for Lasso Regressor Model:\")\nprint(\"Root Mean squared Error: \", sqrt(mean_squared_error(y_test, y_test_pred)))\nprint(\"Mean Absolute % Error: \", round(percentage_error(y_test, y_test_pred)))\nprint(\"R-Squared: \", r2_score(y_test, y_test_pred))","73fb1f83":"depth = list(range(3,30))\nparam_grid = dict(max_depth = depth)\ntree = GridSearchCV(DecisionTreeRegressor(), param_grid, cv = 10)\ntree.fit(x_train,y_train)","7928ab41":"y_train_pred = tree.predict(x_train)\ny_test_pred = tree.predict(x_test)","4c394884":"print(\"Train Results for Decision Tree Regressor Model:\")\nprint(\"Root Mean squared Error: \", sqrt(mean_squared_error(y_train.values, y_train_pred)))\nprint(\"Mean Absolute % Error: \", round(percentage_error(y_train.values, y_train_pred)))\nprint(\"R-Squared: \", r2_score(y_train.values, y_train_pred))","71b83d33":"print(\"Test Results for Decision Tree Regressor Model:\")\nprint(\"Root Mean Squared Error: \", sqrt(mean_squared_error(y_test, y_test_pred)))\nprint(\"Mean Absolute % Error: \", round(percentage_error(y_test, y_test_pred)))\nprint(\"R-Squared: \", r2_score(y_test, y_test_pred))","a57c2843":"tuned_params = {'n_estimators': [100, 200, 300, 400, 500], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}\nrandom_regressor = RandomizedSearchCV(RandomForestRegressor(), tuned_params, n_iter = 20, scoring = 'neg_mean_absolute_error', cv = 5, n_jobs = -1)\nrandom_regressor.fit(x_train, y_train)","80676850":"y_train_pred = random_regressor.predict(x_train)\ny_test_pred = random_regressor.predict(x_test)","7c07c120":"print(\"Train Results for Random Forest Regressor Model:\")\nprint(\"Root Mean Squared Error: \", sqrt(mean_squared_error(y_train.values, y_train_pred)))\nprint(\"Mean Absolute % Error: \", round(percentage_error(y_train.values, y_train_pred)))\nprint(\"R-Squared: \", r2_score(y_train.values, y_train_pred))","2667e3bd":"print(\"Test Results for Random Forest Regressor Model:\")\nprint(\"Root Mean Squared Error: \", sqrt(mean_squared_error(y_test, y_test_pred)))\nprint(\"Mean Absolute % Error: \", round(percentage_error(y_test, y_test_pred)))\nprint(\"R-Squared: \", r2_score(y_test, y_test_pred))","6c959259":"x = PrettyTable()\nx.field_names = [\"Model Name\", \"Tr. RMSE\", \"Tr. MA%E\", \"Tr. R-Squared\", \"Te. RMSE\", \"Te. MA%E\", \"Te. R-Squared\",]\nx.add_row(['Ridge Regression','3548.08122','32','0.41497','3448.80250','32','0.42954'])\nx.add_row([\" ------------------------- \",\" ----------- \",\" ----------- \",\" ----------- \",\" ----------- \",\" ----------- \",\" ----------- \"])\nx.add_row(['Lasso Regression','3550.82030','32','0.41406','3453.32368','32','0.42804'])\nx.add_row([\" ------------------------- \",\" ----------- \",\" ----------- \",\" ----------- \",\" ----------- \",\" ----------- \",\" ----------- \"])\nx.add_row(['Decision Tree Regressor','907.10509','06','0.96176','1895.20505','10','0.82773'])\nx.add_row([\" ------------------------- \",\" ----------- \",\" ----------- \",\" ----------- \",\" ----------- \",\" ----------- \",\" ----------- \"])\nx.add_row(['Random Forest Regressor','640.12429','03','0.98095','1519.17978','08','0.88931'])\nprint(x)","ae6dc385":"import pickle\nfilename = 'decision_tree_model.sav'\npickle.dump(tree, open(filename, 'wb'))","a9ad95da":"filename1='random_forest_models.sav'\npickle.dump(random_regressor,open(filename1,'wb'))","46696808":"# random forest regressor and decision tree regressor are working well","4d638d9d":"# Random Forest Regressor","cd0b16a7":"# model comparisons","ff788815":"# ridge regression ","855d2a92":"# Lasso Regression","c918e890":"# Decision tree regressor"}}