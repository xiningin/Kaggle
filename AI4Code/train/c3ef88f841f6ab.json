{"cell_type":{"cce9fc35":"code","5bfb0192":"code","0526bf80":"code","adb885b2":"code","82359356":"code","ffbdc765":"code","bb9a6525":"code","8f45af4b":"code","fa212953":"code","be88b119":"code","0b914ced":"code","4eb0db78":"code","26ae447c":"code","0ff06ea9":"code","e4a08bff":"code","272327b5":"code","6bdba84a":"code","7cdf2032":"code","108d87f8":"code","b843d0ec":"code","f295763b":"code","5dd2f2b3":"code","7e49a060":"code","c83aeebb":"code","d703571c":"code","7318dd71":"code","f0cfdcab":"code","2286f928":"code","483f641d":"code","409fd431":"code","8371e47f":"code","d9d1ad34":"code","b6c75603":"code","caf3e99b":"code","6acb53ba":"code","9e9f1c80":"code","92db7f6b":"code","19bb5c22":"code","6a1153d9":"code","1c0177b7":"code","6dd35556":"code","611eb634":"code","88102200":"markdown","30277f34":"markdown","ff89f377":"markdown","a1adbf3b":"markdown","92d5c361":"markdown","5639be21":"markdown","40db0369":"markdown","128c4460":"markdown","b96047dc":"markdown","a0307809":"markdown","8cebe5c2":"markdown","6b5a2afe":"markdown","466fbfd8":"markdown"},"source":{"cce9fc35":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5bfb0192":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n%matplotlib inline\nwarnings.filterwarnings('ignore')","0526bf80":"loan=pd.read_csv(\"..\/input\/loan-prediction\/Loan Prediction Dataset.csv\")\nloan.head()","adb885b2":"loan.describe()","82359356":"loan.info()","ffbdc765":"loan.isnull().sum()","bb9a6525":"loan['LoanAmount']=loan['LoanAmount'].fillna(loan.LoanAmount.mean())\nloan['Loan_Amount_Term']=loan['Loan_Amount_Term'].fillna(loan.Loan_Amount_Term.mean())\nloan['Credit_History']=loan['Credit_History'].fillna(loan.Credit_History.mean())\n\nloan['Gender']=loan['Gender'].fillna(loan.Gender.mode()[0])\nloan['Self_Employed']=loan['Self_Employed'].fillna(loan.Self_Employed.mode()[0])\nloan['Dependents']=loan['Dependents'].fillna(loan.Dependents.mode()[0])\nloan['Married']=loan['Married'].fillna(loan.Married.mode()[0])","8f45af4b":"loan.isnull().sum()","fa212953":"box=['ApplicantIncome','CoapplicantIncome','LoanAmount']\nfig,ax=plt.subplots(1,3,figsize=(25,5))\nfor i,col in enumerate(box):\n    sns.boxplot(data=loan,y=col,x='Loan_Status',ax=ax[i])\nplt.subplots_adjust(hspace=2)","be88b119":"loan.head()","0b914ced":"sns.pairplot(data=loan,hue='Loan_Status')","4eb0db78":"sns.distplot(loan['ApplicantIncome'])","26ae447c":"sns.distplot(loan['CoapplicantIncome'])","0ff06ea9":"sns.distplot(loan['LoanAmount'])","e4a08bff":"loan['Loan_Amount_Term']=loan['Loan_Amount_Term']\/12","272327b5":"sns.distplot(loan['Loan_Amount_Term'])","6bdba84a":"sns.distplot(loan['Credit_History'])","7cdf2032":"loan['Total_Income']=loan['ApplicantIncome']+loan['CoapplicantIncome']\nloan.head()","108d87f8":"sns.distplot(loan['Total_Income'])","b843d0ec":"ai=np.percentile(loan.ApplicantIncome,[70])[0]\nloan.ApplicantIncome[(loan.ApplicantIncome>(3*ai))]=3*ai\n\ncai=np.percentile(loan.CoapplicantIncome,[75])[0]\nloan.CoapplicantIncome[(loan.CoapplicantIncome>(2.5*cai))]=2.5*cai\n\nla=np.percentile(loan.LoanAmount,[80])[0]\nloan.LoanAmount[(loan.LoanAmount>la)]=la\n\ntic=np.percentile(loan.Total_Income,[75])[0]\nloan.Total_Income[(loan.Total_Income >1.5*tic)]=1.5*tic","f295763b":"sns.distplot(loan['ApplicantIncome'])","5dd2f2b3":"sns.distplot(loan['CoapplicantIncome'])","7e49a060":"sns.distplot(loan['Loan_Amount_Term'])","c83aeebb":"loan['ApplicantIncomeLog']=np.log(loan['ApplicantIncome']+1)\nsns.distplot(loan['ApplicantIncomeLog'])","d703571c":"loan['CoapplicantIncomeLog']=np.log(loan['CoapplicantIncome']+1)\nsns.distplot(loan['CoapplicantIncomeLog'])","7318dd71":"loan['LoanAmountLog']=np.log(loan['LoanAmount']+1)\nsns.distplot(loan['LoanAmountLog'])","f0cfdcab":"loan['Loan_Amount_term_Log']=np.log(loan['Loan_Amount_Term']+1)\nsns.distplot(loan['Loan_Amount_term_Log'])","2286f928":"loan['Total_Income_Log']=np.log(loan['Total_Income']+1)\nsns.distplot(loan['Total_Income_Log'])","483f641d":"corr=loan.corr()\nplt.figure(figsize=(15,10))\nsns.heatmap(corr,annot=True)","409fd431":"loan.columns","8371e47f":"col=['ApplicantIncome','CoapplicantIncome','LoanAmount','Loan_Amount_Term','Loan_ID','Total_Income','Married','Gender']\nloan=loan.drop(columns=col,axis=1)","d9d1ad34":"from sklearn.preprocessing import LabelEncoder\nencode=LabelEncoder()\nloan['Dependents']=encode.fit_transform(loan['Dependents'])","b6c75603":"loan.columns","caf3e99b":"edu = pd.get_dummies(loan['Education'], prefix='Education')\nemp = pd.get_dummies(loan['Self_Employed'],prefix='Self_Employed')\narea = pd.get_dummies(loan['Property_Area'], prefix='Property_Area')\nstatus = pd.get_dummies(loan['Loan_Status'], prefix='Loan_Status')\n\nloan = pd.concat([loan,edu,emp,area,status],join='outer', axis=1)","6acb53ba":"loan.drop(['Education','Self_Employed','Property_Area','Loan_Status'],axis=1,inplace=True)","9e9f1c80":"loan.columns","92db7f6b":"loan.head()","19bb5c22":"loan.drop(['Education_Not Graduate','Self_Employed_No','Loan_Status_N'],axis=1,inplace=True)","6a1153d9":"x=loan.drop(columns=['Loan_Status_Y'],axis=1)\ny=loan['Loan_Status_Y']","1c0177b7":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.ensemble import RandomForestClassifier","6dd35556":"model1=RandomForestClassifier(n_estimators=100,min_samples_split=25,max_depth=9,max_features=1)\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)\nmodel1.fit(x_train,y_train)\npre=model1.predict(x_test)\nprint(classification_report(y_test,pre))\nprint(\"Accuracy is \",model1.score(x_test,y_test)*100)\nscore=cross_val_score(model1,x,y,cv=5)\nprint(\"Cross Validation is\",np.mean(score)*100)","611eb634":"from sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(model1, x_test, y_test)","88102200":"## Prediction Using Random Forest Classifier","30277f34":"# About data\nA Finance company deals in all home loans. They have presence across all urban, semi urban and rural areas. Customer first apply for home loan after that company validates the customer eligibility for loan. Company wants to automate the loan eligibility process (real time) based on customer detail provided while filling online application form. These details are Gender, Marital Status, Education, Number of Dependents, Income, Loan Amount, Credit History and others. To automate this process, they have given a problem to identify the customers segments, those are eligible for loan amount so that they can specifically target these customers.\n   This is a standard supervised classification task.A classification problem where we have to predict whether a loan would be approved or not. Below is the dataset attributes with description.\n   \nVariable | Description\n----------|--------------\nLoan_ID | Unique Loan ID\nGender | Male\/ Female\nMarried | Applicant married (Y\/N)\nDependents | Number of dependents\nEducation | Applicant Education (Graduate\/ Under Graduate)\nSelf_Employed | Self employed (Y\/N)\nApplicantIncome | Applicant income\nCoapplicantIncome | Coapplicant income\nLoanAmount | Loan amount in thousands\nLoan_Amount_Term | Term of loan in months\nCredit_History | credit history meets guidelines\nProperty_Area | Urban\/ Semi Urban\/ Rural\nLoan_Status | Loan approved (Y\/N)","ff89f377":"## **Using Label Encoding and One Hot encoding**","a1adbf3b":"# **Importing Necessary Libraries**","92d5c361":"## **Plotting Box plot for finding Outliers**","5639be21":"#### **Finding the total income**","40db0369":"## **Correlation plot**","128c4460":"## **Working with Null Values**","b96047dc":"## **Imputation of Null Values**","a0307809":"## **Distribution plot for Continous Data**","8cebe5c2":"### **Outliers treatment**","6b5a2afe":"#### **Converting Amount duration from month to year**","466fbfd8":"## Changing the values to log equivalent and plotting distribution plot"}}