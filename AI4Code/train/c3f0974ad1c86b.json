{"cell_type":{"64f5e6ce":"code","a77af5dd":"code","d47eaa23":"code","6d7cb0ca":"code","1c9f5a55":"code","9c4ada8e":"code","3ec1bf2a":"code","c0835e54":"code","a93c3a72":"code","ceb25c70":"code","ca167f20":"code","f4a24f43":"code","8df83408":"markdown","96fa060e":"markdown","e41260ed":"markdown","e19bda45":"markdown","016cb302":"markdown","ed9fded4":"markdown","0227b92c":"markdown","09904277":"markdown","f3ce8be5":"markdown","b3de0d73":"markdown","05502d3f":"markdown"},"source":{"64f5e6ce":"import os\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_log_error\nfrom catboost import CatBoostRegressor\nimport category_encoders as ce\n\npd.set_option('display.max_rows', None) ","a77af5dd":"import my_utils as my\ndir(my)","d47eaa23":"train_raw = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_raw = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint(train_raw.shape, test_raw.shape )\ntrain_raw.head(3).T","6d7cb0ca":"#get cols types\nnum_cols, obj_cols = my.col_types(test_raw)\n\n# #cols with missed\nmissed_cols = my.col_missed_two_df (train_raw, test_raw)\n\n# #Add columns to mark rows with missed values\ntrain_marked = my.encode_missed(train_raw, missed_cols)\ntest_marked = my.encode_missed(test_raw, missed_cols)\n\n# Fill missed string values by 'missed'\ntrain_filled = my.fill_na(train_marked, obj_cols, 'missed')\ntest_filled = my.fill_na(test_marked, obj_cols, 'missed')\n\n#Fill missed numeric values by 0\ntrain_complete = my.fill_na(train_marked, num_cols, 0)\ntest_complete = my.fill_na(test_marked, num_cols, 0)\n\ntrain_complete.head().T","1c9f5a55":"X = train_complete.drop(['SalePrice', 'Id'], axis = 1)\ny = train_complete['SalePrice']\n\nX_train, X_valid, y_train, y_valid = train_test_split (X, y, test_size=0.2, random_state=17)\n\nX_test = test_complete.drop(['Id'], axis = 1)","9c4ada8e":"encoder = ce.cat_boost.CatBoostEncoder()\nfitted = encoder.fit(X_train, y_train)\n\nX_enc = fitted.transform(X)\nX_train_enc = fitted.transform(X_train)\nX_valid_enc = fitted.transform(X_valid)\nX_test_enc = fitted.transform(X_test)","3ec1bf2a":"X_train_enc.head().T","c0835e54":"param = {'random_seed' : 17,\n         'thread_count' : 4,\n         'verbose' : 250}\nbase_model = CatBoostRegressor(**param)\nbase_result = base_model.fit(X_train_enc, y_train)\nbase_pred = base_model.predict(X_valid_enc)\nbase_score = mean_squared_log_error(y_valid, base_pred)\nprint ('OOF RMSLE for the baseline:', '%.5f' % (base_score ** 0.5)) # **0.5 is used to get root MSLE (RLMSE) from MSLE","a93c3a72":"pred = pd.DataFrame(base_model.predict(X_test_enc))\nsub = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsub['SalePrice'] = pred[0]\nsub.to_csv('submission_cb_base.csv', index = False)","ceb25c70":"model_gcv = CatBoostRegressor()\nparams_gcv = {\n            'learning_rate': [0.01], #[0.01, 0.03, 0.05, 0.1], \n            'iterations': [2000],    #  [1000,2000,3000]\n            'depth': [6],   #[2,4,6,8]\n            'l2_leaf_reg': [2], #[1,2,3,4]\n            'border_count': [254], #[127, 254]\n            'random_seed': [17],\n            'thread_count' : [4],\n            'early_stopping_rounds': [300], # [100, 200, 300]\n            'min_data_in_leaf': [1], # [1, 2, 3,4]\n            'max_leaves': [64], # [64,128]\n            'logging_level':['Silent'],\n            'use_best_model' : [False] # [True, False]\n            }\n\ngrid = GridSearchCV(estimator=model_gcv, param_grid=params_gcv, n_jobs=4, cv=3, scoring = 'neg_mean_squared_log_error')\ngrid.fit(X_train_enc, y_train)\npd.Series(grid.best_params_)","ca167f20":"pred_gcv = grid.predict(X_valid_enc)\nscore_gcv = mean_squared_log_error(y_valid, pred_gcv)\nprint ('OOF RMSLE for gridsearch:', '%.5f' % (score_gcv ** 0.5))","f4a24f43":"grid.fit(X_enc, y)\nfinal_test = pd.DataFrame(grid.predict(X_test_enc))\nsub = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsub['SalePrice'] = final_test[0]\nsub.to_csv('sub_cb_final.csv', index = False)","8df83408":"### Title\nThis is an example of a very basic use of Catboost Regressor for the House pricing competition<br>\nThe point of this exercise is not to deep dive in Catboost but to train custom functions importing from a script<br>\n[Here](https:\/\/www.kaggle.com\/paveltrusov\/my-utils) is the used script\n","96fa060e":"Encoding","e41260ed":"Predictions for baseline model","e19bda45":"Using functions from the script","016cb302":"Train\/validation splitting","ed9fded4":"### Grid search<br>\nTo save time I put values used for searching in comments.","0227b92c":"### CatBoost Baseline","09904277":"After submission the RLMSE scored is **0.12802**","f3ce8be5":"After submission the RLMSE scored is **0.12514**","b3de0d73":"Model fitting on a full train set and generating prediction for test","05502d3f":"Here is the script importing<br>\nTo do this I had to apply 'File > Add utility script' to upload the script in usr\/lib"}}