{"cell_type":{"f05c677e":"code","8306e84e":"code","26985032":"code","b2b19a28":"code","53335f37":"code","92d63501":"code","0d19171a":"code","31af35df":"code","88f29be2":"code","e60aeb1d":"code","00394184":"code","dcc06ddc":"code","6e383086":"code","1ea207ff":"code","b8bed68a":"code","3c2f3bec":"code","5c6a43df":"code","c4e1e1cc":"code","8c2d4dee":"code","42cf55fc":"markdown","1f8908c2":"markdown","4495e8b8":"markdown","10d00c27":"markdown","b3f37ddd":"markdown","fc427fad":"markdown","0f8aa8e2":"markdown","9a0ee80d":"markdown","ec61b539":"markdown","0f277350":"markdown","16f556e6":"markdown","b64a51c5":"markdown","3ce021fb":"markdown","50a4305c":"markdown","17cc5c2b":"markdown","99081627":"markdown"},"source":{"f05c677e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\nfrom wordcloud import WordCloud, STOPWORDS\nfrom collections import OrderedDict\nimport json\nfrom collections import defaultdict\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8306e84e":"data = pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")","26985032":"data.head()","b2b19a28":"data.info()","53335f37":"#we have a lot of null values for homepage\n#Checking effect on homepage on revenue\ndata['has_homepage'] = 0\ndata.loc[data['homepage'].isnull() == False, 'has_homepage'] = 1\n#Checking how homepage reflects on revenue\n\nprint('Number of null homepages in data = ',data[data.has_homepage==0]['id'].count(),'\/',(data.id).count())\nplt.figure(figsize=(6,12))\nplt.scatter(data.has_homepage, data.revenue, alpha=0.2,\n            s=50, cmap='viridis')\nplt.xlabel('Does homepage exist?')\nplt.ylabel('Total Revenue');\nplt.xticks(np.arange(2), ('No','Yes'))\ndata=data.drop(['has_homepage'],axis =1)\n","92d63501":"#Checking effect on tagline on revenue\ndata['has_tg'] = 0\ndata.loc[data['tagline'].isnull() == False, 'has_tg'] = 1\n\nprint('Number of null taglines in test = ',data[data.has_tg==0]['id'].count(),'\/',(data.id).count())\n\nplt.figure(figsize=(6,12))\nplt.scatter(data.has_tg, data.revenue, alpha=0.2,\n            s=50, cmap='viridis')\nplt.xlabel('Does tagline exist?')\nplt.ylabel('Total Revenue');\n\nplt.xticks(np.arange(2), ('No','Yes'))\ndata=data.drop(['has_tg'],axis =1)","0d19171a":"# Repeating same process for collections\ndata['has_collection'] = 0\ndata.loc[data['belongs_to_collection'].isnull() == False, 'has_collection'] = 1\nprint('Number of null collections in test = ',data[data.has_collection==0]['id'].count(),'\/',(data.id).count())\n\nplt.figure(figsize=(6,12))\nplt.scatter(data.has_collection, data.revenue, alpha=0.2,\n            s=50, cmap='viridis')\nplt.xlabel('Does collection exist?')\nplt.ylabel('Total Revenue');\n\nplt.xticks(np.arange(2), ('No','Yes'))\ndata=data.drop(['has_collection'],axis =1)","31af35df":"#Correlation between revenue, budget, popularity and runtime\ncol = ['revenue','budget','popularity','runtime']\nplt.subplots(figsize=(10, 8))\ncorr = data[col].corr()\nsns.heatmap(corr, xticklabels=col,yticklabels=col, linewidths=.5, cmap=\"Reds\")","88f29be2":"sns.regplot(x=\"budget\", y=\"revenue\", data=data)","e60aeb1d":"#Relation of revenue on day of week when movie was released\ndef get_day_of_week(row):\n    return pd.to_datetime(row.release_date).dayofweek\ndata['dow']= data.apply (lambda row: get_day_of_week(row), axis=1)\nrevenue_by_dow = data.groupby('dow')['revenue'].sum()\n# number_of_movies = data.groupby('dow')['revenue'].count()\ndays = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')\ny_pos = np.arange(len(revenue_by_dow))\nplt.figure(figsize=(15,10))\nplt.bar(y_pos, revenue_by_dow, align='center', alpha=0.5)\nplt.xticks(y_pos, days)\nplt.xlabel('Day of Week')\nplt.ylabel('Revenue')\nplt.title('Total Revenue by Day of Week')\nplt.show()","00394184":"plt.figure(figsize=(15,10))\nnumber_of_movies = data.groupby('dow')['revenue'].count()\nnormalized_revenue = revenue_by_dow\/number_of_movies\nplt.bar(y_pos, normalized_revenue, align='center', alpha=0.5)\nplt.xticks(y_pos, days)\nplt.xlabel('Day of Week')\nplt.ylabel('Revenue')\nplt.title('Normalized Revenue by Day of Week')\nplt.show()","dcc06ddc":"#Relation of revenue on day of week when movie was released\ndef get_year(row):\n    year = pd.to_datetime(row.release_date).year\n    if(year>2019):\n        return year-100\n    return year\ndata['year']= data.apply (lambda row: get_year(row), axis=1)\nrevenue_by_year = data.groupby('year')['revenue'].sum().reset_index()\nyears = list(revenue_by_year.year)\ny_pos = np.arange(revenue_by_year.revenue.count())\nplt.figure(figsize=(15,10))\nplt.bar(y_pos, revenue_by_year.revenue, align='center', alpha=0.5)\nplt.xticks(y_pos, np.array(years)%100, rotation='vertical')\nplt.xlabel('Year')\nplt.ylabel('Revenue')\nplt.title('Total Revenue by Year')\nplt.show()\n# revenue_by_year","6e383086":"mydict = defaultdict(int)\ndef populate_revenue_by_genre(row):\n    if not pd.isnull(row.genres):\n        my_genres = json.loads(row.genres.replace(\"\\'\", \"\\\"\"))\n        for genre in my_genres:\n            mydict[genre[\"name\"]]+=row.revenue\ndata.apply (lambda row: populate_revenue_by_genre(row), axis=1)\nplt.figure(figsize=(25,10))\n\ngenres = list(mydict.keys())\nrevenue_by_genre = list(mydict.values())\ny_pos = np.arange(len(genres))\nplt.bar(y_pos, revenue_by_genre, align='center', alpha=0.5)\nplt.xticks(y_pos, genres)\nplt.xlabel('Genres')\nplt.ylabel('Revenue')\nplt.title('Total Revenue by Genre')\nplt.show()\n","1ea207ff":"revenue_by_lang = data.groupby('original_language')['revenue'].sum().reset_index()\nnumber_of_languages = revenue_by_lang.revenue.count()\ny_pos = np.arange(number_of_languages)\nplt.figure(figsize=(15,10))\nplt.bar(y_pos, revenue_by_lang['revenue'], align='center', alpha=0.5)\nplt.xticks(y_pos, revenue_by_lang['original_language'])\nplt.xlabel('Languages')\nplt.ylabel('Revenue')\nplt.title('Total Revenue by Language')\nplt.show()","b8bed68a":"revenue_by_lang = revenue_by_lang[revenue_by_lang.original_language!='en']\nnumber_of_languages = revenue_by_lang.revenue.count()\ny_pos = np.arange(number_of_languages)\nplt.figure(figsize=(15,10))\nplt.bar(y_pos, revenue_by_lang['revenue'], align='center', alpha=0.5)\nplt.xticks(y_pos, revenue_by_lang['original_language'])\nplt.xlabel('Languages')\nplt.ylabel('Revenue')\nplt.title('Total Revenue by Language')\nplt.show()","3c2f3bec":"mydict = defaultdict(int)\ndef populate_revenue_by_company(row):\n    if not pd.isnull(row.production_companies):\n        try:\n            companies = json.loads(row.production_companies.replace(\"\\'\", \"\\\"\"))\n        except ValueError:\n            companies = []\n        for company in companies:\n            mydict[company[\"name\"]]+=row.revenue\ndata.apply (lambda row: populate_revenue_by_company(row), axis=1)\n\nplt.figure(figsize=(20,12))\n# rev_by_prod = pd.DataFrame.from_dict(mydict)\nax = sns.barplot(list(mydict.keys()), list(mydict.values()))\nplt.title(\"Movie revenue by production company\",fontsize=20)\n# loc, labels = plt.xticks()\nplt.xticks(fontsize=12,rotation=90)\nplt.show()\n","5c6a43df":"inflation_percents = np.array([0.94, 1.79, 0, 2.34, 1.14, -1.69, -1.72, 0.6, -6.4, -9.3, -10.3, 0.8, 1.5, 3.0, 1.4, 2.9, -2.8, 0.0, 0.7, 9.9, 9.0, 3.0, 2.3, 2.2, 18.1, 8.8, 3.0, -2.1, 5.9, 6.0, 0.8, 0.7, -0.7, 0.4, 3.0, 2.9, 1.8, 1.7, 1.4, 0.7, 1.3, 1.6, 1.0, 1.9, 3.5, 3.0, 4.7, 6.2, 5.6, 3.3, 3.4, 8.7, 12.3, 6.9, 4.9, 6.7, 9.0, 13.3, 12.5, 8.9, 3.8, 3.8, 3.9, 3.8, 1.1, 4.4, 4.4, 4.6, 6.1, 3.1, 2.9, 2.7, 2.7, 2.5, 3.3, 1.7, 1.6, 2.7, 3.4, 1.6, 2.4, 1.9, 3.3, 3.4, 2.5, 4.1, 0.1, 2.7, 1.5, 3.0, 1.7, 1.5, 0.8, 0.7, 2.1, 2.1, 1.9, 1.8])\ninflation_year = range(1921, 2019)\ninflation = dict(zip(inflation_year, inflation_percents))\ndef get_inflation(year):\n    return inflation.get(year)\n","c4e1e1cc":"mydict = defaultdict(int)\nfreqdict = defaultdict(int)\ndef populate_revenue_by_country(row):\n    if not pd.isnull(row.production_countries):\n        countries = json.loads(row.production_countries.replace(\"\\'\", \"\\\"\"))\n        for country in countries:\n            mydict[country[\"name\"]]+=row.revenue\n            freqdict[country[\"name\"]]+=1\ndata.apply (lambda row: populate_revenue_by_country(row), axis=1)\n\n# total_rev = list(mydict.values())\n# freq_country = list(freqdict.values())\n# normalized_rev = [x\/y for x, y in zip(total_rev, freq_country)]\n\n\nplt.figure(figsize=(20,12))\n# rev_by_prod = pd.DataFrame.from_dict(mydict)\nax = sns.barplot(list(mydict.keys()), list(mydict.values()))\nplt.title(\"Movie revenue by production country\",fontsize=20)\n# loc, labels = plt.xticks()\nplt.xticks(fontsize=12,rotation=90)\nplt.show()\n","8c2d4dee":"mydict.pop('United States of America', None)\nmydict.pop('United Kingdom', None)\nplt.figure(figsize=(20,12))\n# rev_by_prod = pd.DataFrame.from_dict(mydict)\nax = sns.barplot(list(mydict.keys()), list(mydict.values()))\nplt.title(\"Movie revenue by production country - {US, UK}\",fontsize=20)\n# loc, labels = plt.xticks()\nplt.xticks(fontsize=12,rotation=90)\nplt.show()\n","42cf55fc":"### Regression line of revenue using just budget","1f8908c2":"### Revenue vs Homepage","4495e8b8":"### Revenue by Year","10d00c27":"# Import and load Data","b3f37ddd":"### Revenue by language (excluding en)","fc427fad":"### Normalized Revenue by day of week","0f8aa8e2":"### Correlation between features","9a0ee80d":"### Revenue vs Production Company","ec61b539":"### Revenue by Production Country","0f277350":"### Create parameter for inflation","16f556e6":"### Revenue vs Collection","b64a51c5":"### Revenue by Language","3ce021fb":"### Revenue vs Tagline","50a4305c":"# Data Analysis #","17cc5c2b":"### Total Revenue by Day of Week","99081627":"### Revenue by genre"}}