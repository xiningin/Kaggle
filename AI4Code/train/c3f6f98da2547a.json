{"cell_type":{"f23a7e97":"code","96dbe45d":"code","21a068f1":"code","ca3d33de":"code","2f917cf6":"code","f0b16f98":"code","b5991bcb":"code","f0b1a9ad":"code","79556558":"code","291b8c65":"code","68d90ac5":"code","f3cda1f8":"code","10c0c1b6":"code","85685b3a":"code","90c1209d":"code","75c98598":"code","1c1deb4c":"code","52867996":"code","72647f48":"code","cf31e7eb":"code","224cdad0":"code","735a743b":"code","dd2a7896":"code","656ee346":"code","61ad4d57":"code","649a89f5":"code","b3457404":"code","d613c180":"markdown","495e0f62":"markdown","eae7f104":"markdown","e775b5d0":"markdown","6c94451a":"markdown","9a950511":"markdown","3a330267":"markdown"},"source":{"f23a7e97":"## Library-loading (\ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30)\nimport numpy as np # linear algebra (\uc120\ud615\ub300\uc218)\nimport pandas as pd # data processing, CSV file I\/O (\ub370\uc774\ud130 \ucc98\ub9ac, CSV\ud30c\uc77c \uc785\ucd9c\ub825)\nimport matplotlib.pyplot as plt # data visualization (\ub370\uc774\ud130 \uc2dc\uac01\ud654)\nimport seaborn as sns # data visualization (\ub370\uc774\ud130 \uc2dc\uac01\ud654)\n\n## Check the list of files (\ud30c\uc77c \ubaa9\ub85d \ud655\uc778\ud558\uae30)\nimport os\nprint(os.listdir(\"..\/input\"))","96dbe45d":"## Data-loading (\ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30)\n\n# Transaction data (\uac70\ub798 \ub370\uc774\ud130)\ntrain_transaction = pd.read_csv('..\/input\/train_transaction.csv', index_col='TransactionID')\ntest_transaction = pd.read_csv('..\/input\/test_transaction.csv', index_col='TransactionID')\n\n# Identity (\uc2dd\ubcc4 \ub370\uc774\ud130)\ntrain_identity = pd.read_csv('..\/input\/train_identity.csv', index_col='TransactionID')\ntest_identity = pd.read_csv('..\/input\/test_identity.csv', index_col='TransactionID') \n\n# Sample of submission file (\uc81c\ucd9c \ud30c\uc77c \uc0d8\ud50c)\nsample_submission = pd.read_csv('..\/input\/sample_submission.csv', index_col='TransactionID')","21a068f1":"# Data-checking (\ub370\uc774\ud130 \ud655\uc778\ud558\uae30)\ndef data_check(df):\n    print('rows:', df.shape[0], '\/ columns:', df.shape[1])\n\ndata_check(train_transaction)\ndata_check(test_transaction)\ndata_check(train_identity)\ndata_check(test_identity)\ndata_check(sample_submission)","ca3d33de":"## Data-merging (\ub370\uc774\ud130 \ud569\ucc28\uae30)\n\n# train = train_transaction + train_identity\ntrain = train_transaction.merge(train_identity, how='left', left_index=True, right_index=True)\n\n# test = test_transaction + test_identity\ntest = test_transaction.merge(test_identity, how='left', left_index=True, right_index=True)","2f917cf6":"## Data-checking (\ub370\uc774\ud130 \ud655\uc778\ud558\uae30)\ntrain.head()","f0b16f98":"## Data-checking (\ub370\uc774\ud130 \ud655\uc778\ud558\uae30)\ntrain.info()","b5991bcb":"## Missing-checking (\uacb0\uce21\uce58 \ud655\uc778\ud558\uae30)\n\n# Count the number of missing values (\uacb0\uce21\uce58 \uce74\uc6b4\ud305)\nmissing_df = train.isnull().sum().reset_index()\nmissing_df.columns = ['column', 'count']\n\n# Calculate the missing ratio (\uacb0\uce21\uce58 \ube44\uc728 \uacc4\uc0b0)\nmissing_df['ratio'] = missing_df['count'] \/ train.shape[0]\nmissing_df.head(10)","f0b1a9ad":"## Missing-checking (\uacb0\uce21\uce58 \ud655\uc778\ud558\uae30)\n\n# Visualize the missing ratio (\uacb0\uce21\uce58 \ube44\uc728 \uc2dc\uac01\ud654)\nmissing_df['ratio'].sort_values().plot(kind='bar');","79556558":"## Missing-checking (\uacb0\uce21\uce58 \ud655\uc778\ud558\uae30)\n\n# The columns with the missing_ratio of 0 (\uacb0\uce21\uce58 \ube44\uc728\uc774 0\uc778 \uceec\ub7fc)\nmissing_df[missing_df['ratio']==0]","291b8c65":"## Missing-checking (\uacb0\uce21\uce58 \ud655\uc778\ud558\uae30)\n\n# Visualize the missing ratio of 0 ~ 0.2 (\uacb0\uce21\uce58 \ube44\uc728\uc774 0 ~ 0.2\uc778 \ubd80\ubd84 \uc2dc\uac01\ud654)\nmissing_df[(missing_df['ratio']>0) & (missing_df['ratio']<=0.2)]['ratio'].sort_values().plot(kind='bar');","68d90ac5":"## Missing-checking (\uacb0\uce21\uce58 \ud655\uc778\ud558\uae30)\n\n# Visualize the missing ratio of 0 ~ 0.02 (\uacb0\uce21\uce58 \ube44\uc728\uc774 0 ~ 0.02\uc778 \ubd80\ubd84 \uc2dc\uac01\ud654)\nmissing_df[(missing_df['ratio']>0) & (missing_df['ratio']<=0.02)]['ratio'].sort_values().plot(kind='bar');","f3cda1f8":"missing_df[(missing_df['ratio']>0) & (missing_df['ratio']<=0.2)]","10c0c1b6":"missing_df[(missing_df['ratio']>0) & (missing_df['ratio']<=0.02)]","85685b3a":"missing_df.groupby('count').count()[missing_df.groupby('count').count()['column'] > 1].sort_values(['column'], ascending=[False])","90c1209d":"missing_df[missing_df['count']==12].sort_index()","75c98598":"missing_df[missing_df['count']==314].sort_index()","1c1deb4c":"missing_df[missing_df['count']==460110].sort_index()","52867996":"## Missing-checking (\uacb0\uce21\uce58 \ud655\uc778\ud558\uae30)\n\ncolumns_full = missing_df[missing_df['ratio']==0]['column'].tolist()\ncolumns_00_02 = missing_df[(missing_df['ratio']>0) & (missing_df['ratio']<=0.2)]['column'].tolist()\ncolumns_20_40 = missing_df[(missing_df['ratio']>0.2) & (missing_df['ratio']<=0.4)]['column'].tolist()\ncolumns_40_60 = missing_df[(missing_df['ratio']>0.4) & (missing_df['ratio']<=0.6)]['column'].tolist()\ncolumns_60_80 = missing_df[(missing_df['ratio']>0.6) & (missing_df['ratio']<=0.8)]['column'].tolist()\ncolumns_80_100 = missing_df[(missing_df['ratio']>0.8) & (missing_df['ratio']<=1.0)]['column'].tolist()","72647f48":"print(len(columns_full))\nprint(len(columns_00_02))\nprint(len(columns_20_40))\nprint(len(columns_40_60))\nprint(len(columns_60_80))\nprint(len(columns_80_100))","cf31e7eb":"columns_20_40","224cdad0":"train['isFraud'].value_counts()","735a743b":"# from sklearn import preprocessing\n# import xgboost as xgb","dd2a7896":"\n\n# print(train.shape)\n# print(test.shape)\n\n# y_train = train['isFraud'].copy()\n\n# # Drop target, fill in NaNs\n# X_train = train.drop('isFraud', axis=1)\n# X_test = test.copy()\n# X_train = X_train.fillna(-999)\n# X_test = X_test.fillna(-999)","656ee346":"# del train, test, train_transaction, train_identity, test_transaction, test_identity","61ad4d57":"# # Label Encoding\n# for f in X_train.columns:\n#     if X_train[f].dtype=='object' or X_test[f].dtype=='object': \n#         lbl = preprocessing.LabelEncoder()\n#         lbl.fit(list(X_train[f].values) + list(X_test[f].values))\n#         X_train[f] = lbl.transform(list(X_train[f].values))\n#         X_test[f] = lbl.transform(list(X_test[f].values))   ","649a89f5":"# clf = xgb.XGBClassifier(n_estimators=500,\n#                         n_jobs=4,\n#                         max_depth=9,\n#                         learning_rate=0.05,\n#                         subsample=0.9,\n#                         colsample_bytree=0.9,\n#                         missing=-999)\n\n# clf.fit(X_train, y_train)","b3457404":"# sample_submission['isFraud'] = clf.predict_proba(X_test)[:,1]\n# sample_submission.to_csv('simple_xgboost.csv')","d613c180":"#### The list of columns without the missingness (\uacb0\uce21\uce58\uac00 \uc5c6\ub294 \uceec\ub7fc \ub9ac\uc2a4\ud2b8)\n- isFraud\n- TransactionAmt\n- ProductCD\n- card1\n- C1~C14\n\n##### Total: 19","495e0f62":"# 2. EDA (Exploratory Data Analysis)","eae7f104":"### 2. Identity Table\n- Variables in this table are **identity information** associated with transactions\n- 1) **network connection information** (IP, ISP, Proxy, etc)\n- 2) **digital signature** (UA\/browser\/os\/version, etc) . \n- They're collected by Vesta\u2019s fraud protection system and digital security partners.\n- The field names are masked and pairwise dictionary will **not be provided** for privacy protection and contract agreement\n- **Categorical Features**: DeviceType, DeviceInfo, id12 - id38\n\n***\n\n### 2. \uc2dd\ubcc4 \uc815\ubcf4 \ud14c\uc774\ube14\n- \uac70\ub798\uc640 \uad00\ub828\ub41c **\uc2dd\ubcc4 \uc815\ubcf4**\n- 1) **\ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0 \uc815\ubcf4** (IP, ISP, Proxy \ub4f1\ub4f1)\n- 2) **\ub514\uc9c0\ud138 \uc11c\uba85 \uc815\ubcf4** (UA\/browser\/os\/version \ub4f1\ub4f1) \n- Vesta\uc0ac\uc758 \uc0ac\uae30 \ubc29\uc9c0 \uc2dc\uc2a4\ud15c \ubc0f \ub514\uc9c0\ud138 \ubcf4\uc548 \ud611\ub825\uc5c5\uccb4\uc5d0\uc11c \uc218\uc9d1\n- \uac1c\uc778 \uc815\ubcf4 \ubcf4\ud638 \ubc0f \uacc4\uc57d \ub3d9\uc758\ub85c \uc778\ud574 **\uc0c1\uc138\ud55c \ub0b4\uc6a9\uc740 \uc81c\uacf5\ub418\uc9c0 \uc54a\uc74c**\n- **\ubc94\uc8fc\ud615 \ubcc0\uc218**: DeviceType, DeviceInfo, id12 - id38","e775b5d0":"## 2) Official Data Description\n### 1. Transaction Table\n- **TransactionDT**: timedelta from a given reference datetime (not an actual timestamp)\n- **TransactionAMT**: transaction payment amount in USD\n- **ProductCD**: product code, the product for each transaction **(categorical)**\n- **card1 - card6**: payment card information, such as card type, card category, issue bank, country, etc. **(categorical)**\n- **addr**: address **(categorical)**\n- **dist**: distance\n- **P_ and (R__) emaildomain**: purchaser and recipient email domain **(categorical)**\n- **C1-C14**: counting, such as how many addresses are found to be associated with the payment card, etc. The actual meaning is masked.\n- **D1-D15**: timedelta, such as days between previous transaction, etc.\n- **M1-M9**: match, such as names on card and address, etc. **(categorical)**\n- **Vxxx**: Vesta engineered rich features, including ranking, counting, and other entity relations.\n\n***\n\n### 1. \uac70\ub798 \uc815\ubcf4 \ud14c\uc774\ube14\n- **TransactionDT**: \uc8fc\uc5b4\uc9c4 reference datetime\uc73c\ub85c\ubd80\ud130\uc758 timedelta \uac12 (\uc2e4\uc81c timestamp\uac00 \uc544\ub2d8)\n> timedelta \uac12\uc774\ub780? date, time \ub610\ub294 datetime \uc778\uc2a4\ud134\uc2a4 \uac04\uc758 \ucc28\uc774\ub97c \ub9c8\uc774\ud06c\ub85c\ucd08\ub85c \ub098\ud0c0\ub0b8 \uac12\n- **TransactionAMT**: \uacb0\uc81c \uae08\uc561 (\ub2e8\uc704: \ub2ec\ub7ec)\n- **ProductCD**: \uc81c\ud488 \ucf54\ub4dc **(\ubc94\uc8fc\ud615 \ubcc0\uc218)**\n- **card1 - card6**: \uacb0\uc81c \uce74\ub4dc \uc815\ubcf4 (\uc608\ub97c \ub4e4\uc5b4, \uce74\ub4dc \uc720\ud615, \ubc1c\ud589 \uc740\ud589, \uad6d\uac00 \ub4f1\ub4f1) **(\ubc94\uc8fc\ud615 \ubcc0\uc218)**\n- **addr**: \uc8fc\uc18c **(\ubc94\uc8fc\ud615 \ubcc0\uc218)**\n- **dist**: \uac70\ub9ac\n- **P_ and (R__) emaildomain**: \uad6c\ub9e4\uc790\uc640 \uc218\ucde8\uc778\uc758 \uc774\uba54\uc77c \ub3c4\uba54\uc778 **(\ubc94\uc8fc\ud615 \ubcc0\uc218)**\n- **C1-C14**: \uce74\uc6b4\ud305 \uc815\ubcf4 (\uc608\ub97c \ub4e4\uc5b4, \uacb0\uc81c \uce74\ub4dc\uc640 \uad00\ub828 \uc788\ub294 \uc8fc\uc18c\uc758 \uc218 \ub4f1\ub4f1) -> \uc2e4\uc81c \uc758\ubbf8\ub294 \uc228\uaca8\uc838 \uc788\uc74c\n- **D1-D15**: timedelta \uac12 (\uc608\ub97c \ub4e4\uc5b4, \uc774\uc804 \uac70\ub798\ud55c \ub0a0\uc9dc\uc640\uc758 \ucc28\uc774)\n- **M1-M9**: \uc77c\uce58 \uc815\ubcf4 (\uc608\ub97c \ub4e4\uc5b4, \uce74\ub4dc\uc5d0 \uc801\ud78c \uc774\ub984 \uc77c\uce58\ud558\ub294\uc9c0, \uc8fc\uc18c\uac00 \uc77c\uce58\ud558\ub294\uc9c0 \ub4f1\ub4f1) **(\ubc94\uc8fc\ud615 \ubcc0\uc218)**\n- **Vxxx**: Vesta\uc0ac\uc5d0\uc11c \ub9cc\ub4e4\uc5b4\ub0b8 \ubcc0\uc218 (\ub7ad\ud0b9, \uce74\uc6b4\ud305, \uad00\uacc4 \ub4f1\ub4f1)","6c94451a":"# 1. IEEE-CIS Fraud Detection Overview\n![Fraud](https:\/\/blogs.sas.com\/content\/saskorea\/files\/2019\/03\/%EC%82%AC%EA%B8%B01.jpg)\n\n- Can you detect **'fraud'** from customer transactions? \n- **IEEE-CIS?** IEEE Computational Intelligence Society\n- If you want to know 'Fraud Detection' more.. [Click here](https:\/\/searchsecurity.techtarget.com\/definition\/fraud-detection)\n***\n- \uace0\uac1d \uac70\ub798\uc5d0\uc11c '**\uc774\uc0c1 \uae08\uc735\uac70\ub798**'\ub97c \ud0d0\uc9c0\ud560 \uc218 \uc788\uc744\uae4c?\n- **IEEE-CIS\ub780?** \uc804\uc0b0 \uc815\ubcf4 \uad00\ub828 \ud559\ud68c\n- '\uc774\uc0c1 \uae08\uc735\uac70\ub798 \ud0d0\uc9c0'\uc5d0 \ub300\ud574\uc11c \ub354 \uc54c\uace0 \uc2f6\uc73c\uc2dc\uba74.. [\ud074\ub9ad](http:\/\/www.bloter.net\/archives\/296444)","9a950511":"#### Types of the columns (\ubcc0\uc218 \ud0c0\uc785)\n- The number of 'float64': 399 (\uc5f0\uc18d\ud615 \ubcc0\uc218 - \uc2e4\uc218) \n- The number of 'int64': 3  (\uc5f0\uc18d\ud615 \ubcc0\uc218 - \uc815\uc218)\n- The number of 'object': 31 (\ubc94\uc8fc\ud615 \ubcc0\uc218)","3a330267":"## 1) Official Description Summary\n- The cashier announces that your card has been declined.\n- You receive a text message from your bank **\"Press 1 if you really tried to spend $500 on cheddar cheese.\"**\n- This **fraud prevention system** is actually saving consumers millions of dollars per year. \n- In this competition, you'll benchmark **machine learning models** on a challenging large-scale dataset. The data comes from Vesta's real-world e-commerce transactions. \n***\n- \uce74\ub4dc \uacb0\uc81c\uac00 \uac70\ubd80\ub418\uc5c8\ub2e4\uace0 \ud569\ub2c8\ub2e4.\n- \uc7a0\uc2dc \ud6c4 \uc740\ud589\uc73c\ub85c\ubd80\ud130 \ub2e4\uc74c\uacfc \uac19\uc740 \ubb38\uc790\uac00 \uc654\uc2b5\ub2c8\ub2e4. **\"\uccb4\ub2e4 \uce58\uc988\uc5d0 500 \ub2ec\ub7ec\ub97c \uc815\ub9d0\ub85c \uc4f0\uc2dc\ub824\uba74 1\ubc88\uc744 \ub20c\ub7ec\uc8fc\uc138\uc694.\"**\n- \uc774\ub7ec\ud55c **\uc0ac\uae30 \ubc29\uc9c0 \uc2dc\uc2a4\ud15c**\uc774 \uc2e4\uc81c\ub85c \uc18c\ube44\uc790\ub4e4\uc758 \uc5f0\uac04 \uc218\ubc31\ub9cc \ub2ec\ub7ec\ub97c \uc808\uc57d\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n- \uc774\ubc88 \ub300\ud68c\ub294 Vesta\uc0ac\uc758 \uc2e4\uc81c \uc804\uc790\uc0c1\uac70\ub798 \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \uc0ac\uae30\ub97c \ud0d0\uc9c0\ud558\ub294 **\uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378**\uc744 \ub9cc\ub4dc\ub294 \ub300\ud68c\uc785\ub2c8\ub2e4."}}