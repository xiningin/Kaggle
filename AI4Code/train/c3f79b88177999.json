{"cell_type":{"e8f028bd":"code","eae4e884":"code","34eaf11a":"code","37d67405":"code","d8875516":"code","58bb855a":"code","45c7170c":"markdown","58fe057c":"markdown","75b7b0a4":"markdown","a56ef5c5":"markdown","30491d0c":"markdown","ca684033":"markdown","e1bcada4":"markdown","d22ba27c":"markdown","8ccf82c4":"markdown","d18f21b4":"markdown"},"source":{"e8f028bd":"import tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras # We use keras API to define our model","eae4e884":"model = tf.keras.Sequential([keras.layers.Dense(units = 1, input_shape = [1])]) ","34eaf11a":"\nmodel.compile(optimizer = 'sgd', loss = 'mean_squared_error') # 'sgd' stands for stochastic gradient descent","37d67405":"# Time to provide the data to our NN\n\nX = np.array([-1,0,1,2,3,4,5,6,7,8,9,10], dtype = float)\nY = np.array([-10,0,10,20,30,40,50,60,70,80,90,100], dtype = float)\n","d8875516":"# Training the NN\n\nmodel.fit(X,Y,epochs = 500)","58bb855a":"print(model.predict([25.0]))","45c7170c":"#### Let's compile our model by specifying an optimizer and loss function \n","58fe057c":"#### So now we have a model that is trained to learn the relationship between X and Y. Let's try to predict the value of X which the model have not seen before","75b7b0a4":"#### Let's start by importing some useful libraries\n","a56ef5c5":"#### We were expecting Y to be 250 but out NN gave us the value closeby to 250. This is because NN deals with probabilities. With only 12 data points, our model calculated that there is a very high probability that the relationship between X and Y is Y = 10X. As a result, the prediction for 25 is very close to 250 but not exactly 250. \n\n#### Feel free to write in the comments if you have any suggestions and comments. Thanks !","30491d0c":"#### Let's train our neural network...","ca684033":"#### One can see that as we started training our model, it made a very poor guess at the first epoch - loss value is huge. After few epochs, we see that the loss starts to go down and by the end of 500 epochs, loss is almost zero !","e1bcada4":"#### Let's now create the simplest possible neural network i.e., with 1 layer and 1 neuron\n> ","d22ba27c":"#### In the above cell, you can already guess the function by looking at the x and y values. ","8ccf82c4":"# \"Simple Neural Network\"\n> \"Simple neural network to predict the function f(x) = 10*x\"\n\n- toc: false\n- branch: master\n- badges: true\n- comments: true\n- categories: [fastpages, jupyter]\n- image: images\/some_folder\/your_image.png\n- hide: false\n- search_exclude: true\n- metadata_key1: metadata_value1\n- metadata_key2: metadata_value2","d18f21b4":"### In this notebook, we will use a very simple neural network to make predictions. We will see if our simple neural network can predict the function f(x) = 10*x. \n\n#### This notebook is motivated from one of the [videos](http:\/\/www.youtube.com\/watch?v=_Z9TRANg4c0) on Machine Learning Foundations by Google Developers.  "}}