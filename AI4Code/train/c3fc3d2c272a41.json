{"cell_type":{"56cc5d91":"code","0b28ef9d":"code","c42dd8e4":"code","bdaaeba2":"code","b3451880":"code","c2ea224f":"code","bfe20fd5":"code","63ecf48d":"code","9cd72ed2":"code","7b9606fc":"code","7f72de4f":"code","7331443f":"code","1a7c0998":"code","4f06ef00":"code","105b9e42":"code","b15c216c":"code","9f5c11d1":"code","72b08d62":"code","e872f53e":"code","39645e5a":"code","472c70d4":"code","3a5df7e8":"markdown","24d5ef10":"markdown","58dc16d7":"markdown","210d7918":"markdown","ac035e9d":"markdown","31214f5c":"markdown","5f2fd1d6":"markdown","4edbd149":"markdown","6380198b":"markdown"},"source":{"56cc5d91":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Conv2D ,Flatten,Dense,MaxPool2D,Dropout\nimport keras\nimport seaborn as sns","0b28ef9d":"\ntrain_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nprint(train_df.shape,test_df.shape)","c42dd8e4":"train_df.head()","bdaaeba2":"train_df.describe()","b3451880":"sns.countplot(train_df.label)","c2ea224f":"train_df['label'].value_counts()","bfe20fd5":"\ntrain_y =train_df['label']\n\ntrain_x = train_df.drop([\"label\"],axis=1).values\ntest_x = test_df.values\n\nprint(train_x.shape)\nprint(test_x.shape)","63ecf48d":"train_x=train_x\/255\ntest_x=test_x\/255\ntrain_x[0].shape","9cd72ed2":"train_x=train_x.reshape((42000,28,28,1))\ntest_x=test_x.reshape((28000,28,28,1))\ntrain_x.shape\n","7b9606fc":"f, ax = plt.subplots(2,4)\nf.set_size_inches(8,6)\n\nimg = train_df['label'].values\nk = 0\nfor i in range(2):\n    for j in range(4):\n        ax[i,j].set_xlabel(img[k])\n        ax[i,j].imshow(train_x[k].reshape(28,28))\n        k += 1\n    plt.tight_layout()","7f72de4f":"\nfrom sklearn.model_selection import train_test_split\n\ntrain_x,validation_x,train_y,validation_y=train_test_split(train_x, train_y,test_size = 0.2, random_state = 2)\nprint('training set')\nprint(train_x.shape)\nprint(train_y.shape)\nprint('cross-validation test')\nprint(validation_x.shape)\nprint(validation_y.shape)","7331443f":"input=train_x[0].shape\nmodel=Sequential()\nmodel.add(Conv2D( filters=32, kernel_size=(3,3), activation='relu',input_shape=input))\nmodel.add(Conv2D(64,(3,3), activation='relu'))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\n\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10,activation='softmax'))","1a7c0998":"model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","4f06ef00":"from tensorflow.keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","105b9e42":"model.summary()","b15c216c":"\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator \ndatagen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False,  \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=20,  \n        zoom_range = 0.10,  \n        width_shift_range=0.1,  \n        height_shift_range=0.1, \n        horizontal_flip=False,  \n        vertical_flip=False) \n\n\ndatagen.fit(train_x)\ntraining= model.fit(datagen.flow(train_x,train_y, batch_size = 128),\n                              epochs = 50,validation_data=(validation_x,validation_y),\n                               steps_per_epoch=230\n                              ,callbacks=[learning_rate_reduction])","9f5c11d1":"\n# comparing accuracy for training\nplt.plot(training.history['accuracy'])\nplt.plot(training.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train_x', 'test_x'], loc='upper left')\nplt.show()\n\n# comparing loss for training\nplt.plot(training.history['loss'])\nplt.plot(training.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n","72b08d62":"\nprint(\"Generating test predictions...\")\npreds = model.predict_classes(test_x, verbose=0)","e872f53e":"# Function to save result to a file\ndef write_preds(preds, fname):\n    pd.DataFrame({\"ImageId\": list(range(1,len(preds)+1)),\n                  \"Label\": preds}).to_csv(fname, index=False, header=True)\n# Write to file your test score for submission\nwrite_preds(preds, \"keras_kaggle_conv.csv\")","39645e5a":"from keras.utils.np_utils import to_categorical \n\ntrain_y = to_categorical(train_y)\nvalidation_y= to_categorical(validation_y)\ntrain_y.shape","472c70d4":"from sklearn.metrics import confusion_matrix\npredict = model.predict(validation_x)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(predict,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(validation_y,axis = 1) \n#Confusion matrix\ncm = confusion_matrix(Y_true, Y_pred_classes)\n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(cm, annot=True, linewidths=0.01,cmap=sns.cubehelix_palette(8),fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","3a5df7e8":"### convert to one-hot-encoding","24d5ef10":"### Confusion Matrix","58dc16d7":"# Beginner Friendly \n## MNIST dataset is considered a Hello world for the deep learning examples\n### Please upvote if you like it!!!","210d7918":"### cross-validation set","ac035e9d":"### Exploratory Data Analysis","31214f5c":"### Splitting the dataset","5f2fd1d6":"### Reshaping","4edbd149":"### Normalization","6380198b":"![](https:\/\/www.katacoda.com\/basiafusinska\/courses\/tensorflow-getting-started\/tensorflow-mnist-beginner\/assets\/MNIST-classification.png)"}}