{"cell_type":{"65bb41e6":"code","44619bee":"code","e3a151a9":"code","2eb31258":"code","116bb66e":"code","7bd9864f":"code","276e0c14":"code","b31802c8":"code","3e8321a5":"code","4942d9d9":"code","538d9ce7":"code","324be97c":"code","63644554":"code","2aff62ba":"code","2439f838":"code","59b5a62b":"code","2352b09b":"code","7230f4d5":"code","04781227":"code","8fffac23":"code","86f2363f":"code","29241c33":"code","74cd8466":"markdown","5f53b3f6":"markdown","807dcd3c":"markdown","c7a879fd":"markdown","46018050":"markdown","11caefec":"markdown","6c58eca0":"markdown","d874148e":"markdown","14b8dc35":"markdown","9064bf50":"markdown","b939234d":"markdown","7a89ce1a":"markdown","3388f406":"markdown","8db9b0d3":"markdown","449e00b4":"markdown","2c9b8bd8":"markdown"},"source":{"65bb41e6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport os\npath = '\/kaggle\/input\/ntt-data-global-ai-challenge-06-2020\/'\n        \nimport re\nimport warnings\nwarnings.filterwarnings('ignore')","44619bee":"pd.set_option('display.max_columns', None)\nco_trn = pd.read_csv(path + 'COVID-19_train.csv')\nco_tst = pd.read_csv(path + 'COVID-19_test.csv')\ncr_oil = pd.read_csv(path + 'Crude_oil_trend_From1986-10-16_To2020-03-31.csv')","e3a151a9":"# Setting index as Date and printing the head\nco_trn.set_index('Date', inplace = True)\nco_trn.head()","2eb31258":"# We can also see which countires have more number of cases in column wise\nco_trn_sorted = co_trn.loc[:,co_trn.max().sort_values(ascending = False).index]\nco_trn_sorted.head()","116bb66e":"# Selecting only total_cases and total_deaths from the dataframe\ncountries = co_trn.columns.tolist()\n\n# total_cases = co_trn.loc[:,countries[::4]]    Use this for total_cases\n# total_deaths = co_trn.loc[:,countries[2::4]]  Use this for total_deaths\n\n# Here we are selecting only total_cases and total_deaths of each country.\ncov_tc_td = co_trn.loc[:,countries[::2]]\ncov_tc_td.head()","7bd9864f":"cov_tc_td['Price'].plot(figsize = (15,4), title = 'Oil Price Index')\nplt.xticks(rotation = 60);\nplt.ylabel('Oil Price');","276e0c14":"cr_oil.set_index('Date', inplace = True)\ncr_oil['Price'].plot(title = 'Daily Crude Oil Index', figsize = (15,5))\nplt.xticks(rotation = 60);\nplt.ylabel('Oil Price');","b31802c8":"# Create figure with secondary y-axis.\nfig = make_subplots(specs = [[{'secondary_y' : True}]])\n\nfig.add_trace(go.Scatter(x = cov_tc_td.index, y = cov_tc_td.World_total_cases,\n                        mode = 'lines',\n                        name = 'World Total Cases'),\n             secondary_y = False)\nfig.add_trace(go.Scatter(x = cov_tc_td.index, y = cov_tc_td.Price,\n                        mode = 'lines',\n                        name = 'Oil Price'),\n             secondary_y = True)\n\n# Adding figure title\nfig.update_layout(title = '<b>World Total Cases Vs Oil Prices<\/b>')\n\n# Setting X-axis title\nfig.update_xaxes(title = '<b>Dates<\/b>')\n\n# Setting Y-axis labels\nfig.update_yaxes(title_text = '<b>Oil Price<\/b>', secondary_y = True)\nfig.update_yaxes(title_text = '<b>World Total Cases<\/b>', secondary_y = False)\n\n# Display the figure\nfig.show()","3e8321a5":"# Slicing dataframe with only [country]_total_cases\ntotal_cases = co_trn.loc[:,countries[::4]]    #Use this for total_cases\n\n# Let's remove the Date index and convert the date to pd.to_datetime() format.\ntotal_cases = total_cases.reset_index()\ntotal_cases['Date'] = pd.to_datetime(total_cases['Date'])\ntotal_cases_till_date = total_cases[total_cases.Date == total_cases.Date.max()]\n\n# # Now Let's melt the dataframe i.e swapping columns to rows\ntotal_cases_till_date = total_cases_till_date.melt(id_vars = 'Date', var_name = 'Countries', value_name = 'Confirmed_Cases')\ntotal_cases_till_date.sort_values(by = 'Confirmed_Cases', ascending = False, inplace = True)\ntotal_cases_till_date.head()","4942d9d9":"# Now Let's remove the Country names that ended with _total_cases\n\ndef try_extract(pattern, string):\n    try:\n        m = pattern.search(string)\n        return m.group(0)\n    except (TypeError, ValueError, AttributeError):\n        return np.nan\n\np = re.compile(r'[a-zA-Z]*(?=_)')\ntotal_cases_till_date['Countries'] = [try_extract(p, x) for x in total_cases_till_date['Countries']]\ntotal_cases_till_date.head()","538d9ce7":"# Now We can print the top 30 countries that has recorded Confirmed_Cases till date \n\n# Uncomment the below lines so that you can see the bar chart of Top 30 countries of Confirmed_Cases\n\n# fig = px.bar(total_cases_till_date[1:30], x = 'Countries', y = 'Confirmed_Cases',\n#             hover_data = ['Countries', 'Confirmed_Cases'], color = 'Confirmed_Cases',\n#             color_continuous_scale = px.colors.diverging.Portland,\n#             title = '<b>Top 30 Countries of Confirmed Cases<\/b>')\n# fig.show()","324be97c":"# Slicing the dataframe with only [country]_total_deaths\ntotal_deaths = co_trn.loc[:, countries[2::4]]\n\ntotal_deaths = total_deaths.reset_index()\ntotal_deaths['Date'] = pd.to_datetime(total_deaths['Date'])\ntotal_deaths_till_date = total_deaths[total_deaths['Date'] == total_deaths['Date'].max()]\n\n# Now Let's melt the dataframe i.e swapping columns to rows\ntotal_deaths_till_date = total_deaths_till_date.melt(id_vars = 'Date', var_name = 'Countries', value_name = 'Confirmed_Deaths')\ntotal_deaths_till_date.sort_values(by = 'Confirmed_Deaths', ascending = False, inplace = True)\ntotal_deaths_till_date.head()","63644554":"total_deaths_till_date['Countries'] = [try_extract(p, x) for x in total_deaths_till_date['Countries']]\ntotal_deaths_till_date.head()","2aff62ba":"# Now We can also print the top 30 countries that has recorded Confirmed_Deaths till date \n\n# Uncomment the below lines so that you can see the bar chart of Top 30 countries of Confirmed_Cases\n\n# fig = px.bar(total_deaths_till_date[1:30], x = 'Countries', y = 'Confirmed_Deaths',\n#             hover_data = ['Countries', 'Confirmed_Deaths'], color = 'Confirmed_Deaths',\n#             color_continuous_scale = px.colors.diverging.Portland,\n#             title = '<b>Top 30 Countries of Confirmed Deaths<\/b>')\n# fig.show()","2439f838":"# Now merge the two dataframes of total_cases and total_deaths so that we can plot a stacked bar chart of Confirmed_Cases \n# and Confirmed_Deaths\ntotal_cd_till_date = pd.merge(total_cases_till_date, total_deaths_till_date, on = ['Date', 'Countries'], how = 'left')\ntotal_cd_till_date.head()","59b5a62b":"# Now Let's plot the stacked barchart for the above dataframe\nfig = go.Figure(data = [\n    go.Bar(name = 'Confirmed Cases',\n           x = total_cd_till_date['Countries'][1:30],\n           y = total_cd_till_date['Confirmed_Cases'][1:30],                     \n           text = total_cd_till_date['Confirmed_Cases'][1:30],\n           textposition = 'inside'),\n    go.Bar(name = 'Confirmed Deaths',\n           x = total_cd_till_date['Countries'][1:30],\n           y = total_cd_till_date['Confirmed_Deaths'][1:30],                      \n           text = total_cd_till_date['Confirmed_Deaths'][1:30],\n           textposition = 'inside')\n])\n# Changing the bar mode\nfig.update_layout(barmode = 'stack',\n                  title = '<b>Stacked Bar Chart of Top 30 Countries<\/b>',\n                  xaxis_title = '<b>Countries<\/b>',\n                  yaxis_title = '<b>Confirmed Cases and Deaths<\/b>')\nfig.show()","2352b09b":"total_cases_melt = total_cases.melt(id_vars = ['Date', 'Price'], var_name = 'Countries', value_name = 'Confirmed_Cases')\ntotal_cases_melt.sort_values(by = 'Confirmed_Cases', ascending = False)\n\ntotal_cases_melt['Countries'] = [try_extract(p, x) for x in total_cases_melt['Countries']]\ntotal_cases_melt.head()","7230f4d5":"total_deaths['Price'] = co_trn['Price'].values\ntotal_deaths_melt = total_deaths.melt(id_vars = ['Date', 'Price'], var_name = 'Countries', value_name = 'Confirmed_Deaths')\ntotal_deaths_melt.sort_values(by = 'Confirmed_Deaths', ascending = False)\n\ntotal_deaths_melt['Countries'] = [try_extract(p, x) for x in total_deaths_melt['Countries']]\ntotal_deaths_melt.head()","04781227":"total_cd_melt = pd.merge(total_cases_melt, total_deaths_melt, on = ['Date', 'Price', 'Countries'], how = 'left')\ntotal_cd_melt.sort_values(by = 'Confirmed_Cases', ascending = False)\ntotal_cd_melt.head()","8fffac23":"total_cd_melt['Date'].dtype","86f2363f":"# Here total_cd_melt['Date'] series datatype is DateTimeIndex. To plot a geographical map with animation_frame = 'Date',\n# we need to convert the DateTimeIndex to string type. The below steps are the process..\n\ntotal_cd_melt['Date'] = total_cd_melt['Date'].apply(lambda x: str(x).split()[0])\ntotal_cd_melt = total_cd_melt[total_cd_melt['Countries'] != 'World']","29241c33":"fig = px.scatter_geo(total_cd_melt,\n                     locations = 'Countries',\n                     locationmode = 'country names',\n                     color = 'Confirmed_Cases',\n                     hover_name = 'Countries',\n                     hover_data = ['Confirmed_Deaths','Price'],\n                     size = 'Confirmed_Cases',\n                     animation_frame = 'Date',\n                     color_continuous_scale = px.colors.diverging.Portland,\n                     title = '<b>Spread of Corona Virus accross the Globe<\/b>',\n                     projection = 'natural earth')\n\n\nfig.show()","74cd8466":"**We can see clearly now how COVID-19 has shown impact on Oil Price.**\n* So according to the above visualization we can say one thing is, as long as this COVID-19 continues, the demand of Crude Oil Price remains down.","5f53b3f6":"**According to the challenge we need to predict the Oil Price based on Covid-19 Impact, so Let us First see how Oil Price is varying.** ","807dcd3c":"## Identifying which countries have more number of cases and deaths","c7a879fd":"* The above **Stacked Bar Chart** shows the cases and deaths of each country that has recorded maximum till date.\n* Now we will see how cases and deaths have increased in each country from start date to till provided date on geographical map. In order to plot on geographical map some more Data Preprocessing should be done.","46018050":"## Data Preprocessing..","11caefec":"* By seeing above figure, during COVID-19 period, Oil Prices are gradually decreasing.","6c58eca0":"## Import Required Libraries","d874148e":"### First Let's take only Total_cases","14b8dc35":"**Very Soon Data Modeling Notebook will be uploaded..**\n* If any changes and more details regarding Data Preprocessing are required put it in the comment section.\n* Do Upvote the kernel if you liked it.","9064bf50":"**Bubble Map**. For more info check this [link](https:\/\/plotly.com\/python\/bubble-maps\/)","b939234d":"## Data Modeling","7a89ce1a":"**Now Let's analyze the crude oil trend from the year 1986 to till date**","3388f406":"### Stacked Bar chart of Confirmed Cases and Deaths.","8db9b0d3":"**For more info on making subplots. Refer this [Link](https:\/\/plotly.com\/python\/multiple-axes\/#two-y-axes)**","449e00b4":"### Total_deaths","2c9b8bd8":"### Now Let's see how COVID-19 shown impact on Crude Oil Prices"}}