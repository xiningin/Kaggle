{"cell_type":{"1a7fd203":"code","5e7963be":"code","09e3e802":"code","0d8e8c90":"code","5677b4ee":"code","e1b60cd8":"code","feb1535c":"code","9b26f49b":"code","341f6673":"code","a0d70071":"code","afd61245":"code","b9b2c30c":"code","d8084134":"code","acc6558d":"markdown","c694188d":"markdown","2c93a290":"markdown"},"source":{"1a7fd203":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e7963be":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt","09e3e802":"# get imagefile \nimage = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\n\n# create the sharpen kernel\nsharpen_kernel = np.array([[-1,-1,-1], \n                           [-1, 9,-1],\n                           [-1,-1,-1]])\n#apply the sharpen kernel\nsharpened = cv2.filter2D(image, -1, sharpen_kernel)\n","0d8e8c90":"plt.figure(figsize=(8,8))\nplt.imshow(image)\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(8,8))\nplt.imshow(sharpened)\nplt.title('Sharpen Image'), plt.xticks([]), plt.yticks([])","5677b4ee":"i = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nig = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\ni = i.sum(axis=-1)","e1b60cd8":"def blur(i):\n    for x in range(1,i.shape[0]-1):\n        for y in range(1,i.shape[1]-1):\n            i[x,y] = (10*i[x,y] + i[x-1,y] + i[x+1,y] + i[x,y-1] + i[x,y+1])\/5.0\n    return i","feb1535c":"%timeit blur(i)","9b26f49b":"plt.figure(figsize=(8,8))\nplt.imshow(ig, cmap=\"gray\")\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nblur(i)\nblur(i)\nblur(i)\nplt.figure(figsize=(8,8))\nplt.imshow(i, cmap=\"gray\")\nplt.title('Blur Image'), plt.xticks([]), plt.yticks([])","341f6673":"img = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)","a0d70071":"edge_Canny = cv2.Canny(img_gray,100,200)","afd61245":"sobel_x = cv2.Sobel(img_gray,cv2.CV_64F,1,0,ksize=5)\nsobel_y = cv2.Sobel(img_gray,cv2.CV_64F,0,1,ksize=5)","b9b2c30c":"def filter2d(src, kernel):\n    m, n = kernel.shape\n\n    q = int((m-1)\/2)\n    r, s = src.shape[0], src.shape[1]\n\n    app = np.zeros((r, s))\n\n    for y in range(q, r - q):\n        for x in range(q, s - q):\n           \n            app[y][x] = np.sum(src[y-q:y+q+1, x-q:x+q+1]*kernel)\n\n    return app\n\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nkernel = np.array([[1, 1,  1],\n                   [1, -8, 1],\n                   [1, 1,  1]])\n\napp = filter2d(gray, kernel)","d8084134":"plt.figure(figsize=(8,8))\nplt.subplot(2,2,1),plt.imshow(edge_Canny,cmap = 'gray')\nplt.title('Canny Image'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(8,8))\nplt.subplot(2,2,2),plt.imshow(sobel_x,cmap = 'gray')\nplt.title('Sobel X Image'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(8,8))\nplt.subplot(2,2,3),plt.imshow(sobel_y,cmap = 'gray')\nplt.title('Sobel Y Image'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(8,8))\nplt.subplot(2,2,4),plt.imshow(app,cmap = 'gray')\nplt.title('Laplacian Image'), plt.xticks([]), plt.yticks([])\n\nplt.show()","acc6558d":"========= IMAGE SHARPENING ==========","c694188d":"========= IMAGE BLURRING ==========","2c93a290":"========= IMAGE EDGE DETECTION =========="}}