{"cell_type":{"91111a4a":"code","a2215f86":"code","8d5c9f58":"code","7a9f32dd":"code","3826364c":"code","776bb67c":"code","b10d2679":"code","ce813278":"code","5913e745":"code","f69d30e3":"code","9d4bb329":"code","c285710d":"code","a19737f2":"code","8c8c4535":"code","d05e5ccf":"code","72002cf8":"code","6bce0ca4":"code","7c581de9":"code","5900f428":"code","00d2b5c8":"code","6424f3a9":"code","0ef29952":"code","d38567d9":"code","9409e7be":"code","16a478a5":"code","da60a5a8":"code","a8ecfa9c":"code","76d008da":"code","9581b155":"code","444ed46e":"code","40844f9a":"code","4b277a46":"code","254f7207":"code","f3b482fd":"code","952380e1":"code","fd93656d":"code","ce7d45ef":"code","9b22d912":"code","cd9591ca":"code","8d2f9c57":"code","915abeb5":"code","4bcd1861":"code","686f0f47":"code","fd65ee04":"code","fb3f8396":"code","5a019fd5":"code","67d34358":"code","6c09bd8a":"code","53ff4d4c":"code","3603b6c7":"code","0502bc75":"code","4c4068d5":"code","a0c32d17":"code","b77a1da3":"code","664be50a":"code","0f251541":"code","95d9b4c1":"code","ff38e961":"code","f9ce38f0":"code","2e824434":"code","8c0bf50b":"code","3c9ad0b0":"code","ba5ce4cb":"code","ff2571ea":"code","9bfdfb7d":"code","6b6d4a16":"code","095e08f6":"code","cc799a92":"code","16014aff":"code","2dcb9dea":"code","05938177":"code","335f1715":"code","aa46fc06":"code","9dbc9db2":"code","fa3208dd":"code","272fbc3e":"code","f07e07c4":"code","ab9e78de":"code","6a38ac5a":"code","e2b3da0b":"code","25d42abb":"code","e03a6c8f":"code","27824495":"code","e82d27a8":"code","36b7d23c":"code","e8f003fb":"code","a8773354":"code","1f06bf32":"code","4fc2b39c":"markdown","3ed26d20":"markdown","fcc443c7":"markdown","85e6ead8":"markdown","9b614c7b":"markdown","d02757cd":"markdown","1b838e8d":"markdown","6c078c93":"markdown","0e556e5b":"markdown","6b88218b":"markdown","e9d9b3df":"markdown","474f2c0e":"markdown","56b83f02":"markdown","f8ef953d":"markdown","da960276":"markdown","2139a645":"markdown","b294ccc9":"markdown","70660670":"markdown","28260237":"markdown","5e7bea1a":"markdown","285a2d15":"markdown","30729928":"markdown","eaec42a0":"markdown","21b29da6":"markdown","44d1525b":"markdown","f5ffcdbd":"markdown","d2d52ea0":"markdown","f586a6de":"markdown","5b5becd7":"markdown","0616c99c":"markdown","82e0a32d":"markdown","fb33697e":"markdown","237b7ecc":"markdown","48b6b677":"markdown","060c5fdf":"markdown","258a8c2b":"markdown","0f45be7f":"markdown","54bd44d7":"markdown","f0389393":"markdown","de16d60e":"markdown","97eb8874":"markdown","96706e61":"markdown","3ca3f8c5":"markdown","cf00f8aa":"markdown","7f7dad0e":"markdown","43681024":"markdown","edd4eb8a":"markdown","32cba1d8":"markdown","1af3e741":"markdown","fc61d9fc":"markdown","9562b2c8":"markdown","3317b22a":"markdown","a30fb148":"markdown","a29eb855":"markdown"},"source":{"91111a4a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\n%matplotlib inline","a2215f86":"from sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV","8d5c9f58":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.linear_model import Ridge\nfrom sklearn.svm import SVR\n\nfrom sklearn.neural_network import MLPRegressor","7a9f32dd":"sns.set_style(\"whitegrid\")","3826364c":"pd.pandas.set_option('display.max_columns', None)","776bb67c":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","b10d2679":"train.head()","ce813278":"test.head()","5913e745":"# Train DF rows\nlen(train.axes[0])","f69d30e3":"# Train DF columns\nlen(train.axes[1])","9d4bb329":"# Test DF rows\nlen(test.axes[0])","c285710d":"# Test DF columns\nlen(test.axes[1])","a19737f2":"train.info()","8c8c4535":"test.info()","d05e5ccf":"train.describe().T","72002cf8":"test.describe().T","6bce0ca4":"all_vars = list(train.columns.values)\nall_vars","7c581de9":"num_vars = list(train.select_dtypes(include=np.number).columns.values)\nnum_vars","5900f428":"cat_vars = [c for c in all_vars if c not in num_vars]\ncat_vars","00d2b5c8":"train.isnull().values.sum()","6424f3a9":"test.isnull().values.sum()","0ef29952":"with pd.option_context('display.max_rows', None, 'display.max_columns', None):\n    print(train.isna().sum())","d38567d9":"with pd.option_context('display.max_rows', None, 'display.max_columns', None):\n    print(test.isna().sum())","9409e7be":"# Numerical Null values in Train DF\nmsno.matrix(train[num_vars])","16a478a5":"# Categorical Null values in Train DF\nmsno.matrix(train[cat_vars])","da60a5a8":"# Numerical Null values in Test DF\nmsno.matrix(test[num_vars[:-1]])","a8ecfa9c":"# Categorical Null values in Test DF\nmsno.matrix(test[cat_vars])","76d008da":"plt.figure(figsize=(12, 10))\nsns.heatmap(train[num_vars].corr(), linewidths=0.5, cmap=\"Blues\")","9581b155":"plt.figure(figsize=(12, 10))\nsns.heatmap(test[num_vars[:-1]].corr(),linewidths=0.5 , cmap=\"Blues\")","444ed46e":"train_num = train[num_vars]\ntrain_cat = train[cat_vars]\ntest_num = test[num_vars[:-1]]\ntest_cat = test[cat_vars]","40844f9a":"for i in train_num.columns[1:]:\n    plt.hist(train_num[i])\n    plt.title(i)\n    plt.show()","4b277a46":"for i in test_num.columns[1:]:\n    plt.hist(test_num[i])\n    plt.title(i)\n    plt.show()","254f7207":"for i in train_cat.columns:\n    sns.barplot(x=train_cat[i].value_counts().index,\n               y=train_cat[i].value_counts()).set_title(i)\n    plt.show()","f3b482fd":"for i in test_cat.columns:\n    sns.barplot(x=test_cat[i].value_counts().index,\n               y=test_cat[i].value_counts()).set_title(i)\n    plt.show()","952380e1":"# function for adding '_is_missing' column\ndef add_is_missing(df, column):\n    df[column + '_missing'] = df[column].apply(lambda x: 1 if pd.isnull(x) else 0)","fd93656d":"new_train = train.copy()","ce7d45ef":"new_train[cat_vars].head().T","9b22d912":"cat_vars","cd9591ca":"nominal_vars = ['MSZoning', 'Alley', 'LotShape', 'LotConfig', 'LandSlope', 'Neighborhood', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'Electrical', 'Functional', 'GarageType', 'Fence', 'MiscFeature', 'SaleType', 'SaleCondition', 'LandContour', 'Condition1', 'Condition2']","8d2f9c57":"ordinal_vars = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'HeatingQC', 'KitchenQual', 'FireplaceQu', 'GarageQual', 'GarageCond', 'PoolQC']","915abeb5":"new_train['Pave_Street'] = new_train['Street'].apply(lambda x: 1 if x=='Pave' else 0)\nnew_train.drop(['Street'], axis=1, inplace=True)\n\nnew_train['AllPub'] = new_train['Utilities'].apply(lambda x: 1 if x=='AllPub' else 0)\nnew_train.drop(['Utilities'], axis=1, inplace=True)\n\nnew_train['CentralAir'] = new_train['CentralAir'].apply(lambda x: 1 if 'Y' else 0)\n\nnew_train['GarageFinished'] = new_train['GarageFinish'].apply(lambda x: 1 if 'Fin' else 0)\nnew_train['GarageRfn'] = new_train['GarageFinish'].apply(lambda x: 1 if 'Rfn' else 0)\nnew_train.drop(['GarageFinish'], axis=1, inplace=True)\n\nnew_train['HasPavedDrive'] = new_train['PavedDrive'].apply(lambda x: 1 if 'Y' else 0)\nnew_train['PavedDrive_P'] = new_train['PavedDrive'].apply(lambda x: 1 if 'P' else 0)\nnew_train.drop(['PavedDrive'], axis=1, inplace=True)","4bcd1861":"new_train.head().T","686f0f47":"new_train[nominal_vars].head(10).T","fd65ee04":"new_train[ordinal_vars].head(10).T","fb3f8396":"for col in nominal_vars:\n    add_is_missing(new_train, col)\n    new_train[col].fillna('missing', inplace=True)\n    \n    y = pd.get_dummies(new_train[col], prefix=col)\n    new_train.append(y)\n\nnew_train.drop(nominal_vars, axis=1, inplace=True);","5a019fd5":"ordinal_vars","67d34358":"def quality(x):\n    quality_list = ['Ex', 'Gd', 'TA', 'Fa']\n    for idx, i in enumerate(quality_list):\n        if(i==x):\n            return(4-idx)\n    return(0)","6c09bd8a":"new_train['ExterQual'] = new_train['ExterQual'].apply(lambda x: quality(x))\nnew_train['ExterCond'] = new_train['ExterCond'].apply(lambda x: quality(x))\nnew_train['BsmtQual'] = new_train['BsmtQual'].apply(lambda x: quality(x))\nnew_train['BsmtCond'] = new_train['BsmtCond'].apply(lambda x: quality(x))\nnew_train['BsmtExposure'] = new_train['BsmtExposure'].apply(lambda x: 4 if x=='Gd' else 3 if x=='Av' else 2 if x=='Mn' else 1 if x=='No' else 0)\nnew_train['HeatingQC'] = new_train['HeatingQC'].apply(lambda x: quality(x))\nnew_train['KitchenQual']  = new_train['KitchenQual'].apply(lambda x: quality(x))\nnew_train['FireplaceQu'] = new_train['FireplaceQu'].apply(lambda x: quality(x))\nnew_train['GarageQual'] = new_train['GarageQual'].apply(lambda x: quality(x))\nnew_train['GarageCond'] = new_train['GarageCond'].apply(lambda x: quality(x))\nnew_train['PoolQC'] = new_train['PoolQC'].apply(lambda x: quality(x))","53ff4d4c":"for i in ordinal_vars:\n    sns.barplot(x=new_train[i].value_counts().index,\n               y=new_train[i].value_counts()).set_title(i)\n    plt.show()","3603b6c7":"new_train.head()","0502bc75":"def feature_engineer(df, test_data=False, nom_vars=nominal_vars, ord_vars=ordinal_vars):\n    \n    \n    df['Pave_Street'] = df['Street'].apply(lambda x: 1 if x=='Pave' else 0)\n    df.drop(['Street'], axis=1, inplace=True)\n\n    df['AllPub'] = df['Utilities'].apply(lambda x: 1 if x=='AllPub' else 0)\n    df.drop(['Utilities'], axis=1, inplace=True)\n\n    df['CentralAir'] = df['CentralAir'].apply(lambda x: 1 if 'Y' else 0)\n\n    df['GarageFinished'] = df['GarageFinish'].apply(lambda x: 1 if 'Fin' else 0)\n    df['GarageRfn'] = df['GarageFinish'].apply(lambda x: 1 if 'Rfn' else 0)\n    df.drop(['GarageFinish'], axis=1, inplace=True)\n\n    df['HasPavedDrive'] = df['PavedDrive'].apply(lambda x: 1 if 'Y' else 0)\n    df['PavedDrive_P'] = df['PavedDrive'].apply(lambda x: 1 if 'P' else 0)\n    df.drop(['PavedDrive'], axis=1, inplace=True)\n    \n    \n    for col in nom_vars:\n        add_is_missing(df, col)\n        df[col].fillna('missing', inplace=True)\n\n        y = pd.get_dummies(df[col], prefix=col)\n        df.append(y)\n\n    df.drop(nominal_vars, axis=1, inplace=True);\n    \n    \n    def quality(x):\n        quality_list = ['Ex', 'Gd', 'TA', 'Fa']\n        for idx, i in enumerate(quality_list):\n            if(i==x):\n                return(4-idx)\n        return(0)\n    \n    df['ExterQual'] = df['ExterQual'].apply(lambda x: quality(x))\n    df['ExterCond'] = df['ExterCond'].apply(lambda x: quality(x))\n    df['BsmtQual'] = df['BsmtQual'].apply(lambda x: quality(x))\n    df['BsmtCond'] = df['BsmtCond'].apply(lambda x: quality(x))\n    df['BsmtExposure'] = df['BsmtExposure'].apply(lambda x: 4 if x=='Gd' else 3 if x=='Av' else 2 if x=='Mn' else 1 if x=='No' else 0)\n    df['HeatingQC'] = df['HeatingQC'].apply(lambda x: quality(x))\n    df['KitchenQual']  = df['KitchenQual'].apply(lambda x: quality(x))\n    df['FireplaceQu'] = df['FireplaceQu'].apply(lambda x: quality(x))\n    df['GarageQual'] = df['GarageQual'].apply(lambda x: quality(x))\n    df['GarageCond'] = df['GarageCond'].apply(lambda x: quality(x))\n    df['PoolQC'] = df['PoolQC'].apply(lambda x: quality(x))\n    \n    \n    df.fillna(0, inplace=True)\n    \n    \n    if(not(test_data)):\n        df_price = df.pop('SalePrice')\n        df['SalePrice'] = df_price","4c4068d5":"feature_engineer(train)\nfeature_engineer(test, test_data=True)","a0c32d17":"train","b77a1da3":"test","664be50a":"def split(df, y='SalePrice'):\n    df = df.copy()\n    df_X = df.drop([y], axis=1)\n    df_y = df[y]\n    return(df_X, df_y)","0f251541":"def scale_data(X):\n    scale = StandardScaler()\n    X_scaled = X.copy()\n    X_scaled[num_vars[1:-2]] = scale.fit_transform(X_scaled[num_vars[1:-2]])\n    return(X_scaled)","95d9b4c1":"train_X, train_y = split(train)","ff38e961":"train_X","f9ce38f0":"train_y","2e824434":"train_X_scaled = scale_data(train_X)","8c0bf50b":"train_X_scaled","3c9ad0b0":"test_scaled = scale_data(test)","ba5ce4cb":"test_scaled","ff2571ea":"def model_accuracy(model, cv=5, X=train_X_scaled, y=train_y, scorer='neg_root_mean_squared_error'):\n    cv_score = cross_val_score(model, X=X, y=y, cv=cv, scoring=scorer)\n    print(cv_score)\n    print(f\"| {model.__class__.__name__} | {format(cv_score.mean()*100, '.2f')} |\")\n    return(cv_score.mean())","9bfdfb7d":"# Random Forest Regressor\nRFR_untuned = RandomForestRegressor(random_state=42)\nmodel_accuracy(RFR_untuned)","6b6d4a16":"# Logistic Regression\nLR_untuned = LogisticRegression(random_state=42)\nmodel_accuracy(LR_untuned)","095e08f6":"# SGDRegressor\nSGDR_untuned = SGDRegressor(random_state=42)\nmodel_accuracy(SGDR_untuned)","cc799a92":"# Gradient Boosting Regressor\nGBR_untuned = GradientBoostingRegressor(random_state=42)\nmodel_accuracy(GBR_untuned)","16014aff":"# Ridge\nRidge_untuned = Ridge(random_state=42)\nmodel_accuracy(Ridge_untuned)","2dcb9dea":"# Support Vector Regressor\nSVR_untuned = SVR()\nmodel_accuracy(SVR_untuned)","05938177":"def GS(estimator, param_grid, cv=5, n_jobs=-1, verbose=2, X=train_X_scaled, y=train_y):\n    gs = GridSearchCV(estimator=estimator, param_grid=param_grid, cv=cv, n_jobs=n_jobs, verbose=verbose)\n    gs.fit(X, y)\n    print(gs.best_params_)\n    return(gs)","335f1715":"# # Random Forest Regressor\n# RFR = RandomForestRegressor()\n# param_grid = {\n#     'random_state': [42],\n#     'n_estimators': [30, 100, 300, 1000],\n#     'max_depth': [None, 30, 100],\n#     'max_features': ['auto', 'sqrt', 'log2'],\n#     'n_jobs': [-1]\n# }\n# RFR = GS(RFR, param_grid)\n# model_accuracy(RFR)","aa46fc06":"# # Logistic Regresssion\n# LR = LogisticRegression()\n# param_grid = {\n#     'random_state': [42],\n#     'penalty': ['l1', 'l2', 'elasticnet', 'none'],\n#     'C': [0.01, 0.1, 1, 10, 100]\n# }\n# LR = GS(LR, param_grid)\n# model_accuracy(LR)","9dbc9db2":"# # SGD Regressor\n# SGDR = SGDRegressor()\n# param_grid = {\n#     'random_state': [42],\n#     'penalty': ['l2', 'l1', 'elasticnet'],\n# }\n# SGDR = GS(SGDR, param_grid)\n# model_accuracy(SGDR)","fa3208dd":"# SGDR = SGDRegressor()\n# param_grid = {\n#     'random_state': [42],\n#     'penalty': ['elasticnet'],\n#     'learning_rate': ['constant', 'optimal', 'invscaling', 'adaptive']\n# }\n# SGDR = GS(SGDR, param_grid)\n# model_accuracy(SGDR)","272fbc3e":"# GBR = GradientBoostingRegressor()\n# param_grid = {\n#     'random_state': [42],\n#     'learning_rate': [0.01, 0.03, 0.1, 0.3],\n#     'n_estimators': [100, 300, 500, 900],\n#     'max_features': ['auto', 'sqrt', 'log2', None]\n# }\n# GBR = GS(GBR, param_grid)\n# model_accuracy(GBR)","f07e07c4":"# RidgeR = Ridge()\n# param_grid = {\n#     'random_state': [42],\n#     'solver': ['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga']\n# }\n# RidgeR = GS(RidgeR, param_grid)\n# model_accuracy(RidgeR)","ab9e78de":"# RidgeR = Ridge()\n# param_grid = {\n#     'random_state': [42],\n#     'solver': ['sparse_cg'],\n#     'alpha': [0.01, 0.03, 0.1, 0.3, 1]\n# }\n# RidgeR = GS(RidgeR, param_grid)\n# model_accuracy(RidgeR)","6a38ac5a":"# SVMR = SVR()\n# param_grid = {\n#     'kernel': ['linear', 'poly', 'rbf', 'sigmoid']\n# }\n# SVMR = GS(SVMR, param_grid)\n# model_accuracy(SVMR)","e2b3da0b":"# SVMR = SVR()\n# param_grid = {\n#     'kernel': ['linear'],\n#     'gamma': ['scale', 'auto'],\n#     'C': [1, 3, 10, 30, 100, 300]\n# }\n# SVMR = GS(SVMR, param_grid)\n# model_accuracy(SVMR)","25d42abb":"# MLPRegressor\nMLPR = MLPRegressor(random_state=42)\nmodel_accuracy(MLPR)","e03a6c8f":"# MLPRegressor\nMLPR = MLPRegressor()\nparam_grid = {\n    'random_state': [42],\n    'hidden_layer_sizes': [(30,), (100,), (300,)],\n    'activation': ['identity', 'logistic', 'tanh', 'relu'],\n    'learning_rate': ['constant', 'invscaling', 'adaptive']\n}\nMLPR = GS(MLPR, param_grid)\nmodel_accuracy(MLPR)","27824495":"def submit(model):\n    model.fit(train_X_scaled, train_y)\n    preds = model.predict(test_scaled)\n    submission = {'Id': test_scaled.Id, 'SalePrice': preds}\n    submission = pd.DataFrame(data=submission)\n    submission.to_csv(type(model).__name__ + '_submission', index=False)\n    print(submission)","e82d27a8":"# Gradient Boosting Regressor\nGBR = GradientBoostingRegressor(learning_rate= 0.1, max_features= 'auto', n_estimators= 500, random_state= 42)\nsubmit(GBR)","36b7d23c":"# Random Forest Regressor\nRFR = RandomForestRegressor(max_depth= 30, max_features= 'sqrt', n_estimators= 1000, n_jobs= -1, random_state= 42)\nsubmit(RFR)","e8f003fb":"# Ridge Regressor\nRidgeR = Ridge(alpha= 1, random_state= 42, solver= 'sparse_cg')\nsubmit(RidgeR)","a8773354":"# Support Vector Regressor\nSVMR = SVR(C= 300, gamma= 'scale', kernel= 'linear')\nsubmit(SVMR)","1f06bf32":"# Multi-layer Perceptron regressor\nMLPR = MLPRegressor(activation= 'identity', hidden_layer_sizes= (300,), learning_rate= 'constant', random_state= 42)\nsubmit(MLPR)","4fc2b39c":"# Submission","3ed26d20":"## New train after Encoding","fcc443c7":"```\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    1.9s finished\n{'kernel': 'linear'}\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    1.3s finished\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    1.2s finished\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    1.3s finished\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    1.3s finished\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    1.3s finished\n[-70227.75517505 -76694.059959   -83044.58201775 -65972.45130005\n -79028.58545156]\n| GridSearchCV | -7499348.68 |\n-74993.48678068144\n```","85e6ead8":"## Null Values","9b614c7b":"## Tuning","d02757cd":"## Data Info","1b838e8d":"### Feature Engineering Dataframes","6c078c93":"### Ridge","0e556e5b":"![this image belongs to kaggle](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/5407\/media\/housesbanner.png)","6b88218b":"## ANN models","e9d9b3df":"## Function for Submission","474f2c0e":"## Ordinal Encoding","56b83f02":"## Function for Feature Engineering","f8ef953d":"# Data Exploration","da960276":"### Random Forest Regressor","2139a645":"```\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    0.7s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n{'learning_rate': 'adaptive', 'penalty': 'elasticnet', 'random_state': 42}\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    0.5s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    0.6s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    0.5s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    0.5s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 4 candidates, totalling 20 fits\n[-1.34440837e+13 -9.34229760e+12 -1.03646085e+13 -1.11815387e+13\n -1.01186711e+13]\n| GridSearchCV | -1089023991818041.25 |\n[Parallel(n_jobs=-1)]: Done  13 out of  20 | elapsed:    0.4s remaining:    0.2s\n[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    0.5s finished\n-10890239918180.412\n```","b294ccc9":"## Splitting and Scaling Data","70660670":"## Tuning Models","28260237":"```\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 7 candidates, totalling 35 fits\n[Parallel(n_jobs=-1)]: Done  35 out of  35 | elapsed:    1.4s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n{'random_state': 42, 'solver': 'sparse_cg'}\nFitting 5 folds for each of 7 candidates, totalling 35 fits\n[Parallel(n_jobs=-1)]: Done  35 out of  35 | elapsed:    1.2s finished\nFitting 5 folds for each of 7 candidates, totalling 35 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  35 out of  35 | elapsed:    1.4s finished\nFitting 5 folds for each of 7 candidates, totalling 35 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  35 out of  35 | elapsed:    1.4s finished\nFitting 5 folds for each of 7 candidates, totalling 35 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  35 out of  35 | elapsed:    1.3s finished\nFitting 5 folds for each of 7 candidates, totalling 35 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[-29425.25684591 -35145.52938114 -36797.07931899 -30298.86247034\n -48111.53297871]\n| GridSearchCV | -3595565.22 |\n[Parallel(n_jobs=-1)]: Done  35 out of  35 | elapsed:    1.1s finished\n-35955.65219901865\n```","5e7bea1a":"### Function for GridSearch","285a2d15":"## Plotting","30729928":"# Import Libraries","eaec42a0":"## Algorithms for models","21b29da6":"# Plot Theme and Pandas Options","44d1525b":"### Categorical Variables","f5ffcdbd":"```\nFitting 5 folds for each of 3 candidates, totalling 15 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  15 out of  15 | elapsed:    2.4s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n{'penalty': 'elasticnet', 'random_state': 42}\nFitting 5 folds for each of 3 candidates, totalling 15 fits\n[Parallel(n_jobs=-1)]: Done  15 out of  15 | elapsed:    0.3s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 3 candidates, totalling 15 fits\n[Parallel(n_jobs=-1)]: Done  15 out of  15 | elapsed:    0.3s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 3 candidates, totalling 15 fits\n[Parallel(n_jobs=-1)]: Done  15 out of  15 | elapsed:    0.3s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 3 candidates, totalling 15 fits\n[Parallel(n_jobs=-1)]: Done  15 out of  15 | elapsed:    0.3s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 3 candidates, totalling 15 fits\n[-1.61741860e+15 -1.53848421e+15 -1.86275169e+14 -1.88189755e+15\n -1.16260202e+15]\n| GridSearchCV | -127733550824289200.00 |\n[Parallel(n_jobs=-1)]: Done  15 out of  15 | elapsed:    0.3s finished\n-1277335508242892.0\n```","d2d52ea0":"## Models and their score (without tuning)\n| Model Name | Score |\n|------------|-------|\n| MLPRegressor | -8394281.17 |","f586a6de":"## Function for Scaling Data","5b5becd7":"## Rows and Columns count","0616c99c":"### Support Vector Machine Regressor","82e0a32d":"# Import Data","fb33697e":"```\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 5 candidates, totalling 25 fits\n[Parallel(n_jobs=-1)]: Done  18 out of  25 | elapsed:    0.2s remaining:    0.1s\n[Parallel(n_jobs=-1)]: Done  25 out of  25 | elapsed:    0.3s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n{'alpha': 1, 'random_state': 42, 'solver': 'sparse_cg'}\nFitting 5 folds for each of 5 candidates, totalling 25 fits\n[Parallel(n_jobs=-1)]: Done  18 out of  25 | elapsed:    0.2s remaining:    0.1s\n[Parallel(n_jobs=-1)]: Done  25 out of  25 | elapsed:    0.2s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 5 candidates, totalling 25 fits\n[Parallel(n_jobs=-1)]: Done  18 out of  25 | elapsed:    0.2s remaining:    0.1s\n[Parallel(n_jobs=-1)]: Done  25 out of  25 | elapsed:    0.2s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 5 candidates, totalling 25 fits\n[Parallel(n_jobs=-1)]: Done  18 out of  25 | elapsed:    0.2s remaining:    0.1s\n[Parallel(n_jobs=-1)]: Done  25 out of  25 | elapsed:    0.2s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 5 candidates, totalling 25 fits\n[Parallel(n_jobs=-1)]: Done  18 out of  25 | elapsed:    0.2s remaining:    0.1s\n[Parallel(n_jobs=-1)]: Done  25 out of  25 | elapsed:    0.2s finished\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\nFitting 5 folds for each of 5 candidates, totalling 25 fits\n[-26356.66924872 -34457.74428433 -34687.40830786 -28230.55628017\n -47502.38980795]\n| GridSearchCV | -3424695.36 |\n[Parallel(n_jobs=-1)]: Done  18 out of  25 | elapsed:    0.2s remaining:    0.1s\n[Parallel(n_jobs=-1)]: Done  25 out of  25 | elapsed:    0.2s finished\n-34246.95358580658\n```","237b7ecc":"### Logistic Regression","48b6b677":"### Model Scores before and after tuning\n| Model Name | Before tuning | After Tuning |\n|------------|---------------|--------------|\n| RandomForestRegressor | -3033975.34 | -2955657.30 |\n| LogisticRegression | -9135640.08 |\n| SGDRegressor | -139915396849415232.00 | -1089023991818041.25 |\n| GradientBoostingRegressor | -2710501.61 | -2692616.79 |\n| Ridge | -3434322.42 | -3424695.36 |\n| SVR | -8115896.13 | -3424759.80 |","060c5fdf":"## Correlations in Numerical variables","258a8c2b":"## Function for getting model accuracy (using CV)","0f45be7f":"## Submitting","54bd44d7":"```\nFitting 5 folds for each of 12 candidates, totalling 60 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   11.2s\n[Parallel(n_jobs=-1)]: Done  60 out of  60 | elapsed:  3.6min finished\n{'C': 300, 'gamma': 'scale', 'kernel': 'linear'}\nFitting 5 folds for each of 12 candidates, totalling 60 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:    3.8s\n[Parallel(n_jobs=-1)]: Done  60 out of  60 | elapsed:  1.6min finished\nFitting 5 folds for each of 12 candidates, totalling 60 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:    4.8s\n[Parallel(n_jobs=-1)]: Done  60 out of  60 | elapsed:  2.6min finished\nFitting 5 folds for each of 12 candidates, totalling 60 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:    4.8s\n[Parallel(n_jobs=-1)]: Done  60 out of  60 | elapsed:  2.3min finished\nFitting 5 folds for each of 12 candidates, totalling 60 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:    6.0s\n[Parallel(n_jobs=-1)]: Done  60 out of  60 | elapsed:  3.0min finished\nFitting 5 folds for each of 12 candidates, totalling 60 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:    4.5s\n[Parallel(n_jobs=-1)]: Done  60 out of  60 | elapsed:  1.8min finished\n[-27403.84481388 -33941.85113319 -35995.47888215 -27496.21368065\n -46400.60133306]\n| GridSearchCV | -3424759.80 |\n-34247.59796858573\n```","f0389393":"```\nFitting 5 folds for each of 64 candidates, totalling 320 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   24.1s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  1.6min\n[Parallel(n_jobs=-1)]: Done 320 out of 320 | elapsed:  3.6min finished\n{'learning_rate': 0.1, 'max_features': 'auto', 'n_estimators': 500, 'random_state': 42}\nFitting 5 folds for each of 64 candidates, totalling 320 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   19.9s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  1.3min\n[Parallel(n_jobs=-1)]: Done 320 out of 320 | elapsed:  2.9min finished\nFitting 5 folds for each of 64 candidates, totalling 320 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   20.1s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  1.3min\n[Parallel(n_jobs=-1)]: Done 320 out of 320 | elapsed:  3.0min finished\nFitting 5 folds for each of 64 candidates, totalling 320 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   19.6s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  1.3min\n[Parallel(n_jobs=-1)]: Done 320 out of 320 | elapsed:  2.9min finished\nFitting 5 folds for each of 64 candidates, totalling 320 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   19.9s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  1.3min\n[Parallel(n_jobs=-1)]: Done 320 out of 320 | elapsed:  3.0min finished\nFitting 5 folds for each of 64 candidates, totalling 320 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   19.6s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  1.3min\n[Parallel(n_jobs=-1)]: Done 320 out of 320 | elapsed:  3.0min finished\n[-22950.77586006 -33718.63528807 -27235.90719885 -22874.82706813\n -27850.6940232 ]\n| GridSearchCV | -2692616.79 |\n-26926.167887661355\n```","de16d60e":"## Data fields\nHere's a brief version of what you'll find in the data description file.\n[Source.](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data)\n\n* SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n* MSSubClass: The building class\n* MSZoning: The general zoning classification\n* LotFrontage: Linear feet of street connected to property\n* LotArea: Lot size in square feet\n* Street: Type of road access\n* Alley: Type of alley access\n* LotShape: General shape of property\n* LandContour: Flatness of the property\n* Utilities: Type of utilities available\n* LotConfig: Lot configuration\n* LandSlope: Slope of property\n* Neighborhood: Physical locations within Ames city limits\n* Condition1: Proximity to main road or railroad\n* Condition2: Proximity to main road or railroad (if a second is present)\n* BldgType: Type of dwelling\n* HouseStyle: Style of dwelling\n* OverallQual: Overall material and finish quality\n* OverallCond: Overall condition rating\n* YearBuilt: Original construction date\n* YearRemodAdd: Remodel date\n* RoofStyle: Type of roof\n* RoofMatl: Roof material\n* Exterior1st: Exterior covering on house\n* Exterior2nd: Exterior covering on house (if more than one material)\n* MasVnrType: Masonry veneer type\n* MasVnrArea: Masonry veneer area in square feet\n* ExterQual: Exterior material quality\n* ExterCond: Present condition of the material on the exterior\n* Foundation: Type of foundation\n* BsmtQual: Height of the basement\n* BsmtCond: General condition of the basement\n* BsmtExposure: Walkout or garden level basement walls\n* BsmtFinType1: Quality of basement finished area\n* BsmtFinSF1: Type 1 finished square feet\n* BsmtFinType2: Quality of second finished area (if present)\n* BsmtFinSF2: Type 2 finished square feet\n* BsmtUnfSF: Unfinished square feet of basement area\n* TotalBsmtSF: Total square feet of basement area\n* Heating: Type of heating\n* HeatingQC: Heating quality and condition\n* CentralAir: Central air conditioning\n* Electrical: Electrical system\n* 1stFlrSF: First Floor square feet\n* 2ndFlrSF: Second floor square feet\n* LowQualFinSF: Low quality finished square feet (all floors)\n* GrLivArea: Above grade (ground) living area square feet\n* BsmtFullBath: Basement full bathrooms\n* BsmtHalfBath: Basement half bathrooms\n* FullBath: Full bathrooms above grade\n* HalfBath: Half baths above grade\n* Bedroom: Number of bedrooms above basement level\n* Kitchen: Number of kitchens\n* KitchenQual: Kitchen quality\n* TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n* Functional: Home functionality rating\n* Fireplaces: Number of fireplaces\n* FireplaceQu: Fireplace quality\n* GarageType: Garage location\n* GarageYrBlt: Year garage was built\n* GarageFinish: Interior finish of the garage\n* GarageCars: Size of garage in car capacity\n* GarageArea: Size of garage in square feet\n* GarageQual: Garage quality\n* GarageCond: Garage condition\n* PavedDrive: Paved driveway\n* WoodDeckSF: Wood deck area in square feet\n* OpenPorchSF: Open porch area in square feet\n* EnclosedPorch: Enclosed porch area in square feet\n* 3SsnPorch: Three season porch area in square feet\n* ScreenPorch: Screen porch area in square feet\n* PoolArea: Pool area in square feet\n* PoolQC: Pool quality\n* Fence: Fence quality\n* MiscFeature: Miscellaneous feature not covered in other categories\n* MiscVal: Value of miscellaneous feature\n* MoSold: Month Sold\n* YrSold: Year Sold\n* SaleType: Type of sale\n* SaleCondition: Condition of sale","97eb8874":"```\nFitting 5 folds for each of 36 candidates, totalling 180 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   50.0s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  3.2min\n[Parallel(n_jobs=-1)]: Done 180 out of 180 | elapsed:  3.6min finished\n{'max_depth': 30, 'max_features': 'sqrt', 'n_estimators': 1000, 'n_jobs': -1, 'random_state': 42}\nFitting 5 folds for each of 36 candidates, totalling 180 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   38.6s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  2.6min\n[Parallel(n_jobs=-1)]: Done 180 out of 180 | elapsed:  3.0min finished\nFitting 5 folds for each of 36 candidates, totalling 180 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   39.4s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  2.7min\n[Parallel(n_jobs=-1)]: Done 180 out of 180 | elapsed:  3.0min finished\nFitting 5 folds for each of 36 candidates, totalling 180 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   39.2s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  2.7min\n[Parallel(n_jobs=-1)]: Done 180 out of 180 | elapsed:  3.0min finished\nFitting 5 folds for each of 36 candidates, totalling 180 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   39.5s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  2.7min\n[Parallel(n_jobs=-1)]: Done 180 out of 180 | elapsed:  3.0min finished\nFitting 5 folds for each of 36 candidates, totalling 180 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   39.6s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  2.7min\n[Parallel(n_jobs=-1)]: Done 180 out of 180 | elapsed:  3.1min finished\n[-23861.76820098 -32959.7856759  -32867.2855888  -24067.29854914\n -34026.72684224]\n| GridSearchCV | -2955657.30 |\n-29556.572971413792\n```","96706e61":"# Training Models","3ca3f8c5":"## Function for X & y split","cf00f8aa":"### Gradient Boosting Regressor","7f7dad0e":"### Score before and after tuning\n| Model Name | Before Tuning | After Tuning |\n|------------|---------------|--------------|\n| MLPRegressor | -8394281.17 | -7871093.99 |","43681024":"### SGD Regressor","edd4eb8a":"House Prices - Advanced Regression Techniques\n=============================================","32cba1d8":"# Feature Engineering","1af3e741":"### Numerical Variables","fc61d9fc":"## One Hot Encoding","9562b2c8":"* Since there are lots of street that are Pave and only few Non-Pave Street, we will add a new feature `'Pave_Street'`\n* Since `'AllPub'` is the only `'utitlity'` there is, we will add a new feature `'AllPub'`\n* Since `'CentralAir'` is either `'Y'` or `'N'`, we will convert it into boolean (`1` and `0`)\n* We will add the boolean columns `'GarageFinished'` (`1` if `'Fin'`) and `'GarageRfn'` (`1` if `'Rfn'`) from the column `'GarageFinish'`\n* We will add the boolean columns `'HasPavedDrive'` (`1` if `'Y'`)  and `'PavedDrive_P'` (`1` if `'P'`) from the column `'PavedDrive'`","3317b22a":"# Let's try ANN","a30fb148":"## Models Before Tuning","a29eb855":"### Different Models and their Scores\n| Model Name | Score (neg RMSE) | Position |\n|------------|------------------|----------|\n| RandomForestRegressor | **-3033975.34** | 2nd Best |\n| LogisticRegression | -9135640.08 |\n| SGDRegressor | -139915396849415232.00 |\n| GradientBoostingRegressor | **-2710501.61** | **Best** |\n| Ridge | **-3434322.42** | 3rd Best |\n| SVR | -8115896.13 |"}}