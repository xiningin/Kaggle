{"cell_type":{"23f74d1d":"code","45d79d74":"code","3832bb33":"code","79b4bdfd":"code","5605aa7a":"code","b6a32e0a":"code","f9c80d59":"code","2ea5f564":"code","293191e4":"code","7875998c":"code","c6dc88db":"code","93bb0a2d":"code","fd3de3d1":"code","731e45b3":"code","9b47ad95":"code","771a0116":"code","5be353fd":"code","6bc3f9b0":"code","3add044c":"code","af171939":"code","f2244923":"code","d4255faa":"code","e79c1dc7":"code","16bdcbfe":"code","ed22a0b7":"code","1f3f10aa":"code","8fd83f61":"code","82b6766a":"code","4e55c5b6":"code","79091af8":"code","5ad8a11b":"code","cf748f73":"code","b9ee9711":"code","fcd3cbee":"code","c6df85d4":"code","9025289a":"code","d5b503b7":"code","b5e87ebe":"code","40c8f4c2":"code","87f4fb85":"code","bc9892d3":"code","fe389cc2":"code","e12cf9fd":"code","99695845":"code","5286f6ba":"code","65d8110b":"code","e9c5280e":"code","398f0adc":"code","a9e6a385":"code","2f3eb2a2":"code","fd23621e":"code","a876a999":"code","c2faeda6":"code","9f66a4ce":"code","3553fa85":"code","219d690b":"code","dc2041ad":"code","2949f708":"code","3561ac47":"code","024e3a95":"code","5d949a33":"code","e2273863":"code","fa7bbfa2":"code","3998aaa7":"code","8b1e0cf7":"code","3da2bd46":"code","12bf6787":"code","dbcd922e":"markdown","2d4ddf84":"markdown","ecfd3287":"markdown","0634a498":"markdown","f3b76c1f":"markdown","d765270e":"markdown","527c6717":"markdown","dbc7f1d1":"markdown","26797cdd":"markdown","c5176f68":"markdown","4c071997":"markdown","a700d281":"markdown","f8f4edc5":"markdown","406da54d":"markdown","07cd9c2c":"markdown","5ab698f8":"markdown","ccc3a796":"markdown","84b45b17":"markdown","b2944e89":"markdown"},"source":{"23f74d1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","45d79d74":"from bq_helper import BigQueryHelper\nimport bq_helper\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas as pd\n\nmedicare = bq_helper.BigQueryHelper(active_project=\"bigquery-public-data\", dataset_name=\"cms_medicare\")\nbq_assistant = BigQueryHelper(\"bigquery-public-data\", \"cms_medicare\")\n'''\n    Which are the most common inpatient diagnostic conditions (Top-50) in the United States?\n    Which cities (top-20 by counts) have the most number of cases for each diagnostic condition?\n    What are the average payments for these conditions in these cities and how do they compare to the national average?\n'''\nquery = \"\"\"\nSELECT\n    drg_definition Diagnosis,\n    a.provider_city As City,\n    SUM(total_discharges) AS diagnosis_num_cases,\n    SUM(average_total_payments * total_discharges)\/ SUM(total_discharges) AS citywise_avg_total_payments,\n\tSUM(average_total_payments * total_discharges) AS citywise_sum_total_payments\n  FROM (\n\t# Top 20 cities \n\tSELECT DISTINCT \n\t\tprovider_city,\n\t\tSUM(total_discharges) AS citywise_num_cases,\n\t\t\t      FROM\n\t\t`bigquery-public-data.cms_medicare.inpatient_charges_2014`\n\t      GROUP BY\n\t\tprovider_city\n\t       order by citywise_num_cases DESC LIMIT 20\n\t)a, `bigquery-public-data.cms_medicare.inpatient_charges_2014` b \nwhere a.provider_city = b.provider_city \ngroup by a.provider_city,drg_definition\norder by a.provider_city DESC\n\"\"\"\n\nresponse= medicare.query_to_pandas_safe(query, max_gb_scanned=10)\n","3832bb33":"#National Outlook\n\nquery = \"\"\" select City,Diagnosis,diagnosis_num_cases As CityCounts,diagnosis_num_cases*100\/national_num_cases AS Percent_cases, citywise_sum_total_payments*100\/national_sum_total_payments AS Percent_payment\nfrom (\nSELECT\n    drg_definition,\n    a.provider_city as City,\n    SUM(total_discharges) AS diagnosis_num_cases,\n    SUM(average_total_payments * total_discharges)\/ SUM(total_discharges) AS citywise_avg_total_payments,\n\tSUM(average_total_payments * total_discharges) AS citywise_sum_total_payments\n  FROM (\n\t# Top 20 cities \n\tSELECT DISTINCT \n\t\tprovider_city,\n\t\tSUM(total_discharges) AS citywise_num_cases,\n\t\t\t      FROM\n\t\t`bigquery-public-data.cms_medicare.inpatient_charges_2014`\n\t      GROUP BY\n\t\tprovider_city\n\t       order by citywise_num_cases DESC LIMIT 20\n\t)a, `bigquery-public-data.cms_medicare.inpatient_charges_2014` b \nwhere a.provider_city = b.provider_city \ngroup by a.provider_city,drg_definition\norder by a.provider_city DESC\n) a,\n\n(select \n\tdrg_definition AS Diagnosis,\n      SUM(total_discharges) AS national_num_cases,\n      SUM(average_total_payments * total_discharges) AS national_sum_total_payments\n     FROM\n`bigquery-public-data.cms_medicare.inpatient_charges_2014`\n GROUP BY drg_definition) b \n\nwhere a.drg_definition = b.Diagnosis\norder by Percent_payment,City,Diagnosis DESC\n \n\"\"\"\nresponse1 = medicare.query_to_pandas_safe(query, max_gb_scanned=10)\nresponse1","79b4bdfd":"Top50D_Top20 = response1.sort_values(['City','CityCounts'],ascending=False).groupby(['City']).head(50)\nTop50D_Top20","5605aa7a":"response = response.merge(Top50D_Top20,on=['City','Diagnosis'])","b6a32e0a":"response.City.unique()","f9c80d59":"query = \"\"\" select a.*,provider_name, provider_street_address,\n            provider_city , provider_state, provider_zipcode, drg_definition,\n            hospital_referral_region_description, total_discharges,\n            average_covered_charges, average_total_payments,\n            average_medicare_payments\n            from `bigquery-public-data.cms_medicare.hospital_general_info`  a,\n            (SELECT provider_id,provider_name, provider_street_address,\n            provider_city, provider_state, provider_zipcode, drg_definition,\n            hospital_referral_region_description, total_discharges,\n            average_covered_charges, average_total_payments,\n            average_medicare_payments\n            FROM\n            `bigquery-public-data.cms_medicare.inpatient_charges_2014`\n            where provider_city in ('SPRINGFIELD', 'SAN ANTONIO', 'SAINT LOUIS', 'ROCHESTER',\n       'PHILADELPHIA', 'ORLANDO', 'NEW YORK', 'LOUISVILLE', 'LOS ANGELES',\n       'JACKSONVILLE', 'JACKSON', 'INDIANAPOLIS', 'HOUSTON', 'GREENVILLE',\n       'DALLAS', 'COLUMBUS', 'CHICAGO', 'BROOKLYN', 'BOSTON', 'BALTIMORE') ) b\n            where a.provider_id = b.provider_id\n    \"\"\"\nresponse2 = medicare.query_to_pandas_safe(query, max_gb_scanned=10)\nresponse2.columns","2ea5f564":"query = \"\"\" select a.*,provider_name, provider_street_address,\n            provider_city , provider_state, provider_zipcode, drg_definition,\n            hospital_referral_region_description, total_discharges,\n            average_covered_charges, average_total_payments,\n            average_medicare_payments\n            from `bigquery-public-data.cms_medicare.hospital_general_info`  a,\n            (SELECT provider_id,provider_name, provider_street_address,\n            provider_city, provider_state, provider_zipcode, drg_definition,\n            hospital_referral_region_description, total_discharges,\n            average_covered_charges, average_total_payments,\n            average_medicare_payments\n            FROM\n            `bigquery-public-data.cms_medicare.inpatient_charges_2015`\n            where provider_city in ('SPRINGFIELD', 'SAN ANTONIO', 'SAINT LOUIS', 'ROCHESTER',\n       'PHILADELPHIA', 'ORLANDO', 'NEW YORK', 'LOUISVILLE', 'LOS ANGELES',\n       'JACKSONVILLE', 'JACKSON', 'INDIANAPOLIS', 'HOUSTON', 'GREENVILLE',\n       'DALLAS', 'COLUMBUS', 'CHICAGO', 'BROOKLYN', 'BOSTON', 'BALTIMORE') ) b\n            where a.provider_id = b.provider_id\n    \"\"\"\nresponse2_test = medicare.query_to_pandas_safe(query, max_gb_scanned=10)\nresponse2_test.columns","293191e4":"response2.rename(columns={'city':'City','drg_definition':'Diagnosis'},inplace=True)\nresponse2_test.rename(columns={'city':'City','drg_definition':'Diagnosis'},inplace=True)","7875998c":"response2 = response2.merge(response,on=['City','Diagnosis'])\nresponse2_test = response2_test.merge(response,on=['City','Diagnosis'])","c6dc88db":"response2.drop(columns={'provider_id','provider_city','state','zip_code','phone_number','provider_zipcode'},inplace=True)\nresponse2_test.drop(columns={'provider_id','provider_city','state','zip_code','phone_number','provider_zipcode'},inplace=True)","93bb0a2d":"response2.columns","fd3de3d1":"cat_vars = ['hospital_overall_rating','emergency_services','hospital_ownership','patient_experience_national_comparison','readmission_national_comparison','patient_experience_national_comparison','effectiveness_of_care_national_comparison','timeliness_of_care_national_comparison']","731e45b3":"\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfig, ax = plt.subplots(4, 2, figsize=(30, 50))\nfor variable, subplot in zip(cat_vars, ax.flatten()):\n    sns.countplot(response2[variable], ax=subplot)\n    for label in subplot.get_xticklabels():\n        label.set_rotation(20)","9b47ad95":"response2.columns","771a0116":"nums=['Percent_payment','citywise_avg_total_payments','Percent_cases','diagnosis_num_cases',]","5be353fd":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfig, ax = plt.subplots(2, 2, figsize=(30, 10))\nfor variable, subplot in zip(nums, ax.flatten()):\n    sns.distplot(response2[variable], ax=subplot)\n    for label in subplot.get_xticklabels():\n        label.set_rotation(90)","6bc3f9b0":"sns.scatterplot(x=response2['average_total_payments'], y=response2['total_discharges']);","3add044c":"response2['D'] = response2.Diagnosis.apply(lambda x: x.split('- ')[1].split(' ')[0])\n","af171939":"_, ax = plt.subplots(figsize=(20,10))\nsns.relplot(ax=ax ,x=\"hospital_overall_rating\", y=\"D\", size=\"average_total_payments\", sizes=(15, 200), data=response2);","f2244923":"response2['City'].value_counts().head(30).plot(kind='barh', figsize=(6,10))","d4255faa":"response2['D'].value_counts().head(30).plot(kind='barh', figsize=(6,10))","e79c1dc7":"avg_pay = response2.groupby(['D','City']).mean()['average_total_payments'].reset_index()\navg = response2.merge(avg_pay,on=['D','City'])[['D','City','average_total_payments_y','average_total_payments_x']]\navg['norm_avg_pay'] = avg.average_total_payments_x\/avg.average_total_payments_y","16bdcbfe":"_, ax = plt.subplots(figsize=(20,10))\n\nax = sns.boxplot(ax=ax,\n    data=avg,\n    x='D',\n    y='norm_avg_pay',\n    color='red')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)","ed22a0b7":"missing = response2.isnull().sum()*100\/response2.shape[0]\nmissing[missing>30].index","1f3f10aa":"response2.drop(columns={'hospital_overall_rating_footnote',\n       'mortality_national_comparison_footnote',\n       'safety_of_care_national_comparison_footnote',\n       'readmission_national_comparison_footnote',\n       'patient_experience_national_comparison_footnote',\n       'effectiveness_of_care_national_comparison_footnote',\n       'timeliness_of_care_national_comparison_footnote',\n       'efficient_use_of_medical_imaging_national_comparison_footnote'},inplace =True)\n\nresponse2_test.drop(columns={'hospital_overall_rating_footnote',\n       'mortality_national_comparison_footnote',\n       'safety_of_care_national_comparison_footnote',\n       'readmission_national_comparison_footnote',\n       'patient_experience_national_comparison_footnote',\n       'effectiveness_of_care_national_comparison_footnote',\n       'timeliness_of_care_national_comparison_footnote',\n       'efficient_use_of_medical_imaging_national_comparison_footnote'},inplace =True)","8fd83f61":"response2.describe()","82b6766a":"num_vars = response2.select_dtypes('float64').columns\nnum_vars","4e55c5b6":"cat_vars = response2.select_dtypes('object').columns\ncat_vars","79091af8":"response2.drop(columns={'location','provider_street_address', 'provider_name','hospital_name','hospital_type', 'address','county_name','City','provider_state','hospital_referral_region_description'},inplace=True)\nresponse2_test.drop(columns={'location','provider_street_address', 'provider_name','hospital_name','hospital_type', 'address','county_name','City','provider_state','hospital_referral_region_description'},inplace=True)","5ad8a11b":"def prune_cats(df,cat):\n    '''\n    Checks width of categorical variables\n    Prunes categories by checking if they have 50% headcounts wrt to the top most\n    Imputes others with Others\n    '''\n    print(cat)\n    vc = df[cat].value_counts()\n    print(vc.shape)\n    vc = vc[vc>=vc.iloc[0]*0.50]\n    vc = pd.DataFrame(vc.index,columns=[cat])\n    vc['keep'] =1\n    df = df.merge(vc,on=[cat],how='left')\n    mask = df.keep!=1\n    df.loc[mask,cat] = 'OTHERS'\n    del df['keep']\n    print('After')\n    print(df[cat].value_counts().shape)\n    return df","cf748f73":"cat_vars = [e for e in cat_vars if e not in ('location','provider_street_address', 'provider_name','hospital_name','hospital_type', 'address','county_name','City','provider_state','hospital_referral_region_description')]","b9ee9711":"response2['Diagnosis'] = response2.Diagnosis.apply(lambda x: x.split('- ')[1].split(' ')[0])\nresponse2_test['Diagnosis'] = response2_test.Diagnosis.apply(lambda x: x.split('- ')[1].split(' ')[0])\n","fcd3cbee":"vals = response2[cat_vars].apply(lambda x: x.unique().shape[0],axis=0)","c6df85d4":"dict(zip(cat_vars,vals))","9025289a":"del response2['D']","d5b503b7":"\nfor cat_var in cat_vars:\n    response2 = prune_cats(response2,cat_var)","b5e87ebe":"response2.Diagnosis.unique()","40c8f4c2":"def test_prune_cats(df,cat):\n    '''\n    Aplly category pruning to test set\n    '''\n    print(cat)\n    vc = response2[cat].value_counts()\n    vc = pd.DataFrame(vc.index,columns=[cat])\n    vc['keep'] =1\n    df = df.merge(vc,on=[cat],how='left')\n    mask = df.keep!=1\n    df.loc[mask,cat] = 'OTHERS'\n    del df['keep']\n    return df","87f4fb85":"for cat_var in cat_vars:\n    response2_test= test_prune_cats(response2_test,cat_var)","bc9892d3":"response2_test.head()","fe389cc2":"response2['Diagnosis']  = response2.Diagnosis.replace(to_replace=r'HEART', value='CARDIAC', regex=True)\nresponse2_test['Diagnosis']  = response2_test.Diagnosis.replace(to_replace=r'HEART', value='CARDIAC', regex=True)","e12cf9fd":"response2.columns","99695845":"response2.drop(columns={'Percent_cases', 'citywise_sum_total_payments' },inplace=True)\nresponse2_test.drop(columns={'Percent_cases', 'citywise_sum_total_payments' },inplace=True)","5286f6ba":"del response2['average_covered_charges']","65d8110b":"target = response2.average_total_payments\ndel response2['average_total_payments']","e9c5280e":"target_test = response2_test.average_total_payments\n\ndel response2_test['average_total_payments']","398f0adc":"corr_df = response2.select_dtypes('float64')\ncorr_df['Target'] = target\n\ncorr_df.corr()","a9e6a385":"del response2['average_medicare_payments']","2f3eb2a2":"del response2_test['average_medicare_payments']","fd23621e":"del response2['citywise_avg_total_payments']","a876a999":"del response2_test['citywise_avg_total_payments']","c2faeda6":"corr_df = response2.select_dtypes('int64')\ncorr_df['Target'] = target\n\ncorr_df.corr()","9f66a4ce":"cat_vars = response2.select_dtypes('object').columns\ncat_vars","3553fa85":"response2['meets_criteria_for_meaningful_use_of_ehrs']  = response2.meets_criteria_for_meaningful_use_of_ehrs.replace(to_replace=r'OTHERS', value=False, regex=True)\nresponse2_test['meets_criteria_for_meaningful_use_of_ehrs']  = response2_test.meets_criteria_for_meaningful_use_of_ehrs.replace(to_replace=r'OTHERS', value=False, regex=True)","219d690b":"response2_safe = response2.copy()","dc2041ad":"del response2_test['D']","2949f708":"from sklearn.preprocessing import LabelEncoder\nfrom collections import defaultdict\nd = defaultdict(LabelEncoder)\n\nresponse2[cat_vars] = response2[cat_vars].apply(lambda x: d[x.name].fit_transform(x))\n\n# Inverse the encoded\n#fit.apply(lambda x: d[x.name].inverse_transform(x))\n\n# Using the dictionary to label future data\nresponse2_test[cat_vars] = response2_test[cat_vars].apply(lambda x: d[x.name].transform(x))","3561ac47":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators=1000, n_jobs=-1, random_state=2019)\nrf.fit(response2, target)","024e3a95":"target_pred = rf.predict(response2_test[response2.columns])","5d949a33":"target_pred","e2273863":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(target_test, target_pred))","fa7bbfa2":"response2_linear = response2.copy()","3998aaa7":"response2_linear[cat_vars] = fit.apply(lambda x: d[x.name].inverse_transform(x))","8b1e0cf7":"response2_linear= pd.get_dummies(response2_linear, prefix=cat_vars)","3da2bd46":"response2_test_linear = response2_test.copy()\nresponse2_test_linear[cat_vars] = fit.apply(lambda x: d[x.name].inverse_transform(x))\nresponse2_test_linear= pd.get_dummies(response2_test_linear, prefix=cat_vars)","12bf6787":"from sklearn.linear_model import LinearRegression \nlr = LinearRegression() \nlr.fit(response2_linear, target)\ntarget_pred = lr.predict(response2_test_linear[response2_linear.columns])\nnp.sqrt(mean_squared_error(target_test, target_pred))","dbcd922e":"Apply random forest regressor. No  need to create dummies here as it is nonlinear regressor","2d4ddf84":"Lets compare with good old linear regressor. need to make dummies, due to linearity","ecfd3287":"#Which are the most common inpatient diagnostic conditions (Top-50) in the United States?\n\n**Training input : hist of 2014\nTesting input 2015**","0634a498":"### Lets see how are the hospital-customer related data distributed.","f3b76c1f":"Diagnosis still have wide range , but most of them look subcategories. so lets do some crude nlp to level it up","d765270e":"> Lets use 'average_total_payments' as predictor assuming it indicates total claim amount paid. Lets only keep records for top 50 diagnosis before we start","527c6717":"Replace simentically similar categories to one","dbc7f1d1":"Remoing all columns with missing values over 30 %","26797cdd":"#### Insights: Mostly, below national average in providing timely and effective services are a majority , pointing that, patient feedbackk for hospitals, ratings, will cause impact on payments","c5176f68":"### Insights: Some very vague high values worth investigations","4c071997":"DROP columns that may be suggestive of our target- Just to keep it fair","a700d281":"Note: Better approach is to draw cluster and merge closest of the varied categories to get better insights","f8f4edc5":"Correct wrong doings of prune cat function","406da54d":"Extract Training and testing data for inpatients","07cd9c2c":"Lets take out top 50 diagnosis from top 20 cities. we shall use this index to join on test and train to keep ourselves confined to these cases","5ab698f8":"Lets remove all categorical values that may have redundant value to add and also wide range of categories","ccc3a796":"#### Insights: There are some particular discharges which have higher average total payments. Who are they? specific expensive diagnosis? outliers?","84b45b17":"Check correlations and remove freakishly correlated variables- lets spice it up.\nIf doing this realtime, will we have thse variables to our aid if they are soo similar to our target?","b2944e89":"### Highest claims for Heart, Chronic diseases"}}