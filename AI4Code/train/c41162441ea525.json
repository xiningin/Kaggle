{"cell_type":{"b5622cad":"code","1daa3dea":"code","d3e5cbcb":"code","418a794c":"code","432d12ad":"code","52aafbb3":"code","b05cd444":"code","285f4979":"code","7e0d9f63":"code","4070a238":"code","443ff33e":"code","a1bdaead":"code","051830a2":"code","7f7ccbf4":"code","fdec0fc9":"code","b5058b7e":"code","c9d0fd5a":"code","8e8ee97c":"code","2c30458f":"code","4f709351":"code","51ad3bf9":"code","228dba57":"code","853fa6ff":"code","4e359c64":"code","c036c07f":"code","9efd3eb1":"markdown"},"source":{"b5622cad":"#importing the libraries\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf","1daa3dea":"tf.__version__","d3e5cbcb":"df=pd.read_csv('..\/input\/fake-news\/train.csv')\ntest_df=pd.read_csv('..\/input\/fake-news\/test.csv')","418a794c":"#exploring the dataset\ndf.head()","432d12ad":"df.shape","52aafbb3":"#null values\nprint(df.isnull().sum())\nprint(test_df.isnull().sum())","b05cd444":"#filling null values with empty string\ndf=df.fillna('')\ntest_df=test_df.fillna('')","285f4979":"df.shape","7e0d9f63":"#declaring independent and dependent variables\nx=df.drop(['label'],1)\ny=df['label']\n\n","4070a238":"\nprint(x.shape)\nprint(y.shape)","443ff33e":"#importing all the tensorflow libraries\nfrom tensorflow.keras.layers import Embedding,Dropout\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense","a1bdaead":"#defining vocabulary size\nvoc_size=5000\ntitle_mess=x.copy()\n","051830a2":"#importing nltk library\nimport nltk\nimport re\nfrom nltk.corpus import stopwords\nnltk.download('stopwords')\n","7f7ccbf4":"#mapping words to their root form using stemming\nfrom nltk.stem.porter import PorterStemmer\nps=PorterStemmer()","fdec0fc9":"title_mess['title'][1]","b5058b7e":"#data preprocessing for LSTM model training\ncorpus=[]\nfor i in range(len(title_mess)):\n  title=re.sub('[^a-zA-Z]',' ', title_mess['title'][i])\n  title=title.lower()\n  title=title.split()\n  title=[ps.stem(word) for word in title if word not in stopwords.words('english')]\n  title=' '.join(title)\n  corpus.append(title)","c9d0fd5a":"#for test data\ncorpus_test=[]\nfor i in range(len(test_df)):\n  title=re.sub('[^a-zA-Z]',' ', test_df['title'][i])\n  title=title.lower()\n  title=title.split()\n  title=[ps.stem(word) for word in title if word not in stopwords.words('english')]\n  title=' '.join(title)\n  corpus_test.append(title)","8e8ee97c":"#onehot representation\nonehot_train = [one_hot(words,voc_size)for words in corpus]\nonehot_test=[one_hot(word,voc_size) for word in corpus_test]","2c30458f":"#padding to make sentences of samelength for feeding embedding layer\nembedded_train=pad_sequences(onehot_train,padding='post',maxlen=25)\nembedded_test=pad_sequences(onehot_test,padding='post',maxlen=25)","4f709351":"#Embedding layers with LSTM\nembedding_vector_features=40\nmodel=Sequential()\nmodel.add(Embedding(voc_size,embedding_vector_features,input_length=25))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(100))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()","51ad3bf9":"#converting into numpy array\nx_final=np.array(embedded_train)\ny_final=np.array(y)\ntest_final=np.array(embedded_test)\nprint(x_final.shape)\nprint(y_final.shape)\nprint(test_final.shape)","228dba57":"#splitting the x_final and y_final dataset into train and test dataset using sklearn \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x_final, y_final, test_size=0.33, random_state=42)","853fa6ff":"#fitting the model\nmodel.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=20,batch_size=64)","4e359c64":"#prediction on test_data\ny_pred=model.predict_classes(test_final)\ny_pred","c036c07f":"#creating final csv of our prediction\nfinal_csv=pd.DataFrame()\nfinal_csv['id']= test_df['id']\nfinal_csv['label']=y_pred\nfinal_csv.to_csv('final_submission.csv',index=False)","9efd3eb1":"## Model creating and training "}}