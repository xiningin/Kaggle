{"cell_type":{"86d3ad4a":"code","e123d7c0":"code","4ffcc5af":"code","434d6271":"code","d1025618":"code","23eab132":"code","b9a2d371":"code","c31fca30":"code","2294c032":"code","fa68974d":"code","a8c4ce6d":"code","66d69d56":"code","247cd4d3":"code","3e31bda5":"code","fcd88a43":"code","1e0b83ce":"code","fca7a462":"code","422b1305":"code","e2794153":"code","826a8029":"code","660e2b74":"code","0f2fc839":"code","7a8b6575":"code","f4ce06f2":"markdown","98ff411d":"markdown","3ef65080":"markdown","e660ad3f":"markdown","6075c85e":"markdown","4ccd22bf":"markdown","a9fb8c10":"markdown","511badb2":"markdown","20e34fda":"markdown","14e45184":"markdown","8d121073":"markdown","6afe81dd":"markdown","c521187a":"markdown"},"source":{"86d3ad4a":"\nimport pandas as pd\ntrain_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","e123d7c0":"# train_df.loc[(  train_df['Age']<16) ,:].info()\ntrain_df.loc[(train_df[\"Age\"] <16) & (train_df[\"Sex\"] == 'male') ].info()\n# df2 = train_df.where(train_df['Age']<16 , train_df['Age']>4  )\n# df2.info()","4ffcc5af":"\ntrain_df.head()","434d6271":"#\u89c2\u5bdf\u5b57\u6bb5\n#print(train_df.columns.values)\n#print('-'*20)\n#\u67e5\u770b\u6570\u636e\u4fe1\u606f\uff0c\u7c7b\u4f3c\u6570\u636e\u62a5\u544a\ntrain_df.info()\nprint('-'*20)\n#\u6570\u636e\u7edf\u8ba1\uff0c\uff08\u6570\u503c\u578b\u5b57\u6bb5\uff09\ntrain_df.describe()\n","d1025618":"#\u7edf\u8ba1\u6570\u636e\u5173\u8054\u5173\u7cfb\nprint(train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nprint('-'*20)\nprint(train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nprint('-'*20)\nprint(train_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nprint('-'*20)\nprint(train_df[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False))\n# print('-'*20)\n# print(train_df[['Age', 'Survived']].groupby(['Age'], as_index=False).mean().sort_values(by='Survived', ascending=False))\n\n#print('-'*20)\n#print(train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False))\n#\u8fde\u7eed\u6570\u503c\u578b\u6570\u636e\u6bd4\u8f83\u591a\uff0c\u901a\u8fc7\u56fe\u5f62\u67e5\u770b\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n","23eab132":"\ng = sns.FacetGrid(train_df, col='Survived', height=8.2, aspect=1.6)\ng.map(plt.hist, 'Age', bins=20)","b9a2d371":"#\u6267\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u9884\u6d4b\u63d0\u4ea4\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.naive_bayes import GaussianNB\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\n# model =  LogisticRegression()\n# model =  GaussianNB()\n\ny = train_df[\"Survived\"]\n#\u53bb\u6389id\u3001title\u3001\u7968\u53f7\u3001\u4ed3\u4f4d\u53f7\uff1b\"Age\",\"Embarked\",\"Fare\"\u56e0\u4e3a\u6709\u7f3a\u5931\uff0c\u4e0d\u80fd\u7acb\u523b\u7528\u4e8e\u5efa\u6a21\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_df[features])\n\n\nmodel.fit(X, y)\nscores = cross_val_score(model, X, y, cv=5)\nprint(scores.mean())\nprint ('ROC AUC: %0.3f' % model.score(X, y) )\n\n","c31fca30":"train_df['Sex']","2294c032":" \nimport plotly.graph_objs as go \nimport plotly.offline as py\n#ignore warning messages \nimport warnings\nwarnings.filterwarnings('ignore') \n\n# Plotting age distribution vs target\nS = train_df[train_df['Survived']==1]\nD = train_df[train_df['Survived']==0]\n\ndef plot_distribution(var_select, title) :  \n    tmp1 = S[var_select]\n    tmp2 = D[var_select]\n    \n    trace0 = go.Histogram(\n        x=tmp1, opacity=1, name='Survived', marker=dict(\n        color='lightblue')\n    )\n    trace1 = go.Histogram(\n        x=tmp2, opacity=1, name='Died', marker=dict(\n        color='pink')\n    )\n    \n    data = [trace0, trace1]\n    layout = go.Layout(barmode='stack', title = title,\n                  autosize = True,\n                  height  = 500,\n                  width   = 800,\n                  #barmode = 'stack',\n                  xaxis=dict(), \n                  yaxis=dict(title= 'Count'), \n                  yaxis2=dict(range= [-0, 75], \n                              overlaying= 'y', \n                              anchor= 'x', \n                              side= 'right',\n                              zeroline=False,\n                              showgrid= False, \n                              title= '% Died'\n                             ),\n                 legend=dict(x=-.1, y=1.5),\n                 margin=go.layout.Margin(\n                    b=0))\n    fig = go.Figure(data=data, layout=layout)\n\n    py.iplot(fig, filename = 'Density plot')","fa68974d":"# print(train_df[['Name_Length', 'Survived']].groupby(['Name_Length'], as_index=False).mean().sort_values(by='Name_Length', ascending=False))\nplot_distribution('Age', 'Name_Length vs Survived')\n \n ","a8c4ce6d":"#\u5904\u7406\u6570\u636e\u7f3a\u5931\u95ee\u9898\uff0cAge  \u3001Embarked\u3001Fare\n#\u628a\u4e24\u4e2adf\u5bf9\u8c61\u653e\u5230\u5217\u8868\u4e2d\ntest_df['Type'] = 2 #\u7528\u4e8e\u533a\u5206test\u6570\u636e\u96c6\ntrain_df['Type'] = 1 #\u7528\u4e8e\u533a\u5206test\u6570\u636e\u96c6\ncombine = [train_df, test_df]\ndf = pd.concat(combine)\n# data = train.append(test)\n\n \n#\u8239\u7968\u4ef7\u683c\n\nfa = df[df[\"Pclass\"]==3]\ndf['Fare'].fillna(fa['Fare'].median(), inplace = True)\n#\u767b\u5f55\u6e2f\u53e3\u53d6\u6700\u5927\u7684\u503c\ndf.loc[(df.Embarked.isnull()) ,'Embarked'] = 'S'\n#---------------------------\u8f6c\u6362name\u4e2d\u7684\u6570\u636e\n#df['name1'] = df.Name.str.extract('([A-Za-z\\s]+)\\,', expand=False)\ndf['Title'] = df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n# Replacing rare titles \nmapping = {'Mlle': 'Miss', \n           'Ms': 'Miss', \n           'Mme': 'Mrs',\n           'Major': 'Other', \n           'Col': 'Other', \n           'Dr' : 'Other', \n           'Rev' : 'Other',\n           'Capt': 'Other', \n           'Jonkheer': 'Royal',\n           'Sir': 'Royal', \n           'Lady': 'Royal', \n           'Don': 'Royal',\n           'Countess': 'Royal', \n           'Dona': 'Royal'}\ndf.replace({'Title': mapping}, inplace=True)\ntitles = ['Miss', 'Mr', 'Mrs', 'Royal', 'Other', 'Master']\n#\u6309\u7167\u8eab\u4efd\u586b\u5145\u7f3a\u5931\u5e74\u9f84\u5e74\u9f84\nfor title in titles:\n    age_to_impute = df.groupby('Title')['Age'].median()[titles.index(title)]\n    df.loc[(df['Age'].isnull()) & (df['Title'] == title), 'Age'] = age_to_impute\n# #\u8239\u7968\n# df['Ticket1'] = df.Ticket.str.extract('(\\S+\\s)', expand=False)\n# df['Ticket2'] = df.Ticket.str.extract('(\\s\\d+)', expand=False)\n\n# \u5bb6\u5ead\u6210\u5458\u6570\u91cf\ndf['Family_Size'] = df['Parch'] + df['SibSp'] + 1\ndf.loc[:,'FsizeD']='Alone'\ndf.loc[(df['Family_Size']>1),'FsizeD']='Small'\ndf.loc[(df['Family_Size']>4),'FsizeD']='Big'\n#\u589e\u52a0\u513f\u7ae5\ndf.loc[:,'Child']=1\ndf.loc[(df['Age']>=18),'Child']=0\n\n#\u5bb6\u65cf\u4e2d\u83b7\u6551\u60c5\u51b5\ndf['Last_Name'] = df['Name'].apply(lambda x: str.split(x, \",\")[0])\n\nDEFAULT_SURVIVAL_VALUE = 0.5\ndf['Family_Survival'] = DEFAULT_SURVIVAL_VALUE\n\nfor grp, grp_df in df[['Survived','Name', 'Last_Name', 'Fare', 'Ticket', 'PassengerId',\n                           'SibSp', 'Parch', 'Age', 'Cabin']].groupby(['Last_Name', 'Fare']):\n    \n    if (len(grp_df) != 1):\n        # A Family group is found.\n        for ind, row in grp_df.iterrows():\n            smax = grp_df.drop(ind)['Survived'].max()\n            smin = grp_df.drop(ind)['Survived'].min()\n            passID = row['PassengerId']\n            if (smax == 1.0):\n                df.loc[df['PassengerId'] == passID, 'Family_Survival'] = 1\n            elif (smin==0.0):\n                df.loc[df['PassengerId'] == passID, 'Family_Survival'] = 0\n\nprint(\"Number of passengers with family survival information:\", \n      df.loc[df['Family_Survival']!=0.5].shape[0])\n\nfor _, grp_df in df.groupby('Ticket'):\n    if (len(grp_df) != 1):\n        for ind, row in grp_df.iterrows():\n            if (row['Family_Survival'] == 0) | (row['Family_Survival']== 0.5):\n                smax = grp_df.drop(ind)['Survived'].max()\n                smin = grp_df.drop(ind)['Survived'].min()\n                passID = row['PassengerId']\n                if (smax == 1.0):\n                    df.loc[df['PassengerId'] == passID, 'Family_Survival'] = 1\n                elif (smin==0.0):\n                    df.loc[df['PassengerId'] == passID, 'Family_Survival'] = 0\n                        \nprint(\"Number of passenger with family\/group survival information: \" \n      +str(df[df['Family_Survival']!=0.5].shape[0]))\n\n#\u540d\u5b57\u957f\u5ea6\uff0c\u63d0\u4ea4\u540e\u6709\u5c11\u91cf\u7684\u63d0\u5347\ndf['Name_Length'] = df['Name'].apply(lambda x:  len(x)>=32)","66d69d56":"df['Cabin'] = df['Cabin'].fillna('Unknown')\ndf['Deck']= df['Cabin'].str.get(0)\nsns.barplot(x=\"Deck\", y=\"Survived\", data=df, palette='Set3')","247cd4d3":"import numpy as np\n#\u8239\u7968\u4ef7\u683c\uff0c\u8239\u7968\u4ef7\u683c\u548c\u5206\u7c7b\u5206\u6bb5\u53ef\u4ee5\u6709\u5c11\u91cf\u7684\u5f71\u54cd\uff0c\u5927\u7ea60.002\nbins = [-1, 7.91, 14.454, 31, 99, 250, np.inf]\nnames = ['a', 'b','c', 'd', 'e', 'f']\ndf['Fare_Bin'] = pd.cut(df['Fare'], bins ,labels=names)\n# sns.barplot(x=\"Fare_Bin\", y=\"Survived\", data=df, palette='Set3')\n#\u5e74\u9f84\u5206\u6bb5\nbins = [0, 15, 29,45, 90]\nnames = ['a', 'b','c', 'd']\ndf['Age_Grp'] = pd.cut(df['Age'], bins ,labels=names)\nsns.barplot(x=\"Age_Grp\", y=\"Survived\", data=df, palette='Set3')\n#\u8f6c\u6362\u8239\u7968\u7b49\u7ea7\ndict_class={1 : 'a' , 2 : 'b' , 3 : 'c' }\ndf['Pclass2']=df['Pclass'].map(dict_class)","3e31bda5":"#\u5176\u4ed6\u589e\u52a0\u9879\uff0c\u8fd9\u4e24\u4e2a\u5bf9\u4e8e\u7ed3\u679c\u5f71\u54cd\u662f\u5927\u7ea60.01\ndf['Fare_Per_Person']=df['Fare']\/(df['Family_Size'])\ndf['Age_Class']=df['Age']*df['Pclass']\n#\u8239\u7968\u6570\u91cf,\u672a\u53d1\u73b0\u6709\u4ef7\u503c\nTicket_Count = dict(df['Ticket'].value_counts())\ndf['TicketGroup'] = df['Ticket'].apply(lambda x:Ticket_Count[x])\ndef Ticket_Label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 8)) | (s == 1):\n        return 1\n    elif (s > 8):\n        return 0\n#\u901a\u8fc7\u5206\u7ec4\u4eba\u7fa4\uff0c\u4fee\u6539\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u4f7f\u90e8\u5206\u4eba\u7fa4\u7684\u5c5e\u6027\u6539\u4e3a\u5bb9\u6613\u6b7b\u4ea1\u7684\u5c5e\u6027\ndf['TicketGroup'] = df['TicketGroup'].apply(Ticket_Label)\ndf['TicketGroup']=df['TicketGroup'].map(dict_class)\nsns.barplot(x='TicketGroup', y='Survived', data=df, palette='Set3')\ndf['Surname']=df['Name'].apply(lambda x:x.split(',')[0].strip())\nSurname_Count = dict(df['Surname'].value_counts())\ndf['FamilyGroup'] = df['Surname'].apply(lambda x:Surname_Count[x])\nFemale_Child_Group=df.loc[(df['FamilyGroup']>=2) & ((df['Age']<=12) | (df['Sex']=='female'))]\nMale_Adult_Group=df.loc[(df['FamilyGroup']>=2) & (df['Age']>12) & (df['Sex']=='male')]\nFemale_Child_Group=Female_Child_Group.groupby('Surname')['Survived'].mean()\nDead_List=set(Female_Child_Group[Female_Child_Group.apply(lambda x:x==0)].index)\nMale_Adult_List=Male_Adult_Group.groupby('Surname')['Survived'].mean()\nSurvived_List=set(Male_Adult_List[Male_Adult_List.apply(lambda x:x==1)].index)\n\n \ndf.loc[(df['Surname'].apply(lambda x:x in Dead_List)) & (df['Type']==2),'Sex'] = 'male'\ndf.loc[(df['Surname'].apply(lambda x:x in Dead_List)) & (df['Type']==2),'Age'] = 60\ndf.loc[(df['Surname'].apply(lambda x:x in Dead_List)) & (df['Type']==2),'Title'] = 'Mr'\ndf.loc[(df['Surname'].apply(lambda x:x in Survived_List)) & (df['Type']==2),'Sex'] = 'female'\ndf.loc[(df['Surname'].apply(lambda x:x in Survived_List)) & (df['Type']==2),'Age'] = 5\ndf.loc[(df['Surname'].apply(lambda x:x in Survived_List)) & (df['Type']==2),'Title'] = 'Miss'\n\n# df.head()","fcd88a43":"df.info()","1e0b83ce":"# df_new = df.drop(['SibSp','Parch','Name','Ticket','Cabin','Last_Name'],axis=1)\ndf_new = df.drop(['SibSp','Parch','Name','Ticket','Cabin','Last_Name','Fare','Age','Pclass','Family_Size'],axis=1)#\ntrans_df = pd.get_dummies(df_new)\n","fca7a462":"train_df = trans_df.loc[ trans_df['Type'] == 1, :] \ntest_df = trans_df.loc[ trans_df['Type'] == 2, :] \ny = train_df[\"Survived\"]\nX = train_df.drop(['Survived','PassengerId','Type'],axis=1)\n\nfrom sklearn.feature_selection import SelectKBest, chi2\n\nX_new = SelectKBest(chi2, k=16)\nX_new.fit_transform(X, y) \ncols = X_new.get_support(indices=True)\n\nX = X.iloc[:,cols]\nX.head()\n\n ","422b1305":"print(X.columns.values)","e2794153":"# #\u53bb\u6389id\u3001title\u3001\u7968\u53f7\u3001\u4ed3\u4f4d\u53f7\uff1b  ,\"Embarked\",\"Fare\",\"Title\"Age \n# features = [\"PassengerId\",\"Type\",\"Survived\",\"Pclass\", \"Sex\",\"FsizeD\",\"Family_Survival\",\"Child\",\"Title\",\"Name_Length\",\"Deck\"]\n# trans_df = pd.get_dummies(df[features])\n# train_df = trans_df.loc[ trans_df['Type'] == 1, :] \n# test_df = trans_df.loc[ trans_df['Type'] == 2, :] \n","826a8029":"train_df = trans_df.loc[ trans_df['Type'] == 1, :] \ntest_df = trans_df.loc[ trans_df['Type'] == 2, :] \n \ntrain_df.describe()\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import tree\nfrom sklearn.linear_model import LogisticRegression\n\n# y = train_df[\"Survived\"]\n# X = train_df.drop(['Survived','PassengerId','Type'],axis=1)\n\nmodel2 = RandomForestClassifier(n_estimators=200,min_samples_leaf=5)\n# model2 = LogisticRegression()\nmodel2.fit(X, y)\nscores = cross_val_score(model2, X, y, cv=5)\nprint(scores.mean())\nprint ('ROC AUC: %0.3f' % model2.score(X, y) )\n#\u9884\u6d4b\u6d4b\u8bd5\u6570\u636e\uff0c\u5e76\u4fdd\u5b58\nX_test = test_df.drop(['Survived','PassengerId','Type'],axis=1)[X.columns.values]\npredictions = model2.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': predictions})\noutput['Survived'] = output['Survived'].apply(lambda x: int(x))\noutput.to_csv('my_submission5.csv', index=False)\nprint(\"Your submission was successfully saved!\")","660e2b74":"from xgboost.sklearn import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import cross_val_score\nlog = LogisticRegression(penalty = 'l2',solver = 'liblinear', C = 0.25)\nxgb = XGBClassifier(learning_rate=0.01 ,\n                                                              n_estimators=860,\n                                                              max_depth=3,\n                                                              subsample=1,\n                                                              colsample_bytree=1,\n                                                              gamma=6,\n                                                              reg_alpha = 14,\n                                                              reg_lambda = 3)\nclassifier = VotingClassifier(estimators=[('XGB', xgb),('log', log)])\nclassifier.fit(X, y)\naccuracies = cross_val_score(classifier, X, y , cv = 5)\nprint(\"5 fold cross validation accuracies {}\".format(accuracies.mean()))\nX_test = test_df.drop(['Survived','PassengerId','Type'],axis=1)[X.columns.values]\npredictions = classifier.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': predictions})\noutput['Survived'] = output['Survived'].apply(lambda x: int(x))\noutput.to_csv('my_submission3.csv', index=False)","0f2fc839":"import sklearn.pipeline as pip\npipeline_xgb =pip.Pipeline(steps=[('feature_select', SelectKBest(chi2 , k = 18)),\n                                  ('classifier',XGBClassifier(learning_rate=0.01 ,\n                                                              n_estimators=700,\n                                                              max_depth=3,\n                                                              subsample=1,\n                                                              colsample_bytree=1,\n                                                              gamma=6,\n                                                              reg_alpha = 14,\n                                                              reg_lambda = 3))\n                                  ])\n#--------------------------\npipeline_log =pip.Pipeline(steps=[('feature_select',SelectKBest(chi2, k = 24 )),\n                                  ('classifier',LogisticRegression(penalty = 'l2',\n                                                                   solver = 'liblinear',\n                                                                   C = 0.25))\n                                  ])\nclassifier2 = VotingClassifier(estimators=[('XGB', pipeline_xgb),('log', pipeline_log)])\ny = train_df[\"Survived\"]\nX = train_df.drop(['Survived','PassengerId','Type'],axis=1)\nclassifier2.fit(X, y)\naccuracies = cross_val_score(classifier2, X, y , cv = 5)\nprint(\"5 fold cross validation accuracies {}\".format(accuracies.mean()))\nX_test = test_df.drop(['Survived','PassengerId','Type'],axis=1)\npredictions = classifier2.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': predictions})\noutput['Survived'] = output['Survived'].apply(lambda x: int(x))\noutput.to_csv('my_submission2.csv', index=False)","7a8b6575":"from sklearn.model_selection import GridSearchCV\npipe=pip.Pipeline([('select',SelectKBest(k=20)), \n               ('classify', RandomForestClassifier(random_state = 10, max_features = 'sqrt'))])\nparam_test = {\n              'classifier__C':[0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6]\n             }\n\nparam_test_xgb = {\n#                'classifier__max_depth':list(range(2,12,1)) \n#     'classifier__n_estimators':list(range(100,500,50)) \n    \n               'classifier__colsample_bytree':[0.8,0.9,1] \n#                'classifier__colsample_bytree':list(range(1,5,1)) ,\n#                'classifier__gamma':list(range(3,9,1)) ,\n             } \ngsearch = GridSearchCV(estimator = pipeline_xgb, param_grid = param_test_xgb, scoring='accuracy', cv=5, verbose=10)\ngsearch.fit(X, y)\nprint('randomforest',gsearch.best_params_, gsearch.best_score_)","f4ce06f2":"# \u8bad\u7ec3\u6a21\u578b\uff0c\u9884\u6d4b\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c","98ff411d":"\u672c\u6b21\u4efb\u52a1\u7684\u601d\u8def\u662f\uff0c\u5148\u5b9e\u73b0\u4e00\u4e2a\u5b8c\u6574\u7684\u5f00\u53d1\u8fc7\u7a0b\uff0c\u7136\u540e\u518d\u9010\u6b65\u6539\u8fdb\uff0c\u63d0\u5347\u7cbe\u5ea6","3ef65080":"# \u4f7f\u7528sklearn \u7684\u7279\u5f81\u9009\u62e9\u7c7b\uff0c\u6548\u679c\u6709\u63d0\u5347\uff0c\u4f46\u662f\u4e0d\u5982\u4eba\u5de5\u5224\u65ad\u9009\u62e9\u5b57\u6bb5\u6548\u679c\u597d\uff0c\u4e8c\u8005\u975e\u5e38\u63a5\u8fd1","e660ad3f":"# \u8ba9\u5206\u7c7b\u5668\u5177\u5907\u91c7\u7528\u4e0d\u540c\u7279\u5f81\u7684\u80fd\u529b\uff0c\u5373\u5f15\u5165pipeline\u3002\u6548\u679c\u662f\u8fdb\u4e00\u6b65\u63d0\u5347\u4e860.5","6075c85e":"#  \u7b2c\u4e8c\u6b65\u89c2\u5bdf\u6570\u636e","4ccd22bf":"# \u52a0\u5165\u591a\u5206\u7c7b\u5668\u7684\u5904\u7406\u65b9\u5f0f","a9fb8c10":"\u5728\u5b8c\u6210\u4e00\u4e2a\u7b80\u5355\u7684\u6d41\u7a0b\u4e4b\u540e\uff08\u4e0d\u5305\u62ec\u63d0\u4ea4\uff09\uff0c\u63a5\u4e0b\u6765\u7684\u4efb\u52a1\u662f\u63d0\u9ad8\u5206\u7c7b\u7684\u51c6\u786e\u7387\uff0c\u901a\u5e38\u8bc4\u4f30\u7684\u51c6\u786e\u7387\u7528\u4e8e\u6d4b\u8bd5\u6570\u636e\uff0c\u51c6\u786e\u7387\u901a\u5e38\u4f1a\u4e0b\u964d2-3\u4e2a\u767e\u5206\u70b9\u3002\n\u63d0\u9ad8\u51c6\u786e\u7387\u7684\u6b65\u9aa4\u5305\u62ec\uff1a\u7f3a\u5931\u6570\u636e\u5904\u7406\u3001\u8fde\u7eed\u6570\u636e\u8f6c\u6362\u6210\u79bb\u6563\u6570\u636e\u3001\u6570\u636e\u8f6c\u6362","511badb2":"# \u7b2c\u4e00\u6b65\u5bfc\u5165\u6570\u636e\u5305","20e34fda":"\u589e\u52a0\u8239\u8231\u4fe1\u606f\n![\u8239\u8231\u4f4d\u7f6e\u793a\u610f\u56fe](https:\/\/vignette.wikia.nocookie.net\/titanic\/images\/f\/f9\/Titanic_side_plan.png\/revision\/latest?cb=20180322183733)","14e45184":"\u641c\u7d22\u6700\u4f73\u53c2\u6570","8d121073":"# \u7b2c\u4e09\u6b65 \u6267\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u5efa\u6a21\u4e0e\u8bc4\u4f30","6afe81dd":"# \u7b2c\u56db\u6b65  \u7279\u5f81\u5de5\u7a0b","c521187a":"# \u9009\u53d6\u7279\u5f81\u5b57\u6bb5\uff0c\u62c6\u5206\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e"}}