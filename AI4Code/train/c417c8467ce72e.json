{"cell_type":{"57f57a84":"code","0ce849fe":"code","cf29e54e":"code","e7a43d94":"code","82e8acd2":"code","e9ca8a41":"code","83e29308":"code","dc6dfabb":"code","3b49759e":"code","4d5da2d2":"code","61699ffa":"code","2106e57c":"code","4a13467b":"code","4493eba8":"code","92881483":"code","5a1d310b":"code","3216be10":"code","c60448ab":"code","79808c7e":"code","de2b5aef":"code","0cc5349a":"code","81c75c92":"code","7c6326de":"code","497aa5d8":"code","aeb00399":"code","4c64276b":"code","f72b8333":"code","834c6b2c":"code","9ea0a31a":"code","897c305d":"code","7e2ac54e":"code","d2d75a33":"code","cd1791dc":"code","ddbc9d4f":"code","c5cc0787":"code","42f95be3":"markdown","566aba5f":"markdown","dc5a172d":"markdown","ce66a7d5":"markdown","fc41848f":"markdown","65d5d2de":"markdown","97b9bfee":"markdown","60386f07":"markdown","de53fa70":"markdown","b18bf5dc":"markdown","2056bd9f":"markdown","862f9696":"markdown","7060d429":"markdown"},"source":{"57f57a84":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.metrics import plot_confusion_matrix\n\ndata = pd.read_csv('\/kaggle\/input\/catalanmushrooms\/train.csv').filter(\n        ['Id','cap.shape', 'cap.color', 'stalk.color.above.ring',\n        'stalk.color.below.ring', 'bruises', 'population','poisonous']).set_index('Id')\ndata.info()","0ce849fe":"data.duplicated().sum() \/ data.shape[0]","cf29e54e":"data.drop_duplicates(inplace=True)","e7a43d94":"data_test = pd.read_csv('\/kaggle\/input\/catalanmushrooms\/test.csv')","82e8acd2":"data_test.info()","e9ca8a41":"data_test","83e29308":"data.isna().sum()","dc6dfabb":"data.info()","3b49759e":"X = data.drop(columns=['poisonous'])\ny = data['poisonous']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=8)\nX_train.head()","4d5da2d2":"cat_col= [ col for col in X_train.columns if X_train[col].dtypes == 'object']","61699ffa":"categorical_pipeline = Pipeline(steps=[\n    ('one-hot', OneHotEncoder(drop='first'))\n])\n\nfull_processor = ColumnTransformer(transformers=[\n    ('category', categorical_pipeline, cat_col)\n])","2106e57c":"tree_pipeline = Pipeline(steps=[\n    ('preprocess', full_processor), \n    ('model', DecisionTreeClassifier(max_depth=9))\n])\n\ndt_model = tree_pipeline.fit(X_train, y_train)","4a13467b":"dt_preds = tree_pipeline.predict(X_test)","4493eba8":"plot_confusion_matrix(tree_pipeline, X_test, y_test, display_labels=['Edible', 'Poisonous']);","92881483":"dt_proba = tree_pipeline.predict_proba(X_test)\ndt_proba = dt_proba[:,1]\ndt_auc = roc_auc_score(y_test,dt_proba)","5a1d310b":"from sklearn.metrics import roc_curve, auc\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, dt_proba)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nroc_auc","3216be10":"plt.figure(figsize=(10,10))\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate,true_positive_rate, color='red',label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],linestyle='--')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","c60448ab":"lr_pipeline = Pipeline(steps=[\n    ('processor', full_processor), \n    ('model', LogisticRegression())\n])\n\nlr = lr_pipeline.fit(X_train, y_train)","79808c7e":"lr_preds = lr_pipeline.predict(X_test)","de2b5aef":"plot_confusion_matrix(lr_pipeline, X_test, y_test, display_labels=['Edible', 'Poisonous']);\n","0cc5349a":"lr_proba = lr_pipeline.predict_proba(X_test)\nlr_proba = lr_proba[:,1]\nlr_auc = roc_auc_score(y_test,lr_proba)","81c75c92":"from sklearn.metrics import roc_curve, auc\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, lr_proba)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nroc_auc","7c6326de":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,10))\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate,true_positive_rate, color='red',label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],linestyle='--')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","497aa5d8":"knn_pipeline = Pipeline(steps=[\n    ('processor', full_processor), \n    ('model', KNeighborsClassifier(n_neighbors=6))\n])\n\nknn_model = knn_pipeline.fit(X_train, y_train)\nknn_preds = knn_pipeline.predict(X_test)\nplot_confusion_matrix(knn_pipeline, X_test, y_test, display_labels=['Edible', 'Poisonous']);","aeb00399":"knn_proba = knn_pipeline.predict_proba(X_test)\nknn_proba = knn_proba[:,1]\nknn_auc = roc_auc_score(y_test,knn_proba)","4c64276b":"false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, knn_proba)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nroc_auc","f72b8333":"plt.figure(figsize=(10,10))\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate,true_positive_rate, color='red',label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],linestyle='--')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","834c6b2c":"rf_pipeline = Pipeline(steps=[\n    ('processor', full_processor), \n    ('model', RandomForestClassifier(max_features=5, n_estimators=500))\n])\n\nrf_model = rf_pipeline.fit(X_train, y_train)\nrf_preds = rf_pipeline.predict(X_test)\nplot_confusion_matrix(rf_pipeline, X_test, y_test, display_labels=['Edible', 'Poisonous']);","9ea0a31a":"rf_proba = rf_pipeline.predict_proba(X_test)\nrf_proba = rf_proba[:,1]\nrf_auc = roc_auc_score(y_test,rf_proba)","897c305d":"false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, knn_proba)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nroc_auc","7e2ac54e":"plt.figure(figsize=(10,10))\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate,true_positive_rate, color='red',label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],linestyle='--')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","d2d75a33":"from sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score\ndef error_metrics(y_true, y_pred, model, data): \n    print(f\"\"\"\n    accuracy: {accuracy_score(y_true, y_pred)}\n    roc_auc: {roc_auc_score(y_true, y_pred)}\n    confusion matrix: \n    \"\"\")\n    cols_names = ['edible','poisonous']\n    print(\n        pd.DataFrame(\n            confusion_matrix(y_true, y_pred), \n            columns=cols_names, \n            index=cols_names)\n        )","cd1791dc":"def cautious_model(poisinous_prob): \n    if poisinous_prob > 0: \n        return 1\n    else: \n        return 0\n\ndef preds_review(model, data): \n    prob_df = (\n        pd.DataFrame(\n            model.predict_proba(data), \n            columns=['edible','poisonous']\n        ))\n    preds = [cautious_model(pois_prob) for pois_prob in prob_df['poisonous']]\n    return preds\n\ny_pred = preds_review(rf_pipeline, X_train)\nerror_metrics(y_train, y_pred, rf_pipeline, X_train)","ddbc9d4f":"test = pd.read_csv('\/kaggle\/input\/catalanmushrooms\/test.csv')\n#results = pd.read_csv('.\/results.csv')\ntest.set_index('Id', inplace=True)\n\n#results.drop(columns='Id', inplace=True)\n#X_test_enc = ohe.transform(test)","c5cc0787":"sub_preds = rf_pipeline.predict(test)\n\nsubmission_file = pd.DataFrame({\n    'Id': data_test['Id'],\n    'poisonous': sub_preds\n}).to_csv('submission.csv', index=False)","42f95be3":"In this mushroom dataset it is absolutely essential to correctly classify every mushroom with poisonous in order to minimize risk of get poisoned. And that means lowering the threshold even if that results in more False Positives. In other words we will focus on Recall (or Sensitivity) metric obtained from the confusion matrix.","566aba5f":"### Missing values","dc5a172d":"We can see that the dataset has values in strings.We need to convert all the unique values to integers. Thus we perform label encoding on the data.","ce66a7d5":"# KNeighborsClassifier","fc41848f":"# Random Forest Classifier","65d5d2de":"The AUC (Area Under Curve) is the area enclosed by the ROC curve. A perfect classifier has AUC = 1 and a completely random classifier has AUC = 0.5. Usually, your model will score somewhere in between. The range of possible AUC values is [0, 1]. However, if your AUC is below 0.5, that means you can invert all the outputs of your classifier and get a better score, so you did something wrong.","97b9bfee":"# AUC (Area Under Curve)","60386f07":"Here True Positives are the samples that are correctly classified as poisonous Mushrooms and the False Negatives are the mushrooms that were incorrectly classified as not poisonous. The True Positive Rate (y- axis) tells you what proportion of poisonous mushrooms samples were correctly classified. The False Positive Rate (x-axis) is the same thing as 1 - Specificity. The False Positive Rate = False Positives \/ False Positives + True Negatives . The False Positives are the not poisonous mushrooms that were incorrectly classified as poisonous. True Negatives are the mushrooms correctly classified as not poisonous. The False Positive Rate tells the proportion of not poisonous mushrooms that were incorrectly classified and are False Positives.","de53fa70":"# Receiver Operating Characteristic (ROC) curves","b18bf5dc":"Recall = Sensitivity = True Positive Rate = True Positives \/ (True Positives + False Negatives)","2056bd9f":"# Decision Tree Classifier","862f9696":"A ROC curve plots the performance of a binary classifier under various threshold settings; this is measured by true positive rate and false positive rate. If your classifier predicts \u201ctrue\u201d more often, it will have more true positives (good) but also more false positives (bad). If your classifier is more conservative, predicting \u201ctrue\u201d less often, it will have fewer false positives but fewer true positives as well. The ROC curve is a graphical representation of this tradeoff.","7060d429":"# Logistic Regression"}}