{"cell_type":{"cad918f0":"code","06206c68":"code","858f79f1":"code","d0801f27":"code","f73a74cd":"code","c59cf47a":"code","4a53f17b":"code","8ddfb0ec":"code","3de94b16":"code","12d6d0f6":"code","6a26da09":"code","fa68826b":"code","120efdf0":"code","24a86d29":"code","29f60b0e":"code","6f2e87be":"code","0d988035":"code","23bbb66d":"code","701855eb":"code","13a54dfa":"code","f377339b":"code","9380e24a":"code","2b9ec2eb":"code","946342b3":"code","e9e57bc1":"code","c0c4ae4e":"code","49e8667c":"code","cce89bc5":"code","c32b00cd":"code","60ccdcc8":"code","3b059c7e":"code","11afb478":"code","4511b56a":"code","9e62d1ab":"code","e50faacb":"code","4f651aad":"code","5724b644":"code","f0442d5e":"code","caadbab4":"code","e62d4699":"code","21d84634":"code","fc8f4836":"code","8f169761":"code","c3f83c4a":"code","58f4db73":"code","bcf5f082":"code","69613ca6":"code","8cf3b344":"code","31d0268c":"code","b90e2cd1":"code","9583f06a":"code","71bd82f4":"code","3f587773":"code","86e6bd26":"code","d9a5e609":"code","d8a4a801":"code","417218b9":"markdown","5bb457d5":"markdown","9860ff2e":"markdown","8bb54a41":"markdown","af09b6de":"markdown","08e5ecff":"markdown","b40f1075":"markdown","11da4d94":"markdown","a2bc0941":"markdown","ba33179a":"markdown","d60c90ad":"markdown","85e6e8c9":"markdown","9952b97e":"markdown","158a4fb3":"markdown","44a39a91":"markdown","052467ad":"markdown","0779d8a7":"markdown","8378b18b":"markdown","82e08747":"markdown","b3722235":"markdown","66cadf37":"markdown","4b3237c7":"markdown","f34c5f13":"markdown","afd7ea64":"markdown","de0258cb":"markdown","842d756d":"markdown"},"source":{"cad918f0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom warnings import simplefilter\nsimplefilter(action='ignore', category=FutureWarning)","06206c68":"df = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')","858f79f1":"df.shape","d0801f27":"df.head()","f73a74cd":"# check for null values\n\ndf.isnull().any().any()","c59cf47a":"print(list(df.columns))","4a53f17b":"corr = df.corr()\ncorr","8ddfb0ec":"plt.figure(figsize=(17,10))\nsns.heatmap(df.corr(),annot=True,fmt='.2f',cmap='Reds')\nplt.show()","3de94b16":"# lets see the features with high correlation to price range\n# we can see that ram was highly correlated to price range\n\ncorr['price_range'].drop(['price_range']).sort_values(ascending=False)","12d6d0f6":"# distribution of price range \n# 0(low cost), 1(medium cost), 2(high cost) and 3(very high cost)\n\nsns.countplot(x='price_range', data=df)\nplt.show()","6a26da09":"plt.figure(figsize=(10,8))\nsns.kdeplot(df[df['price_range']==0]['ram'],shade=True)\nsns.kdeplot(df[df['price_range']==1]['ram'],shade=True)\nsns.kdeplot(df[df['price_range']==2]['ram'],shade=True)\nsns.kdeplot(df[df['price_range']==3]['ram'],shade=True)\nplt.legend(['low cost ram','medium cost ram','high cost ram','very high cost ram'])\nplt.show()","fa68826b":"sns.countplot(x='blue',data=df)\nplt.show()","120efdf0":"# in this case, having or not having bluetooth cant predict the price_range\n\nsns.countplot(x='blue',hue='price_range',data=df)\nplt.show()","24a86d29":"sns.countplot(x='dual_sim',data=df)\nplt.show()","29f60b0e":"# the distribution of price ranges in phone with and without dual sim feature are equal hence \n# it is too hard to classify the price range\n\nsns.countplot(x='dual_sim',hue='price_range',data=df)\nplt.show()","6f2e87be":"sns.countplot(x='four_g',data=df)\nplt.show()","0d988035":"# same case as above\n\nsns.countplot(x='four_g',hue='price_range',data=df)\nplt.show()","23bbb66d":"sns.countplot(x='n_cores',data=df)\nplt.show()","701855eb":"n_cores = sns.FacetGrid(df, col = \"n_cores\",hue='n_cores',col_wrap=4)\nn_cores.map(sns.countplot,'price_range',order=[0,1,2,3])\nplt.show()","13a54dfa":"sns.countplot(x='three_g',data=df)\nplt.show()","f377339b":"# distribution of price range is also equal\n\nsns.countplot(x='three_g',hue='price_range',data=df)\nplt.show()","9380e24a":"sns.countplot(x='touch_screen',data=df)\nplt.show()","2b9ec2eb":"sns.countplot(x='touch_screen',hue='price_range',data=df)\nplt.show()","946342b3":"sns.countplot(x='wifi',data=df)\nplt.show()","e9e57bc1":"sns.countplot(x='wifi',hue='price_range',data=df)\nplt.show()","c0c4ae4e":"fig,ax = plt.subplots(nrows=1,ncols=2,figsize=(15,6))\nsns.boxplot(y='ram',data=df,width=0.4,ax=ax[0])\nsns.boxplot(y='battery_power',data=df,width=0.4,ax=ax[1],color='red')\nax[0].set_title('Ram')\nax[1].set_title('Battery power')\nfig,ax = plt.subplots(nrows=1,ncols=3,figsize=(15,4))\nsns.boxplot(y='px_width',data=df,width=0.4,ax=ax[0],color='green')\nsns.boxplot(y='px_height',data=df,width=0.4,ax=ax[1],color='yellow')\nsns.boxplot(y='int_memory',data=df,width=0.4,ax=ax[2],color='violet')\nax[0].set_title('Pixel resolution width')\nax[1].set_title('Pixel resolution height')\nax[2].set_title('Internal Memory (GB)')\nplt.show()","49e8667c":"# we can see the minimum pixel resolution in height is 0\ndf[['ram','battery_power','px_width','px_height','int_memory']].describe().T","cce89bc5":"# we will drop all the rows with px_height less than 75\ndf1 = df[df['px_height']>75]","c32b00cd":"df2 = df1[['ram','battery_power','px_width','px_height','int_memory','price_range']]","60ccdcc8":"df2.shape","3b059c7e":"df2.head()","11afb478":"X = df2.drop(['price_range'],axis=1)\ny = df2['price_range']","4511b56a":"X.head()","9e62d1ab":"y.head()","e50faacb":"from sklearn.model_selection import GridSearchCV, ShuffleSplit, cross_val_score, train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import MinMaxScaler","4f651aad":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=0)","5724b644":"print('Length of train dataset: ',len(X_train))\nprint('Length of test dataset: ',len(X_test))","f0442d5e":"scaler = MinMaxScaler()\nscaler.fit(X_train)\nscaled_X_train = scaler.transform(X_train)\nscaled_X_test = scaler.transform(X_test)","caadbab4":"knn_model = KNeighborsClassifier()\nknn_model.fit(scaled_X_train,y_train)","e62d4699":"y_predicted = knn_model.predict(scaled_X_test)","21d84634":"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score","fc8f4836":"confusion_matrix_result = confusion_matrix(y_test,y_predicted)\nconfusion_matrix_result","8f169761":"sns.heatmap(confusion_matrix_result,annot=True,cmap='Reds',fmt='.0f')\nplt.show()","c3f83c4a":"print('KNN accuracy score: ',accuracy_score(y_test,y_predicted))","58f4db73":"classification_report_result = classification_report(y_test,y_predicted)\nprint(classification_report_result)","bcf5f082":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import Pipeline, make_pipeline","69613ca6":"pipe = make_pipeline(MinMaxScaler(),LogisticRegression())\ngrid_param = [\n                {\n                    'logisticregression': [LogisticRegression()],\n                    'logisticregression__C': [0.8,1,1.2]\n                }\n]\n\n# create a gridsearch of the pipeline, the fit the best model\ngridsearch = GridSearchCV(pipe, grid_param, cv=5, verbose=0,n_jobs=-1) # Fit grid search\nbest_model = gridsearch.fit(X_train,y_train)\n\nprint(best_model.best_estimator_)\nprint('\\nThe mean accuracy using Logistic Regression is: ',best_model.score(X_test,y_test))","8cf3b344":"pipe = make_pipeline(SVC())\ngrid_param = [\n                {\n                    'svc': [SVC()],\n                    'svc__kernel': ['linear','rbf']\n                }\n]\n\n# create a gridsearch of the pipeline, the fit the best model\ngridsearch = GridSearchCV(pipe, grid_param, cv=5, verbose=0,n_jobs=-1) # Fit grid search\nbest_model = gridsearch.fit(X_train,y_train)\n\nprint(best_model.best_estimator_)\nprint('\\nThe mean accuracy using SVM is: ',best_model.score(X_test,y_test))","31d0268c":"pipe = make_pipeline(DecisionTreeClassifier())\ngrid_param = [\n                {\n                    'decisiontreeclassifier': [DecisionTreeClassifier()],\n                    'decisiontreeclassifier__splitter': ['best','random'],\n                    'decisiontreeclassifier__min_samples_split': range(2,20)\n                }\n]\n\n# create a gridsearch of the pipeline, the fit the best model\ngridsearch = GridSearchCV(pipe, grid_param, cv=5, verbose=0,n_jobs=-1) # Fit grid search\nbest_model = gridsearch.fit(X_train,y_train)\n\nprint(best_model.best_estimator_)\nprint('\\nThe mean accuracy using Decision Tree is: ',best_model.score(X_test,y_test))","b90e2cd1":"pipe = make_pipeline(RandomForestClassifier())\ngrid_param = [\n                {\n                    'randomforestclassifier': [RandomForestClassifier()],\n                    'randomforestclassifier__n_estimators': range(11,51,5),\n                    'randomforestclassifier__min_samples_split': range(2,20)\n                }\n]\n\n# create a gridsearch of the pipeline, the fit the best model\ngridsearch = GridSearchCV(pipe, grid_param, cv=5, verbose=0,n_jobs=-1) # Fit grid search\nbest_model = gridsearch.fit(X_train,y_train)\n\nprint(best_model.best_estimator_)\nprint('\\nThe mean accuracy using Random Forest is: ',best_model.score(X_test,y_test))","9583f06a":"svm_model = SVC(kernel='linear')\nsvm_model.fit(X_train,y_train)","71bd82f4":"y_predicted = svm_model.predict(X_test)","3f587773":"confusion_matrix_result = confusion_matrix(y_test,y_predicted)\nconfusion_matrix_result","86e6bd26":"sns.heatmap(confusion_matrix_result,annot=True,cmap='Reds',fmt='.0f')\nplt.show()","d9a5e609":"print('SVM accuracy score: ',accuracy_score(y_test,y_predicted))","d8a4a801":"classification_report_result = classification_report(y_test,y_predicted)\nprint(classification_report_result)","417218b9":"## Knn Algorithm ","5bb457d5":"# Feature Description\n\n## Categorical Variables\n\n1. blue - Has bluetooth or not\n2. dual_sim - Has dual sim support or not\n3. four_g - Has 4G or not\n4. n_cores - Number of cores of processor\n5. three_g - Has 3G or not\n6. touch_screen - Has touch screen or not\n7. wifi - Has wifi or not\n8. price_range - This is the target variable with value of 0(low cost), 1(medium cost), 2(high cost) and 3(very high cost).\n\n\n## Numerical Variables\n\n1. battery_power - Total energy a battery can store in one time measured in mAh \n2. clock_speed - Speed at which microprocessor executes instructions\n3. fc - Front camera mega pixels\n4. int_memory - Internal Memory in Gigabytes\n5. m_dep - Mobile depth in cm\n6. mobile_wt - Weight of mobile phone\n7. pc - Primary Camera mega pixels\n8. px_height - Pixel Resolution Height\n9. px_width - Pixel Resolution Width\n10. ram - Random Access Memory in Mega Bytes\n11. sc_h - Screen Height of mobile in cm\n12. sc_w - Screen Width of mobile in cm\n13. talk_time - longest time that a single battery charge will last when you are","9860ff2e":"## Logistic Regression","8bb54a41":"## Lets see first the correlation of independent variables to target variable","af09b6de":"### We can see that SVM gives us the higher accuracy","08e5ecff":"## Decision Tree","b40f1075":"### Touchscreen phone and price range","11da4d94":"### Dual sim feature and Phone range","a2bc0941":"### Confusion matrix and Classification Report","ba33179a":"# Load the dataset","d60c90ad":"### Applying the algorithm","85e6e8c9":"### Distribution of data based on ram","9952b97e":"### Phone is 3g and price range","158a4fb3":"## Lets explore categorical variables","44a39a91":"## SVM","052467ad":"## Top 5 features with highest correlation to target variable","0779d8a7":"# Model building\n\n* i will only consider the top five features with high correlation to target variable\n* i didnt include categorical value since most of them have equal distribution for price ranges","8378b18b":"# Find best model using GridSearchCV\n\n* I will create seperate pipelines for each model for gridsearchcv rather than a script with all the models on it","82e08747":"## Random Forest","b3722235":"# Exploratory Data Analysis","66cadf37":"### phone is 4g and price range","4b3237c7":"### Bluetooth and Price range","f34c5f13":"### Wifi and Price range","afd7ea64":"### Scale first the data","de0258cb":"## Separate independent variable to target variable","842d756d":"### Number of core processors and price range"}}