{"cell_type":{"4cf7b6c9":"code","e5b7f025":"code","212d0e1e":"code","5a48e464":"code","75f37411":"code","34b41713":"code","8119f6f5":"code","080f0c80":"code","5ec76ac8":"code","7cb5e10a":"code","47d012e4":"code","9a28d817":"code","7149125a":"code","ad1f282f":"code","90e10c15":"code","6db0c44d":"code","4bb95d2d":"code","8d45423e":"code","29295bcb":"code","80fe0337":"code","9eaa4bb6":"code","7139db0f":"code","c6d30cc6":"code","5733afd0":"code","38423afa":"code","6ca2d573":"code","8f800b43":"code","b1c65448":"code","9a4169c0":"code","2e659391":"code","87bc1b62":"code","64f29161":"code","552e8a43":"code","7c2dd05b":"code","c4fe8569":"markdown","5f9a2b7c":"markdown","c4b8a239":"markdown"},"source":{"4cf7b6c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \n\n# Any results you write to the current directory are saved as output.","e5b7f025":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","212d0e1e":"df_train.head()","5a48e464":"sns.countplot(x='Survived', hue='Pclass', data=df_train)","75f37411":"sns.countplot(x='Survived', hue='Sex', data=df_train)","34b41713":"df_train.isnull().sum().sort_values(ascending=False) ###get missing values for each column","8119f6f5":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","080f0c80":"df_train['Age'].isnull().sum()\/len(df_train['Age'])","5ec76ac8":"df_train.drop('Cabin',axis=1,inplace=True) ###dropping the Cabin column.","7cb5e10a":"df_train.drop(df_train[pd.isnull(df_train['Embarked'])].index,inplace=True)","47d012e4":"df_train.head()","9a28d817":"#df_train['Title'] = df_train.Name.str.extract(' ([A-Za-z]+)\\.')","7149125a":"df_train['Age'].fillna(1000,inplace=True)","ad1f282f":"df_train.isnull().sum().sort_values(ascending=False) ##No missing values now.","90e10c15":"df_train.drop('PassengerId',axis=1,inplace=True)","6db0c44d":"df_train['Sex']=pd.Categorical(df_train['Sex'])\ndf_train['Embarked']=pd.Categorical(df_train['Embarked'])","4bb95d2d":"##engineering new feature\ndf_train['FamilySize']=df_train['SibSp']+df_train['Parch']\ndf_train.head()","8d45423e":"df_train.drop('SibSp',axis=1,inplace=True)\ndf_train.drop('Parch',axis=1,inplace=True)\ndf_train.head()","29295bcb":"df_train.drop('Name', axis=1, inplace=True)\ndf_train.drop('Ticket', axis=1, inplace=True)\ndf_train.head()","80fe0337":"df_train=pd.get_dummies(df_train,drop_first=True)\ndf_train.head()","9eaa4bb6":"df_raw = df_test.copy()","7139db0f":"df_test['FamilySize']=df_test['SibSp']+df_test['Parch']\n#df_test.drop('SibSp',axis=1,inplace=True)\n#df_test.drop('Parch',axis=1,inplace=True)\n#df_test.drop('Name',axis=1,inplace=True)\n#df_test.drop('Ticket',axis=1,inplace=True)\nto_be_dropped=['SibSp','Name','Parch','Ticket','Cabin','PassengerId']\ndf_test.drop(to_be_dropped,axis=1,inplace=True)\ndf_test['Age'].fillna(df_test['Age'].mean(),inplace=True)","c6d30cc6":"df_test.isnull().sum().sort_values(ascending=False)","5733afd0":"df_test['Fare'].fillna(df_test['Fare'].mean(),inplace=True)","38423afa":"df_test.isnull().sum().sort_values(ascending=False)","6ca2d573":"df_test['Sex']=pd.Categorical(df_test['Sex'])\ndf_test['Embarked']=pd.Categorical(df_test['Embarked'])","8f800b43":"df_test=pd.get_dummies(df_test,drop_first=True)","b1c65448":"X_train=df_train.drop('Survived',axis=1)\nY_train=df_train['Survived']\nX_test =df_test.copy()","9a4169c0":"X_train.shape, Y_train.shape, X_test.shape","2e659391":"#Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nclf = LogisticRegression()\nclf.fit(X_train, Y_train)\ny_pred_log_reg = clf.predict(X_test)\nacc_log_reg = round( clf.score(X_train, Y_train) * 100, 2)\nprint (str(acc_log_reg) + ' percent')","87bc1b62":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics \ngnb=GaussianNB()\ny_pred_gnb = gnb.fit(X_train, Y_train).predict(X_test)","64f29161":"y_pred_gnb","552e8a43":"df_test.head()","7c2dd05b":"submission = pd.DataFrame({\n        \"PassengerId\": df_raw[\"PassengerId\"],\n        \"Survived\": y_pred_gnb\n    })\n\nsubmission.to_csv('submission.csv', index=False)","c4fe8569":"Around 20% data is missing from **Age** column and **Cabin** seems to be missing too much.The proportion of **Age** missing is likely small enough for reasonable replacement with some form of imputation.We will drop **Cabin** as missing values are quite significant.","5f9a2b7c":"Comparatively more females survived than males.","c4b8a239":"After looking at this we can tell that **people who did not survive were more likely to be belonging to third class i.e the lowest class**, the cheapest to get on to and **people who did survive were more towards belonging to higher classes**."}}