{"cell_type":{"51ed075f":"code","ac11784e":"code","bb67a605":"code","659fe941":"code","7ce3ad4f":"code","9997b3eb":"code","ba370ec2":"code","0c172c49":"code","e0ab1ee1":"code","0c2fed6e":"code","2c94abff":"code","58f564f0":"code","567ef3c3":"code","a3968870":"code","5016cdf0":"markdown","0c280fd2":"markdown","98fd5e60":"markdown","ed4edaf0":"markdown","a0de73c0":"markdown","4b0c6ff7":"markdown","bfcedae5":"markdown","d3bb2b18":"markdown","4dcde95c":"markdown"},"source":{"51ed075f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport collections\n\nimport os\nprint(os.listdir(\"..\/input\"))","ac11784e":"path = \"..\/input\/repository\/ilikeevb--football-prediction-29a122c\/data\/RPL.csv\"\ndata = pd.read_csv(path, encoding = 'cp1251', delimiter=';')\ndata.head()","bb67a605":"path = '..\/input\/repository\/ilikeevb--football-prediction-29a122c\/data\/Team Name 2018 2019.csv'\nRPL_2018_2019 = pd.read_csv(path, encoding = 'cp1251')\n\nteamList = RPL_2018_2019['Team Name'].tolist()\nteamList","659fe941":"deleteTeam = [x for x in pd.unique(data['\u0421\u043e\u043f\u0435\u0440\u043d\u0438\u043a']) if x not in teamList]\nfor name in deleteTeam:\n    data = data[data['\u041a\u043e\u043c\u0430\u043d\u0434\u0430'] != name]\n    data = data[data['\u0421\u043e\u043f\u0435\u0440\u043d\u0438\u043a'] != name]\ndata = data.reset_index(drop=True)","7ce3ad4f":"def GetSeasonTeamStat(team, season):\n    goalScored = 0 #goals scored\n    goalAllowed = 0 #goals conceded\n\n    gameWin = 0\n    gameDraw = 0\n    gameLost = 0 \n\n    totalScore = 0 \n\n    matches = 0\n    \n    xG = 0\n    \n    shot = 0 \n    shotOnTarget = 0 \n    \n    cross = 0\n    accurateCross = 0 \n    \n    totalHandle = 0\n    averageHandle = 0\n    \n    Pass = 0 \n    accuratePass = 0 \n    \n    PPDA = 0\n\n    for i in range(len(data)):\n        if (((data['\u0413\u043e\u0434'][i] == season) and (data['\u041a\u043e\u043c\u0430\u043d\u0434\u0430'][i] == team) and (data['\u0427\u0430\u0441\u0442\u044c'][i] == 2)) or ((data['\u0413\u043e\u0434'][i] == season-1) and (data['\u041a\u043e\u043c\u0430\u043d\u0434\u0430'][i] == team) and (data['\u0427\u0430\u0441\u0442\u044c'][i] == 1))):\n            matches += 1\n                \n            goalScored += data['\u0417\u0430\u0431\u0438\u0442\u043e'][i]\n            goalAllowed += data['\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e'][i]\n\n            if (data['\u0417\u0430\u0431\u0438\u0442\u043e'][i] > data['\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e'][i]):\n                totalScore += 3\n                gameWin += 1\n            elif (data['\u0417\u0430\u0431\u0438\u0442\u043e'][i] < data['\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e'][i]):\n                gameLost +=1\n            else:\n                totalScore += 1\n                gameDraw += 1\n            \n            xG += data['xG'][i]\n            \n            shot += data['\u0423\u0434\u0430\u0440\u044b'][i]\n            shotOnTarget += data['\u0423\u0434\u0430\u0440\u044b \u0432 \u0441\u0442\u0432\u043e\u0440'][i]\n            \n            Pass += data['\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0438'][i]\n            accuratePass += data['\u0422\u043e\u0447\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438'][i]\n            \n            totalHandle += data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'][i]\n            \n            cross += data['\u041d\u0430\u0432\u0435\u0441\u044b'][i]\n            accurateCross += data['\u0422\u043e\u0447\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0441\u044b'][i]\n            \n            PPDA += data['PPDA'][i]\n\n    averageHandle = round(totalHandle\/matches, 3)\n    \n    return [gameWin, gameDraw, gameLost, \n            goalScored, goalAllowed, totalScore, \n            round(xG, 3), round(PPDA, 3),\n            shot, shotOnTarget, \n            Pass, accuratePass,\n            cross, accurateCross,\n            round(averageHandle, 3)]","9997b3eb":"GetSeasonTeamStat(\"\u0421\u043f\u0430\u0440\u0442\u0430\u043a\", 2018)","ba370ec2":"def GetSeasonAllTeamStat(season):\n    annual = collections.defaultdict(list)\n    for team in teamList:\n        team_vector = GetSeasonTeamStat(team, season)\n        annual[team] = team_vector\n    return annual","0c172c49":"def GetTrainingData(seasons):\n    totalNumGames = 0\n    for season in seasons:\n        annual = data[data['\u0413\u043e\u0434'] == season]\n        totalNumGames += len(annual.index)\n    numFeatures = len(GetSeasonTeamStat('\u0417\u0435\u043d\u0438\u0442', 2016)) #\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438\n    xTrain = np.zeros(( totalNumGames, numFeatures))\n    yTrain = np.zeros(( totalNumGames ))\n    indexCounter = 0\n    for season in seasons:\n        team_vectors = GetSeasonAllTeamStat(season)\n        annual = data[data['\u0413\u043e\u0434'] == season]\n        numGamesInYear = len(annual.index)\n        xTrainAnnual = np.zeros(( numGamesInYear, numFeatures))\n        yTrainAnnual = np.zeros(( numGamesInYear ))\n        counter = 0\n        for index, row in annual.iterrows():\n            team = row['\u041a\u043e\u043c\u0430\u043d\u0434\u0430']\n            t_vector = team_vectors[team]\n            rivals = row['\u0421\u043e\u043f\u0435\u0440\u043d\u0438\u043a']\n            r_vector = team_vectors[rivals]\n            \n            diff = [a - b for a, b in zip(t_vector, r_vector)]\n            \n            if len(diff) != 0:\n                xTrainAnnual[counter] = diff\n            if team == row['\u041f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044c']:\n                yTrainAnnual[counter] = 1\n            else: \n                yTrainAnnual[counter] = 0\n            counter += 1   \n        xTrain[indexCounter:numGamesInYear+indexCounter] = xTrainAnnual\n        yTrain[indexCounter:numGamesInYear+indexCounter] = yTrainAnnual\n        indexCounter += numGamesInYear\n    return xTrain, yTrain","e0ab1ee1":"years = range(2016,2019)\nxTrain, yTrain = GetTrainingData(years)","0c2fed6e":"from sklearn.linear_model import LinearRegression","2c94abff":"model = LinearRegression()\nmodel.fit(xTrain, yTrain)","58f564f0":"\ndef createGamePrediction(team1_vector, team2_vector):\n    diff = [[a - b for a, b in zip(team1_vector, team2_vector)]]\n    predictions = model.predict(diff)\n    return predictions","567ef3c3":"team1_name = \"\u0417\u0435\u043d\u0438\u0442\"\nteam2_name = \"\u0421\u043f\u0430\u0440\u0442\u0430\u043a\"\n\nteam1_vector = GetSeasonTeamStat(team1_name, 2019)\nteam2_vector = GetSeasonTeamStat(team2_name, 2019)\n\nprint ('Chance to win ' + team1_name + ':', createGamePrediction(team1_vector, team2_vector))\nprint ('Chance to win ' + team2_name + ':', createGamePrediction(team2_vector, team1_vector))","a3968870":"for team_name in teamList:\n    team1_name = \"\u0426\u0421\u041a\u0410\"\n    team2_name = team_name\n    \n    if(team1_name != team2_name):\n        team1_vector = GetSeasonTeamStat(team1_name, 2019)\n        team2_vector = GetSeasonTeamStat(team2_name, 2019)\n\n        print(team1_name, createGamePrediction(team1_vector, team2_vector), \" - \", team2_name, createGamePrediction(team2_vector, team1_vector,))","5016cdf0":"The function returns predictions. It will return a value between 0 and 1, where 0 - is a loss, and 1 - a win:","0c280fd2":"# Predict","98fd5e60":"\nFunction returning team statistics for the season:","ed4edaf0":"The function that returns the statistics of all teams for the season:","a0de73c0":"Delete matches with teams that do not participate in the season 2018\/2019:","4b0c6ff7":"FC \"Spartak\" statistics for the season 2017\/2018:","bfcedae5":"# Code","d3bb2b18":"Training data for all seasons from 2015\/2016 to 2018\/2019:","4dcde95c":"# Train data\nThe function that will return the training data.\nShe creates a dictionary with vectors of commands for all seasons.\nFor each game, the function calculates the difference between the team vectors for a certain season and records it in xTrain.\nThe function then assigns yTrain a value of 1 if the host team wins, and 0 otherwise."}}