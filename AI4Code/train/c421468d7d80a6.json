{"cell_type":{"277b783c":"code","78da0308":"code","9562259d":"code","b20d9ab8":"code","5936b6cb":"code","c5dff119":"code","6d1aede3":"code","dd8f2797":"code","277349f8":"code","1d119783":"code","9bb1e957":"code","6aa86ef3":"code","59801e2b":"code","b9474763":"code","9afbb274":"code","fb330650":"code","0a49a0c3":"code","406d9a2a":"code","b3732dc7":"code","fa6a0751":"markdown","eda9fc26":"markdown","693820e2":"markdown","ef93a042":"markdown"},"source":{"277b783c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cv2\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","78da0308":"from keras.preprocessing.image import load_img\nimg_name = 'IM-0122-0001.jpeg'\nimg_normal = load_img('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL\/' + img_name)\n\nprint('NORMAL')\nplt.imshow(img_normal)\nplt.show()","9562259d":"img_name = 'person1007_virus_1690.jpeg'\nimg_pneumonia = load_img('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA\/' + img_name)\n\nprint('One of the PNEUMONIA')\nplt.imshow(img_pneumonia)\nplt.show()","b20d9ab8":"Normal_train = os.listdir('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL')\nPneumonia_train = os.listdir('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA')\n","5936b6cb":"from PIL import Image\nimage_arr_train =[]\nlabels_train = []\n\nfor img in Normal_train:\n    try:\n        image = cv2.imread('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL\/' + img)\n        image_from_array = Image.fromarray(image, 'RGB')  #Read in the image with PIL image function in colour mode.\n        resize_img = image_from_array.resize((32, 32))  #Resize the image to 32 * 32\n        image_arr_train.append(np.array(resize_img))\n        labels_train.append(0)\n        \n    except AttributeError:\n        print(\"An error occured while reading in the image\")\n\nfor img in Pneumonia_train:\n    try:\n        image=cv2.imread('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA\/' + img)\n        image_from_array = Image.fromarray(image, 'RGB')\n        resize_img = image_from_array.resize((32, 32))\n        image_arr_train.append(np.array(resize_img))\n        labels_train.append(1)\n        \n    except AttributeError:\n        print(\"An error occur while reading the image\")","c5dff119":"Normal_test = os.listdir('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/NORMAL')\nPneumonia_test = os.listdir('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/PNEUMONIA')","6d1aede3":"image_arr_test =[]\nlabels_test = []\n\nfor img in Normal_test:\n    try:\n        image = cv2.imread('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/NORMAL\/' + img)\n        image_from_array = Image.fromarray(image, 'RGB')  #Read in the image with PIL image function in colour mode.\n        resize_img = image_from_array.resize((32, 32))  #Resize the image to 32 * 32\n        image_arr_test.append(np.array(resize_img))\n        labels_test.append(0)\n        \n    except AttributeError:\n        print(\"An error occured while reading in the image\")\n\nfor img in Pneumonia_test:\n    try:\n        image=cv2.imread('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/PNEUMONIA\/' + img)\n        image_from_array = Image.fromarray(image, 'RGB')\n        resize_img = image_from_array.resize((32, 32))\n        image_arr_test.append(np.array(resize_img))\n        labels_test.append(1)\n        \n    except AttributeError:\n        print(\"An error occur while reading the image\")","dd8f2797":"train_data = np.array(image_arr_train)\ntrain_labels = np.array(labels_train)\nidx = np.arange(train_data.shape[0])\nnp.random.shuffle(idx)\ntrain_data = train_data[idx]\ntrain_labels = train_labels[idx]","277349f8":"test_data = np.array(image_arr_test)\ntest_labels = np.array(labels_test)\nidxt = np.arange(test_data.shape[0])\nnp.random.shuffle(idxt)\ntest_data = test_data[idxt]\ntest_labels = test_labels[idxt]","1d119783":"print(train_data.shape)\nprint(train_labels.shape)\nprint(test_data.shape)\nprint(test_labels.shape)","9bb1e957":"test_labels=test_labels.reshape(test_labels.shape[0],1)\ntrain_labels=train_labels.reshape(train_labels.shape[0],1)\nprint(train_labels.shape)\nprint(test_labels.shape)","6aa86ef3":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(train_data, train_labels, test_size=0.2, random_state=42)\nnumber_of_train = X_train.shape[0]\nnumber_of_test = X_test.shape[0]","59801e2b":"X_train_flatten = X_train.reshape(number_of_train,X_train.shape[1]*X_train.shape[2]*X_train.shape[3])\nX_test_flatten = X_test .reshape(number_of_test,X_test.shape[1]*X_test.shape[2]*X_test.shape[3])\nprint(\"X train flatten\",X_train_flatten.shape)\nprint(\"X test flatten\",X_test_flatten.shape)","b9474763":"print(\"y train: \",Y_train.shape)\nprint(\"y test: \",Y_test.shape)","9afbb274":"x_train = X_train_flatten\nx_test = X_test_flatten\ny_train = Y_train\ny_test = Y_test\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","fb330650":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom keras.models import Sequential # initialize neural network library\nfrom keras.layers import Dense # build our layers library\ndef build_classifier():\n    classifier = Sequential() # initialize neural network\n    classifier.add(Dense(units = 7, kernel_initializer = 'uniform', activation = 'relu', input_dim = x_train.shape[1]))\n    classifier.add(Dense(units = 4, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return classifier\nclassifier = KerasClassifier(build_fn = build_classifier, epochs = 100)\naccuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 3)\nmean = accuracies.mean()\nvariance = accuracies.std()\nprint(\"Accuracy mean: \"+ str(mean))\nprint(\"Accuracy variance: \"+ str(variance))","0a49a0c3":"classifier.fit(x_train,y_train)\ny_pred=classifier.predict(x_test)","406d9a2a":"print(\"score : \",classifier.score(x_test,y_test))","b3732dc7":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test,y_pred)\n\n#%%\nf , ax = plt.subplots(figsize=(5,5))\n\nsns.heatmap(cm,annot = True,linewidths =0.5,linecolor =\"Red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","fa6a0751":"> * %95 is good rate so we don't have to try different hyperparameters","eda9fc26":"<a id=\"1\" >\n    \n # Load and Check Data","693820e2":"1. [Load and Check Data](#1)\n2. [ANN Part](#2)","ef93a042":"<a id=\"2\" >\n    \n# ANN Part"}}