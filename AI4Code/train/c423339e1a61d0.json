{"cell_type":{"ffdf3eb9":"code","e2424959":"code","d88b163b":"code","9ae511b9":"code","d9cc681e":"code","963e5646":"code","44206c93":"code","69e497bb":"code","588bfc28":"code","0d6f3f2c":"code","3e268d56":"code","d3b1d0d6":"code","9da3a091":"code","245ef216":"code","1d4c145a":"code","d3911fd2":"code","d3bab1e7":"code","09022824":"code","321a78af":"code","3f00f071":"code","bf76c71f":"code","134ea4fd":"code","ed290420":"code","e23552dc":"code","83889c4a":"code","02d0afa3":"code","76a164e9":"code","2844e994":"code","2e312b99":"code","9ebc82a1":"code","672e959d":"code","eb31ec46":"code","06cc2379":"markdown","57307850":"markdown","2b1f0378":"markdown","548ee05b":"markdown"},"source":{"ffdf3eb9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e2424959":"timeAge = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/TimeAge.csv')\ncase = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Case.csv')\npolicy = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Policy.csv')\nregion = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Region.csv')\npatientInfo = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/PatientInfo.csv')\nsearchTrend = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/SearchTrend.csv')\nweather = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Weather.csv')\ntimeProvince = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/TimeProvince.csv')\ntimeGender = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/TimeGender.csv')\nseoulFloating = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/SeoulFloating.csv')\ntime = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Time.csv')","d88b163b":"pip install chart_studio","9ae511b9":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\n\n# Interactive plotting\nimport plotly\nimport plotly.graph_objs as go\nimport chart_studio.plotly as py\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot,iplot\n\nimport matplotlib.animation as animation\n\nfrom IPython.display import set_matplotlib_formats\nset_matplotlib_formats(\"retina\")","d9cc681e":"time.info()","963e5646":"time = time.drop([0, 1, 2])","44206c93":"# For calculating Covid positive rate\npositive_rate = (time.confirmed \/ time.test ) * 100\n\n# Covid fatality rate\nfatality_rate = (time.deceased \/ time.confirmed) * 100","69e497bb":"positive_rate","588bfc28":"time","0d6f3f2c":"data=[]\ntotal_case=[]\npositivity=[]\nreleased = []\nfatality=[]\ntest_case = []\ndate=\"\uc6d4-\uc8fc\ucc28\"\ncols='rgb(0,0,255)'\n\ntotal_case = go.Bar(\n    x = time['date'],\n    y = time['confirmed'],\n    name=\"Total confirmed Covid-19 cases\",\n    opacity = 0.6,\n    marker={'color':'LightPink', 'line':{'color':'White','width':1}},\n    yaxis='y2'\n    )\n\nreleased_case = go.Bar(\n    x = time['date'],\n    y = time['released'],\n    name=\"Total released Covid-19 cases\",\n    opacity = 0.6,\n    marker={'color':'SlateBlue', 'line':{'color':'White','width':1}},\n    yaxis='y2'\n    )\n\npositivity = go.Scatter(\n    x = time['date'],\n    y = positive_rate,\n    name=\"Covid-19 Positive Rate\",\n    marker={'color':'#84B1ED', 'line':{'color':'Lavender', 'width':2}}\n    )\n\nfatality = go.Scatter(\n    x= time['date'],\n    y= fatality_rate,\n    name=\"Covid-19 Fatality Rate\",\n    marker={'color':'Coral', 'line':{'color':'Lavender', 'width':2}}\n    )\n\nlayout = go.Layout(\n    title = '<b>South Korea Daily Covid-19 Cases (Jan.2020 - Jun.2020) <\/b>',\n    hovermode='x unified',\n    xaxis = {'title':'Days'},\n    yaxis = {'title':'Rate(%)'},\n    yaxis2 = {'title':'Covid-19 cases', 'overlaying':'y', 'side':'right'},\n    showlegend = True\n)\n\ndata = [total_case, released_case, positivity, fatality]\nfig = go.Figure(data = data, layout=layout)\n\nfig.update_layout(legend=dict(\n    yanchor=\"top\",\n    y=0.99,\n    xanchor=\"left\",\n    x=0.04 ),\n                  title_x = 0.5\n                  \n)\n\n# yanchor=\"top\",\n#     y=0.99,\n#     xanchor=\"left\",\n#     x=0.01\n    \n# orientation=\"h\",\n#     yanchor=\"bottom\",\n#     y=1.02,\n#     xanchor=\"right\",\n#     x=1\n\nplot(fig, show_link= False, filename = 'covid_dashboard.html')\nfig.show()","3e268d56":"# Calculate daily confirmed cases by subtracting yesterday's confirmed cases from today's confirmed cases \ndaily_confirmed = [0]\n\nfor i in range(4, len(time.confirmed) + 3):\n    daily_confirmed.append(time['confirmed'][i] - time['confirmed'][i - 1])\n    \nlen(daily_confirmed)","d3b1d0d6":"import plotly.express as px\n\n# Plot daily confirmed cases\n\ndata=[]\ndaily_case=[]\n\ndate=\"\uc6d4-\uc8fc\ucc28\"\ncols='rgb(0,0,255)'\n\ndaily_case = go.Bar(\n    x = time['date'],\n    y = daily_confirmed,\n    name=\"Daily confirmed Covid-19 cases\",\n    opacity = 0.6,\n    marker={'color':'Coral', 'line':{'color':'White','width':1}},\n    yaxis='y2'\n    )\n\n# markers = px.scatter( \n#     x = policy['start_date'], \n#     y = daily_confirmed, \n#     text = policy[\"gov_policy\"], \n#     log_x=True, \n#     size_max=60\n# )\n\n\nlayout = go.Layout(\n    title = '<b>Daily Covid-19 cases of South Korea (Jan.2020 - Jun.2020) <\/b>',\n    hovermode='x unified',\n    xaxis = {'title':'Days'},\n    yaxis = {'title':'Rate(%)'},\n    showlegend = False)\n\ndata = [daily_case]\nfig = go.Figure(data = data, layout=layout)\n# plot(fig, show_link= False, filename = 'covid_dashboard.html')\nfig.show()","9da3a091":"policy","245ef216":"# How to incorporate government policy into daily confirmed cases..?\ntime['daily_confirmed'] = 0\ntime['daily_confirmed'] = daily_confirmed","1d4c145a":"important_dates = ['2020-02-23','2020-02-26', '2020-02-29', '2020-03-02', '2020-03-08','2020-05-27'] \npolicy[policy['start_date'] == '2020-03-02'].gov_policy.iloc[0]\npolicy[policy['start_date'] == '2020-03-08']\ngetTime = time[time['date'] == important_dates[0]]\ngetTime['daily_confirmed']","d3911fd2":"policy[policy['start_date'] == important_dates[0]].gov_policy.item()","d3bab1e7":"import plotly.express as px\n\n# Plot daily confirmed cases\n\ndata=[]\ndaily_case=[]\n\ndate=\"\uc6d4-\uc8fc\ucc28\"\ncols='rgb(0,0,255)'\n\ndaily_case = go.Bar(\n    x = time['date'],\n    y = daily_confirmed,\n    name=\"Daily confirmed Covid-19 cases\",\n    opacity = 0.6,\n    marker={'color':'Coral', 'line':{'color':'White','width':1}},\n    yaxis='y2'\n    )\n\n# markers = px.scatter( \n#     x = policy['start_date'], \n#     y = daily_confirmed, \n#     text = policy[\"gov_policy\"], \n#     log_x=True, \n#     size_max=60\n# )\n\n\nlayout = go.Layout(\n    title = '<b>Daily Covid-19 cases of South Korea (Jan.2020 - Jun.2020) <\/b>',\n    hovermode='x unified',\n    xaxis = {'title':'Days'},\n    yaxis = {'title':'Rate(%)'},\n    #yaxis2 = {'title':'Covid-19 cases', 'overlaying':'y', 'side':'right'},\n    showlegend = True)\n\ndata = [daily_case]\nfig = go.Figure(data = data, layout=layout)\n\nfor pol in range(len(important_dates)):\n    fig.add_annotation(\n        x = important_dates[pol], \n        y = time[time['date'] == important_dates[pol]].daily_confirmed.item(),\n        text = policy[policy['start_date'] == important_dates[pol]].gov_policy.iloc[0],\n        showarrow=True,\n        arrowhead=1\n    )\n# fig.add_annotation(\n#         x = '2020-05-28', \n#         y = 300,\n#         text = 'sadfd',\n#         showarrow=True,\n#         arrowhead=1\n#     )\nfig.update_layout(showlegend=True)\n# plot(fig, show_link= False, filename = 'covid_dashboard.html')\nfig.show()","09022824":"timeProvince","321a78af":"seoul_confirmed = timeProvince[timeProvince['province'] == 'Seoul']\nseoul_confirmed = seoul_confirmed.reset_index()\nseoul_confirmed","3f00f071":"seoul_confirmed['confirmed'][5]","bf76c71f":"# Calculate daily confirmed cases by subtracting yesterday's confirmed cases from today's confirmed cases \nseoul_daily_confirmed = [0]\nseoul_confirmed_dates = ['2020-01-20']\n\nfor i in range(7, len(seoul_confirmed.confirmed) - 1, 7):\n    seoul_confirmed_dates.append(seoul_confirmed.date[i])\n    seoul_daily_confirmed.append(seoul_confirmed['confirmed'][i] - seoul_confirmed['confirmed'][i - 7])","134ea4fd":"# Calculate daily confirmed cases by subtracting yesterday's confirmed cases from today's confirmed cases \nseoul_daily_released = [0]\n\nfor i in range(7, len(seoul_confirmed.released) -1, 7):\n    seoul_daily_released.append(seoul_confirmed['released'][i] - seoul_confirmed['released'][i - 7])\n    \nlen(seoul_daily_released)","ed290420":"import plotly.express as px\n\n# Plot daily confirmed cases\n\ndata=[]\ndaily_case=[]\nreleased_case = []\n\ncols='rgb(0,0,255)'\n\ndaily_case = go.Bar(\n    x = seoul_confirmed_dates,\n    y = seoul_daily_confirmed,\n    name=\"Confirmed\",\n    opacity = 0.7,\n    marker={'color':'LightCoral', 'line':{'color':'White','width':1.4}},\n    yaxis='y2',\n    #mode='lines+markers'\n)\n\nreleased_case = go.Bar(\n    x = seoul_confirmed_dates,\n    y = seoul_daily_released,\n    name=\"Released\",\n    opacity = 0.7,\n    marker={'color':'SlateBlue', 'line':{'color':'White','width':1.4}},\n    yaxis='y2',\n    #mode='lines+markers'\n)\n\nlayout = go.Layout(\n    title = '<b>Weekly Covid-19 cases of Seoul (Jan.2020 - Jun.2020) <\/b>',\n    hovermode='x unified',\n    xaxis = {'title':'Days'},\n    yaxis = {'title':'Rate(%)'},\n    #yaxis2 = {'title':'Covid-19 cases', 'overlaying':'y', 'side':'right'},\n    showlegend = True)\n\ndata = [daily_case, released_case]\nfig = go.Figure(data = data, layout=layout)\n\nfig.update_layout(showlegend=True)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1),\n                  title_x = 0.5\n                  \n)\n# plot(fig, show_link= False, filename = 'covid_dashboard.html')\nfig.show()","e23552dc":"import plotly.express as px\n\n# Plot daily confirmed cases\n\ndata=[]\ndaily_case=[]\nreleased_case = []\n\ndaily_case = go.Bar(\n    x = seoul_confirmed_dates,\n    y = seoul_daily_confirmed,\n    name=\"Confirmed\",\n    opacity = 0.5,\n    marker={'color':'LightCoral', 'line':{'color':'White','width':1.4}},\n    yaxis='y2',\n)\n\nreleased_case = go.Bar(\n    x = seoul_confirmed_dates,\n    y = seoul_daily_released,\n    name=\"Released\",\n    opacity = 0.5,\n    marker={'color':'SlateBlue', 'line':{'color':'White','width':1.4}},\n    yaxis='y2',\n)\n\nlayout = go.Layout(\n    title = '<b>Weekly Covid-19 Confirmed & Released cases of Seoul (Jan.2020 - Jun.2020) <\/b>',\n    hovermode='x unified',\n    xaxis = {'title':'Weeks'},\n    yaxis = {'title' : 'Confirmed Cases'},\n    yaxis2 = {'title':'Released Cases'},\n    showlegend = True, \n    updatemenus=[\n        dict(\n            type='buttons', showactive=False,\n            y=1.05,\n            x=1.15,\n            xanchor='right',\n            yanchor='middle',\n            pad=dict(t=0, r=10),\n            buttons=[dict(label='Play',\n            method='animate',\n            args=[None, \n                  dict(frame=dict(duration=40, \n                                  redraw=False),\n                                  transition=dict(duration=40000),\n                                  fromcurrent=True,\n                                  mode='immediate')]\n                     )])]\n\n)\n\nframes = [dict(data= [dict(type='bar',\n                           x = seoul_confirmed_dates[:k + 1],\n                           y = seoul_daily_confirmed[:k + 1]),\n                      dict(type='bar',\n                           x = seoul_confirmed_dates[:k + 1],\n                           y = seoul_daily_released[:k + 1])\n                     ],\n               #traces= [0,1,2,3],  \n              )for k in range(1, len(seoul_confirmed_dates))] \n\ndata = [daily_case, released_case]\nfig = go.Figure(data = data, layout=layout)\n\nfig = tools.make_subplots(rows=1, cols=2)\nfig.append_trace(daily_case, 1, 1)\nfig.append_trace(released_case, 1, 2)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1),\n                  title_x = 0.5,\n                          \n)\n\nfig.update(frames = frames,layout=layout)\n\n# plot(fig, show_link= False, filename = 'covid_dashboard.html')\nfig.show()","83889c4a":"timeProvinceNew = timeProvince.copy()\n\nfor i in range(len(timeProvinceNew)):\n    timeProvinceNew.date[i] = timeProvinceNew.date[i][0:7]","02d0afa3":"timeProvince","76a164e9":"timeProvinceNew.province.unique()","2844e994":"province = ['Seoul', 'Busan', 'Daegu', 'Incheon', 'Gwangju', 'Daejeon',\n       'Ulsan', 'Sejong', 'Gyeonggi-do', 'Gangwon-do',\n       'Chungcheongbuk-do', 'Chungcheongnam-do', 'Jeollabuk-do',\n       'Jeollanam-do', 'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Jeju-do']\n\n# For storing every months' confirmed cases of each province\nmonths_df = ['2020-01' for _ in range(len(province))] + ['2020-02' for _ in range(len(province))] + ['2020-03' for _ in range(len(province))] + ['2020-04' for _ in range(len(province))] + ['2020-05' for _ in range(len(province))]+  ['2020-06' for _ in range(len(province))]\nmonths = ['2020-01', '2020-02', '2020-03', '2020-04', '2020-05', '2020-06']\nconfirmed = []\n\nfor m in months:\n    for p in province:\n        lendf = len(timeProvinceNew[(timeProvinceNew['date'] == '{}'.format(m)) & (timeProvinceNew['province'] == '{}'.format(p))])\n        firstcase = timeProvinceNew[(timeProvinceNew['date'] == '{}'.format(m)) & (timeProvinceNew['province'] == '{}'.format(p))].reset_index()['confirmed'][0]\n        lastcase = timeProvinceNew[(timeProvinceNew['date'] == '{}'.format(m)) & (timeProvinceNew['province'] == '{}'.format(p))].reset_index()['confirmed'][lendf - 1]\n        monthcase = lastcase - firstcase\n        confirmed.append(monthcase)\n\n    ","2e312b99":"# Create a dataframe\ndata = {'date':  months_df,\n        'province': province * 6,\n        'confirmed': confirmed\n        }\nmonths_provinces = pd.DataFrame(data = data, columns = ['date', 'province', 'confirmed'])\nmonths_provinces","9ebc82a1":"def draw_barchart(current_month):\n    # Get current month's dataframe\n    curr_month_df = months_provinces[months_provinces['date'] == '2020-0{}'.format(current_month)]\n    \n    # Draw graph\n    data=[]\n    confirmed=[]\n    \n    confirmed = go.Bar(\n    x = curr_month_df['province'],\n    y = curr_month_df['confirmed'],\n    name=\"Covid-19 Confirmed cases by Province\",\n    opacity = 0.6,\n    marker={'color':'LightPink', 'line':{'color':'White','width':1}},\n    yaxis='y'\n    )\n    \n    layout = go.Layout(\n    title = '<b>South Korea Covid-19 Confirmed cases by Province ({}\uc6d4) <\/b>'.format(current_month),\n    hovermode='x unified',\n    xaxis = {'title':'Province'},\n    yaxis = {'title':'Cases'},\n    #yaxis2 = {'title':'Covid-19 cases', 'overlaying':'y', 'side':'right'},\n    showlegend = True)\n\n    data = [confirmed]\n    fig = go.Figure(data = data, layout=layout)\n    \n    fig.update_layout(showlegend=False)\n    # plot(fig, show_link= False, filename = 'covid_dashboard.html')\n    fig.show()","672e959d":"draw_barchart(int(input()))","eb31ec46":"timeProvince","06cc2379":"## Seoul's Covid Confirmed \/ Released cases","57307850":"# Daily confirmed cases and government policy","2b1f0378":"# Covid case over time\n- Dataset: Time.csv\n- Confirmed case : bar\n- Positivity (confirmed case \/ test): line\n- Fatality (deceased \/ confirmed case): line\n- Optional: Bring in Policy.csv to mark specific timeline","548ee05b":"### Folium Documentation: \n- [Jupyter Documentation](https:\/\/nbviewer.jupyter.org\/github\/python-visualization\/folium\/blob\/master\/examples\/Plugins.ipynb#Timestamped-GeoJSON)\n- [Kaggle Example](https:\/\/www.kaggle.com\/daveianhickey\/how-to-folium-for-maps-heatmaps-time-analysis)"}}