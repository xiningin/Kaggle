{"cell_type":{"0032d032":"code","b17fed28":"code","a74ba16b":"code","e470d73a":"code","775525d8":"code","e2ee0aa0":"code","0fe71861":"code","50dbdec4":"code","50589313":"code","dd127dd4":"code","60f6e709":"code","f3049b46":"code","55fc4d08":"code","7db2d504":"code","707ba19f":"code","60f17eb4":"code","a26c31ac":"code","7d41b3f4":"code","f57f2a7f":"code","7b81c574":"code","4e6f27e0":"code","981334fa":"code","ef758828":"markdown","59dfc655":"markdown","f6491e2c":"markdown","f216ff97":"markdown","d81eeff5":"markdown","531b1797":"markdown","65507907":"markdown"},"source":{"0032d032":"from IPython.display import Image\nImage('..\/input\/birds-transfer-learning\/220px-Annas_hummingbird.jpg')","b17fed28":"import pandas as pd\nimport numpy as np\nimport os\nimport cv2\nimport glob\nimport matplotlib.pyplot as plt","a74ba16b":"from tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint","e470d73a":"top_path = '..\/input\/100-bird-species\/train'\nbirds = np.array(list(os.listdir(top_path)))","775525d8":"# pick only 20 type of birds to train on\nnr_birds = 20\n\nnp.random.shuffle(birds)\nbirds = birds[:nr_birds]","e2ee0aa0":"idx_to_name = {i:x for (i,x) in enumerate(birds)}\nname_to_idx = {x:i for (i,x) in enumerate(birds)}\nprint(idx_to_name)","0fe71861":"def get_data_labels(path, birds, dim):\n    data = []\n    labels = []\n\n    for bird in birds:\n        imgs = [cv2.resize(cv2.imread(img), dim, interpolation=cv2.INTER_AREA) for img in glob.glob(path + \"\/\" + bird + \"\/*.jpg\")]\n        for img in imgs:\n            data.append(img)\n            labels.append(name_to_idx[bird])\n    return np.array(data), np.array(labels)","50dbdec4":"data_train, labels_train = get_data_labels('..\/input\/100-bird-species\/train', idx_to_name.values(), (224,224))\ndata_test, labels_test = get_data_labels('..\/input\/100-bird-species\/test', idx_to_name.values(), (224,224))\ndata_valid, labels_valid = get_data_labels('..\/input\/100-bird-species\/valid', idx_to_name.values(), (224,224))","50589313":"def normalize(data):\n    data = data \/ 255.0\n    data = data.astype('float32')\n    return data\n\ndef one_hot(labels):\n    labels = np.eye(len(np.unique(labels)))[labels]\n    return labels","dd127dd4":"data_train = normalize(data_train)\ndata_test = normalize(data_test)\ndata_valid = normalize(data_valid)\n\nlabels_train = one_hot(labels_train)\nlabels_test = one_hot(labels_test)\nlabels_valid = one_hot(labels_valid)","60f6e709":"Image('..\/input\/birds-transfer-learning\/05-06_img_0027.png')","f3049b46":"weights_path = \"..\/input\/birds-transfer-learning\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\"\nbase_model = VGG16(weights=weights_path, include_top=False, input_shape=(224, 224, 3))\nbase_model.summary()","55fc4d08":"# Freeze the extraction layers\nfor layer in base_model.layers:\n    layer.trainable = False\n \nbase_model.summary()","7db2d504":"Image('..\/input\/birds-transfer-learning\/05-06_img_0028.png')","707ba19f":"from tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.models import Model\n \n# use \u201cget_layer\u201d method to save the last layer of the network\nlast_layer = base_model.get_layer('block5_pool')\n# save the output of the last layer to be the input of the next layer\nlast_output = last_layer.output\n \n# flatten the classifier input which is output of the last layer of VGG16 model\nx = Flatten()(last_output)\n \n# add our new softmax layer with 3 hidden units\nx = Dense(nr_birds, activation='softmax', name='softmax')(x)","60f17eb4":"# instantiate a new_model using keras\u2019s Model class\nnew_model = Model(inputs=base_model.input, outputs=x)\n \n# print the new_model summary\nnew_model.summary()","a26c31ac":"new_model.compile(Adam(lr=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])","7d41b3f4":"checkpointer = ModelCheckpoint(filepath='birds.model.hdf5', save_best_only=True)\n \nhistory = new_model.fit(data_train, labels_train, steps_per_epoch=len(data_train),\nvalidation_data=(data_test, labels_test), validation_steps=3, epochs=10, verbose=1, callbacks=[checkpointer])","f57f2a7f":"# Analyze Training Data","7b81c574":"plt.plot(history.history['val_accuracy'], 'b')\nplt.plot(history.history['val_loss'], 'r')\nplt.show()","4e6f27e0":"def get_accuracy(model, data_valid, labels_valid):\n    predictions = model(data_valid)\n    wrong = 0\n    for i, pred in enumerate(predictions):\n        if( np.argmax(pred) !=  np.argmax(labels_valid[i])):\n            wrong += 1\n    return (len(data_valid) - wrong) \/ len(data_valid)","981334fa":"# we use the validation data to verify the accuracy\naccuracy = get_accuracy(new_model, data_valid, labels_valid)\nprint(\"Accuracy:\", accuracy)","ef758828":"# Architecture","59dfc655":"# Split Data","f6491e2c":"# Resources","f216ff97":"# Implementation","d81eeff5":"## Definition of Transfer Learning\n\nTransfer learning (TL) is a research problem in machine learning (ML) that focuses on storing knowledge gained while solving one problem and applying it to a different but related problem. For example, knowledge gained while learning to recognize cars could apply when trying to recognize trucks. This area of research bears some relation to the long history of psychological literature on transfer of learning, although formal ties between the two fields are limited. From the practical standpoint, reusing or transferring information from previously learned tasks for the learning of new tasks has the potential to significantly improve the sample efficiency of a reinforcement learning agent.\n<br><br>\nRessource from : [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Transfer_learning)","531b1797":"Architectures images from [Deep Learning for Vision Systems Book](https:\/\/www.manning.com\/books\/deep-learning-for-vision-systems)","65507907":"# VGG Birds Transfer Learning"}}