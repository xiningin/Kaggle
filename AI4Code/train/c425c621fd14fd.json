{"cell_type":{"2b662a68":"code","848dc11b":"code","8c55d800":"code","9a19797c":"code","fb99607b":"code","c2b58d00":"code","42fc175d":"code","b6cc32e2":"code","2c3ae43c":"code","17e13bec":"code","5df46489":"code","f3acebc7":"code","814a9c91":"code","429869dd":"code","8ee30907":"code","21f1104e":"code","8b97460b":"code","103dada7":"code","fc22e039":"code","1b40dccc":"code","e60d8fb4":"code","34ea46dd":"code","3503806d":"code","30263058":"code","71fa5050":"code","efe193d3":"code","379133b7":"code","214fd9ec":"code","8b8cb1c0":"code","b050952e":"code","d662cd17":"code","1107f675":"code","6d410fad":"code","deedf295":"code","3a977537":"code","ea10cd60":"code","945a7ea6":"code","e263ad92":"code","164c8504":"code","17a8ef26":"code","3b6683f2":"code","11b0f93d":"code","e8caaf18":"code","6f7b8670":"markdown","2642d3f8":"markdown","8071cc77":"markdown","04994ab8":"markdown","b5b28301":"markdown","24d45e8a":"markdown","21e56165":"markdown","47a4204a":"markdown","ac4eec6d":"markdown"},"source":{"2b662a68":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","848dc11b":"### Warning settings\nimport warnings\nwarnings.simplefilter(action='ignore')\n### Round numbers after comma to 2 numbers\nimport pandas as pd\npd.set_option('display.float_format', lambda x: '%.2f' % x)\npd.set_option('display.max_columns', None); \npd.set_option('display.max_rows', None);","8c55d800":"## Read Data\ndf_2010_2011 = pd.read_excel(\"..\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\", sheet_name = \"Year 2010-2011\")\ndf = df_2010_2011.copy()\ndf.head()","9a19797c":"### Let's identify the ones starting with C in invoice numbers and put them into a dataframe\ndf_Return = df[df[\"Invoice\"].str.startswith(\"C\", na = False)]\n### Left real sales in the dataframe\ndf_Sales = df[~(df[\"Invoice\"].str.startswith(\"C\", na = False))]","fb99607b":"#Analyse NA values on the dataset\ndf_Sales.isnull().sum()\n\n","c2b58d00":"## Observed that 1454 is \"NaN\" for Description \"and 134697 is\" NaN for \"Customer ID\"\n## Delete NaN values on the dataset\ndf_Sales.dropna(subset=['Customer ID'], how='all', inplace=True)\ndf_Sales.isnull().sum()\n# already dropped Nan Values from dataframe","42fc175d":"### Observed some NaN in Return dataset, around 383 \ndf_Return.isnull().sum()","b6cc32e2":"## Removed Nan from Return dataset\ndf_Return.dropna(subset=['Customer ID'], how='all', inplace=True)\ndf_Return.isnull().sum()\n","2c3ae43c":"### Analyse data types how they maintained for each variable\ndf_Sales.info()\n","17e13bec":"##Apply TIP transformation for \"Customer_ID\" to int type , get rid of comma\ndf_Sales[\"Customer ID\"] = df_Sales[\"Customer ID\"].astype(int)\ndf_Return[\"Customer ID\"] = df_Return[\"Customer ID\"].astype(int)\ndf_Sales.info()","5df46489":"## convert \"Customer_ID\" to categorical variable with using string method\ndf_Sales[\"Customer ID\"] = df_Sales[\"Customer ID\"].astype(str)\ndf_Return[\"Customer ID\"] = df_Return[\"Customer ID\"].astype(str)","f3acebc7":"## \"Customer_ID\" converted as categorical , shown 'object'\ndf_Sales.info()","814a9c91":"## Released from comma\ndf_Sales.head()","429869dd":"## Size of new dataset\ndf_Sales.shape","8ee30907":"#statistical information of numerical variables\ndf_Sales.describe().T","21f1104e":"### what is the number of unique products\ndf_Sales[\"Description\"].nunique()","8b97460b":"##what is the number of unique products for Return\ndf_Return[\"Description\"].nunique()","103dada7":"## how many of which products were sold?\ndf_Sales[\"StockCode\"].value_counts().head()","fc22e039":"## what is the most ordered product?\ndf_Sales.groupby(\"StockCode\").agg({\"Quantity\":\"sum\"}).sort_values(\"Quantity\",ascending=False).head()","1b40dccc":"##which are the most returned products?\ndf_Return.groupby(\"StockCode\").agg({\"Quantity\":\"sum\"}).sort_values(\"Quantity\",ascending=True).head()","e60d8fb4":"## Total number of invoice\ndf_Sales[\"Invoice\"].nunique()","34ea46dd":"## total price for each reco\ndf_Sales[\"TotalPrice\"]=df_Sales[\"Quantity\"]*df_Sales[\"Price\"]\ndf_Sales.head()","3503806d":"## how many money was earned per invoice\ndf_Sales.groupby(\"Invoice\").agg({\"TotalPrice\":\"sum\"}).sort_values(\"TotalPrice\", ascending = False).head()\n","30263058":"## which are the most expensive products\ndf_Sales.sort_values(\"Price\",ascending = False).head()","71fa5050":"## how many orders came from which country\ndf_Sales.groupby(\"Country\").agg({\"Quantity\":\"sum\"}).sort_values(\"Quantity\",ascending = False)\n","efe193d3":"## Find maximum date of Invoices\nMax_date= df_Sales[\"InvoiceDate\"].max()\nMax_date","379133b7":"## We should take the variable #Max_date as the datetime type. In this way, we will be able to perform the extraction between days\nimport datetime as dt\ntoday_date = dt.datetime(2011,12,9,12,50,0)\ntoday_date\n\n","214fd9ec":"## Let's take the last shopping dates of today's customers and assign the day values of the time between them to a new dataframe structure. These values are the customer's \"Recency\" values. Let's look at the top 5 observations\ndf_last_sales_date=(today_date-df_Sales.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"})).rename(columns={\"InvoiceDate\":\"Recency\"})","8b8cb1c0":"df_recency=df_last_sales_date[\"Recency\"].apply(lambda x : x.days)\ndf_recency.head()","b050952e":"df_Freq=df_Sales.groupby([\"Customer ID\",\"Invoice\"]).agg({\"Invoice\":\"count\"})\ndf_Freq.head()","d662cd17":"df_frequency = df_Freq.groupby(\"Customer ID\").agg({\"Invoice\":\"count\"}).rename(columns = {\"Invoice\":\"Frequency\"})\ndf_frequency.head()","1107f675":"df_monetary = df_Sales.groupby(\"Customer ID\").agg({\"TotalPrice\":\"sum\"}).rename(columns = {\"TotalPrice\":\"Monetary\"})\ndf_monetary.head()","6d410fad":"##firstly, control that there is any mismatch issue between recency,frequency and monetary scores\nprint(df_recency.shape, df_frequency.shape, df_monetary.shape)","deedf295":"## apply Concatenate\ndf_rfm = pd.concat([df_recency,df_frequency,df_monetary], axis = 1)\ndf_rfm.head()","3a977537":"df_rfm[\"RecencyScore\"]   = pd.qcut(df_rfm['Recency'], 5,   labels = [5, 4, 3, 2, 1])\ndf_rfm[\"FrequencyScore\"] = pd.qcut(df_rfm[\"Frequency\"].rank(method=\"first\"),5, labels = [5, 4, 3, 2, 1]) \ndf_rfm[\"MonetaryScore\"] = pd.qcut(df_rfm['Monetary'], 5, labels = [1, 2, 3, 4, 5])\ndf_rfm.head()","ea10cd60":"#Add the RFM score on a customer basis and add RFM SCORE to our dataframe structure.\ndf_rfm[\"RFM_SCORE\"] = df_rfm['RecencyScore'].astype(str) + df_rfm['FrequencyScore'].astype(str) + df_rfm['MonetaryScore'].astype(str)\ndf_rfm.head()","945a7ea6":"seg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Loose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'\n}","e263ad92":"df_rfm['Segment'] = df_rfm['RecencyScore'].astype(str) + df_rfm['FrequencyScore'].astype(str)\ndf_rfm['Segment'] = df_rfm['Segment'].replace(seg_map, regex=True)\ndf_rfm.head()","164c8504":"need_attention_df = pd.DataFrame()\nneed_attention_df[\"NeedAttentionCustomerID\"]= df_rfm[df_rfm[\"Segment\"]=='Need Attention'].index\nneed_attention_df.head()","17a8ef26":"#Import to excel\nneed_attention_df.to_csv(\"Need_Attention.csv\")","3b6683f2":"## I want to see the average and number values of each RFM group.\ndf_rfm[[\"Segment\",\"Recency\",\"Frequency\",\"Monetary\"]].groupby(\"Segment\").agg([\"mean\",\"count\"])","11b0f93d":"newcustomer_df = pd.DataFrame()\nnewcustomer_df[\"NewCustomerID\"] = df_rfm[df_rfm[\"Segment\"] == \"New Customers\"].index\ndf_rfm[df_rfm[\"Segment\"] == \"New Customers\"].head()","e8caaf18":"Cantlose_df=pd.DataFrame()\nCantlose_df[\"cantlose\"]=df_rfm[df_rfm[\"Segment\"]==\"Can't Loose\"].index\ndf_rfm[df_rfm[\"Segment\"] == \"Can't Loose\"].head()","6f7b8670":"# Frequency\n* total number of purchases of the customer","2642d3f8":"# Monetary\n* Total Purchase of the customer","8071cc77":"# The story of the DATA Set\n* This data set includes sales from 01\/11\/2009 to 09\/12\/2011 of an online store in the UK.\n* this company sells souvenirs and most of the customers are wholesalers.\n* In this excel file , there are two sheet.I will use RFM analysis and customer segmentation work only for \" Year-2010-2011\"sheet.","04994ab8":"# COMBINING RFM SCORES","b5b28301":"# CUSTOMER SEGMENTATION","24d45e8a":"# Variables:\n\n* InvoiceNo: invoice number.It is a unique value. If this code starts with C, it means return.\n* StockCode: product code. Unique number for each product\n* Description: Product name\n* Quantity: Number of products. It means how many of the products in the invoices are sold. Those who start with C get negative value\n* InvoiceDate: invoice date and time\n* UnitPrice: Product price (in pounds)\n* CustomerID: Customer number. Unique number for each customer\n* Country:Country name. Refers to the country where the customer lives\n","21e56165":"# Business Need**\n*  A e-commerce company wants to segment its customers and determine marketing strategies according to these segments\n*  Using this data set https:\/\/www.kaggle.com\/nathaniel\/uci-online-retail-ii-data-set, customer behavior will be defined and customers who exhibit the same behavior will be grouped.\n*  According to each group, special sales and marketing techniques will be developed with using RFM analysis and Customer segmentation","47a4204a":"# RFM Scores with Customer Segmentation\u00b6\n","ac4eec6d":"# RECENCY"}}