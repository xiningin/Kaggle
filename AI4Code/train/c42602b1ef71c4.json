{"cell_type":{"fc703a3c":"code","bc5eac1e":"code","0796b5d7":"code","8c6a7e95":"code","31c2d8a6":"code","ac6205ed":"code","3eac6c87":"code","c38b202e":"code","2a7340c2":"markdown","c75efe57":"markdown","0f30c983":"markdown","ae830ac9":"markdown","4aaa539f":"markdown"},"source":{"fc703a3c":"import os, re\nimport numpy as np\nimport pandas as pd\nimport cudf, cupy\nimport gc\n\nimport matplotlib.pyplot as plt","bc5eac1e":"USE_FLOAT32 = True\nFILTER_ZERO_WEIGHT = False","0796b5d7":"%%time\ndata = cudf.read_csv(\"..\/input\/jane-street-market-prediction\/train.csv\")\ndata.head()","8c6a7e95":"if USE_FLOAT32:\n    float64_cols = data.select_dtypes('float64').columns.tolist()\n    data[float64_cols] = data[float64_cols].astype('float32')","31c2d8a6":"if FILTER_ZERO_WEIGHT:\n    data = data[data['weight'] > 0.0]","ac6205ed":"BASE_FEATURES = [f for f in data.columns if re.match('^feature_', f)]\nFEATURES = [f for f in data.columns if re.match('^feature_', f)]","3eac6c87":"features_tag = pd.read_csv(\"..\/input\/jane-street-market-prediction\/features.csv\").set_index('feature').astype(int)\n\nfor it, t in enumerate(features_tag.columns):\n    print(\"%s\\t%d\" % (t, features_tag[t].sum()))\n    cols = features_tag[features_tag[t] > 0].index\n    # mean\n    name = 'feature_%s_mean' % t\n    data[name] = data[cols].mean(axis=1, skipna=True)\n    FEATURES += [name]\n    gc.collect()\n    \n    # std\n    name = 'feature_%s_std' % t\n    data[name] = data[cols].std(axis=1, skipna=True)\n    FEATURES += [name]\n    gc.collect()\n    \n    # min\n    name = 'feature_%s_min' % t\n    data[name] = data[cols].min(axis=1, skipna=True)\n    FEATURES += [name]\n    gc.collect()\n    \n    # max\n    name = 'feature_%s_max' % t\n    data[name] = data[cols].max(axis=1, skipna=True)\n    FEATURES += [name]\n    gc.collect()\n\nFEATURES = list(set(FEATURES))","c38b202e":"data.to_parquet('data.prq')","2a7340c2":"### Intra-day FE\nNot yet implemented for limits i memory","c75efe57":"### Previous days FE\n\nNot yet implemented for limits i memory","0f30c983":"### Row-wise FE\nCalculate aggregations (mean, std, min, max) on variables with the same tag.","ae830ac9":"### Save","4aaa539f":"## Feature Engineering\nAll the features are computed\n- without using the target\n- without looking forward"}}