{"cell_type":{"0cfc9c04":"code","8245795c":"code","68985886":"code","8dd8ac03":"code","1ad383dc":"code","98a0458c":"code","572dcb92":"code","db14081e":"code","35b19663":"code","bdc5ab4e":"code","896159c1":"code","b66216de":"code","07856661":"code","936c8db0":"code","8e0bdd44":"code","50750b15":"code","7a8eb577":"code","aa98f746":"code","0fba98ad":"code","9e081930":"code","a22bda4e":"code","7729c132":"code","74b7b3f0":"code","2e384bb7":"code","6a4f9a7c":"markdown","41b14e58":"markdown","7e0614ee":"markdown","943f8c33":"markdown","20dbb431":"markdown","1ba97987":"markdown","626accbc":"markdown","8680bba4":"markdown","4b818167":"markdown","bdc93a06":"markdown","79b03ed5":"markdown","7258d47c":"markdown","6034424c":"markdown","8c393128":"markdown","f9886a6e":"markdown","50e9a24b":"markdown","9fa64b72":"markdown","c56d6b30":"markdown","86e7b0f5":"markdown","e9f6ba39":"markdown","cc6d4f61":"markdown","892aa380":"markdown"},"source":{"0cfc9c04":"import pandas as pd \npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport numpy as np \nimport seaborn as sns\n\n\n#CHECK VERSION\n!pip install pywrangle --upgrade  #! runs cmd lines\nimport pywrangle as pw\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nprint(\"\\nSetup Complete :)\")","8245795c":"## File Path\nfilepath_winereviews = \"..\/input\/wine-reviews\/winemag-data_first150k.csv\"\n\n## Load Data\ndf_winereviews = pd.read_csv(\n    filepath_or_buffer = filepath_winereviews,\n    sep = \",\",\n    header = 0,\n    index_col = 0    # index unnamed ID column\n)\n\ndf_winereviews.head()","68985886":"## Inspect dataframe\ndf_winereviews.info()\nprint(df_winereviews.shape)\nprint(df_winereviews.columns)","8dd8ac03":"## Use Pywrangle to show nulls per column\npw.show_col_nulls(\n    df_winereviews,\n    show_null_heatmap = True,\n    show_null_corr_matrix = True,\n)","1ad383dc":"##########\n# Columns to drop\n##########\ndf_info = pw.record_df_info(df_winereviews)\n\nneeded_columns = (\n    \"region_1\",\n    \"price\",\n    \"country\",\n    \"province\",\n)\n\n\ndf_winereviews.dropna(\n    axis = 0,\n    how = \"any\",\n    subset = needed_columns,\n    inplace = True\n)\n\n\n##########\n# Dataframe changes\n##########\n\npw.print_df_changes(df_winereviews, df_info)\n\n##########\n# Remaining null values\n##########\n\npw.show_col_nulls(df_winereviews)\n","98a0458c":"## Check dataframe\ndf_winereviews.info()\nprint(df_winereviews.shape)\nprint(df_winereviews.columns)","572dcb92":"##########\n# Clean all string data\n##########\n\n## Tuple of string columns and key for sentence case.\nstr_col_name_case = (\n    (\"country\", 2),\n    (\"description\", 0),\n    (\"designation\", 0),\n    (\"province\", 1),\n    (\"region_1\", 1),\n    (\"region_2\", 1),\n    (\"variety\", 1),\n    (\"winery\", 1),\n)\n\n## Use PW to clean string columns\ndf_winereviews = pw.clean_str_columns(df_winereviews, str_col_name_case)\ndf_winereviews.head(10)\n","db14081e":"##########\n# Combine regions\n##########\nold_df = pw.record_df_info(df_winereviews)\n\ndef join_regions(row: object, join_str = \" - \") -> str:\n    \"\"\"Joins the regions into new string for data_frame.\"\"\"\n    region_list = [row.region_1]\n    \n    if pd.notna(row.region_2):\n        region_list += [join_str, row.region_2]\n        \n    return ''.join(region_list)\n\n\ndf_winereviews['master_region'] = df_winereviews.apply(join_regions, axis = 1)\n\npw.print_df_changes(df_winereviews, old_df)","35b19663":"## Drop region columns\nold_df = pw.record_df_info(df_winereviews)\n\nregions = ['region_1', 'region_2']\ndf_winereviews.drop(\n    regions,\n    axis = 1,\n    inplace = True\n)\n\npw.print_df_changes(df_winereviews, old_df)\n\ndf_winereviews.head()","bdc5ab4e":"## Check duplicate values\ndf_duplicates = (\n    df_winereviews[df_winereviews.duplicated(keep = False) == True]\n    .sort_values(by = [\"country\", \"description\"])\n)\n\nprint(df_duplicates.shape)\ndf_duplicates.head(5)\n\n## NOTE: may like to create an inspect method that does all 3 of these ^^","896159c1":"old_df = pw.record_df_info(df_winereviews)\n\ndf_winereviews.drop_duplicates( inplace = True)\ndf_winereviews.reset_index(drop = True, inplace = True)\n\npw.print_df_changes(df_winereviews, old_df)\ndf_winereviews.head()","b66216de":"df_recorded = pw.record_df_info(df_winereviews)\n\ndf_ca = df_winereviews[df_winereviews['province'] == \"California\"]\ndf_ca.drop(['country', 'province'], axis = 1, inplace = True)\ndf_ca.reset_index(drop = True, inplace = True)\n\npw.print_df_changes(df_ca, df_recorded)\ndf_ca.head(5)","07856661":"## General description\ndf_ca.describe()","936c8db0":"sns.distplot(\n    a = df_ca['price'],\n    kde = False\n)\nplt.title(\"Histogram of CA wine prices\")","8e0bdd44":"sns.scatterplot(\n    x = df_ca['points'],\n    y = df_ca['price']\n)\nplt.title(\"CA wine Points vs Price\")","50750b15":"df_ca['points'].agg(['min', 'max'])","7a8eb577":"old_df = pw.record_df_info(df_ca)\ndf_ca['stars'] = df_ca.apply(lambda row: (row.points - 80) \/\/ 5 + 1, axis = 1)\n\npw.print_df_changes(df_ca, old_df)\ndf_ca.head()","aa98f746":"star_labels = (\n    (1, \"1 star\"),\n    (2, \"2 stars\"),\n    (3, \"3 stars\"), \n    (4, \"4 stars\"),\n    (5, \"5 stars\")\n)\n\nfor star, star_label in star_labels:\n    sns.distplot(\n        a = df_ca[ df_ca['stars'] == star]['price'],\n        label = star_label,\n        kde = True\n    )\n\nplt.title(\"Histogram of price, by stars\")\nplt.legend()\n","0fba98ad":"old_df = pw.record_df_info(df_ca)\n\noutliers = df_ca[df_ca['price'] > 500]\noutliers.reset_index(drop = True, inplace = True)\noutliers.shape\n\npw.print_df_changes(outliers, old_df)\noutliers.head()","9e081930":"for index, row in outliers.iterrows():\n    print(\n        index, row['description'],\n        sep = \"\\t\", end = \"\\n\\n\"\n    )\n","a22bda4e":"old_df = pw.record_df_info(df_ca)\n\ndf_ca = df_ca[df_ca['price'] <= 500]\n\npw.print_df_changes(df_ca, old_df)  ## NOTE that these results match those from the outliers df.\ndf_ca.head()","7729c132":"plt.figure(figsize = (10,6))\n\nplt.title(\"Average price, by number of stars\")\n\nsns.barplot(\n    x = df_ca['stars'],\n    y = df_ca['price'],\n)\n","74b7b3f0":"sns.lmplot(\n    x = \"points\",\n    y = \"price\",\n    data = df_ca\n)\nplt.title(\"CA wine Points vs Price\")\n\ncorr = round( \n    df_ca['points'].corr(df_ca['price']), 4)\n\nprint(f\"Correlation of points to price: {corr}\")","2e384bb7":"## Group description\n\npd.set_option('display.max_rows', None)\n\n(\n    df_ca\n    .groupby(['stars', 'master_region'])['price']\n    .describe()\n    .sort_values(['stars', 'mean', 'count'], ascending = [False, True, False])\n    .reset_index()\n)","6a4f9a7c":"### Bin data","41b14e58":"Generally what you would expect to see. The distribution of price shifts right as stars increase. There are two anomalies here. It looks like both 3 stars and 4 stars have outliers skewing the distribution right.","7e0614ee":"The points range from 80 (low) to 100 (perfect). This is a convenient range to create 5 **bins**:\n- 1 star: 80 - 84\n- 2 star: 84 - 88\n- 3 star: 88 - 92\n- 4 star: 92 - 96\n- 5 star: 96 - 100","943f8c33":"### Outliers","20dbb431":"Looks like I'm going to Santa Barbara County - Central Cost for cheap, 4-star wines (:","1ba97987":"### Describe data","626accbc":"## Clean Data\n1. Clean null data\n2. Clean string data\n3. Check for duplicates","8680bba4":"Wow! There's a standard deviation of 35 in price. I would expect high-end wines to be much more expensive than others, however price Q3 is at 45 USD and the max is 2013 USD. \nLet's investigate this more.","4b818167":"### Grouping","bdc93a06":"### Check duplicates","79b03ed5":"The above analysis shows that missing values fall into 6 categories:\n\n1. region_2\n1. designation\n1. region_1\n1. price\n1. country\n1. province\n\nFor the purpose of this analysis, (3) `region_1` (4) `price`, (5) `country`, and (6) `province` are necessary components.\n\n`Designation` represents the vineyard that the wine came from and `region_2` is a supplementary field. We will keep both of these fields with NA values.","7258d47c":"It looks like price generally increases with stars, although there is more variation with more stars. Let's check the correlation between points and stars.","6034424c":"### Correlation","8c393128":"## Import data\n","f9886a6e":"### Clean string data\n- Define auxiliary function to clean string data\n- Run through all string data\n- Combine `region_1` & `region_2` columns for specificity.","50e9a24b":"# Wine reviews\nThis notebook explores wine reviews in California via the following 3 major steps:\n1. Import Data\n1. Clean Data\n1. Exploratory Data Analysis","9fa64b72":"The obvious outlier is the 2,000 USD wine ~ 91 points. However, there may also be outliers in the 93 - 97 range.\nThere are too many points for a comprehensible understanding of the data. We need another way to group the data with meaning.\n\nThe `points` column is: The number of points WineEnthusiast rated the wine on a scale of 1-100.","c56d6b30":"### Subset data","86e7b0f5":"There are outliers skewing the distribution right, however it's difficult to make sense of the distribution per price.\nTo get a better sense of the data, let's look at the distribution between price and points.\n","e9f6ba39":"### Count null data\n- Count number of nulls per column\n- Visualize nulls\n- Remove null values\n- Check dataframe","cc6d4f61":"### Remove Outliers","892aa380":"## Exploratory Analysis\n\nI am specifically focused on California, so I will subset the data, remove irrelevant columns, and then do exploratory analysis.\n1. Subset Data\n2. Describe\n3. Identify Outliers\n4. Bin Data\n5. Remove Outliers\n6. Correlation\n7. Grouping"}}