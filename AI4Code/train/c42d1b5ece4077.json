{"cell_type":{"efc34bb3":"code","913c451b":"code","e82f9f89":"code","c51ec719":"code","115d656f":"code","252ebb88":"code","223c37de":"code","31dedff5":"code","e026bac6":"code","47f69398":"code","4f9ac991":"code","fa8a1207":"code","5b68d216":"code","75826004":"code","d71eb8d3":"code","1063408b":"code","c4a3ef38":"code","ff47d13b":"code","6c8be4d5":"code","4428908e":"code","c9bcbb77":"code","caa48410":"code","05d99e36":"code","b50c6358":"code","785e6ccf":"code","8b14ad67":"code","3d7dcf03":"code","77b4a013":"code","8d9adc33":"code","a058f6b6":"code","9bdabd5c":"code","bab16764":"code","a2c8253b":"code","a4bb0532":"code","963e0178":"code","15f8b6d2":"code","0caa59ad":"code","16d86377":"code","af0c5ea9":"code","f26e09c0":"markdown"},"source":{"efc34bb3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","913c451b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport warnings\nwarnings.filterwarnings('ignore')","e82f9f89":"data = pd.read_csv(\"\/kaggle\/input\/Train.csv\")\n# Check if there are no missing values\nmsno.matrix(data)","c51ec719":"data.shape","115d656f":"data.dtypes","252ebb88":"data.info()","223c37de":"data.describe()","31dedff5":"data.describe(include='object')","e026bac6":"print(\"max date :\" +data.date_time.max())\nprint(\"min date :\" +data.date_time.min())","47f69398":"plt.figure(figsize = (8,6))\nsns.countplot(y='is_holiday', data = data)\nplt.show()","4f9ac991":"holidays = data.loc[data.is_holiday != 'None']\nplt.figure(figsize=(4,4))\nsns.countplot(y='is_holiday', data=holidays)\nplt.show()","fa8a1207":"data[\"year\"] = data[\"date_time\"].apply(lambda x : x.split(\" \")[0].split(\"-\")[0])\ndata[\"month\"] = data[\"date_time\"].apply(lambda x : x.split(\" \")[0].split(\"-\")[1])\ndata[\"day\"] = data[\"date_time\"].apply(lambda x : x.split(\" \")[0].split(\"-\")[2])\ndata[\"time\"] = data[\"date_time\"].apply(lambda x : x.split(\" \")[1].split(\":\")[0])\ndata[\"day_of_week\"] = pd.DatetimeIndex(data[\"date_time\"].apply(lambda x : x.split(\" \")[0])).dayofweek\ndata.head()","5b68d216":"data[\"snow_p_h\"] = data[\"snow_p_h\"].apply(lambda x : 1 if x!=0 else 0)          \n\ndata[\"wind_direction\"] = data[\"wind_direction\"].apply(lambda x : x\/\/90)\ndata[\"wind_direction\"] = data[\"wind_direction\"].apply(lambda x : 0 if x == 4 else x)\ndata[\"speed_temp\"] = np.sqrt(np.multiply(data[\"wind_speed\"],data[\"temperature\"]))","75826004":"data.plot(x='air_pollution_index', y='traffic_volume', style='.', alpha=.3)\ndata.plot(x='humidity', y='traffic_volume', style='.', alpha=.3)\ndata.plot(x='wind_speed', y='traffic_volume', style='.', alpha=.3)\ndata.plot(x='wind_direction', y='traffic_volume', style='.', alpha=.3)\ndata.plot(x='visibility_in_miles', y='traffic_volume', style='.', alpha=.3)\ndata.plot(x='dew_point', y='traffic_volume', style='.', alpha=.3)\ndata.plot(x='temperature', y='traffic_volume', style='.', alpha=.3)\ndata.plot(x='clouds_all', y='traffic_volume', style='.', alpha=.3)\ndata.plot(x='snow_p_h', y='traffic_volume', style='.', alpha=.3)\nfor i in range(7):\n    data[168*i:168*i+24].plot(x='time', y='traffic_volume', style='.', alpha=.5)","d71eb8d3":"time_arr = data[\"time\"].values\nc=0\nfor t in range(len(time_arr)-1):\n    if int(time_arr[t+1])==int(time_arr[t]):\n#         print(str(t)+\" \"+str(time_arr[t])+\" \"+str(time_arr[t+1]))\n        c+=1\nprint(c)","1063408b":"# taking holiday as a feature\n\nfor i in range(len(data)):\n    if data.at[i,\"is_holiday\"] != \"None\":\n        d = str(data.at[i,\"date_time\"].split(\" \")[0])\n        j=i\n        while str(data.at[j,\"date_time\"].split(\" \")[0])==d:\n            data.at[j,\"is_holiday\"] = 1\n            j+=1\n    else: data.at[i,\"is_holiday\"] = 0","c4a3ef38":"#adding dummy values\ndata = pd.get_dummies(data, columns = [\"day_of_week\", \"month\", \"wind_direction\"], prefix_sep='_', drop_first=True)\ndata.head()","ff47d13b":"data = data.drop_duplicates(subset=['date_time', 'traffic_volume'], keep=\"last\")\n# data.to_csv(\"mod_data.csv\", index=False)","6c8be4d5":"mod_data = data.drop(columns=[\"date_time\",\"traffic_volume\",\"weather_description\",\"weather_type\",\"dew_point\",\"visibility_in_miles\"])\nmod_data.head()","4428908e":"X = mod_data.values","c9bcbb77":"Y = data[\"traffic_volume\"].values","caa48410":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=.8, random_state=0)\n\nfrom xgboost import XGBRegressor\nmodel_xgb = XGBRegressor(\n                        gamma=5, \n                        learning_rate=.3,\n                        max_depth=15,\n                        reg_lambda=100,\n                        n_estimators = 500\n                        )\n                         \nmodel_xgb.fit(X_train, Y_train,eval_metric='rmse', verbose = True, eval_set = [(X_test, Y_test)])\n\ny_pred = model_xgb.predict(X_test)\n\nfrom sklearn.metrics import explained_variance_score, mean_absolute_error, mean_squared_error, mean_squared_log_error\nprint(explained_variance_score(Y_test, y_pred))\nprint(mean_squared_error(Y_test, y_pred))\nprint(np.sqrt(mean_squared_error(Y_test, y_pred)))\n\n","05d99e36":"test_data = pd.read_csv(\"\/kaggle\/input\/Test.csv\")","b50c6358":"test_data[\"year\"] = test_data[\"date_time\"].apply(lambda x : x.split(\" \")[0].split(\"-\")[0])\ntest_data[\"month\"] = test_data[\"date_time\"].apply(lambda x : x.split(\" \")[0].split(\"-\")[1])\ntest_data[\"day\"] = test_data[\"date_time\"].apply(lambda x : x.split(\" \")[0].split(\"-\")[2])\ntest_data[\"time\"] = test_data[\"date_time\"].apply(lambda x : x.split(\" \")[1].split(\":\")[0])\ntest_data[\"day_of_week\"] = pd.DatetimeIndex(test_data[\"date_time\"].apply(lambda x : x.split(\" \")[0])).dayofweek\n\n\ntest_data[\"snow_p_h\"] = test_data[\"snow_p_h\"].apply(lambda x : 1 if x!=0 else 0)\n\ntest_data[\"wind_direction\"] = test_data[\"wind_direction\"].apply(lambda x : x\/\/90)\ntest_data[\"wind_direction\"] = test_data[\"wind_direction\"].apply(lambda x : 0 if x == 4 else x)\ntest_data[\"speed_temp\"] = np.sqrt(np.multiply(test_data[\"wind_speed\"],test_data[\"temperature\"]))","785e6ccf":"for i in range(len(test_data)):\n    if test_data.at[i,\"is_holiday\"] != \"None\":\n        d = str(test_data.at[i,\"date_time\"].split(\" \")[0])\n        j=i\n        while str(test_data.at[j,\"date_time\"].split(\" \")[0])==d:\n            test_data.at[j,\"is_holiday\"] = 1\n            j+=1\n    else: test_data.at[i,\"is_holiday\"] = 0","8b14ad67":"test_data = pd.get_dummies(test_data, columns = [\"day_of_week\",\"month\",\"wind_direction\"], prefix_sep='_', drop_first=True)\n\n\n# test_data[\"wind_speed_sq\"] = test_data[\"wind_speed\"].apply(lambda x:x**0.5)\n\ntest_mod_data = test_data.drop(columns=[\"date_time\",\"weather_description\",\"weather_type\",\"dew_point\",\"visibility_in_miles\"])\n\ntest_X = test_mod_data.values","3d7dcf03":"#copying data to new data frame\ndf_traffic_features = data.copy()","77b4a013":"#clouds, rain and snow distribution over different weather conditions\ndf_traffic_features.groupby('weather_description').aggregate({'traffic_volume':[np.mean,np.size],\n                                                              'clouds_all':'count','rain_p_h':'mean','snow_p_h':'mean'})","8d9adc33":"df_traffic_features['weather_description'] = df_traffic_features['weather_description'].map(lambda x:x.lower())","a058f6b6":"#Any row containing \"thunderstorm\" is replaced by \"thunderstorm\"\ndf_traffic_features.loc[df_traffic_features['weather_description'].str.contains('thunderstorm'),'weather_description'] = 'thunderstorm'   ","9bdabd5c":"weather = ['thunderstorm','mist','fog','haze']\ndf_traffic_features.loc[np.logical_not(df_traffic_features['weather_description'].isin(weather)),'weather_description'] = 'other'","bab16764":"#aggreagating traffic volume over year and plotting \n\ndf_date_traffic = df_traffic_features.groupby('year').aggregate({'traffic_volume':'mean'})\nplt.figure(figsize=(8,6))\nsns.lineplot(x = df_date_traffic.index, y = df_date_traffic.traffic_volume, data = df_date_traffic)\nplt.show()","a2c8253b":"df_traffic_features.weather_description.value_counts()","a4bb0532":"#creating dummy variables for these newly created categories in weather description\ndf_traffic_features = pd.get_dummies(columns=['weather_description'],data=df_traffic_features)","963e0178":"df_traffic_features.columns","15f8b6d2":"pred_y = model_xgb.predict(test_X)","0caa59ad":"for i in range(len(pred_y)):\n    if pred_y[i]<=0:\n        sum = 0\n        for j in range(10):\n            sum = sum + pred_y[i-24*j]\n        pred_y[i] = sum\/10","16d86377":"submission = pd.DataFrame(columns = [\"date_time\",\"traffic_volume\"])\nsubmission[\"date_time\"] = test_data[\"date_time\"]\nsubmission[\"traffic_volume\"] = pred_y","af0c5ea9":"submission.to_csv(\"submission.csv\",index = False)","f26e09c0":"#The weather description mostly describes rain, snow, thunderstorms, fog, mist and haze."}}