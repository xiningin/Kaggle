{"cell_type":{"8dee714d":"code","462a57b6":"code","355f694e":"code","95e71720":"code","1c6b26c8":"code","db96ed0b":"code","4ac9fae5":"code","442160aa":"code","7ac648a2":"code","597e8c47":"code","3e601200":"code","e7a72ff3":"code","92101d63":"code","3002fc14":"code","aaffc74a":"code","f1eaf363":"code","d331167b":"code","9e8b66fe":"code","a7ba11e2":"code","3ae4a940":"code","4eb69904":"code","576ec6f6":"code","912d51e7":"code","558eda37":"code","1d0798fa":"code","5c1ae03d":"code","17899a46":"code","20270b5d":"code","bfbcdddb":"code","dbefbad0":"code","3b86156f":"code","e8dc2112":"code","51279e88":"code","177d48b9":"code","739a5a0e":"code","9a03980b":"code","254a6fab":"code","ba93fb0d":"code","c193d8d8":"code","297529c0":"code","c52a5aab":"code","23e86f10":"code","07f28fe8":"code","1028a861":"code","c7cf2fb3":"code","0be29f58":"code","b69132de":"code","cb82c6d8":"code","05d96653":"code","78e09438":"code","ffe1388e":"code","ad516aca":"code","71f2288e":"code","1a15b826":"code","acddf26d":"code","1d05810f":"code","9c0c77e5":"markdown","ad984f47":"markdown","6fcdaf3e":"markdown","75d721fb":"markdown","4ec17bc6":"markdown","049b173e":"markdown","b98c69bc":"markdown","caf639df":"markdown","dc9f5dc6":"markdown","56836a12":"markdown","37fbafab":"markdown","83564c88":"markdown","2f9fa890":"markdown","f79c0d55":"markdown","acd8a9ab":"markdown","5c8f77df":"markdown","7a069875":"markdown","93ef254e":"markdown","5fc85ef1":"markdown","8cbec2ec":"markdown","3b70c4cd":"markdown","dfd4a51a":"markdown","19dd9c93":"markdown","5f17a579":"markdown"},"source":{"8dee714d":"!pip install dabl","462a57b6":"# for some basic operations\nimport numpy as np \nimport pandas as pd\n\n# for visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport dabl","355f694e":"# reading the data\n\ndata = pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')\n\n# getting the shape of the data\nprint(data.shape)","95e71720":"# looking at the head of the data\n\ndata.head()","1c6b26c8":"# describing the dataset\n\ndata.describe()","db96ed0b":"# check the no. of unique items present in the categorial column\n\ndata.select_dtypes('object').nunique()","4ac9fae5":"# check the percentage of missing data in each column present in the data\n\nno_of_columns = data.shape[0]\npercentage_of_missing_data = data.isnull().sum()\/no_of_columns\nprint(percentage_of_missing_data)","442160aa":"# comparison of all the attributes with respect to Math Marks\n\nplt.rcParams['figure.figsize'] = (18,6)\nplt.style.use('fivethirtyeight')\ndabl.plot(data,target_col = 'math score')","7ac648a2":"# comparison of all other attributes with respect to Reading Marks\n\nplt.rcParams['figure.figsize'] = (18,6)\nplt.style.use('fivethirtyeight')\ndabl.plot(data,target_col = 'reading score')","597e8c47":"# comparison of all the other attributes with respect to Writing Marks\n\nplt.rcParams['figure.figsize'] = (18,6)\nplt.style.use('fivethirtyeight')\ndabl.plot(data,target_col = 'writing score')","3e601200":"total_students = data.shape[0]\nstudents_score_more_than_50 = data[data['math score'] > 50].shape[0]\nprobability_of_students_scoring_more_than_50_in_maths = (students_score_more_than_50\/total_students)*100\nprint(\"Probability of Students Scoring more than 50 marks in Math :\",probability_of_students_scoring_more_than_50_in_maths)","e7a72ff3":"total_students = data.shape[0]\nstudents_score_more_than_50 = data[data['reading score'] > 50].shape[0]\nprobability_of_students_scoring_more_than_50_in_reading = (students_score_more_than_50\/total_students)*100\nprint(\"Probability of Students Scoring more than 50 marks in Reading :\",probability_of_students_scoring_more_than_50_in_reading)","92101d63":"total_students = data.shape[0]\nstudents_score_more_than_50 = data[data['writing score'] > 50].shape[0]\nprobability_of_students_scoring_more_than_50_in_writing = (students_score_more_than_50\/total_students)*100\nprint(\"Probability of Students Scoring more than 50 marks in Writing :\",probability_of_students_scoring_more_than_50_in_writing)","3002fc14":"total_students = data.shape[0]\nnumber_of_students_passing_in_all_subjects = data[(data['math score'] > 40) & (data['writing score'] > 40) & (data['reading score'] > 40)].shape[0]\nprobability_of_students_passing_in_all_the_subjects = (number_of_students_passing_in_all_subjects\/total_students)*100\nprint(\"The Probability of Students Passing in all the Subjects is {0:.2f}%\".format(probability_of_students_passing_in_all_the_subjects))","aaffc74a":"total_students = data.shape[0]\nnumber_of_students_scoring_more_than_90 = data[(data['math score'] > 90) & (data['writing score'] > 90) & (data['reading score'] > 90)].shape[0]\nprobability_of_students_scoring_more_than_90_in_all_the_subjects = (number_of_students_scoring_more_than_90\/total_students)*100\nprint(\"The Probability of Students Scoring more than 90 in all the Subjects is {0:.2f}%\".format(probability_of_students_scoring_more_than_90_in_all_the_subjects))","f1eaf363":"plt.subplot(1, 3, 1)\nsns.distplot(data['math score'])\n\nplt.subplot(1, 3, 2)\nsns.distplot(data['reading score'])\n\nplt.subplot(1, 3, 3)\nsns.distplot(data['writing score'])\n\nplt.suptitle('Checking for Skewness', fontsize = 18)\nplt.show()","d331167b":"# taking seed so that everytime the random values come out to be constant \nnp.random.seed(6)\n\n# taking 100 sample values from the dataset of 1000 values \nsample_math_marks = np.random.choice(a = data['math score'], size = 100)\n\n# getting the sample mean\nprint(\"Sample mean for Math Scores :\",sample_math_marks.mean())\n\n# getting the population mean\nprint(\"Population mean for Math Scores :\",data['math score'].mean())\n\n# taking 100 sample values from the dataset of 1000 values\nsample_reading_marks = np.random.choice(a = data['reading score'], size = 100)\n\n# getting the sample mean\nprint(\"\\nSample mean for Reading Scores :\",sample_reading_marks.mean())\n\n# getting the population mean\nprint(\"Population mean for Reading Scores :\",data['reading score'].mean())\n\n# taking 100 sample values from the dataset of 1000 values\nsample_writing_marks = np.random.choice(a = data['writing score'], size = 100)\n\n# getting the sample mean\nprint(\"\\nSample mean for Writing Scores :\",sample_writing_marks.mean())\n\n# getting the population mean\nprint(\"Population mean for Writing Scores :\",data['writing score'].mean())","9e8b66fe":"# import the scipy package\nimport scipy.stats as stats\nimport math\n\n# seed the random value\nnp.random.seed(10)\n\n# taking a sample size\nsample_size = 1000\nsample = np.random.choice(a = data['math score'], size = sample_size)\nsample_mean = sample.mean()\n\n# getting the z-critical value\nz_critical = stats.norm.ppf(q = 0.95)\n\n# checking the z-critical value\nprint(\"z-critical value: \",z_critical)\n\n# getting the population standard deviation\npop_stdev = data['math score'].std()\n\n# checking the margin of error\nmargin_of_error = z_critical * (pop_stdev\/math.sqrt(sample_size))\n\n# defining  the confidence interval\nconfidence_interval = (sample_mean - margin_of_error,sample_mean + margin_of_error)\n\n#printing the results\nprint(\"Confidence interval:\",end=\"\")\nprint(confidence_interval)\nprint(\"True mean: {}\".format(data['math score'].mean()))","a7ba11e2":"# importing the scipy package\nimport scipy.stats as stats\nimport math\n\n# seeding the random values\nnp.random.seed(10)\n\n# taking a sample size \nsample_size = 1000\nsample = np.random.choice(a = data['reading score'], size = sample_size)\nsample_mean = sample.mean()\n\n# getting the z-critical value\nz_critical = stats.norm.ppf(q = 0.95)\n\n# checking the z-critical value\nprint(\"z-critical value: \",z_critical)\n\n# checking the population standard deviation\npop_stdev = data['reading score'].std()\n\n# checking the margin of error\nmargin_of_error = z_critical * (pop_stdev\/math.sqrt(sample_size))\n\n# defining confidence interval\nconfidence_interval = (sample_mean - margin_of_error,sample_mean + margin_of_error)\n\n# printing the results\nprint(\"Confidence interval:\",end=\"\")\nprint(confidence_interval)\nprint(\"True mean: {}\".format(data['reading score'].mean()))","3ae4a940":"# seeding the random values\nnp.random.seed(10)\n\n# taking a sample size \nsample_size = 1000\nsample = np.random.choice(a = data['writing score'], size = sample_size)\nsample_mean = sample.mean()\n\n#gettng the z-critical value\nz_critical = stats.norm.ppf(q = 0.95)\n\n# checking the z-critical value\nprint(\"z-critical value: \",z_critical)\n\n# getting the population standard deviation\npop_stdev = data['writing score'].std()\n\n# checking the margin of error\nmargin_of_error = z_critical * (pop_stdev\/math.sqrt(sample_size))\n\n# defining confidence variable\nconfidence_interval = (sample_mean - margin_of_error,sample_mean + margin_of_error)\n\n# printing the results\nprint(\"Confidence interval:\",end=\"\")\nprint(confidence_interval)\nprint(\"True mean: {}\".format(data['writing score'].mean()))","4eb69904":"data[(data['gender'] == 'female') & (data['math score'] > 90) & (data['writing score'] > 90) & (data['reading score'] > 90)]","576ec6f6":"data.groupby(['gender']).agg(['min','median','max'])","912d51e7":"data[['lunch','gender','math score','reading score','writing score']].groupby(['lunch','gender']).agg('median')","558eda37":"data[['test preparation course','gender','math score','reading score','writing score']].groupby(['test preparation course','gender']).agg('median')","1d0798fa":"data[['race\/ethnicity','math score','reading score','writing score']].groupby(['race\/ethnicity']).agg('median')","5c1ae03d":"# visualising the number of male and female in the data set\n\nplt.rcParams['figure.figsize'] = (15,5)\nplt.style.use('classic')\nsns.countplot(data['gender'],palette = 'icefire')\nplt.title('Comparison of Males and Females',fontweight = 30)\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.show()","17899a46":"# visualising the different groups in the dataset\n\nplt.rcParams['figure.figsize'] = (15,9)\nplt.style.use('ggplot')\n\nsns.countplot(data['race\/ethnicity'],palette = 'mako')\nplt.title('Comparison of various groups',fontweight = 30,fontsize = 20)\nplt.xlabel('Groups')\nplt.ylabel('count')\nplt.show()","20270b5d":"# visualising the different parental education levels\n\nplt.rcParams['figure.figsize'] = (15,9)\nplt.style.use('fivethirtyeight')\n\nsns.countplot(data['parental level of education'],palette = 'magma')\nplt.title('Comparison of Parential Education', fontweight = 30,fontsize = 20)\nplt.xlabel('Degree')\nplt.ylabel('count')\nplt.show()","bfbcdddb":"# visualising different types of lunch\n\nplt.rcParams['figure.figsize'] = (15,9)\nplt.style.use('seaborn-talk')\n\nsns.countplot(data['lunch'],palette = 'viridis')\nplt.title('Comparison of different types of lunch', fontweight = 30,fontsize = 20)\nplt.xlabel('types of lunch')\nplt.ylabel('count')\nplt.show()","dbefbad0":"# visualising math score\n\nplt.rcParams['figure.figsize'] = (15,9)\nplt.style.use('tableau-colorblind10')\n\nsns.countplot(data['math score'],palette = 'RdPu')\nplt.title('Comparison of math score', fontweight = 30,fontsize = 20)\nplt.xlabel('score')\nplt.ylabel('count')\nplt.xticks(rotation = 90)\nplt.show()","3b86156f":"# visualising reading score\n\nplt.rcParams['figure.figsize'] = (15,9)\nplt.style.use('tableau-colorblind10')\n\nsns.countplot(data['reading score'],palette = 'YlOrBr')\nplt.title('Comparison of reading score', fontweight = 30,fontsize = 20)\nplt.xlabel('score')\nplt.ylabel('count')\nplt.xticks(rotation = 90)\nplt.show()","e8dc2112":"# visualising writing score\n\nplt.rcParams['figure.figsize'] = (15,9)\nplt.style.use('tableau-colorblind10')\n\nsns.countplot(data['writing score'],palette = 'prism')\nplt.title('Comparison of writing score', fontweight = 30,fontsize = 20)\nplt.xlabel('score')\nplt.ylabel('count')\nplt.xticks(rotation = 90)\nplt.show()","51279e88":"# comparison of gender and race\/ethnicity\n\nplt.rcParams['figure.figsize'] = (15,9)\nx = pd.crosstab(data['gender'],data['race\/ethnicity'])\nx.div(x.sum(1).astype(float),axis = 0).plot(kind = 'bar',stacked = False)\nplt.title('Gender vs Race',fontweight = 30,fontsize = 20)\nplt.show()","177d48b9":"# comparision of race\/ethnicity and parental level of education\n\nplt.rcParams['figure.figsize'] = (15,9)\nx = pd.crosstab(data['race\/ethnicity'],data['parental level of education'])\nx.div(x.sum(1).astype(float),axis = 0).plot(kind = 'bar',stacked = True)\nplt.title('Race vs Parental Education',fontweight = 30,fontsize = 20)\nplt.show()","739a5a0e":"# comparision of parental degree and test preparation\n\nplt.rcParams['figure.figsize'] = (15,9)\nsns.countplot(x = 'parental level of education',data = data,hue = 'test preparation course',palette = 'dark')\nplt.title('Parental Education vs Test Preparation Course',fontweight = 30,fontsize = 20)\nplt.show()","9a03980b":"# comparison of race\/ethnicity  and test preparation\n\nplt.rcParams['figure.figsize'] = (15,9)\nsns.countplot(x = 'race\/ethnicity',data = data,hue = 'test preparation course',palette = 'colorblind')\nplt.title('Race vs Test Preparation Course',fontweight = 30,fontsize = 20)\nplt.show()","254a6fab":"# feature engineering on the data to visualize and solve the dataset more accurately\n\n#setting a pass on the three subjects individually\n\npassmarks = 40\n\n# creating a new column pass_math telling whether the students pass or fail\ndata['pass_math'] = np.where(data['math score'] < passmarks,'Fail','Pass')\ndata['pass_math'].value_counts().plot.pie(colors = ['darkblue','green'])\n\nplt.title('Pass\/Fail in Maths',fontweight = 30,fontsize = 20)\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","ba93fb0d":"# creating new column pass_reading telling whether the students pass or fail\n\npassmarks = 40\n\ndata['pass_reading'] = np.where(data['reading score'] < passmarks,'Fail','Pass')\ndata['pass_reading'].value_counts().plot.pie(colors = ['hotpink','yellow'])\n\nplt.title('Pass\/Fail in Reading',fontweight = 30,fontsize = 20)\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","c193d8d8":"# creating new column pass_reading telling whether the students pass or fail\n\npassmarks = 40\n\ndata['pass_writing'] = np.where(data['writing score'] < passmarks,'Fail','Pass')\ndata['pass_writing'].value_counts().plot.pie(colors = ['orange','black'])\n\nplt.title('Pass\/Fail in Writing',fontweight = 30,fontsize = 20)\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","297529c0":"# computing the total score for each student\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndata['total_score'] = data['math score'] + data['reading score'] + data['writing score']\n\nsns.distplot(data['total_score'],color = 'darkviolet')\n\nplt.title('Comparison of Total Score of all the Students',fontweight = 30,fontsize = 20)\nplt.xlabel('total score scored by all students')\nplt.ylabel('count')\nplt.show()","c52a5aab":"# computing percentage for each of the students\n\nfrom math import*\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndata['percentage']  = data['total_score']\/3\n\nfor i in range(0,1000):\n    data['percentage'][i] = ceil(data['percentage'][i])\n\nplt.rcParams['figure.figsize'] = (15,9)\nsns.distplot(data['percentage'],color = 'green')\n\nplt.title('Comparison of percentage scored by all the students',fontweight = 30,fontsize = 20)\nplt.xlabel('Percentage scored')\nplt.ylabel('Count')\nplt.show()","23e86f10":"# checking which student is fail overall\n\ndata['status'] = data.apply(lambda x  : 'Fail' if x['pass_math'] == 'Fail' or x['pass_reading'] == 'Fail' or x['pass_writing'] == 'Fail' else 'pass',axis = 1)\n\ndata['status'].value_counts(dropna = False).plot.pie(colors = ['grey','crimson'])\nplt.title('Overall Results',fontweight = 30,fontsize = 20)\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","07f28fe8":"def getgrade(percentage,status):\n    if status == 'Fail':\n        return 'E'\n    if (percentage >= 90):\n        return 'O'\n    if (percentage >= 80):\n        return 'A'\n    if (percentage >= 70):\n        return 'B'\n    if (percentage >= 60):\n        return 'C'\n    if (percentage >= 40):\n        return 'D'\n    else:\n        return 'E'\n    \ndata['grades'] = data.apply(lambda x:getgrade(x['percentage'],x['status']),axis = 1)\n\ndata['grades'].value_counts()","1028a861":"# plotting a pie chart for the distribution of various grades amongst the students\n\nlabels = ['Grade O','Grade A','Grade B','Grade C','Grade D','Grade E']\nsizes = [58,156,260,252,223,51]\ncolors = ['green','gold','darkblue','coral','hotpink','aqua']\nexplode = (0.0001,0.0001,0.0001,0.0001,0.0001,0.0001)\n\npatches,texts = plt.pie(sizes,colors = colors,shadow = True,startangle = 90)\nplt.legend(patches,labels)\nplt.title('Distribution of Grades among Students',fontweight = 30,fontsize = 20)\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","c7cf2fb3":"# comparing parental education and student's grade\n\nplt.rcParams['figure.figsize'] = (15,9)\n\nx = pd.crosstab(data['parental level of education'],data['grades'])\ncolor = plt.cm.copper(np.linspace(0,1,8))\nx.div(x.sum(1).astype(float),axis = 0).plot(kind = 'bar',stacked = True,color = color)\nplt.title(\"Parental Education vs Student's Grades\",fontweight = 30,fontsize = 20)\nplt.show()","0be29f58":"# plotting again using seaborn for better visualization\n\nsns.countplot(x = data['parental level of education'],data = data,hue = data['grades'],palette = 'bright')\nplt.title('Parental Education vs Grades of Students',fontweight = 30,fontsize = 20)\nplt.show()","b69132de":"# comparing the distribution of grades amonf males and females\n\nsns.countplot(x = data['grades'],data = data,hue = data['gender'],palette = 'rocket_r')\nplt.title('Grades vs Gender',fontweight = 30,fontsize = 20)\nplt.show()","cb82c6d8":"from sklearn.preprocessing import LabelEncoder\n\n# creating an encoder\nle = LabelEncoder()\n\n# label encoder for test preparation course\ndata['test preparation course'] = le.fit_transform(data['test preparation course'])\n\n# label encoding gor lunch\ndata['lunch'] = le.fit_transform(data['lunch'])\n\n# label encoding for race\/ethnicity\n# mapping values to each of the categories\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group A',1)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group B',2)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group C',3)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group D',4)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group E',5)\n\n# label encoding for parental education\ndata['parental level of education'] = le.fit_transform(data['parental level of education'])\n\n# label encoding for gender\ndata['gender'] = le.fit_transform(data['gender'])\n\n# label encoding for pass_math\ndata['pass_math'] = le.fit_transform(data['pass_math'])\n\n# label encoding for pass_reading\ndata['pass_reading'] = le.fit_transform(data['pass_reading'])\n\n# label encoding for pass_writing\ndata['pass_writing'] = le.fit_transform(data['pass_writing'])\n\n# label encoding for status\ndata['status'] = le.fit_transform(data['status'])","05d96653":"# splitting the dependent and independent variables\n\nx = data.iloc[:,:14]\ny = data.iloc[:,14]\n\nprint(x.shape)\nprint(y.shape)","78e09438":"# splitting the dataset into training and test sets\n\nfrom sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.1,random_state=42)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","ffe1388e":"# importing the MinMaxScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n# creating a scaler\nmm = MinMaxScaler()\n\n# feeding the independent variable into the scaler\nx_train = mm.fit_transform(x_train)\nx_test = mm.transform(x_test)","ad516aca":"from sklearn.linear_model import LogisticRegression\n\n# creating a model\nmodel = LogisticRegression()\n\nmodel.fit(x_train,y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the classification accuracies\nprint(\"Training Accuracy :\",model.score(x_train,y_train))\nprint(\"Testing Accuracy :\",model.score(x_test,y_test))","71f2288e":"# printing the confusion matrix\nfrom sklearn.metrics import confusion_matrix\n\n# creating a confusion matrix\ncm = confusion_matrix(y_test,y_pred)\n\n# printing the confusion matrix\nplt.rcParams['figure.figsize'] = (8,8)\nsns.heatmap(cm,annot = True,cmap = 'Greens')\nplt.title('Confusion Matrix for Logistic Regression',fontweight = 30,fontsize = 20)\nplt.show()","1a15b826":"from sklearn.ensemble import RandomForestClassifier\n\n# creating a model\nmodel = RandomForestClassifier()\n\n# feeding the training data to the model\nmodel.fit(x_train,y_train)\n\n# predicting the x-test results\ny_pred = model.predict(x_test)\n\n# calculating the accuracies\nprint(\"Training Accuracy :\",model.score(x_train,y_train))\nprint(\"Testing Accuracy :\",model.score(x_test,y_test))","acddf26d":"# printing the confusion matrix\nfrom sklearn.metrics import confusion_matrix\n\n# creating a confusion matrix\ncm = confusion_matrix(y_test,y_pred)\n\n# printing the confusion matrix\nplt.rcParams['figure.figsize'] = (8,8)\nsns.heatmap(cm,annot = True,cmap = 'Reds')\nplt.title('Confusion Matrix for Random Forest',fontweight = 30,fontsize = 20)\nplt.show()","1d05810f":"from pandas.plotting import radviz\nfig,ax = plt.subplots(figsize = (12,12))\nnew_df = x.copy()\nnew_df[\"status\"] = y\nradviz(new_df,\"status\",ax = ax,colormap = \"flare\")\nplt.title('Radial Visualization for Target',fontsize = 20)\nplt.show()","9c0c77e5":"##### Confidence Interval for Math Score","ad984f47":"##### Compare the scores secured by Boys and Girls ","6fcdaf3e":"### Label Encoding ","75d721fb":"##### assigning grades to the grades according to the following criteria\n##### > 0  -  40 : grade E\n##### > 41 -  60 : grade D\n##### > 61 -  70 : grade C\n##### > 71 -  80 : grade B\n##### > 81 -  90 : grade A\n##### > 91 - 100 : grade O","4ec17bc6":"##### Confidence Interval for Writing Score","049b173e":"##### Probability of Students Passing in all the three Subjects","b98c69bc":"## EDA","caf639df":"##### Effect of Race\/Ethnicity on Student's Performance","dc9f5dc6":"##### Effect of Lunch on Student's Performance","56836a12":"### Descriptive Statistics","37fbafab":"## Data Preparation","83564c88":"##### Skewness for the Maths, Reading and Writing Scores","2f9fa890":"### Random Forest","f79c0d55":"### Grouping Operations\n\n##### Number of Students Scoring 90 in all the Subjects","acd8a9ab":"##### Confidence Interval for Reading Score","5c8f77df":"## Modelling and Prediction ","7a069875":"### Data Visualizations","93ef254e":"### Logistic Regression ","5fc85ef1":"##### Effect of Test Preparation on Student's Performance","8cbec2ec":"### Importing the necessary libraries ","3b70c4cd":"### Reading the Data set","dfd4a51a":"### Splitting the dataset","19dd9c93":"### Inferential Statistics\n\n##### Probability of Students Scoring More than 50 Marks in all three Subjects","5f17a579":"## Data Cleaning "}}