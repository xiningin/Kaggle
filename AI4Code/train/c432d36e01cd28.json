{"cell_type":{"47c94b11":"code","8775b22d":"code","71eeb479":"code","461c4001":"code","c4387917":"code","e4685336":"code","719fce83":"code","6f02305b":"code","6065233c":"markdown","df9a6d68":"markdown","fe5e10e5":"markdown","db0926ba":"markdown","3fc5bc13":"markdown"},"source":{"47c94b11":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.metrics import f1_score\n\ndef create_axes_grid(numplots_x, numplots_y, plotsize_x=6, plotsize_y=3):\n    fig, axes = plt.subplots(numplots_y, numplots_x)\n    fig.set_size_inches(plotsize_x * numplots_x, plotsize_y * numplots_y)\n    return fig, axes\n    \ndef set_axes(axes, use_grid=True, x_val = [0,100,10,5], y_val = [-50,50,10,5]):\n    axes.grid(use_grid)\n    axes.tick_params(which='both', direction='inout', top=True, right=True, labelbottom=True, labelleft=True)\n    axes.set_xlim(x_val[0], x_val[1])\n    axes.set_ylim(y_val[0], y_val[1])\n    axes.set_xticks(np.linspace(x_val[0], x_val[1], np.around((x_val[1] - x_val[0]) \/ x_val[2] + 1).astype(int)))\n    axes.set_xticks(np.linspace(x_val[0], x_val[1], np.around((x_val[1] - x_val[0]) \/ x_val[3] + 1).astype(int)), minor=True)\n    axes.set_yticks(np.linspace(y_val[0], y_val[1], np.around((y_val[1] - y_val[0]) \/ y_val[2] + 1).astype(int)))\n    axes.set_yticks(np.linspace(y_val[0], y_val[1], np.around((y_val[1] - y_val[0]) \/ y_val[3] + 1).astype(int)), minor=True)\n","8775b22d":"df_train = pd.read_csv(\"..\/input\/data-without-drift\/train_clean.csv\")\ndf_test  = pd.read_csv(\"..\/input\/data-without-drift\/test_clean.csv\")","71eeb479":"fig, axes = create_axes_grid(1,1,20,10)\nset_axes(axes, x_val=[0,len(df_train),500000,100000], y_val=[-6,12,1,1])\naxes.set_title('Initial Train Signal')\naxes.plot(df_train['open_channels'], color='red', linewidth=0.8);\naxes.plot(df_train['signal'], color='darkblue', linewidth=0.2);\n","461c4001":"offset = 2.74\ndf_train['batch'] = df_train.index \/\/ 500000\ndf_train['modified_signal'] = df_train['signal'] + offset\n\nmean_by_channel_per_batch = df_train.groupby(['batch', 'open_channels'])['modified_signal'].mean()\ndf_train['channel_means'] = df_train[['batch', 'open_channels']].apply(lambda x: mean_by_channel_per_batch[x[0],x[1]], axis=1)","c4387917":"fig, axes = create_axes_grid(1,1,20,10)\nset_axes(axes, x_val=[0,len(df_train),500000,100000], y_val=[-6,12,1,1])\naxes.set_title('Mean Signal per Open Channel per Batch')\naxes.scatter(np.arange(len(df_train)), df_train['channel_means'], color='darkblue', linewidth=0.2)","e4685336":"#Batches 5 and 10\ndf_train['modified_signal'] = df_train[['batch', 'modified_signal']].apply(lambda x: (x[1]+offset) if ((x[0] == 4) or (x[0] == 9)) else x[1], axis=1)\n#Batch 8\ndf_train['modified_signal'] = df_train[['batch', 'modified_signal']].apply(lambda x: (1.7+((x[1]-1.7)*0.93)) if (x[0] == 7) else x[1], axis=1)\n\nvisual_factor = 0.81\ndf_train['modified_signal'] = visual_factor * df_train['modified_signal']\n","719fce83":"print('f1_score', round(f1_score(df_train['open_channels'], np.clip(np.round(df_train['modified_signal']), 0, 10), average='macro'),3))","6f02305b":"mean_by_channel_per_batch = df_train.groupby(['batch', 'open_channels'])['modified_signal'].mean()\ndf_train['channel_means'] = df_train[['batch', 'open_channels']].apply(lambda x: mean_by_channel_per_batch[x[0],x[1]], axis=1)\n\nfig, axes = create_axes_grid(1,1,20,10)\nset_axes(axes, x_val=[0,len(df_train),500000,100000], y_val=[-6,12,1,1])\naxes.set_title('Updated Mean Signal per Open Channel per Batch')\naxes.scatter(np.arange(len(df_train)), df_train['channel_means'], color='darkblue', linewidth=0.2)","6065233c":"5. Compute f1_score using only the modified_signal (after applying above offsets)","df9a6d68":"# 0.918 F1_Score using only signal column, no models!","fe5e10e5":"1. In below plot, we can see visually that there appears to be a pattern between open_channels and corresponding signal","db0926ba":"3. Move batches 5 and 10 up, so that open_channels matches signal mean values.\n   Also attempted a small fix for batch 8 spikes.","3fc5bc13":"2. Apply offset = 2.74 and check mean value of signal per channel"}}