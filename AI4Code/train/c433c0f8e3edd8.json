{"cell_type":{"5e33bf06":"code","b9e46bab":"code","baaa56f9":"code","8dd4452f":"code","ac826527":"code","33481e38":"code","5515ca96":"code","bd534608":"code","d4077707":"code","3bed6099":"code","a5ba4f89":"code","816d9385":"code","de2986bd":"code","9af7b0b2":"code","82f8fb73":"code","41f7d8f0":"code","14f3af37":"code","7b3bf3c1":"code","08d260ce":"code","ab5b394a":"code","2c9d4903":"code","2e5054c2":"code","0b75affc":"code","374cb132":"code","2f54e754":"code","e0e485c8":"code","ef929a06":"code","ddab02f2":"code","2c2f61cf":"code","1723ce45":"code","d4098624":"code","48bf72c0":"code","2fbc146c":"code","21094d5a":"code","225cb774":"code","9e063406":"code","b4b39eb7":"code","fdec19a4":"code","df0d0ef9":"code","b61d7550":"code","c1afb3d0":"code","66bb4195":"code","ae9f6c9f":"code","64de0faa":"code","a5e19fc9":"code","8182f879":"code","08961554":"code","2e2fc4ce":"code","951dfd89":"code","dbb2748e":"code","d787de45":"code","17c450c7":"code","e0844543":"code","ff956184":"code","5c525d6a":"code","dd746094":"code","68d75fbd":"code","58f08d44":"code","2503c084":"code","f79de596":"code","11185644":"code","751f3d68":"code","4e44f194":"code","9dcd258f":"code","4875dd8d":"markdown","d5ac09f0":"markdown","d2e616b6":"markdown","a06c917b":"markdown","082b46fb":"markdown","19dc6457":"markdown","c4cdf9f6":"markdown","3fde62c2":"markdown","a976605d":"markdown","39e9d641":"markdown","7076c868":"markdown","408177ce":"markdown","6af9623a":"markdown","c69107e8":"markdown","7169e0d5":"markdown","2c04f618":"markdown","045f951c":"markdown","e6d8a0dc":"markdown","038350cb":"markdown","065f149c":"markdown","8ac1c136":"markdown","4c0ea374":"markdown","0fdd2f73":"markdown","e0f1dbc3":"markdown","228ae37c":"markdown","4bc1777a":"markdown","976cc954":"markdown","6a772bfc":"markdown","bb5767d7":"markdown","885e790c":"markdown","7d965bf6":"markdown","9c6fdc7c":"markdown","2d8b4e09":"markdown","05bba5d8":"markdown","be38b765":"markdown","0eac1835":"markdown","65ae653c":"markdown","9e112665":"markdown","201a186a":"markdown","f54ed046":"markdown"},"source":{"5e33bf06":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom collections import Counter\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b9e46bab":"df_T250 = pd.read_csv('\/kaggle\/input\/restaurant-business-rankings-2020\/Top250.csv',index_col=0)\ndf_T250.head()","baaa56f9":"df_T250.dtypes","8dd4452f":"df_T250.info()","ac826527":"df_T250.describe()","33481e38":"#Function to strip '%' from the data.\ndef Nopercentage(x):\n    return float(x.strip('%'))\/100","5515ca96":"#Redownloading but this time with a converter (changing all percentage value to regular value).\ndf_T250 = pd.read_csv(r'\/kaggle\/input\/restaurant-business-rankings-2020\/Top250.csv',converters={'YOY_Sales':Nopercentage, 'YOY_Units':Nopercentage})","bd534608":"#To have a higher level scatterplot view of all the numeric data against eachother.\nsns.pairplot(df_T250)","d4077707":"#To create scatterplot between 'Sales' against 'Rank' and 'Units.'\nrunall = ['Rank','Units']\nfor c in runall:\n    plt.figure(figsize = (10, 5))\n    sns.regplot(data=df_T250, x='Sales', y=c)","3bed6099":"#To create scatterplot between 'YOY_Sales' against 'YOU_Units.'\nplt.figure(figsize = (10, 5))\nsns.regplot(data=df_T250, x='YOY_Sales', y='YOY_Units')","a5ba4f89":"#To create scatterplot between 'Rank' and 'Units.'\nplt.figure(figsize = (10, 5))\nsns.regplot(data=df_T250, x='Rank', y='Units')","816d9385":"#To print all the unique values in dataframe.\ndf_T250.nunique()","de2986bd":"#In order to detect outliers and count their frequency.\ndef detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        Q1 = np.percentile(df[c],25)\n        Q3 = np.percentile(df[c],75)\n        IQR = Q3 - Q1 \n        outlier_step = IQR * 1.5\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # Store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","9af7b0b2":"#To detect outliers on following columns.\ndf_T250.loc[detect_outliers(df_T250, [\"Sales\", \"Units\", \"YOY_Sales\",\"YOY_Units\"])]","82f8fb73":"sns.heatmap(df_T250.isnull())","41f7d8f0":"df_T250.isnull().sum()","14f3af37":"#To eliminate column 'Content' and 'Headquarters.'\ndf_T250=df_T250.drop(['Content','Headquarters'], axis=1)","7b3bf3c1":"df_T250['Segment_Category'].unique()","08d260ce":"#To create a function that will put the values belonging to similar category into the same category.\ndef replace(text):\n    if 'Quick Service & ' in text:\n        text = text.replace('Quick Service & ', '')  \n    elif 'Fast' in text:\n        text = text.replace('Fast Casual & ', '')\n    elif 'Casual' in text:\n        text = text.replace('Casual Dining & ', '')\n    elif 'Fine Dining & ' in text:\n        text = text.replace('Fine Dining & ', '')\n    elif 'Family Dining & ' in text:\n        text = text.replace('Family Dining & ', '')\n    elif ('Family Style' in text) or ('Family Style' == text):\n        text = text.replace('Family Style', 'Family')\n    elif ('Family Casual' in text) or ('Family Casual' == text):\n        text = text.replace('Family Casual', 'Family')\n    elif ('Asian\/Noodle' in text) or ('Asian\/Noodle' == text):\n        text = text.replace('Asian\/Noodle', 'Asian')      \n    elif ('Italian\/Pizza' in text) or ('Italian\/Pizza' == text):\n        text = text.replace('Italian\/Pizza', 'Pizza')\n    return text\n\n\ndf_T250['Segment_Category'] = df_T250['Segment_Category'].apply(replace)","ab5b394a":"df_T250['Segment_Category'].unique()","2c9d4903":"#To create barplot on the basis of 'Segment_Category'\nrunall = ['Sales','Units','YOY_Sales','YOY_Units']\nfor c in runall:\n    plt.figure(figsize = (20, 5))\n    sns.barplot(x = 'Segment_Category', y = c , data = df_T250)\n    plt.xticks(rotation = 45)","2e5054c2":"#To create piechart on 'Sales' on the basis of 'Segment_Category' and the restaurants that falls under them.\nfig = px.sunburst(df_T250, path=['Segment_Category', 'Restaurant'], values='Sales')\nfig.show()","0b75affc":"#To create piechart on 'Units' on the basis of 'Segment_Category' and the restaurants that falls under them.\nfig = px.sunburst(df_T250, path=['Segment_Category', 'Restaurant'], values='Units')\nfig.show()","374cb132":"#Downloading with a converter (changing all percentage value to regular value).\ndf_F50 = pd.read_csv('\/kaggle\/input\/restaurant-business-rankings-2020\/Future50.csv',converters={'YOY_Sales':Nopercentage, 'YOY_Units':Nopercentage})","2f54e754":"df_F50.head()","e0e485c8":"df_T250.describe()","ef929a06":"df_F50.info()","ddab02f2":"#To have a higher level scatterplot view of all the numeric data against eachother.\nsns.pairplot(df_F50)","2c2f61cf":"#To create scatterplot 'Sales' against 'Rank','Units', and 'Unit_Volume'\nrunall = ['Rank','Units','Unit_Volume']\nfor c in runall:\n    plt.figure(figsize = (10, 5))\n    sns.regplot(data=df_F50, x='Sales', y=c)","1723ce45":"#To create scatterplot between 'YOY_Sales' against 'YOY_Units.'\nplt.figure(figsize = (10, 5))\nsns.regplot(data=df_F50, x='YOY_Sales', y='YOY_Units')","d4098624":"df_F50.loc[detect_outliers(df_F50, [\"Sales\", \"Units\", \"YOY_Sales\",\"YOY_Units\", \"Unit_Volume\"])]","48bf72c0":"df_F50=df_F50.drop(df_F50.index[1])","2fbc146c":"sns.heatmap(df_F50.isnull())","21094d5a":"df_T250.isnull().sum()","225cb774":"df_F50.nunique()","9e063406":"#To create a dictionary for state.\nstate_dict = {'N.Y.':'NY',\n             'Fla.':'FL',\n             'D.C.':'DC',\n             'Ill.':'IL',\n             'Nev.':'NV',\n             'N.C.':'NC',\n             'Ind.':'IN',\n             'Texas':'TX',\n             'Pa.':'PA',\n             'Calif.':'CA',\n             'Ga.':'GA',\n             'Mich.':'MI',\n             'Mass.':'MA',\n             'Ore.':'OR',\n             'N.J.':'NJ',\n             'Tenn.':'TN',\n             'Colo.':'CO',\n             'Va.':'VA',\n              'Ky.':'KY',\n              'Ohio':'OH',\n              'Mo.':'MO',\n              'Ariz':'AZ',\n              'Neb.':'NE',\n              'Ark.':'AR',\n              'Wash.':'DC',\n              'S.C.':'SC'\n             }","b4b39eb7":"#To create a list out of data in column 'Location.'\nlist_of_location = df_F50['Location'].to_list()","fdec19a4":"#To create two new list for state and city and add it to dataframe.\nnew_city=[]  \nnew_state_1=[]\nfor j in list_of_location:\n    for i in state_dict:\n        j=\" \".join(j.split())\n        if i in j:\n            new_state_1.append(state_dict[i])\n            x=j.split(',')\n            new_city.append(x[0])\ndf_F50['State'] = new_state_1\ndf_F50['City'] = new_city","df0d0ef9":"#To drop 'location' column from dataframe.\ndf_F50.drop(['Location'],axis=1, inplace=True)","b61d7550":"#To create barplot on the basis of 'State'\nrunall = ['Sales','Units','YOY_Sales','YOY_Units','Unit_Volume']\nfor c in runall:\n    plt.figure(figsize = (10, 5))\n    sns.barplot(x = 'State', y = c , data = df_F50)\n    plt.xticks(rotation = 45)","c1afb3d0":"#To create barplot on the basis of 'City'\nrunall = ['Sales','Units','YOY_Sales','YOY_Units','Unit_Volume']\nfor c in runall:\n    plt.figure(figsize = (20, 4))\n    sns.barplot(x = 'City', y = c , data = df_F50)\n    plt.xticks(rotation = 45)","66bb4195":"#To create barplot on the basis of 'Franchise'\nrunall = ['Rank','Sales','Units','YOY_Sales','YOY_Units','Unit_Volume']\nfor c in runall:\n    plt.figure(figsize = (3, 5))\n    sns.barplot(x = 'Franchising', y = c , data = df_F50)\n    plt.xticks(rotation = 45)","ae9f6c9f":"#To create piechart on 'Sales' on the basis of 'Franchising', 'State', and 'City' that falls under them.\nfig = px.sunburst(df_F50, path=['Franchising','State', 'City'], values='Sales')\nfig.show()","64de0faa":"#To create piechart on 'Units' on the basis of 'Franchising', 'State', and 'City' that falls under them.\nfig = px.sunburst(df_F50, path=['Franchising','State', 'City'], values='Units')\nfig.show()","a5e19fc9":"#To create piechart on 'Unit_Volume' on the basis of 'Franchising', 'State', and 'City' that falls under them.\nfig = px.sunburst(df_F50, path=['Franchising','State', 'City'], values='Unit_Volume')\nfig.show()","8182f879":"df_I100 = pd.read_csv('\/kaggle\/input\/restaurant-business-rankings-2020\/Independence100.csv')","08961554":"df_I100.head()","2e2fc4ce":"df_I100.nunique()","951dfd89":"df_I100.describe()","dbb2748e":"sns.heatmap(df_I100.isnull())","d787de45":"list_of_state = df_I100['State'].to_list()","17c450c7":"new_state=[]\nfor i in list_of_state:\n    x=i.strip()\n    if x in state_dict:\n        new_state.append(state_dict[x])","e0844543":"df_I100['State'] = new_state","ff956184":"df_I100.head()","5c525d6a":"df_I100.rename(columns = {'Average Check' : 'Average_Check', 'Meals Served' : 'Meals_Served'}, inplace = True)","dd746094":"df_I100.loc[detect_outliers(df_I100, [\"Sales\", \"Average_Check\", \"Meals_Served\"])]","68d75fbd":"sns.pairplot(df_I100)","58f08d44":"runall = ['Rank','Average_Check','Meals_Served']\nfor c in runall:\n    plt.figure(figsize = (10, 5))\n    sns.regplot(data=df_I100, x='Sales', y=c)","2503c084":"plt.figure(figsize = (10, 5))\nsns.regplot(data=df_I100, x='Average_Check', y='Meals_Served')","f79de596":"runall = ['Sales','Meals_Served','Average_Check']\nfor c in runall:\n    plt.figure(figsize = (10, 4))\n    sns.barplot(x = 'State', y = c , data = df_I100)\n    plt.xticks(rotation = 45)","11185644":"runall = ['Sales','Meals_Served','Average_Check']\nfor c in runall:\n    plt.figure(figsize = (20, 4))\n    sns.barplot(x = 'City', y = c , data = df_I100)\n    plt.xticks(rotation = 45)","751f3d68":"fig = px.sunburst(df_I100, path=['State', 'City'], values='Sales')\nfig.show()","4e44f194":"fig = px.sunburst(df_I100, path=['State', 'City'], values='Average_Check')\nfig.show()","9dcd258f":"fig = px.sunburst(df_I100, path=['State', 'City'], values='Meals_Served')\nfig.show()","4875dd8d":"# B. 7. Visualizing by Franchise.","d5ac09f0":"# B. 4. Looking for Null values.","d2e616b6":"# B. 5. Visualizing by state.","a06c917b":"# B. Future50 Restaurants.","082b46fb":"# A. 5. Visualizing by Category.","19dc6457":"# A. 4. We will try to minimize the category for clearer visualization by grouping similar category together.   ","c4cdf9f6":"**Observation(s): We can see here almost 75% of the values in column 'Content' and 'Headquarters' are null values hence the whole column will be eliminated.**","3fde62c2":"# C. 7. Looking for possible correlation.","a976605d":"**Observation(s): 'Segment_Category' being categorical data has too many categories. We will see if we can lessen the numbers in order to get clearer visualization.**","39e9d641":"**Note: Two new columns 'State' and 'City' have been added in the replacment of column 'Locations.'**","7076c868":"# A. Top 250 Restaurants","408177ce":"# B. 1. Loading Future50 dataframe but with the percentage converter.","6af9623a":"**Observation(s): No Null values found.**","c69107e8":"# C. 8. Visualizing by State.","7169e0d5":"# C. 12. Visualizing by Meals Served.","2c04f618":"# C. 1. Loading Independence100 Dataframe","045f951c":"# B. 6. Visualizing by city.","e6d8a0dc":"# C. 10. Visualizing by Sales.","038350cb":"**Observation(s): No outliers found.**","065f149c":"# B. 7. Visualizing by Unit_Volume.","8ac1c136":"# C. Independence100","4c0ea374":"# C. 11. Visualizing by Average Check.","0fdd2f73":"# B. 7. Visualizing by Sales.","e0f1dbc3":"# C. 6. Looking for Outliers.","228ae37c":"# C. 5. Changing the column names in order follow the naming convention followed by other two dataframes for consistency.","4bc1777a":"**Observation(s): We can see in column 'Location' state and city are in the same record; they need to be seperated for the purpose of simplicity and concistency with other dataframe.**","976cc954":"# C. 2. Exploring Independence Dataframe.","6a772bfc":"# A. 1. Exploring Top 250 Dataframe.","bb5767d7":"**Observation(s):**\n**We can see column 'YOY_Sales' and 'YOY_Units' data are in percentage; they need to be changed in order to do analysis.**","885e790c":"# B. 7. Visualizing by Units.","7d965bf6":"# B. 3. Looking for Outliers.","9c6fdc7c":"# A. 3. Looking for Null values.","2d8b4e09":"# The main goal of this analysis is to explore data and simplify the dataset so that it can be used in other BI tools like Tableau by people from non-coding background.# ","05bba5d8":"# C. 9. Visualizing by city.","be38b765":"# A. 2. Looking for Outliers.","0eac1835":"# To be Continued","65ae653c":"**Observation(s): Since, there is only one we will be dropping the entire row from the Dataframe.**","9e112665":"# C. 4. Since column 'State' is not in a proper format and in order to keep consistency, the data will be changed to universal format.","201a186a":"# B. 2. Exploring Future50 Dataframe.","f54ed046":"# C. 3. Looking for Null Values."}}