{"cell_type":{"56f6bc34":"code","c6921d7e":"code","a4e5246d":"code","ea707b5e":"code","68d5e212":"code","c05e4d22":"code","cf951060":"code","723ef801":"code","1c553cfe":"code","a6f50b7a":"code","59620bbc":"code","f94e6f85":"code","202f3a6c":"code","240f0eb8":"code","291f109e":"code","b69f20f8":"code","6e8043d8":"code","795873b1":"code","a9940854":"code","a126817f":"code","0ce1dc6d":"code","cefecd18":"code","e39e2ede":"code","a92442e0":"code","1f507065":"code","f592c951":"code","0717063a":"code","beca4e37":"code","66823906":"code","cf5cee65":"code","a193817a":"code","180087b1":"code","2674bcea":"code","2f846b51":"code","12a7721e":"code","b548f38b":"code","7519f495":"code","f32e8d5b":"code","d88c5ee9":"code","40c8084b":"code","ca51ce47":"code","f04ee2ca":"code","74ec9cd6":"code","d40aaf1b":"code","5c778aec":"code","f0daa898":"code","7e1ee91e":"code","34827c2a":"code","c6fc4330":"markdown","fc0ffe16":"markdown","c4db77ef":"markdown","c61fbeb3":"markdown","6a6b31ff":"markdown","2baf0be3":"markdown"},"source":{"56f6bc34":"import pandas as pd\nimport numpy as np","c6921d7e":"df=pd.read_csv(r\"..\\Regression_train.csv\")","a4e5246d":"df.head()","ea707b5e":"#df = df.drop(['Serial No.'], axis=1)\n#df.head()\ndf.isnull().sum()","68d5e212":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfig = sns.distplot(df['GRE Score'], kde=False)\nplt.title(\"Distribution of GRE Scores\")\nplt.show()\n\nfig = sns.distplot(df['TOEFL Score'], kde=False)\nplt.title(\"Distribution of TOEFL Scores\")\nplt.show()\n\nfig = sns.distplot(df['University Rating'], kde=False)\nplt.title(\"Distribution of University Rating\")\nplt.show()\n\nfig = sns.distplot(df['SOP'], kde=False)\nplt.title(\"Distribution of SOP Ratings\")\nplt.show()\n\nfig = sns.distplot(df['CGPA'], kde=False)\nplt.title(\"Distribution of CGPA\")\nplt.show()\n\nplt.show()","c05e4d22":"fig = sns.regplot(x=\"GRE Score\", y=\"TOEFL Score\", data=df)\nplt.title(\"GRE Score vs TOEFL Score\")\nplt.show()","cf951060":"fig = sns.regplot(x=\"GRE Score\", y=\"CGPA\", data=df)\nplt.title(\"GRE Score vs CGPA\")\nplt.show()","723ef801":"fig = sns.regplot(x=\"GRE Score\", y=\"LOR \", data=df)\nplt.title(\"GRE Score vs LOR\")\nplt.show()","1c553cfe":"fig = sns.regplot(x=\"CGPA\", y=\"LOR \", data=df)\nplt.title(\"CGPA vs LOR\")\nplt.show()","a6f50b7a":"fig = sns.lmplot(x=\"CGPA\", y=\"LOR \", data=df, hue=\"Research\")\nplt.title(\"LOR vs CGPA\")\nplt.show()","59620bbc":"corr = df.corr()\nfig, ax = plt.subplots(figsize=(8, 8))\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\ndropSelf = np.zeros_like(corr)\ndropSelf[np.triu_indices_from(dropSelf)] = True\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, cmap=colormap, linewidths=.5, annot=True, fmt=\".2f\", mask=dropSelf)\nplt.show()","f94e6f85":"from sklearn.model_selection import train_test_split\n\nX = df.drop(['Chance of Admit '], axis=1)\ny = df['Chance of Admit ']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.30, shuffle=False)","202f3a6c":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error","240f0eb8":"model=LinearRegression()","291f109e":"model.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\nprint(np.sqrt(mean_squared_error(y_test, predictions)))","b69f20f8":"print(df['SOP'].skew())\nprint(df['GRE Score'].skew())\nprint(df['University Rating'].skew())\nprint(df['LOR '].skew())\nprint(df['CGPA'].skew())","6e8043d8":"df.columns","795873b1":"# https:\/\/www.statisticshowto.com\/box-cox-transformation\/\nfrom scipy import stats\ndf['SOP_boxcox'] =stats.boxcox(df['SOP'])[0]\ndf.head()\npd.Series(df['SOP_boxcox']).skew()","a9940854":"from sklearn.model_selection import train_test_split\n\nX1 = df.drop(['Chance of Admit ','SOP'], axis=1)\ny = df['Chance of Admit ']\nX_train, X_test, y_train, y_test = train_test_split(X1,y,test_size = 0.30, shuffle=False)","a126817f":"model.fit(X_train, y_train)\npredictions = model.predict(X_test)\nprint(np.sqrt(mean_squared_error(y_test, predictions)))","0ce1dc6d":"df1=pd.read_csv(r\"..car_regression.csv\")","cefecd18":"df1.head()","e39e2ede":"df1['distance'].skew()","a92442e0":"df1['speed'].skew()","1f507065":"df1['temp_inside'].skew()","f592c951":"df1['temp_outside'].skew()","0717063a":"df1['gas_type'].unique()","beca4e37":"from sklearn.preprocessing import OneHotEncoder","66823906":"df2=pd.get_dummies(df1.gas_type)","cf5cee65":"df3=pd.concat([df1,df2],axis=1)","a193817a":"df3.head()","180087b1":"from sklearn.model_selection import train_test_split\ndf3=df3.dropna()\nX = df3.drop(['gas_type','consume'], axis=1)\ny = df3['consume']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.30, shuffle=True)","2674bcea":"model.fit(X_train, y_train)\npredictions = model.predict(X_test)\nprint(np.sqrt(mean_squared_error(y_test, predictions)))","2f846b51":"df3['boxcox_dist']=stats.boxcox(df3['distance'])[0]\npd.Series(df3['boxcox_dist']).skew()","12a7721e":"X3 = df3.drop(['gas_type','consume','distance'], axis=1)\ny3 = df3['consume']\nX_train, X_test, y_train, y_test = train_test_split(X3,y3,test_size = 0.3, shuffle=False)","b548f38b":"model.fit(X_train, y_train)\npredictions = model.predict(X_test)\nprint(np.sqrt(mean_squared_error(y_test, predictions)))","7519f495":"df=pd.read_csv(r\"car_price.csv\")","f32e8d5b":"from sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.linear_model import Lasso,Ridge,BayesianRidge,ElasticNet,HuberRegressor,LinearRegression,LogisticRegression,SGDRegressor\nfrom sklearn.metrics import mean_squared_error\n\nmodels = [['DecisionTree :',DecisionTreeRegressor()],\n           ['Linear Regression :', LinearRegression()],\n           ['RandomForest :',RandomForestRegressor()],\n           ['KNeighbours :', KNeighborsRegressor(n_neighbors = 2)],\n           ['SVM :', SVR()],\n           ['AdaBoostClassifier :', AdaBoostRegressor()],\n           ['GradientBoostingClassifier: ', GradientBoostingRegressor()],\n           ['Xgboost: ', XGBRegressor()],\n           ['CatBoost: ', CatBoostRegressor(logging_level='Silent')],\n           ['Lasso: ', Lasso()],\n           ['Ridge: ', Ridge()],\n           ['BayesianRidge: ', BayesianRidge()],\n           ['ElasticNet: ', ElasticNet()],\n           ['HuberRegressor: ', HuberRegressor()]]\n\nprint(\"Results...\")\n\n","d88c5ee9":"df.head()","40c8084b":"df=df.replace(\"?\",\"\")\ndf.head()","ca51ce47":"df1=pd.get_dummies(df.make)\ndf2=pd.concat([df,df1],axis=1)\ndf2=df2.dropna()","f04ee2ca":"df2.info()","74ec9cd6":"df2['normalized-losses'] = pd.to_numeric(df2['normalized-losses'],errors='coerce')\ndf2['bore'] = pd.to_numeric(df2['bore'],errors='coerce')\ndf2['stroke'] = pd.to_numeric(df2['stroke'],errors='coerce')\ndf2['horsepower'] = pd.to_numeric(df2['horsepower'],errors='coerce')\ndf2['peak-rpm'] = pd.to_numeric(df2['peak-rpm'],errors='coerce')\ndf2['price'] = pd.to_numeric(df2['price'],errors='coerce')","d40aaf1b":"df2=df2.dropna()\ndf2.info()","5c778aec":"X = df2.drop(['make','price'], axis=1)\ny = df2['price']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.30, shuffle=False)","f0daa898":"for name,model in models:\n    model = model\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    print(name, (np.sqrt(mean_squared_error(y_test, predictions))))","7e1ee91e":"from sklearn.decomposition import PCA\npca = PCA(n_components=3)\nprincipalComponents = pca.fit_transform(X_train)\nX_pca = pd.DataFrame(data = principalComponents\n             , columns = ['principal component 1', 'principal component 2','principal component 3'])","34827c2a":"for name,model in models:\n    model = model\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    print(name, (np.sqrt(mean_squared_error(y_test, predictions))))","c6fc4330":"is it a strong relation ?","fc0ffe16":"# Understanding the relation between different factors responsible for graduate admissions","c4db77ef":"# Some visualization","c61fbeb3":"#Lets split the dataset with training and testing set and prepare the inputs and outputs","6a6b31ff":"Lets use a bunch of different algorithms to see which model performs better","2baf0be3":"# Remove the unwanted data and see how much missing values one have"}}