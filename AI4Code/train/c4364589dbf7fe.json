{"cell_type":{"6808f955":"code","dd082742":"code","24080fef":"code","20c8d0db":"code","2bef3604":"code","d7eaf5ca":"code","93e8277f":"code","84221a53":"code","b5d0587c":"code","42f014d5":"code","7dbf35cf":"code","ad3d62d6":"code","3d000cc2":"code","1bfbc8b2":"code","ac4136a2":"code","81bfeab9":"code","d15e2aac":"markdown","e63b3c24":"markdown","12044353":"markdown","35299329":"markdown","86b22e81":"markdown","e2ac894b":"markdown","5d2a6206":"markdown"},"source":{"6808f955":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.utils.np_utils import to_categorical\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping","dd082742":"treino = pd.read_csv('..\/input\/emnist\/emnist-letters-train.csv')","24080fef":"x = np.array(treino.iloc[:,1:].values)\ny = np.array(treino.iloc[:,0].values)","20c8d0db":"fig,axes = plt.subplots(3,5,figsize=(10,8))\nfor i,ax in enumerate(axes.flat):\n    ax.imshow(x[i].reshape([28,28]))","2bef3604":"x = x\/255\n\ntreino_shape = treino.shape[0]\ntreino_height = 28\ntreino_width = 28\ntreino_size = treino_height*treino_width\n\nx = x.reshape(treino_shape, treino_height, treino_width, 1)","d7eaf5ca":"classes = len(treino['45'].unique())","93e8277f":"y = to_categorical(y, classes)","84221a53":"x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=.15, stratify=y)\nprint(x_treino.shape, y_treino.shape)\nprint(x_teste.shape, y_teste.shape)","b5d0587c":"'''modelo = Sequential()\nmodelo.add(Conv2D(32, 3, input_shape=(28,28,1)))\nmodelo.add(MaxPool2D(2,2))\nmodelo.add(Flatten(input_shape=(28,28,1)))\nmodelo.add(Dense(512, activation='relu'))\nmodelo.add(Dense(128, activation='relu'))\nmodelo.add(Dense(classes, activation='softmax'))\nmodelo.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])'''","42f014d5":"model = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same',  activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(classes, activation = \"softmax\"))\n\nmodel.compile(optimizer = 'adam' , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","7dbf35cf":"parada = EarlyStopping(monitor='val_accuracy', min_delta=0, verbose=0, restore_best_weights=True, patience=3,\n                      mode='max')\nredutor = ReduceLROnPlateau(monitor='val_loss', patience=3, factor=0.2, mil_lr=0.0001)","ad3d62d6":"\nhistory = model.fit(x_treino, y_treino, batch_size=64,\n                              epochs = 20, validation_data = (x_teste, y_teste),\n                              verbose = 1, steps_per_epoch=x_treino.shape[0] \/\/ 64\n                              , callbacks=[redutor,parada])","3d000cc2":"fig, axes = plt.subplots(1, 2, figsize=(15,5))\naxes[0].plot(history.history['accuracy'])\naxes[0].plot(history.history['val_accuracy'])\naxes[0].set_xlabel('Epochs')\naxes[0].set_ylabel('Acur\u00e1cia')\naxes[0].legend(['Acur\u00e1cia em Treino','Acur\u00e1cia em Teste'])\naxes[0].grid(True)\n\naxes[1].plot(history.history['loss'])\naxes[1].plot(history.history['val_loss'])\naxes[1].set_xlabel('Epochs')\naxes[1].set_ylabel('Erro')\naxes[1].legend(['Erro em Treino','Erro em Teste'])\naxes[1].grid(True)","1bfbc8b2":"aug = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,\n        rotation_range=3,  # Gira a imagem em 3 graus\n        zoom_range = 0.1, # Da um zoom na imagem de forma aleat\u00f3ria\n        width_shift_range=0.1,  # Move a imagem de forma aleat\u00f3ria horizontalmente\n        height_shift_range=0.1)  # Move a imagem de forma aleat\u00f3ria verticalmente\naug.fit(x_treino)","ac4136a2":"history = model.fit(aug.flow(x_treino, y_treino, batch_size=64),\n                              epochs = 20, validation_data = (x_teste, y_teste),\n                              verbose = 1, steps_per_epoch=x_treino.shape[0] \/\/ 64\n                              , callbacks=[redutor,parada])","81bfeab9":"fig, axes = plt.subplots(1, 2, figsize=(15,5))\naxes[0].plot(history.history['accuracy'])\naxes[0].plot(history.history['val_accuracy'])\naxes[0].set_xlabel('Epochs')\naxes[0].set_ylabel('Acur\u00e1cia')\naxes[0].legend(['Acur\u00e1cia em Treino','Acur\u00e1cia em Teste'])\naxes[0].grid(True)\n\naxes[1].plot(history.history['loss'])\naxes[1].plot(history.history['val_loss'])\naxes[1].set_xlabel('Epochs')\naxes[1].set_ylabel('Erro')\naxes[1].legend(['Erro em Treino','Erro em Teste'])\naxes[1].grid(True)","d15e2aac":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Number of Class<\/p>","e63b3c24":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Normalize and Reshaping<\/p>","12044353":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Augmentation<\/p>","35299329":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Input<\/p>","86b22e81":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Callback<\/p>","e2ac894b":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Result<\/p>","5d2a6206":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Model<\/p>"}}