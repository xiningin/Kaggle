{"cell_type":{"cfd8d54e":"code","22c36d23":"code","43bf670d":"code","67a6c46f":"code","b05ef62b":"code","87517bf2":"markdown","f0daa6d9":"markdown"},"source":{"cfd8d54e":"import numpy as np, pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\n\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n\nfrom tqdm import tqdm_notebook\n\nimport warnings\nwarnings.filterwarnings('ignore')","22c36d23":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\ncols = [c for c in train.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]","43bf670d":"oof = np.zeros(len(train))\npreds = np.zeros(len(test))\n\nfor i in tqdm_notebook(range(512)):\n\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n\n    data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    data2 = VarianceThreshold(threshold=2).fit_transform(data[cols])\n    train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n\n    skf = StratifiedKFold(n_splits=25, random_state=42)\n    \n    for train_index, test_index in skf.split(train2, train2['target']):\n        clf = QuadraticDiscriminantAnalysis(reg_param=0.111)\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        oof[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits","67a6c46f":"auc = roc_auc_score(train['target'], oof)\nprint(f'AUC: {auc:.5}')","b05ef62b":"sub = pd.read_csv('..\/input\/sample_submission.csv')\nsub['target'] = preds\nsub.to_csv('QDA_Baseline.csv', index=False)","87517bf2":"# QDA Baseline","f0daa6d9":"@Credits to Vladislav Bahkteev\n\nDataset is created by `make_classification` method. This method generates gaussians with non-diagonal covariance matrix and assigns them classes. QDA works exactly with this structures of data, it learns normal distributions with n-dimentional covariance matrix. It also uses Bayes theorem to infer likelihood and this is why it works so fast."}}