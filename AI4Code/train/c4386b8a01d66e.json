{"cell_type":{"8891dcac":"code","ab2927bb":"code","89928461":"code","3c0a3413":"code","d27f8e36":"code","ed9d7621":"code","38ebf499":"code","793747d5":"code","7c3534b5":"code","9f77dd58":"code","a0dc7562":"code","cb38b830":"code","de8e7d77":"code","1d19d08a":"code","faaee8ce":"code","b5612fb3":"code","e67e2d0c":"code","971f904f":"code","4df195c0":"code","6bd1600d":"code","dfd5eac9":"code","e0e15470":"code","fb33de40":"code","4e9b0769":"code","28e3a428":"code","5a765621":"code","e5ac16e0":"code","99315f3f":"code","e49b42cf":"code","4dbeb322":"code","56220c5e":"code","80081d64":"code","1c0b35dc":"code","8a1ce27c":"code","a3e6a316":"code","e1b151c8":"code","15e3f2c4":"code","6d16355b":"code","ce366c37":"code","01e9ffd9":"code","85407796":"code","2f49e1e4":"code","560d70d6":"code","d5a438a3":"code","5b83e285":"code","290bff04":"code","1f471181":"code","93167eb8":"code","fc036b27":"code","5d181b50":"code","12e619e2":"code","f23e5a0d":"code","f902e54c":"code","8be98fe9":"code","b905eb5c":"code","595d1b46":"code","d1e6fe3a":"code","899da39a":"code","b263df3f":"code","efee2d3d":"code","06bfb81c":"code","6a69a8eb":"code","7d4ae574":"code","90d23756":"code","d959b295":"code","f34f9026":"code","1e9799bb":"code","666a787d":"code","c5e5fda1":"code","11cac51e":"code","0d3be6b2":"code","2b683cc4":"code","6006d9e1":"code","cb98e81b":"code","120cfe26":"code","df986444":"code","902efa78":"code","3c648059":"code","332b864d":"code","3c83b064":"code","baaff5aa":"code","a699f60a":"code","740de951":"code","d1e5db2f":"code","7e65b903":"code","f0644fce":"code","fc48316c":"code","55390ef0":"code","e87d8414":"markdown","fb8e3d20":"markdown","d8d1461b":"markdown","4404abaa":"markdown","bc5cdca2":"markdown","9583df06":"markdown","5be282a5":"markdown","f7a1bcb7":"markdown","6ab77547":"markdown","041785d2":"markdown","85431569":"markdown","cd36c7b7":"markdown","37b02a7c":"markdown","76466203":"markdown","d179a98f":"markdown","19fcb0c8":"markdown","4c86721e":"markdown","06ea70e8":"markdown","c104c1a3":"markdown","2da09dfd":"markdown","c25d80ed":"markdown","c027c80b":"markdown","c6840c46":"markdown","4912b231":"markdown","0c6ad301":"markdown","68c038fb":"markdown","734d8144":"markdown","157b587b":"markdown","dc925312":"markdown","95921cb5":"markdown","0a78b145":"markdown"},"source":{"8891dcac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nfrom tqdm import tqdm_notebook\nimport plotly.figure_factory as ff\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab2927bb":"data=pd.read_csv('..\/input\/water-potability\/water_potability.csv')\ndata.head()","89928461":"data.describe()","3c0a3413":"data.info()","d27f8e36":"print('There are {} data points and {} features in the data'.format(data.shape[0],data.shape[1]))","ed9d7621":"sns.heatmap(data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","38ebf499":"for i in data.columns:\n    if data[i].isnull().sum()>0:\n        print(\"There are {} null values in {} column\".format(data[i].isnull().sum(),i))","793747d5":"data['ph'].describe()","7c3534b5":"data['ph_mean']=data['ph'].fillna(data['ph'].mean())","9f77dd58":"data['ph_mean'].isnull().sum()","a0dc7562":"fig = plt.figure()\nax = fig.add_subplot(111)\ndata['ph'].plot(kind='kde', ax=ax)\ndata.ph_mean.plot(kind='kde', ax=ax, color='red')\nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')\nplt.show()","cb38b830":"def impute_nan(df,variable):\n    df[variable+\"_random\"]=df[variable]\n    ##It will have the random sample to fill the na\n    random_sample=df[variable].dropna().sample(df[variable].isnull().sum(),random_state=0)\n    ##pandas need to have same index in order to merge the dataset\n    random_sample.index=df[df[variable].isnull()].index\n    df.loc[df[variable].isnull(),variable+'_random']=random_sample","de8e7d77":"impute_nan(data,\"ph\")","1d19d08a":"fig = plt.figure()\nax = fig.add_subplot(111)\ndata['ph'].plot(kind='kde', ax=ax)\ndata.ph_random.plot(kind='kde', ax=ax, color='green')\ndata.ph_mean.plot(kind='kde', ax=ax, color='red')\nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')\nplt.show()","faaee8ce":"impute_nan(data,\"Sulfate\")","b5612fb3":"fig = plt.figure()\nax = fig.add_subplot(111)\ndata['Sulfate'].plot(kind='kde', ax=ax)\ndata[\"Sulfate_random\"].plot(kind='kde', ax=ax, color='green')\n#data.ph_mean.plot(kind='kde', ax=ax, color='red')\nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')\nplt.show()","e67e2d0c":"impute_nan(data,\"Trihalomethanes\")","971f904f":"fig = plt.figure()\nax = fig.add_subplot(111)\ndata['Trihalomethanes'].plot(kind='kde', ax=ax)\ndata.Trihalomethanes_random.plot(kind='kde', ax=ax, color='green')\nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')\nplt.show()","4df195c0":"data=data.drop(['ph','Sulfate','Trihalomethanes','ph_mean'],axis=1)","6bd1600d":"data.isnull().sum()","dfd5eac9":"plt.figure(figsize=(20, 17))\nmatrix = np.triu(data.corr())\nsns.heatmap(data.corr(), annot=True,linewidth=.8, mask=matrix, cmap=\"rocket\",cbar=False);","e0e15470":"sns.pairplot(data, hue=\"Potability\", palette=\"husl\");","fb33de40":"def distributionPlot(data):\n    \"\"\" \n    Creates distribution plot.\n    \"\"\"\n    fig = plt.figure(figsize=(20, 20))\n    for i in tqdm_notebook(range(0, len(data.columns))):\n        fig.add_subplot(np.ceil(len(data.columns)\/3), 3, i+1)\n        sns.distplot(\n            data.iloc[:, i], color=\"lightcoral\", rug=True)\n        fig.tight_layout(pad=3.0)\nplot_data = data.drop(['Potability'], axis =1)\ndistributionPlot(plot_data)","4e9b0769":"data['Hardness'].describe()","28e3a428":"plt.figure(figsize = (16, 7))\nsns.distplot(data['Hardness'])\nplt.title('Distribution Plot of Hardness\\n', fontsize =  20)\nplt.show()","5a765621":"# basic scatter plot\nfig = px.scatter(data,range(data['Hardness'].count()), sorted(data['Hardness']),\n                 color=data['Potability'],\n                 labels={\n                     'x': \"Count\",\n                     'y': \"Hardness\",\n                     'color':'Potability'\n                     \n                 }, template = 'plotly_dark')\nfig.update_layout(title='Hardness wrt Potability')\nfig.show()","e5ac16e0":"px.histogram(data_frame = data, x = 'Hardness', nbins = 10, color = 'Potability', marginal = 'box',\n             template = 'plotly_dark')","99315f3f":"data['Solids'].describe()","e49b42cf":"plt.figure(figsize = (16, 7))\nsns.distplot(data['Solids'])\nplt.title('Distribution Plot of Solids\\n', fontsize =  20)\nplt.show()","4dbeb322":"fig = px.scatter(data, sorted(data[\"Solids\"]), range(data[\"Solids\"].count()), color=\"Potability\", facet_col=\"Potability\", \n                 facet_row=\"Potability\")\nfig.show()","56220c5e":"px.histogram(data_frame = data, x = 'Solids', nbins = 10, color = 'Potability', marginal = 'box',\n             template = 'plotly_dark')","80081d64":"# basic scatter plot\nfig = px.scatter(data,range(data['Solids'].count()), sorted(data['Solids']),\n                 color=data['Potability'],\n                 labels={\n                     'x': \"Count\",\n                     'y': \"Hardness\",\n                     'color':'Potability'\n                     \n                 },\n                 color_continuous_scale=px.colors.sequential.tempo,\n                 template = 'plotly_dark')\nfig.update_layout(title='Hardness wrt Potability')\nfig.show()","1c0b35dc":"data['Chloramines'].describe()","8a1ce27c":"plt.figure(figsize = (16, 7))\nsns.distplot(data['Chloramines'])\nplt.title('Distribution Plot of Chloramines\\n', fontsize =  20)\nplt.show()","a3e6a316":"fig = px.line(x=range(data['Chloramines'].count()), y=sorted(data['Chloramines']),color=data['Potability'], labels={\n                     'x': \"Count\",\n                     'y': \"Chloramines\",\n                     'color':'Potability'\n                     \n                 }, template = 'plotly_dark')\nfig.update_layout(title='Chloramines wrt Potability')\nfig.show()","e1b151c8":"fig = px.box(x = 'Chloramines', data_frame = data, template = 'plotly_dark')\nfig.update_layout(title='Chloramines')\nfig.show()","15e3f2c4":"data[\"Conductivity\"].describe()","6d16355b":"plt.figure(figsize = (16, 7))\nsns.distplot(data['Conductivity'])\nplt.title('Distribution Plot of Conductivity\\n', fontsize =  20)\nplt.show()","ce366c37":"fig = px.bar(data, x=range(data['Conductivity'].count()),\n             y=sorted(data['Conductivity']), labels={\n                     'x': \"Count\",\n                     'y': \"Conductivity\",\n                     'color':'Potability'\n                     \n                 },\n             color=data['Potability']\n             ,template = 'plotly_dark')\nfig.update_layout(title='Conductivity wrt Potability')\nfig.show() ","01e9ffd9":"\ngroup_labels = ['distplot'] # name of the dataset\n\nfig = ff.create_distplot([data['Conductivity']], group_labels)\nfig.show()","85407796":"data['Organic_carbon'].describe()","2f49e1e4":"\ngroup_labels = ['Organic_carbon'] # name of the dataset\n\nfig = ff.create_distplot([data['Organic_carbon']], group_labels)\nfig.show()","560d70d6":"dt_5=data[data['Organic_carbon']<5]\ndt_5_10=data[(data['Organic_carbon']>5)&(data['Organic_carbon']<10)]\ndt_10_15=data[(data['Organic_carbon']>10)&(data['Organic_carbon']<15)]\ndt_15_20=data[(data['Organic_carbon']>15)&(data['Organic_carbon']<20)]\ndt_20_25=data[(data['Organic_carbon']>20)&(data['Organic_carbon']<25)]\ndt_25=data[(data['Organic_carbon']>25)]\n\nx_Age = ['5', '5-10', '10-15', '15-20', '25+']\ny_Age = [len(dt_5.values), len(dt_5_10.values), len(dt_10_15.values), len(dt_15_20.values),\n     len(dt_25.values)]\n\npx.bar(data_frame = data, x = x_Age, y = y_Age, color = x_Age, template = 'plotly_dark',\n       title = 'Number of passengers per Age group')","d5a438a3":"sns.catplot(x = 'Organic_carbon', y = 'Organic_carbon', hue = 'Potability', data = data, kind = 'box',\n            height = 5, aspect = 2)\nplt.show()","5b83e285":"data['Turbidity'].describe()","290bff04":"\ngroup_labels = ['Turbidity'] # name of the dataset\n\nfig = ff.create_distplot([data['Turbidity']], group_labels)\nfig.show()","1f471181":"data['turbid_class']=data['Turbidity'].astype(int)","93167eb8":"data['turbid_class'].unique()","fc036b27":"px.scatter(data_frame = data, x = 'Turbidity', y = 'turbid_class', color = 'Potability', template = 'plotly_dark')","5d181b50":"fig = px.pie(data,\n             values=data['turbid_class'].value_counts(), \n             names=data['turbid_class'].value_counts().keys(),\n            )\nfig.update_layout(\n    title='turbid_class',\n    template = 'plotly_dark'\n)\nfig.show()","12e619e2":"data=data.drop(['turbid_class'],axis=1)","f23e5a0d":"data['ph_random'].describe()","f902e54c":"\ngroup_labels = ['ph_random'] # name of the dataset\n\nfig = ff.create_distplot([data['ph_random']], group_labels)\nfig.show()","8be98fe9":"px.histogram(data_frame = data, x = 'ph_random', nbins = 10, color = 'Potability', marginal = 'box',\n             template = 'plotly_dark')","b905eb5c":"fig = px.scatter(data, sorted(data[\"ph_random\"]), range(data[\"ph_random\"].count()), color=\"Potability\", facet_col=\"Potability\", \n                 facet_row=\"Potability\")\nfig.show()","595d1b46":"data['Sulfate_random'].describe()","d1e6fe3a":"group_labels = ['distplot'] # name of the dataset\n\nfig = ff.create_distplot([data['Sulfate_random']], group_labels)\nfig.show()","899da39a":"sns.catplot(x = 'Sulfate_random', y = 'Sulfate_random', hue = 'Potability', data = data, kind = 'box',\n            height = 5, aspect = 2)\nplt.show()","b263df3f":"data['Trihalomethanes_random'].describe()","efee2d3d":"\ngroup_labels = ['Trihalomethanes_random'] # name of the dataset\n\nfig = ff.create_distplot([data['Trihalomethanes_random']], group_labels)\nfig.show()","06bfb81c":"fig = px.box(x = 'Trihalomethanes_random', data_frame = data, template = 'plotly_dark')\nfig.update_layout(title='Trihalomethanes_random')\nfig.show()","6a69a8eb":"fig = px.line(x=range(data['Trihalomethanes_random'].count()), y=sorted(data['Trihalomethanes_random']),color=data['Potability'], labels={\n                     'x': \"Count\",\n                     'y': \"Trihalomethanes\",\n                     'color':'Potability'\n                     \n                 }, template = 'plotly_dark')\nfig.update_layout(title='Trihalomethane wrt Potability')\nfig.show()","7d4ae574":"data['Potability'].describe()","90d23756":"px.histogram(data_frame = data, x = 'Potability', color = 'Potability', marginal = 'box',\n             template = 'plotly_dark')","d959b295":"fig = px.pie(data,\n             values=data['Potability'].value_counts(), \n             names=data['Potability'].value_counts().keys(),\n            )\nfig.update_layout(\n    title='Potability',\n    template = 'plotly_dark'\n)\nfig.show()","f34f9026":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","1e9799bb":"X=data.drop(['Potability'],axis=1)\ny=data['Potability']","666a787d":"scaler = StandardScaler()\nx=scaler.fit_transform(X)","c5e5fda1":"# split the data to train and test set\nx_train,x_test,y_train,y_test = train_test_split(x,y,train_size=0.85,random_state=42)\n\n\nprint(\"training data shape:-{} labels{} \".format(x_train.shape,y_train.shape))\nprint(\"testing data shape:-{} labels{} \".format(x_test.shape,y_test.shape))","11cac51e":"from sklearn.linear_model import LogisticRegression\nlog = LogisticRegression(random_state=0).fit(x_train, y_train)\nlog.score(x_test, y_test)","0d3be6b2":"#  Confusion matrix\nfrom sklearn.metrics import confusion_matrix\n# Make Predictions\npred1=log.predict(np.array(x_test))\nplt.title(\"Confusion Matrix testing data\")\nsns.heatmap(confusion_matrix(y_test,pred1),annot=True,cbar=False)\nplt.legend()\nplt.show()","2b683cc4":"from sklearn.neighbors import KNeighborsClassifier","6006d9e1":"knn = KNeighborsClassifier(n_neighbors=2)\n# Train the model using the training sets\nknn.fit(x_train,y_train)\n\n#Predict Output\npredicted= knn.predict(x_test) # 0:Overcast, 2:Mild\n","cb98e81b":"#  Confusion matrix\nfrom sklearn.metrics import confusion_matrix\n# Make Predictions\npred1=knn.predict(np.array(x_test))\nplt.title(\"Confusion Matrix testing data\")\nsns.heatmap(confusion_matrix(y_test,pred1),annot=True,cbar=False)\nplt.legend()\nplt.show()","120cfe26":"from sklearn import svm\nfrom sklearn.metrics import accuracy_score","df986444":"svmc = svm.SVC()\nsvmc.fit(x_train, y_train)\n\ny_pred = svmc.predict(x_test)\nprint(accuracy_score(y_test,y_pred))","902efa78":"#  Confusion matrix\nfrom sklearn.metrics import confusion_matrix\n# Make Predictions\npred1=svmc.predict(np.array(x_test))\nplt.title(\"Confusion Matrix testing data\")\nsns.heatmap(confusion_matrix(y_test,pred1),annot=True,cbar=False)\nplt.legend()\nplt.show()","3c648059":"from sklearn import tree\nfrom sklearn.metrics import accuracy_score","332b864d":"tre = tree.DecisionTreeClassifier()\ntre = tre.fit(x_train, y_train)\n\ny_pred = tre.predict(x_test)\nprint(accuracy_score(y_test,y_pred))","3c83b064":"#  Confusion matrix\nfrom sklearn.metrics import confusion_matrix\n# Make Predictions\npred1=tre.predict(np.array(x_test))\nplt.title(\"Confusion Matrix testing data\")\nsns.heatmap(confusion_matrix(y_test,pred1),annot=True,cbar=False)\nplt.legend()\nplt.show()","baaff5aa":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","a699f60a":"# create the model\nmodel_rf = RandomForestClassifier(n_estimators=500, oob_score=True, random_state=100)\n\n\n# fitting the model\nmodel_rf=model_rf.fit(x_train, y_train) \n\ny_pred = model_rf.predict(x_test)\nprint(accuracy_score(y_test,y_pred))","740de951":"#  Confusion matrix\nfrom sklearn.metrics import confusion_matrix\n# Make Predictions\npred1=model_rf.predict(np.array(x_test))\nplt.title(\"Confusion Matrix testing data\")\nsns.heatmap(confusion_matrix(y_test,pred1),annot=True,cbar=False)\nplt.legend()\nplt.show()","d1e5db2f":"from xgboost import XGBClassifier\nfrom sklearn.metrics import r2_score\n\nxgb = XGBClassifier(colsample_bylevel= 0.9,\n                    colsample_bytree = 0.8, \n                    gamma=0.99,\n                    max_depth= 5,\n                    min_child_weight= 1,\n                    n_estimators= 8,\n                    nthread= 5,\n                    random_state= 0,\n                    )\nxgb.fit(x_train,y_train)","7e65b903":"print('Accuracy of XGBoost classifier on training set: {:.2f}'\n     .format(xgb.score(x_train, y_train)))\nprint('Accuracy of XGBoost classifier on test set: {:.2f}'\n     .format(xgb.score(x_test, y_test)))","f0644fce":"from sklearn.metrics import confusion_matrix\n\nconf_matrix = confusion_matrix(y_true=y_test, y_pred=y_pred)\nplt.figure(figsize = (15, 8))\nsns.set(font_scale=1.4) # for label size\nsns.heatmap(conf_matrix, annot=True, annot_kws={\"size\": 16},cbar=False, linewidths = 1) # font size\nplt.title(\"Test Confusion Matrix\")\nplt.xlabel(\"Predicted class\")\nplt.ylabel(\"Actual class\")\nplt.savefig('conf_test.png')\nplt.show()","fc48316c":"from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nsvc=SVC()\nparam_grid={'C':[1.2,1.5,2.2,3.5,3.2,4.1],'kernel':['linear', 'poly', 'rbf', 'sigmoid'],'degree':[1,2,4,8,10],'gamma':['scale','auto']}\ngridsearch=GridSearchCV(svc,param_grid=param_grid,n_jobs=-1,verbose=4,cv=3)\ngridsearch.fit(x_train,y_train)\n\ny_pred=gridsearch.predict(x_test)\nprint(accuracy_score(y_test,y_pred))","55390ef0":"y_pred=gridsearch.predict(x_test)\nfrom sklearn.metrics import confusion_matrix\n\nconf_matrix = confusion_matrix(y_true=y_test, y_pred=y_pred)\nplt.figure(figsize = (15, 8))\nsns.set(font_scale=1.4) # for label size\nsns.heatmap(conf_matrix, annot=True, annot_kws={\"size\": 16},cbar=False, linewidths = 1) # font size\nplt.title(\"Test Confusion Matrix\")\nplt.xlabel(\"Predicted class\")\nplt.ylabel(\"Actual class\")\nplt.savefig('conf_test.png')\nplt.show()","e87d8414":"# ph_random","fb8e3d20":"#### The distribution is not uniform","d8d1461b":"# Trihalomethanes_random","4404abaa":"### SVM tuned","bc5cdca2":"# Organic_carbon","9583df06":"## Null Values","5be282a5":"There are no correlated columns presebt in the data","f7a1bcb7":"### SVM","6ab77547":"Since the data is not in a uniform shape, we scale the data using standard scalar","041785d2":"### Random Forest","85431569":"# Solids","cd36c7b7":"# Potability","37b02a7c":"* ph-> pH of water\n* Hardness-> Capacity of water to precipitate soap in mg\/L\n* Solids-> Total dissolved solids in ppm\n* Chloramines-> Amount of Chloramines in ppm\n* Sulfate-> Amount of Sulfates dissolved in mg\/L\n* Conductivity-> Electrical conductivity of water in \u03bcS\/cm\n* Organic_carbon-> Amount of organic carbon in ppm\n* Trihalomethanes-> Amount of Trihalomethanes in \u03bcg\/L\n* Turbidity-> Measure of light emiting property of water in NTU (Nephelometric Turbidity Units)\n* Potability-> Indicates if water is safe for human consumption","76466203":"## Check for Correlation","d179a98f":"# Data Preprocessing","19fcb0c8":"# Conductivity","4c86721e":"# Modeling","06ea70e8":"## Handling Null Values","c104c1a3":"Uniform distribution with random initialization","2da09dfd":"# Sulfate_random","c25d80ed":"### K Nearest Neighbours","c027c80b":"# EDA","c6840c46":"### PH","4912b231":"# Turbidity","0c6ad301":"# Hardness","68c038fb":"Filling the data with random values","734d8144":"### XG Boost","157b587b":"### Logistic Regression","dc925312":"# Chloramines","95921cb5":"Filling the missing values by mean","0a78b145":"### Decision Tree"}}