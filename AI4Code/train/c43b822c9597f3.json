{"cell_type":{"3cdfb5e0":"code","a18012f4":"code","96078103":"code","288e3cca":"code","d9dd1445":"code","298a64d3":"code","67e8b497":"code","12dc98c7":"code","84ff40fb":"code","bef83af6":"code","3c22c5fe":"markdown","3c9dbe80":"markdown","84a9124f":"markdown","26abbc9e":"markdown"},"source":{"3cdfb5e0":"import keras\nfrom keras.datasets import fashion_mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras import backend as K\n\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport numpy as np\n\nbatch_size = 128\nnum_classes = 10\nepochs = 10\nimg_rows, img_cols = 28, 28\ninput_shape = (img_rows, img_cols, 1)\n\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\n\ntrain_images = train_images.reshape(train_images.shape[0], img_rows, img_cols)\ntest_images = test_images.reshape(test_images.shape[0], img_rows, img_cols)\n\ntrain_labels = keras.utils.to_categorical(train_labels, num_classes)\ntest_labels = keras.utils.to_categorical(test_labels, num_classes)\n\ntrain_images = train_images \/ 255.0\ntest_images = test_images \/ 255.0\n\nprint(train_images.shape)\n\nplt.figure(figsize=(10, 10))\nfor i in range(25):\n    plt.subplot(5,5,1+i)\n    plt.imshow(train_images[i])\nplt.show()\n","a18012f4":"train_images = train_images.reshape(train_images.shape[0], img_rows, img_cols, 1)\ntest_images = test_images.reshape(test_images.shape[0], img_rows, img_cols, 1)\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation = 'relu',\n                 input_shape = input_shape))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dense(num_classes, activation = 'softmax'))\n\nmodel.compile(loss = keras.losses.categorical_crossentropy,\n              optimizer = keras.optimizers.Adadelta(),\n              metrics = ['accuracy'])\n\n\nmodel.fit(train_images, train_labels,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1)\n\nscore = model.evaluate(test_images, test_labels, verbose = 0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","96078103":"from keras.datasets import cifar10\n\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n\nbatch_size = 128\nnum_classes = 10\nepochs = 20\nimg_rows, img_cols = 32, 32\ninput_shape = (img_rows, img_cols, 3)\n\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)\n\nx_train = x_train \/ 255.0\nx_test = x_test \/ 255.0\n\nfor i in range(9):\n    plt.subplot(330 + 1 + i)\n    plt.imshow(x_train[i])\nplt.show()","288e3cca":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation = 'relu',\n                 input_shape = input_shape))\n\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dense(num_classes, activation = 'softmax'))\n\nmodel.compile(loss = keras.losses.categorical_crossentropy,\n              optimizer = keras.optimizers.Adadelta(),\n              metrics = ['accuracy'])\n\nmodel.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1)","d9dd1445":"score = model.evaluate(x_test, y_test, verbose = 0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","298a64d3":"y_pred = model.predict_classes(x_test)\ny_test_cm = [np.argmax(y_test[i]) for i in range(0, y_test.shape[0])]\nconf_matrix = tf.math.confusion_matrix(labels = y_test_cm,\n                                       predictions = y_pred).numpy()\nprint(conf_matrix)","67e8b497":"conf_matrix_percent = np.around(conf_matrix.astype('float')\/conf_matrix.sum(axis = 1)[:np.newaxis], decimals = 2)\nprint(conf_matrix_percent)\nprint('')\nfor i in range(0, num_classes):\n    print('class: ', i, ':', conf_matrix_percent[i,i])","12dc98c7":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation = 'relu',\n                 input_shape = input_shape))\n\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2)) #\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 dropout\n          \nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(num_classes, activation = 'softmax'))\n\nmodel.compile(loss = keras.losses.categorical_crossentropy,\n              optimizer = keras.optimizers.Adadelta(),\n              metrics = ['accuracy'])\n\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1)","84ff40fb":"score = model.evaluate(x_test, y_test, verbose = 0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","bef83af6":"y_pred = model.predict_classes(x_test)\ny_test_cm = [np.argmax(y_test[i]) for i in range(0, y_test.shape[0])]\nconf_matrix = tf.math.confusion_matrix(labels = y_test_cm,\n                                       predictions = y_pred).numpy()\n\nconf_matrix_percent = np.around(conf_matrix.astype('float')\/conf_matrix.sum(axis = 1)[:np.newaxis], decimals = 2)\nprint(conf_matrix_percent)\nprint('')\nfor i in range(0, num_classes):\n    print('class: ', i, ':', conf_matrix_percent[i,i])","3c22c5fe":"\u0412\u044b\u0432\u043e\u0434: \u041f\u0440\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043b\u0443\u0447\u0448\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435.","3c9dbe80":"**\u0412\u043b\u0438\u044f\u043d\u0438\u0435 Dropout**","84a9124f":"**\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a:**","26abbc9e":"# \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"}}