{"cell_type":{"69a65a67":"code","246cb231":"code","7f57fddd":"code","794aed1a":"code","ebcf4586":"code","d7b21d60":"code","58ccf9f6":"code","72afcd70":"code","0cbeead7":"code","d80d2c5a":"code","b6869a14":"code","36a6d121":"code","25ac6e19":"code","441bc3b6":"code","b62d60b7":"code","d371b6a6":"code","e77bd006":"code","be5e85ea":"code","72fd93f5":"code","d47e90ed":"code","5346be29":"code","773428b8":"code","a2c1b9f7":"code","cb03cd6c":"markdown","06527fe3":"markdown","7c3feee4":"markdown","77ed6352":"markdown","91f418a4":"markdown","baf08a5c":"markdown","90ae7719":"markdown","dcd265d8":"markdown","105ee8af":"markdown","bff6494a":"markdown","61b629cf":"markdown","492d7d84":"markdown","fb881b79":"markdown"},"source":{"69a65a67":"!pip install fhir.resources","246cb231":"import numpy as np  \nimport pandas as pd \nimport json\nfrom datetime import date\nfrom tqdm.auto import tqdm\ntqdm.pandas()\n\nfrom fhir.resources.bundle import Bundle\nfrom fhir.resources.patient import Patient\nfrom fhir.resources.condition import Condition\nfrom fhir.resources.observation import Observation\nfrom fhir.resources.medicationrequest import MedicationRequest\nfrom fhir.resources.procedure import Procedure\nfrom fhir.resources.encounter import Encounter\nfrom fhir.resources.claim import Claim\nfrom fhir.resources.immunization import Immunization\n\nimport os\nfilesList = os.listdir('\/kaggle\/input\/fhir-1ksample\/fhir')\nprint(len(filesList))","7f57fddd":"# Initialize the dataframes to accumulate ALL files data\n\nPATIENT = pd.DataFrame(columns=['PatientUID', 'NameFamily', 'NameGiven', 'DoB', 'Gender'])\nCONDITION = pd.DataFrame(columns=['ConditionText', 'ConditionOnsetDates', 'PatientUID'])\nOBSERVATION = pd.DataFrame(columns=['ObservationText', 'ObservationValue', 'ObservationUnit',\n       'ObservationDate', 'PatientUID'])\nMEDICATION = pd.DataFrame(columns=['MedicationText', 'MedicationDates', 'PatientUID'])\nPROCEDURE = pd.DataFrame(columns=['ProcedureText', 'ProcedureDates', 'PatientUID'])\nENCOUNTER = pd.DataFrame(columns=['EncountersText', 'EncounterLocation', 'EncounterProvider','EncounterDates', 'PatientUID'])\nCLAIM = pd.DataFrame(columns=['ClaimProvider', 'ClaimInsurance', 'ClaimDate', 'ClaimType','ClaimItem', \n                              'ClaimUSD', 'PatientUID'])\nIMMUNIZATION = pd.DataFrame(columns=['Immunization', 'ImmunizationDates', 'PatientUID'])","794aed1a":"f = open('\/kaggle\/input\/fhir-1ksample\/fhir\/'+filesList[50],)\njson_obj = json.load(f)\n\noneBundle = Bundle.parse_obj(json_obj)\n\n# Resources\n\nresources = []\nif oneBundle.entry is not None:\n    for entry in oneBundle.entry:\n        resources.append(entry.resource)\n\n\noneResources = []\nfor j in range(len(resources)):\n    oneResources.append(type(resources[j]))\n    \nprint(len(oneResources))\n\nuniqResources = set(oneResources)\nprint(len(uniqResources))\nuniqResources","ebcf4586":"print(type(resources[0]))\n#resources[0]","d7b21d60":"onePatient = Patient.parse_obj(resources[0])\nonePatient.name[0]\n\n# Patient demographics\nonePatientID = onePatient.id\n\nprint(onePatientID)\nprint(onePatient.name[0].family)\nprint(onePatient.name[0].given[0])\nprint(onePatient.birthDate)\nprint(onePatient.gender)","58ccf9f6":"# Find Condition resources \n\nresCondition = []\nfor j in range(len(resources)):\n    if resources[j].__class__.__name__ == 'Condition':\n        resCondition.append(resources[j])\n        \nconditions = []\nconditionOnsetDates = []\nfor j in range(len(resCondition)):\n    oneCondition = Condition.parse_obj(resCondition[j])\n    conditions.append(oneCondition.code.text)\n    conditionOnsetDates.append(str(oneCondition.onsetDateTime.date()))  \n    \nonePatConditions = pd.DataFrame()\n\nonePatConditions['ConditionText'] = conditions\nonePatConditions['ConditionOnsetDates'] = conditionOnsetDates\nonePatConditions['PatientUID'] = onePatientID\n\nprint(onePatConditions.shape)\nonePatConditions.sample(1)","72afcd70":"# Find Observation resources \n\nresObservation = []\nfor j in range(len(resources)):\n    if resources[j].__class__.__name__ == 'Observation':\n        resObservation.append(resources[j])\n        \nobsText = []\nobsValue = []\nobsUnit = []\nobsDate = []\n\nfor j in range(len(resObservation)):\n    oneObservation = Observation.parse_obj(resObservation[j])\n    obsText.append(oneObservation.code.text)\n    if oneObservation.valueQuantity:\n        obsValue.append(round(oneObservation.valueQuantity.value,2))\n        obsUnit.append(oneObservation.valueQuantity.unit)\n    else:\n        obsValue.append('None')\n        obsUnit.append('None')\n    obsDate.append(oneObservation.issued.date())\n    \n\nonePatObs = pd.DataFrame()\n\nonePatObs['ObservationText'] = obsText\nonePatObs['ObservationValue'] = obsValue\nonePatObs['ObservationUnit'] = obsUnit\nonePatObs['ObservationDate'] = obsDate\nonePatObs['PatientUID'] = onePatientID\n\nprint(onePatObs.shape)\nonePatObs.sample(1)","0cbeead7":"# Find MedicationRequest resources \n\nresMedicationRequest = []\nfor j in range(len(resources)):\n    if resources[j].__class__.__name__ == 'MedicationRequest':\n        resMedicationRequest.append(resources[j])\n        \nmeds = []\nmedsDates = []\nfor j in range(len(resMedicationRequest)):\n    oneMed = MedicationRequest.parse_obj(resMedicationRequest[j])\n    meds.append(oneMed.medicationCodeableConcept.text)\n    medsDates.append(str(oneMed.authoredOn.date()))  \n    \nonePatMeds = pd.DataFrame()\n\nonePatMeds['MedicationText'] = meds\nonePatMeds['MedicationDates'] = medsDates\nonePatMeds['PatientUID'] = onePatientID\n\nprint(onePatMeds.shape)\nonePatMeds.sample(1)","d80d2c5a":"# Find Procedure resources \n\nresProcedures = []\nfor j in range(len(resources)):\n    if resources[j].__class__.__name__ == 'Procedure':\n        resProcedures.append(resources[j])\n        \nprocs = []\nprocDates = []\nfor j in range(len(resProcedures)):\n    oneProc = Procedure.parse_obj(resProcedures[j])\n    procs.append(oneProc.code.text)\n    procDates.append(str(oneProc.performedPeriod.start.date()))  \n    \nonePatProcs = pd.DataFrame()\n\nonePatProcs['ProcedureText'] = procs\nonePatProcs['ProcedureDates'] = procDates\nonePatProcs['PatientUID'] = onePatientID\n\nprint(onePatProcs.shape)\nonePatProcs.sample(1)","b6869a14":"# Find Encounter resources \n\nresEncounters = []\nfor j in range(len(resources)):\n    if resources[j].__class__.__name__ == 'Encounter':\n        resEncounters.append(resources[j])\n        \nencounters = []\nencountDates = []\nencountLocation = []\nencountProvider = []\n\nfor j in range(len(resEncounters)):\n    oneEncounter = Encounter.parse_obj(resEncounters[j])\n    encounters.append(oneEncounter.type[0].text)\n    encountLocation.append(oneEncounter.serviceProvider.display)\n    if oneEncounter.participant:\n        encountProvider.append(oneEncounter.participant[0].individual.display)\n    else:\n        encountProvider.append('None')\n    encountDates.append(str(oneEncounter.period.start.date()))  \n    \nonePatEncounters = pd.DataFrame()\n\nonePatEncounters['EncountersText'] = encounters\nonePatEncounters['EncounterLocation'] = encountLocation\nonePatEncounters['EncounterProvider'] = encountProvider\nonePatEncounters['EncounterDates'] = encountDates\nonePatEncounters['PatientUID'] = onePatientID\n\nprint(onePatEncounters.shape)\nonePatEncounters.sample(1)","36a6d121":"# Find Claim resources \n\nresClaims = []\nfor j in range(len(resources)):\n    if resources[j].__class__.__name__ == 'Claim':\n        resClaims.append(resources[j])\n        \nclaimProvider = []\nclaimInsurance = []\nclaimDate = []\nclaimType = []\nclaimItem = []\nclaimUSD = []\n\nfor j in range(len(resClaims)):\n    oneClaim = Claim.parse_obj(resClaims[j])\n    # Inner loop over claim items:\n    for i in range(len(resClaims[j].item)):\n        claimProvider.append(oneClaim.provider.display)\n        claimInsurance.append(oneClaim.insurance[0].coverage.display)\n        claimDate.append(str(oneClaim.billablePeriod.start.date()))\n        claimType.append(oneClaim.type.coding[0].code)\n        claimItem.append(resClaims[j].item[i].productOrService.text)\n        if resClaims[j].item[i].net:\n            claimUSD.append(str(resClaims[j].item[i].net.value))\n        else:\n            claimUSD.append('None')\n    \nonePatClaims = pd.DataFrame()\n\nonePatClaims['ClaimProvider'] = claimProvider\nonePatClaims['ClaimInsurance'] = claimInsurance\nonePatClaims['ClaimDate'] = claimDate\nonePatClaims['ClaimType'] = claimType\nonePatClaims['ClaimItem'] = claimItem\nonePatClaims['ClaimUSD'] = claimUSD\nonePatClaims['PatientUID'] = onePatientID\n\nprint(onePatClaims.shape)\nonePatClaims.sample(1)\n","25ac6e19":"# Find Immunization resources \n\nresImmunization = []\nfor j in range(len(resources)):\n    if resources[j].__class__.__name__ == 'Immunization':\n        resImmunization.append(resources[j])\n        \nimmun = []\nimmunDates = []\nfor j in range(len(resImmunization)):\n    oneImmun = Immunization.parse_obj(resImmunization[j])\n    immun.append(oneImmun.vaccineCode.coding[0].display)\n    immunDates.append(str(oneImmun.occurrenceDateTime.date()))  \n    \nonePatImmun = pd.DataFrame()\n\nonePatImmun['Immunization'] = immun\nonePatImmun['ImmunizationDates'] = immunDates\nonePatImmun['PatientUID'] = onePatientID\n\nprint(onePatImmun.shape)\nonePatImmun.sample(1)","441bc3b6":"%%time\n\nfor fileNum in tqdm(range(len(filesList))):\n#for fileNum in range(100):\n    f = open('\/kaggle\/input\/fhir-1ksample\/fhir\/'+filesList[fileNum],)\n    json_obj = json.load(f)\n\n    oneBundle = Bundle.parse_obj(json_obj)\n\n    # Resources \n    resources = []\n    if oneBundle.entry is not None:\n        for entry in oneBundle.entry:\n            resources.append(entry.resource)\n    \n    onePatient = Patient.parse_obj(resources[0])\n\n    # Patient demographics ########################################\n    onePatientID = onePatient.id\n\n    PATIENT.loc[len(PATIENT.index)] = [onePatientID, onePatient.name[0].family, \n                                       onePatient.name[0].given[0], onePatient.birthDate, onePatient.gender] \n    \n    # Find Condition resources ########################################\n    resCondition = []\n    for j in range(len(resources)):\n        if resources[j].__class__.__name__ == 'Condition':\n            resCondition.append(resources[j])\n\n    conditions = []\n    conditionOnsetDates = []\n    for j in range(len(resCondition)):\n        oneCondition = Condition.parse_obj(resCondition[j])\n        conditions.append(oneCondition.code.text)\n        conditionOnsetDates.append(str(oneCondition.onsetDateTime.date()))  \n\n    onePatConditions = pd.DataFrame()\n\n    onePatConditions['ConditionText'] = conditions\n    onePatConditions['ConditionOnsetDates'] = conditionOnsetDates\n    onePatConditions['PatientUID'] = onePatientID\n\n    CONDITION = pd.concat([CONDITION, onePatConditions], ignore_index = True, axis=0)\n    CONDITION.reset_index()\n    \n    # Find Observation resources ########################################\n    resObservation = []\n    for j in range(len(resources)):\n        if resources[j].__class__.__name__ == 'Observation':\n            resObservation.append(resources[j])\n\n    obsText = []\n    obsValue = []\n    obsUnit = []\n    obsDate = []\n\n    for j in range(len(resObservation)):\n        oneObservation = Observation.parse_obj(resObservation[j])\n        obsText.append(oneObservation.code.text)\n        if oneObservation.valueQuantity:\n            obsValue.append(round(oneObservation.valueQuantity.value,2))\n            obsUnit.append(oneObservation.valueQuantity.unit)\n        else:\n            obsValue.append('None')\n            obsUnit.append('None')\n        obsDate.append(oneObservation.issued.date())\n  \n    onePatObs = pd.DataFrame()\n\n    onePatObs['ObservationText'] = obsText\n    onePatObs['ObservationValue'] = obsValue\n    onePatObs['ObservationUnit'] = obsUnit\n    onePatObs['ObservationDate'] = obsDate\n    onePatObs['PatientUID'] = onePatientID\n\n    OBSERVATION = pd.concat([OBSERVATION, onePatObs], ignore_index = True, axis=0)\n    OBSERVATION.reset_index()\n    \n    # Find Medication resources ########################################\n    resMedicationRequest = []\n    for j in range(len(resources)):\n        if resources[j].__class__.__name__ == 'MedicationRequest':\n            resMedicationRequest.append(resources[j])\n\n    meds = []\n    medsDates = []\n    for j in range(len(resMedicationRequest)):\n        oneMed = MedicationRequest.parse_obj(resMedicationRequest[j])\n        meds.append(oneMed.medicationCodeableConcept.text)\n        medsDates.append(str(oneMed.authoredOn.date()))  \n\n    onePatMeds = pd.DataFrame()\n\n    onePatMeds['MedicationText'] = meds\n    onePatMeds['MedicationDates'] = medsDates\n    onePatMeds['PatientUID'] = onePatientID\n    \n    MEDICATION = pd.concat([MEDICATION, onePatMeds], ignore_index = True, axis=0)\n    MEDICATION.reset_index()\n    \n    # Find Procedure resources ########################################\n    resProcedures = []\n    for j in range(len(resources)):\n        if resources[j].__class__.__name__ == 'Procedure':\n            resProcedures.append(resources[j])\n\n    procs = []\n    procDates = []\n    for j in range(len(resProcedures)):\n        oneProc = Procedure.parse_obj(resProcedures[j])\n        procs.append(oneProc.code.text)\n        procDates.append(str(oneProc.performedPeriod.start.date()))  \n\n    onePatProcs = pd.DataFrame()\n\n    onePatProcs['ProcedureText'] = procs\n    onePatProcs['ProcedureDates'] = procDates\n    onePatProcs['PatientUID'] = onePatientID\n\n\n    PROCEDURE = pd.concat([PROCEDURE, onePatProcs], ignore_index = True, axis=0)\n    PROCEDURE.reset_index()\n    \n    # Find Encounter resources ########################################\n    resEncounters = []\n    for j in range(len(resources)):\n        if resources[j].__class__.__name__ == 'Encounter':\n            resEncounters.append(resources[j])\n\n    encounters = []\n    encountDates = []\n    encountLocation = []\n    encountProvider = []\n\n    for j in range(len(resEncounters)):\n        oneEncounter = Encounter.parse_obj(resEncounters[j])\n        encounters.append(oneEncounter.type[0].text)\n        encountLocation.append(oneEncounter.serviceProvider.display)\n        if oneEncounter.participant:\n            encountProvider.append(oneEncounter.participant[0].individual.display)\n        else:\n            encountProvider.append('None')\n        encountDates.append(str(oneEncounter.period.start.date()))  \n\n    onePatEncounters = pd.DataFrame()\n\n    onePatEncounters['EncountersText'] = encounters\n    onePatEncounters['EncounterLocation'] = encountLocation\n    onePatEncounters['EncounterProvider'] = encountProvider\n    onePatEncounters['EncounterDates'] = encountDates\n    onePatEncounters['PatientUID'] = onePatientID\n    \n    ENCOUNTER = pd.concat([ENCOUNTER, onePatEncounters], ignore_index = True, axis=0)\n    ENCOUNTER.reset_index()\n    \n    # Find Claim resources ########################################\n    resClaims = []\n    for j in range(len(resources)):\n        if resources[j].__class__.__name__ == 'Claim':\n            resClaims.append(resources[j])\n\n    claimProvider = []\n    claimInsurance = []\n    claimDate = []\n    claimType = []\n    claimItem = []\n    claimUSD = []\n\n    for j in range(len(resClaims)):\n        oneClaim = Claim.parse_obj(resClaims[j])\n        # Inner loop over claim items:\n        for i in range(len(resClaims[j].item)):\n            claimProvider.append(oneClaim.provider.display)\n            claimInsurance.append(oneClaim.insurance[0].coverage.display)\n            claimDate.append(str(oneClaim.billablePeriod.start.date()))\n            claimType.append(oneClaim.type.coding[0].code)\n            claimItem.append(resClaims[j].item[i].productOrService.text)\n            if resClaims[j].item[i].net:\n                claimUSD.append(str(resClaims[j].item[i].net.value))\n            else:\n                claimUSD.append('None')\n\n    onePatClaims = pd.DataFrame()\n\n    onePatClaims['ClaimProvider'] = claimProvider\n    onePatClaims['ClaimInsurance'] = claimInsurance\n    onePatClaims['ClaimDate'] = claimDate\n    onePatClaims['ClaimType'] = claimType\n    onePatClaims['ClaimItem'] = claimItem\n    onePatClaims['ClaimUSD'] = claimUSD\n    onePatClaims['PatientUID'] = onePatientID\n    \n    CLAIM = pd.concat([CLAIM, onePatClaims], ignore_index = True, axis=0)\n    CLAIM.reset_index()\n\n    # Find Immunization resources ########################################\n    resImmunization = []\n    for j in range(len(resources)):\n        if resources[j].__class__.__name__ == 'Immunization':\n            resImmunization.append(resources[j])\n\n    immun = []\n    immunDates = []\n    for j in range(len(resImmunization)):\n        oneImmun = Immunization.parse_obj(resImmunization[j])\n        immun.append(oneImmun.vaccineCode.coding[0].display)\n        immunDates.append(str(oneImmun.occurrenceDateTime.date()))  \n\n    onePatImmun = pd.DataFrame()\n\n    onePatImmun['Immunization'] = immun\n    onePatImmun['ImmunizationDates'] = immunDates\n    onePatImmun['PatientUID'] = onePatientID\n    \n    IMMUNIZATION = pd.concat([IMMUNIZATION, onePatImmun], ignore_index = True, axis=0)\n    IMMUNIZATION.reset_index()\n","b62d60b7":"print(PATIENT.shape)\nPATIENT.sample(1)","d371b6a6":"print(CONDITION.shape)\nCONDITION.sample(1)","e77bd006":"print(OBSERVATION.shape)\nOBSERVATION.sample(1)","be5e85ea":"print(MEDICATION.shape)\nMEDICATION.sample(1)","72fd93f5":"print(PROCEDURE.shape)\nPROCEDURE.sample(1)","d47e90ed":"print(ENCOUNTER.shape)\nENCOUNTER.sample(1)","5346be29":"print(CLAIM.shape)\nCLAIM.sample(1)","773428b8":"print(IMMUNIZATION.shape)\nIMMUNIZATION.sample(1)","a2c1b9f7":"# Save the tables created\n\nPATIENT.to_csv('PATIENT.csv', index=False)\nCONDITION.to_csv('CONDITION.csv', index=False)\nOBSERVATION.to_csv('OBSERVATION.csv', index=False)\nMEDICATION.to_csv('MEDICATION.csv', index=False)\nPROCEDURE.to_csv('PROCEDURE.csv', index=False)\nENCOUNTER.to_csv('ENCOUNTER.csv', index=False)\nCLAIM.to_csv('CLAIM.csv', index=False)\nIMMUNIZATION.to_csv('IMMUNIZATION.csv', index=False)","cb03cd6c":"# ONE bundle = ONE patient","06527fe3":"## Encounter","7c3feee4":"CONDITION = pd.concat([CONDITION, onePatConditions], ignore_index = True, axis=0)\nCONDITION.reset_index()\nCONDITION","77ed6352":"## Claim ... Itemized\nAs one claim may have many items, there is an ADDITIONAL internal loop running thru these items","91f418a4":"## Condition","baf08a5c":"#  ALL patients\n\nLoop on all files and extract \/ populate the relational tables, like we did above for ONE patient","90ae7719":"## Medication","dcd265d8":"# Results","105ee8af":"## Procedure","bff6494a":"# Goal: \n### Parse 1k FHIR json files into patient related tables: meds, labs, encounters, claims, etc.\n\n![Screen Shot 2021-10-07 at 6.03.05 PM.png](attachment:f84e5574-71e2-4f2c-9a41-12258fa0917b.png)\n\nFast Healthcare Interoperability Resources\n\nData from https:\/\/synthea.mitre.org\/downloads (FHIR R4 version)\n\nMany thanks to https:\/\/github.com\/nazrulworld\/fhir.resources\n\n## Input\n* 983 json files using FHIR schema, each file being a bundle of one patient data \n\n## Output\n* 8 tables with the **PatientUID** as the PK\/FK connecting the tables in a 1:Many relationship:\n\n### ONE Patient may have many instances in the following tables: \n* Condition\n* Encounter\n* Observation\n* Medication\n* Procedure\n* Claim ... *Itemized*\n* Immunization\n\n\n\n* **NOTE:** If you'd like to further analyze the data w SQL...you can upload the csv tables created by this notebook into any relational db: MySQL, Postgres, T-SQL, etc.","61b629cf":"## Observation","492d7d84":"## Patient demographics","fb881b79":"## Immunization"}}