{"cell_type":{"5bd946e9":"code","7e120666":"code","00a2d034":"code","5f8661cc":"code","1283b5c0":"code","b11ce332":"code","58f49456":"code","a1bc00a8":"code","a16d518e":"code","cac307a5":"code","dc33d20d":"code","736aeb5e":"code","cd0e1754":"code","69cb425f":"code","fc0eb6dd":"code","c7cc8784":"code","c3647342":"code","c7e10f81":"markdown","6e8fc194":"markdown"},"source":{"5bd946e9":"import numpy as np\nimport os\nimport pandas as pd\nimport sys\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB, BernoulliNB, GaussianNB\nfrom sklearn.svm import LinearSVC,SVC\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier, ExtraTreesClassifier, AdaBoostClassifier, BaggingClassifier\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.linear_model import Ridge, RidgeCV, ElasticNet, LassoCV, LassoLarsCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, f1_score, accuracy_score, roc_auc_score, recall_score, precision_score,make_scorer\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nsns.set(color_codes=True)\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom catboost import CatBoostClassifier\nnp.random.seed(25)\nimport os","7e120666":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","00a2d034":"train.head()","5f8661cc":"target = train['target']","1283b5c0":"train.isnull().sum()","b11ce332":"sns.countplot(train['target'])","58f49456":"print(any(train.duplicated())) ","a1bc00a8":"correlations = train.corr().abs().unstack().sort_values(kind=\"quicksort\").reset_index()\ncorrelations = correlations[correlations['level_0'] != correlations['level_1']]\ncorrelations.tail(10)","a16d518e":"feature_names = [x for x in train.columns if x not in ['ID_code','target']]","cac307a5":"# model = CatBoostClassifier(iterations=5000,eval_metric='AUC',random_seed=42,verbose=False,task_type='GPU')\n# print(cross_val_score(model, train_pca, target, cv=5, scoring=make_scorer(roc_auc_score)))","dc33d20d":"model = CatBoostClassifier(iterations=5000,learning_rate=0.01,eval_metric='AUC',random_seed=42,verbose=False,task_type='GPU')\n## model training and prediction\nmodel.fit(train[feature_names],target)\npred1 = model.predict_proba(test[feature_names])","736aeb5e":"model = lgb.LGBMClassifier(n_estimators=5000,n_jobs = -1,learning_rate=0.01)\n## model training and prediction\nmodel.fit(train[feature_names],target)\npred2 = model.predict_proba(test[feature_names])","cd0e1754":"model = xgb.XGBClassifier(n_estimators=5000,n_jobs = -1,learning_rate=0.01)\n## model training and prediction\nmodel.fit(train[feature_names],target)\npred3 = model.predict_proba(test[feature_names])","69cb425f":"model = RandomForestClassifier(n_estimators=1000,n_jobs = -1)\n## model training and prediction\nmodel.fit(train[feature_names],target)\npred4 = model.predict_proba(test[feature_names])","fc0eb6dd":"pred = []\nfor i in range(len(pred1)):\n    pred.append((pred1[i][1] + pred2[i][1] + pred3[i][1] + pred4[i][1])\/4)","c7cc8784":"## make submission\nsub = pd.DataFrame()\nsub['ID_code'] = test['ID_code']\nsub['target'] = pred\nsub.to_csv('result.csv', index=False)","c3647342":"sub.head()","c7e10f81":"No *duplicates* in the data.","6e8fc194":"Given dataset is **unbalanced**."}}