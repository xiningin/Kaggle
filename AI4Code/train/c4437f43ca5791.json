{"cell_type":{"e407453c":"code","ffebd61d":"code","015c224c":"code","1f48bd4a":"code","0086d46b":"code","f610b4f8":"code","82dc73be":"code","fa5e9af9":"code","565a8c91":"code","bbcb8fab":"code","cfa86295":"code","f21848da":"code","1ccadf12":"code","9554ec47":"code","d60d8fdb":"code","a76de764":"code","a0a174e8":"code","d5d7d9b6":"code","2c59161e":"code","5118c1a4":"code","a1076019":"code","34ef7bdf":"code","e0ffeb2c":"code","35e1288b":"code","d6b5b227":"code","cb4b75be":"code","f26976bf":"code","88a941cf":"code","6cd68cd7":"markdown","e33af359":"markdown","f920288a":"markdown","18ddfadc":"markdown","8a183d08":"markdown","eca8f5b0":"markdown","9b4362a9":"markdown","5bb236ea":"markdown","9b0bd024":"markdown","5549f021":"markdown","497b4b37":"markdown","764c41ea":"markdown","3413c9e7":"markdown","a37c5d11":"markdown","5775628b":"markdown","94d8843d":"markdown","f0319dad":"markdown","03e19038":"markdown","8ccc1e8c":"markdown","0f551239":"markdown","123ab59e":"markdown","2837200d":"markdown","20835cd1":"markdown","064728ab":"markdown","f4b72522":"markdown","ac53b655":"markdown"},"source":{"e407453c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ffebd61d":"Sample=pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\nprint(Sample.head(10))\nprint(Sample.shape)","015c224c":"Train=pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\nprint(Train.shape)\nTrain.head(10)","1f48bd4a":"Test=pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint(Test.shape)\nTest.head(10)\n","0086d46b":"x_Train=Train.drop(labels=\"label\",axis=1)\ny_Train=Train[\"label\"]\ny_Train.head(10)","f610b4f8":"plt.figure(figsize=(15,7))\nsns.countplot(y_Train,palette=\"icefire\")\nplt.title(\"number of digit classes\")\ny_Train.value_counts()","82dc73be":"img=x_Train.iloc[3].values\nimg=img.reshape((28,28))\nplt.imshow(img,cmap=\"gray\")\nplt.title(y_Train[3])\nplt.axis(\"off\")\nplt.show()","fa5e9af9":"x_Train=x_Train\/255\nx_Test=Test\/255\nx_Train=x_Train.values.reshape(-1,28,28,1)\nx_Test=x_Test.values.reshape(-1,28,28,1)\nprint(\"x train shape\",x_Train.shape)\nprint(\"x test shape\",x_Test.shape)","565a8c91":"X_train, X_val, ml_train, ml_val = train_test_split(x_Train, y_Train, test_size = 0.1, random_state=2)","bbcb8fab":"from keras.utils.np_utils import to_categorical\nY_train=to_categorical(y_Train,num_classes=10)","cfa86295":"X_train, X_val, Y_train, Y_val = train_test_split(x_Train, Y_train, test_size = 0.1, random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_val shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_val shape\",Y_val.shape)","f21848da":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n#\nmodel.add(Conv2D(filters = 8, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 4, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2),name='feature_layer'))\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","1ccadf12":"model.summary()","9554ec47":"optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\nepochs = 50 # for better result increase the epochs\nbatch_size = 250\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.5, # Randomly zoom image 5%\n        width_shift_range=0.5,  # randomly shift images horizontally 5%\n        height_shift_range=0.5,  # randomly shift images vertically 5%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images","d60d8fdb":"datagen.fit(X_train)\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)","a76de764":"from matplotlib import pyplot as plt\nplt.figure(figsize=(15,10))\nplt.grid(color='r', linestyle='dotted', linewidth=0.5)\nplt.plot(history.history['accuracy'], 'o-', color = '#9900CC')\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","a0a174e8":"y_pred = model.predict(X_val)\nY_pred = np.argmax(y_pred, 1) # Decode Predicted labels\nY_val = np.argmax(Y_val, 1) # Decode labels","d5d7d9b6":"import seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\naccuracies = []\ndef confusion(y_true,y_pred):\n    fig = plt.figure(figsize=(8,8)) # Set Figure\n    mat = confusion_matrix(y_true, y_pred) # Confusion matrix\n\n    # Plot Confusion matrix\n    sns.set(font_scale=2)\n    sns.heatmap(mat.T, square=True, annot=True, cbar=False, cmap=plt.cm.YlGnBu,fmt=\"d\")\n    plt.title(\"Confusion Matrix\")\n    plt.xlabel('Predicted Values')\n    plt.ylabel('True Values');\n    plt.show();\n    print(accuracy_score(y_true,y_pred))\n    accuracies.append(accuracy_score(y_true,y_pred))","2c59161e":"confusion(Y_val,Y_pred)","5118c1a4":"from keras.models import Model\nnew_model=Model(inputs=model.input,outputs=model.get_layer('feature_layer').output)","a1076019":"train_x=new_model.predict(X_train)\ntest_x=new_model.predict(X_val)\nprint(train_x.shape)\nprint(test_x.shape)","34ef7bdf":"train_x=train_x.reshape(train_x.shape[0],train_x.shape[1]*train_x.shape[2]*train_x.shape[3])\ntest_x=test_x.reshape(test_x.shape[0],test_x.shape[1]*test_x.shape[2]*test_x.shape[3])\nprint(train_x.shape)\nprint(test_x.shape)","e0ffeb2c":"#import KNeighborsClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(train_x, ml_train)\ntrain_accuracy = knn.score(train_x, ml_train)\ntest_accuracy = knn.score(test_x, ml_val) \nprint(train_accuracy)\nprint(test_accuracy)\ny_pred = knn.predict(test_x)","35e1288b":"confusion(ml_val,y_pred)","d6b5b227":"from sklearn import svm\n#Create a svm Classifier\nclf = svm.SVC(kernel='linear') # Linear Kernel\n#Train the model using the training sets\nclf.fit(train_x, ml_train)\n#Predict the response for test dataset\ny_pred = clf.predict(test_x)\nconfusion(ml_val,y_pred)\nfrom sklearn.metrics import accuracy_score\naccuracy_score(ml_val,y_pred)","cb4b75be":"from sklearn import tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(train_x, ml_train)\ny_pred = clf.predict(test_x)\nconfusion(ml_val,y_pred)","f26976bf":"accuracies","88a941cf":"Labels = [\"DLNN\",\"KNN\",\"SVM\",\"DT\"]\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=['Method', 'Accuracies'],\n                line_color='darkslategray',\n                fill_color='lightskyblue',\n                align='left'),\n    cells=dict(values=[Labels, # 1st column\n                       accuracies], # 2nd column\n               line_color='darkslategray',\n               fill_color='lightcyan',\n               align='left'))\n])\n\nfig.update_layout(width=500, height=300)\nfig.show()","6cd68cd7":"Normally a separate \u2018learning from scratch\u2019 is performed for each task in machine learning. But since it is possible and advantageous to use a number of information learned from some tasks in other tasks, the information obtained from the source tasks is used to solve the target task. Features and weights derived from previously trained models with learning transfer are used for a new task. For this method to work, the information to be transferred must be general information, meaning that instead of being specific to the source task, the information that is appropriate for both the source and target tasks is transferred.","e33af359":"*In this part, we will take the new features from the model and apply machine learning methods*","f920288a":"# Decision Tree","18ddfadc":"![](https:\/\/i.giphy.com\/media\/1ZDHH6zox36D1vfNsE\/200w.webp)","8a183d08":"# *-Creation of the model*","eca8f5b0":"![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAQ4AAAC7CAMAAACjH4DlAAABEVBMVEX\/\/\/87ZZnk49ivrK2zsbL09PTMysvn5tv39\/NQcZ7r6+EAAADw7+jt7OUvXpVefKS7yNn5+\/1XdqLa4e2AlbOuvdJ3jq5GaZno7vW\/ydnm7PXI0+GWqcPP1+KpuMpJa5aOoLve5Oubq8F1jrFphqzT09MmV4\/m5eW8urqdrsWst9B9lLUNTIkrWY3t7O0rWpSbmJmLiIkdUYrEwrqopZ5eWVsARYS8urLW1MvEwbpsZmg5ZJQOAADR0NDPzsW0sKqfnJY7MzZIQENTTU+FgIItJSh5c3UlGx8AO4B9eXV7d3KkopqVko0cDRIiFBpUUlMPQXWttsGLocRvhrK8x+CfqsqctdbQ1umgoqxiboaBj6cwNpHNAAAbWklEQVR4nO2dC2OayNrHhyjmUPflpgQQsFAQRbwSY6xpNVe7e5rseY9tNue83\/+DvM8M4BUNzb1d\/9uNOA4M\/Jh55sIwD0I77bTTS0qIN+ilYHolGi2gzaLp5WPN4wpKvKWsHGD1q4JeXkVKZuQTUZIpxozSd8h56Q7yjTBAO0G8jMpS+E1pWnCuZrvRkKMQ5MmyTDkaHKOIjyHobKNBefiXghrGMOP0zKBxouGj+AEcwCDp0vN0y\/h0ZFZBqthoBAcCiYtP4IVkqHzgqZpHaRJDEQ5Kg1yIyaGia5E4WoD4JpIa4aUp\/QJSWFktlSRXDO+oLquqavCuxnOughRK5kuWRDHwI8+RCIVmlJzuqiW9KSCt4RiKpX+oy7N0S40yQpaqUr7KI7\/hWYrGWS5JUw1eCgfcy0YB7i8DWyyPvxdZFn8ADrPtlvBmhKPd0GIcskN2VZwIh4j\/8i78Ybz4R4EBFHpAiPpBlPNInhEAuR5+X0qXIkFyGe8WxhdeA4cRnRaHz1VpaCwuBDh32L6LTyvCIXt9XHqUfkkKlst5hANnAd9UG9GPCkTn2kW85bpRueNCVL4Y7UnSFctRugQL4BAafHRuQVhYXgNHCW9AxgdTgEIcDnKgGMc4WKTjjKQ0Sk5x+RAeVfY8TW1iw6LafhzMmcjVMTndcbwwyHKpMgS4fLwnpGvhoyKdwUkjgmOWGwTX5EGm+6wElhTiYItOw8TfAh5CtBgH4qBgz3Ags2FhHAy5OAtONDQnHuXABatu0Q5sxHjxkYu20hfw10DT7Tg1jw14kmS4J05Xj9JVSGkEHGUqjs3KRLHpeQGFOCg\/wPeIXDQyxRkOJMrCHAcYgRLdL8FtB\/GUTIW3LbYdU3w93DQ+slPUWGxReArxC3UD5LGwDCBcJ0XplvHRp9jwAg6SFDm31yssDMnkFLkfcIoxDoER+TkOZDeNRkmP754fVhwz2+FwmOzsWngdvrdVRoICsdBskSUuLlDr6WIcVr8QH4LgeA1TWmqABeUDXFZ5sHgxDuABVc0MB3LarhVXDKXI5OnYIOI4QqDPa41iE1sPKA9tAX4gxcNoYjNLSUY\/Ki0kXT5OV+WgTMlQujgmOrfg9WoWqaEg2SRhRl\/RYxxIgKI7x4EcuIV834Tr0tgwcyzULBpcJ9\/HjTHFhuNikykE+Jgn9fDyoCRJfQuMEK69tHId0q0vpYtkiEk3RdzW01+h3UH\/Djh0XLY5mf89ah8wRbAfUVFAyokgNZAUnxMDOVmj+iduP65gwiqB7yNsXGhkyP1ms89YyPodtzp83HhxQrRGELiEhOQ2KLcveSvpyj5iSdPE7jepRlPpq7Mjv5RKcKNp0rhWlLifICgQMvumCNCBEOa\/4b8Wr83MAdk7Ci\/hUGhclmYhwjwKfNHUaDeD14S1dHGq4e+Kxhfifo1QetIL3mmnnXbaaaeddnoGSQcpZb72mb6IbE1JJ\/m1z\/QH9bBx9YOSoqYSFQ3d\/CxSl0fgtj3VWNCBUralFKpLkvwaDzIeLI0M1iHyaEKDHnIZoeKJbMx+9xL3Ahw8SldcOKOUkvHryDKdBYmUS4bZPjQLhgE9YwZ6ybo3GzV0+kbSMQgO1rZtf6tsEsPxkw7xRmQE7JIoigw2NcOnENOmhWydDHLjTO7EY+8rIjiAnJBGBVt4u\/nDZCnR4WLh3GHiYBcPFwqBypnIDtgSIqNvm2jEOEyGSyOHe8Ex6h+UzlKLX7VozNHmkGCp7slJE9nFJmZjBnKwqVqIcEytlImK90d5Ja3gUM3wk34f9FUG0PQ1xyv38ViR2dhYSca5wxAoOY0omdqQz15bKzhasy3DItUsLu0oLOyFjQeJcRQUJ2WyWnIV9epawfEwzXDQDtIYMYVkWWR+wKD+40mUIqEnx1GX7o9P5KRvkP1j70mUIqUnxyHx0LRNIZOyi3rK4xMc+1jh39nnHv43D9tb\/X2+\/Yo4DngrhUqWlbZHh3HsH45Gh3v7g73B4Wgw2Ds83IPPfdja2xvsjSDocI9sD0aHxyOIdTw4xD\/CJ4402n9FHCWkaGlEaVpiK3dVgGN\/MN7rja5Px73Tj8enx4Pj4+vD8fV4\/Mfh4f4\/xxB2\/Mdocjja+6N3Pfo6vr4+3etd9rrvjk\/3xqfjf\/ZOXxOHhQ6KH1LI+\/AhVeqksJx+7PWOB73e4Ct8ng4Ox\/Axuh5\/7e0ff+2NeuNTCB3vHZ6ejsaAAAeMT4HaeDw4Pe71XrOwWDiDpBOTJtLcdiRpzU4saDAgH+9etbBY+F86pcfxKBFTmqKm\/SlwoHdPod9SJPRz4HgxbWyk\/4ieDMfn7Mvr8xYcvLnhtKvhE\/\/khnXco30sjkw15V5PqWpm4cuGDv6nm\/xl51O+g446KHOEKn\/m8+isVs0DylYWDpFbOmKEo\/hIHK3cxmjPqdrCDDLAYS+Io9yQx1EWdSbVPBp2UPYI3XRQBZ1nz4AE6uSzrS9nSwd8IhzVyqMuK4Vy5+dHKHNRqw6z3U6uhSbn5zVUWciTgCNpcJDgGGauCI4hYAFdXF2SXbo3VxfLheYeHELJUKW6p+t6XVJXho5fFkc2A8X9Cl1kJ\/TksoPLfie7imNx4I6h2iYJxzi+5KtLOC7OyJW0\/vyUWU5lKw7FaTTY9xweNT5wuPftRsNe6Mu+OA64nRfdVm4C2zX4klnDsRh\/9mAB47gcXqLuEE0u0dUlXUPnteEQn\/SfF538Mo9tOEoN31rKD4LluHMeaXGQ8h3O2RKiYSmafMx\/TSGCA52jTucSbMEE3Ydj9tiJ2I5WvkKf5a9aqHqe\/4IuavSfcLgO5JHuxVIq23BEsxWX5M8HS1PhELrVYauTzR3lzunOUW4yhFybG2bRWfU8k+tmhrmjynkqM0xw0FVUraEWTZLbjiOh3UEv\/A1Pbi3KFhxGkFA3C40ZrTkO4x4cw0nurDqZwMV3oW4c5ia12lG1WwEcF9WjaqezYd8lZTOrIdtxPExbcJh20g7cbKh0jsPzWxsLy7+yw2yn2+lmO5XOsDYZttAlGmYnuW6XHl5mu7Wjz5MfwVHL0RkUJvbCONjE4Xd+NvAzx1EPnGdvhYU4qp2jy043LF1rOJ7gla\/NOAqBomiSZ9oOh0eMOcc2PV5TlEZsTOVmLIpiixtTeCJFuaN11ap1QwgYh1oio3OlkqVMnyZ31JdwFGIcBY5iXTdsz4TC202XopzoMYW82ORx0zbeHqoQx+fPk2pl0sVtSoLjf91YTZZ6ktzhJeKQAmqT2OiR3nsvls262tZUnkAhDnrSRZnWJckeBAfLtiM9Jw4FcgHrsgks2jgrkCpnwXa4ahVPKNCT9EE3FYMMJ3rwF3\/Hfz6Qf7oulE3zg2maOOgDiW\/iLdgsJ+FYFMbx7\/norf00tmNeWOpz2yG1Kda3pDUeLF+wWaqtLuPwCrhm0bRoHkAcHD33R5ohTW+\/fde+i6L5jZ2KLPPtdtqGMtZmWIUp8B5EgrvLurrIskFZwkWUYlaeBqeoaJ8CR2kZR5Q7PACByMuZyzTwDBLAQZ5PvZ8dRCDtjtnQOu7m\/CVJ6qwBY\/CsY9uOI94KKmU61Hd0x7BivW57jMLJ7xnHcSjI6+xfHNU2JLnNia6jvRKO8hYc\/ioOHb+NSLX5ZRxhq1SL7Ic9lXhVVXnJ4Wc4GBXdfePEuud\/uyuJjm4z\/vc7VSmwgANMMuMwAmQIipMJc0nU\/IBLxiFcXQkPx0FfXWz9PSos5gqOMvSWD6zyemGRCk6cO1Yb6VHu4GcP6AROiHBIol7Xnen0lhFvFUX0p5RooDubr7cVbmqzQbEgC032L9nicC\/d9wNjym7AQX\/K02lwJPeFKvn81lHDqLAk4ACLmWRKXWJBtuDwDcEqGJpRKCEvrII0KCyyLX2f+t\/12zsBSbZ369h1G44EONjABF4Uj0F4PMf6dlh3c9E10eHHrLDQ8fVsb5XyyRMNsts7SN77EzUBh+eyW+RuyR28x6sGaRiBCfGsEIf07fZWMv1pSVEU+M3xfVt0poyMcYhK2bKncP1tigpQ0ZZ8VpdCHNl8Fx1BX\/TT2QKOStwfuKeD31+pmlJKSsJhmFtlbcShWQsTXC2EX5HGhcWsi7Zx56ulwq3\/zZ\/at\/b3O1sv3bqAAzlF9y\/IdAXGbZZ1j\/dZmWE9jCMT4chfzXG0Ztl9Hcf8qbpfdCg3iUfrvgEFCewYmuLpLgs4kFDAWuvS0gvBaziwKf038vi4RikX1ALehsJS10RHQXXdsqS7O1\/0balQ4LySiQsLxYq2Y8DFKCXb5WSoZSiqaZDC0gr\/x0t\/zHLH0RHahIMljTL8NxwcXO90VfM39\/AQFAVPhlrBwTeaTXd9fp3UgPTClReScfBQWmKIRhn6EyEOvS4yGlJNRbjTBE30JUNR\/G\/ON6hZ4MRlUXZctjC1mbZiYuPkara\/wZTOtY6DWRQ0nNYvtprP3z\/exHqitYJDbWNDt44DW1fW2IyjDE2qeF4uLQgaKXkG\/w1yhIoks4SUuj6FbYim6j5cvqjpFFSvssKK+JMqeJBykQlNaRKObncjjsX4WiOxV1lN8TjKMBxLSMDBJuNob8gdZHkKaG9JRijdtk1yZgYvM+J3yB22UVIM6dYzfenOqBt1EQoLNGagS8DwRYot4XYOWePE3Ihji+1YqmjVxNGalDJNb9bBJx1WtQG9xITCEmwpLBiHwCMlbp3C3qQKwhUtxan6nXRbr099\/fa7Ijnfb8U7lVS0bd2CRqgs\/yU2KYphNfxGub05d8w2tuPYMF8rl2qM25Lq9hIOQYVekbpuSnGwtsGUEhy6MTelhkGMO+BgICvILKN+v739JorfCqXpVKTugIUiTu2i6kJBp3xonlJTTrcDsInyRhwzPaRVWkljO8iFipa5gCOFktsdgjK\/L9EmbpXeqd+m0E1xRF+cis5dQapzFKPXAYdntn2pLRYoTS5D14U1DeghsIUH9FlSDP+0bs7uj0QuwzQ59VE4DDvs0H+Y9+3DTduQGm7AfHNdqAXbFFgLihJtmW26bqCIgeuKNmy1Gw1TbLddrgi1jNtoJOKgj\/7ITaJHs6s42k8wGrYoyVOcR+DYPM0\/ae\/FwDiGsPbLXCGOyufLy8tJaEufG4dh2yelR+B4VsVjpf9C9GWH8HhuHAj36KCvnzLuC+Po4JXnhKvLVqbTyeB16Faf0T4DDmgSNR8yVa76eWO0J1Lu4uISMkelQlcRfkI7vLjIodxCo+o5cICKD5o5mOrR0ZNrMdXnwuGQ92Zt\/P9WLaUuZF5Di2fwTDiENNOwsd7Yi5NP8lDy19EKjvUG9bw5mnYSxc+s1fkd9fDz7MsRdPtoNMnnK0dddHSJMvl8t3oDXeMvN2B76Gw4Z+5X01oHP3w756Z6lWvlUfe8Va1W89m8kMtXhFz1E0KXZIJYJp+hzz79evkFcPjTaPByOp060YjuVfeGbuWFKzJkfJnPhBQwju75BAd2bs7OHjYn901LXXqtuB0PDl51hl06L3whOPBMuckMx1EWt+Loq0+v00p4Zmn2whud72WKJQNAN9XMBY0LC92qEhy4sHyuQvHoksLSOjvv5H9JHkvSgnA47OrqSw6b0mE+nyM4UAeb0k\/5bucGY8h+ocmcuV9c6uqLsPNHCvSSqRBQ6uUsfmI99\/SbnXbaaaeddtppp5122mmnnXba6deW5PtF+Kf5vjlzs0MeSn2IRh0UW0GKTzE8Eop4QceSidd1PECmX9TjgQkdj\/TyJJzMmwlnz1h+sSgJCMWzACUdlT1UjMZrDBJcxjNn3tBDMH46bTumLrm670ZPbl0yB9qLXru1+orQFHmvzwuBbZpThXLwgDc6cUyxHxEUTYQfmevwM5lDELp1MhrTKcvSiIpmvpkidvRhR6nwAUIllvVUSdy0qOLrCL\/uhD2MCMTvFX5ZCn94bSr0N9FQiJ8vK\/QbhlAYC1ESfjcoPAJx8aPP5vwUAuLNy8COsICUHIT5g3jUQrYbxuPbSGiGoMpvajkR7BgldOVFFk098cjShB7jECduGEf4Vm7kpmkBh9IPc9AKDtsnDrIM7MbH45Dsh+ttRjgcmcykA8bmm1yEeYYDXyH2F0M8qXgM9vVEcCCZxTZACPCsU0SZBl5pC0fml3IHA+HYc4nSt0jGIH8cE2JaZEGOCEdRYHFZgn2baZfCe1ERHCxfl8nNgtxN3IEBDoFhBIJD0N3AQ4Lbdt2GIrOu657APeeLse0gOD7gcJyBTMj7so5f9ZYkrqlgcAZ2Txjh8JHi2jhFJSx8yhubURDiEMMHowZ+1xa7A8M+jwRZJDgQdkPkLRcWWWyLcc2yVFiIzyreFZDhcg1dCDOd1q\/PcaCS60OK0fGcfhAcvOT13qOosISrGDjs1C86cN+Ikz+BciIcUIJWbAevxu4Sl3F4Aa66A5wlBOLXKCyDfewbLMKBrMBU2yQLkUmLctplEF9CEQ4LO1eyAh9Xo6IT4kAKxbiKTt5naK6ZUjs2hYs4BNbGR3AojEOAMhbiQHyDmeOAyoehiMMt8qWRdorfS4jgcPFtVeJFLYy+EuIAHq5i40DRXsMhNM3wCBy+uxEOKa6G1ALULGq\/EOGAH5w5DihJFPZTiDkU3MdMyX9qCfhpOfH1JYqR+y3sDsyLbn0pUBSW9SlWEcL1yVns5e6EVAva72F0DoIY3cULCKtU7CpOLuDVif2mwEavLnkiOnBQvEI5dg8o2H3RF\/tvyXJAzoAsW8J1hMJrcfvQ4q34XfQC1CySCTWtwJO8rRLveoi8aqtFLxBiv3cFEl7go+epCl\/ice0MB4otLo\/wKvDxSxFkV8szvbdUUnbaaae\/p5RCSv09Jk0cOGkWwAY131K\/4NmUej3fH1gg\/SfWQUk9eZ9G8nsq1frXP7fIIh7p5D37Ij+vL4LDTOUPjeEO3lLP8VlEcFClUioXT6U3NSj5HCI45PtWqYjFmuavPQ8zwqGXUzY\/nF\/bOXKMw4DeZRpxHv8r9yBnOAQqjcs8kJfW18\/PqDkODglGGqmioW02IP\/47Ye15jXgCQ7xFDh4LnGpvFV5OrexqfIgvworF\/PbAw7xLDjSLqgkSZsm+sdeN+L\/95fd9yz474kDknFsdNyR4LHjGXGYchqXVxwnBsldGOKx5\/i49240ONwfjT+O9\/d6A+yWp7c3Ojzu7e3D9mg8ejceYX8so\/FgPxHH\/sfD49Fhb3A8HhwfQvwB\/Dn8SsJGX0fH+7A1PjzsfRyNvh6PU3oteQiOYtp+fHELjtHH4eDo+LTXOx0fjnrvet3rvd67vaPR4elg7+j4uge0jse9\/clg3BttwDE+PD297hweH348vb4+HQyuT0+BTfd6\/O56cjrGh+yN\/hiMr0\/Hg7QuflJpFUcB8al8olGMyCQQITgGo9540DveG8OF7496cGf3cMh4dDr4OPiKg9\/1IAeNesfjjxtwjPYP9z6OB4M9nDOOR3vwBzLZYDSCHDP6uA9Z7OMhPjLoWXNHAelaKp+bArITctKax55kK3C\/7dhqPV7MdmAcafvx\/iYcv07N8lgc6Lf\/+WGt+ed5K+2OJ8DxlvSA4apfGUc5fnZrFE0w+7jW\/PeH8rzFlNAbfTocrUctx5G4lmjtnp1q209QiiaV8X3zQENWv4gQ4zCzLhffXx\/eezocj3tdOWnJt9p96\/OvuCPCC7wvyyU8wmfeOuMKSJS0eMU1qZHw4P\/JcFQf6VsgYeGI+9eSWFlfzVnz4hPAOQp9UioCS+YRJ+P5FAJnJdN4OhyVR+JIyPj3lAWUgENe7Gs60ZL2TZw7tAaecsiJLNgOWma9RBr34BB43efeYxcDLvVetKfSIoG3iGNptUIpWjBSapgHhmMbfJ9mymR+lSAHyVNktuLgG7KvS6pmFAoFQ+W9ItdfWAn0zeOYPQnRfFPBqxJ\/MMqGYuLX8IUNfjK24dD6a+MaJWp+nDeP4wGj3NtwUAnjH0p\/BuHN43iAtuAoJHk0Qs7s0dMiDvrJcWhvDYeeaG342apDizhU\/bEV7eq1H+hvDAcVzmMTlNBNTrQg69zhlb8w3mE0DpbXFKpWW1VUaaFqBT5bNF5upgWbwEyoRV+XT6S2MnzgB16Mg0aCQEOQAFs0WS083uk\/S16lDe4ZcRQCyfM5uenOveRQoq3zTFxaio5v2z78B38dyl1eyX847ExqR1VUu+xOqt1MLvulkrmoDC8raJirnecyXyorrdj\/us0lQZMyttqZTOey1r3Mfqb\/Vb2gzyvDWbb5v6C9KGp1WeCnw+GRFt6anwUIYp3QphST3DjGushkzqrDaqeV6Zyji4tctnOUPap2P2fREH3unGe7RysZ\/b9tdqVFycqxv43OsJvrTM6hI5A5r3Y7V7OM9X+Bu6jnw0GWcN8gNpxBW5S3rNTeQbVsbVJBLfjI5GrZXK1Swy7QoHcyzH3O1WrVlSb4f6TyoiSOZeIYn1EN4uMOSq5G1zrVymzX\/5SWnNI\/W2FRAnzVCW44XAayZOiVZMl2BO8fuR7Zqt0sysLbMaUqlAkJujprGcNCFvbfgnddrFk0+6lrFlN4QzUL36ZwX2fNwxNu8NtsuErZIg7l0T3aN90MwziMdY9G1AlUd\/GibW++Vfp0jXTAQbGms248GJOhfhYc9agL1+12c7lup4UyOZTD3lePuqhTQcQhI\/EHO9\/lQPI34aASLGkY+JPgkMIXaFDmalLpHF1eQe0PKNDwLDtEZzXijrZzRaPuwur6hueoSTga7hYFZLzxLeKQvQXZrBvyOK+hbqeaR9DW6QxbxI3H+YQsNli9Ou8uey0uS8I6DsEI5z6tze4IQ0kV+xZxJA0OIsgKkA2+ZDCOzPDznzjo4iZ08U1\/uVk+iCZyCc0wBbtFNNeGmheDl3E81v97wsDomqeJ+2IUiHO5mdmHBlL4IhTGMbwhLr47EzqPb9x55xOh3b05O19dz1ZG3ioOC6+I2l6bR1rAwZGX+ZWR9EyFfrhanYRqoJq5Z69MQtNvoRdYj18ovYLC0s18QdkbDKH7CczIWa2GsXTyNfrqauUQJxy1hoM4gVtzsFZYCF597FTNPULr1wWi79npnpq0Ho9Q1KrYh1oGOpSkNsl1azioBts0ZJHqWqEUgMGjcbw5PXwOvSeLzjIO4tFobXSwRIJ\/EhyPkKD8es9oHyOB8pwdjrkMzSwjc4djJt6WuB2OmRSe3+FYUlEq+DscM2mmyexwLEpP+8pb0kTKX0+SzKTTyd\/iVdKddrpf1Va1WvtMV1ot3P37TNee3wHcW1buIpOd5DLnHZruToSzyoQ+\/zvzyGWval101pmgVucye9Tt5o4mr31Or6hqq1LttHJ0BQmdSg7hIZr7By93+hX0\/9bNQofV8xiNAAAAAElFTkSuQmCC)","9b4362a9":"# Comparison of Test Accuracies","5bb236ea":"# Let's go to study let...","9b0bd024":"![](https:\/\/miro.medium.com\/max\/1000\/1*LUFUl_8fqS97nUzpcFjgWw.png)","5549f021":"# Result","497b4b37":"If you look at the results of the tried methods, it seems that the success of the test is very high. But looking at DLNN (Deep Learning Neural Network), it seems that training accuracy is low. This value can be increased by increasing the number of filters or epochs. The reason we use a small number of filters in this study is to reduce the number of features and get results in less time than long-term methods such as knn. If you want, you can observe how the results change by playing with these values. Thank you for reading.","764c41ea":"*In this model, 196 features are created from each 28x28 image. By looking at the Flatten layer, you can see the number of features to create.*","3413c9e7":"# *- Editing of data*","a37c5d11":"First, we will apply CNN to the data set of numbers. CNN also gives us an attribute layer after convalution and pooling operations. We will apply KNN,SVM and Decision Tree machine learning methods to this layer. We will compare the achievements achieved.","5775628b":"# KNN","94d8843d":"# SVM","f0319dad":"# *Please don't forget like this tutorial and follow me! *","03e19038":"# What are we going to do with this study?","8ccc1e8c":"# Transfer Learning","0f551239":"The reason for low educational achievement here may be due to the use of a small number of epochs or filters.","123ab59e":"*target values reserved for CNN*","2837200d":"[https:\/\/blog.osmanballi.com](https:\/\/blog.osmanballi.com)","20835cd1":"*target values reserved for machine learning*","064728ab":"# Data Transfer","f4b72522":"Learning transfer is a method of machine learning that stores the information that it receives when solving a problem, just like us, and uses that information when it encounters another problem. With learning transfer, models that show higher success and learn faster with less educational data are obtained using previous information.","ac53b655":"![](https:\/\/i.giphy.com\/media\/diUKszNTUghVe\/giphy.webp)"}}