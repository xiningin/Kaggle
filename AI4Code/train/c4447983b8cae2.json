{"cell_type":{"fd002f16":"code","10d28547":"code","ba7c0b33":"code","7eaca278":"code","3642780f":"code","39063d49":"code","065c1f99":"code","4d302e3d":"code","5eb218cb":"code","135744bf":"code","15f1a367":"code","a0be5d29":"code","b7ecef65":"code","672e72ae":"code","03c45701":"code","74e944c1":"code","7d02a0ef":"code","bcb9bf84":"code","24f425cc":"code","054b2a86":"code","db576b8a":"code","1442fa18":"code","dd5d80cc":"code","284b899c":"code","f74c751d":"code","77375587":"code","c9c6e8fb":"code","6dc9a4b1":"code","27aae87b":"code","a67f5805":"code","16be2ad7":"code","db97e074":"code","40680b7f":"code","8a5b2232":"markdown","d93da655":"markdown","8f8d9202":"markdown","6f359a16":"markdown","f2825b12":"markdown","35f44341":"markdown","984a8a27":"markdown","eb5cb396":"markdown","5117d49e":"markdown","f4108258":"markdown","49e51292":"markdown","9313be89":"markdown","dd8394bd":"markdown","15b85910":"markdown","0f95b7a2":"markdown","bd1c6ccb":"markdown","650de4ee":"markdown","60dd0158":"markdown","61150ce7":"markdown","0cc17633":"markdown"},"source":{"fd002f16":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport geopy.distance\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom xgboost import XGBClassifier\nimport pickle","10d28547":"train_df = pd.read_csv('..\/input\/cat-reloaded\/Train.csv')\ntrain_df.head()","ba7c0b33":"train_df.info()","7eaca278":"plt.figure(figsize = (20,10))\nsns.heatmap(train_df.corr())","3642780f":"train_df.client_type.value_counts()","39063d49":"irrelevant_cols = ['ID', 'order_id', 'client_id', 'vendor_type', 'rider_id', 'Rider ID']\ndf_f = train_df.drop(columns=irrelevant_cols)\ndf_f.head()","065c1f99":"df_f['hour']= pd.to_datetime(df_f['dispatch_time'] , format='%H:%M:%S').apply(lambda t: t.hour)\ndf_f.drop(['dispatch_time'], axis =1, inplace = True)","4d302e3d":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf_f['client_type'] = le.fit_transform(df_f['client_type'])","5eb218cb":"df_f.head()","135744bf":"def order_distance(row):\n    coords_1 = (row['pickup_lat'], row['pickup_long'])\n    coords_2 = (row['drop_off_lat'], row['drop_off_long'])\n    return geopy.distance.geodesic(coords_1, coords_2).miles\n\ndef rider_distance(row):\n    coords_1 = (row['pickup_lat'], row['pickup_long'])\n    coords_2 = (row['rider_lat'], row['rider_long'])\n    return geopy.distance.geodesic(coords_1, coords_2).miles","15f1a367":"df_f['order_distance'] = df_f.apply(order_distance, axis=1)\ndf_f['rider_distance'] = df_f.apply(rider_distance, axis=1)\n\ndf_f.drop(['pickup_lat', 'pickup_long', 'drop_off_lat', 'drop_off_long','rider_lat', 'rider_long'], axis =1, inplace = True)","a0be5d29":"df_f.head()","b7ecef65":"plt.figure(figsize = (20,10))\nsns.heatmap(df_f.corr(), annot=True)","672e72ae":"X = df_f.drop(['target'], axis =1)\ny = df_f['target']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, test_size = 0.25, stratify = y)\n\nprint('Training Features Shape : ', X_train.shape)\nprint('Training Target Shape : ', y_train.shape)\nprint('Testing Features Shape : ', X_test.shape)\nprint('Testing Target Shape : ', y_test.shape)","03c45701":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","74e944c1":"dummy_clf = DummyClassifier(strategy=\"most_frequent\", random_state=0)\ndummy_clf.fit(X_train, y_train)\n\nprint(\"Train set accuracy: {:.2f}\".format(dummy_clf.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.2f}\".format(dummy_clf.score(X_test, y_test)))","7d02a0ef":"from sklearn.ensemble import RandomForestClassifier\nrf_clf = RandomForestClassifier(n_estimators= 200, max_depth= 9, random_state=35)\nrf_clf.fit(X_train, y_train)\n\nprint(\"Train set accuracy: {:.2f}\".format(rf_clf.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.2f}\".format(rf_clf.score(X_test, y_test)))","bcb9bf84":"# random_grid = {'n_estimators': [100 , 200, 300, 400], 'max_depth': range(1,20)}\n# rf_random = RandomizedSearchCV(estimator = RandomForestClassifier(), param_distributions = random_grid,\n#                                  cv = 5, random_state=35, n_jobs = -1)\n\n# rf_random.fit(X_train, y_train)\n\n# print('Random Forest Best Parameters : ', rf_random.best_params_)","24f425cc":"xgb_clf = XGBClassifier(n_estimators=100, max_depth = 4,use_label_encoder=False, eval_metric='mlogloss',\n                        learning_rate=0.3, seed = 0)\nxgb_clf.fit(X_train, y_train)\n\nprint(\"Train set accuracy: {:.2f}\".format(xgb_clf.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.2f}\".format(xgb_clf.score(X_test, y_test)))","054b2a86":"param_grid = {\"learning_rate\" : [0.001, 0.01, 0.1, 0.3] }\nsearch = GridSearchCV(XGBClassifier(n_estimators=100, max_depth = 4,use_label_encoder=False, eval_metric='mlogloss',\n                         gamma = 0.1,min_child_weight=3, seed = 0), param_grid, cv=5)\nsearch.fit(X_train, y_train)\nprint('GridSearchCV Best Parameters : ', search.best_params_)","db576b8a":"param_grid = { \"max_depth\" : [ 3, 4, 5, 6]}\nsearch = GridSearchCV(XGBClassifier(n_estimators=100,use_label_encoder=False, eval_metric='mlogloss',\n                         gamma = 0.1,min_child_weight=3, seed = 0), param_grid, cv=5)\nsearch.fit(X_train, y_train)\nprint('GridSearchCV Best Parameters : ', search.best_params_)","1442fa18":"param_grid = {\"gamma\" : [ 0.0, 0.1, 0.2 ]}\nsearch = GridSearchCV(XGBClassifier(n_estimators=100, max_depth = 4,use_label_encoder=False, eval_metric='mlogloss',\n                         min_child_weight=3, seed = 0), param_grid, cv=5)\nsearch.fit(X_train, y_train)\nprint('GridSearchCV Best Parameters : ', search.best_params_)","dd5d80cc":"param_grid = {\"min_child_weight\" : [ 1, 3, 5 ]}\nsearch = GridSearchCV(XGBClassifier(n_estimators=100, max_depth = 6,use_label_encoder=False, eval_metric='mlogloss',\n                         gamma = 0.2,learning_rate=0.3, seed = 0), param_grid, cv=5)\nsearch.fit(X_train, y_train)\nprint('GridSearchCV Best Parameters : ', search.best_params_)","284b899c":"param_grid = {\"learning_rate\"    : [0.05, 0.10, 0.20] ,\n             \"max_depth\"        : [ 3, 4, 6],\n             \"min_child_weight\" : [ 1, 3, 5 ],\n             \"gamma\"            : [ 0.0, 0.1, 0.2 ],\n             \"colsample_bytree\" : [ 0.3, 0.4, 0.5  ] }\n\nsearch = GridSearchCV(XGBClassifier(use_label_encoder=False, eval_metric='mlogloss'), param_grid, cv=5)\nsearch.fit(X_train, y_train)\nprint('GridSearchCV Best Parameters : ', search.best_params_)","f74c751d":"xgb2_clf = XGBClassifier(\n                     learning_rate =0.1,\n                     n_estimators=200,\n                     max_depth=5,\n                     min_child_weight=3,\n                     gamma=0,\n                     subsample=0.8,\n                     colsample_bytree=0.8,\n                     nthread=4,\n                     use_label_encoder=False,\n                     eval_metric='mlogloss',\n                     seed=0)\nxgb2_clf.fit(X_train, y_train)\n\nprint(\"Train set accuracy: {:.2f}\".format(xgb2_clf.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.2f}\".format(xgb2_clf.score(X_test, y_test)))","77375587":"gbc_clf = GradientBoostingClassifier(random_state= 0)\ngbc_clf.fit(X_train, y_train)\n\nprint(\"Train set accuracy: {:.2f}\".format(gbc_clf.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.2f}\".format(gbc_clf.score(X_test, y_test)))","c9c6e8fb":"xgb = XGBClassifier(n_estimators=200, random_state=1)\nrf = RandomForestClassifier(max_depth = 9, random_state=1)\ngbc = GradientBoostingClassifier(random_state= 0)\n\nvoting_clf = VotingClassifier(estimators=[('xgb', xgb), ('rf', rf), ('gbc', gbc)], voting='soft')\nvoting_clf.fit(X_train, y_train)\nprint(\"Train set accuracy: {:.2f}\".format(voting_clf.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.2f}\".format(voting_clf.score(X_test, y_test)))","6dc9a4b1":"df_test = pd.read_csv('..\/input\/cat-reloaded\/Test.csv')\ndf_test.head()","27aae87b":"irrelevant_cols = ['ID', 'order_id', 'client_id', 'vendor_type']\ndf_test = df_test.drop(columns=irrelevant_cols)\ndf_test['hour']= pd.to_datetime(df_test['dispatch_time'] , format='%H:%M:%S').apply(lambda t: t.hour)\ndf_test.drop(['dispatch_time'], axis =1, inplace = True)\ndf_test['client_type'] = le.transform(df_test['client_type'])\ndf_test['order_distance'] = df_test.apply(order_distance, axis=1)\ndf_test['rider_distance'] = df_test.apply(rider_distance, axis=1)\ndf_test.drop(['pickup_lat', 'pickup_long', 'drop_off_lat', 'drop_off_long','rider_lat', 'rider_long', 'rider_id', 'Rider ID'], axis =1, inplace = True)\nX_t = scaler.transform(df_test.values)","a67f5805":"y_pred_rf = rf_clf.predict(X_t)\ny_pred_xgb = xgb_clf.predict(X_t)\n#y_pred_gbc = gbc_clf.predict(X_t)\n#y_pred_voting = voting_clf.predict(X_t)\ny_pred_dummy = dummy_clf.predict(X_t)","16be2ad7":"df_submit = pd.read_csv('..\/input\/cat-reloaded\/sample_submission.csv')\ndf_submit.head()","db97e074":"xgb_submit = df_submit.copy()\nxgb_submit['target'] = y_pred_xgb\nxgb_submit.to_csv('xgb_submit.csv', index =False)\n","40680b7f":"voting_submit = df_submit.copy()\nvoting_submit['target'] = y_pred_voting\nvoting_submit.to_csv('voting_submit.csv', index =False)","8a5b2232":"# Check Training Data","d93da655":"# Test Data","8f8d9202":"# Drop Irrelevant Columns","6f359a16":"# GradientBoosting Classifier","f2825b12":"XGB is the best classifier for this problem with accuracy 61-62% which may be increased with some optimization","35f44341":"# Split Data","984a8a27":"# Handling Test Data","eb5cb396":"# Handling Distance","5117d49e":"# Handling Time\n> I chose hour to be my feature","f4108258":"## Tuning Learning Rate","49e51292":"## Tuning Min Child weight","9313be89":"# Scaling","dd8394bd":"## Tunining gamma","15b85910":"# Submission","0f95b7a2":"# Handling Categorical Data","bd1c6ccb":"# Dummy Classifier","650de4ee":"# Voting Classifier","60dd0158":"# XGB Classifier","61150ce7":"# Random Forest","0cc17633":"## Tuning Max Depth"}}