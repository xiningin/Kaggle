{"cell_type":{"01a3d5cc":"code","797970e4":"code","1db1279b":"code","4829f52b":"code","de567113":"code","f7219986":"code","c40a9699":"code","10d2da5f":"code","457a4307":"code","4a0c9a71":"code","095ce44b":"code","370db088":"code","ae32c2e6":"markdown","e4fa4507":"markdown","a5a1f5d4":"markdown","5358f882":"markdown","c760e8f6":"markdown","d1c83bc3":"markdown"},"source":{"01a3d5cc":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306eimport\nfrom dataclasses import dataclass\nfrom pathlib import Path\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nimport librosa\nimport librosa.display\nimport IPython\n\nfrom sklearn.preprocessing import minmax_scale, MinMaxScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\n\nimport seaborn as sns\nfrom pdb import set_trace as st","797970e4":"INPUT = '..\/input\/hah-data-science-challenge\/'","1db1279b":"# \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\ndf_train = pd.read_csv(INPUT + 'train.csv', index_col=False)\ndf_test = pd.read_csv(INPUT + 'test.csv', index_col=False)\n\n# meta_data\u306b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u8ffd\u52a0\ndf_train['filepath'] = INPUT + 'train\/train\/' + df_train['\u30d5\u30a1\u30a4\u30eb']\ndf_test['filepath'] = INPUT + 'test\/test\/' + df_test['\u30d5\u30a1\u30a4\u30eb']\n\n# train\u3068test\u3092\u3072\u3068\u3064\u306b\ndf = pd.concat([df_train, df_test]).reset_index(drop=True)","4829f52b":"# \u540d\u5bc4\u305b\nrecording_map = {\n    'PC\u5185\u81d3': 'PC\u5185\u8535', \n    'PC\u5185\u8535': 'PC\u5185\u8535', \n    'USB1': 'USB1', \n    'USB2': 'USB2', \n    'USB3': 'USB3', \n    'USB4': 'USB4', \n    '\u30b9\u30de\u30db': '\u30b9\u30de\u30db', \n    '\u30b9\u30de\u30db\u306e\u30dc\u30a4\u30b9\u30ec\u30b3\u30fc\u30c0': '\u30b9\u30de\u30db', \n    '\u5185\u8535\u30de\u30a4\u30af': 'PC\u5185\u8535'\n}\n\ndistance_map = {\n    '10cm': '10cm',\n    '10\u339d': '10cm',\n    '1M': '1m',\n    '20cm': '20cm',\n    '20\u339d': '20cm',\n    '2M': '2m',\n    '2m': '2m',\n    '30cm': '30cm',\n    '30cn': '30cm',\n    '30\u339d': '30cm',\n    '3m': '3m',\n    '40cm': '40cm',\n    '40\u339d': '40cm',\n    '50cm': '50cm',\n    '50\u339d': '50cm',\n    '5cm': '5cm',\n    '8cm': '8cm',\n    '\uff11\uff2d': '1m'\n}\n\ndf['\u9332\u97f3\u65b9\u6cd5'] = df['\u9332\u97f3\u65b9\u6cd5'].replace(recording_map)\ndf['\u30de\u30a4\u30af\u8ddd\u96e2'] = df['\u30de\u30a4\u30af\u8ddd\u96e2'].replace(distance_map)\n\n# \u306e\u3061\u307b\u3069\u30e9\u30d9\u30eb\u306b\u4f7f\u3046\ndf['\u306d\u3058_\u30d7\u30ec\u30fc\u30c8'] = '\u306d\u3058' + df['\u306d\u3058'] + '_\u30d7\u30ec\u30fc\u30c8' + df['\u30d7\u30ec\u30fc\u30c8']\ndf['\u9332\u97f3\u65b9\u6cd5_\u30de\u30a4\u30af\u8ddd\u96e2'] = df['\u9332\u97f3\u65b9\u6cd5'] + '_' + df['\u30de\u30a4\u30af\u8ddd\u96e2']\ndf['\u6761\u4ef6'] = df['\u306d\u3058_\u30d7\u30ec\u30fc\u30c8'] + '_' + df['\u9332\u97f3\u65b9\u6cd5_\u30de\u30a4\u30af\u8ddd\u96e2'] + '_' + df['Target'].astype(str)","de567113":"# \u30e9\u30d9\u30eb\u3042\u308a\u30c7\u30fc\u30bf\u306e\u307f\u6b8b\u3059\ndf = df[~df['Target'].isnull()].copy()\ndf = df.sort_values('\u6761\u4ef6')\ndf = df.reset_index(drop=True)","f7219986":"# FFT\nfilelist = df['filepath'].to_list()\n\nspectra = []\nfrequencies = []\nfor i, filename in enumerate(tqdm(filelist)):\n    y, sr = librosa.core.load(filename,sr=None)\n    y = y[:40000]\n    fft = np.fft.fft(y)\n    spectrum = np.abs(fft)\n    frequency = np.linspace(0, sr, int(len(spectrum)\/2))\n    spectrum = spectrum[:int(len(spectrum)\/2)]\n    spectra.append(spectrum)\n    frequencies.append(frequency)\nspectra = minmax_scale(spectra, axis=1)","c40a9699":"df_frq = pd.DataFrame(spectra)\ndf = pd.concat([df, df_frq], axis=1)","10d2da5f":"def get_wav_filepath(file_stem):\n    if 'train' in file_stem:\n        filepath = INPUT + f'train\/train\/{file_stem}.wav'\n    elif 'test' in file_stem:\n        filepath = INPUT + f'test\/test\/{file_stem}.wav'\n    return filepath","457a4307":"# \u53ef\u8996\u5316\u7528\u30af\u30e9\u30b9\nclass SoundInfo:\n    def __init__(self, files):\n        if type(files) != list:\n            self.files = [files]\n        else:\n            self.files = files\n        self.file_n = len(self.files)\n\n    def audio(self):\n        for file in self.files:\n            print(file)\n            filepath = get_wav_filepath(file)\n            display(IPython.display.Audio(filepath))\n        \n    def signal(self):\n        fig, axes = plt.subplots(figsize=(20, 3*self.file_n), nrows=self.file_n,sharex=True)\n        for i, file in enumerate(self.files):\n            filepath = get_wav_filepath(file)\n            y, sr = librosa.core.load(filepath,sr=None)\n            librosa.display.waveplot(y, sr=sr, label=file, ax=axes[i])\n            axes[i].legend()\n        fig.suptitle('signal')\n        \n    def meta(self):\n        train = pd.read_csv(INPUT + 'train.csv', index_col=False)\n        test = pd.read_csv(INPUT + 'test.csv', index_col=False)\n        df = pd.concat([train, test])\n\n        filenames = [file + '.wav' for file in self.files]    \n        df = df[df['\u30d5\u30a1\u30a4\u30eb'].isin(filenames)]\n        df['\u30d5\u30a1\u30a4\u30eb'] = pd.Categorical(df['\u30d5\u30a1\u30a4\u30eb'], categories = filenames)\n        df = df.sort_values('\u30d5\u30a1\u30a4\u30eb')\n        display(df)\n\n    def fft(self):\n        fig, axes = plt.subplots(figsize=(20, 2*self.file_n), nrows=self.file_n,sharex=True)\n        for i, file in enumerate(self.files):\n            filepath = get_wav_filepath(file)\n            y, sr = librosa.core.load(filepath,sr=None)\n            y = y[:40000]\n            fft = np.fft.fft(y)\n            spectrum = np.abs(fft)\n            frequency = np.linspace(0, sr, int(len(spectrum)\/2))\n            spectrum = spectrum[:int(len(spectrum)\/2)]\n            spectrum = minmax_scale(spectrum)\n            axes[i].plot(frequency,spectrum, label=file)\n            axes[i].legend()\n            axes[i].set_xlim(0, 20000)\n            axes[i].grid(color='g', linestyle=':', linewidth=0.3)\n        fig.suptitle('fft')\n\n    def spec(self):\n        fig, axes = plt.subplots(figsize=(20, 5*self.file_n), nrows=self.file_n,sharex=True)\n        for i, file in enumerate(self.files):\n            filepath = get_wav_filepath(file)\n            y, sr = librosa.core.load(filepath,sr=None)\n            D = librosa.stft(y)\n            S_db = librosa.amplitude_to_db(np.abs(D), ref=np.max)\n            librosa.display.specshow(S_db, x_axis='time', y_axis='linear', ax=axes[i], sr=sr) \n            axes[i].set_title(file)\n        fig.suptitle('spectrogram')\n\n    def melspec(self):\n        fig, axes = plt.subplots(figsize=(20, 5*self.file_n), nrows=self.file_n,sharex=True)\n        for i, file in enumerate(self.files):\n            filepath = get_wav_filepath(file)\n            y, sr = librosa.core.load(filepath,sr=None)\n            melspec = librosa.feature.melspectrogram(y, sr)\n            log_melspec = librosa.power_to_db(melspec, ref=np.max)\n            librosa.display.specshow(log_melspec, x_axis='time', y_axis='linear', ax=axes[i], sr=sr) \n            axes[i].set_title(file)\n        fig.suptitle('log-melspectrogram')\n        \n    def mfcc(self):\n        fig, axes = plt.subplots(figsize=(20, 5*self.file_n), nrows=self.file_n,sharex=True)\n        for i, file in enumerate(self.files):\n            filepath = get_wav_filepath(file)\n            y, sr = librosa.core.load(filepath,sr=None)\n            y = (y-y.min())\/(y.max()-y.min())\n            mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=20)\n            librosa.display.specshow(mfcc, sr=sr, x_axis='time', y_axis='linear',ax=axes[i])\n            axes[i].set_title(file)\n        fig.suptitle('mfcc')\n        \n    def mfcc_mean(self):\n        fig, axes = plt.subplots(figsize=(20, 5), nrows=1,sharex=True)\n        for i, file in enumerate(self.files):\n            filepath = get_wav_filepath(file)\n            y, sr = librosa.core.load(filepath,sr=None)\n            y = (y-y.min())\/(y.max()-y.min())\n            mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=20)\n            ceps = mfcc.mean(axis=1)\n            axes.plot(ceps, label=file)\n        axes.legend()\n        fig.suptitle('mfcc_mean')\n    \n    def all_viz(self):\n        self.meta()\n        self.audio()\n        self.signal()\n        self.fft()\n        self.spec()\n        self.melspec()\n        self.mfcc()\n        self.mfcc_mean()","4a0c9a71":"def highlight_embed(df, embed, targets):\n    if type(targets) != list:\n        targets = [targets]\n        \n    plt.scatter(embed[:,0], embed[:,1], c='gray', alpha=0.2)\n    for target in targets:\n        condition = df[df['\u30d5\u30a1\u30a4\u30eb'].str.contains(target)]['\u6761\u4ef6'].values[0]\n        idx = df[df['\u30d5\u30a1\u30a4\u30eb'].str.contains(target)].index[0]\n        plt.scatter(tsne_embed[:,0][idx], tsne_embed[:,1][idx], label=target)\n    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)","095ce44b":"df2 = df[(df['\u306d\u3058']=='\u5c0f') & (df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')].reset_index(drop=True)\n\ntsne_embed = TSNE().fit_transform(df2.iloc[:, 11:])\nfig = px.scatter(x=tsne_embed[:,0],y=tsne_embed[:,1], \n                 color=df2['\u6761\u4ef6'].tolist(),\n                 hover_name=df2['\u30d5\u30a1\u30a4\u30eb'].tolist(),\n                 title='\u306d\u3058\uff1a\u5927 \u30d7\u30ec\u30fc\u30c8\u5927')\nfig.show()","370db088":"targets = ['train167', 'train98', 'train1558', 'train2618']\nhighlight_embed(df2, tsne_embed, targets)\nSoundInfo(targets).all_viz()","ae32c2e6":"## tsne\u3067\u6b21\u5143\u524a\u6e1b","e4fa4507":"# \u30c7\u30fc\u30bf\u6e96\u5099","a5a1f5d4":"# tsne\u3067\u6b21\u5143\u524a\u6e1b\u2192\u97f3\u7279\u5fb4\u78ba\u8a8d\ntsne\u3067\u6b21\u5143\u524a\u6e1b\u3057\u305f\u7d50\u679c\u3092\u5143\u306b\u3001\u78ba\u8a8d\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u9078\u629e\u3057\u3001  \n\u305d\u306e\u97f3\u306e\u7279\u5fb4\u91cf\u3092\u8272\u3005\u53ef\u8996\u5316\u3057\u307e\u3059\u3002  \n\u3053\u308c\u3092\u4f7f\u3063\u3066\u6b8b\u308a\u671f\u9593\u3067\u826f\u3044\u7279\u5fb4\u91cf\u3092\u63a2\u3057\u305f\u3044\uff01","5358f882":"# \u53ef\u8996\u5316","c760e8f6":"# \u53ef\u8996\u5316\u7528\u95a2\u6570","d1c83bc3":"## \u97f3\u7279\u5fb4\u3092\u78ba\u8a8d\n\u6b21\u5143\u524a\u6e1b\u30d7\u30ed\u30c3\u30c8\u306e\u30c4\u30fc\u30eb\u30c1\u30c3\u30d7\u3067\u898b\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092\u63a2\u3057\u307e\u3059\u3002  \ntargets\u306e\u30ea\u30b9\u30c8\u306b\u898b\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092\u5217\u6319\u3057\u307e\u3059\u3002"}}