{"cell_type":{"bf7b9aa2":"code","b7e6a680":"code","0059c2ca":"code","95d07308":"code","5747d004":"code","3515fe3a":"code","7cb29bee":"code","71d23cf7":"code","43309302":"code","239454a7":"code","52e97583":"code","bb165268":"code","8df135f6":"code","d4960ed9":"code","3ee7e67d":"code","202a2aef":"code","803e9faa":"code","537f4235":"code","f675d1c3":"code","cb6e7934":"code","a5ca5401":"code","79eacb67":"code","b06184f5":"code","df369a43":"code","591a4699":"code","87e04dc9":"markdown","0dd86be4":"markdown","9b860580":"markdown","9864cbe7":"markdown"},"source":{"bf7b9aa2":"# Importing Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","b7e6a680":"#Reading data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/test.csv\") ","0059c2ca":"#explore train data\ntrain.head()","95d07308":"#EDA using Seaborn\nsns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","5747d004":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',data=train,palette='RdBu_r')","3515fe3a":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Sex',data=train,palette='RdBu_r')","7cb29bee":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Pclass',data=train,palette='rainbow')","71d23cf7":"sns.distplot(train['Age'].dropna(),kde=False,color='darkred',bins=30)","43309302":"train['Age'].hist(bins=30,color='darkred',alpha=0.7)","239454a7":"sns.countplot(x='SibSp',data=train)","52e97583":"train['Fare'].hist(color='green',bins=40,figsize=(8,4))","bb165268":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train,palette='winter')","8df135f6":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","d4960ed9":"train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)\ntest_data['Age'] = test_data[['Age','Pclass']].apply(impute_age,axis=1)","3ee7e67d":"#Now let's check that heat map again!\nsns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","202a2aef":"#drop the Cabin column and the row in Embarked that is NaN.\ntrain.drop('Cabin',axis=1,inplace=True)\ntest_data.drop('Cabin',axis=1,inplace=True)","803e9faa":"#for train data\nsex = pd.get_dummies(train['Sex'],drop_first=True)\nembark = pd.get_dummies(train['Embarked'],drop_first=True)\ntrain.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)\ntrain = pd.concat([train,sex,embark],axis=1)\n\n\n","537f4235":"#for test data\ntest_sex = pd.get_dummies(test_data['Sex'],drop_first=True)\ntest_embark = pd.get_dummies(test_data['Embarked'],drop_first=True)\ntest_data.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)\ntest_data = pd.concat([test_data,test_sex,test_embark],axis=1)\n","f675d1c3":"#fill null value of fare column with 0\ntest_data.Fare.fillna(0 ,inplace = True)","cb6e7934":"#Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train.drop(['Survived','PassengerId'],axis=1), \n                                                    train['Survived'], test_size=0.30, \n                                                    random_state=101)","a5ca5401":"#Training and Predicting\nfrom sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","79eacb67":"predictions = logmodel.predict(X_test)","b06184f5":"#Evaluation\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","df369a43":"id = test_data['PassengerId']\npredictions = logmodel.predict(test_data.drop('PassengerId', axis=1))\n\n\nresult = pd.DataFrame({ 'PassengerId' : id, 'Survived': predictions })\n# output.to_csv('titanic-predictions.csv', index = False)\nresult.head()","591a4699":"#writing the output in csv \nresult.to_csv('predictions_final.csv', index = False)","87e04dc9":"**Using Logistic Regression**","0dd86be4":"**Building a Logistic Regression model**","9b860580":"**Data Cleaning**","9864cbe7":"**Converting Categorical Features**"}}